 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 造币厂问题
 ' 程序描述：　　n 个造币厂生产同一种硬币，但其中某些厂由于材料问题造出了非标准的硬币。设标准的硬币重c克(已知)，非标准的硬币只有一种重量，重c(1+e)克，其中e是个不为0的未知数，可以取正数或负数。

　　为了查出哪些厂生产的硬币是非标准的，从各厂中抽出一些样品(个数相同)放在一起进行称重，设计一种算法查出哪个厂子的硬币是不合格的。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86-0411-88995831
 ' 传真号码：+86-0411-88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 281
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 造币厂问题”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.程序集变量 货币数组, 整数型, , "0", 1表示正常，0表示轻，2表示重
.程序集变量 造币场总数, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：递归法
 ' 问题：造币厂问题
 ' 问题描述：
 ' n 个造币厂生产同一种硬币, 但其中某些厂由于材料问题造出了非标准的硬币.设标准的硬币重c克(已知),非标准的硬币只有一种重量,重c(1+e)克,其中e是个不为0的未知数,可以取正数或负数.为了查出哪些厂生产的硬币是非标准的,从各厂中抽出一些样品(个数相同)放在一起进行称重，设计一种算法查出哪个厂子的硬币是不合格的。
 ' 问题分析：
 ' 将所有造币厂的硬币等分为1、2、3组如有剩余划为第4组，称1、2组，
 ' '        1如果平衡异常的硬币不在1，2组中，比较1，3组如果平衡则不合格的在4组中如果不平衡不合格的在三组中。递归把该组分为最多4组。
 ' '        2如果不平衡将天平的倾斜记录下来，比较1，3组如果平衡不合格的在2组中，如果不平衡不合格在1组中。递归把该组分为最多四组。
 ' 依此类推直至最后剩余1个或两个硬币和标准重量比较后找出不合格的造币厂的编号。

 ' 备注：

_总数编辑框_内容被改变 ()

.子程序 _计算图形按钮_被单击, 空白型, , 
.局部变量 不合格厂编号, 整数型, , , 
.局部变量 局部计次变量, 整数型, , , 

赋值 (.内容, 相加 (“共”, 到文本 (造币场总数), “个造币场：”))
清除数组 (货币数组)
.如果真 (小于 (造币场总数, 1)) ' 必须是正数
    返回 ()
.如果真结束
.计次循环首 (造币场总数, 局部计次变量) ' ‘先把所有的硬币定义为标准值
    加入成员 (货币数组, 1)
.计次循环尾 ()
赋值 (不合格厂编号, 到数值 (.取项目文本 (.现行选中项)))
.判断开始 (等于 (.取项目文本 (.现行选中项), “重”)) ' 把选择的不合格硬币付值
    赋值 (货币数组 [不合格厂编号], 2)
.默认
    赋值 (货币数组 [不合格厂编号], 0)
.判断结束

比较分组造币厂子程序 (1, 造币场总数)

.子程序 比较分组造币厂子程序, 空白型, , 比较不合格分组中的硬币
.参数 起始编号, 整数型, , 比较的起始编号
.参数 本次比较的造币厂数, 整数型, , 不合格分组共有多少个厂子

.局部变量 重量1, 整数型, , , 一组的重量
.局部变量 重量2, 整数型, , , 二组的重量
.局部变量 重量3, 整数型, , , 三组的重量
.局部变量 分组数, 整数型, , , 分组后每组的个数
.局部变量 局部计次变量, 整数型, , , 

赋值 (分组数, 相除 (本次比较的造币厂数, 3)) ' 把剩余造币场的硬币按编号等分3份，如有剩余另做为第四组
.如果真 (小于 (分组数, 1)) ' 如果剩余的比较数小与等与2，则进入单个比较程序
    比较单个造币厂子程序 (起始编号, 求余数 (本次比较的造币厂数, 3))
    返回 ()
.如果真结束
 ' 获得三组的重量值
.计次循环首 (分组数, 局部计次变量)
    赋值 (重量1, 相加 (重量1, 货币数组 [相加 (相减 (起始编号, 1), 局部计次变量)]))
.计次循环尾 ()
.计次循环首 (分组数, 局部计次变量)
    赋值 (重量2, 相加 (重量2, 货币数组 [相加 (相减 (起始编号, 1), 分组数, 局部计次变量)]))
.计次循环尾 ()
.计次循环首 (分组数, 局部计次变量)
    赋值 (重量3, 相加 (重量3, 货币数组 [相加 (相减 (起始编号, 1), 相乘 (2, 分组数), 局部计次变量)]))
.计次循环尾 ()
.判断开始 (等于 (重量1, 重量2)) ' 相等则不合格硬币不在1组2组中
    相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 = ”, 到文本 (相加 (起始编号, 分组数)), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (2, 分组数))), “的重量，不合格硬币不在1组2组中”).加入文本 ()
    .判断开始 (等于 (重量3, 重量1)) ' 不合格硬币在第4组
        相加 (#换行符, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “-”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量 = ”, 到文本 (起始编号), “－”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量，不合格在4组中”).加入文本 ()
        比较分组造币厂子程序 (相加 (起始编号, 相乘 (3, 分组数)), 相减 (本次比较的造币厂数, 相乘 (3, 分组数)))
    .判断 (大于 (重量3, 重量1)) ' 不合格硬币在3组
        相加 (#换行符, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “-”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量 > ”, 到文本 (起始编号), “－”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量，3组中有超重硬币”).加入文本 ()
        比较分组造币厂子程序 (相加 (起始编号, 相乘 (2, 分组数)), 分组数)
    .默认
        相加 (#换行符, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “-”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量 < ”, 到文本 (起始编号), “－”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量，3组中有过轻硬币”).加入文本 ()
        比较分组造币厂子程序 (相加 (起始编号, 相乘 (2, 分组数)), 分组数)
    .判断结束
    
.默认
     ' 不合格硬币在1组或2组中
     ' '  1组重
    .判断开始 (大于 (重量1, 重量2))
        相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 > ”, 到文本 (相加 (起始编号, 分组数)), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (2, 分组数))), “的重量，1组重”).加入文本 ()
        .判断开始 (等于 (重量1, 重量3)) ' 不合格硬币在2组，轻
            相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 = ”, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量，2组有过轻硬币”).加入文本 ()
            比较分组造币厂子程序 (相加 (起始编号, 分组数), 分组数)
        .判断 (大于 (重量1, 重量3)) ' 不合格硬币在1组，重
            相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 > ”, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量，1组有超重硬币”).加入文本 ()
            比较分组造币厂子程序 (起始编号, 分组数)
        .默认
            
        .判断结束
        
    .默认
         ' 2组重（重量1<重量2）
        相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 < ”, 到文本 (相加 (起始编号, 分组数)), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (2, 分组数))), “的重量，2组重”).加入文本 ()
        .判断开始 (等于 (重量1, 重量3)) ' 不合格硬币在2组，重
            相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 = ”, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量，2组有超重硬币”).加入文本 ()
            比较分组造币厂子程序 (相加 (起始编号, 分组数), 分组数)
        .判断 (大于 (重量3, 重量1)) ' 不合格硬币在1组，轻
            相加 (#换行符, 到文本 (起始编号), “-”, 到文本 (相加 (相减 (起始编号, 1), 分组数)), “的重量 < ”, 到文本 (相加 (起始编号, 相乘 (2, 分组数))), “－”, 到文本 (相加 (相减 (起始编号, 1), 相乘 (3, 分组数))), “的重量，1组有过轻硬币”).加入文本 ()
            比较分组造币厂子程序 (起始编号, 分组数)
        .默认
            
        .判断结束
        
    .判断结束
    
.判断结束
返回 ()

.子程序 比较单个造币厂子程序, 空白型, , 
.参数 起始编号, 整数型, , 本次比较的第一个厂的编号
.参数 本次比较的造币厂数, 整数型, , 剩余1个造币厂或2个造币厂比较

.局部变量 重量1, 整数型, , , 本组第一号硬币的重量
.局部变量 重量2, 整数型, , , 本组第二号硬币的重量

.如果真 (等于 (本次比较的造币厂数, 0))
    返回 ()
.如果真结束
.如果真 (等于 (本次比较的造币厂数, 1))
    .判断开始 (大于 (货币数组 [起始编号], 1))
        相加 (#换行符, “第”, 到文本 (起始编号), “号硬币超重，不合格”).加入文本 ()
    .默认
        相加 (#换行符, “第”, 到文本 (起始编号), “号硬币过轻，不合格”).加入文本 ()
    .判断结束
    返回 ()
.如果真结束
赋值 (重量1, 货币数组 [起始编号])
赋值 (重量2, 货币数组 [相加 (起始编号, 1)])
.判断开始 (大于 (重量1, 重量2)) ' 1组重
    相加 (#换行符, “第”, 到文本 (起始编号), “造币厂的重量 > ”, “第”, 到文本 (相加 (起始编号, 1)), “造币厂的重量”).加入文本 ()
    .判断开始 (等于 (重量1, 1)) ' 不合格硬币在2组，轻
        相加 (#换行符, “第”, 到文本 (起始编号), “硬币”, “ = 1”, #换行符, “第”, 到文本 (相加 (起始编号, 1)), “号硬币太轻，不合格”).加入文本 ()
    .判断 (不等于 (重量1, 1)) ' 不合格硬币在1组，重
        相加 (#换行符, “第”, 到文本 (起始编号), “号硬币”, “ > 1”, #换行符, “第”, 到文本 (起始编号), “号硬币太重，不合格”).加入文本 ()
    .默认
        
    .判断结束
    
.默认
     ' 2组重（重量1<重量2）
    相加 (#换行符, “第”, 到文本 (起始编号), “硬币重量 < ”, “第”, 到文本 (相加 (起始编号, 1)), “硬币重量”).加入文本 ()
    .判断开始 (等于 (重量1, 1)) ' 不合格硬币在2组，重
        相加 (#换行符, “第”, 到文本 (起始编号), “号硬币”, “ = 1”, #换行符, “第”, 到文本 (相加 (起始编号, 1)), “号硬币太重，不合格”).加入文本 ()
        
    .判断 (不等于 (重量1, 1)) ' 不合格硬币在1组，轻
        相加 (#换行符, “第”, 到文本 (起始编号), “号硬币”, “ < 1”, #换行符, “第”, 到文本 (起始编号), “号硬币太轻，不合格”).加入文本 ()
    .默认
        
    .判断结束
    
.判断结束


.子程序 _总数编辑框_内容被改变, 空白型, , 
.局部变量 局部计次变量, 整数型, , , 

赋值 (造币场总数, 到数值 (.内容))
.如果真 (小于 (造币场总数, 0))
    赋值 (.内容, “”)
.如果真结束
清空 ()
.计次循环首 (造币场总数, 局部计次变量)
    到文本 (局部计次变量).加入项目 ()
.计次循环尾 ()
赋值 (.现行选中项, 0)



 ' 不属于任何一个程序集、类模块的函数：
