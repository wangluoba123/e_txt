 ' 文件类型：Windows模块源码

 ' 程序名称：模块
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假

窗口 游览窗口
    左边 = 50
    顶边 = 50
    宽度 = 82
    高度 = 72
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 1 1 应用接口支持库
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库




数据类型 坐标_, , 
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

.全局变量 使用, 文本型, , , 
.全局变量 浏览文件夹, 文本型, , , 

.DLL命令 移动鼠标, 空白型, "user32.dll", "SetCursorPos", , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 取指定点窗口句柄_, 整数型, "user32.dll", "WindowFromPoint", , 
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 查找窗口, 整数型, "user32.dll", "FindWindowA", , 
    .参数 a, 整数型, , 0
    .参数 b, 文本型, , 

.DLL命令 API_PostMessage, 整数型, "user32.dll", "PostMessageA", , 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 hwnd, 整数型, , 接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考PostThreadMessage）
    .参数 wMsg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 取设备场景_, 整数型, "user32.dll", "GetDC", , 
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 取点_, 整数型, "gdi32.dll", "GetPixel", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 x坐标, 整数型, , 
    .参数 y坐标, 整数型, , 

.DLL命令 取鼠标位置_, 整数型, "user32.dll", "GetCursorPos", , 
    .参数 位置, 坐标_, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (窗口1, , 真)

.子程序 模拟鼠标事件, 整数型, , 
.参数 移动鼠标X坐标, 整数型, , 
.参数 移动鼠标Y坐标, 整数型, , 
.参数 鼠标动作, 整数型, , 1.按下鼠标左键 2.释放鼠标左键 3.双击鼠标左键 4.按下鼠标右键 5.释放鼠标右键 6.双击鼠标右键 7.按下鼠标中键 8.释放鼠标中键
.参数 匿名参数_38, 空白型, , 

.局部变量 句柄, 整数型, , , 

 ' 1 WM_LBUTTONDOWN = 513;
 ' //按下鼠标左键
 ' 2WM_LBUTTONUP = 514;
 ' //释放鼠标左键
 ' 3 WM_LBUTTONDBLCLK = 515;
 ' //双击鼠标左键
 ' 4WM_RBUTTONDOWN = 516;
 ' //按下鼠标右键
 ' 5 WM_RBUTTONUP = 517;
 ' //释放鼠标右键
 ' 6 WM_RBUTTONDBLCLK = 518;
 ' //双击鼠标右键
 ' 7WM_MBUTTONDOWN = 519;
 ' //按下鼠标中键
 ' 8 WM_MBUTTONUP = 520;
 ' //释放鼠标中键
 ' '
移动鼠标 (移动鼠标X坐标, 移动鼠标Y坐标)
赋值 (句柄, 取指定点窗口句柄_ (移动鼠标X坐标, 移动鼠标Y坐标))
.判断开始 (等于 (鼠标动作, 1))
    API_PostMessage (句柄, 513, 0, 0)
.判断 (等于 (鼠标动作, 2))
    API_PostMessage (句柄, 514, 0, 0)
    
.判断 (等于 (鼠标动作, 3))
    API_PostMessage (句柄, 515, 0, 0)
    
.判断 (等于 (鼠标动作, 4))
    API_PostMessage (句柄, 516, 0, 0)
    
.判断 (等于 (鼠标动作, 5))
    API_PostMessage (句柄, 517, 0, 0)
    
.判断 (等于 (鼠标动作, 6))
    API_PostMessage (句柄, 518, 0, 0)
    
.判断 (等于 (鼠标动作, 7))
    API_PostMessage (句柄, 519, 0, 0)
    
.判断 (等于 (鼠标动作, 8))
    API_PostMessage (句柄, 520, 0, 0)
    
.默认
    
.判断结束
返回 (1)


.子程序 鼠标所在窗口句柄, 整数型, , 取到窗口句柄 1 否则返回 0
.参数 X坐标, 整数型, , 
.参数 Y坐标, 整数型, , 

返回 (取指定点窗口句柄_ (X坐标, Y坐标))


.子程序 菜鸟输入密码, 空白型, , 
.参数 欲输入密码, 文本型, , 
.参数 单击X坐标, 整数型, , 
.参数 单击Y坐标, 整数型, , 

.局部变量 循环记录, 整数型, , , 
.局部变量 取位置, 整数型, 静态, , 
.局部变量 a, 整数型, , , 

.计次循环首 (取文本长度 (欲输入密码), 循环记录)
    赋值 (取位置, 相加 (取位置, 1))
    延时 (1000)
    .判断开始 (等于 (a, 0))
        未知支持库函数_2 (单击X坐标, 单击Y坐标, 2)
        赋值 (a, 相加 (a, 1))
    .默认
        
    .判断结束
    
    .判断开始 (等于 (取文本中间 (欲输入密码, 取位置, 1), “`”))
        
        未知支持库函数_1 (#反撇号键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “1”))
        未知支持库函数_1 (#键1, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “2”))
        
        未知支持库函数_1 (#键2, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “3”))
        
        未知支持库函数_1 (#键3, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “4”))
        
        未知支持库函数_1 (#键4, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “5”))
        
        未知支持库函数_1 (#键5, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “6”))
        
        未知支持库函数_1 (#键6, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “7”))
        
        未知支持库函数_1 (#键7, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “8”))
        
        未知支持库函数_1 (#键8, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “9”))
        
        未知支持库函数_1 (#键9, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “0”))
        
        未知支持库函数_1 (#键0, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “-”))
        
        未知支持库函数_1 (#减号键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “=”))
        
        未知支持库函数_1 (#等号键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “\”))
        
        未知支持库函数_1 (#斜杠键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “/”))
        
        未知支持库函数_1 (#除号键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “*”))
        
        未知支持库函数_1 (106, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “+”))
        
        未知支持库函数_1 (107, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “.”))
        
        未知支持库函数_1 (#圆点键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “q”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Q键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Q键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “Q”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Q键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Q键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “w”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#W键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#W键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “W”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#W键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#W键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “e”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#E键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#E键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “E”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#E键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#E键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “r”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#R键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#R键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “R”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#R键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#R键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “t”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#T键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#T键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “y”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Y键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Y键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “u”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#U键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#U键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “i”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#I键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#I键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “o”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#O键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#O键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “p”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#P键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#P键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “a”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#A键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#A键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “s”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            未知支持库函数_1 (#S键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#S键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “d”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#D键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#D键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “f”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#F键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#F键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “g”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#G键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#G键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “h”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#H键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#H键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “j”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#J键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#J键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “k”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#K键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#K键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “l”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#L键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#L键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “z”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Z键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Z键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “x”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            未知支持库函数_1 (#X键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#X键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “c”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#C键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#C键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “v”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#V键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#V键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “b”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#B键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#B键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “n”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#N键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#N键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “m”))
        .判断开始 (等于 (未知支持库函数_0 (1), 真))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#M键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#M键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “T”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#T键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#T键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “Y”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Y键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Y键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “U”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#U键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#U键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “I”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#I键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#I键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “O”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#O键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#O键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “P”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#P键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#P键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “A”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#A键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#A键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “S”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#S键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#S键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “D”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#D键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#D键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “F”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#F键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#F键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “G”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#G键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#G键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “H”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#H键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#H键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “J”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#J键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#J键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “K”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#K键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#K键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “L”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#L键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#L键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “Z”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#Z键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#Z键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “X”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#X键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#X键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “C”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#C键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#C键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “V”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#V键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#V键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “B”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#B键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#B键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “N”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#N键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#N键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “M”))
        .判断开始 (等于 (未知支持库函数_0 (1), 假))
            未知支持库函数_1 (#CapsLock键, , )
            
            未知支持库函数_1 (#M键, , )
            处理事件 ()
        .默认
            
            未知支持库函数_1 (#M键, , )
            处理事件 ()
        .判断结束
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “[”))
        
        未知支持库函数_1 (#左中括号键, , )
        处理事件 ()
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “]”))
        
        未知支持库函数_1 (#右中括号键, , )
        处理事件 ()
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “;”))
        
        未知支持库函数_1 (#分号键, , )
        处理事件 ()
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “,”))
        
        未知支持库函数_1 (#逗号键, , )
        处理事件 ()
        
        
    .判断 (等于 (取文本中间 (欲输入密码, 取位置, 1), “'”))
        
        未知支持库函数_1 (#引号, , )
        处理事件 ()
    .默认
        
    .判断结束
    
.计次循环尾 ()
赋值 (a, 0)
处理事件 ()




.子程序 菜鸟输入帐号, 空白型, , 
.参数 欲输入帐号, 文本型, , 
.参数 X坐标, 整数型, , 
.参数 Y坐标, 整数型, , 

.判断开始 (等于 (置剪辑板文本 (欲输入帐号), 真))
    未知支持库函数_2 (X坐标, Y坐标, 2)
    未知支持库函数_1 (#Ctrl键, #V键, )
    处理事件 ()
.默认
    
.判断结束


.子程序 指向跳转, 空白型, , 可以将文件夹一打开指定跳到指向的目录
.参数 欲跳转目录, 文本型, , 
.参数 指向跳转位置, 文本型, , 

.局部变量 保存名称, 整数型, , , 
.局部变量 数目, 整数型, , , 
.局部变量 创建目录, 逻辑型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 文本型, , , 
.局部变量 c, 文本型, , , 
.局部变量 d, 文本型, , , 

.如果 (等于 (使用, “”))
    返回 ()
.否则
    .如果 (等于 (使用, “不使用”))
        返回 ()
    .否则
        
    .如果结束
    
.如果结束

.如果真 (并且 (等于 (目录是否存在 (欲跳转目录), 真), 等于 (目录是否存在 (指向跳转位置), 真)))
    .如果 (等于 (文件是否存在 (相加 (未知支持库函数_7 (1), “\ysml.ini”)), 假))
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), “上网只位（她）”, “上网只位（她）”, 到文本 (0))
        赋值 (保存名称, 到整数 (读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), “上网只位（她）”, “上网只位（她）”, )))
        复制目录 (欲跳转目录, 相加 (未知支持库函数_7 (1), “\”, 到文本 (相加 (保存名称, 1))))
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), “上网只位（她）”, “上网只位（她）”, 到文本 (相加 (保存名称, 1)))
        置文件属性 (相加 (未知支持库函数_7 (1), “\”, 到文本 (相加 (保存名称, 1))), 2)
        赋值 (b, 取文本左边 (欲跳转目录, 相减 (倒找文本 (欲跳转目录, “\”, , 假), 1)))
        赋值 (c, 寻找文件 (相加 (欲跳转目录, “\*.*”), ))
        .判断循环首 (不等于 (c, “”))
            删除文件 (相加 (欲跳转目录, “\”, c))
            赋值 (c, 寻找文件 ())
        .判断循环尾 ()
        删除目录 (欲跳转目录)
        未知支持库函数_0 (相加 (b, 取文件名 (欲跳转目录)), 指向跳转位置, , , )
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 取文件名 (b), 取文件名 (b), 欲跳转目录)
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 相加 (取文件名 (b), “1”), 相加 (取文件名 (b), “1”), 到文本 (相加 (保存名称, 1)))
        置文件属性 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 2)
        API_PostMessage (检查窗口 (“Program Manager”), 256, #F5键, 0)
    .否则
        赋值 (保存名称, 到整数 (读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), “上网只位（她）”, “上网只位（她）”, )))
        复制目录 (欲跳转目录, 相加 (未知支持库函数_7 (1), “\”, 到文本 (相加 (保存名称, 1))))
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), “上网只位（她）”, “上网只位（她）”, 到文本 (相加 (保存名称, 1)))
        置文件属性 (相加 (未知支持库函数_7 (1), “\”, 到文本 (相加 (保存名称, 1))), 2)
        赋值 (b, 取文本左边 (欲跳转目录, 相减 (倒找文本 (欲跳转目录, “\”, , 假), 1)))
        赋值 (c, 寻找文件 (相加 (欲跳转目录, “\*.*”), ))
        .判断循环首 (不等于 (c, “”))
            删除文件 (相加 (欲跳转目录, “\”, c))
            赋值 (c, 寻找文件 ())
        .判断循环尾 ()
        删除目录 (欲跳转目录)
        未知支持库函数_0 (相加 (b, 取文件名 (欲跳转目录)), 指向跳转位置, , , )
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 取文件名 (b), 取文件名 (b), 欲跳转目录)
        写配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 相加 (取文件名 (b), “1”), 相加 (取文件名 (b), “1”), 到文本 (相加 (保存名称, 1)))
        置文件属性 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 2)
        API_PostMessage (检查窗口 (“Program Manager”), 256, #F5键, 0)
    .如果结束
    
    
.如果真结束



.子程序 目录是否存在, 逻辑型, , 判断目录是否存在
.参数 目录名, 文本型, , 

.局部变量 文件号, 整数型, , , 

.如果 (等于 (使用, “”))
    返回 (假)
.否则
    .如果 (等于 (使用, “不使用”))
        返回 (假)
    .否则
        
    .如果结束
    
.如果结束
.如果真 (等于 (删首尾空 (目录名), “”))
    返回 (假)
.如果真结束

赋值 (文件号, 打开文件 (相加 (目录名, “\TEMP.TMP”), 4, 1))
写出字节集 (文件号, { 2, 3, 4 })
关闭文件 (文件号)
.如果 (文件是否存在 (相加 (目录名, “\TEMP.TMP”)))
    删除文件 (相加 (目录名, “\TEMP.TMP”))
    返回 (真)
.否则
    删除文件 (相加 (目录名, “\TEMP.TMP”))
    返回 (假)
.如果结束


.子程序 取消跳转, 空白型, , 注意：如果是否采用对话框（）的叁数为真， 请使用游览文件夹（）叁数来游览文件夹，取消跳转！
.参数 欲取消的目录, 文本型, , 请输入欲要取消跳转的目录
.参数 是否采用对话框, 逻辑型, , 如果为“假”，如果为假请自己输入目录路径！如果为“真” 例如：编辑框.内容=游览文件夹（）

.局部变量 读路径, 文本型, , , 
.局部变量 读原始路径, 文本型, , , 
.局部变量 删除文件, 文本型, , , 
.局部变量 删除目录, 文本型, , , 
.局部变量 读, 整数型, , , 
.局部变量 文件路径, 文本型, , , 
.局部变量 文本, 文本型, , , 

.如果 (等于 (使用, “”))
    
    返回 ()
.否则
    .如果 (等于 (使用, “不使用”))
        返回 ()
    .否则
        
    .如果结束
    
.如果结束
.如果 (等于 (是否采用对话框, 真))
    .如果真 (等于 (浏览文件夹, “”))
        
        返回 ()
    .如果真结束
    .如果真 (文件是否存在 (欲取消的目录))
        赋值 (读路径, 取文本左边 (欲取消的目录, 相减 (倒找文本 (欲取消的目录, “\”, , 假), 1)))
        赋值 (文本, 取文本左边 (取文件名 (欲取消的目录), 相减 (倒找文本 (取文件名 (欲取消的目录), “.”, , 假), 1)))
        赋值 (读原始路径, 读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 文本, 文本, ))
        赋值 (删除目录, 读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 相加 (文本, “1”), 相加 (文本, “1”), ))
        赋值 (文件路径, 相加 (读路径, “\”, 文本, “\”))
        
        .如果 (等于 (文件路径, 读原始路径))
            复制目录 (相加 (未知支持库函数_7 (1), “\”, 删除目录), 读原始路径)
            赋值 (删除文件, 寻找文件 (相加 (未知支持库函数_7 (1), “\”, 删除目录, “\*.*”), ))
            .判断循环首 (不等于 (删除文件, “”))
                删除文件 (相加 (未知支持库函数_7 (1), “\”, 删除文件))
                赋值 (删除文件, 寻找文件 ())
            .判断循环尾 ()
            删除目录 (相加 (未知支持库函数_7 (1), “\”, 删除目录))
            删除文件 (欲取消的目录)
            API_PostMessage (检查窗口 (“Program Manager”), 256, #F5键, 0)
        .否则
            信息框 (“目录路径或文件名有误”, 相加 (0, #警告图标), )
            返回 ()
        .如果结束
        
    .如果真结束
    
.否则
    .如果真 (文件是否存在 (欲取消的目录))
        赋值 (读路径, 取文本左边 (欲取消的目录, 相减 (倒找文本 (欲取消的目录, “\”, , 假), 1)))
        赋值 (文本, 取文本左边 (取文件名 (欲取消的目录), 相减 (倒找文本 (取文件名 (欲取消的目录), “.”, , 假), 1)))
        赋值 (读原始路径, 读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 文本, 文本, ))
        赋值 (删除目录, 读配置项 (相加 (未知支持库函数_7 (1), “\ysml.ini”), 相加 (文本, “1”), 相加 (文本, “1”), ))
        赋值 (文件路径, 相加 (读路径, “\”, 文本, “\”))
        
        .如果 (等于 (文件路径, 读原始路径))
            复制目录 (相加 (未知支持库函数_7 (1), “\”, 删除目录), 读原始路径)
            赋值 (删除文件, 寻找文件 (相加 (未知支持库函数_7 (1), “\”, 删除目录, “\*.*”), ))
            .判断循环首 (不等于 (删除文件, “”))
                删除文件 (相加 (未知支持库函数_7 (1), “\”, 删除文件))
                赋值 (删除文件, 寻找文件 ())
            .判断循环尾 ()
            删除目录 (相加 (未知支持库函数_7 (1), “\”, 删除目录))
            删除文件 (欲取消的目录)
            API_PostMessage (检查窗口 (“Program Manager”), 256, #F5键, 0)
        .否则
            信息框 (“目录路径或文件名有误”, 相加 (0, #警告图标), )
            返回 ()
            
        .如果结束
        
    .如果真结束
    
    
    
.如果结束







.子程序 取文件名, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 目录名称, 文本型, , , 
.局部变量 取文件名, 文本型, , , 
.局部变量 匿名局部变量_172, 空白型, , , 

.如果 (等于 (使用, “”))
    返回 (“”)
.否则
    .如果 (等于 (使用, “不使用”))
        返回 (“不使用”)
    .否则
        
    .如果结束
    
.如果结束

赋值 (目录名称, 取文本中间 (文件名, 倒找文本 (文件名, “\”, , 假), 相减 (倒找文本 (文件名, “\”, , 假), 1)))
赋值 (取文件名, 取文本右边 (目录名称, 相减 (取文本长度 (目录名称), 1)))
返回 (取文件名)


.子程序 复制目录, 空白型, , 
.参数 被复制目录, 文本型, , 
.参数 复制到的目录, 文本型, , 

.局部变量 文件名, 文本型, , , 

.如果 (等于 (使用, “”))
    返回 ()
.否则
    .如果 (等于 (使用, “不使用”))
        返回 ()
    .否则
        
    .如果结束
    
.如果结束

处理事件 () ' 给出机会以接收停止按钮事件。
.如果真 (不等于 (取文本右边 (被复制目录, 1), “\”))
    赋值 (被复制目录, 相加 (被复制目录, “\”))
.如果真结束
赋值 (文件名, 寻找文件 (相加 (被复制目录, “*.*”), ))
.如果 (等于 (文件名, “”))
    创建目录 (复制到的目录)
.否则
    
.如果结束
.判断循环首 (不等于 (文件名, “”))
    创建目录 (复制到的目录)
    .如果真 (不等于 (取文本右边 (复制到的目录, 1), “\”))
        赋值 (复制到的目录, 相加 (复制到的目录, “\”))
    .如果真结束
    
    复制文件 (相加 (被复制目录, 文件名), 相加 (复制到的目录, 文件名))
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()

赋值 (文件名, 寻找文件 (相加 (被复制目录, “*.*”), #子目录))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (不等于 (取文本右边 (复制到的目录, 1), “\”))
        赋值 (复制到的目录, 相加 (复制到的目录, “\”))
    .如果真结束
    
    .如果真 (不等于 (取文本左边 (文件名, 1), “.”))
        复制目录 (相加 (被复制目录, 文件名), 相加 (复制到的目录, 文件名))
    .如果真结束
    创建目录 (相加 (复制到的目录, 文件名))
    赋值 (文件名, 寻找文件 (#子目录))
.判断循环尾 ()


.子程序 是否使用模块, 逻辑型, , 请在启动窗口创建完毕程序下写。
.参数 是否使用此模块, 整数型, , 是否使用此模块 1=是 2=否

.如果 (等于 (是否使用此模块, 1))
    赋值 (使用, “使用”)
    返回 (真)
.否则
    .如果 (并且 (不等于 (是否使用此模块, 1), 不等于 (是否使用此模块, 2)))
        赋值 (使用, “不使用”)
        返回 (假)
    .否则
        赋值 (使用, “不使用”)
        返回 (假)
        
    .如果结束
    
.如果结束



 ' .判断开始 (等于 (是否使用此模块, 1))
     ' 使用 ＝ “使用”
 ' .判断 (等于 (是否使用此模块, 2))
     ' 使用 ＝ “不使用”
 ' .判断 (并且 (不等于 (是否使用此模块, 1), 不等于 (是否使用此模块, 2)))
     ' 使用 ＝ “不使用”
.默认
    
.判断结束
 ' 返回 (真)



.子程序 游览文件夹, 文本型, , 注意：取消跳转的第2个叁数位“真”时，请一定要用此子程序
.如果 (等于 (使用, “”))
    返回 (“”)
.否则
    .如果 (等于 (使用, “不使用”))
        返回 (“不使用”)
    .否则
        
    .如果结束
    
.如果结束
载入 (游览窗口, , 假)
赋值 (浏览文件夹, 游览窗口..文件名)
游览窗口.销毁 ()
返回 (浏览文件夹)

.子程序 检查窗口, 整数型, , 
.参数 窗口名, 文本型, , 

.局部变量 窗口句柄, 整数型, , , 

赋值 (窗口句柄, 查找窗口 (0, 窗口名))
返回 (窗口句柄)

.子程序 取得颜色, 整数型, , 
.参数 位置取颜色X, 整数型, 可空, 
.参数 位置取颜色Y, 整数型, 可空, 

.局部变量 R, 整数型, , , 
.局部变量 G, 整数型, , , 
.局部变量 B, 整数型, , , 
.局部变量 取出颜色, 整数型, , , 
.局部变量 D, 坐标_, , , 

.判断开始 (并且 (等于 (是否为空 (位置取颜色X), 真), 等于 (是否为空 (位置取颜色Y), 真)))
    取鼠标位置_ (D)
    赋值 (取出颜色, 取点_ (取设备场景_ (0), 到整数 (D.横向位置), 到整数 (D.纵向位置)))
    返回 (取出颜色)
.默认
    赋值 (取出颜色, 取点_ (取设备场景_ (0), 位置取颜色X, 位置取颜色Y))
    返回 (取出颜色)
.判断结束






.子程序 取标题句柄, 整数型, , 根据窗口标题的部分内容,取窗口句柄(返回第一个符合条件的窗口句柄,失败:返回-1)
.参数 标题, 文本型, , 窗口标题(可以为窗口部分标题)

.局部变量 窗口列表, 文本型, , "0", 
.局部变量 循环变量, 整数型, , , 
.局部变量 变量, 整数型, , , 

赋值 (窗口列表, 未知支持库函数_75 ())
.计次循环首 (取数组成员数 (窗口列表), 循环变量)
    .如果真 (并且 (不等于 (寻找文本 (未知支持库函数_76 (到数值 (窗口列表 [循环变量])), 标题, , 假), -1), 不等于 (未知支持库函数_77 (到数值 (窗口列表 [循环变量])), “tooltips_class32”))) ' 查找标题,且找到的不是系统中的"临时窗口句柄"
        赋值 (变量, 到数值 (窗口列表 [循环变量]))
        返回 (变量)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.窗口程序集 窗口程序集1, , , 

.子程序 _按钮2_被单击, 空白型, , 
信息框 (“”, 0, )


.子程序 _按钮1_被单击, 空白型, , 
模拟鼠标事件 (442, 374, 1)
模拟鼠标事件 (442, 374, 2)

.子程序 _时钟1_周期事件, 空白型, , 
赋值 (.内容, 到文本 (鼠标所在窗口句柄 (442, 374)))

.子程序 _窗口1_创建完毕, 空白型, , 
赋值 (.时钟周期, 100)


.窗口程序集 窗口程序集2, , , 

.子程序 _游览窗口_创建完毕, 空白型, , 
.如果真 (打开 ())
    
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
