 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 假
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 WM_DROPFILES, "563", , 
.常量 GWL_STYLE, "-16", , 
.常量 WS_SYSMENU, "524288", , 
.常量 MAX_LENGTH, "255", , 
.常量 BIF_RETURNONLYFSDIRS, "1", , 
.常量 WM_SYSCOMMAND, "274", , 
.常量 WM_COMMAND, "273", , 
.常量 WM_DESTROY, "2", , 
.常量 MF_BYCOMMAND, "0", , 
.常量 MF_BYPOSITION, "1024", , 
.常量 MF_STRING, "0", , 
.常量 MF_SEPARATOR, "2048", , 
.常量 GWL_WNDPROC, "-4", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 RECT, , 矩形;
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 POINTAPI, , 坐标;
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 


.DLL命令 取系统菜单, 整数型, "", "GetSystemMenu", , 获取系统原始菜单
    .参数 hWnd, 整数型, , 
    .参数 bRevert, 逻辑型, , 

.DLL命令 删除菜单项目, 整数型, "", "RemoveMenu", , 移除系统原始菜单项
    .参数 hMenu, 空白型, , 
    .参数 nPosition, 空白型, , 
    .参数 wFlags, 空白型, , 

.DLL命令 添加菜单项, 整数型, "", "AppendMenuA", , 在指定的菜单里添加一个菜单项　非零表示成功，零表示失败。会设置GetLastError
    .参数 菜单句柄, 整数型, , 菜单句柄
    .参数 菜单常数标志, 整数型, , 参考ModifyMenu函数中的菜单常数标志定义表，其中列出了允许使用的所有常数
    .参数 新菜单条目ID, 整数型, , 指定菜单条目的新命令ID。如果在wFlags参数中指定了MF_POPUP字段，那么这应该是指向一个弹出式菜单的句柄
    .参数 标志值, 文本型, , （相应的vb声明见注解），如果在wFlags参数中指定了MF_STRING标志，这就代表在菜单中设置的字串。如设置了MF_BITMAP标志，这就代表一个Long型变量，其中包含了一个位图句柄。如设置了MF_OWNERDRAW，这个值就会包括在DRAWITEMSTRUCT和MEASUREITEMSTRUCT结构中，在条目需要重画的时候由windows发送出去
  

.DLL命令 插入菜单条目, 整数型, "user32.dll", "InsertMenuA", 公开, 在菜单的指定位置处插入一个菜单条目，并根据需要将其他条目向下移动　非零表示成功，零表示失败。会设置GetLastError
    .参数 菜单句柄, 整数型, , 菜单的句柄
    .参数 插入点标志符, 整数型, , 定义了新条目插入点的一个现有菜单条目的标志符。如果在wFlags中指定了MF_BYCOMMAND标志，这个参数就代表欲改变的菜单条目的命令ID。如设置的是MF_BYPOSITION标志，这个参数就代表菜单条目在菜单中的位置，第一个条目的位置为零
    .参数 常数标志, 整数型, , 一系列常数标志的组合。参考ModifyMenu
    .参数 新条目ID, 整数型, , 指定菜单条目的新菜单ID。如果在wFlags中指定了MF_POPUP标志，就应该指定弹出式菜单的一个句柄
    .参数 条目内容, 文本型, , 如果在wFlags参数中设置了MF_STRING标志，就代表要设置到菜单中的字串（）。如设置的是MF_BITMAP标志，就代表一个Long型变量，其中包含了一个位图句柄
  

.DLL命令 显示关于, 整数型, "shell32.dll", "ShellAboutA", , 
    .参数 句柄, 整数型, , 
    .参数 程序, 文本型, , 
    .参数 其他成员, 文本型, , 
    .参数 图标, 整数型, , 

.DLL命令 SetWindowLong1, 整数型, "", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 置窗口特征, 子程序指针, "", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 子程序指针, , 

.DLL命令 执行窗口程序, 整数型, "", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 子程序指针, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 自定义弹出菜单, 整数型, "user32.dll", "TrackPopupMenu", , 在屏幕的任意地方显示一个弹出式菜单　非零表示成功，零表示失败。会设置GetLastError
    .参数 hMenu, 整数型, , 弹出式菜单的句柄
    .参数 wFlags, 整数型, , 位置标志和鼠标追踪标志的组合，见下表
位置标志：说明
TPM_CENTERALIGN：菜单在指定位置水平居中
TPM_LEFTALIGN：菜单的左侧置于水平x坐标处
TPM_RIGHTALIGN：菜单的右侧置于水平x坐标处
TPM_LEFTBUTTON：鼠标左键标准运作方式
TPM_RIGHTBUTTON：用鼠标右键进行菜单追踪
    .参数 x, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 y, 整数型, , 同上
    .参数 nReserved, 整数型, , 未使用，设为零
    .参数 hwnd, 整数型, , 用于接收弹出式菜单命令的窗口的句柄。应该使用窗体的窗口句柄――窗体中有一个菜单能象弹出式菜单那样接收相同的命令ID集
    .参数 lprc, RECT, , Rect，用屏幕坐标定义的一个矩形，如用户在这个矩形的范围内单击，则弹出式菜单不会关闭。如单击弹出式菜单之外的任何一个地方，则会关闭菜单。可以设为NULL
  

.DLL命令 取鼠标位置, 整数型, "user32.dll", "GetCursorPos", , 获取鼠标指针的当前位置　非零表示成功，零表示失败。会设置GetLastError
    .参数 位置, POINTAPI, , POINTAPI，随同指针在屏幕像素坐标中的位置载入的一个结构


.窗口程序集 窗口程序集1, , , 

.程序集变量 系统菜单句柄, 整数型, , , 
.程序集变量 PrevWndProc, 子程序指针, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
添加系统菜单 (取窗口句柄 ())
赋值 (系统菜单句柄, 取系统菜单 (取窗口句柄 (), 假))
删除菜单项目 (系统菜单句柄, 4, 1024) ' 删除最大化菜单
删除菜单项目 (系统菜单句柄, 1, 1024) ' 删除移动菜单
添加菜单项 (系统菜单句柄, 2048, 2001, “”) ' 添加分隔条
添加菜单项 (系统菜单句柄, 0, 2002, “关于本程序(&A)”) ' 添加关于菜单项
 ' 插入菜单条目 (系统菜单句柄, 0, 位或 (#MF_BYPOSITION, #MF_SEPARATOR), 2001, “”)  ' 添加分隔条
 ' 插入菜单条目 (系统菜单句柄,0, 位或 (#MF_BYPOSITION, #MF_STRING), 2002, “关于本程序(&A)”)  ' 添加关于菜单项
init (取窗口句柄 ())


.子程序 添加系统菜单, 空白型, , 
.参数 hWnd, 整数型, , 

.局部变量 lStyle, 整数型, , , 

SetWindowLong1 (hWnd, #GWL_STYLE, #WS_SYSMENU)

.子程序 init, 空白型, , 
.参数 句柄, 整数型, , 

赋值 (PrevWndProc, 置窗口特征 (句柄, #GWL_WNDPROC, &SubWndProc))


.子程序 Terminate, 空白型, , 
.参数 句柄, 整数型, , 

置窗口特征 (句柄, #GWL_WNDPROC, PrevWndProc)


.子程序 SubWndProc, 整数型, , 
.参数 句柄, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.判断开始 (等于 (Msg, #WM_DESTROY))
    Terminate (句柄)
.判断 (等于 (Msg, #WM_SYSCOMMAND))
    .判断开始 (等于 (wParam, 2002))
        显示关于 (取窗口句柄 (), “ 系统菜单全面操作”, “雷盟工作室   主页：http://raymone.ndisk.cn”, 0)
         ' 此处为响应点击自定义添加的菜单内容
    .默认
        
    .判断结束
    
.判断 (等于 (Msg, #WM_COMMAND))
    .如果 (等于 (wParam, 2002))
        显示关于 (取窗口句柄 (), “ 系统菜单全面操作”, “雷盟工作室   主页：http://raymone.ndisk.cn”, 0)
    .否则
        执行窗口程序 (PrevWndProc, 句柄, #WM_SYSCOMMAND, wParam, lParam)
    .如果结束
    
    
.默认
    
.判断结束



返回 (执行窗口程序 (PrevWndProc, 句柄, Msg, wParam, lParam)) ' 把不需要处理的消息传递给默认窗口处理程序，使窗口能正常响应消息

.子程序 __启动窗口_将被销毁, 空白型, , 
Terminate (取窗口句柄 ())

.子程序 __启动窗口_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 re, RECT, , , 
.局部变量 p, POINTAPI, , , 

取鼠标位置 (p)
自定义弹出菜单 (系统菜单句柄, 0, p.横向位置, p.纵向位置, 0, 取窗口句柄 (), re)
 ' 自定义弹出菜单 (取系统菜单 (取窗口句柄 (), 假), 0, p.横向位置, p.纵向位置, 0, 取窗口句柄 (), re)



 ' 不属于任何一个程序集、类模块的函数：
