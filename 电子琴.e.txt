 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 797
    高度 = 239
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 8388608 '  0x800000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “多种乐器电子琴”
    帮助文件名 = “”



.常量 MAXPNAMELEN, "32", , 
.常量 MMSYSERR_BASE, "0", , 
.常量 MMSYSERR_BADDEVICEID, "2", , 
.常量 MMSYSERR_INVALPARAM, "11", , 
.常量 MMSYSERR_NODRIVER, "6", , 
.常量 MMSYSERR_NOMEM, "7", , 
.常量 MMSYSERR_INVALHANDLE, "5", , 
.常量 MIDIERR_BASE, "64", , 
.常量 MIDIERR_STILLPLAYING, "65", , 
.常量 MIDIERR_NOTREADY, "67", , 
.常量 MIDIERR_BADOPENMODE, "70", , 
.常量 INVALID_NOTE, "-1", , 
.常量 MIDIMAPPER, "-1", , 
.常量 MIDI_MAPPER, "-1", , 
.常量 MAXERRORLENGTH, "128", , 
.常量 VK_LBUTTON, "1", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 1 扩展界面支持库二




数据类型 MIDIOUTCAPS, , 
    .成员 wMid, 短整数型, , , 
    .成员 wPid, 短整数型, , , 
    .成员 vDriverVersion, 整数型, , , 
    .成员 szPname, 字节型, , "32", 
    .成员 wTechnology, 短整数型, , , 
    .成员 wVoices, 短整数型, , , 
    .成员 wNotes, 短整数型, , , 
    .成员 wChannelMask, 短整数型, , , 
    .成员 dwSupport, 整数型, , , 


.DLL命令 获取midiOut数量, 整数型, "winmm.dll", "midiOutGetNumDevs", , 

.DLL命令 获取midiOut帽, 整数型, "winmm.dll", "midiOutGetDevCapsA", , 
    .参数 uDeviceID, 整数型, , 
    .参数 lpCaps, 未知类型0x41010020, , 
    .参数 uSize, 整数型, , 

.DLL命令 关闭midiOut, 整数型, "winmm.dll", "midiOutClose", , 
    .参数 hMidiOut, 整数型, , 

.DLL命令 打开midiOut, 整数型, "winmm.dll", "midiOutOpen", , 
    .参数 lphMidiOut, 整数型, 传址, 
    .参数 uDeviceID, 整数型, , 
    .参数 dwCallback, 整数型, , 
    .参数 dwInstance, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 midiOut简略Msg, 整数型, "winmm.dll", "midiOutShortMsg", , 
    .参数 hMidiOut, 整数型, , 
    .参数 dwMsg, 整数型, , 

.DLL命令 获取midiOut错误文本, 整数型, "", "midiOutGetErrorTextA", , 
    .参数 err, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 uSize, 整数型, , 

.DLL命令 获取键状态, 整数型, "", "GetKeyState", , 
    .参数 nVirtKey, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 volume, 整数型, , , 
.程序集变量 是否重复按键, 逻辑型, , , 
.程序集变量 Sta, 短整数型, , , 
.程序集变量 OldNote, 短整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 乐器组, 文本型, , , 
.局部变量 乐器, 文本型, , "0", 
.局部变量 乐器数, 整数型, , , 
.局部变量 项目, 整数型, , , 

赋值 (乐器组, “Piano 1/Piano 2/Piano 3/Honky-tonk/E.Piano 1/E.piano 2/Harpsichord/Clavinet/Celesta/Glockenspiel/Music Box/Vibraphone/Marimba/Xylophone/Tubular bell/Dulcimer/Organ 1/Organ 2/Organ 3/Church org. 1/Reed Organ/Accordion Fr/Harmonica/Tango Accordion/Nylon-str Gt/Steel-str Gt/Jazz Gt/Clean Gt/Muted Gt/Overdrive Gt/Distortion Gt/Gt. Harmonics/Acoustic Bs./Fingered Bs./Picked Bs./Fretless Bs./Slap Bs. 1/Slap Bs. 2/Synth Bs. 1/Synth Bs. 2/Violin/Viola/Cello/Contrabass/Tremolo Str/Pizzicato/Harp/Timpani/Strings/Slow Str./Syn Str. 1/Syn Str. 2/Choir Aahs/Voice Oohs/SynVox/Orchestra Hit/Trumpet/Trombone/Tuba/Muted Tr./French Horn/Brass 1/Synth Br.1/Synth Br.2/Soprano Sax/Alto Sax/Tenor Sax/Baritone Sax/Oboe/English Horn/Basson/Clarinet/Piccolo/Flute/Recorder/Pan Flute/Bottle Blow/Shakuhachi/Whistle/Ocarina/Square Wave/Saw Wave/Syn. Calliope/Chiffer Lead/Charang/Solo Vox/5th Saw Wave/Bass&Lead/Fantasia/Warm Pad/PolySynth/Space Voice/Bowed Glass/Metal Pad/Halo Pad/Sweep Pad/Ice Rain/Sound Track/Crystal/Atmosphere/Brightness/Goblin/Echo Drops/Star Theme/Sitar/Banjo/Shamisen/Koto/Kalimba/Bag Pipe/Fiddle/Shanai/Tinkle Bell/Agogo/Steel Drums/Woodblock/Taiko/Melo Tom 1/Synth Drum/Reverse Cym./Gt. FretNoise/Breath Noise/Seashore/Bird/Telephone 1/Helicopter/Applause/Gun Shot/”)

设备到列表 ()
打开MIDI_Out (-1)
赋值 (乐器, 分割文本 (乐器组, “/”, ))
赋值 (乐器数, 取数组成员数 (乐器))
.计次循环首 (乐器数, 项目)
    乐器.加入项目 ( [项目], )
.计次循环尾 ()
产生键盘 ()
产生黑键盘 ()
赋值 (.现行选中项, 0)
赋值 (.位置, 36)
_音调_位置被改变 ()
赋值 (.位置, 127)
赋值 (volume, 127)

.子程序 __启动窗口_将被销毁, 空白型, , 
关闭MIDI_Out ()

.子程序 _音调_位置被改变, 空白型, , 
赋值 (Sta, .位置)
赋值 (.标题, 调 (求余数 (12)))

.子程序 _音量_位置被改变, 空白型, , 
赋值 (volume, .位置)

.子程序 _组合框1_列表项被选择, 空白型, , 
打开MIDI_Out (相减 (.现行选中项, 1))

.子程序 _组合框2_列表项被选择, 空白型, , 
改变程序 (0, 0, .现行选中项)

.子程序 _时钟2_周期事件, 空白型, , 


.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 MyKey, 短整数型, , , 

赋值 (MyKey, 获取键状态 (#VK_LBUTTON))
.如果 (等于 (位与 (MyKey, 16384), 16384))
    赋值 (是否重复按键, 真)
.否则
    赋值 (是否重复按键, 假)
.如果结束


.子程序 _按钮1_被单击, 空白型, , 
.局部变量 索引, 短整数型, , , 
.局部变量 事件按钮, 未知类型0x20001, , , 

赋值 (事件按钮, 取事件组件 ())
赋值 (索引, 到数值 (事件按钮.))
.如果真 (或者 (不等于 (索引), 等于 (是否重复按键, 真)))
    关闭 (0, 相加 (OldNote, Sta))
    打开 (0, 相加 (索引, Sta), volume)
    赋值 (索引)
    赋值 (是否重复按键, 假)
.如果真结束


.子程序 _按钮2_被单击, 空白型, , 
.局部变量 索引, 短整数型, , , 
.局部变量 事件按钮, 未知类型0x20001, , , 

赋值 (事件按钮, 取事件组件 ())
赋值 (索引, 到数值 (事件按钮.))
.如果真 (或者 (不等于 (索引), 等于 (是否重复按键, 真)))
    关闭 (0, 相加 (Sta))
    打开 (0, 相加 (索引, Sta), volume)
    赋值 (索引)
    赋值 (是否重复按键, 假)
.如果真结束


.子程序 产生键盘, 空白型, , 
.局部变量 按钮数, 整数型, , , 
.局部变量 按键, 未知类型0x20001, , "0", 
.局部变量 标记1, 整数型, , , 

重定义数组 (按键, 假, 38)
.计次循环首 (38, 按钮数)
    复制窗口组件 (按键 [按钮数])
    赋值 (按键 [按钮数], , 真)
    赋值 (按键 [按钮数], , 相加 (., 相乘 (相加 (., 1), 按钮数)))
    .判断开始 (等于 (按钮数, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (按钮数, 1)))
    .判断 (并且 (大于 (按钮数, 1), 小于或等于 (按钮数, 3)))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 求余数 (按钮数, 2))))
    .判断 (并且 (大于 (按钮数, 3), 小于或等于 (按钮数, 5)))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 求余数 (按钮数, 3))))
    .判断 (并且 (大于 (按钮数, 5), 小于或等于 (按钮数, 7)))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 求余数 (按钮数, 2), 3)))
    .判断 (并且 (大于 (按钮数, 7), 小于或等于 (按钮数, 10)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 3, 标记1)))
    .判断 (并且 (大于 (按钮数, 10), 小于或等于 (按钮数, 14)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 2, 标记1)))
    .判断 (并且 (大于 (按钮数, 14), 小于或等于 (按钮数, 17)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 1, 标记1)))
    .判断 (并且 (大于 (按钮数, 17), 小于或等于 (按钮数, 21)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相加 (按钮数, 标记1)))
    .判断 (并且 (大于 (按钮数, 21), 小于或等于 (按钮数, 24)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (相加 (按钮数, 标记1), 1)))
    .判断 (并且 (大于 (按钮数, 24), 小于或等于 (按钮数, 28)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (相加 (按钮数, 标记1), 2)))
    .判断 (并且 (大于 (按钮数, 28), 小于或等于 (按钮数, 31)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (相加 (按钮数, 标记1), 3)))
    .判断 (并且 (大于 (按钮数, 31), 小于或等于 (按钮数, 35)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (相加 (按钮数, 标记1), 4)))
    .判断 (并且 (大于 (按钮数, 35), 小于或等于 (按钮数, 38)))
        赋值 (标记1, 相加 (标记1, 1))
        赋值 (按键 [按钮数], , 到文本 (相减 (相加 (按钮数, 标记1), 5)))
    .默认
        
    .判断结束
    
.计次循环尾 ()

.子程序 产生黑键盘, 空白型, , 
.局部变量 按钮数, 整数型, , , 
.局部变量 按键, 未知类型0x20001, , "0", 

重定义数组 (按键, 假, 27)
.计次循环首 (27, 按钮数)
    复制窗口组件 (按键 [按钮数])
    赋值 (按键 [按钮数], , 真)
    .判断开始 (等于 (按钮数, 1))
        赋值 (按键 [1]., .)
        赋值 (按键 [1]., “1”)
    .判断 (等于 (按钮数, 2))
        赋值 (按键 [2]., 相加 (., 相加 (., 6)))
        赋值 (按键 [2]., “3”)
    .判断 (等于 (按钮数, 3))
        赋值 (按键 [3]., 相减 (相加 (., 相乘 (12, 5)), 3))
        赋值 (按键 [3]., “6”)
    .判断 (等于 (按钮数, 4))
        赋值 (按键 [4]., 相加 (., 相乘 (12, 6), 4))
        赋值 (按键 [4]., “8”)
    .判断 (等于 (按钮数, 5))
        赋值 (按键 [5]., 相减 (相加 (., 相乘 (12, 8)), 1))
        赋值 (按键 [5]., “10”)
    .判断 (等于 (按钮数, 6))
        赋值 (按键 [6]., 相加 (., 相乘 (12, 11), 1))
        赋值 (按键 [6]., “13”)
    .判断 (等于 (按钮数, 7))
        赋值 (按键 [7]., 相减 (相加 (., 相乘 (12, 13)), 4))
        赋值 (按键 [7]., “15”)
    .判断 (等于 (按钮数, 8))
        赋值 (按键 [8]., 相减 (相加 (., 相乘 (12, 16)), 2))
        赋值 (按键 [8]., “18”)
    .判断 (等于 (按钮数, 9))
        赋值 (按键 [9]., 相加 (., 相乘 (12, 17), 5))
        赋值 (按键 [9]., “20”)
    .判断 (等于 (按钮数, 10))
        赋值 (按键 [10]., 相加 (., 相乘 (12, 19)))
        赋值 (按键 [10]., “22”)
    .判断 (等于 (按钮数, 11))
        赋值 (按键 [11]., 相加 (., 相乘 (12, 22), 2))
        赋值 (按键 [11]., “25”)
    .判断 (等于 (按钮数, 12))
        赋值 (按键 [12]., 相减 (相加 (., 相乘 (12, 24)), 3))
        赋值 (按键 [12]., “27”)
    .判断 (等于 (按钮数, 13))
        赋值 (按键 [13]., 相减 (相加 (., 相乘 (12, 27)), 1))
        赋值 (按键 [13]., “30”)
    .判断 (等于 (按钮数, 14))
        赋值 (按键 [14]., 相加 (., 相乘 (12, 28), 6))
        赋值 (按键 [14]., “32”)
    .判断 (等于 (按钮数, 15))
        赋值 (按键 [15]., 相加 (., 相乘 (12, 30), 1))
        赋值 (按键 [15]., “34”)
    .判断 (等于 (按钮数, 16))
        赋值 (按键 [16]., 相加 (., 相乘 (12, 33), 3))
        赋值 (按键 [16]., “37”)
    .判断 (等于 (按钮数, 17))
        赋值 (按键 [17]., 相减 (相加 (., 相乘 (12, 35)), 2))
        赋值 (按键 [17]., “39”)
    .判断 (等于 (按钮数, 18))
        赋值 (按键 [18]., 相加 (., 相乘 (12, 38)))
        赋值 (按键 [18]., “42”)
    .判断 (等于 (按钮数, 19))
        赋值 (按键 [19]., 相减 (相加 (., 相乘 (12, 40)), 5))
        赋值 (按键 [19]., “44”)
    .判断 (等于 (按钮数, 20))
        赋值 (按键 [20]., 相加 (., 相乘 (12, 41), 2))
        赋值 (按键 [20]., “46”)
    .判断 (等于 (按钮数, 21))
        赋值 (按键 [21]., 相加 (., 相乘 (12, 44), 4))
        赋值 (按键 [21]., “49”)
    .判断 (等于 (按钮数, 22))
        赋值 (按键 [22]., 相减 (相加 (., 相乘 (12, 46)), 1))
        赋值 (按键 [22]., “51”)
    .判断 (等于 (按钮数, 23))
        赋值 (按键 [23]., 相加 (., 相乘 (12, 48), 13))
        赋值 (按键 [23]., “54”)
    .判断 (等于 (按钮数, 24))
        赋值 (按键 [24]., 相加 (., 相乘 (12, 50), 8))
        赋值 (按键 [24]., “56”)
    .判断 (等于 (按钮数, 25))
        赋值 (按键 [25]., 相加 (., 相乘 (12, 52), 3))
        赋值 (按键 [25]., “58”)
    .判断 (等于 (按钮数, 26))
        赋值 (按键 [26]., 相加 (., 相乘 (12, 55), 5))
        赋值 (按键 [26]., “61”)
    .判断 (等于 (按钮数, 27))
        赋值 (按键 [27]., 相加 (., 相乘 (12, 57)))
        赋值 (按键 [27]., “63”)
    .默认
        
    .判断结束
    
.计次循环尾 ()

.子程序 _画板1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 I, 整数型, , , 

.计次循环首 (65, I)
    关闭 (0, 相加 (相减 (I, 1), Sta))
.计次循环尾 ()

.程序集 程序集1, , , 

.程序集变量 hMidi, 整数型, , , 
.子程序 设备到列表, 逻辑型, , 
.参数 对象, 组合框, , 

.局部变量 caps, MIDIOUTCAPS, , , 
.局部变量 驱动器数, 整数型, , , 
.局部变量 I, 整数型, , , 

.如果真 (等于 (获取midiOut帽 (#MIDIMAPPER, caps, 52), 0))
    对象.加入项目 (到文本 (caps.szPname), )
    赋值 (对象.现行选中项, 0)
.如果真结束
赋值 (驱动器数, 获取midiOut数量 ())
.变量循环首 (0, 相减 (驱动器数, 1), 1, I)
    未知函数_167837768 (52)
    对象.加入项目 (到文本 (caps.szPname), I)
.变量循环尾 ()
返回 (真)

.子程序 打开MIDI_Out, 短整数型, , 
.参数 设备ID, 短整数型, , 

.局部变量 midi_error, 短整数型, , , 
.局部变量 信息, 文本型, , , 

赋值 (midi_error, 关闭midiOut (hMidi))
赋值 (midi_error, 打开midiOut (hMidi, 设备ID, 0, 0, 0))
.如果真 (不等于 (midi_error, 0))
    赋值 (信息, 取空白文本 (#MAXERRORLENGTH))
    获取midiOut错误文本 (#MAXERRORLENGTH)
    信息框 (相加 (信息, 到文本 (midi_error)), 0, )
.如果真结束
返回 (hMidi)

.子程序 关闭MIDI_Out, 空白型, , 
.局部变量 midi_error, 短整数型, , , 
.局部变量 信息, 文本型, , , 

.如果真 (不等于 (hMidi, 0))
    赋值 (midi_error, 关闭midiOut (hMidi))
    .如果真 (不等于 (0))
        赋值 (信息, 取空白文本 (#MAXERRORLENGTH))
        获取midiOut错误文本 (midi_error, 信息, #MAXERRORLENGTH)
        信息框 (相加 (信息, 到文本 (midi_error)), 0, )
    .如果真结束
    
.如果真结束
赋值 (hMidi, 0)

.子程序 简略MIDI_Out, 空白型, , 
.参数 B1, 短整数型, , 
.参数 B2, 短整数型, , 
.参数 B3, 短整数型, , 

.局部变量 midi_error, 整数型, , , 

赋值 (midi_error, midiOut简略Msg (hMidi, 相加 (相乘 (B3, 65536), 相乘 (B2, 256), B1)))

.子程序 打开, 空白型, , 
.参数 CH, 短整数型, , 
.参数 KK, 短整数型, , 
.参数 V, 短整数型, , 

简略MIDI_Out (相加 (144, CH), KK, V)

.子程序 关闭, 空白型, , 
.参数 CH, 短整数型, , 
.参数 KK, 短整数型, , 

简略MIDI_Out (相加 (128, CH), KK, 0)

.子程序 改变控制, 空白型, , 
.参数 CH, 短整数型, , 
.参数 CCNR, 短整数型, , 
.参数 V, 短整数型, , 

简略MIDI_Out (相加 (176, CH), CCNR, V)

.子程序 改变程序, 空白型, , 
.参数 CH, 短整数型, , 
.参数 CCONR, 短整数型, , 
.参数 PNR, 短整数型, , 

改变控制 (CH, 0, CCONR)
简略MIDI_Out (相加 (192, CH), PNR, 0)

.子程序 设置RPN, 空白型, , 
.参数 CH, 短整数型, , 
.参数 PMSB, 短整数型, , 
.参数 PLSB, 短整数型, , 
.参数 MSB, 短整数型, , 
.参数 LSB, 短整数型, , 

简略MIDI_Out (CH, 101, PMSB)
简略MIDI_Out (CH, 100, PLSB)
简略MIDI_Out (CH, 6, MSB)
简略MIDI_Out (CH, 38, LSB)

.子程序 调, 文本型, , 
.参数 I, 短整数型, , 

.局部变量 Diao, 文本型, , , 

.判断开始 (等于 (I, 0))
    赋值 (Diao, “C”)
.判断 (等于 (I, 1))
    赋值 (Diao, “C#”)
.判断 (等于 (I, 2))
    赋值 (Diao, “D”)
.判断 (等于 (I, 3))
    赋值 (Diao, “D#”)
.判断 (等于 (I, 4))
    赋值 (Diao, “E”)
.判断 (等于 (I, 5))
    赋值 (Diao, “F”)
.判断 (等于 (I, 6))
    赋值 (Diao, “F#”)
.判断 (等于 (I, 7))
    赋值 (Diao, “G”)
.判断 (等于 (I, 8))
    赋值 (Diao, “G#”)
.判断 (等于 (I, 9))
    赋值 (Diao, “A”)
.判断 (等于 (I, 10))
    赋值 (Diao, “A#”)
.判断 (等于 (I, 11))
    赋值 (Diao, “B”)
.默认
    
.判断结束
返回 (Diao)


 ' 不属于任何一个程序集、类模块的函数：
