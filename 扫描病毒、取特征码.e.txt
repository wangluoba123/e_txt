 ' 文件类型：Windows动态链接库

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 IMAGE_DOS_SIGNATURE, "23117", , 
.常量 IMAGE_NT_SIGNATURE, "17744", , 
.常量 IMAGE_FILE_EXECUTABLE_IMAGE, "2", , 
.常量 病毒库名单, "“Virus library\Library list.dat”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 2 0 数据操作支持库一
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' shell 52F260023059454187AF826A3C07AF2A 3 0 操作系统界面功能支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二



 ' 所需要的模块
 ' 文件读写&文件映射模块 E:\快盘\铁山卫士\文件读写&文件映射模块.ec


数据类型 IMAGE_DOS_HEADER, , 0
    .成员 e_magic, 短整数型, , , 
    .成员 e_cblp, 短整数型, , , 
    .成员 e_cp, 短整数型, , , 
    .成员 e_crlc, 短整数型, , , 
    .成员 e_cparhdr, 短整数型, , , 
    .成员 e_minalloc, 短整数型, , , 
    .成员 e_maxalloc, 短整数型, , , 
    .成员 e_ss, 短整数型, , , 
    .成员 e_sp, 短整数型, , , 
    .成员 e_csum, 短整数型, , , 
    .成员 e_ip, 短整数型, , , 
    .成员 e_cs, 短整数型, , , 
    .成员 e_lfarlc, 短整数型, , , 
    .成员 e_ovno, 短整数型, , , 
    .成员 e_res, 短整数型, , "4", 
    .成员 e_oemid, 短整数型, , , 
    .成员 e_oeminfo, 短整数型, , , 
    .成员 e_res2, 短整数型, , "10", 
    .成员 e_lfanew, 整数型, , , 

数据类型 IMAGE_NT_HEADERS, , 1
    .成员 Signature, 整数型, , , 
    .成员 FileHeader, IMAGE_FILE_HEADER, , , 
    .成员 OptionalHeader, IMAGE_OPTIONAL_HEADER, , , 

数据类型 IMAGE_FILE_HEADER, , 
    .成员 Machine, 短整数型, , , 
    .成员 NumberOfSections, 短整数型, , , 
    .成员 TimeDateStamp, 整数型, , , 
    .成员 PointerToSymbolTable, 整数型, , , 
    .成员 NumberOfSymbols, 整数型, , , 
    .成员 SizeOfOptionalHeader, 短整数型, , , 
    .成员 Characteristics, 短整数型, , , 

数据类型 IMAGE_OPTIONAL_HEADER, , 
    .成员 Magic, 短整数型, , , 
    .成员 MajorLinkerVersion, 字节型, , , 
    .成员 MinorLinkerVersion, 字节型, , , 
    .成员 SizeOfCode, 整数型, , , 
    .成员 SizeOfInitializedData, 整数型, , , 
    .成员 SizeOfUninitializedData, 整数型, , , 
    .成员 AddressOfEntryPoint, 整数型, , , 
    .成员 BaseOfCode, 整数型, , , 
    .成员 BaseOfData, 整数型, , , 
    .成员 ImageBase, 整数型, , , 
    .成员 SectionAlignment, 整数型, , , 
    .成员 FileAlignment, 整数型, , , 
    .成员 MajorOperatingSystemVersion, 短整数型, , , 
    .成员 MinorOperatingSystemVersion, 短整数型, , , 
    .成员 MajorImageVersion, 短整数型, , , 
    .成员 MinorImageVersion, 短整数型, , , 
    .成员 MajorSubsystemVersion, 短整数型, , , 
    .成员 MinorSubsystemVersion, 短整数型, , , 
    .成员 Win32VersionValue, 整数型, , , 
    .成员 SizeOfImage, 整数型, , , 
    .成员 SizeOfHeaders, 整数型, , , 
    .成员 CheckSum, 整数型, , , 
    .成员 Subsystem, 短整数型, , , 
    .成员 DllCharacteristics, 短整数型, , , 
    .成员 SizeOfStackReserve, 整数型, , , 
    .成员 SizeOfStackCommit, 整数型, , , 
    .成员 SizeOfHeapReserve, 整数型, , , 
    .成员 SizeOfHeapCommit, 整数型, , , 
    .成员 LoaderFlags, 整数型, , , 
    .成员 NumberOfRvaAndSizes, 整数型, , , 
    .成员 DataDirectory, IMAGE_DATA_DIRECTORY, , "16", 

数据类型 IMAGE_DATA_DIRECTORY, , 
    .成员 VirtualAddress, 整数型, , , 
    .成员 Size, 整数型, , , 

数据类型 IMAGE_SECTION_HEADER, , 
    .成员 Name, 字节型, , "8", 
    .成员 Misc, 整数型, , , 
    .成员 VirtualAddress, 整数型, , , 
    .成员 SizeOfRawData, 整数型, , , 
    .成员 PointerToRawData, 整数型, , , 
    .成员 PointerToRelocations, 整数型, , , 
    .成员 PointerToLinenumbers, 整数型, , , 
    .成员 NumberOfRelocations, 短整数型, , , 
    .成员 NumberOfLinenumbers, 短整数型, , , 
    .成员 Characteristics, 整数型, , , 

数据类型 文件结构信息_, , OFSTRUCT
    .成员 结构长度, 字节型, , , cBytes,设置成结构的长度（目前是136）
    .成员 文件盘符, 字节型, , , fFixedDisk,参见相关帮助
    .成员 错误代码, 整数型, , , nErrCode，参见相关帮助
    .成员 保留1, 整数型, , , Reserved1,保留不用
    .成员 保留2, 整数型, , , Reserved2,保留不用
    .成员 文件路径, 文本型, , "128", szPathName,文件的完整路径名

.全局变量 壳特征数组, 字节集, , "0", 
.全局变量 总病毒库, 长整数型, , , 
.全局变量 壳病毒库, 长整数型, , , 
.全局变量 特征码库, 长整数型, , , 
.全局变量 特征码数组1, 字节集, , "0", 
.全局变量 图标特征码1, 文本型, , "0", 
.全局变量 图标库, 长整数型, , , 
.全局变量 文件映射, 文件映射, , , 

.DLL命令 RtlMoveMemory_IMAGE_DOS_HEADER_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IMAGE_DOS_HEADER, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_IMAGE_NT_HEADERS_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IMAGE_NT_HEADERS, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_IMAGE_SECTION_HEADER_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IMAGE_SECTION_HEADER, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 LocalSize, 整数型, "", "LocalSize", , 
    .参数 hMem, 整数型, , 

.DLL命令 RtlMoveMemory_IMAGE_DOS_HEADER, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IMAGE_DOS_HEADER, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_IMAGE_NT_HEADERS, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IMAGE_NT_HEADERS, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 _打开当前进程, 整数型, "", "GetCurrentProcess", , kernel32.dll 打开当前进程伪句柄

.DLL命令 _文件是否存在, 逻辑型, "shlwapi", "PathFileExistsA", , 
    .参数 PathOrFile, 文本型, , 

.DLL命令 _关闭对象, 整数型, "", "CloseHandle", 公开, kernel32.dll
    .参数 对象句柄, 整数型, , 

.DLL命令 读入缓存_, 整数型, "kernel32.dll", "_lread", , 
    .参数 文件句柄, 整数型, , hFile
    .参数 内存指针, 字节型, 数组, lpBuffer
    .参数 读入字节数, 整数型, , wBytes

.DLL命令 打开文件_, 整数型, "kernel32.dll", "OpenFile", , 
    .参数 文件名, 文本型, , lpFileName，欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, 传址, lpReOpenBuff，文件操作结果
    .参数 操作方式, 整数型, , wStyle，操作方式

.DLL命令 取文件尺寸_, 整数型, "kernel32", "GetFileSize", , 
    .参数 文件句柄, 整数型, , 
    .参数 尺寸大小, 整数型, , 

.DLL命令 打开文件映射对象_, 整数型, "", "OpenFileMappingA", , kernel32.dll打开一个现成的文件映射对象　指定文件映射对象的句柄。零表示出错。会设置GetLastError
    .参数 常数, 整数型, , 带有前缀FILE_MAP_???的一个常数。参考MapViewOfFile函数的dwDesiredAccess参数的说明
    .参数 进程继承, 整数型, , 如这个函数返回的句柄能由当前进程启动的新进程继承，则这个参数为TRUE
    .参数 文件映射对象名称, 文本型, , 指定要打开的文件映射对象名称;

.DLL命令 映射文件对象_, 整数型, "", "MapViewOfFile", , kernel32.dll将一个文件映射对象映射到当前应用程序的地址空间。MapViewOfFileEx允许我们指定一个基本地址来进行映射　文件映射在内存中的起始地址。零表示出错。会设置GetLastError
    .参数 hFileMappingObject, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 dwFileOffsetHigh, 整数型, , 
    .参数 dwFileOffsetLow, 整数型, , 
    .参数 dwNumberOfBytesToMap, 整数型, , 

.DLL命令 解除文件映射_, 整数型, "", "UnmapViewOfFile", , kernel32.dll在当前应用程序的内存地址空间解除对一个文件映射对象的映射　非零表示成功，零表示失败。会设置GetLastError
    .参数 lpBaseAddress, 整数型, , 指定要解除映射的一个文件映射的基准地址。这个地址是早先用MapViewOfFile函数获得的;  

.DLL命令 _指针_读字节集, 整数型, "", "RtlMoveMemory", , kernel32.dll
    .参数 Dest, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", , 从堆中分配内存
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", , 获取调用过程堆句柄

.DLL命令 _取自进程ID, 整数型, "", "GetCurrentProcessId", 公开, kernel32.dll

.程序集 程序集1, , , 

.程序集变量 句柄, 整数型, , , 
.子程序 loading, 长整数型, 公开, 
.参数 内容, 文本型, , 

.局部变量 数据, 字节集, , , 
.局部变量 字节集, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 名单, 文本型, , "0", 
.局部变量 名单计次, 整数型, , , 
.局部变量 病毒库1, 长整数型, , , 
.局部变量 数量, 长整数型, , , 
.局部变量 病毒库, 长整数型, , , 
.局部变量 病毒库2, 整数型, , , 

输出调试文本 (“============================================”)
输出调试文本 (“此源码有易论坛共享 请勿进行网购 qq：324190121 群：144278466”)
输出调试文本 (“============================================”)
 ' 防止被调用代码去掉
.判断开始 (等于 (_文件是否存在 (#病毒库名单), 假))
    返回 (-1)
.默认
    赋值 (数据, 未知支持库函数_4 (未知支持库函数_1 (读入文件 (#病毒库名单)), 相加 (到文本 (“关键代码不给看”), “ ”), 2))
    .判断开始 (不等于 (取字节集右边 (数据, 8), “关键代码不给看”))
        返回 (-1)
    .默认
        赋值 (数据, 取字节集左边 (数据, 相减 (汇编_取字节集长度 (数据), 8)))
        赋值 (名单, 分割文本 (到文本 (数据), #换行符, ))
        .计次循环首 (取数组成员数 (名单), 名单计次)
            .判断开始 (等于 (_文件是否存在 (取文本右边 (名单 [名单计次], 相减 (取文本长度 (名单 [名单计次]), 1))), 真))
                .判断开始 (等于 (取文本左边 (名单 [名单计次], 1), 到文本 (0)))
                    赋值 (数量, 取数组成员数 (壳特征数组))
                    .判断开始 (大于 (数量, 0))
                        
                    .默认
                        赋值 (数据, 读入文件 (取文本右边 (名单 [名单计次], 相减 (取文本长度 (名单 [名单计次]), 1))))
                        赋值 (数据, 未知支持库函数_4 (未知支持库函数_1 (数据), 到文本 (“关键代码不给看”), 2))
                        .判断开始 (不等于 (取字节集右边 (数据, 8), “关键代码不给看”))
                            返回 (-1)
                        .默认
                            赋值 (数据, 取字节集左边 (数据, 相减 (汇编_取字节集长度 (数据), 8)))
                            赋值 (字节集, 分割字节集 (数据, “关键代码不给看”, ))
                            赋值 (病毒库, 取数组成员数 (字节集))
                            重定义数组 (壳特征数组, 假, 病毒库)
                            .计次循环首 (病毒库, i)
                                赋值 (壳特征数组 [i], 字节集 [i])
                            .计次循环尾 ()
                            .判断开始 (小于或等于 (病毒库, 0))
                                返回 (-1)
                            .默认
                                赋值 (壳病毒库, 病毒库)
                                赋值 (总病毒库, 相加 (总病毒库, 病毒库))
                            .判断结束
                            
                            
                        .判断结束
                        
                    .判断结束
                    
                .判断 (等于 (取文本左边 (名单 [名单计次], 1), 到文本 (1)))
                    赋值 (数量, 取数组成员数 (特征码数组1))
                    .判断开始 (大于 (数量, 0))
                        
                    .默认
                        赋值 (数据, 读入文件 (取文本右边 (名单 [名单计次], 相减 (取文本长度 (名单 [名单计次]), 1))))
                        赋值 (数据, 未知支持库函数_4 (未知支持库函数_1 (数据), 到文本 (“关键代码不给看”), 2))
                        .判断 (取字节集右边 (数据, 8) ≠ “关键代码不给看”)
                            返回 (-1)
                        .默认
                            赋值 (数据, 取字节集左边 (数据, 相减 (汇编_取字节集长度 (数据), 8)))
                            赋值 (字节集, 分割字节集 (数据, “关键代码不给看”, ))
                            赋值 (病毒库1, 取数组成员数 (字节集))
                            重定义数组 (特征码数组1, 假, 病毒库1)
                            .计次循环首 (病毒库1, i)
                                赋值 (特征码数组1 [i], 字节集 [i])
                            .计次循环尾 ()
                            .判断开始 (小于或等于 (病毒库1, 0))
                                返回 (-1)
                            .默认
                                赋值 (特征码库, 病毒库1)
                                赋值 (总病毒库, 相加 (总病毒库, 病毒库1))
                            .判断结束
                            
                        .判断结束
                        
                    .判断结束
                    
                .默认
                    赋值 (数量, 取数组成员数 (图标特征码1))
                    .判断开始 (大于 (数量, 0))
                        
                    .默认
                        赋值 (数据, 读入文件 (取文本右边 (名单 [名单计次], 相减 (取文本长度 (名单 [名单计次]), 1))))
                        赋值 (数据, 未知支持库函数_4 (未知支持库函数_1 (数据), 到文本 (“关键代码不给看”), 2))
                        .判断开始 (不等于 (取字节集右边 (数据, 8), “关键代码不给看”))
                            返回 (-1)
                        .默认
                            赋值 (数据, 取字节集左边 (数据, 相减 (汇编_取字节集长度 (数据), 8)))
                            赋值 (字节集, 分割字节集 (数据, “关键代码不给看”, ))
                            赋值 (病毒库2, 取数组成员数 (字节集))
                            重定义数组 (图标特征码1, 假, 病毒库2)
                            .计次循环首 (病毒库2, i)
                                赋值 (图标特征码1 [i], 到文本 (字节集 [i]))
                            .计次循环尾 ()
                            .判断开始 (小于或等于 (病毒库2, 0))
                                返回 (-1)
                            .默认
                                赋值 (图标库, 病毒库2)
                                赋值 (总病毒库, 相加 (总病毒库, 病毒库2))
                            .判断结束
                            
                        .判断结束
                        
                    .判断结束
                    
                    
                    
                    
                .判断结束
                
            .默认
                返回 (-1)
            .判断结束
            
        .计次循环尾 ()
    .判断结束
    
.判断结束
返回 (总病毒库)

.子程序 _启动子程序, 整数型, , 请在本子程序中放置动态链接库初始化代码
赋值 (句柄, _打开当前进程 ())
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 返回值被忽略。

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 检测壳子, 文本型, , 空 无毒
.参数 PE数据, 字节集, , 
.参数 DataLength, 整数型, , 
.参数 路径, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 基址, 整数型, , , 
.局部变量 DosHeader, IMAGE_DOS_HEADER, , , 
.局部变量 NTHeader, IMAGE_NT_HEADERS, , , 
.局部变量 首字节, 字节集, , , 
.局部变量 入口点V偏移, 整数型, , , 
.局部变量 SectionHeader, IMAGE_SECTION_HEADER, , "0", 
.局部变量 入口点R偏移, 整数型, , , 
.局部变量 病毒名, 整数型, , , 
.局部变量 输入字符串长度, 整数型, , , 
.局部变量 返回字符串, 字节集, , , 
.局部变量 图标数, 整数型, , , 
.局部变量 Ico, 字节集, , , 
.局部变量 md5, 文本型, , , 

.如果真 (小于 (DataLength, 64))
    返回 (“”)
.如果真结束
赋值 (基址, _取字节集指针 (PE数据))
.如果真 (大于 (基址, 0))
    RtlMoveMemory_IMAGE_DOS_HEADER_1 (DosHeader, 基址, 64)
    .如果真 (等于 (DosHeader.e_magic, #IMAGE_DOS_SIGNATURE))
        .如果真 (小于 (DataLength, 相加 (DosHeader.e_lfanew, 248)))
            返回 (“”)
        .如果真结束
        RtlMoveMemory_IMAGE_NT_HEADERS_1 (NTHeader, 相加 (基址, DosHeader.e_lfanew), 248)
        .如果真 (等于 (NTHeader.Signature, #IMAGE_NT_SIGNATURE))
            .如果真 (不等于 (位与 (NTHeader.FileHeader.Characteristics, #IMAGE_FILE_EXECUTABLE_IMAGE), 0))
                .如果真 (小于 (DataLength, 相加 (DosHeader.e_lfanew, 248, 相乘 (NTHeader.FileHeader.NumberOfSections, 40))))
                    返回 (“”)
                .如果真结束
                赋值 (图标数, 未知支持库函数_27 (路径))
                .如果真 (不等于 (图标数, 0))
                    赋值 (Ico, 未知支持库函数_30 (16, 16))
                    未知支持库函数_26 (Ico, 路径, 0, )
                    .如果真 (不等于 (Ico, {  }))
                        赋值 (输入字符串长度, 汇编_取字节集长度 (Ico))
                        赋值 (返回字符串, 取空白字节集_ (16)) ' 分配16字节的内存
                        ASM_MD5 (_取字节集指针 (Ico), 输入字符串长度, 输入字符串长度, _取字节集指针 (返回字符串), 0)
                        赋值 (md5, 返回字符串到MD5文本 (返回字符串))
                        .计次循环首 (图标库, i)
                            .如果真 (等于 (文本比较 (图标特征码1 [i], md5, 假), 0))
                                返回 (相加 (取病毒名 (4), 取文本左边 (到文本 (DataLength), 3)))
                            .如果真结束
                            
                        .计次循环尾 ()
                        
                    .如果真结束
                    
                .如果真结束
                .如果真 (大于或等于 (DataLength, 2000))
                    .如果真 (不等于 (寻找字节集 (PE数据, 指针到字节集 (基址, 1000), 1000), -1))
                        返回 (相加 (取病毒名 (2), 取文本左边 (到文本 (DataLength), 3)))
                    .如果真结束
                    
                .如果真结束
                
                赋值 (入口点V偏移, NTHeader.OptionalHeader.AddressOfEntryPoint)
                 ' 寻找代码段(Text) 并计算 入口点R偏移
                重定义数组 (SectionHeader, 假, NTHeader.FileHeader.NumberOfSections)
                .变量循环首 (0, 相减 (NTHeader.FileHeader.NumberOfSections, 1), 1, i)
                    RtlMoveMemory_IMAGE_SECTION_HEADER_1 (SectionHeader [相加 (i, 1)], 相加 (基址, DosHeader.e_lfanew, 248, 相乘 (i, 40)), 40)
                    .如果真 (并且 (大于或等于 (入口点V偏移, SectionHeader [相加 (i, 1)].VirtualAddress), 小于或等于 (入口点V偏移, 相加 (SectionHeader [相加 (i, 1)].VirtualAddress, SectionHeader [相加 (i, 1)].SizeOfRawData))))
                        赋值 (入口点R偏移, 相减 (入口点V偏移, 相减 (SectionHeader [相加 (i, 1)].VirtualAddress, SectionHeader [相加 (i, 1)].PointerToRawData)))
                        跳出循环 ()
                    .如果真结束
                    
                .变量循环尾 ()
                 ' ''''''''''''''''''''''''''''
                赋值 (DataLength, 相减 (DataLength, 入口点R偏移))
                .如果真 (大于 (DataLength, 8000))
                    赋值 (DataLength, 8000)
                .如果真结束
                .如果真 (大于 (DataLength, 0))
                    赋值 (首字节, 指针到字节集 (相加 (基址, 入口点R偏移), DataLength))
                    .如果真 (不等于 (首字节, {  }))
                        .计次循环首 (壳病毒库, i)
                            .如果真 (不等于 (寻找字节集 (首字节, 壳特征数组 [i], ), -1))
                                返回 (相加 (取病毒名 (1), 到文本 (i)))
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果真结束
                    
                .如果真结束
                返回 (“”)
            .如果真结束
            
        .如果真结束
        
        
        
        
    .如果真结束
    
.如果真结束

返回 (“”)

.子程序 _取字节集指针, 整数型, , 
.参数 文本, 字节集, , 

 ' MOV EAX,[ESP+8]
 ' MOV EAX,[EAX]
 ' ADD EAX,8
 ' LEAVE
 ' RET
置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 68, 36, 8, 139, 0, 129, 192, 8, 0, 0, 0, 201, 195 })
返回 (-1)

.子程序 取病毒名, 文本型, , 
.参数 名称, 整数型, , 

.判断开始 (等于 (名称, 1))
    返回 (“Avoid kill Trojan.”) ' 免杀技术的木马
.判断 (等于 (名称, 2))
    返回 (“Bound of Trojan.”) ' 捆绑木马
.判断 (等于 (名称, 3))
    返回 (“Trojan program.”) ' 木马程序
.默认
    返回 (“Camouflage sex Trojan.”)
.判断结束


.子程序 Virus_signature, 文本型, 公开, 空 无毒 否则返回病毒名
.参数 路径, 文本型, , 
.参数 文件长度, 长整数型, , 

.局部变量 文件号, 整数型, , , 
.局部变量 md5, 文本型, , , 
.局部变量 偏移值, 整数型, , , 
.局部变量 取得的特征码, 字节集, , , 
.局部变量 输入字符串长度, 整数型, , , 
.局部变量 返回字符串, 字节集, , , 
.局部变量 地址, 整数型, , , 
.局部变量 取特征码长度, 长整数型, , , 
.局部变量 指针, 整数型, , , 
.局部变量 路径1, 文本型, , , 
.局部变量 文件结构信息, 文件结构信息_, , , 
.局部变量 缓冲区, 字节型, , "0", 
.局部变量 读到长度, 长整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 病毒名, 文本型, , , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (取文本右边 (路径, 4), “.lnk”))
    赋值 (路径1, 未知支持库函数_1 (路径))
    .判断开始 (等于 (路径1, “”))
        
    .默认
        赋值 (路径, 路径1)
    .判断结束
    
.如果真结束
.如果真 (大于 (文件长度, 0))
    赋值 (文件号, 打开文件_ (路径, 文件结构信息, 相加 (1, 2)))
    .判断开始 (大于 (文件号, 0))
        .如果真 (大于 (文件长度, 31457280)) ' 30 mb
            赋值 (文件长度, 31457280)
        .如果真结束
        重定义数组 (缓冲区, 假, 文件长度)
        赋值 (读到长度, 读入缓存_ (文件号, 缓冲区, 文件长度))
        .判断开始 (大于 (读到长度, 0))
            _关闭对象 (文件号)
            .如果真 (不等于 (读到长度, 文件长度))
                重定义数组 (缓冲区, 真, 读到长度)
            .如果真结束
            赋值 (病毒名, 检测壳子 (到字节集 (缓冲区), 读到长度, 路径))
            .如果真 (不等于 (病毒名, “”))
                返回 (病毒名)
            .如果真结束
            
        .默认
            _关闭对象 (文件号)
        .判断结束
        
    .默认
        .如果真 (小于或等于 (文件长度, 31457280))
            赋值 (字节集, 读入文件 (路径))
            .如果真 (不等于 (字节集, {  }))
                赋值 (病毒名, 检测壳子 (到字节集 (字节集), 文件长度, 路径))
                .如果真 (不等于 (病毒名, “”))
                    返回 (病毒名)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .判断结束
    
    .如果真 (小于或等于 (文件长度, 314572800))
        .如果真 (等于 (文件映射.初始化_从文件创建 (路径), 真))
            .计次循环首 (特征码库, i)
                .如果真 (不等于 (寻找字节集 (到字节集 (缓冲区), 特征码数组1 [i], ), -1))
                    文件映射.关闭 ()
                    返回 (相加 (取病毒名 (3), 取文本左边 (到文本 (文件长度), 3)))
                .如果真结束
                
            .计次循环尾 ()
            文件映射.关闭 ()
        .如果真结束
        
    .如果真结束
    
.如果真结束

返回 (“”)

.子程序 汇编_取字节集长度, 整数型, , 
.参数 预取长度的字节集, 字节集, , 

 ' 00407C71      8B85 08000000       MOV EAX,DWORD PTR SS:[EBP+8]
 ' 00407C77      8B00                MOV EAX,DWORD PTR DS:[EAX]
 ' 00407C79      85C0                TEST EAX,EAX
 ' 00407C7B      74 06               JE SHORT 00407C83
 ' 00407C7D      8B80 04000000       MOV EAX,DWORD PTR DS:[EAX+4]
 ' 00407C83      C9                  LEAVE
 ' 00407C84      C2 0400             RETN 4
置入代码 ({ 139, 133, 8, 0, 0, 0, 139, 0, 133, 192, 116, 6, 139, 128, 4, 0, 0, 0, 201, 194, 4, 0 })
返回 (0)

.程序集 程序集2, , , 

.子程序 读共享, 字节集, , 读取一个共享数据,由"写共享"创建(返回共享数据,失败返回空字节集)
.参数 对象名称, 文本型, , 共享内容的名字,用来读取该共享对象中的数据

.局部变量 映射句柄, 整数型, , , 
.局部变量 视图地址, 整数型, , , 
.局部变量 共享数据, 字节集, , , 

赋值 (映射句柄, 打开文件映射对象_ (6, 0, 到全角 (对象名称)))
赋值 (视图地址, 映射文件对象_ (映射句柄, 6, 0, 0, 0))
.如果真 (等于 (视图地址, 0))
    返回 ({  })
.如果真结束
赋值 (共享数据, 读字节集 (视图地址, 0))
解除文件映射_ (视图地址)
_关闭对象 (映射句柄)
返回 (共享数据)


.子程序 读字节集, 字节集, , 返回指定内存指针所指向地址处的一段数据或字节集变量或字节集参数数据
.参数 指针地址, 整数型, , 内存地址指针
.参数 数据长度, 整数型, , 指定内存数据长度 (如果获取字节集变量或字节集参数的完整数据,请留空)

.局部变量 内存数据, 字节集, , , 
.局部变量 结束位置, 整数型, , , 
.局部变量 缓存大小, 整数型, , , 

.如果真 (不等于 (数据长度, 0))
    赋值 (内存数据, 取空白字节集_ (数据长度))
    _指针_读字节集 (内存数据, 指针地址, 数据长度)
    返回 (内存数据)
.如果真结束

赋值 (缓存大小, 4)
.循环判断首 ()
    赋值 (缓存大小, 相加 (缓存大小, 4))
    赋值 (内存数据, 取空白字节集_ (缓存大小))
    _指针_读字节集 (内存数据, 指针地址, 缓存大小)
    赋值 (结束位置, 寻找字节集 (内存数据, { 171, 171, 171, 171, 171, 171, 171, 171 }, ))
.循环判断尾 (等于 (结束位置, -1))
返回 (取字节集左边 (内存数据, 相减 (结束位置, 1)))


.子程序 取空白字节集_, 字节集, , 返回具有特定数目 0 字节的字节集
.参数 零字节数目, 整数型, , 

.局部变量 字节集指针, 整数型, , , 

.如果真 (小于或等于 (零字节数目, 0))
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 51, 192, 139, 229, 93, 194, 4, 0 })
     ' XOR EAX,EAX
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束
 ' 分配可用内存空间，+8是为了填充字节集类型标志
赋值 (字节集指针, HeapAlloc (GetProcessHeap (), 8, 相加 (零字节数目, 8))) ' #HEAP_ZERO_MEMORY=8
.如果真 (等于 (字节集指针, 0))
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 139, 229, 93, 194, 4, 0 })
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束
 ' 嵌入汇编代码以替换掉原来的返回代码，并添加字节集类型标志。
置入代码 ({ 254, 0, 255, 117, 8, 143, 64, 4, 139, 229, 93, 194, 4, 0 })
返回 ({  })



.子程序 ASM_MD5, 空白型, , 
.参数 源数据起始地址, 整数型, , 
.参数 本段数据长度, 整数型, , 
.参数 数据总长度, 整数型, , 
.参数 结果, 整数型, , 16字节
.参数 数据分段信息, 整数型, , 0=不分段|1=开始段|2=中间段|3=结束段

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 83, 86, 87, 139, 69, 24, 72, 127, 30, 139, 125, 20, 199, 7, 1, 35, 69, 103, 199, 71, 4, 137, 171, 205, 239, 199, 71, 8, 254, 220, 186, 152, 199, 71, 12, 118, 84, 50, 16, 51, 192, 137, 69, 252, 136, 69, 248, 139, 117, 8, 141, 125, 168, 185, 16, 0, 0, 0, 139, 93, 252, 141, 83, 4, 59, 85, 12, 119, 13, 139, 4, 51, 171, 139, 218, 226, 240, 137, 93, 252, 235, 92, 139, 69, 24, 11, 192, 116, 9, 131, 248, 3, 15, 133, 23, 9, 0, 0, 139, 209, 59, 93, 12, 119, 44, 43, 192, 181, 4, 59, 93, 12, 116, 11, 193, 224, 8, 138, 4, 51, 67, 254, 205, 235, 240, 67, 137, 93, 252, 193, 224, 8, 176, 128, 254, 205, 116, 5, 193, 224, 8, 235, 247, 15, 200, 171, 73, 116, 25, 43, 192, 243, 171, 128, 250, 3, 114, 16, 176, 8, 247, 101, 16, 146, 137, 85, 224, 137, 69, 228, 198, 69, 248, 1, 139, 69, 20, 139, 16, 137, 85, 244, 139, 80, 4, 137, 85, 240, 139, 80, 8, 137, 85, 236, 139, 80, 12, 137, 85, 232, 139, 69, 240, 139, 200, 35, 69, 236, 247, 209, 35, 77, 232, 11, 193, 3, 69, 168, 5, 120, 164, 106, 215, 3, 69, 244, 193, 192, 7, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 200, 35, 69, 240, 247, 209, 35, 77, 236, 11, 193, 3, 69, 172, 5, 86, 183, 199, 232, 3, 69, 232, 193, 192, 12, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 200, 35, 69, 244, 247, 209, 35, 77, 240, 11, 193, 3, 69, 176, 5, 219, 112, 32, 36, 3, 69, 236, 193, 192, 17, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 200, 35, 69, 232, 247, 209, 35, 77, 244, 11, 193, 3, 69, 180, 5, 238, 206, 189, 193, 3, 69, 240, 193, 192, 22, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 200, 35, 69, 236, 247, 209, 35, 77, 232, 11, 193, 3, 69, 184, 5, 175, 15, 124, 245, 3, 69, 244, 193, 192, 7, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 200, 35, 69, 240, 247, 209, 35, 77, 236, 11, 193, 3, 69, 188, 5, 42, 198, 135, 71, 3, 69, 232, 193, 192, 12, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 200, 35, 69, 244, 247, 209, 35, 77, 240, 11, 193, 3, 69, 192, 5, 19, 70, 48, 168, 3, 69, 236, 193, 192, 17, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 200, 35, 69, 232, 247, 209, 35, 77, 244, 11, 193, 3, 69, 196, 5, 1, 149, 70, 253, 3, 69, 240, 193, 192, 22, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 200, 35, 69, 236, 247, 209, 35, 77, 232, 11, 193, 3, 69, 200, 5, 216, 152, 128, 105, 3, 69, 244, 193, 192, 7, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 200, 35, 69, 240, 247, 209, 35, 77, 236, 11, 193, 3, 69, 204, 5, 175, 247, 68, 139, 3, 69, 232, 193, 192, 12, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 200, 35, 69, 244, 247, 209, 35, 77, 240, 11, 193, 3, 69, 208, 5, 177, 91, 255, 255, 3, 69, 236, 193, 192, 17, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 200, 35, 69, 232, 247, 209, 35, 77, 244, 11, 193, 3, 69, 212, 5, 190, 215, 92, 137, 3, 69, 240, 193, 192, 22, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 200, 35, 69, 236, 247, 209, 35, 77, 232, 11, 193, 3, 69, 216, 5, 34, 17, 144, 107, 3, 69, 244, 193, 192, 7, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 200, 35, 69, 240, 247, 209, 35, 77, 236, 11, 193, 3, 69, 220, 5, 147, 113, 152, 253, 3, 69, 232, 193, 192, 12, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 200, 35, 69, 244, 247, 209, 35, 77, 240, 11, 193, 3, 69, 224, 5, 142, 67, 121, 166, 3, 69, 236, 193, 192, 17, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 200, 35, 69, 232, 247, 209, 35, 77, 244, 11, 193, 3, 69, 228, 5, 33, 8, 180, 73, 3, 69, 240, 193, 192, 22, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 77, 236, 139, 85, 232, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 172, 5, 98, 37, 30, 246, 3, 69, 244, 193, 192, 5, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 77, 240, 139, 85, 236, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 192, 5, 64, 179, 64, 192, 3, 69, 232, 193, 192, 9, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 77, 244, 139, 85, 240, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 212, 5, 81, 90, 94, 38, 3, 69, 236, 193, 192, 14, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 77, 232, 139, 85, 244, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 168, 5, 170, 199, 182, 233, 3, 69, 240, 193, 192, 20, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 77, 236, 139, 85, 232, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 188, 5, 93, 16, 47, 214, 3, 69, 244, 193, 192, 5, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 77, 240, 139, 85, 236, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 208, 5, 83, 20, 68, 2, 3, 69, 232, 193, 192, 9, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 77, 244, 139, 85, 240, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 228, 5, 129, 230, 161, 216, 3, 69, 236, 193, 192, 14, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 77, 232, 139, 85, 244, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 184, 5, 200, 251, 211, 231, 3, 69, 240, 193, 192, 20, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 77, 236, 139, 85, 232, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 204, 5, 230, 205, 225, 33, 3, 69, 244, 193, 192, 5, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 77, 240, 139, 85, 236, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 224, 5, 214, 7, 55, 195, 3, 69, 232, 193, 192, 9, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 77, 244, 139, 85, 240, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 180, 5, 135, 13, 213, 244, 3, 69, 236, 193, 192, 14, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 77, 232, 139, 85, 244, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 200, 5, 237, 20, 90, 69, 3, 69, 240, 193, 192, 20, 3, 69, 236, 137, 69, 240, 139, 69, 240, 139, 77, 236, 139, 85, 232, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 220, 5, 5, 233, 227, 169, 3, 69, 244, 193, 192, 5, 3, 69, 240, 137, 69, 244, 139, 69, 244, 139, 77, 240, 139, 85, 236, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 176, 5, 248, 163, 239, 252, 3, 69, 232, 193, 192, 9, 3, 69, 244, 137, 69, 232, 139, 69, 232, 139, 77, 244, 139, 85, 240, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 196, 5, 217, 2, 111, 103, 3, 69, 236, 193, 192, 14, 3, 69, 232, 137, 69, 236, 139, 69, 236, 139, 77, 232, 139, 85, 244, 35, 194, 247, 210, 35, 202, 11, 193, 3, 69, 216, 5, 138, 76, 42, 141, 3, 69, 240, 193, 192, 20, 3, 69, 236, 137, 69, 240, 139, 69, 240, 51, 69, 236, 51, 69, 232, 3, 69, 188, 5, 66, 57, 250, 255, 3, 69, 244, 193, 192, 4, 3, 69, 240, 137, 69, 244, 139, 69, 244, 51, 69, 240, 51, 69, 236, 3, 69, 200, 5, 129, 246, 113, 135, 3, 69, 232, 193, 192, 11, 3, 69, 244, 137, 69, 232, 139, 69, 232, 51, 69, 244, 51, 69, 240, 3, 69, 212, 5, 34, 97, 157, 109, 3, 69, 236, 193, 192, 16, 3, 69, 232, 137, 69, 236, 139, 69, 236, 51, 69, 232, 51, 69, 244, 3, 69, 224, 5, 12, 56, 229, 253, 3, 69, 240, 193, 192, 23, 3, 69, 236, 137, 69, 240, 139, 69, 240, 51, 69, 236, 51, 69, 232, 3, 69, 172, 5, 68, 234, 190, 164, 3, 69, 244, 193, 192, 4, 3, 69, 240, 137, 69, 244, 139, 69, 244, 51, 69, 240, 51, 69, 236, 3, 69, 184, 5, 169, 207, 222, 75, 3, 69, 232, 193, 192, 11, 3, 69, 244, 137, 69, 232, 139, 69, 232, 51, 69, 244, 51, 69, 240, 3, 69, 196, 5, 96, 75, 187, 246, 3, 69, 236, 193, 192, 16, 3, 69, 232, 137, 69, 236, 139, 69, 236, 51, 69, 232, 51, 69, 244, 3, 69, 208, 5, 112, 188, 191, 190, 3, 69, 240, 193, 192, 23, 3, 69, 236, 137, 69, 240, 139, 69, 240, 51, 69, 236, 51, 69, 232, 3, 69, 220, 5, 198, 126, 155, 40, 3, 69, 244, 193, 192, 4, 3, 69, 240, 137, 69, 244, 139, 69, 244, 51, 69, 240, 51, 69, 236, 3, 69, 168, 5, 250, 39, 161, 234, 3, 69, 232, 193, 192, 11, 3, 69, 244, 137, 69, 232, 139, 69, 232, 51, 69, 244, 51, 69, 240, 3, 69, 180, 5, 133, 48, 239, 212, 3, 69, 236, 193, 192, 16, 3, 69, 232, 137, 69, 236, 139, 69, 236, 51, 69, 232, 51, 69, 244, 3, 69, 192, 5, 5, 29, 136, 4, 3, 69, 240, 193, 192, 23, 3, 69, 236, 137, 69, 240, 139, 69, 240, 51, 69, 236, 51, 69, 232, 3, 69, 204, 5, 57, 208, 212, 217, 3, 69, 244, 193, 192, 4, 3, 69, 240, 137, 69, 244, 139, 69, 244, 51, 69, 240, 51, 69, 236, 3, 69, 216, 5, 229, 153, 219, 230, 3, 69, 232, 193, 192, 11, 3, 69, 244, 137, 69, 232, 139, 69, 232, 51, 69, 244, 51, 69, 240, 3, 69, 228, 5, 248, 124, 162, 31, 3, 69, 236, 193, 192, 16, 3, 69, 232, 137, 69, 236, 139, 69, 236, 51, 69, 232, 51, 69, 244, 3, 69, 176, 5, 101, 86, 172, 196, 3, 69, 240, 193, 192, 23, 3, 69, 236, 137, 69, 240, 139, 69, 236, 139, 77, 240, 139, 85, 232, 247, 210, 11, 202, 51, 193, 3, 69, 168, 5, 68, 34, 41, 244, 3, 69, 244, 193, 192, 6, 3, 69, 240, 137, 69, 244, 139, 69, 240, 139, 77, 244, 139, 85, 236, 247, 210, 11, 202, 51, 193, 3, 69, 196, 5, 151, 255, 42, 67, 3, 69, 232, 193, 192, 10, 3, 69, 244, 137, 69, 232, 139, 69, 244, 139, 77, 232, 139, 85, 240, 247, 210, 11, 202, 51, 193, 3, 69, 224, 5, 167, 35, 148, 171, 3, 69, 236, 193, 192, 15, 3, 69, 232, 137, 69, 236, 139, 69, 232, 139, 77, 236, 139, 85, 244, 247, 210, 11, 202, 51, 193, 3, 69, 188, 5, 57, 160, 147, 252, 3, 69, 240, 193, 192, 21, 3, 69, 236, 137, 69, 240, 139, 69, 236, 139, 77, 240, 139, 85, 232, 247, 210, 11, 202, 51, 193, 3, 69, 216, 5, 195, 89, 91, 101, 3, 69, 244, 193, 192, 6, 3, 69, 240, 137, 69, 244, 139, 69, 240, 139, 77, 244, 139, 85, 236, 247, 210, 11, 202, 51, 193, 3, 69, 180, 5, 146, 204, 12, 143, 3, 69, 232, 193, 192, 10, 3, 69, 244, 137, 69, 232, 139, 69, 244, 139, 77, 232, 139, 85, 240, 247, 210, 11, 202, 51, 193, 3, 69, 208, 5, 125, 244, 239, 255, 3, 69, 236, 193, 192, 15, 3, 69, 232, 137, 69, 236, 139, 69, 232, 139, 77, 236, 139, 85, 244, 247, 210, 11, 202, 51, 193, 3, 69, 172, 5, 209, 93, 132, 133, 3, 69, 240, 193, 192, 21, 3, 69, 236, 137, 69, 240, 139, 69, 236, 139, 77, 240, 139, 85, 232, 247, 210, 11, 202, 51, 193, 3, 69, 200, 5, 79, 126, 168, 111, 3, 69, 244, 193, 192, 6, 3, 69, 240, 137, 69, 244, 139, 69, 240, 139, 77, 244, 139, 85, 236, 247, 210, 11, 202, 51, 193, 3, 69, 228, 5, 224, 230, 44, 254, 3, 69, 232, 193, 192, 10, 3, 69, 244, 137, 69, 232, 139, 69, 244, 139, 77, 232, 139, 85, 240, 247, 210, 11, 202, 51, 193, 3, 69, 192, 5, 20, 67, 1, 163, 3, 69, 236, 193, 192, 15, 3, 69, 232, 137, 69, 236, 139, 69, 232, 139, 77, 236, 139, 85, 244, 247, 210, 11, 202, 51, 193, 3, 69, 220, 5, 161, 17, 8, 78, 3, 69, 240, 193, 192, 21, 3, 69, 236, 137, 69, 240, 139, 69, 236, 139, 77, 240, 139, 85, 232, 247, 210, 11, 202, 51, 193, 3, 69, 184, 5, 130, 126, 83, 247, 3, 69, 244, 193, 192, 6, 3, 69, 240, 137, 69, 244, 139, 69, 240, 139, 77, 244, 139, 85, 236, 247, 210, 11, 202, 51, 193, 3, 69, 212, 5, 53, 242, 58, 189, 3, 69, 232, 193, 192, 10, 3, 69, 244, 137, 69, 232, 139, 69, 244, 139, 77, 232, 139, 85, 240, 247, 210, 11, 202, 51, 193, 3, 69, 176, 5, 187, 210, 215, 42, 3, 69, 236, 193, 192, 15, 3, 69, 232, 137, 69, 236, 139, 69, 232, 139, 77, 236, 139, 85, 244, 247, 210, 11, 202, 51, 193, 3, 69, 204, 5, 145, 211, 134, 235, 3, 69, 240, 193, 192, 21, 3, 69, 236, 137, 69, 240, 139, 117, 20, 139, 69, 244, 1, 6, 139, 69, 240, 1, 70, 4, 139, 69, 236, 1, 70, 8, 139, 69, 232, 1, 70, 12, 128, 125, 248, 0, 15, 132, 195, 246, 255, 255, 139, 125, 20, 185, 4, 0, 0, 0, 139, 7, 171, 226, 251, 95, 94, 91, 201, 194, 20, 0 })
返回 ()

.子程序 返回字符串到MD5文本, 文本型, , 以空格分隔
.参数 输入字节集, 字节集, , 

.局部变量 循环计次, 整数型, , , 
.局部变量 x, 字节型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 y, 文本型, , , 

赋值 (i, 1)
赋值 (j, 0)
.计次循环首 (汇编_取字节集长度 (输入字节集), 循环计次)
    赋值 (x, 取字节集数据 (输入字节集, 1, i))
    赋值 (y, 到小写 (取十六进制文本 (x)))
    .如果真 (等于 (取文本长度 (y), 1))
        赋值 (y, 相加 (到文本 (0), y))
    .如果真结束
    赋值 (返回文本, 相加 (返回文本, y))
.计次循环尾 ()
返回 (返回文本)


.类模块 文件读写, , , 

.子程序 打开文件, 逻辑型, , 如果文件已用同一个类打开将会失败。
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, , 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.参数 共享方式, 整数型, , 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。
.参数 是否自动删除, 逻辑型, 可空, 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。



.子程序 生成空文件, 长整数型, , 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 空文件的尺寸, 长整数型, 可空, 默认为0
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。



.子程序 生成重复字节文件, 长整数型, , 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 欲重复的字节集数据, 字节集, 可空, 默认为{0}
.参数 重复的次数, 整数型, 可空, 默认为1次
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。



.子程序 移到文件首, 逻辑型, , 


.子程序 移到文件尾, 逻辑型, , 


.子程序 移动读写位置, 逻辑型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 整数型, , 



.子程序 取读写位置, 长整数型, , 


.子程序 关闭文件, 空白型, , 


.子程序 取文件长度, 长整数型, , 


.子程序 _寻找字节集, 整数型, , 返回值根据起始搜寻位置计算
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 0为首位置，1为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从0开始
.参数 长度1, 长整数型, 可空, 如果设置为1000 那么从起始搜寻位置开始搜索1000字节集长度就终止 0位全部



.子程序 写出字节集, 逻辑型, , 写出一段或数段字节集数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。
.参数 欲写出的字节集数据, 字节集, , 



.子程序 是否在文件尾, 逻辑型, , 


.子程序 取错误信息, 空白型, , 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 



.子程序 读入字节集, 字节集, , 
.参数 欲读入数据的长度, 整数型, 可空, 如果为空则读入 当前读写位置 到 文件尾 之间的全部字节集



.子程序 清除文件缓冲区, 逻辑型, , 


.子程序 读入文本, 文本型, , 从文件中当前读写位置读取并返回一段文本数据，实际读入长度（即返回文本的尺寸）可能会小于欲读入长度。如果该数据中存在字节 0 或 26（文本结束标志），将仅返回该字节之前的数据。
.参数 欲读入文本数据的长度, 整数型, 可空, 如果本参数被省略，默认读入文件中的所有文本数据。



.子程序 写出文本, 逻辑型, , 写出文本数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 欲写出的文本, 文本型, , 



.子程序 写文本行, 逻辑型, , 写出文本数据到文件中当前读写位置处。每行的尾部将被自动加上回车及换行符。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 欲写出的文本, 文本型, , 



.子程序 读入一行, 文本型, , 


.子程序 插入字节集, 逻辑型, , 
.参数 欲写出的字节集数据, 字节集, , 



.子程序 取文件号, 整数型, , 


.类模块 文件映射, , , 

.子程序 取映射对象名, 文本型, , 


.子程序 初始化_从文件创建, 逻辑型, , 如果文件不存在或文件为空将失败
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读入”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败；
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。
.参数 是否自动删除, 逻辑型, 可空, 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。
.参数 文件映射对象名, 文本型, 可空, 



.子程序 初始化_从内存创建, 逻辑型, , 
.参数 映射尺寸, 长整数型, , 
.参数 文件映射对象名, 文本型, 可空, 



.子程序 初始化_从映射对象名创建, 逻辑型, , 
.参数 文件映射对象名, 文本型, , 
.参数 打开方式, 整数型, , 1、#读入：以只读方式打开映射； 2、#读写：以可读、可写方式打开映射；



.子程序 关闭, 逻辑型, , 


.子程序 取首地址, 整数型, , 


.子程序 取读写位置, 长整数型, , 


.子程序 移动读写位置, 逻辑型, , 
.参数 移动距离, 长整数型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。



.子程序 移到首位置, 空白型, , 


.子程序 移到尾位置, 空白型, , 


.子程序 读出字节集, 字节集, , 
.参数 欲读取长度, 整数型, , 



.子程序 读出文本, 文本型, , 读出一个以零字符结束的文本串


.子程序 读出字节, 字节型, , 


.子程序 读出短整数, 短整数型, , 


.子程序 读出整数, 整数型, , 


.子程序 读出长整数, 长整数型, , 


.子程序 读出小数, 小数型, , 


.子程序 读出双精度小数, 双精度小数型, , 


.子程序 读出逻辑值, 逻辑型, , 


.子程序 读出日期时间型, 日期时间型, , 


.子程序 写入字节集, 逻辑型, , 
.参数 欲写入字节集, 字节集, , 



.子程序 写入文本, 逻辑型, , 
.参数 欲写入文本, 文本型, , 



.子程序 写入小数, 逻辑型, , 
.参数 欲写入小数, 小数型, , 



.子程序 写入双精度小数, 逻辑型, , 
.参数 欲写入双精度小数, 双精度小数型, , 



.子程序 写入字节, 逻辑型, , 
.参数 欲写入字节, 字节型, , 



.子程序 写入短整数, 逻辑型, , 
.参数 欲写入短整数, 短整数型, , 



.子程序 写入整数, 逻辑型, , 
.参数 欲写入整数, 整数型, , 



.子程序 写入长整数, 逻辑型, , 
.参数 欲写入长整数, 长整数型, , 



.子程序 写入日期时间, 逻辑型, , 
.参数 欲写入值, 日期时间型, , 



.子程序 写入逻辑, 逻辑型, , 
.参数 欲写入值, 逻辑型, , 



.子程序 取错误信息, 空白型, , 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 



.子程序 插入字节集, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入字节集, 字节集, , 



.子程序 插入文本, 逻辑型, , 插入以字符（0）为结尾的文本。因而在插入数据后，插入的尺寸会比实际插入的文本大1字节。“插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入文本, 文本型, , 



.子程序 插入小数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入小数, 小数型, , 



.子程序 插入双精度小数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入双精度小数, 双精度小数型, , 



.子程序 插入字节, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入字节, 字节型, , 



.子程序 插入短整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入短整数, 短整数型, , 



.子程序 插入整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入整数, 整数型, , 



.子程序 插入长整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入长整数, 长整数型, , 



.子程序 插入日期时间, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入值, 日期时间型, , 



.子程序 插入逻辑, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入值, 逻辑型, , 



.子程序 取文件映射尺寸, 长整数型, , 如果是用“初始化_从映射对象创建”来初始化类，得到的尺寸会有可能比真实文件尺寸稍大（4096的倍数）


.子程序 _寻找字节集, 整数型, , 寻找成功就返回指定寻找数据的起始位置，位置值从 0 开始。如果未找到或寻找失败，返回 -1。
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 0为首位置，1为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从当前读写位置开始。如果为负数，则从当前读写位置减“起始搜寻位置”的位置开始搜寻
.参数 是否倒找字节集, 逻辑型, 可空, 如果为真则从尾部向首方向搜寻，如果被省略，则默认为假



.子程序 中止寻找字节集, 逻辑型, , 需要将“寻找字节集”方法的第四个参数设为真时，本方法才可用。


.子程序 取寻找字节集进度, 小数型, , 需要将“寻找字节集”方法的第四个参数设为真时，本方法才可用。返回当前寻找进度的百分比。


.子程序 删除数据, 逻辑型, , 本方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲删除数据的长度, 整数型, , 



.子程序 取文件映射对象名, 文本型, , 



 ' 不属于任何一个程序集、类模块的函数：
