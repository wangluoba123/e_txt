 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 690
    高度 = 329
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “代理测试窗口”
    帮助文件名 = “”



.常量 网页访问模板, "“GET / HTTP/1.1
Accept: */*
Referer: http://[<WebHost>]
Accept-Language: zh-cn
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;)
Host: [<WebHost>]
Connection: Keep-Alive
Cookie: UniProc1196385105=111965069260010186

”", , 
.常量 , , , 
.常量 代理消息_无, "0", , 
.常量 代理消息_传输数据, "1", , 
.常量 代理消息_连接被断开, "2", , 
.常量 , , , 
.常量 代理消息_连接失败, "-1", , 
.常量 代理消息_连接成功, "3", , 
.常量 代理消息_未知连接方式, "4", , 
.常量 代理消息_帐号密码错误, "5", , 
.常量 代理消息_访问目标失败, "6", , 
.常量 消息类型_客户连接, "0", 隐藏, 
.常量 消息类型_数据达到, "1", 隐藏, 
.常量 消息类型_连接断开, "2", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库



 ' 所需要的模块
 ' SSL_Socket F:\ＷＯＲＫ\代理\SSL代理\SSL_Socket.ec


.全局变量 匿名全局变量_1294, 空白型, , , 

.DLL命令 _htons, 整数型, "ws2_32.dll", "htons", , 
    .参数 netlong, 整数型, , 

.DLL命令 _inet_addr, 整数型, "ws2_32.dll", "inet_addr", , 
    .参数 CP, 文本型, , 

.DLL命令 _recv, 整数型, "ws2_32.dll", "recv", , 
    .参数 s, 整数型, , 
    .参数 buf, 字节集, , 
    .参数 lLen, 整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 _send, 整数型, "ws2_32.dll", "send", , 
    .参数 s, 整数型, , 
    .参数 buf, 字节集, , 
    .参数 lLen, 整数型, , 
    .参数 flags, 整数型, , 

.类模块 类_Socks客户_SSL, , , 

.程序集变量 客户, 类_客户端_SSL, , , 
.程序集变量 匿名程序集变量_1977, 空白型, , , 
.程序集变量 私_实际数据, 字节集, , , 
.程序集变量 匿名程序集变量_1258, 空白型, , , 
.程序集变量 目标地址, 文本型, , , 
.程序集变量 目标端口, 整数型, , , 
.程序集变量 匿名程序集变量_1259, 空白型, , , 
.程序集变量 代理服务器地址, 文本型, , , 
.程序集变量 代理服务器端口, 整数型, , , 
.程序集变量 代理用户名, 文本型, , , 
.程序集变量 代理密码, 文本型, , , 
.程序集变量 匿名程序集变量_1739, 空白型, , , 
.程序集变量 集_SocksVer, 字节型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_SocksVer, 5)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 证书设置, 空白型, 公开, 
.参数 参_证书文件, 文本型, , 
.参数 参_私钥证书, 文本型, , 

客户.设置证书文件 (参_证书文件, 参_私钥证书)

.子程序 连接, 整数型, 公开, 返回[#代理消息_XX]
.参数 参_处理子程序, 子程序指针, , 必须有1个参数.用于处理网络数据
.参数 参_目标地址, 文本型, , 可以为域名或ip地址
.参数 参_目标端口, 短整数型, , 
.参数 参_超时时间, 整数型, 可空, 
.参数 参_代理服务器地址, 文本型, , 
.参数 参_代理服务器端口, 整数型, , 
.参数 参_代理用户名, 文本型, 可空, 
.参数 参_代理密码, 文本型, 可空, 
.参数 参_为Socks4, 逻辑型, 可空, 

.局部变量 返回值, 空白型, , , 

断开代理服务器 ()

赋值 (目标地址, 转换为IP地址 (取网址Host (参_目标地址)))
赋值 (目标端口, 参_目标端口)

赋值 (代理服务器地址, 参_代理服务器地址)
赋值 (代理服务器端口, 参_代理服务器端口)
赋值 (代理用户名, 参_代理用户名)
赋值 (代理密码, 参_代理密码)
.如果真 (是否为空 ())
    赋值 (3000)
.如果真结束
.如果 ()
    赋值 (4)
.否则
    赋值 (5)
.如果结束

.如果真 (等于 (客户.连接 (代理服务器地址, 代理服务器端口, 参_处理子程序, , 假), 假))
    返回 (#代理消息_连接失败)
.如果真结束

赋值 (返回值, SSL_Sock_Connect ())
.如果真 (不等于 (返回值, #代理消息_连接成功))
    客户.断开连接 ()
    返回 (返回值)
.如果真结束
.如果真 (等于 (客户.建立SSL连接 (), 假))
    客户.断开连接 ()
    返回 (#代理消息_访问目标失败)
.如果真结束
返回 (返回值)

.子程序 SSL_Sock_Connect, 整数型, , 
.局部变量 hSock, 空白型, , , 
.局部变量 dat, 字节集, , , 
.局部变量 len, 空白型, , , 

赋值 (hSock, 客户.取Socket句柄 ())
赋值 (dat, 辅_取socks协商包1 ())
赋值 (len, 取字节集长度 (dat))
.如果真 (不等于 (_send (hSock, dat, len, 0), len))
    返回 (#代理消息_连接失败)
.如果真结束
赋值 (len, 20)
赋值 (dat, 取空白字节集 (len))
.如果真 (小于或等于 (_recv (hSock, dat, len, 0), 0))
    返回 (#代理消息_未知连接方式)
.如果真结束

.判断开始 (等于 (集_SocksVer, 4)) ' -Socks4-
    .判断开始 (等于 (取字节集中间 (dat, 2, 1), { 90 })) ' 允许代理
        返回 (#代理消息_连接成功)
    .默认
        返回 (#代理消息_未知连接方式)
    .判断结束
    
.判断 (等于 (集_SocksVer, 5)) ' -Socks5-
    .判断开始 (等于 (取字节集中间 (dat, 2, 1), { 2 }))
         ' 有密码验证方式
        赋值 (dat, 辅_取密码连接包 ())
        赋值 (len, 取字节集长度 (dat))
        .如果真 (不等于 (_send (hSock, dat, len, 0), len)) ' 发送密码
            返回 (#代理消息_未知连接方式)
        .如果真结束
        赋值 (len, 20)
        赋值 (dat, 取空白字节集 (len))
        .如果真 (小于或等于 (_recv (hSock, dat, len, 0), 0)) ' 取回登陆结果
            返回 (#代理消息_连接被断开)
        .如果真结束
        .如果真 (不等于 (dat, { 1, 0 })) ' 密码错误
            返回 (#代理消息_帐号密码错误)
        .如果真结束
        
    .判断 (等于 (取字节集中间 (dat, 2, 1), { 0 }))
         ' 无身份验证方式
    .默认
        返回 (#代理消息_未知连接方式) ' 未知连接
    .判断结束
    
     ' 发送目标地址
    赋值 (dat, 辅_取目标地址连接包 ())
    赋值 (len, 取字节集长度 (dat))
    .如果真 (不等于 (_send (hSock, dat, len, 0), len))
        返回 (#代理消息_未知连接方式)
    .如果真结束
    赋值 (len, 20)
    赋值 (dat, 取空白字节集 (len))
    .如果真 (小于或等于 (_recv (hSock, dat, len, 0), 0))
        返回 (#代理消息_未知连接方式)
    .如果真结束
    .如果 (等于 (取字节集中间 (dat, 2, 1), { 0 }))
        返回 (#代理消息_连接成功)
    .否则
        返回 (#代理消息_访问目标失败)
    .如果结束
    
.默认
    
.判断结束
返回 (#代理消息_连接失败)

.子程序 内部_网络事件处理, 整数型, 公开, 返回[代理消息_XX]
.参数 标记参数值, 空白型, , 

.局部变量 变量_消息类型, 整数型, 静态, , [存放一个变量,执行后可获取消息类型]

赋值 (变量_消息类型, #代理消息_无)
.判断开始 (等于 (客户.取消息类型 (标记参数值), #消息类型_数据达到))
    内部_收到代理数据 (客户.取回数据 (标记参数值), )
.判断 (等于 (客户.取消息类型 (标记参数值), #消息类型_连接断开))
    内部_断开连接 ()
.默认
    
.判断结束
返回 (变量_消息类型)

.子程序 内部_断开连接, 空白型, , 
.参数 变量_消息类型, 空白型, 参考, 

赋值 (变量_消息类型, #代理消息_连接被断开) ' 连接断开

.子程序 内部_收到代理数据, 空白型, , 
.参数 接收数据, 字节集, , 
.参数 变量_消息类型, 整数型, 参考, 

赋值 (私_实际数据, 接收数据)
赋值 (变量_消息类型, #代理消息_传输数据) ' 实际数据

.子程序 辅_取socks协商包1, 字节集, , 
.局部变量 dat, 字节集, , , 

.判断开始 (等于 (集_SocksVer, 4))
    赋值 (dat, 到字节集 (集_SocksVer))
    赋值 (dat, 相加 (dat, { 1 })) ' 命令
    赋值 (dat, 相加 (dat, 到字节集 (到短整数 (_htons (目标端口)))))
    赋值 (dat, 相加 (dat, 到字节集 (_inet_addr (目标地址))))
    赋值 (dat, 相加 (dat, 到字节集 (取随机数 ()))) ' UserID
    赋值 (dat, 相加 (dat, { 0 })) ' 结束符
.判断 (等于 (集_SocksVer, 5))
    赋值 (dat, 到字节集 (集_SocksVer))
    赋值 (dat, 相加 (dat, { 1 }))
    赋值 (dat, 相加 (dat, { 0 }))
.默认
    
.判断结束
返回 (dat)

.子程序 辅_取目标地址连接包, 字节集, , 
.局部变量 ip, 文本型, , "4", 
.局部变量 数据包, 字节集, , , 

赋值 (ip, 分割文本 (目标地址, “.”, 4))
赋值 (数据包, 取空白字节集 (3))
赋值 (数据包 [1], 集_SocksVer) ' 版本号
赋值 (数据包 [2], 1) ' 连接模式
赋值 (数据包 [3], 0) ' 保留
赋值 (数据包, 相加 (数据包, { 1 })) ' IP连接
赋值 (数据包, 相加 (数据包, 到字节集 (_inet_addr (目标地址))))
赋值 (数据包, 相加 (数据包, 到字节集 (到短整数 (_htons (目标端口)))))
返回 (数据包)

.子程序 辅_取密码连接包, 字节集, , 
.局部变量 数据包, 字节型, , "2", 

赋值 (数据包 [1], 取字节集长度 (到字节集 (代理用户名)))
赋值 (数据包 [2], 取字节集长度 (到字节集 (代理密码)))
返回 (相加 (到字节集 ({ 1 }), 到字节集 (数据包 [1]), 到字节集 (代理用户名), 到字节集 (数据包 [2]), 到字节集 (代理密码)))

.子程序 发送数据, 逻辑型, 公开, 
.参数 数据, 字节集, , 

返回 (大于 (客户.发送数据 (数据), 0))

.子程序 取回数据, 字节集, 公开, 
返回 (私_实际数据)

.子程序 断开代理服务器, 空白型, 公开, 
客户.断开连接 ()
赋值 (私_实际数据, {  })

.窗口程序集 代理测试窗口, , , 

.程序集变量 网络环境, 类_网络环境_SSL, , , 
.程序集变量 客户端, 类_Socks客户_SSL, , , 
.程序集变量 匿名程序集变量_2628, 空白型, , , 
.程序集变量 匿名程序集变量_2630, 空白型, , , 
.程序集变量 全_代理服务器地址, 文本型, , , 
.程序集变量 全_代理服务器端口, 整数型, , , 
.程序集变量 全_代理用户名, 文本型, , , 
.程序集变量 全_代理密码, 文本型, , , 
.程序集变量 匿名程序集变量_2629, 空白型, , , 
.子程序 _连接按钮_被单击, 空白型, , 
.局部变量 网址, 文本型, , , 
.局部变量 端口, 空白型, , , 
.局部变量 匿名局部变量_2424, 空白型, , , 
.局部变量 返回值, 空白型, , , 

赋值 (网址, .)
赋值 (端口, 到数值 (.))

赋值 (返回值, 客户端.连接 (&网络事件_处理子程序, 网址, 端口, , 全_代理服务器地址, 全_代理服务器端口, 全_代理用户名, 全_代理密码))

.如果 (等于 (返回值, #代理消息_连接成功))
    “连接成功”.加入文本 (#换行符)
.否则
    
    .判断开始 (等于 (返回值, #代理消息_未知连接方式))
        “未知的代理服务器的连接方式”.加入文本 (#换行符)
    .判断 (等于 (返回值, #代理消息_帐号密码错误))
        “用户名/密码错误”.加入文本 (#换行符)
    .判断 (等于 (返回值, #代理消息_访问目标失败))
        “连接实际服务器失败”.加入文本 (#换行符)
    .判断 (等于 (返回值, #代理消息_连接失败))
        “连接失败”.加入文本 (#换行符)
    .默认
        “发生其他错误”.加入文本 (#换行符)
    .判断结束
    返回 ()
.如果结束


赋值 (., 子文本替换 (#网页访问模板, “[<WebHost>]”, ., , , 真))

.子程序 网络事件_处理子程序, 空白型, , 
.参数 参数标记, 空白型, , 

.局部变量 消息类型, 空白型, , , 

赋值 (消息类型, 客户端.内部_网络事件处理 (参数标记))
.判断开始 (等于 (消息类型, #代理消息_传输数据))
    到文本 (客户端.取回数据 ()).加入文本 ()
.判断 (等于 (消息类型, #代理消息_连接被断开))
    “与代理服务器断开连接”.加入文本 (#换行符)
.默认
    
.判断结束


.子程序 _发送按钮_被单击, 空白型, , 
.局部变量 i, 空白型, , , 

客户端.发送数据 (到字节集 (.))

.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 全_证书文件, 文本型, , , 
.局部变量 全_私钥文件, 文本型, , , 

网络环境.初始化网络环境 ()

赋值 (全_代理服务器地址, “192.168.1.2”)
赋值 (全_代理服务器端口, 1080)
赋值 (全_代理用户名, “”)
赋值 (全_代理密码, “”)
赋值 (全_证书文件, “ClientCert.pem”)
赋值 (全_私钥文件, “ClientKey.pem”)
客户端.证书设置 (全_证书文件, 全_私钥文件)


.程序集 Func, , , 

.子程序 取网址Host, 文本型, , 
.参数 地址, 文本型, , 
.参数 端口, 短整数型, 参考 可空, 

.局部变量 txt, 文本型, , , 
.局部变量 address, 空白型, , , 

赋值 (txt, 地址)
赋值 (txt, 子文本替换 (txt, “\”, “/”, , , 真))
赋值 (address, 寻找文本 (txt, “://”, , 假))
.如果真 (不等于 (address, -1))
    赋值 (txt, 文本替换 (txt, 1, address, ))
.如果真结束
.判断循环首 (等于 (取文本左边 (txt, 1), “/”))
    赋值 (txt, 文本替换 (txt, 1, 1, ))
.判断循环尾 ()
赋值 (address, 寻找文本 (txt, “/”, , 假))
.如果真 (不等于 (address, -1))
    赋值 (txt, 取文本左边 (txt, 相减 (address, 1)))
.如果真结束
赋值 (address, 倒找文本 (txt, “:”, , 假))
.如果 (不等于 (address, -1))
    赋值 (端口, 到数值 (文本替换 (txt, 1, address, )))
    赋值 (txt, 取文本左边 (txt, 相减 (address, 1)))
.否则
    赋值 (端口, 0)
.如果结束
返回 (txt)

.类模块 类_客户端_SSL, , , 

.子程序 设置证书文件, 空白型, , 
.参数 客户证书, 文本型, , ClientCert.pem
.参数 客户私钥, 文本型, , ClientKey.pem



.子程序 连接, 逻辑型, , 
.参数 目标地址, 文本型, , 
.参数 端口, 短整数型, , 
.参数 通知函数, 子程序指针, , [必须有1个参数=消息类型]
.参数 超时时间, 整数型, 可空, 
.参数 立即SSL连接, 逻辑型, 可空, [默认不用管,代理连接时需要]



.子程序 取Socket句柄, 整数型, , [使用代理协商时用到]


.子程序 建立SSL连接, 逻辑型, , [使用代理之后必须用到]


.子程序 断开连接, 空白型, , 


.子程序 取服务器IP, 文本型, , 


.子程序 发送数据, 整数型, , 返回发送成功长度[有些对方的缓存大小是有限制的]
.参数 数据, 字节集, , 



.子程序 取回数据, 字节集, , 
.参数 通知参数值, 整数型, , 



.子程序 取消息类型, 整数型, , 
.参数 通知参数值, 整数型, , 



.子程序 标记参数是否正确, 逻辑型, , [没有类似[取事件组件()]的命令,所以用这个来代替]
.参数 通知参数值, 整数型, , 



.类模块 类_服务端_SSL, , , 

.子程序 设置证书文件, 空白型, , 
.参数 服务证书, 文本型, , ServerCert.pem
.参数 服务私钥, 文本型, , ServerPriKey.pem



.子程序 启动服务, 逻辑型, , 
.参数 端口, 短整数型, , 
.参数 通知函数, 子程序指针, , 



.子程序 取Socket句柄, 整数型, , 


.子程序 关闭服务, 空白型, , 


.子程序 取消息类型, 整数型, , [0=客户连接;1=收到数据;2=连接断开;0=其他]
.参数 通知参数值, 整数型, , 



.子程序 取客户IP, 文本型, , 
.参数 通知参数值, 整数型, , 



.子程序 取客户端口, 整数型, , 
.参数 通知参数值, 整数型, , 



.子程序 取客户句柄, 整数型, , 
.参数 通知参数值, 整数型, , 



.子程序 取回数据, 字节集, , 
.参数 通知参数值, 整数型, , 



.子程序 发送数据, 整数型, , 返回发送成功长度[有些对方的缓存大小是有限制的]
.参数 客户句柄, 整数型, , 
.参数 数据, 字节集, , 



.子程序 标记参数是否正确, 逻辑型, , [没有类似[取事件组件()]的命令,所以用这个来代替]
.参数 通知参数值, 整数型, , 



.类模块 类_网络环境_SSL, , , 

.子程序 初始化网络环境, 空白型, , 
.参数 Ver, 整数型, 可空, 



.子程序 释放网络环境, 空白型, , 



 ' 不属于任何一个程序集、类模块的函数：
