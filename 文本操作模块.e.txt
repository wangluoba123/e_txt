 ' 文件类型：Windows模块源码

 ' 程序名称：文本操作模块
 ' 程序描述：
 ' 程序作者：易语言我吃了
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 取指定文件文本行, 文本型, , 成功返回指定的文本行文本，失败返回空文本。
.参数 文本, 文本型, , 文件路径。
.参数 行数, 整数型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 文本内容, 文本型, , , 

赋值 (文本内容, 到文本 (读入文件 (文本)))
赋值 (文本数组, 分割文本 (文本内容, #换行符, ))
.如果真 (小于或等于 (行数, 0))
    返回 (“”)
.如果真结束
.如果真 (大于 (行数, 取数组成员数 (文本数组)))
    返回 (“”)
.如果真结束
返回 (文本数组 [行数])

.子程序 取指定变量文本行, 文本型, , 成功返回指定的文本行文本，失败返回空文本。
.参数 文本, 文本型, , 文本变量
.参数 行数, 整数型, , 

.局部变量 文本数组, 文本型, , "0", 

赋值 (文本数组, 分割文本 (文本, #换行符, ))
.如果真 (小于或等于 (行数, 0))
    返回 (“”)
.如果真结束
.如果真 (大于 (行数, 取数组成员数 (文本数组)))
    返回 (“”)
.如果真结束
返回 (文本数组 [行数])

.子程序 取文本行数, 整数型, , 取一个文本共有有多少行。
.参数 文本, 文本型, , 

.局部变量 行数, 文本型, , "0", 
.局部变量 返回值, 整数型, , , 

赋值 (行数, 分割文本 (文本, #换行符, ))
赋值 (返回值, 取数组成员数 (行数))
清除数组 (行数)
返回 (返回值)

.子程序 替换行内容, 文本型, , 替换指定行整行内容，返回替换后的文本。
.参数 文本, 文本型, , 
.参数 行数, 整数型, , 
.参数 替换内容, 文本型, , 

.局部变量 输出文本, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 临时文本, 文本型, , "0", 

赋值 (临时文本, 分割文本 (文本, #换行符, ))
赋值 (临时文本 [行数], 替换内容)
.计次循环首 (取数组成员数 (临时文本), 计次)
    .如果真 (不等于 (取数组成员数 (临时文本), 计次))
        赋值 (输出文本, 相加 (输出文本, 临时文本 [计次], #换行符))
        到循环尾 ()
    .如果真结束
    赋值 (输出文本, 相加 (输出文本, 临时文本 [计次]))
.计次循环尾 ()
清除数组 (临时文本)
返回 (输出文本)

.子程序 取文本行出现次数, 整数型, , 取某行文本共出现了多少次，不存在返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 行数, 整数型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 出现的次数, 整数型, , , 

赋值 (文本数组, 分割文本 (被搜寻的文本, 取指定变量文本行 (被搜寻的文本, 行数), ))
赋值 (出现的次数, 相减 (取数组成员数 (文本数组), 1))
.如果 (小于 (出现的次数, 0))
    清除数组 (文本数组)
    返回 (-1)
.否则
    清除数组 (文本数组)
    返回 (出现的次数)
.如果结束


.子程序 取文本出现次数, 整数型, , 取某个字符共出现了多少次，不存在返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 被搜寻的子文本, 文本型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 出现的次数, 整数型, , , 

赋值 (文本数组, 分割文本 (被搜寻的文本, 被搜寻的子文本, ))
赋值 (出现的次数, 相减 (取数组成员数 (文本数组), 1))
.如果 (小于 (出现的次数, 0))
    清除数组 (文本数组)
    返回 (-1)
.否则
    清除数组 (文本数组)
    返回 (出现的次数)
.如果结束


.子程序 取文本行出现位置, 空白型, , 返回某行在整个文本中出现的位置数组，数组第一个成员是第一次出现的位置。
.参数 文本, 文本型, , 
.参数 行数, 整数型, , 
.参数 匿名参数_283, 整数型, 参考 数组, 

.局部变量 起始位置数值, 整数型, , , 
.局部变量 起始位置数值2, 整数型, , , 
.局部变量 文本行, 文本型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本行, 取指定变量文本行 (文本, 行数))
赋值 (文本长度, 取文本长度 (文本行))
.计次循环首 (取文本行出现次数 (文本, 行数), 计次)
    .如果 (等于 (计次, 1))
        赋值 (起始位置数值, 寻找文本 (文本, 文本行, , 真))
        赋值 (起始位置数值2, 相加 (起始位置数值, 文本长度, 1))
        加入成员 (匿名参数_283, 起始位置数值)
    .否则
        赋值 (起始位置数值2, 寻找文本 (文本, 文本行, 起始位置数值2, 真))
        加入成员 (匿名参数_283, 起始位置数值2)
        赋值 (起始位置数值2, 相加 (起始位置数值2, 文本长度))
    .如果结束
    
.计次循环尾 ()

.子程序 取文本出现位置, 空白型, , 返回某个字符的在整个文本中出现的位置数组，数组第一个成员是第一次出现的位置。
.参数 文本, 文本型, , 
.参数 欲搜寻的文本, 文本型, , 
.参数 匿名参数_316, 整数型, 参考 数组, 

.局部变量 起始位置数值, 整数型, , , 
.局部变量 起始位置数值2, 整数型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本长度, 取文本长度 (欲搜寻的文本))
.计次循环首 (取文本出现次数 (文本, 欲搜寻的文本), 计次)
    .如果 (等于 (计次, 1))
        赋值 (起始位置数值, 寻找文本 (文本, 欲搜寻的文本, , 真))
        赋值 (起始位置数值2, 相加 (起始位置数值, 文本长度, 1))
        加入成员 (匿名参数_316, 起始位置数值)
    .否则
        赋值 (起始位置数值2, 寻找文本 (文本, 欲搜寻的文本, 起始位置数值2, 真))
        加入成员 (匿名参数_316, 起始位置数值2)
        赋值 (起始位置数值2, 相加 (起始位置数值2, 文本长度))
    .如果结束
    
.计次循环尾 ()

.子程序 查找文本行在第几行, 空白型, , 查找某行在文本中出现的行数，返回行数数组，数组第一个成员是第一次出现的行数。
.参数 文本, 文本型, , 
.参数 欲搜寻的文本行数, 整数型, , 
.参数 行数, 整数型, 参考 数组, 

.局部变量 临时文本, 文本型, , "0", 
.局部变量 欲查文本, 文本型, , , 
.局部变量 行长度, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (临时文本, 分割文本 (文本, #换行符, ))
赋值 (欲查文本, 取指定变量文本行 (文本, 欲搜寻的文本行数))
赋值 (行长度, 取文本长度 (欲查文本))
.计次循环首 (取数组成员数 (临时文本), 计次)
    .如果真 (不等于 (寻找文本 (临时文本 [计次], 欲查文本, , 真), -1))
        .如果真 (等于 (取文本长度 (临时文本 [计次]), 行长度))
            加入成员 (行数, 计次)
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()

.子程序 查找文本在第几行, 空白型, , 查找某个字符在文本中出现的行数，返回行数数组，数组第一个成员是第一次出现的行数。
.参数 文本, 文本型, , 
.参数 欲搜寻的文本, 文本型, , 
.参数 行数, 整数型, 参考 数组, 

.局部变量 临时文本, 文本型, , "0", 
.局部变量 计次, 整数型, , , 

赋值 (临时文本, 分割文本 (文本, #换行符, ))
.计次循环首 (取数组成员数 (临时文本), 计次)
    .如果真 (不等于 (寻找文本 (临时文本 [计次], 欲搜寻的文本, , 真), -1))
        加入成员 (行数, 计次)
    .如果真结束
    
.计次循环尾 ()

.子程序 删除文本文件一行, 空白型, , 删除指定文件内的一行文本。
.参数 原文本, 文本型, , 这个子程序代码是从网上搜的，不懂是哪位大虾写的，借来用，呵呵。。
.参数 行数, 整数型, , 

.局部变量 文件号, 整数型, , , 
.局部变量 标号, 整数型, , , 
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 内容, 文本型, , , 
.局部变量 文本变量, 文本型, , , 

赋值 (文件号, 打开文件 (原文本, #改读, ))
移到文件首 (文件号)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (标号, 相加 (标号, 1))
    赋值 (位置1, 取读写位置 (文件号))
    赋值 (内容, 读入一行 (文件号))
    赋值 (位置2, 取读写位置 (文件号))
    .如果真 (等于 (标号, 行数))
        移动读写位置 (文件号, #现行位置, 负 (相减 (位置2, 位置1)))
        删除数据 (文件号, 相减 (位置2, 位置1))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)

.子程序 删除文本变量一行, 文本型, , 删除指定文本变量内的一行文本，返回删行后的文本。
.参数 原文本, 文本型, , 
.参数 行数, 整数型, , 

.局部变量 临时文本, 文本型, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 输出文本, 文本型, , , 

赋值 (临时文本, 分割文本 (原文本, #换行符, ))
删除成员 (临时文本, 行数, )
.计次循环首 (取数组成员数 (临时文本), 计次)
    .如果 (不等于 (取数组成员数 (临时文本), 计次))
        赋值 (输出文本, 相加 (输出文本, 临时文本 [计次], #换行符))
    .否则
        赋值 (输出文本, 相加 (输出文本, 临时文本 [计次]))
    .如果结束
    
.计次循环尾 ()
清除数组 (临时文本)
返回 (输出文本)

.子程序 插入文本到某行前, 文本型, , 将文本加入到某行之前，返回加入后的文本。
.参数 原文本, 文本型, , 
.参数 行数, 整数型, , 
.参数 欲插入内容, 文本型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 输出文本, 文本型, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本数组, 分割文本 (原文本, #换行符, ))
.如果真 (小于或等于 (行数, 取数组成员数 (文本数组)))
    赋值 (文本数组 [行数], 相加 (欲插入内容, 文本数组 [行数]))
    .计次循环首 (取数组成员数 (文本数组), 计次)
        .如果真 (等于 (取数组成员数 (文本数组), 计次))
            赋值 (输出文本, 相加 (输出文本, 文本数组 [计次]))
            跳出循环 ()
        .如果真结束
        赋值 (输出文本, 相加 (输出文本, 文本数组 [计次], #换行符))
    .计次循环尾 ()
    清除数组 (文本数组)
    返回 (输出文本)
.如果真结束
清除数组 (文本数组)
返回 (“”)

.子程序 插入文本到某行后, 文本型, , 将文本加入到某行之后，返回加入后的文本。
.参数 原文本, 文本型, , 
.参数 行数, 整数型, , 
.参数 欲插入内容, 文本型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 输出文本, 文本型, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本数组, 分割文本 (原文本, #换行符, ))
.如果真 (小于或等于 (行数, 取数组成员数 (文本数组)))
    赋值 (文本数组 [行数], 相加 (文本数组 [行数], 欲插入内容))
    .计次循环首 (取数组成员数 (文本数组), 计次)
        .如果真 (等于 (取数组成员数 (文本数组), 计次))
            赋值 (输出文本, 相加 (输出文本, 文本数组 [计次]))
            跳出循环 ()
        .如果真结束
        赋值 (输出文本, 相加 (输出文本, 文本数组 [计次], #换行符))
    .计次循环尾 ()
    清除数组 (文本数组)
    返回 (输出文本)
.如果真结束
清除数组 (文本数组)
返回 (“”)

.子程序 插入新一行, 文本型, , 在指定行插入文本，原文本后移，返回插入后的文本。
.参数 原文本, 文本型, , 
.参数 行数, 整数型, , 
.参数 新一文本行内容, 文本型, , 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 输出文本, 文本型, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本数组, 分割文本 (原文本, #换行符, ))
插入成员 (文本数组, 行数, 新一文本行内容)
.计次循环首 (取数组成员数 (文本数组), 计次)
    .如果真 (等于 (取数组成员数 (文本数组), 计次))
        赋值 (输出文本, 相加 (输出文本, 文本数组 [计次]))
        跳出循环 ()
    .如果真结束
    赋值 (输出文本, 相加 (输出文本, 文本数组 [计次], #换行符))
.计次循环尾 ()
清除数组 (文本数组)
返回 (输出文本)

.子程序 插入文本到某位置, 文本型, , 插入某文本到左起某一位置，原文本后移，返回插入后的文本。
.参数 原文本, 文本型, , 
.参数 欲插入的文本, 文本型, , 
.参数 位置, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 起始文本, 文本型, , , 

赋值 (起始文本, 取文本左边 (原文本, 相减 (位置, 1)))
赋值 (临时文本, 起始文本)
赋值 (临时文本, 相加 (临时文本, 欲插入的文本))
返回 (子文本替换 (原文本, 起始文本, 临时文本, , 1, 真))

.子程序 插入文本到某字前, 文本型, , 插入文本到某字前，返回插入后的文本。
.参数 原文本, 文本型, , 
.参数 某字, 文本型, , 
.参数 被插在某字后的文本, 文本型, , 
.参数 插入次数, 整数型, 可空, 如果省略，默认进行所有可能的插入

.如果真 (是否为空 (插入次数))
    返回 (子文本替换 (原文本, 某字, 相加 (被插在某字后的文本, 某字), , , 假))
.如果真结束
返回 (子文本替换 (原文本, 某字, 相加 (被插在某字后的文本, 某字), , 插入次数, 假))

.子程序 插入文本到某字后, 文本型, , 插入文本到某字后，返回插入后的文本。
.参数 原文本, 文本型, , 
.参数 某字, 文本型, , 
.参数 被插在某字后的文本, 文本型, , 
.参数 插入次数, 整数型, 可空, 如果省略，默认进行所有可能的插入

.如果真 (是否为空 (插入次数))
    返回 (子文本替换 (原文本, 某字, 相加 (某字, 被插在某字后的文本), , , 假))
.如果真结束
返回 (子文本替换 (原文本, 某字, 相加 (某字, 被插在某字后的文本), , 插入次数, 假))


 ' 不属于任何一个程序集、类模块的函数：
