 ' 文件类型：Windows模块源码

 ' 程序名称：超级模块-验证
 ' 程序描述：
 ' 程序作者：小烦
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 模块名, "“Super-EC”", , 
.常量 host检查说明, "“防止hosts本地验证,检查模块合法性,防止模块被破解”", , 
.常量 host, "“C:\Windows\System32\Drivers\etc\hosts”", , 
.常量 官方网址1, "“http://www.super-ec.cn”", , 
.常量 官方网址2, "“http://wghai.com/ec”", , 
.常量 官方网址3, "“http://qsyou.com/ec”", , 
.常量 验证地址, "“/forum-17-1.html”", , 
.常量 正版地址, "“/forum-12-1.html”", , 
.常量 个人地址, "“/memcp.php”", , 
.常量 IP地址, "“/ip.asp”", , 
.常量 时间地址, "“/time.asp”", , 
.常量 专版地址, "“http://down.wghai.com/up/super-ec/专版.txt”", , 
.常量 统计地址, "“http://down.wghai.com/up/super-ec/tongji.asp”", , 
.常量 备用地址, "“http://down.wghai.com/up/super-ec/ec.txt”", , 
.常量 CPU标识1, "“<th><label for="field_2new"><font color=red>CPU序列号</font></label></th>
<td>
<input type="text" name="field_2new" size="25" value="”", , 
.常量 CPU标识2, "“" disabled class="txt" />”", , 
.常量 USB标识1, "“<th><label for="field_1new"><font color=red>USB序列号</font></label></th>
<td>
<input type="text" name="field_1new" size="25" value="”", , 
.常量 USB标识2, "“" disabled class="txt" />”", , 
.常量 外挂海模块条款, "“
模块申明：  甲：本模块作者 乙：非本模块作者（软件作者或其它人）


一、只需免费注册成为论坛会员方可进行代码调试，代码编译后无需验证。

二、本模块不会在乙使用过程中添加任何无关插件。

三、由于模块功能缺陷BUG导致乙受到的损失，由乙自行承担。

四、乙使用本模块编写任何软件，软件版权归乙所有，一切软件商业活动均与甲无关。

五、禁止使用本模块编写恶意软件、恶意插件、外挂、木马等非法程序，否则所涉及的法律责任自负。

六、甲具有本模块的著作权，乙不得对该模块进行撰改。

七、甲保留对旧版本回收权利，原先使用旧版本所开发的软件不受其引响。


详情登陆“超级模块”官方网站 http://www.super-ec.cn


注：您必须接受以上协议方能继续使用本模块！ ［接受协议选“是”，拒绝接受选“否”］”", , 
.常量 CPUSet, "“Function Getcpuid() 
Dim cpuSet,cpu
    Set cpuSet = GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_Processor")
    For Each cpu In cpuSet
      getcpuid=cpu.ProcessorId
      exit for
    Next
end Function”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库




数据类型 坐标型, , 
    .成员 x, 整数型, , , X轴坐标
    .成员 y, 整数型, , , Y轴坐标

数据类型 LOGFONT, , 逻辑字体;   (写屏幕)
    .成员 高度, 整数型, , , lfheight
    .成员 宽度, 整数型, , , lfwidth
    .成员 控制摆, 整数型, , , lfrscapement 以十分之一度为单位指定每一行文本输出时相对于页面底端的角度
    .成员 定方位, 整数型, , , lforientation 以十分之一度为单位指定字符基线相对于页面底端的角度
    .成员 加粗, 整数型, , , lfweight 默认为0 不加粗  900 加粗
    .成员 斜体, 逻辑型, , , lfitalic 默认为非斜体
    .成员 下划线, 逻辑型, , , lfunderline 默认为无下划线
    .成员 删除线, 逻辑型, , , lfstrikeout 默认为无删除线
    .成员 字符集, 字节型, , , lfcharset 默认为0 ANSI字符集  255 OEM字符集  2 SYMBOL字符集  UNICODE字符集
    .成员 输出精度, 字节型, , , lfoutprecision
    .成员 剪辑精度, 字节型, , , lfclipprecision
    .成员 输出质量, 字节型, , , lfquality 默认为0 默认质量  1 草稿质量  2 正稿质量
    .成员 间距, 字节型, , , lfpitchandfamily 默认为0 默认间距  1 固定间距  2 不定间距
    .成员 字体名称, 文本型, , , lffacename[lf.facesize]

数据类型 项目标识符列表, , ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 FILETIME, , 文件时间;
    .成员 底部时间数据, 整数型, , , 
    .成员 顶部时间数据, 整数型, , , 

数据类型 SYSTEMTIME, , 系统时间;
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 天, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 OFSTRUCT, , 文件结构信息;
    .成员 结构长度, 字节型, , , 
    .成员 文件盘符, 字节型, , , 
    .成员 错误代码, 短整数型, , , 
    .成员 保留1, 短整数型, , , 
    .成员 保留2, 短整数型, , , 
    .成员 文件路径, 字节型, , "128", 

数据类型 进程信息_, , 进程信息
    .成员 dwSize, 整数型, , , 
    .成员 cntUsage, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 th32DefaultHeapID, 整数型, , , 
    .成员 th32ModuleID, 整数型, , , 
    .成员 cntThreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcPriClassBase, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 进程名称, 字节型, , "256", 

数据类型 模块信息型, , 进程模块信息
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 大小, 整数型, , , 
    .成员 模块句柄, 整数型, , , 
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

.全局变量 非法操作, 逻辑型, , , 
.全局变量 HOST状态, 逻辑型, , , 
.全局变量 会员账号, 文本型, , , 
.全局变量 官方网址, 文本型, , , 
.全局变量 当前模块版本, 文本型, , , 
.全局变量 本机IP, 文本型, , , 
.全局变量 现行时间, 文本型, , , 
.全局变量 验证方式, 整数型, , , 
.全局变量 是否为正版, 逻辑型, , , 
.全局变量 输出类信息, 逻辑型, , , 
.全局变量 输出特殊库函数调用信息, 逻辑型, , , 

.DLL命令 _取窗口区域位置, 整数型, "", "ClientToScreen", , user32.dll非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 坐标型, , lpPoint，参见相关帮助

.DLL命令 _取当前窗口, 整数型, "", "GetForegroundWindow", , user32.dll返回前台窗口句柄

.DLL命令 取设备场景_, 整数型, "", "GetDC", , 获取指定窗口的设备场景　指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC; 

.DLL命令 使用指定属性创建逻辑字体_, 整数型, "", "CreateFontIndirectA", , gdi32.dll用指定的属性创建一种逻辑字体　执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, LOGFONT, , LOGFONT，这个结构定义了逻辑字体请求的属性;  

.DLL命令 选入设备场景_, 整数型, "", "SelectObject", , gdi32.dll每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。例如，当前选定的画笔决定了在设备场景中描绘的线段颜色及样式　与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。如选定的对象是一个区域（Region），结果就是下列常数之一：SIMPLEREGION， ;    COMPLEXREGION 或 NULLREGION 对区域进行描述， GDI_ERROR 表示出错
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄
    .参数 对象句柄, 整数型, , 一个画笔、位图、刷子、字体或区域的句柄;  

.DLL命令 SetBkMode_, 整数型, "", "SetBkMode", , gdi32.dll指定阴影刷子、虚线画笔以及字符中的空隙的填充方式　前一个背景模式的值
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBkMode, 整数型, , 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;  

.DLL命令 设置前景色_, 整数型, "", "SetTextColor", , gdi32.dll设置当前文本颜色。这种颜色也称为“前景色”　文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 TextOut_, 整数型, "", "TextOutA", , gdi32.dll文本绘图函数。也请参考SetTextAlign　非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 x, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 y, 整数型, , 同上
    .参数 lpString, 文本型, , 欲描绘的字串
    .参数 nCount, 整数型, , 字串中要描绘的字符数量;  

.DLL命令 删除对象_, 整数型, "", "DeleteObject", , gdi32.dll用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放　非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄;  

.DLL命令 释放设备场景_, 整数型, "", "ReleaseDC", , user32.dll释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）　执行成功为1，否则为0
    .参数 窗口句柄, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , 要释放的设备场景句柄;  

.DLL命令 获取特别文件夹位置_, 整数型, "", "SHGetSpecialFolderLocation", , shell32.dll
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 整数型, , nFolder
    .参数 结构, 项目标识符列表, 传址, pIdl

.DLL命令 从列表id取路径_, 整数型, "", "SHGetPathFromIDListA", , shell32.dll
    .参数 结构指针, 整数型, , pIdl
    .参数 路径, 文本型, 传址, pszPath

.DLL命令 CryptAcquireContext, 整数型, "", "CryptAcquireContextA", , advapi32.dll
    .参数 phProv, 整数型, 传址, 
    .参数 pszContainer, 文本型, , 
    .参数 pszProvider, 文本型, , 
    .参数 dwProvType, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 CryptCreateHash, 整数型, "", "CryptCreateHash", , advapi32.dll
    .参数 hProv, 整数型, , 
    .参数 Algid, 整数型, , 
    .参数 hKey, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 phHash, 整数型, 传址, 

.DLL命令 CryptReleaseContext, 整数型, "", "CryptReleaseContext", , advapi32.dll
    .参数 hProv, 整数型, 传址, 
    .参数 dwFlags, 整数型, 传址, 

.DLL命令 CryptHashData, 整数型, "", "CryptHashData", , advapi32.dll
    .参数 hHash, 整数型, , 
    .参数 pbData, 字节集, 传址, 
    .参数 dwDataLen, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 CryptDestroyHash, 整数型, "", "CryptDestroyHash", , advapi32.dll
    .参数 hHash, 整数型, 传址, 

.DLL命令 CryptGetHashParam, 整数型, "", "CryptGetHashParam", , advapi32.dll
    .参数 hHash, 整数型, , 
    .参数 dwParam, 整数型, , 
    .参数 pByte, 字节集, , 
    .参数 pdwDataLen, 整数型, 传址, 
    .参数 dwFlags, 整数型, , 

.DLL命令 GetVolumeInformation, 整数型, "", "GetVolumeInformationA", , kernel32.dll
    .参数 lpRootPathName, 文本型, , String，欲获取信息的那个卷的根路径
    .参数 lpVolumeNameBuffer, 文本型, , String，用于装载卷名（卷标）的一个字串
    .参数 nVolumeNameSize, 整数型, , Long，lpVolumeNameBuffer字串的长度
    .参数 lpVolumeSerialNumber, 整数型, 传址, Long，用于装载磁盘卷序列号的变量
    .参数 lpMaximumComponentLength, 整数型, 传址, Long，指定一个变量，用于装载文件名每一部分的长度。例如，在“c:\component1\component2.ext”的情况下，它就代表component1或component2名称的长度
    .参数 lpFileSystemFlags, 整数型, 传址, Long，用于装载一个或多个二进制位标志的变量。对这些标志位的解释如下：
    .参数 lpFileSystemNameBuffer, 文本型, , String，指定一个缓冲区，用于装载文件系统的名称（如FAT，NTFS以及其他）
    .参数 nFileSystemNameSize, 整数型, , Long，lpFileSystemNameBuffer字串的长度

.DLL命令 正版用户验证成功, 空白型, "", "", , 

.DLL命令 GetLogicalDriveStrings, 整数型, "", "GetLogicalDriveStringsA", , kernel32.dll
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, ,   

.DLL命令 GetDriveTypeA, 整数型, "", "GetDriveTypeA", , kernel32.dll
    .参数 路径, 文本型, , 

.DLL命令 LocalSize_OFSTRUCT, 整数型, "", "LocalSize", , kernel32.dll 返回本地内存块大小　
    .参数 hMem, OFSTRUCT, , 

.DLL命令 _取文件时间, 整数型, "", "GetFileTime", , kernel32.dll 取得指定文件的时间信息　非零表示成功，零表示失败。会设置GetLastError
    .参数 文件句柄, 整数型, , 文件的句柄
    .参数 创建时间, FILETIME, , FILETIME，用于装载文件的创建时间
    .参数 前次访问时间, FILETIME, , FILETIME，用于装载文件上一次访问的时间（FAT文件系统不支持这一特性）
    .参数 前次修改时间, FILETIME, , FILETIME，用于装载文件上一次修改的时间;  

.DLL命令 _时间结构转换, 整数型, "", "FileTimeToSystemTime", , kernel32.dll 根据一个FILETIME结构的内容，装载一个SYSTEMTIME结构　非零表示成功，零表示失败。会设置GetLastError
    .参数 文件时间结构, FILETIME, , FILETIME，包含了文件时间的一个结构
    .参数 系统时间结构, SYSTEMTIME, , SYSTEMTIME，用于装载系统时间信息的一个结构;

.DLL命令 _打开文件_OFSTRUCT, 整数型, "", "OpenFile", , kernel32.dll 这个函数能执行大量不同的文件操作。和这个函数相比，请优先考虑win32的CreateFile函数（它能打开命名管道和控制Unicode文件名，同时不受128个字符的路径名称的限制）　如执行成功，返回文件句柄。注意文件句柄可能是无效的；例如，假设指定了OF_EXIST标志，文件在函数返回前会关闭，但它打开时的句柄却永远不会返回。如果出错，函数会返回HFILE_ERROR；此时，由lpReOpenBuff指定的OFSTRUCT结构的nErrCode会设置成发生的错误。表OpenFile-2（OFSTRUCT出错代码）对这些错误进行了总结。会设置GetLastError
    .参数 文件名, 文本型, , 欲打开文件的名字
    .参数 文件操作结果, OFSTRUCT, , OFSTRUCT，该结构填充的数据包括与文件和操作结果有关的信息
    .参数 操作方式, 整数型, , 参考表OpenFile-1（OpenFile函数的标志常数表）总结的标志常数的组合，它决定了要采取的操作方式;

.DLL命令 _关闭对象, 整数型, "", "CloseHandle", , kernel32.dll
    .参数 对象句柄, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 _取当前线程句柄, 整数型, "", "GetCurrentThread", , kernel32.dll

.DLL命令 _取库函数地址3, 整数型, "", "GetProcAddress", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 整数型, , 

.DLL命令 _取模块句柄2, 整数型, "", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 Beep, 逻辑型, "", "Beep", , 
    .参数 dwFreq, 整数型, , 声音频率（从37Hz到32767Hz）
    .参数 dwDuration, 整数型, , 声音的持续时间，以毫秒为单位。如为-1，表示一直播放声音，直到再次调用该函数为止。

.DLL命令 _投递消息, 空白型, "", "PostMessageA", , 向指定窗口句柄发送消息
    .参数 h, 空白型, , 
    .参数 m, 空白型, , 
    .参数 p, 空白型, , 
    .参数 p, 空白型, , 

.DLL命令 _创建快照, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 _第一个, 整数型, "", "Process32First", , 
    .参数 h, 整数型, , 
    .参数 p, 进程信息_, , 

.DLL命令 _第一个模块, 整数型, "", "Module32First", , 第一个模块，查找模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息型, , 

.DLL命令 _打开进程, 整数型, "", "OpenProcess", , kernel32.dll
    .参数 访问级别, 整数型, , 2035711完全访问
    .参数 子进程继承, 整数型, , 0为子进程继承
    .参数 进程ID, 整数型, , 要打开的进程标识

.DLL命令 _终止进程, 整数型, "", "TerminateProcess", , 
    .参数 id, 空白型, , 
    .参数 a, 空白型, , 

.DLL命令 _下一个模块, 整数型, "", "Module32Next", , kernel32.dll下一个模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息型, , 

.DLL命令 _下一个, 整数型, "", "Process32Next", , 
    .参数 h, 整数型, , 
    .参数 p, 进程信息_, , 

.DLL命令 _创建线程, 整数型, "", "CreateThread", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.程序集 验证, , , 

.程序集变量 授权验证_论坛名, 文本型, , , 
.程序集变量 授权验证_版块地址, 文本型, , , 
.程序集变量 自动验证, 自动验证类, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' 输出调试文本 (_模块_本地验证_调试输出 ())

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。





.子程序 _模块_注册2, 逻辑型, , 
.参数 账号, 文本型, , 
.参数 密码, 文本型, , 

.局部变量 对象, 对象, , , 
.局部变量 内容, 文本型, , , 
.局部变量 文本, 文本型, , "0", 
.局部变量 CPU, 文本型, , , 
.局部变量 HD, 整数型, , , 
.局部变量 码, 文本型, , , 

.如果真 (是否为正版)
    返回 (真)
.如果真结束
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“Open”, “GET”, 相加 (官方网址, “/ec.txt”), 假)
    对象.方法 (“Send”, )
    赋值 (内容, 取字节集数据 (对象.读属性 (“responseBody”, ).取字节集 (), #文本型, ))
.如果真结束
.如果真 (等于 (内容, “”))
    信息框 (相加 (“此服务已经关闭！详情请登陆 ”, 官方网址), #警告图标, “错误”)
    结束 ()
.如果真结束
赋值 (文本, 分割文本 (内容, #换行符, ))
.如果真 (不等于 (取数组成员数 (文本), 2))
    信息框 (相加 (“此服务已经关闭，请稍后再试！详情请登陆 ”, 官方网址), #警告图标, “错误”)
    结束 ()
.如果真结束
.如果真 (不等于 (信息框 (相加 (账号, “：您正在使用[硬件]注册码在线注册服务！”, #换行符, #换行符, 文本 [2]), 相加 (#询问图标, #是否钮), “提示”), #是钮))
    输出调试文本 (“提示：您已经放弃注册服务！”)
    返回 (假)
.如果真结束
赋值 (CPU, 取CPU序列号 ())
赋值 (HD, 取硬盘特征字 ())
.如果真 (并且 (小于 (取文本长度 (CPU), 3), 小于 (取文本长度 (到文本 (HD)), 3)))
    输出调试文本 (“错误：无效的硬件信息无法使用自助服务！”)
    结束 ()
.如果真结束
.如果真 (HOST状态)
    .如果真 (或者 (小于 (取文本长度 (CPU), 3), 等于 (_模块_标识验证 (相加 (#CPU标识1, 到文本 (CPU), #CPU标识2)), 假)))
        .如果真 (或者 (小于 (取文本长度 (到文本 (HD)), 3), 等于 (_模块_标识验证 (相加 (#CPU标识1, 到文本 (HD), #CPU标识2)), 假)))
            信息框 (“超级模块：会员资料中{CPU序列号}或{硬盘特征字}与实际硬件信息不符！”, #错误图标, “提示”)
            结束 ()
        .如果真结束
        
    .如果真结束
    
.如果真结束
 ' 输出调试文本 (官方网址 ＋ “/” ＋ 文本 [1])
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“Open”, “GET”, 相加 (官方网址, “/”, 文本 [1], “?username=”, 账号, “&password=”, 密码), 假)
    对象.方法 (“Send”, “”)
    赋值 (内容, 取字节集数据 (对象.读属性 (“responseBody”, ).取字节集 (), #文本型, ))
.如果真结束
.如果真 (等于 (内容, “”))
    信息框 (相加 (“此服务已经关闭，请稍后再试！详情请登陆 ”, 官方网址), #警告图标, “错误”)
    结束 ()
.如果真结束
.如果真 (等于 (内容, “错误”))
    信息框 (相加 (账号, “：”, “账号密码错误！详情请登陆 ”, 官方网址), #错误图标, )
    结束 ()
.如果真结束
.如果真 (等于 (内容, “失败”))
    信息框 (相加 (账号, “：”, “您的积分不足！详情请登陆 ”, 官方网址), #错误图标, )
    结束 ()
.如果真结束
.如果真 (或者 (大于 (取文本长度 (内容), 10), 小于 (到数值 (内容), 0)))
    信息框 (相加 (“此服务已经关闭，请稍后再试！详情请登陆 ”, 官方网址), #警告图标, “错误”)
    结束 ()
.如果真结束
信息框 (相加 (账号, “：”, “已经成功扣除”, 内容, “论坛币！”), #信息图标, “提示”)
 ' 最后完成注册
赋值 (码, _模块_自助服务 (CPU, HD))
置剪辑板文本 (码)
赋值 (码, 相加 (“恭喜：生成注册码成功！已复制到剪辑板。”, #换行符, #换行符, “注册码：”, 码))
输出调试文本 (码)
.如果真 (等于 (信息框 (相加 (码, #换行符, #换行符, “是否需要注册到本机？”), 相加 (#信息图标, #是否钮), “提示”), #是钮))
    .如果真 (等于 (写注册项 (#现行用户, “Software\Super-EC\CD-KEY”, 取剪辑板文本 ()), 假))
        写到文件 (相加 (取特殊目录 (), “注册码.reg”), 到字节集 (相加 (“Windows Registry Editor Version 5.00”, #换行符, #换行符, “[HKEY_CURRENT_USER\Software\Super-EC]”, #换行符, #引号, “CD-KEY”, #引号, “=”, #引号, 取剪辑板文本 (), #引号, #换行符)))
    .如果真结束
    
.如果真结束
返回 (真)


.子程序 _模块_注册, 逻辑型, , <自助注册服务>
.参数 强行注册, 逻辑型, 可空, 

.局部变量 驱动器, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 USB序列号, 整数型, , , 
.局部变量 卷标, 文本型, , , 
.局部变量 a, 逻辑型, , , 

.如果真 (并且 (是否为正版, 等于 (强行注册, 假)))
    返回 (真)
.如果真结束
_模块_协议 ()
.计次循环首 (取驱动器列表 (驱动器, 3), i)
    输出调试文本 (“提示：模块正在尝试USB注册中。。。”)
    赋值 (USB序列号, 取磁盘序列号 (驱动器 [i], 卷标))
    赋值 (a, _模块_自助USB效验 (_模块_网络验证 (), USB序列号, 卷标, 相加 (驱动器 [i], #模块名)))
.计次循环尾 ()
输出调试文本 (“提示：模块正在尝试硬件注册中。。。”)
返回 (_模块_自助硬件效验 (_模块_网络验证 (), 取硬盘特征字 (), 取CPU序列号 ()))


.子程序 _模块_授权验证_调试输出, 文本型, , <授权版调用>
.参数 论坛名, 文本型, , 
.参数 版块地址, 文本型, , 

.局部变量 内容, 文本型, , , 
.局部变量 域名, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 ID, 文本型, , , 

_模块_协议 ()
_模块_写版权标记 ()

.如果真 (不等于 (取文本注册项 (#现行用户, “Software\Super-EC\CD-KEY”, ), “”))
    返回 (_模块_综合验证 ()) ' 已经有注册码的用户直接本地验证
.如果真结束

赋值 (域名, 取文本左边 (版块地址, 相减 (倒找文本 (版块地址, “/”, , 假), 1)))

 ' 防止host本地验证
.如果真 (文件是否存在 (#host))
    赋值 (内容, 到文本 (读入文件 (#host)))
    .如果真 (等于 (内容, “”))
        输出调试文本 (相加 (“载入模块错误(001)：权限不足，可能在防火墙之后！详情请登陆 ”, #官方网址1))
    .如果真结束
    .如果真 (不等于 (寻找文本 (内容, “super-ec.cn”, , 真), -1))
        信息框 (相加 (“无法载入模块(002)：验证错误，非常规操作！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        结束 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (内容, “wghai.”, , 真), -1))
        信息框 (相加 (“无法载入模块(002)：验证错误，非常规操作！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        结束 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (内容, 子文本替换 (域名, “http://”, , , , 假), , 真), -1))
        信息框 (相加 (“无法载入模块(002)：验证错误，非常规操作！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        结束 ()
    .如果真结束
    
.如果真结束

 ' 检查论坛授权资格
赋值 (内容, 到文本 (下载 (#专版地址)))
.如果真 (不等于 (寻找文本 (内容, “授权论坛列表”, , 假), -1))
    .如果真 (等于 (寻找文本 (内容, 域名, , 真), -1))
        信息框 (相加 (“Super-EC：该版本未获得授权资格！”, #换行符, #换行符, “详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        运行 (相加 (“explorer.exe ”, #官方网址1), 假, )
        结束 ()
    .如果真结束
    下载 (相加 (#统计地址, “?id=”, 论坛名))
.如果真结束
赋值 (内容, 到文本 (下载 (版块地址)))
.如果真 (小于 (取文本长度 (内容), 1000))
    信息框 (相加 (“无法载入模块(100)：连接验证论坛失败，请稍后再试！”, #换行符, #换行符, “详情请登陆 ”, 论坛名, “ ”, 域名), #错误图标, “错误”)
    运行 (相加 (“explorer.exe ”, 域名), 假, )
    结束 ()
.如果真结束
.如果真 (不等于 (寻找文本 (内容, “提示信息”, , 假), -1))
    信息框 (相加 (“无法载入模块(101)：论坛会员权限验证失败，请登陆后再试！”, #换行符, #换行符, “详情请登陆 ”, 论坛名, “ ”, 域名), #错误图标, “错误”)
    运行 (相加 (“explorer.exe ”, 域名), 假, )
    结束 ()
.如果真结束
.如果真 (等于 (寻找文本 (内容, 子文本替换 (#官方网址1, “http://”, , , , 真), , 真), -1))
    信息框 (相加 (“Super-EC：无法获取授权标记，请与论坛管理员联系！”, #换行符, #换行符, “详情请登陆 ”, 论坛名, “ ”, 域名), #错误图标, “错误”)
    运行 (相加 (“explorer.exe ”, #官方网址1), 假, )
    结束 ()
.如果真结束
赋值 (a, 寻找文本 (内容, “<title>”, , 真))
赋值 (b, 寻找文本 (内容, “</title>”, 相加 (a, 1), 真))
赋值 (内容, 取文本中间 (内容, 相加 (a, 7), 相减 (b, a, 7)))
.如果真 (等于 (寻找文本 (内容, “超级模块”, , 假), -1))
    信息框 (相加 (“无法载入模块(111)：论坛会员权限验证失败，请登陆后再试！”, #换行符, #换行符, “详情请登陆 ”, 论坛名, “ ”, 域名), #错误图标, “错误”)
    运行 (相加 (“explorer.exe ”, 域名), 假, )
    结束 ()
.如果真结束

返回 (相加 (“[授权：”, 论坛名, “] ”, 域名))


.子程序 _模块_本地验证_调试输出, 文本型, , <正式版调用>
返回 (自动验证._模块_自动验证 ())


.子程序 _模块_本地验证2_调试输出, 文本型, , <正式版调用>
.局部变量 a, 整数型, , , 

赋值 (a, 相加 (相乘 (取月份 (取现行时间 ()), 2), 相乘 (相减 (取年份 (取现行时间 ()), 2009), 24)))
置随机数种子 ()
.如果真 (不等于 (a, 取随机数 (a, 选择 (大于 (a, 60), a, 60))))
    赋值 (是否为正版, 真)
    输出调试文本 (“成功载入模块：本机验证成功！”)
    返回 (相加 (“[已经授权：正版用户] 通用注册码：”, _模块_自助服务 (“”, 3389), “               by 小疯 破解”))
.如果真结束
返回 (_模块_本地验证_调试输出 ())


.子程序 _模块_协议, 空白型, , 判断注册信息,弹出协议
.如果真 (不等于 (当前模块版本, “”))
    返回 ()
.如果真结束
赋值 (当前模块版本, “3.2”)
赋值 (输出类信息, 等于 (取数值注册项 (#现行用户, “Software\Super-EC\输出类信息”, ), 1))
赋值 (输出特殊库函数调用信息, 等于 (取数值注册项 (#现行用户, “Software\Super-EC\输出特殊库函数调用信息”, ), 1))
输出调试文本 (相加 (“感谢您使用中国易语言-超级模块! 官方网站 ”, #官方网址1, “  技术论坛 http://bbs.wghai.com”))
 ' 外挂海模块使用协议,仅在首次使用模块时弹出
.如果真 (不等于 (取文本注册项 (#现行用户, “Software\Super-EC\协议”, ), “接受!”))
    .如果真 (等于 (信息框 (#外挂海模块条款, 相加 (#信息图标, #是否钮), “中国易语言-超级模块《用户使用协议》”), #否钮))
        输出调试文本 (“您拒绝接受模块协议，模块终止！”)
        结束 ()
    .如果真结束
    写注册项 (#现行用户, “Software\Super-EC\协议”, “接受!”)
.如果真结束


.子程序 _模块_写版权标记, 空白型, , 写版权标记,正版用户不会写
.局部变量 hdc, 整数型, , , 
.局部变量 lf, LOGFONT, , , 
.局部变量 hf, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 hbk, 整数型, , , 
.局部变量 htext, 整数型, , , 
.局部变量 内容, 文本型, , , 

.如果真 (是否为正版)
    返回 ()
.如果真结束
 ' 写出版权标记
赋值 (hdc, 取设备场景_ (_取当前窗口 ()))
赋值 (lf.字符集, 134)
赋值 (lf.字体名称, “宋体”)
赋值 (lf.高度, 32)
赋值 (hf, 使用指定属性创建逻辑字体_ (lf))
赋值 (h, 选入设备场景_ (hdc, hf))
赋值 (hbk, SetBkMode_ (hdc, 1))
赋值 (htext, 设置前景色_ (hdc, #天蓝))
赋值 (内容, “Super-EC”)
TextOut_ (hdc, 400, 35, 内容, 取文本长度 (内容))
SetBkMode_ (hdc, hbk)
设置前景色_ (hdc, htext)
选入设备场景_ (hdc, h)
删除对象_ (hf)
赋值 (lf.加粗, 200)
赋值 (lf.高度, 16)
赋值 (hf, 使用指定属性创建逻辑字体_ (lf))
赋值 (h, 选入设备场景_ (hdc, hf))
赋值 (hbk, SetBkMode_ (hdc, 1))
赋值 (htext, 设置前景色_ (hdc, 255))
赋值 (内容, “超级模块,让易语言编程更容易!”)
TextOut_ (hdc, 525, 45, 内容, 取文本长度 (内容))
SetBkMode_ (hdc, hbk)
设置前景色_ (hdc, htext)
选入设备场景_ (hdc, h)
删除对象_ (hf)
释放设备场景_ (0, hdc)


.子程序 _模块_综合验证, 文本型, , <正式版调用>
.局部变量 ID, 文本型, , , 
.局部变量 码, 文本型, , , 
.局部变量 内容, 文本型, , , 
.局部变量 a, 文本型, , "0", 
.局部变量 HD, 整数型, , , 
.局部变量 CPU, 文本型, , , 
.局部变量 版本号, 文本型, , , 
.局部变量 驱动器, 文本型, , "0", 
.局部变量 i, 整数型, , , 

 ' USB注册文件检测
.计次循环首 (取驱动器列表 (驱动器, 3), i)
    .如果真 (文件是否存在 (相加 (驱动器 [i], #模块名)))
        返回 (_模块_USB验证 (驱动器 [i]))
    .如果真结束
    
.计次循环尾 ()
 ' 注册表中注册码检测
赋值 (ID, 取文本注册项 (#现行用户, “Software\Super-EC\CD-KEY”, ))
.如果真 (不等于 (ID, “”))
     ' 下面进行硬件注册码验证
    赋值 (码, _模块_自助服务 (“取CPU序列号”, 取硬盘特征字 ()))
    赋值 (版本号, 取文本注册项 (#现行用户, “Software\Super-EC\版本号”, ))
    .如果真 (等于 (ID, 码))
        .如果真 (不等于 (版本号, 当前模块版本))
            写注册项 (#现行用户, “Software\Super-EC\版本号”, 当前模块版本)
        .如果真结束
        输出调试文本 (“成功载入模块：本机验证成功！”)
        .如果真 (等于 (当前模块版本, “”))
            结束 () ' 防撰改验证
        .如果真结束
        赋值 (是否为正版, 真)
        返回 (相加 (“[已经授权：正版用户] 硬件注册码：”, 码))
    .如果真结束
    赋值 (非法操作, 真)
    赋值 (码, _模块_自助服务 (“”, 0))
    .如果真 (等于 (ID, 码)) ' 非法操作假注册码验证,让他误认为注册成功!
        .如果真 (不等于 (版本号, 当前模块版本))
            写注册项 (#现行用户, “Software\Super-EC\版本号”, 当前模块版本)
        .如果真结束
        返回 (相加 (“[已经授权：正版用户] 硬件注册码：”, 码))
    .如果真结束
    赋值 (非法操作, 假)
    .如果真 (并且 (不等于 (版本号, “”), 不等于 (版本号, 当前模块版本)))
        .如果真 (等于 (信息框 (相加 (“CD-KEY版本：(”, 版本号, “)  当前版本：(”, 当前模块版本, “)”, #换行符, #换行符, “注册码与当前版本不匹配！如果您是商业用户组，请登陆论坛后再点确定！”, #换行符, #换行符, “详情登陆[超级模块]官方论坛查询 ”, #官方网址1), 相加 (#信息图标, #确认取消钮), “升级提示：”), #确认钮))
             ' 升级正版注册码
            赋值 (ID, _模块_网络验证 ())
            _模块_自助硬件效验 (ID, 取硬盘特征字 (), 取CPU序列号 ())
            结束 ()
        .如果真结束
        
    .如果真结束
    输出调试文本 (相加 (“超级模块：硬件注册码验证失败！ 详情登陆[超级模块]官方论坛查询 ”, #官方网址1))
.如果真结束
返回 (相加 (“[网络验证授权用户：”, _模块_网络验证 (), “]”))


.子程序 _模块_USB验证, 文本型, , 
.参数 盘符, 文本型, , 

.局部变量 ID, 整数型, , , 
.局部变量 卷标, 文本型, , , 
.局部变量 时间, 日期时间型, , , 
.局部变量 版本号, 文本型, , , 
.局部变量 注册码, 文本型, , , 
.局部变量 文件号, 整数型, , , 

输出调试文本 (“检测到USB验证文件：尝试USB验证中。。。”)
.如果真 (等于 (读USB验证文件 (相加 (盘符, #模块名), 版本号, 注册码), 假))
    输出调试文本 (“错误：无效的USB验证文件！”)
    结束 ()
.如果真结束

赋值 (ID, 取磁盘序列号 (盘符, 卷标))
.如果真 (不等于 (_模块_自助服务 (卷标, ID), 注册码))
    .如果真 (不等于 (版本号, 当前模块版本))
        信息框 (相加 (“CD-KEY版本：(”, 版本号, “)  当前版本：(”, 当前模块版本, “)”, #换行符, #换行符, “注册码已失效：如果您是正版用户，请登陆论坛后再点确定！”, #换行符, #换行符, “详情登陆[超级模块]官方论坛查询 ”, #官方网址1), #错误图标, “错误”)
         ' 升级正版注册码
        _模块_自助USB效验 (_模块_网络验证 (), ID, 卷标, 相加 (盘符, #模块名))
        删除文件 (相加 (盘符, #模块名))
        结束 ()
    .如果真结束
    信息框 (相加 (“超级模块：USB注册码验证失败！”, #换行符, #换行符, “详情登陆[超级模块]官方论坛查询 ”, #官方网址1), #错误图标, “错误”)
    删除文件 (相加 (盘符, #模块名))
    结束 ()
.如果真结束
输出调试文本 (“成功载入模块：USB验证成功！”)
赋值 (是否为正版, 真)
返回 (相加 (“[已经授权：正版用户] USB注册文件：”, 盘符, #模块名))


.子程序 _模块_网络验证, 文本型, , 联网 (网络验证权限,返回会员ID)
.局部变量 host, 字节集, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 最新动态, 逻辑型, 静态, , 
.局部变量 对象, 对象, , , 
.局部变量 bp, 变体型, , , 
.局部变量 会员, 文本型, , , 
.局部变量 a, 空白型, , , 
.局部变量 b, 空白型, , , 

_关闭对象 (_创建线程 (0, 0, &_模块_非法检测, 0, 0, 0))

 ' 防止host本地验证
赋值 (host, 读入文件 (#host))
.如果真 (并且 (等于 (host, {  }), 文件是否存在 (#host)))
    赋值 (HOST状态, 真)
    输出调试文本 (相加 (“超级模块：权限不足，可能在防火墙之后！详情请登陆 ”, #官方网址1))
.如果真结束
.如果真 (不等于 (寻找文本 (到文本 (host), “super-ec.cn”, , 真), -1))
    信息框 (相加 (“非常规操作：您可能使用了恶意软件，host文件被恶意修改！”, #换行符, #换行符, “详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (不等于 (寻找文本 (到文本 (host), “wghai.”, , 真), -1))
    信息框 (相加 (“非常规操作：您可能使用了恶意软件，host文件被恶意修改！”, #换行符, #换行符, “详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (不等于 (寻找文本 (到文本 (host), “qsyou.com”, , 真), -1))
    信息框 (相加 (“非常规操作：您可能使用了恶意软件，host文件被恶意修改！”, #换行符, #换行符, “详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
赋值 (官方网址, 取文本注册项 (#现行用户, “Software\Super-EC\网址”, ))
.如果 (等于 (官方网址, “”))
    赋值 (官方网址, #官方网址1)
.否则
    .如果真 (并且 (不等于 (官方网址, #官方网址1), 不等于 (官方网址, #官方网址2), 不等于 (官方网址, #官方网址3)))
        写注册项 (#现行用户, “Software\Super-EC\网址”, #官方网址1)
        赋值 (官方网址, #官方网址1)
    .如果真结束
    
.如果结束

 ' 获取本机IP
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 相加 (官方网址, #IP地址), 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
.如果真结束
.如果 (小于 (取字节集长度 (bp.取字节集 ()), 16))
    赋值 (本机IP, 到文本 (bp.取字节集 ()))
.否则
    赋值 (本机IP, “127.0.0.1”)
.如果结束

 ' 获取现行
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 相加 (官方网址, #时间地址), 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
.如果真结束
.如果 (小于 (取字节集长度 (bp.取字节集 ()), 12))
    赋值 (现行时间, 到文本 (bp.取字节集 ()))
.否则
    赋值 (现行时间, “2000-01-01”)
.如果结束

 ' 验证访问权限
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 相加 (官方网址, #验证地址), 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
.如果真结束
.如果真 (等于 (bp.取字节集 (), {  }))
    信息框 (相加 (“超级模块：网络故障，连接验证服务器失败！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛”), ), -1))
    .如果真 (_模块_备用验证 ())
        返回 (“游客”)
    .如果真结束
    信息框 (相加 (“超级模块：服务器不可用，连接验证服务器失败，请稍后再试！您也可以尝试注册机更改验证地址！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (不等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛 提示信息”), ), -1))
    信息框 (相加 (“超级模块：会员验证失败！请先登陆SuperEC官方论坛 ”, 官方网址), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“版主”), ), -1))
    信息框 (相加 (“超级模块：会员验证失败！请先登陆SuperEC官方论坛 ”, 官方网址), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (本机IP), ), -1))
    赋值 (非法操作, 真)
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (现行时间), ), -1))
    赋值 (非法操作, 真)
.如果真结束
写注册项 (#现行用户, “Software\Super-EC\网址”, 官方网址)

 ' 检测最新动态
.如果真 (等于 (最新动态, 假))
    赋值 (a, 寻找字节集 (bp.取字节集 (), 到字节集 (相加 (“<span id=”, #引号, “thread_”)), ))
    赋值 (a, 寻找字节集 (bp.取字节集 (), 到字节集 (“模块”), 相加 (a, 1)))
    赋值 (b, 倒找字节集 (bp.取字节集 (), 到字节集 (“>”), a))
    赋值 (会员, 到文本 (取字节集中间 (bp.取字节集 (), 相加 (b, 1), 相减 (寻找字节集 (bp.取字节集 (), 到字节集 (“<”), a), b, 1))))
    输出调试文本 (相加 (“☆☆☆最新动态☆☆☆: ”, 会员))
    赋值 (最新动态, 真)
.如果真结束

 ' 验证授权用户
赋值 (a, 寻找字节集 (bp.取字节集 (), 到字节集 (相加 (“class=”, #引号, “noborder”, #引号, “>”)), ))
.如果真 (不等于 (a, -1))
    赋值 (b, 寻找字节集 (bp.取字节集 (), 到字节集 (“</a>”), a))
    赋值 (会员, 到文本 (取字节集中间 (bp.取字节集 (), 相加 (a, 17), 相减 (b, a, 17))))
    赋值 (会员账号, 会员)
    返回 (会员)
.如果真结束
.如果真 (并且 (等于 (会员, “”), 等于 (host, {  })))
    信息框 (相加 (“非常规操作：您可能使用了恶意软件，host文件被锁定！”, #换行符, #换行符, “详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
返回 (“未知”)


.子程序 _模块_备用验证, 逻辑型, , 联网
.局部变量 对象, 对象, , , 
.局部变量 bp, 变体型, , , 
.局部变量 内容, 文本型, , , 

输出调试文本 (“错误：连接验证服务器失败！正在转向备用验证地址。。。”)
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, #备用地址, 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
.如果真结束
赋值 (内容, 到文本 (bp.取字节集 ()))
.如果真 (不等于 (寻找文本 (内容, “=真”, , 假), -1))
    输出调试文本 (取文本左边 (内容, 寻找文本 (内容, 相加 (#换行符, #换行符, #换行符), , 假)))
    返回 (真)
.如果真结束
返回 (假)


.子程序 _模块_商业用户组验证, 逻辑型, , 联网
.局部变量 对象, 对象, , , 
.局部变量 bp, 变体型, , , 

 ' 验证是否正版用户
.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 相加 (官方网址, #正版地址), 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
.如果真结束
.如果真 (等于 (bp.取字节集 (), {  }))
    信息框 (相加 (“超级模块：网络故障，连接验证服务器失败！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛”), ), -1))
    信息框 (相加 (“超级模块：服务器不可用，连接验证服务器失败，请稍后再试！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
    结束 ()
.如果真结束
.如果真 (不等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛 提示信息”), ), -1))
    返回 (假)
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“<h1>商业用户支持</h1>”), ), -1))
    赋值 (非法操作, 真)
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (本机IP), ), -1))
    赋值 (非法操作, 真)
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (现行时间), ), -1))
    赋值 (非法操作, 真)
.如果真结束
返回 (真)


.子程序 _模块_标识验证, 逻辑型, , 联网
.参数 标识, 文本型, , 个人资料页中,CPU序列号或USB序列号等

.局部变量 对象, 对象, , , 
.局部变量 bp, 变体型, , , 

.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 相加 (官方网址, #个人地址), 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
    .如果真 (等于 (bp.取字节集 (), {  }))
        信息框 (相加 (“超级模块：网络故障，连接验证服务器失败！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        结束 ()
    .如果真结束
    .如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛”), ), -1))
        信息框 (相加 (“超级模块：服务器不可用，连接验证服务器失败，请稍后再试！详情请登陆 ”, #官方网址1), #错误图标, “错误”)
        结束 ()
    .如果真结束
    .如果真 (不等于 (寻找字节集 (bp.取字节集 (), 到字节集 (“官方论坛 提示信息”), ), -1))
        信息框 (相加 (“超级模块：会员权限不足！请先登陆SuperEC官方论坛 ”, 官方网址), #错误图标, “错误”)
        结束 ()
    .如果真结束
    .如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (本机IP), ), -1))
        赋值 (非法操作, 真)
    .如果真结束
    .如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (现行时间), ), -1))
        赋值 (非法操作, 真)
    .如果真结束
    
.如果真结束
.如果真 (等于 (寻找字节集 (bp.取字节集 (), 到字节集 (标识), ), -1))
    返回 (假)
.如果真结束
返回 (真)


.子程序 _模块_自助硬件效验, 逻辑型, , 注:自助效验前务必先网络验证
.参数 会员ID, 文本型, , 
.参数 HD, 整数型, , 
.参数 CPU, 文本型, , 

.局部变量 码, 文本型, , , 

.如果真 (并且 (小于 (取文本长度 (CPU), 3), 小于 (取文本长度 (到文本 (HD)), 3)))
    输出调试文本 (“错误：无效的硬件信息无法使用自助服务！”)
    返回 (假)
.如果真结束

.如果真 (等于 (_模块_商业用户组验证 (), 假))
    输出调试文本 (相加 (“本服务仅限于商业用户组，如果确定你有该权限，请登陆后再试！”, 官方网址))
    返回 (假)
.如果真结束

.如果真 (等于 (信息框 (相加 (会员ID, “：是否自行生成[硬件]注册码？”, #换行符, #换行符, “本功能仅供正版会员使用，注册后不再出现该提示框！”), 相加 (#询问图标, #是否钮), “提示”), #是钮))
     ' 验证CPU信息是否相符
    .如果真 (或者 (小于 (取文本长度 (CPU), 3), 等于 (_模块_标识验证 (相加 (#CPU标识1, 到文本 (CPU), #CPU标识2)), 假)))
        .如果真 (或者 (小于 (取文本长度 (到文本 (HD)), 3), 等于 (_模块_标识验证 (相加 (#CPU标识1, 到文本 (HD), #CPU标识2)), 假)))
            信息框 (“无法载入模块(011)：会员资料中{CPU序列号}或{硬盘特征字}与实际硬件信息不符！”, #错误图标, “提示”)
            结束 ()
        .如果真结束
        
    .如果真结束
     ' 最后完成注册
    
    赋值 (码, _模块_自助服务 (CPU, HD))
    置剪辑板文本 (码)
    赋值 (码, 相加 (“恭喜：生成注册码成功！已复制到剪辑板。”, #换行符, #换行符, “注册码：”, 码))
    输出调试文本 (码)
    .如果真 (等于 (信息框 (相加 (码, #换行符, #换行符, “是否需要注册到本机？”), 相加 (#信息图标, #是否钮), “提示”), #是钮))
        .如果真 (等于 (写注册项 (#现行用户, “Software\Super-EC\CD-KEY”, 取剪辑板文本 ()), 假))
            写到文件 (相加 (取特殊目录 (), “注册码.reg”), 到字节集 (相加 (“Windows Registry Editor Version 5.00”, #换行符, #换行符, “[HKEY_CURRENT_USER\Software\Super-EC]”, #换行符, #引号, “CD-KEY”, #引号, “=”, #引号, 取剪辑板文本 (), #引号, #换行符)))
        .如果真结束
        
    .如果真结束
    删除文件 (相加 (取特殊目录 (), “硬件信息.ini”))
    结束 ()
.如果真结束
返回 (真)


.子程序 _模块_自助USB效验, 逻辑型, , 
.参数 会员ID, 文本型, , 
.参数 USB序列号, 整数型, , 
.参数 卷标, 文本型, , 
.参数 文件名, 文本型, , 

.如果真 (并且 (小于 (取文本长度 (卷标), 3), 小于 (取文本长度 (到文本 (USB序列号)), 3)))
    输出调试文本 (“错误：无效的USB信息无法使用自助服务！”)
    返回 (假)
.如果真结束

.如果真 (等于 (_模块_商业用户组验证 (), 假))
    输出调试文本 (“错误：非商业用户无法使用USB验证服务！”)
    返回 (假)
.如果真结束

.如果真 (等于 (信息框 (相加 (会员ID, “：是否自行生成[USB]注册文件？”, #换行符, #换行符, “本功能仅供正版会员使用，注册后不再出现该提示框！”), 相加 (#询问图标, #是否钮), “提示”), #是钮))
    .如果真 (或者 (小于 (取文本长度 (到文本 (USB序列号)), 3), 等于 (_模块_标识验证 (相加 (#USB标识1, 到文本 (USB序列号), #USB标识2)), 假)))
        信息框 (“超级模块：会员资料中{USB序列号}与实际U盘信息不符！”, #错误图标, “提示”)
        结束 ()
    .如果真结束
    
     ' 最后完成注册
    .如果真 (写USB验证文件 (文件名, 当前模块版本, _模块_自助服务 (卷标, USB序列号)))
        输出调试文本 (“恭喜：生成USB注册文件成功！已写入U盘中。”)
    .如果真结束
    结束 ()
.如果真结束
返回 (真)


.子程序 _模块_自助服务, 文本型, , 注:直接生成注册码
.参数 CPU, 文本型, , 
.参数 HD, 整数型, , 

.局部变量 码, 文本型, , , 

.如果真 (等于 (HD, 0))
    赋值 (HD, 相加 (取磁盘序列号 (“C:”), 到数值 (当前模块版本)))
.如果真结束
.如果真 (非法操作)
    赋值 (HD, 取磁盘序列号 (“C:”))
.如果真结束
赋值 (码, 取硬件信息码2 (相加 (取十六进制文本 (HD), “CPU”), “取MAC地址 ()”, HD, 相加 (取十六进制文本 (HD), “小.&烦g]:ec0”, 当前模块版本, #官方网址1)))
返回 (码)


.类模块 自动验证类, , , 

.程序集变量 结果, 文本型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
_模块_协议 ()
赋值 (结果, _模块_综合验证 ())


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用



.子程序 _模块_自动验证, 文本型, , 
_模块_写版权标记 ()
返回 (结果)


.程序集 功能, , , 

.子程序 _模块_非法检测, 空白型, , 
.局部变量 信息, 进程信息_, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 句柄快照2, 整数型, , , 
.局部变量 模块信息, 模块信息型, , , 
.局部变量 进程句柄2, 整数型, , , 
.局部变量 临时模块名, 文本型, , , 
.局部变量 临时路径, 文本型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 a, 逻辑型, , , 

赋值 (进程快照, _创建快照 (15, 0))
.如果真 (不等于 (进程快照, 0))
    赋值 (信息.dwSize, 1024)
    赋值 (进程句柄, _第一个 (进程快照, 信息))
    .判断循环首 (不等于 (进程句柄, 0))
        .如果真 (不等于 (信息.进程ID, 0))
            赋值 (句柄快照2, _创建快照 (8, 信息.进程ID))
            .如果真 (不等于 (句柄快照2, 0))
                赋值 (模块信息.size, 1024)
                赋值 (进程句柄2, _第一个模块 (句柄快照2, 模块信息))
                赋值 (临时模块名, 到文本 (模块信息.模块文件名))
                赋值 (临时路径, 到文本 (模块信息.模块完整路径))
                赋值 (a, 假)
                .如果真 (不等于 (临时模块名, “e.exe”))
                    .判断循环首 (不等于 (进程句柄2, 0))
                        .如果真 (或者 (等于 (到文本 (模块信息.模块文件名), “eNetIntercept.fne”), 等于 (到文本 (模块信息.模块文件名), “ESPI11.dll”)))
                            .如果真 (a)
                                赋值 (句柄, _打开进程 (2035711, 0, 信息.进程ID))
                                _终止进程 (句柄, 0)
                                _关闭对象 (句柄)
                                输出调试文本 (相加 (“发现非法程序：”, 临时路径))
                                删除注册项 (#现行用户, “Software\Super-EC\”)
                                .判断循环首 (文件是否存在 (临时路径))
                                    删除文件 (临时路径)
                                    处理事件 ()
                                .判断循环尾 ()
                                信息框 (相加 (“非法模块：”, #左引号, 临时模块名, #右引号, “文件已删除！”, #换行符, #换行符, “程序路径：”, 临时路径), #错误图标, “超级模块 提示”)
                            .如果真结束
                            赋值 (a, 真)
                        .如果真结束
                        赋值 (进程句柄2, _下一个模块 (句柄快照2, 模块信息))
                    .判断循环尾 ()
                .如果真结束
                _关闭对象 (句柄快照2)
            .如果真结束
            
        .如果真结束
        赋值 (进程句柄, _下一个 (进程快照, 信息))
    .判断循环尾 ()
    _关闭对象 (进程快照)
.如果真结束


.子程序 _模块_暗桩, 空白型, , 验证模块合法性,随机启动暗桩
.局部变量 随机值, 字节型, , , 

.如果真 (等于 (非法操作, 假))
    返回 ()
.如果真结束
 ' 启动暗桩功能
置随机数种子 ()
赋值 (随机值, 取随机数 (1, 50))
.判断开始 (等于 (随机值, 1))
    CallWindowProc (_取库函数地址3 (_取模块句柄2 (“NTDLL”), 320), _取当前线程句柄 (), 17, 0, 0) ' 脱离调试
.判断 (等于 (随机值, 2))
    赋值 (会员账号, 相加 (会员账号, 取空白文本 (502400000))) ' 爆增内存卡死你
.判断 (等于 (随机值, 3))
    _投递消息 (_取当前窗口 (), 16, 0, 0) ' 关掉窗口
.默认
    Beep (2000, 150) ' 吓死你哦
.判断结束



.子程序 _模块_调用转向, 空白型, , 
.参数 DLL文件名, 文本型, , 
.参数 函数名, 文本型, , 

.局部变量 特殊目录, 文本型, 静态, , 
.局部变量 记时器, 整数型, 静态, , 

.如果真 (等于 (特殊目录, “”))
    赋值 (特殊目录, 取特殊目录 (37))
.如果真结束
.如果真 (输出特殊库函数调用信息)
    输出调试文本 (相加 (“特殊库调用：”, DLL文件名, “库函数名：”, 函数名))
.如果真结束
.如果真 (DLL命令调用转向 (相加 (特殊目录, DLL文件名), 函数名))
    返回 ()
.如果真结束
信息框 (相加 (“错误:无法找到库函数! (”, DLL文件名, “,”, 函数名, “)”, #换行符, #换行符, “请到Super-EC官方提交BUG! http://www.super-ec.cn/”), #错误图标, “模块”)
结束 ()


.子程序 _模块_内部验证A, 空白型, , 
.参数 类, 文本型, 可空, 

_模块_暗桩 ()
.如果真 (输出类信息)
    输出调试文本 (相加 (“正在初始化...”, 类))
.如果真结束


.子程序 _模块_内部验证B, 空白型, , 
.参数 类, 文本型, 可空, 

.局部变量 记时器, 整数型, 静态, , 

_模块_暗桩 ()
.如果真 (等于 (是否为正版, 假))
    .如果真 (大于 (相减 (取启动时间 (), 记时器), 8000))
        赋值 (记时器, 取启动时间 ())
        输出调试文本 (“随机提醒：Super-EC免费用户！”)
    .如果真结束
    
.如果真结束
.如果真 (输出类信息)
    输出调试文本 (相加 (“正在自释放...”, 类))
.如果真结束


.子程序 取CPU序列号, 文本型, , 获取CPU序列号,通常可用于软件注册验证
.局部变量 VBScript, 对象, , , 
.局部变量 CPU号, 文本型, 静态, , 

.如果真 (不等于 (CPU号, “”))
    返回 (CPU号)
.如果真结束
VBScript.创建 (“ScriptControl”, )
VBScript.写属性 (“Language”, “VBScript”)
VBScript.数值方法 (“ExecuteStatement”, #CPUSet)
赋值 (CPU号, VBScript.通用方法 (“Run”, “Getcpuid”, ).取文本 ())
返回 (CPU号)


.子程序 取特殊目录, 文本型, , 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]

.局部变量 路径, 文本型, , , 
.局部变量 标示结构, 项目标识符列表, , , 
.局部变量 目录类型, 整数型, , , 

.如果真 (等于 (欲获取目录类型, 99))
    输出调试文本 (“0我的桌面 2我的程序 5我的文档 6我的收藏夹 7我的启动 8我最近的文档 9我的发送到 11我的开始菜单 13我的音乐 14我的视频 16我的桌面 20系统字体 22开始菜单组 23程序组 24启动组 25桌面 31收藏夹 32我的浏览器临时目录 33我的Cookies 34我的历史记录 36Windows安装目录 37系统目录 38文件安装目录 39我的图片 40用户目录 41系统目录 46文档 47管理工具 48我的管理工具 53音乐 54图片 55视频”)
.如果真结束
.如果 (等于 (欲获取目录类型, 1))
    赋值 (目录类型, 34)
.否则
    赋值 (目录类型, 欲获取目录类型)
.如果结束

获取特别文件夹位置_ (0, 目录类型, 标示结构)
赋值 (路径, 取空白文本 (255))
从列表id取路径_ (标示结构.结构大小, 路径)
.如果真 (等于 (路径, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (欲获取目录类型, 1))
    赋值 (路径, 子文本替换 (路径, “History”, “Temp”, , , 真))
.如果真结束
返回 (相加 (路径, “\”))


.子程序 下载, 字节集, , 
.参数 网址, 文本型, , 欲访问的网络地址
.参数 保存路径, 文本型, 可空, 可空:仅返回字节集数据,将下载的内容保存到本地文件

.局部变量 对象, 对象, , , 
.局部变量 bp, 变体型, , , 

.如果真 (对象.创建 (“Microsoft.XMLHTTP”, ))
    对象.方法 (“open”, “GET”, 网址, 假)
    对象.方法 (“send”, )
    赋值 (bp, 对象.读属性 (“responseBody”, ))
    .如果真 (等于 (是否为空 (保存路径), 假))
        写到文件 (保存路径, bp.取字节集 ())
    .如果真结束
    返回 (bp.取字节集 ())
.如果真结束
返回 ({  })


.子程序 取硬件信息码2, 文本型, , 
.参数 CPU, 文本型, , 
.参数 MAC, 文本型, , 
.参数 HD2, 整数型, , 
.参数 密码, 文本型, , 

.局部变量 HD, 文本型, , , 
.局部变量 原文, 字节集, , , 
.局部变量 余数, 整数型, , , 
.局部变量 三字节数据, 字节型, , "3", 
.局部变量 码表, 字节集, , , 
.局部变量 len_x, 整数型, , , 
.局部变量 len_y, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 k1, 整数型, , , 
.局部变量 m, 字节型, , "256", 
.局部变量 j, 整数型, , , 
.局部变量 key, 字节集, , , 
.局部变量 密码长度, 整数型, , , 
.局部变量 原文长度, 整数型, , , 
.局部变量 x1, 整数型, , , 
.局部变量 k, 字节型, , "256", 
.局部变量 temp, 字节型, , , 
.局部变量 x, 字节集, , , 
.局部变量 hCryptProv, 整数型, , , 
.局部变量 hKey, 空白型, , , 
.局部变量 hHash, 空白型, , , 
.局部变量 pbBuffer, 字节集, , , 
.局部变量 cbHash, 空白型, , , 
.局部变量 rgbHash, 字节集, , , 
.局部变量 rgbDigits, 字节集, , , 
.局部变量 szMD5, 字节集, , , 
.局部变量 b, 空白型, , , 
.局部变量 len, 空白型, , , 



赋值 (HD, 取十六进制文本 (HD2))
.如果真 (等于 (相加 (CPU, HD), “”))
    返回 (“1001”)
.如果真结束

赋值 (原文, 到字节集 (相加 (CPU, MAC, HD, MAC, CPU)))
 ' 下面进行BASE64编码
赋值 (len_x, 取字节集长度 (原文))
.如果真 (小于 (len_x, 1))
    返回 (“1002”)
.如果真结束
赋值 (余数, 求余数 (len_x, 3))
.如果真 (大于 (余数, 0))
    赋值 (原文, 相加 (原文, 取空白字节集 (相减 (3, 余数))))
    赋值 (len_x, 相减 (相加 (len_x, 3), 余数))
.如果真结束
赋值 (len_y, 相除 (相乘 (len_x, 4), 3))
赋值 (结果, 取空白字节集 (len_y))
赋值 (i, 1)
赋值 (码表, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 })
.变量循环首 (1, len_x, 3, k1)
    赋值 (三字节数据 [1], 原文 [k1])
    赋值 (三字节数据 [2], 原文 [相加 (k1, 1)])
    赋值 (三字节数据 [3], 原文 [相加 (k1, 2)])
    赋值 (结果 [i], 码表 [相加 (右移 (三字节数据 [1], 2), 1)])
    赋值 (结果 [相加 (i, 1)], 码表 [相加 (左移 (位与 (三字节数据 [1], 3), 4), 右移 (三字节数据 [2], 4), 1)])
    赋值 (结果 [相加 (i, 2)], 码表 [相加 (左移 (位与 (三字节数据 [2], 15), 2), 右移 (三字节数据 [3], 6), 1)])
    赋值 (结果 [相加 (i, 3)], 码表 [相加 (位与 (三字节数据 [3], 63), 1)])
    赋值 (i, 相加 (i, 4))
.变量循环尾 ()
.判断开始 (等于 (余数, 2))
    赋值 (结果 [len_y], 61)
.判断 (等于 (余数, 1))
    赋值 (结果 [len_y], 61)
    赋值 (结果 [相减 (len_y, 1)], 61)
.默认
    
.判断结束
赋值 (原文, 相加 (结果, 到字节集 (相加 (CPU, MAC))))

 ' 下面进行RC4加密
赋值 (原文长度, 取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 (“1003”)
.如果真结束
赋值 (密码长度, 取文本长度 (密码))
赋值 (结果, 取空白字节集 (原文长度))
.计次循环首 (256, i)
    赋值 (m [i], 相减 (i, 1))
.计次循环尾 ()
.如果真 (大于 (密码长度, 0))
    赋值 (key, 到字节集 (密码))
    赋值 (j, 1)
    .计次循环首 (256, i)
        赋值 (k [i], key [j])
        赋值 (j, 相加 (j, 1))
        .如果真 (大于 (j, 密码长度))
            赋值 (j, 1)
        .如果真结束
        
    .计次循环尾 ()
    赋值 (j, 0)
    .计次循环首 (256, i)
        赋值 (j, 位与 (相加 (j, m [i], k [i]), 255))
        赋值 (temp, m [i])
        赋值 (m [i], m [相加 (j, 1)])
        赋值 (m [相加 (j, 1)], temp)
    .计次循环尾 ()
.如果真结束
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (原文长度, x1)
    赋值 (i, 位与 (相加 (i, 1), 255))
    赋值 (j, 位与 (相加 (j, m [相加 (i, 1)]), 255))
    赋值 (temp, m [相加 (i, 1)])
    赋值 (m [相加 (i, 1)], m [相加 (j, 1)])
    赋值 (m [相加 (j, 1)], temp)
    赋值 (结果 [x1], 位异或 (原文 [x1], m [相加 (位与 (相加 (m [相加 (i, 1)], m [相加 (j, 1)]), 255), 1)]))
.计次循环尾 ()
赋值 (x, 相加 (到字节集 (CPU), 结果, 到字节集 (HD)))

 ' 下面取MD5码
.如果 (等于 (CryptAcquireContext (hCryptProv, “”, “”, 1, -268435456), 0))
    .如果真 (等于 (CryptAcquireContext (hCryptProv, “”, “”, 1, 0), 0))
        返回 (“1011”)
    .如果真结束
    
.否则
    .如果 (等于 (CryptCreateHash (hCryptProv, 32770, hKey, 0, hHash), 0))
        CryptReleaseContext (hCryptProv, 0)
        返回 (“1012”)
        
    .否则
        赋值 (pbBuffer, x)
        赋值 (len, 取字节集长度 (x))
        .如果 (等于 (CryptHashData (hHash, pbBuffer, len, 0), 0))
            CryptDestroyHash (hHash)
            CryptReleaseContext (hCryptProv, 0)
            返回 (“1013”)
            
        .否则
            赋值 (rgbHash, 取空白字节集 (16))
            赋值 (cbHash, 16)
            .如果 (等于 (CryptGetHashParam (hHash, 2, rgbHash, cbHash, 0), 0))
                CryptDestroyHash (hHash)
                CryptReleaseContext (hCryptProv, 0)
                返回 (“1014”)
                
            .否则
                赋值 (rgbDigits, 到字节集 (“0123456789ABCDEF”))
                赋值 (szMD5, 取空白字节集 (相乘 (16, 2)))
                .变量循环首 (0, 相减 (cbHash, 1), 1, i)
                    赋值 (b, rgbHash [相加 (i, 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 1)], rgbDigits [相加 (右移 (b, 4), 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 2)], rgbDigits [相加 (位与 (b, 15), 1)])
                .变量循环尾 ()
                CryptDestroyHash (hHash)
                CryptReleaseContext (hCryptProv, 0)
            .如果结束
            
        .如果结束
        
    .如果结束
    
.如果结束

返回 (取字节集数据 (szMD5, #文本型, ))


.子程序 取磁盘序列号, 整数型, , 
.参数 盘符, 文本型, , 欲取序列号的磁盘盘符 (如: F:)
.参数 卷标, 文本型, 参考 可空, 用于存放卷名(卷标)的变量
.参数 系统名称, 文本型, 参考 可空, 用于存放文件系统名称的变量 (如FAT,NTFS以及其他)

.局部变量 返回序列号, 整数型, , , 

赋值 (卷标, 取空白文本 (255))
赋值 (系统名称, 取空白文本 (255))
.如果真 (不等于 (GetVolumeInformation (相加 (盘符, “\”), 卷标, 255, 返回序列号, 255, 0, 系统名称, 255), 0))
    返回 (返回序列号)
.如果真结束
返回 (0)


.子程序 取驱动器列表, 整数型, , 
.参数 保存驱动器列表, 文本型, 可空 数组, 
.参数 类型, 空白型, 可空, 默认为0所有驱动器  1 硬盘驱动器  2 光盘驱动器  3 可移动驱动器  4 网络驱动器。

.局部变量 所有盘符, 字节集, , , 
.局部变量 盘符, 字节集, , "0", 
.局部变量 返回值, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 移动盘, 文本型, , "0", 
.局部变量 硬盘, 文本型, , "0", 
.局部变量 光盘, 文本型, , "0", 
.局部变量 其他, 文本型, , "0", 

赋值 (所有盘符, 取空白字节集 (256))
赋值 (返回值, GetLogicalDriveStrings (256, 所有盘符))
赋值 (所有盘符, 取字节集左边 (所有盘符, 返回值))
赋值 (盘符, 分割字节集 (所有盘符, { 0 }, ))
.计次循环首 (取数组成员数 (盘符), i)
    .判断开始 (等于 (GetDriveTypeA (到文本 (盘符 [i])), 2)) ' 2=移动驱动器
        加入成员 (移动盘, 到文本 (盘符 [i]))
    .判断 (等于 (GetDriveTypeA (到文本 (盘符 [i])), 3)) ' 3=硬盘
        加入成员 (硬盘, 到文本 (盘符 [i]))
    .判断 (等于 (GetDriveTypeA (到文本 (盘符 [i])), 5)) ' 5=光盘
        加入成员 (光盘, 到文本 (盘符 [i]))
    .默认
        加入成员 (其他, 到文本 (盘符 [i])) ' 其他
    .判断结束
    
.计次循环尾 ()
.判断开始 (等于 (类型, 0))
    赋值 (保存驱动器列表, 硬盘)
    加入成员 (保存驱动器列表, 光盘)
    加入成员 (保存驱动器列表, 移动盘)
    加入成员 (保存驱动器列表, 其他)
.判断 (等于 (类型, 1))
    赋值 (保存驱动器列表, 硬盘)
.判断 (等于 (类型, 2))
    赋值 (保存驱动器列表, 光盘)
.判断 (等于 (类型, 3))
    赋值 (保存驱动器列表, 移动盘)
.默认
    赋值 (保存驱动器列表, 其他)
.判断结束
返回 (取数组成员数 (保存驱动器列表))

.子程序 取文件特征, 日期时间型, , 取文件创建时间
.参数 文件名, 文本型, , 

.局部变量 OFSTRUCT, OFSTRUCT, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 创建时间, FILETIME, , , 
.局部变量 修改时间, FILETIME, , , 
.局部变量 访问时间, FILETIME, , , 
.局部变量 系统时间结构, SYSTEMTIME, , , 

赋值 (OFSTRUCT.结构长度, LocalSize_OFSTRUCT (OFSTRUCT))
赋值 (文件号, _打开文件_OFSTRUCT (文件名, OFSTRUCT, 0))
_取文件时间 (文件号, 创建时间, 访问时间, 修改时间)
_关闭对象 (文件号)
_时间结构转换 (创建时间, 系统时间结构)
返回 (到时间 (相加 (到文本 (系统时间结构.年), “/”, 到文本 (系统时间结构.月), “/”, 到文本 (相加 (系统时间结构.天, 整除 (相加 (系统时间结构.时, 8), 24))), “/”, 到文本 (求余数 (相加 (系统时间结构.时, 8), 24)), “/”, 到文本 (系统时间结构.分), “/”, 到文本 (系统时间结构.秒))))


.子程序 读USB验证文件, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 版本号, 文本型, 参考, 
.参数 注册码, 文本型, 参考, 

.局部变量 时间, 日期时间型, , , 
.局部变量 文件号, 整数型, , , 

赋值 (时间, 取文件特征 (文件名))
赋值 (文件号, 打开加密文件 (文件名, #读写, #无限制, 相加 (到文本 (时间), #模块名), ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (版本号, 读入一行 (文件号))
赋值 (注册码, 读入一行 (文件号))
关闭文件 (文件号)
.如果真 (并且 (不等于 (版本号, “”), 不等于 (注册码, “”)))
    返回 (真)
.如果真结束
返回 (假)


.子程序 写USB验证文件, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 版本号, 文本型, , 
.参数 注册码, 文本型, , 

.局部变量 时间, 日期时间型, , , 
.局部变量 文件号, 整数型, , , 

.如果真 (或者 (等于 (版本号, “”), 等于 (注册码, “”)))
    返回 (假)
.如果真结束
写到文件 (文件名, {  })
赋值 (时间, 取文件特征 (文件名))
赋值 (文件号, 打开加密文件 (文件名, #读写, #无限制, 相加 (到文本 (时间), #模块名), ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
写文本行 (文件号, 版本号)
写文本行 (文件号, 注册码)
关闭文件 (文件号)
返回 (真)



 ' 不属于任何一个程序集、类模块的函数：
