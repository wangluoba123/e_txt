 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 496
    高度 = 372
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 选题窗口
    左边 = 50
    顶边 = 50
    宽度 = 656
    高度 = 492
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 加, "1", , 
.常量 减, "2", , 
.常量 乘, "3", , 
.常量 除, "4", , 
.常量 被除, "5", , 
.常量 被减, "6", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 1 扩展界面支持库二
 ' script EDF19861DC454d15BA0B9E3FF9CA4F57 1 2 脚本语言支持组件





.窗口程序集 窗口程序集1, , , 

.子程序 _图片框1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

载入 (选题窗口, , 假)
销毁 ()

.子程序 _时钟1_周期事件, 空白型, , 
载入 (选题窗口, , 假)
销毁 ()


.窗口程序集 窗口程序集2, , , 

.程序集变量 存储数组, 整数型, , "5", 
.程序集变量 计算是否正确, 逻辑型, , , 
.子程序 _选题窗口_创建完毕, 空白型, , 
出随机数 ()

.子程序 _图形按钮5_被单击, 空白型, , 
结束 ()

.子程序 _重新按钮_被单击, 空白型, , 
出随机数 ()
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.列表项目, {  })

.子程序 _超级按钮1_被单击, 空白型, , 
.局部变量 数1, 整数型, , , 
.局部变量 数2, 整数型, , , 
.局部变量 数3, 整数型, , , 
.局部变量 数4, 整数型, , , 

赋值 (.列表项目, {  })
赋值 (数1, 到数值 (.内容))
赋值 (数2, 到数值 (.内容))
赋值 (数3, 到数值 (.内容))
赋值 (数4, 到数值 (.内容))
核心计算 (数1, 数2, 数3, 数4)
赋值 (.可视, 真)
赋值 (.内容, 选择 (等于 (取项目数 (), 0), “无解！”, 相加 (“共 ”, 到文本 (取项目数 ()), “ 种解”)))
.如果真 (等于 (取项目数 (), 0))
    “：/电脑我也算不出啦：/”.加入项目 ()
.如果真结束


.子程序 _a标签_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

编辑框调整 (99, 1)

.子程序 _b标签_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

编辑框调整 (192, 2)

.子程序 _c标签_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

编辑框调整 (285, 3)

.子程序 _d标签_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

编辑框调整 (378, 4)

.子程序 _编辑框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _编辑框1_失去焦点 ()
.如果真结束


.子程序 _编辑框1_失去焦点, 空白型, , 
.判断开始 (等于 (.左边, 99))
    赋值 (.内容, .内容)
.判断 (等于 (.左边, 192))
    赋值 (.内容, .内容)
.判断 (等于 (.左边, 285))
    赋值 (.内容, .内容)
.判断 (等于 (.左边, 378))
    赋值 (.内容, .内容)
.默认
    
.判断结束
赋值 (.可视, 假)
赋值 (.可视, 假)

.子程序 编辑框调整, 空白型, , 
.参数 左边位置, 整数型, , 
.参数 标题标签, 整数型, , 

左边位置.移动 (26, , )
赋值 (.可视, 真)
获取焦点 ()
赋值 (.内容, 多项选择 (标题标签, .内容, .内容, .内容, .内容))

.子程序 出随机数, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 k, 整数型, , , 
.局部变量 l, 整数型, , , 
.局部变量 m, 整数型, , , 
.局部变量 表达式, 文本型, , , 

置随机数种子 ()
赋值 (.内容, 到文本 (取随机数 (1, 10)))
赋值 (.内容, 到文本 (取随机数 (1, 10)))
赋值 (.内容, 到文本 (取随机数 (1, 10)))
赋值 (.内容, 到文本 (取随机数 (1, 10)))

.子程序 _重新按钮1_被单击, 空白型, , 
.如果真 (等于 (删首尾空 (.内容), “”))
    返回 ()
.如果真结束
.如果 (等于 (.未知支持库函数_1 (.内容), “24”))
    回答动画 (真) ' //故意重复。
    回答动画 (真)
.否则
    回答动画 (假)
.如果结束


.子程序 _结果列表框_列表项被选择, 空白型, , 
.局部变量 表达式, 文本型, , , 

赋值 (表达式, 子文本替换 (.取项目文本 (.现行选中项), “ + ”, “+”, , , 真))
赋值 (表达式, 子文本替换 (表达式, “×”, “*”, , , 真))
赋值 (表达式, 子文本替换 (表达式, “-”, “-”, , , 真))
赋值 (表达式, 子文本替换 (表达式, “÷”, “/”, , , 真))
赋值 (.内容, 删全部空 (表达式))

.子程序 回答动画, 空白型, , 
.参数 结果, 逻辑型, , 

.如果 (等于 (结果, 真))
    赋值 (.背景颜色, #黄色)
    赋值 (.内容, “你真棒！”)
.否则
    赋值 (.背景颜色, #红色)
    赋值 (.内容, “继续努力！”)
.如果结束
赋值 (.可视, 真)
赋值 (.文本颜色.字体大小, 8)
.计次循环首 (18, )
    赋值 (.文本颜色.字体大小, 相加 (.文本颜色.字体大小, 2))
    刷新显示 ()
    延时 (1)
.计次循环尾 ()

.子程序 排列子程序, 整数型, , 
.参数 排列数总数, 整数型, , 

.局部变量 开始数下标, 整数型, , , 标记本次排列的开始
.局部变量 临时变量, 整数型, , , 用于存储交换变量
.局部变量 交换数下标1, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标2, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标3, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标4, 整数型, , , 交换数在数组的位置

赋值 (开始数下标, 排列数总数) ' 从数组存储的最后一位数开始向前比较
.判断循环首 (并且 (大于或等于 (开始数下标, 1), 大于或等于 (存储数组 [开始数下标], 存储数组 [相加 (开始数下标, 1)]))) ' 找出本次排列开始的位置，第一次从最后一位开始
    赋值 (开始数下标, 相减 (开始数下标, 1))
.判断循环尾 ()
.如果真 (小于 (开始数下标, 1)) ' 已经全排列完毕，结束
    返回 (0)
.如果真结束
赋值 (交换数下标1, 相加 (开始数下标, 1)) ' 从下一个数开始交换
赋值 (交换数下标2, 相加 (开始数下标, 1))
 ' 找到要交换的两个数
.判断循环首 (并且 (小于或等于 (交换数下标2, 排列数总数), 小于 (存储数组 [开始数下标], 存储数组 [交换数下标2])))
    赋值 (交换数下标1, 交换数下标2)
    赋值 (交换数下标2, 相加 (交换数下标2, 1))
.判断循环尾 ()
 ' 交换数值
赋值 (临时变量, 存储数组 [开始数下标])
赋值 (存储数组 [开始数下标], 存储数组 [交换数下标1])
赋值 (存储数组 [交换数下标1], 临时变量)
赋值 (交换数下标3, 相加 (开始数下标, 1))
赋值 (交换数下标4, 排列数总数)
.判断循环首 (小于 (交换数下标3, 交换数下标4))
    赋值 (临时变量, 存储数组 [交换数下标3])
    赋值 (存储数组 [交换数下标3], 存储数组 [交换数下标4])
    赋值 (存储数组 [交换数下标4], 临时变量)
    赋值 (交换数下标3, 相加 (交换数下标3, 1))
    赋值 (交换数下标4, 相减 (交换数下标4, 1))
.判断循环尾 ()
返回 (1)

.子程序 核心计算, 空白型, , 
.参数 数值1, 整数型, , 
.参数 数值2, 整数型, , 
.参数 数值3, 整数型, , 
.参数 数值4, 整数型, , 

.局部变量 数值数组, 双精度小数型, , "4", 
.局部变量 临时结果数组, 整数型, , "4", 
.局部变量 保存数组1, 双精度小数型, , "0", 
.局部变量 保存数组2, 双精度小数型, , "0", 
.局部变量 保存数组3, 双精度小数型, , "0", 
.局部变量 计次变量1, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 计次变量3, 整数型, , , 
.局部变量 计次变量4, 整数型, , , 

赋值 (数值数组 [1], 数值1)
赋值 (数值数组 [2], 数值2)
赋值 (数值数组 [3], 数值3)
赋值 (数值数组 [4], 数值4)
清空 ()
赋值 (保存数组1, 数值数组) ' 将初始数字放入到临时变量
.计次循环首 (4, 计次变量1)
    赋值 (数值数组, 保存数组1) ' 将数值数组恢复成原来的数组
    赋值 (临时结果数组 [1], 数值数组 [计次变量1]) ' 提取出当前需要的数字
    删除成员 (数值数组, 计次变量1, 1) ' 删除当前已经提取的数字，下面就不会再取出了
    赋值 (保存数组2, 数值数组) ' 将下面循环中需要的原始数组保存到临时变量
    .计次循环首 (3, 计次变量2)
        赋值 (数值数组, 保存数组2)
        赋值 (临时结果数组 [2], 数值数组 [计次变量2])
        删除成员 (数值数组, 计次变量2, 1)
        赋值 (保存数组3, 数值数组)
        .计次循环首 (2, 计次变量3)
            赋值 (数值数组, 保存数组3)
            赋值 (临时结果数组 [3], 数值数组 [计次变量3])
            删除成员 (数值数组, 计次变量3, 1)
            赋值 (临时结果数组 [4], 数值数组 [1])
            计算结果 (临时结果数组)
        .计次循环尾 ()
    .计次循环尾 ()
.计次循环尾 ()
赋值 (数值数组, 保存数组1)

.子程序 计算结果, 空白型, , 
.参数 计算数组, 整数型, 数组, 

.局部变量 结果1, 双精度小数型, , , 
.局部变量 结果2, 双精度小数型, , , 
.局部变量 结果3, 双精度小数型, , , 
.局部变量 计算方法1, 整数型, , , 
.局部变量 计算方法2, 整数型, , , 
.局部变量 计算方法3, 整数型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 是否已有, 逻辑型, , , 
.局部变量 临时数组, 整数型, , "4", 
.局部变量 临时数值, 整数型, , , 

 ' 将每组数组用+-*/ \(除数除以被除数) |(减数减去被减数) 排列算结果
.计次循环首 (6, 计算方法1)
    赋值 (结果1, 计算 (计算方法1, 计算数组 [1], 计算数组 [2]))
    .计次循环首 (6, 计算方法2)
        赋值 (结果2, 计算 (计算方法2, 结果1, 计算数组 [3]))
        .计次循环首 (6, 计算方法3)
            赋值 (结果3, 计算 (计算方法3, 结果2, 计算数组 [4]))
            .判断开始 (等于 (结果3, 24))
                赋值 (临时数组, 计算数组)
                 ' 将正确结果按照一定顺序排列，以便排除相同的计算
                格式化计算结果 (临时数组 [1], 计算方法1, 临时数组 [2], 计算方法2, 临时数组 [3], 计算方法3, 临时数组 [4])
                 ' 暂停 ()
                 ' 将结果用文本形式表示
                赋值 (结果文本, 计算结果文本 (计算方法1, 到文本 (临时数组 [1]), 到文本 (临时数组 [2]), 0))
                赋值 (结果文本, 计算结果文本 (计算方法2, 结果文本, 到文本 (临时数组 [3]), 计算方法1))
                赋值 (结果文本, 计算结果文本 (计算方法3, 结果文本, 到文本 (临时数组 [4]), 计算方法2))
                加入到列表框 (结果文本)
                
            .判断 (等于 (计算 (计算方法2, 计算 (计算方法1, 计算数组 [1], 计算数组 [2]), 计算 (计算方法3, 计算数组 [3], 计算数组 [4])), 24))
                赋值 (临时数组, 计算数组)
                
                .如果真 (并且 (大于 (临时数组 [1], 临时数组 [2]), 或者 (等于 (计算方法1, #加), 等于 (计算方法1, #乘))))
                    赋值 (临时数值, 临时数组 [1])
                    赋值 (临时数组 [1], 临时数组 [2])
                    赋值 (临时数组 [2], 临时数值)
                .如果真结束
                .如果真 (并且 (大于 (临时数组 [3], 临时数组 [4]), 或者 (等于 (计算方法3, #加), 等于 (计算方法3, #乘))))
                    赋值 (临时数值, 临时数组 [3])
                    赋值 (临时数组 [3], 临时数组 [4])
                    赋值 (临时数组 [4], 临时数值)
                .如果真结束
                
                .如果真 (或者 (等于 (计算方法1, #被减), 等于 (计算方法1, #被除)))
                    赋值 (临时数值, 临时数组 [1])
                    赋值 (临时数组 [1], 临时数组 [2])
                    赋值 (临时数组 [2], 临时数值)
                    
                .如果真结束
                .如果真 (或者 (等于 (计算方法3, #被减), 等于 (计算方法3, #被除)))
                    赋值 (临时数值, 临时数组 [3])
                    赋值 (临时数组 [3], 临时数组 [4])
                    赋值 (临时数组 [4], 临时数值)
                .如果真结束
                
                .判断开始 (或者 (等于 (计算方法2, #被减), 等于 (计算方法2, #被除)))
                    赋值 (结果文本, 相加 (“(”, 到文本 (临时数组 [3]), 多项选择 (计算方法3, “+”, “-”, “*”, “÷”, “÷”, “-”), 到文本 (临时数组 [4]), “)”, 多项选择 (计算方法2, “+”, “-”, “*”, “÷”, “÷”, “-”), “(”, 到文本 (临时数组 [1]), 多项选择 (计算方法1, “+”, “-”, “*”, “÷”, “÷”, “-”), 到文本 (临时数组 [2]), “)”))
                .默认
                    赋值 (结果文本, 相加 (“(”, 到文本 (临时数组 [1]), 多项选择 (计算方法1, “+”, “-”, “*”, “÷”, “÷”, “-”), 到文本 (临时数组 [2]), “)”, 多项选择 (计算方法2, “+”, “-”, “*”, “÷”, “÷”, “-”), “(”, 到文本 (临时数组 [3]), 多项选择 (计算方法3, “+”, “-”, “*”, “÷”, “÷”, “-”), 到文本 (临时数组 [4]), “)”))
                .判断结束
                
                加入到列表框 (结果文本)
                
            .默认
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.计次循环尾 ()

.子程序 计算, 双精度小数型, , 
.参数 方法, 整数型, , 1:+,2:-,3:*,4:/,5:\,6:|
.参数 参数1, 双精度小数型, , 
.参数 参数2, 双精度小数型, , 

.判断开始 (等于 (方法, #加))
    返回 (相加 (参数1, 参数2))
.判断 (等于 (方法, #减))
    返回 (相减 (参数1, 参数2))
.判断 (等于 (方法, #乘))
    返回 (相乘 (参数1, 参数2))
.判断 (等于 (方法, #除))
    .如果 (等于 (参数2, 0))
        返回 (0)
    .否则
        返回 (相除 (参数1, 参数2))
    .如果结束
    
.判断 (等于 (方法, #被除))
    .如果 (等于 (参数1, 0))
        返回 (0)
    .否则
        返回 (相除 (参数2, 参数1))
    .如果结束
    
    
.判断 (等于 (方法, #被减))
    返回 (相减 (参数2, 参数1))
.默认
    
.判断结束
返回 (0)

.子程序 计算结果文本, 文本型, , 
.参数 当前方法, 整数型, , 
.参数 文本1, 文本型, , 
.参数 文本2, 文本型, , 
.参数 前一个方法, 整数型, , 为0代表第一次计算

.局部变量 计算文本, 文本型, , , 
.局部变量 局部_文本1, 文本型, , , 
.局部变量 局部_文本2, 文本型, , , 
.局部变量 局部_文本3, 文本型, , , 
.局部变量 局部_表达式, 文本型, , , 
.局部变量 局部_是否已替换, 逻辑型, , , 

赋值 (计算文本, 多项选择 (当前方法, “+”, “-”, “*”, “÷”, “÷”, “-”))
.判断开始 (小于或等于 (当前方法, 4))
    .判断开始 (或者 (等于 (当前方法, #加), 等于 (当前方法, #乘))) ' 格式化加法定律和乘法定律
        赋值 (局部_表达式, 子文本替换 (文本1, “÷”, “/”, , , 真))
        .判断开始 (大于 (到数值 (局部_表达式.未知支持库函数_1 ()), 到数值 (文本2)))
            赋值 (局部_文本1, 文本2)
            赋值 (局部_文本2, 文本1)
            赋值 (局部_是否已替换, 真)
        .默认
            赋值 (局部_文本1, 文本1)
            赋值 (局部_文本2, 文本2)
        .判断结束
        
    .默认
        赋值 (局部_文本1, 文本1)
        赋值 (局部_文本2, 文本2)
    .判断结束
    
.默认
    赋值 (局部_文本1, 文本2)
    赋值 (局部_文本2, 文本1)
.判断结束

.判断开始 (或者 (等于 (当前方法, #乘), 等于 (当前方法, #除)))
    .判断开始 (或者 (等于 (前一个方法, #加), 等于 (前一个方法, #减), 等于 (前一个方法, #被减)))
        .判断开始 (等于 (局部_是否已替换, 真))
            返回 (相加 (到文本 (局部_文本1), 计算文本, “(”, 到文本 (局部_文本2), “)”))
        .默认
            返回 (相加 (“(”, 到文本 (局部_文本1), “)”, 计算文本, 到文本 (局部_文本2)))
        .判断结束
        
    .默认
        返回 (相加 (到文本 (局部_文本1), 计算文本, 到文本 (局部_文本2)))
    .判断结束
    
.判断 (等于 (当前方法, #被除))
    .判断开始 (等于 (前一个方法, 0))
        返回 (相加 (到文本 (局部_文本1), 计算文本, 到文本 (局部_文本2)))
    .默认
        返回 (相加 (到文本 (局部_文本1), 计算文本, “(”, 到文本 (局部_文本2), “)”))
    .判断结束
    
.判断 (等于 (当前方法, #被减))
    .判断开始 (并且 (或者 (等于 (前一个方法, #加), 等于 (前一个方法, #减), 等于 (前一个方法, #被减)), 不等于 (前一个方法, 0)))
        返回 (相加 (到文本 (局部_文本1), 计算文本, “(”, 到文本 (局部_文本2), “)”))
    .默认
        返回 (相加 (到文本 (局部_文本1), 计算文本, 到文本 (局部_文本2)))
    .判断结束
    
.默认
    
.判断结束
返回 (相加 (到文本 (局部_文本1), 计算文本, 到文本 (局部_文本2))) ' 返回加或减

.子程序 格式化计算结果, 空白型, , 将正确结果的４个数字按顺序排列
.参数 格式化数组1, 整数型, 参考, 
.参数 方法1, 整数型, , 
.参数 格式化数组2, 整数型, 参考, 
.参数 方法2, 整数型, , 
.参数 格式化数组3, 整数型, 参考, 
.参数 方法3, 整数型, , 
.参数 格式化数组4, 整数型, 参考, 

.局部变量 临时交换数值, 整数型, , , 
.局部变量 临时数组, 整数型, , "0", 

.如果真 (等于 (方法1, #加))
    .如果真 (大于 (格式化数组1, 格式化数组2))
        赋值 (临时交换数值, 格式化数组1)
        赋值 (格式化数组1, 格式化数组2)
        赋值 (格式化数组2, 临时交换数值)
    .如果真结束
    
    .如果真 (等于 (方法2, #加))
        重定义数组 (临时数组, 假, 3)
        赋值 (临时数组 [1], 格式化数组1)
        赋值 (临时数组 [2], 格式化数组2)
        赋值 (临时数组 [3], 格式化数组3)
        数组排序 (临时数组, 真)
        赋值 (格式化数组1, 临时数组 [1])
        赋值 (格式化数组2, 临时数组 [2])
        赋值 (格式化数组3, 临时数组 [3])
        .如果真 (等于 (方法3, #加))
            重定义数组 (临时数组, 假, 4)
            赋值 (临时数组 [1], 格式化数组1)
            赋值 (临时数组 [2], 格式化数组2)
            赋值 (临时数组 [3], 格式化数组3)
            赋值 (临时数组 [4], 格式化数组4)
            数组排序 (临时数组, 真)
            赋值 (格式化数组1, 临时数组 [1])
            赋值 (格式化数组2, 临时数组 [2])
            赋值 (格式化数组3, 临时数组 [3])
            赋值 (格式化数组4, 临时数组 [4])
        .如果真结束
        
    .如果真结束
    
.如果真结束

.如果真 (等于 (方法1, #乘))
    .如果真 (大于 (格式化数组1, 格式化数组2))
        赋值 (临时交换数值, 格式化数组1)
        赋值 (格式化数组1, 格式化数组2)
        赋值 (格式化数组2, 临时交换数值)
    .如果真结束
    
    .如果真 (等于 (方法2, #乘))
        重定义数组 (临时数组, 假, 3)
        赋值 (临时数组 [1], 格式化数组1)
        赋值 (临时数组 [2], 格式化数组2)
        赋值 (临时数组 [3], 格式化数组3)
        数组排序 (临时数组, 真)
        赋值 (格式化数组1, 临时数组 [1])
        赋值 (格式化数组2, 临时数组 [2])
        赋值 (格式化数组3, 临时数组 [3])
        .如果真 (等于 (方法3, #乘))
            重定义数组 (临时数组, 假, 4)
            赋值 (临时数组 [1], 格式化数组1)
            赋值 (临时数组 [2], 格式化数组2)
            赋值 (临时数组 [3], 格式化数组3)
            赋值 (临时数组 [4], 格式化数组4)
            数组排序 (临时数组, 真)
            赋值 (格式化数组1, 临时数组 [1])
            赋值 (格式化数组2, 临时数组 [2])
            赋值 (格式化数组3, 临时数组 [3])
            赋值 (格式化数组4, 临时数组 [4])
        .如果真结束
        
    .如果真结束
    
.如果真结束

.如果真 (或者 (并且 (或者 (等于 (方法1, #加), 等于 (方法1, #减)), 等于 (方法2, #乘), 等于 (方法3, #乘)), 并且 (或者 (等于 (方法1, #乘), 等于 (方法1, #除)), 等于 (方法2, #加), 等于 (方法3, #加))))
    重定义数组 (临时数组, 假, 2)
    赋值 (临时数组 [1], 格式化数组3)
    赋值 (临时数组 [2], 格式化数组4)
    数组排序 (临时数组, 真)
    赋值 (格式化数组3, 临时数组 [1])
    赋值 (格式化数组4, 临时数组 [2])
.如果真结束


.子程序 加入到列表框, 空白型, , 
.参数 结果文本, 文本型, , 

.局部变量 计次变量, 整数型, , , 
.局部变量 是否已有, 逻辑型, , , 

.计次循环首 (取项目数 (), 计次变量) ' 循环判断是否有相同的计算方法
    .如果真 (等于 (相减 (计次变量, 1).取项目文本 (), 结果文本))
        赋值 (是否已有, 真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (是否已有, 假))
    结果文本.加入项目 ()
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
