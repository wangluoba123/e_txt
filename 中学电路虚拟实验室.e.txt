 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 717
    高度 = 548
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “中学电路虚拟实验室”
    帮助文件名 = “”

窗口 窗口_参数输入
    左边 = 50
    顶边 = 50
    宽度 = 230
    高度 = 120
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “参数输入”
    帮助文件名 = “”



.常量 程序名称, "“中学电路虚拟实验室”", , 
.常量 最新版本, "“V1.2”", , 
.图片 资源_图片_电池, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电池", , 电池.GIF
.图片 资源_图片_开关打开, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_开关打开", , 开关打开.GIF
.图片 资源_图片_开关关闭, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_开关关闭", , 开关关闭.GIF
.图片 资源_图片_灯泡_不亮, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_灯泡_不亮", , 灯泡_不亮.GIF
.图片 资源_图片_灯泡_半亮, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_灯泡_半亮", , 灯泡_半亮.GIF
.图片 资源_图片_灯泡_全亮, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_灯泡_全亮", , 灯泡_全亮.GIF
.图片 资源_图片_灯泡_破碎, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_灯泡_破碎", , 灯泡_破碎.GIF
.图片 资源_图片_电阻1, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻1", , 电阻1.GIF
.图片 资源_图片_电阻2, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻2", , 电阻2.GIF
.图片 资源_图片_电阻3, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻3", , 电阻3.GIF
.图片 资源_图片_电阻4, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻4", , 电阻4.GIF
.图片 资源_图片_电阻5, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻5", , 电阻5.GIF
.图片 资源_图片_电阻6, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电阻6", , 电阻6.GIF
.图片 资源_图片_风机1, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_风机1", , 风机1.GIF
.图片 资源_图片_风机2, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_风机2", , 风机2.GIF
.图片 资源_图片_风机3, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_风机3", , 风机3.GIF
.图片 资源_图片_风机4, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_风机4", , 风机4.GIF
.图片 资源_图片_电源器A1, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电源器A1", , 电源器A1.GIF
.图片 资源_图片_电源器A2, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电源器A2", , 电源器A2.GIF
.图片 资源_图片_电源器A3, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电源器A3", , 电源器A3.GIF
.图片 资源_图片_电源器A4, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电源器A4", , 电源器A4.GIF
.图片 资源_图片_电压器V1, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电压器V1", , 电压器V1.GIF
.图片 资源_图片_电压器V2, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电压器V2", , 电压器V2.GIF
.图片 资源_图片_电压器V3, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电压器V3", , 电压器V3.GIF
.图片 资源_图片_电压器V4, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\资源_图片_电压器V4", , 电压器V4.GIF
.图片 使用帮助, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\使用帮助", , 中学电路虚拟实验室使用帮助.chm
.图片 橡皮指针, " ' 已保存到：D:\易语言学习\Data\中学电路虚拟实验室.e\橡皮指针", , 橡皮指针


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库




.全局变量 当前元件编号, 空白型, , , 
.全局变量 窗口标题, 文本型, , , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 图片号, 整数型, , "25", 
.程序集变量 修改, 逻辑型, , , 用于判断是否已经修改
.程序集变量 移除, 逻辑型, , , 
.程序集变量 成功移除, 逻辑型, , , 判断元件是否已删除
.程序集变量 移动, 逻辑型, , , 
.程序集变量 匿名程序集变量_10532, 空白型, , , 
.程序集变量 画线, 逻辑型, , , 
.程序集变量 接头, 文本型, , , 元件接头名
.程序集变量 线段, 文本型, , , 画线的路径
.程序集变量 横坐标, 整数型, , , 鼠标横坐标
.程序集变量 纵坐标, 整数型, , , 鼠标纵坐标
.程序集变量 匿名程序集变量_10538, 空白型, , , 
.程序集变量 选元件, 逻辑型, , , 移动元件被选择
.程序集变量 初横位, 整数型, , , 移动元件初始鼠标位
.程序集变量 初纵位, 整数型, , , 移动元件初始鼠标位
.程序集变量 横位差, 整数型, , , 移动元件初始鼠标元件位差
.程序集变量 纵位差, 整数型, , , 移动元件初始鼠标元件位差
.程序集变量 差移线段组, 文本型, , "0", 移动元件影响到的所有线段(各点移距不同）
.程序集变量 等移线段组, 文本型, , "0", 移动元件影响到的所有线段(各点移距相同）
.程序集变量 匿名程序集变量_10546, 空白型, , , 
.程序集变量 空编号, 整数型, , "0", 删除元件后留下的编号
.程序集变量 画元件, 整数型, , , 被画元件类型
.程序集变量 当前最大编号, 整数型, , , 
.程序集变量 分类最大计数, 整数型, , "8", 用于给元件编号命名
.程序集变量 过程操作文本, 文本型, , , 用此文本操作或记录操作
.程序集变量 电源电压, 双精度小数型, , , 
.程序集变量 匿名程序集变量_10553, 空白型, , , 
.程序集变量 电机数组, 文本型, , "10", 电动机
.程序集变量 正向转动, 逻辑型, , "10", 电动机
.程序集变量 电机横位, 整数型, , "10", 电动机
.程序集变量 电机纵位, 整数型, , "10", 电动机
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 图片, 字节集, , "25", 
.局部变量 图片名, 文本型, , "25", 
.局部变量 变量1, 整数型, , , 

赋值 (_启动窗口., 相加 (#程序名称, “ ”, #最新版本))
赋值 (图片, { #资源_图片_电池, #资源_图片_开关打开, #资源_图片_开关关闭, #资源_图片_灯泡_不亮, #资源_图片_灯泡_半亮, #资源_图片_灯泡_全亮, #资源_图片_灯泡_破碎, #资源_图片_电阻1, #资源_图片_电阻2, #资源_图片_电阻3, #资源_图片_电阻4, #资源_图片_电阻5, #资源_图片_电阻6, #资源_图片_风机1, #资源_图片_风机2, #资源_图片_风机3, #资源_图片_风机4, #资源_图片_电源器A1, #资源_图片_电源器A2, #资源_图片_电源器A3, #资源_图片_电源器A4, #资源_图片_电压器V1, #资源_图片_电压器V2, #资源_图片_电压器V3, #资源_图片_电压器V4 })

.计次循环首 (25, 变量1)
    赋值 (图片号 [变量1], 载入图片 (图片 [变量1]))
.计次循环尾 ()
赋值 (.选中, 真)
赋值 (.标记, “1”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 __启动窗口_尺寸被改变, 空白型, , 
.判断开始 (小于 (_启动窗口., 548))
    赋值 (_启动窗口., 548)
.判断 (小于 (_启动窗口., 710))
    赋值 (_启动窗口., 710)
.默认
    相减 (_启动窗口., 140).移动 (相减 (_启动窗口., 144))
    .移动 (相减 (_启动窗口., 222), 相减 (_启动窗口., 148))
    .移动 (相减 (_启动窗口., 222), 相减 (_启动窗口., 148))
    .移动 (相减 (_启动窗口., 97), 相减 (_启动窗口., 16), )
    
.判断结束
.如果真 (大于 (当前最大编号, 0))
    刷新画板画面 (过程操作文本)
    电路分析 (过程操作文本)
.如果真结束


.子程序 _工具条1_被单击, 空白型, , 
.参数 按钮索引, 整数型, , 

.局部变量 按钮值, 整数型, , , 

.判断开始 (等于 (按钮索引, 1)) ' 新建
    _新建_被选择 ()
.判断 (等于 (按钮索引, 2)) ' 打开
    _打开_被选择 ()
.判断 (等于 (按钮索引, 3)) ' 保存
    保存文件 ()
.判断 (等于 (按钮索引, 4)) ' 模拟图
    模拟图 ()
.判断 (等于 (按钮索引, 5)) ' 分隔
    
.判断 (等于 (按钮索引, 6)) ' 开始
    重新开始 ()
.判断 (等于 (按钮索引, 7)) ' 帮助
    _帮助_被选择 ()
.判断 (等于 (按钮索引, 8)) ' 退出
    _退出_被选择 ()
.默认
    
.判断结束


.子程序 _打开_被选择, 空白型, , 
.局部变量 按钮值, 整数型, , , 

.如果真 (等于 (修改, 真))
    赋值 (按钮值, 信息框 (“当前实验已经被修改，请问是否保存？”, 相加 (3, 32), “询问：”))
    .判断开始 (等于 (按钮值, #是钮))
        保存文件 ()
    .判断 (等于 (按钮值, #取消钮))
        返回 ()
    .默认
        
    .判断结束
    
.如果真结束
打开文件 ()

.子程序 _新建_被选择, 空白型, , 
.局部变量 按钮值, 整数型, , , 

.如果真 (等于 (修改, 真))
    赋值 (按钮值, 信息框 (“当前实验已经被修改，请问是否保存？”, 相加 (3, 32), “询问：”))
    .判断开始 (等于 (按钮值, #是钮))
        保存文件 ()
    .判断 (等于 (按钮值, #取消钮))
        返回 ()
    .默认
        
    .判断结束
    
.如果真结束
重新开始 ()

.子程序 _保存_被选择, 空白型, , 
保存文件 ()

.子程序 _导出模拟图_被选择, 空白型, , 
模拟图 ()

.子程序 _帮助_被选择, 空白型, , 
.如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\中学电路虚拟实验室使用帮助.chm”)), 假))
    写到文件 (相加 (取运行目录 (), “\中学电路虚拟实验室使用帮助.chm”), #使用帮助)
.如果真结束
未知支持库函数_6 (相加 (取运行目录 (), “\中学电路虚拟实验室使用帮助.chm”), , )

.子程序 _退出_被选择, 空白型, , 
.局部变量 按钮值, 整数型, , , 

.如果 (等于 (修改, 真))
    赋值 (按钮值, 信息框 (“当前实验已经被修改，请问是否保存？”, 相加 (3, 32), “询问：”))
    .判断开始 (等于 (按钮值, #是钮))
        .如果 (等于 (保存文件 (), 真))
            _启动窗口.销毁 ()
        .否则
            返回 ()
        .如果结束
        
    .判断 (等于 (按钮值, #取消钮))
        返回 ()
    .判断 (等于 (按钮值, #否钮))
        _启动窗口.销毁 ()
    .默认
        
    .判断结束
    
.否则
    _启动窗口.销毁 ()
.如果结束


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
.局部变量 按钮值, 整数型, , , 

.如果 (等于 (修改, 真))
    赋值 (按钮值, 信息框 (“当前实验已经被修改，请问是否保存？”, 相加 (3, 32), “询问：”))
    .判断开始 (等于 (按钮值, #是钮))
        .如果 (等于 (保存文件 (), 真))
            返回 (真)
        .否则
            返回 (假)
        .如果结束
        
    .判断 (等于 (按钮值, #取消钮))
        返回 (假)
    .判断 (等于 (按钮值, #否钮))
        返回 (真)
    .默认
        
    .判断结束
    
.否则
    返回 (真)
.如果结束


.子程序 __启动窗口_将被销毁, 空白型, , 
.局部变量 变量1, 整数型, , , 

.计次循环首 (25, 变量1)
    卸载图片 (图片号 [变量1])
.计次循环尾 ()

.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [1], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [1], 电机纵位 [1], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)

.子程序 _时钟2_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [2], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
        
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [2], 电机纵位 [2], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)


.子程序 _时钟3_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [3], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [3], 电机纵位 [3], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)


.子程序 _时钟4_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [4], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [4], 电机纵位 [4], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)


.子程序 _时钟5_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [5], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [5], 电机纵位 [5], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)


.子程序 _时钟6_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [6], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [6], 电机纵位 [6], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)


.子程序 _时钟7_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [7], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [7], 电机纵位 [7], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)

.子程序 _时钟8_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [8], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [8], 电机纵位 [8], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)

.子程序 _时钟9_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [9], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [9], 电机纵位 [9], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)

.子程序 _时钟10_周期事件, 空白型, , 
.局部变量 变量1, 整数型, 静态, , 

赋值 (变量1, 相加 (变量1, 1))
.如果真 (大于 (变量1, 3))
    赋值 (变量1, 0)
.如果真结束
.如果 (等于 (正向转动 [10], 真)) ' 更换电动机图片显示转动交果
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [14], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [15], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [16], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [17], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (变量1, 1))
        图片号.画图片 ( [17], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 2))
        图片号.画图片 ( [16], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 3))
        图片号.画图片 ( [15], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .判断 (等于 (变量1, 0))
        图片号.画图片 ( [14], 电机横位 [10], 电机纵位 [10], 77, 68, 负 (取颜色值 (255, 255, 255)))
    .默认
        
    .判断结束
    
.如果结束
.复制 (5)

.子程序 _画板1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 变量1, 整数型, , , 
.局部变量 空电机, 整数型, , , 首个未被占用的电机位置
.局部变量 元件编号, 整数型, , , 
.局部变量 元件类别, 整数型, 静态, , 
.局部变量 元件名称, 文本型, 静态, , 
.局部变量 元件状态, 整数型, 静态, , 
.局部变量 元件横位, 整数型, 静态, , 
.局部变量 元件纵位, 整数型, 静态, , 
.局部变量 元件电压, 双精度小数型, 静态, , 
.局部变量 元件电阻, 双精度小数型, 静态, , 
.局部变量 最小电阻, 双精度小数型, 静态, , 
.局部变量 最大电阻, 双精度小数型, 静态, , 
.局部变量 额定电压, 双精度小数型, 静态, , 
.局部变量 额定电流, 双精度小数型, 静态, , 
.局部变量 编号元件存在, 逻辑型, , , 

赋值 (横坐标, 横向位置)
赋值 (纵坐标, 纵向位置)
判断当前状态 ()
 ' 图片大小统一为77X68像素，画图片时在鼠标的 （横向位置 － 38 ） （纵向位置 － 34）分别为图片的左上角横坐标和纵坐标
.判断开始 (等于 (画元件, 1)) ' 电源
    .如果 (等于 (分类最大计数 [1], 0))
        赋值 (.标题, “”)
        赋值 (分类最大计数 [1], 相加 (分类最大计数 [1], 1))
        图片号.画图片 ( [1], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
        新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电源”, 到文本 (分类最大计数 [1])), 1)
        赋值 (当前元件编号, 分类最大计数 [1])
        .如果 (不等于 (寻找文本 (过程操作文本, “⊙”, 1, 真), -1)) ' 有导线
            赋值 (.内容, “提示：电源没有形成回路。”)
        .否则
            赋值 (.内容, “”)
        .如果结束
        判断当前状态 ()
    .否则
        延时 (200)
        .如果真 (等于 (信息框 (相加 (“本程序处理电路较为复杂，现仅支持含一个电源的电路形式，”, #换行符, “以后计划再升级为支持任意数量的任意元件。见谅！”), 相加 (0, 64), “提示：”), 0))
            判断当前状态 () ' 画元件 ＝ 0
            返回 ()
        .如果真结束
        
    .如果结束
    
.判断 (等于 (画元件, 2)) ' 开关
    赋值 (分类最大计数 [2], 相加 (分类最大计数 [2], 1))
    赋值 (.标题, “  双击可以改变开关的开合状态”)
    图片号.画图片 ( [2], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“开关”, 到文本 (分类最大计数 [2])), 2)
    赋值 (当前元件编号, 分类最大计数 [2])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 3)) ' 电灯
    赋值 (.标题, “  电压≤1/3额定电压不亮，＞1/3且≤2/3额定电压低亮，＞2/3且≤1额定电压明亮，＞1额定电压损坏。”)
    赋值 (分类最大计数 [3], 相加 (分类最大计数 [3], 1))
    图片号.画图片 ( [4], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电灯”, 到文本 (分类最大计数 [3])), 3)
    赋值 (当前元件编号, 分类最大计数 [3])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 4)) ' 电阻
    赋值 (.标题, “”)
    赋值 (分类最大计数 [4], 相加 (分类最大计数 [4], 1))
    图片号.画图片 ( [8], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电阻”, 到文本 (分类最大计数 [4])), 4)
    赋值 (当前元件编号, 分类最大计数 [4])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 5)) ' 变阻器
    赋值 (分类最大计数 [5], 相加 (分类最大计数 [5], 1))
    赋值 (.标题, “  在动触头的轨迹上点击可改变动触头位置”)
    图片号.画图片 ( [11], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“变阻器”, 到文本 (分类最大计数 [5])), 5)
    赋值 (当前元件编号, 分类最大计数 [5])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 6)) ' 电动机
    赋值 (空电机, 0)
    .计次循环首 (10, 变量1)
        .如果真 (等于 (电机数组 [变量1], “”))
            赋值 (空电机, 变量1)
        .如果真结束
        
    .计次循环尾 ()
    .如果 (大于 (空电机, 0))
        赋值 (分类最大计数 [6], 相加 (分类最大计数 [6], 1))
        赋值 (.标题, 相加 (“  正向电流顺时针转，负向电流反时针转。”, #换行符, #换行符, “  电压≤1/3额定电压不转，＞1/3且≤2/3额定电压慢转，＞2/3且≤1额定电压快转，＞1额定电压高速转。”))
        图片号.画图片 ( [14], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
        新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电动机”, 到文本 (分类最大计数 [6])), 6)
        赋值 (电机数组 [空电机], 相加 (“电动机”, 到文本 (分类最大计数 [6])))
        赋值 (当前元件编号, 分类最大计数 [6])
        判断当前状态 () ' 画元件 ＝ 0
        
    .否则
        延时 (200)
        .如果真 (等于 (信息框 (相加 (“本程序为体验版，最多允许加入10个电动机，”, #换行符, “升级后将支持任意数量的任意元件。”), 相加 (0, 64), “提示：”), 0))
            赋值 (画元件, 0)
            判断当前状态 () ' 画元件 ＝ 0
            返回 ()
        .如果真结束
        
    .如果结束
    
.判断 (等于 (画元件, 7)) ' 电流器
    赋值 (.标题, “”)
    赋值 (分类最大计数 [7], 相加 (分类最大计数 [7], 1))
    图片号.画图片 ( [18], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电流器”, 到文本 (分类最大计数 [7])), 7)
    赋值 (当前元件编号, 分类最大计数 [7])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 8)) ' 电压器
    赋值 (.标题, “”)
    赋值 (分类最大计数 [8], 相加 (分类最大计数 [8], 1))
    图片号.画图片 ( [22], 相减 (横向位置, 38), 相减 (纵向位置, 34), 77, 68, 负 (取颜色值 (255, 255, 255)))
    新建元件 (相减 (横向位置, 38), 相减 (纵向位置, 34), 相加 (“电压器”, 到文本 (分类最大计数 [8])), 8)
    赋值 (当前元件编号, 分类最大计数 [8])
    判断当前状态 () ' 画元件 ＝ 0
.判断 (等于 (画元件, 9)) ' 画导线
     ' 以  元件名称 ＋ “∧”  方式命名元件的左侧电极或正极电极，以  元件名称 ＋ “∨”  方式命名元件的右侧电极或负极电极,在名称文本操作时当作特殊标记
    .如果真 (大于 (当前最大编号, 0))
        .计次循环首 (当前最大编号, 变量1)
            赋值 (编号元件存在, 根据编号取元件参数 (变量1, 元件横位, 元件纵位, 元件名称, 元件类别, 元件状态, 元件电压, 元件电阻, 最小电阻, 最大电阻, 额定电压, 额定电流))
            .如果真 (等于 (编号元件存在, 假))
                到循环尾 ()
            .如果真结束
            
            .判断开始 (等于 (元件类别, 1)) ' 电源
                 ' (26,6)(48,6)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 12)), 小于或等于 (横向位置, 相加 (元件横位, 40)), 大于或等于 (纵向位置, 相减 (元件纵位, 8)), 小于或等于 (纵向位置, 相加 (元件纵位, 20)))) ' 电源左侧接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电源”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, 到文本 (元件电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 26), 相加 (元件纵位, 6)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”)) ' 电源左侧接线柱
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 26)), “|”, 到文本 (相加 (元件纵位, 6)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 26), 相加 (元件纵位, 6))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 26), 相加 (元件纵位, 6))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 34)), 小于或等于 (横向位置, 相加 (元件横位, 62)), 大于或等于 (纵向位置, 相减 (元件纵位, 8)), 小于或等于 (纵向位置, 相加 (元件纵位, 20)))) ' 电源右侧接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电源”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, 到文本 (元件电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 48), 相加 (元件纵位, 6)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”)) ' 电源右侧接线柱
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 48)), “|”, 到文本 (相加 (元件纵位, 6)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 48), 相加 (元件纵位, 6)) ' 结束画线
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 48), 相加 (元件纵位, 6))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 2)) ' 开关
                 ' (16,54)(62,52)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 2)), 小于或等于 (横向位置, 相加 (元件横位, 30)), 大于或等于 (纵向位置, 相加 (元件纵位, 40)), 小于或等于 (纵向位置, 相加 (元件纵位, 68)))) ' 左侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  双击可以改变开关的开合状态”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “开关”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 16), 相加 (元件纵位, 54)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 16)), “|”, 到文本 (相加 (元件纵位, 54)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 16), 相加 (元件纵位, 54))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 16), 相加 (元件纵位, 54)) ' 结束画线
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 48)), 小于或等于 (横向位置, 相加 (元件横位, 76)), 大于或等于 (纵向位置, 相加 (元件纵位, 38)), 小于或等于 (纵向位置, 相加 (元件纵位, 66)))) ' 右侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  双击可以改变开关的开合状态”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “开关”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 62), 相加 (元件纵位, 52)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 62)), “|”, 到文本 (相加 (元件纵位, 52)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 62), 相加 (元件纵位, 52))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 62), 相加 (元件纵位, 52)) ' 结束画线
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 3)) ' 电灯
                 ' (16,54)(62,52)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 2)), 小于或等于 (横向位置, 相加 (元件横位, 30)), 大于或等于 (纵向位置, 相加 (元件纵位, 40)), 小于或等于 (纵向位置, 相加 (元件纵位, 68)))) ' 左侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  电压≤1/3额定电压不亮，＞1/3且≤2/3额定电压低亮，＞2/3且≤1额定电压明亮，＞1额定电压损坏。”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电灯”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 16), 相加 (元件纵位, 54)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 16)), “|”, 到文本 (相加 (元件纵位, 54)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 16), 相加 (元件纵位, 54))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 16), 相加 (元件纵位, 54))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 48)), 小于或等于 (横向位置, 相加 (元件横位, 76)), 大于或等于 (纵向位置, 相加 (元件纵位, 38)), 小于或等于 (纵向位置, 相加 (元件纵位, 66)))) ' 右侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  电压≤1/3额定电压不亮，＞1/3且≤2/3额定电压低亮，＞2/3且≤1额定电压明亮，＞1额定电压损坏。”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电灯”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 62), 相加 (元件纵位, 52)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 62)), “|”, 到文本 (相加 (元件纵位, 52)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 62), 相加 (元件纵位, 52))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 62), 相加 (元件纵位, 52))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 4)) ' 电阻
                 ' (4,34)(72,34)
                .判断开始 (并且 (大于或等于 (横向位置, 相减 (元件横位, 10)), 小于或等于 (横向位置, 相加 (元件横位, 18)), 大于或等于 (纵向位置, 相加 (元件纵位, 20)), 小于或等于 (纵向位置, 相加 (元件纵位, 48)))) ' 左侧接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电阻”)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 4), 相加 (元件纵位, 34)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 4)), “|”, 到文本 (相加 (元件纵位, 34)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 4), 相加 (元件纵位, 34))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 4), 相加 (元件纵位, 34))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 58)), 小于或等于 (横向位置, 相加 (元件横位, 86)), 大于或等于 (纵向位置, 相加 (元件纵位, 20)), 小于或等于 (纵向位置, 相加 (元件纵位, 48)))) ' 右侧接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电阻”)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 72), 相加 (元件纵位, 34)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 72)), “|”, 到文本 (相加 (元件纵位, 34)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 72), 相加 (元件纵位, 34))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 72), 相加 (元件纵位, 34))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 5)) ' 变阻器
                 ' (22,32)(72,20)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 8)), 小于或等于 (横向位置, 相加 (元件横位, 36)), 大于或等于 (纵向位置, 相加 (元件纵位, 18)), 小于或等于 (纵向位置, 相加 (元件纵位, 46)))) ' 左侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  在动触头的轨迹上点击可改变动触头位置”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “变阻器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (最小电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, 到文本 (最大电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 22), 相加 (元件纵位, 32)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 22)), “|”, 到文本 (相加 (元件纵位, 32)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 22), 相加 (元件纵位, 32))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 22), 相加 (元件纵位, 32))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 58)), 小于或等于 (横向位置, 相加 (元件横位, 86)), 大于或等于 (纵向位置, 相加 (元件纵位, 6)), 小于或等于 (纵向位置, 相加 (元件纵位, 34)))) ' 右侧接线柱的位置（单位：像素）
                    赋值 (.标题, “  在动触头的轨迹上点击可改变动触头位置”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “变阻器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (最小电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, 到文本 (最大电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 72), 相加 (元件纵位, 20)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 72)), “|”, 到文本 (相加 (元件纵位, 20)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 72), 相加 (元件纵位, 20))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 72), 相加 (元件纵位, 20))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 6)) ' 电动机
                 ' (18,8)(40,0)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 4)), 小于或等于 (横向位置, 相加 (元件横位, 32)), 大于或等于 (纵向位置, 相减 (元件纵位, 6)), 小于或等于 (纵向位置, 相加 (元件纵位, 22)))) ' 左侧接线柱的位置（单位：像素）
                    赋值 (.标题, 相加 (“  正向电流顺时针转，负向电流反时针转。”, #换行符, #换行符, “  电压≤1/3额定电压不转，＞1/3且≤2/3额定电压慢转，＞2/3且≤1额定电压快转，＞1额定电压高速转。”))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电动机”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 8)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 18)), “|”, 到文本 (相加 (元件纵位, 8)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 8))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 18), 相加 (元件纵位, 8))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 26)), 小于或等于 (横向位置, 相加 (元件横位, 54)), 大于或等于 (纵向位置, 相减 (元件纵位, 14)), 小于或等于 (纵向位置, 相加 (元件纵位, 14)))) ' 右侧接线柱的位置（单位：像素）
                    赋值 (.标题, 相加 (“  正向电流顺时针转，负向电流反时针转。”, #换行符, #换行符, “  电压≤1/3额定电压不转，＞1/3且≤2/3额定电压慢转，＞2/3且≤1额定电压快转，＞1额定电压高速转。”))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电动机”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 40), 元件纵位) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 40)), “|”, 到文本 (元件纵位), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 40), 元件纵位)
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 40), 元件纵位)
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 7)) ' 电流器
                 ' (18,48)(44,48)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 4)), 小于或等于 (横向位置, 相加 (元件横位, 32)), 大于或等于 (纵向位置, 相加 (元件纵位, 34)), 小于或等于 (纵向位置, 相加 (元件纵位, 62)))) ' 负极接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电流器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电流))
                    赋值 (.禁止, 假)
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 48)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 18)), “|”, 到文本 (相加 (元件纵位, 48)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 48))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 18), 相加 (元件纵位, 48))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 30)), 小于或等于 (横向位置, 相加 (元件横位, 58)), 大于或等于 (纵向位置, 相加 (元件纵位, 34)), 小于或等于 (纵向位置, 相加 (元件纵位, 62)))) ' 正极接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电流器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电流))
                    赋值 (.禁止, 假)
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 44), 相加 (元件纵位, 48)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 44)), “|”, 到文本 (相加 (元件纵位, 48)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 44), 相加 (元件纵位, 48))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 44), 相加 (元件纵位, 48))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .判断 (等于 (元件类别, 8)) ' 电压器
                 ' (18,48)(44,48)
                .判断开始 (并且 (大于或等于 (横向位置, 相加 (元件横位, 4)), 小于或等于 (横向位置, 相加 (元件横位, 32)), 大于或等于 (纵向位置, 相加 (元件纵位, 34)), 小于或等于 (纵向位置, 相加 (元件纵位, 62)))) ' 负极接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电压器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “∞”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 48)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∨”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 18)), “|”, 到文本 (相加 (元件纵位, 48)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 18), 相加 (元件纵位, 48))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∨”), 相加 (元件横位, 18), 相加 (元件纵位, 48))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .判断 (并且 (大于或等于 (横向位置, 相加 (元件横位, 30)), 小于或等于 (横向位置, 相加 (元件横位, 58)), 大于或等于 (纵向位置, 相加 (元件纵位, 34)), 小于或等于 (纵向位置, 相加 (元件纵位, 62)))) ' 正极接线柱的位置（单位：像素）
                    赋值 (.标题, “”)
                    赋值 (当前元件编号, 变量1)
                    赋值 (.内容, “电压器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “∞”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                    .如果 (等于 (画线, 假))
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 44), 相加 (元件纵位, 48)) ' 开始画线
                        赋值 (画线, 真)
                        赋值 (接头, 相加 (元件名称, “∧”))
                        赋值 (线段, 相加 (到文本 (相加 (元件横位, 44)), “|”, 到文本 (相加 (元件纵位, 48)), “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置)))
                    .否则
                        横坐标.画直线 (纵坐标, 相加 (元件横位, 44), 相加 (元件纵位, 48))
                        赋值 (画线, 假)
                        判断当前状态 () ' 画元件 ＝ 0
                        记录画线 (相加 (元件名称, “∧”), 相加 (元件横位, 44), 相加 (元件纵位, 48))
                    .如果结束
                    .复制 (5)
                    跳出循环 ()
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .计次循环尾 ()
        返回 ()
    .如果真结束
    
.判断 (并且 (等于 (画元件, 0), 等于 (画线, 假))) ' 一般性点击元件
    赋值 (成功移除, 假)
    .计次循环首 (当前最大编号, 变量1)
        赋值 (编号元件存在, 根据编号取元件参数 (变量1, 元件横位, 元件纵位, 元件名称, 元件类别, 元件状态, 元件电压, 元件电阻, 最小电阻, 最大电阻, 额定电压, 额定电流))
        .如果真 (等于 (编号元件存在, 假))
            到循环尾 ()
        .如果真结束
        
        .如果真 (并且 (大于或等于 (横向位置, 元件横位), 小于或等于 (横向位置, 相加 (元件横位, 77)), 大于或等于 (纵向位置, 元件纵位), 小于或等于 (纵向位置, 相加 (元件纵位, 68))))
            .如果 (等于 (移除, 真)) ' 在这里删除器件
                清除元件及其相连导线 (变量1, 元件名称, 元件类别) ' 鼠标处有元件 首选删除元件及与之相连的导线
                
            .否则
                .判断开始 (等于 (元件类别, 1))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “”)
                    赋值 (.内容, “电源”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, 到文本 (元件电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                .判断 (等于 (元件类别, 2))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “  双击可以改变开关的开合状态”)
                    赋值 (.内容, “开关”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                .判断 (等于 (元件类别, 3))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “  电压≤1/3额定电压不亮，＞1/3且≤2/3额定电压低亮，＞2/3且≤1额定电压明亮，＞1额定电压损坏。”)
                    赋值 (.内容, “电灯”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                .判断 (等于 (元件类别, 4))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “”)
                    赋值 (.内容, “电阻”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                .判断 (等于 (元件类别, 5))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “  在动触头的轨迹上点击可改变动触头位置”)
                    赋值 (.内容, “变阻器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (最小电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, 到文本 (最大电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                     ' 移动变阻器动触头滑块
                    .判断开始 (并且 (等于 (移动, 假), 不等于 (元件状态, 0), 大于 (横向位置, 元件横位), 小于或等于 (横向位置, 相加 (元件横位, 30)), 大于或等于 (纵向位置, 相加 (元件纵位, 12)), 小于或等于 (纵向位置, 相加 (元件纵位, 33)))) ' 变阻器动触头0位置
                        元件横位.清除 (元件纵位, 77, 68)
                        图片号.画图片 ( [9], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                        修改元件参数 (变量1, “元件状态”, “0”, “元件电阻”, .内容)
                        .复制 (5)
                        赋值 (.内容, .内容)
                        
                    .判断 (并且 (等于 (移动, 假), 不等于 (元件状态, 1), 大于 (横向位置, 相加 (元件横位, 30)), 小于或等于 (横向位置, 相加 (元件横位, 37)), 大于或等于 (纵向位置, 相加 (元件纵位, 12)), 小于或等于 (纵向位置, 相加 (元件纵位, 33)))) ' 变阻器动触头位置1
                        元件横位.清除 (元件纵位, 77, 68)
                        图片号.画图片 ( [10], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                        修改元件参数 (变量1, “元件状态”, “1”, “元件电阻”, 到文本 (相加 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 到数值 (.内容))))
                        .复制 (5)
                        赋值 (.内容, 到文本 (相加 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 到数值 (.内容))))
                        
                    .判断 (并且 (等于 (移动, 假), 不等于 (元件状态, 2), 大于 (横向位置, 相加 (元件横位, 37)), 小于或等于 (横向位置, 相加 (元件横位, 44)), 大于或等于 (纵向位置, 相加 (元件纵位, 12)), 小于或等于 (纵向位置, 相加 (元件纵位, 33)))) ' 变阻器动触头位置2
                        元件横位.清除 (元件纵位, 77, 68)
                        图片号.画图片 ( [11], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                        修改元件参数 (变量1, “元件状态”, “2”, “元件电阻”, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 2), 到数值 (.内容))))
                        .复制 (5)
                        赋值 (.内容, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 2), 到数值 (.内容))))
                        
                    .判断 (并且 (等于 (移动, 假), 不等于 (元件状态, 3), 大于 (横向位置, 相加 (元件横位, 44)), 小于或等于 (横向位置, 相加 (元件横位, 51)), 大于或等于 (纵向位置, 相加 (元件纵位, 12)), 小于或等于 (纵向位置, 相加 (元件纵位, 33)))) ' 变阻器动触头位置3
                        元件横位.清除 (元件纵位, 77, 68)
                        图片号.画图片 ( [12], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                        修改元件参数 (变量1, “元件状态”, “3”, “元件电阻”, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 3), 到数值 (.内容))))
                        .复制 (5)
                        赋值 (.内容, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 3), 到数值 (.内容))))
                        
                    .判断 (并且 (等于 (移动, 假), 不等于 (元件状态, 4), 大于 (横向位置, 相加 (元件横位, 51)), 小于或等于 (横向位置, 相加 (元件横位, 77)), 大于或等于 (纵向位置, 相加 (元件纵位, 12)), 小于或等于 (纵向位置, 相加 (元件纵位, 33)))) ' 变阻器动触头位置4
                        元件横位.清除 (元件纵位, 77, 68)
                        图片号.画图片 ( [13], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                        修改元件参数 (变量1, “元件状态”, “4”, “元件电阻”, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 4), 到数值 (.内容))))
                        .复制 (5)
                        赋值 (.内容, 到文本 (相加 (相乘 (相除 (相减 (到数值 (.内容), 到数值 (.内容)), 4), 4), 到数值 (.内容))))
                        
                    .默认
                        
                    .判断结束
                    
                .判断 (等于 (元件类别, 6))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, 相加 (“  正向电流顺时针转，负向电流反时针转。”, #换行符, #换行符, “  电压≤1/3额定电压不转，＞1/3且≤2/3额定电压慢转，＞2/3且≤1额定电压快转，＞1额定电压高速转。”))
                    赋值 (.内容, “电动机”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (元件电阻))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    
                .判断 (等于 (元件类别, 7))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “”)
                    赋值 (.内容, “电流器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “0”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电流))
                    赋值 (.禁止, 假)
                .判断 (等于 (元件类别, 8))
                    赋值 (当前元件编号, 变量1)
                    赋值 (.标题, “”)
                    赋值 (.内容, “电压器”)
                    赋值 (.内容, 元件名称)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “∞”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                    赋值 (.内容, 到文本 (额定电压))
                    赋值 (.禁止, 假)
                    赋值 (.内容, “”)
                    赋值 (.禁止, 真)
                .默认
                    
                .判断结束
                .如果真 (等于 (移动, 真))
                    赋值 (选元件, 真)
                    赋值 (横位差, 相减 (横向位置, 元件横位))
                    赋值 (纵位差, 相减 (纵向位置, 元件纵位))
                    赋值 (初横位, 横向位置)
                    赋值 (初纵位, 纵向位置)
                    赋值 (.鼠标指针, 到字节集 (8))
                    清除数组 (差移线段组)
                    清除数组 (等移线段组)
                    调整线段走向并提取线段 (元件名称, 差移线段组, 等移线段组)
                .如果真结束
                
            .如果结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (并且 (等于 (移除, 真), 等于 (成功移除, 假))) ' 经过以上循环，如果鼠标处有元件，元件会被删除，“成功移除”会变为真。现“成功移除”为假，说明鼠标处没有元件，就进入次选择――删除导线
        清除鼠标处导线 (横向位置, 纵向位置)
    .如果真结束
    
.默认
    
.判断结束


.子程序 调整线段走向并提取线段, 空白型, , 
.参数 元件名称, 文本型, , 
.参数 差移线段数组, 文本型, 参考 数组, 
.参数 等移线段数组, 文本型, 参考 数组, 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 接头位置, 整数型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 路径长度, 整数型, , , 
.局部变量 路径始位置, 整数型, , , 
.局部变量 路径末下一位置, 整数型, , , 
.局部变量 坐标数组, 文本型, , "0", 
.局部变量 坐标数, 整数型, , , 
.局部变量 另元件接头名, 文本型, , , 
.局部变量 另元件名称, 文本型, , , 
.局部变量 另元件始位, 整数型, , , 
.局部变量 另元件末位, 空白型, , , 

 ' 目的是将从元件出发的线记录下来，并把走向元件的线改为从元件出发的线再记录下来

赋值 (变量1, 0)
.判断循环首 (不等于 (变量1, -1)) ' 导线方向是从此元件∧端出发的，所以不对调方向
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (接头位置, 寻找文本 (过程操作文本, 相加 (“⊙”, 元件名称, “∧|”), 变量1, 假))
    .如果 (不等于 (接头位置, -1))
        赋值 (另元件始位, 相加 (寻找文本 (过程操作文本, “|”, 接头位置, 假), 1))
        赋值 (另元件末位, 寻找文本 (过程操作文本, “¤”, 接头位置, 假))
        赋值 (另元件接头名, 取文本中间 (过程操作文本, 另元件始位, 相减 (另元件末位, 另元件始位)))
        赋值 (另元件名称, 取文本左边 (另元件接头名, 相减 (取文本长度 (另元件接头名), 2)))
        
        赋值 (路径末下一位置, 寻找文本 (过程操作文本, “‖”, 接头位置, 假))
        赋值 (路径长度, 相减 (路径末下一位置, 接头位置))
        赋值 (路径, 取文本中间 (过程操作文本, 接头位置, 路径长度))
        
        
        .如果 (不等于 (另元件名称, 元件名称)) ' 线段的两端不在同一元件上
            加入成员 (差移线段数组, 路径)
            
        .否则
            加入成员 (等移线段数组, 路径)
        .如果结束
        赋值 (变量1, 接头位置)
        
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()


赋值 (变量1, 0)
.判断循环首 (不等于 (变量1, -1)) ' 导线方向是走向此元件∧端，对调方向
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (接头位置, 寻找文本 (过程操作文本, 相加 (“|”, 元件名称, “∧¤”), 变量1, 假))
    .如果 (不等于 (接头位置, -1))
        赋值 (另元件始位, 相加 (倒找文本 (过程操作文本, “⊙”, 接头位置, 假), 2)) ' 分离出导线端点名称
        赋值 (另元件接头名, 取文本中间 (过程操作文本, 另元件始位, 相减 (接头位置, 另元件始位)))
        赋值 (另元件名称, 取文本左边 (另元件接头名, 相减 (取文本长度 (另元件接头名), 2)))
        
        .如果真 (不等于 (另元件名称, 元件名称)) ' 线段的两端不在同一元件上
            赋值 (路径始位置, 相加 (寻找文本 (过程操作文本, “¤”, 接头位置, 假), 2)) ' 分离出导线路径坐标点阵
            赋值 (路径末下一位置, 寻找文本 (过程操作文本, “‖”, 路径始位置, 假))
            赋值 (路径长度, 相减 (路径末下一位置, 路径始位置))
            赋值 (路径, 取文本中间 (过程操作文本, 路径始位置, 路径长度))
            
            赋值 (坐标数组, 分割文本 (路径, “┇”, ))
            赋值 (坐标数, 取数组成员数 (坐标数组))
            .如果真 (大于 (坐标数, 0))
                赋值 (路径, “”)
                .变量循环首 (坐标数, 1, -1, 变量2) ' 对调路导线走向
                    .如果 (等于 (路径, “”))
                        赋值 (路径, 坐标数组 [变量2])
                    .否则
                        赋值 (路径, 相加 (路径, “┇”, 坐标数组 [变量2]))
                    .如果结束
                    
                .变量循环尾 ()
                赋值 (路径, 相加 (“⊙”, 元件名称, “∧|”, 另元件接头名, “¤”, 路径)) ' 对调接头方向(把尾接头改为首接头）
                加入成员 (差移线段数组, 路径)
                赋值 (过程操作文本, 文本替换 (过程操作文本, 相减 (另元件始位, 2), 取文本长度 (路径), 路径))
            .如果真结束
            
        .如果真结束
        赋值 (变量1, 接头位置)
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()


赋值 (变量1, 0)
.判断循环首 (不等于 (变量1, -1)) ' 导线方向是从此元件∨端出发的，所以不对调方向
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (接头位置, 寻找文本 (过程操作文本, 相加 (“⊙”, 元件名称, “∨|”), 变量1, 假))
    .如果 (不等于 (接头位置, -1))
        赋值 (另元件始位, 相加 (寻找文本 (过程操作文本, “|”, 接头位置, 假), 1))
        赋值 (另元件末位, 寻找文本 (过程操作文本, “¤”, 接头位置, 假))
        赋值 (另元件接头名, 取文本中间 (过程操作文本, 另元件始位, 相减 (另元件末位, 另元件始位)))
        赋值 (另元件名称, 取文本左边 (另元件接头名, 相减 (取文本长度 (另元件接头名), 2)))
        
        赋值 (路径末下一位置, 寻找文本 (过程操作文本, “‖”, 接头位置, 假))
        赋值 (路径长度, 相减 (路径末下一位置, 接头位置))
        赋值 (路径, 取文本中间 (过程操作文本, 接头位置, 路径长度))
        
        .如果 (不等于 (另元件名称, 元件名称)) ' 线段的两端不在同一元件上
            加入成员 (差移线段数组, 路径)
            
        .否则
            加入成员 (等移线段数组, 路径)
        .如果结束
        赋值 (变量1, 接头位置)
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()


赋值 (变量1, 0)
.判断循环首 (不等于 (变量1, -1)) ' 导线方向是走向此元件∨端，对调方向
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (接头位置, 寻找文本 (过程操作文本, 相加 (“|”, 元件名称, “∨¤”), 变量1, 假))
    .如果 (不等于 (接头位置, -1))
        赋值 (另元件始位, 相加 (倒找文本 (过程操作文本, “⊙”, 接头位置, 假), 2)) ' 分离出导线端点名称
        赋值 (另元件接头名, 取文本中间 (过程操作文本, 另元件始位, 相减 (接头位置, 另元件始位)))
        赋值 (另元件名称, 取文本左边 (另元件接头名, 相减 (取文本长度 (另元件接头名), 2)))
        .如果真 (不等于 (另元件名称, 元件名称)) ' 线段的两端不在同一元件上
            赋值 (路径始位置, 相加 (寻找文本 (过程操作文本, “¤”, 接头位置, 假), 2)) ' 分离出导线路径坐标点阵
            赋值 (路径末下一位置, 寻找文本 (过程操作文本, “‖”, 路径始位置, 假))
            赋值 (路径长度, 相减 (路径末下一位置, 路径始位置))
            赋值 (路径, 取文本中间 (过程操作文本, 路径始位置, 路径长度))
            
            赋值 (坐标数组, 分割文本 (路径, “┇”, ))
            赋值 (坐标数, 取数组成员数 (坐标数组))
            赋值 (路径, “”)
            .如果真 (大于 (坐标数, 0))
                .变量循环首 (坐标数, 1, -1, 变量2) ' 对调路导线走向
                    .如果 (等于 (路径, “”))
                        赋值 (路径, 坐标数组 [变量2])
                    .否则
                        赋值 (路径, 相加 (路径, “┇”, 坐标数组 [变量2]))
                    .如果结束
                    
                .变量循环尾 ()
                赋值 (路径, 相加 (“⊙”, 元件名称, “∨|”, 另元件接头名, “¤”, 路径)) ' 对调接头方向(把尾接头改为首接头）
                加入成员 (差移线段数组, 路径)
                赋值 (过程操作文本, 文本替换 (过程操作文本, 相减 (另元件始位, 2), 取文本长度 (路径), 路径))
            .如果真结束
            
        .如果真结束
        赋值 (变量1, 接头位置)
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()



.子程序 _画板1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 接头信息段, 文本型, , , 
.局部变量 导线信息段, 文本型, , , 
.局部变量 坐标段数组, 文本型, , "0", 
.局部变量 坐标段数, 整数型, , , 
.局部变量 坐标数组, 文本型, , "0", 
.局部变量 匿名局部变量_10621, 空白型, , , 
.局部变量 横移距离, 整数型, , , 
.局部变量 纵移距离, 整数型, , , 
.局部变量 匿名局部变量_10624, 空白型, , , 
.局部变量 改横位差, 整数型, , , 
.局部变量 改纵位差, 整数型, , , 
.局部变量 匿名局部变量_10627, 空白型, , , 
.局部变量 新线段, 文本型, , , 
.局部变量 原线段始位置, 整数型, , , 
.局部变量 原线段末下一位置, 整数型, , , 
.局部变量 匿名局部变量_10631, 空白型, , , 
.局部变量 差移线段数, 整数型, , , 
.局部变量 等移线段数, 整数型, , , 

.判断开始 (等于 (画线, 真)) ' 画导线
    横坐标.画直线 (纵坐标, 横向位置, 纵向位置)
    赋值 (线段, 相加 (线段, “┇”, 到文本 (横向位置), “|”, 到文本 (纵向位置))) ' 以这种编码方式记录画线的每个像素点位置
    .复制 (5)
    赋值 (横坐标, 横向位置)
    赋值 (纵坐标, 纵向位置)
    
.判断 (并且 (等于 (移动, 真), 等于 (选元件, 真))) ' 移动元件
     ' 禁止元件移出画板外    ( 横向位置 － 横位差：元件图片左边     纵向位置 － 纵位差：元件图片顶边 )
    .判断开始 (等于 (.内容, “电源”))
        .如果真 (小于或等于 (相减 (横向位置, 横位差), -9))
            赋值 (横向位置, 相减 (横位差, 9))
        .如果真结束
        .如果真 (大于或等于 (相减 (横向位置, 横位差), 相减 (.宽度, 71)))
            赋值 (横向位置, 相减 (相加 (.宽度, 横位差), 71))
        .如果真结束
        .如果真 (小于或等于 (相减 (纵向位置, 纵位差), 6))
            赋值 (纵向位置, 相加 (纵位差, 6))
        .如果真结束
        .如果真 (大于或等于 (相减 (纵向位置, 纵位差), 相减 (.高度, 75)))
            赋值 (纵向位置, 相减 (相加 (纵位差, .高度), 75))
        .如果真结束
        
    .判断 (或者 (等于 (.内容, “开关”), 等于 (.内容, “电灯”)))
        .如果真 (小于或等于 (相减 (横向位置, 横位差), -2))
            赋值 (横向位置, 相减 (横位差, 2))
        .如果真结束
        .如果真 (大于或等于 (相减 (横向位置, 横位差), 相减 (.宽度, 78)))
            赋值 (横向位置, 相减 (相加 (.宽度, 横位差), 78))
        .如果真结束
        .如果真 (小于或等于 (相减 (纵向位置, 纵位差), 0))
            赋值 (纵向位置, 纵位差)
        .如果真结束
        .如果真 (大于或等于 (相减 (纵向位置, 纵位差), 相减 (.高度, 70)))
            赋值 (纵向位置, 相减 (相加 (纵位差, .高度), 70))
        .如果真结束
        
    .判断 (等于 (.内容, “电阻”))
        .如果真 (小于或等于 (相减 (横向位置, 横位差), 5))
            赋值 (横向位置, 相加 (横位差, 5))
        .如果真结束
        .如果真 (大于或等于 (相减 (横向位置, 横位差), 相减 (.宽度, 85)))
            赋值 (横向位置, 相减 (相加 (.宽度, 横位差), 85))
        .如果真结束
        .如果真 (小于或等于 (相减 (纵向位置, 纵位差), -10))
            赋值 (纵向位置, 相减 (纵位差, 10))
        .如果真结束
        .如果真 (大于或等于 (相减 (纵向位置, 纵位差), 相减 (.高度, 60)))
            赋值 (纵向位置, 相减 (相加 (纵位差, .高度), 60))
        .如果真结束
        
    .判断 (等于 (.内容, “变阻器”))
        .如果真 (小于或等于 (相减 (横向位置, 横位差), 5))
            赋值 (横向位置, 相加 (横位差, 5))
        .如果真结束
        .如果真 (大于或等于 (相减 (横向位置, 横位差), 相减 (.宽度, 85)))
            赋值 (横向位置, 相减 (相加 (.宽度, 横位差), 85))
        .如果真结束
        .如果真 (小于或等于 (相减 (纵向位置, 纵位差), -5))
            赋值 (纵向位置, 相减 (纵位差, 5))
        .如果真结束
        .如果真 (大于或等于 (相减 (纵向位置, 纵位差), 相减 (.高度, 62)))
            赋值 (纵向位置, 相减 (相加 (纵位差, .高度), 62))
        .如果真结束
        
    .判断 (或者 (等于 (.内容, “电动机”), 等于 (.内容, “电流器”), 等于 (.内容, “电压器”)))
        .如果真 (小于或等于 (相减 (横向位置, 横位差), 5))
            赋值 (横向位置, 相加 (横位差, 5))
        .如果真结束
        .如果真 (大于或等于 (相减 (横向位置, 横位差), 相减 (.宽度, 85)))
            赋值 (横向位置, 相减 (相加 (.宽度, 横位差), 85))
        .如果真结束
        .如果真 (小于或等于 (相减 (纵向位置, 纵位差), 5))
            赋值 (纵向位置, 相加 (纵位差, 5))
        .如果真结束
        .如果真 (大于或等于 (相减 (纵向位置, 纵位差), 相减 (.高度, 75)))
            赋值 (纵向位置, 相减 (相加 (纵位差, .高度), 75))
        .如果真结束
        
    .默认
        
    .判断结束
    
    赋值 (横移距离, 相减 (横向位置, 初横位))
    赋值 (纵移距离, 相减 (纵向位置, 初纵位))
    赋值 (等移线段数, 取数组成员数 (等移线段组))
    .如果真 (大于 (等移线段数, 0))
        .计次循环首 (等移线段数, 变量1) ' 等移线段（线段各点移动距离相同）
            赋值 (接头信息段, 取文本左边 (等移线段组 [变量1], 相加 (寻找文本 (等移线段组 [变量1], “¤”, 1, 假), 1)))
            赋值 (导线信息段, 取文本右边 (等移线段组 [变量1], 相减 (取文本长度 (等移线段组 [变量1]), 取文本长度 (接头信息段))))
            赋值 (坐标段数组, 分割文本 (导线信息段, “┇”, ))
            赋值 (坐标段数, 取数组成员数 (坐标段数组))
            .计次循环首 (坐标段数, 变量2) ' 修改导线像素点坐标到应移动到的坐标
                赋值 (坐标数组, 分割文本 (坐标段数组 [变量2], “|”, ))
                赋值 (坐标数组 [1], 到文本 (相加 (到数值 (坐标数组 [1]), 横移距离))) ' X
                赋值 (坐标数组 [2], 到文本 (相加 (到数值 (坐标数组 [2]), 纵移距离))) ' Y
                赋值 (坐标段数组 [变量2], 相加 (坐标数组 [1], “|”, 坐标数组 [2]))
            .计次循环尾 ()
            赋值 (导线信息段, “”)
            .计次循环首 (坐标段数, 变量2) ' 重新把改变坐标位置的点阵组成导线新路径
                .如果 (等于 (导线信息段, “”))
                    赋值 (导线信息段, 坐标段数组 [变量2])
                .否则
                    赋值 (导线信息段, 相加 (导线信息段, “┇”, 坐标段数组 [变量2]))
                .如果结束
                
            .计次循环尾 ()
            
            赋值 (新线段, 相加 (接头信息段, 导线信息段))
            赋值 (原线段始位置, 寻找文本 (过程操作文本, 接头信息段, 1, 假))
            赋值 (原线段末下一位置, 寻找文本 (过程操作文本, “‖”, 原线段始位置, 假))
            赋值 (过程操作文本, 文本替换 (过程操作文本, 原线段始位置, 相减 (原线段末下一位置, 原线段始位置), 新线段))
        .计次循环尾 ()
    .如果真结束
    
    赋值 (差移线段数, 取数组成员数 (差移线段组))
    .如果真 (大于 (差移线段数, 0))
        赋值 (变量1, 0)
        赋值 (变量2, 0)
        .计次循环首 (差移线段数, 变量1) ' 差移线段（线段各点移动距离不同）
            赋值 (接头信息段, 取文本左边 (差移线段组 [变量1], 相加 (寻找文本 (差移线段组 [变量1], “¤”, 1, 假), 1)))
            赋值 (导线信息段, 取文本右边 (差移线段组 [变量1], 相减 (取文本长度 (差移线段组 [变量1]), 取文本长度 (接头信息段))))
            赋值 (坐标段数组, 分割文本 (导线信息段, “┇”, ))
            赋值 (坐标段数, 取数组成员数 (坐标段数组))
            .计次循环首 (相减 (坐标段数, 1), 变量2) ' 修改导线像素点坐标到应移动到的坐标，离元件近的移动大，远的移动小（末位不改）
                赋值 (改横位差, 四舍五入 (相除 (相乘 (横移距离, 相加 (相减 (坐标段数, 变量2), 1)), 坐标段数), 0))
                赋值 (改纵位差, 四舍五入 (相除 (相乘 (纵移距离, 相加 (相减 (坐标段数, 变量2), 1)), 坐标段数), 0))
                赋值 (坐标数组, 分割文本 (坐标段数组 [变量2], “|”, ))
                赋值 (坐标数组 [1], 到文本 (相加 (到数值 (坐标数组 [1]), 改横位差))) ' X
                赋值 (坐标数组 [2], 到文本 (相加 (到数值 (坐标数组 [2]), 改纵位差))) ' Y
                赋值 (坐标段数组 [变量2], 相加 (坐标数组 [1], “|”, 坐标数组 [2]))
            .计次循环尾 ()
            赋值 (导线信息段, “”)
            .计次循环首 (坐标段数, 变量2) ' 重新把改变坐标位置的点阵组成导线新路径
                .如果 (等于 (导线信息段, “”))
                    赋值 (导线信息段, 坐标段数组 [变量2])
                .否则
                    赋值 (导线信息段, 相加 (导线信息段, “┇”, 坐标段数组 [变量2]))
                .如果结束
                
            .计次循环尾 ()
            
            赋值 (新线段, 相加 (接头信息段, 导线信息段))
            赋值 (原线段始位置, 寻找文本 (过程操作文本, 接头信息段, 1, 假))
            赋值 (原线段末下一位置, 寻找文本 (过程操作文本, “‖”, 原线段始位置, 假))
            赋值 (过程操作文本, 文本替换 (过程操作文本, 原线段始位置, 相减 (原线段末下一位置, 原线段始位置), 新线段))
        .计次循环尾 ()
        
    .如果真结束
    修改元件参数 (当前元件编号, “元件横位”, 到文本 (相减 (横向位置, 横位差)), “元件纵位”, 到文本 (相减 (纵向位置, 纵位差)))
.默认
    
.判断结束


.子程序 _画板1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 接头甲横位, 整数型, , , 
.局部变量 接头甲纵位, 整数型, , , 
.局部变量 接头乙横位, 整数型, , , 
.局部变量 接头乙纵位, 整数型, , , 

.如果真 (等于 (移动, 真))
    赋值 (移动, 假)
    赋值 (选元件, 假)
.如果真结束


.子程序 _画板1_鼠标右键被按下, 逻辑型, , 鼠标左键画线,如果是右键,就取消画线!
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 


.如果 (并且 (等于 (画线, 真), 等于 (画元件, 9)))
    赋值 (画线, 假)
    赋值 (线段, “”)
    赋值 (接头, “”)
    刷新画板画面 (过程操作文本)
    电路分析 (过程操作文本)
.否则
    选择归位 ()
.如果结束

判断当前状态 ()

.子程序 _画板1_被双击, 逻辑型, , 双击时找是否是开关器件,如果是,那么开关状态改变
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 变量1, 整数型, , , 
.局部变量 元件编号, 整数型, , , 
.局部变量 元件类别, 整数型, 静态, , 
.局部变量 元件名称, 文本型, 静态, , 
.局部变量 元件状态, 整数型, 静态, , 
.局部变量 元件横位, 整数型, 静态, , 
.局部变量 元件纵位, 整数型, 静态, , 
.局部变量 编号元件存在, 逻辑型, , , 

.如果真 (并且 (等于 (画元件, 0), 等于 (.选中, 真)))
    .计次循环首 (当前最大编号, 变量1)
        赋值 (编号元件存在, 根据编号取元件参数 (变量1, 元件横位, 元件纵位, 元件名称, 元件类别, 元件状态, , , , , , ))
        .如果真 (并且 (等于 (编号元件存在, 真), 等于 (元件类别, 2), 大于或等于 (横向位置, 元件横位), 小于或等于 (横向位置, 相加 (元件横位, 77)), 大于或等于 (纵向位置, 元件纵位), 小于或等于 (纵向位置, 相加 (元件纵位, 68)))) ' 开关图片的范围
            
            赋值 (当前元件编号, 变量1)
            赋值 (.标题, “  双击可以改变开关的开合状态”)
            赋值 (.内容, “开关”)
            赋值 (.内容, 元件名称)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            赋值 (.内容, “”)
            赋值 (.禁止, 真)
            
            .如果真 (等于 (画线, 假))
                元件横位.清除 (元件纵位, 77, 68)
                .如果 (等于 (元件状态, 0))
                    图片号.画图片 ( [3], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                    修改元件参数 (变量1, “元件状态”, “1”, , )
                .否则
                    图片号.画图片 ( [2], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                    修改元件参数 (变量1, “元件状态”, “0”, , )
                .如果结束
                .复制 (5)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.如果真结束


.子程序 新建元件, 空白型, , 
.参数 元件横位, 整数型, , □
.参数 元件纵位, 整数型, , ■
.参数 元件名称, 文本型, , 
.参数 元件类别, 整数型, , 

.局部变量 元件编号, 整数型, , , 
.局部变量 元件状态, 文本型, , , 
.局部变量 元件电压, 文本型, , , 
.局部变量 元件电阻, 文本型, , , 
.局部变量 最小电阻, 文本型, , , 
.局部变量 最大电阻, 文本型, , , 
.局部变量 额定电压, 文本型, , , 
.局部变量 额定电流, 文本型, , , 
.局部变量 元件信息段, 文本型, , , 

赋值 (修改, 真)
.如果 (大于或等于 (取数组成员数 (空编号), 1))
    .如果真 (大于 (空编号 [1], 当前最大编号))
        赋值 (当前最大编号, 空编号 [1])
    .如果真结束
    赋值 (元件编号, 空编号 [1])
    删除成员 (空编号, 1, 1)
    
.否则
    赋值 (当前最大编号, 相加 (当前最大编号, 1))
    赋值 (元件编号, 当前最大编号)
.如果结束

 ' 指定每种元件的默认初始参数
.判断开始 (等于 (元件类别, 1))
    赋值 (.内容, “电源”)
    赋值 (电源电压, 6)
    赋值 (元件状态, “”)
    赋值 (元件电压, “6”) ' 即6伏特
    赋值 (元件电阻, “0”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “6”)
    赋值 (.禁止, 假)
    赋值 (.内容, “0”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 2))
    赋值 (.内容, “开关”)
    赋值 (元件状态, “0”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 3))
    赋值 (.内容, “电灯”)
    赋值 (元件状态, “”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “10”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “6”)
    赋值 (额定电流, “0.6”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “10”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “6”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 4))
    赋值 (.内容, “电阻”)
    赋值 (元件状态, “0”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “100”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “100”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 5))
    赋值 (.内容, “变阻器”)
    赋值 (元件状态, “2”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “25”)
    赋值 (最小电阻, “0”)
    赋值 (最大电阻, “50”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “25”)
    赋值 (.禁止, 真)
    赋值 (.内容, “0”)
    赋值 (.禁止, 假)
    赋值 (.内容, “50”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 6))
    赋值 (.内容, “电动机”)
    赋值 (元件状态, “0”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “20”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “6”)
    赋值 (额定电流, “0.3”)
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “20”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “6”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    
.判断 (等于 (元件类别, 7))
    赋值 (.内容, “电流器”)
    赋值 (元件状态, “0”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “0”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “1”)
    
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “0”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “1”)
    赋值 (.禁止, 假)
    
.判断 (等于 (元件类别, 8))
    赋值 (.内容, “电压器”)
    赋值 (元件状态, “”)
    赋值 (元件电压, “∞”)
    赋值 (元件电阻, “”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “10”)
    赋值 (额定电流, “”)
    
    赋值 (.内容, 元件名称)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “∞”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
    赋值 (.内容, “10”)
    赋值 (.禁止, 假)
    赋值 (.内容, “”)
    赋值 (.禁止, 真)
.判断 (等于 (元件类别, 10))
    赋值 (元件状态, “0”)
    赋值 (元件电压, “”)
    赋值 (元件电阻, “”)
    赋值 (最小电阻, “”)
    赋值 (最大电阻, “”)
    赋值 (额定电压, “”)
    赋值 (额定电流, “”)
.默认
    
.判断结束

 ' 以编码模式记录这些元件参数信息，如： №1□127■72◇电源1◆1△▲6◎0○●☆★‖№2□108■189◇电灯1◆3△▲◎10○●☆6★0.6‖
赋值 (元件信息段, 相加 (“№”, 到文本 (元件编号), “□”, 到文本 (元件横位), “■”, 到文本 (元件纵位), “◇”, 元件名称, “◆”, 到文本 (元件类别), “△”, 元件状态, “▲”, 元件电压, “◎”, 元件电阻, “○”, 最小电阻, “●”, 最大电阻, “☆”, 额定电压, “★”, 额定电流, “‖”))
赋值 (过程操作文本, 相加 (过程操作文本, 元件信息段))


.子程序 记录画线, 空白型, , 
.参数 接头名称, 文本型, , 
.参数 接头横位, 整数型, , 
.参数 接头纵位, 整数型, , 

.如果 (或者 (等于 (接头名称, 接头), 不等于 (寻找文本 (过程操作文本, 相加 (“⊙”, 接头, “|”, 接头名称, “¤”), , 真), -1), 不等于 (寻找文本 (过程操作文本, 相加 (“⊙”, 接头名称, “|”, 接头, “¤”), , 真), -1))) ' 不允许在一个接线柱上接一根导线的两端，并且不允许在两个接线柱上重复连接导线
    赋值 (画线, 假)
    赋值 (线段, “”)
    赋值 (接头, “”)
    刷新画板画面 (过程操作文本)
    电路分析 (过程操作文本)
    
.否则
    赋值 (修改, 真) ' 以编码方式记录画线中的每点位置以及两端接头名
    赋值 (过程操作文本, 相加 (过程操作文本, “⊙”, 接头, “|”, 接头名称, “¤”, 线段, “┇”, 到文本 (横坐标), “|”, 到文本 (纵坐标), “┇”, 到文本 (接头横位), “|”, 到文本 (接头纵位), “‖”))
    电路分析 (过程操作文本)
    
.如果结束


.子程序 修改元件参数, 空白型, , 
.参数 元件编号, 空白型, , 
.参数 待修改参数名称1, 文本型, , 
.参数 参数修改值文本1, 文本型, , 
.参数 待修改参数名称2, 文本型, 可空, 
.参数 参数修改值文本2, 文本型, 可空, 

.局部变量 元件信息段, 文本型, , , 
.局部变量 元件信息段始位置, 整数型, , , 
.局部变量 元件信息段末下一位置, 整数型, , , 
.局部变量 元件信息段长度, 整数型, , , 
.局部变量 匿名局部变量_10680, 空白型, , , 
.局部变量 参数始位置, 整数型, , , 
.局部变量 参数末下一位置, 整数型, , , 
.局部变量 参数段长度, 整数型, , , 
.局部变量 前元件编号, 文本型, , , 
.局部变量 元件新修改信息段, 文本型, , , 
.局部变量 匿名局部变量_10686, 空白型, , , 



赋值 (修改, 真)
赋值 (元件信息段始位置, 寻找文本 (过程操作文本, 相加 (“№”, 到文本 (元件编号), “□”), 1, 真))
赋值 (元件信息段末下一位置, 相加 (寻找文本 (过程操作文本, “‖”, 元件信息段始位置, 真), 2))
赋值 (元件信息段长度, 相减 (元件信息段末下一位置, 元件信息段始位置))
赋值 (元件信息段, 取文本中间 (过程操作文本, 元件信息段始位置, 元件信息段长度))

.判断开始 (等于 (待修改参数名称1, “元件横位”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “□”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “■”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “元件纵位”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “■”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “◇”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “元件状态”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “△”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “▲”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “元件电压”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “▲”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “◎”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    赋值 (电源电压, 到数值 (参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “元件电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◎”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “○”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “最小电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “○”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “●”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “最大电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “●”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “☆”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “额定电压”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “☆”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “★”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
    
.判断 (等于 (待修改参数名称1, “额定电流”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “★”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “‖”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本1))
     ' “元件信息段”已经修改为“元件新修改信息段”
.默认
    
.判断结束


赋值 (元件信息段, 元件新修改信息段)
.判断开始 (等于 (待修改参数名称2, “元件横位”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “□”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “■”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “元件纵位”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “■”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “◇”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “元件状态”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “△”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “▲”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件新修改信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “元件电压”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “▲”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “◎”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    赋值 (电源电压, 到数值 (参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “元件电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◎”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “○”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “最小电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “○”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “●”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “最大电阻”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “●”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “☆”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “额定电压”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “☆”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “★”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.判断 (等于 (待修改参数名称2, “额定电流”))
    赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “★”, 1, 真), 2))
    赋值 (参数末下一位置, 寻找文本 (元件信息段, “‖”, 1, 真))
    赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
    赋值 (元件新修改信息段, 文本替换 (元件信息段, 参数始位置, 参数段长度, 参数修改值文本2))
    
.默认
    
.判断结束


赋值 (过程操作文本, 文本替换 (过程操作文本, 元件信息段始位置, 元件信息段长度, 元件新修改信息段))
刷新画板画面 (过程操作文本)
电路分析 (过程操作文本)

.子程序 根据编号取元件参数, 逻辑型, , 
.参数 元件编号, 整数型, , 
.参数 元件横位, 整数型, 参考 可空, 
.参数 元件纵位, 整数型, 参考 可空, 
.参数 元件名称, 文本型, 参考 可空, 
.参数 元件类别, 整数型, 参考 可空, 
.参数 元件状态, 整数型, 参考 可空, 
.参数 元件电压, 双精度小数型, 参考 可空, 
.参数 元件电阻, 双精度小数型, 参考 可空, 
.参数 最小电阻, 双精度小数型, 参考 可空, 
.参数 最大电阻, 双精度小数型, 参考 可空, 
.参数 额定电压, 双精度小数型, 参考 可空, 
.参数 额定电流, 双精度小数型, 参考 可空, 

.局部变量 元件信息段, 文本型, , , 
.局部变量 元件信息段始位置, 整数型, , , 
.局部变量 元件信息段末下一位置, 整数型, , , 
.局部变量 元件信息段长度, 整数型, , , 
.局部变量 匿名局部变量_10703, 空白型, , , 
.局部变量 参数始位置, 整数型, , , 
.局部变量 参数末下一位置, 整数型, , , 
.局部变量 参数段长度, 整数型, , , 
.局部变量 匿名局部变量_10707, 空白型, , , 

赋值 (元件信息段始位置, 寻找文本 (过程操作文本, 相加 (“№”, 到文本 (元件编号), “□”), 1, 真))
.如果真 (等于 (元件信息段始位置, -1))
    返回 (假)
.如果真结束
赋值 (元件信息段末下一位置, 相加 (寻找文本 (过程操作文本, “‖”, 元件信息段始位置, 真), 2))
赋值 (元件信息段长度, 相减 (元件信息段末下一位置, 元件信息段始位置))
赋值 (元件信息段, 取文本中间 (过程操作文本, 元件信息段始位置, 元件信息段长度))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “□”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “■”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件横位, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “■”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “◇”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件纵位, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◇”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “◆”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件名称, 取文本中间 (元件信息段, 参数始位置, 参数段长度))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◆”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “△”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件类别, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “△”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “▲”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件状态, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “▲”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “◎”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件电压, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◎”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “○”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (元件电阻, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “○”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “●”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (最小电阻, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “●”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “☆”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (最大电阻, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “☆”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “★”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (额定电压, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “★”, 1, 真), 2))
赋值 (参数末下一位置, 寻找文本 (元件信息段, “‖”, 1, 真))
赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
赋值 (额定电流, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))

返回 (真)

.子程序 打开文件, 空白型, , 
.局部变量 变量1, 整数型, , , 用于循环中的计次
.局部变量 变量2, 整数型, , , 
.局部变量 电机名称, 文本型, , , 
.局部变量 元件信息段始位置, 整数型, , , 
.局部变量 元件信息段末下一位置, 整数型, , , 
.局部变量 元件信息段长度, 整数型, , , 
.局部变量 元件信息段, 文本型, , , 
.局部变量 匿名局部变量_10715, 空白型, , , 
.局部变量 参数始位置, 整数型, , , 
.局部变量 参数末下一位置, 整数型, , , 
.局部变量 参数段长度, 整数型, , , 
.局部变量 匿名局部变量_10719, 空白型, , , 
.局部变量 路径信息段始位置, 整数型, , , 
.局部变量 路径信息段末下一位置, 整数型, , , 
.局部变量 路径信息段长度, 整数型, , , 
.局部变量 路径信息段, 文本型, , , 
.局部变量 路径段数组, 文本型, , "0", 
.局部变量 坐标数组, 文本型, , "0", 
.局部变量 前横位, 整数型, , , 
.局部变量 前纵位, 整数型, , , 

赋值 (.类型, 0)
赋值 (.文件名, “”)
赋值 (.标题, “打开文件：”)
赋值 (.默认文件后缀, “aie”)
赋值 (.过滤器, “模拟电路文件(*.aie)|*.aie”)
赋值 (.初始目录, 取运行目录 ())

.如果真 (等于 (打开 (), 真))
    赋值 (修改, 假)
    赋值 (画线, 假)
    赋值 (移除, 假)
    赋值 (移动, 假)
    赋值 (画元件, 0)
    赋值 (电源电压, 0)
    赋值 (当前最大编号, 0)
    赋值 (当前元件编号, 0)
    赋值 (过程操作文本, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.标题, “”)
    赋值 (.标记, “0”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    获取焦点 ()
    选择归位 ()
    清除数组 (空编号)
    数组清零 (分类最大计数)
    连续赋值 (0, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期)
    数组清零 (电机横位)
    数组清零 (电机纵位)
    .计次循环首 (10, 变量1)
        赋值 (电机数组 [变量1], “”)
    .计次循环尾 ()
    
    赋值 (变量1, 0)
    赋值 (过程操作文本, 到文本 (读入文件 (.文件名)))
    .判断循环首 (不等于 (变量1, -1)) ' 把电动机加入电机数组
        赋值 (变量1, 相加 (变量1, 1))
        赋值 (变量1, 寻找文本 (过程操作文本, “◇电动机”, 变量1, 假))
        .如果真 (大于 (变量1, 0))
            赋值 (电机名称, 取文本中间 (过程操作文本, 相加 (变量1, 2), 相减 (寻找文本 (过程操作文本, “◆”, 变量1, 假), 变量1, 2)))
            .计次循环首 (10, 变量2)
                .如果真 (等于 (电机数组 [变量2], “”))
                    赋值 (电机数组 [变量2], 电机名称)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (等于 (刷新画板画面 (过程操作文本), 真))
        电路分析 (过程操作文本)
    .如果真结束
    
.如果真结束



.子程序 保存文件, 逻辑型, , 
 ' 把元件最终修改信息和路径信息转成字节集写到文件。
赋值 (.类型, 1)
赋值 (.文件名, “”)
赋值 (.标题, “保存文件：”)
赋值 (.默认文件后缀, “aie”)
赋值 (.过滤器, “模拟电路文件(*.aie)|*.aie”)
.如果 (等于 (打开 (), 真))
    赋值 (修改, 假)
    写到文件 (.文件名, 到字节集 (过程操作文本))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 模拟图, 空白型, , 
赋值 (.类型, 1)
赋值 (.文件名, “”)
赋值 (.默认文件后缀, “BMP”)
赋值 (.标题, “保存模拟图片：”)
赋值 (.过滤器, “图片文件(*.BMP)|*.BMP|支持的图象文件(JPG,BMP,GIF)|*.jpg;*.bmp;*.gif|所有文件(*.*)|*.*”)

.如果真 (等于 (打开 (), 真))
    写到文件 (.文件名, 到字节集 (.取图片 ()))
    .如果真 (等于 (信息框 (“成功保存模拟图片，是否查看？”, 相加 (4, 32, 512), ), 5))
        未知支持库函数_6 (4, .文件名, , )
    .如果真结束
    
.如果真结束


.子程序 重新开始, 空白型, , 
.局部变量 变量1, 整数型, , , 

赋值 (修改, 假)
赋值 (画线, 假)
赋值 (移除, 假)
赋值 (移动, 假)
赋值 (画元件, 0)
赋值 (当前最大编号, 0)
赋值 (当前元件编号, 0)
赋值 (过程操作文本, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.标题, “”)
赋值 (.标记, “1”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.选中, 真)
清除数组 (空编号)
数组清零 (分类最大计数)
连续赋值 (假, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中)
连续赋值 (0, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期)
.计次循环首 (10, 变量1)
    赋值 (电机数组 [变量1], “”)
.计次循环尾 ()
获取焦点 ()
.清除 ()
.清除 ()
赋值 (.鼠标指针, 到字节集 (2))

.子程序 清除元件及其相连导线, 空白型, , 
.参数 元件编号, 整数型, , 
.参数 元件名称, 文本型, , 
.参数 元件类别, 整数型, , 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 操作段数组, 文本型, , "0", 
.局部变量 操作段数, 整数型, , , 

赋值 (修改, 真)
加入成员 (空编号, 元件编号) ' 找到记录元件的信息片段，删除，
.判断开始 (等于 (元件类别, 1))
    赋值 (分类最大计数 [1], 0)
.判断 (等于 (元件类别, 6))
    .计次循环首 (10, 变量1)
        .如果真 (等于 (电机数组 [变量1], 元件名称))
            .判断开始 (等于 (变量1, 1))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 2))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 3))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 4))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 5))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 6))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 7))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 8))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 9))
                赋值 (.时钟周期, 0)
            .判断 (等于 (变量1, 10))
                赋值 (.时钟周期, 0)
            .默认
                
            .判断结束
            赋值 (电机数组 [变量1], “”)
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束

赋值 (操作段数组, 分割文本 (过程操作文本, “‖”, ))
赋值 (操作段数, 取数组成员数 (操作段数组))
.计次循环首 (操作段数, 变量1) ' 把与此元件相连的导线一并删除
    .如果真 (不等于 (寻找文本 (操作段数组 [变量1], 相加 (元件名称, “∧”), 1, 真), -1))
        赋值 (操作段数组 [变量1], “”)
        
    .如果真结束
    .如果真 (不等于 (寻找文本 (操作段数组 [变量1], 相加 (元件名称, “∨”), 1, 真), -1))
        赋值 (操作段数组 [变量1], “”)
        
    .如果真结束
    .如果真 (不等于 (寻找文本 (操作段数组 [变量1], 相加 (元件名称, “◆”), 1, 真), -1))
        赋值 (操作段数组 [变量1], “”)
        
    .如果真结束
    
.计次循环尾 ()
赋值 (过程操作文本, “”)
.计次循环首 (操作段数, 变量1) ' 重新组合剩余片段
    .如果真 (不等于 (操作段数组 [变量1], “”))
        .如果 (等于 (过程操作文本, “”))
            赋值 (过程操作文本, 相加 (操作段数组 [变量1], “‖”))
        .否则
            赋值 (过程操作文本, 相加 (过程操作文本, 操作段数组 [变量1], “‖”))
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (成功移除, 真) ' 已经删除元件就不再运行“删除鼠标处导线（）”
.如果 (等于 (刷新画板画面 (过程操作文本), 真))
    电路分析 (过程操作文本)
.否则
    返回 ()
.如果结束

.如果真 (等于 (元件编号, 当前元件编号))
    赋值 (当前元件编号, 0)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.标题, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
.如果真结束


.子程序 清除鼠标处导线, 空白型, , 
.参数 鼠标横坐标, 整数型, , 
.参数 鼠标纵坐标, 整数型, , 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 变量3, 整数型, , , 
.局部变量 当前过程文本, 文本型, , , 
.局部变量 路径信息段始位置, 整数型, , , 
.局部变量 路径信息段末下一位置, 整数型, , , 
.局部变量 路径信息段长度, 整数型, , , 
.局部变量 路径信息段, 文本型, , , 
.局部变量 路径段数组, 文本型, , "0", 
.局部变量 坐标数组, 文本型, , "0", 
.局部变量 操作段数组, 文本型, , "0", 
.局部变量 操作段数, 整数型, , , 


赋值 (当前过程文本, 过程操作文本)
赋值 (变量1, 0)
.循环判断首 ()
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (路径信息段始位置, 相加 (寻找文本 (当前过程文本, “¤”, 变量1, 真), 2)) ' 分离出导线象素点坐标群信息
    .如果真 (等于 (路径信息段始位置, 1))
        跳出循环 ()
    .如果真结束
    赋值 (路径信息段末下一位置, 寻找文本 (当前过程文本, “‖”, 路径信息段始位置, 真))
    .如果真 (大于 (路径信息段末下一位置, 路径信息段始位置))
        赋值 (路径信息段长度, 相减 (路径信息段末下一位置, 路径信息段始位置))
        赋值 (路径信息段, 取文本中间 (当前过程文本, 路径信息段始位置, 路径信息段长度))
        赋值 (路径段数组, 分割文本 (路径信息段, “┇”, ))
        
        .计次循环首 (取数组成员数 (路径段数组), 变量2)
            赋值 (坐标数组, 分割文本 (路径段数组 [变量2], “|”, ))
            .如果真 (并且 (大于或等于 (到数值 (坐标数组 [1]), 相减 (鼠标横坐标, 8)), 小于或等于 (到数值 (坐标数组 [1]), 相加 (鼠标横坐标, 8)), 大于或等于 (到数值 (坐标数组 [2]), 相减 (鼠标纵坐标, 8)), 小于或等于 (到数值 (坐标数组 [2]), 相加 (鼠标纵坐标, 8)))) ' 如果导线某点在鼠标8象素距离范围内，则此导线就是将要删除的导线。
                赋值 (操作段数组, 分割文本 (当前过程文本, “‖”, ))
                赋值 (操作段数, 取数组成员数 (操作段数组))
                .计次循环首 (操作段数, 变量3)
                    .如果真 (不等于 (寻找文本 (操作段数组 [变量3], 路径段数组 [变量2], 1, 真), -1)) ' 把此段导线删除
                        赋值 (操作段数组 [变量3], “”)
                        赋值 (修改, 真)
                    .如果真结束
                    
                .计次循环尾 ()
                赋值 (过程操作文本, “”)
                .计次循环首 (操作段数, 变量3) ' 把已删除导线剩余片段重新组合成“过程操作文本”
                    .如果真 (不等于 (操作段数组 [变量3], “”))
                        .如果 (等于 (过程操作文本, “”))
                            赋值 (过程操作文本, 相加 (操作段数组 [变量3], “‖”))
                        .否则
                            赋值 (过程操作文本, 相加 (过程操作文本, 操作段数组 [变量3], “‖”))
                        .如果结束
                        
                    .如果真结束
                    
                .计次循环尾 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    赋值 (变量1, 路径信息段始位置)
.循环判断尾 (大于 (路径信息段始位置, 2))
刷新画板画面 (过程操作文本) ' 显示删除后效果
电路分析 (过程操作文本)


.子程序 刷新画板画面, 逻辑型, , 
.参数 当前过程文本, 文本型, , 

.局部变量 匿名局部变量_10751, 空白型, 静态, , 
.局部变量 变量1, 整数型, , , 
.局部变量 分类编号, 整数型, , , 
.局部变量 元件编号, 整数型, , , 
.局部变量 元件横位, 整数型, 静态, , 
.局部变量 元件纵位, 整数型, 静态, , 
.局部变量 元件名称, 文本型, 静态, , 
.局部变量 元件类别, 整数型, 静态, , 
.局部变量 元件状态, 整数型, 静态, , 
.局部变量 元件电压, 双精度小数型, , , 
.局部变量 匿名局部变量_10761, 空白型, , , 
.局部变量 元件信息段始位置, 整数型, , , 
.局部变量 元件信息段末下一位置, 整数型, , , 
.局部变量 元件信息段长度, 整数型, , , 
.局部变量 元件信息段, 文本型, , , 
.局部变量 参数始位置, 整数型, , , 
.局部变量 参数末下一位置, 整数型, , , 
.局部变量 参数段长度, 整数型, , , 
.局部变量 匿名局部变量_10769, 空白型, , , 
.局部变量 路径信息段始位置, 整数型, , , 
.局部变量 路径信息段末下一位置, 整数型, , , 
.局部变量 路径信息段长度, 整数型, , , 
.局部变量 路径信息段, 文本型, , , 
.局部变量 路径段数组, 文本型, , "0", 
.局部变量 坐标数组, 文本型, , "0", 
.局部变量 前横位, 整数型, , , 
.局部变量 前纵位, 整数型, , , 

.清除 ()
.清除 ()
赋值 (当前最大编号, 0)
赋值 (变量1, 0)
.循环判断首 () ' 重画一遍
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (元件信息段始位置, 寻找文本 (当前过程文本, “№”, 变量1, 真))
    .如果真 (等于 (元件信息段始位置, -1))
        跳出循环 ()
    .如果真结束
    
    赋值 (元件信息段末下一位置, 相加 (寻找文本 (当前过程文本, “‖”, 元件信息段始位置, 真), 2))
    .如果真 (大于 (元件信息段始位置, 0))
        赋值 (元件信息段长度, 相减 (元件信息段末下一位置, 元件信息段始位置))
        赋值 (元件信息段, 取文本中间 (当前过程文本, 元件信息段始位置, 元件信息段长度))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “№”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “□”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件编号, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        .如果真 (大于 (元件编号, 当前最大编号))
            赋值 (当前最大编号, 元件编号)
        .如果真结束
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “□”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “■”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件横位, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “■”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “◇”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件纵位, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◇”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “◆”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件名称, 取文本中间 (元件信息段, 参数始位置, 参数段长度))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “◆”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “△”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件类别, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “△”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “▲”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件状态, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        
        赋值 (参数始位置, 相加 (寻找文本 (元件信息段, “▲”, 1, 真), 2))
        赋值 (参数末下一位置, 寻找文本 (元件信息段, “◎”, 1, 真))
        赋值 (参数段长度, 相减 (参数末下一位置, 参数始位置))
        赋值 (元件电压, 到数值 (取文本中间 (元件信息段, 参数始位置, 参数段长度)))
        
        .判断开始 (等于 (元件类别, 1))
             ' “电源”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 4))))
            .如果真 (小于 (分类最大计数 [1], 分类编号))
                赋值 (分类最大计数 [1], 分类编号)
            .如果真结束
            赋值 (电源电压, 元件电压)
            图片号.画图片 ( [1], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .判断 (等于 (元件类别, 2))
             ' “开关”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 4))))
            .如果真 (小于 (分类最大计数 [2], 分类编号))
                赋值 (分类最大计数 [2], 分类编号)
            .如果真结束
            元件横位.清除 (元件纵位, 77, 68)
            .判断开始 (等于 (元件状态, 0))
                图片号.画图片 ( [2], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
            .判断 (等于 (元件状态, 1))
                图片号.画图片 ( [3], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
            .默认
                
            .判断结束
            
        .判断 (等于 (元件类别, 3))
             ' “电灯”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 4))))
            .如果真 (小于 (分类最大计数 [3], 分类编号))
                赋值 (分类最大计数 [3], 分类编号)
            .如果真结束
            图片号.画图片 ( [4], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
            
        .判断 (等于 (元件类别, 4))
             ' “电阻”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 4))))
            .如果真 (小于 (分类最大计数 [4], 分类编号))
                赋值 (分类最大计数 [4], 分类编号)
            .如果真结束
            图片号.画图片 ( [8], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .判断 (等于 (元件类别, 5))
             ' “变阻器”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 6))))
            .如果真 (小于 (分类最大计数 [5], 分类编号))
                赋值 (分类最大计数 [5], 分类编号)
            .如果真结束
            元件横位.清除 (元件纵位, 77, 68)
            .判断开始 (等于 (元件状态, 0))
                图片号.画图片 ( [9], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (等于 (元件状态, 1))
                图片号.画图片 ( [10], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (等于 (元件状态, 2))
                图片号.画图片 ( [11], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (等于 (元件状态, 3))
                图片号.画图片 ( [12], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (等于 (元件状态, 4))
                图片号.画图片 ( [13], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .默认
                
            .判断结束
            
        .判断 (等于 (元件类别, 6))
             ' “电动机”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 6))))
            .如果真 (小于 (分类最大计数 [6], 分类编号))
                赋值 (分类最大计数 [6], 分类编号)
            .如果真结束
            图片号.画图片 ( [14], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .判断 (等于 (元件类别, 7))
             ' “电流器”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 6))))
            .如果真 (小于 (分类最大计数 [7], 分类编号))
                赋值 (分类最大计数 [7], 分类编号)
            .如果真结束
            图片号.画图片 ( [18], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .判断 (等于 (元件类别, 8))
             ' “电压器”
            赋值 (分类编号, 到数值 (取文本右边 (元件名称, 相减 (取文本长度 (元件名称), 6))))
            .如果真 (小于 (分类最大计数 [8], 分类编号))
                赋值 (分类最大计数 [8], 分类编号)
            .如果真结束
            图片号.画图片 ( [22], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .默认
            
        .判断结束
        
    .如果真结束
    赋值 (变量1, 元件信息段始位置)
.循环判断尾 (大于 (元件信息段始位置, 0))
赋值 (变量1, 0)
.循环判断首 () ' 重画导线
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (路径信息段始位置, 相加 (寻找文本 (当前过程文本, “¤”, 变量1, 真), 2))
    .如果真 (等于 (路径信息段始位置, 1))
        跳出循环 ()
    .如果真结束
    
    赋值 (路径信息段末下一位置, 寻找文本 (当前过程文本, “‖”, 路径信息段始位置, 真))
    .如果真 (并且 (大于 (路径信息段始位置, 2), 大于 (路径信息段末下一位置, 路径信息段始位置)))
        赋值 (路径信息段长度, 相减 (路径信息段末下一位置, 路径信息段始位置))
        赋值 (路径信息段, 取文本中间 (当前过程文本, 路径信息段始位置, 路径信息段长度))
        赋值 (路径段数组, 分割文本 (路径信息段, “┇”, ))
        
        .计次循环首 (取数组成员数 (路径段数组), 分类编号)
            赋值 (坐标数组, 分割文本 (路径段数组 [分类编号], “|”, ))
            
            .如果真 (大于 (分类编号, 1))
                前横位.画直线 (前纵位, 到数值 (坐标数组 [1]), 到数值 (坐标数组 [2]))
            .如果真结束
            赋值 (前横位, 到数值 (坐标数组 [1]))
            赋值 (前纵位, 到数值 (坐标数组 [2]))
            
        .计次循环尾 ()
    .如果真结束
    赋值 (变量1, 路径信息段始位置)
.循环判断尾 (大于 (路径信息段始位置, 2))
.复制 (5)
.如果 (大于 (当前最大编号, 0))
    返回 (真)
.否则
    重新开始 ()
    返回 (假)
.如果结束


.子程序 电路分析, 逻辑型, , 
.参数 过程信息, 文本型, , 

.局部变量 a, 整数型, , , (循环计数变量）为了更醒目，这里用字母表示
.局部变量 b, 整数型, , , (循环计数变量）
.局部变量 c, 整数型, , , (循环计数变量）
.局部变量 d, 整数型, , , (循环计数变量）
.局部变量 e, 整数型, , , (循环计数变量）
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 有电表, 逻辑型, , , 
.局部变量 当前过程信息, 文本型, , , 
.局部变量 元件信息段, 文本型, , , 
.局部变量 元件信息段始位置, 整数型, , , 
.局部变量 元件信息段末下一位置, 整数型, , , 
.局部变量 元件信息段长度, 整数型, , , 
.局部变量 匿名局部变量_10792, 空白型, , , 
.局部变量 参数始位置, 整数型, , , 
.局部变量 参数末下一位置, 整数型, , , 
.局部变量 参数段长度, 整数型, , , 
.局部变量 匿名局部变量_10796, 空白型, , , 
.局部变量 元件横位, 整数型, , , 
.局部变量 元件纵位, 整数型, , , 
.局部变量 元件类别, 整数型, , , 
.局部变量 元件状态, 整数型, , , 
.局部变量 元件名称, 文本型, , , 
.局部变量 元件电阻, 双精度小数型, , , 
.局部变量 最大电阻, 双精度小数型, , , 
.局部变量 最小电阻, 双精度小数型, , , 
.局部变量 额定电流, 双精度小数型, , , 
.局部变量 额定电压, 双精度小数型, , , 
.局部变量 匿名局部变量_10807, 空白型, , , 
.局部变量 横位数组, 整数型, , "0", 
.局部变量 纵位数组, 整数型, , "0", 
.局部变量 小阻数组, 双精度小数型, , "0", 
.局部变量 大阻数组, 双精度小数型, , "0", 
.局部变量 额压数组, 双精度小数型, , "0", 
.局部变量 额流数组, 双精度小数型, , "0", 
.局部变量 状态数组, 整数型, , "0", 
.局部变量 类别数组, 整数型, , "0", 
.局部变量 类别数组1, 整数型, , "0", 
.局部变量 类别数组2, 整数型, , , 
.局部变量 电阻数组, 双精度小数型, , "0", 
.局部变量 电阻数组1, 双精度小数型, , "0", 
.局部变量 名称数组, 文本型, , "0", 
.局部变量 名称数组1, 文本型, , "0", 
.局部变量 名称数组2, 文本型, , "0", 
.局部变量 匿名局部变量_10823, 空白型, , , 
.局部变量 临时判断, 逻辑型, , , 
.局部变量 匿名局部变量_10825, 空白型, , , 
.局部变量 路径信息段, 文本型, , , 
.局部变量 路径信息段始位置, 整数型, , , 
.局部变量 路径信息段末下一位置, 整数型, , , 
.局部变量 路径信息段长度, 整数型, , , 
.局部变量 匿名局部变量_10830, 空白型, , , 
.局部变量 接头组1, 文本型, , "0", 
.局部变量 接头组2, 文本型, , "0", 
.局部变量 匿名局部变量_10833, 空白型, , , 
.局部变量 此接头出现位置, 整数型, , "0", 
.局部变量 等电位互联接头, 文本型, , "0", 
.局部变量 等电位精简接头, 文本型, , "0", 
.局部变量 等电位独立接头, 文本型, , "0", 电表专用
.局部变量 等电位接头, 文本型, , "0", 电表专用
.局部变量 匿名局部变量_10839, 空白型, , , 
.局部变量 空接元件数组, 文本型, , "0", 
.局部变量 匿名局部变量_10841, 空白型, , , 
.局部变量 不需精简, 逻辑型, , , 
.局部变量 没串联, 逻辑型, , , 
.局部变量 没并联, 逻辑型, , , 
.局部变量 元件甲正极有, 逻辑型, , , 
.局部变量 元件甲负极有, 逻辑型, , , 
.局部变量 元件乙正极有, 逻辑型, , , 
.局部变量 元件乙负极有, 逻辑型, , , 
.局部变量 匿名局部变量_10849, 空白型, , , 
.局部变量 拟电阻数, 整数型, , , 
.局部变量 拟电阻名称, 文本型, , "0", 
.局部变量 拟电阻结构, 文本型, , "0", 
.局部变量 拟电阻阻值, 双精度小数型, , "0", 
.局部变量 匿名局部变量_10854, 空白型, , , 
.局部变量 记算次数, 整数型, , , 
.局部变量 匿名局部变量_10856, 空白型, , , 
.局部变量 最终元件名称, 文本型, , , 
.局部变量 匿名局部变量_10858, 空白型, , , 
.局部变量 分析报告, 文本型, , , 
.局部变量 报告节段, 文本型, , "0", 
.局部变量 报告对象, 文本型, , "0", 
.局部变量 元件名, 文本型, , , 
.局部变量 正侧电势, 双精度小数型, , , 
.局部变量 负侧电势, 双精度小数型, , , 
.局部变量 元件电流, 双精度小数型, , , 
.局部变量 正极不空, 逻辑型, , , 针对电压表和电流表
.局部变量 负极不空, 逻辑型, , , 
.局部变量 电流变量, 双精度小数型, , , 
.局部变量 流表电流, 双精度小数型, , , 
.局部变量 电机号, 整数型, , , 
.局部变量 未被忽略元件, 文本型, , "0", 
.局部变量 编号元件存在, 逻辑型, , , 

赋值 (当前过程信息, 过程信息)
赋值 (.内容, “”)
赋值 (分析报告, “”) ' 重新分析

.如果真 (等于 (寻找文本 (当前过程信息, “⊙”, 1, 真), -1)) ' 没有导线
    赋值 (.内容, “”)
    返回 (假)
.如果真结束
.如果真 (等于 (寻找文本 (当前过程信息, “电源1”, 1, 假), -1))
    赋值 (.内容, “提示：电源没有加入,没有形成电路。”)
    效果初始化 ()
    返回 (假)
.如果真结束
.如果真 (或者 (等于 (寻找文本 (当前过程信息, “电源1∧”, 1, 假), -1), 等于 (寻找文本 (当前过程信息, “电源1∨”, 1, 假), -1))) ' i没连线
    赋值 (.内容, “提示：电源没有形成回路。”)
    效果初始化 ()
    返回 (假)
.如果真结束

 ' 删除过程文本中对电路分析无用的部分：导线的路径
.循环判断首 ()
    赋值 (元件信息段始位置, 寻找文本 (当前过程信息, “¤”, 1, 真))
    .如果 (不等于 (元件信息段始位置, -1))
        赋值 (元件信息段末下一位置, 寻找文本 (当前过程信息, “‖”, 元件信息段始位置, 真))
        赋值 (元件信息段, 取文本中间 (当前过程信息, 元件信息段始位置, 相减 (元件信息段末下一位置, 元件信息段始位置)))
        赋值 (当前过程信息, 子文本替换 (当前过程信息, 元件信息段, “”, , , 真))
    .否则
        跳出循环 ()
    .如果结束
    
.循环判断尾 (大于 (元件信息段始位置, 0))

 ' 此时“当前过程信息”文本样式：* №1□104■40◇电源1◆1△0▲6◎0○●☆★‖№2□117■120◇电阻1◆4△0▲◎100○●☆★‖№3□218■73◇电阻2◆4△0▲◎100○●☆★‖⊙电源1∧|电阻1∧‖⊙电源1∨|电阻2∨‖
 ' 先把当前电阻为零的元件两端记录在等电位连接点“等电位互联接头”数组中
.计次循环首 (当前最大编号, a)
    赋值 (编号元件存在, 根据编号取元件参数 (a, 元件横位, 元件纵位, 元件名称, 元件类别, 元件状态, , 元件电阻, 最小电阻, 最大电阻, 额定电压, 额定电流))
    .如果真 (等于 (编号元件存在, 真))
        加入成员 (横位数组, 元件横位)
        加入成员 (纵位数组, 元件纵位)
        加入成员 (名称数组, 元件名称)
        加入成员 (类别数组, 元件类别)
        加入成员 (状态数组, 元件状态)
        加入成员 (电阻数组, 元件电阻)
        加入成员 (小阻数组, 最小电阻)
        加入成员 (大阻数组, 最大电阻)
        加入成员 (额流数组, 额定电流)
        加入成员 (额压数组, 额定电压)
        .如果真 (或者 (等于 (元件类别, 7), 等于 (元件类别, 8)))
            赋值 (有电表, 真)
        .如果真结束
        .如果真 (或者 (并且 (等于 (元件类别, 2), 等于 (元件状态, 1)), 等于 (元件类别, 7), 并且 (等于 (元件电阻, 0), 不等于 (元件类别, 8), 不等于 (元件类别, 10), 不等于 (元件类别, 2), 不等于 (元件类别, 1))))
            加入成员 (等电位互联接头, 相加 (元件名称, “∧”, “|”, 元件名称, “∨”))
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()

 ' 从“当前过程信息文本”中读出所有元件的接线柱，把直接相连或相当于直接相连的接线线柱分别记录在“等电位互联接头”数组中，如如电流表两端接头及所有直接用导线相连的两个接线柱都记录。
生成等电位接头组 (当前过程信息, 等电位互联接头)
.如果真 (等于 (有电表, 真))
    生成等电位接头组 (当前过程信息, 等电位独立接头) ' 等电位独立接头只是为显示电表效果作分析准备（把直接相连的接线柱分别记录在“等电位独立接头”数组中,非直接相连的接线柱不记录，如电流表两端不当作相连的接头记录。）
.如果真结束


 ' 从此开始简化电路模型！！
赋值 (名称数组1, 名称数组)
赋值 (类别数组1, 类别数组)
赋值 (电阻数组1, 电阻数组)
赋值 (等电位精简接头, 等电位互联接头)

赋值 (不需精简, 假)
.判断循环首 (等于 (不需精简, 假)) ' 从“等电位精简接头”中删除两端相当于互连的元件
    赋值 (不需精简, 真)
    .计次循环首 (取数组成员数 (名称数组1), a)
        .计次循环首 (取数组成员数 (等电位精简接头), b)
            赋值 (接头组1, 分割文本 (等电位精简接头 [b], “|”, ))
            连续赋值 (假, 元件甲正极有, 元件甲负极有)
            .计次循环首 (取数组成员数 (接头组1), c)
                .如果真 (等于 (相加 (名称数组1 [a], “∧”), 接头组1 [c]))
                    赋值 (元件甲正极有, 真)
                .如果真结束
                .如果真 (等于 (相加 (名称数组1 [a], “∨”), 接头组1 [c]))
                    赋值 (元件甲负极有, 真)
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (并且 (等于 (元件甲正极有, 真), 等于 (元件甲负极有, 真)))
                赋值 (不需精简, 假)
                .如果 (等于 (类别数组1 [a], 1)) ' 电源
                    赋值 (.内容, “错误：电源正负极短接！”)
                    效果初始化 ()
                    返回 (假)
                .否则
                    赋值 (等电位精简接头 [b], “”)
                    .计次循环首 (取数组成员数 (接头组1), c)
                        .判断开始 (等于 (接头组1 [c], 相加 (名称数组1 [a], “∧”)))
                            赋值 (接头组1 [c], “”)
                        .判断 (等于 (接头组1 [c], 相加 (名称数组1 [a], “∨”)))
                            赋值 (接头组1 [c], “”)
                        .默认
                            
                        .判断结束
                        .如果 (等于 (等电位精简接头 [b], “”))
                            赋值 (等电位精简接头 [b], 接头组1 [c])
                        .否则
                            .如果 (等于 (接头组1 [c], “”))
                                赋值 (等电位精简接头 [b], 等电位精简接头 [b])
                            .否则
                                赋值 (等电位精简接头 [b], 相加 (等电位精简接头 [b], “|”, 接头组1 [c]))
                            .如果结束
                            
                        .如果结束
                        
                    .计次循环尾 ()
                    赋值 (等电位精简接头 [b], 子文本替换 (等电位精简接头 [b], “||”, “|”, 1, , 真))
                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, a, 1)
                    跳出循环 ()
                .如果结束
                
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (等于 (不需精简, 假))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
.判断循环尾 ()

 ' 删除断端，精简掉两端相当于断路的元件如电压器、未闭合的开关
赋值 (不需精简, 假)
.判断循环首 (等于 (不需精简, 假))
    赋值 (不需精简, 真)
    .计次循环首 (取数组成员数 (名称数组1), a)
        .如果真 (或者 (等于 (类别数组1 [a], 2), 等于 (类别数组1 [a], 8)))
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                .如果真 (等于 (等电位精简接头 [b], 相加 (名称数组1 [a], “∧”)))
                    删除成员 (等电位精简接头, b, 1)
                    赋值 (不需精简, 假)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                .如果真 (等于 (等电位精简接头 [b], 相加 (名称数组1 [a], “∨”)))
                    删除成员 (等电位精简接头, b, 1)
                    赋值 (不需精简, 假)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                赋值 (接头组2, 分割文本 (等电位精简接头 [b], “|”, ))
                .如果真 (大于 (取数组成员数 (接头组2), 0))
                    赋值 (等电位精简接头 [b], “”)
                    .计次循环首 (取数组成员数 (接头组2), c)
                        .判断开始 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∧”)))
                            赋值 (接头组2 [c], “”)
                        .判断 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∨”)))
                            赋值 (接头组2 [c], “”)
                        .默认
                            
                        .判断结束
                        .如果 (等于 (等电位精简接头 [b], “”))
                            赋值 (等电位精简接头 [b], 接头组2 [c])
                        .否则
                            .如果 (等于 (接头组2 [c], “”))
                                赋值 (等电位精简接头 [b], 等电位精简接头 [b])
                            .否则
                                赋值 (等电位精简接头 [b], 相加 (等电位精简接头 [b], “|”, 接头组2 [c]))
                            .如果结束
                            
                        .如果结束
                        
                    .计次循环尾 ()
                    赋值 (等电位精简接头 [b], 子文本替换 (等电位精简接头 [b], “||”, “|”, 1, , 真))
                .如果真结束
                
            .计次循环尾 ()
            电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, a, 1)
            赋值 (不需精简, 假)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断循环尾 () ' 成功

.计次循环首 (取数组成员数 (名称数组1), a)
    .计次循环首 (取数组成员数 (等电位精简接头), b)
        .如果真 (或者 (等于 (等电位精简接头 [b], “电源1∧”), 等于 (等电位精简接头 [b], “电源1∨”))) ' 只剩电源的某一极
            赋值 (.内容, “提示：电源没有形成回路。”)
            合并相连导电元件 (名称数组, 类别数组, 状态数组, 等电位独立接头) ' 当电源断路时，所有相连的导电元件可看着一个等电位导体
            .计次循环首 (取数组成员数 (名称数组), c)
                .如果真 (等于 (类别数组 [c], 8)) ' 电压器   ' 先找到电压器端点所在的等电位接头群，如果在这个接头群中找到分析报告中的元件某接头，则这接头电势就是电压器端点的电势，电压值就是两电势之差。
                    赋值 (正极不空, 假)
                    赋值 (负极不空, 假)
                    .计次循环首 (取数组成员数 (等电位独立接头), d)
                        .如果真 (并且 (不等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∧”), 1, 假), -1), 等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∨”), 1, 假), -1)))
                            .判断开始 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∧”, 1, 假), -1))
                                赋值 (正侧电势, 电源电压)
                                赋值 (正极不空, 真)
                            .判断 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∨”, 1, 假), -1))
                                赋值 (正侧电势, 0)
                                赋值 (正极不空, 真)
                            .默认
                                
                            .判断结束
                            
                        .如果真结束
                        
                        .如果真 (并且 (等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∧”), 1, 假), -1), 不等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∨”), 1, 假), -1)))
                            .判断开始 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∧”, 1, 假), -1))
                                赋值 (负侧电势, 电源电压)
                                赋值 (负极不空, 真)
                            .判断 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∨”, 1, 假), -1))
                                赋值 (负侧电势, 0)
                                赋值 (负极不空, 真)
                            .默认
                                
                            .判断结束
                            
                        .如果真结束
                        
                    .计次循环尾 ()
                    .如果真 (并且 (等于 (正极不空, 真), 等于 (负极不空, 真)))
                        .判断开始 (并且 (大于或等于 (正侧电势, 负侧电势), 小于或等于 (相减 (正侧电势, 负侧电势), 额压数组 [c])))
                            相加 (“   ”, 名称数组 [c], “测量值为：”, 到文本 (相减 (正侧电势, 负侧电势)), “伏特”).加入文本 ()
                            .判断开始 (等于 (相减 (正侧电势, 负侧电势), 0)) ' 灭
                                横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                图片号.画图片 ( [22], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                .复制 (5)
                                
                            .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 0), 小于或等于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [c], 2)))) ' 暗
                                横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                图片号.画图片 ( [23], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                .复制 (5)
                                
                            .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [c], 2)), 小于 (相减 (正侧电势, 负侧电势), 额压数组 [c]))) ' 亮
                                横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                图片号.画图片 ( [24], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                .复制 (5)
                            .判断 (等于 (相减 (正侧电势, 负侧电势), 额压数组 [c])) ' 坏
                                横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                图片号.画图片 ( [25], 横位数组 [c], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                .复制 (5)
                            .默认
                                
                            .判断结束
                            
                        .判断 (并且 (大于或等于 (正侧电势, 负侧电势), 大于 (相减 (正侧电势, 负侧电势), 额压数组 [c])))
                            相加 (“   ”, 名称数组 [c], “两端电压超出了”, 名称数组 [c], “的测量范围！”).加入文本 ()
                            横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                            图片号.画图片 ( [25], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                            .复制 (5)
                        .判断 (小于 (正侧电势, 负侧电势))
                            相加 (“   ”, 名称数组 [c], “负极电势大于正极电势，无法测得真实结果！”).加入文本 ()
                        .默认
                            
                        .判断结束
                        加入成员 (未被忽略元件, 名称数组 [c])
                    .如果真结束
                    
                .如果真结束
                
            .计次循环尾 ()
            效果初始化 (未被忽略元件)
            返回 (假)
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()


 ' 进一步简化电路结构模型
.判断循环首 (大于 (取数组成员数 (名称数组1), 2))
    赋值 (不需精简, 假)
    .判断循环首 (等于 (不需精简, 假)) ' （无“|”） 删除空接头(一)：当“等电位精简接头”数组某成员就是元件某电极符号时
        赋值 (不需精简, 真)
        .计次循环首 (取数组成员数 (名称数组1), a)
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                .如果真 (并且 (等于 (等电位精简接头 [b], 相加 (名称数组1 [a], “∧”)), 不等于 (类别数组1 [a], 1)))
                     ' 不是电源
                    删除成员 (等电位精简接头, b, 1)
                    赋值 (不需精简, 假)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                .如果真 (并且 (等于 (等电位精简接头 [b], 相加 (名称数组1 [a], “∨”)), 不等于 (类别数组1 [a], 1)))
                     ' 不是电源
                    删除成员 (等电位精简接头, b, 1)
                    赋值 (不需精简, 假)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (并且 (等于 (不需精简, 假), 不等于 (类别数组1 [a], 1)))
                .计次循环首 (取数组成员数 (等电位精简接头), b)
                    赋值 (接头组2, 分割文本 (等电位精简接头 [b], “|”, ))
                    .如果真 (大于 (取数组成员数 (接头组2), 0))
                        赋值 (等电位精简接头 [b], “”)
                        .计次循环首 (取数组成员数 (接头组2), c)
                            .判断开始 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∧”)))
                                赋值 (接头组2 [c], “”)
                            .判断 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∨”)))
                                赋值 (接头组2 [c], “”)
                            .默认
                                
                            .判断结束
                            .如果 (等于 (等电位精简接头 [b], “”))
                                赋值 (等电位精简接头 [b], 接头组2 [c])
                            .否则
                                .如果 (等于 (接头组2 [c], “”))
                                    赋值 (等电位精简接头 [b], 等电位精简接头 [b])
                                .否则
                                    赋值 (等电位精简接头 [b], 相加 (等电位精简接头 [b], “|”, 接头组2 [c]))
                                .如果结束
                                
                            .如果结束
                            
                        .计次循环尾 ()
                        赋值 (等电位精简接头 [b], 子文本替换 (等电位精简接头 [b], “||”, “|”, 1, , 真))
                    .如果真结束
                    
                .计次循环尾 ()
                清除数组 (空接元件数组)
                取底层元件 (名称数组1 [a], 名称数组, 拟电阻名称, 拟电阻结构, 空接元件数组)
                合并空接元件接头 (空接元件数组, 等电位互联接头)
                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, a, 1)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .判断循环尾 ()
    
    赋值 (不需精简, 假)
    .判断循环首 (等于 (不需精简, 假)) ' （有“|”） 删除空接头(二)：当“等电位精简接头”数组成员中只能找到元件的单一电极时,如{电源1∧|电阻1∧，电源1∨|电阻2∨}，电阴1和电阴2都只有一端接头被记录
        赋值 (不需精简, 真)
        .计次循环首 (取数组成员数 (名称数组1), a) ' 已有的元件名
            赋值 (位置1, 0)
            赋值 (位置2, 0)
            .计次循环首 (取数组成员数 (等电位精简接头), b)
                赋值 (接头组1, 分割文本 (等电位精简接头 [b], “|”, ))
                .如果真 (大于 (取数组成员数 (接头组1), 0))
                    .计次循环首 (取数组成员数 (接头组1), c)
                        .如果真 (等于 (接头组1 [c], 相加 (名称数组1 [a], “∧”))) ' 元件左极接头或元件正极接头
                            赋值 (位置1, b)
                        .如果真结束
                        .如果真 (等于 (接头组1 [c], 相加 (名称数组1 [a], “∨”))) ' 元件右极接头或元件负极接头
                            赋值 (位置2, b)
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (并且 (或者 (等于 (位置1, 0), 等于 (位置2, 0)), 不等于 (类别数组1 [a], 1))) ' 其中一端接头未找到
                .计次循环首 (取数组成员数 (等电位精简接头), b) ' 一端接头没找到就把找到的另一端接头也删了
                    赋值 (接头组2, 分割文本 (等电位精简接头 [b], “|”, ))
                    .如果真 (大于 (取数组成员数 (接头组2), 0))
                        赋值 (等电位精简接头 [b], “”)
                        .计次循环首 (取数组成员数 (接头组2), c)
                            .判断开始 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∧”)))
                                赋值 (接头组2 [c], “”)
                            .判断 (等于 (接头组2 [c], 相加 (名称数组1 [a], “∨”)))
                                赋值 (接头组2 [c], “”)
                            .默认
                                
                            .判断结束
                            .如果 (等于 (等电位精简接头 [b], “”))
                                赋值 (等电位精简接头 [b], 接头组2 [c])
                            .否则
                                .如果 (等于 (接头组2 [c], “”))
                                    赋值 (等电位精简接头 [b], 等电位精简接头 [b])
                                .否则
                                    赋值 (等电位精简接头 [b], 相加 (等电位精简接头 [b], “|”, 接头组2 [c]))
                                .如果结束
                                
                            .如果结束
                            
                        .计次循环尾 ()
                    .如果真结束
                     ' 赋值 (等电位精简接头 [b], 子文本替换 (等电位精简接头 [b], “||”, “|”, 1, , 真))
                .计次循环尾 ()
                清除数组 (空接元件数组)
                取底层元件 (名称数组1 [a], 名称数组, 拟电阻名称, 拟电阻结构, 空接元件数组)
                合并空接元件接头 (空接元件数组, 等电位互联接头)
                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, a, 1)
                赋值 (不需精简, 假)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        
    .判断循环尾 ()
    
    
     ' 把电阻不为零的串联元件合并为一个拟电阻体
    赋值 (没串联, 假)
    .判断循环首 (等于 (没串联, 假))
        赋值 (没串联, 真)
        .计次循环首 (取数组成员数 (等电位精简接头), a)
            
            .计次循环首 (取数组成员数 (名称数组1), b)
                .如果真 (等于 (类别数组1 [b], 1)) ' 电源
                    到循环尾 ()
                .如果真结束
                
                .计次循环首 (取数组成员数 (名称数组1), c)
                    .如果真 (等于 (类别数组1 [c], 1)) ' 电源
                        到循环尾 ()
                    .如果真结束
                    .如果真 (大于或等于 (b, c))
                        到循环尾 ()
                    .如果真结束
                    
                    赋值 (接头组1, 分割文本 (等电位精简接头 [a], “|”, ))
                    .如果真 (等于 (取数组成员数 (接头组1), 2))
                        
                        .判断开始 (或者 (并且 (等于 (接头组1 [1], 相加 (名称数组1 [b], “∨”)), 等于 (接头组1 [2], 相加 (名称数组1 [c], “∨”))), 并且 (等于 (接头组1 [2], 相加 (名称数组1 [b], “∨”)), 等于 (接头组1 [1], 相加 (名称数组1 [c], “∨”))))) ' a∨|b∨  或  b∨|a∨两接头夹在两元件中间
                            
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                连续赋值 (假, 元件甲正极有, 元件乙正极有)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .如果真 (等于 (相加 (名称数组1 [b], “∧”), 接头组2 [e]))
                                        赋值 (元件甲正极有, 真)
                                    .如果真结束
                                    .如果真 (等于 (相加 (名称数组1 [c], “∧”), 接头组2 [e]))
                                        赋值 (元件乙正极有, 真)
                                    .如果真结束
                                    
                                .计次循环尾 ()
                                
                                .如果 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙正极有, 真)))
                                    赋值 (没串联, 真)
                                    跳出循环 ()
                                .否则
                                    赋值 (没串联, 假)
                                .如果结束
                                
                            .计次循环尾 ()
                            .如果 (等于 (没串联, 假))
                                赋值 (拟电阻数, 相加 (拟电阻数, 1))
                                加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                                加入成员 (拟电阻结构, 相加 (“∧”, 名称数组1 [b], “&”, 到文本 (电阻数组1 [b]), “―”, “∨”, 名称数组1 [c]))
                                加入成员 (拟电阻阻值, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                删除成员 (等电位精简接头, a, 1)
                                .计次循环首 (取数组成员数 (等电位精简接头), d)
                                    赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                    赋值 (等电位精简接头 [d], “”)
                                    .计次循环首 (取数组成员数 (接头组2), e)
                                        .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                        .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                        .默认
                                            
                                        .判断结束
                                        .如果 (等于 (等电位精简接头 [d], “”))
                                            赋值 (等电位精简接头 [d], 接头组2 [e])
                                        .否则
                                            .如果 (等于 (接头组2 [e], “”))
                                                赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                            .否则
                                                赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                            .如果结束
                                            
                                        .如果结束
                                        
                                    .计次循环尾 ()
                                    赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                                .计次循环尾 ()
                                .如果 (大于 (b, c))
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                .否则
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                .如果结束
                                
                            .否则
                                
                            .如果结束
                            跳出循环 ()
                        .判断 (或者 (并且 (等于 (接头组1 [1], 相加 (名称数组1 [b], “∧”)), 等于 (接头组1 [2], 相加 (名称数组1 [c], “∧”))), 并且 (等于 (接头组1 [2], 相加 (名称数组1 [b], “∧”)), 等于 (接头组1 [1], 相加 (名称数组1 [c], “∧”))))) ' a∧|b∧两接头夹在两元件中间
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                连续赋值 (假, 元件甲负极有, 元件乙负极有)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .如果真 (等于 (相加 (名称数组1 [b], “∨”), 接头组2 [e]))
                                        赋值 (元件甲负极有, 真)
                                    .如果真结束
                                    .如果真 (等于 (相加 (名称数组1 [c], “∨”), 接头组2 [e]))
                                        赋值 (元件乙负极有, 真)
                                    .如果真结束
                                    
                                .计次循环尾 ()
                                
                                .如果 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙负极有, 真)))
                                    赋值 (没串联, 真)
                                    跳出循环 ()
                                .否则
                                    赋值 (没串联, 假)
                                .如果结束
                                
                            .计次循环尾 ()
                            .如果 (等于 (没串联, 假)) ' a∧|b∧两接头夹在两元件中间
                                赋值 (拟电阻数, 相加 (拟电阻数, 1))
                                加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                                加入成员 (拟电阻结构, 相加 (“∨”, 名称数组1 [b], “&”, 到文本 (电阻数组1 [b]), “―”, “∧”, 名称数组1 [c]))
                                加入成员 (拟电阻阻值, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                
                                删除成员 (等电位精简接头, a, 1)
                                .计次循环首 (取数组成员数 (等电位精简接头), d)
                                    赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                    赋值 (等电位精简接头 [d], “”)
                                    .计次循环首 (取数组成员数 (接头组2), e)
                                        .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                        .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                        .默认
                                            
                                        .判断结束
                                        .如果 (等于 (等电位精简接头 [d], “”))
                                            赋值 (等电位精简接头 [d], 接头组2 [e])
                                        .否则
                                            .如果 (等于 (接头组2 [e], “”))
                                                赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                            .否则
                                                赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                            .如果结束
                                            
                                        .如果结束
                                        
                                    .计次循环尾 ()
                                    赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                                .计次循环尾 ()
                                .如果 (大于 (b, c))
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                .否则
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                .如果结束
                                
                            .否则
                                
                            .如果结束
                            跳出循环 ()
                        .判断 (或者 (并且 (等于 (接头组1 [1], 相加 (名称数组1 [b], “∧”)), 等于 (接头组1 [2], 相加 (名称数组1 [c], “∨”))), 并且 (等于 (接头组1 [2], 相加 (名称数组1 [b], “∧”)), 等于 (接头组1 [1], 相加 (名称数组1 [c], “∨”))))) ' a∧|b∨
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                连续赋值 (假, 元件甲负极有, 元件乙正极有)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .如果真 (等于 (相加 (名称数组1 [b], “∨”), 接头组2 [e]))
                                        赋值 (元件甲负极有, 真)
                                    .如果真结束
                                    .如果真 (等于 (相加 (名称数组1 [c], “∧”), 接头组2 [e]))
                                        赋值 (元件乙正极有, 真)
                                    .如果真结束
                                    
                                .计次循环尾 ()
                                .如果 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙正极有, 真)))
                                    赋值 (没串联, 真)
                                    跳出循环 ()
                                .否则
                                    赋值 (没串联, 假)
                                .如果结束
                                
                            .计次循环尾 ()
                            .如果 (等于 (没串联, 假)) ' a∧|b∨两接头夹在两元件中间
                                赋值 (拟电阻数, 相加 (拟电阻数, 1))
                                加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                                加入成员 (拟电阻结构, 相加 (“∨”, 名称数组1 [b], “&”, 到文本 (电阻数组1 [b]), “―”, “∨”, 名称数组1 [c]))
                                加入成员 (拟电阻阻值, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                删除成员 (等电位精简接头, a, 1)
                                .计次循环首 (取数组成员数 (等电位精简接头), d)
                                    赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                    赋值 (等电位精简接头 [d], “”)
                                    .计次循环首 (取数组成员数 (接头组2), e)
                                        .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                            
                                        .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                        .默认
                                            
                                        .判断结束
                                        .如果 (等于 (等电位精简接头 [d], “”))
                                            赋值 (等电位精简接头 [d], 接头组2 [e])
                                        .否则
                                            .如果 (等于 (接头组2 [e], “”))
                                                赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                            .否则
                                                赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                            .如果结束
                                            
                                        .如果结束
                                        
                                    .计次循环尾 ()
                                    赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                                .计次循环尾 ()
                                .如果 (大于 (b, c))
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                .否则
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                .如果结束
                                
                            .否则
                                
                            .如果结束
                            跳出循环 ()
                        .判断 (或者 (并且 (等于 (接头组1 [1], 相加 (名称数组1 [b], “∨”)), 等于 (接头组1 [2], 相加 (名称数组1 [c], “∧”))), 并且 (等于 (接头组1 [2], 相加 (名称数组1 [b], “∨”)), 等于 (接头组1 [1], 相加 (名称数组1 [c], “∧”))))) ' a∨|b∧
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                连续赋值 (假, 元件甲正极有, 元件乙负极有)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .如果真 (等于 (相加 (名称数组1 [b], “∧”), 接头组2 [e]))
                                        赋值 (元件甲正极有, 真)
                                    .如果真结束
                                    .如果真 (等于 (相加 (名称数组1 [c], “∨”), 接头组2 [e]))
                                        赋值 (元件乙负极有, 真)
                                    .如果真结束
                                    
                                .计次循环尾 ()
                                
                                .如果 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙负极有, 真)))
                                    赋值 (没串联, 真)
                                    跳出循环 ()
                                .否则
                                    赋值 (没串联, 假)
                                .如果结束
                                
                            .计次循环尾 ()
                            .如果 (等于 (没串联, 假)) ' a∨|b∧两接头夹在两元件中间
                                赋值 (拟电阻数, 相加 (拟电阻数, 1))
                                加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                                加入成员 (拟电阻结构, 相加 (“∧”, 名称数组1 [b], “&”, 到文本 (电阻数组1 [b]), “―”, “∧”, 名称数组1 [c]))
                                加入成员 (拟电阻阻值, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相加 (电阻数组1 [b], 电阻数组1 [c]))
                                删除成员 (等电位精简接头, a, 1)
                                .计次循环首 (取数组成员数 (等电位精简接头), d)
                                    赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                    赋值 (等电位精简接头 [d], “”)
                                    .计次循环首 (取数组成员数 (接头组2), e)
                                        .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                        .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                            赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                        .默认
                                            
                                        .判断结束
                                        .如果 (等于 (等电位精简接头 [d], “”))
                                            赋值 (等电位精简接头 [d], 接头组2 [e])
                                        .否则
                                            .如果 (等于 (接头组2 [e], “”))
                                                赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                            .否则
                                                赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                            .如果结束
                                            
                                        .如果结束
                                        
                                    .计次循环尾 ()
                                    赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                                .计次循环尾 ()
                                .如果 (大于 (b, c))
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                .否则
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                    电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                .如果结束
                                
                            .否则
                                
                            .如果结束
                            跳出循环 ()
                        .默认
                            
                        .判断结束
                        
                    .如果真结束
                     ' 如果真
                .计次循环尾 ()
                .如果真 (等于 (没串联, 假))
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (等于 (没串联, 假))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        
    .判断循环尾 ()
    
     ' ――――――――――――――――――――――――――――――――――――――――――――――――
     ' 把电阻不为零的并联元件合成为一个拟电阻体
    赋值 (没并联, 假)
    .判断循环首 (等于 (没并联, 假))
        赋值 (没并联, 真)
        .计次循环首 (取数组成员数 (等电位精简接头), a)
            
            .计次循环首 (取数组成员数 (名称数组1), b)
                .如果真 (等于 (类别数组1 [b], 1)) ' 电源
                    到循环尾 ()
                .如果真结束
                
                .计次循环首 (取数组成员数 (名称数组1), c)
                    
                    .如果真 (等于 (类别数组1 [c], 1)) ' 电源
                        到循环尾 ()
                    .如果真结束
                    .如果真 (大于或等于 (b, c))
                        到循环尾 ()
                    .如果真结束
                    
                     ' 如果元件B与元件C一端共接头
                    赋值 (接头组1, 分割文本 (等电位精简接头 [a], “|”, ))
                    连续赋值 (假, 元件甲正极有, 元件甲负极有, 元件乙正极有, 元件乙负极有)
                    .计次循环首 (取数组成员数 (接头组1), d)
                        .如果真 (等于 (相加 (名称数组1 [b], “∧”), 接头组1 [d]))
                            赋值 (元件甲正极有, 真)
                        .如果真结束
                        .如果真 (等于 (相加 (名称数组1 [c], “∧”), 接头组1 [d]))
                            赋值 (元件乙正极有, 真)
                        .如果真结束
                        .如果真 (等于 (相加 (名称数组1 [b], “∨”), 接头组1 [d]))
                            赋值 (元件甲负极有, 真)
                        .如果真结束
                        .如果真 (等于 (相加 (名称数组1 [c], “∨”), 接头组1 [d]))
                            赋值 (元件乙负极有, 真)
                        .如果真结束
                        
                    .计次循环尾 ()
                    .判断开始 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙正极有, 真))) ' 共接头类型1:B∧ C∧
                        .计次循环首 (取数组成员数 (等电位精简接头), d)
                            赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                            连续赋值 (假, 元件甲负极有, 元件乙负极有)
                            .计次循环首 (取数组成员数 (接头组2), e) ' 查找对应类型1是否共接头
                                .如果真 (等于 (相加 (名称数组1 [b], “∨”), 接头组2 [e]))
                                    赋值 (元件甲负极有, 真)
                                .如果真结束
                                .如果真 (等于 (相加 (名称数组1 [c], “∨”), 接头组2 [e]))
                                    赋值 (元件乙负极有, 真)
                                .如果真结束
                                
                            .计次循环尾 ()
                            
                            .如果 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙负极有, 真))) ' 对应类型1共接头
                                赋值 (没并联, 假)
                                跳出循环 ()
                            .否则
                                赋值 (没并联, 真)
                            .如果结束
                            
                        .计次循环尾 ()
                        .如果真 (等于 (没并联, 假))
                            赋值 (拟电阻数, 相加 (拟电阻数, 1))
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                赋值 (等电位精简接头 [d], “”)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                        赋值 (接头组2 [e], “”)
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                        赋值 (接头组2 [e], “”)
                                    .默认
                                        
                                    .判断结束
                                    .如果 (等于 (等电位精简接头 [d], “”))
                                        赋值 (等电位精简接头 [d], 接头组2 [e])
                                    .否则
                                        .如果 (等于 (接头组2 [e], “”))
                                            赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                        .否则
                                            赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                        .如果结束
                                        
                                    .如果结束
                                    
                                .计次循环尾 ()
                                赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                            .计次循环尾 ()
                            加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                            加入成员 (拟电阻结构, 相加 (“∧”, 名称数组1 [b], “|”, “∧”, 名称数组1 [c]))
                            加入成员 (拟电阻阻值, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            .如果 (大于 (b, c))
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                            .否则
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                            .如果结束
                            跳出循环 ()
                        .如果真结束
                        
                        
                    .判断 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙负极有, 真))) ' 共接头类型2:B∨ C∨
                        .计次循环首 (取数组成员数 (等电位精简接头), d)
                            赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                            连续赋值 (假, 元件甲正极有, 元件乙正极有)
                            .计次循环首 (取数组成员数 (接头组2), e) ' 查找对应类型2是否共接头
                                .如果真 (等于 (相加 (名称数组1 [b], “∧”), 接头组2 [e]))
                                    赋值 (元件甲正极有, 真)
                                .如果真结束
                                .如果真 (等于 (相加 (名称数组1 [c], “∧”), 接头组2 [e]))
                                    赋值 (元件乙正极有, 真)
                                .如果真结束
                                
                            .计次循环尾 ()
                            
                            .如果 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙正极有, 真))) ' 对应类型2共接头
                                赋值 (没并联, 假)
                                跳出循环 ()
                            .否则
                                赋值 (没并联, 真)
                            .如果结束
                            
                        .计次循环尾 ()
                        .如果真 (等于 (没并联, 假))
                            赋值 (拟电阻数, 相加 (拟电阻数, 1))
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                赋值 (等电位精简接头 [d], “”)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                        赋值 (接头组2 [e], “”)
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                        赋值 (接头组2 [e], “”)
                                    .默认
                                        
                                    .判断结束
                                    .如果 (等于 (等电位精简接头 [d], “”))
                                        赋值 (等电位精简接头 [d], 接头组2 [e])
                                    .否则
                                        .如果 (等于 (接头组2 [e], “”))
                                            赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                        .否则
                                            赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                        .如果结束
                                        
                                    .如果结束
                                    
                                .计次循环尾 ()
                                赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                            .计次循环尾 ()
                            加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                            加入成员 (拟电阻结构, 相加 (“∧”, 名称数组1 [b], “|”, “∧”, 名称数组1 [c]))
                            加入成员 (拟电阻阻值, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            .如果 (大于 (b, c))
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                            .否则
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                            .如果结束
                            跳出循环 ()
                        .如果真结束
                        
                    .判断 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙负极有, 真))) ' 共接头类型3：B∧ C∨
                        .计次循环首 (取数组成员数 (等电位精简接头), d)
                            赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                            连续赋值 (假, 元件甲负极有, 元件乙正极有)
                            .计次循环首 (取数组成员数 (接头组2), e) ' 查找对应类型3是否共接头
                                .如果真 (等于 (相加 (名称数组1 [b], “∨”), 接头组2 [e]))
                                    赋值 (元件甲负极有, 真)
                                .如果真结束
                                .如果真 (等于 (相加 (名称数组1 [c], “∧”), 接头组2 [e]))
                                    赋值 (元件乙正极有, 真)
                                .如果真结束
                                
                            .计次循环尾 ()
                            .如果 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙正极有, 真))) ' 对应类型3共接头
                                赋值 (没并联, 假)
                                跳出循环 ()
                            .否则
                                赋值 (没并联, 真)
                            .如果结束
                            
                        .计次循环尾 ()
                        .如果真 (等于 (没并联, 假))
                            赋值 (拟电阻数, 相加 (拟电阻数, 1))
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                赋值 (等电位精简接头 [d], “”)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                        赋值 (接头组2 [e], “”)
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                        赋值 (接头组2 [e], “”)
                                    .默认
                                        
                                    .判断结束
                                    .如果 (等于 (等电位精简接头 [d], “”))
                                        赋值 (等电位精简接头 [d], 接头组2 [e])
                                    .否则
                                        .如果 (等于 (接头组2 [e], “”))
                                            赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                        .否则
                                            赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                        .如果结束
                                        
                                    .如果结束
                                    
                                .计次循环尾 ()
                                赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                            .计次循环尾 ()
                            加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                            加入成员 (拟电阻结构, 相加 (“∧”, 名称数组1 [b], “|”, “∨”, 名称数组1 [c]))
                            加入成员 (拟电阻阻值, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            .如果 (大于 (b, c))
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                            .否则
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                            .如果结束
                            跳出循环 ()
                        .如果真结束
                        
                    .判断 (并且 (等于 (元件甲负极有, 真), 等于 (元件乙正极有, 真))) ' 共接头类型4:B∨ C∧
                        .计次循环首 (取数组成员数 (等电位精简接头), d)
                            赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                            连续赋值 (假, 元件甲正极有, 元件乙负极有)
                            .计次循环首 (取数组成员数 (接头组2), e) ' 查找对应类型4是否共接头
                                .如果真 (等于 (相加 (名称数组1 [b], “∧”), 接头组2 [e]))
                                    赋值 (元件甲正极有, 真)
                                .如果真结束
                                .如果真 (等于 (相加 (名称数组1 [c], “∨”), 接头组2 [e]))
                                    赋值 (元件乙负极有, 真)
                                .如果真结束
                                
                            .计次循环尾 ()
                            
                            .如果 (并且 (等于 (元件甲正极有, 真), 等于 (元件乙负极有, 真))) ' 对应类型4共接头
                                赋值 (没并联, 假)
                                跳出循环 ()
                            .否则
                                赋值 (没并联, 真)
                            .如果结束
                            
                        .计次循环尾 ()
                        .如果真 (等于 (没并联, 假))
                            赋值 (拟电阻数, 相加 (拟电阻数, 1))
                            .计次循环首 (取数组成员数 (等电位精简接头), d)
                                赋值 (接头组2, 分割文本 (等电位精简接头 [d], “|”, ))
                                赋值 (等电位精简接头 [d], “”)
                                .计次循环首 (取数组成员数 (接头组2), e)
                                    .判断开始 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∨”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∧”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∧”)))
                                        赋值 (接头组2 [e], “”)
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [b], “∧”)))
                                        赋值 (接头组2 [e], 相加 (“拟电阻”, 到文本 (拟电阻数), “∨”))
                                    .判断 (等于 (接头组2 [e], 相加 (名称数组1 [c], “∨”)))
                                        赋值 (接头组2 [e], “”)
                                    .默认
                                        
                                    .判断结束
                                    .如果 (等于 (等电位精简接头 [d], “”))
                                        赋值 (等电位精简接头 [d], 接头组2 [e])
                                    .否则
                                        .如果 (等于 (接头组2 [e], “”))
                                            赋值 (等电位精简接头 [d], 等电位精简接头 [d])
                                        .否则
                                            赋值 (等电位精简接头 [d], 相加 (等电位精简接头 [d], “|”, 接头组2 [e]))
                                        .如果结束
                                        
                                    .如果结束
                                    
                                .计次循环尾 ()
                                赋值 (等电位精简接头 [d], 子文本替换 (等电位精简接头 [d], “||”, “|”, 1, , 真))
                            .计次循环尾 ()
                            加入成员 (拟电阻名称, 相加 (“拟电阻”, 到文本 (拟电阻数)))
                            加入成员 (拟电阻结构, 相加 (“∨”, 名称数组1 [b], “|”, “∧”, 名称数组1 [c]))
                            加入成员 (拟电阻阻值, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            电路_加入数组成员 (名称数组1, 相加 (“拟电阻”, 到文本 (拟电阻数)), 类别数组1, 11, 电阻数组1, 相除 (相乘 (电阻数组1 [b], 电阻数组1 [c]), 相加 (电阻数组1 [b], 电阻数组1 [c])))
                            .如果 (大于 (b, c))
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                            .否则
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, c, 1)
                                电路_删除数组成员 (名称数组1, 类别数组1, 电阻数组1, b, 1)
                            .如果结束
                            跳出循环 ()
                        .如果真结束
                        
                    .默认
                        
                    .判断结束
                    
                .计次循环尾 ()
                .如果真 (等于 (没并联, 假))
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (等于 (没并联, 假))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .判断循环尾 () ' 判断循环首 (没并联 ＝ 假)
    
    .计次循环首 (取数组成员数 (名称数组1), a)
        .计次循环首 (取数组成员数 (等电位精简接头), b)
            .如果真 (或者 (等于 (等电位精简接头 [b], “电源1∧”), 等于 (等电位精简接头 [b], “电源1∨”))) ' 只剩电源的某一极
                赋值 (.内容, “提示：电源没有形成回路。”)
                合并相连导电元件 (名称数组, 类别数组, 状态数组, 等电位独立接头) ' 当电源断路时，所有相连的导电元件可看着一个等电位导体
                .计次循环首 (取数组成员数 (名称数组), c)
                    .如果真 (等于 (类别数组 [c], 8)) ' 电压器   ' 先找到电压器端点所在的等电位接头群，如果在这个接头群中找到分析报告中的元件某接头，则这接头电势就是电压器端点的电势，电压值就是两电势之差。
                        赋值 (正极不空, 假)
                        赋值 (负极不空, 假)
                        .计次循环首 (取数组成员数 (等电位独立接头), d)
                            .如果真 (并且 (不等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∧”), 1, 假), -1), 等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∨”), 1, 假), -1)))
                                .判断开始 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∧”, 1, 假), -1))
                                    赋值 (正侧电势, 电源电压)
                                    赋值 (正极不空, 真)
                                .判断 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∨”, 1, 假), -1))
                                    赋值 (正侧电势, 0)
                                    赋值 (正极不空, 真)
                                .默认
                                    
                                .判断结束
                                
                            .如果真结束
                            
                            .如果真 (并且 (等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∧”), 1, 假), -1), 不等于 (寻找文本 (等电位独立接头 [d], 相加 (名称数组 [c], “∨”), 1, 假), -1)))
                                .判断开始 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∧”, 1, 假), -1))
                                    赋值 (负侧电势, 电源电压)
                                    赋值 (负极不空, 真)
                                .判断 (不等于 (寻找文本 (等电位独立接头 [d], “电源1∨”, 1, 假), -1))
                                    赋值 (负侧电势, 0)
                                    赋值 (负极不空, 真)
                                .默认
                                    
                                .判断结束
                                
                            .如果真结束
                            
                        .计次循环尾 ()
                        .如果真 (并且 (等于 (正极不空, 真), 等于 (负极不空, 真)))
                            .判断开始 (并且 (大于或等于 (正侧电势, 负侧电势), 小于或等于 (相减 (正侧电势, 负侧电势), 额压数组 [c])))
                                相加 (“   ”, 名称数组 [c], “测量值为：”, 到文本 (相减 (正侧电势, 负侧电势)), “伏特”).加入文本 ()
                                .判断开始 (等于 (相减 (正侧电势, 负侧电势), 0)) ' 灭
                                    横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                    图片号.画图片 ( [22], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                    .复制 (5)
                                    
                                .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 0), 小于或等于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [c], 2)))) ' 暗
                                    横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                    图片号.画图片 ( [23], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                    .复制 (5)
                                    
                                .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [c], 2)), 小于 (相减 (正侧电势, 负侧电势), 额压数组 [c]))) ' 亮
                                    横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                    图片号.画图片 ( [24], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                    .复制 (5)
                                .判断 (等于 (相减 (正侧电势, 负侧电势), 额压数组 [c])) ' 坏
                                    横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                    图片号.画图片 ( [25], 横位数组 [c], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                    .复制 (5)
                                .默认
                                    
                                .判断结束
                                
                            .判断 (并且 (大于或等于 (正侧电势, 负侧电势), 大于 (相减 (正侧电势, 负侧电势), 额压数组 [c])))
                                相加 (“   ”, 名称数组 [c], “两端电压超出了”, 名称数组 [c], “的测量范围！”).加入文本 ()
                                横位数组.清除 ( [c], 纵位数组 [c], 77, 68)
                                图片号.画图片 ( [25], 横位数组 [c], 纵位数组 [c], 77, 68, 负 (取颜色值 (255, 255, 255)))
                                .复制 (5)
                            .判断 (小于 (正侧电势, 负侧电势))
                                相加 (“   ”, 名称数组 [c], “负极电势大于正极电势，无法测得真实结果！”).加入文本 ()
                            .默认
                                
                            .判断结束
                            加入成员 (未被忽略元件, 名称数组 [c])
                        .如果真结束
                        
                    .如果真结束
                    
                .计次循环尾 ()
                效果初始化 (未被忽略元件)
                返回 (假)
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
    赋值 (记算次数, 相加 (记算次数, 1))
    .如果真 (大于或等于 (记算次数, 200))
        .如果真 (等于 (信息框 (相加 (“由于电路处理较为复杂，现仅支持含一个电源的电路形式，”, #换行符, “计划以后升级为支持任意数量的任意元件。见谅！”), 相加 (0, 64), “提示：”), 0))
            赋值 (.内容, “提示：电路结构超出程序的分析能力。”)
            返回 (假)
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()

赋值 (不需精简, 假)
.判断循环首 (等于 (不需精简, 假))
    赋值 (不需精简, 真)
    .计次循环首 (取数组成员数 (等电位精简接头), a)
        
        .如果真 (等于 (等电位精简接头 [a], “”))
            删除成员 (等电位精简接头, a, 1)
            赋值 (不需精简, 假)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断循环尾 ()

 ' 根据最终简化成一个电阻元件分析出所有底层元件的两端电势和电流
.如果真 (等于 (取数组成员数 (名称数组1), 2))
    .如果 (等于 (名称数组1 [1], “电源1”))
        赋值 (最终元件名称, 名称数组1 [2])
    .否则
        赋值 (最终元件名称, 名称数组1 [1])
    .如果结束
    赋值 (接头组1, 分割文本 (等电位精简接头 [1], “|”, ))
    赋值 (接头组2, 分割文本 (等电位精简接头 [2], “|”, ))
    
    .如果真 (并且 (等于 (取数组成员数 (接头组1), 2), 等于 (取数组成员数 (接头组2), 2))) ' 根据最终剩下的元件两端电压和元件电阻计算出内部所有有效元件的两端电压各电流。
        .判断开始 (等于 (接头组1 [1], “电源1∧”))
            .判断开始 (等于 (取文本右边 (接头组1 [2], 2), “∧”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 电源电压, 0, 分析报告)
            .判断 (等于 (取文本右边 (接头组1 [2], 2), “∨”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 0, 电源电压, 分析报告)
            .默认
                
            .判断结束
            
            
        .判断 (等于 (接头组1 [2], “电源1∧”))
            .判断开始 (等于 (取文本右边 (接头组1 [1], 2), “∧”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 电源电压, 0, 分析报告)
            .判断 (等于 (取文本右边 (接头组1 [1], 2), “∨”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 0, 电源电压, 分析报告)
            .默认
                
            .判断结束
            
            
        .判断 (等于 (接头组2 [1], “电源1∧”))
            .判断开始 (等于 (取文本右边 (接头组2 [2], 2), “∨”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 0, 电源电压, 分析报告)
            .判断 (等于 (取文本右边 (接头组2 [2], 2), “∧”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 电源电压, 0, 分析报告)
            .默认
                
            .判断结束
            
            
        .判断 (等于 (接头组2 [2], “电源1∧”))
            .判断开始 (等于 (取文本右边 (接头组2 [1], 2), “∨”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 0, 电源电压, 分析报告)
            .判断 (等于 (取文本右边 (接头组2 [1], 2), “∧”))
                根据元件名和双侧电势生成分析报告 (名称数组, 电阻数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 最终元件名称, 电源电压, 0, 分析报告)
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .如果真结束
    
.如果真结束

输出调试文本 (分析报告)
 ' [1]电源 [2]开关 [3]电灯 [4]电阻 [5]变阻 [6]电动 [7]电流 [8]电压
 ' 分析报告样式：  | 元件名 @ ∧侧电势 @ ∨侧电势 @ 电流 |   实例：电阻1@6@2@0.04|电阻2@2@0@0.02|电阻3@2@0@0.02
.如果 (等于 (分析报告, “”))
    返回 (假)
.否则
    赋值 (.内容, “提示：电路畅通。”)
.如果结束
.如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有单个电阻元件的电路
    .计次循环首 (取数组成员数 (名称数组), a)
        赋值 (报告对象, 分割文本 (分析报告, “@”, ))
        赋值 (元件名, 报告对象 [1])
        赋值 (正侧电势, 到数值 (报告对象 [2]))
        赋值 (负侧电势, 到数值 (报告对象 [3]))
        赋值 (元件电流, 到数值 (报告对象 [4]))
        
        .判断开始 (并且 (等于 (类别数组 [a], 3), 等于 (名称数组 [a], 元件名))) ' 电灯
            加入成员 (未被忽略元件, 名称数组 [a])
            .判断开始 (小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3))) ' 灭
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [4], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)))) ' 暗
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [5], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a]))) ' 亮
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [6], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a]))
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [7], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
            .默认
                
            .判断结束
            
        .判断 (并且 (等于 (类别数组 [a], 6), 等于 (名称数组 [a], 元件名))) ' 电动机
            加入成员 (未被忽略元件, 名称数组 [a])
            .判断开始 (小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)))
                .计次循环首 (10, b)
                    .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                        赋值 (电机号, b)
                    .如果真结束
                    
                .计次循环尾 ()
                赋值 (电机横位 [电机号], 横位数组 [a])
                赋值 (电机纵位 [电机号], 纵位数组 [a])
                .判断开始 (等于 (电机号, 1))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 2))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 3))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 4))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 5))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 6))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 7))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 8))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 9))
                    赋值 (.时钟周期, 0)
                .判断 (等于 (电机号, 10))
                    赋值 (.时钟周期, 0)
                .默认
                    
                .判断结束
                
                
            .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2))))
                .计次循环首 (10, b)
                    .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                        赋值 (电机号, b)
                    .如果真结束
                    
                .计次循环尾 ()
                赋值 (电机横位 [电机号], 横位数组 [a])
                赋值 (电机纵位 [电机号], 纵位数组 [a])
                .如果 (大于 (正侧电势, 负侧电势))
                    赋值 (正向转动 [电机号], 真)
                .否则
                    赋值 (正向转动 [电机号], 假)
                .如果结束
                
                .判断开始 (等于 (电机号, 1))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 2))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 3))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 4))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 5))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 6))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 7))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 8))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 9))
                    赋值 (.时钟周期, 800)
                .判断 (等于 (电机号, 10))
                    赋值 (.时钟周期, 800)
                .默认
                    
                .判断结束
                
                
            .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a])))
                .计次循环首 (10, b)
                    .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                        赋值 (电机号, b)
                    .如果真结束
                    
                .计次循环尾 ()
                赋值 (电机横位 [电机号], 横位数组 [a])
                赋值 (电机纵位 [电机号], 纵位数组 [a])
                
                .如果 (大于 (正侧电势, 负侧电势))
                    赋值 (正向转动 [电机号], 真)
                .否则
                    赋值 (正向转动 [电机号], 假)
                .如果结束
                
                .判断开始 (等于 (电机号, 1))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 2))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 3))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 4))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 5))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 6))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 7))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 8))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 9))
                    赋值 (.时钟周期, 250)
                .判断 (等于 (电机号, 10))
                    赋值 (.时钟周期, 250)
                .默认
                    
                .判断结束
                
                
            .判断 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a]))
                .计次循环首 (10, b)
                    .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                        赋值 (电机号, b)
                    .如果真结束
                    
                .计次循环尾 ()
                赋值 (电机横位 [电机号], 横位数组 [a])
                赋值 (电机纵位 [电机号], 纵位数组 [a])
                
                .如果 (大于 (正侧电势, 负侧电势))
                    赋值 (正向转动 [电机号], 真)
                .否则
                    赋值 (正向转动 [电机号], 假)
                .如果结束
                
                .判断开始 (等于 (电机号, 1))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 2))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 3))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 4))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 5))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 6))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 7))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 8))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 9))
                    赋值 (.时钟周期, 90)
                .判断 (等于 (电机号, 10))
                    赋值 (.时钟周期, 90)
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.否则
    赋值 (报告节段, 分割文本 (分析报告, “|”, )) ' 电路中有多个元件时
    .计次循环首 (取数组成员数 (名称数组), a)
        .计次循环首 (取数组成员数 (报告节段), b)
            赋值 (报告对象, 分割文本 (报告节段 [b], “@”, ))
            赋值 (元件名, 报告对象 [1])
            赋值 (正侧电势, 到数值 (报告对象 [2]))
            赋值 (负侧电势, 到数值 (报告对象 [3]))
            赋值 (元件电流, 到数值 (报告对象 [4]))
            .如果真 (并且 (等于 (类别数组 [a], 3), 等于 (名称数组 [a], 元件名))) ' 电灯
                加入成员 (未被忽略元件, 名称数组 [a])
                .判断开始 (小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3))) ' 灭
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [4], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)))) ' 暗
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [5], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a]))) ' 亮
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [6], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a])) ' 坏
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [7], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .默认
                    
                .判断结束
                
            .如果真结束
            .如果真 (并且 (等于 (类别数组 [a], 6), 等于 (名称数组 [a], 元件名))) ' 电动
                加入成员 (未被忽略元件, 名称数组 [a])
                .判断开始 (小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)))
                    .计次循环首 (10, b)
                        .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                            赋值 (电机号, b)
                        .如果真结束
                        
                    .计次循环尾 ()
                    赋值 (电机横位 [电机号], 横位数组 [a])
                    赋值 (电机纵位 [电机号], 纵位数组 [a])
                    
                    .判断开始 (等于 (电机号, 1))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 2))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 3))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 4))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 5))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 6))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 7))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 8))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 9))
                        赋值 (.时钟周期, 0)
                    .判断 (等于 (电机号, 10))
                        赋值 (.时钟周期, 0)
                    .默认
                        
                    .判断结束
                    
                .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相除 (额压数组 [a], 3)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2))))
                    .计次循环首 (10, b)
                        .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                            赋值 (电机号, b)
                        .如果真结束
                        
                    .计次循环尾 ()
                    赋值 (电机横位 [电机号], 横位数组 [a])
                    赋值 (电机纵位 [电机号], 纵位数组 [a])
                    
                    .如果 (大于 (正侧电势, 负侧电势))
                        赋值 (正向转动 [电机号], 真)
                    .否则
                        赋值 (正向转动 [电机号], 假)
                    .如果结束
                    
                    .判断开始 (等于 (电机号, 1))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 2))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 3))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 4))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 5))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 6))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 7))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 8))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 9))
                        赋值 (.时钟周期, 800)
                    .判断 (等于 (电机号, 10))
                        赋值 (.时钟周期, 800)
                    .默认
                        
                    .判断结束
                    
                .判断 (并且 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 相乘 (相除 (额压数组 [a], 3), 2)), 小于或等于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a])))
                    .计次循环首 (10, b)
                        .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                            赋值 (电机号, b)
                        .如果真结束
                        
                    .计次循环尾 ()
                    赋值 (电机横位 [电机号], 横位数组 [a])
                    赋值 (电机纵位 [电机号], 纵位数组 [a])
                    
                    .如果 (大于 (正侧电势, 负侧电势))
                        赋值 (正向转动 [电机号], 真)
                    .否则
                        赋值 (正向转动 [电机号], 假)
                    .如果结束
                    
                    .判断开始 (等于 (电机号, 1))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 2))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 3))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 4))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 5))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 6))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 7))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 8))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 9))
                        赋值 (.时钟周期, 250)
                    .判断 (等于 (电机号, 10))
                        赋值 (.时钟周期, 250)
                    .默认
                        
                    .判断结束
                    
                    
                .判断 (大于 (取绝对值 (相减 (正侧电势, 负侧电势)), 额压数组 [a]))
                    .计次循环首 (10, b)
                        .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                            赋值 (电机号, b)
                        .如果真结束
                        
                    .计次循环尾 ()
                    赋值 (电机横位 [电机号], 横位数组 [a])
                    赋值 (电机纵位 [电机号], 纵位数组 [a])
                    
                    .如果 (大于 (正侧电势, 负侧电势))
                        赋值 (正向转动 [电机号], 真)
                    .否则
                        赋值 (正向转动 [电机号], 假)
                    .如果结束
                    
                    .判断开始 (等于 (电机号, 1))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 2))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 3))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 4))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 5))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 6))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 7))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 8))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 9))
                        赋值 (.时钟周期, 90)
                    .判断 (等于 (电机号, 10))
                        赋值 (.时钟周期, 90)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.如果结束

.计次循环首 (取数组成员数 (名称数组), a) ' 电路无效效部分的元件效果
    .如果真 (大于 (取数组成员数 (未被忽略元件), 0))
        赋值 (临时判断, 假)
        .计次循环首 (取数组成员数 (未被忽略元件), b)
            .如果真 (等于 (未被忽略元件 [b], 名称数组 [a]))
                赋值 (临时判断, 真)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (等于 (临时判断, 真))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .判断开始 (等于 (类别数组 [a], 3)) ' 电灯
         ' 灭
        横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
        图片号.画图片 ( [4], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
        
    .判断 (等于 (类别数组 [a], 6)) ' 电动
        .计次循环首 (10, b)
            .如果真 (等于 (名称数组 [a], 电机数组 [b]))
                赋值 (电机号, b)
            .如果真结束
            
        .计次循环尾 ()
        
        赋值 (电机横位 [电机号], 横位数组 [a])
        赋值 (电机纵位 [电机号], 纵位数组 [a])
        
        .判断开始 (等于 (电机号, 1))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 2))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 3))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 4))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 5))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 6))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 7))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 8))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 9))
            赋值 (.时钟周期, 0)
        .判断 (等于 (电机号, 10))
            赋值 (.时钟周期, 0)
        .默认
            
        .判断结束
        
    .判断 (等于 (类别数组 [a], 7)) ' 电流器如果与元件串联，则电流就是元件的电流,如果电流器同时接多个元件，则电流为这些元件流向电流器方向电流的和（可以正向与负向抵消）
        赋值 (正极不空, 假)
        赋值 (负极不空, 假)
        赋值 (电流变量, 0)
        合并及精简别的元件 (名称数组 [a], 等电位独立接头, 名称数组, 类别数组, 状态数组, 电阻数组, 等电位接头)
        
        .计次循环首 (取数组成员数 (等电位接头), b)
            赋值 (接头组1, 分割文本 (等电位接头 [b], “|”, ))
            .判断开始 (并且 (等于 (取数组成员数 (接头组1), 2), 等于 (接头组1 [1], 相加 (名称数组 [a], “∧”)), 等于 (寻找文本 (等电位接头 [b], “电源1∧”, 1, 假), -1), 等于 (寻找文本 (等电位接头 [b], “电源1∨”, 1, 假), -1))) ' 串联到电流器的正极
                .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                    赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                    赋值 (元件名, 报告对象 [1])
                    .如果真 (等于 (接头组1 [2], 相加 (元件名, “∧”)))
                        赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                        赋值 (正极不空, 真)
                    .如果真结束
                    .如果真 (等于 (接头组1 [2], 相加 (元件名, “∨”)))
                        赋值 (流表电流, 到数值 (报告对象 [4]))
                        赋值 (正极不空, 真)
                    .如果真结束
                    
                .否则
                    赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                    .计次循环首 (取数组成员数 (报告节段), d)
                        赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (等于 (接头组1 [2], 相加 (元件名, “∧”)))
                            赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                            赋值 (正极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        .如果真 (等于 (接头组1 [2], 相加 (元件名, “∨”)))
                            赋值 (流表电流, 到数值 (报告对象 [4]))
                            赋值 (正极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果结束
                .如果真 (等于 (正极不空, 真))
                    跳出循环 ()
                .如果真结束
                
            .判断 (并且 (等于 (取数组成员数 (接头组1), 2), 等于 (接头组1 [2], 相加 (名称数组 [a], “∧”)), 等于 (寻找文本 (等电位接头 [b], “电源1∧”, 1, 假), -1), 等于 (寻找文本 (等电位接头 [b], “电源1∨”, 1, 假), -1))) ' 串联到电流器的正极
                .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                    赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                    赋值 (元件名, 报告对象 [1])
                    .如果真 (等于 (接头组1 [1], 相加 (元件名, “∧”)))
                        赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                        赋值 (正极不空, 真)
                    .如果真结束
                    .如果真 (等于 (接头组1 [1], 相加 (元件名, “∨”)))
                        赋值 (流表电流, 到数值 (报告对象 [4]))
                        赋值 (正极不空, 真)
                    .如果真结束
                    
                .否则
                    赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                    .计次循环首 (取数组成员数 (报告节段), d)
                        赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (等于 (接头组1 [1], 相加 (元件名, “∧”)))
                            赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                            赋值 (正极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        .如果真 (等于 (接头组1 [1], 相加 (元件名, “∨”)))
                            赋值 (流表电流, 到数值 (报告对象 [4]))
                            赋值 (正极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果结束
                .如果真 (等于 (正极不空, 真))
                    跳出循环 ()
                .如果真结束
                
            .判断 (并且 (等于 (取数组成员数 (接头组1), 2), 等于 (接头组1 [2], 相加 (名称数组 [a], “∨”)), 等于 (寻找文本 (等电位接头 [b], “电源1∧”, 1, 假), -1), 等于 (寻找文本 (等电位接头 [b], “电源1∨”, 1, 假), -1))) ' 串联到电流器的负极
                .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                    赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                    赋值 (元件名, 报告对象 [1])
                    .如果真 (等于 (接头组1 [1], 相加 (元件名, “∧”)))
                        赋值 (流表电流, 到数值 (报告对象 [4]))
                        赋值 (负极不空, 真)
                    .如果真结束
                    .如果真 (等于 (接头组1 [1], 相加 (元件名, “∨”)))
                        赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                        赋值 (负极不空, 真)
                    .如果真结束
                    
                .否则
                    赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                    .计次循环首 (取数组成员数 (报告节段), d)
                        赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (等于 (接头组1 [1], 相加 (元件名, “∧”)))
                            赋值 (流表电流, 到数值 (报告对象 [4]))
                            赋值 (负极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        .如果真 (等于 (接头组1 [1], 相加 (元件名, “∨”)))
                            赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                            赋值 (负极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果结束
                .如果真 (等于 (负极不空, 真))
                    跳出循环 ()
                .如果真结束
                
            .判断 (并且 (等于 (取数组成员数 (接头组1), 2), 等于 (接头组1 [1], 相加 (名称数组 [a], “∨”)), 等于 (寻找文本 (等电位接头 [b], “电源1∧”, 1, 假), -1), 等于 (寻找文本 (等电位接头 [b], “电源1∨”, 1, 假), -1))) ' 串联到电流器的负极
                .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                    赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                    赋值 (元件名, 报告对象 [1])
                    .如果真 (等于 (接头组1 [2], 相加 (元件名, “∧”)))
                        赋值 (流表电流, 到数值 (报告对象 [4]))
                        赋值 (负极不空, 真)
                    .如果真结束
                    .如果真 (等于 (接头组1 [2], 相加 (元件名, “∨”)))
                        赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                        赋值 (负极不空, 真)
                    .如果真结束
                    
                .否则
                    赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                    .计次循环首 (取数组成员数 (报告节段), d)
                        赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (等于 (接头组1 [2], 相加 (元件名, “∧”)))
                            赋值 (流表电流, 到数值 (报告对象 [4]))
                            赋值 (负极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        .如果真 (等于 (接头组1 [2], 相加 (元件名, “∨”)))
                            赋值 (流表电流, 负 (到数值 (报告对象 [4])))
                            赋值 (负极不空, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                .如果结束
                .如果真 (等于 (负极不空, 真))
                    跳出循环 ()
                .如果真结束
                
            .判断 (并且 (大于 (取数组成员数 (接头组1), 2), 等于 (寻找文本 (等电位接头 [b], “电源1∧”, 1, 假), -1), 等于 (寻找文本 (等电位接头 [b], “电源1∨”, 1, 假), -1))) ' 电流器一端与多个元件相连时
                
                赋值 (临时判断, 假)
                赋值 (电流变量, 0)
                .计次循环首 (取数组成员数 (接头组1), c)
                    .如果真 (等于 (接头组1 [c], 相加 (名称数组 [a], “∧”)))
                        赋值 (临时判断, 真)
                    .如果真结束
                    
                .计次循环尾 ()
                .如果真 (等于 (临时判断, 真))
                    .计次循环首 (取数组成员数 (接头组1), c)
                        赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                        .计次循环首 (取数组成员数 (报告节段), d)
                            赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                            赋值 (元件名, 报告对象 [1])
                            赋值 (元件电流, 到数值 (报告对象 [4]))
                            .如果真 (等于 (接头组1 [c], 相加 (元件名, “∧”)))
                                赋值 (电流变量, 相减 (电流变量, 到数值 (报告对象 [4])))
                                赋值 (正极不空, 真)
                                
                            .如果真结束
                            .如果真 (等于 (接头组1 [c], 相加 (元件名, “∨”)))
                                赋值 (电流变量, 相加 (电流变量, 到数值 (报告对象 [4])))
                                赋值 (正极不空, 真)
                            .如果真结束
                            
                        .计次循环尾 ()
                    .计次循环尾 ()
                    
                .如果真结束
                .如果真 (等于 (正极不空, 真))
                    赋值 (临时判断, 假)
                    .计次循环首 (取数组成员数 (等电位接头), d)
                        .如果真 (不等于 (寻找文本 (等电位接头 [d], 相加 (名称数组 [a], “∨”), 1, 假), -1)) ' 判定负极是否空接，如果空接则正极不空失去意义，所以把正极不空也由真改为假
                            赋值 (临时判断, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                    .如果 (等于 (临时判断, 真))
                        赋值 (流表电流, 电流变量)
                        跳出循环 ()
                        
                    .否则
                        赋值 (正极不空, 假)
                    .如果结束
                    
                .如果真结束
                
                
                赋值 (临时判断, 假)
                赋值 (电流变量, 0)
                .计次循环首 (取数组成员数 (接头组1), c)
                    .如果真 (等于 (接头组1 [c], 相加 (名称数组 [a], “∨”)))
                        赋值 (临时判断, 真)
                    .如果真结束
                    
                .计次循环尾 ()
                .如果真 (等于 (临时判断, 真))
                    .计次循环首 (取数组成员数 (接头组1), c)
                        
                        赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                        .计次循环首 (取数组成员数 (报告节段), d)
                            赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                            赋值 (元件名, 报告对象 [1])
                            赋值 (元件电流, 到数值 (报告对象 [4]))
                            .如果真 (等于 (接头组1 [c], 相加 (元件名, “∧”)))
                                赋值 (电流变量, 相加 (电流变量, 到数值 (报告对象 [4])))
                                赋值 (负极不空, 真)
                                
                            .如果真结束
                            .如果真 (等于 (接头组1 [c], 相加 (元件名, “∨”)))
                                赋值 (电流变量, 相减 (电流变量, 到数值 (报告对象 [4])))
                                赋值 (负极不空, 真)
                            .如果真结束
                            
                        .计次循环尾 ()
                    .计次循环尾 ()
                    
                .如果真结束
                .如果真 (等于 (负极不空, 真))
                    赋值 (临时判断, 假)
                    .计次循环首 (取数组成员数 (等电位接头), d)
                        .如果真 (不等于 (寻找文本 (等电位接头 [d], 相加 (名称数组 [a], “∧”), 1, 假), -1)) ' 判定正极是否空接，如果空接则负极不空失去意义，所以把负极不空也由真改为假
                            赋值 (临时判断, 真)
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                    .如果 (等于 (临时判断, 真))
                        赋值 (流表电流, 电流变量)
                        跳出循环 ()
                        
                    .否则
                        赋值 (负极不空, 假)
                    .如果结束
                    
                .如果真结束
                
            .默认
                
            .判断结束
            
        .计次循环尾 ()
        .判断开始 (并且 (大于或等于 (流表电流, 0), 小于或等于 (流表电流, 额流数组 [a]), 或者 (等于 (正极不空, 真), 等于 (负极不空, 真))))
            
            相加 (“   ”, 名称数组 [a], “测量值为：”, 到文本 (流表电流), “安培”).加入文本 ()
            .判断开始 (等于 (流表电流, 0))
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [18], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (并且 (大于 (流表电流, 0), 小于或等于 (流表电流, 相除 (额流数组 [a], 2))))
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [19], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (并且 (大于 (流表电流, 相除 (额流数组 [a], 2)), 小于或等于 (流表电流, 额流数组 [a])))
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [20], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (等于 (流表电流, 额流数组 [a]))
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [21], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .默认
                
            .判断结束
            
        .判断 (并且 (大于或等于 (流表电流, 0), 大于 (流表电流, 额流数组 [a]), 或者 (等于 (正极不空, 真), 等于 (负极不空, 真))))
            相加 (“   ”, 名称数组 [a], “电流超出了”, 名称数组 [a], “的测量范围！”).加入文本 ()
            横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
            图片号.画图片 ( [21], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
            
        .判断 (并且 (小于 (流表电流, 0), 或者 (等于 (正极不空, 真), 等于 (负极不空, 真))))
            相加 (“   ”, 名称数组 [a], “电流与”, 名称数组 [a], “的规定电流方向相反，无法测得真实结果！”).加入文本 ()
            横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
            图片号.画图片 ( [18], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
            
        .判断 (并且 (等于 (正极不空, 假), 等于 (负极不空, 假)))
            相加 (“   ”, 名称数组 [a], “某端空接或者与无效电路连接。”).加入文本 ()
            横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
            图片号.画图片 ( [18], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
        .默认
            
        .判断结束
        
        
    .判断 (等于 (类别数组 [a], 8)) ' 电压器   ' 先找到电压器端点所在的等电位接头群，如果在这个接头群中找到分析报告中的元件某接头，则这接头电势就是电压器端点的电势，电压值就是两电势之差。
        赋值 (正极不空, 假)
        赋值 (负极不空, 假)
        .计次循环首 (取数组成员数 (等电位互联接头), b)
            赋值 (接头组1, 分割文本 (等电位互联接头 [b], “|”, ))
            .计次循环首 (取数组成员数 (接头组1), c)
                .如果真 (等于 (接头组1 [c], 相加 (名称数组 [a], “∧”))) ' 电压器正侧
                    .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                        赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∧”), 1, 假), -1))
                            赋值 (正侧电势, 到数值 (报告对象 [2]))
                            赋值 (正极不空, 真)
                        .如果真结束
                        .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∨”), 1, 假), -1))
                            赋值 (正侧电势, 到数值 (报告对象 [3]))
                            赋值 (正极不空, 真)
                        .如果真结束
                        
                    .否则
                        赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                        .计次循环首 (取数组成员数 (报告节段), d)
                            赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                            赋值 (元件名, 报告对象 [1])
                            .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∧”), 1, 假), -1))
                                赋值 (正侧电势, 到数值 (报告对象 [2]))
                                赋值 (正极不空, 真)
                                跳出循环 ()
                            .如果真结束
                            .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∨”), 1, 假), -1))
                                赋值 (正侧电势, 到数值 (报告对象 [3]))
                                赋值 (正极不空, 真)
                                跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果结束
                    
                .如果真结束
                .如果真 (等于 (接头组1 [c], 相加 (名称数组 [a], “∨”))) ' 电压器负侧
                    .如果 (等于 (寻找文本 (分析报告, “|”, 1, 假), -1)) ' 只有一个有效元件的分析报告
                        赋值 (报告对象, 分割文本 (分析报告, “@”, ))
                        赋值 (元件名, 报告对象 [1])
                        .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∧”), 1, 假), -1))
                            赋值 (负侧电势, 到数值 (报告对象 [2]))
                            赋值 (负极不空, 真)
                        .如果真结束
                        .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∨”), 1, 假), -1))
                            赋值 (负侧电势, 到数值 (报告对象 [3]))
                            赋值 (负极不空, 真)
                        .如果真结束
                        
                    .否则
                        赋值 (报告节段, 分割文本 (分析报告, “|”, ))
                        .计次循环首 (取数组成员数 (报告节段), d)
                            赋值 (报告对象, 分割文本 (报告节段 [d], “@”, ))
                            赋值 (元件名, 报告对象 [1])
                            .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∧”), 1, 假), -1))
                                赋值 (负侧电势, 到数值 (报告对象 [2]))
                                赋值 (负极不空, 真)
                                跳出循环 ()
                            .如果真结束
                            .如果真 (不等于 (寻找文本 (等电位互联接头 [b], 相加 (元件名, “∨”), 1, 假), -1))
                                赋值 (负侧电势, 到数值 (报告对象 [3]))
                                赋值 (负极不空, 真)
                                跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果结束
                    
                .如果真结束
                
            .计次循环尾 ()
            
        .计次循环尾 ()
        .判断开始 (并且 (等于 (正极不空, 真), 等于 (负极不空, 真)))
            .判断开始 (并且 (大于或等于 (正侧电势, 负侧电势), 小于或等于 (相减 (正侧电势, 负侧电势), 额压数组 [a])))
                相加 (“   ”, 名称数组 [a], “测量值为：”, 到文本 (相减 (正侧电势, 负侧电势)), “伏特”).加入文本 ()
                .判断开始 (等于 (相减 (正侧电势, 负侧电势), 0))
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [22], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 0), 小于或等于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [a], 2))))
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [23], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (并且 (大于 (相减 (正侧电势, 负侧电势), 相除 (额压数组 [a], 2)), 小于 (相减 (正侧电势, 负侧电势), 额压数组 [a])))
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [24], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                    
                .判断 (等于 (相减 (正侧电势, 负侧电势), 额压数组 [a]))
                    横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                    图片号.画图片 ( [25], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                .默认
                    
                .判断结束
                
            .判断 (并且 (大于或等于 (正侧电势, 负侧电势), 大于 (相减 (正侧电势, 负侧电势), 额压数组 [a])))
                相加 (“   ”, 名称数组 [a], “两端电压超出了”, 名称数组 [a], “的测量范围！”).加入文本 ()
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [25], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
                
            .判断 (小于 (正侧电势, 负侧电势))
                相加 (“   ”, 名称数组 [a], “负极电势大于正极电势，无法测得真实结果！”).加入文本 ()
                横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
                图片号.画图片 ( [22], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
            .默认
                
            .判断结束
            
        .判断 (或者 (并且 (等于 (正极不空, 假), 等于 (负极不空, 真)), 并且 (等于 (负极不空, 假), 等于 (正极不空, 真))))
            相加 (“   ”, 名称数组 [a], “某端空接或者与无效电路连接。”).加入文本 ()
            横位数组.清除 ( [a], 纵位数组 [a], 77, 68)
            图片号.画图片 ( [22], 横位数组 [a], 纵位数组 [a], 77, 68, 负 (取颜色值 (255, 255, 255)))
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
.复制 (5)
返回 (真)


.子程序 生成等电位接头组, 空白型, , 
.参数 过程信息文本, 文本型, , 
.参数 等电位互联接头, 文本型, 参考 数组, 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 变量3, 整数型, , , 
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 路径信息段始位置, 整数型, , , 
.局部变量 路径信息段末下一位置, 整数型, , , 
.局部变量 路径信息段长度, 整数型, , , 
.局部变量 路径信息段, 文本型, , , 
.局部变量 此接头出现位置, 整数型, , "0", 
.局部变量 接头组1, 文本型, , "0", 
.局部变量 接头组2, 文本型, , "0", 

 ' 从“过程信息文本”中读出所有元件的等电位连接点并分别记录在“等电位互联接头”数组中
 ' 过程信息文本样式：* №1□104■40◇电源1◆1△0▲6◎0○●☆★‖№2□117■120◇电阻1◆4△0▲◎100○●☆★‖№3□218■73◇电阻2◆4△0▲◎100○●☆★‖⊙电源1∧|电阻1∧‖⊙电源1∨|电阻2∨‖

赋值 (变量1, 0)
.循环判断首 () ' 逐段读取元件接头
    赋值 (位置1, 0)
    赋值 (位置2, 0)
    赋值 (变量1, 相加 (变量1, 1))
    赋值 (路径信息段始位置, 相加 (寻找文本 (过程信息文本, “⊙”, 变量1, 真), 2))
    .如果真 (等于 (路径信息段始位置, 1))
        跳出循环 ()
    .如果真结束
    赋值 (路径信息段末下一位置, 寻找文本 (过程信息文本, “‖”, 路径信息段始位置, 真))
    .如果真 (大于 (路径信息段末下一位置, 路径信息段始位置))
        赋值 (路径信息段长度, 相减 (路径信息段末下一位置, 路径信息段始位置))
        赋值 (路径信息段, 取文本中间 (过程信息文本, 路径信息段始位置, 路径信息段长度))
        赋值 (接头组1, 分割文本 (路径信息段, “|”, )) ' 路径信息段样式： 电源1∨|电阻2∨
         ' 查看“零电阻互联接头”数组中是否有几个成员包含接头数组 [1] ， 如果有则说明它们是互联的，则合并为同一成员
        
        .如果真 (大于 (取数组成员数 (等电位互联接头), 0))
            清除数组 (此接头出现位置)
            .计次循环首 (取数组成员数 (等电位互联接头), 变量2)
                赋值 (接头组2, 分割文本 (等电位互联接头 [变量2], “|”, ))
                .计次循环首 (取数组成员数 (接头组2), 变量3)
                    .如果真 (等于 (接头组1 [1], 接头组2 [变量3]))
                        加入成员 (此接头出现位置, 变量2)
                    .如果真结束
                    
                .计次循环尾 ()
                
            .计次循环尾 ()
            .如果真 (大于 (取数组成员数 (此接头出现位置), 1))
                .变量循环首 (相减 (取数组成员数 (此接头出现位置), 1), 1, -1, 变量2)
                    赋值 (等电位互联接头 [此接头出现位置] [变量2], 相加 (等电位互联接头 [此接头出现位置] [变量2], 等电位互联接头 [此接头出现位置] [相加 (变量2, 1)]))
                    删除成员 (等电位互联接头, 此接头出现位置 [相加 (变量2, 1)], 1)
                .变量循环尾 ()
            .如果真结束
            
        .如果真结束
        
         ' 查看“零电阻互联接头”数组中是否有几个成员包含接头数组 [2]， 如果有则说明它们是互联的，则合并为同一成员
        .如果真 (大于 (取数组成员数 (等电位互联接头), 0))
            清除数组 (此接头出现位置)
            .计次循环首 (取数组成员数 (等电位互联接头), 变量2)
                赋值 (接头组2, 分割文本 (等电位互联接头 [变量2], “|”, ))
                .计次循环首 (取数组成员数 (接头组2), 变量3)
                    .如果真 (等于 (接头组1 [2], 接头组2 [变量3]))
                        加入成员 (此接头出现位置, 变量2)
                    .如果真结束
                    
                .计次循环尾 ()
            .计次循环尾 ()
            .如果真 (大于 (取数组成员数 (此接头出现位置), 1))
                .变量循环首 (相减 (取数组成员数 (此接头出现位置), 1), 1, -1, 变量2)
                    赋值 (等电位互联接头 [此接头出现位置] [变量2], 相加 (等电位互联接头 [此接头出现位置] [变量2], 等电位互联接头 [此接头出现位置] [相加 (变量2, 1)]))
                    删除成员 (等电位互联接头, 此接头出现位置 [相加 (变量2, 1)], 1)
                .变量循环尾 ()
            .如果真结束
            
        .如果真结束
        
         ' 接头数组 [1]和 接头数组 [2]是两个元件零电阻接头，如果它们分别在“等电位互联接头”数组的不同成员中，则合并为同一成员
        .如果真 (大于 (取数组成员数 (等电位互联接头), 0))
            .计次循环首 (取数组成员数 (等电位互联接头), 变量2)
                赋值 (接头组2, 分割文本 (等电位互联接头 [变量2], “|”, )) ' 分解成单个接头
                .计次循环首 (取数组成员数 (接头组2), 变量3)
                    .如果真 (等于 (接头组1 [1], 接头组2 [变量3]))
                        赋值 (位置1, 变量2)
                    .如果真结束
                    .如果真 (等于 (接头组1 [2], 接头组2 [变量3]))
                        赋值 (位置2, 变量2)
                    .如果真结束
                    
                .计次循环尾 ()
            .计次循环尾 ()
            
        .如果真结束
        .判断开始 (并且 (等于 (位置1, 0), 等于 (位置2, 0))) ' 没有找到相同的接头名，自成一组等电位接头
            .如果 (不等于 (接头组1 [1], 接头组1 [2])) ' 如：电源1∨≠电阻2∨
                加入成员 (等电位互联接头, 相加 (接头组1 [1], “|”, 接头组1 [2]))
            .否则
                加入成员 (等电位互联接头, 接头组1 [1])
            .如果结束
            
        .判断 (并且 (大于 (位置1, 0), 等于 (位置2, 0))) ' 接头2没有找到相同的接头名，把它记录在接头1的接头群中
            赋值 (等电位互联接头 [位置1], 相加 (等电位互联接头 [位置1], “|”, 接头组1 [2]))
        .判断 (并且 (等于 (位置1, 0), 大于 (位置2, 0)))
            赋值 (等电位互联接头 [位置2], 相加 (等电位互联接头 [位置2], “|”, 接头组1 [1]))
        .判断 (并且 (大于 (位置1, 0), 大于 (位置2, 0)))
            .判断开始 (小于 (位置1, 位置2))
                赋值 (等电位互联接头 [位置1], 相加 (等电位互联接头 [位置1], “|”, 等电位互联接头 [位置2]))
                删除成员 (等电位互联接头, 位置2, 1)
            .判断 (大于 (位置1, 位置2))
                赋值 (等电位互联接头 [位置2], 相加 (等电位互联接头 [位置2], “|”, 等电位互联接头 [位置1]))
                删除成员 (等电位互联接头, 位置1, 1)
            .判断 (等于 (位置1, 位置2)) ' 已经分别被记录在某个数组成员中
                 ' 不用操作
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .如果真结束
    赋值 (变量1, 路径信息段始位置)
.循环判断尾 (大于 (路径信息段始位置, 2))


.子程序 根据元件名和双侧电势生成分析报告, 空白型, , 
.参数 名称, 文本型, 数组, 
.参数 阻值, 双精度小数型, 数组, 
.参数 拟名称, 文本型, 数组, 
.参数 拟结构, 文本型, 数组, 
.参数 拟阻值, 双精度小数型, 数组, 
.参数 元件名字, 文本型, , 
.参数 正侧电势, 双精度小数型, , 标记有“∧”的接头
.参数 负侧电势, 双精度小数型, , 标记有“∨”的接头
.参数 分析报告, 文本型, 参考, 

.局部变量 变量1, 整数型, , , 循环计次变量
.局部变量 名称数组, 文本型, 静态, "0", 
.局部变量 阻值数组, 双精度小数型, 静态, "0", 
.局部变量 拟电阻名称, 文本型, 静态, "0", 
.局部变量 拟电阻结构, 文本型, 静态, "0", 
.局部变量 拟电阻阻值, 双精度小数型, 静态, "0", 
.局部变量 元件名称, 文本型, , , 
.局部变量 正极电势, 双精度小数型, , , 标记有“∧”的接头
.局部变量 负极电势, 双精度小数型, , , 标记有“∨”的接头
.局部变量 匿名局部变量_10905, 空白型, , , 
.局部变量 是拟电阻, 逻辑型, , , 
.局部变量 电阻结构, 文本型, , , 
.局部变量 停止寻找, 逻辑型, , , 
.局部变量 找到对象, 逻辑型, , , 
.局部变量 匿名局部变量_10910, 空白型, , , 
.局部变量 元件电阻, 双精度小数型, 静态, , 
.局部变量 电流大小, 双精度小数型, 静态, , 
.局部变量 中点电势, 双精度小数型, , , 串联中点
.局部变量 匿名局部变量_10914, 空白型, , , 
.局部变量 成员A元件名称, 文本型, 静态, , 拟电阻结构中左侧元件
.局部变量 成员A元件电阻, 双精度小数型, , , 
.局部变量 成员A正极电势, 双精度小数型, 静态, , 
.局部变量 成员A负极电势, 双精度小数型, 静态, , 
.局部变量 成员B元件名称, 文本型, 静态, , 拟电阻结构中右侧元件
.局部变量 成员B正极电势, 双精度小数型, 静态, , 
.局部变量 成员B负极电势, 双精度小数型, 静态, , 
.局部变量 匿名局部变量_10922, 空白型, , , 
.局部变量 接头组, 文本型, , "0", 

赋值 (名称数组, 名称)
赋值 (阻值数组, 阻值)
赋值 (拟电阻名称, 拟名称)
赋值 (拟电阻结构, 拟结构)
赋值 (拟电阻阻值, 拟阻值)
赋值 (元件名称, 元件名字)
赋值 (正极电势, 正侧电势)
赋值 (负极电势, 负侧电势)
.计次循环首 (取数组成员数 (拟电阻名称), 变量1)
    .如果真 (等于 (元件名字, 拟电阻名称 [变量1]))
        赋值 (元件电阻, 拟电阻阻值 [变量1])
        赋值 (是拟电阻, 真)
        赋值 (电阻结构, 拟电阻结构 [变量1])
        赋值 (停止寻找, 真)
        赋值 (找到对象, 真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (停止寻找, 假))
    .计次循环首 (取数组成员数 (名称数组), 变量1)
        .如果真 (等于 (元件名称, 名称数组 [变量1]))
            赋值 (元件电阻, 阻值数组 [变量1])
            赋值 (是拟电阻, 假)
            赋值 (找到对象, 真)
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
.如果真 (等于 (找到对象, 真))
    赋值 (电流大小, 相除 (相减 (正极电势, 负极电势), 元件电阻))
    .判断开始 (等于 (是拟电阻, 假))
        .如果 (等于 (分析报告, “”))
            赋值 (分析报告, 相加 (元件名称, “@”, 到文本 (正极电势), “@”, 到文本 (负极电势), “@”, 到文本 (电流大小)))
        .否则
            赋值 (分析报告, 相加 (分析报告, “|”, 元件名称, “@”, 到文本 (正极电势), “@”, 到文本 (负极电势), “@”, 到文本 (电流大小)))
        .如果结束
        
    .判断 (等于 (是拟电阻, 真))
        .如果 (不等于 (寻找文本 (电阻结构, “|”, 1, 假), -1)) ' 并联
            赋值 (接头组, 分割文本 (电阻结构, “|”, ))
            .判断开始 (等于 (取文本左边 (接头组 [1], 2), “∧”))
                赋值 (成员A元件名称, 取文本右边 (接头组 [1], 相减 (取文本长度 (接头组 [1]), 2)))
                赋值 (成员A正极电势, 正极电势)
                赋值 (成员A负极电势, 负极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员A元件名称, 成员A正极电势, 成员A负极电势, 分析报告)
                
            .判断 (等于 (取文本左边 (接头组 [1], 2), “∨”))
                赋值 (成员A元件名称, 取文本右边 (接头组 [1], 相减 (取文本长度 (接头组 [1]), 2)))
                赋值 (成员A正极电势, 负极电势)
                赋值 (成员A负极电势, 正极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员A元件名称, 成员A正极电势, 成员A负极电势, 分析报告)
            .默认
                
            .判断结束
            .判断开始 (等于 (取文本左边 (接头组 [2], 2), “∧”))
                赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
                赋值 (成员B正极电势, 正极电势)
                赋值 (成员B负极电势, 负极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员B元件名称, 成员B正极电势, 成员B负极电势, 分析报告)
                
            .判断 (等于 (取文本左边 (接头组 [2], 2), “∨”))
                赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
                赋值 (成员B正极电势, 负极电势)
                赋值 (成员B负极电势, 正极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员B元件名称, 成员B正极电势, 成员B负极电势, 分析报告)
            .默认
                
            .判断结束
            
        .否则
            赋值 (接头组, 分割文本 (电阻结构, “―”, )) ' 串联
            赋值 (成员A元件电阻, 到数值 (取文本右边 (接头组 [1], 相减 (取文本长度 (接头组 [1]), 寻找文本 (接头组 [1], “&”, 1, 假)))))
            赋值 (中点电势, 相减 (正极电势, 相乘 (电流大小, 成员A元件电阻)))
            
            .判断开始 (等于 (取文本左边 (接头组 [1], 2), “∧”))
                赋值 (成员A元件名称, 取文本中间 (接头组 [1], 3, 相减 (寻找文本 (接头组 [1], “&”, 1, 假), 3)))
                赋值 (成员A正极电势, 正极电势)
                赋值 (成员A负极电势, 中点电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员A元件名称, 成员A正极电势, 成员A负极电势, 分析报告)
            .判断 (等于 (取文本左边 (接头组 [1], 2), “∨”))
                赋值 (成员A元件名称, 取文本中间 (接头组 [1], 3, 相减 (寻找文本 (接头组 [1], “&”, 1, 假), 3)))
                赋值 (成员A正极电势, 中点电势)
                赋值 (成员A负极电势, 正极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员A元件名称, 成员A正极电势, 成员A负极电势, 分析报告)
            .默认
                
            .判断结束
            .判断开始 (等于 (取文本左边 (接头组 [2], 2), “∧”))
                赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
                赋值 (成员B正极电势, 中点电势)
                赋值 (成员B负极电势, 负极电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员B元件名称, 成员B正极电势, 成员B负极电势, 分析报告)
            .判断 (等于 (取文本左边 (接头组 [2], 2), “∨”))
                赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
                赋值 (成员B正极电势, 负极电势)
                赋值 (成员B负极电势, 中点电势)
                根据元件名和双侧电势生成分析报告 (名称数组, 阻值数组, 拟电阻名称, 拟电阻结构, 拟电阻阻值, 成员B元件名称, 成员B正极电势, 成员B负极电势, 分析报告)
            .默认
                
            .判断结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 效果初始化, 空白型, , 
.参数 未被忽略元件, 文本型, 可空 数组, 

.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 判断, 逻辑型, , , 
.局部变量 元件横位, 整数型, , , 
.局部变量 元件纵位, 整数型, , , 
.局部变量 元件类别, 整数型, , , 
.局部变量 元件名称, 文本型, , , 
.局部变量 编号元件存在, 逻辑型, , , 

连续赋值 (0, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期, .时钟周期)
.计次循环首 (当前最大编号, 变量1)
    
    赋值 (编号元件存在, 根据编号取元件参数 (变量1, 元件横位, 元件纵位, 元件名称, 元件类别, , , , , , , ))
    .如果真 (并且 (等于 (编号元件存在, 真), 或者 (等于 (元件类别, 3), 等于 (元件类别, 7), 等于 (元件类别, 8))))
        赋值 (判断, 假)
        .如果真 (大于 (取数组成员数 (未被忽略元件), 0)) ' 如果是未被忽略元件，则跳过
            .计次循环首 (取数组成员数 (未被忽略元件), 变量2)
                .如果真 (等于 (未被忽略元件 [变量2], 元件名称))
                    赋值 (判断, 真)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (等于 (判断, 真))
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .判断开始 (等于 (元件类别, 3)) ' 电灯
            元件横位.清除 (元件纵位, 77, 68)
            图片号.画图片 ( [4], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
            
        .判断 (等于 (元件类别, 7)) ' 电流器
            元件横位.清除 (元件纵位, 77, 68)
            图片号.画图片 ( [18], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
            
        .判断 (等于 (元件类别, 8)) ' 电压器
            元件横位.清除 (元件纵位, 77, 68)
            图片号.画图片 ( [22], 元件横位, 元件纵位, 77, 68, 负 (取颜色值 (255, 255, 255)))
        .默认
            
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()
.复制 (5)

.子程序 合并空接元件接头, 空白型, , 把空接的所有元件当作一块导体
.参数 空接元件, 文本型, 数组, 
.参数 零电阻互联接头, 文本型, 参考 数组, 

.局部变量 接头组1, 文本型, , "2", 
.局部变量 接头组2, 文本型, , "0", 
.局部变量 变量1, 整数型, , , 通用变量
.局部变量 变量2, 整数型, , , 通用变量
.局部变量 变量3, 整数型, , , 通用变量
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 

 ' 把空接的所有元件当作一块导体,接头都记录在一组内
.计次循环首 (取数组成员数 (空接元件), 变量1)
    赋值 (接头组1 [1], 相加 (空接元件 [变量1], “∧”))
    赋值 (接头组1 [2], 相加 (空接元件 [变量1], “∨”))
     ' 接头数组 [1]和 接头数组 [2]是空接元件接头，如果它们分别在“零电阻互联接头”数组的不同成员中，则合并为同一成员
    .计次循环首 (取数组成员数 (零电阻互联接头), 变量2)
        赋值 (接头组2, 分割文本 (零电阻互联接头 [变量2], “|”, )) ' 分解成单个接头
        .计次循环首 (取数组成员数 (接头组2), 变量3)
            .如果真 (等于 (接头组1 [1], 接头组2 [变量3]))
                赋值 (位置1, 变量2)
            .如果真结束
            .如果真 (等于 (接头组1 [2], 接头组2 [变量3]))
                赋值 (位置2, 变量2)
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    .判断开始 (并且 (等于 (位置1, 0), 等于 (位置2, 0))) ' 没有找到相同的接头名，自成一组零电阻接头
        加入成员 (零电阻互联接头, 相加 (接头组1 [1], “|”, 接头组1 [2]))
    .判断 (并且 (大于 (位置1, 0), 等于 (位置2, 0))) ' 接头2没有找到相同的接头名，把它记录在接头1的接头群中
        赋值 (零电阻互联接头 [位置1], 相加 (零电阻互联接头 [位置1], “|”, 接头组1 [2]))
    .判断 (并且 (等于 (位置1, 0), 大于 (位置2, 0)))
        赋值 (零电阻互联接头 [位置2], 相加 (零电阻互联接头 [位置2], “|”, 接头组1 [1]))
    .判断 (并且 (大于 (位置1, 0), 大于 (位置2, 0)))
        .判断开始 (小于 (位置1, 位置2))
            赋值 (零电阻互联接头 [位置1], 相加 (零电阻互联接头 [位置1], “|”, 零电阻互联接头 [位置2]))
            删除成员 (零电阻互联接头, 位置2, 1)
        .判断 (大于 (位置1, 位置2))
            赋值 (零电阻互联接头 [位置2], 相加 (零电阻互联接头 [位置2], “|”, 零电阻互联接头 [位置1]))
            删除成员 (零电阻互联接头, 位置1, 1)
        .判断 (等于 (位置1, 位置2)) ' 已经分别被记录在某个数组成员中
             ' 不用操作
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()

.子程序 合并相连导电元件, 空白型, , 当发现电源没有形成回路时用
.参数 名称数组, 文本型, 数组, 
.参数 类别数组, 整数型, 数组, 
.参数 状态数组, 整数型, 数组, 
.参数 等电位接头, 文本型, 参考 数组, 

.局部变量 变量1, 整数型, , , 通用变量
.局部变量 变量2, 整数型, , , 通用变量
.局部变量 变量3, 整数型, , , 通用变量
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 接头组, 文本型, , "0", 

 ' 把所有相连导电元件合成为一个导体
.计次循环首 (取数组成员数 (名称数组), 变量1) ' 合并数组
    .如果真 (或者 (等于 (类别数组 [变量1], 8), 并且 (等于 (类别数组 [变量1], 2), 等于 (状态数组 [变量1], 0)), 等于 (类别数组 [变量1], 1)))
        到循环尾 ()
    .如果真结束
    
    赋值 (位置1, 0)
    赋值 (位置2, 0)
    .计次循环首 (取数组成员数 (等电位接头), 变量2)
        赋值 (接头组, 分割文本 (等电位接头 [变量2], “|”, ))
        .计次循环首 (取数组成员数 (接头组), 变量3)
            .判断开始 (等于 (相加 (名称数组 [变量1], “∧”), 接头组 [变量3]))
                赋值 (位置1, 变量2)
            .判断 (等于 (相加 (名称数组 [变量1], “∨”), 接头组 [变量3]))
                赋值 (位置2, 变量2)
            .默认
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    .判断开始 (并且 (大于 (位置1, 0), 大于 (位置2, 0), 大于 (位置2, 位置1)))
        赋值 (等电位接头 [位置1], 相加 (等电位接头 [位置1], “|”, 等电位接头 [位置2]))
        删除成员 (等电位接头, 位置2, 1)
    .判断 (并且 (大于 (位置1, 0), 大于 (位置2, 0), 大于 (位置1, 位置2)))
        赋值 (等电位接头 [位置2], 相加 (等电位接头 [位置2], “|”, 等电位接头 [位置1]))
        删除成员 (等电位接头, 位置1, 1)
    .默认
        
    .判断结束
    
.计次循环尾 ()

.子程序 合并及精简别的元件, 空白型, , 精简除此电流器以外的无用接头
.参数 电流器名, 文本型, , 
.参数 等电位独立接头, 文本型, 数组, 
.参数 名称数组, 文本型, 数组, 
.参数 类别数组, 整数型, 数组, 
.参数 状态数组, 整数型, 数组, 
.参数 电阻数组, 双精度小数型, 数组, 
.参数 等电位接头, 文本型, 参考 数组, 

.局部变量 变量1, 整数型, , , 通用变量
.局部变量 变量2, 整数型, , , 通用变量
.局部变量 变量3, 整数型, , , 通用变量
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 接头组, 文本型, , "0", 

 ' 把此电流器以外电阻为零的元件(包括其它电流器)精简掉
赋值 (等电位接头, 等电位独立接头)
.计次循环首 (取数组成员数 (名称数组), 变量1) ' 合并数组
    .如果真 (等于 (名称数组 [变量1], 电流器名))
        到循环尾 ()
    .如果真结束
    .如果真 (或者 (等于 (类别数组 [变量1], 7), 并且 (等于 (类别数组 [变量1], 2), 等于 (状态数组 [变量1], 1)), 并且 (等于 (电阻数组 [变量1], 0), 不等于 (类别数组 [变量1], 1), 不等于 (类别数组 [变量1], 8), 不等于 (类别数组 [变量1], 2))))
        赋值 (位置1, 0)
        赋值 (位置2, 0)
        .计次循环首 (取数组成员数 (等电位接头), 变量2)
            赋值 (接头组, 分割文本 (等电位接头 [变量2], “|”, ))
            .计次循环首 (取数组成员数 (接头组), 变量3)
                .判断开始 (等于 (相加 (名称数组 [变量1], “∧”), 接头组 [变量3]))
                    赋值 (位置1, 变量2)
                .判断 (等于 (相加 (名称数组 [变量1], “∨”), 接头组 [变量3]))
                    赋值 (位置2, 变量2)
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
        .计次循环尾 ()
        .判断开始 (并且 (大于 (位置1, 0), 大于 (位置2, 0), 大于 (位置2, 位置1)))
            赋值 (等电位接头 [位置1], 相加 (等电位接头 [位置1], “|”, 等电位接头 [位置2]))
            删除成员 (等电位接头, 位置2, 1)
        .判断 (并且 (大于 (位置1, 0), 大于 (位置2, 0), 大于 (位置1, 位置2)))
            赋值 (等电位接头 [位置2], 相加 (等电位接头 [位置2], “|”, 等电位接头 [位置1]))
            删除成员 (等电位接头, 位置1, 1)
        .默认
            
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (取数组成员数 (名称数组), 变量1) ' 精简元件
    .如果真 (等于 (名称数组 [变量1], 电流器名))
        到循环尾 ()
    .如果真结束
    .如果真 (或者 (等于 (类别数组 [变量1], 7), 等于 (类别数组 [变量1], 8), 等于 (类别数组 [变量1], 2), 并且 (等于 (电阻数组 [变量1], 0), 不等于 (类别数组 [变量1], 1))))
        .计次循环首 (取数组成员数 (等电位接头), 变量2)
            赋值 (接头组, 分割文本 (等电位接头 [变量2], “|”, ))
            赋值 (等电位接头 [变量2], “”)
            .计次循环首 (取数组成员数 (接头组), 变量3)
                .判断开始 (等于 (接头组 [变量3], 相加 (名称数组 [变量1], “∨”)))
                    赋值 (接头组 [变量3], “”)
                .判断 (等于 (接头组 [变量3], 相加 (名称数组 [变量1], “∧”)))
                    赋值 (接头组 [变量3], “”)
                .默认
                    
                .判断结束
                .如果 (等于 (等电位接头 [变量2], “”))
                    赋值 (等电位接头 [变量2], 接头组 [变量3])
                .否则
                    .如果 (等于 (接头组 [变量3], “”))
                        赋值 (等电位接头 [变量2], 等电位接头 [变量2])
                    .否则
                        赋值 (等电位接头 [变量2], 相加 (等电位接头 [变量2], “|”, 接头组 [变量3]))
                    .如果结束
                    
                .如果结束
                
            .计次循环尾 ()
            赋值 (等电位接头 [变量2], 子文本替换 (等电位接头 [变量2], “||”, “|”, 1, , 真))
        .计次循环尾 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 取底层元件, 空白型, , 
.参数 元件名字, 文本型, , 
.参数 名称数组, 文本型, 数组, 
.参数 拟电阻名称, 文本型, 数组, 
.参数 拟电阻结构, 文本型, 数组, 
.参数 成员元件, 文本型, 参考 数组, 

.局部变量 停止寻找, 逻辑型, , , 
.局部变量 电阻结构, 文本型, , , 
.局部变量 是拟电阻, 逻辑型, , , 
.局部变量 接头组, 文本型, , "0", 
.局部变量 成员A元件名称, 文本型, , , 
.局部变量 成员B元件名称, 文本型, , , 
.局部变量 变量1, 整数型, , , 通用变量

 ' 根据电阻或拟电阻名取出内部所有元件名
.计次循环首 (取数组成员数 (拟电阻名称), 变量1)
    .如果真 (等于 (元件名字, 拟电阻名称 [变量1]))
        赋值 (电阻结构, 拟电阻结构 [变量1])
        .如果 (不等于 (寻找文本 (电阻结构, “|”, 1, 假), -1)) ' 并联
            赋值 (接头组, 分割文本 (电阻结构, “|”, ))
            赋值 (成员A元件名称, 取文本右边 (接头组 [1], 相减 (取文本长度 (接头组 [1]), 2)))
            赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
        .否则
            赋值 (接头组, 分割文本 (电阻结构, “―”, ))
            赋值 (成员A元件名称, 取文本中间 (接头组 [1], 3, 相减 (寻找文本 (接头组 [1], “&”, 1, 假), 3)))
            赋值 (成员B元件名称, 取文本右边 (接头组 [2], 相减 (取文本长度 (接头组 [2]), 2)))
        .如果结束
        取底层元件 (成员A元件名称, 名称数组, 拟电阻名称, 拟电阻结构, 成员元件)
        取底层元件 (成员B元件名称, 名称数组, 拟电阻名称, 拟电阻结构, 成员元件)
        赋值 (停止寻找, 真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (停止寻找, 假))
    .计次循环首 (取数组成员数 (名称数组), 变量1)
        .如果真 (等于 (元件名字, 名称数组 [变量1]))
            加入成员 (成员元件, 元件名字)
            返回 ()
        .如果真结束
        
    .计次循环尾 ()
.如果真结束


.子程序 电路_删除数组成员, 空白型, , 
.参数 数组1, 文本型, 可空 数组, 
.参数 数组2, 整数型, 可空 数组, 
.参数 数组3, 双精度小数型, 可空 数组, 
.参数 起始位置, 整数型, , 
.参数 数目, 整数型, , 

删除成员 (数组1, 起始位置, 数目)
删除成员 (数组2, 起始位置, 数目)
删除成员 (数组3, 起始位置, 数目)

.子程序 电路_加入数组成员, 空白型, , 
.参数 数组1, 文本型, 可空 数组, 
.参数 成员值1, 文本型, 可空, 
.参数 数组2, 整数型, 可空 数组, 
.参数 成员值2, 整数型, 可空, 
.参数 数组3, 双精度小数型, 可空 数组, 
.参数 成员值3, 双精度小数型, 可空, 

加入成员 (数组1, 成员值1)
加入成员 (数组2, 成员值2)
加入成员 (数组3, 成员值3)

.子程序 _电压编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改电源电压”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _电阻值编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改电阻值”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _最小值编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改最小电阻”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _最大值编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改最大电阻”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _额压编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改额定电压”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _额流编辑框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (当前元件编号, 0))
    赋值 (窗口标题, “修改额定电流”)
    载入 (窗口_参数输入, , 真)
.如果真结束


.子程序 _类别编辑框_获得焦点, 空白型, , 
获取焦点 ()

.子程序 _名称编辑框_获得焦点, 空白型, , 
获取焦点 ()

.子程序 _单选框_电源_被单击, 空白型, , 
赋值 (画元件, 1)
赋值 (.标记, “1”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_开关_被单击, 空白型, , 
赋值 (画元件, 2)
赋值 (.标记, “2”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_电灯_被单击, 空白型, , 
赋值 (画元件, 3)
赋值 (.标记, “3”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_电阻_被单击, 空白型, , 
赋值 (画元件, 4)
赋值 (.标记, “4”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_变阻器_被单击, 空白型, , 
赋值 (画元件, 5)
赋值 (.标记, “5”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_电动机_被单击, 空白型, , 
赋值 (画元件, 6)
赋值 (.标记, “6”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_电流器_被单击, 空白型, , 
赋值 (画元件, 7)
赋值 (.标记, “7”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_电压器_被单击, 空白型, , 
赋值 (画元件, 8)
赋值 (.标记, “8”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 _单选框_导线_被单击, 空白型, , 
赋值 (画元件, 9)
赋值 (.标记, “9”)
赋值 (.鼠标指针, 到字节集 (2))

.子程序 选择归位, 空白型, , 
赋值 (.选中, 真)
赋值 (.鼠标指针, 到字节集 (14))
连续赋值 (假, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中)

.子程序 _单选框_选择_被单击, 空白型, , 
赋值 (.鼠标指针, 到字节集 (14))

.子程序 _单选框_移动_被单击, 空白型, , 
赋值 (.鼠标指针, 到字节集 (8))

.子程序 _单选框_删除_被单击, 空白型, , 
赋值 (.鼠标指针, #橡皮指针)

.子程序 判断当前状态, 空白型, , 
.局部变量 变量, 整数型, , , 

.如果真 (等于 (.选中, 真))
    赋值 (.鼠标指针, 到字节集 (14))
    赋值 (画元件, 0)
.如果真结束

.如果真 (等于 (.选中, 真))
    赋值 (.鼠标指针, 到字节集 (8))
    赋值 (移动, .选中)
    赋值 (画元件, 0)
.如果真结束

.如果 (等于 (.选中, 真))
    赋值 (.鼠标指针, #橡皮指针)
    赋值 (画元件, 0)
    赋值 (移除, 真)
.否则
    赋值 (移除, 假)
.如果结束

.计次循环首 (9, 变量)
    .如果真 (等于 (多项选择 (变量, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中), 真))
        赋值 (画元件, 到数值 (.标记))
        赋值 (.鼠标指针, 到字节集 (2))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 画板外终止画线或移动, 空白型, , 
.如果真 (等于 (画线, 真))
    赋值 (画线, 假)
    赋值 (线段, “”)
    赋值 (接头, “”)
    刷新画板画面 (过程操作文本)
    电路分析 (过程操作文本)
.如果真结束
.如果真 (并且 (等于 (移动, 真), 等于 (选元件, 真)))
    赋值 (移动, 真)
    赋值 (选元件, 假)
.如果真结束


.子程序 _工具箱底标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _标签_工具箱_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_选择_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_移动_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_删除_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_导线_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 __启动窗口_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _元件箱底标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _标签_元件箱_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电源_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_开关_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电灯_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电阻_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_变阻器_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电动机_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电流器_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _单选框_电压器_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _提示编辑框_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _工具条1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _分组框1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _元件说明标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _标签_说明_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _额流标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _额压标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _最小值标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _最大值标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _电阻值标签_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _电压标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _类别标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _名称标签_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _标签_设置_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

画板外终止画线或移动 ()

.子程序 _关于版权_被选择, 空白型, , 
信息框 (相加 (#程序名称, “ ”, #最新版本, #换行符, “作者：黄凯胜”, #换行符, “大连大有吴涛易语言软件开发有限公司”, #换行符, “http://www.dywt.com.cn”), 0, “关于版权”)
 ' 大连大有吴涛易语言软件开发有限公司
 ' http://www.dywt.com.cn


.窗口程序集 窗口程序集2, , , 

.子程序 _参数编辑框_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (或者 (等于 (字符代码, 45), 等于 (字符代码, 95))) ' 不许填负值
    返回 (0)
.如果真结束


.子程序 _确定_被单击, 空白型, , 
.局部变量 电阻, 文本型, , , 
.局部变量 最小值, 双精度小数型, , , 
.局部变量 最大值, 双精度小数型, , , 
.局部变量 状态, 空白型, , , 

获取焦点 ()
.如果真 (不等于 (.内容, “”))
    .判断开始 (等于 (窗口_参数输入., “修改电源电压”))
        .如果 (等于 (.内容, “0”))
            .如果真 (等于 (信息框 (相加 (_启动窗口..内容, “电压不能为零，请重新输入。”), 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .否则
            修改元件参数 (当前元件编号, “元件电压”, .内容, , )
            赋值 (_启动窗口..内容, .内容)
            窗口_参数输入.销毁 ()
        .如果结束
        
    .判断 (等于 (窗口_参数输入., “修改电阻值”))
        .如果 (等于 (.内容, “0”))
            .如果真 (等于 (信息框 (相加 (_启动窗口..内容, “电阻不能为零，请重新输入。”), 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .否则
            修改元件参数 (当前元件编号, “元件电阻”, .内容, , )
            赋值 (_启动窗口..内容, .内容)
            窗口_参数输入.销毁 ()
        .如果结束
        
    .判断 (等于 (窗口_参数输入., “修改最小电阻”))
        根据编号取元件参数 (当前元件编号, , , , , 状态, , , , 最大值, , )
        赋值 (最小值, 到数值 (.内容))
        .如果 (大于 (最小值, 最大值))
            .如果真 (等于 (信息框 (“最小电阻不能大于最大电阻，请重新输入。”, 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .否则
            .判断开始 (等于 (状态, 0))
                赋值 (电阻, 到文本 (最小值))
            .判断 (等于 (状态, 1))
                赋值 (电阻, 到文本 (相加 (相除 (相减 (最大值, 最小值), 4), 最小值)))
            .判断 (等于 (状态, 2))
                赋值 (电阻, 到文本 (相加 (相除 (相减 (最大值, 最小值), 2), 最小值)))
            .判断 (等于 (状态, 3))
                赋值 (电阻, 到文本 (相加 (相乘 (相除 (相减 (最大值, 最小值), 4), 3), 最小值)))
            .判断 (等于 (状态, 4))
                赋值 (电阻, 到文本 (最大值))
            .默认
                
            .判断结束
            修改元件参数 (当前元件编号, “元件电阻”, 电阻, “最小电阻”, 到文本 (最小值))
            赋值 (_启动窗口..内容, 到文本 (最小值))
            赋值 (_启动窗口..内容, 电阻)
            窗口_参数输入.销毁 ()
            
        .如果结束
        
    .判断 (等于 (窗口_参数输入., “修改最大电阻”))
        根据编号取元件参数 (当前元件编号, , , , , 状态, , , 最小值, , , )
        赋值 (最大值, 到数值 (.内容))
        .判断开始 (小于 (最大值, 最小值))
            .如果真 (等于 (信息框 (“最大电阻不能小于最小电阻，请重新输入。”, 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .判断 (等于 (最大值, 0))
            .如果真 (等于 (信息框 (相加 (_启动窗口..内容, “最大电阻值不能为零，请重新输入。”), 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .判断 (大于 (最大值, 最小值))
            .判断开始 (等于 (状态, 0))
                赋值 (电阻, 到文本 (最小值))
            .判断 (等于 (状态, 1))
                赋值 (电阻, 到文本 (相加 (相除 (相减 (最大值, 最小值), 4), 最小值)))
            .判断 (等于 (状态, 2))
                赋值 (电阻, 到文本 (相加 (相除 (相减 (最大值, 最小值), 2), 最小值)))
            .判断 (等于 (状态, 3))
                赋值 (电阻, 到文本 (相加 (相乘 (相除 (相减 (最大值, 最小值), 4), 3), 最小值)))
            .判断 (等于 (状态, 4))
                赋值 (电阻, 到文本 (最大值))
            .默认
                
            .判断结束
            
            修改元件参数 (当前元件编号, “元件电阻”, 电阻, “最大电阻”, 到文本 (最大值))
            赋值 (_启动窗口..内容, 到文本 (最大值))
            赋值 (_启动窗口..内容, 电阻)
            窗口_参数输入.销毁 ()
            
            
        .默认
            
        .判断结束
        
    .判断 (等于 (窗口_参数输入., “修改额定电压”))
        .如果 (等于 (.内容, “0”))
            .如果真 (等于 (信息框 (相加 (_启动窗口..内容, “额定电压不能为零，请重新输入。”), 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .否则
            修改元件参数 (当前元件编号, “额定电压”, .内容, , )
            赋值 (_启动窗口..内容, .内容)
            窗口_参数输入.销毁 ()
        .如果结束
        
    .判断 (等于 (窗口_参数输入., “修改额定电流”))
        .如果 (等于 (.内容, “0”))
            .如果真 (等于 (信息框 (相加 (_启动窗口..内容, “额定电流不能为零，请重新输入。”), 相加 (0, 64), “提示：”), 0))
                赋值 (.内容, “”)
            .如果真结束
            
        .否则
            修改元件参数 (当前元件编号, “额定电流”, .内容, , )
            赋值 (_启动窗口..内容, .内容)
            窗口_参数输入.销毁 ()
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 _取消_被单击, 空白型, , 
窗口_参数输入.销毁 ()

.子程序 _窗口_参数输入_创建完毕, 空白型, , 
赋值 (窗口_参数输入., 窗口标题)
获取焦点 ()



 ' 不属于任何一个程序集、类模块的函数：
