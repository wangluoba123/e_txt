 ' 文件类型：Windows模块源码

 ' 程序名称：计时信息框
 ' 程序描述：计时信息框
@备注:
计时信息框
 ' 程序作者：无木成林
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库





.DLL命令 API_MessageBox, 整数型, "user32", "MessageBoxA", , 建立消息框窗体　
    .参数 hwnd, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 lpCaption, 文本型, , 
    .参数 wType, 整数型, , 

.DLL命令 API_寻找顶级窗口, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = GetWindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 API_寻找子窗口, 整数型, "user32", "FindWindowExA", , 在窗口列表中寻找与指定条件相符的第一个子窗口　找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。零表示忽略;

.DLL命令 API_取得窗口信息, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息　由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 API_SetWindowLong, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息　指定数据的前一个值
    .参数 hwnd, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 nIndex, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 dwNewLong, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 API_创建线程, 整数型, "", "CreateThread", , 生成线程成功，CreateThread函数返回新线程的句柄。否则返回NULL。线程执行完毕后自动退出（除非进入的是循环）。
    .参数 lpThreadAttributes, 整数型, , 线程的安全属性，缺省为0
    .参数 dwStackSize, 整数型, , 线程的堆栈大小，为0时与进程相同
    .参数 lpStartAddress, 子程序指针, , 线程函数的起始地址
    .参数 lpParameter, 整数型, , 传递线程的上下文,可以传递一个整数型参数。
    .参数 dwCreationFlags, 整数型, , 0：创建线程后立即启动，相反的是标志位CREATE_SUSPENDED，这样您需要稍后显示地让该线程运行（可设为－1）
    .参数 lpThreadId, 整数型, 传址, 内核给新生成的线程分配的线程ID

.DLL命令 API_销毁线程, 空白型, "", "TerminateThread", , 强行中止线程。
    .参数 hThread, 整数型, , CreateThread函数返回的线程句柄
    .参数 dwExitCode, 整数型, , 

.DLL命令 API_执行线程, 空白型, "", "ResumeThread", , 执行挂起的线程，执行完毕后线程自动退出
    .参数 线程句柄, 整数型, , CreateThread函数返回的线程句柄

.DLL命令 API_取中止线程退出代码, 整数型, "kernel32", "GetExitCodeThread", , 获取一个已中止线程的退出代码  非零表示成功，零表示失败。会设置GetLastError
    .参数 线程句柄, 整数型, , 想获取退出代码的一个线程的句柄
    .参数 退出代码, 整数型, 传址, 用于装载线程退出代码的一个长整数变量。如线程尚未中断，则设为常数STILL_ACTIVE;

.DLL命令 API_取前台窗口, 整数型, "user32", "GetForegroundWindow", , 获得前台窗口的句柄。这里的“前台窗口”是指前台应用程序的活动窗口　前台窗口的句柄

.DLL命令 API_取得类名称, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 缓冲区, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 缓冲区长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 API_取窗口标题, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;  

.DLL命令 API_设置窗口标题, 整数型, "user32", "SetWindowTextA", , 设置窗口的标题文字或控件的内容（在vb里使用：针对vb窗体，应使用caption或text属性）　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要设置文字的窗口的句柄
    .参数 窗口标题, 文本型, , 要设到hwnd窗口中的文字;

.DLL命令 API_发送消息, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式　由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 API_清除窗口, 整数型, "user32", "DestroyWindow", , 破坏（即清除）指定的窗口以及它的所有子窗口（在vb里使用：用处不大。原文：it ;    is unlikely to be of much use.）　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲清除的窗口的句柄;

.DLL命令 SetTimer, 整数型, "", "SetTimer", , 
    .参数 hwnd, 整数型, , 
    .参数 event, 整数型, , 
    .参数 out, 整数型, , 
    .参数 lpTimerFunc, 整数型, , 

.DLL命令 API_判断窗口句柄, 整数型, "user32", "IsWindow", , 判断一个窗口句柄是否有效　非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 待检查窗口的句柄;  

.程序集 程序集1, , , 

.程序集变量 集_按钮索引, 整数型, , , 
.程序集变量 集_消息标题, 文本型, , , 
.程序集变量 集_显示位置, 整数型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
高级信息框_线程版 (“test”, #取消是否钮, , 5, 2, 2)

.子程序 高级信息框_线程版, 整数型, 公开, 使用线程的方式来操作。返回值同易语言自带的命令“信息框”
.参数 参_父窗口句柄, 整数型, 可空, 
.参数 参_消息内容, 文本型, , 同易语言自带的命令“信息框”
.参数 参_消息图标, 整数型, 可空, 默认为“#信息图标”。同易语言自带的命令“信息框”
.参数 参_消息标题, 文本型, 可空, 默认为“信息:”。同易语言自带的命令“信息框”
.参数 参_倒计时, 整数型, 可空, 秒。时间到了以后返回计时按钮索引所代表的按钮
.参数 参_计时按钮索引, 整数型, 可空, 默认为第一个按钮。
.参数 参_计时显示位置, 整数型, 可空, 0、信息框标题的尾部；1、信息框内容的尾部；2、在计时按钮上显示(默认返回的按钮，即倒数第二个参数所设置的按钮)

.局部变量 局_线程, 整数型, , , 
.局部变量 局_返回值, 整数型, , , 

.如果真 (是否为空 (参_消息图标))
    赋值 (参_消息图标, #信息图标)
.如果真结束
.如果真 (是否为空 (参_消息标题))
    赋值 (参_消息标题, “信息:”)
.如果真结束
.如果真 (是否为空 (参_计时按钮索引))
    赋值 (参_计时按钮索引, 1)
.如果真结束
赋值 (集_按钮索引, 参_计时按钮索引)
.如果真 (等于 (是否为空 (参_倒计时), 假))
    赋值 (局_线程, 模块_建立线程 (&处理线程, 参_倒计时, 真))
.如果真结束
赋值 (集_消息标题, 参_消息标题)
赋值 (集_显示位置, 参_计时显示位置)
赋值 (局_返回值, API_MessageBox (参_父窗口句柄, 参_消息内容, 参_消息标题, 参_消息图标))
模块_中止线程 (局_线程)
.判断开始 (等于 (局_返回值, 1))
    返回 (#确认钮)
.判断 (等于 (局_返回值, 2))
    返回 (#取消钮)
.判断 (等于 (局_返回值, 3))
    返回 (#放弃钮)
.判断 (等于 (局_返回值, 4))
    返回 (#重试钮)
.判断 (等于 (局_返回值, 5))
    返回 (#忽略钮)
.判断 (等于 (局_返回值, 6))
    返回 (#是钮)
.判断 (等于 (局_返回值, 7))
    返回 (#否钮)
.默认
     ' 本源码来自易语言资源网(www.wodesoft.com)
.判断结束

返回 (局_返回值)

.子程序 处理线程, 空白型, , 
.参数 参_存留时间, 整数型, , 

.局部变量 局_测试句柄, 整数型, , , 
.局部变量 局_目标句柄, 整数型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_默认标题, 文本型, , , 
.局部变量 局_显示句柄, 整数型, , , 

.如果真 (小于或等于 (参_存留时间, 0))
    返回 ()
.如果真结束
 ' 实际在寻找句柄的时候，最好能继续验证子窗口的句柄以便确认窗口没有“找错”。
赋值 (局_测试句柄, API_寻找顶级窗口 (“#32770”, 集_消息标题))
.计次循环首 (集_按钮索引, 局_计次)
    赋值 (局_目标句柄, API_寻找子窗口 (局_测试句柄, 局_目标句柄, “Button”, 字符 (0)))
.计次循环尾 ()
.判断循环首 (等于 (局_目标句柄, 0))
    赋值 (局_测试句柄, API_寻找顶级窗口 (“#32770”, 集_消息标题))
    .计次循环首 (集_按钮索引, 局_计次)
        赋值 (局_目标句柄, API_寻找子窗口 (局_测试句柄, 局_目标句柄, “Button”, 字符 (0)))
    .计次循环尾 ()
.判断循环尾 ()
.判断开始 (等于 (集_显示位置, 0))
    赋值 (局_显示句柄, 局_测试句柄)
.判断 (等于 (集_显示位置, 2))
    赋值 (局_显示句柄, 局_目标句柄)
.判断 (等于 (集_显示位置, 1))
    赋值 (局_显示句柄, API_寻找子窗口 (局_测试句柄, 0, “Static”, 字符 (0)))
.默认
    赋值 (局_显示句柄, 局_目标句柄)
.判断结束
赋值 (局_默认标题, _取窗口标题 (局_显示句柄))
.变量循环首 (相减 (参_存留时间, 1), 0, -1, 局_计次)
    .如果 (等于 (局_显示句柄, 局_目标句柄))
        API_设置窗口标题 (局_显示句柄, 相加 (局_默认标题, “(”, 到文本 (相加 (局_计次, 1)), “)”))
    .否则
        API_设置窗口标题 (局_显示句柄, 相加 (局_默认标题, “(剩余:”, 到文本 (相加 (局_计次, 1)), “秒)”))
    .如果结束
    延时 (1000)
    ' 本源码来自易语言资源网(www.wodesoft.com)
.变量循环尾 ()
 ' 为了避免其他干扰而没有单击按钮
.判断循环首 (不等于 (API_判断窗口句柄 (局_目标句柄), 0))
    API_发送消息 (局_目标句柄, 513, 0, 0)
    API_发送消息 (局_目标句柄, 514, 0, 0)
.判断循环尾 ()

.子程序 _取窗口标题, 文本型, , 
.参数 参_窗口句柄, 整数型, , 

.局部变量 局_文本缓冲区, 文本型, , , 

赋值 (局_文本缓冲区, 取空白文本 (255))
API_取窗口标题 (参_窗口句柄, 局_文本缓冲区, 255)
返回 (局_文本缓冲区)

.子程序 模块_建立线程, 整数型, , 
.参数 子程序指针, 子程序指针, , 提供欲执行的子程序的指针
.参数 子程序参数, 整数型, 可空, 可提供欲执行的子程序的第一个参数，仅支持整数型
.参数 是否立即执行, 逻辑型, 可空, 若此值为假，则建立的线程将被挂起，反之则立即执行
.参数 线程ID, 整数型, 参考 可空, 内核给新生成的线程分配的线程ID。提供参数时只能提供容器

.如果真 (是否为空 (是否立即执行))
    赋值 (是否立即执行, 真)
.如果真结束
返回 (API_创建线程 (0, 0, 子程序指针, 子程序参数, 选择 (等于 (是否立即执行, 真), 0, 4), 线程ID))

.子程序 模块_运行线程, 空白型, , 运行由＜建立线程＞建立的当前处于挂起状态的线程
.参数 线程句柄, 整数型, , 由＜建立线程＞返回的线程句柄

API_执行线程 (线程句柄)

.子程序 模块_中止线程, 空白型, , 强行中止线程
.参数 线程句柄, 空白型, , 由＜建立线程＞返回的线程句柄

API_销毁线程 (线程句柄, 0)

.子程序 模块_线程是否结束, 逻辑型, , 
.参数 线程句柄, 整数型, , 

.局部变量 退出代码, 整数型, , , 

API_取中止线程退出代码 (线程句柄, 退出代码)
返回 (取反 (等于 (退出代码, 259)))
 ' 本源码来自易语言资源网(www.wodesoft.com)


 ' 不属于任何一个程序集、类模块的函数：
