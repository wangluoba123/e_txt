 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 532
    高度 = 386
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 真
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 菜单
    左边 = 50
    顶边 = 50
    宽度 = 229
    高度 = 246
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 程序图标, " ' 已保存到：D:\易语言学习\Data\在菜单上放置多种控件.e\程序图标", , 
.常量 MOUSEEVENTF_ABSOLUTE, "32768", , 
.常量 MOUSEEVENTF_LEFTDOWN, "2", , 
.常量 MOUSEEVENTF_LEFTUP, "4", , 
.常量 MOUSEEVENTF_MIDDLEDOWN, "32", , 
.常量 MOUSEEVENTF_MIDDLEUP, "64", , 
.常量 MOUSEEVENTF_MOVE, "1", , 
.常量 MOUSEEVENTF_RIGHTDOWN, "8", , 
.常量 MOUSEEVENTF_RIGHTUP, "16", , 
.常量 MOUSEEVENTF_WHEEL, "2048", , 
.常量 MOUSETRAILS, "39", , 
.常量 VK_LBUTTON, "1", , 
.常量 VK_MBUTTON, "4", , 
.常量 VK_RBUTTON, "2", , 
.常量 WM_COMMAND, "273", , 
.常量 WM_INITMENU, "278", , 
.常量 GWL_WNDPROC, "-4", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 2 3 扩展功能支持库一




数据类型 POINT, , 
    .成员 X, 空白型, , , 
    .成员 Y, 空白型, , , 

数据类型 RECT, , 
    .成员 left, 空白型, , , 
    .成员 top, 空白型, , , 
    .成员 right, 空白型, , , 
    .成员 bottom, 空白型, , , 

数据类型 DRAWITEMSTRUCT, , 
    .成员 CtlType, 整数型, , , 
    .成员 CtlID, 整数型, , , 
    .成员 itemID, 整数型, , , 
    .成员 itemAction, 整数型, , , 
    .成员 itemState, 整数型, , , 
    .成员 hwndItem, 整数型, , , 
    .成员 hdc, 整数型, , , 
    .成员 rcItem, RECT, , , 
    .成员 itemData, 整数型, , , 

.全局变量 鼠标, 鼠标, , , 
.全局变量 全已开始捕获, 逻辑型, , , 
.全局变量 全捕捉左键事件, 逻辑型, , , 
.全局变量 全捕捉右键事件, 逻辑型, , , 
.全局变量 全捕捉中键事件, 逻辑型, , , 
.全局变量 全计时器标识, 整数型, , , 
.全局变量 菜单窗口的所有控件句柄_数组, 整数型, , "0", 
.全局变量 集旧窗口过程, 整数型, , , 

.DLL命令 SwapMouseButton, 逻辑型, "", "SwapMouseButton", , 
    .参数 fSwap, 逻辑型, , 

.DLL命令 SetDoubleClickTime, 空白型, "", "SetDoubleClickTime", , 
    .参数 uInterval, 整数型, , 

.DLL命令 SetCursorPos, 逻辑型, "", "SetCursorPos", , 
    .参数 x, 空白型, , 
    .参数 y, 空白型, , 

.DLL命令 mouse_event, 空白型, "", "mouse_event", , 
    .参数 dwFlags, 空白型, , 
    .参数 dx, 空白型, , 
    .参数 dy, 空白型, , 
    .参数 cButtons, 空白型, , 
    .参数 dwExtraInfo, 空白型, , 

.DLL命令 getCursorPos, 空白型, "", "GetCursorPos", , 
    .参数 lpPoint, POINT, 传址, 

.DLL命令 ClipCursor1, 空白型, "", "ClipCursor", , 
    .参数 lpRect, 空白型, 传址, 

.DLL命令 ClipCursor, 空白型, "", "ClipCursor", , 
    .参数 lpRect, RECT, 传址, 

.DLL命令 SetTimer, 整数型, "", "SetTimer", , 
    .参数 hWnd, 空白型, , 
    .参数 nIDEvent, 空白型, , 
    .参数 uElapse, 空白型, , 
    .参数 lpTimerFunc, 子程序指针, , 

.DLL命令 KillTimer, 逻辑型, "", "KillTimer", , 
    .参数 hWnd, 空白型, , 
    .参数 uIDEvent, 空白型, , 

.DLL命令 GetAsuncKeyState, 整数型, "", "GetAsyncKeyState", , 
    .参数 vKey, 空白型, , 

.DLL命令 WindowFromPoint, 整数型, "user32.dll", "WindowFromPoint", , 
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 SetCapture, 整数型, "", "SetCapture", , 
    .参数 Hwnd, 整数型, , 

.DLL命令 ReleaseCapture, 整数型, "", "ReleaseCapture", , 

.DLL命令 GetWindowRect, 整数型, "", "GetWindowRect", , 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, RECT, , 

.DLL命令 GetDesktopWindow, 整数型, "", "GetDesktopWindow", , 

.DLL命令 GetMenu, 整数型, "user32", "GetMenu", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 GetMenuItemCount, 整数型, "user32", "GetMenuItemCount", , 
    .参数 菜单句柄, 整数型, , 

.DLL命令 GetMenuItemID, 整数型, "user32", "GetMenuItemID", , 
    .参数 菜单句柄, 整数型, , 
    .参数 位置, 整数型, , 

.DLL命令 GetMenuState, 整数型, "user32", "GetMenuState", , 
    .参数 菜单句柄, 整数型, , 
    .参数 ID, 整数型, , 
    .参数 标志, 整数型, , 

.DLL命令 GetSubMenu, 整数型, "user32", "GetSubMenu", , 
    .参数 菜单句柄, 整数型, , 
    .参数 位置, 整数型, , 

.DLL命令 AppendMenu, 整数型, "user32.dll", "AppendMenuA", , 非零表示成功，零表示失败
    .参数 菜单句柄, 整数型, , hMenu,菜单句柄
    .参数 菜单常数标志, 整数型, , wFlags,参见相关帮助
    .参数 新菜单条目ID, 整数型, , wIDNewItem,指定菜单条目的新命令ID
    .参数 标志值, 文本型, , lpNewItem,参见相关帮助

.DLL命令 CopyMemory_dis, 空白型, "kernel32", "RtlMoveMemory", , 　
    .参数 pDest, DRAWITEMSTRUCT, , 长度:48
    .参数 pSrc, 整数型, , 
    .参数 ByteLen, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 SetWindowLong, 整数型, "", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nindex, 整数型, , 
    .参数 hnew, 整数型, , 

.窗口程序集 启动窗口_代码, , , 

.子程序 __启动窗口_尺寸被改变, 空白型, , 
赋值 (.左边, 0)
赋值 (.顶边, 0)
赋值 (.宽度, _启动窗口.取用户区宽度 ())
赋值 (.高度, 22)


.子程序 _标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 

.如果 (等于 (是否已创建 (菜单), 真))
    菜单.销毁 ()
.否则
    赋值 (.边框, 3)
    赋值 (横坐标, 相加 (_启动窗口., _启动窗口..左边, 5))
    赋值 (纵坐标, 相减 (相加 (_启动窗口., _启动窗口..顶边, _启动窗口..高度, _启动窗口.), _启动窗口.取用户区高度 (), 6))
    弹出窗口菜单 (菜单, 假, 横坐标, 纵坐标)
    
.如果结束


.子程序 __启动窗口_将被销毁, 空白型, , 

.如果真 (等于 (是否已创建 (菜单), 真))
    菜单.销毁 ()
.如果真结束


.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 菜单窗口句柄, 整数型, , , 
.局部变量 I, 整数型, , , 

置托盘图标 (#程序图标, “点击右键弹出菜单”)



.子程序 __启动窗口_托盘事件, 空白型, , 
.参数 操作类型, 整数型, , 

.局部变量 弹出点, POINT, , , 

.如果真 (等于 (操作类型, 3))
    赋值 (弹出点, 鼠标.取光标在屏幕位置 ())
    弹出窗口菜单 (菜单, 真, 弹出点.X, 弹出点.Y)
.如果真结束


.窗口程序集 菜单_代码, , , 

.程序集变量 回车热键, 整数型, , , 
.程序集变量 ESC热键, 整数型, , , 
.程序集变量 当前菜单索引, 整数型, , , 
.程序集变量 向上箭头, 整数型, , , 
.程序集变量 向下箭头, 整数型, , , 
.程序集变量 菜单高亮背景色, 整数型, , , 
.程序集变量 菜单高亮前景色, 整数型, , , 
.程序集变量 菜单宽度, 整数型, , , 
.子程序 刷新菜单, 空白型, , 
.局部变量 临时标签, 标签, , , 
.局部变量 I, 整数型, , , 
.局部变量 临时分隔条, 外形框, , , 

赋值 (.左边, 0)
赋值 (.顶边, 0)
赋值 (.宽度, 菜单.取用户区宽度 ())

赋值 (菜单高亮背景色, 取颜色值 (49, 106, 197))
赋值 (菜单高亮前景色, #白色)
赋值 (菜单宽度, 240)

赋值 (.左边, 0)
赋值 (.顶边, 0)

 ' ==================== 将菜单窗口的所有控件的句柄保存到数组，以便检测鼠标事件是否发生在菜单窗口上 ==============
清除数组 (菜单窗口的所有控件句柄_数组)
加入成员 (菜单窗口的所有控件句柄_数组, _启动窗口.取窗口句柄 (.))
加入成员 (菜单窗口的所有控件句柄_数组, 菜单.取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())
加入成员 (菜单窗口的所有控件句柄_数组, 取窗口句柄 ())

.计次循环首 (10, I)
    赋值 (临时分隔条, 多项选择 (I, , , , , , , , , , ))
    加入成员 (菜单窗口的所有控件句柄_数组, 临时分隔条.取窗口句柄 ())
    赋值 (临时分隔条.高度, 1)
    赋值 (临时分隔条.宽度, 相减 (菜单宽度, .宽度))
    赋值 (临时分隔条.左边, .宽度)
.计次循环尾 ()

.计次循环首 (8, I)
    赋值 (临时标签, 多项选择 (I, , , , , , , , ))
    加入成员 (菜单窗口的所有控件句柄_数组, 临时标签.取窗口句柄 ())
    赋值 (临时标签.边框, 0)
    赋值 (临时标签.左边, .宽度)
    赋值 (临时标签.高度, 18)
     ' 临时标签.顶边 ＝ (I － 1) × 临时标签.高度 ＋ 86
    
    .如果真 (大于 (I, 1))
        事件转移 (临时标签, )
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (8, I)
    赋值 (临时标签, 多项选择 (I, , , , , , , , ))
    赋值 (临时标签.宽度, 相减 (菜单宽度, .宽度))
.计次循环尾 ()

赋值 (.顶边, 相减 (相加 (80, 相乘 (18, 0)), 3))
赋值 (.顶边, 相减 (相加 (80, 相乘 (18, 0)), 2))

赋值 (.顶边, 相加 (80, 相乘 (18, 0)))
赋值 (.顶边, 相加 (80, 相乘 (18, 1)))

赋值 (.顶边, 相加 (80, 相乘 (18, 2), 3))
赋值 (.顶边, 相加 (80, 相乘 (18, 2), 4))

赋值 (.顶边, 相加 (80, 相乘 (18, 2), 相乘 (6, 1)))
赋值 (.顶边, 相加 (80, 相乘 (18, 3), 相乘 (6, 1)))

赋值 (.顶边, 相加 (80, 相乘 (18, 4), 相乘 (6, 1), 3))
赋值 (.顶边, 相加 (80, 相乘 (18, 4), 相乘 (6, 1), 4))

赋值 (.顶边, 相加 (80, 相乘 (18, 4), 相乘 (6, 2)))
赋值 (.顶边, 相加 (80, 相乘 (18, 5), 相乘 (6, 2)))

赋值 (.顶边, 相加 (80, 相乘 (18, 6), 相乘 (6, 2), 3))
赋值 (.顶边, 相加 (80, 相乘 (18, 6), 相乘 (6, 2), 4))

赋值 (.顶边, 相加 (80, 相乘 (18, 6), 相乘 (6, 3)))

赋值 (.顶边, 相加 (80, 相乘 (18, 7), 相乘 (6, 3), 3))
赋值 (.顶边, 相加 (80, 相乘 (18, 7), 相乘 (6, 3), 4))

赋值 (.顶边, 相加 (80, 相乘 (18, 7), 相乘 (6, 4)))

赋值 (.标题, “    速度优先”)
赋值 (.标题, “    流畅上网”)
赋值 (.标题, “    连接”)
赋值 (.标题, “    断开连接”)
赋值 (.标题, “    检查新版本”)
赋值 (.标题, “    选项”)
赋值 (.标题, “    还原”)
赋值 (.标题, “    退出”)
赋值 (.宽度, 菜单宽度)
赋值 (菜单., .宽度)
赋值 (.高度, 相加 (.顶边, .高度))
赋值 (.高度, 相加 (.高度, 6))
赋值 (菜单., .高度)

.子程序 _菜单项_标签1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 是否移入, 逻辑型, 静态, , 
.局部变量 临时菜单项_标签, 标签, , , 
.局部变量 I, 整数型, , , 
.局部变量 临时标签, 标签, , , 

赋值 (临时菜单项_标签, 取事件组件 ())

 ' 输出调试文本 (临时菜单项_标签.标题, 是否移入)
.如果 (并且 (小于或等于 (0, 横向位置), 小于或等于 (横向位置, 临时菜单项_标签.宽度), 小于或等于 (0, 纵向位置), 小于或等于 (纵向位置, 临时菜单项_标签.高度)))
    .计次循环首 (8, I)
        赋值 (临时标签, 多项选择 (I, , , , , , , , ))
        .如果真 (不等于 (临时标签.背景颜色, #默认色))
            赋值 (.背景颜色, #默认色)
            赋值 (临时标签.文本颜色, #黑色)
        .如果真结束
        
    .计次循环尾 ()
    
    
    .如果 (等于 (是否移入, 假))
        SetCapture (临时菜单项_标签.取窗口句柄 ())
         ' 临时菜单项_标签.标题 ＝ “鼠标移入”
        赋值 (是否移入, 真)
        赋值 (临时菜单项_标签.背景颜色, 菜单高亮背景色)
        赋值 (临时菜单项_标签.文本颜色, 菜单高亮前景色)
        赋值 (当前菜单索引, 相减 (到整数 (临时菜单项_标签.标记), 1))
    .否则
        ReleaseCapture ()
         ' 临时菜单项_标签.标题 ＝ “鼠标移出”
        赋值 (是否移入, 假)
        赋值 (临时菜单项_标签.背景颜色, #默认色)
        赋值 (临时菜单项_标签.文本颜色, #黑色)
        赋值 (当前菜单索引, -1)
    .如果结束
    
.否则
    .如果真 (等于 (是否移入, 真))
        ReleaseCapture ()
         ' 临时菜单项_标签.标题 ＝ “鼠标移出”
        赋值 (是否移入, 假)
        赋值 (临时菜单项_标签.背景颜色, #默认色)
        赋值 (临时菜单项_标签.文本颜色, #黑色)
        赋值 (当前菜单索引, -1)
    .如果真结束
    
.如果结束


.子程序 _菜单项_标签1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 临时菜单项_标签, 标签, , , 

赋值 (临时菜单项_标签, 取事件组件 ())
赋值 (菜单., 假)
菜单点击处理 (相减 (到整数 (临时菜单项_标签.标记), 1))

.子程序 _菜单_创建完毕, 空白型, , 
赋值 (回车热键, 未知支持库函数_10 (菜单.取窗口句柄 (), 取窗口句柄 (), 0, #回车键))
赋值 (ESC热键, 未知支持库函数_10 (菜单.取窗口句柄 (), 取窗口句柄 (), 0, #Esc键))
赋值 (向上箭头, 未知支持库函数_10 (菜单.取窗口句柄 (), 取窗口句柄 (), 0, #上光标键))
赋值 (向下箭头, 未知支持库函数_10 (菜单.取窗口句柄 (), 取窗口句柄 (), 0, #下光标键))
输出调试文本 (回车热键)
赋值 (当前菜单索引, -1)
鼠标.捕获左键事件 ()
鼠标.捕获右键事件 ()
鼠标.捕获中键事件 ()

.子程序 _菜单_被激活, 空白型, , 
刷新菜单 ()

.子程序 _菜单_将被销毁, 空白型, , 
鼠标.取消捕获事件 ()
.如果真 (等于 (是否已创建 (_启动窗口), 真))
    赋值 (_启动窗口..边框, 0)
.如果真结束
未知支持库函数_11 (菜单.取窗口句柄 (), 回车热键)
未知支持库函数_11 (菜单.取窗口句柄 (), ESC热键)
未知支持库函数_11 (菜单.取窗口句柄 (), 向上箭头)
未知支持库函数_11 (菜单.取窗口句柄 (), 向下箭头)


.子程序 _热键_标签_反馈事件, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 临时标签, 标签, , , 


.判断开始 (并且 (等于 (参数一, 回车热键), 等于 (菜单., 真)))
    输出调试文本 (“按下了回车键”)
    赋值 (_启动窗口..边框, 0)
    赋值 (菜单., 假)
    菜单点击处理 (当前菜单索引)
    
.判断 (等于 (参数一, ESC热键))
    赋值 (菜单., 假)
    菜单.销毁 ()
    
.判断 (等于 (参数一, 向上箭头))
    .如果 (小于或等于 (当前菜单索引, 0))
        赋值 (当前菜单索引, 0)
    .否则
        
    .如果结束
    赋值 (临时标签, 多项选择 (相加 (当前菜单索引, 1), , , , , , , , ))
    赋值 (临时标签.背景颜色, #默认色)
    赋值 (临时标签.文本颜色, #黑色)
    .如果 (小于或等于 (当前菜单索引, 0))
        赋值 (当前菜单索引, 7)
    .否则
        赋值 (当前菜单索引, 相减 (当前菜单索引, 1))
    .如果结束
    赋值 (临时标签, 多项选择 (相加 (当前菜单索引, 1), , , , , , , , ))
    赋值 (临时标签.背景颜色, 菜单高亮背景色)
    赋值 (临时标签.文本颜色, 菜单高亮前景色)
    
    
.判断 (等于 (参数一, 向下箭头))
    .如果 (小于 (当前菜单索引, 0))
        赋值 (当前菜单索引, 7)
    .否则
        
    .如果结束
    赋值 (临时标签, 多项选择 (相加 (当前菜单索引, 1), , , , , , , , ))
    赋值 (临时标签.背景颜色, #默认色)
    赋值 (临时标签.文本颜色, #黑色)
    .如果 (大于或等于 (当前菜单索引, 7))
        赋值 (当前菜单索引, 0)
    .否则
        赋值 (当前菜单索引, 相加 (当前菜单索引, 1))
    .如果结束
    赋值 (临时标签, 多项选择 (相加 (当前菜单索引, 1), , , , , , , , ))
    赋值 (临时标签.背景颜色, 菜单高亮背景色)
    赋值 (临时标签.文本颜色, 菜单高亮前景色)
    
    
    
.默认
    
.判断结束



.类模块 鼠标, , , 作者：曾劲松(古木，goomoo) 2004-12-19 本类封装了一些关于鼠标的API

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 交换左右键, 空白型, , 
.参数 参交换, 逻辑型, , 

SwapMouseButton (参交换)

.子程序 设置双击时间, 空白型, , 
.参数 参间隔时间, 整数型, , 以毫秒作单位,0为默认值,设一个很小的数则鼠标不能双击。

SetDoubleClickTime (参间隔时间)

.子程序 移动光标, 空白型, , 
.参数 参横坐标, 空白型, , 
.参数 参纵坐标, 空白型, , 

SetCursorPos (参横坐标, 参纵坐标)

.子程序 按下鼠标左键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_LEFTDOWN), p.X, p.Y, 0, 0)

.子程序 释放鼠标左键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_LEFTUP), p.X, p.Y, 0, 0)

.子程序 按下鼠标右键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_RIGHTDOWN), p.X, p.Y, 0, 0)

.子程序 释放鼠标右键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_RIGHTUP), p.X, p.Y, 0, 0)

.子程序 按下鼠标中键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_MIDDLEUP), p.X, p.Y, 0, 0)

.子程序 释放鼠标中键, 空白型, , 
.局部变量 p, POINT, , , 

getCursorPos (p)
mouse_event (位或 (#MOUSEEVENTF_ABSOLUTE, #MOUSEEVENTF_MIDDLEDOWN), p.X, p.Y, 0, 0)


.子程序 双击鼠标左键, 空白型, , 
按下鼠标左键 ()
释放鼠标左键 ()
延时 (50)
按下鼠标左键 ()
释放鼠标左键 ()

.子程序 限制光标活动范围, 空白型, , 
.参数 参左, 空白型, , 
.参数 参上, 空白型, , 
.参数 参右, 空白型, , 
.参数 参下, 空白型, , 

.局部变量 r, RECT, , , 

赋值 (r.left, 参左)
赋值 (r.top, 参上)
赋值 (r.right, 参右)
赋值 (r.bottom, 参下)
ClipCursor (r)

.子程序 取消限制活动范围, 空白型, , 
ClipCursor1 (0)

.子程序 捕获左键事件, 空白型, , 可以捕获外部程序中的鼠标事件
.如果真 (等于 (全已开始捕获, 假))
    赋值 (全计时器标识, SetTimer (0, 0, 50, &计时器回调函数))
.如果真结束
赋值 (全捕捉左键事件, 真)
赋值 (全已开始捕获, 真)

.子程序 捕获右键事件, 空白型, , 
.如果真 (等于 (全已开始捕获, 假))
    赋值 (全计时器标识, SetTimer (0, 0, 50, &计时器回调函数))
.如果真结束
赋值 (全捕捉右键事件, 真)
赋值 (全已开始捕获, 真)

.子程序 捕获中键事件, 空白型, , 
.如果真 (等于 (全已开始捕获, 假))
    赋值 (全计时器标识, SetTimer (0, 0, 50, &计时器回调函数))
.如果真结束
赋值 (全捕捉中键事件, 真)
赋值 (全已开始捕获, 真)

.子程序 取消捕获事件, 空白型, , 
KillTimer (0, 全计时器标识)
赋值 (全捕捉左键事件, 假)
赋值 (全捕捉中键事件, 假)
赋值 (全捕捉右键事件, 假)
赋值 (全已开始捕获, 假)

.子程序 取光标在屏幕位置, POINT, , 
.局部变量 点, POINT, , , 

getCursorPos (点)
返回 (点)

.程序集 鼠标类附加程序集, , , 

.子程序 计时器回调函数, 空白型, , 
.参数 hwnd, 空白型, , 
.参数 uMsg, 空白型, , 
.参数 idEvent, 空白型, , 
.参数 dwTime, 空白型, , 

.局部变量 P, POINT, , , 
.局部变量 临时句柄, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 M, 整数型, , , 

赋值 (P, 鼠标.取光标在屏幕位置 ())

.如果真 (全捕捉左键事件)
    .如果真 (不等于 (GetAsuncKeyState (#VK_LBUTTON), 0))
        信息框 (“请在此处输入你自己的处理代码！”, 0, )
         ' 输出调试文本 (“点击左键”)
        赋值 (临时句柄, WindowFromPoint (P.X, P.Y))
        .计次循环首 (取数组成员数 (菜单窗口的所有控件句柄_数组), I)
            .如果真 (等于 (临时句柄, 菜单窗口的所有控件句柄_数组 [I]))
                赋值 (M, 相加 (M, 1))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (等于 (临时句柄, _启动窗口.取窗口句柄 ()))
             ' M ＝ M ＋ 1
        .如果真结束
        
        .如果真 (等于 (M, 0))
             ' 调试输出 (临时句柄, _启动窗口.取窗口句柄 ())
            菜单.销毁 ()
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (全捕捉中键事件)
    .如果真 (不等于 (GetAsuncKeyState (#VK_MBUTTON), 0))
         ' 信息框 (“请在此处输入你自己的处理代码！”, 0, )
         ' 输出调试文本 (“点击中键”)
        赋值 (临时句柄, WindowFromPoint (P.X, P.Y))
        .计次循环首 (取数组成员数 (菜单窗口的所有控件句柄_数组), I)
            .如果真 (等于 (临时句柄, 菜单窗口的所有控件句柄_数组 [I]))
                赋值 (M, 相加 (M, 1))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        
        .如果真 (等于 (M, 0))
            菜单.销毁 ()
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (全捕捉右键事件)
    .如果真 (不等于 (GetAsuncKeyState (#VK_RBUTTON), 0))
         ' 信息框 (“请在此处输入你自己的处理代码！”, 0, )
         ' 输出调试文本 (“点击右键”)
        赋值 (临时句柄, WindowFromPoint (P.X, P.Y))
        .计次循环首 (取数组成员数 (菜单窗口的所有控件句柄_数组), I)
            .如果真 (等于 (临时句柄, 菜单窗口的所有控件句柄_数组 [I]))
                赋值 (M, 相加 (M, 1))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        
        .如果真 (等于 (M, 0))
            菜单.销毁 ()
        .如果真结束
        
    .如果真结束
    
.如果真结束


.程序集 菜单处理_程序集, , , 

.程序集变量 桌面窗口句柄, 整数型, , , 
.子程序 弹出窗口菜单, 空白型, , 
.参数 菜单, 窗口, , 
.参数 是否为右键弹出菜单, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 

.局部变量 临时矩形_桌面, RECT, , , 
.局部变量 临时矩形_菜单, RECT, , , 
.局部变量 匿名局部变量_317, 空白型, , , 

.如果真 (等于 (是否已创建 (菜单), 假))
    载入 (菜单, , 假)
.如果真结束
刷新菜单 ()
赋值 (菜单.左边, 横坐标)
赋值 (菜单.顶边, 纵坐标)

赋值 (桌面窗口句柄, GetDesktopWindow ())
GetWindowRect (桌面窗口句柄, 临时矩形_桌面)
 ' 输出调试文本 (临时矩形_桌面.left, 临时矩形_桌面.top, 临时矩形_桌面.right, 临时矩形_桌面.bottom)
GetWindowRect (菜单.取窗口句柄 (), 临时矩形_菜单)
 ' 输出调试文本 (临时矩形_菜单.left, 临时矩形_菜单.top, 临时矩形_菜单.right, 临时矩形_菜单.bottom)

 ' ===================== 判断菜单弹出的方向 ===========================================

.如果真 (大于 (临时矩形_菜单.right, 临时矩形_桌面.right))
    赋值 (菜单.左边, 相加 (相减 (临时矩形_菜单.left, 临时矩形_菜单.right), 临时矩形_菜单.left)) ' ------------- 靠左边 ---------------
.如果真结束

.如果真 (小于 (临时矩形_菜单.left, 临时矩形_桌面.left))
    赋值 (菜单.左边, 相减 (相加 (临时矩形_菜单.left, 临时矩形_菜单.right), 临时矩形_菜单.left)) ' ------------- 靠右边 ---------------
.如果真结束

.如果真 (小于 (临时矩形_菜单.top, 临时矩形_桌面.top))
    赋值 (菜单.顶边, 相减 (相加 (临时矩形_菜单.top, 临时矩形_菜单.bottom), 临时矩形_菜单.top)) ' ------------- 靠下边 ---------------
.如果真结束

.如果真 (大于 (临时矩形_菜单.bottom, 临时矩形_桌面.bottom))
    赋值 (菜单.顶边, 相减 (相加 (相减 (临时矩形_菜单.top, 临时矩形_菜单.bottom), 临时矩形_菜单.top), 18)) ' ------------- 靠上边 ---------------
.如果真结束
.如果真 (等于 (是否为右键弹出菜单, 真))
    赋值 (菜单.顶边, 相加 (菜单.顶边, 18))
.如果真结束

赋值 (菜单.可视, 真)


.子程序 菜单点击处理, 空白型, , 
.参数 菜单索引, 整数型, , 

.如果真 (大于 (菜单索引, -1))
    输出调试文本 (相加 (“你点击了： 菜单项”, 到文本 (相加 (菜单索引, 1))))
    信息框 (相加 (“你点击了： 菜单项”, 到文本 (相加 (菜单索引, 1))), 0, )
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
