 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 411
    高度 = 326
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 8421376 '  0x808000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “黑白棋 1.0”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 12632256 '  0xC0C0C0
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “黑白棋0.1”
    帮助文件名 = “”



.常量 空, "0", , 
.常量 黑子, "1", , 
.常量 白子, "2", , 
.常量 , , , 
.常量 , , , 
.常量 向上, "3", , 
.常量 右上, "4", , 
.常量 向右, "5", , 
.常量 右下, "6", , 
.常量 向下, "7", , 
.常量 左下, "8", , 
.常量 向左, "9", , 
.常量 左上, "10", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库




数据类型 位置, , 
    .成员 列, 字节型, , , 
    .成员 行, 字节型, , , 


.窗口程序集 窗口程序集1, , , 黑白棋0.1正式版

.程序集变量 棋盘, 标签, , "8,8", 界面
.程序集变量 数组, 字节型, , "8,8", 棋盘的“映象”
.程序集变量 敌子, 字节型, , , 
.程序集变量 我子, 字节型, , , 即现在准备走棋的那一方
.程序集变量 黑子数, 字节型, , , 
.程序集变量 白子数, 字节型, , , 
.程序集变量 撤消数组, 字节型, , "8,8", 记录上一步，用于撤消操作。
.子程序 __启动窗口_创建完毕, 空白型, , 画棋盘并初始化
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 当前左边, 字节型, , , 
.局部变量 当前顶边, 字节型, , , 

 '         **************初始化窗口****************
赋值 (., 相加 (相乘 (., 8), 1))
赋值 (., 相加 (相乘 (., 8), 1))
赋值 (., 相加 (., 20, 100))
赋值 (., 相加 (., 20, 45))
赋值 (., 相加 (., 30))
赋值 (., 相加 (., 30))
赋值 (., 相加 (., 30))
赋值 (., 相加 (., 30))
赋值 (., 相加 (., 40))
赋值 (., 相加 (., 40))

 '         ************定义一个9x9的空棋盘。*************
.计次循环首 (8, 容器1)
    .计次循环首 (8, 容器2)
        复制窗口组件 (棋盘 [容器1] [容器2])
        赋值 (棋盘 [容器1] [容器2], , 相乘 (相减 (容器2, 1), .))
        赋值 (棋盘 [容器1] [容器2], , 相乘 (相减 (容器1, 1), .))
        赋值 (棋盘 [容器1] [容器2], , 真)
    .计次循环尾 ()
.计次循环尾 ()

 '         *************放最初的四个子。***************
赋值 (数组 [4] [4], #黑子)
赋值 (棋盘 [4] [4]., .)
赋值 (数组 [4] [5], #白子)
赋值 (棋盘 [4] [5]., .)
赋值 (数组 [5] [5], #黑子)
赋值 (棋盘 [5] [5]., .)
赋值 (数组 [5] [4], #白子)
赋值 (棋盘 [5] [4]., .)


赋值 (我子, #白子)
赋值 (敌子, #黑子) '     ****我规定：白子先走：-）****

赋值 (撤消数组, 数组)
赋值 (., 真)
赋值 (., 假)

.子程序 重画棋盘, 空白型, , 把保存在数组里的信息反映到棋盘上
.参数 棋盘信息, 字节型, 数组, 

.局部变量 容器3, 整数型, , , 
.局部变量 容器4, 整数型, , , 

赋值 (白子数, 0)
赋值 (黑子数, 0)
.计次循环首 (8, 容器3)
    .计次循环首 (8, 容器4) '     *********把数组里的信息逐个反映到棋盘上。***********
        处理事件 ()
        .判断开始 (等于 (棋盘信息 [容器3] [容器4], #空))
            赋值 (棋盘 [容器3] [容器4], , .)
        .判断 (等于 (棋盘信息 [容器3] [容器4], #黑子))
            赋值 (棋盘 [容器3] [容器4], , .)
            赋值 (黑子数, 相加 (黑子数, 1))
        .判断 (等于 (棋盘信息 [容器3] [容器4], #白子))
            赋值 (棋盘 [容器3] [容器4], , .)
            赋值 (白子数, 相加 (白子数, 1))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

赋值 (., 到文本 (白子数))
赋值 (., 到文本 (黑子数))

.如果真 (或者 (等于 (黑子数, 0), 等于 (白子数, 0), 等于 (相加 (黑子数, 白子数), 64))) '     ****当某一方被吃光或棋盘被填满是就该判断胜负了！****
    判断胜负 ()
.如果真结束


.子程序 换方, 空白型, , 走过一步后黑白互换
.如果 (等于 (我子, #黑子))
    赋值 (我子, #白子)
    赋值 (敌子, #黑子)
    赋值 (., .)
.否则
    赋值 (我子, #黑子)
    赋值 (敌子, #白子)
    赋值 (., .)
.如果结束


.子程序 _空_鼠标左键被按下, 逻辑型, , 你要在这儿放棋了，我来处理这个动作
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 被点到的对象, 标签, , ,  你点了哪一格
.局部变量 要放子的位置, 位置, , ,  这一格“坐标”
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 可吃子, 逻辑型, , , 
.局部变量 我子位置, 位置, , "16", 与你刚放棋子遥相呼应的你的子，最多有16个

赋值 (被点到的对象, 取事件组件 ())
.计次循环首 (8, 容器1)
    .计次循环首 (8, 容器2)
        .如果真 (等于 (被点到的对象, 棋盘 [容器1] [容器2]))
            赋值 (要放子的位置.行, 容器1)
            赋值 (要放子的位置.列, 容器2) ' ******此位置对应 数组 中的相应位置。*****
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()

赋值 (可吃子, 测试 (数组, 要放子的位置, 我子位置)) '     ****我子位置 是参考的，也就是传地址的，相当于又一个返回值****
.如果真 (可吃子)
    
    赋值 (撤消数组, 数组) '      *****在走棋之前保存当前状态，以便撤消****
    赋值 (., 假) '      ****撤消可用****
    赋值 (., “&C.撤消上一步”)
    
    吃子 (数组, 我子位置, 要放子的位置)
    换方 ()
    重画棋盘 (数组)
.如果真结束


.子程序 测试, 逻辑型, , 让我看看能不能这样走棋
.参数 目标数组, 字节型, 数组, 
.参数 要放子的位置, 位置, , 
.参数 我子位置, 位置, 参考 数组, 用于“返回”

.局部变量 方向, 整数型, , , 参看常量表
.局部变量 条件, 逻辑型, , , 
.局部变量 可吃子, 逻辑型, , , 
.局部变量 容器, 字节型, , , 
.局部变量 当前行, 字节型, , , 
.局部变量 当前列, 字节型, , , 
.局部变量 找到敌子, 逻辑型, , , 

赋值 (容器, 1)
赋值 (可吃子, 假)
.如果真 (不等于 (目标数组 [要放子的位置].行 [要放子的位置].列, #空)) '     ****不能在已经放了子的格子上再放子****
    返回 (假)
.如果真结束

.变量循环首 (#向上, #左上, 1, 方向) '                  ****逐个测试8个方向****
    赋值 (当前行, 要放子的位置.行)
    赋值 (当前列, 要放子的位置.列)
    赋值 (找到敌子, 假)
    .判断开始 (等于 (方向, #向上))
        赋值 (条件, 大于 (当前行, 1))
    .判断 (等于 (方向, #右上))
        赋值 (条件, 并且 (大于 (当前行, 1), 小于 (当前列, 8)))
    .判断 (等于 (方向, #向右))
        赋值 (条件, 小于 (当前列, 8))
    .判断 (等于 (方向, #右下))
        赋值 (条件, 并且 (小于 (当前行, 8), 小于 (当前列, 8)))
    .判断 (等于 (方向, #向下))
        赋值 (条件, 小于 (当前行, 8))
    .判断 (等于 (方向, #左下))
        赋值 (条件, 并且 (小于 (当前行, 8), 大于 (当前列, 1)))
    .判断 (等于 (方向, #向左))
        赋值 (条件, 大于 (当前列, 1))
    .判断 (等于 (方向, #左上))
        赋值 (条件, 并且 (大于 (当前行, 1), 大于 (当前列, 1)))
    .默认
        
    .判断结束
    
    
    
    .判断循环首 (条件) '     ****不能超出棋盘的边界****
        .判断开始 (等于 (方向, #向上))
            赋值 (当前行, 相减 (当前行, 1))
        .判断 (等于 (方向, #右上))
            赋值 (当前行, 相减 (当前行, 1))
            赋值 (当前列, 相加 (当前列, 1))
        .判断 (等于 (方向, #向右))
            赋值 (当前列, 相加 (当前列, 1))
        .判断 (等于 (方向, #右下))
            赋值 (当前行, 相加 (当前行, 1))
            赋值 (当前列, 相加 (当前列, 1))
        .判断 (等于 (方向, #向下))
            赋值 (当前行, 相加 (当前行, 1))
        .判断 (等于 (方向, #左下))
            赋值 (当前行, 相加 (当前行, 1))
            赋值 (当前列, 相减 (当前列, 1))
        .判断 (等于 (方向, #向左))
            赋值 (当前列, 相减 (当前列, 1))
        .判断 (等于 (方向, #左上))
            赋值 (当前行, 相减 (当前行, 1))
            赋值 (当前列, 相减 (当前列, 1))
        .默认
            
        .判断结束
        
         '     ****刷新条件****
        .判断开始 (等于 (方向, #向上))
            赋值 (条件, 大于 (当前行, 1))
        .判断 (等于 (方向, #右上))
            赋值 (条件, 并且 (大于 (当前行, 1), 小于 (当前列, 8)))
        .判断 (等于 (方向, #向右))
            赋值 (条件, 小于 (当前列, 8))
        .判断 (等于 (方向, #右下))
            赋值 (条件, 并且 (小于 (当前行, 8), 小于 (当前列, 8)))
        .判断 (等于 (方向, #向下))
            赋值 (条件, 小于 (当前行, 8))
        .判断 (等于 (方向, #左下))
            赋值 (条件, 并且 (小于 (当前行, 8), 大于 (当前列, 1)))
        .判断 (等于 (方向, #向左))
            赋值 (条件, 大于 (当前列, 1))
        .判断 (等于 (方向, #左上))
            赋值 (条件, 并且 (大于 (当前行, 1), 大于 (当前列, 1)))
        .默认
            
        .判断结束
        
         '     ****这是走棋规则也是本程序的核心所在****
        .判断开始 (等于 (目标数组 [当前行] [当前列], #空))
            跳出循环 ()
        .判断 (等于 (目标数组 [当前行] [当前列], 敌子))
            赋值 (找到敌子, 真)
        .判断 (等于 (目标数组 [当前行] [当前列], 我子))
            .如果真 (等于 (找到敌子, 真))
                赋值 (我子位置 [容器], 行, 当前行)
                赋值 (我子位置 [容器], 列, 当前列)
                赋值 (容器, 相加 (容器, 1))
                赋值 (可吃子, 真)
            .如果真结束
            跳出循环 ()
        .默认
            
        .判断结束
        
    .判断循环尾 ()
.变量循环尾 () '     ****下一个方向****
返回 (可吃子)

.子程序 吃子, 空白型, , 按 测试 子程序的结果吃子
.参数 目标数组, 字节型, 数组, 
.参数 我子位置, 位置, 数组, 测试的结果
.参数 要放子的位置, 位置, , 

.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 列, 字节型, , , 
.局部变量 小值, 空白型, , , 
.局部变量 大值, 空白型, , , 

.计次循环首 (取数组成员数 (我子位置), 容器1)
    .如果真 (等于 (我子位置 [容器1], 行, 0))
        跳出循环 ()
    .如果真结束
    .如果 (等于 (我子位置 [容器1], 列, 要放子的位置.列)) '     ****竖吃****
        赋值 (小值, 取小 (我子位置 [容器1], 行, 要放子的位置.行))
        赋值 (大值, 取大 (我子位置 [容器1], 行, 要放子的位置.行))
        .变量循环首 (小值, 大值, 1, 容器2)
            赋值 (目标数组 [容器2] [我子位置] [容器1], 列, 我子)
        .变量循环尾 ()
        
    .否则
        .如果 (等于 (我子位置 [容器1], 行, 要放子的位置.行)) '     ****横吃****
            赋值 (小值, 取小 (我子位置 [容器1], 列, 要放子的位置.列))
            赋值 (大值, 取大 (我子位置 [容器1], 列, 要放子的位置.列))
            .变量循环首 (小值, 大值, 1, 容器2)
                赋值 (目标数组 [我子位置] [容器1], 行 [容器2], 我子)
            .变量循环尾 ()
            
        .否则
             '     ****斜吃****
            .如果 (并且 (大于 (要放子的位置.行, 我子位置 [容器1], 行), 大于 (要放子的位置.列, 我子位置 [容器1], 列)))
                赋值 (列, 我子位置 [容器1], 列)
                .变量循环首 (我子位置 [容器1], 行, 要放子的位置.行, 1, 容器2)
                    赋值 (目标数组 [容器2] [列], 我子)
                    赋值 (列, 相加 (列, 1))
                .变量循环尾 ()
            .否则
                .如果 (并且 (大于 (要放子的位置.行, 我子位置 [容器1], 行), 小于 (要放子的位置.列, 我子位置 [容器1], 列)))
                    赋值 (列, 我子位置 [容器1], 列)
                    .变量循环首 (我子位置 [容器1], 行, 要放子的位置.行, 1, 容器2)
                        赋值 (目标数组 [容器2] [列], 我子)
                        赋值 (列, 相减 (列, 1))
                    .变量循环尾 ()
                .否则
                    .如果 (并且 (小于 (要放子的位置.行, 我子位置 [容器1], 行), 大于 (要放子的位置.列, 我子位置 [容器1], 列)))
                        赋值 (列, 要放子的位置.列)
                        .变量循环首 (要放子的位置.行, 我子位置 [容器1], 行, 1, 容器2)
                            赋值 (目标数组 [容器2] [列], 我子)
                            赋值 (列, 相减 (列, 1))
                        .变量循环尾 ()
                    .否则
                        .如果 (并且 (小于 (要放子的位置.行, 我子位置 [容器1], 行), 小于 (要放子的位置.列, 我子位置 [容器1], 列)))
                            赋值 (列, 要放子的位置.列)
                            .变量循环首 (要放子的位置.行, 我子位置 [容器1], 行, 1, 容器2)
                                赋值 (目标数组 [容器2] [列], 我子)
                                赋值 (列, 相加 (列, 1))
                            .变量循环尾 ()
                        .否则
                             '     ****这段程序有一点罗嗦，你可以把它简化一下。不过可别独享，也要告诉我呦！****
                        .如果结束
                        
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
        .如果结束
        
    .如果结束
    
.计次循环尾 ()

.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _撤消_被选择, 空白型, , 
赋值 (数组, 撤消数组)
重画棋盘 (撤消数组)
换方 ()
赋值 (., 真) '   *****只能撤消一步。在 撤消数组 被重新赋值后才可再用*****

.子程序 判断胜负, 空白型, , 
.如果 (或者 (等于 (0), 大于 ()))
    信息框 (“白棋赢！！”, 0, “黑白棋0.1”)
.否则
    .如果 (或者 (等于 (0), 大于 ()))
        信息框 (“黑棋赢！！”, 0, “黑白棋0.1”)
    .否则
        .如果 (等于 (黑子数, 白子数))
            信息框 (“平局！！”, 0, “黑白棋0.1”)
        .否则
            信息框 (“错误！！”, 0, “黑白棋0.1”)
        .如果结束
        
    .如果结束
    
.如果结束
赋值 (., 真)
赋值 (., 真)

.子程序 _关于_被选择, 空白型, , 
载入 (关于窗口, , 真)

.子程序 _新游戏_被选择, 空白型, , 
.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 

.计次循环首 (8, 容器)
    .计次循环首 (8, 容器1)
        赋值 (数组 [容器] [容器1], #空) '     ****清空数组****
    .计次循环尾 ()
.计次循环尾 ()
赋值 (黑子数, 0)
赋值 (白子数, 0)

赋值 (数组 [4] [4], #黑子)
赋值 (数组 [4] [5], #白子)
赋值 (数组 [5] [5], #黑子)
赋值 (数组 [5] [4], #白子)

赋值 (我子, #白子)
赋值 (敌子, #黑子)
赋值 (., .)

赋值 (., 假)
赋值 (撤消数组, 数组)
重画棋盘 (数组)
 '     ****以上同启动窗口创建完毕****

.子程序 取大, 字节型, , 
.参数 数1, 字节型, , 
.参数 数2, 字节型, , 

.局部变量 结果, 字节型, , , 

赋值 (选择 (大于 (数1, 数2), 数1, 数2))
返回 ()

.子程序 取小, 字节型, , 
.参数 数1, 字节型, , 
.参数 数2, 字节型, , 

.局部变量 结果, 字节型, , , 

赋值 (结果, 选择 (小于 (数1, 数2), 数1, 数2))
返回 ()

.子程序 _放弃_被选择, 空白型, , 
赋值 (撤消数组, 数组)
换方 ()
赋值 (., 假)
赋值 (., “&C.撤消放弃”)

.窗口程序集 窗口程序集2, , , 

.子程序 _关于窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()

.子程序 _按钮1_被单击, 空白型, , 
销毁 ()


 ' 不属于任何一个程序集、类模块的函数：
