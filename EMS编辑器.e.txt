 ' 文件类型：Windows模块源码

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 517
    高度 = 504
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 640
    高度 = 426
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “EMS开发环境”
    帮助文件名 = “”



.常量 EMS_连接_界面, "2", , GUI
.常量 EMS_连接_环境, "3", , CUI(ENUM_APP_TYPE)
.常量 , , , 
.常量 EMS_连接_数据, "1", , Data
.常量 EMS_连接_代码, "2", , Code
.常量 EMS_连接_导入, "3", , Import
.常量 EMS_连接_导出, "4", , Export
.常量 EMS_连接_资源, "5", , Resource
.常量 EMS_连接_连接器, "6", , Linker
.常量 EMS_连接_重置, "7", , Relocate(ENUM_SECTION_TYPE)
.常量 , , , 
.常量 EMS_连接_特性_代码, "32", , CH_CODE
.常量 EMS_连接_特性_初始化数据, "64", , CH_INITIALIZED_DATA
.常量 EMS_连接_特性_卸载数据, "128", , CH_UNINITIALIZED_DATA
.常量 EMS_连接_特性_可废弃内存, "33554432", , CH_MEM_DISCARDABLE
.常量 EMS_连接_特性_内存缓存, "67108864", , CH_MEM_NOT_CHACHED
.常量 EMS_连接_特性_内存分页, "134217728", , CH_MEM_NOT_PAGED
.常量 EMS_连接_特性_内存共享, "268435456", , CH_MEM_SHARED
.常量 EMS_连接_特性_内存运行, "536870912", , CH_MEM_EXECUTE
.常量 EMS_连接_特性_内存读, "1073741824", , CH_MEM_READ
.常量 EMS_连接_特性_内存写, "2147483648", , CH_MEM_WRITE(ENUM_SECTION_CHARACTERISTICS)
.常量 , , , 上面来自于(comLinker)
.常量 EMS_符号_地址, "1", , ST_RVA
.常量 EMS_符号_标签, "2", , ST_LABEL
.常量 EMS_符号_双字, "3", , ST_DWORD
.常量 EMS_符号_字, "4", , ST_WORD
.常量 EMS_符号_字节, "5", , ST_BYTE
.常量 EMS_符号_无符号双字, "6", , ST_US_DWORD
.常量 EMS_符号_无符号字, "7", , ST_US_WORD
.常量 EMS_符号_无符号字节, "8", , ST_US_BYTE
.常量 EMS_符号_字符串, "9", , ST_STRING
.常量 EMS_符号_类型, "10", , ST_TYPE
.常量 EMS_符号_导入, "11", , ST_IMPORT
.常量 EMS_符号_导出, "12", , ST_EXPORT
.常量 EMS_符号_资源, "13", , ST_RESOURCE
.常量 EMS_符号_框架, "14", , ST_FRAME
.常量 EMS_符号_局部双字, "15", , ST_LOCAL_DWORD
.常量 EMS_符号_局部字符串, "16", , ST_LOCAL_STRING
.常量 EMS_符号_局部小数, "17", , ST_LOCAL_SINGLE
.常量 EMS_符号_小数, "18", , ST_SINGLE(ENUM_SYMBOL_TYPE)
.常量 , , , 上面来自于(comSymbols)
.常量 EMS_虚拟_进入点, "0", , EX_ENTRY
.常量 EMS_虚拟_模块, "1", , EX_MODULE
.常量 EMS_虚拟_对话框, "2", , EX_DIALOG(envVirtualFiles)
.常量 , , , 上面来自于(envVirtualFiles)
.常量 , , , 
.常量 EMS_进程所有方式, "2035711", , PROCESS_ALL_ACCESS(envGeneral)
.常量 , , , 
.常量 EMS_排序_标识, "7", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' CodeStyleEdit {E5E6A8E356A843bd94609DDD678BD6D8} 2 0 代码编辑框支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 3 0 扩展界面支持库三
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二



 ' 所需要的模块
 ' 新编码转换大全 D:\备份\编译器\新编码转换大全.ec


数据类型 EMS重置类型, , TYPE_RELOCATION(comExports)
    .成员 偏移, 整数型, , , 

数据类型 EMS导出类型, , TYPE_EXPORT(comExports)
    .成员 名称, 文本型, , , Name
    .成员 序号, 短整数型, , , Ordinal

数据类型 EMS编码类型, , TYPE_FIXUP(comFixups)
    .成员 名称, 文本型, , , Name
    .成员 偏移, 整数型, , , Offset
    .成员 值, 整数型, , , Value
    .成员 扩展地址, 整数型, , , ExtraAdd
    .成员 段类型, 字节型, , , Section
    .成员 删除, 逻辑型, , , Deleted

数据类型 EMS框架类型, , TYPE_FRAME(comFrames)
    .成员 名称, 文本型, , , Name
    .成员 申请, 文本型, , , Declares
    .成员 返回, 文本型, , , ReturnAs
    .成员 属性, 逻辑型, , , Property

数据类型 EMS导入类型, , TYPE_IMPORT(comImports)
    .成员 名称, 文本型, , , Name
    .成员 别名, 文本型, , , Alias
    .成员 连接库, 文本型, , , Library
    .成员 参数数量, 整数型, , , pCount
    .成员 状态, 逻辑型, , , Used

数据类型 EMS段类型, , TYPE_SECTION(comLinker)
    .成员 名字, 文本型, , , Name
    .成员 字节, 字节型, , "1", Bytes
    .成员 段类型, 字节型, , , SectionType
    .成员 特性, 整数型, , , Characteristics

数据类型 EMS资源类型, , TYPE_RES_RESOURCE(comResources)
    .成员 值, 整数型, , , Value
    .成员 文件名, 文本型, , , FileName
    .成员 符号名, 文本型, , , SymbolName

数据类型 EMS资源项类型, , TYPE_RES_ITEM(comResources)
    .成员 值, 整数型, , , Value
    .成员 资源, EMS资源类型, , "1", RE

数据类型 EMS资源导引表类型, , TYPE_RES_DIRECTORY(comResources)
    .成员 值, 整数型, , , Value
    .成员 项目, EMS资源项类型, , "1", IT

数据类型 EMS符号类型, , TYPE_SYMBOL(comSymbols)
    .成员 名字, 文本型, , , Name
    .成员 偏移值, 整数型, , , Offset
    .成员 段类型, 字节型, , , Section
    .成员 符号类型, 字节型, , , SymType
    .成员 是否保护模式, 逻辑型, , , IsProto

数据类型 EMS常量类型, , TYPE_CONSTANT(comSymbols)
    .成员 名称, 文本型, , , Name
    .成员 值, 文本型, , , Value

数据类型 EMS数据类型, , TYPE_TYPE(comTypes)
    .成员 名称, 文本型, , , Name
    .成员 资源, 文本型, , , Source

数据类型 EMS高低字类型, , 
    .成员 低双字, 整数型, , , 
    .成员 高双字, 整数型, , , 

数据类型 EMS虚拟文件类型, 公开, 管理项目的文件池
    .成员 名称, 文本型, , , 
    .成员 扩展, 整数型, , , 
    .成员 内容, 文本型, , , 
    .成员 状态, 逻辑型, , , 

.全局变量 EMS_库, 逻辑型, , , bLibrary
.全局变量 EMS_库名, 文本型, , , LibraryName
.全局变量 EMS_DLL名, 文本型, , , NameDLL
.全局变量 EMS_命令行编译, 逻辑型, , , IsCmdCompile(comCompiler)
.全局变量 匿名全局变量_490, 空白型, , , 
.全局变量 EMS_唯一ID_l, 整数型, , , lUniqueID
.全局变量 EMS_唯一ID_s, 整数型, , , sUniqueID
.全局变量 EMS_唯一ID_d, 整数型, , , dUniqueID
.全局变量 EMS_唯一ID_f, 整数型, , , fUniqueID(comData)
.全局变量 匿名全局变量_57, 空白型, , , 
.全局变量 EMS_是否DLL, 逻辑型, , , IsDLL
.全局变量 EMS_导出集, EMS导出类型, , "0", Exports
.全局变量 EMS_重置, EMS重置类型, , "0", Relocations(comExports)
.全局变量 匿名全局变量_63, 空白型, , , 
.全局变量 EMS_是否浮点数, 逻辑型, , , IsFloat
.全局变量 EMS_关系, 文本型, , , Relation
.全局变量 EMS_唯一ID_e, 整数型, , , eUniqueID
.全局变量 EMS_比较1, 文本型, , , CompareOne
.全局变量 EMS_比较2, 文本型, , , CompareTwo
.全局变量 EMS_相关参数, 文本型, , , Assignment
.全局变量 EMS_括号打开, 字节型, , , BracketsOpen
.全局变量 EMS_计算次数, 整数型, , , EvaluateCount
.全局变量 EMS_是否字符串比较, 逻辑型, , , IsStringCompare(comExpressions)
.全局变量 匿名全局变量_1594, 空白型, , , 
.全局变量 EMS_编码集, EMS编码类型, , "0", Fixups(comFixups)
.全局变量 匿名全局变量_1195, 空白型, , , 
.全局变量 EMS_是否回调框架, 逻辑型, , , IsCallFrame
.全局变量 EMS_框架集, EMS框架类型, , "0", Frames
.全局变量 EMS_参数数量, 整数型, , , ArgCount
.全局变量 EMS_当前框架, 文本型, , , CurrentFrame
.全局变量 EMS_唯一ID_fc, 整数型, , , fcUniqueID(comFrames)
.全局变量 匿名全局变量_1235, 空白型, , , 
.全局变量 EMS_导入集, EMS导入类型, , "0", Imports(comImports)
.全局变量 匿名全局变量_64, 空白型, , , 
.全局变量 EMS_段集, EMS段类型, , "0", Section
.全局变量 EMS_头大小, 短整数型, , , SizeOfHeader
.全局变量 EMS_程序类型, 字节型, , , AppType
.全局变量 EMS_所有段前大小, 整数型, , , SizeOfAllSectionsBefore
.全局变量 EMS_所有段前重写大小, 整数型, , , SizeOfAllSectionsBeforeRaw(comLinker)
.全局变量 匿名全局变量_1047, 空白型, , , 
.全局变量 EMS_源, 文本型, , , Source
.全局变量 EMS_位置, 整数型, , , Position
.全局变量 EMS_列举标识, 文本型, , , WithIdent
.全局变量 EMS_入口点, 文本型, , , EntryPoint
.全局变量 EMS_无符号申请, 逻辑型, , , UnsignedDeclare(comParser)
.全局变量 匿名全局变量_65, 空白型, , , 
.全局变量 匿名全局变量_2680, 空白型, , , 
.全局变量 EMS_资源引导表集, EMS资源导引表类型, , "0", D
.全局变量 EMS_唯一资源编号, 整数型, , , lUniqueBMP(comResources)
.全局变量 匿名全局变量_2682, 空白型, , , 
.全局变量 EMS_错误数, 整数型, , , Errors
.全局变量 EMS_是否出错, 逻辑型, 公开, , pError
.全局变量 EMS_信息, 文本型, , , Summary
.全局变量 EMS_显示信息, 逻辑型, , , ShowSummary
.全局变量 EMS_运行文件, 文本型, , , sFileToRun
.全局变量 EMS_包含文件长度, 整数型, , , LenIncludes
.全局变量 EMS_过程模块长度, 整数型, , , LenProcModules(comSummary)
.全局变量 匿名全局变量_623, 空白型, , , 
.全局变量 EMS_常量集, EMS常量类型, , "0", Constants
.全局变量 EMS_符号集, EMS符号类型, , "0", Symbols(comSymbols)
.全局变量 匿名全局变量_800, 空白型, , , 
.全局变量 EMS_当前段, 文本型, , , CurrentSection
.全局变量 EMS_当前模块, 文本型, , , CurrentModule(comSyntax)
.全局变量 匿名全局变量_1951, 空白型, , , 
.全局变量 匿名全局变量_1983, 空白型, , , 
.全局变量 EMS_类型集, EMS数据类型, , "0", Types
.全局变量 EMS_当前类型, 文本型, , , CurrentType
.全局变量 EMS_类型左, 整数型, , , TypesLeft(comTypes)
.全局变量 匿名全局变量_4076, 空白型, , , 
.全局变量 EMS_虚拟文件集, EMS虚拟文件类型, 公开, "0", 
.全局变量 匿名全局变量_1952, 空白型, , , 
.全局变量 EMS_程序时间, 整数型, , , 
.全局变量 EMS_程序句柄, 整数型, , , hWndProg(envGeneral)
.全局变量 匿名全局变量_2907, 空白型, , , 
.全局变量 EMS_程序运行路径, 文本型, , , 
.全局变量 EMS_资源文件, 文本型, , , 

.DLL命令 API_EMS_终止进程, 整数型, "kernel32.dll", "TerminateProcess", , comSummary
    .参数 进程句柄, 整数型, , 
    .参数 退出方式, 整数型, , 

.DLL命令 API_EMS_打开进程, 整数型, "kernel32.dll", "OpenProcess", , OpenProcess(envGeneral)
    .参数 临时数据, 整数型, , 
    .参数 标识句柄, 整数型, , 
    .参数 进程编号, 整数型, , 

.DLL命令 API_EMS_获取当前时间, 整数型, "kernel32.dll", "GetTickCount", , GetTickCount(envGeneral)

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (_启动窗口, , 假)

.程序集 EMS编译器程序集, , , (行数:172,方法:21)

.子程序 EMS编译, 空白型, 公开, Compile 
.参数 文件全路径名, 文本型, , 
.参数 是否运行, 逻辑型, , 

赋值 (EMS_程序运行路径, 取运行目录 ())
赋值 (EMS_资源文件, 相加 (取文本左边 (文件全路径名, 倒找文本 (文件全路径名, “.”, , 假)), “lib”))
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

EMS信息初始化 ()
EMS提示信息 (“开始初始化数据.......”)

EMS初始化段 ()
EMS初始化符号 ()
EMS初始化资源 ()
EMS初始化导入 ()
EMS初始化导出 ()
EMS初始化编码 ()
EMS初始化框架 ()
EMS初始化数据 ()
EMS初始化数据类型 ()
EMS初始化解析器 ()
EMS提示信息 (“环境初始化完毕.开始数据分析中...”)

EMS解析器 ()

.如果真 (EMS_是否DLL)
    赋值 (EMS_DLL名, 取文本右边 (文件全路径名, 相减 (取文本长度 (文件全路径名), 倒找文本 (文件全路径名, “\”, , 假))))
    赋值 (EMS_DLL名, 取文本左边 (EMS_DLL名, 相减 (取文本长度 (EMS_DLL名), 3)))
    赋值 (EMS_DLL名, 相加 (EMS_DLL名, “DLL”))
.如果真结束
.如果真 (EMS_是否出错)
    EMS设置提示 (EMS_信息)
    返回 ()
.如果真结束
.如果真 (EMS_库)
    EMS导出库 (文件全路径名)
    返回 ()
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)
EMS初始化连接 ()

.如果真 (EMS_是否出错)
    EMS设置提示 (EMS_信息)
    返回 ()
.如果真结束

EMS编码数据 ()
EMS连接 (文件全路径名, 是否运行)
返回 ()

.子程序 EMS增加代码字节, 空白型, , AddCodeByte
.参数 临时值, 字节型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_段集 [3].字节), 1))
 ' 本源码来自易语言资源网(www.5A5X.com)
重定义数组 (EMS_段集 [3].字节, 真, 临时数)
赋值 (EMS_段集 [3].字节 [临时数], 临时值)

.子程序 EMS增加代码单字, 空白型, , AddCodeWord
.参数 临时值, 短整数型, , 

EMS增加代码字节 (EMS单字低字节 (临时值))
EMS增加代码字节 (EMS单字高字节 (临时值))

.子程序 EMS增加代码小数, 空白型, , AddCodeSingle
.参数 临时值, 小数型, , 

.局部变量 临时字节, 字节集, , , 

赋值 (临时字节, 到字节集 (临时值))
EMS增加代码字节 (临时字节 [1])
EMS增加代码字节 (临时字节 [2])
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS增加代码字节 (临时字节 [3])
EMS增加代码字节 (临时字节 [4])

.子程序 EMS增加代码双字, 空白型, , AddCodeDWord
.参数 临时值, 整数型, , 

EMS增加代码单字 (EMS双字低字节 (临时值))
EMS增加代码单字 (EMS双字高字节 (临时值))

.子程序 EMS增加数据字节, 空白型, , AddDataByte
.参数 临时值, 字节型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_段集 [2].字节), 1))
重定义数组 (EMS_段集 [2].字节, 真, 临时数)
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (EMS_段集 [2].字节 [临时数], 临时值)

.子程序 EMS增加数据单字, 空白型, , AddDataWord
.参数 临时值, 短整数型, , 

EMS增加数据字节 (EMS单字低字节 (临时值))
EMS增加数据字节 (EMS单字高字节 (临时值))

.子程序 EMS增加数据小数, 空白型, , AddDataSingle
.参数 临时值, 小数型, , 

.局部变量 临时字节, 字节集, , , 

赋值 (临时字节, 到字节集 (临时值))
EMS增加数据字节 (临时字节 [1])
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS增加数据字节 (临时字节 [2])
EMS增加数据字节 (临时字节 [3])
EMS增加数据字节 (临时字节 [4])

.子程序 EMS增加数据双字, 空白型, , AddDataDWord
.参数 临时值, 整数型, , 

EMS增加数据单字 (EMS双字低字节 (临时值))
EMS增加数据单字 (EMS双字高字节 (临时值))

.子程序 EMS增加输入字节, 空白型, , AddImportByte
.参数 临时值, 字节型, , 

EMS增加段名称字节 (“.导入数据”, 临时值)
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS增加输入单字, 空白型, , AddImportWord
.参数 临时值, 短整数型, , 

EMS增加段名称单字 (“.导入数据”, 临时值)

.子程序 EMS增加输入双字, 空白型, , AddImportWord
.参数 临时值, 整数型, , 

EMS增加段名称双字 (“.导入数据”, 临时值)

.子程序 EMS增加输出字节, 空白型, , AddExportByte
.参数 临时值, 字节型, , 

EMS增加段名称字节 (“.导出数据”, 临时值)
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS增加输出单字, 空白型, , AddExportWord
.参数 临时值, 短整数型, , 

EMS增加段名称单字 (“.导出数据”, 临时值)

.子程序 EMS增加输出双字, 空白型, , AddExportDWord
.参数 临时值, 整数型, , 

EMS增加段名称双字 (“.导出数据”, 临时值)

.子程序 EMS增加资源字节, 空白型, , AddResourceByte
.参数 临时值, 字节型, , 

EMS增加段名称字节 (“.资源”, 临时值)

.子程序 EMS增加资源单字, 空白型, , AddResourceWord
.参数 临时值, 短整数型, , 

EMS增加段名称单字 (“.资源”, 临时值)
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS增加资源双字, 空白型, , AddResourceDWord
.参数 临时值, 整数型, , 

EMS增加段名称双字 (“.资源”, 临时值)

.子程序 EMS增加重置字节, 空白型, , AddRelocationByte
.参数 临时值, 字节型, , 

EMS增加段名称字节 (“.定位”, 临时值)

.子程序 EMS增加重置单字, 空白型, , AddRelocationWord
.参数 临时值, 短整数型, , 

EMS增加段名称单字 (“.定位”, 临时值) ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS增加重置双字, 空白型, , AddRelocationDWord
.参数 临时值, 整数型, , 

EMS增加段名称双字 (“.定位”, 临时值)

.程序集 EMS信息管理程序集, , , comSummary(行数：69，方法:5)

.子程序 EMS信息初始化, 空白型, 公开, InitSummary
赋值 (EMS_信息, “”)
赋值 (EMS_错误数, 0)
赋值 (EMS_是否出错, 假)
赋值 (EMS_包含文件长度, 0)
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 EMS错误信息, 空白型, 公开, ErrMessage**
.参数 临时文本, 文本型, , 

.局部变量 循环容器, 整数型, , , 

赋值 (EMS_是否出错, 真)
赋值 (EMS_错误数, 相加 (EMS_错误数, 1))
赋值 (EMS_过程模块长度, 0)

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果 (等于 (EMS_虚拟文件集 [循环容器], 名称, EMS_当前模块))
        赋值 (EMS_过程模块长度, 相加 (EMS_过程模块长度, 取文本长度 (相加 (“模块 ”, #引号, EMS_虚拟文件集 [循环容器], 名称, #引号, “;”, 字符 (#回车键)))))
        跳出循环 ()
    .否则
        赋值 (EMS_过程模块长度, 相加 (EMS_过程模块长度, 取文本长度 (EMS_虚拟文件集 [循环容器], 内容), 取文本长度 (相加 (“模块 ”, #引号, EMS_虚拟文件集 [循环容器], 名称, #引号, “;”, 字符 (#回车键)))))
    .如果结束
    
.计次循环尾 ()

赋值 (EMS_信息, 相加 (EMS_信息, “-> ”, 临时文本, “ [”, EMS_当前模块, “.行数:”, 到文本 (EMS获取行号 (相减 (EMS_位置, 1, EMS_包含文件长度, EMS_过程模块长度))), “]”, #换行符))
.如果真 (取反 (EMS_命令行编译))
     ' 提示界面
    _启动窗口.加入文本 (., EMS_信息)
    
.如果真结束
.如果真 (取反 (EMS_命令行编译))
     ' 选择处所位置
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS提示信息, 空白型, 公开, InfMessage**
.参数 临时文本, 文本型, , 

.如果真 (取反 (EMS_命令行编译))
    _启动窗口.加入文本 (., 相加 (临时文本, #换行符))
.如果真结束
赋值 (EMS_信息, 相加 (EMS_信息, 临时文本, #换行符))
处理事件 ()

.子程序 EMS设置提示, 空白型, 公开, WriteSummary**
.参数 临时文本, 文本型, , 

.局部变量 临时项目编号, 整数型, , , 

.如果真 (并且 (等于 (EMS_显示信息, 假), 等于 (EMS_是否出错, 假), 等于 (EMS_是否DLL, 假), 等于 (EMS_库, 假)))
    赋值 (EMS_运行文件, 相加 (#左引号, EMS_运行文件, #右引号))
    
    输出调试文本 (EMS_运行文件)
     ' 临时项目编号 ＝ 运行 (EMS_运行文件, 假, )
     ' EMS_程序句柄 ＝ API_EMS_打开进程 (#EMS_进程所有方式, 0, 临时项目编号)
    返回 ()
.如果真结束


 ' 界面显示信息

.子程序 EMS获取行号, 整数型, , GetLineNumber
.参数 当前位置, 整数型, , 

.局部变量 临时线, 整数型, , , 
.局部变量 循环容器, 整数型, , , 

赋值 (临时线, 1)
.计次循环首 (当前位置, 循环容器)
    .如果真 (等于 (取文本中间 (EMS_源, 循环容器, 2), #换行符))
        赋值 (临时线, 相加 (临时线, 1))
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.计次循环尾 ()
返回 (临时线)

.程序集 EMS连接管理程序集, , , comLinker(行数:458,方法:28)

.子程序 EMS初始化连接, 空白型, , InitLinker
EMS通用资源 ()
EMS通用导入表 ()
EMS通用导出表 ()

.如果真 (EMS_是否DLL)
    EMS写入重置 ()
.如果真结束
EMS输出DOS头 ()
EMS输出DOS分支 ()
EMS输出PE头 ()
EMS输出段表 ()
EMS输出段 ()

.子程序 EMS初始化段, 空白型, , InitSections
重定义数组 (EMS_段集, 假, 1)
重定义数组 (EMS_段集 [1].字节, 假, 0)
赋值 (EMS_段集 [1].名字, “.连接”)
赋值 (EMS_段集 [1].特性, 0)
赋值 (EMS_段集 [1].段类型, 0)

.子程序 EMS连接, 空白型, , Link
.参数 文件路径, 文本型, , sFile
.参数 是否运行, 逻辑型, , Run

.局部变量 循环容器, 整数型, , , 
.局部变量 临时文件号, 整数型, , , 
.局部变量 临时数, 整数型, , , 

.如果真 (EMS_是否DLL)
    赋值 (文件路径, 取文本左边 (文件路径, 相减 (取文本长度 (文件路径), 3)))
    赋值 (文件路径, 相加 (文件路径, “DLL”))
.如果真结束
.如果真 (文件是否存在 (文件路径))
    删除文件 (文件路径)
.如果真结束

赋值 (临时文件号, 打开文件 (文件路径, #重写, ))
赋值 (临时数, 取数组成员数 (EMS_段集 [1].字节))
.计次循环首 (临时数, 循环容器)
    写出数据 (临时文件号, EMS_段集 [1].字节 [循环容器])
.计次循环尾 ()
关闭文件 (临时文件号)


 ' 临时文件号 ＝ 打开文件 (EMS_程序运行路径 ＋ “\a2.txt”, #重写, )
 ' .计次循环首 (临时数, 循环容器)
     ' .如果真 (等于 (求余数 (循环容器, 16), 1))
         ' 写出文本 (临时文件号, 到文本 (循环容器) ＋ “:”)
    .如果真结束
    
     ' 写出文本 (临时文件号, EMS_段集 [1].字节 [循环容器], “ ”)
    
     ' .如果真 (等于 (求余数 (循环容器, 16), 0))
         ' 写文本行 (临时文件号, “”)
    .如果真结束
    
 ' .计次循环尾 ()
 ' 关闭文件 (临时文件号)

.如果 (EMS_是否DLL)
    EMS提示信息 (相加 (“动态连接库编译完毕. 用时:”, #换行符, 到文本 (EMS结束时间 ()), “秒. 文件大小:”, 到文本 (临时数), “字节”))
     ' 禁止运行按钮
.否则
    EMS提示信息 (相加 (“程序编译完毕. 用时:”, #换行符, 到文本 (EMS结束时间 ()), “秒. 文件大小:”, 到文本 (临时数), “字节”))
.如果结束

赋值 (EMS_运行文件, 文件路径)
EMS设置提示 (EMS_信息)

.子程序 EMS输出DOS头, 空白型, , OutputDOSHeader
EMS输出双字 (8411725)
EMS输出双字 (1)
EMS输出双字 (1048580)
EMS输出双字 (-1)
EMS输出双字 (320)
EMS输出双字 (0)
EMS输出双字 (64)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (0)
EMS输出双字 (128)

.子程序 EMS输出DOS分支, 空白型, , OutputDOSStub
EMS输出双字 (247078670)
EMS输出双字 (-855002112)
EMS输出双字 (1275181089)
EMS输出双字 (1752441293)
EMS输出双字 (1881174889)
EMS输出双字 (1919381362)
EMS输出双字 (1663069537)
EMS输出双字 (1869508193)
EMS输出双字 (1700929652)
EMS输出双字 (1853190688)
EMS输出双字 (544106784)
EMS输出双字 (542330692)
EMS输出双字 (1701080941)
EMS输出双字 (604638510)
EMS输出双字 (0)
EMS输出双字 (0)

.子程序 EMS输出PE头, 空白型, , OutputPEHeader(*)
EMS输出双字 (17744) ' Signature = "PE"
EMS输出单字 (332) ' Machine 0x014C;i386
EMS输出单字 (EMS数字段 ()) ' NumberOfSections = 4
EMS输出双字 (0) ' TimeDateStamp
EMS输出双字 (0) ' PointerToSymbolTable = 0
EMS输出双字 (0) ' NumberOfSymbols = 0
EMS输出单字 (224) ' SizeOfOptionalHeader


EMS输出单字 (选择 (EMS_是否DLL, 8462, -32369)) ' Characteristics

EMS输出单字 (267) ' Magic
EMS输出字节 (5) ' MajorLinkerVersion
EMS输出字节 (0) ' MinerLinkerVersion
EMS申请属性 (“代码大小”) ' SizeOfCode
EMS申请属性 (“数据初始化大小”) ' SizeOfInitializedData
EMS申请属性 (“数据销毁大小”) ' SizeOfUnInitializedData
EMS申请属性 (“入口地址”) ' AddressOfEntryPoint
EMS申请属性 (“基础代码”) ' BaseOfCode
EMS申请属性 (“基础数据”) ' BaseOfData
EMS输出双字 (4194304) ' ImageBase
EMS输出双字 (4096) ' SectionAlignment
EMS输出双字 (512) ' FileAlignment
EMS输出单字 (1) ' MajorOSVersion
EMS输出单字 (0) ' MinorOSVersion
EMS输出单字 (0) ' MajorImageVersion
EMS输出单字 (0) ' MinorImageVersion
EMS输出单字 (4) ' MajorSubSystemVerion
EMS输出单字 (0) ' MinorSubSystemVerion
EMS输出双字 (0) ' Win32VersionValue
EMS申请属性 (“映像大小”) ' SizeOfImage
EMS申请属性 (“头大小”) ' SizeOfHeaders
EMS输出双字 (0) ' CheckSum
EMS输出单字 (取整 (EMS_程序类型)) ' SubSystem = 2:GUI; 3:CUI
EMS输出单字 (0) ' DllCharacteristics
EMS输出双字 (65536) ' SizeOfStackReserve
EMS输出双字 (65536) ' SizeOfStackCommit
EMS输出双字 (65536) ' SizeOfHeapReserve
EMS输出双字 (0) ' SizeOfHeapRCommit
EMS输出双字 (0) ' LoaderFlags
EMS输出双字 (16) ' NumberOfDataDirectories

EMS申请属性 (“导出表.入口”)
EMS申请属性 (“导出表.大小”)

EMS申请属性 (“导入表.入口”)
EMS申请属性 (“导入表.大小”)

EMS申请属性 (“资源表.入口”)
EMS申请属性 (“资源表.大小”)

EMS输出双字 (0)
EMS输出双字 (0) ' Exception_Table
EMS输出双字 (0)
EMS输出双字 (0) ' Certificate_Table

EMS申请属性 (“定位表.入口 ”)
EMS申请属性 (“定位表.大小”)

EMS输出双字 (0)
EMS输出双字 (0) ' Debug_Data
EMS输出双字 (0)
EMS输出双字 (0) ' Architecture
EMS输出双字 (0)
EMS输出双字 (0) ' Global_PTR
EMS输出双字 (0)
EMS输出双字 (0) ' TLS_Table
EMS输出双字 (0)
EMS输出双字 (0) ' Load_Config_Table
EMS输出双字 (0)
EMS输出双字 (0) ' BoundImportTable
EMS输出双字 (0)
EMS输出双字 (0) ' ImportAddressTable
EMS输出双字 (0)
EMS输出双字 (0) ' DelayImportDescriptor
EMS输出双字 (0)
EMS输出双字 (0) ' COMplusRuntimeHeader
EMS输出双字 (0)
EMS输出双字 (0) ' Reserved

.子程序 EMS输出段表, 空白型, , OutputSectionTable*
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时参数, 整数型, , , 
.局部变量 临时变量, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 临时大小, 短整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_段集))
.变量循环首 (2, 临时数, 1, 循环容器)
    赋值 (临时参数, 取数组成员数 (EMS_段集 [循环容器], 字节))
    .如果真 (等于 (临时参数, 0))
        到循环尾 ()
    .如果真结束
    赋值 (临时字节集, 到字节集 (EMS_段集 [循环容器], 名字))
    赋值 (临时变量, 取字节集长度 (临时字节集))
    .计次循环首 (8, 循环次数)
        .如果 (大于 (循环次数, 临时变量))
            EMS输出字节 (0)
        .否则
            EMS输出字节 (临时字节集 [循环次数])
        .如果结束
        
    .计次循环尾 ()
    
    EMS申请属性 (相加 (EMS_段集 [循环容器], 名字, “.虚拟大小”))
    EMS申请属性 (相加 (EMS_段集 [循环容器], 名字, “.虚拟地址”))
    EMS申请属性 (相加 (EMS_段集 [循环容器], 名字, “.原数据大小”))
    EMS申请属性 (相加 (EMS_段集 [循环容器], 名字, “.原数据指针”))
    EMS申请属性 (相加 (EMS_段集 [循环容器], 名字, “.定位指针”))
    EMS输出双字 (0) ' PointerToLinenumbers
    EMS输出单字 (0) ' NumberOfRelocations
    EMS输出单字 (0) ' NumberOfLinenumbers
    EMS输出双字 (EMS_段集 [循环容器], 特性) ' Characteristics
.变量循环尾 ()

赋值 (EMS_头大小, 取数组成员数 (EMS_段集 [1].字节))
.变量循环首 (0, 相加 (EMS_头大小, 512), 512, 循环容器)
    赋值 (临时大小, 循环容器)
.变量循环尾 ()

.变量循环首 (EMS_头大小, 相减 (临时大小, 1), 1, )
    EMS增加段名称字节 (“.连接”, 0)
.变量循环尾 ()

赋值 (EMS_头大小, 取数组成员数 (EMS_段集 [1].字节))
EMS编码属性 (“头大小”, 到整数 (EMS_头大小))
赋值 (EMS_所有段前重写大小, EMS_头大小)

.子程序 EMS编码表入口, 空白型, , FixTableEntry*
.参数 临时段编号, 短整数型, , 

.判断开始 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_代码))
    EMS编码属性 (“入口地址”, EMS_所有段前大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_导入))
    EMS编码属性 (“导入表.入口”, EMS_所有段前大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_导出))
    EMS编码属性 (“导出表.入口”, EMS_所有段前大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_资源))
    EMS编码属性 (“资源表.入口”, EMS_所有段前大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_重置))
    EMS编码属性 (“定位表.入口”, EMS_所有段前大小)
.默认
    
.判断结束


.子程序 EMS编码表大小, 空白型, , FixTableSize*
.参数 临时段编号, 短整数型, , 
.参数 临时大小, 整数型, , 

.判断开始 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_导入))
    EMS编码属性 (“导入表.大小”, 临时大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_导出))
    EMS编码属性 (“导出表.大小”, 临时大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_资源))
    EMS编码属性 (“资源表.大小”, 临时大小)
.判断 (等于 (EMS_段集 [临时段编号], 段类型, #EMS_连接_重置))
    EMS编码属性 (“定位表.大小”, 临时大小)
.默认
    
.判断结束


.子程序 EMS输出段, 空白型, , OutputSections*
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时物理大小, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时参数, 整数型, , , 

赋值 (EMS_所有段前大小, 4096)

赋值 (临时数, 取数组成员数 (EMS_段集))
.变量循环首 (2, 临时数, 1, 循环容器)
    赋值 (临时参数, 取数组成员数 (EMS_段集 [循环容器], 字节))
    .如果真 (等于 (临时参数, 0))
        到循环尾 ()
    .如果真结束
    EMS编码属性 (相加 (EMS_段集 [循环容器], 名字, “.虚拟大小”), 临时参数)
    EMS编码表大小 (循环容器, 临时参数)
    赋值 (临时物理大小, EMS物理大小 (EMS_段集 [循环容器], 字节))
    
    .变量循环首 (临时参数, 相减 (临时物理大小, 1), 1, )
        EMS增加段名称字节 (EMS_段集 [循环容器], 名字, 0)
    .变量循环尾 ()
    
    EMS编码表入口 (循环容器)
    
    .如果真 (等于 (EMS_段集 [循环容器], 名字, “.定位”))
        EMS编码属性 (“.代码.定位指针”, EMS_所有段前大小)
    .如果真结束
    EMS编码属性 (相加 (EMS_段集 [循环容器], 名字, “.虚拟地址”), EMS_所有段前大小)
    赋值 (EMS_所有段前大小, 相加 (EMS_所有段前大小, EMS虚拟大小 (EMS_段集 [循环容器], 字节, )))
    
    EMS编码属性 (相加 (EMS_段集 [循环容器], 名字, “.原数据指针”), EMS_所有段前重写大小)
    赋值 (EMS_所有段前重写大小, 相加 (EMS_所有段前重写大小, 临时物理大小))
    
    EMS编码属性 (相加 (EMS_段集 [循环容器], 名字, “.原数据大小”), 临时物理大小)
    
    .计次循环首 (取数组成员数 (EMS_段集 [循环容器], 字节), 循环次数)
        EMS增加段名称字节 (“.连接”, EMS_段集 [循环容器], 字节 [循环次数])
    .计次循环尾 ()
    
    
    .变量循环首 (0, 268431360, 4096, 循环次数)
        .如果真 (等于 (临时物理大小, 循环次数))
            赋值 (EMS_所有段前大小, 相减 (EMS_所有段前大小, 4096))
        .如果真结束
        .如果真 (大于 (循环次数, 临时物理大小))
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    
.变量循环尾 ()
EMS编码属性 (“映像大小”, EMS_所有段前大小)

.子程序 EMS申请属性, 空白型, , DeclareAttribute
.参数 临时名, 文本型, , 

EMS增加符号 (临时名, 取数组成员数 (EMS_段集 [1].字节), #EMS_连接_连接器, , )
EMS输出双字 (0)

.子程序 EMS编码属性, 空白型, , FixAttribute
.参数 临时名, 文本型, , 
.参数 临时值, 整数型, , 

EMS编码双字 (EMS获取符号偏移 (临时名), 临时值)

.子程序 EMS偏移, 整数型, , OffsetOf
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 字节型, , , 

赋值 (临时数, 取数组成员数 (EMS_段集))
.变量循环首 (2, 临时数, 1, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 名字, 临时名))
        返回 (取数组成员数 (EMS_段集 [循环容器], 字节))
    .如果真结束
    
.变量循环尾 ()
返回 (0)

.子程序 EMS编码双字, 空白型, , FixDWord
.参数 临时偏移, 整数型, , 
.参数 临时值, 整数型, , 

赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 1)], EMS单字低字节 (EMS双字低字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 2)], EMS单字高字节 (EMS双字低字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 3)], EMS单字低字节 (EMS双字高字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 4)], EMS单字高字节 (EMS双字高字节 (临时值)))

.子程序 EMS数字段, 短整数型, , NumberOfSections
.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 短整数型, , , 

赋值 (临时数, 0)
.变量循环首 (2, 取数组成员数 (EMS_段集), 1, 循环容器)
    .如果真 (大于 (取数组成员数 (EMS_段集 [循环容器], 字节), 0))
        赋值 (临时数, 相加 (临时数, 1))
    .如果真结束
    
.变量循环尾 ()
返回 (临时数)

.子程序 EMS段是否存在, 逻辑型, , SectionExists*
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.变量循环首 (2, 取数组成员数 (EMS_段集), 1, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 名字, 临时名))
        返回 (真)
    .如果真结束
    
.变量循环尾 ()
返回 (假)

.子程序 EMS段编号, 字节型, , SectionID*
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.变量循环首 (2, 取数组成员数 (EMS_段集), 1, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 名字, 临时名))
        返回 (循环容器)
    .如果真结束
    
.变量循环尾 ()
返回 (0)

.子程序 EMS输出字节, 空白型, , OutputByte*
.参数 临时值, 字节型, , 

EMS增加段名称字节 (“.连接”, 临时值)

.子程序 EMS输出单字, 空白型, , OutputWord*
.参数 临时值, 短整数型, , 

EMS增加段名称单字 (“.连接”, 临时值)

.子程序 EMS输出双字, 空白型, , OutputDWord*
.参数 临时值, 整数型, , 

EMS增加段名称双字 (“.连接”, 临时值)

.子程序 EMS增加段字节, 空白型, , AddSectionByte
.参数 临时值, 字节型, , 

.局部变量 临时数, 短整数型, , , 
.局部变量 临时参数, 整数型, , , 

赋值 (临时数, EMS获取段编号 (EMS_当前段))
赋值 (临时参数, 相加 (取数组成员数 (EMS_段集 [临时数], 字节), 1))
重定义数组 (EMS_段集 [临时数], 字节, 真, 临时参数)
赋值 (EMS_段集 [临时数], 字节 [临时参数], 临时值)

.子程序 EMS增加段单字, 空白型, , AddSectionWord
.参数 临时值, 短整数型, , 

EMS增加段字节 (EMS单字低字节 (临时值))
EMS增加段字节 (EMS单字高字节 (临时值))

.子程序 EMS增加段双字, 空白型, , AddSectionDWord
.参数 临时值, 整数型, , 

EMS增加段单字 (EMS双字低字节 (临时值))
EMS增加段单字 (EMS双字高字节 (临时值))

.子程序 EMS增加段名称字节, 空白型, , AddSectionNameByte
.参数 临时名称, 文本型, , 
.参数 临时值, 字节型, , 

.局部变量 临时数, 短整数型, , , 
.局部变量 临时参数, 整数型, , , 

赋值 (临时数, EMS获取段编号 (临时名称))
赋值 (临时参数, 相加 (取数组成员数 (EMS_段集 [临时数], 字节), 1))
重定义数组 (EMS_段集 [临时数], 字节, 真, 临时参数)
赋值 (EMS_段集 [临时数], 字节 [临时参数], 临时值)

.子程序 EMS增加段名称单字, 空白型, , AddSectionNameWord
.参数 临时名称, 文本型, , 
.参数 临时值, 短整数型, , 

EMS增加段名称字节 (临时名称, EMS单字低字节 (临时值))
EMS增加段名称字节 (临时名称, EMS单字高字节 (临时值))

.子程序 EMS增加段名称双字, 空白型, , AddSectionNameDWord
.参数 临时名称, 文本型, , 
.参数 临时值, 整数型, , 

EMS增加段名称单字 (临时名称, EMS双字低字节 (临时值))
EMS增加段名称单字 (临时名称, EMS双字高字节 (临时值))

.子程序 EMS增件段名称小数, 空白型, , AddSectionNameSingle
.参数 临时名称, 文本型, , 
.参数 临时值, 小数型, , 

.局部变量 临时字节集, 字节集, , , 

赋值 (临时字节集, 到字节集 (临时值))
EMS增加段名称字节 (临时字节集 [1])
EMS增加段名称字节 (临时字节集 [2])
EMS增加段名称字节 (临时字节集 [3])
EMS增加段名称字节 (临时字节集 [4])

.子程序 EMS获取段编号, 短整数型, , GetSectionIDByName
.参数 临时名, 文本型, , 

.局部变量 临时数, 字节型, , , 
.局部变量 循环容器, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_段集))
.计次循环首 (临时数, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 名字, 临时名))
        返回 (循环容器)
    .如果真结束
    
.计次循环尾 ()
EMS错误信息 (相加 (临时名, “--段内容不存在”))
返回 (0)

.程序集 EMS符号管理程序集, , , Symbols(行数:142,方法:10)

.子程序 EMS初始化符号, 空白型, , InitSymbols
重定义数组 (EMS_符号集, 假, 0)
重定义数组 (EMS_常量集, 假, 0)

.子程序 EMS增加符号, 空白型, , AddSymbol
.参数 临时名字, 文本型, , 
.参数 偏移数字, 整数型, , 
.参数 段信息, 字节型, , 
.参数 符号类型, 字节型, 可空, 
.参数 是否保护, 逻辑型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (符号类型))
    赋值 (符号类型, #EMS_符号_地址)
.如果真结束
.如果真 (是否为空 (是否保护))
    赋值 (是否保护, 假)
.如果真结束

.如果真 (EMS符号是否存在 (临时名字))
    EMS错误信息 (相加 (“符号:”, 临时名字, “已经存在”))
    返回 ()
.如果真结束

赋值 (临时数, 相加 (取数组成员数 (EMS_符号集), 1))
重定义数组 (EMS_符号集, 真, 临时数)
赋值 (EMS_符号集 [临时数], 名字, 临时名字)
赋值 (EMS_符号集 [临时数], 偏移值, 偏移数字)
赋值 (EMS_符号集 [临时数], 段类型, 段信息)
赋值 (EMS_符号集 [临时数], 符号类型, 符号类型)
赋值 (EMS_符号集 [临时数], 是否保护模式, 是否保护)

.子程序 EMS符号是否存在, 逻辑型, , SymbolExists
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (并且 (等于 (EMS_符号集 [循环容器], 名字, 临时名), 取反 (EMS_符号集 [循环容器], 是否保护模式)))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS获取符号偏移, 整数型, , GetSymbolOffset
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时名))
        返回 (EMS_符号集 [循环容器], 偏移值)
    .如果真结束
    
.计次循环尾 ()
EMS错误信息 (相加 (“符号:”, 临时名, “不存在..”))
返回 (0)

.子程序 EMS获取符号进格, 空白型, , GetSymbolSpace(暂时无用)
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时标识))
        返回 ()
    .如果真结束
    
.计次循环尾 ()
返回 ()

.子程序 EMS获取符号大小, 整数型, , GetSymbolSize
.参数 临时符号, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时类型, 字节型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时符号))
        赋值 (临时类型, EMS_符号集 [循环容器], 符号类型)
        .判断开始 (或者 (等于 (临时类型, #EMS_符号_双字), 等于 (临时类型, #EMS_符号_无符号双字), 等于 (临时类型, #EMS_符号_小数)))
            返回 (4)
        .判断 (或者 (等于 (临时类型, #EMS_符号_字), 等于 (临时类型, #EMS_符号_无符号字)))
            返回 (2)
        .判断 (或者 (等于 (临时类型, #EMS_符号_字节), 等于 (临时类型, #EMS_符号_无符号字节)))
            返回 (1)
        .判断 (等于 (临时类型, #EMS_符号_字符串))
            返回 (0)
        .默认
            EMS错误信息 (相加 (“未知符号类型:”, 临时符号))
        .判断结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 EMS获取符号类型, 字节型, , GetSymbolType
.参数 临时符号, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时符号))
        返回 (EMS_符号集 [循环容器], 符号类型)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 EMS获取符号编号, 整数型, , GetSymbolID
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时标识))
        返回 (循环容器)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 EMS获取常量, 整数型, , GetConstant
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.如果真 (等于 (删首尾空 (临时名), “”))
    返回 (0)
.如果真结束
.计次循环首 (取数组成员数 (EMS_常量集), 循环容器)
    .如果真 (等于 (EMS_常量集 [循环容器], 名称, 临时名))
        返回 (到整数 (EMS_常量集 [循环容器], 值))
    .如果真结束
    
.计次循环尾 ()
EMS错误信息 (相加 (“未知常量:”, 临时名))
返回 (0)

.子程序 EMS增加常量, 空白型, , AddConstant
.参数 临时名, 文本型, , 
.参数 临时值, 文本型, , 

.局部变量 临时数, 整数型, , , 

.如果真 (取反 (EMS常量是否存在 (临时名)))
    赋值 (临时数, 相加 (取数组成员数 (EMS_常量集), 1))
    重定义数组 (EMS_常量集, 真, 临时数)
    赋值 (EMS_常量集 [临时数], 名称, 临时名)
    赋值 (EMS_常量集 [临时数], 值, 临时值)
.如果真结束


.子程序 EMS常量是否存在, 逻辑型, , 
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_常量集), 循环容器)
    .如果真 (等于 (EMS_常量集 [循环容器], 名称, 临时名))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.程序集 EMS资源管理程序集, , , comResources(行数:288,方法:15)

.子程序 EMS初始化资源, 空白型, , InitResources
赋值 (EMS_唯一资源编号, 0)
重定义数组 (EMS_资源引导表集, 假, 0)

.子程序 EMS申请位图, 空白型, , DeclareBitmap
.局部变量 临时数, 整数型, , , 
.局部变量 临时编号, 文本型, , , 
.局部变量 临时文件, 文本型, , , 

赋值 (EMS_唯一资源编号, 相加 (EMS_唯一资源编号, 1))
赋值 (临时编号, EMS标识符 ())
EMS符号 (“,”)
赋值 (临时文件, EMS字符串表达式 ())
EMS终止 ()

赋值 (临时数, EMS查找列表编号 (2))
.如果真 (等于 (临时数, -1))
    赋值 (临时数, EMS增加资源目录 (2))
.如果真结束
EMS增加资源项 (临时数, EMS_唯一资源编号)
EMS增加子资源 (临时数, EMS获取列表项目上标 (临时数), 2, 临时文件, 临时编号)

EMS代码块 ()

.子程序 EMS获取列表项目上标, 整数型, , GetDirItemUBound
.参数 临时编号, 短整数型, , 

返回 (取数组成员数 (EMS_资源引导表集 [临时编号], 项目))

.子程序 EMS查找列表编号, 整数型, , FindDirIDByType
.参数 列表类型, 短整数型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_资源引导表集), 循环容器)
    .如果真 (等于 (EMS_资源引导表集 [循环容器], 值, 列表类型))
        返回 (循环容器)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 EMS增加资源目录, 整数型, , AddResourceDirectory
.参数 临时值, 整数型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_资源引导表集), 1))
重定义数组 (EMS_资源引导表集, 真, 临时数)
赋值 (EMS_资源引导表集 [临时数], 值, 临时值)
重定义数组 (EMS_资源引导表集 [临时数], 项目, 假, 0)
返回 (临时数)

.子程序 EMS增加资源项, 空白型, , AddResourceItem
.参数 列表号, 整数型, , 
.参数 临时值, 整数型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_资源引导表集 [列表号], 项目), 1))
重定义数组 (EMS_资源引导表集 [列表号], 项目, 真, 临时数)
赋值 (EMS_资源引导表集 [列表号], 项目 [临时数], 值, 临时值)
重定义数组 (EMS_资源引导表集 [列表号], 项目 [临时数], 资源, 假, 0)

.子程序 EMS插入资源, 空白型, , InsertSource
.参数 资源, 文本型, , 

.局部变量 临时头, 文本型, , , 
.局部变量 临时脚, 文本型, , , 

赋值 (临时头, 取文本中间 (EMS_源, 1, 相减 (EMS_位置, 1)))
赋值 (临时脚, 取文本中间 (EMS_源, EMS_位置, 相加 (相减 (取文本长度 (EMS_源), EMS_位置), 1)))
赋值 (EMS_源, 相加 (临时头, 资源, 临时脚))

.子程序 EMS增加子资源, 空白型, , AddResourceResource
.参数 列表号, 整数型, , 
.参数 项编号, 整数型, , 
.参数 临时值, 整数型, , 
.参数 临时文件名, 文本型, 可空, 
.参数 临时符号名, 文本型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (临时文件名))
    赋值 (临时文件名, “”)
.如果真结束
.如果真 (是否为空 (临时符号名))
    赋值 (临时符号名, “”)
.如果真结束

赋值 (临时数, 相加 (取数组成员数 (EMS_资源引导表集 [列表号], 项目 [项编号], 资源), 1))
重定义数组 (EMS_资源引导表集 [列表号], 项目 [项编号], 资源, 真, 临时数)
赋值 (EMS_资源引导表集 [列表号], 项目 [项编号], 资源 [临时数], 值, 临时值)
赋值 (EMS_资源引导表集 [列表号], 项目 [项编号], 资源 [临时数], 文件名, 临时文件名)
赋值 (EMS_资源引导表集 [列表号], 项目 [项编号], 资源 [临时数], 符号名, 临时符号名)

.子程序 EMS增加资源符号, 空白型, , AddResSymbol*
.参数 临时名, 文本型, , 

EMS增加符号 (临时名, EMS偏移 (“.资源”), #EMS_连接_资源, #EMS_符号_标签, )

.子程序 EMS增加资源子, 空白型, , AddResResource*
.参数 临时名, 文本型, , 

.局部变量 临时数, 整数型, , , 

EMS增加段双字 (0)
赋值 (临时数, EMS偏移 (“.资源”))
EMS增加编码 (临时名, 临时数, #EMS_连接_资源, 相加 (临时数, 4))
EMS增加段双字 (0)

.子程序 EMS增加资源子导引表, 空白型, , AddResSubDirectory*
.参数 临时名, 文本型, , 
.参数 列表类型, 整数型, , 

.局部变量 临时数, 整数型, , , 

EMS增加段双字 (列表类型)
赋值 (临时数, EMS偏移 (“.资源”))
EMS增加编码 (临时名, 临时数, #EMS_连接_资源, 相加 (2147483648, 临时数, 4))
EMS增加段双字 (0)

.子程序 EMS通用资源, 空白型, , GenerateResources*
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 循环记次, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时参数, 整数型, , , 
.局部变量 临时变量, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_资源引导表集))
.如果真 (等于 (临时数, 0))
    返回 ()
.如果真结束

赋值 (EMS_当前段, “.资源”)
EMS增加资源符号 (“资源_根”)
EMS增加段双字 (0)
EMS增加段双字 (0)
EMS增加段双字 (0)
EMS增加段单字 (0)
EMS增加段单字 (临时数)

.计次循环首 (临时数, 循环容器)
    EMS增加资源子导引表 (相加 (“导引表_”, 到文本 (循环容器)), EMS_资源引导表集 [循环容器], 值)
.计次循环尾 ()

.计次循环首 (临时数, 循环容器)
    EMS增加资源符号 (相加 (“导引表_”, 到文本 (循环容器)))
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段单字 (0)
    赋值 (临时参数, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目))
    EMS增加段单字 (临时参数)
    .计次循环首 (临时参数, 循环次数)
        EMS增加资源子导引表 (相加 (“编号_”, 到文本 (循环次数)), EMS_资源引导表集 [循环容器], 项目 [循环次数], 值)
    .计次循环尾 ()
.计次循环尾 ()

.计次循环首 (临时数, 循环容器)
    赋值 (临时参数, 取数组成员数 (EMS_资源引导表集))
    .计次循环首 (临时参数, 循环次数)
        EMS增加资源符号 (相加 (“编号_”, 到文本 (循环次数)))
        EMS增加段双字 (0)
        EMS增加段双字 (0)
        EMS增加段双字 (0)
        EMS增加段单字 (0)
        赋值 (临时变量, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源))
        EMS增加段单字 (临时变量)
        .计次循环首 (临时变量, 循环记次)
            EMS增加资源子 (相加 (“编号_”, 到文本 (循环次数), “_资源_”, 到文本 (循环记次)))
        .计次循环尾 ()
    .计次循环尾 ()
.计次循环尾 ()

.计次循环首 (临时数, 循环容器)
    赋值 (临时参数, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目))
    .计次循环首 (临时参数, 循环次数)
        赋值 (临时变量, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源))
        .计次循环首 (临时变量, 循环记次)
            .如果真 (等于 (取文本中间 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 文件名, 1, 1), “\”))
                赋值 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 文件名, 相加 (取文本左边 (EMS_资源文件, 相减 (倒找文本 (EMS_资源文件, “\”, , 假), 1)), EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 文件名))
            .如果真结束
            .如果真 (等于 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 文件名, “”))
                EMS错误信息 (相加 (“文件:”, EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 文件名, “不存在”))
                返回 ()
            .如果真结束
            EMS增加资源符号 (相加 (“编号_”, 到文本 (循环次数), “_资源_”, 到文本 (循环记次)))
            EMS选择资源 (循环容器, 循环次数, 循环记次)
        .计次循环尾 ()
    .计次循环尾 ()
.计次循环尾 ()

.计次循环首 (临时数, 循环容器)
    赋值 (临时参数, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目))
    .计次循环首 (临时参数, 循环次数)
        赋值 (临时变量, 取数组成员数 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源))
        .计次循环首 (临时变量, 循环记次)
            .如果真 (EMS符号是否存在 (EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 符号名))
                EMS错误信息 (相加 (“资源:”, EMS_资源引导表集 [循环容器], 项目 [循环次数], 资源 [循环记次], 符号名, “已经存..”))
                返回 ()
            .如果真结束
            EMS写资源 (循环容器, 循环次数, 循环记次)
        .计次循环尾 ()
    .计次循环尾 ()
.计次循环尾 ()

.子程序 EMS选择资源, 空白型, , ChooseResource
.参数 列表号, 短整数型, , 
.参数 资源项, 短整数型, , 
.参数 资源编号, 短整数型, , 

.局部变量 临时数, 整数型, , , 
.局部变量 临时大小, 整数型, , , 

赋值 (临时数, EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 值)
.判断开始 (等于 (临时数, 2))
    EMS增加编码 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 符号名, EMS偏移 (“.资源”), #EMS_连接_资源, )
    EMS增加段双字 (0)
    EMS增加段双字 (相减 (取文件尺寸 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名), 14))
    EMS增加段双字 (0)
    EMS增加段双字 (0)
.判断 (等于 (临时数, 3))
    信息框 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名, 0, )
    赋值 (临时大小, EMS文件字 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名, 14))
    EMS增加编码 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 符号名, EMS偏移 (“.资源”), #EMS_连接_资源, )
    EMS增加资源双字 (0)
    EMS增加资源双字 (临时大小)
    EMS增加资源双字 (0)
    EMS增加资源双字 (0)
.默认
    
.判断结束


.子程序 EMS写资源, 空白型, , WriteResource*
.参数 列表号, 短整数型, , 
.参数 资源项, 短整数型, , 
.参数 资源编号, 短整数型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 临时位置, 整数型, , , 
.局部变量 临时大小, 整数型, , , 

赋值 (临时数, EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 值)

.判断开始 (等于 (临时数, 2))
    EMS增加符号 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 符号名, EMS偏移 (“.资源”), #EMS_连接_资源, #EMS_符号_资源, )
    赋值 (临时字节集, 读入文件 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名))
    .变量循环首 (15, 取字节集长度 (临时字节集), 1, 循环容器)
        EMS增加段字节 (临时字节集 [循环容器])
    .变量循环尾 ()
.判断 (等于 (临时数, 3))
    赋值 (临时位置, EMS文件字 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名, 18))
    赋值 (临时大小, EMS文件字 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名, 14))
    EMS增加符号 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 符号名, EMS偏移 (“.资源”), #EMS_连接_资源, #EMS_符号_资源, )
    
    赋值 (临时字节集, 读入文件 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名))
    赋值 (临时数, 0)
    .变量循环首 (临时位置, 相减 (相加 (临时位置, 临时大小), 1), 1, 循环容器)
        EMS增加段字节 (临时字节集 [相加 (15, 临时数)])
        赋值 (临时数, 相加 (临时数, 1))
    .变量循环尾 ()
.判断 (等于 (临时数, 14))
    EMS增加编码 (相加 (“$”, 到文本 (资源项), “_头_”, 到文本 (资源编号)), EMS偏移 (“.资源”), #EMS_连接_资源, )
    EMS增加资源双字 (相加 (6, 相乘 (1, 14)))
    EMS增加资源双字 (0)
    EMS增加资源双字 (0)
    EMS增加符号 (相加 (“$”, 到文本 (资源项), “_头_”, 到文本 (资源编号)), EMS偏移 (“.资源”), #EMS_连接_资源, #EMS_符号_资源, )
    EMS增加资源单字 (0)
    EMS增加资源单字 (1)
    EMS增加资源单字 (EMS双字低字节 (1))
    
    赋值 (临时字节集, 读入文件 (EMS_资源引导表集 [列表号], 项目 [资源项], 资源 [资源编号], 文件名))
    .变量循环首 (1, 相加 (16, 22), 1, 循环容器)
        EMS增加段字节 (临时字节集 [循环容器])
    .变量循环尾 ()
.默认
    
.判断结束
赋值 (临时字节集, {  })

.子程序 EMS文件字, 整数型, , DWordFromFile
.参数 临时文件名, 文本型, , 
.参数 临时长度, 整数型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时文件号, 整数型, , , 

赋值 (临时数, 0)
赋值 (临时文件号, 打开文件 (临时文件名, #读入, ))
移动读写位置 (临时文件号, , 相加 (临时长度, 1))
读入数据 (临时文件号, 临时数)
关闭文件 (临时文件号)
返回 (临时数)

.程序集 EMS导入管理程序集, , , comImports(行数:284,方法:10)

.子程序 EMS初始化导入, 空白型, , InitImports
重定义数组 (EMS_导入集, 假, 0)

.子程序 EMS导入是否使用, 逻辑型, , IsImportUsed
.参数 别号, 整数型, , 

返回 (EMS_导入集 [别号], 状态)

.子程序 EMS导入是否存在, 逻辑型, , ImportExists
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_导入集), 循环容器)
    .如果真 (等于 (EMS_导入集 [循环容器], 名称, 临时名))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS增加导入, 空白型, , AddImport
.参数 临时名, 文本型, , 
.参数 临时库, 文本型, , 
.参数 临时数量, 整数型, , 
.参数 临时别名, 文本型, , 
.参数 临时状态, 逻辑型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (临时状态))
    赋值 (临时状态, 假)
.如果真结束
.如果真 (EMS导入是否存在 (临时名))
    返回 ()
.如果真结束
赋值 (临时数, 相加 (取数组成员数 (EMS_导入集), 1))
重定义数组 (EMS_导入集, 真, 临时数)
赋值 (EMS_导入集 [临时数], 名称, 临时名)
赋值 (EMS_导入集 [临时数], 参数数量, 临时数量)
赋值 (EMS_导入集 [临时数], 连接库, 临时库)
赋值 (EMS_导入集 [临时数], 别名, 临时别名)
赋值 (EMS_导入集 [临时数], 状态, 临时状态)

.子程序 EMS设置导入状态, 空白型, , SetImportUsed
.参数 临时名, 文本型, , 
.参数 临时偏移, 整数型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_导入集), 循环容器)
    .如果真 (等于 (EMS_导入集 [循环容器], 别名, 临时名))
        赋值 (EMS_导入集 [循环容器], 状态, 真)
        EMS增加重置 (临时偏移)
        返回 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS导入参数数量, 整数型, , ImportPCountByName
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_导入集), 循环容器)
    .如果真 (等于 (EMS_导入集 [循环容器], 别名, 临时名))
        返回 (EMS_导入集 [循环容器], 参数数量)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 EMS是否导入, 逻辑型, , IsImport
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_导入集), 循环容器)
    .如果真 (等于 (EMS_导入集 [循环容器], 别名, 临时标识))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS通用导入表, 空白型, , GenerateImportTable
.参数 临时符号, 逻辑型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时重复, 逻辑型, , , 
.局部变量 临时库, 文本型, , "0", 
.局部变量 临时数, 整数型, , , 
.局部变量 临时变量, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 

赋值 (EMS_当前段, “.导入数据”)
重定义数组 (临时库, 假, 0)
赋值 (临时数, 取数组成员数 (EMS_导入集))

.如果真 (等于 (临时数, 0))
    返回 ()
.如果真结束

赋值 (循环容器, 1)
.判断循环首 (小于或等于 (循环容器, 临时数))
    .判断循环首 (取反 (EMS导入是否使用 (循环容器)))
        赋值 (循环容器, 相加 (循环容器, 1))
        .如果真 (大于 (循环容器, 临时数))
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (大于 (循环容器, 临时数))
        跳出循环 ()
    .如果真结束
    
    .计次循环首 (取数组成员数 (临时库), 循环次数)
        .如果真 (等于 (到大写 (临时库 [循环次数]), 到大写 (EMS_导入集 [循环容器], 连接库)))
            赋值 (临时重复, 真)
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (等于 (临时重复, 假))
        赋值 (临时变量, 相加 (取数组成员数 (临时库), 1))
        重定义数组 (临时库, 真, 临时变量)
        赋值 (临时库 [临时变量], 到大写 (EMS_导入集 [循环容器], 连接库))
    .如果真结束
    
    赋值 (临时重复, 假)
    
    赋值 (循环容器, 相加 (循环容器, 1))
.判断循环尾 ()

赋值 (临时变量, 取数组成员数 (临时库))
.计次循环首 (临时变量, 循环容器)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加编码 (相加 (临时库 [循环容器], “_名称”), EMS偏移 (“.导入数据”), #EMS_连接_导入, )
    EMS增加段双字 (0)
    EMS增加编码 (相加 (临时库 [循环容器], “_表”), EMS偏移 (“.导入数据”), #EMS_连接_导入, )
    EMS增加段双字 (0)
.计次循环尾 ()

.如果真 (大于 (临时变量, 0))
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
    EMS增加段双字 (0)
.如果真结束

.计次循环首 (临时变量, 循环容器)
    EMS增加符号 (相加 (临时库 [循环容器], “_表”), EMS偏移 (“.导入数据”), #EMS_连接_导入, , )
    .计次循环首 (临时数, 循环次数)
        .如果真 (等于 (到大写 (EMS_导入集 [循环次数], 连接库), 到大写 (临时库 [循环容器])))
            .如果真 (EMS_导入集 [循环次数], 状态)
                EMS增加符号 (EMS_导入集 [循环次数], 别名, EMS偏移 (“.导入数据”), #EMS_连接_导入, #EMS_符号_导入, )
                EMS增加编码 (相加 (EMS_导入集 [循环次数], 名称, “_入口”), EMS偏移 (“.导入数据”), #EMS_连接_导入, )
                EMS增加段双字 (0)
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    EMS增加段双字 (0)
.计次循环尾 ()

.计次循环首 (临时变量, 循环容器)
    EMS增加符号 (相加 (临时库 [循环容器], “_名称”), EMS偏移 (“.导入数据”), #EMS_连接_导入, , )
    赋值 (临时字节集, 到字节集 (临时库 [循环容器]))
    .计次循环首 (取字节集长度 (临时字节集), 循环次数)
        EMS增加段字节 (临时字节集 [循环次数])
    .计次循环尾 ()
    EMS增加段字节 (0)
.计次循环尾 ()

.计次循环首 (临时数, 循环容器)
    .如果真 (EMS_导入集 [循环容器], 状态)
        EMS增加符号 (相加 (EMS_导入集 [循环容器], 名称, “_入口”), EMS偏移 (“.导入数据”), #EMS_连接_导入, , )
        EMS增加段单字 (0)
        赋值 (临时字节集, 到字节集 (EMS_导入集 [循环容器], 名称))
        .计次循环首 (取字节集长度 (临时字节集), 循环次数)
            EMS增加段字节 (临时字节集 [循环次数])
        .计次循环尾 ()
        EMS增加段字节 (0)
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS导入库, 空白型, , ImportLibrary(注意)(问题)
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时文件号, 整数型, , , 
.局部变量 项目数量, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时文件名, 文本型, , , 
.局部变量 是否存在, 逻辑型, , , 

EMS跳过空格 ()
赋值 (临时标识, EMS字符串表达式 ())
赋值 (临时文件名, 相加 (EMS_程序运行路径, “\include\”, 临时标识))
赋值 (是否存在, 文件是否存在 (临时文件名))
.如果真 (等于 (是否存在, 假))
    EMS错误信息 (相加 (临时标识, “文件不存在，请检查include文件夹..”))
    返回 ()
.如果真结束

赋值 (临时文件号, 打开文件 (临时文件名, #读入, ))
赋值 (临时数, 取数组成员数 (EMS_导入集))
读入数据 (临时文件号, 项目数量)
重定义数组 (EMS_导入集, 真, 相加 (临时数, 项目数量))

.计次循环首 (项目数量, 循环容器)
    读入数据 (临时文件号, EMS_导入集 [相加 (临时数, 循环容器)].名称, EMS_导入集 [相加 (临时数, 循环容器)].别名, EMS_导入集 [相加 (临时数, 循环容器)].连接库, EMS_导入集 [相加 (临时数, 循环容器)].参数数量)
    赋值 (EMS_导入集 [相加 (临时数, 循环容器)].状态, 假)
.计次循环尾 ()

赋值 (临时数, 取数组成员数 (EMS_类型集))
读入数据 (临时文件号, 项目数量)
重定义数组 (EMS_类型集, 真, 相加 (临时数, 项目数量))
.计次循环首 (项目数量, 循环容器)
    读入数据 (临时文件号, EMS_类型集 [相加 (临时数, 循环容器)].名称, EMS_类型集 [相加 (临时数, 循环容器)].资源)
.计次循环尾 ()

赋值 (临时数, 取数组成员数 (EMS_常量集))
读入数据 (临时文件号, 项目数量)
重定义数组 (EMS_常量集, 真, 相加 (临时数, 项目数量))
.计次循环首 (项目数量, 循环容器)
    读入数据 (临时文件号, EMS_常量集 [相加 (临时数, 循环容器)].名称, EMS_常量集 [相加 (临时数, 循环容器)].值)
.计次循环尾 ()
关闭文件 (临时文件号)

.如果真 (EMS是否符号 (“,”))
    EMS符号 (“,”)
    EMS导入库 ()
    返回 ()
.如果真结束
EMS终止 ()
EMS代码块 ()

.子程序 EMS导出库, 空白型, 公开, ExportLibrary(修改)
.参数 临时文件名, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时文件编号, 整数型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时文件名, 删首尾空 (临时文件名))
.如果真 (等于 (临时文件名, “”))
    EMS错误信息 (“文件不存在不能编译”)
    返回 ()
.如果真结束

EMS提示信息 (“开始编译....”)

赋值 (临时文件名, 取文本左边 (临时文件名, 相减 (取文本长度 (临时文件名), 4)))
赋值 (临时文件名, 相加 (临时文件名, “.lib”))
.如果真 (文件是否存在 (临时文件名))
    删除文件 (临时文件名)
.如果真结束

赋值 (临时文件编号, 打开文件 (临时文件名, #重写, #禁止读))

赋值 (临时数, 取数组成员数 (EMS_导入集))

写出数据 (临时文件编号, 临时数)

.计次循环首 (临时数, 循环容器)
    写出数据 (临时文件编号, EMS_导入集 [循环容器], 名称, EMS_导入集 [循环容器], 别名, EMS_导入集 [循环容器], 连接库, EMS_导入集 [循环容器], 参数数量)
.计次循环尾 ()

赋值 (临时数, 取数组成员数 (EMS_类型集))
写出数据 (临时文件编号, 临时数)
.计次循环首 (临时数, 循环容器)
    写出数据 (临时文件编号, EMS_类型集 [循环容器], 名称, EMS_类型集 [循环容器], 资源)
.计次循环尾 ()

赋值 (临时数, 取数组成员数 (EMS_常量集))
写出数据 (临时文件编号, 临时数)
.计次循环首 (临时数, 循环容器)
    写出数据 (临时文件编号, EMS_常量集 [循环容器], 名称, EMS_常量集 [循环容器], 值)
.计次循环尾 ()

关闭文件 (临时文件编号)
EMS提示信息 (相加 (“库文件编译完成...->”, 临时文件名))
 ' '运行按忸禁止
EMS设置提示 (EMS_信息)

.程序集 EMS导出管理程序集, , , comExports(行数:131,方法:6)

.子程序 EMS初始化导出, 空白型, , InitExports
赋值 (EMS_是否DLL, 假)
重定义数组 (EMS_导出集, 假, 0)
重定义数组 (EMS_重置, 假, 0)

.子程序 EMS增加导出, 空白型, , AddExport
.参数 临时名字, 文本型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_导出集), 1))
重定义数组 (EMS_导出集, 真, 临时数)
赋值 (EMS_导出集 [临时数], 名称, 临时名字)

.子程序 EMS增加重置, 空白型, , AddRelocation
.参数 临时偏移, 整数型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_重置), 1))
重定义数组 (EMS_重置, 真, 临时数)
赋值 (EMS_重置 [临时数], 偏移, 临时偏移)

.子程序 EMS写入重置, 空白型, , WriteRelocations
.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (EMS_当前段, “.定位”)

EMS增加段双字 (EMS虚拟地址偏移 (#EMS_连接_代码))
EMS增加编码 (“最后_定位”, EMS偏移 (“.定位”), #EMS_连接_重置, 相乘 (EMS虚拟地址偏移 (#EMS_连接_重置), -1))
EMS增加段双字 (0)

赋值 (临时数, 取数组成员数 (EMS_重置))
.计次循环首 (临时数, 循环容器)
    .如果真 (不等于 (EMS_重置 [循环容器], 偏移, 0))
        EMS增加段单字 (到短整数 (相加 (EMS_重置 [循环容器], 偏移, 12288)))
    .如果真结束
    
.计次循环尾 ()

EMS增加符号 (“最后_定位”, EMS偏移 (“.定位”), #EMS_连接_重置, , )

.子程序 EMS导出排序, 空白型, , SortExports
.局部变量 循环容器, 整数型, , , 
.局部变量 临时元素, 文本型, , "0", 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_导出集))
重定义数组 (临时元素, 假, 临时数)

.计次循环首 (临时数, 循环容器)
    赋值 (临时元素 [循环容器], EMS_导出集 [循环容器], 名称)
.计次循环尾 ()

EMS排序字符串数组 (临时元素)

.计次循环首 (临时数, 循环容器)
    赋值 (EMS_导出集 [循环容器], 名称, 临时元素 [循环容器])
    赋值 (EMS_导出集 [循环容器], 序号, 循环容器)
.计次循环尾 ()

.子程序 EMS通用导出表, 空白型, , GenerateExportTable
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时参数, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_导出集))
.如果真 (等于 (临时数, 0))
    返回 ()
.如果真结束
赋值 (EMS_当前段, “.导出”)

EMS导出排序 ()

EMS增加段双字 (0)
EMS增加段双字 (0)
EMS增加段双字 (0)
EMS增加编码 (“DLL_名称”, EMS偏移 (“.导出数据”), #EMS_连接_导出)
EMS增加段双字 (0)
EMS增加段双字 (1)

EMS增加段双字 (临时数)
EMS增加段双字 (临时数)
EMS增加编码 (“地址_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出)
EMS增加段双字 (0)
EMS增加编码 (“名称_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出)
EMS增加段双字 (0)
EMS增加编码 (“序数_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出)
EMS增加段双字 (0)

EMS增加符号 (“地址_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出, #EMS_符号_导出, )
.计次循环首 (临时数, 循环容器)
    EMS增加编码 (相加 (EMS_导出集 [循环容器], 名称, “.地址”), EMS偏移 (“.导出数据”), #EMS_连接_导出)
    EMS增加段双字 (0)
.计次循环尾 ()

EMS增加符号 (“名称_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出, #EMS_符号_导出, )
.计次循环首 (临时数, 循环容器)
    EMS增加编码 (相加 (“_”, EMS_导出集 [循环容器], 名称), EMS偏移 (“.导出数据”), #EMS_连接_导出)
    EMS增加段双字 (0)
.计次循环尾 ()

EMS增加符号 (“序数_表”, EMS偏移 (“.导出数据”), #EMS_连接_导出, #EMS_符号_导出, )
.计次循环首 (临时数, 循环容器)
    EMS增加段单字 (相减 (EMS_导出集 [循环容器], 序号, 1))
.计次循环尾 ()

EMS增加符号 (“DLL_名称”, EMS偏移 (“.导出数据”), #EMS_连接_导出, #EMS_符号_导出, )
赋值 (临时字节集, 到字节集 (EMS_DLL名))
赋值 (临时参数, 取字节集长度 (临时字节集))
.计次循环首 (临时参数, 循环容器)
    EMS增加段字节 (临时字节集 [循环容器])
.计次循环尾 ()
EMS增加段字节 (0)

.计次循环首 (临时数, 循环容器)
    EMS增加符号 (相加 (“_”, EMS_导出集 [循环容器], 名称), EMS偏移 (“.导出数据”), #EMS_连接_导出, #EMS_符号_导出, )
    赋值 (临时字节集, 到字节集 (EMS_导出集 [循环容器], 名称))
    赋值 (临时参数, 取字节集长度 (临时字节集))
    .计次循环首 (临时参数, 循环次数)
        EMS增加段字节 (临时字节集 [循环次数])
    .计次循环尾 ()
    EMS增加段字节 (0)
.计次循环尾 ()

.程序集 EMS编码管理程序集, , , comFixups(行数:150,方法:10)

.子程序 EMS初始化编码, 空白型, , InitFixups
重定义数组 (EMS_编码集, 假, 0)

.子程序 EMS增加代码编码, 空白型, , AddCodeFixup
.参数 临时名, 文本型, , 

EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加代码双字 (0)

.子程序 EMS删除编码, 空白型, , DeleteFixup
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_编码集), 循环容器)
    .如果真 (等于 (EMS_编码集 [循环容器], 名称, 临时名))
        赋值 (EMS_编码集 [循环容器], 删除, 真)
        返回 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS增加编码, 空白型, , AddFixup
.参数 临时名, 文本型, , 
.参数 临时偏移, 整数型, , 
.参数 临时段, 字节型, , 
.参数 扩展地址, 整数型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (扩展地址))
    赋值 (扩展地址, 0)
.如果真结束
赋值 (临时数, 相加 (取数组成员数 (EMS_编码集), 1))
重定义数组 (EMS_编码集, 真, 临时数)

赋值 (EMS_编码集 [临时数], 名称, 临时名)
赋值 (EMS_编码集 [临时数], 偏移, 临时偏移)
赋值 (EMS_编码集 [临时数], 段类型, 临时段)
赋值 (EMS_编码集 [临时数], 扩展地址, 扩展地址)

.子程序 EMS连接编码, 空白型, , LinkerFix*
.参数 临时偏移, 整数型, , 
.参数 临时值, 整数型, , 

赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 1)], EMS单字低字节 (EMS双字低字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 2)], EMS单字高字节 (EMS双字低字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 3)], EMS单字低字节 (EMS双字高字节 (临时值)))
赋值 (EMS_段集 [1].字节 [相加 (临时偏移, 4)], EMS单字高字节 (EMS双字高字节 (临时值)))

.子程序 EMS物理地址偏移, 整数型, , PhysicalAddressOf
.参数 临时段类型, 字节型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, EMS_头大小)
.变量循环首 (2, 取数组成员数 (EMS_段集), 1, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 段类型, 临时段类型))
        返回 (临时数)
    .如果真结束
    赋值 (临时数, 相加 (临时数, EMS物理大小 (EMS_段集 [循环容器], 字节, 1)))
.变量循环尾 ()
返回 (临时数)

.子程序 EMS虚拟地址偏移, 整数型, , VirtualAddressOf
.参数 临时段类型, 字节型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, 4096)
.变量循环首 (2, 取数组成员数 (EMS_段集), 1, 循环容器)
    .如果真 (等于 (EMS_段集 [循环容器], 段类型, 临时段类型))
        返回 (临时数)
    .如果真结束
    赋值 (临时数, 相加 (临时数, EMS虚拟大小 (EMS_段集 [循环容器], 字节, 1)))
.变量循环尾 ()
返回 (临时数)

.子程序 EMS编码数据, 空白型, , DoFixups**
.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时查找, 逻辑型, , , 

.计次循环首 (取数组成员数 (EMS_编码集), 循环容器)
    .如果真 (EMS_编码集 [循环容器], 删除)
        到循环尾 ()
    .如果真结束
    
    .计次循环首 (取数组成员数 (EMS_符号集), 循环次数)
        .如果真 (EMS_符号集 [循环次数], 是否保护模式)
            到循环尾 ()
        .如果真结束
        .如果真 (等于 (EMS_编码集 [循环容器], 名称, EMS_符号集 [循环次数], 名字))
            .如果 (或者 (等于 (EMS_符号集 [循环次数], 符号类型, #EMS_符号_标签), 等于 (EMS_符号集 [循环次数], 符号类型, #EMS_符号_局部双字), 等于 (EMS_符号集 [循环次数], 符号类型, #EMS_符号_局部小数), 等于 (EMS_符号集 [循环次数], 符号类型, #EMS_符号_局部字符串), 等于 (EMS_符号集 [循环次数], 符号类型, #EMS_符号_框架)))
                EMS连接编码 (相加 (EMS物理地址偏移 (EMS_编码集 [循环容器], 段类型), EMS_编码集 [循环容器], 偏移), 相加 (相减 (EMS_符号集 [循环次数], 偏移值, EMS_编码集 [循环容器], 偏移, 4), EMS_编码集 [循环容器], 扩展地址))
            .否则
                EMS连接编码 (相加 (EMS物理地址偏移 (EMS_编码集 [循环容器], 段类型), EMS_编码集 [循环容器], 偏移), 相加 (EMS虚拟地址偏移 (EMS_符号集 [循环次数], 段类型), EMS_符号集 [循环次数], 偏移值, EMS_编码集 [循环容器], 扩展地址))
            .如果结束
            赋值 (临时查找, 真)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (等于 (临时查找, 假))
        .判断开始 (大于 (寻找文本 (EMS_编码集 [循环容器], 名称, “.堆句柄”, 1, 假), 0))
            EMS错误信息 (相加 (“'”, 取文本左边 (EMS_编码集 [循环容器], 名称, 相减 (寻找文本 (EMS_编码集 [循环容器], 名称, “.堆句柄”, 1, 假), 1)), “' 不是数组”))
        .判断 (大于 (寻找文本 (EMS_编码集 [循环容器], 名称, “.指针到数组”, 1, 假), 0))
            EMS错误信息 (相加 (“'”, 取文本左边 (EMS_编码集 [循环容器], 名称, 相减 (寻找文本 (EMS_编码集 [循环容器], 名称, “.堆句柄”, 1, 假), 1)), “' 不是数组”))
        .判断 (大于 (寻找文本 (EMS_编码集 [循环容器], 名称, “地址到字符串”, 1, 假), 0))
            EMS错误信息 (“不能比较字符串”)
            返回 ()
        .默认
            EMS错误信息 (相加 (“符号'”, EMS_编码集 [循环容器], 名称, “'不存在”))
            返回 ()
        .判断结束
        
    .如果真结束
    赋值 (临时查找, 假)
    .如果真 (取反 (EMS_命令行编译))
         ' 显示编译进度信息:取整 (循环容器 ÷ 取数组成员数 (EMS_固定集) × 100)
    .如果真结束
    
.计次循环尾 ()


.子程序 EMS物理大小, 整数型, , PhysicalSizeOf
.参数 临时值, 字节型, 数组, 
.参数 扩展方法, 整数型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时参数, 整数型, , , 

赋值 (临时数, 取数组成员数 (临时值))
.如果真 (等于 (临时数, 0))
    返回 (0)
.如果真结束
.变量循环首 (0, 相减 (相加 (临时数, 512), 扩展方法), 512, 循环容器)
    赋值 (临时参数, 循环容器)
.变量循环尾 ()
返回 (临时参数)

.子程序 EMS虚拟大小, 整数型, , VirtualSizeOf
.参数 临时值, 字节型, 数组, 
.参数 扩展方法, 整数型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (扩展方法))
    赋值 (扩展方法, 0)
.如果真结束
赋值 (临时数, 取数组成员数 (临时值))
.如果真 (等于 (临时数, 0))
    返回 (临时数)
.如果真结束
.变量循环首 (4096, 268431360, 4096, 循环容器)
    .如果真 (大于 (循环容器, 相减 (临时数, 扩展方法)))
        返回 (循环容器)
    .如果真结束
    
.变量循环尾 ()
返回 (0)

.程序集 EMS框架管理程序集, , , comFrames(行数：283，方法:14)

.子程序 EMS初始化框架, 空白型, , InitFrames
赋值 (EMS_唯一ID_fc, 0)
重定义数组 (EMS_框架集, 假, 0)

.子程序 EMS增加框架申请, 空白型, , AddFrameDeclare
.参数 临时名, 文本型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_框架集))
赋值 (EMS_框架集 [临时数], 申请, 相加 (EMS_框架集 [临时数], 申请, 临时名, “,”))

.子程序 EMS增加框架, 空白型, , AddFrame
.参数 临时名, 文本型, , 
.参数 临时属性, 逻辑型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (临时属性))
    赋值 (临时属性, 假)
.如果真结束

赋值 (临时数, 相加 (取数组成员数 (EMS_框架集), 1))
重定义数组 (EMS_框架集, 真, 临时数)
赋值 (EMS_框架集 [临时数], 名称, 临时名)
赋值 (EMS_框架集 [临时数], 属性, 临时属性)
赋值 (EMS_当前框架, 临时名)

.子程序 EMS是否局部变量, 逻辑型, , IsLocalVariable
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 相加 (EMS_当前框架, “.”, 临时标识)))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS获取框架编号, 整数型, , GetFrameIDByName
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_框架集), 循环容器)
    .如果真 (等于 (EMS_框架集 [循环容器], 名称, 临时名))
        返回 (循环容器)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 EMS获取返回类型, 文本型, , GetReturnType
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_框架集), 循环容器)
    .如果真 (等于 (EMS_框架集 [循环容器], 名称, 临时名))
        返回 (EMS_框架集 [循环容器], 返回)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)

.子程序 EMS回调框架, 空白型, , CallFrame
.参数 临时标识, 文本型, , 
.参数 临时表达式, 逻辑型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时编号, 整数型, , , 
.局部变量 临时标签, 整数型, , , 
.局部变量 临时框架, 文本型, , "0", 
.局部变量 临时类型, 字节型, , , 

.如果真 (是否为空 (临时表达式))
    赋值 (临时表达式, 假)
.如果真结束

赋值 (EMS_是否回调框架, 真)
赋值 (临时编号, EMS获取框架编号 (临时标识))

赋值 (临时框架, 分割文本 (EMS_框架集 [临时编号], 申请, “,”, ))
EMS倒置参数 ()

EMS符号 (“(”)
.变量循环首 (取数组成员数 (临时框架), 1, -1, 循环容器)
    赋值 (临时类型, EMS获取符号类型 (相加 (EMS_框架集 [临时编号], 名称, “.”, 临时框架 [循环容器])))
    .判断开始 (或者 (等于 (临时类型, #EMS_符号_局部双字), 等于 (临时类型, #EMS_符号_局部小数)))
        EMS表达式 ()
    .判断 (等于 (临时类型, #EMS_符号_局部字符串))
        EMS表达式 ()
    .默认
        EMS表达式 (相加 (EMS_框架集 [临时编号], 名称, “.”, 临时框架 [循环容器]))
        EMS_PushContent (相加 (EMS_框架集 [临时编号], 名称, “.”, 临时框架 [循环容器]))
    .判断结束
    .如果真 (EMS是否符号 (“,”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真结束
    
.变量循环尾 ()
EMS符号 (“)”)
赋值 (EMS_是否回调框架, 假)
.如果真 (取反 (临时表达式))
    EMS终止 ()
.如果真结束
EMS_ExprCall (临时标识)
.如果真 (取反 (临时表达式))
    EMS代码块 ()
.如果真结束


.子程序 EMS回调属性, 空白型, , CallProperty
.参数 临时标识, 文本型, , 
.参数 临时表达式, 逻辑型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时编号, 整数型, , , 
.局部变量 临时标签, 整数型, , , 
.局部变量 临时框架, 文本型, , "0", 
.局部变量 临时类型, 字节型, , , 

.如果真 (是否为空 (临时表达式))
    赋值 (临时表达式, 假)
.如果真结束

赋值 (EMS_是否回调框架, 真)
EMS跳过空格 ()

.如果真 (取反 (临时表达式))
    EMS符号 (“=”)
    EMS表达式 (“$插入.属性”)
    EMS_PushContent (“$插入.属性”)
    EMS终止 ()
.如果真结束
赋值 (EMS_是否回调框架, 假)

.如果真 (不等于 (EMS_当前框架, 临时标识))
    EMS_ExprCall (临时标识)
.如果真结束
.如果真 (取反 (临时表达式))
    EMS代码块 ()
.如果真结束


.子程序 EMS是否框架, 逻辑型, , IsFrame
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_框架集), 循环容器)
    .如果真 (等于 (EMS_框架集 [循环容器], 名称, 临时名))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS是否属性, 逻辑型, , IsProperty
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_框架集), 循环容器)
    .如果真 (等于 (EMS_框架集 [循环容器], 名称, 临时名))
        .如果真 (EMS_框架集 [循环容器], 属性)
            返回 (真)
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS语句返回, 空白型, , StatementReturn
EMS符号 (“(”)
EMS表达式 (“$插入.返回”)
EMS_PushContent (“$插入.返回”)
EMS_ExprJump (相加 (EMS_当前框架, “.结束”))
EMS符号 (“)”)
EMS终止 ()
EMS代码块 ()

.子程序 EMS申请框架, 空白型, , DeclareFrame
.参数 临时输出, 逻辑型, 可空, 
.参数 临时代码块, 逻辑型, 可空, 
.参数 临时保护, 逻辑型, 可空, 
.参数 临时属性, 逻辑型, 可空, 

.局部变量 临时数量, 整数型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时别名, 文本型, , , 
.局部变量 临时名, 文本型, , , 
.局部变量 临时方法, 文本型, , , 
.局部变量 临时标识2, 文本型, , , 
.局部变量 临时返回, 文本型, , , 

.如果真 (是否为空 (临时输出))
    赋值 (临时输出, 假)
.如果真结束
.如果真 (是否为空 (临时输出))
    赋值 (临时代码块, 假)
.如果真结束
.如果真 (是否为空 (临时输出))
    赋值 (临时保护, 假)
.如果真结束
.如果真 (是否为空 (临时输出))
    赋值 (临时属性, 假)
.如果真结束

赋值 (EMS_参数数量, 0)

.如果真 (临时属性)
    赋值 (临时方法, EMS标识符 ())
    .如果 (并且 (不等于 (临时方法, “设置”), 不等于 (临时方法, “获取”)))
        EMS错误信息 (“属性方法应为:设置或获取”)
    .否则
        赋值 (临时方法, 相加 (“.”, 临时方法))
    .如果结束
    
.如果真结束

赋值 (临时标识, EMS标识符 ())
EMS增加框架 (相加 (临时标识, 临时方法), 临时属性)

EMS符号 (“(”)
赋值 (临时标识2, EMS标识符 ())
.如果真 (不等于 (临时标识2, “”))
    EMS变量块 (临时标识2, 真, )
    赋值 (EMS_参数数量, 相加 (EMS_参数数量, 1))
.如果真结束

.判断循环首 (EMS是否符号 (“,”))
    EMS符号 (“,”)
    
    赋值 (临时标识2, EMS标识符 ())
    .如果真 (不等于 (临时标识2, “”))
        EMS变量块 (临时标识2, 真, )
        赋值 (EMS_参数数量, 相加 (EMS_参数数量, 1))
    .如果真结束
    
.判断循环尾 ()

.如果 (EMS是否符号 (“)”))
    EMS符号 (“)”)
    赋值 (临时返回, EMS标识符 ())
    .如果真 (不等于 (临时返回, “”))
        .如果 (或者 (等于 (临时返回, “整数”), 等于 (临时返回, “小数”), 等于 (临时返回, “文本”)))
            赋值 (EMS_框架集 [取数组成员数 (EMS_框架集)].返回, 临时返回)
        .否则
            EMS错误信息 (相加 (“'”, 临时返回, “'返回类型是不被允许的类型”, “:”, EMS_当前框架))
            返回 ()
        .如果结束
        EMS跳过空格 ()
    .如果真结束
    EMS终止 ()
.否则
    EMS错误信息 (相加 (“出错:”, 取文本中间 (EMS_源, EMS_位置, 1)))
    返回 ()
.如果结束


.如果 (临时保护)
    EMS增加符号 (相加 (临时标识, 临时方法), EMS偏移 (“.代码”), 0, #EMS_符号_框架, 真)
    EMS增加符号 (相加 (临时标识, 临时方法, “.地址”), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_双字, 真)
.否则
    EMS增加符号 (相加 (临时标识, 临时方法), EMS偏移 (“.代码”), 0, #EMS_符号_框架, )
    EMS增加符号 (相加 (临时标识, 临时方法, “.地址”), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_双字, )
.如果结束

.如果真 (取反 (临时保护))
    .如果真 (临时输出)
        EMS增加导出 (相加 (临时标识, 临时方法))
    .如果真结束
    
.如果真结束
.如果真 (取反 (临时保护))
    EMS_StartFrame ()
    EMS代码块 ()
    EMS增加符号 (相加 (临时标识, 临时方法, “.结束”), EMS偏移 (“.代码”), 0, #EMS_符号_框架, )
    EMS过程结束 ()
    EMS_EndFrame (相乘 (EMS_参数数量, 4))
    .如果真 (取反 (临时代码块))
        EMS代码块 ()
    .如果真结束
    
.如果真结束


.子程序 EMS过程结束, 空白型, , EndProc(修改)
.如果真 (EMS是否标识 (“结束”))
    EMS跳过标识 ()
    EMS终止 ()
    赋值 (EMS_当前框架, “”)
    .如果真 (取反 (EMS_命令行编译))
         ' 编译进度信息  取整 (EMS_位置 ÷ 取文本长度 (EMS_源) × 100)  位置:EMS_位置
        
    .如果真结束
    返回 ()
.如果真结束
EMS错误信息 (相加 (“无法到达文件尾部，'”, EMS_当前框架, “'”))
返回 ()

.子程序 EMS排列, 空白型, , Align4(暂时无用)
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, EMS偏移 (临时名))
.如果真 (等于 (临时数, 相乘 (取整 (相除 (临时数, 4)), 4)))
    返回 ()
.如果真结束
.变量循环首 (临时数, 相减 (相乘 (取整 (相加 (相除 (临时数, 4), 1)), 4), 1), 1, 循环容器)
    EMS增加段名称字节 (临时名, 0)
.变量循环尾 ()

.程序集 EMS数据管理程序集, , , comData(行数:77,方法:9)

.子程序 EMS初始化数据, 空白型, , InitData
连续赋值 (0, EMS_唯一ID_l, EMS_唯一ID_s, EMS_唯一ID_d, EMS_唯一ID_f)

.子程序 EMS申请数据小数, 空白型, , DeclareDataSingle
.参数 临时名字, 文本型, , 
.参数 临时值, 小数型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_小数, )
EMS增加数据小数 (临时值)

.子程序 EMS申请数据双字, 空白型, , DeclareDataDWord
.参数 临时名字, 文本型, , 
.参数 临时值, 整数型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_双字, )
EMS增加数据双字 (临时值)

.子程序 EMS申请数据单字, 空白型, , DeclareDataWord
.参数 临时名字, 文本型, , 
.参数 临时值, 短整数型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_字, )
EMS增加数据单字 (临时值)

.子程序 EMS申请数据字节, 空白型, , DeclareDataByte
.参数 临时名字, 文本型, , 
.参数 临时值, 字节型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_字节, )
EMS增加数据字节 (临时值)

.子程序 EMS申请数据无符号双字, 空白型, , DeclareDataUnsignedDWord
.参数 临时名字, 文本型, , 
.参数 临时值, 整数型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_无符号双字, )
EMS增加数据双字 (临时值)

.子程序 EMS申请数据无符号单字, 空白型, , DeclareDataUnsignedWord
.参数 临时名字, 文本型, , 
.参数 临时值, 短整数型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_无符号字, )
EMS增加数据单字 (临时值)

.子程序 EMS申请数据无符号字节, 空白型, , DeclareDataUnsignedByte
.参数 临时名字, 文本型, , 
.参数 临时值, 字节型, , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_无符号字节, )
EMS增加数据字节 (临时值)

.子程序 EMS申请数据字符串, 空白型, , DeclareDataString
.参数 临时名字, 文本型, , 
.参数 内容, 文本型, , 
.参数 空间, 整数型, 可空, 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 临时数, 整数型, , , 

EMS增加符号 (临时名字, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_字符串, )
赋值 (临时字节集, 到字节集 (内容))
赋值 (临时数, 取字节集长度 (临时字节集))

.计次循环首 (临时数, 循环容器)
    EMS增加数据字节 (临时字节集 [循环容器])
.计次循环尾 ()

.如果真 (并且 (等于 (是否为空 (空间), 假), 大于 (空间, 0)))
    .变量循环首 (临时数, 空间, 1, 循环容器)
        EMS增加数据字节 (0)
    .变量循环尾 ()
.如果真结束
EMS增加数据字节 (0)

.程序集 EMS数据类型管理程序集, , , comTypes(行数：94,方法:4)

.子程序 EMS初始化数据类型, 空白型, 公开, InitTypes
赋值 (EMS_当前类型, “”)
赋值 (EMS_类型左, 0)
重定义数组 (EMS_类型集, 假, 0)

.子程序 EMS赋值类型, 空白型, , AssignType
.参数 临时标识, 文本型, , 
.参数 目的标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 标识参数, 文本型, , , 
.局部变量 最后位置, 整数型, , , 
.局部变量 临时参数, 整数型, , , 

EMS终止 ()

赋值 (临时参数, 取数组成员数 (EMS_类型集))
.计次循环首 (临时参数, 循环容器)
    .如果真 (等于 (EMS_类型集 [循环容器], 名称, 目的标识))
        EMS增加符号 (临时标识, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_类型, )
        EMS插入资源 (相加 (EMS_类型集 [循环容器], 资源, “}”))
        赋值 (EMS_包含文件长度, 相加 (EMS_包含文件长度, 取文本长度 (EMS_类型集 [循环容器], 资源)))
        赋值 (临时类型, 临时标识)
        赋值 (EMS_当前类型, 临时类型)
        赋值 (EMS_类型左, 0)
        
        .判断循环首 (取反 (EMS是否符号 (“}”)))
            赋值 (标识参数, EMS标识符 ())
            .如果 (EMS是否类型 (标识参数))
                赋值 (临时类型, 标识参数)
                赋值 (标识参数, EMS标识符 ())
                赋值 (EMS_当前类型, 相加 (EMS_当前类型, “.”, 标识参数))
                EMS终止 ()
                .计次循环首 (临时参数, 循环次数)
                    .如果真 (等于 (EMS_类型集 [循环次数], 名称, 临时类型))
                        EMS增加符号 (EMS_当前类型, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_类型, )
                        EMS插入资源 (相加 (EMS_类型集 [循环次数], 资源, “}”))
                        赋值 (EMS_包含文件长度, 相加 (EMS_包含文件长度, 取文本长度 (EMS_类型集 [循环次数], 资源)))
                        赋值 (EMS_类型左, 相加 (EMS_类型左, 1))
                    .如果真结束
                    
                .计次循环尾 ()
            .否则
                EMS变量块 (标识参数, 假, 真)
            .如果结束
            .如果真 (等于 (EMS_位置, 最后位置))
                EMS错误信息 (相加 (“缺少符号:} 不能编译:”, 目的标识))
                返回 ()
            .如果真结束
            .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
                EMS错误信息 (“缺少符号:} 找不到结束代码”)
                返回 ()
            .如果真结束
            赋值 (最后位置, EMS_位置)
            EMS跳过空格 ()
            .如果真 (并且 (EMS是否符号 (“}”), 大于 (EMS_类型左, 0)))
                EMS跳 ()
                赋值 (EMS_类型左, 相减 (EMS_类型左, 1))
                赋值 (EMS_当前类型, 临时标识)
            .如果真结束
            
        .判断循环尾 ()
        .如果真 (EMS是否符号 (“}”))
            EMS跳 ()
        .如果真结束
        赋值 (EMS_当前类型, “”)
        EMS跳过空格 ()
        EMS代码块 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS是否赋值类型, 逻辑型, , IsAssignedType
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_符号集), 循环容器)
    .如果真 (并且 (等于 (EMS_符号集 [循环容器], 名字, 临时标识), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_类型)))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS是否类型, 逻辑型, , IsType
.参数 临时标识, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_类型集), 循环容器)
    .如果真 (等于 (EMS_类型集 [循环容器], 名称, 临时标识))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.程序集 EMS解析器管理程序集, , , comParser(行数:545,方法:24)

.子程序 EMS初始化解析器, 空白型, , InitParser*
.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (EMS_程序类型, 0)
连续赋值 (假, EMS_是否出错, EMS_库, EMS_无符号申请)
连续赋值 (“”, EMS_比较1, EMS_比较2, EMS_源)
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (临时数, 取数组成员数 (EMS_虚拟文件集))
.计次循环首 (临时数, 循环容器)
    .如果真 (取反 (等于 (EMS_虚拟文件集 [循环容器], 扩展, #EMS_虚拟_对话框)))
        赋值 (EMS_源, 相加 (EMS_源, “模块 ”, #引号, EMS_虚拟文件集 [循环容器], 名称, #引号, “;”, #换行符, EMS_虚拟文件集 [循环容器], 内容, #换行符))
    .如果真结束
    
.计次循环尾 ()
赋值 (EMS_源, 子文本替换 (EMS_源, 字符 (#Tab键), “ ”, , , 真))
赋值 (EMS_源, 子文本替换 (EMS_源, 相加 (“ _ ”, #换行符), “     ”, , , 真))
赋值 (EMS_源, 子文本替换 (EMS_源, 相加 (“ _”, #换行符), “    ”, , , 真))
赋值 (EMS_源, 子文本替换 (EMS_源, 相加 (“_”, #换行符), “   ”, , , 真))
赋值 (EMS_源, 相加 (EMS_源, #换行符))
赋值 (EMS_位置, 1)

.子程序 EMS解析器, 空白型, , Parse**
EMS开始计算时间 ()
连续赋值 (“”, EMS_当前模块, EMS_当前框架, EMS_当前类型, EMS_入口点)

.如果真 (取反 (EMS_库))
    EMS创建段 (“.数据”, #EMS_连接_数据, 相加 (#EMS_连接_特性_初始化数据, #EMS_连接_特性_内存读, #EMS_连接_特性_内存写))
    EMS创建段 (“.代码”, #EMS_连接_代码, 相加 (#EMS_连接_特性_代码, #EMS_连接_特性_内存读, #EMS_连接_特性_内存运行))
    EMS创建段 (“.导入数据”, #EMS_连接_导入, 相加 (#EMS_连接_特性_初始化数据, #EMS_连接_特性_内存读, #EMS_连接_特性_内存写))
    EMS创建段 (“.导出数据”, #EMS_连接_导出, 相加 (#EMS_连接_特性_初始化数据, #EMS_连接_特性_内存读))
    EMS创建段 (“.资源”, #EMS_连接_资源, 相加 (#EMS_连接_特性_初始化数据, #EMS_连接_特性_内存读))
    EMS创建段 (“.定位”, #EMS_连接_重置, 相加 (#EMS_连接_特性_可废弃内存, #EMS_连接_特性_初始化数据))
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS原值赋值类型 ()
    EMS向导模块 ()
    EMS向导程序 ()
    
    EMS增加导入 (“lstrcpyA”, “KERNEL32.DLL”, 2, “文本拷贝”, )
    EMS增加导入 (“lstrcmpA”, “KERNEL32.DLL”, 2, “文本对比”, )
    EMS增加导入 (“wsprintfA”, “USER32.DLL”, -1, “格式化”, )
    EMS增加导入 (“ExitProcess”, “KERNEL32.DLL”, 1, “退出”, )
    EMS增加导入 (“GetModuleHandleA”, “KERNEL32.DLL”, 1, “获取模块句柄”, )
    EMS增加导入 (“HeapCreate”, “KERNEL32.DLL”, 3, “创建堆”, )
    EMS增加导入 (“HeapAlloc”, “KERNEL32.DLL”, 3, “分配堆”, )
    EMS增加导入 (“HeapDestroy”, “KERNEL32.DLL”, 1, “销毁堆”, )
    EMS增加导入 (“RtlMoveMemory”, “KERNEL32.DLL”, 3, “内存拷贝”, )
    EMS增加导入 (“MessageBoxA”, “USER32.DLL”, 4, “信息框”, )
    
    EMS申请数据双字 (“实例句柄”, 0)
    EMS申请数据双字 (“$插入.属性”, 0)
    EMS申请数据双字 (“$插入.对比.一”, 0)
    EMS申请数据双字 (“$插入.对比.二”, 0)
    EMS申请数据双字 (“$插入.浮点”, 0)
    EMS申请数据双字 (“$插入.数组”, 0)
    EMS申请数据双字 (“$插入.循环判断”, 0)
    EMS申请数据双字 (“$插入.计数”, 0)
    EMS申请数据双字 (“$插入.返回”, 0)
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS增加常量 (“真”, “-1”)
    EMS增加常量 (“假”, “0”)
    EMS增加常量 (“空”, “0”)
    
    EMS增加代码单字 (106)
    EMS_InvokeByName (“获取模块句柄”)
    EMS增加代码字节 (163)
    EMS增加代码编码 (“实例句柄”)
    
    .如果 (取反 (EMS_是否DLL))
        .如果 (等于 (EMS_入口点, “”))
            EMS_ExprCall (“$入口”)
        .否则
            EMS_ExprCall (EMS_入口点)
            EMS_Push (0)
            EMS_InvokeByName (“退出”)
        .如果结束
        
    .否则
        EMS_InitializeDLL ()
    .如果结束
    
.如果真结束

EMS代码块 ()

.如果真 (并且 (取反 (EMS_库), 取反 (EMS_是否DLL)))
    EMS入口块 ()
    EMS代码块 ()
.如果真结束


.子程序 EMS代码块, 空白型, , CodeBlock**
.局部变量 临时标识, 文本型, , , 

赋值 (临时标识, EMS标识符 ())
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果真 (或者 (等于 (临时标识, “”), EMS_是否出错))
    返回 ()
.如果真结束

.判断开始 (等于 (临时标识, “导入”))
    EMS申请导入 ()
.判断 (等于 (临时标识, “常量”))
    EMS申请常量 ()
.判断 (等于 (临时标识, “类型”))
    EMS申请类型 ()
.判断 (等于 (临时标识, “子程序”))
    EMS申请框架 ()
.判断 (等于 (临时标识, “属性”))
    EMS申请框架 (假, 假, 假, 真)
.判断 (等于 (临时标识, “导出”))
    EMS申请框架 (真, , , )
.判断 (等于 (临时标识, “返回”))
    EMS语句返回 ()
.判断 (等于 (临时标识, “如果”))
    EMS语句如果 ()
.判断 (等于 (临时标识, “判断循环”))
    EMS语句条件循环 ()
.判断 (等于 (临时标识, “计次循环”))
    EMS语句计次循环 ()
.判断 (等于 (临时标识, “循环判断”))
    EMS语句循环尾 ()
.判断 (等于 (临时标识, “到标签”))
    EMS语句跳转 ()
.判断 (等于 (临时标识, “引入”))
    EMS语句包含 ()
.判断 (等于 (临时标识, “支持库”))
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS语句包含 ()
.判断 (等于 (临时标识, “局部”))
    EMS申请局部 ()
.判断 (等于 (临时标识, “保留”))
    EMS语句保护 ()
.判断 (等于 (临时标识, “重置”))
    EMS语句倒置 ()
.判断 (等于 (临时标识, “销毁”))
    EMS语句销毁 ()
.判断 (等于 (临时标识, “置入”))
    EMS语句向导 ()
.判断 (等于 (临时标识, “字节集”))
    EMS语句字节数 ()
.判断 (等于 (临时标识, “列举”))
    EMS语句列举 ()
.判断 (等于 (临时标识, “上标”))
    EMS语句上标 ()
.判断 (等于 (临时标识, “下标”))
    EMS语句下标 ()
.判断 (等于 (临时标识, “位图”))
    EMS申请位图 ()
.判断 (等于 (临时标识, “模块”))
    赋值 (EMS_位置, 相减 (EMS_位置, 4))
    EMS向导模块 ()
    EMS代码块 ()
    返回 ()
.判断 (等于 (临时标识, “结束”))
    赋值 (EMS_位置, 相减 (EMS_位置, 4))
    返回 ()
.判断 (等于 (临时标识, “结束.”))
    赋值 (EMS_位置, 相减 (EMS_位置, 5))
    返回 ()
.判断 (等于 (临时标识, “入口”))
    赋值 (EMS_位置, 相减 (EMS_位置, 4))
    返回 ()
.默认
     ' 本源码来自易语言资源网(www.5A5X.com)
    .判断开始 (EMS是否导入 (临时标识))
        EMS回调导入 (临时标识)
    .判断 (EMS是否局部变量 (临时标识))
        EMS计算局部变量 (临时标识)
    .判断 (EMS是否属性 (相加 (临时标识, “.设置”)))
        EMS回调属性 (相加 (临时标识, “.设置”))
    .判断 (EMS是否框架 (临时标识))
        EMS回调框架 (临时标识)
    .判断 (EMS是否变量 (临时标识))
        EMS计算变量 (临时标识)
    .默认
        EMS变量块 (临时标识)
    .判断结束
    
.判断结束


.子程序 EMS变量块, 空白型, , VariableBlock**
.参数 临时标识, 文本型, , 
.参数 临时表达式, 逻辑型, 可空, 
.参数 临时代码块, 逻辑型, 可空, 

.如果真 (是否为空 (临时表达式))
    赋值 (临时表达式, 假)
.如果真结束
.如果真 (是否为空 (临时代码块))
    赋值 (临时代码块, 假)
.如果真结束
.如果真 (或者 (等于 (临时标识, “”), EMS_是否出错))
    返回 ()
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
.判断开始 (等于 (临时标识, “符号”))
    赋值 (EMS_无符号申请, 假)
    赋值 (临时标识, EMS标识符 ())
    EMS变量块 (临时标识, 临时表达式, 临时代码块)
    返回 ()
.判断 (等于 (临时标识, “无符号”))
    赋值 (EMS_无符号申请, 真)
    赋值 (临时标识, EMS标识符 ())
    EMS变量块 (临时标识, 临时表达式, 临时代码块)
    返回 ()
.判断 (等于 (临时标识, “字节”))
    EMS申请变量 (EMS_当前类型, “字节”, 临时表达式, 临时代码块)
.判断 (等于 (临时标识, “逻辑”))
    EMS申请变量 (EMS_当前类型, “字节”, 临时表达式, 临时代码块)
.判断 (等于 (临时标识, “短整数”))
    EMS申请变量 (EMS_当前类型, “短整数”, 临时表达式, 临时代码块)
.判断 (等于 (临时标识, “整数”))
    EMS申请变量 (EMS_当前类型, “整数”, 临时表达式, 临时代码块)
.判断 (等于 (临时标识, “小数”))
    EMS申请变量 (EMS_当前类型, “小数”, 临时表达式, 临时代码块)
.判断 (等于 (临时标识, “文本”))
    EMS申请字符串 (EMS_当前类型, 临时表达式, 临时代码块)
.默认
    .如果 (EMS是否类型 (临时标识))
        EMS赋值类型 (EMS标识符 (), 临时标识)
    .否则
        EMS错误信息 (相加 (“未知的参数类型->”, 临时标识))
        返回 ()
    .如果结束
    
.判断结束
赋值 (EMS_无符号申请, 假)

.子程序 EMS标识符, 文本型, , Identifier
.局部变量 临时值, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 汉字, 文本型, , , 
.局部变量 是否汉字, 逻辑型, , , 
.局部变量 临时变量, 文本型, , , 

连续赋值 (“”, 临时值, 临时文本)
EMS跳过空格 ()
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (汉字, 取文本中间 (EMS_源, EMS_位置, 2))
赋值 (是否汉字, EMS是否汉字 (汉字))
.如果真 (取反 (是否汉字))
    赋值 (临时值, 取文本中间 (EMS_源, EMS_位置, 1))
.如果真结束

.如果真 (并且 (等于 (临时值, “.”), 不等于 (EMS_列举标识, “”)))
    赋值 (临时文本, EMS_列举标识)
.如果真结束

.判断循环首 (或者 (并且 (大于或等于 (到大写 (临时值), “A”), 小于或等于 (到大写 (临时值), “Z”)), 等于 (临时值, “.”), 等于 (临时值, “_”), 是否汉字))
    .如果 (是否汉字)
        赋值 (临时文本, 相加 (临时文本, 汉字))
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
    .否则
        .判断循环首 (EMS是否数字 (取文本中间 (EMS_源, 相加 (EMS_位置, 1), 1)))
            赋值 (临时文本, 相加 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1)))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
        .判断循环尾 ()
        赋值 (汉字, 取文本中间 (EMS_源, EMS_位置, 2))
        赋值 (是否汉字, EMS是否汉字 (汉字))
        .如果真 (取反 (是否汉字))
            赋值 (临时文本, 相加 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1)))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
        .如果真结束
        
    .如果结束
    赋值 (汉字, 取文本中间 (EMS_源, EMS_位置, 2))
    赋值 (是否汉字, EMS是否汉字 (汉字))
    
    .如果真 (取反 (是否汉字))
        赋值 (临时值, 取文本中间 (EMS_源, EMS_位置, 1))
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断循环尾 ()

.如果真 (EMS是否符号 (“:”))
    EMS申请标签 (临时文本)
    赋值 (临时文本, EMS标识符 ())
.如果真结束
返回 (临时文本)

.子程序 EMS跳, 空白型, , Skip
.参数 临时偏移地址, 短整数型, 可空, 

.如果真 (是否为空 (临时偏移地址))
    赋值 (临时偏移地址, 0)
.如果真结束
赋值 (EMS_位置, 相加 (EMS_位置, 1, 临时偏移地址))

.子程序 EMS跳过空格, 空白型, , SkipBlank
.局部变量 临时值1, 文本型, , , 
.局部变量 临时值2, 文本型, , , 

赋值 (临时值2, 取文本中间 (EMS_源, EMS_位置, 2))
赋值 (临时值1, 取文本左边 (临时值2, 1))

.判断循环首 (或者 (等于 (临时值1, “ ”), 等于 (临时值1, 字符 (#回车键)), 等于 (临时值1, 字符 (10)), 等于 (临时值1, 字符 (#Tab键)), 等于 (临时值2, “//”)))
    .如果真 (等于 (临时值2, “//”))
        .判断循环首 (不等于 (取文本中间 (EMS_源, EMS_位置, 2), #换行符))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
            .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
                EMS错误信息 (“已到代码尾”)
                返回 ()
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断循环尾 ()
    .如果真结束
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    赋值 (临时值2, 取文本中间 (EMS_源, EMS_位置, 2))
    赋值 (临时值1, 取文本左边 (临时值2, 1))
.判断循环尾 ()

.子程序 EMS跳过标识, 空白型, , SkipIdent
EMS标识符 ()

.子程序 EMS符号, 空白型, , Symbol
.参数 临时值, 文本型, , 

EMS跳过空格 ()
.如果 (等于 (取文本中间 (EMS_源, EMS_位置, 1), 临时值))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.否则
    EMS错误信息 (相加 (“应该是:”, 临时值, “,没有发现:”, 取文本中间 (EMS_源, EMS_位置, 1)))
    返回 ()
.如果结束


.子程序 EMS是否标识, 逻辑型, , IsIdent
.参数 临时字, 文本型, , 

EMS跳过空格 ()
.如果真 (等于 (取文本中间 (EMS_源, EMS_位置, 取文本长度 (临时字)), 临时字))
    返回 (真)
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束
返回 (假)

.子程序 EMS是否符号, 逻辑型, , IsSymbol
.参数 临时文本, 文本型, , 

.如果真 (等于 (取文本中间 (EMS_源, EMS_位置, 取文本长度 (临时文本)), 临时文本))
    返回 (真)
.如果真结束
返回 (假)

.子程序 EMS空格, 空白型, , Blank
.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.如果 (等于 (临时文本, “ ”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.否则
    EMS错误信息 (相加 (“没有发现空格,而是:”, 临时文本))
    返回 ()
.如果结束


.子程序 EMS终止, 空白型, , Terminator
.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.如果 (等于 (临时文本, “;”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.否则
    EMS错误信息 (相加 (“没有发现语句结束(;),而是:”, 临时文本))
    返回 ()
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS是否变量, 逻辑型, , IsVariable
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, 取数组成员数 (EMS_符号集))
.计次循环首 (临时数, 循环容器)
    .如果真 (等于 (EMS_符号集 [循环容器], 名字, 临时名))
        .如果真 (或者 (等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_字节), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_字), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_双字), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_小数), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_无符号字节), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_无符号字), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_无符号双字), 等于 (EMS_符号集 [循环容器], 符号类型, #EMS_符号_字符串)))
            返回 (真)
        .如果真结束
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS是否代码尾部, 逻辑型, , IsEndOfCode
.参数 临时值, 整数型, , 

.如果真 (大于 (临时值, 取文本长度 (EMS_源)))
    EMS错误信息 (“发现结束符号,”)
    返回 (真)
.如果真结束
返回 (假)

.子程序 EMS是否变量表达式, 逻辑型, , IsVariableExpression
.局部变量 临时文本, 文本型, , , 
.局部变量 汉字, 文本型, , , 

赋值 (临时文本, 到大写 (取文本中间 (EMS_源, EMS_位置, 1)))
赋值 (汉字, 取文本中间 (EMS_源, EMS_位置, 2))
返回 (选择 (或者 (并且 (大于或等于 (临时文本, “A”), 小于或等于 (临时文本, “Z”)), EMS是否汉字 (汉字)), 真, 假))

.子程序 EMS是否字符串表达式, 逻辑型, , IsStringExpression
返回 (选择 (等于 (取文本中间 (EMS_源, EMS_位置, 1), 字符 (34)), 真, 假))
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS是否浮点表达式, 逻辑型, , IsFloatExpression
.局部变量 字符串浮点, 文本型, , , 
.局部变量 临时位置, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (临时位置, EMS_位置)
赋值 (字符串浮点, “”)
赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.判断循环首 (或者 (EMS是否数字 (临时文本), 等于 (临时文本, “-”), 等于 (临时文本, “.”)))
    赋值 (字符串浮点, 相加 (字符串浮点, 临时文本))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.判断循环尾 ()
赋值 (EMS_位置, 临时位置)
.如果真 (大于 (寻找文本 (字符串浮点, “.”, , 假), 0))
    返回 (真)
.如果真结束
返回 (假)

.子程序 EMS是否数字表达式, 逻辑型, , IsNumberExpression
.局部变量 循环容器, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.判断开始 (或者 (EMS是否数字 (临时文本), 等于 (临时文本, “-”), 等于 (临时文本, “$”)))
    返回 (真)
.判断 (EMS是否常量表达式 ())
    .计次循环首 (取数组成员数 (EMS_常量集), 循环容器)
        .如果真 (EMS是否标识 (EMS_常量集 [循环容器], 名称))
            返回 (真)
        .如果真结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .计次循环尾 ()
.默认
    
.判断结束
返回 (假)

.子程序 EMS是否常量表达式, 逻辑型, , IsConstantExpression
.局部变量 临时文本, 文本型, , , 
.局部变量 汉字, 文本型, , , 

赋值 (临时文本, 到大写 (取文本中间 (EMS_源, EMS_位置, 1)))
赋值 (汉字, 取文本中间 (EMS_源, EMS_位置, 2))
.如果真 (或者 (并且 (大于或等于 (临时文本, “A”), 小于或等于 (临时文本, “Z”)), EMS是否汉字 (汉字)))
    返回 (真)
.如果真结束
返回 (EMS是否符号 (“[”))

.子程序 EMS数字表达式, 双精度小数型, , NumberExpression*
.局部变量 循环容器, 整数型, , , 
.局部变量 是否十六进制, 逻辑型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时参数, 文本型, , , 
.局部变量 是否负数, 逻辑型, , , 
.局部变量 点后, 文本型, , , 
.局部变量 临时小数, 双精度小数型, , , 

连续赋值 (“”, 临时参数, 点后)
连续赋值 (假, 是否十六进制, 是否负数)
赋值 (临时小数, 0)
EMS跳过空格 ()
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
.如果 (EMS是否符号 (“$”))
    EMS符号 (“$”)
    赋值 (是否十六进制, 真)
    赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
    .判断循环首 (或者 (EMS是否数字 (临时文本), 等于 (临时文本, “A”), 等于 (临时文本, “B”), 等于 (临时文本, “C”), 等于 (临时文本, “D”), 等于 (临时文本, “E”), 等于 (临时文本, “F”)))
        赋值 (临时参数, 相加 (临时参数, 临时文本))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
    .判断循环尾 ()
.否则
    .判断循环首 (或者 (EMS是否数字 (临时文本), 等于 (临时文本, “-”), 等于 (临时文本, “.”)))
        .判断开始 (等于 (临时文本, “.”))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
            赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
            .判断循环首 (EMS是否数字 (临时文本))
                赋值 (点后, 相加 (点后, 临时文本))
                赋值 (EMS_位置, 相加 (EMS_位置, 1))
                赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
            .判断循环尾 ()
             ' 本源码来自易语言资源网(www.5A5X.com)
            赋值 (EMS_位置, 相减 (EMS_位置, 1))
            .判断开始 (等于 (到小数 (“0.1”), 0.1)) ' 检查系统小数运算
                赋值 (点后, 相加 (“0.”, 点后))
            .判断 (等于 (到小数 (“0,1”), 0.1)) ' 检查German系统
                赋值 (点后, 相加 (“0,”, 点后))
            .默认
                
            .判断结束
            赋值 (临时参数, 相加 (临时参数, 点后))
        .判断 (等于 (临时文本, “-”))
            赋值 (是否负数, 真)
        .默认
            赋值 (临时参数, 相加 (临时参数, 临时文本))
        .判断结束
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
    .判断循环尾 ()
    .如果 (等于 (点后, “”))
        赋值 (临时小数, 相乘 (到整数 (临时参数), 选择 (是否负数, -1, 1)))
    .否则
        返回 (相乘 (到小数 (临时参数), 选择 (是否负数, -1, 1)))
    .如果结束
    
.如果结束

.如果真 (是否十六进制)
    返回 (EMS十六进制到数值 (临时参数))
.如果真结束
.如果真 (等于 (临时小数, 0))
    .计次循环首 (取数组成员数 (EMS_常量集), 循环容器)
        .如果真 (EMS是否标识 (EMS_常量集 [循环容器], 名称))
            返回 (EMS获取常量 (EMS标识符 ()))
        .如果真结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .计次循环尾 ()
.如果真结束
返回 (临时小数)

.子程序 EMS常量表达式, 整数型, , ConstantExpression
.局部变量 临时数字, 整数型, , , 

.如果 (EMS是否符号 (“[”))
    EMS符号 (“[”)
    .判断循环首 (取反 (EMS是否符号 (“]”)))
        赋值 (临时数字, EMS数字表达式 ())
        .判断开始 (EMS是否符号 (“+”))
            EMS符号 (“+”)
            赋值 (临时数字, 相加 (临时数字, EMS数字表达式 ()))
        .判断 (EMS是否符号 (“-”))
            EMS符号 (“-”)
            赋值 (临时数字, 相减 (临时数字, EMS数字表达式 ()))
        .判断 (EMS是否符号 (“|”))
            EMS符号 (“|”)
            .如果 (EMS是否符号 (“!”))
                EMS符号 (“!”)
                赋值 (临时数字, 位或 (临时数字, 位取反 (EMS数字表达式 ())))
            .否则
                赋值 (临时数字, 位或 (临时数字, EMS数字表达式 ()))
            .如果结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断 (EMS是否符号 (“&”))
            EMS符号 (“&”)
            .如果 (EMS是否符号 (“!”))
                EMS符号 (“!”)
                赋值 (临时数字, 位与 (临时数字, 位取反 (EMS数字表达式 ())))
            .否则
                赋值 (临时数字, 位与 (临时数字, EMS数字表达式 ()))
            .如果结束
            
        .判断 (EMS是否符号 (“~”))
            EMS符号 (“~”)
            赋值 (临时数字, 位异或 (临时数字, EMS数字表达式 ()))
        .默认
            EMS错误信息 (“错误的常量值..”)
            返回 (0)
        .判断结束
        
        .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
            EMS错误信息 (“已到代码尾部,没有发现正常结束 符号:)或,”)
            返回 (0)
        .如果真结束
        
    .判断循环尾 ()
    EMS符号 (“]”)
.否则
    返回 (EMS获取常量 (EMS标识符 ()))
.如果结束
返回 (临时数字)

.子程序 EMS变量表达式, 文本型, , VariableExpression
EMS跳过空格 ()
返回 (EMS标识符 ())

.子程序 EMS字符串表达式, 文本型, , StringExpression*
.局部变量 临时值, 文本型, , , 
.局部变量 临时文本, 文本型, , , 

EMS跳过空格 ()
EMS符号 (#引号)
赋值 (临时文本, “”)
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时值, 取文本中间 (EMS_源, EMS_位置, 1))
.判断循环首 (不等于 (临时值, #引号))
    赋值 (临时文本, 相加 (临时文本, 临时值))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    赋值 (临时值, 取文本中间 (EMS_源, EMS_位置, 2))
    .如果真 (等于 (临时值, “\n”))
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        赋值 (临时文本, 相加 (临时文本, #换行符))
    .如果真结束
    .如果真 (等于 (临时值, “\t”))
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        赋值 (临时文本, 相加 (临时文本, 字符 (#Tab键)))
    .如果真结束
    
    赋值 (临时值, 取文本中间 (EMS_源, EMS_位置, 1))
    .如果真 (或者 (等于 (临时值, 字符 (#回车键)), 等于 (临时值, “”)))
        EMS错误信息 (“字符串不能正常终止..”)
        返回 (“”)
    .如果真结束
    
.判断循环尾 ()
EMS符号 (#引号)
返回 (临时文本)

.子程序 EMS是否汉字, 逻辑型, , 
.参数 字符, 文本型, , 

.局部变量 代码, 字节集, , , 

赋值 (代码, 到字节集 (字符))
.如果真 (等于 (取字节集长度 (代码), 2))
    .判断开始 (并且 (大于或等于 (代码 [1], 129), 大于或等于 (代码 [2], 64), 小于或等于 (代码 [1], 160), 小于或等于 (代码 [2], 254))) ' GBK/3扩充汉字
        返回 (真)
    .判断 (并且 (大于或等于 (代码 [1], 170), 大于或等于 (代码 [2], 64), 小于或等于 (代码 [1], 254), 小于或等于 (代码 [2], 160))) ' GBK/4扩充汉字
        返回 (真)
    .判断 (并且 (大于或等于 (代码 [1], 176), 大于或等于 (代码 [2], 161), 小于或等于 (代码 [1], 247), 小于或等于 (代码 [2], 254))) ' GBK/2: GB2312 汉字
        返回 (真)
    .默认
         ' 本源码来自易语言资源网(www.5A5X.com)
    .判断结束
    
.如果真结束
返回 (假)

.程序集 EMS数学管理程序集, , , comMath(行数:38,方法:6)

.子程序 EMS单字高字节, 字节型, , HiByte
.参数 临时字, 短整数型, , 

.局部变量 临时字节集, 字节集, , , 

赋值 (临时字节集, 到字节集 (临时字))
返回 (临时字节集 [2])

.子程序 EMS单字低字节, 字节型, , LoByte
.参数 临时字, 短整数型, , 

.局部变量 临时字节集, 字节集, , , 

赋值 (临时字节集, 到字节集 (临时字))
返回 (临时字节集 [1])

.子程序 EMS双字高字节, 短整数型, , HiWord
.参数 临时值, 整数型, , 

返回 (取字节集数据 (到字节集 (临时值), #短整数型, 3))

.子程序 EMS双字低字节, 短整数型, , LoWord
.参数 临时值, 整数型, , 

返回 (取字节集数据 (到字节集 (临时值), #短整数型, 1))

.子程序 EMS小数高字节, 短整数型, , HiSWord
.参数 临时值, 小数型, , 

返回 (EMS双字高字节 (临时值))

.子程序 EMS小数低字节, 短整数型, , LoSWord
.参数 临时值, 小数型, , 

返回 (EMS双字低字节 (临时值))

.子程序 EMS是否数字, 逻辑型, , 
.参数 临时文本, 文本型, , 

.局部变量 临时字节, 字节型, , , 

赋值 (临时字节, 取代码 (临时文本, ))
返回 (并且 (大于或等于 (临时字节, 48), 小于或等于 (临时字节, 57)))

.子程序 EMS十六进制到数值, 整数型, , 
.参数 临时文本, 文本型, , 

.局部变量 临时数, 字节型, , , 
.局部变量 循环容器, 整数型, , , 
.局部变量 数字文本, 文本型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 返回字节集, 字节集, , , 
.局部变量 临时变量, 字节型, , , 
.局部变量 临时参数, 字节型, , , 

赋值 (临时数, 取文本长度 (临时文本))
赋值 (临时参数, 8)
赋值 (临时字节集, 取空白字节集 (8))
赋值 (返回字节集, 取空白字节集 (4))

.如果真 (小于 (临时数, 8))
    赋值 (临时参数, 临时数)
.如果真结束

赋值 (临时变量, 相加 (临时数, 1))
.计次循环首 (临时参数, 循环容器)
    赋值 (数字文本, 取文本中间 (临时文本, 相减 (临时变量, 循环容器), 1))
    .判断开始 (等于 (数字文本, “A”))
        赋值 (临时字节集 [循环容器], 10)
    .判断 (等于 (数字文本, “B”))
        赋值 (临时字节集 [循环容器], 11)
    .判断 (等于 (数字文本, “C”))
        赋值 (临时字节集 [循环容器], 12)
    .判断 (等于 (数字文本, “D”))
        赋值 (临时字节集 [循环容器], 13)
    .判断 (等于 (数字文本, “E”))
        赋值 (临时字节集 [循环容器], 14)
    .判断 (等于 (数字文本, “F”))
        赋值 (临时字节集 [循环容器], 15)
    .默认
        赋值 (临时字节集 [循环容器], 到字节 (数字文本))
    .判断结束
    
.计次循环尾 ()

赋值 (返回字节集 [1], 位或 (左移 (临时字节集 [2], 4), 临时字节集 [1]))
赋值 (返回字节集 [2], 位或 (左移 (临时字节集 [4], 4), 临时字节集 [3]))
赋值 (返回字节集 [3], 位或 (左移 (临时字节集 [6], 4), 临时字节集 [5]))
赋值 (返回字节集 [4], 位或 (左移 (临时字节集 [8], 4), 临时字节集 [7]))

返回 (取字节集数据 (返回字节集, #整数型, 1))

.程序集 EMS机器码管理程序集, , , comAssembler(行数:393,方法:56)

.子程序 EMS_PopEAX, 空白型, , 
.如果真 (取反 (EMS_优化 (“PopEAX”)))
    EMS增加代码字节 (88)
.如果真结束


.子程序 EMS_PopEBX, 空白型, , 
EMS增加代码字节 (91)

.子程序 EMS_PopECX, 空白型, , 
EMS增加代码字节 (89)

.子程序 EMS_PopEDX, 空白型, , 
EMS增加代码字节 (90)

.子程序 EMS_PushEAX, 空白型, , 
EMS增加代码字节 (80)

.子程序 EMS_PushECX, 空白型, , 
EMS增加代码字节 (81)

.子程序 EMS_DecECX, 空白型, , 
EMS增加代码字节 (73)

.子程序 EMS_IncECX, 空白型, , 
EMS增加代码字节 (65)

.子程序 EMS_StoreECX, 空白型, , 
EMS增加代码单字 (3465) ' mov [variable],ecx
EMS增加代码编码 (“$插入.循环判断”)

.子程序 EMS_RestoreECX, 空白型, , 
EMS增加代码单字 (3467) ' mov ecx,[variable]
EMS增加代码编码 (“$插入.循环判断”)

.子程序 EMS_Push, 空白型, , 
.参数 临时值, 整数型, 可空, 

.如果真 (是否为空 (临时值))
    赋值 (临时值, 0)
.如果真结束
EMS增加代码字节 (104) ' push dword 临时值
EMS增加代码双字 (临时值)

.子程序 EMS_PushF, 空白型, , 
.参数 临时值, 小数型, 可空, 

.如果真 (是否为空 (临时值))
    赋值 (临时值, 0)
.如果真结束
EMS增加代码字节 (104) ' push dword 临时值
EMS增加代码小数 (临时值)

.子程序 EMS_PushContent, 空白型, , 
.参数 临时值, 文本型, , 

EMS增加代码单字 (13823) ' push [变量]
EMS增加编码 (临时值, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加重置 (EMS偏移 (“.代码”))
EMS增加代码双字 (0)

.子程序 EMS_PushAddress, 空白型, , 
.参数 临时值, 文本型, , 

EMS增加代码字节 (104) ' push 临时值
EMS增加编码 (临时值, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加重置 (EMS偏移 (“.代码”))
EMS增加代码双字 (0)

.子程序 EMS_PushFloatEAX, 空白型, , 
.局部变量 临时文本, 文本型, , , 

赋值 (EMS_唯一ID_f, 相加 (EMS_唯一ID_f, 1))
赋值 (临时文本, 相加 (“$浮点”, 到文本 (EMS_唯一ID_f)))
EMS申请数据小数 (临时文本, 0)
EMS_AssignEAX (临时文本)
EMS_PushFloatContent (临时文本)

.子程序 EMS_PushFloatEDX, 空白型, , 
.局部变量 临时文本, 文本型, , , 

赋值 (EMS_唯一ID_f, 相加 (EMS_唯一ID_f, 1))
赋值 (临时文本, 相加 (“$浮点”, 到文本 (EMS_唯一ID_f)))
EMS申请数据小数 (临时文本, 0)
EMS_AssignEDX (临时文本)
EMS_PushFloatContent (临时文本)

.子程序 EMS_PushFloat, 空白型, , 
.参数 临时值, 小数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (EMS_唯一ID_f, 相加 (EMS_唯一ID_f, 1))
赋值 (临时文本, 相加 (“$浮点”, 到文本 (EMS_唯一ID_f)))
EMS申请数据小数 (临时文本, 临时值)
EMS_PushFloatContent (临时文本)

.子程序 EMS_PushFloatContent, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (1497)
EMS增加代码编码 (临时名)

.子程序 EMS_Invoke, 空白型, , 
EMS增加代码单字 (5631)

.子程序 EMS_InvokeByName, 空白型, , 
.参数 临时名, 文本型, , 

EMS_Invoke ()
EMS设置导入状态 (临时名, EMS偏移 (“.代码”))
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加代码双字 (0)

.子程序 EMS_ExprAdd, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX () ' add eax,edx
EMS增加代码单字 (53249)

.子程序 EMS_ExprFloatAdd, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()
EMS_PushFloatEAX ()
EMS_PushFloatEDX ()
 ' faddp
EMS增加代码单字 (49617)
EMS增加代码单字 (7641) ' fstp variable
EMS增加代码编码 (“$插入.浮点”)
EMS_MovEAX (“$插入.浮点”)

.子程序 EMS_ExprFloatSub, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()
EMS_PushFloatEAX ()
EMS_PushFloatEDX ()
 ' fsubp
EMS增加代码单字 (59870)
EMS增加代码单字 (7641) ' fstp variable
EMS增加代码编码 (“$插入.浮点”)
EMS_MovEAX (“$插入.浮点”)

.子程序 EMS_ExprFloatMul, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()
EMS_PushFloatEAX ()
EMS_PushFloatEDX ()
 ' fmulp
EMS增加代码单字 (51678)
EMS增加代码单字 (7641) ' fstp variable
EMS增加代码编码 (“$插入.浮点”)
EMS_MovEAX (“$插入.浮点”)

.子程序 EMS_ExprFloatDiv, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()
EMS_PushFloatEAX ()
EMS_PushFloatEDX ()
 ' fdivp
EMS增加代码单字 (63966)
EMS增加代码单字 (7641) ' fstp variable
EMS增加代码编码 (“$插入.浮点”)
EMS_MovEAX (“$插入.浮点”)

.子程序 EMS_ExprFloatMod, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()
EMS_PushFloatEAX ()
EMS_PushFloatEDX ()
 ' fprem
EMS增加代码单字 (63705)
EMS增加代码单字 (7641) ' fstp variable
EMS增加代码编码 (“$插入.浮点”)
EMS_MovEAX (“$插入.浮点”)

.子程序 EMS_ExprSub, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()

EMS增加代码单字 (53289) ' sub eax,edx

.子程序 EMS_ExprDiv, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()

EMS增加代码单字 (54153) ' move ebx,edx
EMS增加代码字节 (186) ' edx,0
EMS增加代码双字 (0)
EMS增加代码单字 (64503) ' idiv ebx

.子程序 EMS_ExprMul, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()

EMS增加代码单字 (54153) ' mov ebx,edx
EMS增加代码单字 (58359) ' mul ebx

.子程序 EMS_ExprMod, 空白型, , 
EMS_PopEDX ()
EMS_PopEAX ()

EMS增加代码单字 (54153) ' mov ebx,edx
EMS增加代码字节 (186) ' mov edx,0
EMS增加代码双字 (0)
EMS增加代码单字 (64503) ' idiv ebx
EMS增加代码单字 (49803) ' mov eax,edx

.子程序 EMS_ExprShl, 空白型, , 
EMS_PopECX ()
EMS_PopEAX ()

EMS增加代码单字 (57555) ' shl eax,cl

.子程序 EMS_ExprShr, 空白型, , 
EMS_PopECX ()
EMS_PopEAX ()

EMS增加代码单字 (59603) ' shl eax,cl

.子程序 EMS_ExprAnd, 空白型, , 
EMS_PopEBX ()
EMS_PopEAX ()

EMS增加代码单字 (49955) ' and eax,ebx

.子程序 EMS_ExprOr, 空白型, , 
EMS_PopEBX ()
EMS_PopEAX ()

EMS增加代码单字 (49931) ' or eax,ebx

.子程序 EMS_ExprXor, 空白型, , 
EMS_PopEBX ()
EMS_PopEAX ()

EMS增加代码单字 (49971) ' xor eax,ebx

.子程序 EMS_ExprNeg, 空白型, , 
EMS增加代码单字 (55543)

.子程序 EMS_ExprNot, 空白型, , 
EMS增加代码单字 (53495)

.子程序 EMS_MovEAX, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (161) ' mov eax,[临时名]
EMS增加代码编码 (临时名)

.子程序 EMS_MovEAXAddress, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (184) ' mov eax,[临时名]
EMS增加代码编码 (临时名)

.子程序 EMS_MovEDX, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (5515) ' mov edx,[临时名]
EMS增加代码编码 (临时名)

.子程序 EMS_ExprCompare, 空白型, , 
.参数 参量1, 文本型, , 
.参数 参量2, 文本型, , 

.判断开始 (并且 (不等于 (EMS_比较1, “”), 等于 (EMS_比较2, “”)))
    EMS_MovEAX (EMS_比较1)
    EMS_MovEDX (参量2)
.判断 (并且 (等于 (EMS_比较1, “”), 不等于 (EMS_比较2, “”)))
    EMS_MovEAX (参量1)
    EMS_MovEDX (EMS_比较2)
.判断 (并且 (不等于 (EMS_比较1, “”), 不等于 (EMS_比较2, “”)))
    EMS_MovEAX (EMS_比较1)
    EMS_MovEDX (EMS_比较2)
.默认
    EMS_MovEAX (参量1)
    EMS_MovEDX (参量2)
.判断结束

EMS增加代码单字 (53305) ' cmp eax,edx
连续赋值 (“”, EMS_比较1, EMS_比较2)

.子程序 EMS_ExprCompareS, 空白型, , 
.参数 参量1, 文本型, , 
.参数 参量2, 文本型, , 

EMS_PushContent (参量2)
EMS_PushContent (参量1)
EMS_InvokeByName (“文本对比”)

EMS增加代码字节 (61) ' cmp eax,0
EMS增加代码双字 (0)

.子程序 EMS_AssignEAX, 空白型, , 
.参数 临时参量, 文本型, , 

EMS增加代码字节 (163) ' mov [临时参量],eax
EMS增加编码 (临时参量, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加代码双字 (0)

.子程序 EMS_AssignEDX, 空白型, , 
.参数 临时参量, 文本型, , 

EMS增加代码单字 (5513) ' mov [临时参量],edx
EMS增加编码 (临时参量, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
EMS增加代码双字 (0)

.子程序 EMS_ExprJE, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (33807)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJNE, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (34063)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJL, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (35855)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJLE, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (15)
EMS增加代码字节 (142)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJA, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (36623)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJAE, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码单字 (36111)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprJump, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (233)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (0)

.子程序 EMS_ExprLoop, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (226) ' loop label
EMS增加代码字节 (相减 (255, 到字节 (相减 (EMS偏移 (“.代码”), EMS获取符号偏移 (临时名)))))

.子程序 EMS_ExprCall, 空白型, , 
.参数 临时名, 文本型, , 

EMS增加代码字节 (232)
EMS增加编码 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, )
EMS增加代码双字 (4294967295)

.子程序 EMS_StartFrame, 空白型, , 
EMS增加代码字节 (85)
EMS增加代码字节 (137)
EMS增加代码字节 (229)

.子程序 EMS_EndFrame, 空白型, , 
.参数 临时值, 短整数型, , 

EMS增加代码字节 (201)
EMS增加代码字节 (194)
EMS增加代码单字 (临时值)

.子程序 EMS_InitializeDLL, 空白型, , 
EMS_StartFrame ()
EMS增加代码字节 (184)
EMS增加代码双字 (1)
EMS_EndFrame (12)

.程序集 EMS优化管理程序集, , , comOptimize(行数：34，方法:1)

.子程序 EMS_优化, 逻辑型, , OptimizeAble
.参数 优化指令, 文本型, , 
.参数 参量, 文本型, 可空, 

.局部变量 临时数, 整数型, , , 
.局部变量 字节1, 字节型, , , 
.局部变量 字节2, 字节型, , , 
.局部变量 字节3, 字节型, , , 
.局部变量 字节4, 字节型, , , 
.局部变量 临时逻辑, 逻辑型, , , 

赋值 (临时逻辑, 假)
.判断开始 (等于 (优化指令, “PopEAX”))
    赋值 (临时数, 取数组成员数 (EMS_段集 [3].字节))
    .判断开始 (等于 (EMS_段集 [3].字节 [临时数], 80))
        重定义数组 (EMS_段集 [3].字节, 真, 相减 (临时数, 1))
        赋值 (临时逻辑, 真)
    .判断 (等于 (EMS_段集 [3].字节 [相减 (临时数, 4)], 104))
        赋值 (字节1, EMS_段集 [3].字节 [相减 (临时数, 3)])
        赋值 (字节2, EMS_段集 [3].字节 [相减 (临时数, 2)])
        赋值 (字节3, EMS_段集 [3].字节 [相减 (临时数, 1)])
        赋值 (字节4, EMS_段集 [3].字节 [临时数])
        重定义数组 (EMS_段集 [3].字节, 真, 相减 (临时数, 5))
        EMS增加代码字节 (184)
        EMS增加代码字节 (字节1)
        EMS增加代码字节 (字节2)
        EMS增加代码字节 (字节3)
        EMS增加代码字节 (字节4)
        赋值 (临时逻辑, 真)
    .默认
        
    .判断结束
    
.默认
    
.判断结束
返回 (临时逻辑)

.窗口程序集 窗口程序集1, , , 

.程序集变量 源码文件, 文本型, , , 
.子程序 _窗口1_创建完毕, 空白型, , 
赋值 (.初始目录, 取运行目录 ())
赋值 (.过滤器, “ems|*.ems”)
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _打开源码_被单击, 空白型, , 
.局部变量 循环容器, 整数型, , , 
.局部变量 临时编辑框, 编辑框, , , 

打开 ()
.如果真 (等于 (.文件名, “”))
    返回 ()
.如果真结束
EMS初始化虚拟文件 ()
赋值 (源码文件, .文件名)
EMS打开虚拟文件 (源码文件)
.计次循环首 (4, 循环容器)
    .如果真 (大于 (循环容器, 取数组成员数 (EMS_虚拟文件集)))
        跳出循环 ()
    .如果真结束
    赋值 (临时编辑框, 取标记组件 (循环容器))
    赋值 (临时编辑框.内容, EMS_虚拟文件集 [循环容器], 内容)
.计次循环尾 ()

.子程序 _新建源码_被单击, 空白型, , 
赋值 (源码文件, 相加 (取运行目录 (), “\temp.ems”))
重定义数组 (EMS_虚拟文件集, 假, 1)

.子程序 _更新_被单击, 空白型, , 
.局部变量 循环容器, 整数型, , , 
.局部变量 临时编辑框, 编辑框, , , 

.计次循环首 (4, 循环容器)
    .如果真 (大于 (循环容器, 取数组成员数 (EMS_虚拟文件集)))
        跳出循环 ()
    .如果真结束
    赋值 (临时编辑框, 取标记组件 (循环容器))
    赋值 (EMS_虚拟文件集 [循环容器], 内容, 删首尾空 (临时编辑框.内容))
.计次循环尾 ()


.子程序 _保存_被单击, 空白型, , 
_更新_被单击 ()
' 本源码来自易语言资源网(www.5A5X.com)
EMS保存虚拟文件 (源码文件)

.子程序 _编译_被单击, 空白型, , 
EMS编译 (相加 (取文本左边 (源码文件, 倒找文本 (源码文件, “.”, , 假)), “exe”), 真)

.子程序 _按钮1_被单击, 空白型, , 
赋值 (.内容, 子文本替换 (.内容, “import”, “导入”, , , 真))

.子程序 _按钮2_被单击, 空白型, , 
赋值 (.内容, 子文本替换 (.内容, “const”, “常量”, , , 真))

.子程序 _按钮3_被单击, 空白型, , 
赋值 (.内容, 子文本替换 (.内容, “type”, “类型”, , , 真))
赋值 (.内容, 子文本替换 (.内容, “byte”, “字节”, , , 真))
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (.内容, 子文本替换 (.内容, “dword”, “整数”, , , 真))
赋值 (.内容, 子文本替换 (.内容, “word”, “短整数”, , , 真))
赋值 (.内容, 子文本替换 (.内容, “string”, “文本”, , , 真))
赋值 (.内容, 子文本替换 (.内容, “boolean”, “逻辑”, , , 真))

.子程序 _按钮4_被单击, 空白型, , 
赋值 (.内容, 子文本替换 (.内容, “alias”, “别名”, , , 真))


.程序集 EMS表达式管理程序集, , , comExpressions(行数：575，方法:16)

.子程序 EMS选择关系, 空白型, , ChooseRelation
.参数 编号, 整数型, , 
.参数 否则标签, 文本型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 相加 (否则标签, 到文本 (编号)))
.判断开始 (等于 (EMS_关系, “=”))
    EMS_ExprJNE (临时文本)
.判断 (或者 (等于 (EMS_关系, “!=”), 等于 (EMS_关系, “<>”)))
    EMS_ExprJE (临时文本)
.判断 (等于 (EMS_关系, “<”))
    EMS_ExprJAE (临时文本)
.判断 (等于 (EMS_关系, “>”))
    EMS_ExprJLE (临时文本)
.判断 (或者 (等于 (EMS_关系, “>=”), 等于 (EMS_关系, “=>”)))
    EMS_ExprJL (临时文本)
.判断 (或者 (等于 (EMS_关系, “<=”), 等于 (EMS_关系, “=<”)))
    EMS_ExprJA (临时文本)
.默认
    
.判断结束


.子程序 EMS是否加减运算符, 逻辑型, , IsOperatorAdd
返回 (或者 (EMS是否符号 (“+”), EMS是否符号 (“-”), EMS是否标识 (“加”), EMS是否标识 (“减”)))

.子程序 EMS是否逻辑运算符, 逻辑型, , IsOperatorBool
返回 (或者 (EMS是否符号 (“|”), EMS是否符号 (“~”), EMS是否符号 (“&”), EMS是否标识 (“或”), EMS是否标识 (“异或”), EMS是否标识 (“且”)))

.子程序 EMS是否乘除运算符, 逻辑型, , IsOperatorMul
返回 (或者 (EMS是否符号 (“*”), EMS是否符号 (“/”), EMS是否符号 (“%”), EMS是否符号 (“>>”), EMS是否符号 (“<<”), EMS是否标识 (“乘”), EMS是否标识 (“除”), EMS是否标识 (“取模”), EMS是否标识 (“右移”), EMS是否标识 (“左移”)))

.子程序 EMS是否关系运算符, 逻辑型, , IsOperatorRelation
返回 (或者 (EMS是否符号 (“=”), EMS是否符号 (“!=”), EMS是否符号 (“<>”), EMS是否符号 (“>=”), EMS是否符号 (“<=”), EMS是否符号 (“=>”), EMS是否符号 (“=<”), EMS是否符号 (“>”), EMS是否符号 (“<”)))

.子程序 EMS表达式, 空白型, , Expression
.参数 临时参数, 文本型, 可空, 

.局部变量 临时数, 整数型, , , 

.如果真 (是否为空 (临时参数))
    赋值 (临时参数, “”)
.如果真结束
EMS跳过空格 ()
赋值 (EMS_相关参数, 临时参数)
赋值 (EMS_计算次数, 0)
赋值 (EMS_是否浮点数, 假)
EMS分析关系 ()

.如果真 (取反 (等于 (临时参数, “”)))
    .如果真 (并且 (等于 (临时参数, “$插入.对比.一”), 不等于 (EMS_比较1, “”)))
        返回 ()
    .如果真结束
    .如果真 (并且 (等于 (临时参数, “$插入.对比.二”), 不等于 (EMS_比较2, “”)))
        返回 ()
    .如果真结束
    赋值 (临时数, EMS获取符号大小 (临时参数))
    .判断开始 (等于 (临时数, 1))
        EMS_PopEDX ()
        EMS增加代码单字 (5512) ' mov [variable],dl
        EMS增加编码 (临时参数, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
        EMS增加代码双字 (0)
    .判断 (等于 (临时数, 2))
        EMS_PopEDX ()
        EMS增加代码单字 (35174)
        EMS增加代码字节 (21)
        EMS增加编码 (临时参数, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
        EMS增加代码双字 (0)
    .默认
        EMS_PopEAX ()
        EMS_AssignEAX (临时参数)
    .判断结束
    
.如果真结束


.子程序 EMS分析关系, 空白型, , EvalRelation
EMS跳过空格 ()
EMS分析逻辑 ()

.判断循环首 (EMS是否关系运算符 ())
    .判断开始 (EMS是否符号 (“<>”))
        赋值 (EMS_关系, “<>”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .判断 (EMS是否符号 (“>=”))
        赋值 (EMS_关系, “>=”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .判断 (EMS是否符号 (“<=”))
        赋值 (EMS_关系, “<=”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .判断 (EMS是否符号 (“=>”))
        赋值 (EMS_关系, “=>”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .判断 (EMS是否符号 (“=<”))
        赋值 (EMS_关系, “=<”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .判断 (EMS是否符号 (“=”))
        赋值 (EMS_关系, “=”)
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        返回 ()
    .判断 (EMS是否符号 (“>”))
        赋值 (EMS_关系, “>”)
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        返回 ()
    .判断 (EMS是否符号 (“<”))
        赋值 (EMS_关系, “<”)
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        返回 ()
    .判断 (EMS是否符号 (“!=”))
        赋值 (EMS_关系, “!=”)
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        返回 ()
    .默认
        
    .判断结束
    
.判断循环尾 ()

.子程序 EMS分析逻辑, 空白型, , EvalBool
EMS跳过空格 ()
EMS分析表达式 ()

.判断循环首 (EMS是否逻辑运算符 ())
    .判断开始 (或者 (EMS是否符号 (“|”), EMS是否标识 (“或”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析表达式 ()
        EMS_ExprOr ()
    .判断 (或者 (EMS是否符号 (“~”), EMS是否标识 (“异或”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析表达式 ()
        EMS_ExprXor ()
    .判断 (或者 (EMS是否符号 (“&”), EMS是否标识 (“且”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析表达式 ()
        EMS_ExprAnd ()
    .默认
        
    .判断结束
    EMS_PushEAX ()
.判断循环尾 ()

.子程序 EMS分析表达式, 空白型, , EvalExpression
EMS跳过空格 ()
EMS分析项 ()

.判断循环首 (EMS是否加减运算符 ())
    .判断开始 (或者 (EMS是否符号 (“+”), EMS是否标识 (“加”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析项 ()
        .如果 (EMS_是否浮点数)
            EMS_ExprFloatAdd ()
        .否则
            EMS_ExprAdd ()
        .如果结束
        
    .判断 (或者 (EMS是否符号 (“-”), EMS是否标识 (“减”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析项 ()
        .如果 (EMS_是否浮点数)
            EMS_ExprFloatSub ()
        .否则
            EMS_ExprSub ()
        .如果结束
        
    .默认
        
    .判断结束
    EMS_PushEAX ()
.判断循环尾 ()

.子程序 EMS分析项, 空白型, , EvalTerm
EMS跳过空格 ()
EMS分析因子 ()

.判断循环首 (EMS是否乘除运算符 ())
    .判断开始 (或者 (EMS是否符号 (“*”), EMS是否符号 (“乘”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析因子 ()
        .如果 (EMS_是否浮点数)
            EMS_ExprFloatMul ()
        .否则
            EMS_ExprMul ()
        .如果结束
        
    .判断 (或者 (EMS是否符号 (“/”), EMS是否符号 (“除”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析因子 ()
        .如果 (EMS_是否浮点数)
            EMS_ExprFloatDiv ()
        .否则
            EMS_ExprDiv ()
        .如果结束
        
    .判断 (或者 (EMS是否符号 (“%”), EMS是否符号 (“取模”)))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析因子 ()
        .如果 (EMS_是否浮点数)
            EMS_ExprFloatMod ()
        .否则
            EMS_ExprMod ()
        .如果结束
        
    .判断 (EMS是否符号 (“<<”))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        EMS分析因子 ()
        EMS_ExprShl ()
    .判断 (EMS是否符号 (“左移”))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析因子 ()
        EMS_ExprShl ()
    .判断 (EMS是否符号 (“>>”))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 2))
        EMS分析因子 ()
        EMS_ExprShr ()
    .判断 (EMS是否符号 (“右移”))
        EMS跳过标识 ()
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS分析因子 ()
        EMS_ExprShr ()
    .默认
        
    .判断结束
    EMS_PushEAX ()
.判断循环尾 ()

.子程序 EMS分析因子, 空白型, , EvalFactor
.局部变量 是否逻辑, 逻辑型, , , 
.局部变量 是否符号, 逻辑型, , , 
.局部变量 临时参数, 文本型, , , 
.局部变量 临时符号类型, 字节型, , , 
.局部变量 临时字符串, 文本型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时返回类型, 文本型, , , 

赋值 (是否符号, EMS是否符号 (“^”))
赋值 (是否逻辑, EMS是否符号 (“!”))
.如果真 (或者 (是否符号, 是否逻辑))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.如果真结束
赋值 (临时参数, EMS_相关参数)
EMS跳过空格 ()

.如果真 (大于 (EMS_计算次数, 0))
    .如果真 (不等于 (EMS_比较1, “”))
        EMS_PushContent (EMS_比较1)
        赋值 (EMS_比较1, “”)
        .如果真 (不等于 (EMS_比较2, “”))
            EMS_PushContent (EMS_比较2)
            赋值 (EMS_比较2, “”)
        .如果真结束
        
    .如果真结束
    
.如果真结束

连续赋值 (假, EMS_是否浮点数, EMS_是否字符串比较)

.判断开始 (EMS是否浮点表达式 ())
    EMS_PushF (EMS数字表达式 ())
    赋值 (EMS_是否浮点数, 真)
.判断 (EMS是否数字表达式 ())
    EMS_Push (EMS数字表达式 ())
.判断 (EMS是否字符串表达式 ())
    赋值 (EMS_是否字符串比较, 真)
    赋值 (EMS_唯一ID_d, 相加 (EMS_唯一ID_d, 1))
    赋值 (临时字符串, EMS字符串表达式 ())
    EMS申请数据字符串 (相加 (“$唯一文本”, 到文本 (EMS_唯一ID_d)), 临时字符串, 取文本长度 (临时字符串))
    
    .如果 (EMS_是否回调框架)
        EMS_PushAddress (相加 (“$唯一文本”, 到文本 (EMS_唯一ID_d)))
    .否则
        赋值 (临时符号类型, EMS获取符号类型 (临时参数))
        .判断开始 (或者 (等于 (临时符号类型, #EMS_符号_双字), 等于 (临时符号类型, #EMS_符号_字), 等于 (临时符号类型, #EMS_符号_字节), 等于 (临时符号类型, #EMS_符号_小数), 等于 (临时符号类型, #EMS_符号_无符号双字), 等于 (临时符号类型, #EMS_符号_无符号字), 等于 (临时符号类型, #EMS_符号_无符号字节)))
            EMS_PushAddress (相加 (“$唯一文本”, 到文本 (EMS_唯一ID_d)))
        .判断 (等于 (临时符号类型, #EMS_符号_字符串))
            EMS_PushAddress (相加 (“$唯一文本”, 到文本 (EMS_唯一ID_d)))
            EMS_PushAddress (临时参数)
            EMS_InvokeByName (“文本拷贝”)
            EMS_PushContent (临时参数)
        .默认
            EMS_PushAddress (相加 (“$唯一文本”, 到文本 (EMS_唯一ID_d)))
        .判断结束
        
    .如果结束
    
.判断 (EMS是否符号 (“(”))
    EMS符号 (“(”)
    EMS表达式 ()
    EMS符号 (“)”)
.判断 (EMS是否符号 (“)”))
    返回 ()
.判断 (EMS是否符号 (“,”))
    返回 ()
.判断 (EMS是否符号 (“;”))
    返回 ()
.判断 (EMS是否符号 (“@”))
    EMS符号 (“@”)
    赋值 (临时标识, EMS标识符 ())
    赋值 (临时符号类型, EMS获取符号类型 (相加 (EMS_当前框架, “.”, 临时标识)))
    .判断开始 (或者 (等于 (临时符号类型, #EMS_符号_局部双字), 等于 (临时符号类型, #EMS_符号_局部小数)))
        EMS增加代码字节 (85) ' push ebp
        EMS_Push (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
        EMS_ExprAdd ()
        EMS_PushEAX ()
    .判断 (等于 (临时符号类型, #EMS_符号_局部字符串))
        EMS增加代码单字 (34189)
        EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
        EMS增加代码单字 (139)
        EMS_PushEAX ()
    .默认
        .如果真 (等于 (EMS获取符号类型 (临时标识), #EMS_符号_框架))
            赋值 (临时标识, 相加 (临时标识, “.地址”))
        .如果真结束
        EMS_PushAddress (临时标识)
    .判断结束
    
.默认
    赋值 (临时标识, EMS标识符 ())
    .判断开始 (EMS是否导入 (临时标识))
        EMS回调导入 (临时标识, 真)
        EMS_PushEAX ()
    .判断 (EMS是否变量 (临时标识))
        .判断开始 (EMS是否符号 (“[”))
            EMS符号 (“[”)
            EMS获取数组 (临时标识)
            EMS符号 (“]”)
        .判断 (并且 (等于 (临时参数, “$插入.对比.一”), 等于 (EMS获取符号大小 (临时标识), 4), 等于 (EMS_计算次数, 0)))
            赋值 (EMS_比较1, 临时标识)
        .判断 (并且 (等于 (临时参数, “$插入.对比.二”), 等于 (EMS获取符号大小 (临时标识), 4), 等于 (EMS_计算次数, 0)))
            赋值 (EMS_比较2, 临时标识)
        .默认
            .判断开始 (并且 (等于 (EMS获取符号类型 (临时标识), #EMS_符号_字符串), 等于 (EMS获取符号类型 (临时参数), #EMS_符号_字符串)))
                赋值 (EMS_是否字符串比较, 真)
                EMS_PushContent (临时标识)
            .判断 (等于 (EMS获取符号类型 (临时标识), #EMS_符号_字符串))
                赋值 (EMS_是否字符串比较, 真)
                EMS_PushAddress (临时标识)
            .默认
                赋值 (临时符号类型, EMS获取符号类型 (临时标识))
                .判断开始 (等于 (临时符号类型, #EMS_符号_字节))
                    EMS增加代码字节 (15)
                    EMS增加代码字节 (190)
                    EMS增加代码字节 (5)
                .判断 (等于 (临时符号类型, #EMS_符号_无符号字节))
                    EMS增加代码字节 (15)
                    EMS增加代码字节 (182)
                    EMS增加代码字节 (5)
                .判断 (等于 (临时符号类型, #EMS_符号_字))
                    EMS增加代码字节 (15)
                    EMS增加代码字节 (191)
                    EMS增加代码字节 (5)
                .判断 (等于 (临时符号类型, #EMS_符号_无符号字))
                    EMS增加代码字节 (15)
                    EMS增加代码字节 (183)
                    EMS增加代码字节 (5)
                .判断 (等于 (临时符号类型, #EMS_符号_双字))
                    EMS增加代码字节 (161)
                .判断 (等于 (临时符号类型, #EMS_符号_无符号双字))
                    EMS增加代码字节 (161)
                .判断 (等于 (临时符号类型, #EMS_符号_小数))
                    赋值 (EMS_是否浮点数, 真)
                    EMS增加代码字节 (161)
                .默认
                    
                .判断结束
                EMS增加编码 (临时标识, EMS偏移 (“.代码”), #EMS_连接_代码, 4194304)
                EMS增加代码双字 (0)
                EMS_PushEAX ()
            .判断结束
            
        .判断结束
        
    .判断 (EMS是否局部变量 (临时标识))
        赋值 (临时符号类型, EMS获取符号类型 (相加 (EMS_当前框架, “.”, 临时标识)))
        .判断开始 (并且 (等于 (临时符号类型, #EMS_符号_局部字符串), 不等于 (临时参数, “”)))
            EMS增加代码单字 (34189)
            EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
            EMS_PushEAX ()
            .如果真 (等于 (EMS获取符号类型 (临时参数), #EMS_符号_字符串))
                EMS增加代码单字 (139)
            .如果真结束
            EMS_PushEAX ()
            EMS_PushAddress (临时参数)
            EMS_InvokeByName (“文本拷贝”)
            EMS_PushContent (临时参数)
        .判断 (等于 (临时符号类型, #EMS_符号_局部字符串))
            EMS增加代码单字 (34189)
            EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
            EMS增加代码单字 (139)
            EMS_PushEAX ()
        .判断 (等于 (临时符号类型, #EMS_符号_局部双字))
            EMS增加代码单字 (34189) ' mov eax,[ebp+number]
            EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
            EMS增加代码单字 (139) ' mov eax,[eax]
            EMS_PushEAX ()
        .判断 (等于 (临时符号类型, #EMS_符号_局部小数))
            赋值 (EMS_是否浮点数, 真)
            EMS增加代码单字 (34189)
            EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时标识)))
            EMS增加代码单字 (139)
            EMS_PushEAX ()
        .默认
            
        .判断结束
        
    .判断 (EMS是否赋值类型 (临时标识))
        EMS_PushAddress (临时标识)
    .判断 (EMS是否属性 (相加 (临时标识, “.获取”)))
        EMS回调属性 (相加 (临时标识, “.获取”), 真)
        EMS_PushEAX ()
        赋值 (EMS_是否字符串比较, 假)
    .判断 (EMS是否框架 (临时标识))
        EMS回调框架 (临时标识, 真)
        赋值 (临时返回类型, EMS获取返回类型 (临时标识))
        .判断开始 (等于 (临时返回类型, “小数”))
            赋值 (EMS_是否浮点数, 真)
        .判断 (等于 (临时返回类型, “字符串”))
            赋值 (EMS_是否字符串比较, 真)
        .判断 (等于 (临时返回类型, “整数”))
            连续赋值 (假, EMS_是否浮点数, EMS_是否字符串比较)
        .判断 (等于 (临时返回类型, “属性”))
            连续赋值 (假, EMS_是否浮点数, EMS_是否字符串比较)
        .默认
            
        .判断结束
        .如果真 (等于 (EMS获取返回类型 (临时标识), “小数”))
            赋值 (EMS_是否浮点数, 真)
        .如果真结束
        .如果 (等于 (EMS获取符号类型 (临时参数), #EMS_符号_字符串))
            EMS_PushEAX ()
            EMS_PushAddress (临时参数)
            EMS_InvokeByName (“文本拷贝”)
            EMS_PushContent (临时参数)
        .否则
            EMS_PushEAX ()
            赋值 (EMS_是否字符串比较, 假)
        .如果结束
        
    .判断 (不等于 (临时标识, “”))
        赋值 (EMS_位置, 相减 (EMS_位置, 取文本长度 (临时标识)))
        EMS代码块 ()
    .默认
        .如果 (等于 (临时标识, “”))
            EMS错误信息 (相加 (“未知类型'”, 取文本中间 (EMS_源, EMS_位置, 1), “'”))
            返回 ()
        .否则
            EMS错误信息 (相加 (“未知定义 '”, 临时标识))
            返回 ()
        .如果结束
        
    .判断结束
    
.判断结束
.判断循环首 (EMS是否符号 (“ ”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.判断循环尾 ()
.如果真 (是否符号)
    EMS_PopEAX ()
    EMS增加代码单字 (139) ' mov eax,[eax]
    EMS_PushEAX ()
.如果真结束
.如果真 (是否逻辑)
    EMS_ExprNot ()
    EMS_PushEAX ()
.如果真结束
赋值 (EMS_计算次数, 相加 (EMS_计算次数, 1))

.子程序 EMS回调导入, 空白型, , CallImport
.参数 临时标识, 文本型, , 
.参数 来自于表达式, 逻辑型, 可空, 

.局部变量 临时数, 短整数型, , , 

.如果真 (是否为空 (来自于表达式))
    赋值 (来自于表达式, 假)
.如果真结束

赋值 (临时数, EMS导入参数数量 (临时标识))
.如果真 (等于 (临时数, -1))
    赋值 (临时数, EMS用户定义参数 ())
.如果真结束
EMS倒置参数 ()
EMS符号 (“(”)
.判断循环首 (大于 (临时数, 0))
    EMS跳过空格 ()
    EMS表达式 ()
    .如果真 (大于 (临时数, 1))
        EMS符号 (“,”)
    .如果真结束
    赋值 (临时数, 相减 (临时数, 1))
.判断循环尾 ()
EMS符号 (“)”)

.如果真 (取反 (来自于表达式))
    EMS终止 ()
.如果真结束
EMS_InvokeByName (临时标识)
.如果真 (取反 (来自于表达式))
    EMS代码块 ()
.如果真结束


.子程序 EMS倒置参数, 空白型, , ReverseParams
.局部变量 临时头, 文本型, , , 
.局部变量 临时脚, 文本型, , , 
.局部变量 临时内容, 文本型, , , 
.局部变量 临时位置, 整数型, , , 

赋值 (临时位置, EMS_位置)
赋值 (EMS_括号打开, 0)

.如果真 (EMS是否符号 (“(”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.如果真结束
赋值 (临时内容, EMS接受参数 ())
赋值 (临时头, 取文本中间 (EMS_源, 1, 临时位置))
赋值 (临时脚, 取文本中间 (EMS_源, EMS_位置, 相加 (相减 (取文本长度 (EMS_源), EMS_位置), 1)))
赋值 (EMS_源, 相加 (临时头, 临时内容, 临时脚))
赋值 (EMS_位置, 临时位置)

.子程序 EMS参数括号, 文本型, , ParamsBrackets
.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, “”)
.判断循环首 (取反 (EMS是否符号 (“)”)))
    .如果真 (EMS是否符号 (“(”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        赋值 (临时文本, 相加 (临时文本, “(”, EMS参数括号 ()))
    .如果真结束
    赋值 (临时文本, 相加 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1)))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真 (大于 (EMS_位置, 取文本长度 (EMS_源)))
        EMS错误信息 (相加 (“已到代码尾部，但是缺少”, #左引号, “)”, #右引号, “ 或 ”, #左引号, “,”, #右引号))
        返回 (“”)
    .如果真结束
    
.判断循环尾 ()
返回 (临时文本)

.子程序 EMS接受参数, 文本型, , RevParams
.局部变量 循环容器, 整数型, , , 
.局部变量 临时参数, 文本型, , "0", 
.局部变量 临时表达式, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 重置文本, 文本型, , , 

重定义数组 (临时参数, 假, 0)
赋值 (临时表达式, “”)

.判断循环首 (取反 (EMS是否符号 (“)”)))
    .如果真 (EMS是否符号 (“(”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        赋值 (临时表达式, 相加 (临时表达式, “(”))
        赋值 (临时表达式, 相加 (临时表达式, EMS参数括号 ()))
    .如果真结束
    .如果真 (EMS是否符号 (#引号))
        赋值 (临时表达式, 相加 (临时表达式, 取文本中间 (EMS_源, EMS_位置, 1)))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
        .判断循环首 (取反 (等于 (临时文本, #引号)))
            赋值 (临时表达式, 相加 (临时表达式, 临时文本))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
            
            .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
                EMS错误信息 (相加 (“已到代码尾部，但是缺少”, #左引号, “)”, #右引号, “ 或 ”, #左引号, “,”, #右引号))
                返回 (“”)
            .如果真结束
            赋值 (临时文本, 取文本中间 (EMS_源, EMS_位置, 1))
        .判断循环尾 ()
    .如果真结束
    .如果真 (EMS是否符号 (“,”))
        .如果真 (等于 (取文本中间 (临时表达式, 1, 1), “,”))
            赋值 (临时表达式, 取文本中间 (临时表达式, 2, 取文本长度 (临时表达式)))
        .如果真结束
        赋值 (临时数, 相加 (取数组成员数 (临时参数), 1))
        重定义数组 (临时参数, 真, 临时数)
        赋值 (临时参数 [临时数], 临时表达式)
        赋值 (临时表达式, “”)
    .如果真结束
    赋值 (临时表达式, 相加 (临时表达式, 取文本中间 (EMS_源, EMS_位置, 1)))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
        EMS错误信息 (相加 (“已到代码尾部，但是缺少”, #左引号, “)”, #右引号, “ 或 ”, #左引号, “,”, #右引号))
        返回 (“”)
    .如果真结束
    
.判断循环尾 ()

.如果真 (等于 (取文本左边 (临时表达式, 1), “,”))
    赋值 (临时表达式, 取文本中间 (临时表达式, 2, 取文本长度 (临时表达式)))
.如果真结束
赋值 (临时数, 相加 (取数组成员数 (临时参数), 1))
重定义数组 (临时参数, 真, 临时数)
赋值 (临时参数 [临时数], 临时表达式)

赋值 (重置文本, “”)
.变量循环首 (临时数, 1, -1, 循环容器)
    赋值 (重置文本, 相加 (重置文本, 临时参数 [循环容器], 选择 (大于 (循环容器, 1), “,”, “”)))
.变量循环尾 ()
返回 (重置文本)

.子程序 EMS用户定义参数, 整数型, , UserDefinedParameters
.局部变量 循环容器, 整数型, , , 
.局部变量 表达式内, 逻辑型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (循环容器, EMS_位置)
赋值 (表达式内, 假)

赋值 (临时数, 1)
赋值 (临时文本, 取文本中间 (EMS_源, 循环容器, 1))
.判断循环首 (不等于 (临时文本, “)”))
    .如果真 (等于 (临时文本, #引号))
        赋值 (表达式内, 选择 (表达式内, 假, 真))
        赋值 (循环容器, 相加 (循环容器, 1))
    .如果真结束
    
    赋值 (临时文本, 取文本中间 (EMS_源, 循环容器, 1))
    .如果真 (并且 (等于 (临时文本, “,”), 等于 (表达式内, 假)))
        赋值 (临时数, 相加 (临时数, 1))
    .如果真结束
    赋值 (循环容器, 相加 (循环容器, 1))
    
    .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
        EMS错误信息 (相加 (“已到代码尾部，但是缺少”, #左引号, “)”, #右引号, “ 或者 ”, #左引号, “,”, #右引号))
        返回 (0)
    .如果真结束
    赋值 (临时文本, 取文本中间 (EMS_源, 循环容器, 1))
.判断循环尾 ()
返回 (临时数)

.程序集 EMS语法分析管理程序集, , , Syntax(行数:835,方法:25)

.子程序 EMS向导模块, 空白型, , DirectiveModule*
.如果真 (EMS是否符号 (“模块”))
    EMS跳过标识 ()
    赋值 (EMS_当前模块, EMS字符串表达式 ())
    EMS终止 ()
.如果真结束
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 EMS向导程序, 空白型, , DirectiveApplication*
.判断开始 (EMS是否标识 (“应用程序”))
    赋值 (EMS_库, 假)
    EMS跳过标识 ()
    .如果 (EMS是否标识 (“可执行文件”))
        EMS跳过标识 ()
        .判断开始 (EMS是否标识 (“图形界面”))
            EMS跳过标识 ()
            赋值 (EMS_程序类型, #EMS_连接_界面)
        .判断 (EMS是否标识 (“自定义界面”))
            EMS跳过标识 ()
            赋值 (EMS_程序类型, #EMS_连接_环境)
        .默认
            EMS错误信息 (相加 (“错误程序类型:”, EMS标识符 (), “应该是:图形界面或自定义界面”))
            返回 ()
        .判断结束
        EMS跳过空格 ()
        .如果真 (EMS是否标识 (“DLL”))
            EMS跳过标识 ()
            赋值 (EMS_是否DLL, 真)
        .如果真结束
        .如果 (EMS是否标识 (“入口”))
            EMS申请进入点 ()
        .否则
            EMS终止 ()
        .如果结束
        
    .否则
        EMS错误信息 (相加 (EMS标识符 (), “不是PE文件格式”))
        返回 ()
    .如果结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.判断 (EMS是否标识 (“支持库”))
    EMS跳过标识 ()
    赋值 (EMS_库, 真)
    EMS跳过空格 ()
    赋值 (EMS_库名, EMS字符串表达式 ())
    EMS终止 ()
.默认
    EMS错误信息 (“程序或库没有发现...”)
    返回 ()
.判断结束


.子程序 EMS入口块, 空白型, , EntryBlock**
.局部变量 临时标识, 文本型, , , 

.如果真 (或者 (取反 (等于 (EMS_入口点, “”)), 等于 (EMS_入口点, “入口”)))
    返回 ()
.如果真结束

赋值 (临时标识, EMS标识符 ())
.如果 (等于 (临时标识, “入口”))
    EMS增加符号 (“$入口”, EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
.否则
    EMS错误信息 (“没有发现进入点”)
    返回 ()
.如果结束

EMS代码块 ()
赋值 (临时标识, EMS标识符 ())
.如果 (取反 (等于 (临时标识, “结束.”)))
    EMS错误信息 (“没有发现结束代码..”)
.否则
    EMS_Push (0)
    EMS_InvokeByName (“退出”)
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS申请进入点, 空白型, , DeclareEntryPoint
EMS跳过标识 ()
赋值 (EMS_入口点, EMS标识符 ())
EMS终止 ()

.子程序 EMS向导段, 空白型, , DirectiveSection**
.局部变量 临时名, 文本型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时段类型, 字节型, , , 
.局部变量 临时特性, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (临时名, EMS字符串表达式 ())
连续赋值 (0, 临时段类型, 临时特性)
.如果真 (等于 (EMS段是否存在 (临时名), 假))
    EMS空格 ()
    赋值 (临时标识, EMS标识符 ())
    
    赋值 (临时文本, 到小写 (临时标识))
    .判断开始 (等于 (临时文本, “数据”))
        赋值 (临时段类型, #EMS_连接_数据)
        赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_初始化数据))
    .判断 (等于 (临时文本, “代码”))
        赋值 (临时段类型, #EMS_连接_代码)
        赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_代码))
    .判断 (等于 (临时文本, “导入”))
        赋值 (临时段类型, #EMS_连接_导入)
    .判断 (等于 (临时文本, “导出”))
        赋值 (临时段类型, #EMS_连接_导出)
    .判断 (等于 (临时文本, “资源”))
        赋值 (临时段类型, #EMS_连接_资源)
    .默认
        EMS错误信息 (相加 (“错误的段类型”, 临时标识))
        返回 ()
    .判断结束
     ' 本源码来自易语言资源网(www.5A5X.com)
    .判断循环首 (EMS是否符号 (“ ”))
        EMS空格 ()
        赋值 (临时标识, EMS标识符 ())
        赋值 (临时文本, 到小写 (临时标识))
        
        .判断开始 (等于 (临时文本, “代码”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_代码))
        .判断 (等于 (临时文本, “数据”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_初始化数据))
        .判断 (等于 (临时文本, “销毁数据”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_卸载数据))
        .判断 (等于 (临时文本, “可废弃”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_可废弃内存))
        .判断 (等于 (临时文本, “执行表”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_内存运行))
        .判断 (等于 (临时文本, “无缓存”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_内存缓存))
        .判断 (等于 (临时文本, “无分页”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_内存分页))
        .判断 (等于 (临时文本, “可读”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_内存读))
        .判断 (等于 (临时文本, “共享”))
            相加 (相减 (临时特性, 临时特性), #EMS_连接_特性_内存共享)
        .判断 (等于 (临时文本, “可写”))
            赋值 (临时特性, 相加 (临时特性, #EMS_连接_特性_内存写))
        .默认
            EMS错误信息 (相加 (“错误属性:”, 临时标识))
            返回 ()
        .判断结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .判断循环尾 ()
    赋值 (EMS_当前段, 临时名)
.如果真结束

EMS创建段 (临时名, 临时段类型, 临时特性)
EMS终止 ()
EMS代码块 ()

.子程序 EMS创建段, 空白型, , CreateSection
.参数 临时名, 文本型, , 
.参数 段类型, 字节型, , 
.参数 特性, 整数型, , 

.局部变量 临时数, 整数型, , , 

.如果 (EMS段是否存在 (临时名))
    赋值 (EMS_当前段, EMS_段集 [EMS段编号 (临时名)].名字)
.否则
    赋值 (临时数, 相加 (取数组成员数 (EMS_段集), 1))
    重定义数组 (EMS_段集, 真, 临时数)
    重定义数组 (EMS_段集 [临时数], 字节, 假, 0)
    赋值 (EMS_段集 [临时数], 名字, 临时名)
    赋值 (EMS_段集 [临时数], 段类型, 段类型)
    赋值 (EMS_段集 [临时数], 特性, 特性)
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS申请标签, 空白型, , DeclareLabel
.参数 临时名, 文本型, , 

EMS增加符号 (临时名, EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签)
EMS符号 (“:”)

.子程序 EMS语句跳转, 空白型, , StatementGoto
EMS_ExprJump (EMS标识符 ())
EMS终止 ()
EMS代码块 ()

.子程序 EMS申请字符串, 空白型, , DeclareString*
.参数 临时当前类型, 文本型, 可空, 
.参数 临时框架表达式, 逻辑型, 可空, 
.参数 临时是否代码块, 逻辑型, 可空, 

.局部变量 临时全名, 文本型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时空格, 整数型, , , 
.局部变量 临时值, 文本型, , , 

.如果真 (是否为空 (临时框架表达式))
    赋值 (临时框架表达式, 假)
.如果真结束
.如果真 (是否为空 (临时是否代码块))
    赋值 (临时是否代码块, 假)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时标识, EMS标识符 ())
赋值 (临时全名, 选择 (等于 (EMS_当前类型, “”), 临时标识, 相加 (EMS_当前类型, “.”, 临时标识)))
.如果 (EMS是否符号 (“=”))
    EMS符号 (“=”)
    赋值 (临时值, EMS字符串表达式 ())
.否则
    赋值 (临时值, “”)
.如果结束

.如果 (EMS是否符号 (“[”))
    EMS符号 (“[”)
    赋值 (临时空格, EMS数字表达式 ())
    EMS符号 (“]”)
.否则
    赋值 (临时空格, 256)
.如果结束

.如果真 (EMS是否符号 (“(”))
    EMS符号 (“(”)
    .如果真 (取反 (EMS是否符号 (“)”)))
        .如果真 (等于 (EMS_当前框架, “”))
            EMS错误信息 (相加 (“在程序里面请使用() 和  重置”, 临时全名, “([大小])”))
            返回 ()
        .如果真结束
        
    .如果真结束
    EMS申请数据字符串 (临时全名, 临时值, 临时空格)
    EMS倒置数组 (临时全名, EMS数字表达式 ())
    EMS符号 (“)”)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果 (等于 (临时框架表达式, 假))
    EMS终止 ()
    .如果真 (取反 (EMS符号是否存在 (临时全名)))
        EMS申请数据字符串 (临时全名, 临时值, 临时空格)
    .如果真结束
    
.否则
    .如果真 (取反 (EMS符号是否存在 (相加 (EMS_当前框架, “.”, 临时全名))))
        EMS增加符号 (相加 (EMS_当前框架, “.”, 临时全名), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部字符串, )
        EMS增加框架申请 (临时全名)
    .如果真结束
    
.如果结束
.如果真 (取反 (临时是否代码块))
    EMS代码块 ()
.如果真结束


.子程序 EMS申请变量, 空白型, , DeclareVariable**
.参数 临时当前类型, 文本型, 可空, 
.参数 临时大小, 文本型, 可空, 
.参数 临时框架表达式, 逻辑型, 可空, 
.参数 临时是否代码块, 逻辑型, 可空, 

.局部变量 临时全名, 文本型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时值, 小数型, , , 

.如果真 (是否为空 (临时当前类型))
    赋值 (临时当前类型, “”)
.如果真结束
.如果真 (是否为空 (临时大小))
    赋值 (临时大小, “”)
.如果真结束
.如果真 (是否为空 (临时框架表达式))
    赋值 (临时框架表达式, 假)
.如果真结束
.如果真 (是否为空 (临时是否代码块))
    赋值 (临时是否代码块, 假)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时标识, EMS标识符 ())
赋值 (临时全名, 选择 (等于 (EMS_当前类型, “”), 临时标识, 相加 (EMS_当前类型, “.”, 临时标识)))
.如果 (EMS是否符号 (“=”))
    EMS符号 (“=”)
    赋值 (临时值, EMS数字表达式 ())
.否则
    赋值 (临时值, 0)
.如果结束

.如果真 (EMS是否符号 (“[”))
    EMS符号 (“[”)
    .如果真 (并且 (取反 (EMS是否符号 (“]”)), 等于 (EMS_当前框架, “”)))
        EMS错误信息 (相加 (“在程序里面请使用() 和  重置”, 临时全名, “([大小])”))
        返回 ()
    .如果真结束
    .如果 (EMS_无符号申请)
        .判断开始 (等于 (临时大小, “字节”))
            EMS申请数据无符号字节 (临时全名, 到字节 (临时值))
        .判断 (等于 (临时大小, “短整数”))
            EMS申请数据无符号单字 (临时全名, 到短整数 (临时值))
        .默认
            EMS错误信息 (相加 (“错误的无符号类型:”, 临时全名))
            返回 ()
        .判断结束
        
    .否则
        .判断开始 (等于 (临时大小, “字节”))
            EMS申请数据字节 (临时全名, 到字节 (临时值))
        .判断 (等于 (临时大小, “短整数”))
            EMS申请数据单字 (临时全名, 到短整数 (临时值))
        .判断 (等于 (临时大小, “整数”))
            EMS申请数据双字 (临时全名, 到整数 (临时值))
        .判断 (等于 (临时大小, “小数”))
            EMS申请数据小数 (临时全名, 临时值)
        .默认
            EMS错误信息 (相加 (“错误的类型:”, 临时全名))
            返回 ()
        .判断结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    EMS倒置数组 (临时全名, EMS数字表达式 ())
    EMS符号 (“]”)
.如果真结束

.如果 (等于 (临时框架表达式, 假))
    .如果真 (取反 (EMS符号是否存在 (临时全名)))
        .如果 (EMS_无符号申请)
            .判断开始 (等于 (临时大小, “字节”))
                EMS申请数据无符号字节 (临时全名, 到字节 (临时值))
            .判断 (等于 (临时大小, “短整数”))
                EMS申请数据无符号单字 (临时全名, 到短整数 (临时值))
            .默认
                EMS错误信息 (相加 (“错误的无符号类型:”, 临时全名))
                返回 ()
            .判断结束
            
        .否则
            .判断开始 (等于 (临时大小, “字节”))
                EMS申请数据字节 (临时全名, 到字节 (临时值))
            .判断 (等于 (临时大小, “短整数”))
                EMS申请数据单字 (临时全名, 到短整数 (临时值))
            .判断 (等于 (临时大小, “整数”))
                EMS申请数据双字 (临时全名, 到整数 (临时值))
            .判断 (等于 (临时大小, “小数”))
                EMS申请数据小数 (临时全名, 临时值)
            .默认
                EMS错误信息 (相加 (“错误的类型:”, 临时全名))
                返回 ()
            .判断结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .如果结束
        
    .如果真结束
    .如果真 (EMS是否符号 (“,”))
        EMS符号 (“,”)
        EMS申请变量 (EMS_当前类型, 临时大小, 临时框架表达式, )
        返回 ()
    .如果真结束
    EMS终止 ()
.否则
    .如果真 (取反 (EMS符号是否存在 (相加 (EMS_当前框架, “.”, 临时全名))))
        .如果 (等于 (临时大小, “小数”))
            EMS增加符号 (相加 (EMS_当前框架, “.”, 临时全名), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部小数, )
        .否则
            EMS增加符号 (相加 (EMS_当前框架, “.”, 临时全名), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部双字, )
        .如果结束
        EMS增加框架申请 (临时标识)
    .如果真结束
    
.如果结束

.如果真 (取反 (临时是否代码块))
    EMS代码块 ()
.如果真结束


.子程序 EMS申请局部, 空白型, , DeclareLocal**
.局部变量 临时标识, 文本型, , , 
.局部变量 临时标识2, 文本型, , , 
.局部变量 临时值, 文本型, , , 
.局部变量 临时空格, 整数型, , , 
.局部变量 数组值, 整数型, , , 

赋值 (临时标识, EMS标识符 ())
赋值 (临时标识2, EMS标识符 ())
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果真 (等于 (EMS_当前框架, “”))
    EMS错误信息 (相加 (“不能申请局部变量:”, 临时标识, “超出了范围”))
    返回 ()
.如果真结束

.判断开始 (或者 (等于 (临时标识, “字节”), 等于 (临时标识, “短整数”), 等于 (临时标识, “逻辑”), 等于 (临时标识, “整数”)))
    EMS增加符号 (相加 (EMS_当前框架, “.”, 临时标识2), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部双字, )
    赋值 (EMS_参数数量, 相加 (EMS_参数数量, 1))
.判断 (等于 (临时标识, “小数”))
    EMS增加符号 (相加 (EMS_当前框架, “.”, 临时标识2), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部小数, )
    赋值 (EMS_参数数量, 相加 (EMS_参数数量, 1))
.判断 (等于 (临时标识, “文本”))
    .如果 (EMS是否符号 (“[”))
        EMS符号 (“[”)
        赋值 (临时空格, EMS数字表达式 ())
        EMS符号 (“]”)
    .否则
        赋值 (临时空格, 256)
    .如果结束
    EMS增加符号 (相加 (EMS_当前框架, “.”, 临时标识2), 相加 (8, 相乘 (EMS_参数数量, 4)), 0, #EMS_符号_局部字符串, )
    赋值 (EMS_唯一ID_e, 相加 (EMS_唯一ID_e, 1))
    EMS申请数据字符串 (相加 (“局部.文本”, 到文本 (EMS_唯一ID_e)), “”, 临时空格)
    EMS_MovEAXAddress (相加 (“局部.文本”, 到文本 (EMS_唯一ID_e)))
    EMS增加代码单字 (34185)
    EMS增加代码双字 (相加 (8, 相乘 (EMS_参数数量, 4)))
    赋值 (EMS_参数数量, 相加 (EMS_参数数量, 1))
.默认
    EMS错误信息 (“不能识别的参数类型....”)
    返回 ()
.判断结束
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS终止 ()
EMS代码块 ()

.子程序 EMS申请常量, 空白型, , DeclareConstant
.局部变量 临时名, 文本型, , , 

赋值 (临时名, EMS标识符 ())
EMS符号 (“=”)
EMS跳过空格 ()
.判断开始 (EMS是否字符串表达式 ())
    EMS增加常量 (临时名, EMS字符串表达式 ())
.判断 (EMS是否数字表达式 ())
    EMS增加常量 (临时名, 到文本 (EMS数字表达式 ()))
.判断 (EMS是否常量表达式 ())
    EMS增加常量 (临时名, 到文本 (EMS常量表达式 ()))
.默认
    EMS错误信息 (相加 (“不能识别的常量数据:”, 临时名))
    返回 ()
.判断结束
EMS终止 ()
EMS代码块 ()

.子程序 EMS申请类型, 空白型, , DeclareType**
.局部变量 临时名, 文本型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时资源, 文本型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_类型集), 1))
重定义数组 (EMS_类型集, 真, 临时数)
赋值 (EMS_类型集 [临时数], 名称, EMS标识符 ())
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS符号 (“{”)
.判断循环首 (取反 (EMS是否符号 (“}”)))
    EMS跳过空格 ()
    .如果 (或者 (EMS是否标识 (“文本”), EMS是否标识 (“整数”), EMS是否标识 (“短整数”), EMS是否标识 (“字节”), EMS是否标识 (“逻辑”), EMS是否标识 (“小数”)))
        赋值 (临时资源, 相加 (临时资源, EMS标识符 (), “ ”, EMS标识符 ()))
        .判断开始 (EMS是否符号 (“[”))
            EMS符号 (“[”)
            赋值 (临时资源, 相加 (临时资源, “[”))
            赋值 (临时资源, 相加 (临时资源, 到文本 (EMS数字表达式 ()), “]”))
            EMS符号 (“]”)
        .判断 (EMS是否符号 (“(”))
            EMS符号 (“(”)
            赋值 (临时资源, 相加 (临时资源, “(”))
            EMS符号 (“)”)
            赋值 (临时资源, 相加 (临时资源, “)”))
        .默认
            
        .判断结束
        赋值 (临时资源, 相加 (临时资源, “;”))
        EMS终止 ()
        EMS跳过空格 ()
    .否则
        赋值 (临时标识, EMS标识符 ())
        .如果 (EMS是否类型 (临时标识))
            赋值 (临时资源, 相加 (临时资源, 临时标识, “ ”, EMS标识符 ()))
            赋值 (临时资源, 相加 (临时资源, “;”))
            EMS终止 ()
            EMS跳过空格 ()
        .否则
            EMS符号 (“}”)
            返回 ()
        .如果结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    
.判断循环尾 ()
赋值 (EMS_类型集 [临时数], 资源, 临时资源)
EMS符号 (“}”)
EMS代码块 ()

.子程序 EMS语句包含, 空白型, , StatementInclude
.局部变量 临时文件名, 文本型, , , 

赋值 (临时文件名, EMS字符串表达式 ())
赋值 (EMS_位置, 相减 (EMS_位置, 取文本长度 (临时文件名), 2))
.如果 (等于 (取文本右边 (临时文件名, 4), “.lib”))
    EMS导入库 ()
.否则
    EMS包含文件 ()
.如果结束


.子程序 EMS包含文件, 空白型, , IncludeFile*
.局部变量 循环容器, 整数型, , , 
.局部变量 文件数组, 文本型, , "0", 
.局部变量 临时内容, 文本型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 临时文件号, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

重定义数组 (文件数组, 假, 1)
赋值 (文件数组 [1], EMS字符串表达式 ())
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时数, 取数组成员数 (文件数组))

.判断循环首 (EMS是否符号 (“,”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    EMS跳过空格 ()
    
    赋值 (临时数, 相加 (取数组成员数 (文件数组), 1))
    重定义数组 (文件数组, 真, 临时数)
    赋值 (文件数组 [临时数], EMS字符串表达式 ())
.判断循环尾 ()
EMS终止 ()
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时文本, 相加 (EMS_程序运行路径, “\include\”))
.变量循环首 (取数组成员数 (文件数组), 1, -1, 循环容器)
    赋值 (临时文本, 相加 (临时文本, 文件数组 [循环容器]))
    .如果真 (等于 (文件是否存在 (临时文本), 假))
        EMS错误信息 (相加 (“文件： ”, 文件数组 [循环容器], “ 不存在请检查..”))
        返回 ()
    .如果真结束
    赋值 (临时文件号, 打开文件 (临时文本, #读入, ))
    赋值 (临时内容, 读入文本 (临时文件号, ))
    EMS插入资源 (临时内容)
    赋值 (EMS_包含文件长度, 相加 (EMS_包含文件长度, 取文本长度 (临时内容)))
    赋值 (临时文本, 相加 (EMS_程序运行路径, “\include\”))
.变量循环尾 ()
EMS代码块 ()

.子程序 EMS语句如果, 空白型, , StatementIf**
.局部变量 临时编号, 整数型, , , 
.局部变量 临时数量, 整数型, , , 

赋值 (临时编号, 0)
赋值 (临时编号, 相加 (临时编号, EMS_唯一ID_l))
赋值 (EMS_唯一ID_l, 相加 (EMS_唯一ID_l, 1))

EMS符号 (“(”)
EMS表达式 (“$插入.对比.一”)
EMS表达式 (“$插入.对比.二”)
.如果 (EMS是否字符串表达式 ())
    EMS_ExprCompareS (“$插入.对比.一”, “$插入.对比.二”)
.否则
    EMS_ExprCompare (“$插入.对比.一”, “$插入.对比.二”)
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS选择关系 (临时编号, “$否则”)
EMS符号 (“)”)
EMS符号 (“{”)
EMS增加符号 (相加 (“$然后”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()
EMS_ExprJump (相加 (“$出”, 到文本 (临时编号)))
EMS符号 (“}”)
EMS跳过空格 ()
.如果 (EMS是否标识 (“否则”))
    EMS跳过标识 ()
    EMS符号 (“{”)
    EMS增加符号 (相加 (“$否则”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
    EMS代码块 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS符号 (“}”)
.否则
    EMS增加符号 (相加 (“$否则”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
.如果结束
EMS增加符号 (相加 (“$出”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()

.子程序 EMS语句条件循环, 空白型, , StatementWhile**
.局部变量 临时编号, 整数型, , , 

赋值 (临时编号, 0)
赋值 (临时编号, 相加 (临时编号, EMS_唯一ID_l))
赋值 (EMS_唯一ID_l, 相加 (EMS_唯一ID_l, 1))

EMS符号 (“(”)
EMS增加符号 (相加 (“$始判断循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS表达式 (“$插入.对比.一”)
EMS表达式 (“$插入.对比.二”)

.如果 (EMS_是否字符串比较)
    EMS_ExprCompareS (“$插入.对比.一”, “$插入.对比.二”)
.否则
    EMS_ExprCompare (“$插入.对比.一”, “$插入.对比.二”)
.如果结束

EMS选择关系 (临时编号, “$尾判断循环”)
EMS符号 (“)”)
EMS符号 (“{”)
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS增加符号 (相加 (“$判断循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()
EMS_ExprJump (相加 (“$始判断循环”, 到文本 (临时编号)))
EMS符号 (“}”)
EMS跳过空格 ()

EMS增加符号 (相加 (“$尾判断循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()

.子程序 EMS语句计次循环, 空白型, , StatementFor**
.局部变量 临时编号, 整数型, , , 
.局部变量 临时标识, 文本型, , , 
.局部变量 临时表达式, 文本型, , , 

赋值 (临时表达式, “”)
赋值 (临时编号, 0)
赋值 (临时编号, 相加 (临时编号, EMS_唯一ID_l))
赋值 (EMS_唯一ID_l, 相加 (EMS_唯一ID_l, 1))
 ' 本源码来自易语言资源网(www.5A5X.com)
EMS符号 (“(”)
赋值 (临时标识, EMS标识符 ())
EMS跳过空格 ()
.如果 (EMS是否符号 (“[”))
    EMS设置数组 (临时标识)
.否则
    .判断开始 (EMS是否变量 (临时标识))
        EMS计算变量 (临时标识, 真)
    .判断 (EMS是否局部变量 (临时标识))
        EMS计算局部变量 (临时标识, 真)
    .默认
        
    .判断结束
    
.如果结束

赋值 (EMS_是否字符串比较, 假)
EMS增加符号 (相加 (“$始计次循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS表达式 (“$插入.对比.一”)
EMS表达式 (“$插入.对比.二”)
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果 (EMS_是否字符串比较)
    EMS_ExprCompareS (“$插入.对比.一”, “$插入.对比.二”)
.否则
    EMS_ExprCompare (“$插入.对比.一”, “$插入.对比.二”)
.如果结束

EMS选择关系 (临时编号, “$尾计次循环”)
EMS终止 ()

.判断循环首 (取反 (EMS是否符号 (“)”)))
    赋值 (临时表达式, 相加 (临时表达式, 取文本中间 (EMS_源, EMS_位置, 1)))
    .如果真 (EMS是否符号 (“(”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        .判断循环首 (取反 (EMS是否符号 (“)”)))
            赋值 (临时表达式, 相加 (临时表达式, 取文本中间 (EMS_源, EMS_位置, 1)))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
        .判断循环尾 ()
        赋值 (临时表达式, 相加 (临时表达式, 取文本中间 (EMS_源, EMS_位置, 1)))
    .如果真结束
    .如果真 (大于或等于 (EMS_位置, 取文本长度 (EMS_源)))
        EMS错误信息 (“已经到达代码尾部,但是没有发现结束字符”)
        返回 ()
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
.判断循环尾 ()
EMS符号 (“)”)
EMS符号 (“{”)
EMS增加符号 (相加 (“$计次循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()
EMS插入资源 (相加 (临时表达式, “;”))
EMS代码块 ()
EMS_ExprJump (相加 (“$始计次循环”, 到文本 (临时编号)))
EMS符号 (“}”)
EMS跳过空格 ()
EMS增加符号 (相加 (“$尾计次循环”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
EMS代码块 ()

.子程序 EMS语句循环尾, 空白型, , StatementLoop**
.局部变量 临时标识, 文本型, , , 
.局部变量 模式, 文本型, , , 
.局部变量 临时编号, 整数型, , , 

赋值 (临时编号, 0)
赋值 (临时编号, 相加 (临时编号, EMS_唯一ID_l))
赋值 (EMS_唯一ID_l, 相加 (EMS_唯一ID_l, 1))
赋值 (模式, EMS标识符 ())
 ' 本源码来自易语言资源网(www.5A5X.com)
.判断开始 (等于 (模式, “尾循环”))
    EMS符号 (“(”)
    EMS表达式 (“$插入.对比.一”)
    EMS表达式 (“$插入.对比.二”)
    EMS符号 (“)”)
    
    EMS增加符号 (相加 (“$循环判断”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
    EMS符号 (“{”)
    EMS代码块 ()
    EMS符号 (“}”)
    
    EMS_ExprCompare (“$插入.对比.一”, “$插入.对比.二”)
    EMS选择关系 (临时编号, “$循环判断”)
    EMS增加符号 (相加 (“$循环出”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
.判断 (或者 (等于 (模式, “下”), 等于 (模式, “”)))
    EMS符号 (“(”)
    EMS表达式 ()
    EMS_PopECX ()
    .如果真 (EMS是否符号 (“,”))
        EMS跳 ()
        赋值 (临时标识, EMS标识符 ())
    .如果真结束
    EMS符号 (“)”)
    EMS增加符号 (相加 (“$循环判断”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签)
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS符号 (“{”)
    EMS代码块 ()
    EMS符号 (“}”)
    EMS_DecECX ()
    .如果真 (不等于 (临时标识, “”))
        EMS增加代码单字 (3465) ' mov [Variable],ecx
        EMS增加代码编码 (临时标识)
    .如果真结束
    
    EMS增加代码单字 (63875) ' cmp ecx,0
    EMS增加代码字节 (0)
    EMS_ExprJA (相加 (“$循环判断”, 到文本 (临时编号)))
.判断 (等于 (模式, “上”))
    EMS增加代码字节 (185) ' mov ecx,0
    EMS增加代码双字 (0)
    
    EMS符号 (“(”)
    EMS表达式 (“$插入.计数”)
    .如果真 (EMS是否符号 (“,”))
        EMS跳 ()
        赋值 (临时标识, EMS标识符 ())
    .如果真结束
    EMS符号 (“)”)
    EMS增加符号 (相加 (“$循环判断”, 到文本 (临时编号)), EMS偏移 (“.代码”), #EMS_连接_代码, #EMS_符号_标签, )
     ' 本源码来自易语言资源网(www.5A5X.com)
    EMS符号 (“{”)
    EMS代码块 ()
    EMS符号 (“}”)
    EMS_IncECX ()
    
    .如果真 (不等于 (临时标识, “”))
        EMS增加代码单字 (3465) ' mov [Variable],ecx
        EMS增加代码编码 (临时标识)
    .如果真结束
    
    EMS增加代码单字 (3387) ' cmp ecx,[variable]
    EMS增加代码编码 (“$插入.计数”)
    EMS_ExprJL (相加 (“$循环判断”, 到文本 (临时编号)))
.默认
    EMS错误信息 (“错误的循环格式,没有发现:下 , 上”)
    返回 ()
.判断结束
EMS代码块 ()

.子程序 EMS语句向导, 空白型, , StatementDirect**
.局部变量 临时标识, 文本型, , , 
.局部变量 地址标识, 文本型, , , 
.局部变量 临时变量, 文本型, , , 

EMS符号 (“[”)
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (临时标识, EMS标识符 ())
.循环判断首 ()
    .判断开始 (等于 (临时标识, “小数”))
        EMS增加代码小数 (EMS数字表达式 ())
    .判断 (等于 (临时标识, “整数”))
        EMS增加代码双字 (到整数 (EMS数字表达式 ()))
    .判断 (等于 (临时标识, “短整数”))
        EMS增加代码单字 (EMS双字低字节 (EMS数字表达式 ()))
    .判断 (等于 (临时标识, “字节”))
        EMS增加代码字节 (EMS单字低字节 (EMS双字低字节 (EMS数字表达式 ())))
    .判断 (等于 (临时标识, “地址”))
        赋值 (地址标识, EMS标识符 ())
        EMS增加代码编码 (地址标识)
    .默认
        EMS错误信息 (“输入类型必须为:小数, 整数, 短整数, 字节, 地址”)
        返回 ()
    .判断结束
    EMS跳过空格 ()
    .如果真 (EMS是否符号 (“,”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.循环判断尾 (EMS是否符号 (“,”))
EMS符号 (“]”)
EMS终止 ()
EMS代码块 ()

.子程序 EMS语句字节数, 空白型, , StatementBytes*
.局部变量 临时标识, 文本型, , , 
.局部变量 字节数, 整数型, , , 

赋值 (临时标识, EMS标识符 ())
EMS符号 (“[”)
.循环判断首 ()
    EMS增加数据字节 (到字节 (EMS数字表达式 ()))
    .如果真 (EMS是否符号 (“@”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
        EMS增加符号 (临时标识, EMS偏移 (“.数据”), #EMS_连接_数据, #EMS_符号_双字, )
    .如果真结束
    
    .如果真 (EMS是否符号 (“,”))
        赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真结束
    
.循环判断尾 (EMS是否符号 (“,”))
EMS符号 (“]”)
EMS终止 ()
EMS代码块 ()

.子程序 EMS计算变量, 空白型, , EvalVariable*
.参数 临时名, 文本型, , 
.参数 是否设值, 逻辑型, 可空, 

.如果真 (是否为空 (是否设值))
    赋值 (是否设值, 假)
.如果真结束
EMS跳过空格 ()
.如果真 (EMS是否符号 (“[”))
    EMS设置数组 (临时名)
    EMS终止 ()
    EMS代码块 ()
    返回 ()
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
.判断开始 (EMS是否符号 (“=”))
    EMS符号 (“=”)
    EMS表达式 (临时名)
.判断 (EMS是否符号 (“+”))
    EMS符号 (“+”)
    .如果 (EMS是否符号 (“+”))
        EMS符号 (“+”)
        EMS增加代码单字 (1535) ' inc [Variable]
        EMS增加代码编码 (临时名)
    .否则
        EMS增加代码单字 (1409) ' add [Name],Value
        EMS增加代码编码 (临时名)
        EMS增加代码双字 (EMS数字表达式 ())
    .如果结束
    
.判断 (EMS是否符号 (“-”))
    EMS符号 (“-”)
    .如果 (EMS是否符号 (“-”))
        EMS符号 (“-”)
        EMS增加代码单字 (3583) ' dec [Variable]
        EMS增加代码编码 (临时名)
    .否则
        EMS增加代码单字 (11649) ' sub [Name],Value
        EMS增加代码编码 (临时名)
        EMS增加代码双字 (EMS数字表达式 ())
    .如果结束
    
.默认
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断结束
EMS终止 ()
.如果真 (取反 (是否设值))
    EMS代码块 ()
.如果真结束


.子程序 EMS计算局部变量, 空白型, , EvalLocalVariable*
.参数 临时名, 文本型, , 
.参数 是否设值, 逻辑型, 可空, 

.局部变量 临时标签, 文本型, , , 

.如果真 (是否为空 (是否设值))
    赋值 (是否设值, 假)
.如果真结束
EMS跳过空格 ()

.判断开始 (EMS是否符号 (“=”))
    EMS符号 (“=”)
    EMS表达式 ()
    EMS_PopEAX ()
.判断 (EMS是否符号 (“+”))
    EMS符号 (“+”)
    EMS增加代码单字 (34187) ' mov eax, [ebp+number]
    EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时名)))
    EMS增加代码字节 (5)
    .如果 (EMS是否符号 (“+”))
        EMS符号 (“+”)
        EMS增加代码双字 (1)
    .否则
        EMS增加代码双字 (EMS数字表达式 ())
    .如果结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断 (EMS是否符号 (“-”))
    EMS符号 (“-”)
    EMS增加代码单字 (34187) ' mov eax, [ebp+number]
    EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时名)))
    EMS增加代码字节 (45)
    .如果 (EMS是否符号 (“-”))
        EMS符号 (“-”)
        EMS增加代码双字 (1)
    .否则
        EMS增加代码双字 (EMS数字表达式 ())
    .如果结束
    
.默认
    
.判断结束
EMS增加代码单字 (34185) ' mov [ebp+number], eax
EMS增加代码双字 (EMS获取符号偏移 (相加 (EMS_当前框架, “.”, 临时名)))
EMS终止 ()
.如果真 (取反 (是否设值))
    EMS代码块 ()
.如果真结束


.子程序 EMS语句列举, 空白型, , StatementWith*
赋值 (EMS_列举标识, EMS标识符 ())
EMS符号 (“{”)
EMS代码块 ()
EMS符号 (“}”)
赋值 (EMS_列举标识, “”)
EMS代码块 ()
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EMS申请导入, 空白型, , DeclareImport**
.局部变量 临时标识, 文本型, , , 
.局部变量 临时标识2, 文本型, , , 
.局部变量 函数名, 文本型, , , 
.局部变量 函数别名, 文本型, , , 
.局部变量 临时库, 文本型, , , 
.局部变量 参数数, 整数型, , , 

赋值 (函数别名, “”)
赋值 (临时标识, EMS标识符 ())
赋值 (临时标识2, EMS标识符 ())

.如果 (等于 (临时标识2, “别名”))
    赋值 (函数别名, 临时标识)
    赋值 (函数名, EMS标识符 ())
    赋值 (临时标识2, EMS标识符 ())
.否则
    赋值 (函数别名, 临时标识)
    .判断开始 (等于 (临时标识2, “ascii”))
        赋值 (临时标识2, EMS标识符 ())
        赋值 (函数名, 相加 (临时标识, “A”))
    .判断 (等于 (临时标识2, “unicode”))
        赋值 (临时标识2, EMS标识符 ())
        赋值 (函数名, 相加 (临时标识, “W”))
    .默认
        赋值 (函数名, 临时标识)
    .判断结束
    
.如果结束

.如果 (或者 (等于 (临时标识2, “lib”), 等于 (临时标识2, “支持库”)))
    赋值 (临时库, EMS字符串表达式 ())
.否则
    EMS错误信息 (相加 (临时标识, “没有发现..”))
    返回 ()
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果 (EMS是否符号 (“,”))
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    赋值 (参数数, EMS数字表达式 ())
.否则
    赋值 (参数数, 0)
.如果结束

EMS终止 ()

EMS增加导入 (函数名, 临时库, 参数数, 函数别名, )

EMS代码块 ()

.程序集 EMS时间管理程序集, , , envGeneral(行数:8,方法:2)

.子程序 EMS开始计算时间, 空白型, , StartCounter
赋值 (EMS_程序时间, API_EMS_获取当前时间 ())

.子程序 EMS结束时间, 小数型, , EndCounter
返回 (相除 (相减 (API_EMS_获取当前时间 (), EMS_程序时间), 1000))

.程序集 EMS内存管理程序集, , , comMemory(行数:151,方法:8)

.子程序 EMS倒置数组, 空白型, , ReserveArray*
.参数 临时标识, 文本型, , 
.参数 临时大小, 整数型, , 

EMS申请数据双字 (相加 (临时标识, “.指针到数组”), 0)
EMS申请数据双字 (相加 (临时标识, “.堆句柄”), 0)
EMS申请数据双字 (相加 (临时标识, “.上标”), 0)
EMS申请数据双字 (相加 (临时标识, “.下标”), 0)
EMS申请数据双字 (相加 (临时标识, “.数组”), 0)

.如果真 (不等于 (EMS_当前框架, “”))
    EMS_Push (0)
    EMS_Push (0)
    EMS_Push (0)
    EMS_InvokeByName (“创建堆”) ' 创建数组头
    EMS_AssignEAX (相加 (临时标识, “.堆句柄”)) ' 保存头部句柄
    EMS_Push (相乘 (EMS获取符号大小 (临时标识), 临时大小))
    EMS_Push (8)
    EMS_PushContent (相加 (临时标识, “.堆句柄”))
    EMS_InvokeByName (“分配堆”)
    EMS_AssignEAX (相加 (临时标识, “.指针到数组”))
    
    EMS_Push (0)
    EMS_PopEAX ()
    EMS_AssignEAX (相加 (临时标识, “.下标”))
    EMS_Push (临时大小)
    EMS_PopEAX ()
    EMS_AssignEAX (相加 (临时标识, “.上标”))
.如果真结束


.子程序 EMS获取数组, 空白型, , GetArray*
.参数 临时标识, 文本型, , 

EMS表达式 (相加 (临时标识, “.数组”))
EMS_Push (EMS获取符号大小 (临时标识))
EMS_PushContent (相加 (临时标识, “.数组”))
EMS_Push (EMS获取符号大小 (临时标识))
EMS_ExprMul ()
EMS_PushEAX ()
EMS_PushContent (相加 (临时标识, “.指针到数组”))
EMS_ExprAdd ()
EMS_PushEAX ()
EMS_PushAddress (临时标识)

EMS_InvokeByName (“内存拷贝”)
EMS_PushContent (临时标识)

.子程序 EMS设置数组, 空白型, , SetArray*
.参数 临时名, 文本型, , 

EMS符号 (“[”)
EMS表达式 (“$插入.数组”)
EMS符号 (“]”)
EMS符号 (“=”)
EMS表达式 (临时名)

EMS_Push (EMS获取符号大小 (临时名))
EMS_PushAddress (临时名)
EMS_PushContent (“$插入.数组”)
EMS_Push (EMS获取符号大小 (临时名))
EMS_ExprMul ()
EMS_PushEAX ()
EMS_PushContent (相加 (临时名, “.指针到数组”))
EMS_ExprAdd ()
EMS_PushEAX ()

EMS_InvokeByName (“内存拷贝”)

.子程序 EMS语句保护, 空白型, , StatementPreserve*
.局部变量 临时标识, 文本型, , , 

赋值 (临时标识, EMS标识符 ())
EMS符号 (“(”)
EMS表达式 (“$插入.数组”)
EMS符号 (“)”)
EMS终止 ()

EMS_PushContent (“$插入.数组”)
EMS_Push (1)
EMS_PushContent (相加 (临时标识, “.堆句柄”))
EMS_InvokeByName (“分配堆”)

EMS_PushContent (“$插入.数组”)
EMS_PopEAX ()
EMS_AssignEAX (相加 (临时标识, “.上标”))

EMS代码块 ()

.子程序 EMS语句倒置, 空白型, , StatementReserve*
.局部变量 临时标识, 文本型, , , 

赋值 (临时标识, EMS标识符 ())
EMS符号 (“[”)
EMS表达式 (“$插入.数组”)
EMS符号 (“]”)
EMS终止 ()

EMS_Push (0)
EMS_Push (0)
EMS_Push (0)
EMS_InvokeByName (“创建堆”)
EMS_AssignEAX (相加 (临时标识, “.堆句柄”))

EMS_PushContent (“$插入.数组”)
EMS_Push (EMS获取符号大小 (临时标识))
EMS_ExprMul ()
EMS_PushEAX ()
EMS_Push (8)
EMS_PushContent (相加 (临时标识, “.堆句柄”))
EMS_InvokeByName (“分配堆”)
EMS_AssignEAX (相加 (临时标识, “.指针到数组”))

EMS_PushContent (“$插入.数组”)
EMS_PopEAX ()
EMS_AssignEAX (相加 (临时标识, “.上标”))

EMS代码块 ()

.子程序 EMS语句销毁, 空白型, , StatementDestroy*
.局部变量 临时标识, 文本型, , , 

赋值 (临时标识, EMS标识符 ())
EMS终止 ()
.如果 (EMS符号是否存在 (相加 (临时标识, “.堆句柄”)))
    EMS_PushContent (相加 (临时标识, “.堆句柄”))
    EMS_InvokeByName (“销毁堆”)
    EMS_Push (0)
    EMS_PopEAX ()
    EMS_AssignEAX (相加 (临时标识, “.上标”))
.否则
    EMS错误信息 (相加 (“不能删除数据”, 临时标识))
    返回 ()
.如果结束
EMS代码块 ()

.子程序 EMS语句上标, 空白型, , StatementUBound*
.局部变量 临时标识, 文本型, , , 

EMS符号 (“(”)
赋值 (临时标识, EMS标识符 ())
EMS符号 (“)”)
EMS_PushContent (相加 (临时标识, “.上标”))

.子程序 EMS语句下标, 空白型, , StatementLBound*
.局部变量 临时标识, 文本型, , , 

EMS符号 (“(”)
赋值 (临时标识, EMS标识符 ())
EMS符号 (“)”)
EMS_PushContent (相加 (临时标识, “.下标”))

.程序集 EMS原赋值管理程序集, , , comProtos(行数:34,方法:1)

.子程序 EMS原值赋值类型, 空白型, , AssignProtoTypes**
.局部变量 临时位置, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时位置, EMS_位置)

赋值 (临时数, 取文本长度 (EMS_源))
.判断循环首 (小于或等于 (EMS_位置, 临时数))
    .判断开始 (等于 (取文本中间 (EMS_源, EMS_位置, 6), “子程序”))
        EMS跳过标识 ()
        EMS跳过空格 ()
        EMS申请框架 (假, 假, 真, )
    .判断 (等于 (取文本中间 (EMS_源, EMS_位置, 4), “属性”))
        EMS跳过标识 ()
        EMS跳过空格 ()
        EMS申请框架 (假, 假, 真, 真)
    .判断 (等于 (取文本中间 (EMS_源, EMS_位置, 4), “导出”))
        EMS跳过标识 ()
        EMS跳过空格 ()
        EMS申请框架 (真, 假, 真, )
    .判断 (等于 (取文本中间 (EMS_源, EMS_位置, 2), “//”))
        .判断循环首 (不等于 (取文本中间 (EMS_源, EMS_位置, 2), #换行符))
            赋值 (EMS_位置, 相加 (EMS_位置, 1))
        .判断循环尾 ()
    .默认
        
    .判断结束
    赋值 (EMS_位置, 相加 (EMS_位置, 1))
    .如果真 (大于 (EMS_位置, 临时数))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (EMS_位置, 临时位置)

.程序集 EMS虚拟文件管理程序集, , , (行数:151)

.子程序 EMS初始化虚拟文件, 空白型, , 
重定义数组 (EMS_虚拟文件集, 假, 0)

.子程序 EMS创建虚拟文件, 空白型, , 
.参数 临时名, 文本型, , 
.参数 临时扩展, 整数型, , 
.参数 临时内容, 文本型, , 

.局部变量 临时数, 整数型, , , 

赋值 (临时数, 相加 (取数组成员数 (EMS_虚拟文件集), 1))
重定义数组 (EMS_虚拟文件集, 真, 临时数)
赋值 (EMS_虚拟文件集 [临时数], 名称, 临时名)
赋值 (EMS_虚拟文件集 [临时数], 扩展, 临时扩展)
赋值 (EMS_虚拟文件集 [临时数], 内容, 临时内容)
赋值 (EMS_虚拟文件集 [临时数], 状态, 真)

.子程序 EMS虚拟文件是否存在, 逻辑型, , 
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS改变虚拟文件名, 逻辑型, , 
.参数 源名, 文本型, , 
.参数 目的名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.如果真 (等于 (目的名, 源名))
    .如果真 (EMS虚拟文件是否存在 (目的名))
        信息框 (相加 (目的名, “文件名已经被使用”), 0, )
        返回 (假)
    .如果真结束
    
.如果真结束

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 源名))
        赋值 (EMS_虚拟文件集 [循环容器], 名称, 目的名)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 EMS获取虚拟文件扩展, 整数型, , 
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        返回 (EMS_虚拟文件集 [循环容器], 扩展)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 EMS获取虚拟文件内容, 文本型, , 
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        返回 (EMS_虚拟文件集 [循环容器], 内容)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)

.子程序 EMS弃用虚拟文件, 空白型, , (设置文件的使用状态为假,不可用)
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        赋值 (EMS_虚拟文件集 [循环容器], 状态, 假)
        返回 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS启用虚拟文件, 空白型, , (设置文件的使用状态为真,可用)
.参数 临时名, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        赋值 (EMS_虚拟文件集 [循环容器], 状态, 真)
        返回 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS设置虚拟文件内容, 空白型, , 
.参数 临时名, 文本型, , 
.参数 临时内容, 文本型, , 

.局部变量 循环容器, 整数型, , , 

.计次循环首 (取数组成员数 (EMS_虚拟文件集), 循环容器)
    .如果真 (等于 (EMS_虚拟文件集 [循环容器], 名称, 临时名))
        赋值 (EMS_虚拟文件集 [循环容器], 内容, 临时内容)
        返回 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 EMS打开虚拟文件, 逻辑型, , 
.参数 文件路径, 文本型, , 

.局部变量 临时数, 整数型, , , 
.局部变量 临时文件号, 整数型, , , 
.局部变量 循环容器, 整数型, , , 
.局部变量 数量, 整数型, , , 
.局部变量 打开文件, 文本型, , , 

赋值 (临时文件号, 打开文件 (文件路径, #读入, ))
.如果真 (大于 (临时文件号, 0))
    读入数据 (临时文件号, 临时数)
    
    赋值 (数量, 取数组成员数 (EMS_虚拟文件集))
    重定义数组 (EMS_虚拟文件集, 假, 相加 (数量, 临时数))
    .计次循环首 (临时数, 循环容器)
        读入数据 (临时文件号, EMS_虚拟文件集 [相加 (数量, 循环容器)].名称, EMS_虚拟文件集 [相加 (数量, 循环容器)].扩展, EMS_虚拟文件集 [相加 (数量, 循环容器)].内容, EMS_虚拟文件集 [相加 (数量, 循环容器)].状态)
    .计次循环尾 ()
    关闭文件 (临时文件号)
    返回 (真)
.如果真结束
返回 (假)

.子程序 EMS保存虚拟文件, 空白型, , 
.参数 文件路径, 文本型, , 

.局部变量 临时数, 整数型, , , 
.局部变量 临时文件号, 整数型, , , 
.局部变量 循环容器, 整数型, , , 
.局部变量 临时文件, 文本型, , , 

赋值 (临时文件号, 打开文件 (文件路径, #重写, ))

赋值 (临时数, 取数组成员数 (EMS_虚拟文件集))
写出数据 (临时文件号, 临时数)
.计次循环首 (临时数, 循环容器)
    写出数据 (临时文件号, EMS_虚拟文件集 [循环容器], 名称, EMS_虚拟文件集 [循环容器], 扩展, EMS_虚拟文件集 [循环容器], 内容, EMS_虚拟文件集 [循环容器], 状态)
.计次循环尾 ()
关闭文件 (临时文件号)


.程序集 EMS数组排序程序集, , , (行数:310)

.子程序 EMS交换字符串, 空白型, , 
.参数 字符串1, 文本型, 参考, 
.参数 字符串2, 文本型, 参考, 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 字符串1)
赋值 (字符串1, 字符串2)
赋值 (字符串2, 临时文本)
赋值 (临时文本, “”)

.子程序 EMS交换整数, 空白型, , 
.参数 临时数1, 整数型, 参考, 
.参数 临时数2, 整数型, 参考, 

.局部变量 临时交换数, 整数型, , , 

赋值 (临时交换数, 临时数1)
赋值 (临时数1, 临时数2)
赋值 (临时数2, 临时交换数)

.子程序 EMS排序字符串数组, 空白型, 公开, 
.参数 文本数组, 文本型, 参考 数组, 

.局部变量 临时小数, 整数型, , , 
.局部变量 临时大数, 整数型, , , 
.局部变量 临时中间, 整数型, , , 
.局部变量 临时下标, 整数型, , , 
.局部变量 临时上标, 整数型, , , 
.局部变量 缓存数组, 整数型, , "64", 
.局部变量 临时栈点, 整数型, , , 
.局部变量 交换串, 文本型, , , 

赋值 (临时小数, 1)
赋值 (临时大数, 取数组成员数 (文本数组))

赋值 (临时栈点, 0)
.循环判断首 ()
    .如果 (小于 (相减 (临时大数, 临时小数), #EMS_排序_标识))
        .变量循环首 (相加 (临时小数, 1), 临时大数, 1, 临时上标)
            赋值 (交换串, 文本数组 [临时上标])
            .变量循环首 (相减 (临时上标, 1), 临时小数, -1, 临时下标)
                .如果真 (小于或等于 (文本数组 [临时下标], 交换串))
                    跳出循环 ()
                .如果真结束
                赋值 (文本数组 [相加 (临时下标, 1)], 文本数组 [临时下标])
            .变量循环尾 ()
            赋值 (文本数组 [相加 (临时下标, 1)], 交换串)
        .变量循环尾 ()
        .如果真 (等于 (临时栈点, 0))
            跳出循环 ()
        .如果真结束
        赋值 (临时大数, 缓存数组 [临时栈点])
        赋值 (临时小数, 缓存数组 [相减 (临时栈点, 1)])
        赋值 (临时栈点, 相减 (临时栈点, 2))
    .否则
        赋值 (临时中间, 相除 (相加 (临时小数, 临时大数), 2))
        EMS交换字符串 (文本数组 [临时中间], 文本数组 [相加 (临时小数, 1)])
        .如果真 (大于 (文本数组 [临时小数], 文本数组 [临时大数]))
            EMS交换字符串 (文本数组 [临时小数], 文本数组 [临时大数])
        .如果真结束
        .如果真 (大于 (文本数组 [相加 (临时小数, 1)], 文本数组 [临时大数]))
            EMS交换字符串 (文本数组 [相加 (临时小数, 1)], 文本数组 [临时大数])
        .如果真结束
        .如果真 (大于 (文本数组 [临时小数], 文本数组 [相加 (临时小数, 1)]))
            EMS交换字符串 (文本数组 [临时小数], 文本数组 [相加 (临时小数, 1)])
        .如果真结束
        赋值 (临时下标, 相加 (临时小数, 1))
        赋值 (临时上标, 临时大数)
        赋值 (交换串, 文本数组 [相加 (临时小数, 1)])
        .循环判断首 ()
            .循环判断首 ()
                赋值 (临时下标, 相加 (临时下标, 1))
            .循环判断尾 (小于 (文本数组 [临时下标], 交换串))
            .循环判断首 ()
                赋值 (临时上标, 相减 (临时上标, 1))
            .循环判断尾 (大于 (文本数组 [临时上标], 交换串))
            .如果真 (小于 (临时上标, 临时下标))
                跳出循环 ()
            .如果真结束
            EMS交换字符串 (文本数组 [临时下标], 文本数组 [临时上标])
        .循环判断尾 (真)
        赋值 (文本数组 [相加 (临时小数, 1)], 文本数组 [临时上标])
        赋值 (文本数组 [临时上标], 交换串)
        赋值 (临时栈点, 相加 (临时栈点, 2))
        .如果 (大于或等于 (相加 (相减 (临时大数, 临时下标), 1), 相减 (临时上标, 临时小数)))
            赋值 (缓存数组 [临时栈点], 临时大数)
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时下标)
            赋值 (临时大数, 相减 (临时上标, 1))
        .否则
            赋值 (缓存数组 [临时栈点], 相减 (临时上标, 1))
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时小数)
            赋值 (临时小数, 临时下标)
        .如果结束
        
    .如果结束
    
.循环判断尾 (真)
赋值 (交换串, “”)

.子程序 EMS排序整数数组, 空白型, , 
.参数 整数数组, 整数型, 参考 数组, 

.局部变量 临时小数, 整数型, , , 
.局部变量 临时大数, 整数型, , , 
.局部变量 临时中间, 整数型, , , 
.局部变量 临时下标, 整数型, , , 
.局部变量 临时上标, 整数型, , , 
.局部变量 缓存数组, 整数型, , "64", 
.局部变量 临时栈点, 整数型, , , 
.局部变量 临时数, 整数型, , , 

赋值 (临时小数, 1)
赋值 (临时大数, 取数组成员数 (整数数组))

赋值 (临时栈点, 0)
.循环判断首 ()
    .如果 (小于 (相减 (临时大数, 临时小数), #EMS_排序_标识))
        .变量循环首 (相加 (临时小数, 1), 临时大数, 1, 临时上标)
            赋值 (临时数, 整数数组 [临时上标])
            .变量循环首 (相减 (临时上标, 1), 临时小数, -1, 临时下标)
                .如果真 (小于或等于 (整数数组 [临时下标], 临时数))
                    跳出循环 ()
                .如果真结束
                赋值 (整数数组 [相加 (临时下标, 1)], 整数数组 [临时下标])
            .变量循环尾 ()
            赋值 (整数数组 [相加 (临时下标, 1)], 临时数)
        .变量循环尾 ()
        .如果真 (等于 (临时栈点, 0))
            跳出循环 ()
        .如果真结束
        赋值 (临时大数, 缓存数组 [临时栈点])
        赋值 (临时小数, 缓存数组 [相减 (临时栈点, 1)])
        赋值 (临时栈点, 相减 (临时栈点, 2))
    .否则
        赋值 (临时中间, 相除 (相加 (临时小数, 临时大数), 2))
        EMS交换整数 (整数数组 [临时中间], 整数数组 [相加 (临时小数, 1)])
        .如果真 (大于 (整数数组 [临时小数], 整数数组 [临时大数]))
            EMS交换整数 (整数数组 [临时小数], 整数数组 [临时大数])
        .如果真结束
        .如果真 (大于 (整数数组 [相加 (临时小数, 1)], 整数数组 [临时大数]))
            EMS交换整数 (整数数组 [相加 (临时小数, 1)], 整数数组 [临时大数])
        .如果真结束
        .如果真 (大于 (整数数组 [临时小数], 整数数组 [相加 (临时小数, 1)]))
            EMS交换整数 (整数数组 [临时小数], 整数数组 [相加 (临时小数, 1)])
        .如果真结束
        赋值 (临时下标, 相加 (临时小数, 1))
        赋值 (临时上标, 临时大数)
        赋值 (临时数, 整数数组 [相加 (临时小数, 1)])
        .循环判断首 ()
            .循环判断首 ()
                赋值 (临时下标, 相加 (临时下标, 1))
            .循环判断尾 (小于 (整数数组 [临时下标], 临时数))
            .循环判断首 ()
                赋值 (临时上标, 相减 (临时上标, 1))
            .循环判断尾 (大于 (整数数组 [临时上标], 临时数))
            .如果真 (小于 (临时上标, 临时下标))
                跳出循环 ()
            .如果真结束
            EMS交换整数 (整数数组 [临时下标], 整数数组 [临时上标])
        .循环判断尾 (真)
        赋值 (整数数组 [相加 (临时小数, 1)], 整数数组 [临时上标])
        赋值 (整数数组 [临时上标], 临时数)
        赋值 (临时栈点, 相加 (临时栈点, 2))
        .如果 (大于或等于 (相加 (相减 (临时大数, 临时下标), 1), 相减 (临时上标, 临时小数)))
            赋值 (缓存数组 [临时栈点], 临时大数)
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时下标)
            赋值 (临时大数, 相减 (临时上标, 1))
        .否则
            赋值 (缓存数组 [临时栈点], 相减 (临时上标, 1))
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时小数)
            赋值 (临时小数, 临时下标)
        .如果结束
        
    .如果结束
    
.循环判断尾 (真)


.子程序 EMS排序字符串数组下标, 空白型, , 
.参数 文本数组, 文本型, 数组, 
.参数 下标数组, 整数型, 数组, 存放要排序下标的数组内下标

.局部变量 临时小数, 整数型, , , 
.局部变量 临时大数, 整数型, , , 
.局部变量 临时中间, 整数型, , , 
.局部变量 临时下标, 整数型, , , 
.局部变量 临时上标, 整数型, , , 
.局部变量 缓存数组, 整数型, , "64", 
.局部变量 临时栈点, 整数型, , , 
.局部变量 交换串, 文本型, , , 
.局部变量 当前下标, 整数型, , , 

赋值 (临时小数, 1)
赋值 (临时大数, 取数组成员数 (下标数组))

赋值 (临时栈点, 0)
.循环判断首 ()
    .如果 (小于 (相减 (临时大数, 临时小数), #EMS_排序_标识))
        .变量循环首 (相加 (临时小数, 1), 临时大数, 1, 临时上标)
            赋值 (当前下标, 下标数组 [临时上标])
            赋值 (交换串, 文本数组 [当前下标])
            .变量循环首 (相减 (临时上标, 1), 临时小数, -1, 临时下标)
                .如果真 (小于或等于 (文本数组 [下标数组] [临时下标], 交换串))
                    跳出循环 ()
                .如果真结束
                赋值 (下标数组 [相加 (临时下标, 1)], 下标数组 [临时下标])
            .变量循环尾 ()
            赋值 (下标数组 [相加 (临时下标, 1)], 当前下标)
        .变量循环尾 ()
        .如果真 (等于 (临时栈点, 0))
            跳出循环 ()
        .如果真结束
        赋值 (临时大数, 缓存数组 [临时栈点])
        赋值 (临时小数, 缓存数组 [相减 (临时栈点, 1)])
        赋值 (临时栈点, 相减 (临时栈点, 2))
    .否则
        赋值 (临时中间, 相除 (相加 (临时小数, 临时大数), 2))
        EMS交换整数 (下标数组 [临时中间], 下标数组 [相加 (临时小数, 1)])
        .如果真 (大于 (文本数组 [下标数组] [临时小数], 文本数组 [下标数组] [临时大数]))
            EMS交换整数 (下标数组 [临时小数], 下标数组 [临时大数])
        .如果真结束
        .如果真 (大于 (文本数组 [下标数组] [相加 (临时小数, 1)], 文本数组 [下标数组] [临时大数]))
            EMS交换整数 (下标数组 [相加 (临时小数, 1)], 下标数组 [临时大数])
        .如果真结束
        .如果真 (大于 (文本数组 [下标数组] [临时小数], 文本数组 [下标数组] [相加 (临时小数, 1)]))
            EMS交换整数 (下标数组 [临时小数], 下标数组 [相加 (临时小数, 1)])
        .如果真结束
        赋值 (临时下标, 相加 (临时小数, 1))
        赋值 (临时上标, 临时大数)
        赋值 (当前下标, 下标数组 [相加 (临时小数, 1)])
        赋值 (交换串, 文本数组 [当前下标])
        
        .循环判断首 ()
            .循环判断首 ()
                赋值 (临时下标, 相加 (临时下标, 1))
            .循环判断尾 (小于 (文本数组 [下标数组] [临时下标], 交换串))
            .循环判断首 ()
                赋值 (临时上标, 相减 (临时上标, 1))
            .循环判断尾 (大于 (文本数组 [下标数组] [临时上标], 交换串))
            .如果真 (小于 (临时上标, 临时下标))
                跳出循环 ()
            .如果真结束
            EMS交换整数 (下标数组 [临时下标], 下标数组 [临时上标])
        .循环判断尾 (真)
        赋值 (下标数组 [相加 (临时小数, 1)], 下标数组 [临时上标])
        赋值 (下标数组 [临时上标], 当前下标)
        
        赋值 (临时栈点, 相加 (临时栈点, 2))
        .如果 (大于或等于 (相加 (相减 (临时大数, 临时下标), 1), 相减 (临时上标, 临时小数)))
            赋值 (缓存数组 [临时栈点], 临时大数)
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时下标)
            赋值 (临时大数, 相减 (临时上标, 1))
        .否则
            赋值 (缓存数组 [临时栈点], 相减 (临时上标, 1))
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时小数)
            赋值 (临时小数, 临时下标)
        .如果结束
        
    .如果结束
    
.循环判断尾 (真)
赋值 (交换串, “”)

.子程序 EMS排序整数数组下标, 空白型, , 
.参数 整数数组, 整数型, 参考 数组, 
.参数 下标数组, 整数型, 参考 数组, 存放要排序下标的数组内下标

.局部变量 临时小数, 整数型, , , 
.局部变量 临时大数, 整数型, , , 
.局部变量 临时中间, 整数型, , , 
.局部变量 临时下标, 整数型, , , 
.局部变量 临时上标, 整数型, , , 
.局部变量 缓存数组, 整数型, , "64", 
.局部变量 临时栈点, 整数型, , , 
.局部变量 临时数, 整数型, , , 
.局部变量 当前下标, 整数型, , , 

赋值 (临时小数, 1)
赋值 (临时大数, 取数组成员数 (下标数组))

赋值 (临时栈点, 0)
.循环判断首 ()
    .如果 (小于 (相减 (临时大数, 临时小数), #EMS_排序_标识))
        .变量循环首 (相加 (临时小数, 1), 临时大数, 1, 临时上标)
            赋值 (当前下标, 下标数组 [临时上标])
            赋值 (临时数, 整数数组 [当前下标])
            .变量循环首 (相减 (临时上标, 1), 临时小数, -1, 临时下标)
                .如果真 (小于或等于 (整数数组 [下标数组] [临时下标], 临时数))
                    跳出循环 ()
                .如果真结束
                赋值 (下标数组 [相加 (临时下标, 1)], 下标数组 [临时下标])
            .变量循环尾 ()
            赋值 (下标数组 [相加 (临时下标, 1)], 当前下标)
        .变量循环尾 ()
        .如果真 (等于 (临时栈点, 0))
            跳出循环 ()
        .如果真结束
        赋值 (临时大数, 缓存数组 [临时栈点])
        赋值 (临时小数, 缓存数组 [相减 (临时栈点, 1)])
        赋值 (临时栈点, 相减 (临时栈点, 2))
    .否则
        赋值 (临时中间, 相除 (相加 (临时小数, 临时大数), 2))
        EMS交换整数 (下标数组 [临时中间], 下标数组 [相加 (临时小数, 1)])
        .如果真 (大于 (整数数组 [下标数组] [临时小数], 整数数组 [下标数组] [临时大数]))
            EMS交换整数 (下标数组 [临时小数], 下标数组 [临时大数])
        .如果真结束
        .如果真 (大于 (整数数组 [下标数组] [相加 (临时小数, 1)], 整数数组 [下标数组] [临时大数]))
            EMS交换整数 (下标数组 [相加 (临时小数, 1)], 下标数组 [临时大数])
        .如果真结束
        .如果真 (大于 (整数数组 [下标数组] [临时小数], 整数数组 [下标数组] [相加 (临时小数, 1)]))
            EMS交换整数 (下标数组 [临时小数], 下标数组 [相加 (临时小数, 1)])
        .如果真结束
        赋值 (临时下标, 相加 (临时小数, 1))
        赋值 (临时上标, 临时大数)
        赋值 (当前下标, 下标数组 [相加 (临时小数, 1)])
        赋值 (临时数, 整数数组 [当前下标])
        
        .循环判断首 ()
            .循环判断首 ()
                赋值 (临时下标, 相加 (临时下标, 1))
            .循环判断尾 (小于 (整数数组 [下标数组] [临时下标], 临时数))
            .循环判断首 ()
                赋值 (临时上标, 相减 (临时上标, 1))
            .循环判断尾 (大于 (整数数组 [下标数组] [临时上标], 临时数))
            .如果真 (小于 (临时上标, 临时下标))
                跳出循环 ()
            .如果真结束
            EMS交换整数 (下标数组 [临时下标], 下标数组 [临时上标])
        .循环判断尾 (真)
        赋值 (下标数组 [相加 (临时小数, 1)], 下标数组 [临时上标])
        赋值 (下标数组 [临时上标], 当前下标)
        
        赋值 (临时栈点, 相加 (临时栈点, 2))
        .如果 (大于或等于 (相加 (相减 (临时大数, 临时下标), 1), 相减 (临时上标, 临时小数)))
            赋值 (缓存数组 [临时栈点], 临时大数)
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时下标)
            赋值 (临时大数, 相减 (临时上标, 1))
        .否则
            赋值 (缓存数组 [临时栈点], 相减 (临时上标, 1))
            赋值 (缓存数组 [相减 (临时栈点, 1)], 临时小数)
            赋值 (临时小数, 临时下标)
        .如果结束
        
    .如果结束
    
.循环判断尾 (真)

.窗口程序集 窗口程序集2, , , 

.程序集变量 上_比例, 小数型, , , 
.程序集变量 下_比例, 小数型, , , 
.程序集变量 源码文件, 文本型, , , 
.程序集变量 源码组, 整数型, , "20", 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 l, 整数型, , , 

赋值 (上_比例, 0.2)
赋值 (下_比例, 0.7)
赋值 (., 3)
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

0.未知支持库函数_54 (30)
0.未知支持库函数_52 (1)
1.未知支持库函数_54 (10)
1.未知支持库函数_52 (0)
赋值 (.初始目录, 取运行目录 ())
赋值 (.过滤器, “ems|*.ems”)
' 本源码来自易语言资源网(www.5A5X.com)
赋值 (., 假) ' '                         //选择夹的第一个子夹无法隐藏和删除，
.计次循环首 (15, l)
    赋值 (源码组 [l], 未知支持库函数_127 ()) ' '       //创建15个代码框备用，注意：这不是用的复制组件，是用的文档指针。。。。
    “f”.未知支持库函数_31 () ' '        //同上
    l.未知支持库函数_69 (真) ' '                //暂时用不到，先隐藏起来
.计次循环尾 ()

.子程序 _竖条_分隔条_被拖动, 空白型, , 
.参数 原位置, 整数型, , 
.参数 目的位置, 整数型, , 

赋值 (上_比例, 相减 (1, 相除 (目的位置, .)))
输出调试文本 (上_比例)
__启动窗口_尺寸被改变 ()

.子程序 _横条_分隔条_被拖动, 空白型, , 
.参数 原位置, 整数型, , 
.参数 目的位置, 整数型, , 

赋值 (下_比例, 相除 (目的位置, .))
__启动窗口_尺寸被改变 ()

.子程序 __启动窗口_尺寸被改变, 空白型, , 
赋值 (., 相乘 (., 下_比例))
赋值 (., 相减 (取用户区宽度 (), 相乘 (取用户区宽度 (), 上_比例)))
' 本源码来自易语言资源网(www.5A5X.com)
赋值 (., 相减 (., .))
赋值 (., .)
赋值 (., .)
赋值 (.左边, 相加 (., 5))
赋值 (.宽度, 相减 (取用户区宽度 (), .左边))
赋值 (.高度, .)
赋值 (.高度, 相减 (.高度, 30))
赋值 (.宽度, 相减 (.宽度, 10))

赋值 (., .)
赋值 (.高度, 相减 (., ., 8))
赋值 (.顶边, 相加 (., 8))
赋值 (.宽度, .)
赋值 (.宽度, 相减 (.宽度, 17))
赋值 (.高度, 相减 (.高度, 28))
赋值 (.高度, 相减 (.高度, 28))
赋值 (.宽度, 相减 (.宽度, 17))
赋值 (., .)

输出调试文本 (相乘 (., 下_比例))





.子程序 置行缩进, 空白型, , 
.参数 行号, 整数型, , 
.参数 缩进, 整数型, , 

.局部变量 开始位置, 整数型, , , 
.局部变量 结束位置, 整数型, , , 
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 偏移, 整数型, , , 

_启动窗口.未知支持库函数_44 (., 开始位置, 结束位置)
赋值 (位置1, _启动窗口.未知支持库函数_102 (., 行号))
_启动窗口.未知支持库函数_100 (., 行号, 缩进)
赋值 (位置2, _启动窗口.未知支持库函数_102 (., 行号))
赋值 (偏移, 相减 (位置2, 位置1))
.判断开始 (大于 (位置2, 位置1))
    .如果真 (大于或等于 (开始位置, 位置1))
        赋值 (开始位置, 相加 (开始位置, 偏移))
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真 (大于或等于 (结束位置, 位置1))
        赋值 (结束位置, 相加 (结束位置, 偏移))
    .如果真结束
    
.判断 (小于 (位置2, 位置1))
    .如果真 (大于或等于 (开始位置, 位置2))
        .如果 (大于或等于 (开始位置, 位置1))
            赋值 (开始位置, 相加 (开始位置, 偏移))
        .否则
            赋值 (开始位置, 位置2)
        .如果结束
        
    .如果真结束
    
    .如果真 (大于或等于 (结束位置, 位置2))
        .如果 (大于或等于 (结束位置, 位置1))
            赋值 (结束位置, 相加 (结束位置, 偏移))
        .否则
            赋值 (结束位置, 位置2)
        .如果结束
        
    .如果真结束
    
.默认
    
.判断结束

_启动窗口.未知支持库函数_40 (., 开始位置, 结束位置)


.子程序 自动缩进, 空白型, 公开, 
.参数 字符, 文本型, , 

.局部变量 换行模式, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 上一行, 整数型, , , 
.局部变量 缩进大小, 整数型, , , 
.局部变量 a, 字节集, , , 

赋值 (换行模式, _启动窗口..)
赋值 (当前行, _启动窗口.未知支持库函数_46 (., _启动窗口.未知支持库函数_43 (.)))
赋值 (上一行, 相减 (当前行, 1))
赋值 (缩进大小, 0)
.如果真 (或者 (并且 (或者 (等于 (换行模式, 0), 等于 (换行模式, 2)), 等于 (到字节集 (字符), { 13 })), 并且 (等于 (换行模式, 1), 等于 (到字节集 (字符), { 13 }))))
    ' 本源码来自易语言资源网(www.5A5X.com)
    .判断循环首 (并且 (大于或等于 (上一行, 0), 等于 (_启动窗口.未知支持库函数_49 (., 上一行), 0)))
        赋值 (上一行, 相减 (上一行, 1))
    .判断循环尾 ()
    
    .如果真 (大于或等于 (上一行, 0))
        赋值 (缩进大小, _启动窗口.未知支持库函数_101 (., 上一行))
    .如果真结束
    
    .如果真 (大于 (缩进大小, 0))
        置行缩进 (当前行, 缩进大小)
        
    .如果真结束
    
.如果真结束


.子程序 _代码框_处理新字符, 空白型, , 
.参数 接收到的字符, 文本型, , 

自动缩进 (接收到的字符)

.子程序 _打开工程_被选择, 空白型, , 
.局部变量 循环容器, 整数型, , , 
.局部变量 临时编辑框, 编辑框, , , 
.局部变量 i, 空白型, , , 

赋值 (.类型, 0)
赋值 (.初始目录, 取运行目录 ())
赋值 (.过滤器, “ems|*.ems”)
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果真 (等于 (打开 (), 假))
    返回 ()
.如果真结束
初始化代码框 ()
EMS初始化虚拟文件 ()
赋值 (源码文件, .文件名)
EMS打开虚拟文件 (源码文件)
.计次循环首 (15, 循环容器)
    .如果真 (大于 (循环容器, 取数组成员数 (EMS_虚拟文件集)))
        跳出循环 ()
    .如果真结束
     ' 临时编辑框 ＝ 取标记组件 (循环容器)
    输出调试文本 (循环容器)
    .如果 (等于 (循环容器, 1))
        赋值 (., 真)
        0.未知支持库函数_41 (EMS_虚拟文件集 [1].名称)
    .否则
        相减 (循环容器, 1).未知支持库函数_41 (EMS_虚拟文件集 [1].名称)
        相减 (循环容器, 1).未知支持库函数_69 (假)
    .如果结束
    源码组.未知支持库函数_126 ( [循环容器])
    赋值 (., 1)
    到文本 (ANSI转UTF8 (EMS_虚拟文件集 [循环容器], 内容)).未知支持库函数_1 () ' '     //有的源码老是在这里崩溃，可能是源码有问题
    未知支持库函数_32 () ' '                                                 //刚打开的代码是不能撤消的。。。
.计次循环尾 ()
' 本源码来自易语言资源网(www.5A5X.com)
源码组.未知支持库函数_126 ( [1])
赋值 (., 0)

.子程序 _保存工程_被选择, 空白型, , 
更新 ()

.如果真 (等于 (源码文件, “”))
    赋值 (.类型, 1)
    赋值 (.默认文件后缀, “.esm”)
    赋值 (.初始目录, 取运行目录 ())
    赋值 (.过滤器, “ems|*.ems”)
    
.如果真结束
EMS保存虚拟文件 (源码文件)


.子程序 更新, 空白型, , 
.局部变量 循环容器, 整数型, , , 
.局部变量 临时编辑框, 编辑框, , , 

.计次循环首 (20, 循环容器)
    .如果真 (大于 (循环容器, 取数组成员数 (EMS_虚拟文件集)))
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (循环容器, 1))
        .如果真 (等于 (源码组 [1], 未知支持库函数_125 ()))
            赋值 (EMS_虚拟文件集 [循环容器], 内容, 删首尾空 (UTF8转ANSI (到字节集 (未知支持库函数_35 ().未知支持库函数_0 ()))))
            到循环尾 ()
        .如果真结束
        ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    
    源码组.未知支持库函数_126 ( [循环容器])
    赋值 (EMS_虚拟文件集 [循环容器], 内容, 删首尾空 (UTF8转ANSI (到字节集 (未知支持库函数_35 ().未知支持库函数_0 ()))))
.计次循环尾 ()

.子程序 _编译文件_被选择, 空白型, , 
赋值 (.类型, 1)
赋值 (.默认文件后缀, “.exe”)
赋值 (.过滤器, “应用程序|*.exe”)
.如果真 (打开 ())
    更新 ()
    ' 本源码来自易语言资源网(www.5A5X.com)
    赋值 (.内容, “”)
    赋值 (.现行子夹, 1)
    置等待鼠标 ()
    EMS编译 (.文件名, 假)
    恢复鼠标 ()
.如果真结束


.子程序 _新建工程_被选择, 空白型, , 
赋值 (源码文件, 相加 (取运行目录 (), “\temp.ems”))
EMS初始化虚拟文件 ()
初始化代码框 ()

.子程序 _工具条1_被单击, 空白型, , 
.参数 按钮索引, 整数型, , 

.判断开始 (等于 (按钮索引, 9))
    赋值 (.内容, “”)
    置等待鼠标 ()
    EMS编译 (相加 (取运行目录 (), “\test.exe”), 真)
    恢复鼠标 ()
.判断 (等于 (按钮索引, 8))
    未知支持库函数_28 ()
.判断 (等于 (按钮索引, 7))
    未知支持库函数_29 ()
.判断 (等于 (按钮索引, 6))
    未知支持库函数_23 ()
.判断 (等于 (按钮索引, 5))
    未知支持库函数_22 ()
.判断 (等于 (按钮索引, 4))
    未知支持库函数_21 ()
.判断 (等于 (按钮索引, 2))
    _保存工程_被选择 ()
.判断 (等于 (按钮索引, 1))
    _打开工程_被选择 ()
.判断 (等于 (按钮索引, 0))
    _新建工程_被选择 ()
.默认
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断结束


.子程序 _高级夹_子夹被改变, 空白型, , 
源码组.未知支持库函数_126 ( [相加 (., 1)])

.子程序 初始化代码框, 空白型, , 
.局部变量 l, 整数型, , , 

.计次循环首 (取数组成员数 (源码组), l)
    源码组.未知支持库函数_126 ( [l])
    未知支持库函数_11 () ' '        //实际可以用  释放文档指针  来销毁代码框的，但不知什么原因程序好崩溃，所以。。。。。
    相减 (l, 1).未知支持库函数_69 (真)
.计次循环尾 ()
赋值 (., 假)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _另存为_被选择, 空白型, , 
更新 ()
赋值 (.类型, 1)
赋值 (.默认文件后缀, “.esm”)
赋值 (.初始目录, 取运行目录 ())
赋值 (.过滤器, “ems|*.ems”)

.如果真 (打开 ())
    赋值 (源码文件, .文件名)
    EMS保存虚拟文件 (源码文件)
    赋值 (., 相加 (“EMS开发环境”, 源码文件))
.如果真结束


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 UTF8转ANSI, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 UTF8, 字节集, , 待转换UTF-8编码字节集



.子程序 UNICODE转ANSI, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 Unicode数据, 字节集, , Unicode码字节集数据



.子程序 ANSI转UNICODE, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , Ansi码文本，只针对中文或双字节全角字符



.子程序 UTF8转UNICODE, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 UTF8, 字节集, , 待转换UTF-8编码字节集



.子程序 UNICODE转UTF8, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 UNICODE, 字节集, , 待转换UNICODE编码字节集



.子程序 ANSI转UTF8, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 要转换为UTF8编码的文本



.子程序 BASE64编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 待编码数据, 字节集, , 



.子程序 BASE64解码, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 待解码数据, 文本型, , 



.子程序 文本加密, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待加密文本（本加密方法为动态随机加密，所以每次加密后的文本都不同）
.参数 密匙, 文本型, 可空, 长度为62任意不重复单字节可见字符，默认为：ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz



.子程序 文本解密, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待解密文本
.参数 密匙, 文本型, 可空, 必须跟加密时相同的密匙文本



.子程序 ANSI转USC2, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 



.子程序 USC2转ANSI, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 USC2, 文本型, , 



.子程序 Uuencode编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文件名, 文本型, , 待编码全路径文件名



.子程序 Uuencode解码, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文件名, 文本型, , 待解码全路径文件名
.参数 原始文件名, 文本型, 参考 可空, 返回原始全路径文件名



.子程序 ANSI转UTF16BE, 字节集, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 



.子程序 短信PDU编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 短信中心号码, 文本型, , 
.参数 被叫手机号码, 文本型, , 
.参数 短信内容, 文本型, , 



.子程序 UNICODE_网编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 把“易语言”文本转换为“&#26131;&#35821;&#35328;”形式的unicode编码
.参数 头连接符, 文本型, 可空, 默认：“&#”
.参数 尾连接符, 文本型, 可空, 默认：“;”



.子程序 UNICODE_网解码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 把“&#26131;&#35821;&#35328;”形式的unicode编码转换为“易语言”
.参数 头连接符, 文本型, 可空, 默认：“&#”
.参数 尾连接符, 文本型, 可空, 默认：“;”



.子程序 短信PDU解码, 文本型, , 成功返回短信内容。因接收的PDU文本和发送的PDU文本格式的差异，所以别指望能正确地解码短信编码后的文本
.参数 PDU文本, 文本型, , 接收到的完整的短信PDU字符串
.参数 短信中心, 文本型, 参考 可空, 
.参数 来电号码, 文本型, 参考 可空, 
.参数 来电时间, 日期时间型, 参考 可空, 



.子程序 unescape编码1, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待编码URL文本，不支持双字节字符（包括中文）



.子程序 unescape解码1, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待解码unescape编码文本



.子程序 unescape编码2, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待编码URL文本，不支持双字节字符（包括中文）



.子程序 unescape解码2, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待解码的unescape编码文本



.子程序 Escape编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待编码文本



.子程序 Escape解码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , Escape编码后文本



.子程序 Encode编码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , 待编码URL文本



.子程序 Encode解码, 文本型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 文本, 文本型, , Encode编码后文本



.子程序 生成密钥, 文本型, , 自动生成加密用密钥字符串，方便文本加密时使用，注意：本子程序不要直接在程序中调用



 ' 不属于任何一个程序集、类模块的函数：
