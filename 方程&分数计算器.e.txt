 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 463
    高度 = 228
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\方程&分数计算器.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “方程&分数计算器”
    帮助文件名 = “”



.常量 加, "1", 隐藏, 
.常量 减, "2", 隐藏, 
.常量 乘, "3", 隐藏, 
.常量 除, "4", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库



 ' 所需要的模块
 ' 分数运算模块 E:\易语言\程序\程序\分数运算模块.ec


数据类型 分数型, 公开, 比如"二分之一"，一为分子，二为分母，文本在本模块中写做"1/2"
    .成员 分子, 整数型, , , 
    .成员 分母, 整数型, , , 

数据类型 带分数, 公开, 比如"三又二分之一"，三为整数部分，二为分母，一为分子。文本在本模块中写做"3&1/2"
    .成员 整数部分, 整数型, , , 
    .成员 分子, 整数型, , , 
    .成员 分母, 整数型, , , 


.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
置随机数种子 ()

.子程序 _Windows计算器_被选择, 空白型, , 
运行 (相加 (读环境变量 (“SystemRoot”), “\system32\calc.exe”), 假, )

.子程序 _记事本_被选择, 空白型, , 
运行 (相加 (读环境变量 (“SystemRoot”), “\system32\notepad.exe”), 假, )

.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _求解_被单击, 空白型, , 
.局部变量 a, 空白型, , , 
.局部变量 b, 空白型, , , 

.如果真 (或者 (等于 (., “”), 等于 (., “”)))
    信息框 (“请完整输入系数和常数项，没有常数项的方程请填0。”, #信息图标, )
    返回 ()
.如果真结束
赋值 (a, 到数值 (.))
赋值 (b, 到数值 (.))
.如果真 (等于 (a, 0))
    信息框 (“未知数系数不能为0，请勿输入其它非数字字符，否则将转换为0”, #信息图标, )
    返回 ()
.如果真结束
赋值 (., 到文本 (相除 (负 (b), a)))

.子程序 _求方程组_被单击, 空白型, , 
.局部变量 a1, 空白型, , , 
.局部变量 a2, 空白型, , , 
.局部变量 b1, 空白型, , , 
.局部变量 b2, 空白型, , , 
.局部变量 c1, 空白型, , , 
.局部变量 c2, 空白型, , , 

.如果真 (或者 (等于 (., “”), 等于 (., “”), 等于 (., “”), 等于 (., “”), 等于 (., “”), 等于 (., “”)))
    信息框 (“请完整输入系数和常数项。”, #信息图标, )
    返回 ()
.如果真结束
赋值 (a1, 到数值 (.))
赋值 (b1, 到数值 (.))
赋值 (a2, 到数值 (.))
赋值 (b2, 到数值 (.))
赋值 (c1, 到数值 (.))
赋值 (c2, 到数值 (.))
.如果真 (并且 (等于 (相除 (a1, a2), 相除 (b1, b2)), 等于 (相除 (b1, b2), 相除 (c1, c2))))
    连续赋值 (“方程组有无数解”, ., .)
    返回 ()
.如果真结束
.如果真 (或者 (并且 (等于 (相除 (a1, a2), 相除 (b1, b2)), 不等于 (相除 (b1, b2), 相除 (c1, c2))), 等于 (相减 (相乘 (a1, b2), 相乘 (a2, b1)), 0)))
    连续赋值 (“方程组无解”, ., .)
    返回 ()
.如果真结束
赋值 (., 到文本 (相除 (相减 (相乘 (b2, c1), 相乘 (b1, c2)), 相减 (相乘 (a1, b2), 相乘 (a2, b1)))))
赋值 (., 到文本 (相除 (相减 (相乘 (a1, c2), 相乘 (a2, c1)), 相减 (相乘 (a1, b2), 相乘 (a2, b1)))))

.子程序 _求根_被单击, 空白型, , 
.局部变量 a, 空白型, , , 
.局部变量 b, 空白型, , , 
.局部变量 c, 空白型, , , 
.局部变量 s, 空白型, , , 

.如果真 (或者 (等于 (., “”), 等于 (., “”), 等于 (., “”)))
    信息框 (“请完整输入系数和常数项，没有一次项系数或常数项的方程请填0。”, #信息图标, )
    返回 ()
.如果真结束
赋值 (a, 到数值 (.))
赋值 (b, 到数值 (.))
赋值 (c, 到数值 (.))
.如果真 (等于 (a, 0))
    信息框 (“二次项系数不能为0，请勿输入其它非数字字符，否则将转换为0”, #信息图标, )
    返回 ()
.如果真结束
赋值 (s, 相减 (相乘 (b, b), 相乘 (4, a, c)))
.如果真 (小于 (s, 0))
    连续赋值 (“方程无实数根”, ., .)
    返回 ()
.如果真结束
赋值 (., 到文本 (相除 (相加 (负 (b), 求平方根 (s)), 相乘 (2, a))))
赋值 (., 到文本 (相除 (相减 (负 (b), 求平方根 (s)), 相乘 (2, a))))

.子程序 _计算_被单击, 空白型, , 
.局部变量 数1, 分数型, , , 
.局部变量 数2, 分数型, , , 
.局部变量 得数, 分数型, , , 

赋值 (数1.分子, 到整数 (.))
赋值 (数1.分母, 到整数 (.))
赋值 (数2.分子, 到整数 (.))
赋值 (数2.分母, 到整数 (.))
赋值 (得数, 分数运算 (数1, .取项目数值 (.), 数2))
.如果真 (并且 (等于 (得数.分子, 0), 等于 (得数.分母, 0)))
    返回 ()
.如果真结束
赋值 (., 到文本 (得数.分子))
赋值 (., 到文本 (得数.分母))

.子程序 _计算2_被单击, 空白型, , 
.局部变量 分数1, 分数型, , , 
.局部变量 分数2, 分数型, , , 

.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数1, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数1, 文本到分数 (.))
.如果结束
.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数2, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数2, 文本到分数 (.))
.如果结束
赋值 (., 分数到文本 (分数运算 (分数1, .取项目数值 (.), 分数2)))

.子程序 _约分_被单击, 空白型, , 
.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (., 带分数到文本 (分数到带分数 (约分 (带分数到分数 (文本到带分数 (.))))))
    赋值 (., 真)
    赋值 (., 假)
    赋值 (., 假)
.否则
    .如果真 (不等于 (寻找文本 (., “/”, , 假), -1))
        赋值 (., 分数到文本 (约分 (文本到分数 (.))))
        返回 ()
    .如果真结束
    
.如果结束


.子程序 _通分_被单击, 空白型, , 
.局部变量 分数1, 分数型, , , 
.局部变量 分数2, 分数型, , , 
.局部变量 分数数组, 分数型, , "0", 

.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数1, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数1, 文本到分数 (.))
.如果结束
.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数2, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数2, 文本到分数 (.))
.如果结束
通分 (分数1, 分数2, 分数数组)
赋值 (., 分数到文本 (分数数组 [1], 假))
赋值 (., 分数到文本 (分数数组 [2], 假))

.子程序 _转换到假分数_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 分数到文本 (带分数到分数 (文本到带分数 (.))))
赋值 (., 假)
赋值 (., 真)
赋值 (., 真)

.子程序 _清空_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (.)
    连续赋值 (“”, ., ., .)
    返回 ()
.如果真结束
.如果真 (.)
    连续赋值 (“”, ., ., ., ., ., ., ., .)
    返回 ()
.如果真结束
.如果真 (.)
    连续赋值 (“”, ., ., ., ., .)
    返回 ()
.如果真结束
.如果真 (.)
    连续赋值 (“”, ., ., ., ., ., ., ., ., ., ., ., ., ., ., .)
    返回 ()
.如果真结束
.如果真 (.)
    连续赋值 (“”, ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., .)
    返回 ()
.如果真结束


.子程序 _随机1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_转换到假分数_鼠标左键被按下 (0, 0, 0)
赋值 (., 到文本 (取随机数 (1, 20)))
赋值 (., 到文本 (取随机数 (1, 20)))
赋值 (., 到文本 (取随机数 (1, 20)))
赋值 (., 到文本 (取随机数 (1, 20)))
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.否则
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果结束
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.否则
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果结束
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.否则
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果结束
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.否则
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果结束
连续赋值 (“”, ., ., ., ., ., .)
.如果真 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
    返回 ()
.如果真结束
赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))

.子程序 _数值到分数_被单击, 空白型, , 
赋值 (., 分数到文本 (数值到分数 (到数值 (.))))

.子程序 _数值到带分数_被单击, 空白型, , 
赋值 (., 带分数到文本 (数值到带分数 (到数值 (.))))

.子程序 _分数到数值_被单击, 空白型, , 
赋值 (., 到文本 (分数到数值 (文本到分数 (.))))

.子程序 _带分数到数值_被单击, 空白型, , 
赋值 (., 到文本 (带分数到数值 (文本到带分数 (.))))

.子程序 _求分数平方_被单击, 空白型, , 
.局部变量 分数, 分数型, , , 

.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数, 文本到分数 (.))
.如果结束
赋值 (., 分数到文本 (求分数次方 (分数, 2)))

.子程序 _约分到整数_被单击, 空白型, , 
.局部变量 分数, 分数型, , , 

.如果 (并且 (不等于 (寻找文本 (., “&”, , 假), -1), 不等于 (寻找文本 (., “/”, , 假), -1)))
    赋值 (分数, 带分数到分数 (文本到带分数 (.)))
.否则
    赋值 (分数, 文本到分数 (.))
.如果结束
赋值 (., 到文本 (约分到整数 (分数)))

.子程序 _分数到带分数_被单击, 空白型, , 
赋值 (., 带分数到文本 (分数到带分数 (文本到分数 (.))))

.子程序 _带分数到分数_被单击, 空白型, , 
赋值 (., 分数到文本 (带分数到分数 (文本到带分数 (.))))

.子程序 _随机2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 随机数, 整数型, , "3", 

_清空_鼠标左键被按下 (0, 0, 0)
赋值 (随机数, { 10, 100, 1000 })
赋值 (., 到文本 (相除 (取随机数 (1, 100), 随机数 [取随机数 (1, 3)])))
赋值 (., 到文本 (相除 (取随机数 (1, 100), 随机数 [取随机数 (1, 3)])))
赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.否则
    赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
.如果结束
.如果 (大于 (取随机数 (1, 200), 75))
    赋值 (随机数 [1], 取随机数 (1, 20))
    .如果 (小于 (取随机数 (1, 200), 75))
        赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (随机数 [1])))
    .否则
        赋值 (., 相加 (到文本 (相乘 (取随机数 (1, 4), 随机数 [1])), “/”, 到文本 (随机数 [1])))
    .如果结束
    
.否则
    赋值 (随机数 [1], 取随机数 (1, 20))
    .如果 (小于 (取随机数 (1, 200), 75))
        赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
    .否则
        赋值 (., 带分数到文本 (分数到带分数 (文本到分数 (相加 (到文本 (相乘 (取随机数 (1, 4), 随机数 [1])), “/”, 到文本 (随机数 [1]))))))
    .如果结束
    
.如果结束
赋值 (., 相加 (到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))
赋值 (., 相加 (到文本 (取随机数 (1, 20)), “&”, 到文本 (取随机数 (1, 20)), “/”, 到文本 (取随机数 (1, 20))))

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 数值到分数, 分数型, , 将数值化为分数，这样可以使整数或者小数变成分数参与分数运算。
.参数 欲转换的数值, 双精度小数型, , 



.子程序 分数到数值, 双精度小数型, , 将分数化为数值。
.参数 欲转换的分数, 分数型, , 



.子程序 分数是否有意义, 逻辑型, , 分母为0则无意义，返回假。
.参数 欲检查的分数, 分数型, 可空, 
.参数 欲检查的带分数, 带分数, 可空, 两个参数选其一。



.子程序 是否为真分数, 逻辑型, , 为真分数返回真，假分数返回假。
.参数 分数, 分数型, 可空, 两个参数选其一。
.参数 带分数, 带分数, 可空, 如果带分数的整数部分为0，且分子的绝对值小于分母的绝对值则为真。



.子程序 文本到分数, 分数型, , 将形如“X/Y”(XY为整数)或整数的文本转化为分数型变量，这样可以使整数或者小数变成分数参与分数运算。
.参数 欲转化为分数的文本, 文本型, , 
.参数 是否约分, 逻辑型, 可空, 为真约分，为假不约分，默认为真。



.子程序 分数到带分数, 带分数, , 将假分数化为带分数，提供的分数为真分数则返回整数部分为0的带分数，错误返回空带分数。
.参数 欲转换的分数, 分数型, , 



.子程序 约分, 分数型, , 将分数化为最简，分数已为最简或无意义原样返回。
.参数 分数, 分数型, , 



.子程序 通分, 空白型, , 将两个分母不同的分数化为同分母，带分数约分可先将带分数化为假分数后再通分。
.参数 分数1, 分数型, , 
.参数 分数2, 分数型, , 
.参数 通分后分数, 分数型, 参考 数组, 用来接收通分后的分数数组，失败返回两个原分数。



.子程序 取最大公约数, 整数型, , 
.参数 数1, 整数型, , 
.参数 数2, 整数型, , 



.子程序 取最小公倍数, 整数型, , 
.参数 数1, 整数型, , 
.参数 数2, 整数型, , 



.子程序 文本到带分数, 带分数, , 将形如“A&X/Y”(A为整数部分，XY皆为整数的分子和分母)的文本转化为分数型变量。
.参数 欲转化为分数的文本, 文本型, , 
.参数 是否约分, 逻辑型, 可空, 为真约分，为假不约分，默认为真。



.子程序 带分数到分数, 分数型, , 将带分数化为假分数，错误返回空分数。
.参数 带分数, 带分数, , 



.子程序 带分数到文本, 文本型, , 将带分数变量转化为形如“A&X/Y”的文本。
.参数 欲转换的带分数, 带分数, , 
.参数 是否约分, 逻辑型, 可空, 为真约分，为假不约分，默认为真。



.子程序 带分数约分, 带分数, , 将带分数化为最简，分数无意义原样返回。
.参数 欲化简的带分数, 带分数, , 



.子程序 分数到文本, 文本型, , 将分数变量转化为形如“X/Y”的文本。
.参数 欲转换的分数, 分数型, , 
.参数 是否约分, 逻辑型, 可空, 为真约分，为假不约分，默认为真。



.子程序 带分数到数值, 双精度小数型, , 将带分数化为数值。
.参数 欲转换的带分数, 带分数, , 



.子程序 数值到带分数, 带分数, , 将数值化为带分数。
.参数 欲转换的数值, 双精度小数型, , 



.子程序 分数运算, 分数型, , 将两个分数执行运算，连续调用可实现连续运算，分数无意义返回为分子母皆为0的分数。
.参数 分数1, 分数型, , 如果想让整数或小数参加运算，请先使用“数值到分数”转换数据类型；想让带分数进行运算请用“带分数到分数”。
.参数 运算规则, 整数型, , 1、#加 2、#减 3、#乘 4、#除
.参数 分数2, 分数型, , 



.子程序 分数负号移分子, 分数型, , 将分数型变量为负数的负号移到分子，方便操作；将分子母同为负的去掉负号。
.参数 被修改分数, 分数型, , 



.子程序 带分数负号移分子, 带分数, , 将带分数型变量为负数的负号移到分子，方便操作；将整数部分、分子母其中一对同为负的去掉负号。
.参数 被修改带分数, 带分数, , 



.子程序 约分到整数, 整数型, , 将可以约尽的分数变成整数形式，不能约尽的四舍五入取整数。如将"6/3"变为2，"0/4"变为0，“9/4”变为2，带分数要执行此操作要先转化成假分数。
.参数 要约分的分数, 分数型, , 



.子程序 求分数次方, 分数型, , 求一个分数的次方，分数无意义原样返回。
.参数 欲求次方的分数, 分数型, , 
.参数 欲求次方数, 整数型, , 只能是整数，如果输入小数，乘方后得到的结果不是整数的话将会被四舍五入。



.子程序 取分数符号, 整数型, , 返回一个数，如果小于零，表明给定数值为负；如果等于零，表明给定数值为零或无意义；如果大于零，表明给定数值为正。
.参数 欲取其符号的分数, 分数型, , 



.子程序 求分数平方根, 分数型, , 求一个分数的平方根，分数无意义原样返回。
.参数 欲求其根的数, 分数型, , 




 ' 不属于任何一个程序集、类模块的函数：
