 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 454
    高度 = 359
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “Spy+++ V”
    帮助文件名 = “”

窗口 窗口_子窗口列表
    左边 = 50
    顶边 = 50
    宽度 = 571
    高度 = 372
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “子窗口列表”
    帮助文件名 = “”



.图片 图片1, " ' 已保存到：D:\易语言学习\Data\SPY+++.e\图片1", , 
.图片 图片2, " ' 已保存到：D:\易语言学习\Data\SPY+++.e\图片2", , 
.图片 鼠标指针, " ' 已保存到：D:\易语言学习\Data\SPY+++.e\鼠标指针", , 
.常量 OCR_NORMAL, "32512", , 
.常量 PS_INSIDEFRAME, "6", , 
.常量 NULL_BRUSH, "5", , 
.常量 WHITE_BRUSH, "0", , 
.常量 PROCESS_ALL_ACCESS, "2035711", , 
.常量 TH32CS_SNAPMODULE, "8", , 
.常量 GWL_EXSTYLE, "-20", , 
.常量 GWL_HINSTANCE, "-6", , 
.常量 GWL_HWNDPARENT, "-8", , 
.常量 GWL_ID, "-12", , 
.常量 GWL_STYLE, "-16", , 
.常量 GWL_USERDATA, "-21", , 
.常量 GWL_WNDPROC, "-4", , 
.常量 WS_POPUP, "-2147483648", , 
.常量 WS_MINIMIZE, "536870912", , 
.常量 WS_VISIBLE, "268435456", , 
.常量 WS_DISABLED, "134217728", , 
.常量 WS_CLIPSIBLINGS, "67108864", , 
.常量 WS_CLIPCHILDREN, "33554432", , 
.常量 WS_MAXIMIZE, "16777216", , 
.常量 WS_CAPTION, "12582912", , 
.常量 WS_BORDER, "8388608", , 
.常量 WS_DLGFRAME, "4194304", , 
.常量 WS_VSCROLL, "2097152", , 
.常量 WS_HSCROLL, "1048576", , 
.常量 WS_SYSMENU, "524288", , 
.常量 WS_THICKFRAME, "262144", , 
.常量 WS_GROUP, "131072", , 
.常量 WS_TABSTOP, "65536", , 
.常量 WS_MINIMIZEBOX, "131072", , 
.常量 WS_MAXIMIZEBOX, "65536", , 
.常量 WS_ICONIC, "536870912", , 
.常量 WS_SIZEBOX, "262144", , 
.常量 WS_OVERLAPPEDWINDOW, "13565952", , 
.常量 WS_TILEDWINDOW, "13565952", , 
.常量 WS_POPUPWINDOW, "-2138570752", , 
.常量 WS_CHILDWINDOW, "1073741824", , 
.常量 WS_EX_ACCEPTFILES, "16", , 
.常量 WS_EX_APPWINDOW, "262144", , 
.常量 WS_EX_CLIENTEDGE, "512", , 
.常量 WS_EX_CONTEXTHELP, "1024", , 
.常量 WS_EX_CONTROLPARENT, "65536", , 
.常量 WS_EX_DLGMODALFRAME, "1", , 
.常量 WS_EX_LAYERED, "524288", , 
.常量 WS_EX_LAYOUTRTL, "4194304", , 
.常量 WS_EX_LEFT, "0", , 
.常量 WS_EX_LEFTSCROLLBAR, "16384", , 
.常量 WS_EX_LTRREADING, "0", , 
.常量 WS_EX_MDICHILD, "64", , 
.常量 WS_EX_NOACTIVATE, "134217728", , 
.常量 WS_EX_NOINHERITLAYOUT, "1048576", , 
.常量 WS_EX_NOPARENTNOTIFY, "4", , 
.常量 WS_EX_OVERLAPPEDWINDOW, "768", , 
.常量 WS_EX_PALETTEWINDOW, "392", , 
.常量 WS_EX_RIGHT, "4096", , 
.常量 WS_EX_RIGHTSCROLLBAR, "0", , 
.常量 WS_EX_RTLREADING, "8192", , 
.常量 WS_EX_STATICEDGE, "131072", , 
.常量 WS_EX_TOOLWINDOW, "128", , 
.常量 WS_EX_TOPMOST, "8", , 
.常量 WS_EX_TRANSPARENT, "32", , 
.常量 WS_EX_WINDOWEDGE, "256", , 
.常量 GCL_STYLE, "-26", , 
.常量 CS_BYTEALIGNCLIENT, "4096", , 
.常量 CS_BYTEALIGNWINDOW, "8192", , 
.常量 CS_CLASSDC, "64", , 
.常量 CS_DBLCLKS, "8", , 
.常量 CS_GLOBALCLASS, "16384", , 
.常量 CS_HREDRAW, "2", , 
.常量 CS_IME, "65536", , 
.常量 CS_INSERTCHAR, "8192", , 
.常量 CS_KEYCVTWINDOW, "4", , 
.常量 CS_NOCLOSE, "512", , 
.常量 CS_NOKEYCVT, "256", , 
.常量 CS_OWNDC, "32", , 
.常量 CS_PARENTDC, "128", , 
.常量 CS_SAVEBITS, "2048", , 
.常量 CS_VREDRAW, "1", , 
.常量 GW_CHILD, "5", , 
.常量 GW_ENABLEDPOPUP, "6", , 
.常量 GW_HWNDFIRST, "0", , 
.常量 GW_HWNDLAST, "1", , 
.常量 GW_HWNDNEXT, "2", , 
.常量 GW_HWNDPREV, "3", , 
.常量 GW_MAX, "5", , 
.常量 GW_OWNER, "4", , 
.常量 TH32CS_SNAPALL, "15", , 
.常量 WM_QUIT, "18", , 
.常量 Ver, "0.12", , 
.常量 Build, "80214", , 
.常量 AutoMessgeBox_Close, "888", , 
.常量 PM_REMOVE, "1", , 
.常量 WM_CLOSE, "16", , 
.常量 SC_CLOSE, "61536", , 
.常量 SC_CONTEXTHELP, "61824", , 
.常量 SC_DEFAULT, "61792", , 
.常量 SC_DLG_FORCE_UI, "4", , 
.常量 SC_DLG_MINIMAL_UI, "1", , 
.常量 SC_DLG_NO_UI, "2", , 
.常量 SC_FLAGS, "1024", , 
.常量 SC_FLAGS_STR, "“/sc”", , 
.常量 SC_GROUP_IDENTIFIER, "“+”", , 
.常量 SC_GROUP_IDENTIFIERA, "“+”", , 
.常量 SC_GROUP_IDENTIFIERW, "“+”", , 
.常量 SC_HOTKEY, "61776", , 
.常量 SC_HSCROLL, "61568", , 
.常量 SC_ICON, "61472", , 
.常量 SC_KEYMENU, "61696", , 
.常量 SC_MANAGER_ALL_ACCESS, "983103", , 
.常量 SC_MANAGER_CONNECT, "1", , 
.常量 SC_MANAGER_CREATE_SERVICE, "2", , 
.常量 SC_MANAGER_ENUMERATE_SERVICE, "4", , 
.常量 SC_MANAGER_LOCK, "8", , 
.常量 SC_MANAGER_MODIFY_BOOT_CONFIG, "32", , 
.常量 SC_MANAGER_QUERY_LOCK_STATUS, "16", , 
.常量 SC_MAXIMIZE, "61488", , 
.常量 SC_MINIMIZE, "61472", , 
.常量 SC_MONITORPOWER, "61808", , 
.常量 SC_MOUSEMENU, "61584", , 
.常量 SC_MOVE, "61456", , 
.常量 SC_NEXTWINDOW, "61504", , 
.常量 SC_PREVWINDOW, "61520", , 
.常量 SC_RESTORE, "61728", , 
.常量 SC_SCREENSAVE, "61760", , 
.常量 SC_SEPARATOR, "61455", , 
.常量 SC_SIZE, "61440", , 
.常量 SC_TASKLIST, "61744", , 
.常量 SC_VSCROLL, "61552", , 
.常量 SC_ZOOM, "61488", , 
.常量 STANDARD_RIGHTS_REQUIRED, "983040", , 
.常量 ES_AUTOHSCROLL, "128", , 
.常量 ES_AUTOVSCROLL, "64", , 
.常量 ES_CENTER, "1", , 
.常量 ES_LEFT, "0", , 
.常量 ES_LOWERCASE, "16", , 
.常量 ES_MULTILINE, "4", , 
.常量 ES_NOHIDESEL, "256", , 
.常量 ES_OEMCONVERT, "1024", , 
.常量 ES_PASSWORD, "32", , 
.常量 ES_READONLY, "2048", , 
.常量 ES_RIGHT, "2", , 
.常量 ES_UPPERCASE, "8", , 
.常量 ES_WANTRETURN, "4096", , 
.常量 BS_3STATE, "5", , 
.常量 BS_AUTO3STATE, "6", , 
.常量 BS_AUTOCHECKBOX, "3", , 
.常量 BS_AUTORADIOBUTTON, "9", , 
.常量 BS_BITMAP, "128", , 
.常量 BS_BOTTOM, "2048", , 
.常量 BS_CENTER, "768", , 
.常量 BS_FLAT, "32768", , 
.常量 BS_GROUPBOX, "7", , 
.常量 BS_ICON, "64", , 
.常量 BS_LEFT, "256", , 
.常量 BS_LEFTTEXT, "32", , 
.常量 BS_MULTILINE, "8192", , 
.常量 BS_NOTIFY, "16384", , 
.常量 BS_OWNERDRAW, "11", , 
.常量 BS_PUSHLIKE, "4096", , 
.常量 BS_RADIOBUTTON, "4", , 
.常量 BS_RIGHT, "512", , 
.常量 BS_TOP, "1024", , 
.常量 BS_USERBUTTON, "8", , 
.常量 SS_BITMAP, "14", , 
.常量 SS_BLACKFRAME, "7", , 
.常量 SS_BLACKRECT, "4", , 
.常量 SS_CENTER, "1", , 
.常量 SS_CENTERIMAGE, "512", , 
.常量 SS_ELLIPSISMASK, "49152", , 
.常量 SS_ENDELLIPSIS, "16384", , 
.常量 SS_ENHMETAFILE, "15", , 
.常量 SS_ETCHEDFRAME, "18", , 
.常量 SS_ETCHEDHORZ, "16", , 
.常量 SS_ETCHEDVERT, "17", , 
.常量 SS_GRAYFRAME, "8", , 
.常量 SS_GRAYRECT, "5", , 
.常量 SS_ICON, "3", , 
.常量 SS_LEFT, "0", , 
.常量 SS_LEFTNOWORDWRAP, "12", , 
.常量 SS_NOPREFIX, "128", , 
.常量 SS_NOTIFY, "256", , 
.常量 SS_OWNERDRAW, "13", , 
.常量 SS_PATHELLIPSIS, "32768", , 
.常量 SS_REALSIZEIMAGE, "2048", , 
.常量 SS_RIGHT, "2", , 
.常量 SS_RIGHTJUST, "1024", , 
.常量 SS_SIMPLE, "11", , 
.常量 SS_SUNKEN, "4096", , 
.常量 SS_TYPEMASK, "31", , 
.常量 SS_USERITEM, "10", , 
.常量 SS_WHITEFRAME, "9", , 
.常量 SS_WHITERECT, "6", , 
.常量 SS_WORDELLIPSIS, "49152", , 
.常量 WM_GETTEXTLENGTH, "14", , 
.常量 WM_GETTEXT, "13", , 
.常量 WM_SHOWWINDOW, "24", , 
.常量 WM_ENABLE, "10", , 
.常量 SW_HIDE, "0", , 
.常量 SW_SHOW, "5", , 
.常量 HWND_TOPMOST, "-1", , 
.常量 HWND_NOTOPMOST, "-2", , 
.常量 SWP_NOSIZE, "1", , 
.常量 SWP_NOMOVE, "2", , 
.常量 EM_SETREADONLY, "207", , 
.常量 WM_COMMAND, "273", , 
.常量 WM_SYSCOMMAND, "274", , 
.常量 WM_ACTIVATE, "6", , 
.常量 GMEM_FIXED, "0", , 
.常量 RDW_INVALIDATE, "1", , 
.常量 IDC_ARROW, "32512", , 
.常量 IDC_CROSS, "32515", , 
.常量 CWP_ALL, "0", , 
.常量 DSTINVERT, "5570569", , 
.常量 Flashdc, "777", , 
.常量 PATCOPY, "15728673", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 POINTAPI, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 RECT, , 
    .成员 Left, 整数型, , , 
    .成员 Top, 整数型, , , 
    .成员 Right, 整数型, , , 
    .成员 Bottom, 整数型, , , 

数据类型 MODULEENTRY32, , 
    .成员 dwSize, 整数型, , , 548
    .成员 th32ModuleID, 整数型, , , 模块ID
    .成员 th32ProcessID, 整数型, , , 进程ID
    .成员 GlblcntUsage, 整数型, , , 全局引用数
    .成员 ProccntUsage, 整数型, , , 引用数
    .成员 modBaseAddr, 整数型, , , 模块基址
    .成员 modBaseSize, 整数型, , , 模块大小
    .成员 hModule, 整数型, , , 模块句柄
    .成员 szModule, 字节型, , "256", 模块名
    .成员 szExePath, 字节型, , "260", 模块路径

数据类型 PROCESSENTRY32, , 
    .成员 dwsize, 整数型, , , 296
    .成员 cntusage, 整数型, , , 引用数
    .成员 th32ProcessID, 整数型, , , 进程ID
    .成员 th32defaultheapid, 整数型, , , 默认堆ID
    .成员 th32moduleid, 整数型, , , 模块ID
    .成员 cntthreads, 整数型, , , 线程数
    .成员 th32ParentProcessID, 整数型, , , 父进程ID
    .成员 pcpriclassbase, 整数型, , , 线程基本优先级
    .成员 dwflags, 整数型, , , 
    .成员 szExefile, 字节型, , "260", 进程名

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 POINT, POINTAPI, , , 

数据类型 OPENFILENAME, , 
    .成员 lStructSize, 整数型, , , 
    .成员 hwndOwner, 整数型, , , 
    .成员 hInstance, 整数型, , , 
    .成员 lpstrFilter, 文本型, , , 
    .成员 lpstrCustomFilter, 文本型, , , 
    .成员 nMaxCustFilter, 整数型, , , 
    .成员 nFilterIndex, 整数型, , , 
    .成员 lpstrFile, 文本型, , , 
    .成员 nMaxFile, 整数型, , , 
    .成员 lpstrFileTitle, 文本型, , , 
    .成员 nMaxFileTitle, 整数型, , , 
    .成员 lpstrInitialDir, 文本型, , , 
    .成员 lpstrTitle, 文本型, , , 
    .成员 flags, 整数型, , , 
    .成员 nFileOffset, 短整数型, , , 
    .成员 nFileExtension, 短整数型, , , 
    .成员 lpstrDefExt, 文本型, , , 
    .成员 lCustData, 整数型, , , 
    .成员 lpfnHook, 整数型, , , 
    .成员 lpTemplateName, 文本型, , , 

数据类型 BITMAPINFO, , 位图信息;
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 设备无关位图;
    .成员 bmiColors, 整数型, , , 颜色表信息;

数据类型 BITMAPINFOHEADER, , 设备无关位图;
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 位图的宽度(单位像素)
    .成员 biHeight, 整数型, , , 位图的高度
    .成员 biPlanes, 短整数型, , , 色彩平面数
    .成员 biBitCount, 短整数型, , , 像素的位数
    .成员 biCompression, 整数型, , , 压缩方式（0不压缩）
    .成员 biSizeImage, 整数型, , , 位图数据的字节数
    .成员 biXPelsPerMeter, 整数型, , , 水平分辨率
    .成员 biYPelsPerMeter, 整数型, , , 垂直分辨率
    .成员 biClrUsed, 整数型, , , 位图中使用的颜色数
    .成员 biClrImportant, 整数型, , , 位图中重要的颜色数目

数据类型 RGBQUAD, , 颜色表信息;
    .成员 rgbBlue, 字节型, , , 蓝色的比例
    .成员 rgbGreen, 字节型, , , 绿色的比例
    .成员 rgbRed, 字节型, , , 红色的比例
    .成员 rgbReserved, 字节型, , , 保留值0

数据类型 位图信息_, , BITMAPINFO
    .成员 结果大小, 整数型, , , biSize
    .成员 位图宽度, 整数型, , , biWidth
    .成员 位图高度, 整数型, , , biHeight
    .成员 位图位面数, 短整数型, , , biPlanes
    .成员 位深度, 短整数型, , , biBitCount
    .成员 压缩率, 整数型, , , biCompression
    .成员 位图大小, 整数型, , , biSizeImage
    .成员 水平折像度, 整数型, , , biXPelsPerMeter
    .成员 垂直折像度, 整数型, , , biYPelsPerMeter
    .成员 位图颜色表索引, 整数型, , , biClrUsed
    .成员 位图显示索引, 整数型, , , biClrImportant
    .成员 蓝色值, 字节型, , , rgbBlue
    .成员 绿色值, 字节型, , , rgbGreen
    .成员 红色值, 字节型, , , rgbRed
    .成员 保留参数, 字节型, , , rgbReserved

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 BITMAP, , 
    .成员 bmType, 整数型, , , 
    .成员 bmWidth, 整数型, , , 
    .成员 bmHeight, 整数型, , , 
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 整数型, 传址, , 

数据类型 GdiplusStartupInput, 公开, 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

.全局变量 hWnd, 整数型, , , 
.全局变量 采集的数据是否是十六进制, 逻辑型, , , 

.DLL命令 GetOpenFileName, 整数型, "comdlg32.dll", "GetOpenFileNameA", , 
    .参数 pOpenfilename, OPENFILENAME, 传址, 

.DLL命令 SetWindowPos, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hWndInsertAfter, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 cx, 整数型, , 
    .参数 cy, 整数型, , 
    .参数 wFlags, 整数型, , 

.DLL命令 SetCapture, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 ClientToScreen, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpPoint, POINTAPI, 传址, 

.DLL命令 WindowFromPoint, 整数型, "user32", "", , 
    .参数 xPoint, 整数型, , 
    .参数 yPoint, 整数型, , 

.DLL命令 GetLastError, 整数型, "kernel32", "", , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 ReleaseCapture, 整数型, "user32", "", , 

.DLL命令 GetClassName, 整数型, "user32", "GetClassNameA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 GetParent, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 GetWindow, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 wCmd, 整数型, , 

.DLL命令 EnumChildWindows, 整数型, "user32", "", ,  为指定的父窗口枚举子窗口 
    .参数 hWndParent, 整数型, , 
    .参数 lpEnumFunc, 子程序指针, , 
    .参数 lParam, 整数型, , 

.DLL命令 EnumWindows, 整数型, "user32.dll", "", , 枚举窗口列表中的所有父窗口（顶级和被所有窗口） 
    .参数 lpEnumFunc, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 ShowWindow, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 nCmdShow, 整数型, , 

.DLL命令 BringWindowToTop, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 EnableWindow, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 fEnable, 整数型, , 

.DLL命令 OpenProcess, 整数型, "kernel32", "", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 TerminateProcess, 整数型, "kernel32", "", , 
    .参数 hProcess, 整数型, , 
    .参数 uExitCode, 整数型, , 

.DLL命令 TerminateThread, 整数型, "kernel32", "", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 PtInRect, 整数型, "user32", "", , 
    .参数 lpRect, RECT, 传址, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32", "", , 
    .参数 hDestDC, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hSrcDC, 整数型, , 
    .参数 xSrc, 整数型, , 
    .参数 ySrc, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 GetDesktopWindow, 整数型, "user32", "", , 

.DLL命令 SetROP2, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 
    .参数 nDrawMode, 整数型, , 

.DLL命令 GetROP2, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 

.DLL命令 Rectangle, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 
    .参数 X1, 整数型, , 
    .参数 Y1, 整数型, , 
    .参数 X2, 整数型, , 
    .参数 Y2, 整数型, , 

.DLL命令 SelectObject, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 
    .参数 hObject, 整数型, , 

.DLL命令 DeleteObject, 整数型, "gdi32", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 GetCursorPos, 整数型, "user32", "", , 
    .参数 lpPoint, POINTAPI, 传址, 

.DLL命令 Sleep, 空白型, "kernel32", "", , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, RECT, 传址, 

.DLL命令 ReleaseDC, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 GetWindowDC, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 CreatePen, 整数型, "gdi32", "", , 
    .参数 nPenStyle, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 crColor, 整数型, , 

.DLL命令 GetDC, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 GetDCEx, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hrgnclip, 整数型, , 
    .参数 fdwOptions, 整数型, , 

.DLL命令 CreateCompatibleDC, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 

.DLL命令 DeleteDC, 整数型, "gdi32", "", , 
    .参数 hdc, 整数型, , 

.DLL命令 SetActiveWindow, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 GetClassLong, 整数型, "user32", "GetClassLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 ShellExecute, 整数型, "shell32.dll", "ShellExecuteA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpOperation, 文本型, , 
    .参数 lpFile, 文本型, , 
    .参数 lpParameters, 文本型, , 
    .参数 lpDirectory, 文本型, , 
    .参数 nShowCmd, 整数型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpdwProcessId, 整数型, 传址, 

.DLL命令 Module32First, 整数型, "KERNEL32.DLL", "", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lpme, MODULEENTRY32, 传址, 

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 cch, 整数型, , 

.DLL命令 GetStockObject, 整数型, "gdi32", "", , 
    .参数 nIndex, 整数型, , 

.DLL命令 GetClientRect, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, RECT, 传址, 

.DLL命令 GetProcessId, 整数型, "", "", , ?????????
    .参数 hwnd, 整数型, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "", , 
    .参数 dwFlags, 整数型, , 
    .参数 th32ProcessID, 整数型, , 

.DLL命令 CloseHandle, 整数型, "kernel32", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 GetMenu, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 CreateThread, 整数型, "", "", , CreateThread (0, 0, &处理工作线程, 0, 0, 0)
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 SysAllocStringByteLen_exp, 文本型, "oleaut32.dll", "SysAllocStringByteLen", , 郁闷不能出现{0}
    .参数 m_pBase, 字节集, , 
    .参数 FunctionCall, 整数型, , 

.DLL命令 Process32First, 整数型, "", "", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, 传址, 

.DLL命令 Process32Next, 整数型, "", "", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, 传址, 

.DLL命令 GetWindowsDirectory, 整数型, "", "GetWindowsDirectoryA", , 
    .参数 lpBuffer, 字节型, 数组, 
    .参数 nSize, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32", "", , 

.DLL命令 SysAllocStringByteLen, 文本型, "oleaut32.dll", "", , 
    .参数 m_pBase, 字节型, 数组, 
    .参数 FunctionCall, 整数型, , 

.DLL命令 CharLower, 文本型, "user32", "CharLowerA", , 
    .参数 lpsz, 文本型, , 

.DLL命令 PostMessage, 整数型, "user32", "PostMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 ExitProcess, 空白型, "kernel32", "", , 
    .参数 uExitCode, 整数型, , 

.DLL命令 MessageBox, 整数型, "user32", "MessageBoxA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 lpCaption, 文本型, , 
    .参数 wType, 整数型, , 

.DLL命令 SetTimer, 整数型, "", "SetTimer", , 
    .参数 hwnd, 整数型, , 
    .参数 event, 整数型, , 
    .参数 out, 整数型, , 
    .参数 lpTimerFunc, 整数型, , 

.DLL命令 lstrcpyn_指针, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 子程序指针, , 
    .参数 lpString2, 子程序指针, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GetTickCount, 整数型, "kernel32", "", , 

.DLL命令 PeekMessage, 整数型, "user32", "PeekMessageA", , 
    .参数 lpMsg, MSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 wRemoveMsg, 整数型, , 

.DLL命令 TranslateMessage, 整数型, "user32", "", , 
    .参数 lpMsg, MSG, 传址, 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 
    .参数 lpMsg, MSG, 传址, 

.DLL命令 KillTimer, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", , 
    .参数 hWnd1, 整数型, , 
    .参数 hWnd2, 整数型, , 
    .参数 lpsz1, 文本型, , 
    .参数 lpsz2, 文本型, , 

.DLL命令 IsWindow, 逻辑型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 SetWindowText, 整数型, "user32", "SetWindowTextA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 

.DLL命令 lstrcpyn_字节, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 字节型, 传址 数组, 
    .参数 lpString2, 字节型, 传址 数组, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存
    .参数 Destination, 整数型, , 内存指针
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 数据

.DLL命令 wvsprintf, 整数型, "user32.dll", "wvsprintfA", , 
    .参数 lpstr, 文本型, , 
    .参数 lpcstr, 文本型, , 
    .参数 OptionalArguments, 整数型, 传址, 

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 文本型, 传址, 
    .参数 lpString2, 文本型, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 PrintWindow, 逻辑型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 GetObject, 整数型, "gdi32", "GetObjectA", , 取得对指定对象进行说明的一个结构。windows手册建议用GetObject这个名字来引用该函数。GetObjectAPI在vb中用于避免与GetObject关键字混淆  如lpObject设为零（用ByVal As Long在这种情况下传递一个NULL参数），则必须设置缓冲区的长度。如执行成功，返回载入结构内部的实际字节数；如失败，返回零值
    .参数 hObject, 整数型, , 画笔、刷子、字体、位图或调色板等对象的句柄
    .参数 nCount, 整数型, , 欲取回的字节数。通常是由lpObject定义的那个结构的长度
    .参数 lpObject, BITMAP, , 任何类型，用于容纳对象数据的结构。针对画笔，通常是一个LOGPEN结构；针对扩展画笔，通常是EXTLOGPEN；针对字体是LOGBRUSH；针对位图是BITMAP；针对DIBSection位图是DIBSECTION；针对调色板，应指向一个整型变量，代表调色板中的条目数量

.DLL命令 GetDIBits_BimapInfo, 整数型, "", "GetDIBits", , 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits, 整数型, "gdi32", "GetDIBits", , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里  非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 aHDC, 整数型, , 定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 hBitmap, 整数型, , 源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 nStartScan, 整数型, , 欲复制到DIB中的第一条扫描线的编号
    .参数 nNumScans, 整数型, , 欲复制的扫描线数量
    .参数 lpBits, 字节集, , 指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 lpBI, BITMAPINFO, , BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 wUsage, 整数型, , 下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;

.DLL命令 CopyMemory_BITMAPINFO, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_BITMAPFILEHEADER, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", 公开, 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", 公开, 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", 公开, 
    .参数 uFlags, 空白型, , 
    .参数 dwBytes, 空白型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "ole32.dll", "CreateStreamOnHGlobal", 公开, 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 对象, 传址, 

.DLL命令 GlobalLock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 逻辑型, "", "", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 GetObjectPtr, 整数型, "", "lstrcpyn", 公开, 
    .参数 lpString1, 对象, 传址, 
    .参数 lpString2, 对象, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", 公开, 
    .参数 stream, 整数型, , 
    .参数 bitmap, 空白型, 传址, 

.DLL命令 GdipSaveImageToStream_int, 整数型, "gdiplus.dll", "GdipSaveImageToStream", 公开, 
    .参数 image, 空白型, , 
    .参数 stream, 空白型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 GetHGlobalFromStream_int, 空白型, "ole32.dll", "GetHGlobalFromStream", 公开, 
    .参数 pstm, 空白型, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GlobalSize, 整数型, "", "", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 CopyMemory, 空白型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage", 公开, 
    .参数 image, 整数型, , 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", 公开, 
    .参数 hMem, 空白型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", 公开, 
    .参数 token, 整数型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 LoadCursor, 整数型, "user32", "LoadCursorA", , 从指定的模块或应用程序实例中载入一个鼠标指针。LoadCursorBynum是LoadCursor函数的类型安全声明  执行成功则返回已载入的指针的句柄；零表示失败。在Windows ;    95 和Win16环境中，这个函数只能载入标准尺寸的图标
    .参数 hInstance, 整数型, , 一个DLL的模块句柄；或者一个实例句柄，指定包含了鼠标指针的可执行程序
    .参数 lpCursorName, 整数型, , 作为一个字串，指定欲载入的指针资源。作为一个长整数值，指定欲载入的资源ID；或者设置一个常数，代表某幅固有系统指针。如装载的是一个固有系统指针，注意hInstance参数应设为零。在api32.txt文件中以前缀IDC_ 作为标志;

.DLL命令 UpdateWindow, 整数型, "user32", "UpdateWindow", , 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 欲更新窗口的句柄;

.DLL命令 RedrawWindow, 整数型, "user32", "RedrawWindow", , 根据fuRedraw旗标的设置，重画全部或部分窗口  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 要重画的窗口的句柄。零表示更新桌面窗口
    .参数 lprcUpdate, 整数型, , RECT，窗口中需要重画的一个矩形区域
    .参数 hrgnUpdate, 整数型, , 一个“区”的句柄，这个区描述了要重画的窗口区域。“区”：Region
    .参数 fuRedraw, 整数型, , 规定具体重画操作的旗标。下列常数可组合使用，从而进行复杂的重画行动;RDW_ERASE：重画前，先清除重画区域的背景。也必须指定RDW_INVALIDATE;RDW_FRAME：如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW_INVALIDATE;RDW_INTERNALPAINT：即使窗口并非无效，也向其投递一条WM_PAINT消息;RDW_INVALIDATE：禁用（屏蔽）重画区域;RDW_NOERASE：禁止删除重画区域的背景;RDW_NOFRAME：禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW_VALIDATE;RDW_NOINTERNALPAINT：禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息;RDW_VALIDATE：检验重画区域;RDW_ERASENOW：立即删除指定的重画区域;RDW_UPDATENOW：立即更新指定的重画区域;RDW_ALLCHILDREN：重画操作包括子窗口（前提是它们存在于重画区域）;RDW_NOCHILDREN：重画操作排除子窗口（前提是它们存在于重画区域）;

.DLL命令 SetSystemCursor, 整数型, "user32", "SetSystemCursor", , 改变任何一个标准系统指针  非零表示成功，零表示失败。会设置GetLastError
    .参数 hcur, 整数型, , 新指针
    .参数 id, 整数型, , 以 OCR_ 前缀起头的一个常数，用于指定标准系统指针;

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 整数型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 DestroyCursor, 整数型, "user32", "DestroyCursor", , 清除指定的鼠标指针，并释放它占用的所有系统资源。不要用这个函数清除随同LoadCursor函数载入的系统指针资源  非零表示成功，零表示失败。会设置GetLastError
    .参数 hCursor, 整数型, , 欲清除的指针对象的句柄;

.DLL命令 ChildWindowFromPoint, 整数型, "user32", "", , 
    .参数 hWndParent, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 ChildWindowFromPointEx, 整数型, "user32", "", , 
    .参数 hWnd, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 un, 整数型, , 

.DLL命令 ScreenToClient, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpPoint, POINTAPI, 传址, 

.DLL命令 GetCursor, 整数型, "user32", "", , 

.DLL命令 CopyIcon, 整数型, "user32", "", , 
    .参数 hIcon, 整数型, , 

.DLL命令 LoadCursorFromFile, 整数型, "user32", "LoadCursorFromFileA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 CreateDC, 整数型, "gdi32", "CreateDCA", , 为专门设备创建设备场景  新设备场景句柄，若出错则为零
    .参数 lpDriverName, 文本型, , 用vbNull传递null值给该参数，除非：1、用DISPLAY，是获取整个屏幕的设备场景；2、用WINSPOOL，则是访问打印驱动
    .参数 lpDeviceName, 文本型, , 所用专门设备的名称。该名由打印管理器分配显示
    .参数 lpOutput, 文本型, , 用vbNull传递null值给该参数
    .参数 lpInitData, 整数型, , DEVMODE，这个结构保存初始值。用CreateDCBynum传递0（NULL）值则适用默认设置  示例：靠近屏幕左上角画一个矩形dc& = CreateDCBynum("DISPLAY"

.DLL命令 IsRectEmpty, 整数型, "user32", "IsRectEmpty", , 判断一个矩形是否为空  非零表示成功，零表示失败。会设置GetLastError
    .参数 lpRect, RECT, , RECT，要检查的矩形;

.DLL命令 PatBlt, 整数型, "gdi32", "PatBlt", , 在当前选定的刷子的基础上，用一个图案填充指定的设备场景  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 欲描绘的一个设备场景的句柄
    .参数 x, 整数型, , 对目标DC中目标矩形左上角位置进行定义的一个点，用逻辑坐标表示
    .参数 y, 整数型, , 同上
    .参数 nWidth, 整数型, , 目标矩形的宽度和高度，用逻辑坐标表示
    .参数 nHeight, 整数型, , 同上
    .参数 dwRop, 整数型, , 传输过程中欲进行的光栅运算。对一个源进行引用的光栅运算也许不能在这个函数中使用;

.DLL命令 SetFocus, 整数型, "user32", "SetFocus", , 设置键盘焦点  前一个拥有焦点的窗口的句柄
    .参数 hwnd, 整数型, , 准备接收焦点的窗口的句柄

.DLL命令 StretchBlt, 整数型, "gdi32", "StretchBlt", , 将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容。这个函数会在设备场景中定义一个目标矩形，并在位图中定义一个源图象。源矩形会根据需要进行伸缩，以便与目标矩形的大小相符  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 目标设备场景
    .参数 x, 整数型, , 目标矩形左上角的x
    .参数 y, 整数型, , 同上
    .参数 nWidth, 整数型, , 目标矩形的宽度和高度，以逻辑坐标表示
    .参数 nHeight, 整数型, , 同上
    .参数 hSrcDC, 整数型, , 源设备场景。如光栅运算未指定一个源，则这个参数应为零
    .参数 xSrc, 整数型, , 用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 ySrc, 整数型, , 同上
    .参数 nSrcWidth, 整数型, , 分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
    .参数 nSrcHeight, 整数型, , 同上
    .参数 dwRop, 整数型, , 传输过程中进行的光栅运算。如刷子属于光栅运算的一部分，就使用选入目标DC的刷子;

.DLL命令 GetInputState, 整数型, "user32", "", , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 鼠标按下, 逻辑型, , , 
.程序集变量 tempcurs, 整数型, , , 鼠标指针
.程序集变量 是否有框, 逻辑型, , , 画框
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (., 相加 (“Spy+++ V”, 到文本 (#Ver)))
SetFocus (取窗口句柄 ())
.如果 (是否为调试版 ()) ' 发行时候最好删除
    
.否则
    CreateThread (0, 0, lstrcpyn_指针 (&反调试, &反调试, 0), 0, 0, 0)
.如果结束


.子程序 _图形按钮1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 hCursor, 整数型, , , 
.局部变量 hInstance, 整数型, , , 
.局部变量 mydir, 字节型, , "255", 
.局部变量 currenthcurs, 整数型, , , 
.局部变量 lDir, 整数型, , , 
.局部变量 newhcurs, 整数型, , , 

赋值 (鼠标按下, 真)
赋值 (., #图片2)
 ' hInstance ＝ GetModuleHandle (0)
 ' hCursor ＝ LoadCursor (hInstance, #IDC_CROSS)
 ' SetSystemCursor (hCursor, #OCR_NORMAL)
 ' DestroyCursor (hCursor)

赋值 (currenthcurs, GetCursor ()) ' 取鼠标指针
赋值 (tempcurs, CopyIcon (currenthcurs))
 ' newhcurs ＝ LoadCursor (0, #IDC_CROSS)
赋值 (lDir, GetWindowsDirectory (mydir, 255))
赋值 (newhcurs, LoadCursorFromFile (相加 (SysAllocStringByteLen (mydir, lDir), “\cursors\cross_r.cur”)))
SetSystemCursor (newhcurs, #OCR_NORMAL) ' 设置鼠标指针
DestroyCursor (newhcurs)
SetTimer (取窗口句柄 (), #Flashdc, 400, lstrcpyn_指针 (&时钟画框闪烁, &时钟画框闪烁, 0))

.子程序 _图形按钮1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 hCursor, 整数型, , , 

赋值 (鼠标按下, 假)
赋值 (., #图片1)
.如果真 (不等于 (tempcurs, 0))
    SetSystemCursor (tempcurs, #OCR_NORMAL) ' 还原鼠标指针
.如果真结束

KillTimer (取窗口句柄 (), #Flashdc)
.如果真 (是否有框)
    Flashdc (hWnd)
.如果真结束

.如果真 (IsWindow (hWnd))
    CreateThread (0, 0, lstrcpyn_指针 (&数据处理线程, &数据处理线程, 0), 0, 0, 0)
     ' RedrawWindow (hWnd, 0, 0, #RDW_INVALIDATE)
.如果真结束

 ' hCursor ＝ LoadCursor (0, #IDC_ARROW)
 ' SetSystemCursor (hCursor, #OCR_NORMAL)
 ' DestroyCursor (hCursor)

.子程序 _图形按钮1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 鼠标点, POINTAPI, , , 
.局部变量 hdc, 整数型, , , 
.局部变量 hBrush, 整数型, , , 
.局部变量 画笔句柄, 整数型, , , 
.局部变量 lpRect, RECT, , , 
.局部变量 ls_hWnd, 整数型, , , 
.局部变量 lpCreateDC, 整数型, , , 

.如果真 (等于 (鼠标按下, 真))
    GetCursorPos (鼠标点)
    赋值 (ls_hWnd, WindowFromPoint (鼠标点.x, 鼠标点.y))
    ScreenToClient (ls_hWnd, 鼠标点)
     ' ls_hWnd ＝ ChildWindowFromPoint (ls_hWnd, 鼠标点.x, 鼠标点.y)
    赋值 (ls_hWnd, ChildWindowFromPointEx (ls_hWnd, 鼠标点.x, 鼠标点.y, #CWP_ALL))
    .如果真 (不等于 (ls_hWnd, 0))
        .如果真 (不等于 (ls_hWnd, hWnd))
             ' RedrawWindow (hWnd, 0, 0, #RDW_INVALIDATE)
            .如果真 (是否有框)
                Flashdc (hWnd)
            .如果真结束
            
            赋值 (hWnd, ls_hWnd)
        .如果真结束
        
         ' hdc ＝ GetDC (ls_hWnd)
         ' hBrush ＝ GetStockObject (#NULL_BRUSH)
         ' SelectObject (hdc, hBrush)
         ' GetClientRect (ls_hWnd, lpRect)
         ' Rectangle (hdc, lpRect.Left, lpRect.Top, lpRect.Right, lpRect.Bottom)
         ' ReleaseDC (ls_hWnd, hdc)
    .如果真结束
    
.如果真结束


.子程序 时钟画框闪烁, 空白型, , 
CreateThread (0, 0, lstrcpyn_指针 (&Flashdc, &Flashdc, 0), 0, 0, 0)

.子程序 Flashdc, 空白型, , 
.参数 句柄, 整数型, , 

.局部变量 lpCreateDC, 整数型, , , 
.局部变量 lpRect, RECT, , , 

赋值 (是否有框, 取反 (是否有框))
.如果 (等于 (句柄, 0))
    GetWindowRect (hWnd, lpRect)
.否则
    GetWindowRect (句柄, lpRect)
.如果结束

赋值 (lpCreateDC, CreateDC (“DISPLAY”, “”, “”, 0))
.如果真 (等于 (IsRectEmpty (lpRect), 0))
    PatBlt (lpCreateDC, lpRect.Left, lpRect.Top, 相减 (lpRect.Right, lpRect.Left), 3, #DSTINVERT)
    PatBlt (lpCreateDC, lpRect.Left, 相加 (lpRect.Top, 3), 3, 相减 (lpRect.Bottom, lpRect.Top, 6), #DSTINVERT)
    PatBlt (lpCreateDC, lpRect.Right, 相加 (lpRect.Top, 3), -3, 相减 (lpRect.Bottom, lpRect.Top, 6), #DSTINVERT)
    PatBlt (lpCreateDC, lpRect.Left, lpRect.Bottom, 相减 (lpRect.Right, lpRect.Left), -3, #DSTINVERT)
.如果真结束

DeleteDC (lpCreateDC)

.子程序 数据处理线程, 空白型, , 
.局部变量 lpClassName, 文本型, , , 
.局部变量 窗口标题, 文本型, , , 
.局部变量 lpRect, RECT, , , 
.局部变量 pid, 整数型, , , 
.局部变量 hModule, 整数型, , , 
.局部变量 ModuleBuffer, MODULEENTRY32, , , 
.局部变量 Style, 整数型, , , 
.局部变量 exStyle, 整数型, , , 
.局部变量 glSTYLE, 整数型, , , 
.局部变量 ls_hWnd, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 Result, 整数型, , , 
.局部变量 临时整数, 整数型, , , 
.局部变量 hdc, 整数型, , , 
.局部变量 Shdc, 整数型, , , 
.局部变量 Thdc, 整数型, , , 
.局部变量 内存场景, 整数型, , , 

.如果真 (取反 (IsWindow (hWnd)))
    返回 ()
.如果真结束

.如果 (等于 (., 真))
    赋值 (采集的数据是否是十六进制, 真)
.否则
    赋值 (采集的数据是否是十六进制, 假)
.如果结束

清空 ()
清空 ()
清空 ()
.计次循环首 (取项目数 (), i)
    相减 (i, 1).选中项目 (假)
.计次循环尾 ()
 ' -------------------↑↑初始化控件↑↑-----------------------------------
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (hWnd)) ' 窗口句柄
    赋值 (., 十进制转十六进制 (hWnd)) ' 本窗口句柄
.否则
    赋值 (., 到文本 (hWnd)) ' 窗口句柄
    赋值 (., 到文本 (hWnd)) ' 本窗口句柄
.如果结束

赋值 (窗口标题, 取窗口标题_ (hWnd))
赋值 (., 窗口标题)
赋值 (., 窗口标题)
 ' ---------------------↑↑标题文本↑↑-----------------------------------
赋值 (ls_hWnd, GetWindow (hWnd, #GW_HWNDPREV))
.如果 (等于 (ls_hWnd, 0))
    赋值 (., #黑色)
    赋值 (., 到字节集 (0))
.否则
    赋值 (., #蓝色)
    赋值 (., 到字节集 (14))
.如果结束

赋值 (., 取窗口标题_ (ls_hWnd))
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (ls_hWnd))
.否则
    赋值 (., 到文本 (ls_hWnd))
.如果结束

 ' -------------------↑↑上一窗口句柄↑↑---------------------------------
赋值 (ls_hWnd, GetWindow (hWnd, #GW_HWNDNEXT))
.如果 (等于 (ls_hWnd, 0))
    赋值 (., #黑色)
    赋值 (., 到字节集 (0))
.否则
    赋值 (., #蓝色)
    赋值 (., 到字节集 (14))
.如果结束

赋值 (., 取窗口标题_ (ls_hWnd))
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (ls_hWnd))
.否则
    赋值 (., 到文本 (ls_hWnd))
.如果结束

 ' -------------------↑↑下一窗口句柄↑↑---------------------------------
赋值 (ls_hWnd, GetParent (hWnd))
.如果 (等于 (ls_hWnd, 0))
    赋值 (., #黑色)
    赋值 (., 到字节集 (0))
.否则
    赋值 (., #蓝色)
    赋值 (., 到字节集 (14))
.如果结束

赋值 (., 取窗口标题_ (ls_hWnd))
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (ls_hWnd))
.否则
    赋值 (., 到文本 (ls_hWnd))
.如果结束

 ' ---------------------↑↑父窗口句柄↑↑---------------------------------
赋值 (ls_hWnd, GetWindow (hWnd, #GW_MAX))
.如果 (等于 (ls_hWnd, 0))
    赋值 (., #黑色)
    赋值 (., 到字节集 (0))
.否则
    赋值 (., #蓝色)
    赋值 (., 到字节集 (14))
.如果结束

赋值 (., 取窗口标题_ (ls_hWnd))
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (ls_hWnd))
.否则
    赋值 (., 到文本 (ls_hWnd))
.如果结束

 ' -------------------↑↑第一子窗口句柄↑↑-------------------------------
赋值 (ls_hWnd, GetWindow (hWnd, #GW_OWNER))
.如果 (等于 (ls_hWnd, 0))
    赋值 (., #黑色)
    赋值 (., 到字节集 (0))
.否则
    赋值 (., #蓝色)
    赋值 (., 到字节集 (14))
.如果结束
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (ls_hWnd))
.否则
    赋值 (., 到文本 (ls_hWnd))
.如果结束

 ' -------------------↑↑所有者窗口句柄↑↑-------------------------------

 ' --------------------------------------------↑↑窗口句柄↑↑--------------------------------------
赋值 (lpClassName, 取窗口类名_ (hWnd))
赋值 (., lpClassName)
赋值 (., lpClassName)
 ' ---------------------↑↑窗口类名↑↑-----------------------------------
GetWindowRect (hWnd, lpRect)
赋值 (., 相加 (“(”, 到文本 (lpRect.Left), “,”, 到文本 (lpRect.Top), “),”, “(”, 到文本 (lpRect.Right), “,”, 到文本 (lpRect.Bottom), “)  ”, 到文本 (相减 (lpRect.Right, lpRect.Left)), “x”, 到文本 (相减 (lpRect.Bottom, lpRect.Top))))
 ' ---------------------↑↑窗口矩形↑↑-----------------------------------
.如果 (等于 (., 真))
    赋值 (., 到文本 (十进制转十六进制 (GetMenu (hWnd))))
.否则
    赋值 (., 到文本 (GetMenu (hWnd)))
.如果结束

 ' -----------------------↑↑窗口ID↑↑-----------------------------------
GetWindowThreadProcessId (hWnd, pid)
.如果 (等于 (采集的数据是否是十六进制, 真))
    赋值 (., 十进制转十六进制 (pid))
.否则
    赋值 (., 到文本 (pid))
.如果结束

 ' -----------------------↑↑进程ID↑↑-----------------------------------
赋值 (hModule, CreateToolhelp32Snapshot (#TH32CS_SNAPMODULE, pid))
赋值 (ModuleBuffer.dwSize, 548)
Module32First (hModule, ModuleBuffer)
CloseHandle (hModule)
赋值 (., 到文本 (ModuleBuffer.szExePath)) ' 程序路径
 ' -----------------------↑↑程序路径↑↑-----------------------------------
赋值 (Style, GetWindowLong (hWnd, #GWL_STYLE))
赋值 (Result, Style)
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (Style))
.否则
    赋值 (., 到文本 (Style))
.如果结束

.如果真 (等于 (位或 (Style, #WS_POPUP), Style))
    到文本 (“WS_POPUP”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_POPUP))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_GROUP), Style))
    到文本 (“WS_GROUP”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_GROUP))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_BORDER), Style))
    到文本 (“WS_BORDER”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_BORDER))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_ICONIC), Style))
    到文本 (“WS_ICONIC”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_ICONIC))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_VISIBLE), Style)) ' 窗口可视
    到文本 (“WS_VISIBLE”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_VISIBLE))
    0.选中项目 (真)
.如果真结束
.如果真 (等于 (位或 (Style, #WS_CAPTION), Style))
    到文本 (“WS_CAPTION”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_CAPTION))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_VSCROLL), Style))
    到文本 (“WS_VSCROLL”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_VSCROLL))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_HSCROLL), Style))
    到文本 (“WS_HSCROLL”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_HSCROLL))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_SYSMENU), Style))
    到文本 (“WS_SYSMENU”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_SYSMENU))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_TABSTOP), Style))
    到文本 (“WS_TABSTOP”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_TABSTOP))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_SIZEBOX), Style))
    到文本 (“WS_SIZEBOX”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_SIZEBOX))
.如果真结束
.如果真 (等于 (位或 (Style, #WS_MAXIMIZE), Style)) ' 窗口最大化
    到文本 (“WS_MAXIMIZE”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_MAXIMIZE))
    4.选中项目 (真)
.如果真结束
.如果真 (等于 (位或 (Style, #WS_MINIMIZE), Style)) ' 窗口最小化
    到文本 (“WS_MINIMIZE”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_MINIMIZE))
    5.选中项目 (真)
.如果真结束
.如果 (等于 (位或 (Style, #WS_DISABLED), Style)) ' 窗口可用
    到文本 (“WS_DISABLED”).加入项目 ()
    赋值 (Result, 相减 (Result, #WS_DISABLED))
.否则
    1.选中项目 (真)
.如果结束
.如果真 (等于 (位或 (Style, #WS_DLGFRAME), Style))
    赋值 (Result, 相减 (Result, #WS_DLGFRAME))
    到文本 (“WS_DLGFRAME”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (Style, #WS_THICKFRAME), Style))
    赋值 (Result, 相减 (Result, #WS_THICKFRAME))
    到文本 (“WS_THICKFRAME”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (Style, #WS_CHILDWINDOW), Style))
    赋值 (Result, 相减 (Result, #WS_CHILDWINDOW))
    到文本 (“WS_CHILDWINDOW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (Style, #WS_CLIPSIBLINGS), Style))
    赋值 (Result, 相减 (Result, #WS_CLIPSIBLINGS))
    到文本 (“WS_CLIPSIBLINGS”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (Style, #WS_MINIMIZEBOX), Style))
    赋值 (Result, 相减 (Result, #WS_MINIMIZEBOX))
    到文本 (“WS_MINIMIZEBOX”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (Style, #WS_MAXIMIZEBOX), Style))
    赋值 (Result, 相减 (Result, #WS_MAXIMIZEBOX))
    到文本 (“WS_MAXIMIZEBOX”).加入项目 ()
.如果真结束

 ' --------------------↑↑窗口基本样式↑↑-----------------------------------
赋值 (临时文本, lpClassName)
.判断开始 (等于 (CharLower (临时文本), “edit”))
    .如果真 (等于 (位或 (Style, #ES_LEFT), Style))
        赋值 (Result, 相减 (Result, #ES_LEFT))
        到文本 (“ES_LEFT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_RIGHT), Style))
        赋值 (Result, 相减 (Result, #ES_RIGHT))
        到文本 (“ES_RIGHT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_CENTER), Style))
        赋值 (Result, 相减 (Result, #ES_CENTER))
        到文本 (“ES_CENTER”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_PASSWORD), Style))
        赋值 (Result, 相减 (Result, #ES_PASSWORD))
        到文本 (“ES_PASSWORD”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_READONLY), Style))
        赋值 (Result, 相减 (Result, #ES_READONLY))
        到文本 (“ES_READONLY”).加入项目 ()
        3.选中项目 (真)
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_LOWERCASE), Style))
        赋值 (Result, 相减 (Result, #ES_LOWERCASE))
        到文本 (“ES_LOWERCASE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_MULTILINE), Style))
        赋值 (Result, 相减 (Result, #ES_MULTILINE))
        到文本 (“ES_MULTILINE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_NOHIDESEL), Style))
        赋值 (Result, 相减 (Result, #ES_NOHIDESEL))
        到文本 (“ES_NOHIDESEL”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_UPPERCASE), Style))
        赋值 (Result, 相减 (Result, #ES_UPPERCASE))
        到文本 (“ES_UPPERCASE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_OEMCONVERT), Style))
        赋值 (Result, 相减 (Result, #ES_OEMCONVERT))
        到文本 (“ES_OEMCONVERT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_WANTRETURN), Style))
        赋值 (Result, 相减 (Result, #ES_WANTRETURN))
        到文本 (“ES_WANTRETURN”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_AUTOHSCROLL), Style))
        赋值 (Result, 相减 (Result, #ES_AUTOHSCROLL))
        到文本 (“ES_AUTOHSCROLL”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #ES_AUTOVSCROLL), Style))
        赋值 (Result, 相减 (Result, #ES_AUTOVSCROLL))
        到文本 (“ES_AUTOVSCROLL”).加入项目 ()
    .如果真结束
    
.判断 (等于 (CharLower (临时文本), “button”))
    .如果真 (等于 (位或 (Style, #BS_TOP), Style))
        赋值 (Result, 相减 (Result, #BS_TOP))
        到文本 (“BS_TOP”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_FLAT), Style))
        赋值 (Result, 相减 (Result, #BS_FLAT))
        到文本 (“BS_FLAT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_ICON), Style))
        赋值 (Result, 相减 (Result, #BS_ICON))
        到文本 (“BS_ICON”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_LEFT), Style))
        赋值 (Result, 相减 (Result, #BS_LEFT))
        到文本 (“BS_LEFT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_RIGHT), Style))
        赋值 (Result, 相减 (Result, #BS_RIGHT))
        到文本 (“BS_RIGHT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_3STATE), Style))
        赋值 (Result, 相减 (Result, #BS_3STATE))
        到文本 (“BS_3STATE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_BITMAP), Style))
        赋值 (Result, 相减 (Result, #BS_BITMAP))
        到文本 (“BS_BITMAP”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_BOTTOM), Style))
        赋值 (Result, 相减 (Result, #BS_BOTTOM))
        到文本 (“BS_BOTTOM”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_CENTER), Style))
        赋值 (Result, 相减 (Result, #BS_CENTER))
        到文本 (“BS_CENTER”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_NOTIFY), Style))
        赋值 (Result, 相减 (Result, #BS_NOTIFY))
        到文本 (“BS_NOTIFY”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_GROUPBOX), Style))
        赋值 (Result, 相减 (Result, #BS_GROUPBOX))
        到文本 (“BS_GROUPBOX”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_LEFTTEXT), Style))
        赋值 (Result, 相减 (Result, #BS_LEFTTEXT))
        到文本 (“BS_LEFTTEXT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_PUSHLIKE), Style))
        赋值 (Result, 相减 (Result, #BS_PUSHLIKE))
        到文本 (“BS_PUSHLIKE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_MULTILINE), Style))
        赋值 (Result, 相减 (Result, #BS_MULTILINE))
        到文本 (“BS_MULTILINE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_OWNERDRAW), Style))
        赋值 (Result, 相减 (Result, #BS_OWNERDRAW))
        到文本 (“BS_OWNERDRAW”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_AUTO3STATE), Style))
        赋值 (Result, 相减 (Result, #BS_AUTO3STATE))
        到文本 (“BS_AUTO3STATE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_USERBUTTON), Style))
        赋值 (Result, 相减 (Result, #BS_USERBUTTON))
        到文本 (“BS_USERBUTTON”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_RADIOBUTTON), Style))
        赋值 (Result, 相减 (Result, #BS_RADIOBUTTON))
        到文本 (“BS_RADIOBUTTON”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_AUTOCHECKBOX), Style))
        赋值 (Result, 相减 (Result, #BS_AUTOCHECKBOX))
        到文本 (“BS_AUTOCHECKBOX”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #BS_AUTORADIOBUTTON), Style))
        赋值 (Result, 相减 (Result, #BS_AUTORADIOBUTTON))
        到文本 (“BS_AUTORADIOBUTTON”).加入项目 ()
    .如果真结束
     ' -----------------------↑↑Button控件基本样式↑↑-----------------------------------
.判断 (等于 (CharLower (临时文本), “static”))
    .如果真 (等于 (位或 (Style, #SS_ICON), Style))
        赋值 (Result, 相减 (Result, #SS_ICON))
        到文本 (“SS_ICON”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_LEFT), Style))
        赋值 (Result, 相减 (Result, #SS_LEFT))
        到文本 (“SS_LEFT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_RIGHT), Style))
        赋值 (Result, 相减 (Result, #SS_RIGHT))
        到文本 (“SS_RIGHT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BITMAP), Style))
        赋值 (Result, 相减 (Result, #SS_BITMAP))
        到文本 (“SS_BITMAP”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_CENTER), Style))
        赋值 (Result, 相减 (Result, #SS_CENTER))
        到文本 (“SS_CENTER”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_NOTIFY), Style))
        赋值 (Result, 相减 (Result, #SS_NOTIFY))
        到文本 (“SS_NOTIFY”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_SIMPLE), Style))
        赋值 (Result, 相减 (Result, #SS_SIMPLE))
        到文本 (“SS_SIMPLE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_SUNKEN), Style))
        赋值 (Result, 相减 (Result, #SS_SUNKEN))
        到文本 (“SS_SUNKEN”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_GRAYRECT), Style))
        赋值 (Result, 相减 (Result, #SS_GRAYRECT))
        到文本 (“SS_GRAYRECT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_NOPREFIX), Style))
        赋值 (Result, 相减 (Result, #SS_NOPREFIX))
        到文本 (“SS_NOPREFIX”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_TYPEMASK), Style))
        赋值 (Result, 相减 (Result, #SS_TYPEMASK))
        到文本 (“SS_TYPEMASK”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_USERITEM), Style))
        赋值 (Result, 相减 (Result, #SS_USERITEM))
        到文本 (“SS_USERITEM”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKRECT), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKRECT))
        到文本 (“SS_BLACKRECT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKRECT), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKRECT))
        到文本 (“SS_GRAYFRAME”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKRECT), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKRECT))
        到文本 (“SS_OWNERDRAW”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKRECT), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKRECT))
        到文本 (“SS_RIGHTJUST”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKRECT), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKRECT))
        到文本 (“SS_WHITERECT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_BLACKFRAME), Style))
        赋值 (Result, 相减 (Result, #SS_BLACKFRAME))
        到文本 (“SS_BLACKFRAME”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ETCHEDHORZ), Style))
        赋值 (Result, 相减 (Result, #SS_ETCHEDHORZ))
        到文本 (“SS_ETCHEDHORZ”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ETCHEDVERT), Style))
        赋值 (Result, 相减 (Result, #SS_ETCHEDVERT))
        到文本 (“SS_ETCHEDVERT”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_WHITEFRAME), Style))
        赋值 (Result, 相减 (Result, #SS_WHITEFRAME))
        到文本 (“SS_WHITEFRAME”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_CENTERIMAGE), Style))
        赋值 (Result, 相减 (Result, #SS_CENTERIMAGE))
        到文本 (“SS_CENTERIMAGE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ENDELLIPSIS), Style))
        赋值 (Result, 相减 (Result, #SS_ENDELLIPSIS))
        到文本 (“SS_ENDELLIPSIS”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ENHMETAFILE), Style))
        赋值 (Result, 相减 (Result, #SS_ENHMETAFILE))
        到文本 (“SS_ENHMETAFILE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ETCHEDFRAME), Style))
        赋值 (Result, 相减 (Result, #SS_ETCHEDFRAME))
        到文本 (“SS_ETCHEDFRAME”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_ELLIPSISMASK), Style))
        赋值 (Result, 相减 (Result, #SS_ELLIPSISMASK))
        到文本 (“SS_ELLIPSISMASK”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_PATHELLIPSIS), Style))
        赋值 (Result, 相减 (Result, #SS_PATHELLIPSIS))
        到文本 (“SS_PATHELLIPSIS”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_WORDELLIPSIS), Style))
        赋值 (Result, 相减 (Result, #SS_WORDELLIPSIS))
        到文本 (“SS_WORDELLIPSIS”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_REALSIZEIMAGE), Style))
        赋值 (Result, 相减 (Result, #SS_REALSIZEIMAGE))
        到文本 (“SS_REALSIZEIMAGE”).加入项目 ()
    .如果真结束
    .如果真 (等于 (位或 (Style, #SS_LEFTNOWORDWRAP), Style))
        赋值 (Result, 相减 (Result, #SS_LEFTNOWORDWRAP))
        到文本 (“SS_LEFTNOWORDWRAP”).加入项目 ()
    .如果真结束
    
.默认
    
.判断结束
.如果真 (大于 (Result, 0))
    .如果 (等于 (采集的数据是否是十六进制, 真))
        十进制转十六进制 (Result).加入项目 ()
    .否则
        到文本 (Result).加入项目 ()
    .如果结束
    
.如果真结束
 ' -----------------------↑↑Static控件基本样式↑↑-----------------------------------
 ' --------------------------------------------↑↑基本样式↑↑----------------------------------------
赋值 (exStyle, GetWindowLong (hWnd, #GWL_EXSTYLE))
赋值 (Result, exStyle)
.如果 (等于 (., 真))
    赋值 (., 十进制转十六进制 (exStyle))
.否则
    赋值 (., 到文本 (exStyle))
.如果结束

.如果真 (等于 (位或 (exStyle, #WS_EX_LEFT), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_LEFT))
    到文本 (“WS_EX_LEFT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_RIGHT), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_RIGHT))
    到文本 (“WS_EX_RIGHT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_LAYERED), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_LAYERED))
    到文本 (“WS_EX_LAYERED”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_TOPMOST), exStyle)) ' 总在最前
    赋值 (Result, 相减 (Result, #WS_EX_TOPMOST))
    到文本 (“WS_EX_TOPMOST”).加入项目 ()
    2.选中项目 (真)
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_MDICHILD), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_MDICHILD))
    到文本 (“WS_EX_MDICHILD”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_APPWINDOW), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_APPWINDOW))
    到文本 (“WS_EX_APPWINDOW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_LAYOUTRTL), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_LAYOUTRTL))
    到文本 (“WS_EX_LAYOUTRTL”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_CLIENTEDGE), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_CLIENTEDGE))
    到文本 (“WS_EX_CLIENTEDGE”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_LTRREADING), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_LTRREADING))
    到文本 (“WS_EX_LTRREADING”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_NOACTIVATE), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_NOACTIVATE))
    到文本 (“WS_EX_NOACTIVATE”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_RTLREADING), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_RTLREADING))
    到文本 (“WS_EX_RTLREADING”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_STATICEDGE), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_STATICEDGE))
    到文本 (“WS_EX_STATICEDGE”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_TOOLWINDOW), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_TOOLWINDOW))
    到文本 (“WS_EX_TOOLWINDOW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_WINDOWEDGE), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_WINDOWEDGE))
    到文本 (“WS_EX_WINDOWEDGE”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_ACCEPTFILES), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_ACCEPTFILES))
    到文本 (“WS_EX_ACCEPTFILES”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_CONTEXTHELP), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_CONTEXTHELP))
    到文本 (“WS_EX_CONTEXTHELP”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_TRANSPARENT), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_TRANSPARENT))
    到文本 (“WS_EX_TRANSPARENT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_CONTROLPARENT), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_CONTROLPARENT))
    到文本 (“WS_EX_CONTROLPARENT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_DLGMODALFRAME), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_DLGMODALFRAME))
    到文本 (“WS_EX_DLGMODALFRAME”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_LEFTSCROLLBAR), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_LEFTSCROLLBAR))
    到文本 (“WS_EX_LEFTSCROLLBAR”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_PALETTEWINDOW), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_PALETTEWINDOW))
    到文本 (“WS_EX_PALETTEWINDOW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_NOPARENTNOTIFY), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_NOPARENTNOTIFY))
    到文本 (“WS_EX_NOPARENTNOTIFY”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_RIGHTSCROLLBAR), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_RIGHTSCROLLBAR))
    到文本 (“WS_EX_RIGHTSCROLLBAR”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_NOINHERITLAYOUT), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_NOINHERITLAYOUT))
    到文本 (“WS_EX_NOINHERITLAYOUT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (exStyle, #WS_EX_OVERLAPPEDWINDOW), exStyle))
    赋值 (Result, 相减 (Result, #WS_EX_OVERLAPPEDWINDOW))
    到文本 (“WS_EX_OVERLAPPEDWINDOW”).加入项目 ()
.如果真结束

.如果真 (大于 (Result, 0))
    .如果 (等于 (采集的数据是否是十六进制, 真))
        十进制转十六进制 (Result).加入项目 ()
    .否则
        到文本 (Result).加入项目 ()
    .如果结束
    
.如果真结束
 ' -----------------------↑↑扩展样式↑↑-----------------------------------
赋值 (glSTYLE, GetClassLong (hWnd, #GCL_STYLE))
赋值 (Result, glSTYLE)
.如果 (等于 (., 真))
    赋值 (., 相加 (“ ”, 十进制转十六进制 (glSTYLE)))
.否则
    赋值 (., 相加 (“ ”, 到文本 (glSTYLE)))
.如果结束

.如果真 (等于 (位或 (glSTYLE, #CS_IME), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_IME))
    到文本 (“CS_IME”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_OWNDC), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_OWNDC))
    到文本 (“CS_OWNDC”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_CLASSDC), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_CLASSDC))
    到文本 (“CS_CLASSDC”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_DBLCLKS), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_DBLCLKS))
    到文本 (“CS_DBLCLKS”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_HREDRAW), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_HREDRAW))
    到文本 (“CS_HREDRAW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_NOCLOSE), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_NOCLOSE))
    到文本 (“CS_NOCLOSE”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_VREDRAW), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_VREDRAW))
    到文本 (“CS_VREDRAW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_NOKEYCVT), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_NOKEYCVT))
    到文本 (“CS_NOKEYCVT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_PARENTDC), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_PARENTDC))
    到文本 (“CS_PARENTDC”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_SAVEBITS), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_SAVEBITS))
    到文本 (“CS_SAVEBITS”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_INSERTCHAR), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_INSERTCHAR))
    到文本 (“CS_INSERTCHAR”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_GLOBALCLASS), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_GLOBALCLASS))
    到文本 (“CS_GLOBALCLASS”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_KEYCVTWINDOW), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_KEYCVTWINDOW))
    到文本 (“CS_KEYCVTWINDOW”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_BYTEALIGNCLIENT), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_BYTEALIGNCLIENT))
    到文本 (“CS_BYTEALIGNCLIENT”).加入项目 ()
.如果真结束
.如果真 (等于 (位或 (glSTYLE, #CS_BYTEALIGNWINDOW), glSTYLE))
    赋值 (Result, 相减 (Result, #CS_BYTEALIGNWINDOW))
    到文本 (“CS_BYTEALIGNWINDOW”).加入项目 ()
.如果真结束

.如果真 (大于 (Result, 0))
    .如果 (等于 (采集的数据是否是十六进制, 真))
        十进制转十六进制 (Result).加入项目 ()
    .否则
        到文本 (Result).加入项目 ()
    .如果结束
    
.如果真结束
 ' -----------------------↑↑类样式↑↑-----------------------------------
赋值 (., 截取窗口位图 (hWnd))
 ' -----------------------↑↑图片↑↑-----------------------------------

.子程序 反调试, 空白型, , 
.局部变量 Pn, PROCESSENTRY32, , , 
.局部变量 ModuleBuffer, MODULEENTRY32, , , 
.局部变量 ExplorerName, 文本型, , , 
.局部变量 ExeName, 文本型, , , 
.局部变量 sHandle, 整数型, , , 
.局部变量 Found, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 GetPID, 整数型, , , 
.局部变量 lpBuffer, 字节型, , "256", 
.局部变量 hModule, 整数型, , , 

赋值 (ExplorerName, SysAllocStringByteLen_exp ({ 92, 101, 120, 112, 108, 111, 114, 101, 114, 46, 101, 120, 101 }, 13))
赋值 (sHandle, CreateToolhelp32Snapshot (#TH32CS_SNAPALL, 0))
赋值 (Pn.dwsize, 296)
赋值 (Found, Process32First (sHandle, Pn))
赋值 (GetPID, GetCurrentProcessId ())
.判断循环首 (不等于 (Found, 0))
    .如果真 (等于 (Pn.th32ProcessID, GetPID))
        赋值 (hModule, CreateToolhelp32Snapshot (#TH32CS_SNAPMODULE, Pn.th32ParentProcessID))
        赋值 (ModuleBuffer.dwSize, 1024)
        Module32First (hModule, ModuleBuffer)
        赋值 (ExeName, SysAllocStringByteLen (ModuleBuffer.szExePath, 260))
        CloseHandle (hModule)
        GetWindowsDirectory (lpBuffer, 256)
        .如果真 (不等于 (CharLower (ExeName), 相加 (CharLower (SysAllocStringByteLen (lpBuffer, 256)), ExplorerName)))
            CloseHandle (sHandle)
            赋值 (hProcess, OpenProcess (#PROCESS_ALL_ACCESS, 1, Pn.th32ParentProcessID))
            .如果真 (等于 (TerminateProcess (hProcess, 0), 0))
                ExitProcess (0)
            .如果真结束
            
            CloseHandle (hProcess) ' 这行估计是多余^_^
        .如果真结束
        
        跳出循环 () ' 这行估计是多余^_^
    .如果真结束
    赋值 (Found, Process32Next (sHandle, Pn))
.判断循环尾 ()
CloseHandle (sHandle)

.子程序 _标签17_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

标签鼠标左键被按下 ()

.子程序 _标签18_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

标签鼠标左键被按下 ()

.子程序 _标签19_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

标签鼠标左键被按下 ()

.子程序 _标签20_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

标签鼠标左键被按下 ()

.子程序 _标签21_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

标签鼠标左键被按下 ()

.子程序 标签鼠标左键被按下, 空白型, , 
.参数 编辑框X, 编辑框, , 

.局部变量 ls_hwnd, 整数型, , , 

.如果真 (不等于 (编辑框X., “”))
    .如果 (等于 (采集的数据是否是十六进制, 真))
        赋值 (ls_hwnd, 十六进制转十进制 (编辑框X.))
    .否则
        赋值 (ls_hwnd, 到整数 (编辑框X.))
    .如果结束
    
    .如果真 (IsWindow (ls_hwnd))
        赋值 (hWnd, ls_hwnd)
        CreateThread (0, 0, lstrcpyn_指针 (&数据处理线程, &数据处理线程, 0), 0, 0, 0)
    .如果真结束
    
.如果真结束


.子程序 _选择框1_被单击, 空白型, , 
.如果 (.)
    赋值 (_启动窗口., 真)
.否则
    赋值 (_启动窗口., 假)
.如果结束


.子程序 _按钮1_被单击, 空白型, , 
销毁 ()

.子程序 _按钮2_被单击, 空白型, , 
SetTimer (取窗口句柄 (), #AutoMessgeBox_Close, 2000, lstrcpyn_指针 (&弹出信息框计时关闭, &弹出信息框计时关闭, 0))
MessageBox (取窗口句柄 (), 相加 (“Spy+++ V”, 到文本 (#Ver), “ 版权所有(C) 2008 Build:”, 到文本 (#Build), #换行符, “作者:叮咚茶 QQ:104017006”, #换行符, #换行符, “邮箱:infopet@qq.com”, #换行符, “主页:http://www.infopet.cn”, #换行符, “BLOG:http://hi.baidu.com/dingdongX”, #换行符, #换行符, “易语言群:1603713 WinAPI群:26903126 ”), “欢迎加入QQ交流群”, 64)

.子程序 弹出信息框计时关闭, 空白型, , 
CreateThread (0, 0, lstrcpyn_指针 (&弹出信息框子线程, &弹出信息框子线程, 0), 0, 0, 0)

.子程序 弹出信息框子线程, 空白型, , 
.局部变量 QDhwnd, 整数型, , , 确定按钮
.局部变量 MbHwnd, 整数型, , , 信息框主窗口
.局部变量 读秒, 整数型, , , 

KillTimer (取窗口句柄 (), #AutoMessgeBox_Close)
赋值 (MbHwnd, GetWindow (取窗口句柄 (), #GW_HWNDPREV))
.如果真 (不等于 (MbHwnd, 0))
    .如果真 (并且 (等于 (取窗口类名_ (MbHwnd), “#32770”), 等于 (取窗口标题_ (MbHwnd), “欢迎加入QQ交流群”)))
        赋值 (QDhwnd, FindWindowEx (MbHwnd, 0, “Button”, “确定”))
        .如果真 (不等于 (QDhwnd, 0))
            赋值 (读秒, 10)
            .判断循环首 (并且 (IsWindow (QDhwnd), 大于 (读秒, 0)))
                SetWindowText (QDhwnd, 到文本_ (读秒))
                延迟_ (1000)
                赋值 (读秒, 相减 (读秒, 1))
            .判断循环尾 ()
            .如果真 (IsWindow (QDhwnd))
                SetWindowText (QDhwnd, “自动关闭”)
                延迟_ (1000)
                .如果真 (IsWindow (MbHwnd))
                    SendMessage (MbHwnd, #WM_CLOSE, 0, 0)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 到文本_, 文本型, , 整数到文本
.参数 待转换的数据, 整数型, , 

.局部变量 buff, 文本型, , , 

赋值 (buff, 取空白文本_ (12)) ' ???
wvsprintf (buff, “%d”, 待转换的数据)
返回 (buff)

.子程序 延迟_, 空白型, , 延迟一段时间，然后继续执行后面的程序代码。与易语言核心支持库中的“延时()”命令不同的是，本命令在等待期间允许用户进行其它操作（如点击按钮等）。本命令为初级命令。
.参数 等待时间, 整数型, , 单位为毫秒。提示：1000毫秒等于1秒。

.局部变量 启动时间, 整数型, , , 

赋值 (启动时间, GetTickCount ())
.循环判断首 ()
    .如果 (不等于 (GetInputState (), 0))
        处理事件_ ()
    .否则
        Sleep (1)
    .如果结束
    
.循环判断尾 (小于 (相减 (GetTickCount (), 启动时间), 等待时间))

.子程序 处理事件_, 空白型, , 暂时转让控制权，以便让 Windows 操作系统有机会处理其它的如用户键盘或鼠标输入等事件。直到操作系统处理并发送完程序队列中的所有事件后，命令才会返回。本命令为中级命令。
.局部变量 lpMsg, MSG, , , 

.如果真 (等于 (PeekMessage (lpMsg, 0, 0, 0, #PM_REMOVE), 1))
    TranslateMessage (lpMsg)
    DispatchMessage (lpMsg)
.如果真结束


.子程序 取空白文本_, 文本型, ,  返回具有指定数目半角空格的文本。
.参数 重复次数, 整数型, , 

.局部变量 内存指针, 整数型, , , 
.局部变量 空白文本, 字节型, , "0", 
.局部变量 返回结果, 文本型, , , 

.如果 (小于 (重复次数, 1))
    
.否则
    重定义数组 (空白文本, 假, 重复次数)
    赋值 (内存指针, lstrcpyn_字节 (空白文本, 空白文本, 0))
    FillMemory (内存指针, 重复次数, 32)
    赋值 (返回结果, SysAllocStringByteLen (空白文本, 重复次数))
.如果结束
返回 (返回结果)

.子程序 取窗口标题_, 文本型, , 取指定窗口的标题。成功返回窗口标题，失败返回空。
.参数 窗口句柄, 整数型, , 

.局部变量 窗口标题, 文本型, , , 
.局部变量 总字符数, 整数型, , , 
.局部变量 临时整数, 整数型, , , 

赋值 (总字符数, 相加 (SendMessage (窗口句柄, #WM_GETTEXTLENGTH, 0, 0), 1))
.如果 (大于 (总字符数, 3000))
    赋值 (临时整数, 3000)
    赋值 (窗口标题, 取空白文本_ (临时整数))
    SendMessage (窗口句柄, #WM_GETTEXT, 相加 (临时整数, 1), lstrcpyn (窗口标题, 窗口标题, 0))
    .如果真 (小于 (取代码 (取文本右边 (窗口标题, 1), ), 0))
        赋值 (窗口标题, 取文本左边 (窗口标题, 相减 (取文本长度 (窗口标题), 1)))
    .如果真结束
    赋值 (窗口标题, 相加 (窗口标题, “...后面略掉”, 到文本 (相减 (总字符数, 临时整数)), “个字符...”))
.否则
    赋值 (窗口标题, 取空白文本_ (总字符数))
    SendMessage (窗口句柄, #WM_GETTEXT, 总字符数, lstrcpyn (窗口标题, 窗口标题, 0))
.如果结束

返回 (窗口标题)

.子程序 _选择列表框1_选中状态被改变, 空白型, , 
.如果真 (IsWindow (hWnd))
    .判断开始 (等于 (., 0))
        .如果 (.是否被选中 (.))
            ShowWindow (hWnd, #SW_SHOW)
        .否则
            ShowWindow (hWnd, #SW_HIDE)
        .如果结束
         ' SendMessage (hWnd, #WM_SHOWWINDOW, 1, 0)
    .判断 (等于 (., 1))
        .如果 (.是否被选中 (.))
            EnableWindow (hWnd, 1)
        .否则
            EnableWindow (hWnd, 0)
        .如果结束
         ' SendMessage (hWnd, #WM_ENABLE, 1, 0)
    .判断 (等于 (., 2))
        .如果 (.是否被选中 (.))
            SetWindowPos (hWnd, #HWND_TOPMOST, 0, 0, 0, 0, 位或 (#SWP_NOSIZE, #SWP_NOMOVE))
        .否则
            SetWindowPos (hWnd, #HWND_NOTOPMOST, 0, 0, 0, 0, 位或 (#SWP_NOSIZE, #SWP_NOMOVE))
        .如果结束
        
    .判断 (等于 (., 3))
        .如果 (.是否被选中 (.))
            SendMessage (hWnd, #EM_SETREADONLY, 1, 0)
        .否则
            SendMessage (hWnd, #EM_SETREADONLY, 0, 0)
        .如果结束
        
    .判断 (等于 (., 4))
        .如果 (.是否被选中 (.))
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_MAXIMIZE, 0)
        .否则
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_RESTORE, 0)
        .如果结束
        
    .判断 (等于 (., 5))
        .如果 (.是否被选中 (.))
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_MINIMIZE, 0)
        .否则
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_RESTORE, 0)
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 截取窗口位图, 字节集, , 
.参数 窗口句柄, 整数型, , 

.局部变量 矩形区域, RECT, , , 
.局部变量 屏幕设备上下文句柄, 整数型, , , 
.局部变量 内存设备上下文句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 位图, BITMAP, , , 
.局部变量 位图像素点阵, 字节集, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 位图文件头字节集, 字节集, , , 
.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图信息字节集, 字节集, , , 

.如果真 (取反 (IsWindow (窗口句柄)))
    返回 ({  })
.如果真结束
GetWindowRect (窗口句柄, 矩形区域)
赋值 (屏幕设备上下文句柄, GetDC (窗口句柄))
赋值 (内存设备上下文句柄, CreateCompatibleDC (屏幕设备上下文句柄))
赋值 (位图句柄, CreateCompatibleBitmap (屏幕设备上下文句柄, 相减 (矩形区域.Right, 矩形区域.Left), 相减 (矩形区域.Bottom, 矩形区域.Top)))
赋值 (旧位图句柄, SelectObject (内存设备上下文句柄, 位图句柄))
BitBlt (内存设备上下文句柄, 0, 0, 相减 (矩形区域.Right, 矩形区域.Left), 相减 (矩形区域.Bottom, 矩形区域.Top), 屏幕设备上下文句柄, 0, 0, 13369376)
GetObject (位图句柄, 相加 (相乘 (5, 4), 2, 2), 位图)
赋值 (位图信息.BITMAPINFOHEADER.biSize, 相乘 (4, 11))
GetDIBits_BimapInfo (内存设备上下文句柄, 位图句柄, 0, 0, 0, 位图信息, 0)
赋值 (位图像素点阵, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图信息.BITMAPINFOHEADER.biCompression, 0)
GetDIBits (内存设备上下文句柄, 位图句柄, 0, 位图.bmHeight, 位图像素点阵, 位图信息, 0)
 ' 构造位图信息
赋值 (位图信息字节集, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSize))
CopyMemory_BITMAPINFO (位图信息字节集, 位图信息, 位图信息.BITMAPINFOHEADER.biSize)
 ' 构造位图文件头
赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), 位图信息.BITMAPINFOHEADER.biSize))
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图文件头.bfReserved1, 0)
赋值 (位图文件头.bfReserved2, 0)
赋值 (位图文件头字节集, 取空白字节集 (14))
CopyMemory_BITMAPFILEHEADER (位图文件头字节集, 位图文件头, 14)
SelectObject (内存设备上下文句柄, 旧位图句柄)
DeleteObject (位图句柄)
DeleteDC (内存设备上下文句柄)
ReleaseDC (0, 屏幕设备上下文句柄)
返回 (相加 (位图文件头字节集, 位图信息字节集, 位图像素点阵))

.子程序 _按钮4_被单击, 空白型, , 
.局部变量 文本位置, 整数型, , , 
.局部变量 扩展名, 文本型, , , 
.局部变量 新图像, 字节集, , , 

赋值 (., 1)
赋值 (., “保存图片”)
赋值 (., “JPG文件(*.jpg)|*.jpg|BMP文件(*.bmp)|*.bmp|GIF文件(*.gif)|*.gif|PNG文件(*.png)|*.png|TIFF文件(*.tiff)|*.tiff”)
赋值 (., “未命名”)
赋值 (., “.jpg”)
.如果真 (不等于 (., {  }))
    .如果真 (并且 (打开 (), 不等于 (., “”)))
        赋值 (文本位置, 倒找文本 (., “.”, , 假))
        赋值 (扩展名, 取文本右边 (., 相加 (相减 (取文本长度 (.), 文本位置), 1)))
        .如果真 (或者 (等于 (扩展名, “.jpg”), 等于 (扩展名, “.bmp”), 等于 (扩展名, “gif”), 等于 (扩展名, “.png”), 等于 (扩展名, “.tiff”)))
            .如果 (转换图像格式 (., 扩展名, 新图像))
                .如果 (写到文件 (., 新图像))
                    
                .否则
                    .如果 (等于 (_启动窗口., 真))
                        赋值 (_启动窗口., 假)
                        信息框 (“写文件失败.”, 64, “提示:”)
                        赋值 (_启动窗口., 真)
                    .否则
                        信息框 (“写文件失败.”, 64, “提示:”)
                    .如果结束
                    
                .如果结束
                
            .否则
                .如果 (等于 (_启动窗口., 真))
                    赋值 (_启动窗口., 假)
                    信息框 (“格式文件失败.”, 64, “提示:”)
                    赋值 (_启动窗口., 真)
                .否则
                    信息框 (“格式文件失败.”, 64, “提示:”)
                .如果结束
                
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 转换图像格式, 逻辑型, , 支持.bmp、.jpg、.gif、.tiff、.png互转
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换格式, 文本型, , 转换后的图片格式.bmp;jpg;gif;tiff;png
.参数 新图像, 字节集, 参考, 用于保存新图像的变量

.局部变量 Clsid, 字节集, , , 
.局部变量 pStr, 文本型, , , 
.局部变量 nLength, 整数型, , , 
.局部变量 hMem, 整数型, , , 
.局部变量 Stream, 对象, , , 
.局部变量 lpvoid, 整数型, , , 
.局部变量 pStream, 整数型, , , 
.局部变量 bitmap, 整数型, , , 
.局部变量 DataStream, 对象, , , 
.局部变量 hMemDataStream, 整数型, , , 
.局部变量 pDataStream, 整数型, , , 
.局部变量 nStreamSize, 整数型, , , 
.局部变量 bRet, 逻辑型, , , 
.局部变量 GpInput, GdiplusStartupInput, , , 
.局部变量 Token, 整数型, , , 

赋值 (GpInput.GdiplusVersion, 1)
GdiplusStartup (Token, GpInput, 0) ' 启动 GDI+
.判断开始 (等于 (转换格式, “.bmp”)) ' bmp
    赋值 (pStr, “{557CF400-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, “.jpg”)) ' jpg
    赋值 (pStr, “{557CF401-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, “.gif”)) ' gif
    赋值 (pStr, “{557CF402-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, “.tiff”)) ' tiff
    赋值 (pStr, “{557CF405-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, “.png”)) ' png
    赋值 (pStr, “{557CF406-1A04-11D3-9A73-0000F81EF32E}”)
.默认
    
.判断结束
赋值 (Clsid, 取空白字节集 (16))
CLSIDFromString (Ansi转Unicode (pStr), Clsid) ' 获取图像格式对应的Clsid
赋值 (nLength, 取字节集长度 (图像数据))
赋值 (hMem, GlobalAlloc (#GMEM_FIXED, nLength)) ' 申请内存
CreateStreamOnHGlobal (hMem, 真, Stream) ' 创建流对象
赋值 (lpvoid, GlobalLock (hMem)) ' 锁定该区域，获得存放数据的地址
写到内存 (图像数据, lpvoid, nLength) ' 把数据写到流里面
GlobalUnlock (hMem) ' 取消锁定
赋值 (pStream, GetObjectPtr (Stream, Stream, 0)) ' 获得流对象指针
GdipCreateBitmapFromStream (取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1), bitmap) ' 创建位图对象
CreateStreamOnHGlobal (0, 真, DataStream)
赋值 (pStream, GetObjectPtr (DataStream, DataStream, 0))
赋值 (pStream, 取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1))
GdipSaveImageToStream_int (bitmap, pStream, Clsid, 0) ' 这里是图像格式转换的关键。把位图按指定格式保存到数据流里面
GetHGlobalFromStream_int (pStream, hMemDataStream) ' 获得数据流句柄
赋值 (pDataStream, GlobalLock (hMemDataStream)) ' 获得数据指针
赋值 (nStreamSize, GlobalSize (hMemDataStream)) ' 获取数据大小
.如果真 (不等于 (pDataStream, 0))
    赋值 (新图像, 取空白字节集 (nStreamSize))
    CopyMemory (新图像, pDataStream, nStreamSize) ' 复制到字节集里
    赋值 (bRet, 真)
.如果真结束
 ' 别忘记下面释放资源的函数，否则造成内存泄漏
GlobalUnlock (hMemDataStream)
GdipDisposeImage (bitmap)
GlobalFree (hMem)
GdiplusShutdown (Token)
返回 (bRet)

.子程序 Ansi转Unicode, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 

.局部变量 缓冲区, 字节集, , , 
.局部变量 缓冲区大小, 整数型, , , 

赋值 (缓冲区大小, 相乘 (MultiByteToWideChar (0, 0, 欲转换的文本, -1, {  }, 0), 2))
赋值 (缓冲区, 取空白字节集 (缓冲区大小))
MultiByteToWideChar (0, 0, 欲转换的文本, 取文本长度 (欲转换的文本), 缓冲区, 缓冲区大小)
返回 (缓冲区)

.子程序 十六进制转十进制, 长整数型, , 
.参数 参数一, 文本型, , 

.局部变量 转换累加, 长整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 取出的文本, 文本型, , , 
.局部变量 文本数位数, 整数型, , , 

赋值 (参数一, 到大写 (到半角 (参数一)))
.计次循环首 (取文本长度 (参数一), i)
    赋值 (取出的文本, 取文本中间 (参数一, i, 1))
    .如果 (大于 (取代码 (取出的文本, 1), 64))
        赋值 (文本数位数, 相减 (取代码 (取出的文本, ), 55))
    .否则
        赋值 (文本数位数, 到数值 (取出的文本))
    .如果结束
    赋值 (转换累加, 相加 (转换累加, 相乘 (文本数位数, 求次方 (16, 相减 (取文本长度 (参数一), i)))))
.计次循环尾 ()
返回 (转换累加)

.子程序 十进制转十六进制, 文本型, , 
.参数 参数一, 长整数型, , 

.局部变量 余数, 整数型, , , 
.局部变量 结果, 文本型, , , 

.判断循环首 (不等于 (参数一, 整除 (参数一, 16)))
    赋值 (余数, 求余数 (参数一, 16))
    .如果 (大于 (余数, 9))
        赋值 (结果, 相加 (字符 (相加 (55, 余数)), 结果))
    .否则
        赋值 (结果, 相加 (到文本 (余数), 结果))
    .如果结束
    赋值 (参数一, 整除 (参数一, 16))
.判断循环尾 ()
.判断开始 (大于 (参数一, 9))
    赋值 (结果, 相加 (字符 (相加 (55, 参数一)), 结果))
.判断 (等于 (结果, “”))
    赋值 (结果, “0”)
.默认
    
.判断结束

返回 (结果)

.子程序 _按钮3_被单击, 空白型, , 
载入 (窗口_子窗口列表, _启动窗口, 真)


.子程序 取窗口类名_, 文本型, , 取指定窗口的类名。成功返回窗口类名，失败返回空。
.参数 窗口句柄, 整数型, , 

.局部变量 lpClassName, 文本型, , , 

赋值 (lpClassName, 取空白文本_ (256))
GetClassName (窗口句柄, lpClassName, 256)
返回 (lpClassName)

.子程序 _选择列表框1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (并且 (大于或等于 (., 6), 小于或等于 (., 8)))
    .如果真 (IsWindow (hWnd))
        .判断开始 (等于 (., 6)) ' 还原窗口
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_RESTORE, 0)
        .判断 (等于 (., 7)) ' 关闭窗口
            SendMessage (hWnd, #WM_SYSCOMMAND, #SC_CLOSE, 0)
        .判断 (等于 (., 8)) ' 激活窗口
            SetActiveWindow (hWnd)
        .默认
            
        .判断结束
        
    .如果真结束
    
    .选中项目 (., 假)
.如果真结束


.窗口程序集 窗口程序集2, , , 

.子程序 _按钮3_被单击, 空白型, , 
.局部变量 ls_hwnd, 整数型, , , 

.如果真 (大于 (., -1))
    赋值 (ls_hwnd, .取项目数值 (.))
    .如果真 (IsWindow (ls_hwnd))
        赋值 (hWnd, ls_hwnd)
        数据处理线程 ()
    .如果真结束
    
.如果真结束
销毁 ()

.子程序 _按钮4_被单击, 空白型, , 
销毁 ()

.子程序 _窗口_子窗口列表_创建完毕, 空白型, , 
.如果 (等于 (_启动窗口., 真))
    赋值 (., 真)
.否则
    
.如果结束

初始化列表框 (hWnd)

.子程序 初始化列表框, 空白型, , 
.参数 句柄参数, 整数型, , 

.局部变量 ls_hwnd, 整数型, , , 
.局部变量 hwnd2, 整数型, , , 

清空 ()
 ' .如果真 (不等于 (IsWindow (句柄参数), 0))
     ' EnumChildWindows (句柄参数, &lpEnumFunc, 0)
.如果真结束

.如果真 (不等于 (hWnd, 0))
    赋值 (hwnd2, FindWindowEx (句柄参数, 0, 字符 (0), 字符 (0)))
    .判断循环首 (不等于 (hwnd2, 0))
        增加列表项目 (hwnd2)
        赋值 (hwnd2, FindWindowEx (句柄参数, hwnd2, 字符 (0), 字符 (0)))
    .判断循环尾 ()
.如果真结束

 ' ls_hwnd ＝ GetWindow (句柄参数, #GW_HWNDNEXT)
 ' .判断循环首 (不等于 (ls_hwnd, 0))
     ' 调试输出 (ls_hwnd, 取窗口标题_ (ls_hwnd))
     ' ls_hwnd ＝ GetWindow (ls_hwnd, #GW_HWNDNEXT)
 ' .判断循环尾 ()

.子程序 lpEnumFunc, 逻辑型, , 
.参数 句柄, 整数型, , 
.参数 lParam, 整数型, , 

增加列表项目 (句柄)
返回 (真)

.子程序 _列表框1_双击选择, 空白型, , 
.如果真 (不等于 (FindWindowEx (.取项目数值 (.), 0, 字符 (0), 字符 (0)), 0))
    初始化列表框 (.取项目数值 (.))
.如果真结束


.子程序 _按钮1_被单击, 空白型, , 
.如果真 (并且 (大于 (., -1), 不等于 (FindWindowEx (.取项目数值 (.), 0, 字符 (0), 字符 (0)), 0)))
    初始化列表框 (.取项目数值 (.))
.如果真结束


.子程序 _按钮2_被单击, 空白型, , 
.局部变量 数据, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (_启动窗口.., 1)
赋值 (_启动窗口.., “”)
赋值 (_启动窗口.., “.txt”)
赋值 (_启动窗口.., “txt Files (*.txt)|*.txt|All Files (*.*)|*.*”)
.计次循环首 (取项目数 (), i)
    赋值 (数据, 相加 (数据, 相减 (i, 1).取项目文本 (), #换行符))
.计次循环尾 ()
.如果真 (并且 (_启动窗口.打开 (.), 不等于 (_启动窗口.., “”)))
    写到文件 (_启动窗口.., 到字节集 (数据))
.如果真结束


.子程序 增加列表项目, 空白型, , 
.参数 句柄, 整数型, , 

.局部变量 结果句柄, 文本型, , , 
.局部变量 lpClassName, 文本型, , , 
.局部变量 窗口标题, 文本型, , , 
.局部变量 句柄文本长度, 整数型, , , 
.局部变量 类文本长度, 整数型, , , 

赋值 (lpClassName, 取窗口类名_ (句柄))
赋值 (窗口标题, 相加 (“标题:”, 取窗口标题_ (句柄)))
.如果 (采集的数据是否是十六进制)
    赋值 (结果句柄, 十进制转十六进制 (句柄))
.否则
    赋值 (结果句柄, 到文本_ (句柄))
.如果结束

赋值 (句柄文本长度, 取文本长度 (结果句柄))
.如果真 (小于 (句柄文本长度, 10))
    赋值 (结果句柄, 相加 (结果句柄, 取空白文本_ (相减 (10, 句柄文本长度))))
.如果真结束
赋值 (结果句柄, 取文本左边 (结果句柄, 10))
赋值 (类文本长度, 取文本长度 (lpClassName))
.如果真 (小于 (类文本长度, 30))
    赋值 (lpClassName, 相加 (lpClassName, 取空白文本_ (相减 (30, 类文本长度))))
.如果真结束
赋值 (lpClassName, 取文本左边 (lpClassName, 30))
 ' ---------------------格式文本----------------------
相加 (结果句柄, lpClassName, 窗口标题).加入项目 (句柄)

.子程序 _选择框1_被单击, 空白型, , 
清空 ()
.如果真 (IsWindow (hWnd))
    .如果 (.)
        EnumChildWindows (hWnd, &lpEnumFunc, 0)
    .否则
        初始化列表框 (hWnd)
    .如果结束
    
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
