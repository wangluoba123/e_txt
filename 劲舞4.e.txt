 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 372
    高度 = 174
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “老马跳劲舞”
    帮助文件名 = “”



.常量 KEYEVENTF_KEYUP, "2", , 
.常量 INPUT_MOUSE, "0", , 
.常量 INPUT_KEYBOARD, "1", , 
.常量 INPUT_HARDWARE, "2", , 
.常量 , , , 
.常量 BI_RGB, "0", , 
.常量 DIB_RGB_COLORS, "0", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 2 0 扩展功能支持库一
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 1 1 应用接口支持库




数据类型 创建进程返回数据类型, , 
    .成员 hProcess, 空白型, , , 进程句柄
    .成员 hThread, 空白型, , , 进程的主线程句柄  
    .成员 dwProcessId, 空白型, , , 进程ID
    .成员 dwThreadId, 空白型, , , 进程的主线程ID

数据类型 启动信息数据, , 
    .成员 cb, 空白型, , , 结构长度
    .成员 lpReserved, 空白型, , , 保留
    .成员 lpDesktop, 空白型, , , 保留
    .成员 lpTitle, 空白型, , , 如果为控制台进程则为显示的标题
    .成员 dwX, 空白型, , , 窗口位置
    .成员 dwY, 空白型, , , 窗口位置
    .成员 dwXSize, 空白型, , , 窗口大小
    .成员 dwYSize, 空白型, , , 窗口大小
    .成员 dwXCountChars, 空白型, , , 控制台窗口字符号宽度
    .成员 dwYCountChars, 空白型, , , 控制台窗口字符号高度
    .成员 dwFillAttribute, 空白型, , , 控制台窗口填充模式
    .成员 dwFlags, 空白型, , , 创建标记
    .成员 wShowWindow, 空白型, , , 窗口显示标记如同ShowWindow中的标记
    .成员 cbReserved2, 空白型, , , 
    .成员 lpReserved2, 空白型, , , 
    .成员 hStdInput, 空白型, , , 标准输入句柄
    .成员 hStdOutput, 空白型, , , 标准输入句柄
    .成员 hStdError, 空白型, , , 标准输出句柄

数据类型 位图信息_, , BITMAPINFO
    .成员 结果大小, 整数型, , , biSize
    .成员 位图宽度, 整数型, , , biWidth
    .成员 位图高度, 整数型, , , biHeight
    .成员 位图位面数, 短整数型, , , biPlanes
    .成员 位深度, 短整数型, , , biBitCount
    .成员 压缩率, 整数型, , , biCompression
    .成员 位图大小, 整数型, , , biSizeImage
    .成员 水平折像度, 整数型, , , biXPelsPerMeter
    .成员 垂直折像度, 整数型, , , biYPelsPerMeter
    .成员 位图颜色表索引, 整数型, , , biClrUsed
    .成员 位图显示索引, 整数型, , , biClrImportant
    .成员 蓝色值, 字节型, , , rgbBlue
    .成员 绿色值, 字节型, , , rgbGreen
    .成员 红色值, 字节型, , , rgbRed
    .成员 保留参数, 字节型, , , rgbReserved

数据类型 矩形区域数据, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 


.DLL命令 取窗口进程ID, 长整数型, "user32", "GetWindowThreadProcessId", , 
    .参数 hWnd, 长整数型, 传址, 窗口句柄
    .参数 lpdwProcessId, 长整数型, 传址, 装在进程ID的变量

.DLL命令 PostMessage, 空白型, "user32", "PostMessageA", , 
    .参数 hwnd, 长整数型, 传址, 窗口的句柄
    .参数 wMsg, 长整数型, 传址, 消息标识符
    .参数 wParam, 长整数型, 传址, 
    .参数 lParam, 空白型, 传址, 

.DLL命令 keybd_event, 空白型, "user32", "keybd_event", , 这个函数模拟了键盘行动
    .参数 键代码, 字节型, , 欲模拟的虚拟键码
    .参数 键扫描码, 字节型, , 键的OEM扫描码
    .参数 标志值, 整数型, , 零；或设为下述两个标志之一;KEYEVENTF_EXTENDEDKEY：指出是一个扩展键，而且在前面冠以0xE0代码;KEYEVENTF_KEYUP：模拟松开一个键
    .参数 特定值, 整数型, , 通常不用的一个值。api函数GetMessageExtraInfo可取得这个值。允许使用的值取决于特定的驱动程序;

.DLL命令 取扫描码, 长整数型, "user32", "MapVirtualKeyA", , 
    .参数 虚拟码, 长整数型, 传址, 
    .参数 返回类型, 长整数型, 传址, 0,1,2

.DLL命令 创建进程, 逻辑型, "", "CreateProcessA", , 
    .参数 lpApplicationName, 文本型, , 执行程序文件名
    .参数 lpCommandLine, 整数型, , 参数行
    .参数 lpProcessAttributes, 整数型, , 进程安全参数
    .参数 lpThreadAttributes, 整数型, , 线程安全参数
    .参数 bInheritHandles, 逻辑型, , 继承标记
    .参数 dwCreationFlags, 整数型, , 创建标记
    .参数 lpEnvironment, 整数型, , 环境变量
    .参数 lpCurrentDirectory, 整数型, , 运行该子进程的初始目录
    .参数 lpStartupInfo, 启动信息数据, , 创建该子进程的相关参数
    .参数 lpProcessInformation, 创建进程返回数据类型, , 创建后用于被创建子进程的信息  

.DLL命令 创建内存场景_, 整数型, "gdi32", "CreateCompatibleDC", , 创建一个与特定设备场景一致的内存设备场景  新设备场景句柄，若出错则为零
    .参数 设备场景句柄, 整数型, , 设备场景句柄。新的设备场景将与它一致。也可能为0以创建一个与屏幕一致的设备场景;

.DLL命令 创建GDI对象_, 整数型, "gdi32", "CreateDIBSection", , 创建一个DIBSection。这是一个GDI对象，可象一幅与设备有关位图那样使用。但是，它在内部作为一幅与设备无关位图保存  执行成功返回DIBSection位图的句柄，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄。如dw设为DIB_PAL_COLORS，那么DIB颜色表就会用来自逻辑调色板的颜色进行初始化
    .参数 pBitmapInfo, 位图信息_, , BITMAPINFO，这个结构初始化成欲创建的那幅位图的配置数据
    .参数 常数, 整数型, , 下述常数之一：;DIB_PAL_COLORS：BITMAPINFO包含了一个16位调色板索引的数组;DIB_RGB_COLORS：BITMAPINFO包含了一个颜色表，其中保存有32位颜色（RGBQUAD）
    .参数 内存地址, 整数型, , 用于载入DIBSection数据区的内存地址
    .参数 文件映射句柄, 整数型, , 指向一个文件映射对象的可选句柄，位图将在其中创建。如设为零，Windows会自动分配内存
    .参数 偏移量, 整数型, , 如指定了句柄，就用这个参数指定位图数据在文件映射对象中的偏移量;

.DLL命令 取位图二进制位_, 整数型, "gdi32.dll", "GetDIBits", , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里  非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 设备场景句柄, 整数型, , aHDC，定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 源位图句柄, 整数型, , hBitmap，源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 扫描线初始编号, 整数型, , nStartScan，欲复制到DIB中的第一条扫描线的编号
    .参数 扫描线数量, 整数型, , nNumScans，欲复制的扫描线数量
    .参数 缓冲区指针, 字节型, 传址, lpBits，指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 位图结构, 位图信息_, , lpBI，BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 常量标志, 整数型, , wUsage，下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;

.DLL命令 选入设备场景_, 整数型, "gdi32", "SelectObject", , 每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。例如，当前选定的画笔决定了在设备场景中描绘的线段颜色及样式  与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。如选定的对象是一个区域（Region），结果就是下列常数之一：SIMPLEREGION， ;    COMPLEXREGION 或 NULLREGION 对区域进行描述， GDI_ERROR 表示出错
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄
    .参数 对象句柄, 整数型, , 一个画笔、位图、刷子、字体或区域的句柄;

.DLL命令 删除设备场景_, 整数型, "gdi32", "DeleteDC", , 删除专用设备场景或信息场景，释放所有相关窗口资源。不要将它用于GetDC函数取回的设备场景  执行成功则为非零，失败则为零
    .参数 设备场景句柄, 整数型, , 将要删除的设备场景  在vb里使用不要将它用于由vb hdc属性获取的设备场景句柄;

.DLL命令 删除对象_, 整数型, "gdi32", "DeleteObject", , 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放  非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄;

.DLL命令 复制场景位图_, 整数型, "gdi32", "BitBlt", , 将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , 目标设备场景
    .参数 目标横坐标, 整数型, , 对目标DC中目标矩形左上角位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 目标纵坐标, 整数型, , 同上
    .参数 传输图像宽度, 整数型, , 欲传输图象的宽度和高度
    .参数 传输图像高度, 整数型, , 同上
    .参数 源设备场景, 整数型, , 源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , 对源DC中源矩形左上角位置进行描述的那个点。用源DC的逻辑坐标表示
    .参数 源纵坐标, 整数型, , 同上
    .参数 光栅运算方式, 整数型, , 传输过程要执行的光栅运算;

.DLL命令 取设备场景_, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 释放设备场景_, 整数型, "user32", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 DLL命令1, 空白型, "", "", , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 rect, 未知类型0x30002, , , 
.程序集变量 a, 整数型, , "0", 
.程序集变量 b, 子程序指针, , "0", 
.程序集变量 ii, 文本型, , , 
.程序集变量 iii, 整数型, , , 
.程序集变量 屏幕区域, 矩形区域数据, , "0", 
.程序集变量 取点偏移, 整数型, , "9", 图像分析点位置
.程序集变量 键识别码集合1, 整数型, , "18", 
.程序集变量 键识别码集合2, 整数型, , "18", 
.程序集变量 是否P位, 逻辑型, , , 是否获得
.程序集变量 键代码, 字节型, , "10", 10个键的虚拟码
.程序集变量 键扫描码, 长整数型, , "10", 10个键的扫描码
.程序集变量 B值, 字节型, , , 按空格取点B色值
.程序集变量 游戏是否运行, 逻辑型, , , 
.程序集变量 匿名程序集变量_900, 空白型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 已循环次数, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 数组维数, 整数型, , , 

加入成员 (a, 未知支持库函数_10 (_启动窗口.取窗口句柄 (), 取窗口句柄 (), 0, #Home键))
加入成员 (a, 未知支持库函数_10 (_启动窗口.取窗口句柄 (), 取窗口句柄 (), 0, #F11键))
加入成员 (a, 未知支持库函数_10 (_启动窗口.取窗口句柄 (), 取窗口句柄 (), 0, #F10键))
赋值 (b, { &子程序1, &子程序2, &子程序3 })
赋值 (iii, 0)
赋值 (文件号, 打开文件 (相加 (取运行目录 (), “\setup.ini”), 1, 1))
赋值 (数组维数, 到整数 (读入一行 (文件号)))
重定义数组 (屏幕区域, 假, 数组维数)
.计次循环首 (数组维数, 已循环次数)
    赋值 (屏幕区域 [已循环次数], 左边, 到整数 (读入一行 (文件号)))
    赋值 (屏幕区域 [已循环次数], 顶边, 到整数 (读入一行 (文件号)))
    赋值 (屏幕区域 [已循环次数], 右边, 到整数 (读入一行 (文件号)))
    赋值 (屏幕区域 [已循环次数], 底边, 到整数 (读入一行 (文件号)))
.计次循环尾 ()
.计次循环首 (9, 已循环次数)
    赋值 (取点偏移 [已循环次数], 到整数 (读入一行 (文件号)))
.计次循环尾 ()
.计次循环首 (18, 已循环次数)
    赋值 (键识别码集合1 [已循环次数], 到整数 (读入一行 (文件号)))
.计次循环尾 ()
.计次循环首 (18, 已循环次数)
    赋值 (键识别码集合2 [已循环次数], 到整数 (读入一行 (文件号)))
.计次循环尾 ()
.计次循环首 (10, 已循环次数)
    赋值 (键代码 [已循环次数], 到字节 (读入一行 (文件号)))
.计次循环尾 ()
.计次循环首 (10, 已循环次数)
    赋值 (键扫描码 [已循环次数], 到字节 (读入一行 (文件号)))
.计次循环尾 ()

关闭文件 (文件号)
赋值 (.位置, 2)
_滑块条2_位置被改变 ()


.子程序 _标签1_反馈事件, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (a), i)
    .如果真 (等于 (a [i], 参数一))
        未知支持库函数_13 (b [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 __启动窗口_将被销毁, 空白型, , 
未知支持库函数_11 (_启动窗口.取窗口句柄 (), a [1])
未知支持库函数_11 (_启动窗口.取窗口句柄 (), a [2])
未知支持库函数_11 (_启动窗口.取窗口句柄 (), a [3])


.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 截取屏幕0, 字节集, , , 

赋值 (截取屏幕0, 截取屏幕矩形 (屏幕区域 [5], 0))
.如果 (大于或等于 (取字节集长度 (截取屏幕0), 12))
    .如果 (并且 (或者 (不等于 (截取屏幕0 [1], 255), 不等于 (截取屏幕0 [2], 255), 不等于 (截取屏幕0 [3], 255)), 等于 (截取屏幕0 [4], 255), 等于 (截取屏幕0 [5], 255), 等于 (截取屏幕0 [6], 255), 或者 (不等于 (截取屏幕0 [7], 255), 不等于 (截取屏幕0 [8], 255), 不等于 (截取屏幕0 [9], 255))))
        .如果 (不等于 (子程序2 (), 0))
            子程序4 ()
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
.否则
    
.如果结束


.子程序 _时钟3_周期事件, 空白型, , 
.局部变量 进程id, 长整数型, , , 

赋值 (进程id, 进程是否存在 (“Audition.exe”)) ' Audition.exe
.如果 (大于 (进程id, 0))
    .如果 (等于 (游戏是否运行, 假))
        赋值 (游戏是否运行, 真)
        赋值 (.时钟周期, 1)
         ' 时钟2.时钟周期 ＝ 1
        赋值 (.标题, “游戏已经运行”)
        赋值 (.文本颜色, #绿色)
        赋值 (.内容, 相加 (“进程id：”, 到文本 (进程id)))
    .否则
        
    .如果结束
    
.否则
    .如果 (等于 (游戏是否运行, 真))
        赋值 (游戏是否运行, 假)
        赋值 (.时钟周期, 0)
         ' 时钟2.时钟周期 ＝ 0
        赋值 (.标题, “游戏没有运行”)
        赋值 (.文本颜色, #橙黄)
         ' 编辑框1.内容 ＝ 到文本 (进程id)
    .否则
        
    .如果结束
    
.如果结束


.子程序 _按钮1_被单击, 空白型, , 
.局部变量 返回, 逻辑型, , , 
.局部变量 创建进程返回数据类型, 创建进程返回数据类型, , , 
.局部变量 启动信息数据, 启动信息数据, , , 
.局部变量 hProcess, 空白型, , , 进程句柄
.局部变量 hThread, 空白型, , , 进程的主线程句柄  
.局部变量 dwProcessId, 空白型, , , 进程ID
.局部变量 dwThreadId, 空白型, , , 进程的主线程ID

 ' 运行 (“D:\劲舞团\patcher.exe”, 假, )
赋值 (.时钟周期, 0)
赋值 (启动信息数据.cb, 18) ' 结构长度
赋值 (启动信息数据.dwFlags, 1) ' STARTF_USESHOWWINDOW = &H1
赋值 (启动信息数据.wShowWindow, 1) ' SW_SHOWNORMAL = 1
 ' 返回 ＝ 创建进程 (“D:\劲舞团\patcher.exe”, 0, 0, 0, 假, 0, 0, 0, 启动信息数据, 创建进程返回数据类型)

赋值 (hProcess, 创建进程返回数据类型.hProcess)
赋值 (hThread, 创建进程返回数据类型.hThread)
赋值 (dwProcessId, 创建进程返回数据类型.dwProcessId)
赋值 (dwThreadId, 创建进程返回数据类型.dwThreadId)

相加 (“hProcess:”, 到文本 (hProcess), #换行符, “hThread:”, 到文本 (hThread), #换行符, “dwProcessId:”, 到文本 (dwProcessId), #换行符, “dwThreadId:”, 到文本 (dwThreadId)).加入文本 ()
 ' 子程序3 ()

.子程序 _滑块条2_位置被改变, 空白型, , 
赋值 (.标题, 到文本 (相加 (502, .位置)))


.子程序 子程序1, 空白型, , 
信息框 (“#A键”, 0, )

.子程序 子程序2, 整数型, , 
.局部变量 循环位置, 整数型, , , 
.局部变量 起始位置, 整数型, , , 
.局部变量 键间隔, 整数型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 键识别码, 文本型, , "9", 
.局部变量 键码, 整数型, , "9", 1，2，3，4，5，6，7，8，9
.局部变量 键个数, 整数型, , , 需要按键的个数
.局部变量 截取屏幕1, 字节集, , , 
.局部变量 截取屏幕2, 字节集, , , 
.局部变量 截取屏幕3, 字节集, , , 
.局部变量 截取屏幕4, 字节集, , , 

赋值 (截取屏幕1, 截取屏幕矩形 (屏幕区域 [1], 0))
赋值 (截取屏幕2, 截取屏幕矩形 (屏幕区域 [2], 0))
赋值 (截取屏幕3, 截取屏幕矩形 (屏幕区域 [3], 0))
赋值 (截取屏幕4, 截取屏幕矩形 (屏幕区域 [4], 0))
赋值 (键间隔, 17)
.变量循环首 (相乘 (15, 3), 相乘 (304, 3), 相乘 (键间隔, 3), 循环位置) ' 循环查找键位置
    .如果 (并且 (等于 (截取屏幕3 [相减 (循环位置, 2)], 255), 等于 (截取屏幕3 [相减 (循环位置, 1)], 255), 等于 (截取屏幕3 [循环位置], 255), 或者 (并且 (等于 (截取屏幕1 [相减 (循环位置, 2)], 255), 等于 (截取屏幕1 [相减 (循环位置, 1)], 16), 等于 (截取屏幕1 [循环位置], 0)), 并且 (等于 (截取屏幕1 [相减 (循环位置, 2)], 0), 等于 (截取屏幕1 [相减 (循环位置, 1)], 0), 等于 (截取屏幕1 [循环位置], 255)))))
        赋值 (键间隔, 34)
        赋值 (键个数, 相加 (键个数, 1))
        赋值 (键识别码 [键个数], 到文本 (颜色判断 (截取屏幕1 [相减 (循环位置, 2)], 截取屏幕1 [相减 (循环位置, 1)], 截取屏幕1 [循环位置]))) ' 获取键识别码第一位
        .变量循环首 (2, 9, 1, 循环变量) ' 获取键识别码2－9位
            赋值 (键识别码 [键个数], 相加 (键识别码 [键个数], 到文本 (RGB转换 (截取屏幕2 [相减 (相加 (循环位置, 取点偏移 [循环变量]), 2)], 截取屏幕2 [相减 (相加 (循环位置, 取点偏移 [循环变量]), 1)], 截取屏幕2 [相加 (循环位置, 取点偏移 [循环变量])]))))
        .变量循环尾 ()
        赋值 (键识别码 [键个数], 相加 (键识别码 [键个数], 到文本 (RGB转换 (截取屏幕4 [相减 (循环位置, 2)], 截取屏幕4 [相减 (循环位置, 1)], 截取屏幕4 [循环位置])))) ' 获取最后位
    .否则
        
    .如果结束
    
.变量循环尾 ()
.如果 (等于 (键个数, 0))
    keybd_event (38, 72, 0, 0)
    延时 (25)
    keybd_event (38, 72, 2, 0)
    延时 (100)
    返回 (0) ' 如果一个键都没有就按上键并返回假
.否则
    
.如果结束

.计次循环首 (键个数, 循环变量) ' 按照键识别码获得键码
    赋值 (键码 [循环变量], 寻找数组 (键识别码集合1, 到整数 (键识别码 [循环变量]), 1))
    .如果 (等于 (键码 [循环变量], -1))
        赋值 (键码 [循环变量], 寻找数组 (键识别码集合2, 到整数 (键识别码 [循环变量]), 1))
        .如果 (等于 (键码 [循环变量], -1))
            返回 (0) ' 如果这个键找不到就返回假
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    .如果 (大于 (键码 [循环变量], 9)) ' >9为红键
        赋值 (键码 [循环变量], 相减 (键码 [循环变量], 9))
    .否则
        
    .如果结束
     ' 编辑框1.内容 ＝ 编辑框1.内容 ＋ 到文本 (键码 [循环变量]) ＋ “；”
.计次循环尾 ()
 ' 编辑框1.内容 ＝ 编辑框1.内容 ＋ #换行符
.计次循环首 (键个数, 循环变量) ' 模拟按键
    keybd_event (键代码 [键码] [循环变量], 键扫描码 [键码] [循环变量], 0, 0)
    延时 (25)
    keybd_event (键代码 [键码] [循环变量], 键扫描码 [键码] [循环变量], 2, 0)
    延时 (25)
.计次循环尾 ()
返回 (键个数)


.子程序 子程序3, 逻辑型, , 
.局部变量 截取屏幕6, 字节集, , , 

赋值 (.时钟周期, 0)
.循环判断首 ()
    赋值 (截取屏幕6, 截取屏幕矩形 (屏幕区域 [6], 0))
    .如果 (并且 (等于 (截取屏幕6 [1], 255), 等于 (截取屏幕6 [2], 255), 小于 (截取屏幕6 [3], B值))) ' 且 截取屏幕6 [3] ＜ 255)  ' 或 截取屏幕6 [4] ＝ 255 且 截取屏幕6 [5] ＝ 255 且 截取屏幕6 [6] ＞ B值 且 截取屏幕6 [6] ＜ 255)
        keybd_event (#空格键, 0, 0, 0)
        延时 (25)
        keybd_event (#空格键, 0, 2, 0)
        延时 (25)
         ' keybd_event (#Ctrl键, 0, 0, 0)
         ' 延时 (25)
         ' keybd_event (#Ctrl键, 0, 2, 0)
         ' 延时 (25)
        赋值 (.时钟周期, 50)
        返回 (真)
    .否则
        
    .如果结束
    处理事件 ()
.循环判断尾 (大于 (取字节集长度 (截取屏幕6), 0))

返回 (假)


.子程序 子程序4, 逻辑型, , 
.局部变量 截取屏幕1, 字节集, , , 
.局部变量 屏幕区域1, 矩形区域数据, , , 

赋值 (.时钟周期, 0)
赋值 (屏幕区域1.左边, 相加 (502, .位置))
赋值 (屏幕区域1.顶边, 364)
赋值 (屏幕区域1.右边, 相加 (506, .位置))
赋值 (屏幕区域1.底边, 365)

.循环判断首 ()
    处理事件 ()
    赋值 (截取屏幕1, 截取屏幕矩形 (屏幕区域1, 0))
    .如果 (或者 (并且 (等于 (截取屏幕1 [1], 255), 等于 (截取屏幕1 [2], 255), 等于 (截取屏幕1 [3], 255)), 并且 (等于 (截取屏幕1 [4], 255), 等于 (截取屏幕1 [5], 255), 等于 (截取屏幕1 [6], 255)), 并且 (等于 (截取屏幕1 [7], 255), 等于 (截取屏幕1 [8], 255), 等于 (截取屏幕1 [9], 255)), 并且 (等于 (截取屏幕1 [10], 255), 等于 (截取屏幕1 [11], 255), 等于 (截取屏幕1 [12], 255))))
        keybd_event (#空格键, 0, 0, 0)
        延时 (25)
        处理事件 ()
        keybd_event (#空格键, 0, 2, 0)
        延时 (25)
        赋值 (.时钟周期, 50)
        返回 (真)
    .否则
        
    .如果结束
    处理事件 ()
.循环判断尾 (大于 (取字节集长度 (截取屏幕1), 0))
返回 (假)


.程序集 函数集, , , 

.子程序 取进程窗口句柄, 长整数型, , 
.参数 进程名, 文本型, , 

.局部变量 窗口列表, 文本型, , "0", 
.局部变量 进程列表, 未知类型0x30009, , "0", 
.局部变量 循环变量1, 整数型, , , 
.局部变量 循环变量2, 整数型, , , 
.局部变量 进程ID, 长整数型, , , 
.局部变量 窗口进程ID, 长整数型, , , 
.局部变量 窗口线程ID, 长整数型, , , 

赋值 (进程列表, 未知支持库函数_10 ())
赋值 (窗口列表, 未知支持库函数_75 ())
.计次循环首 (取数组成员数 (进程列表), 循环变量1)
    .如果 (等于 (进程列表 [循环变量1], , 进程名)) ' 进程是否存在
        赋值 (进程ID, 进程列表 [循环变量1], ) ' 取得进程ID
        
        .计次循环首 (取数组成员数 (窗口列表), 循环变量2) ' 取得进程窗口
            赋值 (窗口线程ID, 取窗口进程ID (到长整数 (窗口列表 [循环变量2]), 窗口进程ID))
            .如果 (等于 (窗口进程ID, 进程ID))
                 ' 编辑框1.内容 ＝ 编辑框1.内容 ＋ “进程ID：” ＋ 到文本 (进程ID) ＋ #换行符
                 ' 编辑框1.内容 ＝ 编辑框1.内容 ＋ “窗口句柄：” ＋ 窗口列表 [循环变量2] ＋ #换行符
                返回 (到数值 (窗口列表 [循环变量2])) ' 得到指定进程的窗口
            .否则
                
            .如果结束
            
        .计次循环尾 ()
    .否则
        
    .如果结束
    
.计次循环尾 ()
返回 (-1)



.子程序 进程是否存在, 长整数型, , 
.参数 进程名, 文本型, , 

.局部变量 进程列表, 未知类型0x30009, , "0", 
.局部变量 循环变量1, 整数型, , , 

赋值 (进程列表, 未知支持库函数_10 ())
.计次循环首 (取数组成员数 (进程列表), 循环变量1)
    .如果 (等于 (到大写 (进程列表 [循环变量1], ), 到大写 (进程名))) ' 进程是否存在
        返回 (进程列表 [循环变量1], ) ' 取得进程ID
    .否则
        
    .如果结束
    
.计次循环尾 ()
返回 (-1)

.子程序 RGB转换, 整数型, , 
.参数 RR, 字节型, , 
.参数 GG, 字节型, , 
.参数 BB, 字节型, , 

.如果 (或者 (并且 (大于 (RR, 200), 大于 (GG, 200), 等于 (BB, 255)), 并且 (等于 (RR, 255), 大于 (GG, 200), 大于 (BB, 200))))
    返回 (0)
.否则
    返回 (1)
.如果结束


.子程序 颜色判断, 整数型, , 
.参数 RR, 字节型, , 
.参数 GG, 字节型, , 
.参数 BB, 字节型, , 

.如果 (并且 (等于 (RR, 255), 等于 (GG, 16), 等于 (BB, 0)))
    返回 (1)
.否则
    .如果 (并且 (等于 (RR, 0), 等于 (GG, 0), 等于 (BB, 255)))
        返回 (2)
    .否则
        返回 (0)
    .如果结束
    
.如果结束


.子程序 寻找数组, 整数型, , 
.参数 大数组, 整数型, 数组, 
.参数 找数据, 整数型, , 
.参数 开始位置, 整数型, , 

.局部变量 lngI, 整数型, , , 

.计次循环首 (取数组成员数 (大数组), lngI)
    .如果 (等于 (大数组 [lngI], 找数据))
        返回 (lngI)
    .否则
        
    .如果结束
    
.计次循环尾 ()
返回 (-1)


.程序集 截取屏幕程序, , , 

.子程序 截屏, 字节集, 公开, 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 右边, 整数型, , 
.参数 底边, 整数型, , 
.参数 窗口句柄, 长整数型, 可空, 

.局部变量 局部_位图信息, 位图信息_, , , 
.局部变量 局部_空白字节集, 字节集, , , 
.局部变量 hdc, 长整数型, , , 
.局部变量 对象, 整数型, , , 
.局部变量 场景, 整数型, , , 

赋值 (局部_位图信息.位深度, 24)
赋值 (局部_位图信息.压缩率, #BI_RGB)
赋值 (局部_位图信息.位图位面数, 1)
赋值 (局部_位图信息.结果大小, 40)
赋值 (局部_位图信息.位图宽度, 相减 (右边, 左边))
赋值 (局部_位图信息.位图高度, 相减 (底边, 顶边))
赋值 (局部_空白字节集, 取空白字节集 (相乘 (局部_位图信息.位图宽度, 局部_位图信息.位图高度, 3)))
赋值 (hdc, 取设备场景_ (窗口句柄))
赋值 (场景, 创建内存场景_ (窗口句柄))
赋值 (对象, 创建GDI对象_ (场景, 局部_位图信息, #DIB_RGB_COLORS, 0, 0, 0))
选入设备场景_ (场景, 对象)
复制场景位图_ (场景, 0, 0, 局部_位图信息.位图宽度, 局部_位图信息.位图高度, hdc, 左边, 顶边, 13369376)
 ' 复制场景位图_ (程序集_场景句柄, 0, 0, 局部_位图信息.位图宽度, 局部_位图信息.位图高度, hdc, 0, 0, 13369376)
取位图二进制位_ (场景, 对象, 0, 局部_位图信息.位图高度, 局部_空白字节集 [1], 局部_位图信息, #DIB_RGB_COLORS)

释放设备场景_ (0, hdc)
删除设备场景_ (场景)
删除对象_ (对象)
返回 (局部_空白字节集)



.子程序 截取屏幕矩形, 字节集, 公开, 
.参数 矩形区域, 矩形区域数据, , 
.参数 窗口句柄, 长整数型, 可空, 

.局部变量 局部_位图信息, 位图信息_, , , 
.局部变量 局部_空白字节集, 字节集, , , 
.局部变量 hdc, 长整数型, , , 
.局部变量 对象, 整数型, , , 
.局部变量 场景, 整数型, , , 

赋值 (局部_位图信息.位深度, 24)
赋值 (局部_位图信息.压缩率, #BI_RGB)
赋值 (局部_位图信息.位图位面数, 1)
赋值 (局部_位图信息.结果大小, 40)
赋值 (局部_位图信息.位图宽度, 相减 (矩形区域.右边, 矩形区域.左边))
赋值 (局部_位图信息.位图高度, 相减 (矩形区域.底边, 矩形区域.顶边))
赋值 (局部_空白字节集, 取空白字节集 (相乘 (局部_位图信息.位图宽度, 局部_位图信息.位图高度, 3)))
赋值 (hdc, 取设备场景_ (窗口句柄))
赋值 (场景, 创建内存场景_ (窗口句柄))
赋值 (对象, 创建GDI对象_ (场景, 局部_位图信息, #DIB_RGB_COLORS, 0, 0, 0))
选入设备场景_ (场景, 对象)
复制场景位图_ (场景, 0, 0, 局部_位图信息.位图宽度, 局部_位图信息.位图高度, hdc, 矩形区域.左边, 矩形区域.顶边, 13369376)
 ' 复制场景位图_ (程序集_场景句柄, 0, 0, 局部_位图信息.位图宽度, 局部_位图信息.位图高度, hdc, 0, 0, 13369376)
取位图二进制位_ (场景, 对象, 0, 局部_位图信息.位图高度, 局部_空白字节集 [1], 局部_位图信息, #DIB_RGB_COLORS)

释放设备场景_ (0, hdc)
删除设备场景_ (场景)
删除对象_ (对象)
返回 (局部_空白字节集)


 ' 不属于任何一个程序集、类模块的函数：
