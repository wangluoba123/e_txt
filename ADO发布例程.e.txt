 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 343
    高度 = 335
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “ADO类使用例程”
    帮助文件名 = “”

窗口 W成本计算
    左边 = 50
    顶边 = 50
    宽度 = 642
    高度 = 353
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “产品成本计算”
    帮助文件名 = “”

窗口 W产品资料输入
    左边 = 50
    顶边 = 50
    宽度 = 806
    高度 = 544
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' FlexCell43.npk {CF2DD40F-BE83-4E62-84EE-FC3CD8F882AD}##0 1 0 FlexCell 1,{CF2DD40F-BE83-4E62-84EE-FC3CD8F882AD},Grid,{1745027173,1745027156,1610809514,1610809515,1610809516,1610809517,1745027133,1745027131,1745027125,1610809518,1745027122,1745027121,1745027121,1745027116,1745027109,1610809519,1610809520,1610809521,1610809522,1610809523,1610809524,1610809525,1610809526,1610809527,1610809528,1610809529,1610809530,1610809531,1610809532,1610809533,1610809534,1610809535,1610809536,1610809537,1610809538,1610809539,1610809540,1610809541,1610809542,1610809543,1610809544,1610809545,1610809546,},{1745027110,1745027111,1745027112,1745027113,1745027114,1745027115,1745027117,1745027118,1745027119,1745027120,1745027123,1745027124,1745027126,1745027127,1745027128,1745027129,1745027130,1745027132,-520,1745027134,1745027135,1745027136,1745027137,1745027138,1745027139,1745027140,1745027141,1745027142,1745027143,1745027144,1745027145,1745027146,1745027147,1745027148,1745027149,1745027150,1745027151,1745027152,1745027153,1745027154,1745027155,1745027157,1745027158,1745027159,1745027160,1745027161,1745027162,1745027163,1745027164,1745027165,1745027166,1745027167,1745027168,1745027169,1745027170,1745027171,1745027172,},{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,}0,{557474FC-72AA-4775-A025-600B0A25CDFB},Selection,{1745027090,1745027089,1745027088,1745027087,1745027086,1745027085,1745027084,1745027083,1745027082,1745027081,1745027080,1745027079,1745027078,1745027077,1745027076,1610809364,1610809365,1610809366,1610809367,1610809368,1610809369,1610809370,1610809371,1610809372,1610809373,1610809374,},{1745027072,1745027073,1745027074,1745027075,},{}0,{1AE3F3BE-4950-4BAF-962C-01157A6D273C},Cell,{1745027086,1745027086,1610809369,1610809370,1610809372,1610809373,},{1745027072,1745027073,1745027074,1745027075,1745027076,1745027077,1745027078,1745027079,1745027080,1745027081,1745027082,1745027083,1745027084,1745027085,1745027087,1745027088,1745027089,1745027090,1745027091,1745027092,1745027093,1745027095,1745027096,},{}0,{D81BAA7F-F9AD-477F-8D97-B6DA99509F56},Column,{1745027072,1610809357,1610809358,},{1745027073,1745027074,1745027075,1745027076,1745027077,1745027078,1745027079,1745027080,1745027081,1745027082,},{}0,{03693A3F-E7A1-4A4F-83F0-DCCFD13B0E05},ComboBox,{1610809355,1610809356,1610809357,1610809358,1745027079,1745027079,1745027076,1610809359,},{1745027072,1745027073,1745027074,1745027075,1745027077,1745027078,1745027080,1745027081,},{}0,{48FC7894-7155-4A1B-8B53-17AA2DFDA553},Range,{1610809368,1745027086,1745027085,1745027084,1745027083,1745027082,1745027081,1745027080,1745027079,1745027078,1745027077,1745027076,1745027075,1745027074,1745027073,1745027072,1610809369,1610809370,1610809371,1610809372,1610809373,1610809374,},{1745027087,1745027088,1745027089,1745027090,},{}0,{1A27F99E-4AE6-499D-A150-14A39FF4CFB1},PageSetup,{},{1745027072,1745027073,1745027074,1745027075,1745027076,1745027077,1745027078,1745027079,1745027080,1745027081,1745027082,1745027083,1745027084,1745027085,1745027086,1745027087,1745027088,1745027089,1745027090,1745027091,1745027092,1745027093,1745027094,1745027095,1745027096,1745027097,1745027098,1745027099,1745027100,1745027101,1745027102,},{}0,{C575F566-AE50-47E6-8D1E-157595B36581},Chart,{1610809371,1610809372,},{1745027081,1745027082,1745027083,1745027084,1745027085,1745027086,1745027087,1745027088,1745027089,1745027090,1745027091,1745027092,1745027093,1745027094,1745027095,1745027096,},{}0,{E4A16D4C-BB86-4191-87AA-6B80028EB825},Image,{1610809347,},{1745027072,1745027074,},{}0,{5CCA38F9-C3D3-4CC6-A61F-C8CC41CDCA87},Images,{1610809346,1610809347,1610809348,1610809349,1610809350,},{},{}0,{30CA336C-58AB-40CC-9F70-FB7F70B5322F},PageBreak,{},{1745027072,},{}0,{B5AC3DA4-5517-4B10-8B0B-FD903EE6A9AB},VPageBreaks,{1610809346,1610809347,1610809348,1610809349,1610809351,},{},{}0,{FC3E3EB0-DF9F-4D6D-9744-A78CD9DB8B8A},HPageBreaks,{1610809346,1610809347,1610809348,1610809349,1610809351,},{},{}0,{6D8D6BD8-734B-4729-99D8-F8F645D3E0CE},Calendar,{},{1745027072,1745027073,1745027074,1745027075,},{}0,{CC428083-B374-453F-A5B9-D672DF814826},ReportTitle,{},{1745027072,1745027073,1745027074,1745027075,1745027076,1745027077,1745027078,1745027079,},{}0,{635EFBA5-7378-4503-A21D-F8BAC615B8FF},ReportTitles,{1610809346,1610809347,1610809348,1610809349,1610809350,},{},{}2,{70EC4627-251B-4200-9B56-547909DA538B},AlignmentConstants,{},{1073741839,1073741838,1073741837,1073741836,1073741835,1073741834,1073741833,1073741832,1073741831,1073741830,1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{141FC73C-D466-4C7B-AEA5-80CCA4725965},DateFormatConstants,{},{1073741826,1073741825,1073741824,},{}2,{884CFAC5-2CB4-44D5-AE94-A8D20EEE067B},TypeConstants,{},{1073741830,1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{C9908C66-3482-4477-8B4A-490E08F02A40},MaskConstants,{},{1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{07B5E8E1-C27F-46F5-B4EC-6801059C78B1},ScrollBarsConstants,{},{1073741827,1073741826,1073741825,1073741824,},{}2,{7EA018A4-FD66-40A6-B39F-C145223D5169},SearchConstants,{},{1073741825,1073741824,},{}2,{FDAB2BD9-B612-4295-8E7F-9C36DC4786FC},AppearanceConstants,{},{1073741825,1073741824,},{}2,{F44D268D-7CD8-408C-9610-A81EB19D943C},FocusrectConstants,{},{1073741825,1073741824,},{}2,{241D4D07-5136-4F35-A8CB-F9015E5AABD0},SelectionModeContrants,{},{1073741827,1073741826,1073741825,1073741824,},{}2,{7C1AF509-E145-4139-B3DF-69DA971DFBAD},LineStyleConstants,{},{1073741827,1073741826,1073741825,1073741824,},{}2,{641BF6D7-9837-4938-B8DC-97D8C1E1A49A},EdgeConstants,{},{1073741831,1073741830,1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{4B8D71B1-32D4-4DD5-B2AC-F7FE774EEB56},SortConstants,{},{1073741825,1073741824,},{}2,{682AA9B0-9143-4CC7-909A-905D0DCC2588},SortIndicatorConstants,{},{1073741827,1073741826,1073741825,1073741824,},{}2,{CA8AD0E6-3C2C-4C1C-AA46-E1C3CA974876},MoveToConstants,{},{1073741825,1073741824,},{}2,{DEBF47FC-39CF-448F-ACE5-B8E3009BB6C8},PaperSizeConstants,{},{1073741865,1073741864,1073741863,1073741862,1073741861,1073741860,1073741859,1073741858,1073741857,1073741856,1073741855,1073741854,1073741853,1073741852,1073741851,1073741850,1073741849,1073741848,1073741847,1073741846,1073741845,1073741844,1073741843,1073741842,1073741841,1073741840,1073741839,1073741838,1073741837,1073741836,1073741835,1073741834,1073741833,1073741832,1073741831,1073741830,1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{6F44764F-7875-436B-B7A5-9CDB1DCB5F7B},OrientationConstants,{},{1073741825,1073741824,},{}2,{0CB1F8F4-CF88-4536-9536-6032C1721DD4},HeaderFooterAlignmentConstants,{},{1073741826,1073741825,1073741824,},{}2,{A50DA228-9ADA-4BBE-AFE6-0D037E0A4DBF},ChartTypeConstants,{},{1073741829,1073741828,1073741827,1073741826,1073741825,1073741824,},{}2,{4CE2F8D7-DB21-4156-9945-5C5A706D81FE},PlotTypeConstants,{},{1073741825,1073741824,},{}





.类模块 ADO连接, , , 

.程序集变量 连接, 对象, , , 
.程序集变量 错误集, 对象, , , 
.程序集变量 错误, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
连接.创建 (“ADODB.Connection”, )

.子程序 C创建, 逻辑型, 公开, 
返回 (连接.创建 (“ADODB.Connection”, ))

.子程序 取错误集, 空白型, 公开, 
赋值 (错误集, 连接.读对象型属性 (“Errors”, ))

.子程序 清空错误集, 空白型, 公开, 
错误集.方法 (“Clear”, )

.子程序 取错误数, 整数型, 公开, 
返回 (错误集.读数值属性 (“count”, ))

.子程序 取错误对象, 对象, 公开, 
.参数 索引, 整数型, , 计算集合中对象的名称或顺序号

.局部变量 变体, 变体型, , , 

变体.赋值 (索引, )
返回 (错误集.读对象型属性 (“Item ”, 变体))

.子程序 取错误文本, 文本型, 公开, 使用 Description 属性可获得错误的简要说明。显示该属性可针对您无法或不想处理的错误向用户提出警告。该字符串可源于 ADO 或提供者。
.参数 错误序号, 整数型, , 

.局部变量 变体, 变体型, , , 

变体.赋值 (错误序号, )
赋值 (错误, 错误集.读对象型属性 (“Item”, 变体))
返回 (错误.读文本属性 (“Description”, ))

.子程序 取错误号, 整数型, 公开, 指示用于唯一标识 Error 对象的数字。
.参数 错误序号, 整数型, , 

.局部变量 变体, 变体型, , , 

变体.赋值 (错误序号, )
赋值 (错误, 错误集.读对象型属性 (“Item”, 变体))
返回 (错误.读数值属性 (“Number”, ))

.子程序 取错误源, 文本型, 公开, 使用 Error 对象的 Source 属性来确定产生错误的原始对象或应用程序的名称。该名称可以是对象的类名或编程 ID。对于 ADODB 的错误，属性值将是 ADODB.ObjectName，ObjectName 是触发错误的对象名称。Error 对象的 Source 属性是只读的。
.参数 错误序号, 整数型, , 

.局部变量 变体, 变体型, , , 

变体.赋值 (错误序号, )
赋值 (错误, 错误集.读对象型属性 (“Item”, 变体))
返回 (错误.读文本属性 (“Source”, ))

.子程序 取错误源状态, 文本型, 公开, 使用 SQLState 属性读取由提供者在处理 SQL 语句过程中出现错误时返回的 5 个字符的错误代码
.参数 错误序号, 整数型, , 

.局部变量 变体, 变体型, , , 

变体.赋值 (错误序号, )
赋值 (错误, 错误集.读对象型属性 (“Item”, 变体))
返回 (错误.读文本属性 (“SQLState”, ))

.子程序 取错误源错误代码, 整数型, 公开, 指示给定 Error 对象的、特定提供者的错误代码。
.参数 错误序号, 整数型, , 

.局部变量 变体, 变体型, , , 

变体.赋值 (错误序号, )
赋值 (错误, 错误集.读对象型属性 (“Item”, 变体))
返回 (错误.读数值属性 (“NativeError”, ))

.子程序 C关闭, 空白型, 公开, 
连接.方法 (“Close”, )

.子程序 C打开, 空白型, 公开, 
连接.方法 (“Open”, )

.子程序 C返回对象, 对象, 公开, 
返回 (连接)

.子程序 C打开EX, 整数型, 公开, 
.参数 连接字符, 文本型, , 
.参数 权限, 整数型, , 0未知权限;1只读权限;2只写权限;3读写权限;4独占读权限8独占写权限;12独占权限；16共享权限
.参数 游标位置, 整数型, , 1.NONE ; 2.SERVER ;3. CLIENT  

连接.写属性 (“Mode”, 权限)
连接.写属性 (“CursorLocation”, 游标位置)
连接.写属性 (“ConnectionString”, 连接字符)
连接.方法 (“Open”, )
返回 (连接.读数值属性 (“State”, ))

.子程序 C执行, 对象, 公开, 
.参数 执行命令, 文本型, , 包含要执行的 SQL 语句、表名、存储过程或特定提供者的文本。
.参数 返回记录数, 变体型, 可空, 可选，长整型变量，提供者向其返回操作所影响的记录数目
.参数 选项, 整数型, , 值 UNSPECIFIED -1 ;UNKNOWN 8 ;TEXT 1 ;TABLE 2 ;STOREDPROC 4 ;FILE 256 ;TABLEDIRECT 512 ;

返回 (连接.对象型方法 (“Execute”, 执行命令, 返回记录数, 选项))

.子程序 C终止, 空白型, 公开, 
连接.方法 (“Cancel”, )

.子程序 C事务开始, 整数型, 公开, 返回指示事务嵌套层次的长整型变量，在客户端 Connection 对象上无效。
返回 (连接.数值方法 (“BeginTrans”, ))

.子程序 C事务执行, 空白型, 公开, 在客户端 Connection 对象上无效。
连接.方法 (“CommitTrans”, )

.子程序 C事务撤消, 空白型, 公开, 在客户端 Connection 对象上无效。
连接.方法 (“RollbackTrans ”, )

.子程序 置事务隔离级别, 逻辑型, 公开, 
.参数 隔离级别, 整数型, , 

返回 (连接.写属性 (“IsolationLevel”, 隔离级别))

.子程序 置连接字符, 逻辑型, 公开, 
.参数 连接字符, 文本型, , 

返回 (连接.写属性 (“ConnectionString”, 连接字符))

.子程序 置连接超时, 逻辑型, 公开, 设置超时时间，以毫秒为单位，1000毫秒为1秒钟，若时间超出，会取消连接，并弹出信息提示框
.参数 超时, 整数型, , 

返回 (连接.写属性 (“ConnectionTimeout”, 超时))

.子程序 置命令超时, 逻辑型, 公开, 设置超时时间，以毫秒为单位，1000毫秒为1秒钟，若时间超出，会取消相关命令，并弹出信息提示框
.参数 超时, 整数型, , 

返回 (连接.写属性 (“CommandTimeout”, 超时))

.子程序 置权限, 逻辑型, 公开, 该整数为以下常量值之一或之和：0未知权限;1只读权限;2只写权限;3读写权限;4独占读权限8独占写权限;12独占权限；16共享权限
.参数 权限, 整数型, , 

返回 (连接.写属性 (“Mode”, 权限))

.子程序 取权限, 文本型, 公开, 返回：0未知权限;1只读权限;2只写权限;3读写权限;4独占读权限8独占写权限;12独占权限；16共享权限
返回 (连接.读文本属性 (“Mode”, ))

.子程序 置默认数据库, 逻辑型, 公开, 
.参数 数据库名, 文本型, , 

返回 (连接.写属性 (“DefaultDatabase”, 数据库名))

.子程序 取默认数据库, 文本型, 公开, 
返回 (连接.读文本属性 (“DefaultDatabase”, ))

.子程序 置游标位置, 逻辑型, 公开, 1.NONE ; 2.SERVER ;3. CLIENT 
.参数 位置, 整数型, , 

返回 (连接.写属性 (“CursorLocation”, 位置))

.子程序 取OLE提供者, 文本型, 公开, 
返回 (连接.读文本属性 (“Provider”, ))

.子程序 取状态, 整数型, 公开, 
返回 (连接.读数值属性 (“State”, ))

.子程序 取版本号, 文本型, 公开, 
返回 (连接.读文本属性 (“Version”, ))

.子程序 取数据库模式信息, 对象, 公开, 返回包含模式信息的 Recordset 对象。Recordset 将以只读、静态游标打开
.参数 Schema, 整数型, , 所要运行的模式查询类型，
.参数 Restrictions, 变体型, , 每个 QueryType 选项的查询限制条件数组，类型为“变体型”，可以被省略。
.参数 SchemaID, 变体型, , 参数是可用于限制模式查询结果的值数组。每个模式查询有它支持的不同参数集。实际模式由 IDBSchemaRowset 接口下的 OLE DB 规范定义，类型为“变体型”，可以被省略

返回 (连接.对象型方法 (“OpenSchema”, Schema, Restrictions, SchemaID))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
连接.方法 (“close”, )
连接.清除 ()

.类模块 ADO记录集, , , 

.程序集变量 记录集, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
记录集.创建 (“ADODB.RecordSet”, )

.子程序 C创建, 逻辑型, 公开, 
返回 (记录集.创建 (“ADODB.RecordSet”, ))

.子程序 返回对象, 对象, 公开, 
返回 (记录集)

.子程序 C创建ADOR, 逻辑型, 公开, 
返回 (记录集.创建 (“ADODB.ADOR”, ))

.子程序 C打开, 空白型, 公开, 
记录集.方法 (“Open”, )

.子程序 C批更新, 空白型, 公开, 
.参数 AffectRecords, 整数型, , 参数默认值为“3”，参数值为以下值之一： 1、adAffectCurrent； 2、adAffectGroup； 3、adAffectAll； 4、adAffectAllChapters。

记录集.方法 (“UpdateBatch”, AffectRecords)

.子程序 C批终止, 空白型, 公开, 
.参数 AffectRecords, 空白型, , 参数默认值为“3”，参数值为以下值之一： 1、adAffectCurrent； 2、adAffectGroup； 3、adAffectAll； 4、adAffectAllChapters。

记录集.方法 (“CancelBatch”, AffectRecords)

.子程序 C复制, 对象, 公开, 返回对象(Recordset)
.参数 锁类型, 整数型, , -1、adLockUnspecified； 1、adLockReadOnly； 2、adLockPessimistic； 3、adLockOptimistic； 4、adLockBatchOptimistic

返回 (记录集.对象型方法 (“Clone”, 锁类型))

.子程序 C建自制集, 空白型, 公开, 
.参数 建表语句, 文本型, , 

记录集.方法 (“Close”, )
记录集.写属性 (“ActiveConnection”, “Provider=MSDataShape;Data Provider=None”)
记录集.方法 (“Open”, 建表语句, 3, 3)

.子程序 C打开外连Ex, 空白型, 公开, 
.参数 数据源, 文本型, , 
.参数 连接, 对象, , 
.参数 游标类型, 整数型, , 0、仅向前游标，默认值。除了只能在记录中向前滚动外，与静态游标相同 1、 键集游标。 2、 动态游标； 3、静态游标
.参数 锁类型, 整数型, , 1.默认值，只读。无法更改数据；2.保守式记录锁定（逐条）。3.开放式记录锁定（逐条）。4.开放式批更新。 -1、adLockUnspecified；
.参数 属性, 整数型, , -1.UNSPECIFIED 8.UNKNOWN 未知1.TEXT  命令或存储过程调用2.TABLE 表格4.STOREDPROC  存储过程256.FILE 文件名512.TABLEDIRECT 

.局部变量 数变, 变体型, , , 
.局部变量 连接变, 变体型, , , 

数变.赋值 (数据源, )
连接变.赋值 (连接, )
记录集.方法 (“Open”, 数变, 连接变, 游标类型, 锁类型, 属性)

.子程序 C打开命令, 空白型, 公开, 
.参数 数据源, 对象, , 
.参数 连接, 对象, , 
.参数 游标类型, 整数型, , 0、仅向前游标，默认值。除了只能在记录中向前滚动外，与静态游标相同 1、 键集游标。 2、 动态游标； 3、静态游标
.参数 锁类型, 整数型, , 1.默认值，只读。无法更改数据；2.保守式记录锁定（逐条）。3.开放式记录锁定（逐条）。4.开放式批更新。 -1、adLockUnspecified；
.参数 属性, 整数型, , -1.UNSPECIFIED 8.UNKNOWN 未知1.TEXT  命令或存储过程调用2.TABLE 表格4.STOREDPROC  存储过程256.FILE 文件名512.TABLEDIRECT 

.局部变量 数变, 变体型, , , 
.局部变量 连接变, 变体型, , , 

数变.赋值 (数据源, )
连接变.赋值 (连接, )
记录集.方法 (“Open”, 数变, 连接变, 游标类型, 锁类型, 属性)

.子程序 C打开自连Ex, 空白型, 公开, 
.参数 数据源, 文本型, , 
.参数 连接, 文本型, , 
.参数 游标类型, 整数型, , 0、仅向前游标，默认值 1、 键集游标 2、 动态游标。 3、静态游标。
.参数 锁类型, 整数型, , 1.默认值，只读。2.保守式记录锁定（逐条）。3.开放式记录锁定（逐条）。4.开放式批更新。 -1、adLockUnspecified；
.参数 属性, 整数型, , -1.UNSPECIFIED 8.UNKNOWN 未知1.TEXT  命令或存储过程调用2.TABLE 表格4.STOREDPROC  存储过程256.FILE 文件名512.TABLEDIRECT 

.局部变量 数变, 变体型, , , 
.局部变量 连接变, 变体型, , , 

数变.赋值 (数据源, )
连接变.赋值 (连接, )
记录集.方法 (“Open”, 数变, 连接, 游标类型, 锁类型, 属性)

.子程序 C关闭, 空白型, 公开, 
记录集.方法 (“Close”, )

.子程序 C新增记录Ex, 空白型, 公开, 
.参数 字段列表数组, 变体型, , 可选。新记录中字段的单个名称、一组名称或序号位置
.参数 字段值数组, 变体型, , 新记录中字段的单个或一组值。如果 Fields 是数组，那么 Values 也必须是有相同成员数的数组

记录集.方法 (“AddNew”, 字段列表数组, 字段值数组)

.子程序 C新增记录, 空白型, 公开, 
记录集.方法 (“AddNew”, )

.子程序 C删除, 空白型, 公开, 使用 Delete 方法可将 Recordset 对象中的当前记录或一组记录标记为删除。如果 Recordset 对象不允许删除记录将引发错误。使用立即更新模式将在数据库中进行立即删除，否则记录将标记为从缓存删除，实际的删除将在调用 UpdateBatch 方法时进行。（使用 Filter 属性可查看已删除的记录）。
.参数 删除范围, 整数型, , 1、默认。仅删除当前记录； 2、删除满足当前 Filter 属性设置的记录； 3、删除所有记录； 4、删除所有子集记录

记录集.方法 (“Delete”, 删除范围)

.子程序 C自断, 逻辑型, 公开, 
.局部变量 空, 变体型, , , 
.局部变量 空连接对象, 对象, , , 

 ' 空连接对象.创建 (“ADODB.Connection”, )
空.赋值 (“nothing”, )
返回 (记录集.写属性 (“ActiveConnection”, 空))

.子程序 C填充数组, 变体型, 公开, 
.局部变量 Rows, 整数型, , , 参数默认值为“-1”
.局部变量 Start, 变体型, , , 
.局部变量 Fields, 变体型, , , 

返回 (记录集.通用方法 (“GetRows”, Rows, Start, Fields))

.子程序 GetString, 文本型, 公开, 
.局部变量 StringFormat, 整数型, , , 参数默认值为“2”，参数值为以下值之一： 2、adClipString。
.局部变量 NumRows, 整数型, , , 参数默认值为“-1”
.局部变量 ColumnDelimeter, 文本型, , , 
.局部变量 RowDelimeter, 文本型, , , 
.局部变量 NullExpr, 文本型, , , 

返回 (记录集.文本方法 (“GetString”, 2, -1, ColumnDelimeter, RowDelimeter, NullExpr))

.子程序 取属性对象, 对象, 公开, 对象(Properties)
返回 (记录集.读对象型属性 (“Properties”, ))

.子程序 取字段集对象, 对象, 公开, 
返回 (记录集.读对象型属性 (“Fields”, ))

.子程序 C终止, 空白型, 公开, 取消执行挂起的异步 Execute 或 Open 方法的调用。
记录集.方法 (“Cancel”, )

.子程序 C索引搜索, 空白型, 公开, 搜索 Recordset 的索引，快速定位与指定值相匹配的行，并将当前行更改为该行
.参数 KeyValues, 变体型, , 索引由一个或多个列组成，而数组包含与每个对应列进行比较的值
.参数 SeekOption, 整数型, , 指定在索引的列和对应的 KeyValues 之间进行的比较的类型 1、查找等于 KeyValues 的第一个关键字； 2、查找等于 KeyValues 的最后一个关键字； 4、查找等于 KeyValues 的关键字，或仅在已经匹配过的位置之后进行查找； 8、仅在已经有过与 KeyValues 匹配的位置之后进行查找； 16、查找等于 KeyValues 的关键字，或仅在已经匹配过的位置之前进行查找； 32、仅在已经有过与 KeyValues 匹配的位置之前进行查找。

记录集.方法 (“Seek”, KeyValues, SeekOption)

.子程序 置外连接, 逻辑型, 公开, 
.参数 连接, 对象, , 

.局部变量 变连接, 变体型, , , 

变连接.赋值 (连接, )
返回 (记录集.写属性 (“ActiveConnection”, 变连接))

.子程序 置自连接, 逻辑型, 公开, 
.参数 连接, 文本型, , 

.局部变量 变连接, 变体型, , , 

变连接.赋值 (连接, )
返回 (记录集.写属性 (“ActiveConnection”, 变连接))

.子程序 取连接, 变体型, 公开, 
返回 (记录集.读属性 (“ActiveConnection”, ))

.子程序 取值, 变体型, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
返回 (对象.读属性 (“Value”, ))

.子程序 置值, 逻辑型, 公开, 
.参数 字段, 整数型, , 
.参数 值, 变体型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
返回 (对象.写属性 (“Value”, 值))

.子程序 置文本, 逻辑型, 公开, 
.参数 字段, 整数型, , 
.参数 字段值, 文本型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
返回 (对象.写属性 (“Value”, 字段值))

.子程序 取值Ex, 变体型, 公开, 
.参数 字段, 文本型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
返回 (对象.读属性 (“Value”, ))

.子程序 置调度返回, 空白型, 公开, 该属性只能在客户端 (ADOR) Recordset 上使用
.参数 调度方式, 整数型, , 0、adMarshalAll； 1、adMarshalModifiedOnly

记录集.写属性 (“MarshalOptions”, 调度方式)

.子程序 取调度返回, 整数型, 公开, 该属性只能在客户端 (ADOR) Recordset 上使用
返回 (记录集.读数值属性 (“MarshalOptions”, ))

.子程序 取文本, 文本型, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
赋值 (变体, 对象.读属性 (“Value”, ))
返回 (变体.取文本 ())

.子程序 取字节集, 字节集, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
赋值 (变体, 对象.读属性 (“Value”, ))
返回 (变体.取字节集 ())

.子程序 取整数, 整数型, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
赋值 (变体, 对象.读属性 (“Value”, ))
返回 (变体.取数值 ())

.子程序 取数值, 双精度小数型, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
赋值 (变体, 对象.读属性 (“Value”, ))
返回 (变体.取数值 ())

.子程序 取日期, 日期时间型, 公开, 
.参数 字段, 整数型, , 

.局部变量 变体, 变体型, , , 
.局部变量 对象, 对象, , , 

变体.赋值 (字段, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 变体))
赋值 (变体, 对象.读属性 (“Value”, ))
返回 (变体.取日期 ())

.子程序 置数据源, 逻辑型, 公开, 
.参数 数据源, 文本型, , 

.局部变量 变体数据源, 变体型, , , 

变体数据源.赋值 (数据源, )
返回 (记录集.写属性 (“Source”, 变体数据源))

.子程序 取数据源, 文本型, 公开, 
.局部变量 变体, 变体型, , , 

赋值 (变体, 记录集.读属性 (“Source”, ))
返回 (变体.取文本 ())

.子程序 取状态, 整数型, 公开, 
返回 (记录集.读数值属性 (“State”, ))

.子程序 取批操作状态, 整数型, 公开, 
返回 (记录集.读数值属性 (“Status”, ))

.子程序 置索引, 空白型, 公开, 
.参数 索引, 文本型, , 

记录集.方法 (“Index”, 索引)

.子程序 取索引, 文本型, 公开, 
返回 (记录集.读文本属性 (“Index”, ))

.子程序 置属性Ex, 空白型, 公开, 


.子程序 置锁类型, 逻辑型, 公开, 指示编辑过程中对记录使用的锁定类型
.参数 锁类型, 整数型, , 1.默认值，只读。无法更改数据；2.保守式记录锁定（逐条）。提供者执行必要的操作确保成功编辑记录，通常采用编辑时立即锁定数据源的记录的方式。；3.开放式记录锁定（逐条）。提供者使用开放式锁定，只在调用 Update 方法时锁定记录。；4.开放式批更新。用于与立即更新模式相反的批更新模式。 -1、adLockUnspecified；

返回 (记录集.写属性 (“LockType”, 锁类型))

.子程序 读锁类型, 整数型, 公开, 
返回 (记录集.读数值属性 (“LockType”, ))

.子程序 置游标位置, 逻辑型, 公开, 设置游标服务的位置
.参数 类型, 整数型, , 1、没有使用游标服务。（该常量已过时并且只为了向后兼容才出现）。； 2、默认值。使用数据提供者的或驱动程序提供的服务端游标。； 3、使用由本地游标库提供的客户端游标。

返回 (记录集.写属性 (“CursorLocation”, 类型))

.子程序 取游标位置, 整数型, 公开, 返回游标服务的位置
返回 (记录集.读数值属性 (“CursorLocation”, ))

.子程序 置游标类型, 逻辑型, 公开, 
.参数 类型, 整数型, ,  0、仅向前游标，默认值。除了只能在记录中向前滚动外，与静态游标相同。当只需要在记录集中单向移动时，使用它可提高性能。； 1、 键集游标。尽管从您的记录集不能访问其他用户删除的记录，但除无法查看其他用户添加的记录外，键集游标与动态游标相似。仍然可以看见其他用户更改的数据 ； 2、 动态游标。可以看见其他用户所作的添加、更改和删除。允许在记录集中进行所有类型的移动，但不包括提供者不支持的书签操作 ； 3、静态游标。可以用来查找数据或生成报告的记录集合的静态副本。另外，对其他用户所作的添加、更改或删除不可见。

返回 (记录集.写属性 (“CursorType”, 类型))

.子程序 取游标类型, 整数型, 公开, 
返回 (记录集.读数值属性 (“CursorType”, ))

.子程序 取当前页号, 整数型, 公开, -1.不支持取页号，-2页首，-3页尾，其它为当前页号
返回 (记录集.读数值属性 (“AbsolutePagee”, ))

.子程序 置当前页号, 逻辑型, 公开, 
.参数 页号, 整数型, , 

返回 (记录集.写属性 (“AbsolutePagee”, 页号))

.子程序 置页长度, 逻辑型, 公开, 
.参数 页长度, 整数型, , 

返回 (记录集.写属性 (“PageSize”, 页长度))

.子程序 取页长度, 整数型, 公开, 
返回 (记录集.读数值属性 (“PageSize”, ))

.子程序 取当前页记录号, 整数型, 公开, -1.不支持，-2记录首，-3记录尾，其它为当前记录号
返回 (记录集.读数值属性 (“AbsolutePosition”, ))

.子程序 置当前页记录号, 逻辑型, 公开, 
.参数 记录号, 整数型, , 

返回 (记录集.写属性 (“AbsolutePosition”, 记录号))

.子程序 取页数, 整数型, 公开, 
返回 (记录集.读数值属性 (“PageCount”, ))

.子程序 取动态特性集, 对象, 公开, 
返回 (记录集.读对象型属性 (“Properties”, ))

.子程序 取书签, 变体型, 公开, 
返回 (记录集.读属性 (“Bookmark”, ))

.子程序 置书签, 逻辑型, 公开, 
.参数 书签, 变体型, , 

返回 (记录集.写属性 (“Bookmark”, 书签))

.子程序 取缓冲值, 整数型, 公开, 
.参数 书签, 变体型, , 

返回 (记录集.读数值属性 (“CacheSize”, ))

.子程序 置缓冲值, 逻辑型, 公开, 
.参数 数据缓冲大小, 整数型, , 

返回 (记录集.写属性 (“CacheSize”, 数据缓冲大小))

.子程序 取最大记录值, 整数型, 公开, 
返回 (记录集.读数值属性 (“MaxRecords”, ))

.子程序 置最大记录值, 逻辑型, , 
.参数 最大记录集, 整数型, , 

返回 (记录集.写属性 (“MaxRecords”, 最大记录集))

.子程序 取编辑状态, 整数型, 公开, 0.当前没有编辑操作;1.指示当前记录中的数据已被修改但未保存;2.指示 AddNew 方法已被调用，且复制缓冲区中的当前记录是尚未保存到数据库中的新记录 ;4 指示当前记录已被删除
返回 (记录集.读数值属性 (“EditMode”, ))

.子程序 C保存到文件, 空白型, 公开, 
.参数 文件及路径, 文本型, , 
.参数 保存文件类型, 整数型, , 0、aADTG； 1、XML

.局部变量 路变, 变体型, , , 

路变.赋值 (文件及路径, )
记录集.方法 (“Save”, 路变, 保存文件类型)

.子程序 置筛选, 空白型, 公开, 
.参数 筛选条件, 变体型, , 0 删除当前筛选条件并恢复查看的所有记录;1 只查看已更改且尚未发送到服务器的记录。只能应用于批更新模式;2 只查看上一次 Delete、Resync、UpdateBatch 或 CancelBatch 调用所影响的记录;3 查看当前缓冲区中的记录，即上一次从数据库中检索记录的调用结果;5 查看在上一次批更新中失败的记录;4 PREDICATE

记录集.写属性 (“Filter”, 筛选条件)

.子程序 取筛选, 变体型, 公开, 
返回 (记录集.读属性 (“Filter”, ))

.子程序 置排序, 空白型, 公开, 如果 CursorLocation 属性被设置为 adUseClient，并且索引尚不存在，则将为 Sort 属性中指定的每个字段创建临时索引。
.参数 排序SQL, 文本型, , 

记录集.方法 (“Sort”, 排序SQL)

.子程序 C取排序, 文本型, 公开, 
返回 (记录集.读文本属性 (“Sort”, ))

.子程序 C查找, 空白型, 公开, 
.参数 查找语句, 文本型, , 
.参数 SkipRecords, 整数型, , 可选，长整型值，其默认值为零，它指定当前行或 start 书签的位移以开始搜索
.参数 SearchDirection, 整数型, , 参数默认值为“1”，参数值为以下值之一： 1、adSearchForward； -1、adSearchBackward。指定搜索应从当前行还是下一个有效行开始
.参数 Start, 变体型, 可空, 可选，变体型书签，用作搜索的开始位置

记录集.方法 (“Find”, 查找语句, SkipRecords, SearchDirection, Start)

.子程序 C测试操作, 逻辑型, 公开, 
.参数 光标类型, 整数型, , 256、adHoldRecords； 512、adMovePrevious； 16778240、adAddNew； 16779264、adDelete； 16809984、adUpdate； 8192、adBookmark； 16384、adApproxPosition； 65536、adUpdateBatch； 131072、adResync； 262144、adNotify； 524288、adFind； 4194304、adSeek； 8388608、adIndex。

返回 (记录集.逻辑方法 (“Supports”, 光标类型))

.子程序 C更新Ex, 空白型, 公开, 保存对 Recordset 对象的当前记录所做的所有更改。
.参数 字段集, 变体型, , 
.参数 字段值集, 变体型, , 

记录集.方法 (“Update”, 字段集, 字段值集)

.子程序 C更新, 空白型, 公开, 
记录集.方法 (“Update”, )

.子程序 C更新终止, 空白型, 公开, 
记录集.方法 (“CancelUpdate”, )

.子程序 刷新从基本数据库, 空白型, 公开, 将当前 Recordset 中的记录与基本的数据库重新同步。这在使用静态或仅向前的游标但希望看到基本数据库中的改动时十分有用
.参数 刷新记录的范围, 整数型, ,  1、只刷新当前记录； 2、刷新满足当前 Filter 属性设置的记录； 3、默认值。刷新 Recordset 对象中的所有记录； 4、刷新所有子集记录
.参数 是否覆盖基本值, 整数型, , 1、默认值。覆盖数据，取消挂起的更新； 2、不覆盖数据，不取消挂起的更新

记录集.方法 (“Resync”, 刷新记录的范围, 是否覆盖基本值)

.子程序 刷新从数据源, 空白型, 公开, 通过重新执行对象所基于的查询，更新 Recordset 对象中的数据
记录集.方法 (“Requery”, -1)

.子程序 C取记录数, 整数型, 公开, 
返回 (记录集.读数值属性 (“RecordCount”, ))

.子程序 取字段数, 整数型, 公开, 
.局部变量 对象, 对象, , , 

赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
返回 (对象.读数值属性 (“Count”, ))

.子程序 取字段名, 文本型, 公开, 
.参数 字段号, 整数型, , 

.局部变量 对象, 对象, , , 
.局部变量 字变, 变体型, , , 

字变.赋值 (字段号, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 字变))
返回 (对象.读文本属性 (“Name”, ))

.子程序 取字段类型, 整数型, 公开, 
.参数 字段号, 整数型, , 

.局部变量 对象, 对象, , , 
.局部变量 字变, 变体型, , , 

字变.赋值 (字段号, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 字变))
返回 (对象.读数值属性 (“Type”, ))

.子程序 取字段定长, 整数型, 公开, 
.参数 字段号, 整数型, , 

.局部变量 对象, 对象, , , 
.局部变量 字变, 变体型, , , 

字变.赋值 (字段号, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 字变))
返回 (对象.读数值属性 (“DefinedSize”, ))

.子程序 取字段实长, 整数型, 公开, 
.参数 字段号, 整数型, , 

.局部变量 对象, 对象, , , 
.局部变量 字变, 变体型, , , 

字变.赋值 (字段号, )
赋值 (对象, 记录集.读对象型属性 (“Fields”, ))
赋值 (对象, 对象.读对象型属性 (“Item”, 字变))
返回 (对象.读数值属性 (“ActualSize”, ))

.子程序 移首, 空白型, 公开, 
记录集.方法 (“MoveFirst”, )

.子程序 移尾, 空白型, 公开, 
记录集.方法 (“MoveLast”, )

.子程序 移下, 空白型, 公开, 
记录集.方法 (“MoveNext”, )

.子程序 移上, 空白型, 公开, 
记录集.方法 (“MovePrevious”, )

.子程序 移至, 空白型, 公开, 
.参数 偏移量, 整数型, 参考, 

记录集.方法 (“Move”, 偏移量)

.子程序 下集, 空白型, 公开, 客户端的 Recordset 对象不可用
记录集.方法 (“NextRecordset”, )

.子程序 尾记录, 逻辑型, 公开, 
返回 (记录集.读逻辑属性 (“EOF”, ))

.子程序 首记录, 逻辑型, 公开, 
返回 (记录集.读逻辑属性 (“BOF”, ))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
记录集.方法 (“Close”, )
记录集.清除 ()

.类模块 ADO命令, , , 

.程序集变量 A命令, 对象, , , 
.程序集变量 参数集, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
A命令.创建 (“ADODB.Command”, )
赋值 (参数集, A命令.读对象型属性 (“Parameters”, ))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
A命令.清除 ()

.子程序 创建, 空白型, 公开, 
A命令.创建 (“ADODB.Command”, )
赋值 (参数集, A命令.读对象型属性 (“Parameters”, ))

.子程序 C执行, 对象, 公开, 对象(_Recordset)
.局部变量 RecordsAffected, 整数型, , , 需要提供变量以取回方法所返回的数据

返回 (A命令.对象型方法 (“Execute”, RecordsAffected, 参数集, -1))

.子程序 C终止, 空白型, 公开, 
A命令.方法 (“Cancel”, )

.子程序 C加入参数, 空白型, 公开, 对象(_Parameter)
.参数 Name, 文本型, , 
.参数 Type, 整数型, , 参数默认值为“0”，参数值为以下值之一： 0、adEmpty； 16、adTinyInt； 2、adSmallInt； 3、adInteger； 20、adBigInt； 17、adUnsignedTinyInt； 18、adUnsignedSmallInt； 19、adUnsignedInt； 21、adUnsignedBigInt； 4、adSingle； 5、adDouble； 6、adCurrency； 14、adDecimal； 131、adNumeric； 11、adBoolean； 10、adError； 132、adUserDefined； 12、adVariant； 9、adIDispatch； 13、adIUnknown； 72、adGUID； 7、adDate； 133、adDBDate； 134、adDBTime； 135、adDBTimeStamp； 8、adBSTR； 129、adChar； 200、adVarChar； 201、adLongVarChar； 130、adWChar； 202、adVarWChar； 203、adLongVarWChar； 128、adBinary； 204、adVarBinary； 205、adLongVarBinary； 136、adChapter； 64、adFileTime； 138、adPropVariant； 139、adVarNumeric； 8192、adArray。
.参数 Direction, 整数型, , 参数默认值为“1”，参数值为以下值之一： 0、adParamUnknown； 1、adParamInput； 2、adParamOutput； 3、adParamInputOutput； 4、adParamReturnValue。
.参数 Size, 整数型, , 参数默认值为“0”
.参数 Value, 文本型, , 可以被省略

.局部变量 参数值, 变体型, , , 
.局部变量 参变, 变体型, , , 
.局部变量 参数, 对象, , , 

参数值.赋值 (Value, )
赋值 (参数, A命令.对象型方法 (“CreateParameter”, Name, Type, Direction, Size, 参数值))
参数集.方法 (“Append”, 参数)

.子程序 返回对象, 对象, , 
返回 (A命令)

.子程序 删除参数, 空白型, 公开, 
.参数 参数索引, 整数型, , 

参数集.方法 (“delete”, 参数索引)

.子程序 删除所有参数, 空白型, 公开, 
.局部变量 计次, 整数型, , , 

.计次循环首 (取参数个数 (), 计次)
    参数集.方法 (“delete”, 相减 (计次, 1))
.计次循环尾 ()

.子程序 取参数个数, 整数型, 公开, 
返回 (参数集.读数值属性 (“Count”, ))

.子程序 取特性, 对象, 公开, 对象(Properties)
返回 (A命令.读对象型属性 (“Properties”, ))

.子程序 取连接, 对象, 公开, 对象(_Connection)
返回 (A命令.读对象型属性 (“ActiveConnection”, ))

.子程序 置连接, 逻辑型, 公开, 
.参数 连接, 对象, , 对象(_Connection)

返回 (A命令.写属性 (“ActiveConnection”, 连接))

.子程序 取命令, 文本型, 公开, 
返回 (A命令.读文本属性 (“CommandText”, ))

.子程序 置命令, 空白型, 公开, 
.参数 命令, 文本型, , 

A命令.写属性 (“CommandText”, 命令)

.子程序 取超时, 空白型, 公开, 
A命令.读数值属性 (“CommandTimeout”, )

.子程序 置超时, 空白型, 公开, 
.参数 超时时间, 整数型, , 

A命令.写属性 (“CommandTimeout”, 超时时间)

.子程序 取Prepared, 逻辑型, , 
返回 (A命令.读逻辑属性 (“Prepared”, ))

.子程序 置Prepared, 逻辑型, 公开, 
.参数 Prepared, 逻辑型, , 

返回 (A命令.写属性 (“Prepared”, Prepared))

.子程序 取命令类型, 整数型, 公开, 
返回 (A命令.读数值属性 (“CommandType”, ))

.子程序 置命令类型, 逻辑型, 公开, 
.参数 命令类型, 整数型, ,  -1、adCmdUnspecified； 8、adCmdUnknown； 1、adCmdText； 2、adCmdTable； 4、adCmdStoredProc； 256、adCmdFile； 512、adCmdTableDirect。

返回 (A命令.写属性 (“CommandType”, 命令类型))

.子程序 取名称, 文本型, 公开, 
返回 (A命令.读文本属性 (“Name”, ))

.子程序 置名称, 空白型, 公开, 
.参数 名称, 文本型, , 

A命令.写属性 (“Name”, 名称)

.子程序 取状态, 整数型, 公开, 
返回 (A命令.读数值属性 (“State”, ))

.子程序 置CommandStream, 空白型, 公开, 
.参数 CommandStream, 对象, , 

A命令.写属性 (“CommandStream”, CommandStream)

.子程序 取CommandStream, 变体型, 公开, 
返回 (A命令.读属性 (“CommandStream”, ))


.子程序 取Dialect, 文本型, 公开, 
返回 (A命令.读文本属性 (“Dialect”, ))

.子程序 置Dialect, 空白型, 公开, 
.参数 Dialect, 文本型, , 

A命令.写属性 (“Dialect”, Dialect)

.子程序 取NamedParameters, 逻辑型, 公开, 
返回 (A命令.读逻辑属性 (“NamedParameters”, ))

.子程序 置NamedParameters, 空白型, 公开, 
.参数 NamedParameters, 逻辑型, , 

A命令.写属性 (“NamedParameters”, NamedParameters)

.子程序 取Parameters, 对象, 公开, 对象(Parameters)
返回 (A命令.读对象型属性 (“Parameters”, ))


.子程序 检索参数, 空白型, 公开, 
参数集.通用方法 (“Refresh”, )

.子程序 取Properties, 对象, 公开, 
返回 (A命令.读对象型属性 (“Properties”, ))

.类模块 ADO流, , , 

.程序集变量 A流, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
A流.创建 (“ADODB.Stream”, )

.子程序 创建, 逻辑型, 公开, 
返回 (A流.创建 (“ADODB.Stream”, ))

.子程序 读出, 变体型, 公开, 
.参数 参数, 整数型, , 

返回 (A流.通用方法 (“Read”, 参数))

.子程序 取字节集, 字节集, 公开, 
.参数 参数, 整数型, , 

.局部变量 字节集, 变体型, , , 

赋值 (字节集, A流.通用方法 (“Read”, 参数))
返回 (字节集.取字节集 ())

.子程序 打开, 空白型, 公开, 
.参数 数据源, 变体型, 可空, 
.参数 模式, 整数型, 可空, 参数默认值为“0”，参数值为以下值之一： 0、adModeUnknown； 1、adModeRead； 2、adModeWrite； 3、adModeReadWrite； 4、adModeShareDenyRead； 8、adModeShareDenyWrite； 12、adModeShareExclusive； 16、adModeShareDenyNone； 4194304、adModeRecursive。
.参数 属性, 整数型, 可空, 参数默认值为“-1”，参数值为以下值之一： -1、adOpenStreamUnspecified； 1、adOpenStreamAsync；
.参数 用户, 文本型, 可空, 
.参数 密码, 文本型, 可空, 

A流.方法 (“Open”, )

.子程序 关闭, 空白型, 公开, 
A流.方法 (“Close”, )

.子程序 SkipLine, 空白型, 公开, 读取文本Stream时跳过逻辑行
A流.方法 (“SkipLine”, )

.子程序 写入数据, 空白型, 公开, 
.参数 数据, 变体型, , 

A流.方法 (“Write”, 数据)

.子程序 置结尾, 空白型, 公开, 
A流.方法 (“SetEOS”, )

.子程序 复制, 空白型, 公开, 
.参数 DestStream, 对象, , 指向要复制的对像,类型为“对象(_Stream)”
.参数 CharNumber, 整数型, 可空, 指要复制的字节数，不选为全部复制.参数默认值为“-1”

A流.方法 (“CopyTo”, DestStream, CharNumber)

.子程序 写入硬盘, 空白型, 公开, 
A流.方法 (“Flush”, )

.子程序 写到文件, 空白型, 公开, 
.参数 文件名, 文本型, , 
.参数 选项, 整数型, , 参数默认值为“1”，参数值为以下值之一： 1、adSaveCreateNotExist； 2、adSaveCreateOverWrite。

A流.方法 (“SaveToFile”, 文件名, 选项)

.子程序 读入文件, 空白型, 公开, 
.参数 数据缓冲, 变体型, , 

A流.方法 (“LoadFromFile”, 数据缓冲)

.子程序 取文本, 空白型, 公开, 
.参数 选项, 整数型, , 参数默认值为“-1”。

A流.文本方法 (“ReadText”, 选项)

.子程序 写入文本, 空白型, 公开, 
.参数 文本数据, 文本型, , 
.参数 选项, 整数型, , 参数默认值为“0”，参数值为以下值之一： 0、adWriteChar； 1、adWriteLine； 0、stWriteChar； 1、stWriteLine。

A流.方法 (“WriteText”, 文本数据, 选项)

.子程序 终止, 空白型, 公开, 
A流.方法 (“Cancel”, )

.子程序 取大小, 整数型, 公开, 
返回 (A流.读数值属性 (“Size”, ))

.子程序 取结尾, 逻辑型, 公开, 
返回 (A流.读逻辑属性 (“EOS”, ))

.子程序 取当前位址, 整数型, 公开, 
返回 (A流.读数值属性 (“Position”, ))

.子程序 置当前位址, 逻辑型, 公开, 
.参数 地址, 整数型, , 

返回 (A流.写属性 (“Position”, 地址))

.子程序 取类型, 整数型, 公开, 1、adTypeBinary； 2、adTypeText。
返回 (A流.读数值属性 (“Type”, ))

.子程序 置类型, 逻辑型, 公开, 
.参数 类型, 整数型, , 参数值为以下值之一： 1、adTypeBinary； 2、adTypeText。

返回 (A流.写属性 (“Type”, 类型))

.子程序 取分隔符, 整数型, 公开, 10、adLF； 13、adCR； -1、adCRLF。
返回 (A流.读数值属性 (“LineSeparator”, ))

.子程序 置分隔符, 逻辑型, 公开, 
.参数 分隔符编号, 整数型, , 

返回 (A流.写属性 (“LineSeparator”, 分隔符编号))

.子程序 取状态, 整数型, 公开, 
返回 (A流.读数值属性 (“State”, ))

.子程序 取权限, 整数型, 公开, 参数值为以下值之一： 0、adModeUnknown； 1、adModeRead； 2、adModeWrite； 3、adModeReadWrite； 4、adModeShareDenyRead； 8、adModeShareDenyWrite； 12、adModeShareExclusive； 16、adModeShareDenyNone； 4194304、adModeRecursive。
返回 (A流.读数值属性 (“Mode”, ))

.子程序 置权限, 逻辑型, 公开, 
.参数 权限, 整数型, , 参数值为以下值之一： 0、adModeUnknown； 1、adModeRead； 2、adModeWrite； 3、adModeReadWrite； 4、adModeShareDenyRead； 8、adModeShareDenyWrite； 12、adModeShareExclusive； 16、adModeShareDenyNone； 4194304、adModeRecursive。

返回 (A流.写属性 (“Mode”, 权限))

.子程序 取字符集, 文本型, 公开, 
返回 (A流.读文本属性 (“Charset”, ))

.子程序 置字符集, 逻辑型, , 
.参数 字符集, 文本型, , 

返回 (A流.写属性 (“Charset”, 字符集))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
A流.清除 ()

.窗口程序集 窗口程序集2, , , 

.程序集变量 A连接, ADO连接, , , 
.程序集变量 A记录集, ADO记录集, , , 
.程序集变量 A命令, ADO命令, , , 
.程序集变量 A对象, 对象, , , 
.程序集变量 ASA对象, 对象, , , 
.子程序 _W类试测_创建完毕, 空白型, , 


.子程序 _创建连接_被选择, 空白型, , 
相加 (“A连接.C创建：”, 到文本 (A连接.C创建 ()), #换行符).加入文本 ()


.子程序 _置连接超时属性_被选择, 空白型, , 
相加 (“A连接.置连接超时：300毫秒-”, 到文本 (A连接.置连接超时 (300)), #换行符).加入文本 ()

.子程序 _置游标属性_被选择, 空白型, , 
相加 (“A连接.置游标位：”, 到文本 (A连接.置游标位置 (3)), #换行符).加入文本 ()


.子程序 _取版本号_被选择, 空白型, , 
相加 (“A连接.取版本号：”, A连接.取版本号 (), #换行符).加入文本 ()

.子程序 _取默认数据库_被选择, 空白型, , 
相加 (“A连接.取默认数据库：”, 到文本 (A连接.取默认数据库 ()), #换行符).加入文本 ()

.子程序 _置隔离级别_被选择, 空白型, , 
相加 (“A连接.置事务隔离级别 ：”, 到文本 (A连接.置事务隔离级别 (3)), #换行符).加入文本 ()

.子程序 _置权限_被选择, 空白型, , 
相加 (“A连接.置权限：读写权限”, 到文本 (A连接.置权限 (3)), #换行符).加入文本 ()

.子程序 _取权限_被选择, 空白型, , 
相加 (“A连接.取权限：”, 到文本 (A连接.取权限 ()), #换行符).加入文本 ()

.子程序 _取状态_被选择, 空白型, , 
相加 (“A连接.取状态 ：”, 到文本 (A连接.取状态 ()), #换行符).加入文本 ()

.子程序 _置连接字符串_被选择, 空白型, , 
相加 (“置连接字 ：”, “Driver={Microsoft Access Driver (*.mdb)};Dbq=”, 取运行目录 (), “\生产管理.mdb-”, 到文本 (A连接.置连接字符 (相加 (“Driver={Microsoft Access Driver (*.mdb)};Dbq=”, 取运行目录 (), “\生产管理.mdb”))), #换行符).加入文本 ()
 ' T输出.加入文本 (“置连接字 ：” ＋ 到文本 (A连接.置连接字符 (“Driver={Microsoft Access Driver (*.mdb)};Dbq=c:\somepath\mydb.mdb;”)) ＋ #换行符)

.子程序 _连接打开_被选择, 空白型, , 
A连接.C打开 ()
相加 (“A连接.取状态：”, 到文本 (A连接.取状态 ()), #换行符).加入文本 ()

.子程序 _连接关闭_被选择, 空白型, , 
A连接.C关闭 ()
相加 (“关闭 ：”, 到文本 (A连接.取状态 ()), #换行符).加入文本 ()

.子程序 _取提供者_被选择, 空白型, , 
相加 (“取OLE提供者 ：”, A连接.取OLE提供者 (), #换行符).加入文本 ()

.子程序 _创建记录集_被选择, 空白型, , 
相加 (“A记录集.创建 ：”, 到文本 (A记录集.C创建 ()), #换行符).加入文本 ()

.子程序 _置记录集连接_被选择, 空白型, , 
相加 (“A记录集.置连接 ：”, 到文本 (A记录集.置外连接 (A连接.C返回对象 ())), #换行符).加入文本 ()

.子程序 _打开记录_被选择, 空白型, , 
A记录集.C打开 ()
相加 (“A记录集.打开 ：”, 到文本 (A记录集.取状态 ()), #换行符).加入文本 ()

.子程序 _置记录集数据源_被选择, 空白型, , 
相加 (“A记录集.置连接 ：select * from 产品成本核算”, 到文本 (A记录集.置数据源 (“select * from 产品成本核算”)), #换行符).加入文本 ()

.子程序 _取记录集记录数_被选择, 空白型, , 
相加 (“A记录集.取记录集数 ：”, 到文本 (A记录集.C取记录数 ()), #换行符).加入文本 ()

.子程序 _取记录集数据源_被选择, 空白型, , 
相加 (“A记录集.取连接 ：”, A记录集.取数据源 (), #换行符).加入文本 ()

.子程序 _置记录集锁类型_被选择, 空白型, , 
相加 (“A记录集.置锁类型 ：”, 到文本 (A记录集.置锁类型 (1)), #换行符).加入文本 ()

.子程序 _切断记录集_被选择, 空白型, , 
 ' T输出.加入文本 (“A记录集.切断 ：” ＋ 到文本 (A记录集.C自断 ()) ＋ #换行符)

.子程序 _置记录集游标类型_被选择, 空白型, , 
相加 (“A记录集.取连接 ：”, 到文本 (A记录集.置游标类型 (0)), #换行符).加入文本 ()

.子程序 _置记录集游标位置_被选择, 空白型, , 
相加 (“A记录集.取连接 ：”, 到文本 (A记录集.置游标位置 (3)), #换行符).加入文本 ()

.子程序 _创建命令_被选择, 空白型, , 
相加 (“未成功”, #换行符).加入文本 ()

.子程序 _取字段值_被选择, 空白型, , 
.局部变量 变体值, 变体型, , , 

 ' 变体值.赋值 (A记录集.取值 (1), )
相加 (“A记录集.取字段值 ：”, A记录集.取文本 (0), “-”, A记录集.取文本 (1), “-”, A记录集.取文本 (2), “-”, A记录集.取文本 (3), #换行符).加入文本 ()

.子程序 _打开记录集_被选择, 空白型, , 
 ' A记录集.C打开自连Ex (“it_item”, “Driver={SQL Server};Server=cheng.kmip.net;Database=lrf;Uid=sa; Pwd=abc;”, 0, 1, 2)
A记录集.C打开 ()
相加 (“A记录集.C打开：”, 到文本 (A记录集.取状态 ()), #换行符).加入文本 ()
相加 (“要注意连接和记录集的相关属性不支持取回记录数”, #换行符).加入文本 ()

.子程序 _取字段数_被选择, 空白型, , 
相加 (“A记录集.取字段数：”, 到文本 (A记录集.取字段数 ()), #换行符).加入文本 ()

.子程序 _按钮6_被单击, 空白型, , 
.局部变量 aa, 变体型, , , 
.局部变量 A对象, 对象, , , 

 ' 输出调试文本 (“A命令.置连接:” ＋ 到文本 (A命令.置连接 (当前连接)))
 ' A命令.置命令类型 (4)
 ' A命令.置命令 (“sp_sel_item_lvl”)
 ' A命令.检索参数 ()
 ' 输出调试文本 (“A命令.取参数个数 ”)
 ' 输出调试文本 (A命令.取参数个数 ())
 ' A命令.C加入参数 (“it_code”, 202, 1, 15, “1A011990A1”)

 ' ' A命令.置名称 (“da”)

 ' ASA对象.创建 (“ADODB.recordset”, )
 ' 输出调试文本 (“对象为空” ＋ 到文本 (ASA对象.是否为空 ()))
 ' ASA对象 ＝ A命令.C执行 ()
 ' 输出调试文本 (“对象为空” ＋ 到文本 (ASA对象.是否为空 ()))
 ' 输出调试文本 (A命令.取名称 ())
 ' 输出调试文本 (A命令.取命令 ())
 ' 输出调试文本 (A命令.取参数个数 ())
 ' ' A命令.删除参数 (0)
 ' 输出调试文本 (A命令.取命令 ())
 ' A对象 ＝ A记录集.返回对象 ()
 ' A对象 ＝ Alrf连接.C执行 (“sp_load_frmitem”, aa, 4)
A记录集.C打开外连Ex (“sp_load_frmitem”, A连接.C返回对象 (), 2, 1, 4)
相加 (“命令对象还不能成功”, #换行符).加入文本 ()
 ' 输出调试文本 (A记录集.C取记录数 ())

.子程序 _按钮7_被单击, 空白型, , 
A记录集.C建自制集 (“shape append new adchar(5) as ponumber,new adchar(5)”)
相加 (“自建记录集:shape append new adchar(5) as ponumber,new adchar(5)”, #换行符).加入文本 ()
相加 (“自建记录集:”, 到文本 (A记录集.取字段数 ()), “字段数”, #换行符).加入文本 ()

.子程序 _按钮5_被单击, 空白型, , 
载入 (W成本计算, , 假)

.子程序 _数据库信息_被选择, 空白型, , 
相加 (“有空自己搞”, #换行符).加入文本 ()

.子程序 _按钮1_被单击, 空白型, , 
载入 (W产品资料输入, , 假)

.子程序 __启动窗口_创建完毕, 空白型, , 


.窗口程序集 窗口程序集1, , , 

.程序集变量 A连接, ADO连接, , , 
.程序集变量 A集, ADO记录集, , , 
.程序集变量 sql, 文本型, , , 
.程序集变量 修改状态, 逻辑型, , , 
.子程序 _W成本计算_创建完毕, 空白型, , 
赋值 (.现行选中项, 0)
A连接.C打开EX (相加 (“Driver={Microsoft Access Driver (*.mdb)};Dbq=”, 取运行目录 (), “\生产管理.mdb”), 8, 2)
 ' A连接.C打开EX (“Driver={SQL Server};Server=tk2003;Database=qd;Uid=sa; Pwd=123456;”, 8, 2)
A集.C打开外连Ex (“select 成份 from 产品成分 where 产品分类=1”, A连接.C返回对象 (), 3, 1, 1)
.计次循环首 (A集.C取记录数 (), )
    A集.取文本 (0).加入项目 ()
    A集.移下 ()
.计次循环尾 ()
A集.C关闭 ()
A集.C打开外连Ex (“select * from 产品成本核算”, A连接.C返回对象 (), 2, 3, 1)
信息框 (“输入编号:1269,可以看到较果”, 0, )
获取焦点 ()


.子程序 _T面长_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T面价_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T里价_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T撞价_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T朴价_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T绣花_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _C计算_被单击, 空白型, , 
.局部变量 合计, 小数型, , , 
.局部变量 工小计, 小数型, , , 

赋值 (合计, 相加 (相乘 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 相乘 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 相乘 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 相乘 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 相乘 (到数值 (.内容), 到数值 (.内容)), 到数值 (.内容)))
赋值 (.内容, 到文本 (合计))
赋值 (合计, 相乘 (合计, 到数值 (.内容)))
赋值 (.内容, 到文本 (合计))

.子程序 _T里长_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T撞长_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T朴长_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T编号_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (并且 (等于 (键代码, 13), 不等于 (删首尾空 (.内容), “”)))
    查询编号是否存在 ()
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 查询编号是否存在, 空白型, , 
.如果 (查询编号 ())
    赋值 (.标题, 相加 (“编号->”, .内容, “<己存在，只能进行修改！”))
    显示当前记录 ()
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
.否则
    赋值 (.标题, 相加 (“编号->”, .内容, “<不存在，可以进行增加！”))
    置空输入 ()
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
    赋值 (.禁止, 真)
.如果结束


.子程序 置空输入, 空白型, , 
赋值 (.内容, “”)
赋值 (.现行选中项, 0)
赋值 (.内容, “”)
赋值 (.内容, “1.3”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “1.2”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “1.2”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “1.2”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “1.3”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “3”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)

.子程序 显示当前记录, 空白型, , 
赋值 (.内容, A集.取文本 (0))
赋值 (.内容, A集.取文本 (1))
赋值 (.内容, A集.取文本 (2))
赋值 (.内容, A集.取文本 (3))
赋值 (.内容, A集.取文本 (4))
赋值 (.内容, A集.取文本 (5))
赋值 (.内容, A集.取文本 (6))
赋值 (.内容, A集.取文本 (7))
赋值 (.内容, A集.取文本 (8))
赋值 (.内容, A集.取文本 (9))
赋值 (.内容, A集.取文本 (10))
赋值 (.内容, A集.取文本 (11))
赋值 (.内容, A集.取文本 (12))
赋值 (.内容, A集.取文本 (13))
赋值 (.内容, A集.取文本 (14))
赋值 (.内容, A集.取文本 (15))
赋值 (.内容, A集.取文本 (16))
赋值 (.内容, A集.取文本 (17))
赋值 (.内容, A集.取文本 (18))
赋值 (.内容, A集.取文本 (19))
赋值 (.内容, A集.取文本 (20))
赋值 (.内容, A集.取文本 (21))
赋值 (.内容, A集.取文本 (22))
赋值 (.内容, A集.取文本 (23))
赋值 (.内容, A集.取文本 (24))
赋值 (.内容, A集.取文本 (25))
赋值 (.内容, A集.取文本 (26))
赋值 (.内容, A集.取文本 (27))
赋值 (.内容, A集.取文本 (28))
赋值 (.内容, A集.取文本 (29))
赋值 (.内容, A集.取文本 (30))
赋值 (.内容, A集.取文本 (31))
赋值 (.内容, A集.取文本 (32))



.子程序 _T名称_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T辅料_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _T工价_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _C计算_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
.如果真结束


.子程序 _T洗水_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    获取焦点 ()
    _C计算_被单击 ()
.如果真结束


.子程序 _CB品牌_列表项被选择, 空白型, , 
.如果真 (等于 (.现行选中项, 0))
    赋值 (.内容, “1.3”)
.如果真结束
.如果真 (等于 (.现行选中项, 1))
    赋值 (.内容, “1”)
.如果真结束
_C计算_被单击 ()

.子程序 _C新建_被单击, 空白型, , 
置空输入 ()
赋值 (.内容, “”)
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.标题, “输入新编号！”)
获取焦点 ()


.子程序 _C保存_被单击, 空白型, , 
.如果真 (等于 (删首尾空 (.内容), “”))
    赋值 (.标题, “编号为空，不能保存”)
    返回 ()
.如果真结束
_C计算_被单击 ()
A集.C查找 (相加 (“编号='”, .内容, “'”), 0, 1)
.如果真 (查询编号 ())
    赋值 (.标题, 相加 (“编号->”, .内容, “<己存在，请重新输入”))
    返回 ()
.如果真结束
A连接.清空错误集 ()
A集.C新增记录 ()
保存记录 ()

.子程序 保存记录, 空白型, , 
A集.置文本 (0, .内容)
A集.置文本 (1, .内容)
A集.置文本 (2, .内容)
A集.置文本 (3, .内容)
A集.置文本 (4, .内容)
A集.置文本 (5, .内容)
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (6, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (7, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (8, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (9, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (10, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (11, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (12, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (13, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (14, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (15, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (16, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (17, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (18, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (19, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (20, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (21, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (22, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (23, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (24, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (25, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (26, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (27, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (28, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (29, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (30, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (31, .内容)
.如果真结束
.如果真 (不等于 (删首尾空 (.内容), “”))
    A集.置文本 (32, .内容)
.如果真结束
A集.C更新 ()
A连接.取错误集 ()
.如果 (大于 (A连接.取错误数 (), 0))
    赋值 (.标题, “保存失败，请检查后再保存！”)
    A连接.清空错误集 ()
.否则
    赋值 (.标题, 相加 (“编号<”, .内容, “>保存成功，可以继续输入！”))
.如果结束


.子程序 _C修改_被单击, 空白型, , 
.如果真 (等于 (删首尾空 (.内容), “”))
    赋值 (.标题, “编号为空，不能保存”)
    返回 ()
.如果真结束
_C计算_被单击 ()
保存记录 ()

.子程序 _C取消修改_被单击, 空白型, , 
显示当前记录 ()
赋值 (.标题, “修改被取消！重新来过”)

.子程序 查询编号, 逻辑型, , 
A集.移首 ()
A集.C查找 (相加 (“编号='”, .内容, “'”), 0, 1)
返回 (等于 (A集.尾记录 (), 假))

.子程序 _C面成_被单击, 空白型, , 
赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _CB成份_双击选择, 空白型, , 
赋值 (.可视, 假)

.子程序 _C里成_被单击, 空白型, , 
赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _C撞成_被单击, 空白型, , 
赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _C朴成_被单击, 空白型, , 
赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _CB成份_列表项被选择, 空白型, , 
.如果真 (等于 (.顶边, .顶边))
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
.如果真 (等于 (.顶边, .顶边))
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
.如果真 (等于 (.顶边, .顶边))
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
.如果真 (等于 (.顶边, .顶边))
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
赋值 (.可视, 假)

.子程序 _CB成份_失去焦点, 空白型, , 
赋值 (.可视, 假)

.子程序 _T面成份_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _T里成份_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)


.子程序 _T撞成份_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _T朴成份_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.左边, .左边)
赋值 (.顶边, .顶边)
赋值 (.可视, 真)

.子程序 _T其它_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
    .如果 (.禁止)
        获取焦点 ()
    .否则
        获取焦点 ()
    .如果结束
    
.如果真结束


.子程序 _C保存_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C保存_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _C修改_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C修改_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _C新建_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C新建_被单击 ()
.如果真结束


.子程序 _T编号_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (不等于 (字符代码, 13))
    赋值 (.标题, “编号己被修改，请回车检查编号是否存在！”)
.如果真结束


.子程序 _T面成份_获得焦点, 空白型, , 
赋值 (.标题, “双击可选择面料成份！”)

.子程序 _T里成份_获得焦点, 空白型, , 
赋值 (.标题, “双击可选择里料成份！”)

.子程序 _T撞成份_获得焦点, 空白型, , 
赋值 (.标题, “双击可选择撞色料成份！”)

.子程序 _T朴成份_获得焦点, 空白型, , 
赋值 (.标题, “双击可选择朴料成份！”)

.子程序 _T说明1_获得焦点, 空白型, , 
赋值 (.标题, “请输入相关说明信息！”)

.子程序 _T说明2_获得焦点, 空白型, , 
赋值 (.标题, “请输入相关说明信息！”)

.子程序 _T说明3_获得焦点, 空白型, , 
赋值 (.标题, “请输入相关说明信息！”)

.子程序 _C退出_被单击, 空白型, , 
A集.C关闭 ()
A连接.C关闭 ()
销毁 ()


.子程序 _T面系_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _T里系_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _T撞系_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _T朴系_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, 13))
    _C计算_被单击 ()
    获取焦点 ()
.如果真结束


.子程序 _CB成份_列表被关闭, 空白型, , 
赋值 (.可视, 假)

.子程序 _T面成份_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.可视, 假)

.子程序 _T里成份_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.可视, 假)

.子程序 _T撞成份_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.可视, 假)

.子程序 _T朴成份_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.可视, 假)

.窗口程序集 窗口程序集3, , , 

.程序集变量 A集1, ADO记录集, , , 
.程序集变量 A集2, ADO记录集, , , 
.程序集变量 A图片集, ADO记录集, , , 
.程序集变量 A集3, ADO记录集, , , 
.程序集变量 A流, ADO流, , , 
.程序集变量 A连接, ADO连接, , , 
.程序集变量 当格, 未知类型0x20003, , , 
.程序集变量 当选, 未知类型0x20002, , , 
.子程序 _按钮1_被单击, 空白型, , 
A图片集.C打开外连Ex (“xj”, A连接.C返回对象 (), 2, 3, 2)
A流.打开 ()
A流.写到文件 (“c:\ad.jpg”, 2)
赋值 (.图片, A集2.取字节集 (1))
赋值 (.禁止, 真)
 ' A流.写入数据 (A图片集.取值 (1))
 ' PX小.图片 ＝ A流.取字节集 (-1)

.子程序 _W产品资料输入_创建完毕, 空白型, , 
A连接.C打开EX (相加 (“Driver={Microsoft Access Driver (*.mdb)};Dbq=”, 取运行目录 (), “\生产管理.mdb”), 8, 3)
相加 (取运行目录 (), “\生产工艺单.cel”).未知支持库函数_31 ()
A集1.C打开外连Ex (“select * from 生产工艺单”, A连接.C返回对象 (), 2, 3, 1)
信息框 (“输入编号:1269,可以看到较果”, 0, )

.子程序 _Grid1_ComboDropDown, 空白型, , 
.参数 Row, 整数型, , 
.参数 Col, 整数型, , 

.局部变量 列表, 未知类型0x20005, , , 

赋值 (列表, 0.未知支持库函数_5 ())
.如果真 (等于 (Col, 1))
    列表.未知支持库函数_114 (“项目”)
    列表.未知支持库函数_114 (“扣子”)
.如果真结束
.如果真 (等于 (Col, 2))
    列表.未知支持库函数_114 (“犁人坊”)
    列表.未知支持库函数_114 (“纤度”)
    列表.未知支持库函数_114 (“其它”)
.如果真结束
.如果真 (等于 (Col, 4))
    列表.未知支持库函数_114 (“梅丹”)
    列表.未知支持库函数_114 (“黄海”)
    列表.未知支持库函数_114 (“张晓娟”)
    列表.未知支持库函数_114 (“李杨”)
    列表.未知支持库函数_114 (“吴迪”)
    列表.未知支持库函数_114 (“宁小艳”)
    列表.未知支持库函数_114 (“周玉仪”)
.如果真结束
.如果真 (等于 (Col, 5))
    列表.未知支持库函数_114 (“大脚”)
    列表.未知支持库函数_114 (“猪头”)
    列表.未知支持库函数_114 (“小样”)
.如果真结束
.如果真 (等于 (Col, 6))
    列表.未知支持库函数_114 (“度量方式0”)
    列表.未知支持库函数_114 (“度量方式1”)
    列表.未知支持库函数_114 (“度量方式2”)
.如果真结束


.子程序 _Grid1_MouseDown, 空白型, , 
.参数 Button, 短整数型, 参考, 
.参数 Shift, 短整数型, 参考, 
.参数 X, 小数型, 参考, 
.参数 Y, 小数型, 参考, 

.如果真 (等于 (Button, 2))
    弹出菜单 ()
.如果真结束


.子程序 _Grid2_MouseUp, 空白型, , 
.参数 Button, 短整数型, 参考, 
.参数 Shift, 短整数型, 参考, 
.参数 X, 小数型, 参考, 
.参数 Y, 小数型, 参考, 

.如果真 (等于 (Button, 2))
    弹出菜单 ()
.如果真结束


.子程序 置边框, 空白型, , 
当选.未知支持库函数_59 (0, 1)
当选.未知支持库函数_59 (1, 1)
当选.未知支持库函数_59 (2, 1)
当选.未知支持库函数_59 (3, 1)

.子程序 _合并单元格_被选择, 空白型, , 
.局部变量 计次, 整数型, , , 
.局部变量 首格, 整数型, , , 
.局部变量 首列, 整数型, , , 
.局部变量 尾格, 整数型, , , 

赋值 (当选, 未知支持库函数_13 ())
赋值 (首格, 当选.)
赋值 (尾格, 当选.)
赋值 (首列, 当选.)
.如果真 (小于或等于 (首列, 4))
    首格.未知支持库函数_9 (4, 尾格, 4).未知支持库函数_131 ()
    赋值 (当选, 未知支持库函数_13 ())
    当选.未知支持库函数_72 ()
    当选.未知支持库函数_59 (0, 1)
    当选.未知支持库函数_59 (1, 1)
    当选.未知支持库函数_59 (2, 1)
    当选.未知支持库函数_59 (3, 1)
    首格.未知支持库函数_9 (1, 尾格, 1).未知支持库函数_131 ()
    赋值 (当选, 未知支持库函数_13 ())
    当选.未知支持库函数_72 ()
    当选.未知支持库函数_59 (0, 1)
    当选.未知支持库函数_59 (1, 1)
    当选.未知支持库函数_59 (2, 1)
    当选.未知支持库函数_59 (3, 1)
.如果真结束


.子程序 _取消合并单元格_被选择, 空白型, , 
.局部变量 计次, 整数型, , , 
.局部变量 首格, 整数型, , , 
.局部变量 尾格, 整数型, , , 
.局部变量 首列, 整数型, , , 
.局部变量 选, 未知类型0x20006, , , 

赋值 (当选, 未知支持库函数_13 ())
赋值 (首列, 当选.)
.如果真 (大于 (首列, 4))
    返回 ()
.如果真结束
赋值 (., 假)
赋值 (首格, 当选.)
赋值 (尾格, 当选.)
首格.未知支持库函数_9 (1, 首格, 4).未知支持库函数_131 ()
赋值 (当选, 未知支持库函数_13 ())
当选.未知支持库函数_60 (假)
输出调试文本 (相加 (到文本 (首格), “ ”, 到文本 (尾格), “ ”, 到文本 (首列)))
.计次循环首 (相加 (相减 (尾格, 首格), 1), 计次)
    相减 (相加 (首格, 计次), 1).未知支持库函数_9 (2, 相减 (相加 (首格, 计次), 1), 4).未知支持库函数_131 ()
    赋值 (当选, 未知支持库函数_13 ())
    当选.未知支持库函数_72 ()
    当选.未知支持库函数_59 (0, 1)
    当选.未知支持库函数_59 (1, 1)
    当选.未知支持库函数_59 (2, 1)
    当选.未知支持库函数_59 (3, 1)
    相减 (相加 (首格, 计次), 1).未知支持库函数_9 (1, 相减 (相加 (首格, 计次), 1), 1).未知支持库函数_131 ()
    当选.未知支持库函数_59 (0, 1)
    当选.未知支持库函数_59 (1, 1)
    当选.未知支持库函数_59 (2, 1)
    当选.未知支持库函数_59 (3, 1)
.计次循环尾 ()
赋值 (., 真)
未知支持库函数_37 ()

.子程序 _锁定单元格_被选择, 空白型, , 
赋值 (当格, 未知支持库函数_0 ())
赋值 (当格., 真)

.子程序 _解锁单元格_被选择, 空白型, , 
赋值 (当格, 未知支持库函数_0 ())
赋值 (当格., 假)

.子程序 _C打印预览_被单击, 空白型, , 
.未知支持库函数_35 ()

.子程序 _C打印_被单击, 空白型, , 
未知支持库函数_34 ()

.子程序 _C新建_被单击, 空白型, , 
.局部变量 显格, 整数型, , , 

相加 (取运行目录 (), “\生产工艺单.cel”).未知支持库函数_31 ()
赋值 (当格, 2.未知支持库函数_2 (9))
赋值 (当格., 取格式日期 (取现行时间 (), “-”))

.子程序 查询编号, 空白型, , 
.参数 编号, 文本型, , 

A集1.C查找 (相加 (“编号='”, 编号, “'”), 0, 1, )
.如果真 (等于 (A集1.尾记录 (), 假))
    A集2.C关闭 ()
    A集3.C关闭 ()
    A集2.C打开外连Ex (相加 (“select * from 生产工艺单制作要求 where 编号='”, 编号, “' order by 序号”), A连接.C返回对象 (), 2, 3, 1)
    A集3.C打开外连Ex (相加 (“select * from 生产工艺单尺寸表 where 编号='”, 编号, “' order by 序号,尺码序号”), A连接.C返回对象 (), 2, 3, 1)
    显示数据 ()
.如果真结束


.子程序 显示数据, 空白型, , 
.局部变量 显格, 未知类型0x20003, , , 
.局部变量 计行, 整数型, , , 
.局部变量 内计, 整数型, , , 
.局部变量 当部序, 文本型, , , 
.局部变量 计计, 整数型, , , 

赋值 (显格, 1.未知支持库函数_2 (4))
赋值 (显格., A集1.取文本 (1))
赋值 (显格., “1”)
赋值 (显格, 1.未知支持库函数_2 (7))
赋值 (显格., A集1.取文本 (2))
赋值 (显格., “1”)
赋值 (显格, 1.未知支持库函数_2 (10))
赋值 (显格., A集1.取文本 (3))
赋值 (显格., “1”)
赋值 (显格, 2.未知支持库函数_2 (2))
赋值 (显格., A集1.取文本 (4))
赋值 (显格., “1”)
赋值 (显格, 2.未知支持库函数_2 (4))
赋值 (显格., A集1.取文本 (5))
赋值 (显格., “1”)
赋值 (显格, 2.未知支持库函数_2 (9))
赋值 (显格., A集1.取文本 (6))
赋值 (显格., “1”)
赋值 (内计, 4)
.计次循环首 (A集2.C取记录数 (), 计行)
    赋值 (计计, A集2.取整数 (4))
    相加 (内计, 计行).未知支持库函数_9 (1, 相加 (内计, 计行, 计计), 1).未知支持库函数_131 ()
    赋值 (当选, 未知支持库函数_13 ())
    当选.未知支持库函数_72 ()
    置边框 ()
    赋值 (显格, 相加 (内计, 计行).未知支持库函数_2 (1))
    赋值 (显格., A集2.取文本 (2))
    赋值 (显格., “1”)
    相加 (内计, 计行).未知支持库函数_9 (2, 相加 (内计, 计行, 计计), 4).未知支持库函数_131 ()
    赋值 (当选, 未知支持库函数_13 ())
    当选.未知支持库函数_72 ()
    置边框 ()
    赋值 (显格, 相加 (内计, 计行).未知支持库函数_2 (2))
    赋值 (显格., A集2.取文本 (3))
    赋值 (显格., “1”)
    A集2.移下 ()
    赋值 (内计, 相加 (内计, 计计))
.计次循环尾 ()
赋值 (当部序, A集3.取文本 (1))
赋值 (显格, 5.未知支持库函数_2 (5))
赋值 (显格., A集3.取文本 (2))
赋值 (显格., “1”)
赋值 (显格, 5.未知支持库函数_2 (6))
赋值 (显格., A集3.取文本 (3))
赋值 (显格., “1”)
赋值 (显格, 5.未知支持库函数_2 (相加 (7, A集3.取整数 (4))))
赋值 (显格., A集3.取文本 (5))
赋值 (显格., “1”)
赋值 (计行, 5)
A集3.移下 ()
.计次循环首 (相减 (A集3.C取记录数 (), 1), )
    
    .如果 (等于 (当部序, A集3.取文本 (1)))
        赋值 (显格, 计行.未知支持库函数_2 (相加 (7, A集3.取整数 (4))))
        赋值 (显格., A集3.取文本 (5))
        赋值 (显格., “1”)
    .否则
        赋值 (当部序, A集3.取文本 (1))
        赋值 (计行, 相加 (计行, 1))
        赋值 (显格, 计行.未知支持库函数_2 (5))
        赋值 (显格., A集3.取文本 (2))
        赋值 (显格., “1”)
        赋值 (显格, 计行.未知支持库函数_2 (6))
        赋值 (显格., A集3.取文本 (3))
        赋值 (显格., “1”)
        赋值 (显格, 计行.未知支持库函数_2 (相加 (7, A集3.取整数 (4))))
        赋值 (显格., A集3.取文本 (5))
        赋值 (显格., “1”)
    .如果结束
    A集3.移下 ()
.计次循环尾 ()
未知支持库函数_37 ()

.子程序 _Grid1_KeyUp, 空白型, , 
.参数 KeyCode, 短整数型, 参考, 
.参数 Shift, 短整数型, 参考, 

.局部变量 首列, 整数型, , , 
.局部变量 尾列, 整数型, , , 

.如果真 (等于 (KeyCode, 13))
    赋值 (当格, 未知支持库函数_0 ())
    .如果真 (并且 (等于 (当格., 1), 等于 (当格., 2)))
        查询编号 (当格.)
    .如果真结束
    
    .如果真 (并且 (等于 (Shift, 2), 等于 (当格., 2), 大于 (当格., 4)))
        赋值 (当选, 未知支持库函数_13 ())
        赋值 (首列, 当选.)
        赋值 (尾列, 当选.)
        尾列.未知支持库函数_9 (1, 相加 (尾列, 1), 1).未知支持库函数_131 ()
        赋值 (当选, 未知支持库函数_13 ())
        当选.未知支持库函数_72 ()
        首列.未知支持库函数_9 (2, 相加 (尾列, 1), 4).未知支持库函数_131 ()
        赋值 (当选, 未知支持库函数_13 ())
        当选.未知支持库函数_72 ()
        赋值 (KeyCode, 0)
    .如果真结束
    
.如果真结束


.子程序 _Grid1_KeyDown, 空白型, , 
.参数 KeyCode, 短整数型, 参考, 
.参数 Shift, 短整数型, , 

 ' .如果真 (并且 (等于 (KeyCode, 88), 等于 (Shift, 2)))
     ' KeyCode ＝ 0
     ' 返回 ()
.如果真结束
.如果真 (等于 (KeyCode, 13))
    赋值 (当格, 未知支持库函数_0 ())
    .如果真 (并且 (等于 (当格., 1), 等于 (当格., 2)))
        查询编号 (当格.)
    .如果真结束
    
.如果真结束


.子程序 _Grid1_CellChange, 空白型, , 
.参数 Row, 整数型, , 
.参数 Col, 整数型, , 

赋值 (当格, Row.未知支持库函数_2 (Col))
.如果 (等于 (当格., “”))
    赋值 (当格., “1”)
.否则
    赋值 (当格., “2”)
.如果结束


.子程序 _按钮4_被单击, 空白型, , 
“c:\dd.cel”.未知支持库函数_41 ()


.子程序 取格式日期, 文本型, , 调用子程序返回"0000-00-00"格式的日期格式,可以换成日期框里的日期
.参数 日期时间, 日期时间型, , 
.参数 分隔符, 文本型, , 

.局部变量 日期时间文本, 文本型, , , 

.如果 (小于 (取月份 (日期时间), 10))
    赋值 (日期时间文本, 相加 (到文本 (取年份 (日期时间)), 分隔符, “0”, 到文本 (取月份 (日期时间))))
.否则
    赋值 (日期时间文本, 相加 (到文本 (取年份 (日期时间)), 分隔符, 到文本 (取月份 (日期时间))))
.如果结束
.如果 (小于 (取日 (日期时间), 10))
    赋值 (日期时间文本, 相加 (日期时间文本, 分隔符, “0”, 到文本 (取日 (日期时间))))
.否则
    赋值 (日期时间文本, 相加 (日期时间文本, 分隔符, 到文本 (取日 (日期时间))))
.如果结束
返回 (日期时间文本)

.子程序 _C上一张_被单击, 空白型, , 
.如果真 (A图片集.首记录 ())
    信息框 (“己到记录首”, 0, )
    返回 ()
.如果真结束
A图片集.移上 ()
赋值 (.图片, A图片集.取字节集 (1))

.子程序 _C下一张_被单击, 空白型, , 
.如果真 (A图片集.尾记录 ())
    信息框 (“己到记录尾记录”, 0, )
    返回 ()
.如果真结束
A图片集.移下 ()
赋值 (.图片, A图片集.取字节集 (1))



 ' 不属于任何一个程序集、类模块的函数：
