 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 0
    顶边 = 0
    宽度 = 800
    高度 = 560
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\_启动窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “蜘蛛牌”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 361
    高度 = 263
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 0
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\关于窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “关于　蜘蛛牌”
    帮助文件名 = “”

窗口 窗口_选择级别
    左边 = 50
    顶边 = 50
    宽度 = 271
    高度 = 218
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “选择级别”
    帮助文件名 = “”

窗口 记录窗口
    左边 = 50
    顶边 = 50
    宽度 = 195
    高度 = 183
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “蜘蛛牌　记录”
    帮助文件名 = “”

窗口 窗口_选项
    左边 = 50
    顶边 = 50
    宽度 = 271
    高度 = 218
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “蜘蛛牌　选项”
    帮助文件名 = “”



.声音 发牌, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\发牌", , 
.声音 点击, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\点击", , 
.声音 放开, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\放开", , 
.声音 成功, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\成功", , 
.声音 无提示, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\无提示", , 
.声音 提示, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\提示", , 
.图片 p1, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p1", , 
.图片 p2, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p2", , 
.图片 p3, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p3", , 
.图片 p4, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p4", , 
.图片 p5, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p5", , 
.图片 p6, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p6", , 
.图片 p7, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p7", , 
.图片 p8, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p8", , 
.图片 p9, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p9", , 
.图片 p10, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p10", , 
.图片 p11, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p11", , 
.图片 p12, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p12", , 
.图片 p13, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p13", , 
.图片 p14, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p14", , 
.图片 p15, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p15", , 
.图片 p16, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p16", , 
.图片 p17, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p17", , 
.图片 p18, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p18", , 
.图片 p19, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p19", , 
.图片 p20, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p20", , 
.图片 p21, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p21", , 
.图片 p22, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p22", , 
.图片 p23, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p23", , 
.图片 p24, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p24", , 
.图片 p25, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p25", , 
.图片 p26, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p26", , 
.图片 p27, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p27", , 
.图片 p28, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p28", , 
.图片 p29, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p29", , 
.图片 p30, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p30", , 
.图片 p31, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p31", , 
.图片 p32, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p32", , 
.图片 p33, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p33", , 
.图片 p34, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p34", , 
.图片 p35, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p35", , 
.图片 p36, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p36", , 
.图片 p37, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p37", , 
.图片 p38, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p38", , 
.图片 p39, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p39", , 
.图片 p40, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p40", , 
.图片 p41, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p41", , 
.图片 p42, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p42", , 
.图片 p43, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p43", , 
.图片 p44, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p44", , 
.图片 p45, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p45", , 
.图片 p46, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p46", , 
.图片 p47, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p47", , 
.图片 p48, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p48", , 
.图片 p49, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p49", , 
.图片 p50, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p50", , 
.图片 p51, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p51", , 
.图片 p52, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p52", , 
.图片 p53, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p53", , 
.图片 p54, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\p54", , 
.图片 dt, " ' 已保存到：D:\易语言学习\Data\蜘蛛牌源码.e\dt", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 1 0 应用接口支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一




数据类型 PointApi, , 
    .成员 x, 空白型, , , 
    .成员 y, 空白型, , , 

数据类型 提示数据, , 
    .成员 从, 空白型, , , 
    .成员 到, 空白型, , , 
    .成员 提示过, 逻辑型, , , 

.全局变量 难度, 整数型, , , 
.全局变量 音效否, 逻辑型, , , 
.全局变量 动画否, 逻辑型, , , 
.全局变量 配置文件名, 文本型, , , 

.DLL命令 ScreenToClient, 整数型, "", "", , 
    .参数 a, 整数型, , 
    .参数 b, PointApi, , 

.DLL命令 系统关于对话框, 空白型, "", "ShellAboutA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 应用程序标题, 文本型, , 
    .参数 其他信息, 文本型, , 
    .参数 图标句柄, 整数型, , 

.类模块 牌类, , , 

.程序集变量 大小, 整数型, , , 
.程序集变量 花色, 整数型, , , 
.程序集变量 正面, 逻辑型, , , 
.程序集变量 层次, 整数型, , , 
.程序集变量 图片容量, 图片框, , , 
.程序集变量 横坐标, 整数型, , , 
.程序集变量 纵坐标, 整数型, , , 
.程序集变量 类别, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化, 空白型, 公开, 
.参数 参数_牌号, 整数型, , 
.参数 参数_正面, 逻辑型, , 
.参数 参数_层次, 整数型, , 
.参数 参数_样板图片框, 图片框, , 
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_编号, 整数型, , 
.参数 参数_类别, 整数型, , 

.如果真 (取反 (是否已创建 (图片容量)))
    复制窗口组件 (参数_样板图片框, 图片容量)
.如果真结束
赋值 (图片容量.标记, 到文本 (参数_编号))
置图片框层次 (#顶层)
赋值 (大小, 求余数 (参数_牌号, 13))
.如果真 (等于 (大小, 0))
    赋值 (大小, 13)
.如果真结束
.如果 (等于 (大小, 13))
    赋值 (花色, 整除 (参数_牌号, 13))
.否则
    赋值 (花色, 相加 (整除 (参数_牌号, 13), 1))
.如果结束
置位置 (参数_x, 参数_y)
置正反面 (参数_正面)
置类别 (参数_类别)
置层次 (参数_层次)
赋值 (图片容量.可视, 真)


.子程序 销毁, 空白型, , 
.如果真 (是否已创建 (图片容量))
    图片容量.销毁 ()
.如果真结束


.子程序 返回图片, 字节集, , 
.参数 参数_花色, 空白型, , 
.参数 参数_大小, 空白型, , 

.如果真 (等于 (参数_花色, 0))
    返回 (#dt)
.如果真结束
.如果真 (并且 (大于 (相加 (相乘 (相减 (参数_花色, 1), 13), 参数_大小), 0), 小于或等于 (相加 (相乘 (相减 (参数_花色, 1), 13), 参数_大小), 54)))
    返回 (多项选择 (相加 (相乘 (相减 (参数_花色, 1), 13), 参数_大小), #p1, #p2, #p3, #p4, #p5, #p6, #p7, #p8, #p9, #p10, #p11, #p12, #p13, #p14, #p15, #p16, #p17, #p18, #p19, #p20, #p21, #p22, #p23, #p24, #p25, #p26, #p27, #p28, #p29, #p30, #p31, #p32, #p33, #p34, #p35, #p36, #p37, #p38, #p39, #p40, #p41, #p42, #p43, #p44, #p45, #p46, #p47, #p48, #p49, #p50, #p51, #p52, #p53, #p54))
.如果真结束
返回 ({  })


.子程序 置位置, 空白型, 公开, 
.参数 参数_x, 空白型, , 
.参数 参数_y, 空白型, , 

赋值 (横坐标, 参数_x)
赋值 (纵坐标, 参数_y)
图片容量.移动 (横坐标, 纵坐标, , )


.子程序 动画移动到, 空白型, 公开, 
.参数 参数_原x, 空白型, , 
.参数 参数_原y, 空白型, , 
.参数 参数_到x, 空白型, , 
.参数 参数_到y, 空白型, , 

.局部变量 x, 整数型, , , 
.局部变量 tx, 空白型, , , 
.局部变量 ty, 空白型, , , 
.局部变量 yx, 空白型, , , 
.局部变量 yy, 空白型, , , 

赋值 (yx, 整除 (取绝对值 (相减 (参数_原x, 参数_到x)), 5))
赋值 (yy, 整除 (取绝对值 (相减 (参数_原y, 参数_到y)), 5))
赋值 (tx, 选择 (大于 (参数_原x, 参数_到x), 相减 (参数_原x, yx), 相加 (参数_原x, yx)))
赋值 (ty, 选择 (大于 (参数_原y, 参数_到y), 相减 (参数_原y, yy), 相加 (参数_原y, yy)))
.计次循环首 (5, x)
    置位置 (tx, ty)
    图片容量.刷新显示 ()
    延时 (1)
    赋值 (tx, 选择 (大于 (参数_原x, 参数_到x), 相减 (tx, yx), 相加 (tx, yx)))
    赋值 (ty, 选择 (大于 (参数_原y, 参数_到y), 相减 (ty, yy), 相加 (ty, yy)))
.计次循环尾 ()
置位置 (参数_到x, 参数_到y)


.子程序 取位置x, 整数型, , 
返回 (横坐标)

.子程序 取位置y, 整数型, , 
返回 (纵坐标)

.子程序 置正反面, 空白型, , 
.参数 参数_正面, 逻辑型, , 

赋值 (正面, 参数_正面)
赋值 (图片容量.边框, 选择 (正面, 0, 5))
赋值 (图片容量.图片, 选择 (正面, 返回图片 (花色, 大小), 返回图片 (0, 0)))


.子程序 取正反面, 逻辑型, , 
返回 (正面)

.子程序 置层次, 空白型, , 
.参数 参数_层次, 空白型, , 

赋值 (层次, 参数_层次)


.子程序 取层次, 整数型, , 
返回 (层次)


.子程序 置类别, 空白型, , 
.参数 参数_类别, 整数型, , 

赋值 (类别, 参数_类别)

.子程序 取类别, 整数型, , 
返回 (类别)

.子程序 取花色, 整数型, , 
返回 (花色)

.子程序 取大小, 整数型, , 
返回 (大小)

.子程序 取图片框, 图片框, , 
返回 (图片容量)


.子程序 置图片框层次, 空白型, 公开, 
.参数 参数_层次, 空白型, , 

图片容量.调整层次 (参数_层次)


.窗口程序集 启动窗口程序集, , , 

.程序集变量 底牌图片框组, 图片框, , "10", 
.程序集变量 牌类, 牌类, , "104", 
.程序集变量 开始否, 逻辑型, , , 
.程序集变量 准备移动数组, 整数型, , "0", 
.程序集变量 分数, 空白型, , , 
.程序集变量 操作次数, 空白型, , , 
.程序集变量 mouX, 空白型, , , 
.程序集变量 mouY, 空白型, , , 
.程序集变量 tpkX, 空白型, , , 
.程序集变量 tpkY, 空白型, , , 
.程序集变量 撤消数据, 整数型, , "0", 
.程序集变量 撤消到, 整数型, , , 
.程序集变量 撤消面, 逻辑型, , , 
.程序集变量 提示数组, 提示数据, , "0", 
.程序集变量 已生成提示, 逻辑型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
复制组件 ()
赋值 (., 真)
初始化数据 ()
.如果真 (等于 (读配置项 (配置文件名, “set”, “自动打开”, ), “1”))
    打开保存的牌局 ()
    赋值 (开始否, 真)
    返回 ()
.如果真结束
载入 (窗口_选择级别, , 真)
.如果真 (不等于 (难度, 0))
    洗牌 ()
    刷新显示 ()
    发牌 ()
.如果真结束


.子程序 _图片框_样板_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件图片框, 图片框, , , 
.局部变量 索引, 整数型, , , 
.局部变量 x, 整数型, , , 

清除数组 (准备移动数组) ' 清除上次准备移动的牌数据
赋值 (事件图片框, 取事件组件 ())
赋值 (索引, 到数值 (事件图片框.标记)) ' 索引即为牌类的索引
.如果真 (等于 (索引, 0)) ' 非牌数据则不能移动
    返回 ()
.如果真结束
.如果真 (等于 (牌类.取正反面 ( [索引]), 假)) ' 反面不可以移动
    返回 ()
.如果真结束
.如果真 (大于 (牌类.取类别 ( [索引]), 10)) ' 接收牌和待发牌不能移动
    返回 ()
.如果真结束
赋值 (mouX, 横向位置)
赋值 (mouY, 纵向位置)
赋值 (tpkX, 事件图片框.左边)
赋值 (tpkY, 事件图片框.顶边) ' 保存四个变量以便不能移动到别的地方时回到原位
音效 (#点击)
加入成员 (准备移动数组, 索引) ' 把第一个准备移动牌加入到数组中
.如果真 (并且 (等于 (是否最前面 (索引), 假), 等于 (是否成串 (索引), 假))) ' 当不在最前面又不能成串时不可移动，在判断是否成串时已经把成串的数据加入到数组中。
    返回 ()
.如果真结束
.计次循环首 (取数组成员数 (准备移动数组), x)
    牌类.置图片框层次 ( [准备移动数组] [x], #顶层) ' 先调整好层次在移动时时钟事件中就不用多次调用，防止闪烁。
.计次循环尾 ()
赋值 (.时钟周期, 100) ' 开始移动时钟。让牌随鼠标走动

.子程序 _图片框_样板_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件图片框, 图片框, , , 
.局部变量 索引, 整数型, , , 

赋值 (.时钟周期, 0) ' 放开时停止时钟
音效 (#放开)
未知支持库函数_73 ()
赋值 (事件图片框, 取事件组件 ())
赋值 (索引, 到数值 (事件图片框.标记))
.如果真 (等于 (索引, 0))
    返回 ()
.如果真结束
.如果真 (等于 (牌类.取类别 ( [索引]), 11)) ' 类别为11时发牌
    发牌 ()
    返回 ()
.如果真结束
.如果真 (等于 (牌类.取类别 ( [索引]), 12))
    返回 ()
.如果真结束
.如果真 (小于 (取数组成员数 (准备移动数组), 1))
    返回 ()
.如果真结束
开始移动 (取移动到位置 ()) ' 开始移动，其中移动到位置在子程序中求得

.子程序 _开局_被选择, 空白型, , 
.如果真 (是否重新开始 ())
    洗牌 ()
    刷新显示 ()
    发牌 ()
.如果真结束


.子程序 _关于_被选择, 空白型, , 
载入 (关于窗口, , 真)


.子程序 _记录_被选择, 空白型, , 
载入 (记录窗口, , 真)

.子程序 _发牌_被选择, 空白型, , 
发牌 ()


.子程序 _选择级别_被选择, 空白型, , 
.如果真 (是否重新开始 ())
    载入 (窗口_选择级别, , 真)
    洗牌 ()
    发牌 ()
.如果真结束


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
.如果真 (等于 (读配置项 (配置文件名, “set”, “自动保存”, ), “1”))
    保存牌局 ()
    返回 (真)
.如果真结束
.如果真 (是否重新开始 ())
    返回 (真)
.如果真结束
返回 (假)

.子程序 _帮助主题_被选择, 空白型, , 
运行 (相加 (“hh.exe ”, “蜘蛛牌.chm”), 假, )


.子程序 _撤消_被选择, 空白型, , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 

.如果真 (大于 (取数组成员数 (撤消数据), 0))
    复制数组 (准备移动数组, 撤消数据)
    .计次循环首 (取数组成员数 (准备移动数组), x)
        牌类.置图片框层次 ( [准备移动数组] [x], #顶层) ' 先调整好层次在移动时时钟事件中就不用多次调用，防止闪烁。
    .计次循环尾 ()
    赋值 (x, 取顶牌索引 (撤消到))
    .如果 (等于 (x, 0))
        赋值 (x, 相加 (104, 撤消到))
    .否则
        牌类.置正反面 ( [x], 撤消面)
    .如果结束
    开始移动 (x) ' 调用开始移动程序，所以撤消一次也会减1分
    清除数组 (撤消数据)
    赋值 (.禁止, 真)
.如果真结束


.子程序 _退出_被选择, 空白型, , 
__启动窗口_可否被关闭 ()
结束 ()

.子程序 _打开保存的牌局_被选择, 空白型, , 
打开保存的牌局 ()


.子程序 _保存现在的牌局_被选择, 空白型, , 
保存牌局 ()

.子程序 _游戏选项_被选择, 空白型, , 
载入 (窗口_选项, , 真)


.子程序 _标签1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

开始提示 ()

.子程序 _时钟_移牌动画_周期事件, 空白型, , 牌随鼠标拖动时钟
.局部变量 pmwz, PointApi, , , 
.局部变量 x, 整数型, , , 

赋值 (pmwz.x, 取鼠标水平位置 ())
赋值 (pmwz.y, 取鼠标垂直位置 ())
ScreenToClient (_启动窗口.取窗口句柄 (), pmwz)
 ' 以上用API改变坐标系统，得到相对于启动窗口的位置
牌类.置位置 ( [准备移动数组] [1], 相减 (pmwz.x, mouX), 相减 (pmwz.y, mouY)) ' 移动最下面牌
.计次循环首 (相减 (取数组成员数 (准备移动数组), 1), x) ' 如果移动的是一串则把后面的牌随前面牌置位置
    牌类.置位置 ( [准备移动数组] [相加 (x, 1)], 牌类.取位置x ( [准备移动数组] [x]), 相加 (牌类.取位置y ( [准备移动数组] [x]), 15))
.计次循环尾 ()


.子程序 初始化数据, 空白型, , 
赋值 (分数, 500) ' 默认500分
赋值 (操作次数, 0)
分数信息 ()
赋值 (开始否, 假)
赋值 (.禁止, 假)
赋值 (已生成提示, 假)
赋值 (配置文件名, 取运行目录 ())
.如果 (等于 (取文本右边 (配置文件名, 1), “\”))
    赋值 (配置文件名, 相加 (配置文件名, “spider.ini”))
.否则
    赋值 (配置文件名, 相加 (配置文件名, “\spider.ini”))
.如果结束
.如果真 (等于 (读配置项 (配置文件名, “set”, “音效”, “1”), “1”))
    赋值 (音效否, 真)
.如果真结束
.如果真 (等于 (读配置项 (配置文件名, “set”, “动画”, “1”), “1”))
    赋值 (动画否, 真)
.如果真结束
 ' 以上初始作一些数据


.子程序 复制组件, 空白型, , 设置十个底面图片框
.局部变量 x, 整数型, , , 

.计次循环首 (10, x)
    复制窗口组件 (底牌图片框组 [x])
    底牌图片框组.移动 ( [x], 相加 (相乘 (相减 (x, 1), 79), 8), 10, , )
    赋值 (底牌图片框组 [x], 可视, 真)
.计次循环尾 ()

.子程序 洗牌, 空白型, , 生成并打乱牌
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 t1, 空白型, , , 
.局部变量 t2, 空白型, , , 
.局部变量 t3, 空白型, , , 
.局部变量 temp, 整数型, , "104", 

.如果真 (等于 (难度, 0)) ' 难度未定时取出默认值
    赋值 (难度, 到数值 (读配置项 (配置文件名, “set”, “级别”, “1”)))
.如果真结束
.判断开始 (等于 (难度, 3))
    .计次循环首 (2, y)
        .计次循环首 (52, x)
            赋值 (temp [相加 (相乘 (相减 (y, 1), 52), x)], x)
        .计次循环尾 ()
    .计次循环尾 ()
     ' 难度为高时生成四色牌
.判断 (等于 (难度, 2))
    .计次循环首 (4, y)
        .计次循环首 (26, x)
            赋值 (temp [相加 (相乘 (相减 (y, 1), 26), x)], x)
        .计次循环尾 ()
    .计次循环尾 ()
     ' 难度为中时生成两色牌
.默认
    .计次循环首 (8, y)
        .计次循环首 (13, x)
            赋值 (temp [相加 (相乘 (相减 (y, 1), 13), x)], x)
        .计次循环尾 ()
    .计次循环尾 ()
     ' 难度为低时生成单色牌
.判断结束

置随机数种子 ()
.计次循环首 (2000, x)
    赋值 (t1, 取随机数 (1, 104))
    赋值 (t2, 取随机数 (1, 104))
    .如果真 (不等于 (t1, t2))
        赋值 (t3, temp [t1])
        赋值 (temp [t1], temp [t2])
        赋值 (temp [t2], t3)
    .如果真结束
    
.计次循环尾 ()
 ' 以上打乱牌

.计次循环首 (4, y)
    .计次循环首 (10, x)
        牌类.初始化 ( [相加 (相乘 (相减 (y, 1), 10), x)], temp [相加 (相乘 (相减 (y, 1), 10), x)], 假, y, , 相加 (相乘 (相减 (x, 1), 79), 8), 相加 (相乘 (相减 (y, 1), 5), 10), 相加 (相乘 (相减 (y, 1), 10), x), x)
    .计次循环尾 ()
.计次循环尾 () ' 发底下4层牌
.计次循环首 (4, x)
    牌类.初始化 ( [相加 (40, x)], temp [相加 (40, x)], 假, 5, , 相加 (相乘 (相减 (x, 1), 79), 8), 30, 相加 (40, x), x)
.计次循环尾 () ' 发四张底牌，加上面一共44张
.计次循环首 (6, y)
    .计次循环首 (10, x)
        牌类.初始化 ( [相加 (44, 相乘 (相减 (y, 1), 10), x)], temp [相加 (44, 相乘 (相减 (y, 1), 10), x)], 假, 相加 (相乘 (相减 (y, 1), 10), x), , 相减 (720, 相乘 (相减 (y, 1), 15)), 400, 相加 (44, 相乘 (相减 (y, 1), 10), x), 11)
    .计次循环尾 ()
.计次循环尾 () ' 另外60张牌到右下角备用

.子程序 发牌, 空白型, , 从右下角发出十张牌
.局部变量 x, 整数型, , , 
.局部变量 接收牌索引, 空白型, , , 
.局部变量 待发牌索引, 空白型, , , 

.计次循环首 (10, x)
    .如果真 (等于 (取顶牌索引 (x), 0)) ' 有空位时不发牌
        信息框 (“有空位置时不能发牌”, 0, )
        返回 ()
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (10, x) ' 发出十张牌
    赋值 (待发牌索引, 取顶牌索引 (11)) ' 取出准备发出牌的索引
    赋值 (接收牌索引, 取顶牌索引 (x)) ' 取出接收牌的索引
    牌类.置层次 ( [待发牌索引], 相加 (牌类.取层次 ( [接收牌索引]), 1)) ' 层次为接收牌层次加1
    牌类.置类别 ( [待发牌索引], 牌类.取类别 ( [接收牌索引])) ' 类别为接收牌相同
    牌类.置正反面 ( [待发牌索引], 真) ' 发出牌为正面可视
    牌类.置图片框层次 ( [待发牌索引], #顶层) ' 把牌调到顶层，防止不可见
    .如果 (动画否)
        牌类.动画移动到 ( [待发牌索引], 牌类.取位置x ( [待发牌索引]), 牌类.取位置y ( [待发牌索引]), 牌类.取位置x ( [接收牌索引]), 相加 (牌类.取位置y ( [接收牌索引]), 选择 (牌类.取正反面 ( [接收牌索引]), 15, 5))) ' 生成动画效果
    .否则
        牌类.置位置 ( [待发牌索引], 牌类.取位置x ( [接收牌索引]), 相加 (牌类.取位置y ( [接收牌索引]), 选择 (牌类.取正反面 ( [接收牌索引]), 15, 5))) ' 不生成动画
    .如果结束
    音效 (#发牌)
    刷新显示 () ' 立即强制刷新
.计次循环尾 ()
赋值 (开始否, 真) ' 置开始状态
赋值 (已生成提示, 假)

.子程序 收牌, 空白型, , 把成功排列的牌收到左下角
.参数 类别, 空白型, , 

.局部变量 x, 整数型, , , 
.局部变量 待发牌索引, 整数型, , , 
.局部变量 接收牌索引, 整数型, , , 
.局部变量 接收层次, 空白型, , , 
.局部变量 位置x, 空白型, , , 
.局部变量 位置y, 空白型, , , 

赋值 (接收牌索引, 取顶牌索引 (12))
.如果 (等于 (接收牌索引, 0))
    赋值 (位置x, 10)
    赋值 (接收层次, 0)
.否则
    赋值 (位置x, 相加 (牌类.取位置x ( [接收牌索引]), 10))
    赋值 (接收层次, 牌类.取层次 ( [接收牌索引]))
.如果结束
赋值 (位置y, 400)
 ' 以上求出接收位置
.计次循环首 (13, x) ' 接收13张
    赋值 (待发牌索引, 取顶牌索引 (类别)) ' 取等待发出牌的索引
    牌类.置类别 ( [待发牌索引], 12) ' 至为已回收类别（12）
    牌类.置层次 ( [待发牌索引], 相加 (接收层次, x))
    牌类.置图片框层次 ( [待发牌索引], #顶层) ' 到最上面
    .如果 (动画否)
        牌类.动画移动到 ( [待发牌索引], 牌类.取位置x ( [待发牌索引]), 牌类.取位置y ( [待发牌索引]), 位置x, 位置y) ' 生成动画
    .否则
        牌类.置位置 ( [待发牌索引], 位置x, 位置y) ' 不生成动画
    .如果结束
    音效 (#发牌)
    刷新显示 () ' 立即强制刷新
.计次循环尾 ()

.子程序 取顶牌索引, 整数型, , 取出最上面牌索引
.参数 类别, 整数型, , 

.局部变量 x, 整数型, , , 
.局部变量 y, 空白型, , , 

赋值 (y, 0)
.计次循环首 (104, x)
    .如果真 (并且 (大于 (牌类.取层次 ( [x]), y), 等于 (牌类.取类别 ( [x]), 类别)))
        赋值 (y, 牌类.取层次 ( [x]))
    .如果真结束
    
.计次循环尾 () ' 取出最上层的层次数
.如果真 (等于 (y, 0))
    返回 (y) ' 为零即证明此类牌，置0
.如果真结束
.计次循环首 (104, x)
    .如果真 (并且 (等于 (牌类.取层次 ( [x]), y), 等于 (牌类.取类别 ( [x]), 类别)))
        返回 (x)
    .如果真结束
    
.计次循环尾 () ' 取出索引
返回 (y)

.子程序 是否已完成, 逻辑型, , 
.局部变量 x, 整数型, , , 
.局部变量 jl, 空白型, , , 

.计次循环首 (104, x)
    .如果真 (不等于 (牌类.取类别 ( [x]), 12))
        返回 (假) ' 有一张类别不为12则证明未全部完成
    .如果真结束
    
.计次循环尾 ()
音效 (#成功)
赋值 (jl, 到数值 (读配置项 (配置文件名, “记录”, 到文本 (难度), “0”))) ' 取出记录来
.如果真 (大于 (分数, jl)) ' 破记录则写入新记录
    写配置项 (配置文件名, “记录”, 到文本 (难度), 到文本 (分数))
.如果真结束
赋值 (开始否, 假) ' 置开始状态为假
返回 (真)

.子程序 是否成串, 逻辑型, , 不用注释，简单的子程序
.参数 准备牌索引, 空白型, , 

.局部变量 x, 整数型, , , 

.计次循环首 (104, x)
    .如果真 (并且 (等于 (牌类.取类别 ( [x]), 牌类.取类别 ( [准备牌索引])), 等于 (牌类.取层次 ( [x]), 相加 (牌类.取层次 ( [准备牌索引]), 1))))
        .如果真 (等于 (牌类.取大小 ( [准备牌索引]), 相加 (牌类.取大小 ( [x]), 1)))
            .如果真 (等于 (牌类.取花色 ( [准备牌索引]), 牌类.取花色 ( [x])))
                加入成员 (准备移动数组, x)
                .如果 (是否最前面 (x))
                    返回 (真)
                .否则
                    返回 (是否成串 (x))
                .如果结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 取移动到位置, 整数型, , 
.局部变量 x, 整数型, , , 
.局部变量 md, 图片框, , , 

.计次循环首 (104, x)
    .如果真 (是否最前面 (x)) ' 接收位置必须最顶上牌
        .如果真 (并且 (不等于 (牌类.取类别 ( [x]), 牌类.取类别 ( [准备移动数组] [1])), 小于 (牌类.取类别 ( [x]), 11), 牌类.取正反面 ( [x]))) ' 类别不能是本身一样并且类别不是待发牌也不是已成功牌
             ' 以下通过画板左上，右上，左下，右下四点来判断是否在其范围内
            .如果真 (并且 (大于或等于 (牌类.取位置x ( [准备移动数组] [1]), 牌类.取位置x ( [x])), 小于或等于 (牌类.取位置x ( [准备移动数组] [1]), 相加 (牌类.取位置x ( [x]), 71)), 大于或等于 (牌类.取位置y ( [准备移动数组] [1]), 牌类.取位置y ( [x])), 小于或等于 (牌类.取位置y ( [准备移动数组] [1]), 相加 (牌类.取位置y ( [x]), 96))))
                .如果真 (等于 (牌类.取大小 ( [准备移动数组] [1]), 相减 (牌类.取大小 ( [x]), 1))) ' 符合范围的要求但还要大小符合要求，以下三个相同。
                    返回 (x)
                .如果真结束
                
            .如果真结束
            .如果真 (并且 (大于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 牌类.取位置x ( [x])), 小于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 相加 (牌类.取位置x ( [x]), 71)), 大于或等于 (牌类.取位置y ( [准备移动数组] [1]), 牌类.取位置y ( [x])), 小于或等于 (牌类.取位置y ( [准备移动数组] [1]), 相加 (牌类.取位置y ( [x]), 96))))
                .如果真 (等于 (牌类.取大小 ( [准备移动数组] [1]), 相减 (牌类.取大小 ( [x]), 1)))
                    返回 (x)
                .如果真结束
                
            .如果真结束
            .如果真 (并且 (大于或等于 (牌类.取位置x ( [准备移动数组] [1]), 牌类.取位置x ( [x])), 小于或等于 (牌类.取位置x ( [准备移动数组] [1]), 相加 (牌类.取位置x ( [x]), 71)), 大于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 牌类.取位置y ( [x])), 小于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 相加 (牌类.取位置y ( [x]), 96))))
                .如果真 (等于 (牌类.取大小 ( [准备移动数组] [1]), 相减 (牌类.取大小 ( [x]), 1)))
                    返回 (x)
                    
                .如果真结束
                
            .如果真结束
            .如果真 (并且 (大于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 牌类.取位置x ( [x])), 小于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 相加 (牌类.取位置x ( [x]), 71)), 大于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 牌类.取位置y ( [x])), 小于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 相加 (牌类.取位置y ( [x]), 96))))
                .如果真 (等于 (牌类.取大小 ( [准备移动数组] [1]), 相减 (牌类.取大小 ( [x]), 1)))
                    返回 (x)
                    
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (10, x) ' 以下为判断是否可以移动到底牌，也就是此列无牌时情况
    赋值 (md, 底牌图片框组 [x]) ' 依次判断十个底牌图片框
    .如果真 (并且 (大于或等于 (牌类.取位置x ( [准备移动数组] [1]), md.左边), 小于或等于 (牌类.取位置x ( [准备移动数组] [1]), 相加 (md.左边, 71)), 大于或等于 (牌类.取位置y ( [准备移动数组] [1]), md.顶边), 小于或等于 (牌类.取位置y ( [准备移动数组] [1]), 相加 (md.顶边, 96))))
        .如果真 (等于 (取顶牌索引 (x), 0)) ' 范围符合也要上面无牌才有用
            返回 (相加 (x, 104)) ' 称动到的位置索引大于104时就是移动到底牌，下同。
        .如果真结束
        
    .如果真结束
    .如果真 (并且 (大于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), md.左边), 小于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 相加 (md.左边, 71)), 大于或等于 (牌类.取位置y ( [准备移动数组] [1]), md.顶边), 小于或等于 (牌类.取位置y ( [准备移动数组] [1]), 相加 (md.顶边, 96))))
        .如果真 (等于 (取顶牌索引 (x), 0))
            返回 (相加 (x, 104))
        .如果真结束
        
    .如果真结束
    .如果真 (并且 (大于或等于 (牌类.取位置x ( [准备移动数组] [1]), md.左边), 小于或等于 (牌类.取位置x ( [准备移动数组] [1]), 相加 (md.左边, 71)), 大于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), md.顶边), 小于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 相加 (md.顶边, 96))))
        .如果真 (等于 (取顶牌索引 (x), 0))
            返回 (相加 (x, 104))
        .如果真结束
        
    .如果真结束
    .如果真 (并且 (大于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), md.左边), 小于或等于 (相加 (牌类.取位置x ( [准备移动数组] [1]), 71), 相加 (md.左边, 71)), 大于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), md.顶边), 小于或等于 (相加 (牌类.取位置y ( [准备移动数组] [1]), 96), 相加 (md.顶边, 96))))
        .如果真 (等于 (取顶牌索引 (x), 0))
            返回 (相加 (x, 104))
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (0) ' 如果所有情况都不成立则不能移动到任何地方，用0表示归原位

.子程序 开始移动, 空白型, , 移动并修改数据
.参数 移动到, 整数型, , 

.局部变量 x, 整数型, , , 
.局部变量 tpk, 图片框, , , 
.局部变量 类别, 空白型, , , 
.局部变量 待翻牌, 空白型, , , 

.如果 (等于 (移动到, 0)) ' 为0时归原位
    牌类.置位置 ( [准备移动数组] [1], tpkX, tpkY) ' 备用数据起作用了
    .变量循环首 (2, 取数组成员数 (准备移动数组), 1, x)
        牌类.置位置 ( [准备移动数组] [x], 牌类.取位置x ( [准备移动数组] [相减 (x, 1)]), 相加 (牌类.取位置y ( [准备移动数组] [相减 (x, 1)]), 15))
    .变量循环尾 () ' 如果是一串则把其它牌也归位
    返回 () ' 可以返回了！
.否则
    赋值 (已生成提示, 假)
    赋值 (待翻牌, 牌类.取类别 ( [准备移动数组] [1])) ' 取出准备移动的牌的类别以便于移动后自动把牌翻开
    赋值 (撤消到, 待翻牌)
    赋值 (撤消面, 真)
    .计次循环首 (104, x)
        .如果真 (并且 (等于 (牌类.取类别 ( [x]), 牌类.取类别 ( [准备移动数组] [1])), 等于 (牌类.取层次 ( [x]), 相减 (牌类.取层次 ( [准备移动数组] [1]), 1))))
            赋值 (撤消面, 牌类.取正反面 ( [x]))
        .如果真结束
        
    .计次循环尾 ()
    复制数组 (撤消数据, 准备移动数组)
    赋值 (.禁止, 假) ' 以上几句保存数据为撤消作准备
    
    .如果 (小于或等于 (移动到, 104))
        牌类.置位置 ( [准备移动数组] [1], 牌类.取位置x ( [移动到]), 选择 (牌类.取正反面 ( [移动到]), 相加 (牌类.取位置y ( [移动到]), 15), 相加 (牌类.取位置y ( [移动到]), 5)))
        牌类.置类别 ( [准备移动数组] [1], 牌类.取类别 ( [移动到]))
        牌类.置层次 ( [准备移动数组] [1], 相加 (牌类.取层次 ( [移动到]), 1))
    .否则
        赋值 (tpk, 底牌图片框组 [相减 (移动到, 104)]) ' 当移动到空位置时取出移动到的图片框。
        赋值 (类别, 相减 (移动到, 104))
        牌类.置位置 ( [准备移动数组] [1], tpk.左边, tpk.顶边)
        牌类.置类别 ( [准备移动数组] [1], 类别)
        牌类.置层次 ( [准备移动数组] [1], 1)
    .如果结束
    
    .变量循环首 (2, 取数组成员数 (准备移动数组), 1, x) ' 如果是一串牌时把其它牌也主随主牌作相应移动设置
        牌类.置位置 ( [准备移动数组] [x], 牌类.取位置x ( [准备移动数组] [相减 (x, 1)]), 相加 (牌类.取位置y ( [准备移动数组] [相减 (x, 1)]), 15))
        牌类.置层次 ( [准备移动数组] [x], 相加 (牌类.取层次 ( [准备移动数组] [相减 (x, 1)]), 1))
        牌类.置类别 ( [准备移动数组] [x], 牌类.取类别 ( [准备移动数组] [1]))
    .变量循环尾 ()
    赋值 (待翻牌, 取顶牌索引 (待翻牌)) ' 以下三行把移动后的牌自动翻开
    .如果真 (不等于 (待翻牌, 0))
        牌类.置正反面 ( [待翻牌], 真)
    .如果真结束
    
.如果结束
.如果真 (小于或等于 (移动到, 104)) ' 以下判断是否成功排列了13张
    .如果 (是否已成功排列 (牌类.取类别 ( [移动到])))
        赋值 (.禁止, 真)
        赋值 (待翻牌, 牌类.取类别 ( [移动到]))
        收牌 (牌类.取类别 ( [移动到])) ' 收成功后的牌
        赋值 (待翻牌, 取顶牌索引 (待翻牌)) ' 以下收后如果还有牌则翻开
        .如果真 (不等于 (待翻牌, 0))
            牌类.置正反面 ( [待翻牌], 真)
        .如果真结束
        分数信息 (真) ' 加分
        .如果真 (是否已完成 ()) ' 判断是否全部完成
            .如果真 (等于 (信息框 (“你成功了！再来一次吗？”, 相加 (#信息图标, #是否钮), ), #是钮))
                洗牌 ()
                发牌 ()
            .如果真结束
            
        .如果真结束
        返回 ()
    .否则
        
    .如果结束
    
.如果真结束
分数信息 (假) ' 排队所有后就只能说是无得分移动，所以减一分


.子程序 生成提示数组, 空白型, , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 移动到, 空白型, , , 
.局部变量 temp, 提示数据, , , 

清除数组 (提示数组)
.计次循环首 (104, x)
    .如果真 (并且 (小于 (牌类.取类别 ( [x]), 11), 牌类.取正反面 ( [x])))
        .计次循环首 (10, y)
            .如果真 (并且 (等于 (是否最前面 (x), 假), 等于 (是否成串 (x), 假)))
                跳出循环 ()
            .如果真结束
            赋值 (移动到, 取顶牌索引 (y))
            .如果 (大于 (移动到, 0))
                .如果真 (并且 (等于 (牌类.取大小 ( [x]), 相减 (牌类.取大小 ( [移动到]), 1)), 不等于 (牌类.取类别 ( [x]), 牌类.取类别 ( [移动到]))))
                    赋值 (temp.从, x)
                    赋值 (temp.到, 移动到)
                    赋值 (temp.提示过, 假)
                    加入成员 (提示数组, temp)
                .如果真结束
                
            .否则
                赋值 (移动到, 相加 (104, y))
                赋值 (temp.从, x)
                赋值 (temp.到, 移动到)
                赋值 (temp.提示过, 假)
                加入成员 (提示数组, temp)
            .如果结束
            
        .计次循环尾 ()
        
    .如果真结束
    
.计次循环尾 ()
赋值 (已生成提示, 真)

.子程序 开始提示, 空白型, , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 

.如果真 (等于 (已生成提示, 假))
    生成提示数组 ()
.如果真结束
.如果真 (小于 (取数组成员数 (提示数组), 1))
    音效 (#无提示)
    返回 ()
.如果真结束
赋值 (x, 1)
.判断循环首 (提示数组 [x], 提示过)
    赋值 (x, 相加 (x, 1))
    .如果真 (大于 (x, 取数组成员数 (提示数组)))
        .计次循环首 (取数组成员数 (提示数组), y)
            赋值 (提示数组 [y], 提示过, 假)
        .计次循环尾 ()
        赋值 (x, 1)
    .如果真结束
    
.判断循环尾 ()
赋值 (提示数组 [x], 提示过, 真)
#顶层.调整层次 ()
.如果 (是否最前面 (提示数组 [x], 从))
    牌类.取位置x ( [提示数组] [x], 从).移动 (牌类.取位置y ( [提示数组] [x], 从), , 96)
.否则
    牌类.取位置x ( [提示数组] [x], 从).移动 (牌类.取位置y ( [提示数组] [x], 从), , 相加 (96, 相乘 (相减 (牌类.取层次 ( [取顶牌索引 (牌类.取类别 ( [提示数组] [x], 从))]), 牌类.取层次 ( [提示数组] [x], 从)), 15)))
.如果结束
赋值 (.底图, 快照 (取窗口句柄 (), , ))
0.翻转矩形区 (0, 71, .高度)
赋值 (.可视, 真)
刷新显示 ()
音效 (#提示)
延时 (200)
赋值 (.可视, 假)
.如果 (小于或等于 (提示数组 [x], 到, 104))
    牌类.取位置x ( [提示数组] [x], 到).移动 (牌类.取位置y ( [提示数组] [x], 到), 71, 96)
.否则
    底牌图片框组.移动 ( [相减 (提示数组 [x], 到, 104)].左边, 底牌图片框组 [相减 (提示数组 [x], 到, 104)].顶边, 71, 96)
.如果结束
赋值 (.底图, 快照 (取窗口句柄 (), , ))
0.翻转矩形区 (0, 71, 96)
赋值 (.可视, 真)
刷新显示 ()
延时 (200)
赋值 (.可视, 假)

.子程序 音效, 空白型, , 
.参数 数据, 字节集, , 

.如果真 (音效否)
    播放音乐 (数据, )
.如果真结束


.子程序 保存牌局, 空白型, , 
.局部变量 回答, 空白型, , , 
.局部变量 file, 整数型, , , 
.局部变量 x, 整数型, , , 

.如果 (文件是否存在 (相加 (取运行目录 (), “\spider.bak”)))
    赋值 (回答, 信息框 (“你要覆盖上次保存的数据吗?”, 相加 (#警告图标, #是否钮), “保存牌局”))
    .如果真 (等于 (回答, #否钮))
        信息框 (“已终止保存工作”, 0, )
        返回 ()
    .如果真结束
    
.否则
    
.如果结束
赋值 (file, 打开文件 (相加 (取运行目录 (), “\spider.bak”), #重写, ))
.如果真 (等于 (file, 0))
    信息框 (“保存失败，可能磁盘写保护!”, 0, )
    返回 ()
.如果真结束
.计次循环首 (104, x)
    .如果真 (取反 (写出数据 (file, 牌类.取大小 ( [x]), 牌类.取花色 ( [x]), 牌类.取位置x ( [x]), 牌类.取位置y ( [x]), 牌类.取正反面 ( [x]), 牌类.取层次 ( [x]), 牌类.取类别 ( [x]))))
        信息框 (“保存失败，可能磁盘写保护!”, 0, )
        返回 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (取反 (写出数据 (file, 分数, 操作次数)))
    信息框 (“保存失败，可能磁盘写保护!”, 0, )
    返回 ()
.如果真结束
关闭文件 (file)
信息框 (“保存成功”, 0, )

.子程序 打开保存的牌局, 空白型, , 
.局部变量 file, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 空白型, , , 
.局部变量 一类总数, 空白型, , , 
.局部变量 顶牌索引, 空白型, , , 
.局部变量 大小, 空白型, , , 
.局部变量 花色, 空白型, , , 
.局部变量 位置x, 空白型, , , 
.局部变量 位置y, 空白型, , , 
.局部变量 正反面, 逻辑型, , , 
.局部变量 层次, 空白型, , , 
.局部变量 类别, 空白型, , , 
.局部变量 z, 整数型, , , 

.如果真 (开始否)
    .如果真 (等于 (信息框 (“是否放弃现在的牌局打开已保存的牌局?”, 相加 (#信息图标, #是否钮), ), #否钮))
        返回 ()
    .如果真结束
    
.如果真结束
.如果 (取反 (文件是否存在 (相加 (取运行目录 (), “\spider.bak”))))
    信息框 (“没有保存的数据!”, #信息图标, )
    返回 ()
.否则
    
.如果结束
赋值 (file, 打开文件 (相加 (取运行目录 (), “\spider.bak”), #读入, ))
.如果真 (等于 (file, 0))
    信息框 (“打开文件失败!晕倒!!”, 0, )
    返回 ()
.如果真结束
.计次循环首 (104, x)
    .如果真 (取反 (读入数据 (file, 大小, 花色, 位置x, 位置y, 正反面, 层次, 类别)))
        信息框 (“读入失败”, 0, )
        返回 ()
    .如果真结束
    牌类.初始化 ( [x], 相加 (相乘 (相减 (花色, 1), 13), 大小), 正反面, 层次, , 位置x, 位置y, x, 类别)
.计次循环尾 ()
.如果真 (取反 (读入数据 (file, 分数, 操作次数)))
    信息框 (“读入失败”, 0, )
    返回 ()
.如果真结束
关闭文件 (file)
分数信息 ()
.计次循环首 (12, x)
    赋值 (顶牌索引, 取顶牌索引 (x))
    .如果真 (不等于 (顶牌索引, 0))
        赋值 (一类总数, 牌类.取层次 ( [取顶牌索引 (x)]))
        .计次循环首 (一类总数, y)
            .计次循环首 (104, z)
                .如果真 (并且 (等于 (牌类.取类别 ( [z]), x), 等于 (牌类.取层次 ( [z]), y)))
                    牌类.置图片框层次 ( [z], #顶层)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
        .计次循环尾 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 分数信息, 空白型, , 成功加100，操作一次减1分
.参数 加减分, 逻辑型, 可空, 

.如果真 (是否为空 (加减分))
    赋值 (.标题, 相加 (“分数:”, 到文本 (分数), #换行符, “操作:”, 到文本 (操作次数)))
    返回 ()
.如果真结束
.如果 (加减分)
    赋值 (操作次数, 相减 (操作次数, 1))
    赋值 (分数, 相加 (分数, 100))
.否则
    赋值 (分数, 相减 (分数, 1))
    赋值 (操作次数, 相加 (操作次数, 1))
.如果结束
赋值 (.标题, 相加 (“分数:”, 到文本 (分数), #换行符, “操作:”, 到文本 (操作次数)))


.子程序 是否重新开始, 逻辑型, , 判断是否保存，保存代码未完成
.局部变量 x, 整数型, , , 

.如果真 (等于 (开始否, 假))
    返回 (真)
.如果真结束
赋值 (x, 信息框 (“你将放弃本局，需要保存牌局吗？”, 相加 (#信息图标, #取消是否钮), ))
.判断开始 (等于 (x, #是钮))
    保存牌局 ()
    返回 (真)
.判断 (等于 (x, #否钮))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 是否最前面, 逻辑型, , 判断是否在一类的最上面
.参数 sy, 空白型, , 

.局部变量 x, 整数型, , , 

.计次循环首 (104, x)
    .如果真 (不等于 (x, sy))
        .如果真 (等于 (牌类.取类别 ( [x]), 牌类.取类别 ( [sy])))
            .如果真 (大于 (牌类.取层次 ( [x]), 牌类.取层次 ( [sy])))
                返回 (假)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (真)

.子程序 是否已成功排列, 逻辑型, , 
.参数 类别, 空白型, , 

.局部变量 x, 整数型, , , 
.局部变量 b, 空白型, , "0", 
.局部变量 c, 空白型, , "0", 
.局部变量 大小, 空白型, , , 
.局部变量 花色, 空白型, , , 

.计次循环首 (104, x)
    .如果真 (等于 (牌类.取类别 ( [x]), 类别))
        加入成员 (b, x)
    .如果真结束
    
.计次循环尾 () ' 以上把这一类别的所有牌全部保存到b数组中
.如果真 (小于 (取数组成员数 (b), 13)) ' 当少于13时不可能成功排列
    返回 (假)
.如果真结束
重定义数组 (c, 假, 取数组成员数 (b)) ' 定义第二个数组为了以层次排序
.计次循环首 (取数组成员数 (b), x)
    赋值 (c [牌类.取层次 ( [b] [x])], b [x])
.计次循环尾 ()
赋值 (大小, 1)
赋值 (花色, 牌类.取花色 ( [c] [取数组成员数 (c)]))
.变量循环首 (取数组成员数 (c), 相减 (取数组成员数 (c), 12), -1, x) ' 从最后一个开始判断，判断12次
    .如果真 (或者 (不等于 (牌类.取大小 ( [c] [x]), 大小), 不等于 (牌类.取花色 ( [c] [x]), 花色), 等于 (牌类.取正反面 ( [c] [x]), 假))) ' 大小或花色不符则返回
        返回 (假)
    .如果真结束
    赋值 (大小, 相加 (大小, 1))
.变量循环尾 ()
返回 (真) ' 全部通过则证明成功排列

.窗口程序集 选级窗口程序集, , , 

.子程序 _单选框1_被单击, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)


.子程序 _单选框2_被单击, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _单选框3_被单击, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _按钮1_被单击, 空白型, , 
.判断开始 (.选中)
    赋值 (难度, 1)
.判断 (.选中)
    赋值 (难度, 2)
.默认
    赋值 (难度, 3)
.判断结束
写配置项 (配置文件名, “set”, “级别”, 到文本 (难度))
销毁 ()

.子程序 _按钮2_被单击, 空白型, , 
销毁 ()

.子程序 _窗口_选择级别_创建完毕, 空白型, , 
.局部变量 temp, 空白型, , , 

赋值 (temp, 到数值 (读配置项 (配置文件名, “set”, “级别”, “1”)))
.判断开始 (等于 (temp, 1))
    赋值 (.选中, 真)
.判断 (等于 (temp, 2))
    赋值 (.选中, 真)
.默认
    赋值 (.选中, 真)
.判断结束


.窗口程序集 关于窗口程序集, , , 

.子程序 _按钮1_被单击, 空白型, , 
销毁 ()

.窗口程序集 记录窗口程序集, , , 

.子程序 _记录窗口_创建完毕, 空白型, , 
.局部变量 初, 文本型, , , 
.局部变量 中, 文本型, , , 
.局部变量 高, 文本型, , , 

赋值 (初, 相加 (读配置项 (配置文件名, “记录”, 到文本 (1), “0”), “分”))
赋值 (中, 相加 (读配置项 (配置文件名, “记录”, 到文本 (2), “0”), “分”))
赋值 (高, 相加 (读配置项 (配置文件名, “记录”, 到文本 (3), “0”), “分”))
赋值 (., 相加 (“初级记录:”, 初, #换行符, #换行符, “中级记录:”, 中, #换行符, #换行符, “高级记录:”, 高))

.子程序 _按钮1_被单击, 空白型, , 
销毁 ()

.子程序 _按钮2_被单击, 空白型, , 
.如果真 (等于 (信息框 (“你真要清除所有记录吗？”, 相加 (#信息图标, #是否钮), ), #是钮))
    写配置项 (配置文件名, “记录”, 到文本 (1), “0”)
    写配置项 (配置文件名, “记录”, 到文本 (2), “0”)
    写配置项 (配置文件名, “记录”, 到文本 (3), “0”)
    赋值 (., 相加 (“初级记录:0分”, #换行符, #换行符, “中级记录:0分”, #换行符, #换行符, “高级记录:0分”))
.如果真结束


.窗口程序集 选项窗口程序集, , , 

.子程序 _窗口_选项_创建完毕, 空白型, , 
赋值 (.选中, 音效否)
赋值 (.选中, 动画否)
赋值 (.选中, 等于 (读配置项 (配置文件名, “set”, “自动打开”, ), “1”))
赋值 (.选中, 等于 (读配置项 (配置文件名, “set”, “自动保存”, ), “1”))

.子程序 _按钮2_被单击, 空白型, , 
销毁 ()

.子程序 _按钮1_被单击, 空白型, , 
赋值 (音效否, .选中)
写配置项 (配置文件名, “set”, “音效”, 选择 (音效否, “1”, “0”))
赋值 (动画否, .选中)
写配置项 (配置文件名, “set”, “动画”, 选择 (动画否, “1”, “0”))
写配置项 (配置文件名, “set”, “自动打开”, 选择 (.选中, “1”, “0”))
写配置项 (配置文件名, “set”, “自动保存”, 选择 (.选中, “1”, “0”))
销毁 ()


 ' 不属于任何一个程序集、类模块的函数：
