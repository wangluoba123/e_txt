 ' 文件类型：Windows模块源码

 ' 程序名称：脚本
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 638
    高度 = 416
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 常量, "“窗口坐标
屏幕坐标
单击
双击
按下
弹起
向上
向下
黑
白”", , 
.常量 符号, "“+
-
*
/
\
%
=
<
>
＋
－
×
÷
＼
％
＝
＜
＞
≥
≤
≠
≈
,
・
(
)
#”", , 
.常量 临时代码, "“#热键・F11
常量(a="sddf",b=234,c=真)
数值型(a,b,c,e) 
子程序・模拟点击(X [数值型], Y [数值型], 颜色值 [数值型])
数值型(a1,b2,c2,e1) 
文本型(A2,AA,BB,CC)
逻辑型(MM,KL)
KL=图像出现 ("1", 屏幕坐标, 646, 22, 658, 34, 10,真,返回X,返回Y)
MM=3>4
a1＝3
b2＝7
模拟点击 (屏幕坐标, 550, 98, 单击, 左键)
延时(300)
模拟点击 (屏幕坐标, 550, 598, 单击, 左键)
延时(800)
模拟点击 (屏幕坐标, 150, 398, 单击, 左键)
延时(500)
a＝a1＋(b2＋78)＋到数值(取文本长度(取文本左边("asd"＋"hgf",5))＋(12＋12))＋取文本长度("asd")
MM＝a1＋b2＞3 且 a1＋2＞3 

如果(图像出现 ("1", 屏幕坐标, 646, 22, 658, 34, 10,真,返回X,返回Y))
模拟点击 (屏幕坐标, 返回X, 返回Y, 单击, 左键)
否则()
信息框(a)
条件结束()
如果(a1＋b2＞3)
循环 (b2＞a1)  
a1＝a1＋1
信息框(a1)
循环 (b2＞e1)  
e1＝e1＋1
信息框(e1)
条件结束()
e1＝0
条件结束()
条件结束()
子程序・模拟点()
数值型(a1,b2,c2,e1) 
文本型(A2,AA,BB,CC)
逻辑型(MM,KL)
a1＝6
b2＝15
如果(a1＋b2＞3)
  循环 (b2＞a1)  
a1＝a1＋1
信息框(a1)
    循环 (b2＞e1)  
e1＝e1＋1
信息框(e1)
    条件结束()
e1＝0
  条件结束()
条件结束()”", , 
.常量 , , , 
.常量 热键, "“esc
f1
f2
f3
f4
f5
f6
f7
f8
f9
f10
f11
f12
printscreen
scrolllock
pause
`
1
2
3
4
5
6
7
8
9
0
-
=
back
tab
capslock
shift
ctrl
win
alt
space
application
enter
,
.
/
;
'
[
]
\
ins
home
pageup
del
end
pagedown
up
down
left
right
numlock
clear
num1
num2
num3
num4
num5
num6
num7
num8
num9
num0
q
w
e
r
t
y
u
i
o
p
a
s
d
f
g
h
j
k
l
z
x
c
v
b
n
m”", , 
.常量 常量2, "“数值型(a,b,e) 
子程序・模拟点击(X [数值型], Y [数值型], 颜色值 [数值型])
a ＝ 0
e  ＝  取启动时间()
循环 (a  ＜  10000)
    a  ＝  a  ＋  1
条件结束 ()
e  ＝  取启动时间()  －  e
信息框( e)”", , 
.常量 常量1, "“数值型(a,b,e) 
子程序・模拟点击(X [数值型], Y [数值型], 颜色值 [数值型])
数值型(a1,b2,c2,e1) 
文本型(c,d,BB,CC)
逻辑型(MM,KL)
循环 (a ＜ 9)
a ＝ a ＋ 1
b ＝ 0
c ＝ ""
循环 (b ＜a)
b ＝ b ＋ 1
c ＝ c ＋ " " ＋ 到文本(b) ＋ "×" ＋ 到文本(a) ＋ "=" ＋ 到文本(a×b)
条件结束 ()
d ＝ d ＋ c ＋字符 (13)
条件结束 ()
信息框 (d)”", , 
.常量 FS_小键盘数字, "96", 隐藏, 该常量是小键盘数字虚拟键码的起始值，只需在该常量上递加一个附值即可。比如小键盘上的5，转义为虚拟键码就是 #小键盘数字_FS+5；其他数字那就加其数字；要是0的话就可以省略了。
.常量 FS_小键盘星号, "106", 隐藏, 小键盘上的星号(*)键。
.常量 FS_小键盘加号, "107", 隐藏, 小键盘上的加号(+)键。
.常量 FS_小键盘减号, "109", 隐藏, 小键盘上的减号(-)键。
.常量 FS_小键盘除号, "111", 隐藏, 小键盘上的除号(/)键。
.常量 FS_小键盘句号, "110", 隐藏, 小键盘上的句号(.)键。
.常量 FS_Shift左, "160", 隐藏, 键盘左边的Shift键。
.常量 FS_Shift右, "161", 隐藏, 键盘右边的Shift键。
.常量 FS_Ctrl左, "162", 隐藏, 键盘左边的Cctrl键。
.常量 FS_Ctrl右, "163", 隐藏, 键盘右边的Cctrl键。
.常量 FS_FSAlt左, "164", 隐藏, 键盘左边的Alt键。
.常量 FS_Alt右, "165", 隐藏, 键盘右边的Alt键。
.常量 FS_Win左, "91", 隐藏, 键盘左边的Windows键。
.常量 FS_Win右, "92", 隐藏, 键盘右边的Windows键。
.常量 FS_鼠标左键, "1", 隐藏, 鼠标左键。（备注：该函数支持鼠标按钮，但是，它检查的不是物理按钮映射到的逻辑按钮的状态，而实际物理按钮的状态。例如，函数调用GetAsyncKeystate（VK_LBUTTON）总是返回物理的鼠标左按钮的状态，而不管该按钮映射为逻辑上的左按钮，可以调用GetsystemMetrics（SM_SWAPBUTON）来确定系统当前物理鼠标按钮与逻辑鼠标按钮的对应关系，当鼠标按钮被左右交换后，函数返回TRUE。）
.常量 FS_鼠标右键, "2", 隐藏, 鼠标右键。（备注：该函数支持鼠标按钮，但是，它检查的不是物理按钮映射到的逻辑按钮的状态，而实际物理按钮的状态。例如，函数调用GetAsyncKeystate（VK_LBUTTON）总是返回物理的鼠标左按钮的状态，而不管该按钮映射为逻辑上的左按钮，可以调用GetsystemMetrics（SM_SWAPBUTON）来确定系统当前物理鼠标按钮与逻辑鼠标按钮的对应关系，当鼠标按钮被左右交换后，函数返回TRUE。）
.常量 FS_鼠标中键, "4", 隐藏, 鼠标中键。


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库
 ' eCalc 306AA9E31B5940399723021A0D782077 2 0 数值计算支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库



 ' 所需要的模块
 ' 枫式热键 FS1.4 非典加强版 C:\Documents and Settings\Administrator\桌面\枫式热键 FS1.4 非典加强版.ec
 ' 斩月_图像相关模块 C:\Documents and Settings\Administrator\桌面\斩月_图像相关模块.ec


数据类型 Jsys, , 计算元素
    .成员 符号, 文本型, , , 
    .成员 值, 双精度小数型, , , 

数据类型 POINTAPI, , 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 

数据类型 错误, , 
    .成员 值, 整数型, , , 
    .成员 文本, 文本型, , , 

数据类型 元素, , 
    .成员 文本, 文本型, , , 
    .成员 参数, 字节型, , , 0,符号 1,文本 2,数值 3,真假 5,函数 6,计算 7,逻辑符 8,局部 9,全局 10,常量 11,或且
    .成员 类型, 文本型, , , 1、文本。2、数值。3、逻辑。

数据类型 函数, , 
    .成员 函数名, 文本型, , , 函数名
    .成员 返回类型, 文本型, , , 0、返回空。1、文本。2、数值。3、逻辑。
    .成员 返回值, 文本型, , , 返回的数值。
    .成员 参数, 文本型, , , 
    .成员 行, 行元素, , "1", 
    .成员 变量, 变量, , "1", 

数据类型 行元素, , 
    .成员 行信息, 文本型, , , 1、赋值。2、流程。3、命令。(2,3可以看做命令。不为命令，比为赋值，变量第二组为必须"＝")
    .成员 命令, 文本型, , , 每行第一组数据,可以是命令或变量。不能为数值,变量第二组为必须"＝"命令尾部必须为")"
    .成员 词元素, 元素, , "1", 流程类增加一个图像出现，增加一个某点颜色。
    .成员 类型, 文本型, , , 1、文本。2、数值。3、逻辑。
    .成员 起始位, 整数型, , , 
    .成员 中专位, 整数型, , , 
    .成员 结束位, 整数型, , , 

数据类型 函数信息, , 
    .成员 返回值, 文本型, , , 
    .成员 参数, 文本型, , , 
    .成员 函数名, 文本型, , , 

数据类型 变量, , 
    .成员 名, 文本型, , , 
    .成员 参数, 字节型, , , 8、局部。9、全局。10、常量。
    .成员 类型, 文本型, , , 1、文本。2、数值。3、逻辑。
    .成员 文本, 文本型, , , 

数据类型 流程压入, , 
    .成员 类型, 文本型, , , 
    .成员 位置, 整数型, , , 
    .成员 中转, 逻辑型, , , 
    .成员 结束位置, 整数型, , , 
    .成员 开始位置, 整数型, , , 
    .成员 元素, 元素, , "1", 

数据类型 流程中转, , 
    .成员 中转, 流程压入, , "1", 
    .成员 中转层, 整数型, , , 

数据类型 热键数据, 公开, 枫式热键专用的数据类型。
    .成员 触发条键, 整数型, , "1", 热键的键值，如果是多个按键组成的热键则定义多个成员然后分别填写键值。当触发条键被同时按下且互斥条键未被按下时，触发热程序。（注意：其中的状态键不能用易常量里的 #某某键状态 ，而是要直接用其键就行！比如#Ctrl键而不是#Ctrl键状态。）
    .成员 互斥条键, 整数型, , "1", 热键的键值，如果是多个按键组成的热键则定义多个成员然后分别填写键值。当互斥条键被按下时，将不会触发热程序。默认为#Ctrl键, #Shift键, #Alt键和WIN键。（注意：其中的状态键不能用易常量里的 #某某键状态 ，而是要直接用其键就行！比如#Ctrl键而不是#Ctrl键状态。）
    .成员 异步时间, 整数型, , , 热程序被按住后系统等待多长时间再触发此热程序。值为负数代表无限等待，直到放开热键。
    .成员 函数指针, 子程序指针, , , 热程序的子程序指针。（注意：热程序有两个参数，第一个参数可以为文本型或者整型，如果为文本型系统调用热程序时会传递给函数一个唯一的哈希标符，而如果为整型则系统会传递给函数一个哈希标符的内存地址。第二个参数则是热键的键状态，1代表按下热键，0代表放开热键。）
    .成员 哈希标符, 文本型, , , 此数据为 热键的哈希标志符，可以为任意文本。如果注册一个同名的哈希标符热键再绑定其热键的话，系统则会自动覆盖原来同名的热键集。并且在调用热程序时，系统会把唯一的哈希标符传递给函数！
    .成员 系统保留, 整数型, , "2", 系统内部使用，你不用理会它。

数据类型 矩形区域, 公开, 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 POINTAPI_, 公开, 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 


.DLL命令 UnhookWindowsHookEx, 整数型, "user32.dll", "UnhookWindowsHookEx", , 钩子
    .参数 钩子句柄, 整数型, , 

.DLL命令 SetWindowsHookExA, 整数型, "user32.dll", "SetWindowsHookExA", , 钩子
    .参数 钩子类型, 整数型, , 
    .参数 回调函数地址, 子程序指针, , 
    .参数 实例句柄, 整数型, , 
    .参数 线程ID, 整数型, , 

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", , 说明:获取一个应用程序或动态链接库的模块句柄
    .参数 lpModuleName, 文本型, , 如执行成功成功，则返回模块句柄。零表示失败。

.DLL命令 CallNextHookEx, 整数型, "user32.dll", "CallNextHookEx", , 钩子
    .参数 钩子句柄, 整数型, , 
    .参数 代码值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 发送系统消息, 逻辑型, "user32.dll", "PostMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息标识, 整数型, , 
    .参数 消息一, 整数型, , 
    .参数 消息二, 整数型, , 

.DLL命令 取指定点窗口句柄, 整数型, "user32.dll", "WindowFromPoint", , ,
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 取光标位置, 整数型, "user32", "GetCaretPos", , ,
    .参数 位置, POINTAPI, 传址, 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (窗口1, , 真)

.程序集 主程序集, , , 

.程序集变量 函数, 函数, , "0", 
.程序集变量 全局, 变量, , "0", 
.程序集变量 常量, 变量, , "0", 
.程序集变量 热键, 文本型, , , 
.程序集变量 键盘钩子句柄, 整数型, , , 
.程序集变量 状态, 空白型, , , 
.子程序 初始化常量, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

重定义数组 (函数, 假, 0)
重定义数组 (全局, 假, 2)
重定义数组 (常量, 假, 0)
赋值 (状态, 2)
连续赋值 (“数值型”, 全局 [1].类型, 全局 [2].类型)
赋值 (全局 [1].名, “返回x”)
赋值 (全局 [2].名, “返回y”)
连续赋值 (9, 全局 [1].参数, 全局 [2].参数)

.子程序 函数元素, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 函数信息, 函数信息, , 

.局部变量 X, 整数型, , , 
.局部变量 A, 整数型, , , 

赋值 (X, 取数组成员数 (函数))
.计次循环首 (X, A)
    .如果真 (等于 (函数 [A], 函数名, 文本))
        赋值 (函数信息.函数名, 函数 [A], 函数名)
        赋值 (函数信息.参数, 函数 [A], 参数)
        赋值 (函数信息.返回值, 函数 [A], 返回类型)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 取变量值, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 变量, 变量, 数组, 
.参数 类型, 文本型, , 
.参数 参数, 整数型, , 
.参数 取回, 文本型, , 

.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 

赋值 (X, 取数组成员数 (变量))
.计次循环首 (X, I)
    .如果真 (等于 (变量 [I], 名, 文本))
        .判断开始 (等于 (变量 [I], 类型, “文本型”))
            赋值 (参数, 8)
            赋值 (类型, “文本型”)
            赋值 (取回, 变量 [I], 文本)
        .判断 (等于 (变量 [I], 类型, “数值型”))
            赋值 (参数, 8)
            赋值 (类型, “数值型”)
            赋值 (取回, 变量 [I], 文本)
        .默认
            赋值 (参数, 8)
            赋值 (类型, “逻辑型”)
            赋值 (取回, 变量 [I], 文本)
        .判断结束
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
赋值 (X, 取数组成员数 (全局))
.计次循环首 (X, I)
    .如果真 (等于 (全局 [I], 名, 文本))
        .判断开始 (等于 (全局 [I], 类型, “文本型”))
            赋值 (参数, 9)
            赋值 (类型, “文本型”)
            赋值 (取回, 全局 [I], 文本)
        .判断 (等于 (全局 [I], 类型, “数值型”))
            赋值 (参数, 9)
            赋值 (类型, “数值型”)
            赋值 (取回, 全局 [I], 文本)
        .默认
            赋值 (参数, 9)
            赋值 (类型, “逻辑型”)
            赋值 (取回, 全局 [I], 文本)
        .判断结束
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
赋值 (X, 取数组成员数 (常量))
.计次循环首 (X, I)
    .如果真 (等于 (常量 [I], 名, 文本))
        .判断开始 (等于 (常量 [I], 类型, “文本型”))
            赋值 (参数, 10)
            赋值 (类型, “文本型”)
            赋值 (取回, 常量 [I], 文本)
        .判断 (等于 (常量 [I], 类型, “数值型”))
            赋值 (参数, 10)
            赋值 (类型, “数值型”)
            赋值 (取回, 常量 [I], 文本)
        .默认
            赋值 (参数, 10)
            赋值 (类型, “逻辑型”)
            赋值 (取回, 常量 [I], 文本)
        .判断结束
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 变量赋值, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 变量, 变量, 数组, 
.参数 值, 文本型, , 

.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 

赋值 (X, 取数组成员数 (变量))
.计次循环首 (X, I)
    .如果真 (等于 (变量 [I], 名, 文本))
        赋值 (变量 [I], 文本, 值)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
赋值 (X, 取数组成员数 (全局))
.计次循环首 (X, I)
    .如果真 (等于 (全局 [I], 名, 文本))
        赋值 (全局 [I], 文本, 值)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 变量元素, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 变量, 变量, 数组, 
.参数 参数, 字节型, 参考, 
.参数 类型, 文本型, 参考, 

.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 

赋值 (X, 取数组成员数 (变量))
.计次循环首 (X, I)
    .如果真 (等于 (变量 [I], 名, 文本))
        赋值 (类型, 变量 [I], 类型)
        赋值 (参数, 变量 [I], 参数)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
赋值 (I, 0)
赋值 (X, 取数组成员数 (全局))
.计次循环首 (X, I)
    .如果真 (等于 (全局 [I], 名, 文本))
        赋值 (类型, 全局 [I], 类型)
        赋值 (参数, 全局 [I], 参数)
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 调试脚本, 文本型, 公开, 
.参数 要调试的脚本, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 字, 文本型, , "0", 
.局部变量 词, 行元素, , , 
.局部变量 行文本, 文本型, , "0", 
.局部变量 异常, 文本型, , , 
.局部变量 总行数, 空白型, , , 
.局部变量 H, 空白型, , , 
.局部变量 X, 空白型, , , 
.局部变量 临时, 文本型, , , 
.局部变量 段, 空白型, , , 

初始化常量 ()
赋值 (行文本, 分割文本 (要调试的脚本, #换行符, ))
赋值 (总行数, 取数组成员数 (行文本))
.判断循环首 (大于 (总行数, H))
    赋值 (H, 相加 (H, 1))
    赋值 (异常, 相加 (“  ”, 到文本 (H), “  行 :  ”))
    赋值 (临时, 到小写 (删全部空 (行文本 [H])))
    .如果真 (等于 (临时, “”))
        到循环尾 ()
    .如果真结束
    .判断开始 (等于 (取文本左边 (临时, 8), “子程序・”))
        赋值 (错误, 处理函数组 (临时, 词))
        .判断开始 (等于 (错误.值, -1))
            到循环尾 ()
        .判断 (等于 (错误.值, -2))
            赋值 (异常, 相加 (异常, “#A1-101 , 括号不匹配。 缺少‘”, 错误.文本, “’括号。”))
            返回 (异常)
        .判断 (小于 (错误.值, 5))
            赋值 (异常, 相加 (异常, “#A1-102 , 函数定义不完整。”))
            返回 (异常)
        .判断 (大于 (错误.值, 5))
            赋值 (错误, 参数提取 (词.词元素, 函数))
            .判断开始 (等于 (错误.值, 1))
                赋值 (异常, 相加 (异常, “#A1-111 , 函数名‘”, 错误.文本, “’定义失败，不能定义为数值、文本或常量。”))
                返回 (异常)
            .判断 (等于 (错误.值, 2))
                赋值 (异常, 相加 (异常, “#A1-112 , 函数参数类型[”, 错误.文本, “]定义失败，正确为[数值型]或[文本型]或[逻辑型]。”))
                返回 (异常)
            .判断 (等于 (错误.值, 3))
                赋值 (异常, 相加 (异常, “#A1-113 , 函数定义错误。格式错误或符号运用不正确。”))
                返回 (异常)
            .判断 (等于 (错误.值, 5))
                赋值 (异常, 相加 (异常, “#A1-115 , 函数定义参数变量‘”, 错误.文本, “’重名。”))
                返回 (异常)
            .默认
                
            .判断结束
            
        .判断 (或者 (不等于 (词.词元素 [4].文本, “(”), 不等于 (词.词元素 [5].文本, “)”)))
            赋值 (异常, 相加 (异常, “#A1-103 , 函数定义错误。格式错误或符号运用不正确。”))
            返回 (异常)
        .判断 (不等于 (词.词元素 [3].参数, 5))
            赋值 (异常, 相加 (异常, “#A1-121 , 函数名‘”, 错误.文本, “’定义失败，不能定义为数值、文本或常量。”))
            返回 (异常)
        .默认
            赋值 (X, 相加 (取数组成员数 (函数), 1))
            重定义数组 (函数, 真, X)
            赋值 (函数 [X], 函数名, 词.词元素 [3].文本)
        .判断结束
        
    .判断 (或者 (等于 (取文本左边 (临时, 7), “数值型(”), 等于 (取文本左边 (临时, 7), “文本型(”), 等于 (取文本左边 (临时, 7), “逻辑型(”)))
        赋值 (错误, 处理函数组 (临时, 词))
        .判断开始 (等于 (错误.值, -1))
            到循环尾 ()
        .判断 (等于 (错误.值, -2))
            赋值 (异常, 相加 (异常, “#A1-107 , 括号不匹配。 缺少‘”, 错误.文本, “’括号。”))
            返回 (异常)
        .默认
            
        .判断结束
        赋值 (X, 取数组成员数 (函数))
        赋值 (临时, 取文本左边 (临时, 6))
        .判断开始 (等于 (X, 0))
            赋值 (错误, 变量提取 (词.词元素, 全局, 9, 临时))
        .默认
            赋值 (错误, 变量提取 (词.词元素, 函数 [X], 变量, 8, 临时))
        .判断结束
        .判断开始 (等于 (错误.值, 1))
            赋值 (异常, 相加 (异常, “#A1-122 , 变量‘”, 错误.文本, “’重命名。”))
            返回 (异常)
        .判断 (等于 (错误.值, 3))
            赋值 (异常, 相加 (异常, “#A1-123 , 定义变量‘”, 错误.文本, “’类型不正确。”))
            返回 (异常)
        .判断 (等于 (错误.值, 2))
            赋值 (异常, 相加 (异常, “#A1-125 , 定义变量‘”, 错误.文本, “’时提供了过多的参数。”))
            返回 (异常)
        .默认
            
        .判断结束
        
    .判断 (等于 (取文本左边 (临时, 5), “常量(”))
        赋值 (错误, 处理函数组 (临时, 词))
        .判断开始 (等于 (错误.值, -1))
            到循环尾 ()
        .判断 (等于 (错误.值, -2))
            赋值 (异常, 相加 (异常, “#A1-108 , 括号不匹配。 缺少‘”, 错误.文本, “’括号。”))
            返回 (异常)
        .默认
            
        .判断结束
        赋值 (错误, 常量提取 (词.词元素, 常量))
        .判断开始 (等于 (错误.值, 1))
            赋值 (异常, 相加 (异常, “#A1-126 , 常量‘”, 错误.文本, “’赋值格式错误。”))
            返回 (异常)
        .判断 (等于 (错误.值, 2))
            赋值 (异常, 相加 (异常, “#A1-127 , 常量‘”, 错误.文本, “’赋值类型错误。正确为数值,文本或逻辑。”))
            返回 (异常)
        .判断 (等于 (错误.值, 3))
            赋值 (异常, 相加 (异常, “#A1-128 , 常量‘”, 错误.文本, “’重命名。”))
            返回 (异常)
        .默认
            
        .判断结束
        
    .判断 (等于 (取文本左边 (临时, 7), “#热键・”))
        赋值 (错误, 处理函数组 (临时, 词))
        .判断开始 (等于 (错误.值, -1))
            到循环尾 ()
        .判断 (等于 (错误.值, -2))
            赋值 (异常, 相加 (异常, “#A1-109 , 括号不匹配。 缺少‘”, 错误.文本, “’括号。”))
            返回 (异常)
        .判断 (大于 (错误.值, 2))
            .判断开始 (不等于 (寻找文本 (#热键, 词.词元素 [3].文本, , 假), -1))
                赋值 (热键, 词.词元素 [3].文本)
            .默认
                赋值 (热键, “f11”)
            .判断结束
            
        .默认
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
.如果真 (等于 (热键, “”))
    赋值 (热键, “f11”)
.如果真结束
赋值 (H, 0)
.判断循环首 (大于 (总行数, H))
    赋值 (H, 相加 (H, 1))
    赋值 (异常, 相加 (“  ”, 到文本 (H), “  行 :  ”))
    赋值 (临时, 到小写 (删首尾空 (行文本 [H])))
    .如果真 (等于 (临时, “”))
        到循环尾 ()
    .如果真结束
    赋值 (错误, 处理函数组 (临时, 词))
    .判断开始 (等于 (错误.值, -1))
        到循环尾 ()
    .判断 (等于 (错误.值, -2))
        赋值 (异常, 相加 (异常, “#B-1-01 , 括号不匹配。 缺少‘”, 错误.文本, “’括号。”))
        返回 (异常)
    .判断 (等于 (错误.值, 1))
        赋值 (异常, 相加 (异常, “#B-1-02 , 找不到指定的命令或子程序‘”, 错误.文本, “’。”))
        返回 (异常)
    .判断 (等于 (错误.值, 2))
        .判断开始 (或者 (等于 (词.词元素 [2].参数, 6), 等于 (词.词元素 [2].参数, 7)))
            赋值 (异常, 相加 (异常, “#B-1-03 , 运算符无右侧运算数据。”))
            返回 (异常)
        .默认
            赋值 (异常, 相加 (异常, “#B-1-05 , 找不到指定的命令或子程序‘”, 词.词元素 [1].文本, 词.词元素 [2].文本, “’。”))
            返回 (异常)
        .判断结束
        
    .默认
        
    .判断结束
    赋值 (错误, 分析函数 (词.词元素, 函数, 段))
    .判断开始 (等于 (错误.值, -1))
        到循环尾 ()
    .判断 (等于 (错误.值, 1))
        赋值 (异常, 相加 (异常, “#B-2-01 , 函数过程无定义。”))
        返回 (异常)
    .判断 (等于 (错误.值, 2))
        赋值 (异常, 相加 (异常, “#B-2-02 , 命令‘”, 错误.文本, “’号不能直接在语句首部使用”))
        返回 (异常)
    .判断 (等于 (错误.值, 3))
        赋值 (异常, 相加 (异常, “#B-2-03 , 找不到指定的命令或子程序‘”, 错误.文本, “’。”))
        返回 (异常)
    .判断 (等于 (错误.值, 5))
        赋值 (异常, 相加 (异常, “#B-2-05 , 找不到指定的变量或常量‘”, 错误.文本, “’。”))
        返回 (异常)
    .判断 (等于 (错误.值, 6))
        赋值 (异常, 相加 (异常, “#B-2-06 , 文本不能进行‘”, 错误.文本, “’法计算。”))
        返回 (异常)
    .判断 (等于 (错误.值, 7))
        赋值 (异常, 相加 (异常, “#B-2-07 , ”, 错误.文本, “不能参与计算。”))
        返回 (异常)
    .判断 (等于 (错误.值, 8))
        赋值 (异常, 相加 (异常, “#B-2-08 , 不能将‘”, 错误.文本, “’转换成逻辑型数据。”))
        返回 (异常)
    .判断 (等于 (错误.值, 9))
        赋值 (异常, 相加 (异常, “#B-2-09 , 不能将逻辑型数据进行赋值。”))
        返回 (异常)
    .判断 (等于 (错误.值, 10))
        赋值 (异常, 相加 (异常, “#B-2-10 , 命令‘”, 错误.文本, “’无返回值。”))
        返回 (异常)
    .判断 (等于 (错误.值, 11))
        赋值 (异常, 相加 (异常, “#B-3-01 , 命令‘”, 错误.文本, “’参数不能为空。”))
        返回 (异常)
    .判断 (等于 (错误.值, 12))
        赋值 (异常, 相加 (异常, “#B-3-02 , 为命令‘”, 错误.文本, “’提供了过少的参数。”))
        返回 (异常)
    .判断 (等于 (错误.值, 15))
        赋值 (异常, 相加 (异常, “#B-3-05 , 为命令‘”, 错误.文本, “’提供了过多的参数。”))
        返回 (异常)
    .判断 (等于 (错误.值, 16))
        赋值 (异常, 相加 (异常, “#B-3-06 , 命令‘”, 错误.文本, “’缺少起始流程如果或循环命令。”))
        返回 (异常)
    .判断 (等于 (错误.值, 17))
        赋值 (异常, 相加 (异常, “#B-3-07 , 命令‘”, 错误.文本, “’只能以‘)’括号结尾。”))
        返回 (异常)
    .判断 (等于 (错误.值, 18))
        赋值 (异常, 相加 (异常, “#B-3-08 , 流程提供了过多‘”, 错误.文本, “’命令。”))
        返回 (异常)
    .判断 (等于 (错误.值, 19))
        赋值 (异常, 相加 (异常, “#B-3-09 , 流程不支持‘”, 错误.文本, “’命令。”))
        返回 (异常)
    .判断 (等于 (错误.值, 20))
        赋值 (异常, 相加 (异常, “#B-3-10 , 流程不支持‘”, 错误.文本, “’命令。”))
        返回 (异常)
    .判断 (等于 (错误.值, 21))
        赋值 (异常, 相加 (异常, “#B-5-01 , 计次循环次数必须≥1。”))
        返回 (异常)
    .默认
        
    .判断结束
    
.判断循环尾 ()
子程序1 ()
返回 (“调试成功”)

.子程序 执行脚本, 空白型, , 
.参数 段, 整数型, , 

.局部变量 行, 整数型, , , 
.局部变量 数, 整数型, , , 
.局部变量 变量, 变量, , "0", 
.局部变量 计数, 空白型, , , 
.局部变量 计数开始, 逻辑型, , , 
.局部变量 元素, 元素, , "0", 
.局部变量 类型, 文本型, , , 
.局部变量 中转, 逻辑型, , , 
.局部变量 位置, 空白型, , , 
.局部变量 位置A, 空白型, , , 
.局部变量 取回, 文本型, , , 

赋值 (行, 取数组成员数 (函数 [段], 行))
赋值 (变量, 函数 [段], 变量)
.判断循环首 (大于 (行, 数))
    赋值 (数, 相加 (数, 1))
    .如果真 (计数开始)
        赋值 (计数, 相加 (计数, 1))
    .如果真结束
    .判断循环首 (等于 (状态, 1))
        处理事件 ()
    .判断循环尾 ()
    .如果真 (等于 (状态, 2))
        返回 ()
    .如果真结束
    .判断开始 (等于 (函数 [段], 行 [数], 命令, “条件结束”))
        压入流程 (“取出”, , 类型, , 位置, 位置A)
        .判断开始 (等于 (类型, “循环”))
            .判断开始 (计数开始)
                .判断开始 (大于或等于 (到数值 (函数 [段], 行 [位置], 词元素 [1].文本), 计数))
                    赋值 (数, 位置)
                    到循环尾 ()
                .默认
                    压入流程 (“压出”)
                .判断结束
                
            .判断 (或者 (等于 (取数组成员数 (函数 [段], 行 [位置], 词元素), 3), 等于 (取数组成员数 (函数 [段], 行 [位置], 词元素), 5)))
                .判断开始 (等于 (取回逻辑数据 (函数 [段], 行 [位置], 词元素, 变量), “真”))
                    赋值 (数, 位置)
                    到循环尾 ()
                .默认
                    压入流程 (“压出”)
                .判断结束
                
            .默认
                .判断开始 (等于 (执行取逻辑值 (函数 [段], 行 [位置], 词元素, 变量), 假))
                    赋值 (数, 位置)
                .默认
                    压入流程 (“压出”)
                .判断结束
                
                
            .判断结束
            
            
        .默认
            压入流程 (“压出”)
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “循环”))
        压入流程 (“压入”, 函数 [段], 行 [数], 词元素, “循环”, , 函数 [段], 行 [数], 起始位, 函数 [段], 行 [数], 结束位)
        .判断开始 (等于 (取数组成员数 (函数 [段], 行 [数], 词元素), 1))
            赋值 (计数开始, 真)
            到循环尾 ()
        .判断 (或者 (等于 (取数组成员数 (函数 [段], 行 [数], 词元素), 3), 等于 (取数组成员数 (函数 [段], 行 [数], 词元素), 5)))
            赋值 (元素, 函数 [段], 行 [数], 词元素)
            .判断开始 (执行去除括号 (元素, 变量, 函数 [段], 行 [数], 类型))
                .如果真 (等于 (元素 [1].文本, “假”))
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .如果真结束
                
            .默认
                .如果真 (等于 (取回逻辑数据 (元素, 变量), “假”))
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .如果真结束
                
            .判断结束
            
        .默认
            .判断开始 (执行去除括号 (元素, 变量, 函数 [段], 行 [数], 类型))
                .如果真 (等于 (元素 [1].文本, “假”))
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .如果真结束
                
            .默认
                .如果真 (等于 (执行取逻辑值 (元素, 变量), 假))
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .如果真结束
                
            .判断结束
            
            
            
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “到循环尾”))
        压入流程 (“取出”, , , , 位置, 位置A)
        .判断开始 (执行取逻辑值 (函数 [段], 行 [位置], 词元素, 变量))
            赋值 (数, 位置)
        .默认
            压入流程 (“压出”)
            赋值 (数, 位置A)
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “跳出循环”))
        压入流程 (“取出”, , , , , 位置)
        压入流程 (“压出”)
        赋值 (数, 位置)
    .判断 (等于 (函数 [段], 行 [数], 命令, “图像出现”))
        压入流程 (“压入”, , “图像出现”)
        .判断开始 (等于 (执行命令 (函数 [段], 行 [数], 词元素, 变量), “假”))
            .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
            .默认
                压入流程 (“压出”)
                赋值 (数, 函数 [段], 行 [数], 结束位)
            .判断结束
            
        .默认
            压入流程 (“压进”, , , 真)
        .判断结束
        
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “某点颜色”))
        压入流程 (“压入”, , “某点颜色”)
        .判断开始 (等于 (执行命令 (函数 [段], 行 [数], 词元素, 变量), “假”))
            .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
            .默认
                压入流程 (“压出”)
                赋值 (数, 函数 [段], 行 [数], 结束位)
            .判断结束
            
        .默认
            压入流程 (“压进”, , , 真)
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “如果”))
        压入流程 (“压入”, , “如果”)
        赋值 (元素, 函数 [段], 行 [数], 词元素)
        .判断开始 (执行去除括号 (元素, 变量, 函数 [段], 行 [数], 类型))
            .判断开始 (等于 (元素 [1].文本, “假”))
                .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                    赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
                .默认
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .判断结束
                
            .默认
                压入流程 (“压进”, , , 真)
            .判断结束
            
        .默认
            .判断开始 (等于 (执行取逻辑值 (元素, 变量), 假))
                .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                    赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
                .默认
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .判断结束
                
            .默认
                压入流程 (“压进”, , , 真)
            .判断结束
            
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “否则如果”))
        压入流程 (“取出”, , , 中转)
        赋值 (元素, 函数 [段], 行 [数], 词元素)
        .判断开始 (中转)
            压入流程 (“压出”)
            赋值 (数, 函数 [段], 行 [数], 结束位)
        .判断 (执行去除括号 (元素, 变量, 函数 [段], 行 [数], 类型))
            .判断开始 (等于 (元素 [1].文本, “假”))
                .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                    赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
                .默认
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .判断结束
                
            .默认
                压入流程 (“压进”, , , 真)
            .判断结束
            
        .默认
            .判断开始 (等于 (执行取逻辑值 (元素, 变量), 假))
                .判断开始 (不等于 (函数 [段], 行 [数], 中专位, 0))
                    赋值 (数, 相减 (函数 [段], 行 [数], 中专位, 1))
                .默认
                    压入流程 (“压出”)
                    赋值 (数, 函数 [段], 行 [数], 结束位)
                .判断结束
                
            .默认
                压入流程 (“压进”, , , 真)
            .判断结束
            
        .判断结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “否则”))
        压入流程 (“取出”, , , 中转)
        .如果真 (中转)
            压入流程 (“压出”)
            赋值 (数, 函数 [段], 行 [数], 结束位)
        .如果真结束
        
    .判断 (等于 (函数 [段], 行 [数], 命令, “返回”))
        .判断开始 (等于 (函数 [段], 返回类型, “数值型”))
            取回数据 (函数 [段], 行 [数], 词元素, 变量, 函数 [段], 返回值, “数值型”)
        .判断 (等于 (函数 [段], 返回类型, “文本型”))
            取回数据 (函数 [段], 行 [数], 词元素, 变量, 函数 [段], 返回值, “文本型”)
        .判断 (等于 (函数 [段], 返回类型, “逻辑型”))
            取回数据 (函数 [段], 行 [数], 词元素, 变量, 函数 [段], 返回值, “逻辑型”)
        .默认
            
        .判断结束
        
        返回 ()
    .判断 (等于 (函数 [段], 行 [数], 行信息, “赋值”))
        赋值 (元素, 函数 [段], 行 [数], 词元素)
        执行去除括号 (元素, 变量, 函数 [段], 行 [数], 类型)
        取回数据 (元素, 变量, 取回, 函数 [段], 行 [数], 类型)
        变量赋值 (函数 [段], 行 [数], 命令, 变量, 取回)
    .判断 (等于 (函数 [段], 行 [数], 行信息, “命令”))
        执行命令 (函数 [段], 行 [数], 词元素, 变量)
    .默认
        
    .判断结束
     ' 处理事件 ()
.判断循环尾 ()



.子程序 程序集处理, 文本型, , 
.参数 参数, 文本型, 数组, 
.参数 函数名, 文本型, , 

.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 A, 空白型, , , 

赋值 (X, 取数组成员数 (函数))
.计次循环首 (X, I)
    .如果真 (等于 (函数 [I], 函数名, 函数名))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
赋值 (X, 取数组成员数 (参数))
.计次循环首 (X, A)
    变量赋值 (函数 [I], 变量 [A], 名, 函数 [I], 变量, 参数 [A])
.计次循环尾 ()
执行脚本 (I)
返回 (函数 [I], 返回值)

.子程序 脚本执行, 空白型, , 
赋值 (状态, 0)
.如果真 (小于 (取数组成员数 (函数), 1))
    信息框 (“请调试成功脚本，并包含至少一个子程序。”, 0, )
    返回 ()
.如果真结束
执行脚本 (1)

.子程序 执行, 空白型, , 
.参数 哈希标符, 空白型, , 
.参数 键状态, 空白型, , 

.如果真 (等于 (键状态, 1))
    .判断开始 (等于 (状态, 2))
        赋值 (状态, 0)
        脚本执行 ()
        赋值 (状态, 2)
    .默认
        赋值 (状态, 2)
    .判断结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束


.子程序 子程序1, 空白型, , 
.局部变量 热键集, 热键数据, , , 

重定义数组 (热键集.触发条键, 假, 1)
赋值 (热键集.触发条键 [1], 取键值 (热键))
赋值 (热键集.哈希标符, “NB”)
赋值 (热键集.函数指针, &执行)
赋值 (热键集.异步时间, -1)
绑定热键 (热键集)
监视热键 (0)


.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _窗口1_创建完毕, 空白型, , 
输出调试文本 (相减 (相加 (11, 2), 相除 (相乘 (3, 4), 5)))
赋值 (.内容, #常量1)

.子程序 _脚本调试_被单击, 空白型, , 
.局部变量 A, 文本型, , , 

赋值 (窗口1., “”)
赋值 (A, 调试脚本 (.内容))
输出调试文本 (A)
赋值 (窗口1., A)

.子程序 _脚本执行_被单击, 空白型, , 
脚本执行 ()

.程序集 工具, , , 

.子程序 计算, 双精度小数型, , 
.参数 WB, 文本型, , 

.局部变量 信息, Jsys, , "0", 
.局部变量 D, 文本型, , "1", 
.局部变量 匿名局部变量_35, 空白型, , , 
.局部变量 A, 字节集, , , 表达式字节集
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 H, 空白型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 Y, 逻辑型, , , 
.局部变量 交换符号, 逻辑型, , , 
.局部变量 交换位置, 整数型, , , 

赋值 (A, 到字节集 (WB))
赋值 (X, 取字节集长度 (A))
赋值 (H, 1)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (并且 (小于 (A [I], 58), 大于 (A [I], 47)))
        赋值 (D [H], 相加 (D [H], 字符 (A [I])))
    .默认
        
        .判断开始 (等于 (D [H], “”))
            赋值 (D [H], 相加 (D [H], 字符 (A [I])))
        .默认
            赋值 (H, 相加 (H, 2))
            重定义数组 (D, 真, H)
            赋值 (D [相减 (H, 1)], 字符 (A [I]))
        .判断结束
        
    .判断结束
    
.判断循环尾 ()
重定义数组 (信息, 假, 相除 (相加 (H, 1), 2))
赋值 (I, 0)
赋值 (X, 1)
.判断循环首 (大于 (H, I))
    赋值 (I, 相加 (I, 1))
    赋值 (Y, 取反 (Y))
    .判断开始 (Y)
        赋值 (信息 [X], 值, 到数值 (D [I]))
        赋值 (X, 相加 (X, 1))
    .默认
        赋值 (信息 [X], 符号, D [I])
    .判断结束
    
.判断循环尾 ()
赋值 (I, 1)
赋值 (X, 取数组成员数 (信息))
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (并且 (等于 (信息 [I], 符号, “/”), 等于 (交换符号, 假)))
        赋值 (交换符号, 真)
        赋值 (交换位置, I)
    .判断 (或者 (等于 (信息 [I], 符号, “+”), 等于 (信息 [I], 符号, “-”), 等于 (信息 [I], 符号, “\”), 等于 (信息 [I], 符号, “%”)))
        赋值 (交换符号, 假)
    .判断 (等于 (信息 [I], 符号, “*”))
        .判断开始 (交换符号)
            赋值 (信息 [相减 (交换位置, 1)].值, 相乘 (信息 [相减 (交换位置, 1)].值, 信息 [I], 值))
            .如果真 (大于 (相减 (X, I), 1))
                删除成员 (信息, I, 1)
            .如果真结束
            赋值 (X, 相减 (X, 1))
            赋值 (I, 相减 (交换位置, 1))
            赋值 (交换符号, 假)
        .默认
            赋值 (信息 [相减 (I, 1)].值, 相乘 (信息 [相减 (I, 1)].值, 信息 [I], 值))
            .如果真 (大于 (相减 (X, I), 1))
                删除成员 (信息, I, 1)
            .如果真结束
            赋值 (X, 相减 (X, 1))
            赋值 (I, 相减 (I, 1))
        .判断结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
赋值 (I, 1)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .如果真 (等于 (信息 [I], 符号, “/”))
        赋值 (信息 [相减 (I, 1)].值, 相除 (信息 [相减 (I, 1)].值, 信息 [I], 值))
        .如果真 (大于 (相减 (X, I), 1))
            删除成员 (信息, I, 1)
        .如果真结束
        赋值 (X, 相减 (X, 1))
        赋值 (I, 相减 (I, 1))
    .如果真结束
    
.判断循环尾 ()
赋值 (I, 1)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .如果真 (等于 (信息 [I], 符号, “\”))
        赋值 (信息 [相减 (I, 1)].值, 整除 (信息 [相减 (I, 1)].值, 信息 [I], 值))
        .如果真 (大于 (相减 (X, I), 1))
            删除成员 (信息, I, 1)
        .如果真结束
        赋值 (X, 相减 (X, 1))
        赋值 (I, 相减 (I, 1))
    .如果真结束
    
.判断循环尾 ()
赋值 (I, 1)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .如果真 (等于 (信息 [I], 符号, “%”))
        .判断开始 (等于 (信息 [I], 值, 0))
            .如果真 (大于 (相减 (X, I), 1))
                删除成员 (信息, I, 1)
            .如果真结束
            赋值 (X, 相减 (X, 1))
            赋值 (I, 相减 (I, 1))
        .默认
            赋值 (信息 [相减 (I, 1)].值, 求余数 (信息 [相减 (I, 1)].值, 信息 [I], 值))
            .如果真 (大于 (相减 (X, I), 1))
                删除成员 (信息, I, 1)
            .如果真结束
            赋值 (X, 相减 (X, 1))
            赋值 (I, 相减 (I, 1))
        .判断结束
        
    .如果真结束
    
.判断循环尾 ()
赋值 (I, 1)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (等于 (信息 [I], 符号, “+”))
        赋值 (信息 [相减 (I, 1)].值, 相加 (信息 [相减 (I, 1)].值, 信息 [I], 值))
        删除成员 (信息, I, 1)
        赋值 (X, 相减 (X, 1))
        赋值 (I, 相减 (I, 1))
    .判断 (等于 (信息 [I], 符号, “-”))
        赋值 (信息 [相减 (I, 1)].值, 相减 (信息 [相减 (I, 1)].值, 信息 [I], 值))
        删除成员 (信息, I, 1)
        赋值 (X, 相减 (X, 1))
        赋值 (I, 相减 (I, 1))
    .默认
        
    .判断结束
    
.判断循环尾 ()
返回 (信息 [1].值)


.子程序 分割字, 整数型, , 
.参数 行文本, 文本型, , 
.参数 临时数据, 文本型, 数组, 

.局部变量 临时, 字节集, , , 
.局部变量 K, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 N, 整数型, , , 

赋值 (临时, 到字节集 (行文本))
赋值 (K, 取字节集长度 (临时))
重定义数组 (临时数据, 真, K)
赋值 (I, 1)
.判断循环首 (大于或等于 (K, I))
    赋值 (N, 相加 (N, 1))
    .判断开始 (大于 (临时 [I], 127))
        赋值 (临时数据 [N], 相加 (字符 (临时 [I]), 字符 (临时 [相加 (I, 1)])))
        赋值 (I, 相加 (I, 2))
    .默认
        赋值 (临时数据 [N], 字符 (临时 [I]))
        赋值 (I, 相加 (I, 1))
    .判断结束
    
.判断循环尾 ()
重定义数组 (临时数据, 真, N)
返回 (N)

.子程序 词组元素, 错误, , 
.参数 K, 整数型, , 
.参数 字元素, 文本型, 数组, 
.参数 元素, 行元素, , 

.局部变量 I, 空白型, , , 
.局部变量 X, 空白型, , , 
.局部变量 文本串, 逻辑型, , , 
.局部变量 文本串文本, 文本型, , , 
.局部变量 临时, 文本型, , , 
.局部变量 不为数值, 逻辑型, , , 
.局部变量 短语, 逻辑型, , , 
.局部变量 开始注释, 逻辑型, , , 
.局部变量 括号, 整数型, , , 
.局部变量 层, 空白型, , , 
.局部变量 参数, 空白型, , , 
.局部变量 词组元素, 元素, , "0", 
.局部变量 或且, 逻辑型, , , 
.局部变量 错误, 错误, , , 

.判断循环首 (大于 (K, I))
    赋值 (I, 相加 (I, 1))
    赋值 (X, 相加 (X, 1))
    赋值 (临时, 字元素 [I])
    .如果真 (等于 (临时, #引号))
        赋值 (文本串, 取反 (文本串))
        .如果真 (等于 (文本串, 假))
            重定义数组 (词组元素, 真, X)
            赋值 (文本串文本, 相加 (文本串文本, 临时))
            赋值 (文本串文本, 子文本替换 (文本串文本, #引号, , , , 真))
            赋值 (词组元素 [X], 文本, 文本串文本)
            赋值 (词组元素 [X], 参数, 1)
            赋值 (文本串文本, “”)
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .判断开始 (并且 (等于 (文本串, 假), 等于 (临时, “'”)))
        .如果真 (等于 (X, 1))
            赋值 (错误.值, -1)
            返回 (错误)
        .如果真结束
        赋值 (错误.值, 相减 (X, 1))
        返回 (错误)
    .判断 (文本串)
        赋值 (文本串文本, 相加 (文本串文本, 临时))
        赋值 (X, 相减 (X, 1))
    .判断 (等于 (临时, “ ”))
        赋值 (X, 相减 (X, 1))
    .判断 (等于 (临时, “(”))
        .如果真 (短语)
            赋值 (X, 相加 (X, 1))
            连续赋值 (假, 短语, 不为数值)
        .如果真结束
        赋值 (括号, 相加 (括号, 1))
        赋值 (层, 相加 (层, 1))
        重定义数组 (词组元素, 真, X)
        赋值 (词组元素 [X], 文本, 临时)
    .判断 (等于 (临时, “)”))
        .如果真 (短语)
            赋值 (X, 相加 (X, 1))
            连续赋值 (假, 短语, 不为数值)
        .如果真结束
        赋值 (括号, 相减 (括号, 1))
        .如果真 (小于 (括号, 0))
            赋值 (错误.文本, “(”)
            赋值 (错误.值, -2)
            返回 (错误)
        .如果真结束
        重定义数组 (词组元素, 真, X)
        赋值 (词组元素 [X], 文本, 临时)
    .判断 (计算与类型 (临时, 参数))
        .如果真 (短语)
            赋值 (X, 相加 (X, 1))
            连续赋值 (假, 短语, 不为数值)
        .如果真结束
        重定义数组 (词组元素, 真, X)
        赋值 (词组元素 [X], 文本, 临时)
        赋值 (词组元素 [X], 参数, 参数)
    .判断 (等于 (临时, “,”))
        .如果真 (短语)
            赋值 (X, 相加 (X, 1))
            连续赋值 (假, 短语, 不为数值)
        .如果真结束
        重定义数组 (词组元素, 真, X)
        赋值 (词组元素 [X], 文本, 临时)
    .判断 (或者 (等于 (临时, “或”), 等于 (临时, “且”)))
        .如果真 (短语)
            赋值 (X, 相加 (X, 1))
            连续赋值 (假, 短语, 不为数值)
        .如果真结束
        重定义数组 (词组元素, 真, X)
        赋值 (词组元素 [X], 文本, 临时)
        赋值 (词组元素 [X], 参数, 11)
    .默认
        赋值 (短语, 真)
        .如果真 (不等于 (取数组成员数 (词组元素), X))
            重定义数组 (词组元素, 真, X)
        .如果真结束
        赋值 (词组元素 [X], 文本, 相加 (词组元素 [X], 文本, 临时))
        .判断开始 (或者 (并且 (小于 (取代码 (临时, ), 58), 大于 (取代码 (临时, ), 47)), 等于 (临时, “.”)))
            .判断开始 (等于 (不为数值, 假))
                赋值 (词组元素 [X], 参数, 2)
            .默认
                赋值 (词组元素 [X], 参数, 5)
            .判断结束
            
        .默认
            赋值 (词组元素 [X], 参数, 5)
            赋值 (不为数值, 真)
        .判断结束
        .如果真 (并且 (大于 (X, 1), 等于 (词组元素 [相减 (X, 1)].文本, “#”)))
            赋值 (词组元素 [相减 (X, 1)].文本, 相加 (“#”, 词组元素 [X], 文本))
            删除成员 (词组元素, X, 1)
            赋值 (X, 相减 (X, 1))
        .如果真结束
        .判断开始 (或者 (等于 (词组元素 [X], 文本, “窗口坐标”), 等于 (词组元素 [X], 文本, “屏幕坐标”), 等于 (词组元素 [X], 文本, “单击”), 等于 (词组元素 [X], 文本, “按下”), 等于 (词组元素 [X], 文本, “弹起”), 等于 (词组元素 [X], 文本, “双击”), 等于 (词组元素 [X], 文本, “中建”), 等于 (词组元素 [X], 文本, “右键”), 等于 (词组元素 [X], 文本, “左键”), 等于 (词组元素 [X], 文本, “黑”), 等于 (词组元素 [X], 文本, “白”)))
            赋值 (词组元素 [X], 参数, 1)
        .判断 (或者 (等于 (词组元素 [X], 文本, “真”), 等于 (词组元素 [X], 文本, “假”)))
            赋值 (词组元素 [X], 参数, 3)
        .默认
            
        .判断结束
        赋值 (X, 相减 (X, 1))
    .判断结束
    
.判断循环尾 ()
.如果真 (短语)
    赋值 (X, 相加 (X, 1))
.如果真结束
.如果真 (大于 (括号, 0))
    赋值 (错误.文本, “)”)
    赋值 (错误.值, -2)
    返回 (错误)
.如果真结束
赋值 (元素.词元素, 词组元素)
赋值 (错误.值, X)
返回 (错误)

.子程序 参数提取, 错误, , 
.参数 元素, 元素, 数组, 
.参数 函数, 函数, 数组, 

.局部变量 X, 空白型, , , 
.局部变量 N, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 A, 空白型, , , 
.局部变量 Y, 空白型, , , 
.局部变量 错误, 错误, , , 
.局部变量 参数, 文本型, , , 

赋值 (X, 相加 (取数组成员数 (函数), 1))
重定义数组 (函数, 真, X)
赋值 (N, 取数组成员数 (元素))
赋值 (I, 4)
.判断开始 (不等于 (元素 [3].参数, 5))
    赋值 (错误.值, 1)
    赋值 (错误.文本, 元素 [3].文本)
    返回 (错误)
.判断 (等于 (元素 [4].文本, “[”))
    .判断开始 (或者 (等于 (元素 [5].文本, “数值型”), 等于 (元素 [5].文本, “文本型”), 等于 (元素 [5].文本, “逻辑型”)))
        赋值 (函数 [X], 返回类型, 元素 [5].文本)
    .默认
        赋值 (错误.值, 2)
        赋值 (错误.文本, 元素 [5].文本)
        返回 (错误)
    .判断结束
    .判断开始 (或者 (小于 (N, 8), 不等于 (元素 [6].文本, “]”), 不等于 (元素 [7].文本, “(”)))
        赋值 (错误.值, 3)
        返回 (错误)
    .默认
        赋值 (I, 7)
    .判断结束
    
.判断 (并且 (等于 (元素 [4].文本, “(”), 或者 (等于 (元素 [5].文本, “)”), 等于 (元素 [5].参数, 5))))
    
.默认
    赋值 (错误.值, 3)
    返回 (错误)
.判断结束
赋值 (函数 [X], 函数名, 元素 [3].文本)
.判断循环首 (大于 (N, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (等于 (元素 [I], 参数, 5))
        .判断开始 (或者 (小于 (N, 相加 (I, 3)), 不等于 (元素 [相加 (I, 1)].文本, “[”), 不等于 (元素 [相加 (I, 3)].文本, “]”)))
            赋值 (错误.值, 3)
            返回 (错误)
        .判断 (或者 (等于 (元素 [相加 (I, 2)].文本, “数值型”), 等于 (元素 [相加 (I, 2)].文本, “逻辑型”), 等于 (元素 [相加 (I, 2)].文本, “文本型”)))
            赋值 (Y, 取数组成员数 (函数 [X], 变量))
            .计次循环首 (Y, A)
                .如果真 (等于 (函数 [X], 变量 [A], 名, 元素 [I], 文本))
                    赋值 (错误.值, 5)
                    赋值 (错误.文本, 元素 [I], 文本)
                    返回 (错误)
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (不等于 (函数 [X], 变量 [Y], 名, “”))
                赋值 (Y, 相加 (Y, 1))
                重定义数组 (函数 [X], 变量, 真, Y)
            .如果真结束
            赋值 (函数 [X], 变量 [Y], 名, 元素 [I], 文本)
            赋值 (函数 [X], 变量 [Y], 类型, 元素 [相加 (I, 2)].文本)
            赋值 (函数 [X], 变量 [Y], 参数, 8)
            赋值 (参数, 相加 (参数, 元素 [相加 (I, 2)].文本, “,”))
            
        .默认
            赋值 (错误.值, 2)
            赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
            返回 (错误)
        .判断结束
        .如果 (或者 (等于 (元素 [相加 (I, 4)].文本, “,”), 等于 (元素 [相加 (I, 4)].文本, “)”)))
            
        .否则
            赋值 (错误.值, 3)
            返回 (错误)
        .如果结束
        赋值 (I, 相加 (I, 3))
    .判断 (并且 (等于 (元素 [I], 文本, “,”), 大于 (N, I)))
        .如果真 (不等于 (元素 [相加 (I, 1)].参数, 5))
            赋值 (错误.值, 3)
            返回 (错误)
        .如果真结束
        
    .判断 (等于 (元素 [I], 文本, “)”))
        .如果真 (不等于 (N, I))
            赋值 (错误.值, 3)
            返回 (错误)
        .如果真结束
        
    .默认
        赋值 (错误.值, 3)
        返回 (错误)
    .判断结束
    
.判断循环尾 ()
赋值 (函数 [X], 参数, 取文本左边 (参数, 相减 (取文本长度 (参数), 1)))
赋值 (错误.值, -1)
返回 (错误)


.子程序 变量提取, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 参数, 整数型, , 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 A, 空白型, , , 
.局部变量 Z, 空白型, , , 
.局部变量 T, 空白型, , , 

赋值 (X, 取数组成员数 (元素))
赋值 (I, 2)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (并且 (等于 (元素 [I], 参数, 5), 大于 (X, I)))
        赋值 (T, 取数组成员数 (变量))
        .计次循环首 (T, A)
            .如果真 (等于 (变量 [A], 名, 元素 [I], 文本))
                赋值 (错误.值, 1)
                赋值 (错误.文本, 元素 [I], 文本)
                返回 (错误)
            .如果真结束
            
        .计次循环尾 ()
        .判断开始 (等于 (元素 [相加 (I, 1)].文本, “,”))
            .判断开始 (等于 (参数, 9))
                赋值 (T, 相加 (T, 1))
                重定义数组 (变量, 真, T)
            .默认
                .如果真 (不等于 (变量 [T], 名, “”))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (变量, 真, T)
                .如果真结束
                
            .判断结束
            赋值 (变量 [T], 名, 元素 [I], 文本)
            赋值 (变量 [T], 参数, 参数)
            赋值 (变量 [T], 类型, 类型)
            .判断开始 (等于 (类型, “数值型”))
                赋值 (变量 [T], 文本, “0”)
            .判断 (等于 (类型, “逻辑型”))
                赋值 (变量 [T], 文本, “假”)
            .默认
                
            .判断结束
            赋值 (I, 相加 (I, 1))
        .判断 (并且 (等于 (元素 [相加 (I, 1)].文本, “＝”), 大于 (X, 相加 (I, 2))))
            .判断开始 (等于 (元素 [相加 (I, 2)].参数, 1))
                .如果真 (不等于 (类型, “文本型”))
                    赋值 (错误.值, 3)
                    赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
                    返回 (错误)
                .如果真结束
                .判断开始 (等于 (参数, 9))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (变量, 真, T)
                .默认
                    .如果真 (不等于 (变量 [T], 名, “”))
                        赋值 (T, 相加 (T, 1))
                        重定义数组 (变量, 真, T)
                    .如果真结束
                    
                .判断结束
                赋值 (变量 [T], 名, 元素 [I], 文本)
                赋值 (变量 [T], 参数, 参数)
                赋值 (变量 [T], 类型, 类型)
                赋值 (变量 [T], 文本, 元素 [相加 (I, 2)].文本)
                赋值 (I, 相加 (I, 3))
            .判断 (等于 (元素 [相加 (I, 2)].参数, 2))
                .如果真 (不等于 (类型, “数值型”))
                    赋值 (错误.值, 3)
                    赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
                    返回 (错误)
                .如果真结束
                .判断开始 (等于 (参数, 9))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (变量, 真, T)
                .默认
                    .如果真 (不等于 (变量 [T], 名, “”))
                        赋值 (T, 相加 (T, 1))
                        重定义数组 (变量, 真, T)
                    .如果真结束
                    
                .判断结束
                赋值 (变量 [T], 名, 元素 [I], 文本)
                赋值 (变量 [T], 参数, 参数)
                赋值 (变量 [T], 类型, 类型)
                赋值 (变量 [T], 文本, 元素 [相加 (I, 2)].文本)
                赋值 (I, 相加 (I, 3))
            .判断 (等于 (元素 [相加 (I, 2)].参数, 3))
                .如果真 (不等于 (类型, “逻辑型”))
                    赋值 (错误.值, 3)
                    赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
                    返回 (错误)
                .如果真结束
                .判断开始 (等于 (参数, 9))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (变量, 真, T)
                .默认
                    .如果真 (不等于 (变量 [T], 名, “”))
                        赋值 (T, 相加 (T, 1))
                        重定义数组 (变量, 真, T)
                    .如果真结束
                    
                .判断结束
                赋值 (变量 [T], 名, 元素 [I], 文本)
                赋值 (变量 [T], 参数, 参数)
                赋值 (变量 [T], 类型, 类型)
                赋值 (变量 [T], 文本, 元素 [相加 (I, 2)].文本)
                赋值 (I, 相加 (I, 3))
            .默认
                赋值 (错误.值, 3)
                赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
                返回 (错误)
            .判断结束
            
        .判断 (等于 (元素 [相加 (I, 1)].文本, “)”))
            .判断开始 (等于 (参数, 9))
                赋值 (T, 相加 (T, 1))
                重定义数组 (变量, 真, T)
            .默认
                .如果真 (不等于 (变量 [T], 名, “”))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (变量, 真, T)
                .如果真结束
                
            .判断结束
            赋值 (变量 [T], 名, 元素 [I], 文本)
            赋值 (变量 [T], 参数, 参数)
            赋值 (变量 [T], 类型, 类型)
            .判断开始 (等于 (类型, “数值型”))
                赋值 (变量 [T], 文本, “0”)
            .判断 (等于 (类型, “逻辑型”))
                赋值 (变量 [T], 文本, “假”)
            .默认
                
            .判断结束
            赋值 (I, 相加 (I, 1))
            .如果真 (不等于 (X, I))
                赋值 (错误.值, 2)
                赋值 (错误.文本, 元素 [I], 文本)
                返回 (错误)
            .如果真结束
            
        .默认
            
        .判断结束
        
        
    .默认
        
    .判断结束
    
.判断循环尾 ()

返回 (错误)

.子程序 常量提取, 错误, , 
.参数 元素, 元素, 数组, 
.参数 常量, 变量, 数组, 

.局部变量 错误, 错误, , , 
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 A, 空白型, , , 
.局部变量 Z, 空白型, , , 
.局部变量 T, 空白型, , , 

赋值 (X, 取数组成员数 (元素))
赋值 (I, 2)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    赋值 (Z, 取数组成员数 (常量))
    .判断开始 (等于 (元素 [I], 参数, 5))
        .判断循环首 (大于 (Z, T))
            赋值 (T, 相加 (T, 1))
            .如果真 (等于 (常量 [T], 名, 元素 [I], 文本))
                赋值 (错误.值, 3)
                赋值 (错误.文本, 元素 [I], 文本)
                返回 (错误)
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断循环尾 ()
        .判断开始 (大于 (X, 相加 (I, 2)))
            .如果真 (不等于 (元素 [相加 (I, 1)].文本, “＝”))
                赋值 (错误.值, 1)
                赋值 (错误.文本, 相加 (元素 [I], 文本, 元素 [相加 (I, 1)].文本))
                返回 (错误)
            .如果真结束
            .判断开始 (等于 (元素 [相加 (I, 2)].参数, 1))
                赋值 (A, 相加 (取数组成员数 (常量), 1))
                重定义数组 (常量, 真, A)
                赋值 (常量 [A], 名, 相加 (“#”, 元素 [I], 文本))
                赋值 (常量 [A], 参数, 10)
                赋值 (常量 [A], 类型, “文本型”)
                赋值 (常量 [A], 文本, 元素 [相加 (I, 2)].文本)
            .判断 (等于 (元素 [相加 (I, 2)].参数, 2))
                赋值 (A, 相加 (取数组成员数 (常量), 1))
                重定义数组 (常量, 真, A)
                赋值 (常量 [A], 名, 相加 (“#”, 元素 [I], 文本))
                赋值 (常量 [A], 参数, 10)
                赋值 (常量 [A], 类型, “数值型”)
                赋值 (常量 [A], 文本, 元素 [相加 (I, 2)].文本)
            .判断 (等于 (元素 [相加 (I, 2)].参数, 3))
                赋值 (A, 相加 (取数组成员数 (常量), 1))
                重定义数组 (常量, 真, A)
                赋值 (常量 [A], 名, 相加 (“#”, 元素 [I], 文本))
                赋值 (常量 [A], 参数, 10)
                赋值 (常量 [A], 类型, “逻辑型”)
                赋值 (常量 [A], 文本, 元素 [相加 (I, 2)].文本)
            .默认
                赋值 (错误.值, 2)
                赋值 (错误.文本, 元素 [相加 (I, 2)].文本)
                返回 (错误)
            .判断结束
            .判断开始 (或者 (等于 (元素 [相加 (I, 3)].文本, “,”), 等于 (元素 [相加 (I, 3)].文本, “)”)))
                
            .默认
                赋值 (错误.值, 1)
                赋值 (错误.文本, 元素 [相加 (I, 3)].文本)
                返回 (错误)
            .判断结束
            赋值 (I, 相加 (I, 3))
        .默认
            赋值 (错误.值, 1)
            赋值 (错误.文本, 元素 [I], 文本)
            返回 (错误)
            
        .判断结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
赋值 (错误.值, -1)
返回 (错误)

.子程序 取回数据, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 取回, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 参数, 空白型, , , 
.局部变量 计算文本, 文本型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 计算, 逻辑型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 逻辑, 逻辑型, , , 
.局部变量 临时, 文本型, , , 
.局部变量 逻辑A, 文本型, , , 
.局部变量 逻辑B, 文本型, , , 
.局部变量 条件, 文本型, , , 

赋值 (错误.值, -1)
赋值 (X, 取数组成员数 (元素))
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    赋值 (临时, 元素 [I], 文本)
    .判断开始 (等于 (类型, “文本型”))
        .判断开始 (等于 (元素 [I], 参数, 1)) ' 文本
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 2)) ' 数值
            .如果真 (等于 (计算, 假))
                赋值 (计算, 真)
            .如果真结束
            
        .判断 (等于 (元素 [I], 参数, 3)) ' 逻辑
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 5))
            .判断开始 (取变量值 (临时, 变量, 临时类型, 参数, 取回))
                .判断开始 (等于 (临时类型, “文本型”)) ' 文本
                    赋值 (计算, 假)
                .判断 (等于 (临时类型, “数值型”)) ' 数值
                    .如果真 (等于 (计算, 假))
                        赋值 (计算, 真)
                    .如果真结束
                    
                .默认
                    赋值 (计算, 假)
                .判断结束
                赋值 (临时, 取回)
            .默认
                赋值 (错误.值, 5)
                赋值 (错误.文本, 临时)
                返回 (错误)
            .判断结束
            
        .判断 (等于 (元素 [I], 参数, 6))
            .如果真 (等于 (计算, 假))
                .如果真 (不等于 (临时, “+”))
                    赋值 (错误.值, 6)
                    赋值 (错误.文本, 临时)
                    返回 (错误)
                .如果真结束
                到循环尾 ()
            .如果真结束
            
        .默认
            赋值 (错误.值, 5)
            赋值 (错误.文本, 临时)
            返回 (错误)
        .判断结束
        .判断开始 (计算)
            赋值 (计算文本, 相加 (计算文本, 临时))
            .如果真 (等于 (X, I))
                赋值 (计算文本, 到文本 (计算 (计算文本)))
                赋值 (文本, 相加 (文本, 计算文本))
            .如果真结束
            
        .默认
            .如果真 (不等于 (计算文本, “”))
                赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
            .如果真结束
            赋值 (文本, 相加 (文本, 计算文本, 临时))
            赋值 (计算文本, “”)
        .判断结束
        .如果真 (等于 (X, I))
            赋值 (取回, 文本)
        .如果真结束
        
    .判断 (等于 (类型, “数值型”))
        .判断开始 (等于 (元素 [I], 参数, 1)) ' 数值
            赋值 (错误.值, 7)
            赋值 (错误.文本, 相加 (“文本型‘”, 临时, “’”, “数据”))
            返回 (错误)
        .判断 (等于 (元素 [I], 参数, 3)) ' 数值
            赋值 (错误.值, 7)
            赋值 (错误.文本, 相加 (“逻辑型‘”, 临时, “’”, “数据”))
            返回 (错误)
        .判断 (等于 (元素 [I], 参数, 2)) ' 数值
            
        .判断 (等于 (元素 [I], 参数, 5))
            .判断开始 (取变量值 (元素 [I], 文本, 变量, 临时类型, 参数, 取回))
                .判断开始 (等于 (临时类型, “数值型”))
                    赋值 (临时, 取回)
                .判断 (等于 (临时类型, “文本型”))
                    赋值 (错误.值, 7)
                    赋值 (错误.文本, 相加 (“文本型‘”, 临时, “’”, “数据”))
                    返回 (错误)
                .默认
                    赋值 (错误.值, 7)
                    赋值 (错误.文本, 相加 (“逻辑型‘”, 临时, “’”, “数据”))
                    返回 (错误)
                .判断结束
                
            .默认
                赋值 (错误.值, 5)
                赋值 (错误.文本, 临时)
                返回 (错误)
            .判断结束
            
        .判断 (等于 (元素 [I], 参数, 6))
            
        .默认
            赋值 (错误.值, 5)
            赋值 (错误.文本, 临时)
            返回 (错误)
        .判断结束
        赋值 (文本, 相加 (文本, 临时))
        .如果真 (等于 (X, I))
            赋值 (文本, 到文本 (计算 (文本)))
            赋值 (取回, 文本)
        .如果真结束
        
    .判断 (等于 (类型, “逻辑型”))
        .判断开始 (等于 (元素 [I], 参数, 1)) ' 文本
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 2)) ' 数值
            .如果真 (等于 (计算, 假))
                赋值 (计算, 真)
            .如果真结束
            
        .判断 (等于 (元素 [I], 参数, 3)) ' 逻辑
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 5))
            .判断开始 (取变量值 (临时, 变量, 临时类型, 参数, 取回))
                .判断开始 (等于 (临时类型, “文本型”)) ' 文本
                    赋值 (计算, 假)
                .判断 (等于 (临时类型, “数值型”)) ' 数值
                    .如果真 (等于 (计算, 假))
                        赋值 (计算, 真)
                    .如果真结束
                    
                .默认
                    赋值 (计算, 假)
                .判断结束
                赋值 (临时, 取回)
            .默认
                赋值 (错误.值, 5)
                赋值 (错误.文本, 临时)
                返回 (错误)
            .判断结束
            
        .判断 (等于 (元素 [I], 参数, 6))
            .如果真 (等于 (计算, 假))
                .如果真 (不等于 (临时, “+”))
                    赋值 (错误.值, 6)
                    赋值 (错误.文本, 临时)
                    返回 (错误)
                .如果真结束
                到循环尾 ()
            .如果真结束
            
        .判断 (等于 (元素 [I], 参数, 7))
            .判断开始 (逻辑)
                .判断开始 (并且 (等于 (临时, “＝”), 等于 (X, 相加 (I, 1)), 或者 (等于 (元素 [相加 (I, 1)].文本, “真”), 等于 (元素 [相加 (I, 1)].文本, “假”))))
                    .如果真 (不等于 (计算文本, “”))
                        赋值 (计算文本, 到文本 (计算 (计算文本)))
                    .如果真结束
                    赋值 (逻辑B, 相加 (逻辑B, 计算文本))
                    赋值 (计算文本, “”)
                    .判断开始 (等于 (条件比较 (逻辑A, 逻辑B, 条件), 元素 [相加 (I, 1)].文本))
                        赋值 (取回, “真”)
                    .默认
                        赋值 (取回, “假”)
                    .判断结束
                    返回 (错误)
                .默认
                    赋值 (错误.值, 9)
                    返回 (错误)
                .判断结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                    赋值 (计算, 假)
                .如果真结束
                赋值 (逻辑A, 相加 (逻辑A, 计算文本))
                赋值 (计算文本, “”)
                赋值 (逻辑, 真)
                赋值 (条件, 临时)
                到循环尾 ()
            .判断结束
            
        .默认
            赋值 (错误.值, 5)
            赋值 (错误.文本, 临时)
            返回 (错误)
        .判断结束
        .判断开始 (逻辑)
            .判断开始 (计算)
                赋值 (计算文本, 相加 (计算文本, 临时))
                .如果真 (等于 (X, I))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                    赋值 (逻辑B, 相加 (逻辑B, 计算文本))
                .如果真结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
                .如果真结束
                赋值 (逻辑B, 相加 (逻辑B, 计算文本, 临时))
                赋值 (计算文本, “”)
            .判断结束
            
        .默认
            .判断开始 (计算)
                赋值 (计算文本, 相加 (计算文本, 临时))
                .如果真 (等于 (X, I))
                    赋值 (错误.值, 8)
                    赋值 (错误.文本, 计算文本)
                    返回 (错误)
                .如果真结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
                .如果真结束
                赋值 (逻辑A, 相加 (逻辑A, 计算文本, 临时))
                赋值 (计算文本, “”)
            .判断结束
            
        .判断结束
        .如果真 (等于 (X, I))
            .判断开始 (等于 (逻辑, 假))
                .判断开始 (或者 (等于 (逻辑A, “真”), 等于 (逻辑A, “假”)))
                    赋值 (取回, 逻辑A)
                .默认
                    赋值 (错误.值, 8)
                    赋值 (错误.文本, 逻辑A)
                    返回 (错误)
                .判断结束
                
            .默认
                赋值 (取回, 条件比较 (逻辑A, 逻辑B, 条件))
            .判断结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
返回 (错误)

.子程序 条件比较, 文本型, , 
.参数 条件A, 文本型, , 
.参数 条件B, 文本型, , 
.参数 条件, 文本型, , 

.局部变量 条件A1, 整数型, , , 
.局部变量 条件B1, 整数型, , , 

赋值 (条件A1, 到数值 (条件A))
赋值 (条件B1, 到数值 (条件B))
.判断开始 (等于 (条件, “＝”))
    .如果真 (等于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “≠”))
    .如果真 (不等于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “≈”))
    .如果真 (近似等于 (条件A, 条件B))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “≤”))
    .如果真 (小于或等于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “≥”))
    .如果真 (大于或等于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “＜”))
    .如果真 (小于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.判断 (等于 (条件, “＞”))
    .如果真 (大于 (条件A1, 条件B1))
        返回 (“真”)
    .如果真结束
    
.默认
    
.判断结束
返回 (“假”)



















.子程序 去除括号, 错误, , 去除括号
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 Z, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 位置B, 空白型, , , 
.局部变量 临时元素, 元素, , , 
.局部变量 位置A, 整数型, , , 
.局部变量 修正元素, 元素, , "0", 
.局部变量 取回, 文本型, , , 

赋值 (错误.值, -1)
赋值 (Z, 取数组成员数 (元素))
.判断循环首 (大于 (Z, I))
    赋值 (Z, 取数组成员数 (元素))
    .计次循环首 (Z, I)
        .如果真 (等于 (元素 [I], 文本, “)”))
            赋值 (位置B, 相减 (I, 1))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (等于 (位置B, 0))
        返回 (错误)
    .如果真结束
    .判断循环首 (大于 (I, 1))
        赋值 (I, 相减 (I, 1))
        .如果真 (等于 (元素 [I], 文本, “(”))
            赋值 (位置A, I)
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    .判断开始 (等于 (位置A, 1))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        .判断开始 (等于 (类型, “逻辑型”))
            赋值 (错误, 取回逻辑值 (修正元素, 变量, 取回))
            .如果真 (不等于 (错误.值, -1))
                返回 (错误)
            .如果真结束
            
        .默认
            赋值 (错误, 取回数据 (修正元素, 变量, 取回, “文本型”))
            .如果真 (不等于 (错误.值, -1))
                返回 (错误)
            .如果真结束
            
        .判断结束
        赋值 (临时元素.文本, 取回)
        .判断开始 (等于 (类型, “数值型”))
            赋值 (临时元素.参数, 2)
        .默认
            赋值 (临时元素.参数, 1)
        .判断结束
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .判断 (等于 (元素 [相减 (I, 1)].参数, 5))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 相加 (位置B, 1))
        删除成员 (修正元素, 1, 相减 (I, 2))
        赋值 (错误, 处理命令 (修正元素, 变量, 临时元素))
        删除成员 (元素, 相减 (位置A, 1), 相加 (相减 (位置B, 位置A), 3))
        插入成员 (元素, 相减 (位置A, 1), 临时元素)
    .判断 (或者 (等于 (元素 [相减 (I, 1)].参数, 6), 等于 (元素 [相减 (I, 1)].参数, 7)))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        赋值 (错误, 取回数据 (修正元素, 变量, 取回, “文本型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        赋值 (临时元素.文本, 取回)
        .判断开始 (等于 (类型, “数值型”))
            赋值 (临时元素.参数, 2)
        .默认
            赋值 (临时元素.参数, 1)
        .判断结束
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .判断 (等于 (元素 [相减 (I, 1)].参数, 11))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        赋值 (错误, 取回逻辑值 (修正元素, 变量, 取回))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        赋值 (临时元素.文本, 取回)
        赋值 (临时元素.参数, 3)
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .默认
        赋值 (错误.值, 3)
        赋值 (错误.文本, 元素 [相减 (I, 1)].文本)
        返回 (错误)
    .判断结束
    连续赋值 (0, I, 位置B, 位置A)
.判断循环尾 ()
返回 (错误)

.子程序 处理命令, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 临时元素, 元素, , 

.局部变量 错误, 错误, , , 
.局部变量 函数信息, 函数信息, , , 
.局部变量 X, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 T, 空白型, , , 
.局部变量 参数, 文本型, , "0", 
.局部变量 位置B, 整数型, , , 
.局部变量 参数元素, 行元素, , "1", 
.局部变量 S, 整数型, , , 
.局部变量 函数参数, 文本型, , "0", 
.局部变量 取回, 文本型, , , 
.局部变量 A, 整数型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 临时参数, 整数型, , , 

赋值 (错误.值, -1)
赋值 (X, 相减 (取数组成员数 (元素), 1))
赋值 (函数信息, 函数信息 (元素 [1].文本))
.判断开始 (不等于 (函数信息.返回值, “错误”))
    
.判断 (函数元素 (元素 [1].文本, 函数信息))
    
.默认
    赋值 (错误.值, 3)
    赋值 (错误.文本, 元素 [1].文本)
    返回 (错误)
.判断结束
赋值 (I, 2)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (等于 (元素 [I], 文本, “,”))
        赋值 (Y, 相加 (取数组成员数 (参数元素), 1))
        重定义数组 (参数元素, 真, Y)
    .默认
        赋值 (Y, 取数组成员数 (参数元素))
        赋值 (T, 取数组成员数 (参数元素 [Y], 词元素))
        .如果真 (不等于 (参数元素 [Y], 词元素 [T], 文本, “”))
            赋值 (T, 相加 (T, 1))
            重定义数组 (参数元素 [Y], 词元素, 真, T)
        .如果真结束
        赋值 (参数元素 [Y], 词元素 [T], 文本, 元素 [I], 文本)
        赋值 (参数元素 [Y], 词元素 [T], 参数, 元素 [I], 参数)
        赋值 (参数元素 [Y], 词元素 [T], 类型, 元素 [I], 类型)
    .判断结束
    
.判断循环尾 ()
赋值 (参数, 分割文本 (函数信息.参数, “,”, ))
赋值 (X, 取数组成员数 (参数))
赋值 (S, 取数组成员数 (参数元素))
.如果真 (等于 (X, 0))
    赋值 (S, 0)
.如果真结束
重定义数组 (函数参数, 假, X)
.判断开始 (大于 (S, X))
    赋值 (错误.值, 15)
    赋值 (错误.文本, 函数信息.函数名)
    返回 (错误)
.判断 (小于 (S, X))
    赋值 (错误.值, 12)
    赋值 (错误.文本, 函数信息.函数名)
    返回 (错误)
.默认
    
.判断结束
.计次循环首 (X, A)
    .判断开始 (等于 (取数组成员数 (参数元素 [A], 词元素), 1))
        .判断开始 (或者 (等于 (参数 [A], “通用型”), 等于 (参数 [A], “文本型”), 等于 (参数 [A], “数值型”), 等于 (参数 [A], “逻辑型”)))
            .判断开始 (或者 (等于 (参数元素 [A], 词元素 [1].参数, 1), 等于 (参数元素 [A], 词元素 [1].参数, 2), 等于 (参数元素 [A], 词元素 [1].参数, 3)))
                赋值 (函数参数 [A], 参数元素 [A], 词元素 [1].文本)
            .判断 (或者 (等于 (参数元素 [A], 词元素 [1].参数, 8), 等于 (参数元素 [A], 词元素 [1].参数, 9), 等于 (参数元素 [A], 词元素 [1].参数, 10), 等于 (参数元素 [A], 词元素 [1].参数, 5)))
                .判断开始 (取变量值 (参数元素 [A], 词元素 [1].文本, 变量, 临时类型, 临时参数, 取回))
                    赋值 (函数参数 [A], 参数元素 [A], 词元素 [1].文本)
                .默认
                    赋值 (错误.值, 5)
                    返回 (错误)
                .判断结束
                
            .默认
                赋值 (错误.值, 11)
                赋值 (错误.文本, 元素 [1].文本)
                返回 (错误)
            .判断结束
            
        .默认
            
        .判断结束
        到循环尾 ()
    .判断 (等于 (参数 [A], “文本型”))
        赋值 (错误, 取回数据 (参数元素 [A], 词元素, 变量, 取回, “文本型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .判断 (等于 (参数 [A], “数值型”))
        赋值 (错误, 取回数据 (参数元素 [A], 词元素, 变量, 取回, “数值型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .判断 (等于 (参数 [A], “逻辑型”))
        赋值 (错误, 取回逻辑值 (参数元素 [A], 词元素, 变量, 取回))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .判断 (等于 (参数 [A], “通用型”))
        赋值 (错误, 取回通用数据 (参数元素 [A], 词元素, 变量, 取回, “文本型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .默认
        
    .判断结束
    赋值 (函数参数 [A], 取回)
    赋值 (取回, “”)
.计次循环尾 ()
.判断开始 (等于 (函数信息.返回值, “数值型”))
    赋值 (临时元素.参数, 2)
    赋值 (临时元素.文本, “0”)
.判断 (等于 (函数信息.返回值, “文本型”))
    赋值 (临时元素.参数, 1)
    赋值 (临时元素.文本, “ ”)
.判断 (等于 (函数信息.返回值, “逻辑型”))
    赋值 (临时元素.参数, 3)
    赋值 (临时元素.文本, “假”)
.默认
    
.判断结束
返回 (错误)

.子程序 取回通用数据, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 取回, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 参数, 空白型, , , 
.局部变量 计算文本, 文本型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 计算, 逻辑型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 逻辑, 逻辑型, , , 
.局部变量 临时, 文本型, , , 
.局部变量 逻辑A, 文本型, , , 
.局部变量 逻辑B, 文本型, , , 
.局部变量 条件, 文本型, , , 

赋值 (错误.值, -1)
赋值 (X, 取数组成员数 (元素))
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    赋值 (临时, 元素 [I], 文本)
    .判断开始 (等于 (类型, “文本型”))
        .判断开始 (等于 (元素 [I], 参数, 1)) ' 文本
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 2)) ' 数值
            .如果真 (等于 (计算, 假))
                赋值 (计算, 真)
            .如果真结束
            
        .判断 (等于 (元素 [I], 参数, 3)) ' 逻辑
            赋值 (计算, 假)
        .判断 (等于 (元素 [I], 参数, 5))
            .判断开始 (取变量值 (临时, 变量, 临时类型, 参数, 取回))
                .判断开始 (等于 (临时类型, “文本型”)) ' 文本
                    赋值 (计算, 假)
                .判断 (等于 (临时类型, “数值型”)) ' 数值
                    .如果真 (等于 (计算, 假))
                        赋值 (计算, 真)
                    .如果真结束
                    
                .默认
                    赋值 (计算, 假)
                .判断结束
                赋值 (临时, 取回)
            .默认
                赋值 (错误.值, 5)
                赋值 (错误.文本, 临时)
                返回 (错误)
            .判断结束
            
        .判断 (等于 (元素 [I], 参数, 6))
            .如果真 (等于 (计算, 假))
                .如果真 (不等于 (临时, “+”))
                    赋值 (错误.值, 6)
                    赋值 (错误.文本, 临时)
                    返回 (错误)
                .如果真结束
                到循环尾 ()
            .如果真结束
            
        .判断 (等于 (元素 [I], 参数, 7))
            .判断开始 (逻辑)
                .判断开始 (并且 (等于 (临时, “＝”), 等于 (X, 相加 (I, 1)), 或者 (等于 (元素 [相加 (I, 1)].文本, “真”), 等于 (元素 [相加 (I, 1)].文本, “假”))))
                    .如果真 (不等于 (计算文本, “”))
                        赋值 (计算文本, 到文本 (计算 (计算文本)))
                    .如果真结束
                    赋值 (逻辑B, 相加 (逻辑B, 计算文本))
                    赋值 (计算文本, “”)
                    .判断开始 (等于 (条件比较 (逻辑A, 逻辑B, 条件), 元素 [相加 (I, 1)].文本))
                        赋值 (取回, “真”)
                    .默认
                        赋值 (取回, “假”)
                    .判断结束
                    返回 (错误)
                .默认
                    赋值 (错误.值, 9)
                    返回 (错误)
                .判断结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                    赋值 (计算, 假)
                .如果真结束
                赋值 (逻辑A, 相加 (逻辑A, 计算文本))
                赋值 (计算文本, “”)
                赋值 (逻辑, 真)
                赋值 (条件, 临时)
                到循环尾 ()
            .判断结束
            
        .默认
            赋值 (错误.值, 5)
            赋值 (错误.文本, 临时)
            返回 (错误)
        .判断结束
        .如果 (逻辑)
            .判断开始 (计算)
                赋值 (计算文本, 相加 (计算文本, 临时))
                .如果真 (等于 (X, I))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                    赋值 (逻辑B, 相加 (逻辑B, 计算文本))
                .如果真结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
                .如果真结束
                赋值 (逻辑B, 相加 (逻辑B, 计算文本, 临时))
                赋值 (计算文本, “”)
            .判断结束
            
        .否则
            .判断开始 (计算)
                赋值 (计算文本, 相加 (计算文本, 临时))
                .如果真 (等于 (X, I))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                .如果真结束
                
            .默认
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
                .如果真结束
                赋值 (逻辑A, 相加 (逻辑A, 计算文本, 临时))
                赋值 (计算文本, “”)
            .判断结束
            
        .如果结束
        .如果真 (等于 (X, I))
            .判断开始 (等于 (逻辑, 假))
                赋值 (取回, 逻辑A)
            .默认
                赋值 (取回, 条件比较 (逻辑A, 逻辑B, 条件))
            .判断结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
返回 (错误)

.子程序 取回逻辑数据, 文本型, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 

.局部变量 取回, 文本型, , , 
.局部变量 X, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 参数, 空白型, , , 
.局部变量 计算文本, 文本型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 计算, 逻辑型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 逻辑, 逻辑型, , , 
.局部变量 临时, 文本型, , , 
.局部变量 逻辑A, 文本型, , , 
.局部变量 逻辑B, 文本型, , , 
.局部变量 条件, 文本型, , , 

赋值 (X, 取数组成员数 (元素))
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    赋值 (临时, 元素 [I], 文本)
    .判断开始 (等于 (元素 [I], 参数, 1)) ' 文本
        赋值 (计算, 假)
    .判断 (等于 (元素 [I], 参数, 2)) ' 数值
        .如果真 (等于 (计算, 假))
            赋值 (计算, 真)
        .如果真结束
        
    .判断 (等于 (元素 [I], 参数, 3)) ' 逻辑
        赋值 (计算, 假)
    .判断 (等于 (元素 [I], 参数, 5))
        .判断开始 (取变量值 (临时, 变量, 临时类型, 参数, 取回))
            .判断开始 (等于 (临时类型, “文本型”)) ' 文本
                赋值 (计算, 假)
            .判断 (等于 (临时类型, “数值型”)) ' 数值
                .如果真 (等于 (计算, 假))
                    赋值 (计算, 真)
                .如果真结束
                
            .默认
                赋值 (计算, 假)
            .判断结束
            赋值 (临时, 取回)
        .默认
            
        .判断结束
        
    .判断 (等于 (元素 [I], 参数, 6))
        
    .判断 (等于 (元素 [I], 参数, 7))
        .判断开始 (逻辑)
            .判断开始 (并且 (等于 (临时, “＝”), 等于 (X, 相加 (I, 1)), 或者 (等于 (元素 [相加 (I, 1)].文本, “真”), 等于 (元素 [相加 (I, 1)].文本, “假”))))
                .如果真 (不等于 (计算文本, “”))
                    赋值 (计算文本, 到文本 (计算 (计算文本)))
                .如果真结束
                赋值 (逻辑B, 相加 (逻辑B, 计算文本))
                赋值 (计算文本, “”)
                .判断开始 (等于 (条件比较 (逻辑A, 逻辑B, 条件), 元素 [相加 (I, 1)].文本))
                    赋值 (取回, “真”)
                .默认
                    赋值 (取回, “假”)
                .判断结束
                
            .默认
                
                
            .判断结束
            
        .默认
            .如果真 (不等于 (计算文本, “”))
                赋值 (计算文本, 到文本 (计算 (计算文本)))
                赋值 (计算, 假)
            .如果真结束
            赋值 (逻辑A, 相加 (逻辑A, 计算文本))
            赋值 (计算文本, “”)
            赋值 (逻辑, 真)
            赋值 (条件, 临时)
            到循环尾 ()
        .判断结束
        
    .默认
        
    .判断结束
    .判断开始 (逻辑)
        .判断开始 (计算)
            赋值 (计算文本, 相加 (计算文本, 临时))
            .如果真 (等于 (X, I))
                赋值 (计算文本, 到文本 (计算 (计算文本)))
                赋值 (逻辑B, 相加 (逻辑B, 计算文本))
            .如果真结束
            
        .默认
            .如果真 (不等于 (计算文本, “”))
                赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
            .如果真结束
            赋值 (逻辑B, 相加 (逻辑B, 计算文本, 临时))
            赋值 (计算文本, “”)
        .判断结束
        
    .默认
        .判断开始 (计算)
            赋值 (计算文本, 相加 (计算文本, 临时))
        .默认
            .如果真 (不等于 (计算文本, “”))
                赋值 (计算文本, 到文本 (计算 (取文本左边 (计算文本, 相减 (取文本长度 (计算文本), 1)))))
            .如果真结束
            赋值 (逻辑A, 相加 (逻辑A, 计算文本, 临时))
            赋值 (计算文本, “”)
        .判断结束
        
    .判断结束
    .如果真 (等于 (X, I))
        .判断开始 (等于 (逻辑, 假))
            赋值 (取回, 逻辑A)
        .默认
            赋值 (取回, 条件比较 (逻辑A, 逻辑B, 条件))
        .判断结束
        
    .如果真结束
    
.判断循环尾 ()
返回 (取回)

.子程序 处理函数, 文本型, , 
.参数 参数, 文本型, 数组, 
.参数 函数名, 文本型, , 
.参数 变量, 变量, 数组, 

.局部变量 X, 空白型, , , 
.局部变量 返回, 文本型, , , 
.局部变量 返回X, 文本型, , , 
.局部变量 返回Y, 文本型, , , 

赋值 (X, 取数组成员数 (参数))
.判断开始 (等于 (X, 0))
    赋值 (返回, 函数处理 (函数名))
.判断 (等于 (X, 1))
    赋值 (返回, 函数处理 (函数名, 参数 [1]))
.判断 (等于 (X, 2))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2]))
.判断 (等于 (X, 3))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3]))
.判断 (等于 (X, 4))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4]))
.判断 (等于 (X, 5))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5]))
.判断 (等于 (X, 6))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6]))
.判断 (等于 (X, 7))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7]))
.判断 (等于 (X, 10))
    赋值 (返回, 函数处理 (函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 返回X, 返回Y))
    变量赋值 (“返回x”, 变量, 返回X)
    变量赋值 (“返回y”, 变量, 返回Y)
.默认
    
.判断结束
返回 (返回)

.程序集 处理元素, , , 

.程序集变量 流程压入, 流程压入, , "0", 
.子程序 处理函数组, 错误, , 
.参数 行文本, 文本型, , 
.参数 行词组, 行元素, , 

.局部变量 字, 文本型, , "0", 
.局部变量 字数, 整数型, , , 
.局部变量 错误, 错误, , , 

赋值 (字数, 分割字 (行文本, 字))
赋值 (错误, 词组元素 (字数, 字, 行词组))
返回 (错误)

.子程序 内部常量判断, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 值, 整数型, 参考, 

.判断开始 (或者 (等于 (文本, “窗口坐标”), 等于 (文本, “屏幕坐标”), 等于 (文本, “单击”), 等于 (文本, “按下”), 等于 (文本, “弹起”), 等于 (文本, “双击”), 等于 (文本, “中建”), 等于 (文本, “右键”), 等于 (文本, “左键”), 等于 (文本, “黑”), 等于 (文本, “白”)))
    赋值 (值, 1)
    返回 (真)
.判断 (或者 (等于 (文本, “真”), 等于 (文本, “假”)))
    赋值 (值, 3)
    返回 (真)
.默认
    返回 (假)
.判断结束



.子程序 计算与类型, 逻辑型, , 
.参数 临时, 文本型, , 
.参数 参数, 字节型, 参考, 

.判断开始 (等于 (临时, “＋”))
    赋值 (临时, “+”)
    赋值 (参数, 6)
.判断 (等于 (临时, “－”))
    赋值 (临时, “-”)
    赋值 (参数, 6)
.判断 (等于 (临时, “×”))
    赋值 (临时, “*”)
    赋值 (参数, 6)
.判断 (等于 (临时, “÷”))
    赋值 (临时, “/”)
    赋值 (参数, 6)
.判断 (等于 (临时, “＼”))
    赋值 (临时, “\”)
    赋值 (参数, 6)
.判断 (等于 (临时, “％”))
    赋值 (临时, “%”)
    赋值 (参数, 6)
.判断 (等于 (临时, “#”))
    赋值 (参数, 10)
.判断 (或者 (等于 (临时, “＝”), 等于 (临时, “＜”), 等于 (临时, “＞”), 等于 (临时, “≤”), 等于 (临时, “≥”), 等于 (临时, “≠”), 等于 (临时, “≈”)))
    赋值 (参数, 7)
.判断 (或者 (等于 (临时, “・”), 等于 (临时, “[”), 等于 (临时, “]”)))
    赋值 (参数, 0)
.判断 (等于 (临时, “=”))
    赋值 (临时, “＝”)
    赋值 (参数, 7)
.判断 (等于 (临时, “<”))
    赋值 (临时, “＜”)
    赋值 (参数, 7)
.判断 (等于 (临时, “>”))
    赋值 (临时, “＞”)
    赋值 (参数, 7)
.判断 (或者 (等于 (临时, “+”), 等于 (临时, “-”), 等于 (临时, “*”), 等于 (临时, “/”), 等于 (临时, “\”), 等于 (临时, “%”)))
    赋值 (参数, 6)
.默认
    返回 (假)
.判断结束
返回 (真)

.子程序 计算预处理, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 变量名, 文本型, 可空, 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 取回, 文本型, , , 
.局部变量 X, 空白型, , , 

赋值 (错误, 去除括号 (元素, 变量, 类型))
.如果真 (不等于 (错误.值, -1))
    返回 (错误)
.如果真结束
.判断开始 (等于 (类型, “逻辑型”))
    赋值 (错误, 取回逻辑值 (元素, 变量, 取回))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.默认
    赋值 (错误, 取回数据 (元素, 变量, 取回, 类型))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    
.判断结束
返回 (错误)

.子程序 取回逻辑值, 错误, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 取回, 文本型, , 

.局部变量 位置B, 整数型, , , 
.局部变量 错误, 错误, , , 
.局部变量 且或, 行元素, , "1", 
.局部变量 T, 整数型, , , 
.局部变量 与或, 逻辑型, , , 
.局部变量 X, 整数型, , , 
.局部变量 A, 整数型, , , 

赋值 (位置B, 取数组成员数 (元素))
赋值 (错误.值, -1)
赋值 (T, 0)
.判断循环首 (大于 (位置B, T))
    赋值 (T, 相加 (T, 1))
    .判断开始 (等于 (元素 [T], 文本, “且”))
        赋值 (与或, 真)
        赋值 (X, 相加 (取数组成员数 (且或), 1))
        重定义数组 (且或, 真, X)
    .默认
        赋值 (X, 取数组成员数 (且或))
        赋值 (A, 取数组成员数 (且或 [X], 词元素))
        .如果真 (不等于 (且或 [X], 词元素 [A], 文本, “”))
            赋值 (A, 相加 (A, 1))
            重定义数组 (且或 [X], 词元素, 真, A)
        .如果真结束
        赋值 (且或 [X], 词元素 [A], 文本, 元素 [T], 文本)
        赋值 (且或 [X], 词元素 [A], 参数, 元素 [T], 参数)
        赋值 (且或 [X], 词元素 [A], 类型, 元素 [T], 类型)
    .判断结束
    
.判断循环尾 ()
.判断开始 (与或)
    赋值 (错误, 且元素分析 (且或, 变量, 取回))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    
.默认
    赋值 (T, 0)
    .判断循环首 (大于 (位置B, T))
        赋值 (T, 相加 (T, 1))
        .判断开始 (等于 (元素 [T], 文本, “或”))
            赋值 (与或, 真)
            赋值 (X, 相加 (取数组成员数 (且或), 1))
            重定义数组 (且或, 真, X)
        .默认
            赋值 (X, 取数组成员数 (且或))
            赋值 (A, 取数组成员数 (且或 [X], 词元素))
            .如果真 (不等于 (且或 [X], 词元素 [A], 文本, “”))
                赋值 (A, 相加 (A, 1))
                重定义数组 (且或 [X], 词元素, 真, A)
            .如果真结束
            赋值 (且或 [X], 词元素 [A], 文本, 元素 [T], 文本)
            赋值 (且或 [X], 词元素 [A], 参数, 元素 [T], 参数)
            赋值 (且或 [X], 词元素 [A], 类型, 元素 [T], 类型)
        .判断结束
        
    .判断循环尾 ()
.判断结束
.判断开始 (与或)
    赋值 (错误, 或元素分析 (且或, 变量, 取回))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    
.默认
    赋值 (错误, 取回数据 (元素, 变量, 取回, “逻辑型”))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    
.判断结束
返回 (错误)

.子程序 且元素分析, 错误, , 
.参数 且元素, 行元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 取回, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 且或, 行元素, , "1", 
.局部变量 与或, 逻辑型, , , 
.局部变量 R, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 B, 整数型, , , 
.局部变量 T, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 A, 整数型, , , 
.局部变量 临时, 文本型, , , 

赋值 (错误.值, -1)
赋值 (R, 取数组成员数 (且元素))
赋值 (取回, “真”)
.判断循环首 (大于 (R, I))
    赋值 (I, 相加 (I, 1))
    赋值 (B, 取数组成员数 (且元素 [I], 词元素))
    .判断循环首 (大于 (B, T))
        赋值 (T, 相加 (T, 1))
        .判断开始 (等于 (且元素 [I], 词元素 [T], 文本, “或”))
            赋值 (与或, 真)
            赋值 (X, 相加 (取数组成员数 (且或), 1))
            重定义数组 (且或, 真, X)
        .默认
            赋值 (X, 取数组成员数 (且或))
            赋值 (A, 取数组成员数 (且或 [X], 词元素))
            .如果真 (不等于 (且或 [X], 词元素 [A], 文本, “”))
                赋值 (A, 相加 (A, 1))
                重定义数组 (且或 [X], 词元素, 真, A)
            .如果真结束
            赋值 (且或 [X], 词元素 [A], 文本, 且元素 [I], 词元素 [T], 文本)
            赋值 (且或 [X], 词元素 [A], 参数, 且元素 [I], 词元素 [T], 参数)
            赋值 (且或 [X], 词元素 [A], 类型, 且元素 [I], 词元素 [T], 类型)
        .判断结束
        
    .判断循环尾 ()
    .判断开始 (与或)
        赋值 (错误, 或元素分析 (且或, 变量, 临时))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .默认
        赋值 (错误, 取回数据 (且元素 [I], 词元素, 变量, 临时, “逻辑型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .判断结束
    .如果真 (等于 (临时, “假”))
        赋值 (取回, “假”)
    .如果真结束
    赋值 (T, 0)
    赋值 (与或, 假)
    重定义数组 (且或, 假, 1)
.判断循环尾 ()
返回 (错误)

.子程序 或元素分析, 错误, , 
.参数 或元素, 行元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 取回, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 临时, 文本型, , , 
.局部变量 X, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 A, 整数型, , , 

赋值 (错误.值, -1)
赋值 (X, 取数组成员数 (或元素))
赋值 (取回, “假”)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    赋值 (A, 取数组成员数 (或元素 [I], 词元素))
    赋值 (错误, 取回数据 (或元素 [I], 词元素, 变量, 临时, “逻辑型”))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    .如果真 (等于 (临时, “真”))
        赋值 (取回, “真”)
    .如果真结束
    
.判断循环尾 ()
返回 (错误)

.子程序 压入流程, 空白型, , 
.参数 压入取出, 文本型, , 
.参数 元素, 元素, 可空 数组, 
.参数 类型, 文本型, 可空, 
.参数 压进, 逻辑型, 参考 可空, 
.参数 开始位置, 空白型, 参考 可空, 
.参数 结束位置, 空白型, 参考 可空, 

.局部变量 X, 空白型, , , 

.判断开始 (等于 (压入取出, “压入”))
    赋值 (X, 相加 (取数组成员数 (流程压入), 1))
    重定义数组 (流程压入, 真, X)
    赋值 (流程压入 [X], 类型, 类型)
    赋值 (流程压入 [X], 元素, 元素)
    赋值 (流程压入 [X], 结束位置, 结束位置)
    赋值 (流程压入 [X], 开始位置, 开始位置)
.判断 (等于 (压入取出, “取出”))
    赋值 (X, 取数组成员数 (流程压入))
    赋值 (类型, 流程压入 [X], 类型)
    赋值 (压进, 流程压入 [X], 中转)
    赋值 (结束位置, 流程压入 [X], 结束位置)
    赋值 (开始位置, 流程压入 [X], 开始位置)
.判断 (等于 (压入取出, “压出”))
    赋值 (X, 取数组成员数 (流程压入))
    删除成员 (流程压入, X, 1)
.判断 (等于 (压入取出, “压进”))
    赋值 (X, 取数组成员数 (流程压入))
    赋值 (流程压入 [X], 中转, 压进)
.默认
    
.判断结束



.程序集 分析工具, , , 

.程序集变量 流程压入, 流程压入, , "0", 
.程序集变量 中转位置, 整数型, , "0", 
.程序集变量 流程中转, 流程中转, , "0", 
.程序集变量 中转, 逻辑型, , , 
.子程序 分析函数, 错误, , 
.参数 元素, 元素, 数组, 
.参数 匿名参数_1018, 函数, 数组, 
.参数 段, 整数型, 参考, 

.局部变量 错误, 错误, , , 
.局部变量 参数, 字节型, 静态, , 
.局部变量 类型, 文本型, 静态, , 
.局部变量 数, 空白型, , , 
.局部变量 临时, 元素, , "0", 
.局部变量 取回, 文本型, , , 
.局部变量 X, 空白型, , , 
.局部变量 Y, 空白型, , , 
.局部变量 T, 空白型, , , 
.局部变量 D, 空白型, , , 
.局部变量 P, 空白型, , , 
.局部变量 I, 空白型, , , 
.局部变量 函数信息, 函数信息, , , 
.局部变量 临时元素, 元素, , , 

赋值 (错误.值, -1)
.判断开始 (等于 (元素 [1].文本, “#热键”))
    返回 (错误)
.判断 (并且 (或者 (等于 (元素 [1].文本, “数值型”), 等于 (元素 [1].文本, “逻辑型”), 等于 (元素 [1].文本, “文本型”), 等于 (元素 [1].文本, “常量”)), 等于 (元素 [2].文本, “(”)))
    返回 (错误)
.判断 (并且 (等于 (元素 [1].文本, “子程序”), 等于 (元素 [2].文本, “・”)))
    赋值 (段, 相加 (段, 1))
    返回 (错误)
.判断 (等于 (段, 0))
    赋值 (错误.值, 1)
    返回 (错误)
.判断 (变量元素 (元素 [1].文本, 匿名参数_1018 [段], 变量, 参数, 类型))
    赋值 (数, 取数组成员数 (匿名参数_1018 [段], 行))
    .如果真 (不等于 (匿名参数_1018 [段], 行 [数], 行信息, “”))
        赋值 (数, 相加 (数, 1))
    .如果真结束
    重定义数组 (匿名参数_1018 [段], 行, 真, 数)
    赋值 (匿名参数_1018 [段], 行 [数], 行信息, “赋值”)
    赋值 (匿名参数_1018 [段], 行 [数], 命令, 元素 [1].文本)
    赋值 (匿名参数_1018 [段], 行 [数], 类型, 类型)
    .如果真 (不等于 (元素 [2].文本, “＝”))
        .判断开始 (或者 (等于 (元素 [2].参数, 6), 等于 (元素 [2].参数, 7)))
            赋值 (错误.值, 2)
            赋值 (错误.文本, 元素 [2].文本)
            返回 (错误)
        .默认
            赋值 (错误.值, 3)
            返回 (错误)
        .判断结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    删除成员 (元素, 1, 2)
    赋值 (匿名参数_1018 [段], 行 [数], 词元素, 元素)
    赋值 (错误, 计算预处理 (元素, 匿名参数_1018 [段], 变量, 匿名参数_1018 [段], 行 [数], 命令, 类型))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
    
.判断 (或者 (等于 (元素 [1].文本, “某点颜色”), 等于 (元素 [1].文本, “图像出现”), 等于 (元素 [1].文本, “如果”), 等于 (元素 [1].文本, “否则如果”), 等于 (元素 [1].文本, “循环”), 等于 (元素 [1].文本, “条件结束”), 等于 (元素 [1].文本, “否则”), 等于 (元素 [1].文本, “到循环尾”), 等于 (元素 [1].文本, “跳出循环”), 等于 (元素 [1].文本, “返回”)))
    .如果真 (不等于 (元素 [取数组成员数 (元素)].文本, “)”))
        赋值 (错误.值, 17)
        赋值 (错误.文本, 元素 [1].文本)
        返回 (错误)
    .如果真结束
    赋值 (数, 取数组成员数 (匿名参数_1018 [段], 行))
    .如果真 (不等于 (匿名参数_1018 [段], 行 [数], 行信息, “”))
        赋值 (数, 相加 (数, 1))
    .如果真结束
    重定义数组 (匿名参数_1018 [段], 行, 真, 数)
    赋值 (匿名参数_1018 [段], 行 [数], 行信息, “流程”)
    .判断开始 (或者 (等于 (元素 [1].文本, “某点颜色”), 等于 (元素 [1].文本, “图像出现”)))
        赋值 (匿名参数_1018 [段], 行 [数], 命令, 元素 [1].文本)
        赋值 (匿名参数_1018 [段], 行 [数], 类型, “逻辑型”)
        赋值 (匿名参数_1018 [段], 行 [数], 词元素, 元素)
    .默认
        赋值 (匿名参数_1018 [段], 行 [数], 命令, 元素 [1].文本)
        赋值 (匿名参数_1018 [段], 行 [数], 类型, “逻辑型”)
        删除成员 (元素, 取数组成员数 (元素), 1)
        删除成员 (元素, 1, 2)
        赋值 (匿名参数_1018 [段], 行 [数], 词元素, 元素)
    .判断结束
    .判断开始 (等于 (匿名参数_1018 [段], 行 [数], 命令, “图像出现”))
        赋值 (X, 相加 (取数组成员数 (流程压入), 1))
        重定义数组 (流程压入, 真, X)
        赋值 (流程压入 [X], 类型, “如果”)
        赋值 (流程压入 [X], 位置, 数)
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “某点颜色”))
        赋值 (X, 相加 (取数组成员数 (流程压入), 1))
        重定义数组 (流程压入, 真, X)
        赋值 (流程压入 [X], 类型, “如果”)
        赋值 (流程压入 [X], 位置, 数)
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “如果”))
        赋值 (X, 相加 (取数组成员数 (流程压入), 1))
        重定义数组 (流程压入, 真, X)
        赋值 (流程压入 [X], 类型, “如果”)
        赋值 (流程压入 [X], 位置, 数)
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “循环”))
        赋值 (X, 相加 (取数组成员数 (流程压入), 1))
        重定义数组 (流程压入, 真, X)
        赋值 (流程压入 [X], 类型, “循环”)
        赋值 (流程压入 [X], 位置, 数)
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “条件结束”))
        赋值 (X, 取数组成员数 (流程压入))
        .判断开始 (大于 (X, 0))
            .判断开始 (等于 (流程压入 [X], 类型, “如果”))
                赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 结束位, 数)
                赋值 (Y, 取数组成员数 (流程中转))
                .计次循环首 (Y, I)
                    .如果真 (等于 (流程中转 [I], 中转层, X))
                        赋值 (D, 取数组成员数 (流程中转 [I], 中转))
                        .计次循环首 (D, P)
                            赋值 (匿名参数_1018 [段], 行 [流程中转] [I], 中转 [P], 位置, 结束位, 数)
                        .计次循环尾 ()
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                删除成员 (流程中转, I, 1)
            .判断 (或者 (等于 (流程压入 [X], 类型, “图像出现”), 等于 (流程压入 [X], 类型, “某点颜色”)))
                赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 结束位, 数)
                赋值 (Y, 取数组成员数 (流程中转))
                .计次循环首 (Y, I)
                    .如果真 (等于 (流程中转 [I], 中转层, X))
                        赋值 (D, 取数组成员数 (流程中转 [I]))
                        .计次循环首 (D, P)
                            赋值 (匿名参数_1018 [段], 行 [流程中转] [I], 中转 [P], 位置, 结束位, 数)
                        .计次循环尾 ()
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                删除成员 (流程中转, I, 1)
            .默认
                赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 结束位, 数)
                赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 起始位, 流程压入 [X], 位置)
                赋值 (匿名参数_1018 [段], 行 [数], 起始位, 流程压入 [X], 位置)
                赋值 (匿名参数_1018 [段], 行 [数], 结束位, 数)
            .判断结束
            删除成员 (流程压入, X, 1)
        .默认
            赋值 (错误.值, 16)
            赋值 (错误.文本, “条件结束”)
            返回 (错误)
        .判断结束
        
    .判断 (或者 (等于 (匿名参数_1018 [段], 行 [数], 命令, “否则如果”), 等于 (匿名参数_1018 [段], 行 [数], 命令, “否则”)))
        赋值 (X, 取数组成员数 (流程压入))
        .如果 (大于 (X, 0))
            .判断开始 (等于 (流程压入 [X], 类型, “如果”))
                赋值 (Y, 取数组成员数 (流程中转))
                .如果 (大于 (Y, 0))
                    赋值 (匿名参数_1018 [段], 行 [中转位置] [Y], 中专位, 数)
                .否则
                    赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 中专位, 数)
                .如果结束
                赋值 (Y, 相加 (Y, 1))
                重定义数组 (流程中转, 真, Y)
                赋值 (流程中转 [Y], 中转层, X)
                赋值 (T, 取数组成员数 (流程中转 [Y], 中转))
                .如果真 (不等于 (流程中转 [Y], 中转 [T], 类型, “”))
                    赋值 (T, 相加 (T, 1))
                    重定义数组 (流程中转 [Y], 中转, 真, T)
                .如果真结束
                赋值 (流程中转 [Y], 中转 [T], 类型, “如果”)
                赋值 (流程中转 [Y], 中转 [T], 位置, 数)
            .判断 (或者 (等于 (流程压入 [X], 类型, “图像出现”), 等于 (流程压入 [X], 类型, “某点颜色”)))
                .如果 (等于 (匿名参数_1018 [段], 行 [数], 命令, “否则”))
                    赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 中专位, 数)
                    赋值 (Y, 取数组成员数 (流程中转))
                    .如果 (大于 (Y, 0))
                        赋值 (匿名参数_1018 [段], 行 [中转位置] [Y], 中专位, 数)
                    .否则
                        赋值 (匿名参数_1018 [段], 行 [流程压入] [X], 位置, 中专位, 数)
                    .如果结束
                    赋值 (T, 取数组成员数 (流程中转 [Y], 中转))
                    .如果真 (不等于 (流程中转 [Y], 中转 [T], 类型, “”))
                        赋值 (T, 相加 (T, 1))
                        重定义数组 (流程中转 [Y], 中转, 真, T)
                    .如果真结束
                    .如果真 (大于 (T, 1))
                        赋值 (错误.值, 18)
                        赋值 (错误.文本, 匿名参数_1018 [段], 行 [数], 命令)
                        返回 (错误)
                    .如果真结束
                    赋值 (流程中转 [Y], 中转 [T], 类型, 流程压入 [X], 类型)
                    赋值 (流程中转 [Y], 中转 [T], 位置, 数)
                .否则
                    赋值 (错误.值, 19)
                    赋值 (错误.文本, 匿名参数_1018 [段], 行 [数], 命令)
                    返回 (错误)
                .如果结束
                
            .默认
                赋值 (错误.值, 19)
                赋值 (错误.文本, 匿名参数_1018 [段], 行 [数], 命令)
                返回 (错误)
            .判断结束
            
        .否则
            赋值 (错误.值, 16)
            赋值 (错误.文本, “条件结束”)
            返回 (错误)
        .如果结束
        
    .默认
        
    .判断结束
    
    .判断开始 (或者 (等于 (匿名参数_1018 [段], 行 [数], 命令, “如果”), 等于 (匿名参数_1018 [段], 行 [数], 命令, “否则如果”)))
        赋值 (错误, 去除括号 (元素, 匿名参数_1018 [段], 变量, “逻辑型”))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        赋值 (错误, 取回逻辑值 (元素, 匿名参数_1018 [段], 变量, 取回))
        .如果真 (不等于 (错误.值, -1))
            返回 (错误)
        .如果真结束
        
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “循环”))
        .判断开始 (等于 (取数组成员数 (元素), 1))
            .如果真 (小于或等于 (到数值 (元素 [1].文本), 0))
                赋值 (错误.值, 21)
                赋值 (错误.文本, 元素 [1].文本)
                返回 (错误)
            .如果真结束
            
        .默认
            
        .判断结束
        
    .判断 (等于 (匿名参数_1018 [段], 行 [数], 命令, “返回”))
        
    .默认
        
    .判断结束
    
.默认
    赋值 (函数信息, 函数信息 (元素 [1].文本))
    .判断开始 (不等于 (函数信息.返回值, “错误”))
        
    .判断 (函数元素 (元素 [1].文本, 函数信息))
        
    .默认
        赋值 (错误.值, 3)
        赋值 (错误.文本, 元素 [1].文本)
        返回 (错误)
    .判断结束
    .如果真 (不等于 (元素 [取数组成员数 (元素)].文本, “)”))
        赋值 (错误.值, 17)
        赋值 (错误.文本, 元素 [1].文本)
        返回 (错误)
    .如果真结束
    
    赋值 (数, 取数组成员数 (匿名参数_1018 [段], 行))
    .如果真 (不等于 (匿名参数_1018 [段], 行 [数], 行信息, “”))
        赋值 (数, 相加 (数, 1))
    .如果真结束
    重定义数组 (匿名参数_1018 [段], 行, 真, 数)
    赋值 (匿名参数_1018 [段], 行 [数], 行信息, “命令”)
    赋值 (匿名参数_1018 [段], 行 [数], 词元素, 元素)
    赋值 (错误, 去除括号 (元素, 匿名参数_1018 [段], 变量, “文本型”))
    .如果真 (不等于 (错误.值, -1))
        返回 (错误)
    .如果真结束
     ' 错误 ＝ 处理命令 (元素, 函数 [段].变量, 临时元素)
     ' .如果真 (不等于 (错误.值, -1))
         ' 返回 (错误)
    .如果真结束
    
.判断结束
返回 (错误) ' 存在错误的赋值表达式。

.程序集 函数程序集, , , 

.程序集变量 按下键, 文本型, , , 
.程序集变量 是否按下, 整数型, , , 
.子程序 函数信息, 函数信息, , 
.参数 命令, 文本型, , 

.局部变量 返回值, 函数信息, , , 

.判断开始 (等于 (命令, “取绝对值”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “取整”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “四舍五入”))
    赋值 (返回值.参数, “数值型,数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求次方”))
    赋值 (返回值.参数, “数值型,数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求平方根”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求正弦”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求余弦”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求正切”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求反正切”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求自然对数”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “求反对数”))
    赋值 (返回值.参数, “数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “取随机数”))
    赋值 (返回值.参数, “数值型,数值型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “取文本长度”))
    赋值 (返回值.返回值, “数值型”)
    赋值 (返回值.参数, “文本型”)
.判断 (等于 (命令, “取代码”))
    赋值 (返回值.返回值, “数值型”)
    赋值 (返回值.参数, “文本型”)
.判断 (等于 (命令, “寻找文本”))
    赋值 (返回值.返回值, “数值型”)
    赋值 (返回值.参数, “文本型,文本型”)
.判断 (等于 (命令, “倒找文本”))
    赋值 (返回值.返回值, “数值型”)
    赋值 (返回值.参数, “文本型,文本型”)
.判断 (等于 (命令, “到数值”))
    赋值 (返回值.参数, “通用型”)
    赋值 (返回值.返回值, “数值型”)
.判断 (等于 (命令, “取启动时间”))
    赋值 (返回值.返回值, “数值型”)
    
     ' #########################以上为返回数值型
.判断 (等于 (命令, “进制转换”))
    赋值 (返回值.参数, “文本型,数值型,数值型”)
    赋值 (返回值.返回值, “文本型”)
.判断 (等于 (命令, “取文本左边”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,数值型”)
.判断 (等于 (命令, “取文本右边”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,数值型”)
.判断 (等于 (命令, “取文本中间”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,数值型,数值型”)
.判断 (等于 (命令, “字符”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “数值型”)
.判断 (等于 (命令, “到大写”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型”)
.判断 (等于 (命令, “到小写 ”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型”)
.判断 (等于 (命令, “到文本”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “通用型”)
.判断 (等于 (命令, “文本替换”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,数值型,数值型,文本型”)
.判断 (等于 (命令, “子文本替换”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,文本型,文本型”)
.判断 (等于 (命令, “取剪辑板文本”))
    赋值 (返回值.返回值, “文本型”)
.判断 (等于 (命令, “读配置项”))
    赋值 (返回值.返回值, “文本型”)
    赋值 (返回值.参数, “文本型,文本型,文本型”)
.判断 (等于 (命令, “取运行目录”))
    赋值 (返回值.返回值, “文本型”)
    
    
.判断 (等于 (命令, “取反”))
    赋值 (返回值.返回值, “逻辑型”)
    赋值 (返回值.参数, “逻辑型”)
.判断 (等于 (命令, “图像出现”))
    赋值 (返回值.返回值, “逻辑型”)
    赋值 (返回值.参数, “文本型,文本型,数值型,数值型,数值型,数值型,数值型,逻辑型,数值型,数值型”)
.判断 (等于 (命令, “某点颜色”))
    赋值 (返回值.返回值, “逻辑型”)
    赋值 (返回值.参数, “文本型,数值型,数值型,数值型,数值型,数值型”)
.判断 (等于 (命令, “等待按键”))
    赋值 (返回值.返回值, “逻辑型”)
    赋值 (返回值.参数, “文本型”)
    
    
.判断 (等于 (命令, “输入文本”))
    赋值 (返回值.参数, “文本型”)
.判断 (等于 (命令, “模拟点击”))
    赋值 (返回值.参数, “文本型,数值型,数值型,文本型,文本型”)
.判断 (等于 (命令, “模拟按键”))
    赋值 (返回值.参数, “文本型,文本型”)
.判断 (等于 (命令, “鸣叫”))
    
.判断 (等于 (命令, “延时”))
    赋值 (返回值.参数, “数值型”)
.判断 (等于 (命令, “信息框”))
    赋值 (返回值.参数, “通用型”)
.判断 (等于 (命令, “运行”))
    赋值 (返回值.参数, “文本型”)
.默认
    赋值 (返回值.返回值, “错误”)
.判断结束
赋值 (返回值.函数名, 命令)
返回 (返回值)


.子程序 函数处理, 文本型, , 
.参数 命令, 文本型, , 
.参数 参数一, 文本型, 可空, 
.参数 参数二, 文本型, 可空, 
.参数 参数三, 文本型, 可空, 
.参数 参数四, 文本型, 可空, 
.参数 参数五, 文本型, 可空, 
.参数 参数六, 文本型, 可空, 
.参数 参数七, 文本型, 可空, 
.参数 参数八, 文本型, 可空, 
.参数 参数9, 文本型, 可空, 
.参数 参数10, 文本型, 可空, 

.局部变量 快照, 字节集, , , 
.局部变量 对比图, 字节集, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 坐标, POINTAPI_, , , 
.局部变量 是否按下某键, 逻辑型, , , 
.局部变量 临时值, 空白型, , , 
.局部变量 R, 空白型, , , 
.局部变量 G, 空白型, , , 
.局部变量 B, 空白型, , , 
.局部变量 坐标2, POINTAPI, , , 
.局部变量 返回值, 文本型, , , 

.判断开始 (等于 (命令, “模拟点击”))
    模拟点击 (参数一, 参数二, 参数三, 参数四, 参数五)
.判断 (等于 (命令, “模拟按键”))
    未知支持库函数_1 (取键值 (到大写 (参数一)), 取键值 (到大写 (参数二)), 取键值 (到大写 (参数三)))
.判断 (等于 (命令, “模拟滚轮”))
    
.判断 (等于 (命令, “组合键”))
    
.判断 (等于 (命令, “移动鼠标”))
    
.判断 (等于 (命令, “鸣叫”))
    鸣叫_ (900, 100)
.判断 (等于 (命令, “播放MP3”))
    
.判断 (等于 (命令, “写配置项”))
    
.判断 (等于 (命令, “延时”))
    延时_ (到数值 (参数一))
.判断 (等于 (命令, “输入框”))
    
.判断 (等于 (命令, “信息框”))
    信息框 (参数一, 0, “按键魔方5.0”)
.判断 (等于 (命令, “运行”))
    运行 (参数一, 假, )
.判断 (等于 (命令, “连续赋值”))
    
.判断 (等于 (命令, “输入文本”))
    粘贴文本 (参数一)
.判断 (等于 (命令, “置剪辑板文本”))
    
.判断 (等于 (命令, “清除剪辑板”))
    
.判断 (等于 (命令, “取屏幕宽度”))
    
.判断 (等于 (命令, “取屏幕高度”))
    
    
.判断 (等于 (命令, “取反”))
    .判断开始 (等于 (参数一, “真”))
        赋值 (返回值, “假”)
    .默认
        赋值 (返回值, “真”)
    .判断结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断 (等于 (命令, “图像出现”))
    输出调试文本 (相加 (取运行目录 (), “\”, 参数一, “.am”))
    赋值 (文件号, 打开文件 (相加 (取运行目录 (), “\”, 参数一, “.am”), , ))
    赋值 (对比图, 读入字节集 (文件号, 取文件长度 (文件号)))
    关闭文件 (文件号)
    .判断开始 (等于 (参数二, “窗口坐标”))
        赋值 (文件号, 前台窗口句柄 ())
        客户坐标 (坐标)
        赋值 (坐标.X, 相减 (到数值 (参数三), 坐标.X))
        赋值 (坐标.Y, 相减 (到数值 (参数四), 坐标.Y))
        赋值 (快照, 图像_快照 ())
    .默认
        赋值 (坐标.X, 到数值 (参数三))
        赋值 (坐标.Y, 到数值 (参数四))
        赋值 (快照, 图像_快照 ())
    .判断结束
    .判断开始 (新找图 (快照, 对比图, 坐标.X, 坐标.Y, 相加 (相减 (到数值 (参数五), 到数值 (参数三)), 坐标.X), 相加 (相减 (到数值 (参数六), 到数值 (参数四)), 坐标.Y), 到数值 (参数七), 参数八, 参数9, 参数10))
        赋值 (返回值, “ 真”)
    .默认
        赋值 (返回值, “假”)
    .判断结束
    
.判断 (等于 (命令, “某点颜色”))
    .判断开始 (等于 (参数一, “窗口坐标”))
        赋值 (文件号, 前台窗口句柄 ())
        客户坐标 (坐标)
        赋值 (坐标.X, 相减 (到数值 (参数二), 坐标.X))
        赋值 (坐标.Y, 相减 (到数值 (参数三), 坐标.Y))
    .默认
        赋值 (坐标.X, 到数值 (参数二))
        赋值 (坐标.Y, 到数值 (参数三))
    .判断结束
    赋值 (临时值, 图像_取点颜色 (坐标.X, 坐标.Y, , 真))
    .判断开始 (小于 (相减 (临时值, 取颜色值 (到数值 (参数四), 到数值 (参数五), 到数值 (参数六))), 相乘 (到数值 (参数七), 355)))
        赋值 (返回值, “ 真”)
        返回 (返回值)
    .默认
        赋值 (返回值, “假”)
        返回 (返回值)
    .判断结束
    
.判断 (等于 (命令, “中心找色”))
    
.判断 (等于 (命令, “按下某键”))
    赋值 (按下键, 参数一)
    按下某键 (取键值 (到大写 (参数一)))
    .判断循环首 (等于 (是否按下某键, 假))
        .判断开始 (等于 (是否按下, 2))
            赋值 (返回值, “真”)
            赋值 (是否按下, 0)
            返回 (返回值)
        .判断 (等于 (是否按下, 1))
            赋值 (返回值, “假”)
            赋值 (是否按下, 0)
            返回 (返回值)
        .默认
            处理事件 ()
            延时 (10)
        .判断结束
        
    .判断循环尾 ()
    
.判断 (等于 (命令, “鼠标指针”))
    
.判断 (等于 (命令, “取绝对值”))
    赋值 (返回值, 到文本 (取绝对值 (到数值 (参数一))))
.判断 (等于 (命令, “取整”))
    赋值 (返回值, 到文本 (取整 (到数值 (参数一))))
.判断 (等于 (命令, “四舍五入”))
    赋值 (返回值, 到文本 (四舍五入 (到数值 (参数一), 0)))
.判断 (等于 (命令, “求次方”))
    赋值 (返回值, 到文本 (求次方 (到数值 (参数一), 到数值 (参数二))))
.判断 (等于 (命令, “求平方根”))
    赋值 (返回值, 到文本 (求平方根 (到数值 (参数一))))
.判断 (等于 (命令, “求正弦”))
    赋值 (返回值, 到文本 (求正弦 (相除 (相乘 (到数值 (参数一), #pi), 180))))
.判断 (等于 (命令, “求余弦”))
    赋值 (返回值, 到文本 (求余弦 (相除 (相乘 (到数值 (参数一), #pi), 180))))
.判断 (等于 (命令, “求正切”))
    赋值 (返回值, 到文本 (求正切 (相除 (相乘 (到数值 (参数一), #pi), 180))))
    
.判断 (等于 (命令, “求反正切”))
    赋值 (返回值, 到文本 (相除 (相乘 (求反正切 (到数值 (参数一)), 180), #pi)))
    
.判断 (等于 (命令, “求自然对数”))
    赋值 (返回值, 到文本 (求自然对数 (到数值 (参数一))))
    
.判断 (等于 (命令, “求反对数”))
    赋值 (返回值, 到文本 (求反对数 (到数值 (参数一))))
    
.判断 (等于 (命令, “取随机数”))
    赋值 (返回值, 到文本 (取随机数 (到数值 (参数一), 到数值 (参数二))))
.判断 (等于 (命令, “取数组成员数”))
     ' 到数值 (参数一)
    
     ' 返回 (取数组成员数 ())
.判断 (等于 (命令, “取代码”))
    赋值 (返回值, 到文本 (取键值 (参数一)))
    
.判断 (等于 (命令, “取文本长度”))
    赋值 (返回值, 到文本 (取文本长度 (参数一)))
    
.判断 (等于 (命令, “寻找文本”))
    赋值 (返回值, 到文本 (寻找文本 (参数一, 参数二, , 假)))
    
.判断 (等于 (命令, “倒找文本”))
    赋值 (返回值, 到文本 (倒找文本 (参数一, 参数二, , 假)))
    
.判断 (等于 (命令, “到数值”))
    赋值 (返回值, 到文本 (到数值 (参数一)))
    
.判断 (等于 (命令, “取启动时间”))
    赋值 (返回值, 到文本 (取启动时间 ()))
    
     ' #############################################################
.判断 (等于 (命令, “进制转换”))
    
    赋值 (返回值, 进制转换 (参数一, 到数值 (参数二), 到数值 (参数三)))
.判断 (等于 (命令, “取文本左边”))
    
    赋值 (返回值, 取文本左边 (参数一, 到数值 (参数二)))
.判断 (等于 (命令, “取文本右边”))
    
    赋值 (返回值, 取文本右边 (参数一, 到数值 (参数二)))
.判断 (等于 (命令, “取文本中间”))
    
    赋值 (返回值, 取文本中间 (参数一, 到数值 (参数二), 到数值 (参数三)))
.判断 (等于 (命令, “字符”))
    
    赋值 (返回值, 字符 (到数值 (参数一)))
.判断 (等于 (命令, “到大写”))
    
    赋值 (返回值, 到大写 (参数一))
.判断 (等于 (命令, “到小写”))
    
    赋值 (返回值, 到小写 (参数一))
.判断 (等于 (命令, “文本替换”))
    
    赋值 (返回值, 文本替换 (参数一, 到数值 (参数二), 到数值 (参数三), 参数四))
.判断 (等于 (命令, “子文本替换”))
    
    赋值 (返回值, 子文本替换 (参数一, 参数二, 参数三, , , 真))
.判断 (等于 (命令, “到文本”))
    赋值 (返回值, 到文本 (参数一))
.判断 (等于 (命令, “取剪辑板文本”))
    赋值 (返回值, 取剪辑板文本 ())
.判断 (等于 (命令, “读配置项”))
    赋值 (返回值, 读配置项 (参数一, 参数二, 参数三, ))
.判断 (等于 (命令, “取运行目录”))
    赋值 (返回值, 取运行目录 ())
     ' #########################################################
.默认
    
.判断结束
返回 (返回值)

.子程序 粘贴文本, 空白型, , 把一段文本粘贴到指定的控件内容中
.参数 文本内容, 文本型, , 欲贴出的文本，若参数一为空以[Shift+ins]组合键方式,反之用消息方式

.局部变量 坐标, POINTAPI, , , 

取光标位置 (坐标)
置剪辑板文本 (文本内容)
发送系统消息 (取指定点窗口句柄 (坐标.X, 坐标.Y), 770, 0, 0)

.子程序 新找图, 逻辑型, , 
.参数 参数, 字节集, , 
.参数 参数一, 字节集, , 
.参数 起始X, 整数型, , 
.参数 起始Y, 整数型, , 
.参数 结束X, 整数型, , 
.参数 结束Y, 整数型, , 
.参数 容错, 整数型, , 
.参数 透明, 文本型, , 
.参数 坐标X, 文本型, , 
.参数 坐标Y, 文本型, , 

.局部变量 大图, 位图, , , 
.局部变量 小图, 位图, , , 
.局部变量 大图宽, 空白型, , , 
.局部变量 大图高, 空白型, , , 
.局部变量 小图宽, 空白型, , , 
.局部变量 小图高, 空白型, , , 
.局部变量 基点, POINTAPI, , , 
.局部变量 对比点, POINTAPI, , , 
.局部变量 临时点, POINTAPI, , , 
.局部变量 基色, 空白型, , , 
.局部变量 对比色, 空白型, , , 
.局部变量 临时基色, 空白型, , , 
.局部变量 透明色, 空白型, , , 

大图.载入数据 (参数)
小图.载入数据 (参数一)
赋值 (大图宽, 大图.取宽度 ())
赋值 (大图高, 大图.取高度 ())
赋值 (小图宽, 小图.取宽度 ())
赋值 (小图高, 小图.取高度 ())
.判断开始 (等于 (透明, “黑”))
    赋值 (透明色, 0)
.默认
    赋值 (透明色, 16777215)
.判断结束
赋值 (容错, 取绝对值 (整除 (相乘 (容错, 355, 16777215), 100000)))
.判断循环首 (大于 (小图宽, 基点.X))
    .判断循环首 (大于 (小图高, 基点.Y))
        赋值 (基色, 小图.取某点颜色 (基点.X, 基点.Y))
        .如果真 (不等于 (基色, 透明色))
            跳出循环 ()
        .如果真结束
        赋值 (基点.Y, 相加 (基点.Y, 1))
    .判断循环尾 ()
    .如果真 (不等于 (基色, 透明色))
        跳出循环 ()
    .如果真结束
    赋值 (基点.X, 相加 (基点.X, 1))
    赋值 (基点.Y, 0)
.判断循环尾 ()
.判断循环首 (大于 (结束X, 起始X))
    赋值 (起始X, 相加 (起始X, 1))
    .如果真 (小于 (结束X, 起始X))
        返回 (假)
    .如果真结束
    .判断循环首 (大于 (结束Y, 起始Y))
        赋值 (起始Y, 相加 (起始Y, 1))
        赋值 (对比色, 大图.取某点颜色 (起始X, 相加 (起始Y, 基点.Y)))
        .判断开始 (小于 (结束Y, 起始Y))
            跳出循环 ()
        .判断 (小于或等于 (取绝对值 (相减 (对比色, 基色)), 容错))
            赋值 (临时点.X, 基点.X)
            .判断循环首 (大于 (小图宽, 临时点.X))
                赋值 (临时点.X, 相加 (临时点.X, 1))
                .判断循环首 (大于 (小图高, 临时点.Y))
                    赋值 (对比点.X, 相减 (相加 (起始X, 临时点.X), 2))
                    赋值 (对比点.Y, 相加 (起始Y, 临时点.Y))
                    赋值 (对比色, 大图.取某点颜色 (对比点.X, 对比点.Y))
                    赋值 (临时基色, 小图.取某点颜色 (临时点.X, 临时点.Y))
                    .判断开始 (并且 (等于 (小图宽, 相加 (临时点.X, 1)), 等于 (小图高, 相加 (临时点.Y, 1))))
                        赋值 (坐标X, 到文本 (起始X))
                        赋值 (坐标Y, 到文本 (相加 (起始Y, 1)))
                        返回 (真)
                    .判断 (等于 (临时基色, 透明色))
                        赋值 (临时点.Y, 相加 (临时点.Y, 1))
                        到循环尾 ()
                    .判断 (大于 (取绝对值 (相减 (对比色, 临时基色)), 容错))
                        跳出循环 ()
                    .默认
                        
                    .判断结束
                    赋值 (临时点.Y, 相加 (临时点.Y, 1))
                .判断循环尾 ()
                赋值 (临时点.Y, 0)
                .如果真 (并且 (大于 (取绝对值 (相减 (对比色, 临时基色)), 容错), 不等于 (临时基色, 透明色)))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (临时点.X, 0)
        .默认
            
        .判断结束
        
    .判断循环尾 ()
    赋值 (起始Y, 0)
.判断循环尾 ()
返回 (假)

.子程序 模拟点击, 空白型, , 
.参数 参数一, 文本型, , 
.参数 参数二, 文本型, , 
.参数 参数三, 文本型, , 
.参数 参数四, 文本型, , 
.参数 参数五, 文本型, , 

.局部变量 临时坐标X, 整数型, , , 
.局部变量 临时坐标Y, 整数型, , , 
.局部变量 坐标, POINTAPI_, , , 

.判断开始 (等于 (参数一, “屏幕坐标”))
    赋值 (临时坐标X, 到数值 (参数二))
    赋值 (临时坐标Y, 到数值 (参数三))
.默认
    客户坐标 (坐标)
    赋值 (临时坐标X, 相减 (到数值 (参数二), 坐标.X))
    赋值 (临时坐标Y, 相减 (到数值 (参数三), 坐标.Y))
.判断结束
鼠标控制 (参数四, 参数五, 临时坐标X, 临时坐标Y)

.子程序 进制转换, 文本型, , 进行转换的子程序
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 
.参数 转换的进制, 整数型, , 

.局部变量 欲转换文本, 文本型, , , 输入的文本串
.局部变量 临时文本, 文本型, , , 存放从输入的文本串中取出的一个文本
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量1, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 次方数, 未知类型0x3000A, , , 每一位数字对应的10的次方数
.局部变量 转换的进制大数1, 未知类型0x3000A, , , 要转换的进制-1
.局部变量 转换的进制大数, 未知类型0x3000A, , , 要转换的进制
.局部变量 被转换进制大数, 未知类型0x3000A, , , 被转换的进制
.局部变量 临时大数, 未知类型0x3000A, , , 将被转换数字转换成的大数
.局部变量 余数大数, 未知类型0x3000A, , , 存放求出的余数大数
.局部变量 数值1大数, 未知类型0x3000A, , , 只存放1
.局部变量 临时大数1, 未知类型0x3000A, , , 将被转换数字的每一位转换成的大数
.局部变量 临时变量, 整数型, , , 

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 36), 大于 (转换的进制, 36))) ' 判断两个“进制系数”是否正确
    返回 (“参数错误-进制只能在2-36之间”)
.如果真结束
赋值 (被转换文本, 到大写 (到半角 (被转换文本))) ' 规范参数
.变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1) ' 判断输入的数字文本是否有效
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量1, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, 被转换文本, “不是一个有效的”, 取文本左边 (数值到金额 (被转换进制, 真), 相减 (取文本长度 (数值到金额 (被转换进制, 真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
     ' 全部查找完毕
    .如果真 (等于 (计次变量1, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.变量循环尾 ()

 ' 如果临时文本不为空，说明此数字文本无效！
.如果真 (不等于 (临时文本, “”))
    返回 (临时文本)
.如果真结束
 ' 以上为数据正确性校验处理代码

.如果真 (等于 (被转换进制, 转换的进制)) ' 相同时，不用进行转换
    返回 (被转换文本)
.如果真结束

.变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1) ' 先将要转换的数字放入大数中
    次方数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
    被转换进制大数.未知支持库函数_69 (被转换进制)
    .计次循环首 (相减 (取文本长度 (被转换文本), 计次变量1), 计次变量2) ' 求次方
        赋值 (次方数, 次方数.未知支持库函数_94 (被转换进制大数))
    .计次循环尾 ()
    赋值 (临时变量, 相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量1, 1), , 真), 1))
    临时大数1.未知支持库函数_69 (临时变量)
    赋值 (临时大数1, 临时大数1.未知支持库函数_94 (次方数))
    赋值 (临时大数, 临时大数1.未知支持库函数_92 (临时大数)) ' 临时大数即为最后转换成的大数
.变量循环尾 ()
转换的进制大数1.未知支持库函数_69 (相减 (转换的进制, 1))
转换的进制大数.未知支持库函数_69 (转换的进制)
数值1大数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
.判断循环首 (等于 (临时大数.未知支持库函数_86 (转换的进制大数1), 真)) ' 开始进制转换,除进制数取余数
    赋值 (余数大数, 临时大数.未知支持库函数_97 (转换的进制大数)) ' 求出的余数
    赋值 (临时大数1, 余数大数.未知支持库函数_92 (数值1大数)) ' 求出的余数＋1
    赋值 (临时数值, 到数值 (临时大数1.未知支持库函数_68 ())) ' 最后的余数
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 临时数值, 1), 欲转换文本)) ' 找出每一个余数对应的数字
    赋值 (临时大数, 临时大数.未知支持库函数_95 (转换的进制大数, 10)) ' 取出剩余的数字
    赋值 (临时大数, 临时大数.未知支持库函数_90 ())
.判断循环尾 ()
赋值 (临时数值, 临时大数.未知支持库函数_77 ()) ' 最后剩下的余数
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)

.子程序 按下某键, 空白型, , 
.参数 键码, 整数型, , 

.局部变量 热键集, 热键数据, , , 

重定义数组 (热键集.触发条键, 假, 1)
赋值 (热键集.触发条键 [1], 键码)
赋值 (热键集.哈希标符, 按下键)
赋值 (热键集.函数指针, &监控某件)
赋值 (热键集.异步时间, -1)
绑定热键 (热键集)
监视热键 (0)

.子程序 监控某件, 空白型, , 
.参数 哈希标符, 文本型, , 
.参数 键状态, 空白型, , 

.如果真 (等于 (键状态, 1)) ' 按下热键
    .判断开始 (等于 (哈希标符, 按下键))
        赋值 (是否按下, 2)
        取消热键 (按下键)
    .默认
        赋值 (是否按下, 1)
        取消热键 (按下键)
    .判断结束
    
.如果真结束


.程序集 执行程序集, , , 

.子程序 执行命令, 文本型, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 参数A, 文本型, 可空, 

.局部变量 错误, 错误, , , 
.局部变量 函数信息, 函数信息, , , 
.局部变量 X, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 T, 空白型, , , 
.局部变量 参数, 文本型, , "0", 
.局部变量 位置B, 整数型, , , 
.局部变量 参数元素, 行元素, , "1", 
.局部变量 S, 整数型, , , 
.局部变量 函数参数, 文本型, , "0", 
.局部变量 取回, 文本型, , , 
.局部变量 A, 整数型, , , 
.局部变量 临时类型, 文本型, , , 
.局部变量 临时参数, 整数型, , , 
.局部变量 命令, 逻辑型, , , 

赋值 (X, 相减 (取数组成员数 (元素), 1))
赋值 (函数信息, 函数信息 (元素 [1].文本))
.判断开始 (不等于 (函数信息.返回值, “错误”))
    赋值 (命令, 真)
.默认
    函数元素 (元素 [1].文本, 函数信息)
.判断结束
赋值 (I, 2)
.判断循环首 (大于 (X, I))
    赋值 (I, 相加 (I, 1))
    .判断开始 (等于 (元素 [I], 文本, “,”))
        赋值 (Y, 相加 (取数组成员数 (参数元素), 1))
        重定义数组 (参数元素, 真, Y)
    .默认
        赋值 (Y, 取数组成员数 (参数元素))
        赋值 (T, 取数组成员数 (参数元素 [Y], 词元素))
        .如果真 (不等于 (参数元素 [Y], 词元素 [T], 文本, “”))
            赋值 (T, 相加 (T, 1))
            重定义数组 (参数元素 [Y], 词元素, 真, T)
        .如果真结束
        赋值 (参数元素 [Y], 词元素 [T], 文本, 元素 [I], 文本)
        赋值 (参数元素 [Y], 词元素 [T], 参数, 元素 [I], 参数)
        赋值 (参数元素 [Y], 词元素 [T], 类型, 元素 [I], 类型)
    .判断结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断循环尾 ()
赋值 (参数, 分割文本 (函数信息.参数, “,”, ))
赋值 (X, 取数组成员数 (参数))
赋值 (S, 取数组成员数 (参数元素))
.如果真 (等于 (X, 0))
    赋值 (S, 0)
.如果真结束
重定义数组 (函数参数, 假, X)
.计次循环首 (X, A)
    .判断开始 (等于 (取数组成员数 (参数元素 [A], 词元素), 1))
        .判断开始 (或者 (等于 (参数元素 [A], 词元素 [1].参数, 1), 等于 (参数元素 [A], 词元素 [1].参数, 2), 等于 (参数元素 [A], 词元素 [1].参数, 3)))
            赋值 (函数参数 [A], 参数元素 [A], 词元素 [1].文本)
        .默认
            取变量值 (参数元素 [A], 词元素 [1].文本, 变量, 临时类型, 临时参数, 取回)
            赋值 (函数参数 [A], 取回)
            赋值 (取回, “”)
        .判断结束
        到循环尾 ()
    .判断 (等于 (参数 [A], “文本型”))
        取回数据 (参数元素 [A], 词元素, 变量, 取回, “文本型”)
    .判断 (等于 (参数 [A], “数值型”))
        取回数据 (参数元素 [A], 词元素, 变量, 取回, “数值型”)
    .判断 (等于 (参数 [A], “逻辑型”))
        取回逻辑值 (参数元素 [A], 词元素, 变量, 取回)
    .判断 (等于 (参数 [A], “通用型”))
        取回数据 (参数元素 [A], 词元素, 变量, 取回, “文本型”)
    .默认
        
    .判断结束
    赋值 (函数参数 [A], 取回)
    赋值 (取回, “”)
.计次循环尾 ()
.判断开始 (命令)
    赋值 (取回, 处理函数 (函数参数, 元素 [1].文本, 变量))
.默认
    赋值 (取回, 程序集处理 (函数参数, 元素 [1].文本))
.判断结束
赋值 (参数A, 函数信息.返回值)
返回 (取回)

.子程序 执行去除括号, 逻辑型, , 去除括号
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 
.参数 类型, 文本型, , 

.局部变量 错误, 错误, , , 
.局部变量 Z, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 位置B, 空白型, , , 
.局部变量 临时元素, 元素, , , 
.局部变量 位置A, 整数型, , , 
.局部变量 修正元素, 元素, , "0", 
.局部变量 取回, 文本型, , , 
.局部变量 类型A, 文本型, , , 

赋值 (Z, 取数组成员数 (元素))
.判断循环首 (大于 (Z, I))
    赋值 (Z, 取数组成员数 (元素))
    .计次循环首 (Z, I)
        .如果真 (等于 (元素 [I], 文本, “)”))
            赋值 (位置B, 相减 (I, 1))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (等于 (位置B, 0))
        .如果 (等于 (Z, 1))
            返回 (真)
        .否则
            返回 (假)
        .如果结束
        
    .如果真结束
    .判断循环首 (大于 (I, 1))
        赋值 (I, 相减 (I, 1))
        .如果真 (等于 (元素 [I], 文本, “(”))
            赋值 (位置A, I)
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    .判断开始 (等于 (位置A, 1))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        .判断开始 (等于 (类型, “逻辑型”))
            执行取逻辑值 (修正元素, 变量)
        .默认
            取回数据 (修正元素, 变量, 取回, “文本型”)
        .判断结束
        赋值 (临时元素.文本, 取回)
        .判断开始 (等于 (类型, “数值型”))
            赋值 (临时元素.参数, 2)
        .默认
            赋值 (临时元素.参数, 1)
        .判断结束
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .判断 (等于 (元素 [相减 (I, 1)].参数, 5))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 相加 (位置B, 1))
        删除成员 (修正元素, 1, 相减 (I, 2))
        赋值 (临时元素.文本, 执行命令 (修正元素, 变量, 类型A))
        .判断开始 (等于 (类型A, “数值型”))
            赋值 (临时元素.参数, 2)
        .判断 (等于 (类型A, “文本型”))
            赋值 (临时元素.参数, 1)
        .判断 (等于 (类型A, “逻辑型”))
            赋值 (临时元素.参数, 3)
        .默认
            
        .判断结束
        删除成员 (元素, 相减 (位置A, 1), 相加 (相减 (位置B, 位置A), 3))
        插入成员 (元素, 相减 (位置A, 1), 临时元素)
    .判断 (或者 (等于 (元素 [相减 (I, 1)].参数, 6), 等于 (元素 [相减 (I, 1)].参数, 7)))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        赋值 (错误, 取回数据 (修正元素, 变量, 取回, “文本型”))
        赋值 (临时元素.文本, 取回)
        .判断开始 (等于 (类型, “数值型”))
            赋值 (临时元素.参数, 2)
        .默认
            赋值 (临时元素.参数, 1)
        .判断结束
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .判断 (等于 (元素 [相减 (I, 1)].参数, 11))
        赋值 (修正元素, 元素)
        重定义数组 (修正元素, 真, 位置B)
        删除成员 (修正元素, 1, I)
        赋值 (错误, 取回逻辑值 (修正元素, 变量, 取回))
        赋值 (临时元素.文本, 取回)
        赋值 (临时元素.参数, 3)
        删除成员 (元素, 位置A, 相加 (相减 (位置B, 位置A), 2))
        插入成员 (元素, 位置A, 临时元素)
    .默认
        
    .判断结束
    连续赋值 (0, I, 位置B, 位置A)
.判断循环尾 ()
返回 (假)

.子程序 执行取逻辑值, 逻辑型, , 
.参数 元素, 元素, 数组, 
.参数 变量, 变量, 数组, 

.局部变量 取回, 文本型, , , 
.局部变量 位置B, 整数型, , , 
.局部变量 错误, 错误, , , 
.局部变量 且或, 行元素, , "1", 
.局部变量 T, 整数型, , , 
.局部变量 与或, 逻辑型, , , 
.局部变量 X, 整数型, , , 
.局部变量 A, 整数型, , , 

赋值 (位置B, 取数组成员数 (元素))
赋值 (T, 0)
.判断循环首 (大于 (位置B, T))
    赋值 (T, 相加 (T, 1))
    .判断开始 (等于 (元素 [T], 文本, “且”))
        赋值 (与或, 真)
        赋值 (X, 相加 (取数组成员数 (且或), 1))
        重定义数组 (且或, 真, X)
    .默认
        赋值 (X, 取数组成员数 (且或))
        赋值 (A, 取数组成员数 (且或 [X], 词元素))
        .如果真 (不等于 (且或 [X], 词元素 [A], 文本, “”))
            赋值 (A, 相加 (A, 1))
            重定义数组 (且或 [X], 词元素, 真, A)
        .如果真结束
        赋值 (且或 [X], 词元素 [A], 文本, 元素 [T], 文本)
        赋值 (且或 [X], 词元素 [A], 参数, 元素 [T], 参数)
        赋值 (且或 [X], 词元素 [A], 类型, 元素 [T], 类型)
    .判断结束
    
.判断循环尾 ()
.判断开始 (与或)
    且元素分析 (且或, 变量, 取回)
    
.默认
    赋值 (T, 0)
    .判断循环首 (大于 (位置B, T))
        赋值 (T, 相加 (T, 1))
        .判断开始 (等于 (元素 [T], 文本, “或”))
            赋值 (与或, 真)
            赋值 (X, 相加 (取数组成员数 (且或), 1))
            重定义数组 (且或, 真, X)
        .默认
            赋值 (X, 取数组成员数 (且或))
            赋值 (A, 取数组成员数 (且或 [X], 词元素))
            .如果真 (不等于 (且或 [X], 词元素 [A], 文本, “”))
                赋值 (A, 相加 (A, 1))
                重定义数组 (且或 [X], 词元素, 真, A)
            .如果真结束
            赋值 (且或 [X], 词元素 [A], 文本, 元素 [T], 文本)
            赋值 (且或 [X], 词元素 [A], 参数, 元素 [T], 参数)
            赋值 (且或 [X], 词元素 [A], 类型, 元素 [T], 类型)
        .判断结束
        
    .判断循环尾 ()
    .判断开始 (与或)
        或元素分析 (且或, 变量, 取回)
        
    .默认
        取回数据 (元素, 变量, 取回, “逻辑型”)
        
    .判断结束
    
.判断结束
.判断开始 (等于 (取回, “真”))
    返回 (真)
.默认
    返回 (假)
.判断结束


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 绑定热键, 空白型, , 绑定一个枫式热键。
.参数 _热键集, 热键数据, , 欲绑定的热键对象。



.子程序 取消热键, 逻辑型, , 取消一个枫式热键。成功返回真，否则返回假。
.参数 哈希标符, 文本型, 可空, 欲取消热键的哈希标符。（注意：如果参数为空则取消所有已绑定的热键！）



.子程序 监视热键, 空白型, , 系统开始自动监视热键。（特别提醒：刷新时间设为0时仍会监视热键，而如果刷新时间设为负数时则会停止监视！）
.参数 刷新时间, 整数型, 可空, 设置热键监视的刷新时间。（注意：如果为本参数小于零则暂停监视！）



.子程序 终止热键, 逻辑型, , 终止热键成功返回真，系统未监视热键返回假。


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 图像_取屏幕宽度, 整数型, , 单位为像素。


.子程序 图像_取屏幕高度, 整数型, , 单位为像素。


.子程序 图像_快照, 字节集, , 功能与支持库基本相同。
.参数 窗口句柄, 整数型, 可空, 指定欲捕获其显示内容的窗口。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。
.参数 取半透明, 逻辑型, 可空, 



.子程序 图像_图片句柄取图片, 字节集, , 返回的图片格式为位图。
.参数 hBitmap, 整数型, , 



.子程序 图像_窗口快照, 字节集, , 能对被其他窗口挡住的未最小化窗口进行截图。
.参数 窗口句柄, 整数型, 可空, 要截取的窗口的句柄。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_释放图片句柄, 逻辑型, , 用了 图像_取图片句柄() 得到的句柄后一定要用本函数释放，不然会造成内存泄露。
.参数 图像句柄, 整数型, , 



.子程序 图像_取图片句柄, 整数型, , 支持bmp、gif、jpg、cur、ico等。感谢叮咚茶提供的极强悍源码，没有这个函数整个模块没法做了。。。
.参数 图形数据, 字节集, , 
.参数 输出宽度, 整数型, 可空, 
.参数 输出高度, 整数型, 可空, 



.子程序 图像_置图片尺寸, 字节集, , 返回新的图片数据。
.参数 原图片, 字节集, , 
.参数 新宽度, 整数型, 可空, 留空默认保持原大小，下同。
.参数 新高度, 整数型, 可空, 



.子程序 图像_取图片宽度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取图片高度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取剪贴板图片, 字节集, , 


.子程序 图像_置剪贴板图片, 逻辑型, , 
.参数 图片, 字节集, , 



.子程序 图像_转换图片格式, 字节集, , 支持bmp、jpg、gif、tiff、png互转。感谢凌晨孤星提供如此强大的代码。。。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换后的格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png



.子程序 图像_截取屏幕区域, 字节集, , 
.参数 截取范围, 矩形区域, , 
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_取点颜色, 整数型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 窗口句柄, 整数型, 可空, 指定欲捕获其显示内容的窗口。为空则捕捉全屏。
.参数 取半透明, 逻辑型, 可空, 



.子程序 前台窗口句柄, 整数型, , 


.子程序 鼠标控制, 空白型, , 
.参数 控制, 文本型, , '1.左键单击，'2.左键按住，'3.左键弹起，
.参数 键, 文本型, , 
.参数 水平坐标, 整数型, , ，7.中键单击，8.中键按住
.参数 垂直坐标, 整数型, , ，9.中键弹起，10.左键双击，11.右键双击



.子程序 客户坐标, 逻辑型, , 
.参数 坐标, POINTAPI_, 参考, 



.子程序 鸣叫_, 空白型, , 
.参数 频率, 整数型, , 
.参数 时长, 整数型, , 



.子程序 延时_, 空白型, , 
.参数 微秒, 整数型, , 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒



.子程序 取键值, 整数型, , 根据键名取键码
.参数 键名, 文本型, , 




 ' 不属于任何一个程序集、类模块的函数：
