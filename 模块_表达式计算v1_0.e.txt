 ' 文件类型：Windows模块源码

 ' 程序名称：模块_表达式计算
 ' 程序描述：本模块用于对算术表达式求值
@备注:
Author's E-mail:nplyh@163.com
 ' 程序作者：Liang Yuan hai
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：nplyh@163.com
 ' 主页地址：
 ' 版权声明：版权所有(C) Liang Yuan hai
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 自定义_测试用例, , 
    .成员 表达式, 文本型, , , 
    .成员 得数, 文本型, , , 


.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 表达式操作, 类_表达式, , , 
.局部变量 表达式返回文本, 文本型, , , 
.局部变量 单个用例, 自定义_测试用例, , , 
.局部变量 测试正例, 自定义_测试用例, , "0", 
.局部变量 测试反例, 自定义_测试用例, , "0", 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

调试输出 (字符 (44))
 ' 正例

赋值 (单个用例.表达式, “8”)
赋值 (单个用例.得数, “8”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “1+2+3+4”)
赋值 (单个用例.得数, “10”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “88-1*5”)
赋值 (单个用例.得数, “83”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “1024/4*8”)
赋值 (单个用例.得数, “2048”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “1024/(4*8)”)
赋值 (单个用例.得数, “32”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “(20+2)*(6/2)”)
赋值 (单个用例.得数, “66”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “2*(6+2*(3+6*(6+6)))”)
赋值 (单个用例.得数, “312”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “(((6+6)*6+3)*2+6)*2”)
赋值 (单个用例.得数, “312”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3/3”)
赋值 (单个用例.得数, “3”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3*3”)
赋值 (单个用例.得数, “3”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3+3”)
赋值 (单个用例.得数, “12”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3+3”)
赋值 (单个用例.得数, “4”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3-3”)
赋值 (单个用例.得数, “6”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3-3”)
赋值 (单个用例.得数, “-2”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3+3*3”)
赋值 (单个用例.得数, “12”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3-3*3”)
赋值 (单个用例.得数, “-6”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3+3/3”)
赋值 (单个用例.得数, “4”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3-3/3”)
赋值 (单个用例.得数, “2”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3+3+3”)
赋值 (单个用例.得数, “9”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3*3”)
赋值 (单个用例.得数, “27”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3-3-3”)
赋值 (单个用例.得数, “-3”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3/3”)
赋值 (单个用例.得数, “0.3333333333333”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3*3*3”)
赋值 (单个用例.得数, “9”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3+3*3”)
赋值 (单个用例.得数, “18”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3/3+3/3”)
赋值 (单个用例.得数, “2”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3-3-3”)
赋值 (单个用例.得数, “3”)
加入成员 (测试正例, 单个用例)
赋值 (单个用例.表达式, “3*3/3/3”)
赋值 (单个用例.得数, “1”)
加入成员 (测试正例, 单个用例)
调试输出 (“######## 出错正例 ########”)
.变量循环首 (1, 取数组成员数 (测试正例), 1, i)
    赋值 (表达式返回文本, 表达式操作.取表达式计算结果 (测试正例 [i], 表达式))
    .如果真 (不等于 (表达式返回文本, 测试正例 [i], 得数))
        调试输出 (测试正例 [i], 表达式, 测试正例 [i], 得数, 表达式返回文本)
    .如果真结束
    
.变量循环尾 ()

 ' 反例
赋值 (单个用例.表达式, “8b”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “a8”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “1+2+3/0+4”)
赋值 (单个用例.得数, “1.#INF”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “88-1*5-”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “1024/-4*8”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “1024/(4*8*)”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “(20-(+2))*(6/2)”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “3-3+-3”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “8/(9-9)”)
赋值 (单个用例.得数, “1.#INF”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “2*(6+2*(3+6*(6+6))/0)”)
赋值 (单个用例.得数, “1.#INF”)
加入成员 (测试反例, 单个用例)
赋值 (单个用例.表达式, “*(((6+6)*6+3)*2+6)*2”)
赋值 (单个用例.得数, “”)
加入成员 (测试反例, 单个用例)
调试输出 (“######## 出错反例 #########”)
.变量循环首 (1, 取数组成员数 (测试反例), 1, i)
    赋值 (表达式返回文本, 表达式操作.取表达式计算结果 (测试反例 [i], 表达式))
    .如果真 (不等于 (表达式返回文本, 测试反例 [i], 得数))
        调试输出 (测试反例 [i], 表达式, 测试反例 [i], 得数, 表达式返回文本)
    .如果真结束
    
.变量循环尾 ()


.类模块 类_表达式, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取表达式计算结果, 文本型, 公开, 
.参数 参_表达式文本, 文本型, , 

.局部变量 表达式返回值, 双精度小数型, , , 
.局部变量 表达式代入文本, 文本型, , , 

赋值 (表达式代入文本, 参_表达式文本)
.如果真 (等于 (校验表达式数符规范 (表达式代入文本), 真))
    .如果真 (等于 (校验表达式括号规范 (表达式代入文本), 真))
        .如果真 (等于 (校验表达式运算符规范 (表达式代入文本), 真))
            赋值 (表达式返回值, 计算表达式 (表达式代入文本))
            返回 (到文本 (表达式返回值))
        .如果真结束
        
    .如果真结束
    
.如果真结束
返回 (“”)


.子程序 校验表达式数符规范, 逻辑型, , 
.参数 参_表达式文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 单个代码, 整数型, , , 

.变量循环首 (1, 取文本长度 (参_表达式文本), 1, i)
    赋值 (单个代码, 取代码 (取文本中间 (参_表达式文本, i, 1), ))
    .判断开始 (或者 (小于 (单个代码, 40), 大于 (单个代码, 57))) ' 代码40-47 = 字符()*+,-./  代码48-57 =  字符0-9
        返回 (假)
    .判断 (等于 (单个代码, 44)) ' 代码44 = 字符,
        返回 (假)
    .默认
        
    .判断结束
    
.变量循环尾 ()
返回 (真)


.子程序 校验表达式运算符规范, 逻辑型, , 
.参数 参_表达式文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 数码记录, 整数型, , , 
.局部变量 负号记录, 整数型, , , 
.局部变量 运算符记录, 整数型, , , 
.局部变量 左括号记录, 整数型, , , 
.局部变量 右括号记录, 整数型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 单个代码, 整数型, , , 


赋值 (数码记录, 0)
赋值 (负号记录, 0)
赋值 (运算符记录, 0)
赋值 (左括号记录, 0)
赋值 (右括号记录, 0)
赋值 (文本长度, 取文本长度 (参_表达式文本))
.变量循环首 (1, 文本长度, 1, i)
    
    赋值 (单个代码, 取代码 (取文本中间 (参_表达式文本, i, 1), ))
    .判断开始 (或者 (等于 (单个代码, 42), 等于 (单个代码, 43), 等于 (单个代码, 47))) ' *+/
         ' 校验运算符
        .如果真 (或者 (大于 (运算符记录, 0), 等于 (i, 1), 等于 (i, 文本长度)))
            返回 (假)
        .如果真结束
        赋值 (运算符记录, 相加 (运算符记录, 1))
        
    .判断 (等于 (单个代码, 45)) ' -
        .判断开始 (或者 (等于 (i, 1), 大于 (左括号记录, 0)))
             ' 校验负号
            .如果真 (大于 (负号记录, 0))
                返回 (假)
            .如果真结束
            赋值 (负号记录, 相加 (负号记录, 1))
        .默认
             ' 校验运算符
            .如果真 (或者 (大于 (运算符记录, 0), 等于 (i, 文本长度)))
                返回 (假)
            .如果真结束
            赋值 (运算符记录, 相加 (运算符记录, 1))
        .判断结束
        
    .判断 (等于 (单个代码, 40)) ' (
        .判断开始 (并且 (等于 (运算符记录, 0), 大于 (数码记录, 0)))
            返回 (假)
        .默认
            赋值 (左括号记录, 相加 (左括号记录, 1))
        .判断结束
        
    .判断 (等于 (单个代码, 41)) ' )
        .判断开始 (大于 (运算符记录, 0))
            返回 (假)
        .默认
            赋值 (右括号记录, 相加 (右括号记录, 1))
        .判断结束
        
    .判断 (并且 (大于或等于 (单个代码, 48), 小于或等于 (单个代码, 57))) ' 0-9
        .判断开始 (并且 (大于 (左括号记录, 0), 等于 (运算符记录, 0), 大于 (数码记录, 0)))
            返回 (假)
        .判断 (并且 (大于 (右括号记录, 0), 等于 (运算符记录, 0)))
            返回 (假)
        .默认
            赋值 (负号记录, 0)
            赋值 (运算符记录, 0)
            赋值 (左括号记录, 0)
            赋值 (右括号记录, 0)
        .判断结束
        赋值 (数码记录, 相加 (数码记录, 1))
    .默认
        
    .判断结束
    
.变量循环尾 ()
返回 (真)


.子程序 校验表达式括号规范, 逻辑型, , 
.参数 参_表达式文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 括号记录, 整数型, , , 
.局部变量 单个代码, 整数型, , , 

赋值 (括号记录, 0)
.变量循环首 (1, 取文本长度 (参_表达式文本), 1, i)
    赋值 (单个代码, 取代码 (取文本中间 (参_表达式文本, i, 1), ))
    .判断开始 (等于 (单个代码, 40)) ' (
        赋值 (括号记录, 相加 (括号记录, 1))
    .判断 (等于 (单个代码, 41)) ' )
        赋值 (括号记录, 相减 (括号记录, 1))
    .默认
        
    .判断结束
    
    .如果真 (小于 (括号记录, 0))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

.判断开始 (等于 (括号记录, 0))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取括号内表达式, 文本型, , 
.参数 参_表达式文本, 文本型, , 
.参数 参_左括号后首字符定位, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 括号记录, 整数型, , , 
.局部变量 单个代码, 整数型, , , 

 ' 获取()内容
赋值 (括号记录, 0)
.变量循环首 (参_左括号后首字符定位, 取文本长度 (参_表达式文本), 1, i)
    赋值 (单个代码, 取代码 (取文本中间 (参_表达式文本, i, 1), ))
    .判断开始 (等于 (单个代码, 40)) ' (
        赋值 (括号记录, 相加 (括号记录, 1))
    .判断 (等于 (单个代码, 41)) ' )
        赋值 (括号记录, 相减 (括号记录, 1))
    .默认
        
    .判断结束
    
    .如果真 (等于 (括号记录, -1))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

返回 (取文本中间 (参_表达式文本, 参_左括号后首字符定位, 相减 (i, 参_左括号后首字符定位)))


.子程序 计算表达式, 双精度小数型, , 
.参数 参_表达式文本, 文本型, , 

.局部变量 分隔符定位, 整数型, , , 
.局部变量 左值, 双精度小数型, , , 
.局部变量 右值, 双精度小数型, , , 
.局部变量 括号内表达式求值, 双精度小数型, , , 
.局部变量 括号内表达式文本长度, 整数型, , , 
.局部变量 括号内表达式文本, 文本型, , , 
.局部变量 表达式文本修整, 文本型, , , 

.如果真 (等于 (取文本长度 (参_表达式文本), 0))
    返回 (0)
.如果真结束
赋值 (表达式文本修整, 参_表达式文本)
赋值 (分隔符定位, 寻找文本 (表达式文本修整, “(”, 1, 假))
.判断循环首 (大于 (分隔符定位, 0))
    .判断开始 (大于 (分隔符定位, 1))
        .如果真 (大于 (寻找文本 (“(*+-/”, 取文本中间 (表达式文本修整, 相减 (分隔符定位, 1), 1), 1, 假), 0))
            赋值 (括号内表达式文本, 取括号内表达式 (表达式文本修整, 相加 (分隔符定位, 1)))
            赋值 (括号内表达式文本长度, 取文本长度 (括号内表达式文本))
            赋值 (括号内表达式求值, 计算表达式 (括号内表达式文本))
            赋值 (括号内表达式文本, 到文本 (括号内表达式求值))
            .如果真 (或者 (等于 (括号内表达式文本, “1.#INF”), 等于 (括号内表达式文本, “-1.#INF”)))
                返回 (括号内表达式求值)
            .如果真结束
            赋值 (表达式文本修整, 相加 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1)), 括号内表达式文本, 取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 相加 (分隔符定位, 括号内表达式文本长度, 1)))))
        .如果真结束
        
    .默认
        赋值 (括号内表达式文本, 取括号内表达式 (表达式文本修整, 相加 (分隔符定位, 1)))
        赋值 (括号内表达式文本长度, 取文本长度 (括号内表达式文本))
        赋值 (括号内表达式求值, 计算表达式 (括号内表达式文本))
        赋值 (括号内表达式文本, 到文本 (括号内表达式求值))
        .如果真 (或者 (等于 (括号内表达式文本, “1.#INF”), 等于 (括号内表达式文本, “-1.#INF”)))
            返回 (括号内表达式求值)
        .如果真结束
        赋值 (表达式文本修整, 相加 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1)), 括号内表达式文本, 取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 相加 (分隔符定位, 括号内表达式文本长度, 1)))))
    .判断结束
    
    赋值 (分隔符定位, 寻找文本 (表达式文本修整, “(”, 相加 (分隔符定位, 1), 假))
    
.判断循环尾 ()

赋值 (分隔符定位, 寻找文本 (表达式文本修整, “+”, 2, 假))
.如果真 (大于 (分隔符定位, 0))
    赋值 (左值, 计算表达式 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1))))
    赋值 (右值, 计算表达式 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 分隔符定位))))
    返回 (相加 (左值, 右值))
.如果真结束

赋值 (分隔符定位, 寻找文本 (表达式文本修整, “-”, 2, 假))
.如果真 (大于 (分隔符定位, 0))
    .如果真 (小于或等于 (寻找文本 (“(*+-/”, 取文本中间 (表达式文本修整, 相减 (分隔符定位, 1), 1), 1, 假), 0))
        赋值 (左值, 计算表达式 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1))))
        赋值 (右值, 计算表达式 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 分隔符定位))))
        返回 (相减 (左值, 右值))
    .如果真结束
    
.如果真结束

赋值 (分隔符定位, 寻找文本 (表达式文本修整, “*”, 1, 假))
.如果真 (大于 (分隔符定位, 0))
    赋值 (左值, 计算表达式 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1))))
    赋值 (右值, 计算表达式 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 分隔符定位))))
    返回 (相乘 (左值, 右值))
.如果真结束

赋值 (分隔符定位, 寻找文本 (表达式文本修整, “/”, 1, 假))
.如果真 (大于 (分隔符定位, 0))
    赋值 (左值, 计算表达式 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1))))
    赋值 (右值, 计算表达式 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 分隔符定位))))
    返回 (相除 (左值, 右值))
.如果真结束

赋值 (分隔符定位, 寻找文本 (表达式文本修整, “^”, 1, 假))
.如果真 (大于 (分隔符定位, 0))
    赋值 (左值, 计算表达式 (取文本左边 (表达式文本修整, 相减 (分隔符定位, 1))))
    赋值 (右值, 计算表达式 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 分隔符定位))))
    返回 (求次方 (左值, 右值))
.如果真结束

.判断开始 (等于 (取文本左边 (表达式文本修整, 1), “-”))
    返回 (相乘 (-1, 到数值 (取文本右边 (表达式文本修整, 相减 (取文本长度 (表达式文本修整), 1)))))
.默认
    返回 (到数值 (表达式文本修整))
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
