 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 新建,打开,保存,打印,,帮助,退出;底片,镜像,旋转,饱合度,色调,色阶
    左边 = 50
    顶边 = 50
    宽度 = 757
    高度 = 600
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “绘画大师 V2.0”
    帮助文件名 = “”

窗口 窗口_文字输入
    左边 = 50
    顶边 = 50
    宽度 = 346
    高度 = 223
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “请输入要插入的文字”
    帮助文件名 = “”



.常量 常量_标题, "“绘画大师”", , 
.常量 , , , 
.常量 常_直线, "1", , A'1是直线,2是圆,3是方形,4是圆角矩形
.常量 常_圆形, "2", , A
.常量 常_矩形, "3", , A
.常量 常_圆角矩形, "4", , A
.常量 常_画笔, "5", , B
.常量 常_擦皮, "6", , B
.常量 常_吸管, "7", , C
.常量 常_柒桶, "8", , C
.常量 常_曲线, "9", , D
.常量 常_多边形, "10", , D
.常量 常_选择区, "11", , D 选择区,图片,文字,喷雾器,放大,缩小,
.常量 常_印章, "12", , E
.常量 常_写字, "13", , E
.常量 常_喷雾器, "14", , F
.常量 常_放大, "15", , G
.常量 常_缩小, "16", , G
.常量 常_图片, "17", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 1 0 位图操作支持库
 ' xplib 7F54B9CE8887428dBA9CEEB94CEF4C72 1 6 XP风格界面库
 ' eImgConverter 8FA3AA46276847db8F28E57E7FB97B7F 1 0 图像格式转换支持库




数据类型 绘画数据类型, , 
    .成员 外形, 整数型, , , 
    .成员 线宽, 整数型, , , 
    .成员 填充类型, 整数型, , , 
    .成员 前景, 整数型, , , 
    .成员 背景, 整数型, , , 
    .成员 左边, 整数型, , , 
    .成员 上边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 下边, 整数型, , , 
    .成员 坐标1, 整数型, , , 贝赛尔曲线
    .成员 坐标2, 整数型, , , 贝赛尔曲线
    .成员 坐标3, 整数型, , , 贝赛尔曲线
    .成员 坐标4, 整数型, , , 贝赛尔曲线
    .成员 坐标5, 整数型, , , 贝赛尔曲线
    .成员 坐标6, 整数型, , , 贝赛尔曲线
    .成员 坐标7, 整数型, , , 贝赛尔曲线
    .成员 坐标8, 整数型, , , 贝赛尔曲线
    .成员 曲线_进度, 整数型, , , 贝赛尔曲线,负数表示已经完成

数据类型 stackfield, , 
    .成员 xl, 整数型, , , 
    .成员 xr, 整数型, , , 
    .成员 y, 整数型, , , 

.全局变量 全局_是否已绘画, 逻辑型, , , 
.全局变量 全局_前景色, 整数型, , , 
.全局变量 全局_背景色, 整数型, , , 
.全局变量 全局_文件名, 文本型, , , 
.全局变量 匿名全局变量_2569, 空白型, , , 
.全局变量 是否正在绘画, 逻辑型, , , 
.全局变量 当前绘画数据, 绘画数据类型, , , 
.全局变量 所有绘画数据, 绘画数据类型, , "0", 
.全局变量 鼠标左键被按下, 逻辑型, , , 
.全局变量 结束的横坐标, 整数型, , , 
.全局变量 结束的竖坐标, 整数型, , , 
.全局变量 匿名全局变量_1154, 空白型, , , 
.全局变量 图位图, 位图, , , 
.全局变量 匿名全局变量_1156, 空白型, , , 
.全局变量 计数, 整数型, , , 用于放大缩小
.全局变量 匿名全局变量_1158, 空白型, , , 
.全局变量 文件号, 整数型, , , 
.全局变量 匿名全局变量_1738, 空白型, , , 
.全局变量 设置字体, 字体, , , 
.全局变量 输入文字, 文本型, , , 
.全局变量 匿名全局变量_1739, 空白型, , , 
.全局变量 多边形_起始点横向, 整数型, , , 
.全局变量 多边形_起始点纵向, 整数型, , , 
.全局变量 多边形_起始, 逻辑型, , , 
.全局变量 多边形_结束点横向, 整数型, , , 
.全局变量 多边形_结束点纵向, 整数型, , , 
.全局变量 曲线_起始, 逻辑型, , , 

.DLL命令 释放鼠标, 空白型, "", "ReleaseCapture", , 

.DLL命令 俘获鼠标, 空白型, "", "SetCapture", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 取屏幕颜色值, 整数型, "", "GetPixel", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 X坐标, 整数型, , 
    .参数 Y坐标, 整数型, , 

.DLL命令 取设备场景句柄, 整数型, "", "GetDC", , 
    .参数 窗口句柄, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 i, 整数型, , , i, X, Xl, Xr, p_Xl, p_Xr, signed_Y
.程序集变量 X, 整数型, , , 
.程序集变量 Y, 整数型, , , 
.程序集变量 Xl, 整数型, , , 
.程序集变量 Xr, 整数型, , , 
.程序集变量 p_Xl, 整数型, , , 
.程序集变量 p_Xr, 整数型, , , 
.程序集变量 signed_Y, 整数型, , , 
.程序集变量 P, 字节型, , "0", 
.程序集变量 stack, stackfield, , "0", 
.程序集变量 正在处理, 逻辑型, , , 
.程序集变量 原始图片, 字节集, , , 
.程序集变量 匿名程序集变量_2081, 空白型, , , 
.程序集变量 缩放级数, 整数型, , , I
.程序集变量 缩放比例, 小数型, , "30", 
.程序集变量 匿名程序集变量_2082, 空白型, , , 
.程序集变量 图片宽, 整数型, , , 
.程序集变量 图片高, 整数型, , , 
.子程序 __启动窗口_尺寸被改变, 空白型, , 
赋值 (.宽度, 相减 (., .左边, .左边, 5))
赋值 (.高度, 相减 (取用户区高度 (), 相乘 (.顶边, 2), 5))
.移动 (相加 (.高度, 50), , )
.移动 (相加 (.高度, 46), , )
赋值 (.宽度, 相减 (.宽度, 2))
赋值 (.高度, 相减 (.高度, 2))
.移动 (.左边, 300, .宽度, )

.子程序 取画图类型, 整数型, , '1是直线,2是圆,3是矩形,4是圆角矩形
.判断开始 (等于 (.选中, 真))
    返回 (#常_直线) ' 1是直线
.判断 (等于 (.选中, 真))
    返回 (#常_圆形) ' 2是圆
.判断 (等于 (.选中, 真))
    返回 (#常_矩形) ' 3是矩形
.判断 (等于 (.选中, 真))
    返回 (#常_圆角矩形) ' 4是圆角矩形
.判断 (等于 (.选中, 真))
    返回 (#常_画笔) ' 5是画笔
.判断 (等于 (.选中, 真))
    返回 (#常_擦皮) ' 6是擦皮
.判断 (等于 (.选中, 真))
    返回 (#常_吸管) ' 7是吸管
.判断 (等于 (.选中, 真))
    返回 (#常_柒桶) ' 8是柒桶
.判断 (等于 (.选中, 真))
    返回 (#常_印章)
.判断 (等于 (.选中, 真))
    返回 (#常_写字)
.判断 (等于 (.选中, 真))
    返回 (#常_多边形)
.判断 (等于 (.选中, 真))
    返回 (#常_曲线)
.判断 (等于 (.选中, 真))
    返回 (#常_柒桶)
.默认
    
.判断结束
返回 (0)

.子程序 取画笔宽度, 整数型, , 
返回 (到数值 (.内容))


.子程序 取填充类型, 整数型, , 
.判断开始 (等于 (.选中, 真))
    返回 (2)
.判断 (等于 (.选中, 真))
    返回 (3)
.默认
    返回 (1)
.判断结束


.子程序 规范矩形, 空白型, , 
.参数 左边, 整数型, 参考, 
.参数 上边, 整数型, 参考, 
.参数 右边, 整数型, 参考, 
.参数 下边, 整数型, 参考, 

.局部变量 变量1, 整数型, , , 

.如果真 (大于 (左边, 右边))
    赋值 (变量1, 左边)
    赋值 (左边, 右边)
    赋值 (右边, 变量1)
.如果真结束
.如果真 (大于 (上边, 下边))
    赋值 (变量1, 上边)
    赋值 (上边, 下边)
    赋值 (下边, 变量1)
.如果真结束


.子程序 规范矩形2, 空白型, , 
.局部变量 变量1, 整数型, , , 

.如果真 (大于 (当前绘画数据.左边, 当前绘画数据.右边))
    赋值 (变量1, 当前绘画数据.左边)
    赋值 (当前绘画数据.左边, 当前绘画数据.右边)
    赋值 (当前绘画数据.右边, 变量1)
.如果真结束
.如果真 (大于 (当前绘画数据.上边, 当前绘画数据.下边))
    赋值 (变量1, 当前绘画数据.上边)
    赋值 (当前绘画数据.上边, 当前绘画数据.下边)
    赋值 (当前绘画数据.下边, 变量1)
.如果真结束


.子程序 绘画, 空白型, , 
.参数 数据, 绘画数据类型, , 
.参数 是否设置画板, 逻辑型, 可空, 

.局部变量 左边1, 整数型, , , 
.局部变量 上边1, 整数型, , , 
.局部变量 右边1, 整数型, , , 
.局部变量 下边1, 整数型, , , 

.如果真 (等于 (是否为空 (是否设置画板), 假))
    赋值 (.画笔粗细, 数据.线宽)
    赋值 (.刷子颜色, 数据.背景)
    赋值 (.刷子类型, 选择 (等于 (数据.填充类型, 1), 0, 1))
    赋值 (.画笔颜色, 选择 (等于 (数据.填充类型, 3), 数据.背景, 数据.前景))
.如果真结束
赋值 (左边1, 数据.左边)
赋值 (右边1, 数据.右边)
赋值 (上边1, 数据.上边)
赋值 (下边1, 数据.下边)
.判断开始 (等于 (数据.外形, #常_直线)) ' 画直线
    左边1.画直线 (上边1, 右边1, 下边1)
    规范矩形 (左边1, 上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_圆形)) ' 画椭圆
    左边1.画椭圆 (上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_矩形)) ' 画矩形
    左边1.画矩形 (上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_圆角矩形)) ' 画圆角矩形
    左边1.画圆角矩形 (上边1, 右边1, 下边1, 相除 (相减 (右边1, 左边1), 4), )
.判断 (等于 (数据.外形, #常_画笔)) ' 铅笔
    左边1.画直线 (上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_擦皮)) ' 擦皮
    左边1.画直线 (上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_多边形)) ' 多边形6
    左边1.画直线 (上边1, 右边1, 下边1)
.判断 (等于 (数据.外形, #常_柒桶)) ' 柒桶
    
.判断 (等于 (数据.外形, #常_曲线)) ' 贝赛尔曲线
    .如果 (小于或等于 (取绝对值 (数据.曲线_进度), 2))
        左边1.画直线 (上边1, 右边1, 下边1)
        规范矩形 (左边1, 上边1, 右边1, 下边1)
    .否则
        画贝赛尔曲线 (数据.坐标1, 数据.坐标2, 数据.坐标5, 数据.坐标6, 数据.坐标7, 数据.坐标8, 数据.坐标3, 数据.坐标4)
    .如果结束
    
.默认
    
.判断结束


.子程序 子程序_画板鼠标被按下, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 
.参数 参数_前景色, 整数型, , 
.参数 参数_背景色, 整数型, , 

赋值 (.画笔粗细, 取画笔宽度 ())
赋值 (.刷子类型, 1) ' 空刷子
赋值 (.画笔类型, 1) ' 直线

赋值 (当前绘画数据.外形, 取画图类型 ()) ' 1是直线,2是圆,3是方形,4是圆角矩形

.如果真 (不等于 (当前绘画数据.外形, #常_曲线)) ' 结束上一次曲线
    .如果真 (大于或等于 (取数组成员数 (所有绘画数据), 1))
        .如果真 (大于 (所有绘画数据 [取数组成员数 (所有绘画数据)].曲线_进度, 0))
            赋值 (所有绘画数据 [取数组成员数 (所有绘画数据)].曲线_进度, 负 (所有绘画数据 [取数组成员数 (所有绘画数据)].曲线_进度))
            赋值 (当前绘画数据.曲线_进度, 0)
        .如果真结束
        
    .如果真结束
    
.如果真结束

赋值 (当前绘画数据.前景, 参数_前景色)
赋值 (当前绘画数据.背景, 参数_背景色)
.如果真 (等于 (.选中, 假))
    赋值 (.画笔颜色, 参数_前景色)
    赋值 (.文本颜色, 参数_背景色)
.如果真结束

赋值 (当前绘画数据.线宽, 取画笔宽度 ())
赋值 (当前绘画数据.填充类型, 取填充类型 ())
连续赋值 (横向位置, 当前绘画数据.左边, 当前绘画数据.右边)
连续赋值 (纵向位置, 当前绘画数据.上边, 当前绘画数据.下边)

.如果真 (等于 (取画图类型 (), #常_印章))
    .如果真 (等于 (打开 (), 真))
         ' 文件号 ＝ 打开文件 (打开对话框.文件名, #读入, #无限制)
        赋值 (文件号, 载入图片 (.文件名))
        文件号.画图片 (横向位置, 纵向位置, , , )
        赋值 (.底图, .取图片 (.宽度, .高度))
        赋值 (全局_是否已绘画, 真)
    .如果真结束
    返回 ()
.如果真结束

.如果真 (等于 (取画图类型 (), #常_写字))
    载入 (窗口_文字输入, , 真)
    .如果真 (不等于 (输入文字, “”))
        .如果真 (不等于 (设置字体.字体大小, 0))
            赋值 (.字体, 设置字体)
            横向位置.定位写出 (纵向位置, 输入文字)
        .如果真结束
        赋值 (输入文字, “”)
    .如果真结束
    赋值 (.底图, .取图片 (.宽度, .高度))
    赋值 (全局_是否已绘画, 真)
    返回 ()
.如果真结束

.如果 (等于 (取画图类型 (), #常_多边形))
    
    .如果 (等于 (多边形_起始, 假))
        赋值 (多边形_起始点横向, 横向位置) ' 保存多边形起始点的位置
        赋值 (多边形_起始点纵向, 纵向位置) ' 保存多边形起始点的位置
        赋值 (当前绘画数据.左边, 多边形_起始点横向)
        赋值 (当前绘画数据.上边, 多边形_起始点纵向)
    .否则
        赋值 (当前绘画数据.左边, 多边形_结束点横向)
        赋值 (当前绘画数据.上边, 多边形_结束点纵向)
    .如果结束
    赋值 (多边形_起始, 真)
.否则
    赋值 (多边形_起始, 假)
.如果结束

.如果 (等于 (取画图类型 (), #常_曲线))
    赋值 (当前绘画数据.曲线_进度, 相加 (当前绘画数据.曲线_进度, 1))
    .如果真 (等于 (当前绘画数据.曲线_进度, 4)) ' 第四次修正第三点
        赋值 (当前绘画数据.坐标7, 横向位置)
        赋值 (当前绘画数据.坐标8, 纵向位置)
    .如果真结束
    .如果真 (等于 (当前绘画数据.曲线_进度, 3)) ' 第三次修正第二点
        赋值 (当前绘画数据.坐标5, 横向位置)
        赋值 (当前绘画数据.坐标6, 纵向位置)
        赋值 (当前绘画数据.坐标7, 横向位置)
        赋值 (当前绘画数据.坐标8, 纵向位置)
         ' 曲线_进度 ＝ 4
    .如果真结束
    .如果真 (等于 (当前绘画数据.曲线_进度, 2)) ' 第二次知道第三点与终点
        赋值 (当前绘画数据.坐标5, 横向位置)
        赋值 (当前绘画数据.坐标6, 纵向位置)
        赋值 (当前绘画数据.坐标7, 横向位置)
        赋值 (当前绘画数据.坐标8, 纵向位置)
         ' 曲线_进度 ＝ 3
    .如果真结束
    .如果真 (等于 (当前绘画数据.曲线_进度, 1)) ' 第一次知道起点与第二点,
        赋值 (当前绘画数据.坐标1, 横向位置)
        赋值 (当前绘画数据.坐标2, 纵向位置)
        赋值 (当前绘画数据.坐标3, 横向位置)
        赋值 (当前绘画数据.坐标4, 纵向位置)
         ' 曲线_进度 ＝ 2
    .如果真结束
    
     ' 画贝赛尔曲线 (当前绘画数据.坐标1, 当前绘画数据.坐标2, 当前绘画数据.坐标3, 当前绘画数据.坐标4, 当前绘画数据.坐标5, 当前绘画数据.坐标6, 当前绘画数据.坐标7, 当前绘画数据.坐标8)
    
.否则
    
.如果结束

.如果真 (等于 (取画图类型 (), #常_柒桶))
    置等待鼠标 ()
    .如果真 (正在处理)
        信息框 (“还没有处理完毕！”, 0, )
    .如果真结束
    赋值 (正在处理, 真)
     ' 标签2.标题 ＝ “正在处理中...”
    .如果 (等于 (.选中, 真))
        赋值 (.底图, FillColors (.取图片 (.宽度, .高度), .宽度, .高度, 横向位置, 纵向位置, 横向位置.取点 (纵向位置), 参数_前景色, 到数值 (.内容)))
    .否则
        赋值 (.底图, FillLine (.取图片 (.宽度, .高度), .宽度, .高度, 横向位置, 纵向位置, 横向位置.取点 (纵向位置), 参数_前景色, 到数值 (.内容)))
    .如果结束
    赋值 (正在处理, 假)
    恢复鼠标 ()
    赋值 (全局_是否已绘画, 真)
    返回 ()
.如果真结束

赋值 (.画出方式, 6) ' 异或笔
绘画 (当前绘画数据)
赋值 (是否正在绘画, 真)
俘获鼠标 (取窗口句柄 ())

赋值 (鼠标左键被按下, 真)
赋值 (结束的横坐标, 横向位置)
赋值 (结束的竖坐标, 纵向位置)
赋值 (全局_是否已绘画, 真)


.子程序 子程序_画板鼠标被放开, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 
.参数 参数_前景色, 整数型, , 
.参数 参数_背景色, 整数型, , 

.如果真 (等于 (是否正在绘画, 真))
    绘画 (当前绘画数据)
    释放鼠标 ()
    赋值 (是否正在绘画, 假)
    .如果真 (并且 (等于 (当前绘画数据.外形, #常_曲线), 大于或等于 (当前绘画数据.曲线_进度, 4)))
        赋值 (当前绘画数据.曲线_进度, 负 (当前绘画数据.曲线_进度))
    .如果真结束
    加入成员 (所有绘画数据, 当前绘画数据) ' 绘图完成时,将真正的数据加入到数据库中.
    子程序_删除未完成曲线 ()
    .如果真 (并且 (等于 (当前绘画数据.外形, #常_曲线), 小于 (当前绘画数据.曲线_进度, 0)))
        赋值 (当前绘画数据.曲线_进度, 0)
    .如果真结束
     ' 输出调试文本 (“加入成员” ＋ “  ” ＋ 到文本 (取数组成员数 (所有绘画数据)) ＋ “  ” ＋ 到文本 (当前绘画数据.上边) ＋ “  ” ＋ 到文本 (当前绘画数据.左边) ＋ “  ” ＋ 到文本 (当前绘画数据.下边) ＋ “  ” ＋ 到文本 (当前绘画数据.右边) ＋ “  ” ＋ 到文本 (取现行时间 ()))
    
    规范矩形 (当前绘画数据.左边, 当前绘画数据.上边, 当前绘画数据.右边, 当前绘画数据.下边) ' 这个很重要,否则画不上去.
    相减 (当前绘画数据.左边, 6).部分重画 (相减 (当前绘画数据.上边, 6), 相加 (相减 (当前绘画数据.右边, 当前绘画数据.左边), 12), 相加 (相减 (当前绘画数据.下边, 当前绘画数据.上边), 12))
    
    刷新显示 ()
    重画 ()
.如果真结束
赋值 (鼠标左键被按下, 假)
.如果真 (等于 (取画图类型 (), #常_多边形))
    赋值 (多边形_结束点横向, 横向位置)
    赋值 (多边形_结束点纵向, 纵向位置)
.如果真结束
.如果真 (等于 (取画图类型 (), #常_曲线))
    .判断开始 (等于 (当前绘画数据.曲线_进度, 1))
        赋值 (当前绘画数据.坐标3, 横向位置)
        赋值 (当前绘画数据.坐标4, 纵向位置)
        赋值 (当前绘画数据.曲线_进度, 2)
    .判断 (等于 (当前绘画数据.曲线_进度, 3))
        赋值 (当前绘画数据.坐标5, 横向位置)
        赋值 (当前绘画数据.坐标6, 纵向位置)
    .默认
        
    .判断结束
    
.如果真结束


.子程序 _画板1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

子程序_画板鼠标被按下 (横向位置, 纵向位置, 功能键状态, .颜色, .颜色)

.子程序 _画板1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

子程序_画板鼠标被放开 (横向位置, 纵向位置, 功能键状态, .颜色, .颜色)
.如果真 (等于 (当前绘画数据.外形, #常_吸管))
    赋值 (.颜色, 取屏幕颜色值 (取设备场景句柄 (0), 取鼠标水平位置 (), 取鼠标垂直位置 ()))
.如果真结束


.子程序 _画板1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (大于 (横向位置, 取屏幕宽度 ()))
    赋值 (横向位置, 相减 (横向位置, 65536))
.如果真结束
.如果真 (大于 (纵向位置, 取屏幕高度 ()))
    赋值 (纵向位置, 相减 (纵向位置, 65536))
.如果真结束

.如果真 (并且 (等于 (是否正在绘画, 真), 不等于 (当前绘画数据.外形, #常_画笔), 不等于 (当前绘画数据.外形, #常_擦皮), 不等于 (当前绘画数据.外形, #常_吸管)))
    绘画 (当前绘画数据)
    .判断开始 (等于 (当前绘画数据.曲线_进度, 3))
        赋值 (当前绘画数据.坐标5, 横向位置)
        赋值 (当前绘画数据.坐标6, 纵向位置)
        赋值 (当前绘画数据.坐标7, 横向位置)
        赋值 (当前绘画数据.坐标8, 纵向位置)
        
    .判断 (等于 (当前绘画数据.曲线_进度, 4))
        赋值 (当前绘画数据.坐标7, 横向位置)
        赋值 (当前绘画数据.坐标8, 纵向位置)
    .默认
        
    .判断结束
    
    赋值 (当前绘画数据.右边, 横向位置)
    赋值 (当前绘画数据.下边, 纵向位置)
    绘画 (当前绘画数据)
.如果真结束
.如果真 (并且 (等于 (鼠标左键被按下, 真), 或者 (等于 (当前绘画数据.外形, #常_画笔), 等于 (当前绘画数据.外形, #常_擦皮)))) ' 如果是画笔的状态,要求连续画.
    赋值 (当前绘画数据.左边, 结束的横坐标)
    赋值 (当前绘画数据.上边, 结束的竖坐标)
    赋值 (当前绘画数据.右边, 横向位置)
    赋值 (当前绘画数据.下边, 纵向位置)
    赋值 (结束的横坐标, 横向位置)
    赋值 (结束的竖坐标, 纵向位置)
    
    加入成员 (所有绘画数据, 当前绘画数据) ' 绘图完成时,将真正的数据加入到数据库中.
     ' 输出调试文本 (“加入成员” ＋ “  ” ＋ 到文本 (取数组成员数 (所有绘画数据)) ＋ “  ” ＋ 到文本 (当前绘画数据.上边) ＋ “  ” ＋ 到文本 (当前绘画数据.左边) ＋ “  ” ＋ 到文本 (当前绘画数据.下边) ＋ “  ” ＋ 到文本 (当前绘画数据.右边) ＋ “  ” ＋ 到文本 (取现行时间 ()))
    
    规范矩形 (当前绘画数据.左边, 当前绘画数据.上边, 当前绘画数据.右边, 当前绘画数据.下边) ' 这个很重要,否则画不上去.
    相减 (当前绘画数据.左边, 1).部分重画 (相减 (当前绘画数据.上边, 1), 相加 (相减 (当前绘画数据.右边, 当前绘画数据.左边), 2), 相加 (相减 (当前绘画数据.下边, 当前绘画数据.上边), 2))
    刷新显示 ()
.如果真结束


.子程序 _画板1_绘画, 空白型, , 
.参数 重画区左边, 整数型, , 
.参数 重画区上边, 整数型, , 
.参数 重画区右边, 整数型, , 
.参数 重画区下边, 整数型, , 

.局部变量 变量1, 整数型, , , 

赋值 (.画出方式, 12) ' 复制笔
.计次循环首 (取数组成员数 (所有绘画数据), 变量1)
    绘画 (所有绘画数据 [变量1], 真)
.计次循环尾 ()
.如果真 (大于 (取数组成员数 (所有绘画数据), 100))
    赋值 (.底图, .取图片 (.宽度, .高度))
    清除数组 (所有绘画数据)
    输出调试文本 (“清除数组”)
.如果真结束


.子程序 _画板1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

 ' 鼠标右键功能
 ' 能使用鼠标右键的工具是：
 ' 铅笔，擦皮，柒桶，文字，直线，曲线，方形，多边型，圆形，TUO圆形。

.判断开始 (或者 (等于 (取画图类型 (), #常_画笔), 等于 (取画图类型 (), #常_擦皮), 等于 (取画图类型 (), #常_柒桶), 等于 (取画图类型 (), #常_写字), 等于 (取画图类型 (), #常_直线), 等于 (取画图类型 (), #常_曲线), 等于 (取画图类型 (), #常_矩形), 等于 (取画图类型 (), #常_多边形), 等于 (取画图类型 (), #常_圆形), 等于 (取画图类型 (), #常_圆角矩形)))
    子程序_画板鼠标被按下 (横向位置, 纵向位置, 功能键状态, .颜色, .颜色)
.默认
    
.判断结束
返回 (真)
赋值 (.画笔颜色, #白色)
赋值 (.画笔粗细, 取画笔宽度 ())
赋值 (.刷子类型, 0) ' 空刷子
赋值 (.画笔类型, 1) ' 直线

赋值 (当前绘画数据.外形, 取画图类型 ()) ' 1是直线,2是圆,3是方形,4是圆角矩形
赋值 (当前绘画数据.前景, .颜色)
赋值 (当前绘画数据.背景, .颜色)
赋值 (当前绘画数据.线宽, 取画笔宽度 ())
赋值 (当前绘画数据.填充类型, 取填充类型 ())
连续赋值 (横向位置, 当前绘画数据.左边, 当前绘画数据.右边)
连续赋值 (纵向位置, 当前绘画数据.上边, 当前绘画数据.下边)
.如果真 (等于 (取画图类型 (), #常_曲线))
    .如果真 (大于或等于 (取数组成员数 (所有绘画数据), 1))
        .如果真 (大于 (所有绘画数据 [取数组成员数 (所有绘画数据)].曲线_进度, 0))
            删除成员 (所有绘画数据, 取数组成员数 (所有绘画数据), 1)
            赋值 (当前绘画数据.曲线_进度, 0)
        .如果真结束
        
    .如果真结束
    绘画 (当前绘画数据)
    重画 ()
    刷新显示 ()
    返回 ()
.如果真结束

.如果真 (等于 (取画图类型 (), #常_印章))
    .如果 (不等于 (文件号, 0))
        文件号.画图片 (横向位置, 纵向位置, , , )
        赋值 (.底图, .取图片 (.宽度, .高度))
    .否则
        .如果真 (等于 (打开 (), 真))
             ' 文件号 ＝ 打开文件 (打开对话框.文件名, #读入, #无限制)
            赋值 (文件号, 载入图片 (.文件名))
            文件号.画图片 (横向位置, 纵向位置, , , )
            赋值 (.底图, .取图片 (.宽度, .高度))
        .如果真结束
        
    .如果结束
    返回 ()
.如果真结束

赋值 (.画出方式, 6) ' 异或笔
绘画 (当前绘画数据)
赋值 (是否正在绘画, 真)
俘获鼠标 (取窗口句柄 ())


.子程序 _画板1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

子程序_画板鼠标被放开 (横向位置, 纵向位置, 功能键状态, .颜色, .颜色)
.如果真 (等于 (当前绘画数据.外形, #常_吸管))
    赋值 (.颜色, 取屏幕颜色值 (取设备场景句柄 (0), 取鼠标水平位置 (), 取鼠标垂直位置 ()))
.如果真结束
返回 (真)
.如果真 (等于 (是否正在绘画, 真))
    绘画 (当前绘画数据)
    释放鼠标 ()
    赋值 (是否正在绘画, 假)
    
    加入成员 (所有绘画数据, 当前绘画数据)
    规范矩形 (当前绘画数据.左边, 当前绘画数据.上边, 当前绘画数据.右边, 当前绘画数据.下边)
    相减 (当前绘画数据.左边, 6).部分重画 (相减 (当前绘画数据.上边, 6), 相加 (相减 (当前绘画数据.右边, 当前绘画数据.左边), 12), 相加 (相减 (当前绘画数据.下边, 当前绘画数据.上边), 12))
    刷新显示 ()
.如果真结束



.子程序 _按钮_底片_被单击, 空白型, , 
置等待鼠标 ()
_启动窗口.复制 (., , , , , _启动窗口., , , 2)
写到文件 (“TEMP.BMP”, _启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度))
赋值 (_启动窗口..底图, 读入文件 (“TEMP.BMP”))
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_打开_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

 ' 打开对话框.初始目录 ＝ 取当前目录 ()
.如果真 (等于 (打开 (), 假))
    返回 ()
.如果真结束

.如果真 (等于 (全局_是否已绘画, 真))
    赋值 (局部_返回值, 信息框 (“文件已被修改，是否保存？”, 相加 (#取消是否钮, #警告图标), #常量_标题))
    
    .判断开始 (等于 (局部_返回值, #是钮))
        .如果真 (等于 (子程序_保存 (), 假))
            返回 ()
        .如果真结束
        
    .判断 (等于 (局部_返回值, #取消钮))
        返回 ()
    .默认
        
    .判断结束
    
.如果真结束

清除数组 (所有绘画数据)
赋值 (.底图, 读入文件 (.文件名))
赋值 (多边形_起始, 假)
赋值 (当前绘画数据.曲线_进度, 0)
赋值 (全局_是否已绘画, 假)

.子程序 _按钮_新建_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (全局_是否已绘画, 真))
    赋值 (局部_返回值, 信息框 (“文件已被修改，是否保存？”, 相加 (#取消是否钮, #警告图标), #常量_标题))
    .判断开始 (等于 (局部_返回值, #是钮))
        .如果真 (等于 (子程序_保存 (), 假))
            返回 ()
        .如果真结束
        
    .判断 (等于 (局部_返回值, #取消钮))
        返回 ()
    .默认
        
    .判断结束
    
.如果真结束
赋值 (.底图, {  })
清除数组 (所有绘画数据)
图位图.创建 (.宽度, .高度, 16, #白色)
赋值 (.底图, 图位图.取位图数据 ())
赋值 (多边形_起始, 假)
赋值 (当前绘画数据.曲线_进度, 0)
赋值 (全局_是否已绘画, 假)
赋值 (全局_文件名, “”)
 ' _按钮_色调_被单击 ()

.子程序 子程序_保存, 逻辑型, , 
.局部变量 局部_文件号, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 计数, 整数型, , , 
.局部变量 局部_文件名, 文本型, , , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_文件名, 取临时文件名 ())
.如果真 (等于 (局部_文件名, “”))
    返回 (假)
.如果真结束
.如果真 (等于 (打开 (), 假))
    返回 (假)
.如果真结束
赋值 (局部_文件号, 打开文件 (局部_文件名, #改写, ))
写出字节集 (局部_文件号, .取图片 (.宽度, .高度))
关闭文件 (局部_文件号)
.判断开始 (等于 (到小写 (取文本右边 (.文件名, 4)), “.jpg”))
    赋值 (局部_返回值, 未知支持库函数_0 (局部_文件名, .文件名, 假, 75, 真, 0))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.tif”))
    赋值 (局部_返回值, 未知支持库函数_2 (局部_文件名, .文件名, 假))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.png”))
    赋值 (局部_返回值, 未知支持库函数_3 (局部_文件名, .文件名, 24))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.ppm”))
    赋值 (局部_返回值, 未知支持库函数_4 (局部_文件名, .文件名, 真))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.pgm”))
    赋值 (局部_返回值, 未知支持库函数_5 (局部_文件名, .文件名, 真))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.pbm”))
    赋值 (局部_返回值, 未知支持库函数_6 (局部_文件名, .文件名))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.pcx”))
    赋值 (局部_返回值, 未知支持库函数_7 (局部_文件名, .文件名))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.pic”))
    赋值 (局部_返回值, 未知支持库函数_8 (局部_文件名, .文件名))
.判断 (等于 (到小写 (取文本右边 (.文件名, 4)), “.sgi”))
    赋值 (局部_返回值, 未知支持库函数_9 (局部_文件名, .文件名))
.默认
    
.判断结束

.如果真 (文件是否存在 (局部_文件名))
    删除文件 (局部_文件名)
.如果真结束
赋值 (全局_是否已绘画, 假)
返回 (选择 (等于 (局部_返回值, 1), 真, 假))
未知函数_565 () ' *** 缩略程序块 ***
置等待鼠标 ()
 ' 第一步,建立一个新的位图字节集;
图位图.创建 (.宽度, .高度, 24, #白色)
 ' 第二步,将画板上的数据以点为单位写到字节集中,
.计次循环首 (.宽度, 计次)
    .计次循环首 (.高度, 计数)
        图位图.置某点颜色 (计次, 计数, 计次.取点 (计数))
    .计次循环尾 ()
.计次循环尾 ()
 ' 第三步,将字节集存为BMP文件

写到文件 (.文件名, 图位图.取位图数据 ())
取错误 ()
恢复鼠标 ()

.子程序 _按钮_保存_被单击, 空白型, , 
子程序_保存 ()

.子程序 _按钮_关于_被单击, 空白型, , 
信息框 (相加 (“本程序由易语言制作!”, #换行符, “大连大有吴涛易语言软件开发有限公司”, #换行符, “http://www.dywt.com.cn”), 0, “关于版权”)


.子程序 _按钮_打印_被单击, 空白型, , 
真.开始打印 (真, , )
载入图片 (.取图片 ()).画图片 (1, 1, , , )
结束打印 ()



.子程序 _按钮_色调1_被单击, 空白型, , 
图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.镜像 (假, 真)) ' 主要是这句
取错误 ()
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)

.子程序 _按钮_色调_被单击, 空白型, , 
图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.镜像 (真, 假)) ' 主要是这句
取错误 ()
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)

.子程序 取错误, 空白型, , 
.如果真 (不等于 (删全部空 (图位图.取错误信息 ()), “”))
    信息框 (图位图.取错误信息 (), 0, )
.如果真结束


.子程序 _按钮_色调2_被单击, 空白型, , 
图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)


.子程序 _按钮_色调3_被单击, 空白型, , 
图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)


.子程序 _按钮_色调4_被单击, 空白型, , 
图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (图位图, 图位图.旋转90度 (真)) ' 主要是这句
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)



.子程序 _按钮_色调5_被单击, 空白型, , 
.局部变量 度数, 整数型, , , 

输入框 (“请输入欲旋转的角度(空白处将以背景色填充):”, “角度”, “45”, 度数, #输入整数)

图位图.载入数据 (.取图片 (.宽度, .高度))
赋值 (图位图, 图位图.旋转 (度数, .颜色)) ' 主要是这句
赋值 (.底图, 图位图.取位图数据 ())
取错误 ()
清除数组 (所有绘画数据)


.子程序 _图片框2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框2_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框3_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框4_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框4_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框5_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框5_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框6_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框6_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框7_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框7_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框13_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框13_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框12_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框12_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框11_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框11_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框8_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框8_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框9_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框9_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框40_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框40_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框10_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框10_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框14_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框14_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框15_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框15_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框17_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框17_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框26_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框26_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框27_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框27_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框28_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框28_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框29_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框29_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框30_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框30_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框31_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框31_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框32_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框32_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框33_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框33_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框34_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框34_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框35_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框35_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框36_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框36_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框41_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框41_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框37_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框37_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框38_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框38_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框39_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框39_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _图片框16_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)

.子程序 _图片框16_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.颜色, .背景颜色)


.子程序 _单选框_放大_被单击, 空白型, , 
赋值 (.现行子夹, 4)
赋值 (.高度, 482)
不显示工具箱常用工具4参数 ()

.如果真 (等于 (缩放级数, 9)) ' 如果是正常比例就存下这个图片
    写到文件 (“TEMP.BMP”, _启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度))
.如果真结束
赋值 (文件号, 载入图片 (“TEMP.BMP”))
清除数组 (所有绘画数据)
赋值 (缩放级数, 相减 (缩放级数, 1))
.如果真 (或者 (小于或等于 (缩放级数, 6), 大于或等于 (缩放级数, 23)))
    赋值 (缩放级数, 7)
    返回 ()
.如果真结束
赋值 (.宽度, 相乘 (相减 (.宽度, 2), 缩放比例 [缩放级数]))
赋值 (.高度, 相乘 (相减 (.高度, 2), 缩放比例 [缩放级数]))
 ' 画板1.底图 ＝ 比例缩放 (画板1.取图片 (画板1.宽度, 画板1.高度), 缩放比例 [缩放级数] × 100, 缩放比例 [缩放级数] × 100) ' 这个函数是可以用的,但是速度太慢了.
文件号.画图片 (0, 0, .宽度, .高度, #拷贝)
赋值 (.底图, .取图片 (.宽度, .高度))
赋值 (.内容, 到文本 (相乘 (缩放比例 [缩放级数], 100)))

.子程序 _单选框_缩小_被单击, 空白型, , 
不显示工具箱常用工具4参数 ()
.如果真 (等于 (缩放级数, 9)) ' 如果是正常比例就存下这个图片
    写到文件 (“TEMP.BMP”, _启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度))
.如果真结束
赋值 (文件号, 载入图片 (“TEMP.BMP”))
清除数组 (所有绘画数据)
赋值 (缩放级数, 相加 (缩放级数, 1))
.如果真 (或者 (小于或等于 (缩放级数, 6), 大于或等于 (缩放级数, 23)))
    赋值 (缩放级数, 22)
    返回 ()
.如果真结束
赋值 (.宽度, 相乘 (相减 (.宽度, 2), 缩放比例 [缩放级数]))
赋值 (.高度, 相乘 (相减 (.高度, 2), 缩放比例 [缩放级数]))
 ' 画板1.底图 ＝ 比例缩放 (画板1.取图片 (画板1.宽度, 画板1.高度), 缩放比例 [缩放级数] × 100, 缩放比例 [缩放级数] × 100)' 这个函数是可以用的,但是速度太慢了.
文件号.画图片 (0, 0, .宽度, .高度, #拷贝)
赋值 (.底图, .取图片 (.宽度, .高度))


.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 鼠标右键功能
 ' 能使用鼠标右键的工具是：
 ' 铅笔，擦皮，柒桶，文字，直线，曲线，方形，多边型，圆形，TUO圆形。

 ' 文字工具
未知支持库函数_0 (1)

赋值 (.宽度, 相减 (.宽度, 2))
赋值 (.高度, 相减 (.高度, 2))
赋值 (缩放比例 [1], 相除 (1200, 100))
赋值 (缩放比例 [2], 相除 (800, 100))
赋值 (缩放比例 [3], 相除 (700, 100))
赋值 (缩放比例 [4], 相除 (600, 100))
赋值 (缩放比例 [5], 相除 (500, 100))
赋值 (缩放比例 [6], 相除 (400, 100))

赋值 (缩放比例 [7], 相除 (300, 100))
赋值 (缩放比例 [8], 相除 (200, 100))
赋值 (缩放比例 [9], 相除 (100, 100))
赋值 (缩放比例 [10], 相除 (66.67, 100))
赋值 (缩放比例 [11], 相除 (50, 100))
赋值 (缩放比例 [12], 相除 (33.33, 100))
赋值 (缩放比例 [13], 相除 (25, 100))
赋值 (缩放比例 [14], 相除 (16.67, 100))
赋值 (缩放比例 [15], 相除 (12.5, 100))
赋值 (缩放比例 [16], 相除 (8.33, 100))
赋值 (缩放比例 [17], 相除 (6.25, 100))
赋值 (缩放比例 [18], 相除 (5, 100))
赋值 (缩放比例 [19], 相除 (4, 100))
赋值 (缩放比例 [20], 相除 (3, 100))
赋值 (缩放比例 [21], 相除 (2, 100))
赋值 (缩放比例 [22], 相除 (1, 100))
赋值 (缩放级数, 9)


.子程序 _按钮_黑白怀旧_被单击, 空白型, , 
置等待鼠标 ()
赋值 (_启动窗口..底图, 灰度处理 (_启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度)))
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_柔化_被单击, 空白型, , 
.局部变量 图像1, 字节集, , , 

置等待鼠标 ()
赋值 (_启动窗口..底图, 柔化 (_启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度)))
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_锐化_被单击, 空白型, , 
置等待鼠标 ()
赋值 (_启动窗口..底图, 锐化 (_启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度)))
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_增强亮度_被单击, 空白型, , 
置等待鼠标 ()
赋值 (_启动窗口..底图, 亮度处理 (_启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度), 1))
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_降低亮度_被单击, 空白型, , 
置等待鼠标 ()
赋值 (_启动窗口..底图, 亮度处理 (_启动窗口.取图片 (., _启动窗口..宽度, _启动窗口..高度), 2))
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_加饱合度_被单击, 空白型, , 
置等待鼠标 ()
整体调整饱合度明度对比度 (_启动窗口., 10, , )
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_减饱合度_被单击, 空白型, , 
置等待鼠标 ()
整体调整饱合度明度对比度 (_启动窗口., -10, , )
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_加对比度_被单击, 空白型, , 
置等待鼠标 ()
整体调整饱合度明度对比度 (_启动窗口., , , 5)
清除数组 (所有绘画数据)
恢复鼠标 ()



.子程序 _按钮_减对比度_被单击, 空白型, , 
置等待鼠标 ()
整体调整饱合度明度对比度 (_启动窗口., , , -5)
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_加红去青_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., 10, , )
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_加青去红_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., -10, , )
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_加绿去粉_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., , 10, )
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_加粉去绿_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., , -10, )
清除数组 (所有绘画数据)
恢复鼠标 ()

.子程序 _按钮_加蓝去黄_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., , , 10)
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_加黄去蓝_被单击, 空白型, , 
置等待鼠标 ()
整体调整色彩平横 (_启动窗口., , , -10)
清除数组 (所有绘画数据)
恢复鼠标 ()


.子程序 _按钮_效果_被单击, 空白型, , 
.如果 (等于 (.标题, “效果”))
    赋值 (.可视, 真)
    赋值 (.可视, 真)
    赋值 (.可视, 假)
    赋值 (.标题, “颜色”)
.否则
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.标题, “效果”)
.如果结束



.子程序 _按钮_关于1_被单击, 空白型, , 
结束 ()


.子程序 _画板1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (取画图类型 (), #常_多边形))
     ' 多边形_起始点横向 ＝ 横向位置
     ' 多边形_起始点纵向 ＝ 纵向位置
     ' 起点与终点相连
    .如果真 (等于 (多边形_起始, 真))
        
        赋值 (当前绘画数据.左边, 多边形_结束点横向)
        赋值 (当前绘画数据.上边, 多边形_结束点纵向)
        
        赋值 (当前绘画数据.右边, 多边形_起始点横向)
        赋值 (当前绘画数据.下边, 多边形_起始点纵向)
        
        加入成员 (所有绘画数据, 当前绘画数据) ' 绘图完成时,将真正的数据加入到数组中.
        
        绘画 (当前绘画数据)
        赋值 (是否正在绘画, 真)
        俘获鼠标 (取窗口句柄 ())
        
        赋值 (鼠标左键被按下, 真)
        赋值 (结束的横坐标, 横向位置)
        赋值 (结束的竖坐标, 纵向位置)
         ' 画板1.画直线 (当前绘画数据.左边, 当前绘画数据.上边, 当前绘画数据.右边, 当前绘画数据.下边)
    .如果真结束
    赋值 (多边形_起始, 假)
     ' 抓图片,清空数组
    赋值 (.底图, .取图片 (.宽度, .高度))
    清除数组 (所有绘画数据)
.如果真结束


.子程序 画贝赛尔曲线, 空白型, , 
.参数 参1, 整数型, , 
.参数 参2, 整数型, , 
.参数 参3, 整数型, , 
.参数 参4, 整数型, , 
.参数 参5, 整数型, , 
.参数 参6, 整数型, , 
.参数 参7, 整数型, , 
.参数 参8, 整数型, , 

.局部变量 横坐标, 小数型, , "4", 
.局部变量 纵坐标, 小数型, , "4", 
.局部变量 变量1, 小数型, , "11", 
.局部变量 变量2, 小数型, , "11", 
.局部变量 变量3, 小数型, , "11", 
.局部变量 变量4, 小数型, , "11", 
.局部变量 变量5, 小数型, , , 
.局部变量 起始点横坐标, 小数型, , , 
.局部变量 起始点纵坐标, 小数型, , , 
.局部变量 前一点横坐标, 整数型, , , 
.局部变量 前一点纵坐标, 整数型, , , 
.局部变量 循环变量1, 整数型, , , 
.局部变量 循环变量2, 整数型, , , 
.局部变量 循环变量3, 整数型, , , 
.局部变量 边数, 整数型, , , 

 ' 画板1.画笔颜色 ＝ #红色
赋值 (边数, 3)
赋值 (横坐标 [1], 参1)
赋值 (纵坐标 [1], 参2)
赋值 (横坐标 [2], 参3)
赋值 (纵坐标 [2], 参4)
赋值 (横坐标 [3], 参5)
赋值 (纵坐标 [3], 参6)
赋值 (横坐标 [4], 参7)
赋值 (纵坐标 [4], 参8)
 ' 画板1.画直线 (横坐标 [1], 纵坐标 [1], 横坐标 [2], 纵坐标 [2])
 ' 画板1.画直线 (横坐标 [2], 纵坐标 [2], 横坐标 [3], 纵坐标 [3])
 ' 画板1.画直线 (横坐标 [3], 纵坐标 [3], 横坐标 [4], 纵坐标 [4])
横坐标.画点 ( [1], 纵坐标 [1], #黄色)
赋值 (前一点横坐标, 横坐标 [1])
赋值 (前一点纵坐标, 纵坐标 [1])
 ' 画板1.画笔颜色 ＝ #黄色
.变量循环首 (0, 边数, 1, 循环变量1)
    赋值 (变量1 [相加 (循环变量1, 1)], 1)
.变量循环尾 ()
.变量循环首 (2, 边数, 1, 循环变量1)
    .变量循环首 (1, 相减 (循环变量1, 1), 1, 循环变量2)
        赋值 (变量2 [相加 (循环变量2, 1)], 相加 (变量1 [循环变量2], 变量1 [相加 (循环变量2, 1)]))
    .变量循环尾 ()
    .变量循环首 (1, 相减 (循环变量1, 1), 1, 循环变量2)
        赋值 (变量1 [相加 (循环变量2, 1)], 变量2 [相加 (循环变量2, 1)])
    .变量循环尾 ()
.变量循环尾 ()
.变量循环首 (0, 相乘 (边数, 4), 1, 循环变量1)
    赋值 (变量5, 相除 (循环变量1, 相乘 (边数, 4)))
    赋值 (变量3 [1], 1)
    赋值 (变量4 [1], 1)
    .变量循环首 (1, 边数, 1, 循环变量2)
        赋值 (变量3 [相加 (循环变量2, 1)], 相乘 (变量3 [循环变量2], 变量5))
        赋值 (变量4 [相加 (循环变量2, 1)], 相乘 (变量4 [循环变量2], 相减 (1, 变量5)))
    .变量循环尾 ()
    .变量循环首 (0, 边数, 1, 循环变量2)
        赋值 (变量2 [相加 (循环变量2, 1)], 相乘 (变量3 [相加 (循环变量2, 1)], 变量4 [相减 (相加 (边数, 1), 循环变量2)]))
    .变量循环尾 ()
    赋值 (起始点横坐标, 0)
    赋值 (起始点纵坐标, 0)
    .变量循环首 (0, 边数, 1, 循环变量2)
        赋值 (起始点横坐标, 相加 (起始点横坐标, 相乘 (变量1 [相加 (循环变量2, 1)], 变量2 [相加 (循环变量2, 1)], 横坐标 [相加 (循环变量2, 1)])))
        赋值 (起始点纵坐标, 相加 (起始点纵坐标, 相乘 (变量1 [相加 (循环变量2, 1)], 变量2 [相加 (循环变量2, 1)], 纵坐标 [相加 (循环变量2, 1)])))
    .变量循环尾 ()
    前一点横坐标.画直线 (前一点纵坐标, 起始点横坐标, 起始点纵坐标)
    赋值 (前一点横坐标, 起始点横坐标)
    赋值 (前一点纵坐标, 起始点纵坐标)
.变量循环尾 ()


.子程序 _按钮_效果_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

置随机数种子 ()
画贝赛尔曲线 (取随机数 (1, .宽度), 取随机数 (1, .高度), 取随机数 (1, .宽度), 取随机数 (1, .高度), 取随机数 (1, .宽度), 取随机数 (1, .高度), 取随机数 (1, .宽度), 取随机数 (1, .高度))


.子程序 set_stack_empty, 空白型, , 
重定义数组 (stack, 假, 1)
赋值 (stack [1].y, 1)


.子程序 stack_not_empty, 逻辑型, , 
.如果 (等于 (stack [1].y, 1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 push, 空白型, , xl, xr, yd: integer
.参数 xl, 整数型, 参考, 
.参数 xr, 整数型, 参考, 
.参数 yd, 整数型, 参考, 

赋值 (stack [1].y, 相加 (stack [1].y, 1))
.如果真 (大于 (stack [1].y, 取数组成员数 (stack)))
    重定义数组 (stack, 真, 相加 (取数组成员数 (stack), 1))
.如果真结束
赋值 (stack [stack] [1].y, xl, xl)
赋值 (stack [stack] [1].y, xr, xr)
赋值 (stack [stack] [1].y, y, yd)

.子程序 pop, 空白型, , var xl: integer; var xr: integer; var yd: integer
.参数 xl, 整数型, 参考, 
.参数 xr, 整数型, 参考, 
.参数 yd, 整数型, 参考, 
.参数 匿名参数_2012, 空白型, , 

.如果真 (大于 (stack [1].y, 1))
    赋值 (xl, stack [stack] [1].y, xl)
    赋值 (xr, stack [stack] [1].y, xr)
    赋值 (yd, stack [stack] [1].y, y)
    赋值 (stack [1].y, 相减 (stack [1].y, 1))
    重定义数组 (stack, 真, 相减 (取数组成员数 (stack), 1))
.如果真结束


.子程序 FillLine, 字节集, , FBitmap: TBitmap; FWidth, FHeight, Xs,Ys: integer; OldColor, NewColor: Byte
.参数 FBitmap, 字节集, , 
.参数 FWidth, 整数型, , 
.参数 FHeight, 整数型, 参考, 
.参数 Xs, 整数型, , 
.参数 Ys, 整数型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 
.参数 匿名参数_2021, 空白型, , 

.局部变量 TBitmap, 位图, , , 
.局部变量 TBitmap2, 位图, , , 
.局部变量 H, 整数型, , , 
.局部变量 W, 整数型, , , 

set_stack_empty ()
.如果真 (CT_Color (OldColor, NewColor, ColorWarp))
    返回 (FBitmap)
.如果真结束
TBitmap.载入数据 (FBitmap)
TBitmap2.创建 (TBitmap.取宽度 (), TBitmap.取高度 (), 1, #白色)
赋值 (i, Xs)
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    TBitmap2.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), #黑色)
    赋值 (i, 相加 (i, 1))
    .如果真 (等于 (i, TBitmap.取宽度 ()))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xr, 相减 (i, 1))
赋值 (i, 相减 (Xs, 1))
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    TBitmap2.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), #黑色)
    赋值 (i, 相减 (i, 1))
    .如果真 (等于 (i, 0))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xl, 相加 (i, 1))
.如果真 (大于 (Ys, 0))
    push (Xl, Xr, 负 (相减 (Ys, 1)))
.如果真结束
.如果真 (小于 (Ys, 相减 (TBitmap.取高度 (), 1)))
    push (Xl, Xr, 相加 (Ys, 1))
.如果真结束
.判断循环首 (stack_not_empty ())
    pop (p_Xl, p_Xr, signed_Y)
    赋值 (Y, 取绝对值 (signed_Y))
    .如果 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (p_Xl, 1), 相减 (Y, 1)), ColorWarp))
         ' //xl处是oldcolor时
        .如果 (大于 (p_Xl, 0))
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .否则
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .如果结束
        
    .否则
        赋值 (X, p_Xl)
        .判断开始 (或者 (并且 (大于 (X, 0), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 2), 相减 (Y, 1)), ColorWarp), 假)), 等于 (X, 0)))
            .判断循环首 (等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, X)
            
        .判断 (大于 (p_Xl, 0))
             ' 否则xl 的左邻点是oldcolor时，先考虑左边，向左找xl
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .默认
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .判断结束
        
    .如果结束
    .判断循环首 (小于或等于 (X, 相加 (p_Xr, 1)))
        .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
            TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
            TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
            赋值 (X, 相加 (X, 1))
            .如果真 (等于 (X, TBitmap.取宽度 ()))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (Xr, 相减 (X, 1))
        .如果真 (并且 (小于或等于 (取绝对值 (相减 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相减 (signed_Y, 1)), 1)))
            .如果真 (小于或等于 (Xl, 相减 (p_Xl, 1)))
                push (Xl, 相减 (p_Xl, 1), 负 (相减 (signed_Y, 1)))
            .如果真结束
            .如果真 (大于或等于 (Xr, 相加 (p_Xr, 1)))
                push (相加 (p_Xr, 1), Xr, 负 (相减 (signed_Y, 1)))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取绝对值 (相加 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相加 (signed_Y, 1)), 1)))
            push (Xl, Xr, 相加 (signed_Y, 1))
        .如果真结束
        .如果真 (等于 (X, TBitmap.取宽度 ()))
            赋值 (X, 相加 (X, 1))
        .如果真结束
        .如果真 (小于或等于 (X, 相减 (TBitmap.取宽度 (), 1)))
            .判断循环首 (并且 (小于或等于 (X, 相加 (p_Xr, 1)), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假)))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
        .如果真结束
        
    .判断循环尾 ()
    处理事件 ()
.判断循环尾 ()
TBitmap.载入数据 (FBitmap)
.计次循环首 (TBitmap2.取高度 (), H)
    .计次循环首 (TBitmap2.取宽度 (), W)
        .如果真 (不等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), 相减 (H, 1))))
            .如果真 (或者 (等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 2), 相减 (H, 1))), 等于 (#白色, TBitmap2.取某点颜色 (W, 相减 (H, 1))), 等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), 相减 (H, 2))), 等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), H)), 等于 (W, 0), 等于 (H, 0), 等于 (W, TBitmap2.取宽度 ()), 等于 (H, TBitmap2.取高度 ())))
                TBitmap.置某点颜色 (相减 (W, 1), 相减 (H, 1), NewColor)
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (TBitmap.取位图数据 ())


.子程序 FillColors, 字节集, , FBitmap: TBitmap; FWidth, FHeight, Xs,Ys: integer; OldColor, NewColor: Byte
.参数 FBitmap, 字节集, , 
.参数 FWidth, 整数型, , 
.参数 FHeight, 整数型, 参考, 
.参数 Xs, 整数型, , 
.参数 Ys, 整数型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 
.参数 匿名参数_2034, 空白型, , 

.局部变量 TBitmap, 位图, , , 
.局部变量 匿名局部变量_2036, 空白型, , , 


set_stack_empty ()
.如果真 (CT_Color (OldColor, NewColor, ColorWarp))
    返回 (FBitmap)
.如果真结束
TBitmap.载入数据 (FBitmap)
赋值 (i, Xs)
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    赋值 (i, 相加 (i, 1))
    .如果真 (等于 (i, TBitmap.取宽度 ()))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xr, 相减 (i, 1))
赋值 (i, 相减 (Xs, 1))
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    赋值 (i, 相减 (i, 1))
    .如果真 (等于 (i, 0))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xl, 相加 (i, 1))
.如果真 (大于 (Ys, 0))
    push (Xl, Xr, 负 (相减 (Ys, 1)))
.如果真结束
.如果真 (小于 (Ys, 相减 (TBitmap.取高度 (), 1)))
    push (Xl, Xr, 相加 (Ys, 1))
.如果真结束
.判断循环首 (stack_not_empty ())
    pop (p_Xl, p_Xr, signed_Y)
    赋值 (Y, 取绝对值 (signed_Y))
    .如果 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (p_Xl, 1), 相减 (Y, 1)), ColorWarp))
         ' //xl处是oldcolor时
        .如果 (大于 (p_Xl, 0))
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .否则
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .如果结束
        
    .否则
        赋值 (X, p_Xl)
        .判断开始 (或者 (并且 (大于 (X, 0), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 2), 相减 (Y, 1)), ColorWarp), 假)), 等于 (X, 0)))
            .判断循环首 (等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, X)
            
        .判断 (大于 (p_Xl, 0))
             ' 否则xl 的左邻点是oldcolor时，先考虑左边，向左找xl
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .默认
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .判断结束
        
    .如果结束
    .判断循环首 (小于或等于 (X, 相加 (p_Xr, 1)))
        .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
            TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
            赋值 (X, 相加 (X, 1))
            .如果真 (等于 (X, TBitmap.取宽度 ()))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (Xr, 相减 (X, 1))
        .如果真 (并且 (小于或等于 (取绝对值 (相减 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相减 (signed_Y, 1)), 1)))
            .如果真 (小于或等于 (Xl, 相减 (p_Xl, 1)))
                push (Xl, 相减 (p_Xl, 1), 负 (相减 (signed_Y, 1)))
            .如果真结束
            .如果真 (大于或等于 (Xr, 相加 (p_Xr, 1)))
                push (相加 (p_Xr, 1), Xr, 负 (相减 (signed_Y, 1)))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取绝对值 (相加 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相加 (signed_Y, 1)), 1)))
            push (Xl, Xr, 相加 (signed_Y, 1))
        .如果真结束
        .如果真 (等于 (X, TBitmap.取宽度 ()))
            赋值 (X, 相加 (X, 1))
        .如果真结束
        .如果真 (小于或等于 (X, 相减 (TBitmap.取宽度 (), 1)))
            .判断循环首 (并且 (小于或等于 (X, 相加 (p_Xr, 1)), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假)))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
        .如果真结束
        
    .判断循环尾 ()
    处理事件 ()
.判断循环尾 ()
返回 (TBitmap.取位图数据 ())

.子程序 CT_Color, 逻辑型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 

.局部变量 Red, 整数型, , "2", 
.局部变量 Green, 整数型, , "2", 
.局部变量 Blue, 整数型, , "2", 
.局部变量 匿名局部变量_2043, 空白型, , , 

赋值 (Red [1], 求余数 (OldColor, 256))
赋值 (Blue [1], 相除 (OldColor, 65536))
赋值 (Green [1], 相除 (相减 (OldColor, Red [1], 相乘 (Blue [1], 65536)), 256))

赋值 (Red [2], 求余数 (NewColor, 256))
赋值 (Blue [2], 相除 (NewColor, 65536))
赋值 (Green [2], 相除 (相减 (NewColor, Red [2], 相乘 (Blue [2], 65536)), 256))

.如果 (并且 (小于或等于 (取绝对值 (相减 (Red [1], Red [2])), ColorWarp), 小于或等于 (取绝对值 (相减 (Blue [1], Blue [2])), ColorWarp), 小于或等于 (取绝对值 (相减 (Green [1], Green [2])), ColorWarp)))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 _单选框_放大_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 



.子程序 _单选框_画笔_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()
赋值 (.现行子夹, 0)
赋值 (.高度, 428)


.子程序 回复原始大小, 空白型, , 
.如果真 (不等于 (缩放级数, 9))
    赋值 (缩放级数, 9)
    赋值 (.宽度, 相减 (.宽度, 2))
    赋值 (.高度, 相减 (.高度, 2))
    
    赋值 (文件号, 载入图片 (“TEMP.BMP”))
    文件号.画图片 (0, 0, , , )
    赋值 (.底图, .取图片 (.宽度, .高度))
.如果真结束



.子程序 _单选框_擦皮_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 _单选框_柒桶_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()
赋值 (.现行子夹, 1)
 ' 选择夹1.刷新显示 ()
赋值 (.高度, 485)

.子程序 _单选框_吸管_被单击, 空白型, , 
回复原始大小 ()

.子程序 _单选框_印章_被单击, 空白型, , 
回复原始大小 ()
不显示工具箱常用工具4参数 ()
赋值 (.高度, 483)
赋值 (.现行子夹, 2)

.子程序 _单选框_写字_被单击, 空白型, , 
回复原始大小 ()

.子程序 _单选框_直线_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 _单选框_曲线_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 _单选框_矩形_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()
赋值 (.高度, 487)
赋值 (.现行子夹, 3)

.子程序 _单选框_多边形_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 _单选框_圆_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 _单选框_圆角矩形_被单击, 空白型, , 
回复原始大小 ()
工具箱常用工具4参数 ()

.子程序 工具箱常用工具4参数, 空白型, , 
赋值 (.可视, 真)
赋值 (.可视, 真)
赋值 (.可视, 真)
赋值 (.可视, 真)
赋值 (.可视, 真)
赋值 (.可视, 真)
赋值 (.可视, 真)


.子程序 不显示工具箱常用工具4参数, 空白型, , 
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 假)

.子程序 _单选框线型1_被单击, 空白型, , 
赋值 (.内容, “1”)


.子程序 _单选框线型2_被单击, 空白型, , 
赋值 (.内容, “2”)


.子程序 _单选框线型3_被单击, 空白型, , 
赋值 (.内容, “3”)


.子程序 _单选框线型4_被单击, 空白型, , 
赋值 (.内容, “4”)


.子程序 _单选框线型5_被单击, 空白型, , 
赋值 (.内容, “5”)


.子程序 _编辑框_笔尖_调节钮被按下, 空白型, , 
.参数 按钮值, 整数型, , 

赋值 (.内容, 到文本 (相加 (到数值 (.内容), 按钮值)))
.如果真 (大于或等于 (到数值 (.内容), 31))
    赋值 (.内容, “30”)
.如果真结束
.如果真 (小于或等于 (到数值 (.内容), 0))
    赋值 (.内容, “1”)
.如果真结束
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 假)
.如果真 (等于 (到数值 (.内容), 1))
    赋值 (.选中, 真)
.如果真结束
.如果真 (等于 (到数值 (.内容), 2))
    赋值 (.选中, 真)
.如果真结束
.如果真 (等于 (到数值 (.内容), 3))
    赋值 (.选中, 真)
.如果真结束
.如果真 (等于 (到数值 (.内容), 4))
    赋值 (.选中, 真)
.如果真结束
.如果真 (等于 (到数值 (.内容), 5))
    赋值 (.选中, 真)
.如果真结束



.程序集 滤镜程序集, , , 

.程序集变量 宽度, 整数型, , , 
.程序集变量 高度, 整数型, , , 
.程序集变量 颜色信息, 字节集, , , 
.程序集变量 纠正位, 整数型, , , 
.子程序 顺旋90度, 字节集, 公开, 本命令使图像按逆时针方向旋转90度。
.参数 源图像, 字节集, 参考, 必须为24位真彩色位图(bmp格式)。

.局部变量 新图像, 字节集, , , 
.局部变量 数据位置, 整数型, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 文件大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行尾点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据位置, 相加 (取字节集数据 (取字节集中间 (源图像, 11, 4), #整数型), 1))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (高度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (高度, 3), 4))))
赋值 (数据大小, 相乘 (相加 (相乘 (高度, 3), 纠正位), 宽度))
赋值 (蓝色, 55)
赋值 (绿色, 56)
赋值 (红色, 57)
赋值 (当前列, 0)
赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
赋值 (文件大小, 取字节集长度 (新图像))
.计次循环首 (宽度, )
    .计次循环首 (高度, 当前行)
        赋值 (行尾点, 相加 (相减 (相乘 (当前行, 实际数宽), 相减 (实际数宽, 相乘 (宽度, 3))), 54))
        
        输出调试文本 (“当前行：” ＋ 到文本 (当前行))
        输出调试文本 (“当前点位置：” ＋ 到文本 (行尾点 － 当前列))
        
        赋值 (新图像 [蓝色], 源图像 [相减 (行尾点, 当前列, 2)])
        赋值 (新图像 [绿色], 源图像 [相减 (行尾点, 当前列, 1)])
        赋值 (新图像 [红色], 源图像 [相减 (行尾点, 当前列)])
        赋值 (蓝色, 相加 (蓝色, 3))
        赋值 (绿色, 相加 (绿色, 3))
        赋值 (红色, 相加 (红色, 3))
    .计次循环尾 ()
    赋值 (当前列, 相加 (当前列, 3))
    赋值 (蓝色, 相加 (蓝色, 纠正位))
    赋值 (绿色, 相加 (绿色, 纠正位))
    赋值 (红色, 相加 (红色, 纠正位))
    赋值 (新图像, 相加 (新图像, 取空白字节集 (纠正位)))
.计次循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (高度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (宽度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (数据大小)))
返回 (新图像)


.子程序 旋转180度, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 必须为24位真彩色位图(bmp格式)。

.局部变量 新图像, 字节集, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行尾点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (纠正位, 相减 (实际数宽, 相乘 (宽度, 3)))
赋值 (蓝色, 55)
赋值 (绿色, 56)
赋值 (红色, 57)
赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
.变量循环首 (高度, 1, -1, 当前行)
    赋值 (行尾点, 相加 (相减 (相乘 (当前行, 实际数宽), 相减 (实际数宽, 相乘 (宽度, 3))), 54))
    赋值 (当前列, 0)
    .计次循环首 (宽度, )
        赋值 (新图像 [蓝色], 源图像 [相减 (行尾点, 当前列, 2)])
        赋值 (新图像 [绿色], 源图像 [相减 (行尾点, 当前列, 1)])
        赋值 (新图像 [红色], 源图像 [相减 (行尾点, 当前列)])
        赋值 (蓝色, 相加 (蓝色, 3))
        赋值 (绿色, 相加 (绿色, 3))
        赋值 (红色, 相加 (红色, 3))
        赋值 (当前列, 相加 (当前列, 3))
    .计次循环尾 ()
    赋值 (蓝色, 相加 (蓝色, 纠正位))
    赋值 (绿色, 相加 (绿色, 纠正位))
    赋值 (红色, 相加 (红色, 纠正位))
    赋值 (新图像, 相加 (新图像, 取空白字节集 (纠正位)))
.变量循环尾 ()

返回 (新图像)


.子程序 逆旋90度, 字节集, , 返回将24位真彩色位图(bmp格式)进行逆时针旋转90度后的图像
.参数 源图像, 字节集, 参考, 必须为24位真彩色位图(bmp格式)。

.局部变量 新图像, 字节集, , , 
.局部变量 数据位置, 整数型, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 文件大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据位置, 相加 (取字节集数据 (取字节集中间 (源图像, 11, 4), #整数型), 1))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (高度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (高度, 3), 4))))
赋值 (数据大小, 相乘 (相加 (相乘 (高度, 3), 纠正位), 宽度))
赋值 (蓝色, 55)
赋值 (绿色, 56)
赋值 (红色, 57)
赋值 (当前列, 0)
赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
赋值 (文件大小, 取字节集长度 (新图像))
.计次循环首 (宽度, )
    .变量循环首 (高度, 1, -1, 当前行)
        赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 1, 54)) ' 其中“54”为图像头数据长度
        赋值 (新图像 [蓝色], 源图像 [相加 (行首点, 当前列)])
        赋值 (新图像 [绿色], 源图像 [相加 (行首点, 当前列, 1)])
        赋值 (新图像 [红色], 源图像 [相加 (行首点, 当前列, 2)])
        赋值 (蓝色, 相加 (蓝色, 3))
        赋值 (绿色, 相加 (绿色, 3))
        赋值 (红色, 相加 (红色, 3))
    .变量循环尾 ()
    
    赋值 (当前列, 相加 (当前列, 3))
    赋值 (蓝色, 相加 (蓝色, 纠正位))
    赋值 (绿色, 相加 (绿色, 纠正位))
    赋值 (红色, 相加 (红色, 纠正位))
    赋值 (新图像, 相加 (新图像, 取空白字节集 (纠正位)))
.计次循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (高度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (宽度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (数据大小)))
返回 (新图像)


.子程序 柔化, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (2, 相减 (高度, 1), 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (4, 相减 (相乘 (宽度, 3), 3), 3, 当前列)
        赋值 (新图像 [相加 (行首点, 当前列)], 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列)], 源图像 [相加 (相减 (行首点, 3), 当前列)], 源图像 [相加 (行首点, 当前列)], 源图像 [相加 (行首点, 3, 当前列)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列)], 源图像 [相加 (行首点, 实际数宽, 当前列)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列)]), 9))
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 1)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列, 1)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 1)], 源图像 [相加 (相减 (行首点, 3), 当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (行首点, 3, 当前列, 1)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 1)], 源图像 [相加 (行首点, 实际数宽, 当前列, 1)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 1)]), 9))
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 2)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列, 2)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 2)], 源图像 [相加 (相减 (行首点, 3), 当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)], 源图像 [相加 (行首点, 3, 当前列, 2)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 2)], 源图像 [相加 (行首点, 实际数宽, 当前列, 2)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 2)]), 9))
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 锐化, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (2, 相减 (高度, 1), 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (4, 相减 (相乘 (宽度, 3), 3), 3, 当前列)
        输出调试文本 (“ ”)
        输出调试文本 (“当前点：” ＋ 到文本 (行首点 ＋ 当前列))
        输出调试文本 (“新图像的值：” ＋ 到文本 (新图像 [行首点 ＋ 当前列]))
        输出调试文本 (“源图像的值：” ＋ 到文本 (源图像 [行首点 ＋ 当前列]))
        
        赋值 (蓝色, 相加 (源图像 [相加 (行首点, 当前列)], 整除 (相减 (源图像 [相加 (行首点, 当前列)], 源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列)]), 2)))
        .如果真 (大于 (蓝色, 255))
            赋值 (蓝色, 255)
        .如果真结束
        .如果真 (小于 (蓝色, 0))
            赋值 (蓝色, 0)
        .如果真结束
        
        赋值 (绿色, 相加 (源图像 [相加 (行首点, 当前列, 1)], 整除 (相减 (源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 1)]), 2)))
        .如果真 (大于 (绿色, 255))
            赋值 (绿色, 255)
        .如果真结束
        .如果真 (小于 (绿色, 0))
            赋值 (绿色, 0)
        .如果真结束
        
        赋值 (红色, 相加 (源图像 [相加 (行首点, 当前列, 2)], 整除 (相减 (源图像 [相加 (行首点, 当前列, 2)], 源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 2)]), 2)))
        .如果真 (大于 (红色, 255))
            赋值 (红色, 255)
        .如果真结束
        .如果真 (小于 (红色, 0))
            赋值 (红色, 0)
        .如果真结束
        
        赋值 (新图像 [相加 (行首点, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 红色)
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 浮雕, 字节集, , 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (1, 相减 (高度, 1), 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (1, 相减 (相乘 (宽度, 3), 3), 3, 当前列)
        
        赋值 (蓝色, 取绝对值 (相加 (相减 (源图像 [相加 (行首点, 当前列)], 源图像 [相加 (行首点, 相加 (实际数宽, 3), 当前列)]), 128)))
        .如果真 (大于 (蓝色, 255))
            赋值 (蓝色, 255)
        .如果真结束
        .如果真 (小于 (蓝色, 0))
            赋值 (蓝色, 0)
        .如果真结束
        
        赋值 (绿色, 取绝对值 (相加 (相减 (源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 1)]), 128)))
        .如果真 (大于 (绿色, 255))
            赋值 (绿色, 255)
        .如果真结束
        .如果真 (小于 (绿色, 0))
            赋值 (绿色, 0)
        .如果真结束
        
        赋值 (红色, 取绝对值 (相加 (相减 (源图像 [相加 (行首点, 当前列, 2)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 2)]), 128)))
        .如果真 (大于 (红色, 255))
            赋值 (红色, 255)
        .如果真结束
        .如果真 (小于 (红色, 0))
            赋值 (红色, 0)
        .如果真结束
        
        赋值 (新图像 [相加 (行首点, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 红色)
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 马赛克, 字节集, , 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (2, 相减 (高度, 1), 3, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (4, 相减 (相乘 (宽度, 3), 3), 9, 当前列)
        赋值 (蓝色, 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列)], 源图像 [相加 (相减 (行首点, 3), 当前列)], 源图像 [相加 (行首点, 当前列)], 源图像 [相加 (行首点, 3, 当前列)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列)], 源图像 [相加 (行首点, 实际数宽, 当前列)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列)]), 9))
        赋值 (绿色, 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 1)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列, 1)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 1)], 源图像 [相加 (相减 (行首点, 3), 当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (行首点, 3, 当前列, 1)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 1)], 源图像 [相加 (行首点, 实际数宽, 当前列, 1)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 1)]), 9))
        赋值 (红色, 整除 (相加 (源图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 2)], 源图像 [相加 (相减 (行首点, 实际数宽), 当前列, 2)], 源图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 2)], 源图像 [相加 (相减 (行首点, 3), 当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)], 源图像 [相加 (行首点, 3, 当前列, 2)], 源图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 2)], 源图像 [相加 (行首点, 实际数宽, 当前列, 2)], 源图像 [相加 (行首点, 实际数宽, 3, 当前列, 2)]), 9))
        
        赋值 (新图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列)], 蓝色)
        赋值 (新图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (相减 (行首点, 相加 (实际数宽, 3)), 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (相减 (行首点, 实际数宽), 当前列)], 蓝色)
        赋值 (新图像 [相加 (相减 (行首点, 实际数宽), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (相减 (行首点, 实际数宽), 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列)], 蓝色)
        赋值 (新图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (相减 (行首点, 相减 (实际数宽, 3)), 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (相减 (行首点, 3), 当前列)], 蓝色)
        赋值 (新图像 [相加 (相减 (行首点, 3), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (相减 (行首点, 3), 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (行首点, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (行首点, 3, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 3, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 3, 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列)], 蓝色)
        赋值 (新图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (相减 (相加 (行首点, 实际数宽), 3), 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (行首点, 实际数宽, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 实际数宽, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 实际数宽, 当前列, 2)], 红色)
        
        赋值 (新图像 [相加 (行首点, 相加 (实际数宽, 3), 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 相加 (实际数宽, 3), 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 相加 (实际数宽, 3), 当前列, 2)], 红色)
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 单色处理, 字节集, , 
.参数 源图像, 字节集, 参考, 
.参数 单色方式, 整数型, , 1、蓝色；2、绿色；3、红色

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 灰度值, 整数型, , , 

赋值 (源图像, 灰度处理 (源图像))
赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
        赋值 (灰度值, 整除 (相加 (源图像 [相加 (行首点, 当前列)], 源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (行首点, 当前列, 2)]), 3))
        
        .判断开始 (等于 (单色方式, 1))
            赋值 (新图像 [相加 (行首点, 当前列)], 灰度值)
            赋值 (新图像 [相加 (行首点, 当前列, 1)], 0)
            赋值 (新图像 [相加 (行首点, 当前列, 2)], 0)
        .判断 (等于 (单色方式, 2))
            赋值 (新图像 [相加 (行首点, 当前列)], 0)
            赋值 (新图像 [相加 (行首点, 当前列, 1)], 灰度值)
            赋值 (新图像 [相加 (行首点, 当前列, 2)], 0)
        .判断 (等于 (单色方式, 3))
            赋值 (新图像 [相加 (行首点, 当前列)], 0)
            赋值 (新图像 [相加 (行首点, 当前列, 1)], 0)
            赋值 (新图像 [相加 (行首点, 当前列, 2)], 灰度值)
        .默认
            
        .判断结束
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 灰度处理, 字节集, , 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 灰度值, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
        赋值 (灰度值, 整除 (相加 (源图像 [相加 (行首点, 当前列)], 源图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (行首点, 当前列, 2)]), 3))
        
        赋值 (新图像 [相加 (行首点, 当前列)], 灰度值)
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 灰度值)
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 灰度值)
        
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 亮度处理, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 
.参数 亮度方式, 整数型, , 1、增强亮度；2、降低亮度

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
        赋值 (蓝色, 源图像 [相加 (行首点, 当前列)])
        赋值 (绿色, 源图像 [相加 (行首点, 当前列, 1)])
        赋值 (红色, 源图像 [相加 (行首点, 当前列, 2)])
        
        .判断开始 (等于 (亮度方式, 1))
            赋值 (蓝色, 相加 (蓝色, 10))
            赋值 (蓝色, 选择 (大于 (蓝色, 255), 255, 蓝色))
            赋值 (绿色, 相加 (绿色, 10))
            赋值 (绿色, 选择 (大于 (绿色, 255), 255, 绿色))
            赋值 (红色, 相加 (红色, 10))
            赋值 (红色, 选择 (大于 (红色, 255), 255, 红色))
        .判断 (等于 (亮度方式, 2))
            赋值 (蓝色, 相减 (蓝色, 10))
            赋值 (蓝色, 选择 (小于 (蓝色, 0), 0, 蓝色))
            赋值 (绿色, 相减 (绿色, 10))
            赋值 (绿色, 选择 (小于 (绿色, 0), 0, 绿色))
            赋值 (红色, 相减 (红色, 10))
            赋值 (红色, 选择 (小于 (红色, 0), 0, 红色))
        .默认
            
        .判断结束
        
        赋值 (新图像 [相加 (行首点, 当前列)], 蓝色)
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 绿色)
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 红色)
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 颜色翻转, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (新图像, 源图像)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
        
        赋值 (新图像 [相加 (行首点, 当前列)], 相减 (255, 源图像 [相加 (行首点, 当前列)]))
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 相减 (255, 源图像 [相加 (行首点, 当前列, 1)]))
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 相减 (255, 源图像 [相加 (行首点, 当前列, 2)]))
    .变量循环尾 ()
.变量循环尾 ()

返回 (新图像)


.子程序 分辨率二分之一, 字节集, , 
.参数 源图像, 字节集, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))

赋值 (新宽度, 相乘 (宽度, 2))
赋值 (新高度, 相乘 (高度, 2))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
赋值 (数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))

赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
赋值 (文件大小, 取字节集长度 (新图像))
赋值 (新行首点, 55)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    赋值 (新当前列, 0)
    .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
        
        赋值 (新图像 [相加 (新行首点, 新当前列)], 源图像 [相加 (行首点, 当前列)])
        赋值 (新图像 [相加 (新行首点, 新当前列, 3)], 源图像 [相加 (行首点, 当前列)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列)], 源图像 [相加 (行首点, 当前列)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列, 3)], 源图像 [相加 (行首点, 当前列)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
        赋值 (新图像 [相加 (新行首点, 新当前列, 4)], 源图像 [相加 (行首点, 当前列, 1)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列, 4)], 源图像 [相加 (行首点, 当前列, 1)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
        赋值 (新图像 [相加 (新行首点, 新当前列, 5)], 源图像 [相加 (行首点, 当前列, 2)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
        赋值 (新图像 [相加 (新行首点, 相除 (数据大小, 新高度), 新当前列, 5)], 源图像 [相加 (行首点, 当前列, 2)])
        
        赋值 (新当前列, 相加 (新当前列, 6))
    .变量循环尾 ()
    赋值 (新行首点, 相加 (新行首点, 相乘 (相除 (数据大小, 新高度), 2)))
.变量循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (数据大小)))

返回 (新图像)



.子程序 水平扭曲处理, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 
.参数 角度, 小数型, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点, 整数型, , , 
.局部变量 角度方向, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))

.如果 (小于 (角度, 0))
    赋值 (角度方向, -1)
.否则
    赋值 (角度方向, 1)
.如果结束
赋值 (角度, 取绝对值 (角度))
赋值 (新宽度, 取整 (相加 (宽度, 相乘 (求正切 (相除 (相乘 (角度, #pi), 180)), 高度), 0.5)))
赋值 (新高度, 高度)
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
赋值 (数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))

赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
赋值 (文件大小, 取字节集长度 (新图像))
赋值 (新行首点, 54)
.变量循环首 (1, 高度, 1, 当前行)
    赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
    
    .如果 (等于 (角度方向, 1))
        赋值 (新当前列, 相乘 (取整 (相乘 (相减 (当前行, 1), 求正切 (相除 (相乘 (角度, #pi), 180)))), 3))
    .否则
        赋值 (新当前列, 相减 (相乘 (取整 (相加 (相乘 (求正切 (相除 (相乘 (角度, #pi), 180)), 高度), 0.5)), 3), 相乘 (取整 (相乘 (相减 (当前行, 1), 求正切 (相除 (相乘 (角度, #pi), 180)))), 3)))
    .如果结束
    
    赋值 (新图像, 字节集替换 (新图像, 相加 (新行首点, 新当前列), 实际数宽, 取字节集中间 (源图像, 行首点, 实际数宽)))
    赋值 (新行首点, 相加 (新行首点, 相除 (数据大小, 新高度)))
.变量循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (数据大小)))

返回 (新图像)



.子程序 垂直扭曲处理, 字节集, , 
.参数 源图像, 字节集, 参考, 
.参数 角度, 小数型, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点数组, 整数型, , "0", 
.局部变量 角度方向, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 新行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))

.如果 (小于 (角度, 0))
    赋值 (角度方向, -1)
.否则
    赋值 (角度方向, 1)
.如果结束
赋值 (角度, 取绝对值 (角度))
赋值 (新宽度, 宽度)
赋值 (新高度, 取整 (相加 (高度, 相乘 (求正切 (相除 (相乘 (角度, #pi), 180)), 宽度), 0.5)))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
赋值 (数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))

赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
赋值 (文件大小, 取字节集长度 (新图像))
清除数组 (新行首点数组)
.变量循环首 (0, 相减 (新高度, 1), 1, a)
    加入成员 (新行首点数组, 相加 (54, 相乘 (相除 (数据大小, 新高度), a)))
.变量循环尾 ()
.判断开始 (等于 (角度方向, 1))
    .变量循环首 (1, 高度, 1, 当前行)
        赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
        .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
            赋值 (新当前列, 当前列)
            赋值 (新行首点, 新行首点数组 [相加 (取整 (相乘 (相除 (当前列, 3), 求正切 (相除 (相乘 (角度, #pi), 180)))), 当前行)])
            赋值 (新图像 [相加 (新行首点, 新当前列)], 源图像 [相加 (行首点, 当前列)])
            赋值 (新图像 [相加 (新行首点, 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
            赋值 (新图像 [相加 (新行首点, 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
        .变量循环尾 ()
    .变量循环尾 ()
    
.判断 (等于 (角度方向, -1))
    .变量循环首 (高度, 1, -1, 当前行)
        赋值 (行首点, 相加 (相减 (相乘 (当前行, 实际数宽), 实际数宽), 54))
        .变量循环首 (1, 相乘 (宽度, 3), 3, 当前列)
            赋值 (新当前列, 当前列)
            赋值 (新行首点, 新行首点数组 [相减 (相加 (当前行, 新高度), 高度, 取整 (相乘 (相除 (当前列, 3), 求正切 (相除 (相乘 (角度, #pi), 180)))))])
            赋值 (新图像 [相加 (新行首点, 新当前列)], 源图像 [相加 (行首点, 当前列)])
            赋值 (新图像 [相加 (新行首点, 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
            赋值 (新图像 [相加 (新行首点, 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
        .变量循环尾 ()
    .变量循环尾 ()
    
.默认
    
.判断结束
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (数据大小)))

返回 (新图像)




.子程序 比例缩放, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 
.参数 X比例, 整数型, 参考, 本参数为0时，默认100
.参数 Y比例, 整数型, 参考, 本参数为0时，默认100

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 新文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点, 整数型, , , 
.局部变量 新数据大小, 整数型, , , 
.局部变量 新当前行, 整数型, , , 
.局部变量 新实际数宽, 整数型, , , 

.如果真 (等于 (X比例, 0))
    赋值 (X比例, 100)
.如果真结束
.如果真 (等于 (Y比例, 0))
    赋值 (Y比例, 100)
.如果真结束
赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))

赋值 (新宽度, 取整 (相除 (相乘 (宽度, X比例), 100)))
赋值 (新高度, 取整 (相除 (相乘 (高度, Y比例), 100)))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
赋值 (新数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))
赋值 (新实际数宽, 相除 (新数据大小, 新高度))

赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (新数据大小)))
赋值 (新文件大小, 取字节集长度 (新图像))
.变量循环首 (0, 相减 (新高度, 1), 1, 新当前行)
    赋值 (行首点, 相加 (相乘 (取整 (相乘 (相除 (新当前行, Y比例), 100)), 实际数宽), 55))
    赋值 (新行首点, 相加 (相乘 (新当前行, 新实际数宽), 55))
    .变量循环首 (0, 相减 (相乘 (新宽度, 3), 1), 3, 新当前列)
        赋值 (当前列, 相乘 (取整 (相乘 (相除 (新当前列, 3, X比例), 100)), 3))
        
        赋值 (新图像 [相加 (新行首点, 新当前列)], 源图像 [相加 (行首点, 当前列)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
    .变量循环尾 ()
.变量循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (新文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (新数据大小)))

返回 (新图像)



.子程序 水平镜像, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 必须为24位真彩色位图(bmp格式)。

.局部变量 新图像, 字节集, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行尾点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (纠正位, 相减 (实际数宽, 相乘 (宽度, 3)))
赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
.变量循环首 (高度, 1, -1, 当前行)
    赋值 (新图像, 字节集替换 (新图像, 相加 (55, 相乘 (相减 (当前行, 1), 实际数宽)), 实际数宽, 取字节集中间 (源图像, 相加 (55, 相乘 (相减 (高度, 当前行), 实际数宽)), 实际数宽)))
.变量循环尾 ()
返回 (新图像)



.子程序 垂直镜像, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 必须为24位真彩色位图(bmp格式)。

.局部变量 新图像, 字节集, , , 
.局部变量 蓝色, 整数型, , , 
.局部变量 绿色, 整数型, , , 
.局部变量 红色, 整数型, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 

赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度))
赋值 (纠正位, 相减 (实际数宽, 相乘 (宽度, 3)))
赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (数据大小)))
.变量循环首 (0, 相减 (高度, 1), 1, 当前行)
    赋值 (行首点, 相加 (55, 相乘 (当前行, 实际数宽)))
    .变量循环首 (0, 相乘 (相减 (宽度, 1), 3), 3, 当前列)
        赋值 (新图像 [相加 (行首点, 当前列)], 源图像 [相减 (相加 (行首点, 相乘 (相减 (宽度, 1), 3)), 当前列)])
        赋值 (新图像 [相加 (行首点, 当前列, 1)], 源图像 [相加 (相减 (相加 (行首点, 相乘 (相减 (宽度, 1), 3)), 当前列), 1)])
        赋值 (新图像 [相加 (行首点, 当前列, 2)], 源图像 [相加 (相减 (相加 (行首点, 相乘 (相减 (宽度, 1), 3)), 当前列), 2)])
    .变量循环尾 ()
.变量循环尾 ()
返回 (新图像)


.子程序 旋转, 字节集, 公开, 可以旋转任意角度
.参数 源图像, 字节集, 参考, 
.参数 角度, 小数型, 参考, 

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 新文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点, 整数型, , , 
.局部变量 新数据大小, 整数型, , , 
.局部变量 新当前行, 整数型, , , 
.局部变量 新实际数宽, 整数型, , , 
.局部变量 平方根, 小数型, , , 
.局部变量 反正切1, 小数型, , , 
.局部变量 反正切2, 小数型, , , 
.局部变量 d, 小数型, , , 
.局部变量 正反值1, 小数型, , , 
.局部变量 正反值2, 小数型, , , 
.局部变量 最大绝对值, 小数型, , , 
.局部变量 余反数1, 小数型, , , 
.局部变量 余反数2, 小数型, , , 
.局部变量 最大余反数, 小数型, , , 
.局部变量 新角度, 小数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 r红, 整数型, , , 
.局部变量 g绿, 整数型, , , 
.局部变量 b兰, 整数型, , , 
.局部变量 数据, 整数型, , "3", 

赋值 (角度, 求余数 (角度, 360))
.判断开始 (等于 (角度, 0))
    赋值 (新图像, 源图像)
.判断 (或者 (等于 (角度, 90), 等于 (角度, -270)))
    赋值 (新图像, 顺旋90度 (源图像))
.判断 (或者 (等于 (角度, 180), 等于 (角度, -180)))
    赋值 (新图像, 旋转180度 (源图像))
.判断 (或者 (等于 (角度, 270), 等于 (角度, -90)))
    赋值 (新图像, 逆旋90度 (源图像))
.默认
    赋值 (角度, 相乘 (相除 (角度, 180), #pi))
    赋值 (宽度, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型))
    赋值 (高度, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型))
    赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
    赋值 (实际数宽, 相除 (数据大小, 高度))
    
    赋值 (平方根, 相除 (求平方根 (相加 (相乘 (高度, 高度), 相乘 (宽度, 宽度))), 2))
    赋值 (反正切1, 求反正切 (相除 (高度, 宽度)))
    赋值 (正反值1, 相乘 (取绝对值 (相乘 (求正弦 (相加 (角度, 反正切1)), 平方根)), 2))
    赋值 (正反值2, 相乘 (取绝对值 (相乘 (求正弦 (相减 (角度, 反正切1)), 平方根)), 2))
    赋值 (最大绝对值, 选择 (大于 (正反值1, 正反值2), 正反值1, 正反值2))
    赋值 (余反数1, 相乘 (取绝对值 (相乘 (求余弦 (相加 (角度, 反正切1)), 平方根)), 2))
    赋值 (余反数2, 相乘 (取绝对值 (相乘 (求余弦 (相减 (角度, 反正切1)), 平方根)), 2))
    赋值 (最大余反数, 选择 (大于 (余反数1, 余反数2), 余反数1, 余反数2))
    
    赋值 (新宽度, 取整 (相加 (最大余反数, 0.5)))
    赋值 (新高度, 取整 (相加 (最大绝对值, 0.5)))
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
    赋值 (新数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))
    赋值 (新实际数宽, 相除 (新数据大小, 新高度))
    新图像 ＝ 取字节集左边 (源图像, 54) ＋ 取空白字节集 (新数据大小)
    
    
     ' 数据 [3] ＝ 位与 (工具盘窗口.背景颜色选择器.颜色, 255)
     ' 数据 [2] ＝ 位与 (工具盘窗口.背景颜色选择器.颜色, 65280) ＼ 256
     ' 数据 [1] ＝ 位与 (工具盘窗口.背景颜色选择器.颜色, 16711680) ＼ 65536
    
    
    赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取重复字节集 (新数据大小, 到字节集 ({ 255, 255, 255 })))) ' 在这里设置了背景色
    新图像 ＝ 取字节集左边 (源图像, 54) ＋ 取重复字节集 (新数据大小 ÷ 3, 到字节集 (工具盘窗口.背景颜色选择器.颜色)) ' 在这里设置了背景色
    新图像 ＝ 取字节集左边 (源图像, 54) ＋ 取重复字节集 (新数据大小 ÷ 3, 到字节集 (数据) ＋ 到字节集 (数据) ＋ 到字节集 (数据)) ' 在这里设置了背景色
    
    .变量循环首 (0, 相减 (新高度, 1), 1, 新当前行)
        赋值 (新行首点, 相加 (相乘 (新当前行, 新实际数宽), 55))
        .变量循环首 (0, 相减 (新宽度, 1), 1, 新当前列)
            赋值 (平方根, 求平方根 (相加 (相乘 (相减 (新当前行, 相除 (新高度, 2)), 相减 (新当前行, 相除 (新高度, 2))), 相乘 (相减 (新当前列, 相除 (新宽度, 2)), 相减 (新当前列, 相除 (新宽度, 2))))))
            赋值 (新角度, 负 (相加 (角度, 求反正切 (相除 (负 (相减 (新当前行, 相除 (新高度, 2))), 相减 (新当前列, 相除 (新宽度, 2)))))))
            赋值 (新角度, 选择 (小于 (新当前列, 相除 (新宽度, 2)), 相减 (新角度, #pi), 新角度))
            赋值 (新角度, 求余数 (新角度, 相乘 (2, #pi)))
            赋值 (x, 取整 (相加 (相乘 (平方根, 求余弦 (新角度)), 相除 (宽度, 2), 0.5)))
            赋值 (y, 取整 (相加 (相乘 (平方根, 求正弦 (新角度)), 相除 (高度, 2), 0.5)))
            
            .如果真 (并且 (大于或等于 (x, 0), 大于或等于 (y, 0), 小于 (x, 宽度), 小于 (y, 高度)))
                赋值 (行首点, 相加 (55, 相乘 (y, 实际数宽)))
                赋值 (当前列, 相乘 (x, 3))
                .如果真 (并且 (等于 (新当前行, 相除 (新高度, 2)), 等于 (新当前列, 相除 (新宽度, 2))))
                    赋值 (行首点, 相加 (55, 相乘 (实际数宽, 取整 (相除 (高度, 2)))))
                    赋值 (当前列, 相乘 (取整 (相除 (宽度, 2)), 3))
                .如果真结束
                赋值 (新图像 [相加 (新行首点, 相乘 (新当前列, 3))], 源图像 [相加 (行首点, 当前列)])
                赋值 (新图像 [相加 (新行首点, 相乘 (新当前列, 3), 1)], 源图像 [相加 (行首点, 当前列, 1)])
                赋值 (新图像 [相加 (新行首点, 相乘 (新当前列, 3), 2)], 源图像 [相加 (行首点, 当前列, 2)])
            .如果真结束
            
        .变量循环尾 ()
    .变量循环尾 ()
    赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (新文件大小)))
    赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
    赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
    赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (新数据大小)))
.判断结束
返回 (新图像)


.子程序 整体调整饱合度明度对比度, 空白型, , 
.参数 画板名, 画板, 参考, 传递一个画板名，对此画板进行操作
.参数 度数1, 整数型, 可空, 饱合度+-100
.参数 度数2, 整数型, 可空, 明度+-100
.参数 度数3, 整数型, 可空, 对比度+-100

.局部变量 aaa, 整数型, , "3", 
.局部变量 bbb, 整数型, , "3", 
.局部变量 中间值, 整数型, , , 
.局部变量 ccc, 整数型, , , 
.局部变量 减数, 整数型, , , 
.局部变量 中间值1, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 纠正位, 整数型, , , 
.局部变量 现字集, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 z, 整数型, , , 
.局部变量 调整, 整数型, , , 
.局部变量 r红, 整数型, , , 
.局部变量 g绿, 整数型, , , 
.局部变量 b兰, 整数型, , , 

赋值 (现字集, 画板名.取图片 ())
 ' 信息框 (画板名.宽度, 0, )
 ' 信息框 (画板名.高度, 0, )

窗口1.标题 ＝ 到文本 (度数1) ＋ “  ” ＋ 到文本 (度数2) ＋ “  ” ＋ 到文本 (度数3)

.如果真 (不等于 (度数1, 0))
    赋值 (x, 56) ' 绿颜色处于文件图像的第56位之后,这样从56位开始进行操作,每间隔3位都是处理绿色
    赋值 (y, 55) ' 兰颜色处于文件图像的第55位之后,这样从55位开始进行操作,每间隔3位都是处理兰色
    赋值 (z, 57) ' 红颜色处于文件图像的第57位之后,这样从57位开始进行操作,每间隔3位都是处理红色
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 度数1) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (g绿, 现字集 [x])
            赋值 (b兰, 现字集 [y])
            .如果 (并且 (大于 (r红, g绿), 大于 (r红, b兰)))
                赋值 (aaa [1], r红)
                赋值 (bbb [1], 1)
                .如果 (大于 (g绿, b兰))
                    赋值 (aaa [2], g绿)
                    赋值 (bbb [2], 2)
                    赋值 (aaa [3], b兰)
                    赋值 (bbb [3], 3)
                .否则
                    赋值 (aaa [2], b兰)
                    赋值 (bbb [3], 2)
                    赋值 (aaa [3], g绿)
                    赋值 (bbb [2], 3)
                .如果结束
                
            .否则
                .如果 (并且 (小于 (r红, g绿), 小于 (r红, b兰)))
                    赋值 (aaa [3], r红)
                    赋值 (bbb [1], 3)
                    .如果 (大于 (g绿, b兰))
                        赋值 (aaa [1], g绿)
                        赋值 (bbb [2], 1)
                        赋值 (aaa [2], b兰)
                        赋值 (bbb [3], 2)
                    .否则
                        赋值 (aaa [1], b兰)
                        赋值 (bbb [3], 1)
                        赋值 (aaa [2], g绿)
                        赋值 (bbb [2], 2)
                    .如果结束
                    
                .否则
                    赋值 (aaa [2], r红)
                    赋值 (bbb [1], 2)
                    .如果 (大于 (g绿, b兰))
                        赋值 (aaa [1], g绿)
                        赋值 (bbb [2], 1)
                        赋值 (aaa [3], b兰)
                        赋值 (bbb [3], 3)
                    .否则
                        赋值 (aaa [3], g绿)
                        赋值 (bbb [2], 3)
                        赋值 (aaa [1], b兰)
                        赋值 (bbb [3], 1)
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
            赋值 (中间值, 相除 (相加 (aaa [1], aaa [3]), 2))
            .如果真 (小于 (调整, 0))
                赋值 (r红, 相加 (r红, 相除 (相乘 (相减 (r红, 中间值), 调整), 100)))
                赋值 (g绿, 相加 (g绿, 相除 (相乘 (相减 (g绿, 中间值), 调整), 100)))
                赋值 (b兰, 相加 (b兰, 相除 (相乘 (相减 (b兰, 中间值), 调整), 100)))
                
            .如果真结束
            .如果真 (大于 (调整, 0))
                .如果 (大于或等于 (相减 (255, aaa [1]), aaa [3]))
                    赋值 (ccc, 相除 (相乘 (aaa [3], 调整), 100))
                    赋值 (aaa [1], 相加 (aaa [1], ccc))
                    赋值 (aaa [3], ccc)
                .否则
                    赋值 (ccc, 相除 (相乘 (相减 (255, aaa [1]), 调整), 100))
                    赋值 (aaa [1], 相加 (aaa [1], ccc))
                    赋值 (aaa [3], 相减 (aaa [3], ccc))
                .如果结束
                赋值 (r红, aaa [bbb] [1])
                赋值 (g绿, aaa [bbb] [2])
                赋值 (b兰, aaa [bbb] [3])
            .如果真结束
            
            
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], b兰)
            赋值 (现字集 [z], r红)
            赋值 (x, 相加 (x, 3))
            赋值 (y, 相加 (y, 3))
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (x, 相加 (x, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (y, 相加 (y, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
.如果真结束


.如果真 (不等于 (度数2, 0))
    赋值 (x, 56) ' 绿颜色处于文件图像的第56位之后,这样从56位开始进行操作,每间隔3位都是处理绿色
    赋值 (y, 55) ' 兰颜色处于文件图像的第55位之后,这样从55位开始进行操作,每间隔3位都是处理兰色
    赋值 (z, 57) ' 红颜色处于文件图像的第57位之后,这样从57位开始进行操作,每间隔3位都是处理红色
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 度数2) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (g绿, 现字集 [x])
            赋值 (b兰, 现字集 [y])
            
            赋值 (r红, 相加 (r红, 调整))
            赋值 (g绿, 相加 (g绿, 调整))
            赋值 (b兰, 相加 (b兰, 调整))
            
            .如果真 (大于或等于 (r红, 255))
                赋值 (r红, 255)
            .如果真结束
            .如果真 (小于或等于 (r红, 0))
                赋值 (r红, 0)
            .如果真结束
            
            .如果真 (大于或等于 (g绿, 255))
                赋值 (g绿, 255)
            .如果真结束
            .如果真 (小于或等于 (g绿, 0))
                赋值 (g绿, 0)
            .如果真结束
            
            .如果真 (大于或等于 (b兰, 255))
                赋值 (b兰, 255)
            .如果真结束
            .如果真 (小于或等于 (b兰, 0))
                赋值 (b兰, 0)
            .如果真结束
            
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], b兰)
            赋值 (现字集 [z], r红)
            赋值 (x, 相加 (x, 3))
            赋值 (y, 相加 (y, 3))
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (x, 相加 (x, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (y, 相加 (y, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
.如果真结束


.如果真 (不等于 (度数3, 0))
    赋值 (x, 56) ' 绿颜色处于文件图像的第56位之后,这样从56位开始进行操作,每间隔3位都是处理绿色
    赋值 (y, 55) ' 兰颜色处于文件图像的第55位之后,这样从55位开始进行操作,每间隔3位都是处理兰色
    赋值 (z, 57) ' 红颜色处于文件图像的第57位之后,这样从57位开始进行操作,每间隔3位都是处理红色
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 度数3) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (g绿, 现字集 [x])
            赋值 (b兰, 现字集 [y])
            
            赋值 (中间值, 整除 (相加 (r红, g绿, b兰), 3))
            赋值 (I, 相加 (I, 1))
            .如果真 (小于或等于 (I, 40))
                编辑框1.加入文本 (到文本 (r红) ＋ “   ” ＋ 到文本 (g绿) ＋ “   ” ＋ 到文本 (b兰) ＋ “   ” ＋ 到文本 (中间值) ＋ #换行符)
            .如果真结束
            
            .判断开始 (并且 (大于 (中间值, 0), 小于或等于 (中间值, 30)))
                赋值 (减数, 相乘 (1, 调整))
            .判断 (并且 (大于 (中间值, 30), 小于或等于 (中间值, 50)))
                赋值 (减数, 相乘 (1.1, 调整))
            .判断 (并且 (大于 (中间值, 50), 小于或等于 (中间值, 70)))
                赋值 (减数, 相乘 (1.3, 调整))
            .判断 (并且 (大于 (中间值, 70), 小于或等于 (中间值, 90)))
                赋值 (减数, 相乘 (1.6, 调整))
            .判断 (并且 (大于 (中间值, 90), 小于或等于 (中间值, 110)))
                赋值 (减数, 相乘 (2, 调整))
            .判断 (并且 (大于 (中间值, 110), 小于或等于 (中间值, 130)))
                赋值 (减数, 相乘 (2.6, 调整))
            .判断 (并且 (大于 (中间值, 130), 小于或等于 (中间值, 150)))
                赋值 (减数, 相乘 (3.2, 调整))
            .判断 (并且 (大于 (中间值, 150), 小于或等于 (中间值, 170)))
                赋值 (减数, 相乘 (3.9, 调整))
            .判断 (并且 (大于 (中间值, 170), 小于或等于 (中间值, 190)))
                赋值 (减数, 相乘 (4.8, 调整))
            .判断 (并且 (大于 (中间值, 190), 小于或等于 (中间值, 210)))
                赋值 (减数, 相乘 (5.9, 调整))
            .判断 (并且 (大于 (中间值, 210), 小于或等于 (中间值, 230)))
                赋值 (减数, 相乘 (6, 调整))
            .判断 (并且 (大于 (中间值, 230), 小于或等于 (中间值, 250)))
                赋值 (减数, 相乘 (7, 调整))
            .判断 (并且 (大于 (中间值, 250), 小于或等于 (中间值, 270)))
                赋值 (减数, 相乘 (8.1, 调整))
            .默认
                
            .判断结束
            
            
            赋值 (r红, 相加 (r红, 减数))
            赋值 (g绿, 相加 (g绿, 减数))
            赋值 (b兰, 相加 (b兰, 减数))
            
            .如果真 (大于或等于 (r红, 254))
                赋值 (r红, 254)
            .如果真结束
            .如果真 (小于或等于 (r红, 0))
                赋值 (r红, 1)
            .如果真结束
            
            .如果真 (大于或等于 (g绿, 256))
                赋值 (g绿, 254)
            .如果真结束
            .如果真 (小于或等于 (g绿, 0))
                赋值 (g绿, 1)
            .如果真结束
            
            .如果真 (大于或等于 (b兰, 256))
                赋值 (b兰, 254)
            .如果真结束
            .如果真 (小于或等于 (b兰, 0))
                赋值 (b兰, 1)
            .如果真结束
            
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], b兰)
            赋值 (现字集 [z], r红)
            赋值 (x, 相加 (x, 3))
            赋值 (y, 相加 (y, 3))
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (x, 相加 (x, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (y, 相加 (y, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
.如果真结束


赋值 (画板名.底图, 现字集)


.子程序 整体调整色彩平横, 空白型, , 新加改1
.参数 画板名, 画板, , 
.参数 数1, 整数型, 可空, R+-100
.参数 数2, 整数型, 可空, G+-100
.参数 数3, 整数型, 可空, B+-100

.局部变量 纠正位, 整数型, , , 
.局部变量 现字集, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 z, 整数型, , , 
.局部变量 调整, 整数型, , , 
.局部变量 r红, 整数型, , , 
.局部变量 g绿, 整数型, , , 
.局部变量 b兰, 整数型, , , 

赋值 (现字集, 画板名.取图片 ())

信息框 (到文本 (取字节集长度 (现字集)) ＋ “ ” ＋ 到文本 (数1) ＋ “  ” ＋ 到文本 (数2) ＋ “  ” ＋ 到文本 (数3), 0, )

.如果真 (不等于 (数1, 0))
    赋值 (z, 57)
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 数1) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (r红, 相加 (r红, 调整))
            .如果真 (大于或等于 (r红, 255))
                赋值 (r红, 255)
            .如果真结束
            .如果真 (小于或等于 (r红, 0))
                赋值 (r红, 0)
            .如果真结束
            赋值 (现字集 [z], r红)
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
.如果真结束

.如果真 (不等于 (数2, 0))
    赋值 (z, 56)
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 数2) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (r红, 相加 (r红, 调整))
            .如果真 (大于或等于 (r红, 255))
                赋值 (r红, 255)
            .如果真结束
            .如果真 (小于或等于 (r红, 0))
                赋值 (r红, 0)
            .如果真结束
            赋值 (现字集 [z], r红)
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
.如果真结束

.如果真 (不等于 (数3, 0))
    赋值 (z, 55)
    赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
    赋值 (调整, 数3) ' － 100
    .计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
        .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
            赋值 (r红, 现字集 [z])
            赋值 (r红, 相加 (r红, 调整))
            .如果真 (大于或等于 (r红, 255))
                赋值 (r红, 255)
            .如果真结束
            .如果真 (小于或等于 (r红, 0))
                赋值 (r红, 0)
            .如果真结束
            赋值 (现字集 [z], r红)
            赋值 (z, 相加 (z, 3))
        .计次循环尾 ()
        赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    .计次循环尾 ()
    
.如果真结束

赋值 (画板名.底图, 现字集)


.子程序 整体调整色阶, 空白型, , 
.参数 画板名, 画板, 参考, 
.参数 数值1, 整数型, 可空, 左滑块
.参数 数值2, 整数型, 可空, 中滑块
.参数 数值3, 整数型, 可空, 右滑块
.参数 数值4, 整数型, 可空, 
.参数 数值5, 整数型, 可空, 

.局部变量 现字集, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 z, 整数型, , , 
.局部变量 r红, 整数型, , , 
.局部变量 g绿, 整数型, , , 
.局部变量 b兰, 整数型, , , 
.局部变量 纠正位, 整数型, , , 
.局部变量 匿名局部变量_1492, 空白型, , , 

赋值 (现字集, 画板名)
窗口1.标题 ＝ 到文本 (度数1) ＋ “  ” ＋ 到文本 (度数2) ＋ “  ” ＋ 到文本 (度数3)

赋值 (x, 56) ' 绿颜色处于文件图像的第56位之后,这样从56位开始进行操作,每间隔3位都是处理绿色
赋值 (y, 55) ' 兰颜色处于文件图像的第55位之后,这样从55位开始进行操作,每间隔3位都是处理兰色
赋值 (z, 57) ' 红颜色处于文件图像的第57位之后,这样从57位开始进行操作,每间隔3位都是处理红色
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
.计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
    .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
        赋值 (r红, 现字集 [z])
        赋值 (g绿, 现字集 [x])
        赋值 (b兰, 现字集 [y])
        .如果真 (不等于 (数值1, 0))
            .如果 (大于或等于 (数值1, r红))
                赋值 (r红, 0)
            .否则
                赋值 (r红, 取整 (四舍五入 (取绝对值 (相减 (相除 (数值1, 相除 (相减 (255, 数值1), 相减 (255, r红))), r红)), ))) ' 公式：值1/（（255-值1）/（255-RGB））-RGB 并取正，四舍五入，取整
                输出调试文本 (到文本 (r红))
            .如果结束
            .如果 (大于或等于 (数值1, g绿))
                赋值 (g绿, 0)
            .否则
                赋值 (g绿, 取整 (四舍五入 (取绝对值 (相减 (相除 (数值1, 相除 (相减 (255, 数值1), 相减 (255, g绿))), g绿)), ))) ' 公式：值1/（（255-值1）/（255-RGB））-RGB 并取正，四舍五入，取整
                输出调试文本 (到文本 (g绿))
            .如果结束
            .如果 (大于或等于 (数值1, b兰))
                赋值 (b兰, 0)
            .否则
                赋值 (b兰, 取整 (四舍五入 (取绝对值 (相减 (相除 (数值1, 相除 (相减 (255, 数值1), 相减 (255, b兰))), b兰)), ))) ' 公式：值1/（（255-值1）/（255-RGB））-RGB 并取正，四舍五入，取整
                输出调试文本 (到文本 (b兰))
            .如果结束
            输出调试文本 (到文本 (r红) ＋ “   ” ＋ 到文本 (g绿) ＋ “   ” ＋ 到文本 (b兰) ＋ “   ”)
            
        .如果真结束
        
        .如果真 (不等于 (数值2, 1))
        .如果真结束
        
        .如果真 (不等于 (数值3, 255))
            .如果 (小于或等于 (数值3, r红))
                赋值 (r红, 255)
            .否则
                赋值 (r红, 取整 (四舍五入 (相加 (相除 (相减 (255, 数值3), 相除 (数值3, r红)), r红), ))) ' 公式：(255-数值3) ÷ (数值3 ÷ r红) ＋ r红 = r红2
            .如果结束
            .如果 (小于或等于 (数值3, g绿))
                赋值 (g绿, 255)
            .否则
                赋值 (g绿, 取整 (四舍五入 (相加 (相除 (相减 (255, 数值3), 相除 (数值3, g绿)), g绿), )))
            .如果结束
            .如果 (小于或等于 (数值3, b兰))
                赋值 (b兰, 255)
            .否则
                赋值 (b兰, 取整 (四舍五入 (相加 (相除 (相减 (255, 数值3), 相除 (数值3, b兰)), b兰), )))
            .如果结束
            
        .如果真结束
        
        .如果真 (不等于 (数值4, 0))
            赋值 (r红, 相加 (r红, 取整 (四舍五入 (相除 (相乘 (相减 (255, r红), 数值4), 255), ))))
            赋值 (g绿, 相加 (g绿, 取整 (四舍五入 (相除 (相乘 (相减 (255, g绿), 数值4), 255), ))))
            赋值 (b兰, 相加 (b兰, 取整 (四舍五入 (相除 (相乘 (相减 (255, b兰), 数值4), 255), ))))
        .如果真结束
        
        .如果真 (不等于 (数值5, 255))
            赋值 (r红, 取整 (四舍五入 (相除 (相乘 (r红, 数值5), 255), )))
            赋值 (g绿, 取整 (四舍五入 (相除 (相乘 (g绿, 数值5), 255), )))
            赋值 (b兰, 取整 (四舍五入 (相除 (相乘 (b兰, 数值5), 255), )))
        .如果真结束
        
        .如果真 (大于或等于 (r红, 255))
            赋值 (r红, 255)
        .如果真结束
        .如果真 (小于或等于 (r红, 0))
            赋值 (r红, 0)
        .如果真结束
        
        .如果真 (大于或等于 (g绿, 255))
            赋值 (g绿, 255)
        .如果真结束
        .如果真 (小于或等于 (g绿, 0))
            赋值 (g绿, 5)
        .如果真结束
        
        .如果真 (大于或等于 (b兰, 255))
            赋值 (b兰, 255)
        .如果真结束
        .如果真 (小于或等于 (b兰, 0))
            赋值 (b兰, 0)
        .如果真结束
        
        赋值 (现字集 [x], g绿)
        赋值 (现字集 [y], b兰)
        赋值 (现字集 [z], r红)
        赋值 (x, 相加 (x, 3))
        赋值 (y, 相加 (y, 3))
        赋值 (z, 相加 (z, 3))
        
    .计次循环尾 ()
    赋值 (x, 相加 (x, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    赋值 (y, 相加 (y, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
.计次循环尾 ()

赋值 (画板名.底图, 现字集)


.子程序 整体单色调整, 空白型, , 
.参数 画板名, 画板, 参考, 
.参数 数值, 整数型, , 

.局部变量 减数, 整数型, , , 
.局部变量 中间值, 整数型, , , 
.局部变量 纠正位, 整数型, , , 因为图象数据中的每一个扫描行字节数必须为4的倍数，所以对图象宽度进行修正
.局部变量 现字集, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 z, 整数型, , , 
.局部变量 r红, 整数型, , , 
.局部变量 g绿, 整数型, , , 
.局部变量 b兰, 整数型, , , 

赋值 (现字集, 画板名)

赋值 (x, 56) ' 绿颜色处于文件图像的第56位之后,这样从56位开始进行操作,每间隔3位都是处理绿色
赋值 (y, 55) ' 兰颜色处于文件图像的第55位之后,这样从55位开始进行操作,每间隔3位都是处理兰色
赋值 (z, 57) ' 红颜色处于文件图像的第57位之后,这样从57位开始进行操作,每间隔3位都是处理红色
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (画板名.宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (画板名.宽度, 3), 4)))) ' 利用图像宽度计算纠正位为几个字节
.计次循环首 (画板名.高度, ) ' 字节集的55位后是各扫描行的数据,用图片的高可以得到扫描行的总数
    .计次循环首 (画板名.宽度, ) ' 每一个扫描行是由各像素点（三个字节）数据组成，可以用图片的宽度得像素的数目
        赋值 (r红, 现字集 [z]) ' 在原图中,从第57位开始,每三位读一次,读出的是红色的数据
        赋值 (g绿, 现字集 [x]) ' 在原图中,从第56位开始,每三位读一次,读出的是绿色的数据
        赋值 (b兰, 现字集 [y]) ' 在原图中,从第55位开始,每三位读一次,读出的是兰色的数据
        
        连续赋值 (r红, 现字集 [z], 现字集 [x], 现字集 [y]) ' 取其中一种颜色的值进行赋值
        .判断开始 (等于 (数值, 1))
            赋值 (现字集 [z], r红)
            赋值 (现字集 [x], 255)
            赋值 (现字集 [y], 255)
        .判断 (等于 (数值, 2))
            赋值 (现字集 [z], 255)
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], 255)
        .判断 (等于 (数值, 3))
            赋值 (现字集 [z], 255)
            赋值 (现字集 [x], 255)
            赋值 (现字集 [y], b兰)
        .判断 (等于 (数值, 4))
            赋值 (现字集 [z], r红)
            赋值 (现字集 [x], 0)
            赋值 (现字集 [y], 0)
        .判断 (等于 (数值, 5))
            赋值 (现字集 [z], 0)
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], 0)
        .判断 (等于 (数值, 6))
            赋值 (现字集 [z], 0)
            赋值 (现字集 [x], 0)
            赋值 (现字集 [y], b兰)
        .判断 (等于 (数值, 7))
            赋值 (现字集 [z], 相除 (相加 (r红, g绿, b兰), 3))
            赋值 (现字集 [x], 相除 (相加 (r红, g绿, b兰), 3))
            赋值 (现字集 [y], 相除 (相加 (r红, g绿, b兰), 3))
        .判断 (等于 (数值, 8))
            赋值 (现字集 [z], r红)
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], 255)
        .判断 (等于 (数值, 9))
            赋值 (现字集 [z], 255)
            赋值 (现字集 [x], g绿)
            赋值 (现字集 [y], b兰)
        .判断 (等于 (数值, 10))
            赋值 (现字集 [z], r红)
            赋值 (现字集 [x], 255)
            赋值 (现字集 [y], b兰)
        .默认
            
        .判断结束
        
        赋值 (x, 相加 (x, 3)) ' 前面已经说了,每间隔三位是一种颜色,现在就是其中一种颜色的位置进3位
        赋值 (y, 相加 (y, 3)) ' 前面已经说了,每间隔三位是一种颜色,现在就是其中一种颜色的位置进3位
        赋值 (z, 相加 (z, 3)) ' 前面已经说了,每间隔三位是一种颜色,现在就是其中一种颜色的位置进3位
        
    .计次循环尾 ()
    赋值 (x, 相加 (x, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    赋值 (y, 相加 (y, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
    赋值 (z, 相加 (z, 纠正位)) ' 因为每一扫描行的字节数必须是4的整数倍，所以加入纠正位
.计次循环尾 ()

赋值 (画板名.底图, 现字集)

.窗口程序集 窗口程序集2, , , 

.子程序 _按钮_字体_被单击, 空白型, , 
赋值 (.类型, 2)
打开 ()

赋值 (设置字体.字体名称, .字体名称)
赋值 (设置字体.字体大小, .字体大小)

赋值 (.字体.字体名称, 设置字体.字体名称)
赋值 (.字体.字体大小, 设置字体.字体大小)

.子程序 _按钮_插入_被单击, 空白型, , 
赋值 (输入文字, .内容)
销毁 ()

.子程序 _窗口_文字输入_创建完毕, 空白型, , 
赋值 (.字体.字体名称, 设置字体.字体名称)
赋值 (.字体.字体大小, 设置字体.字体大小)
赋值 (.文本颜色, _启动窗口..颜色)
获取焦点 ()


.程序集 程序集_功能程序集, , , 

.子程序 子程序_删除未完成曲线, 空白型, , 
.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_计次, 整数型, , , 

赋值 (局部_数量, 取数组成员数 (所有绘画数据))
.计次循环首 (相减 (局部_数量, 1), 局部_计次)
    .如果真 (等于 (所有绘画数据 [相减 (局部_数量, 局部_计次)].曲线_进度, 0))
        跳出循环 ()
    .如果真结束
    .如果真 (大于 (所有绘画数据 [相减 (局部_数量, 局部_计次)].曲线_进度, 0))
        删除成员 (所有绘画数据, 相减 (局部_数量, 局部_计次), 1)
    .如果真结束
    
.计次循环尾 ()


 ' 不属于任何一个程序集、类模块的函数：
