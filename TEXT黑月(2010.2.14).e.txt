 ' 文件类型：Windows模块源码

 ' 程序名称：TEXTH
 ' 程序描述：黑月
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.图片 图片1, " ' 已保存到：D:\易语言学习\Data\TEXT黑月(2010.2.14).e\图片1", , 
.常量 LB_ADDFILE, "406", , 增加文件
.常量 LB_ADDSTRING, "384", , 加入字符串
.常量 LB_DELETESTRING, "386", , 删除文本
.常量 LB_FINDSTRING, "399", , 查找字符串
.常量 LB_FINDSTRINGEXACT, "418", , 完全匹配查找
.常量 LB_GETCOUNT, "395", , 取总项数
.常量 LB_GETCURSEL, "392", , 取当前选择项
.常量 LB_GETITEMDATA, "409", , 取表项数值
.常量 LB_GETSEL, "391", , 取选择项
.常量 LB_GETSELCOUNT, "400", , 取选择总数
.常量 LB_GETTEXT, "393", , 取文本
.常量 LB_GETTEXTLEN, "394", , 取文本长度
.常量 LB_GETTOPINDEX, "398", , 取顶索引
.常量 LB_INSERTSTRING, "385", , 插入文本
.常量 LB_RESETCONTENT, "388", , 重置列表框
.常量 LB_SELECTSTRING, "396", , 选择文本
.常量 LB_SETCOUNT, "423", , 设置总项数
.常量 LB_SETCURSEL, "390", , 设置当前选择项
.常量 LB_SETSEL, "389", , 设置选择
.常量 LB_SETTOPINDEX, "407", , 设置顶索引
.常量 , , , 
.常量 CB_ADDSTRING, "323", , 加入字符串
.常量 CB_DELETESTRING, "324", , 删除字符串
.常量 CB_FINDSTRING, "332", , 查找字符串
.常量 CB_GETCOUNT, "326", , 取总项数
.常量 CB_GETCURSEL, "327", , 取选择项
.常量 CB_GETEDITSEL, "320", , 取EDIT选择
.常量 CB_GETITEMDATA, "336", , 取项目数据
.常量 CB_GETLBTEXT, "328", , 取列表文本
.常量 CB_GETLBTEXTLEN, "329", , 取列表文本长度
.常量 CB_GETTOPINDEX, "347", , 取顶索引
.常量 CB_INSERTSTRING, "330", , 插入文本
.常量 CB_SELECTSTRING, "333", , 选择文本
.常量 CB_RESETCONTENT, "331", , 重置组合框
.常量 CB_SETCURSEL, "334", , 设置选择项
.常量 CB_SETITEMDATA, "337", , 置项目数据
.常量 CB_SETTOPINDEX, "348", , 设置顶索引
.常量 , , , 
.常量 , , , 
.常量 自定义消息_托盘事件初始消息值, "24500", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 POINTAPI, , POINTAPI,GetCursorPos
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 RECT, , 矩形
    .成员 Left, 整数型, , , 
    .成员 Top, 整数型, , , 
    .成员 Right, 整数型, , , 
    .成员 Bottom, 整数型, , , 

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 C_窗口, , 
    .成员 窗口句柄, 空白型, , , 
    .成员 标识, 空白型, , , 
    .成员 空闲时间, 空白型, , , 
    .成员 事件, 事件_窗口, , , 
    .成员 其他事件处理, 子程序指针, , , 
    .成员 属性, 属性_窗口, , , 

数据类型 事件_窗口, 公开, 
    .成员 创建完成, 子程序指针, , , 参数一:窗口句柄
    .成员 被销毁, 子程序指针, , , 
    .成员 尺寸被改变, 子程序指针, , , 
    .成员 获得焦点, 子程序指针, , , 
    .成员 失去焦点, 子程序指针, , , 
    .成员 最大化, 子程序指针, , , 
    .成员 最小化, 子程序指针, , , 
    .成员 位置被改变, 子程序指针, , , 
    .成员 被还原, 子程序指针, , , 
    .成员 任务栏重新加载, 子程序指针, , , 
    .成员 将被关闭, 子程序指针, , , 返回值,逻辑型
    .成员 按下某键, 子程序指针, , , 
    .成员 释放某键, 子程序指针, , , 
    .成员 移动鼠标, 子程序指针, , , 
    .成员 按下鼠标左键, 子程序指针, , , 
    .成员 释放鼠标左键, 子程序指针, , , 
    .成员 双击鼠标左键, 子程序指针, , , 
    .成员 按下鼠标右键, 子程序指针, , , 
    .成员 释放鼠标右键, 子程序指针, , , 
    .成员 双击鼠标右键, 子程序指针, , , 
    .成员 按下鼠标中键, 子程序指针, , , 
    .成员 释放鼠标中键, 子程序指针, , , 
    .成员 双击鼠标中键, 子程序指针, , , 
    .成员 滚动滚轮, 子程序指针, , , 

数据类型 托盘数据, , 
    .成员 托盘结构, NotifyIconData, , , 
    .成员 左键事件子程序, 子程序指针, , , 
    .成员 右键事件子程序, 子程序指针, , , 

数据类型 NotifyIconData, , 
    .成员 cbSize, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uFlags, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 szTip, 字节型, , "128", 
    .成员 dwState, 整数型, , , 
    .成员 dwStateMask, 整数型, , , 
    .成员 szInfo, 字节型, , "256", 
    .成员 uTimeoutAndVersion, 整数型, , , 
    .成员 szInfoTitle, 字节型, , "64", 
    .成员 dwInfoFlags, 整数型, , , 

数据类型 属性_窗口, 公开, 
    .成员 底图, 字节集, , , 
    .成员 不在任务栏中显示, 逻辑型, , , 
    .成员 初始不可视, 逻辑型, , , 

.全局变量 基窗口句柄, 整数型, , , 
.全局变量 窗口组, C_窗口, , "0", 
.全局变量 托盘数据组, 托盘数据, , "0", 
.全局变量 Msn_TaskbarCreated, 整数型, , , 

.DLL命令 UpdateWindow, 整数型, "user32.dll", "UpdateWindow", , 
    .参数 hwnd, 整数型, , 

.DLL命令 InvalidateRect, 整数型, "user32.dll", "InvalidateRect", , 这个函数屏蔽一个窗口客户区的全部或部分区域
    .参数 窗口句柄, 整数型, , hwnd,待屏蔽窗口的句柄
    .参数 屏蔽矩形, 整数型, , lpRect,用于描述待屏蔽矩形部分的一个矩形结构
    .参数 重画前删除, 逻辑型, , bErase,TRUE（非零）导致指定的区域在重画前先删除

.DLL命令 SendMessageA_Str, 整数型, "user32.dll", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 文本型, , 

.DLL命令 SendMessageA, 整数型, "user32.dll", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 SetWindowTextA, 整数型, "user32.dll", "SetWindowTextA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 GetWindowTextA, 整数型, "user32.dll", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 文本, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 文本长度, 整数型, , lp缓冲区的长度;  

.DLL命令 GetWindowTextLengthA, 整数型, "user32.dll", "GetWindowTextLengthA", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 DialogBoxParamA, 整数型, "", "DialogBoxParamA", , 
    .参数 hInstance, 整数型, , 
    .参数 lpName, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 lpDialogFunc, 子程序指针, , 
    .参数 dwInitParam, 整数型, , 

.DLL命令 EndDialog, 整数型, "", "EndDialog", , 
    .参数 hwnd, 整数型, , 
    .参数 nResult, 整数型, , 

.DLL命令 InitCommonControls, 空白型, "comctl32.dll", "InitCommonControls", , 

.DLL命令 LoadIconA, 整数型, "user32.dll", "LoadIconA", , 从指定的模块或应用程序实例中载入一个图标。其中，LoadIconBynum是LoadIcon函数的类型安全声明　执行成功则返回已载入的图标的句柄；零表示失败。会设置GetLastError
    .参数 实例句柄, 整数型, , 
    .参数 图标标识, 整数型, , 

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", , 获取一个应用程序或动态链接库的模块句柄　如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;  

.DLL命令 LoadMenuA, 整数型, "user32.dll", "LoadMenuA", , 从指定的模块或应用程序实例中载入一个菜单
    .参数 模块句柄, 整数型, , hInstance,一个动态链接库的模块句柄
    .参数 菜单标识, 空白型, , lpString,参见相关帮助

.DLL命令 GetSubMenu, 整数型, "user32.dll", "GetSubMenu", , ,
    .参数 菜单句柄, 整数型, , 
    .参数 位置, 整数型, , 

.DLL命令 SetDlgItemTextA, 整数型, "user32.dll", "SetDlgItemTextA", , 该函数设置对话框中控制的文本和标题。
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 设置文本, 文本型, , lpString  

.DLL命令 GetDlgItem, 整数型, "user32.dll", "GetDlgItem", , 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.DLL命令 GetDlgItemTextA, 整数型, "user32.dll", "GetDlgItemTextA", , 该函数用于获取对话框中指定控件的标题或文本。  如果函数调用成功，返回值为拷贝到缓冲区中的 TCHAR 字符个数（不包括结束空字符）。如果函数调用失败，返回值为 0  
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
    .参数 缓冲区最大字符数, 整数型, , nMaxCount

.DLL命令 DestroyWindow, 整数型, "user32.dll", "DestroyWindow", , 
    .参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

.DLL命令 MoveWindow, 整数型, "user32.dll", "MoveWindow", , MoveWindow
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 新高度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 ClientToScreen, 整数型, "user32.dll", "ClientToScreen", , 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, POINTAPI, 传址, lpPoint，参见相关帮助

.DLL命令 GetClientRect, 整数型, "user32.dll", "GetClientRect", , 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, RECT, 传址, 

.DLL命令 AtlAxWinInit, 整数型, "atl.dll", "AtlAxWinInit", , 

.DLL命令 AtlAxGetControl, 整数型, "atl.dll", "AtlAxGetControl", , 
    .参数 hwnd, 空白型, , 
    .参数 对象, 对象, , 

.DLL命令 ShowScrollBar, 整数型, "user32.dll", "ShowScrollBar", , 
    .参数 窗口句柄, 整数型, , 窗口或者组建句柄
    .参数 滚动条类型, 整数型, , 0水平滚动条,1垂直滚动条
    .参数 是否显示, 逻辑型, , 

.DLL命令 PostMessageA, 整数型, "user32.dll", "PostMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄。
    .参数 信息值, 整数型, , 消息的标识符。
    .参数 参数1, 整数型, , 具体取决于消息。
    .参数 参数2, 整数型, , 具体取决于消息。

.DLL命令 SendDlgItemMessageA, 整数型, "", "SendDlgItemMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 sid, 整数型, , 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 

.DLL命令 EnableWindow, 整数型, "user32.dll", "EnableWindow", , EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 整数型, , fEnable，非零允许，零禁止

.DLL命令 lstrcpyn_字节集, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_字节型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_子程序子针, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_长整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_双精型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetDlgCtrlID, 整数型, "user32", "GetDlgCtrlID", , 
    .参数 hwnd, 整数型, , 

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 DefWindowProc, 整数型, "user32", "DefWindowProcA", , 调用缺省窗口过程　
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 向窗口发送消息　
    .参数 lpMsg, MSG, , 

.DLL命令 GetMessage, 整数型, "user32", "GetMessageA", , 从线索消息队列中返回一条消息　
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 

.DLL命令 TranslateMessage, 整数型, "user32", "TranslateMessage", , 转换虚拟关键字消息　
    .参数 lpMsg, MSG, , 

.DLL命令 IsWindow, 整数型, "user32.dll", "IsWindow", , 判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 窗口句柄, 整数型, , 待检查窗口的句柄

.DLL命令 PostQuitMessage, 空白型, "user32", "PostQuitMessage", , 通知WINDOWS线索将中断　
    .参数 nExitCode, 文本型, , 

.DLL命令 SHCreateThread, 整数型, "shlwapi.dll", "SHCreateThread", , SHCreateThread
    .参数 线程地址, 子程序指针, , pfnThreadProc
    .参数 数据, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 WaitForSingleObject, 整数型, "kernel32.dll", "WaitForSingleObject", , 监测对象
    .参数 hHandle, 整数型, , 对象句柄
    .参数 dwMilliseconds, 整数型, , 等待时间 毫秒

.DLL命令 CreateThread_子程序指针, 整数型, "kernel32.dll", "CreateThread", , 创建线程_ 句柄
    .参数 属性, 整数型, , 是线程的属性
    .参数 栈大小, 整数型, , 是线程的栈大小
    .参数 函数开始地址, 子程序指针, , 是线程函数的开始地址
    .参数 函数参数, 整数型, , 是传送给线程函数的参数
    .参数 标志, 整数型, , 是创建线程标志，比如挂起线程
    .参数 ID, 整数型, 传址, 是标识这个线程的ID

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", , 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 子程序指针, 子程序指针, , lpTimerFunc

.DLL命令 CallWindowProcA, 整数型, "user32.dll", "CallWindowProcA", , CallWindowProcA,将消息传答窗口函数
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 RegisterWindowMessageA, 整数型, "user32.dll", "RegisterWindowMessageA", , 错误返回0,获取分配给一个字串标识符的消息编号
    .参数 lpString, 文本型, , lpString，注册消息的名字

.DLL命令 SetLayeredWindowAttributes, 整数型, "user32.dll", "SetLayeredWindowAttributes", , SetLayeredWindowAttributes 设置窗口透明度
    .参数 窗口句柄, 整数型, , 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
    .参数 颜色值, 整数型, , crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
    .参数 透明度, 整数型, , 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
    .参数 透明方式, 整数型, , dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。

.DLL命令 ShowWindow, 整数型, "user32.dll", "ShowWindow", , 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 窗口句柄, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 窗口状态, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;0隐藏窗口，活动状态给令一个窗口;1与9相同;2最小化窗口，并将其激活;3最大化窗口，并将其激活;4用最近的大小和位置显示一个窗口，同时不改变活动窗口;5用当前的大小和位置显示一个窗口，同时令其进入活动状态;6最小化窗口，活动状态给令一个窗口;7最小化一个窗口，同时不改变活动窗口;8用当前的大小和位置显示一个窗口，不改变活动窗口;9用原来的大小和位置显示一个窗口，同时令其进入活动状态;

.DLL命令 SetWindowLongA, 整数型, "user32.dll", "SetWindowLongA", , SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 LocalSize_NotifyIconData, 整数型, "kernel32.dll", "LocalSize", , 取结构体大小
    .参数 参数一, NotifyIconData, 传址, 

.DLL命令 Shell_NotifyIconA, 整数型, "shell32.dll", "Shell_NotifyIconA", , 
    .参数 dwMessage, 整数型, , 
    .参数 lpData, NotifyIconData, , 

.DLL命令 lstrcpyn_字节_文本, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 lpString1, 字节型, 数组, 
    .参数 lpString2, 文本型, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 DLL命令1, 空白型, "", "", , 

.DLL命令 FillRect, 整数型, "user32.dll", "FillRect", , FillRect,用指定的刷子填充一个矩形
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 填充区域, RECT, , lpRect，对填充区域进行描述的一个矩形，采用逻辑坐标
    .参数 刷子句柄, 整数型, , hBrush，欲使用的刷子的句柄

.DLL命令 CreatePatternBrush, 整数型, "gdi32.dll", "CreatePatternBrush", , 如执行成功，则返回新刷子的一个句柄；否则返回零
    .参数 位图句柄, 整数型, , hBitmap，指向一幅位图的句柄

.程序集 启动, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置动态链接库初始化代码
返回 (0)

.程序集 黑月常用命令, , , 

.子程序 H_刷新, 逻辑型, 公开, 
.参数 控件句柄, 整数型, , 

.如果 (等于 (UpdateWindow (控件句柄), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 H_消息循环, 整数型, 公开, 
.局部变量 消息, MSG, , , 

.判断循环首 (不等于 (GetMessage (消息, 0, 0, 0), 0))
    TranslateMessage (消息)
    DispatchMessage (消息)
.判断循环尾 ()
返回 (消息.wParam)

.子程序 H_置标题, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 控件句柄, 整数型, , 
.参数 标题内容, 文本型, , 

SetWindowTextA (控件句柄, 标题内容)

.子程序 H_取图标句柄, 整数型, , 返回 图标句柄
.参数 图标资源编号, 空白型, 可空, 默认129

.局部变量 cid, 空白型, , , 
.局部变量 实例句柄, 整数型, , , 
.局部变量 NULL, 文本型, , , 

赋值 (实例句柄, GetModuleHandleA (NULL))
.如果 (是否为空 (图标资源编号))
    赋值 (cid, 129)
    ' 本源码来自易语言资源网(www.5A5X.com)
.否则
    赋值 (cid, 图标资源编号)
.如果结束
返回 (LoadIconA (实例句柄, cid))

.子程序 H_取标题, 文本型, 公开, 
.参数 控件句柄, 整数型, , 

.局部变量 缓冲区, 文本型, , , 

赋值 (缓冲区, 取空白文本 (256))
GetWindowTextA (控件句柄, 缓冲区, 256)
返回 (缓冲区)

.子程序 H_取类名, 文本型, 公开, 
.参数 控件句柄, 整数型, , 

.局部变量 返回, 文本型, , , 

赋值 (返回, 取空白文本 (255))
GetClassNameA (控件句柄, 返回, 255)
返回 (返回)

.子程序 H_取标题长度, 整数型, 公开, 
.参数 控件句柄, 整数型, , 

返回 (GetWindowTextLengthA (控件句柄))

.子程序 H_取句柄, 整数型, 公开, 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

返回 (GetDlgItem (窗口句柄, 控件ID))

.子程序 H_销毁控件, 整数型, 公开, DestroyWindow
.参数 控件句柄, 整数型, , hwnd,预清除的句柄

返回 (DestroyWindow (控件句柄))

.子程序 H_移动, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 控件句柄, 整数型, , 
.参数 左边, 整数型, 可空, 
.参数 顶边, 整数型, 可空, 
.参数 宽度, 整数型, 可空, 
.参数 高度, 整数型, 可空, 

.局部变量 Rect, RECT, , , 
.局部变量 坐标1, POINTAPI, , , 
.局部变量 坐标2, POINTAPI, , , 

GetClientRect (控件句柄, Rect)
ClientToScreen (窗口句柄, 坐标1)
ClientToScreen (控件句柄, 坐标2)
赋值 (Rect.Left, 相减 (坐标2.横向位置, 坐标1.横向位置))
赋值 (Rect.Top, 相减 (坐标2.纵向位置, 坐标1.纵向位置))
.如果真 (等于 (是否为空 (左边), 假))
    赋值 (Rect.Left, 左边)
.如果真结束
.如果真 (等于 (是否为空 (顶边), 假))
    赋值 (Rect.Top, 顶边)
.如果真结束
.如果真 (等于 (是否为空 (宽度), 假))
    赋值 (Rect.Right, 宽度)
.如果真结束
.如果真 (等于 (是否为空 (高度), 假))
    赋值 (Rect.Bottom, 高度)
.如果真结束
MoveWindow (控件句柄, Rect.Left, Rect.Top, Rect.Right, Rect.Bottom, 1)


.子程序 H_矩形, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 控件句柄, 整数型, , 
.参数 左边, 整数型, 参考 可空, 
.参数 顶边, 整数型, 参考 可空, 
.参数 宽度, 整数型, 参考 可空, 
.参数 高度, 整数型, 参考 可空, 

.局部变量 Rect, RECT, , , 
.局部变量 坐标1, POINTAPI, , , 
.局部变量 坐标2, POINTAPI, , , 

GetClientRect (控件句柄, Rect)
ClientToScreen (窗口句柄, 坐标1)
ClientToScreen (控件句柄, 坐标2)
赋值 (左边, 相减 (坐标2.横向位置, 坐标1.横向位置))
赋值 (顶边, 相减 (坐标2.纵向位置, 坐标1.纵向位置))
赋值 (宽度, Rect.Right)
赋值 (高度, Rect.Bottom)

.子程序 H_可移动, 空白型, 公开, 控件按下事件时使用
.参数 控件句柄, 整数型, , 

SendMessageA (控件句柄, 161, 2, 0)

.子程序 H_禁止, 空白型, 公开, 
.参数 控件句柄, 整数型, , 
.参数 是否禁止, 空白型, 可空, 默认假

.如果 (是否禁止)
    EnableWindow (控件句柄, 0)
.否则
    EnableWindow (控件句柄, 1)
.如果结束


.子程序 H_取低字, 整数型, 公开, LOWORD
.参数 参数, 整数型, , 

返回 (位与 (参数, 65535))


.子程序 H_取高字, 整数型, 公开, HIWORD
.参数 参数, 整数型, , 

返回 (右移 (参数, 16))


.子程序 H_取ID, 整数型, 公开, 
.参数 控件句柄, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

返回 (GetDlgCtrlID (控件句柄))


.子程序 子, 空白型, , 子程序指针
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 标识, 整数型, 可空, 
.参数 返回信息, 整数型, 参考 可空, 

.局部变量 句柄, 整数型, , , 

赋值 (返回信息, 0)
赋值 (句柄, SHCreateThread (欲执行的子程序, 参数数据, 标识, 返回信息))
WaitForSingleObject (句柄, -1)


.类模块 H_列表框, , , 

.程序集变量 列表框句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (列表框句柄, 控件句柄)
返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (列表框句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 加入文件名, 整数型, 公开, 在列表末加入一项文件名.成功返回加入文件名后所在的表项索引值,失败返回0,文件不存在返回-1
.参数 文件名, 文本型, , 包含完整路径

返回 (SendMessageA_Str (列表框句柄, #LB_ADDFILE, 0, 文件名))


.子程序 加入文本, 整数型, 公开, 在列表末加入一项文本.成功返回加入文本后所在的表项索引值,失败返回0
.参数 欲加入的文本, 文本型, , 

返回 (SendMessageA_Str (列表框句柄, #LB_ADDSTRING, 0, 欲加入的文本))


.子程序 删除项, 整数型, 公开, 成功返回删除后的总表项数,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (列表框句柄, #LB_DELETESTRING, 索引, 0))


.子程序 寻找表项, 整数型, 公开, 查找首部包含某文本的表项.成功返回该项索引,失败返回-1
.参数 索引, 整数型, , 从索引值的位置开始向下查找.仅当第四个参数为"真"时第二个参数才起作用.
.参数 欲寻找的文本, 文本型, , 
.参数 是否完全匹配查找, 逻辑型, , 

.如果真 (是否完全匹配查找)
    返回 (SendMessageA_Str (列表框句柄, #LB_FINDSTRINGEXACT, 索引, 欲寻找的文本))
.如果真结束
返回 (SendMessageA_Str (列表框句柄, #LB_FINDSTRING, 0, 欲寻找的文本))


.子程序 取表项数, 整数型, 公开, 成功返回表项数目,失败返回0
返回 (SendMessageA (列表框句柄, #LB_GETCOUNT, 0, 0))


.子程序 取选择项, 整数型, 公开, 成功返回被选择表项的索引值,失败返回0或-1
返回 (SendMessageA (列表框句柄, #LB_GETCURSEL, 0, 0))


.子程序 置选择项, 整数型, 公开, 
.参数 项目索引, 空白型, , 

返回 (SendMessageA (列表框句柄, 390, 项目索引, 0))

.子程序 取表项数值, 整数型, 公开, 成功返回表项数值,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (列表框句柄, #LB_GETITEMDATA, 索引, 0))


.子程序 置项目数值, 整数型, 公开, 
.参数 项目索引, 整数型, , 
.参数 项目数值, 整数型, , 

返回 (SendMessageA (列表框句柄, 410, 项目索引, 项目数值))

.子程序 取选择总数, 整数型, 公开, 成功返回被选择的总项目数,失败返回0
返回 (SendMessageA (列表框句柄, #LB_GETSELCOUNT, 0, 0))


.子程序 取表项文本, 整数型, 公开, 成功返回文本长度,失败返回-1
.参数 索引, 整数型, , 
.参数 用于储存文本的变量, 文本型, 参考, 

赋值 (用于储存文本的变量, “ ”)
返回 (SendMessageA_Str (列表框句柄, #LB_GETTEXT, 索引, 用于储存文本的变量))


.子程序 取表项文本长度, 整数型, 公开, 成功返回文本长度,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (列表框句柄, #LB_GETTEXTLEN, 索引, 0))


.子程序 插入表项, 整数型, 公开, 成功返回索引值,失败返回0或-1
.参数 索引, 整数型, , 欲插入到的位置
.参数 欲插入的文本, 文本型, , 

返回 (SendMessageA_Str (列表框句柄, #LB_INSERTSTRING, 索引, 欲插入的文本))


.子程序 清除, 整数型, 公开, 成功返回1,失败返回0
返回 (SendMessageA (列表框句柄, #LB_RESETCONTENT, 0, 0))


.类模块 H_组合框, , , 

.程序集变量 组合框句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (组合框句柄, 控件句柄)
返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (组合框句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 加入文本, 整数型, 公开, 成功返回加入后文本后所在组合框的索引值,失败返回0
.参数 欲加入的文本, 文本型, , 

返回 (SendMessageA_Str (组合框句柄, #CB_ADDSTRING, 0, 欲加入的文本))


.子程序 删除某项, 整数型, 公开, 成功返回删除某项后组合框的总项数,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (组合框句柄, #CB_DELETESTRING, 索引, 0))


.子程序 查找文本, 整数型, 公开, 成功返回文本所在项的索引值,失败返回-1
.参数 欲查找的文本, 文本型, , 

返回 (SendMessageA_Str (组合框句柄, #CB_FINDSTRING, 0, 欲查找的文本))


.子程序 取总项数, 整数型, 公开, 成功返回组合框的总项数,失败返回0
返回 (SendMessageA (组合框句柄, #CB_GETCOUNT, 0, 0))


.子程序 取当前选择项, 整数型, 公开, 成功返回当前被选择项的索引值,失败返回-1
返回 (SendMessageA (组合框句柄, #CB_GETCURSEL, 0, 0))


.子程序 取项目数值, 整数型, 公开, 成功返回项目数据,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (组合框句柄, #CB_GETITEMDATA, 索引, 0))


.子程序 置项目数值, 整数型, 公开, 成功返回该项目的数值,失败返回0
.参数 索引, 整数型, , 
.参数 数值, 整数型, , 

返回 (SendMessageA (组合框句柄, #CB_SETITEMDATA, 索引, 数值))


.子程序 取项目文本, 整数型, 公开, 成功返回文本长度,失败返回-1
.参数 索引, 整数型, , 
.参数 用于储存文本的变量, 文本型, 参考, 

赋值 (用于储存文本的变量, “ ”)
返回 (SendMessageA_Str (组合框句柄, #CB_GETLBTEXT, 索引, 用于储存文本的变量))


.子程序 取项目文本长度, 整数型, 公开, 成功返回文本长度,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (组合框句柄, #CB_GETLBTEXTLEN, 索引, 0))


.子程序 插入项目, 整数型, 公开, 在索引的前面插入一项目.成功返回要插入的文本所在的索引值,失败返回-1.
.参数 索引, 整数型, , 
.参数 欲插入的文本, 文本型, , 

返回 (SendMessageA_Str (组合框句柄, #CB_INSERTSTRING, 索引, 欲插入的文本))


.子程序 置选择项, 整数型, 公开, 成功返回索引值,失败返回-1
.参数 索引, 整数型, , 

返回 (SendMessageA (组合框句柄, #CB_SETCURSEL, 索引, 0))

.子程序 清除所有项目, 整数型, 公开, 成功返回1,失败返回0
返回 (SendMessageA (组合框句柄, #CB_RESETCONTENT, 0, 0))

.子程序 展开, 整数型, 公开, 
返回 (SendMessageA (组合框句柄, 335, 1, 0))


.子程序 收缩, 整数型, 公开, 
返回 (SendMessageA (组合框句柄, 335, 0, 0))

.类模块 H_编辑框, , , 

.程序集变量 编辑框句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (编辑框句柄, 控件句柄)
返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (编辑框句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 全选, 整数型, , 
返回 (SendMessageA (编辑框句柄, 177, 0, -1))

.子程序 选择文本, 整数型, , 
.参数 起始位置, 空白型, , 
.参数 结束位置, 空白型, , 

返回 (SendMessageA (编辑框句柄, 177, 起始位置, 结束位置))

.子程序 内容, 文本型, 公开, 
.参数 内容文本, 文本型, 可空, 空为取文本,非空为设置文本
.参数 长度, 整数型, 可空, 取文本时有效,默认65535

.局部变量 缓冲区, 文本型, , , 

.如果 (是否为空 (内容文本))
    .如果真 (是否为空 (长度))
        赋值 (长度, 65535)
    .如果真结束
    赋值 (缓冲区, 取空白文本 (长度))
    GetWindowTextA (编辑框句柄, 缓冲区, 长度)
    返回 (缓冲区)
.否则
    SetWindowTextA (编辑框句柄, 内容文本)
    返回 (内容文本)
.如果结束


.子程序 取文本行, 文本型, 公开, 获取编辑控件某一行的内容
.参数 行, 整数型, , 

.局部变量 返回, 整数型, , , 
.局部变量 变量文本, 文本型, , , 

赋值 (变量文本, 取空白文本 (相乘 (取行数 (), 2, 50)))
赋值 (返回, SendMessageA_Str (编辑框句柄, 196, 行, 变量文本))
返回 (变量文本)

.子程序 内容是否改变, 逻辑型, 公开, 
.局部变量 返回, 整数型, , , 

赋值 (返回, SendMessageA (编辑框句柄, 184, 0, 0))
.如果 (等于 (返回, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 定制滚动条, 整数型, 公开, 
.参数 列数, 整数型, , 
.参数 行数, 整数型, , 

.局部变量 返回, 整数型, , , 

赋值 (返回, SendMessageA (编辑框句柄, 182, 列数, 行数))
返回 (返回)

.子程序 只读, 整数型, 公开, 
.参数 是否只读, 逻辑型, 可空, 默认假

.局部变量 返回, 整数型, , , 
.局部变量 参数, 整数型, , , ' 1为只读 0为恢复

.判断开始 (是否只读)
    赋值 (参数, 1)
.默认
    赋值 (参数, 0)
.判断结束
赋值 (返回, SendMessageA (编辑框句柄, 207, 参数, 0))
返回 (返回)

.子程序 取行数, 整数型, 公开, 
.局部变量 返回, 整数型, , , 

赋值 (返回, SendMessageA (编辑框句柄, 186, 0, 0))
返回 (返回)

.子程序 置最大长度, 整数型, 公开, 
.参数 最大允许长度, 整数型, , 

.局部变量 返回, 整数型, , , 

赋值 (返回, SendMessageA (编辑框句柄, 197, 最大允许长度, 0))
返回 (返回)

.类模块 H_标签, , , 

.程序集变量 标签句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (标签句柄, 控件句柄)
返回 (真)


.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (标签句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 标题, 文本型, 公开, 
.参数 标题文本, 文本型, 可空, 空为取标题,非空为设置标题

.局部变量 缓冲区, 文本型, , , 
.局部变量 长度, 整数型, , , 

.如果 (是否为空 (标题文本))
    赋值 (缓冲区, 取空白文本 (256))
    GetWindowTextA (标签句柄, 缓冲区, 256)
    返回 (缓冲区)
.否则
    SetWindowTextA (标签句柄, 标题文本)
    返回 (标题文本)
.如果结束


.类模块 H_按钮, , , 

.程序集变量 按钮句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (按钮句柄, 控件句柄)
返回 (真)


.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (按钮句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 标题, 文本型, 公开, 
.参数 标题文本, 文本型, 可空, 空为取标题,非空为设置标题

.局部变量 缓冲区, 文本型, , , 

.如果 (是否为空 (标题文本))
    赋值 (缓冲区, 取空白文本 (256))
    GetWindowTextA (按钮句柄, 缓冲区, 256)
    返回 (缓冲区)
.否则
    SetWindowTextA (按钮句柄, 标题文本)
    返回 (标题文本)
.如果结束


.类模块 H_进度条, , , 

.程序集变量 进度条句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (进度条句柄, 控件句柄)
返回 (真)


.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (进度条句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 最大值, 空白型, 公开, 
.参数 最大位置, 整数型, , 

SendMessageA (进度条句柄, 1025, 0, 相乘 (最大位置, 65536))

.子程序 位置, 空白型, 公开, 
.参数 位置数值, 整数型, , 

SendMessageA (进度条句柄, 1026, 位置数值, 0)

.子程序 颜色, 空白型, 公开, 
.参数 颜色值, 整数型, 可空, 默认,灰绿色

.如果真 (是否为空 (颜色值))
    赋值 (颜色值, #灰绿)
.如果真结束
SendMessageA (进度条句柄, 1033, 0, 颜色值)

.类模块 H_滚动条, , , 

.程序集变量 滚动条句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (滚动条句柄, 控件句柄)
返回 (真)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (滚动条句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 横向滚动显示, 逻辑型, 公开, 
.参数 是否显示, 逻辑型, 可空, 默认为假,不显示

.如果 (等于 (ShowScrollBar (滚动条句柄, 0, 是否显示), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 纵向滚动显示, 逻辑型, 公开, 
.参数 是否显示, 逻辑型, 可空, 默认为假,不显示

.如果 (等于 (ShowScrollBar (滚动条句柄, 1, 是否显示), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.类模块 H_滑动条, , , 

.程序集变量 滑动条句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (滑动条句柄, 控件句柄)
返回 (真)


.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (滑动条句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 取位置, 整数型, 公开, 
返回 (SendMessageA (滑动条句柄, 1024, 0, 0))

.类模块 H_状态栏, , , 

.程序集变量 状态栏句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (状态栏句柄, 控件句柄)

返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (状态栏句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 项目, 空白型, 公开, 
.参数 项目数值, 空白型, , 

SendMessageA (状态栏句柄, 1028, 7, 取指针_整数型 (200))
 ' SendMessageA (状态栏句柄, 1028, 1, 取指针_整数型 (200))
 ' SendMessageA (状态栏句柄, 1028, 2, 取指针_整数型 (200))
SendMessageA (状态栏句柄, 1025, 0, 取指针_文本型 (“状态栏一”))
SendMessageA (状态栏句柄, 1025, 1, 取指针_文本型 (“状态栏二”))
SendMessageA (状态栏句柄, 1025, 2, 取指针_文本型 (“状态栏三”))


.程序集 使用, , , 

.子程序 取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))


.子程序 取指针_字节型, 整数型, , 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))


.子程序 取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))


.子程序 取指针_整数型, 整数型, , 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 取指针_子程序指针, 整数型, , 
.参数 x, 子程序指针, 参考, 

返回 (lstrcpyn_子程序子针 (x, x, 0))


.子程序 取指针_长整数型, 整数型, , 
.参数 x, 长整数型, 参考, 

返回 (lstrcpyn_长整数型 (x, x, 0))


.子程序 取指针_双精度小数型, 整数型, , 
.参数 x, 双精度小数型, 参考, 

返回 (lstrcpyn_双精型 (x, x, 0))


.类模块 H_单选框, , , 

.程序集变量 单选框句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
赋值 (单选框句柄, 控件句柄)
返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (单选框句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 是否被选中, 逻辑型, 公开, 
.如果 (等于 (SendMessageA (单选框句柄, 240, 0, 0), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 选中, 空白型, 公开, 
.参数 是否选中, 逻辑型, 可空, 默认真

.如果 (或者 (等于 (是否选中, 真), 是否为空 (是否选中)))
    SendMessageA (单选框句柄, 241, 1, 0)
.否则
    SendMessageA (单选框句柄, 241, 0, 0)
.如果结束


.子程序 标题, 文本型, 公开, 
.参数 标题文本, 文本型, 可空, 空为取标题,非空为设置标题

.局部变量 缓冲区, 文本型, , , 
.局部变量 长度, 整数型, , , 

.如果 (是否为空 (标题文本))
    赋值 (缓冲区, 取空白文本 (256))
    GetWindowTextA (单选框句柄, 缓冲区, 256)
    返回 (缓冲区)
.否则
    SetWindowTextA (单选框句柄, 标题文本)
    返回 (标题文本)
.如果结束


.类模块 H_复选框, , , 

.程序集变量 复选框句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 空白型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束

赋值 (复选框句柄, 控件句柄)
返回 (真)

.子程序 挂接控件, 逻辑型, 公开, 
.参数 窗口句柄, 整数型, , hDlg
.参数 控件ID, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.局部变量 控件句柄, 空白型, , , 

赋值 (控件句柄, GetDlgItem (窗口句柄, 控件ID))
.如果 (大于 (控件句柄, 0))
    赋值 (复选框句柄, 控件句柄)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 是否被选中, 逻辑型, 公开, 
.如果 (等于 (SendMessageA (复选框句柄, 240, 0, 0), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 选中, 空白型, 公开, 
.参数 是否选中, 逻辑型, 可空, 默认假

.如果 (或者 (等于 (是否选中, 真), 是否为空 (是否选中)))
    SendMessageA (复选框句柄, 241, 1, 0)
.否则
    SendMessageA (复选框句柄, 241, 0, 0)
.如果结束


.子程序 标题, 文本型, 公开, 
.参数 标题文本, 文本型, 可空, 空为取标题,非空为设置标题

.局部变量 缓冲区, 文本型, , , 
.局部变量 长度, 整数型, , , 

.如果 (是否为空 (标题文本))
    赋值 (缓冲区, 取空白文本 (256))
    GetWindowTextA (复选框句柄, 缓冲区, 256)
    返回 (缓冲区)
.否则
    SetWindowTextA (复选框句柄, 标题文本)
    返回 (标题文本)
.如果结束


.类模块 H_浏览框, , , 请将自定义控件类名设置为:AtlAxWin

.程序集变量 IE浏览器, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
AtlAxWinInit ()
输出调试文本 (“请将  H_浏览框类  自定义控件类名设置为:AtlAxWin,,标题设置为:Shell.Explorer.1”)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 请将自定义控件类名设置为:AtlAxWin
.参数 控件句柄, 整数型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
AtlAxGetControl (控件句柄, IE浏览器)
返回 (真)

.子程序 网址, 文本型, 公开, 
.参数 网址URL, 文本型, 可空, 

.局部变量 URL, 文本型, , , 

.如果 (是否为空 (网址URL))
    赋值 (URL, “about:blank”)
.否则
    赋值 (URL, 网址URL)
.如果结束
.如果 (等于 (IE浏览器.数值方法 (“Navigate”, URL), 0))
    返回 (“”)
.否则
    返回 (URL)
.如果结束


.子程序 方法1, 空白型, 公开, 
.局部变量 URL, 文本型, , , 
.局部变量 aa, 文本型, , , 

IE浏览器.通用方法 (“window”, “close()”)

.类模块 H_flash框, , , 

.程序集变量 flash, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
AtlAxWinInit ()
输出调试文本 (“请将  H_flash类  自定义控件类名设置为:AtlAxWin,,标题设置为:ShockwaveFlash.ShockwaveFlash.1”)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 挂接, 逻辑型, 公开, 
.参数 控件句柄, 整数型, , 

.如果真 (等于 (控件句柄, 0))
    返回 (假)
.如果真结束
AtlAxGetControl (控件句柄, flash)
返回 (真)

.子程序 播放, 逻辑型, 公开, 
.参数 文件, 文本型, 可空, 

.局部变量 URL, 文本型, , , 

返回 (flash.写属性 (“Movie”, 文件))

.程序集 调用函数, , , 

.程序集变量 画图完毕, 逻辑型, , , 
.子程序 创建窗口子程序, 空白型, , 
.参数 对话框编号, 空白型, , 

.局部变量 NULL, 文本型, , , 
.局部变量 实例句柄, 整数型, , , 

赋值 (实例句柄, GetModuleHandleA (NULL))
DialogBoxParamA (实例句柄, 对话框编号, 0, &事件处理函数, 0)

.子程序 空闲事件, 空白型, , 
.参数 匿名参数_1716, 空白型, , 

.局部变量 控件数, 空白型, , , 
.局部变量 N, 整数型, , , 

 ' 控件数 ＝ 取数组成员数 (窗口组)
 ' .计次循环首 (控件数, N)
     ' .如果真 (不等于 (到整数 (窗口组 [N], 事件.), 0))
         ' 窗口组[n].空闲时间
    .如果真结束
    
 ' .计次循环尾 ()

.子程序 事件处理函数, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 控件数, 空白型, , , 
.局部变量 N, 整数型, , , 
.局部变量 实例句柄, 整数型, , , 
.局部变量 NULL, 文本型, , , 
.局部变量 图标句柄, 整数型, , , 
.局部变量 NNN, 整数型, , , 

赋值 (控件数, 取数组成员数 (窗口组))
.判断开始 (等于 (msg, 272)) ' 初始化对话框
    赋值 (实例句柄, GetModuleHandleA (NULL))
    赋值 (图标句柄, LoadIconA (实例句柄, 129))
    
    SendMessageA (hwnd, 128, 0, 图标句柄) ' 设置标题栏上的图标
    SendMessageA (hwnd, 128, 1, 图标句柄)
     ' .如果真 (等于 (窗口组 [控件数], 属性.初始不可视, 真))
         ' ShowWindow (hwnd, 0)
    .如果真结束
    .如果真 (等于 (基窗口句柄, 0))
        赋值 (基窗口句柄, hwnd)
    .如果真结束
    赋值 (窗口组 [控件数], 窗口句柄, hwnd)
    .如果真 (不等于 (到整数 (窗口组 [控件数], 事件.创建完成), 0))
        子 (窗口组 [控件数], 事件.创建完成, hwnd, , )
    .如果真结束
    
    .如果真 (窗口组 [控件数], 属性.不在任务栏中显示)
        SetWindowLongA (hwnd, -8, 1028)
         ' SetWindowLongA (hwnd, -20, 262144)'显示
    .如果真结束
    
    
.判断 (并且 (等于 (msg, 2), 等于 (基窗口句柄, hwnd))) ' 关闭基础窗口
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.将被关闭), 0))
                .如果真 (等于 (CallWindowProcA (到整数 (窗口组 [N], 事件.将被关闭), 0, 0, 0, 0), 0))
                    返回 (0)
                .如果真结束
                
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
    
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.被销毁), 0))
                子 (窗口组 [N], 事件.被销毁, , , )
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (取数组成员数 (托盘数据组), ) ' 删除图标
        Shell_NotifyIconA (2, 托盘数据组 [1].托盘结构)
        删除成员 (托盘数据组, 1, 1)
    .计次循环尾 ()
    EndDialog (hwnd, 0)
.判断 (并且 (等于 (msg, 2), 不等于 (基窗口句柄, hwnd))) ' 关闭窗口
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.将被关闭), 0))
                .如果真 (等于 (CallWindowProcA (到整数 (窗口组 [N], 事件.将被关闭), 0, 0, 0, 0), 0))
                    返回 (0)
                .如果真结束
                
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.被销毁), 0))
                子 (窗口组 [N], 事件.被销毁, , , )
            .如果真结束
            跳出循环 ()
            
        .如果真结束
        
    .计次循环尾 ()
    EndDialog (hwnd, 0)
.判断 (等于 (msg, Msn_TaskbarCreated)) ' 任务栏重建
    未知函数_526 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.任务栏重新加载), 0))
                子 (窗口组 [N], 事件.任务栏重新加载, , , )
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (取数组成员数 (托盘数据组), NNN)
        Shell_NotifyIconA (2, 托盘数据组 [NNN], 托盘结构) ' 删除图标
        Shell_NotifyIconA (0, 托盘数据组 [NNN], 托盘结构) ' 添加图标
    .计次循环尾 ()
.判断 (并且 (等于 (msg, 274), 等于 (wparam, 61472))) ' 系统按钮+最小化
    未知函数_315 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.最小化), 0))
                子 (窗口组 [N], 事件.最小化, , , )
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (并且 (等于 (msg, 274), 等于 (wparam, 61488))) ' 系统按钮+最大化
    未知函数_315 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.最大化), 0))
                子 (窗口组 [N], 事件.最大化, , , )
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 7)) ' 获得焦点
    未知函数_315 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.获得焦点), 0))
                子 (窗口组 [N], 事件.获得焦点, , , )
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 8)) ' 失去焦点
    未知函数_315 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.失去焦点), 0))
                子 (窗口组 [N], 事件.失去焦点, , , )
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 19)) ' 窗口被还原
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.被还原), 0))
                子 (窗口组 [N], 事件.被还原)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 16))
    EndDialog (hwnd, 0)
.判断 (等于 (msg, 5)) ' 尺寸被改变
    未知函数_360 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.尺寸被改变), 0))
                 ' InvalidateRect (hwnd, 0, 真)
                子 (窗口组 [N], 事件.尺寸被改变)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 3)) ' 位置被改变
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.位置被改变), 0))
                子 (窗口组 [N], 事件.位置被改变)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 256)) ' 按下某键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.按下某键), 0))
                子 (窗口组 [N], 事件.按下某键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 257)) ' 弹起某键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.释放某键), 0))
                子 (窗口组 [N], 事件.释放某键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 512)) ' 移动鼠标
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.移动鼠标), 0))
                子 (窗口组 [N], 事件.移动鼠标)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 513)) ' 按下鼠标左键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.按下鼠标左键), 0))
                子 (窗口组 [N], 事件.按下鼠标左键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 514)) ' 释放鼠标左键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.释放鼠标左键), 0))
                子 (窗口组 [N], 事件.释放鼠标左键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 515)) ' 双击鼠标左键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.双击鼠标左键), 0))
                子 (窗口组 [N], 事件.双击鼠标左键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 516)) ' 按下鼠标右键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.按下鼠标右键), 0))
                子 (窗口组 [N], 事件.按下鼠标右键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 517)) ' 释放鼠标右键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.释放鼠标右键), 0))
                子 (窗口组 [N], 事件.释放鼠标右键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 518)) ' 双击鼠标右键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.双击鼠标右键), 0))
                子 (窗口组 [N], 事件.双击鼠标右键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 519)) ' 按下鼠标中键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.按下鼠标中键), 0))
                子 (窗口组 [N], 事件.按下鼠标中键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 520)) ' 释放鼠标中键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.释放鼠标中键), 0))
                子 (窗口组 [N], 事件.释放鼠标中键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 521)) ' 双击鼠标中键
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.双击鼠标中键), 0))
                子 (窗口组 [N], 事件.双击鼠标中键)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 522)) ' 滚动滚轮
    未知函数_312 () ' *** 缩略程序块 ***
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
            .如果真 (不等于 (到整数 (窗口组 [N], 事件.滚动滚轮), 0))
                子 (窗口组 [N], 事件.滚动滚轮)
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (msg, 20)) ' 窗口底图
     ' 输出调试文本 (1)
    返回 (画底图 (hwnd, wparam, 控件数))
    
.判断 (等于 (msg, #自定义消息_托盘事件初始消息值)) ' 托盘
    
    .判断开始 (等于 (lparam, 514)) ' 判断是否单击了托盘图标的左键
        .如果真 (不等于 (到整数 (托盘数据组 [wparam], 左键事件子程序), 0))
            子 (托盘数据组 [wparam], 左键事件子程序)
        .如果真结束
        
    .判断 (等于 (lparam, 517)) ' 判断是否按下鼠标右键，自己添加响应处理代码
        .如果真 (不等于 (到整数 (托盘数据组 [wparam], 右键事件子程序), 0))
            子 (托盘数据组 [wparam], 右键事件子程序)
        .如果真结束
        
    .默认
        
    .判断结束
    
.默认
     ' 组建处理函数 (hwnd, msg, wparam, lparam)
.判断结束
.计次循环首 (控件数, N)
    .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
        .如果真 (不等于 (到整数 (窗口组 [N], 其他事件处理), 0))
             ' 子 (窗口组 [N].其他窗口事件处理, , , )
            返回 (CallWindowProcA (到整数 (窗口组 [N], 其他事件处理), hwnd, msg, wparam, lparam))
        .如果真结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


返回 (0)

.子程序 画底图, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 wparam, 整数型, , 
.参数 控件数, 整数型, , 

.局部变量 图片对象, 对象, , , 
.局部变量 Rect, RECT, , , 
.局部变量 图片高度, 整数型, , , 
.局部变量 图片宽度, 整数型, , , 
.局部变量 图片高度2, 整数型, , , 
.局部变量 N, 整数型, , , 
.局部变量 匿名局部变量_15797, 空白型, , , 

.计次循环首 (控件数, N)
    .如果真 (等于 (窗口组 [N], 窗口句柄, hwnd))
        .如果真 (不等于 (窗口组 [N], 属性.底图, {  }))
            .如果真 (图片对象.创建图片对象 (窗口组 [N], 属性.底图))
                赋值 (图片宽度, 图片对象.读数值属性 (“Width”, ))
                赋值 (图片高度, 图片对象.读数值属性 (“Height”, ))
                赋值 (图片高度2, 负 (图片高度))
                GetClientRect (hwnd, Rect)
                
                 ' 输出调试文本 (wparam)
                图片对象.方法 (“Render”, wparam, 0, 0, Rect.Right, Rect.Bottom, 0, 图片高度, 图片宽度, 图片高度2, 0)
                 ' InvalidateRect (hwnd, 0, 真)
                返回 (1)
            .如果真结束
            
        .如果真结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 组建处理函数, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 umsg, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 


返回 (0)


.类模块 H_窗口, , , 

.程序集变量 主窗口句柄, 空白型, , , 
.程序集变量 对话框编号, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
AtlAxWinInit ()
InitCommonControls ()
.如果真 (等于 (Msn_TaskbarCreated, 0))
    赋值 (Msn_TaskbarCreated, RegisterWindowMessageA (“TaskbarCreated”))
.如果真结束


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 销毁, 空白型, 公开, 
EndDialog (主窗口句柄, 0)

.子程序 加载图标, 整数型, 公开, 
.参数 图标句柄, 空白型, 可空, 

.局部变量 实例句柄, 整数型, , , 
.局部变量 NULL, 文本型, , , 

赋值 (实例句柄, GetModuleHandleA (NULL))
.如果真 (等于 (是否为空 (图标句柄), 假))
    赋值 (图标句柄, LoadIconA (实例句柄, 129))
.如果真结束
SendMessageA (主窗口句柄, 128, 0, 图标句柄) ' 设置标题栏上的图标
SendMessageA (主窗口句柄, 128, 1, 图标句柄)
返回 (图标句柄)

.子程序 创建, 空白型, 公开, 
.参数 对话框控件编号, 整数型, , 
.参数 窗口属性, 属性_窗口, 可空, 
.参数 事件处理, 事件_窗口, 可空, 创建完成事件参数一:窗口句柄
.参数 扩展事件, 子程序指针, 可空, 

.局部变量 事件信息, C_窗口, , , 
.局部变量 NN, 空白型, , , 
.局部变量 NULL, 文本型, , , 
.局部变量 实例句柄, 整数型, , , 

赋值 (对话框编号, 对话框控件编号)
赋值 (NN, 相加 (取数组成员数 (窗口组), 1))
重定义数组 (窗口组, 真, NN)

.如果真 (小于 (取字节集长度 (窗口属性.底图), 20))
    赋值 (窗口属性.底图, {  })
.如果真结束

赋值 (窗口组 [NN], 标识, 对话框控件编号)
赋值 (窗口组 [NN], 事件, 事件处理)
赋值 (窗口组 [NN], 其他事件处理, 扩展事件)
赋值 (窗口组 [NN], 属性, 窗口属性)
.如果 (等于 (NN, 1))
    创建窗口子程序 (对话框控件编号)
.否则
    子 (&创建窗口子程序, 对话框控件编号)
.如果结束


.子程序 取句柄, 整数型, 公开, 
返回 (主窗口句柄)

.子程序 挂接, 逻辑型, 公开, 用于挂接 方法_  空为挂接当前
.参数 窗口句柄, 整数型, 可空, 

.局部变量 控件数, 整数型, , , 
.局部变量 N, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

.如果 (是否为空 (窗口句柄))
    赋值 (控件数, 取数组成员数 (窗口组))
    .计次循环首 (控件数, N)
        .如果真 (等于 (窗口组 [N], 标识, 对话框编号))
            赋值 (主窗口句柄, 窗口组 [N], 窗口句柄)
            赋值 (返回, 真)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    返回 (返回)
.否则
    .如果 (等于 (IsWindow (窗口句柄), 0))
        返回 (假)
    .否则
        赋值 (主窗口句柄, 窗口句柄)
        返回 (真)
    .如果结束
    
.如果结束


.子程序 移动, 空白型, 公开, 
.参数 左边, 整数型, 可空, 
.参数 顶边, 整数型, 可空, 
.参数 宽度, 整数型, 可空, 
.参数 高度, 整数型, 可空, 

.局部变量 Rect, RECT, , , 
.局部变量 坐标, POINTAPI, , , 

GetClientRect (主窗口句柄, Rect)
.如果真 (等于 (是否为空 (左边), 假))
    赋值 (Rect.Left, 左边)
.如果真结束
.如果真 (等于 (是否为空 (顶边), 假))
    赋值 (Rect.Top, 顶边)
.如果真结束
.如果真 (等于 (是否为空 (宽度), 假))
    赋值 (Rect.Right, 宽度)
.如果真结束
.如果真 (等于 (是否为空 (高度), 假))
    赋值 (Rect.Bottom, 高度)
.如果真结束
MoveWindow (主窗口句柄, Rect.Left, Rect.Top, Rect.Right, Rect.Bottom, 1)

.子程序 取位置, 空白型, 公开, 
.参数 左边, 空白型, 参考 可空, 
.参数 顶边, 空白型, 参考 可空, 
.参数 宽度, 空白型, 参考 可空, 
.参数 高度, 空白型, 参考 可空, 

.局部变量 Rect, RECT, 静态, , 

GetClientRect (主窗口句柄, Rect)
赋值 (左边, Rect.Left)
赋值 (顶边, Rect.Top)
赋值 (宽度, Rect.Right)
赋值 (高度, Rect.Bottom)

.子程序 刷新, 空白型, 公开, 
InvalidateRect (主窗口句柄, 0, 真)
UpdateWindow (主窗口句柄)

.子程序 禁止, 空白型, 公开, 
.参数 是否禁止, 逻辑型, 可空, 

.如果 (不等于 (是否禁止, 真))
    EnableWindow (主窗口句柄, 1)
.否则
    EnableWindow (主窗口句柄, 0)
.如果结束


.子程序 取标题, 文本型, 公开, 
.局部变量 窗口标题, 文本型, , , 

赋值 (窗口标题, 取空白文本 (255))
GetWindowTextA (主窗口句柄, 窗口标题, 255)
返回 (窗口标题)


.子程序 取类名, 文本型, 公开, 
.局部变量 返回, 文本型, , , 

赋值 (返回, 取空白文本 (255))
GetClassNameA (主窗口句柄, 返回, 255)
返回 (返回)

.子程序 可视, 空白型, 公开, 
.参数 是否可视, 逻辑型, 可空, 

.如果 (等于 (是否可视, 真))
    ShowWindow (主窗口句柄, 9)
.否则
    ShowWindow (主窗口句柄, 0)
.如果结束


.子程序 最大化, 空白型, 公开, 
ShowWindow (主窗口句柄, 3)

.子程序 最小化, 空白型, 公开, 
ShowWindow (主窗口句柄, 2)

.子程序 托盘_置图标, 整数型, 公开, 返回托盘图标ID,错误返回0
.参数 托盘图标ID, 整数型, 可空, 要设置的托盘图标ID,空为创建托盘图标,
.参数 图标句柄, 整数型, 可空, 空为窗口图标,非空为指定图标
.参数 提示文本, 文本型, 可空, 提示文本
.参数 左键事件子程序, 子程序指针, 可空, 
.参数 右键事件子程序, 子程序指针, 可空, 

.局部变量 实例句柄, 整数型, , , 
.局部变量 托盘结构, NotifyIconData, , , 
.局部变量 ID, 空白型, , , 

.如果真 (是否为空 (图标句柄))
    赋值 (图标句柄, SendMessageA (主窗口句柄, 127, 0, 0))
.如果真结束
赋值 (托盘结构.hIcon, 图标句柄)
赋值 (托盘结构.hwnd, 主窗口句柄)
赋值 (托盘结构.cbSize, LocalSize_NotifyIconData (托盘结构))

赋值 (托盘结构.uCallbackMessage, #自定义消息_托盘事件初始消息值) ' ＋ 托盘结构.uID  ' 2000为自定义消息，你可以用1024+1或以上、65565以下的任何值

.如果 (或者 (是否为空 (托盘图标ID), 等于 (托盘图标ID, 0)))
    赋值 (托盘结构.uID, 相加 (取数组下标 (托盘数据组, ), 1))
     ' 输出调试文本 (托盘结构.uID)
    重定义数组 (托盘数据组, 真, 托盘结构.uID)
    
    赋值 (托盘结构.uFlags, 位或 (4, 2, 1))
.否则
    .如果真 (或者 (大于 (托盘图标ID, 取数组下标 (托盘数据组, )), 小于 (托盘图标ID, 0)))
        返回 (0)
    .如果真结束
    赋值 (托盘结构.uID, 托盘图标ID)
    赋值 (托盘结构.uFlags, 2)
.如果结束

赋值 (托盘数据组 [托盘结构].uID, 托盘结构, 托盘结构)
.如果真 (等于 (是否为空 (左键事件子程序), 假))
    赋值 (托盘数据组 [托盘结构].uID, 左键事件子程序, 左键事件子程序)
.如果真结束
.如果真 (等于 (是否为空 (右键事件子程序), 假))
    赋值 (托盘数据组 [托盘结构].uID, 右键事件子程序, 右键事件子程序)
.如果真结束
lstrcpyn_字节_文本 (托盘结构.szTip, 提示文本, 相加 (取文本长度 (提示文本), 1)) ' 把文本写入字符数组
Shell_NotifyIconA (0, 托盘结构)
返回 (托盘结构.uID)

.子程序 托盘_置气泡, 空白型, 公开, 
.参数 托盘图标ID, 整数型, , 
.参数 气泡内容, 文本型, 可空, 
.参数 气泡图标类型, 整数型, 可空, 
.参数 气泡标题, 文本型, 可空, 

.局部变量 托盘结构, NotifyIconData, , , 

.如果真 (或者 (大于 (托盘图标ID, 取数组下标 (托盘数据组, )), 小于或等于 (托盘图标ID, 0)))
    返回 ()
.如果真结束
.如果真 (是否为空 (气泡图标类型))
    赋值 (气泡图标类型, 16)
.如果真结束
赋值 (托盘数据组 [托盘图标ID], 托盘结构.dwInfoFlags, 1) ' 信息图标
赋值 (托盘数据组 [托盘图标ID], 托盘结构.uFlags, 气泡图标类型) ' 气泡提示
lstrcpyn_字节_文本 (托盘数据组 [托盘图标ID], 托盘结构.szInfo, 气泡内容, 相加 (取文本长度 (气泡内容), 1))
lstrcpyn_字节_文本 (托盘数据组 [托盘图标ID], 托盘结构.szInfoTitle, 气泡标题, 相加 (取文本长度 (气泡标题), 1))
 ' Shell_NotifyIconA (3, 托盘数据组 [托盘图标ID].托盘结构)
Shell_NotifyIconA (1, 托盘数据组 [托盘图标ID], 托盘结构)

.子程序 托盘_删除图标, 空白型, 公开, 
.参数 托盘图标ID, 整数型, , 

.局部变量 N, 整数型, , , 

.计次循环首 (取数组成员数 (托盘数据组), N)
    .如果真 (等于 (托盘数据组 [N], 托盘结构.uID, 托盘图标ID))
        Shell_NotifyIconA (2, 托盘数据组 [N], 托盘结构) ' 删除图标
        删除成员 (托盘数据组, N, 1)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


 ' 不属于任何一个程序集、类模块的函数：
