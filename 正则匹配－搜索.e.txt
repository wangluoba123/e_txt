 ' 文件类型：Windows窗口程序

 ' 程序名称：正则表达式 匹配 搜索
 ' 程序描述：演示如何使用正则表达式进行数据格式校验和数据提取
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “正则表达式例程 正则匹配 正则搜索”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 1 2 正则表达式支持库





.窗口程序集 窗口程序集1, , , 

.子程序 _检验按钮_被单击, 空白型, , 
.局部变量 邮件地址表达式, 未知类型0x20001, , , 

 ' ^([\.\w-]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$
.如果真 (等于 (邮件地址表达式.未知支持库函数_3 (“^[_\.0-9a-z-]+@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$”, 假), 假))
    信息框 (“创建正则表达式失败。请检查参数！”, #错误图标, “检验”)
    返回 ()
.如果真结束
.如果 (邮件地址表达式.未知支持库函数_0 (.内容))
    信息框 (“这是一个符合规则的E-Mail地址！”, #信息图标, “检验”)
.否则
    信息框 (“这不是一个符合规则的E-Mail地址！”, #错误图标, “检验”)
.如果结束


.子程序 _提取按钮_被单击, 空白型, , 
.局部变量 文件内容, 文本型, , , 
.局部变量 表达式, 未知类型0x20001, , , 
.局部变量 搜索结果, 未知类型0x20002, , , 
.局部变量 起始位置, 整数型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 结果数组, 未知类型0x20002, , "0", 
.局部变量 数组索引, 整数型, , , 
.局部变量 时间, 整数型, , , 
.局部变量 找到的文本, 文本型, , , 

 ' ([\.\w-]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
.如果真 (等于 (表达式.未知支持库函数_3 (“([_\.0-9a-z-]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)”, 假), 假))
    信息框 (“创建正则表达式失败。请检查参数！”, #错误图标, “提取”)
    返回 ()
.如果真结束

.如果真 (等于 (打开 (), 假))
    返回 ()
.如果真结束
赋值 (文件内容, 取字节集数据 (读入文件 (.文件名), #文本型))
清空 ()
赋值 (.禁止, 真)
 ' -----------------------标注开始-----------------------------
赋值 (时间, 取启动时间 ())
赋值 (结果数组, 表达式.未知支持库函数_16 (文件内容))
信息框 (相加 (“搜索全部共用时：”, 到文本 (相减 (取启动时间 (), 时间)), “毫秒！”), #信息图标, )
.计次循环首 (取数组成员数 (结果数组), 数组索引)
    相加 (结果数组.未知支持库函数_11 ( [数组索引], 文件内容, ), “用户名：”, 结果数组.未知支持库函数_12 ( [数组索引], 文件内容, 1, )).加入项目 ()
.计次循环尾 ()
 ' ------------------------标注结束-----------------------------

 ' '*下面是循环调用“搜索”来提取email地址，和上面被标注的程序段实现同样的功能，但更灵活，速度上要慢一些*
 ' 赋值 (起始位置, 1) ' 从第一个位置开始搜索
 ' 赋值 (搜索结果, 表达式.未知支持库函数_7 (文件内容, 起始位置, )) ' 搜索第一个
 ' .判断循环首 (等于 (搜索结果.未知支持库函数_10 (), 假)) ' 循环寻找所有的有效E-Mail地址
     ' 赋值 (找到的文本, 搜索结果.未知支持库函数_11 (文件内容, 起始位置))
     ' 赋值 (文本长度, 取文本长度 (找到的文本))
     ' .如果真 (不等于 (文本长度, 0))
         ' 相加 (找到的文本, “ 用户名：”, 搜索结果.未知支持库函数_12 (文件内容, 1, )).加入项目 ()
     ' .如果真结束
     ' 赋值 (起始位置, 相加 (起始位置, 文本长度)) ' 从本次找到的E-Mail地址文本的下一个字符开始继续搜索
     ' 赋值 (搜索结果, 表达式.未知支持库函数_7 (文件内容, 起始位置, ))
     ' 处理事件 ()
     ' '在这里可以进行判断，如果找到了所需要的信息即可跳出循环。这一点比“搜索全部”更灵活
 ' .判断循环尾 ()
信息框 (相加 (“提取结束！共找到 ”, 到文本 (取项目数 ()), “ 个E-Mail地址。”), #信息图标, “提取”)
赋值 (.禁止, 假)

.子程序 _邮件地址框_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _检验按钮_被单击 ()
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
