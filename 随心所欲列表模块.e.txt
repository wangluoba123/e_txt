 ' 文件类型：Windows模块源码

 ' 程序名称：随心所欲
 ' 程序描述：一切看你的心意

BY：傀儡

4.22更新
 ' 程序作者：傀儡
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.4
 ' 创建号：0.0



.常量 列表_文本风格_普通, "0", 公开, 
.常量 列表_文本风格_加粗, "1", 公开, 
.常量 列表_文本风格_倾斜, "2", 公开, 
.常量 列表_文本风格_加粗倾斜, "3", 公开, 
.常量 列表_文本风格_带下划线, "4", 公开, 
.常量 列表_文本风格_带中间线, "8", 公开, 
.常量 , , , 
.常量 列表_渐变方式_无, "1", 公开, 
.常量 列表_渐变方式_从上到下, "2", 公开, 
.常量 列表_渐变方式_从左到右, "3", 公开, 
.常量 列表_渐变方式_从下到上, "4", 公开, 
.常量 列表_渐变方式_从右到左, "5", 公开, 
.常量 列表_渐变方式_上下双渐变, "6", 公开, 
.常量 列表_渐变方式_左右双渐变, "7", 公开, 
.常量 列表_渐变方式_从上到下_一半, "8", 公开, 
.常量 列表_渐变方式_从左到右_一半, "9", 公开, 
.常量 列表_渐变方式_从下到上_一半, "10", 公开, 
.常量 列表_渐变方式_从右到左_一半, "11", 公开, 
.常量 , , , 
.常量 , , , 
.常量 列表_鼠标_移动, "512", 公开, 
.常量 列表_鼠标_左键点击, "513", 公开, 
.常量 列表_鼠标_双击, "515", 公开, 
.常量 列表_鼠标_右键点击, "516", 公开, 
.常量 列表_鼠标_无, "0", 公开, 
.常量 , , , 
.常量 列表_范围方式_水平居中, "1", 公开, 
.常量 列表_范围方式_垂直居中, "2", 公开, 
.常量 列表_范围方式_居中, "3", 公开, 
.常量 , , , 
.常量 状态_普通静止, "2", 公开, 
.常量 状态_普通点燃, "3", 公开, 
.常量 状态_分组静止, "5", 公开, 
.常量 状态_分组点燃, "7", 公开, 
.常量 状态_焦点, "11", 公开, 
.常量 状态_禁止, "13", 公开, 
.常量 状态_高亮, "17", 公开, 
.常量 点亮_普通, "3", 公开, 
.常量 点亮_分组, "7", 公开, 
.常量 点亮_焦点, "11", 公开, 
.常量 点亮_高亮, "17", 公开, 
.常量 , , , 
.常量 光栅运算_与, "8913094", 公开, 
.常量 光栅运算_复制, "13369376", 公开, 
.常量 光栅运算_反色, "4457256", 公开, 
.常量 光栅运算_异或, "6684742", 公开, 
.常量 光栅运算_或, "15597702", 公开, 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 自建矩形, 公开, 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 鼠标动作结构, 公开, 
    .成员 结构尺寸, 整数型, , , 
    .成员 标志, 整数型, , , 
    .成员 接收动作消息的句柄, 整数型, , , 
    .成员 悬停判断的时间, 整数型, , , 

数据类型 绘制信息, 公开, 
    .成员 控件类型, 整数型, , , 
    .成员 控件ID, 整数型, , , 
    .成员 菜单项ID, 整数型, , , 
    .成员 绘制动作, 整数型, , , 
    .成员 绘制状态, 整数型, , , 
    .成员 控件窗口句柄, 整数型, , , 
    .成员 场景句柄, 整数型, , , 
    .成员 矩形区域, rect, , , 

数据类型 状态_图片, , 
    .成员 普通静止, 图片信息, , , 
    .成员 普通点燃, 图片信息, , , 
    .成员 普通点亮, 图片信息, , , 
    .成员 分组静止, 图片信息, , , 
    .成员 分组点燃, 图片信息, , , 
    .成员 分组点亮, 图片信息, , , 
    .成员 焦点, 图片信息, , , 
    .成员 焦点点亮, 图片信息, , , 
    .成员 高亮, 图片信息, , , 
    .成员 高亮点亮, 图片信息, , , 
    .成员 禁止, 图片信息, , , 
    .成员 禁止点亮, 图片信息, , , 

数据类型 图片信息, , 
    .成员 图片范围, 自建矩形, , "1", 
    .成员 图片信息, 整数型, , "1", 
    .成员 是否点亮, 逻辑型, , "1", 
    .成员 数量, 整数型, , , 
    .成员 图片方式, 整数型, , "1", 
    .成员 起始颜色, 整数型, , "1", 
    .成员 终点颜色, 整数型, , "1", 
    .成员 渐变方式, 整数型, , "1", 
    .成员 边框位置, 整数型, , "1", 
    .成员 边框范围, 自建矩形, , "1", 
    .成员 透明度, 整数型, , "1", 

数据类型 状态_边框, , 
    .成员 普通静止, 边框信息, , , 
    .成员 普通点燃, 边框信息, , , 
    .成员 分组静止, 边框信息, , , 
    .成员 分组点燃, 边框信息, , , 
    .成员 焦点, 边框信息, , , 
    .成员 高亮, 边框信息, , , 
    .成员 禁止, 边框信息, , , 

数据类型 边框信息, , 
    .成员 颜色, 整数型, , , 
    .成员 次数, 整数型, , , 
    .成员 边框方式, 整数型, , , 
    .成员 边框范围, 自建矩形, , , 
    .成员 圆角度, 整数型, , , 
    .成员 顶部划痕起始颜色, 整数型, , , 
    .成员 顶部划痕终点颜色, 整数型, , , 
    .成员 顶部划痕范围, 自建矩形, , , 
    .成员 划痕方式, 整数型, , , 
    .成员 是否划痕, 逻辑型, , , 

数据类型 回调信息, , 
    .成员 左击回调, 整数型, , , 
    .成员 双击回调, 整数型, , , 
    .成员 右击回调, 整数型, , , 
    .成员 移动回调, 整数型, , , 
    .成员 左击释放, 整数型, , , 

数据类型 状态_底图, , 
    .成员 普通静止, 底图信息, , , 
    .成员 分组静止, 底图信息, , , 
    .成员 普通点燃, 底图信息, , , 
    .成员 分组点燃, 底图信息, , , 
    .成员 焦点, 底图信息, , , 
    .成员 高亮, 底图信息, , , 
    .成员 禁止, 底图信息, , , 

数据类型 底图信息, , 
    .成员 起始颜色, 整数型, , , 
    .成员 终点颜色, 整数型, , , 
    .成员 方式, 整数型, , , 
    .成员 透明度, 整数型, , , 
    .成员 底图图片, 整数型, , , 

数据类型 文本信息, , 
    .成员 文本, 文本型, , "1", 
    .成员 大小, 整数型, , "1", 
    .成员 风格, 整数型, , "1", 
    .成员 颜色, 整数型, , "1", 
    .成员 范围, 自建矩形, , "1", 
    .成员 数量, 整数型, , , 

数据类型 分组图片, , 
    .成员 打开图片, 字节集, , , 
    .成员 关闭图片, 字节集, , , 
    .成员 范围, 自建矩形, , , 

数据类型 状态_文本, , 
    .成员 普通静止, 文本信息, , , 
    .成员 分组静止, 文本信息, , , 
    .成员 普通点燃, 文本信息, , , 
    .成员 分组点燃, 文本信息, , , 
    .成员 焦点, 文本信息, , , 
    .成员 高亮, 文本信息, , , 
    .成员 禁止, 文本信息, , , 

数据类型 全局信息, , 
    .成员 背景颜色, 整数型, , , 
    .成员 底图, 状态_底图, , , 
    .成员 文本, 状态_文本, , , 
    .成员 图片, 状态_图片, , , 
    .成员 回调, 回调信息, , , 
    .成员 边框, 状态_边框, , , 
    .成员 范围, 自建矩形, , , 
    .成员 焦点, 整数型, , , 
    .成员 热点, 整数型, , , 
    .成员 高亮, 整数型, , , 
    .成员 项目数量, 整数型, , , 
    .成员 现行位置, 整数型, , , 
    .成员 普通高度, 整数型, , , 
    .成员 焦点高度, 整数型, , , 
    .成员 句柄, 整数型, , , 
    .成员 父句柄, 整数型, , , 
    .成员 是否图片点亮, 逻辑型, , , 
    .成员 最前项目, 整数型, , , 
    .成员 最后项目, 整数型, , , 
    .成员 分组图片, 分组图片, , , 
    .成员 状态, 附加状态, , , 

数据类型 分组成员, , 
    .成员 成员, 项目信息, , "1", 
    .成员 分组位置, 整数型, , , 
    .成员 分组个数, 整数型, , , 

数据类型 项目信息, , 
    .成员 是否禁止, 逻辑型, , , 
    .成员 是否分组, 逻辑型, , , 
    .成员 是否打开, 逻辑型, , , 
    .成员 图片, 状态_图片, , , 
    .成员 文本, 状态_文本, , , 
    .成员 底图, 状态_底图, , , 
    .成员 是否隐藏, 逻辑型, , , 

数据类型 附加状态, , 
    .成员 是否移动点燃, 逻辑型, , , 
    .成员 是否左键焦点, 逻辑型, , , 
    .成员 是否左键高亮, 逻辑型, , , 
    .成员 是否双击焦点, 逻辑型, , , 

数据类型 位图结构_, , BITMAP
    .成员 bmType, 整数型, , , 一定是0
    .成员 位图宽度, 整数型, , , bmWidth
    .成员 位图高度, 整数型, , , bmHeight
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 整数型, , , 
    .成员 bmBitsPixel, 整数型, , , 
    .成员 bmBits, 字节型, , , 

数据类型 pF, 公开, PointF
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 

数据类型 rect, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 
    .成员 Width, 整数型, , , 
    .成员 Height, 整数型, , , 

数据类型 rectF, 公开, 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 
    .成员 Width, 小数型, , , 
    .成员 Height, 小数型, , , 

数据类型 GdiplusStartupInput, 公开, 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 BITMAPINFOHEADER, 公开, 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 文件头信息_, 公开, 
    .成员 文件类型, 短整数型, , , bfType
    .成员 结果大小, 整数型, , , bfSize
    .成员 保留1, 短整数型, , , bfReserved1保留，必须设置为0
    .成员 保留2, 短整数型, , , bfReserved2保留，必须设置为0
    .成员 偏移量, 空白型, , , bfOffBits从文件头开始到实际的图象数据之间的字节的偏移量

数据类型 WNDCLASSEX, 公开, 
    .成员 cbSize, 整数型, , , 
    .成员 style, 整数型, , , 
    .成员 lpfnWndProc, 子程序指针, , , '<<<<注意这里要改成子程序指针类型
    .成员 cbClsExtra, 整数型, , , 
    .成员 cbWndExtra, 整数型, , , 
    .成员 hInstance, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 hCursor, 整数型, , , 
    .成员 hbrBackground, 整数型, , , 
    .成员 lpszMenuName, 文本型, , , 
    .成员 lpszClassName, 文本型, , , 
    .成员 hIconSm, 整数型, , , 

数据类型 MSG, 公开, 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, pL, , , 

数据类型 pL, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 PAINTSTRUCT, 公开, 
    .成员 hdc, 整数型, , , 
    .成员 fErase, 整数型, , , 
    .成员 rcPaint, rect, , , 
    .成员 fRestore, 整数型, , , 
    .成员 fIncUpdate, 整数型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 POINTAPI, , 坐标;
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 

数据类型 RECT, , 矩形;
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 


.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", 公开, 获取一个应用程序或动态链接库的模块句柄
    .参数 lpModuleName, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。

.DLL命令 CreateWindowEx, 整数型, "user32", "CreateWindowExA", 公开, 建立窗口
    .参数 dwExStyle, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 lpWindowName, 文本型, , 
    .参数 dwStyle, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 hMenu, 整数型, , 
    .参数 hInstance, 整数型, , 
    .参数 lpParam, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 BringWindowToTop, 整数型, "user32", "BringWindowToTop", 公开, 将指定的窗口带至窗口列表顶部。倘若它部分或全部隐藏于其他窗口下面，则将隐藏的部分完全显示出来。该函数也对弹出式窗口、顶级窗口以及MDI子窗口产生作用  非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲带至顶部的那个窗口的句柄;

.DLL命令 RtlMoveMemory_I2D, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 lpvDest, 绘制信息, , 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "user32", "GetWindowRect", 公开, 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内  非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 想获得范围矩形的那个窗口的句柄
    .参数 矩形区域, rect, , RECT，屏幕坐标中随同窗口装载的矩形;

.DLL命令 SendMessage_RECT, 整数型, "user32.dll", "SendMessageA", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 
    .参数 d, rect, 传址, 

.DLL命令 CopyToPtr_FromEBin, 空白型, "", "RtlMoveMemory", 公开, 
    .参数 Dest, 空白型, , 
    .参数 Src, 字节集, , 
    .参数 length, 空白型, , 

.DLL命令 _VirtualAlloc, 整数型, "kernel32.dll", "VirtualAlloc", 公开, 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 TrackMouseEvent, 整数型, "user32.dll", "TrackMouseEvent", 公开, 
    .参数 lpEventTrack, 鼠标动作结构, , 

.DLL命令 SetFocus, 整数型, "user32", "SetFocus", 公开, 设置键盘焦点  前一个拥有焦点的窗口的句柄
    .参数 hwnd, 整数型, , 准备接收焦点的窗口的句柄

.DLL命令 WindowFromPoint, 整数型, "", "WindowFromPoint", 公开, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", 公开, 设置窗口信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 nIndex, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 dwNewLong, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 SetBkMode, 整数型, "gdi32", "SetBkMode", 公开, 指定阴影刷子、虚线画笔以及字符中的空隙的填充方式  前一个背景模式的值
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBkMode, 整数型, , 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;

.DLL命令 TransparentBlt, 逻辑型, "msimg32.dll", "TransparentBlt", 公开, 
    .参数 目标设备场景句柄, 整数型, , hdc
    .参数 目标横坐标, 整数型, , x
    .参数 目标纵坐标, 整数型, , y
    .参数 目标宽度, 整数型, , nWidth
    .参数 目标高度, 整数型, , nHeight
    .参数 源设备场景句柄, 整数型, , hSrcDC
    .参数 源横坐标, 整数型, , xSrc
    .参数 源纵坐标, 整数型, , ySrc
    .参数 源宽度, 整数型, , nSrcWidth
    .参数 源高度, 整数型, , nSrcHeight
    .参数 透明值, 整数型, , crTransparent

.DLL命令 SelectObject, 整数型, "gdi32.dll", "SelectObject", 公开, SelectObject
    .参数 场景句柄, 整数型, , hdc
    .参数 对象句柄, 整数型, , hobject

.DLL命令 CreatePen, 整数型, "gdi32", "CreatePen", 公开, 
    .参数 风格, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 颜色, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", 公开, ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 RoundRect, 整数型, "gdi32", "RoundRect", 公开, 用当前选定的画笔画一个圆角矩形，并用当前选定的刷子在其中填充。X3和Y3定义了用于生成圆角的椭圆；非零表示成功，零表示失败。
    .参数 设备场景句柄, 整数型, , hdc，用于绘图的设备场景
    .参数 启始横坐标, 整数型, , X1，对矩形左上角位置进行说明的X，Y坐标
    .参数 启始纵坐标, 整数型, , Y1，
    .参数 结束横坐标, 整数型, , X2，对矩形右下角位置进行说明的X，Y坐标
    .参数 结束纵坐标, 整数型, , Y2，
    .参数 椭圆宽度, 整数型, , X3，用于生成圆角效果的一个椭圆的宽度。取值范围从零（表示不加圆角），一直到矩形的宽度（全圆）
    .参数 椭圆高度, 整数型, , Y3，

.DLL命令 DeleteObject, 整数型, "gdi32.dll", "DeleteObject", 公开, DeleteObject
    .参数 对象句柄, 整数型, , hObject,一个GDI对象的句柄

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", 公开, 
    .参数 wFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GlobalLock, 整数型, "", "GlobalLock", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "", "GlobalUnlock", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "Ole32.dll", "CreateStreamOnHGlobal", 公开, 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "", "GlobalSize", 公开, 
    .参数 hMem, 空白型, , 

.DLL命令 lstrlenw, 整数型, "kernel32.dll", "lstrlenW", 公开, 取宽文本长度
    .参数 dqcs, 字节集, , 文本指针

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", 公开, 取内存变量地址
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GetObjectA, 整数型, "gdi32", "GetObjectA", 公开, 
    .参数 对象句柄, 整数型, , 
    .参数 数据尺寸, 整数型, , 
    .参数 属性, 位图结构_, , 

.DLL命令 CreateCompatibleDC, 整数型, "Gdi32", "CreateCompatibleDC", 公开, 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32.dll", "BitBlt", 公开, 
    .参数 目标设备场景, 整数型, , hDestDC,目标设备场景
    .参数 目标横坐标, 整数型, , x,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 目标纵坐标, 整数型, , y,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 传输图像宽度, 整数型, , nWidth,欲传输图象的宽度
    .参数 传输图像高度, 整数型, , nHeight,欲传输图象的高度
    .参数 源设备场景, 整数型, , hSrcDC,源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , xSrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 源纵坐标, 整数型, , ySrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 光栅运算方式, 整数型, , dwRop,传输过程要执行的光栅运算

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", 公开, 
    .参数 设备场景句柄, 整数型, , hdc，将要删除的设备场景

.DLL命令 GdipCreateLineBrush, 整数型, "gdiplus", "GdipCreateLineBrush", 公开, 
    .参数 Point1, pF, , 
    .参数 Point2, pF, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipFillRectangle, 整数型, "gdiplus", "GdipFillRectangle", 公开, 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream", 公开, 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipDrawImage, 整数型, "gdiplus", "GdipDrawImage", 公开, 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 

.DLL命令 GdipDrawImageRectRect, 整数型, "gdiplus", "GdipDrawImageRectRect", 公开, 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstX, 小数型, , 
    .参数 dstY, 小数型, , 
    .参数 dstWidth, 小数型, , 
    .参数 dstHeight, 小数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipGetImageHeight, 整数型, "gdiplus", "GdipGetImageHeight", 公开, 
    .参数 Image, 整数型, , 
    .参数 Height, 整数型, 传址, 

.DLL命令 GdipGetImageWidth, 整数型, "gdiplus", "GdipGetImageWidth", 公开, 
    .参数 Image, 整数型, , 
    .参数 Width, 整数型, 传址, 

.DLL命令 WriteProcessMemory, 整数型, "kernel32", "WriteProcessMemory", 公开, 在指定进程中写内存  非0成功
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 0

.DLL命令 GetCurrentProcess, 整数型, "kernel32", "GetCurrentProcess", 公开, 获取当前进程的一个伪句柄  当前进程的伪句柄

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32", "lstrcpynA", 公开, 取内存变量地址
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 
    .参数 leng, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", 公开, 将消息传答窗口函数
    .参数 lpPrevWndFunc, 字节集, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", 公开, 
    .参数 pstm, 整数型, , 
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipSetLineColors, 整数型, "gdiplus", "GdipSetLineColors", 公开, 
    .参数 Brush, 整数型, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 

.DLL命令 GdipDrawRectangle, 整数型, "GdiPlus.dll", "GdipDrawRectangle", 公开, 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 width, 小数型, , 
    .参数 height, 小数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "gdi32", "CreateCompatibleBitmap", 公开, 
    .参数 设备场景句柄, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 

.DLL命令 WindowFromDC, 整数型, "user32.dll", "WindowFromDC", 公开, 
    .参数 hdc, 整数型, , 

.DLL命令 InvalidateRect, 整数型, "user32", "InvalidateRect", 公开, 这个函数屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画  非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 待屏蔽窗口的句柄
    .参数 屏蔽矩形, rect, , RECT，用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口
    .参数 重画前删除, 整数型, , TRUE（非零）导致指定的区域在重画前先删除;

.DLL命令 GdipDisposeImage, 整数型, "gdiplus", "GdipDisposeImage", 公开, 
    .参数 image, 整数型, , 

.DLL命令 GdipDeleteGraphics, 整数型, "gdiplus", "GdipDeleteGraphics", 公开, 
    .参数 graphics, 整数型, , 

.DLL命令 GdipDeleteBrush, 整数型, "GdiPlus.dll", "GdipDeleteBrush", 公开, 
    .参数 brush, 整数型, , 

.DLL命令 GdipDeletePen, 整数型, "GdiPlus.dll", "GdipDeletePen", 公开, 
    .参数 pen, 整数型, , 

.DLL命令 GdipDeleteFont, 整数型, "gdiplus", "GdipDeleteFont", 公开, 
    .参数 curFont, 整数型, , 

.DLL命令 GdiplusStartup, 整数型, "GdiPlus.dll", "GdiplusStartup", 公开, 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdipCreateBitmapFromScan0, 整数型, "gdiplus", "GdipCreateBitmapFromScan0", 公开, 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 stride, 整数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 scan0, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipGetImageGraphicsContext, 整数型, "GdiPlus.dll", "GdipGetImageGraphicsContext", 公开, 
    .参数 image, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipCreateFromHWND, 整数型, "gdiplus", "GdipCreateFromHWND", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipCreateSolidFill, 整数型, "GdiPlus.dll", "GdipCreateSolidFill", 公开, 
    .参数 color, 整数型, , 
    .参数 brush, 整数型, 传址, 

.DLL命令 GdipCreateFontFamilyFromName, 整数型, "gdiplus", "GdipCreateFontFamilyFromName", 公开, 
    .参数 name, 字节集, , 
    .参数 fontCollection, 整数型, , 
    .参数 fontFamily, 整数型, 传址, 

.DLL命令 GdipDrawString, 整数型, "gdiplus", "GdipDrawString", 公开, 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, rectF, , 
    .参数 StringFormat, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipCreateFont, 整数型, "gdiplus", "GdipCreateFont", 公开, 
    .参数 fontFamily, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 style, 整数型, , 
    .参数 unit, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipDeleteFontFamily, 整数型, "gdiplus", "GdipDeleteFontFamily", 公开, 
    .参数 fontFamily, 整数型, , 

.DLL命令 GdipCreatePen1, 整数型, "gdiplus", "GdipCreatePen1", 公开, 
    .参数 color, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 MultiByteToWideChar, 整数型, "kernel32", "MultiByteToWideChar", 公开, 将多媒体字符串映像为通配字符串
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 文本型, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 SetWindowLongA, 子程序指针, "", "SetWindowLongA", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 子程序指针, , 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", 公开, 
    .参数 lpPrevWndFunc, 子程序指针, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", 公开, 
    .参数 token, 整数型, , 

.DLL命令 Rectangle, 整数型, "gdi32.dll", "Rectangle", 公开, Rectangle
    .参数 设备场景句柄, 整数型, , hdc
    .参数 左上角横坐标, 整数型, , X
    .参数 左上角纵坐标, 整数型, , Y
    .参数 右下角横坐标, 整数型, , X1
    .参数 右下角纵坐标, 整数型, , Y1

.DLL命令 GetStockObject, 整数型, "gdi32", "GetStockObject", 公开, 
    .参数 类型, 整数型, , 

.DLL命令 CreateRoundRectRgn, 整数型, "gdi32", "CreateRoundRectRgn", 公开, 创建一个圆角矩形，该矩形由X1，Y1-X2，Y2确定，并由X3，Y3确定的椭圆描述圆角弧度  执行成功则为区域句柄，失败则为0
    .参数 左上横坐标, 整数型, , 矩形左上角的X，Y坐标
    .参数 左上纵坐标, 整数型, , 同上
    .参数 右下横坐标, 整数型, , 矩形右下角的X，Y坐标
    .参数 右下纵坐标, 整数型, , 同上
    .参数 圆角椭圆的宽, 整数型, , 圆角椭圆的宽。其范围从0（没有圆角）到矩形宽（全圆）
    .参数 圆角椭圆的高, 整数型, , 圆角椭圆的高。其范围从0（没有圆角）到矩形高（全圆）;

.DLL命令 SetWindowRgn, 整数型, "user32", "SetWindowRgn", 公开, 这是那些很难有人注意到的对编程者来说是个巨大的宝藏的隐含的API函数中的一个。本函数允许您改变窗口的区域。<br>;    通常所有窗口都是矩形的――窗口一旦存在就含有一个矩形区域。本函数允许您放弃该区域。这意味着您可以创建圆的、星形的窗口，也可以将它分为两个或许多部分――实际上可以是任何形状  执行成功为非零值，失败为0
    .参数 窗口句柄, 整数型, , 将设置其区域的窗口
    .参数 区域, 整数型, , 将设置的区域的句柄，一旦设置了该区域，就不能使用或修改该区域句柄，也不要删除它
    .参数 自动刷新, 逻辑型, , Boolean，若为TRUE，则立即重画窗口;

.DLL命令 CombineRgn, 整数型, "gdi32", "CombineRgn", 公开, 将两个区域组合为一个新区域  下列常数之一：;    COMPLEXREGION：区域有互相交叠的边界;    SIMPLEREGION：区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：不能创建组合区域
    .参数 新区域句柄, 整数型, , 包含组合结果的区域句柄
    .参数 源区域1, 整数型, , 源区域1
    .参数 源区域2, 整数型, , 源区域2
    .参数 组合方式, 整数型, , 组合两区域的方法。可设为下述常数RGN_ANDhDestRgn被设置为两个源区域的交集RGN_COPYhDestRgn被设置为hSrcRgn1的拷贝RGN_DIFFhDestRgn被设置为hSrcRgn1中与hSrcRgn2不相交的部分RGN_ORhDestRgn被设置为两个区域的并集RGN_XORhDestRgn被设置为除两个源区域OR之外的部分;

.DLL命令 CreateRectRgn, 整数型, "gdi32", "CreateRectRgn", 公开, 创建一个由点X1，Y1和X2，Y2描述的矩形区域  执行成功为区域句柄，失败则为零
    .参数 左上横坐标, 整数型, , 矩形左上角X，Y坐标
    .参数 左上纵坐标, 整数型, , 同上
    .参数 右下横坐标, 整数型, , 矩形右下角X，Y坐标;
    .参数 右下纵坐标, 整数型, , 同上;

.DLL命令 CreateSolidBrush, 整数型, "gdi32", "CreateSolidBrush", 公开, 用纯色创建一个刷子　如执行成功，返回新刷子的一个句柄；否则返回零
    .参数 crColor, 整数型, , 数字的RGB彩色;  

.DLL命令 复制内存_复制位图信息头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, BITMAPINFOHEADER, , 
    .参数 len, 整数型, , 

.DLL命令 复制内存_复制位图文件头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, 文件头信息_, , 
    .参数 len, 整数型, , 

.DLL命令 复制内存_字节集到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, 字节型, 传址, 
    .参数 len, 整数型, , 

.DLL命令 MultiByteToWideChar_utf_8, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 GdiTransparentBlt, 整数型, "gdi32", "", 公开, 
    .参数 hdc1, 整数型, , 
    .参数 X1, 整数型, , 
    .参数 Y1, 整数型, , 
    .参数 W1, 整数型, , 
    .参数 H1, 整数型, , 
    .参数 Hdc2, 整数型, , 
    .参数 X2, 整数型, , 
    .参数 Y2, 整数型, , 
    .参数 W2, 整数型, , 
    .参数 H2, 整数型, , 
    .参数 Color, 整数型, , 

.DLL命令 GetDC, 整数型, "user32", "GetDC", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 SetLayeredWindowAttributes, 逻辑型, "", "SetLayeredWindowAttributes", 公开, 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 LoadIcon, 整数型, "", "LoadIconA", 公开, 
    .参数 模块句柄, 整数型, , 
    .参数 图标句柄, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 整数型, , 

.DLL命令 LoadCursor, 整数型, "", "LoadCursorA", 公开, 
    .参数 模块句柄, 整数型, , 
    .参数 鼠标句柄, 整数型, , 

.DLL命令 GdipSetTextRenderingHint, 整数型, "GdiPlus.dll", "GdipSetTextRenderingHint", 公开, 
    .参数 graphics, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", 公开, 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", 公开, , 向窗口发送消息
    .参数 lpMsg, MSG, , 

.DLL命令 TranslateMessage, 整数型, "user32", "TranslateMessage", 公开, , 转换消息
    .参数 lpMsg, MSG, , 

.DLL命令 RegisterClassEx, 空白型, "user32", "RegisterClassExA", 公开, 
    .参数 pcWndClassEx, WNDCLASSEX, , 

.DLL命令 GetMessage, 整数型, "user32", "GetMessageA", 公开, , 从线索消息队列中返回一条消息
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 

.DLL命令 PostQuitMessage, 空白型, "user32", "PostQuitMessage", 公开, 通知WINDOWS线索将中断
    .参数 nExitCode, 整数型, , 

.DLL命令 DefWindowProc, 整数型, "user32", "DefWindowProcA", 公开, 调用缺省窗口过程
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetDriverModuleHandle, 整数型, "winmm.dll", "GetDriverModuleHandle", 公开, 返回驱动程序模块例子句柄
    .参数 hDriver, 整数型, , 

.DLL命令 ShowWindow, 整数型, "user32", "ShowWindow", 公开, ,
    .参数 hwnd, 整数型, , 
    .参数 nCmdShow, 整数型, , 

.DLL命令 EndPaint, 整数型, "user32", "EndPaint", 公开, 在指定窗口中标记图画结尾标志
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 BeginPaint, 整数型, "user32", "BeginPaint", 公开, 准备一个画图窗
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 GdipCreateFromHDC, 整数型, "gdiplus", "GdipCreateFromHDC", 公开, 
    .参数 hDC, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GetParent, 整数型, "user32", "GetParent", 公开, 判断指定窗口的父窗口  父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄;

.DLL命令 ScreenToClient, 整数型, "user32", "ScreenToClient", 公开, 判断屏幕上一个指定点的客户区坐标  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 一个窗口的句柄，该窗口定义了要使用的客户区坐标系统
    .参数 lpPoint, pL, , POINTAPI，屏幕坐标系统中包含了屏幕点的结构。这个函数会随同相应的客户区坐标（由hwnd决定）载入结构;

.DLL命令 TextOut, 整数型, "gdi32", "TextOutA", 公开, 文本绘图函数。也请参考SetTextAlign  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 x, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 y, 整数型, , 同上
    .参数 lpString, 文本型, , 欲描绘的字串
    .参数 nCount, 整数型, , 字串中要描绘的字符数量;

.DLL命令 GdipCreateBitmapFromGraphics, 整数型, "gdiplus", "GdipCreateBitmapFromGraphics", 公开, 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromGdiDib, 整数型, "gdiplus", "GdipCreateBitmapFromGdiDib", 公开, 
    .参数 gdiBitmapInfo, 整数型, , 
    .参数 gdiBitmapData, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipAddPathArc, 整数型, "gdiplus", "GdipAddPathArc", 公开, 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 小数型
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipCreatePath, 整数型, "gdiplus", "GdipCreatePath", 公开, 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipClosePathFigure, 整数型, "gdiplus", "GdipClosePathFigure", 公开, 
    .参数 path, 整数型, , 

.DLL命令 GdipFillPath, 整数型, "gdiplus", "GdipFillPath", 公开, 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipDeletePath, 整数型, "gdiplus", "GdipDeletePath", 公开, 
    .参数 path, 整数型, , 

.DLL命令 UpdateWindow, 整数型, "user32", "UpdateWindow", 公开, ,
    .参数 hwnd, 整数型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (真)

.类模块 随心所欲_列表, , , 

.程序集变量 窗口回调, 字节集, , , 
.程序集变量 列表回调, 字节集, , , 
.程序集变量 全局, 全局信息, , , 
.程序集变量 项目, 项目信息, , "0", 
.程序集变量 子类化_列表, 子类化, , , 
.程序集变量 子类化_父窗口, 子类化, , , 
.程序集变量 分组项目, 分组成员, , "0", 
.程序集变量 实时位置, 整数型, , , 
.程序集变量 上个范围, 自建矩形, , , 
.程序集变量 上个图片, 整数型, , , 
.程序集变量 分组删除, 逻辑型, , , 
.程序集变量 分组插入, 逻辑型, , , 
.程序集变量 图片载入信息, 字节集, , "0", 
.程序集变量 自定义高度, 逻辑型, , , 
.程序集变量 GDI, 整数型, , , 
.程序集变量 画图回调, 整数型, , , 
.程序集变量 高CPU移动回调, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 _父窗口_消息处理, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 消息, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 绘制信息, 绘制信息, , , 
.局部变量 最前表项, 整数型, , , 


.判断开始 (等于 (消息, 43))
    
    RtlMoveMemory_I2D (绘制信息, 参数二, 44)
    .判断开始 (并且 (等于 (绘制信息.控件类型, 2), 等于 (绘制信息.控件窗口句柄, 全局.句柄)))
        .如果 (等于 (绘制信息.菜单项ID, 0))
            赋值 (最前表项, SendMessage (全局.句柄, 425, 0, 相加 (1, 相乘 (1, 65536))))
            .如果 (等于 (最前表项, 0))
                重绘 (绘制信息.菜单项ID)
            .否则
                
            .如果结束
            
        .否则
            重绘 (绘制信息.菜单项ID)
        .如果结束
        
        
    .默认
        返回 (子类化_父窗口.调用旧窗口过程 (窗口句柄, 消息, 参数一, 参数二))
    .判断结束
    
.默认
    返回 (子类化_父窗口.调用旧窗口过程 (窗口句柄, 消息, 参数一, 参数二))
.判断结束
返回 (1)


.子程序 _列表框_消息处理, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 消息, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 测试矩形, 自建矩形, , , 
.局部变量 鼠标动作信息, 鼠标动作结构, , , 
.局部变量 原表项矩形, rect, , , 
.局部变量 i, 整数型, , , 
.局部变量 分组中位置, 整数型, , , 
.局部变量 处于分组, 整数型, , , 
.局部变量 是否在矩形, 逻辑型, , , 
.局部变量 现行项目, 整数型, , , 

.判断开始 (等于 (消息, 20))
    重绘 (65537)
.判断 (等于 (消息, 512))
    赋值 (全局.现行位置, SendMessage (全局.句柄, 425, 0, 相加 (取高位 (参数二), 相乘 (取低位 (参数二), 65536))))
    .判断开始 (小于 (全局.现行位置, 相减 (全局.项目数量, 1)))
        列表_鼠标移动 (取高位 (参数二), 取低位 (参数二), 全局.现行位置)
    .判断 (等于 (全局.现行位置, 相减 (全局.项目数量, 1)))
        .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0)))
            .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
                .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                    赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
                    画项目 (全局.句柄, 全局.高亮, 2)
                    赋值 (实时位置, 0)
                    赋值 (上个图片, 0)
                .否则
                    
                .如果结束
                
            .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
                .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                    赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
                    画项目 (全局.句柄, 全局.焦点, 3)
                    赋值 (实时位置, 0)
                    赋值 (上个图片, 0)
                .否则
                    
                .如果结束
                
            .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
                .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
                    赋值 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
                    画项目 (全局.句柄, 全局.热点, 1)
                    赋值 (实时位置, 0)
                    赋值 (上个图片, 0)
                .否则
                    
                .如果结束
                
            .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
                .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
                    赋值 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
                    画项目 (全局.句柄, 全局.热点, 1)
                    赋值 (实时位置, 0)
                    赋值 (上个图片, 0)
                .否则
                    
                .如果结束
                
            .默认
                
            .判断结束
            
        .否则
            
        .如果结束
        
        鼠标被移动 (-1, -1, 65536)
        赋值 (全局.现行位置, 65536)
        
        .如果 (大于 (全局.回调.移动回调, 0))
            动态执行子程序 (全局.回调.移动回调, 0, 65537, 0, 0, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
    .默认
        
    .判断结束
    
.判断 (等于 (消息, 513))
    赋值 (现行项目, 相加 (全局.现行位置, 1))
    .判断开始 (并且 (不等于 (全局.现行位置, 全局.焦点), 不等于 (全局.现行位置, 全局.高亮), 小于 (全局.现行位置, 相减 (全局.项目数量, 1)), 不等于 (全局.现行位置, 全局.热点), 等于 (项目 [现行项目], 是否分组, 假)))
        .判断开始 (等于 (全局.状态.是否左键高亮, 真))
            赋值 (处于分组, 取项目所在分组 (全局.现行位置))
            .如果 (大于 (分组项目 [1].分组位置, -1))
                赋值 (分组中位置, 相减 (全局.现行位置, 分组项目 [处于分组], 分组位置))
            .否则
                赋值 (分组中位置, 现行项目)
            .如果结束
            
            画项目 (全局.句柄, 全局.高亮, 0)
            画项目 (全局.句柄, 全局.现行位置, 2)
            赋值 (全局.高亮, 全局.现行位置)
            动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_高亮, 上个图片, 0, 0, 0, 0, 0, 0)
        .判断 (等于 (全局.状态.是否左键焦点, 真))
            .如果 (大于 (全局.焦点, -1))
                SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
            .否则
                
            .如果结束
            
            SendMessage (全局.句柄, 416, 全局.现行位置, 全局.焦点高度)
            赋值 (全局.焦点, 全局.现行位置)
            .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                赋值 (处于分组, 取项目所在分组 (全局.现行位置))
                .如果 (大于 (分组项目 [1].分组位置, -1))
                    赋值 (分组中位置, 相减 (全局.现行位置, 分组项目 [处于分组], 分组位置))
                .否则
                    赋值 (分组中位置, 现行项目)
                .如果结束
                
                动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_焦点, 上个图片, 0, 0, 0, 0, 0, 0)
            .否则
                
            .如果结束
            
            重绘 (65536)
        .默认
            
        .判断结束
        
        
        获取焦点 ()
    .判断 (或者 (等于 (全局.现行位置, 全局.焦点), 等于 (全局.现行位置, 全局.高亮), 并且 (等于 (全局.现行位置, 全局.热点), 等于 (项目 [现行项目], 是否分组, 假))))
        赋值 (处于分组, 取项目所在分组 (全局.现行位置))
        .如果 (大于 (分组项目 [1].分组位置, -1))
            赋值 (分组中位置, 相减 (全局.现行位置, 分组项目 [处于分组], 分组位置))
        .否则
            赋值 (分组中位置, 现行项目)
        .如果结束
        
        SendMessage_RECT (全局.句柄, 408, 全局.现行位置, 原表项矩形)
        .判断开始 (并且 (等于 (全局.现行位置, 全局.焦点), 大于 (项目 [现行项目], 图片.焦点.数量, 0)))
            赋值 (是否在矩形, 假)
            .计次循环首 (项目 [现行项目], 图片.焦点.数量, i)
                赋值 (测试矩形, 项目 [现行项目], 图片.焦点.图片范围 [i])
                赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.焦点.图片范围 [i], 顶边))
                .如果 (等于 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形), 真))
                    .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_焦点, i, 0, 0, 0, 0, 0, 0)
                    .否则
                        
                    .如果结束
                    
                    赋值 (是否在矩形, 真)
                    跳出循环 ()
                .否则
                    
                .如果结束
                
            .计次循环尾 ()
            .如果真 (并且 (等于 (是否在矩形, 假), 大于 (到整数 (全局.回调.左击回调), 0)))
                动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
            .如果真结束
            
        .判断 (并且 (等于 (全局.现行位置, 全局.高亮), 大于 (项目 [现行项目], 图片.高亮.数量, 0)))
            赋值 (是否在矩形, 假)
            .计次循环首 (项目 [现行项目], 图片.高亮.数量, i)
                赋值 (测试矩形, 项目 [现行项目], 图片.高亮.图片范围 [i])
                赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.高亮.图片范围 [i], 顶边))
                .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                    .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_高亮, i, 0, 0, 0, 0, 0, 0)
                    .否则
                        
                    .如果结束
                    
                    赋值 (是否在矩形, 真)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (并且 (等于 (是否在矩形, 假), 大于 (到整数 (全局.回调.左击回调), 0)))
                动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
            .如果真结束
            
        .判断 (并且 (等于 (全局.现行位置, 全局.热点), 等于 (项目 [现行项目], 是否分组, 假)))
            .判断开始 (大于 (项目 [现行项目], 图片.普通点燃.数量, 0))
                .计次循环首 (项目 [现行项目], 图片.普通点燃.数量, i)
                    赋值 (测试矩形, 项目 [现行项目], 图片.普通点燃.图片范围 [i])
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.普通点燃.图片范围 [i], 顶边))
                    .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                        .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                            动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_普通点燃, i, 0, 0, 0, 0, 0, 0)
                        .否则
                            
                        .如果结束
                        
                        赋值 (是否在矩形, 真)
                        跳出循环 ()
                    .如果真结束
                    赋值 (是否在矩形, 假)
                .计次循环尾 ()
                
                .如果 (等于 (是否在矩形, 假))
                    .判断开始 (并且 (等于 (全局.状态.是否左键高亮, 真), 不等于 (全局.热点, 全局.焦点)))
                        画项目 (全局.句柄, 全局.高亮, 0)
                        画项目 (全局.句柄, 全局.现行位置, 2)
                        赋值 (全局.高亮, 全局.现行位置)
                        赋值 (实时位置, #状态_高亮)
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
                    .判断 (等于 (全局.状态.是否左键焦点, 真))
                        .如果 (大于 (全局.焦点, -1))
                            SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
                        .否则
                            
                        .如果结束
                        
                        SendMessage (全局.句柄, 416, 全局.现行位置, 全局.焦点高度)
                        赋值 (全局.焦点, 全局.现行位置)
                        .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                            动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
                        .否则
                            
                        .如果结束
                        
                        重绘 (65536)
                    .默认
                        .如果 (大于 (全局.回调.左击回调, 0))
                            动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, 0, 0, 0, 0, 0, 0, 0, 0)
                        .否则
                            
                        .如果结束
                        
                    .判断结束
                    
                    获取焦点 ()
                .否则
                    
                .如果结束
                
            .判断 (等于 (项目 [现行项目], 图片.普通点燃.数量, 0))
                
                .判断开始 (并且 (等于 (全局.状态.是否左键高亮, 真), 不等于 (全局.热点, 全局.焦点)))
                    画项目 (全局.句柄, 全局.高亮, 0)
                    画项目 (全局.句柄, 全局.现行位置, 2)
                    赋值 (全局.高亮, 全局.现行位置)
                    赋值 (实时位置, #状态_高亮)
                    动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
                .判断 (并且 (等于 (全局.状态.是否左键焦点, 真), 不等于 (全局.热点, 全局.焦点)))
                    .如果 (大于 (全局.焦点, -1))
                        SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
                    .否则
                        
                    .如果结束
                    
                    SendMessage (全局.句柄, 416, 全局.现行位置, 全局.焦点高度)
                    赋值 (全局.焦点, 全局.现行位置)
                    .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
                    .否则
                        
                    .如果结束
                    
                    重绘 (65536)
                .默认
                    .如果 (大于 (全局.回调.左击回调, 0))
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, 0, 0, 0, 0, 0, 0, 0, 0)
                    .否则
                        
                    .如果结束
                    
                .判断结束
                
            .默认
                
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .判断 (并且 (小于 (全局.现行位置, 相减 (全局.项目数量, 1)), 等于 (项目 [现行项目], 是否分组, 真)))
        .判断开始 (大于 (项目 [现行项目], 图片.分组点燃.数量, 0))
            赋值 (是否在矩形, 假)
            .计次循环首 (项目 [现行项目], 图片.分组点燃.数量, i)
                赋值 (测试矩形, 项目 [现行项目], 图片.分组点燃.图片范围 [i])
                赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.分组点燃.图片范围 [i], 顶边))
                .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                    .如果 (大于 (到整数 (全局.回调.左击回调), 0))
                        动态执行子程序 (全局.回调.左击回调, 处于分组, 分组中位置, #状态_分组点燃, i, 0, 0, 0, 0, 0, 0)
                    .否则
                        
                    .如果结束
                    
                    
                    赋值 (是否在矩形, 真)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果 (等于 (是否在矩形, 假))
                .判断开始 (等于 (项目 [现行项目], 是否打开, 真))
                    关闭组项 (全局.现行位置)
                .默认
                    打开组项 (全局.现行位置)
                .判断结束
                
            .否则
                
            .如果结束
            
        .判断 (等于 (项目 [现行项目], 图片.分组点燃.数量, 0))
            .判断开始 (等于 (项目 [现行项目], 是否打开, 真))
                关闭组项 (全局.现行位置)
            .默认
                打开组项 (全局.现行位置)
            .判断结束
            
        .默认
            
        .判断结束
        
        
        
    .默认
        
    .判断结束
    
    获取焦点 ()
.判断 (等于 (消息, 514))
    .如果 (大于 (到整数 (全局.回调.左击释放), 0))
        动态执行子程序 (全局.回调.左击释放, 全局.现行位置, 取高位 (参数二), 取低位 (参数二), 0, 0, 0, 0, 0, 0, 0)
    .否则
        
    .如果结束
    
.判断 (等于 (消息, 515))
    赋值 (现行项目, 相加 (全局.现行位置, 1))
    .如果 (并且 (不等于 (全局.现行位置, 全局.焦点), 小于 (全局.现行位置, 相减 (全局.项目数量, 1)), 等于 (项目 [现行项目], 是否分组, 假), 等于 (全局.状态.是否双击焦点, 真)))
        .如果 (大于 (全局.焦点, -1))
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
        .否则
            
        .如果结束
        
        .判断开始 (等于 (全局.现行位置, 全局.高亮))
            赋值 (全局.高亮, -1)
        .默认
            
        .判断结束
        
        SendMessage (全局.句柄, 416, 全局.现行位置, 全局.焦点高度)
        赋值 (全局.焦点, 全局.现行位置)
        .如果 (大于 (到整数 (全局.回调.双击回调), 0))
            
            赋值 (处于分组, 取项目所在分组 (全局.现行位置))
            .如果 (大于 (分组项目 [1].分组位置, -1))
                赋值 (分组中位置, 相减 (全局.现行位置, 分组项目 [处于分组], 分组位置))
            .否则
                赋值 (分组中位置, 现行项目)
            .如果结束
            
            动态执行子程序 (全局.回调.双击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
        重绘 (65536)
        获取焦点 ()
    .否则
        
    .如果结束
    
.判断 (等于 (消息, 516))
    赋值 (现行项目, 相加 (全局.现行位置, 1))
    .判断开始 (并且 (不等于 (全局.现行位置, 全局.焦点), 不等于 (全局.现行位置, 全局.高亮), 小于 (全局.现行位置, 相减 (全局.项目数量, 1)), 不等于 (全局.现行位置, 全局.热点)))
        
    .判断 (大于 (到整数 (全局.回调.右击回调), 0))
        赋值 (处于分组, 取项目所在分组 (全局.现行位置))
        .如果 (大于 (分组项目 [1].分组位置, -1))
            赋值 (分组中位置, 相减 (全局.现行位置, 分组项目 [处于分组], 分组位置))
        .否则
            赋值 (分组中位置, 现行项目)
        .如果结束
        
        SendMessage_RECT (全局.句柄, 408, 全局.现行位置, 原表项矩形)
        .判断开始 (等于 (全局.现行位置, 全局.焦点))
            .判断开始 (大于 (项目 [现行项目], 图片.焦点.数量, 0))
                .计次循环首 (项目 [现行项目], 图片.焦点.数量, i)
                    赋值 (测试矩形, 项目 [现行项目], 图片.焦点.图片范围 [i])
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.焦点.图片范围 [i], 顶边))
                    .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                        动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_焦点, i, 0, 0, 0, 0, 0, 0)
                        赋值 (是否在矩形, 真)
                        跳出循环 ()
                    .如果真结束
                    赋值 (是否在矩形, 假)
                .计次循环尾 ()
                .如果 (等于 (是否在矩形, 假))
                    动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
                .否则
                    
                .如果结束
                
            .默认
                
                动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
            .判断结束
            
            
        .判断 (等于 (全局.现行位置, 全局.高亮))
            .如果 (大于 (项目 [现行项目], 图片.高亮.数量, 0))
                .计次循环首 (项目 [现行项目], 图片.高亮.数量, i)
                    赋值 (测试矩形, 项目 [现行项目], 图片.高亮.图片范围 [i])
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.高亮.图片范围 [i], 顶边))
                    .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                        动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_高亮, i, 0, 0, 0, 0, 0, 0)
                        赋值 (是否在矩形, 真)
                        跳出循环 ()
                    .如果真结束
                    赋值 (是否在矩形, 假)
                .计次循环尾 ()
                .如果 (等于 (是否在矩形, 假))
                    动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
                .否则
                    
                .如果结束
                
            .否则
                动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
            .如果结束
            
            
        .判断 (并且 (等于 (全局.现行位置, 全局.热点), 等于 (项目 [现行项目], 是否分组, 真)))
            
            .判断开始 (大于 (项目 [现行项目], 图片.分组点燃.数量, 0))
                .计次循环首 (项目 [现行项目], 图片.分组点燃.数量, i)
                    赋值 (测试矩形, 项目 [现行项目], 图片.分组点燃.图片范围 [i])
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.分组点燃.图片范围 [i], 顶边))
                    .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                        动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_分组点燃, i, 0, 0, 0, 0, 0, 0)
                        赋值 (是否在矩形, 真)
                        跳出循环 ()
                    .如果真结束
                    赋值 (是否在矩形, 假)
                .计次循环尾 ()
                .如果 (等于 (是否在矩形, 假))
                    动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_分组点燃, 0, 0, 0, 0, 0, 0, 0)
                .否则
                    
                .如果结束
                
            .默认
                动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_分组点燃, 0, 0, 0, 0, 0, 0, 0)
            .判断结束
            
        .判断 (并且 (等于 (全局.现行位置, 全局.热点), 等于 (项目 [现行项目], 是否分组, 假)))
            .判断开始 (大于 (项目 [现行项目], 图片.普通点燃.数量, 0))
                .计次循环首 (项目 [现行项目], 图片.普通点燃.数量, i)
                    赋值 (测试矩形, 项目 [现行项目], 图片.普通点燃.图片范围 [i])
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [现行项目], 图片.普通点燃.图片范围 [i], 顶边))
                    .如果真 (点是否在矩形内 (取高位 (参数二), 取低位 (参数二), 测试矩形))
                        动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_普通点燃, i, 0, 0, 0, 0, 0, 0)
                        赋值 (是否在矩形, 真)
                        跳出循环 ()
                    .如果真结束
                    赋值 (是否在矩形, 假)
                .计次循环尾 ()
                
                .如果 (等于 (是否在矩形, 假))
                    动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_普通点燃, 0, 0, 0, 0, 0, 0, 0)
                .否则
                    
                .如果结束
                
            .默认
                动态执行子程序 (全局.回调.右击回调, 处于分组, 分组中位置, #状态_普通点燃, 0, 0, 0, 0, 0, 0, 0)
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
.判断 (等于 (消息, 675))
    赋值 (现行项目, 相加 (全局.现行位置, 1))
    .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于 (上个图片, 0), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
        .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
            赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
            画项目 (全局.句柄, 全局.高亮, 2)
        .否则
            
        .如果结束
        
    .判断 (并且 (等于 (实时位置, #状态_焦点), 大于 (上个图片, 0), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
        .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
            赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
            画项目 (全局.句柄, 全局.焦点, 3)
        .否则
            
        .如果结束
        
    .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (全局.热点, -1), 大于 (上个图片, 0), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
        .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
            赋值 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
            画项目 (全局.句柄, 全局.热点, 1)
        .否则
            
        .如果结束
        
    .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (上个图片, 0), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.数量, 上个图片), 等于 (全局.是否图片点亮, 真)))
        .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
            赋值 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
            画项目 (全局.句柄, 全局.热点, 1)
        .否则
            
        .如果结束
        
    .默认
        
    .判断结束
    
    赋值 (实时位置, 0)
    赋值 (上个图片, 0)
    
    鼠标被移动 (-1, -1, 65536)
    赋值 (全局.现行位置, 65536)
    .如果 (大于 (全局.回调.移动回调, 0))
        动态执行子程序 (全局.回调.移动回调, 0, 65537, 0, 0, 0, 0, 0, 0, 0, 0)
    .否则
        
    .如果结束
    
.判断 (等于 (消息, 131))
    
    
.默认
    返回 (子类化_列表.调用旧窗口过程 (窗口句柄, 消息, 参数一, 参数二))
.判断结束
返回 (1)

.子程序 鼠标被移动, 空白型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 现行项, 整数型, , 

.如果真 (等于 (现行项, 全局.热点)) ' 判断是否已经点燃了
    返回 ()
.如果真结束
.如果真 (不等于 (全局.热点, -1)) ' 如果已经有点燃表项
    .判断开始 (并且 (不等于 (全局.热点, 全局.焦点), 不等于 (全局.热点, 全局.高亮)))
        画项目 (全局.句柄, 全局.热点, 0)
    .判断 (等于 (全局.热点, 全局.焦点))
        画项目 (全局.句柄, 全局.热点, 3)
    .判断 (等于 (全局.热点, 全局.高亮))
        画项目 (全局.句柄, 全局.热点, 2)
    .默认
        
    .判断结束
    
.如果真结束
.如果真 (并且 (不等于 (现行项, 全局.焦点), 不等于 (现行项, 全局.高亮))) ' 如果现行选中项和鼠标处表项不是同一个
    .如果 (不等于 (现行项, 65536))
        画项目 (全局.句柄, 现行项, 1) ' 就让其点燃..
    .否则
        
    .如果结束
    
.如果真结束
 ' 赋值 (全局.热点, 选择 (等于 (现行项, 65536), -1, 现行项)) ' 保存一下点燃项ID


.子程序 重绘, 空白型, , 空为全部，65536为可见内
.参数 需要绘制的位置, 整数型, 可空, 

.局部变量 k, 整数型, , , 
.局部变量 g, 整数型, , , 
.局部变量 d, 整数型, , , 
.局部变量 ntx, 整数型, , , 
.局部变量 nt, 整数型, , , 
.局部变量 s, 整数型, , , 
.局部变量 wt, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 原表项矩形, rect, , , 
.局部变量 临时矩形, rect, , , 
.局部变量 现行热点, 整数型, , , 
.局部变量 上个热点, 整数型, , , 
.局部变量 最前表项, 整数型, , , 
.局部变量 最后表项, 整数型, , , 
.局部变量 HDC, 整数型, , , 

.如果真 (大于 (全局.句柄, 0))
    .判断开始 (是否为空 (需要绘制的位置))
        GetWindowRect (全局.句柄, 原表项矩形)
        赋值 (k, 原表项矩形.Width)
        赋值 (g, 原表项矩形.Height)
        SendMessage_RECT (全局.句柄, 408, 相减 (取项目数 (), 1), 原表项矩形)
        赋值 (d, 原表项矩形.Height)
        赋值 (临时矩形.x, 0)
        赋值 (临时矩形.y, d)
        赋值 (临时矩形.Width, k)
        赋值 (临时矩形.Height, g)
        赋值 (ntx, 创建位图 (临时矩形.Width, 临时矩形.Height))
        赋值 (nt, 创建图形_自图像 (ntx))
        赋值 (s, 创建纯色刷子 (RGB到ARGB (全局.背景颜色, 255)))
        图形_填充矩形 (nt, s, 0, 0, 临时矩形.Width, 临时矩形.Height)
        赋值 (wt, 创建图形_自句柄 (全局.句柄))
        图形_画图像 (wt, ntx, 临时矩形.x, 临时矩形.y)
        销毁图像 (ntx)
        销毁图形 (nt)
        销毁图形 (wt)
        销毁纯色刷子 (s)
        .计次循环首 (取项目数 (), i)
            处理事件 ()
            重绘 (相减 (i, 1))
        .计次循环尾 ()
        
        
    .判断 (等于 (需要绘制的位置, 65536))
        赋值 (上个热点, 全局.焦点)
        赋值 (现行热点, 取现行项目 ())
        赋值 (最前表项, 相减 (SendMessage (全局.句柄, 425, 0, 相加 (1, 相乘 (1, 65536))), 1))
        赋值 (最后表项, 相加 (SendMessage (全局.句柄, 425, 0, 相加 (1, 相乘 (相减 (全局.范围.高度, 1), 65536))), 1))
        .计次循环首 (相加 (相减 (最后表项, 最前表项), 1), i)
            处理事件 ()
            重绘 (相减 (相加 (最前表项, i), 1))
        .计次循环尾 ()
        重绘 (上个热点)
    .判断 (并且 (小于 (需要绘制的位置, 65535), 大于 (需要绘制的位置, -1), 小于 (需要绘制的位置, 全局.项目数量)))
        .如果 (等于 (项目 [相加 (需要绘制的位置, 1)].是否隐藏, 假))
            .判断开始 (等于 (需要绘制的位置, 全局.焦点))
                画项目 (全局.句柄, 需要绘制的位置, 3)
            .判断 (等于 (需要绘制的位置, 全局.高亮))
                画项目 (全局.句柄, 需要绘制的位置, 2)
            .判断 (等于 (需要绘制的位置, 取项目数 ()))
                
            .判断 (小于 (需要绘制的位置, 最前表项))
                
            .默认
                画项目 (全局.句柄, 需要绘制的位置, 选择 (等于 (全局.热点, 需要绘制的位置), 1, 0))
            .判断结束
            
        .否则
            
        .如果结束
        
        
        
    .判断 (等于 (需要绘制的位置, 65537))
        GetWindowRect (全局.句柄, 原表项矩形)
        赋值 (k, 原表项矩形.Width)
        赋值 (g, 原表项矩形.Height)
        SendMessage_RECT (全局.句柄, 408, 相减 (取项目数 (), 1), 原表项矩形)
        赋值 (d, 原表项矩形.Height)
        赋值 (临时矩形.x, 0)
        赋值 (临时矩形.y, d)
        赋值 (临时矩形.Width, k)
        赋值 (临时矩形.Height, g)
        赋值 (ntx, 创建位图 (临时矩形.Width, 临时矩形.Height))
        赋值 (nt, 创建图形_自图像 (ntx))
        赋值 (s, 创建纯色刷子 (RGB到ARGB (全局.背景颜色, 255)))
        图形_填充矩形 (nt, s, 0, 0, 临时矩形.Width, 临时矩形.Height)
        赋值 (wt, 创建图形_自句柄 (全局.句柄))
        图形_画图像 (wt, ntx, 临时矩形.x, 临时矩形.y)
        销毁图像 (ntx)
        销毁图形 (nt)
        销毁图形 (wt)
        销毁纯色刷子 (s)
    .默认
        
    .判断结束
    
.如果真结束


.子程序 画项目, 空白型, , 
.参数 句柄, 整数型, , 
.参数 项目索引, 整数型, , 
.参数 类型, 整数型, , 0-正常；1-热点；2-高亮；3-焦点

.局部变量 原表项矩形, rect, , , 
.局部变量 临时矩形, 自建矩形, , , 
.局部变量 临时项目, 项目信息, , , 
.局部变量 范围, 自建矩形, , , 
.局部变量 图片, 图片信息, , , 
.局部变量 i, 整数型, , , 
.局部变量 文本, 文本信息, , , 
.局部变量 hdc, 整数型, , , 
.局部变量 mdc, 整数型, , , 
.局部变量 字体句柄, 整数型, , , 
.局部变量 刷子句柄, 整数型, , , 
.局部变量 外部, 整数型, , , 
.局部变量 画笔, 整数型, , , 
.局部变量 临时rcet, 自建矩形, , , 
.局部变量 临时底图, 底图信息, , , 
.局部变量 临时边框, 边框信息, , , 

.如果真 (或者 (小于 (项目索引, 0), 大于 (项目索引, 相减 (全局.项目数量, 1))))
    返回 ()
.如果真结束
赋值 (临时项目, 项目 [相加 (项目索引, 1)])


SendMessage_RECT (句柄, 408, 项目索引, 原表项矩形)
赋值 (临时矩形.左边, 0)
赋值 (临时矩形.顶边, 0)
赋值 (临时矩形.宽度, 相减 (原表项矩形.Width, 原表项矩形.x))
赋值 (临时矩形.高度, 相减 (原表项矩形.Height, 原表项矩形.y))
赋值 (hdc, 创建位图 (临时矩形.宽度, 临时矩形.高度))
赋值 (mdc, 创建图形_自图像 (hdc))
GdipSetTextRenderingHint (mdc, 3)
.判断开始 (等于 (类型, 0))
    .判断开始 (并且 (等于 (临时项目.是否分组, 真), 大于 (临时项目.底图.分组静止.终点颜色, -1)))
        赋值 (临时底图, 临时项目.底图.分组静止)
        .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
            .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
    .判断 (等于 (临时项目.是否分组, 假))
        .判断开始 (并且 (等于 (临时项目.是否禁止, 真), 大于 (临时项目.底图.禁止.终点颜色, -1)))
            赋值 (临时底图, 临时项目.底图.禁止)
            .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
                .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                    图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
                .否则
                    
                .如果结束
                
            .默认
                
            .判断结束
            
            列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
        .判断 (并且 (等于 (临时项目.是否禁止, 假), 大于 (临时项目.底图.普通静止.终点颜色, -1)))
            赋值 (临时底图, 临时项目.底图.普通静止)
            .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
                .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                    图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
                .否则
                    
                .如果结束
                
            .默认
                
            .判断结束
            
            
            列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
        .默认
            列表底图 (mdc, 1, RGB到ARGB (全局.背景颜色, 临时项目.底图.普通静止.透明度), RGB到ARGB (全局.背景颜色, 临时项目.底图.普通静止.透明度), 临时矩形.宽度, 临时矩形.高度)
        .判断结束
        
    .默认
        列表底图 (mdc, 1, RGB到ARGB (全局.背景颜色, 临时项目.底图.普通静止.透明度), RGB到ARGB (全局.背景颜色, 临时项目.底图.普通静止.透明度), 临时矩形.宽度, 临时矩形.高度)
    .判断结束
    
    
    .判断开始 (等于 (临时项目.是否分组, 真))
        赋值 (临时边框, 全局.边框.分组静止)
        .如果 (等于 (临时边框.是否划痕, 真))
            点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
        .否则
            
        .如果结束
        
    .判断 (等于 (临时项目.是否分组, 假))
        .判断开始 (等于 (临时项目.是否禁止, 真))
            赋值 (临时边框, 全局.边框.禁止)
            .如果 (等于 (临时边框.是否划痕, 真))
                点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
            .否则
                
            .如果结束
            
        .判断 (等于 (临时项目.是否禁止, 假))
            赋值 (临时边框, 全局.边框.普通静止)
            .如果 (等于 (临时边框.是否划痕, 真))
                点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
    .如果 (等于 (临时项目.是否禁止, 假))
        .判断开始 (等于 (临时项目.是否分组, 真))
            .如果真 (并且 (不等于 (全局.分组图片.关闭图片, {  }), 不等于 (全局.分组图片.打开图片, {  })))
                赋值 (范围, 全局.分组图片.范围)
                .如果 (等于 (临时项目.是否打开, 假))
                    图形_画图片 (mdc, 全局.分组图片.关闭图片, 范围)
                .否则
                    图形_画图片 (mdc, 全局.分组图片.打开图片, 范围)
                .如果结束
                
            .如果真结束
            
            
            赋值 (图片, 临时项目.图片.分组静止)
            
            .如果 (大于 (图片.数量, 0))
                .计次循环首 (图片.数量, i)
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    赋值 (范围, 图片.图片范围 [i])
                    
                    .如果 (并且 (大于 (图片.图片信息 [i], 0), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                .计次循环尾 ()
            .否则
                
            .如果结束
            
            
        .判断 (等于 (临时项目.是否分组, 假))
            赋值 (图片, 临时项目.图片.普通静止)
            .如果 (大于 (图片.数量, 0))
                .计次循环首 (图片.数量, i)
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    赋值 (范围, 图片.图片范围 [i])
                    
                    .如果 (大于 (图片.图片信息 [i], 0))
                        赋值 (范围, 图片.图片范围 [i])
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        
    .否则
        .如果 (等于 (临时项目.是否禁止, 真))
            赋值 (图片, 临时项目.图片.禁止)
            .如果 (大于 (图片.数量, 0))
                .计次循环首 (图片.数量, i)
                    处理事件 ()
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    .如果 (大于 (图片.图片信息 [i], 0))
                        赋值 (范围, 图片.图片范围 [i])
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .如果结束
    
    .判断开始 (等于 (临时项目.是否分组, 真))
        赋值 (文本, 临时项目.文本.分组静止)
        .如果 (大于 (文本.数量, 0))
            .计次循环首 (文本.数量, i)
                .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                    赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                    赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                    画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                    销毁字体 (字体句柄)
                    销毁纯色刷子 (刷子句柄)
                .否则
                    
                .如果结束
                
            .计次循环尾 ()
            
        .否则
            
        .如果结束
        
    .判断 (等于 (临时项目.是否分组, 假))
        .判断开始 (等于 (临时项目.是否禁止, 假))
            .如果 (大于 (临时项目.文本.普通静止.数量, 0))
                赋值 (文本, 临时项目.文本.普通静止)
                .计次循环首 (文本.数量, i)
                    .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                        赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                        赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                        画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                        销毁字体 (字体句柄)
                        销毁纯色刷子 (刷子句柄)
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .否则
                
            .如果结束
            
        .判断 (等于 (临时项目.是否禁止, 真))
            赋值 (文本, 临时项目.文本.禁止)
            .如果 (大于 (文本.数量, 0))
                .计次循环首 (文本.数量, i)
                    .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                        赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                        赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                        画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                        销毁字体 (字体句柄)
                        销毁纯色刷子 (刷子句柄)
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
.判断 (等于 (类型, 1))
    .如果 (并且 (等于 (临时项目.是否分组, 真), 大于 (临时项目.底图.分组点燃.终点颜色, -1)))
        赋值 (临时底图, 临时项目.底图.分组点燃)
        .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
            .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        
        列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
    .否则
        .如果 (并且 (等于 (临时项目.是否分组, 假), 大于 (临时项目.底图.普通点燃.终点颜色, -1)))
            赋值 (临时底图, 临时项目.底图.普通点燃)
            .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
                .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                    图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
                .否则
                    
                .如果结束
                
            .默认
                
            .判断结束
            
            列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
        .否则
            
        .如果结束
        
    .如果结束
    
    .判断开始 (等于 (临时项目.是否分组, 真))
        赋值 (临时边框, 全局.边框.分组点燃)
        .如果 (等于 (临时边框.是否划痕, 真))
            点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
        .否则
            
        .如果结束
        
        
    .判断 (等于 (临时项目.是否分组, 假))
        .判断开始 (等于 (临时项目.是否禁止, 真))
            赋值 (临时边框, 全局.边框.禁止)
            .如果 (等于 (临时边框.是否划痕, 真))
                点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
            .否则
                
            .如果结束
            
        .判断 (等于 (临时项目.是否禁止, 假))
            赋值 (临时边框, 全局.边框.普通点燃)
            .如果 (等于 (临时边框.是否划痕, 真))
                点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
            .否则
                
            .如果结束
            
            
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
    
    .如果 (并且 (等于 (临时项目.是否分组, 真), 大于 (全局.边框.分组点燃.次数, 0), 大于 (全局.边框.分组点燃.颜色, -1)))
        赋值 (临时边框, 全局.边框.分组点燃)
        .如果 (等于 (临时边框.边框方式, 0))
            .计次循环首 (临时边框.次数, i)
                处理事件 ()
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet.左边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.顶边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.宽度, 相减 (临时矩形.宽度, 相乘 (相减 (i, 1), 4), 1))
                赋值 (临时rcet.高度, 相减 (临时矩形.高度, 相乘 (相减 (i, 1), 4), 1))
                图形_画矩形 (mdc, 画笔, 临时rcet)
                销毁画笔 (画笔)
            .计次循环尾 ()
            
        .否则
            .如果 (等于 (临时边框.边框方式, 1))
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet, 临时边框.边框范围)
                赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (#白色, 0)))
                图形_描边圆角矩形 (mdc, 临时rcet, 临时边框.圆角度)
                销毁画笔 (画笔)
                销毁纯色刷子 (刷子句柄)
            .否则
                
            .如果结束
            
        .如果结束
        
        
    .否则
        .如果 (并且 (等于 (临时项目.是否分组, 假), 大于 (全局.边框.普通点燃.次数, 0), 大于 (全局.边框.普通点燃.颜色, -1)))
            赋值 (临时边框, 全局.边框.普通静止)
            .如果 (等于 (临时边框.边框方式, 0))
                .计次循环首 (临时边框.次数, i)
                    处理事件 ()
                    赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                    赋值 (临时rcet.左边, 相乘 (相减 (i, 1), 2))
                    赋值 (临时rcet.顶边, 相乘 (相减 (i, 1), 2))
                    赋值 (临时rcet.宽度, 相减 (临时矩形.宽度, 相乘 (相减 (i, 1), 4), 1))
                    赋值 (临时rcet.高度, 相减 (临时矩形.高度, 相乘 (相减 (i, 1), 4), 1))
                    图形_画矩形 (mdc, 画笔, 临时rcet)
                    销毁画笔 (画笔)
                .计次循环尾 ()
                
            .否则
                .如果 (等于 (临时边框.边框方式, 1))
                    赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                    赋值 (临时rcet, 临时边框.边框范围)
                    赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (#白色, 0)))
                    图形_描边圆角矩形 (mdc, 临时rcet, 临时边框.圆角度)
                    销毁画笔 (画笔)
                    销毁纯色刷子 (刷子句柄)
                .否则
                    
                .如果结束
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .如果结束
    
    .如果 (等于 (临时项目.是否分组, 真))
        .如果真 (并且 (不等于 (全局.分组图片.关闭图片, {  }), 不等于 (全局.分组图片.打开图片, {  })))
            赋值 (范围, 全局.分组图片.范围)
            .如果 (等于 (临时项目.是否打开, 假))
                图形_画图片 (mdc, 全局.分组图片.关闭图片, 范围)
            .否则
                图形_画图片 (mdc, 全局.分组图片.打开图片, 范围)
            .如果结束
            
        .如果真结束
        
        
        赋值 (图片, 临时项目.图片.分组点燃)
        .如果 (大于 (图片.数量, 0))
            .计次循环首 (图片.数量, i)
                处理事件 ()
                .如果 (等于 (图片.是否点亮 [i], 真))
                    赋值 (图片, 临时项目.图片.分组点亮)
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    赋值 (范围, 图片.图片范围 [i])
                    .判断开始 (或者 (小于 (图片.图片方式 [i], 1), 大于 (图片.图片方式 [i], 3)))
                        赋值 (图片, 临时项目.图片.分组点燃)
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .默认
                            
                        .判断结束
                        
                    .判断 (等于 (图片.图片方式 [i], 1))
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .默认
                            
                        .判断结束
                        
                    .判断 (等于 (图片.图片方式 [i], 2))
                        点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                    .判断 (等于 (图片.图片方式 [i], 3))
                        点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .默认
                            
                        .判断结束
                        
                        
                    .默认
                        
                    .判断结束
                    
                    
                .否则
                    .如果 (等于 (图片.是否点亮 [i], 假))
                        赋值 (图片, 临时项目.图片.分组点燃)
                        .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                            .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                                赋值 (范围, 图片.边框范围 [i])
                                图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .否则
                            
                        .如果结束
                        
                        赋值 (范围, 图片.图片范围 [i])
                        
                        .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                            .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .默认
                            
                        .判断结束
                        
                        
                    .否则
                        
                    .如果结束
                    
                .如果结束
                
            .计次循环尾 ()
        .否则
            
        .如果结束
        
    .否则
        .如果 (等于 (临时项目.是否分组, 假))
            赋值 (图片, 临时项目.图片.普通点燃)
            .如果 (大于 (图片.数量, 0))
                .计次循环首 (图片.数量, i)
                    处理事件 ()
                    .如果 (等于 (图片.是否点亮 [i], 真))
                        赋值 (图片, 临时项目.图片.普通点亮)
                        .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                            .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                                赋值 (范围, 图片.边框范围 [i])
                                图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                            .否则
                                
                            .如果结束
                            
                        .否则
                            
                        .如果结束
                        
                        
                        赋值 (范围, 图片.图片范围 [i])
                        .判断开始 (等于 (图片.图片方式 [i], 1))
                            .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                                .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                    图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                                .否则
                                    
                                .如果结束
                                
                            .默认
                                
                            .判断结束
                            
                        .判断 (等于 (图片.图片方式 [i], 2))
                            
                            点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                        .判断 (等于 (图片.图片方式 [i], 3))
                            点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                            .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                                .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                    图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                                .否则
                                    
                                .如果结束
                                
                            .默认
                                
                            .判断结束
                            
                            
                        .判断 (或者 (小于 (图片.图片方式 [i], 1), 大于 (图片.图片方式 [i], 3)))
                            赋值 (图片, 临时项目.图片.普通点燃)
                            赋值 (范围, 图片.图片范围 [i])
                            .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                                .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                    图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                                .否则
                                    
                                .如果结束
                                
                            .默认
                                
                            .判断结束
                            
                        .默认
                            
                        .判断结束
                        
                        
                        
                    .否则
                        .如果 (等于 (图片.是否点亮 [i], 假))
                            赋值 (图片, 临时项目.图片.普通点燃)
                            .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                                .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                                    赋值 (范围, 图片.边框范围 [i])
                                    图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                                .否则
                                    
                                .如果结束
                                
                            .否则
                                
                            .如果结束
                            
                            赋值 (范围, 图片.图片范围 [i])
                            
                            .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                                .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                                    图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                                .否则
                                    
                                .如果结束
                                
                            .默认
                                
                            .判断结束
                            
                        .否则
                            
                        .如果结束
                        
                    .如果结束
                    
                .计次循环尾 ()
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .如果结束
    
    .如果 (等于 (临时项目.是否分组, 真))
        .如果 (大于 (临时项目.文本.分组点燃.数量, 0))
            赋值 (文本, 临时项目.文本.分组点燃)
            .计次循环首 (文本.数量, i)
                处理事件 ()
                .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                    赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                    赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                    画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                    销毁字体 (字体句柄)
                    销毁纯色刷子 (刷子句柄)
                    
                .否则
                    
                .如果结束
                
            .计次循环尾 ()
        .否则
            
        .如果结束
        
    .否则
        .如果 (等于 (临时项目.是否分组, 假))
            .如果 (大于 (临时项目.文本.普通点燃.数量, 0))
                赋值 (文本, 临时项目.文本.普通点燃)
                .计次循环首 (文本.数量, i)
                    处理事件 ()
                    .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                        赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                        赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                        画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                        销毁字体 (字体句柄)
                        销毁纯色刷子 (刷子句柄)
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .如果结束
    
.判断 (等于 (类型, 2))
    .如果 (大于 (临时项目.底图.高亮.终点颜色, -1))
        赋值 (临时底图, 临时项目.底图.高亮)
        .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
            .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
    .否则
        
    .如果结束
    
    赋值 (临时边框, 全局.边框.分组点燃)
    .如果 (等于 (临时边框.是否划痕, 真))
        点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
    .否则
        
    .如果结束
    
    
    
    .如果 (并且 (大于 (全局.边框.高亮.次数, 0), 大于 (全局.边框.高亮.颜色, -1)))
        赋值 (临时边框, 全局.边框.高亮)
        .如果 (等于 (临时边框.边框方式, 0))
            .计次循环首 (临时边框.次数, i)
                处理事件 ()
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet.左边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.顶边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.宽度, 相减 (临时矩形.宽度, 相乘 (相减 (i, 1), 4), 1))
                赋值 (临时rcet.高度, 相减 (临时矩形.高度, 相乘 (相减 (i, 1), 4), 1))
                图形_画矩形 (mdc, 画笔, 临时rcet)
                销毁画笔 (画笔)
            .计次循环尾 ()
            
        .否则
            .如果 (等于 (临时边框.边框方式, 1))
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet, 临时边框.边框范围)
                赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (#白色, 0)))
                图形_描边圆角矩形 (mdc, 临时rcet, 临时边框.圆角度)
                销毁画笔 (画笔)
                销毁纯色刷子 (刷子句柄)
            .否则
                
            .如果结束
            
        .如果结束
        
        
        
    .否则
        
    .如果结束
    
    赋值 (图片, 临时项目.图片.高亮)
    .如果 (大于 (图片.数量, 0))
        .计次循环首 (图片.数量, i)
            处理事件 ()
            .如果 (等于 (图片.是否点亮 [i], 真))
                赋值 (图片, 临时项目.图片.高亮点亮)
                .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                    .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                        赋值 (范围, 图片.边框范围 [i])
                        图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                    .否则
                        
                    .如果结束
                    
                .否则
                    
                .如果结束
                
                
                赋值 (范围, 图片.图片范围 [i])
                
                .判断开始 (等于 (图片.图片方式 [i], 1))
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                .判断 (等于 (图片.图片方式 [i], 2))
                    点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                .判断 (等于 (图片.图片方式 [i], 3))
                    点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                    
                .判断 (或者 (小于 (图片.图片方式 [i], 1), 大于 (图片.图片方式 [i], 3)))
                    赋值 (图片, 临时项目.图片.高亮)
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .否则
                .如果 (等于 (图片.是否点亮 [i], 假))
                    赋值 (图片, 临时项目.图片.高亮)
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    赋值 (范围, 图片.图片范围 [i])
                    
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                    
                    
                .否则
                    
                .如果结束
                
            .如果结束
            
        .计次循环尾 ()
    .否则
        
    .如果结束
    
    .如果 (大于 (临时项目.文本.高亮.数量, 0))
        赋值 (文本, 临时项目.文本.高亮)
        .计次循环首 (文本.数量, i)
            处理事件 ()
            .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                销毁字体 (字体句柄)
                销毁纯色刷子 (刷子句柄)
                
            .否则
                
            .如果结束
            
        .计次循环尾 ()
    .否则
        
    .如果结束
    
.判断 (等于 (类型, 3))
    .如果 (大于 (临时项目.底图.焦点.终点颜色, -1))
        赋值 (临时底图, 临时项目.底图.焦点)
        .判断开始 (并且 (小于或等于 (临时底图.底图图片, 65535), 小于或等于 (临时底图.底图图片, 取数组成员数 (图片载入信息)), 大于 (临时底图.底图图片, 0)))
            .如果 (不等于 (图片载入信息 [临时底图].底图图片, {  }))
                图形_画图片 (mdc, 图片载入信息 [临时底图].底图图片, 临时矩形)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        
        列表底图 (mdc, 临时底图.方式, RGB到ARGB (临时底图.起始颜色, 临时底图.透明度), RGB到ARGB (临时底图.终点颜色, 临时底图.透明度), 临时矩形.宽度, 临时矩形.高度)
    .否则
        
    .如果结束
    
    赋值 (临时边框, 全局.边框.焦点)
    .如果 (等于 (临时边框.是否划痕, 真))
        点亮底图 (mdc, 临时边框.划痕方式, RGB到ARGB (临时边框.顶部划痕起始颜色, 255), RGB到ARGB (临时边框.顶部划痕终点颜色, 255), 临时边框.顶部划痕范围)
    .否则
        
    .如果结束
    
    
    
    .如果 (并且 (大于 (全局.边框.焦点.次数, 0), 大于 (全局.边框.焦点.颜色, -1)))
        赋值 (临时边框, 全局.边框.焦点)
        .如果 (等于 (临时边框.边框方式, 0))
            .计次循环首 (临时边框.次数, i)
                处理事件 ()
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet.左边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.顶边, 相乘 (相减 (i, 1), 2))
                赋值 (临时rcet.宽度, 相减 (临时矩形.宽度, 相乘 (相减 (i, 1), 4), 1))
                赋值 (临时rcet.高度, 相减 (临时矩形.高度, 相乘 (相减 (i, 1), 4), 1))
                图形_画矩形 (mdc, 画笔, 临时rcet)
                销毁画笔 (画笔)
            .计次循环尾 ()
            
        .否则
            .如果 (等于 (临时边框.边框方式, 1))
                赋值 (画笔, 创建画笔 (RGB到ARGB (临时边框.颜色, 255), 1))
                赋值 (临时rcet, 临时边框.边框范围)
                赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (#白色, 0)))
                图形_描边圆角矩形 (mdc, 临时rcet, 临时边框.圆角度)
                销毁画笔 (画笔)
                销毁纯色刷子 (刷子句柄)
            .否则
                
            .如果结束
            
        .如果结束
        
    .否则
        
    .如果结束
    
    
    赋值 (图片, 临时项目.图片.焦点)
    .如果 (大于 (图片.数量, 0))
        .计次循环首 (图片.数量, i)
            处理事件 ()
            .如果 (等于 (图片.是否点亮 [i], 真))
                赋值 (图片, 临时项目.图片.焦点点亮)
                .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                    .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                        赋值 (范围, 图片.边框范围 [i])
                        图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                    .否则
                        
                    .如果结束
                    
                .否则
                    
                .如果结束
                
                
                赋值 (范围, 图片.图片范围 [i])
                .判断开始 (等于 (图片.图片方式 [i], 1))
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                .判断 (等于 (图片.图片方式 [i], 2))
                    点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                .判断 (等于 (图片.图片方式 [i], 3))
                    点亮底图 (mdc, 图片.渐变方式 [i], 图片.起始颜色 [i], 图片.终点颜色 [i], 图片.图片范围 [i])
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                    
                .判断 (或者 (小于 (图片.图片方式 [i], 1), 大于 (图片.图片方式 [i], 3)))
                    赋值 (图片, 临时项目.图片.焦点)
                    赋值 (范围, 图片.图片范围 [i])
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .否则
                .如果 (等于 (图片.是否点亮 [i], 假))
                    赋值 (图片, 临时项目.图片.焦点)
                    .如果 (并且 (大于 (图片.边框位置 [i], 0), 小于或等于 (图片.边框位置 [i], 取数组成员数 (图片载入信息))))
                        .如果 (不等于 (图片载入信息 [图片].边框位置 [i], {  }))
                            赋值 (范围, 图片.边框范围 [i])
                            图形_画图片 (mdc, 图片载入信息 [图片].边框位置 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    赋值 (范围, 图片.图片范围 [i])
                    
                    .判断开始 (并且 (小于或等于 (图片.图片信息 [i], 65535), 小于或等于 (图片.图片信息 [i], 取数组成员数 (图片载入信息)), 大于 (图片.图片信息 [i], 0)))
                        .如果 (不等于 (图片载入信息 [图片].图片信息 [i], {  }))
                            图形_画图片 (mdc, 图片载入信息 [图片].图片信息 [i], 范围)
                        .否则
                            
                        .如果结束
                        
                    .默认
                        
                    .判断结束
                    
                .否则
                    
                .如果结束
                
            .如果结束
            
        .计次循环尾 ()
    .否则
        
    .如果结束
    
    .如果 (大于 (临时项目.文本.焦点.数量, 0))
        赋值 (文本, 临时项目.文本.焦点)
        .计次循环首 (文本.数量, i)
            .如果 (并且 (不等于 (文本.文本 [i], “”), 大于 (文本.颜色 [i], -1)))
                赋值 (范围, 文本.范围 [i])
                赋值 (字体句柄, 创建字体 (“宋体”, 文本.大小 [i], 文本.风格 [i]))
                赋值 (刷子句柄, 创建纯色刷子 (RGB到ARGB (文本.颜色 [i], 255)))
                画文本 (mdc, 文本.文本 [i], 字体句柄, 刷子句柄, 文本.范围 [i])
                销毁字体 (字体句柄)
                销毁纯色刷子 (刷子句柄)
            .否则
                
            .如果结束
            
        .计次循环尾 ()
    .否则
        
    .如果结束
    
.默认
    
.判断结束

赋值 (外部, 创建图形_自句柄 (句柄))
图形_画图像 (外部, hdc, 原表项矩形.x, 原表项矩形.y)
销毁图像 (hdc)
销毁图形 (mdc)
销毁图形 (外部)
.如果 (大于 (画图回调, 0))
    动态执行子程序 (画图回调, 项目索引, 类型, 0, 0, 0, 0, 0, 0, 0, 0)
.否则
    
.如果结束



.子程序 列表_鼠标移动, 空白型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 现行项目, 整数型, , 

.局部变量 测试矩形, 自建矩形, , , 
.局部变量 鼠标动作信息, 鼠标动作结构, , , 
.局部变量 项目位置, 整数型, , , 
.局部变量 状态, 整数型, , , 
.局部变量 原表项矩形, rect, , , 
.局部变量 i, 整数型, , , 
.局部变量 处于分组, 整数型, , , 
.局部变量 分组中位置, 整数型, , , 
.局部变量 上个热点, 整数型, , , 

赋值 (项目位置, 相加 (现行项目, 1))
.判断开始 (并且 (不等于 (现行项目, 全局.焦点), 不等于 (现行项目, 全局.热点), 不等于 (现行项目, 全局.高亮)))
    赋值 (状态, 0)
    赋值 (上个热点, 全局.热点)
    .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0), 等于 (全局.是否图片点亮, 真)))
        .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片)))
            .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
            .否则
                
            .如果结束
            
        .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片)))
            .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
            .否则
                
            .如果结束
            
        .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (上个热点, -1), 大于或等于 (项目 [相加 (上个热点, 1)].图片.普通点燃.数量, 上个图片)))
            .如果 (等于 (项目 [相加 (上个热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
                赋值 (项目 [相加 (上个热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
            .否则
                
            .如果结束
            
        .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (上个热点, -1), 大于或等于 (项目 [相加 (上个热点, 1)].图片.分组点燃.数量, 上个图片)))
            .如果 (等于 (项目 [相加 (上个热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
                赋值 (项目 [相加 (上个热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
    .否则
        
    .如果结束
    
    
    .如果 (并且 (等于 (项目 [项目位置], 是否禁止, 假), 等于 (全局.状态.是否移动点燃, 真)))
        .如果 (等于 (项目 [项目位置], 是否隐藏, 假))
            鼠标被移动 (X, Y, 现行项目)
        .否则
            
        .如果结束
        
        
        赋值 (鼠标动作信息.结构尺寸, 16)
        赋值 (鼠标动作信息.标志, 2) ' 标志为鼠标离开动作
        赋值 (鼠标动作信息.接收动作消息的句柄, 全局.句柄)
        TrackMouseEvent (鼠标动作信息)
        .如果 (大于 (全局.回调.移动回调, 0))
            赋值 (处于分组, 取项目所在分组 (现行项目))
            .如果 (大于 (分组项目 [1].分组位置, -1))
                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
            .否则
                赋值 (分组中位置, 现行项目)
            .如果结束
            
            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, 状态, 65536, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    赋值 (实时位置, 0)
    赋值 (上个图片, 0)
    
    
    
.判断 (或者 (等于 (现行项目, 全局.焦点), 等于 (现行项目, 全局.热点), 等于 (现行项目, 全局.高亮)))
    .判断开始 (等于 (现行项目, 全局.焦点))
        .如果 (不等于 (全局.热点, 全局.焦点))
            .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0), 等于 (全局.是否图片点亮, 真)))
                .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .默认
                    
                .判断结束
                
            .否则
                
            .如果结束
            
            画项目 (全局.句柄, 全局.热点, 选择 (等于 (全局.热点, 全局.高亮), 2, 0))
            赋值 (全局.热点, 全局.焦点)
            赋值 (鼠标动作信息.结构尺寸, 16)
            赋值 (鼠标动作信息.标志, 2) ' 标志为鼠标离开动作
            赋值 (鼠标动作信息.接收动作消息的句柄, 全局.句柄)
            TrackMouseEvent (鼠标动作信息)
            动态执行子程序 (全局.回调.移动回调, 0, 0, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
        .如果 (并且 (大于 (项目 [项目位置], 图片.焦点.数量, 0), 等于 (全局.是否图片点亮, 真)))
            .判断开始 (或者 (等于 (上个图片, 0), 不等于 (实时位置, #状态_焦点)))
                赋值 (实时位置, #状态_焦点)
                .计次循环首 (项目 [项目位置], 图片.焦点.数量, i)
                    处理事件 ()
                    赋值 (测试矩形, 项目 [项目位置], 图片.焦点.图片范围 [i])
                    SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                    赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.焦点.图片范围 [i], 顶边))
                    .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                        赋值 (上个范围, 项目 [项目位置], 图片.焦点.图片范围 [i])
                        赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.焦点.图片范围 [i], 顶边))
                        赋值 (上个图片, i)
                        赋值 (项目 [项目位置], 图片.焦点.是否点亮 [i], 真)
                        画项目 (全局.句柄, 全局.焦点, 3)
                        .判断开始 (大于 (全局.回调.移动回调, 0))
                            赋值 (处于分组, 取项目所在分组 (现行项目))
                            .如果 (大于 (分组项目 [1].分组位置, -1))
                                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                            .否则
                                赋值 (分组中位置, 现行项目)
                            .如果结束
                            
                            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_焦点, 上个图片, 0, 0, 0, 0, 0, 0)
                        .默认
                            
                        .判断结束
                        
                        跳出循环 ()
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .判断 (并且 (大于 (上个图片, 0), 等于 (实时位置, #状态_焦点)))
                .判断开始 (等于 (点是否在矩形内 (X, Y, 上个范围), 假))
                    .如果 (等于 (项目 [项目位置], 图片.焦点.是否点亮 [上个图片], 真))
                        赋值 (项目 [项目位置], 图片.焦点.是否点亮 [上个图片], 假)
                        画项目 (全局.句柄, 全局.焦点, 3)
                        .判断开始 (大于 (全局.回调.移动回调, 0))
                            赋值 (处于分组, 取项目所在分组 (现行项目))
                            .如果 (大于 (分组项目 [1].分组位置, -1))
                                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                            .否则
                                赋值 (分组中位置, 现行项目)
                            .如果结束
                            
                            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_焦点, 0, 0, 0, 0, 0, 0, 0)
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                    .计次循环首 (项目 [项目位置], 图片.焦点.数量, i)
                        处理事件 ()
                        赋值 (测试矩形, 项目 [项目位置], 图片.焦点.图片范围 [i])
                        SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                        赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.焦点.图片范围 [i], 顶边))
                        .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                            赋值 (上个范围, 测试矩形)
                            赋值 (上个图片, i)
                            赋值 (项目 [项目位置], 图片.焦点.是否点亮 [i], 真)
                            画项目 (全局.句柄, 全局.焦点, 3)
                            .判断开始 (大于 (全局.回调.移动回调, 0))
                                赋值 (处于分组, 取项目所在分组 (现行项目))
                                .如果 (大于 (分组项目 [1].分组位置, -1))
                                    赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                .否则
                                    赋值 (分组中位置, 现行项目)
                                .如果结束
                                
                                动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_焦点, 上个图片, 0, 0, 0, 0, 0, 0)
                            .默认
                                
                            .判断结束
                            
                            跳出循环 ()
                        .否则
                            
                        .如果结束
                        
                    .计次循环尾 ()
                    
                .判断 (并且 (等于 (点是否在矩形内 (X, Y, 上个范围), 真), 等于 (项目 [项目位置], 图片.焦点.是否点亮 [上个图片], 假)))
                    赋值 (实时位置, #状态_焦点)
                    赋值 (项目 [项目位置], 图片.焦点.是否点亮 [上个图片], 真)
                    画项目 (全局.句柄, 全局.焦点, 3)
                    
                    .判断开始 (大于 (全局.回调.移动回调, 0))
                        赋值 (处于分组, 取项目所在分组 (现行项目))
                        .如果 (大于 (分组项目 [1].分组位置, -1))
                            赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                        .否则
                            赋值 (分组中位置, 现行项目)
                        .如果结束
                        
                        动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_焦点, 上个图片, 0, 0, 0, 0, 0, 0)
                    .默认
                        
                    .判断结束
                    
                    
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .否则
            
        .如果结束
        
        
    .判断 (等于 (现行项目, 全局.高亮))
        .如果 (不等于 (全局.热点, 全局.高亮))
            .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0), 等于 (全局.是否图片点亮, 真)))
                .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .默认
                    
                .判断结束
                
            .否则
                
            .如果结束
            
            
            赋值 (实时位置, 0)
            赋值 (上个图片, 0)
            
            
            画项目 (全局.句柄, 全局.热点, 选择 (等于 (全局.热点, 全局.焦点), 3, 0))
            赋值 (全局.热点, 全局.高亮)
            赋值 (鼠标动作信息.结构尺寸, 16)
            赋值 (鼠标动作信息.标志, 2) ' 标志为鼠标离开动作
            赋值 (鼠标动作信息.接收动作消息的句柄, 全局.句柄)
            TrackMouseEvent (鼠标动作信息)
            动态执行子程序 (全局.回调.移动回调, 0, 0, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
        
        .如果 (并且 (大于 (项目 [项目位置], 图片.高亮.数量, 0), 等于 (全局.是否图片点亮, 真)))
            .判断开始 (或者 (等于 (上个图片, 0), 不等于 (实时位置, #状态_高亮)))
                赋值 (实时位置, #状态_高亮)
                .计次循环首 (项目 [项目位置], 图片.高亮.数量, i)
                    .如果 (并且 (大于 (项目 [项目位置], 图片.高亮.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.高亮.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.高亮点亮.图片信息 [i], 0)))
                        赋值 (测试矩形, 项目 [项目位置], 图片.高亮.图片范围 [i])
                        SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                        赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.高亮.图片范围 [i], 顶边))
                        .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                            赋值 (上个范围, 项目 [项目位置], 图片.高亮.图片范围 [i])
                            赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.高亮.图片范围 [i], 顶边))
                            赋值 (上个图片, i)
                            赋值 (项目 [项目位置], 图片.高亮.是否点亮 [i], 真)
                            画项目 (全局.句柄, 全局.高亮, 2)
                            .判断开始 (大于 (全局.回调.移动回调, 0))
                                赋值 (处于分组, 取项目所在分组 (现行项目))
                                .如果 (大于 (分组项目 [1].分组位置, -1))
                                    赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                .否则
                                    赋值 (分组中位置, 现行项目)
                                .如果结束
                                
                                动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_高亮, 上个图片, 0, 0, 0, 0, 0, 0)
                            .默认
                                
                            .判断结束
                            
                            跳出循环 ()
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .判断 (并且 (大于 (上个图片, 0), 等于 (实时位置, #状态_高亮)))
                .判断开始 (等于 (点是否在矩形内 (X, Y, 上个范围), 假))
                    .如果 (等于 (项目 [项目位置], 图片.高亮.是否点亮 [上个图片], 真))
                        赋值 (项目 [项目位置], 图片.高亮.是否点亮 [上个图片], 假)
                        画项目 (全局.句柄, 全局.高亮, 2)
                        .判断开始 (大于 (全局.回调.移动回调, 0))
                            赋值 (处于分组, 取项目所在分组 (现行项目))
                            .如果 (大于 (分组项目 [1].分组位置, -1))
                                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                            .否则
                                赋值 (分组中位置, 现行项目)
                            .如果结束
                            
                            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_高亮, 0, 0, 0, 0, 0, 0, 0)
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                    .计次循环首 (项目 [项目位置], 图片.高亮.数量, i)
                        .如果 (并且 (大于 (项目 [项目位置], 图片.高亮.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.高亮.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.高亮点亮.图片信息 [i], 0)))
                            赋值 (测试矩形, 项目 [项目位置], 图片.高亮.图片范围 [i])
                            SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                            赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.高亮.图片范围 [i], 顶边))
                            .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                                赋值 (上个范围, 项目 [项目位置], 图片.高亮.图片范围 [i])
                                赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.高亮.图片范围 [i], 顶边))
                                赋值 (项目 [项目位置], 图片.高亮.是否点亮 [i], 真)
                                赋值 (上个图片, i)
                                画项目 (全局.句柄, 全局.高亮, 2)
                                .判断开始 (大于 (全局.回调.移动回调, 0))
                                    赋值 (处于分组, 取项目所在分组 (现行项目))
                                    .如果 (大于 (分组项目 [1].分组位置, -1))
                                        赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                    .否则
                                        赋值 (分组中位置, 现行项目)
                                    .如果结束
                                    
                                    动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_高亮, 上个图片, 0, 0, 0, 0, 0, 0)
                                .默认
                                    
                                .判断结束
                                
                                跳出循环 ()
                            .否则
                                
                            .如果结束
                            
                        .否则
                            
                        .如果结束
                        
                    .计次循环尾 ()
                    
                .判断 (并且 (等于 (点是否在矩形内 (X, Y, 上个范围), 真), 等于 (项目 [项目位置], 图片.高亮.是否点亮 [上个图片], 假)))
                    
                    赋值 (项目 [项目位置], 图片.高亮.是否点亮 [上个图片], 真)
                    画项目 (全局.句柄, 全局.高亮, 2)
                    
                    
                    .判断开始 (大于 (全局.回调.移动回调, 0))
                        赋值 (处于分组, 取项目所在分组 (现行项目))
                        .如果 (大于 (分组项目 [1].分组位置, -1))
                            赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                        .否则
                            赋值 (分组中位置, 现行项目)
                        .如果结束
                        
                        动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_高亮, 上个图片, 0, 0, 0, 0, 0, 0)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .否则
            
        .如果结束
        
        
        
    .判断 (等于 (现行项目, 全局.热点))
        .如果 (大于 (高CPU移动回调, 0))
            动态执行子程序 (高CPU移动回调, 全局.现行位置, X, Y, 0, 0, 0, 0, 0, 0, 0)
        .否则
            
        .如果结束
        
        .判断开始 (并且 (等于 (项目 [项目位置], 是否分组, 假), 大于 (项目 [项目位置], 图片.普通点燃.数量, 0), 等于 (全局.是否图片点亮, 真)))
            .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0), 等于 (全局.是否图片点亮, 真)))
                .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                    
                .判断 (并且 (等于 (实时位置, #状态_分组点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.分组点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .默认
                    
                .判断结束
                
            .否则
                
            .如果结束
            
            .判断开始 (或者 (等于 (上个图片, 0), 不等于 (实时位置, #状态_普通点燃)))
                赋值 (实时位置, #状态_普通点燃)
                .计次循环首 (项目 [项目位置], 图片.普通点燃.数量, i)
                    .如果 (并且 (大于 (项目 [项目位置], 图片.普通点燃.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.普通点燃.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.普通点亮.图片信息 [i], 0)))
                        赋值 (测试矩形, 项目 [项目位置], 图片.普通点燃.图片范围 [i])
                        SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                        赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.普通点燃.图片范围 [i], 顶边))
                        .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                            赋值 (上个范围, 项目 [项目位置], 图片.普通点燃.图片范围 [i])
                            赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.普通点燃.图片范围 [i], 顶边))
                            赋值 (上个图片, i)
                            赋值 (项目 [项目位置], 图片.普通点燃.是否点亮 [i], 真)
                            画项目 (全局.句柄, 全局.热点, 1)
                            .判断开始 (大于 (全局.回调.移动回调, 0))
                                赋值 (处于分组, 取项目所在分组 (现行项目))
                                .如果 (大于 (分组项目 [1].分组位置, -1))
                                    赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                .否则
                                    赋值 (分组中位置, 现行项目)
                                .如果结束
                                
                                动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_普通点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                            .默认
                                
                            .判断结束
                            
                            跳出循环 ()
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .判断 (并且 (大于 (上个图片, 0), 等于 (实时位置, #状态_普通点燃)))
                .判断开始 (等于 (点是否在矩形内 (X, Y, 上个范围), 假))
                    .如果 (等于 (项目 [项目位置], 图片.普通点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [项目位置], 图片.普通点燃.是否点亮 [上个图片], 假)
                        画项目 (全局.句柄, 全局.热点, 1)
                        .判断开始 (大于 (全局.回调.移动回调, 0))
                            赋值 (处于分组, 取项目所在分组 (现行项目))
                            .如果 (大于 (分组项目 [1].分组位置, -1))
                                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                            .否则
                                赋值 (分组中位置, 现行项目)
                            .如果结束
                            
                            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_普通点燃, 0, 0, 0, 0, 0, 0, 0)
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    .计次循环首 (项目 [项目位置], 图片.普通点燃.数量, i)
                        .如果 (并且 (大于 (项目 [项目位置], 图片.普通点燃.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.普通点燃.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.普通点亮.图片信息 [i], 0)))
                            赋值 (测试矩形, 项目 [项目位置], 图片.普通点燃.图片范围 [i])
                            SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                            赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.普通点燃.图片范围 [i], 顶边))
                            .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                                赋值 (上个范围, 项目 [项目位置], 图片.普通点燃.图片范围 [i])
                                赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.普通点燃.图片范围 [i], 顶边))
                                赋值 (项目 [项目位置], 图片.普通点燃.是否点亮 [i], 真)
                                赋值 (上个图片, i)
                                画项目 (全局.句柄, 全局.热点, 1)
                                .判断开始 (大于 (全局.回调.移动回调, 0))
                                    赋值 (处于分组, 取项目所在分组 (现行项目))
                                    .如果 (大于 (分组项目 [1].分组位置, -1))
                                        赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                    .否则
                                        赋值 (分组中位置, 现行项目)
                                    .如果结束
                                    
                                    动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_普通点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                                .默认
                                    
                                .判断结束
                                
                                跳出循环 ()
                            .否则
                                
                            .如果结束
                            
                        .否则
                            
                        .如果结束
                        
                        
                    .计次循环尾 ()
                    
                .判断 (并且 (等于 (点是否在矩形内 (X, Y, 上个范围), 真), 等于 (项目 [项目位置], 图片.普通点燃.是否点亮 [上个图片], 假)))
                    赋值 (项目 [项目位置], 图片.普通点燃.是否点亮 [上个图片], 真)
                    画项目 (全局.句柄, 全局.热点, 1)
                    .判断开始 (大于 (全局.回调.移动回调, 0))
                        赋值 (处于分组, 取项目所在分组 (现行项目))
                        .如果 (大于 (分组项目 [1].分组位置, -1))
                            赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                        .否则
                            赋值 (分组中位置, 现行项目)
                        .如果结束
                        
                        动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_普通点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .判断 (并且 (等于 (项目 [项目位置], 是否分组, 真), 大于 (项目 [项目位置], 图片.分组点燃.数量, 0), 等于 (全局.是否图片点亮, 真)))
            .如果 (并且 (大于 (实时位置, 0), 大于 (上个图片, 0), 等于 (全局.是否图片点亮, 真)))
                .判断开始 (并且 (等于 (实时位置, #状态_高亮), 大于或等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.高亮, 1)].图片.高亮.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_焦点), 大于或等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.焦点, 1)].图片.焦点.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                .判断 (并且 (等于 (实时位置, #状态_普通点燃), 大于 (全局.热点, -1), 大于或等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.数量, 上个图片)))
                    .如果 (等于 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [相加 (全局.热点, 1)].图片.普通点燃.是否点亮 [上个图片], 假)
                        赋值 (实时位置, 0)
                        赋值 (上个图片, 0)
                    .否则
                        
                    .如果结束
                    
                    
                .默认
                    
                .判断结束
                
            .否则
                
            .如果结束
            
            
            .判断开始 (或者 (等于 (上个图片, 0), 不等于 (实时位置, #状态_分组点燃)))
                赋值 (实时位置, #状态_分组点燃)
                .计次循环首 (项目 [项目位置], 图片.分组点燃.数量, i)
                    .如果 (并且 (大于 (项目 [项目位置], 图片.分组点燃.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.分组点燃.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.分组点亮.图片信息 [i], 0)))
                        赋值 (测试矩形, 项目 [项目位置], 图片.分组点燃.图片范围 [i])
                        SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                        赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.分组点燃.图片范围 [i], 顶边))
                        .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                            赋值 (上个范围, 项目 [项目位置], 图片.分组点燃.图片范围 [i])
                            赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.分组点燃.图片范围 [i], 顶边))
                            赋值 (上个图片, i)
                            赋值 (项目 [项目位置], 图片.分组点燃.是否点亮 [i], 真)
                            画项目 (全局.句柄, 全局.热点, 1)
                            .判断开始 (大于 (全局.回调.移动回调, 0))
                                赋值 (处于分组, 取项目所在分组 (现行项目))
                                .如果 (大于 (分组项目 [1].分组位置, -1))
                                    赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                .否则
                                    赋值 (分组中位置, 现行项目)
                                .如果结束
                                
                                
                                动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_分组点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                            .默认
                                
                            .判断结束
                            
                            跳出循环 ()
                        .否则
                            
                        .如果结束
                        
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
            .判断 (并且 (大于 (上个图片, 0), 等于 (实时位置, #状态_分组点燃)))
                .判断开始 (等于 (点是否在矩形内 (X, Y, 上个范围), 假))
                    .如果 (等于 (项目 [项目位置], 图片.分组点燃.是否点亮 [上个图片], 真))
                        赋值 (项目 [项目位置], 图片.分组点燃.是否点亮 [上个图片], 假)
                        画项目 (全局.句柄, 全局.热点, 1)
                        .判断开始 (大于 (全局.回调.移动回调, 0))
                            赋值 (处于分组, 取项目所在分组 (现行项目))
                            .如果 (大于 (分组项目 [1].分组位置, -1))
                                赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                            .否则
                                赋值 (分组中位置, 现行项目)
                            .如果结束
                            
                            动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_分组点燃, 0, 0, 0, 0, 0, 0, 0)
                        .默认
                            
                        .判断结束
                        
                    .否则
                        
                    .如果结束
                    
                    
                    .计次循环首 (项目 [项目位置], 图片.分组点燃.数量, i)
                        .如果 (并且 (大于 (项目 [项目位置], 图片.分组点燃.图片范围 [i], 宽度, 0), 大于 (项目 [项目位置], 图片.分组点燃.图片范围 [i], 高度, 0), 大于 (项目 [项目位置], 图片.分组点亮.图片信息 [i], 0)))
                            赋值 (测试矩形, 项目 [项目位置], 图片.分组点燃.图片范围 [i])
                            SendMessage_RECT (全局.句柄, 408, 现行项目, 原表项矩形)
                            赋值 (测试矩形.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.分组点燃.图片范围 [i], 顶边))
                            .如果 (等于 (点是否在矩形内 (X, Y, 测试矩形), 真))
                                赋值 (上个范围, 项目 [项目位置], 图片.分组点燃.图片范围 [i])
                                赋值 (上个范围.顶边, 相加 (原表项矩形.y, 项目 [项目位置], 图片.分组点燃.图片范围 [i], 顶边))
                                赋值 (项目 [项目位置], 图片.分组点燃.是否点亮 [i], 真)
                                赋值 (上个图片, i)
                                画项目 (全局.句柄, 全局.热点, 1)
                                .判断开始 (大于 (全局.回调.移动回调, 0))
                                    赋值 (处于分组, 取项目所在分组 (现行项目))
                                    .如果 (大于 (分组项目 [1].分组位置, -1))
                                        赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                                    .否则
                                        赋值 (分组中位置, 现行项目)
                                    .如果结束
                                    
                                    
                                    动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_分组点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                                .默认
                                    
                                .判断结束
                                
                                跳出循环 ()
                            .否则
                                
                            .如果结束
                            
                        .否则
                            
                        .如果结束
                        
                    .计次循环尾 ()
                .判断 (并且 (等于 (点是否在矩形内 (X, Y, 上个范围), 真), 等于 (项目 [项目位置], 图片.分组点燃.是否点亮 [上个图片], 假)))
                    赋值 (项目 [项目位置], 图片.分组点燃.是否点亮 [上个图片], 真)
                    画项目 (全局.句柄, 全局.热点, 1)
                    .判断开始 (大于 (全局.回调.移动回调, 0))
                        赋值 (处于分组, 取项目所在分组 (现行项目))
                        .如果 (大于 (分组项目 [1].分组位置, -1))
                            赋值 (分组中位置, 相减 (现行项目, 分组项目 [处于分组], 分组位置))
                        .否则
                            赋值 (分组中位置, 现行项目)
                        .如果结束
                        
                        
                        动态执行子程序 (全局.回调.移动回调, 处于分组, 分组中位置, #状态_分组点燃, 上个图片, 0, 0, 0, 0, 0, 0)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
    .默认
        
    .判断结束
    
.默认
    
.判断结束


.子程序 创建, 整数型, , 黑色会被透明
.参数 父窗口句柄, 整数型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 列表普通宽度, 整数型, , 
.参数 列表焦点宽度, 整数型, , 
.参数 背景颜色, 整数型, , 
.参数 是否置顶, 逻辑型, 可空, 
.参数 是否图片点亮, 逻辑型, 可空, 
.参数 是否移动点燃, 逻辑型, 可空, 
.参数 是否左键高亮, 逻辑型, 可空, 
.参数 是否左键焦点, 逻辑型, 可空, 
.参数 是否双击焦点, 逻辑型, 可空, 

.局部变量 实例句柄, 整数型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 窗口样式, 整数型, , , 
.局部变量 扩展样式, 整数型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 临时项目, 项目信息, , , 
.局部变量 文本, 文本型, , , 
.局部变量 临时分组, 分组成员, , , 
.局部变量 临时文本, 文本信息, , , 
.局部变量 临时图片, 图片信息, , , 
.局部变量 临时底图, 底图信息, , , 
.局部变量 临时边框, 边框信息, , , 
.局部变量 GpInput, GdiplusStartupInput, , , 

.如果 (小于或等于 (全局.句柄, 0))
    赋值 (窗口回调, 辅_生成_类回调_易 (3, 4))
    赋值 (列表回调, 辅_生成_类回调_易 (4, 4))
    赋值 (GpInput.GdiplusVersion, 1)
    GdiplusStartup (GDI, GpInput, 0)
    赋值 (全局.热点, -1)
    赋值 (全局.焦点, -1)
    赋值 (全局.项目数量, 1)
    赋值 (全局.高亮, -1)
    赋值 (自定义高度, 假)
    赋值 (实例句柄, GetModuleHandle (字符 (0)))
    赋值 (窗口类名, “ListBox”)
    赋值 (窗口样式, 相加 (相减 (相加 (1411449297, 2), 16), 32))
    赋值 (扩展样式, 8)
    赋值 (句柄, CreateWindowEx (扩展样式, 窗口类名, “”, 窗口样式, 左边, 顶边, 宽度, 高度, 父窗口句柄, 0, 实例句柄, 0))
    .如果 (或者 (等于 (是否置顶, 真), 是否为空 (是否置顶)))
        BringWindowToTop (句柄)
    .否则
        
    .如果结束
    
    SetWindowLong (句柄, -20, 位或 (GetWindowLong (句柄, -20), 524288))
    SetLayeredWindowAttributes (句柄, #黑色, 0, 1)
    子类化_列表.初始化 (句柄, 辅_字节集到子程序地址 (列表回调))
    子类化_父窗口.初始化 (父窗口句柄, 辅_字节集到子程序地址 (窗口回调))
    赋值 (全局.背景颜色, 背景颜色)
    赋值 (全局.范围.左边, 左边)
    赋值 (全局.范围.顶边, 顶边)
    赋值 (全局.范围.宽度, 宽度)
    赋值 (全局.范围.高度, 高度)
    赋值 (全局.句柄, 句柄)
    赋值 (全局.父句柄, 父窗口句柄)
    赋值 (全局.普通高度, 列表普通宽度)
    赋值 (全局.焦点高度, 列表焦点宽度)
    .如果 (或者 (等于 (是否为空 (是否图片点亮), 真), 等于 (是否图片点亮, 真)))
        赋值 (全局.是否图片点亮, 真)
    .否则
        赋值 (全局.是否图片点亮, 假)
    .如果结束
    
    
    .如果 (或者 (等于 (是否为空 (是否移动点燃), 真), 等于 (是否移动点燃, 真)))
        赋值 (全局.状态.是否移动点燃, 真)
    .否则
        赋值 (全局.状态.是否移动点燃, 假)
    .如果结束
    .如果 (或者 (等于 (是否为空 (是否双击焦点), 真), 等于 (是否双击焦点, 真)))
        赋值 (全局.状态.是否双击焦点, 真)
    .否则
        赋值 (全局.状态.是否双击焦点, 假)
    .如果结束
    .如果 (或者 (等于 (是否为空 (是否左键焦点), 真), 等于 (是否左键焦点, 假)))
        赋值 (全局.状态.是否左键焦点, 假)
    .否则
        赋值 (全局.状态.是否左键焦点, 真)
    .如果结束
    .如果 (或者 (等于 (是否为空 (是否左键高亮), 真), 等于 (是否左键高亮, 真)))
        赋值 (全局.状态.是否左键高亮, 真)
    .否则
        赋值 (全局.状态.是否左键高亮, 假)
    .如果结束
    
    .如果 (并且 (等于 (全局.状态.是否左键高亮, 真), 等于 (全局.状态.是否左键焦点, 真)))
        赋值 (全局.状态.是否左键高亮, 真)
        赋值 (全局.状态.是否左键焦点, 假)
    .否则
        
    .如果结束
    
    .如果 (并且 (等于 (全局.状态.是否双击焦点, 真), 等于 (全局.状态.是否左键焦点, 真)))
        赋值 (全局.状态.是否双击焦点, 真)
        赋值 (全局.状态.是否左键焦点, 假)
    .否则
        
    .如果结束
    
    
    赋值 (临时文本.数量, 1)
    重定义_文本 (1, 临时文本)
    赋值 (临时文本.文本 [1], “”)
    赋值 (临时文本.大小 [1], 15)
    赋值 (临时文本.风格 [1], #列表_文本风格_普通)
    赋值 (临时文本.颜色 [1], 取颜色值 (0, 0, 1))
    赋值 (临时文本.范围 [1], 创建矩形 (0, 0, 0, 0))
    赋值 (全局.文本.普通静止, 临时文本)
    赋值 (全局.文本.分组静止, 临时文本)
    赋值 (全局.文本.普通点燃, 临时文本)
    赋值 (全局.文本.分组点燃, 临时文本)
    赋值 (全局.文本.焦点, 临时文本)
    赋值 (全局.文本.高亮, 临时文本)
    赋值 (全局.文本.禁止, 临时文本)
    赋值 (临时底图.方式, #列表_渐变方式_无)
    赋值 (临时底图.透明度, 255)
    赋值 (临时底图.起始颜色, -1)
    赋值 (临时底图.终点颜色, -1)
    赋值 (全局.底图.普通静止, 临时底图)
    赋值 (全局.底图.分组静止, 临时底图)
    赋值 (全局.底图.普通点燃, 临时底图)
    赋值 (全局.底图.分组点燃, 临时底图)
    赋值 (全局.底图.焦点, 临时底图)
    赋值 (全局.底图.高亮, 临时底图)
    赋值 (全局.底图.禁止, 临时底图)
    赋值 (全局.底图.普通静止.终点颜色, 全局.背景颜色)
    赋值 (全局.底图.分组静止.终点颜色, 全局.背景颜色)
    赋值 (全局.底图.普通点燃.终点颜色, 取颜色值 (95, 149, 219))
    赋值 (全局.底图.分组点燃.终点颜色, 取颜色值 (194, 226, 249))
    赋值 (全局.底图.焦点.终点颜色, 取颜色值 (252, 233, 161))
    赋值 (全局.底图.高亮.终点颜色, 取颜色值 (252, 233, 161))
    赋值 (全局.底图.禁止.终点颜色, 取颜色值 (205, 217, 231))
    赋值 (临时边框.颜色, -1)
    赋值 (临时边框.次数, 0)
    赋值 (临时边框.边框方式, 0)
    赋值 (临时边框.是否划痕, 假)
    赋值 (临时边框.顶部划痕终点颜色, -1)
    赋值 (全局.边框.普通静止, 临时边框)
    赋值 (全局.边框.分组静止, 临时边框)
    赋值 (全局.边框.普通点燃, 临时边框)
    赋值 (全局.边框.分组点燃, 临时边框)
    赋值 (全局.边框.焦点, 临时边框)
    赋值 (全局.边框.高亮, 临时边框)
    赋值 (全局.边框.禁止, 临时边框)
    赋值 (临时图片.数量, 0)
    赋值 (临时图片.图片范围 [1], 创建矩形 (0, 0, 0, 0))
    赋值 (临时图片.图片信息 [1], 0)
    赋值 (临时图片.是否点亮 [1], 假)
    赋值 (临时图片.图片方式 [1], 0)
    赋值 (全局.图片.焦点, 临时图片)
    赋值 (全局.图片.高亮, 临时图片)
    赋值 (全局.图片.禁止, 临时图片)
    赋值 (全局.图片.普通静止, 临时图片)
    赋值 (全局.图片.普通点亮, 临时图片)
    赋值 (全局.图片.分组静止, 临时图片)
    赋值 (全局.图片.分组点亮, 临时图片)
    赋值 (全局.图片.焦点点亮, 临时图片)
    赋值 (全局.图片.高亮点亮, 临时图片)
    赋值 (全局.图片.禁止点亮, 临时图片)
    赋值 (全局.图片.分组点燃, 临时图片)
    赋值 (全局.图片.普通点燃, 临时图片)
    赋值 (全局.分组图片.范围, 创建矩形 (5, 3, 24, 24))
    赋值 (临时项目.是否分组, 假)
    赋值 (临时项目.是否打开, 假)
    赋值 (临时项目.是否禁止, 假)
    加入成员 (项目, 临时项目)
    赋值 (临时分组.分组位置, -1)
    赋值 (临时分组.分组个数, 0)
    加入成员 (分组项目, 临时分组)
    赋值 (文本, “ ”)
    SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本))
    SendMessage (全局.句柄, 416, 0, 全局.普通高度)
    获取焦点 ()
    返回 (句柄)
.否则
    返回 (0)
.如果结束


.子程序 重定义_文本, 空白型, , 
.参数 定义数量, 整数型, , 
.参数 文本, 文本信息, , 

重定义数组 (文本.文本, 真, 定义数量)
重定义数组 (文本.大小, 真, 定义数量)
重定义数组 (文本.风格, 真, 定义数量)
重定义数组 (文本.范围, 真, 定义数量)
重定义数组 (文本.颜色, 真, 定义数量)

.子程序 重定义_图片, 空白型, , 
.参数 定义数量, 整数型, , 
.参数 图片, 图片信息, , 

重定义数组 (图片.图片范围, 真, 定义数量)
重定义数组 (图片.图片信息, 真, 定义数量)
重定义数组 (图片.是否点亮, 真, 定义数量)
重定义数组 (图片.图片方式, 真, 定义数量)
重定义数组 (图片.起始颜色, 真, 定义数量)
重定义数组 (图片.终点颜色, 真, 定义数量)
重定义数组 (图片.渐变方式, 真, 定义数量)
重定义数组 (图片.边框位置, 真, 定义数量)
重定义数组 (图片.边框范围, 真, 定义数量)
重定义数组 (图片.透明度, 真, 定义数量)

.子程序 取窗口句柄, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.句柄)
.如果真结束
返回 (0)


.子程序 取父窗口句柄, 整数型, , 
.如果 (大于 (全局.句柄, 0))
    返回 (全局.父句柄)
.否则
    返回 (0)
.如果结束



.子程序 取现行项目, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.现行位置)
.如果真结束
返回 (0)


.子程序 取项目数, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (相减 (全局.项目数量, 1))
.如果真结束
返回 (0)


.子程序 取焦点位置, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.焦点)
.如果真结束
返回 (0)


.子程序 取热点位置, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.热点)
.如果真结束
返回 (0)


.子程序 取高亮位置, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.高亮)
.如果真结束
返回 (0)


.子程序 取背景颜色, 整数型, , 
.如果真 (大于 (全局.句柄, 0))
    返回 (全局.背景颜色)
.如果真结束
返回 (0)

.子程序 获取焦点, 空白型, , 
.局部变量 z, 整数型, , , 

.如果真 (大于 (全局.句柄, 0))
    赋值 (z, SendMessage (全局.句柄, 425, 0, 相加 (1, 相乘 (1, 65536))))
    SendMessage (全局.句柄, 277, 相加 (相乘 (z, 65536), 5), 0)
    SetFocus (全局.句柄)
.如果真结束


.子程序 列表滚动, 空白型, , 
.参数 滚动到得位置, 整数型, , 

SendMessage (全局.句柄, 277, 相加 (相乘 (滚动到得位置, 65536), 5), 0)

.子程序 取列表范围, 整数型, , 1=左边，2=顶边，3=宽度，4=高度
.参数 需要取位置, 整数型, , 

.如果真 (大于 (全局.句柄, 0))
    .判断开始 (等于 (需要取位置, 1))
        返回 (全局.范围.左边)
    .判断 (等于 (需要取位置, 2))
        返回 (全局.范围.顶边)
    .判断 (等于 (需要取位置, 3))
        返回 (全局.范围.宽度)
    .判断 (等于 (需要取位置, 4))
        返回 (全局.范围.高度)
    .默认
        返回 (0)
    .判断结束
    
.如果真结束
返回 (0)


.子程序 置回调事件, 空白型, 公开, #鼠标，接收回调参数（处于分组, 分组中位置, 状态, 状态中位置）均为整数型
.参数 改变回调的位置, 整数型, , 
.参数 事件, 子程序指针, 可空, 

.如果真 (大于 (全局.句柄, 0))
    .判断开始 (等于 (改变回调的位置, #列表_鼠标_移动))
        .如果 (等于 (是否为空 (事件), 假))
            赋值 (全局.回调.移动回调, 到整数 (事件))
        .否则
            赋值 (全局.回调.移动回调, 0)
        .如果结束
        
        
    .判断 (等于 (改变回调的位置, #列表_鼠标_左键点击))
        .如果 (等于 (是否为空 (事件), 假))
            赋值 (全局.回调.左击回调, 到整数 (事件))
        .否则
            赋值 (全局.回调.左击回调, 0)
            
        .如果结束
        
    .判断 (等于 (改变回调的位置, #列表_鼠标_双击))
        .如果 (等于 (是否为空 (事件), 假))
            赋值 (全局.回调.双击回调, 到整数 (事件))
        .否则
            赋值 (全局.回调.双击回调, 0)
        .如果结束
        
    .判断 (等于 (改变回调的位置, #列表_鼠标_右键点击))
        .如果 (等于 (是否为空 (事件), 假))
            赋值 (全局.回调.右击回调, 到整数 (事件))
        .否则
            赋值 (全局.回调.右击回调, 0)
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 置底图数据, 空白型, , 状态 = #状态_  相乘 *
.参数 修改的位置, 整数型, 可空, 空为全局
.参数 状态, 整数型, 可空, 
.参数 起始颜色, 整数型, 可空, 
.参数 终点颜色, 整数型, 可空, 
.参数 透明度, 整数型, 可空, 
.参数 渐变方式, 整数型, 可空, 
.参数 底图图片, 整数型, 可空, 大于0才会画
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_底图, , , 
.局部变量 数据修改位置, 整数型, , , 
.局部变量 组项, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1)))
        赋值 (数据修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (数据修改位置, 1000)))
        赋值 (数据修改位置, 取整 (到整数 (取文本右边 (到文本 (数据修改位置), 3))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].底图)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].底图)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [数据修改位置], 底图)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.底图)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 底图)
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        
    .判断结束
    
    .如果 (等于 (是否为空 (起始颜色), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (临时.普通静止.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (临时.普通点燃.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (临时.分组点燃.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (临时.分组静止.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (临时.焦点.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (临时.禁止.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (临时.高亮.起始颜色, 起始颜色)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (渐变方式), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (临时.普通静止.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (临时.普通点燃.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (临时.分组点燃.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (临时.分组静止.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (临时.焦点.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (临时.禁止.方式, 渐变方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (临时.高亮.方式, 渐变方式)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (终点颜色), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (临时.普通静止.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (临时.普通点燃.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (临时.分组点燃.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (临时.分组静止.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (临时.焦点.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (临时.禁止.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (临时.高亮.终点颜色, 终点颜色)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (透明度), 假))
        .如果 (小于 (透明度, 0))
            赋值 (透明度, 0)
        .否则
            .如果 (大于 (透明度, 255))
                赋值 (透明度, 255)
            .否则
                
            .如果结束
            
        .如果结束
        
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (临时.普通静止.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (临时.普通点燃.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (临时.分组点燃.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (临时.分组静止.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (临时.焦点.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (临时.禁止.透明度, 透明度)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (临时.高亮.透明度, 透明度)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (底图图片), 假))
        
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (临时.普通静止.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (临时.普通点燃.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (临时.分组点燃.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (临时.分组静止.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (临时.焦点.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (临时.禁止.底图图片, 底图图片)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (临时.高亮.底图图片, 底图图片)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (是否为空 (修改的位置))
            赋值 (全局.底图, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
        .默认
            赋值 (项目 [修改的位置], 底图, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].底图, 临时)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].底图, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [数据修改位置], 底图, 临时)
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
    
    
.如果真结束



.子程序 置文本数量, 空白型, , 状态 = #状态_  相乘 *
.参数 修改的位置, 整数型, 可空, 
.参数 状态, 整数型, , 
.参数 数量, 整数型, , 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_文本, , , 
.局部变量 组项, 整数型, , , 
.局部变量 数据修改位置, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改的位置, -1), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1)))
        赋值 (数据修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (数据修改位置, 1000)))
        赋值 (数据修改位置, 取整 (到整数 (取文本右边 (到文本 (数据修改位置), 3))))
        
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].文本)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].文本)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [数据修改位置], 文本)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.文本)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 文本)
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        
    .判断结束
    
    
    .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
        赋值 (临时.普通静止.数量, 数量)
        重定义_文本 (数量, 临时.普通静止)
        
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
        赋值 (临时.普通点燃.数量, 数量)
        重定义_文本 (数量, 临时.普通点燃)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
        赋值 (临时.分组点燃.数量, 数量)
        重定义_文本 (数量, 临时.分组点燃)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
        赋值 (临时.分组静止.数量, 数量)
        重定义_文本 (数量, 临时.分组静止)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
        赋值 (临时.焦点.数量, 数量)
        重定义_文本 (数量, 临时.焦点)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
        赋值 (临时.禁止.数量, 数量)
        重定义_文本 (数量, 临时.禁止)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
        赋值 (临时.高亮.数量, 数量)
        重定义_文本 (数量, 临时.高亮)
    .否则
        
    .如果结束
    
    
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (全局.文本, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
        .默认
            赋值 (项目 [修改的位置], 文本, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].文本, 临时)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].文本, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [数据修改位置], 文本, 临时)
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 置图片数量, 空白型, , 状态 = #状态_  相乘 *
.参数 修改的位置, 整数型, 可空, 空为全局
.参数 状态, 整数型, 可空, 
.参数 数量, 整数型, , 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_图片, , , 
.局部变量 数据修改位置, 整数型, , , 
.局部变量 组项, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改的位置, -1), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1)))
        赋值 (数据修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (数据修改位置, 1000)))
        赋值 (数据修改位置, 取整 (到整数 (取文本右边 (到文本 (数据修改位置), 3))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].图片)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [数据修改位置], 图片)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.图片)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (大于 (修改的位置, 相减 (全局.项目数量, 1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 图片)
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        
    .判断结束
    
    
    .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
        赋值 (临时.普通静止.数量, 数量)
        重定义_图片 (数量, 临时.普通静止)
        赋值 (临时.普通点亮.数量, 数量)
        重定义_图片 (数量, 临时.普通点亮)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
        赋值 (临时.普通点燃.数量, 数量)
        重定义_图片 (数量, 临时.普通点燃)
        赋值 (临时.普通点亮.数量, 数量)
        重定义_图片 (数量, 临时.普通点亮)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
        赋值 (临时.分组点燃.数量, 数量)
        重定义_图片 (数量, 临时.分组点燃)
        赋值 (临时.分组点亮.数量, 数量)
        重定义_图片 (数量, 临时.分组点亮)
        
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
        赋值 (临时.分组静止.数量, 数量)
        重定义_图片 (数量, 临时.分组静止)
        赋值 (临时.分组点亮.数量, 数量)
        重定义_图片 (数量, 临时.分组点亮)
        
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
        赋值 (临时.焦点.数量, 数量)
        重定义_图片 (数量, 临时.焦点)
        赋值 (临时.焦点点亮.数量, 数量)
        重定义_图片 (数量, 临时.焦点点亮)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
        赋值 (临时.禁止.数量, 数量)
        重定义_图片 (数量, 临时.禁止)
    .否则
        
    .如果结束
    .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
        赋值 (临时.高亮.数量, 数量)
        重定义_图片 (数量, 临时.高亮)
        赋值 (临时.高亮点亮.数量, 数量)
        重定义_图片 (数量, 临时.高亮点亮)
        
    .否则
        
    .如果结束
    
    
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (全局.图片, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
        .默认
            赋值 (项目 [修改的位置], 图片, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片, 临时)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].图片, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [数据修改位置], 图片, 临时)
            .如果结束
            
        .如果结束
        
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 置文本数据, 空白型, , 状态 = #状态_  相乘 * 同为一个修改地址才能加入多个
.参数 修改的位置, 整数型, 可空, 空为全局
.参数 状态, 整数型, , 状态 = #状态_  相乘 *
.参数 修改地址, 整数型, , 
.参数 文本内容, 文本型, 可空, 
.参数 文本风格, 整数型, 可空, 
.参数 文本大小, 整数型, 可空, 
.参数 文本颜色, 整数型, 可空, 
.参数 文本范围, 自建矩形, 可空, 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_文本, , , 
.局部变量 数组位置, 整数型, , , 
.局部变量 自动范围, 自建矩形, , , 
.局部变量 文本状态, 文本信息, , , 
.局部变量 组项, 整数型, , , 
.局部变量 修改位置, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改地址, 0), 大于 (修改的位置, -1), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1)))
        赋值 (修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (修改位置, 1000)))
        赋值 (修改位置, 取整 (到整数 (取文本右边 (到文本 (修改位置), 3))))
        
        .如果 (大于或等于 (修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].文本)
        .否则
            .如果 (等于 (修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].文本)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [修改位置], 文本)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.文本)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 文本)
                
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        返回 ()
    .判断结束
    
    
    .判断开始 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (修改地址, 临时.普通静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (修改地址, 临时.普通点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (修改地址, 临时.分组静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (修改地址, 临时.分组点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (修改地址, 临时.焦点.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (修改地址, 临时.禁止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (修改地址, 临时.高亮.数量)))
        赋值 (数组位置, 修改地址)
        返回 ()
    .默认
        
    .判断结束
    
    .如果 (大于或等于 (数组位置, 1))
        .如果 (等于 (是否为空 (文本内容), 假))
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
                赋值 (临时.普通静止.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
                赋值 (临时.普通点燃.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
                赋值 (临时.分组点燃.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
                赋值 (临时.分组静止.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
                赋值 (临时.焦点.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
                赋值 (临时.禁止.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
                赋值 (临时.高亮.文本 [数组位置], 文本内容)
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (是否为空 (文本风格), 假))
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
                赋值 (临时.普通静止.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
                赋值 (临时.普通点燃.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
                赋值 (临时.分组点燃.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
                赋值 (临时.分组静止.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
                赋值 (临时.焦点.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
                赋值 (临时.禁止.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
                赋值 (临时.高亮.风格 [数组位置], 文本风格)
            .否则
                
            .如果结束
            
            
        .否则
            
        .如果结束
        .如果 (等于 (是否为空 (文本大小), 假))
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
                赋值 (临时.普通静止.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
                赋值 (临时.普通点燃.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
                赋值 (临时.分组点燃.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
                赋值 (临时.分组静止.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
                赋值 (临时.焦点.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
                赋值 (临时.禁止.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
                赋值 (临时.高亮.大小 [数组位置], 文本大小)
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (是否为空 (文本颜色), 假))
            .如果 (等于 (文本颜色, #黑色))
                赋值 (文本颜色, 取颜色值 (0, 0, 1))
            .否则
                
            .如果结束
            
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
                赋值 (临时.普通静止.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
                赋值 (临时.普通点燃.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
                赋值 (临时.分组点燃.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
                赋值 (临时.分组静止.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
                赋值 (临时.焦点.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
                赋值 (临时.禁止.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
                赋值 (临时.高亮.颜色 [数组位置], 文本颜色)
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (是否为空 (文本范围), 假))
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
                赋值 (临时.普通静止.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
                赋值 (临时.普通点燃.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
                赋值 (临时.分组点燃.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
                赋值 (临时.分组静止.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
                赋值 (临时.焦点.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
                赋值 (临时.禁止.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
                赋值 (临时.高亮.范围 [数组位置], 文本范围)
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (全局.文本, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
            
        .默认
            赋值 (项目 [修改的位置], 文本, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于或等于 (修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].文本, 临时)
        .否则
            .如果 (等于 (修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].文本, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [修改位置], 文本, 临时)
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 置图片数据, 空白型, , 状态 = #状态_  相乘 * 同为一个修改地址才能加入多个
.参数 修改的位置, 整数型, 可空, 空为全局
.参数 状态, 整数型, , 
.参数 修改地址, 整数型, , 
.参数 图片位置, 整数型, 可空, 
.参数 图片范围, 自建矩形, 可空, 
.参数 边框位置, 整数型, 可空, 
.参数 边框范围, 自建矩形, 可空, 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_图片, , , 
.局部变量 数组位置, 整数型, , , 
.局部变量 文本状态, 图片信息, , , 
.局部变量 数据修改位置, 整数型, , , 
.局部变量 组项, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改地址, -1)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1), 大于 (状态, 0), 小于或等于 (状态, 510510)))
        赋值 (数据修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (数据修改位置, 1000)))
        赋值 (数据修改位置, 取整 (到整数 (取文本右边 (到文本 (数据修改位置), 3))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].图片)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [数据修改位置], 图片)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.图片)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 图片)
                
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        
    .判断结束
    
    
    .判断开始 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (修改地址, 临时.普通静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (修改地址, 临时.普通点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (修改地址, 临时.分组静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (修改地址, 临时.分组点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (修改地址, 临时.焦点.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (修改地址, 临时.禁止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (修改地址, 临时.高亮.数量)))
        赋值 (数组位置, 修改地址)
    .默认
        返回 ()
    .判断结束
    
    .如果 (小于 (数组位置, 1))
        返回 ()
    .否则
        
    .如果结束
    
    .如果 (并且 (等于 (是否为空 (图片位置), 假), 大于或等于 (图片位置, 0), 小于或等于 (图片位置, 取数组成员数 (图片载入信息))))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (数组位置, 临时.普通静止.数量)))
            赋值 (临时.普通静止.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (数组位置, 临时.普通点燃.数量)))
            赋值 (临时.普通点燃.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (数组位置, 临时.分组点燃.数量)))
            赋值 (临时.分组点燃.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (数组位置, 临时.分组静止.数量)))
            赋值 (临时.分组静止.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (数组位置, 临时.焦点.数量)))
            赋值 (临时.焦点.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (数组位置, 临时.禁止.数量)))
            赋值 (临时.禁止.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (数组位置, 临时.高亮.数量)))
            赋值 (临时.高亮.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (图片范围), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (数组位置, 临时.普通静止.数量)))
            赋值 (临时.普通静止.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (数组位置, 临时.普通点燃.数量)))
            赋值 (临时.普通点燃.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (数组位置, 临时.分组点燃.数量)))
            赋值 (临时.分组点燃.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (数组位置, 临时.分组静止.数量)))
            赋值 (临时.分组静止.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (数组位置, 临时.焦点.数量)))
            赋值 (临时.焦点.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (数组位置, 临时.禁止.数量)))
            赋值 (临时.禁止.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (数组位置, 临时.高亮.数量)))
            赋值 (临时.高亮.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (边框范围), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (数组位置, 临时.普通静止.数量)))
            赋值 (临时.普通静止.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (数组位置, 临时.普通点燃.数量)))
            赋值 (临时.普通点燃.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (数组位置, 临时.分组点燃.数量)))
            赋值 (临时.分组点燃.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (数组位置, 临时.分组静止.数量)))
            赋值 (临时.分组静止.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (数组位置, 临时.焦点.数量)))
            赋值 (临时.焦点.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (数组位置, 临时.禁止.数量)))
            赋值 (临时.禁止.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (数组位置, 临时.高亮.数量)))
            赋值 (临时.高亮.边框范围 [数组位置], 边框范围)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (边框位置), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 小于或等于 (数组位置, 临时.普通静止.数量)))
            赋值 (临时.普通静止.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0), 小于或等于 (数组位置, 临时.普通点燃.数量)))
            赋值 (临时.普通点燃.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0), 小于或等于 (数组位置, 临时.分组点燃.数量)))
            赋值 (临时.分组点燃.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 小于或等于 (数组位置, 临时.分组静止.数量)))
            赋值 (临时.分组静止.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_焦点), 0), 小于或等于 (数组位置, 临时.焦点.数量)))
            赋值 (临时.焦点.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_禁止), 0), 小于或等于 (数组位置, 临时.禁止.数量)))
            赋值 (临时.禁止.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #状态_高亮), 0), 小于或等于 (数组位置, 临时.高亮.数量)))
            赋值 (临时.高亮.边框位置 [数组位置], 边框位置)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (全局.图片, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
        .默认
            赋值 (项目 [修改的位置], 图片, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (修改的位置, 65535), 大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片, 临时)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].图片, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [数据修改位置], 图片, 临时)
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束


.子程序 置图片数据_点亮, 空白型, , 状态 = #点亮_  相乘 * 同为一个修改地址才能加入多个 点亮方式初始为0
.参数 修改的位置, 整数型, 可空, 空为全局
.参数 状态, 整数型, , 
.参数 修改地址, 整数型, , 
.参数 图片位置, 整数型, 可空, 
.参数 图片范围, 自建矩形, 可空, 
.参数 点亮方式, 整数型, 可空, 0= 不点亮  1 = 图片  2  = 填充  3  =  填充后画图片
.参数 填充颜色_起始, 整数型, 可空, 
.参数 填充颜色_终点, 整数型, 可空, 
.参数 透明度, 整数型, 可空, 
.参数 渐变方式, 整数型, 可空, 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_图片, , , 
.局部变量 数组位置, 整数型, , , 
.局部变量 文本状态, 图片信息, , , 
.局部变量 数据修改位置, 整数型, , , 
.局部变量 组项, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改地址, -1), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .判断开始 (并且 (大于 (修改的位置, 65535), 大于 (分组项目 [1].分组位置, -1)))
        赋值 (数据修改位置, 相减 (修改的位置, 65535))
        赋值 (组项, 取整 (相除 (数据修改位置, 1000)))
        赋值 (数据修改位置, 取整 (到整数 (取文本右边 (到文本 (数据修改位置), 3))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (临时, 分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (临时, 分组项目 [组项], 成员 [1].图片)
            .否则
                赋值 (临时, 分组项目 [组项], 成员 [数据修改位置], 图片)
            .如果结束
            
        .如果结束
        
    .判断 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (临时, 全局.图片)
        .判断 (大于 (修改的位置, -1))
            赋值 (修改的位置, 相加 (修改的位置, 1))
            .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
                返回 ()
            .默认
                赋值 (临时, 项目 [修改的位置], 图片)
                
            .判断结束
            
        .默认
            返回 ()
        .判断结束
        
    .默认
        
    .判断结束
    
    
    .判断开始 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (修改地址, 临时.普通点亮.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (修改地址, 临时.分组点亮.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (修改地址, 临时.焦点点亮.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (修改地址, 临时.高亮点亮.数量)))
        赋值 (数组位置, 修改地址)
    .默认
        返回 ()
    .判断结束
    
    .如果 (小于 (数组位置, 1))
        返回 ()
    .否则
        
    .如果结束
    
    
    
    .如果 (并且 (等于 (是否为空 (图片位置), 假), 大于或等于 (图片位置, 0), 小于或等于 (图片位置, 取数组成员数 (图片载入信息))))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.图片信息 [数组位置], 图片位置)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (图片范围), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.图片范围 [数组位置], 图片范围)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (点亮方式), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.图片方式 [数组位置], 点亮方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.图片方式 [数组位置], 点亮方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.图片方式 [数组位置], 点亮方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.图片方式 [数组位置], 点亮方式)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (渐变方式), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.渐变方式 [数组位置], 渐变方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.渐变方式 [数组位置], 渐变方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.渐变方式 [数组位置], 渐变方式)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.渐变方式 [数组位置], 渐变方式)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (透明度), 假))
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.透明度 [数组位置], 透明度)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.透明度 [数组位置], 透明度)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.透明度 [数组位置], 透明度)
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.透明度 [数组位置], 透明度)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (填充颜色_起始), 假))
        .如果 (等于 (填充颜色_起始, #黑色))
            赋值 (填充颜色_起始, 取颜色值 (0, 0, 1))
        .否则
            
        .如果结束
        
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.起始颜色 [数组位置], RGB到ARGB (填充颜色_起始, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.起始颜色 [数组位置], RGB到ARGB (填充颜色_起始, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.起始颜色 [数组位置], RGB到ARGB (填充颜色_起始, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.起始颜色 [数组位置], RGB到ARGB (填充颜色_起始, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (填充颜色_终点), 假))
        .如果 (等于 (填充颜色_终点, #黑色))
            赋值 (填充颜色_终点, 取颜色值 (0, 0, 1))
        .否则
            
        .如果结束
        
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_普通), 0), 小于或等于 (数组位置, 临时.普通点亮.数量)))
            赋值 (临时.普通点亮.终点颜色 [数组位置], RGB到ARGB (填充颜色_终点, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_分组), 0), 小于或等于 (数组位置, 临时.分组点亮.数量)))
            赋值 (临时.分组点亮.终点颜色 [数组位置], RGB到ARGB (填充颜色_终点, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_焦点), 0), 小于或等于 (数组位置, 临时.焦点点亮.数量)))
            赋值 (临时.焦点点亮.终点颜色 [数组位置], RGB到ARGB (填充颜色_终点, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        .如果 (并且 (等于 (求余数 (到数值 (状态), #点亮_高亮), 0), 小于或等于 (数组位置, 临时.高亮点亮.数量)))
            赋值 (临时.高亮点亮.终点颜色 [数组位置], RGB到ARGB (填充颜色_终点, 临时.普通点亮.透明度 [数组位置]))
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    .判断开始 (小于或等于 (修改的位置, 65535))
        .判断开始 (等于 (是否为空 (修改的位置), 真))
            赋值 (全局.图片, 临时)
            .如果 (等于 (是否重绘, 真))
                重绘 (65536)
            .否则
                
            .如果结束
            
            
        .默认
            赋值 (项目 [修改的位置], 图片, 临时)
            赋值 (修改的位置, 相减 (修改的位置, 1))
            .如果 (等于 (是否重绘, 真))
                重绘 (修改的位置)
            .否则
                
            .如果结束
            
        .判断结束
        
    .判断 (并且 (大于 (组项, 0), 大于 (分组项目 [1].分组位置, -1), 小于或等于 (组项, 取数组成员数 (分组项目))))
        .如果 (大于或等于 (数据修改位置, 取数组成员数 (分组项目 [组项], 成员)))
            赋值 (分组项目 [组项], 成员 [取数组成员数 (分组项目 [组项], 成员)].图片, 临时)
        .否则
            .如果 (小于或等于 (数据修改位置, 0))
                赋值 (分组项目 [组项], 成员 [1].图片, 临时)
            .否则
                赋值 (分组项目 [组项], 成员 [数据修改位置], 图片, 临时)
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
    
.如果真结束


.子程序 取文本大小, 整数型, , 状态 = #状态_  只能一个！
.参数 查询项目位置, 整数型, 可空, 
.参数 状态, 整数型, , 
.参数 查询地址, 整数型, , 

.局部变量 修改的位置, 整数型, , , 
.局部变量 临时, 状态_文本, , , 
.局部变量 修改地址, 整数型, , , 
.局部变量 数组位置, 整数型, , , 

.如果真 (或者 (并且 (大于 (全局.句柄, 0), 大于 (修改地址, -1), 大于 (查询项目位置, -1), 大于 (状态, 0)), 小于或等于 (状态, 17)))
    赋值 (修改的位置, 查询项目位置)
    赋值 (修改地址, 查询地址)
    .判断开始 (等于 (是否为空 (查询项目位置), 真))
        赋值 (临时, 全局.文本)
    .判断 (大于 (修改的位置, -1))
        赋值 (修改的位置, 相加 (修改的位置, 1))
        .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
            返回 (0)
        .默认
            赋值 (临时, 项目 [修改的位置], 文本)
            
        .判断结束
        
    .默认
        返回 (0)
    .判断结束
    
    .判断开始 (并且 (等于 (状态, #状态_普通静止), 小于或等于 (修改地址, 临时.普通静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_分组静止), 小于或等于 (修改地址, 临时.分组静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_普通点燃), 小于或等于 (修改地址, 临时.普通点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_分组点燃), 小于或等于 (修改地址, 临时.分组点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_焦点), 小于或等于 (修改地址, 临时.焦点.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_禁止), 小于或等于 (修改地址, 临时.禁止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_高亮), 小于或等于 (修改地址, 临时.高亮.数量)))
        赋值 (数组位置, 修改地址)
    .默认
        返回 (0)
    .判断结束
    
    .判断开始 (等于 (状态, #状态_普通静止))
        返回 (临时.普通静止.大小 [数组位置])
    .判断 (等于 (状态, #状态_分组静止))
        返回 (临时.分组静止.大小 [数组位置])
    .判断 (等于 (状态, #状态_普通点燃))
        返回 (临时.普通点燃.大小 [数组位置])
    .判断 (等于 (状态, #状态_分组点燃))
        返回 (临时.分组点燃.大小 [数组位置])
    .判断 (等于 (状态, #状态_焦点))
        返回 (临时.焦点.大小 [数组位置])
    .判断 (等于 (状态, #状态_禁止))
        返回 (临时.禁止.大小 [数组位置])
    .判断 (等于 (状态, #状态_高亮))
        返回 (临时.高亮.大小 [数组位置])
    .默认
        
    .判断结束
    
    
.如果真结束
返回 (0)

.子程序 取文本内容, 文本型, , 状态 = #状态_  只能一个！
.参数 查询项目位置, 整数型, 可空, 
.参数 状态, 整数型, , 
.参数 查询地址, 整数型, , 

.局部变量 修改的位置, 整数型, , , 
.局部变量 临时, 状态_文本, , , 
.局部变量 修改地址, 整数型, , , 
.局部变量 数组位置, 整数型, , , 

.如果真 (或者 (并且 (大于 (全局.句柄, 0), 大于 (修改地址, -1), 大于 (查询项目位置, -1), 大于 (状态, 0)), 小于或等于 (状态, 17)))
    赋值 (修改的位置, 查询项目位置)
    赋值 (修改地址, 查询地址)
    
    .判断开始 (等于 (是否为空 (查询项目位置), 真))
        赋值 (临时, 全局.文本)
    .判断 (大于 (修改的位置, -1))
        赋值 (修改的位置, 相加 (修改的位置, 1))
        .判断开始 (或者 (大于 (修改的位置, 相减 (全局.项目数量, 1)), 小于 (修改的位置, -1)))
            返回 (“”)
        .默认
            赋值 (临时, 项目 [修改的位置], 文本)
            
        .判断结束
        
    .默认
        返回 (“”)
    .判断结束
    
    .判断开始 (并且 (等于 (状态, #状态_普通静止), 小于或等于 (修改地址, 临时.普通静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_分组静止), 小于或等于 (修改地址, 临时.分组静止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_普通点燃), 小于或等于 (修改地址, 临时.普通点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_分组点燃), 小于或等于 (修改地址, 临时.分组点燃.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_焦点), 小于或等于 (修改地址, 临时.焦点.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_禁止), 小于或等于 (修改地址, 临时.禁止.数量)))
        赋值 (数组位置, 修改地址)
    .判断 (并且 (等于 (状态, #状态_高亮), 小于或等于 (修改地址, 临时.高亮.数量)))
        赋值 (数组位置, 修改地址)
    .默认
        返回 (“”)
    .判断结束
    
    .判断开始 (等于 (状态, #状态_普通静止))
        返回 (临时.普通静止.文本 [数组位置])
    .判断 (等于 (状态, #状态_分组静止))
        返回 (临时.分组静止.文本 [数组位置])
    .判断 (等于 (状态, #状态_普通点燃))
        返回 (临时.普通点燃.文本 [数组位置])
    .判断 (等于 (状态, #状态_分组点燃))
        返回 (临时.分组点燃.文本 [数组位置])
    .判断 (等于 (状态, #状态_焦点))
        返回 (临时.焦点.文本 [数组位置])
    .判断 (等于 (状态, #状态_禁止))
        返回 (临时.禁止.文本 [数组位置])
    .判断 (等于 (状态, #状态_高亮))
        返回 (临时.高亮.文本 [数组位置])
    .默认
        
    .判断结束
    
.如果真结束
返回 (“”)

.子程序 置顶部划痕, 空白型, , 状态 = #状态_  相乘 *
.参数 状态, 整数型, , 
.参数 是否画划痕, 逻辑型, 可空, 
.参数 起始颜色, 整数型, 可空, 
.参数 终点颜色, 整数型, 可空, 
.参数 方式, 整数型, 可空, 
.参数 范围, 自建矩形, 可空, 

.局部变量 临时, 边框信息, , , 
.局部变量 边框状态, 状态_边框, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    赋值 (边框状态, 全局.边框)
    
    .如果 (等于 (是否为空 (是否画划痕), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.普通静止.是否划痕, 真)
            .否则
                赋值 (边框状态.普通静止.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.普通点燃.是否划痕, 真)
            .否则
                赋值 (边框状态.普通点燃.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.分组点燃.是否划痕, 真)
            .否则
                赋值 (边框状态.分组点燃.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.分组静止.是否划痕, 真)
            .否则
                赋值 (边框状态.分组静止.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.焦点.是否划痕, 真)
            .否则
                赋值 (边框状态.焦点.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.高亮.是否划痕, 真)
            .否则
                赋值 (边框状态.高亮.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            .如果 (等于 (是否画划痕, 真))
                赋值 (边框状态.禁止.是否划痕, 真)
            .否则
                赋值 (边框状态.禁止.是否划痕, 假)
            .如果结束
            
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (起始颜色), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (边框状态.普通静止.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (边框状态.普通点燃.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (边框状态.分组点燃.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (边框状态.分组静止.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (边框状态.焦点.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (边框状态.高亮.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (边框状态.禁止.顶部划痕起始颜色, 起始颜色)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (终点颜色), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (边框状态.普通静止.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (边框状态.普通点燃.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (边框状态.分组点燃.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (边框状态.分组静止.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (边框状态.焦点.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (边框状态.高亮.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (边框状态.禁止.顶部划痕终点颜色, 终点颜色)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (方式), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (边框状态.普通静止.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (边框状态.普通点燃.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (边框状态.分组点燃.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (边框状态.分组静止.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (边框状态.焦点.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (边框状态.高亮.划痕方式, 方式)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (边框状态.禁止.划痕方式, 方式)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (范围), 假))
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0))
            赋值 (边框状态.普通静止.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_普通点燃), 0))
            赋值 (边框状态.普通点燃.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组点燃), 0))
            赋值 (边框状态.分组点燃.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0))
            赋值 (边框状态.分组静止.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (边框状态.焦点.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (边框状态.高亮.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (边框状态.禁止.顶部划痕范围, 范围)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    
    赋值 (全局.边框, 边框状态)
    重绘 (65536)
.如果真结束
返回 ()

.子程序 清除列表, 空白型, , 
.局部变量 临时项目, 项目信息, , , 
.局部变量 临时分组, 分组成员, , , 
.局部变量 文本, 文本型, , , 


清除数组 (分组项目)
清除数组 (项目)
SendMessage (全局.句柄, 388, 0, 0)
赋值 (全局.项目数量, 1)
赋值 (临时项目.是否分组, 假)
赋值 (临时项目.是否打开, 假)
赋值 (临时项目.是否禁止, 假)
加入成员 (项目, 临时项目)
赋值 (临时分组.分组位置, -1)
加入成员 (分组项目, 临时分组)
赋值 (文本, “ ”)
SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本))
SendMessage (全局.句柄, 416, 0, 全局.普通高度)


.子程序 插入项目, 整数型, , 
.参数 插入位置, 整数型, 可空, 
.参数 组项, 整数型, 可空, 
.参数 是否禁止, 逻辑型, 可空, 默认为假
.参数 是否移动到插入位置, 逻辑型, 可空, 默认为假
.参数 是否点亮项目, 逻辑型, 可空, 默认为假
.参数 是否重绘插入位置, 逻辑型, 可空, 默认为假

.局部变量 临时, 项目信息, , , 
.局部变量 真实位置, 整数型, , , 
.局部变量 组项真实位置, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 列表插入位置, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (大于 (全局.句柄, 0))
    赋值 (临时.是否分组, 假)
    赋值 (临时.是否打开, 假)
    .如果 (或者 (是否为空 (是否禁止), 等于 (是否禁止, 假)))
        赋值 (临时.是否禁止, 假)
    .否则
        赋值 (临时.是否禁止, 真)
    .如果结束
    
    赋值 (临时.图片, 全局.图片)
    赋值 (临时.文本, 全局.文本)
    赋值 (临时.底图, 全局.底图)
    
    赋值 (全局.项目数量, 相加 (全局.项目数量, 1))
    赋值 (组项真实位置, -1)
    .判断开始 (等于 (分组项目 [1].分组位置, -1))
        .判断开始 (或者 (是否为空 (插入位置), 等于 (插入位置, 0)))
            赋值 (真实位置, 相减 (全局.项目数量, 1))
            赋值 (分组项目 [1].分组个数, 相加 (分组项目 [1].分组个数, 1))
            
        .判断 (大于 (插入位置, 0))
            .判断开始 (大于 (插入位置, 全局.项目数量))
                赋值 (插入位置, 相减 (全局.项目数量, 1))
            .默认
                
            .判断结束
            
            赋值 (真实位置, 插入位置)
            赋值 (分组项目 [1].分组个数, 相加 (分组项目 [1].分组个数, 1))
            
        .默认
            
        .判断结束
        
        
        赋值 (组项, 0)
        插入成员 (项目, 真实位置, 临时)
        赋值 (文本, “ ”)
        赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
        
        .判断开始 (大于 (取数组成员数 (分组项目), 1))
            SendMessage (全局.句柄, 416, 相加 (全局.焦点, 1), 全局.普通高度)
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.焦点高度)
            
        .判断 (等于 (取数组成员数 (分组项目), 1))
            .如果 (大于 (全局.焦点, -1))
                赋值 (全局.焦点, 相加 (全局.焦点, 1))
                重绘 (全局.焦点)
            .否则
                
            .如果结束
            .如果 (或者 (并且 (大于 (全局.高亮, -1), 等于 (是否为空 (是否点亮项目), 假)), 等于 (是否点亮项目, 真)))
                赋值 (全局.高亮, 相加 (全局.高亮, 1))
                重绘 (全局.高亮)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        .如果 (不等于 (列表插入位置, 全局.焦点))
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
        .否则
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
        .如果结束
        
        
        .如果 (或者 (等于 (是否为空 (是否重绘插入位置), 真), 等于 (是否重绘插入位置, 假)))
            
        .否则
            重绘 (列表插入位置)
        .如果结束
        
        赋值 (真实位置, 相减 (真实位置, 1))
        .判断开始 (等于 (是否移动到插入位置, 真))
            .如果 (小于 (真实位置, 相减 (全局.项目数量, 1, 相除 (全局.范围.高度, 全局.普通高度))))
                .如果 (小于或等于 (真实位置, 取整 (相除 (全局.范围.高度, 全局.普通高度))))
                    列表滚动 (0)
                .否则
                    
                .如果结束
                
            .否则
                列表滚动 (真实位置)
            .如果结束
            
        .默认
            
        .判断结束
        
        
        .判断开始 (或者 (等于 (是否为空 (是否点亮项目), 真), 等于 (是否点亮项目, 假)))
            
        .默认
            画项目 (全局.句柄, 真实位置, 2)
            画项目 (全局.句柄, 全局.高亮, 0)
            赋值 (全局.高亮, 真实位置)
        .判断结束
        
        
        返回 (真实位置)
    .判断 (大于 (分组项目 [1].分组位置, -1))
        .判断开始 (或者 (是否为空 (插入位置), 等于 (插入位置, 0)))
            .判断开始 (或者 (等于 (组项, 0), 大于或等于 (组项, 取数组成员数 (分组项目)), 等于 (分组项目 [1].分组位置, -1), 小于 (组项, 1)))
                赋值 (真实位置, 相减 (全局.项目数量, 1))
                赋值 (分组项目 [取数组成员数 (分组项目)].分组个数, 相加 (分组项目 [取数组成员数 (分组项目)].分组个数, 1))
                赋值 (组项, 取数组成员数 (分组项目))
                .判断开始 (大于 (分组项目 [1].分组位置, -1))
                    赋值 (组项真实位置, 分组项目 [取数组成员数 (分组项目)].分组位置)
                .默认
                    
                .判断结束
                
                
                
            .判断 (并且 (小于 (组项, 取数组成员数 (分组项目)), 大于 (分组项目 [1].分组位置, -1)))
                赋值 (真实位置, 相加 (分组项目 [相加 (组项, 1)].分组位置, 1))
                赋值 (分组项目 [组项], 分组个数, 相加 (分组项目 [组项], 分组个数, 1))
                .判断开始 (大于 (分组项目 [1].分组位置, -1))
                    赋值 (组项真实位置, 分组项目 [组项], 分组位置)
                .默认
                    
                .判断结束
                
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果 (大于 (i, 组项))
                        赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 1))
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
            .默认
                
            .判断结束
            
            
        .判断 (大于 (插入位置, 0))
            .判断开始 (或者 (等于 (组项, 0), 大于或等于 (组项, 取数组成员数 (分组项目)), 等于 (分组项目 [1].分组位置, -1), 小于 (组项, 1)))
                .判断开始 (大于或等于 (相加 (插入位置, 分组项目 [取数组成员数 (分组项目)].分组位置), 相减 (全局.项目数量, 1)))
                    赋值 (真实位置, 相减 (全局.项目数量, 1))
                    赋值 (分组项目 [取数组成员数 (分组项目)].分组个数, 相加 (分组项目 [取数组成员数 (分组项目)].分组个数, 1))
                    赋值 (组项, 取数组成员数 (分组项目))
                    .判断开始 (大于 (分组项目 [1].分组位置, -1))
                        赋值 (组项真实位置, 分组项目 [取数组成员数 (分组项目)].分组位置)
                    .默认
                        
                    .判断结束
                    
                    
                .判断 (小于 (相加 (插入位置, 分组项目 [取数组成员数 (分组项目)].分组位置), 相减 (全局.项目数量, 1)))
                    赋值 (真实位置, 相加 (分组项目 [取数组成员数 (分组项目)].分组位置, 插入位置, 1))
                    赋值 (分组项目 [取数组成员数 (分组项目)].分组个数, 相加 (分组项目 [取数组成员数 (分组项目)].分组个数, 1))
                    .判断开始 (大于 (分组项目 [1].分组位置, -1))
                        赋值 (组项真实位置, 分组项目 [取数组成员数 (分组项目)].分组位置)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
            .判断 (并且 (小于 (组项, 取数组成员数 (分组项目)), 大于 (分组项目 [1].分组位置, -1)))
                
                .判断开始 (大于或等于 (相加 (插入位置, 分组项目 [组项], 分组位置), 分组项目 [相加 (组项, 1)].分组位置))
                    赋值 (真实位置, 相加 (分组项目 [相加 (组项, 1)].分组位置, 1))
                    赋值 (分组项目 [组项], 分组个数, 相加 (分组项目 [组项], 分组个数, 1))
                    .判断开始 (大于 (分组项目 [1].分组位置, -1))
                        赋值 (组项真实位置, 分组项目 [组项], 分组位置)
                    .默认
                        
                    .判断结束
                    
                .判断 (小于 (相加 (插入位置, 分组项目 [组项], 分组位置), 分组项目 [相加 (组项, 1)].分组位置))
                    赋值 (真实位置, 相加 (分组项目 [组项], 分组位置, 插入位置, 1))
                    赋值 (分组项目 [组项], 分组个数, 相加 (分组项目 [组项], 分组个数, 1))
                    .判断开始 (大于 (分组项目 [1].分组位置, -1))
                        赋值 (组项真实位置, 分组项目 [组项], 分组位置)
                    .默认
                        
                    .判断结束
                    
                .默认
                    
                .判断结束
                
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果真 (大于 (i, 组项))
                        赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 1))
                    .如果真结束
                    
                .计次循环尾 ()
                
            .默认
                
            .判断结束
            
            
        .默认
            
        .判断结束
        
        .判断开始 (大于或等于 (组项真实位置, 0))
            .判断开始 (等于 (项目 [相加 (组项真实位置, 1)].是否打开, 假))
                .判断开始 (大于 (插入位置, 999))
                    赋值 (插入位置, 999)
                .判断 (小于 (插入位置, 1))
                    赋值 (插入位置, 0)
                .默认
                    
                .判断结束
                
                .判断开始 (小于 (组项, 1))
                    赋值 (组项, 1)
                .判断 (大于 (组项, 取数组成员数 (分组项目)))
                    赋值 (组项, 取数组成员数 (分组项目))
                .默认
                    
                .判断结束
                
                .判断开始 (或者 (等于 (插入位置, 0), 等于 (是否为空 (插入位置), 真), 大于 (插入位置, 分组项目 [组项], 分组个数)))
                    加入成员 (分组项目 [组项], 成员, 临时)
                    赋值 (插入位置, 取数组成员数 (分组项目 [组项], 成员))
                .默认
                    插入成员 (分组项目 [组项], 成员, 插入位置, 临时)
                .判断结束
                
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果 (大于 (i, 组项))
                        赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, 1))
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
                赋值 (全局.项目数量, 相减 (全局.项目数量, 1))
                返回 (相加 (65535, 插入位置, 相乘 (组项, 1000)))
                
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
        插入成员 (项目, 真实位置, 临时)
        赋值 (文本, “ ”)
        赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
        
        
        .判断开始 (大于 (取数组成员数 (分组项目), 1))
            SendMessage (全局.句柄, 416, 相加 (全局.焦点, 1), 全局.普通高度)
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.焦点高度)
            
        .判断 (等于 (取数组成员数 (分组项目), 1))
            .如果 (大于 (全局.焦点, -1))
                赋值 (全局.焦点, 相加 (全局.焦点, 1))
                重绘 (全局.焦点)
            .否则
                
            .如果结束
            .如果 (或者 (并且 (大于 (全局.高亮, -1), 等于 (是否为空 (是否点亮项目), 假)), 等于 (是否点亮项目, 真)))
                赋值 (全局.高亮, 相加 (全局.高亮, 1))
                重绘 (全局.高亮)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        .如果 (不等于 (列表插入位置, 全局.焦点))
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
        .否则
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
        .如果结束
        
        
        .如果 (或者 (等于 (是否为空 (是否重绘插入位置), 真), 等于 (是否重绘插入位置, 假)))
            
        .否则
            重绘 (列表插入位置)
        .如果结束
        
        赋值 (真实位置, 相减 (真实位置, 1))
        .判断开始 (等于 (是否移动到插入位置, 真))
            .如果 (小于 (真实位置, 相减 (全局.项目数量, 1, 相除 (全局.范围.高度, 全局.普通高度))))
                .如果 (小于或等于 (真实位置, 取整 (相除 (全局.范围.高度, 全局.普通高度))))
                    列表滚动 (0)
                .否则
                    
                .如果结束
                
            .否则
                列表滚动 (真实位置)
            .如果结束
            
        .默认
            
        .判断结束
        
        
        .判断开始 (或者 (等于 (是否为空 (是否点亮项目), 真), 等于 (是否点亮项目, 假)))
            
        .默认
            画项目 (全局.句柄, 真实位置, 2)
            画项目 (全局.句柄, 全局.高亮, 0)
            赋值 (全局.高亮, 真实位置)
        .判断结束
        
        
        返回 (真实位置)
        
    .默认
        
    .判断结束
    
    
    
.如果真结束
返回 (-1)

.子程序 插入组项, 整数型, , 空插入最后项
.参数 插入位置, 整数型, 可空, 
.参数 是否打开, 逻辑型, 可空, 
.参数 是否移动到插入位置, 逻辑型, 可空, 默认为假
.参数 是否重绘插入位置, 逻辑型, 可空, 默认为假

.局部变量 真实位置, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时, 项目信息, , , 
.局部变量 文本, 文本型, , , 
.局部变量 列表插入位置, 整数型, , , 
.局部变量 临时分组, 分组成员, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 等于 (自定义高度, 假)))
    .判断开始 (小于 (分组项目 [1].分组位置, 0))
        赋值 (临时分组.分组位置, 0)
        赋值 (临时分组.分组个数, 相减 (全局.项目数量, 1))
        赋值 (分组项目 [1], 临时分组)
        清除数组 (分组项目 [1].成员)
        赋值 (全局.项目数量, 相加 (全局.项目数量, 1))
        赋值 (真实位置, 1)
        赋值 (临时.图片, 全局.图片)
        赋值 (临时.文本, 全局.文本)
        赋值 (临时.底图, 全局.底图)
        赋值 (临时.是否分组, 真)
        赋值 (临时.是否禁止, 假)
        .判断开始 (或者 (等于 (是否为空 (是否打开), 真), 等于 (是否打开, 假)))
            赋值 (临时.是否打开, 假)
            打开组项 (0)
        .默认
            赋值 (临时.是否打开, 真)
        .判断结束
        
        插入成员 (项目, 1, 临时)
        赋值 (文本, “ ”)
        赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
        
        .如果 (不等于 (列表插入位置, 全局.焦点))
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
        .否则
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
        .如果结束
        
        
        .判断开始 (大于 (取数组成员数 (分组项目), 1))
            SendMessage (全局.句柄, 416, 相加 (全局.焦点, 1), 全局.普通高度)
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.焦点高度)
        .判断 (等于 (取数组成员数 (分组项目), 1))
            .如果 (大于 (全局.焦点, -1))
                赋值 (全局.焦点, 相加 (全局.焦点, 1))
                重绘 (全局.焦点)
            .否则
                
            .如果结束
            .如果 (大于 (全局.高亮, -1))
                赋值 (全局.高亮, 相加 (全局.高亮, 1))
                重绘 (全局.高亮)
            .否则
                
            .如果结束
            
        .默认
            
        .判断结束
        
        .如果 (或者 (等于 (是否为空 (是否重绘插入位置), 真), 等于 (是否重绘插入位置, 假)))
            
        .否则
            重绘 (列表插入位置)
        .如果结束
        
        赋值 (真实位置, 相减 (真实位置, 1))
        .判断开始 (等于 (是否移动到插入位置, 真))
            .如果 (小于 (真实位置, 相减 (全局.项目数量, 1, 相除 (全局.范围.高度, 全局.普通高度))))
                .如果 (小于或等于 (真实位置, 取整 (相除 (全局.范围.高度, 全局.普通高度))))
                    列表滚动 (0)
                .否则
                    
                .如果结束
                
            .否则
                列表滚动 (真实位置)
            .如果结束
            
            
        .默认
            
        .判断结束
        
        返回 (真实位置)
    .判断 (大于 (分组项目 [1].分组位置, -1))
        .判断开始 (或者 (等于 (是否为空 (插入位置), 真), 大于或等于 (插入位置, 取数组成员数 (分组项目)), 小于 (插入位置, 0)))
            赋值 (真实位置, 相加 (相减 (全局.项目数量, 1), 1))
            赋值 (临时分组.分组位置, 相减 (真实位置, 1))
            赋值 (临时分组.分组个数, 0)
            加入成员 (分组项目, 临时分组)
            清除数组 (分组项目 [取数组成员数 (分组项目)].成员)
        .判断 (等于 (是否为空 (插入位置), 假))
            .判断开始 (大于 (插入位置, 0))
                赋值 (真实位置, 相加 (分组项目 [相加 (插入位置, 1)].分组位置, 1))
                赋值 (临时分组.分组位置, 相减 (真实位置, 2))
                赋值 (临时分组.分组个数, 0)
                插入成员 (分组项目, 相加 (插入位置, 1), 临时分组)
                清除数组 (分组项目 [插入位置], 成员)
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果真 (大于 (i, 插入位置))
                        赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 1))
                    .如果真结束
                    
                .计次循环尾 ()
                
            .判断 (等于 (插入位置, 0))
                赋值 (真实位置, 1)
                赋值 (临时分组.分组位置, 0)
                赋值 (临时分组.分组个数, 0)
                插入成员 (分组项目, 1, 临时分组)
                清除数组 (分组项目 [1].成员)
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果真 (大于 (i, 相加 (插入位置, 1)))
                        赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 1))
                    .如果真结束
                    
                .计次循环尾 ()
                
            .默认
                
            .判断结束
            
        .默认
            
        .判断结束
        
        
        赋值 (临时.图片, 全局.图片)
        赋值 (临时.文本, 全局.文本)
        赋值 (临时.底图, 全局.底图)
        赋值 (临时.是否分组, 真)
        赋值 (临时.是否禁止, 假)
        赋值 (全局.项目数量, 相加 (全局.项目数量, 1))
        .判断开始 (或者 (等于 (是否为空 (是否打开), 真), 等于 (是否打开, 真)))
            赋值 (临时.是否打开, 真)
        .默认
            赋值 (临时.是否打开, 假)
        .判断结束
        
        插入成员 (项目, 真实位置, 临时)
        
        赋值 (文本, “ ”)
        赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
        
        .如果 (不等于 (列表插入位置, 全局.焦点))
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
        .否则
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
        .如果结束
        
        
        .判断开始 (大于 (取数组成员数 (分组项目), 1))
            SendMessage (全局.句柄, 416, 相加 (全局.焦点, 1), 全局.普通高度)
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.焦点高度)
            
        .判断 (等于 (取数组成员数 (分组项目), 1))
            .如果 (大于 (全局.焦点, -1))
                赋值 (全局.焦点, 相加 (全局.焦点, 1))
                重绘 (全局.焦点)
            .否则
                
            .如果结束
            .如果 (大于 (全局.高亮, -1))
                赋值 (全局.高亮, 相加 (全局.高亮, 1))
                重绘 (全局.高亮)
            .否则
                
            .如果结束
            
            
        .默认
            
        .判断结束
        
        
        .如果 (或者 (等于 (是否为空 (是否重绘插入位置), 真), 等于 (是否重绘插入位置, 假)))
            
        .否则
            重绘 (列表插入位置)
        .如果结束
        
        赋值 (真实位置, 相减 (真实位置, 1))
        
        .判断开始 (等于 (是否移动到插入位置, 真))
            
            .如果 (小于 (真实位置, 相减 (全局.项目数量, 1, 相除 (全局.范围.高度, 全局.普通高度))))
                .如果 (小于或等于 (真实位置, 取整 (相除 (全局.范围.高度, 全局.普通高度))))
                    列表滚动 (0)
                .否则
                    
                .如果结束
                
            .否则
                列表滚动 (真实位置)
            .如果结束
            
        .默认
            
        .判断结束
        
        返回 (真实位置)
        
    .默认
        返回 (0)
    .判断结束
    
.如果真结束
返回 (0)

.子程序 置分组图片信息or范围, 空白型, , 
.参数 打开图片, 字节集, 可空, 
.参数 关闭图片, 字节集, 可空, 
.参数 范围, 自建矩形, 可空, 

.局部变量 临时, 分组图片, , , 

.如果 (大于 (全局.句柄, 0))
    赋值 (临时, 全局.分组图片)
    .如果 (等于 (是否为空 (打开图片), 假))
        赋值 (临时.打开图片, 打开图片)
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (关闭图片), 假))
        赋值 (临时.关闭图片, 关闭图片)
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (范围), 假))
        赋值 (临时.范围, 范围)
    .否则
        
    .如果结束
    
    赋值 (全局.分组图片, 临时)
.否则
    
.如果结束





.子程序 关闭组项, 空白型, , 
.参数 分组位置, 整数型, , 

.局部变量 i, 整数型, , , 

赋值 (项目 [相加 (分组位置, 1)].是否打开, 假)
画项目 (全局.句柄, 分组位置, 1)
.判断开始 (等于 (分组项目 [取数组成员数 (分组项目)].分组位置, 分组位置))
    .如果 (大于 (分组项目 [取数组成员数 (分组项目)].分组个数, 0))
        .如果 (大于 (全局.高亮, 分组项目 [取数组成员数 (分组项目)].分组位置))
            赋值 (全局.高亮, -1)
        .否则
            
        .如果结束
        .如果 (大于 (全局.焦点, 分组项目 [取数组成员数 (分组项目)].分组位置))
            SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
            赋值 (全局.焦点, -1)
        .否则
            
        .如果结束
        
        
        清除数组 (分组项目 [取数组成员数 (分组项目)].成员)
        内部_删除项目 (分组位置, 取数组成员数 (分组项目), 分组项目 [取数组成员数 (分组项目)].分组个数)
    .否则
        
    .如果结束
    
.默认
    .计次循环首 (取数组成员数 (分组项目), i)
        .如果 (并且 (大于 (分组项目 [i], 分组位置, 分组位置), 不等于 (i, 分组位置)))
            .判断开始 (等于 (i, 1))
                .如果 (大于 (分组项目 [1].分组个数, 0))
                    
                    .如果 (并且 (大于 (全局.高亮, 分组项目 [1].分组位置), 小于或等于 (全局.高亮, 相加 (分组项目 [1].分组位置, 分组项目 [1].分组个数))))
                        赋值 (全局.高亮, -1)
                    .否则
                        
                        
                    .如果结束
                    .如果 (并且 (大于 (全局.焦点, 分组项目 [1].分组位置), 小于或等于 (全局.焦点, 相加 (分组项目 [1].分组位置, 分组项目 [1].分组个数))))
                        SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
                        赋值 (全局.焦点, -1)
                    .否则
                        
                    .如果结束
                    
                    清除数组 (分组项目 [1].成员)
                    内部_删除项目 (分组位置, 1, 分组项目 [1].分组个数)
                .否则
                    
                .如果结束
                
            .判断 (大于 (i, 1))
                .如果 (大于 (分组项目 [相减 (i, 1)].分组个数, 0))
                    .如果 (并且 (大于 (全局.高亮, 分组项目 [相减 (i, 1)].分组位置), 小于或等于 (全局.高亮, 相加 (分组项目 [相减 (i, 1)].分组位置, 分组项目 [相减 (i, 1)].分组个数))))
                        赋值 (全局.高亮, -1)
                    .否则
                        
                    .如果结束
                    .如果 (并且 (大于 (全局.焦点, 分组项目 [相减 (i, 1)].分组位置), 小于或等于 (全局.焦点, 相加 (分组项目 [相减 (i, 1)].分组位置, 分组项目 [相减 (i, 1)].分组个数))))
                        SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
                        赋值 (全局.焦点, -1)
                    .否则
                        
                    .如果结束
                    
                    清除数组 (分组项目 [相减 (i, 1)].成员)
                    内部_删除项目 (分组位置, 相减 (i, 1), 分组项目 [相减 (i, 1)].分组个数)
                .否则
                    
                .如果结束
                
            .默认
                
            .判断结束
            
            跳出循环 ()
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    
.判断结束





.子程序 打开组项, 空白型, , 
.参数 分组位置, 整数型, , 

.局部变量 i, 整数型, , , 

赋值 (项目 [相加 (分组位置, 1)].是否打开, 真)
画项目 (全局.句柄, 分组位置, 1)
.判断开始 (等于 (分组项目 [取数组成员数 (分组项目)].分组位置, 分组位置))
    .如果 (大于 (分组项目 [取数组成员数 (分组项目)].分组个数, 0))
        内部_加入项目 (分组位置, 取数组成员数 (分组项目), 分组项目 [取数组成员数 (分组项目)].分组个数)
        清除数组 (分组项目 [取数组成员数 (分组项目)].成员)
    .否则
        
    .如果结束
    
.默认
    .计次循环首 (取数组成员数 (分组项目), i)
        .如果 (并且 (大于 (分组项目 [i], 分组位置, 分组位置), 不等于 (i, 分组位置)))
            .判断开始 (等于 (i, 1))
                .如果 (大于 (分组项目 [1].分组个数, 0))
                    内部_加入项目 (分组位置, 1, 分组项目 [1].分组个数)
                    清除数组 (分组项目 [1].成员)
                .否则
                    
                .如果结束
                
                跳出循环 ()
            .判断 (大于 (i, 1))
                .如果 (大于 (分组项目 [相减 (i, 1)].分组个数, 0))
                    内部_加入项目 (分组位置, 相减 (i, 1), 分组项目 [相减 (i, 1)].分组个数)
                    清除数组 (分组项目 [相减 (i, 1)].成员)
                .否则
                    
                .如果结束
                
                跳出循环 ()
            .默认
                
            .判断结束
            
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    
.判断结束




.子程序 内部_删除项目, 空白型, , 
.参数 开始项目, 整数型, , 
.参数 组项, 整数型, , 
.参数 个数, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 a, 文本型, , , 
.局部变量 l, 分组成员, , , 


.计次循环首 (个数, i)
    插入成员 (分组项目 [组项], 成员, 1, 项目 [相减 (相加 (开始项目, 个数, 2), i)])
    删除成员 (项目, 相减 (相加 (开始项目, 个数, 2), i), )
    SendMessage (全局.句柄, 386, 相减 (全局.项目数量, i), 0)
.计次循环尾 ()
赋值 (全局.项目数量, 相减 (全局.项目数量, 个数))
.计次循环首 (取数组成员数 (分组项目), i)
    .如果 (大于 (i, 组项))
        赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, 个数))
    .否则
        
    .如果结束
    
.计次循环尾 ()
重绘 (65536)

.子程序 内部_加入项目, 空白型, , 
.参数 开始项目, 整数型, , 
.参数 组项, 整数型, , 
.参数 个数, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 列表插入位置, 整数型, , , 

.计次循环首 (个数, i)
    插入成员 (项目, 相加 (开始项目, i, 1), 分组项目 [组项], 成员 [i])
    赋值 (文本, “ ”)
    赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
    .如果 (不等于 (列表插入位置, 全局.焦点))
        SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
    .否则
        SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
    .如果结束
    
.计次循环尾 ()
赋值 (全局.项目数量, 相加 (全局.项目数量, 个数))
.计次循环首 (取数组成员数 (分组项目), i)
    .如果 (大于 (i, 组项))
        赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 个数))
    .否则
        
    .如果结束
    
.计次循环尾 ()



.子程序 删除项目, 空白型, , 未打开组请勿删除
.参数 删除位置, 整数型, , 

.局部变量 i, 整数型, , , 


.如果 (并且 (大于 (取数组成员数 (项目), 0), 等于 (项目 [相加 (删除位置, 1)].是否分组, 假), 小于或等于 (删除位置, 相减 (全局.项目数量, 1)), 大于 (全局.句柄, 0)))
    .如果 (等于 (删除位置, 全局.焦点))
        赋值 (全局.焦点, -1)
        SendMessage (全局.句柄, 416, 删除位置, 全局.普通高度)
    .否则
        
    .如果结束
    
    删除成员 (项目, 相加 (删除位置, 1), )
    SendMessage (全局.句柄, 386, 全局.项目数量, 0)
    赋值 (实时位置, 0)
    赋值 (上个图片, 0)
    赋值 (全局.现行位置, -1)
    赋值 (全局.项目数量, 相减 (全局.项目数量, 1))
    赋值 (分组项目 [取项目所在分组 (删除位置)].分组个数, 相减 (分组项目 [取项目所在分组 (删除位置)].分组个数, 1))
    
    .计次循环首 (取数组成员数 (分组项目), i)
        .如果 (大于 (分组项目 [i], 分组位置, 删除位置))
            赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, 1))
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    重绘 (65536)
.否则
    
.如果结束


.子程序 清空组项, 空白型, , 
.参数 组项, 整数型, , 

.局部变量 g, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 真实位置, 整数型, , , 



.如果 (并且 (大于 (取数组成员数 (项目), 1), 大于 (组项, 0), 小于 (组项, 取数组成员数 (分组项目)), 大于 (全局.句柄, 0)))
    赋值 (真实位置, 相加 (分组项目 [组项], 分组位置, 1))
    .如果 (并且 (等于 (项目 [真实位置], 是否分组, 真), 小于或等于 (分组项目 [组项], 分组位置, 相减 (全局.项目数量, 1))))
        .如果 (等于 (项目 [真实位置], 是否打开, 真))
            赋值 (g, 相加 (分组项目 [组项], 分组个数, 1))
            .计次循环首 (g, i)
                删除成员 (项目, 相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), )
                .如果 (等于 (相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), 全局.焦点))
                    赋值 (全局.焦点, -1)
                    SendMessage (全局.句柄, 416, 相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), 全局.普通高度)
                .否则
                    
                .如果结束
                
                SendMessage (全局.句柄, 386, 相加 (分组项目 [组项], 分组位置, i), 0)
            .计次循环尾 ()
            
        .否则
            
        .如果结束
        
        赋值 (全局.项目数量, 相减 (全局.项目数量, g))
        赋值 (分组项目 [组项], 分组个数, 0)
        .计次循环首 (取数组成员数 (分组项目), i)
            .如果 (大于 (i, 组项))
                赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, g))
                
            .否则
                
            .如果结束
            
        .计次循环尾 ()
        
    .否则
        
    .如果结束
    
.否则
    
.如果结束


.子程序 删除组项, 空白型, , 
.参数 组项, 整数型, , 

.局部变量 g, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 真实位置, 整数型, , , 

.如果 (并且 (大于 (取数组成员数 (项目), 1), 大于 (组项, 0), 小于 (组项, 取数组成员数 (分组项目)), 大于 (全局.句柄, 0)))
    赋值 (真实位置, 相加 (分组项目 [组项], 分组位置, 1))
    .如果 (并且 (等于 (项目 [真实位置], 是否分组, 真), 小于 (分组项目 [组项], 分组位置, 相减 (全局.项目数量, 1))))
        .如果 (等于 (项目 [真实位置], 是否打开, 真))
            赋值 (g, 相加 (分组项目 [组项], 分组个数, 1))
            .计次循环首 (g, i)
                .如果 (等于 (相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), 全局.焦点))
                    赋值 (全局.焦点, -1)
                    SendMessage (全局.句柄, 416, 相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), 全局.普通高度)
                .否则
                    
                .如果结束
                
                删除成员 (项目, 相减 (相加 (分组项目 [组项], 分组位置, g, 2), i), )
                SendMessage (全局.句柄, 386, 全局.项目数量, 0)
            .计次循环尾 ()
        .否则
            
        .如果结束
        
        赋值 (分组项目 [组项], 分组个数, 0)
        赋值 (全局.项目数量, 相减 (全局.项目数量, g, 1))
        .计次循环首 (取数组成员数 (分组项目), i)
            .如果 (大于 (i, 组项))
                赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, g, 1))
                
            .否则
                
            .如果结束
            
        .计次循环尾 ()
        删除成员 (分组项目, 组项, )
    .否则
        
    .如果结束
    
.否则
    
.如果结束


.子程序 大量插入_开始, 整数型, , 循环之后请结束不然不会显示的！而且会出错 插入位置= 开始项目 ＋ 变量值
.参数 开始项目, 整数型, , 
.参数 组项, 整数型, 可空, 
.参数 变量值, 整数型, 可空, 
.参数 是否禁止, 逻辑型, 可空, 

.局部变量 临时, 项目信息, , , 
.局部变量 文本, 文本型, , , 
.局部变量 列表插入位置, 整数型, , , 
.局部变量 组, 整数型, , , 
.局部变量 插入位置, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (大于 (全局.句柄, 0))
    赋值 (临时.是否分组, 假)
    赋值 (临时.是否打开, 假)
    .如果 (或者 (是否为空 (是否禁止), 等于 (是否禁止, 假)))
        赋值 (临时.是否禁止, 假)
    .否则
        赋值 (临时.是否禁止, 真)
    .如果结束
    
    赋值 (临时.图片, 全局.图片)
    赋值 (临时.文本, 全局.文本)
    赋值 (临时.底图, 全局.底图)
    
    
    .判断开始 (等于 (分组项目 [1].分组位置, -1))
        插入成员 (项目, 相加 (开始项目, 变量值, 1), 临时)
        赋值 (文本, “ ”)
        赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
        .如果 (不等于 (列表插入位置, 全局.焦点))
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
        .否则
            SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
        .如果结束
        
        赋值 (分组插入, 真)
        返回 (相加 (开始项目, 变量值))
    .判断 (大于 (分组项目 [1].分组位置, -1))
        .如果 (或者 (小于 (组项, 1), 等于 (是否为空 (组项), 真)))
            赋值 (组项, 1)
        .否则
            .如果 (大于或等于 (组项, 取数组成员数 (分组项目)))
                取数组成员数 (分组项目)
            .否则
                
            .如果结束
            
        .如果结束
        
        赋值 (组, 相加 (分组项目 [组项], 分组位置, 1))
        .如果 (等于 (项目 [组], 是否打开, 真))
            插入成员 (项目, 相加 (分组项目 [组项], 分组位置, 开始项目, 变量值, 1), 临时)
            赋值 (文本, “ ”)
            赋值 (列表插入位置, SendMessage (全局.句柄, 384, 0, 取变量数据地址 (文本)))
            .如果 (不等于 (列表插入位置, 全局.焦点))
                SendMessage (全局.句柄, 416, 列表插入位置, 全局.普通高度)
            .否则
                SendMessage (全局.句柄, 416, 列表插入位置, 全局.焦点高度)
            .如果结束
            
            赋值 (分组插入, 真)
            返回 (相加 (分组项目 [组项], 分组位置, 开始项目, 变量值))
        .否则
            .如果 (等于 (项目 [组], 是否打开, 假))
                赋值 (插入位置, 相加 (开始项目, 变量值))
                
                .判断开始 (大于 (插入位置, 999))
                    赋值 (插入位置, 999)
                .判断 (小于 (插入位置, 1))
                    赋值 (插入位置, 0)
                .默认
                    
                .判断结束
                
                .判断开始 (或者 (等于 (插入位置, 0), 大于 (插入位置, 分组项目 [组项], 分组个数)))
                    加入成员 (分组项目 [组项], 成员, 临时)
                    赋值 (插入位置, 取数组成员数 (分组项目 [组项], 成员))
                .默认
                    插入成员 (分组项目 [组项], 成员, 插入位置, 临时)
                .判断结束
                
                .计次循环首 (取数组成员数 (分组项目), i)
                    .如果 (大于 (i, 组项))
                        赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, 1))
                    .否则
                        
                    .如果结束
                    
                .计次循环尾 ()
                
                赋值 (分组插入, 假)
                返回 (相加 (65535, 插入位置, 相乘 (组项, 1000)))
            .否则
                
            .如果结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.如果真结束
赋值 (分组插入, 假)
返回 (-1)



.子程序 大量插入_结束, 空白型, , 
.参数 开始项目, 整数型, , 
.参数 个数, 整数型, , 

.局部变量 i, 整数型, , , 

.如果 (等于 (分组插入, 真))
    赋值 (全局.项目数量, 相加 (全局.项目数量, 个数))
    .计次循环首 (取数组成员数 (分组项目), i)
        .如果 (大于 (分组项目 [i], 分组位置, 开始项目))
            赋值 (分组项目 [i], 分组位置, 相加 (分组项目 [i], 分组位置, 个数))
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    
.否则
    
.如果结束



.子程序 大量删除_开始, 整数型, , 循环之后请结束不然不会显示的！而且会出错
.参数 开始项目, 整数型, , 
.参数 组项, 整数型, 可空, 
.参数 变量值, 整数型, 可空, 

.局部变量 组, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (SendMessage (全局.句柄, 395, 0, 0), 1)))
    .如果 (或者 (小于 (组项, 1), 大于 (组项, 取数组成员数 (分组项目)), 等于 (是否为空 (组项), 真)))
        赋值 (组项, 取数组成员数 (分组项目))
    .否则
        
    .如果结束
    
    赋值 (组, 相加 (分组项目 [组项], 分组位置, 1))
    .如果 (等于 (项目 [组], 是否打开, 真))
        删除成员 (项目, 相加 (开始项目, 变量值), )
        SendMessage (全局.句柄, 386, 开始项目, 0)
        赋值 (分组删除, 真)
        返回 (相加 (开始项目, 变量值))
    .否则
        赋值 (分组删除, 假)
        返回 (-1)
    .如果结束
    
.如果真结束
赋值 (分组删除, 假)
返回 (-1)

.子程序 大量删除_结束, 空白型, , 
.参数 开始项目, 整数型, , 
.参数 个数, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 等于 (分组删除, 真)))
    .如果 (小于 (相减 (全局.项目数量, 1), 个数))
        赋值 (个数, 全局.项目数量)
    .否则
        
    .如果结束
    
    赋值 (全局.项目数量, 相减 (全局.项目数量, 个数))
    .如果 (小于 (全局.项目数量, 1))
        赋值 (全局.项目数量, 1)
    .否则
        
    .如果结束
    
    .判断开始 (大于 (分组项目 [1].分组位置, -1))
        .计次循环首 (取数组成员数 (分组项目), i)
            .如果 (大于 (分组项目 [i], 分组位置, 开始项目))
                赋值 (分组项目 [i], 分组位置, 相减 (分组项目 [i], 分组位置, 个数))
            .否则
                
            .如果结束
            
        .计次循环尾 ()
        
    .默认
        
    .判断结束
    
    
.如果真结束



.子程序 取项目所在分组, 整数型, , 
.参数 需要取的位置, 整数型, , 

.局部变量 i, 整数型, , , 

.判断开始 (大于或等于 (需要取的位置, 分组项目 [取数组成员数 (分组项目)].分组位置))
    返回 (取数组成员数 (分组项目))
.默认
    .计次循环首 (取数组成员数 (分组项目), i)
        .如果真 (大于 (分组项目 [i], 分组位置, 需要取的位置))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    返回 (相减 (i, 1))
.判断结束


.子程序 置附加状态, 空白型, , 左键高亮优先于左键焦点
.参数 是否移动点燃, 逻辑型, 可空, 
.参数 是否左键高亮, 逻辑型, 可空, 
.参数 是否左键焦点, 逻辑型, 可空, 
.参数 是否双击焦点, 逻辑型, 可空, 

.局部变量 临时, 附加状态, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 等于 (自定义高度, 假)))
    赋值 (临时, 全局.状态)
    .如果 (等于 (是否为空 (是否移动点燃), 真))
        
    .否则
        赋值 (临时.是否移动点燃, 是否移动点燃)
    .如果结束
    .如果 (等于 (是否为空 (是否双击焦点), 真))
        
    .否则
        赋值 (临时.是否双击焦点, 是否双击焦点)
    .如果结束
    .如果 (等于 (是否为空 (是否左键焦点), 真))
        
    .否则
        
        赋值 (临时.是否左键焦点, 是否左键焦点)
        .判断开始 (等于 (临时.是否双击焦点, 真))
            赋值 (临时.是否双击焦点, 假)
        .默认
            
        .判断结束
        
    .如果结束
    .如果 (等于 (是否为空 (是否左键高亮), 真))
        
    .否则
        赋值 (临时.是否左键高亮, 是否左键高亮)
        .判断开始 (等于 (临时.是否左键焦点, 真))
            赋值 (临时.是否左键焦点, 假)
        .默认
            
        .判断结束
        
    .如果结束
    
    
    赋值 (全局.状态, 临时)
    
    
.如果真结束


.子程序 取分组个数, 整数型, , 
.如果 (大于 (全局.句柄, 0))
    .判断开始 (等于 (分组项目 [1].分组位置, -1))
        返回 (0)
    .默认
        返回 (取数组成员数 (分组项目))
    .判断结束
    
.否则
    返回 (0)
.如果结束


.子程序 取分组在项目位置, 整数型, , 
.参数 取出的位置, 整数型, , 

.如果 (并且 (大于 (全局.句柄, 0), 大于 (取出的位置, 0), 小于或等于 (取出的位置, 取数组成员数 (分组项目))))
    返回 (分组项目 [取出的位置], 分组位置)
.否则
    返回 (0)
.如果结束


.子程序 是否图片点亮, 空白型, , 
.参数 是否点亮项目, 逻辑型, , 

.如果 (大于 (全局.句柄, 0))
    赋值 (全局.是否图片点亮, 是否点亮项目)
.否则
    
.如果结束


.子程序 重新定义高度, 空白型, , 
.参数 普通高度, 整数型, , 
.参数 焦点高度, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (并且 (大于 (全局.句柄, 0), 等于 (自定义高度, 假)))
    .计次循环首 (相加 (相减 (全局.项目数量, 1), 1), i)
        赋值 (全局.普通高度, 普通高度)
        赋值 (全局.焦点高度, 焦点高度)
        .如果 (等于 (相减 (i, 1), 全局.焦点))
            SendMessage (全局.句柄, 416, 相减 (i, 1), 全局.焦点高度)
        .否则
            SendMessage (全局.句柄, 416, 相减 (i, 1), 全局.普通高度)
        .如果结束
        
        
    .计次循环尾 ()
    重绘 (65536)
    
.如果真结束


.子程序 窗口置顶, 空白型, , 
.如果真 (大于 (全局.句柄, 0))
    BringWindowToTop (全局.句柄)
.如果真结束



.子程序 图片载入_自字节集, 整数型, , 返回图片所在位置
.参数 载入的图片字节集, 字节集, , 

.如果真 (大于 (全局.句柄, 0))
    加入成员 (图片载入信息, 载入的图片字节集)
    返回 (取数组成员数 (图片载入信息))
.如果真结束
返回 (0)


.子程序 图片载入_自文件, 整数型, , 返回图片所在位置
.参数 载入的图片路径, 文本型, , 

.如果真 (大于 (全局.句柄, 0))
    加入成员 (图片载入信息, 读入文件 (载入的图片路径))
    返回 (取数组成员数 (图片载入信息))
.如果真结束
返回 (0)


.子程序 删除图片信息, 整数型, , 0删除失败
.参数 删除位置, 整数型, , 

.如果真 (或者 (大于 (全局.句柄, 0), 小于 (删除位置, 1), 大于 (删除位置, 取数组成员数 (图片载入信息))))
    删除成员 (图片载入信息, 删除位置, )
    返回 (1)
.如果真结束
 ' 返回 (0)

.子程序 图片修改_自字节集, 空白型, , 
.参数 修改的位置, 整数型, , 
.参数 载入的图片字节集, 字节集, , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改的位置, 0), 小于或等于 (修改的位置, 取数组成员数 (图片载入信息))))
    赋值 (图片载入信息 [修改的位置], 载入的图片字节集)
.如果真结束
返回 ()

.子程序 图片修改_自文件, 空白型, , 
.参数 修改的位置, 整数型, , 
.参数 载入的图片路径, 文本型, , 

.如果真 (并且 (大于 (全局.句柄, 0), 大于 (修改的位置, 0), 小于或等于 (修改的位置, 取数组成员数 (图片载入信息))))
    赋值 (图片载入信息 [修改的位置], 读入文件 (载入的图片路径))
.如果真结束
返回 ()

.子程序 置焦点, 空白型, , 
.参数 置入位置, 整数型, , 

.如果真 (并且 (大于 (全局.句柄, 0), 不等于 (置入位置, 全局.焦点), 等于 (自定义高度, 假)))
    .如果 (大于 (全局.焦点, -1))
        SendMessage (全局.句柄, 416, 全局.焦点, 全局.普通高度)
    .否则
        
    .如果结束
    
    SendMessage (全局.句柄, 416, 置入位置, 全局.焦点高度)
    赋值 (全局.焦点, 置入位置)
    重绘 (65536)
.如果真结束


.子程序 置高亮, 空白型, , 
.参数 置入位置, 整数型, , 

.如果真 (并且 (大于 (全局.句柄, 0), 不等于 (置入位置, 全局.高亮)))
    画项目 (全局.句柄, 全局.高亮, 0)
    画项目 (全局.句柄, 置入位置, 2)
    赋值 (全局.高亮, 置入位置)
    
.如果真结束


.子程序 自定义高度, 空白型, , 假为不自定义高度
.参数 定义的位置, 整数型, , 
.参数 定义的高度, 整数型, , 
.参数 是否隐藏, 逻辑型, , 
.参数 是否自定义高度, 逻辑型, 可空, 

.如果 (并且 (大于 (全局.句柄, 0), 等于 (分组项目 [1].分组位置, -1), 大于 (定义的位置, -1), 小于 (定义的位置, 全局.项目数量)))
    .如果 (等于 (是否自定义高度, 假))
        赋值 (自定义高度, 假)
        重新定义高度 (全局.普通高度, 全局.焦点高度)
    .否则
        赋值 (自定义高度, 真)
        SendMessage (全局.句柄, 416, 定义的位置, 定义的高度)
        赋值 (全局.状态.是否左键焦点, 假)
        赋值 (全局.状态.是否左键高亮, 假)
        赋值 (全局.状态.是否双击焦点, 假)
        赋值 (项目 [相加 (定义的位置, 1)].是否隐藏, 是否隐藏)
    .如果结束
    
.否则
    
.如果结束


.子程序 置边框数据, 空白型, ,  状态 = #状态_  相乘 *
.参数 状态, 整数型, 可空, 
.参数 颜色, 整数型, 可空, 
.参数 范围, 自建矩形, 可空, 
.参数 次数, 整数型, 可空, 
.参数 是否圆角, 逻辑型, 可空, 
.参数 是否重绘, 逻辑型, 可空, 

.局部变量 临时, 状态_边框, , , 
.局部变量 数据修改位置, 整数型, , , 
.局部变量 组项, 整数型, , , 

.如果 (并且 (大于 (全局.句柄, 0), 大于 (状态, 0), 小于或等于 (状态, 510510)))
    .如果 (等于 (是否为空 (颜色), 假))
        .如果 (等于 (颜色, #黑色))
            赋值 (颜色, 取颜色值 (0, 0, 1))
        .否则
            
        .如果结束
        
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 等于 (求余数 (到数值 (状态), #状态_普通点燃), 0)))
            赋值 (全局.边框.普通静止.颜色, 颜色)
        .否则
            
        .如果结束
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 等于 (求余数 (到数值 (状态), #状态_分组点燃), 0)))
            赋值 (全局.边框.分组静止.颜色, 颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (全局.边框.焦点.颜色, 颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (全局.边框.高亮.颜色, 颜色)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (全局.边框.禁止.颜色, 颜色)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (次数), 假))
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 等于 (求余数 (到数值 (状态), #状态_普通点燃), 0)))
            赋值 (全局.边框.普通静止.次数, 次数)
        .否则
            
        .如果结束
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 等于 (求余数 (到数值 (状态), #状态_分组点燃), 0)))
            赋值 (全局.边框.分组静止.次数, 次数)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (全局.边框.焦点.次数, 次数)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (全局.边框.高亮.次数, 次数)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (全局.边框.禁止.次数, 次数)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (是否圆角), 假))
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 等于 (求余数 (到数值 (状态), #状态_普通点燃), 0)))
            .如果 (等于 (是否圆角, 真))
                赋值 (全局.边框.普通静止.边框方式, 1)
            .否则
                赋值 (全局.边框.普通静止.边框方式, 0)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 等于 (求余数 (到数值 (状态), #状态_分组点燃), 0)))
            .如果 (等于 (是否圆角, 真))
                赋值 (全局.边框.分组静止.边框方式, 1)
            .否则
                赋值 (全局.边框.分组静止.边框方式, 0)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            .如果 (等于 (是否圆角, 真))
                赋值 (全局.边框.焦点.边框方式, 1)
            .否则
                赋值 (全局.边框.焦点.边框方式, 0)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            .如果 (等于 (是否圆角, 真))
                赋值 (全局.边框.高亮.边框方式, 1)
            .否则
                赋值 (全局.边框.高亮.边框方式, 0)
            .如果结束
            
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            .如果 (等于 (是否圆角, 真))
                赋值 (全局.边框.禁止.边框方式, 1)
            .否则
                赋值 (全局.边框.禁止.边框方式, 0)
            .如果结束
            
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    .如果 (等于 (是否为空 (范围), 假))
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_普通静止), 0), 等于 (求余数 (到数值 (状态), #状态_普通点燃), 0)))
            赋值 (全局.边框.普通静止.边框范围, 范围)
        .否则
            
        .如果结束
        .如果 (或者 (等于 (求余数 (到数值 (状态), #状态_分组静止), 0), 等于 (求余数 (到数值 (状态), #状态_分组点燃), 0)))
            赋值 (全局.边框.分组静止.边框范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_焦点), 0))
            赋值 (全局.边框.焦点.边框范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_高亮), 0))
            赋值 (全局.边框.高亮.边框范围, 范围)
        .否则
            
        .如果结束
        .如果 (等于 (求余数 (到数值 (状态), #状态_禁止), 0))
            赋值 (全局.边框.禁止.边框范围, 范围)
        .否则
            
        .如果结束
        
    .否则
        
    .如果结束
    
    
    .如果 (等于 (是否重绘, 真))
        重绘 (65536)
    .否则
        
    .如果结束
    
    
.否则
    
.如果结束


.子程序 清除项目, 空白型, , 
.参数 清除的项目, 整数型, , 

.局部变量 原表项矩形, rect, , , 
.局部变量 临时, rect, , , 

SendMessage_RECT (全局.句柄, 408, 清除的项目, 原表项矩形)
赋值 (临时, 原表项矩形)
赋值 (临时.x, 相加 (原表项矩形.x, 全局.范围.左边))
赋值 (临时.y, 相加 (原表项矩形.y, 全局.范围.顶边))
InvalidateRect (全局.父句柄, 临时, 1)
SendMessage (全局.父句柄, 15, 0, 0)


.子程序 销毁, 空白型, , 
SendMessage (全局.句柄, 16, 0, 0)
GdiplusShutdown (GDI)

.子程序 置列表范围, 空白型, , 
.参数 左边, 整数型, 可空, 
.参数 顶边, 整数型, 可空, 
.参数 宽度, 整数型, 可空, 
.参数 高度, 整数型, 可空, 

.局部变量 临时, 自建矩形, , , 

.如果真 (大于 (全局.句柄, 0))
    赋值 (临时, 全局.范围)
    .如果 (并且 (等于 (是否为空 (左边), 假), 大于或等于 (左边, 0)))
        赋值 (临时.左边, 左边)
    .否则
        
    .如果结束
    .如果 (并且 (等于 (是否为空 (顶边), 假), 大于或等于 (顶边, 0)))
        赋值 (临时.顶边, 顶边)
    .否则
        
    .如果结束
    .如果 (并且 (等于 (是否为空 (宽度), 假), 大于或等于 (宽度, 0)))
        赋值 (临时.宽度, 宽度)
    .否则
        
    .如果结束
    .如果 (并且 (等于 (是否为空 (左边), 假), 大于或等于 (高度, 0)))
        赋值 (临时.高度, 高度)
    .否则
        
    .如果结束
    
    重绘 ()
.如果真结束




.子程序 强制重画, 空白型, , 
.参数 需要绘制的位置, 整数型, , 

.判断开始 (等于 (需要绘制的位置, 全局.焦点))
    画项目 (全局.句柄, 需要绘制的位置, 3)
.判断 (等于 (需要绘制的位置, 全局.高亮))
    画项目 (全局.句柄, 需要绘制的位置, 2)
.判断 (等于 (需要绘制的位置, 取项目数 ()))
    
.默认
    画项目 (全局.句柄, 需要绘制的位置, 选择 (等于 (全局.热点, 需要绘制的位置), 1, 0))
.判断结束


.子程序 置画项目回调, 空白型, 公开, 
.参数 事件, 子程序指针, , 

.判断开始 (大于 (全局.句柄, 0))
    赋值 (画图回调, 到整数 (事件))
.默认
    
.判断结束


.子程序 置画高CPU移动回调, 空白型, 公开, 
.参数 事件, 子程序指针, 可空, 

.判断开始 (大于 (全局.句柄, 0))
    .判断开始 (等于 (是否为空 (事件), 假))
        赋值 (高CPU移动回调, 到整数 (事件))
    .默认
        赋值 (高CPU移动回调, 到整数 (0))
    .判断结束
    
.默认
    
.判断结束


.子程序 置左键释放回调, 空白型, 公开, 
.参数 事件, 子程序指针, 可空, 

.判断开始 (大于 (全局.句柄, 0))
    .判断开始 (等于 (是否为空 (事件), 假))
        赋值 (全局.回调.左击释放, 到整数 (事件))
    .默认
        赋值 (全局.回调.左击释放, 0)
    .判断结束
    
    
.默认
    
.判断结束


.程序集 程序集2, , , 

.子程序 辅_生成_类回调_易, 字节集, , [只能在类里调用]
.参数 函数序号, 空白型, , 从1开始,[_初始化][_销毁],[xx]
.参数 参数个数, 空白型, 可空, 
.参数 push_ecx, 逻辑型, 可空, 附加到第一个参数;默认为假
.参数 cdecl方式, 逻辑型, 可空, 默认为假

.局部变量 this, 空白型, , , 
.局部变量 匿名局部变量_264, 空白型, , , 
.局部变量 回调地址, 空白型, , , 
.局部变量 data, 字节集, , , 
.局部变量 匿名局部变量_267, 空白型, , , 
.局部变量 arg_length, 空白型, , , 
.局部变量 sizeof_int, 空白型, , , 
.局部变量 ret_len_WORD, 短整数型, , , 

赋值 (this, 取指针内容_整数 (取上层函数首参 ()))
赋值 (回调地址, 取_类_函数地址 (this, 函数序号))

.如果真 (小于或等于 (回调地址, 0))
    输出调试文本 (“[辅_生成_方法回调][失败]：回调地址错误”)
    返回 ({  })
.如果真结束
赋值 (sizeof_int, 4) ' #sizeof_int
.如果 (cdecl方式)
    赋值 (ret_len_WORD, 0)
.否则
    赋值 (ret_len_WORD, 相乘 (参数个数, sizeof_int))
.如果结束
赋值 (arg_length, 相乘 (参数个数, sizeof_int))
.如果真 (或者 (大于 (arg_length, 512), 小于 (arg_length, 0)))
    输出调试文本 (“局部变量长度错误”)
    返回 ({  })
.如果真结束
赋值 (data, {  })
赋值 (data, 相加 (data, { 85 })) ' push ebp;
赋值 (data, 相加 (data, { 139, 236 })) ' mov ebp,esp;
赋值 (data, 相加 (data, { 106 }, 到字节集_从字节 (ret_len_WORD))) ' push [retn_size]; // [ebp-04]
赋值 (data, 相加 (data, { 83 })) ' push ebx; // [ebp-8]
赋值 (data, 相加 (data, { 86 })) ' push esi; // [ebp-0C]
赋值 (data, 相加 (data, { 87 })) ' push edi; // [ebp-10]
赋值 (data, 相加 (data, { 106 }, { 0 })) ' push 0; // [ebp-14]
赋值 (data, 相加 (data, { 217, 60, 36 })) ' fstcw [esp];
赋值 (data, 相加 (data, { 219, 227 })) ' finit;
赋值 (data, 相加 (data, { 104 }, 到字节集_从整数_ (this))) ' push dwThis;
赋值 (data, 相加 (data, { 139, 196 })) ' mov eax,esp
.如果真 (不等于 (参数个数, 0))
    赋值 (data, 相加 (data, { 185 }, 到字节集_从整数_ (arg_length))) ' mov ecx,arg_length;
    赋值 (data, 相加 (data, { 43, 225 })) ' sub esp,ecx;
    赋值 (data, 相加 (data, { 141, 117, 8 })) ' lea esi,[ebp+8];
    赋值 (data, 相加 (data, { 141, 60, 36 })) ' lea edi,[esp];
    赋值 (data, 相加 (data, { 252 })) ' cld;
    赋值 (data, 相加 (data, { 243, 164 })) ' rep movsb;
    赋值 (data, 相加 (data, { 139, 77, 248 })) ' mov ecx,[ebp-8];
    赋值 (data, 相加 (data, { 139, 117, 244 })) ' mov esi.[ebp-C];
    赋值 (data, 相加 (data, { 139, 125, 240 })) ' mov edi,[ebp-10];
.如果真结束
.如果真 (push_ecx)
    赋值 (data, 相加 (data, { 81 })) ' push ecx;
.如果真结束
赋值 (data, 相加 (data, { 80 })) ' push eax;  // push &(this)
赋值 (data, 相加 (data, { 184 }, 到字节集_从整数_ (回调地址))) ' mov eax,addr;
赋值 (data, 相加 (data, { 104 }, 到字节集_从整数_ (get_retn_code ()))) ' push arg_1; //retn to static code
赋值 (data, 相加 (data, { 255, 224 })) ' jmp eax
返回 (data)


.子程序 get_retn_code, 整数型, , 
.局部变量 static_ptr, 空白型, 静态, , 
.局部变量 data, 字节集, , , 

.如果真 (不等于 (static_ptr, 0))
    返回 (static_ptr)
.如果真结束
 ' mov     edx, dword ptr [ebp-4]
 ' mov     ebx, dword ptr [ebp-8]
 ' mov     esi, dword ptr [ebp-C]
 ' mov     edi, dword ptr [ebp-10]
 ' fldcw   word ptr [ebp-14]
 ' mov     esp, ebp
 ' pop     ebp
 ' pop     ecx
 ' add     esp, edx
 ' jmp     ecx
赋值 (data, { 139, 77, 252, 139, 93, 248, 139, 117, 244, 139, 125, 240, 217, 109, 236, 139, 229, 93, 141, 100, 12, 4, 247, 217, 139, 76, 12, 252, 255, 225 })
赋值 (static_ptr, DumpCode (data))
返回 (static_ptr)

.子程序 辅_取字节集长度, 整数型, , 
.参数 v, 字节集, , 

.局部变量 len, 空白型, , , 

.如果真 (等于 (v, {  }))
    返回 (0)
.如果真结束
置入代码 ({ 139, 69, 8, 139, 0, 139, 64, 4, 137, 69, 252 })
 ' 置入代码 (“mov eax,[ebp+8] | mov eax,[eax] | mov eax,[eax+4] | mov [ebp-4],eax ”)
返回 (len)


.子程序 DumpCode, 整数型, , VirtualAlloc/VirtualFree
.参数 data, 字节集, , 

.局部变量 hMem, 空白型, , , 
.局部变量 Ptr, 空白型, , , 
.局部变量 len, 空白型, , , 

赋值 (len, 辅_取字节集长度 (data))
赋值 (hMem, _VirtualAlloc (0, len, 4096, 64))
CopyToPtr_FromEBin (hMem, data, len)
返回 (hMem)

.子程序 到字节集_从字节, 字节集, , 
.参数 欲转换的数值, 短整数型, 参考, 

.局部变量 ptr, 空白型, , , 

赋值 (ptr, 取变量地址_短整数 (欲转换的数值))
返回 (指针到字节集 (ptr, 1))

.子程序 取_类_函数地址, 整数型, , 
.参数 this, 空白型, , 
.参数 index, 空白型, , 从1开始,[_初始化][_销毁],[xx]

.局部变量 函数数组, 空白型, , , 

赋值 (index, 相减 (index, 1))
赋值 (函数数组, 取指针内容_整数 (this))
返回 (取指针内容_整数 (相加 (函数数组, 相乘 (index, 4))))

.子程序 到字节集_从短整数_, 字节集, , 
.参数 欲转换的数值, 短整数型, 参考, 

.局部变量 ptr, 空白型, , , 

赋值 (ptr, 取变量地址_短整数 (欲转换的数值))
返回 (指针到字节集 (ptr, 2))

.子程序 取变量地址_短整数, 整数型, , 
.参数 变量, 短整数型, 参考, 

.局部变量 reuslt, 空白型, , , 

置入代码 ({ 139, 69, 8, 137, 69, 252 })
 ' 置入代码 (“mov eax,[ebp+8] | mov [ebp-4],eax”)
返回 (reuslt)

.子程序 取指针内容_整数, 整数型, , 
.参数 内存地址, 空白型, , 

.局部变量 ret, 空白型, , , 

置入代码 ({ 139, 69, 8, 139, 0, 137, 69, 252 })
 ' 置入代码 (“mov eax,[ebp+8] | mov eax,[eax] | mov [ebp-4],eax”)
返回 (ret)

.子程序 到字节集_从整数_, 字节集, , 
.参数 欲转换的数值, 整数型, 参考, 

.局部变量 ptr, 空白型, , , 

赋值 (ptr, 取变量地址_整数 (欲转换的数值))
返回 (指针到字节集 (ptr, 4))

.子程序 取变量地址_整数, 整数型, , 
.参数 var, 整数型, 参考, 

.局部变量 ptr, 空白型, , , 

置入代码 ({ 139, 69, 8, 137, 69, 252 })
 ' 置入代码 (“mov eax,[ebp+8] | mov [ebp-4],eax”)
返回 (ptr)

.子程序 辅_字节集到子程序地址, 子程序指针, , 
.参数 data, 字节集, , 

返回 (到子程序指针_从数值 (取变量地址_字节集 (data)))

.子程序 到子程序指针_从数值, 子程序指针, , 
.参数 val, 整数型, , 

.局部变量 ret, 子程序指针, , , 

置入代码 ({ 139, 69, 8, 137, 69, 252 })
 ' 置入代码 (“mov eax,[ebp+8] | mov [ebp-4],eax”)
返回 (ret)

.子程序 取变量地址_字节集, 整数型, , 
.参数 变量, 字节集, 参考, 

.局部变量 ret, 空白型, , , 

 ' xor     ecx, ecx
 ' mov     eax, dword ptr [ebp+8]
 ' cmp     eax, ecx
 ' je      short 0040AF58
 ' mov     eax, dword ptr [eax]
 ' cmp     eax, ecx
 ' je      short 0040AF58
 ' mov     ecx, dword ptr [eax]
 ' lea     eax, dword ptr [eax+ecx*4+4]
 ' mov     dword ptr [ebp-4], eax
置入代码 ({ 51, 201, 139, 69, 8, 59, 193, 116, 15, 139, 0, 59, 193, 116, 9, 139, 8, 141, 68, 136, 4, 137, 69, 252 })
返回 (ret)

.子程序 取上层函数首参, 整数型, , 
.局部变量 ret, 空白型, , , 

置入代码 ({ 139, 69, 0, 139, 0, 139, 64, 8, 137, 69, 252 })
 ' 置入代码 ({ 139, 69, 0, 139, 0, 139, 64, 8, 137, 69, 252 })
返回 (ret)

.子程序 动态执行子程序, 整数型, , 
.参数 函数地址, 整数型, , 函数地址必须为第一个参数,调用时会重新调整参数排列的,后面的参数与API声明一样了
.参数 参数1, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数2, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数3, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数4, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数5, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数6, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数7, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数8, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数9, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址
.参数 参数10, 整数型, , 没有填0，注意这个如果不是整数型参数请提供数据地址

 ' push ebp                       <------------这两句已经是易原有的
 ' mov ebp, esp
置入代码 ({ 139, 69, 8, 139, 93, 4, 137, 93, 8, 93, 91, 255, 224 })
 ' mov eax, dword ptr [ebp+08] 取得第一个参数的函数地址
 ' mov ebx, dword ptr [ebp+04] 取得返回地址
 ' mov dword ptr [ebp+08], ebx  修改返回地址
 ' pop ebp
 ' pop ebx 平栈,去掉第一个参数
 ' jmp eax 跳到函数地址
返回 (0)

.程序集 绘图方法, , , 

.子程序 创建位图, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 位图句柄, 整数型, , , 

GdipCreateBitmapFromScan0 (宽度, 高度, 0, 139273, 0, 位图句柄)
返回 (位图句柄)

.子程序 创建图形_自图像, 整数型, 公开, 
.参数 位图句柄, 整数型, , 

.局部变量 图形句柄, 整数型, , , 

GdipGetImageGraphicsContext (位图句柄, 图形句柄)
返回 (图形句柄)

.子程序 图形_画图像, 空白型, , 
.参数 图形句柄, 整数型, , 
.参数 图像句柄, 整数型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 

GdipDrawImage (图形句柄, 图像句柄, 左边, 顶边)


.子程序 创建图形_自句柄, 整数型, , 
.参数 句柄, 整数型, , 

.局部变量 图形句柄, 整数型, , , 

GdipCreateFromHWND (句柄, 图形句柄)
返回 (图形句柄)

.子程序 创建纯色刷子, 整数型, 公开, 
.参数 颜色, 整数型, , 

.局部变量 刷子句柄, 整数型, , , 

GdipCreateSolidFill (颜色, 刷子句柄)
返回 (刷子句柄)

.子程序 创建渐变刷子, 整数型, , 
.参数 起点坐标, pF, , 
.参数 终点坐标, pF, , 
.参数 起点颜色, 整数型, , 
.参数 终点颜色, 整数型, , 

.局部变量 刷子句柄, 整数型, , , 

GdipCreateLineBrush (起点坐标, 终点坐标, 起点颜色, 终点颜色, 0, 刷子句柄)
返回 (刷子句柄)

.子程序 图形_填充矩形, 空白型, , 
.参数 图形句柄, 整数型, , 
.参数 画刷句柄, 整数型, , 
.参数 左边, 小数型, , 
.参数 顶边, 小数型, , 
.参数 宽度, 小数型, , 
.参数 高度, 小数型, , 

GdipFillRectangle (图形句柄, 画刷句柄, 左边, 顶边, 宽度, 高度)

.子程序 图形_画图片, 空白型, , 
.参数 图形句柄, 整数型, , 
.参数 字节集, 字节集, , 
.参数 范围, 自建矩形, , 

.局部变量 字节, 字节流, , , 
.局部变量 图片句柄, 整数型, , , 
.局部变量 图像宽度, 整数型, , , 
.局部变量 左边, 整数型, , , 
.局部变量 顶边, 整数型, , , 
.局部变量 宽度, 整数型, , , 
.局部变量 高度, 整数型, , , 
.局部变量 图像高度, 整数型, , , 

字节.创建 (字节集)
GdipLoadImageFromStream (字节.取字节流指针 (), 图片句柄)
GdipGetImageWidth (图片句柄, 图像宽度)
GdipGetImageHeight (图片句柄, 图像高度)
赋值 (左边, 范围.左边)
赋值 (顶边, 范围.顶边)
赋值 (宽度, 范围.宽度)
赋值 (高度, 范围.高度)
GdipDrawImageRectRect (图形句柄, 图片句柄, 左边, 顶边, 宽度, 高度, 0, 0, 图像宽度, 图像高度, 2, 0, 0, 0)
字节.释放 ()
销毁图像 (图片句柄)

.子程序 创建字体, 整数型, , 
.参数 名称, 文本型, , 
.参数 大小, 整数型, , 
.参数 风格, 整数型, , 

.局部变量 字体族, 整数型, , , 
.局部变量 字体, 整数型, , , 

GdipCreateFontFamilyFromName (文本到字节集 (名称), 0, 字体族)
GdipCreateFont (字体族, 大小, 风格, 2, 字体)
GdipDeleteFontFamily (字体族)
返回 (字体)

.子程序 画文本, 空白型, , 
.参数 图形句柄, 整数型, , 
.参数 写出的文本, 文本型, , 
.参数 字体, 整数型, , 
.参数 画刷, 整数型, , 
.参数 范围, 自建矩形, , 

.局部变量 r, rectF, , , 
.局部变量 hDC, 整数型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (r.x, 范围.左边)
赋值 (r.y, 范围.顶边)
.如果真 (小于或等于 (范围.宽度, 0))
    赋值 (范围.宽度, -1)
.如果真结束
.如果真 (小于或等于 (范围.高度, 0))
    赋值 (范围.高度, -1)
.如果真结束
赋值 (r.Width, 范围.宽度)
赋值 (r.Height, 范围.高度)
赋值 (字节集, 文本到字节集 (写出的文本))
GdipDrawString (图形句柄, 字节集, lstrlenw (字节集), 字体, r, 0, 画刷)

.子程序 RGB到ARGB, 整数型, , 
.参数 RGB颜色, 整数型, , 
.参数 透明度, 整数型, , 

.局部变量 Color, 字节集, , , 

赋值 (Color, 到字节集 (RGB颜色))
赋值 (RGB颜色, 位或 (相加 (Color [3], 相乘 (Color [2], 256), 相乘 (Color [1], 65536)), 左移 (透明度, 24))) ' 转换成GDI+的颜色值
返回 (RGB颜色)


.子程序 渐变画刷_变色, 空白型, , 
.参数 画刷句柄, 整数型, , 
.参数 起点颜色, 整数型, , 
.参数 终点颜色, 整数型, , 

GdipSetLineColors (画刷句柄, 起点颜色, 终点颜色)


.子程序 创建画笔, 整数型, , 
.参数 颜色, 整数型, , 需要将RGB颜色转换为ARGB颜色。
.参数 宽度, 小数型, , 

.局部变量 句柄, 整数型, , , 

GdipCreatePen1 (颜色, 宽度, 2, 句柄)
返回 (句柄)

.子程序 文本到字节集, 字节集, , 将Ansi转成Unicode
.参数 文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (长度, 相乘 (MultiByteToWideChar (0, 0, 文本, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (0, 0, 文本, 取文本长度 (文本), 返回值, 长度)
返回 (返回值)

.子程序 列表底图, 空白型, , 
.参数 场景句柄, 整数型, , 
.参数 方式, 整数型, , 
.参数 起始渐变色, 整数型, , 
.参数 结束渐变色, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 刷子, 整数型, , , 
.局部变量 z, pF, , "2", 

.判断开始 (或者 (小于或等于 (方式, #列表_渐变方式_无), 大于 (方式, 7)))
    赋值 (刷子, 创建纯色刷子 (结束渐变色))
    图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 高度)
.判断 (或者 (等于 (方式, #列表_渐变方式_从上到下), 等于 (方式, #列表_渐变方式_从下到上), 等于 (方式, #列表_渐变方式_上下双渐变)))
    赋值 (z [1].x, 0)
    赋值 (z [1].y, 0)
    赋值 (z [2].x, 0)
    赋值 (z [2].y, 相加 (高度, 5))
    .判断开始 (等于 (方式, #列表_渐变方式_从上到下))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_从下到上))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_上下双渐变))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 相除 (高度, 2))
        渐变画刷_变色 (刷子, 结束渐变色, 起始渐变色)
        图形_填充矩形 (场景句柄, 刷子, 0, 相除 (高度, 2), 宽度, 相除 (高度, 2))
    .默认
        
    .判断结束
    
.判断 (或者 (等于 (方式, #列表_渐变方式_从左到右), 等于 (方式, #列表_渐变方式_从右到左), 等于 (方式, #列表_渐变方式_左右双渐变)))
    赋值 (z [1].x, 0)
    赋值 (z [1].y, 0)
    赋值 (z [2].x, 相加 (宽度, 5))
    赋值 (z [2].y, 0)
    .判断开始 (等于 (方式, #列表_渐变方式_从左到右))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_从右到左))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_左右双渐变))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 0, 0, 相除 (宽度, 2), 高度)
        渐变画刷_变色 (刷子, 结束渐变色, 起始渐变色)
        图形_填充矩形 (场景句柄, 刷子, 相除 (宽度, 2), 0, 相除 (宽度, 2), 高度)
    .默认
        
    .判断结束
    
.默认
    
.判断结束

.如果 (大于 (刷子, 0))
    销毁纯色刷子 (刷子)
.否则
    
.如果结束


.子程序 销毁图像, 空白型, 公开, 
.参数 hdc, 整数型, , 

GdipDisposeImage (hdc)

.子程序 销毁图形, 空白型, , 
.参数 hdc, 整数型, , 

GdipDeleteGraphics (hdc)

.子程序 销毁纯色刷子, 空白型, , 
.参数 hdc, 整数型, , 

GdipDeleteBrush (hdc)

.子程序 销毁画笔, 空白型, , 
.参数 hdc, 整数型, , 

GdipDeletePen (hdc)

.子程序 销毁字体, 空白型, , 
.参数 hdc, 整数型, , 

GdipDeleteFont (hdc)

.子程序 图形_画矩形, 空白型, , 
.参数 场景句柄, 整数型, , 
.参数 画笔, 整数型, , 
.参数 范围, 自建矩形, , 

.局部变量 ls, rectF, , , 

赋值 (ls.x, 范围.左边)
赋值 (ls.y, 范围.顶边)
赋值 (ls.Width, 范围.宽度)
赋值 (ls.Height, 范围.高度)
GdipDrawRectangle (场景句柄, 画笔, ls.x, ls.y, ls.Width, ls.Height)

.子程序 点亮底图, 空白型, , 
.参数 场景句柄, 整数型, , 
.参数 方式, 整数型, , 
.参数 起始渐变色, 整数型, , 
.参数 结束渐变色, 整数型, , 
.参数 范围, 自建矩形, , 

.局部变量 刷子, 整数型, , , 
.局部变量 左边, 整数型, , , 
.局部变量 顶边, 整数型, , , 
.局部变量 宽度, 整数型, , , 
.局部变量 高度, 整数型, , , 
.局部变量 z, pF, , "2", 

赋值 (左边, 范围.左边)
赋值 (顶边, 范围.顶边)
赋值 (宽度, 范围.宽度)
赋值 (高度, 范围.高度)
.判断开始 (或者 (小于或等于 (方式, #列表_渐变方式_无), 大于 (方式, 11)))
    赋值 (刷子, 创建纯色刷子 (结束渐变色))
    图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 高度)
.判断 (或者 (等于 (方式, #列表_渐变方式_从上到下), 等于 (方式, #列表_渐变方式_从下到上), 等于 (方式, #列表_渐变方式_上下双渐变), 等于 (方式, #列表_渐变方式_从上到下_一半), 等于 (方式, #列表_渐变方式_从下到上_一半)))
    赋值 (z [1].x, 0)
    赋值 (z [1].y, 0)
    赋值 (z [2].x, 0)
    赋值 (z [2].y, 高度)
    .判断开始 (等于 (方式, #列表_渐变方式_从上到下))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_从下到上))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_上下双渐变))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 相除 (高度, 2))
        渐变画刷_变色 (刷子, 结束渐变色, 起始渐变色)
        图形_填充矩形 (场景句柄, 刷子, 左边, 相加 (顶边, 相除 (高度, 2)), 宽度, 相除 (高度, 2))
    .判断 (等于 (方式, #列表_渐变方式_从上到下_一半))
        赋值 (z [1].x, 0)
        赋值 (z [1].y, 0)
        赋值 (z [2].x, 0)
        赋值 (z [2].y, 相除 (高度, 2))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 相除 (高度, 2))
    .判断 (等于 (方式, #列表_渐变方式_从下到上_一半))
        赋值 (z [1].x, 0)
        赋值 (z [1].y, 0)
        赋值 (z [2].x, 0)
        赋值 (z [2].y, 相除 (高度, 2))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 相除 (高度, 2))
    .默认
        
    .判断结束
    
    
.判断 (或者 (等于 (方式, #列表_渐变方式_从左到右), 等于 (方式, #列表_渐变方式_从右到左), 等于 (方式, #列表_渐变方式_左右双渐变), 等于 (方式, #列表_渐变方式_从左到右_一半), 等于 (方式, #列表_渐变方式_从右到左_一半)))
    赋值 (z [1].x, 0)
    赋值 (z [1].y, 0)
    赋值 (z [2].x, 宽度)
    赋值 (z [2].y, 0)
    .判断开始 (等于 (方式, #列表_渐变方式_从左到右))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_从右到左))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 宽度, 高度)
    .判断 (等于 (方式, #列表_渐变方式_左右双渐变))
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 相除 (宽度, 2), 高度)
        渐变画刷_变色 (刷子, 结束渐变色, 起始渐变色)
        图形_填充矩形 (场景句柄, 刷子, 相加 (左边, 相除 (宽度, 2)), 顶边, 相除 (宽度, 2), 高度)
    .判断 (等于 (方式, #列表_渐变方式_从左到右_一半))
        赋值 (z [1].x, 0)
        赋值 (z [1].y, 0)
        赋值 (z [2].x, 相除 (宽度, 2))
        赋值 (z [2].y, 0)
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 起始渐变色, 结束渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 相除 (宽度, 2), 高度)
    .判断 (等于 (方式, #列表_渐变方式_从右到左_一半))
        赋值 (z [1].x, 0)
        赋值 (z [1].y, 0)
        赋值 (z [2].x, 相除 (宽度, 2))
        赋值 (z [2].y, 0)
        赋值 (刷子, 创建渐变刷子 (z [1], z [2], 结束渐变色, 起始渐变色))
        图形_填充矩形 (场景句柄, 刷子, 左边, 顶边, 相除 (宽度, 2), 高度)
    .默认
        
    .判断结束
    
.默认
    
.判断结束

.如果 (大于 (刷子, 0))
    销毁纯色刷子 (刷子)
.否则
    
.如果结束


.子程序 取高位, 整数型, , 
.参数 数值, 整数型, , 

返回 (位与 (数值, 65535))

.子程序 取低位, 整数型, , 
.参数 数值, 整数型, , 

返回 (右移 (数值, 16))

.子程序 点是否在矩形内, 逻辑型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 矩形, 自建矩形, , 

.如果 (并且 (大于或等于 (X, 矩形.左边), 小于或等于 (X, 相加 (矩形.左边, 矩形.宽度)), 大于或等于 (Y, 矩形.顶边), 小于或等于 (Y, 相加 (矩形.顶边, 矩形.高度))))
    返回 (真)
.否则
    返回 (假)
.如果结束





.子程序 创建矩形, 自建矩形, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 k, 整数型, , 
.参数 g, 整数型, , 

.局部变量 临时矩形, 自建矩形, , , 

赋值 (临时矩形.左边, x)
赋值 (临时矩形.顶边, y)
赋值 (临时矩形.宽度, k)
赋值 (临时矩形.高度, g)
返回 (临时矩形)


.子程序 图形_描边圆角矩形, 空白型, , 
.参数 hdc, 整数型, , 
.参数 范围, 自建矩形, , 
.参数 圆角度, 整数型, , 

RoundRect (hdc, 范围.左边, 范围.顶边, 相加 (范围.左边, 范围.宽度), 相加 (范围.顶边, 范围.高度), 圆角度, 圆角度)


.子程序 窗口圆角化, 空白型, , 1 = 右上圆其余直 2 = 左下圆其余直 3 = 右上圆其余直  4 = 右下圆其余直 5 = 上圆下直 6 = 上直下圆 7 = 左圆右直 8 = 左直右圆 9 = 左上右下圆左下右上直 10 = 左下右上圆左上右下直 11 = 左上直其余圆 12 = 左下直其余圆 13 = 右上直其余圆 14 = 右下直其余圆
.参数 窗口句柄, 整数型, , 
.参数 方式, 整数型, , 
.参数 圆角度, 整数型, , 

.局部变量 lsr, rect, , , 
.局部变量 MyRgn, 整数型, , , 
.局部变量 w, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 _圆角值, 整数型, , , 
.局部变量 MyRgn2, 整数型, , , 
.局部变量 MyRgn1, 整数型, , , 

GetWindowRect (窗口句柄, lsr)
赋值 (w, 相减 (lsr.Width, lsr.x))
赋值 (h, 相减 (lsr.Height, lsr.y))
赋值 (_圆角值, 圆角度)
.判断开始 (等于 (方式, 1))
    赋值 (MyRgn, CreateRoundRectRgn (-30, 30, 相减 (w, 30), 相加 (h, 30), 圆角度, 圆角度))
.判断 (等于 (方式, 2))
    赋值 (MyRgn, CreateRoundRectRgn (30, -30, 相加 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 3))
    赋值 (MyRgn, CreateRoundRectRgn (-30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 4))
    赋值 (MyRgn, CreateRoundRectRgn (-30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 5))
    赋值 (MyRgn, CreateRoundRectRgn (30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 6))
    赋值 (MyRgn, CreateRoundRectRgn (30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 7))
    赋值 (MyRgn, CreateRoundRectRgn (30, 30, 相加 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 8))
    赋值 (MyRgn, CreateRoundRectRgn (-30, 30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
.判断 (等于 (方式, 9))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (30, 30, 相加 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (-30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 10))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (-30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (30, -30, 相加 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 11))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (-30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 12))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (-30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 13))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (30, -30, 相减 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (30, 30, 相加 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 14))
    赋值 (MyRgn, CreateRectRgn (0, 0, 0, 0))
    赋值 (MyRgn1, CreateRoundRectRgn (30, 30, 相减 (w, 30), 相加 (h, 30), _圆角值, _圆角值))
    赋值 (MyRgn2, CreateRoundRectRgn (30, -30, 相加 (w, 30), 相减 (h, 30), _圆角值, _圆角值))
    CombineRgn (MyRgn, MyRgn1, MyRgn2, 1)
.判断 (等于 (方式, 15))
    赋值 (MyRgn, CreateRoundRectRgn (0, 0, w, h, 圆角度, 圆角度))
.默认
    
.判断结束


.如果 (不等于 (MyRgn, 0))
    SetWindowRgn (窗口句柄, MyRgn, 假)
    DeleteObject (MyRgn)
    
.否则
    
.如果结束


.子程序 取位图, 字节集, , 
.参数 原位图, 字节集, , 
.参数 取出图像左边, 整数型, , 
.参数 取出图像顶边, 整数型, , 
.参数 取出宽度, 整数型, , 
.参数 取出高度, 整数型, , 

.局部变量 图像宽度, 整数型, , , 
.局部变量 图像高度, 整数型, , , 
.局部变量 图像位数, 整数型, , , 
.局部变量 图像压缩, 整数型, , , 
.局部变量 新位图, 字节集, , , 
.局部变量 新位图信息头, BITMAPINFOHEADER, , , 
.局部变量 新位图文件头, 文件头信息_, , , 
.局部变量 文件长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 颜色点阵偏移量, 整数型, , , 
.局部变量 点的大小, 整数型, , , 
.局部变量 颜色表, 字节集, , , 
.局部变量 总数据偏移, 整数型, , , 
.局部变量 新行宽, 整数型, , , 
.局部变量 原行宽, 整数型, , , 
.局部变量 时间, 整数型, , , 

赋值 (图像宽度, 取字节集数据 (取字节集中间 (原位图, 19, 4), #整数型, ))
赋值 (图像高度, 取字节集数据 (取字节集中间 (原位图, 23, 4), #整数型, ))
赋值 (图像位数, 取字节集数据 (取字节集中间 (原位图, 29, 2), #短整数型, ))
赋值 (图像压缩, 取字节集数据 (取字节集中间 (原位图, 31, 4), #整数型, ))
.如果真 (不等于 (图像压缩, 0))
    返回 ({  })
.如果真结束
.如果真 (等于 (图像位数, 32))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 4)
.如果真结束
.如果真 (等于 (图像位数, 24))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 3)
.如果真结束
.如果真 (等于 (图像位数, 16))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 2)
.如果真结束
.如果真 (等于 (图像位数, 8))
    赋值 (颜色点阵偏移量, 1078)
    赋值 (点的大小, 1)
    赋值 (颜色表, 取字节集中间 (原位图, 55, 1024))
.如果真结束
.如果真 (小于 (图像位数, 8))
    返回 ({  })
.如果真结束
.如果真 (或者 (大于 (相加 (取出图像左边, 取出宽度), 图像宽度), 大于 (相加 (取出图像顶边, 取出高度), 图像高度), 小于 (取出图像左边, 0), 小于 (取出图像顶边, 0), 小于或等于 (取出宽度, 0), 小于或等于 (取出高度, 0)))
    返回 ({  })
.如果真结束
赋值 (原行宽, 左移 (右移 (相加 (相乘 (图像宽度, 图像位数), 31), 5), 2))
赋值 (新行宽, 左移 (右移 (相加 (相乘 (取出宽度, 图像位数), 31), 5), 2))
赋值 (文件长度, 相乘 (新行宽, 取出高度))
赋值 (新位图, 取空白字节集 (相加 (文件长度, 54, 取字节集长度 (颜色表))))
赋值 (新位图文件头.文件类型, 19778)
赋值 (新位图文件头.偏移量, 颜色点阵偏移量)
赋值 (新位图文件头.结果大小, 相加 (颜色点阵偏移量, 文件长度))
复制内存_复制位图文件头到字节集 (新位图 [1], 新位图文件头, 14)
赋值 (新位图信息头.biSize, 40)
赋值 (新位图信息头.biWidth, 取出宽度)
赋值 (新位图信息头.biHeight, 取出高度)
赋值 (新位图信息头.biPlanes, 1)
赋值 (新位图信息头.biBitCount, 图像位数)
复制内存_复制位图信息头到字节集 (新位图 [15], 新位图信息头, 40)
.如果真 (等于 (图像位数, 8))
    复制内存_字节集到字节集 (新位图 [55], 颜色表 [1], 1024)
.如果真结束
 ' 高偏移 ＝ 原行宽 × (图像高度 － 取出高度 － 取出图像顶边)
 ' 宽偏移 ＝ 取出图像左边 × 点的大小
赋值 (总数据偏移, 相加 (相乘 (原行宽, 相减 (图像高度, 取出高度, 取出图像顶边)), 相乘 (取出图像左边, 点的大小))) ' 总偏移=高偏移+宽偏移
.计次循环首 (取出高度, i)
    复制内存_字节集到字节集 (新位图 [相加 (相乘 (相减 (i, 1), 新行宽), 颜色点阵偏移量, 1)], 原位图 [相加 (颜色点阵偏移量, 总数据偏移, 相乘 (相减 (i, 1), 原行宽), 1)], 新行宽)
.计次循环尾 ()
返回 (新位图)


.子程序 rect到自建矩形, 自建矩形, , 
.参数 rect, rect, , 

.局部变量 l, 自建矩形, , , 

赋值 (l.左边, rect.x)
赋值 (l.顶边, rect.y)
赋值 (l.宽度, rect.Width)
赋值 (l.高度, rect.Height)
返回 (l)

.子程序 UTF8编码到ANSI, 文本型, , 
.参数 欲转换utf8, 字节集, , 欲转换UTF-8字节集

.局部变量 len, 整数型, , , 
.局部变量 Unicode, 字节集, , , 
.局部变量 ll, 整数型, , , 
.局部变量 ansi_len, 整数型, , , 
.局部变量 unicode_len, 整数型, , , 
.局部变量 ansi, 文本型, , , 

.如果真 (等于 (欲转换utf8, {  }))
    返回 (“”)
.如果真结束
赋值 (ll, 取字节集长度 (欲转换utf8))
赋值 (len, MultiByteToWideChar_utf_8 (65001, 0, 欲转换utf8, ll, {  }, 0))
赋值 (Unicode, 取空白字节集 (相乘 (len, 2)))
MultiByteToWideChar_utf_8 (65001, 0, 欲转换utf8, ll, Unicode, 相乘 (len, 2))
赋值 (unicode_len, 相除 (取字节集长度 (Unicode), 2))
赋值 (ansi_len, WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, 0, “”, 0))
赋值 (ansi, 取空白文本 (ansi_len))
WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, ansi_len, “”, 0)
返回 (ansi)


.子程序 自建矩形到rect, rect, , 
.参数 rect, 自建矩形, , 

.局部变量 l, rect, , , 

赋值 (l.x, rect.左边)
赋值 (l.y, rect.顶边)
赋值 (l.Width, rect.宽度)
赋值 (l.Height, rect.高度)
返回 (l)

.类模块 字节流, , , 

.程序集变量 成员_内存句柄, 整数型, , , 
.程序集变量 成员_内存指针, 整数型, , , 
.程序集变量 成员_字节流对象, 整数型, , , 
.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
释放 ()

.子程序 创建, 整数型, 公开, 成功返回字节流指针，失败返回0。上次创建的字节流指针会自动释放。
.参数 参数_字节集, 字节集, 可空, 字节集数据。
.参数 参数_大小, 整数型, 可空, 默认为 参数_字节集 的长度

释放 ()
.如果真 (是否为空 (参数_大小))
    赋值 (参数_大小, 取字节集长度 (参数_字节集))
.如果真结束
赋值 (成员_内存句柄, GlobalAlloc (位或 (64, 2), 参数_大小))
CreateStreamOnHGlobal (成员_内存句柄, 0, 成员_字节流对象)
赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
WriteProcessMemory (GetCurrentProcess (), 成员_内存指针, lstrcpyn_字节集 (参数_字节集, 参数_字节集, 0), 参数_大小, 0)
GlobalUnlock (成员_内存句柄)
返回 (成员_字节流对象)

.子程序 释放, 空白型, 公开, 释放内存资源。
.局部变量 var, 整数型, , , 
.局部变量 addr, 整数型, , , 

.如果真 (不等于 (成员_字节流对象, 0))
    赋值 (var, 取字节集数据 (指针到字节集 (成员_字节流对象, 4), #整数型, ))
    赋值 (var, 相加 (var, 相乘 (2, 4))) ' Release方法地址
    赋值 (addr, 取字节集数据 (指针到字节集 (var, 4), #整数型, )) ' 取出Release方法地址
    CallWindowProc ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }, addr, 成员_字节流对象, 0, 0) ' 调用Release方法
    GlobalFree (成员_内存句柄)
    赋值 (成员_内存句柄, 0)
    赋值 (成员_字节流对象, 0)
.如果真结束


.子程序 取尺寸, 整数型, 公开, 取出字节流的字节集数据尺寸大小。
返回 (GlobalSize (成员_内存句柄))


.子程序 取字节流指针, 整数型, 公开, 取出字节流对象的内存指针。
返回 (成员_字节流对象)


.子程序 取内存句柄, 整数型, 公开, 
返回 (成员_内存句柄)


.子程序 置字节流指针, 逻辑型, 公开, 将另一个字节流对象指针导入到本类，之前的指针会自动释放。
.参数 参数_字节流指针, 整数型, , 

释放 ()
GetHGlobalFromStream (参数_字节流指针, 成员_内存句柄)
赋值 (成员_字节流对象, 参数_字节流指针)
返回 (不等于 (成员_内存句柄, 0))

.子程序 取出字节集, 字节集, 公开, 取出字节流指针的字节集数据。
.局部变量 局部_大小, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
赋值 (局部_大小, GlobalSize (成员_内存指针))
赋值 (局部_数据, 指针到字节集 (成员_内存指针, 局部_大小))
GlobalUnlock (成员_内存句柄)
返回 (局部_数据)


.类模块 子类化, , , 

.程序集变量 m_旧程序过程, 子程序指针, , , 
.程序集变量 m_窗口句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
还原 ()

.子程序 还原, 整数型, , 
.局部变量 r, 整数型, , , 

赋值 (r, 到整数 (SetWindowLongA (m_窗口句柄, -4, m_旧程序过程)))
 ' m_旧程序过程 ＝ 0
赋值 (m_窗口句柄, 0)
返回 (r)

.子程序 初始化, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 新窗口过程, 子程序指针, , 

赋值 (m_窗口句柄, 窗口句柄)
赋值 (m_旧程序过程, SetWindowLongA (m_窗口句柄, -4, 新窗口过程))
返回 (到数值 (m_旧程序过程))


.子程序 调用旧窗口过程, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 消息号, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

返回 (CallWindowProcA (m_旧程序过程, 窗口句柄, 消息号, 参数一, 参数二))



 ' 不属于任何一个程序集、类模块的函数：
