 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 401
    高度 = 385
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “[神2也教你学E] - 图片透明和去色计算及加深减淡效果”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库





.窗口程序集 窗口程序集1, , , 

.子程序 _百分比滑块条_位置被改变, 空白型, , 
赋值 (., 相加 (到文本 (.), “ %”))

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 临时整数容器, 整数型, , , 

.如果真 (.)
    赋值 (临时整数容器, 0)
.如果真结束
.如果真 (.)
    赋值 (临时整数容器, 1)
.如果真结束
.如果真 (.)
    赋值 (临时整数容器, 2)
.如果真结束
.如果真 (.)
    赋值 (临时整数容器, 3)
.如果真结束

未知函数_67174451 (., , , 临时整数容器)

.子程序 特效_加深颜色, 空白型, , 
.参数 画板, 画板, , 
.参数 加深度, 整数型, , 0~255

.局部变量 临时整数容器, 整数型, , "2", 
.局部变量 临时色变量, 整数型, , "4", 
.局部变量 临时色变量B, 整数型, , "4", 
.局部变量 临时文本变量, 文本型, , "2", 
.局部变量 透明值, 整数型, , "3", 

.变量循环首 (1, 画板., 1, 临时整数容器 [1])
    .变量循环首 (1, 画板., 1, 临时整数容器 [2])
        赋值 (临时文本变量 [1], 取文本右边 (取十六进制文本 (画板.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 ( [1], 十六到十进制 (取文本左边 ( [1], 2)))
        赋值 ( [2], 十六到十进制 (取文本中间 ( [1], 3, 2)))
        赋值 ( [3], 十六到十进制 (取文本右边 ( [1], 2)))
        
        赋值 (临时色变量B [1], 相减 (临时色变量 [1], 加深度))
        赋值 (临时色变量B [2], 相减 (临时色变量 [2], 加深度))
        赋值 (临时色变量B [3], 相减 (临时色变量 [3], 加深度))
        .如果真 (小于 (临时色变量B [1], 0))
            赋值 (临时色变量B [1], 0)
        .如果真结束
        .如果真 (小于 (临时色变量B [2], 0))
            赋值 (临时色变量B [2], 0)
        .如果真结束
        .如果真 (小于 (临时色变量B [3], 0))
            赋值 (临时色变量B [3], 0)
        .如果真结束
        画板.画点 (临时整数容器 [1], 临时整数容器 [2], 取颜色值 (临时色变量B [3], 临时色变量B [2], 临时色变量B [1]))
    .变量循环尾 ()
.变量循环尾 ()

.子程序 画透明图, 空白型, , 
.参数 输出画板, 画板, , 
.参数 透明度, 整数型, , 
.参数 顶部图画板, 画板, , 
.参数 底部图画板, 画板, , 
.参数 去色, 整数型, , 0:不去任何色  1:去红色  2:去绿色  3:去蓝色

.局部变量 临时整数容器, 整数型, , "2", 
.局部变量 临时色变量, 整数型, , "4", 
.局部变量 临时色变量B, 整数型, , "4", 
.局部变量 临时文本变量, 文本型, , "2", 
.局部变量 透明值, 整数型, , "3", 

.变量循环首 (1, 顶部图画板., 1, 临时整数容器 [1])
    .变量循环首 (1, 顶部图画板., 1, 临时整数容器 [2])
        赋值 (临时文本变量 [1], 取文本右边 (取十六进制文本 (底部图画板.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 (临时色变量 [1], 十六到十进制 (取文本左边 (临时文本变量 [1], 2)))
        赋值 (临时色变量 [2], 十六到十进制 (取文本中间 (临时文本变量 [1], 3, 2)))
        赋值 (临时色变量 [3], 十六到十进制 (取文本右边 (临时文本变量 [1], 2)))
        
        赋值 (临时文本变量 [2], 取文本右边 (取十六进制文本 (顶部图画板.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 (临时色变量B [1], 十六到十进制 (取文本左边 (临时文本变量 [2], 2)))
        赋值 (临时色变量B [2], 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2)))
        赋值 (临时色变量B [3], 十六到十进制 (取文本右边 (临时文本变量 [2], 2)))
         ' 得到点初始值
        .如果 (等于 (去色, 3))
            赋值 (透明值 [1], 0)
        .否则
            赋值 (透明值 [1], 相加 (临时色变量 [1], 相乘 (相除 (相减 (临时色变量B [1], 临时色变量 [1]), 100), 透明度)))
        .如果结束
        .如果 (等于 (去色, 2))
            赋值 (透明值 [2], 0)
        .否则
            赋值 (透明值 [2], 相加 (临时色变量 [2], 相乘 (相除 (相减 (临时色变量B [2], 临时色变量 [2]), 100), 透明度)))
        .如果结束
        .如果 (等于 (去色, 1))
            赋值 (透明值 [3], 0)
        .否则
            赋值 (透明值 [3], 相加 (临时色变量 [3], 相乘 (相除 (相减 (临时色变量B [3], 临时色变量 [3]), 100), 透明度)))
        .如果结束
         ' 判断去色的操作
        .如果真 (大于 (透明值 [1], 255))
            赋值 (透明值 [1], 255)
        .如果真结束
        .如果真 (大于 (透明值 [2], 255))
            赋值 (透明值 [2], 255)
        .如果真结束
        .如果真 (大于 (透明值 [3], 255))
            赋值 (透明值 [3], 255)
        .如果真结束
        .如果真 (小于 (透明值 [1], 0))
            赋值 (透明值 [1], 0)
        .如果真结束
        .如果真 (小于 (透明值 [2], 0))
            赋值 (透明值 [2], 0)
        .如果真结束
        .如果真 (小于 (透明值 [3], 0))
            赋值 (透明值 [3], 0)
        .如果真结束
         ' 避免颜色超出颜色最大/最小值
        输出画板.画点 (临时整数容器 [1], 临时整数容器 [2], 取颜色值 (透明值 [3], 透明值 [2], 透明值 [1]))
         ' 画出最终的结果
    .变量循环尾 ()
.变量循环尾 ()

.子程序 特效_减淡颜色, 空白型, , 
.参数 画板, 画板, , 
.参数 减淡度, 整数型, , 0~255

.局部变量 临时整数容器, 整数型, , "2", 
.局部变量 临时色变量, 整数型, , "4", 
.局部变量 临时色变量B, 整数型, , "4", 
.局部变量 临时文本变量, 文本型, , "2", 
.局部变量 透明值, 整数型, , "3", 

.变量循环首 (1, 画板., 1, 临时整数容器 [1])
    .变量循环首 (1, 画板., 1, 临时整数容器 [2])
        赋值 (临时文本变量 [1], 取文本右边 (取十六进制文本 (画板.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 ( [1], 十六到十进制 (取文本左边 ( [1], 2)))
        赋值 ( [2], 十六到十进制 (取文本中间 ( [1], 3, 2)))
        赋值 ( [3], 十六到十进制 (取文本右边 ( [1], 2)))
        
        赋值 (临时色变量B [1], 相加 (临时色变量 [1], 减淡度))
        赋值 (临时色变量B [2], 相加 (临时色变量 [2], 减淡度))
        赋值 (临时色变量B [3], 相加 (临时色变量 [3], 减淡度))
        .如果真 (大于 (临时色变量B [1], 255))
            赋值 (临时色变量B [1], 255)
        .如果真结束
        .如果真 (大于 (临时色变量B [2], 255))
            赋值 (临时色变量B [2], 255)
        .如果真结束
        .如果真 (大于 (临时色变量B [3], 255))
            赋值 (临时色变量B [3], 255)
        .如果真结束
        画板.画点 (临时整数容器 [1], 临时整数容器 [2], 取颜色值 (临时色变量B [3], 临时色变量B [2], 临时色变量B [1]))
    .变量循环尾 ()
.变量循环尾 ()

.子程序 特效存放, 空白型, , 
 ' 混合两个图象
临时色变量B [1] ＝ 取绝对值 (临时色变量 [1] － 十六到十进制 (取文本左边 (临时文本变量 [2], 2))) × 百分比滑块条.位置
临时色变量B [2] ＝ 取绝对值 (临时色变量 [2] － 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2))) × 百分比滑块条.位置
临时色变量B [3] ＝ 取绝对值 (临时色变量 [3] － 十六到十进制 (取文本右边 (临时文本变量 [2], 2))) × 百分比滑块条.位置
 ' 以下代码实现全红
画板3.画点 (a [1], a [2], (临时色变量 [3] × 画板1.宽度 ＋ 临时色变量 [2] × 画板1.高度 ＋ 临时色变量 [1] × 11) ÷ 100)
 ' 粒子效果
临时色变量B [2] ＝ 取绝对值 (临时色变量 [2] － 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2))) × 百分比滑块条.位置
画板3.画点 (a [1], a [2], 取颜色值 (临时色变量 [3], 临时色变量B [2], 临时色变量 [1]))
 ' 反象原始代码
临时色变量B [1] ＝ 256 － 十六到十进制 (取文本左边 (临时文本变量 [2], 2))
临时色变量B [2] ＝ 256 － 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2))
临时色变量B [3] ＝ 256 － 十六到十进制 (取文本右边 (临时文本变量 [2], 2))
画板3.画点 (a [1], a [2], 取颜色值 (临时色变量B [3], 临时色变量B [2], 临时色变量B [1]))
 ' 颜色加深
临时色变量B [1] ＝ 十六到十进制 (取文本左边 (临时文本变量 [2], 2))
临时色变量B [2] ＝ 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2))
临时色变量B [3] ＝ 十六到十进制 (取文本右边 (临时文本变量 [2], 2))
如果真 (临时色变量B [1] ＜ 0)
临时色变量B [1] ＝ 255 － 临时色变量B [1]
如果真 (临时色变量B [2] ＜ 0)
临时色变量B [2] ＝ 255 － 临时色变量B [2]
如果真 (临时色变量B [3] ＜ 0)
临时色变量B [3] ＝ 255 － 临时色变量B [3]
画板3.画点 (a [1], a [2], 取颜色值 (临时色变量B [3], 临时色变量B [2], 临时色变量B [1]))
 ' 颜色加淡
临时色变量B [1] ＝ 十六到十进制 (取文本左边 (临时文本变量 [2], 2))
临时色变量B [2] ＝ 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2))
临时色变量B [3] ＝ 十六到十进制 (取文本右边 (临时文本变量 [2], 2))
如果真 (临时色变量B [1] ＞ 255)
临时色变量B [1] ＝ 临时色变量B [1] － 255
如果真 (临时色变量B [2] ＞ 255)
临时色变量B [2] ＝ 临时色变量B [2] － 255
如果真 (临时色变量B [3] ＞ 255)
临时色变量B [3] ＝ 临时色变量B [3] － 255
画板3.画点 (a [1], a [2], 取颜色值 (临时色变量B [3], 临时色变量B [2], 临时色变量B [1]))
 ' 画透明图形
透明值 [1] ＝ 临时色变量 [1] ＋ (临时色变量B [1] － 临时色变量 [1]) ÷ 100 × 百分比滑块条.位置
透明值 [2] ＝ 临时色变量 [2] ＋ (临时色变量B [2] － 临时色变量 [2]) ÷ 100 × 百分比滑块条.位置
透明值 [3] ＝ 临时色变量 [3] ＋ (临时色变量B [3] － 临时色变量 [3]) ÷ 100 × 百分比滑块条.位置
画板3.画点 (a [1], a [2], 取颜色值 (透明值 [3], 透明值 [2], 透明值 [1]))

.子程序 十六到十进制, 整数型, , 
.参数 十六进制文本, 文本型, , 

.局部变量 临时文本变量, 文本型, , , 
.局部变量 临时整数变量, 整数型, , "2", 

赋值 (十六进制文本, 到小写 (十六进制文本))
.变量循环首 (1, 取文本长度 (十六进制文本), 1, 临时整数变量 [1])
    赋值 (临时文本变量, 取文本中间 (十六进制文本, 临时整数变量 [1], 1))
    .如果 (并且 (大于或等于 (取代码 (临时文本变量, ), 取代码 (“a”, )), 小于或等于 (取代码 (临时文本变量, ), 取代码 (“f”, ))))
        赋值 (临时整数变量 [2], 相加 (临时整数变量 [2], 相乘 (相加 (相减 (取代码 (临时文本变量, ), 取代码 (“a”, )), 10), 求次方 (16, 相减 (取文本长度 (十六进制文本), 临时整数变量 [1])))))
    .否则
        赋值 (临时整数变量 [2], 相加 (临时整数变量 [2], 相乘 (到数值 (临时文本变量), 求次方 (16, 相减 (取文本长度 (十六进制文本), 临时整数变量 [1])))))
    .如果结束
    
.变量循环尾 ()
返回 (临时整数变量 [2])

.子程序 _按钮2_被单击, 空白型, , 
特效_加深颜色 (15)

.子程序 _按钮3_被单击, 空白型, , 
特效_减淡颜色 (15)

.子程序 快画透明图, 字节集, , 
.参数 透明度, 整数型, , 
.参数 顶部图, 字节型, , 
.参数 底部图, 字节型, , 
.参数 去色, 整数型, , 0:不去任何色  1:去红色  2:去绿色  3:去蓝色

.局部变量 临时整数容器, 整数型, , "2", 
.局部变量 临时色变量, 整数型, , "4", 
.局部变量 临时色变量B, 整数型, , "4", 
.局部变量 临时文本变量, 文本型, , "2", 
.局部变量 透明值, 整数型, , "3", 

.变量循环首 (1, 顶部图., 1, 临时整数容器 [1])
    .变量循环首 (1, 顶部图., 1, 临时整数容器 [2])
        赋值 (临时文本变量 [1], 取文本右边 (取十六进制文本 (底部图.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 (临时色变量 [1], 十六到十进制 (取文本左边 (临时文本变量 [1], 2)))
        赋值 (临时色变量 [2], 十六到十进制 (取文本中间 (临时文本变量 [1], 3, 2)))
        赋值 (临时色变量 [3], 十六到十进制 (取文本右边 (临时文本变量 [1], 2)))
        
        赋值 (临时文本变量 [2], 取文本右边 (取十六进制文本 (顶部图.取点 (临时整数容器 [1], 临时整数容器 [2])), 6))
        赋值 (临时色变量B [1], 十六到十进制 (取文本左边 (临时文本变量 [2], 2)))
        赋值 (临时色变量B [2], 十六到十进制 (取文本中间 (临时文本变量 [2], 3, 2)))
        赋值 (临时色变量B [3], 十六到十进制 (取文本右边 (临时文本变量 [2], 2)))
         ' 得到点初始值
        .如果 (等于 (去色, 3))
            赋值 (透明值 [1], 0)
        .否则
            赋值 (透明值 [1], 相加 (临时色变量 [1], 相乘 (相除 (相减 (临时色变量B [1], 临时色变量 [1]), 100), 透明度)))
        .如果结束
        .如果 (等于 (去色, 2))
            赋值 (透明值 [2], 0)
        .否则
            赋值 (透明值 [2], 相加 (临时色变量 [2], 相乘 (相除 (相减 (临时色变量B [2], 临时色变量 [2]), 100), 透明度)))
        .如果结束
        .如果 (等于 (去色, 1))
            赋值 (透明值 [3], 0)
        .否则
            赋值 (透明值 [3], 相加 (临时色变量 [3], 相乘 (相除 (相减 (临时色变量B [3], 临时色变量 [3]), 100), 透明度)))
        .如果结束
         ' 判断去色的操作
        .如果真 (大于 (透明值 [1], 255))
            赋值 (透明值 [1], 255)
        .如果真结束
        .如果真 (大于 (透明值 [2], 255))
            赋值 (透明值 [2], 255)
        .如果真结束
        .如果真 (大于 (透明值 [3], 255))
            赋值 (透明值 [3], 255)
        .如果真结束
        .如果真 (小于 (透明值 [1], 0))
            赋值 (透明值 [1], 0)
        .如果真结束
        .如果真 (小于 (透明值 [2], 0))
            赋值 (透明值 [2], 0)
        .如果真结束
        .如果真 (小于 (透明值 [3], 0))
            赋值 (透明值 [3], 0)
        .如果真结束
         ' 避免颜色超出颜色最大/最小值
        临时整数容器.画点 ( [1], 临时整数容器 [2], 取颜色值 (透明值 [3], 透明值 [2], 透明值 [1]))
         ' 画出最终的结果
    .变量循环尾 ()
.变量循环尾 ()


 ' 不属于任何一个程序集、类模块的函数：
