 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “By 叮咚茶”
    帮助文件名 = “”



.常量 TH32CS_SNAPALL, "15", , 
.常量 PROCESS_QUERY_INFORMATION, "1024", , 
.常量 PROCESS_VM_READ, "16", , 
.常量 MEM_PRIVATE, "131072", 公开, 
.常量 PAGE_READWRITE, "4", 公开, 
.常量 PM_REMOVE, "1", , 
.常量 WM_GETTEXTLENGTH, "14", , 
.常量 WM_GETTEXT, "13", , 
.常量 WM_CLOSE, "16", , 当一个窗口或应用程序要关闭时发送一个信号
.常量 WM_SETTEXT, "12", , 应用程序发送此消息来设置一个窗口的文本
.常量 KEYEVENTF_KEYUP, "2", , 
.常量 WM_KEYDOWN, "256", , 
.常量 VK_CONTROL, "17", , 
.常量 WM_KEYUP, "257", , 
.常量 WM_HOTKEY, "786", , 当用户按下由REGISTERHOTKEY函数注册的热键时提交此消息
.常量 GWL_WNDPROC, "-4", , 
.常量 MOD_WIN, "8", , 
.常量 WM_DESTROY, "2", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 PROCESSENTRY32, , 
    .成员 dwsize, 整数型, , , 
    .成员 cntusage, 整数型, , , 
    .成员 th32ProcessID, 整数型, , , 
    .成员 th32defaultheapid, 整数型, , , 
    .成员 th32moduleid, 整数型, , , 
    .成员 cntthreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcpriclassbase, 整数型, , , 
    .成员 dwflags, 整数型, , , 
    .成员 szExefile, 字节型, , "260", 

数据类型 MEMORY_BASIC_INFORMATION, , 
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocattionProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 POINTAPI, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 POINT, POINTAPI, , , 


.DLL命令 RegQueryValue, 整数型, "advapi32.dll", "RegQueryValueA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 lpValue, 文本型, , 
    .参数 lpcbValue, 整数型, 传址, 

.DLL命令 RegOpenKeyA, 整数型, "advapi32.dll", "RegOpenKeyA", 公开, RegOpenKey，打开一个现有的注册表项
    .参数 标准项名或句柄, 整数型, , hKey，一个已打开项的句柄，或指定一个标准项名
    .参数 项名, 文本型, , lpSubKey，要打开的项名
    .参数 打开注册表项句柄, 整数型, 传址, phkResult，指定一个变量，用于装载（保存）打开注册表项的一个句柄

.DLL命令 RegCloseKey, 整数型, "advapi32.dll", "RegCloseKey", 公开, RegCloseKey，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 关闭项句柄, 整数型, , hKey，要关闭的项句柄

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 dwFlags, 整数型, , 
    .参数 th32ProcessID, 整数型, , 

.DLL命令 Process32First, 整数型, "", "Process32First", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 RegQueryValueEx, 整数型, "advapi32.dll", "RegQueryValueExA", , 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 CloseHandle, 整数型, "", "CloseHandle", , 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 hObject, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 VirtualQueryEx, 整数型, "", "VirtualQueryEx", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 info, MEMORY_BASIC_INFORMATION, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 OpenProcess, 整数型, "kernel32", "OpenProcess", , 将句柄返回给过程对象
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 GetTickCount, 整数型, "kernel32", "", , 

.DLL命令 Sleep, 空白型, "", "", , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 TranslateMessage, 整数型, "user32", "", , 
    .参数 lpMsg, MSG, 传址, 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 
    .参数 lpMsg, MSG, 传址, 

.DLL命令 PeekMessage, 整数型, "user32", "PeekMessageA", , 
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 wRemoveMsg, 整数型, , 

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 hWnd1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 hWnd2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 lpsz1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 lpsz2, 文本型, , 欲搜索的类名。零表示忽略;

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 lstrcpyn_字节, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 字节型, 传址 数组, 
    .参数 lpString2, 字节型, 传址 数组, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 文本型, 传址, 
    .参数 lpString2, 文本型, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存
    .参数 Destination, 整数型, , 内存指针
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 数据

.DLL命令 SysAllocStringByteLen, 文本型, "oleaut32.dll", "", , 
    .参数 m_pBase, 字节型, 数组, 
    .参数 FunctionCall, 整数型, , 

.DLL命令 IsWindow, 整数型, "user32", "IsWindow", , 判断一个窗口句柄是否有效  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 待检查窗口的句柄;

.DLL命令 SetFocus, 整数型, "user32", "SetFocus", , 设置键盘焦点  前一个拥有焦点的窗口的句柄
    .参数 hwnd, 整数型, , 准备接收焦点的窗口的句柄

.DLL命令 SetForegroundWindow, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 keybd_event, 空白型, "user32", "keybd_event", , 这个函数模拟了键盘行动
    .参数 bVk, 字节型, , 欲模拟的虚拟键码
    .参数 bScan, 字节型, , 键的OEM扫描码
    .参数 dwFlags, 整数型, , 零；或设为下述两个标志之一;KEYEVENTF_EXTENDEDKEY：指出是一个扩展键，而且在前面冠以0xE0代码;KEYEVENTF_KEYUP：模拟松开一个键
    .参数 dwExtraInfo, 整数型, , 通常不用的一个值。api函数GetMessageExtraInfo可取得这个值。允许使用的值取决于特定的驱动程序;

.DLL命令 WaitMessage, 整数型, "", "WaitMessage", , 

.DLL命令 GetMessage, 整数型, "user32", "GetMessageA", , 
    .参数 lpMsg, MSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 hwnd, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 nIndex, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 RegisterHotKey, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 
    .参数 fsModifiers, 整数型, , 
    .参数 vk, 整数型, , 

.DLL命令 UnregisterHotKey, 整数型, "user32", "", , 
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 PostQuitMessage, 整数型, "user32", "PostQuitMessage", , 
    .参数 nExitCode, 整数型, , 

.DLL命令 GetTempPath, 整数型, "kernel32", "GetTempPathA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 SHGetSpecialFolderPath, 整数型, "shell32.dll", "SHGetSpecialFolderPathA", , 
    .参数 hwnd, 整数型, , 
    .参数 pszPath, 文本型, , 
    .参数 csidl, 整数型, , 
    .参数 fCreate, 整数型, , 

.DLL命令 GetDesktopWindow, 整数型, "user32", "", , 

.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 


.子程序 开导, 空白型, , 
.参数 进程数据, 字节集, , 
.参数 写出文件的全路径, 文本型, , 
.参数 补丁数量, 整数型, 参考, 请提供一个变量

.局部变量 文本位置, 整数型, , , 
.局部变量 结束位置, 整数型, , , 
.局部变量 文件号, 整数型, , , 

赋值 (文件号, 打开文件 (写出文件的全路径, 4, ))
.判断循环首 (不等于 (文本位置, -1))
    赋值 (文本位置, 寻找字节集 (进程数据, 到字节集 (“http://”), 相加 (文本位置, 1)))
    赋值 (结束位置, 寻找字节集 (进程数据, 到字节集 (“ ”), 文本位置))
    .如果真 (等于 (取文本右边 (到文本 (取字节集中间 (进程数据, 文本位置, 相减 (结束位置, 文本位置))), 3), “exe”))
        赋值 (补丁数量, 相加 (补丁数量, 1))
        写文本行 (文件号, 到文本 (取字节集中间 (进程数据, 文本位置, 相减 (结束位置, 文本位置))))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)

.子程序 查找360进程, 整数型, , 寻找已经启动的进程
.局部变量 hSnapshot, 整数型, , , 
.局部变量 pn, PROCESSENTRY32, , , 
.局部变量 Found, 整数型, , , 
.局部变量 进程, 文本型, , , 

赋值 (hSnapshot, CreateToolhelp32Snapshot (#TH32CS_SNAPALL, 0))
赋值 (pn.dwsize, 296)
赋值 (Found, Process32First (hSnapshot, pn))
.判断循环首 (不等于 (Found, 0))
    .如果真 (等于 (到小写 (到文本 (pn.szExefile)), “360safe.exe”))
        返回 (pn.th32ProcessID)
    .如果真结束
    
    赋值 (Found, Process32Next (hSnapshot, pn))
.判断循环尾 ()
返回 (0)

.子程序 取出整个进程数据, 字节集, , 
.参数 PID, 整数型, , 

.局部变量 hProcess, 整数型, , , 
.局部变量 lpAddress, 整数型, , , 
.局部变量 Meminfo, MEMORY_BASIC_INFORMATION, , , 
.局部变量 数据缓冲区, 字节集, , , 
.局部变量 Ret_r, 整数型, , , 
.局部变量 结束地址, 整数型, , , 
.局部变量 开始地址, 整数型, , , 
.局部变量 地址偏移, 整数型, , , 
.局部变量 地址值, 字节型, , , 
.局部变量 结果, 字节集, , , 

赋值 (hProcess, OpenProcess (相加 (#PROCESS_QUERY_INFORMATION, #PROCESS_VM_READ), 0, PID))
.如果真 (等于 (hProcess, 0))
    返回 ({  })
.如果真结束

.判断循环首 (真)
    .如果真 (等于 (VirtualQueryEx (hProcess, lpAddress, Meminfo, 28), 0))
        CloseHandle (hProcess)
        返回 (结果)
    .如果真结束
    
    .如果真 (并且 (等于 (Meminfo.Type, #MEM_PRIVATE), 等于 (Meminfo.Protect, #PAGE_READWRITE)))
        赋值 (数据缓冲区, 取空白字节集 (Meminfo.RegionSize))
        赋值 (Ret_r, ReadProcessMemory (hProcess, lpAddress, 数据缓冲区, Meminfo.RegionSize, 0))
        .如果真 (不等于 (Ret_r, 0))
            赋值 (结果, 相加 (结果, 数据缓冲区))
        .如果真结束
        
    .如果真结束
    
    赋值 (lpAddress, 相加 (lpAddress, Meminfo.RegionSize))
.判断循环尾 ()
CloseHandle (hProcess)
返回 ({  })

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 PID, 整数型, , , 
.局部变量 进程数据, 字节集, , , 
.局部变量 SavePath, 文本型, , , 
.局部变量 补丁数量, 整数型, , , 

赋值 (PID, 查找360进程 ())
.如果真 (不等于 (PID, 0))
    赋值 (进程数据, 取出整个进程数据 (PID))
    赋值 (SavePath, 取空白文本 (260))
    SHGetSpecialFolderPath (0, SavePath, 0, 0)
    赋值 (SavePath, 相加 (SavePath, “\补丁.txt”))
    .如果真 (不等于 (取字节集长度 (进程数据), 0))
        开导 (进程数据, SavePath, 补丁数量)
        信息框 (相加 (“打完收工。。。，整出来 ”, 到文本 (补丁数量), “个补丁地址”), 0, )
        
        返回 ()
    .如果真结束
    
.如果真结束

信息框 (“乍整地出错鸟。。。”, 0, )



 ' 不属于任何一个程序集、类模块的函数：
