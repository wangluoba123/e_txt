 ' 文件类型：Windows控制台程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 344
    高度 = 573
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “硬件模拟键盘鼠标模块测试例程”
    帮助文件名 = “”



.常量 键盘a, "4", 公开, 
.常量 键盘b, "5", 公开, 
.常量 键盘c, "6", 公开, 
.常量 键盘d, "7", 公开, 
.常量 键盘e, "8", 公开, 
.常量 键盘f, "9", 公开, 
.常量 键盘g, "10", 公开, 
.常量 键盘h, "11", 公开, 
.常量 键盘i, "12", 公开, 
.常量 键盘j, "13", 公开, 
.常量 键盘k, "14", 公开, 
.常量 键盘l, "15", 公开, 
.常量 键盘m, "16", 公开, 
.常量 键盘n, "17", 公开, 
.常量 键盘o, "18", 公开, 
.常量 键盘p, "19", 公开, 
.常量 键盘q, "20", 公开, 
.常量 键盘r, "21", 公开, 
.常量 键盘s, "22", 公开, 
.常量 键盘t, "23", 公开, 
.常量 键盘u, "24", 公开, 
.常量 键盘v, "25", 公开, 
.常量 键盘w, "26", 公开, 
.常量 键盘x, "27", 公开, 
.常量 键盘y, "28", 公开, 
.常量 键盘z, "29", 公开, 
.常量 键盘1, "30", 公开, 
.常量 键盘2, "31", 公开, 
.常量 键盘3, "32", 公开, 
.常量 键盘4, "33", 公开, 
.常量 键盘5, "34", 公开, 
.常量 键盘6, "35", 公开, 
.常量 键盘7, "36", 公开, 
.常量 键盘8, "37", 公开, 
.常量 键盘9, "38", 公开, 
.常量 键盘0, "39", 公开, 
.常量 键盘回车, "40", 公开, 
.常量 键盘ESCAPE, "41", 公开, 
.常量 键盘Backspace, "42", 公开, 
.常量 键盘Tab, "43", 公开, 
.常量 键盘空格键, "44", 公开, 
.常量 键盘减号, "45", 公开, - 和 ―
.常量 键盘等号, "46", 公开, = 和 +
.常量 键盘左中括号, "47", 公开, [ 和 {
.常量 键盘右中括号, "48", 公开, ] 和 }
.常量 键盘反斜杠, "49", 公开, \ 和 |
.常量 键盘分号, "51", 公开, ；和 ：
.常量 键盘引号, "52", 公开, ' 和 "
.常量 键盘波浪线, "53", 公开, tab键上面的 ` 和 ~
.常量 键盘逗号, "54", 公开, , 和 <
.常量 键盘句号, "55", 公开, . 和 >
.常量 键盘斜杠和问号, "56", 公开, / 和 ?
.常量 键盘CapsLock, "57", 公开, 
.常量 键盘F1, "58", 公开, 
.常量 键盘F2, "59", 公开, 
.常量 键盘F3, "60", 公开, 
.常量 键盘F4, "61", 公开, 
.常量 键盘F5, "62", 公开, 
.常量 键盘F6, "63", 公开, 
.常量 键盘F7, "64", 公开, 
.常量 键盘F8, "65", 公开, 
.常量 键盘F9, "66", 公开, 
.常量 键盘F10, "67", 公开, 
.常量 键盘F11, "68", 公开, 
.常量 键盘F12, "69", 公开, 
.常量 键盘PrintScreen, "70", 公开, 
.常量 键盘ScrollLock, "71", 公开, 
.常量 键盘Pause, "72", 公开, 
.常量 键盘Insert, "73", 公开, 
.常量 键盘Home, "74", 公开, 
.常量 键盘PageUp, "75", 公开, 
.常量 键盘Delete, "76", 公开, 
.常量 键盘End, "77", 公开, 
.常量 键盘PageDown, "78", 公开, 
.常量 键盘向右箭头, "79", 公开, 
.常量 键盘向左箭头, "80", 公开, 
.常量 键盘向下箭头, "81", 公开, 
.常量 键盘向上箭头, "82", 公开, 
.常量 小键盘NumLock, "83", 公开, 
.常量 小键盘除号, "84", 公开, /
.常量 小键盘乘号, "85", 公开, *
.常量 小键盘减号, "86", 公开, -
.常量 小键盘加号, "87", 公开, +
.常量 小键盘回车, "88", 公开, 
.常量 小键盘1, "89", 公开, 
.常量 小键盘2和向下, "90", 公开, 
.常量 小键盘3, "91", 公开, 
.常量 小键盘4向左, "92", 公开, 
.常量 小键盘5, "93", 公开, 
.常量 小键盘6和向右, "94", 公开, 
.常量 小键盘7, "95", 公开, 
.常量 小键盘8向上, "96", 公开, 
.常量 小键盘9, "97", 公开, 
.常量 小键盘0, "98", 公开, 
.常量 小键盘小数点, "99", 公开, . 和 Del
.常量 键盘左Ctrl, "224", 公开, 
.常量 键盘左Shift, "225", 公开, 
.常量 键盘左Alt, "226", 公开, 
.常量 键盘左Windows, "227", 公开, 
.常量 键盘右Control, "228", 公开, 
.常量 键盘右Shift, "229", 公开, 
.常量 键盘右Alt, "230", 公开, 
.常量 键盘右Windows, "231", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库




.全局变量 匿名全局变量_195, 空白型, , , 
.全局变量 匿名全局变量_298, 空白型, , , 

.DLL命令 打开端口, 整数型, "msdk.dll", "M_Open", , 无论是双头模块还是单头模块，都是从1开始，依次为2/3/4...，最大126
    .参数 端口号, 整数型, , 

.DLL命令 打开指定VID_PID的端口, 整数型, "msdk.dll", "M_Open_VidPid", , 
    .参数 Vid, 整数型, , 
    .参数 Pid, 整数型, , 

.DLL命令 关闭端口, 整数型, "msdk.dll", "M_Close", , 
    .参数 句柄, 整数型, , 

.DLL命令 读取序列号, 整数型, "msdk.dll", "M_GetDevSn", , 
    .参数 句柄, 整数型, , 
    .参数 返回长度, 整数型, 传址, 
    .参数 返回数据, 字节型, 传址 数组, 

.DLL命令 写用户数据, 整数型, "msdk.dll", "M_SetUserData", , 
    .参数 句柄, 整数型, , 
    .参数 用户数据长度, 整数型, , 
    .参数 用户数据, 字节型, 传址 数组, 

.DLL命令 验证用户数据, 整数型, "msdk.dll", "M_VerifyUserData", , 
    .参数 句柄, 整数型, , 
    .参数 用户数据长度, 整数型, , 
    .参数 用户数据, 字节型, 传址 数组, 

.DLL命令 检查盒子是否是可修改盒子, 整数型, "msdk.dll", "M_ChkSupportMdy", , 返回: 0:是可修改； 其他:不可修改
    .参数 句柄, 整数型, , 

.DLL命令 设置新VidPid, 整数型, "msdk.dll", "M_SetNewVidPid", , VidPid设置要符合规则，具体看说明书
    .参数 句柄, 整数型, , 
    .参数 主控端Vid, 整数型, , 
    .参数 主控端Pid, 整数型, , 
    .参数 被控端Vid, 整数型, , 
    .参数 被控端Pid, 整数型, , 

.DLL命令 延时指定时间, 整数型, "msdk.dll", "M_Delay", , 
    .参数 时间, 整数型, , 

.DLL命令 在最小最大值之间延时随机时间, 整数型, "msdk.dll", "M_DelayRandom", , 
    .参数 最小值, 整数型, , 
    .参数 最大值, 整数型, , 

.DLL命令 在最小最大值之间取随机数, 整数型, "msdk.dll", "M_RandDomNbr", , 
    .参数 最小值, 整数型, , 
    .参数 最大值, 整数型, , 

.DLL命令 单击按键, 整数型, "msdk.dll", "M_KeyPress", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是本例程常量数据表中的按键值
    .参数 次数, 整数型, , 

.DLL命令 按下按键, 整数型, "msdk.dll", "M_KeyDown", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是本例程常量数据表中的按键值

.DLL命令 弹起按键, 整数型, "msdk.dll", "M_KeyUp", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是本例程常量数据表中的按键值

.DLL命令 读取按键状态, 整数型, "msdk.dll", "M_KeyState", , 返回值 0: 弹起状态；1:按下状态；-1: 失败(端口未打开)；使用该接口，不允许手工操作键盘，否则该接口返回值有可能不正确
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是本例程常量数据表中的按键值

.DLL命令 单击按键2, 整数型, "msdk.dll", "M_KeyPress2", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是易语言自带的按键值
    .参数 次数, 整数型, , 

.DLL命令 按下按键2, 整数型, "msdk.dll", "M_KeyDown2", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是易语言自带的按键值

.DLL命令 弹起按键2, 整数型, "msdk.dll", "M_KeyUp2", , 
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是易语言自带的按键值

.DLL命令 读取按键状态2, 整数型, "msdk.dll", "M_KeyState2", , 返回值 0: 弹起状态；1:按下状态；-1: 失败(端口未打开)；使用该接口，不允许手工操作键盘，否则该接口返回值有可能不正确
    .参数 句柄, 整数型, , 
    .参数 按键值, 整数型, , 这里的按键值是易语言自带的按键值

.DLL命令 弹起所有按键, 整数型, "msdk.dll", "M_ReleaseAllKey", , 
    .参数 句柄, 整数型, , 

.DLL命令 读取小按键LED状态, 整数型, "msdk.dll", "M_NumLockLedState", , 返回值 0:灭；1:亮；-1: 失败(端口未打开)；
    .参数 句柄, 整数型, , 

.DLL命令 读取CapsLock灯状态, 整数型, "msdk.dll", "M_CapsLockLedState", , 返回值 0:灭；1:亮；-1: 失败(端口未打开)；
    .参数 句柄, 整数型, , 

.DLL命令 读取ScrollLock灯状态, 整数型, "msdk.dll", "M_ScrollLockLedState", , 返回值 0:灭；1:亮；-1: 失败(端口未打开)；
    .参数 句柄, 整数型, , 

.DLL命令 输入ASCII字符串, 整数型, "msdk.dll", "M_KeyInputString", , 返回值 0:灭；1:亮；-1: 失败(端口未打开)；
    .参数 句柄, 整数型, , 
    .参数 输入串, 文本型, 传址, 
    .参数 输入串长度, 整数型, , 

.DLL命令 单击左键, 整数型, "msdk.dll", "M_LeftClick", , 
    .参数 句柄, 整数型, , 
    .参数 次数, 整数型, , 

.DLL命令 双击左键, 整数型, "msdk.dll", "M_LeftDoubleClick", , 
    .参数 句柄, 整数型, , 
    .参数 次数, 整数型, , 

.DLL命令 按下左键不弹起, 整数型, "msdk.dll", "M_LeftDown", , 
    .参数 句柄, 整数型, , 

.DLL命令 弹起左键, 整数型, "msdk.dll", "M_LeftUp", , 
    .参数 句柄, 整数型, , 

.DLL命令 单击右键, 整数型, "msdk.dll", "M_RightClick", , 
    .参数 句柄, 整数型, , 
    .参数 次数, 整数型, , 

.DLL命令 按下右键不弹起, 整数型, "msdk.dll", "M_RightDown", , 
    .参数 句柄, 整数型, , 

.DLL命令 弹起右键, 整数型, "msdk.dll", "M_RightUp", , 
    .参数 句柄, 整数型, , 

.DLL命令 单击中键, 整数型, "msdk.dll", "M_MiddleClick", , 
    .参数 句柄, 整数型, , 
    .参数 次数, 整数型, , 

.DLL命令 按下中键不弹起, 整数型, "msdk.dll", "M_MiddleDown", , 
    .参数 句柄, 整数型, , 

.DLL命令 弹起中键, 整数型, "msdk.dll", "M_MiddleUp", , 
    .参数 句柄, 整数型, , 

.DLL命令 弹起鼠标的所有按键, 整数型, "msdk.dll", "M_ReleaseAllMouse", , 
    .参数 句柄, 整数型, , 

.DLL命令 读取鼠标左中右键状态, 整数型, "msdk.dll", "M_MouseKeyState", , 
    .参数 句柄, 整数型, , 
    .参数 键值, 整数型, , 

.DLL命令 滚动滚轮, 整数型, "msdk.dll", "M_MouseWheel", , 
    .参数 句柄, 整数型, , 
    .参数 滚动量, 整数型, , 

.DLL命令 将鼠标移动到原点, 整数型, "msdk.dll", "M_ResetMousePos", , 
    .参数 句柄, 整数型, , 

.DLL命令 从当前位置相对移动鼠标, 整数型, "msdk.dll", "M_MoveR", , 
    .参数 句柄, 整数型, , 
    .参数 X方向距离, 整数型, , 
    .参数 Y方向距离, 整数型, , 

.DLL命令 移动鼠标到指定坐标, 整数型, "msdk.dll", "M_MoveTo", , 如果出现过将鼠标移动的距离超过屏幕大小，再次 MoveTo 可能会出现无法正确移动到指定坐标的问题！如果出现该问题，需调用ResetMousePos复位
    .参数 句柄, 整数型, , 
    .参数 X方向坐标, 整数型, , 
    .参数 Y方向坐标, 整数型, , 

.DLL命令 读取当前鼠标所在坐标, 整数型, "msdk.dll", "M_GetCurrMousePos", , 该接口只有在执行一次MoveTo或ResetMousePos接口后才能正确执行
    .参数 句柄, 整数型, , 
    .参数 X方向坐标, 整数型, 传址, 
    .参数 Y方向坐标, 整数型, 传址, 

.DLL命令 从当前位置相对移动鼠标2, 整数型, "msdk.dll", "M_MoveR2", , 只合适主控机和被控机是同一台电脑
    .参数 句柄, 整数型, , 
    .参数 X方向距离, 整数型, , 
    .参数 Y方向距离, 整数型, , 

.DLL命令 移动鼠标到指定坐标2, 整数型, "msdk.dll", "M_MoveTo2", , 只合适主控机和被控机是同一台电脑;将调用Windows API获取当前鼠标位置
    .参数 句柄, 整数型, , 
    .参数 X方向坐标, 整数型, , 
    .参数 Y方向坐标, 整数型, , 

.DLL命令 读取当前鼠标所在坐标2, 整数型, "msdk.dll", "M_GetCurrMousePos2", , 调用Windows API获取当前鼠标位置
    .参数 X方向坐标, 整数型, 传址, 
    .参数 Y方向坐标, 整数型, 传址, 

.DLL命令 绝对坐标移动被控机分辨率, 整数型, "msdk.dll", "M_ResolutionUsed", , 返回值如果是-10，表示该盒子不支持绝对移动功能。返回0表示执行正确。可以用该接口判断盒子是否支持绝对移动功能
    .参数 句柄, 整数型, , 
    .参数 X方向, 整数型, , 必须>0
    .参数 Y方向, 整数型, , 必须>0

.DLL命令 移动鼠标到指定坐标3, 整数型, "msdk.dll", "M_MoveTo3", , 
    .参数 句柄, 整数型, , 
    .参数 X方向坐标, 整数型, , 必须>=0
    .参数 Y方向坐标, 整数型, , 必须>=0

.DLL命令 测试_移动鼠标到指定坐标3, 整数型, "msdk.dll", "M_MoveTo3_TEST", , 
    .参数 句柄, 整数型, , 
    .参数 X方向坐标, 整数型, , 必须>=0
    .参数 Y方向坐标, 整数型, , 必须>=0
    .参数 步伐, 整数型, , 必须>=0
    .参数 每步延时, 整数型, , 必须>=0

.窗口程序集 窗口程序集1, , , 

.程序集变量 端口句柄, 整数型, , , 
.程序集变量 返回长度, 整数型, , , 
.程序集变量 命令, 字节型, , "16", 
.程序集变量 返回数据, 字节型, , "16", 
.程序集变量 命令长度, 整数型, , , 
.程序集变量 超时时间, 整数型, , , 
.程序集变量 按键值, 整数型, , , 
.程序集变量 次数, 整数型, , , 
.程序集变量 鼠标坐标X, 整数型, , , 
.程序集变量 鼠标坐标Y, 整数型, , , 
.程序集变量 设备序列号, 字节型, , "16", 
.程序集变量 设备序列号字符串, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (端口句柄, -1)

.子程序 _打开端口_被单击, 空白型, , 
.如果真 (大于 (端口句柄, 0))
    信息框 (“端口已经打开，请不要重复打开端口。请关闭端口后才能再次打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (端口句柄, 打开端口 (1))
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口打开失败，请检查是否已经插上模块”, 48, )
    返回 ()
.如果真结束
赋值 (., 真)
赋值 (., 真)
返回 ()


.子程序 _打开指定VID_PID_被单击, 空白型, , 
.局部变量 UserVid, 整数型, , , 
.局部变量 UserPid, 整数型, , , 


.如果真 (大于 (端口句柄, 0))
    信息框 (“端口已经打开，请不要重复打开端口。请关闭端口后才能再次打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (UserVid, 49686) ' 易语言没有找到如何表示十六进制数，请先用计算器将十六进制数转成十进制数，比如这里十六进制的C216转成十进制就是49686
赋值 (UserPid, 769) ' 易语言没有找到如何表示十六进制数，请先用计算器将十六进制数转成十进制数，比如这里十六进制的0301转成十进制就是769
赋值 (端口句柄, 打开指定VID_PID的端口 (UserVid, UserPid)) ' 单头盒子的默认VID PID是(&HC216, &H0301);双头盒子的默认VID PID是(&HC216, &H0102)；&H是表示十六进制
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口打开失败，请检查是否已经插上模块”, 48, )
    返回 ()
.如果真结束
赋值 (., 真)
赋值 (., 真)
返回 ()


.子程序 _关闭端口_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
关闭端口 (端口句柄)
赋值 (., 假)
赋值 (., 假)
赋值 (端口句柄, -1)


.子程序 _键盘按键测试_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
延时指定时间 (1000) ' 这个只是为了调试用，实际程序根据需要来延时
 ' 单击 键盘a 两次
赋值 (按键值, #A键)
单击按键2 (端口句柄, 按键值, 2) ' 使用易语言自带的按键值
 ' Ctrl+a
按下按键2 (端口句柄, #Ctrl键) ' 使用易语言自带的按键值
按下按键 (端口句柄, #键盘a) ' 使用USB HID按键值，在本例程的常量数据表中有定义
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
 ' Delete
按下按键 (端口句柄, #键盘Delete) ' 使用USB HID按键值，在本例程的常量数据表中有定义
 ' 弹起按键 (端口句柄, #键盘Delete)' 使用USB HID按键值，在本例程的常量数据表中有定义
在最小最大值之间延时随机时间 (80, 200) ' 这个只是为了调试用，实际程序根据需要来延时
弹起所有按键 (端口句柄)

.子程序 _读取按键状态_被单击, 空白型, , 返回值 0: 弹起状态；1:按下状态；-1: 失败(端口未打开)；使用该接口，不允许手工操作键盘，否则该接口返回值有可能不正确
.局部变量 按键状态值, 整数型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
延时指定时间 (1000) ' 这个只是为了调试用，实际程序根据需要来延时
赋值 (按键状态值, 读取按键状态 (端口句柄, #键盘a))
信息框 (相加 (“按键状态=”, 数值到格式文本 (按键状态值, , 假)), 0, )


.子程序 _读取小键盘LED状态_被单击, 空白型, , 
.局部变量 状态值, 整数型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (状态值, 读取小按键LED状态 (端口句柄))
信息框 (相加 (“小键盘LED状态=”, 数值到格式文本 (状态值, , 假)), 0, )


.子程序 _键盘输入字符串测试_被单击, 空白型, , 
.局部变量 待输入的字符串, 文本型, , , 
.局部变量 待输入的字符串长度, 整数型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (800, 1200) ' 这个只是为了调试用
赋值 (待输入的字符串, .)
赋值 (待输入的字符串长度, 取文本长度 (待输入的字符串))
输入ASCII字符串 (端口句柄, 待输入的字符串, 待输入的字符串长度)
按下按键2 (端口句柄, #回车键) ' 使用易语言自带的按键值
输入ASCII字符串 (端口句柄, “0123456789”, 10)

.子程序 _单击左键两次_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
延时指定时间 (1000) ' 这个只是为了调试用，实际程序根据需要来延时
单击左键 (端口句柄, 2)
 ' 按下左键不弹起 (端口句柄)
 ' 延时指定时间 (200)
 ' 从当前位置相对移动鼠标2 (端口句柄, 200, 200)
 ' 弹起左键 (端口句柄)

.子程序 _单击右键1次_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
延时指定时间 (1000) ' 这个只是为了调试用，实际程序根据需要来延时
单击右键 (端口句柄, 1)


.子程序 _相对移动鼠标_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
从当前位置相对移动鼠标 (端口句柄, 100, -100)


.子程序 _移动鼠标到指定坐标_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
移动鼠标到指定坐标 (端口句柄, 50, 50)


.子程序 _取当前鼠标坐标_被单击, 空白型, , 
.局部变量 X位置, 空白型, , , 
.局部变量 Y位置, 空白型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
读取当前鼠标所在坐标 (端口句柄, X位置, Y位置)
信息框 (相加 (“x=”, 数值到格式文本 (X位置, , 假), “, y=”, 数值到格式文本 (Y位置, , 假)), 0, )


.子程序 _滚轮滚动测试_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
滚动滚轮 (端口句柄, 2) ' 向上滚动
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
滚动滚轮 (端口句柄, -5) ' 向下滚动


.子程序 _相对移动鼠标2_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
从当前位置相对移动鼠标2 (端口句柄, 100, -100)


.子程序 _移动鼠标到指定坐标2_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
在最小最大值之间延时随机时间 (500, 1000) ' 这个只是为了调试用，实际程序根据需要来延时
移动鼠标到指定坐标2 (端口句柄, 50, 50)


.子程序 _取当前鼠标坐标2_被单击, 空白型, , 
.局部变量 X位置, 空白型, , , 
.局部变量 Y位置, 空白型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
读取当前鼠标所在坐标2 (X位置, Y位置)
信息框 (相加 (“x=”, 数值到格式文本 (X位置, , 假), “, y=”, 数值到格式文本 (Y位置, , 假)), 0, )

.子程序 _读取序列号_被单击, 空白型, , 
.局部变量 循环变量, 空白型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
读取序列号 (端口句柄, 返回长度, 设备序列号)
赋值 (设备序列号字符串, “”)
.变量循环首 (1, 返回长度, 1, 循环变量)
    赋值 (设备序列号字符串, 相加 (设备序列号字符串, 数值到格式文本 (设备序列号 [循环变量], , 假), “ ”))
.变量循环尾 ()
数值到格式文本 (设备序列号 [1], , 假)
信息框 (相加 (“设备序列号长度=”, 数值到格式文本 (返回长度, , 假)), 0, )
信息框 (相加 (“设备序列号=”, 设备序列号字符串), 0, )


.子程序 _写用户数据_被单击, 空白型, , 
.局部变量 执行返回值, 整数型, , , 
.局部变量 用户数据, 字节型, , "256", 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (用户数据 [1], 49) ' Ascii 1
赋值 (用户数据 [2], 51) ' Ascii 3
赋值 (用户数据 [3], 53) ' Ascii 5
赋值 (用户数据 [4], 55) ' Ascii 7
赋值 (用户数据 [5], 57) ' Ascii 9
赋值 (执行返回值, 写用户数据 (端口句柄, 5, 用户数据))
.如果真 (不等于 (执行返回值, 0))
    信息框 (“写入失败”, 48, )
    返回 ()
.如果真结束


.子程序 _验证用户数据_被单击, 空白型, , 
.局部变量 执行返回值, 整数型, , , 
.局部变量 用户数据, 字节型, , "256", 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (用户数据 [1], 49) ' Ascii 1
赋值 (用户数据 [2], 51) ' Ascii 3
赋值 (用户数据 [3], 53) ' Ascii 5
赋值 (用户数据 [4], 55) ' Ascii 7
赋值 (用户数据 [5], 57) ' Ascii 9
赋值 (执行返回值, 验证用户数据 (端口句柄, 5, 用户数据))
.如果真 (不等于 (执行返回值, 0))
    信息框 (“验证失败”, 48, )
    返回 ()
.如果真结束
信息框 (“验证成功”, 48, )


.子程序 _输入被控机分辨率_被单击, 空白型, , 
.局部变量 执行返回值, 整数型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (执行返回值, 绝对坐标移动被控机分辨率 (端口句柄, 到数值 (.), 到数值 (.)))
.如果真 (等于 (执行返回值, -10))
    信息框 (“该盒子不支持绝对移动功能”, 48, , )
    返回 ()
.如果真结束
.如果真 (不等于 (执行返回值, 0))
    信息框 (“执行失败”, 48, , )
    返回 ()
.如果真结束


.子程序 _移动鼠标到指定坐标3_被单击, 空白型, , 
.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
移动鼠标到指定坐标3 (端口句柄, 到数值 (.), 到数值 (.))

.子程序 _设置新VidPid_被单击, 空白型, , 
.局部变量 执行返回值, 整数型, , , 

.如果真 (小于 (端口句柄, 0))
    信息框 (“端口还没有打开，请插上模块，打开端口”, 48, )
    返回 ()
.如果真结束
赋值 (执行返回值, 检查盒子是否是可修改盒子 (端口句柄))
.如果真 (不等于 (执行返回值, 0))
    信息框 (“盒子不是可修改的，不能设置新VidPid”, 48, , )
    返回 ()
.如果真结束
赋值 (执行返回值, 设置新VidPid (端口句柄, 49943, 1, 0, 0)) ' 49943是十六进制的0xC317; 这里修改双头的主控端VID; 被控端不修改； 如果是单头盒子，将报错
.如果真 (不等于 (执行返回值, 0))
    信息框 (“执行失败”, 48, , )
    返回 ()
.如果真结束




 ' 不属于任何一个程序集、类模块的函数：
