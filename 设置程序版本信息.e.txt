 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 448
    高度 = 520
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “设置文件版本信息”
    帮助文件名 = “”



.常量 RT_VERSION, "16", , 
.常量 版本信息, "“1 VERSIONINFO
FILEVERSION 0,1,1010,2020
PRODUCTVERSION 0,1,1010,2020
FILEOS 0x40004
FILETYPE 0x1

{
	BLOCK "StringFileInfo"
	{
		BLOCK "080404B0"
		{
			VALUE "CompanyName", "思科数据软件工作室"
			VALUE "FileDescription", "易语言程序"
			VALUE "FileVersion", "0.1.1020.3040"
			VALUE "InternalName", "案卷目录打印程序"
			VALUE "LegalCopyright", "版权所有，盗版不究"
			VALUE "OriginalFilename", "ajml.exe"
			VALUE "ProductName", "案卷目录打印程序"
			VALUE "ProductVersion", "0.1.1030.2040"
		}
	}

	BLOCK "VarFileInfo"
	{
		VALUE "Translation", 0x0804 0x04B0
	}
}

”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库




数据类型 VS_FIXEDFILEINFO, , 
    .成员 dwSignature, 整数型, , , 
    .成员 dwStrucVersion, 整数型, , , 
    .成员 dwFileVersionMS, 整数型, , , 
    .成员 dwFileVersionLS, 整数型, , , 
    .成员 dwProductVersionMS, 整数型, , , 
    .成员 dwProductVersionLS, 整数型, , , 
    .成员 dwFileFlagsMask, 整数型, , , 
    .成员 dwFileFlags, 整数型, , , 
    .成员 dwFileOS, 整数型, , , 
    .成员 dwFileType, 整数型, , , 
    .成员 dwFileSubtype, 整数型, , , 
    .成员 dwFileDateMS, 整数型, , , 
    .成员 dwFileDateLS, 整数型, , , 


.DLL命令 BeginUpdateResourceA, 整数型, "", "", , 
    .参数 pFileName, 文本型, , 
    .参数 bDeleteExistingResources, 逻辑型, , 

.DLL命令 UpdateResourceA, 逻辑型, "", "", , 
    .参数 hUpdate, 整数型, , 
    .参数 lpType, 整数型, , 
    .参数 lpName, 整数型, , 
    .参数 wLanguage, 整数型, , 
    .参数 lpData, 字节集, , 
    .参数 cbData, 整数型, , 

.DLL命令 EndUpdateResourceA, 逻辑型, "", "", , 
    .参数 hUpdate, 整数型, , 
    .参数 fDiscard, 逻辑型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 逻辑型, 传址, 

.DLL命令 StrToIntEx, 整数型, "shlwapi.dll", "StrToIntExA", , 
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 整数型, 传址, 

.DLL命令 CopyMemory_vf, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, VS_FIXEDFILEINFO, , 
    .参数 cbCopy, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
.如果真 (等于 (., “”))
    信息框 (“请先选择要设置版本信息的可执行文件！”, #信息图标, “注意”)
    返回 ()
.如果真结束
.如果真 (等于 (信息框 (“此操作将修改被选中的文件，是否继续？”, 相加 (#询问图标, #是否钮), “是否继续”), #是钮))
    更新文件版本资源 (., 生成文本版本信息 ())
    信息框 (“设置文件版本信息完毕！”, #信息图标, )
.如果真结束


.子程序 生成文本版本信息, 文本型, , 
.局部变量 版本信息, 文本型, , , 
.局部变量 hhf, 整数型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 项目编辑框, 编辑框, , , 
.局部变量 内容编辑框, 编辑框, , , 

.如果 (等于 (., 假))
    赋值 (版本信息, 相加 (“FILEVERSION ”, ., #换行符, “PRODUCTVERSION ”, ., #换行符, “FILEOS 0x4”, #换行符, “FILETYPE 0x1”, #换行符, “{”, #换行符, “BLOCK ”, #引号, “StringFileInfo”, #引号, #换行符, “{”, #换行符, “BLOCK ”))
    .如果 (.)
        赋值 (版本信息, 相加 (版本信息, #引号, “080404b0”, #引号, #换行符))
    .否则
        赋值 (版本信息, 相加 (版本信息, #引号, “040904b0”, #引号, #换行符))
    .如果结束
    赋值 (版本信息, 相加 (版本信息, “{”, #换行符, “VALUE ”, #引号, “Comments”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “CompanyName”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “FileDescription”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “FileVersion”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “InternalName”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “LegalCopyright”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “LegalTrademarks”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “OriginalFilename”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “PrivateBuild”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “ProductName”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “ProductVersion”, #引号, “, ”, #引号, ., #引号, #换行符, “VALUE ”, #引号, “SpecialBuild”, #引号, “, ”, #引号, ., #引号, #换行符))
    .变量循环首 (1, 14, 1, 索引)
        赋值 (项目编辑框, 取标记组件 (相加 (100, 索引)))
        赋值 (内容编辑框, 取标记组件 (相加 (200, 索引)))
        .如果真 (不等于 (项目编辑框., “”))
            赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, 项目编辑框., #引号, “, ”, #引号, 内容编辑框., #引号, #换行符))
        .如果真结束
        
    .变量循环尾 ()
    
.否则
    赋值 (版本信息, 相加 (“FILEVERSION ”, ., #换行符, “PRODUCTVERSION ”, ., #换行符, “FILEOS 0x4”, #换行符, “FILETYPE 0x1”, #换行符, “{”, #换行符, “BLOCK ”, #引号, “StringFileInfo”, #引号, #换行符, “{”, #换行符, “BLOCK ”))
    .如果 (.)
        赋值 (版本信息, 相加 (版本信息, #引号, “080404b0”, #引号, #换行符, “{”, #换行符))
    .否则
        赋值 (版本信息, 相加 (版本信息, #引号, “040904b0”, #引号, #换行符, “{”, #换行符))
    .如果结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “Comments”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “CompanyName”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “FileDescription”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “FileVersion”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “InternalName”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “LegalCopyright”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “LegalTrademarks”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “OriginalFilename”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “PrivateBuild”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “ProductName”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “ProductVersion”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .如果真 (不等于 (., “”))
        赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, “SpecialBuild”, #引号, “, ”, #引号, ., #引号, #换行符))
    .如果真结束
    .变量循环首 (1, 14, 1, 索引)
        赋值 (项目编辑框, 取标记组件 (相加 (100, 索引)))
        赋值 (内容编辑框, 取标记组件 (相加 (200, 索引)))
        .如果真 (并且 (不等于 (项目编辑框., “”), 不等于 (内容编辑框., “”)))
            赋值 (版本信息, 相加 (版本信息, “VALUE ”, #引号, 项目编辑框., #引号, “, ”, #引号, 内容编辑框., #引号, #换行符))
        .如果真结束
        
    .变量循环尾 ()
.如果结束
赋值 (版本信息, 相加 (版本信息, “}”, #换行符, “}”, #换行符, “BLOCK ”, #引号, “VarFileInfo”, #引号, #换行符, “{”, #换行符, “VALUE ”, #引号, “Translation”))
.如果 (.)
    赋值 (版本信息, 相加 (版本信息, #引号, “, 0x0804 0x04B0”, #换行符, “}”, #换行符, “}”))
.否则
    赋值 (版本信息, 相加 (版本信息, #引号, “, 0x0409 0x04B0”, #换行符, “}”, #换行符, “}”))
.如果结束
返回 (版本信息)


.子程序 _按钮_打开_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (., .)
.如果真结束


.子程序 更新文件版本资源, 空白型, , 
.参数 文件名, 文本型, , 
.参数 文本版本信息, 文本型, , 

.局部变量 更新句柄, 整数型, , , 
.局部变量 版本信息数据, 字节集, , , 
.局部变量 原始文件数据, 字节集, , , 
.局部变量 检查后文件数据, 字节集, , , 
.局部变量 尾部数据, 字节集, , , 

赋值 (原始文件数据, 读入文件 (文件名))

 ' 先更新一下文件，如果是独立编译的易程序，会丢失后面的数据
赋值 (更新句柄, BeginUpdateResourceA (文件名, 假))
EndUpdateResourceA (更新句柄, 假)

赋值 (版本信息数据, 从文本转换版本信息 (文本版本信息))

赋值 (检查后文件数据, 读入文件 (文件名))
.判断开始 (等于 (取字节集长度 (检查后文件数据), 取字节集长度 (原始文件数据)))
    赋值 (更新句柄, BeginUpdateResourceA (文件名, 假))
    UpdateResourceA (更新句柄, #RT_VERSION, 1, 2052, 版本信息数据, 取字节集长度 (版本信息数据))
    EndUpdateResourceA (更新句柄, 假)
    
.判断 (小于 (取字节集长度 (检查后文件数据), 取字节集长度 (原始文件数据)))
     ' 如果丢失过数据，那么把这部分数据先取出来
    赋值 (尾部数据, 取字节集右边 (原始文件数据, 相减 (取字节集长度 (原始文件数据), 取字节集长度 (检查后文件数据))))
    赋值 (更新句柄, BeginUpdateResourceA (文件名, 假))
    UpdateResourceA (更新句柄, #RT_VERSION, 1, 2052, 版本信息数据, 取字节集长度 (版本信息数据))
    EndUpdateResourceA (更新句柄, 假)
     ' 把丢失的那部分数据加回去
    写到文件 (文件名, 相加 (读入文件 (文件名), 尾部数据))
.默认
    
.判断结束


.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 标记编辑框, 编辑框, , , 
.局部变量 索引, 整数型, , , 

.变量循环首 (1, 14, 1, 索引)
    .如果真 (大于 (索引, 1))
        赋值 (标记编辑框, 取标记组件 (相加 (100, 索引)))
        事件转移 (标记编辑框, )
    .如果真结束
    赋值 (标记编辑框, 取标记组件 (相加 (200, 索引)))
    事件转移 (标记编辑框, )
.变量循环尾 ()


.子程序 _编辑框_文件版本_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (并且 (或者 (小于 (字符代码, 取代码 (“0”, )), 大于 (字符代码, 取代码 (“9”, ))), 不等于 (字符代码, 取代码 (“,”, )), 不等于 (字符代码, #退格键)))
    鸣叫 ()
    返回 (0)
.如果真结束


.子程序 _按钮2_被单击, 空白型, , 
信息框 (相加 (“    原创：凌晨孤星    ”, #换行符, “    改编：西风”), 0, “关于...”)


.子程序 _编辑框_项目名称1_获得焦点, 空白型, , 
.局部变量 事件编辑框, 编辑框, , , 

赋值 (事件编辑框, 取事件组件 ())
赋值 (事件编辑框., -1)


.程序集 程序集1, , , 

.子程序 从文本转换版本信息, 字节集, 公开, 算法不是很好，也没有更进一步的优化，望多多指教！
.参数 文本版本信息, 文本型, , 

.局部变量 行_文本, 文本型, , , 
.局部变量 行_类型, 文本型, , , 
.局部变量 文本数组, 文本型, , "0", 
.局部变量 位置1, 整数型, , , 
.局部变量 vf, VS_FIXEDFILEINFO, , , 
.局部变量 数据, 字节集, , , 
.局部变量 行_数组, 文本型, , "0", 
.局部变量 索引, 整数型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (行_数组, 分割文本 (文本版本信息, #换行符, ))
赋值 (索引, 1)

赋值 (vf.dwSignature, -17890115)
赋值 (vf.dwStrucVersion, 1)
赋值 (vf.dwFileFlagsMask, 63)
.判断循环首 (获取下一行 (行_文本, 行_数组, 索引))
    赋值 (行_类型, 获取行类型 (行_文本))
    .判断开始 (等于 (行_类型, “FILEVERSION”))
        赋值 (位置1, 寻找文本 (行_文本, “ ”, , 假))
        赋值 (文本数组, 分割文本 (My删首尾空 (取文本右边 (行_文本, 相减 (取文本长度 (行_文本), 位置1))), “,”, ))
        .如果真 (大于或等于 (取数组成员数 (文本数组), 4))
            赋值 (vf.dwFileVersionMS, 位或 (到整数 (文本数组 [2]), 左移 (到整数 (文本数组 [1]), 16)))
            赋值 (vf.dwFileVersionLS, 位或 (到整数 (文本数组 [4]), 左移 (到整数 (文本数组 [3]), 16)))
        .如果真结束
        
    .判断 (等于 (行_类型, “PRODUCTVERSION”))
        赋值 (位置1, 寻找文本 (行_文本, “ ”, , 假))
        赋值 (文本数组, 分割文本 (My删首尾空 (取文本右边 (行_文本, 相减 (取文本长度 (行_文本), 位置1))), “,”, ))
        .如果真 (大于或等于 (取数组成员数 (文本数组), 4))
            赋值 (vf.dwProductVersionMS, 位或 (到整数 (文本数组 [2]), 左移 (到整数 (文本数组 [1]), 16)))
            赋值 (vf.dwProductVersionLS, 位或 (到整数 (文本数组 [4]), 左移 (到整数 (文本数组 [3]), 16)))
        .如果真结束
        
    .判断 (等于 (行_类型, “FILEOS”))
        赋值 (位置1, 寻找文本 (行_文本, “ ”, , 假))
        赋值 (vf.dwFileOS, 十六进制到十进制 (My删首尾空 (取文本右边 (行_文本, 相减 (取文本长度 (行_文本), 位置1)))))
        
    .判断 (等于 (行_类型, “FILETYPE”))
        赋值 (位置1, 寻找文本 (行_文本, “ ”, , 假))
        赋值 (vf.dwFileType, 十六进制到十进制 (My删首尾空 (取文本右边 (行_文本, 相减 (取文本长度 (行_文本), 位置1)))))
        
    .判断 (等于 (行_类型, “{”))
        跳出循环 ()
    .默认
        
    .判断结束
    
.判断循环尾 ()

赋值 (数据, 取空白字节集 (相乘 (13, 4)))
CopyMemory_vf (数据, vf, 相乘 (13, 4))
赋值 (字节集, 相加 ({ 0, 0, 52, 0, 0, 0, 86, 0, 83, 0, 95, 0, 86, 0, 69, 0, 82, 0, 83, 0, 73, 0, 79, 0, 78, 0, 95, 0, 73, 0, 78, 0, 70, 0, 79, 0, 0, 0, 0, 0 }, 数据))
分析BLOCK (字节集, 行_数组, 索引)
赋值 (字节集, 字节集替换 (字节集, 1, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (取字节集长度 (字节集)))))
返回 (字节集)

.子程序 分析BLOCK, 空白型, , 
.参数 字节集, 字节集, , 
.参数 行文本数组, 文本型, 参考 数组, 
.参数 索引, 整数型, 参考, 

.局部变量 行_文本, 文本型, , , 
.局部变量 行_类型, 文本型, , , 
.局部变量 sizeaoffset, 整数型, , , 
.局部变量 a, 空白型, , , 


.判断循环首 (获取下一行 (行_文本, 行文本数组, 索引))
    赋值 (行_类型, 获取行类型 (行_文本))
    .判断开始 (等于 (行_类型, “BLOCK”))
        赋值 (sizeaoffset, 相加 (取字节集长度 (字节集), 1)) ' 记录该BLOCK的起始位置
        赋值 (字节集, 相加 (字节集, MAKEBLOCK (行_文本))) ' 建立BLOCK字节集，并与之前的字节集合并
        分析BLOCK (字节集, 行文本数组, 索引)
        赋值 (字节集, 字节集替换 (字节集, sizeaoffset, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (相加 (相减 (取字节集长度 (字节集), sizeaoffset), 1))))) ' 把字节集长度写回该BLOCK的起始位置
        赋值 (a, 1)
    .判断 (等于 (行_类型, “VALUE”))
        赋值 (字节集, 相加 (字节集, MAKEVALUE (行_文本))) ' 建立VALUE字节集，并与之前的字节集合并
    .判断 (等于 (行_类型, “}”))
        返回 ()
    .默认
        
    .判断结束
    
.判断循环尾 ()



.子程序 获取下一行, 逻辑型, , 
.参数 文本, 文本型, 参考, 
.参数 行文本数组, 文本型, 参考 数组, 
.参数 索引, 整数型, 参考, 

.如果真 (大于或等于 (取数组成员数 (行文本数组), 索引))
    赋值 (文本, 行文本数组 [索引])
    赋值 (索引, 相加 (索引, 1))
    返回 (真)
.如果真结束
返回 (假)


.子程序 获取行类型, 文本型, , { BLOCK VALUE }.........
.参数 行文本, 文本型, , 

赋值 (行文本, My删首尾空 (行文本))
.判断开始 (等于 (取文本左边 (行文本, 1), “{”))
    返回 (“{”)
.判断 (等于 (取文本左边 (行文本, 1), “}”))
    返回 (“}”)
.判断 (等于 (取文本左边 (行文本, 5), “BLOCK”))
    返回 (“BLOCK”)
.判断 (等于 (取文本左边 (行文本, 5), “VALUE”))
    返回 (“VALUE”)
.判断 (等于 (取文本左边 (行文本, 取文本长度 (“FILEVERSION”)), “FILEVERSION”))
    返回 (“FILEVERSION”)
.判断 (等于 (取文本左边 (行文本, 取文本长度 (“PRODUCTVERSION”)), “PRODUCTVERSION”))
    返回 (“PRODUCTVERSION”)
.判断 (等于 (取文本左边 (行文本, 取文本长度 (“FILEOS”)), “FILEOS”))
    返回 (“FILEOS”)
.判断 (等于 (取文本左边 (行文本, 取文本长度 (“FILETYPE”)), “FILETYPE”))
    返回 (“FILETYPE”)
.默认
    
.判断结束
返回 (“”)

.子程序 MAKEVALUE, 字节集, , 
.参数 VALUE, 文本型, , 

.局部变量 位置_左引号, 整数型, , , 
.局部变量 位置_右引号, 整数型, , , 
.局部变量 位置_逗号, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 数据2, 字节集, , , 
.局部变量 文本数组, 文本型, , "0", 

赋值 (位置_逗号, 寻找文本 (VALUE, “,”, , 假))
赋值 (位置_右引号, 倒找文本 (VALUE, #引号, 位置_逗号, 假))
赋值 (位置_左引号, 寻找文本 (VALUE, #引号, , 假))
.如果真 (等于 (取文本中间 (VALUE, 相加 (位置_左引号, 1), 相减 (位置_右引号, 位置_左引号, 1)), “Translation”))
     ' 第1、2字节用于占用，待分析结束后，把数据的长度数值写回第1、2字节
    赋值 (数据, 相加 ({ 0, 0, 0, 0, 1, 0 }, A2W (取文本中间 (VALUE, 相加 (位置_左引号, 1), 相减 (位置_右引号, 位置_左引号, 1)))))
    .如果真 (不等于 (求余数 (取字节集长度 (数据), 4), 0))
        赋值 (数据, 相加 (数据, 取空白字节集 (相减 (4, 求余数 (取字节集长度 (数据), 4))))) ' 4字节对齐
    .如果真结束
    
    赋值 (文本, My删首尾空 (取文本右边 (VALUE, 相减 (取文本长度 (VALUE), 位置_逗号))))
    赋值 (文本数组, 分割文本 (文本, “ ”, ))
    .如果真 (大于或等于 (取数组成员数 (文本数组), 2))
        赋值 (数据2, 相加 (到字节集 (到短整数 (十六进制到十进制 (文本数组 [1]))), 到字节集 (到短整数 (十六进制到十进制 (文本数组 [2]))))) ' 已对齐
        赋值 (数据, 字节集替换 (数据, 3, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (取字节集长度 (数据2))))) ' 把VALUE的值的长度的值写回第3、4字节
        赋值 (数据, 相加 (数据, 数据2))
        返回 (字节集替换 (数据, 1, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (取字节集长度 (数据))))) ' 把数据长度写回第1、2字节
    .如果真结束
    返回 ({  })
.如果真结束

 ' 第1、2字节用于占用，待分析结束后，把数据的长度数值写回第1、2字节
赋值 (数据, 相加 ({ 0, 0, 0, 0, 1, 0 }, A2W (取文本中间 (VALUE, 相加 (位置_左引号, 1), 相减 (位置_右引号, 位置_左引号, 1)))))
.如果真 (不等于 (求余数 (取字节集长度 (数据), 4), 0))
    赋值 (数据, 相加 (数据, 取空白字节集 (相减 (4, 求余数 (取字节集长度 (数据), 4))))) ' 4字节对齐
.如果真结束

赋值 (位置_左引号, 寻找文本 (VALUE, #引号, 位置_逗号, 假))
赋值 (位置_右引号, 倒找文本 (VALUE, #引号, , 假))
赋值 (数据2, A2W (取文本中间 (VALUE, 相加 (位置_左引号, 1), 相减 (位置_右引号, 位置_左引号, 1))))
.如果真 (不等于 (求余数 (取字节集长度 (数据2), 4), 0))
    赋值 (数据2, 相加 (数据2, 取空白字节集 (相减 (4, 求余数 (取字节集长度 (数据2), 4))))) ' 4字节对齐
.如果真结束

赋值 (数据, 字节集替换 (数据, 3, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (相除 (取字节集长度 (数据2), 2)))))
赋值 (数据, 相加 (数据, 数据2))

返回 (字节集替换 (数据, 1, 取数据类型尺寸 (#短整数型), 到字节集 (到短整数 (取字节集长度 (数据)))))


.子程序 十六进制到十进制, 整数型, , 
.参数 十六进制转换数据, 文本型, , 

.局部变量 结果, 整数型, , , 

.如果 (不等于 (取文本左边 (十六进制转换数据, 2), “0x”))
    StrToIntEx (相加 (“0x”, 十六进制转换数据), 1, 结果)
.否则
    StrToIntEx (十六进制转换数据, 1, 结果)
.如果结束
返回 (结果)

.子程序 MAKEBLOCK, 字节集, , 
.参数 BLOCK, 文本型, , 

.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 数据, 字节集, , , 

赋值 (位置1, 寻找文本 (BLOCK, #引号, , 假))
赋值 (位置2, 倒找文本 (BLOCK, #引号, , 假))
 ' 第1、2字节用于占用，待分析结束后，把数据的长度数值写回第1、2字节
赋值 (数据, 相加 ({ 0, 0, 0, 0, 1, 0 }, A2W (取文本中间 (BLOCK, 相加 (位置1, 1), 相减 (位置2, 位置1, 1)))))
.如果真 (不等于 (求余数 (取字节集长度 (数据), 4), 0))
    赋值 (数据, 相加 (数据, 取空白字节集 (相减 (4, 求余数 (取字节集长度 (数据), 4))))) ' 4字节对齐
.如果真结束
返回 (数据)


.子程序 My删首尾空, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 字节集, 字节集, , , 
.局部变量 n, 整数型, , , 
.局部变量 pos1, 整数型, , , 
.局部变量 pos2, 整数型, , , 

赋值 (字节集, 到字节集 (文本))
.变量循环首 (1, 取字节集长度 (字节集), 1, n)
    .如果真 (并且 (不等于 (字节集 [n], #空格键), 不等于 (字节集 [n], #Tab键)))
        赋值 (pos1, n)
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (取字节集长度 (字节集), 1, -1, n)
    .如果真 (并且 (不等于 (字节集 [n], #空格键), 不等于 (字节集 [n], #Tab键)))
        赋值 (pos2, n)
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
返回 (取文本中间 (文本, pos1, 相加 (相减 (pos2, pos1), 1)))


.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 

.局部变量 缓冲区, 字节集, , , 
.局部变量 缓冲区大小, 整数型, , , 

赋值 (缓冲区大小, 相乘 (MultiByteToWideChar (0, 0, 欲转换的文本, -1, {  }, 0), 2))
赋值 (缓冲区, 取空白字节集 (缓冲区大小))
MultiByteToWideChar (0, 0, 欲转换的文本, 取文本长度 (欲转换的文本), 缓冲区, 缓冲区大小)
返回 (缓冲区)


 ' 不属于任何一个程序集、类模块的函数：
