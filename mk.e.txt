 ' 文件类型：Windows模块源码

 ' 程序名称：高级模块・
 ' 程序描述：整合了一些常用的命令的模块。
@备注:
高级模块・
 ' 程序作者：雪花工作室
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：swork@139.com
QQ:530551426
 ' 版本号：1.3
 ' 创建号：1.0



.常量 INFINITE, "-1", , 
.常量 QS_ALLINPUT, "255", , 
.常量 WAIT_OBJECT_0, "0", , 
.常量 BIF_RETURNONLYFSDIRS, "1", , 
.常量 BIF_DONTGOBELOWDOMAIN, "2", , 
.常量 BIF_STATUSTEXT, "4", , 
.常量 MAX_PATH, "260", , 
.常量 BFFM_INITIALIZED, "1", , 
.常量 BFFM_SELCHANGED, "2", , 
.常量 BFFM_SETSTATUSTEXT, "0", , 
.常量 , , , 
.常量 EWX_FORCE, "4", , 
.常量 EWX_LOGOFF, "0", , 
.常量 EWX_POWEROFF, "8", , 
.常量 EWX_REBOOT, "2", , 
.常量 EWX_SHUTDOWN, "1", , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 BFFM_SETSELECTION, "0", , 
.图片 空白图标, " ' 已保存到：D:\易语言学习\Data\mk.e\空白图标", 公开, 空白的图标，大小为1326（约1.29KB）
.图片 取操作系统版本, " ' 已保存到：D:\易语言学习\Data\mk.e\取操作系统版本", , 
.图片 易程序图标, " ' 已保存到：D:\易语言学习\Data\mk.e\易程序图标", 公开, 用易语言编写出的程序的默认图标(32*32,766B)
.图片 安装图标, " ' 已保存到：D:\易语言学习\Data\mk.e\安装图标", 公开, 用作制作安装或卸载程序的图标（32*32 2238字节）
.常量 执行_隐藏窗口, "0", 公开, 隐藏窗口，活动状态给另一个窗口 
.常量 执行_最小化窗口, "6", 公开, 最小化窗口，活动状态给另一个窗口
.常量 执行_大小位置相同, "9", 公开, 用原来的大小和位置显示一个窗口，同时令其进入活动状态 
.常量 执行_当前大小位置, "5", 公开, 用当前的大小和位置显示一个窗口，同时令其进入活动状态 
.常量 执行_最大化激活, "3", 公开, 最大化窗口，并将其激活 
.常量 执行_最小化激活, "2", 公开, 最小化窗口，并将其激活 
.常量 执行_最小化不改变, "7", 公开, 最小化一个窗口，同时不改变活动窗口
.常量 执行_当前不改变, "8", 公开, 用当前的大小和位置显示一个窗口，不改变活动窗口 
.常量 执行_最近不改变, "4", 公开, 用最近的大小和位置显示一个窗口，同时不改变活动窗口
.常量 执行_正常显示, "1", 公开, 正常显示
.常量 , , , 
.常量 特定目录_我的文档, "1", 公开, 
.常量 特定目录_我的收藏夹, "2", 公开, 
.常量 特定目录_系统桌面, "3", 公开, 
.常量 特定目录_系统字体, "4", 公开, 
.常量 特定目录_开始菜单组, "5", 公开, 
.常量 特定目录_程序菜单组, "6", 公开, 
.常量 特定目录_启动菜单组, "7", 公开, 
.常量 特定目录_程序数据目录, "8", 公开, 
.常量 特定目录_Windows安装目录, "9", 公开, 
.常量 特定目录_Windows系统目录, "10", 公开, 
.常量 特定目录_临时文件目录, "11", 公开, 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库



 ' 所需要的模块
 ' VPN模块 $vpn模块.ec


数据类型 NotifyIconData, , 
    .成员 cbSize, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uFlags, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 szTip, 字节型, , "128", 
    .成员 dwState, 整数型, , , 
    .成员 dwStateMask, 整数型, , , 
    .成员 szInfo, 字节型, , "256", 
    .成员 uTimeoutAndVersion, 整数型, , , 
    .成员 szInfoTitle, 字节型, , "64", 
    .成员 dwInfoFlags, 整数型, , , 

数据类型 窗口信息, , 
    .成员 主窗口, 窗口, , , 
    .成员 句柄, 空白型, , , 
    .成员 左键菜单, 菜单, , , 
    .成员 右键菜单, 菜单, , , 
    .成员 双击托盘, 子程序指针, , , 

数据类型 LARGE_INTEGER, , 
    .成员 QuadPart, 长整数型, , , 占用8个字节

数据类型 SHQUERYRBINFO, , 
    .成员 结构大小, 整数型, , , 
    .成员 文件长度, 长整数型, , , 
    .成员 文件数, 长整数型, , , 

数据类型 BrowseInfo, , 
    .成员 hWndOwner, 整数型, , , 
    .成员 pIDLRoot, 整数型, , , 
    .成员 pszDisplayName, 整数型, , , 
    .成员 lpszTitle, 整数型, , , 
    .成员 ulFlags, 整数型, , , 
    .成员 lpfnCallback, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 SHFILEOPSTRUCT, , 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 系统时间, , 
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 Dll参数, 公开, 
    .成员 参数名, 文本型, , , 输入或修改当前Dll命令参数的名称。
    .成员 类型, 文本型, , , 所定义的数据类型应该与实际的 Dll 库命令一致，不能为复合数据类型数组、窗口、窗口组件、菜单。
    .成员 传址, 逻辑型, , , 
    .成员 数组, 逻辑型, , , 设置当前 Dll 命令参数是否为接收数组数据。
    .成员 备注, 文本型, , , 输入或修改与当前 Dll 命令参数相关的备注信息。

.全局变量 结构, NotifyIconData, , , 
.全局变量 主窗口信息, 窗口信息, , , 
.全局变量 MyMsg, 整数型, , , 
.全局变量 默认窗口, 子程序指针, , , 
.全局变量 托盘图标, 逻辑型, , , 
.全局变量 m_CurrentDirectory, 文本型, , , 

.DLL命令 SetWindowLong, 子程序指针, "user32", "SetWindowLongA", , 
    .参数 HWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 子程序指针, , 

.DLL命令 RegisterWindowMessageA, 整数型, "", "RegisterWindowMessageA", , 
    .参数 lpString, 文本型, , 

.DLL命令 LocalSize, 整数型, "", "", , 
    .参数 参数一, NotifyIconData, 传址, 

.DLL命令 lstrcpyn, 整数型, "", "lstrcpyn", 公开, 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 Shell_NotifyIconA, 整数型, "shell32.dll", "Shell_NotifyIconA", , 
    .参数 dwMessage, 整数型, , 
    .参数 lpData, NotifyIconData, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
    .参数 wMsg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, 整数型, , 具体取决于消息;

.DLL命令 SetForegroundWindow, 整数型, "user32", "SetForegroundWindow", , 将窗口设为系统的前台窗口。这个函数可用于改变用户目前正在操作的应用程序  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 带到前台的窗口;

.DLL命令 TrackPopupMenu, 整数型, "user32", "TrackPopupMenu", , 在屏幕的任意地方显示一个弹出式菜单  非零表示成功，零表示失败。会设置GetLastError
    .参数 hMenu, 整数型, , 弹出式菜单的句柄
    .参数 wFlags, 整数型, , 位置标志和鼠标追踪标志的组合，见下表;位置标志：说明;TPM_CENTERALIGN：菜单在指定位置水平居中;TPM_LEFTALIGN：菜单的左侧置于水平x坐标处;TPM_RIGHTALIGN：菜单的右侧置于水平x坐标处;TPM_LEFTBUTTON：鼠标左键标准运作方式;TPM_RIGHTBUTTON：用鼠标右键进行菜单追踪
    .参数 x, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 y, 整数型, , 同上
    .参数 nReserved, 整数型, , 未使用，设为零
    .参数 hwnd, 整数型, , 用于接收弹出式菜单命令的窗口的句柄。应该使用窗体的窗口句柄――窗体中有一个菜单能象弹出式菜单那样接收相同的命令ID集
    .参数 lprc, 整数型, 传址, Rect，用屏幕坐标定义的一个矩形，如用户在这个矩形的范围内单击，则弹出式菜单不会关闭。如单击弹出式菜单之外的任何一个地方，则会关闭菜单。可以设为NULL;

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 子程序指针, , 
    .参数 HWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 SetWindowLong_, 整数型, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 GetWindowLong_, 整数型, "user32", "GetWindowLongA", 公开, 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 SetLayeredWindowAttributes_, 整数型, "", "SetLayeredWindowAttributes", , 设置窗口透明
    .参数 hwnd, 整数型, , 
    .参数 crKey, 整数型, , 
    .参数 bAlpha, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 ShowWindow_, 整数型, "user32", "ShowWindow", 公开, 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 nCmdShow, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;SW_HIDE：隐藏窗口，活动状态给令一个窗口;SW_MINIMIZE：最小化窗口，活动状态给令一个窗口;SW_RESTORE：用原来的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOW：用当前的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOWMAXIMIZED：最大化窗口，并将其激活;SW_SHOWMINIMIZED：最小化窗口，并将其激活;SW_SHOWMINNOACTIVE：最小化一个窗口，同时不改变活动窗口;SW_SHOWNA：用当前的大小和位置显示一个窗口，不改变活动窗口;SW_SHOWNOACTIVATE：用最近的大小和位置显示一个窗口，同时不改变活动窗口;SW_SHOWNORMAL：与SW_RESTORE相同;

.DLL命令 CreateWaitableTimer_, 整数型, "", "CreateWaitableTimerA", , 
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 SetWaitableTimer_, 整数型, "", "SetWaitableTimer", , 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, LARGE_INTEGER, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 MsgWaitForMultipleObjects_, 整数型, "", "MsgWaitForMultipleObjects", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 CloseHandle_, 逻辑型, "", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 SetTimer_, 整数型, "", "SetTimer", , 
    .参数 hWnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 
    .参数 uElapse, 整数型, , 
    .参数 lpTimerFunc, 子程序指针, , 

.DLL命令 KillTimer_, 整数型, "", "KillTimer", , 
    .参数 hwnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 

.DLL命令 取操作系统目录, 整数型, "kernel32.dll", "GetWindowsDirectoryA", , 
    .参数 操作系统目录, 文本型, , 
    .参数 目录长度, 整数型, , 

.DLL命令 SHQueryRecycleBin, 整数型, "shell32.dll", "SHQueryRecycleBinA", , 
    .参数 根路径, 文本型, , 
    .参数 回收站询问信息, SHQUERYRBINFO, 传址, 

.DLL命令 GetLogicalDriveStrings, 整数型, "kernel32", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, , 

.DLL命令 LocalAlloc, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 LocalFree, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 RtlMoveMemory, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 SHEmptyRecycleBin, 空白型, "shell32.dll", "SHEmptyRecycleBinA", , 
    .参数 句柄, 整数型, , 
    .参数 pszRootPath, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 lstrcat, 整数型, "kernel32", "lstrcatA", , 
    .参数 lpString1, 文本型, , 
    .参数 lpString2, 文本型, , 

.DLL命令 SHBrowseForFolder, 整数型, "shell32", "SHBrowseForFolder", , 
    .参数 lpbi, BrowseInfo, , 

.DLL命令 系统关于窗口, 空白型, "", "ShellAboutA", 公开, 自定义系统关于窗口
    .参数 句柄, 整数型, , 指定窗口的句柄(HWND)，可以为0.
    .参数 软件名称, 文本型, , 指定软件名称。
    .参数 版权文本, 文本型, , 版权信息文本，不可太长。
    .参数 图标, 整数型, , 图标句柄，由LoadIconA函数返回。

.DLL命令 SHGetPathFromIDList, 整数型, "shell32", "SHGetPathFromIDList", , 
    .参数 pidList, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 SHFileOperation, 整数型, "Shell32.dll", "SHFileOperationA", , 
    .参数 文件参数, SHFILEOPSTRUCT, , 

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", 公开, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 文本_取长度, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 文本, 文本型, , 

.DLL命令 ShellExecuteA, 整数型, "shell32.dll", "ShellExecuteA", 公开, 
    .参数 HWND, 整数型, , //父窗口句柄
    .参数 lpOperation, 文本型, , //操作类型 （如："open"）*要加英文双引号
    .参数 lpFile, 文本型, , //要进行操作的文件或路径
    .参数 lpParameters, 文本型, , //若FileName参数是一个可执行程序，则此参数指定命令行参数，否则此参数应为nil或PChar(0)。  
    .参数 lpDirectory, 文本型, ,  //指定默认目录，通常设为NULL 
    .参数 nShowCmd, 整数型, , //文件打开的方式，以通常方式还是最大化或最小化显示,SW_HIDE

.DLL命令 CopyFile, 整数型, "kernel32", "CopyFileA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 bFailIfExists, 整数型, , 

.DLL命令 MoveFileEx, 逻辑型, "kernel32", "MoveFileExA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 DeleteFile, 整数型, "kernel32", "DeleteFileA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 GetTempPath, 整数型, "kernel32", "GetTempPathA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetTempFileName, 整数型, "kernel32", "GetTempFileNameA", , 
    .参数 lpszPath, 文本型, , 
    .参数 lpPrefixString, 整数型, , 
    .参数 wUnique, 整数型, , 
    .参数 lpTempFileName, 文本型, , 

.DLL命令 SHFileExists, 逻辑型, "shell32", "#45", , 
    .参数 szPath, 文本型, , 

.DLL命令 lopen, 整数型, "kernel32", "_lopen", , 
    .参数 lpPathName, 文本型, , 
    .参数 iReadWrite, 整数型, , 

.DLL命令 GetFileSize, 整数型, "kernel32", "GetFileSize", , 
    .参数 hFile, 整数型, , 
    .参数 lpFileSizeHigh, 整数型, , 

.DLL命令 CloseHandle, 整数型, "kernel32", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 lread, 整数型, "kernel32", "_lread", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 wBytes, 整数型, , 

.DLL命令 lcreat, 整数型, "kernel32", "_lcreat", , 
    .参数 lpPathName, 文本型, , 
    .参数 iAttribute, 整数型, , 

.DLL命令 lwrite, 整数型, "kernel32", "_lwrite", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 wBytes, 整数型, , 

.DLL命令 GetFileAttributes, 整数型, "kernel32", "GetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 SetFileAttributes, 逻辑型, "kernel32", "SetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 
    .参数 dwFileAttributes, 整数型, , 

.DLL命令 LocalFileTimeToFileTime, 整数型, "kernel32", "LocalFileTimeToFileTime", , 
    .参数 lpLocalFileTime, FILETIME, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 SetFileTime, 逻辑型, "kernel32", "SetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 GetFileTime, 整数型, "kernel32", "GetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32", "FileTimeToLocalFileTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpLocalFileTime, FILETIME, 传址, 

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", , 
    .参数 double, 日期时间型, , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 

.DLL命令 SystemTimeToFileTime, 整数型, "kernel32", "SystemTimeToFileTime", , 
    .参数 lpSystemTime, 系统时间, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 SystemTimeToVariantTime, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 
    .参数 double, 日期时间型, 传址, 

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32", "FileTimeToSystemTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpSystemTime, 系统时间, 传址, 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Length, 整数型, , 
    .参数 Fill, 字节型, , 

.DLL命令 StrToInt64Ex, 整数型, "shlwapi.dll", "StrToInt64ExA", , 
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 整数型, 传址, 

.DLL命令 ExitWindowsEx, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 dwReserved, 整数型, , 

.程序集 程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
.局部变量 t, 整数型, , , 

.如果 (文件是否存在 (“C:\smkec.txt”))
    赋值 (t, 到整数 (到文本 (读入文件 (“C:\smkec.txt”))))
.否则
    
    
.如果结束
赋值 (t, 相加 (t, 1))

输出调试文本 (“------------------------------------------------”)
输出调试文本 (“提示：该程序中使用了【易语言高级模块】1.3”)
输出调试文本 (相加 (“此模块在该计算机上已经运行了”, 到文本 (t), “次”))
输出调试文本 (“雪花网络工作室出品 swork@139.com”)
写到文件 (“C:\smkec.txt”, 到字节集 (到文本 (t)))
输出调试文本 (“------------------------------------------------”)



_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 测试模块功能
.局部变量 a, 文本型, , , 
.局部变量 b, 文本型, , "0", 
.局部变量 c, Dll参数, , "4", 
.局部变量 i, 整数型, , , 

输出调试文本 (“---------*高级模块测试文本*--------”)
输出调试文本 (“”)
赋值 (a, 取临时文件名 ())
写到文件 (a, { 100 })

输出调试文本 (相加 (“测试删除文件到回收站：”, 到文本 (回收站_删除到回收站 (a, 位或 (16, 1024)))))

输出调试文本 (相加 (“测试加密文本：”, 文本_加密文本 (“易语言”)))
输出调试文本 (易语言_取易安装路径 ())
输出调试文本 (“”)
易语言_枚举模块 (b)
.计次循环首 (取数组成员数 (b), i)
    输出调试文本 (b [i])
.计次循环尾 ()
输出调试文本 (“”)
输出调试文本 (验证码生成_英文验证码 (5, , 假))
输出调试文本 (“”)
输出调试文本 (验证码生成_数字验证码 (5))
输出调试文本 (“”)
输出调试文本 (目录_取特定目录 (#特定目录_我的文档))
输出调试文本 (目录_取特定目录 (#特定目录_系统桌面))
输出调试文本 (目录_取特定目录 (#特定目录_程序数据目录))
输出调试文本 (“”)
赋值 (c [1].类型, “整数型”)
赋值 (c [1].参数名, “hwnd”)
赋值 (c [1].备注, “要接收消息的那个窗口的句柄”)
赋值 (c [2].类型, “整数型”)
赋值 (c [2].参数名, “wMsg”)
赋值 (c [2].备注, “消息的标识符”)
赋值 (c [3].类型, “整数型”)
赋值 (c [3].参数名, “wParam”)
赋值 (c [3].备注, “具体取决于消息;”)
赋值 (c [4].类型, “整数型”)
赋值 (c [4].参数名, “lParam”)
赋值 (c [4].备注, “具体取决于消息;”)

输出调试文本 (易语言_生成DLL命令代码 (“SendMessage”, “整数型”, 真, , “user32”, “SendMessageA”, c))
输出调试文本 (“”)
输出调试文本 (易语言_生成局部变量代码 (“test”, “整数型”, 真, 1, “test”))
输出调试文本 (“----*此处应该为假否则是模块出错--*--”)
输出调试文本 (文本_是否是纯数字 (“546516356448468787987986688456135s”))
输出调试文本 (“”)
输出调试文本 (“----*此处应该为真否则是模块出错*----”)
输出调试文本 (并且 (文本_是否是纯数字 (“546578952136554665465446587675521”), 回收站_是否有文件 ()))
输出调试文本 (“----------------------------------”)


 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

.子程序 托盘_置托盘图标, 空白型, , 设置本程序在系统托盘中的图标。比核心库的功能更强大。
.参数 主窗口, 窗口, , 欲置托盘图标的主窗口。
.参数 左键菜单, 菜单, 可空, 单击鼠标左键时弹出的菜单。
.参数 右键菜单, 菜单, 可空, 单击鼠标右键时弹出的菜单。
.参数 提示文本, 文本型, 可空, 鼠标移动到托盘图标上显示的提示文本。
.参数 是否显示气泡, 逻辑型, 可空, 是否显示气泡信息。
.参数 气泡内容, 文本型, 可空, 气泡提示内容。
.参数 气泡图标, 整数型, 可空, 气泡图标。
.参数 气泡标题, 文本型, 可空, 气泡提示标题。
.参数 双击托盘事件, 子程序指针, 可空, 双击托盘图标时执行的子程序，该事件应该没有参数且没有返回值。

赋值 (主窗口信息.主窗口, 主窗口)
赋值 (主窗口信息.句柄, 主窗口.取窗口句柄 ())
赋值 (主窗口信息.左键菜单, 左键菜单)
赋值 (主窗口信息.右键菜单, 右键菜单)
赋值 (主窗口信息.双击托盘, 双击托盘事件)
赋值 (默认窗口, SetWindowLong (主窗口信息.句柄, -4, &托盘事件处理))
赋值 (MyMsg, RegisterWindowMessageA (“eMenu”))
赋值 (结构.cbSize, LocalSize (结构))
赋值 (结构.hwnd, 主窗口信息.句柄)
赋值 (结构.hIcon, SendMessage (主窗口信息.句柄, 127, 0, 0))
赋值 (结构.uID, 1)
赋值 (结构.uFlags, 位或 (4, 2, 1))
赋值 (结构.uCallbackMessage, 2000) ' 2000为自定义消息，你可以用1024+1或以上、65565以下的任何值

lstrcpyn (结构.szTip, 提示文本, 相加 (取文本长度 (提示文本), 1)) ' 把文本写入字符数组
Shell_NotifyIconA (0, 结构)
.如果真 (等于 (是否显示气泡, 真))
    赋值 (结构.uFlags, 气泡图标) ' 气泡提示
    lstrcpyn (结构.szInfo, 气泡内容, 相加 (取文本长度 (气泡内容), 1))
    lstrcpyn (结构.szInfoTitle, 气泡标题, 相加 (取文本长度 (气泡标题), 1))
    赋值 (结构.dwInfoFlags, 1) ' 信息图标
    Shell_NotifyIconA (1, 结构)
.如果真结束

赋值 (托盘图标, 真)


.子程序 系统_执行, 逻辑型, , 使用Windows的用户界面系统执行指定命令。本命令为初级命令。多一个显示方式参数。
.参数 句柄, 整数型, 可空, 
.参数 欲操作文件名, 文本型, , 本参数提供欲操作文件或文件夹的名称。
.参数 命令类型, 空白型, 可空, 0.打开文档 1.打印 2.浏览文件夹
.参数 命令行, 文本型, 可空, 如果欲进行操作的类型为“打开文件”且被打开文件为可执行文件，本参数提供启动该可执行文件时欲附加的命令行文本，其它情况下本参数将被忽略。如果本参数被省略，默认为空文本。
.参数 默认当前目录, 文本型, 可空, 本参数提供命令执行时的默认当前目录，如果被省略，默认为空文本。
.参数 如何显示, 空白型, 可空, 定义了如何显示启动程序的常数值。参考以“#执行_”开头的常量，留空时，默认为“#执行_正常显示”

返回 (不等于 (ShellExecuteA (句柄, 多项选择 (相加 (命令类型, 1), “open”, “print”, “explore”), 欲操作文件名, 命令行, 默认当前目录, 选择 (是否为空 (如何显示), #执行_正常显示, 如何显示)), 0))


.子程序 托盘_删除托盘图标, 空白型, , 删除本模块设置在系统托盘中的图标。
.如果真 (等于 (托盘图标, 真))
    Shell_NotifyIconA (2, 结构) ' 删除图标
    SetWindowLong (主窗口信息.句柄, -4, 默认窗口)
.如果真结束


.子程序 系统_取操作系统版本, 整数型, , 返回值：0～8代表：0=未知， 1=Windows95， 2=Windows98， 3=WindowsME， 4=WindowsNT， 5=Windows2000， 6=WindowsXP， 7=Windows2003， 8=Vista
置入代码 (#取操作系统版本)
返回 (0)

.子程序 窗口_窗口渐显, 空白型, , 使窗口逐渐显示出来。（放在创建完毕事件中）
.参数 参_窗口句柄, 整数型, , 
.参数 参_速度, 整数型, , 1~255,数值越大速度越快

.局部变量 i, 整数型, , , 

SetWindowLong_ (参_窗口句柄, -20, 位或 (GetWindowLong_ (参_窗口句柄, -20), 524288))
SetLayeredWindowAttributes_ (参_窗口句柄, 0, 0, 2) ' 先将窗口透明为0
ShowWindow_ (参_窗口句柄, 9) ' 显示出窗口,以免闪烁
.变量循环首 (1, 255, 参_速度, i)
    SetLayeredWindowAttributes_ (参_窗口句柄, 0, i, 2)
.变量循环尾 ()

.子程序 窗口_窗口渐消, 空白型, , 使窗口逐渐消除。（放在可否被关闭事件中）
.参数 参_窗口句柄, 整数型, , 
.参数 参_速度, 整数型, , 1~255,数值越大速度越快

.局部变量 i, 整数型, , , 

.计次循环首 (255, i)
    SetLayeredWindowAttributes_ (参_窗口句柄, 0, 相减 (255, i), 2)
.计次循环尾 ()

.子程序 文本_加密文本, 文本型, , 加密一段文本
.参数 要加密的文本, 文本型, , 

.局部变量 临时, 字节集, , , 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 文本型, , , 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (临时, 到字节集 (要加密的文本))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)))))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)), j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取字节集长度 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    赋值 (aaa, 十进制到十六进制 (位异或 (临时 [x], y)))
    赋值 (outstr, 相加 (outstr, 选择 (大于 (取文本长度 (aaa), 1), “”, “0”), aaa))
.计次循环尾 ()
返回 (outstr)

.子程序 文本_解密文本, 文本型, , 解密一段文本
.参数 要解密的文本, 文本型, , 

.局部变量 临时, 字节型, , "0", 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 字节型, , "0", 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 计次, 整数型, , , 


.变量循环首 (1, 取文本长度 (要解密的文本), 2, 计次)
    加入成员 (临时, 到字节 (十六进制到十进制 (取文本中间 (要解密的文本, 计次, 2))))
.变量循环尾 ()

.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)))))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)), j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取数组成员数 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    加入成员 (outstr, 位异或 (临时 [x], y))
.计次循环尾 ()
返回 (到文本 (outstr))

.子程序 文本_是否是纯数字, 逻辑型, , 判断一段文本是否是纯数字，处理时间根据文本确定。输入空文本会返回假。
.参数 文本, 文本型, , 理论上文本可以无限长，处理时间由文本长度和字母在文本中的位置决定。

.局部变量 循环次数, 整数型, , , 
.局部变量 文本部分, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 a, 逻辑型, , , 

.如果真 (等于 (文本, “”))
    返回 (假)
.如果真结束

.计次循环首 (取文本长度 (文本), 循环次数)
    赋值 (文本部分, 取文本中间 (文本, 循环次数, 1))
    .计次循环首 (10, i)
        .如果 (等于 (文本部分, 到文本 (i)))
            赋值 (a, 真)
            跳出循环 ()
        .否则
            赋值 (a, 假)
        .如果结束
        
        
    .计次循环尾 ()
    .如果真 (等于 (a, 假))
        跳出循环 ()
    .如果真结束
    
    
.计次循环尾 ()
返回 (a)

.子程序 系统_高精度等待, 空白型, , 集“等待()、延时()”优点于一身的命令，去除了“等待()”命令占用100%CPU资源和“延时()”卡死程序的缺点，并把精度提高了1000倍，精度达到微秒级。
.参数 时间, 整数型, , 单位为毫秒。

.局部变量 hTimer, 整数型, , , 
.局部变量 int64, LARGE_INTEGER, , , 

赋值 (int64.QuadPart, 相乘 (-10, 时间, 1000)) ' 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒
赋值 (hTimer, CreateWaitableTimer_ (0, 假, 0))
SetWaitableTimer_ (hTimer, int64, 0, 0, 0, 假)
.判断循环首 (不等于 (MsgWaitForMultipleObjects_ (1, hTimer, 假, #INFINITE, #QS_ALLINPUT), #WAIT_OBJECT_0))
    处理事件 ()
.判断循环尾 ()
CloseHandle_ (hTimer)

.子程序 系统_设置自动运行, 逻辑型, , 在注册表中设置自动运行某程序，不为调试模式时生效。成功返回真，否则返回假。
.参数 注册项名称, 文本型, , 注册表项的名称
.参数 运行命令行, 文本型, 可空, 欲运行的命令行，默认为本程序。

.如果真 (或者 (是否为调试版 (), 等于 (注册项名称, “”)))
    返回 (假)
.如果真结束

.如果 (是否为空 (运行命令行))
    返回 (写注册项 (#本地机器, 相加 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Run\”, 注册项名称), 相加 (取运行目录 (), “\”, 取执行文件名 ())))
.否则
    返回 (写注册项 (#本地机器, 相加 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Run\”, 注册项名称), 运行命令行))
.如果结束





.子程序 时钟_创建时钟, 整数型, , 创建一个时钟组件（可减少窗口上组件数目），使用与系统时钟相同，成功返回时钟ID，失败返回0。
.参数 时钟标示ID, 整数型, , 时钟标示ID，一个ID表示一个时钟，如果初始已经创建了一个时钟，然后创建一个相同ID的时钟，那么后创建的时钟会将先创建的时钟覆盖。
.参数 窗口句柄, 整数型, , 窗口的句柄(HWND).由“取窗口句柄”方法返回。
.参数 时钟周期, 整数型, , 指定时钟事件产生的周期，单位为毫秒。如果设定为0，则无时钟事件产生。
.参数 周期事件, 子程序指针, , 每当经过了指定的时钟周期，将产生此事件。该事件应该无任何参数、返回值。

返回 (SetTimer_ (窗口句柄, 时钟标示ID, 时钟周期, 周期事件))

.子程序 时钟_销毁时钟, 逻辑型, , 销毁已经由“时钟_创建时钟”创建的时钟组件。成功返回真，失败返回假。
.参数 时钟ID, 整数型, , 时钟的ID。
.参数 窗口句柄, 整数型, , 窗口的句柄(HWND)。由“取窗口句柄”方法返回。

返回 (不等于 (KillTimer_ (窗口句柄, 时钟ID), 0))

.子程序 配置_读加密配置项, 文本型, , 读取加密文件配置项。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 默认文本, 文本型, 可空, 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
.如果真 (是否为空 (默认文本))
    赋值 (默认文本, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (默认文本)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        赋值 (取出内容, 分割文本 (读取内容, “=”, ))
        .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
            .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                关闭文件 (文件号)
                .如果真 (等于 (删首尾空 (取文本右边 (读取内容, 相减 (取文本长度 (读取内容), 寻找文本 (读取内容, “=”, , 假)))), “”))
                    返回 (默认文本)
                .如果真结束
                返回 (取文本右边 (读取内容, 相减 (取文本长度 (读取内容), 寻找文本 (读取内容, “=”, , 假))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (默认文本)

.子程序 配置_写加密配置项, 逻辑型, , 写加密文件配置项。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 欲写入值, 文本型, , 不允许写入空值。

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 
.局部变量 项存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
.如果真 (或者 (等于 (删首尾空 (配置文件名), “”), 等于 (删首尾空 (配置节名), “”), 等于 (删首尾空 (配置项名), “”), 等于 (删首尾空 (欲写入值), “”)))
    返回 (假)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
赋值 (项存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.如果 (节存在)
    赋值 (上次位置, 取读写位置 (文件号))
    .判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
        赋值 (上次位置, 取读写位置 (文件号))
        赋值 (读取内容, 读入一行 (文件号))
        .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
            跳出循环 ()
        .如果真结束
        .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
            赋值 (取出内容, 分割文本 (读取内容, “=”, ))
            .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
                .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                    赋值 (项存在, 真)
                    移动读写位置 (文件号, , 上次位置)
                    删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
                    移动读写位置 (文件号, , 上次位置)
                    插入文本行 (文件号, 相加 (取出内容 [1], “=”, 欲写入值))
                    关闭文件 (文件号)
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (等于 (项存在, 假))
        移动读写位置 (文件号, , 上次位置)
        插入文本行 (文件号, 相加 (配置项名, “=”, 欲写入值))
        关闭文件 (文件号)
        返回 (真)
    .如果真结束
    
.否则
    移到文件尾 (文件号)
    插入文本行 (文件号, 相加 (“[”, 配置节名, “]”))
    插入文本行 (文件号, 相加 (配置项名, “=”, 欲写入值))
    关闭文件 (文件号)
    返回 (真)
.如果结束
关闭文件 (文件号)
返回 (假)

.子程序 配置_取加密配置节名, 逻辑型, , 读取加密文件配置节名。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名称数组, 文本型, 数组, 保存取出的配置文件节名称数组

.局部变量 操作系统目录, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 读取内容, 文本型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
清除数组 (配置节名称数组)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        赋值 (读取内容, 子文本替换 (读取内容, “[”, “”, , , 真))
        赋值 (读取内容, 子文本替换 (读取内容, “]”, “”, , , 真))
        加入成员 (配置节名称数组, 删首尾空 (读取内容))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_取加密配置项名, 逻辑型, , 读取加密文件配置项名。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 欲取出项目数组的小节名称
.参数 配置项名称数组, 文本型, 数组, 保存取出的配置项名称数组

.局部变量 操作系统目录, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 读取内容, 文本型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
清除数组 (配置项名称数组)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        加入成员 (配置项名称数组, 删首尾空 (取文本左边 (读取内容, 相减 (寻找文本 (读取内容, “=”, , 假), 1))))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_删除加密配置小节, 逻辑型, , 删除加密文件配置小节。
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        移动读写位置 (文件号, , 上次位置)
        删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
        移动读写位置 (文件号, , 上次位置)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.如果真 (等于 (节存在, 假))
    关闭文件 (文件号)
    返回 (节存在)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    移动读写位置 (文件号, , 上次位置)
    删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
    移动读写位置 (文件号, , 上次位置)
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_删除加密配置项目, 逻辑型, , 删除加密文件配置项目。
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 
.局部变量 项存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
赋值 (项存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.如果真 (等于 (节存在, 假))
    关闭文件 (文件号)
    返回 (假)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        赋值 (取出内容, 分割文本 (读取内容, “=”, ))
        .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
            .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                赋值 (项存在, 真)
                移动读写位置 (文件号, , 上次位置)
                删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
                移动读写位置 (文件号, , 上次位置)
                关闭文件 (文件号)
                返回 (真)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()
.如果真 (等于 (项存在, 假))
    关闭文件 (文件号)
    返回 (假)
.如果真结束
关闭文件 (文件号)
返回 (真)

.子程序 配置_置配置文件密码, 逻辑型, , 置加密配置文件密码。
.参数 配置文件名, 文本型, , 
.参数 原文件密码, 文本型, 可空, 如果原来无密码，则设为“”或保留为空。
.参数 新文件密码, 文本型, 可空, 如果欲取消密码，则设为“”或保留为空。如果新密码等于原密码，将不做任何操作，直接返回真。

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 字节集, , , 
.局部变量 文件号, 整数型, , , 

.如果真 (是否为空 (原文件密码))
    赋值 (原文件密码, “”)
.如果真结束
.如果真 (是否为空 (新文件密码))
    赋值 (新文件密码, “”)
.如果真结束
.如果真 (等于 (原文件密码, 新文件密码))
    返回 (真)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
复制文件 (配置文件名, 相加 (配置文件名, “.bak”))
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 原文件密码, ))
.如果真 (等于 (文件号, 0))
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
赋值 (读取内容, 读入字节集 (文件号, 取文件长度 (文件号)))
关闭文件 (文件号)
赋值 (文件号, 打开加密文件 (配置文件名, #重写, , 新文件密码, ))
.如果真 (等于 (文件号, 0))
    复制文件 (相加 (配置文件名, “.bak”), 配置文件名)
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
.如果真 (等于 (写出字节集 (文件号, 读取内容), 假))
    关闭文件 (文件号)
    复制文件 (相加 (配置文件名, “.bak”), 配置文件名)
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
关闭文件 (文件号)
赋值 (读取内容, {  })
删除文件 (相加 (配置文件名, “.bak”))
返回 (真)

.子程序 回收站_是否有文件, 逻辑型, , 判断回收站内是否有文件，是则返回真，否则返回假。参考了“斩月”的源码。
.参数 回收站位置, 文本型, 参考 可空 数组, 可提供变量接收存在文件的回收站的位置，例如如果C盘的回收站有文件则返回“C:\RECYCLER\”，数组每一个成员为一个位置。该数组会被清空。

.局部变量 DiskLabel, 文本型, , "0", 
.局部变量 times, 整数型, , , 
.局部变量 conformation, SHQUERYRBINFO, , , 

.如果真 (等于 (是否为空 (回收站位置), 假))
    清除数组 (回收站位置)
.如果真结束
GetDiskLists (DiskLabel)
赋值 (conformation.结构大小, 20)
.计次循环首 (取数组成员数 (DiskLabel), times)
    SHQueryRecycleBin (相加 (DiskLabel [times], “RECYCLER\”), conformation)
    .如果真 (大于 (conformation.文件数, 0))
        .如果真 (是否为空 (回收站位置))
            返回 (真)
        .如果真结束
        加入成员 (回收站位置, 相加 (DiskLabel [times], “RECYCLER\”))
    .如果真结束
    
.计次循环尾 ()

返回 (不等于 (取数组成员数 (回收站位置), 0))

.子程序 目录_浏览文件夹, 文本型, , 打开一个对话框，浏览系统中存在的所有文件夹，返回被选定文件夹的路径名，如果未选中任何文件夹，则返回空文本。
.参数 句柄, 空白型, , 窗口的句柄（HWND），由“取窗口句柄”方法返回。
.参数 标题, 文本型, , 本参数提供显示在对话框上部的标题文本。

返回 (GetTheFolder (句柄, 标题, “”))

.子程序 回收站_清空回收站, 空白型, , 
.参数 选项, 整数型, 可空, 0.既询问删除，也播放提示音乐；1.不询问删除；4.不播放提示音乐；5.既不询问删除，也不播放提示音乐。默认为5。
.参数 根目录, 文本型, 可空, 比如要清空D盘下的回收站就提供参数：“D:\”，如果被省略，默认为空文本，即清空所有回收站。

SHEmptyRecycleBin (0, 根目录, 选择 (是否为空 (选项), 5, 选项))

.子程序 回收站_删除到回收站, 逻辑型, , 可将文件或目录删除至回收站。参考了“美女勿进”的代码。成功返回真，失败返回假。
.参数 文件或目录名, 文本型, , 
.参数 删除选项, 整数型, 可空, 0.#无任何显示；4.#不显示进度；16.#不询问删除；1024.#不提示错误。如果被省略，默认值为0。如果要选择两项，就用“位或”将两个选项连接，例如：既不询问删除，也不提示错误则就提供参数：位或(16,1024)。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (文本_到字节集 (文件或目录名), { 0, 0 }))
.如果 (等于 (删除选项, 0))
    赋值 (类型.fFlags, 1108) ' 位或 (64, 4, 1024, 16)
.否则
    赋值 (类型.fFlags, 位或 (64, 删除选项))
.如果结束
返回 (等于 (SHFileOperation (类型), 0))

.子程序 目录_进度移动, 逻辑型, , 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (文本_到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (文本_到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperation (类型), 0))

.子程序 目录_进度复制, 逻辑型, , 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (文本_到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (文本_到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperation (类型), 0))

.子程序 目录_进度删除, 逻辑型, , 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (文本_到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperation (类型), 0))

.子程序 文件_移动文件, 逻辑型, , 
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (不等于 (MoveFileEx (被移动的文件, 移动到的位置, 2), 0))

.子程序 文件_复制文件, 逻辑型, , 
.参数 被复制的文件名, 文本型, , 
.参数 复制到的文件名, 文本型, , 

返回 (不等于 (CopyFile (被复制的文件名, 复制到的文件名, 0), 0))

.子程序 文件_删除文件, 逻辑型, , 
.参数 欲删除的文件, 文本型, 可空, 

返回 (不等于 (DeleteFile (欲删除的文件), 0))

.子程序 文件_取临时文件名, 文本型, , 
.参数 指定目录, 文本型, 可空, 留空为默认为系统临时目录。

.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件名, 文本型, , , 

.如果 (是否为空 (指定目录))
    赋值 (长度, GetTempPath (长度, 路径))
    赋值 (路径, 文本_取空白 (300))
    GetTempPath (长度, 路径)
    赋值 (文件名, 文本_取空白 (300))
    GetTempFileName (路径, 0, 0, 文件名)
    DeleteFile (文件名)
.否则
    赋值 (文件名, 文本_取空白 (300))
    GetTempFileName (指定目录, 0, 0, 文件名)
    DeleteFile (文件名)
.如果结束
返回 (文件名)

.子程序 文件_文件更名, 逻辑型, , 
.参数 欲更名的原文件或目录名, 文本型, , 
.参数 欲更改为的现文件或目录名, 文本型, , 

返回 (MoveFileEx (欲更名的原文件或目录名, 欲更改为的现文件或目录名, 0))

.子程序 文件_文件是否存在, 逻辑型, , 
.参数 欲测试的文件名称, 文本型, , 

返回 (SHFileExists (欲测试的文件名称))

.子程序 文件_取文件尺寸, 整数型, , 失败返回-1。
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 句柄, 整数型, , , 

赋值 (句柄, lopen (文件名, 0))
.如果真 (等于 (句柄, -1))
    返回 (-1)
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
CloseHandle (句柄)
返回 (选择 (等于 (大小, 429496729), -1, 大小))

.子程序 文件_读入文件, 字节集, , 
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 句柄, 整数型, , , 

赋值 (句柄, lopen (文件名, 0))
.如果真 (等于 (句柄, -1))
    返回 ({  })
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
.如果真 (等于 (大小, 4294967295))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (字节集, 字节集_取空白 (大小))
lread (句柄, 字节集, 大小)
CloseHandle (句柄)
返回 (字节集)

.子程序 文件_写到文件, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 欲写入数据, 字节集, , 

.局部变量 句柄, 整数型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (句柄, lcreat (文件名, 0))
.如果真 (等于 (句柄, -1))
    返回 (假)
.如果真结束
赋值 (返回值, lwrite (句柄, 欲写入数据, 字节集_取长度 (欲写入数据)))
CloseHandle (句柄)
返回 (不等于 (返回值, -1))

.子程序 文件_取文件属性, 整数型, , 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件名或目录名, 文本型, , 

返回 (GetFileAttributes (文件名或目录名))

.子程序 文件_置文件属性, 逻辑型, , 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件或目录名, 文本型, , 
.参数 欲设置为的属性值, 整数型, , 

返回 (SetFileAttributes (文件或目录名, 欲设置为的属性值))

.子程序 文件_置文件时间, 逻辑型, , 成功返回真，失败返回假。
.参数 文件名, 文本型, , 
.参数 新的创建时间, 日期时间型, 可空, 至少选择一项修改。
.参数 新的修改时间, 日期时间型, 可空, 
.参数 新的上次访问时间, 日期时间型, 可空, 

.局部变量 返回值, 逻辑型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 FileTime, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

.如果真 (并且 (是否为空 (新的创建时间), 是否为空 (新的修改时间), 是否为空 (新的上次访问时间)))
    返回 (假)
.如果真结束
赋值 (句柄, lopen (文件名, 2))
.如果真 (等于 (句柄, -1))
    返回 (假)
.如果真结束
赋值 (FileTime [1], VariantTimeToFileTime (新的创建时间))
赋值 (FileTime [2], VariantTimeToFileTime (新的上次访问时间))
赋值 (FileTime [3], VariantTimeToFileTime (新的修改时间))
.计次循环首 (3, 计次)
    LocalFileTimeToFileTime (FileTime [计次], FileTime [计次])
.计次循环尾 ()
赋值 (返回值, SetFileTime (句柄, FileTime [1], FileTime [2], FileTime [3]))
CloseHandle (句柄)
返回 (返回值)

.子程序 文件_取文件时间, 日期时间型, , 返回文件上一次修改的时间。
.参数 文件名, 文本型, , 
.参数 文件的创建时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。
.参数 文件上次访问时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。（FAT文件系统不支持这一特性）

.局部变量 句柄, 整数型, , , 
.局部变量 时间, 日期时间型, , "3", 
.局部变量 FILETIME, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

连续赋值 (其他_文本到时间 (“”), 时间 [3], 文件的创建时间, 文件上次访问时间)
赋值 (句柄, lopen (文件名, 0))
.如果真 (不等于 (句柄, -1))
    GetFileTime (句柄, FILETIME [1], FILETIME [2], FILETIME [3])
    CloseHandle (句柄)
    .计次循环首 (3, 计次)
        FileTimeToLocalFileTime (FILETIME [计次], FILETIME [计次])
        赋值 (时间 [计次], FileTimeToVariantTime (FILETIME [计次]))
    .计次循环尾 ()
    赋值 (文件的创建时间, 时间 [1])
    赋值 (文件上次访问时间, 时间 [2])
.如果真结束
返回 (时间 [3])

.子程序 其他_时间到文本, 文本型, , 将指定时间转换为文本并返回。参考了“888888”的源码。推荐使用他斩月日期模块进行其他日期操作。
.参数 欲转换到文本的时间, 日期时间型, , .

.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (欲转换到文本的时间, 系统时间)
返回 (相加 (整数_到文本 (系统时间.年), “年”, 整数_到文本 (系统时间.月), “月”, 整数_到文本 (系统时间.日), “日”, 整数_到文本 (系统时间.时), “时”, 整数_到文本 (系统时间.分), “分”, 整数_到文本 (系统时间.秒), “秒”))

.子程序 其他_文本到时间, 日期时间型, , 将指定文本转换到时间日期型，如果格式不符合将出错，将返回100年1月1日。
.参数 文本, 文本型, , 目前只支持“1973年11月15日12时30分25秒”此种格式的文本。年月日后的时间部分可以省略，★请在调用本子程序前!!一定要!!确认文本符合格式，否则会发生未知的错误★。

.局部变量 位置, 整数型, , , 
.局部变量 时间, 日期时间型, , , 
.局部变量 系统时间, 系统时间, , , 

赋值 (系统时间.年, 100)
连续赋值 (1, 系统时间.月, 系统时间.日)
SystemTimeToVariantTime (系统时间, 时间)
.如果真 (不等于 (文本_寻找 (文本, “年”, , ), -1))
    赋值 (系统时间.年, 文本_到整数 (文本_取左边 (文本, 相减 (文本_寻找 (文本, “年”, , ), 1))))
    赋值 (位置, 文本_寻找 (文本, “月”, , ))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.月, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “年”, , ), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (位置, 文本_寻找 (文本, “日”, , ))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.日, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “月”, , ), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (文本, 文本_取右边 (文本, 相减 (文本_取长度 (文本), 位置, 1)))
    赋值 (位置, 文本_寻找 (文本, “时”, , ))
    .如果真 (不等于 (位置, -1))
        赋值 (系统时间.时, 文本_到整数 (文本_取左边 (文本, 相减 (位置, 1))))
        赋值 (位置, 文本_寻找 (文本, “分”, , ))
        .如果真 (不等于 (位置, -1))
            赋值 (系统时间.分, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “时”, , ), 2), 相减 (位置, 1))))
            赋值 (位置, 文本_寻找 (文本, “秒”, , ))
            .如果真 (不等于 (位置, -1))
                赋值 (系统时间.秒, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “分”, , ), 2), 相减 (位置, 1))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 易语言_取易安装路径, 文本型, , 取易语言的安装目录。只要运行过一次易语言就可以生效。如果有多个易程序则返回最后一次运行的，失败返回空文本。
.局部变量 结果, 文本型, , , 

赋值 (结果, 取文本注册项 (#根类, “e.Document\shell\open\command\”, “”))
.如果真 (等于 (结果, “”))
    返回 (结果)
.如果真结束
赋值 (结果, 取文本左边 (结果, 相减 (倒找文本 (结果, “\”, , 假), 1)))
返回 (结果)


.子程序 易语言_枚举模块, 逻辑型, , 枚举某文件夹下所有模块文件
.参数 目录, 文本型, 可空, 需要枚举的目录（不包括子目录，默认为易语言目录的ECOM文件夹。末尾是否以“\”结尾均可。
.参数 接收数组, 文本型, 数组, 该数组用于接收枚举结果，必须是单维0成员数组，会在执行前被清空一次。可以使用“取数组下标 (, ) ≠ 0”判断是否成功。

.局部变量 寻找结果, 文本型, , , 

清除数组 (接收数组)
.如果真 (是否为空 (目录))
    赋值 (目录, 相加 (易语言_取易安装路径 (), “\ecom\”))
.如果真结束
.如果真 (不等于 (取文本右边 (目录, 1), “\”))
    赋值 (目录, 相加 (目录, “\”))
.如果真结束
赋值 (寻找结果, 寻找文件 (相加 (目录, “*.ec”), ))
.判断循环首 (不等于 (寻找结果, “”))
    加入成员 (接收数组, 相加 (目录, 寻找结果))
    赋值 (寻找结果, 寻找文件 ())
.判断循环尾 ()
返回 (不等于 (取数组成员数 (接收数组), 0))

.子程序 易语言_打开E文件, 逻辑型, 公开, 使用易语言打开一个文件，一般是.e格式的文件。成功返回真，否则返回假。
.参数 文件名, 文本型, 可空, 一般是.e格式的文件，如果不填则打开一个新的易语言程序。

.局部变量 易路径, 文本型, , , 

赋值 (易路径, 易语言_取易安装路径 ())
.如果 (等于 (文件名, “”))
    返回 (运行 (相加 (易路径, “\e.exe”), 假, ))
.否则
    返回 (系统_执行 (文件名))
.如果结束



.子程序 易语言_生成DLL命令代码, 文本型, , 生成一个DLL命令代码，生成后可以直接粘贴入易语言程序源码中。
.参数 Dll命令名, 文本型, , 输入或修改当前 Dll 命令在易程序中的使用名称。
.参数 返回值类型, 文本型, 可空, 定义 Dll 命令返回值的数据类型，不能为非系统基本数据类型或字节集型。
.参数 公开, 逻辑型, 可空, 决定当前DLL命令在编译后是否对外公开以便外部可以直接使用。
.参数 备注, 文本型, 可空, 输入或修改与当前Dll命令相关的备注信息。
.参数 Dll库文件名, 文本型, 可空, 定义当前Dll命令所在动态链接库的文件名。如果不指定库文件名，系统将默认在Kernel32、Gdi32、User32、Mpr、Advapi32、Shell32等Windows系统的基本应用程序界面函数（API）库中搜寻指定命令。
.参数 对应命令名, 文本型, 可空, 定义当前Dll命令在其所在动态链接库中的名称，如果不指定，系统将默认等同于“Dll命令名”。
.参数 参数, Dll参数, 可空 数组, 

.局部变量 结果, 文本型, , , 
.局部变量 匿名局部变量_1604, 空白型, , , 
.局部变量 i, 整数型, , , 

赋值 (结果, 相加 (“.版本 2”, #换行符, “.DLL命令 ”, Dll命令名, “, ”, 返回值类型, “, ”, Dll库文件名, “, ”, 对应命令名, “, ”, 选择 (公开, “公开”, “”), “, ”, 备注))

.计次循环首 (取数组成员数 (参数), i)
    赋值 (结果, 相加 (结果, #换行符, “.参数 ”, 参数 [i], 参数名, “, ”, 参数 [i], 类型, “, ”, 选择 (参数 [i], 传址, “传址”, “”), 选择 (参数 [i], 数组, “ 数组”, “”), “, ”, 参数 [i], 备注))
.计次循环尾 ()

返回 (结果)

.子程序 易语言_生成局部变量代码, 文本型, , 生成一个局部变量代码，生成后可以直接粘贴入易语言程序源码中。
.参数 变量名, 文本型, , 输入或修改当前全局变量的名称。
.参数 类型, 文本型, , 修改当前全局变量的数据类型。
.参数 静态, 逻辑型, 可空, 
.参数 数组, 整数型, 可空, 设置当前全局变量是否为数组变量及数组各维的上限值，多维数组各上限值之间用逗号分隔。可以设置为单维零成员空数组。
.参数 备注, 文本型, 可空, 输入或修改与当前全局变量相关的备注信息。

返回 (相加 (“.版本 2”, #换行符, #换行符, “.局部变量 ”, 变量名, “, ”, 类型, “, ”, 选择 (静态, “静态”, “”), “, ”, 选择 (是否为空 (数组), “”, 相加 (#引号, 到文本 (数组), #引号)), “, ”, 备注))


.子程序 易语言_枚举E文件, 逻辑型, , 枚举某文件夹下所有E文件
.参数 目录, 文本型, , 需要枚举的目录（不包括子目录)，末尾是否以“\”结尾均可。
.参数 接收数组, 文本型, 数组, 该数组用于接收枚举结果，必须是单维0成员数组，会在执行前被清空一次。可以使用“取数组下标 (, ) ≠ 0”判断是否成功。

.局部变量 寻找结果, 文本型, , , 

清除数组 (接收数组)
.如果真 (不等于 (取文本右边 (目录, 1), “\”))
    赋值 (目录, 相加 (目录, “\”))
.如果真结束
赋值 (寻找结果, 寻找文件 (相加 (目录, “*.e”), ))
.判断循环首 (不等于 (寻找结果, “”))
    加入成员 (接收数组, 相加 (目录, 寻找结果))
    赋值 (寻找结果, 寻找文件 ())
.判断循环尾 ()

返回 (不等于 (取数组成员数 (接收数组), 0))

.子程序 验证码生成_数字验证码, 文本型, , 返回一个数字随机验证码，因内部有 置随机数种子 () 命令，所以需要用变量接收。如果需要对其运算操作需用 到整数() 命令
.参数 验证码位数, 整数型, 可空, 验证码的位数，默认为4，且必须大于0，如果不大于0也自动为4。
.参数 自动补零, 逻辑型, 可空, 如果位数不够是否自动在前面补0，默认为真。

.局部变量 随机数, 整数型, , , 
.局部变量 _随机数, 文本型, , , 

赋值 (验证码位数, 选择 (或者 (小于或等于 (验证码位数, 0), 是否为空 (验证码位数)), 4, 验证码位数))
赋值 (自动补零, 选择 (是否为空 (自动补零), 真, 自动补零))

置随机数种子 ()

赋值 (随机数, 取随机数 (1, 相减 (求次方 (10, 验证码位数), 1))) ' [10^验证码位数-1]表示相应的位数最大值。
赋值 (_随机数, 到文本 (随机数))


 ' 自动补零代码
.如果真 (并且 (不等于 (取文本长度 (_随机数), 验证码位数), 等于 (自动补零, 真))) ' 判断是否需要补0
    .计次循环首 (相减 (验证码位数, 取文本长度 (_随机数)), ) ' 计次补零。
        赋值 (_随机数, 相加 (“0”, _随机数))
    .计次循环尾 ()
.如果真结束
 ' 自动补零代码


返回 (_随机数)

.子程序 报错, 整数型, , 报告错误，等待用户单击按钮，并返回一个整数告诉用户单击哪一个按钮。该整数为以下常量值之一： 0、#确认钮； 1、#取消钮； 2、#放弃钮； 3、#重试钮； 4、#忽略钮； 5、#是钮； 6、#否钮。如果对话框有“取消”按钮，则按下 ESC 键与单击“取消”按钮的效果相同。本命令为初级命令。
.参数 提示信息, 文本型, , 可在各行之间用回车符 (即“字符 (13)”)、换行符 (即“字符 (10)”) 或回车换行符的组合 (即：“字符 (13) + 字符 (10)”) 来分隔。
.参数 按钮, 整数型, 可空, 可以为： 0、#确认钮； 1、#确认取消钮； 2、#放弃重试忽略钮； 3、#取消是否钮；     4、#是否钮； 5、#重试取消钮; 0、#默认按钮一； 256、#默认按钮二； 512、#默认按钮三； 768、#默认按钮四;0、#程序等待； 4096、#系统等待;65536、#位于前台； 524288、#文本右对齐

返回 (信息框 (提示信息, 相加 (#错误图标, 按钮), “错误：”))

.子程序 提示, 整数型, , 提示，等待用户单击按钮，并返回一个整数告诉用户单击哪一个按钮。该整数为以下常量值之一： 0、#确认钮； 1、#取消钮； 2、#放弃钮； 3、#重试钮； 4、#忽略钮； 5、#是钮； 6、#否钮。如果对话框有“取消”按钮，则按下 ESC 键与单击“取消”按钮的效果相同。本命令为初级命令。
.参数 提示信息, 文本型, , 可在各行之间用回车符 (即“字符 (13)”)、换行符 (即“字符 (10)”) 或回车换行符的组合 (即：“字符 (13) + 字符 (10)”) 来分隔。
.参数 按钮, 整数型, 可空, 可以为： 0、#确认钮； 1、#确认取消钮； 2、#放弃重试忽略钮； 3、#取消是否钮；     4、#是否钮； 5、#重试取消钮; 0、#默认按钮一； 256、#默认按钮二； 512、#默认按钮三； 768、#默认按钮四;0、#程序等待； 4096、#系统等待;65536、#位于前台； 524288、#文本右对齐

返回 (信息框 (提示信息, 相加 (#信息图标, 按钮), “提示：”))

.子程序 验证码生成_英文验证码, 文本型, , 返回一个字母随机验证码，因内部有 置随机数种子 () 命令，所以需要用变量接收。
.参数 验证码位数, 整数型, 可空, 验证码的位数，默认为“默认数值”的设置，且必须大于等于1，如果不大于等于1也自动为“默认数值”的设置。
.参数 默认数值, 整数型, 可空, “验证码位数”不填写或不大于等于1的默认数值。默认为4，如果不大于等于1或不填写自动为4
.参数 大写字母, 逻辑型, 可空, 是否返回大写字母。默认为真。此项为假，则返回小写。

.局部变量 已循环次数, 整数型, , , 
.局部变量 字母, 文本型, , , 

赋值 (默认数值, 选择 (是否为空 (默认数值), 4, 默认数值))

赋值 (验证码位数, 选择 (或者 (是否为空 (验证码位数), 小于 (验证码位数, 1)), 默认数值, 验证码位数))


.计次循环首 (验证码位数, 已循环次数)
    置随机数种子 ()
    赋值 (字母, 相加 (字母, 字符 (相加 (取随机数 (1, 26), 96))))
.计次循环尾 ()

.如果 (或者 (等于 (大写字母, 真), 是否为空 (大写字母)))
    返回 (到大写 (字母))
.否则
    返回 (字母)
.如果结束


.子程序 文件名_取文件名部分, 文本型, , 取全路径文件名的文件名部分，如果失败则返回空文本。
.参数 全路径文件名, 文本型, , 

.局部变量 变量1, 整数型, , , 

赋值 (变量1, 倒找文本 (全路径文件名, “\”, , 真))
 ' 返回 (选择 (等于 (变量1, -1), “”, 取文本中间 (全路径文件名, 相加 (变量1, 1), 取文本长度 (全路径文件名))))

.子程序 文件名_取扩展名部分, 文本型, , 取全路径文件名的扩展名部分，如果失败则返回空文本。
.参数 全路径文件名, 文本型, , 

.局部变量 变量1, 整数型, , , 


赋值 (变量1, 倒找文本 (全路径文件名, “.”, , 真))
返回 (选择 (等于 (变量1, -1), “”, 取文本中间 (全路径文件名, 相加 (变量1, 1), 取文本长度 (全路径文件名))))

.子程序 文件名_取目录部分, 文本型, , 取全路径文件名的目录部分，后面不带“\”如果失败则返回空文本。
.参数 全路径文件名, 文本型, , 

.局部变量 变量1, 整数型, , , 

赋值 (变量1, 倒找文本 (全路径文件名, “\”, , 假))

返回 (选择 (等于 (变量1, -1), “”, 取文本中间 (全路径文件名, 1, 相减 (变量1, 1))))

.子程序 命令行_取命令行部分, 文本型, , 取出命令行参数并返回，默认序号为1
.参数 序号, 整数型, 可空, 欲取出的序号，默认序号为1

.局部变量 命令行_数组, 文本型, , "0", 

取命令行 (命令行_数组)
赋值 (序号, 选择 (是否为空 (序号), 1, 序号))
.如果真 (或者 (等于 (取数组下标 (命令行_数组, ), 0), 小于 (取数组成员数 (命令行_数组), 序号)))
    返回 (“”)
.如果真结束

.如果 (等于 (序号, 0))
    返回 (命令行_数组 [1])
.否则
    返回 (命令行_数组 [序号])
.如果结束


.子程序 IE_修改IE主页, 逻辑型, , 修改IE的主页，成功返回真，否则返回假。
.参数 新主页, 文本型, , 修改的新的IE主页

返回 (写注册项 (#现行用户, “Software\Microsoft\Internet Explorer\Main\Start Page”, 新主页))

.子程序 目录_取特定目录, 文本型, , 本命令返回指定的Windows系统特定目录，所返回目录名以“\”符号结束，如失败返回空文本。
.参数 欲获取目录类型, 空白型, , 本参数指定欲获取目录的类型。参考以特定目录_开头的常量，如果不在1~11之间不执行任何操作。

.局部变量 目录, 文本型, , , 

.如果真 (并且 (不等于 (欲获取目录类型, 9), 不等于 (欲获取目录类型, 10), 不等于 (欲获取目录类型, 11)))
    赋值 (目录, 取文本注册项 (#现行用户, 相加 (“Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\”, 多项选择 (欲获取目录类型, “Personal”, “Favorites”, “Desktop”, “Fonts”, “Start Menu”, “Programs”, “Startup”, “Local AppData”, “”, “”)), ))
.如果真结束


.判断开始 (等于 (欲获取目录类型, 9))
    赋值 (目录, 读环境变量 (“windir”))
.判断 (等于 (欲获取目录类型, 10))
    赋值 (目录, 相加 (读环境变量 (“windir”), “\system32”))
.判断 (等于 (欲获取目录类型, 11))
    赋值 (目录, 读环境变量 (“TEMP”))
.默认
    
.判断结束


.判断开始 (等于 (目录, “”))
    返回 (“”)
.判断 (不等于 (取文本右边 (目录, 1), “\”))
    返回 (相加 (目录, “\”))
.默认
    返回 (目录)
.判断结束




.子程序 系统_关闭系统, 逻辑型, , 本命令可以执行关机、重启、注销等Windows系统操作。成功返回真，失败返回假。会设置GetLastError。Windows NT中：关闭或重新启动系统，调用进程必须使用AdjustTokenPrivileges函数使SE_SHUTDOWN_NAME特权。Windows 95中：安全特权，不支持或需要。
.参数 关闭方式, 整数型, , 1.关机 2.注销 3.关闭电源(该系统必须支持断电) 4.重新启动 如果不为这几个值，则不执行任何操作。


返回 (不等于 (ExitWindowsEx (多项选择 (关闭方式, #EWX_SHUTDOWN, #EWX_LOGOFF, #EWX_POWEROFF, #EWX_REBOOT), 0), 0))

.子程序 快捷方式_创建, 逻辑型, , 本命令建立指定的快捷方式文件，成功返回真，失败返回假。
.参数 快捷方式文件名, 文本型, , 可以带".lnk"，也可以不带。（不带的话会自动添加）
.参数 指向路径, 文本型, , 快捷方式所指向文件的全路径文件名，也可以是URL地址，比如“C:\123.exe”、"http://www.it608.com"
.参数 工作目录, 文本型, 可空, 启动快捷方式指向文件时所需预置的工作目录
.参数 运行方式, 整数型, 可空, 运行时窗口风格（0：常规窗口，1：最小化窗口，2：最大化窗口），默认为0：常规窗口。
.参数 图标文件, 文本型, 可空, 指定图标全路径文件名，默认为目标程序图标
.参数 运行参数, 文本型, 可空, 运行附加的命令行文本参数
.参数 快捷键, 文本型, 可空, 如“Ctrl+Alt+Y”
.参数 备注, 文本型, 可空, 备注信息

.局部变量 返回, 逻辑型, , , 
.局部变量 WScript, 对象, , , 
.局部变量 Link, 对象, , , 

.如果真 (不等于 (到小写 (取文本右边 (快捷方式文件名, 4)), “.lnk”))
    赋值 (快捷方式文件名, 相加 (快捷方式文件名, “.lnk”))
.如果真结束

WScript.创建 (“WshShell”, “wshom.ocx”)
赋值 (Link, WScript.对象型方法 (“CreateShortcut”, 快捷方式文件名))
Link.写属性 (“TargetPath”, 指向路径)
.如果真 (取反 (是否为空 (备注)))
    Link.写属性 (“Description”, 备注)
.如果真结束
.如果真 (取反 (是否为空 (快捷键)))
    Link.写属性 (“HotKey”, 快捷键)
.如果真结束
.如果真 (取反 (是否为空 (图标文件)))
    Link.写属性 (“IconLocation”, 图标文件)
.如果真结束
.如果真 (取反 (是否为空 (运行方式)))
    Link.写属性 (“WindowStyle”, 运行方式)
.如果真结束
.如果真 (取反 (是否为空 (工作目录)))
    Link.写属性 (“WorkingDirectory”, 工作目录)
.如果真结束
.如果真 (取反 (是否为空 (运行参数)))
    Link.写属性 (“Arguments”, 运行参数)
.如果真结束

赋值 (返回, 不等于 (Link.对象型方法 (“Save”, ).取错误 (), “”))
 ' 释放资源
Link.清除 ()
WScript.清除 ()
返回 (返回)


.子程序 快捷方式_查询, 文本型, , 本命令从指定快捷方式文件中获取该快捷方式所指向的文件路径名，如果该文件不是快捷方式文件或执行失败则返回空文本。
.参数 快捷方式文件名, 文本型, , 如果文件名不包含后缀，将自动加上“.lnk”后缀名。
.参数 读属性类型, 整数型, 可空, 要查询的项目，可以为0.指向路径【默认】；1.工作目录；2.命令行参数；3.备注

.局部变量 a, 对象, , , 

.如果真 (不等于 (到小写 (取文本右边 (快捷方式文件名, 4)), “.lnk”))
    赋值 (快捷方式文件名, 相加 (快捷方式文件名, “.lnk”))
.如果真结束

.如果 (a.创建 (“WshShell”, “wshom.ocx”))
    赋值 (a, a.对象型方法 (“CreateShortcut”, 快捷方式文件名))
    .如果真 (a.是否为空 ())
        返回 (“”)
    .如果真结束
    
    返回 (a.读文本属性 (多项选择 (相加 (读属性类型, 1), “TargetPath”, “WorkingDirectory”, “Arguments”, “Description”), ))
    
.否则
    返回 (“”)
.如果结束



.窗口程序集 窗口程序集1, , , 

.程序集 程序集_不公开, , , 

.子程序 托盘事件处理, 整数型, , 
.参数 hwnd, 空白型, , 
.参数 msg, 空白型, , 
.参数 wp, 空白型, , 
.参数 lp, 空白型, , 

.如果真 (等于 (msg, 2000))
    .判断开始 (等于 (lp, 513))
        
        主窗口信息.弹出托盘菜单 (.主窗口, 主窗口信息.左键菜单)
    .判断 (等于 (lp, 516))
        主窗口信息.弹出托盘菜单 (.主窗口, 主窗口信息.右键菜单)
    .判断 (等于 (lp, 512))
        
    .判断 (等于 (lp, 515))
        CallWindowProc (主窗口信息.双击托盘, 0, 0, 0, 0)
    .默认
        
    .判断结束
    
.如果真结束


.判断开始 (等于 (msg, MyMsg))
    Shell_NotifyIconA (2, 结构)
    赋值 (结构.uFlags, 位或 (4, 2, 1))
    Shell_NotifyIconA (0, 结构)
.判断 (等于 (msg, 2))
    Shell_NotifyIconA (2, 结构)
.默认
    
.判断结束




返回 (CallWindowProc (默认窗口, hwnd, msg, wp, lp))


.子程序 十进制到十六进制, 文本型, , 
.参数 十进制数, 长整数型, , 

.局部变量 结果, 文本型, , , 
.局部变量 余数, 文本型, , , 

.判断循环首 (大于 (十进制数, 15))
    赋值 (余数, 到文本 (求余数 (十进制数, 16)))
    赋值 (余数, 取文本中间 (“0123456789ABCDEF”, 相加 (到数值 (余数), 1), 1))
    赋值 (结果, 相加 (余数, 结果))
    赋值 (十进制数, 取整 (相除 (十进制数, 16)))
.判断循环尾 ()
赋值 (余数, 取文本中间 (“0123456789ABCDEF”, 相加 (十进制数, 1), 1))
赋值 (结果, 相加 (余数, 结果))
返回 (结果)

.子程序 十六进制到十进制, 文本型, , 
.参数 十六进制文本, 文本型, , 

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

.变量循环首 (1, 取文本长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 取文本中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (取文本长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
返回 (到文本 (结果))


.子程序 GetDiskLists, 整数型, , Return the number of disks if it's succeed,or return 0.
.参数 Lists, 文本型, 参考 可空 数组, Please give me a variable to take over the lists.

.局部变量 Bin, 字节集, , , 
.局部变量 Long, 整数型, , , 
.局部变量 temporariness, 字节集, , , 
.局部变量 times, 整数型, , , 

清除数组 (Lists)
赋值 (Long, GetLogicalDriveStrings (0, Bin))
.如果真 (等于 (Long, 0))
    返回 (0)
.如果真结束
赋值 (Bin, GetBlankBin (Long))
.如果真 (等于 (GetLogicalDriveStrings (Long, Bin), 0))
    返回 (0)
.如果真结束
.变量循环首 (1, 相减 (Long, 2), 4, times)
    加入成员 (Lists, BinToText (BinMid (Bin, times, 3)))
.变量循环尾 ()
返回 (取数组成员数 (Lists))


.子程序 BinMid, 字节集, , 
.参数 Bin, 字节集, , 
.参数 First, 整数型, , 
.参数 Num, 整数型, , 

.局部变量 len, 整数型, , , 

赋值 (len, BinLen (Bin))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.如果真 (小于 (First, 1))
    赋值 (First, 1)
.如果真结束
.如果真 (或者 (大于 (First, len), 小于 (Num, 1)))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (Num, First), 1), len))
    赋值 (Num, 相加 (相减 (len, First), 1))
.如果真结束
返回 (指针到字节集 (相减 (相加 (_取指针_字节集 (Bin), First), 1), Num))


.子程序 BinLen, 整数型, , 
.参数 Bin, 字节集, , 

.局部变量 ret, 整数型, , , 

.如果真 (等于 (Bin, {  }))
    返回 (0)
.如果真结束
RtlMoveMemory (ret, 相减 (_取指针_字节集 (Bin), 4), 4)
返回 (ret)


.子程序 BinToText, 文本型, , 
.参数 Bin, 字节集, , 

.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (Bin, { 0 }))
返回 (指针到文本 (_取指针_字节集 (temp)))

.子程序 _取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn (字节集, 字节集, 0))

.子程序 GetBlankBin, 字节集, , 
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)

.子程序 GetTheFolder, 文本型, , 
.参数 hWnd, 整数型, , 
.参数 Title, 文本型, , 
.参数 StartDir, 文本型, , 

.局部变量 Return, 文本型, , , 
.局部变量 lpIDList, 整数型, , , 
.局部变量 szTitle, 文本型, , , 
.局部变量 sBuffer, 文本型, , , 
.局部变量 tBrowseInfo, BrowseInfo, , , 

赋值 (m_CurrentDirectory, 相加 (StartDir, 字符 (0)))
赋值 (szTitle, Title)
赋值 (tBrowseInfo.hWndOwner, hWnd)
赋值 (tBrowseInfo.lpszTitle, lstrcat (szTitle, “”))
赋值 (tBrowseInfo.ulFlags, 相加 (#BIF_RETURNONLYFSDIRS, #BIF_DONTGOBELOWDOMAIN, #BIF_STATUSTEXT))
赋值 (tBrowseInfo.lpfnCallback, 到数值 (&BrowseCallbackProc))
赋值 (lpIDList, SHBrowseForFolder (tBrowseInfo))
.判断开始 (不等于 (lpIDList, 0))
    赋值 (sBuffer, 取空白文本 (#MAX_PATH))
    SHGetPathFromIDList (lpIDList, sBuffer)
    赋值 (Return, sBuffer)
.默认
    赋值 (Return, “”)
.判断结束
返回 (Return)


.子程序 BrowseCallbackProc, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 lp, 整数型, , 
.参数 pData, 整数型, , 

.局部变量 返回数据, 整数型, , , 
.局部变量 lpIDList, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 sBuffer, 文本型, , , 

.判断开始 (等于 (uMsg, #BFFM_INITIALIZED))
    SendMessage (hWnd, #BFFM_SETSELECTION, 1, 到整数 (m_CurrentDirectory))
.判断 (等于 (uMsg, #BFFM_SELCHANGED))
    赋值 (sBuffer, 取空白文本 (#MAX_PATH))
    赋值 (ret, SHGetPathFromIDList (lp, sBuffer))
    .判断开始 (等于 (ret, 1))
        SendMessage (hWnd, #BFFM_SETSTATUSTEXT, 0, 到整数 (sBuffer))
    .默认
        
    .判断结束
    
.默认
    
.判断结束
赋值 (返回数据, 0)
返回 (返回数据)


.子程序 FileTimeToVariantTime, 日期时间型, , 
.参数 FileTime, FILETIME, , 

.局部变量 系统时间, 系统时间, , , 
.局部变量 时间, 日期时间型, , , 

FileTimeToSystemTime (FileTime, 系统时间)
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 VariantTimeToFileTime, FILETIME, , 
.参数 时间, 日期时间型, , 

.局部变量 FileTime, FILETIME, , , 
.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (时间, 系统时间)
SystemTimeToFileTime (系统时间, FileTime)
返回 (FileTime)

.子程序 文本_到字节集, 字节集, , 
.参数 文本, 文本型, , 

返回 (指针到字节集 (_取指针_文本型 (文本), 文本_取长度 (文本)))

.子程序 _取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))

.子程序 文本_取空白, 文本型, , 
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
FillMemory (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)

.子程序 整数_到文本, 文本型, , 
.参数 整数型, 短整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 g, 字节型, , "0", 

.循环判断首 ()
    赋值 (i, 相加 (求余数 (整数型, 10), 48))
    插入成员 (g, 1, i)
    赋值 (整数型, 相除 (整数型, 10))
.循环判断尾 (不等于 (整数型, 0))
加入成员 (g, 0)
返回 (lstrcpyn (g, 0, 0))

.子程序 字节集_取空白, 字节集, , 
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)

.子程序 字节集_取长度, 整数型, , 
.参数 字节集, 字节集, , 

.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
RtlMoveMemory (ret, 相减 (_取指针_字节集 (字节集), 4), 4)
返回 (ret)

.子程序 文本_取中间, 文本型, , 
.参数 文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出的数目, 整数型, , 

.局部变量 字节集, 字节集, , , 
.局部变量 len, 整数型, , , 

赋值 (len, 文本_取长度 (文本))
.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
.如果真 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.如果真结束
.如果真 (或者 (大于 (起始取出位置, len), 小于 (欲取出的数目, 1)))
    返回 (“”)
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出的数目, 起始取出位置), 1), len))
    赋值 (欲取出的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (字节集, 相加 (指针到字节集 (相减 (相加 (_取指针_文本型 (文本), 起始取出位置), 1), 欲取出的数目), { 0 }))
返回 (指针到文本 (_取指针_字节集 (字节集)))

.子程序 文本_取右边, 文本型, , 
.参数 文本, 文本型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 整数型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (len, 文本_取长度 (文本))
.如果真 (或者 (小于 (len, 1), 小于 (欲取出字节的数目, 1)))
    返回 (“”)
.如果真结束
.如果真 (大于 (欲取出字节的数目, len))
    返回 (文本)
.如果真结束
赋值 (字节集, 相加 (指针到字节集 (相减 (相加 (_取指针_文本型 (文本), len), 欲取出字节的数目), 欲取出字节的数目), { 0 }))
返回 (指针到文本 (_取指针_字节集 (字节集)))

.子程序 文本_寻找, 整数型, , 
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 
.参数 是否不区分大小写, 逻辑型, 可空, 

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 204, 0, 0, 0, 131, 249, 0, 126, 111, 139, 85, 244, 137, 203, 139, 117, 12, 232, 186, 0, 0, 0, 131, 249, 0, 126, 93, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 73, 73, 137, 77, 248, 41, 203, 137, 93, 252, 137, 93, 240, 1, 194, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 70, 227, 43, 138, 7, 71, 73, 232, 143, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 70, 71, 232, 118, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 70, 139, 69, 16, 3, 69, 240, 43, 69, 252, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 165, 71, 73, 235, 239, 132, 219, 116, 32, 139, 117, 244, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 130, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 16, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)

.子程序 文本_到整数, 整数型, , 
.参数 文本, 文本型, , 

.局部变量 ret, 长整数型, , , 

StrToInt64Ex (文本, 0, ret)
返回 (ret)

.子程序 文本_取左边, 文本型, , 
.参数 文本, 文本型, , 
.参数 欲取出的数目, 整数型, , 

.局部变量 len, 整数型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (len, 文本_取长度 (文本))
.如果真 (或者 (小于 (len, 1), 小于 (欲取出的数目, 1)))
    返回 (“”)
.如果真结束
.如果真 (大于 (欲取出的数目, len))
    返回 (文本)
.如果真结束
赋值 (字节集, 相加 (指针到字节集 (_取指针_文本型 (文本), 欲取出的数目), { 0 }))
返回 (指针到文本 (_取指针_字节集 (字节集)))

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 VPN_VPN连接, 文本型, , 一行代码，轻松进行创建、连接操作,成功返回空白文本,失败返回出错信息
.参数 VPN连接名称, 文本型, , 拨号连接的名称
.参数 IP地址域名, 文本型, , 可以填写IP地址或者域名
.参数 用户名, 文本型, , 用于拨号的用户名
.参数 密码, 文本型, , 用于拨号的密码
.参数 编辑框, 编辑框, , 可以用来查看拨号状态



.子程序 VPN_挂断拨号, 逻辑型, , 



 ' 不属于任何一个程序集、类模块的函数：
