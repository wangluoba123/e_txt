 ' 文件类型：Windows模块源码

 ' 程序名称：枚举对象集合 易语言版for each v1.1
 ' 程序描述：★:稳定与简便并存的操作流程(鱼和熊掌都可兼得,第一种操作流程与第二种操作流程的完美结合)
∽∽∽∽∽∽∽∽∽∽
☆:Each(进行枚举的对象, 枚举接口:对象, 返回枚举出数据:变体型)
	(推荐使用此方法)调用方管理枚举接口.

∞∞∞∞∞∞∞∞∞∞

★:最简化的操作流程
∽∽∽∽∽∽∽∽∽∽
☆:_Each (进行枚举的对象, 返回枚举出数据:变体型)
	自动化管理枚举接口,提供最简便的方法来枚举对象集合,枚举变体型数据.


☆:_Exit (进行枚举的对象)
	当需要从枚举循环中退出时,请调用此函数,以释放枚举接口对象,避免句柄泄露.枚举完毕则不需要调用此函数,内部已经自动释放.

∞∞∞∞∞∞∞∞∞∞

★:最稳定的操作流程
∽∽∽∽∽∽∽∽∽∽
☆:取对象枚举接口(进行枚举的对象, 返回枚举接口)

☆:枚举(枚举接口, 返回变体型数据)

☆:重置(枚举接口)

☆:跳到(枚举接口, 位置)

∞∞∞∞∞∞∞∞∞∞

由于并未做严格测试,这里所说后面一套稳定操作流程并非真的比前面的一套简化操作流程稳定多少.欢迎测试提出BUG!

∞∞∞∞∞∞∞∞∞∞

EC by:路过已错过
date :2008-8-13
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.1
 ' 创建号：0.0



.常量 IID_IEnumVARIANT, "“{00020404-0000-0000-C000-000000000046}”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库





.DLL命令 MultiByteToWideChar, 整数型, "", "", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, 传址, 
    .参数 cbMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, 传址, 
    .参数 cchWideChar, 整数型, , 

.DLL命令 动态调用子程序_API, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 _ObjectToThis, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 对象, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 _Int32, 整数型, "", "lstrcatA", , 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 _VarPtr, 整数型, "", "lstrcatA", , 
    .参数 lpString1, 变体型, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 _ObjPtr, 整数型, "", "lstrcatA", , 
    .参数 lpString1, 对象, 传址, 
    .参数 lpString2, 整数型, 传址, 

.程序集 程序集1, , , 

.程序集变量 pThis, 整数型, , "0", 
.程序集变量 pIEnum, 对象, , "0", 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
未知函数_308 () ' *** 缩略程序块 ***
 ' fso.创建 (“Scripting.FileSystemObject”, )
 ' f1 ＝ fso.对象型方法 (“GetFolder”, “E:\教程”).读对象型属性 (“Files”, )
 ' .判断循环首 (Each ())
     ' 输出调试文本 (f.取对象 ().读文本属性 (“Name”, ))
 ' .判断循环尾 ()
 ' 输出调试文本 (“test over”)

.子程序 Each, 逻辑型, , (推荐使用此方法)调用方管理枚举接口.提供简便与稳定的方法来枚举对象集合,枚举变体型数据.
.参数 element, 对象, 参考, 要进行枚举的对象
.参数 enum, 对象, 参考, 返回或需要枚举集合的枚举接口,如果为首次调用,将自动填充该枚举接口.
.参数 group, 变体型, 参考, 返回枚举出的变体型数据

.局部变量 hr, 逻辑型, , , 
.局部变量 pcFetched, 整数型, , , 

.如果真 (element.是否为空 ())
    返回 (假)
.如果真结束
.如果 (enum.是否为空 ())
    赋值 (enum, element.读对象型属性 (“_NewEnum”, ))
    赋值 (hr, 等于 (enum.是否为空 (), 假))
    .如果真 (hr)
        Reset (enum)
    .如果真结束
    
.否则
    赋值 (hr, enum.取接口 (enum, #IID_IEnumVARIANT))
.如果结束
.如果真 (等于 (hr, 假))
    返回 (假)
.如果真结束
赋值 (hr, 并且 (等于 (Next (enum, 1, group, pcFetched), 0), 等于 (pcFetched, 1)))
.如果真 (等于 (hr, 假))
    enum.清除 ()
.如果真结束
返回 (hr)

.子程序 _Each, 逻辑型, , 自动化管理枚举接口,提供最简便的方法来枚举对象集合,枚举变体型数据.
.参数 element, 对象, 参考, 要进行枚举的对象
.参数 group, 变体型, 参考, 返回枚举出的变体型数据

.局部变量 this, 整数型, , , 
.局部变量 index, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 hr, 逻辑型, , , 
.局部变量 枚举接口, 对象, , , 

赋值 (this, _ToThis (element))
赋值 (index, GetIndex (this))
.如果真 (等于 (index, 0))
    赋值 (i, 取数组成员数 (pIEnum))
    .如果 (取对象枚举接口 (element, 枚举接口))
        加入成员 (pIEnum, 枚举接口)
        加入成员 (pThis, this)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
赋值 (i, 选择 (等于 (index, 0), 相加 (i, 1), index))
赋值 (hr, 枚举 (pIEnum [i], group))
.如果真 (并且 (等于 (hr, 假), 不等于 (index, 0)))
    pIEnum.清除 ( [index])
    删除成员 (pIEnum, index, )
    删除成员 (pThis, index, )
.如果真结束
返回 (hr)

.子程序 _Exit, 逻辑型, , 当需要在循环未结束前而退出循环时,为了避免造成句柄泄露,请调用此函数.
.参数 element, 对象, 参考, 先前用Each枚举的对象.

.局部变量 index, 整数型, , , 

赋值 (index, GetIndex (_ToThis (element)))
.如果真 (并且 (不等于 (index, 0), 小于或等于 (index, 取数组成员数 (pIEnum))))
    pIEnum.清除 ( [index])
    删除成员 (pIEnum, index, )
    删除成员 (pThis, index, )
.如果真结束
返回 (等于 (index, 相加 (取数组成员数 (pIEnum), 1)))

.子程序 GetIndex, 整数型, , 
.参数 element, 整数型, , 

.局部变量 lpBin, 字节集, , , 
.局部变量 Index, 整数型, , , 

赋值 (lpBin, 到字节集 (pThis))
.循环判断首 ()
    赋值 (Index, 寻找字节集 (lpBin, 到字节集 (element), 相加 (Index, 1)))
.循环判断尾 (并且 (不等于 (Index, -1), 不等于 (相减 (Index, 1), 相乘 (4, 整除 (Index, 4)))))
返回 (选择 (等于 (Index, -1), 0, 相加 (整除 (Index, 4), 1)))

.子程序 取对象枚举接口, 逻辑型, , 
.参数 目标对象, 对象, 参考, 
.参数 枚举接口, 对象, 参考, 返回枚举接口

赋值 (枚举接口, 目标对象.读对象型属性 (“_NewEnum”, ))
重置 (枚举接口)
 ' “{00020404-0000-0000-C000-000000000046}”  ' IID_IEnumVARIANT
返回 (等于 (枚举接口.是否为空 (), 假))

.子程序 枚举, 逻辑型, , 如果没有对象接口就返回假
.参数 枚举接口, 对象, 参考, ■■注意:如果该参数不为枚举接口,但若包含了枚举接口,将自动替换该参数为枚举接口.
.参数 对象接口, 变体型, 参考, 返回对象接口

.局部变量 pcFetched, 整数型, , , 

.如果真 (等于 (重新获取 (枚举接口), 假))
    返回 (假)
.如果真结束
.如果真 (不等于 (Next (枚举接口, 1, 对象接口, pcFetched), 0))
    返回 (假)
.如果真结束
返回 (等于 (pcFetched, 1))

.子程序 重置, 逻辑型, , 在一次枚举循环结束之后,用本命令复位到一个,再重新枚举
.参数 枚举接口, 对象, 参考, ■■注意:如果该参数不为枚举接口,但若包含了枚举接口,将自动替换该参数为枚举接口.

.如果真 (等于 (重新获取 (枚举接口), 假))
    返回 (假)
.如果真结束
返回 (等于 (Reset (枚举接口), 0))

.子程序 跳到, 逻辑型, , 跳第N个对象开始枚举
.参数 枚举接口, 对象, 参考, ■■注意:如果该参数不为枚举接口,但若包含了枚举接口,将自动替换该参数为枚举接口.
.参数 位置, 整数型, , 从0,1,2...

.如果真 (等于 (重新获取 (枚举接口), 假))
    返回 (假)
.如果真结束
返回 (等于 (Skip (枚举接口, 位置), 0))

.子程序 重新获取, 逻辑型, , 
.参数 枚举接口, 对象, 参考, 

 ' 为避免不必要的调用错误.将重新获取我们该调用的IEnumVARIANT对象.
返回 (枚举接口.取接口 (枚举接口, #IID_IEnumVARIANT))

.程序集 Ex, , , 

.子程序 A2W, 字节集, , 
.参数 ByteStr, 文本型, 参考, 

.局部变量 WChar, 字节集, , , 

赋值 (WChar, 取空白字节集 (相加 (相乘 (取文本长度 (ByteStr), 2), 2)))
MultiByteToWideChar (0, 0, ByteStr, -1, WChar, 取字节集长度 (WChar))
返回 (WChar)

.子程序 CallInstanceMethod, 整数型, , 
.参数 Instance, 对象, , 
.参数 Index, 整数型, , 
.参数 arg1, 整数型, 可空, 
.参数 arg2, 整数型, 可空, 
.参数 arg3, 整数型, 可空, 
.参数 arg4, 整数型, 可空, 
.参数 arg5, 整数型, 可空, 
.参数 arg6, 整数型, 可空, 
.参数 arg7, 整数型, 可空, 
.参数 arg8, 整数型, 可空, 
.参数 arg9, 整数型, 可空, 
.参数 arg10, 整数型, 可空, 

.局部变量 参数数组, 整数型, , "0", 
.局部变量 pThis, 整数型, , , 

赋值 (pThis, _ToThis (Instance))
.如果真 (等于 (pThis, 0))
    返回 (-1)
.如果真结束
加入成员 (参数数组, pThis)
.计次循环首 (1, )
    .如果 (是否为空 (arg1))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg1)
    .如果结束
    .如果 (是否为空 (arg2))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg2)
    .如果结束
    .如果 (是否为空 (arg3))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg3)
    .如果结束
    .如果 (是否为空 (arg4))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg4)
    .如果结束
    .如果 (是否为空 (arg5))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg5)
    .如果结束
    .如果 (是否为空 (arg6))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg6)
    .如果结束
    .如果 (是否为空 (arg7))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg7)
    .如果结束
    .如果 (是否为空 (arg8))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg8)
    .如果结束
    .如果 (是否为空 (arg9))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg9)
    .如果结束
    .如果 (是否为空 (arg10))
        跳出循环 ()
    .否则
        加入成员 (参数数组, arg10)
    .如果结束
    
.计次循环尾 ()
返回 (动态调用子程序_API ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, _ToDword (相加 (_ToDword (pThis), 相乘 (Index, 4))), 参数数组, 取数组成员数 (参数数组), 假))

.子程序 _ToDword, 整数型, , 
.参数 Pointer, 整数型, , 

返回 (取字节集数据 (指针到字节集 (Pointer, 4), #整数型, ))

.子程序 _ToThis, 整数型, , 
.参数 Object, 对象, 参考, 

.局部变量 pThis, 整数型, , , 

_ObjectToThis (pThis, Object, 4)
返回 (pThis)

.程序集 CallInterface, , , 

.子程序 Next, 整数型, , 
.参数 IEnumVARIANT, 对象, , 
.参数 celt, 整数型, , 
.参数 rgVar, 变体型, 参考, 
.参数 pCeltFetched, 整数型, 参考, 

返回 (CallInstanceMethod (IEnumVARIANT, 3, celt, _VarPtr (rgVar, 0), _Int32 (pCeltFetched, 0)))

.子程序 Skip, 整数型, , 
.参数 IEnumVARIANT, 对象, , 
.参数 celt, 整数型, , 

返回 (CallInstanceMethod (IEnumVARIANT, 4, celt))

.子程序 Reset, 整数型, , 
.参数 IEnumVARIANT, 对象, , 

返回 (CallInstanceMethod (IEnumVARIANT, 5))


 ' 不属于任何一个程序集、类模块的函数：
