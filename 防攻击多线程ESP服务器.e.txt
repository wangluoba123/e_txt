 ' 文件类型：Windows窗口程序

 ' 程序名称：防攻击多线程ESP服务器
 ' 程序描述：防攻击多线程ESP服务器.exe
@备注:
防攻击多线程ESP服务器.exe
 ' 程序作者：smwn
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 267
    高度 = 217
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 sx, "“<meta http-equiv=refresh content="3"><BR /><BR /><BR /><h1 align="CENTER">刷新过快 3 秒后重新加载</h1>”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 2 0 正则表达式支持库
 ' shell 52F260023059454187AF826A3C07AF2A 3 0 操作系统界面功能支持库
 ' eCalc 306AA9E31B5940399723021A0D782077 2 0 数值计算支持库
 ' ethreadnew {82B46959-3065-46a0-8340-3BB58B77A259} 1 1 多线程库



 ' 所需要的模块
 ' 世宝脚本语言引擎 免费版 C:\Documents and Settings\Administrator\桌面\WebRoot\易脚本 2.0.ec



.窗口程序集 窗口程序集1, , , 

.程序集变量 客户, 文本型, , , 
.程序集变量 时间, 整数型, , , 
.程序集变量 数据, 字节集, , , 
.程序集变量 写出文本a, 文本型, , , 
.程序集变量 线程池, 整数型, , , 
.程序集变量 aaa, 未知类型0x60001, , , 
.程序集变量 开启防护, 逻辑型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
未知函数_67174454 ()
未知函数_67174447 (取运行目录 ())
未知函数_67174459 (“写出文本”, &写出文本)
未知函数_67174459 (“取请求数据”, &取请求数据)
未知函数_67174459 (“开启防护”, &开启防护a)
未知函数_67174459 (“取客户”, &取客户)
赋值 (线程池, 未知支持库函数_0 (10, 2000, &线程, 10000, 1048576))
赋值 (时间, 取启动时间 ())
赋值 (开启防护, 真)
赋值 (.标题, “已开启防护”)
赋值 (.选中, 真)

.子程序 开启防护a, 空白型, , 
.参数 ddd, 整数型, , 

.如果真 (等于 (未知函数_67174456 (ddd, 1, 真), “”))
    未知函数_67174458 (ddd, 到文本 (开启防护), 真)
    返回 ()
.如果真结束
.如果 (等于 (未知函数_67174456 (ddd, 1, 真), “真”))
    赋值 (开启防护, 真)
    赋值 (.选中, 真)
    赋值 (.标题, “已开启防护”)
.否则
    赋值 (开启防护, 假)
    赋值 (.选中, 假)
    赋值 (.标题, “防护关闭中”)
.如果结束


.子程序 取客户, 空白型, , 
.参数 aaaa, 整数型, , 

未知函数_67174458 (aaaa, 客户, 真)

.子程序 取请求数据, 空白型, , 
.参数 ddd, 整数型, , 

未知函数_67174458 (ddd, 未知函数_67174456 (ddd, 1, 真), 真)

.子程序 写出文本, 空白型, , 
.参数 sss, 整数型, , 

.如果真 (等于 (未知函数_67174455 (sss), 0))
    返回 ()
.如果真结束
赋值 (写出文本a, 相加 (写出文本a, 到文本 (未知函数_67174456 (sss, 1, 真)), #换行符))

.子程序 _服务器1_数据到达, 空白型, , 
.局部变量 kk, 文本型, , , 

.如果真 (大于或等于 (未知支持库函数_5 (线程池), 100))
    延迟 (1000)
    返回 ()
.如果真结束
赋值 (kk, 取回客户 ())
.如果真 (开启防护) ' 这里可以设置是否开启防护
    .如果真 (不等于 (寻找文本 (kk, 取文本左边 (客户, 相减 (倒找文本 (客户, “:”, , 假), 1)), , 假), -1)) ' ' ――――|
        .如果真 (小于 (相除 (相减 (取启动时间 (), 时间), 1000), 1)) ' '                                                |
            kk.发送数据 (#sx, ) ' '                                                                 |――这段代码起到防单IP短时间大量攻击作用
            kk.断开客户 () ' '                                                                        |
            返回 () ' '                                                                              ――――|
        .如果真结束
        
    .如果真结束
    
.如果真结束
赋值 (客户, kk)
赋值 (数据, 取回数据 ())
赋值 (时间, 取启动时间 ())
未知支持库函数_2 (线程池, 123)

.子程序 线程, 空白型, , 
.参数 qq, 整数型, , 

.局部变量 a, 文本型, , , 
.局部变量 客户2, 文本型, , , 
.局部变量 q, 文本型, , , 
.局部变量 zz, 未知类型0x30001, , , 
.局部变量 结果1, 未知类型0x30002, , "0", 
.局部变量 c, 整数型, , , 
.局部变量 wb, 文本型, , , 
.局部变量 a1, 文本型, , , 
.局部变量 a2, 文本型, , , 
.局部变量 网址1, 文本型, , "0", 
.局部变量 网址, 文本型, , "0", 
.局部变量 变量, 文本型, , "0", 

aaa.未知支持库函数_8 ()
赋值 (客户2, 客户)
赋值 (a, 到文本 (数据))
赋值 (网址, 分割文本 (a, “ ”, ))
.如果真 (大于或等于 (取数组成员数 (网址), 2))
    .如果真 (等于 (网址 [2], “/”))
        赋值 (网址 [2], “/index.esp”)
    .如果真结束
    赋值 (网址, 分割文本 (网址 [2], “?”, ))
    .如果 (不等于 (取文本右边 (网址 [1], 3), “esp”))
        客户2.发送数据 (读入文件 (相加 (取运行目录 (), 网址 [1])), )
        客户2.断开客户 ()
    .否则
        .如果真 (大于或等于 (取数组成员数 (网址), 2))
            赋值 (网址 [2], 子程序1 (网址 [2]))
            赋值 (网址 [2], 子文本替换 (网址 [2], #引号, 相加 (#引号, “$字符(34)$”, #引号), , , 假))
            赋值 (网址 [2], 子文本替换 (网址 [2], #左引号, 相加 (#引号, “$字符(34)$”, #引号), , , 假))
            赋值 (网址 [2], 子文本替换 (网址 [2], #右引号, 相加 (#引号, “$字符(34)$”, #引号), , , 假))
            赋值 (网址 [2], 子文本替换 (网址 [2], “+”, “ ”, , , 假))
            赋值 (变量, 分割文本 (网址 [2], “&”, ))
            .计次循环首 (取数组成员数 (变量), c)
                赋值 (wb, 相加 (wb, 子文本替换 (变量 [c], “=”, 相加 (“=”, #引号), , , 真), #引号, #换行符))
            .计次循环尾 ()
        .如果真结束
        .如果真 (不等于 (取数组成员数 (网址), 0))
            赋值 (a1, 到文本 (读入文件 (相加 (取运行目录 (), 网址 [1]))))
        .如果真结束
        赋值 (wb, 相加 (wb, 翻译 (a1)))
        未知函数_67174434 (wb)
        .如果真 (不等于 (未知函数_67174461 (), “”)) ' 要是没有错误 最好了！ 要是有 就提示一下
            赋值 (写出文本a, 相加 (“<p>-------------------------------------<br>”, 未知函数_67174461 (), “<br>-------------------------------------<p>”, 写出文本a))
        .如果真结束
        客户2.发送数据 (写出文本a, )
        客户2.断开客户 ()
        赋值 (写出文本a, “”)
    .如果结束
    
.如果真结束
aaa.未知支持库函数_10 ()

.子程序 _按钮1_被单击, 空白型, , 
赋值 (.端口, 到整数 (.内容))

.子程序 _按钮2_被单击, 空白型, , 
_按钮1_被单击 ()
未知支持库函数_6 (#, “iexplore.exe”, 相加 (“ http://127.0.0.1:”, .内容), , )

.子程序 进制转换, 文本型, , 进行转换的子程序
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 2-62
.参数 转换的进制, 整数型, , 2-62

.局部变量 欲转换文本, 文本型, , , 输入的文本串
.局部变量 临时文本, 文本型, , , 存放从输入的文本串中取出的一个文本
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量1, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 次方数, 未知类型0x5000A, , , 每一位数字对应的10的次方数
.局部变量 转换的进制大数1, 未知类型0x5000A, , , 要转换的进制-1
.局部变量 转换的进制大数, 未知类型0x5000A, , , 要转换的进制
.局部变量 被转换进制大数, 未知类型0x5000A, , , 被转换的进制
.局部变量 临时大数, 未知类型0x5000A, , , 将被转换数字转换成的大数
.局部变量 余数大数, 未知类型0x5000A, , , 存放求出的余数大数
.局部变量 数值1大数, 未知类型0x5000A, , , 只存放1
.局部变量 临时大数1, 未知类型0x5000A, , , 将被转换数字的每一位转换成的大数

未知函数_2596 () ' *** 缩略程序块 ***
.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 62), 大于 (转换的进制, 62)))
    返回 (“ ”)
.如果真结束
 ' 被转换文本 ＝ 到大写 (到半角 (被转换文本))
 ' .变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1)
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量1, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”, 被转换进制), 临时文本, , 假), -1))
        返回 (“ ”)
        跳出循环 ()
    .如果真结束
    
    .如果真 (等于 (计次变量1, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.变量循环尾 ()


.如果真 (不等于 (临时文本, “”))
    返回 (临时文本)
.如果真结束


.如果真 (等于 (被转换进制, 转换的进制))
    返回 (被转换文本)
.如果真结束

.变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1)
    次方数.未知支持库函数_69 (1)
    被转换进制大数.未知支持库函数_69 (被转换进制)
    .计次循环首 (相减 (取文本长度 (被转换文本), 计次变量1), 计次变量2)
        赋值 (次方数, 次方数.未知支持库函数_94 (被转换进制大数))
    .计次循环尾 ()
    
     ' 临时大数1.未知支持库函数_69 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”, 取文本中间 (被转换文本, 计次变量1, 1), , 假), 1))
    赋值 (临时大数1, 临时大数1.未知支持库函数_94 (次方数))
    赋值 (临时大数, 临时大数1.未知支持库函数_92 (临时大数))
.变量循环尾 ()
转换的进制大数1.未知支持库函数_69 (相减 (转换的进制, 1))
转换的进制大数.未知支持库函数_69 (转换的进制)
数值1大数.未知支持库函数_69 (1)
.判断循环首 (等于 (临时大数.未知支持库函数_86 (转换的进制大数1), 真))
    赋值 (余数大数, 临时大数.未知支持库函数_97 (转换的进制大数))
    赋值 (临时大数1, 余数大数.未知支持库函数_92 (数值1大数))
    赋值 (临时数值, 到数值 (临时大数1.未知支持库函数_68 ()))
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”, 临时数值, 1), 欲转换文本))
    赋值 (临时大数, 临时大数.未知支持库函数_95 (转换的进制大数, 10))
    赋值 (临时大数, 临时大数.未知支持库函数_90 ())
.判断循环尾 ()
赋值 (临时数值, 临时大数.未知支持库函数_77 ())
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”, 相加 (临时数值, 1), 1), 欲转换文本))
返回 (欲转换文本)

.子程序 子程序1, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 长度, 空白型, , , 
.局部变量 十六, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 高位, 空白型, , , 
.局部变量 低位, 空白型, , , 

赋值 (长度, 取文本长度 (文本))
赋值 (循环变量, 1)
赋值 (十六, “0123456789ABCDEF”)
.判断循环首 (小于或等于 (循环变量, 长度))
    .判断开始 (不等于 (取文本中间 (文本, 循环变量, 1), “%”))
        赋值 (返回文本, 相加 (返回文本, 取文本中间 (文本, 循环变量, 1)))
    .默认
        赋值 (循环变量, 相加 (循环变量, 1))
        赋值 (高位, 相减 (寻找文本 (十六, 到大写 (取文本中间 (文本, 循环变量, 1)), , 假), 1))
        赋值 (循环变量, 相加 (循环变量, 1))
        赋值 (低位, 相减 (寻找文本 (十六, 到大写 (取文本中间 (文本, 循环变量, 1)), , 假), 1))
        赋值 (返回文本, 相加 (返回文本, 字符 (相加 (相乘 (高位, 16), 低位))))
    .判断结束
    赋值 (循环变量, 相加 (循环变量, 1))
.判断循环尾 ()
返回 (返回文本)

.子程序 翻译, 文本型, , 
.参数 Htm, 文本型, , 

.局部变量 文本, 文本型, , "0", 
.局部变量 c, 整数型, , , 
.局部变量 代码, 逻辑型, , , 
.局部变量 h1, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 头, 逻辑型, , , 
.局部变量 尾, 逻辑型, , , 

赋值 (h1, Htm)
赋值 (h1, 子文本替换 (h1, #左引号, #引号, , , 假))
赋值 (h1, 子文本替换 (h1, #右引号, #引号, , , 假))
赋值 (文本, 分割文本 (Htm, #换行符, ))
赋值 (代码, 假)
.计次循环首 (取数组成员数 (文本), c)
    赋值 (头, 不等于 (寻找文本 (文本 [c], “<%”, , 真), -1))
    赋值 (尾, 不等于 (寻找文本 (文本 [c], “%>”, , 真), -1))
    .判断开始 (头)
        .判断开始 (尾)
            赋值 (返回文本, 相加 (返回文本, 子文本替换 (子文本替换 (文本 [c], “<%”, “”, , , 真), “%>”, “”, , , 真), #换行符))
            赋值 (代码, 假)
        .默认
            赋值 (返回文本, 相加 (返回文本, 子文本替换 (文本 [c], “<%”, “”, , , 真), #换行符))
            赋值 (代码, 真)
        .判断结束
        
    .判断 (代码)
        .判断开始 (尾)
            赋值 (返回文本, 相加 (返回文本, 子文本替换 (子文本替换 (文本 [c], “<%”, “”, , , 真), “%>”, “”, , , 真), #换行符))
            赋值 (代码, 假)
        .默认
            赋值 (返回文本, 相加 (返回文本, 子文本替换 (文本 [c], “<%”, “”, , , 真), #换行符))
            赋值 (代码, 真)
        .判断结束
        
    .默认
        赋值 (返回文本, 相加 (返回文本, “写出文本(”, #引号, 子文本替换 (文本 [c], #引号, 相加 (#引号, “$字符(34)$”, #引号), , , 真), #引号, “)”, #换行符))
        赋值 (代码, 假)
    .判断结束
    
.计次循环尾 ()
返回 (返回文本)

.子程序 _选择框1_被单击, 空白型, , 
.如果 (.选中)
    赋值 (.选中, 真)
    赋值 (开启防护, 真)
    赋值 (.标题, “已开启防护”)
.否则
    赋值 (.选中, 假)
    赋值 (开启防护, 假)
    赋值 (.标题, “防护关闭中”)
.如果结束


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 脚本运行, 文本型, , 脚本执行后可获取“返回( 返回值 )”的“返回值”，也可只用于表达式计算，如：“返回( 1 + 2 )”
.参数 脚本代码, 文本型, , 



.子程序 变量插入成员, 空白型, , 将数据插入到指定数组变量的指定位置
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 插入位置, 整数型, , 位置值从 1 开始，如果小于 1 或大于第一个参数所指定数组变量的成员数目 + 1，将不会插入任何数据。
.参数 新成员值, 文本型, , 



.子程序 变量定义数组, 空白型, , 定义单维数组成员数量。
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 成员数量, 整数型, , 成员数



.子程序 变量复制数组, 空白型, , 
.参数 线程号, 整数型, , 
.参数 被复制数组, 文本型, , 
.参数 新数组名称, 文本型, , 



.子程序 变量赋值, 空白型, , 可新建变量 或 赋值
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 变量值, 文本型, , 



.子程序 变量加入成员, 空白型, , 将新成员加入到指定数组变量的尾部
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 新成员值, 文本型, , 



.子程序 变量清除数组, 空白型, , 删除指定数组变量中的所有成员。
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 



.子程序 变量取成员数, 整数型, , 
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 



.子程序 变量取值, 文本型, , 
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 



.子程序 变量删除成员, 整数型, , 返回所实际删除的成员数目。删除指定数组变量中的成员，并通过定义数组自动减少其成员数目。
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 删除位置, 整数型, , 位置值从 1 开始，如果小于 1 或大于第一个参数所指定数组变量的成员数目，将不会删除任何数据。
.参数 删除数目, 整数型, , 



.子程序 变量数组排序, 空白型, , 对指定数值数组变量内的所有数组成员进行快速排序
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 
.参数 是否从小到大, 逻辑型, , 



.子程序 变量数组清值, 空白型, , 将指定数组变量内的所有成员值全部设置为空 ""
.参数 线程号, 整数型, , 
.参数 变量名, 文本型, , 



.子程序 脚本整理, 文本型, , 整理脚本代码
.参数 代码文本, 文本型, , 



.子程序 引擎工作目录, 逻辑型, , 成功返回，真。默认为引擎环境运行目录
.参数 绝对路径, 文本型, , 例： "c:\U235"



.子程序 脚本继续, 空白型, , 脚本暂停 后 ，可通过本命令 继续执行
.参数 是否单步继续, 逻辑型, , 



.子程序 脚本进度, 文本型, , 返回 当前行号,脚本名称  注意中间有逗号！


.子程序 脚本暂停, 空白型, , 


.子程序 变量清空全局, 空白型, , 若再次执行脚本时，不需要调用前次执行中使用的全局变量，则可通过本命令清除。


.子程序 脚本编译, 逻辑型, , 成功返回,真。编译后的伪指令文件首次调用的速度略快一点！
.参数 预编译代码, 文本型, , 
.参数 输出文件名, 文本型, , 



.子程序 脚本终止, 空白型, , 


.子程序 引擎初始化, 空白型, , 启动脚本引擎。本函数也可重新启动引擎。


.子程序 调用参数个数, 整数型, , 系统调用注册的函数时，通过本命令获取参数的数量。
.参数 线程号, 整数型, , 



.子程序 调用参数值, 文本型, , 系统调用注册的函数时，通过本命令获取参数的值，或变量名。
.参数 线程号, 整数型, , 
.参数 参数编号, 整数型, , 表示第几个参数
.参数 是否取值, 逻辑型, , 真，取值。假，取变量名。



.子程序 调用错误信息, 空白型, , 调用外部函数时，本命令可传递出错信息给脚本引擎。
.参数 线程号, 整数型, , 
.参数 错误信息, 文本型, , 



.子程序 调用返回值, 空白型, , 系统调用注册的函数时，通过本命令返回函数计算后的值。
.参数 线程号, 整数型, , 
.参数 返回值, 文本型, , 预返回的值，或变量名。
.参数 是否为值, 逻辑型, , 真，表示值。假，表示变量名。



.子程序 函数注册, 空白型, , 预注册的函数，无返回值，但必须有一个整数型参数（线程号）。
.参数 函数名称, 文本型, , 
.参数 函数指针, 子程序指针, , 



.子程序 函数注销, 空白型, , 可注销任意系统内外部函数。
.参数 函数名, 文本型, , 



.子程序 脚本错误信息, 文本型, , 执行正确 返回  空白文本  ""



 ' 不属于任何一个程序集、类模块的函数：
