 ' 文件类型：Windows模块源码

 ' 程序名称：BABYTEXT
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.常量 驱动器类型_可移动磁盘, "2", 公开, 
.常量 驱动器类型_本地磁盘, "3", 公开, 
.常量 驱动器类型_网络驱动器, "4", 公开, 
.常量 驱动器类型_光盘驱动器, "5", 公开, 
.常量 驱动器类型_虚拟磁盘, "6", 公开, 
.常量 , , , 
.常量 OF_READ, "0", 公开, 以只读方式打开文件
.常量 OF_SHARE_COMPAT, "0", 公开, 文件可由多个应用程序打开多次
.常量 OF_WRITE, "1", 公开, 文件以只写模式打开
.常量 OF_READWRITE, "2", 公开, 以可读、可写的方式打开文件
.常量 OPEN_ALWAYS, "4", 公开, 
.常量 匿名常量_2696, "8", , 
.常量 OF_SHARE_EXCLUSIVE, "16", 公开, 其他任何一个程序都不能再打开这个文件
.常量 OF_SHARE_DENY_WRITE, "32", 公开, 其他程序可以读文件，但不能写文件
.常量 OF_SHARE_DENY_READ, "48", 公开, 禁止其他程序读写文件内容
.常量 OF_SHARE_DENY_NONE, "64", 公开, 可打开文件，以便由其他程序读写
.常量 OF_PARSE, "256", 公开, 填写lpReOpenBuff结构的内容，但不执行其他任何操作
.常量 OF_DELETE, "512", 公开, 删除指定的文件
.常量 , , , 
.常量 OF_CREATE, "4096", 公开, 创建指定的文件。如已经存在，则将其缩减为零长度
.常量 OF_PROMPT, "8192", 公开, 如文件不存在，则显示一个消息框，在其中列出重试和取消按钮
.常量 OF_EXIST, "16384", 公开, 通过尝试打开文件的做法，判断一个文件是否存在。如文件存在，则将其关闭。
.常量 OF_REOPEN, "32768", 公开, 打开lpReOpenBuff结构内指定的文件，而不是用lpFileName参数
.常量 FORMAT_MESSAGE_FROM_SYSTEM, "4096", , 
.常量 FORMAT_MESSAGE_ARGUMENT_ARRAY, "8192", , 
.常量 GENERIC_READ, "2147483648", , ""
.常量 GENERIC_WRITE, "1073741824", , ""
.常量 FILE_SHARE_READ, "1", , ""
.常量 FILE_SHARE_WRITE, "2", , ""
.常量 OPEN_EXISTING, "3", , 
.常量 FILE_ATTRIBUTE_NORMAL, "128", , ""
.常量 CREATE_ALWAYS, "2", , 
.常量 FILE_CURRENT, "1", , 
.常量 FILE_BEGIN, "0", , 
.常量 FILE_END, "2", , 
.常量 FILE_FLAG_DELETE_ON_CLOSE, "67108864", , ""
.常量 PAGE_READONLY, "2", , ""
.常量 PAGE_READWRITE, "4", , ""
.常量 PAGE_WRITECOPY, "8", , ""
.常量 FILE_MAP_WRITE, "2", , 
.常量 FILE_MAP_READ, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 
.常量 , , , 
.常量 , , , 
.常量 进制参数, "“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz”", 公开, 
.常量 , , , 
.常量 , , , 
.常量 STARTF_USESHOWWINDOW, "1", , 
.常量 STARTF_USESTDHANDLES, "256", , 
.常量 SW_HIDE, "0", 公开, 隐藏,并且任务栏也没有最小化图标
.常量 SW_SHOWNORMAL, "1", 公开, 用最近的大小和位置显示,激活
.常量 SW_NORMAL, "1", 公开, 同 SW_SHOWNORMAL
.常量 SW_SHOWMINIMIZED, "2", 公开, 最小化,激活
.常量 SW_SHOWMAXIMIZED, "3", 公开, 最大化,激活
.常量 SW_MAXIMIZE, "3", 公开, 同 SW_SHOWMAXIMIZED
.常量 SW_SHOWNOACTIVATE, "4", 公开, 用最近的大小和位置显示,不激活
.常量 SW_SHOW, "5", 公开, 同 SW_SHOWNORMAL
.常量 SW_MINIMIZE, "6", 公开, 最小化,不激活
.常量 SW_SHOWMINNOACTIVE, "7", 公开, 同 SW_MINIMIZE
.常量 SW_SHOWNA, "8", 公开, 同 SW_SHOWNOACTIVATE
.常量 SW_RESTORE, "9", 公开, 同 SW_SHOWNORMAL
.常量 SW_SHOWDEFAULT, "10", 公开, 同 SW_SHOWNORMAL
.常量 SW_MAX, "10", 公开, 同 SW_SHOWNORMAL
.常量 PROCESS_ALL_ACCESS, "2035711", 公开, 0x01F0FFF
.常量 INFINITE, "-1", 公开, 4294967295
.常量 , , , 
.常量 备份, "“SeBackupPrivilege”", 公开, 
.常量 启动, "“SeRestorePrivilege”", 公开, 
.常量 关机, "“SeShutdownPrivilege”", 公开, 
.常量 调试, "“SeDebugPrivilege”", 公开, 
.常量 , , , 
.常量 , , , 
.常量 GWL_WNDPROC, "-4", 公开, 
.常量 WM_MOVING, "534", , 
.常量 , , , 
.图片 动态调用代码, " ' 已保存到：D:\易语言学习\Data\BABYTEXT核心库(2009.5.24).e\动态调用代码", 公开, 
.图片 内存驱动, " ' 已保存到：D:\易语言学习\Data\BABYTEXT核心库(2009.5.24).e\内存驱动", 公开, 
.图片 笔画, " ' 已保存到：D:\易语言学习\Data\BABYTEXT核心库(2009.5.24).e\笔画", , 
.图片 , , , 
.常量 , , , 
.常量 PAGE_EXECUTE_READWRITE, "64", 公开, 
.常量 PAGE_EXECUTE_READ, "32", 公开, 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 SC_MANAGER_CREATE_SERVICE, "2", 公开, 
.常量 SERVICE_START, "16", 公开, 
.常量 SERVICE_ERROR_IGNORE, "0", 公开, 
.常量 DELETE, "65536", 公开, 
.常量 SERVICE_STOP, "32", 公开, 
.常量 SERVICE_CONTROL_STOP, "1", 公开, 
.常量 SERVICE_KERNEL_DRIVER, "1", 公开, 
.常量 SERVICE_DEMAND_START, "3", 公开, 
.常量 , , , 
.常量 , , , 
.常量 WS_EX_TRANSPARENT, "32", 公开, 
.常量 GWL_EXSTYLE, "-20", 公开, 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 SM_CXFULLSCREEN, "16", 公开, 
.常量 SM_CYFULLSCREEN, "17", 公开, 
.常量 SM_CXSCREEN, "0", 公开, 
.常量 SM_CYSCREEN, "1", 公开, 
.常量 , , , 
.常量 分割符, "“-@#$_”", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 鼠标坐标, 公开, POINTAPI,GetCursorPos
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 键名数据, 公开, 
    .成员 键名, 文本型, , , 
    .成员 类型, 整数型, , , 

数据类型 重叠操作_, 公开, OVERLAPPED
    .成员 内部保留参数, 整数型, , , Internal
    .成员 内部高位保留参数, 整数型, , , InternalHigh
    .成员 低32位, 整数型, , , offset
    .成员 高32位, 整数型, , , offsethigh
    .成员 事件句柄, 整数型, , , hevent

数据类型 内存结构, 公开, 
    .成员 进程ID, 整数型, , , 
    .成员 内存地址, 整数型, , , 
    .成员 欲写入值, 整数型, , , 

数据类型 SERVICE_STATUS, 公开, 
    .成员 dwServiceType, 整数型, , , 
    .成员 dwCurrentState, 整数型, , , 
    .成员 dwControlsAccepted, 整数型, , , 
    .成员 dwWin32ExitCode, 整数型, , , 
    .成员 dwServiceSpecificExitCode, 整数型, , , 
    .成员 dwCheckPoint, 整数型, , , 
    .成员 dwWaitHint, 整数型, , , 

数据类型 MD5_CTX, 公开, MD5_CTX数据类型
    .成员 i, 整数型, , "2", 
    .成员 buf, 整数型, , "4", 
    .成员 in, 字节型, , "64", 
    .成员 digest, 字节型, , "16", 编码

数据类型 虚拟信息, , MEMORY_BASIC_INFORMATION
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocationProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 lType, 整数型, , , 

数据类型 窗口信息, 公开, 枚举窗口信息
    .成员 窗口句柄, 整数型, 传址, , 
    .成员 进程ID, 整数型, 传址, , 
    .成员 线程ID, 整数型, 传址, , 
    .成员 窗口类名, 文本型, 传址, , 
    .成员 窗口标题, 文本型, 传址, , 

数据类型 SHFILEOPSTRUCT, 公开, 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 

数据类型 SHQUERYRBINFO, 公开, 
    .成员 结构大小, 整数型, , , 
    .成员 文件长度, 长整数型, , , 
    .成员 文件数, 长整数型, , , 

数据类型 磁盘信息_, 公开, 
    .成员 盘符, 文本型, , , 
    .成员 卷标, 文本型, , , 
    .成员 序列号, 整数型, , , 
    .成员 文件系统名称, 文本型, , , 如FAT，NTFS等。
    .成员 驱动器类型, 整数型, , , 
    .成员 磁盘总空间, 长整数型, , , 单位为字节。
    .成员 磁盘已用空间, 长整数型, , , 单位为字节。
    .成员 磁盘剩余空间, 长整数型, , , 单位为字节。

数据类型 SHITEMID, 公开, 
    .成员 cb, 整数型, , , 
    .成员 abID, 字节型, , , 

数据类型 ITEMIDLIST, 公开, 
    .成员 mkid, SHITEMID, , , 

数据类型 BROWSEINFO, , 
    .成员 hOwner, 整数型, , , 
    .成员 pidlRoot, 整数型, , , 
    .成员 pszDisplayName, 文本型, , , 
    .成员 lpszTitle, 文本型, , , 
    .成员 ulFlags, 整数型, , , 
    .成员 lpfn, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 系统时间, 公开, 
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 项目标识符列表_, 公开, ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 文件结构信息_, 公开, $(a)OFSTRUCT
    .成员 结构长度, 字节型, , , cBytes,设置成结构的长度（目前是136）
    .成员 文件盘符, 字节型, , , fFixedDisk,参见相关帮助
    .成员 错误代码, 整数型, , , nErrCode，参见相关帮助
    .成员 保留1, 整数型, , , Reserved1,保留不用
    .成员 保留2, 整数型, , , Reserved2,保留不用
    .成员 文件路径, 文本型, , "128", szPathName,文件的完整路径名

数据类型 进程信息_, 公开, MODULEENTRY32
    .成员 结构大小, 整数型, , , dwSize  一般填写548
    .成员 模块标识符, 整数型, , , th32ModuleID
    .成员 进程标识符, 整数型, , , th32ProcessID
    .成员 模块数, 整数型, , , GlblcntUsage
    .成员 进程数, 整数型, , , ProccntUsage
    .成员 模块基址, 整数型, , , modBaseAddr
    .成员 模块基址大小, 整数型, , , modBaseSize
    .成员 模块句柄, 整数型, , , hModule
    .成员 模块名称, 字节型, , "256", szModule
    .成员 文件路径, 字节型, , "260", szExePath

数据类型 创建进程返回数据类型, 公开, PROCESS_INFORMATION
    .成员 进程句柄, 整数型, , , hProcess
    .成员 主线程句柄, 整数型, , , hThread
    .成员 进程ID, 整数型, , , dwProcessId
    .成员 主线程ID, 整数型, , , dwThreadId

数据类型 启动信息数据, 公开, STARTUPINFO
    .成员 结构长度, 整数型, , , cb
    .成员 lpReserved, 整数型, , , lpReserved
    .成员 lpDesktop, 整数型, , , lpDesktop
    .成员 lpTitle, 整数型, , , lpTitle
    .成员 窗口位置X, 整数型, , , dwX
    .成员 窗口位置Y, 整数型, , , dwY
    .成员 宽度, 整数型, , , dwXSize
    .成员 高度, 整数型, , , dwYSize
    .成员 dwXCountChars, 整数型, , , dwXCountChars
    .成员 dwYCountChars, 整数型, , , dwYCountChars
    .成员 dwFillAttribute, 整数型, , , dwFillAttribute
    .成员 标记, 整数型, , , dwFlags
    .成员 ShowWindow, 整数型, , , ShowWindo标记
    .成员 cbReserved2, 整数型, , , cbReserved2
    .成员 lpReserved2, 整数型, , , lpReserved2
    .成员 hStdInput, 整数型, , , hStdInput
    .成员 hStdOutput, 整数型, , , hStdOutput
    .成员 hStdError, 整数型, , , hStdError

数据类型 LuID, 公开, 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 空闲时间, 公开, 取空闲时间
    .成员 Size, 空白型, , , 结构大小
    .成员 Time, 空白型, , , 

数据类型 进程权限, 公开, From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 OSVERSIONINFO, 公开, 
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 
    .成员 szCSDVersion, 字节型, , "128", 

数据类型 WSADATA, 公开, 
    .成员 wVersion, 短整数型, , , 
    .成员 wHighVersion, 短整数型, , , 
    .成员 szDescription, 字节型, , "257", 
    .成员 szSystemStatus, 字节型, , "129", 
    .成员 imaxsockets, 短整数型, , , 
    .成员 imaxudp, 短整数型, , , 
    .成员 lpszvenderinfo, 整数型, , , 

数据类型 HOSTENT, 公开, 
    .成员 hName, 整数型, , , 
    .成员 hAliases, 整数型, , , 
    .成员 hAddrType, 短整数型, , , 
    .成员 hLen, 短整数型, , , 
    .成员 hAddrList, 整数型, , , 


.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", 公开, , Sleep
    .参数 延迟毫秒数, 整数型, , 毫秒

.DLL命令 MessageBoxA, 整数型, "", "MessageBoxA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 提示信息, 文本型, , 
    .参数 窗口标题, 文本型, , 
    .参数 按钮值, 整数型, , 

.DLL命令 GetActiveWindow, 整数型, "user32.dll", "GetActiveWindow", 公开, 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值

.DLL命令 LocalAlloc, 整数型, "", "LocalAlloc", 公开, 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 RtlMoveMemory_读文本, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 文本型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读整数, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 整数型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读字节集, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 字节集, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_读字节, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 目标数据, 字节型, 传址, 
    .参数 原数据, 整数型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 CharLowerA, 文本型, "", "CharLowerA", 公开, CharUpperA 将文本中的大写英文字母变换为小写，返回变换后的结果文本。
    .参数 欲变换的文本, 文本型, , 

.DLL命令 CharUpperA, 文本型, "", "CharUpperA", 公开, CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。
    .参数 欲变换的文本, 文本型, , 

.DLL命令 RtlFillMemory_字节, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 字节型, , 

.DLL命令 RtlFillMemory_字节集, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 字节集, , 

.DLL命令 RtlFillMemory_文本, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 文本型, , 

.DLL命令 RtlFillMemory_整数, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 
    .参数 指针地址, 整数型, , 指针地址
    .参数 长度, 整数型, , 长度
    .参数 写入数据, 整数型, , 

.DLL命令 lstrcpyn_内存结构, 整数型, "kernel32.dll", "lstrcpyn", 公开, 取内存变量地址2_,
    .参数 数据1, 内存结构, 传址, lpString1
    .参数 数据2, 内存结构, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_文本型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_字节型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_双精型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_子程序子针, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_长整数型, 整数型, "kernel32.dll", "lstrcpyn", 公开, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrlenA, 整数型, "kernel32.dll", "lstrlenA", 公开, 
    .参数 文本, 文本型, , Ptr

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", 公开, GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD; user32.dll

.DLL命令 GetProcAddress, 整数型, "kernel32.dll", "GetProcAddress", 公开, ,GetProcAddress 如果GetProcAddress执行成功，则返回模块中函数入口处的地址，否则返回nil。
    .参数 模块句柄, 整数型, , hModule
    .参数 进程名称, 文本型, , lpProcName

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", 公开, 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 CallWindowProcB, 整数型, "user32.dll", "CallWindowProcA", 公开, CallWindowProcA
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 StrTrimA, 整数型, "shlwapi.dll", "StrTrimA", 公开,  StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234

.DLL命令 LocalFree, 整数型, "", "", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 StrToInt64ExA, 整数型, "shlwapi.dll", "StrToInt64ExA", 公开, 十六进制转十进制增强_StrToInt64ExA  成功返回1(非0) 失败返回0 可以判断是不是输入的不是 O到9  A到F
    .参数 转换文本, 文本型, , pszString  一般为 如果标志为0的话 则直接填写 转换文本 如果标志为1的话 转换文本="0x"+转换文本
    .参数 标志, 整数型, , dwFlags 标志为0则为10进制 标志为1则为十六进制
    .参数 返回值, 整数型, 传址, piRet

.DLL命令 GetFileTitleA, 空白型, "comdlg32.dll", "GetFileTitleA", , 返回文件名
    .参数 lpszFile, 文本型, , 
    .参数 lpszTitle, 文本型, , 
    .参数 cbBuf, 短整数型, , 

.DLL命令 GetCurrentDirectoryA, 整数型, "kernel32.dll", "GetCurrentDirectoryA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 PathFileExistsA, 逻辑型, "shlwapi.dll", "PathFileExistsA", , 检测文件是否存在，0不存在, 1存在
    .参数 pszPath, 文本型, , 文件名（含路径）

.DLL命令 GetShortPathNameA, 整数型, "kernel32.dll", "GetShortPathNameA", 公开, 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度
    .参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定
    .参数 缓冲区, 文本型, , lpszShortPath String，指定一个缓冲区，用于装载文件的短路径和文件名
    .参数 缓冲区长度, 整数型, , cchBuffer Long，lpszShortPath缓冲区长度

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, ，0不存在, 16存在
    .参数 目录名, 文本型, , 目录名（含路径） pszPath

.DLL命令 WritePrivateProfileStringA_创建或修改配置文件, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 创建或修改配置文件,如果配置文件不存在则将被创建
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 文本型, , 就是等号后面的内容
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 GetPrivateProfileStringA_读配置文本, 整数型, "kernel32.dll", "GetPrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 默认值, 文本型, , 可以为“”
    .参数 缓冲容器, 文本型, , 一般将容器的大小设定为255
    .参数 缓冲容积, 整数型, , 应与缓冲容器的大小相等255
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 WritePrivateProfileStringA_删配置文件项, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 WritePrivateProfileStringA_删配置文件小节, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 整数型, , 0
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 GetPrivateProfileSectionA_取指定小节所有项名和值的一个列表, 整数型, "kernel32.dll", "GetPrivateProfileSectionA", , 获取指定小节所有项名和值的一个列表  装载到lpReturnedString缓冲区的字符数量。如缓冲区的容量不够大，不能容下所有信息，就返回nSize-2
    .参数 lpAppName, 文本型, , 欲获取的小节。注意这个字串不区分大小写
    .参数 lpReturnedString, 字节集, , 项和值字串的列表。每个字串都由一个NULL字符分隔，最后一个字串后面用两个NULL字符中止
    .参数 nSize, 整数型, , lpReturned缓冲区的大小。在windows系统中最大值为32767
    .参数 lpFileName, 文本型, , 初始化文件的名字。如没有指定完整路径名，windows就在Windows目录中查找文件;

.DLL命令 GetPrivateProfileSectionNamesA_字节集, 整数型, "kernel32.dll", "GetPrivateProfileSectionNamesA", , 
    .参数 lpszReturnBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpFileName, 文本型, , 

.DLL命令 GetCommandLineA, 文本型, "kernel32.dll", "GetCommandLineA", 公开, Win32程序的命令行参数  命令行参数的方法是使用 Api - GetCommandLine，它没有输入参数，返回的是指向命令行的指针，返回的字符串中，包含执行文件的文件名

.DLL命令 SetEnvironmentVariableA, 整数型, "kernel32.dll", "SetEnvironmentVariableA", 公开, 置环境变量值 TRUE（非零）表示成功，否则返回零
    .参数 环境字串名称, 文本型, , 
    .参数 价值, 文本型, , 

.DLL命令 GetModuleFileNameA, 整数型, "kernel32.dll", "GetModuleFileNameA", 公开, GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
    .参数 模块句柄, 整数型, , 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄一般填写0
    .参数 文件名缓冲区, 文本型, , 指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，hModule模块就是从这个文件装载进来的
    .参数 缓冲区大小, 整数型, , 装载到缓冲区lpFileName的最大字符数量;

.DLL命令 ExpandEnvironmentStringsA, 整数型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 
    .参数 c, 整数型, , 

.DLL命令 IsWindow, 整数型, "user32.dll", "IsWindow", , 判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 窗口句柄, 整数型, , 待检查窗口的句柄

.DLL命令 IsZoomed, 整数型, "user32.dll", "IsZoomed", 公开, IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
    .参数 窗口句柄, 整数型, , hwnd,欲测试的窗口的句柄

.DLL命令 SetFocus, 整数型, "user32.dll", "SetFocus", 公开, SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
    .参数 窗口句柄, 整数型, , hWnd

.DLL命令 IsWindowVisible, 整数型, "user32.dll", "IsWindowVisible", 公开, , 判断窗口是否可见   0 为隐藏 1为显示
    .参数 窗口句柄, 整数型, , hwnd,要测试的那个窗口的句柄

.DLL命令 FindWindowExA, 整数型, "user32.dll", "FindWindowExA", 公开, , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
    .参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"

.DLL命令 FindWindowA, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 FindWindowA_标题, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 FindWindowA_类名, 整数型, "user32.dll", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 整数型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 BringWindowToTop, 整数型, "user32.dll", "BringWindowToTop", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.DLL命令 SetWindowTextA, 整数型, "user32.dll", "SetWindowTextA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 GetWindowTextA, 整数型, "user32.dll", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 文本, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 文本长度, 整数型, , lp缓冲区的长度;  

.DLL命令 GetWindowTextLengthA, 整数型, "user32.dll", "GetWindowTextLengthA", 公开, 
    .参数 窗口句柄, 整数型, , 

.DLL命令 LockWindowUpdate, 整数型, "user32.dll", "LockWindowUpdate", 公开, LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
    .参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁

.DLL命令 ShowWindow, 整数型, "user32.dll", "ShowWindow", 公开, 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 窗口句柄, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 窗口状态, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;0隐藏窗口，活动状态给令一个窗口;1与9相同;2最小化窗口，并将其激活;3最大化窗口，并将其激活;4用最近的大小和位置显示一个窗口，同时不改变活动窗口;5用当前的大小和位置显示一个窗口，同时令其进入活动状态;6最小化窗口，活动状态给令一个窗口;7最小化一个窗口，同时不改变活动窗口;8用当前的大小和位置显示一个窗口，不改变活动窗口;9用原来的大小和位置显示一个窗口，同时令其进入活动状态;

.DLL命令 MoveWindow, 整数型, "user32.dll", "MoveWindow", 公开, MoveWindow
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 新高度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 SetWindowPos, 整数型, "user32.dll", "SetWindowPos", , Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , Long，欲定位的窗口
    .参数 定位类型, 整数型, , Long，窗口句柄。 取－1表示在最顶层显示窗口，取1表示在最底层显示；  在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
    .参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
    .参数 窗口新高度, 整数型, , Long，指定新的窗口高度
    .参数 显示方式, 整数型, , Long参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 ，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等

.DLL命令 GetFocus, 整数型, "user32.dll", "GetFocus", 公开, GetFocus，获得拥有输入焦点的窗口的句柄

.DLL命令 SetParent, 整数型, "user32.dll", "SetParent", 公开, SetParent返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
    .参数 子窗口句柄, 整数型, , hWndChild
    .参数 新的父窗口句柄, 整数型, , hWndNewParent

.DLL命令 SetForegroundWindow, 整数型, "user32.dll", "SetForegroundWindow", 公开, SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.DLL命令 IsIconic, 整数型, "user32.dll", "IsIconic", 公开, IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd,待检测窗口的句柄

.DLL命令 EnableWindow, 整数型, "user32.dll", "EnableWindow", 公开, EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 整数型, , fEnable，非零允许，零禁止

.DLL命令 GetWindowLongA, 整数型, "user32.dll", "GetWindowLongA", 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 SetWindowLongA, 整数型, "user32.dll", "SetWindowLongA", 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 SetLayeredWindowAttributes, 整数型, "user32.dll", "SetLayeredWindowAttributes", 公开, SetLayeredWindowAttributes 设置窗口透明度
    .参数 窗口句柄, 整数型, , 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
    .参数 颜色值, 整数型, , crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
    .参数 透明度, 整数型, , 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
    .参数 透明方式, 整数型, , dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。

.DLL命令 GetOpenClipboardWindow, 整数型, "user32.dll", "GetOpenClipboardWindow", 公开, $(b)返回打开CLIPBOARD的窗口句柄

.DLL命令 EnumWindows, 整数型, "user32.dll", "EnumWindows", 公开, 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
    .参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
    .参数 自定义数值, 整数型, , lParam,参见相关帮助

.DLL命令 SetDlgItemTextA, 整数型, "user32.dll", "SetDlgItemTextA", 公开, 该函数设置对话框中控制的文本和标题。
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 设置文本, 文本型, , lpString  

.DLL命令 GetDlgItemA, 整数型, "user32.dll", "GetDlgItemA", 公开, 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.DLL命令 GetDlgItemTextA, 整数型, "user32.dll", "GetDlgItemTextA", 公开, 该函数用于获取对话框中指定控件的标题或文本。  如果函数调用成功，返回值为拷贝到缓冲区中的 TCHAR 字符个数（不包括结束空字符）。如果函数调用失败，返回值为 0  
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
    .参数 缓冲区最大字符数, 整数型, , nMaxCount

.DLL命令 EmptyClipboard, 整数型, "user32.dll", "EmptyClipboard", 公开,  清除当前 Windows 系统剪辑板中的所有数据

.DLL命令 DestroyWindow, 整数型, "user32.dll", "DestroyWindow", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

.DLL命令 OpenIcon, 整数型, "user32.dll", "OpenIcon", 公开, 恢复被最小化或最大化的窗口
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄

.DLL命令 GetSystemMetrics, 整数型, "user32", "GetSystemMetrics", 公开, ,GetSystemMetrics
    .参数 索引, 整数型, , 

.DLL命令 GetDesktopWindow, 整数型, "user32.dll", "GetDesktopWindow", 公开, 返回屏幕句柄

.DLL命令 GetTickCount, 整数型, "kernel32.dll", "GetTickCount", 公开, GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 子程序指针, 整数型, , lpTimerFunc

.DLL命令 KillTimer, 整数型, "user32.dll", "KillTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 URLDownloadToFileA, 整数型, "urlmon.dll", "URLDownloadToFileA", , URLDownloadToFile成功返回0 失败返回-2146697211
    .参数 参数1, 整数型, , pCaller  一般为0
    .参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）
    .参数 保存到本地文件名, 文本型, , szFileName 
    .参数 参数二, 整数型, , dwReserved 一般为0
    .参数 参数三, 整数型, , lpfnCB  一般为0

.DLL命令 InternetCheckConnectionA, 整数型, "wininet.dll", "InternetCheckConnectionA", 公开, InternetCheckConnectionA ' 连接网站，成功返回非0 
    .参数 Url地址, 文本型, , lpszUrl 
    .参数 标志, 整数型, , dwFlags  一般为1
    .参数 返回值, 整数型, , dwReserved 一般为0

.DLL命令 ShellExecuteA, 整数型, "", "ShellExecuteA", 公开, 执行命令
    .参数 窗口句柄, 整数型, , 父窗口句柄,可为0 hwnd   0  指定一个窗口的句柄，有时候，windows程序有必要在创建自己的主窗口前显示一个消息框
    .参数 操作方式, 文本型, , lpOperation“open”  指定字串“open”来打开lpFlie文档，或指定“Print”来打印它
    .参数 链接地址, 文本型, , lpFile要打开的网页地址  或 mailo:709760015@qq.com  想用关联程序打印或打开一个程序名或文件名
    .参数 命令行参数, 文本型, , lpParameters“”或"0" 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
    .参数 完整路径, 文本型, , lpDirectory“”或"0" 想使用的完整路径
    .参数 窗口显示方式, 短整数型, , nShowCmd 5或1 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.DLL命令 InternetReadFile, 整数型, "wininet.dll", "InternetReadFile", 公开, 
    .参数 Internet地址句柄, 整数型, , hFile
    .参数 数据缓冲区, 字节集, , sBuffer
    .参数 读取大小, 整数型, , lNumBytesToRead
    .参数 读取首地址, 整数型, 传址, lNumberOfBytesRead

.DLL命令 InternetOpenA, 整数型, "wininet.dll", "InternetOpenA", 公开, InternetOpen*  InetrnetOpen 初始化 WinInet.dll
    .参数 代理商名称, 文本型, , sAgent  
    .参数 存取类型, 整数型, , lAccessType  比如:1
    .参数 代理名称, 文本型, , sProxyName  比如:""
    .参数 代理地址, 文本型, , sProxyBypass 比如""
    .参数 标志, 整数型, , lFlags      比如:0

.DLL命令 InternetCloseHandle, 整数型, "wininet.dll", "InternetCloseHandle", 公开, *
    .参数 Internet句柄, 整数型, , hInet

.DLL命令 InternetOpenUrlA, 整数型, "wininet.dll", "InternetOpenUrlA", 公开, *
    .参数 Internet句柄, 整数型, , hInternetSession
    .参数 Url地址, 文本型, , lpszUrl
    .参数 头文本, 文本型, , lpszHeaders     例子:""
    .参数 头文本长度, 整数型, , dwHeadersLength  例子: 0
    .参数 标志, 整数型, , dwFlags       例子:-2147483648
    .参数 定义值, 整数型, , dwContext   例子:0

.DLL命令 HttpQueryInfoA, 整数型, "Wininet.dll", "HttpQueryInfoA", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 整数型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, 传址, 

.DLL命令 GetDiskFreeSpaceExA, 整数型, "kernel32.dll", "GetDiskFreeSpaceExA", , 
    .参数 lpDirectoryName, 文本型, , 
    .参数 lpFreeBytesAvailableToCaller, 长整数型, 传址, 
    .参数 lpTotalNumberOfBytes, 长整数型, 传址, 
    .参数 lpTotalNumberOfFreeBytes, 长整数型, 传址, 

.DLL命令 GetLogicalDriveStringsA, 整数型, "kernel32.dll", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, , 

.DLL命令 SetVolumeLabelA, 逻辑型, "kernel32.dll", "SetVolumeLabelA", , 
    .参数 lpRootPathName, 文本型, , 
    .参数 lpVolumeName, 文本型, , 

.DLL命令 GetVolumeInformationA, 整数型, "kernel32.dll", "GetVolumeInformationA", , 
    .参数 lpRootPathName, 文本型, , 
    .参数 lpVolumeNameBuffer, 文本型, , 
    .参数 nVolumeNameSize, 整数型, , 
    .参数 lpVolumeSerialNumber, 整数型, 传址, 
    .参数 lpMaximumComponentLength, 整数型, 传址, 
    .参数 lpFileSystemFlags, 整数型, 传址, 
    .参数 lpFileSystemNameBuffer, 文本型, , 
    .参数 nFileSystemNameSize, 整数型, , 

.DLL命令 SetCurrentDirectoryA, 逻辑型, "kernel32.dll", "SetCurrentDirectoryA", , 
    .参数 lpPathName, 文本型, , 

.DLL命令 GetDriveTypeA, 整数型, "kernel32.dll", "GetDriveTypeA", , 
    .参数 nDrive, 文本型, , 

.DLL命令 CreateDirectoryA, 逻辑型, "kernel32.dll", "CreateDirectoryA", , 
    .参数 lpPathName, 文本型, , 
    .参数 lpSecurityAttributes, 整数型, , 

.DLL命令 SHGetFolderLocation, 整数型, "shell32.dll", "", , 
    .参数 hwndOwner, 整数型, , 
    .参数 nFolder, 整数型, , 
    .参数 hToken, 整数型, , 
    .参数 dwReserved, 整数型, , 
    .参数 pidl, ITEMIDLIST, 传址, 

.DLL命令 SHQueryRecycleBinA, 整数型, "shell32.dll", "SHQueryRecycleBinA", , 
    .参数 根路径, 文本型, , 
    .参数 回收站询问信息, SHQUERYRBINFO, 传址, 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 PathIsDirectoryEmptyA, 逻辑型, "shlwapi.dll", "PathIsDirectoryEmptyA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 ILCreateFromPathW, 整数型, "", "ILCreateFromPathW", , 
    .参数 pwszPath, 字节集, , 

.DLL命令 SHBrowseForFolderA, 整数型, "shell32.dll", "SHBrowseForFolderA", , 
    .参数 lpBrowseInfo, BROWSEINFO, 传址, 

.DLL命令 SHGetPathFromIDListA, 整数型, "shell32.dll", "SHGetPathFromIDListA", , 
    .参数 pidl, 整数型, , 
    .参数 pszPath, 文本型, , 

.DLL命令 SHGetSpecialFolderLocation, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", , 
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 整数型, , nFolder
    .参数 结构, 项目标识符列表_, 传址, pIdl

.DLL命令 CoTaskMemFree, 空白型, "ole32.dll", "", , 
    .参数 pv, 整数型, , 

.DLL命令 SHFileOperationA, 整数型, "shell32.dll", "SHFileOperationA", , 
    .参数 文件参数, SHFILEOPSTRUCT, , 

.DLL命令 SHEmptyRecycleBinA, 空白型, "shell32.dll", "SHEmptyRecycleBinA", , 
    .参数 句柄, 整数型, , 
    .参数 pszRootPath, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 MoveFileExA, 逻辑型, "kernel32.dll", "MoveFileExA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 DeleteFileA, 整数型, "kernel32.dll", "DeleteFileA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 GetTempPathA, 整数型, "kernel32.dll", "GetTempPathA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetTempFileNameA, 整数型, "kernel32.dll", "GetTempFileNameA", , 
    .参数 lpszPath, 文本型, , 
    .参数 lpPrefixString, 整数型, , 
    .参数 wUnique, 整数型, , 
    .参数 lpTempFileName, 文本型, , 

.DLL命令 lopen, 整数型, "kernel32.dll", "_lopen", , 
    .参数 lpPathName, 文本型, , 
    .参数 iReadWrite, 整数型, , 

.DLL命令 GetFileSize, 整数型, "kernel32.dll", "GetFileSize", , 
    .参数 hFile, 整数型, , 文件号
    .参数 lpFileSizeHigh, 整数型, 传址, 

.DLL命令 CloseHandle, 整数型, "kernel32.dll", "CloseHandle", 公开, CloseHandle非零表示成功，零表示失败。
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 GetFileAttributesA, 整数型, "kernel32.dll", "GetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 SetFileAttributesA, 逻辑型, "kernel32.dll", "SetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 
    .参数 dwFileAttributes, 整数型, , 

.DLL命令 SystemTimeToVariantTime, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 
    .参数 double, 日期时间型, 传址, 

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", , 
    .参数 double, 日期时间型, , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32.dll", "FileTimeToSystemTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpSystemTime, 系统时间, 传址, 

.DLL命令 SystemTimeToFileTime, 整数型, "kernel32.dll", "SystemTimeToFileTime", , 
    .参数 lpSystemTime, 系统时间, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 GetFileTime, 整数型, "kernel32.dll", "GetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32.dll", "FileTimeToLocalFileTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpLocalFileTime, FILETIME, 传址, 

.DLL命令 LocalFileTimeToFileTime, 整数型, "kernel32.dll", "LocalFileTimeToFileTime", , 
    .参数 lpLocalFileTime, FILETIME, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 SetFileTime, 逻辑型, "kernel32.dll", "SetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 CopyFileA, 整数型, "kernel32.dll", "CopyFileA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 bFailIfExists, 整数型, , 

.DLL命令 GetMessageTime, 整数型, "user32.dll", "GetMessageTime", 公开, ,GetMessageTime

.DLL命令 GetLocalTime, 整数型, "kernel32.dll", "GetLocalTime", 公开, GetLocalTime
    .参数 系统时间格式, 系统时间, 传址, 

.DLL命令 OpenFile, 整数型, "kernel32.dll", "OpenFile", 公开, OpenFile$(b)Long，如执行成功，返回文件句柄。  打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
    .参数 文件名, 文本型, , lpFileName，欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, 传址, lpReOpenBuff，文件操作结果 文件结构信息
    .参数 操作方式, 整数型, , wStyle，操作方式  一般为32

.DLL命令 CallWindowProcC, 整数型, "user32.dll", "CallWindowProcA", , 
    .参数 子程序指针, 子程序指针, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 WriteFile, 逻辑型, "kernel32.dll", "WriteFile", , （非零）表示成功，否则返回零。
    .参数 文件句柄, 整数型, , hFile，一个文件的句柄
    .参数 数据缓冲区, 字节集, 传址, lpBuffer，要写入的一个数据缓冲区
    .参数 欲写入字节数量, 整数型, , nNumberOfBytesToWrite，要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 实际写入字节数量, 整数型, 传址, lpNumberOfBytesWritten，实际写入文件的字节数量
    .参数 特殊结构, 整数型, , lpOverlapped，倘若在指定FILE_FLAG_OVERLAPPED的前提下打开文件，这个参数就必须引用一个特殊的结构。那个结构定义了一次异步写操作。否则，该参数应置为空（将声明变为ByVal As Long，并传递零值）

.DLL命令 GetLastError, 整数型, "kernel32.dll", "GetLastError", , 

.DLL命令 FormatMessageA, 整数型, "kernel32.dll", "FormatMessageA", , 
    .参数 dwFlags, 整数型, , 
    .参数 lpSource, 整数型, , Any
    .参数 消息ID, 整数型, , 
    .参数 语言ID, 整数型, , 现在系统不支持了，置0
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区大小, 整数型, , 
    .参数 Arguments, 整数型, , 

.DLL命令 ReadFile, 整数型, "kernel32.dll", "ReadFile", , ""
    .参数 hFile, 整数型, , 文件的句柄
    .参数 lpBuffer, 字节集, 传址, 用于保存读入数据的一个缓冲区
    .参数 nNumberOfBytesToRead, 整数型, , 要读入的字符数
    .参数 lpNumberOfBytesRead, 整数型, 传址, 从文件中实际读入的字符数
    .参数 lpOverlapped, 整数型, , 如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须用这个参数引用一个特殊的结构。那个结构定义了一次异步读取操作。否则，应将这个参数设为NULL（将函数声明成ByVal As Long，并传递零值）

.DLL命令 CreateFile, 整数型, "kernel32.dll", "CreateFileA", , ""
    .参数 lpFileName, 文本型, , ""
    .参数 dwDesiredAccess, 整数型, , ""
    .参数 dwShareMode, 整数型, , ""
    .参数 lpSecurityAttributes, 整数型, , ""
    .参数 dwCreationDisposition, 整数型, , ""
    .参数 dwFlagsAndAttributes, 整数型, , ""
    .参数 hTemplateFile, 整数型, , ""

.DLL命令 SetFilePointer, 整数型, "kernel32.dll", "SetFilePointer", , ""
    .参数 hFile, 整数型, , ""
    .参数 lDistanceToMove, 整数型, , ""
    .参数 lpDistanceToMoveHigh, 整数型, 传址, ""
    .参数 dwMoveMethod, 整数型, , ""

.DLL命令 GlobalHandle, 整数型, "kernel32.dll", "GlobalHandle", , 
    .参数 wMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "kernel32.dll", "GlobalSize", , 
    .参数 hMem, 整数型, , 

.DLL命令 TerminateProcess, 整数型, "kernel32.dll", "TerminateProcess", 公开, 结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , hProcess Long，指定要中断的一个进程的句柄
    .参数 退出代码, 整数型, , uExitCode Long，进程的一个退出代码

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 访问级别, 整数型, , 2035711完全访问
    .参数 子进程继承, 整数型, , 0为子进程继承
    .参数 进程ID, 整数型, , 要打开的进程标识

.DLL命令 WindowFromPoint, 整数型, "user32.dll", "WindowFromPoint", 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄)
    .参数 X轴光标, 整数型, , 
    .参数 Y轴光标, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId  

.DLL命令 CreateToolhelp32Snapshot, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
    .参数 标志, 整数型, , lFlags  一般填写8即可
    .参数 进程标识符, 整数型, , lProcessID

.DLL命令 Module32First, 整数型, "kernel32.dll", "Module32First", 公开, Module32First  返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 进程信息_, 传址, uProcess

.DLL命令 Module32Next, 整数型, "kernel32.dll", "Module32Next", 公开, Module32Next 返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 进程信息_, 传址, uProcess

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", , GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 ExitThread, 整数型, "kernel32.dll", "ExitThread", 公开, ExitThread
    .参数 线程句柄, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "kernel32.dll", "GetCurrentProcess", 公开, GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄 一般是-1

.DLL命令 GetCurrentThread, 整数型, "kernel32.dll", "GetCurrentThread", 公开, GetCurrentThread$(b)获取当前线程的一个伪句柄  当前线程的伪句柄一般是-2

.DLL命令 GetThreadPriority, 整数型, "kernel32.dll", "GetThreadPriority", 公开, GetThreadPriority
    .参数 线程句柄, 整数型, , 线程句柄

.DLL命令 GetPriorityClass, 整数型, "kernel32.dll", "GetPriorityClass", 公开, GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 进程句柄;

.DLL命令 SetThreadPriority, 整数型, "kernel32.dll", "SetThreadPriority", 公开, $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
    .参数 线程句柄, 整数型, , hThread
    .参数 优先权, 整数型, , nPriority 例如:-2 更过自己去搜索下

.DLL命令 SetPriorityClass, 整数型, "kernel32.dll", "SetPriorityClass", 公开, $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 
    .参数 级别, 整数型, , 例如:64 更过自己去搜索下

.DLL命令 SetProcessAffinityMask, 整数型, "kernel32.dll", "SetProcessAffinityMask", 公开, 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
    .参数 进程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 SetThreadAffinityMask, 整数型, "kernel32.dll", "SetThreadAffinityMask", 公开, 设置CPU亲和性  线程句柄SetThreadAffinityMask
    .参数 线程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 CreateThread, 整数型, "kernel32.dll", "CreateThread", , 启动线程
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 SHCreateThread, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 数据, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 CreateProcessA, 整数型, "kernel32.dll", "CreateProcessA", 公开, 
    .参数 执行程序文件名, 文本型, , lpApplicationName
    .参数 参数行, 文本型, , lpCommandLine
    .参数 进程安全参数, 整数型, , lpProcessAttributes
    .参数 线程安全参数, 整数型, , lpThreadAttributes
    .参数 继承性, 逻辑型, , bInheritHandles
    .参数 创建标记, 整数型, , dwCreationFlags
    .参数 环境变量, 整数型, , lpEnvironment
    .参数 运行该子进程的初始目录, 整数型, , lpCurrentDirectory
    .参数 创建该子进程的相关参数, 启动信息数据, , lpStartupInfo
    .参数 创建后用于被创建子进程的信息, 创建进程返回数据类型, , lpProcessInformation  

.DLL命令 ExitProcess, 整数型, "kernel32.dll", "ExitProcess", 公开, 
    .参数 进程句柄, 整数型, , 

.DLL命令 ZwSuspendProcess, 整数型, "ntdll.dll", "ZwSuspendProcess", , 暂停进程
    .参数 hProcess, 整数型, , OpenProcess函数返回的进程句柄

.DLL命令 ZwResumeProcess, 整数型, "ntdll.dll", "ZwResumeProcess", , 恢复进程
    .参数 hProcess, 整数型, , OpenProcess函数返回的进程句柄

.DLL命令 WaitForSingleObject, 整数型, "kernel32.dll", "WaitForSingleObject", , 监测一个对象
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 WaitForInputIdle, 整数型, "user32.dll", "WaitForInputIdle", , 监测进程空闲
    .参数 hProcess, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 OpenProcessToken, 逻辑型, "advapi32.dll", "OpenProcessToken", , 打开过程令牌对象
    .参数 进程句柄, 整数型, , 
    .参数 权限, 整数型, , 
    .参数 令牌句柄, 整数型, 传址, 

.DLL命令 LookupPrivilegeValueA, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 AdjustTokenPrivileges, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 进程权限, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 进程权限, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 ReadProcessMemory_文本, 逻辑型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 文本型, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 ReadProcessMemory_字节集, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 ReadProcessMemory_整数, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_字节集, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_整数, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 WriteProcessMemory_文本, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 RtlMoveMemory_写文本, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 文本型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写整数, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 整数型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写字节, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 字节型, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 RtlMoveMemory_写字节集, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标数据, 整数型, , any
    .参数 原数据, 字节集, 传址, any
    .参数 尺寸, 整数型, , 

.DLL命令 GetLastInputInfo, 整数型, "", "GetLastInputInfo", , 取空闲时间
    .参数 LASTINPUTINFO, 空闲时间, 传址, 

.DLL命令 FlashWindow, 空白型, "user32.dll", "FlashWindow", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 闪动, 逻辑型, , 是否闪动窗口

.DLL命令 GetComputerNameA, 整数型, "kernel32.dll", "GetComputerNameA", , 
    .参数 lpBuffer, 文本型, , 
    .参数 nSize, 整数型, 传址, 

.DLL命令 GetVersionExA, 整数型, "kernel32.dll", "GetVersionExA", , 
    .参数 lpVersionInformation, OSVERSIONINFO, 传址, 可能为 OSVERSIONINFO 结构。

.DLL命令 MD5Update_文本, 整数型, "advapi32.dll", "MD5Update", 公开, 开始编码
    .参数 PROTO_LIST, MD5_CTX, , 
    .参数 数据, 文本型, , 也可以是字节集等
    .参数 数据长, 整数型, , 

.DLL命令 MD5Update_字节集, 整数型, "advapi32.dll", "MD5Update", 公开, 开始编码
    .参数 PROTO_LIST, MD5_CTX, , 
    .参数 数据, 字节集, , 也可以是字节集等
    .参数 数据长, 整数型, , 

.DLL命令 MD5Final, 整数型, "advapi32.dll", "MD5Final", 公开, 完成
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 MD5Init, 整数型, "advapi32.dll", "MD5Init", 公开, 初始化
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 CloseClipboard, 整数型, "user32.dll", "CloseClipboard", 公开, 0为失败

.DLL命令 OpenClipboard, 整数型, "user32.dll", "OpenClipboard", 公开, (0为失败)
    .参数 窗口句柄, 整数型, , hwnd,窗口句柄

.DLL命令 GetClipboardSequenceNumber, 整数型, "user32.dll", "GetClipboardSequenceNumber", 公开, 

.DLL命令 IsClipboardFormatAvailable, 整数型, "user32.dll", "IsClipboardFormatAvailable", 公开, (0为失败)
    .参数 wFormat, 整数型, , CF_TEXT

.DLL命令 GetClipboardData, 整数型, "user32.dll", "GetClipboardData", 公开, 返回剪贴板数据句柄 
    .参数 剪贴板格式, 整数型, , wFormat

.DLL命令 SetHandleCount_文本, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 文本, 文本型, , 

.DLL命令 SetHandleCount_字节集, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 字节集, 字节集, , 

.DLL命令 SetHandleCount_整数, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 
    .参数 整数, 整数型, , 

.DLL命令 SetHandleCount_子程序指针, 整数型, "Kernel32.dll", "SetHandleCount", 公开, 程序指针
    .参数 程序指针, 子程序指针, , 

.DLL命令 gethostbyname, 整数型, "ws2_32.dll", "gethostbyname", 公开, 
    .参数 name, 文本型, , 

.DLL命令 WSAStartup, 整数型, "wsock32.dll", "", 公开, 
    .参数 VersionReq, 整数型, , 
    .参数 WSADataReturn, WSADATA, 传址, 

.DLL命令 WSACleanup, 整数型, "ws2_32.dll", "WSACleanup", 公开, 

.DLL命令 RtlMoveMemory_HOSTENT, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 Destination, HOSTENT, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_字节型, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节型, 传址 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 ReadProcessMemory_字节型数组, 整数型, "kernel32", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 字节型, 传址 数组, 传址
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 MapVirtualKeyA, 整数型, "", "MapVirtualKeyA", 公开, 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.DLL命令 CreateServiceA, 整数型, "advapi32.dll", "CreateServiceA", 公开, 创建服务,创建服务
    .参数 hSCManager, 整数型, , SCM句柄OpenSCManager返回值
    .参数 lpServiceName, 文本型, , 指向一个以0字符结尾的表示服务名称的字符串，字符串的最大长度是256个字符字符串的最大长度是256个字符，名称中不允许使用/或者\字符（因为这些字符会和注册表的路径表示方式冲突），这个值和注册表中的键名是相对应的
    .参数 lpDisplayName, 文本型, , 指向一个以0字符结尾表示服务名称的字符串，这个名称是供用户界面程序识别函数时使用的，同样，它的最大长度也是256个字符。这个值和注册表中的DisplayName键的值是相对应的
    .参数 dwDesiredAccess, 整数型, , 指定需要访问服务的操作可以有以下取值：SERVICE_ALL_ACCESS--可以进行所有操作SERVICE_START--允许调用StartService函数来启动服SERVICE_STOP--允许调用ControlService函数来停止服务DELETE--允许调用DeleteService函数来删除服务
    .参数 dwServiceType, 整数型, , 服务的类型我们的教程中只用得到SERVICE_KERNEL_DRIVER，这个值和注册表中的Type键的值是相对应的
    .参数 dwStartType, 整数型, , 表示在什么时候启动服务，如果我们需要手动启动驱动的话，那么使用SERVICE_DEMAND_START参数，如果驱动程序需要在系统启动的时候就被启动，那么使用SERVICE_AUTO_START参数，这个取值和注册表中的Start键的取值是相对应的
    .参数 dwErrorControl, 整数型, , 表示当驱动初始化的时候出错该如何处理，取值SERVICE_ERROR_IGNORE表示忽略错误，取值SERVICE_ERROR_NORMAL表示将错误记录到系统日志中去，这个取值和注册表中的ErrorControl键值是相对应的
    .参数 lpBinaryPathName, 文本型, , 指向以0结尾的表示驱动程序文件名的字符串，这个值和注册表中的ImagePath的键值是相对应的
    .参数 lpLoadOrderGroup, 整数型, , 指向以0结尾的表示组名称的字符串，表示该驱动属于哪个组，既然我们的例子程序不属于任何组，那么这里就用NULL好了
    .参数 lpdwTagId, 整数型, , 指向一个32位的缓冲区，用来接收驱动在lpLoadOrderGroup参数指定的组中的唯一的标识，我们的例子中不需要用到这个表示，所以参数指定为NULL
    .参数 lpDependencies, 整数型, , 对于驱动程序来说，这个参数没什么用途，设置为NULL好了
    .参数 lpServiceStartName, 整数型, , 指向一个以0结尾的表示帐号名称的字符串，用于指定服务允许在哪个帐号下运行，如果服务类型是SERVICE_KERNEL_DRIVER的话，该帐号就是系统装入服务的模块名称，我们在这里使用NULL，表示由默认的模块装入
    .参数 lpPassword, 整数型, , 对于驱动程序来说，这个参数没什么用途，设置为NULL好了

.DLL命令 OpenServiceA, 整数型, "advapi32.dll", "OpenServiceA", 公开, 打开服务,
    .参数 hSCManager, 整数型, , 由CreateServiceA返回的句柄
    .参数 lpServiceName, 文本型, , 服务名称
    .参数 dwDesiredAccess, 整数型, , 983551指定需要访问服务的操作

.DLL命令 StartServiceA, 整数型, "advapi32.dll", "StartServiceA", 公开, 开始启动系统服务,开始运行服务
    .参数 服务句柄, 整数型, , CreateService返回的驱动的句柄
    .参数 dwNumServiceArgs, 整数型, , 0
    .参数 lpServiceArgVectors, 整数型, , 0

.DLL命令 CloseServiceHandle, 整数型, "advapi32.dll", "CloseServiceHandle", 公开, 关闭SC服务管理句柄_,
    .参数 SC对象句柄, 整数型, , 由OpenSCManagerA和CreateServiceA返回的句柄关闭时应关闭两个

.DLL命令 CreateFileA, 整数型, "kernel32.dll", "CreateFileA", 公开, 创建文件_,这是一个全功能的例程可打开和创建文件、管道、邮槽、通信服务、设备以及控制台 ――返回值:如执行成功则返回文件句柄.INVALID_HANDLE_VALUE表示出错会设置GetLastError.即使函数成功但若文件存在且指定了CREATE_ALWAYS 或 OPEN_ALWAYSGetLastError也会设为ERROR_ALREADY_EXISTS 例子：查看例程API程序自杀
    .参数 打开文件名, 文本型, , lpFileName要打开的文件的名字
    .参数 访问权限, 整数型, , dwDesiredAccess如果为 GENERIC_READ 表示允许对设备进行读访问;如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）;如果为零表示只允许获取与一个设备有关的信息
    .参数 共享方式, 整数型, , dwShareMode
    .参数 安全特性, 整数型, , lpSecurityAttributes是指向SECURITY_ATTRIBUTES结构的指针，指定了目录的安全属性，但要求文件系统支持如NTFS的格式。Windows 98不支持此属性，在函数调用时应设置为NULL
    .参数 创建方式, 整数型, , dwCreationDispositiondwCreationDisposition Long下述常数之一:
    .参数 文件属性, 整数型, , dwFlagsAndAttributesdwFlagsAndAttributes Long一个或多个下述常数
    .参数 从文件复制文件属性, 整数型, , hTemplateFile如果不为零则指定一个文件句柄.新文件将从这个文件中复制扩展属性

.DLL命令 ControlService, 整数型, "advapi32.dll", "ControlService", 公开, 停止系统服务_,用来停止系统服务
    .参数 hService, 整数型, , 用 OpenService 返回的句柄
    .参数 dwControl, 整数型, , 用于驱动程序的时候，这个参数总是设置为NULL
    .参数 lpServiceStatus, SERVICE_STATUS, 传址, 同上，也为NULL

.DLL命令 OpenSCManagerA, 整数型, "advapi32.dll", "OpenSCManagerA", 公开, 打开SC管理服务_,建立服务首先应用此函数打开然后再用OpenServiceA打开服务获得服务控制管理器数据库的句柄
    .参数 机器名称, 文本型, , lpMachineName用取本机名取得就是本机的名称指向需要打开的计算机名字符串，字符串以NULL结尾，如果参数指定为NULL，表示连接到本机上的SCM
    .参数 数据库名, 文本型, , lpDatabaseName指向以NULL结尾的包含SCM数据库名称的字符串，字符串应该指定为"ServicesActive"，如果参数指定为NULL，则默认打开"ServicesActive"
    .参数 数据库, 整数型, , dwDesiredAccess指定访问SCM的权限，这个参数告诉SCM我们需要进行什么样的操作，常用的取值有三个：SC_MANAGER_CREATE_SERVICESC_MANAGER_CREATE_SERVICESC_MANAGER_ALL_ACCESS

.DLL命令 DeleteService, 整数型, "advapi32.dll", "DeleteService", 公开, 删除服务,成功返回0失败返回非0
    .参数 hService, 整数型, , OpenSCManager的数据库句柄

.DLL命令 DeviceIoControl, 整数型, "kernel32.dll", "DeviceIoControl", 公开, 设备操作_,对设备执行指定的操作
    .参数 设备句柄, 整数型, , hDevice设备句柄
    .参数 控制参数, 整数型, , dwIoControlCode带有 FSCTL_ 前缀的常数.参考设备控制选项的部分列表设备控制选项的部分列表――参考DeviceIoControl函数
    .参数 参数一, 整数型, , lpInBuffer具体取决于dwIoControlCode参数.参考设备控制选项的部分列表
    .参数 参数二, 整数型, , nInBufferSize输入缓冲区的长度
    .参数 参数三, 空白型, , lpOutBuffer Anyany型根据实际需要修改 具体取决于dwIoControlCode参数.参考设备控制选项的部分列表
    .参数 参数四, 整数型, , nOutBufferSize输出缓冲区的长度
    .参数 缓冲区字节数, 整数型, , lpBytesReturned实际装载到输出缓冲区的字节数量
    .参数 OVERLAPPED结构地址, 重叠操作_, , lpOverlappedOVERLAPPED这个结构用于重叠操作.针对同步操作请用ByVal As Long传递零值

.DLL命令 VirtualQueryEx, 整数型, "kernel32", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 对象指针地址
    .参数 lpBuffer, 虚拟信息, , 返回的虚拟信息
    .参数 dwLength, 整数型, , 信息长度,已知 28

.DLL命令 VirtualProtectEx, 逻辑型, "kernel32", "VirtualProtectEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 虚拟信息.BaseAddress
    .参数 dwSize, 整数型, , 虚拟信息.RegionSize
    .参数 flNewProtect, 整数型, , 修改类型,#PAGE_EXECUTE_READWRITE 64为可读写模式
    .参数 lpflOldProtect, 整数型, 传址, 虚拟信息.Protect

.DLL命令 ShowCursor, 空白型, "", "ShowCursor ", 公开, 设置鼠标隐藏
    .参数 整数, 空白型, , 

.DLL命令 DragAcceptFiles, 整数型, "", "DragAcceptFiles", , 
    .参数 hwnd, 整数型, , 
    .参数 fAccept, 逻辑型, , 

.DLL命令 DragFinish, 整数型, "", "DragFinish", , 
    .参数 hDrop, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "", "WideCharToMultiByte", 公开, 双字到单字
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 双字符文本, 整数型, , lpWideCharStr
    .参数 双字符文本长度, 整数型, , cchWideChar
    .参数 单字文本, 空白型, , lpMultiByteStr
    .参数 单字文本长度, 整数型, , cchMultiByte
    .参数 默认宽字符文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 整数型, , lpUsedDefaultChar

.DLL命令 GetProcessHeap, 整数型, "", "GetProcessHeap", 公开, 获取调用过程堆句柄

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目标数据地址, 整数型, , lpvDest
    .参数 源数据, 整数型, , lpvSource
    .参数 尺寸, 整数型, , cbCopy

.DLL命令 HeapAlloc, 整数型, "", "HeapAlloc", 公开, HeapAlloc，从堆中分配内存
    .参数 堆栈句柄, 整数型, , hHeap
    .参数 标志, 整数型, , dwFlags
    .参数 分配大小, 整数型, , dwBytes

.DLL命令 HeapFree, 整数型, "", "HeapFree", 公开, 释放堆栈内存A
    .参数 堆栈句柄, 整数型, , hHeap
    .参数 标志, 整数型, , dwFlags
    .参数 内存块句柄, 整数型, , any，lpMem

.DLL命令 RegEnumValueA, 整数型, "advapi32.dll", "RegEnumValueA", , 零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 句柄, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 表项索引, 整数型, , 欲获取值的索引。注意第一个值的索引编号为零
    .参数 子键名, 文本型, , 用于装载位于指定索引处值名的一个缓冲区
    .参数 子键长度, 整数型, 传址, 用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 lpReserved, 整数型, , 未用设为零
    .参数 键值类型, 整数型, 传址, 值的类型，用于装载值的类型代码的变量
    .参数 键值数据, 字节集, 传址, 用于装载值数据的一个缓冲区
    .参数 键值缓寸, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 RegOpenKeyA, 整数型, "advapi32.dll", "RegOpenKeyA", , 打开一个现有的注册表项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpSubKey, 文本型, , 要打开的项名
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载（保存）打开注册表项的一个句柄;

.DLL命令 RegCloseKey, 整数型, "advapi32.dll", "RegCloseKey", , 关闭系统注册表中的一个项（或键）  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要关闭的项;

.DLL命令 RegEnumKeyA, 整数型, "advapi32.dll", "RegEnumKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpName, 文本型, 传址, 
    .参数 cbName, 整数型, , 

.DLL命令 RegDeleteValueA, 整数型, "advapi32.dll", "RegDeleteValueA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 

.DLL命令 RegQueryValueExA, 整数型, "advapi32.dll", "RegQueryValueExA", , 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegSetValueExA, 整数型, "advapi32.dll", "RegSetValueExA", , RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 
    .参数 pValueName, 文本型, , 
    .参数 Reserved, 整数型, , Long，未用，设为零
    .参数 dwType, 整数型, , 
    .参数 lpData, 文本型, 传址, 
    .参数 cbData, 整数型, , 

.DLL命令 BlockInput, 整数型, "", "BlockInput", 公开, BlockInput
    .参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.DLL命令 SetCursorPos, 整数型, "user32.dll", "SetCursorPos", 公开, 设置鼠标坐标_,,非零表示成功，零表示失败
    .参数 水平位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的水平位置
    .参数 垂直位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的垂直位置

.DLL命令 GetCursorPos, 整数型, "user32", "GetCursorPos", 公开, 取鼠标位置_
    .参数 位置, 鼠标坐标, , 

.DLL命令 SwapMouseButton, 整数型, "user32.dll", "SwapMouseButton", 公开, 鼠标左右键,,决定是否互换鼠标左右键的功能  TRUE（非零）表示鼠标按钮的功能在调用这个函数之前已经互换；否则返回零
    .参数 鼠标按钮的功能, 整数型, , 倘若为TRUE（非零），则互换两个鼠标按钮的功能。FALSE则恢复正常状态;

.DLL命令 SetCapture, 整数型, "user32", "SetCapture", 公开, 俘获鼠标_
    .参数 窗口句柄, 整数型, 传址, 

.DLL命令 ReleaseCapture, 整数型, "user32", "ReleaseCapture", 公开, 释放鼠标_

.DLL命令 mouse_event, 空白型, "user32.dll", "mouse_event", 公开, 模拟鼠标_,,mouse_event,模拟一次鼠标事件  没有返回值
    .参数 标志组合, 整数型, , dwFlags，一系列标志的组合 dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下 
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , cButtons，未使用
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 GetDoubleClickTime, 整数型, "user32", "GetDoubleClickTime", 公开, 取鼠标的双击间隔时间_,,得到鼠标的双击间隔速度  GetDoubleClickTime  一般鼠标设置的双击时间为 500 

.DLL命令 SetDoubleClickTime, 整数型, "user32", "SetDoubleClickTime", 公开, 设置鼠标的双击间隔时间_,,SetDoubleClickTime  失败返回0
    .参数 时间, 整数型, , 

.DLL命令 IsDebuggerPresent, 整数型, "kernel32.dll", "IsDebuggerPresent", 公开, 当前是否为调试版_,,非0则当前进程正在调试器的描述表中运行 否则  当前进程没有在调试器的描述表中运行

.DLL命令 ExitWindowsEx, 整数型, "user32.dll", "ExitWindowsEx", 公开, 关闭系统_,,ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
    .参数 标志, 整数型, , uFlags,指定一个或多个标志的组合uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
    .参数 保留值, 整数型, , dwReserved,保留，设为零65535

.DLL命令 SetComputerNameA, 整数型, "kernel32", "SetComputerNameA", 公开, 设置计算机名 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错 一般要重新启动才生效
    .参数 新的计算机名称, 文本型, , lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   

.DLL命令 重新启动系统设置, 整数型, "shell32.dll", "#59", 公开, #59重新启动系统设置_
    .参数 窗口句柄, 整数型, , hOwner
    .参数 额外提示, 整数型, , sExtraPrompt
    .参数 标志, 整数型, , uFlags EWX_FORCE=4 EWX_SHUTDOWN=1

.DLL命令 GetUserDefaultLangID, 整数型, "kernel32", "GetUserDefaultLangID", 公开, 取默认语言ID_,,GetUserDefaultLangID

.DLL命令 GetUserDefaultLCID, 整数型, "kernel32", "GetUserDefaultLCID", 公开, 取默认地方设置_,,GetUserDefaultLCID

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取当前用户名_,,GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator
    .参数 字串缓冲区, 文本型, , lpBuffer String，一个字串缓冲区，预先初始化成由nSize指定的长度。它将用于容纳用户名
    .参数 字串缓冲长度, 整数型, 传址, nSize  Long，初始化成lpBuffer的长度。返回以后，它会包含载入lpBuffer的字符数量

.DLL命令 GetUserNameExA, 整数型, "secur32.dll", "GetUserNameExA", 公开, 取当前用户名扩展_,,GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
    .参数 用户名格式化, 整数型, , NameFormat 一般为 NameSamCompatible=2
    .参数 用户名缓冲区, 文本型, , lpNameBuffer
    .参数 缓冲区大小, 整数型, 传址, nSize

.程序集 启程, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
.局部变量 AA, 子程序指针, , , 

 ' 输出调试文本 (文件_写到文件 (核心_取当前目录 () ＋ “\my.sys”, #内存驱动))
 ' 驱动.内存_驱动卸载 ()
 ' 输出调试文本 (驱动.内存_驱动加载 ())
 ' 驱动.内存_驱动卸载 ()
 ' 输出调试文本 (驱动.加载驱动 (核心_取当前目录 () ＋ “\my.sys”, “member”, “member”, “\\.\member”))
 ' 输出调试文本 (字节集_到十六进制文本 (到字节集 (“124”)))
 ' 输出调试文本 (核心_取随机文本 (5, 3))
 ' AA ＝ “member”
 ' AA ＝ &子程序1
 ' 输出调试文本 (地址_取子程序地址 (AA))
 ' ' 输出调试文本 (取子程序地址 (AA))

 ' ' 输出调试文本 (地址_取文本变量地址 (AA))

 ' 输出调试文本 (指针_取子程序指针 (AA))
 ' 输出调试文本 (取变量指针 (AA))
 ' 输出调试文本 (取变量数据地址 (AA))
返回 (0) ' 可以根据您的需要返回任意数值

.程序集 核心, , , 

.程序集变量 当前窗口信息, 窗口信息, , "0", 枚举出来的窗口信息
.程序集变量 当前窗口列表, 整数型, , "0", 枚举出来的窗口句柄列表
.子程序 核心_启动线程, 逻辑型, 公开, 
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程句柄, 整数型, 参考 可空, 

.局部变量 句柄, 整数型, , , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (线程句柄, 0)
赋值 (句柄, CreateThread (0, 0, 欲执行的子程序, 参数数据, 0, 0))
.如果 (是否为空 (线程句柄))
    CloseHandle (句柄)
.否则
    赋值 (线程句柄, 句柄)
.如果结束
返回 (不等于 (句柄, 0))

.子程序 核心_执行, 逻辑型, , 
.参数 文件名, 文本型, , lpFile要打开的网页地址  或 mailo:709760015@qq.com  想用关联程序打印或打开一个程序名或文件名
.参数 命令行参数, 文本型, 可空, lpParameters“”或"0" 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
.参数 窗口显示方式, 整数型, 可空, 默认1,ShowWindow参数 ,0隐藏,1显示,nShowCmd 5或1 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.局部变量 文件, 文本型, , , 
.局部变量 返回, 空白型, , , 

.如果真 (是否为空 (窗口显示方式))
    赋值 (窗口显示方式, 1)
.如果真结束
.如果真 (等于 (文本_倒找 (文件名, “\”, , 假), -1))
    赋值 (文件, 相加 (目录操作_取当前目录 (), “\”, 文件名))
.如果真结束
赋值 (返回, ShellExecuteA (0, “open”, 文件, 命令行参数, 文件, 窗口显示方式))
.如果 (等于 (返回, 2))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 核心_延时, 空白型, , 
.参数 时长, 整数型, , ms

Sleep (时长)


.子程序 核心_取命令行, 文本型, 公开, 
返回 (GetCommandLineA ())


.子程序 核心_取启动时间, 整数型, , 
返回 (GetTickCount ())

.子程序 核心_取空闲时间, 整数型, , 
.局部变量 LASTINPUTINFO, 空闲时间, , , 

赋值 (LASTINPUTINFO.Size, 8)
GetLastInputInfo (LASTINPUTINFO)
返回 (相减 (核心_取启动时间 (), LASTINPUTINFO.Time))

.子程序 核心_信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBoxA (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))


.子程序 核心_调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (CallWindowProcA (#动态调用代码, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))


.子程序 核心_取颜色值, 整数型, , 
.参数 红色, 整数型, , 数值范围从 0 到 255，表示颜色中的红色成份。
.参数 绿色, 整数型, , 数值范围从 0 到 255，表示颜色中的绿色成份。
.参数 蓝色, 整数型, , 数值范围从 0 到 255，表示颜色中的蓝色成份。

.局部变量 temp, 整数型, , , 
.局部变量 temp1, 整数型, , , 

赋值 (temp, 数值_合并短整数 (位与 (红色, 255), 位与 (绿色, 255)))
赋值 (temp1, 数值_合并整数 (temp, 位与 (蓝色, 255)))
返回 (temp1)


.子程序 核心_取当前窗口, 整数型, , 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值
返回 (GetActiveWindow ())

.子程序 核心_取屏幕句柄, 整数型, , 
.局部变量 a, 空白型, , , 

赋值 (a, GetDesktopWindow ())
返回 (a)

.子程序 核心_时间到文本, 文本型, , 将指定时间转换为文本并返回。
.参数 欲转换到文本的时间, 日期时间型, , .

.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (欲转换到文本的时间, 系统时间)
返回 (相加 (文本_整数到文本 (系统时间.年), “年”, 文本_整数到文本 (系统时间.月), “月”, 文本_整数到文本 (系统时间.日), “日”, 文本_整数到文本 (系统时间.时), “时”, 文本_整数到文本 (系统时间.分), “分”, 文本_整数到文本 (系统时间.秒), “秒”))

.子程序 核心_文本到时间, 日期时间型, , 将指定文本转换到时间日期型，如果格式不符合将出错，将返回100年1月1日。
.参数 文本, 文本型, , 目前只支持“1973年11月15日12时30分25秒”

.局部变量 位置, 整数型, , , 
.局部变量 时间, 日期时间型, , , 
.局部变量 系统时间, 系统时间, , , 

赋值 (系统时间.年, 100)
连续赋值 (1, 系统时间.月, 系统时间.日)
SystemTimeToVariantTime (系统时间, 时间)
.如果真 (不等于 (文本_寻找 (文本, “年”, , ), -1))
    赋值 (系统时间.年, 文本_到整数 (文本_取左边 (文本, 相减 (文本_寻找 (文本, “年”, , ), 1))))
    赋值 (位置, 文本_寻找 (文本, “月”, , ))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.月, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “年”, , ), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (位置, 文本_寻找 (文本, “日”, , ))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.日, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “月”, , ), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (文本, 文本_取右边 (文本, 相减 (文本_取长度 (文本), 位置, 1)))
    
    赋值 (位置, 文本_寻找 (文本, “时”, , ))
    .如果真 (不等于 (位置, -1))
        赋值 (系统时间.时, 文本_到整数 (文本_取左边 (文本, 相减 (位置, 1))))
        赋值 (位置, 文本_寻找 (文本, “分”, , ))
        .如果真 (不等于 (位置, -1))
            赋值 (系统时间.分, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “时”, , ), 2), 相减 (位置, 1))))
            赋值 (位置, 文本_寻找 (文本, “秒”, , ))
            .如果真 (不等于 (位置, -1))
                赋值 (系统时间.秒, 文本_到整数 (文本_取中间 (文本, 相加 (文本_寻找 (文本, “分”, , ), 2), 相减 (位置, 1))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 核心_终止进程, 逻辑型, , 
.参数 进程ID, 整数型, , 

.如果 (等于 (TerminateProcess (OpenProcess (2035711, 0, 进程ID), 0), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 核心_取自进程ID, 整数型, 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId 
.局部变量 返回, 整数型, , , 

赋值 (返回, GetCurrentProcessId ())
返回 (返回)

.子程序 核心_特定目录, 文本型, 公开, 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]

.局部变量 路径, 文本型, , , 
.局部变量 标示结构, 项目标识符列表_, , , 
.局部变量 目录类型, 整数型, , , 

.如果真 (等于 (欲获取目录类型, 99))
     ' 输出调试文本 (“0我的桌面 2我的程序 5我的文档 6我的收藏夹 7我的启动 8我最近的文档 9我的发送到 11我的开始菜单 13我的音乐 14我的视频 16我的桌面 20系统字体 22开始菜单组 23程序组 24启动组 25桌面 31收藏夹 32我的浏览器临时目录 33我的Cookies 34我的历史记录 36Windows安装目录 37系统目录 38文件安装目录 39我的图片 40用户目录 41系统目录 46文档 47管理工具 48我的管理工具 53音乐 54图片 55视频”)
.如果真结束
.如果 (等于 (欲获取目录类型, 1))
    赋值 (目录类型, 34)
.否则
    赋值 (目录类型, 欲获取目录类型)
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)
SHGetSpecialFolderLocation (0, 目录类型, 标示结构)
赋值 (路径, 取空白文本 (255))
SHGetPathFromIDListA (标示结构.结构大小, 路径)
.如果真 (等于 (路径, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (欲获取目录类型, 1))
    赋值 (路径, 文本_子文本替换 (路径, “History”, “Temp”, , , 真))
.如果真结束
返回 (相加 (路径, “\”))

.子程序 核心_枚举窗口, 整数型, , 枚举所有窗口,返回窗口句柄数目,失败返回0 作者:无限复活 [斩月]
.参数 句柄数组, 整数型, 参考 可空 数组, 返回的所有窗口句柄数组

清除数组 (当前窗口列表)
清除数组 (句柄数组)
EnumWindows (&核心_枚举窗口过程, 0)
赋值 (句柄数组, 当前窗口列表)
返回 (取数组成员数 (当前窗口列表))


.子程序 核心_枚举子窗口, 整数型, , 枚举指定句柄的一级子窗口,返回子窗口句柄数目,失败或无子返回0 [斩月]
.参数 父窗口, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
.参数 子窗口数组, 整数型, 参考 数组, 返回的所有符合条件的子窗口句柄
.参数 类名, 文本型, 可空, 指定子窗口类名

.局部变量 临时, 整数型, , , 

清除数组 (子窗口数组)
赋值 (临时, FindWindowExA (父窗口, 0, 类名, 0))
.判断循环首 (不等于 (临时, 0))
    加入成员 (子窗口数组, 临时)
    赋值 (临时, FindWindowExA (父窗口, 临时, 类名, 0))
.判断循环尾 ()
返回 (取数组成员数 (子窗口数组))

.子程序 核心_枚举窗口过程, 逻辑型, , [斩月]
.参数 hwnd, 整数型, , 

.如果真 (不等于 (hwnd, 0))
    加入成员 (当前窗口列表, hwnd)
    返回 (真)
.如果真结束
返回 (假)

.子程序 核心_枚举窗口信息, 整数型, , 枚举所有可见窗口的句柄的窗口信息(返回数组数目,失败返回0) 作者:无限复活 [斩月]
.参数 临时窗口信息, 窗口信息, 参考 数组, 枚举出来的窗口信息数组

清除数组 (当前窗口信息)
清除数组 (临时窗口信息)
EnumWindows (&核心_窗口信息回调函数, 0)
赋值 (临时窗口信息, 当前窗口信息)
返回 (取数组成员数 (当前窗口信息))


.子程序 核心_窗口信息回调函数, 空白型, , [斩月]
.参数 hwd, 整数型, , 

.局部变量 窗口标题, 文本型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 临时窗口信息, 窗口信息, , , 

.如果真 (不等于 (IsWindowVisible (hwd), 0)) ' 是否为可见窗口
    赋值 (窗口标题, 文本_取空白 (256))
    赋值 (窗口类名, 文本_取空白 (256))
    GetWindowTextA (hwd, 窗口标题, 255)
    GetClassNameA (hwd, 窗口类名, 255)
    赋值 (线程ID, GetWindowThreadProcessId (hwd, 进程ID))
    赋值 (临时窗口信息.进程ID, 进程ID)
    赋值 (临时窗口信息.线程ID, 线程ID)
    赋值 (临时窗口信息.窗口句柄, hwd)
    赋值 (临时窗口信息.窗口类名, 窗口类名)
    赋值 (临时窗口信息.窗口标题, 窗口标题)
    加入成员 (当前窗口信息, 临时窗口信息)
.如果真结束


.子程序 核心_枚举进程, 整数型, , 失败返回0，成功返回进程数量(该命令为高级成员命令) 作者:无限复活 [斩月]
.参数 进程信息, 进程信息_, 参考 可空 数组, 返回的进程信息 数组

.局部变量 信息, 进程信息_, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

清除数组 (进程信息)
赋值 (进程快照, CreateToolhelp32Snapshot (15, 0))
.如果真 (等于 (进程快照, 0))
    返回 (0)
.如果真结束
赋值 (信息.结构大小, 1024)
赋值 (进程句柄, Module32First (进程快照, 信息))
.判断循环首 (不等于 (进程句柄, 0))
    加入成员 (进程信息, 信息)
    赋值 (进程句柄, Module32Next (进程快照, 信息))
.判断循环尾 ()
CloseHandle (进程快照)
返回 (取数组成员数 (进程信息))

.子程序 核心_域名取IP, 文本型, , 根据指定的机器名取IP地址。失败返回空。本命令为超级命令。
.参数 域名, 文本型, , 要取得IP地址的机器名。

.局部变量 WSAD, WSADATA, , , 
.局部变量 lpHost, 整数型, , , 
.局部变量 HOST, HOSTENT, , , 
.局部变量 dwIPAddr, 整数型, , , 
.局部变量 tmpIPAddr, 字节型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 sIPAddr, 文本型, , , 

.如果真 (等于 (WSAStartup (514, WSAD), 0))
    赋值 (lpHost, gethostbyname (域名))
    .如果真 (不等于 (lpHost, 0))
        RtlMoveMemory_HOSTENT (HOST, lpHost, 16)
        RtlMoveMemory_读整数 (dwIPAddr, HOST.hAddrList, 4)
        重定义数组 (tmpIPAddr, 假, HOST.hLen)
        RtlMoveMemory_字节型 (tmpIPAddr, dwIPAddr, HOST.hLen)
        .计次循环首 (HOST.hLen, i)
            .如果 (等于 (i, HOST.hLen))
                赋值 (sIPAddr, 相加 (sIPAddr, 到文本 (tmpIPAddr [i])))
            .否则
                赋值 (sIPAddr, 相加 (sIPAddr, 到文本 (tmpIPAddr [i]), “.”))
            .如果结束
            
        .计次循环尾 ()
    .如果真结束
    
.如果真结束

WSACleanup ()
返回 (sIPAddr)

.子程序 核心_取当前目录, 文本型, , 
.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 

赋值 (长度, GetCurrentDirectoryA (长度, 路径))
赋值 (路径, 文本_取空白 (长度))
返回 (选择 (不等于 (GetCurrentDirectoryA (长度, 路径), 0), 路径, “”))

.子程序 核心_分割文本, 整数型, , 将指定文本进行分割，返回分割后的一维文本数组下标。本命令为初级命令。
.参数 返回数组, 文本型, 参考 数组, 返回分割后的文本数组，请提供变量
.参数 待分割文本, 文本型, , “待分割文本”，类型为“文本型（text）”。如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组。
.参数 用作分割的文本, 文本型, 可空, “用作分割的文本”，类型为“文本型（text）”，可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”

.局部变量 lpString, 文本型, , , 
.局部变量 z1, 整数型, , , 
.局部变量 z2, 整数型, , , 

清除数组 (返回数组)
.如果真 (等于 (待分割文本, “”))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的文本))
    赋值 (用作分割的文本, “,”)
.如果真结束
赋值 (z1, 1)
赋值 (z2, 文本_寻找 (待分割文本, 用作分割的文本, , 假))
.判断循环首 (不等于 (z2, -1))
    赋值 (lpString, 文本_取中间 (待分割文本, z1, 相减 (z2, z1)))
    加入成员 (返回数组, lpString)
    赋值 (z1, 相加 (z2, 1))
    赋值 (z2, 文本_寻找 (待分割文本, 用作分割的文本, z1, 假))
.判断循环尾 ()
加入成员 (返回数组, 文本_取右边 (待分割文本, 相加 (相减 (文本_取长度 (待分割文本), z1), 1)))
返回 (取数组成员数 (返回数组))

.子程序 核心_取随机数, 整数型, , 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
.参数 起始数值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
.参数 结束数值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为无限。

置入代码 ({ 81, 82, 15, 49, 105, 192, 253, 67, 3, 0, 5, 195, 158, 38, 0, 193, 232, 16, 37, 255, 127, 0, 0, 139, 77, 16, 133, 201, 117, 5, 185, 255, 255, 255, 127, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 139, 229, 93, 194, 16, 0 })
返回 (0)

.子程序 核心_取随机文本, 文本型, , 
.参数 文本长度, 整数型, , 
.参数 生成类型, 整数型, , 1、数字 2、字母 3、数字加字母

.局部变量 文本, 文本型, , , 

.计次循环首 (文本长度, )
    .判断开始 (等于 (生成类型, 1))
        赋值 (文本, 相加 (文本, 文本_整数到文本 (核心_取随机数 (0, 9))))
    .判断 (等于 (生成类型, 2))
        赋值 (文本, 相加 (文本, 文本_字符 (核心_取随机数 (97, 122))))
    .判断 (等于 (生成类型, 3))
        .如果 (等于 (核心_取随机数 (1, 2), 1))
            赋值 (文本, 相加 (文本, 文本_整数到文本 (核心_取随机数 (0, 9))))
        .否则
            赋值 (文本, 相加 (文本, 文本_字符 (核心_取随机数 (97, 122))))
        .如果结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
返回 (文本)

.子程序 核心_取子程序地址, 整数型, , 
.参数 子程序指针, 子程序指针, , 

返回 (SetHandleCount_子程序指针 (子程序指针))

.子程序 核心_是否为调试版, 逻辑型, 公开, IsDebuggerPresent 为真则当前进程正在调试器的描述表中运行否则  当前进程没有在调试器的描述表中运行 IsDebuggerPresent
.局部变量 a, 空白型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (a, IsDebuggerPresent ())
.如果 (等于 (a, 0))
    赋值 (返回, 假)
.否则
    赋值 (返回, 真)
.如果结束
返回 (返回)

.程序集 文本, , , 

.子程序 文本_取空白, 文本型, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
RtlFillMemory_字节 (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)


.子程序 文本_取长度, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrlenA (文本))


.子程序 文本_字符, 文本型, , 
.参数 欲取其字符的字符代码, 字节型, , 

.局部变量 address, 整数型, , , 

赋值 (address, 指针_取字节型指针 (欲取其字符的字符代码))
返回 (文本_字节集到文本 (指针到字节集 (address, 1)))

.子程序 文本_取代码, 整数型, , 
.参数 欲取字符代码的文本, 文本型, , 
.参数 欲取其代码的字符位置, 整数型, 可空, 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 
.局部变量 ret, 整数型, , , 

赋值 (len, 文本_取长度 (欲取字符代码的文本))
.如果真 (是否为空 (欲取其代码的字符位置))
    赋值 (欲取其代码的字符位置, 1)
.如果真结束
.如果真 (或者 (大于 (欲取其代码的字符位置, len), 小于 (欲取其代码的字符位置, 1)))
    返回 (0)
.如果真结束
赋值 (address, 指针_取文本型指针 (欲取字符代码的文本))
RtlMoveMemory_读整数 (ret, 相减 (相加 (address, 欲取其代码的字符位置), 1), 1)
返回 (ret)

.子程序 文本_到整数, 整数型, , 
.参数 文本, 文本型, , 

.局部变量 ret, 长整数型, , , 

StrToInt64ExA (文本, 0, ret)
返回 (ret)

.子程序 文本_到大写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharUpperA (aaa))


.子程序 文本_到小写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharLowerA (aaa))


.子程序 文本_字节集到文本, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ret, 文本型, , , 
.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (字节集, { 0 }))
返回 (指针到文本 (指针_取字节集指针 (temp)))

.子程序 文本_整数到文本, 文本型, 公开, ' 这里只是个测试，其实用汇编是很简单的。哈哈～～，来个动态调用API吧。
.参数 整数, 整数型, , 

.局部变量 ret, 文本型, , , 
.局部变量 address, 空白型, , , 
.局部变量 参数, 整数型, , "3", 

赋值 (ret, 文本_取空白 (20))
赋值 (address, GetProcAddress (GetModuleHandleA (“user32.dll”), “wsprintfA”))
赋值 (参数 [1], 指针_取文本型指针 (ret))
赋值 (参数 [2], 指针_取文本型指针 (“%d”))
赋值 (参数 [3], 整数)
核心_调用子程序 (address, 参数, 真)
返回 (ret)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 文本_删首尾空, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
赋值 (temp, 处理文本首全角 (aaa))
赋值 (temp1, 处理文本尾全角 (temp))
StrTrimA (temp1, “ ”)
返回 (temp1)


.子程序 文本_倒找, 整数型, , 返回一个整数值，指定一文本在另一文本中最后出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为从被搜寻文本的尾部开始。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 207, 0, 0, 0, 131, 249, 0, 126, 117, 139, 85, 244, 137, 203, 139, 117, 12, 232, 189, 0, 0, 0, 131, 249, 0, 126, 99, 139, 69, 20, 133, 192, 116, 12, 139, 69, 16, 131, 248, 0, 126, 84, 57, 216, 118, 2, 137, 216, 57, 193, 119, 74, 73, 137, 77, 248, 1, 77, 244, 1, 194, 74, 41, 200, 137, 69, 252, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 78, 227, 43, 138, 7, 79, 73, 232, 140, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 78, 79, 232, 115, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 67, 139, 69, 252, 64, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 170, 71, 73, 235, 239, 132, 219, 116, 34, 139, 117, 12, 139, 54, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 133, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 12, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)


.子程序 文本_寻找, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为 1 。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 204, 0, 0, 0, 131, 249, 0, 126, 111, 139, 85, 244, 137, 203, 139, 117, 12, 232, 186, 0, 0, 0, 131, 249, 0, 126, 93, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 73, 73, 137, 77, 248, 41, 203, 137, 93, 252, 137, 93, 240, 1, 194, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 70, 227, 43, 138, 7, 71, 73, 232, 143, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 70, 71, 232, 118, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 70, 139, 69, 16, 3, 69, 240, 43, 69, 252, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 165, 71, 73, 235, 239, 132, 219, 116, 32, 139, 117, 244, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 130, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 16, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)

.子程序 文本_取左边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取左边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_取右边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取右边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_取中间, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取中间 (temp, 起始取出位置, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_分割, 整数型, , 返回实际的组数
.参数 待分割文本, 文本型, , 如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的文本, 文本型, 可空, 可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”
.参数 要返回的子文本数目, 整数型, 可空, 可以被省略。如果被省略，则默认返回所有的子文本
.参数 返回的文本数组, 文本型, 数组, 将指定文本进行分割，分割后的一维文本数组以参考方式传递

.局部变量 临时字节集数组, 字节集, , "0", 
.局部变量 用作分割的字节集, 字节集, , , 
.局部变量 temp, 字节集, , , 
.局部变量 count, 整数型, , , 
.局部变量 i, 整数型, , , 

清除数组 (返回的文本数组)
.如果真 (等于 (待分割文本, “”))
    返回 (0)
.如果真结束
.如果 (是否为空 (用作分割的文本))
    赋值 (用作分割的文本, “,”)
.否则
    .如果真 (等于 (用作分割的文本, “”))
        加入成员 (返回的文本数组, 待分割文本)
        返回 (1)
    .如果真结束
    
.如果结束
赋值 (temp, 字节集_文本到字节集 (待分割文本))
赋值 (用作分割的字节集, 字节集_文本到字节集 (用作分割的文本))
赋值 (count, 字节集_分割 (temp, 用作分割的字节集, 要返回的子文本数目, 临时字节集数组))
.计次循环首 (count, i)
    加入成员 (返回的文本数组, 文本_字节集到文本 (临时字节集数组 [i]))
.计次循环尾 ()
返回 (count)


.子程序 文本_字节型数组到文本, 文本型, , 
.参数 字节型, 字节型, 数组, 

.局部变量 address, 整数型, , , 

赋值 (address, 指针_取字节型指针 (字节型 [1]))
返回 (指针到文本 (address))


.子程序 文本_取重复文本, 文本型, , 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的文本, 文本型, , 

.局部变量 temp, 文本型, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的文本))
.计次循环尾 ()
返回 (temp)


.子程序 文本_文本替换, 文本型, , 将指定文本的某一部分用其它的文本替换，然后返回替换后的结果。
.参数 欲替换其部分的文本, 文本型, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的文本, 文本型, 可空, 可以被省略。如果本参数被省略，则删除文本中的指定部分。

.局部变量 len_x, 整数型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 temp2, 文本型, , , 

.如果真 (等于 (欲替换其部分的文本, “”))
    返回 (“”)
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (len_x, 文本_取长度 (欲替换其部分的文本))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (temp1, 文本_取左边 (欲替换其部分的文本, 相减 (起始替换位置, 1)))
赋值 (temp2, 文本_取右边 (欲替换其部分的文本, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的文本, temp2))


.子程序 文本_子文本替换, 文本型, , 返回一个文本，该文本中指定的子文本已被替换成另一子文本，并且替换发生的次数也是被指定的。
.参数 欲被替换的文本, 文本型, , 
.参数 欲被替换的子文本, 文本型, , 
.参数 用作替换的子文本, 文本型, 可空, 可以被省略。如果本参数被省略，默认为空文本。
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
.参数 是否区分大小写, 逻辑型, 可空, 初始值为“真”。为真区分大小写，为假不区分。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 文本型, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (是否为空 (是否区分大小写))
    赋值 (是否区分大小写, 真)
.如果真结束
.如果真 (或者 (等于 (欲被替换的文本, “”), 等于 (欲被替换的子文本, “”)))
    返回 (“”)
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 文本_找子 (欲被替换的文本, 欲被替换的子文本, offset, 进行替换的起始位置, 是否区分大小写))
.如果真 (等于 (count, 0))
    返回 (欲被替换的文本)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的文本)
赋值 (len, 文本_取长度 (欲被替换的子文本))
赋值 (偏移, 相减 (文本_取长度 (用作替换的子文本), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 文本_文本替换 (ret, offset [i], len, 用作替换的子文本))
    .否则
        赋值 (ret, 文本_文本替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子文本))
    .如果结束
    
.计次循环尾 ()
返回 (ret)



.子程序 文本_找子, 整数型, , 
.参数 x, 文本型, , 
.参数 y, 文本型, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 
.参数 区分大小写, 逻辑型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 文本_取长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 文本_寻找 (x, y, j, 取反 (区分大小写)))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 处理文本首全角, 文本型, , 
.参数 文本, 文本型, , 

置入代码 ({ 86, 49, 219, 139, 117, 8, 139, 54, 86, 133, 246, 116, 50, 138, 30, 132, 219, 116, 44, 128, 251, 32, 116, 10, 128, 251, 161, 116, 8, 233, 29, 0, 0, 0, 70, 235, 232, 102, 139, 30, 102, 129, 251, 161, 161, 116, 5, 233, 11, 0, 0, 0, 102, 187, 32, 32, 102, 137, 30, 70, 70, 235, 206, 88, 94, 201, 194, 4, 0 })
返回 (“”)


.子程序 处理文本尾全角, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 len, 整数型, , , 

赋值 (len, 文本_取长度 (文本))
置入代码 ({ 86, 49, 219, 139, 117, 8, 139, 54, 139, 77, 252, 73, 86, 133, 246, 116, 54, 131, 249, 255, 116, 49, 138, 28, 14, 128, 251, 32, 116, 10, 128, 251, 161, 116, 8, 233, 31, 0, 0, 0, 73, 235, 230, 73, 102, 139, 28, 14, 102, 129, 251, 161, 161, 116, 5, 233, 11, 0, 0, 0, 102, 187, 32, 32, 102, 137, 28, 14, 78, 235, 202, 88, 94, 201, 194, 4, 0 })
返回 (“”)


.子程序 文本_删全部空, 文本型, , 返回一个文本，其中包含被删除了所有全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 欲删除空格的文本)
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 41, 138, 30, 132, 219, 116, 35, 128, 251, 32, 116, 8, 128, 251, 161, 116, 6, 136, 31, 71, 70, 235, 234, 102, 139, 30, 102, 129, 251, 161, 161, 116, 5, 102, 137, 31, 71, 71, 70, 70, 235, 215, 198, 7, 0, 95, 94 })
返回 (ret)

.子程序 文本_删首空, 文本型, , 返回一个文本，其中包含被删除了首部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (ret, 欲删除空格的文本)
赋值 (temp, 处理文本首全角 (ret))
置入代码 ({ 86, 87, 49, 219, 139, 117, 252, 139, 125, 248, 133, 246, 116, 26, 138, 30, 132, 219, 116, 20, 128, 251, 32, 117, 3, 70, 235, 242, 136, 31, 71, 70, 138, 30, 132, 219, 116, 2, 235, 244, 198, 7, 0, 95, 94 })
返回 (ret)


.子程序 文本_删尾空, 文本型, , 返回一个文本，其中包含被删除了尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp11, 文本型, , , 
.局部变量 len, 整数型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (len, 文本_取长度 (欲删除空格的文本))
赋值 (temp11, 欲删除空格的文本)
赋值 (temp, 处理文本尾全角 (temp11))
置入代码 ({ 86, 87, 49, 219, 139, 117, 252, 139, 77, 244, 73, 133, 246, 116, 21, 131, 249, 255, 116, 11, 138, 28, 14, 128, 251, 32, 117, 3, 73, 235, 240, 65, 198, 4, 14, 0, 94 })
返回 (temp)


.子程序 文本_到全角, 文本型, , 将文本中的半角字母、空格或数字变换为全角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

 ' 数字范围163开头，176--185
 ' 大写字母，163开头，193--218
 ' 小写字母，163开头，225--250
 ' ///////////以上为全角的，下面是半角的
 ' 数字范围，48--57
 ' 大写字母，65--90
 ' 小写字母，97-122
赋值 (ret, 文本_取空白 (相乘 (文本_取长度 (欲变换的文本), 2)))
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 74, 138, 30, 132, 219, 116, 68, 128, 251, 32, 116, 53, 128, 251, 48, 114, 42, 128, 251, 57, 119, 13, 198, 7, 163, 71, 128, 195, 128, 136, 31, 71, 70, 235, 222, 128, 251, 65, 114, 19, 128, 251, 90, 119, 2, 235, 231, 128, 251, 97, 114, 7, 128, 251, 122, 119, 2, 235, 219, 136, 31, 70, 71, 235, 192, 102, 199, 7, 161, 161, 71, 71, 70, 235, 182, 198, 7, 0, 95, 94 })
返回 (ret)


.子程序 文本_到半角, 文本型, , 将文本中的全角字母、空格或数字变换为半角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

 ' 数字范围163开头，176--185
 ' 大写字母，163开头，193--218
 ' 小写字母，163开头，225--250
 ' ///////////以上为全角的，下面是半角的
 ' 数字范围，48--57
 ' 大写字母，65--90
 ' 小写字母，97-122
赋值 (ret, 欲变换的文本)
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 95, 138, 30, 132, 219, 116, 89, 128, 251, 161, 116, 28, 128, 251, 163, 116, 37, 233, 12, 0, 0, 0, 70, 138, 30, 128, 235, 128, 136, 31, 71, 70, 235, 223, 136, 31, 70, 71, 235, 217, 128, 126, 1, 161, 116, 2, 235, 242, 198, 7, 32, 70, 235, 232, 128, 126, 1, 176, 114, 230, 128, 126, 1, 185, 119, 2, 235, 210, 128, 126, 1, 193, 114, 216, 128, 126, 1, 218, 119, 2, 235, 196, 128, 126, 1, 225, 114, 202, 128, 126, 1, 250, 119, 196, 235, 182, 198, 7, 0, 95, 94 })
返回 (ret)


.程序集 数值, , , 

.子程序 数值_取十六进制文本, 文本型, , 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 文本_取空白 (8))
置入代码 ({ 87, 139, 69, 8, 139, 125, 252, 49, 201, 177, 8, 80, 36, 15, 60, 9, 119, 4, 4, 48, 235, 2, 4, 55, 136, 68, 15, 255, 88, 193, 232, 4, 226, 233, 137, 248, 95, 201, 194, 4, 0 })
返回 (“”)
 ' ///////置入代码
 ' push edi
 ' mov eax,dword[ebp+8]
 ' mov edi,dword[ebp-4]
 ' xor ecx,ecx
 ' mov cl ,byte 8
 ' aaa:
 ' push eax
 ' and al,0xf
 ' cmp al,byte 9
 ' ja bbb
 ' add al, 0x30
 ' jmp short ccc
 ' bbb:
 ' add al,55
 ' ccc:
 ' mov byte [edi+ecx-1], al
 ' pop eax
 ' shr eax,4
 ' loop aaa
 ' mov eax,edi
 ' pop edi
 ' leave
 ' retn 4


.子程序 数值_文本到整数, 整数型, 公开, 
.参数 文本, 文本型, , 

.局部变量 ret, 长整数型, , , 

StrToInt64ExA (文本, 0, ret)
返回 (ret)

.子程序 数值_子程序指针到整数, 整数型, 公开, 
.参数 x, 子程序指针, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

赋值 (address, 指针_取子程序指针 (x))
RtlMoveMemory_读整数 (ret, address, 4)
返回 (ret)

.子程序 数值_字节集到整数, 整数型, 公开, 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 指针_取字节集指针 (字节集))
赋值 (len, 字节集_取长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 4))
    RtlMoveMemory_读整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_读整数 (ret, 相减 (相加 (address, 位置), 1), 4)
.如果结束
返回 (ret)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 数值_字节集到短整数, 短整数型, 公开, 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 指针_取字节集指针 (字节集))
赋值 (len, 字节集_取长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 2))
    RtlMoveMemory_读整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_读整数 (ret, 相减 (相加 (address, 位置), 1), 2)
.如果结束
返回 (ret)


.子程序 数值_取十进制, 长整数型, 公开, 
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：#十六进制,#十进制,#八进制，#二进制

.局部变量 ret, 长整数型, , , 

.如果真 (等于 (进制, 10)) ' 不想改汇编了，呵呵，就用API吧。
    StrToInt64ExA (欲转换的文本, 0, ret)
    返回 (ret)
.如果真结束
置入代码 ({ 86, 51, 210, 51, 192, 139, 117, 8, 139, 54, 133, 246, 116, 48, 139, 77, 12, 51, 219, 138, 30, 132, 219, 116, 26, 128, 251, 57, 119, 5, 128, 235, 48, 235, 6, 128, 203, 32, 128, 235, 87, 15, 165, 194, 211, 224, 3, 195, 70, 235, 224, 94, 139, 229, 93, 194, 8, 0 })
返回 (0)

.子程序 数值_长整数到整数, 整数型, 公开, 
.参数 x, 长整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

返回 (x)

.子程序 数值_整数取高字, 整数型, 公开, 
.参数 x, 整数型, , 

置入代码 ({ 139, 69, 8, 193, 232, 16, 201, 194, 4, 0 })
返回 (0)

.子程序 数值_整数取低字, 整数型, 公开, 
.参数 x, 整数型, , 

置入代码 ({ 139, 69, 8, 37, 255, 255, 0, 0, 201, 194, 4, 0 })
返回 (0)

.子程序 数值_整除, 整数型, 公开, 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 

返回 (相除 (被除数, 除数))


.子程序 数值_求余, 双精度小数型, 公开, 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 

置入代码 ({ 221, 69, 16, 221, 69, 8, 217, 248, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 16, 0 })
返回 (0)

.子程序 数值_求次方, 双精度小数型, 公开, 
.参数 欲求次方数值, 双精度小数型, , 
.参数 次方数, 双精度小数型, , 

置入代码 ({ 221, 69, 16, 221, 69, 8, 217, 241, 217, 192, 217, 252, 220, 225, 217, 201, 217, 224, 217, 240, 217, 232, 222, 193, 217, 253, 221, 217, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 16, 0 })
返回 (0)


.子程序 数值_求平方根, 双精度小数型, 公开, 
.参数 欲求其平方根的数值, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 250, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)


.子程序 数值_合并整数, 整数型, 公开, 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 65535), 左移 (用作合并的整数2, 16)))


.子程序 数值_合并短整数, 短整数型, 公开, 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 255), 左移 (用作合并的整数2, 8)))


.子程序 数值_绝对取整, 整数型, 公开, 
.参数 欲取整的小数, 双精度小数型, , 

返回 (欲取整的小数)


.子程序 数值_取整, 整数型, 公开, 
.参数 欲取整的小数, 双精度小数型, , 

.如果 (大于或等于 (欲取整的小数, 0))
    返回 (欲取整的小数)
.否则
    返回 (相减 (欲取整的小数, 0.5))
.如果结束



.子程序 数值_求正弦, 双精度小数型, 公开, 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 254, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求余弦, 双精度小数型, 公开, 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 255, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求正切, 双精度小数型, 公开, 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 242, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求反正切, 双精度小数型, 公开, 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 243, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求反正弦, 双精度小数型, 公开, 
.参数 正弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (小于 (正弦值, -1), 大于 (正弦值, 1)))
    返回 (0)
.如果真结束
返回 (数值_求反正切 (相除 (正弦值, 数值_求平方根 (相减 (1, 相乘 (正弦值, 正弦值))))))

.子程序 数值_求反余弦, 双精度小数型, 公开, 
.参数 余弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (大于 (余弦值, 1), 小于 (余弦值, -1)))
    返回 (0)
.如果真结束
返回 (相减 (相除 (#pi, 2), 数值_求反正弦 (余弦值)))

.子程序 数值_循环左移, 整数型, 公开, 
.参数 要循环左移的整数, 整数型, , 
.参数 左移位数, 整数型, , <255

置入代码 ({ 139, 69, 8, 139, 77, 12, 211, 192, 201, 194, 4, 0 })
返回 (0)


.子程序 数值_循环右移, 整数型, 公开, 
.参数 要循环右移的整数, 整数型, , 
.参数 右移位数, 整数型, , <255

置入代码 ({ 139, 69, 8, 139, 77, 12, 211, 200, 201, 194, 4, 0 })
返回 (0)


.程序集 字节集, , , 

.子程序 字节集_到十六进制文本, 文本型, 公开, 将字节集用16进制表示
.参数 字节集, 字节集, , 用于转换的字节集

.局部变量 返回值, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 text, 文本型, , , 

赋值 (返回值, “”)
赋值 (j, 字节集_取长度 (字节集))
.变量循环首 (1, j, 1, i)
    赋值 (text, 数值_取十六进制文本 (数值_字节集到整数 (字节集_取中间 (字节集, i, 1), )))
    .如果真 (小于或等于 (文本_取长度 (text), 1))
        赋值 (text, 相加 (“0”, text))
    .如果真结束
    赋值 (返回值, 相加 (返回值, text))
.变量循环尾 ()
返回 (返回值)

.子程序 字节集_取空白, 字节集, 公开, 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 字节集_取长度, 整数型, 公开, 
.参数 字节集, 字节集, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
赋值 (address, 指针_取字节集指针 (字节集))
RtlMoveMemory_读整数 (ret, 相减 (address, 4), 4)
返回 (ret)


.子程序 字节集_到字节, 整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 指针_取字节集指针 (字节集))
赋值 (len, 字节集_取长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 1))
    RtlMoveMemory_读字节 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_读字节 (ret, 相减 (相加 (address, 位置), 1), 1)
.如果结束
返回 (ret)

.子程序 字节集_文本到字节集, 字节集, 公开, 
.参数 文本, 文本型, , 

返回 (指针到字节集 (指针_取文本型指针 (文本), 文本_取长度 (文本)))


.子程序 字节集_整数到字节集, 字节集, 公开, 
.参数 整数, 整数型, , 

返回 (指针到字节集 (指针_取整数型指针 (整数), 4))


.子程序 字节集_字节型到字节集, 字节集, 公开, 
.参数 字节型, 字节型, , 

.局部变量 temp, 字节集, , , 

赋值 (temp, { 0 })
赋值 (temp [1], 字节型)
返回 (temp)



.子程序 字节集_字节数组到字节集, 字节集, 公开, 将指定数据转换为字节集后返回转换结果。本命令为超级命令。
.参数 字节型数组数据, 字节型, 数组, 

.局部变量 lpBuffer, 字节集, , , 

赋值 (lpBuffer, 取空白字节集 (取数组成员数 (字节型数组数据)))
ReadProcessMemory_字节型数组 (-1, 字节型数组数据, lpBuffer, 取数组成员数 (字节型数组数据), 0)
返回 (lpBuffer)

.子程序 字节集_寻找, 整数型, 公开, 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。

置入代码 ({ 83, 82, 86, 87, 139, 125, 8, 139, 63, 133, 255, 116, 119, 139, 95, 4, 131, 251, 0, 126, 111, 141, 87, 8, 139, 117, 12, 139, 54, 133, 246, 116, 99, 139, 78, 4, 131, 249, 0, 126, 91, 141, 70, 8, 137, 69, 244, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 65, 73, 137, 77, 248, 41, 203, 137, 93, 252, 1, 194, 139, 117, 244, 137, 215, 137, 217, 138, 38, 70, 227, 42, 138, 7, 71, 73, 48, 224, 117, 246, 137, 250, 137, 203, 139, 77, 248, 227, 15, 138, 38, 138, 7, 70, 71, 48, 224, 117, 217, 73, 227, 2, 235, 241, 139, 69, 16, 3, 69, 252, 41, 216, 235, 3, 131, 200, 255, 95, 94, 90, 91, 131, 196, 12, 137, 236, 93, 194, 16, 0 })
返回 (0)


.子程序 字节集_倒找, 整数型, 公开, 返回一字节集在另一字节集中最后出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。

置入代码 ({ 83, 82, 86, 87, 139, 125, 8, 139, 63, 133, 255, 116, 122, 139, 95, 4, 131, 251, 0, 126, 114, 141, 87, 8, 139, 117, 12, 139, 54, 133, 246, 116, 102, 139, 78, 4, 131, 249, 0, 126, 94, 141, 70, 8, 137, 69, 248, 139, 69, 20, 133, 192, 116, 12, 139, 69, 16, 131, 248, 0, 126, 73, 59, 195, 118, 2, 139, 195, 59, 200, 119, 63, 73, 137, 77, 252, 1, 77, 248, 3, 208, 74, 43, 193, 139, 216, 139, 117, 248, 139, 250, 139, 203, 138, 38, 78, 227, 37, 138, 7, 79, 73, 50, 196, 117, 246, 139, 215, 139, 217, 139, 77, 252, 227, 15, 138, 38, 138, 7, 78, 79, 50, 196, 117, 217, 73, 227, 2, 235, 241, 139, 195, 64, 235, 3, 131, 200, 255, 95, 94, 90, 91, 131, 196, 8, 139, 229, 93, 194, 16, 0 })
返回 (0)


.子程序 字节集_取左边, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 指针_取字节集指针 (字节集))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取右边, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 相减 (相加 (指针_取字节集指针 (字节集), len), 欲取出字节的数目))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取中间, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.判断 (大于 (起始取出位置, len))
    返回 ({  })
.默认
    
.判断结束
.如果真 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出字节的数目, 起始取出位置), 1), len))
    赋值 (欲取出字节的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (address, 相减 (相加 (指针_取字节集指针 (字节集), 起始取出位置), 1))
返回 (指针到字节集 (address, 欲取出字节的数目))



.子程序 字节集_分割, 整数型, 公开, 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递

.局部变量 temp, 字节集, , , 
.局部变量 位置列表, 整数型, , "0", 
.局部变量 找到位置个数, 整数型, , , 
.局部变量 临时分割表, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 len_x, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (返回的字节集数组)
.如果真 (等于 (待分割字节集, {  }))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的字节集))
    赋值 (用作分割的字节集, { 0 })
.如果真结束
赋值 (找到位置个数, 字节集_找子 (待分割字节集, 用作分割的字节集, 位置列表))
.如果真 (等于 (找到位置个数, 0))
    返回 (0)
.如果真结束
赋值 (len_x, 字节集_取长度 (待分割字节集))
赋值 (len_y, 字节集_取长度 (用作分割的字节集))
.计次循环首 (找到位置个数, i)
    .如果真 (等于 (位置列表 [i], 1))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (i, 1))
        加入成员 (临时分割表, 字节集_取中间 (待分割字节集, 1, 相减 (位置列表 [i], 1)))
        到循环尾 ()
    .如果真结束
    加入成员 (临时分割表, 字节集_取中间 (待分割字节集, 相加 (位置列表 [相减 (i, 1)], len_y), 相减 (位置列表 [i], 相加 (位置列表 [相减 (i, 1)], len_y))))
.计次循环尾 ()
.如果真 (并且 (大于 (找到位置个数, 0), 小于或等于 (相加 (位置列表 [找到位置个数], len_y), len_x)))
    加入成员 (临时分割表, 字节集_取中间 (待分割字节集, 相加 (位置列表 [找到位置个数], len_y), 相加 (相减 (len_x, 相加 (位置列表 [找到位置个数], len_y)), 1)))
.如果真结束
.如果真 (并且 (小于 (要返回的子字节集数目, 取数组成员数 (临时分割表)), 大于 (要返回的子字节集数目, 0)))
    .计次循环首 (要返回的子字节集数目, i)
        加入成员 (返回的字节集数组, 临时分割表 [i])
    .计次循环尾 ()
    返回 (要返回的子字节集数目)
.如果真结束
 ' 复制数组 (返回的字节集数组, 临时分割表)
赋值 (返回的字节集数组, 临时分割表)
返回 (取数组成员数 (返回的字节集数组))

.子程序 字节集_找子, 整数型, 公开, 分割字节集时用
.参数 x, 字节集, , 
.参数 y, 字节集, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 字节集_取长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 字节集_寻找 (x, y, j))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 字节集_取重复字节集, 字节集, 公开, 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的字节集, 字节集, , 

.局部变量 temp, 字节集, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的字节集))
.计次循环尾 ()
返回 (temp)


.子程序 字节集_字节集替换, 字节集, 公开, 将指定字节集的某一部分用其它的字节集替换，然后返回替换后的结果。
.参数 欲替换其部分的字节集, 字节集, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的字节集, 字节集, 可空, 可以被省略。如果本参数被省略，则删除字节集中的指定部分。

.局部变量 len_x, 空白型, , , 
.局部变量 temp1, 字节集, , , 
.局部变量 temp2, 字节集, , , 

.如果真 (等于 (欲替换其部分的字节集, {  }))
    返回 ({  })
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (len_x, 字节集_取长度 (欲替换其部分的字节集))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (temp1, 字节集_取左边 (欲替换其部分的字节集, 相减 (起始替换位置, 1)))
赋值 (temp2, 字节集_取右边 (欲替换其部分的字节集, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的字节集, temp2))


.子程序 字节集_子字节集替换, 字节集, 公开, 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的。
.参数 欲被替换的字节集, 字节集, , 
.参数 欲被替换的子字节集, 字节集, , 
.参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集。
.参数 进行替换的起始位置, 空白型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 替换进行的次数, 空白型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 字节集, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (或者 (等于 (欲被替换的字节集, {  }), 等于 (欲被替换的子字节集, {  })))
    返回 ({  })
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 字节集_找子 (欲被替换的字节集, 欲被替换的子字节集, offset, 进行替换的起始位置))
.如果真 (等于 (count, 0))
    返回 (欲被替换的字节集)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的字节集)
赋值 (len, 字节集_取长度 (欲被替换的子字节集))
赋值 (偏移, 相减 (字节集_取长度 (用作替换的子字节集), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 字节集_字节集替换 (ret, offset [i], len, 用作替换的子字节集))
    .否则
        赋值 (ret, 字节集_字节集替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子字节集))
    .如果结束
    
.计次循环尾 ()
返回 (ret)


.程序集 指针, , , 

.子程序 地址_取文本变量地址, 整数型, , 
.参数 文本, 文本型, , 

返回 (SetHandleCount_文本 (文本))

.子程序 地址_取字节集变量地址, 整数型, , 
.参数 字节集, 字节集, , 

返回 (SetHandleCount_文本 (字节集))

.子程序 地址_取整数变量地址, 整数型, , 
.参数 整数, 整数型, , 

返回 (SetHandleCount_文本 (整数))

.子程序 地址_取子程序地址, 整数型, , 
.参数 子程序指针, 子程序指针, , 

返回 (SetHandleCount_子程序指针 (子程序指针))

.子程序 指针_取字节集指针, 整数型, 公开, 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))


.子程序 指针_取字节型指针, 整数型, 公开, 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))


.子程序 指针_取文本型指针, 整数型, 公开, 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))


.子程序 指针_取整数型指针, 整数型, 公开, 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 指针_取子程序指针, 整数型, 公开, 
.参数 x, 子程序指针, 参考, 

返回 (lstrcpyn_子程序子针 (x, x, 0))


.子程序 指针_取长整数型指针, 整数型, 公开, 
.参数 x, 长整数型, 参考, 

返回 (lstrcpyn_长整数型 (x, x, 0))


.子程序 指针_取双精度小数型指针, 整数型, 公开, 
.参数 x, 双精度小数型, 参考, 

返回 (lstrcpyn_双精型 (x, x, 0))


.程序集 系统, , , 

.子程序 系统_读环境变量, 文本型, , 
.参数 环境变量名称, 文本型, , 

.局部变量 size, 整数型, , , 
.局部变量 name, 文本型, , , 

赋值 (size, 2048)
赋值 (name, 文本_取空白 (2048))
ExpandEnvironmentStringsA (环境变量名称, name, 2048)
.如果真 (等于 (name, 环境变量名称))
    返回 (“”)
.如果真结束
返回 (name)


.子程序 系统_写环境变量, 逻辑型, , 
.参数 环境变量名称, 文本型, , 
.参数 欲写入内容, 文本型, , 

返回 (SetEnvironmentVariableA (环境变量名称, 欲写入内容))


.子程序 系统_取执行文件名, 文本型, , 
.局部变量 name, 文本型, , , 
.局部变量 offset, 整数型, , , 

赋值 (name, 文本_取空白 (255))
GetModuleFileNameA (0, name, 255)
赋值 (offset, 文本_倒找 (name, “\”))
赋值 (name, 文本_取右边 (name, 相减 (文本_取长度 (name), offset)))
返回 (name)


.子程序 系统_取操作系统, 文本型, , 
.局部变量 信息, OSVERSIONINFO, , , 
.局部变量 OsName, 文本型, , , 

赋值 (信息.dwOSVersionInfoSize, 148)
.如果真 (不等于 (GetVersionExA (信息), 0))
    .如果真 (等于 (信息.dwPlatformId, 1))
        .如果真 (等于 (信息.dwMinorVersion, 0))
            赋值 (OsName, “Windows 95”)
        .如果真结束
        .如果真 (等于 (信息.dwMinorVersion, 10))
            赋值 (OsName, “Windows 98”)
        .如果真结束
        .如果真 (等于 (信息.dwMinorVersion, 90))
            赋值 (OsName, “Windows Mellinnium”)
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (信息.dwPlatformId, 2))
        .如果真 (等于 (信息.dwMajorVersion, 3))
            赋值 (OsName, “Windows NT 3.51”)
        .如果真结束
        .如果真 (等于 (信息.dwMajorVersion, 4))
            赋值 (OsName, “Windows NT 4.0”)
        .如果真结束
        .如果真 (等于 (信息.dwMajorVersion, 5))
            .如果真 (等于 (信息.dwMinorVersion, 0))
                赋值 (OsName, “Windows 2000”)
            .如果真结束
            .如果真 (等于 (信息.dwMinorVersion, 1))
                赋值 (OsName, “Windows XP”)
            .如果真结束
            .如果真 (等于 (信息.dwMinorVersion, 2))
                赋值 (OsName, “Windows 2003”)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    返回 (OsName)
     ' 返回 (OsName ＋ “ ” ＋ 到文本 (信息.szCSDVersion) ＋ “ ” ＋ 到文本 (信息.dwMajorVersion) ＋ “.” ＋ 到文本 (信息.dwMinorVersion) ＋ “.” ＋ 到文本 (信息.dwBuildNumber))
.如果真结束
返回 (“”)


.子程序 系统_取机器名, 文本型, , 
.局部变量 name, 文本型, , , 

赋值 (name, 文本_取空白 (255))
GetComputerNameA (name, 256)
返回 (name)


.子程序 错误管理器_取错误消息文本, 文本型, , 取错误消息文本glGetError
.参数 错误码, 整数型, , 

.局部变量 局部_缓存, 文本型, , , 
.局部变量 大小, 空白型, , , 

赋值 (大小, 260)
赋值 (局部_缓存, 文本_取空白 (大小))
FormatMessageA (4096, 0, 错误码, 0, 局部_缓存, 大小, 0)
返回 (局部_缓存)

.子程序 系统_关闭系统API, 逻辑型, , ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
.参数 标志, 整数型, , uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
.参数 保留值, 整数型, 可空, dwReserved,保留，设为零  65535

.局部变量 a, 整数型, , , 

.如果真 (是否为空 (保留值))
    赋值 (保留值, 65535)
.如果真结束

赋值 (a, ExitWindowsEx (标志, 保留值))
.如果真 (等于 (a, 0))
    返回 (假)
    
.如果真结束
返回 (真)


.子程序 系统_设置计算机名, 逻辑型, , 设置计算机名  一般要重新启动才生效 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错
.参数 新的计算机名称, 文本型, 参考, lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   

.局部变量 返回, 整数型, , , 

赋值 (返回, SetComputerNameA (新的计算机名称))
.如果真 (不等于 (返回, 0))
    返回 (真)
    
.如果真结束
返回 (假)


.子程序 系统_重新启动系统设置, 整数型, , #59
.参数 标志, 整数型, 可空, uFlags EWX_FORCE=4 EWX_SHUTDOWN=1

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (标志))
    赋值 (标志, 1)
    
.如果真结束
赋值 (返回, 重新启动系统设置 (GetActiveWindow (), 0, 标志))
返回 (返回)


.子程序 系统_获取用户缺省语言ID, 整数型, , GetUserDefaultLangID
返回 (GetUserDefaultLangID ())


.子程序 系统_获取用户缺省本地ID, 整数型, 公开, GetUserDefaultLCID
返回 (GetUserDefaultLCID ())
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 系统_取当前用户名, 文本型, , 返回用户名GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator
.局部变量 fname, 文本型, , , 
.局部变量 backtrack, 整数型, , , 


赋值 (fname, 文本_取空白 (255))
赋值 (backtrack, GetUserNameA (fname, 255))
返回 (fname)


.子程序 系统_取当前用户名扩展, 文本型, , GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
.局部变量 fname, 文本型, , , 
.局部变量 backtrack, 整数型, , , 

赋值 (fname, 文本_取空白 (255))
赋值 (backtrack, GetUserNameExA (2, fname, 255))
.如果真 (等于 (backtrack, 0))
    赋值 (fname, “找不到用户名”)
.如果真结束
返回 (fname)


.类模块 配置类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 配置_读项, 文本型, 公开, 读取指定配置文件中指定项目的文本内容。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, , 参数值指定欲读入配置项在其节中的名称。
.参数 默认文本, 文本型, 可空, 可以被省略。如果指定配置项不存在，将返回此默认文本。如果指定配置项不存在且本参数被省略，将返回空文本。

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 文本_取空白 (255))
GetPrivateProfileStringA_读配置文本 (节名称, 配置项名称, 默认文本, 返回文本, 255, 配置文件名)
返回 (文本_删首尾空 (返回文本))

.子程序 配置_写项, 逻辑型, 公开, 将指定文本内容写入指定配置项中或者删除指定的配置项或节，如果指定配置文件不存在，将会自动创建。成功返回真，失败返回假。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲写入配置项所处节的名称。
.参数 配置项名称, 文本型, 可空, 可以被省略。参数值指定欲写入配置项在其节中的名称。如果参数值被省略，则删除指定节及其下的所有配置项。
.参数 欲写入值, 文本型, 可空, 可以被省略。参数值指定欲写入到指定配置项中的文本。如果参数值被省略，则删除所指定配置项。

.如果真 (是否为空 (配置项名称))
    .如果 (不等于 (WritePrivateProfileStringA_删配置文件小节 (节名称, 0, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (是否为空 (欲写入值))
    .如果 (不等于 (WritePrivateProfileStringA_删配置文件项 (节名称, 配置项名称, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (不等于 (文本_寻找 (配置项名称, “=”), -1))
    返回 (假)
.如果真结束
.如果真 (等于 (文本_寻找 (欲写入值, “=”), 1))
    返回 (假)
.如果真结束
.如果 (不等于 (WritePrivateProfileStringA_创建或修改配置文件 (节名称, 配置项名称, 欲写入值, 配置文件名), 0))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 配置_取节名, 整数型, 公开, 返回配置文件中所有已有节名的数量。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 返回的配置节名数组, 文本型, 数组, 返回指定配置文件中所有已有节名的文本数组。

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 

清除数组 (返回的配置节名数组)
赋值 (temp, 字节集_取空白 (32767))
赋值 (len, GetPrivateProfileSectionNamesA_字节集 (temp, 32767, 配置文件名))
赋值 (temp, 字节集_取左边 (temp, len))
赋值 (count, 字节集_分割 (temp, , , temp1))
.计次循环首 (count, i)
    加入成员 (返回的配置节名数组, 文本_字节集到文本 (temp1 [i]))
.计次循环尾 ()
返回 (count)


.子程序 配置_取项名, 整数型, 公开, 
.参数 配置文件名, 文本型, , 
.参数 节名称, 文本型, , 
.参数 返回的配置项名数组, 文本型, 数组, 

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 xxxx, 文本型, , , 

清除数组 (返回的配置项名数组)
赋值 (temp, 字节集_取空白 (32767))
赋值 (len, GetPrivateProfileSectionA_取指定小节所有项名和值的一个列表 (节名称, temp, 32767, 配置文件名))
赋值 (temp, 字节集_取左边 (temp, len))
赋值 (count, 字节集_分割 (temp, , , temp1))
.计次循环首 (count, i)
    赋值 (xxxx, 文本_字节集到文本 (temp1 [i]))
    赋值 (xxxx, 文本_取左边 (xxxx, 相减 (文本_寻找 (xxxx, “=”), 1)))
    加入成员 (返回的配置项名数组, xxxx)
.计次循环尾 ()
返回 (count)


.类模块 时间类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取启动时间, 整数型, 公开, GetMessageTime
.局部变量 返回, 整数型, , , 

赋值 (返回, GetMessageTime ())
返回 (返回)


.子程序 取WINDOWS运行时间, 整数型, 公开, GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）
返回 (GetTickCount ())


.子程序 取现行时间, 日期时间型, 公开, GetLocalTime
.局部变量 年, 短整数型, , , wYear
.局部变量 月, 短整数型, , , wMonth
.局部变量 星期, 短整数型, , , wDayOfWeek
.局部变量 日, 短整数型, , , wDay
.局部变量 时, 短整数型, , , wHour
.局部变量 分, 短整数型, , , wMinute
.局部变量 秒, 短整数型, , , wSecond
.局部变量 毫秒, 短整数型, , , wMilliseconds
.局部变量 局部_系统时间, 系统时间, , , 
.局部变量 系统时间, 日期时间型, , , 
.局部变量 时间文本, 文本型, , , 

GetLocalTime (局部_系统时间)
赋值 (年, 局部_系统时间.年)
赋值 (月, 局部_系统时间.月)
赋值 (星期, 局部_系统时间.星期)
赋值 (日, 局部_系统时间.日)
赋值 (时, 局部_系统时间.时)
赋值 (分, 局部_系统时间.分)
赋值 (秒, 局部_系统时间.秒)
赋值 (毫秒, 局部_系统时间.毫秒)

赋值 (时间文本, 相加 (文本_整数到文本 (年), “年”, 文本_整数到文本 (月), “月”, 文本_整数到文本 (日), “日”, 文本_整数到文本 (时), “时”, 文本_整数到文本 (分), “分”, 文本_整数到文本 (秒), “秒”))
赋值 (系统时间, 核心_文本到时间 (时间文本))
返回 (系统时间)


.子程序 取现行时间_标准格式, 日期时间型, 公开, GetLocalTime
.局部变量 年, 短整数型, , , wYear
.局部变量 月, 短整数型, , , wMonth
.局部变量 星期, 短整数型, , , wDayOfWeek
.局部变量 日, 短整数型, , , wDay
.局部变量 时, 短整数型, , , wHour
.局部变量 分, 短整数型, , , wMinute
.局部变量 秒, 短整数型, , , wSecond
.局部变量 毫秒, 短整数型, , , wMilliseconds
.局部变量 局部_系统时间, 系统时间, , , 
.局部变量 系统时间, 日期时间型, , , 
.局部变量 时间文本, 文本型, , , 

GetLocalTime (局部_系统时间)
赋值 (年, 局部_系统时间.年)
赋值 (月, 局部_系统时间.月)
赋值 (星期, 局部_系统时间.星期)
赋值 (日, 局部_系统时间.日)
赋值 (时, 局部_系统时间.时)
赋值 (分, 局部_系统时间.分)
赋值 (秒, 局部_系统时间.秒)
赋值 (毫秒, 局部_系统时间.毫秒)

赋值 (时间文本, 相加 (文本_整数到文本 (年), “-”, 文本_整数到文本 (月), “-”, 文本_整数到文本 (日), “-”, 文本_整数到文本 (时), “:”, 文本_整数到文本 (分), “:”, 文本_整数到文本 (秒)))
赋值 (系统时间, 核心_文本到时间 (时间文本))
返回 (系统时间)


.子程序 取星期几, 整数型, 公开, 
.局部变量 年, 短整数型, , , wYear
.局部变量 月, 短整数型, , , wMonth
.局部变量 星期, 短整数型, , , wDayOfWeek
.局部变量 日, 短整数型, , , wDay
.局部变量 时, 短整数型, , , wHour
.局部变量 分, 短整数型, , , wMinute
.局部变量 秒, 短整数型, , , wSecond
.局部变量 毫秒, 短整数型, , , wMilliseconds
.局部变量 局部_系统时间, 系统时间, , , 
.局部变量 系统时间, 日期时间型, , , 
.局部变量 时间文本, 文本型, , , 

GetLocalTime (局部_系统时间)
赋值 (年, 局部_系统时间.年)
赋值 (月, 局部_系统时间.月)
赋值 (星期, 局部_系统时间.星期)
赋值 (日, 局部_系统时间.日)
赋值 (时, 局部_系统时间.时)
赋值 (分, 局部_系统时间.分)
赋值 (秒, 局部_系统时间.秒)
赋值 (毫秒, 局部_系统时间.毫秒)
返回 (星期)


.类模块 内存类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 读文本, 文本型, , 读取文本型数据(返回文本 失败返回空文本)
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认为50 欲读取的长度字节

.局部变量 临时文本, 文本型, , , 
.局部变量 操作句柄, 整数型, , , 

.如果真 (等于 (长度, 0))
    赋值 (长度, 50)
.如果真结束
 ' --读文本---------------------------------
赋值 (临时文本, 文本_取空白 (长度))
赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)) ' 取得操作句柄
ReadProcessMemory_文本 (操作句柄, 内存地址, 临时文本, 长度, 0)
CloseHandle (操作句柄)
返回 (临时文本)


.子程序 读整数, 长整数型, 公开, 读取整数型数据(返回整数内容 失败返回0) [斩月]
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 是否长整数, 逻辑型, 可空, 默认为假:读取整数型  真:读取长整数型

.局部变量 临时整数, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 操作句柄, 整数型, , , 

.如果 (是否长整数)
    赋值 (长度, 8)
.否则
    赋值 (长度, 4)
.如果结束
 ' ---读整数----------------------------------
赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)) ' 取得操作句柄
ReadProcessMemory_整数 (操作句柄, 内存地址, 临时整数, 长度, 0)
CloseHandle (操作句柄)
返回 (临时整数)


.子程序 读字节集, 字节集, 公开, 读取字节集数据(返回字节集 失败返回空) [斩月]
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 长度, 整数型, , 欲读长度

.局部变量 写入数据, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 

赋值 (写入数据, 字节集_取空白 (长度))
赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)) ' 取得操作句柄
ReadProcessMemory_字节集 (操作句柄, 地址, 写入数据, 长度, 0)
CloseHandle (操作句柄)
返回 (写入数据)


.子程序 写文本_只读, 逻辑型, , 写入文本数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 文本型, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
 ' a ＝ WriteProcessMemory_文本 (操作句柄, 地址, 写入数据, 文本_取长度 (写入数据), 0)
赋值 (返回, 写文本_只读内存数据 (操作句柄, 地址, 写入数据))
CloseHandle (操作句柄)
返回 (返回)


.子程序 写整数_只读, 逻辑型, , 写入四字节数据(成功返回真,失败返回假) [斩月]
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 整数型, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
 ' a ＝ WriteProcessMemory_整数 (操作句柄, 地址, 写入数据, 4, 0)
赋值 (返回, 写整数_只读内存数据 (操作句柄, 地址, 写入数据))
CloseHandle (操作句柄)

返回 (返回)


.子程序 写文本, 逻辑型, , 写入文本数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 文本型, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, WriteProcessMemory_文本 (操作句柄, 地址, 写入数据, 文本_取长度 (写入数据), 0))
CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 写整数, 逻辑型, , 写入四字节数据(成功返回真,失败返回假) [斩月]
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 整数型, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, WriteProcessMemory_整数 (操作句柄, 地址, 写入数据, 4, 0))
 ' CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束



.子程序 写整数_只读内存数据, 逻辑型, , 修改指定内存指针所指向地址处的一段数据,成功返回真,失败返回假,注意:目前只对NT以上系统有效,没在98下测试
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 内存区域指针, 整数型, , 要写到内存的区域地址
.参数 欲写到内存的数据, 整数型, , 欲写到内存的字节集数据

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 
.局部变量 a, 整数型, , , 

.如果真 (等于 (内存区域指针, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualQueryEx (目标进程句柄, 内存区域指针, mbi, 28), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READWRITE, mbi.Protect), 假))
    返回 (假)
.如果真结束
赋值 (a, WriteProcessMemory_整数 (目标进程句柄, 内存区域指针, 欲写到内存的数据, 4, 0))
VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READ, mbi.Protect) ' 改回只读模式
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 取内存保护属性, 整数型, , 失败返回-1----------------代码有问题
.参数 进程ID, 整数型, , 
.参数 内存区域指针, 整数型, , 要写到内存的区域地址

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 
.局部变量 目标进程句柄, 整数型, , , 
.局部变量 返回, 整数型, , , 

赋值 (目标进程句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
.如果真 (并且 (不等于 (目标进程句柄, 0), 不等于 (内存区域指针, 0)))
    赋值 (返回, VirtualQueryEx (目标进程句柄, 内存区域指针, mbi, 28))
    .如果真 (不等于 (返回, 0))
        CloseHandle (目标进程句柄)
        
        返回 (返回)
    .如果真结束
    
.如果真结束
CloseHandle (目标进程句柄)

返回 (-1)

.子程序 置内存保护属性, 逻辑型, , ----------------代码有问题
.参数 进程ID, 整数型, , 
.参数 内存区域指针, 整数型, , 要写到内存的区域地址
.参数 属性, 整数型, , 只读2,读写4

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 
.局部变量 目标进程句柄, 整数型, , , 

赋值 (目标进程句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
.如果真 (并且 (不等于 (目标进程句柄, 0), 等于 (内存区域指针, 0)))
    .如果真 (不等于 (VirtualQueryEx (目标进程句柄, 内存区域指针, mbi, 28), 0))
        .判断开始 (等于 (属性, 2))
            赋值 (结果, VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READ, mbi.Protect)) ' 改回只读模式
        .判断 (等于 (属性, 4))
            赋值 (结果, VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READWRITE, mbi.Protect))
        .默认
            赋值 (结果, 假)
        .判断结束
        返回 (结果)
    .如果真结束
    
    
.如果真结束
CloseHandle (目标进程句柄)
返回 (假)


.子程序 写字节集_只读内存数据, 逻辑型, , 修改指定内存指针所指向地址处的一段数据,成功返回真,失败返回假,注意:目前只对NT以上系统有效,没在98下测试
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 内存区域指针, 整数型, , 要写到内存的区域地址
.参数 欲写到内存的数据, 字节集, , 欲写到内存的字节集数据

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 
.局部变量 a, 整数型, , , 

.如果真 (等于 (内存区域指针, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualQueryEx (目标进程句柄, 内存区域指针, mbi, 28), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READWRITE, mbi.Protect), 假))
    返回 (假)
.如果真结束
赋值 (a, WriteProcessMemory_字节集 (目标进程句柄, 内存区域指针, 欲写到内存的数据, 字节集_取长度 (欲写到内存的数据), 0))
VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READ, mbi.Protect) ' 改回只读模式
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束



.子程序 写文本_只读内存数据, 逻辑型, , 修改指定内存指针所指向地址处的一段数据,成功返回真,失败返回假,注意:目前只对NT以上系统有效,没在98下测试
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 内存区域指针, 整数型, , 要写到内存的区域地址
.参数 欲写到内存的数据, 文本型, , 欲写到内存的字节集数据

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 
.局部变量 a, 整数型, , , 

.如果真 (等于 (内存区域指针, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualQueryEx (目标进程句柄, 内存区域指针, mbi, 28), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READWRITE, mbi.Protect), 假))
    返回 (假)
.如果真结束
赋值 (a, WriteProcessMemory_文本 (目标进程句柄, 内存区域指针, 欲写到内存的数据, 文本_取长度 (欲写到内存的数据), 0))
VirtualProtectEx (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READ, mbi.Protect) ' 改回只读模式

.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 写字节集_只读, 逻辑型, , 写入字节集数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 字节集, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
 ' a ＝ WriteProcessMemory_字节集 (操作句柄, 地址, 写入数据, 字节集_取长度 (写入数据), 0)
赋值 (返回, 写字节集_只读内存数据 (操作句柄, 地址, 写入数据))
CloseHandle (操作句柄)
返回 (返回)

.子程序 写字节集, 逻辑型, , 写入字节集数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 写入数据, 字节集, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, WriteProcessMemory_字节集 (操作句柄, 地址, 写入数据, 字节集_取长度 (写入数据), 0))
CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 拷贝文本, 文本型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, , 

.局部变量 返回内容, 文本型, , , 

赋值 (返回内容, 文本_取空白 (长度))
RtlMoveMemory_读文本 (返回内容, 内存地址, 长度)
返回 (返回内容)


.子程序 拷贝字节集, 字节集, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, , 

.局部变量 返回内容, 字节集, , , 

赋值 (返回内容, 字节集_取空白 (长度))
RtlMoveMemory_读字节集 (返回内容, 内存地址, 长度)
返回 (返回内容)

.子程序 拷贝整数, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 返回内容, 整数型, , , 

RtlMoveMemory_读整数 (返回内容, 内存地址, 4)
返回 (返回内容)

.子程序 填充文本, 空白型, , 
.参数 指针地址, 整数型, , 指针地址
.参数 写入数据, 文本型, , 

RtlMoveMemory_写文本 (指针地址, 写入数据, 文本_取长度 (写入数据))

.子程序 填充字节集, 空白型, , 
.参数 指针地址, 整数型, , 指针地址
.参数 写入数据, 字节集, , 

RtlMoveMemory_写字节集 (指针地址, 写入数据, 字节集_取长度 (写入数据))

.子程序 填充整数, 空白型, , 
.参数 指针地址, 整数型, , 指针地址
.参数 写入数据, 整数型, , 

RtlMoveMemory_写整数 (指针地址, 写入数据, 4)

.类模块 进程类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 提升进程权限, 逻辑型, 公开, 提升进程到指定权限( #备份  #启动  #关机  #调试)
.参数 目标进程, 整数型, 可空, 为空表示当前线程
.参数 权限类别, 文本型, 可空, 为空:#调试

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, 进程权限, , , 
.局部变量 tkpNewButIgnored, 进程权限, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.如果真 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, GetCurrentProcessId ())
.如果真结束
.如果真 (是否为空 (权限类别))
    赋值 (权限类别, #调试)
.如果真结束
.如果真 (取反 (OpenProcessToken (hdlProcessHandle, 40, hdlTokenHandle)))
    返回 (假)
.如果真结束
LookupPrivilegeValueA (“”, 权限类别, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
返回 (AdjustTokenPrivileges (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))

.子程序 创建进程, 整数型, 公开, 返回进程ID,失败返回-1
.参数 程序名, 文本型, , 
.参数 命令行, 文本型, 可空, 
.参数 是否等待程序运行完毕, 逻辑型, 可空, 初始值为“假”.
.参数 被运行程序窗口显示方式, 整数型, 可空, 参数值可以为以下常量之一:1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活.如果省略本参数,默认为“普通激活”方式.

.局部变量 pStartupInfo, 启动信息数据, , , 
.局部变量 pProcessInfo, 创建进程返回数据类型, , , 
.局部变量 hHandle, 整数型, , , 
.局部变量 pMsg, 整数型, , , 
.局部变量 返回句柄, 整数型, , , 

赋值 (pStartupInfo.结构长度, 68)
.判断开始 (等于 (被运行程序窗口显示方式, #隐藏窗口))
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_HIDE)
.判断 (等于 (被运行程序窗口显示方式, #最小化激活))
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_SHOWMINIMIZED)
.判断 (等于 (被运行程序窗口显示方式, #最大化激活))
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_SHOWMAXIMIZED)
.判断 (等于 (被运行程序窗口显示方式, #普通不激活))
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_SHOWNOACTIVATE)
.判断 (等于 (被运行程序窗口显示方式, #最小化不激活))
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_MINIMIZE)
.默认
    赋值 (pStartupInfo.标记, #STARTF_USESHOWWINDOW)
    赋值 (pStartupInfo.ShowWindow, #SW_SHOWNORMAL)
.判断结束
赋值 (hHandle, CreateProcessA (程序名, 命令行, 0, 0, 假, 0, 0, 0, pStartupInfo, pProcessInfo))
.如果 (等于 (是否等待程序运行完毕, 真))
    WaitForSingleObject (pProcessInfo.进程句柄, #INFINITE)
.否则
    WaitForInputIdle (pProcessInfo.进程句柄, 1000)
.如果结束
CloseHandle (pProcessInfo.主线程句柄)
CloseHandle (pProcessInfo.进程句柄)
.如果真 (等于 (hHandle, 0))
    返回 (-1)
.如果真结束
赋值 (返回句柄, pProcessInfo.进程ID)
返回 (返回句柄)

.子程序 暂停进程, 逻辑型, 公开, 暂停一个已启动的进程,成功返回真,失败返回假.本命令为初级命令.
.参数 进程标识, 整数型, , dwProcessId

.局部变量 返回值, 逻辑型, , , 

.如果 (不等于 (ZwSuspendProcess (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程标识)), 0))
    赋值 (返回值, 真)
.否则
    赋值 (返回值, 假)
.如果结束
返回 (返回值)

.子程序 恢复进程, 逻辑型, 公开, 恢复一个已启动的进程,成功返回真,失败返回假.本命令为初级命令.
.参数 进程标识, 整数型, , dwProcessId

.局部变量 返回值, 逻辑型, , , 

.如果 (不等于 (ZwResumeProcess (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程标识)), 0))
    赋值 (返回值, 真)
.否则
    赋值 (返回值, 假)
.如果结束
返回 (返回值)

.子程序 结束进程, 逻辑型, 公开, 成功返回非0,如果目标程序有窗口句柄的话建议使用 结束程序
.参数 进程标识, 整数型, , dwProcessId

.局部变量 返回值, 逻辑型, , , 

.如果 (不等于 (TerminateProcess (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程标识), 0), 0))
    赋值 (返回值, 真)
.否则
    赋值 (返回值, 假)
.如果结束
返回 (返回值)

.子程序 窗口取进程ID, 整数型, 公开, 取指定窗口句柄的窗口进程ID(返回进程ID,失败返回0) [斩月]
.参数 窗口句柄, 整数型, , 

.局部变量 临时线程ID, 整数型, , , 
.局部变量 临时进程ID, 整数型, , , 

赋值 (临时进程ID, 0)
赋值 (临时线程ID, GetWindowThreadProcessId (窗口句柄, 临时进程ID))
返回 (临时进程ID)

.子程序 退出进程, 整数型, 公开, ExitProcess
.参数 进程id, 整数型, , 

.局部变量 a, 空白型, , , 


赋值 (a, ExitProcess (进程id))
返回 (a)


.子程序 进程是否存在, 逻辑型, 公开, 
.参数 进程ID, 空白型, , 

.局部变量 进程句柄, 整数型, , , 

赋值 (进程句柄, OpenProcess (2035711, 0, 进程ID))
.如果 (等于 (进程句柄, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 取自进程ID, 整数型, 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId 
.局部变量 返回, 整数型, , , 

赋值 (返回, GetCurrentProcessId ())
返回 (返回)


.子程序 取创建32位帮助工具快照, 整数型, 公开, 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
.参数 标志, 整数型, , lFlags  一般填写8即可
.参数 进程标识符, 整数型, , lProcessID

.局部变量 返回, 整数型, , , 

赋值 (返回, CreateToolhelp32Snapshot (标志, 进程标识符))
返回 (返回)


.子程序 取程序路径, 文本型, 公开, 
.参数 进程ID, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 进程信息_, , , 

赋值 (snap, CreateToolhelp32Snapshot (8, 进程ID))
.如果真 (等于 (snap, -1))
    返回 (“”)
.如果真结束
赋值 (mod.结构大小, 1024)

Module32First (snap, mod)
返回 (文本_字节型数组到文本 (mod.文件路径))

.子程序 枚举模块, 整数型, 公开, 成功返回模块数目,失败返回-1
.参数 进程ID, 整数型, , 根据参数2设置
.参数 模块信息变量, 进程信息_, 参考 数组, 

.局部变量 快照句柄, 整数型, , , 
.局部变量 模块信息, 进程信息_, , , 
.局部变量 R, 整数型, , , 

赋值 (快照句柄, CreateToolhelp32Snapshot (8, 进程ID)) ' 根据进程ID进行枚举

.如果真 (等于 (快照句柄, 0))
    返回 (-1)
.如果真结束
赋值 (模块信息.结构大小, 1024)
赋值 (R, Module32First (快照句柄, 模块信息))
.判断循环首 (不等于 (R, 0))
    加入成员 (模块信息变量, 模块信息)
    赋值 (R, Module32Next (快照句柄, 模块信息))
.判断循环尾 ()
返回 (取数组成员数 (模块信息变量))

.子程序 寻找第一个32位模块, 整数型, 公开, Module32First  返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 进程信息_, 参考, uProcess

.局部变量 返回, 整数型, , , 

赋值 (返回, Module32First (快照句柄, 模块进程结构))

返回 (返回)


.子程序 寻找下一个32位模块, 整数型, 公开, Module32Next 返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 进程信息_, 参考, uProcess

.局部变量 返回, 整数型, , , 

赋值 (返回, Module32Next (快照句柄, 模块进程结构))
返回 (返回)

.子程序 打开进程, 整数型, 公开, , OpenProcess将句柄返回给过程对象  如执行成功，返回进程句柄；零表示失败      2035711 完全访问
.参数 进程对象, 整数型, , dwDesiredAccess 常量 PROCESS_ALL_ACCESS: 2035711 最大权限  1024  16  当设置为1024 16 不能对内存写入 
.参数 继承句柄, 整数型, , bInheritHandle  一般可以填写0  
.参数 进程标识符, 整数型, , dwProcessId

.局部变量 返回, 整数型, , , 

赋值 (返回, OpenProcess (进程对象, 继承句柄, 进程标识符))
返回 (返回)


.子程序 关闭进程句柄, 整数型, 公开, CloseHandle 关闭进程句柄
.参数 进程句柄, 整数型, , 

.局部变量 返回, 整数型, , , 

赋值 (返回, CloseHandle (进程句柄))
返回 (返回)


.子程序 取进程线程标识符ID, 整数型, 公开, GetWindowThreadProcessId返回进程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄

.局部变量 局部_变量, 整数型, , , 

GetWindowThreadProcessId (窗口句柄, 局部_变量)
返回 (局部_变量)


.子程序 退出线程, 整数型, 公开, ExitThread
.参数 线程句柄, 整数型, , 

.局部变量 返回, 整数型, , , 

赋值 (返回, ExitThread (线程句柄))
返回 (返回)


.子程序 取当前线程伪句柄, 整数型, 公开, GetCurrentThread $(b)获取当前线程的一个伪句柄  当前线程的伪句柄
.局部变量 返回, 整数型, , , 

赋值 (返回, GetCurrentThread ())
返回 (返回)


.子程序 取当前进程伪句柄, 整数型, 公开, GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄
.局部变量 返回, 整数型, , , 

赋值 (返回, GetCurrentProcess ())
返回 (返回)



.子程序 取线程优先级, 整数型, 公开, GetThreadPriority
.参数 线程句柄, 整数型, , 线程句柄

.局部变量 返回, 整数型, , , 

赋值 (返回, GetThreadPriority (线程句柄))
返回 (返回)


.子程序 取特定进程优先级, 整数型, 公开, GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 进程句柄;

.局部变量 返回, 整数型, , , 

赋值 (返回, GetPriorityClass (进程句柄))
返回 (返回)


.子程序 置线程优先级, 整数型, 公开, $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
.参数 线程句柄, 整数型, , hThread
.参数 优先权, 整数型, 可空, nPriority  默认-2 例如:-2 更过自己去搜索下

.局部变量 返回, 整数型, , , 
.局部变量 变量, 整数型, , , 

.如果真 (是否为空 (优先权))
    赋值 (优先权, -2)
.如果真结束

赋值 (返回, SetThreadPriority (线程句柄, 优先权))
返回 (返回)


.子程序 置进程优先级, 整数型, 公开, $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 
.参数 级别, 整数型, 可空, 默认64 例如:64 更过自己去搜索下

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (级别))
    赋值 (级别, 64)
.如果真结束

赋值 (返回, SetPriorityClass (进程句柄, 级别))
返回 (返回)


.子程序 为进程指定CPU, 整数型, 公开, 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
.参数 进程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (进程句柄))
    赋值 (进程句柄, -1)
.如果真结束

赋值 (返回, SetProcessAffinityMask (进程句柄, 参数))
返回 (返回)


.子程序 为线程指定CPU, 整数型, 公开, 设置CPU亲和性  线程句柄SetThreadAffinityMask
.参数 线程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (线程句柄))
    赋值 (线程句柄, -1)
.如果真结束

赋值 (返回, SetThreadAffinityMask (线程句柄, 参数))
返回 (返回)


.子程序 创建扩展线程, 整数型, 公开, SHCreateThread
.参数 线程地址, 整数型, , pfnThreadProc   到数值 (&_按钮1_被单击)

.局部变量 a, 整数型, , , 

赋值 (a, SHCreateThread (线程地址, 0, 0, 0))
返回 (a)

.类模块 时钟类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 设置时钟, 整数型, 公开, SetTimer
.参数 窗口句柄, 空白型, , 
.参数 标识, 整数型, , 默认 MBTIMERID=999
.参数 时钟周期, 整数型, , 
.参数 子程序指针, 整数型, , 

返回 (SetTimer (窗口句柄, 标识, 时钟周期, 子程序指针))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 销毁时钟, 整数型, 公开, KillTimer
.参数 窗口句柄, 空白型, , 
.参数 标识, 整数型, , 默认 MBTIMERID=999

返回 (KillTimer (窗口句柄, 标识))


.类模块 HTTP类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 检查Internet连接, 逻辑型, 公开, 成功返回真
.参数 Url地址, 文本型, , 

.如果 (等于 (InternetCheckConnectionA (Url地址, 1, 0), 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 打开指定网址, 整数型, 公开, 
.参数 网址, 文本型, , 

返回 (ShellExecuteA (0, “open”, 网址, “”, “”, 1))

.子程序 HTTP下载, 逻辑型, 公开, 成功返回真 失败返回假
.参数 URL, 文本型, , 
.参数 保存文件名, 文本型, , 

.局部变量 返回, 整数型, , , 
.局部变量 返回1, 逻辑型, , , 

.如果 (等于 (URLDownloadToFileA (0, URL, 保存文件名, 0, 0), 0))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 访问网页, 字节集, 公开, 失败返回空字节集
.参数 网址, 文本型, , 

.局部变量 strAgent, 文本型, , , 
.局部变量 internet句柄, 整数型, , , 
.局部变量 internet线程句柄, 整数型, , , 
.局部变量 dwSize, 长整数型, , , 
.局部变量 szHead, 文本型, , , 
.局部变量 szTemp, 字节集, , , 
.局部变量 dwByteToRead, 整数型, , , 
.局部变量 dwSizeOfRq, 整数型, , , 
.局部变量 字节集缓存, 字节集, , , 
.局部变量 缓存大小, 整数型, 静态, , 

赋值 (字节集缓存, 字节集_文本到字节集 (“”))
 ' strAgent ＝ “Agent” ＋ 到文本 (取启动时间 ())
赋值 (szHead, 相加 (“Accept: */*”, #换行符, “Accept-Language: zh-cn”, #换行符, “Accept-Encoding: gzip, deflate”, #换行符, “User-Agent: Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.0; MyIE2; .NET CLR 1.1.4322)”))
赋值 (dwByteToRead, 0)
赋值 (dwSizeOfRq, 4)
赋值 (internet句柄, InternetOpenA (strAgent, 0, “”, “”, 0))
.如果真 (不等于 (internet句柄, 0))
    赋值 (internet线程句柄, InternetOpenUrlA (internet句柄, 网址, szHead, 文本_取长度 (szHead), 2214592768, 0))
    .如果真 (不等于 (internet线程句柄, 0))
        .如果真 (不等于 (HttpQueryInfoA (internet线程句柄, 536870917, dwByteToRead, dwSizeOfRq, 0), 0))
            赋值 (缓存大小, dwByteToRead)
            赋值 (szTemp, 字节集_取空白 (缓存大小))
            .如果真 (不等于 (InternetReadFile (internet线程句柄, szTemp, 缓存大小, dwSize), 0))
                赋值 (字节集缓存, 字节集_取左边 (szTemp, dwSize))
                InternetCloseHandle (internet线程句柄)
                InternetCloseHandle (internet句柄)
                 ' 输出调试文本 (取字节集长度 (字节集缓存))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束

返回 (字节集缓存)


.子程序 取远程文件尺寸, 整数型, 公开, 成功返回大小,失败返回-1
.参数 网址, 文本型, , 

.局部变量 strAgent, 文本型, , , 
.局部变量 internet句柄, 整数型, , , 
.局部变量 internet线程句柄, 整数型, , , 
.局部变量 dwSize, 长整数型, , , 
.局部变量 szHead, 文本型, , , 
.局部变量 szTemp, 字节集, , , 
.局部变量 dwByteToRead, 整数型, , , 
.局部变量 dwSizeOfRq, 整数型, , , 

赋值 (szHead, 相加 (“Accept: */*”, #换行符, “Accept-Language: zh-cn”, #换行符, “Accept-Encoding: gzip, deflate”, #换行符, “User-Agent: Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.0; MyIE2; .NET CLR 1.1.4322)”))
赋值 (dwByteToRead, 0)
赋值 (dwSizeOfRq, 4)
赋值 (internet句柄, InternetOpenA (strAgent, 0, “”, “”, 0))
.如果真 (不等于 (internet句柄, 0))
    赋值 (internet线程句柄, InternetOpenUrlA (internet句柄, 网址, szHead, 文本_取长度 (szHead), 2214592768, 0))
    .如果真 (不等于 (internet线程句柄, 0))
        .如果真 (不等于 (HttpQueryInfoA (internet线程句柄, 536870917, dwByteToRead, dwSizeOfRq, 0), 0))
            返回 (dwByteToRead)
            
        .如果真结束
        
    .如果真结束
    
.如果真结束

返回 (-1)


.子程序 取网址文件名, 文本型, 公开, 取指定网址中的文件名(返回文件名)
.参数 网址, 文本型, , 网址

返回 (文本_取右边 (网址, 相减 (文本_取长度 (网址), 文本_倒找 (网址, “/”, , 假))))

.类模块 MD5类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 MD5_文本, 文本型, 公开, MD5Init(初始化) MD5Update(开始编码) MD5Final(完成)
.参数 文本, 文本型, , 

.局部变量 MD5文本, 文本型, , , 
.局部变量 十六进制文本, 文本型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 MD5_CTX, MD5_CTX, , , 
.局部变量 计次, 整数型, , , 

赋值 (文本长度, 文本_取长度 (文本))
MD5Init (MD5_CTX) ' 初始化
MD5Update_文本 (MD5_CTX, 文本, 文本长度) ' 开始编码
MD5Final (MD5_CTX) ' 完成
.计次循环首 (16, 计次)
    赋值 (十六进制文本, 数值_取十六进制文本 (MD5_CTX.digest [计次]))
    .如果真 (等于 (文本_取长度 (十六进制文本), 1))
        赋值 (MD5文本, 相加 (MD5文本, “0”))
    .如果真结束
    赋值 (MD5文本, 相加 (MD5文本, 十六进制文本))
.计次循环尾 ()
返回 (MD5文本)

.子程序 MD5_文件, 文本型, 公开, 
.参数 文件, 文本型, , 

.局部变量 MD5文本, 文本型, , , 
.局部变量 文件号, 空白型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (文件号, 文件_打开文件 (文件, , ))
.如果真 (等于 (文件号, -1))
    返回 (“”)
.如果真结束
赋值 (字节集, 文件_读入字节集 (文件号, 文件_取文件长度 (文件号)))
文件_关闭文件 (文件号)
赋值 (MD5文本, MD5_字节集 (字节集))
赋值 (字节集, 到字节集 (“”))
返回 (MD5文本)

.子程序 MD5_字节集, 文本型, 公开, 
.参数 字节集, 字节集, , 

.局部变量 MD5文本, 文本型, , , 
.局部变量 十六进制文本, 文本型, , , 
.局部变量 字节集长度, 整数型, , , 
.局部变量 MD5_CTX, MD5_CTX, , , 
.局部变量 计次, 整数型, , , 

赋值 (字节集长度, 字节集_取长度 (字节集))
MD5Init (MD5_CTX) ' 初始化
MD5Update_字节集 (MD5_CTX, 字节集, 字节集长度) ' 开始编码
MD5Final (MD5_CTX) ' 完成
.计次循环首 (16, 计次)
    赋值 (十六进制文本, 数值_取十六进制文本 (MD5_CTX.digest [计次]))
    赋值 (十六进制文本, 删除零字首 (十六进制文本))
    .如果真 (等于 (文本_取长度 (十六进制文本), 1))
        赋值 (MD5文本, 相加 (MD5文本, “0”))
        
    .如果真结束
    赋值 (MD5文本, 相加 (MD5文本, 十六进制文本))
.计次循环尾 ()
返回 (MD5文本)


.子程序 删除零字首, 文本型, , 
.参数 文本, 文本型, , 

返回 (文本_子文本替换 (文本, “000000”, “”, 1, 6, 假))

.子程序 MD5_低十六位, 文本型, 公开, 
.参数 文本, 文本型, , 

返回 (文本_取左边 (文本, 16))

.子程序 MD5_中十六位, 文本型, 公开, 
.参数 文本, 文本型, , 

返回 (文本_取中间 (文本, 9, 16))

.子程序 MD5_高十六位, 文本型, 公开, 
.参数 文本, 文本型, , 

返回 (文本_取右边 (文本, 16))

.类模块 转换类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 转换十六到十, 文本型, 公开, 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

.变量循环首 (1, 文本_取长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 文本_取中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (文本_寻找 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (文本_取长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
返回 (文本_整数到文本 (结果))

.子程序 转换任意进制, 文本型, 公开, 失败返回""  支持2-62进制转换
.参数 文本, 文本型, , 欲被转换的文本(不可以转换负数以及小数)
.参数 被转换进制, 整数型, , 被转换文本的进制(2-62之间)
.参数 转换的进制, 整数型, , 要转换到的进制(2-62之间)

.局部变量 欲转换文本, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量, 整数型, , , 

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 62), 大于 (转换的进制, 62))) ' 判断两个“进制系数”是否正确
    返回 (“”)
.如果真结束
.计次循环首 (文本_取长度 (文本), 计次变量)
    赋值 (临时文本, 文本_取中间 (文本, 计次变量, 1))
    .如果真 (等于 (文本_寻找 (文本_取左边 (#进制参数, 被转换进制), 临时文本, , 假), -1))
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (计次变量, 文本_取长度 (文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (临时文本, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (被转换进制, 转换的进制))
    返回 (文本)
.如果真结束
.计次循环首 (文本_取长度 (文本), 计次变量) ' 整数转换开始
    赋值 (临时数值, 相加 (相乘 (相减 (文本_寻找 (#进制参数, 文本_取中间 (文本, 计次变量, 1), , 假), 1), 求次方 (被转换进制, 相减 (文本_取长度 (文本), 计次变量))), 临时数值))
.计次循环尾 ()
.判断循环首 (大于 (临时数值, 相减 (转换的进制, 1)))
    赋值 (欲转换文本, 相加 (文本_取中间 (#进制参数, 相加 (文本_到整数 (文本_整数到文本 (求余数 (临时数值, 转换的进制))), 1), 1), 欲转换文本))
    赋值 (临时数值, 取整 (相除 (临时数值, 转换的进制)))
.判断循环尾 ()
赋值 (欲转换文本, 相加 (文本_取中间 (#进制参数, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)

.程序集 剪切板, , , 

.子程序 剪辑板_SetClipboardData, 整数型, , (0为失败)
.参数 剪贴板格式, 整数型, , wFormat
.参数 内存句柄, 整数型, , hMem

 ' 返回 (剪辑板_SetClipboardData (剪贴板格式, 内存句柄))

.子程序 剪辑板_清除, 整数型, 公开, 清除当前 Windows 系统剪辑板中的所有数据 由打开 清除 关闭组成
.参数 窗口句柄, 整数型, , 

.局部变量 a, 整数型, , , 

 ' OpenClipboard (窗口句柄)

 ' a ＝ EmptyClipboard ()
 ' CloseClipboard ()

 ' 返回 (a)

.子程序 剪辑板_格式是否可用, 逻辑型, 公开, IsClipboardFormatAvailable
.参数 格式, 整数型, , “常量  #剪辑板_文本 = 1”  ,  “常量  #剪辑板_位图 = 2”  

 ' 输出调试文本 (“常量  #剪辑板_文本 = 1”)
 ' 输出调试文本 (“常量  #剪辑板_位图 = 2”)

 ' .如果真 (等于 (IsClipboardFormatAvailable (格式), 0))
     ' 返回 (假)
    
.如果真结束
 ' 返回 (真)

.子程序 剪辑板_取窗口句柄, 整数型, 公开, GetOpenClipboardWindow
 ' 返回 (GetOpenClipboardWindow ())


.子程序 剪辑板_取剪辑版序号, 整数型, , GetClipboardSequenceNumber
 ' 返回 (GetClipboardSequenceNumber ())

.子程序 剪辑板_取文本, 文本型, 公开, GetClipboardData
.局部变量 数据句柄, 整数型, , , 
.局部变量 文本, 文本型, , , 

 ' OpenClipboard (GetActiveWindow ())

 ' .如果真 (等于 (剪辑板_格式是否可用 (1), 真))
     ' 数据句柄 ＝ GetClipboardData (#CF_TEXT)
     ' 文本 ＝ 锁住全局内存块 (数据句柄)
     ' 解锁全局内存块 (数据句柄)  ' 释放锁内存
     ' CloseClipboard ()
     ' 返回 (文本)
    
.如果真结束
 ' CloseClipboard ()
 ' 返回 (“”)


.类模块 加密算法, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 BASE64加密, 字节集, 公开, 
.参数 待编码数据, 字节集, , 待编码字节集
.参数 密码, 文本型, 可空, 默认“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”

.局部变量 余数, 空白型, , , 
.局部变量 临时, 字节型, , "3", 
.局部变量 变量, 空白型, , , 
.局部变量 集合, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 字符, 字节集, , , 
.局部变量 i, 空白型, , , 

赋值 (长度, 字节集_取长度 (待编码数据))
.如果真 (小于 (长度, 1))
    返回 (字节集_文本到字节集 (“”))
.如果真结束
赋值 (余数, 求余数 (长度, 3))
.如果真 (大于 (余数, 0))
    赋值 (待编码数据, 相加 (待编码数据, 取空白字节集 (相减 (3, 余数))))
.如果真结束
赋值 (长度, 字节集_取长度 (待编码数据))
赋值 (字符, 取空白字节集 (相除 (相乘 (长度, 4), 3)))
赋值 (i, 1)
.判断开始 (是否为空 (密码))
    赋值 (集合, 字节集_文本到字节集 (“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”))
.默认
    赋值 (集合, 字节集_文本到字节集 (密码))
.判断结束

.变量循环首 (1, 长度, 3, 变量)
    赋值 (临时 [1], 待编码数据 [变量])
    赋值 (临时 [2], 待编码数据 [相加 (变量, 1)])
    赋值 (临时 [3], 待编码数据 [相加 (变量, 2)])
    赋值 (字符 [i], 集合 [相加 (右移 (临时 [1], 2), 1)])
    赋值 (字符 [相加 (i, 1)], 集合 [相加 (左移 (位与 (临时 [1], 3), 4), 右移 (临时 [2], 4), 1)])
    赋值 (字符 [相加 (i, 2)], 集合 [相加 (左移 (位与 (临时 [2], 15), 2), 右移 (临时 [3], 6), 1)])
    赋值 (字符 [相加 (i, 3)], 集合 [相加 (位与 (临时 [3], 63), 1)])
    赋值 (i, 相加 (i, 4))
.变量循环尾 ()
.如果真 (大于 (余数, 0))
    赋值 (长度, 字节集_取长度 (字符))
    .如果 (等于 (余数, 1))
        赋值 (字符 [相减 (长度, 1)], 数值_字节集到整数 (字节集_文本到字节集 (“=”), ))
         ' 取代码 (“=”, )
         ' 数值_字节集到整数 (字节集_文本到字节集 (“=”), )
        赋值 (字符 [长度], 数值_字节集到整数 (字节集_文本到字节集 (“=”), ))
    .否则
        赋值 (字符 [长度], 数值_字节集到整数 (字节集_文本到字节集 (“=”), ))
    .如果结束
    
.如果真结束
返回 (字符)

.子程序 BASE64解密, 字节集, 公开, BASE64解码处理(返回解码后的字节集数据)
.参数 编码文本, 字节集, , 待解码的文本
.参数 密码, 文本型, 可空, 默认“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”

.局部变量 文本长度, 空白型, , , 
.局部变量 整倍数, 空白型, , , 
.局部变量 三字节组, 字节型, , "3", 
.局部变量 四字节组, 字节型, , "4", 
.局部变量 编码值, 空白型, , , 
.局部变量 X, 空白型, , , 
.局部变量 n, 空白型, , , 
.局部变量 二进制数据, 字节集, 静态, , 

赋值 (文本长度, 字节集_取长度 (编码文本))
赋值 (整倍数, 整除 (文本长度, 4))
.如果真 (不等于 (求余数 (文本长度, 4), 0))
    赋值 (整倍数, 相加 (整倍数, 1))
.如果真结束
.计次循环首 (整倍数, X)
    .计次循环首 (4, n)
        赋值 (四字节组 [n], 数值_字节集到整数 (编码文本, 相加 (相乘 (相减 (X, 1), 4), n)))
         ' 调试输出 (四字节组 [n])
         ' 取代码 (编码文本, (X － 1) × 4 ＋ n)
         ' 数值_字节集到整数 (字节集_文本到字节集 (编码文本), (X － 1) × 4 ＋ n)
        .判断开始 (是否为空 (密码))
            赋值 (编码值, 文本_寻找 (“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”, 文本_字符 (四字节组 [n]), , 假))
        .默认
            赋值 (编码值, 文本_寻找 (密码, 文本_字符 (四字节组 [n]), , 假))
        .判断结束
        
         ' 输出调试文本 (编码值)
         ' 数值_字节集到整数 (字节集_字节型到字节集 ())
        .如果真 (等于 (编码值, -1))
            跳出循环 ()
        .如果真结束
        赋值 (四字节组 [n], 相减 (编码值, 1))
    .计次循环尾 ()
    赋值 (三字节组 [1], 位或 (相乘 (四字节组 [1], 4), 相除 (四字节组 [2], 16)))
    赋值 (三字节组 [2], 位或 (相乘 (四字节组 [2], 16), 相除 (四字节组 [3], 4)))
    赋值 (三字节组 [3], 位或 (相乘 (四字节组 [3], 64), 四字节组 [4]))
     ' 输出调试文本 (到文本 (二进制数据))
     ' 二进制数据 ＝ 二进制数据 ＋ 字节集_文本到字节集 (文本_字节型数组到文本 (三字节组))
     ' 输出调试文本 (文本_字节型数组到文本 (三字节组))
    赋值 (二进制数据, 相加 (二进制数据, 字节集_字节数组到字节集 (三字节组)))
    
     ' 输出调试文本 (文本_字节型数组到文本 (三字节组))
.计次循环尾 ()
.如果真 (小于 (n, 5)) ' 最后一组4字符是提前退出的,截取字节集
    赋值 (n, 相减 (5, n))
    赋值 (二进制数据, 字节集_取左边 (二进制数据, 相减 (字节集_取长度 (二进制数据), n)))
.如果真结束
返回 (二进制数据)

.程序集 窗口, , , 

.子程序 窗口_句柄是否有效, 逻辑型, 公开, 判断窗口句柄是否有效(返回真,无效返回假) [斩月]
.参数 窗口句柄, 空白型, , 

.如果 (等于 (IsWindow (窗口句柄), 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 窗口_闪动, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 

FlashWindow (窗口句柄, 真)

.子程序 窗口_取当前窗口, 整数型, 公开, GetActiveWindow获得活动窗口的句柄 返回句柄
.局部变量 返回, 整数型, , , 

赋值 (返回, GetActiveWindow ())
返回 (返回)

.子程序 窗口_判断最大化, 逻辑型, 公开, IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
.参数 窗口句柄, 整数型, 可空, hwnd,欲测试的窗口的句柄

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束

赋值 (变量, IsZoomed (窗口句柄))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束
返回 (返回)


.子程序 窗口_获得焦点, 整数型, 公开, SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
.参数 窗口句柄, 整数型, 可空, hWnd

.局部变量 变量, 整数型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束

赋值 (变量, SetFocus (窗口句柄))
返回 (变量)


.子程序 窗口_是否可见, 逻辑型, 公开, 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , 

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 


赋值 (变量, IsWindowVisible (窗口句柄))

.如果 (等于 (变量, 0))
    赋值 (返回, 假)
    
.否则
    
    赋值 (返回, 真)
.如果结束

返回 (返回)

.子程序 窗口_找子窗口, 整数型, 公开, 返回查找到的句柄值
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
.参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"

.局部变量 返回, 整数型, , , 

赋值 (返回, FindWindowExA (窗口句柄1, 窗口句柄2, 欲搜索的类名1, 欲搜索的类名2))
返回 (返回)

.子程序 窗口_取类名, 文本型, 公开, 返回窗口类名
.参数 窗口句柄, 整数型, , 

.局部变量 返回, 文本型, , , 

赋值 (返回, 取空白文本 (255))

GetClassNameA (窗口句柄, 返回, 255)

返回 (返回)

.子程序 窗口_窗口取标题, 文本型, 公开, 取指定窗口句柄的窗口标题(返回窗口标题,失败返回空文本) [斩月]
.参数 窗口句柄, 整数型, , 指定的窗口句柄

.局部变量 窗口标题, 文本型, , , 

赋值 (窗口标题, 文本_取空白 (255))
GetWindowTextA (窗口句柄, 窗口标题, 255)
返回 (窗口标题)

.子程序 窗口_恢复窗口, 整数型, 公开, 恢复被最小化或最大化的窗口
.参数 窗口句柄, 整数型, , hwnd，窗口句柄

.局部变量 a, 空白型, , , 

赋值 (a, OpenIcon (窗口句柄))
返回 (a)

.子程序 窗口_取窗口句柄, 整数型, 公开,  参数填写正确的话返回窗口句柄
.参数 窗口类名, 文本型, , lpClassName，参见相关帮助
.参数 窗口文本, 文本型, , lpWindowName，参见相关帮助

.局部变量 a, 空白型, , , 

赋值 (a, FindWindowA (窗口类名, 窗口文本))
返回 (a)

.子程序 窗口_取窗口句柄_类名, 整数型, 公开,  参数填写正确的话返回窗口句柄
.参数 窗口类名, 文本型, , lpClassName，参见相关帮助

.局部变量 a, 空白型, , , 

赋值 (a, FindWindowA_类名 (窗口类名, 0))
返回 (a)

.子程序 窗口_取窗口句柄_标题, 整数型, 公开,  参数填写正确的话返回窗口句柄
.参数 窗口标题, 文本型, , lpWindowName，参见相关帮助

.局部变量 a, 空白型, , , 

赋值 (a, FindWindowA_标题 (0, 窗口标题))
返回 (a)

.子程序 窗口_置顶, 整数型, 公开, 
.参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.局部变量 返回, 整数型, , , 


赋值 (返回, BringWindowToTop (窗口句柄))
返回 (返回)

.子程序 窗口_取标题文本长度, 整数型, 公开, 
.参数 窗口句柄, 整数型, , 

.局部变量 a, 空白型, , , 

赋值 (a, GetWindowTextLengthA (窗口句柄))

返回 (a)

.子程序 窗口_设置标题, 整数型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 

.局部变量 a, 空白型, , , 

赋值 (a, SetWindowTextA (窗口句柄, 窗口标题))
返回 (a)



.子程序 窗口_锁定窗口, 整数型, 公开, LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
.参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁

.局部变量 返回, 整数型, , , 

赋值 (返回, LockWindowUpdate (窗口句柄))
返回 (返回)


.子程序 窗口_改变窗口, 整数型, 公开, MoveWindow
.参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
.参数 左侧位置, 整数型, , x，窗口新的左侧位置
.参数 顶部位置, 整数型, , y，窗口新的顶部位置
.参数 新宽度, 整数型, , nWidth，窗口的新宽度
.参数 新高度, 整数型, , nHeight，窗口的新高度
.参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.局部变量 返回, 整数型, , , 

赋值 (返回, MoveWindow (窗口句柄, 左侧位置, 顶部位置, 新宽度, 新高度, 是否重画))

返回 (返回)


.子程序 窗口_设置显示状态, 整数型, 公开, ShowWindow返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。  控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
.参数 窗口句柄, 整数型, , hWnd：窗口句柄。
.参数 窗口如何显示, 整数型, , nCmdShow：指定窗口如何显示 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活 1 最小化取消激活 2 还原激活 3 显示激活 4 最大化激活 5 最小化激活 6 最小化 7 显示 8 最近状态显示 9 还原 更多查看常量:ShowWindow

.局部变量 变量, 整数型, , , 

赋值 (变量, ShowWindow (窗口句柄, 窗口如何显示))

返回 (变量)

.子程序 窗口_设置窗口位置, 逻辑型, 公开, SetWindowPos
.参数 窗口句柄, 整数型, 可空, Long，欲定位的窗口
.参数 定位类型, 整数型, , Long，窗口句柄。 取－1表示在最顶层显示窗口，取1表示在最底层显示；  在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
.参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
.参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
.参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
.参数 窗口新高度, 整数型, , Long，指定新的窗口高度
.参数 显示方式, 整数型, 可空, Long参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 ，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束


赋值 (变量, SetWindowPos (窗口句柄, 定位类型, 窗口新横坐标, 窗口新纵坐标, 窗口新宽度, 窗口新高度, 显示方式))

.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束

返回 (返回)


.子程序 窗口_总在最前, 逻辑型, 公开, SetWindowPos
.参数 窗口句柄, 整数型, 可空, 
.参数 总在最前, 逻辑型, 可空, 默认为真

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束

.如果真 (是否为空 (总在最前))
    赋值 (总在最前, 真)
.如果真结束



.如果 (等于 (总在最前, 真))
    赋值 (变量, SetWindowPos (窗口句柄, -1, 0, 0, 0, 0, 3))
.否则
    
    
    
    赋值 (变量, SetWindowPos (窗口句柄, 1, 0, 0, 0, 0, 3))
.如果结束




.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束

返回 (返回)



.子程序 窗口_取焦点窗口, 整数型, 公开, GetFocus，获得拥有输入焦点的窗口的句柄
.局部变量 返回, 整数型, , , 

赋值 (返回, GetFocus ())
返回 (返回)


.子程序 窗口_取坐标句柄, 整数型, 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄) [斩月]
.参数 水平位置, 整数型, , 句柄组件的x坐标“X轴光标”
.参数 垂直位置, 整数型, , 句柄组件的y坐标“Y轴光标”

返回 (WindowFromPoint (水平位置, 垂直位置))

.子程序 窗口_置父窗口, 逻辑型, 公开, 返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
.参数 子窗口句柄, 整数型, , hWndChild
.参数 新的父窗口句柄, 整数型, , hWndNewParent

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (变量, SetParent (子窗口句柄, 新的父窗口句柄))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束

返回 (返回)



.子程序 窗口_设置窗口前台, 逻辑型, 公开, SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.局部变量 a, 整数型, , , 

 ' 在应用程序中有时我们需要用Bringwindowtotop将指定的窗口带至窗口列表顶部。倘若它部分或全部隐藏于其他窗口下面，则将隐藏的部分完全显示出来。但是在某些情况下这个函数并不能达到我们想要的效果，倘若某窗口并非前台应用程序的一部分，那么一旦随同该窗口调用本函数，仍会将窗口带至它自己那个应用程序的窗口列表顶部。但是，不会同时使那个应用成为前台应用程序。这意味着在调用了本函数后，窗口仍会保持隐藏状态。那么如何使应用成为前台应用呢？
 ' 我们可以使用SetForegroundWindow函数。
赋值 (a, SetForegroundWindow (窗口句柄))
.如果真 (不等于 (a, 0))
    返回 (真)
    
.如果真结束
返回 (假)


.子程序 窗口_是否最小化, 逻辑型, 公开, IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.局部变量 a, 整数型, , , 

赋值 (a, IsIconic (窗口句柄))
.如果真 (不等于 (a, 0))
    返回 (真)
    
.如果真结束
返回 (假)


.子程序 窗口_呼叫窗口函数地址, 整数型, 公开, CallWindowProcA
.参数 前一窗口函数地址, 整数型, , 
.参数 窗口句柄, 整数型, 可空, 
.参数 消息值, 整数型, 可空, 
.参数 附加参数1, 整数型, 可空, 
.参数 附加参数2, 整数型, 可空, 

.局部变量 a, 整数型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
    
.如果真结束
赋值 (a, CallWindowProcB (前一窗口函数地址, 窗口句柄, 消息值, 附加参数1, 附加参数2))
返回 (a)


.子程序 窗口_禁止窗口, 整数型, 公开, EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
.参数 窗口句柄, 整数型, 可空, hwnd，窗口句柄
.参数 标识符, 整数型, , 1允许，0禁止

.局部变量 a, 整数型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
    
.如果真结束
赋值 (a, EnableWindow (窗口句柄, 标识符))

返回 (a)


.子程序 窗口_设置透明度A, 逻辑型, 公开, SetLayeredWindowAttributes 设置窗口透明度
.参数 窗口句柄, 整数型, 可空, 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
.参数 颜色值, 整数型, 可空, crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
.参数 透明度, 整数型, 可空, 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
.参数 透明方式, 整数型, 可空, dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。

.局部变量 Ret, 整数型, , , 
.局部变量 返回, 整数型, , , 

 ' 要使使窗体拥有透明效果,首先要有WS_EX_LAYERED扩展属性
.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束
.如果真 (是否为空 (透明度))
    赋值 (透明度, 155)
.如果真结束
.如果真 (是否为空 (透明方式))
    赋值 (透明方式, 2)
.如果真结束
赋值 (Ret, GetWindowLongA (窗口句柄, -20))
赋值 (Ret, 位或 (Ret, 524288))
SetWindowLongA (窗口句柄, -20, Ret)
赋值 (返回, SetLayeredWindowAttributes (窗口句柄, 颜色值, 透明度, 透明方式))
.如果真 (不等于 (返回, 0))
    返回 (真)
    
.如果真结束
返回 (假)


.子程序 窗口_取得窗口信息, 整数型, 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
.参数 窗口句柄, 整数型, 可空, 欲为其获取信息的窗口的句柄
.参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束
赋值 (返回, GetWindowLongA (窗口句柄, 属性))
返回 (返回)


.子程序 窗口_设置窗口信息, 整数型, 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
.参数 窗口句柄, 整数型, 可空, hwnd，欲为其取得信息的窗口的句柄
.参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
.参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.局部变量 返回, 整数型, , , 

.如果真 (是否为空 (窗口句柄))
    赋值 (窗口句柄, GetActiveWindow ())
.如果真结束
赋值 (返回, SetWindowLongA (窗口句柄, 窗口信息值, 窗口信息新值))
返回 (返回)


.子程序 窗口_取剪辑板窗口句柄, 整数型, 公开, GetOpenClipboardWindow
返回 (GetOpenClipboardWindow ())


.子程序 窗口_取对话框中指定控件的标题或文本, 整数型, 公开, 该函数用于获取对话框中指定控件的标题或文本
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
.参数 缓冲区最大字符数, 整数型, , nMaxCount

返回 (GetDlgItemTextA (对话框的句柄, 指定控件的标识符, 缓冲区, 缓冲区最大字符数))


.子程序 窗口_设置对话框中控制的文本和标题, 整数型, 公开, 该函数设置对话框中控制的文本和标题。
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 设置文本, 文本型, , lpString  

返回 (SetDlgItemTextA (对话框的句柄, 指定控件的标识符, 设置文本))


.子程序 窗口_枚举窗口列表中的所有父窗口, 整数型, 公开, 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
.参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
.参数 自定义数值, 整数型, , lParam,参见相关帮助

返回 (EnumWindows (函数指针, 自定义数值))

.子程序 窗口_返回值为给定控制的窗口句柄, 整数型, 公开, 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

返回 (GetDlgItemA (对话框的句柄, 指定控件的标识符))


.子程序 窗口_销毁, 整数型, 公开, DestroyWindow
.参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

返回 (DestroyWindow (窗口句柄))


.程序集 磁盘, , , 

.子程序 磁盘_枚举文件, 整数型, , 返回文件数量
.参数 指定目录, 文本型, , 
.参数 返回文件, 文本型, 参考 可空 数组, 

.局部变量 文件名, 文本型, , , 
.局部变量 目录, 文本型, , , 
.局部变量 文件, 文本型, , "0", 
.局部变量 操作目录, 文本型, , , 

.如果 (等于 (文本_倒找 (指定目录, “\”, 1, 假), -1))
    赋值 (操作目录, 相加 (指定目录, “\”))
.否则
    赋值 (操作目录, 指定目录)
.如果结束
赋值 (文件名, 寻找文件 (相加 (操作目录, “\*.*”), ))
.判断循环首 (不等于 (文件名, “”))
    .如果 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
        加入成员 (文件, 文件名)
         ' 输出调试文本 (文件名)
         ' 文件 ＝ 文件 ＋ 文件名 ＋ “|”
    .否则
        
    .如果结束
    赋值 (文件名, 寻找文件 ())
    
.判断循环尾 ()
赋值 (返回文件, 文件)
返回 (取数组成员数 (文件))

.子程序 磁盘_枚举目录, 整数型, , 返回目录数量
.参数 指定目录, 文本型, , 
.参数 返回目录, 文本型, 参考 可空 数组, 

.局部变量 文件名, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 完整路径, 空白型, , , 
.局部变量 NN, 空白型, , , 
.局部变量 操作目录, 文本型, , , 
.局部变量 目录, 文本型, , "0", 

.如果 (等于 (文本_倒找 (指定目录, “\”, 1, 假), -1))
    赋值 (操作目录, 相加 (指定目录, “\”))
.否则
    赋值 (操作目录, 指定目录)
.如果结束

赋值 (文件名, 寻找文件 (相加 (操作目录, “*”), #子目录))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (文本_取左边 (文件名, 1), “.”), 不等于 (文本_到小写 (文件名), “recycled”)))
         ' 输出调试文本 (文件名)
        加入成员 (目录, 文件名)
    .如果真结束
    赋值 (文件名, 寻找文件 (#子目录))
    
.判断循环尾 ()
赋值 (返回目录, 目录)
 ' .计次循环首 (取数组成员数 (目录), NN)
     ' 文件名 ＝ 目录 [NN]
     ' 输出调试文本 (文件名)
 ' .计次循环尾 ()
返回 (取数组成员数 (目录))

.子程序 磁盘_取剩余空间, 长整数型, , 失败返回-1。如果磁盘剩余空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 数值, 长整数型, , , 
.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

返回 (选择 (等于 (GetDiskFreeSpaceExA (相加 (文本_取左边 (磁盘驱动器字符, 1), “:\”), 数值, 总大小, 剩余空间), 0), -1, 选择 (单位, 剩余空间, 相除 (剩余空间, 1024))))

.子程序 磁盘_取总空间, 长整数型, , 失败返回-1。如果磁盘总空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 数值, 长整数型, , , 
.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

返回 (选择 (等于 (GetDiskFreeSpaceExA (相加 (文本_取左边 (磁盘驱动器字符, 1), “:\”), 数值, 总大小, 剩余空间), 0), -1, 选择 (单位, 总大小, 相除 (总大小, 1024))))

.子程序 磁盘_取已用空间, 长整数型, , 失败返回-1。如果磁盘已用空间数目大于长整数范围则得到的结果是错误的。
.参数 磁盘驱动器字符, 文本型, , 
.参数 单位, 逻辑型, 可空, 真为以字节为单位，假为以KB为单位，留空默认为假。

.局部变量 总大小, 长整数型, , , 
.局部变量 剩余空间, 长整数型, , , 

赋值 (总大小, 磁盘_取总空间 (磁盘驱动器字符, 单位))
赋值 (剩余空间, 磁盘_取剩余空间 (磁盘驱动器字符, 单位))
返回 (选择 (或者 (等于 (总大小, -1), 等于 (剩余空间, -1)), -1, 相减 (总大小, 剩余空间)))

.子程序 磁盘_取驱动器列表, 整数型, , 成功返回驱动器数目，失败返回0。
.参数 列表数组, 文本型, 参考 可空 数组, 驱动器列表以参考数组形式传回，请提供一个变量接收。留空则只返回驱动器数目。数组一个成员含一个驱动器盘符。

.局部变量 字节集, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 临时, 字节集, , , 
.局部变量 计次, 整数型, , , 

清除数组 (列表数组)
赋值 (长度, GetLogicalDriveStringsA (0, 字节集))
.如果真 (等于 (长度, 0))
    返回 (0)
.如果真结束
赋值 (字节集, 字节集_取空白 (长度))
.如果真 (等于 (GetLogicalDriveStringsA (长度, 字节集), 0))
    返回 (0)
.如果真结束
.变量循环首 (1, 相减 (长度, 2), 4, 计次)
    加入成员 (列表数组, 文本_字节集到文本 (字节集_取中间 (字节集, 计次, 3)))
.变量循环尾 ()
返回 (取数组成员数 (列表数组))

.子程序 磁盘_置卷标, 逻辑型, , 
.参数 磁盘驱动器字符, 文本型, , 
.参数 欲置入的卷标文本, 文本型, 可空, 留空默认为删除当前卷标。

返回 (SetVolumeLabelA (相加 (文本_取左边 (磁盘驱动器字符, 1), “:\”), 欲置入的卷标文本))

.子程序 磁盘_取卷标, 文本型, , 指定磁盘不存在卷标或发生错误返回空文本。
.参数 磁盘驱动器字符, 文本型, , 

.局部变量 卷标, 文本型, , , 
.局部变量 数组, 整数型, , "3", 
.局部变量 NULL, 文本型, , , 

赋值 (卷标, 文本_取空白 (256))
返回 (选择 (不等于 (GetVolumeInformationA (相加 (文本_取左边 (磁盘驱动器字符, 1), “:\”), 卷标, 256, 数组 [1], 数组 [2], 数组 [3], NULL, 0), 0), 卷标, “”))

.子程序 磁盘_取信息, 磁盘信息_, , 出错返回空信息。
.参数 欲取其信息的驱动器盘符, 文本型, , 

.局部变量 数值, 整数型, , "3", 
.局部变量 文本, 文本型, , "2", 
.局部变量 信息, 磁盘信息_, , , 
.局部变量 NULL, 磁盘信息_, , , 

赋值 (信息.盘符, 相加 (文本_取左边 (欲取其信息的驱动器盘符, 1), “:\”))
赋值 (信息.驱动器类型, GetDriveTypeA (信息.盘符))
.如果真 (或者 (等于 (信息.驱动器类型, 0), 等于 (信息.驱动器类型, 1)))
    返回 (NULL)
.如果真结束
赋值 (信息.磁盘总空间, 磁盘_取总空间 (信息.盘符, 真))
赋值 (信息.磁盘剩余空间, 磁盘_取剩余空间 (信息.盘符, 真))
赋值 (信息.磁盘已用空间, 相减 (信息.磁盘总空间, 信息.磁盘剩余空间))
.如果真 (或者 (等于 (信息.磁盘总空间, -1), 等于 (信息.磁盘剩余空间, -1)))
    .如果真 (等于 (信息.驱动器类型, #驱动器类型_光盘驱动器))
        连续赋值 (0, 信息.磁盘总空间, 信息.磁盘剩余空间, 信息.磁盘已用空间)
        返回 (信息)
    .如果真结束
    返回 (NULL)
.如果真结束
连续赋值 (文本_取空白 (256), 文本 [1], 文本 [2])
.如果真 (等于 (GetVolumeInformationA (信息.盘符, 文本 [1], 256, 数值 [1], 数值 [2], 数值 [3], 文本 [2], 256), 0))
    返回 (NULL)
.如果真结束
赋值 (信息.卷标, 文本 [1])
赋值 (信息.序列号, 数值 [1])
赋值 (信息.文件系统名称, 文本 [2])
返回 (信息)

.子程序 文件目录_取路径文件名, 文本型, , 取指定路径中的文件名(返回文件名)
.参数 路径, 文本型, , 完整路径

返回 (文本_取右边 (路径, 相减 (文本_取长度 (路径), 文本_倒找 (路径, “\”, , 假))))

.子程序 文件目录_取文件路径, 文本型, , 
.参数 文件, 文本型, , 完整路径

返回 (文本_取左边 (文件, 文本_倒找 (文件, “\”, , 假)))


.子程序 文件目录_文件名取后缀, 文本型, , 返回数据 ".exe" 的形式
.参数 文件名, 文本型, , 

返回 (文本_取右边 (文件名, 相加 (相减 (文本_取长度 (文件名), 文本_倒找 (文件名, “.”, , 假)), 1)))

.子程序 文件目录_文件名删除后缀, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 KK, 整数型, , , 

赋值 (KK, 文本_倒找 (文件名, “.”, , 假))
.如果 (等于 (KK, -1))
    返回 (文件名)
.否则
    返回 (文本_取左边 (文件名, 相减 (KK, 1)))
.如果结束


.子程序 回收站_删除到回收站, 逻辑型, , 可将文件或目录删除至回收站。参考了“美女勿进”的代码。成功返回真，失败返回假。
.参数 文件或目录名, 文本型, , 
.参数 删除选项, 整数型, 可空, 0.#无任何显示；4.#不显示进度；16.#不询问删除；1024.#不提示错误。如果被省略，默认值为0。如果要选择两项，就用“位或”将两个选项连接，例如：既不询问删除，也不提示错误则就提供参数：位或(16,1024)。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (文件或目录名), { 0, 0 }))
.如果 (等于 (删除选项, 0))
    赋值 (类型.fFlags, 1108) ' 位或 (64, 4, 1024, 16)
.否则
    赋值 (类型.fFlags, 位或 (64, 删除选项))
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 回收站_清空回收站, 空白型, , 
.参数 选项, 整数型, 可空, 0.既询问删除，也播放提示音乐；1.不询问删除；4.不播放提示音乐；5.既不询问删除，也不播放提示音乐。默认为5。
.参数 根目录, 文本型, 可空, 比如要清空D盘下的回收站就提供参数：“D:\”，如果被省略，默认为空文本，即清空所有回收站。

SHEmptyRecycleBinA (0, 根目录, 选择 (是否为空 (选项), 5, 选项))

.子程序 回收站_是否有文件, 逻辑型, , 有返回真，无返回假。
.参数 回收站位置, 文本型, 参考 可空 数组, 可提供变量接收存在文件的回收站的位置，例如如果C盘的回收站有文件则返回“C:\RECYCLER\”，数组每一个成员为一个位置。

.局部变量 结构, SHQUERYRBINFO, , , 
.局部变量 计次, 整数型, , , 
.局部变量 盘符, 文本型, , "0", 

.如果真 (等于 (是否为空 (回收站位置), 假))
    清除数组 (回收站位置)
.如果真结束
磁盘_取驱动器列表 (盘符)
赋值 (结构.结构大小, 20)
.计次循环首 (取数组成员数 (盘符), 计次)
    SHQueryRecycleBinA (相加 (盘符 [计次], “RECYCLER\”), 结构)
    .如果真 (大于 (结构.文件数, 0))
        .如果真 (是否为空 (回收站位置))
            返回 (真)
        .如果真结束
        加入成员 (回收站位置, 相加 (盘符 [计次], “RECYCLER\”))
        
    .如果真结束
    
.计次循环尾 ()
返回 (不等于 (取数组成员数 (回收站位置), 0))

.子程序 目录操作_改变目录, 逻辑型, , 
.参数 欲改变到的目录, 文本型, , 

返回 (SetCurrentDirectoryA (欲改变到的目录))

.子程序 目录操作_取当前目录, 文本型, , 
.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 

赋值 (长度, GetCurrentDirectoryA (长度, 路径))
赋值 (路径, 文本_取空白 (长度))
返回 (选择 (不等于 (GetCurrentDirectoryA (长度, 路径), 0), 路径, “”))

.子程序 目录操作_创建目录, 整数型, , 1：创建失败 2：目录已经存在 0：创建成功
.参数 目录完整路径, 文本型, , 

.局部变量 文件夹名称组, 文本型, , "0", 
.局部变量 数组成员数量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 临时目录数组, 文本型, , "0", 

文本_分割 (目录完整路径, “\”, , 临时目录数组)
复制数组 (文件夹名称组, 临时目录数组)
赋值 (数组成员数量, 取数组成员数 (文件夹名称组))
.如果真 (小于 (数组成员数量, 2))
    返回 (1)
.如果真结束
赋值 (临时文本, 文件夹名称组 [1]) ' 磁盘符号
.如果真 (不等于 (文本_取长度 (临时文本), 2)) ' c:
    返回 (1)
.如果真结束
.如果真 (不等于 (文本_取右边 (临时文本, 1), “:”)) ' 是否为“:”
    返回 (1)
.如果真结束

.计次循环首 (相减 (数组成员数量, 1), 计次变量)
    .如果真 (或者 (等于 (文件夹名称组 [相加 (计次变量, 1)], “.”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “..”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “”)))
        返回 (1)
    .如果真结束
    赋值 (临时文本, 相加 (临时文本, “\”, 文件夹名称组 [相加 (计次变量, 1)]))
    .如果 (等于 (寻找文件 (临时文本, #子目录), “”))
        .如果真 (等于 (CreateDirectoryA (临时文本, 0), 假))
            返回 (1) ' 创建失败
        .如果真结束
        
    .否则
        .如果真 (等于 (计次变量, 相减 (数组成员数量, 1)))
            返回 (2) ' 最后一个文件夹已经存在
        .如果真结束
        
    .如果结束
    
.计次循环尾 ()
返回 (0)

.子程序 目录操作_文件夹是否存在, 逻辑型, , 
.参数 欲测试的文件夹名称, 文本型, , 

.如果 (等于 (PathIsDirectoryA (欲测试的文件夹名称), 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 目录操作_文件夹是否为空, 逻辑型, , 为空则返回真，反之假。如果文件夹不存在也会返回假。
.参数 欲测试的文件夹名称, 文本型, , 

返回 (PathIsDirectoryEmptyA (欲测试的文件夹名称))

.子程序 目录操作_移动目录, 逻辑型, , 
.参数 欲移动的目录, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (目录操作_进度移动 (欲移动的目录, 移动到的位置))

.子程序 目录操作_复制目录, 逻辑型, , 
.参数 欲复制的目录, 文本型, , 
.参数 复制到的位置, 文本型, , 

返回 (目录操作_进度复制 (欲复制的目录, 复制到的位置))

.子程序 目录操作_删除目录, 逻辑型, , 
.参数 欲删除的目录, 文本型, , 

返回 (目录操作_进度删除 (欲删除的目录))

.子程序 目录操作_浏览文件夹, 文本型, , 打开一个对话框，浏览系统中存在的所有文件夹，返回被选定文件夹的路径名，如果未选中任何文件夹，则返回空文本。本命令为初级命令。参考了“泪闯天涯”的源码。
.参数 标题, 文本型, 可空, 本参数提供显示在对话框上部的标题文本。
.参数 初始目录, 文本型, 可空, 默认为桌面。
.参数 列出文件, 逻辑型, 可空, 是否显示文件列表，默认为假。
.参数 父窗口句柄, 整数型, 可空, 本参数提供需要打开浏览文件夹父窗口的句柄。可空。

.局部变量 BI, BROWSEINFO, , , 
.局部变量 lPid, 整数型, , , 
.局部变量 sPath, 文本型, , , 
.局部变量 iPos, 整数型, , , 
.局部变量 lPidlRoot, ITEMIDLIST, , , 
.局部变量 flName, 文本型, , , 
.局部变量 缓冲区, 字节集, , , 
.局部变量 字符数目, 整数型, , , 

SHGetFolderLocation (父窗口句柄, 0, 0, 0, lPidlRoot)
.如果真 (是否为空 (标题))
    赋值 (标题, “请选择文件夹路径”)
.如果真结束
赋值 (BI.hOwner, 父窗口句柄)
赋值 (BI.pidlRoot, lPidlRoot.mkid.cb)
.如果真 (等于 (是否为空 (初始目录), 假))
    赋值 (字符数目, MultiByteToWideChar (0, 0, 初始目录, -1, {  }, 0))
    赋值 (缓冲区, 字节集_取空白 (相乘 (字符数目, 2)))
    MultiByteToWideChar (0, 0, 初始目录, -1, 缓冲区, 字符数目)
    赋值 (BI.pidlRoot, ILCreateFromPathW (缓冲区))
.如果真结束
赋值 (BI.pszDisplayName, 文本_取空白 (260))
赋值 (BI.lpszTitle, 标题)
赋值 (BI.ulFlags, 119)
.如果真 (列出文件)
    赋值 (BI.ulFlags, 91127)
.如果真结束
赋值 (lPid, SHBrowseForFolderA (BI))
.如果 (不等于 (文本_寻找 (文本_删首尾空 (BI.pszDisplayName), “?”, 1, 假), -1))
    赋值 (flName, “”)
.否则
    .如果 (不等于 (lPid, 0))
        赋值 (sPath, 文本_取空白 (260))
        .如果真 (不等于 (SHGetPathFromIDListA (lPid, sPath), 0))
            赋值 (flName, sPath)
            .如果真 (等于 (文本_取长度 (flName), 3))
                赋值 (flName, 文本_取左边 (flName, 2))
            .如果真结束
            
        .如果真结束
        
    .否则
        赋值 (flName, 相加 (“\\”, 文本_删首尾空 (BI.pszDisplayName)))
        .如果真 (等于 (flName, “\\”))
            赋值 (flName, “”)
        .如果真结束
        
    .如果结束
    
.如果结束
CoTaskMemFree (lPid)
.如果真 (等于 (文本_取长度 (flName), 2))
    
    赋值 (flName, 相加 (flName, “\”))
.如果真结束
返回 (flName)

.子程序 目录操作_进度移动, 逻辑型, , 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (字节集_文本到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 目录操作_进度复制, 逻辑型, , 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (字节集_文本到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 目录操作_进度删除, 逻辑型, , 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 寻找文件夹_无子文件夹无子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 结尾有"\"
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_有子文件夹无子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件夹数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_无子文件夹有子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (文件大小)

.子程序 寻找文件夹_有子文件夹有子文件, 双精度小数型, , 
.参数 文件夹路径数组, 文本型, 参考 数组, 
.参数 子文件夹数量, 整数型, 参考 可空, 
.参数 子文件数量, 整数型, 参考 可空, 
.参数 是否处理事件, 逻辑型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 文件大小, 双精度小数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时数值, 整数型, , , 
.局部变量 i, 整数型, , , 

加入成员 (临时数组, 文件夹路径数组 [1])
.判断开始 (等于 (是否处理事件, 真))
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
             ' 处理事件 ()
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
             ' 处理事件 ()
        .判断循环尾 ()
    .计次循环尾 ()
.默认
    .循环判断首 ()
        赋值 (文件名, 寻找文件 (相加 (文件夹路径数组 [1], “*.*”), #子目录))
        .判断循环首 (不等于 (文件名, “”))
            .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
                加入成员 (文件夹路径数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                加入成员 (临时数组, 相加 (文件夹路径数组 [1], 文件名, “\”))
                赋值 (子文件夹数量, 相加 (子文件夹数量, 1))
            .如果真结束
            赋值 (文件名, 寻找文件 (#子目录))
        .判断循环尾 ()
        删除成员 (文件夹路径数组, 1, 1)
    .循环判断尾 (大于 (取数组成员数 (文件夹路径数组), 0))
    赋值 (临时数值, 取数组成员数 (临时数组))
    .计次循环首 (临时数值, i)
        赋值 (文件名, 寻找文件 (相加 (临时数组 [i], “*.*”), ))
        .判断循环首 (不等于 (文件名, “”))
            赋值 (文件大小, 相加 (文件大小, 文件_取文件尺寸 (相加 (临时数组 [i], 文件名))))
            赋值 (子文件数量, 相加 (子文件数量, 1))
            赋值 (文件名, 寻找文件 ())
        .判断循环尾 ()
    .计次循环尾 ()
.判断结束
返回 (文件大小)

.子程序 目录操作_取文件夹尺寸, 双精度小数型, , 失败返回-1
.参数 文件夹路径, 文本型, , 
.参数 子文件夹数量, 整数型, 参考 可空, 提供变量，保存子文件夹数量
.参数 子文件数量, 整数型, 参考 可空, 提供变量，子文件数量
.参数 是否处理事件, 逻辑型, , 

.局部变量 路径数组, 文本型, , "0", 

.如果真 (大于 (文本_取长度 (文件夹路径), 3))
    .如果真 (等于 (寻找文件 (文件夹路径, 相加 (#系统文件, #隐藏文件, #只读文件, #存档文件, #子目录)), “”)) ' 没有此文件或文件夹
        返回 (-1)
    .如果真结束
    .如果真 (等于 (寻找文件 (文件夹路径, #子目录), “”)) ' 如果是文件
        返回 (文件_取文件尺寸 (文件夹路径))
    .如果真结束
    
.如果真结束

加入成员 (路径数组, 文件夹路径)
.如果真 (不等于 (文本_取右边 (路径数组 [1], 1), “\”))
    赋值 (路径数组 [1], 相加 (路径数组 [1], “\”))
.如果真结束
.判断开始 (并且 (等于 (是否为空 (子文件夹数量), 真), 等于 (是否为空 (子文件数量), 真)))
    返回 (寻找文件夹_无子文件夹无子文件 (路径数组, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 假), 等于 (是否为空 (子文件数量), 真)))
    返回 (寻找文件夹_有子文件夹无子文件 (路径数组, 子文件夹数量, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 真), 等于 (是否为空 (子文件数量), 假)))
    返回 (寻找文件夹_无子文件夹有子文件 (路径数组, 子文件数量, 是否处理事件))
.判断 (并且 (等于 (是否为空 (子文件夹数量), 假), 等于 (是否为空 (子文件数量), 假)))
    返回 (寻找文件夹_有子文件夹有子文件 (路径数组, 子文件夹数量, 子文件数量, 是否处理事件))
.默认
    
.判断结束
返回 (-1)

.程序集 文件, , , 

.子程序 文件_移动文件, 逻辑型, , 
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (MoveFileExA (被移动的文件, 移动到的位置, 2))

.子程序 文件_复制文件, 逻辑型, , 
.参数 被复制的文件名, 文本型, , 
.参数 复制到的文件名, 文本型, , 

返回 (不等于 (CopyFileA (被复制的文件名, 复制到的文件名, 0), 0))

.子程序 文件_删除文件, 逻辑型, , 
.参数 欲删除的文件, 文本型, 可空, 

返回 (不等于 (DeleteFileA (欲删除的文件), 0))

.子程序 文件_取临时文件名, 文本型, , 
.参数 指定目录, 文本型, 可空, 留空为默认为系统临时目录。

.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件名, 文本型, , , 

.如果 (是否为空 (指定目录))
    赋值 (长度, GetTempPathA (长度, 路径))
    赋值 (路径, 文本_取空白 (300))
    GetTempPathA (长度, 路径)
    赋值 (文件名, 文本_取空白 (300))
    GetTempFileNameA (路径, 0, 0, 文件名)
    DeleteFileA (文件名)
.否则
    赋值 (文件名, 文本_取空白 (300))
    GetTempFileNameA (指定目录, 0, 0, 文件名)
    DeleteFileA (文件名)
.如果结束
返回 (文件名)

.子程序 文件_更名, 逻辑型, , 
.参数 欲更名的原文件或目录名, 文本型, , 
.参数 欲更改为的现文件或目录名, 文本型, , 

返回 (MoveFileExA (欲更名的原文件或目录名, 欲更改为的现文件或目录名, 0))

.子程序 文件_是否存在, 逻辑型, , 
.参数 欲测试的文件名称, 文本型, , 

.局部变量 句柄, 空白型, , , 

赋值 (句柄, 文件_打开文件 (欲测试的文件名称, , ))
.如果 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.否则
    CloseHandle (句柄)
    返回 (真)
.如果结束


.子程序 文件_取文件尺寸, 整数型, , 失败返回-1。
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 句柄, 整数型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (-1)
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
CloseHandle (句柄)
返回 (选择 (等于 (大小, 429496729), -1, 大小))

.子程序 文件_关闭文件, 逻辑型, , CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 欲关闭的文件号, 整数型, , 该文件号由“打开文件”命令所返回。

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

 ' 关闭文件 ()

赋值 (变量, CloseHandle (欲关闭的文件号))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束
返回 (返回)


.子程序 文件_读入文件, 字节集, , 
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 实际读入的字符数, 空白型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
.如果真 (等于 (大小, 4294967295))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (字节集, 字节集_取空白 (大小))
 ' lread (句柄, 字节集, 大小)
ReadFile (句柄, 字节集, 大小, 实际读入的字符数, 0)

CloseHandle (句柄)
返回 (字节集)

.子程序 文件_写到文件, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 欲写入数据, 字节集, , 

.局部变量 句柄, 整数型, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 实际写入字节数量, 空白型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (句柄, 文件_打开文件 (文件名, 4, 4))
 ' 句柄 ＝ 文件_打开文件 (核心_取当前目录 () ＋ “\bb.txt”, , )
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
 ' 返回值 ＝ lwrite (句柄, 欲写入数据, 字节集_取长度 (欲写入数据))
.如果 (WriteFile (句柄, 欲写入数据, 字节集_取长度 (欲写入数据), 实际写入字节数量, 0))
    赋值 (返回, 真)
.否则
    赋值 (返回, 假)
.如果结束
CloseHandle (句柄)
返回 (返回)

.子程序 文件_取文件属性, 整数型, , 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件名或目录名, 文本型, , 

返回 (GetFileAttributesA (文件名或目录名))

.子程序 文件_置文件属性, 逻辑型, , 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件或目录名, 文本型, , 
.参数 欲设置为的属性值, 整数型, , 

返回 (SetFileAttributesA (文件或目录名, 欲设置为的属性值))

.子程序 文件_置文件时间, 逻辑型, , 成功返回真，失败返回假。
.参数 文件名, 文本型, , 
.参数 新的创建时间, 日期时间型, 可空, 至少选择一项修改。
.参数 新的修改时间, 日期时间型, 可空, 
.参数 新的上次访问时间, 日期时间型, 可空, 

.局部变量 返回值, 逻辑型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 FileTime, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

.如果真 (并且 (是否为空 (新的创建时间), 是否为空 (新的修改时间), 是否为空 (新的上次访问时间)))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (FileTime [1], 文件_VariantTimeToFileTime (新的创建时间))
赋值 (FileTime [2], 文件_VariantTimeToFileTime (新的上次访问时间))
赋值 (FileTime [3], 文件_VariantTimeToFileTime (新的修改时间))
.计次循环首 (3, 计次)
    LocalFileTimeToFileTime (FileTime [计次], FileTime [计次])
.计次循环尾 ()
赋值 (返回值, SetFileTime (句柄, FileTime [1], FileTime [2], FileTime [3]))
CloseHandle (句柄)
返回 (返回值)

.子程序 文件_取文件时间, 日期时间型, , 返回文件上一次修改的时间。
.参数 文件名, 文本型, , 
.参数 文件的创建时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。
.参数 文件上次访问时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。

.局部变量 句柄, 整数型, , , 
.局部变量 时间, 日期时间型, , "3", 
.局部变量 FILETIME, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

连续赋值 (核心_文本到时间 (“”), 时间 [3], 文件的创建时间, 文件上次访问时间)
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (不等于 (句柄, -1))
    GetFileTime (句柄, FILETIME [1], FILETIME [2], FILETIME [3])
    CloseHandle (句柄)
    .计次循环首 (3, 计次)
        FileTimeToLocalFileTime (FILETIME [计次], FILETIME [计次])
        赋值 (时间 [计次], 文件_FileTimeToVariantTime (FILETIME [计次]))
    .计次循环尾 ()
    赋值 (文件的创建时间, 时间 [1])
    赋值 (文件上次访问时间, 时间 [2])
.如果真结束
CloseHandle (句柄)
返回 (时间 [3])

.子程序 文件_FileTimeToVariantTime, 日期时间型, , 
.参数 FileTime, FILETIME, , 

.局部变量 系统时间, 系统时间, , , 
.局部变量 时间, 日期时间型, , , 

FileTimeToSystemTime (FileTime, 系统时间)
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 文件_VariantTimeToFileTime, FILETIME, , 
.参数 时间, 日期时间型, , 

.局部变量 FileTime, FILETIME, , , 
.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (时间, 系统时间)
SystemTimeToFileTime (系统时间, FileTime)
返回 (FileTime)

.子程序 文件_进度移动, 逻辑型, , 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (字节集_文本到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度复制, 逻辑型, , 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (字节集_文本到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度删除, 逻辑型, , 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (字节集_文本到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_打开文件, 整数型, , 失败返回-1, 如果文件已用同一个类打开将会失败。
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 打开方式1, 整数型, , , 
.局部变量 共享方式1, 整数型, , , 
.局部变量 打开方式2, 整数型, , , 

.如果真 (是否为空 (打开方式))
    赋值 (打开方式, #读写)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.判断开始 (等于 (打开方式, #读入)) ' 从指定文件读入数据，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_READ) ' #OF_READ
.判断 (等于 (打开方式, #写出)) ' 写出数据到指定文件，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_WRITE) ' #OF_WRITE
.判断 (等于 (打开方式, #读写)) ' 从文件中读入数据或者写出数据到文件，如果该文件不存在则失败
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_READWRITE
.判断 (等于 (打开方式, #重写)) ' 写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_CREATE ＋ #OF_WRITE
.判断 (等于 (打开方式, #改写)) ' 写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, #GENERIC_WRITE) ' #OPEN_ALWAYS
.判断 (等于 (打开方式, #改读)) ' 从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OPEN_ALWAYS ＋ #OF_READWRITE
.默认
    
.判断结束
.判断开始 (等于 (共享方式, #无限制))
    赋值 (共享方式1, 相加 (#FILE_SHARE_WRITE, #FILE_SHARE_READ))
.判断 (等于 (共享方式, #禁止读))
    赋值 (共享方式1, #FILE_SHARE_WRITE)
.判断 (等于 (共享方式, #禁止写))
    赋值 (共享方式1, #FILE_SHARE_READ)
.判断 (等于 (共享方式, #禁止读写))
    赋值 (共享方式1, 0)
.默认
    
.判断结束

返回 (CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), #FILE_ATTRIBUTE_NORMAL, 0))

.子程序 文件_生成空文件, 长整数型, , 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 空文件的尺寸, 长整数型, 可空, 默认为0
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 I, 长整数型, , , 
.局部变量 空白字节, 字节集, , , 
.局部变量 是否成功, 整数型, , , 
.局部变量 文件号, 空白型, , , 
.局部变量 文件长度, 空白型, , , 

 ' 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：
.如果真 (小于 (空文件的尺寸, 0))
    返回 (-1)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
赋值 (文件号, 打开文件 (欲生成的文件名称, #重写, 共享方式))
.如果真 (不等于 (文件号, -1))
    .如果 (等于 (空文件的尺寸, 0))
        文件_关闭文件 (文件号)
        返回 (0)
    .否则
        .判断开始 (小于或等于 (空文件的尺寸, 2097152)) ' 2* 1024 × 1024) 2M
            文件_写出字节集 (文件号, 字节集_取空白 (空文件的尺寸))
        .默认
            赋值 (空白字节, 取空白字节集 (2097152))
            赋值 (I, 整除 (空文件的尺寸, 2097152))
            .计次循环首 (I, )
                写出字节集 (文件号, 空白字节)
            .计次循环尾 ()
            赋值 (I, 相减 (空文件的尺寸, 相乘 (I, 2097152)))
            .如果真 (不等于 (I, 0))
                写出字节集 (文件号, 取空白字节集 (I))
            .如果真结束
            
        .判断结束
        
    .如果结束
    
.如果真结束
赋值 (文件长度, 取文件长度 (文件号))
文件_关闭文件 (文件号)
返回 (文件长度)

.子程序 文件_移到文件首, 逻辑型, , 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_BEGIN), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移到文件尾, 逻辑型, , 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_END), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移动读写位置, 逻辑型, , 
.参数 文件号, 整数型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 整数型, , 

 ' 移动读写位置 （整数型 欲进行操作的文件号，［整数型 起始移动位置］，整数型 移动距离）
.如果真 (或者 (是否为空 (起始移动位置), 大于 (起始移动位置, #现行位置), 小于或等于 (起始移动位置, 0)))
    赋值 (起始移动位置, #文件首)
.如果真结束
.判断开始 (等于 (SetFilePointer (文件号, 移动距离, 0, 多项选择 (起始移动位置, #FILE_BEGIN, #FILE_END, #FILE_CURRENT)), -1))
    返回 (假)
.默认
    返回 (真)
.判断结束
 ' FILE_BEGIN lOffset将新位置设为从文件起始处开始算的起的一个偏移
 ' FILE_CURRENT lOffset将新位置设为从当前位置开始计算的一个偏移
 ' FILE_END


.子程序 文件_取读写位置, 整数型, , 
.参数 文件号, 整数型, , 

返回 (SetFilePointer (文件号, 0, 0, #FILE_CURRENT))


.子程序 文件_取文件长度, 长整数型, , 
.参数 文件号, 整数型, , 

.局部变量 高32位文件尺寸, 整数型, , , 
.局部变量 文件长度, 整数型, , , 

赋值 (文件长度, GetFileSize (文件号, 高32位文件尺寸))
返回 (数值_字节集到整数 (相加 (字节集_整数到字节集 (文件长度), 字节集_整数到字节集 (高32位文件尺寸)), ))


.子程序 文件_写出字节集, 逻辑型, , 写出一段或数段字节集数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。
.参数 文件号, 整数型, , 
.参数 欲写出的字节集数据, 字节集, , 

.局部变量 实际写入字节数量, 整数型, , , 
.局部变量 写入字节数量, 整数型, , , 

赋值 (写入字节数量, 字节集_取长度 (欲写出的字节集数据))
.判断开始 (等于 (WriteFile (文件号, 欲写出的字节集数据, 写入字节数量, 实际写入字节数量, 0), 假))
    返回 (假)
.默认
    返回 (取反 (等于 (实际写入字节数量, 0)))
.判断结束


.子程序 文件_是否在文件尾, 逻辑型, , 
.参数 文件号, 整数型, , 

返回 (等于 (取读写位置 (文件号), 取文件长度 (文件号)))

.子程序 文件_取错误信息, 空白型, , 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 

.局部变量 Bytes, 整数型, , , 

赋值 (错误号, GetLastError ())
.如果真 (不等于 (错误号, 0))
    赋值 (错误文本, 文本_取空白 (129))
    赋值 (Bytes, FormatMessageA (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_ARGUMENT_ARRAY), 0, 错误号, 0, 错误文本, 128, 0))
    .判断开始 (大于 (Bytes, 2))
        赋值 (错误文本, 文本_取左边 (错误文本, 相减 (Bytes, 2)))
    .默认
        赋值 (错误文本, “”)
    .判断结束
    
.如果真结束


.子程序 文件_读入字节集, 字节集, , 
.参数 文件号, 整数型, , 
.参数 欲读入数据的长度, 整数型, 可空, 如果为空则读入 当前读写位置 到 文件尾 之间的全部字节集

.局部变量 缓冲区, 字节集, , , 
.局部变量 实际读入的字符数, 整数型, , , 


.如果真 (或者 (是否为空 (欲读入数据的长度), 等于 (欲读入数据的长度, 0)))
    赋值 (欲读入数据的长度, 相减 (取文件长度 (文件号), 取读写位置 (文件号)))
.如果真结束
赋值 (缓冲区, 字节集_取空白 (欲读入数据的长度))
ReadFile (文件号, 缓冲区, 欲读入数据的长度, 实际读入的字符数, 0)
.判断开始 (等于 (欲读入数据的长度, 实际读入的字符数))
    返回 (缓冲区)
.默认
    返回 (字节集_取左边 (缓冲区, 实际读入的字符数))
.判断结束


.子程序 文件_读入文本, 文本型, , 从文件中当前读写位置读取并返回一段文本数据，实际读入长度（即返回文本的尺寸）可能会小于欲读入长度。如果该数据中存在字节 0 或 26（文本结束标志），将仅返回该字节之前的数据。
.参数 文件号, 整数型, , 
.参数 欲读入文本数据的长度, 整数型, 可空, 如果本参数被省略，默认读入文件中的所有文本数据。

 ' 〈文本型〉 读入文本 （整数型 欲读入文本数据的文件号，［整数型 欲读入文本数据的长度］）
返回 (文本_字节集到文本 (文件_读入字节集 (文件号, 欲读入文本数据的长度)))


.子程序 文件_写出文本, 逻辑型, , 写出文本数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 文件号, 整数型, , 
.参数 欲写出的文本, 文本型, , 

 ' 调用格式： 〈逻辑型〉 写出文本 （整数型 欲写出文本的文件号，通用型 欲写出的文本，... ） - 系统核心支持库->文件读写
 ' 英文名称：WriteText
 ' 本命令用作写出一段或数段文本数据到文件中当前读写位置处。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出文本的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的文本”，类型为“通用型（all）”。参数值如果不为文本类型数据，将自动进行转换，如果无法转换（即数据类型为字节集、子程序指针、库或用户自定义数据类型），则不写出此数据。
返回 (文件_写出字节集 (文件号, 字节集_文本到字节集 (欲写出的文本)))


.类模块 驱动类, , , 

.程序集变量 驱动句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 加载驱动, 整数型, , 成功返回驱动句柄,失败返回-1
.参数 驱动路径, 文本型, , sys驱动程序完整路径
.参数 服务名, 文本型, , 表示服务名称的字符串,名称中不允许使用"/"或"\"字符
.参数 显示名, 文本型, , 表示服务名称的字符串,这个名称是供用户界面程序识别函数时使用的
.参数 驱动名, 文本型, , 欲创建的驱动名,文本"\\.\"加上驱动名

.局部变量 hDevice, 整数型, , , 驱动句柄
.局部变量 hSCManager, 整数型, , , 控制管理器数据库的句柄
.局部变量 hService, 整数型, , , 服务句柄

赋值 (hSCManager, OpenSCManagerA (字符 (0), 字符 (0), #SC_MANAGER_CREATE_SERVICE))
.如果真 (等于 (hSCManager, 0))
    返回 (-1)
.如果真结束
赋值 (hService, CreateServiceA (hSCManager, 服务名, 显示名, #SERVICE_START, #SERVICE_KERNEL_DRIVER, #SERVICE_DEMAND_START, #SERVICE_ERROR_IGNORE, 驱动路径, 0, 0, 0, 0, 0))
.如果真 (等于 (hService, 0))
    赋值 (hService, OpenServiceA (hSCManager, 服务名, #SERVICE_START))
    .如果真 (等于 (hService, 0)) ' 调用CreateService注册服务失败！
        CloseServiceHandle (hSCManager)
        返回 (-1)
    .如果真结束
    
.如果真结束
StartServiceA (hService, 0, 0)
CloseServiceHandle (hService)
CloseServiceHandle (hSCManager)
赋值 (hDevice, CreateFileA (驱动名, 相加 (#GENERIC_READ, #GENERIC_WRITE), 0, 0, #OPEN_EXISTING, 0, 0))
返回 (hDevice) ' 返回驱动句柄

.子程序 卸载驱动, 逻辑型, , 卸载驱动并删除服务,成功返回真,失败返回假
.参数 服务名, 文本型, , 表示服务名称的字符串,名称中不允许使用"/"或"\"字符
.参数 是否删除服务, 逻辑型, 可空, 为真表示删除服务

.局部变量 hService, 整数型, , , 服务句柄
.局部变量 hSCManager, 整数型, , , 控制管理器数据库的句柄
.局部变量 匿名局部变量_6018, 空白型, , , 
.局部变量 SERVICE_STATUS, SERVICE_STATUS, , , 

赋值 (hSCManager, OpenSCManagerA (字符 (0), 字符 (0), #SC_MANAGER_CREATE_SERVICE))

.如果真 (等于 (hSCManager, 0))
    返回 (假)
.如果真结束
赋值 (hService, OpenServiceA (hSCManager, 服务名, 相加 (#DELETE, #SERVICE_STOP)))
.如果真 (等于 (hService, 0))
    CloseServiceHandle (hSCManager)
    返回 (假)
.如果真结束
ControlService (hService, #SERVICE_CONTROL_STOP, SERVICE_STATUS)
.如果真 (是否删除服务)
    DeleteService (hService) ' 删除服务后第二次不能正常创建服务,会安装失败??
.如果真结束
CloseServiceHandle (hService)
CloseServiceHandle (hSCManager)
返回 (真)


.子程序 与驱动程序通信, 整数型, , 操作驱动程序,成功返回1
.参数 句柄, 整数型, , 加载驱动返回的句柄
.参数 驱动控制码, 整数型, , 与驱动程序通信的控制码,十进制
.参数 输入指针, 整数型, , 欲输入数据的指针,无用请写将此参数设置为0
.参数 输入指针长度, 整数型, , 无用请写将此参数设置为0
.参数 输出指针, 整数型, , 欲输出数据的指针,无用请写将此参数设置为0
.参数 输出指针长度, 整数型, , 无用请写将此参数设置为0

.局部变量 返回值, 整数型, , , 
.局部变量 重叠操作_, 重叠操作_, , , 

赋值 (返回值, DeviceIoControl (句柄, 驱动控制码, 输入指针, 输入指针长度, 输出指针, 输出指针长度, 0, 重叠操作_))
返回 (返回值)

.子程序 内存_驱动加载, 逻辑型, , 
.局部变量 驱动名, 文本型, , , 

 ' 输出调试文本 (文件_写到文件 (核心_取当前目录 () ＋ “\my.sys”, #内存驱动))
赋值 (驱动名, 相加 (核心_取当前目录 (), “\”, 核心_取随机文本 (5, 3), “.sys”))
.如果真 (文件_写到文件 (驱动名, #内存驱动))
    赋值 (驱动句柄, 加载驱动 (驱动名, “ialdnwxf”, “ialdnwxf”, “\\.\ialdnwxf”))
     ' 输出调试文本 (驱动句柄)
    .如果真 (不等于 (驱动句柄, -1))
        文件_删除文件 (驱动名)
        返回 (真)
    .如果真结束
    
.如果真结束
文件_删除文件 (驱动名)
返回 (假)


.子程序 内存_驱动卸载, 逻辑型, , 
返回 (卸载驱动 (“ialdnwxf”, 假))

.子程序 内存_读整数, 整数型, , 失败返回-1
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 内存结构, 内存结构, , , 
.局部变量 内存结构地址, 整数型, , , 
.局部变量 输出数据, 字节集, , , 
.局部变量 输出指针, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 

赋值 (内存结构.进程ID, 进程ID)
赋值 (内存结构.内存地址, 内存地址)
赋值 (内存结构.欲写入值, 0)
赋值 (内存结构地址, lstrcpyn_内存结构 (内存结构, 内存结构, 0))

赋值 (输出数据, 字节集_取空白 (12))
赋值 (输出指针, lstrcpyn_字节集 (输出数据, 输出数据, 0))

.如果真 (等于 (与驱动程序通信 (驱动句柄, 2236416, 内存结构地址, 12, 输出指针, 12), 0))
    返回 (-1)
.如果真结束


 ' 输出调试文本 (字节集_到十六进制文本 (输出数据))
赋值 (临时字节集, 字节集_取右边 (输出数据, 4))
返回 (数值_字节集到整数 (临时字节集, ))

.子程序 内存_写整数, 整数型, , 失败返回-1,成功返回0
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 欲写入数据, 整数型, , 

.局部变量 内存结构, 内存结构, , , 
.局部变量 内存结构地址, 整数型, , , 

赋值 (内存结构.进程ID, 进程ID)
赋值 (内存结构.内存地址, 内存地址)
赋值 (内存结构.欲写入值, 欲写入数据)
赋值 (内存结构地址, lstrcpyn_内存结构 (内存结构, 内存结构, 0))
.如果 (等于 (与驱动程序通信 (驱动句柄, 2236421, 内存结构地址, 12, 0, 0), 0))
    返回 (-1)
.否则
    返回 (0)
.如果结束


.程序集 硬件, , , 

.子程序 屏幕_取屏幕句柄, 整数型, , 
.局部变量 a, 空白型, , , 

赋值 (a, GetDesktopWindow ())
返回 (a)

.子程序 屏幕_取屏幕宽度, 整数型, , GetSystemMetrics
.局部变量 a, 整数型, , , 

 ' ' 获取屏幕大小
 ' int with= GetSystemMetrics(SM_CXFULLSCREEN);  16

 ' int heigh= GetSystemMetrics(SM_CYFULLSCREEN);  17

 ' 通过上边两个函数获取的是显示屏幕的大小，及不包括任务栏等区域。



 ' int   cx   =   GetSystemMetrics(SM_CXSCREEN); 0
 ' int   cy   =   GetSystemMetrics(SM_CYSCREEN); 1

 ' 这两个函数获取的是真正屏幕的大小。

 ' 用前两个函数获取的大小可能是1024*687    而用下边两个获取的就是1024*768
赋值 (a, GetSystemMetrics (#SM_CXSCREEN))
返回 (a)


.子程序 屏幕_取屏幕高度, 整数型, , GetSystemMetrics
.局部变量 a, 整数型, , , 

 ' ' 获取屏幕大小
 ' int with= GetSystemMetrics(SM_CXFULLSCREEN);  16

 ' int heigh= GetSystemMetrics(SM_CYFULLSCREEN);  17

 ' 通过上边两个函数获取的是显示屏幕的大小，及不包括任务栏等区域。



 ' int   cx   =   GetSystemMetrics(SM_CXSCREEN); 0
 ' int   cy   =   GetSystemMetrics(SM_CYSCREEN); 1

 ' 这两个函数获取的是真正屏幕的大小。

 ' 用前两个函数获取的大小可能是1024*687    而用下边两个获取的就是1024*768
赋值 (a, GetSystemMetrics (#SM_CYSCREEN))
返回 (a)


.子程序 屏幕_取用户区域宽度, 整数型, , 不包括任务栏等区域
.局部变量 a, 整数型, , , 

 ' ' 获取屏幕大小
 ' int with= GetSystemMetrics(SM_CXFULLSCREEN);  16

 ' int heigh= GetSystemMetrics(SM_CYFULLSCREEN);  17

 ' 通过上边两个函数获取的是显示屏幕的大小，及不包括任务栏等区域。



 ' int   cx   =   GetSystemMetrics(SM_CXSCREEN); 0
 ' int   cy   =   GetSystemMetrics(SM_CYSCREEN); 1

 ' 这两个函数获取的是真正屏幕的大小。

 ' 用前两个函数获取的大小可能是1024*687    而用下边两个获取的就是1024*768
赋值 (a, GetSystemMetrics (#SM_CXFULLSCREEN))
返回 (a)


.子程序 屏幕_取用户区域高度, 整数型, , 不包括任务栏等区域
.局部变量 a, 整数型, , , 

 ' ' 获取屏幕大小
 ' int with= GetSystemMetrics(SM_CXFULLSCREEN);  16

 ' int heigh= GetSystemMetrics(SM_CYFULLSCREEN);  17

 ' 通过上边两个函数获取的是显示屏幕的大小，及不包括任务栏等区域。



 ' int   cx   =   GetSystemMetrics(SM_CXSCREEN); 0
 ' int   cy   =   GetSystemMetrics(SM_CYSCREEN); 1

 ' 这两个函数获取的是真正屏幕的大小。

 ' 用前两个函数获取的大小可能是1024*687    而用下边两个获取的就是1024*768
赋值 (a, GetSystemMetrics (#SM_CYFULLSCREEN))
返回 (a)


.子程序 键盘和鼠标锁定, 整数型, , BlockInput
.参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.局部变量 返回, 整数型, , , 



.如果 (或者 (等于 (是否锁定, 1), 等于 (是否锁定, 0)))
    
    
.否则
    
    
    赋值 (是否锁定, 1)
.如果结束


赋值 (返回, BlockInput (是否锁定))


返回 (返回)

.子程序 鼠标_隐藏, 空白型, , 
.参数 是否隐藏, 逻辑型, , 真隐藏,假显示

.判断开始 (是否隐藏)
    ShowCursor (0)
.默认
    ShowCursor (1)
.判断结束


.子程序 鼠标_穿透, 整数型, , SetWindowLong (取窗口句柄 (), #GWL_EXSTYLE, a)
.参数 窗口句柄, 整数型, , 

.局部变量 a, 整数型, , , 


赋值 (a, GetWindowLongA (窗口句柄, #GWL_EXSTYLE))
赋值 (a, 位或 (a, #WS_EX_TRANSPARENT))
赋值 (a, 位或 (a, 524288))
赋值 (a, SetWindowLongA (窗口句柄, #GWL_EXSTYLE, a))
返回 (a)

.子程序 鼠标_设置鼠标坐标, 整数型, , 非零表示成功，零表示失败
.参数 水平位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的水平位置
.参数 垂直位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的垂直位置

.局部变量 返回, 整数型, , , 

赋值 (返回, SetCursorPos (水平位置, 垂直位置))
返回 (返回)

.子程序 鼠标_取鼠标所在窗口句柄DLL, 整数型, , 返回鼠标处的窗口句柄
.局部变量 a, 空白型, , , 

赋值 (a, WindowFromPoint (鼠标_取鼠标水平位置DLL (), 鼠标_取鼠标垂直位置DLL ()))
返回 (a)

.子程序 鼠标_取鼠标垂直位置DLL, 整数型, , 
.局部变量 鼠标位置, 鼠标坐标, , , 
.局部变量 a, 整数型, , , 


GetCursorPos (鼠标位置)
赋值 (a, 鼠标位置.纵向位置)
返回 (a)


.子程序 鼠标_取鼠标水平位置DLL, 整数型, , 
.局部变量 鼠标位置, 鼠标坐标, , , 
.局部变量 a, 整数型, , , 


GetCursorPos (鼠标位置)
赋值 (a, 鼠标位置.横向位置)
返回 (a)

.子程序 鼠标_左右键交换, 整数型, , 
.参数 是否交换, 逻辑型, , 真为交换  假为还原  默认为真

.局部变量 a, 整数型, , , 


.如果真 (等于 (是否交换, 真))
    SwapMouseButton (1)
    赋值 (a, 1)
.如果真结束

.如果真 (等于 (是否交换, 假))
    SwapMouseButton (0)
    赋值 (a, 0)
.如果真结束




返回 (a)



.子程序 鼠标_俘获鼠标, 整数型, , SetCapture
.参数 窗口句柄, 整数型, 参考, 

.局部变量 返回, 整数型, , , 

赋值 (返回, SetCapture (窗口句柄))
返回 (返回)



.子程序 鼠标_释放鼠标DLL, 整数型, , ReleaseCapture
.局部变量 返回, 整数型, , , 

赋值 (返回, ReleaseCapture ())
返回 (返回)


.子程序 鼠标_模拟鼠标, 空白型, , mouse_event,模拟一次鼠标事件  没有返回值
.参数 标志组合, 整数型, , dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下  
.参数 水平方向, 整数型, , dx，参见相关帮助
.参数 垂直方向, 整数型, , dy，参见相关帮助
.参数 数据信息, 整数型, 可空, cButtons，未使用
.参数 扩展数据信息, 整数型, 可空, dwExtraInfo，通常未用的一个值

mouse_event (标志组合, 水平方向, 垂直方向, 数据信息, 扩展数据信息)

.子程序 鼠标_取鼠标双击时间, 整数型, , 得到鼠标的双击间隔速度  GetDoubleClickTime 一般鼠标设置的双击时间为 500 
.局部变量 返回, 整数型, , , 

赋值 (返回, GetDoubleClickTime ())
返回 (返回)


.子程序 鼠标_设置鼠标双击时间, 逻辑型, , 设置鼠标的双击间隔速度 SetDoubleClickTime 成功返回真 失败返回假 
.参数 时间, 整数型, 可空, 默认为500

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

.如果真 (是否为空 (时间))
    赋值 (时间, 500)
.如果真结束
赋值 (变量, SetDoubleClickTime (时间))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束

返回 (返回)


.类模块 文字类, , , 

.程序集变量 笔画文本, 文本型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 文字_取汉字笔画, 整数型, , 返回指定单个汉字的笔画数，支持6725个常用汉字。
.参数 汉字, 文本型, , 

.局部变量 汉字位置, 整数型, , , 
.局部变量 结束位置, 整数型, , , 
.局部变量 代码, 字节型, , , 
.局部变量 汉字变量, 文本型, , , 

赋值 (汉字变量, 文本_取左边 (汉字, 2))
赋值 (代码, 文本_取代码 (汉字变量, ))
.如果真 (小于 (代码, 127))
    返回 (0)
.如果真结束
赋值 (汉字位置, 文本_寻找 (笔画文本, 汉字变量, , 假))
赋值 (结束位置, 文本_寻找 (笔画文本, “,”, 汉字位置, 假))
返回 (数值_文本到整数 (文本_取中间 (笔画文本, 相加 (汉字位置, 2), 相减 (结束位置, 汉字位置, 2))))

.程序集 拖放, , , 

.程序集变量 进程堆句柄, 整数型, , , 
.子程序 拖放_挂钩窗口函数创建, 空白型, , 
.参数 窗口句柄, 整数型, , 
.参数 挂钩函数, 整数型, , 
.参数 保留数据, 整数型, , 

.局部变量 a, 空白型, , , 

赋值 (a, GetWindowLongA (窗口句柄, -4))
置入代码 ({ 139, 208, 139, 0, 137, 69, 252, 82 })
.如果 (不等于 (a, 1895810187))
    赋值 (a, 拖放_分配内存z (相加 (35, 4))) ' 实际为35个字节,+4个字节的保留备用
    RtlMoveMemory_整数 (a, SetHandleCount_字节集 ({ 0, 0, 0, 0, 139, 196, 255, 112, 16, 255, 112, 12, 255, 112, 8, 255, 112, 4, 232, 1, 1, 1, 1, 133, 192, 117, 5, 233, 71, 31, 22, 5, 194, 16, 0 }), 35)
    置入代码 ({ 139, 69, 252, 139, 85, 16, 137, 80, 35 })
    赋值 (a, 相加 (a, 4))
    置入代码 ({ 90, 137, 16, 82, 139, 85, 12, 131, 192, 18, 43, 208, 131, 234, 5, 64, 137, 16, 131, 192, 8, 90, 43, 208, 131, 234, 5, 64, 137, 16 })
    SetWindowLongA (窗口句柄, -4, a)
.否则
    置入代码 ({ 88, 137, 69, 252, 139, 85, 12, 131, 192, 14, 43, 208, 131, 234, 5, 64, 137, 16, 139, 85, 16, 137, 80, 16 })
.如果结束


.子程序 拖放_挂钩窗口函数撤销, 空白型, , 
.参数 窗口句柄, 空白型, , 

.局部变量 a, 整数型, , , 

赋值 (a, GetWindowLongA (窗口句柄, -4))
置入代码 ({ 139, 208, 139, 0, 137, 69, 252 })
.如果真 (等于 (a, 1895810187))
    置入代码 ({ 82, 139, 66, 252, 137, 69, 252 })
    SetWindowLongA (窗口句柄, -4, a)
    置入代码 ({ 88, 131, 232, 4, 137, 69, 252 })
    拖放_释放内存z (a)
.如果真结束


.子程序 拖放_拖放文件, 空白型, , 只有1个文本型参数,请用'*'分割
.参数 窗口句柄, 整数型, , 
.参数 是否允许, 逻辑型, , 
.参数 子程序指针, 整数型, , 回调函数,参数一,文本型

赋值 (进程堆句柄, GetProcessHeap ())
DragAcceptFiles (窗口句柄, 是否允许)
.如果 (是否允许)
    
    拖放_挂钩窗口函数创建 (窗口句柄, SetHandleCount_子程序指针 (&拖放_回调函数), 子程序指针)
    
.否则
    拖放_挂钩窗口函数撤销 (窗口句柄)
.如果结束


.子程序 拖放_释放内存z, 整数型, , 
.参数 内存句柄, 整数型, , 

赋值 (内存句柄, HeapFree (进程堆句柄, 8, 内存句柄))
返回 (内存句柄)


.子程序 拖放_分配内存z, 整数型, , 
.参数 内存大小, 整数型, , 

置入代码 ({ 252 }) ' CLD
返回 (HeapAlloc (进程堆句柄, 0, 内存大小))

.子程序 拖放_回调函数, 空白型, , 
.参数 hwnd, 整数型, , 
.参数 iMsg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.判断开始 (等于 (iMsg, 563))
    置入代码 ({ 139, 69, 16, 139, 0, 131, 192, 20, 137, 69, 12, 137, 69, 20, 51, 210, 102, 185, 42, 0, 102, 57, 16, 116, 5, 131, 192, 2, 235, 246, 102, 137, 8, 102, 57, 80, 2, 116, 2, 235, 235 })
    赋值 (iMsg, 相加 (iMsg, 1))
    WideCharToMultiByte (936, 0, lParam, -1, iMsg, 266240, 0, 0)
    置入代码 (相加 ({ 139, 69, 36 }, { 131, 192, 12, 139, 0, 255, 117, 12, 255, 208 }))
    DragFinish (wParam)
    置入代码 ({ 64 })
.默认
    置入代码 ({ 51, 192 }) ' XOR EAX,EAX
.判断结束


.程序集 控件, , , 

.程序集变量 时钟, 时钟类, , , 
.子程序 控件_拖放文件_注册控件, 空白型, , 
.参数 窗口句柄, 整数型, , 
.参数 子程序指针, 整数型, , 回调函数,参数一,文本型

拖放_拖放文件 (窗口句柄, 真, 子程序指针)

.子程序 控件_拖放文件_撤销控件, 空白型, , 
.参数 窗口句柄, 整数型, , 

拖放_拖放文件 (窗口句柄, 假, 0)

.子程序 控件_时钟_注册控件, 空白型, , 
.参数 窗口句柄, 空白型, , 
.参数 标识, 整数型, , 默认 MBTIMERID=999
.参数 时钟周期, 整数型, , 
.参数 子程序指针, 整数型, , 

返回 (时钟.设置时钟 (窗口句柄, 标识, 时钟周期, 子程序指针))

.子程序 控件_时钟_撤销控件, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 标识, 整数型, , 默认 MBTIMERID=999

返回 (时钟.销毁时钟 (窗口句柄, 标识))


.程序集 注册表, , , 

.子程序 注册表_枚举注册表子项, 整数型, , 枚举注册表指定项目地所有子项,并返回子项个数。返回-1表示失败，请用（取注册表操作错误信息）取得详细地错误信息
.参数 根目录, 整数型, , 1、#根类； 3、#现行用户； 4、#本地机器； 5、#所有用户
.参数 路径, 文本型, , 
.参数 子项列表, 文本型, 数组, 该参数用来返回子项列表数组,返回时,该数组将被子项填充。
.参数 是否继续枚举, 逻辑型, , 提供一个变量用来控制是否继续枚举过程,如果需要停止枚举过程,请将该变量置为假即可。
.参数 进度回调函数地址, 子程序指针, 可空, 提供一个函数地址用来回调当前枚举进度(该参数只能有一个参数,用来接受子项文本)

.局部变量 i, 空白型, , , 
.局部变量 项名, 文本型, , , 
.局部变量 结果, 空白型, , , 
.局部变量 句柄, 空白型, , , 
.局部变量 柄, 空白型, , , 

赋值 (是否继续枚举, 真)
清除数组 (子项列表)
赋值 (句柄, 易语言注册表常量到API (根目录))
RegOpenKeyA (句柄, 路径, 柄)
.如果真 (等于 (柄, 0)) ' 失败
     ' 错误文本 ＝ “打开注册表项目错误，请确定你具有该操作的权限！”
    返回 (-1)
.如果真结束
 ' --下面开始枚举
赋值 (i, 0)
赋值 (项名, 取空白文本 (265))
赋值 (结果, RegEnumKeyA (柄, i, 项名, 取文本长度 (项名)))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (是否为空 (进度回调函数地址), 假))
        调用子程序 (进度回调函数地址, , , 项名)
    .如果真结束
    .如果 (等于 (是否继续枚举, 真))
        加入成员 (子项列表, 项名)
        赋值 (i, 相加 (i, 1))
        赋值 (项名, 取空白文本 (265))
        赋值 (结果, RegEnumKeyA (柄, i, 项名, 取文本长度 (项名)))
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()
RegCloseKey (柄)
返回 (取数组成员数 (子项列表))


.子程序 注册表_枚举注册表子项所有键名, 整数型, , 枚举注册表指定项目地所有键名和类型,并返回键名个数。返回-1表示失败
.参数 根目录, 整数型, , 请参考易语言注册表操作函数中地根目录参数。
.参数 路径, 文本型, , 
.参数 键名数据数组, 键名数据, 数组, 该参数用来返回键名列表数组,返回时,该数组将被键名填充。
.参数 是否继续枚举, 逻辑型, , 提供一个变量用来控制是否继续枚举过程,如果需要停止枚举过程,请将该变量置为假即可。
.参数 进度回调函数地址, 子程序指针, 可空, 提供一个函数地址用来回调当前枚举进度(该参数只能有二个参数,第一个用来接受键名，第一个用来接受键值类型)

.局部变量 i, 空白型, , , 
.局部变量 键名, 文本型, , , 
.局部变量 结果, 空白型, , , 
.局部变量 句柄, 空白型, , , 
.局部变量 柄, 空白型, , , 
.局部变量 类型, 空白型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 空白型, , , 
.局部变量 临时, 键名数据, , , 

赋值 (是否继续枚举, 真)
清除数组 (键名数据数组)
赋值 (句柄, 易语言注册表常量到API (根目录))
RegOpenKeyA (句柄, 路径, 柄)
.如果真 (等于 (柄, 0)) ' 打开失败
    返回 (-1)
.如果真结束
赋值 (键名, 取空白文本 (255))
赋值 (内容, 取空白字节集 (0))
赋值 (结果, RegEnumValueA (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (是否为空 (进度回调函数地址), 假))
        调用子程序 (进度回调函数地址, , , 键名, 类型)
    .如果真结束
    赋值 (内容, 取空白字节集 (内容长度))
    RegQueryValueExA (柄, 键名, 0, 类型, 内容, 取字节集长度 (内容))
    .如果 (等于 (是否继续枚举, 真)) ' "类型为1表示为文本"
        赋值 (临时.键名, 键名)
        赋值 (临时.类型, 类型)
        加入成员 (键名数据数组, 临时)
        赋值 (i, 相加 (i, 1))
        赋值 (键名, 取空白文本 (255))
        赋值 (内容, 取空白字节集 (0))
        赋值 (结果, RegEnumValueA (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()
RegCloseKey (柄)
返回 (取数组成员数 (键名数据数组))

.子程序 易语言注册表常量到API, 整数型, , 
.参数 根目录, 空白型, , 1,

.局部变量 句柄, 空白型, , , 

.判断开始 (等于 (根目录, #根类))
    赋值 (句柄, 2147483648)
.判断 (等于 (根目录, #现行用户))
    赋值 (句柄, 2147483649)
.判断 (等于 (根目录, #本地机器))
    赋值 (句柄, 2147483650)
.判断 (等于 (根目录, #所有用户))
    赋值 (句柄, 2147483651)
.默认
    赋值 (句柄, 根目录)
.判断结束
返回 (句柄)


.子程序 注册表_删除注册表项目, 逻辑型, , 删除注册表项目(注意,该项目所包含地所有项目都将被删除)
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 

.局部变量 数组, 文本型, , "0", 

清除数组 (数组)
生成子项目数组 (根目录, 路径, 数组)
返回 (删除子项目数组 (数组))

.子程序 生成子项目数组, 空白型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 数组, 文本型, 数组, 首次调用必须(清除数组)

.局部变量 a, 文本型, , "0", 
.局部变量 i, 整数型, , , 

注册表_枚举注册表子项 (根目录, 路径, a, 真, )
.如果 (大于 (取数组成员数 (a), 0))
    加入成员 (数组, 相加 (到文本 (根目录), #分割符, 路径))
    .计次循环首 (取数组成员数 (a), i)
        .如果 (等于 (路径, “”))
            生成子项目数组 (根目录, a [i], 数组)
        .否则
            生成子项目数组 (根目录, 相加 (路径, “\”, a [i]), 数组)
        .如果结束
        
    .计次循环尾 ()
.否则
    加入成员 (数组, 相加 (到文本 (根目录), #分割符, 路径))
.如果结束



.子程序 删除子项目数组, 逻辑型, , 
.参数 数组, 文本型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 y, 文本型, , "2", 

.变量循环首 (取数组成员数 (数组), 1, -1, i)
    赋值 (y, 分割文本 (数组 [i], #分割符, ))
    .如果真 (等于 (删除注册项 (到整数 (y [1]), y [2]), 假))
        返回 (假)
    .如果真结束
    
.变量循环尾 ()
返回 (真)



.子程序 注册表_注册项目是否存在_键名, 逻辑型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 欲检测键名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 柄, 整数型, , , 
.局部变量 键名, 文本型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 整数型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 s, 整数型, , , 

RegOpenKeyA (根目录, 路径, 柄)
赋值 (键名, 取空白文本 (265))
赋值 (内容, 取空白字节集 (0))
赋值 (结果, RegEnumValueA (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (到小写 (键名), 到小写 (欲检测键名)))
        返回 (真)
    .如果真结束
    赋值 (i, 相加 (i, 1))
    赋值 (键名, 取空白文本 (265))
    赋值 (内容, 取空白字节集 (0))
    赋值 (结果, RegEnumValueA (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环尾 ()
RegCloseKey (柄)
返回 (假)

.子程序 注册表_注册项目是否存在_项目, 逻辑型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 

.局部变量 柄, 整数型, , , 

RegOpenKeyA (根目录, 路径, 柄)
.如果真 (等于 (柄, 0))
    返回 (假)
.如果真结束
RegCloseKey (柄)
返回 (真)


 ' 不属于任何一个程序集、类模块的函数：
