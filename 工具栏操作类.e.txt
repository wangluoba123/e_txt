 ' 文件类型：Windows模块源码

 ' 程序名称：工具栏操作类
 ' 程序描述：
 ' 程序作者：kyozy
 ' 邮政编码：644000
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：75602718@qq.com
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.1
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 TBIF_COMMAND, "32", , 
.常量 TBIF_IMAGE, "1", , 
.常量 TBIF_LPARAM, "16", , 
.常量 TBIF_SIZE, "64", , 
.常量 TBIF_STATE, "4", , 
.常量 TBIF_STYLE, "8", , 
.常量 TBIF_BYINDEX, "2147483648", , 
.常量 TBIF_TEXT, "2", , 
.常量 , , , 
.常量 TBSTATE_CHECKED, "1", , 选中
.常量 TBSTATE_ENABLED, "4", , 禁止
.常量 TBSTATE_HIDDEN, "8", , 隐藏
.常量 TBSTATE_INDETERMINATE, "16", , 变灰
.常量 TBSTATE_PRESSED, "2", , 按下
.常量 , , , 
.常量 TBSTYLE_BUTTON, "0", , 标准按钮
.常量 TBSTYLE_CHECK, "2", , 多选按钮
.常量 TBSTYLE_CHECKGROUP, "6", , 单选按钮
.常量 TBSTYLE_DROPDOWN, "8", , 下拉按钮
.常量 TBSTYLE_GROUP, "4", , 
.常量 TBSTYLE_SEP, "1", , 分割条
.常量 , , , 
.常量 TB_INSERTBUTTON, "1045", , 插入按钮
.常量 TB_BUTTONCOUNT, "1048", , 取按钮数
.常量 TB_GETBUTTONINFOA, "1089", , 取按钮信息
.常量 TB_SETBUTTONINFOA, "1090", , 置按钮信息
.常量 TB_SETSTATE, "1041", , 设置按钮状态
.常量 TB_COMMANDTOINDEX, "1049", , 从按钮ID取按钮索引
.常量 TB_GETBUTTON, "1047", , 取按钮TBBUTTON
.常量 TB_GETSTATE, "1042", , 取按钮状态
.常量 TB_DELETEBUTTON, "1046", , 删除按钮
.常量 TB_GETBUTTONTEXTA, "1069", , 取工具条按钮标题
.常量 TB_SETBUTTONSIZE, "1055", , 设置按钮尺寸
.常量 TB_SETBUTTONWIDTH, "1083", , 置按钮最大最小宽度
.常量 TB_GETITEMRECT, "1053", , 取按钮矩形
.常量 TB_GETDISABLEDIMAGELIST, "1079", , 取禁止图片组
.常量 TB_GETHOTIMAGELIST, "1077", , 取热点图片组
.常量 TB_GETIMAGELIST, "1073", , 取图片组
.常量 TB_SETDISABLEDIMAGELIST, "1078", , 置禁止图片组
.常量 TB_SETHOTIMAGELIST, "1076", , 置热点图片组
.常量 TB_SETIMAGELIST, "1072", , 置图片组
.常量 TB_ISBUTTONCHECKED, "1034", , 是否选中
.常量 TB_ISBUTTONENABLED, "1033", , 是否有效
.常量 TB_ISBUTTONHIDDEN, "1036", , 是否隐藏
.常量 TB_ISBUTTONINDETERMINATE, "1037", , 是否变灰
.常量 TB_ISBUTTONPRESSED, "1035", , 是否按下
.常量 TB_SETMAXTEXTROWS, "1084", , 置标题为提示文本
.常量 TB_GETBUTTONSIZE, "1082", , 取TBBUTTON结构大小
.常量 TB_GETBITMAP, "1068", , 取图片索引
.常量 TB_AUTOSIZE, "1057", , 自动大小
.常量 , , , 
.常量 GWL_STYLE, "-16", , 窗口样式
.常量 CCS_BOTTOM, "3", , 底部对齐（状态栏却省值）
.常量 CCS_TOP, "1", , 顶部对齐(工具栏却省值)
.常量 CCS_NOMOVEY, "2", , 可以水平移动和改变大小（如指定了CCS_NORESIZE则无效）
.常量 CCS_NORESIZE, "4", , 禁止改变大小
.常量 CCS_NOPARENTALIGN, "8", , 禁止自动移动到父窗口的顶部或底部
.常量 TBSTYLE_FLAT, "2048", , 平面工具条
.常量 , , , 
.常量 位置_顶边, "0", 公开, 
.常量 位置_底边, "1", 公开, 
.常量 位置_自由, "2", 公开, 
.常量 图片组_通常, "0", 公开, 
.常量 图片组_热点, "1", 公开, 
.常量 图片组_禁止, "2", 公开, 
.常量 CCS_NODIVIDER, "64", , 不在控件顶部画高亮线
.常量 TBSTYLE_WRAPABLE, "512", , 工具栏按钮可换行
.常量 MEM_RELEASE, "32768", , 
.常量 MEM_COMMIT, "4096", , 
.常量 PAGE_READWRITE, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 
.常量 , , , 
.常量 , , , 
.常量 STANDARD_RIGHTS_REQUIRED, "983040", , 
.常量 SYNCHRONIZE, "1048576", , 
.常量 PROCESS_ALL_ACCESS, "2035711", , 
.常量 PROCESS_CREATE_PROCESS, "128", , 
.常量 PROCESS_CREATE_THREAD, "2", , 
.常量 PROCESS_DUP_HANDLE, "64", , 
.常量 PROCESS_HEAP_ENTRY_BUSY, "4", , 
.常量 PROCESS_HEAP_ENTRY_DDESHARE, "32", , 
.常量 PROCESS_HEAP_ENTRY_MOVEABLE, "16", , 
.常量 PROCESS_HEAP_REGION, "1", , 
.常量 PROCESS_HEAP_UNCOMMITTED_RANGE, "2", , 
.常量 PROCESS_QUERY_INFORMATION, "1024", , 
.常量 PROCESS_SET_INFORMATION, "512", , 
.常量 PROCESS_SET_QUOTA, "256", , 
.常量 PROCESS_SET_SESSIONID, "4", , 
.常量 PROCESS_TERMINATE, "1", , 
.常量 PROCESS_VM_OPERATION, "8", , 
.常量 PROCESS_VM_READ, "16", , 
.常量 PROCESS_VM_WRITE, "32", , 
.常量 PROCESS_XP_HEADER_CACHE, "131072", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一




数据类型 TBBUTTONINFO, , 工具栏信息;
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型, , , TBIF_
    .成员 idCommand, 整数型, , , 按钮ID
    .成员 iImage, 整数型, , , 图片索引
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 cx, 短整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pszText, 文本型, 传址, , 
    .成员 cchText, 整数型, , , 

数据类型 TBBUTTONINFO2, , 工具栏信息;
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型, , , TBIF_
    .成员 idCommand, 整数型, , , 按钮ID
    .成员 iImage, 整数型, , , 图片索引
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 cx, 短整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pszText, 整数型, , , 
    .成员 cchText, 整数型, , , 

数据类型 TBBUTTON, , 工具栏按钮
    .成员 iBitmap, 整数型, , , 按钮位图索引
    .成员 idCommand, 整数型, , , 按钮命令ID
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 bReserved1, 字节型, , , 
    .成员 bReserved2, 字节型, , , 
    .成员 dwData, 整数型, , , 应用程序定义的数据
    .成员 iString, 整数型, , , 按钮帮助文本字符串索引

数据类型 TRAYDATA, , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 Reserved1, 整数型, , , 
    .成员 Reserved2, 整数型, , , 
    .成员 hIcon, 整数型, , , 

数据类型 RECT, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 内存映射数据9X, , 
    .成员 映射文件号, 整数型, , , 
    .成员 指针, 整数型, , , 


.DLL命令 发送消息_API, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 发送消息_TBBUTTON, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, TBBUTTON, , 具体取决于消息;

.DLL命令 发送消息_TBBUTTONINFO, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, TBBUTTONINFO, , 具体取决于消息;

.DLL命令 取窗口类名_API, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名  以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 缓冲区, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 缓冲区长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 取数据地址_TBBUTTONINFO, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTONINFO, 传址, 
    .参数 数据2, TBBUTTONINFO, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_TBBUTTONINFO2, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTONINFO2, 传址, 
    .参数 数据2, TBBUTTONINFO2, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_TBBUTTON, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTON, 传址, 
    .参数 数据2, TBBUTTON, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_文本, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 文本型, 传址, 
    .参数 数据2, 文本型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_矩形, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, RECT, 传址, 
    .参数 数据2, RECT, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_整数, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 整数型, 传址, 
    .参数 数据2, 整数型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_字节, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 字节型, 传址, 
    .参数 数据2, 字节型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 拷贝内存_TBBUTTON, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, TBBUTTON, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 拷贝内存_TRAYDATA, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, TRAYDATA, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 拷贝内存_矩形, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, RECT, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 拷贝内存_整数, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, 整数型, 传址, 
    .参数 源数据, TBBUTTON, , 
    .参数 尺寸, 整数型, , 

.DLL命令 取窗口风格_API, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 置窗口风格_API, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 信息值, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 新窗口信息, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 重画窗口_API, 整数型, "user32", "InvalidateRect", , 这个函数屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画  非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 待屏蔽窗口的句柄
    .参数 屏蔽矩形, 整数型, , RECT，用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口
    .参数 重画前删除, 整数型, , TRUE（非零）导致指定的区域在重画前先删除;

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", , 
    .参数 hwnd, 整数型, , 
    .参数 lpdwProcessId, 整数型, 传址, 

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 VirtualFreeEx, 整数型, "kernel32.dll", "VirtualFreeEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 CloseHandle, 整数型, "kernel32.dll", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 CreateFileMapping, 整数型, "kernel32.dll", "CreateFileMappingA", , 创建一个新的文件映射对象
    .参数 hFile, 整数型, , 
    .参数 lpFileMappigAttributes, 整数型, , 
    .参数 flProtect, 整数型, , 
    .参数 dwMaximumSizeHigh, 整数型, , 
    .参数 dwMaximumSizeLow, 整数型, , 
    .参数 lpName, 整数型, , 

.DLL命令 MapViewOfFile, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序的地址空间
    .参数 hFileMappingObject, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 dwFileOffsetHigh, 整数型, , 
    .参数 dwFileOffsetLow, 整数型, , 
    .参数 dwNumberOfBytesToMap, 整数型, , 

.DLL命令 UnmapViewOfFile, 整数型, "kernel32.dll", "UnmapViewOfFile", , 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
    .参数 lpBaseAddress, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.类模块 工具栏操作类, , , ToolbarWindow32

.程序集变量 集_工具栏句柄, 整数型, , , 
.程序集变量 集_按钮ID, 整数型, , , 
.程序集变量 集_外部控件, 逻辑型, , , 
.程序集变量 集_按钮信息, TBBUTTONINFO, , , 
.程序集变量 集_外部按钮信息, TBBUTTONINFO2, , , 
.程序集变量 集_单一按钮, TBBUTTON, , , 
.程序集变量 集_数据地址, 整数型, , , 
.程序集变量 集_外部指针, 整数型, , , 
.程序集变量 集_外部指针2, 整数型, , , 
.程序集变量 集_进程句柄, 整数型, , , 
.程序集变量 集_外部操作, 外部控件操作类, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

赋值 (集_按钮ID, 22313)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化类, 逻辑型, , 
.参数 参数_工具栏句柄, 整数型, , 
.参数 参数_是否外部控件, 逻辑型, 可空, 

.局部变量 局部_类名, 文本型, , , 

赋值 (局部_类名, 取空白文本 (256))
取窗口类名_API (参数_工具栏句柄, 局部_类名, 256)
.如果真 (等于 (删首尾空 (到大写 (局部_类名)), “TOOLBARWINDOW32”))
    .如果 (等于 (参数_是否外部控件, 真))
        赋值 (集_外部控件, 真)
    .否则
        赋值 (集_外部控件, 假)
    .如果结束
    赋值 (集_工具栏句柄, 参数_工具栏句柄)
    返回 (真)
.如果真结束
返回 (假)


.子程序 取按钮数, 整数型, , 取工具栏按钮总数
返回 (发送消息_API (集_工具栏句柄, #TB_BUTTONCOUNT, 0, 0))


.子程序 取按钮ID, 整数型, , 根据按钮索引取按钮的idCommand
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 局部_大小, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 18))
    发送消息_API (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_外部指针)
    赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 18))
    拷贝内存_TBBUTTON (集_单一按钮, 局部_数据, 18)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (集_单一按钮.idCommand)
.否则
    发送消息_TBBUTTON (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_单一按钮)
    返回 (集_单一按钮.idCommand)
    
.如果结束


.子程序 加入状态, 空白型, , 将指定状态值加入到按钮的存在状态中。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_按钮状态, 整数型, 可空, 可以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。默认值为0。

.局部变量 局部_状态, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

赋值 (局部_状态, 发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))
.如果 (等于 (参数_按钮状态, #禁止))
    .如果真 (不等于 (位与 (局部_状态, #禁止), 0))
        赋值 (局部_状态, 位异或 (局部_状态, 参数_按钮状态))
    .如果真结束
    
.否则
    赋值 (局部_状态, 位或 (局部_状态, 参数_按钮状态))
.如果结束
发送消息_API (集_工具栏句柄, #TB_SETSTATE, 取按钮ID (参数_按钮索引), 局部_状态)



.子程序 去除状态, 空白型, 公开, 从按钮的存在状态中去除指定状态值。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_按钮状态, 整数型, 可空, 可以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。默认值为0。

.局部变量 局部_状态, 整数型, , , 

赋值 (局部_状态, 发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))
.如果 (等于 (参数_按钮状态, #禁止))
    .如果真 (等于 (位与 (局部_状态, #禁止), 0))
        赋值 (局部_状态, 位或 (局部_状态, 参数_按钮状态))
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.否则
    .如果真 (不等于 (位与 (局部_状态, 参数_按钮状态), 0))
        赋值 (局部_状态, 位异或 (局部_状态, 参数_按钮状态))
    .如果真结束
    
.如果结束
发送消息_API (集_工具栏句柄, #TB_SETSTATE, 取按钮ID (参数_按钮索引), 局部_状态)


.子程序 取状态, 整数型, , 取回指定按钮的状态，状态值为 0 或者以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 可以用“位与”命令来判断指定的状态值是否被置位，如：“如果真 (位与 (工具条1.取状态 (0)，#禁止) = #禁止)”语句即可判断工具条1的第一个按钮是否已被禁止。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

返回 (发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))


.子程序 判断状态, 逻辑型, , 判断按钮是否有某状态。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_状态类型, 整数型, , 只能为下列常量的其中一个。 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。

.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_状态类型, 1))
    赋值 (局部_类型, #TB_ISBUTTONCHECKED)
.判断 (等于 (参数_状态类型, 2))
    赋值 (局部_类型, #TB_ISBUTTONPRESSED)
.判断 (等于 (参数_状态类型, 4))
    赋值 (局部_类型, #TB_ISBUTTONENABLED)
.判断 (等于 (参数_状态类型, 8))
    赋值 (局部_类型, #TB_ISBUTTONHIDDEN)
.判断 (等于 (参数_状态类型, 16))
    赋值 (局部_类型, #TB_ISBUTTONINDETERMINATE)
.默认
    
.判断结束
赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, 局部_类型, 取按钮ID (参数_按钮索引), 0))
.如果真 (等于 (参数_状态类型, 8))
    返回 (等于 (局部_返回值, 0))
.如果真结束
返回 (不等于 (局部_返回值, 0))

.子程序 删除按钮, 空白型, , 删除工具栏上的一个按钮
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

发送消息_API (集_工具栏句柄, #TB_DELETEBUTTON, 参数_按钮索引, 0)


.子程序 取标题, 文本型, ,  取回指定按钮的标题文本。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_标题, 文本型, , , 
.局部变量 局部_数据, 字节集, , , 
.局部变量 局部_ID, 整数型, , , 

赋值 (局部_ID, 取按钮ID (参数_按钮索引))
.如果 (集_外部控件)
    赋值 (局部_长度, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 0))
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 局部_长度))
    .如果 (不等于 (发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 集_外部指针), -1))
        赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 局部_长度))
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (到文本 (局部_数据))
    .否则
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (“”)
    .如果结束
    
.否则
    赋值 (局部_长度, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 0))
    赋值 (局部_标题, 取空白文本 (局部_长度))
    赋值 (集_数据地址, 取数据地址_文本 (局部_标题, 局部_标题, 0))
    .如果 (不等于 (发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 集_数据地址), -1))
        返回 (局部_标题)
    .否则
        返回 (“”)
    .如果结束
    
.如果结束


.子程序 置标题, 逻辑型, , 设置指定按钮的标题文本。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_标题, 文本型, 可空, 默认为空文本。

.局部变量 局部_数据, 整数型, , , 
.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_结构大小, 整数型, , , 

.如果真 (是否为空 (参数_标题))
    赋值 (参数_标题, “”)
.如果真结束
.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部指针2, 集_外部操作.分配外部指针 (集_进程句柄, 相加 (取文本长度 (参数_标题), 1)))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_TEXT, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.pszText, 集_外部指针2)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    赋值 (局部_数据, 取数据地址_文本 (参数_标题, 参数_标题, 相加 (取文本长度 (参数_标题), 1)))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针2, 局部_数据, 相加 (取文本长度 (参数_标题), 1))
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.pszText, 集_外部按钮信息.pszText, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 24), 集_数据地址, 32)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针2)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_TEXT, #TBIF_BYINDEX))
    赋值 (集_按钮信息.pszText, 参数_标题)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
    
.如果结束


.子程序 取类型, 整数型, , 取回指定按钮的类型，返回值为以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

发送消息_TBBUTTON (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_单一按钮)
.判断开始 (并且 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_CHECK), #TBSTYLE_CHECK), 等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_GROUP), 0)))
    返回 (1)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_CHECKGROUP), #TBSTYLE_CHECKGROUP))
    返回 (2)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_DROPDOWN), #TBSTYLE_DROPDOWN))
    返回 (3)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_SEP), #TBSTYLE_SEP))
    返回 (4)
.默认
    返回 (0)
.判断结束


.子程序 置类型, 逻辑型, , 设置按钮类型。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_类型, 整数型, , 可以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。

.局部变量 局部_类型, 整数型, , , 
.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_数据, 整数型, , , 


.判断开始 (等于 (参数_类型, 0))
    赋值 (局部_类型, #TBSTYLE_BUTTON)
.判断 (等于 (参数_类型, 1))
    赋值 (局部_类型, #TBSTYLE_CHECK)
.判断 (等于 (参数_类型, 2))
    赋值 (局部_类型, #TBSTYLE_CHECKGROUP)
.判断 (等于 (参数_类型, 3))
    赋值 (局部_类型, #TBSTYLE_DROPDOWN)
.判断 (等于 (参数_类型, 4))
    赋值 (局部_类型, #TBSTYLE_SEP)
.默认
    
.判断结束
.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_STYLE, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.fsStyle, 局部_类型)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    赋值 (集_数据地址, 取数据地址_字节 (集_外部按钮信息.fsStyle, 集_外部按钮信息.fsStyle, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 17), 集_数据地址, 1)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_STYLE, #TBIF_BYINDEX))
    赋值 (集_按钮信息.fsStyle, 局部_类型)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
    
.如果结束


.子程序 取图片, 整数型, , 取回指定按钮的图片索引，图片索引指向图片组属性中的某一图片，从 0 开始，-1 表示本按钮无图片标志。如果按钮是一个分割条则返回其宽度。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

返回 (发送消息_API (集_工具栏句柄, #TB_GETBITMAP, 取按钮ID (参数_按钮索引), 0))

.子程序 置图片, 逻辑型, 公开, 设置指定按钮的图片索引，图片索引指向图片组属性中的某一图片，从 0 开始，-1 表示本按钮无图片标志。如果按钮是一个分割条则设置其宽度。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_图片索引, 整数型, , 索引从0开始。-1表示无图片。如按钮为分割条则此参数为分割条宽度。

.局部变量 局部_返回值, 整数型, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_IMAGE, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.iImage, 参数_图片索引)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.iImage, 集_外部按钮信息.iImage, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 12), 集_数据地址, 4)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_IMAGE, #TBIF_BYINDEX))
    赋值 (集_按钮信息.iImage, 参数_图片索引)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
     ' 本源码来自易语言资源网(www.wodesoft.com)
.如果结束


.子程序 取托盘区图标, 整数型, 公开, 返回图标句柄。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 局部_地址, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 
.局部变量 局部_TRAYDATA, TRAYDATA, , , 

赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 18))
发送消息_API (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_外部指针)
赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 18))
拷贝内存_TBBUTTON (集_单一按钮, 局部_数据, 18)
赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_单一按钮.dwData, 24))
拷贝内存_TRAYDATA (局部_TRAYDATA, 局部_数据, 24)
集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
集_外部操作.结束操作 (集_进程句柄)
返回 (局部_TRAYDATA.hIcon)


.子程序 取按钮大小, 空白型, , 取得按钮的宽度和高度。
.参数 参数_宽度, 整数型, 参考 可空, 
.参数 参数_高度, 整数型, 参考 可空, 

.局部变量 局部_大小, 整数型, , , 

赋值 (局部_大小, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONSIZE, 0, 0))
赋值 (参数_宽度, 求余数 (局部_大小, 65536))
赋值 (参数_高度, 整除 (局部_大小, 65536))

.子程序 置按钮大小, 逻辑型, , 设置按钮的宽度和高度。
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

.局部变量 返回值, 整数型, , , 

赋值 (返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONSIZE, 0, 相加 (参数_宽度, 相乘 (参数_高度, 65536))))
发送消息_API (集_工具栏句柄, #TB_AUTOSIZE, 0, 0)
返回 (不等于 (返回值, 0))

.子程序 取按钮矩形, 空白型, , 取按钮在工具条里的矩形位置。，
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_左上横, 整数型, 参考 可空, 左边
.参数 参数_左上纵, 整数型, 参考 可空, 顶边
.参数 参数_右下横, 整数型, 参考 可空, 右边
.参数 参数_右下纵, 整数型, 参考 可空, 底边

.局部变量 局部_矩形, RECT, , , 
.局部变量 局部_数据, 字节集, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 16))
    赋值 (集_数据地址, 取数据地址_矩形 (局部_矩形, 局部_矩形, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 16)
    发送消息_API (集_工具栏句柄, #TB_GETITEMRECT, 参数_按钮索引, 集_外部指针)
    赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 16))
    拷贝内存_矩形 (局部_矩形, 局部_数据, 16)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
.否则
    赋值 (集_数据地址, 取数据地址_矩形 (局部_矩形, 局部_矩形, 0))
    发送消息_API (集_工具栏句柄, #TB_GETITEMRECT, 参数_按钮索引, 集_数据地址)
.如果结束
赋值 (参数_左上横, 局部_矩形.左边)
赋值 (参数_左上纵, 局部_矩形.顶边)
赋值 (参数_右下横, 局部_矩形.右边)
赋值 (参数_右下纵, 局部_矩形.底边)

.子程序 置标题为提示文本, 空白型, , 使标题不可见，标题成为提示文本
发送消息_API (集_工具栏句柄, #TB_SETMAXTEXTROWS, 0, 0)
发送消息_API (集_工具栏句柄, #TB_AUTOSIZE, 0, 0)

.子程序 插入按钮, 整数型, , 将指定按钮插入到工具条中，返回插入后该按钮所处的位置。失败返回-1。
.参数 参数_插入位置, 整数型, 可空, 指定新按钮插入的位置索引，0 为栏目一，1 为栏目二，如此类推。如果提供 -1 ，则插入到工具条的尾部。如果本参数被省略，默认值为 -1 。
.参数 参数_类型, 整数型, 可空, 按钮的类型可以为以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。 如果本参数被省略，默认值为“#普通按钮”。
.参数 参数_图片索引, 整数型, 可空, 图片索引用于指定图片组属性中的某张图片，该图片将被显示在按钮表面。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。如果按钮是一个分割条则设置其宽度。
.参数 参数_标题, 文本型, 可空, 本参数指定显示在按钮下的标题文本。如果被省略，默认值为空文本。
.参数 参数_按钮状态, 整数型, 可空, 本参数指定按钮的存在状态。状态值为 0 或者以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。如果本参数被省略，默认值为 0 。

.局部变量 局部_类型, 整数型, , , 
.局部变量 局部_状态, 整数型, , , 


.如果真 (是否为空 (参数_插入位置))
    赋值 (参数_插入位置, -1)
.如果真结束
.如果真 (是否为空 (参数_图片索引))
    赋值 (参数_图片索引, -1)
.如果真结束

.判断开始 (等于 (参数_类型, 0))
    赋值 (局部_类型, #TBSTYLE_BUTTON)
.判断 (等于 (参数_类型, 1))
    赋值 (局部_类型, #TBSTYLE_CHECK)
.判断 (等于 (参数_类型, 2))
    赋值 (局部_类型, #TBSTYLE_CHECKGROUP)
.判断 (等于 (参数_类型, 3))
    赋值 (局部_类型, #TBSTYLE_DROPDOWN)
.判断 (等于 (参数_类型, 4))
    赋值 (局部_类型, #TBSTYLE_SEP)
.默认
    
.判断结束

.如果 (等于 (参数_按钮状态, 0))
    赋值 (局部_状态, 4)
.否则
    .如果 (等于 (位与 (参数_按钮状态, 4), 4))
        赋值 (局部_状态, 位异或 (参数_按钮状态, 4))
    .否则
        赋值 (局部_状态, 位或 (参数_按钮状态, 4))
    .如果结束
    
.如果结束

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 18))
    赋值 (集_单一按钮.fsStyle, 局部_类型)
    赋值 (集_单一按钮.iBitmap, 参数_图片索引)
    赋值 (集_单一按钮.fsState, 局部_状态)
    赋值 (集_单一按钮.idCommand, 集_按钮ID)
    赋值 (集_按钮ID, 相加 (集_按钮ID, 1))
    赋值 (集_数据地址, 取数据地址_整数 (集_单一按钮.iBitmap, 集_单一按钮.iBitmap, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 4)
    赋值 (集_数据地址, 取数据地址_整数 (集_单一按钮.idCommand, 集_单一按钮.idCommand, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 4), 集_数据地址, 4)
    赋值 (集_数据地址, 取数据地址_字节 (集_单一按钮.fsState, 集_单一按钮.fsState, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 8), 集_数据地址, 1)
    赋值 (集_数据地址, 取数据地址_字节 (集_单一按钮.fsStyle, 集_单一按钮.fsStyle, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 9), 集_数据地址, 1)
    .如果真 (等于 (发送消息_API (集_工具栏句柄, #TB_INSERTBUTTON, 参数_插入位置, 集_外部指针), 0))
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (-1)
    .如果真结束
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    
.否则
    赋值 (集_单一按钮.fsStyle, 局部_类型)
    赋值 (集_单一按钮.iBitmap, 参数_图片索引)
    赋值 (集_单一按钮.fsState, 局部_状态)
    赋值 (集_单一按钮.idCommand, 集_按钮ID)
    赋值 (集_按钮ID, 相加 (集_按钮ID, 1))
    .如果真 (等于 (发送消息_TBBUTTON (集_工具栏句柄, #TB_INSERTBUTTON, 参数_插入位置, 集_单一按钮), 0))
        返回 (-1)
    .如果真结束
    
.如果结束
置标题 (参数_插入位置, 参数_标题)
返回 (选择 (等于 (参数_插入位置, -1), 相减 (取按钮数 (), 1), 参数_插入位置))


.子程序 取图片组句柄, 整数型, , 返回图片组句柄。
.参数 参数_图片组类型, 整数型, 可空, 0.#图片组_通常，1.#图片组_热点，2.图片组_禁止。默认为0.#图片组_通常

.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_图片组类型, #图片组_热点))
    赋值 (局部_类型, #TB_GETHOTIMAGELIST)
.判断 (等于 (参数_图片组类型, #图片组_禁止))
    赋值 (局部_类型, #TB_GETDISABLEDIMAGELIST)
.默认
    赋值 (局部_类型, #TB_GETIMAGELIST)
.判断结束
返回 (发送消息_API (集_工具栏句柄, 局部_类型, 0, 0))

.子程序 置图片组句柄, 整数型, , 返回之前的图片组句柄。
.参数 参数_图片组句柄, 整数型, , 
.参数 参数_图片组类型, 整数型, 可空, 0.#图片组_通常，1.#图片组_热点，2.图片组_禁止。默认为0.#图片组_通常

.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_图片组类型, #图片组_热点))
    赋值 (局部_类型, #TB_SETHOTIMAGELIST)
.判断 (等于 (参数_图片组类型, #图片组_禁止))
    赋值 (局部_类型, #TB_SETDISABLEDIMAGELIST)
.默认
    赋值 (局部_类型, #TB_SETIMAGELIST)
.判断结束
返回 (发送消息_API (集_工具栏句柄, 局部_类型, 0, 参数_图片组句柄))

.子程序 属性_位置, 整数型, , 如果未提供参数则为取位置，提供了参数则为置位置。#位置_ 开头常量
.参数 参数_位置, 整数型, 可空, 0.#位置_顶边，1.#位置_底边，2.#位置_自由

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_位置))
    .判断开始 (并且 (等于 (位与 (局部_风格, #CCS_TOP), #CCS_TOP), 等于 (位与 (局部_风格, #CCS_NOMOVEY), 0)))
        返回 (#位置_顶边)
    .判断 (等于 (位与 (局部_风格, #CCS_BOTTOM), #CCS_BOTTOM))
        返回 (#位置_底边)
    .判断 (并且 (等于 (位与 (局部_风格, #CCS_TOP), 0), 等于 (位与 (局部_风格, #CCS_NOPARENTALIGN), #CCS_NOPARENTALIGN)))
        返回 (#位置_自由)
    .默认
        返回 (-1)
    .判断结束
    
.否则
    .如果真 (等于 (位与 (局部_风格, #CCS_TOP), #CCS_TOP))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_TOP))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NOMOVEY), #CCS_NOMOVEY))
        赋值 (局部_风格, 位异或 (局部_风格, 2))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NORESIZE), #CCS_NORESIZE))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_NORESIZE))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NOPARENTALIGN), #CCS_NOPARENTALIGN))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_NOPARENTALIGN))
    .如果真结束
    
    .判断开始 (等于 (参数_位置, 0))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_TOP))
    .判断 (等于 (参数_位置, 1))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_BOTTOM))
    .判断 (等于 (参数_位置, 2))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_NOPARENTALIGN, #CCS_NORESIZE, #CCS_NOMOVEY))
    .默认
        
    .判断结束
    返回 (置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格))
.如果结束


.子程序 属性_平面, 逻辑型, , 如果未提供参数则为返回是否平面，提供了参数则为置是否平面。
.参数 参数_平面, 逻辑型, 可空, 真为平面按钮，假为突起按钮。

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_平面))
    返回 (选择 (等于 (位与 (局部_风格, #TBSTYLE_FLAT), #TBSTYLE_FLAT), 真, 假))
.否则
    .判断开始 (等于 (参数_平面, 真))
        赋值 (局部_风格, 位或 (局部_风格, #TBSTYLE_FLAT))
    .默认
        .如果真 (等于 (位与 (局部_风格, #TBSTYLE_FLAT), #TBSTYLE_FLAT))
            赋值 (局部_风格, 位异或 (局部_风格, #TBSTYLE_FLAT))
        .如果真结束
        
    .判断结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束





.子程序 属性_上边线, 逻辑型, 公开, 如果未提供参数则为返回是否上边线，提供了参数则为置是否上边线
.参数 参数_上边线, 逻辑型, 可空, 真为显示上边线，假为不显示

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_上边线))
    返回 (选择 (等于 (位与 (局部_风格, #CCS_NODIVIDER), #CCS_NODIVIDER), 真, 假))
.否则
    .判断开始 (等于 (参数_上边线, 假))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_NODIVIDER))
    .默认
        .如果真 (等于 (位与 (局部_风格, #CCS_NODIVIDER), #CCS_NODIVIDER))
            赋值 (局部_风格, 位异或 (局部_风格, #CCS_NODIVIDER))
        .如果真结束
        ' 本源码来自易语言资源网(www.wodesoft.com)
    .判断结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束


.子程序 属性_允许多行, 逻辑型, , 如果未提供参数则为返回是否允许多行，提供了参数则为置是否允许多行
.参数 参数_允许多行, 逻辑型, 可空, 真为允许多行，假为不允许。

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_允许多行))
    返回 (选择 (等于 (位与 (局部_风格, #TBSTYLE_WRAPABLE), #TBSTYLE_WRAPABLE), 真, 假))
.否则
    .如果 (等于 (参数_允许多行, 假))
        .如果真 (等于 (位与 (局部_风格, #TBSTYLE_WRAPABLE), #TBSTYLE_WRAPABLE))
            赋值 (局部_风格, 位异或 (局部_风格, #TBSTYLE_WRAPABLE))
        .如果真结束
        
    .否则
        赋值 (局部_风格, 位或 (局部_风格, #TBSTYLE_WRAPABLE))
    .如果结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束


.类模块 外部控件操作类, , , 

.程序集变量 映射文件, 内存映射数据9X, , "0", 
.程序集变量 系统类别, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (系统类别, 取操作系统类别 ())
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 打开进程, 整数型, 公开, 成功就返回进程句柄
.参数 对象句柄, 整数型, , 

.局部变量 进程句柄, 整数型, , , 
.局部变量 dwProcessID, 整数型, , , 

GetWindowThreadProcessId (对象句柄, dwProcessID) ' 获取与指定窗口关联在一起的一个线程和进程标识符
赋值 (进程句柄, OpenProcess (#PROCESS_ALL_ACCESS, 假, dwProcessID)) ' 打开一个现有进程的句柄 ' 位或 (#STANDARD_RIGHTS_REQUIRED, #SYNCHRONIZE, 4095)
 ' .如果 (等于 (系统类别, 3))
     ' lpListItemRemote ＝ VirtualAllocEx (进程句柄, 0, 数据长度, #MEM_COMMIT, #PAGE_READWRITE)  ' 在目标进程中分配内存空间。
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' ' 如果真 (SendMessage (对象句柄, 消息号, 索引号, lpListItemRemote) ＝ 0)如果真 ()
     ' ' 返回 (0)
     ' ' VirtualFreeEx (进程句柄, lpListItemRemote, 0, #MEM_RELEASE)  ' 在目标进程中释放内存空间。
     ' ' CloseHandle (进程句柄)  ' 关闭一个内核对象。
     ' ' 返回 (真)
.否则
    
     ' 映射文件 ＝ CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 数据长度, 0)  ' 创建一个新的文件映射对象
     ' lpListItemRemote ＝ MapViewOfFile (映射文件, #FILE_MAP_ALL_ACCESS, 0, 0, 0)  ' 将一个文件映射对象映射到当前应用程序的地址空间
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' .如果真 ()

.子程序 写进程内存, 逻辑型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 数据指针, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 

返回 (不等于 (WriteProcessMemory (进程句柄, 数据指针, 数据地址, 数据长度, 0), 0)) ' 写进程内存

.子程序 结束操作, 空白型, 公开, 
.参数 进程句柄, 整数型, , 

.如果真 (不等于 (进程句柄, 0))
    CloseHandle (进程句柄) ' 关闭一个内核对象。
    清除数组 (映射文件)
    赋值 (进程句柄, 0)
.如果真结束


.子程序 读外部指针数据, 字节集, 公开, 
.参数 进程句柄, 整数型, , 
.参数 外部程序指针, 整数型, , 
.参数 读取数据大小, 整数型, , 

.局部变量 szBuf, 字节集, , , 

赋值 (szBuf, 取空白字节集 (读取数据大小))
ReadProcessMemory (进程句柄, 外部程序指针, szBuf, 读取数据大小, 0)
返回 (szBuf)
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 分配外部指针, 整数型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 数据长度, 整数型, , 分配的数据长度

.局部变量 TEMP, 内存映射数据9X, , , 

.判断开始 (等于 (系统类别, 3))
    返回 (VirtualAllocEx (进程句柄, 0, 数据长度, #MEM_COMMIT, #PAGE_READWRITE))
.默认
    赋值 (TEMP.映射文件号, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 数据长度, 0)) ' 创建一个新的文件映射对象
    赋值 (TEMP.指针, MapViewOfFile (TEMP.映射文件号, #FILE_MAP_ALL_ACCESS, 0, 0, 0)) ' 将一个文件映射对象映射到当前应用程序的地址空间
    重定义数组 (映射文件, 真, 相加 (取数组成员数 (映射文件), 1))
    赋值 (映射文件 [取数组成员数 (映射文件)], TEMP)
    返回 (TEMP.指针)
.判断结束


.子程序 销毁外部指针, 空白型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 外部指针, 整数型, , 

.局部变量 成员数, 整数型, , , 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (系统类别, 3))
    VirtualFreeEx (进程句柄, 外部指针, 0, #MEM_RELEASE) ' 在目标进程中释放内存空间。
.默认
    赋值 (成员数, 取数组成员数 (映射文件))
    .变量循环首 (1, 成员数, 1, I)
        .如果真 (等于 (映射文件 [I], 指针, 外部指针))
            UnmapViewOfFile (外部指针) ' 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
            CloseHandle (映射文件 [I], 映射文件号)
            删除成员 (映射文件, I, )
            跳出循环 ()
        .如果真结束
        ' 本源码来自易语言资源网(www.wodesoft.com)
    .变量循环尾 ()
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
