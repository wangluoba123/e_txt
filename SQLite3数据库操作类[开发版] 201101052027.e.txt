 ' 文件类型：Windows模块源码

 ' 程序名称：SQLite3数据类
 ' 程序描述：支持中文
支持自定义SQL函数
无需易语言5.1以上版本
 ' 程序作者：kyozy
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.2
 ' 创建号：0.0



.常量 SQLITE_成功, "0", 公开, SQLITE_OK
.常量 SQLITE_错误, "1", 公开, SQLITE_ERROR SQL 错误或没有数据库
.常量 SQLITE_内部, "2", 公开, SQLITE_INTERNAL 一个SQLite内部的逻辑错误
.常量 SQLITE_权限, "3", 公开, SQLITE_PERM 访问权限被拒绝
.常量 SQLITE_终止, "4", 公开, SQLITE_ABORT 需要一个中断的Callback指令
.常量 SQLITE_繁忙, "5", 公开, SQLITE_BUSY 数据据库文件被锁定
.常量 SQLITE_锁定, "6", 公开, SQLITE_LOCKED 表被锁定
.常量 SQLITE_申请内存失败, "7", 公开, SQLITE_NOMEM
.常量 SQLITE_只读, "8", 公开, SQLITE_READONLY 试图写一个只读的数据库
.常量 SQLITE_中断, "9", 公开, SQLITE_INTERRUPT 操作被中断结束
.常量 SQLITE_IO错误, "10", 公开, SQLITE_IOERR 某种磁盘I/O错误发生
.常量 SQLITE_损坏, "11", 公开, SQLITE_CORRUPT 数据库磁盘镜像异常
.常量 SQLITE_为找到, "12", 公开, SQLITE_NOTFOUND 未使用。表或记录不存在
.常量 SQLITE_数据库满, "13", 公开, SQLITE_FULL 数据库满，插入失败
.常量 SQLITE_不能打开, "14", 公开, SQLITE_CANTOPEN 不能打开数据库文件
.常量 SQLITE_协议, "15", 公开, SQLITE_PROTOCOL 数据库错定协议错
.常量 SQLITE_无表, "16", 公开, SQLITE_EMPTY 数据库表为空
.常量 SQLITE_结构, "17", 公开, SQLITE_SCHEMA 数据库结构被改变
.常量 SQLITE_表太大, "18", 公开, SQLITE_TOOBIG 一个表的行数据过多
.常量 SQLITE_约束, "19", 公开, SQLITE_CONSTRAINT 由于约束冲突而中止
.常量 SQLITE_不匹配, "20", 公开, SQLITE_MISMATCH 数据类型不匹配
.常量 SQLITE_误用, "21", 公开, SQLITE_MISUSE 库被不正确使用
.常量 SQLITE_不支持OS, "22", 公开, SQLITE_NOLFS 主机不支持的OS特性
.常量 SQLITE_认证, "23", 公开, SQLITE_AUTH 授权被否定
.常量 SQLITE_格式, "24", 公开, SQLITE_FORMAT 辅助数据库格式错误
.常量 SQLITE_范围, "25", 公开, SQLITE_RANGE 绑定参数时索引超出范围
.常量 SQLITE_无数据库, "26", 公开, SQLITE_NOTADB 文件已打开但没有数据库
.常量 SQLITE_行, "100", 公开, SQLITE_ROW 有另一行就绪
.常量 SQLITE_完成, "101", 公开, SQLITE_DONE 已经完成执行
.常量 , , , 
.常量 SQLITE_UTF8, "1", , 
.常量 SQLITE_UTF16, "2", , 
.常量 SQLITE_UTF16BE, "3", , 
.常量 SQLITE_UTF16LE, "4", , 
.常量 SQLITE_ANY, "5", , 
.常量 , , , 
.常量 SQLITE_打开_数据表名, "2", 公开, 
.常量 SQLITE_打开_SQL语句, "1", 公开, 
.常量 , , , 
.常量 SQLITE_打开_只读, "1", , SQLITE_OPEN_READONLY
.常量 SQLITE_打开_读写, "2", , SQLITE_OPEN_READWRITE
.常量 SQLITE_打开_创建, "4", , SQLITE_OPEN_CREATE
.常量 , , , 
.常量 S3字段类型_整型, "1", 公开, SQLITE_INTEGER
.常量 S3字段类型_浮点型, "2", 公开, SQLITE_FLOAT
.常量 S3字段类型_文本型, "3", 公开, SQLITE_TEXT
.常量 S3字段类型_字节集型, "4", 公开, SQLITE_BLOB
.常量 S3字段类型_空, "5", 公开, SQLITE_NULL
.常量 , , , 
.常量 S3析构_静态, "0", 公开, SQLITE_STATIC
.常量 S3析构_临时, "-1", 公开, SQLITE_TRANSIENT
.常量 , , , 
.常量 S3触发条件_插入, "0", 公开, 
.常量 S3触发条件_删除, "1", 公开, 
.常量 S3触发条件_更新, "2", 公开, 
.常量 S3触发条件_字段更新, "3", 公开, 
.常量 , , , 
.常量 S3触发时间_普通模式, "0", 公开, 
.常量 S3触发时间_之前, "1", 公开, 
.常量 S3触发时间_之后, "2", 公开, 
.图片 自动修改为C调用代码, " ' 已保存到：D:\易语言学习\Data\SQLite3数据库操作类[开发版] 201101052027.e\自动修改为C调用代码", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 LARGE_INTEGER, , 长整数型_;
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 类型_SQLITE3字段, 公开, 
    .成员 字段名称, 文本型, , , 
    .成员 字段类型, 整数型, , , 1、#字节型； 2、#短整数型； 3、#整数型； 4、#长整数型； 5、#小数型； 6、#双精度小数型； 7、#逻辑型； 8、#日期时间型； 10、#文本型； 11、#字节集型； 12、#备注型。
    .成员 字段长度, 整数型, , , 
    .成员 字段属性, 整数型, , , 0、无属性；1、主键；2、自动递增；4、非空
    .成员 字段默认, 文本型, , , 

.全局变量 SQL语句, 文本型, 公开, , 
.全局变量 SQL语句参数, 文本型, 公开, , 
.全局变量 SQL语句数组, 文本型, 公开, "0", 

.DLL命令 API_MultiByteToWideChar, 整数型, "kernel32.dll", "MultiByteToWideChar", , 将多媒体字符串映像为通配字符串　
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 文本型, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 API_WideCharToMultiByte_byte, 整数型, "kernel32.dll", "WideCharToMultiByte", , 将通配符映像为多字节　
    .参数 代码页, 整数型, , cp_开头常量
    .参数 标志, 整数型, , 512
    .参数 宽字符文本, 字节集, , 字节集
    .参数 宽字符文本长度, 整数型, , 
    .参数 双字节文本, 字节集, , 字节集
    .参数 双字节文本长度, 整数型, , 
    .参数 默认文本, 整数型, , 
    .参数 使用默认文本, 整数型, , 逻辑

.DLL命令 API_卸载动态链接库, 整数型, "kernel32.dll", "FreeLibrary", , 释放指定的动态链接库，它们早先是用LoadLibrary ;    API函数装载的  非零表示成功，零表示失败。会设置GetLastError
    .参数 hLibModule, 整数型, , 要释放的一个库句柄在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用;

.DLL命令 API_取动态链接库函数地址, 整数型, "kernel32.dll", "GetProcAddress", , 返回函数地址
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 API_加载动态链接库, 整数型, "kernel32.dll", "LoadLibraryA", , 载入指定的动态链接库，并将它映射到当前进程使用的地址空间。一旦载入，即可访问库内保存的资源  成功则返回库模块的句柄，零表示失败。会设置GetLastError
    .参数 lpLibFileName, 文本型, , 指定要载入的动态链接库的名称。采用与CreateProcess函数的lpCommandLine参数指定的同样的搜索顺序;

.DLL命令 API_取变量指针_字节集型, 整数型, "kernel32.dll", "lstrcpyA", , 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 

.DLL命令 API_取变量指针_整数型, 整数型, "kernel32.dll", "lstrcpyA", , 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 API_取变量指针_文本型, 整数型, "kernel32.dll", "lstrcpyA", , 
    .参数 lpString1, 文本型, 传址, 
    .参数 lpString2, 文本型, 传址, 

.DLL命令 API_取内存指针文本长度, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 lpString, 整数型, , 

.DLL命令 API_MultiByteToWideChar_byte, 整数型, "kernel32.dll", "MultiByteToWideChar", , 将多媒体字符串映像为通配字符串　
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 字节集, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 API_宽字符到双字节, 整数型, "kernel32.dll", "WideCharToMultiByte", , WideCharToMultiByte　
    .参数 代码页, 整数型, , cp_开头常量
    .参数 标志, 整数型, , 512
    .参数 宽字符文本, 字节集, , 字节集
    .参数 宽字符文本长度, 整数型, , 
    .参数 双字节文本, 文本型, , 字节集
    .参数 双字节文本长度, 整数型, , 
    .参数 默认文本, 整数型, , 
    .参数 使用默认文本, 整数型, , 逻辑

.DLL命令 API_复制内存_LARGE_INTEGER, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, LARGE_INTEGER, , 
    .参数 Source, 长整数型, 传址, 
    .参数 被复制的数据类型长度, 整数型, , 

.DLL命令 API_复制内存_LARGE_DOUBLE, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, LARGE_INTEGER, , 
    .参数 Source, 双精度小数型, 传址, 
    .参数 被复制的数据类型长度, 整数型, , 

.DLL命令 API_复制到类型_整数数组, 空白型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 复制到的目标类型, 整数型, 数组, 
    .参数 被复制的数据类型地址, 整数型, , 
    .参数 被复制的数据类型长度, 整数型, , 

.DLL命令 API_调用子程序_双精度小数型, 双精度小数型, "user32.dll", "CallWindowProcA", , 将消息传答窗口函数　
    .参数 汇编代码, 字节集, , 
    .参数 程序指针, 整数型, , 
    .参数 参数数组, 整数型, 数组, 
    .参数 数组数目, 整数型, , 
    .参数 是否C模式, 逻辑型, , 

.DLL命令 API_调用子程序_长整数型, 长整数型, "user32.dll", "CallWindowProcA", , 将消息传答窗口函数　
    .参数 汇编代码, 字节集, , 
    .参数 程序指针, 整数型, , 
    .参数 参数数组, 整数型, 数组, 
    .参数 数组数目, 整数型, , 
    .参数 是否C模式, 逻辑型, , 

.DLL命令 API_调用子程序_小数型, 小数型, "user32.dll", "CallWindowProcA", , 将消息传答窗口函数　
    .参数 汇编代码, 字节集, , 
    .参数 程序指针, 整数型, , 
    .参数 参数数组, 整数型, 数组, 
    .参数 数组数目, 整数型, , 
    .参数 是否C模式, 逻辑型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 数据库连接类, SQLITE数据库连接类, , , 
.局部变量 记录集类, SQLITE记录集类, , , 
.局部变量 部_循环计次, 整数型, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

.如果真 (等于 (数据库连接类.连接 (相加 (取运行目录 (), “\test.DB”), , 真), 假))
    信息框 (“打开指定数据库失败！”, 0, )
    返回 ()
.如果真结束
.如果真 (等于 (记录集类.置连接 (数据库连接类), 假))
    信息框 (“置数据库连接失败！”, 0, )
    返回 ()
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
输出调试文本 (“数据库已成功链接！”)
 ' 输出调试文本 (记录集类.打开 (“INSERT INTO 学生表 (姓名,身高,年龄) VALUES ('张小三',160,18)”))
 ' 输出调试文本 (记录集类.打开 (“INSERT INTO 学生表 (姓名,身高,年龄) VALUES ('王小二',165,19)”))
 ' 输出调试文本 (记录集类.打开 (“INSERT INTO 学生表 (姓名,身高,年龄) VALUES ('李小四',167,21)”))
 ' 输出调试文本 (记录集类.打开 (“INSERT INTO 学生表 (姓名,身高,年龄) VALUES ('马小五',160,16)”))

赋值 (SQL语句, “select count(*) from 学生表”)
.如果真 (等于 (记录集类.打开 (SQL语句, #SQLITE_打开_SQL语句), 假))
    信息框 (数据库连接类.最后错误 (), 0, )
    返回 ()
.如果真结束

输出调试文本 (记录集类.取记录列数 ())
输出调试文本 (记录集类.记录数量 ()) ' 本方法为错误，这么出名的数据库竟然没有取记录数量命令，汗。。。











 ' .计次循环首 (记录集类.取字段数 (), 部_循环计次)
     ' 输出调试文本 (记录集类.取字段名 (部_循环计次 － 1))
 ' .计次循环尾 ()


.类模块 SQLITE数据库连接类, , , 

.程序集变量 集_动态链接库, 动态链接库操作类, , , 
.程序集变量 集_数据库句柄, 整数型, , , 
.程序集变量 集_函数地址, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
.如果真 (等于 (集_动态链接库.加载 (相加 (取运行目录 (), “\Sqlite3.dll”)), 假))
    信息框 (“加载系统动态链接库[Sqlite3.dll]失败！”, #错误图标, “鑫佑软件：”)
    结束 ()
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
集_动态链接库.卸载 ()

.子程序 取数据库句柄, 长整数型, 公开, 
返回 (EC_合并长整数 (集_数据库句柄, 集_动态链接库.取句柄 ())) ' 1、数据库句柄 2、动态链接库句柄

.子程序 置数据库句柄, 逻辑型, 公开, 
.参数 参数_数据库句柄, 长整数型, , 

.局部变量 部_整数变量, 整数型, , "2", 1、数据库句柄 2、动态链接库句柄

EC_分解长整数 (参数_数据库句柄, 部_整数变量 [1], 部_整数变量 [2])
.如果真 (并且 (大于 (参数_数据库句柄, 0), 大于 (部_整数变量 [2], 0)))
    赋值 (集_数据库句柄, 部_整数变量 [1])
    集_动态链接库.置入 (部_整数变量 [2])
    返回 (真)
.如果真结束

返回 (假)

.子程序 是否已连接, 逻辑型, 公开, 
返回 (不等于 (集_数据库句柄, 0))

.子程序 连接, 逻辑型, 公开, Open 数据库存在则打开，不存在则创建。
.参数 参数_数据库文件, 文本型, 可空, 如果为空，表示创建一个内存数据库
.参数 参数_数据库密码, 文本型, 可空, 
.参数 参数_是否允许创建, 逻辑型, 可空, 在指定的数据库文件不存在的情况下，是否允许创建数据库，如果为假则直接返回，否则返回是否创建并连接成功

.局部变量 部_数据库文件, 字节集, , , 
.局部变量 部_数据库密码, 文本型, , , 
.局部变量 部_数据库打开方式, 整数型, , , 

赋值 (部_数据库文件, EC_ANSI转UTF8 (选择 (等于 (参数_数据库文件, “”), “:memory:”, 参数_数据库文件)))
赋值 (部_数据库密码, 到文本 (参数_数据库密码))
赋值 (部_数据库打开方式, 选择 (参数_是否允许创建, #SQLITE_打开_创建, #SQLITE_打开_读写))

集_动态链接库.取函数 (“sqlite3_open_v2”, 集_函数地址)
.如果真 (不等于 (EC_执行子程序 (集_函数地址, API_取变量指针_字节集型 (部_数据库文件, 部_数据库文件), API_取变量指针_整数型 (集_数据库句柄, 集_数据库句柄), 部_数据库打开方式, 0), 0))
    返回 (假)
.如果真结束

.如果真 (等于 (是否为空 (参数_数据库密码), 假))
    集_动态链接库.取函数 (“sqlite3_key”, 集_函数地址)
    .如果真 (不等于 (EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_文本型 (部_数据库密码, 部_数据库密码), 取文本长度 (部_数据库密码)), 0))
        返回 (假)
    .如果真结束
    
.如果真结束

返回 (真)

.子程序 关闭, 逻辑型, 公开, 
.局部变量 部_返回值, 整数型, , , 

.如果真 (等于 (集_数据库句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_close”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_数据库句柄))
赋值 (集_数据库句柄, 0)
返回 (等于 (部_返回值, 0))

.子程序 置密码, 逻辑型, 公开, Rekey
.参数 参数_新密码, 文本型, 可空, 

.局部变量 部_密码, 文本型, , , 

集_动态链接库.取函数 (“sqlite3_rekey”, 集_函数地址)

赋值 (部_密码, 参数_新密码)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_文本型 (部_密码, 部_密码), 取文本长度 (部_密码)), 0))

.子程序 错误代码, 整数型, 公开, Errcode
集_动态链接库.取函数 (“sqlite3_errcode”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_数据库句柄))

.子程序 最后错误, 文本型, 公开, Errmsg
.局部变量 部_执行结果, 整数型, , , 
.局部变量 部_错误描述, 字节集, , , 
.局部变量 部_错误文本, 文本型, , , 

集_动态链接库.取函数 (“sqlite3_errmsg”, 集_函数地址)
赋值 (部_执行结果, EC_执行子程序 (集_函数地址, 集_数据库句柄))
赋值 (部_错误文本, EC_UTF8转ANSI (指针到字节集 (部_执行结果, API_取内存指针文本长度 (部_执行结果))))
返回 (选择 (等于 (部_错误文本, “not an error”), “”, 部_错误文本))

.子程序 引擎版本, 文本型, 公开, LibVersion
.局部变量 部_执行结果, 整数型, , , 
.局部变量 部_版本, 文本型, , , 

集_动态链接库.取函数 (“sqlite3_libversion”, 集_函数地址)
赋值 (部_执行结果, EC_执行子程序 (集_函数地址))
.如果真 (不等于 (部_执行结果, 0))
    赋值 (部_版本, 指针到文本 (部_执行结果))
.如果真结束
返回 (部_版本)

.子程序 设超时时间, 逻辑型, 公开, BusyTimeout 设置数据库被锁定时的最大等待时间，如果数据库超过最大等待时间后还没有被解锁，则中止尝试执行当前操作
.参数 参数_时间, 整数型, , 毫秒

集_动态链接库.取函数 (“sqlite3_busy_timeout”, 集_函数地址)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_数据库句柄, 参数_时间), 0))

.子程序 执行SQL, 逻辑型, 公开, 成功返回真，失败返回假。
.参数 参数_SQL语句, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_sql, 字节集, , , 
.局部变量 部_错误信息, 整数型, , , 

集_动态链接库.取函数 (“sqlite3_exec”, 集_函数地址)

赋值 (部_sql, EC_ANSI转UTF8 (参数_SQL语句))
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_字节集型 (部_sql, 部_sql), 0, 0, API_取变量指针_整数型 (部_错误信息, 部_错误信息)))
赋值 (参数_错误信息, EC_UTF8转ANSI (指针到字节集 (部_错误信息, API_取内存指针文本长度 (部_错误信息))))

.如果真 (等于 (集_动态链接库.取函数 (“sqlite3_free”, 集_函数地址), 真))
    EC_执行子程序 (集_函数地址, 部_错误信息)
.如果真结束

返回 (等于 (部_返回值, 0))

.子程序 取表内容, 逻辑型, 公开, GetTableContent
.参数 参数_SQL语句, 文本型, , 
.参数 参数_表内容, 文本型, 数组, 返回一个二维数组
.参数 参数_行数, 整数型, 参考 可空, 
.参数 参数_列数, 整数型, 参考 可空, 
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_sql, 字节集, , , 
.局部变量 部_内容, 整数型, , , 
.局部变量 部_内容数组, 整数型, , "0", 
.局部变量 部_错误信息, 整数型, , , 
.局部变量 部_成员数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

集_动态链接库.取函数 (“sqlite3_get_table”, 集_函数地址)

赋值 (部_sql, EC_ANSI转UTF8 (参数_SQL语句))
.如果真 (不等于 (EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_字节集型 (部_sql, 部_sql), API_取变量指针_整数型 (部_内容, 0), API_取变量指针_整数型 (参数_行数, 0), API_取变量指针_整数型 (参数_列数, 0), API_取变量指针_整数型 (部_错误信息, 0)), 0))
    赋值 (参数_错误信息, EC_UTF8转ANSI (指针到字节集 (部_错误信息, API_取内存指针文本长度 (部_错误信息))))
    集_动态链接库.取函数 (“sqlite3_free_table”, 集_函数地址)
    EC_执行子程序 (集_函数地址, 部_内容)
    返回 (假)
.如果真结束

赋值 (部_成员数, 相乘 (参数_行数, 参数_列数))
.如果真 (等于 (部_成员数, 0))
    返回 (假)
.如果真结束

重定义数组 (部_内容数组, 假, 参数_行数, 参数_列数)
重定义数组 (参数_表内容, 假, 参数_行数, 参数_列数)

API_复制到类型_整数数组 (部_内容数组, 部_内容, 相乘 (4, 部_成员数))
.计次循环首 (参数_行数, i)
    .计次循环首 (参数_列数, j)
        赋值 (参数_表内容 [i] [j], EC_UTF8转ANSI (指针到字节集 (部_内容数组 [i] [j], API_取内存指针文本长度 (部_内容数组 [i] [j]))))
    .计次循环尾 ()
.计次循环尾 ()

集_动态链接库.取函数 (“sqlite3_free_table”, 集_函数地址)
EC_执行子程序 (集_函数地址, 部_内容)
返回 (等于 (部_返回值, 0))

.子程序 枚举表, 逻辑型, 公开, EnumTable 返回表名列表记录集，字段0：表名称；字段1：创建时的SQL语句。
返回 (执行SQL (“select tbl_name,sql from sqlite_master where type='table' and tbl_name<>'sqlite_sequence'”))

.子程序 枚举索引, 逻辑型, 公开, EnumTable 返回索引列表记录集，字段0：索引名；字段1：创建时的SQL语句。
.参数 参数_表名, 文本型, , 

返回 (执行SQL (相加 (“select name,sql from sqlite_master where type='index' and tbl_name='”, 参数_表名, “'”)))

.子程序 枚举视图, 逻辑型, 公开, EnumView 返回视图名列表记录集，字段0：视图名称；字段1：创建时的SQL语句。
返回 (执行SQL (“select name,sql from sqlite_master where type='view'”))

.子程序 枚举触发器, 逻辑型, 公开, EnumTrigger 返回触发器名列表记录集，字段0：触发器名；字段1：创建时的SQL语句。
.参数 参数_表名, 文本型, , 

返回 (执行SQL (相加 (“select name,sql from sqlite_master where type='trigger' and tbl_name='”, 参数_表名, “'”)))

.子程序 字段类型到文本, 文本型, , 
.参数 参数_字段类型, 整数型, , 

.局部变量 部_返回值, 文本型, , , 

.判断开始 (等于 (参数_字段类型, 1))
    赋值 (部_返回值, “Byte”)
.判断 (等于 (参数_字段类型, 2))
    赋值 (部_返回值, “Smallint”)
.判断 (等于 (参数_字段类型, 3))
    赋值 (部_返回值, “Integer”)
.判断 (等于 (参数_字段类型, 4))
    赋值 (部_返回值, “BigInt”)
.判断 (等于 (参数_字段类型, 5))
    赋值 (部_返回值, “Decimal”)
.判断 (等于 (参数_字段类型, 6))
    赋值 (部_返回值, “Double”)
.判断 (等于 (参数_字段类型, 7))
    赋值 (部_返回值, “Bit”)
.判断 (等于 (参数_字段类型, 8))
    赋值 (部_返回值, “DateTime”)
.判断 (等于 (参数_字段类型, 10))
    赋值 (部_返回值, “VarChar”)
.判断 (等于 (参数_字段类型, 11))
    赋值 (部_返回值, “Blob”)
.判断 (等于 (参数_字段类型, 12))
    赋值 (部_返回值, “Text”)
.默认
    
.判断结束
返回 (部_返回值)


.子程序 字段属性到文本, 文本型, , 
.参数 参数_字段属性, 整数型, , 

.局部变量 部_返回值, 文本型, , , 

.如果真 (等于 (位与 (参数_字段属性, 1), 1)) ' 主键
    赋值 (部_返回值, “Primary Key”)
.如果真结束
.如果真 (等于 (位与 (参数_字段属性, 2), 2)) ' 自动递增
    赋值 (部_返回值, 相加 (部_返回值, “ AutoIncrement”))
.如果真结束
.如果真 (等于 (位与 (参数_字段属性, 4), 4)) ' 非空
    赋值 (部_返回值, 相加 (部_返回值, “ Not Null”))
.如果真结束
返回 (部_返回值)

.子程序 创建表, 逻辑型, 公开, CreateTable
.参数 参数_表名, 文本型, , 
.参数 参数_字段信息, 类型_SQLITE3字段, 数组, 
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 部_字段数量, 整数型, , , 
.局部变量 部_循环计次, 整数型, , , 
.局部变量 部_SQL文本, 文本型, , , 

赋值 (部_字段数量, 取数组成员数 (参数_字段信息))
赋值 (部_SQL文本, 相加 (“create table ”, 参数_表名))
.如果真 (不等于 (部_字段数量, 0))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “ (”))
.如果真结束
.计次循环首 (部_字段数量, 部_循环计次)
    赋值 (部_SQL文本, 相加 (部_SQL文本, 参数_字段信息 [部_循环计次], 字段名称, “ ”, 字段类型到文本 (参数_字段信息 [部_循环计次], 字段类型)))
    .如果真 (不等于 (参数_字段信息 [部_循环计次], 字段长度, 0))
        赋值 (部_SQL文本, 相加 (部_SQL文本, “(”, 到文本 (参数_字段信息 [部_循环计次], 字段长度), “)”))
    .如果真结束
    .如果真 (不等于 (参数_字段信息 [部_循环计次], 字段属性, 0))
        赋值 (部_SQL文本, 相加 (部_SQL文本, “ ”, 字段属性到文本 (参数_字段信息 [部_循环计次], 字段属性)))
    .如果真结束
    .如果真 (不等于 (参数_字段信息 [部_循环计次], 字段默认, “”))
        赋值 (部_SQL文本, 相加 (部_SQL文本, “ Default ”, 参数_字段信息 [部_循环计次], 字段默认))
    .如果真结束
    
    .如果真 (不等于 (部_字段数量, 部_循环计次))
        赋值 (部_SQL文本, 相加 (部_SQL文本, “,”))
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (部_字段数量, 0))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “)”))
.如果真结束
返回 (执行SQL (部_SQL文本, 参数_错误信息))

.子程序 删除表, 逻辑型, 公开, DropTable
.参数 参数_表名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“drop table if exists ”, 参数_表名), 参数_错误信息))

.子程序 重命名表, 逻辑型, 公开, ReName
.参数 参数_旧表名, 文本型, , 
.参数 参数_新表名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“alter table ”, 参数_旧表名, “ rename to ”, 参数_新表名), 参数_错误信息))

.子程序 添加字段, 逻辑型, 公开, AddColumn
.参数 参数_表名, 文本型, , 
.参数 参数_字段信息, 类型_SQLITE3字段, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 sql, 文本型, , , 

赋值 (sql, 相加 (“alter table ”, 参数_表名, “ add column ”, 参数_字段信息.字段名称, “ ”, 字段类型到文本 (参数_字段信息.字段类型)))
.如果真 (并且 (等于 (参数_字段信息.字段类型, 10), 不等于 (参数_字段信息.字段长度, 0)))
    赋值 (sql, 相加 (sql, “(”, 到文本 (参数_字段信息.字段长度), “)”))
.如果真结束
.如果真 (不等于 (参数_字段信息.字段属性, 0))
    赋值 (sql, 相加 (sql, “ ”, 字段属性到文本 (参数_字段信息.字段属性)))
    .如果真 (不等于 (位与 (参数_字段信息.字段属性, 8), 0))
        赋值 (sql, 相加 (sql, “ ”, 参数_字段信息.字段默认))
    .如果真结束
    
.如果真结束
返回 (执行SQL (sql, 参数_错误信息))

.子程序 创建索引, 逻辑型, 公开, CreateIndex
.参数 参数_索引名, 文本型, , 
.参数 参数_表名, 文本型, , 
.参数 参数_字段名, 文本型, , 多个字段用“,”分开。如：“Column1 ACS,Column2 DESC”
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 sql, 文本型, , , 

赋值 (sql, 相加 (“create index if not exists ”, 参数_索引名, “ on ”, 参数_表名, “(”, 参数_字段名, “)”))
返回 (执行SQL (sql, 参数_错误信息))

.子程序 删除索引, 逻辑型, 公开, DropIndex
.参数 参数_索引名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“drop index if exists ”, 参数_索引名), 参数_错误信息))

.子程序 创建视图, 逻辑型, 公开, CreateView
.参数 参数_视图名, 文本型, , 
.参数 参数_查询语句, 文本型, , select 语句
.参数 参数_是否临时视图, 逻辑型, 可空, 默认为假。
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 sql, 文本型, , , 

赋值 (sql, “CREATE ”)
.如果真 (参数_是否临时视图)
    赋值 (sql, 相加 (sql, “TEMPORARY ”))
.如果真结束
赋值 (sql, 相加 (sql, “VIEW ”, 参数_视图名, “ AS ”, 参数_查询语句))
返回 (执行SQL (sql, 参数_错误信息))

.子程序 删除视图, 逻辑型, 公开, DropView
.参数 参数_视图名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 sql, 文本型, , , 

赋值 (sql, 相加 (“DROP VIEW ”, 参数_视图名))
返回 (执行SQL (sql, 参数_错误信息))

.子程序 创建触发器, 逻辑型, 公开, CreateTrigger
.参数 参数_表名, 文本型, , 
.参数 参数_触发器名, 文本型, , 
.参数 参数_执行语句, 文本型, , 但事件成立时，所触发的SQL语句。注意：必须以“;”号结尾
.参数 参数_触发条件, 整数型, , “S3触发条件_”开头常量。
.参数 参数_字段名, 文本型, 可空, 但“参数_触发条件”=“S3触发条件_字段更新”时，指定字段名，多个字段用“,”分开
.参数 参数_发生时间, 整数型, 可空, “S3触发时间_”开头常量。默认为“S3触发时间_普通模式”
.参数 参数_是否临时触发器, 逻辑型, 可空, 默认为假。
.参数 参数_错误信息, 文本型, 参考 可空, 

.局部变量 部_SQL文本, 文本型, , , 

赋值 (部_SQL文本, “CREATE ”)
.如果真 (参数_是否临时触发器)
    赋值 (部_SQL文本, 相加 (部_SQL文本, “TEMPORARY ”))
.如果真结束
赋值 (部_SQL文本, 相加 (部_SQL文本, “TRIGGER ”, 参数_触发器名, “ ”))
.判断开始 (等于 (参数_发生时间, #S3触发时间_之前))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “BEFORE ”))
.判断 (等于 (参数_发生时间, #S3触发时间_之后))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “AFTER ”))
.默认
    
.判断结束

.判断开始 (等于 (参数_触发条件, #S3触发条件_插入))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “INSERT ”))
.判断 (等于 (参数_触发条件, #S3触发条件_删除))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “DELETE ”))
.判断 (等于 (参数_触发条件, #S3触发条件_更新))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “UPDATE ”))
.判断 (等于 (参数_触发条件, #S3触发条件_字段更新))
    赋值 (部_SQL文本, 相加 (部_SQL文本, “UPDATE OF ”, 参数_字段名, “ ”))
.默认
    
.判断结束

赋值 (部_SQL文本, 相加 (部_SQL文本, “ON ”, 参数_表名, “ BEGIN ”, 参数_执行语句, “ END”))
返回 (执行SQL (部_SQL文本, 参数_错误信息))

.子程序 删除触发器, 逻辑型, 公开, DropTrigger
.参数 参数_触发器名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“DROP TRIGGER ”, 参数_触发器名), 参数_错误信息))

.子程序 开始事务, 逻辑型, 公开, Begin
返回 (执行SQL (“BEGIN”))

.子程序 提交事务, 逻辑型, 公开, Commit
返回 (执行SQL (“COMMIT”))

.子程序 回滚事务, 逻辑型, 公开, RollBack
返回 (执行SQL (“ROLLBACK”))

.子程序 中断, 空白型, 公开, Interrupt 中断一切未完成的操作，如果开始一个事务，将自动回滚事务
集_动态链接库.取函数 (“sqlite3_interrupt”, 集_函数地址)
EC_执行子程序 (集_函数地址, 集_数据库句柄)

.子程序 压缩数据库, 逻辑型, 公开, VACUUM 收缩数据所占用的磁盘空间。经过大批量记录增删之后，数据库文件可能会变的较大，调用此方法可释放一部分缓冲区域，以减少文件尺寸。
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (“VACUUM”, 参数_错误信息))

.子程序 影响行数, 整数型, 公开, ChangeCount 返回上一次insert、update、delete等操作的行数。
集_动态链接库.取函数 (“sqlite3_changes”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_数据库句柄))

.子程序 附加数据库, 逻辑型, 公开, AttachDatabase 附加一个数据库到当前连接，使之可以同时操作多个数据库。
.参数 参数_文件名, 文本型, , 数据库的文件名。
.参数 参数_数据库名, 文本型, , 以后可以通过这个数据库名，访问附加的数据库。如：“数据库名.表名”
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“Attach Database '”, 参数_文件名, “' as ”, 参数_数据库名), 参数_错误信息))

.子程序 拆分数据库, 逻辑型, 公开, DetachDatabase 拆分一个之前使用“对象.附加数据库()”附加的数据库连接。此方法不能用于事务中
.参数 参数_数据库名, 文本型, , 
.参数 参数_错误信息, 文本型, 参考 可空, 

返回 (执行SQL (相加 (“Detach Database ”, 参数_数据库名), 参数_错误信息))

.子程序 备份数据库, 逻辑型, 公开, BackupDatabase
.参数 参数_文件名, 文本型, , 目标文件名。
.参数 参数_回调函数, 整数型, 可空, (整数型 剩余页数，整数型 总页数) 无返回值
.参数 参数_源数据库名, 文本型, 可空, 默认为：main。主数据库。

.局部变量 部_UFT8数据, 字节集, , , 
.局部变量 部_返回值, 整数型, , , 
.局部变量 部_sqlite3, 整数型, , , 
.局部变量 部_Backup, 整数型, , , 
.局部变量 部_剩余页数, 整数型, , , 
.局部变量 部_总页数, 整数型, , , 

.如果真 (是否为空 (参数_源数据库名))
    赋值 (参数_源数据库名, “main”)
.如果真结束

集_动态链接库.取函数 (“sqlite3_open”, 集_函数地址)

赋值 (部_UFT8数据, EC_ANSI转UTF8 (参数_文件名))
赋值 (部_返回值, EC_执行子程序 (集_函数地址, API_取变量指针_字节集型 (部_UFT8数据, 部_UFT8数据), API_取变量指针_整数型 (部_sqlite3, 部_sqlite3)))
.如果真 (不等于 (部_返回值, 0))
    集_动态链接库.取函数 (“sqlite3_close”, 集_函数地址)
    EC_执行子程序 (集_函数地址, 部_sqlite3)
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_backup_init”, 集_函数地址)
赋值 (部_Backup, EC_执行子程序 (集_函数地址, 部_sqlite3, API_取变量指针_文本型 (“main”, “main”), 集_数据库句柄, API_取变量指针_文本型 (参数_源数据库名, 参数_源数据库名)))
.如果真 (等于 (部_Backup, 0))
    集_动态链接库.取函数 (“sqlite3_close”, 集_函数地址)
    EC_执行子程序 (集_函数地址, 部_sqlite3)
    返回 (假)
.如果真结束

.循环判断首 ()
    集_动态链接库.取函数 (“sqlite3_backup_step”, 集_函数地址)
    赋值 (部_返回值, EC_执行子程序 (集_函数地址, 部_Backup, 5))
    .如果真 (不等于 (参数_回调函数, 0))
        集_动态链接库.取函数 (“sqlite3_backup_remaining”, 集_函数地址)
        赋值 (部_剩余页数, EC_执行子程序 (集_函数地址, 部_Backup))
        集_动态链接库.取函数 (“sqlite3_backup_pagecount”, 集_函数地址)
        赋值 (部_总页数, EC_执行子程序 (集_函数地址, 部_Backup))
        EC_执行子程序 (参数_回调函数, 部_剩余页数, 部_总页数)
    .如果真结束
    .如果真 (或者 (等于 (部_返回值, #SQLITE_繁忙), 等于 (部_返回值, #SQLITE_锁定)))
        集_动态链接库.取函数 (“sqlite3_sleep”, 集_函数地址)
        EC_执行子程序 (集_函数地址, 250)
    .如果真结束
    
.循环判断尾 (或者 (等于 (部_返回值, 0), 等于 (部_返回值, #SQLITE_繁忙), 等于 (部_返回值, #SQLITE_锁定)))
集_动态链接库.取函数 (“sqlite3_backup_finish”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 部_Backup))
集_动态链接库.取函数 (“sqlite3_close”, 集_函数地址)
EC_执行子程序 (集_函数地址, 部_sqlite3)
返回 (等于 (部_返回值, 0))

.子程序 自定义_创建函数, 逻辑型, , create_function 创建一个自定义的SQL函数。普通函数只使用“参数_函数指针”，聚合函数使用“参数_单步回调函数”和“参数_完成回调函数”
.参数 参数_函数名, 文本型, , 
.参数 参数_参数个数, 整数型, , 
.参数 参数_用户数据指针, 整数型, 可空, 以后在回调函数中可以用“对象.自定义_取用户数据”获取
.参数 参数_回调函数, 整数型, 可空, xFunc (整数型 sqlite3上下文，整数型 参数个数，整数型 sqlite3值数组指针) 无返回值
.参数 参数_单步回调函数, 整数型, 可空, xStep (整数型 sqlite3上下文，整数型 参数个数，整数型 sqlite3值数组指针) 无返回值
.参数 参数_完成回调函数, 整数型, 可空, xFinal (整数型 sqlite3上下文) 无返回值

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_函数名, 字节集, , , 

集_动态链接库.取函数 (“sqlite3_create_function”, 集_函数地址)

赋值 (部_函数名, EC_ANSI转UTF8 (参数_函数名))
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_字节集型 (部_函数名, 部_函数名), 参数_参数个数, #SQLITE_ANY, 参数_用户数据指针, 参数_回调函数, 参数_单步回调函数, 参数_完成回调函数))
返回 (等于 (部_返回值, 0))

.子程序 自定义_取用户数据, 整数型, , 返回用户数据指针。
.参数 参数_sqlite3上下文, 整数型, , 

集_动态链接库.取函数 (“sqlite3_user_data”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 参数_sqlite3上下文))

.子程序 自定义_取值类型, 整数型, , value_type 返回“SQLITE类型_”开头常量。
.参数 参数_sqlite3值, 整数型, , 

集_动态链接库.取函数 (“sqlite3_value_type”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 参数_sqlite3值))

.子程序 自定义_取值长度, 整数型, , value_bytes
.参数 参数_sqlite3值, 整数型, , 

集_动态链接库.取函数 (“sqlite3_value_bytes”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 参数_sqlite3值))

.子程序 自定义_取值文本, 文本型, , value_text
.参数 参数_sqlite3值, 整数型, , 

.局部变量 部_指针, 整数型, , , 
.局部变量 部_字节集, 字节集, , , 

集_动态链接库.取函数 (“sqlite3_value_text”, 集_函数地址)
赋值 (部_指针, EC_执行子程序 (集_函数地址, 参数_sqlite3值))
.如果真 (不等于 (部_指针, 0))
    赋值 (部_字节集, 指针到字节集 (部_指针, 自定义_取值长度 (参数_sqlite3值)))
.如果真结束
返回 (EC_UTF8转ANSI (部_字节集))

.子程序 自定义_取值字节集, 字节集, , value_blob
.参数 参数_sqlite3值, 整数型, , 

.局部变量 部_指针, 整数型, , , 

集_动态链接库.取函数 (“sqlite3_value_blob”, 集_函数地址)
赋值 (部_指针, EC_执行子程序 (集_函数地址, 参数_sqlite3值))
.如果真 (等于 (部_指针, 0))
    返回 ({  })
.如果真结束
返回 (指针到字节集 (部_指针, 自定义_取值长度 (参数_sqlite3值)))

.子程序 自定义_取值双精度小数, 双精度小数型, , value_double
.参数 参数_sqlite3值, 整数型, , 

集_动态链接库.取函数 (“sqlite3_value_double”, 集_函数地址)
返回 (EC_执行子程序_双精度 (集_函数地址, 参数_sqlite3值))

.子程序 自定义_取值整数, 整数型, , value_int
.参数 参数_sqlite3值, 整数型, , 

集_动态链接库.取函数 (“sqlite3_value_int”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 参数_sqlite3值))

.子程序 自定义_取值长整数, 长整数型, , value_int64
.参数 参数_sqlite3值, 整数型, , 

集_动态链接库.取函数 (“sqlite3_value_int64”, 集_函数地址)
返回 (EC_执行子程序_长整数 (集_函数地址, 参数_sqlite3值))

.子程序 自定义_返回文本, 空白型, , result_text
.参数 参数_sqlite3上下文, 整数型, , 
.参数 参数_文本, 文本型, , 
.参数 参数_析构类型, 整数型, 可空, “S3析构_”开头常量。默认为：“S3析构_临时”

.局部变量 部_文本, 字节集, , , 

集_动态链接库.取函数 (“sqlite3_result_text”, 集_函数地址)
.如果真 (是否为空 (参数_析构类型))
    赋值 (参数_析构类型, -1)
.如果真结束
赋值 (部_文本, EC_ANSI转UTF8 (参数_文本))
EC_执行子程序 (集_函数地址, 参数_sqlite3上下文, API_取变量指针_字节集型 (部_文本, 部_文本), 取字节集长度 (部_文本), 参数_析构类型)

.子程序 自定义_返回字节集, 空白型, , result_blob
.参数 参数_sqlite3上下文, 整数型, , 
.参数 参数_字节集, 字节集, , 
.参数 参数_析构类型, 整数型, 可空, “S3析构_”开头常量。默认为：“S3析构_临时”

集_动态链接库.取函数 (“sqlite3_result_blob”, 集_函数地址)
.如果真 (是否为空 (参数_析构类型))
    赋值 (参数_析构类型, -1)
.如果真结束
EC_执行子程序 (集_函数地址, 参数_sqlite3上下文, API_取变量指针_字节集型 (参数_字节集, 参数_字节集), 取字节集长度 (参数_字节集), 参数_析构类型)

.子程序 自定义_返回整数, 空白型, , result_int
.参数 参数_sqlite3上下文, 整数型, , 
.参数 参数_整数, 整数型, , 

集_动态链接库.取函数 (“sqlite3_result_int”, 集_函数地址)
EC_执行子程序 (集_函数地址, 参数_sqlite3上下文, 参数_整数)

.子程序 自定义_返回长整数, 空白型, , result_int64
.参数 参数_sqlite3上下文, 整数型, , 
.参数 参数_长整数, 长整数型, , 

.局部变量 部_指针, LARGE_INTEGER, , , 

集_动态链接库.取函数 (“sqlite3_result_int64”, 集_函数地址)
API_复制内存_LARGE_INTEGER (部_指针, 参数_长整数, 8)
EC_执行子程序 (集_函数地址, 参数_sqlite3上下文, 部_指针.lowpart, 部_指针.highpart)

.子程序 自定义_返回双精度小数, 空白型, , result_double
.参数 参数_sqlite3上下文, 整数型, , 
.参数 参数_双精度小数, 双精度小数型, 参考, 

.局部变量 部_指针, LARGE_INTEGER, , , 

集_动态链接库.取函数 (“sqlite3_result_double”, 集_函数地址)
API_复制内存_LARGE_DOUBLE (部_指针, 参数_双精度小数, 8)
EC_执行子程序 (集_函数地址, 参数_sqlite3上下文, 部_指针.lowpart, 部_指针.highpart)

.子程序 自定义_返回空, 空白型, , result_null
.参数 参数_SQLITE3上下文, 整数型, , 

集_动态链接库.取函数 (“sqlite3_result_null”, 集_函数地址)
EC_执行子程序 (集_函数地址, 参数_SQLITE3上下文)


.程序集 SQLITE公共程序集, , , 

.子程序 EC_ANSI转UTF8, 字节集, , 
.参数 参数_Ansi文本, 文本型, , 

.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_Ansi长度, 整数型, , , 
.局部变量 局部_utf8长度, 整数型, , , 
.局部变量 局部_Unicode, 字节集, , , 
.局部变量 局部_utf8, 字节集, , , 

赋值 (局部_Ansi长度, 相加 (取文本长度 (参数_Ansi文本), 1))
赋值 (局部_长度, API_MultiByteToWideChar (936, 0, 参数_Ansi文本, 局部_Ansi长度, 局部_Unicode, 0))
.如果真 (等于 (局部_长度, 0))
    返回 ({  })
.如果真结束
赋值 (局部_Unicode, 取空白字节集 (相乘 (局部_长度, 2)))
.如果真 (等于 (API_MultiByteToWideChar (936, 0, 参数_Ansi文本, 局部_Ansi长度, 局部_Unicode, 相乘 (局部_长度, 2)), 0))
    返回 ({  })
.如果真结束
赋值 (局部_utf8长度, API_WideCharToMultiByte_byte (65001, 0, 局部_Unicode, 局部_长度, 局部_utf8, 0, 0, 0))
.如果真 (等于 (局部_utf8长度, 0))
    返回 ({  })
.如果真结束
赋值 (局部_utf8, 取空白字节集 (局部_utf8长度))
.如果真 (等于 (API_WideCharToMultiByte_byte (65001, 0, 局部_Unicode, 局部_长度, 局部_utf8, 局部_utf8长度, 0, 0), 0))
    返回 ({  })
.如果真结束
返回 (局部_utf8)

.子程序 EC_UTF8转ANSI, 文本型, , 
.参数 参数_Utf8数据, 字节集, , 

.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_Unicode长度, 整数型, , , 
.局部变量 局部_Unicode, 字节集, , , 
.局部变量 局部_Ansi, 文本型, , , 

赋值 (局部_长度, 取字节集长度 (参数_Utf8数据))
赋值 (局部_Unicode长度, API_MultiByteToWideChar_byte (65001, 0, 参数_Utf8数据, 局部_长度, 局部_Unicode, 0))
.如果真 (等于 (局部_Unicode长度, 0))
    返回 (“”)
.如果真结束
赋值 (局部_Unicode, 取空白字节集 (相乘 (局部_Unicode长度, 2)))
.如果真 (等于 (API_MultiByteToWideChar_byte (65001, 0, 参数_Utf8数据, 局部_长度, 局部_Unicode, 相乘 (局部_Unicode长度, 2)), 0))
    返回 (“”)
.如果真结束
赋值 (局部_长度, API_宽字符到双字节 (936, 0, 局部_Unicode, 局部_Unicode长度, 局部_Ansi, 0, 0, 0))
.如果真 (等于 (局部_长度, 0))
    返回 (“”)
.如果真结束
赋值 (局部_Ansi, 取空白文本 (局部_长度))
.如果真 (等于 (API_宽字符到双字节 (936, 0, 局部_Unicode, 局部_Unicode长度, 局部_Ansi, 局部_长度, 0, 0), 0))
    返回 (“”)
.如果真结束
返回 (局部_Ansi)

.子程序 EC_分解长整数, 空白型, 公开, 
.参数 参数_已合并的整数, 长整数型, , 
.参数 参数_分解后的整数1, 整数型, 参考, 提供变量
.参数 参数_分解后的整数2, 整数型, 参考, 提供变量

.局部变量 部_临时字节集, 字节集, , , 

赋值 (部_临时字节集, 到字节集 (参数_已合并的整数))
赋值 (参数_分解后的整数1, 取字节集数据 (部_临时字节集, #整数型, ))
赋值 (参数_分解后的整数2, 取字节集数据 (部_临时字节集, #整数型, 5))

.子程序 EC_合并长整数, 长整数型, 公开, 
.参数 参数_欲合并的整数1, 整数型, , 最长9位数
.参数 参数_欲合并的整数2, 整数型, , 最长9位数

返回 (取字节集数据 (相加 (到字节集 (参数_欲合并的整数1), 到字节集 (参数_欲合并的整数2)), #长整数型, ))

.子程序 EC_执行子程序, 整数型, , 执行一个子程序。
.参数 函数地址, 整数型, , 
.参数 参数1, 整数型, 可空, 
.参数 参数2, 整数型, 可空, 
.参数 参数3, 整数型, 可空, 
.参数 参数4, 整数型, 可空, 
.参数 参数5, 整数型, 可空, 
.参数 参数6, 整数型, 可空, 
.参数 参数7, 整数型, 可空, 
.参数 参数8, 整数型, 可空, 

.局部变量 局部_返回值, 整数型, , , 

EC_汇编调用子程序 (函数地址, 真, 局部_返回值, 参数1, 参数2, 参数3, 参数4, 参数5, 参数6, 参数7, 参数8)
返回 (局部_返回值)

.子程序 EC_执行子程序_双精度, 双精度小数型, , 执行一个子程序。
.参数 函数地址, 整数型, , 
.参数 参数1, 整数型, 可空, 
.参数 参数2, 整数型, 可空, 
.参数 参数3, 整数型, 可空, 
.参数 参数4, 整数型, 可空, 
.参数 参数5, 整数型, 可空, 
.参数 参数6, 整数型, 可空, 
.参数 参数7, 整数型, 可空, 
.参数 参数8, 整数型, 可空, 

.局部变量 参数数组, 整数型, , "0", 

.计次循环首 (1, )
    .如果真 (是否为空 (参数1))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数1)
    .如果真 (是否为空 (参数2))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数2)
    .如果真 (是否为空 (参数3))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数3)
    .如果真 (是否为空 (参数4))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数4)
    .如果真 (是否为空 (参数5))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数5)
    .如果真 (是否为空 (参数6))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数6)
    .如果真 (是否为空 (参数7))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数7)
    .如果真 (是否为空 (参数8))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数8)
.计次循环尾 ()
返回 (API_调用子程序_双精度小数型 ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 函数地址, 参数数组, 取数组成员数 (参数数组), 真))


.子程序 EC_执行子程序_长整数, 长整数型, , 执行一个子程序。
.参数 函数地址, 整数型, , 
.参数 参数1, 整数型, 可空, 
.参数 参数2, 整数型, 可空, 
.参数 参数3, 整数型, 可空, 
.参数 参数4, 整数型, 可空, 
.参数 参数5, 整数型, 可空, 
.参数 参数6, 整数型, 可空, 
.参数 参数7, 整数型, 可空, 
.参数 参数8, 整数型, 可空, 

.局部变量 参数数组, 整数型, , "0", 

.计次循环首 (1, )
    .如果真 (是否为空 (参数1))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数1)
    .如果真 (是否为空 (参数2))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数2)
    .如果真 (是否为空 (参数3))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数3)
    .如果真 (是否为空 (参数4))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数4)
    .如果真 (是否为空 (参数5))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数5)
    .如果真 (是否为空 (参数6))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数6)
    .如果真 (是否为空 (参数7))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数7)
    .如果真 (是否为空 (参数8))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数8)
.计次循环尾 ()
返回 (API_调用子程序_长整数型 ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 函数地址, 参数数组, 取数组成员数 (参数数组), 真))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 EC_执行子程序_小整数, 小数型, , 执行一个子程序。
.参数 函数地址, 整数型, , 
.参数 参数1, 整数型, 可空, 
.参数 参数2, 整数型, 可空, 
.参数 参数3, 整数型, 可空, 
.参数 参数4, 整数型, 可空, 
.参数 参数5, 整数型, 可空, 
.参数 参数6, 整数型, 可空, 
.参数 参数7, 整数型, 可空, 
.参数 参数8, 整数型, 可空, 

.局部变量 参数数组, 整数型, , "0", 

.计次循环首 (1, )
    .如果真 (是否为空 (参数1))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数1)
    .如果真 (是否为空 (参数2))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数2)
    .如果真 (是否为空 (参数3))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数3)
    .如果真 (是否为空 (参数4))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数4)
    .如果真 (是否为空 (参数5))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数5)
    .如果真 (是否为空 (参数6))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数6)
    .如果真 (是否为空 (参数7))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数7)
    .如果真 (是否为空 (参数8))
        跳出循环 ()
    .如果真结束
    加入成员 (参数数组, 参数8)
.计次循环尾 ()
返回 (API_调用子程序_小数型 ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 函数地址, 参数数组, 取数组成员数 (参数数组), 真))


.子程序 EC_汇编调用子程序, 逻辑型, , 
.参数 子程序指针或子程序地址, 空白型, , 
.参数 是否为C调用, 逻辑型, 可空, 
.参数 返回值, 空白型, 参考 可空, 
.参数 参数1, 空白型, 可空, 
.参数 参数2, 空白型, 可空, 
.参数 参数3, 空白型, 可空, 
.参数 参数4, 空白型, 可空, 
.参数 参数5, 空白型, 可空, 
.参数 参数6, 空白型, 可空, 
.参数 参数7, 空白型, 可空, 
.参数 参数8, 空白型, 可空, 
.参数 参数9, 空白型, 可空, 
.参数 参数10, 空白型, 可空, 
.参数 参数11, 空白型, 可空, 
.参数 参数12, 空白型, 可空, 
.参数 参数13, 空白型, 可空, 
.参数 参数14, 空白型, 可空, 
.参数 参数15, 空白型, 可空, 

置入代码 ({ 86, 81, 51, 201, 81, 177, 15, 139, 245, 129, 198, 152, 0, 0, 0, 131, 238, 8, 139, 198, 139, 0, 133, 192, 116, 8, 139, 70, 252, 80, 131, 69, 244, 4, 226, 235, 255, 85, 8, 139, 77, 20, 137, 1, 51, 192, 57, 69, 12, 116, 3, 3, 101, 244, 89, 89, 94 })
返回 (真)

.类模块 动态链接库操作类, , , 鑫佑软件 卖烧烤出品

.程序集变量 集_动态链接库句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 加载, 逻辑型, 公开, 加载一个指定的动态链接库文件到内存，返回是否加载成功
.参数 参数_动态链接库文件, 文本型, , 

赋值 (集_动态链接库句柄, API_加载动态链接库 (参数_动态链接库文件))
返回 (不等于 (集_动态链接库句柄, 0))

.子程序 置入, 空白型, 公开, 置入一个已经被加载的动态链接库文件
.参数 参数_动态链接库句柄, 整数型, , 

赋值 (集_动态链接库句柄, 参数_动态链接库句柄)

.子程序 卸载, 逻辑型, 公开, 卸载一个已经被加载的动态链接库文件
返回 (不等于 (API_卸载动态链接库 (集_动态链接库句柄), 0))

.子程序 取句柄, 整数型, 公开, 取出当前已经被加载的动态链接库句柄
返回 (集_动态链接库句柄)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 取函数, 逻辑型, 公开, 查询当前已经被加载的动态链接库文件函数地址
.参数 参数_函数名称, 文本型, , 
.参数 参数_函数地址, 整数型, 参考, 

赋值 (参数_函数地址, API_取动态链接库函数地址 (集_动态链接库句柄, 参数_函数名称))
返回 (不等于 (参数_函数地址, 0))

.类模块 SQLITE记录集类, , , 

.程序集变量 集_动态链接库, 动态链接库操作类, , , 
.程序集变量 集_数据库句柄, 整数型, , , 
.程序集变量 集_函数地址, 整数型, , , 
.程序集变量 匿名程序集变量_3159, 空白型, , , 
.程序集变量 集_记录集句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭 ()

.子程序 置连接, 逻辑型, 公开, 
.参数 参数_SQLITE数据库连接类, SQLITE数据库连接类, , 

.局部变量 部_整数变量, 整数型, , "2", 

EC_分解长整数 (参数_SQLITE数据库连接类.取数据库句柄 (), 部_整数变量 [1], 部_整数变量 [2])
.如果真 (并且 (大于 (部_整数变量 [1], 0), 大于 (部_整数变量 [2], 0)))
    赋值 (集_数据库句柄, 部_整数变量 [1])
    集_动态链接库.置入 (部_整数变量 [2])
    返回 (真)
.如果真结束
返回 (假)

.子程序 取连接, SQLITE数据库连接类, 公开, 
.局部变量 部_SQLITE数据库连接类, SQLITE数据库连接类, , , 

部_SQLITE数据库连接类.置数据库句柄 (EC_合并长整数 (集_数据库句柄, 集_动态链接库.取句柄 ()))
返回 (部_SQLITE数据库连接类)

.子程序 打开, 逻辑型, 公开, ExecuteSQL 无论是否成功且任何SQL语句都需要关闭记录集。
.参数 参数_命令文本, 文本型, , SQL语句中的第一个“?”号对应“参数_数据1”的数据
.参数 参数_命令类型, 整数型, 可空, 1、SQL语句(默认) 2、数据表名
.参数 参数_附加数据1, 字节集, 可空, 
.参数 参数_附加数据2, 字节集, 可空, 
.参数 参数_附加数据3, 字节集, 可空, 
.参数 参数_附加数据4, 字节集, 可空, 
.参数 参数_附加数据5, 字节集, 可空, 

.局部变量 部_字节集, 字节集, , , 
.局部变量 部_返回值, 整数型, , , 
.局部变量 部_字节集数组, 字节集, , "0", 
.局部变量 部_循环计次, 整数型, , , 

赋值 (参数_命令类型, 选择 (是否为空 (参数_命令类型), #SQLITE_打开_SQL语句, 参数_命令类型))
' 本源码来自易语言资源网(www.5A5X.com)
.判断开始 (等于 (参数_命令类型, #SQLITE_打开_SQL语句))
    赋值 (部_字节集, EC_ANSI转UTF8 (参数_命令文本))
.判断 (等于 (参数_命令类型, #SQLITE_打开_数据表名))
    赋值 (部_字节集, EC_ANSI转UTF8 (相加 (“Select * From ”, 参数_命令文本)))
.默认
    
.判断结束

集_动态链接库.取函数 (“sqlite3_prepare_v2”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_字节集型 (部_字节集, 部_字节集), 取字节集长度 (部_字节集), API_取变量指针_整数型 (集_记录集句柄, 集_记录集句柄), 0))

.如果真 (并且 (不等于 (部_返回值, 0), 等于 (是否为空 (参数_附加数据1), 假)))
    加入成员 (部_字节集数组, 参数_附加数据1)
    加入成员 (部_字节集数组, 参数_附加数据2)
    加入成员 (部_字节集数组, 参数_附加数据3)
    加入成员 (部_字节集数组, 参数_附加数据4)
    加入成员 (部_字节集数组, 参数_附加数据5)
    集_动态链接库.取函数 (“sqlite3_bind_blob”, 集_函数地址) ' 绑定参数
    .计次循环首 (取数组成员数 (部_字节集数组), 部_循环计次)
        赋值 (集_记录集句柄, 0)
        .如果真 (小于或等于 (取字节集长度 (部_字节集数组 [部_循环计次]), 0))
            跳出循环 ()
        .如果真结束
        
        赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 部_循环计次, API_取变量指针_字节集型 (部_字节集数组 [部_循环计次], 部_字节集数组 [部_循环计次]), 取字节集长度 (部_字节集数组 [部_循环计次]), 0))
        .如果真 (不等于 (部_返回值, 0))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    集_动态链接库.取函数 (“sqlite3_step”, 集_函数地址) ' 执行
    赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄))
.如果真结束

返回 (不等于 (集_记录集句柄, 0))

.子程序 影响行数, 整数型, 公开, ChangeCount 返回上一次insert、update、delete等操作的行数。
集_动态链接库.取函数 (“sqlite3_changes”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_数据库句柄))

.子程序 关闭, 逻辑型, 公开, 关闭当前记录集
.如果真 (等于 (集_记录集句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_finalize”, 集_函数地址)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_记录集句柄), 0))

.子程序 是否已打开, 逻辑型, 公开, 
返回 (不等于 (集_记录集句柄, 0))

.子程序 记录数量, 整数型, 公开, 失败的方法
.局部变量 部_SQL语句, 文本型, , , 
.局部变量 部_字节集, 字节集, , , 
.局部变量 部_返回值, 整数型, , , 

.如果真 (大于 (集_记录集句柄, 0))
    赋值 (部_SQL语句, 删首尾空 (内部_取SQL语句 ()))
    .如果真 (不等于 (寻找文本 (取文本左边 (部_SQL语句, 6), “select”, , 真), -1))
        赋值 (部_SQL语句, 子文本替换 (部_SQL语句, “select”, “select Count(”, , 1, 假))
        赋值 (部_SQL语句, 子文本替换 (部_SQL语句, “from”, “) from”, , 1, 假))
        
        赋值 (部_字节集, EC_ANSI转UTF8 (部_SQL语句))
        集_动态链接库.取函数 (“sqlite3_prepare_v2”, 集_函数地址)
        赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_数据库句柄, API_取变量指针_字节集型 (部_字节集, 部_字节集), 取字节集长度 (部_字节集), API_取变量指针_整数型 (集_记录集句柄, 集_记录集句柄), 0))
        
        输出调试文本 (取字段数 ())
        输出调试文本 (读整数 (1))
        
    .如果真结束
    
.如果真结束

返回 (0)

.子程序 到首记录, 逻辑型, 公开, reset 将记录集重置到第一条记录之前
.如果真 (等于 (集_记录集句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_reset”, 集_函数地址)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_记录集句柄), 0))

.子程序 到下一行, 逻辑型, 公开, step 成功返回真，失败返回假
.如果真 (等于 (集_记录集句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_step”, 集_函数地址)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_记录集句柄), #SQLITE_行))

.子程序 取记录列数, 整数型, 公开, DataCount 如果以移动到记录尾，将返回0。
.如果真 (等于 (集_记录集句柄, 0))
    返回 (0)
.如果真结束

集_动态链接库.取函数 (“sqlite3_data_count”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_记录集句柄))

.子程序 取字段数, 整数型, 公开, GetColumnCount
.如果真 (等于 (集_记录集句柄, 0))
    返回 (0)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_count”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_记录集句柄))

.子程序 取字段长度, 整数型, 公开, GetColumnBytes
.参数 参数_字段索引, 整数型, , 索引从0开始

.如果真 (等于 (集_记录集句柄, 0))
    返回 (0)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_bytes”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 取字段名, 文本型, 公开, GetColumnName
.参数 参数_字段索引, 整数型, , 索引从0开始

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_文本, 字节集, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (“”)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_name”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))
.如果真 (不等于 (部_返回值, 0))
    赋值 (部_文本, 指针到字节集 (部_返回值, API_取内存指针文本长度 (部_返回值)))
.如果真结束
返回 (EC_UTF8转ANSI (部_文本))

.子程序 取字段表名, 文本型, 公开, GetColumnTableName
.参数 参数_字段索引, 整数型, , 索引从0开始

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_文本, 字节集, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (“”)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_table_name”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))
.如果真 (等于 (部_返回值, 0))
    返回 (“”)
.如果真结束
赋值 (部_文本, 指针到字节集 (部_返回值, API_取内存指针文本长度 (部_返回值)))
返回 (EC_UTF8转ANSI (部_文本))


.子程序 取字段数据库名, 文本型, 公开, GetColumnDatabaseName
.参数 参数_字段索引, 整数型, , 索引从0开始

.局部变量 部_返回值, 整数型, , , 
.局部变量 部_文本, 字节集, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (“”)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_database_name”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.如果真 (不等于 (部_返回值, 0))
    赋值 (部_文本, 指针到字节集 (部_返回值, API_取内存指针文本长度 (部_返回值)))
.如果真结束
返回 (EC_UTF8转ANSI (部_文本))

.子程序 取字段索引, 整数型, 公开, GetColumnIndex 成功返回字段索引，失败返回-1
.参数 参数_字段名, 文本型, , 

.局部变量 部_循环计次, 整数型, , , 

.计次循环首 (取字段数 (), 部_循环计次)
    .如果真 (等于 (取字段名 (相减 (部_循环计次, 1)), 参数_字段名))
        返回 (相减 (部_循环计次, 1))
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 取字段定义类型, 文本型, 公开, GetColumnDecltype 返回定义的字段类型
.参数 参数_字段索引, 整数型, , 索引从0开始

.局部变量 部_返回值, 整数型, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (“”)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_decltype”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))
返回 (EC_UTF8转ANSI (指针到字节集 (部_返回值, API_取内存指针文本长度 (部_返回值))))

.子程序 取字段实际类型, 整数型, 公开, GetColumnType 返回“S3字段类型_”开头常量。
.参数 参数_字段索引, 整数型, , 索引从0开始

.如果真 (等于 (集_记录集句柄, 0))
    返回 (0)
.如果真结束

集_动态链接库.取函数 (“sqlite3_column_type”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 读文本, 文本型, 公开, ReadColumnText
.参数 参数_字段索引, 整数型, , 索引从0开始

.局部变量 部_执行结果, 整数型, , , 
.局部变量 部_文本, 字节集, , , 

集_动态链接库.取函数 (“sqlite3_column_text”, 集_函数地址)
赋值 (部_执行结果, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.如果真 (等于 (部_执行结果, 0))
    返回 (“”)
.如果真结束

赋值 (部_文本, 指针到字节集 (部_执行结果, 取字段长度 (参数_字段索引)))
返回 (EC_UTF8转ANSI (部_文本))

.子程序 读整数, 整数型, 公开, ReadColumnInt
.参数 参数_字段索引, 整数型, , 索引从0开始

集_动态链接库.取函数 (“sqlite3_column_int”, 集_函数地址)
返回 (EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 读小数, 小数型, 公开, ReadColumnSmallint
.参数 参数_字段索引, 整数型, , 索引从0开始

集_动态链接库.取函数 (“sqlite3_column_double”, 集_函数地址)
返回 (EC_执行子程序_小整数 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 读双精度小数, 双精度小数型, 公开, ReadColumnDouble
.参数 参数_字段索引, 整数型, , 索引从0开始

集_动态链接库.取函数 (“sqlite3_column_double”, 集_函数地址)
返回 (EC_执行子程序_双精度 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 读长整数, 长整数型, 公开, ReadColumnInt64
.参数 参数_字段索引, 整数型, , 索引从0开始

集_动态链接库.取函数 (“sqlite3_column_int64”, 集_函数地址)
返回 (EC_执行子程序_长整数 (集_函数地址, 集_记录集句柄, 参数_字段索引))

.子程序 读字节集, 字节集, 公开, ReadColumnBlob
.参数 参数_字段索引, 整数型, , 

.局部变量 部_执行结果, 整数型, , , 
.局部变量 部_字节集, 字节集, , , 

集_动态链接库.取函数 (“sqlite3_column_blob”, 集_函数地址)
赋值 (部_执行结果, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_字段索引))
.如果真 (等于 (部_执行结果, 0))
    返回 ({  })
.如果真结束
返回 (指针到字节集 (部_执行结果, 取字段长度 (参数_字段索引)))

.子程序 内部_单步执行, 整数型, , Step 执行由“对象.置SQL语句”返回的记录集。并把记录集指针移动到下一行。返回“SQLITE_”开头常量。如果返回“SQLITE_行”表示记录集有下一行，“SQLITE_完成”表示已成功执行完成。返回其他都表示一个错误。
.局部变量 部_返回值, 整数型, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (#SQLITE_错误)
.如果真结束

集_动态链接库.取函数 (“sqlite3_step”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄))
返回 (部_返回值)

.子程序 内部_绑定参数, 逻辑型, , Bind_Blob 应该先调用“对象.置SQL语句”，然后调用本方法来绑定SQL语句中的“?”值
.参数 参数_参数索引, 整数型, , 索引从1开始，表示SQL语句中的第几个“?”
.参数 参数_参数数据, 字节集, , 

.局部变量 部_返回值, 整数型, , , 

.如果真 (等于 (集_记录集句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_bind_blob”, 集_函数地址)
赋值 (部_返回值, EC_执行子程序 (集_函数地址, 集_记录集句柄, 参数_参数索引, API_取变量指针_字节集型 (参数_参数数据, 参数_参数数据), 取字节集长度 (参数_参数数据), 0))
.如果真 (不等于 (部_返回值, 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 内部_清除绑定, 逻辑型, , Clear_Bindings
.如果真 (等于 (集_记录集句柄, 0))
    返回 (假)
.如果真结束

集_动态链接库.取函数 (“sqlite3_clear_bindings”, 集_函数地址)
返回 (等于 (EC_执行子程序 (集_函数地址, 集_记录集句柄), 0))

.子程序 内部_取SQL语句, 文本型, , GetSql
.局部变量 部_返回值, 整数型, , , 
.局部变量 部_记录集, 整数型, , , 
.局部变量 部_SQL语句, 字节集, , , 

.如果真 (大于 (集_记录集句柄, 0))
    赋值 (部_记录集, 集_记录集句柄)
    集_动态链接库.取函数 (“sqlite3_sql”, 集_函数地址)
    赋值 (部_返回值, EC_执行子程序 (集_函数地址, 部_记录集))
    .如果真 (不等于 (部_返回值, 0))
        赋值 (部_SQL语句, 指针到字节集 (部_返回值, API_取内存指针文本长度 (部_返回值)))
        返回 (EC_UTF8转ANSI (部_SQL语句))
    .如果真结束
    
.如果真结束

返回 (“”)


 ' 不属于任何一个程序集、类模块的函数：
