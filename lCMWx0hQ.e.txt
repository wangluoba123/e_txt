 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 251
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “结束进程(XP版)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 进程信息, , 
    .成员 size, 整数型, , , 
    .成员 usage, 整数型, , , 
    .成员 id, 整数型, , , 
    .成员 hid, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 threads, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 clbase, 整数型, , , 
    .成员 flag, 整数型, , , 
    .成员 exefile, 字节型, , "256", 


.DLL命令 API_投递消息, 整数型, "user32", "PostMessageA", , 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 hwnd, 整数型, , 接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考PostThreadMessage）
    .参数 wMsg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 API_获得窗口关联进程ID, 整数型, "user32", "GetWindowThreadProcessId", , ;    获取与指定窗口关联在一起的一个进程和线程标识符  拥有窗口的线程的标识符
    .参数 hwnd, 整数型, , 指定窗口句柄;
    .参数 lpdwProcessId, 整数型, 传址, 指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 API_取进程快照, 整数型, "", "CreateToolhelp32Snapshot", , CreateToolhelp32Snapshot
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 API_枚举父窗口, 整数型, "user32.dll", "EnumWindows", , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）  非零表示成功，零表示失败
    .参数 函数指针, 子程序指针, , 指向为每个子窗口都调用的一个函数的指针。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的;

.DLL命令 API_快照中获取进程列表, 整数型, "", "Process32First", , Process32First
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, 进程信息, , 

.DLL命令 API_遍历快照中进程列表, 整数型, "", "Process32Next", , Process32Next
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, 进程信息, , 

.DLL命令 API_关闭内核对象, 整数型, "kernel32", "CloseHandle", , 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.窗口程序集 窗口程序集1, , , 

.程序集变量 进程ID, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 


.子程序 _按钮1_被单击, 空白型, , 
API_枚举父窗口 (&枚举窗口句柄, 0)

.子程序 枚举窗口句柄, 逻辑型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 待结束进程名, 文本型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程信息, 进程信息, , , 


 ' 首先这个方法很简单，可以轻易地结束一个在Windwos系统任务管理器都无法结束的进程，当然了，一物冶一物！！这个世界源来已是这样，无论什么都是这样！
 ' 当你知道此方法是可行，安全性是百分百，没对系统造成任何错误！当然，这是Windows系统自有的，只是投递消息让它执行结束而已！
 ' 当前要测试结束的一个进程是“防终止进程”，调用驱动来防终止（C:\WINDOWS\FOxOD.sys），方法很好！不耗内存和资源，我也想学习下！希望作者能供源代码学习，万分感谢！！

 ' 原理：枚举所有窗口句柄，并一个个地用窗口句柄找到进程ID和编辑框输入的进程名与系统的ID和进程名对比，如果找到，就将一条消息投递到指定窗口的消息队列，这个消息符就是“AE_RESACCESS2 =18”，此消息值参考Windows消息大全中，易语言论坛中可找到。

.如果真 (不等于 (窗口句柄, 0))
    赋值 (待结束进程名, 到文本 (.))
    API_获得窗口关联进程ID (窗口句柄, 进程ID)
    
    赋值 (进程快照, API_取进程快照 (15, 0))
    .如果真 (不等于 (进程快照, 0))
        赋值 (进程信息.size, 296)
        赋值 (进程句柄, API_快照中获取进程列表 (进程快照, 进程信息))
        .判断循环首 (不等于 (进程句柄, 0))
            .如果真 (不等于 (进程信息.id, 0))
                 ' 输出调试文本 (到文本 (到字节集 (进程信息.exefile)))  ' 进程名
                .如果真 (并且 (等于 (进程ID, 进程信息.id), 等于 (到小写 (待结束进程名), 到小写 (到文本 (到字节集 (进程信息.exefile))))))
                    .如果真 (等于 (信息框 (相加 (“是否立即终止进程：”, 到文本 (到小写 (到文本 (到字节集 (进程信息.exefile))))), 相加 (#询问图标, #是否钮), ), #是钮))
                        未知函数_167838013 (18, 0, 0)
                         ' 输出调试文本 (窗口句柄)
                        信息框 (“结束进程成功！”, 64, )
                        
                    .如果真结束
                    
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            赋值 (进程句柄, API_遍历快照中进程列表 (进程快照, 进程信息))
        .判断循环尾 ()
        API_关闭内核对象 (进程快照)
        
    .如果真结束
    
    
    返回 (真)
.如果真结束

返回 (假)


 ' 使用 ToolHelp32 库枚举进程

 ' ToolHelp32 库函数在 KERNEL32.dll 中，它们都是标准的 API 函数。但是 Windows NT 4.0 不提供这些函。
 ' ToolHelp32 库中有各种各样的函数可以用来枚举系统中的进程、线程以及获取内存和模块信息。其中枚举进程 只需用如下三个的函数：CreateToolhelp32Snapshot()、Process32First()和 Process32Next()。
 ' 使用 ToolHelp32 函数的第一步是用 CreateToolhelp32Snapshot() 函数创建系统信息“快照”。这个函数可以让你选择存储在快照中的信息类型。如果你只是对进程信息感兴趣，那么只要包含 TH32CS_SNAPPROCESS 标志即可。 CreateToolhelp32Snapshot() 函数返回一个 HANDLE，完成调用之后，必须将此 HANDLE 传给 CloseHandle()。
 ' 接下来是调用一次 Process32First 函数，从快照中获取进程列表，然后重复调用 Process32Next，直到函数返回 FALSE 为止。这样将遍历快照中进程列表。这两个函数都带两个参数，它们分别是快照句柄和一个   PROCESSENTRY32 结构。
 ' 调用完 Process32First 或 Process32Next 之后，PROCESSENTRY32 中将包含系统中某个进程的关键信息。其中进程 ID 就存储在此结构的 th32ProcessID。此 ID 可以被传给 OpenProcess() API 以获得该进程的句柄。对应的可执行文件名及其存放路径存放在 szExeFile  结构成员中。在该结构中还可以找到其它一些有用的信息。
 ' 注意：在调用 Process32First() 之前，一定要记住将 PROCESSENTRY32  结构的 dwSize 成员设置成 sizeof(PROCESSENTRY32)。



 ' 不属于任何一个程序集、类模块的函数：
