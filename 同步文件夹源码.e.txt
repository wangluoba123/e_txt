 ' 文件类型：Windows模块源码

 ' 程序名称：Flyfox_filecopy
 ' 程序描述：Flyfox_filecopy
 ' 程序作者：flyfox
 ' 邮政编码：
 ' 联系地址：QQ:251504091
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：cctv_wfxj@163.com
 ' 主页地址：www.flyfoxol.com
 ' 版权声明：
 ' 版本号：2.0
 ' 创建号：0.0

窗口 窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 482
    高度 = 354
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “Flyfox_filecopy”
    帮助文件名 = “”



.常量 读文件, "1073741824", , GENERIC_WRITE
.常量 共亨读, "1", , FILE_SHARE_READ
.常量 共亨写, "2", , FILE_SHARE_WRITE
.常量 打开已有文件, "3", , OPEN_EXISTING


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库




数据类型 文件时间, , 
    .成员 Low, 整数型, , , 
    .成员 Hight, 整数型, , , 

数据类型 系统时间, , 
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , 
    .成员 小时, 短整数型, , , 
    .成员 分钟, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 


.DLL命令 RunProc, 整数型, "", "CallWindowProcA", , 
    .参数 hproc, 子程序指针, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wp, 整数型, , 
    .参数 lp, 整数型, , 

.DLL命令 取文本指针, 整数型, "", "lstrcpyn", , 
    .参数 目的指针, 文本型, 传址, 
    .参数 源指针, 文本型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 取出指定文件时间, 整数型, "kernel32", "GetFileTime", , 非0表示成功
    .参数 文件号, 整数型, , 
    .参数 创建时间, 文件时间, , UTC格式的文件时间，下同
    .参数 访问时间, 文件时间, , 
    .参数 修改时间, 文件时间, , 

.DLL命令 打开或创建文件, 整数型, "kernel32", "CreateFileA", , 返回文件号，非0表示成功
    .参数 文件名, 文本型, , 
    .参数 打开方式, 整数型, , 
    .参数 共亨方式, 整数型, , 
    .参数 安全特性, 整数型, , 0
    .参数 创建还是打开, 整数型, , 
    .参数 文件属性, 整数型, , 0
    .参数 指定句柄, 整数型, , 0

.DLL命令 关闭文件对象, 整数型, "", "CloseHandle", , 非0表示成功
    .参数 文件名柄, 整数型, , 

.DLL命令 本地时间转换为系统时间, 整数型, "kernel32", "FileTimeToSystemTime", , 把本地格式的文件时间转换为系统时间，非0表示成功
    .参数 文件时间, 文件时间, , 本地格式的文件时间
    .参数 系统时间, 系统时间, , 

.DLL命令 文件时间转换为本地时间, 整数型, "kernel32", "FileTimeToLocalFileTime", , 把UTC格式的文件时间转换为本地格式的文件时间，非0表示成功
    .参数 文件时间, 文件时间, , UTC格式的文件时间
    .参数 本地时间, 文件时间, , 本地格式的文件时间

.DLL命令 系统时间转换为本地时间, 整数型, "kernel32", "SystemTimeToFileTime", , 把系统时间转换为本地格式的文件时间，非0表示成功
    .参数 系统时间, 系统时间, , 
    .参数 文件时间, 文件时间, , 本地格式的文件时间

.DLL命令 设置指定文件时间, 整数型, "kernel32", "SetFileTime", , 非0表示成功。
    .参数 文件号, 整数型, , 
    .参数 创建时间, 文件时间, , 本地格式的文件时间，下同
    .参数 访问时间, 文件时间, , 
    .参数 修改时间, 文件时间, , 

.DLL命令 本地时间转换为文件时间, 整数型, "kernel32", "LocalFileTimeToFileTime", , 把本地格式的文件时间转换为UTC格式的文件时间，非0表示成功
    .参数 本地时间, 文件时间, , 本地格式的文件时间
    .参数 文件时间, 文件时间, , UTC格式的文件时间

.DLL命令 是否为目录, 整数型, "shlwapi.dll", "PathIsDirectoryA", , 
    .参数 目录名, 文本型, , 

.DLL命令 API_创建线程, 整数型, "", "CreateThread", , 生成线程成功，CreateThread函数返回新线程的句柄。否则返回NULL。线程执行完毕后自动退出（除非进入的是循环）。
    .参数 lpThreadAttributes, 整数型, , 线程的安全属性，缺省为0
    .参数 dwStackSize, 整数型, , 线程的堆栈大小，为0时与进程相同
    .参数 lpStartAddress, 子程序指针, , 线程函数的起始地址
    .参数 lpParameter, 整数型, , 传递线程的上下文,可以传递一个整数型参数。
    .参数 dwCreationFlags, 整数型, , 0：创建线程后立即启动，相反的是标志位CREATE_SUSPENDED，这样您需要稍后显示地让该线程运行（可设为－1）
    .参数 lpThreadId, 整数型, 传址, 内核给新生成的线程分配的线程ID

.程序集 程序集1, , , 

.程序集变量 复制百分比, 整数型, , , 
.程序集变量 同步百分比, 整数型, , , 
.程序集变量 当前命令, 整数型, , , 
.程序集变量 文件总大小, 整数型, , , 
.程序集变量 当前大小, 整数型, , , 
.程序集变量 回调函数, 子程序指针, , , 
.程序集变量 正在同步, 逻辑型, , , 
.程序集变量 同步类型, 文本型, , , 
.程序集变量 同步子目录, 逻辑型, , , 
.程序集变量 源路径, 文本型, , , 
.程序集变量 目标路径, 文本型, , , 
.程序集变量 目录数, 整数型, , , 
.程序集变量 文件数, 整数型, , , 
.程序集变量 源文件列表, 文本型, , "0", 
.程序集变量 目标文件列表, 文本型, , "0", 
.程序集变量 复制文件线程, 整数型, , , 
.程序集变量 退出, 逻辑型, , , 
.程序集变量 当前数, 整数型, , , 
.程序集变量 M, 整数型, , , 
.程序集变量 N, 整数型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
载入 (窗口, , 真)
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

.子程序 开始进度复制, 逻辑型, 公开, 复制成功返回“真”，否则返回“假”
.参数 被复制的文件名, 文本型, , 
.参数 复制到的文件名, 文本型, , 
.参数 回调子程序, 子程序指针, , 

.局部变量 a, 整数型, , "2", 
.局部变量 b, 字节集, , , 
.局部变量 源文件名, 文本型, , , 
.局部变量 目标文件名, 文本型, , , 
.局部变量 c, 整数型, 静态, "2", 
.局部变量 分割块大小, 整数型, 静态, , 可空默认为1000
.局部变量 复制速度, 整数型, 静态, , 从1~100，由慢到快，可空，默认为100，即全速
.局部变量 原文件时间, 日期时间型, , "3", 
.局部变量 原文件句柄, 整数型, , , 
.局部变量 新文件句柄, 整数型, , , 
.局部变量 总大小, 整数型, , , 

处理事件 ()
赋值 (总大小, 文件总大小)
赋值 (源文件名, 被复制的文件名)
赋值 (目标文件名, 复制到的文件名)
.如果真 (等于 (当前命令, 4))
    RunProc (回调子程序, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
    返回 (假)
.如果真结束
赋值 (原文件句柄, 打开指定文件 (源文件名))
.如果真 (等于 (取出文件时间 (原文件句柄, 原文件时间 [1], 原文件时间 [2], 原文件时间 [3]), 0))
    关闭指定文件 (原文件句柄)
    赋值 (原文件时间 [2], 取文件时间 (源文件名))
    赋值 (原文件时间 [1], 原文件时间 [2])
.如果真结束
关闭指定文件 (原文件句柄)
赋值 (a [1], 打开文件 (源文件名, #读入, 3))
.如果真 (小于或等于 (a [1], 0))
    返回 (假)
.如果真结束
赋值 (c [1], 取文件长度 (a [1]))
赋值 (a [2], 打开文件 (目标文件名, #重写, #无限制))
赋值 (c [2], 0)
赋值 (复制速度, 100)
.判断开始 (小于或等于 (c [1], 102400))
    赋值 (分割块大小, 1024)
.判断 (并且 (大于 (c [1], 102100), 小于或等于 (c [1], 1024000)))
    赋值 (分割块大小, 10240)
.判断 (并且 (大于 (c [1], 1024000), 小于或等于 (c [1], 10240000)))
    赋值 (分割块大小, 102400)
.判断 (并且 (大于或等于 (c [1], 10240000), 小于 (c [1], 102400000)))
    赋值 (分割块大小, 1024000)
.判断 (大于 (c [1], 102400000))
    赋值 (分割块大小, 20480000)
.默认
    
.判断结束

.如果 (并且 (大于 (a [1], 0), 大于 (a [2], 0)))
    赋值 (当前命令, 0)
    .判断循环首 (取反 (是否在文件尾 (a [1], 假)))
        处理事件 ()
        .如果 (小于 (相减 (c [1], c [2]), 分割块大小))
            赋值 (b, 读入字节集 (a [1], 相减 (c [1], c [2])))
            赋值 (c [2], c [1])
            移到文件尾 (a [1])
        .否则
            赋值 (b, 读入字节集 (a [1], 分割块大小))
            赋值 (c [2], 相加 (c [2], 分割块大小))
        .如果结束
        写出字节集 (a [2], b)
        赋值 (复制百分比, 取整 (相乘 (相除 (c [2], c [1]), 100)))
        RunProc (回调子程序, 0, 0, 取文本指针 (目标文件名, 目标文件名, 0), 4) ' 返回当前复制进度百分比,和同步进度百分比
        赋值 (当前大小, 相加 (当前大小, 分割块大小))
        .如果真 (大于 (总大小, 0))
            赋值 (同步百分比, 相乘 (相除 (当前大小, 总大小), 100))
            RunProc (回调子程序, 0, 复制百分比, 同步百分比, 5) ' 返回当前复制进度百分比,和同步进度百分比
        .如果真结束
        .如果真 (小于 (复制速度, 100))
            延时 (相减 (100, 复制速度))
        .如果真结束
        .如果真 (等于 (当前命令, 3))
            赋值 (正在同步, 假)
            赋值 (当前命令, 0)
            关闭文件 (a [1])
            关闭文件 (a [2])
            删除文件 (目标文件名)
            赋值 (复制百分比, 0)
            RunProc (回调子程序, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
            返回 (假)
        .如果真结束
        .如果真 (等于 (当前命令, 4))
            赋值 (正在同步, 假)
            关闭文件 (a [1])
            关闭文件 (a [2])
            赋值 (复制百分比, 0)
            赋值 (同步百分比, 0)
            RunProc (回调子程序, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
            返回 (假)
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (a [1])
    关闭文件 (a [2])
    赋值 (新文件句柄, 打开指定文件 (目标文件名))
    设置文件时间 (新文件句柄, 原文件时间 [1], 原文件时间 [2], 原文件时间 [3])
    关闭指定文件 (新文件句柄)
    .如果真 (大于或等于 (当前大小, 总大小))
        赋值 (正在同步, 假)
        赋值 (文件总大小, 0)
        赋值 (当前大小, 0)
        赋值 (同步百分比, 0)
        赋值 (复制百分比, 0)
        RunProc (回调函数, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
        RunProc (回调函数, 0, 0, 0, 64) ' 同步完成
    .如果真结束
    
    返回 (真)
.否则
    关闭文件 (a [1])
    关闭文件 (a [2])
    返回 (假)
.如果结束


.子程序 停止进度复制, 空白型, 公开, 停止进度复制文件
赋值 (当前命令, 3)

.子程序 停止同步目录, 空白型, 公开, 停止进度复制文件
赋值 (当前命令, 4)

.子程序 开始同步目录, 整数型, 公开, 返回同步文件总数
.参数 源目录, 文本型, , 最后不带"\"
.参数 目标目录, 文本型, , 最后不带"\"
.参数 欲同步文件类型, 文本型, 可空, 如:"*.EXE";默认为"*.*",
.参数 是否同步子目录, 逻辑型, 可空, 默认为(真)同步子目录,假为子目录不同步
.参数 回调子程序, 子程序指针, , 用于取得同步进度和各种数据,回调子程序有4个整形参数,

.局部变量 总文件数, 整数型, , , 
.局部变量 线程ID, 空白型, , , 

.如果 (等于 (正在同步, 假))
    赋值 (M, 0)
    赋值 (N, 0)
    赋值 (当前命令, 0)
    .如果 (是否为空 (欲同步文件类型))
        赋值 (欲同步文件类型, “*.*”)
    .否则
        .如果真 (不等于 (寻找文本 (欲同步文件类型, “*.”, , 假), 1))
            信息框 (“请为<同步目录>命令的第三个参数提供一个如:*.EXE的参数”, 0, “flyfox提醒您!”)
        .如果真结束
        
    .如果结束
    赋值 (回调函数, 回调子程序)
    赋值 (同步类型, 欲同步文件类型)
    .如果真 (是否为空 (是否同步子目录))
        赋值 (是否同步子目录, 真)
    .如果真结束
    赋值 (同步子目录, 是否同步子目录)
    赋值 (源路径, 源目录)
    赋值 (目标路径, 目标目录)
    赋值 (正在同步, 真)
    赋值 (复制文件线程, API_创建线程 (0, 0, &复制线程, 1, 0, 线程ID))
    搜寻 (源路径)
    .如果真 (等于 (文件数, 0))
        赋值 (正在同步, 假)
    .如果真结束
    返回 (文件数)
.否则
    信息框 (“同步在进行中，不能重执行同步命令”, 0, “flyfox提醒您!”)
    返回 (-1)
.如果结束


.子程序 搜寻, 空白型, , 
.参数 查找目录, 文本型, , 

.局部变量 找到文件, 文本型, , , 
.局部变量 找到目录, 文本型, , , 
.局部变量 目录数组, 文本型, , "0", 
.局部变量 目标目录T, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 源文件时间, 日期时间型, , "3", 
.局部变量 源文件长度, 整数型, , , 
.局部变量 目标文件长度, 整数型, , , 
.局部变量 目标文件时间, 日期时间型, , "3", 
.局部变量 NN, 空白型, , , 
.局部变量 源文件句柄, 整数型, , , 
.局部变量 目标文件句柄, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 时间, 整数型, , , 
.局部变量 要同步的文件, 文本型, , , 

赋值 (目标目录T, 取行右边 (查找目录, 源路径))
.如果 (不等于 (目标目录T, “”))
    赋值 (目标目录T, 相加 (目标路径, 目标目录T))
.否则
    赋值 (目标目录T, 目标路径)
.如果结束
创建多级目录 (目标目录T)
赋值 (找到文件, 寻找文件 (相加 (查找目录, “\”, 同步类型), ))
.判断循环首 (不等于 (找到文件, “”))
    处理事件 ()
    .如果真 (等于 (当前命令, 4))
        RunProc (回调函数, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
        赋值 (正在同步, 假)
        返回 ()
    .如果真结束
    赋值 (源文件句柄, 打开指定文件 (相加 (查找目录, “\”, 找到文件)))
    赋值 (源文件长度, 取文件尺寸 (相加 (查找目录, “\”, 找到文件)))
    赋值 (目标文件长度, 取文件尺寸 (相加 (目标目录T, “\”, 找到文件)))
    .如果 (等于 (取出文件时间 (源文件句柄, 源文件时间 [1], 源文件时间 [2], 源文件时间 [3]), 0))
        关闭指定文件 (源文件句柄)
        赋值 (源文件时间 [2], 取文件时间 (相加 (查找目录, “\”, 找到文件)))
        赋值 (目标文件时间 [2], 取文件时间 (相加 (目标目录T, “\”, 找到文件)))
    .否则
        关闭指定文件 (源文件句柄)
        赋值 (目标文件句柄, 打开指定文件 (相加 (目标目录T, “\”, 找到文件)))
        取出文件时间 (目标文件句柄, 目标文件时间 [1], 目标文件时间 [2], 目标文件时间 [3])
        关闭指定文件 (目标文件句柄)
        
    .如果结束
    .如果真 (并且 (不等于 (源文件时间 [2], 目标文件时间 [2]), 不等于 (源文件长度, 目标文件长度)))
        .如果真 (是否已创建 (窗口))
            窗口.加入文本 (., 相加 (“源文件时间:”, 到文本 (源文件时间 [2]), “  目标文件时间:”, 到文本 (目标文件时间 [2]), #换行符))
        .如果真结束
        赋值 (N, 相加 (N, 1))
        赋值 (文件总大小, 相加 (文件总大小, 取文件尺寸 (相加 (查找目录, “\”, 找到文件))))
        RunProc (回调函数, 0, 取文本指针 (要同步的文件, 要同步的文件, 0), N, 2) ' 返回要同步的文件名和当前要同步的文件的数目
        处理事件 ()
        加入成员 (源文件列表, 相加 (查找目录, “\”, 找到文件))
        加入成员 (目标文件列表, 相加 (目标目录T, “\”, 找到文件))
        赋值 (要同步的文件, 相加 (查找目录, “\”, 找到文件))
        赋值 (文件数, N)
    .如果真结束
    赋值 (找到文件, 寻找文件 ())
.判断循环尾 ()
赋值 (找到目录, 寻找文件 (相加 (查找目录, “\”, 同步类型), #子目录))
.判断循环首 (不等于 (找到目录, “”))
    .如果真 (等于 (当前命令, 4))
        赋值 (正在同步, 假)
        RunProc (回调函数, 0, 0, 0, 5) ' 返回当前复制进度百分比,和同步进度百分比
        返回 ()
    .如果真结束
    .如果真 (不等于 (取文本左边 (找到目录, 1), “.”))
        赋值 (M, 相加 (M, 1))
        赋值 (目录数, M)
        RunProc (回调函数, 0, 0, M, 1) ' 返回源目录数
        搜寻 (相加 (查找目录, “\”, 找到目录))
    .如果真结束
    赋值 (找到目录, 寻找文件 (#子目录))
.判断循环尾 ()
RunProc (回调函数, 0, 文件总大小, 取数组成员数 (源文件列表), 3) ' 返回要同步的文件总大小,要同步的文件总数

.子程序 复制线程, 空白型, , 
.参数 参数一, 整数型, , 

.局部变量 总数, 整数型, , , 

赋值 (当前数, 相加 (当前数, 1))
.判断循环首 (正在同步)
    赋值 (总数, 取数组成员数 (目标文件列表))
    .如果真 (大于 (总数, 0))
        处理事件 ()
        .如果真 (小于或等于 (当前数, 总数))
            开始进度复制 (源文件列表 [当前数], 目标文件列表 [当前数], 回调函数)
            赋值 (当前数, 相加 (当前数, 1))
        .如果真结束
        
    .如果真结束
    处理事件 ()
.判断循环尾 ()

.子程序 创建多级目录, 空白型, 公开, 
.参数 目录名称, 文本型, , "a\b\c"或"c:\a\b\c"

.局部变量 当前路径, 文本型, , , 
.局部变量 目录名, 文本型, , "0", 
.局部变量 索引, 整数型, , , 

赋值 (目录名, 分割文本 (目录名称, “\”, ))
.计次循环首 (取数组成员数 (目录名), 索引)
    创建目录 (相加 (当前路径, 目录名 [索引]))
    赋值 (当前路径, 相加 (当前路径, 目录名 [索引], “\”))
.计次循环尾 ()

.子程序 打开指定文件, 整数型, 公开, 返回文件句柄，非0表示成功
.参数 文件名, 文本型, , 

返回 (打开或创建文件 (文件名, #读文件, 相加 (#共亨读, #共亨写), 0, #打开已有文件, 0, 0))

.子程序 关闭指定文件, 整数型, , 非0表示成功
.参数 文件句柄, 整数型, , “打开指定文件”所返回的文件句柄

返回 (关闭文件对象 (文件句柄))

.子程序 取出文件时间, 整数型, 公开, 非0表示成功
.参数 文件句柄, 整数型, , “打开指定文件”所返回的文件句柄
.参数 创建时间, 日期时间型, 参考 可空, 参数为空，则不取出该时间，下同。
.参数 修改时间, 日期时间型, 参考 可空, 
.参数 访问时间, 日期时间型, 参考 可空, 

.局部变量 文件创建, 文件时间, , , 
.局部变量 文件访问, 文件时间, , , 
.局部变量 文件修改, 文件时间, , , 
.局部变量 本地创建, 文件时间, , , 
.局部变量 本地访问, 文件时间, , , 
.局部变量 本地修改, 文件时间, , , 
.局部变量 系统创建, 系统时间, , , 
.局部变量 系统访问, 系统时间, , , 
.局部变量 系统修改, 系统时间, , , 
.局部变量 返回值, 整数型, , , 

赋值 (返回值, 取出指定文件时间 (文件句柄, 文件创建, 文件访问, 文件修改))
.如果 (不等于 (返回值, 0))
    .如果真 (等于 (是否为空 (创建时间), 假))
        .如果真 (等于 (文件时间转换为本地时间 (文件创建, 本地创建), 0))
            返回 (0)
        .如果真结束
        .如果真 (等于 (本地时间转换为系统时间 (本地创建, 系统创建), 0))
            返回 (0)
        .如果真结束
        赋值 (创建时间, 指定时间 (系统创建.年, 系统创建.月, 系统创建.日, 系统创建.小时, 系统创建.分钟, 系统创建.秒))
    .如果真结束
    .如果真 (等于 (是否为空 (访问时间), 假))
        .如果真 (等于 (文件时间转换为本地时间 (文件访问, 本地访问), 0))
            返回 (0)
        .如果真结束
        .如果真 (等于 (本地时间转换为系统时间 (本地访问, 系统访问), 0))
            返回 (0)
        .如果真结束
        赋值 (访问时间, 指定时间 (系统访问.年, 系统访问.月, 系统访问.日, 系统访问.小时, 系统访问.分钟, 系统访问.秒))
    .如果真结束
    .如果真 (等于 (是否为空 (修改时间), 假))
        .如果真 (等于 (文件时间转换为本地时间 (文件修改, 本地修改), 0))
            返回 (0)
        .如果真结束
        .如果真 (等于 (本地时间转换为系统时间 (本地修改, 系统修改), 0))
            返回 (0)
        .如果真结束
        赋值 (修改时间, 指定时间 (系统修改.年, 系统修改.月, 系统修改.日, 系统修改.小时, 系统修改.分钟, 系统修改.秒))
    .如果真结束
    返回 (返回值)
.否则
    返回 (0)
.如果结束


.子程序 设置文件时间, 整数型, 公开, 非0表示成功
.参数 文件句柄, 整数型, , “打开指定文件”所返回的文件句柄
.参数 创建时间, 日期时间型, 可空, 参数为空，则不改变该时间，下同。
.参数 修改时间, 日期时间型, 可空, 
.参数 访问时间, 日期时间型, 可空, 

.局部变量 文件创建, 文件时间, , , 
.局部变量 文件访问, 文件时间, , , 
.局部变量 文件修改, 文件时间, , , 
.局部变量 本地创建, 文件时间, , , 
.局部变量 本地访问, 文件时间, , , 
.局部变量 本地修改, 文件时间, , , 
.局部变量 系统创建, 系统时间, , , 
.局部变量 系统访问, 系统时间, , , 
.局部变量 系统修改, 系统时间, , , 

.如果真 (等于 (是否为空 (创建时间), 假))
    赋值 (系统创建.年, 取时间部分 (创建时间, #年份))
    赋值 (系统创建.月, 取时间部分 (创建时间, #月份))
    赋值 (系统创建.日, 取时间部分 (创建时间, #日))
    赋值 (系统创建.小时, 取时间部分 (创建时间, #小时))
    赋值 (系统创建.分钟, 取时间部分 (创建时间, #分钟))
    赋值 (系统创建.秒, 取时间部分 (创建时间, #秒))
    系统时间转换为本地时间 (系统创建, 本地创建)
    本地时间转换为文件时间 (本地创建, 文件创建)
.如果真结束
.如果真 (等于 (是否为空 (修改时间), 假))
    赋值 (系统修改.年, 取时间部分 (修改时间, #年份))
    赋值 (系统修改.月, 取时间部分 (修改时间, #月份))
    赋值 (系统修改.日, 取时间部分 (修改时间, #日))
    赋值 (系统修改.小时, 取时间部分 (修改时间, #小时))
    赋值 (系统修改.分钟, 取时间部分 (修改时间, #分钟))
    赋值 (系统修改.秒, 取时间部分 (修改时间, #秒))
    系统时间转换为本地时间 (系统修改, 本地修改)
    本地时间转换为文件时间 (本地修改, 文件修改)
.如果真结束
.如果真 (等于 (是否为空 (访问时间), 假))
    赋值 (系统访问.年, 取时间部分 (访问时间, #年份))
    赋值 (系统访问.月, 取时间部分 (访问时间, #月份))
    赋值 (系统访问.日, 取时间部分 (访问时间, #日))
    赋值 (系统访问.小时, 取时间部分 (访问时间, #小时))
    赋值 (系统访问.分钟, 取时间部分 (访问时间, #分钟))
    赋值 (系统访问.秒, 取时间部分 (访问时间, #秒))
    系统时间转换为本地时间 (系统访问, 本地访问)
    本地时间转换为文件时间 (本地访问, 文件访问)
.如果真结束
返回 (设置指定文件时间 (文件句柄, 文件创建, 文件访问, 文件修改))

.程序集 内部程序集, , , 

.子程序 全文本替换, 文本型, , 
.参数 具体文本, 文本型, , 
.参数 要替换的文本, 文本型, , 
.参数 被替换的文本, 文本型, , 

.局部变量 a, 文本型, , , 
.局部变量 b, 整数型, , , 

赋值 (a, 具体文本)
.判断循环首 (大于 (寻找文本 (a, 要替换的文本, b, 真), -1))
    赋值 (b, 寻找文本 (a, 要替换的文本, b, 真))
    赋值 (a, 文本替换 (a, b, 取文本长度 (要替换的文本), 被替换的文本))
    赋值 (b, 相加 (b, 取文本长度 (被替换的文本)))
.判断循环尾 ()
返回 (a)

.子程序 取行右边, 文本型, , 标志文本从行_X的左边开始寻找
.参数 行_X, 文本型, , 被查找的文本
.参数 标志文本, 文本型, , 标志文本
.参数 起始寻找位置, 逻辑型, 可空, 标志文本的起始寻找位置,"真"从左端开始寻找,"假"从右端开始寻找.默认从左端开始寻找

.局部变量 NX1, 整数型, , , 

.如果 (是否为空 (起始寻找位置))
    赋值 (NX1, 寻找文本 (行_X, 标志文本, , 真))
.否则
    .如果 (起始寻找位置)
        赋值 (NX1, 寻找文本 (行_X, 标志文本, , 真))
    .否则
        赋值 (NX1, 倒找文本 (行_X, 标志文本, , 真))
    .如果结束
    
.如果结束

.如果 (大于 (NX1, 0))
    返回 (取文本右边 (行_X, 相加 (相减 (取文本长度 (行_X), NX1, 取文本长度 (标志文本)), 1)))
.否则
    返回 (“”)
.如果结束


.窗口程序集 窗口程序集1, , , 

.子程序 _窗口_创建完毕, 空白型, , 


.子程序 _按钮3_被单击, 空白型, , 
.如果 (开始进度复制 (.内容, .内容, &回调子程序))
    信息框 (“进度复制成功！”, 0, )
.否则
    信息框 (“进度复制失败！”, 0, )
.如果结束


.子程序 _按钮1_被单击, 空白型, , 
赋值 (.内容, 未知支持库函数_2 (“选择进度复制的文件”, 真))

.子程序 _按钮2_被单击, 空白型, , 
赋值 (.内容, 未知支持库函数_2 (“选择复制到的目录”, 假))

.子程序 _按钮4_被单击, 空白型, , 
停止进度复制 ()

.子程序 _窗口_将被销毁, 空白型, , 
停止同步目录 ()

.子程序 _按钮5_被单击, 空白型, , 
.如果 (复制文件 (.内容, .内容))
    信息框 (“复制成功！”, 0, )
.否则
    信息框 (“复制失败！”, 0, )
.如果结束



.子程序 _按钮6_被单击, 空白型, , 
.局部变量 要复制个数, 整数型, , , 

开始同步目录 (.内容, .内容, , , &回调子程序)

.子程序 回调子程序, 整数型, , 
.参数 参数一, 整数型, , '保留参数
.参数 参数二, 整数型, , 具体看下面列程
.参数 参数三, 整数型, , 具体看下面列程
.参数 状态码, 整数型, , 具体看下面列程

.判断开始 (等于 (状态码, 1)) ' 当状态码为1时,参数三为取得源目录总数
    赋值 (.标题, 相加 (“ 源目录总数”, 到文本 (参数三)))
.判断 (等于 (状态码, 2)) ' 当状态码为2时,参数二为当前搜索到要同步的文件的变量指针,可以通过取针文本获得该文件名,参数三为取得当前搜索到要同步的文件数目
    赋值 (.标题, 指针到文本 (参数二))
    赋值 (.标题, 相加 (“当前搜到文件数”, 到文本 (参数三)))
.判断 (等于 (状态码, 3)) ' 当状态码为3时,参数二为取得要同步的文件总大小，参数三为要同步文件的总数
    赋值 (.标题, 相加 (“要同步的文件总”, 到文本 (参数三)))
    赋值 (.标题, 相加 (“要同步的文件大小”, 到文本 (相除 (参数二, 1024)), “KB”))
.判断 (等于 (状态码, 4)) ' 当状态码为4时,参数二为当前正在复制的源文件变量指针,可以通过取针文本获得该文件名
    赋值 (.标题, 指针到文本 (参数三))
.判断 (等于 (状态码, 5)) ' 当状态码为5时,参数二为当前复制进度,参数三为当前同步进度
    赋值 (.位置, 参数二)
    赋值 (.位置, 参数三)
.判断 (等于 (状态码, 64)) ' 当状态码为64时,说明同步完成
    
.默认
    
.判断结束
返回 (0)

.子程序 _按钮7_被单击, 空白型, , 
停止同步目录 ()


 ' 不属于任何一个程序集、类模块的函数：
