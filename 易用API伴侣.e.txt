 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 680
    高度 = 475
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\易用API伴侣.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “易用API伴侣”
    帮助文件名 = “”

窗口 易语言例程窗口
    左边 = 50
    顶边 = 50
    宽度 = 480
    高度 = 356
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言例程”
    帮助文件名 = “”

窗口 新增函数窗口
    左边 = 50
    顶边 = 50
    宽度 = 480
    高度 = 344
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “新增函数、数据类型、常量”
    帮助文件名 = “”

窗口 导入导出窗口
    左边 = 50
    顶边 = 50
    宽度 = 480
    高度 = 350
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “导入导出”
    帮助文件名 = “”

窗口 表格颜色配置窗口
    左边 = 50
    顶边 = 50
    宽度 = 360
    高度 = 211
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “表格颜色配置”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 357
    高度 = 267
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 57472 '  0xE080
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “关于 易用API伴侣”
    帮助文件名 = “”

窗口 查找窗口
    左边 = 50
    顶边 = 50
    宽度 = 345
    高度 = 95
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 0
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “高级查找”
    帮助文件名 = “”



.图片 空程序, " ' 已保存到：D:\易语言学习\Data\易用API伴侣.e\空程序", , 
.图片 模板程序, " ' 已保存到：D:\易语言学习\Data\易用API伴侣.e\模板程序", , 
.常量 函数数据库, "“Function”", , 
.常量 dll命令名, "“dll命令名”", , 
.常量 dll库名, "“dll库名”", , 
.常量 dll别名, "“dll别名”", , 
.常量 dll参数表, "“dll参数表”", , 
.常量 dll返回值, "“dll返回值”", , 
.常量 dll命令名_中文, "“dll命令名_中文”", , 
.常量 dll命令名_说明, "“dll命令名_说明”", , 
.常量 dll参数名_中文, "“dll参数名_中文”", , 
.常量 dll参数_说明, "“dll参数_说明”", , 
.常量 dll返回值_说明, "“dll返回值_说明”", , 
.常量 dll其它说明, "“dll其它说明”", , 
.常量 是否被修改, "“是否被修改”", , 
.常量 是否为新增, "“是否为新增”", , 
.常量 , , , 
.常量 数据类型库, "“Type”", , 
.常量 类型名称, "“类型名称”", , 
.常量 类型成员表, "“类型成员表”", , 
.常量 类型名称_中文, "“类型名称_中文”", , 
.常量 类型_说明, "“类型_说明”", , 
.常量 类型成员名_中文, "“类型成员名_中文”", , 
.常量 类型成员_说明, "“类型成员_说明”", , 
.常量 数组, "“数组”", , 
.常量 , , , 
.常量 常量数据库, "“constant”", , 
.常量 常量名称, "“常量名称”", , 
.常量 常量值_十六进制, "“常量值_十六进制”", , 
.常量 常量值_十进制, "“常量值_十进制”", , 
.常量 常量说明, "“常量说明”", , 
.常量 , , , 
.常量 函数索引文件, "“DATA\Function.enx”", , 
.常量 常量索引文件, "“DATA\constant.enx”", , 
.常量 表格模板文件_函数, "“data\Function.grd”", , 
.常量 表格模板文件_数据类型, "“data\type.grd”", , 
.常量 表格模板文件_常量, "“data\constant.grd”", , 
.常量 列表索引文件_函数, "“DATA\Function.lb”", , 
.常量 列表索引文件_数据类型, "“DATA\TYPE.LB”", , 
.常量 分类索引文件_函数, "“DATA\Fun_class.LB”", , 
.常量 例程数据文件, "“DATA\example.dat”", , 
.常量 帮助文件, "“Help\Eapi.chm”", , 
.常量 , , , 
.常量 项目类型_函数, "1", , 
.常量 项目类型_数据类型, "2", , 
.常量 项目类型_常量, "3", , 
.常量 , , , 
.常量 子夹_导出开始, "0", , 
.常量 子夹_导入开始, "1", , 
.常量 子夹_函数, "2", , 
.常量 子夹_数据类型, "3", , 
.常量 子夹_常量, "4", , 
.常量 子夹_导出结束, "5", , 
.常量 子夹_导入结束, "6", , 
.常量 , , , 
.常量 SM_CYSMCAPTION, "51", , 小标题的高度
.常量 SM_CYCAPTION, "4", , 窗口标题的高度
.常量 SM_CYFRAME, "33", , 尺寸可变边框的大小
.常量 SM_CYDLGFRAME, "8", , 普通窗口边框大小
.常量 CB_SHOWDROPDOWN, "335", , 弹出组合框列表。
.常量 , , , 
.常量 按钮索引_函数, "0", , 工具栏按钮索引常量。
.常量 按钮索引_函数分类, "1", , 
.常量 按钮索引_数据类型, "2", , 
.常量 按钮索引_常量, "3", , 
.常量 按钮索引_添加到列表, "5", , 
.常量 按钮索引_复制到剪辑板, "6", , 
.常量 按钮索引_插入到易语言, "7", , 
.常量 按钮索引_易语言例程, "9", , 
.常量 按钮索引_高级查找, "11", , 
.常量 按钮索引_帮助, "13", , 
.常量 按钮索引_关于, "14", , 
.常量 按钮索引_退出, "15", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 1 1 高级表格支持库
 ' ExtMenu 9909FBB013704cfa8FE7E739DB7172DE 1 4 超级菜单支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' ewizard F4252F5EB88342579B4E216FC410E5D7 1 0 易向导支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 1 2 正则表达式支持库
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库
 ' eCompress 7B68736E818E41c5A28B0AE4D43C128C 1 0 压缩解压支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 1 0 数据操作支持库一
 ' xplib 7F54B9CE8887428dBA9CEEB94CEF4C72 1 1 XP风格界面库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 1 7 扩展界面支持库三




数据类型 API函数信息, , 保存API函数信息。
    .成员 命令名, 文本型, , , 
    .成员 库名, 文本型, , , 
    .成员 别名, 文本型, , , 
    .成员 参数表, 文本型, , , 
    .成员 返回值, 文本型, , , 
    .成员 命令名_中文, 文本型, , , 
    .成员 命令名_说明, 文本型, , , 
    .成员 参数名_中文, 文本型, , , 
    .成员 参数_说明, 文本型, , , 
    .成员 返回值_说明, 文本型, , , 
    .成员 其它说明, 文本型, , , 
    .成员 是否为新增, 逻辑型, , , 
    .成员 是否被修改, 逻辑型, , , 
    .成员 自定义类型集合, 文本型, , , 存放参数中的所有自定义数据类型，用于自动插入相关自定义数据类型，类型之间用“,”分隔。
    .成员 导入导出, 逻辑型, , , 

数据类型 API数据类型信息, , 保存API数据类型信息。
    .成员 类型名称, 文本型, , , 
    .成员 类型成员表, 文本型, , , 
    .成员 类型名称_中文, 文本型, , , 
    .成员 类型_说明, 文本型, , , 
    .成员 类型成员名_中文, 文本型, , , 
    .成员 类型成员_说明, 文本型, , , 
    .成员 数组, 文本型, , , 
    .成员 是否为新增, 逻辑型, , , 
    .成员 是否被修改, 逻辑型, , , 
    .成员 自定义类型集合, 文本型, , , 
    .成员 导入导出, 逻辑型, , , 

数据类型 API常量信息, , 保存API常量信息。
    .成员 常量名称, 文本型, , , 
    .成员 常量值_十六进制, 文本型, , , 
    .成员 常量值_十进制, 文本型, , , 
    .成员 常量说明, 文本型, , , 
    .成员 是否为新增, 逻辑型, , , 
    .成员 是否被修改, 逻辑型, , , 
    .成员 导入导出, 逻辑型, , , 

数据类型 列表项目信息, , 保存待插入列表项目的信息。
    .成员 数组位置, 整数型, , , 
    .成员 项目类型, 整数型, , , 1、项目类型_函数；2、项目类型_数据类型；3、项目类型_常量

数据类型 表格颜色, , 
    .成员 表格文本色, 整数型, , , 
    .成员 表格背景色, 整数型, , , 
    .成员 表格标题文本色, 整数型, , , 
    .成员 表格标题背景色, 整数型, , , 
    .成员 表格线颜色, 整数型, , , 

数据类型 文件对话框, , 
    .成员 lStructSize, 整数型, , , 
    .成员 hwndOwner, 整数型, , , 
    .成员 hInstance, 整数型, , , 
    .成员 lpstrFilter, 字节集, , , 
    .成员 lpstrCustomFilter, 字节集, , , 
    .成员 nMaxCustFilter, 整数型, , , 
    .成员 nFilterIndex, 整数型, , , 
    .成员 lpstrFile, 字节集, , , 
    .成员 nMaxFile, 整数型, , , 
    .成员 lpstrFileTitle, 文本型, , , 
    .成员 nMaxFileTitle, 整数型, , , 
    .成员 lpstrInitialDir, 文本型, , , 
    .成员 lpstrTitle, 文本型, , , 
    .成员 flags, 整数型, , , 
    .成员 nFileOffset, 短整数型, , , 
    .成员 nFileEtesion, 短整数型, , , 
    .成员 lpstrDefExt, 文本型, , , 
    .成员 lCustData, 整数型, , , 
    .成员 lpfnHook, 整数型, , , 
    .成员 lpTemplateName, 文本型, , , 

数据类型 文件夹数据, , 
    .成员 窗口句柄, 整数型, , , 
    .成员 开始路径, 整数型, , , 
    .成员 pszDisplayName, 文本型, , , 
    .成员 标题, 文本型, , , 
    .成员 显示标志, 整数型, , , 
    .成员 lpfn, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 例程信息, , 保存易语言例程的相差信息。
    .成员 文件名, 文本型, , , 
    .成员 文件全路径名, 文本型, , , 
    .成员 函数集合, 文本型, , , 

数据类型 选项, , 保存程序可选项。
    .成员 使用中文名, 逻辑型, , , 是否使用中文名称，如DLL命令名、参数名等。
    .成员 插入备注, 逻辑型, , , 是否也插入备注信息。
    .成员 前缀, 文本型, , , API函数前缀。
    .成员 后缀, 文本型, , , API函数后缀。

.全局变量 全_例程信息数据, 文本型, , , 保存易语言例程的所有信息。
.全局变量 全局选项, 选项, , , 保存可选项。
.全局变量 全_向导运行方式, 逻辑型, , , 程序是否通过易语言的[执行易向导]菜单命令运行的。
.全局变量 全_配置文件名, 文本型, , , 

.DLL命令 打开对话框, 整数型, "comdlg32.dll", "GetOpenFileNameA", , 
    .参数 参数1, 文件对话框, , 

.DLL命令 保存对话框, 整数型, "comdlg32.dll", "GetSaveFileNameA", , 
    .参数 参数1, 文件对话框, , 

.DLL命令 文件夹对话框, 整数型, "shell32.dll", "SHBrowseForFolderA", , 
    .参数 参数一, 文件夹数据, , 

.DLL命令 获取文件名, 整数型, "shell32.dll", "SHGetPathFromIDListA", , 
    .参数 指针, 整数型, , 
    .参数 文件夹名, 文本型, , 

.DLL命令 创建事件同步对象, 整数型, "", "CreateEventA", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 逻辑型, , 
    .参数 参数3, 逻辑型, , 
    .参数 参数4, 文本型, , 

.DLL命令 打开事件同步对象, 整数型, "", "OpenEventA", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 逻辑型, , 
    .参数 参数3, 文本型, , 

.DLL命令 API_设置透明度, 逻辑型, "user32.dll", "SetLayeredWindowAttributes", , 
    .参数 句柄, 整数型, , 窗口的名柄
    .参数 透明颜色, 整数型, , 希望变透明的颜色
    .参数 透明程度, 整数型, , 如果这个值设为0，窗口会变得完全透明。如果设为255，窗口会变得完全不透明。
    .参数 标志, 整数型, , 如果这个标志设为1，只有col指定的颜色会变得透明。如果这个标志设为2，则整个窗口会按bAlpha指定的程度变得透明。

.DLL命令 获得长, 整数型, "", "GetWindowLongA", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 设置长, 逻辑型, "", "SetWindowLongA", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 

.DLL命令 取环境信息, 整数型, "user32", "GetSystemMetrics", , 返回与windows环境有关的信息　取决于具体的常数索引
    .参数 索引, 整数型, , 

.窗口程序集 主窗口程序集, , , 

.程序集变量 程_当前函数信息, API函数信息, , , 保存当前函数的所有信息。
.程序集变量 程_当前数据类型信息, API数据类型信息, , , 保存当前数据类型的所有信息。
.程序集变量 程_当前常量信息, API常量信息, , , 保存当前常量的所有信息。
.程序集变量 程_当前函数例程信息, 例程信息, , "0", 保存当前函数的所有例程信息。
.程序集变量 匿名程序集变量_879, 空白型, , , 
.程序集变量 程_函数信息数组, API函数信息, , "0", 保存待批量插入的所有函数信息。
.程序集变量 程_数据类型信息数组, API数据类型信息, , "0", 保存待批量插入的所有数据类型信息。
.程序集变量 程_常量信息数组, API常量信息, , "0", 保存待批量插入的所有常量信息。
.程序集变量 程_待插入列表框项目信息, 列表项目信息, , "0", 保存插入列表框中所有项目的相关信息。
.程序集变量 匿名程序集变量_877, 空白型, , , 
.程序集变量 程_当前表格行号, 整数型, , , 
.程序集变量 程_当前表格列号, 整数型, , , 
.程序集变量 程_编辑前内容, 文本型, , , 保存函数、数据类型、常量的说明信息被编辑前的内容。
.程序集变量 程_常量区当前页号, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 时间, 空白型, , , 
.局部变量 命令行, 文本型, , "0", 

赋值 (时间, 取启动时间 ())
.如果真 (程序是否已运行 (.))
    信息框 (“程序已在运行中!”, #信息图标, .)
    结束 ()
.如果真结束

置标题高度差 (_启动窗口, 34, 真)
.如果 (等于 (未知支持库函数_13 (#空程序, 假), “”)) ' 判断程序是否以向导方式运行。
    赋值 (全_向导运行方式, 真)
    未知支持库函数_4 (“删除数据类型”)
.否则
    连续赋值 (真, .禁止, .禁止, .禁止, .禁止, .禁止)
    #按钮索引_插入到易语言.加入状态 (#禁止)
.如果结束

.如果 (等于 (文件是否存在 (#函数索引文件), 假)) ' 索引文件不存在，则新建索引文件。
    打开 (相加 (“DATA\”, #函数数据库), , , , , , )
    新建索引 (#函数索引文件, , #不区分大小写, , #dll命令名)
.否则
    打开 (相加 (“DATA\”, #函数数据库), , , , , , “DATA\Function.enx”)
.如果结束
1.置文本 (相加 (“函数：”, 到文本 (取记录数 ())))

打开 (相加 (“DATA\”, #数据类型库), , , , , , ) ' 数据类型的数据量比较少，所以不建索引文件了。
2.置文本 (相加 (“数据类型：”, 到文本 (取记录数 ())))

.如果 (等于 (文件是否存在 (#常量索引文件), 假))
    打开 (相加 (“DATA\”, #常量数据库), , , , , , )
    新建索引 (#常量索引文件, , #不区分大小写, , #常量名称)
.否则
    打开 (相加 (“DATA\”, #常量数据库), , , , , , #常量索引文件)
.如果结束
3.置文本 (相加 (“常量：”, 到文本 (取记录数 ())))

 ' 读取函数、数据类型、常量的表格显示模板。
#表格模板文件_函数.未知支持库函数_56 ()
#表格模板文件_数据类型.未知支持库函数_56 ()
#表格模板文件_常量.未知支持库函数_56 ()
1.未知支持库函数_0 (0)
1.未知支持库函数_0 (0)
1.未知支持库函数_0 (0)

 ' 快速载入函数(分类)及数据类型列表项目。
赋值 (.列表项目, 读入文件 (#列表索引文件_函数))
赋值 (.列表项目, 读入文件 (#列表索引文件_数据类型))
赋值 (.图标, 读入文件 (#分类索引文件_函数))
读取新增数据到列表 () ' 读取新增的函数、数据类型到列表。

赋值 (全_例程信息数据, 到文本 (读入文件 (#例程数据文件))) ' 此全局变量保存所有的易例程信息。
4.置文本 (相加 (“易语言例程：”, 到文本 (取易语言例程数 ())))

菜单事件转移 () ' 将相关菜单进行事件转移，以简化代码。
初始化配置 ()

取命令行 (命令行)
.如果 (等于 (取数组成员数 (命令行), 1))
    赋值 (命令行 [1], 到大写 (命令行 [1]))
    .判断开始 (等于 (命令行 [1], “F”)) ' 程序启动时切换到函数浏览区。
        _函数分类_被选择 ()
    .判断 (等于 (命令行 [1], “T”)) ' 程序启动时切换到数据类型浏览区。
        _数据类型_被选择 ()
    .判断 (等于 (命令行 [1], “C”)) ' 程序启动时切换到常量浏览区。
        _常量_被选择 ()
    .默认
        _函数_被选择 ()
    .判断结束
    
.否则
    _函数_被选择 ()
.如果结束

未知支持库函数_0 (#)

输出调试文本 (相加 (“程序启动所需时间：”, 到文本 (相减 (取启动时间 (), 时间))))

.子程序 读取新增数据到列表, 空白型, , 如果有新增加的函数则要手工添加到索引列表。
.局部变量 计次变量, 整数型, , , 

置当前库 (#函数数据库)
跳到 (6570)
.计次循环首 (相减 (取记录数 (), 6570), )
    跳过 ()
    读 (#dll命令名).加入项目 ()
.计次循环尾 ()

置当前库 (#数据类型库)
跳到 (419)
.计次循环首 (相减 (取记录数 (), 419), )
    跳过 ()
    读 (#类型名称).加入项目 ()
.计次循环尾 ()


.子程序 取易语言例程数, 整数型, , 
.局部变量 正则表达式, 未知类型0x60001, , , 
.局部变量 搜索结果数组, 未知类型0x60002, , "0", 

正则表达式.未知支持库函数_3 (“<.+?>”, )
赋值 (搜索结果数组, 正则表达式.未知支持库函数_16 (全_例程信息数据))
返回 (取数组成员数 (搜索结果数组))

.子程序 初始化配置, 空白型, , 对选项及界面进行配置。
.局部变量 程序菜单风格, 整数型, , , 
.局部变量 菜单, 菜单, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 工具菜单组, 菜单, , "6", 

赋值 (全_配置文件名, 相加 (取运行目录 (), “\EApi.ini”))
赋值 (全局选项.前缀, 读配置项 (全_配置文件名, “选项”, “前缀”, “API_”))
赋值 (全局选项.后缀, 读配置项 (全_配置文件名, “选项”, “后缀”, ))
赋值 (全局选项.使用中文名, 选择 (等于 (读配置项 (全_配置文件名, “选项”, “使用中文名”, “真”), “真”), 真, 假))
赋值 (全局选项.插入备注, 选择 (等于 (读配置项 (全_配置文件名, “选项”, “插入备注”, “真”), “真”), 真, 假))
赋值 (.选中, 全局选项.使用中文名)
赋值 (.选中, 全局选项.插入备注)

 ' 配置程序菜单风格。
赋值 (程序菜单风格, 到数值 (读配置项 (全_配置文件名, “选项”, “菜单风格”, “1”)))
赋值 (., 程序菜单风格)
赋值 (菜单, 多项选择 (程序菜单风格, , , , , , ))
连续赋值 (假, .选中, .选中, .选中, .选中, .选中, .选中)
赋值 (菜单.选中, 真)

 ' 配置外部工具。
配置工具菜单 ()

 ' 配置成上次关闭后的界面大小及位置信息。
 ' _启动窗口.移动 (到数值 (读配置项 (全_配置文件名, “位置大小”, “左边”, “50”)), 到数值 (读配置项 (全_配置文件名, “位置大小”, “顶边”, “50”)), 到数值 (读配置项 (全_配置文件名, “位置大小”, “宽度”, “640”)), 到数值 (读配置项 (全_配置文件名, “位置大小”, “高度”, “480”)))
赋值 (., 到数值 (读配置项 (全_配置文件名, “位置大小”, “位置”, “0”)))

.子程序 配置工具菜单, 空白型, , 
赋值 (.标题, 相加 (“1.”, 读配置项 (全_配置文件名, “工具”, “名称1”, “未配置”)))
赋值 (.标题, 相加 (“1.”, 读配置项 (全_配置文件名, “工具”, “路径1”, “请选择进行配置...”)))
赋值 (.标题, 相加 (“2.”, 读配置项 (全_配置文件名, “工具”, “名称2”, “未配置”)))
赋值 (.标题, 相加 (“2.”, 读配置项 (全_配置文件名, “工具”, “路径2”, “请选择进行配置...”)))
赋值 (.标题, 相加 (“3.”, 读配置项 (全_配置文件名, “工具”, “名称3”, “未配置”)))
赋值 (.标题, 相加 (“3.”, 读配置项 (全_配置文件名, “工具”, “路径3”, “请选择进行配置...”)))
赋值 (.标题, 相加 (“4.”, 读配置项 (全_配置文件名, “工具”, “名称4”, “未配置”)))
赋值 (.标题, 相加 (“4.”, 读配置项 (全_配置文件名, “工具”, “路径4”, “请选择进行配置...”)))
赋值 (.标题, 相加 (“5.”, 读配置项 (全_配置文件名, “工具”, “名称5”, “未配置”)))
赋值 (.标题, 相加 (“5.”, 读配置项 (全_配置文件名, “工具”, “路径5”, “请选择进行配置...”)))
赋值 (.标题, 相加 (“6.”, 读配置项 (全_配置文件名, “工具”, “名称6”, “未配置”)))
赋值 (.标题, 相加 (“6.”, 读配置项 (全_配置文件名, “工具”, “路径6”, “请选择进行配置...”)))


.子程序 __启动窗口_将被销毁, 空白型, , 
全部关闭 () ' 关闭所有数据库。
.如果真 (等于 (.标记, #是否被修改))
    写到文件 (#分类索引文件_函数, .图标)
.如果真结束


.子程序 _函数_被选择, 空白型, , 
#按钮索引_函数.加入状态 (#选中)
#按钮索引_函数分类.去除状态 (#选中)
#按钮索引_数据类型.去除状态 (#选中)
#按钮索引_常量.去除状态 (#选中)
#按钮索引_添加到列表.置提示文本 (“添加当前选中API函数到列表。 [ F5 ]”)
#按钮索引_复制到剪辑板.置提示文本 (“复制当前选中API函数到剪辑板。 [ F6 ]”)
#按钮索引_插入到易语言.置提示文本 (“插入当前选中API函数到易语言。 [ F7 ]”)
置当前库 (#函数数据库)
赋值 (.现行子夹, 0)
.如果真 (等于 (.现行选中项, -1))
    赋值 (.现行选中项, 0)
    
.如果真结束
赋值 (.可视, 真)
赋值 (.可视, 假)
_列表框_函数索引_列表项被选择 ()
赋值 (.被选择字符数, -1)
获取焦点 ()

.子程序 _数据类型_被选择, 空白型, , 
#按钮索引_函数.去除状态 (#选中)
#按钮索引_函数分类.去除状态 (#选中)
#按钮索引_数据类型.加入状态 (#选中)
#按钮索引_常量.去除状态 (#选中)
#按钮索引_添加到列表.置提示文本 (“添加当前选中API数据结构到列表。 [ F5 ]”)
#按钮索引_复制到剪辑板.置提示文本 (“复制当前选中API数据结构到剪辑板。 [ F6 ]”)
#按钮索引_插入到易语言.置提示文本 (“插入当前选中API数据结构到易语言。 [ F7 ]”)
置当前库 (#数据类型库)
赋值 (.现行子夹, 1)
.如果真 (等于 (.现行选中项, -1))
    赋值 (.现行选中项, 0)
    
.如果真结束
_列表框_类型索引_列表项被选择 ()
赋值 (.被选择字符数, -1)
获取焦点 ()

.子程序 _查找编辑框_函数_内容被改变, 空白型, , 
.如果真 (可有焦点 ())
    .选择 (.内容)
    _列表框_函数索引_列表项被选择 ()
    获取焦点 ()
.如果真结束


.子程序 _列表框_函数索引_列表项被选择, 空白型, , 
.局部变量 参数数组, 文本型, , "0", 保存当前函数的所有参数信息。
.局部变量 参数, 文本型, , "0", 保存当前函数的一条参数信息。
.局部变量 参数名, 文本型, , , 参数名称。
.局部变量 参数说明数组, 文本型, , "0", 保存当前函数的所有参数说明信息。
.局部变量 中文参数名数组, 文本型, , "0", 保存当前函数相应的中文参数名称。
.局部变量 计次变量, 整数型, , , 

.如果真 (可有焦点 ())
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
到首记录 ()
索引查找 (.取项目文本 (.现行选中项))
从数据库读取当前API信息 (#函数数据库, 程_当前函数信息) ' 从数据库中读取当前函数的所有信息。

 ' 显示当前的函数基本信息。
1.未知支持库函数_9 (0, #., 程_当前函数信息.命令名_说明)
1.未知支持库函数_9 (3, #., 程_当前函数信息.其它说明)
3.未知支持库函数_9 (0, #., 程_当前函数信息.命令名)
3.未知支持库函数_9 (1, #., 程_当前函数信息.命令名_中文)
3.未知支持库函数_9 (2, #., 取数据类型_文本 (程_当前函数信息.返回值))
3.未知支持库函数_9 (3, #., 程_当前函数信息.返回值_说明)
5.未知支持库函数_9 (0, #., 程_当前函数信息.库名)
.如果 (不等于 (程_当前函数信息.别名, “”)) ' 显示在DLL库中对应命令名。
    5.未知支持库函数_9 (2, #., 程_当前函数信息.别名)
.否则
    5.未知支持库函数_9 (2, #., 程_当前函数信息.命令名)
    
.如果结束

 ' 分解当前函数的参数信息。
赋值 (参数数组, 分割文本 (程_当前函数信息.参数表, “,”, ))
赋值 (中文参数名数组, 分割文本 (程_当前函数信息.参数名_中文, , ))
赋值 (参数说明数组, 分割文本 (程_当前函数信息.参数_说明, “~”, ))

 ' 重设表格行数。
赋值 (., 7)
赋值 (., 相加 (7, 取数组成员数 (参数数组)))
7.未知支持库函数_53 (0, ., 0, 真)
7.未知支持库函数_53 (2, ., 4, 真)

 ' 显示当前函数的参数信息。
.如果真 (不等于 (取数组成员数 (参数数组), 0))
    .计次循环首 (取数组成员数 (参数数组), 计次变量)
        赋值 (参数, 分割文本 (删首尾空 (参数数组 [计次变量]), “ As ”, ))
        .如果真 (等于 (取数组成员数 (参数), 2))
            .如果真 (等于 (取文本左边 (参数 [1], 6), “ByRef ”)) ' 是否传址。
                .如果真 (不等于 (取数据类型 (参数 [2]), #.))
                    相加 (6, 计次变量).未知支持库函数_9 (4, #., “真”)
                .如果真结束
                
            .如果真结束
            赋值 (参数名, 子文本替换 (参数 [1], “ByVal ”, “”, , , 真))
            赋值 (参数名, 子文本替换 (参数名, “ByRef ”, “”, , , 真))
            相加 (6, 计次变量).未知支持库函数_9 (0, #., 参数名) ' 参数名称。
            相加 (6, 计次变量).未知支持库函数_9 (2, #., 取数据类型_文本 (参数 [2])) ' 参数数据类型。
            
            .如果真 (等于 (取数组成员数 (中文参数名数组), 取数组成员数 (参数数组)))
                相加 (6, 计次变量).未知支持库函数_9 (1, #., 中文参数名数组 [计次变量]) ' 中文参数名。
                
            .如果真结束
            .如果真 (等于 (取数组成员数 (参数说明数组), 取数组成员数 (参数数组)))
                相加 (6, 计次变量).未知支持库函数_9 (5, #., 参数说明数组 [计次变量]) ' 参数说明。
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
填充函数相关例程 () ' 读取当前函数的例程。
.如果 (等于 (取项目数 (), 0))
    #按钮索引_易语言例程.加入状态 (#禁止)
    #按钮索引_易语言例程.置提示文本 (“当前API函数无相关的易语言例程。 ”)
.否则
    #按钮索引_易语言例程.去除状态 (#禁止)
    #按钮索引_易语言例程.置提示文本 (相加 (“显示与当前API函数相关的易语言例程。”, #换行符, “向导方式运行时，打开时将只打开副本并退出。”))
.如果结束
1.未知支持库函数_0 (0)
_高级表格_函数_光标位置改变 ()
获取焦点 ()


.子程序 填充函数相关例程, 空白型, , 填充当前函数的相关例程到组合框。
.参数 组合框, 组合框, , 

.局部变量 正则表达式, 未知类型0x60001, , , 
.局部变量 搜索结果数组, 未知类型0x60002, , "0", 
.局部变量 计次变量, 整数型, , , 

正则表达式.未知支持库函数_3 (相加 (“,”, 程_当前函数信息.命令名, “,.+?<(.+?)>”), )
赋值 (搜索结果数组, 正则表达式.未知支持库函数_16 (全_例程信息数据))
重定义数组 (程_当前函数例程信息, 假, 取数组成员数 (搜索结果数组))
组合框.清空 ()
.计次循环首 (取数组成员数 (搜索结果数组), 计次变量)
    赋值 (程_当前函数例程信息 [计次变量], 文件全路径名, 搜索结果数组.未知支持库函数_12 ( [计次变量], 全_例程信息数据, 1, ))
     ' 组合框.加入项目 (取文件名 (程_当前函数例程信息 [计次变量], 文件全路径名), 计次变量)
.计次循环尾 ()
赋值 (组合框.现行选中项, 0)

.子程序 _高级表格_函数_光标位置改变, 空白型, , 
赋值 (程_当前表格行号, 未知支持库函数_3 ())
赋值 (程_当前表格列号, 未知支持库函数_4 ())
赋值 (程_编辑前内容, 到文本 (程_当前表格行号.未知支持库函数_10 (程_当前表格列号)))
赋值 (.内容, 程_编辑前内容)
赋值 (.输入方式, 选择 (等于 (程_当前表格行号.未知支持库函数_54 (程_当前表格列号), 真), 1, 0))

.子程序 _列表框_类型索引_列表项被选择, 空白型, , 
.局部变量 成员数组, 文本型, , "0", 保存当前数据类型的所有成员信息。
.局部变量 成员, 文本型, , "0", 保存当前数据类型的单个成员信息。
.局部变量 成员说明数组, 文本型, , "0", 
.局部变量 中文成员名数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 成员数组数, 文本型, , "0", 保存当前数据类型成员的数组维数。

.如果真 (可有焦点 ())
    赋值 (.内容, .取项目文本 (.现行选中项))
.如果真结束
到首记录 ()
查找 (等于 (到大写 (读 (#类型名称)), 到大写 (.取项目文本 (.现行选中项))))
从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息) ' 读取当前的数据类型信息。

.如果真 (不等于 (程_当前数据类型信息.数组, “”)) ' 当前数据类型的成员是否有数组信息。
    赋值 (成员数组数, 分割文本 (程_当前数据类型信息.数组, , ))
.如果真结束

 ' 显示当前数据类型的基本信息。
1.未知支持库函数_9 (0, #., 程_当前数据类型信息.类型名称)
1.未知支持库函数_9 (1, #., 程_当前数据类型信息.类型名称_中文)
1.未知支持库函数_9 (2, #., 程_当前数据类型信息.类型_说明)

 ' 分解当前数据类型的成员信息。
赋值 (成员数组, 分割文本 (程_当前数据类型信息.类型成员表, , ))
赋值 (中文成员名数组, 分割文本 (程_当前数据类型信息.类型成员名_中文, , ))
赋值 (成员说明数组, 分割文本 (程_当前数据类型信息.类型成员_说明, “~”, ))

赋值 (., 3)
赋值 (., 相加 (3, 取数组成员数 (成员数组)))
3.未知支持库函数_53 (0, ., 0, 真)
3.未知支持库函数_53 (2, ., 3, 真)

 ' 显示当前数据类型的成员信息。
.如果真 (不等于 (取数组成员数 (成员数组), 0))
    .计次循环首 (取数组成员数 (成员数组), 计次变量)
        赋值 (成员, 分割文本 (删首尾空 (成员数组 [计次变量]), “ As ”, ))
        相加 (2, 计次变量).未知支持库函数_9 (0, #., 成员 [1]) ' 成员名称。
        相加 (2, 计次变量).未知支持库函数_9 (2, #., 取数据类型_文本 (成员 [2])) ' 成员数据类型。
        .如果真 (等于 (取数组成员数 (中文成员名数组), 取数组成员数 (成员数组)))
            相加 (2, 计次变量).未知支持库函数_9 (1, #., 中文成员名数组 [计次变量]) ' 中文成员名。
            
        .如果真结束
        .如果真 (等于 (取数组成员数 (成员说明数组), 取数组成员数 (成员数组)))
            相加 (2, 计次变量).未知支持库函数_9 (4, #., 成员说明数组 [计次变量]) ' 成员说明信息。
            
        .如果真结束
        .如果真 (等于 (取数组成员数 (成员数组数), 取数组成员数 (成员数组)))
            相加 (2, 计次变量).未知支持库函数_9 (3, #., 成员数组数 [计次变量]) ' 成员的数组信息。
        .如果真结束
        
    .计次循环尾 ()
    
.如果真结束
1.未知支持库函数_0 (0)
_高级表格_数据类型_光标位置改变 ()
获取焦点 ()

.子程序 _常量_被选择, 空白型, , 
#按钮索引_函数.去除状态 (#选中)
#按钮索引_函数分类.去除状态 (#选中)
#按钮索引_数据类型.去除状态 (#选中)
#按钮索引_常量.加入状态 (#选中)
#按钮索引_添加到列表.置提示文本 (“添加当前选中API常量到列表。 [ F5 ]”)
#按钮索引_复制到剪辑板.置提示文本 (“复制当前选中API常量到剪辑板。 [ F6 ]”)
#按钮索引_插入到易语言.置提示文本 (“插入当前选中API常量到易语言。 [ F7 ]”)
置当前库 (#常量数据库)
赋值 (.现行子夹, 2)
赋值 (程_常量区当前页号, 取页号 (取记录号 ()))
填充一页常量信息到表格 ()
赋值 (.被选择字符数, -1)
获取焦点 ()

.子程序 _高级表格_数据类型_光标位置改变, 空白型, , 
赋值 (程_当前表格行号, 未知支持库函数_3 ())
赋值 (程_当前表格列号, 未知支持库函数_4 ())
赋值 (程_编辑前内容, 到文本 (程_当前表格行号.未知支持库函数_10 (程_当前表格列号)))
赋值 (.内容, 程_编辑前内容)
赋值 (.输入方式, 选择 (等于 (程_当前表格行号.未知支持库函数_54 (程_当前表格列号), 真), 1, 0))

.子程序 _树型框_函数分类_项目被选择, 空白型, , 
.参数 选择方式, 整数型, , 

.如果真 (等于 (.取缩进层次 (.最大化按钮), 1))
    返回 ()
.如果真结束
.取项目文本 (.最大化按钮).选择 ()
_列表框_函数索引_列表项被选择 ()

.子程序 _蓝色_被选择, 空白型, , 
.局部变量 事件菜单, 菜单, , , 
.局部变量 程序菜单风格, 整数型, , , 

赋值 (事件菜单, 取事件组件 ())
赋值 (程序菜单风格, 到数值 (事件菜单.标题))
赋值 (., 程序菜单风格)
连续赋值 (假, .选中, .选中, .选中, .选中, .选中, .选中)
赋值 (事件菜单.选中, 真)
写配置项 (全_配置文件名, “选项”, “菜单风格”, 到文本 (程序菜单风格))

.子程序 _树型框_函数分类_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _新建分类_被选择, 空白型, , 
.局部变量 项目索引, 整数型, , , 

 ' 在尾部添加新的分类。
赋值 (项目索引, .加入项目 (“新分类”, 0, 1, ))
项目索引.保证显示 ()
项目索引.进入编辑 ()
赋值 (.标记, #是否被修改) ' 标记已被修改，在程序退出时保存修改。

.子程序 _删除分类_被选择, 空白型, , 
.如果真 (等于 (.取缩进层次 (.最大化按钮), 1))
    .如果真 (等于 (信息框 (相加 (“真要删除分类[”, .取项目文本 (.最大化按钮), “]吗？”, #换行符, “如果选是，将会删除此分类下的所有函数!”), 相加 (#是否钮, #信息图标), .), #是钮))
        .删除项目 (.最大化按钮)
        赋值 (.标记, #是否被修改)
        
    .如果真结束
    
.如果真结束


.子程序 _添加函数_被选择, 空白型, , 
.局部变量 项目索引, 整数型, , , 

.如果 (等于 (.取缩进层次 (.最大化按钮), 1))
    赋值 (项目索引, .加入项目 (.最大化按钮, “新函数”, 2, 2, ))
.否则
    赋值 (项目索引, .取父项目 (.最大化按钮).加入项目 (“新函数”, 2, 2, ))
    
.如果结束
项目索引.保证显示 ()
项目索引.进入编辑 ()
赋值 (.标记, #是否被修改)

.子程序 _删除函数_被选择, 空白型, , 
.如果真 (等于 (.取缩进层次 (.最大化按钮), 2))
    .删除项目 (.最大化按钮)
    赋值 (.标记, #是否被修改)
    
.如果真结束


.子程序 _列表框_函数索引_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 父项目索引, 整数型, , , 

赋值 (父项目索引, .最大化按钮)
.如果真 (不等于 (父项目索引.取缩进层次 (), 1))
    赋值 (父项目索引, 父项目索引.取父项目 ())
.如果真结束
赋值 (.标题, 相加 (“分类到 [”, 父项目索引.取项目文本 (), “]”))

弹出菜单 ()

.子程序 _高级表格_常量_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _按钮_插入_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 
.局部变量 项目数值, 整数型, , , 
.局部变量 数组位置, 整数型, , , 

 ' 插入待待插入列表中所有函数、数据类型及常量。
鸣叫 ()
.如果真 (等于 (取项目数 (), 0))
    信息框 (“没有要插入的函数、数据类型及常量!”, #信息图标, .)
    返回 ()
.如果真结束
.计次循环首 (取项目数 (), 计次变量)
    赋值 (项目数值, 相减 (计次变量, 1).取项目数值 ())
    赋值 (数组位置, 程_待插入列表框项目信息 [项目数值], 数组位置)
    
    .判断开始 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_函数))
        插入函数 (程_函数信息数组 [数组位置])
        
    .判断 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_数据类型))
        插入数据类型 (程_数据类型信息数组 [数组位置])
        
    .判断 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_常量))
        插入常量 (程_常量信息数组 [数组位置])
    .默认
        
    .判断结束
    
.计次循环尾 ()
执行插入 ()
销毁 ()

.子程序 _高级表格_常量_光标位置改变, 空白型, , 
赋值 (程_当前表格行号, 未知支持库函数_3 ())
赋值 (程_当前表格列号, 未知支持库函数_4 ())
.如果真 (可有焦点 ())
    赋值 (.内容, 到文本 (程_当前表格行号.未知支持库函数_10 (0)))
.如果真结束
赋值 (程_编辑前内容, 到文本 (程_当前表格行号.未知支持库函数_10 (程_当前表格列号)))
赋值 (.内容, 程_编辑前内容)
赋值 (.输入方式, 选择 (等于 (程_当前表格行号.未知支持库函数_54 (程_当前表格列号), 真), 1, 0))

到首记录 ()
索引查找 (程_当前表格行号.未知支持库函数_10 (0))
从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)

.子程序 _高级表格_常量_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_添加到列表_被选择 ()

.子程序 _查找编辑框_常量_内容被改变, 空白型, , 
.局部变量 定位, 整数型, , "26", 
.局部变量 首字母代码, 整数型, , , 

.如果真 (并且 (可有焦点 (), 不等于 (.内容, “”)))
    到首记录 ()
    .如果真 (等于 (索引查找 (.内容), 假))
        赋值 (首字母代码, 取代码 (到大写 (.内容), ))
        .如果真 (并且 (大于或等于 (首字母代码, #A键), 小于或等于 (首字母代码, #Z键)))
            赋值 (定位, { 1, 1089, 1583, 4091, 6887, 7671, 8745, 9698, 10371, 12177, 12447, 12641, 13994, 18327, 19513, 20199, 22654, 22688, 24292, 28396, 29809, 30236, 30919, 32227, 32317, 32318 }) ' 记录字母(a-z)在数据库的起始记录号，在数据量大的时候，可有效提高查找速度。(注：数据库要经过排序才有效)
            跳到 (定位 [相加 (相减 (首字母代码, #A键), 1)])
            
        .如果真结束
        .如果真 (等于 (查找 (近似等于 (到大写 (读 (#常量名称)), 到大写 (.内容))), 假))
            到首记录 ()
        .如果真结束
        
    .如果真结束
    赋值 (程_常量区当前页号, 取页号 (取记录号 ()))
    填充一页常量信息到表格 ()
    获取焦点 ()
.如果真结束


.子程序 _按钮_首页_被单击, 空白型, , 
赋值 (程_常量区当前页号, 1)
填充一页常量信息到表格 ()

.子程序 _按钮_尾页_被单击, 空白型, , 
赋值 (程_常量区当前页号, 取页号 (取记录数 ()))
填充一页常量信息到表格 ()

.子程序 _按钮_下一页_被单击, 空白型, , 
赋值 (程_常量区当前页号, 相加 (程_常量区当前页号, 1))
填充一页常量信息到表格 ()

.子程序 _按钮_上一页_被单击, 空白型, , 
赋值 (程_常量区当前页号, 相减 (程_常量区当前页号, 1))
填充一页常量信息到表格 ()

.子程序 取页号, 整数型, , 取当前记录在第几页。
.参数 记录号, 整数型, , 

.如果 (等于 (求余数 (记录号, 50), 0))
    返回 (整除 (记录号, 50))
.否则
    返回 (相加 (整除 (记录号, 50), 1))
.如果结束


.子程序 填充一页常量信息到表格, 空白型, , 填充一页50条记录常量信息到表格，并设置导航按钮状态，并在表格中为当前常量定位。
.局部变量 计次变量, 整数型, , , 
.局部变量 当前记录号, 整数型, , , 

赋值 (当前记录号, 取记录号 ())
跳到 (相加 (相减 (相乘 (50, 程_常量区当前页号), 50), 1))
.计次循环首 (50, 计次变量)
    计次变量.未知支持库函数_9 (0, #., 读 (#常量名称))
    计次变量.未知支持库函数_9 (1, #., 读 (#常量值_十六进制))
    计次变量.未知支持库函数_9 (2, #., 读 (#常量值_十进制))
    计次变量.未知支持库函数_9 (3, #., 读 (#常量说明))
    跳过 ()
.计次循环尾 ()

 ' 设置常量区导航按钮的状态。
.如果 (等于 (程_常量区当前页号, 1))
    赋值 (.禁止, 真)
.否则
    赋值 (.禁止, 假)
    
.如果结束
.如果 (小于 (相减 (程_常量区当前页号, 1), 1))
    赋值 (.禁止, 真)
.否则
    赋值 (.禁止, 假)
.如果结束

.如果 (大于 (相加 (程_常量区当前页号, 1), 取页号 (取记录数 ())))
    赋值 (.禁止, 真)
.否则
    赋值 (.禁止, 假)
.如果结束

.如果 (等于 (程_常量区当前页号, 取页号 (取记录数 ())))
    赋值 (.禁止, 真)
.否则
    赋值 (.禁止, 假)
.如果结束

 ' 在常量表格中到为当前常量定位。
.如果 (等于 (当前记录号, 50))
    50.未知支持库函数_0 (0)
.否则
    求余数 (当前记录号, 50).未知支持库函数_0 (0)
.如果结束
跳到 (当前记录号)
_高级表格_常量_光标位置改变 ()

.子程序 _插入时使用中文名_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (全局选项.使用中文名, .选中)
写配置项 (全_配置文件名, “选项”, “使用中文名”, 到文本 (全局选项.使用中文名))

.子程序 _列表框_类型索引_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _列表框_函数索引_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_添加到列表_被选择 ()

.子程序 _列表框_类型索引_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_添加到列表_被选择 ()

.子程序 _待插入列表框_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_移除项目_被选择 ()

.子程序 _待插入列表框_列表项被选择, 空白型, , 
.局部变量 项目类型, 整数型, , , 

 ' 显示待插入列表中的函数、数据类型或常量信息。
赋值 (项目类型, 程_待插入列表框项目信息 [.取项目数值 (.现行选中项)].项目类型)
.判断开始 (等于 (项目类型, #项目类型_函数))
    .取项目文本 (.现行选中项).选择 ()
    _函数_被选择 ()
.判断 (等于 (项目类型, #项目类型_数据类型))
    .取项目文本 (.现行选中项).选择 ()
    _数据类型_被选择 ()
.判断 (等于 (项目类型, #项目类型_常量))
    0.去除状态 (#选中)
    1.去除状态 (#选中)
    2.加入状态 (#选中)
    置当前库 (#常量数据库)
    赋值 (.现行子夹, 2)
    到首记录 ()
    索引查找 (.取项目文本 (.现行选中项))
    从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)
    赋值 (程_常量区当前页号, 取页号 (取记录号 ()))
    填充一页常量信息到表格 ()
.默认
    
.判断结束


.子程序 _退出_被选择, 空白型, , 
销毁 ()

.子程序 _分类到_被选择, 空白型, , 
.局部变量 项目索引, 整数型, , , 

赋值 (项目索引, .最大化按钮)
.如果真 (不等于 (项目索引.取缩进层次 (), 1))
    赋值 (项目索引, 项目索引.取父项目 ())
    
.如果真结束
赋值 (项目索引, 项目索引.加入项目 (.取项目文本 (.现行选中项), 2, 2, ))
赋值 (.最大化按钮, 项目索引)
项目索引.保证显示 ()
赋值 (.标记, #是否被修改)
_函数分类_被选择 ()


.子程序 _按钮_复制1_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 
.局部变量 项目数值, 整数型, , , 
.局部变量 数组位置, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

 ' 复制待插入列表中的函数、数据类型及常量的易声明格式到剪辑板。
鸣叫 ()
.如果真 (等于 (取项目数 (), 0))
    信息框 (“没有要复制的函数、数据类型及常量!”, #信息图标, .)
    返回 ()
.如果真结束
.计次循环首 (取项目数 (), 计次变量)
    赋值 (项目数值, 相减 (计次变量, 1).取项目数值 ())
    赋值 (数组位置, 程_待插入列表框项目信息 [项目数值], 数组位置)
    
    .判断开始 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_函数))
        赋值 (结果文本, 相加 (结果文本, 函数转文本 (程_函数信息数组 [数组位置])))
        
    .判断 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_数据类型))
        赋值 (结果文本, 相加 (结果文本, 数据类型转文本 (程_数据类型信息数组 [数组位置])))
        
    .判断 (等于 (程_待插入列表框项目信息 [项目数值], 项目类型, #项目类型_常量))
        赋值 (结果文本, 相加 (结果文本, 常量转文本 (程_常量信息数组 [数组位置])))
    .默认
        
    .判断结束
    
.计次循环尾 ()
置剪辑板文本 (结果文本)

.子程序 _新增函数_被选择, 空白型, , 
载入 (新增函数窗口, , 真)

.子程序 _高级表格_函数_结束编辑, 空白型, , 
 ' 如果真 (高级表格_函数.取数据 (程_当前表格行号, 程_当前表格列号) ≠ 程_编辑前内容)  ' 如果被修改，则保存修改。
保存编辑 ()


.子程序 保存编辑, 空白型, , 保存函数、数据类型及常量的修改。
.局部变量 计次变量, 整数型, , , 
.局部变量 中文名, 文本型, , , 
.局部变量 说明, 文本型, , , 

.判断开始 (等于 (取当前库 (), #函数数据库)) ' 保存函数信息的修改。
    赋值 (程_当前函数信息.命令名_中文, 3.未知支持库函数_10 (1))
    赋值 (程_当前函数信息.命令名_说明, 1.未知支持库函数_10 (0))
    赋值 (程_当前函数信息.其它说明, 1.未知支持库函数_10 (3))
    赋值 (程_当前函数信息.返回值_说明, 3.未知支持库函数_10 (3))
    .计次循环首 (相减 (., 7), 计次变量) ' 中文参数名
        赋值 (中文名, 相加 (中文名, 相加 (6, 计次变量).未知支持库函数_10 (1), “,”))
        赋值 (说明, 相加 (说明, 相加 (6, 计次变量).未知支持库函数_10 (5), “~”))
    .计次循环尾 ()
    .如果 (不等于 (子文本替换 (中文名, “,”, “”, , , 真), “”))
        赋值 (程_当前函数信息.参数名_中文, 中文名)
    .否则
        赋值 (程_当前函数信息.参数名_中文, “”)
    .如果结束
    .如果 (不等于 (子文本替换 (说明, “~”, “”, , , 真), “”))
        赋值 (程_当前函数信息.参数_说明, 说明)
    .否则
        赋值 (程_当前函数信息.参数_说明, “”)
    .如果结束
    
    写 (#dll命令名_中文, 程_当前函数信息.命令名_中文)
    写 (#dll命令名_说明, 程_当前函数信息.命令名_说明)
    写 (#dll其它说明, 程_当前函数信息.其它说明)
    写 (#dll返回值_说明, 程_当前函数信息.返回值_说明)
    写 (#dll参数名_中文, 程_当前函数信息.参数名_中文)
    写 (#dll参数_说明, 程_当前函数信息.参数_说明)
    
.判断 (等于 (取当前库 (), #数据类型库)) ' 保存数据类型信息的修改。
    赋值 (程_当前数据类型信息.类型名称_中文, 1.未知支持库函数_10 (1))
    赋值 (程_当前数据类型信息.类型_说明, 1.未知支持库函数_10 (2))
    .计次循环首 (相减 (., 3), 计次变量) ' 中文成员名。
        赋值 (中文名, 相加 (中文名, 相加 (2, 计次变量).未知支持库函数_10 (1), “,”))
        赋值 (说明, 相加 (说明, 相加 (2, 计次变量).未知支持库函数_10 (4), “~”))
    .计次循环尾 ()
    输出调试文本 (说明)
    .如果 (不等于 (子文本替换 (中文名, “,”, “”, , , 真), “”))
        赋值 (程_当前数据类型信息.类型成员名_中文, 中文名)
    .否则
        赋值 (程_当前数据类型信息.类型成员名_中文, “”)
    .如果结束
    .如果 (不等于 (子文本替换 (说明, “~”, “”, , , 真), “”))
        赋值 (程_当前数据类型信息.类型成员_说明, 说明)
    .否则
        赋值 (程_当前数据类型信息.类型成员_说明, “”)
    .如果结束
    写 (#类型名称_中文, 程_当前数据类型信息.类型名称_中文)
    写 (#类型_说明, 程_当前数据类型信息.类型_说明)
    写 (#类型成员名_中文, 程_当前数据类型信息.类型成员名_中文)
    写 (#类型成员_说明, 程_当前数据类型信息.类型成员_说明)
    
.判断 (等于 (取当前库 (), #常量数据库)) ' 保存常量信息的修改。
    赋值 (程_当前常量信息.常量值_十进制, 未知支持库函数_3 ().未知支持库函数_10 (2))
    赋值 (程_当前常量信息.常量说明, 未知支持库函数_3 ().未知支持库函数_10 (3))
    
    写 (#常量值_十进制, 程_当前常量信息.常量值_十进制)
    写 (#常量说明, 程_当前常量信息.常量说明)
.默认
    
.判断结束
.如果真 (等于 (读 (#是否为新增), 假))
    写 (#是否被修改, 真)
.如果真结束


.子程序 _查找编辑框_数据类型_内容被改变, 空白型, , 
.如果真 (并且 (可有焦点 (), 不等于 (.内容, “”)))
    .选择 (.内容)
    _列表框_类型索引_列表项被选择 ()
    获取焦点 ()
.如果真结束


.子程序 _树型框_函数分类_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (.取缩进层次 (.最大化按钮), 2))
    _添加到列表_被选择 ()
.如果真结束


.子程序 _函数分类_被选择, 空白型, , 
#按钮索引_函数.去除状态 (#选中)
#按钮索引_函数分类.加入状态 (#选中)
#按钮索引_数据类型.去除状态 (#选中)
#按钮索引_常量.去除状态 (#选中)
#按钮索引_添加到列表.置提示文本 (“添加当前选中API函数到列表。 [ F5 ]”)
#按钮索引_复制到剪辑板.置提示文本 (“复制当前选中API函数到剪辑板。 [ F6 ]”)
#按钮索引_插入到易语言.置提示文本 (“插入当前选中API函数到易语言。 [ F7 ]”)
置当前库 (#函数数据库)
赋值 (.现行子夹, 0)
.如果真 (等于 (.现行选中项, -1))
    赋值 (.现行选中项, 0)
    
.如果真结束
赋值 (.可视, 假)
赋值 (.可视, 真)
_列表框_函数索引_列表项被选择 ()

.子程序 _移除项目_被选择, 空白型, , 
.删除项目 (.现行选中项)

.子程序 _全部移除_被选择, 空白型, , 
清空 ()

.子程序 _待插入列表框_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _添加到列表_被选择, 空白型, , 
.局部变量 项目信息, 列表项目信息, , , 
.局部变量 项目索引, 整数型, , , 
.局部变量 自定义类型数组, 文本型, , "0", 保存当前函数的自定义数据类型名称。
.局部变量 计次变量, 整数型, , , 
.局部变量 被选择常量数, 整数型, , , 

 ' 通过判断当前的数据库来决定添加的是函数、或是数据类型，还是常量。
.判断开始 (等于 (取当前库 (), #函数数据库)) ' 添加函数到列表。
     ' 首选判断是否被重复添加到列表。
    赋值 (项目索引, 程_当前函数信息.选择 (.命令名))
    .如果真 (并且 (不等于 (项目索引, -1), 不等于 (项目索引.取项目文本 (), 程_当前函数信息.命令名)))
        赋值 (项目索引, -1)
    .如果真结束
    .如果真 (等于 (项目索引, -1)) ' 如果还没有添加到列表，现在添加。
        加入成员 (程_函数信息数组, 程_当前函数信息)
        
         ' 通过保存项目信息来判断这个项目是函数、或是数据类型，还是常量。
        赋值 (项目信息.数组位置, 取数组成员数 (程_函数信息数组))
        赋值 (项目信息.项目类型, #项目类型_函数)
        加入成员 (程_待插入列表框项目信息, 项目信息) ' 记录当前项目的信息。
        
        赋值 (项目索引, 程_当前函数信息.加入项目 (.命令名, 取数组成员数 (程_待插入列表框项目信息))) ' 保存此项目信息的数组维数到此项目的项目数值中。
        项目索引.选择项目 ()
        
         ' 判断此函数是否有自定义数据类型，如有则添加所有自定义数据类型到列表。
        .如果真 (不等于 (程_当前函数信息.自定义类型集合, “”))
            赋值 (自定义类型数组, 分割文本 (程_当前函数信息.自定义类型集合, , ))
            置当前库 (#数据类型库)
            .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
                 ' 判断数据库中是否存在此数据类型，如存在则添加。
                到首记录 ()
                .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                    从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                    _添加到列表_被选择 () ' 递归，添加数据类型到列表。
                .如果真结束
                
            .计次循环尾 ()
            置当前库 (#函数数据库)
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (取当前库 (), #数据类型库)) ' 添加数据类型到列表。
    赋值 (项目索引, 程_当前数据类型信息.选择 (.类型名称))
    .如果真 (并且 (不等于 (项目索引, -1), 不等于 (项目索引.取项目文本 (), 程_当前数据类型信息.类型名称)))
        赋值 (项目索引, -1)
    .如果真结束
    .如果真 (等于 (项目索引, -1))
        加入成员 (程_数据类型信息数组, 程_当前数据类型信息)
        
        赋值 (项目信息.数组位置, 取数组成员数 (程_数据类型信息数组))
        赋值 (项目信息.项目类型, #项目类型_数据类型)
        加入成员 (程_待插入列表框项目信息, 项目信息)
        
        赋值 (项目索引, 程_当前数据类型信息.加入项目 (.类型名称, 取数组成员数 (程_待插入列表框项目信息)))
        项目索引.选择项目 ()
        
        .如果真 (不等于 (程_当前数据类型信息.自定义类型集合, “”))
            赋值 (自定义类型数组, 分割文本 (程_当前数据类型信息.自定义类型集合, , ))
            .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
                 ' 判断数据库中是否存在此数据类型，如存在则添加。
                到首记录 ()
                .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                    从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                    _添加到列表_被选择 () ' 递归，添加数据类型到列表。
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (等于 (.现行子夹, 1))
                _列表框_类型索引_列表项被选择 ()
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (取当前库 (), #常量数据库)) ' 添加常量到列表。
    赋值 (被选择常量数, 相加 (相减 (未知支持库函数_7 (), 未知支持库函数_5 ()), 1))
    跳过 (相加 (负 (被选择常量数), 1))
    .计次循环首 (被选择常量数, )
        从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)
        赋值 (项目索引, 程_当前常量信息.选择 (.常量名称))
        .如果真 (并且 (不等于 (项目索引, -1), 不等于 (项目索引.取项目文本 (), 程_当前常量信息.常量名称)))
            赋值 (项目索引, -1)
        .如果真结束
        .如果真 (等于 (项目索引, -1))
            加入成员 (程_常量信息数组, 程_当前常量信息)
            
            赋值 (项目信息.数组位置, 取数组成员数 (程_常量信息数组))
            赋值 (项目信息.项目类型, #项目类型_常量)
            加入成员 (程_待插入列表框项目信息, 项目信息)
            
            赋值 (项目索引, 程_当前常量信息.加入项目 (.常量名称, 取数组成员数 (程_待插入列表框项目信息)))
            项目索引.选择项目 ()
            
        .如果真结束
        跳过 ()
    .计次循环尾 ()
    跳过 (-1)
.默认
    
.判断结束


.子程序 _插入到易语言_被选择, 空白型, , 
插入到易语言 ()
执行插入 ()
销毁 ()

.子程序 插入到易语言, 空白型, , 插入当前API数据到易语言。
.局部变量 计次变量, 整数型, , , 
.局部变量 自定义类型数组, 文本型, , "0", 保存当前函数的自定义数据类型名称。
.局部变量 被选择常量数, 整数型, , , 

.判断开始 (等于 (取当前库 (), #函数数据库))
    插入函数 (程_当前函数信息)
    .如果真 (不等于 (程_当前函数信息.自定义类型集合, “”))
        赋值 (自定义类型数组, 分割文本 (程_当前函数信息.自定义类型集合, , ))
        置当前库 (#数据类型库)
        .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
            到首记录 ()
            .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                插入到易语言 () ' 递归，插入数据类型到易语言。
            .如果真结束
            
        .计次循环尾 ()
        置当前库 (#函数数据库)
    .如果真结束
    
.判断 (等于 (取当前库 (), #数据类型库))
    插入数据类型 (程_当前数据类型信息)
    .如果真 (不等于 (程_当前数据类型信息.自定义类型集合, “”))
        赋值 (自定义类型数组, 分割文本 (程_当前数据类型信息.自定义类型集合, , ))
        .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
            到首记录 ()
            .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                插入到易语言 () ' 递归，插入数据类型到易语言。
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.判断 (等于 (取当前库 (), #常量数据库))
    赋值 (被选择常量数, 相加 (相减 (未知支持库函数_7 (), 未知支持库函数_5 ()), 1))
    跳过 (相加 (负 (被选择常量数), 1))
    .计次循环首 (被选择常量数, )
        从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)
        插入常量 (程_当前常量信息)
        跳过 ()
    .计次循环尾 ()
    跳过 (-1)
.默认
    
.判断结束


.子程序 _复制到剪辑板_被选择, 空白型, , 
置剪辑板文本 (复制到剪辑板 ())

.子程序 复制到剪辑板, 文本型, , 复制当前API信息到剪辑板。
.局部变量 计次变量, 整数型, , , 
.局部变量 自定义类型数组, 文本型, , "0", 保存当前函数的自定义数据类型名称。
.局部变量 结果文本, 文本型, , , 
.局部变量 被选择常量数, 整数型, , , 

.判断开始 (等于 (取当前库 (), #函数数据库))
    赋值 (结果文本, 函数转文本 (程_当前函数信息))
    .如果真 (不等于 (程_当前函数信息.自定义类型集合, “”))
        赋值 (自定义类型数组, 分割文本 (程_当前函数信息.自定义类型集合, , ))
        置当前库 (#数据类型库)
        .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
            到首记录 ()
            .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                赋值 (结果文本, 相加 (结果文本, 复制到剪辑板 ())) ' 递归，复制数据类型到易语言。
            .如果真结束
            
        .计次循环尾 ()
        置当前库 (#函数数据库)
    .如果真结束
    
.判断 (等于 (取当前库 (), #数据类型库))
    赋值 (结果文本, 数据类型转文本 (程_当前数据类型信息))
    .如果真 (不等于 (程_当前数据类型信息.自定义类型集合, “”))
        赋值 (自定义类型数组, 分割文本 (程_当前数据类型信息.自定义类型集合, , ))
        .计次循环首 (取数组成员数 (自定义类型数组), 计次变量)
            到首记录 ()
            .如果真 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (自定义类型数组 [计次变量]))))
                从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
                赋值 (结果文本, 相加 (结果文本, 复制到剪辑板 ())) ' 递归， 复制数据类型到易语言。
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.判断 (等于 (取当前库 (), #常量数据库))
    赋值 (被选择常量数, 相加 (相减 (未知支持库函数_7 (), 未知支持库函数_5 ()), 1))
    跳过 (相加 (负 (被选择常量数), 1))
    .计次循环首 (被选择常量数, )
        从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)
        赋值 (结果文本, 相加 (结果文本, 常量转文本 (程_当前常量信息)))
        跳过 ()
    .计次循环尾 ()
    跳过 (-1)
.默认
    
.判断结束
返回 (结果文本)

.子程序 _导入_被选择, 空白型, , 
赋值 (.选中, 真) ' 在导入导出窗口中用来判断是选择了导入菜单还导出菜单。
载入 (导入导出窗口, , 真)

.子程序 _表格颜色配置_被选择, 空白型, , 
载入 (表格颜色配置窗口, , 真)

.子程序 _高级表格_数据类型_结束编辑, 空白型, , 
 ' 如果真 (程_编辑前内容 ≠ 高级表格_数据类型.取数据 (程_当前表格行号, 程_当前表格列号))
保存编辑 ()


.子程序 _高级表格_常量_结束编辑, 空白型, , 
 ' 如果真 (程_编辑前内容 ≠ 高级表格_常量.取数据 (程_当前表格行号, 程_当前表格列号))
保存编辑 ()


.子程序 _易语言例程_被选择, 空白型, , 
载入 (易语言例程窗口, , 真)

.子程序 _组合框_易语言例程_列表项被选择, 空白型, , 
.如果 (等于 (全_向导运行方式, 真))
    未知支持库函数_13 (读入文件 (程_当前函数例程信息 [.取项目数值 (.现行选中项)].文件全路径名), 真)
    销毁 ()
.否则
    未知支持库函数_6 (#, 程_当前函数例程信息 [.取项目数值 (.现行选中项)].文件全路径名, , )
    
.如果结束


.子程序 _插入备注信息_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (全局选项.插入备注, .选中)
写配置项 (全_配置文件名, “选项”, “插入备注”, 到文本 (全局选项.插入备注))

.子程序 菜单事件转移, 空白型, , 为相同功能的菜单设置到同一子程序去处理。
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()

事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()

事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()


.子程序 __启动窗口_尺寸被改变, 空白型, , 
.局部变量 增减宽度, 整数型, , , 
.局部变量 增减高度, 整数型, , , 
.局部变量 标题高度差, 整数型, , , 

.如果真 (不等于 (., 2)) ' 如果为最小化，则不改变窗口界面布局。
    赋值 (标题高度差, 置标题高度差 (_启动窗口, 34, 假))
    赋值 (增减宽度, 相减 (., .宽度, 150)) ' 150=设计时的窗口宽度减去外形框_主的宽度。
    赋值 (增减高度, 相减 (., .高度, 105, 标题高度差))
    
    赋值 (.宽度, 相加 (.宽度, 增减宽度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.宽度, 相加 (.宽度, 增减宽度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    赋值 (., 相加 (., 增减宽度))
    赋值 (., 相加 (., 增减高度))
    5.未知支持库函数_32 (相加 (5.未知支持库函数_44 (), 增减宽度))
    .如果真 (小于 (5.未知支持库函数_44 (), 100))
        5.未知支持库函数_32 (100)
    .如果真结束
    赋值 (.宽度, 相加 (.宽度, 增减宽度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.左边, 相加 (.左边, 增减宽度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.高度, 相加 (.高度, 增减高度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    赋值 (., 相加 (., 增减宽度))
    赋值 (., 相加 (., 增减高度))
    4.未知支持库函数_32 (相加 (4.未知支持库函数_44 (), 增减宽度))
    .如果真 (小于 (4.未知支持库函数_44 (), 100))
        4.未知支持库函数_32 (100)
    .如果真结束
    
    赋值 (.宽度, 相加 (.宽度, 增减宽度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    赋值 (., 相加 (., 增减宽度))
    赋值 (., 相加 (., 增减高度))
    3.未知支持库函数_32 (相加 (3.未知支持库函数_44 (), 增减宽度))
    .如果真 (小于 (3.未知支持库函数_44 (), 150))
        3.未知支持库函数_32 (150)
    .如果真结束
    
    赋值 (.宽度, 相加 (.宽度, 增减宽度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    赋值 (.顶边, 相加 (.顶边, 增减高度))
    
    赋值 (.宽度, .)
    赋值 (.禁止, .)
     ' .如果 (小于或等于 (相减 (取用户区宽度 (), .宽度), 相加 (.左边, .宽度)))
         ' 赋值 (.左边, 相加 (.左边, .宽度))
     ' .否则
         ' 赋值 (.左边, 相减 (取用户区宽度 (), .宽度))
     ' .如果结束
    
    .如果真 (.)
        写配置项 (全_配置文件名, “位置大小”, “位置”, 到文本 (.))
        .如果真 (不等于 (., 3)) ' 如果不是最大化状态，记录当前的窗口大小。
            写配置项 (全_配置文件名, “位置大小”, “宽度”, 到文本 (.))
            写配置项 (全_配置文件名, “位置大小”, “高度”, 到文本 (.))
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 _高级表格_数据类型_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _高级表格_函数_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 父项目索引, 整数型, , , 

赋值 (父项目索引, .最大化按钮)
.如果真 (不等于 (父项目索引.取缩进层次 (), 1))
    赋值 (父项目索引, 父项目索引.取父项目 ())
.如果真结束
赋值 (.标题, 相加 (“分类到 [”, 父项目索引.取项目文本 (), “]”))
弹出菜单 ()

.子程序 _关于_被选择, 空白型, , 
载入 (关于窗口, , 真)

.子程序 _高级表格_函数_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 参数数据类型, 文本型, , , 

.如果真 (并且 (大于或等于 (程_当前表格行号, 7), 等于 (程_当前表格列号, 2)))
    赋值 (参数数据类型, 程_当前表格行号.未知支持库函数_10 (程_当前表格列号))
    .如果真 (等于 (取数据类型 (参数数据类型), #.)) ' 判断是否为自定义数据类型
        .如果真 (不等于 (参数数据类型.选择 (), -1)) ' 判断是否存在此自定义数据类型。
            .如果真 (等于 (.取项目文本 (.现行选中项), 参数数据类型))
                _数据类型_被选择 ()
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 _高级表格_数据类型_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 成员数据类型, 文本型, , , 

.如果真 (并且 (大于或等于 (程_当前表格行号, 3), 等于 (程_当前表格列号, 2)))
    赋值 (成员数据类型, 程_当前表格行号.未知支持库函数_10 (程_当前表格列号))
    .如果真 (等于 (取数据类型 (成员数据类型), #.))
        .如果真 (不等于 (成员数据类型.选择 (), -1))
            .如果真 (等于 (.取项目文本 (.现行选中项), 成员数据类型))
                _列表框_类型索引_列表项被选择 ()
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 _导出_被选择, 空白型, , 
载入 (导入导出窗口, , 真)

.子程序 _扩展编辑框_函数_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    .如果真 (不等于 (.内容, 程_编辑前内容))
        赋值 (.内容, 子文本替换 (.内容, “~”, “”, , , 真))
        程_当前表格行号.未知支持库函数_9 (程_当前表格列号, #., .内容)
        保存编辑 ()
    .如果真结束
    返回 (假)
.如果真结束


.子程序 _扩展编辑框_数据类型_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    .如果真 (不等于 (.内容, 程_编辑前内容))
        赋值 (.内容, 子文本替换 (.内容, “~”, “”, , , 真))
        程_当前表格行号.未知支持库函数_9 (程_当前表格列号, #., .内容)
        保存编辑 ()
    .如果真结束
    返回 (假)
.如果真结束


.子程序 _扩展编辑框_常量_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    .如果真 (不等于 (.内容, 程_编辑前内容))
        保存编辑 ()
    .如果真结束
    返回 (假)
.如果真结束



.子程序 _联系作者_被选择, 空白型, , 
未知支持库函数_6 (#, “mailto:luckkk@tom.com?subject=关于易用API函数浏览器!”, , )

.子程序 _易语言官方网站_被选择, 空白型, , 
未知支持库函数_6 (#, “www.dywt.com.cn”, , )


.子程序 _易语言官方交流论坛_被选择, 空白型, , 
未知支持库函数_6 (#, “http://www.dywt.com.cn/vbs/index.asp”, , )


.子程序 置当前数据库, 空白型, , 根据主界面重新设置当前数据库，并刷新显示当前API信息。
.判断开始 (等于 (.现行子夹, 0))
    置当前库 (#函数数据库)
    _列表框_函数索引_列表项被选择 ()
.判断 (等于 (.现行子夹, 1))
    置当前库 (#数据类型库)
    _列表框_类型索引_列表项被选择 ()
.判断 (等于 (.现行子夹, 2))
    置当前库 (#常量数据库)
    赋值 (程_常量区当前页号, 取页号 (取记录号 ()))
    填充一页常量信息到表格 ()
.默认
    
.判断结束


.子程序 _扩展编辑框_数据类型_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (等于 (字符代码, 取代码 (“~”, ))) ' 字符"~"为成员说明信息的分割符，程序保留。
    返回 (0)
.如果真结束


.子程序 _扩展编辑框_函数_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (等于 (字符代码, 取代码 (“~”, ))) ' 字符"~"为参数说明信息的分割符，程序保留。
    返回 (0)
.如果真结束


.子程序 _查找编辑框_常量_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (等于 (位与 (字符代码, 128), 128)) ' 不允许输入汉字。
    返回 (0)
.如果真结束


.子程序 从数据库读取当前API信息, 空白型, , 读取当前API信息到数组。
.参数 当前库类型, 文本型, , 
.参数 函数信息, API函数信息, 可空, 
.参数 数据类型信息, API数据类型信息, 可空, 
.参数 常量信息, API常量信息, 可空, 

.判断开始 (等于 (当前库类型, #函数数据库))
    赋值 (函数信息.命令名, 读 (#dll命令名))
    赋值 (函数信息.命令名_中文, 读 (#dll命令名_中文))
    赋值 (函数信息.命令名_说明, 读 (#dll命令名_说明))
    赋值 (函数信息.库名, 读 (#dll库名))
    赋值 (函数信息.别名, 读 (#dll别名))
    赋值 (函数信息.返回值, 读 (#dll返回值))
    赋值 (函数信息.返回值_说明, 读 (#dll返回值_说明))
    赋值 (函数信息.参数表, 到文本 (未知支持库函数_4 (读 (#dll参数表), 函数信息.命令名, #)))
    赋值 (函数信息.参数名_中文, 读 (#dll参数名_中文))
    赋值 (函数信息.参数_说明, 读 (#dll参数_说明))
    赋值 (函数信息.其它说明, 读 (#dll其它说明))
    赋值 (函数信息.是否为新增, 读 (#是否为新增))
    赋值 (函数信息.是否被修改, 读 (#是否被修改))
    赋值 (函数信息.自定义类型集合, 取自定义类型集合 (函数信息.参数表))
    
.判断 (等于 (当前库类型, #数据类型库))
    赋值 (数据类型信息.类型名称, 读 (#类型名称))
    赋值 (数据类型信息.类型_说明, 读 (#类型_说明))
    赋值 (数据类型信息.类型名称_中文, 读 (#类型名称_中文))
    赋值 (数据类型信息.类型成员表, 读 (#类型成员表))
    赋值 (数据类型信息.类型成员_说明, 读 (#类型成员_说明))
    赋值 (数据类型信息.类型成员名_中文, 读 (#类型成员名_中文))
    赋值 (数据类型信息.数组, 读 (#数组))
    赋值 (数据类型信息.是否为新增, 读 (#是否为新增))
    赋值 (数据类型信息.是否被修改, 读 (#是否被修改))
    赋值 (数据类型信息.自定义类型集合, 取自定义类型集合 (数据类型信息.类型成员表))
    
.判断 (等于 (当前库类型, #常量数据库))
    赋值 (常量信息.常量名称, 读 (#常量名称))
    赋值 (常量信息.常量值_十六进制, 读 (#常量值_十六进制))
    赋值 (常量信息.常量值_十进制, 读 (#常量值_十进制))
    赋值 (常量信息.常量说明, 读 (#常量说明))
    赋值 (常量信息.是否为新增, 读 (#是否为新增))
    赋值 (常量信息.是否被修改, 读 (#是否被修改))
    
.默认
    
.判断结束


.子程序 取自定义类型集合, 文本型, , 收集参数表中的所有自定义数据类型。
.参数 参数表, 文本型, , 函数的参数表或数据类型的成员表。

.局部变量 参数数组, 文本型, , "0", 
.局部变量 参数, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (参数数组, 分割文本 (参数表, , ))
.计次循环首 (取数组成员数 (参数数组), 计次变量)
    赋值 (参数, 分割文本 (参数数组 [计次变量], “ As ”, ))
    .如果真 (等于 (取数组成员数 (参数), 2))
        .如果真 (等于 (取数据类型 (参数 [2]), #.))
            赋值 (结果文本, 相加 (结果文本, 参数 [2], “,”))
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (结果文本)

.子程序 _帮助主题_被选择, 空白型, , 
.如果真 (等于 (文件是否存在 (#帮助文件), 假))
    信息框 (“帮助文件未找到！”, #警告图标, .)
    返回 ()
.如果真结束
未知支持库函数_6 (#, #帮助文件, , )


.子程序 __启动窗口_位置被改变, 空白型, , 
.如果真 (并且 (不等于 (., 2), 不等于 (., 3)))
    写配置项 (全_配置文件名, “位置大小”, “左边”, 到文本 (.))
    写配置项 (全_配置文件名, “位置大小”, “顶边”, 到文本 (.))
.如果真结束


.子程序 _从剪辑板读取API信息_被选择, 空白型, , 
.局部变量 函数信息数组, API函数信息, , "0", 
.局部变量 数据类型信息数组, API数据类型信息, , "0", 
.局部变量 常量信息数组, API常量信息, , "0", 
.局部变量 计次变量, 整数型, , , 

.如果 (不等于 (取剪辑板文本 (), “”))
    .如果 (不等于 (提取API信息 (取剪辑板文本 (), 函数信息数组, 数据类型信息数组, 常量信息数组), 0))
        置当前库 (#函数数据库)
        .如果真 (大于 (取数组成员数 (函数信息数组), 50))
            重定义数组 (函数信息数组, 真, 50)
        .如果真结束
        .计次循环首 (取数组成员数 (函数信息数组), 计次变量)
            到首记录 ()
            .如果 (索引查找 (函数信息数组 [计次变量], 命令名))
                从数据库读取当前API信息 (#函数数据库, 程_当前函数信息)
            .否则
                赋值 (程_当前函数信息, 函数信息数组 [计次变量])
            .如果结束
            _添加到列表_被选择 ()
        .计次循环尾 ()
        
        置当前库 (#数据类型库)
        .计次循环首 (取数组成员数 (数据类型信息数组), 计次变量)
            到首记录 ()
            .如果 (查找 (等于 (到大写 (数据类型信息数组 [计次变量], 类型名称), 到大写 (读 (#类型名称)))))
                从数据库读取当前API信息 (#数据类型库, , 程_当前数据类型信息)
            .否则
                赋值 (程_当前数据类型信息, 数据类型信息数组 [计次变量])
            .如果结束
            _添加到列表_被选择 ()
            
        .计次循环尾 ()
        
        置当前库 (#常量数据库)
        .计次循环首 (取数组成员数 (常量信息数组), 计次变量)
            到首记录 ()
            .如果 (索引查找 (常量信息数组 [计次变量], 常量名称))
                从数据库读取当前API信息 (#常量数据库, , , 程_当前常量信息)
            .否则
                赋值 (程_当前常量信息, 常量信息数组 [计次变量])
            .如果结束
            _添加到列表_被选择 ()
        .计次循环尾 ()
        置当前数据库 ()
        
    .否则
        信息框 (“当前剪辑板无API信息（VB声明）！”, #信息图标, .)
    .如果结束
    
.否则
    信息框 (“当前剪辑板无文本数据！”, #信息图标, .)
.如果结束


.子程序 _API函数前后缀_被选择, 空白型, , 
.局部变量 前缀, 文本型, , , 
.局部变量 后缀, 文本型, , , 

.如果真 (输入框 (“请自定义API函数名称之前的符号，在插入或复制API函数时会被自动添加!”, ., 全局选项.前缀, 前缀, ))
    写配置项 (全_配置文件名, “选项”, “前缀”, 前缀)
    赋值 (全局选项.前缀, 前缀)
.如果真结束

.如果真 (输入框 (“请自定义API函数名称之后的符号，在插入或复制API函数时会被自动添加!”, ., 全局选项.后缀, 后缀, ))
    写配置项 (全_配置文件名, “选项”, “后缀”, 后缀)
    赋值 (全局选项.后缀, 后缀)
.如果真结束


.子程序 _工具1_被选择, 空白型, , 
.局部变量 事件菜单, 菜单, , , 
.局部变量 执行命令名, 文本型, , , 

赋值 (事件菜单, 取事件组件 ())
赋值 (执行命令名, 读配置项 (全_配置文件名, “工具”, 相加 (“路径”, 到文本 (到数值 (事件菜单.标题))), ))
.如果 (文件是否存在 (执行命令名))
    未知支持库函数_6 (#, 执行命令名, , )
.否则
    信息框 (“指定程序或文件不在在，请重新配置!”, #错误图标, .)
.如果结束


.子程序 _工具设置1_被选择, 空白型, , 
.局部变量 事件菜单, 菜单, , , 
.局部变量 工具名称, 文本型, , , 
.局部变量 工具序号, 文本型, , , 
.局部变量 执行命令名, 文本型, , , 

赋值 (事件菜单, 取事件组件 ())
赋值 (工具序号, 到文本 (到数值 (事件菜单.标题)))
赋值 (工具名称, 读配置项 (全_配置文件名, “工具”, 相加 (“名称”, 工具序号), ))
赋值 (执行命令名, 读配置项 (全_配置文件名, “工具”, 相加 (“路径”, 工具序号), ))
赋值 (.初始目录, 执行命令名)
赋值 (.文件名, 执行命令名)
.如果真 (打开 ())
    .如果真 (等于 (工具名称, “”))
        赋值 (工具名称, 取文件名 (.文件名))
    .如果真结束
    赋值 (执行命令名, .文件名)
    .如果真 (输入框 (“请输入工具名称：”, ., 工具名称, 工具名称, #输入文本))
        写配置项 (全_配置文件名, “工具”, 相加 (“名称”, 工具序号), 工具名称)
        
    .如果真结束
    写配置项 (全_配置文件名, “工具”, 相加 (“路径”, 工具序号), 执行命令名)
    配置工具菜单 ()
.如果真结束


.子程序 _高级查找_被选择, 空白型, , 
载入 (查找窗口, _启动窗口, 假)


.子程序 _工具条1_被单击, 空白型, , 
.参数 按钮索引, 整数型, , 

鸣叫 ()
.判断开始 (等于 (按钮索引, #按钮索引_函数))
    _函数_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_函数分类))
    _函数分类_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_数据类型))
    _数据类型_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_常量))
    _常量_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_添加到列表))
    _添加到列表_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_复制到剪辑板))
    _复制到剪辑板_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_插入到易语言))
    _插入到易语言_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_易语言例程))
    #CB_SHOWDROPDOWN.发送信息 (1, 0)
.判断 (等于 (按钮索引, #按钮索引_高级查找))
    _高级查找_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_帮助))
    _帮助主题_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_关于))
    _关于_被选择 ()
.判断 (等于 (按钮索引, #按钮索引_退出))
    _退出_被选择 ()
.默认
    
.判断结束


.子程序 _工具条1_被下拉, 空白型, , 
.参数 按钮索引, 整数型, , 
.参数 下拉横座标, 整数型, , 
.参数 下拉纵座标, 整数型, , 

鸣叫 ()
#CB_SHOWDROPDOWN.发送信息 (1, 0)

.程序集 关键函数集, , , 

.子程序 插入函数, 空白型, , 在模板程序中插入一个API函数。
.参数 函数信息, API函数信息, , 

.局部变量 命令名, 文本型, , , 
.局部变量 参数数组, 文本型, , "0", 
.局部变量 参数, 文本型, , "0", 
.局部变量 中文参数名数组, 文本型, , "0", 
.局部变量 参数名, 文本型, , , 
.局部变量 参数说明数组, 文本型, , "0", 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 

.如果 (并且 (全局选项.使用中文名, 不等于 (函数信息.命令名_中文, “”)))
    赋值 (命令名, 函数信息.命令名_中文)
.否则
    赋值 (命令名, 函数信息.命令名)
.如果结束
赋值 (命令名, 相加 (全局选项.前缀, 命令名, 全局选项.后缀))
未知支持库函数_0 (#., “DLL命令”, 命令名)

未知支持库函数_5 (#., 命令名, #., 取数据类型 (函数信息.返回值)) ' 返回值类型。
.如果真 (全局选项.插入备注)
    未知支持库函数_5 (#., 命令名, #., 相加 (函数信息.命令名_说明, “　”, 函数信息.返回值_说明)) ' 函数说明。
    
.如果真结束
未知支持库函数_5 (#., 命令名, #., 函数信息.库名) ' DLL库文件名。
.如果 (等于 (函数信息.别名, “”)) ' DLL库中对应命令名。
    未知支持库函数_5 (#., 命令名, #., 函数信息.命令名)
.否则
    未知支持库函数_5 (#., 命令名, #., 函数信息.别名)
.如果结束

赋值 (参数数组, 分割文本 (函数信息.参数表, , ))
赋值 (中文参数名数组, 分割文本 (函数信息.参数名_中文, , ))
赋值 (参数说明数组, 分割文本 (函数信息.参数_说明, “~”, ))
.计次循环首 (取数组成员数 (参数数组), 计次变量)
    赋值 (参数, 分割文本 (参数数组 [计次变量], “ As ”, )) ' ByVal hdc As Long
    赋值 (临时数组, 分割文本 (删首尾空 (参数 [1]), “ ”, )) ' ByVal hdc
    .如果 (并且 (全局选项.使用中文名, 等于 (取数组成员数 (中文参数名数组), 取数组成员数 (参数数组))))
        .如果 (不等于 (中文参数名数组 [计次变量], “”))
            赋值 (参数名, 中文参数名数组 [计次变量])
        .否则
            赋值 (参数名, 临时数组 [取数组成员数 (临时数组)])
        .如果结束
        
    .否则
        赋值 (参数名, 临时数组 [取数组成员数 (临时数组)])
    .如果结束
    
    .如果 (等于 (取数据类型 (参数 [2]), #.))
        未知支持库函数_0 (#., 相加 (命令名, “.”, 参数 [2]), 参数名)
        未知支持库函数_5 (#., 相加 (命令名, “.”, 参数名), #., “”)
    .否则
        未知支持库函数_0 (#., 相加 (命令名, “.参数”), 参数名) ' 复制一个参数
        未知支持库函数_5 (#., 相加 (命令名, “.”, 参数名), #., 取数据类型 (参数 [2])) ' 参数数据类型。
    .如果结束
    
    .如果真 (等于 (临时数组 [1], “ByRef”))
        .如果真 (不等于 (取数据类型 (参数 [2]), #.))
            未知支持库函数_5 (#., 相加 (命令名, “.”, 参数名), #., 真) ' 传址属性。
        .如果真结束
        
    .如果真结束
    .如果真 (并且 (全局选项.插入备注, 等于 (取数组成员数 (参数说明数组), 取数组成员数 (参数数组))))
        未知支持库函数_5 (#., 相加 (命令名, “.”, 参数名), #., 参数说明数组 [计次变量]) ' 参数说明。
    .如果真结束
    
.计次循环尾 ()
未知支持库函数_2 (#., 相加 (命令名, “.参数”))

.子程序 函数转文本, 文本型, , 
.参数 函数信息, API函数信息, , 

.局部变量 结果文本, 文本型, , , 
.局部变量 命令名, 文本型, , , 
.局部变量 参数数组, 文本型, , "0", 
.局部变量 参数, 文本型, , "0", 
.局部变量 中文参数名数组, 文本型, , "0", 
.局部变量 参数名, 文本型, , , 
.局部变量 参数说明数组, 文本型, , "0", 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 

 ' .DLL命令 打开对话框, 整数型, "comdlg32.dll", "GetOpenFileNameA", 备注
 ' .参数 OpenFile, 文件对话框, 传址 数组, 备注

赋值 (结果文本, “.DLL命令 ”)
.如果 (并且 (全局选项.使用中文名, 不等于 (函数信息.命令名_中文, “”)))
    赋值 (命令名, 函数信息.命令名_中文)
.否则
    赋值 (命令名, 函数信息.命令名)
.如果结束
赋值 (命令名, 相加 (全局选项.前缀, 命令名, 全局选项.后缀))

赋值 (结果文本, 相加 (结果文本, 命令名, “, ”)) ' 命令名。
赋值 (结果文本, 相加 (结果文本, 取数据类型_文本 (函数信息.返回值), “, ”)) ' 返回值数据类型。
赋值 (结果文本, 相加 (结果文本, #引号, 函数信息.库名, #引号, “, ”)) ' DLL库文件名。

.如果 (等于 (函数信息.别名, “”)) ' DLL库中对应命令名。
    赋值 (结果文本, 相加 (结果文本, #引号, 函数信息.命令名, #引号, “, ”))
.否则
    赋值 (结果文本, 相加 (结果文本, #引号, 函数信息.别名, #引号, “, ”))
.如果结束

.如果 (全局选项.插入备注) ' 函数说明。
    赋值 (结果文本, 相加 (结果文本, 函数信息.命令名_说明, “　”, 函数信息.返回值_说明, #换行符))
.否则
    赋值 (结果文本, 相加 (结果文本, #换行符))
.如果结束

赋值 (参数数组, 分割文本 (函数信息.参数表, , ))
赋值 (中文参数名数组, 分割文本 (函数信息.参数名_中文, , ))
赋值 (参数说明数组, 分割文本 (函数信息.参数_说明, “~”, ))
.计次循环首 (取数组成员数 (参数数组), 计次变量)
    赋值 (参数, 分割文本 (参数数组 [计次变量], “ As ”, )) ' ByVal hdc As Long
    .如果真 (等于 (取数组成员数 (参数), 1)) ' 有部分参数可能没有数据类型。
        加入成员 (参数, “Long”)
        
    .如果真结束
    赋值 (临时数组, 分割文本 (删首尾空 (参数 [1]), “ ”, )) ' ByVal hdc
    .如果 (并且 (全局选项.使用中文名, 等于 (取数组成员数 (中文参数名数组), 取数组成员数 (参数数组))))
        .如果 (不等于 (中文参数名数组 [计次变量], “”))
            赋值 (参数名, 中文参数名数组 [计次变量])
        .否则
            赋值 (参数名, 临时数组 [取数组成员数 (临时数组)])
        .如果结束
        
    .否则
        赋值 (参数名, 临时数组 [取数组成员数 (临时数组)])
    .如果结束
    赋值 (结果文本, 相加 (结果文本, “    .参数 ”))
    赋值 (结果文本, 相加 (结果文本, 参数名, “, ”)) ' 参数名
    赋值 (结果文本, 相加 (结果文本, 取数据类型_文本 (参数 [2]), “, ”)) ' 参数数据类型。
    .如果真 (等于 (临时数组 [1], “ByRef”))
        .如果真 (不等于 (取数据类型 (参数 [2]), #.))
            赋值 (结果文本, 相加 (结果文本, “传址”)) ' 参数传址属性。
        .如果真结束
        
    .如果真结束
    赋值 (结果文本, 相加 (结果文本, “, ”))
    
    .如果 (并且 (全局选项.插入备注, 等于 (取数组成员数 (参数说明数组), 取数组成员数 (参数数组)))) ' 参数说明 。
        赋值 (结果文本, 相加 (结果文本, 参数说明数组 [计次变量], #换行符))
    .否则
        赋值 (结果文本, 相加 (结果文本, #换行符))
    .如果结束
    
.计次循环尾 ()
返回 (结果文本)

.子程序 插入数据类型, 空白型, , 在模板程序中插入一个数据类型。
.参数 数据类型信息, API数据类型信息, , 

.局部变量 类型名称, 文本型, , , 
.局部变量 成员数组, 文本型, , "0", 
.局部变量 中文成员名数组, 文本型, , "0", 
.局部变量 成员, 文本型, , "0", 
.局部变量 成员名, 文本型, , , 
.局部变量 成员数组数数组, 文本型, , "0", 
.局部变量 成员说明数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 

赋值 (类型名称, 数据类型信息.类型名称)
未知支持库函数_0 (#., “数据类型”, 类型名称) ' 复制一个新的数据类型。

.如果真 (全局选项.插入备注)
    .如果真 (不等于 (数据类型信息.类型名称_中文, “”))
        赋值 (数据类型信息.类型_说明, 相加 (数据类型信息.类型名称_中文, “;”, 数据类型信息.类型_说明))
    .如果真结束
    未知支持库函数_5 (#., 类型名称, #., 数据类型信息.类型_说明)
.如果真结束
 ' Left As Long,Top As Long,Right As Long,Bottom As Long,
赋值 (成员数组, 分割文本 (数据类型信息.类型成员表, , ))
.如果真 (不等于 (数据类型信息.数组, “”)) ' 成员是否有数组属性。
    赋值 (成员数组数数组, 分割文本 (数据类型信息.数组, , ))
    
.如果真结束
赋值 (成员说明数组, 分割文本 (数据类型信息.类型成员_说明, “~”, ))
赋值 (中文成员名数组, 分割文本 (数据类型信息.类型成员名_中文, , ))

.计次循环首 (取数组成员数 (成员数组), 计次变量)
    赋值 (成员, 分割文本 (成员数组 [计次变量], “ As ”, ))
    .如果 (并且 (全局选项.使用中文名, 等于 (取数组成员数 (中文成员名数组), 取数组成员数 (成员数组)))) ' 成员名。
        .如果 (不等于 (中文成员名数组 [计次变量], “”))
            赋值 (成员名, 中文成员名数组 [计次变量])
        .否则
            赋值 (成员名, 成员 [1])
        .如果结束
        
    .否则
        赋值 (成员名, 成员 [1])
    .如果结束
    
    .如果 (等于 (取数据类型 (成员 [2]), #.))
        未知支持库函数_0 (#., 相加 (类型名称, “.”, 成员 [2]), 成员名) ' 复制一个成员。
        未知支持库函数_5 (#., 相加 (类型名称, “.”, 成员名), #., “”)
    .否则
        未知支持库函数_0 (#., 相加 (类型名称, “.成员”), 成员名) ' 复制一个成员。
        未知支持库函数_5 (#., 相加 (类型名称, “.”, 成员名), #., 取数据类型 (成员 [2])) ' 成员数据类型。
    .如果结束
    
    .如果真 (等于 (取数组成员数 (成员数组数数组), 取数组成员数 (成员数组)))
        未知支持库函数_5 (#., 相加 (类型名称, “.”, 成员名), #., 成员数组数数组 [计次变量]) ' 成员数组属性。
        
    .如果真结束
    .如果真 (并且 (全局选项.插入备注, 等于 (取数组成员数 (成员说明数组), 取数组成员数 (成员数组))))
        未知支持库函数_5 (#., 相加 (类型名称, “.”, 成员名), #., 成员说明数组 [计次变量]) ' 成员说明 。
    .如果真结束
    
.计次循环尾 ()
未知支持库函数_2 (#., 相加 (类型名称, “.成员”))

.子程序 数据类型转文本, 文本型, , 
.参数 数据类型信息, API数据类型信息, , 

.局部变量 结果文本, 文本型, , , 
.局部变量 类型名称, 文本型, , , 
.局部变量 成员数组, 文本型, , "0", 
.局部变量 中文成员名数组, 文本型, , "0", 
.局部变量 成员, 文本型, , "0", 
.局部变量 成员名, 文本型, , , 
.局部变量 成员数组数数组, 文本型, , "0", 
.局部变量 成员说明数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 

 ' 数据类型 例程信息, 备注
 ' .成员 文件名, 文本型, , "5", 备注
赋值 (结果文本, “.数据类型 ”)
赋值 (类型名称, 数据类型信息.类型名称)
赋值 (结果文本, 相加 (结果文本, 类型名称, “, ”)) ' 数据类型名称。
.如果 (全局选项.插入备注) ' 数据类型说明 。
    .如果真 (不等于 (数据类型信息.类型名称_中文, “”))
        赋值 (数据类型信息.类型_说明, 相加 (数据类型信息.类型名称_中文, “;”, 数据类型信息.类型_说明))
    .如果真结束
    赋值 (结果文本, 相加 (结果文本, 数据类型信息.类型_说明, #换行符))
.否则
    赋值 (结果文本, 相加 (结果文本, #换行符))
.如果结束

 ' Left As Long,Top As Long,Right As Long,Bottom As Long,
.如果真 (不等于 (数据类型信息.数组, “”))
    赋值 (成员数组数数组, 分割文本 (数据类型信息.数组, , ))
.如果真结束
赋值 (成员数组, 分割文本 (数据类型信息.类型成员表, , ))
.如果真 (全局选项.插入备注)
    赋值 (成员说明数组, 分割文本 (数据类型信息.类型成员_说明, “~”, ))
.如果真结束
赋值 (中文成员名数组, 分割文本 (数据类型信息.类型成员名_中文, , ))

.计次循环首 (取数组成员数 (成员数组), 计次变量)
    赋值 (成员, 分割文本 (成员数组 [计次变量], “ As ”, ))
    .如果 (并且 (全局选项.使用中文名, 等于 (取数组成员数 (中文成员名数组), 取数组成员数 (成员数组))))
        .如果 (不等于 (中文成员名数组 [计次变量], “”))
            赋值 (成员名, 中文成员名数组 [计次变量])
        .否则
            赋值 (成员名, 成员 [1])
        .如果结束
        
    .否则
        赋值 (成员名, 成员 [1])
    .如果结束
    赋值 (结果文本, 相加 (结果文本, “    .成员 ”))
    赋值 (结果文本, 相加 (结果文本, 成员名, “, ”)) ' 成员名称。
    .如果 (等于 (取数组成员数 (成员数组数数组), 取数组成员数 (成员数组)))
        .如果 (不等于 (成员数组数数组 [计次变量], “”))
            赋值 (结果文本, 相加 (结果文本, 取数据类型_文本 (成员 [2]), “, , ”, #引号, 成员数组数数组 [计次变量], #引号, “, ”)) ' 成员有数组属性。
            
        .否则
            赋值 (结果文本, 相加 (结果文本, 取数据类型_文本 (成员 [2]), “, , , ”))
        .如果结束
        
    .否则
        赋值 (结果文本, 相加 (结果文本, 取数据类型_文本 (成员 [2]), “, , , ”)) ' 成员数据类型。
        
    .如果结束
    .如果 (等于 (取数组成员数 (成员说明数组), 取数组成员数 (成员数组)))
        赋值 (结果文本, 相加 (结果文本, 成员说明数组 [计次变量], #换行符)) ' 成员说明 。
    .否则
        赋值 (结果文本, 相加 (结果文本, #换行符))
    .如果结束
    
.计次循环尾 ()
返回 (结果文本)

.子程序 插入常量, 空白型, , 在模板程序中插入一个常量。
.参数 常量信息, API常量信息, , 

未知支持库函数_0 (#., “常量”, 常量信息.常量名称) ' 复制 一个常量。
.如果 (并且 (大于或等于 (取代码 (常量信息.常量值_十进制, ), #键0), 小于或等于 (取代码 (常量信息.常量值_十进制, ), #键9))) ' 常量值是否为数值型。
    未知支持库函数_5 (#., 常量信息.常量名称, #., 到数值 (常量信息.常量值_十进制))
    
.否则
    未知支持库函数_5 (#., 常量信息.常量名称, #., 常量信息.常量值_十进制)
.如果结束

.如果真 (全局选项.插入备注)
    未知支持库函数_5 (#., 常量信息.常量名称, #., 常量信息.常量说明) ' 常量说明。
.如果真结束


.子程序 常量转文本, 文本型, , 
.参数 常量信息, API常量信息, , 

.局部变量 结果文本, 文本型, , , 

 ' [.常量 数据类型库, "“Type”", 备注]
赋值 (结果文本, “.常量 ”)
赋值 (结果文本, 相加 (结果文本, 常量信息.常量名称, “, ”)) ' 常量名称。
.如果 (并且 (大于或等于 (取代码 (常量信息.常量值_十进制, ), #键0), 小于或等于 (取代码 (常量信息.常量值_十进制, ), #键9)))
    赋值 (结果文本, 相加 (结果文本, #引号, 常量信息.常量值_十进制, #引号)) ' 数值型常量值。
.否则
    赋值 (结果文本, 相加 (结果文本, #引号, #引号, 常量信息.常量值_十进制, #引号, #引号)) ' 文本型常量值。
.如果结束

.如果 (并且 (全局选项.插入备注, 不等于 (常量信息.常量说明, “”))) ' 常量说明。
    赋值 (结果文本, 相加 (结果文本, “, ”))
    赋值 (结果文本, 相加 (结果文本, 常量信息.常量说明, #换行符))
.否则
    赋值 (结果文本, 相加 (结果文本, #换行符))
.如果结束
返回 (结果文本)

.子程序 执行插入, 空白型, , 插入指定的API信息并退出程序。
.局部变量 返回信息, 文本型, , , 

未知支持库函数_2 (#., “DLL命令”)
未知支持库函数_2 (#., “数据类型”)
未知支持库函数_2 (#., “常量”)
未知支持库函数_4 (“删除”)
未知支持库函数_4 (“删除数据类型”)
未知支持库函数_13 (#模板程序, 假)

.子程序 取数据类型, 整数型, , 转换VB数据类型格式到易数据类型格式，并以数值格式返回。
.参数 VB数据类型, 文本型, , 

.判断开始 (等于 (VB数据类型, “Byte”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Integer”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Long”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Double”))
    返回 (#.)
.判断 (等于 (VB数据类型, “String”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Boolean”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Any”))
    返回 (#.)
.判断 (等于 (VB数据类型, “Variant”))
    返回 (#.)
.默认
    
.判断结束
返回 (#.)


.子程序 取数据类型_文本, 文本型, , 转换VB数据类型格式到易数据类型格式，并以文本格式返回。
.参数 VB数据类型, 文本型, , 

.判断开始 (等于 (VB数据类型, “Byte”))
    返回 (“字节型”)
.判断 (等于 (VB数据类型, “Integer”))
    返回 (“短整数型”)
.判断 (等于 (VB数据类型, “Long”))
    返回 (“整数型”)
.判断 (等于 (VB数据类型, “Double”))
    返回 (“双精度小数型”)
.判断 (等于 (VB数据类型, “String”))
    返回 (“文本型”)
.判断 (等于 (VB数据类型, “Boolean”))
    返回 (“逻辑型”)
.判断 (等于 (VB数据类型, “Any”))
    返回 (“整数型”)
.判断 (等于 (VB数据类型, “Variant”))
    返回 (“整数型”)
.默认
    
.判断结束
返回 (VB数据类型)


.窗口程序集 易例程窗口程序集, , , 

.程序集变量 程_例程文件号, 整数型, , , 
.程序集变量 程_例程信息数组, 例程信息, , "0", 保存所有例程的信息。
.子程序 _易语言例程窗口_创建完毕, 空白型, , 
置标题高度差 (易语言例程窗口, 32, 真)
赋值 (., _启动窗口..)
赋值 (程_例程文件号, 打开文件 (“DATA\example.dat”, #改读, #禁止读写))
填充例程名列表 ()

.子程序 填充例程名列表, 空白型, , 填充例程名到列表。
.参数 列表框, 列表框, , 

.局部变量 计次变量, 整数型, , , 

取全部例程信息 (程_例程信息数组)
清空 ()
.计次循环首 (取数组成员数 (程_例程信息数组), 计次变量)
    程_例程信息数组.加入项目 ( [计次变量], 文件名, 计次变量)
.计次循环尾 ()
.如果真 (不等于 (取项目数 (), 0))
    赋值 (.现行选中项, 0)
    _列表框_例程列表_列表项被选择 ()
.如果真结束


.子程序 取全部例程信息, 空白型, , 取全部的例程信息到数组。
.参数 例程信息, 例程信息, 数组, 

.局部变量 正则表达式, 未知类型0x60001, , , 
.局部变量 搜索结果数组, 未知类型0x60002, , "0", 
.局部变量 计次变量, 整数型, , , 

正则表达式.未知支持库函数_3 (“,(.+?),,<(.+?)>\r”, 假)
赋值 (搜索结果数组, 正则表达式.未知支持库函数_16 (全_例程信息数据))
.如果真 (不等于 (取数组成员数 (搜索结果数组), 0))
    重定义数组 (例程信息, 假, 取数组成员数 (搜索结果数组))
    .计次循环首 (取数组成员数 (搜索结果数组), 计次变量)
        赋值 (例程信息 [计次变量], 文件全路径名, 搜索结果数组.未知支持库函数_12 ( [计次变量], 全_例程信息数据, 2, ))
        赋值 (例程信息 [计次变量], 文件名, 取文件名 (例程信息 [计次变量], 文件全路径名))
        赋值 (例程信息 [计次变量], 函数集合, 搜索结果数组.未知支持库函数_12 ( [计次变量], 全_例程信息数据, 1, ))
    .计次循环尾 ()
.如果真结束


.子程序 提取DLL函数名, 整数型, , 提取出易源码中的DLL函数名。
.参数 源码路径, 文本型, , 
.参数 函数名, 文本型, 数组, 

.局部变量 源码数据, 字节集, , , 
.局部变量 DLL段, 字节集, , "0", 
.局部变量 索引, 整数型, , , 
.局部变量 临时段, 字节集, , "0", 
.局部变量 临时, 整数型, , , 
.局部变量 dll参数数, 字节集, , , 
.局部变量 DLL命令名, 文本型, , , 
.局部变量 长度, 字节集, , , 
.局部变量 函数索引, 整数型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 重复, 逻辑型, , , 

清除数组 (函数名)
赋值 (源码数据, 读入文件 (源码路径))

赋值 (DLL段, 分割字节集 (源码数据, { 0, 1, 69, 0, 0, 0, 0 }, )) ' 有参数的DLL声明都会有此标志。
.如果真 (大于 (取数组成员数 (DLL段), 1))
    .计次循环首 (相减 (取数组成员数 (DLL段), 1), 索引)
        赋值 (临时段, 分割字节集 (DLL段 [索引], { 0, 0, 0 }, ))
        .如果真 (大于 (取数组成员数 (临时段), 3))
            赋值 (临时, 取数组成员数 (临时段))
            赋值 (dll参数数, 取字节集右边 (临时段 [相减 (临时, 2)], 1))
            .如果 (等于 (取字节集长度 (临时段 [临时]), 相减 (相加 (相乘 (dll参数数 [1], 4), 5), 8))) ' 判断命令名所在位置，因为这里有两种可能。
                赋值 (DLL命令名)

.子程序 取易程序信息, 逻辑型, , 取易源程序的作者信息。
.参数 模块数据, 字节集, , 易模块或易源程序文件。
.参数 程序信息, 文本型, 数组, 0成员数组容器，依次存放 程序名称、程序备注、作者、邮政编码、地址、电话、传真、电子邮件、主页、其它信息、程序版本等11项信息。

.局部变量 内容位置, 整数型, , , 
.局部变量 内容长度, 整数型, , , 
.局部变量 索引, 整数型, , , 

.如果 (不等于 (模块数据, {  }))
    赋值 (内容位置, 265) ' E模块程序备注的开始位置。
    .计次循环首 (10, 索引)
        赋值 (内容位置, 相加 (内容位置, 内容长度, 4)) ' 4是记录长度的4个字节。
        赋值 (内容长度, 取字节集数据 (取字节集中间 (模块数据, 内容位置, 4), #整数型))
        加入成员 (程序信息, 到文本 (取字节集中间 (模块数据, 相加 (内容位置, 4), 内容长度)))
    .计次循环尾 ()
    赋值 (内容位置, 相加 (内容位置, 内容长度, 4))
    加入成员 (程序信息, 相加 (到文本 (取字节集数据 (取字节集中间 (模块数据, 内容位置, 4), #整数型)), “.”, 到文本 (取字节集数据 (取字节集中间 (模块数据, 相加 (内容位置, 4), 4), #整数型))))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 _列表框_例程列表_列表项被选择, 空白型, , 
.局部变量 计次变量, 整数型, , , 
.局部变量 函数名数组, 文本型, , "0", 
.局部变量 程序信息, 文本型, , "0", 
.局部变量 例程信息, 例程信息, , , 

赋值 (例程信息, 程_例程信息数组 [.取项目数值 (.现行选中项)])
赋值 (函数名数组, 分割文本 (例程信息.函数集合, , ))
清空 ()
.计次循环首 (取数组成员数 (函数名数组), 计次变量)
    .如果真 (不等于 (删全部空 (函数名数组 [计次变量]), “”))
        函数名数组.加入项目 ( [计次变量], )
    .如果真结束
    
.计次循环尾 ()

.如果真 (取易程序信息 (读入文件 (例程信息.文件全路径名), 程序信息))
    赋值 (.内容, 程序信息 [2])
    赋值 (.内容, 程序信息 [3])
    赋值 (.标题, 程序信息 [8])
    赋值 (.电子信箱地址, 程序信息 [8])
    赋值 (.标题, 程序信息 [9])
    赋值 (.Internet地址, 程序信息 [9])
.如果真结束


.子程序 _按钮_添加_被单击, 空白型, , 
.局部变量 文件名, 文本型, , , 
.局部变量 文件名数组, 文本型, , "0", 

赋值 (文件名, 打开对话框 (取窗口句柄 (), “选择易程序：”, , “易程序(*.e)|*.e”, , 1))
.如果真 (不等于 (文件名, “”))
    赋值 (文件名数组, 分割文本 (文件名, , ))
    .如果真 (不等于 (取数组成员数 (文件名数组), 0))
        保存例程信息 (文件名数组)
    .如果真结束
    
.如果真结束


.子程序 保存例程信息, 空白型, , 添加保存例程信息到文件并更新。
.参数 匿名参数_1906, 文本型, 数组, 

.局部变量 函数集合, 文本型, , , 
.局部变量 函数名数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 添加成功例程数, 整数型, , , 
.局部变量 重复例程数, 整数型, , , 
.局部变量 添加失败例程数, 整数型, , , 

置等待鼠标 ()
移到文件尾 (程_例程文件号)
.计次循环首 (取数组成员数 (匿名参数_1906), 计次变量)
    .如果 (等于 (是否有重复例程 (匿名参数_1906 [计次变量]), 假))
        提取DLL函数名 (匿名参数_1906 [计次变量], 函数名数组)
        .如果 (不等于 (取数组成员数 (函数名数组), 0))
            .计次循环首 (取数组成员数 (函数名数组), 计次变量2)
                赋值 (函数集合, 相加 (函数集合, 函数名数组 [计次变量2], “,”))
            .计次循环尾 ()
            赋值 (函数集合, 相加 (“,”, 函数集合, “,”, “<”, 匿名参数_1906 [计次变量], “>”))
            写文本行 (程_例程文件号, 函数集合) ' 添加一条例程数据。
            赋值 (函数集合, “”)
            赋值 (添加成功例程数, 相加 (添加成功例程数, 1))
            
        .否则
            赋值 (添加失败例程数, 相加 (添加失败例程数, 1))
        .如果结束
        
    .否则
        赋值 (重复例程数, 相加 (重复例程数, 1))
    .如果结束
    
.计次循环尾 ()
移到文件首 (程_例程文件号)
赋值 (全_例程信息数据, 读入文本 (程_例程文件号, )) ' 更新例程信息数据。
恢复鼠标 ()
填充例程名列表 ()
_启动窗口.置文本 (., 4, 相加 (“易语言例程：：”, 到文本 (取易语言例程数 ())))
信息框 (相加 (“成功添加例程”, 到文本 (添加成功例程数), “个”, #换行符, “重复添加例程”, 到文本 (重复例程数), “个”, #换行符, “例程添加失败”, 到文本 (添加失败例程数), “个”), #信息图标, .)


.子程序 是否有重复例程, 逻辑型, , 判断是否有重复的例程。
.参数 全路径名, 文本型, , 

.如果真 (等于 (寻找文本 (全_例程信息数据, 相加 (“<”, 全路径名, “>”), , 真), -1))
    返回 (假)
.如果真结束
返回 (真)

.子程序 _易语言例程窗口_将被销毁, 空白型, , 
关闭文件 (程_例程文件号)

.子程序 _按钮_关闭_被单击, 空白型, , 
销毁 ()

.子程序 _按钮_搜索_被单击, 空白型, , 搜索添加例程。
.局部变量 路径名, 文本型, , , 
.局部变量 文件名数组, 文本型, , "0", 
.局部变量 停止搜索, 逻辑型, 静态, , 

赋值 (停止搜索, 假)
.如果真 (等于 (.标题, “停止搜索”))
    赋值 (停止搜索, 真)
    赋值 (.标题, “搜索例程”)
    返回 ()
.如果真结束
赋值 (路径名, 未知支持库函数_2 (“选择包含易程序的目录：”, ))
.如果真 (不等于 (路径名, “”))
    赋值 (.标题, “停止搜索”)
    查找磁盘文件 (文件名数组, 路径名, “*.e”, 停止搜索)
    .如果真 (不等于 (取数组成员数 (文件名数组), 0))
        保存例程信息 (文件名数组)
    .如果真结束
    赋值 (.标题, “搜索例程”)
.如果真结束


.子程序 _列表框_例程列表_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.现行选中项, -1))
    弹出菜单 ()
.如果真结束


.子程序 _打开_被选择, 空白型, , 打开例程。
未知支持库函数_6 (#, 程_例程信息数组 [.取项目数值 (.现行选中项)].文件全路径名, , )

.子程序 _查看所在目录_被选择, 空白型, , 
运行 (相加 (“explorer.exe /select,”, 程_例程信息数组 [.取项目数值 (.现行选中项)].文件全路径名), 假, )

.子程序 _另存为_被选择, 空白型, , 
.如果真 (打开 ())
    复制文件 (程_例程信息数组 [.取项目数值 (.现行选中项)].文件全路径名, .文件名)
.如果真结束


.子程序 _全部删除_被选择, 空白型, , 
清空 ()
清空 ()
赋值 (全_例程信息数据, “”)
移到文件首 (程_例程文件号)
删除数据 (程_例程文件号, 取文件长度 (程_例程文件号))

.子程序 _删除_被选择, 空白型, , 删除例程。
.局部变量 项目数值, 整数型, , , 

赋值 (项目数值, .取项目数值 (.现行选中项))
赋值 (全_例程信息数据, 子文本替换 (全_例程信息数据, 相加 (“,”, 程_例程信息数组 [项目数值], 函数集合, “,,<”, 程_例程信息数组 [项目数值], 文件全路径名, “>”, #换行符), “”, , , 真))
移到文件首 (程_例程文件号)
删除数据 (程_例程文件号, 取文件长度 (程_例程文件号))
写出文本 (程_例程文件号, 全_例程信息数据)
.删除项目 (.现行选中项)


.窗口程序集 新增函数窗口程序集, , , 

.程序集变量 程_新函数信息数组, API函数信息, , "0", 
.程序集变量 程_新数据类型信息数组, API数据类型信息, , "0", 
.程序集变量 程_新常量信息数组, API常量信息, , "0", 
.子程序 提取API信息, 整数型, , 从指定文本中提取API函数、数据类型及常量信息，仅支持VB格式。
.参数 声明文本, 文本型, , 
.参数 函数信息, API函数信息, 数组, 
.参数 数据类型信息, API数据类型信息, 数组, 
.参数 常量信息, API常量信息, 数组, 

.局部变量 清除注释表达式, 未知类型0x60001, , , 
.局部变量 清除尾部空格表达式, 未知类型0x60001, , , 
.局部变量 VB断行符处理表达式, 未知类型0x60001, , , 
.局部变量 取VB声明表达式, 未知类型0x60001, , , 
.局部变量 VB声明数组, 未知类型0x60002, , "0", 
.局部变量 取数据类型表达式, 未知类型0x60001, , , 
.局部变量 类型声明数组, 未知类型0x60002, , "0", 
.局部变量 取常量表达式, 未知类型0x60001, , , 
.局部变量 常量数组, 未知类型0x60002, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 类型成员表, 文本型, , , 

置等待鼠标 ()
清除注释表达式.未知支持库函数_3 (“'.+?\r\n”, )
赋值 (声明文本, 清除注释表达式.未知支持库函数_15 (声明文本, #换行符, 1, , 真, 真))
清除尾部空格表达式.未知支持库函数_3 (“ +?\r\n”, )
赋值 (声明文本, 清除尾部空格表达式.未知支持库函数_15 (声明文本, #换行符, 1, , 真, 真))
VB断行符处理表达式.未知支持库函数_3 (“ +_\r\n +”, )
赋值 (声明文本, 清除尾部空格表达式.未知支持库函数_15 (声明文本, “ ”, 1, , 真, 真))

 ' 提取函数信息。
取VB声明表达式.未知支持库函数_3 (相加 (“((Declare Sub )|(Declare Function ))(.+?) Lib ”, #引号, “(.+?)”, #引号, “ ((Alias ”, #引号, “(.+?)”, #引号, “ )|())\((.+?)\)(( As ([a-zA-Z]+)$)|($))”), )
赋值 (VB声明数组, 取VB声明表达式.未知支持库函数_16 (声明文本))
重定义数组 (函数信息, 假, 取数组成员数 (VB声明数组))
.计次循环首 (取数组成员数 (VB声明数组), 计次变量)
    赋值 (函数信息 [计次变量], 命令名, VB声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 4, ))
    赋值 (函数信息 [计次变量], 库名, VB声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 5, ))
    赋值 (函数信息 [计次变量], 别名, VB声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 8, ))
    赋值 (函数信息 [计次变量], 参数表, VB声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 10, ))
    赋值 (函数信息 [计次变量], 返回值, VB声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 13, ))
.计次循环尾 ()

 ' 提取数据类型信息。
取数据类型表达式.未知支持库函数_3 (“Type (.+?)\r\n(.+?)End Type”, )
赋值 (类型声明数组, 取数据类型表达式.未知支持库函数_16 (声明文本))
重定义数组 (数据类型信息, 假, 取数组成员数 (类型声明数组))
.计次循环首 (取数组成员数 (类型声明数组), 计次变量)
    赋值 (数据类型信息 [计次变量], 类型名称, 删首尾空 (类型声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 1, )))
    赋值 (数据类型信息 [计次变量], 类型成员表, 子文本替换 (类型声明数组.未知支持库函数_12 ( [计次变量], 声明文本, 2, ), “  ”, “”, , , 真))
    赋值 (类型成员表, 删首尾空 (子文本替换 (数据类型信息 [计次变量], 类型成员表, #换行符, “,”, , , 真)))
    赋值 (数据类型信息 [计次变量], 数组, 取数据类型数组集合 (类型成员表))
    赋值 (数据类型信息 [计次变量], 类型成员表, 类型成员表)
    
.计次循环尾 ()

 ' 提取常量信息。
取常量表达式.未知支持库函数_3 (“Const (.+?) = (.+?)\r\n”, )
赋值 (常量数组, 取常量表达式.未知支持库函数_16 (声明文本))
重定义数组 (常量信息, 假, 取数组成员数 (常量数组))
.计次循环首 (取数组成员数 (常量数组), 计次变量)
    赋值 (常量信息 [计次变量], 常量名称, 删首尾空 (常量数组.未知支持库函数_12 ( [计次变量], 声明文本, 1, )))
    赋值 (常量信息 [计次变量], 常量值_十六进制, 删首尾空 (常量数组.未知支持库函数_12 ( [计次变量], 声明文本, 2, )))
.计次循环尾 ()
恢复鼠标 ()
返回 (相加 (取数组成员数 (函数信息), 取数组成员数 (数据类型信息), 取数组成员数 (常量信息)))

.子程序 _编辑框1_内容被改变, 空白型, , 
.局部变量 总数, 整数型, , , 
.局部变量 计次变量, 整数型, , , 

清空 ()
赋值 (总数, 提取API信息 (相加 (.内容, #换行符), 程_新函数信息数组, 程_新数据类型信息数组, 程_新常量信息数组))
.如果真 (等于 (总数, 0))
    返回 ()
.如果真结束

“**函数**”.加入项目 ()
.计次循环首 (取数组成员数 (程_新函数信息数组), 计次变量) ' 函数。
    程_新函数信息数组.加入项目 ( [计次变量], 命令名, )
.计次循环尾 ()
“**数据类型**”.加入项目 ()
.计次循环首 (取数组成员数 (程_新数据类型信息数组), 计次变量)
    程_新数据类型信息数组.加入项目 ( [计次变量], 类型名称, )
.计次循环尾 ()
“**常量**”.加入项目 ()
.计次循环首 (取数组成员数 (程_新常量信息数组), 计次变量)
    程_新常量信息数组.加入项目 ( [计次变量], 常量名称, )
.计次循环尾 ()

.子程序 十六进制API常量值转十进制, 文本型, , 可以转换5种类型的常量值(&H200&、&H8000000、27000、1338&、"MNBF")
.参数 十六进制, 文本型, , 

.局部变量 十六进制值, 文本型, , , 

 ' Const JOY_BUTTON10 = &H200&
 ' Const JOY_CAL_READVONLY = &H8000000
 ' Const JOY_POVLEFT = 27000
 ' Const ERROR_INVALID_SECURITY_DESCR = 1338&
 ' Const MS_NBF = "MNBF"
 ' Const NERR_InvalidComputer = (NERR_BASE + 251)
 ' Const pshHelp = psh15
 ' Const KEY_EXECUTE = ((KEY_READ) And (Not SYNCHRONIZE))
赋值 (十六进制值, 删全部空 (十六进制))
.判断开始 (等于 (取文本左边 (十六进制值, 2), “&H”))
    赋值 (十六进制值, 子文本替换 (十六进制值, “&H”, “”, , , 真))
    赋值 (十六进制值, 子文本替换 (十六进制值, “&”, “”, , , 真))
    赋值 (十六进制值, 取十进制文本 (十六进制值, 16))
    
.判断 (等于 (取文本右边 (十六进制值, 1), “&”))
    赋值 (十六进制值, 子文本替换 (十六进制值, “&”, “”, , , 真))
    
.判断 (等于 (取文本左边 (十六进制值, 1), #引号))
    赋值 (十六进制值, 子文本替换 (十六进制值, #引号, “”, , , 真))
.默认
    
.判断结束
返回 (十六进制值)


.子程序 _按钮_关闭_被单击, 空白型, , 
销毁 ()

.子程序 _按钮_全部添加_被单击, 空白型, , 添加新增的API数据到数据库。
.局部变量 计次变量, 整数型, , , 
.局部变量 成功添加函数数, 整数型, , , 
.局部变量 成功添加数据类型数, 整数型, , , 
.局部变量 成功添加常量数, 整数型, , , 

.如果真 (小于或等于 (取项目数 (), 3))
    信息框 (“没有要添加的函数、数据类型、常量!”, #信息图标, .)
    返回 ()
.如果真结束
置等待鼠标 ()

 ' 添加函数。
置当前库 (#函数数据库)
.计次循环首 (取数组成员数 (程_新函数信息数组), 计次变量)
    到首记录 ()
    .如果真 (等于 (索引查找 (程_新函数信息数组 [计次变量], 命令名), 假)) ' 判断是否已经存在。
        加记录 (程_新函数信息数组 [计次变量], 命令名, 程_新函数信息数组 [计次变量], 库名, 程_新函数信息数组 [计次变量], 别名, 未知支持库函数_3 (到字节集 (程_新函数信息数组 [计次变量], 参数表), 程_新函数信息数组 [计次变量], 命令名, #), 程_新函数信息数组 [计次变量], 返回值)
        写 (#是否为新增, 真)
        _启动窗口.加入项目 (., 程_新函数信息数组 [计次变量], 命令名, )
        赋值 (成功添加函数数, 相加 (成功添加函数数, 1))
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (成功添加函数数, 0))
    更新索引 ()
    _启动窗口.置文本 (., 1, 相加 (“函数：”, 到文本 (取记录数 ())))
    
.如果真结束

 ' 添加数据类型。
置当前库 (#数据类型库)
.计次循环首 (取数组成员数 (程_新数据类型信息数组), 计次变量)
    到首记录 ()
    .如果真 (等于 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (程_新数据类型信息数组 [计次变量], 类型名称))), 假))
        加记录 (程_新数据类型信息数组 [计次变量], 类型名称, 程_新数据类型信息数组 [计次变量], 类型成员表, , , , , 程_新数据类型信息数组 [计次变量], 数组)
        写 (#是否为新增, 真)
        _启动窗口.加入项目 (., 程_新数据类型信息数组 [计次变量], 类型名称, )
        赋值 (成功添加数据类型数, 相加 (成功添加数据类型数, 1))
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (成功添加数据类型数, 0))
    _启动窗口.置文本 (., 2, 相加 (“数据类型：”, 到文本 (取记录数 ())))
    
.如果真结束

 ' 添加常量。
.计次循环首 (取数组成员数 (程_新常量信息数组), 计次变量)
    置当前库 (#常量数据库)
    到首记录 ()
    .如果真 (等于 (索引查找 (程_新常量信息数组 [计次变量], 常量名称), 假))
        加记录 (程_新常量信息数组 [计次变量], 常量名称, 程_新常量信息数组 [计次变量], 常量值_十六进制, 十六进制API常量值转十进制 (程_新常量信息数组 [计次变量], 常量值_十六进制))
        写 (#是否为新增, 真)
        赋值 (成功添加常量数, 相加 (成功添加常量数, 1))
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (成功添加常量数, 0))
    更新索引 ()
    _启动窗口.置文本 (., 3, 相加 (“常量：”, 到文本 (取记录数 ())))
    
.如果真结束

恢复鼠标 ()
信息框 (相加 (“成功添加函数：”, 到文本 (成功添加函数数), #换行符, “成功添加数据类型数：”, 到文本 (成功添加数据类型数), #换行符, “成功添加常量数：”, 到文本 (成功添加常量数)), #信息图标, .)


.子程序 _新增函数窗口_创建完毕, 空白型, , 
置标题高度差 (新增函数窗口, 32, 真)
赋值 (.内容, “请将VB声明(如包含API声明的VB源程序)文本复制到此编辑框，让程序自动分析后，单击添加按钮添加。”)
赋值 (.被选择字符数, -1)

.子程序 取数据类型数组集合, 文本型, , 取出API数据类型的数组信息。成功返回以“,”分隔的文本，失败返回空文本。
.参数 数据类型成员表, 文本型, 参考, 注：此参数有参考属性。

.局部变量 正则表达式1, 未知类型0x60001, , , 
.局部变量 正则表达式2, 未知类型0x60001, , , 
.局部变量 搜索结果, 未知类型0x60002, , , 
.局部变量 数组维数, 文本型, , , 
.局部变量 成员数组, 文本型, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 成员, 文本型, , , 
.局部变量 数组集合, 文本型, , , 

赋值 (成员数组, 分割文本 (数据类型成员表, , ))
正则表达式1.未知支持库函数_3 (“\((.+?)\)”, )
正则表达式2.未知支持库函数_3 (“ \* (.+)”, )
.计次循环首 (取数组成员数 (成员数组), 计次变量)
    赋值 (成员, 删首尾空 (成员数组 [计次变量]))
    赋值 (搜索结果, 正则表达式1.未知支持库函数_7 (成员, 1, ))
    .如果真 (搜索结果.未知支持库函数_10 ())
        赋值 (搜索结果, 正则表达式2.未知支持库函数_7 (成员, 1, ))
    .如果真结束
    
    .如果 (等于 (搜索结果.未知支持库函数_10 (), 假))
        赋值 (数组维数, 搜索结果.未知支持库函数_12 (成员, 1, ))
        .如果 (等于 (到文本 (到数值 (数组维数)), 数组维数)) ' 判断是否为数值型 。
            赋值 (数组集合, 相加 (数组集合, 数组维数, “,”))
        .否则
            置当前库 (#常量数据库)
            到首记录 ()
            .如果真 (索引查找 (数组维数))
                .如果真 (等于 (到文本 (到数值 (读 (#常量值_十进制))), 读 (#常量值_十进制)))
                    赋值 (数组集合, 相加 (数组集合, 读 (#常量值_十进制), “,”))
                .如果真结束
                
            .如果真结束
            
        .如果结束
        
    .否则
        赋值 (数组集合, 相加 (数组集合, “,”))
    .如果结束
    
.计次循环尾 ()
.如果 (等于 (子文本替换 (数组集合, “,”, “”, , , 真), “”))
    返回 (“”)
.否则
    赋值 (数据类型成员表, 正则表达式1.未知支持库函数_15 (数据类型成员表, “”, 1, , 真, 真))
    正则表达式2.未知支持库函数_3 (“ \* (.+?),”, )
    赋值 (数据类型成员表, 正则表达式2.未知支持库函数_15 (数据类型成员表, “,”, 1, , 真, 真))
    返回 (数组集合)
.如果结束


.子程序 _新增函数窗口_将被销毁, 空白型, , 
_启动窗口.置当前数据库 ()


.窗口程序集 导入导出窗口程序集, , , 

.程序集变量 程_函数信息数组, API函数信息, , "0", 
.程序集变量 程_数据类型信息数组, API数据类型信息, , "0", 
.程序集变量 程_常量信息数组, API常量信息, , "0", 
.程序集变量 程_是否为导入, 逻辑型, , , 
.子程序 _导入导出窗口_创建完毕, 空白型, , 
置标题高度差 (导入导出窗口, 32, 真)
赋值 (程_是否为导入, _启动窗口..选中)
赋值 (_启动窗口..选中, 假)
.如果真 (程_是否为导入)
    赋值 (.现行子夹, #子夹_导入开始)
    赋值 (.禁止, 真)
.如果真结束


.子程序 _按钮_下一步_被单击, 空白型, , 
置等待鼠标 ()
.判断开始 (等于 (.现行子夹, #子夹_导出开始))
    导出API信息 ()
    赋值 (.现行子夹, #子夹_函数)
.判断 (等于 (.现行子夹, #子夹_导入开始))
    导入API信息 ()
    赋值 (.现行子夹, #子夹_函数)
.判断 (或者 (等于 (.现行子夹, #子夹_函数), 等于 (.现行子夹, #子夹_数据类型)))
    赋值 (.禁止, 假)
    赋值 (.现行子夹, 相加 (.现行子夹, 1))
.判断 (大于或等于 (.现行子夹, #子夹_常量))
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
    .如果 (程_是否为导入)
        赋值 (.现行子夹, #子夹_导入结束)
    .否则
        赋值 (.现行子夹, #子夹_导出结束)
    .如果结束
    
.默认
    
.判断结束
恢复鼠标 ()

.子程序 _按钮_上一步_被单击, 空白型, , 
.判断开始 (等于 (.现行子夹, #子夹_数据类型))
    赋值 (.禁止, 真)
.判断 (等于 (.现行子夹, #子夹_导出结束))
    赋值 (.禁止, 假)
    
.判断 (等于 (.现行子夹, #子夹_导入结束))
    赋值 (.禁止, 假)
    赋值 (.现行子夹, 相减 (.现行子夹, 1))
.默认
    
.判断结束
赋值 (.现行子夹, 相减 (.现行子夹, 1))

.子程序 导出API信息, 空白型, , 从数据库中读取可以导出的API信息。
置当前库 (#函数数据库)
读取导入导出API信息 ()

置当前库 (#数据类型库)
读取导入导出API信息 ()

置当前库 (#常量数据库)
读取导入导出API信息 ()


.子程序 导入API信息, 逻辑型, , 解压并读取API信息。
.局部变量 解压目录, 文本型, , , 

删除目录 (解压目录)
创建目录 (相加 (未知支持库函数_7 (#), “Eapi\”))
赋值 (解压目录, 相加 (未知支持库函数_7 (#), “Eapi\”))
.如果真 (等于 (.未知支持库函数_2 (.内容, 解压目录), 0))
    返回 (假)
.如果真结束

打开 (相加 (解压目录, #函数数据库), , , , , , )
读取导入导出API信息 ()
关闭 (取当前库 ())

打开 (相加 (解压目录, #数据类型库), , , , , , )
读取导入导出API信息 ()
关闭 (取当前库 ())

打开 (相加 (解压目录, #常量数据库), , , , , , )
读取导入导出API信息 ()
关闭 (取当前库 ())

删除目录 (解压目录)
返回 (真)

.子程序 _导入导出窗口_将被销毁, 空白型, , 
置当前数据库 ()

.子程序 _选择列表框1_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_函数信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _选择列表框2_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_函数信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _选择列表框3_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_数据类型信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _选择列表框4_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_数据类型信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _选择列表框5_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_常量信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _选择列表框6_列表项被选择, 空白型, , 
.局部变量 当前索引, 整数型, , , 

赋值 (当前索引, .现行选中项)
赋值 (程_常量信息数组 [当前索引.取项目数值 ()].导入导出, 当前索引.是否被选中 ())

.子程序 _按钮_浏览1_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (.内容, .文件名)
    赋值 (.禁止, 假)
.如果真结束


.子程序 _按钮_浏览2_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (.内容, .文件名)
.如果真结束


.子程序 _按钮_完成_被单击, 空白型, , 
置等待鼠标 ()
.如果 (程_是否为导入)
    .如果真 (等于 (导入数据库 (), 假))
        信息框 (“没有数据被导入!”, #信息图标, .)
    .如果真结束
    
.否则
    .如果真 (等于 (.内容, “”))
        信息框 (“请选择欲保存的文件名!”, #信息图标, .)
        返回 ()
    .如果真结束
    .如果真 (等于 (导出数据到文件 (.内容), 假))
        信息框 (“导出数据失败!”, #信息图标, .)
    .如果真结束
    
.如果结束
恢复鼠标 ()
销毁 ()

.子程序 _按钮_关闭_被单击, 空白型, , 
销毁 ()

.子程序 导入数据库, 逻辑型, , 导入API数据到数据库。
.局部变量 计次变量, 整数型, , , 
.局部变量 成功导入函数, 整数型, , , 记录成功导入的数目。
.局部变量 成功导入数据类型, 整数型, , , 
.局部变量 成功导入常量, 整数型, , , 
.局部变量 需要更新索引, 逻辑型, , , 

置当前库 (#函数数据库)
.计次循环首 (取数组成员数 (程_函数信息数组), 计次变量)
    .如果真 (程_函数信息数组 [计次变量], 导入导出)
        到首记录 ()
        .如果 (程_函数信息数组 [计次变量], 是否被修改)
            索引查找 (程_函数信息数组 [计次变量], 命令名)
            修改 (程_函数信息数组 [计次变量], 命令名_中文, 程_函数信息数组 [计次变量], 命令名_说明, 程_函数信息数组 [计次变量], 参数名_中文, 程_函数信息数组 [计次变量], 参数_说明, 程_函数信息数组 [计次变量], 返回值_说明, 程_函数信息数组 [计次变量], 其它说明, 程_函数信息数组 [计次变量], 是否被修改, )
            赋值 (成功导入函数, 相加 (成功导入函数, 1))
        .否则
            .如果真 (等于 (索引查找 (程_函数信息数组 [计次变量], 命令名), 假))
                加记录 (程_函数信息数组 [计次变量], 命令名, 程_函数信息数组 [计次变量], 库名, 程_函数信息数组 [计次变量], 别名, 未知支持库函数_3 (到字节集 (程_函数信息数组 [计次变量], 参数表), 程_函数信息数组 [计次变量], 命令名, #), 程_函数信息数组 [计次变量], 返回值, 程_函数信息数组 [计次变量], 命令名_中文, 程_函数信息数组 [计次变量], 命令名_说明, 程_函数信息数组 [计次变量], 参数名_中文, 程_函数信息数组 [计次变量], 参数_说明, 程_函数信息数组 [计次变量], 返回值_说明, 程_函数信息数组 [计次变量], 其它说明, , 程_函数信息数组 [计次变量], 是否为新增)
                _启动窗口.加入项目 (., 程_函数信息数组 [计次变量], 命令名, )
                赋值 (成功导入函数, 相加 (成功导入函数, 1))
                赋值 (需要更新索引, 真)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
.如果真 (需要更新索引)
    更新索引 ()
    赋值 (需要更新索引, 假)
.如果真结束

置当前库 (#数据类型库)
.计次循环首 (取数组成员数 (程_数据类型信息数组), 计次变量)
    .如果真 (程_数据类型信息数组 [计次变量], 导入导出)
        到首记录 ()
        .如果 (程_数据类型信息数组 [计次变量], 是否被修改)
            查找 (等于 (到大写 (读 (#类型名称)), 到大写 (程_数据类型信息数组 [计次变量], 类型名称)))
            修改 (程_数据类型信息数组 [计次变量], 类型名称_中文, 程_数据类型信息数组 [计次变量], 类型_说明, 程_数据类型信息数组 [计次变量], 类型成员名_中文, 程_数据类型信息数组 [计次变量], 类型成员_说明, , 程_数据类型信息数组 [计次变量], 是否被修改, )
            赋值 (成功导入数据类型, 相加 (成功导入数据类型, 1))
        .否则
            .如果真 (等于 (查找 (等于 (到大写 (读 (#类型名称)), 到大写 (程_数据类型信息数组 [计次变量], 类型名称))), 假))
                加记录 (程_数据类型信息数组 [计次变量], 类型名称, 程_数据类型信息数组 [计次变量], 类型成员表, 程_数据类型信息数组 [计次变量], 类型名称_中文, 程_数据类型信息数组 [计次变量], 类型_说明, 程_数据类型信息数组 [计次变量], 类型成员名_中文, 程_数据类型信息数组 [计次变量], 类型成员_说明, 程_数据类型信息数组 [计次变量], 数组, , 程_数据类型信息数组 [计次变量], 是否为新增)
                _启动窗口.加入项目 (., 程_数据类型信息数组 [计次变量], 类型名称, )
                赋值 (成功导入数据类型, 相加 (成功导入数据类型, 1))
                赋值 (需要更新索引, 真)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
.如果真 (需要更新索引)
    更新索引 ()
    赋值 (需要更新索引, 假)
.如果真结束

置当前库 (#常量数据库)
.计次循环首 (取数组成员数 (程_常量信息数组), 计次变量)
    .如果真 (程_常量信息数组 [计次变量], 导入导出)
        到首记录 ()
        .如果 (程_常量信息数组 [计次变量], 是否被修改)
            索引查找 (程_常量信息数组 [计次变量], 常量名称)
            修改 (程_常量信息数组 [计次变量], 常量值_十进制, 程_常量信息数组 [计次变量], 常量说明, 程_常量信息数组 [计次变量], 是否被修改, )
            赋值 (成功导入常量, 相加 (成功导入常量, 1))
        .否则
            .如果真 (等于 (索引查找 (程_常量信息数组 [计次变量], 常量名称), 假))
                加记录 (程_常量信息数组 [计次变量], 常量名称, 程_常量信息数组 [计次变量], 常量值_十六进制, 程_常量信息数组 [计次变量], 常量值_十进制, 程_常量信息数组 [计次变量], 常量说明, , 程_常量信息数组 [计次变量], 是否为新增)
                赋值 (成功导入常量, 相加 (成功导入常量, 1))
                赋值 (需要更新索引, 真)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
.如果真 (需要更新索引)
    更新索引 ()
    赋值 (需要更新索引, 假)
.如果真结束

.如果真 (等于 (相加 (成功导入函数, 成功导入数据类型, 成功导入常量), 0))
    返回 (假)
.如果真结束
信息框 (相加 (“成功导入函数：”, 到文本 (成功导入函数), #换行符, “成功导入数据类型：”, 到文本 (成功导入数据类型), #换行符, “成功导入常量：”, 到文本 (成功导入常量)), #信息图标, .)
返回 (真)

.子程序 导出数据到文件, 逻辑型, , 导出API数据到文件。
.参数 文件名, 文本型, , 

.局部变量 临时目录, 文本型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 返回值, 逻辑型, , , 
.局部变量 匿名局部变量_2448, 空白型, , , 
.局部变量 成功导出函数, 整数型, , , 记录被导出的数目。
.局部变量 成功导出数据类型, 整数型, , , 
.局部变量 成功导出常量, 整数型, , , 

删除目录 (临时目录)
创建目录 (相加 (未知支持库函数_7 (#), “Eapi\”))
赋值 (临时目录, 相加 (未知支持库函数_7 (#), “Eapi\”))

置当前库 (#函数数据库)
复制结构 (相加 (临时目录, #函数数据库), )
打开 (相加 (临时目录, #函数数据库), , , , , , )
.计次循环首 (取数组成员数 (程_函数信息数组), 计次变量)
    .如果真 (程_函数信息数组 [计次变量], 导入导出)
        加记录 (程_函数信息数组 [计次变量], 命令名, 程_函数信息数组 [计次变量], 库名, 程_函数信息数组 [计次变量], 别名, 到字节集 (程_函数信息数组 [计次变量], 参数表), 程_函数信息数组 [计次变量], 返回值, 程_函数信息数组 [计次变量], 命令名_中文, 程_函数信息数组 [计次变量], 命令名_说明, 程_函数信息数组 [计次变量], 参数名_中文, 程_函数信息数组 [计次变量], 参数_说明, 程_函数信息数组 [计次变量], 返回值_说明, 程_函数信息数组 [计次变量], 其它说明, 程_函数信息数组 [计次变量], 是否被修改, 程_函数信息数组 [计次变量], 是否为新增)
        赋值 (成功导出函数, 相加 (成功导出函数, 1))
    .如果真结束
    
.计次循环尾 ()
关闭 (取当前库 ())

置当前库 (#数据类型库)
复制结构 (相加 (临时目录, #数据类型库), )
打开 (相加 (临时目录, #数据类型库), , , , , , )
.计次循环首 (取数组成员数 (程_数据类型信息数组), 计次变量)
    .如果真 (程_数据类型信息数组 [计次变量], 导入导出)
        加记录 (程_数据类型信息数组 [计次变量], 类型名称, 程_数据类型信息数组 [计次变量], 类型成员表, 程_数据类型信息数组 [计次变量], 类型名称_中文, 程_数据类型信息数组 [计次变量], 类型_说明, 程_数据类型信息数组 [计次变量], 类型成员名_中文, 程_数据类型信息数组 [计次变量], 类型成员_说明, 程_数据类型信息数组 [计次变量], 数组, 程_数据类型信息数组 [计次变量], 是否被修改, 程_数据类型信息数组 [计次变量], 是否为新增)
        赋值 (成功导出数据类型, 相加 (成功导出数据类型, 1))
    .如果真结束
    
.计次循环尾 ()
关闭 (取当前库 ())

置当前库 (#常量数据库)
复制结构 (相加 (临时目录, #常量数据库), )
打开 (相加 (临时目录, #常量数据库), , , , , , )
.计次循环首 (取数组成员数 (程_常量信息数组), 计次变量)
    .如果真 (程_常量信息数组 [计次变量], 导入导出)
        加记录 (程_常量信息数组 [计次变量], 常量名称, 程_常量信息数组 [计次变量], 常量值_十六进制, 程_常量信息数组 [计次变量], 常量值_十进制, 程_常量信息数组 [计次变量], 常量说明, 程_常量信息数组 [计次变量], 是否被修改, 程_常量信息数组 [计次变量], 是否为新增)
        赋值 (成功导出常量, 相加 (成功导出常量, 1))
    .如果真结束
    
.计次循环尾 ()
关闭 (取当前库 ())

.如果真 (等于 (相加 (成功导出函数, 成功导出常量, 成功导出数据类型), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (临时目录.未知支持库函数_0 (文件名), 0))
    返回 (假)
.如果真结束
删除目录 (临时目录)
信息框 (相加 (“成功导出函数：”, 到文本 (成功导出函数), #换行符, “成功导出数据类型：”, 到文本 (成功导出数据类型), #换行符, “成功导出常量：”, 到文本 (成功导出常量)), #信息图标, .)
返回 (真)

.子程序 读取导入导出API信息, 空白型, , 读取欲导入导出的API信息到数组。
.局部变量 计次变量, 整数型, , , 
.局部变量 函数信息, API函数信息, , , 
.局部变量 数据类型信息, API数据类型信息, , , 
.局部变量 常量信息, API常量信息, , , 

.判断开始 (等于 (取当前库 (), #函数数据库))
    清除数组 (程_函数信息数组)
    .判断循环首 (查找 (等于 (读 (#是否为新增), 真)))
        从数据库读取当前API信息 (#函数数据库, 函数信息)
        赋值 (函数信息.导入导出, 真)
        加入成员 (程_函数信息数组, 函数信息)
        函数信息.加入项目 (.命令名, 取数组成员数 (程_函数信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
    到首记录 ()
    .判断循环首 (查找 (等于 (读 (#是否被修改), 真)))
        从数据库读取当前API信息 (#函数数据库, 函数信息)
        赋值 (函数信息.导入导出, 真)
        加入成员 (程_函数信息数组, 函数信息)
        函数信息.加入项目 (.命令名, 取数组成员数 (程_函数信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
.判断 (等于 (取当前库 (), #数据类型库))
    清除数组 (程_数据类型信息数组)
    .判断循环首 (查找 (等于 (读 (#是否为新增), 真)))
        从数据库读取当前API信息 (#数据类型库, , 数据类型信息)
        赋值 (数据类型信息.导入导出, 真)
        加入成员 (程_数据类型信息数组, 数据类型信息)
        数据类型信息.加入项目 (.类型名称, 取数组成员数 (程_数据类型信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
    到首记录 ()
    .判断循环首 (查找 (等于 (读 (#是否被修改), 真)))
        从数据库读取当前API信息 (#数据类型库, , 数据类型信息)
        赋值 (数据类型信息.导入导出, 真)
        加入成员 (程_数据类型信息数组, 数据类型信息)
        数据类型信息.加入项目 (.类型名称, 取数组成员数 (程_数据类型信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
    
.判断 (等于 (取当前库 (), #常量数据库))
    清除数组 (程_常量信息数组)
    .判断循环首 (查找 (等于 (读 (#是否为新增), 真)))
        从数据库读取当前API信息 (#常量数据库, , , 常量信息)
        赋值 (常量信息.导入导出, 真)
        加入成员 (程_常量信息数组, 常量信息)
        常量信息.加入项目 (.常量名称, 取数组成员数 (程_常量信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
    到首记录 ()
    .判断循环首 (查找 (等于 (读 (#是否被修改), 真)))
        从数据库读取当前API信息 (#常量数据库, , , 常量信息)
        赋值 (常量信息.导入导出, 真)
        加入成员 (程_常量信息数组, 常量信息)
        常量信息.加入项目 (.常量名称, 取数组成员数 (程_常量信息数组)).选中项目 ()
        跳过 ()
    .判断循环尾 ()
    
.默认
    
.判断结束


.子程序 _按钮_全选1_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_函数信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()


.子程序 全选列表项目, 空白型, , 
.参数 选择列表框, 选择列表框, , 
.参数 是否全选, 逻辑型, , 

.局部变量 计次变量, 整数型, , , 

.计次循环首 (选择列表框.取项目数 (), 计次变量)
    选择列表框.选中项目 (相减 (计次变量, 1), 真)
    赋值 (程_函数信息数组 [选择列表框.取项目数值 (相减 (计次变量, 1))].导入导出, 真)
.计次循环尾 ()



.子程序 _按钮_全不选1_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_函数信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()


.子程序 _按钮_全选2_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_函数信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()


.子程序 _按钮_全不选2_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_函数信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()


.子程序 _按钮_全选3_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_数据类型信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()


.子程序 _按钮_全不选3_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_数据类型信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()



.子程序 _按钮_全选4_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_数据类型信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()



.子程序 _按钮_全不选4_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_数据类型信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()



.子程序 _按钮_全选5_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_常量信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()



.子程序 _按钮_全不选5_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_常量信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()



.子程序 _按钮_全选6_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (真)
    赋值 (程_常量信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 真)
.计次循环尾 ()



.子程序 _按钮_全不选6_被单击, 空白型, , 
.局部变量 计次变量, 整数型, , , 

.计次循环首 (取项目数 (), 计次变量)
    相减 (计次变量, 1).选中项目 (假)
    赋值 (程_常量信息数组 [相减 (计次变量, 1).取项目数值 ()].导入导出, 假)
.计次循环尾 ()



.窗口程序集 颜色配置窗口程序集, , , 

.程序集变量 程_原表格颜色, 表格颜色, , , 
.程序集变量 程_易语言颜色方案路径, 文本型, , , 
.子程序 _按钮_确定_被单击, 空白型, , 
_按钮_预览_被单击 ()
_启动窗口.未知支持库函数_55 (., #表格模板文件_函数)
_启动窗口.未知支持库函数_55 (., #表格模板文件_数据类型)
_启动窗口.未知支持库函数_55 (., #表格模板文件_常量)
赋值 (., #是否被修改)
销毁 ()

.子程序 配置表格颜色, 空白型, , 设置高级表格的的颜色。
.参数 表格_函数, 未知类型0x20001, , 
.参数 表格_数据类型, 未知类型0x20001, , 
.参数 表格_常量, 未知类型0x20001, , 
.参数 表格颜色, 表格颜色, , 

连续赋值 (表格颜色.表格线颜色, 表格_函数., 表格_数据类型., 表格_常量.)
连续赋值 (表格颜色.表格文本色, 表格_函数., 表格_数据类型., 表格_常量.)
连续赋值 (表格颜色.表格背景色, 表格_函数., 表格_数据类型., 表格_常量.)
表格_函数.未知支持库函数_22 (0, 0, 0, 5, 表格颜色.表格标题文本色)
表格_函数.未知支持库函数_22 (2, 0, 2, 5, 表格颜色.表格标题文本色)
表格_函数.未知支持库函数_22 (4, 0, 4, 5, 表格颜色.表格标题文本色)
表格_函数.未知支持库函数_22 (6, 0, 6, 5, 表格颜色.表格标题文本色)
表格_数据类型.未知支持库函数_22 (0, 0, 0, 4, 表格颜色.表格标题文本色)
表格_数据类型.未知支持库函数_22 (2, 0, 2, 4, 表格颜色.表格标题文本色)
表格_常量.未知支持库函数_22 (0, 0, 0, 3, 表格颜色.表格标题文本色)

表格_函数.未知支持库函数_24 (0, 0, 0, 5, 表格颜色.表格标题背景色)
表格_函数.未知支持库函数_24 (2, 0, 2, 5, 表格颜色.表格标题背景色)
表格_函数.未知支持库函数_24 (4, 0, 4, 5, 表格颜色.表格标题背景色)
表格_函数.未知支持库函数_24 (6, 0, 6, 5, 表格颜色.表格标题背景色)
表格_数据类型.未知支持库函数_24 (0, 0, 0, 4, 表格颜色.表格标题背景色)
表格_数据类型.未知支持库函数_24 (2, 0, 2, 4, 表格颜色.表格标题背景色)
表格_常量.未知支持库函数_24 (0, 0, 0, 3, 表格颜色.表格标题背景色)



.子程序 _表格颜色配置窗口_创建完毕, 空白型, , 
置标题高度差 (表格颜色配置窗口, 32, 真)
赋值 (.颜色, _启动窗口..)
赋值 (.颜色, _启动窗口..)
赋值 (.颜色, _启动窗口..)
赋值 (.颜色, _启动窗口.未知支持库函数_21 (., 0, 0))
赋值 (.颜色, _启动窗口.未知支持库函数_23 (., 0, 0))

赋值 (程_原表格颜色.表格文本色, .颜色)
赋值 (程_原表格颜色.表格背景色, .颜色)
赋值 (程_原表格颜色.表格标题文本色, .颜色)
赋值 (程_原表格颜色.表格标题背景色, .颜色)
赋值 (程_原表格颜色.表格线颜色, .颜色)

填充颜色方案列表 ()

.子程序 填充颜色方案列表, 空白型, , 寻找并填充颜色方案文件，与易语言的颜色方案文件兼容。
.参数 组合框, 组合框, , 

.局部变量 颜色配置文件名, 文本型, , , 

组合框.清空 ()
组合框.加入项目 (“当前颜色配置”, )
赋值 (组合框.现行选中项, 0)
赋值 (程_易语言颜色方案路径, 取文本注册项 (#现行用户, “Software\FlySky\E\Install\Path”, ))
赋值 (程_易语言颜色方案路径, 子文本替换 (程_易语言颜色方案路径, “\lib\”, “\clr\”, , , 假))

赋值 (颜色配置文件名, 寻找文件 (相加 (取运行目录 (), “\color\”, “*.clr”), ))
.判断循环首 (不等于 (颜色配置文件名, “”)) ' 加入自已的颜色配置方案。
    赋值 (颜色配置文件名, 子文本替换 (颜色配置文件名, “.clr”, , , , 假))
    颜色配置文件名.加入项目 ()
    赋值 (颜色配置文件名, 寻找文件 ())
.判断循环尾 ()

赋值 (颜色配置文件名, 寻找文件 (相加 (程_易语言颜色方案路径, “*.clr”), ))
.判断循环首 (不等于 (颜色配置文件名, “”)) ' 加入易语言的颜色配置方案。
    赋值 (颜色配置文件名, 子文本替换 (颜色配置文件名, “.clr”, , , , 假))
    颜色配置文件名.加入项目 ()
    赋值 (颜色配置文件名, 寻找文件 ())
.判断循环尾 ()


.子程序 _组合框1_列表项被选择, 空白型, , 
.局部变量 颜色, 整数型, , "58", 
.局部变量 文件号, 整数型, , , 

.如果 (不等于 (.现行选中项, 0))
    .如果 (文件是否存在 (相加 (程_易语言颜色方案路径, .取项目文本 (.现行选中项), “.clr”)))
        赋值 (文件号, 打开文件 (相加 (程_易语言颜色方案路径, .取项目文本 (.现行选中项), “.clr”), , ))
        
    .否则
        赋值 (文件号, 打开文件 (相加 (取运行目录 (), “\color\”, .取项目文本 (.现行选中项), “.clr”), , ))
        
    .如果结束
    .如果真 (读入数据 (文件号, 颜色))
        赋值 (.颜色, 颜色 [5]) ' 表格文本前景
        赋值 (.颜色, 颜色 [3]) ' 通常表格背景
        赋值 (.颜色, 颜色 [4]) ' 表格标题前景
        赋值 (.颜色, 颜色 [6]) ' 通常表头背景
        赋值 (.颜色, 颜色 [35]) ' 表格线颜色
        
    .如果真结束
    关闭文件 (文件号)
.否则
     ' 通常前景
     ' 通常背景
     ' 表格标题前景
     ' 表格文本前景
     ' 通常表头背景
     ' 通常表格背景
    赋值 (.颜色, 程_原表格颜色.表格文本色)
    赋值 (.颜色, 程_原表格颜色.表格背景色)
    赋值 (.颜色, 程_原表格颜色.表格标题文本色)
    赋值 (.颜色, 程_原表格颜色.表格标题背景色)
    赋值 (.颜色, 程_原表格颜色.表格线颜色)
    
.如果结束


.子程序 _按钮_保存颜色配置_被单击, 空白型, , 
.局部变量 颜色, 整数型, , "58", 
.局部变量 文件号, 整数型, , , 

赋值 (.初始目录, 相加 (取运行目录 (), “\color”))
.如果真 (打开 ())
    赋值 (文件号, 打开文件 (.文件名, #重写, ))
    赋值 (颜色 [4], .颜色)
    赋值 (颜色 [6], .颜色)
    赋值 (颜色 [35], .颜色)
    赋值 (颜色 [3], .颜色)
    赋值 (颜色 [5], .颜色)
    写出数据 (文件号, 颜色)
    关闭文件 (文件号)
    取文件名 (.文件名).加入项目 ()
.如果真结束


.子程序 _按钮_预览_被单击, 空白型, , 
.局部变量 表格颜色, 表格颜色, , , 

赋值 (表格颜色.表格文本色, .颜色)
赋值 (表格颜色.表格背景色, .颜色)
赋值 (表格颜色.表格标题文本色, .颜色)
赋值 (表格颜色.表格标题背景色, .颜色)
赋值 (表格颜色.表格线颜色, .颜色)
配置表格颜色 (_启动窗口., _启动窗口., _启动窗口., 表格颜色)


.子程序 _按钮_取消_被单击, 空白型, , 
销毁 ()

.子程序 _表格颜色配置窗口_将被销毁, 空白型, , 
.如果真 (不等于 (., #是否被修改))
    配置表格颜色 (_启动窗口., _启动窗口., _启动窗口., 程_原表格颜色)
.如果真结束


.程序集 公用函数集, , , 

.子程序 查找磁盘文件, 整数型, , 
.参数 已找到文件, 文本型, 数组, 存放已找到的完整文件名或目录名，请提供0成员文本型数组。
.参数 起始目录, 文本型, , 起始寻找的目录位置。如：“e:\muse\"，也可以提供不以“\”结束的路径名。
.参数 欲找文件或目录, 文本型, , 欲寻找的文件名或目录，可以使用多字符 (*) 和单字符 (?) 通配符来指定多重文件。
.参数 是否停止寻找, 逻辑型, 参考 可空, 只能提供逻辑型容器参数（否则参数无效），想停止搜索时，只要将此容器设为真。具体用法参看例程。

.局部变量 文件名, 文本型, , , 

处理事件 () ' 让本子程序有机会接收停止命令。
.如果真 (不等于 (取文本右边 (起始目录, 1), “\”))
    赋值 (起始目录, 相加 (起始目录, “\”))
.如果真结束
赋值 (文件名, 寻找文件 (相加 (起始目录, 欲找文件或目录), 39))
.判断循环首 (不等于 (文件名, “”))
    加入成员 (已找到文件, 相加 (起始目录, 文件名))
    输出调试文本 (相加 (起始目录, 文件名))
    赋值 (文件名, 寻找文件 (39))
.判断循环尾 ()
赋值 (文件名, 寻找文件 (相加 (起始目录, “*.*”), #子目录))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (是否停止寻找)
        返回 (取数组成员数 (已找到文件))
    .如果真结束
    .如果真 (不等于 (取文本左边 (文件名, 1), “.”))
        查找磁盘文件 (已找到文件, 相加 (起始目录, 文件名), 欲找文件或目录, 是否停止寻找)
    .如果真结束
    赋值 (文件名, 寻找文件 (#子目录))
.判断循环尾 ()
返回 (取数组成员数 (已找到文件))

.子程序 取文件名, 文本型, , 返回无扩展名的文件名。
.参数 全路径文件名, 文本型, , 

.局部变量 位置1, 整数型, , , 

赋值 (位置1, 相加 (倒找文本 (全路径文件名, “\”, , 假), 1))
返回 (取文本中间 (全路径文件名, 位置1, 相减 (倒找文本 (全路径文件名, “.”, , 假), 位置1)))

.子程序 取十进制文本, 文本型, , 将二进制数、八进制数、十六进制数转换为十进制数文本，失败返回空文本。
.参数 数值, 文本型, , 欲取进制文本的数值。
.参数 进制, 整数型, , 欲取进制文本的数值的进制(2,8,16)。

.局部变量 长度, 整数型, , , 数值长度。
.局部变量 索引, 整数型, , , 
.局部变量 值, 字节型, , , 每位数值的值。
.局部变量 结果, 长整数型, , , 转换后的十进制数值。

 ' 要将二、八、十六进制数转换为十进制数，可以使用以下公式：[a1×进制的n-1次方+a2×进制的n-1次方+an×进制的n-1次方],其中n代表数值的位数(十六进制数"abcdef"为6位)，a代表从第一位开始到最后的一位数值,进制代表[2、8、16]中的一个。在下解释的不明白的地方还请包涵。
赋值 (长度, 取文本长度 (数值))
.判断开始 (等于 (进制, 16))
    赋值 (数值, 到大写 (数值))
    .计次循环首 (长度, 索引)
        赋值 (值, 取代码 (数值, 索引)) ' 将每一位的数值取出。
         ' 检查每一位数值的合法性，如果不合法直接返回“-1”。［检查它们是否为“0-10、a-f、A-F”］
        .如果 (并且 (大于或等于 (值, #A键), 小于或等于 (值, #F键)))
            赋值 (值, 相减 (值, 55))
        .否则
            .如果真 (或者 (小于 (值, #键0), 大于 (值, #键9)))
                返回 (“”)
            .如果真结束
            赋值 (值, 相减 (值, #键0))
        .如果结束
        赋值 (结果, 相加 (结果, 相乘 (值, 求次方 (16, 相减 (长度, 索引)))))
    .计次循环尾 ()
.判断 (等于 (进制, 8))
    .计次循环首 (长度, 索引)
        赋值 (值, 取代码 (数值, 索引)) ' 将每一位的数值取出。
        .如果 (并且 (大于或等于 (值, #键0), 小于或等于 (值, #键7))) ' 检查每一位数值的合法性，如果不合法直接返回“-1”。［检查它们是否为“0-8”］
            赋值 (值, 相减 (值, #键0))
            赋值 (结果, 相加 (结果, 相乘 (值, 求次方 (8, 相减 (长度, 索引)))))
        .否则
            返回 (“”)
        .如果结束
        
    .计次循环尾 ()
.判断 (等于 (进制, 2))
    .计次循环首 (长度, 索引)
        赋值 (值, 取代码 (数值, 索引)) ' 将每一位的数值取出。
        .如果 (并且 (大于或等于 (值, #键0), 小于或等于 (值, #键1))) ' 检查每一位数值的合法性，如果不合法直接返回“-1”。［检查它们是否为“0-1”］
            赋值 (值, 相减 (值, #键0))
            赋值 (结果, 相加 (结果, 相乘 (值, 求次方 (2, 相减 (长度, 索引)))))
        .否则
            返回 (“”)
        .如果结束
        
    .计次循环尾 ()
.默认
    
.判断结束
.如果真 (小于 (结果, 0)) ' 溢出了。
    返回 (“”)
.如果真结束
返回 (到文本 (结果))

.子程序 打开对话框, 文本型, , 如设成可多选文件对话框,返回文件路径将以","分隔。打开失败或取消将返回空文本。
.参数 窗口句柄, 整数型, , 
.参数 对话框标题, 文本型, 可空, 
.参数 初始路径, 文本型, 可空, 默认为“我的文档”。
.参数 过滤器, 文本型, 可空, 格式为：说明+“|”+通配符+……，如：“MP3文件|*.mp3|mpg文件|*.mpg”
.参数 过滤器索引, 整数型, 可空, 1为第一个过滤器，如指定过滤器不存在，则默认为1。
.参数 选项, 整数型, 可空, 可多选文件：1，使用旧风格对话框：2，可相加。

.局部变量 文件列表, 文件对话框, , , 
.局部变量 temp, 字节集, , , 
.局部变量 文件名数组, 文本型, , "0", 
.局部变量 N, 空白型, , , 
.局部变量 所选文件, 文本型, , , 

赋值 (文件列表.lStructSize, 76)
赋值 (文件列表.hwndOwner, 窗口句柄)
赋值 (文件列表.lpstrFilter, 相加 (子字节集替换 (到字节集 (过滤器), { 124 }, { 0 }, , ), { 0 }, { 0 }))
赋值 (文件列表.nFilterIndex, 过滤器索引)
赋值 (文件列表.lpstrFile, 取空白字节集 (8192)) ' 文件名缓冲区，决定能选择文件的多少
赋值 (文件列表.nMaxFile, 8192)
赋值 (文件列表.lpstrFileTitle, 取空白文本 (8192))
赋值 (文件列表.nMaxFileTitle, 8192)
赋值 (文件列表.lpstrInitialDir, 初始路径)
赋值 (文件列表.lpstrTitle, 对话框标题)
.如果 (并且 (大于 (选项, 0), 小于 (选项, 4)))
    赋值 (文件列表.flags, 相加 (524292, 多项选择 (选项, 512, 32, 544)))
.否则
    赋值 (文件列表.flags, 524292) ' 包括浏览标志和不显示只读选项框标志。
.如果结束
.如果真 (不等于 (打开对话框 (文件列表), 0)) ' 打开文件成功
    赋值 (temp, 文件列表.lpstrFile)
    赋值 (temp, 取字节集左边 (temp, 相减 (寻找字节集 (temp, { 0, 0 }), 1)))
    .如果 (不等于 (寻找字节集 (temp, { 0 }), -1)) ' 是否选择多个文件
        赋值 (文件名数组, 分割文本 (到文本 (子字节集替换 (temp, { 0 }, { 124 }, , )), “|”, ))
        .如果真 (不等于 (取文本右边 (文件名数组 [1], 1), “\”)) ' 选择多个文件时，第一个数组为路径名，后面为不包括路径的文件名
            赋值 (文件名数组 [1], 相加 (文件名数组 [1], “\”))
        .如果真结束
        .计次循环首 (相减 (取数组成员数 (文件名数组), 1), N)
            .如果 (不等于 (相减 (取数组成员数 (文件名数组), 1), N)) ' 最后一个文件名不用加分隔字符“；”
                赋值 (所选文件, 相加 (所选文件, 文件名数组 [1], 文件名数组 [相加 (N, 1)], “,”))
            .否则
                赋值 (所选文件, 相加 (所选文件, 文件名数组 [1], 文件名数组 [相加 (N, 1)]))
            .如果结束
            
        .计次循环尾 ()
        返回 (所选文件) ' 返回多个文件名全路径用“;”分隔
    .否则
        返回 (到文本 (temp)) ' 返回单个文件名全路径
    .如果结束
    
.如果真结束
返回 (“”) ' 取消返回空文本

.子程序 保存对话框, 文本型, , 
.参数 对话框标题, 文本型, 可空, 
.参数 初始路径, 文本型, 可空, 默认为“我的文档”。
.参数 过滤器, 文本型, 可空, 格式为：说明+“|”+通配符+……，如：“MP3文件|*.mp3|mpg文件|*.mpg”
.参数 过滤器索引, 整数型, 可空, 1为第一个过滤器，如指定过滤器不存在，则默认为1。
.参数 使用旧风格, 逻辑型, 可空, 在2000以上系统中是否使用旧风格对话框。

.局部变量 文件列表, 文件对话框, , , 
.局部变量 文件名, 字节集, , , 
.局部变量 后缀, 文本型, , "0", 
.局部变量 索引, 整数型, , , 

赋值 (文件列表.lStructSize, 76)
赋值 (文件列表.hwndOwner, 0)
赋值 (文件列表.lpstrFilter, 相加 (子字节集替换 (到字节集 (过滤器), { 124 }, { 0 }, , ), { 0 }, { 0 }))
赋值 (文件列表.nFilterIndex, 过滤器索引)
赋值 (文件列表.lpstrFile, 取空白字节集 (256)) ' 文件名缓冲区，决定能选择文件的多少
输出调试文本 (到文本 (文件列表.nFilterIndex))
赋值 (文件列表.nMaxFile, 256)
赋值 (文件列表.lpstrFileTitle, 取空白文本 (256))
赋值 (文件列表.nMaxFileTitle, 256)
赋值 (文件列表.lpstrInitialDir, 初始路径)
赋值 (文件列表.lpstrTitle, 对话框标题)
赋值 (文件列表.nMaxCustFilter, 256)
赋值 (文件列表.lpstrCustomFilter, 相加 (子字节集替换 (到字节集 (过滤器), { 124 }, { 0 }, , ), { 0 }, { 0 }))
.如果 (使用旧风格)
    赋值 (文件列表.flags, 相加 (524294, 32))
.否则
    赋值 (文件列表.flags, 524294) ' 包括浏览标志、不显示只读选项框标志、复盖提示标志。
.如果结束
.如果 (不等于 (保存对话框 (文件列表), 0)) ' 保存文件成功。
    赋值 (文件名, 文件列表.lpstrFile)
    赋值 (后缀, 分割文本 (过滤器, “|”, ))
    赋值 (索引, 文件列表.nFilterIndex)
    输出调试文本 (到文本 (索引))
    输出调试文本 (到文本 (文件列表.lpstrCustomFilter))
    .如果真 (大于 (索引, 0))
        赋值 (文件名, 相加 (文件名, 字节集替换 (到字节集 (后缀 [相乘 (索引, 2)]), 1, 1, )))
        
    .如果真结束
    返回 (到文本 (文件名))
.否则
    返回 (“”)
.如果结束


.子程序 文件夹浏览, 文本型, , 成功返回所选文件或文件夹，失败返回空文本。
.参数 对话框标题, 文本型, 可空, 默认为“选择一个文件或文件夹”。
.参数 初始路径, 整数型, 可空, WINDOWS安装目录：1，WINDOWS系统目录：2，开始菜单目录：3，启动菜单目录：4，发送到目录：5，文档历史记录：6，程序菜单目录：7，我的文档：8，我的图片收藏夹：9，IE历史记录：10，系统字体：11，IE收藏夹：12，我的电脑：13，桌面：14，Cookies目录：15，应用程序数据：16
.参数 显示文件否, 逻辑型, 可空, 是否也显示文件列表。
.参数 显示新建否, 逻辑型, 可空, 是否显示新建文件夹按钮，如指定了初始目录参数，此参数无效。
.参数 显示地址框否, 逻辑型, 可空, 

.局部变量 文件夹数据, 文件夹数据, , , 
.局部变量 文件夹指针, 整数型, , , 
.局部变量 文件夹名称, 文本型, , , 
.局部变量 标志, 整数型, , , 

赋值 (文件夹数据.窗口句柄, 0)
赋值 (文件夹数据.标题, 选择 (等于 (对话框标题, “”), “选择一个文件或文件夹”, 对话框标题))
.如果真 (并且 (大于 (初始路径, 0), 小于 (初始路径, 17))) ' 选择初始路径。
    赋值 (文件夹数据.开始路径, 多项选择 (初始路径, 36, 37, 11, 7, 9, 8, 2, 5, 39, 34, 20, 6, 17, 16, 33, 26))
.如果真结束

赋值 (标志, 选择 (等于 (显示地址框否, 真), 16, 0))
.如果真 (等于 (初始路径, 0))
    赋值 (标志, 相加 (标志, 选择 (等于 (显示新建否, 真), 64, 0)))
.如果真结束
赋值 (标志, 相加 (标志, 选择 (等于 (显示文件否, 真), 16384, 0)))
赋值 (文件夹数据.显示标志, 标志)

赋值 (文件夹指针, 文件夹对话框 (文件夹数据)) ' 打开。
赋值 (文件夹名称, 取空白文本 (256))
.如果真 (不等于 (获取文件名 (文件夹指针, 文件夹名称), 0)) ' 获取选择的文件名。
    返回 (删首尾空 (文件夹名称))
.如果真结束
返回 (“”)

.子程序 程序是否已运行, 逻辑型, , 
.参数 标识名称, 文本型, , 

.如果真 (不等于 (打开事件同步对象 (2031619, 假, 标识名称), 0))
    返回 (真)
.如果真结束
创建事件同步对象 (0, 假, 假, 标识名称)
返回 (假)

.子程序 置标题高度差, 整数型, , 由于XP样式的标题高度比非XP样式的标题高，从而造成客户区高度增加或减少，本子程序可自动调整窗口高度，返回当前系统的标题高度-参数2指定的标题高度。
.参数 窗口, 窗口, , 仅支持普通可调边框、普通固定边框、窄标题可调边框、窄标题固定边框这四种边框风格的窗口。
.参数 标题高度, 整数型, , 在窗口设计时的高度-用户区高度。XP样式默认值：普通可调边框34、普通固定边框32、窄标题可调边框26、窄标题固定边框24，非XP样式默认值分别为27、25、24、22。
.参数 是否自动调整, 逻辑型, , 如果标题高度发生变化，是否自动调整窗口高度。

.局部变量 当前边框高度, 整数型, , , 
.局部变量 当前标题高度, 整数型, , , 

赋值 (当前边框高度, 取环境信息 (多项选择 (相加 (窗口.边框, 1), #SM_CYDLGFRAME, #SM_CYFRAME, #SM_CYDLGFRAME, #SM_CYFRAME, #SM_CYDLGFRAME, #SM_CYDLGFRAME, #SM_CYDLGFRAME)))
赋值 (当前标题高度, 取环境信息 (多项选择 (相加 (窗口.边框, 1), #SM_CYCAPTION, #SM_CYCAPTION, #SM_CYCAPTION, #SM_CYSMCAPTION, #SM_CYSMCAPTION, #SM_CYCAPTION, #SM_CYCAPTION)))
赋值 (当前标题高度, 相加 (当前标题高度, 相乘 (当前边框高度, 2)))
.如果真 (是否自动调整)
    .如果真 (不等于 (当前标题高度, 标题高度))
        窗口.移动 (相减 (相加 (窗口.高度, 当前标题高度), 标题高度))
    .如果真结束
    
.如果真结束
返回 (相减 (当前标题高度, 标题高度))


.子程序 置窗口透明度, 逻辑型, , 
.参数 窗口句柄, 整数型, , 只支持窗口。
.参数 透明度, 整数型, , 0-255 越低越透明

设置长 (窗口句柄, -20, 位或 (获得长 (窗口句柄, -20), 524288))
返回 (API_设置透明度 (窗口句柄, 0, 透明度, 2))

.窗口程序集 关于窗口程序集, , , 

.程序集变量 将关闭窗口, 逻辑型, , , 
.子程序 _关于窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_关于窗口_可否被关闭 ()

.子程序 _关于窗口_创建完毕, 空白型, , 
置标题高度差 (关于窗口, 25, 真)
.如果真 (等于 (取操作系统类别 (), 3)) ' 3、Windows NT (包含WinNT、Win2000、WinXP等)
    赋值 (.时钟周期, 50)
    _时钟1_周期事件 ()
.如果真结束


.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 透明度, 整数型, 静态, , 

置窗口透明度 (取窗口句柄 (), 透明度)
.如果 (等于 (将关闭窗口, 真))
    赋值 (透明度, 相减 (透明度, 15))
    .如果真 (小于 (透明度, 0))
        赋值 (透明度, 0)
        销毁 ()
    .如果真结束
    
.否则
    赋值 (透明度, 相加 (透明度, 15))
    .如果真 (大于 (透明度, 255))
        赋值 (.时钟周期, 0)
        赋值 (透明度, 255)
    .如果真结束
    
.如果结束


.子程序 _关于窗口_将被销毁, 空白型, , 
赋值 (将关闭窗口, 假)

.子程序 _关于窗口_可否被关闭, 逻辑型, , 
赋值 (将关闭窗口, 真)
.如果真 (等于 (取操作系统类别 (), 3)) ' 3、Windows NT (包含WinNT、Win2000、WinXP等)
    赋值 (.时钟周期, 50)
    _时钟1_周期事件 ()
    返回 (假)
.如果真结束
销毁 ()

.窗口程序集 查找窗口程序集, , , 

.子程序 _按钮_查找_被单击, 空白型, , 
.局部变量 开始查找记录号, 整数型, , , 
.局部变量 返回信息, 文本型, , , 

置等待鼠标 ()
.如果 (等于 (.标题, “查找”))
    赋值 (开始查找记录号, 1)
    赋值 (.标题, “继续查找”)
.否则
    赋值 (开始查找记录号, 相加 (取记录号 (), 1))
.如果结束
赋值 (返回信息, 查找API信息 (.内容, 开始查找记录号, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中, .选中))
.如果真 (等于 (返回信息, “未找到”))
    信息框 (“没有找到!”, #信息图标, .)
    赋值 (.标题, “查找”)
    赋值 (.被选择字符数, -1)
.如果真结束
 ' 编辑框_查找内容.获取焦点 ()
赋值 (., 相加 (“高级查找 - ”, 返回信息))
恢复鼠标 ()

.子程序 查找API信息, 文本型, , 查找指定的API数据信息并显示。
.参数 欲查找内容, 文本型, , 
.参数 开始查找记录号, 整数型, , 
.参数 查找函数名, 逻辑型, , 
.参数 查找函数中文名, 逻辑型, , 
.参数 查找函数说明, 逻辑型, , 
.参数 查找函数参数说明, 逻辑型, , 
.参数 查找数据类型名, 逻辑型, , 
.参数 查找类型中文名, 逻辑型, , 
.参数 查找数据类型说明, 逻辑型, , 
.参数 查找类型成员说明, 逻辑型, , 
.参数 查找常量名, 逻辑型, , 
.参数 查找常量十六进制值, 逻辑型, , 
.参数 查找常量十进制值, 逻辑型, , 
.参数 查找常量说明, 逻辑型, , 

.局部变量 返回信息, 文本型, , , 

跳到 (开始查找记录号)
.判断开始 (等于 (取当前库 (), #函数数据库))
    .判断开始 (查找函数名)
        .如果真 (查找 (不等于 (寻找文本 (读 (#dll命令名), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “函数名称”)
        .如果真结束
        
    .判断 (查找函数中文名)
        .如果真 (查找 (不等于 (寻找文本 (读 (#dll命令名_中文), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “函数中文名”)
        .如果真结束
        
    .判断 (查找函数说明)
        .如果真 (查找 (不等于 (寻找文本 (读 (#dll命令名_说明), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “函数说明”)
        .如果真结束
        
    .判断 (查找函数参数说明)
        .如果真 (查找 (不等于 (寻找文本 (读 (#dll参数_说明), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “参数说明”)
        .如果真结束
        
    .默认
        
    .判断结束
    
.判断 (等于 (取当前库 (), #数据类型库))
    .判断开始 (查找数据类型名)
        .如果真 (查找 (不等于 (寻找文本 (读 (#类型名称), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “数据类型名称”)
        .如果真结束
        
    .判断 (查找类型中文名)
        .如果真 (查找 (不等于 (寻找文本 (读 (#类型名称_中文), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “数据类型中文名”)
        .如果真结束
        
    .判断 (查找数据类型说明)
        .如果真 (查找 (不等于 (寻找文本 (读 (#类型_说明), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “数据类型说明”)
        .如果真结束
        
    .判断 (查找类型成员说明)
        .如果真 (查找 (不等于 (寻找文本 (读 (#类型成员_说明), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “类型成员说明”)
        .如果真结束
        
    .默认
        
    .判断结束
    
.判断 (等于 (取当前库 (), #常量数据库))
    .判断开始 (查找常量名)
        .如果真 (查找 (不等于 (寻找文本 (读 (#常量名称), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “常量名称”)
        .如果真结束
        
    .判断 (查找常量十六进制值)
        .如果真 (查找 (不等于 (寻找文本 (读 (#常量值_十六进制), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “常量十六进制值”)
        .如果真结束
        
    .判断 (查找常量十进制值)
        .如果真 (查找 (不等于 (寻找文本 (读 (#常量值_十进制), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “常量十进制值”)
        .如果真结束
        
    .判断 (查找常量说明)
        .如果真 (查找 (不等于 (寻找文本 (读 (#常量说明), 欲查找内容, , 真), -1)))
            赋值 (返回信息, “常量说明”)
        .如果真结束
        
    .默认
        
    .判断结束
    
.默认
    
.判断结束
.如果 (不等于 (返回信息, “”))
    .判断开始 (等于 (取当前库 (), #函数数据库))
        _启动窗口.选择 (., 读 (#dll命令名))
        _启动窗口._列表框_函数索引_列表项被选择 ()
        
    .判断 (等于 (取当前库 (), #数据类型库))
        _启动窗口.选择 (., 读 (#类型名称))
        _启动窗口._列表框_类型索引_列表项被选择 ()
        
    .判断 (等于 (取当前库 (), #常量数据库))
        赋值 (_启动窗口., 取页号 (取记录号 ()))
        填充一页常量信息到表格 ()
    .默认
        
    .判断结束
    返回 (返回信息)
.否则
    返回 (“未找到”)
.如果结束


.子程序 _查找窗口_创建完毕, 空白型, , 
.判断开始 (等于 (取当前库 (), #函数数据库))
    赋值 (., 0)
.判断 (等于 (取当前库 (), #数据类型库))
    赋值 (., 1)
.判断 (等于 (取当前库 (), #常量数据库))
    赋值 (., 2)
.默认
    
.判断结束
赋值 (., 相减 (相加 (_启动窗口., _启动窗口.), .))
赋值 (., 相减 (相加 (_启动窗口., _启动窗口.), .))
获取焦点 ()

.子程序 _高级选择夹_查找选项_子夹被改变, 空白型, , 
.判断开始 (等于 (., 0))
    _启动窗口._函数_被选择 ()
.判断 (等于 (., 1))
    _启动窗口._数据类型_被选择 ()
.判断 (等于 (., 2))
    _启动窗口._常量_被选择 ()
.默认
    
.判断结束
获取焦点 ()

.子程序 _编辑框_查找内容_内容被改变, 空白型, , 
赋值 (.标题, “查找”)

.子程序 _按钮_添加到列表_被单击, 空白型, , 
_启动窗口._添加到列表_被选择 ()


 ' 不属于任何一个程序集、类模块的函数：
