 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库
 ' ePPT2000 39A8BFA9AFF74dc9AC2C9ED581FB0510 1 0 PowerPoint2000支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 2 3 扩展功能支持库一




数据类型 模块信息型, 公开, 进程模块信息
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 大小, 整数型, , , 
    .成员 模块句柄, 整数型, , , 
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

数据类型 dybdx, , 内存
    .成员 BaseAddress, 整数型, , , 
    .成员 byscsd, 整数型, , , 应用程序可用的最小地址
    .成员 AllocattionProtect, 整数型, , , 应用程序可用的最大地址
    .成员 rvytsdfy, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 


.DLL命令 CloseHandle, 整数型, "kernel32", "CloseHandle", , , 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 GetProcAddress, 整数型, "kernel32.dll", "GetProcAddress", , ,
    .参数 模块句柄, 整数型, , hModule
    .参数 进程名称, 文本型, , lpProcName

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , , 将句柄返回给过程对象
    .参数 进程对象, 整数型, , dwDesiredAccess
    .参数 继承句柄, 整数型, , bInheritHandle
    .参数 进程标识符, 整数型, , dwProcessId

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", , , 保留虚拟页
    .参数 hProcess, 整数型, , 
    .参数 分配文本地址, 整数型, , lpAddress
    .参数 分配大小, 整数型, , dwSize
    .参数 分配类型, 整数型, , flAllocationType
    .参数 内存保护标志, 整数型, , flProtect

.DLL命令 GetModuleHandleA, 整数型, "kernel32.dll", "GetModuleHandleA", , , 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , lpModuleName，指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD

.DLL命令 WriteProcessMemory, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 CreateRemoteThread, 整数型, "kernel32.dll", "CreateRemoteThread", , 
    .参数 hProcess, 空白型, , 
    .参数 lpThreadAttributes, 空白型, , 
    .参数 dwStackSize, 空白型, , 
    .参数 lpStartAddress, 空白型, , 
    .参数 lpParameter, 空白型, , 
    .参数 dwCreationFlags, 空白型, , 
    .参数 lpThreadId, 空白型, , 

.DLL命令 CopyMemory, 空白型, "kernel32.dll", "RtlMoveMemory", , ,
    .参数 目标, 整数型, , any
    .参数 缓冲区, 未知类型0x20016, , any
    .参数 尺寸, 整数型, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 Module32First, 整数型, "", "Module32First", , 第一个模块，查找模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息型, , 

.DLL命令 Module32Next, 整数型, "kernel32.dll", "Module32Next", , ,
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块信息型, 传址, uProcess

.DLL命令 LoadLibraryA, 整数型, "kernel32.dll", "LoadLibraryA", , , 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
    .参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称

.DLL命令 _查询内存地址信息, 整数型, "", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 info, dybdx, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 _内存读字节集, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 VirtualProtectEx, 整数型, "", "VirtualProtectEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flNewProtect, 整数型, , 
    .参数 lpflOldProtect, 整数型, 传址, 

.窗口程序集 窗口程序集1, , , 

.程序集变量 注入代码, 字节集, , , 
.子程序 HookQQChat, 整数型, , 
.参数 PID, 整数型, , 

.局部变量 Rpid, 整数型, , , 
.局部变量 HooKAddr, 整数型, , , 
.局部变量 Buffer, 字节集, , , 
.局部变量 Nothing, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 字节集, , , 

赋值 (Rpid, OpenProcess (4095, 0, PID)) ' PROCESS_ALL_ACCESS 全部权限
.如果真 (等于 (Rpid, 0))
    CloseHandle (Rpid)
    返回 (-1) ' //打开失败,返回自定义错误代码-1
.如果真结束
赋值 (HooKAddr, 相加 (内存搜索 (PID, { 81, 83, 82, 87, 80 }, 相加 (取模块地址 (PID, “im.dll”), 1000)), 6))
赋值 (Buffer, 取空白字节集 (4))
赋值 (ret, _内存读字节集 (Rpid, HooKAddr, Buffer, 4, 0))
.如果真 (等于 (ret, 0))
    CloseHandle (Rpid)
    返回 (0) ' //读取失败,返回自定义错误代码0
.如果真结束
赋值 (a, 取字节集数据 (Buffer, #整数型, ))
赋值 (a, 相加 (HooKAddr, a, 4))
赋值 (注入代码, 字节集替换 (注入代码, 70, 4, 到字节集 (a)))
赋值 (Nothing, 内存搜索 (PID, 取空白字节集 (取字节集长度 (注入代码)), 相加 (取模块地址 (PID, “im.dll”), 1000))) ' 搜索空白区域
VirtualProtectEx (Rpid, 相加 (Nothing, 16), 取字节集长度 (注入代码), 4, ret)
WriteProcessMemory (Rpid, 相加 (Nothing, 16), 未知支持库函数_12 (注入代码), 取字节集长度 (注入代码), ret)
.如果真 (小于或等于 (ret, 1)) ' ret 为写入字节数量
    CloseHandle (Rpid)
    返回 (3) ' //写入失败,返回自定义错误代码3
.如果真结束
调试输出 (“写入地址:”, 取十六进制文本 (相加 (Nothing, 16)), “成功写入字节数:”, ret)
VirtualProtectEx (Rpid, 4, 4, 4, ret)
赋值 (a, 相减 (相加 (Nothing, 16), HooKAddr, 4))
赋值 (b, 到字节集 (a))
WriteProcessMemory (Rpid, HooKAddr, 未知支持库函数_12 (b), 4, ret)
.如果真 (小于或等于 (ret, 1)) ' ret 为写入字节数量
    CloseHandle (Rpid)
    返回 (3) ' //写入失败,返回自定义错误代码3
.如果真结束
调试输出 (“写入地址:”, 取十六进制文本 (相减 (HooKAddr, 4)), “成功写入字节数:”, ret)
 ' /=====
返回 (0)

.子程序 取模块地址, 整数型, , 
.参数 进程ID, 整数型, , 
.参数 模块名, 文本型, , 

.局部变量 快照句柄, 整数型, , , 
.局部变量 模块信息, 模块信息型, , , 
.局部变量 模块文件名, 文本型, , , 
.局部变量 ret, 整数型, , , 

赋值 (快照句柄, CreateToolhelp32Snapshot (8, 进程ID))
.如果真 (等于 (快照句柄, -1))
    返回 (0)
.如果真结束
赋值 (模块信息.size, 1024)
赋值 (ret, Module32First (快照句柄, 模块信息))
.判断循环首 (不等于 (ret, 0))
    赋值 (模块文件名, 到文本 (模块信息.模块文件名))
    .如果真 (等于 (文本比较 (模块文件名, 模块名, 假), 0))
        CloseHandle (快照句柄)
        返回 (模块信息.模块句柄)
    .如果真结束
    赋值 (ret, Module32Next (快照句柄, 模块信息))
.判断循环尾 ()
CloseHandle (快照句柄)
返回 (0)

.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 PID, 整数型, , , 

赋值 (PID, 2648)
 ' 注入代码 ＝ { 139, 8, 129, 249, 22, 97, 144, 0, 117, 57, 144, 144, 144, 144, 131, 192, 11, 51, 201, 138, 8, 3, 193, 131, 192, 62, 186, 213, 0, 0, 0, 131, 249, 13, 116, 3, 131, 234, 5, 137, 84, 36, 12, 185, 134, 0, 0, 0, 86, 87, 139, 248, 232, 0, 0, 0, 0, 88, 131, 192, 24, 139, 240, 243, 164, 95, 94, 184, 51, 51, 51, 51, 255, 224, 144, 144, 144, 144, 144, 144, 144, 0, 0, 128, 255, 9, 1, 134, 2, 0, 6, 229, 174, 139, 228, 189, 147, 0, 0, 1, 0, 106, 1, 0, 103, 230, 173, 164, 231, 148, 168, 230, 136, 183, 229, 155, 160, 229, 186, 159, 232, 175, 157, 229, 164, 170, 229, 164, 154, 44, 229, 183, 178, 232, 162, 171, 229, 175, 161, 228, 186, 186, 231, 166, 129, 232, 168, 128, 44, 232, 175, 183, 233, 169, 172, 228, 184, 138, 230, 143, 144, 233, 134, 146, 230, 173, 164, 228, 186, 186, 33, 13, 13, 32, 32, 32, 32, 32, 32, 32, 32, 66, 121, 58, 68, 114, 101, 97, 109, 32, 70, 108, 121, 101, 114, 32, 81, 81, 58, 53, 53, 52, 49, 57, 49, 49, 50, 52, 0 }
 ' 注入代码 ＝ { 139, 8, 129, 249, 22, 97, 144, 0, 117, 57, 131, 192, 11, 51, 201, 138, 8, 3, 193, 131, 192, 62, 186, 213, 0, 0, 0, 131, 249, 13, 116, 3, 131, 234, 5, 137, 84, 36, 8, 185, 134, 0, 0, 0, 139, 249, 144, 144, 86, 87, 139, 248, 232, 0, 0, 0, 0, 88, 131, 192, 24, 139, 240, 243, 164, 95, 94, 184, 51, 51, 51, 51, 255, 224, 144, 144, 144, 144, 144, 144, 144, 0, 0, 128, 255, 9, 1, 134, 2, 0, 6, 229, 174, 139, 228, 189, 147, 0, 0, 1, 0, 106, 1, 0, 103, 230, 173, 164, 231, 148, 168, 230, 136, 183, 229, 155, 160, 229, 186, 159, 232, 175, 157, 229, 164, 170, 229, 164, 154, 44, 229, 183, 178, 232, 162, 171, 229, 175, 161, 228, 186, 186, 231, 166, 129, 232, 168, 128, 44, 232, 175, 183, 233, 169, 172, 228, 184, 138, 230, 143, 144, 233, 134, 146, 230, 173, 164, 228, 186, 186, 33, 13, 13, 32, 32, 32, 32, 32, 32, 32, 32, 66, 121, 58, 68, 114, 101, 97, 109, 32, 70, 108, 121, 101, 114, 32, 81, 81, 58, 53, 53, 52, 49, 57, 49, 49, 50, 52, 0 }
 ' 注入代码 ＝ { 131, 192, 11, 51, 201, 138, 8, 3, 193, 131, 192, 46, 129, 56, 77, 83, 71, 0, 117, 48, 131, 192, 16, 186, 213, 0, 0, 0, 131, 249, 13, 116, 3, 131, 234, 5, 137, 84, 36, 8, 185, 134, 0, 0, 0, 139, 249, 144, 144, 86, 87, 139, 248, 232, 0, 0, 0, 0, 88, 131, 192, 24, 139, 240, 243, 164, 95, 94, 184, 51 }
 ' 调试输出 (取字节集长度 (注入代码))
 ' 暂停 ()
赋值 (注入代码, { 131, 192, 11, 51, 201, 138, 8, 3, 193, 131, 192, 46, 129, 56, 77, 83, 71, 0, 117, 48, 131, 192, 16, 186, 213, 0, 0, 0, 131, 249, 13, 116, 3, 131, 234, 5, 137, 84, 36, 8, 185, 134, 0, 0, 0, 139, 249, 144, 144, 86, 87, 139, 248, 232, 0, 0, 0, 0, 88, 131, 192, 24, 139, 240, 243, 164, 95, 94, 184, 51, 51, 51, 51, 255, 224, 144, 144, 144, 144, 144, 144, 144, 0, 0, 128, 255, 9, 1, 134, 2, 0, 6, 229, 174, 139, 228, 189, 147, 0, 0, 1, 0, 106, 1, 0, 103, 230, 173, 164, 231, 148, 168, 230, 136, 183, 229, 155, 160, 229, 186, 159, 232, 175, 157, 229, 164, 170, 229, 164, 154, 44, 229, 183, 178, 232, 162, 171, 229, 175, 161, 228, 186, 186, 231, 166, 129, 232, 168, 128, 44, 232, 175, 183, 233, 169, 172, 228, 184, 138, 230, 143, 144, 233, 134, 146, 230, 173, 164, 228, 186, 186, 33, 13, 13, 32, 32, 32, 32, 32, 32, 32, 32, 66, 121, 58, 68, 114, 101, 97, 109, 32, 70, 108, 121, 101, 114, 32, 81, 81, 58, 53, 53, 52, 49, 57, 49, 49, 50, 52, 0 })
 ' 调试输出 (取十六进制文本 (内存搜索 (PID, { 81, 83, 82, 87, 80 }, 取模块地址 (PID, “im.dll”) ＋ 1000) ＋ 6))

 ' 调试输出 (取十六进制文本 (内存搜索 (PID, 取空白字节集 (取字节集长度 (注入代码)), 取模块地址 (PID, “im.dll”) ＋ 1000)))
 ' HookQQChat (PID)


.子程序 内存搜索, 整数型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 搜索内容, 字节集, , 欲搜索的内容  其他类型-需自行转换为字节集类型
.参数 起始地址, 整数型, , 起始搜索内存地址

.局部变量 长度, 整数型, , , 
.局部变量 操作句柄, 整数型, , , 
.局部变量 内存块信息, dybdx, , , 
.局部变量 数据缓冲区, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 找到位置, 整数型, , , 

赋值 (长度, 取字节集长度 (搜索内容))
赋值 (操作句柄, OpenProcess (2035711, 0, 进程ID)) ' 取得操作句柄
.如果真 (等于 (操作句柄, 0))
    返回 (-1)
.如果真结束
.判断循环首 (不等于 (_查询内存地址信息 (操作句柄, 起始地址, 内存块信息, 28), 0)) ' 取得内存块信息
    .如果真 (等于 (内存块信息.Type, 16777216)) ' 判断保护状态
        赋值 (数据缓冲区, 取空白字节集 (内存块信息.rvytsdfy))
        赋值 (a, _内存读字节集 (操作句柄, 起始地址, 数据缓冲区, 内存块信息.rvytsdfy, 0))
        
        .如果真 (不等于 (a, 0))
            赋值 (找到位置, 寻找字节集 (数据缓冲区, 搜索内容, )) ' 查找是否有要搜索的数据
            .如果真 (不等于 (找到位置, -1))
                CloseHandle (操作句柄)
                返回 (到数值 (相减 (相加 (起始地址, 找到位置), 1)))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    赋值 (起始地址, 相加 (起始地址, 内存块信息.rvytsdfy)) ' 搜索下一内存块
    处理事件 ()
.判断循环尾 ()
CloseHandle (操作句柄)
返回 (0)


.子程序 _按钮1_被单击, 空白型, , 
HookQQChat (到整数 (.内容))
信息框 (“OK,现在你发送消息给好友,人家看到的就不是你发送的内容了!!”, 0, )


 ' 不属于任何一个程序集、类模块的函数：
