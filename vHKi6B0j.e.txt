 ' 文件类型：Windows模块源码

 ' 程序名称：取空白文本★取空白字节集〖仿易核心库命令〗
 ' 程序描述：
 ' 程序作者：dyk158
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：dyk_158@163.com
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库





.DLL命令 API_GetProcessHeap, 整数型, "", "GetProcessHeap", , 获取调用过程堆句柄

.DLL命令 API_HeapAlloc, 整数型, "", "HeapAlloc", , 从堆中分配内存
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 API_FillMemory, 空白型, "", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 API_MessageBox, 整数型, "", "MessageBoxA", , 建立消息框窗体
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 lpText, 文本型, , 提示信息
    .参数 lpCaption, 文本型, , 窗口标题
    .参数 wType, 整数型, , 按钮

.DLL命令 API_GetActiveWindow, 整数型, "", "GetActiveWindow", , 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。



.程序集 程序集2, , , 

.子程序 取空白文本_, 文本型, 公开, 返回具有指定数目半角空格的文本。
.参数 重复次数, 整数型, , 

.局部变量 文本指针, 整数型, , , 


 ' 注：以下的代码仿效了易核心库命令“取空白文本”，只是填充空白字符0x20部分使用了API函数来实现。
.如果真 (小于或等于 (重复次数, 0))
    
     ' 这里嵌入汇编代码取代  返回 (“”)
    置入代码 ({ 51, 192, 139, 229, 93, 194, 4, 0 })
     ' XOR EAX,EAX
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束

 ' 分配可用内存空间，+1是为了填充文本终止符“0”。
赋值 (文本指针, API_HeapAlloc (API_GetProcessHeap (), 0, 相加 (重复次数, 1)))

.如果真 (等于 (文本指针, 0))
    错误信息框 ()
    
     ' 这里嵌入汇编代码取代  返回 (“”)
    置入代码 ({ 139, 229, 93, 194, 4, 0 })
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束

 ' 以空白字符0x20填充分配的内存块字节数据，这里使用了API函数，当然也可以用嵌入汇编来实现。
API_FillMemory (文本指针, 重复次数, 32)

 ' 嵌入汇编代码以替换掉原来的返回代码，并添加文本终止符标志“0”。
 ' 如用“指针到文本”命令会使效率大大减低，不推荐使用。
置入代码 ({ 139, 69, 8, 3, 69, 252, 198, 0, 0, 139, 69, 252, 139, 229, 93, 194, 4, 0 })

 ' 至于释放内存就交给易IDE了，使用HeapAlloc申请内存的目的就在这里，因为易IDE也是使用HeapAlloc
 ' 申请内存的，最终易IDE会帮我们使用HeapFree释放内存。哈哈！是不是有点欺骗易IDE的味道。
返回 (“”)



.子程序 取空白字节集_, 字节集, 公开, 返回具有特定数目 0 字节的字节集
.参数 零字节数目, 整数型, , 

.局部变量 字节集指针, 整数型, , , 


.如果真 (小于或等于 (零字节数目, 0))
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 51, 192, 139, 229, 93, 194, 4, 0 })
     ' XOR EAX,EAX
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束

 ' 分配可用内存空间，+8是为了填充字节集类型标志
赋值 (字节集指针, API_HeapAlloc (API_GetProcessHeap (), 8, 相加 (零字节数目, 8))) ' #HEAP_ZERO_MEMORY=8

.如果真 (等于 (字节集指针, 0))
    错误信息框 ()
    
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 139, 229, 93, 194, 4, 0 })
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束

 ' 嵌入汇编代码以替换掉原来的返回代码，并添加字节集类型标志。
置入代码 ({ 254, 0, 255, 117, 8, 143, 64, 4, 139, 229, 93, 194, 4, 0 })
返回 ({  })



.子程序 错误信息框, 空白型, , 
.局部变量 错误信息, 文本型, , , 

 ' 分配内存失败时，易核心库的错误信息原本如下。注意：下面的“到文本”命令在“斩月”中要自行实现，我就不写了。
 ' 错误信息 ＝ “运行时出错!” ＋ #换行符 ＋ #换行符 ＋ “错误信息：分配 ” ＋ 到文本 (错误信息) ＋ “ 字节内存失败!”
赋值 (错误信息, 相加 (“运行时出错!”, #换行符, #换行符, “错误信息：分配内存失败!”))
API_MessageBox (API_GetActiveWindow (), 错误信息, “错误”, 相加 (#确认钮, #错误图标))



 ' 不属于任何一个程序集、类模块的函数：
