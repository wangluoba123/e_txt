 ' 文件类型：Windows模块源码

 ' 程序名称：树型框操作类
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.2
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 490
    高度 = 422
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 , , , 
.常量 TV_FIRST, "4352", , 
.常量 TVM_CREATEDRAGIMAGE, "4370", , 创建RAG图象
.常量 TVM_DELETEITEM, "4353", , 删除项目
.常量 TVM_EDITLABELA, "4366", , 编辑标签A
.常量 TVM_ENDEDITLABELNOW, "4374", , 结束编辑新标签
.常量 TVM_ENSUREVISIBLE, "4372", , 保证显示
.常量 TVM_EXPAND, "4354", , 扩展
.常量 TVM_GETBKCOLOR, "4383", , 取背景颜色
.常量 TVM_GETCOUNT, "4357", , 取数量
.常量 TVM_GETEDITCONTROL, "4367", , 取编辑控制器
.常量 TVM_GETIMAGELIST, "4360", , 取列表图片，返回图象的句柄
.常量 TVM_GETINDENT, "4358", , 取缩进？
.常量 TVM_GETINSERTMARKCOLOR, "4390", , 取插入标志色
.常量 TVM_GETISEARCHSTRINGA, "4375", , 取搜索文本A
.常量 TVM_GETITEMA, "4364", , 取项目A，要用结构
.常量 TVM_GETITEMHEIGHT, "4380", , 取项目的距离（行距）
.常量 TVM_GETITEMRECT, "4356", , 
.常量 TVM_GETITEMSTATE, "4391", , 取项目状态
.常量 TVM_GETLINECOLOR, "4393", , 取连线颜色
.常量 TVM_GETNEXTITEM, "4362", , 取下一项目？
.常量 TVM_GETSCROLLTIME, "4386", , 取卷项目？
.常量 TVM_GETTEXTCOLOR, "4384", , 取文本颜色
.常量 TVM_GETTOOLTIPS, "4377", , 取工具提示
.常量 TVM_GETVISIBLECOUNT, "4368", , 取可视数量
.常量 TVM_GETUNICODEFORMAT, "8198", , 取UNICODE格式
.常量 TVM_HITTEST, "4369", , 点击
.常量 , , , 
.常量 TVM_INSERTITEMA, "4352", , 插入项目A
.常量 TVM_MAPACCIDTOHTREEITEM, "4394", , 
.常量 TVM_MAPHTREEITEMTOACCID, "4395", , 
.常量 TVM_SELECTITEM, "4363", , 选择项目
.常量 TVM_SETBKCOLOR, "4381", , 置背景色
.常量 TVM_SETIMAGELIST, "4361", , 设置图象列表
.常量 TVM_SETINDENT, "4359", , 设置缩进
.常量 TVM_SETINSERTMARK, "4378", , 设置插入标志
.常量 TVM_SETINSERTMARKCOLOR, "4389", , 置插入标志色
.常量 TVM_SETITEMA, "4365", , 设置项目A
.常量 TVM_SETITEMHEIGHT, "4379", , 置项目的距离（行距）
.常量 TVM_SETLINECOLOR, "4392", , 置连线颜色
.常量 TVM_SETSCROLLTIME, "4385", , 设置滚动条跳跃时的数量
.常量 TVM_SETTEXTCOLOR, "4382", , 设置文本颜色
.常量 TVM_SETTOOLTIPS, "4376", , 设置工具提示
.常量 TVM_SETUNICODEFORMAT, "8197", , 设置UNICODE格式
.常量 TVM_SORTCHILDREN, "4371", , 分类―子
.常量 TVM_SORTCHILDRENCB, "4373", , 分类―子―CB
.常量 , , , 
.常量 , , , 以下是宽字符方式的树形框操作，易语言不能使用================
.常量 TVM_EDITLABELW, "4417", , 编辑标签W
.常量 TVM_GETISEARCHSTRINGW, "4416", , 取搜索文本W
.常量 TVM_GETITEMW, "4414", , 取项目M，要用结构？
.常量 TVM_INSERTITEMW, "4402", , 插入项目W
.常量 TVM_SETITEMW, "4415", , 设置项目W
.常量 , , , 以上是宽字符方式的树形框操作，易语言不能使用================
.常量 , , , 
.常量 , , , 以下是枚举项目用的常量=============================
.常量 TVGN_CARET, "9", , 当前的项目
.常量 TVGN_CHILD, "4", , 第一个子项目
.常量 TVGN_DROPHILITE, "8", , 拖放的项目
.常量 TVGN_FIRSTVISIBLE, "5", , 第一个可视的
.常量 TVGN_LASTVISIBLE, "10", , 最后可视的
.常量 TVGN_NEXT, "1", , 下一条
.常量 TVGN_NEXTVISIBLE, "6", , 下一条可视的
.常量 TVGN_PARENT, "3", , 父
.常量 TVGN_PREVIOUS, "2", , 返回上一级
.常量 TVGN_PREVIOUSVISIBLE, "7", , 返回上一级可视的
.常量 TVGN_ROOT, "0", , 根
.常量 , , , 以上是枚举项目用的常量=============================
.常量 , , , 以下是取项目信息用的常量=============================
.常量 TVIF_CHILDREN, "64", , 是否有子
.常量 TVIF_DI_SETITEM, "4096", , 置项目
.常量 TVIF_HANDLE, "16", , 句柄
.常量 TVIF_IMAGE, "2", , 图象
.常量 TVIF_INTEGRAL, "128", , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。
.常量 TVIF_PARAM, "4", , 项目数值
.常量 TVIF_SELECTEDIMAGE, "32", , 选择图象
.常量 TVIF_STATE, "8", , 状态
.常量 TVIF_TEXT, "1", , 文本
.常量 TVIF_ALL, "39", , 全部,文本+图象+选择图象+项目数值 1+2+4+32=39
.常量 , , , 以上是取项目信息用的常量=============================
.常量 , , , 以下是取项目状态常量=============================
.常量 TVIS_BOLD, "16", , 加粗
.常量 TVIS_CUT, "4", , 
.常量 TVIS_DROPHILITED, "8", , 拖放目标
.常量 TVIS_EXPANDED, "32", , 扩展
.常量 TVIS_EXPANDEDONCE, "64", , 曾经扩展过一次
.常量 TVIS_EXPANDPARTIAL, "128", , 对项目部份扩展
.常量 TVIS_OVERLAYMASK, "3840", , 
.常量 TVIS_STATEIMAGEMASK, "61440", , Private Const TVIS_STATEIMAGEMASK As Long = &HF000&
.常量 TVIS_SELECTED, "2", , 选择
.常量 TVIS_SELECTEDA, "8192", , 选中
.常量 TVIS_NOSELECTEDA, "4096", , 没有选中
.常量 , , , 以上是取项目状态常量=============================
.常量 , , , 
.常量 , , , 以下是项目扩展常量=============================
.常量 TVE_COLLAPSE, "1", , 收缩
.常量 TVE_EXPAND, "2", , 扩展
.常量 , , , 以上是项目扩展常量=============================
.常量 , , , 以下是项目插入常量=============================
.常量 TVI_FIRST, "4294901761", , 在列表首部加入
.常量 TVI_LAST, "4294901762", , 在列表尾部插入
.常量 TVI_ROOT, "4294901760", , 在根部插入
.常量 TVI_SORT, "4294901763", , 插入项目时按字母顺序排列
.常量 , , , 以上是项目插入常量=============================
.常量 , , , 以下是公开的项目加入方式常量=============================
.常量 树形框插入项目_在根部插入, "1", 公开, 
.常量 树形框插入项目_在列表首部插入, "2", 公开, 
.常量 树形框插入项目_在列表尾部插入, "3", 公开, 
.常量 树形框插入项目_按字母顺序排列插入, "4", 公开, 
.常量 , , , 以上是公开的项目加入方式常量=============================
.常量 GWL_STYLE, "-16", , 
.常量 , , , 
.常量 TVS_HASBUTTONS, "1", , 使用加减框
.常量 TVS_HASLINES, "2", , 使用连线
.常量 TVS_LINESATROOT, "4", , 使用根部线
.常量 TVS_EDITLABELS, "8", , 允许编辑
.常量 TVS_DISABLEDRAGDROP, "16", , 禁止拖动
.常量 TVS_SHOWSELALWAYS, "32", , 始终显示选择项
.常量 TVS_RTLREADING, "64", , 右对齐？
.常量 TVS_NOTOOLTIPS, "128", , 不使用工具提示
.常量 TVS_CHECKBOXES, "256", , 使用复选框
.常量 TVS_TRACKSELECT, "512", , 使用热点跟踪
.常量 TVS_SINGLEEXPAND, "1024", , 单击打开树
.常量 TVS_INFOTIP, "2048", , 支持发送 TVN_GETINFOTIP 消息获得提示标签信息
.常量 TVS_FULLROWSELECT, "4096", , 整行选择，此风格不能与TVS_HASLINES同时使用
.常量 TVS_NOSCROLL, "8192", , 不使用滚动条
.常量 TVS_NONEVENHEIGHT, "16384", , 和 TVM_SETITEMHEIGHT 消息共同预设一个项目的高度
.常量 TVS_NOHSCROLL, "32768", , 禁止水平滚动条
.常量 , , , 
.常量 WM_SETREDRAW, "11", , 重画设置
.常量 SW_HIDE, "0", 隐藏, dos
.常量 STARTF_USESHOWWINDOW, "1", 隐藏, dos
.常量 STARTF_USESTDHANDLES, "256", 隐藏, dos
.常量 STILL_ACTIVE, "259", 隐藏, dos
.常量 FO_COPY, "2", 隐藏, 复制
.常量 FO_MOVE, "1", 隐藏, 移动
.常量 FO_DELETE, "3", 隐藏, 删除
.常量 FO_RENAME, "4", 隐藏, 改名
.常量 FOF_ALLOWUNDO, "64", 隐藏, 
.常量 FOF_NOCONFIRMATION, "16", 隐藏, 
.常量 FOF_NOCONFIRMMKDIR, "512", 隐藏, 
.常量 FOF_SILENT, "4", 隐藏, 
.常量 winio左键按下, "9", 隐藏, winio
.常量 winio右键按下, "10", 隐藏, winio
.常量 winio中键按下, "12", 隐藏, winio
.常量 winio任意键放开, "8", 隐藏, winio
.常量 winio鼠标上移, "8", 隐藏, winio
.常量 winio鼠标下移, "40", 隐藏, winio
.常量 winio鼠标左移, "24", 隐藏, winio
.常量 winio鼠标右移, "8", 隐藏, winio
.常量 MD5常量_链接常量A, "1732584193", 隐藏, 0x67452301
.常量 MD5常量_链接常量B, "4023233417", 隐藏, 0xEFCDAB89
.常量 MD5常量_链接常量C, "2562383102", 隐藏, 0x98BADCFE
.常量 MD5常量_链接常量D, "271733878", 隐藏, 0x10325476
.常量 左键_, "1", 隐藏, 
.常量 中键_, "3", 隐藏, 
.常量 中键上滚动_, "4", 隐藏, 
.常量 中键下滚动_, "5", 隐藏, 
.常量 右键_, "2", 隐藏, 
.常量 单击_, "1", 隐藏, 
.常量 双击_, "2", 隐藏, 
.常量 按下_, "3", 隐藏, 
.常量 放开_, "4", 隐藏, 
.常量 WAIT_OBJECT_0, "0", 隐藏, 
.常量 QS_ALLINPUT, "255", 隐藏, 
.常量 PS_SOLID, "0", 隐藏, 写屏幕
.常量 TRANSPARENT, "1", 隐藏, 写屏幕
.常量 GB2312_CHARSET, "134", 隐藏, 写屏幕
.常量 备份_, "“SeBackupPrivilege”", 隐藏, 系统权限
.常量 启动_, "“SeRestorePrivilege”", 隐藏, 系统权限
.常量 关机_, "“SeShutdownPrivilege”", 隐藏, 系统权限
.常量 调试_, "“SeDebugPrivilege”", 隐藏, 系统权限
.常量 PROCESS_VM_OPERATION, "8", 隐藏, 内存操作
.常量 PROCESS_CREATE_THREAD, "2", 隐藏, 内存操作
.常量 PROCESS_DUP_HANDLE, "64", 隐藏, 内存操作
.常量 INFINITE, "-1", 隐藏, 内存操作
.常量 PROCESS_QUERY_INFORMATION, "1024", 隐藏, 内存操作
.常量 PROCESS_VM_READ, "16", 隐藏, 内存操作
.常量 PROCESS_ALL_ACCESS, "2035711", 隐藏, 内存操作
.常量 MEM_PRIVATE, "131072", 隐藏, 内存操作
.常量 PROCESS_VM_WRITE, "32", 隐藏, 内存操作
.常量 PAGE_READWRITE, "4", 隐藏, 内存操作
.常量 TH32CS_SNAPHEAPLIST, "1", 隐藏, 
.常量 TH32CS_SNAPPROCESS, "2", 隐藏, 
.常量 TH32CS_SNAPTHREAD, "4", 隐藏, 
.常量 TH32CS_SNAPMODULE, "8", 隐藏, 
.常量 TH32CS_SNAPALL, "15", 隐藏, 
.常量 TH32CS_INHERIT, "-2147483648", 隐藏, 
.常量 PAGE_EXECUTE_READWRITE, "64", 隐藏, 类名更改
.常量 GWL_EXSTYLEno, "-20", 隐藏, 
.常量 WS_EX_LAYEREDno, "524288", 隐藏, 
.常量 WS_EX_TRANSPARENTno, "32", 隐藏, 
.常量 STATUS_INFO_LENGTH_MISMATCH, "-1073741820", 隐藏, 
.常量 STATUS_SUCCESS, "0", 隐藏, 
.常量 STATUS_INVALID_PARAMETER, "-1073741811", 隐藏, 
.常量 OBJ_INHERIT, "2", 隐藏, 
.常量 DUPLICATE_CLOSE_SOURCE, "1", 隐藏, 
.常量 DUPLICATE_SAME_ACCESS, "2", 隐藏, 
.常量 DUPLICATE_SAME_ATTRIBUTES, "4", 隐藏, 
.常量 OB_TYPE_PROCESS, "5", 隐藏, 
.常量 ZwGetCurrentProcess, "-1", 隐藏, 
.常量 JOB_OBJECT_ALL_ACCESS, "2031647", 隐藏, 
.常量 PAGE_EXECUTE_READWRITE_, "64", 隐藏, 
.常量 STANDARD_RIGHTS_REQUIRED_, "983040", 隐藏, 
.常量 SYNCHRONIZE_, "1048576", 隐藏, 
.常量 SPECIFIC_RIGHTS_ALL_, "65535", 隐藏, 
.常量 STANDARD_RIGHTS_ALL_, "2031616", 隐藏, 
.常量 PROCESS_ALL_ACCESS_, "2035711", 隐藏, 
.常量 INTERNET_OPEN_TYPE_DIRECT_D, "1", 隐藏, 
.常量 INTERNET_FLAG_PASSIVE_D, "134217728", 隐藏, 
.常量 IF_FROM_CACHE_D, "16777216", 隐藏, 
.常量 IF_MAKE_PERSISTENT_D, "33554432", 隐藏, 
.常量 IF_NO_CACHE_WRITE_D, "67108864", 隐藏, 
.常量 SYSTEM_PERFORMANCE_INFORMATION, "2", 隐藏, 
.常量 SYSTEM_TIME_INFORMATION, "3", 隐藏, 
.常量 LWA_COLORKEY, "1", 隐藏, 
.常量 WS_EX_LAYERED, "524288", 隐藏, 
.常量 WS_EX_TRANSPARENT, "512", 隐藏, 
.常量 INTERNET_CONNECTION_MODEM, "1", 隐藏, 
.常量 INTERNET_CONNECTION_LAN, "2", 隐藏, 
.常量 INTERNET_CONNECTION_PROXY, "4", 隐藏, 
.常量 INTERNET_RAS_INSTALLED, "16", 隐藏, 
.常量 INTERNET_CONNECTION_OFFLINE, "32", 隐藏, 
.常量 INTERNET_CONNECTION_CONFIGURED, "64", 隐藏, 
.常量 WM_SHNOTIFY, "1025", 隐藏, 
.常量 SHCNE_RENAMEITEM, "1", 隐藏, 
.常量 SHCNE_CREATE, "2", 隐藏, 
.常量 SHCNE_DELETE, "4", 隐藏, 
.常量 SHCNE_MKDIR, "8", 隐藏, 
.常量 SHCNE_RMDIR, "16", 隐藏, 
.常量 SHCNE_MEDIAINSERTED, "32", 隐藏, 
.常量 SHCNE_MEDIAREMOVED, "64", 隐藏, 
.常量 SHCNE_DRIVEREMOVED, "128", 隐藏, 
.常量 SHCNE_DRIVEADD, "256", 隐藏, 
.常量 SHCNE_NETSHARE, "512", 隐藏, 
.常量 SHCNE_NETUNSHARE, "1024", 隐藏, 
.常量 SHCNE_ATTRIBUTES, "2048", 隐藏, 
.常量 SHCNE_UPDATEDIR, "4096", 隐藏, 
.常量 SHCNE_UPDATEITEM, "8192", 隐藏, 
.常量 SHCNE_SERVERDISCONNECT, "16384", 隐藏, 
.常量 SHCNE_UPDATEIMAGE, "-1", 隐藏, 
.常量 SHCNE_DRIVEADDGUI, "65536", 隐藏, 
.常量 SHCNE_RENAMEFOLDER, "131072", 隐藏, 
.常量 SHCNE_FREESPACE, "262144", 隐藏, 
.常量 SHCNE_ASSOCCHANGED, "134217728", 隐藏, 
.常量 SHCNE_DISKEVENTS, "145439", 隐藏, 
.常量 SHCNE_GLOBALEVENTS, "201687520", 隐藏, 
.常量 SHCNE_ALLEVENTS, "2147483647", 隐藏, 
.常量 SHCNE_INTERRUPT, "-2147483648", 隐藏, 
.常量 SHCNF_IDLIST, "0", 隐藏, 
.常量 SHCNF_PATHA, "1", 隐藏, 
.常量 SHCNF_PRINTERA, "2", 隐藏, 
.常量 SHCNF_DWORD, "3", 隐藏, 
.常量 SHCNF_PATHW, "5", 隐藏, 
.常量 SHCNF_PRINTERW, "6", 隐藏, 
.常量 SHCNF_TYPE, "255", 隐藏, 
.常量 SHCNF_FLUSH, "4096", 隐藏, 
.常量 SHCNF_FLUSHNOWAIT, "8192", 隐藏, 
.常量 CSIDL_DESKTOP, "0", 隐藏, 
.常量 CSIDL_INTERNET, "1", 隐藏, 
.常量 CSIDL_PROGRAMS, "2", 隐藏, 
.常量 CSIDL_CONTROLS, "3", 隐藏, 
.常量 CSIDL_PRINTERS, "4", 隐藏, 
.常量 CSIDL_PERSONAL, "5", 隐藏, 
.常量 CSIDL_FAVORITES, "6", 隐藏, 
.常量 CSIDL_STARTUP, "7", 隐藏, 
.常量 CSIDL_RECENT, "8", 隐藏, 
.常量 CSIDL_SENDTO, "9", 隐藏, 
.常量 CSIDL_BITBUCKET, "10", 隐藏, 
.常量 CSIDL_STARTMENU, "11", 隐藏, 
.常量 CSIDL_DESKTOPDIRECTORY, "16", 隐藏, 
.常量 CSIDL_DRIVES, "17", 隐藏, 
.常量 CSIDL_NETWORK, "18", 隐藏, 
.常量 CSIDL_NETHOOD, "19", 隐藏, 
.常量 CSIDL_FONTS, "20", 隐藏, 
.常量 CSIDL_TEMPLATES, "21", 隐藏, 
.常量 CSIDL_COMMON_STARTMENU, "22", 隐藏, 
.常量 CSIDL_COMMON_PROGRAMS, "23", 隐藏, 
.常量 CSIDL_COMMON_STARTUP, "24", 隐藏, 
.常量 CSIDL_COMMON_DESKTOPDIRECTORY, "25", 隐藏, 
.常量 CSIDL_APPDATA, "26", 隐藏, 
.常量 CSIDL_PRINTHOOD, "27", 隐藏, 
.常量 CSIDL_ALTSTARTUP, "29", 隐藏, 
.常量 CSIDL_COMMON_ALTSTARTUP, "30", 隐藏, 
.常量 CSIDL_COMMON_FAVORITES, "31", 隐藏, 
.常量 CSIDL_INTERNET_CACHE, "32", 隐藏, 
.常量 CSIDL_COOKIES, "33", 隐藏, 
.常量 CSIDL_HISTORY, "34", 隐藏, 
.常量 SHGFI_LARGEICON, "0", 隐藏, 
.常量 SHGFI_SMALLICON, "1", 隐藏, 
.常量 SHGFI_OPENICON, "2", 隐藏, 
.常量 SHGFI_SHELLICONSIZE, "4", 隐藏, 
.常量 SHGFI_PIDL, "8", 隐藏, 
.常量 SHGFI_USEFILEATTRIBUTES, "16", 隐藏, 
.常量 SHGFI_ICON, "256", 隐藏, 
.常量 SHGFI_DISPLAYNAME, "512", 隐藏, 
.常量 SHGFI_TYPENAME, "1024", 隐藏, 
.常量 SHGFI_ATTRIBUTES, "2048", 隐藏, 
.常量 SHGFI_ICONLOCATION, "4096", 隐藏, 
.常量 SHGFI_EXETYPE, "8192", 隐藏, 
.常量 SHGFI_SYSICONINDEX, "16384", 隐藏, 
.常量 SHGFI_LINKOVERLAY, "32768", 隐藏, 
.常量 SHGFI_SELECTED, "65536", 隐藏, 
.常量 SHCNE_EXTENDED_EVENT, "67108864", 隐藏, 
.常量 SetFocus, "“数功能：该函数对指定的窗口设置键盘焦点。该窗口必须与调用线程的消息队列相关。
　　函数原型：HWND SetFocus（HWND hWnd）；
　　参数：
　　hWnd：接收键盘输入的窗口指针。若该参数为NULL，则击键被忽略。
　　返回值：若函数调用成功，则返回原先拥有键盘焦点的窗口句柄。若hWnd参数无效或窗口未与调用线程的消息队列相关，则返回值为NULL。若要获得更多错误信息，可以调用GetLastError函数。
　　备注：SetFocus函数发送WM_KILLFOCUS消息到失去键盘焦点的窗口，并且发送WM_SETFOCUS消息到接受键盘焦点的窗口。它也激活接受键盘焦点的窗口或接受键盘焦点的窗口的父窗口。
　　若一个窗口是活动的，但没有键盘焦点，则任何按键将会产生WM_SYSCHAR,WM_SYSKEYDOWN或WM_SYSKEYUP消息。若VK_MENU键也被按下，则消息的IParam参数将设置第30位。否则，所产生的消息将不设置此位。
　　使用AttachThreadInput函数，一个线程可将输入处理连接到其他线程。这使得线程可以调用SetFocus函数为一个与其他线程的消息队列相关的窗口设置键盘焦点。
　　Windows CE：不使用SetFocus函数为一个与其他线程的消息队列相关的窗口设置键盘焦点。但有一个例外。若一个线程的窗口是另一线程的子窗口，或这些窗口是具有同一父窗口的兄弟窗口，则与一个线程关联的窗口可以为其他窗口设置焦点，尽管该窗口属于一个不同的线程。在这种情况下，就不必先调用AttachThreadlnpUt函数。
　　速查：Windows NT：3.1及以上版本；Windows：95及以上版本：Windows CE：1.0及以上版；头文件：winuser.h；库文件：user32.lib。”", 隐藏, 
.常量 SetCurrentDirectory, "“SetCurrentDirectory　　SetCurrentDirectory 
　　VB声明 
　　Declare Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryA" (ByVal lpPathName As String) As Long 
　　说明 
　　设置当前目录 
　　返回值 
　　Long，非零表示成功，零表示失败。会设置GetLastError 
　　参数表 
　　参数 类型及说明 
　　lpPathName String，新当前目录的路径”", 隐藏, 
.常量 GetDriveType, "“//声明:GetDriveType(
　　lpRootPathName: PChar {磁盘根目录}
　　): UINT;//返回值:DRIVE_UNKNOWN　　 = 0; {未知}
　　DRIVE_NO_ROOT_DIR = 1; {可移动磁盘}
　　DRIVE_REMOVABLE　 = 2; {软盘}
　　DRIVE_FIXED　　　 = 3; {本地硬盘}
　　DRIVE_REMOTE　　　= 4; {网络磁盘}
　　DRIVE_CDROM　　　 = 5; {CD-ROM}
　　DRIVE_RAMDISK　　 = 6; {RAM 磁盘}//举例:
　　procedure TForm1.FormCreate(Sender: TObject);
　　var
　　c: Cardinal;
　　begin
　　c := GetDriveType('C:');
　　ShowMessage(IntToStr(c)); {3; 说明是本地硬盘}
　　end; 

”", 隐藏, 
.常量 SetVolumeLabel, "“SetVolumeLabel 
VB声明 
Declare Function SetVolumeLabel Lib "kernel32" Alias "SetVolumeLabelA" (ByVal lpRootPathName As String, ByVal lpVolumeName As String) As Long 
说明 
设置一个磁盘的卷标（Label） 
返回值 
Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError 
参数表 
参数 类型及说明 
lpRootPathName String，磁盘卷的根路径 
lpVolumeName String，指定新卷标。用vbNullString指示删除当前卷名 
”", 隐藏, 
.常量 WinInet, "“WinInet（「Windows Internet」）API帮助程序员使用三个常见的Internet协议，这三个协议是：用于World Wide Web万维网的超文本传输协议（HTTP：Hypertext Transfer Protocol）、文件传输协议（FTP：File Transfer Protocol）和另一个称为Gopher的文件传输协议。WinInet函数的语法与常用的Win32 API函数的语法类似，这使得使用这些协议就像使用本地硬盘上的文件一样容易。
　　WinInet API的文件位于/Platform SDK/Internet, Intranet, Extranet Services/Internet Tools and Technologies/WinInet API。
　　请参见MSDN For VS 2005的详细资料：
　　Microsoft provides many APIs for programming both client and server applications. Many new applications are being written for the Internet, and as technologies, browser capabilities, and security options change, new types of applications will be written. Browsers run on client computers, providing access to the World Wide Web and displaying HTML pages that contain text, graphics, ActiveX controls, and documents. Servers provide FTP, HTTP, and gopher services, and run server extension applications using CGI and ISAPI. Your custom application can retrieve information and provide data on the Internet....
　　深入剖析 WinInet 
　　1、Linux的Socket资料
　　2、EPOLL的资料
　　3、 HTTP SERVER 的资料
　　4、深入windows 源代码
　　目录
　　===============================================================================
　　⊙ WinInet 概述
　　⊙ Hinternet 句柄的层次关系
　　⊙ HTTP 函数层次关系
　　⊙ 典型的 HTTP 客户端程序的处理流程
　　1、普通 WinInet 处理函数
　　⊙ InetrnetOpen 初始化 WinInet.dll
　　⊙ InternetOpenUrl 打开 Url，读取数据
　　⊙ InternetAttemptConnect 尝试建立到 Internet 的连接
　　⊙ InternetConnect 建立 Internet 的连接
　　⊙ InternetCheckConnection 检查 Internet 的连接是否能够建立
　　⊙ InternetSetOption 设置一个 Internet 选项
　　⊙ InternetSetStausCallback 安装一个回调函数，供 API 函数调用
　　⊙ InternetQueryOption 查询在一个指定句柄上的 Internet 选项
　　⊙ InternetQueryDataAvailable 查询可用数据的数量
　　⊙ InternetReadFile(Ex) 从一个打开的句柄读取数据
　　⊙ InternetFindNextFile 继续文件搜寻
　　⊙ InetrnetSetFilePointer 为 InternetReadFile 设置一个文件位置
　　⊙ InternetWriteFile 将数据写到一个打开的 Internet 文件
　　⊙ InternetLockRequestFile 允许用户为正在使用的文件加锁
　　⊙ InternetUnlockRequestFile 解锁被锁定的文件 
　　⊙ InternetTimeFromSystemTime 根据指定的 RFC 格式格式化日期和时间
　　⊙ InternetTimeToSystemTime 将一个 HTTP 时间/日期字串格式化为 SystemTime 结构对象
　　⊙ InternetConfirmZoneCrossing 检查在安全 URL 和非安全 URL 间的变化
　　⊙ InternetCloseHandle 关闭一个单一的 Internet 句柄
　　⊙ InternetErrorDlg 显示错误信息对话框
　　⊙ InternetGetLastResponesInfo 获取最近发送的 API函数的错误
　　2、HTTP 处理函数
　　⊙ HttpOpenRequest 打开一个 HTTP 请求的句柄
　　⊙ HttpSendRequert(Ex) 向 HTTP 服务器发送指定的请求
　　⊙ HttpQueryInfo 查询有关一次 HTTP 请求的信息
　　⊙ HttpEndRequest 结束一个 HTTP 请求
　　⊙ HttpAddRequestHeaders 添加一个或多个 HTTP 请求报头到 HTTP请求句柄
　　3、FTP 处理函数
　　⊙ FtpCreateDirectory 在 Ftp 服务器新建一个目录
　　⊙ FtpDelectFile 删除存储在 Ftp 服务器上的文件
　　⊙ FtpFindFirstFile 查找给定 Ftp 会话中的指定目录
　　⊙ FtpGetCurrentDirectory 为指定 Ftp 会话获取当前目录
　　⊙ FtpGetFile 从 Ftp 服务器下载文件
　　⊙ FtpOpenFile 访问一个远程文件以对其进行读写
　　⊙ FtpPutFile 向 Ftp 服务器上传文件
　　⊙ FtpRemoveDirectory 在 Ftp 服务器删除指定的文件
　　⊙ FtpRenameFile 为 Ftp 服务器上的指定文件改名
　　⊙ FtpSetCurrentDirectory 更改在 Ftp 服务器上正在使用的目录
　　===============================================================================
　　本文排版格式为：
　　正文由窗口自动换行；所有代码以 80 字符为边界；中英文字符以空格符分隔。
　　正文
　　===============================================================================
　　⊙ WinInet 概述
　　===============================================================================
　　1、WinInet 是一个网络编程接口，包含了 Internet 底层协议 HTTP，FTP。
　　2、借助 WinInet 接口，可不必去了解 Winsock、TCP/IP 和特定 Internet 协议
　　的细节就可以编写出高水平的 Internet 客户端程序。
　　3、WinInet 为 HTTP、FTP 提供了统一的函数集，也就是 Win32 API 接口。
　　4、WinInet 简化了 HTTP、FTP 协议的编程，可轻松地将 Internet 集成到应用程序中。
　　===============================================================================
　　⊙ Hinternet 句柄的层次关系
　　===============================================================================
　　1、首先通过 InternetOpen 函数创建位于根部的 Hinternet 句柄，
　　然后才能通过其进一步建立 HTTP、FTP 的连接。
　　2、使用 InternetConnect 函数创建一个指定的连接，它将通过传递给它的参数为指定的
　　站点初始化 HTTP、FTP 连接并创建一个从根句柄分支出去的 Hinernet 句柄。
　　3、HttpOpenRequest 和 FtpOpenFile、FtpFindFirstFile等函数将使用 InternetConnect 
　　所创建的句柄以建立到指定站点的连接。
　　===============================================================================
　　⊙ HTTP 函数层次关系
　　===============================================================================
　　1、对于 WWW 服务器提供的资源可以直接通过 InternetOpenUrl 或是 HTTP 函数对潜在
　　的协议进行处理来访问。
　　2、由于 HTTP 协议是在不断发展的，当这些底层协议被更新后也将影响这些 HTTP 函数行为
　　3、InternetOpen、InternetConnect、HttpOpenRequest 将返回 Hinternet 句柄，而
　　HttpAddRequestHeaders、HttpQueryInfo、HttpSendRequest、HttpSendRequestEx、
　　InternetErrorDlg 将使用它们所依靠的这些函数创建的 Hinternet句柄。
　　===============================================================================
　　⊙ FTP 函数层次关系
　　===============================================================================
　　1、FTP 函数需要请求得到特定类型的 Hinternet句柄才能正常工作，这些句柄的创建
　　必须按一定次序来进行：
　　1、首先使用 InternetOpen 创建根句柄，然后才能通过 InternetConnect 创建一个
　　FTP连接句柄
　　2、该图展示了依赖于 InternetConnect 所返回FTP 连接句柄的 FTP函数之间的层次关系。
　　===============================================================================
　　⊙ 典型的 HTTP 客户端程序的处理流程
　　===============================================================================
　　1、目的：开始 HTTP会话，建立 HTTP 连接
　　方法：InetrnetOpen、
　　InternetAttemptConnect
　　InternetConnect
　　结果：初始化 WinInet.dll 并联接服务器，返回相应的句柄
　　2、目的：创建一个 HTTP请求
　　方法：HttpOpenRequest
　　结果：
　　3、目的：发送一个 HTTP请示
　　方法：HttpAddRequestHeaders
　　HttpSendRequert(Ex)
　　结果：
　　4、目的：读文件
　　方法：InternetReadFile(Ex)
　　结果：使用你提供的缓冲读指定的字节
　　5、目的：获取 HTTP请求信息
　　方法：HttpQueryInfo
　　结果：从服务器获取 HTTP 请求头信息
　　6、目的：异常处理
　　方法：InternetGetLastResponesInfo 
　　InternetErrorDlg
　　结果：处理所有普通的异常类型
　　7、目的：结束 HTTP 会话
　　方法：HttpEndRequest、
　　InternetCloseHandle 
　　结果：自动清除打开的句柄的连接
　　===============================================================================
　　⊙ 典型的 HTTP 客户端程序的处理流程
　　===============================================================================
　　===============================================================================
　　⊙ InetrnetOpen 初始化 WinInet.dll
　　===============================================================================
　　1、声明：
　　function InternetOpen(lpszAgent: PChar; 
　　dwAccessType: DWORD; 
　　lpszProxy, 
　　lpszProxyBypass:PChar; 
　　dwFlags: DWORD): HINTERNET; stdcall;
　　2、参数：
　　1、lpszAgent 应用程序名，可以自定义 
　　2、dwAccessType 存取类型，可以是：
　　1、INTERNET_OPEN_TYPE_PRECONFIG =0 使用 IE 中的连接设置
　　2、INTERNET_OPEN_TYPE_DIRECT =1 直接连接到服务器
　　3、INTERNET_OPEN_TYPE_PROXY =3 通过代理服务器进行连接
　　为 3 时需指定代理服务器地址
　　3、lpszProxy CERN 代理服务器地址，一般设置为 nill;
　　4、lpszProxyBypass 代理服务器地址；
　　5、dwFlags 标记，一般设置为 0，可以是：
　　1、INTERNET_FLAG_DONT_CACHE 不在缓存中保存取得的内容
　　2、INTERNET_FLAG_OFFLINE 脱机方式
　　===============================================================================
　　⊙ InternetOpenUrl 打开 Url，读取数据
　　===============================================================================
　　1、声明：
　　function InternetOpenUrl(hInet: HINTERNET;
　　lpszUrl: PChar;
　　lpszHeaders: PChar; 
　　dwHeadersLength: DWORD; 
　　dwFlags: DWORD;
　　dwContext: DWORD): HINTERNET; stdcall;
　　2、参数：
　　1、hInet 由 InternetOpen 返回的句柄
　　2、lpszUrl 文件 Url 地址，以 http：，ftp：打头的 Url 地址；
　　3、lpszHeaders 发送到服务器的数据头；
　　4、dwHeadersLength 发送到服务器的数据头长度
　　5、dwFlags 标记，可以是：
　　1、INTERNET_FLAG_RELOAD 强制重读数据
　　2、INTERNET_FLAG_DONT_CACHE 不保存到缓存
　　3、INTERNET_FLAG_TRANSFER_ASCII 使用文本数据
　　4、INTERNET_FLAG_TRANSFER_BINARY 使用二进制数据
　　6、dwContext 上下文标记，如果使用回调功能时这个值将传送给回调函数
　　===============================================================================
　　⊙ InternetConnect 建立 Internet 的连接
　　===============================================================================
　　1、声明：
　　function InternetConnect(hInet: HINTERNET; 
　　lpszServerName: PChar;
　　nServerPort: INTERNET_PORT; 
　　lpszUsername: PChar; 
　　lpszPassword: PChar;
　　dwService: DWORD; 
　　dwFlags: DWORD;
　　dwContext: DWORD): HINTERNET; stdcall;
　　2、参数：
　　1、hInet 由 InternetOpen 返回的句柄
　　2、lpszServerName 服务器的地址
　　HTTP 地址必须为服务器名作InternetOpenUrl 语法分析
　　3、nServerPort HTTP协议端口号（缺省80）
　　4、lpszUsername 用户名
　　5、lpszPassword 用户密码
　　6、dwService 决定服务类型 HTTP，FTP，可以是：
　　1、INTERNET_SERVICE_FTP = 1; 连接到一个 FTP 服务器上
　　2、INTERNET_SERVICE_HTTP = 3; 连接到一个 HTTP 服务器上
　　7、dwFlags 
　　8、dwContext
　　===============================================================================
　　⊙ HttpOpenRequest 打开一个 HTTP 请求的句柄
　　===============================================================================
　　1、声明：
　　function HttpOpenRequest(hConnect: HINTERNET; 
　　lpszVerb: PChar;
　　lpszObjectName: PChar; 
　　lpszVersion: PChar; 
　　lpszReferrer: PChar;
　　lplpszAcceptTypes: PLPSTR; 
　　dwFlags: DWORD;
　　dwContext: DWORD): HINTERNET; stdcall;
　　2、参数： 
　　1、hConnect InternetConnect句柄
　　2、lpszVerb 命令字，如果为 NULL，使用缺省值“GET”
　　3、lpszObjectName 命令对象，通常是一个文件名、可执行文件或是一个搜索列表
　　4、lpszVersion HTTP版本，如果为空，将使用“HTTP/1.0”
　　5、lpszReferrer 一个网址，可以为空
　　6、lplpszAcceptTypes中 程序接收的文件类型列表。把空值传给该函数即通知了服务器只有文本文件可以被接收
　　'application/octet-stream'
　　7、dwFlags 标志 使用 or 连接标志
　　1、INTERNET_FLAG_NO_CACHE_WRITE 标志不缓冲写
　　2、INTERNET_FLAG_KEEP_CONNECTION 保持连接
　　3、INTERNET_FLAG_SECURE { use PCT/SSL if applicable (HTTP) }
　　{ Security Ignore Flags, Allow HttpOpenRequest to overide
　　Secure Channel (SSL/PCT) failures of the following types. }
　　4、INTERNET_FLAG_IGNORE_CERT_CN_INVALID { bad common name in X509 Cert. }
　　5、INTERNET_FLAG_IGNORE_CERT_DATE_INVALID { expired X509 Cert. }
　　8、dwContext Integer(Self)？
　　===============================================================================
　　⊙ HttpSendRequert(Ex) 向 HTTP 服务器发送指定的请求
　　===============================================================================
　　1、声明：
　　function HttpSendRequest(hRequest: HINTERNET; 
　　lpszHeaders: PChar; 
　　dwHeadersLength: DWORD; 
　　lpOptional: Pointer; 
　　dwOptionalLength: DWORD): BOOL; stdcall;
　　2、参数：
　　1、hRequest HttpOpenRequest句柄
　　2、lpszHeaders 服务请求的数据头
　　3、dwHeadersLength 服务请求的数据头的长度
　　4、lpOptional 紧路在标题后任意数据的地址，此参数一般用于 POST 和 PUT 操作
　　5、dwOptionalLength 数据的长度
　　===============================================================================
　　⊙ InternetSetOption 设置一个 Internet 选项
　　===============================================================================
　　1、声明
　　function InternetSetOption(hInet: HINTERNET;
　　dwOption: DWORD;
　　lpBuffer: Pointer; 
　　dwBufferLength: DWORD): BOOL; stdcall;
　　2、参数：
　　1、hInet 句柄
　　2、dwOption Internet 选项，可以是：
　　INTERNET_OPTION_SEND_TIMEOUT 设置，发送请求和连接时的超时时间 
　　INTERNET_OPTION_RECEIVE_TIMEOUT 设置，接收请求和连接时的超时间间
　　3、lpBuffer 值
　　4、dwBufferLength 值大小
　　===============================================================================
　　⊙ InternetSetOption 设置一个 Internet 选项
　　===============================================================================
”", 隐藏, 
.常量 取系统目录常量, "“.版本 2

' 0   C:\Documents and Settings\当前用户\桌面
' 2   C:\Documents and Settings\当前用户\「开始」菜单\程序
' 5   C:\Documents and Settings\当前用户\My Documents
' 6   C:\Documents and Settings\当前用户\Favorites
' 7   C:\Documents and Settings\当前用户\「开始」菜单\程序\启动
' 8   C:\Documents and Settings\当前用户\Recent
' 9   C:\Documents and Settings\当前用户\SendTo
' 11   C:\Documents and Settings\当前用户\「开始」菜单
' 13   C:\Documents and Settings\当前用户\My Documents\My Music
' 14   C:\Documents and Settings\当前用户\My Documents\My Videos
' 16   C:\Documents and Settings\当前用户\桌面
' 19   C:\Documents and Settings\当前用户\NetHood
' 20   C:\WINDOWS\Fonts
' 21   C:\Documents and Settings\当前用户\Templates
' 22   C:\Documents and Settings\All Users\「开始」菜单
' 23   C:\Documents and Settings\All Users\「开始」菜单\程序
' 24   C:\Documents and Settings\All Users\「开始」菜单\程序\启动
' 25   C:\Documents and Settings\All Users\桌面
' 26   C:\Documents and Settings\当前用户\Application Data
' 27   C:\Documents and Settings\当前用户\PrintHood
' 28   C:\Documents and Settings\当前用户\Local Settings\Application Data
' 31   C:\Documents and Settings\All Users\Favorites
' 32   C:\Documents and Settings\当前用户\Local Settings\Temporary Internet Files
' 33   C:\Documents and Settings\当前用户\Cookies
' 34   C:\Documents and Settings\当前用户\Local Settings\History
' 35   C:\Documents and Settings\All Users\Application Data
' 36   C:\WINDOWS
' 37   C:\WINDOWS\system32
' 38   C:\Program Files
' 39   C:\Documents and Settings\当前用户\My Documents\My Pictures
' 40   C:\Documents and Settings\当前用户
' 43   C:\Program Files\Common Files
' 45   C:\Documents and Settings\All Users\Templates
' 46   C:\Documents and Settings\All Users\Documents
' 47   C:\Documents and Settings\All Users\「开始」菜单\程序\管理工具
' 48   C:\Documents and Settings\当前用户\「开始」菜单\程序\管理工具
' 53   C:\Documents and Settings\All Users\Documents\My Music
' 54   C:\Documents and Settings\All Users\Documents\My Pictures
' 55   C:\Documents and Settings\All Users\Documents\My Videos
' 56   C:\WINDOWS\resources
' 59   C:\Documents and Settings\当前用户\Local Settings\Application Data\Microsoft\CD Burning
”", 隐藏, 
.常量 SHFD_CAPACITY_DEFAULT, "0", 隐藏, 
.常量 SHFD_CAPACITY_360, "3", 隐藏, 
.常量 SHFD_CAPACITY_720, "5", 隐藏, 
.常量 SHFD_FORMAT_QUICK, "0", 隐藏, 
.常量 SHFD_FORMAT_FULL, "1", 隐藏, 
.常量 SHFD_FORMAT_SYSONLY, "2", 隐藏, 
.常量 任务管理器类名, "“#32770”", 隐藏, 
.常量 开始运行命令, "“开始运行命令:


control:启动控制面板
regedit:注册表编辑器
defrag:磁盘碎片整理
explorer:资源管理器
sndvol32:音量控制器
CMD:DOS命令
Sndrec32:录音机
Freecell:空当接龙
Mshearts:红心大战
Sol:纸牌
Winmine:扫雷”", 隐藏, 
.常量 VK_LWIN, "91", 隐藏, 
.常量 KEYEVENTF_KEYUP, "2", 隐藏, 
.常量 少男少女论坛, "“http://499767144.5d6d.com/bbs.php”", 隐藏, 
.常量 ShowWindow, "“ShowWindow　　函数功能：该函数设置指定窗口的显示状态。
　　函数原型：BOOL ShowWindow（HWND hWnd，int nCmdShow）；
　　参数：
　　hWnd：窗口句柄。
　　nCmdShow：指定窗口如何显示。如果发送应用程序的程序提供了STARTUPINFO结构，则应用程序第一次调用ShowWindow时该参数被忽略。否则，在第一次调用ShowWindow函数时，该值应为在函数WinMain中nCmdShow参数。在随后的调用中，该参数可以为下列值之一：
　　SW_FORCEMINIMIZE：在WindowNT5.0中最小化窗口，即使拥有窗口的线程被挂起也会最小化。在从其他线程最小化窗口时才使用这个参数。
　　SW_MIOE：隐藏窗口并激活其他窗口。
　　SW_MAXIMIZE：最大化指定的窗口。
　　SW_MINIMIZE：最小化指定的窗口并且激活在Z序中的下一个顶层窗口。
　　SW_RESTORE：激活并显示窗口。如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序应该指定这个标志。
　　SW_SHOW：在窗口原来的位置以原来的尺寸激活和显示窗口。
　　SW_SHOWDEFAULT：依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的。
　　SW_SHOWMAXIMIZED：激活窗口并将其最大化。
　　SW_SHOWMINIMIZED：激活窗口并将其最小化。
　　SW_SHOWMINNOACTIVATE：窗口最小化，激活窗口仍然维持激活状态。
　　SW_SHOWNA：以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。
　　SW_SHOWNOACTIVATE：以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。
　　SW_SHOWNOMAL：激活并显示一个窗口。如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志。
　　返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。
　　备注：应用程序第一次调用ShowWindow时，应该使用WinMain函数的nCmdshow参数作为它的nCmdShow参数。在随后调用ShowWindow函数时，必须使用列表中的一个给定值，而不是由WinMain函数的nCmdSHow参数指定的值。
　　正如在nCmdShow参数中声明的，如果调用应用程序的程序使用了在STARTUPINFO结构中指定的信息来显示窗口，则在第一次调用ShowWindow函数时nCmdShow参数就被忽略。在这种情况下，ShowWindow函数使用STARTUPINFO结构中的信息来显示窗口。在随后的调用中，应用程序必须调用ShowWindow 函数（将其中nCmdShow参数设为SW_SHOWDEFAULT）来使用由程序调用该应用程序时提供的启动信息。这个处理在下列情况下发生：
　　应用程序通过调用带WS_VISIBLE标志的函数来创建它们的主窗口函数；
　　应用程序通过调用清除了WS_VISIBLE标志的CteateWindow函数来创建主窗口函数，并且随后调用带SW_SHOW标志的ShowWindow函数来显示窗口；
　　Windows CE：nCmdShow参数不支持下列值：
　　SW_MAXIMINZE；SW_MINIMIZE；SW_RESTORE；SW_SHOWDEFAULT
　　SW_SHOWMAXIMIZED；SW_SHOWMINIMIZED；SW_SHOWMININOACTIVATE
　　速查：Windows NT：3.1以上版本；Windows：95以上版本：Windows CE：1.0以上版本；头文件：winuw库文件：user32.lib。”", 隐藏, 
.常量 QQ临时会话代码, "“tencent://message/?uin=对方的QQ号码&Site=qqta.net&Menu=yes ”", 隐藏, 
.常量 GetModuleFileName, "“GetModuleFileName　　GetModuleFileName 
　　VB声明 
　　Declare Function GetModuleFileName Lib "kernel32" Alias "GetModuleFileNameA" (ByVal hModule As Long, ByVal lpFileName As String, ByVal nSize As Long) As Long 
　　说明 
　　获取一个已装载模板的完整路径名称 
　　返回值 
　　Long，如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError 
　　参数表 
　　参数 类型及说明 
　　hModule Long，一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄 
　　lpFileName String，指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，hModule模块就是从这个文件装载进来的 
　　nSize Long，装载到缓冲区lpFileName的最大字符数量 
　　注解 
　　在Windows 95下，函数会核查应用程序的内部版本号是否为4.0或更大的一个数字。如果是，就返回一个长文件名，否则返回短文件名
　　原型及各参数解释
　　DWORD GetModuleFileName( 
　　HMODULE hModule, 
　　LPTSTR lpFilename, 
　　DWORD nSize 
　　); 
　　获得hModule所指的文件的名字， 
　　hModule在LoadLibrary之类的函数会返回，是一个句柄，用来标记这个文件资源。 
　　lpFilename是你存放返回的名字的内存块的指针，是一个输出参数，nSize是这个内存块的大小，用于防止溢出。 
　　返回值是用于指示是否发生错误的。
”", 隐藏, 
.常量 GetVolumeInformation, "“GetVolumeInformation　　GetVolumeInformation 
　　VB声明 
　　Declare Function GetVolumeInformation Lib "kernel32" Alias "GetVolumeInformationA" (ByVal lpRootPathName As String, ByVal lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, lpVolumeSerialNumber As Long, lpMaximumComponentLength As Long, lpFileSystemFlags As Long, ByVal lpFileSystemNameBuffer As String, ByVal nFileSystemNameSize As Long) As Long 
　　说明 
　　获取与一个磁盘卷有关的信息 
　　返回值 
　　Long，非零表示成功，零表示失败。会设置GetLastError 
　　参数表 
　　参数 类型及说明 
　　lpRootPathName String，欲获取信息的那个卷的根路径 
　　lpVolumeNameBuffer String，用于装载卷名（卷标）的一个字串 
　　nVolumeNameSize Long，lpVolumeNameBuffer字串的长度 
　　lpVolumeSerialNumber Long，用于装载磁盘卷序列号的变量 
　　lpMaximumComponentLength Long，指定一个变量，用于装载文件名每一部分的长度。例如，在“c:\component1\component2.ext”的情况下，它就代表component1或component2名称的长度 
　　lpFileSystemFlags Long，用于装载一个或多个二进制位标志的变量。对这些标志位的解释如下： 
　　FS_CASE_IS_PRESERVED 文件名的大小写记录于文件系统 
　　FS_CASE_SENSITIVE 文件名要区分大小写 
　　FS_UNICODE_STORED_ON_DISK 文件名保存为Unicode格式 
　　FS_PERSISTANT_ACLS 文件系统支持文件的访问控制列表（ACL）安全机制 
　　FS_FILE_COMPRESSION 文件系统支持逐文件的进行文件压缩 
　　FS_VOL_IS_COMPRESSED 整个磁盘卷都是压缩的 
　　lpFileSystemNameBuffer String，指定一个缓冲区，用于装载文件系统的名称（如FAT，NTFS以及其他） 
　　nFileSystemNameSize Long，lpFileSystemNameBuffer字串的长度 
”", 隐藏, 
.常量 SetWindowPos, "“通过SetWindowPos函数把窗口的显示层次修改为HWND―TOPMOST，就可使指定窗口永远不会被其它窗口覆盖，该函数声明为： 
　　Function Long SetWindowPos(Long hwnd,Long ord,Long x,Long y,Long dx,Long dy,Long uflag) Library ″user32″ 
　　参数1为要顶层显示的窗口句柄，参数2指定显示的层次，参数7为附加选项，其余参数指定窗口位置和大小，均可忽略。在窗口的Open或Activate事件中加入如下函数调用： 
　　SetWindowPos(Handle(This),－1,0,0,0,0,3) 
　　参数2取－1表示在最顶层显示窗口，取1表示在最底层显示；最后一个参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 
”", 隐藏, 
.常量 GetBinaryTypeA, "“GetBinaryType　　GetBinaryType 
　　VB声明 
　　Declare Function GetBinaryType Lib "kernel32" Alias "GetBinaryTypeA" (ByVal lpApplicationName As String, lpBinaryType As Long) As Long 
　　说明 
　　判断文件是否可以执行 
　　返回值 
　　Long，非零表示成功，零表示失败 
　　参数表 
　　参数 类型及说明 
　　lpApplicationName String，欲测试文件的完整路径名 
　　lpBinaryType Long，用于装载文件类型的一个变量。这些类型由下述任何一个常数定义： 
　　SCS_32BIT_BINARY win32执行程序 
　　SCS_DOS_BINARY DOS执行程序 
　　SCS_OS216_BINARY 16位OS/2执行程序 
　　SCS_PIF_BINARY 用于执行DOS程序的一个pif文件 
　　SCS_POSIX_BINARY 一个Posix应用 
　　SCS_WOW_BINARY 16位windows执行程序 
 
帮助:
SCS_32BIT_BINARY win32执行程序=0  SCS_DOS_BINARY DOS执行程序=1    SCS_OS216_BINARY 16位OS/2执行程序=5   SCS_PIF_BINARY 用于执行DOS程序的一个pif文件=3  SCS_POSIX_BINARY 一个Posix应用=4  SCS_WOW_BINARY 16位windows执行程序=2”", 隐藏, 
.常量 ABS_AUTOHIDE, "1", 隐藏, 
.常量 ABS_ONTOP, "2", 隐藏, 
.常量 ABM_GETSTATE, "4", 隐藏, 
.常量 ABM_GETTASKBARPOS, "5", 隐藏, 
.常量 SHARD_PIDL, "1", 隐藏, 
.常量 SHARD_PATH, "2", 隐藏, 
.常量 SHAddToRecentDocs, "“　在Win95或Win98中，右击“任务栏"，选择“属性"，出现“任务栏"对话框，单击“开始菜单程序"，单击“清除"，就能清除“文档"菜单的内容（即最近打开的所有文档），利用Windows API在VB中是很容易实现的。该API函数为： 

　　Declare Sub SHAddToRecentDocs Lib “shell32.dll" (ByVal uFlags As Long, ByVal pv As String) 

　　其中uFlags如为1，pv则为一路径字符串的地址；如为2，则为项标示列表的地址。 

　　范例 

　　在通常声明中添加下面一行声明（要写成一行）： 

　　Private Declare Sub SHAddToRecentDocs Lib “shell32.dll" (ByVal uFlags As Long, ByVal pv As String) 

　　在窗体添加一命令按纽，按缺省方式添加，往Command1_Click事件中添加： 

　　Private Sub Command1―Click() 

　　Call SHAddToRecentDocs(2, vbNullString) 

　　End Sub 

　　按F5运行，你会发现“文档"菜单的内容全部清除。当然，如果程序设计需要往“文档"菜单中添加文件，只需把vbNullString改为文件的路径，如“c:\windows\a.txt" 

”", 隐藏, 
.常量 DrawIcon, "“DrawIcon　　函数功能：该函数在限定的设备上下文窗口的客户区域绘制图标。
　　函数原型：BOOL DrawIcon（HDC hDC，int X，nit Y HICON hlcon ）；
　　参数：
　　hDC:窗口设备上下文的句柄。
　　X：指定图标左上角的逻辑X坐标。
　　Y：指定图标左上角的逻辑y坐标。
　　hlcon:被绘制图标的句柄。图标资源必须已经通过Loadlcon或Loadlmage函数被装载过。
　　返回值:如果函数成功，返回值是非零；如果函数失效，返回值是零。想获得更多的错误信息，请调用GetLastError函数。
　　备注：Drawlcon函数将目标的左上角置于由X和Y参数指定的位置，该位置受当前设备上下文的映射方式支配。
　　Windows CE：Drawlcon函数被当做宏执行，定义为DrawlconEx（hdc，x，y， hicon，0，0，0，NULL，DI_NORMAL）。
　　速查：Windows NT:3.1及以上版本;Windows：95及以上版本;Windows CE:1.0及以上版本；头文件：winuser.h;库文件：user32.lib。”", 隐藏, 
.常量 SetParent, "“SetParent　　函数功能：该函数改变指定子窗口的父窗口。
　　函数原型：HWND SetParent（HWND hWndChild,HWND hWndNewParent）；
　　参数：
　　hWndChild:子窗口句柄。
　　hWndNewParent:新的父窗口句柄。如果该参数是NULL，则桌面窗口就成为新的父窗口。在WindowsNT5.0中，如果参数为HWND_MESSAGE,则子窗口成为消息窗口。
　　返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
　　备注：应用程序可以使用SetParent函数来设置弹出式窗口，层叠窗口或子窗口的父窗口。新的窗口与窗口必须属于同一应用程序。
　　如果参数hWndChild标识的窗口是可见的，系统将执行适当的重画和刷新动作。
　　由于兼容的原因，对于将改变父窗口的子窗口，SetParent函数并不改变该子窗口的WS_CHILO WS_POPUP风格。所以，如果hWndNewParent参数为NULL，就应在调用SetParent函数之后清空WS_CHILD位并且设置为WS_POPUP风格。相反的，如果hWndNewParent参数不为NULL并且在此之前窗口是桌面窗口的子窗口，就应在调用SetParent函数之前清空WS_POPUP位井设置WS_CHILD风格。
　　速查：Windows NT：3.1以上版本；Windows：95以上版本；Windows CE：1.0以上版本：头文件：Winuser.h;库文件：user32.lib。”", 隐藏, 
.常量 OpenFile, "“OpenFile 
　　VB声明 
　　Declare Function OpenFile Lib "kernel32" Alias "OpenFile" (ByVal lpFileName As String, lpReOpenBuff As OFSTRUCT, ByVal wStyle As Long) As Long 
　　说明 
　　这个函数能执行大量不同的文件操作。和这个函数相比，请优先考虑win32的CreateFile函数（它能打开命名管道和控制Unicode文件名，同时不受128个字符的路径名称的限制） 
　　返回值 
　　Long，如执行成功，返回文件句柄。注意文件句柄可能是无效的；例如，假设指定了OF_EXIST标志，文件在函数返回前会关闭，但它打开时的句柄却永远不会返回。如果出错，函数会返回HFILE_ERROR；此时，由lpReOpenBuff指定的OFSTRUCT结构的nErrCode会设置成发生的错误。表OpenFile-2（OFSTRUCT出错代码）对这些错误进行了总结。会设置GetLastError 
　　参数表 
　　参数 类型及说明 
　　lpFileName String，欲打开文件的名字 
　　lpReOpenBuff OFSTRUCT，该结构填充的数据包括与文件和操作结果有关的信息 
　　wStyle Long，参考表OpenFile-1（OpenFile函数的标志常数表）总结的标志常数的组合，它决定了要采取的操作方式 
　　表OpenFile-1（OpenFile函数的标志常数表） 
　　wStyle常数 说明 
　　OF_CREATE 创建指定的文件。如已经存在，则将其缩减为零长度 
　　OF_DELETE 删除指定的文件 
　　OF_EXIST 通过尝试打开文件的做法，判断一个文件是否存在。如文件存在，则将其关闭。此时，函数会返回文件打开时使用的句柄，但这个句柄是无效的。如指定的文件不存在，则返回一个负数 
　　OF_PARSE 填写lpReOpenBuff结构的内容，但不执行其他任何操作 
　　OF_PROMPT 如文件不存在，则显示一个消息框，在其中列出重试和取消按钮 
　　OF_READ 以只读方式打开文件 
　　OF_READWRITE 以可读、可写的方式打开文件 
　　OF_REOPEN 打开lpReOpenBuff结构内指定的文件，而不是用lpFileName参数 
　　OF_SEARCH 强迫windows查找文件――即使指定了特定的路径 
　　OF_SHARE_COMPAT 文件可由多个应用程序打开多次 
　　OF_SHARE_DENY_NONE 可打开文件，以便由其他程序读写 
　　OF_SHARE_DENY_READ 禁止其他程序读写文件内容 
　　OF_SHARE_DENY_WRITE 其他程序可以读文件，但不能写文件 
　　OF_SHARE_EXCLUSIVE 其他任何一个程序都不能再打开这个文件 
　　OF_WRITE 文件以只写模式打开 
　　表OpenFile-2（OFSTRUCT出错代码） 
　　十六进制值 说明 十六进制值 说明 
　　1 函数无效 2 文件未找到 
　　3 路径未找到 4 无可用文件句柄 
　　5 拒绝访问 6 句柄无效 
　　7 DOS内存冲突 8 无足够内存完成操作 
　　9 无效块 A 非法环境 
　　B 无效格式 C 无效访问 
　　D 无效数据 
　　F 无效驱动器 10 当前目录无效 
　　11 设备有异 12 没有更多的文件 
　　13 写保护错 14 非法单位 
　　15 驱动器未准备好 16 无效命令 
　　17 CRC校验错 18 无效长度 
　　19 搜索错误 1A 磁盘不兼容MS-DOS 
　　1B 扇区未找到 1C 缺纸 
　　1D 写错误 1E 读错误 
　　1F 驱动器常规错误 20 共享违例 
　　21 文件锁定违例 22 不正确的磁盘 
　　23 无可用的文件控制块 24 共享缓冲区溢出 
　　32 不支持的设备 33 远程设备不可用 
　　34 重名错误 35 网络路径错误 
　　36 网络忙 37 非法设备 
　　38 命令太多 39 网卡硬件错误 
　　3A 网络响应错误 3B 其他网络错误 
　　3C 远程适配器错误 3D 打印队列满 
　　3E 后台打印缓冲区满 3F 打印取消 
　　40 删除的网络名 41 拒绝网络访问 
　　42 无效设备类型 43 无效网络名 
　　44 名字太多 45 会话太多 
　　46 共享暂停 47 请求未接受 
　　48 重定向暂停 50 文件退出 
　　51 文件控制块重复 52 不能创建 
　　53 中断24错误 54 缺少结构 
　　55 已经分配 56 密码无效 
　　57 参数无效 58 网络写错误 
”", 隐藏, 
.常量 CloseHandle, "“CloseHandle 

VB声明 
Declare Function CloseHandle Lib "kernel32" Alias "CloseHandle" (ByVal hObject As Long) As Long 
说明 
关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的 
返回值 
Long，非零表示成功，零表示失败。会设置GetLastError 
参数表 
参数 类型及说明 
hObject Long，欲关闭的一个对象的句柄 
注解 
除非对内核对象的所有引用都已关闭，否则该对象不会实际删除
 
”", 隐藏, 
.常量 MAX_PATH, "260", 隐藏, 
.常量 MAXDWORD, "65535", 隐藏, 
.常量 INVALID_HANDLE_VALUE, "-1", 隐藏, 
.常量 FILE_ATTRIBUTE_ARCHIVE, "32", 隐藏, 存档属性
.常量 FILE_ATTRIBUTE_DIRECTORY, "16", 隐藏, 文件夹
.常量 FILE_ATTRIBUTE_HIDDEN, "2", 隐藏, 隐藏属性
.常量 FILE_ATTRIBUTE_NORMAL, "128", 隐藏, 无属性
.常量 FILE_ATTRIBUTE_READONLY, "1", 隐藏, 只读属性
.常量 FILE_ATTRIBUTE_SYSTEM, "4", 隐藏, 系统属性
.常量 FILE_ATTRIBUTE_TEMPORARY, "256", 隐藏, 
.常量 BIF_RETURNONLYFSDIRS, "1", 隐藏, 
.常量 文件属性, "“1.只读：很明显，此类属性的文件只能读，不能写入！防毒效果很明显。 
2.隐藏：此类文件一般状态下，是不显示出来的，如果要查看 菜单栏－工具－文件夹选项－查看－点选，显示所有文件夹和文件 即可 
3.存档：这是最常见的文件类型，可读可写。

 1、#只读文件； 2、#隐藏文件；  4、#系统文件； 16、#子目录；32、#存档文件

lnk:#存档文件
文件夹:#只读文件 #隐藏文件； #系统文件 #子目录
文件夹属性:16
           17
           18
           19
           20
           21
           22”", 隐藏, 
.常量 NameSamCompatible, "2", 隐藏, 
.常量 Loadlibrary, "“Loadlibrary: 把指定库模块装入内存 
　　语法为： 

　　function Loadlibrary(LibFileName: PChar): THandle; 

LibFileName指定了要装载DLLs的文件名，如果LibFileName没有包含一个路径，则Windows按下述顺序进行查找： 
　　(1)当前目录； 
　　(2)Windows目录(包含win.com的目录)。函数GetWindowDirectory返回这一目录的路径； 
　　(3)Windows系统目录(包含系统文件如gdi.exe的目录)。函数GetSystemDirectory返回这一目录的路径； 
　　(4)包含当前任务可执行文件的目录。利用函数GetModuleFileName可以返回这一目录的路径； 
　　(5)列在PATH环境变量中的目录； 
　　(6)网络的映象目录列表。 
　　如果函数执行成功，则返回装载库模块的实例句柄。否则，返回一个小于HINSTANCE_ERROR的错误代码。错误代码的意义如下表： 

　　 表10.2 Loadlibrary返回错误代码的意义 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 
错误代码　　　　　　　　　意　　　　　　　　义 
-------------------------------------- 
　　　 0 系统内存不够，可执行文件被破坏或调用非法 
　　　 2 文件没有被发现 
　　　 3 路径没有被发现 
　　　 5 企图动态链接一个任务或者有一个共享或网络保护错 
　　　 6 库需要为每个任务建立分离的数据段 
　　 　 8 没有足够的内存启动应用程序 
　　 10 Windows版本不正确 
　　　 11 可执行文件非法。或者不是Windows应用程序，或者在.EXE映 
　　 　　 像中有错误 
　　　 12 应用程序为一个不同的操作系统设计(如OS/2程序) 
13 应用程序为MS DOS4.0设计 
　　　 14 可执行文件的类型不知道 
　　　 15 试图装载一个实模式应用程序(为早期Windows版本设计) 
16 试图装载包含可写的多个数据段的可执行文件的第二个实例 
　　　 19 试图装载一个压缩的可执行文件。文件必须被解压后才能被装裁 
　　　 20 动态链接库文件非法 
　　　 21 应用程序需要32位扩展 
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 

　　假如在应用程序用Loadlibrary调用某一模块前，其它应用程序已把该模块装入内存，则Loadlibrary并不会装载该模块的另一实例，而是使该模块的"引用计数"加1。 
”", 隐藏, 
.常量 GetProcAddress, "“GetProcAddress：捡取给定模块中函数的地址 
　　语法为： 

　　function GetProcAddress(Module: THandle; ProcName: PChar): TFarProc; 

Module包含被调用的函数库模块的句柄，这个值由Loadlibrary返回。如果把Module设置为nil，则表示要引用当前模块。 
　　ProcName是指向含有函数名的以nil结尾的字符串的指针，或者也可以是函数的次序值。如果ProcName参数是次序值，则如果该次序值的函数在模块中并不存在时，GetProcAddress仍返回一个非nil的值。这将引起混乱。因此大部分情况下用函数名是一种更好的选择。如果用函数名，则 
函数名的拼写必须与动态链接库文件EXPORTS节中的对应拼写相一致。 
　　如果GetProcAddress执行成功，则返回模块中函数入口处的地址，否则返回nil。 
”", 隐藏, 
.常量 Freelibrary, "“Freelibrary：从内存中移出库模块 
　　语法为： 

　　procedure Freelibrary(Module : THandle); 

Module为库模块的句柄。这个值由Loadlibrary返回。 
　　由于库模块在内存中只装载一次，因而调用Freelibrary首先使库模块的引用计数减一。如果引用计数减为0，则卸出该模块。 
　　每调用一次Loadlibrary就应调用一次FreeLibray，以保证不会有多余的库模块在应用程序结束后仍留在内存中。 
”", 隐藏, 
.常量 HELP_COMMAND, "258", 隐藏, 
.常量 HELP_CONTENTS, "3", 隐藏, 
.常量 HELP_CONTEXT, "1", 隐藏, 
.常量 HELP_CONTEXTPOPUP, "8", 隐藏, 
.常量 HELP_FORCEFILE, "9", 隐藏, 
.常量 HELP_HELPONHELP, "4", 隐藏, 
.常量 HELP_INDEX, "3", 隐藏, 
.常量 HELP_KEY, "257", 隐藏, 
.常量 HELP_MULTIKEY, "513", 隐藏, 
.常量 HELP_PARTIALKEY, "261", 隐藏, 
.常量 HELP_QUIT, "2", 隐藏, 
.常量 HELP_SETCONTENTS, "5", 隐藏, 
.常量 HELP_SETINDEX, "5", 隐藏, 
.常量 HELP_SETWINPOS, "515", 隐藏, 
.常量 LWA_ALPHA, "2", 隐藏, 
.常量 SetLayeredWindowAttributes, "“Public Declare Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As Long, ByVal crKey As Long, ByVal bAlpha As Byte, ByVal dwFlags As Long) As Long
　　hwnd是透明窗体的句柄，
　　crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
　　bAlpha是透明度，取值范围是[0,255]，
　　dwFlags是透明方式，可以取两个值：
　　当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效；
　　当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效。
　　LWA_ALPHA = 0x2
　　LWA_COLORKEY=0x1
　　也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。
　　要使使窗体拥有透明效果,首先要有WS_EX_LAYERED扩展属性
　　(旧的sdk没有定义这个属性,所以可以直接指定为0x80000). 
　　WS_EX_LAYERED = 0x80000 
”", 隐藏, 
.常量 键代码, "“1-9


48
49
50
51
52
53
54
55
56
57

A-F


65
66
67
68
69
70”", 隐藏, 
.常量 GWL_EXSTYLE, "-20", 隐藏, 
.常量 SM_CXFULLSCREEN, "16", 隐藏, 
.常量 SM_CYFULLSCREEN, "17", 隐藏, 
.常量 SM_CXSCREEN, "0", 隐藏, 
.常量 SM_CYSCREEN, "1", 隐藏, 
.常量 SPI_SETDESKWALLPAPER, "20", 隐藏, 
.常量 SPIF_UPDATEINIFILE, "1", 隐藏, 
.常量 SPIF_SENDWININICHANGE, "2", 隐藏, 
.常量 MBTIMERID, "999", 隐藏, 
.常量 CF_TEXT, "1", 隐藏, 
.常量 CF_BITMAP, "2", 隐藏, 
.常量 CF_METAFILEPICT, "3", 隐藏, 
.常量 CF_SYLK, "4", 隐藏, 
.常量 CF_DIF, "5", 隐藏, 
.常量 CF_TIFF, "6", 隐藏, 
.常量 CF_OEMTEXT, "7", 隐藏, 
.常量 CF_DIB, "8", 隐藏, 
.常量 CF_PALETTE, "9", 隐藏, 
.常量 CF_PENDATA, "10", 隐藏, 
.常量 CF_RIFF, "11", 隐藏, 
.常量 CF_WAVE, "12", 隐藏, 
.常量 CF_UNICODETEXT, "13", 隐藏, 
.常量 CF_ENHMETAFILE, "14", 隐藏, 
.常量 CF_HDROP, "15", 隐藏, 
.常量 CF_LOCALE, "16", 隐藏, 
.常量 CF_MAX, "17", 隐藏, 
.常量 CF_OWNERDISPLAY, "128", 隐藏, 
.常量 CF_DSPTEXT, "129", 隐藏, 
.常量 CF_DSPBITMAP, "130", 隐藏, 
.常量 CF_DSPMETAFILEPICT, "131", 隐藏, 
.常量 GENERIC_READ, "-2147483648", 隐藏, 
.常量 GENERIC_WRITE, "1073741824", 隐藏, 
.常量 FILE_SHARE_READ, "1", 隐藏, 
.常量 FILE_SHARE_WRITE, "2", 隐藏, 
.常量 OPEN_EXISTING, "2", 隐藏, 
.常量 CF_DSPENHMETAFILE, "142", 隐藏, 
.常量 十六进制, "4", 隐藏, 
.常量 八进制, "3", 隐藏, 
.常量 二进制, "1", 隐藏, 
.常量 十进制, "10", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' shell 52F260023059454187AF826A3C07AF2A 3 0 操作系统界面功能支持库



 ' 所需要的模块
 ' 外部控件操作类 $外部控件操作类.ec
 ' 超强万能E模块 C:\Documents and Settings\Administrator\桌面\超强万能常用模块.ec


数据类型 树型框结构, 公开, 
    .成员 项目文本, 文本型, , , 
    .成员 图片索引, 整数型, , , 
    .成员 选中图片索引, 整数型, , , 
    .成员 项目数值, 整数型, , , 
    .成员 加粗扩展, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展
    .成员 缩进层次, 整数型, , , 

数据类型 坐标_, , 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 

数据类型 TVITEMEX, , 
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVITEMEX2, , 
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVINSERTSTRUCT, , 
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVINSERTSTRUCT2, , 
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 项目数据, 公开, 
    .成员 项目文本, 文本型, , , 项目文本
    .成员 图片索引, 整数型, , , 图象
    .成员 选中图片索引, 整数型, , , 选择图象
    .成员 项目数值, 整数型, , , 项目数值

数据类型 树型框结构A, , 
    .成员 文本, 字节集, , , 
    .成员 图片索引, 整数型, , , 
    .成员 选中图片索引, 整数型, , , 
    .成员 项目数值, 整数型, , , 
    .成员 加粗扩展, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展
    .成员 缩进层次, 整数型, , , 

数据类型 BITMAP, 公开, 
    .成员 bmType, 整数型, , , 
    .成员 bmWidth, 整数型, , , 
    .成员 bmHeight, 整数型, , , 
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 整数型, 传址, , 

数据类型 BITMAPINFO, 公开, 
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 整数型, , , RGBQUAD          bmiColors[1]; 

数据类型 BITMAPINFOHEADER, 公开, 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 BITMAPFILEHEADER, 公开, 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 BROWSEINFO, 公开, 
    .成员 hOwner, 整数型, , , 
    .成员 pidlRoot, 整数型, , , 
    .成员 pszDisplayName, 文本型, , , 
    .成员 lpszTitle, 文本型, , , 
    .成员 ulFlags, 整数型, , , 
    .成员 lpfn, 子程序指针, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 鼠标状态_, 公开, 
    .成员 左键, 逻辑型, , , 
    .成员 中键, 逻辑型, , , 
    .成员 右键, 逻辑型, , , 

数据类型 同步信息_, 公开, 
    .成员 服务器目录, 文本型, , , 
    .成员 本地目录, 文本型, , , 
    .成员 总进度, 进度条, , , 
    .成员 单进度, 进度条, , , 
    .成员 总进度值, 标签, , , 
    .成员 单进度值, 标签, , , 
    .成员 当前目录, 标签, , , 
    .成员 当前文件, 标签, , , 
    .成员 更新数, 标签, , , 

数据类型 STARTUPINFO, 公开, dos
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 文本型, , , 
    .成员 lpDesktop, 文本型, , , 
    .成员 lpTitle, 文本型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 SECURITY_ATTRIBUTES, 公开, dos
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 PROCESS_INFORMATION, 公开, dos
    .成员 hProcess, 整数型, , , 
    .成员 hThread, 整数型, , , 
    .成员 dwProcessId, 整数型, , , 
    .成员 dwThreadId, 整数型, , , 

数据类型 SHFILEOPSTRUCT_, 公开, 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 1移动
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 提示方式
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 标题

数据类型 热键信息_, 公开, 
    .成员 窗口句柄, 整数型, , , 
    .成员 功能键状态, 整数型, , , 
    .成员 一般键, 整数型, , , 
    .成员 热键ID, 整数型, , , 
    .成员 处理热键子程序, 子程序指针, , , 

数据类型 矩形坐标_, 公开, 
    .成员 矩形左边, 整数型, , , 
    .成员 矩形顶边, 整数型, , , 
    .成员 矩形右边, 整数型, , , 
    .成员 矩形底边, 整数型, , , 

数据类型 坐标_, 公开, 
    .成员 x, 整数型, , , X轴坐标
    .成员 y, 整数型, , , Y轴坐标

数据类型 LOGFONT, 公开, 逻辑字体;   (写屏幕)
    .成员 高度, 整数型, , , lfheight
    .成员 宽度, 整数型, , , lfwidth
    .成员 控制摆, 整数型, , , lfrscapement
    .成员 定方位, 整数型, , , lforientation
    .成员 加粗, 整数型, , , lfweight
    .成员 斜体, 字节型, , , lfitalic
    .成员 下划线, 字节型, , , lfunderline
    .成员 袭击出, 字节型, , , lfstrikeout
    .成员 零碎工作组合, 字节型, , , lfcharset
    .成员 出自精确, 字节型, , , lfoutprecision
    .成员 修剪精确, 字节型, , , lfclipprecision
    .成员 性质, 字节型, , , lfquality
    .成员 间距, 字节型, , , lfpitchandfamily
    .成员 字体名称, 文本型, , , lffacename[lf.facesize]

数据类型 LuID_, 公开, 进程令牌
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 进程权限_, 公开, From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 LARGE_INTEGER, 公开, 
    .成员 QuadPart, 长整数型, , , 占用8个字节

数据类型 进程信息_, 公开, 进程信息
    .成员 dwSize, 整数型, , , 
    .成员 cntUsage, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 th32DefaultHeapID, 整数型, , , 
    .成员 th32ModuleID, 整数型, , , 
    .成员 cntThreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcPriClassBase, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 进程名称, 字节型, , "256", 

数据类型 模块信息_, 公开, 进程模块信息
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 大小, 整数型, , , 
    .成员 模块句柄, 整数型, , , 
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

数据类型 窗口信息, 公开, 枚举窗口信息
    .成员 窗口句柄, 整数型, 传址, , 
    .成员 进程ID, 整数型, 传址, , 
    .成员 线程ID, 整数型, 传址, , 
    .成员 窗口类名, 文本型, , , 
    .成员 窗口标题, 文本型, , , 

数据类型 WNDCLASSEX, 公开, 类名更改
    .成员 cbSize, 整数型, , , 
    .成员 style, 整数型, , , 
    .成员 lpfnWndProc, 整数型, , , 
    .成员 cbClsExtra, 整数型, , , 
    .成员 cbWndExtra, 整数型, , , 
    .成员 hInstance, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 hCursor, 整数型, , , 
    .成员 hbrBackground, 整数型, , , 
    .成员 lpszMenuName, 文本型, , , 
    .成员 lpszClassName, 文本型, , , 
    .成员 hIconSm, 整数型, , , 

数据类型 MEMORY_BASIC_INFORMATION, 公开, 内存
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 应用程序可用的最小地址
    .成员 AllocattionProtect, 整数型, , , 应用程序可用的最大地址
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 项目标识符列表_, 公开, ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 MD5循环左移参数, 公开, 
    .成员 左移位数, 整数型, , , 
    .成员 右移位数, 整数型, , , 
    .成员 位与值, 整数型, , , 

数据类型 IPInfo, 公开, IP
    .成员 dwAddr, 整数型, , , 
    .成员 dwIndex, 整数型, , , 
    .成员 dwMask, 整数型, , , 
    .成员 dwBCastAddr, 整数型, , , 
    .成员 dwReasmSize, 整数型, , , 
    .成员 unused1, 短整数型, , , 
    .成员 unused2, 短整数型, , , 

数据类型 MIB_IPAddrTable, 公开, IP
    .成员 dEntrys, 整数型, , , 
    .成员 mIPInfo, IPInfo, , "255", 

数据类型 操作系统, 公开, OSVERSIONINFO 结构中的 osName 返回操作系统的名称
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 主版本号 dwMajorVersion
    .成员 dwMinorVersion, 整数型, , , 次版本号
    .成员 dwBuildNumber, 整数型, , , 内部版本号
    .成员 dwPlatformId, 整数型, , , 操作平台标识
    .成员 szCSDVersion, 字节型, , "128", 补丁版本
    .成员 wServicePackMajor, 整数型, , , 
    .成员 wServicePackMinor, 整数型, , , 
    .成员 wSuiteMask, 整数型, , , 根据这个值可得到更具体的系统类型
    .成员 wProductType, 字节型, , , 产品类型
    .成员 wReserved, 字节型, , , 

数据类型 浏览器, 公开, 
    .成员 cbSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 

数据类型 内存参数_, 公开, 
    .成员 数据结构长度, 整数型, , , 
    .成员 内存使用百分比, 整数型, , , 
    .成员 实际内存总字节数, 整数型, , , 
    .成员 可用的实际内存字节数, 整数型, , , 
    .成员 分页文件总字节数, 整数型, , , 
    .成员 分页文件可用字节数, 整数型, , , 
    .成员 虚拟内存的总字节数, 整数型, , , 
    .成员 可用的虚拟内存字节数, 整数型, , , 

数据类型 A坐标_, 公开, , POINTAPI
    .成员 x, 整数型, , , x，横向位置
    .成员 y, 整数型, , , y，纵向位置

数据类型 A矩形_, 公开, , RECT
    .成员 左边, 整数型, , , Left
    .成员 顶边, 整数型, , , Top
    .成员 右边, 整数型, , , Right
    .成员 底边, 整数型, , , Bottom

数据类型 按键信息_, 公开, 钩子
    .成员 虚拟码, 整数型, , , 
    .成员 扫描码, 整数型, , , 
    .成员 标记, 整数型, , , 
    .成员 时间, 整数型, , , 
    .成员 额外信息, 整数型, , , 

数据类型 AMSG, 公开, 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, APOINTAPI, , , 

数据类型 APOINTAPI, 公开, 公开
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 CLIENT_ID_, 公开, 
    .成员 UniqueProcess, 整数型, , , 
    .成员 UniqueThread, 整数型, , , 

数据类型 OBJECT_ATTRIBUTES_, 公开, 
    .成员 Length, 整数型, , , 
    .成员 RootDirectory, 整数型, , , 
    .成员 ObjectName, 整数型, , , 
    .成员 Attributes, 整数型, , , 
    .成员 SecurityDescriptor, 整数型, , , 
    .成员 SecurityQualityOfService, 整数型, , , 

数据类型 PROCESS_BASIC_INFORMATION_, 公开, 
    .成员 ExitStatus, 整数型, , , 
    .成员 PebBaseAddress, 整数型, , , 
    .成员 AffinityMask, 整数型, , , 
    .成员 BasePriority, 整数型, , , 
    .成员 UniqueProcessId, 整数型, , , 
    .成员 InheritedFromUniqueProcessId, 整数型, , , 

数据类型 MEMORY_BASIC_INFORMATION_, 公开, 
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocattionProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 SYSTEM_HANDLE_TABLE_ENTRY_INFO_, 公开, 
    .成员 UniqueProcessId, 短整数型, , , ""
    .成员 CreatorBackTraceIndex, 短整数型, , , ""
    .成员 ObjectTypeIndex, 字节型, , , ""
    .成员 HandleAttributes, 字节型, , , ""
    .成员 HandleValue, 短整数型, , , ""
    .成员 pObject, 整数型, , , ""
    .成员 GrantedAccess, 整数型, , , ""

数据类型 多线程许可证_C, 公开, 
    .成员 DebugInfo, 整数型, , , 
    .成员 LockCount, 整数型, , , 
    .成员 RecursionCount, 整数型, , , 
    .成员 OwningThread, 整数型, , , 
    .成员 LockSemaphore, 整数型, , , 
    .成员 SpinCount, 整数型, , , 

数据类型 注册表数据_E, 公开, 
    .成员 索引, 整数型, , , 
    .成员 键名, 文本型, , , 
    .成员 类型, 整数型, , , 
    .成员 键值, 字节集, , , 

数据类型 矩形_, 公开, , RECT
    .成员 矩形左边, 整数型, , , Left
    .成员 矩形顶边, 整数型, , , Top
    .成员 矩形宽度, 整数型, , , Right
    .成员 矩形高度, 整数型, , , Bottom

数据类型 _矩形区域_, 公开, 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 _BITMAP_, 公开, 
    .成员 bmType, 整数型, , , 
    .成员 bmWidth, 整数型, , , 
    .成员 bmHeight, 整数型, , , 
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 整数型, 传址, , 

数据类型 _BITMAPFILEHEADER_, 公开, 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 _BITMAPINFOHEADER_, 公开, 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 _BITMAPINFO_, 公开, 
    .成员 BITMAPINFOHEADER, _BITMAPINFOHEADER_, , , 
    .成员 bmiColors, 整数型, , , 

数据类型 _GdiplusStartupInput_, 公开, 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 SYSTEM_PERFORMANCE_INFORMATION, 公开, 
    .成员 liIdleTime, 长整数型, , , 
    .成员 dwSpare, 整数型, , "76", 

数据类型 SYSTEM_TIME_INFORMATION, 公开, 
    .成员 liKeBootTime, 长整数型, , , 
    .成员 liKeSystemTime, 长整数型, , , 
    .成员 liExpTimeZoneBias, 长整数型, , , 
    .成员 uCurrentTimeZoneId, 整数型, , , 
    .成员 dwReserved, 整数型, , , 

数据类型 RECT, 公开, 
    .成员 Left, 整数型, , , 
    .成员 Top, 整数型, , , 
    .成员 Right, 整数型, , , 
    .成员 Bottom, 整数型, , , 

数据类型 POINTAPI, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 MSG, 公开, 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 SHFILEINFOBYTE, 公开, 
    .成员 hIcon, 整数型, , , 
    .成员 iIcon, 整数型, , , 
    .成员 dwAttributes, 整数型, , , 
    .成员 szDisplayName, 字节型, , "260", 
    .成员 szTypeName, 字节型, , "80", 

数据类型 SHFILEINFO, 公开, 
    .成员 hIcon, 整数型, , , 
    .成员 iIcon, 整数型, , , 
    .成员 dwAttributes, 整数型, , , 
    .成员 szDisplayName, 字节型, , "260", 
    .成员 szTypeName, 字节型, , "80", 

数据类型 PIDLSTRUCT, 公开, 
    .成员 PIDL, 整数型, , , 
    .成员 bWatchSubFolders, 整数型, , , 

数据类型 SHNOTIFYSTRUCT, 公开, 
    .成员 bwItem1, 整数型, , , 
    .成员 bwItem2, 整数型, , , 

数据类型 查找的文件信息_, 公开, WIN32_FIND_DATA
    .成员 dwFileAttributes, 整数型, , , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 
    .成员 dwLowDateTime1, 整数型, , , 
    .成员 dwHighDateTime1, 整数型, , , 
    .成员 dwLowDateTime2, 整数型, , , 
    .成员 dwHighDateTime2, 整数型, , , 
    .成员 nFileSizeHigh, 整数型, , , 
    .成员 nFileSizeLow, 整数型, , , 
    .成员 dwReserved0, 整数型, , , 
    .成员 dwReserved1, 整数型, , , 
    .成员 cFileName, 字节型, , "260", 
    .成员 cAlternate, 文本型, , "14", 

数据类型 创建进程返回数据类型, 公开, 
    .成员 hProcess, 整数型, , , 进程句柄
    .成员 hThread, 整数型, , , 进程的主线程句柄  
    .成员 dwProcessId, 整数型, , , 进程ID
    .成员 dwThreadId, 整数型, , , 进程的主线程ID

数据类型 启动信息数据, 公开, 
    .成员 cb, 整数型, , , 结构长度
    .成员 lpReserved, 整数型, , , 保留
    .成员 lpDesktop, 整数型, , , 保留
    .成员 lpTitle, 整数型, , , 如果为控制台进程则为显示的标题
    .成员 dwX, 整数型, , , 窗口位置
    .成员 dwY, 整数型, , , 窗口位置
    .成员 dwXSize, 整数型, , , 窗口大小
    .成员 dwYSize, 整数型, , , 窗口大小
    .成员 dwXCountChars, 整数型, , , 控制台窗口字符号宽度
    .成员 dwYCountChars, 整数型, , , 控制台窗口字符号高度
    .成员 dwFillAttribute, 整数型, , , 控制台窗口填充模式
    .成员 dwFlags, 整数型, , , 创建标记
    .成员 wShowWindow, 整数型, , , 窗口显示标记如同ShowWindow中的标记
    .成员 cbReserved2, 整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 标准输入句柄
    .成员 hStdOutput, 整数型, , , 标准输入句柄
    .成员 hStdError, 整数型, , , 标准输出句柄

数据类型 模块地址_, 公开, MODULEENTRY32
    .成员 结构大小, 整数型, , , dwSize  一般填写548
    .成员 模块标识符, 整数型, , , th32ModuleID
    .成员 进程标识符, 整数型, , , th32ProcessID
    .成员 模块数, 整数型, , , GlblcntUsage
    .成员 进程数, 整数型, , , ProccntUsage
    .成员 模块基址, 整数型, , , modBaseAddr
    .成员 模块基址大小, 整数型, , , modBaseSize
    .成员 模块句柄, 整数型, , , hModule
    .成员 模块名称, 字节型, , "256", szModule
    .成员 文件路径, 字节型, , "260", szExePath

数据类型 安全性结构_, 公开, SECURITY_ATTRIBUTES
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 系统状态栏信息_, 公开, APPBARDATA
    .成员 结构大小, 整数型, , , cbSize
    .成员 窗口句柄, 整数型, , , hwnd
    .成员 回调信息值, 整数型, , , uCallbackMessage
    .成员 边框位置, 整数型, , , uEdge
    .成员 左边, 整数型, , , Left
    .成员 顶边, 整数型, , , Top
    .成员 右边, 整数型, , , Right
    .成员 底边, 整数型, , , Bottom
    .成员 参数值, 整数型, , , lParam

数据类型 文件结构信息_, 公开, $(a)OFSTRUCT
    .成员 结构长度, 字节型, , , cBytes,设置成结构的长度（目前是136）
    .成员 文件盘符, 字节型, , , fFixedDisk,参见相关帮助
    .成员 错误代码, 整数型, , , nErrCode，参见相关帮助
    .成员 保留1, 整数型, , , Reserved1,保留不用
    .成员 保留2, 整数型, , , Reserved2,保留不用
    .成员 文件路径, 文本型, , "128", szPathName,文件的完整路径名

数据类型 重叠操作_, 公开, OVERLAPPED
    .成员 内部保留参数, 整数型, , , Internal
    .成员 内部高位保留参数, 整数型, , , InternalHigh
    .成员 低32位, 整数型, , , offset
    .成员 高32位, 整数型, , , offsethigh
    .成员 事件句柄, 整数型, , , hevent

数据类型 设定执行文件信息_, 公开, SHELLEXECUTEINFO
    .成员 结构大小, 整数型, , , cbSize
    .成员 标志, 整数型, , , fMask
    .成员 窗口句柄, 整数型, , , hwnd
    .成员 操作命令, 文本型, , , lpVerb
    .成员 文件名, 文本型, , , lpFile
    .成员 应用程序参数, 文本型, , , lpParameters
    .成员 目录, 文本型, , , lpDirectory
    .成员 显示标志, 整数型, , , nShow
    .成员 实例句柄, 整数型, , , hInstApp
    .成员 项目标识符列表结构指针, 整数型, , , lpIDList
    .成员 文件类别, 文本型, , , lpClass
    .成员 热键句柄, 整数型, , , hkeyClass
    .成员 热键, 整数型, , , dwHotKey
    .成员 图标句柄, 整数型, , , hIcon
    .成员 进程句柄, 整数型, , , hProcess

数据类型 系统时间_, 公开, SYSTEMTIME
    .成员 年, 短整数型, , , wYear
    .成员 月, 短整数型, , , wMonth
    .成员 星期, 短整数型, , , wDayOfWeek
    .成员 日, 短整数型, , , wDay
    .成员 小时, 短整数型, , , wHour
    .成员 分, 短整数型, , , wMinute
    .成员 秒, 短整数型, , , wSecond
    .成员 毫秒, 短整数型, , , wMilliseconds

数据类型 MD5_CTX, 公开, MD5_CTX数据类型
    .成员 i, 整数型, , "2", 
    .成员 buf, 整数型, , "4", 
    .成员 in, 字节型, , "64", 
    .成员 digest, 字节型, , "16", 编码

数据类型 鼠标坐标GetCursorPos, 公开, POINTAPI
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 PROCESSENTRY32, 公开, 
    .成员 结构大小, 整数型, , , dwSize  一般填写548
    .成员 引用计数, 整数型, , , cntUsage
    .成员 进程ID, 整数型, , , th32ProcessID
    .成员 默认堆的ID, 整数型, , , th32DefaultHeapID
    .成员 进程模块的ID, 整数型, , , th32ModuleID
    .成员 线程数, 整数型, , , cntThreads
    .成员 父进程ID, 整数型, , , th32ParentProcessID
    .成员 优先级, 整数型, , ,  pcPriClassBase  
    .成员 内部使用, 整数型, , , dwFlags 
    .成员 可执行文件名, 字节型, , "260", szExeFile 

.全局变量 键盘锁定钩子句柄, 整数型, 公开, , 全局钩子
.全局变量 键盘锁定状态, 逻辑型, 公开, , 全局钩子
.全局变量 鼠标锁定钩子句柄, 整数型, 公开, , 全局钩子
.全局变量 鼠标锁定状态, 逻辑型, 公开, , 全局钩子
.全局变量 矩形变量, 矩形_, 公开, , 
.全局变量 矩形坐标变量, 矩形坐标_, 公开, , 
.全局变量 窗口宽度, 整数型, 公开, , 
.全局变量 窗口高度, 整数型, 公开, , 
.全局变量 DLL加注次数, 整数型, 公开, , 
.全局变量 屏幕写左边距离, 整数型, 公开, , 
.全局变量 屏幕写顶部距离, 整数型, 公开, , 
.全局变量 屏幕写内容, 文本型, 公开, , 
.全局变量 屏幕写颜色, 整数型, 公开, , 
.全局变量 网页数据, 字节集, 公开, , 

.DLL命令 取数据地址, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 树型框结构, 传址, 
    .参数 源, 树型框结构, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取数据地址2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 字节型, 传址, 
    .参数 源, 字节型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取数据地址3, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 文本型, 传址, 
    .参数 源, 文本型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVITEMEX, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVITEMEX, 传址, 
    .参数 源, TVITEMEX, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVINSERTSTRUCT, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVINSERTSTRUCT, 传址, 
    .参数 源, TVINSERTSTRUCT, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVITEMEX2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVITEMEX2, 传址, 
    .参数 源, TVITEMEX2, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVINSERTSTRUCT2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVINSERTSTRUCT2, 传址, 
    .参数 源, TVINSERTSTRUCT2, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 设置窗口信息, 整数型, "user32.dll", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 取窗口信息, 整数型, "user32.dll", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 发送消息1, 整数型, "user32.dll", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 类型为通用型，请在调试时调整其类型

.DLL命令 拷贝内存, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标地址, 整数型, , Any
    .参数 源地址, 整数型, , Any
    .参数 数据长度, 整数型, , 

.DLL命令 取窗口类名称, 整数型, "user32", "GetClassNameA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 _取窗口区域位置, 整数型, "user32.dll", "ClientToScreen", 公开, 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 坐标_, , lpPoint，参见相关帮助

.DLL命令 _移动鼠标, 空白型, "user32", "SetCursorPos", 公开, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 _取坐标句柄, 整数型, "user32.dll", "WindowFromPoint", 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄)
    .参数 X轴光标, 整数型, , 
    .参数 Y轴光标, 整数型, , 

.DLL命令 _投递消息, 空白型, "", "PostMessageA", 公开, 向指定窗口句柄发送消息
    .参数 h, 空白型, , 
    .参数 m, 空白型, , 
    .参数 p, 空白型, , 
    .参数 p, 空白型, , 

.DLL命令 发送消息2, 整数型, "user32", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 文本型, , 

.DLL命令 _进制文本转整数, 整数型, "shlwapi.dll", "StrToInt64ExA", 公开, 进制文本转整数_64-bit integer
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 长整数型, 传址, 

.DLL命令 _取文本长度, 整数型, "kernel32.dll", "lstrlenA", 公开, 取文本内容长度_
    .参数 文本, 文本型, , Ptr

.DLL命令 _延时, 整数型, "kernel32.dll", "Sleep", 公开, 
    .参数 延时时间, 整数型, , 毫秒

.DLL命令 _替换首尾文本, 逻辑型, "shlwapi.dll", "StrTrimA", 公开, 替换首尾文本
    .参数 psz, 文本型, , 
    .参数 pszTrimChars, 文本型, 传址, 

.DLL命令 _到小写, 文本型, "", "CharLowerA", 公开, 
    .参数 str, 文本型, , 

.DLL命令 _到大写, 文本型, "", "CharUpperA", 公开, 
    .参数 str, 文本型, , 

.DLL命令 _文件复制, 整数型, "", "CopyFileExA", 公开, 
    .参数 lpExistingFileName, 文本型, , 源文件
    .参数 lpNewFileName, 文本型, , 目标文件
    .参数 lpProgressRoutine, 子程序指针, , 回调指针
    .参数 lpData, 整数型, 传址, 
    .参数 pbCancel, 整数型, , 
    .参数 dwCopyFlags, 整数型, , 是否覆盖文件 0覆盖 1不覆盖

.DLL命令 _取路径文件名, 文本型, "Shlwapi.dll", "PathFindFileNameA", 公开, 取出指定路径中的文件名
    .参数 pPath, 文本型, , 路径

.DLL命令 _取版本号, 空白型, "kernel32", "GetVersionExA", 公开, 取出当前计算机操作系统版本及相关信息
    .参数 取win信息, 操作系统, , 

.DLL命令 _取启动时间, 整数型, "kernel32.dll", "GetTickCount", 公开, 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 _取计算机名, 整数型, "kernel32.dll", "GetComputerNameA", 公开, 取出当前完整的计算机名称，TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 _取用户名, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 _取浏览器, 整数型, "Shlwapi.dll", "DllGetVersion", 公开, 取当前计算机IE浏览器版本及版本号
    .参数 dwVersion, 浏览器, , 

.DLL命令 LCMapString, 整数型, "kernel32", "LCMapStringA", 公开, 
    .参数 Locale, 整数型, , 
    .参数 dwMapFlags, 整数型, , 
    .参数 lpSrcStr, 文本型, , 
    .参数 cchSrc, 整数型, , 
    .参数 lpDestStr, 文本型, , 
    .参数 ByVal, 整数型, , 

.DLL命令 _信息框, 整数型, "user32.dll", "MessageBoxA", 公开, 弹出一个信息框(返回用户操作信息)
    .参数 hwnd, 整数型, , 信息框父窗口句柄
    .参数 lpText, 文本型, , 信息框内容
    .参数 lpCaption, 文本型, , 信息框标题
    .参数 wType, 整数型, , 信息框按钮(同 系统核心支持库功能"信息框")

.DLL命令 _释放内存, 整数型, "psapi.dll", "EmptyWorkingSet", 公开, 
    .参数 进程句柄, 整数型, , 

.DLL命令 _释放DLL, 逻辑型, "kernel32.dll", "FreeLibrary", 公开, 
    .参数 模块句柄, 整数型, , 

.DLL命令 _内存置零, 空白型, "kernel32.dll", "RtlZeroMemory", 公开, 
    .参数 起始地址, 整数型, , 
    .参数 置零长度, 整数型, , 

.DLL命令 _取内存文本长度, 整数型, "kernel32.dll", "lstrlenA", 公开, 
    .参数 内存地址, 整数型, , 

.DLL命令 lstrlen, 整数型, "kernel32", "lstrlenA", 公开, 
    .参数 lpString, 文本型, , 

.DLL命令 GetIpAddrTable, 整数型, "IPHlpApi", "GetIpAddrTable", 公开, 
    .参数 pIPAdrTable, MIB_IPAddrTable, 传址, 
    .参数 pdwSize, 整数型, 传址, 
    .参数 Sort, 整数型, , 

.DLL命令 ChangeDisplaySettings, 整数型, "", "ChangeDisplaySettingsA", 公开, 
    .参数 lpDevMode, 短整数型, 传址, 
    .参数 dwFlags, 整数型, , 

.DLL命令 EnumDisplaySettings, 整数型, "", "EnumDisplaySettingsA", 公开, 
    .参数 lpszDeviceName, 整数型, , 
    .参数 iModeNum, 整数型, , 
    .参数 lpDevMode, 短整数型, 传址, 

.DLL命令 _取坐标子句柄, 整数型, "user32.dll", "ChildWindowFromPoint", 公开, 取父窗口中包含了指定坐标的第一个子窗口句柄(与其它取窗口句柄不同的是:可取出不可视或透明的窗口)
    .参数 父窗口句柄, 整数型, , 欲取坐标句柄所在的父窗口句柄
    .参数 坐标x, 整数型, , 指定横坐标
    .参数 坐标y, 整数型, , 指定纵坐标

.DLL命令 _取中断进程退出代码, 整数型, "", "GetExitCodeProcess", 公开, 非零表示成功，零表示失败。
    .参数 hProcess, 整数型, , 用于装载进程退出代码的一个长整数变量。
    .参数 lpExitCode, 整数型, 传址, 想获取退出代码的一个进程的句柄

.DLL命令 _读出文件中数据, 整数型, "", "ReadFile", 公开, 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nNumberOfBytesToRead, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, , 

.DLL命令 _Internet激活, 整数型, "wininet.dll", "InternetOpenA", 公开, 
    .参数 句柄名称, 文本型, 传址, 
    .参数 连接类型, 整数型, , 1直接连接;3代理连接
    .参数 代理地址, 文本型, 传址, 
    .参数 代理掩码, 文本型, 传址, 
    .参数 dwFlags, 整数型, , 0

.DLL命令 _Internet建立连接, 整数型, "wininet.dll", "InternetConnectA", 公开, 
    .参数 Internet句柄, 整数型, , 
    .参数 域名, 文本型, 传址, 
    .参数 服务器端口, 整数型, , 80HTTP;21FTP;
    .参数 用户名, 文本型, 传址, 空
    .参数 用户口令, 文本型, 传址, 空
    .参数 服务类型, 整数型, , 1FTP;3HTTP
    .参数 dwFlags, 整数型, , 0http;134217728被动FTP模式
    .参数 dwContext, 整数型, , 0

.DLL命令 _Internet关闭句柄, 逻辑型, "wininet.dll", "InternetCloseHandle", 公开, 
    .参数 句柄, 整数型, , 

.DLL命令 _Internet读文件, 逻辑型, "wininet.dll", "InternetReadFile", 公开, 
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sBuffer, 字节集, 传址, 
    .参数 lNumBytesToRead, 整数型, , 
    .参数 lNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 整数型, "Wininet.dll", "HttpQueryInfoA", 公开, 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 整数型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, 传址, 

.DLL命令 _Http创建请求, 整数型, "wininet.dll", "HttpOpenRequestA", 公开, 
    .参数 Internet连接句柄, 整数型, , 由Internet建立连接返回
    .参数 访问方式, 文本型, 传址, "GET" or "POST"为空默认GET
    .参数 页面路径, 文本型, 传址, 简短路径,不带域名
    .参数 协议版本, 文本型, 传址, 为空默认HTTP/1.1
    .参数 引用页, 文本型, 传址, 可为空
    .参数 识别类型, 文本型, 传址, 可为空
    .参数 dwFlags, 整数型, , 2147483648更新下载
    .参数 dwContext, 整数型, , 0

.DLL命令 _Http发送请求, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, 
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sHeaders, 文本型, 传址, 
    .参数 lHeadersLength, 整数型, , 
    .参数 sOptional, 文本型, 传址, 
    .参数 lOptionalLength, 整数型, , 

.DLL命令 _读取COOKIE, 逻辑型, "wininet.dll", "InternetGetCookieA", 公开, 
    .参数 域名, 文本型, 传址, 
    .参数 名称, 文本型, 传址, 
    .参数 内容, 文本型, 传址, 
    .参数 尺寸, 整数型, 传址, 

.DLL命令 _设置COOKIE, 逻辑型, "wininet.dll", "InternetSetCookieA", 公开, 
    .参数 域名, 文本型, 传址, 
    .参数 名称, 文本型, 传址, 
    .参数 内容, 文本型, 传址, 

.DLL命令 _取当前线程, 整数型, "", "GetCurrentThreadId", 公开, 获取当前线程一个唯一的线程标识符(返回线程标识符)

.DLL命令 _连接线程输入, 整数型, "", "AttachThreadInput", 公开, 允许线程和进程共享输入队列。连接了线程后，输入焦点、窗口激活、鼠标捕获、键盘状态以及输入队列状态都会进入共享状态
    .参数 dwthreadthis, 整数型, , 欲连接线程的标识符（ID）
    .参数 dwthreadforeground, 整数型, , 与idAttach线程连接的另一个线程的标识符
    .参数 fAttach, 逻辑型, , TRUE（非零）连接，FALSE撤消连接

.DLL命令 _创建线程, 整数型, "", "CreateThread", 公开, 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 _销毁定时器, 整数型, "", "KillTimer", 公开, 
    .参数 c1, 整数型, , 
    .参数 Timerid, 整数型, , 

.DLL命令 _创建定时器, 整数型, "", "SetTimer", 公开, 返回成功创建定时器的标志
    .参数 Thwnd, 整数型, , 为空则为系统级定时器
    .参数 nIDEvent, 整数型, , 除 0 之外任何整数型数值都可以
    .参数 uElapse, 整数型, , 毫秒级周期
    .参数 lpTimerFunc, 子程序指针, , 定时器触发事件

.DLL命令 _销毁线程, 空白型, "", "TerminateThread", 公开, 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 _HTTP查询信息, 逻辑型, "wininet.dll", "HttpQueryInfoA", 公开, 
    .参数 Internet请求句柄, 整数型, , 
    .参数 待查信息, 整数型, , 22返回所有信息;43SET_COOKIE;+2147483648返回文本
    .参数 返回容器, 文本型, 传址, 
    .参数 返回容器长度, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 获取特别文件夹位置_, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", 公开, 
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 整数型, , nFolder
    .参数 结构, 项目标识符列表_, 传址, pIdl

.DLL命令 SHBrowseForFolder, 整数型, "", "SHBrowseForFolderA", 公开, 
    .参数 lpBrowseInfo, BROWSEINFO, , 

.DLL命令 _从列表id取路径, 整数型, "", "SHGetPathFromIDListA", 公开, 
    .参数 pIdl, 整数型, , 
    .参数 pszPath, 文本型, 传址, 

.DLL命令 从列表id取路径_, 整数型, "shell32.dll", "SHGetPathFromIDListA", 公开, $(b)
    .参数 结构指针, 整数型, , pIdl
    .参数 路径, 文本型, 传址, pszPath

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 GetWindowText, 整数型, "user32.dll", "GetWindowTextA", 公开, 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 文本, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 文本长度, 整数型, , lp缓冲区的长度;  

.DLL命令 GetClassName, 整数型, "user32.dll", "GetClassNameA", 公开, 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 GetWindow, 整数型, "", "GetWindow", 公开, 获得一个窗口的句柄，该窗口与某源窗口有特定的关系(返回一个窗口句柄,没有找到或错误返回0)
    .参数 hwnd, 整数型, , 源窗口
    .参数 cmd, 整数型, , 指定结果窗口与源窗口的关系，它们建立在下述常数基础上

.DLL命令 _置父窗口, 整数型, "user32", "SetParent", 公开, 指定一个窗口的新父(返回  前一个父窗口的句柄)
    .参数 子窗口句柄, 整数型, , 子窗口的句柄
    .参数 父窗口句柄, 整数型, , hWndChild的新父

.DLL命令 _取父窗口, 整数型, "user32", "GetParent", 公开, 判断指定窗口的父窗口  父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄;

.DLL命令 _寻找子窗口, 整数型, "user32", "FindWindowExA", 公开, 寻找子窗口_
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。“”表示忽略
    .参数 欲搜索的类名2, 整数型, , 欲搜索的类名。“”表示忽略;

.DLL命令 _寻找子窗口2, 整数型, "user32", "FindWindowExA", 公开, 寻找子窗口_
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。“”表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。“”表示忽略;

.DLL命令 模拟键盘行动_, 整数型, "user32.dll", "keybd_event", 公开, 这个函数模拟了键盘行动
    .参数 键代码, 整数型, , bVk,欲模拟的虚拟键码
    .参数 键扫描码, 整数型, , bScan,键的OEM扫描码
    .参数 标志值, 整数型, , dwFlags,标志常数
    .参数 特定值, 整数型, , dwExtraInfo,通常不用的一个值

.DLL命令 _鼠标隐藏, 整数型, "", "ShowCursor", 公开, 控制鼠标指针的可视性(返回值:显示计数（参考注解）)
    .参数 bShow, 逻辑型, , （非零）显示指针，零 隐藏

.DLL命令 _限制鼠标, 空白型, "", "ClipCursor", 公开, 
    .参数 区域, 矩形_, , 

.DLL命令 _发送消息A, 整数型, "", "SendMessageA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 标识, 整数型, , 
    .参数 消息1, 整数型, , 
    .参数 消息2, 整数型, , 

.DLL命令 _发送消息, 整数型, "", "SendMessageA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 标识, 整数型, , 
    .参数 消息1, 整数型, , 
    .参数 消息2, 文本型, , 

.DLL命令 _投递消息, 空白型, "", "PostMessageA", 公开, 向指定窗口句柄发送消息
    .参数 h, 整数型, , 
    .参数 m, 整数型, , 
    .参数 p, 整数型, , 
    .参数 p, 整数型, , 

.DLL命令 _取当前窗口, 整数型, "user32", "GetForegroundWindow", 公开, 返回前台窗口句柄

.DLL命令 _取焦点句柄, 整数型, "", "GetFocus", 公开, 获得拥有输入焦点的窗口的句柄(输入框句柄)。如没有窗口拥有输入焦点，则返回零

.DLL命令 _寻找顶级窗口3, 整数型, "", "FindWindowA", 公开, 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 _寻找顶级窗口2, 整数型, "user32.dll", "FindWindowA", 公开, FindWindow,寻找窗口列表中第一个符合指定条件的顶级窗口
    .参数 窗口类名, 文本型, , lpClassName，参见相关帮助
    .参数 窗口文本, 整数型, , lpWindowName，参见相关帮助

.DLL命令 _寻找顶级窗口, 整数型, "user32", "FindWindowA", 公开, 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 重画窗口_, 逻辑型, "user32", "RedrawWindow", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形, 矩形坐标_, , 
    .参数 区域, 整数型, , 
    .参数 旗帜, 整数型, , 

.DLL命令 _窗口取外边框, 逻辑型, "user32.dll", "GetWindowRect", 公开, 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
    .参数 句柄, 整数型, , Long，想获得范围矩形的那个窗口的句柄
    .参数 大小, 矩形坐标_, 传址, RECT，屏幕坐标中随同窗口装载的矩形(左边,顶边,右边,底边)

.DLL命令 _取得窗口信息, 整数型, "user32.dll", "GetWindowLongA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 属性, 整数型, , 

.DLL命令 MoveWindow, 整数型, "user32", "MoveWindow", 公开, 
    .参数 hwnd, 整数型, , 备注1无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 x, 整数型, , 备注2无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 y, 整数型, , 备注3无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 n, 整数型, , 备注4无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 nHeight, 整数型, , 备注5无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 bRepaint, 整数型, , 备注6无法读取，请您提供该API名报易BBS中ID号klasp完善。

.DLL命令 _执行, 整数型, "", "ShellExecuteA", 公开, 
    .参数 hwnd, 整数型, , 指定一个窗口的句柄，有些时候，Windows程序有必要在创建自己的主窗口前显示一个消息框。
    .参数 lpOperation, 文本型, , 指定字串“Open”来打开lpFlie文档；或指定“Print”来打印它。也可设为vbNullString，表示默认为“Open”
    .参数 lpFile, 文本型, , 想用关联的程序打印或打开的一个程序名或文件名
    .参数 lpParameters, 文本型, , 如lpFile是一个可执行文件，则这个字串包含了传递给执行程序的参数。如lpFile引用的是一个文档文件，或者不需要使用参数，则设为vbNullString
    .参数 lpDirectory, 文本型, , 想使用的默认路径完整路径
    .参数 nShowCmd, 整数型, , 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数

.DLL命令 _取鼠标位置, 逻辑型, "user32.dll", "GetCursorPos", 公开, 
    .参数 光标位置, 坐标_, 传址, 

.DLL命令 _取内容, 整数型, "", "SendMessageA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wparam, 整数型, , 
    .参数 lparam, 文本型, , 

.DLL命令 _取坐标句柄, 整数型, "user32.dll", "WindowFromPoint", 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄)
    .参数 X轴光标, 整数型, , 
    .参数 Y轴光标, 整数型, , 

.DLL命令 _控制鼠标, 空白型, "user32", "mouse_event", 公开, 
    .参数 dwFlags, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 
    .参数 cButtons, 整数型, , 
    .参数 dwExtraInfo, 整数型, , 

.DLL命令 _移动鼠标, 空白型, "user32", "SetCursorPos", 公开, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 SetWaitableTimer, 整数型, "", "SetWaitableTimer", 公开, 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, LARGE_INTEGER, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 _创建新进程, 整数型, "", "CreateProcessA", 公开, 
    .参数 lpApplicationName, 整数型, , 要执行的应用程序的名字
    .参数 lpCommandLine, 文本型, , 要执行的命令行
    .参数 lpProcessAttributes, 整数型, , SECURITY_ATTRIBUTES，指定一个SECURITY_ATTRIBUTES结构，或传递零值表示采用不允许继承的默认描述符
    .参数 lpThreadAttributes, 整数型, , SECURITY_ATTRIBUTES，指定一个SECURITY_ATTRIBUTES结构，或传递零值表示采用不允许继承的默认描述符。
    .参数 bInheritHandles, 逻辑型, , TRUE表示允许当前进程中的所有句柄都由新建的子进程继承
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 任何类型，指向一个环境块的指针
    .参数 lpCurrentDriectory, 整数型, , 新进程的当前目录路径
    .参数 lpStartupInfo, STARTUPINFO, 传址, STARTUPINFO，指定一个STARTUPINFO结构，其中包含了创建进程时使用的附加信息
    .参数 lpProcessInformation, PROCESS_INFORMATION, 传址, PROCESS_INFORMATION，该结构用于容纳新进程的进程和线程标识。

.DLL命令 CreatePipe, 整数型, "", "CreatePipe", 公开, 
    .参数 phReadPipe, 整数型, 传址, 
    .参数 phWritePipe, 整数型, 传址, 
    .参数 lpPipeAttributes, SECURITY_ATTRIBUTES, 传址, 
    .参数 nSize, 整数型, , 

.DLL命令 CreateWaitableTimerA, 整数型, "", "CreateWaitableTimerA", 公开, 
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 SHFileOperationA, 整数型, "Shell32.dll", "SHFileOperationA", 公开, 
    .参数 ab, SHFILEOPSTRUCT_, , 

.DLL命令 _宽字符到双字节, 空白型, "kernel32.dll", "WideCharToMultiByte", 公开, 
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 字节集, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 _宽字符到双字节1, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开, 
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 整数型, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 _取文件长度, 整数型, "kernel32", "GetFileSizeEx", 公开, 
    .参数 hFile, 整数型, , 
    .参数 lpFileSizeHigh, 整数型, 传址, 

.DLL命令 _打开文件, 整数型, "kernel32", "_lopen", 公开, 
    .参数 lpPathName, 文本型, , 
    .参数 iReadWrite, 整数型, , 

.DLL命令 PeekNamedPipe, 整数型, "", "PeekNamedPipe", 公开, 
    .参数 hNamedPipe, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nBufferSize, 整数型, , 
    .参数 lpBytesRead, 整数型, , 
    .参数 lpTotalBytesAvail, 整数型, 传址, 
    .参数 lpBytesLeftThisMessage, 整数型, , 

.DLL命令 _关闭对象, 整数型, "kernel32", "CloseHandle", 公开, 
    .参数 对象句柄, 整数型, , 

.DLL命令 CloseHandle, 逻辑型, "", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "", "CreateCompatibleBitmap", 公开, 
    .参数 hdc, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 

.DLL命令 CreateCompatibleDC, 整数型, "", "CreateCompatibleDC", 公开, 
    .参数 hdc, 整数型, , 

.DLL命令 取设备场景_, 整数型, "", "GetDC", 公开, 获取指定窗口的设备场景　指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC; 

.DLL命令 TextOut_, 整数型, "gdi32", "TextOutA", 公开, 文本绘图函数。也请参考SetTextAlign　非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 x, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 y, 整数型, , 同上
    .参数 lpString, 文本型, , 欲描绘的字串
    .参数 nCount, 整数型, , 字串中要描绘的字符数量;  

.DLL命令 CopyMemory_BITMAPFILEHEADER, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_BITMAPINFO, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 整数型, , 

.DLL命令 GetDIBits, 整数型, "", "GetDIBits", 公开, 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits1, 整数型, "", "GetDIBits", 公开, 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetObjectA, 整数型, "", "GetObjectA", 公开, 
    .参数 hgdiobj, 整数型, , 
    .参数 cbBuffer, 整数型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 释放设备场景_, 整数型, "user32", "ReleaseDC", 公开, 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）　执行成功为1，否则为0
    .参数 窗口句柄, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , 要释放的设备场景句柄;  

.DLL命令 删除设备场景_, 整数型, "", "DeleteDC", 公开, 
    .参数 hdc, 整数型, , 

.DLL命令 删除对象_, 整数型, "gdi32", "DeleteObject", 公开, 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放　非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄;  

.DLL命令 PrintWindow, 逻辑型, "", "PrintWindow", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 选入设备场景_, 整数型, "gdi32", "SelectObject", 公开, 每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。例如，当前选定的画笔决定了在设备场景中描绘的线段颜色及样式　与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。如选定的对象是一个区域（Region），结果就是下列常数之一：SIMPLEREGION， ;    COMPLEXREGION 或 NULLREGION 对区域进行描述， GDI_ERROR 表示出错
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄
    .参数 对象句柄, 整数型, , 一个画笔、位图、刷子、字体或区域的句柄;  

.DLL命令 使用指定属性创建逻辑字体_, 整数型, "gdi32", "CreateFontIndirectA", 公开, 用指定的属性创建一种逻辑字体　执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, LOGFONT, , LOGFONT，这个结构定义了逻辑字体请求的属性;  

.DLL命令 SetBkColor_, 整数型, "gdi32", "SetBkColor", 公开, 为指定的设备场景设置背景颜色。背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode　前一个背景色，CLR_INVALID表示出错
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 crColor, 整数型, , 新背景颜色的RGB颜色值;  

.DLL命令 SetBkMode_, 整数型, "gdi32", "SetBkMode", 公开, 指定阴影刷子、虚线画笔以及字符中的空隙的填充方式　前一个背景模式的值
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBkMode, 整数型, , 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;  

.DLL命令 设置前景色_, 整数型, "gdi32", "SetTextColor", 公开, 设置当前文本颜色。这种颜色也称为“前景色”　文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 GetPixel, 整数型, "", "GetPixel", 公开, 取坐标颜色
    .参数 hdc, 整数型, , 场景句柄
    .参数 X, 整数型, , X坐标
    .参数 Y, 整数型, , Y坐标

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "MsgWaitForMultipleObjects", 公开, 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 _枚举窗口, 逻辑型, "", "EnumWindows", 公开, 
    .参数 枚举过程, 子程序指针, , 
    .参数 参数, 整数型, , 

.DLL命令 _设置窗口标题, 整数型, "user32", "SetWindowTextA", 公开, 设置窗口的标题文字或控件的内容（在vb里使用：针对vb窗体，应使用caption或text属性）　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要设置文字的窗口的句柄
    .参数 窗口标题, 文本型, , 要设到hwnd窗口中的文字;

.DLL命令 _取窗口大小, 整数型, "user32", "GetClientRect", 公开, 返回指定窗口客户区矩形的大小 (Long，非零表示成功，零表示失败。)
    .参数 hwnd, 整数型, , Long，欲计算大小的目标窗口
    .参数 lpRect, 矩形_, , RECT，指定一个矩形，用客户区域的大小载入（以像素为单位）

.DLL命令 _取窗口区域位置, 整数型, "user32.dll", "ClientToScreen", 公开, 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 坐标_, , lpPoint，参见相关帮助

.DLL命令 _句柄是否有效, 整数型, "user32", "IsWindow", 公开, 判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型, , 待检查窗口的句柄

.DLL命令 _窗口是否可见, 整数型, "", "IsWindowVisible", 公开, 判断窗口是否可见  如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _窗口是否最小化, 整数型, "", "IsIconic", 公开, 判断窗口是否已最小化 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _窗口是否最大化, 整数型, "", "IsZoomed", 公开, 判断窗口是否已最大化 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _判断按键状态, 整数型, "", "GetAsyncKeyState", 公开, 判断函数调用时指定虚拟键的状态 (非按住状态返回0) 
    .参数 键代码, 整数型, , 欲测试的虚拟键的键码

.DLL命令 _判断鼠标双击间隔, 整数型, "", "GetDoubleClickTime", 公开, 判断连续两次鼠标单击之间会被处理成双击事件的间隔时间 以毫秒表示的双击时间

.DLL命令 _窗口置焦点, 整数型, "", "SetFocus", 公开, 将输入焦点设到指定的窗口。如有必要，会激活窗口  (返回前一个拥有焦点的窗口的句柄)
    .参数 窗口句柄, 整数型, , 准备接收焦点的窗口的句柄(必须为同一线程)

.DLL命令 _窗口置前台, 整数型, "", "SetForegroundWindow", 公开, 将窗口设为系统的前台窗口。可用于改变用户目前正在操作的应用程序 (非零表示成功，零表示失败)
    .参数 窗口句柄, 整数型, , 带到前台的窗口

.DLL命令 _窗口禁止, 整数型, "user32", "EnableWindow", 公开, 在指定的窗口里允许或禁止所有鼠标及键盘输入(非零表示成功，零表示失败)  也可用于外部按钮解除禁止(或其它一些禁止的控件)
    .参数 hwnd, 整数型, , 窗口或控件的句柄
    .参数 fEnable, 整数型, , 非零允许窗口，零禁止

.DLL命令 _透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", 公开, 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 _回调钩子, 整数型, "", "CallWindowProcA", 公开, 
    .参数 窗口程序程序指针, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 _注册热键, 整数型, "user32.dll", "RegisterHotKey", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 id, 整数型, , 
    .参数 fsModifoers, 整数型, , 
    .参数 vk, 整数型, , 

.DLL命令 _撤消热键钩子, 整数型, "", "UnregisterHotKey", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 HotKeyID, 整数型, , 

.DLL命令 _设置窗口特征, 子程序指针, "", "SetWindowLongA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 特征索引, 整数型, , 
    .参数 新特征, 子程序指针, , 

.DLL命令 _设置窗口信息, 整数型, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 SetWindowPos, 空白型, "", "SetWindowPos", 公开, SetWindowPos(hwnd,hWndInsertAfter,x,y,cx,cy,wFlags)
    .参数 hwnd, 整数型, , 欲定位的窗口
    .参数 hWndInsertAfter, 整数型, , 
    .参数 x, 整数型, , 窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 y, 整数型, , 窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 cx, 整数型, , 指定新的窗口宽度
    .参数 cy, 整数型, , 指定新的窗口高度
    .参数 wFlags, 整数型, , 

.DLL命令 _控制窗口状态, 整数型, "", "ShowWindow", 公开, 控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由命令
    .参数 nCmdShow, 整数型, , 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活  1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

.DLL命令 _系统声音, 整数型, "", "MessageBeep", 公开, 播放一个系统声音。系统声音的分配方案是在控制面板里决定的 (非零表示成功，零表示失败)
    .参数 wType, 整数型, , 标准响铃 系统星号声 系统惊叹声 系统指针声 系统提问声

.DLL命令 _创建快照, 整数型, "", "CreateToolhelp32Snapshot", 公开, 
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 _第一个, 整数型, "", "Process32First", 公开, 
    .参数 h, 整数型, , 
    .参数 p, 进程信息_, , 

.DLL命令 _下一个, 整数型, "", "Process32Next", 公开, 
    .参数 h, 整数型, , 
    .参数 p, 进程信息_, , 

.DLL命令 _第一个模块, 整数型, "", "Module32First", 公开, 第一个模块，查找模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息_, , 

.DLL命令 _下一个模块, 整数型, "kernel32.dll", "Module32Next", 公开, 下一个模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息_, , 

.DLL命令 _获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", 公开, 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 进程权限_, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 进程权限_, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 _置进程权限, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", 公开, 使能/取消令牌特权
    .参数 令牌句柄, 整数型, , 
    .参数 DisableAllPrivileges, 逻辑型, , 
    .参数 NewState, 进程权限_, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 整数型, , 
    .参数 ReturnLength, 整数型, , 

.DLL命令 _打开令牌对象, 逻辑型, "advapi32.dll", "OpenProcessToken", 公开, 打开过程令牌对象
    .参数 进程句柄, 整数型, , 
    .参数 权限, 整数型, , 
    .参数 令牌句柄, 整数型, 传址, 

.DLL命令 _打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", 公开, 打开过程令牌对象
    .参数 ProcessHandle, 整数型, , 进程句柄
    .参数 DesiredAccess, 整数型, , 权限
    .参数 TokenHandle, 整数型, 传址, 令牌句柄

.DLL命令 _取权限令牌, 整数型, "advapi32.dll", "LookupPrivilegeValueA", 公开, 返回特权名LUID
    .参数 系统服务名, 整数型, , lpSystemName
    .参数 权限名, 文本型, 传址, 
    .参数 权限结构, LuID_, 传址, 

.DLL命令 _恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", 公开, 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID_, 传址, 

.DLL命令 _取自进程ID, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 

.DLL命令 _终止进程, 整数型, "", "TerminateProcess", 公开, 
    .参数 id, 整数型, , 
    .参数 a, 整数型, , 

.DLL命令 _获取线程, 整数型, "kernel32.dll", "GetCurrentProcess", 公开, 

.DLL命令 _打开进程, 整数型, "kernel32.dll", "OpenProcess", 公开, 
    .参数 访问级别, 整数型, , 2035711完全访问
    .参数 子进程继承, 整数型, , 0为子进程继承
    .参数 进程ID, 整数型, , 要打开的进程标识

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 OpenProcess2, 整数型, "", "OpenProcess", 公开, 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 CreateRemoteThread, 整数型, "", "CreateRemoteThread", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 GetExitCodeThread, 逻辑型, "", "GetExitCodeThread", 公开, 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 WaitForSingleObject, 整数型, "", "WaitForSingleObject", 公开, 
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 _进程暂停, 空白型, "NTDLL.DLL", "ZwSuspendProcess", 公开, 暂停
    .参数 进程句柄, 整数型, , 

.DLL命令 _进程恢复, 空白型, "NTDLL.DLL", "ZwResumeProcess", 公开, 恢复
    .参数 进程句柄, 整数型, , 

.DLL命令 VirtualQueryEx, 整数型, "", "VirtualQueryEx", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 info, MEMORY_BASIC_INFORMATION, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 LocalFree, 整数型, "", "LocalFree", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 LocalAlloc, 整数型, "", "LocalAlloc", 公开, 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 LocalSize, 整数型, "", "LocalSize", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 _取内存参数, 空白型, "", "GlobalMemoryStatus", 公开, 
    .参数 内存参数, 内存参数_, , 

.DLL命令 _写内存, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 dest, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 length, 整数型, , 

.DLL命令 _读内存, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 dest, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 length, 整数型, , 

.DLL命令 _内存读文本, 逻辑型, "", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 文本型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 

.DLL命令 _内存读字节集, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 _内存读整数, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写字节集, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写整数, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写文本, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _取窗口进程ID, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 InstallWinIoDriver, 逻辑型, "WinIo.dll", "InstallWinIoDriver", 公开, 安装WinIo驱动(忽略)
    .参数 DriverPath, 文本型, , 
    .参数 Mode, 短整数型, , 

.DLL命令 RemoveWinIoDriver, 逻辑型, "WinIo.dll", "RemoveWinIoDriver", 公开, 卸载WinIo驱动(忽略)

.DLL命令 openwinio, 逻辑型, "WinIo.dll", "InitializeWinIo", 公开, 初始化WioIO库。调用成功，返回非零值

.DLL命令 closewinio, 逻辑型, "WinIo.dll", "ShutdownWinIo", 公开, 在内存中关闭清除WinIO库

.DLL命令 读端口, 逻辑型, "WinIo.dll", "GetPortVal", 公开, 从一个输入或输出端口读取一个字节/字/双字数据。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, 传址, 指向双字变量的指针，接收从端口得到的数据。
    .参数 bSize, 字节型, , 需要读的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 写端口, 逻辑型, "WinIo.dll", "SetPortVal", 公开, 将一个字节/字/双字的数据写入输入或输出接口。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, , 要写入的数据
    .参数 bSize, 字节型, , 需要写入的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 开始内存映射, 整数型, "WinIo.dll", "MapPhysToLin", 公开, 将物理内存的一部分映射到一个32位程序的线性地址空间。成功返回一个与物理地址相关的线性地址，错误返回NULL
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysSize, 整数型, , 需要映射的字节数
    .参数 PhysMemHandle, 整数型, 传址, 变量指针，如果调用成功，负责接收物理内存句柄。(any)

.DLL命令 解除内存映射, 逻辑型, "WinIo.dll", "UnmapPhysicalMemory", 公开, 解除使用MapPhysToLin映射的一段线性物理内存区域
    .参数 PhysMemHandle, 整数型, , 物理内存句柄(any)
    .参数 LinAddr, 整数型, , MapPhysToLin函数调用返回的线性地址

.DLL命令 读内存双字数据, 逻辑型, "WinIo.dll", "GetPhysLong", 公开, 从指定的物理地址读取一个双字数据。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, 传址, 指向一个双字变量的指针，接收从物理内存中传来的数据。

.DLL命令 写内存双字数据, 逻辑型, "WinIo.dll", "SetPhysLong", 公开, 将一个双字型数据写入指定的物理地址。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, , 指定待写入物理内存地址出的双字型数据。

.DLL命令 _键码转换, 整数型, "", "MapVirtualKeyA", 公开, 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.DLL命令 创建事件同步对象, 空白型, "", "CreateEventA", 公开, 
    .参数 lpEventAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 bInitialState, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 打开事件同步对象, 整数型, "", "OpenEventA", 公开, 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 EnableMenuItem, 整数型, "user32.dll", "EnableMenuItem", 公开, 允许或禁止指定的菜单条目
    .参数 hMenu, 整数型, , 
    .参数 wIDEnableItem, 整数型, , 
    .参数 wEnable, 整数型, , 

.DLL命令 GetSystemMenu, 整数型, "user32", "GetSystemMenu", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 bRevert, 整数型, , 

.DLL命令 OpenIcon, 整数型, "user32", "OpenIcon", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 安装钩子_, 整数型, "", "SetWindowsHookExA", 公开, 钩子
    .参数 ihook, 整数型, , 
    .参数 lpfunc, 子程序指针, , 
    .参数 hin, 整数型, , 
    .参数 threadid, 整数型, , 

.DLL命令 GetModuleHandleA, 整数型, "", "GetModuleHandleA", 公开, 
    .参数 lpModuleName, 文本型, , 

.DLL命令 _取模块句柄, 整数型, "", "GetModuleHandleA", 公开, 钩子
    .参数 lpModuleName, 整数型, , 

.DLL命令 卸载钩子_, 整数型, "", "UnhookWindowsHookEx", 公开, 钩子
    .参数 hHook, 整数型, , 

.DLL命令 下一个钩子, 整数型, "", "CallNextHookEx", 公开, 钩子
    .参数 hHook, 整数型, , 
    .参数 icode, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 CopyMemory, 空白型, "", "RtlMoveMemory", 公开, 钩子
    .参数 Destination, 按键信息_, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 CreateWindowExA, 整数型, "", "CreateWindowExA", 公开, 
    .参数 dwExStyle, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 lpWindowName, 文本型, , 
    .参数 dwStyle, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 hMenu, 整数型, , 
    .参数 hInstance, 整数型, , 
    .参数 lpParam, 整数型, , 

.DLL命令 RegisterClassExA, 整数型, "", "RegisterClassExA", 公开, 
    .参数 lpwcx, WNDCLASSEX, , 

.DLL命令 GetClassInfoExA, 整数型, "", "GetClassInfoExA", 公开, 
    .参数 hinst, 整数型, , 
    .参数 lpszClass, 文本型, , 
    .参数 lpwcx, WNDCLASSEX, , 

.DLL命令 UnregisterClassA, 逻辑型, "", "UnregisterClassA", 公开, 
    .参数 lpClassName, 文本型, , 
    .参数 hInstance, 整数型, , 

.DLL命令 VirtualProtect, 逻辑型, "", "VirtualProtect", 公开, 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flNewProtect, 整数型, , 
    .参数 lpflOldProtect, 整数型, 传址, 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", 公开, 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 _取屏幕句柄, 整数型, "user32.dll", "GetDesktopWindow", 公开, 返回屏幕的句柄

.DLL命令 _窗口闪动, 空白型, "user32.dll", "FlashWindow", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 闪动, 逻辑型, , 是否闪动窗口

.DLL命令 ACallWindowProcA, 整数型, "user32.dll", "CallWindowProcA", 公开, ,
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 ASetWindowLongA, 整数型, "user32", "SetWindowLongA", 公开, , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 子程序指针, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 ASetTimer, 整数型, "user32.dll", "SetTimer", 公开, ,
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 回调函数地址, 整数型, , lpTimerFunc

.DLL命令 AGetCursorPos, 整数型, "user32", "GetCursorPos", 公开, ,
    .参数 位置, A坐标_, , 

.DLL命令 AMoveWindow, 整数型, "user32.dll", "MoveWindow", 公开, ,
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 AGetWindowRect, 整数型, "user32", "GetWindowRect", 公开, ,
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, A矩形_, , 

.DLL命令 AKillTimer, 整数型, "user32.dll", "KillTimer", 公开, ,
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 ASetCapture, 整数型, "user32", "SetCapture", 公开, ,
    .参数 窗口句柄, 整数型, , 

.DLL命令 AReleaseCapture_, 整数型, "user32", "ReleaseCapture", 公开, ,

.DLL命令 _取启动参数, 文本型, "kernel32.dll", "GetCommandLineA", 公开, 

.DLL命令 APeekMessage, 整数型, "user32", "PeekMessageA", 公开, 从线索消息队列中返回一条消息--等待延时　
    .参数 lpMsg, AMSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 stat, 整数型, , 

.DLL命令 ACreateThread, 整数型, "kernel32", "ACreateThread", 公开, 启动线程
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 ACloseHandle, 整数型, "kernel32", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 ASetProcessWorkingSetSize, 整数型, "kernel32", "SetProcessWorkingSetSize", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 dwMinimumWorkingSetSize, 整数型, , 
    .参数 dwMaximumWorkingSetSize, 整数型, , 

.DLL命令 GetWindowLongno, 整数型, "user32", "GetWindowLongA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 SetWindowLongno, 整数型, "user32", "SetWindowLongA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 禁止创建进程, 整数型, "boardid.dll", "StartHook", 公开, 

.DLL命令 允许创建进程, 整数型, "boardid.dll", "UnLoadHook", 公开, 

.DLL命令 _ZwQuerySystemInformation, 整数型, "ntdll.dll", "ZwQuerySystemInformation", 公开, 
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 SystemInformation, 字节集, , any
    .参数 SystemInformationLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 _取指针_字节集, 整数型, "", "lstrcpyn", 公开, 常规API
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 _RtlMoveMemory3, 整数型, "", "RtlMoveMemory", 公开, 常规API,从地址读一个整数
    .参数 dest, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 len, 整数型, , 4

.DLL命令 _ZwOpenProcess, 整数型, "ntdll.dll", "ZwOpenProcess", 公开, 
    .参数 hProcess, 整数型, 传址, 
    .参数 DesiredAccess, 整数型, , 
    .参数 ObjectAttributes, OBJECT_ATTRIBUTES_, , 
    .参数 ClientId, CLIENT_ID_, , 

.DLL命令 _RtlMoveMemory1, 整数型, "", "RtlMoveMemory", 公开, 常规API
    .参数 dest, SYSTEM_HANDLE_TABLE_ENTRY_INFO_, , 
    .参数 Source, 整数型, , 
    .参数 len, 整数型, , 284

.DLL命令 _ZwQueryInformationProcess, 整数型, "ntdll.dll", "ZwQueryInformationProcess", 公开, 
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 dd, 整数型, , 
    .参数 SystemInformation, PROCESS_BASIC_INFORMATION_, , any
    .参数 SystemInformationLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 _ZwDuplicateObject, 整数型, "ntdll.dll", "_ZwDuplicateObject", 公开, 
    .参数 SourceProcessHandle, 整数型, , 
    .参数 SourceHandle, 整数型, , 
    .参数 TargetProcessHandle, 整数型, , 
    .参数 TargetHandle, 整数型, 传址, 
    .参数 DesiredAccess, 整数型, , 
    .参数 HandleAttributes, 整数型, , 
    .参数 Options, 整数型, , 

.DLL命令 _ZwCreateJobObject, 整数型, "ntdll.dll", "_ZwCreateJobObject", 公开, 
    .参数 JobHandle, 整数型, 传址, 
    .参数 DesiredAccess, 整数型, , 
    .参数 ObjectAttributes, OBJECT_ATTRIBUTES_, , 

.DLL命令 _ZwAssignProcessToJobObject, 整数型, "ntdll.dll", "_ZwAssignProcessToJobObject", 公开, 
    .参数 JobHandle, 整数型, , 
    .参数 ProcessHandle, 整数型, , 

.DLL命令 _ZwTerminateJobObject, 整数型, "ntdll.dll", "_ZwTerminateJobObject", 公开, 
    .参数 JobHandle, 整数型, , 
    .参数 ExitStatus, 整数型, , 

.DLL命令 _ZwTerminateProcess, 整数型, "ntdll.dll", "_ZwTerminateProcess", 公开, 
    .参数 ProcessHandle, 整数型, , 
    .参数 ExitStatus, 整数型, , 

.DLL命令 _ZwClose, 整数型, "ntdll.dll", "ZwClose", 公开, 
    .参数 hnd, 整数型, , 

.DLL命令 俘获鼠标, 空白型, "", "SetCapture", 公开, 
    .参数 窗口句柄, 整数型, , 

.DLL命令 释放鼠标, 空白型, "", "ReleaseCapture", 公开, 

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 VirtualFreeEx, 整数型, "", "VirtualFreeEx", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBuf, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 dwFreeType, 整数型, , 

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", 公开, 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 LoadLibraryEx, 整数型, "kernel32.dll", "LoadLibraryExA", 公开, 
    .参数 lpLibFileName, 文本型, 传址, 
    .参数 hFile, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 FreeLibrary, 整数型, "kernel32.dll", "FreeLibrary", 公开, 
    .参数 hModule, 整数型, , 

.DLL命令 OpenProcess_A, 整数型, "", "OpenProcess", 公开, 
    .参数 dwDesiredAccess_A, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 ZwWriteVirtualMemory_A, 整数型, "NTDLL.DLL", "ZwWriteVirtualMemory", 公开, 
    .参数 ProcessHandle, 整数型, , 
    .参数 BaseAddress, 整数型, , 
    .参数 pBuffer, 字节集, , 
    .参数 NumberOfBytesToWrite, 整数型, , 
    .参数 NumberOfBytesWritten, 整数型, 传址, 

.DLL命令 ZwProtectVirtualMemory_A, 整数型, "NTDLL.DLL", "ZwProtectVirtualMemory", 公开, 
    .参数 ProcessHandle, 整数型, , 
    .参数 BaseAddress, 整数型, , 
    .参数 RegionSize, 整数型, , 
    .参数 NewProtect, 整数型, , 
    .参数 OldProtect, 整数型, , 

.DLL命令 ZwClose_A, 整数型, "NTDLL.DLL", "ZwClose", 公开, 
    .参数 ObjectHandle, 整数型, , 

.DLL命令 RegisterHotKey_B, 整数型, "user32.dll", "RegisterHotKey", 公开, ,
    .参数 窗口句柄, 整数型, , hWnd
    .参数 热键id, 整数型, , id
    .参数 功能键, 整数型, , fsModifiers
    .参数 主热键, 整数型, , vk

.DLL命令 SetWindowLongA_B, 整数型, "user32", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 CallWindowProcA_B, 整数型, "user32.dll", "CallWindowProcA", 公开, 将消息传答窗口函数，返回值指定了消息处理结果，它与发送的消息有关
    .参数 lpPrevWndFunc, 整数型, , 指向前一个窗口过程的指针
    .参数 hWnd, 整数型, , 指向接收消息的窗口过程的句柄
    .参数 Msg, 整数型, , 指定消息类型
    .参数 wParam, 整数型, , 指定其余的、消息特定的信息。该参数的内容与Msg参数值有关
    .参数 iParam, 整数型, , 指定其余的、消息特定的信息。该参数的内容与Msg参数值有关

.DLL命令 UnregisterHotKey_B, 整数型, "user32.dll", "UnregisterHotKey", 公开, 该函数释放调用线程先前登记的热键
    .参数 hWnd, 整数型, , 与被释放的热键相关的窗口句柄。若热键不与窗口相关，则该参数为NULL
    .参数 id, 整数型, , 定义被释放的热键的标识符

.DLL命令 InitializeCriticalSection_C, 空白型, "", "InitializeCriticalSection_C", 公开, 创建许可证
    .参数 lpCriticalSection, 多线程许可证_C, 传址, 

.DLL命令 DeleteCriticalSection_C, 空白型, "", "DeleteCriticalSection_C", 公开, 删除许可证
    .参数 lpCriticalSection, 多线程许可证_C, 传址, 

.DLL命令 EnterCriticalSection_C, 空白型, "", "EnterCriticalSection_C", 公开, 进入许可区
    .参数 lpCriticalSection, 多线程许可证_C, 传址, 

.DLL命令 LeaveCriticalSection_C, 空白型, "", "LeaveCriticalSection_C", 公开, 退出许可区
    .参数 lpCriticalSection, 多线程许可证_C, 传址, 

.DLL命令 CreateThread_C, 整数型, "", "CreateThread_C", 公开, 启动线程
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 WaitForSingleObject_C, 整数型, "", "WaitForSingleObject", 公开, 监测一个对象
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 SuspendThread_C, 整数型, "", "SuspendThread", 公开, 挂起线索
    .参数 hThread, 整数型, , 

.DLL命令 TerminateThread_C, 整数型, "", "TerminateThread", 公开, 中止线索
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 ResumeThread_C, 整数型, "", "ResumeThread", 公开, 开始暂停的线索
    .参数 hThread, 整数型, , 

.DLL命令 GetExitCodeThread_C, 整数型, "", "GetExitCodeThread", 公开, 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 读整数内存_, 整数型, "kernel32", "ReadProcessMemory", 公开, 在进程中读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 读文本内存_, 整数型, "kernel32", "ReadProcessMemory", 公开, 在进程中读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 读字节集内存_, 整数型, "kernel32", "ReadProcessMemory", 公开, 在进程中读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 写文本内存_, 整数型, "kernel32", "WriteProcessMemory", 公开, 在进程中读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 写字节集内存_, 整数型, "kernel32", "WriteProcessMemory", 公开, 在进程中读内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 双字节到宽字符1_, 整数型, "SHLWAPI", "#217", 公开, SHUnicodeToAnsi
    .参数 双字节文本, 字节集, , lpMultiBVytestyr
    .参数 宽字符文本, 文本型, 传址, lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar

.DLL命令 写整数内存_, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 在指定进程中写内存
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 打开进程_, 整数型, "kernel32.dll", "OpenProcess", 公开, 将句柄返回给过程对象
    .参数 进程对象, 整数型, , dwDesiredAccess
    .参数 继承句柄, 整数型, , bInheritHandle
    .参数 进程标识符, 整数型, , dwProcessId

.DLL命令 CloseHandle_C, 整数型, "kernel32", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 初始化环境_D, 整数型, "wininet.dll", "InternetOpenA", 公开, 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 连接FTP_D, 整数型, "wininet.dll", "InternetConnectA", 公开, 
    .参数 hInternetSession, 整数型, , 
    .参数 sServerName, 文本型, , 
    .参数 nServerPort, 短整数型, , 
    .参数 sUsername, 文本型, , 
    .参数 sPassword, 文本型, , 
    .参数 lService, 整数型, , 
    .参数 lFlags, 整数型, , 
    .参数 lContext, 整数型, , 

.DLL命令 FtpGetFile_D, 逻辑型, "WinInet", "FtpGetFileA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszRemoteFile, 文本型, , 
    .参数 lpszNewFile, 文本型, , 
    .参数 fFailIfExists, 整数型, , 
    .参数 dwFlagsAndAttributes, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 FtpPutFile_D, 逻辑型, "WinInet", "FtpPutFileA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszLocalFile, 文本型, , 
    .参数 lpszNewRemoteFile, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 FtpDeleteFile_D, 逻辑型, "WinInet", "FtpDeleteFileA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszKillFile, 文本型, , 

.DLL命令 InternetCloseHandle_D, 短整数型, "wininet.dll", "InternetCloseHandle", 公开, 
    .参数 hInet, 整数型, , 

.DLL命令 FtpSetCurrentDirectory_D, 逻辑型, "WinInet", "FtpSetCurrentDirectoryA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszDirectory, 文本型, , 

.DLL命令 FtpGetCurrentDirectory_D, 整数型, "WinInet", "FtpGetCurrentDirectoryA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszDirectory, 文本型, 传址, 
    .参数 BuffLength, 整数型, 传址, 

.DLL命令 FtpRenameFile_D, 逻辑型, "WinInet", "FtpRenameFileA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszCurFile, 文本型, , 
    .参数 lpszNewFile, 文本型, , 

.DLL命令 FtpCreateDirectory_D, 逻辑型, "WinInet", "FtpCreateDirectoryA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszNewDir, 文本型, , 

.DLL命令 FtpRemoveDirectory_D, 逻辑型, "WinInet", "FtpRemoveDirectoryA", 公开, 
    .参数 hFtp, 整数型, , 
    .参数 lpszKillDir, 文本型, , 

.DLL命令 RegConnectRegistryA_E, 整数型, "advapi32.dll", "RegConnectRegistryA", 公开, 访问远程注册表_, RegConnectRegistry，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 欲连接的系统, 文本型, , lpMachineName，欲连接的系统。采用“\\计算机名”的形式
    .参数 项句柄, 整数型, , hKey，HKEY_LOCAL_MACHINE 或 HKEY_USERS
    .参数 指定项句柄, 整数型, 传址, phkResult,用于装载指定项句柄的一个变量

.DLL命令 RegCreateKeyA_E, 整数型, "advapi32.dll", "RegCreateKeyA", 公开, 创建注册表项_, RegCreateKey，在指定的项下创建一个新项。如指定的项已经存在，那么函数会打开现有的项
    .参数 项句柄, 整数型, , hKey，Long，要打开项的句柄，或者一个标准项名
    .参数 项文本, 文本型, , lpSubKey，String，欲创建的新子项。可同时创建多个项，只需用反斜杠将它们分隔开即可。例如level1\level2\newkey
    .参数 返回项句柄, 整数型, 传址, phkResult，Long，指定一个变量，用于装载新子项的句柄

.DLL命令 RegSetValueA_E, 整数型, "advapi32.dll", "RegSetValueA", 公开, 设置指定项或子项默认值_, RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 项句柄, 整数型, , hkey，Long，一个已打开项的句柄，或指定一个标准项名
    .参数 子项名字, 文本型, 传址, lpSubKey，String，欲对它的值进行设置的一个子项的名字。如指定vbNullString，表示设置hKey的默认值。如指定的子项不存在，则会创建它
    .参数 类型, 整数型, , dwType，Long，必须是REG_SZ
    .参数 新值, 文本型, 传址, lpData，String，新值
    .参数 新值长度, 整数型, , cbData，Long，指定lpData的长度，不包括空中止字符

.DLL命令 RegFlushKey_E, 整数型, "advapi32.dll", "RegFlushKey", 公开, 写出注册表缓存_, RegFlushKey，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 标准项名或项句柄, 整数型, , hKey，Long，欲刷新的一个项的句柄，或指定一个标准项名

.DLL命令 RegDeleteValueA_E, 整数型, "advapi32.dll", "RegDeleteValueA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 

.DLL命令 RegDeleteKeyA_E, 整数型, "advapi32.dll", "RegDeleteKeyA", 公开, 删除指定注册表项_, RegDeleteKey，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 标准项名或项句柄, 整数型, , hkey，一个已打开项的句柄，或者标准项名之一
    .参数 删除项的名字, 文本型, , lpsubkey，要删除项的名字。这个项的所有子项也会删除

.DLL命令 RegEnumValueA_E, 整数型, "advapi32.dll", "RegEnumValueA", 公开, 零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 句柄, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 表项索引, 整数型, , 欲获取值的索引。注意第一个值的索引编号为零
    .参数 子键名, 文本型, 传址, 用于装载位于指定索引处值名的一个缓冲区
    .参数 子键长度, 整数型, 传址, 用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 lpReserved, 整数型, , 0,未用设为零
    .参数 键值类型, 整数型, 传址, 值的类型，用于装载值的类型代码的变量
    .参数 键值数据, 字节集, 传址, 用于装载值数据的一个缓冲区
    .参数 键值缓寸, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 RegOpenKeyA_E, 整数型, "advapi32.dll", "RegOpenKeyA", 公开, 打开一个现有的注册表项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpSubKey, 文本型, , 要打开的项名
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载（保存）打开注册表项的一个句柄;

.DLL命令 RegCloseKey_E, 整数型, "advapi32.dll", "RegCloseKey", 公开, 关闭系统注册表中的一个项（或键）  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要关闭的项;

.DLL命令 RegEnumKeyA_E, 整数型, "advapi32.dll", "RegEnumKeyA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpName, 文本型, 传址, 
    .参数 cbName, 整数型, 传址, 

.DLL命令 RegQueryValueExA_E, 整数型, "advapi32.dll", "RegQueryValueExA", 公开, 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegSetValueExA_文本_E, 整数型, "advapi32.dll", "RegSetValueExA", 公开, RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 
    .参数 pValueName, 文本型, , 
    .参数 Reserved, 整数型, , Long，未用，设为零
    .参数 dwType, 整数型, , 
    .参数 lpData, 文本型, 传址, 
    .参数 cbData, 整数型, , 

.DLL命令 RegSetValueExA_整数_E, 整数型, "advapi32.dll", "RegSetValueExA", 公开, RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 pValueName, 文本型, , 要设置值的名字
    .参数 Reserved, 整数型, , 未用，设为零
    .参数 dwType, 整数型, , 要设置的数量类型
    .参数 lpData, 整数型, 传址, 包含数据的缓冲区中的第一个字节
    .参数 cbData, 整数型, , lpData缓冲区的长度

.DLL命令 RegSetValueExA_字节集_E, 整数型, "advapi32.dll", "RegSetValueExA", 公开, RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 pValueName, 文本型, , 要设置值的名字
    .参数 Reserved, 整数型, , 未用，设为零
    .参数 dwType, 整数型, , 要设置的数量类型
    .参数 lpData, 字节集, 传址, 包含数据的缓冲区中的第一个字节
    .参数 cbData, 整数型, , lpData缓冲区的长度

.DLL命令 SetParent_A, 整数型, "", "SetParent", 公开, 
    .参数 hWndChild, 整数型, , 
    .参数 hWndNewParent, 整数型, , 

.DLL命令 取窗口矩形_A, 整数型, "user32.dll", "GetWindowRect", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, 矩形_, , 

.DLL命令 改变窗口_A, 整数型, "user32.dll", "MoveWindow", 公开, 
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 EnumWindows_, 整数型, "user32", "EnumWindows", 公开, 
    .参数 lpEnumFunc, 子程序指针, , 
    .参数 参数, 整数型, 数组, 

.DLL命令 PathMatchSpec_, 逻辑型, "shlwapi.dll", "PathMatchSpecA", 公开, 
    .参数 pszFile, 文本型, , 
    .参数 pszSpec, 文本型, , 

.DLL命令 GetClassName_, 整数型, "user32", "GetClassNameA", 公开, 
    .参数 句柄, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", 公开, 发送消息
    .参数 句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 lstrcpyn_文本, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 lpString1, 文本型, , 
    .参数 lpString2, 文本型, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 lstrcpyn_整数, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 LCMapString_, 整数型, "kernel32", "LCMapStringA", 公开, 
    .参数 Locale, 整数型, , 
    .参数 dwMapFlags, 整数型, , 
    .参数 lpSrcStr, 文本型, , 
    .参数 cchSrc, 整数型, , 
    .参数 lpDestStr, 文本型, , 
    .参数 cchDest, 整数型, , 

.DLL命令 EnumChildWindows_, 整数型, "user32", "EnumChildWindows", 公开, 
    .参数 hWndParent, 整数型, , 
    .参数 lpEnumFunc, 子程序指针, , 
    .参数 参数, 整数型, 数组, 

.DLL命令 EnableWindow_, 整数型, "user32", "EnableWindow", 公开, 
    .参数 句柄, 整数型, , 
    .参数 fEnable, 整数型, , 

.DLL命令 _GetDeviceCaps_, 整数型, "gdi32", "GetDeviceCaps", 公开, 
    .参数 设备描述句柄, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 _DeleteDC_, 整数型, "gdi32", "DeleteDC", 公开, 
    .参数 设备描述句柄, 整数型, , 

.DLL命令 _GetDC_, 整数型, "", "GetDC", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 _CreateCompatibleBitmap_, 整数型, "", "CreateCompatibleBitmap", 公开, 
    .参数 hdc, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 

.DLL命令 _SelectObject_, 整数型, "", "SelectObject", 公开, 
    .参数 hdc, 整数型, , 
    .参数 hgdiobj, 整数型, , 

.DLL命令 _BitBlt_, 整数型, "", "BitBlt", 公开, 
    .参数 hdcDest, 整数型, , 
    .参数 nXDest, 整数型, , 
    .参数 nYDest, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hdcSrc, 整数型, , 
    .参数 nXSrc, 整数型, , 
    .参数 nYSrc, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 _CreateCompatibleDC_, 整数型, "", "CreateCompatibleDC", 公开, 
    .参数 hdc, 整数型, , 

.DLL命令 _DeleteObject_, 整数型, "", "DeleteObject", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 _CopyImage_, 整数型, "", "_CopyImage_", 公开, 
    .参数 hImage, 整数型, , 
    .参数 uType, 整数型, , 
    .参数 cxDesired, 整数型, , 
    .参数 cyDesired, 整数型, , 
    .参数 fuFlags, 整数型, , 

.DLL命令 _ReleaseDC_, 整数型, "", "ReleaseDC", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 _GetWindowRect_, 整数型, "user32", "GetWindowRect", 公开, 
    .参数 句柄, 整数型, , 
    .参数 lpRect, _矩形区域_, 传址, 

.DLL命令 _IsWindow_, 逻辑型, "user32", "IsWindow", 公开, 
    .参数 句柄, 整数型, , 

.DLL命令 _CopyMemory_BITMAPFILEHEADER_, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, _BITMAPFILEHEADER_, , 
    .参数 Length, 整数型, , 

.DLL命令 _CopyMemory_BITMAPINFO_, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, _BITMAPINFO_, , 
    .参数 Length, 整数型, , 

.DLL命令 _GetDIBits_, 整数型, "", "GetDIBits", 公开, 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, _BITMAPINFO_, , 
    .参数 wUsage, 整数型, , 

.DLL命令 _GetObject_, 整数型, "", "GetObjectA", 公开, 
    .参数 hgdiobj, 整数型, , 
    .参数 cbBuffer, 整数型, , 
    .参数 lpvObject, _BITMAP_, , 

.DLL命令 _GetDIBits_BimapInfo_, 整数型, "", "GetDIBits", 公开, 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, _BITMAPINFO_, , 
    .参数 wUsage, 整数型, , 

.DLL命令 _PrintWindow_, 逻辑型, "", "_PrintWindow_", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 _CreateDC_, 整数型, "gdi32", "CreateDCA", 公开, 
    .参数 lpDriverName, 文本型, , 
    .参数 lpDeviceName, 整数型, , 
    .参数 lpOutput, 整数型, , 
    .参数 lpInitData, 整数型, , 

.DLL命令 _RtlMoveMemory_, 空白型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 _lstrcpyn_, 整数型, "", "lstrcpyn", 公开, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 _GlobalAlloc_, 整数型, "kernel32", "_GlobalAlloc_", 公开, 
    .参数 uFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 _GlobalLock_, 整数型, "kernel32", "_GlobalLock_", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 _CopyMemory_, 空白型, "kernel32", "RtlMoveMemory", 公开, 
    .参数 Destination, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 _GlobalUnlock_, 整数型, "kernel32", "_GlobalUnlock_", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 _CreateStreamOnHGlobal_, 整数型, "ole32", "_CreateStreamOnHGlobal_", 公开, 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 _CLSIDFromString_, 整数型, "ole32", "_CLSIDFromString_", 公开, 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 _OleLoadPicture_, 整数型, "olepro32", "_OleLoadPicture_", 公开, 
    .参数 pStream, 整数型, , 
    .参数 lSize, 整数型, , 
    .参数 fRunmode, 整数型, , 
    .参数 riid, 字节集, 传址, 
    .参数 ppvObj, 整数型, 传址, 

.DLL命令 _GlobalFree_, 整数型, "kernel32", "_GlobalFree_", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 _P_INT32_, 整数型, "", "lstrcatA", 公开, 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 _CallWindowProc_, 整数型, "", "CallWindowProcA", 公开, 
    .参数 动态调用代码, 字节集, , 
    .参数 子程序, 整数型, , 
    .参数 参数, 整数型, 数组, 
    .参数 参数数目, 整数型, , 
    .参数 是否C调用, 逻辑型, , 

.DLL命令 _OpenClipboard_, 整数型, "user32", "OpenClipboard", 公开, 
    .参数 句柄, 整数型, , 

.DLL命令 _GetClipboardData_, 整数型, "user32", "GetClipboardData", 公开, 
    .参数 wFormat, 整数型, , 

.DLL命令 _CloseClipboard_, 整数型, "user32", "CloseClipboard", 公开, 

.DLL命令 _SetClipboardData_, 整数型, "", "SetClipboardData", 公开, 
    .参数 uFormat, 整数型, , 
    .参数 hMem, 整数型, , 

.DLL命令 _RtlMoveMemory_整数_, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 _文本_取长度_, 整数型, "kernel32", "lstrlenA", 公开, 
    .参数 lpString, 文本型, , 

.DLL命令 _MultiByteToWideChar_, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 _GetObjectPtr_, 整数型, "", "lstrcpyn", 公开, 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 _GdipCreateBitmapFromStream_, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", 公开, 
    .参数 stream, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 _GdipSaveImageToStream_int_, 整数型, "gdiplus.dll", "GdipSaveImageToStream", 公开, 
    .参数 image, 整数型, , 
    .参数 stream, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 _GetHGlobalFromStream_int_, 空白型, "ole32.dll", "GetHGlobalFromStream", 公开, 
    .参数 pstm, 整数型, , 
    .参数 phglobal, 整数型, 传址, 

.DLL命令 _GlobalSize_, 整数型, "", "_GlobalSize_", 公开, 
    .参数 hMem, 整数型, , 

.DLL命令 _CopyMemory2_, 空白型, "", "RtlMoveMemory", 公开, 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 _GdipDisposeImage_, 整数型, "gdiplus.dll", "GdipDisposeImage", 公开, 
    .参数 image, 整数型, , 

.DLL命令 _GdiplusStartup_, 整数型, "gdiplus.dll", "GdiplusStartup", 公开, 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, _GdiplusStartupInput_, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 _GdiplusShutdown_, 空白型, "gdiplus.dll", "GdiplusShutdown", 公开, 
    .参数 token, 整数型, , 

.DLL命令 IsWindow, 整数型, "user32", "IsWindow", 公开, 判断一个窗口句柄是否有效　非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 待检查窗口的句柄;  

.DLL命令 CreateThread, 整数型, "", "CreateThread", 公开, CreateThread
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 SetWindowText, 整数型, "user32", "SetWindowTextA", 公开, 设置窗口的标题文字或控件的内容（在vb里使用：针对vb窗体，应使用caption或text属性）　非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 要设置文字的窗口的句柄
    .参数 lpString, 文本型, , 要设到hwnd窗口中的文字;

.DLL命令 NtQuerySystemInformation_spi, 整数型, "ntdll", "NtQuerySystemInformation", 公开, 
    .参数 dwInfoType, 整数型, , 
    .参数 lpStructure, SYSTEM_PERFORMANCE_INFORMATION, , 
    .参数 dwSize, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 NtQuerySystemInformation_sti, 整数型, "ntdll", "NtQuerySystemInformation", 公开, 
    .参数 dwInfoType, 整数型, , 
    .参数 lpStructure, SYSTEM_TIME_INFORMATION, , 
    .参数 dwSize, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", 公开, 
    .参数 hWnd1, 整数型, , 
    .参数 hWnd2, 整数型, , 
    .参数 lpsz1, 文本型, , 
    .参数 lpsz2, 文本型, , 

.DLL命令 GetWindowRect, 整数型, "user32", "GetWindowRect", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, RECT, 传址, 

.DLL命令 GetCursorPos, 整数型, "user32", "GetCursorPos", 公开, 
    .参数 lpPoint, POINTAPI, 传址, 

.DLL命令 SetCursorPos, 整数型, "user32", "SetCursorPos", 公开, 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 FindWindowA, 整数型, "user32.dll", "FindWindowA", 公开, 
    .参数 窗口类名, 文本型, , 
    .参数 窗口文本, 文本型, , 

.DLL命令 SetProcessWorkingSetSize, 整数型, "kernel32", "SetProcessWorkingSetSize", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 dwMinimumWorkingSetSize, 整数型, , 
    .参数 dwMaximumWorkingSetSize, 整数型, , 

.DLL命令 PeekMessage_, 整数型, "user32", "PeekMessageA", 公开, 从线索消息队列中返回一条消息--等待延时　
    .参数 lpMsg, MSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 stat, 整数型, , 

.DLL命令 API_寻找子窗口_, 整数型, "user32", "FindWindowExA", 公开, 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。零表示忽略;

.DLL命令 API_PostMessage_, 整数型, "user32", "PostMessageA", 公开, 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 hwnd, 整数型, , 接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考PostThreadMessage）
    .参数 wMsg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 屏蔽窗口矩形_, 整数型, "user32.dll", "InvalidateRect", 公开, , 这个函数屏蔽一个窗口客户区的全部或部分区域
    .参数 窗口句柄, 整数型, , hwnd,待屏蔽窗口的句柄
    .参数 屏蔽矩形, _矩形区域_, , lpRect,用于描述待屏蔽矩形部分的一个矩形结构
    .参数 重画前删除, 整数型, , bErase,TRUE（非零）导致指定的区域在重画前先删除

.DLL命令 鼠标隐藏显示, 整数型, "", "ShowCursor", 公开, 控制鼠标指针的可视性(返回值:显示计数（参考注解）)
    .参数 bShow, 整数型, , （非零）显示指针，零 隐藏

.DLL命令 AGetWindowLong, 整数型, "user32", "GetWindowLongA", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 ASetWindowLong, 整数型, "user32", "SetWindowLongA", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 ASetWindowPos, 整数型, "", "SetWindowPos", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 
    .参数 d, 整数型, , 
    .参数 e, 整数型, , 
    .参数 f, 整数型, , 
    .参数 g, 整数型, , 

.DLL命令 AGetForegroundwindow, 整数型, "user32", "GetForegroundWindow", 公开, 

.DLL命令 SetLayeredWindowAttributes, 整数型, "user32", "SetLayeredWindowAttributes", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 crKey, 整数型, , 
    .参数 bAlpha, 字节型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetGetConnectedStateEx, 整数型, "wininet.dll", "InternetGetConnectedStateEx", 公开, 
    .参数 lpdwFlags, 整数型, 传址, 
    .参数 lpszConnectionName, 文本型, 传址, 
    .参数 dwNameLen, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 InternetGetConnectedState, 空白型, "Wininet.dll", "InternetGetConnectedState", 公开, 
    .参数 lpdwFlags, 整数型, 传址, 
    .参数 dwReserved, 整数型, , 

.DLL命令 InternetOpenA, 整数型, "Wininet.dll", "InternetOpenA", 公开, 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 整数型, , 
    .参数 lpszProxyBypass, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetOpenUrlA, 整数型, "Wininet.dll", "InternetOpenUrlA", 公开, 
    .参数 hInternet, 整数型, , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 InternetReadFile, 整数型, "Wininet.dll", "InternetReadFile", 公开, 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", 公开, 
    .参数 子程序指针, 子程序指针, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 显示隐藏窗口, 整数型, "user32.dll", "ShowWindow", 公开, 
    .参数 窗口, 整数型, , 
    .参数 控制参数, 整数型, , 

.DLL命令 锁键, 空白型, "user32.dll", "SystemParametersInfoA", 公开, 禁用ctrl+alt+del  锁键 (97, 1, 0, 0)     可用ctrl+alt+del     锁键 (97, 0, 0, 0)
    .参数 SPI_SCREENSAVERRUNNING, 整数型, , 
    .参数 可否, 整数型, , 0为可，1为否
    .参数 zyqingf, 整数型, , 
    .参数 zyf, 整数型, , 

.DLL命令 InternetCloseHandle, 空白型, "Wininet.dll", "InternetCloseHandle", 公开, 
    .参数 handle, 整数型, , 

.DLL命令 IsDebuggerPresent, 整数型, "kernel32.dll", "IsDebuggerPresent", 公开, 

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", 公开, 获取调用过程堆句柄

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", 公开, 从堆中分配内存
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 HeapFree, 整数型, "kernel32.dll", "HeapFree", 公开, 释放从堆中分配的内存
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMem, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 获取当前进程一个唯一的标识符  当前的进程标识符

.DLL命令 DebugActiveProcess, 整数型, "kernel32.dll", "DebugActiveProcess", 公开, 连接调试进程
    .参数 dwProcessId, 整数型, , 

.DLL命令 移动Shell消息结构内存, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 pDest, SHNOTIFYSTRUCT, , 根据需要可以设置成不同的类型
    .参数 pSource, 整数型, , 根据需要可以设置成不同的类型
    .参数 dwLength, 整数型, , 

.DLL命令 移动整数型内存, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, 
    .参数 pDest, 整数型, 传址, 
    .参数 pSource, 整数型, , 
    .参数 dwLength, 整数型, , 

.DLL命令 释放任务内存, 整数型, "ole32.dll", "CoTaskMemFree", 公开, 
    .参数 pv, 整数型, , 

.DLL命令 取指定文件夹位置, 整数型, "shell32.dll ", "SHGetSpecialFolderLocation", 公开, 
    .参数 hwndOwner, 整数型, , 
    .参数 nFolder, 整数型, , 
    .参数 pidl, 整数型, 传址, 

.DLL命令 从索引列表获取路径, 整数型, "shell32.dll", "SHGetPathFromIDListA", 公开, 
    .参数 pidl, 整数型, , 
    .参数 pszPath, 文本型, , 

.DLL命令 取文件信息PIDL, 整数型, "shell32.dll", "SHGetFileInfoA", 公开, 
    .参数 pidl, 整数型, , 
    .参数 dwFileAttributes, 整数型, , 
    .参数 psfib, SHFILEINFOBYTE, , 
    .参数 cbFileInfo, 整数型, , 
    .参数 uFlags, 整数型, , 

.DLL命令 取文件信息, 整数型, "shell32.dll", "SHGetFileInfoA", 公开, 
    .参数 pszPath, 文本型, , 
    .参数 dwFileAttributes, 整数型, , 
    .参数 psfi, SHFILEINFO, , 
    .参数 cbFileInfo, 整数型, , 
    .参数 uFlags, 整数型, , 

.DLL命令 Shell更改通知注册, 整数型, "shell32.dll", "#2", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 uFlags, 整数型, , 
    .参数 dwEventID, 整数型, , 
    .参数 uMsg, 整数型, , 
    .参数 cItems, 整数型, , 
    .参数 lpps, PIDLSTRUCT, , 

.DLL命令 撤消Shell更改通知注册, 整数型, "shell32.dll", "#4", 公开, 
    .参数 hNotify, 整数型, , 

.DLL命令 Shell更改通知, 整数型, "shell32.dll", "SHChangeNotify", 公开, 
    .参数 wEventId, 整数型, , 
    .参数 uFlags, 整数型, , 
    .参数 dwItem1, 整数型, , 
    .参数 dwItem2, 整数型, , 

.DLL命令 生成声音_, 整数型, "kernel32.dll", "Beep", 公开, , Beep,用于生成简单的声音  Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 声音频率, 整数型, , dwFreq,声音频率（从37Hz到32767Hz）Long，声音频率（从37Hz到32767Hz）。在windows95中忽略
    .参数 声音持续时间, 整数型, , dwDuration,参见相关帮助Long，声音的持续时间，以毫秒为单位。如为-1，表示一直播放声音，直到再次调用该函数为止。在windows95中会被忽略

.DLL命令 Beep, 整数型, "kernel32.dll", "Beep", 公开, , Beep,用于生成简单的声音  Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 声音频率, 整数型, , dwFreq,声音频率（从37Hz到32767Hz）Long，声音频率（从37Hz到32767Hz）。在windows95中忽略
    .参数 声音持续时间, 整数型, , dwDuration,参见相关帮助Long，声音的持续时间，以毫秒为单位。如为-1，表示一直播放声音，直到再次调用该函数为止。在windows95中会被忽略

.DLL命令 取字节数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 字节型, 传址, lpString1
    .参数 数据2, 字节型, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取字节数组数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 字节型, 传址 数组, lpString1
    .参数 数据2, 字节型, 传址 数组, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取字节集数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 字节集, 传址, lpString1
    .参数 数据2, 字节集, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取文本数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 文本型, 传址, lpString1
    .参数 数据2, 文本型, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取文本数组数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 文本型, 传址 数组, lpString1
    .参数 数据2, 文本型, 传址 数组, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取整数数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 整数型, 传址, lpString1
    .参数 数据2, 整数型, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 取整数数组数据地址_, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 整数型, 传址 数组, lpString1
    .参数 数据2, 整数型, 传址 数组, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 lstrcpyn, 整数型, "kernel32.dll", "lstrcpyn", 公开, lstrcpyn
    .参数 数据1, 文本型, 传址, lpString1
    .参数 数据2, 文本型, 传址, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 置线程优先级_, 整数型, "kernel32", "SetThreadPriority", 公开, $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
    .参数 线程句柄, 整数型, , hThread
    .参数 优先权, 整数型, , nPriority 例如:-2 更过自己去搜索下

.DLL命令 SetThreadPriority, 整数型, "kernel32", "SetThreadPriority", 公开, $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
    .参数 线程句柄, 整数型, , hThread
    .参数 优先权, 整数型, , nPriority 例如:-2 更过自己去搜索下

.DLL命令 置进程优先级_, 整数型, "kernel32", "SetPriorityClass", 公开, $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 
    .参数 级别, 整数型, , 例如:64 更过自己去搜索下

.DLL命令 SetPriorityClass, 整数型, "kernel32", "SetPriorityClass", 公开, $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 
    .参数 级别, 整数型, 数组, 例如:64 更过自己去搜索下

.DLL命令 取线程优先级_, 整数型, "kernel32", "GetThreadPriority", 公开, GetThreadPriority
    .参数 线程句柄, 整数型, , 线程句柄

.DLL命令 取特定进程优先级_, 整数型, "kernel32", "GetPriorityClass", 公开, GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 进程句柄;

.DLL命令 GetThreadPriority, 整数型, "kernel32", "GetThreadPriority", 公开, GetThreadPriority
    .参数 线程句柄, 整数型, , 线程句柄

.DLL命令 GetPriorityClass, 整数型, "kernel32", "GetPriorityClass", 公开, GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , 进程句柄;

.DLL命令 取当前线程伪句柄_, 整数型, "kernel32", "GetCurrentThread", 公开, GetCurrentThread $(b)获取当前线程的一个伪句柄  当前线程的伪句柄

.DLL命令 取当前进程伪句柄_, 整数型, "kernel32", "GetCurrentProcess", 公开, GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄 一般是-1

.DLL命令 GetCurrentThread, 整数型, "kernel32", "GetCurrentThread", 公开, GetCurrentThread$(b)获取当前线程的一个伪句柄  当前线程的伪句柄一般是-2

.DLL命令 GetCurrentProcess, 整数型, "kernel32", "GetCurrentProcess", 公开, GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄

.DLL命令 退出线程_, 整数型, "kernel32", "ExitThread", 公开, ExitThread
    .参数 线程句柄, 整数型, , 

.DLL命令 ExitThread, 整数型, "kernel32", "ExitThread", 公开, ExitThread
    .参数 线程句柄, 整数型, , 

.DLL命令 关机对话框_, 整数型, "shell32.dll", "#60", 公开, #60
    .参数 参数, 整数型, , YourGuess

.DLL命令 复制文件_, 整数型, "kernel32.dll", "CopyFileA", 公开, 
    .参数 源文件名, 文本型, , lpExistingFileName，被复制的文件名
    .参数 目标文件名, 文本型, , lpNewFileName，目标文件名
    .参数 是否覆盖, 整数型, , bFailIfExists，非0不覆盖，0覆盖

.DLL命令 删除文件_, 整数型, "Kernel32.dll", "DeleteFileA", 公开, 删除指定文件
    .参数 文件名, 文本型, , lpFileName,欲删除文件的名字

.DLL命令 最小化窗口_, 整数型, "user32.dll", "CloseWindow", 公开, 非0表示成功，0表示失败
    .参数 窗口句柄, 整数型, , hwnd，欲最小化窗口的窗口句柄

.DLL命令 取文件属性_, 整数型, "kernel32", "GetFileAttributesA", 公开,  1、#只读文件； 2、#隐藏文件；  4、#系统文件； 16、#子目录；32、#存档文件 要判断是否设置了某个属性，在返回值与想要得知的属性值之间使用“位与”命令进行比较。如果所得的结果不为零，则表示设置了这个属性值。如果取文件属性失败，将返回 -1。
    .参数 文件名, 文本型, , 

.DLL命令 取文件扩展名_, 整数型, "shlwapi.dll", "PathFindExtensionA", 公开, 无扩展名返回空 得到的返回整数值要进过  指针到文本代码  才可以取得
    .参数 文件路径, 文本型, , pszPath  

.DLL命令 删除扩展名_, 空白型, "shlwapi.dll", "PathRemoveExtensionA", 公开,   比如: C:\Documents and Settings\Administrator\桌面\1.exe  返回C:\Documents and Settings\Administrator\桌面\1
    .参数 文件路径, 文本型, , pszPath  得到的变量保存在文本路径中

.DLL命令 NtShutdownSystem, 整数型, "ntdll.dll", "NtShutdownSystem", 公开, 
    .参数 se_, 整数型, , 0为关机，1为重起

.DLL命令 RtlAdjustPrivilege, 整数型, "ntdll.dll", "RtlAdjustPrivilege", 公开, 
    .参数 se_, 整数型, , 
    .参数 true_, 逻辑型, , 
    .参数 hprocess, 整数型, , 
    .参数 ret, 整数型, 传址, 

.DLL命令 播放声音文件_, 整数型, "winmm.dll", "PlaySoundA", 公开, 播放声音文件
    .参数 声音文件名, 文本型, , lpszName
    .参数 模块句柄, 整数型, , hModule 一般填写1
    .参数 标志, 整数型, , dwFlags 一般填写0

.DLL命令 是否为管理员_, 整数型, "advpack.dll", "IsNTAdmin", 公开, ' 返回值非0为管理员
    .参数 参数1, 整数型, , dwReserved,默认0
    .参数 参数2, 整数型, , lpdwReserved,默认0

.DLL命令 ShellExecute, 整数型, "", "ShellExecuteA", 公开, 执行命令
    .参数 窗口句柄, 整数型, , 父窗口句柄,可为0 hwnd   0  指定一个窗口的句柄，有时候，windows程序有必要在创建自己的主窗口前显示一个消息框
    .参数 操作方式, 文本型, , lpOperation“open”  指定字串“open”来打开lpFlie文档，或指定“Print”来打印它
    .参数 链接地址, 文本型, , lpFile要打开的网页地址  或 mailo:709760015@qq.com  想用关联程序打印或打开一个程序名或文件名
    .参数 命令行参数, 文本型, , lpParameters“”或"0" 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
    .参数 完整路径, 文本型, , lpDirectory“”或"0" 想使用的完整路径
    .参数 窗口显示方式, 短整数型, , nShowCmd 5或1 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.DLL命令 SetWindowTextW, 整数型, "user32.dll", "SetWindowTextA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 取标题文本长度_, 整数型, "user32.dll", "GetWindowTextLengthA", 公开, 
    .参数 窗口句柄, 整数型, , 

.DLL命令 取窗口标题_, 整数型, "user32", "GetWindowTextA", 公开, 一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）  复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 文本型, , 预定义的一个缓冲区，至少有cch+1个字
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;

.DLL命令 设置窗口标题, 整数型, "user32.dll", "SetWindowTextA", 公开, 

.DLL命令 WritePrivateProfileString, 整数型, "kernel32", "WritePrivateProfileStringA", 公开, 相当于写配置项
    .参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
    .参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
    .参数 欲写入值, 文本型, , lpString，项和值字串的一个列表。
    .参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。

.DLL命令 取当前目录_, 整数型, "kernel32", "GetCurrentDirectoryA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 GetPrivateProfileStringA, 整数型, "kernel32", "GetPrivateProfileStringA", 公开, 相当于读配置项
    .参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
    .参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
    .参数 默认文本, 文本型, , lpString，项和值字串的一个列表。
    .参数 返回文本, 文本型, , String，指定一个字串缓冲区，长度至少为nSize
    .参数 返回文本大小, 整数型, , Long，指定装载到lpReturnedString缓冲区的最大字符数量
    .参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。

.DLL命令 初始化配置项_, 整数型, "kernel32.dll", "WritePrivateProfileSectionA", 公开, $(b)
    .参数 节名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写
    .参数 配置项名称, 文本型, , lpString，项和值字串的一个列表。
    .参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。

.DLL命令 获取配置项列表_, 整数型, "kernel32", "GetPrivateProfileSectionA", 公开, 相当于取配置节名 
    .参数 节名称, 文本型, , lpAppName
    .参数 返回文本, 文本型, , lpReturnedString
    .参数 返回文本大小, 整数型, , nSize
    .参数 配置项文件名, 文本型, , lpFileName

.DLL命令 MessageBox, 整数型, "", "MessageBoxA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 提示信息, 文本型, , 
    .参数 窗口标题, 文本型, , 
    .参数 按钮值, 整数型, , 

.DLL命令 MessageBoxW, 整数型, "", "MessageBoxW", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 提示信息, 文本型, , 
    .参数 窗口标题, 文本型, , 
    .参数 按钮值, 整数型, , 

.DLL命令 lstrlenA, 整数型, "kernel32.dll", "lstrlenA", 公开, 
    .参数 文本lpString, 文本型, , 

.DLL命令 lstrcatA, 整数型, "kernel32", "lstrcatA", 公开, 
    .参数 文本lpString1被赋值的文本, 文本型, , lpString1
    .参数 文本lpString2用作赋值的文本, 文本型, , lpString2

.DLL命令 lstrcpyA, 整数型, "kernel32.dll", "lstrcpyA", 公开, 
    .参数 文本lpString1被赋值的文本, 文本型, , 
    .参数 文本lpString2用作赋值的文本, 文本型, , 

.DLL命令 GetCurrentDirectoryA, 整数型, "kernel32", "GetCurrentDirectoryA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 目录是否为空_, 整数型, "shlwapi.dll", "PathIsDirectoryEmptyA", 公开, 是返回非0，不存在或不是空目录返回0
    .参数 路径文本, 文本型, , pszPath

.DLL命令 退出进程_, 整数型, "kernel32", "ExitProcess", 公开, 
    .参数 进程句柄, 整数型, , 

.DLL命令 PathIsDirectoryEmptyA, 整数型, "shlwapi.dll", "PathIsDirectoryEmptyA", 公开, 是返回非0，不存在或不是空目录返回0
    .参数 路径文本, 文本型, , pszPath

.DLL命令 ExitProcess, 整数型, "kernel32", "ExitProcess", 公开, 
    .参数 进程句柄, 整数型, , 

.DLL命令 取得Win目录_, 整数型, "kernel32.dll", "GetWindowsDirectoryA", 公开, ,取得WINDOWS  返回的值后面没有"\" 你可以自己增加上去
    .参数 缓冲区, 文本型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 GetWindowsDirectoryA, 整数型, "kernel32.dll", "GetWindowsDirectoryA", 公开, ,取得WINDOWS  返回的值后面没有"\" 你可以自己增加上去
    .参数 缓冲区, 文本型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 取计算机名_, 整数型, "kernel32", "GetComputerNameA", 公开, , TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 GetComputerNameA, 整数型, "kernel32", "GetComputerNameA", 公开, , TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 取系统目录_, 逻辑型, "shell32.dll", "SHGetSpecialFolderPathA", 公开, ' 只要改变API“取系统目录”参数中的“标识”值，就可以取不同的目录   0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]
    .参数 窗口句柄, 整数型, , 
    .参数 路径, 文本型, , 
    .参数 标识, 整数型, , ' 只要改变API“取系统目录”参数中的“标识”值，就可以取不同的目录
    .参数 是否创建, 逻辑型, , 真：不存在就创建，假：不创建

.DLL命令 SHGetSpecialFolderPathA, 逻辑型, "shell32.dll", "SHGetSpecialFolderPathA", 公开, ' 只要改变API“取系统目录”参数中的“标识”值，就可以取不同的目录
    .参数 窗口句柄, 整数型, , 
    .参数 路径, 文本型, , 
    .参数 标识, 整数型, , ' 只要改变API“取系统目录”参数中的“标识”值，就可以取不同的目录
    .参数 是否创建, 逻辑型, , 真：不存在就创建，假：不创建

.DLL命令 GetSystemDirectory, 整数型, "", "GetSystemDirectoryA", 公开, 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 取system32目录_, 整数型, "", "GetSystemDirectoryA", 公开, 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 GetTempPathA, 整数型, "", "GetTempPathA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 取临时目录_, 整数型, "", "GetTempPathA", 公开, 
    .参数 缓冲区长度, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 鼠标左右键, 整数型, "user32.dll", "SwapMouseButton", 公开, 决定是否互换鼠标左右键的功能  TRUE（非零）表示鼠标按钮的功能在调用这个函数之前已经互换；否则返回零
    .参数 鼠标按钮的功能, 整数型, , 倘若为TRUE（非零），则互换两个鼠标按钮的功能。FALSE则恢复正常状态;

.DLL命令 SwapMouseButton, 整数型, "user32.dll", "SwapMouseButton", 公开, 决定是否互换鼠标左右键的功能  TRUE（非零）表示鼠标按钮的功能在调用这个函数之前已经互换；否则返回零
    .参数 鼠标按钮的功能, 整数型, , 倘若为TRUE（非零），则互换两个鼠标按钮的功能。FALSE则恢复正常状态;

.DLL命令 取屏幕句柄_, 整数型, "user32", "GetDesktopWindow", 公开, 返回屏幕句柄

.DLL命令 GetDesktopWindow, 整数型, "user32", "GetDesktopWindow", 公开, 返回屏幕句柄

.DLL命令 删除文件, 整数型, "kernel32", "DeleteFileA", 公开, 非零表示成功，零表示失败
    .参数 欲删除文件的名字, 文本型, , 

.DLL命令 DeleteFile, 整数型, "kernel32", "DeleteFileA", 公开, 非零表示成功，零表示失败
    .参数 欲删除文件的名字, 文本型, , 

.DLL命令 建立模板目录_, 整数型, "kernel32.dll", "CreateDirectoryExA", 公开, Long，非零表示成功，零表示失败。
    .参数 模板目录, 文本型, , 
    .参数 新目录名称, 文本型, , lpNewDirectory，新目录名称
    .参数 安全属性, 整数型, , lpSecurityAttributes  一般为0即可

.DLL命令 CreateDirectoryExA, 整数型, "kernel32.dll", "CreateDirectoryExA", 公开, Long，非零表示成功，零表示失败。
    .参数 模板目录, 文本型, , 
    .参数 新目录名称, 文本型, , lpNewDirectory，新目录名称
    .参数 安全属性, 整数型, , lpSecurityAttributes  一般为0即可

.DLL命令 十六进制转十进制_, 整数型, "shlwapi.dll", "StrToIntExA", 公开, StrToIntExA 成功返回1(非0) 失败返回0 可以判断是不是输入的不是 O到9  A到F
    .参数 转换文本, 文本型, , pszString  “0x” ＋ 转换文本    pszString  一般为 如果标志为0的话 则直接填写 转换文本 如果标志为1的话 转换文本="0x"+转换文本
    .参数 标志, 整数型, , dwFlags    1     dwFlags 标志为0则为10进制 标志为1则为十六进制
    .参数 返回值, 整数型, 传址, piRet       得到的10进制

.DLL命令 删除指定目录_, 整数型, "kernel32.dll", "RemoveDirectoryA", 公开, RemoveDirectory，删除指定目录，在调用这个函数前，目录必须为空    
    .参数 目录的名字, 文本型, , lppatename，String，要删除的那个目录的名字

.DLL命令 创建目录_, 整数型, "shell32.dll", "SHCreateDirectoryExA", 公开, 非零则成功 0为失败
    .参数 窗口句柄, 整数型, , hwnd
    .参数 路径, 文本型, , pszPath
    .参数 参数, 整数型, , psa，any  一般为0即可

.DLL命令 RemoveDirectoryA, 整数型, "kernel32.dll", "RemoveDirectoryA", 公开, RemoveDirectory，删除指定目录，在调用这个函数前，目录必须为空    
    .参数 目录的名字, 文本型, , lppatename，String，要删除的那个目录的名字

.DLL命令 添加新分区_, 空白型, "kernel32", "DefineDosDeviceA", 公开, 
    .参数 类型, 整数型, , 0 为创建   3 为删除
    .参数 新区名, 文本型, , 比如:  H:  
    .参数 创建虚拟新区的目录, 文本型, , 当你选择3时，一定要为空

.DLL命令 调用系统关于窗口, 整数型, "shell32.dll", "ShellAboutA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 
    .参数 说明, 文本型, , 
    .参数 图标句柄, 整数型, , 比如 _启动窗口.发送信息 (127, 1, 0)

.DLL命令 ShellAboutA, 整数型, "shell32.dll", "ShellAboutA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 
    .参数 说明, 文本型, , 
    .参数 图标句柄, 整数型, , 比如 _启动窗口.发送信息 (127, 1, 0)

.DLL命令 DefineDosDeviceA, 空白型, "kernel32", "DefineDosDeviceA", 公开, 
    .参数 类型, 整数型, , 0 为创建   3 为删除
    .参数 新区名, 文本型, , 比如:  H:  
    .参数 创建虚拟新区的目录, 文本型, , 当你选择3时，一定要为空

.DLL命令 取鼠标位置_, 整数型, "user32", "GetCursorPos", 公开, 
    .参数 位置, 鼠标坐标GetCursorPos, , 

.DLL命令 取鼠标所在窗口句柄_, 整数型, "user32.dll", "WindowFromPoint", 公开, ,
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 WindowFromPoint, 整数型, "user32.dll", "WindowFromPoint", 公开, ,
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 取指定点窗口句柄_, 整数型, "user32.dll", "WindowFromPoint", 公开, ,
    .参数 横坐标, 整数型, , xPoint，x点值
    .参数 纵坐标, 整数型, , yPoint，y点值

.DLL命令 取进程版本_, 整数型, "kernel32.dll", "GetProcessVersion", 公开, 
    .参数 进程标识符ProcessId, 整数型, , ProcessId

.DLL命令 GetProcessVersion, 整数型, "kernel32.dll", "GetProcessVersion", 公开, 
    .参数 进程标识符ProcessId, 整数型, , ProcessId

.DLL命令 取前台窗口句柄_, 整数型, "user32", "GetForegroundWindow", 公开, 

.DLL命令 GetForegroundWindow, 整数型, "user32", "GetForegroundWindow", 公开, 

.DLL命令 取得当前活动窗口句柄_, 整数型, "user32", "GetForegroundWindow", 公开, 

.DLL命令 SHCreateDirectoryExA, 整数型, "shell32.dll", "SHCreateDirectoryExA", 公开, 非零则成功 0为失败
    .参数 窗口句柄, 整数型, , hwnd
    .参数 路径, 文本型, , pszPath
    .参数 参数, 整数型, , psa，any  一般为0即可

.DLL命令 窗口置顶_, 整数型, "user32.dll", "BringWindowToTop", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.DLL命令 运行WinExec_, 整数型, "", "WinExec", 公开, 成功则返回33  失败返回2
    .参数 欲运行的命令行, 文本型, , 欲运行的文件名
    .参数 被运行程序窗口显示方式, 整数型, , ：0、#隐藏窗口；1、#普通激活； 2、#最小化激活； 3、#最大化激活； 4、#普通不激活； 5、#最小化不激活

.DLL命令 运行WinExec_1, 整数型, "", "WinExec", 公开, 成功则返回33  失败返回2
    .参数 欲运行的命令行, 文本型, , 欲运行的文件名
    .参数 被运行程序窗口显示方式, 整数型, , ：0、#隐藏窗口；1、#普通激活； 2、#最小化激活； 3、#最大化激活； 4、#普通不激活； 5、#最小化不激活

.DLL命令 提取文件图标_, 整数型, "shell32.dll", "ExtractIconA", 公开, 判断一个可执行文件或DLL中是否有图标存在，并将其提取出来
    .参数 程序句柄, 整数型, , hInst,当前应用程序的实例句柄也可用GetWindowWord函数取得拥有一个窗体或控件的实例的句柄
    .参数 文件名, 文本型, , lpszExeFileName,在其中提取图标的那个程序的全名
    .参数 图标索引, 整数型, , nIconIndex,欲获取的图标的索引

.DLL命令 ExtractIconA, 整数型, "shell32.dll", "ExtractIconA", 公开, 判断一个可执行文件或DLL中是否有图标存在，并将其提取出来
    .参数 程序句柄, 整数型, , hInst,当前应用程序的实例句柄
    .参数 文件名, 文本型, , lpszExeFileName,在其中提取图标的那个程序的全名
    .参数 图标索引, 整数型, , nIconIndex,欲获取的图标的索引

.DLL命令 投递消息, 整数型, "user32", "PostMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄。
    .参数 信息值, 整数型, , 消息的标识符。
    .参数 参数1, 整数型, , 具体取决于消息。
    .参数 参数2, 整数型, , 具体取决于消息。

.DLL命令 PostMessageA, 整数型, "user32", "PostMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄。
    .参数 信息值, 整数型, , 消息的标识符。
    .参数 参数1, 整数型, , 具体取决于消息。
    .参数 参数2, 整数型, , 具体取决于消息。

.DLL命令 BringWindowToTop, 整数型, "user32.dll", "BringWindowToTop", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄

.DLL命令 寻找顶级窗口_, 整数型, "user32.dll", "FindWindowA", 公开, FindWindow,寻找窗口列表中第一个符合指定条件的顶级窗口  参数填写正确的话返回窗口句柄
    .参数 窗口类名, 文本型, , lpClassName，参见相关帮助
    .参数 窗口文本, 文本型, , lpWindowName，参见相关帮助

.DLL命令 获取指定窗口句柄_, 整数型, "user32.dll", "FindWindowA", 公开, FindWindow,寻找窗口列表中第一个符合指定条件的顶级窗口  参数填写正确的话返回窗口句柄
    .参数 窗口类名, 文本型, , lpClassName，参见相关帮助
    .参数 窗口文本, 文本型, , lpWindowName，参见相关帮助

.DLL命令 清空回收站_, 整数型, "shell32.dll", "SHEmptyRecycleBinA", 公开, SHEmptyRecycleBin
    .参数 窗口句柄, 整数型, , hwnd
    .参数 根路径, 文本型, , pszRootPath  可以为整数     如果类型是文本设置为空即可  如果类型是整数 填写0即可
    .参数 标志, 整数型, , dwFlags  表示为0则提示是否清空回收站 7则不提示直接清空回收站

.DLL命令 取剪辑板窗口句柄_, 整数型, "user32.dll", "GetOpenClipboardWindow", 公开, $(b)返回打开CLIPBOARD的窗口句柄

.DLL命令 清空剪辑板_, 整数型, "user32.dll", "EmptyClipboard", 公开,  清除当前 Windows 系统剪辑板中的所有数据

.DLL命令 EmptyClipboard, 整数型, "user32.dll", "EmptyClipboard", 公开,  清除当前 Windows 系统剪辑板中的所有数据

.DLL命令 恢复窗口_, 整数型, "user32.dll", "OpenIcon", 公开, 恢复被最小化或最大化的窗口
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄

.DLL命令 打开剪贴板_, 整数型, "user32.dll", "OpenClipboard", 公开, (0为失败)
    .参数 窗口句柄, 整数型, , hwnd,窗口句柄

.DLL命令 OpenClipboard, 整数型, "user32.dll", "OpenClipboard", 公开, (0为失败)
    .参数 窗口句柄, 整数型, , hwnd,窗口句柄

.DLL命令 确定格式是否可用_, 整数型, "user32", "IsClipboardFormatAvailable", 公开, (0为失败)
    .参数 wFormat, 整数型, , CF_TEXT

.DLL命令 取剪辑版序号_, 整数型, "user32.dll", "GetClipboardSequenceNumber", 公开, 

.DLL命令 取剪贴板数据句柄_, 整数型, "user32.dll", "GetClipboardData", 公开, 返回剪贴板数据句柄 
    .参数 剪贴板格式, 整数型, , wFormat

.DLL命令 锁住全局内存块_, 文本型, "kernel32.dll", "GlobalLock", 公开, 
    .参数 内存句柄, 整数型, , hMem

.DLL命令 解锁全局内存块_, 整数型, "kernel32.dll", "GlobalUnlock", 公开, 
    .参数 内存句柄, 整数型, , hMem

.DLL命令 关闭剪辑板_, 整数型, "user32.dll", "CloseClipboard", 公开, 0为失败

.DLL命令 CloseClipboard, 整数型, "user32.dll", "CloseClipboard", 公开, 

.DLL命令 启动Internet控制面板_, 整数型, "inetcpl.cpl", "LaunchInternetControlPanel", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 LaunchInternetControlPanel, 整数型, "inetcpl.cpl", "LaunchInternetControlPanel", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 启动连接对话框_, 整数型, "inetcpl.cpl", "LaunchConnectionDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 LaunchConnectionDialog, 整数型, "inetcpl.cpl", "LaunchConnectionDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 启动安全对话框_, 整数型, "inetcpl.cpl", "LaunchSecurityDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent
    .参数 保留参数, 整数型, , 一般填写0即可

.DLL命令 LaunchSecurityDialog, 整数型, "inetcpl.cpl", "LaunchSecurityDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent
    .参数 保留参数, 整数型, , 一般填写0即可

.DLL命令 启动证书对话框_, 整数型, "inetcpl.cpl", "LaunchSiteCertDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 LaunchSiteCertDialog, 整数型, "inetcpl.cpl", "LaunchSiteCertDialog", 公开, 
    .参数 父窗口句柄, 整数型, , hwndParent

.DLL命令 寻找子窗口_, 整数型, "user32", "FindWindowExA", 公开, , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
    .参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"

.DLL命令 FindWindowExA_, 整数型, "user32", "FindWindowExA", 公开, , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
    .参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"

.DLL命令 取得类名称_, 整数型, "user32", "GetClassNameA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 取窗口类名_, 整数型, "user32", "GetClassNameA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 GetClassNameA, 整数型, "user32", "GetClassNameA", 公开, 
    .参数 窗口句柄, 整数型, , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 MessageBeep, 整数型, "user32.dll", "MessageBeep", 公开,  非零表示成功 零表示不成功
    .参数 声音常量, 整数型, , wType,参见相关帮助    16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标

.DLL命令 设置鼠标坐标_, 整数型, "user32.dll", "SetCursorPos", 公开, 非零表示成功，零表示失败
    .参数 水平位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的水平位置
    .参数 垂直位置, 整数型, , 鼠标指针在屏幕像素坐标系统中的垂直位置

.DLL命令 系统状态栏信息_, 整数型, "shell32.dll", "SHAppBarMessage", 公开, SHAppBarMessage
    .参数 信息值, 整数型, , dwMessage
    .参数 数据结构, 系统状态栏信息_, , pData

.DLL命令 SHAppBarMessage, 整数型, "shell32.dll", "SHAppBarMessage", 公开, SHAppBarMessage
    .参数 信息值, 整数型, , dwMessage
    .参数 数据结构, 系统状态栏信息_, , pData

.DLL命令 延迟时间_, 整数型, "kernel32.dll", "Sleep", 公开, , Sleep
    .参数 延迟毫秒数, 整数型, , dwMilliseconds

.DLL命令 判断窗口可见性_, 整数型, "user32.dll", "IsWindowVisible", 公开, , 判断窗口是否可见
    .参数 窗口句柄, 整数型, , hwnd,要测试的那个窗口的句柄

.DLL命令 窗口是否可见, 整数型, "user32.dll", "IsWindowVisible", 公开, , 判断窗口是否可见   0 为隐藏 1为显示
    .参数 窗口句柄, 整数型, , hwnd,要测试的那个窗口的句柄

.DLL命令 IsWindowVisible, 整数型, "user32.dll", "IsWindowVisible", 公开, , 判断窗口是否可见  0 为隐藏 1为显示
    .参数 窗口句柄, 整数型, , hwnd,要测试的那个窗口的句柄

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", 公开, , Sleep
    .参数 延迟毫秒数, 整数型, , dwMilliseconds

.DLL命令 SHEmptyRecycleBinA, 整数型, "shell32.dll", "SHEmptyRecycleBinA", 公开, SHEmptyRecycleBin
    .参数 窗口句柄, 整数型, , hwnd
    .参数 根路径, 文本型, , pszRootPath  可以为整数     如果类型是文本设置为空即可  如果类型是整数 填写0即可
    .参数 标志, 整数型, , dwFlags  表示为0则提示是否清空回收站 7则不提示直接清空回收站

.DLL命令 激活禁止窗口, 整数型, "user32.dll", "EnableWindow", 公开, , 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 逻辑型, , fEnable，非零允许，零禁止

.DLL命令 EnableWindow, 整数型, "user32.dll", "EnableWindow", 公开, , 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 逻辑型, , fEnable，非零允许，零禁止

.DLL命令 显示隐藏鼠标, 整数型, "", "ShowCursor", 公开, 控制鼠标指针的可视性(返回值:显示计数（参考注解）)   当设为显示鼠标返回值为正数相加 0 1 2 3 4.....  当设为隐藏鼠标 返回值为负数相减 -1 -2 -3 -4......
    .参数 标示符, 逻辑型, , （非零）显示指针，零 隐藏  真为显示 假为隐藏

.DLL命令 ShowCursor, 整数型, "", "ShowCursor", 公开, 控制鼠标指针的可视性(返回值:显示计数（参考注解）)当设为显示鼠标返回值为正数相加0 1 2 3 4..... 当设为隐藏鼠标 返回值为负数相减-1 -2 -3 -4
    .参数 标示符, 整数型, , （非零）显示指针，零 隐藏  

.DLL命令 是否为活动窗口, 整数型, "user32", "IsWindowEnabled", 公开, 0为非活动窗体 非0则为活动窗体
    .参数 窗口句柄, 整数型, , 

.DLL命令 IsWindowEnabled, 整数型, "user32", "IsWindowEnabled", 公开, 0为非活动窗体 非0则为活动窗体
    .参数 窗口句柄, 整数型, , 

.DLL命令 枚举所有子窗体, 整数型, "user32", "EnumChildWindows", 公开, 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口调用指针, 子程序指针, , 
    .参数 枚举期间传递的操作值, 整数型, 传址, 

.DLL命令 当前是否为调试版_, 整数型, "kernel32.dll", "IsDebuggerPresent", 公开, 非0则当前进程正在调试器的描述表中运行 否则  当前进程没有在调试器的描述表中运行

.DLL命令 检查Internet连接_, 整数型, "wininet.dll", "InternetCheckConnectionA", 公开, InternetCheckConnectionA ' 连接网站，成功返回非0 
    .参数 Url地址, 文本型, , lpszUrl  http://499767144.5d6d.com/bbs.php
    .参数 标志, 整数型, , dwFlags  一般为1
    .参数 返回值, 整数型, , dwReserved 一般为0

.DLL命令 改变系统编辑框_, 空白型, "shlwapi.dll", "SHAutoComplete", 公开, SHAutoComplete   '较大缓存时有效
    .参数 编辑框句柄, 整数型, , hwndEdit
    .参数 标志, 整数型, , dwFlags  一般为2

.DLL命令 SHAutoComplete, 空白型, "shlwapi.dll", "SHAutoComplete", 公开, SHAutoComplete   '较大缓存时有效
    .参数 编辑框句柄, 整数型, , hwndEdit
    .参数 标志, 整数型, , dwFlags  一般为2

.DLL命令 InternetCheckConnectionA, 整数型, "wininet.dll", "InternetCheckConnectionA", 公开, InternetCheckConnectionA ' 连接网站，成功返回非0 
    .参数 Url地址, 文本型, , lpszUrl  http://499767144.5d6d.com/bbs.php
    .参数 标志, 整数型, , dwFlags  一般为1
    .参数 返回值, 整数型, , dwReserved 一般为0

.DLL命令 乘除计算_, 整数型, "kernel32.dll", "MulDiv", 公开, MulDiv  的作用是计算两数的积再被一个数除 ' 执行成功返回结果，失败返回-1。   ' 例如：MulDiv(100,2,50),返回4。※如出现不整除现象，将四舍五入。  
    .参数 乘数1, 整数型, , nNumber
    .参数 乘数2, 整数型, , nNumerator
    .参数 除数, 整数型, , nDenominator

.DLL命令 十六进制转十进制增强_, 整数型, "shlwapi.dll", "StrToInt64ExA", 公开, StrToInt64ExA  成功返回1(非0) 失败返回0 可以判断是不是输入的不是 O到9  A到F
    .参数 转换文本, 文本型, , pszString  一般为 如果标志为0的话 则直接填写 转换文本 如果标志为1的话 转换文本="0x"+转换文本
    .参数 标志, 整数型, , dwFlags 标志为0则为10进制 标志为1则为十六进制
    .参数 返回值, 整数型, 传址, piRet

.DLL命令 延迟时间扩展_, 整数型, "kernel32.dll", "SleepEx", 公开, SleepEx
    .参数 延迟毫秒数, 整数型, , dwMilliseconds
    .参数 特殊参数, 整数型, , bAlertable  一般可以填写0

.DLL命令 创建文件, 整数型, "Kernel32.dll", "_lcreat", 公开, _lcreat  失败返回-1       创建一个文件。如文件已经存在，就会将其缩短成零长度，并将其打开，以便读写
    .参数 文件路径, 文本型, , lpPathName，路径加文件名
    .参数 文件类型, 整数型, , iAttribute，0,文件能够读写　1,创建只读文件 2,创建隐藏文件 3,创建系统文件

.DLL命令 _lcreat, 整数型, "Kernel32.dll", "_lcreat", 公开, _lcreat 失败返回-1    创建一个文件。如文件已经存在，就会将其缩短成零长度，并将其打开，以便读写
    .参数 文件路径, 文本型, , lpPathName，路径加文件名
    .参数 文件类型, 整数型, , iAttribute，0,文件能够读写　1,创建只读文件 2,创建隐藏文件 3,创建系统文件

.DLL命令 SleepEx_, 整数型, "kernel32.dll", "SleepEx", 公开, SleepEx
    .参数 延迟毫秒数, 整数型, , dwMilliseconds
    .参数 特殊参数, 整数型, , bAlertable  一般可以填写0

.DLL命令 更改文件名的扩展名_, 整数型, "shlwapi.dll", "PathRenameExtensionA", 公开, PathRenameExtensionA       返回0则失败
    .参数 文件名, 文本型, , pszPath  第一个参数，提供全路径文件名变量。  比如:c:\windows\system32\user32.txt
    .参数 扩展名, 文本型, , pszExt  ' 第二个参数，提供更改后的扩展名。比如: .dll

.DLL命令 删除路径文件名_, 整数型, "shlwapi.dll", "PathRemoveFileSpecA", 公开, PathRemoveFileSpecA  如："c:\windows\boot.ini"返回"c:\windows"   
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathRemoveFileSpecA, 整数型, "shlwapi.dll", "PathRemoveFileSpecA", 公开, PathRemoveFileSpecA  如："c:\windows\boot.ini"返回"c:\windows"   
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathRenameExtensionA, 整数型, "shlwapi.dll", "PathRenameExtensionA", 公开, PathRenameExtensionA       返回0则失败
    .参数 文件名, 文本型, , pszPath  第一个参数，提供全路径文件名变量。  比如:c:\windows\system32\user32.txt
    .参数 扩展名, 文本型, , pszExt  ' 第二个参数，提供更改后的扩展名。比如: .dll

.DLL命令 写内存字节集_, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, WriteProcessMemory写内存 失败返回0 返回值
    .参数 进程的句柄, 整数型, , hProcess , 进程的句柄  使用函数 OpenProcess() 返回。
    .参数 内存地址, 整数型, , lpBaseAddress,内存地址
    .参数 写入数据, 字节集, 传址, lpBuffer, 数据指针    本参数的类型也能是“字节”型。
    .参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
    .参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写WriteProcessMemory 返回值 为0则忽略。 

.DLL命令 WriteProcessMemory_, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 写内存 失败返回0 返回值
    .参数 进程的句柄, 整数型, , hProcess , 进程的句柄
    .参数 内存地址, 整数型, , lpBaseAddress,内存地址
    .参数 写入数据, 字节集, 传址, lpBuffer, 数据指针
    .参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
    .参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写WriteProcessMemory 返回值

.DLL命令 取路径文件名_, 整数型, "shlwapi.dll", "PathFindFileNameA", 公开, PathFindFileNameA  成功返回路径文本指针地址   比如 c:\1.txt  返回的是 1.txt 
    .参数 路径文本, 文本型, , pszPath

.DLL命令 删除路径根目录_, 整数型, "shlwapi.dll", "PathSkipRootA", 公开, PathSkipRootA        成功返回路径文本指针地址  PathSkipRootA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll" 
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathSkipRootA, 整数型, "shlwapi.dll", "PathSkipRootA", 公开, PathSkipRootA        成功返回路径文本指针地址  PathSkipRootA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
    .参数 路径文本, 文本型, , pszPath

.DLL命令 取根路径后文本_, 整数型, "shlwapi.dll", "PathFindNextComponentA", 公开, PathFindNextComponent 成功返回路径文本指针地址  PathFindNextComponentA的作用是取删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathFindNextComponentA, 整数型, "shlwapi.dll", "PathFindNextComponentA", 公开, PathFindNextComponent 成功返回路径文本指针地址  PathFindNextComponentA的作用是取删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathFindFileNameA, 整数型, "shlwapi.dll", "PathFindFileNameA", 公开, PathFindFileNameA  成功返回路径文本指针地址   比如 c:\1.txt  返回的是 1.txt 
    .参数 路径文本, 文本型, , pszPath

.DLL命令 内存清零_, 空白型, "kernel32.dll", "RtlZeroMemory", 公开, $(b)ZeroMemory
    .参数 目的内存, 文本型, , Destination
    .参数 长度, 整数型, , Length

.DLL命令 RtlZeroMemory, 空白型, "kernel32.dll", "RtlZeroMemory", 公开, $(b)ZeroMemory
    .参数 目的内存, 文本型, , Destination
    .参数 长度, 整数型, , Length

.DLL命令 取空格前文本_, 空白型, "shlwapi.dll", "PathRemoveArgsA", 公开, PathRemoveArgsA
    .参数 路径文本, 文本型, , pszPath

.DLL命令 PathRemoveArgsA, 空白型, "shlwapi.dll", "PathRemoveArgsA", 公开, 
    .参数 路径文本, 文本型, , pszPath

.DLL命令 删文本首尾空_, 空白型, "shlwapi.dll", "PathRemoveBlanksA", 公开, PathRemoveBlanksA 删除文本首部尾部的空格
    .参数 文本, 文本型, , pszPath

.DLL命令 PathRemoveBlanksA, 空白型, "shlwapi.dll", "PathRemoveBlanksA", 公开, 删除文本首部尾部的空格
    .参数 文本, 文本型, , pszPath

.DLL命令 俘获鼠标_, 整数型, "user32", "SetCapture", 公开, SetCapture
    .参数 窗口句柄, 整数型, 传址, 

.DLL命令 关闭句柄, 整数型, "", "CloseHandle", 公开, 关闭进程句柄
    .参数 进程句柄, 整数型, , 

.DLL命令 CreateProcessA, 逻辑型, "", "CreateProcessA", 公开, 
    .参数 lpApplicationName, 文本型, , 执行程序文件名
    .参数 lpCommandLine, 整数型, , 参数行
    .参数 lpProcessAttributes, 整数型, , 进程安全参数
    .参数 lpThreadAttributes, 整数型, , 线程安全参数
    .参数 bInheritHandles, 逻辑型, , 继承标记
    .参数 dwCreationFlags, 整数型, , 创建标记
    .参数 lpEnvironment, 整数型, , 环境变量
    .参数 lpCurrentDirectory, 整数型, , 运行该子进程的初始目录
    .参数 lpStartupInfo, 启动信息数据, , 创建该子进程的相关参数
    .参数 lpProcessInformation, 创建进程返回数据类型, , 创建后用于被创建子进程的信息  

.DLL命令 创建进程_, 整数型, "kernel32.dll", "CreateProcessA", 公开, 
    .参数 要执行的程序名, 文本型, , lpApplicationName，参见相关帮助
    .参数 要执行的命令行, 文本型, , lpCommandLine，参见相关帮助
    .参数 安全特性参数1, 整数型, , lpProcessAttributes，参见相关帮助
    .参数 安全特性参数2, 整数型, , lpThreadAttributes，参见相关帮助
    .参数 允许新进程继承当前进程的句柄, 逻辑型, , bInheritHandles，参见相关帮助
    .参数 参数1, 整数型, , dwCreationFlags，赋0即可
    .参数 环境指针, 文本型, , lpEnvironment，赋0即可
    .参数 新进程当前目录路径, 整数型, , lpCurrentDriectory，参见相关帮助
    .参数 创建进程时附加信息, 启动信息数据, , lpStartupInfo，创建进程时附加信息
    .参数 新进程的进程和线程标识符, 创建进程返回数据类型, , lpProcessInformation，参见相关帮助

.DLL命令 SetCapture, 整数型, "user32", "SetCapture", 公开, SetCapture
    .参数 窗口句柄, 整数型, 传址, 

.DLL命令 释放鼠标_, 整数型, "user32", "ReleaseCapture", 公开, ReleaseCapture

.DLL命令 ReleaseCapture, 整数型, "user32", "ReleaseCapture", 公开, ReleaseCapture

.DLL命令 改变窗口_, 整数型, "user32.dll", "MoveWindow", 公开, MoveWindow
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 新高度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 锁定窗口_, 整数型, "user32.dll", "LockWindowUpdate", 公开, LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
    .参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁

.DLL命令 LockWindowUpdate, 整数型, "user32.dll", "LockWindowUpdate", 公开, LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
    .参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁

.DLL命令 移动文件_, 整数型, "kernel32.dll", "MoveFileA", 公开, , MoveFileA,移动文件
    .参数 文件名, 文本型, , lpExistingFileName，欲移动的文件名
    .参数 新文件名, 文本型, , lpNewFileName，新文件名

.DLL命令 取函数地址_, 整数型, "kernel32", "GetProcAddress", 公开, GetProcAddress 返回函数地址
    .参数 模块句柄, 整数型, , 
    .参数 函数名, 文本型, , MessageBoxA

.DLL命令 取模块句柄_, 整数型, "kernel32", "GetModuleHandleA", 公开, GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;    User32.dll

.DLL命令 MoveFileA, 整数型, "kernel32.dll", "MoveFileA", 公开, , MoveFileA,移动文件
    .参数 文件名, 文本型, , lpExistingFileName，欲移动的文件名
    .参数 新文件名, 文本型, , lpNewFileName，新文件名

.DLL命令 数值到格式化字节扩展_, 整数型, "shlwapi.dll", "StrFormatByteSize64A", 公开, StrFormatByteSize64A  StrFormatByteSize64A  比如:1024 返回 1.0KB
    .参数 数值, 长整数型, , qdw
    .参数 文本缓冲区, 文本型, 传址, szBuf
    .参数 文本缓冲区大小, 整数型, 传址, uiBufSize

.DLL命令 文本连接_, 整数型, "shlwapi.dll", "StrCatBuffA", 公开, StrCatBuffA
    .参数 目标文本, 文本型, , pszDest
    .参数 源文本, 文本型, , pszSrc
    .参数 目标缓冲区大小, 整数型, , cchDestBuffSize

.DLL命令 StrCatBuffA, 整数型, "shlwapi.dll", "StrCatBuffA", 公开, StrCatBuffA
    .参数 目标文本, 文本型, , pszDest
    .参数 源文本, 文本型, , pszSrc
    .参数 目标缓冲区大小, 整数型, , cchDestBuffSize

.DLL命令 StrFormatByteSize64A, 整数型, "shlwapi.dll", "StrFormatByteSize64A", 公开, StrFormatByteSize64A
    .参数 数值, 长整数型, , qdw
    .参数 文本缓冲区, 文本型, 传址, szBuf
    .参数 文本缓冲区大小, 整数型, 传址, uiBufSize

.DLL命令 BlockInput, 整数型, "", "BlockInput", 公开, BlockInput
    .参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.DLL命令 数值到格式化字节_, 整数型, "shlwapi.dll", "StrFormatByteSizeA", 公开, StrFormatByteSizeA   比如:1024 返回 1.0KB 
    .参数 数值, 整数型, , dw
    .参数 文本缓冲区, 文本型, , szBuf
    .参数 文本缓冲区大小, 整数型, 传址, uiBufSize

.DLL命令 StrFormatByteSizeA, 整数型, "shlwapi.dll", "StrFormatByteSizeA", 公开, StrFormatByteSizeA  比如:1024 返回 1.0KB
    .参数 数值, 整数型, , dw
    .参数 文本缓冲区, 文本型, , szBuf
    .参数 文本缓冲区大小, 整数型, 传址, uiBufSize

.DLL命令 键盘和鼠标锁定_, 整数型, "", "BlockInput", 公开, BlockInput
    .参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除

.DLL命令 CreateToolhelp32Snapshot, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
    .参数 标志, 整数型, , lFlags  一般填写8即可
    .参数 进程标识符, 整数型, , lProcessID

.DLL命令 寻找第一个32位模块_, 整数型, "kernel32.dll", "Module32First", 公开, Module32First  返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块地址_, 传址, uProcess

.DLL命令 取创建32位帮助工具快照_, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
    .参数 标志, 整数型, , lFlags  一般填写8即可
    .参数 进程标识符, 整数型, , lProcessID

.DLL命令 寻找下一个32位模块_, 整数型, "kernel32.dll", "Module32Next", 公开, Module32Next 返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块地址_, 传址, uProcess

.DLL命令 Module32Next, 整数型, "kernel32.dll", "Module32Next", 公开, Module32Next 返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块地址_, 传址, uProcess

.DLL命令 Module32First, 整数型, "kernel32.dll", "Module32First", 公开, Module32First  返回模块数目
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 模块进程结构, 模块地址_, 传址, uProcess

.DLL命令 取当前进程标识符_, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 获取当前进程一个唯一的标识符 GetCurrentProcessId  

.DLL命令 模拟鼠标_, 空白型, "user32.dll", "mouse_event", 公开, mouse_event,模拟一次鼠标事件  没有返回值
    .参数 标志组合, 整数型, , dwFlags，一系列标志的组合 dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下 
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , cButtons，未使用
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 mouse_event, 空白型, "user32.dll", "mouse_event", 公开, mouse_event,模拟一次鼠标事件  没有返回值
    .参数 标志组合, 整数型, , dwFlags，一系列标志的组合 dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下 
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , cButtons，未使用
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 HTTP下载_, 整数型, "urlmon.dll", "URLDownloadToFileA", 公开, URLDownloadToFile成功返回0 失败返回-2146697211
    .参数 参数1, 整数型, , pCaller  一般为0
    .参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。 http://499767144.5d6d.com/bbs.php
    .参数 保存到本地文件名, 文本型, , szFileName 例如:c:\1.exe  保存在:c:\1.exe
    .参数 参数二, 整数型, , dwReserved 一般为0
    .参数 参数三, 整数型, , lpfnCB  一般为0

.DLL命令 URLDownloadToFileA, 整数型, "urlmon.dll", "URLDownloadToFileA", 公开, URLDownloadToFile成功返回0 失败返回-2146697211
    .参数 参数1, 整数型, , pCaller  一般为0
    .参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。http://499767144.5d6d.com/bbs.php 
    .参数 保存到本地文件名, 文本型, , szFileName 例如:c:\1.exe  保存在:c:\1.exe
    .参数 参数二, 整数型, , dwReserved 一般为0
    .参数 参数三, 整数型, , lpfnCB  一般为0

.DLL命令 模拟键盘行动_1, 整数型, "user32.dll", "keybd_event", 公开, keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
    .参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 bVk,欲模拟的虚拟键码
    .参数 键扫描码, 整数型, , bScan,键的OEM扫描码
    .参数 标志值, 整数型, , dwFlags,标志常数   KEYEVENTF_KEYUP=2  放开某键的标志
    .参数 特定值, 整数型, , dwExtraInfo,通常不用的一个值

.DLL命令 keybd_event, 整数型, "user32.dll", "keybd_event", 公开, keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
    .参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 bVk,欲模拟的虚拟键码
    .参数 键扫描码, 整数型, , bScan,键的OEM扫描码
    .参数 标志值, 整数型, , dwFlags,标志常数   KEYEVENTF_KEYUP=2  放开某键的标志
    .参数 特定值, 整数型, , dwExtraInfo,通常不用的一个值

.DLL命令 取进程线程标识符_, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, Long，拥有窗口的线程的标识符  GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开,  Long，拥有窗口的线程的标识符  GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 取活动窗口句柄_, 整数型, "user32", "GetActiveWindow", 公开, 获得活动窗口的句柄GetActiveWindow

.DLL命令 GetActiveWindow, 整数型, "user32", "GetActiveWindow", 公开, 获得活动窗口的句柄GetActiveWindow

.DLL命令 填充内存_, 空白型, "kernel32.dll", "RtlFillMemory", 公开, $(b) RtlFillMemory
    .参数 目的内存, 文本型, , Destination
    .参数 长度, 整数型, , Length
    .参数 填充内容, 字节型, , Fill例子:取代码("A",)

.DLL命令 RtlFillMemory, 空白型, "kernel32.dll", "RtlFillMemory", 公开, $(b) RtlFillMemory
    .参数 目的内存, 文本型, , Destination
    .参数 长度, 整数型, , Length
    .参数 填充内容, 字节型, , Fill例子:取代码("A",)

.DLL命令 EnumChildWindows, 整数型, "user32", "EnumChildWindows", 公开, 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口调用指针, 子程序指针, , 
    .参数 枚举期间传递的操作值, 整数型, 传址, 

.DLL命令 设置指定窗口的显示状态_, 整数型, "user32.dll", "ShowWindow", 公开, ShowWindow返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。  控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
    .参数 窗口句柄, 整数型, , hWnd：窗口句柄。
    .参数 窗口如何显示, 整数型, , nCmdShow：指定窗口如何显示 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活 1 最小化取消激活 2 还原激活 3 显示激活 4 最大化激活 5 最小化激活 6 最小化 7 显示 8 最近状态显示 9 还原 更多查看常量:ShowWindow

.DLL命令 替换首尾文本_, 整数型, "shlwapi.dll", "StrTrimA", 公开,  StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 替换首尾文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234

.DLL命令 StrTrimA, 整数型, "shlwapi.dll", "StrTrimA", 公开,  StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
    .参数 替换首尾文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234

.DLL命令 字节数据到文本_, 文本型, "oleaut32.dll", "SysAllocStringByteLen", 公开, SysAllocStringByteLen
    .参数 二进制数据, 字节型, 数组, m_pBase
    .参数 二进制长度, 整数型, , FunctionCall

.DLL命令 拷贝内存_, 整数型, "kernel32", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目标缓冲区, 文本型, , Destination
    .参数 源缓冲区, 字节型, 传址 数组, Source
    .参数 复制长度, 整数型, , Length

.DLL命令 SysAllocStringByteLen, 文本型, "oleaut32.dll", "SysAllocStringByteLen", 公开, SysAllocStringByteLen
    .参数 二进制数据, 字节型, 数组, m_pBase
    .参数 二进制长度, 整数型, , FunctionCall

.DLL命令 RtlMoveMemory, 整数型, "kernel32", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目标缓冲区, 文本型, , Destination
    .参数 源缓冲区, 字节型, 传址 数组, Source
    .参数 复制长度, 整数型, , Length

.DLL命令 读内存数据_, 整数型, "kernel32.dll", "ReadProcessMemory", 公开, ReadProcessMemory
    .参数 进程的句柄, 整数型, , hProcess , 进程的句柄
    .参数 内存地址, 整数型, , lpBaseAddress,内存地址
    .参数 读入数据, 字节集, 传址, lpBuffer, 数据指针 可以为整数型
    .参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
    .参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写ReadProcessMemory返回值

.DLL命令 ReadProcessMemory, 整数型, "kernel32.dll", "ReadProcessMemory", 公开, ReadProcessMemory
    .参数 进程的句柄, 整数型, , hProcess , 进程的句柄
    .参数 内存地址, 整数型, , lpBaseAddress,内存地址
    .参数 读入数据, 字节集, 传址, lpBuffer, 数据指针 可以为整数型
    .参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
    .参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写ReadProcessMemory返回值

.DLL命令 取模板完整路径_, 整数型, "kernel32.dll", "GetModuleFileNameA", 公开, GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
    .参数 模块句柄, 整数型, , 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄一般填写0
    .参数 文件名缓冲区, 文本型, , 指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，hModule模块就是从这个文件装载进来的
    .参数 缓冲区大小, 整数型, , 装载到缓冲区lpFileName的最大字符数量;

.DLL命令 GetModuleFileNameA, 整数型, "kernel32.dll", "GetModuleFileNameA", 公开, GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
    .参数 模块句柄, 整数型, , 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄一般填写0
    .参数 文件名缓冲区, 文本型, , 指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，hModule模块就是从这个文件装载进来的
    .参数 缓冲区大小, 整数型, , 装载到缓冲区lpFileName的最大字符数量;

.DLL命令 格式化磁盘_, 整数型, "shell32.dll", "SHFormatDrive", 公开, SHFormatDrive
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 盘符, 整数型, , iDrive  驱动器‘从0开始’0是A，1是B 2是C 3是D  4是E  以此类推
    .参数 容量, 整数型, , iCapacity 0
    .参数 功能, 整数型, , iFormatType 弹出界面的功能‘参数为0-3’XP下“0、1”

.DLL命令 SHFormatDrive, 整数型, "shell32.dll", "SHFormatDrive", 公开, SHFormatDrive
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 盘符, 整数型, , iDrive  驱动器‘从0开始’0是A，1是B 2是C 3是D  4是E  以此类推
    .参数 容量, 整数型, , iCapacity 0
    .参数 功能, 整数型, , iFormatType 弹出界面的功能‘参数为0-3’XP下“0、1”

.DLL命令 取磁盘信息_, 整数型, "kernel32", "GetVolumeInformationA", 公开, GetVolumeInformationA,Long，非零表示成功，零表示失败。
    .参数 卷根路径, 文本型, , lpRootPathName String，欲获取信息的那个卷的根路径   c:\
    .参数 卷名, 文本型, 传址, lpVolumeNameBuffer String，用于装载卷名（卷标）的一个字串 
    .参数 卷名字符长度, 整数型, 传址, nVolumeNameSize Long，lpVolumeNameBuffer字串的长度 
    .参数 磁盘卷序列号, 整数型, 传址, lpVolumeSerialNumber Long，用于装载磁盘卷序列号的变量 
    .参数 文件夹名长度, 整数型, 传址, lpMaximumComponentLength Long，指定一个变量，用于装载文件名每一部分的长度。例如，在“c:\component1\component2.ext”的情况下，它就代表component1或component2名称的长度 
    .参数 标志, 整数型, , 具体值自己去查找
    .参数 文件系统名称, 文本型, 传址, lpFileSystemNameBuffer String，指定一个缓冲区，用于装载文件系统的名称（如FAT，NTFS以及其他） 
    .参数 名称长度, 整数型, , nFileSystemNameSize Long，lpFileSystemNameBuffer字串的长度

.DLL命令 GetVolumeInformationA, 整数型, "kernel32", "GetVolumeInformationA", 公开, GetVolumeInformationA,Long，非零表示成功，零表示失败。
    .参数 卷根路径, 文本型, , lpRootPathName String，欲获取信息的那个卷的根路径   c:\
    .参数 卷名, 文本型, 传址, lpVolumeNameBuffer String，用于装载卷名（卷标）的一个字串 
    .参数 卷名字符长度, 整数型, 传址, nVolumeNameSize Long，lpVolumeNameBuffer字串的长度 
    .参数 磁盘卷序列号, 整数型, 传址, lpVolumeSerialNumber Long，用于装载磁盘卷序列号的变量 
    .参数 文件夹名长度, 整数型, 传址, lpMaximumComponentLength Long，指定一个变量，用于装载文件名每一部分的长度。例如，在“c:\component1\component2.ext”的情况下，它就代表component1或component2名称的长度 
    .参数 标志, 整数型, , 具体值自己去查找
    .参数 文件系统名称, 文本型, 传址, lpFileSystemNameBuffer String，指定一个缓冲区，用于装载文件系统的名称（如FAT，NTFS以及其他） 
    .参数 名称长度, 整数型, , nFileSystemNameSize Long，lpFileSystemNameBuffer字串的长度

.DLL命令 文件可否运行_, 整数型, "kernel32", "GetBinaryTypeA", 公开, 判断文件是否可以执行 Long，非零表示成功，零表示失败 GetBinaryTypeA
    .参数 文件路径, 文本型, , lpApplicationName String，欲测试文件的完整路径名 
    .参数 文件类型, 整数型, 传址, lpBinaryType Long，参见相关帮助  SCS_32BIT_BINARY win32执行程序=0  SCS_DOS_BINARY DOS执行程序=1    SCS_OS216_BINARY 16位OS/2执行程序=5   SCS_PIF_BINARY 用于执行DOS程序的一个pif文件=3  SCS_POSIX_BINARY 一个Posix应用=4  SCS_WOW_BINARY 16位windows执行程序=2

.DLL命令 GetBinaryTypeA, 整数型, "kernel32", "GetBinaryTypeA", 公开, 判断文件是否可以执行 Long，非零表示成功，零表示失败 GetBinaryTypeA
    .参数 文件路径, 文本型, , lpApplicationName String，欲测试文件的完整路径名 
    .参数 文件类型, 整数型, 传址, lpBinaryType Long，参见相关帮助  SCS_32BIT_BINARY win32执行程序=0  SCS_DOS_BINARY DOS执行程序=1    SCS_OS216_BINARY 16位OS/2执行程序=5   SCS_PIF_BINARY 用于执行DOS程序的一个pif文件=3  SCS_POSIX_BINARY 一个Posix应用=4  SCS_WOW_BINARY 16位windows执行程序=2

.DLL命令 创建事件对象_, 整数型, "kernel32.dll", "CreateEventA", 公开, CreateEventA
    .参数 安全性结构, 安全性结构_, 传址, lpEventAttributes，参见相关帮助
    .参数 人工或自动事件, 整数型, , bManualReset，参见相关帮助
    .参数 是否内部触发, 整数型, , bInitialState，参见相关帮助
    .参数 事件对象名, 文本型, , lpName，指定事件对象的名字

.DLL命令 为进程指定CPU_, 整数型, "Kernel32.dll", "SetProcessAffinityMask", 公开, 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
    .参数 进程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 SetProcessAffinityMask, 整数型, "Kernel32.dll", "SetProcessAffinityMask", 公开, 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
    .参数 进程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 SetThreadAffinityMask_, 整数型, "Kernel32.dll", "SetThreadAffinityMask", 公开, 设置CPU亲和性  线程句柄SetThreadAffinityMask
    .参数 线程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 为线程指定CPU_, 整数型, "Kernel32.dll", "SetThreadAffinityMask", 公开, 设置CPU亲和性  线程句柄SetThreadAffinityMask
    .参数 线程句柄, 整数型, , hProcess
    .参数 参数, 整数型, , Mask

.DLL命令 创建插入符_, 整数型, "user32.dll", "CreateCaret", 公开, CreateCaret，根据指定的信息创建一个插入符（光标），并将它选定为指定窗口的默认插入符。插入符可以是一根短线、一个方块或者一幅位图。通常用插入符指示文字在文字框中的插入位置
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 位图句柄, 整数型, , hBitmap，位图句柄
    .参数 宽度, 整数型, , nWidth，宽度
    .参数 高度, 整数型, , nHeight，高度

.DLL命令 显示插入符_, 整数型, "user32.dll", "ShowCaret", 公开, ShowCaret，在指定的窗口里显示插入符（光标）
    .参数 窗口句柄, 整数型, , hwnd，包含了插入符的窗口的句柄。可以为零；此时，只有在插入符包含于由活动任务拥有的一个窗口时，它才会显示出来

.DLL命令 CreateCaret, 整数型, "user32.dll", "CreateCaret", 公开, CreateCaret，根据指定的信息创建一个插入符（光标），并将它选定为指定窗口的默认插入符。插入符可以是一根短线、一个方块或者一幅位图。通常用插入符指示文字在文字框中的插入位置
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 位图句柄, 整数型, , hBitmap，位图句柄
    .参数 宽度, 整数型, , nWidth，宽度
    .参数 高度, 整数型, , nHeight，高度

.DLL命令 ShowCaret, 整数型, "user32.dll", "ShowCaret", 公开, ShowCaret，在指定的窗口里显示插入符（光标）
    .参数 窗口句柄, 整数型, , hwnd，包含了插入符的窗口的句柄。可以为零；此时，只有在插入符包含于由活动任务拥有的一个窗口时，它才会显示出来

.DLL命令 取获取焦点窗口_, 整数型, "user32.dll", "GetFocus", 公开, GetFocus，获得拥有输入焦点的窗口的句柄

.DLL命令 GetFocus, 整数型, "user32.dll", "GetFocus", 公开, GetFocus，获得拥有输入焦点的窗口的句柄

.DLL命令 到大写_, 文本型, "user32.dll", "CharUpperA", 公开, CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。 
    .参数 欲变换的文本, 文本型, , str

.DLL命令 到小写_, 文本型, "user32.dll", "CharLowerA", 公开, CharLowerA  将文本中的大写英文字母变换为小写，返回变换后的结果文本。  
    .参数 欲变换的文本, 文本型, , str

.DLL命令 CharUpperA, 文本型, "user32.dll", "CharUpperA", 公开, CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。 
    .参数 欲变换的文本, 文本型, , str

.DLL命令 CharLowerA, 文本型, "user32.dll", "CharLowerA", 公开, CharLowerA 将文本中的大写英文字母变换为小写，返回变换后的结果文本。  
    .参数 欲变换的文本, 文本型, , str

.DLL命令 附加文本串_, 整数型, "shlwapi.dll", "StrNCatA", 公开, StrNCatA
    .参数 文本, 文本型, , psz1
    .参数 附加文本, 文本型, , psz2
    .参数 附加文本长度, 整数型, 传址, cchMax

.DLL命令 寻找文本串_, 整数型, "shlwapi.dll", "StrCSpnA", 公开, StrCSpnA
    .参数 被寻找文本, 文本型, , lpStr
    .参数 欲寻找文本, 文本型, , lpSet

.DLL命令 StrCSpnA, 整数型, "shlwapi.dll", "StrCSpnA", 公开, StrCSpnA
    .参数 被寻找文本, 文本型, , lpStr
    .参数 欲寻找文本, 文本型, , lpSet

.DLL命令 StrNCatA, 整数型, "shlwapi.dll", "StrNCatA", 公开, StrNCatA
    .参数 文本, 文本型, , psz1
    .参数 附加文本, 文本型, , psz2
    .参数 附加文本长度, 整数型, 传址, cchMax

.DLL命令 寻找文本串I_, 整数型, "shlwapi.dll", "StrCSpnIA", 公开, StrCSpnIA
    .参数 被寻找文本, 文本型, , lpStr
    .参数 欲寻找文本, 文本型, , lpSet

.DLL命令 StrCSpnIA, 整数型, "shlwapi.dll", "StrCSpnIA", 公开, StrCSpnIA
    .参数 被寻找文本, 文本型, , lpStr
    .参数 欲寻找文本, 文本型, , lpSet

.DLL命令 关闭Internet句柄_, 整数型, "wininet.dll", "InternetCloseHandle", 公开, *
    .参数 Internet句柄, 整数型, , hInet

.DLL命令 打开Internet地址_, 整数型, "wininet.dll", "InternetOpenUrlA", 公开, *
    .参数 Internet句柄, 整数型, , hInternetSession
    .参数 Url地址, 文本型, , lpszUrl
    .参数 头文本, 文本型, , lpszHeaders     例子:""
    .参数 头文本长度, 整数型, , dwHeadersLength  例子: 0
    .参数 标志, 整数型, , dwFlags       例子:-2147483648
    .参数 定义值, 整数型, , dwContext   例子:0

.DLL命令 读Internet文件_, 整数型, "wininet.dll", "InternetReadFile", 公开, InternetReadFile*
    .参数 Internet地址句柄, 整数型, , hFile
    .参数 数据缓冲区, 文本型, , sBuffer
    .参数 读取大小, 整数型, , lNumBytesToRead
    .参数 读取首地址, 整数型, 传址, lNumberOfBytesRead

.DLL命令 打开Internet_, 整数型, "wininet.dll", "InternetOpenA", 公开, InternetOpen*  InetrnetOpen 初始化 WinInet.dll
    .参数 代理商名称, 文本型, , sAgent  比如:“http://499767144.5d6d.com/bbs.php”
    .参数 存取类型, 整数型, , lAccessType  比如:1
    .参数 代理名称, 文本型, , sProxyName  比如:""
    .参数 代理地址, 文本型, , sProxyBypass 比如""
    .参数 标志, 整数型, , lFlags      比如:0

.DLL命令 取鼠标的双击间隔时间_, 整数型, "user32", "GetDoubleClickTime", 公开, 得到鼠标的双击间隔速度  GetDoubleClickTime  一般鼠标设置的双击时间为 500 

.DLL命令 GetDoubleClickTime, 整数型, "user32", "GetDoubleClickTime", 公开, 得到鼠标的双击间隔速度  GetDoubleClickTime 

.DLL命令 设置鼠标的双击间隔时间_, 整数型, "user32", "SetDoubleClickTime", 公开, SetDoubleClickTime  失败返回0
    .参数 时间, 整数型, , 

.DLL命令 设置当前目录_, 整数型, "kernel32", "SetCurrentDirectoryA", 公开, SetCurrentDirectoryA Long，非零表示成功，零表示失败。会设置GetLastError 
    .参数 新当前目录的路径, 文本型, , 

.DLL命令 SetDoubleClickTime, 整数型, "user32", "SetDoubleClickTime", 公开, SetDoubleClickTime  失败返回0
    .参数 时间, 整数型, , 

.DLL命令 SetCurrentDirectoryA, 整数型, "kernel32", "SetCurrentDirectoryA", 公开, SetCurrentDirectoryA Long，非零表示成功，零表示失败。会设置GetLastError 
    .参数 新当前目录的路径, 文本型, , 

.DLL命令 设置磁盘卷标_, 整数型, "kernel32", "SetVolumeLabelA", 公开, Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 磁盘卷的根路径, 文本型, , String，磁盘卷的根路径 例如:d:
    .参数 指定新卷标, 文本型, , String，指定新卷标。用vbNullString指示删除当前卷名

.DLL命令 SetVolumeLabelA, 整数型, "kernel32", "SetVolumeLabelA", 公开, Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
    .参数 磁盘卷的根路径, 文本型, , String，磁盘卷的根路径 例如:d:
    .参数 指定新卷标, 文本型, , String，指定新卷标。用vbNullString指示删除当前卷名

.DLL命令 窗口获得焦点_, 整数型, "user32.dll", "SetFocus", 公开, SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
    .参数 窗口句柄, 整数型, , hWnd

.DLL命令 设置矩形_, 整数型, "user32", "SetRect", 公开, SetRect
    .参数 矩形, 矩形_, , 
    .参数 左边, 整数型, , 
    .参数 顶边, 整数型, , 
    .参数 右边, 整数型, , 
    .参数 底边, 整数型, , 

.DLL命令 SetRect, 整数型, "user32", "SetRect", 公开, SetRect
    .参数 矩形, 矩形_, , 
    .参数 左边, 整数型, , 
    .参数 顶边, 整数型, , 
    .参数 右边, 整数型, , 
    .参数 底边, 整数型, , 

.DLL命令 清空矩形_, 整数型, "user32", "SetRectEmpty", 公开, SetRectEmpty
    .参数 区域, 矩形_, , 

.DLL命令 SetRectEmpty, 整数型, "user32", "SetRectEmpty", 公开, SetRectEmpty
    .参数 区域, 矩形_, , 

.DLL命令 判断窗口最大化_, 整数型, "user32.dll", "IsZoomed", 公开, IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
    .参数 窗口句柄, 整数型, , hwnd,欲测试的窗口的句柄

.DLL命令 SetFocus, 整数型, "user32.dll", "SetFocus", 公开, SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
    .参数 窗口句柄, 整数型, , hWnd

.DLL命令 IsZoomed, 整数型, "user32.dll", "IsZoomed", 公开, IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
    .参数 窗口句柄, 整数型, , hwnd,欲测试的窗口的句柄

.DLL命令 创建捕获_, 整数型, "avicap32.dll", "capCreateCaptureWindowA", 公开, 返回系捕获窗口句柄 capCreateCaptureWindowA 
    .参数 标题, 文本型, , 
    .参数 风格, 整数型, , 一般为:1342177280
    .参数 左边, 整数型, , 
    .参数 顶边, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 
    .参数 父窗口, 整数型, , 
    .参数 标志, 整数型, , 一般为:0

.DLL命令 capCreateCaptureWindowA, 整数型, "avicap32.dll", "capCreateCaptureWindowA", 公开, 返回系捕获窗口句柄 capCreateCaptureWindowA 
    .参数 标题, 文本型, , 
    .参数 风格, 整数型, , 一般为:1342177280
    .参数 左边, 整数型, , 
    .参数 顶边, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 
    .参数 父窗口, 整数型, , 
    .参数 标志, 整数型, , 一般为:0

.DLL命令 增加到最近文档_, 整数型, "shell32.dll", "SHAddToRecentDocs", 公开, SHAddToRecentDocs   清除打开文档历史记录  \增加到最近文档
    .参数 标志, 整数型, , dwFlags一般为2       其中uFlags如为1，pv则为一路径字符串的地址；如为2，则为项标示列表的地址
    .参数 数据, 文本型, , dwData一般为字符 (0)如果程序设计需要往“文档"菜单中添加文件，只需把vbNullString改为文件的路径，如“c:\windows\a.txt"

.DLL命令 清除打开文档历史记录_, 整数型, "shell32.dll", "SHAddToRecentDocs", 公开, SHAddToRecentDocs   清除打开文档历史记录  \增加到最近文档
    .参数 参数, 整数型, , uFlags As Long uFlags As Long一般为2       其中uFlags如为1，pv则为一路径字符串的地址；如为2，则为项标示列表的地址。
    .参数 文本, 文本型, , pv As String 一般为字符 (0)如果程序设计需要往“文档"菜单中添加文件，只需把vbNullString改为文件的路径，如“c:\windows\a.txt"

.DLL命令 SHAddToRecentDocs, 整数型, "shell32.dll", "SHAddToRecentDocs", 公开, SHAddToRecentDocs   清除打开文档历史记录  \增加到最近文档 
    .参数 参数, 整数型, , uFlags As Long uFlags As Long一般为2       其中uFlags如为1，pv则为一路径字符串的地址；如为2，则为项标示列表的地址。
    .参数 文本, 文本型, , pv As String 一般为字符 (0)  如果程序设计需要往“文档"菜单中添加文件，只需把vbNullString改为文件的路径，如“c:\windows\a.txt"

.DLL命令 提取图标扩展_, 整数型, "shell32.dll", "ExtractIconExA", 公开, $(b)ExtractIconExA 
    .参数 文件名, 文本型, , lpszFile "shell32.dll"
    .参数 图标索引, 整数型, , nIconIndex
    .参数 大图标句柄, 整数型, 传址, phiconLarge
    .参数 小图标句柄, 整数型, , phiconSmall
    .参数 图标数量, 整数型, , nIcons

.DLL命令 ExtractIconExA, 整数型, "shell32.dll", "ExtractIconExA", 公开, $(b)ExtractIconExA
    .参数 文件名, 文本型, , lpszFile "shell32.dll"
    .参数 图标索引, 整数型, , nIconIndex
    .参数 大图标句柄, 整数型, 传址, phiconLarge
    .参数 小图标句柄, 整数型, , phiconSmall
    .参数 图标数量, 整数型, , nIcons

.DLL命令 画图标_, 整数型, "user32", "DrawIcon", 公开, DrawIcon$(b)在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景GetDC$(b)获取指定窗口的设备场景 
    .参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
    .参数 纵坐标, 整数型, , 同上
    .参数 图标句柄, 整数型, , 欲描绘图标的句柄;

.DLL命令 DrawIcon, 整数型, "user32", "DrawIcon", 公开, DrawIcon$(b)在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景GetDC$(b)获取指定窗口的设备场景 
    .参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
    .参数 纵坐标, 整数型, , 同上
    .参数 图标句柄, 整数型, , 欲描绘图标的句柄;

.DLL命令 GetDC, 整数型, "user32", "GetDC", 公开, GetDC$(b)获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 SetParent, 整数型, "user32", "SetParent", 公开, SetParent返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
    .参数 子窗口句柄, 整数型, , hWndChild
    .参数 新的父窗口句柄, 整数型, , hWndNewParent

.DLL命令 置父窗口_, 整数型, "user32", "SetParent", 公开, SetParent 返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
    .参数 子窗口句柄, 整数型, , hWndChild
    .参数 新的父窗口句柄, 整数型, , hWndNewParent

.DLL命令 判断窗口句柄是否有效_, 整数型, "user32.dll", "IsWindow", 公开, IsWindow判断一个窗口句柄是否有效 如果为1则为有效 0为无效
    .参数 窗口句柄, 整数型, , hwnd,待检查窗口的句柄

.DLL命令 PathFileExistsA, 整数型, "shlwapi.dll", "PathFileExistsA", 公开, PathFileExistsA检测文件是否存在，0不存在, 1存在
    .参数 pszPath, 文本型, , 文件名（含路径） pszPath

.DLL命令 检测文件是否存在_, 整数型, "shlwapi.dll", "PathFileExistsA", 公开, PathFileExistsA检测文件是否存在，0不存在, 1存在
    .参数 文件名, 文本型, , 文件名（含路径） pszPath

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, PathIsDirectoryA 目录是否存在，0不存在, 16存在
    .参数 pszPath, 文本型, , 目录名（含路径） pszPath

.DLL命令 检测文件夹是否存在_, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, PathIsDirectoryA 目录是否存在，0不存在, 16存在
    .参数 目录名, 文本型, , 目录名（含路径） pszPath

.DLL命令 打开文件_, 整数型, "kernel32.dll", "OpenFile", 公开, OpenFile$(b)Long，如执行成功，返回文件句柄。  打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
    .参数 文件名, 文本型, , lpFileName，欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, 传址, lpReOpenBuff，文件操作结果 文件结构信息
    .参数 操作方式, 整数型, , wStyle，操作方式  一般为32

.DLL命令 关闭内核对象_, 整数型, "kernel32", "CloseHandle", 公开, CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 OpenFile, 整数型, "kernel32.dll", "OpenFile", 公开, OpenFile$(b)Long，如执行成功，返回文件句柄。  打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
    .参数 文件名, 文本型, , lpFileName，欲打开文件的名字
    .参数 文件操作结果, 文件结构信息_, 传址, lpReOpenBuff，文件操作结果 文件结构信息
    .参数 操作方式, 整数型, , wStyle，操作方式  一般为32

.DLL命令 读入文件数据_, 整数型, "kernel32", "ReadFileEx", 公开, 
    .参数 文件句柄, 整数型, , hfile，文件的句柄
    .参数 数据缓冲区, 字节型, 数组, lpbuffer，指定容纳读入数据的一个缓冲区。除非读操作执行完毕，否则不要访问这个缓冲区
    .参数 读入长度, 整数型, , nnumberofbytestoread，要读入的字节数
    .参数 异步操作结构, 重叠操作_, , lpoverlapped，定义了一个异步操作的结构。使用这个函数时，结构中的hEvent字段会被忽略
    .参数 回调函数返回值, 整数型, , lpcompletionroutine，回调函数的返回值

.DLL命令 取文件尺寸_, 整数型, "kernel32", "GetFileSize", 公开, GetFileSizeLong，返回文件长度。&HFFFFFFFF表示出错。注意如lpFileSizeHigh不为NULL，且结果为&HFFFFFFFF，那么必须调用GetLastError，判断是否实际发生了一个错误，因为这是一个有效的结果
    .参数 文件句柄, 整数型, , 
    .参数 尺寸大小, 整数型, , 

.DLL命令 GetFileSize, 整数型, "kernel32", "GetFileSize", 公开, GetFileSizeLong，返回文件长度。&HFFFFFFFF表示出错。注意如lpFileSizeHigh不为NULL，且结果为&HFFFFFFFF，那么必须调用GetLastError，判断是否实际发生了一个错误，因为这是一个有效的结果
    .参数 文件句柄, 整数型, , 
    .参数 尺寸大小, 整数型, , 

.DLL命令 取启动时间_, 整数型, "user32", "GetMessageTime", 公开, ,GetMessageTime

.DLL命令 GetMessageTime, 整数型, "user32", "GetMessageTime", 公开, ,GetMessageTime

.DLL命令 查找文件_, 整数型, "kernel32.dll", "FindFirstFileA", 公开, FindFirstFileA  Long，如执行成功，返回一个搜索句柄 失败返回-1
    .参数 文件名, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS\*.*
    .参数 文件信息, 查找的文件信息_, , lpFindFileData，参见相关帮助

.DLL命令 查找下一个文件_, 整数型, "kernel32.dll", "FindNextFileA", 公开, FindNextFileA Long，非零表示成功，零表示失败。
    .参数 搜索句柄, 整数型, , hFindFile，参见相关帮助  由FindFirstFile函数创建的一个搜索句柄
    .参数 文件有关信息, 查找的文件信息_, , lpFindFileData，参见相关帮助

.DLL命令 FindFirstFileA, 整数型, "kernel32.dll", "FindFirstFileA", 公开, FindFirstFileA  Long，如执行成功，返回一个搜索句柄 失败返回-1
    .参数 文件名, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS\*.*
    .参数 文件信息, 查找的文件信息_, , lpFindFileData，参见相关帮助

.DLL命令 FindNextFileA, 整数型, "kernel32.dll", "FindNextFileA", 公开, FindNextFileA Long，非零表示成功，零表示失败。
    .参数 搜索句柄, 整数型, , hFindFile，参见相关帮助  由FindFirstFile函数创建的一个搜索句柄
    .参数 文件有关信息, 查找的文件信息_, , lpFindFileData，参见相关帮助

.DLL命令 FindClose, 整数型, "kernel32.dll", "FindClose", 公开, FindClose,关闭由FindFirstFile/FindNextFileA函数创建的一个搜索句柄
    .参数 搜索句柄, 整数型, , hFindFile，由FindFirstFile函数提供的搜索句柄

.DLL命令 关闭搜索句柄_, 整数型, "kernel32.dll", "FindClose", 公开, FindClose,关闭由FindFirstFile/FindNextFileA函数创建的一个搜索句柄
    .参数 搜索句柄, 整数型, , hFindFile，由FindFirstFile函数提供的搜索句柄

.DLL命令 取磁盘剩余空间_, 整数型, "shell32.dll", "SHGetDiskFreeSpaceA", 公开, SHGetDiskFreeSpace
    .参数 磁盘卷标, 文本型, , pszVolume
    .参数 剩余空间1, 字节集, , pqwFreeCaller
    .参数 总空间, 字节集, , pqwTot
    .参数 剩余空间2, 字节集, , pqwFree

.DLL命令 SHGetDiskFreeSpaceA, 整数型, "shell32.dll", "SHGetDiskFreeSpaceA", 公开, SHGetDiskFreeSpace
    .参数 磁盘卷标, 文本型, , pszVolume
    .参数 剩余空间1, 字节集, , pqwFreeCaller
    .参数 总空间, 字节集, , pqwTot
    .参数 剩余空间2, 字节集, , pqwFree

.DLL命令 取当前用户名_, 整数型, "advapi32.dll", "GetUserNameA", 公开, GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator
    .参数 字串缓冲区, 文本型, , lpBuffer String，一个字串缓冲区，预先初始化成由nSize指定的长度。它将用于容纳用户名
    .参数 字串缓冲长度, 整数型, 传址, nSize  Long，初始化成lpBuffer的长度。返回以后，它会包含载入lpBuffer的字符数量

.DLL命令 取当前用户名扩展_, 整数型, "secur32.dll", "GetUserNameExA", 公开, GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
    .参数 用户名格式化, 整数型, , NameFormat 一般为 NameSamCompatible=2
    .参数 用户名缓冲区, 文本型, , lpNameBuffer
    .参数 缓冲区大小, 整数型, 传址, nSize

.DLL命令 GetUserNameExA, 整数型, "secur32.dll", "GetUserNameExA", 公开, GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator
    .参数 用户名格式化, 整数型, , NameFormat 一般为 NameSamCompatible=2
    .参数 用户名缓冲区, 文本型, , lpNameBuffer
    .参数 缓冲区大小, 整数型, 传址, nSize

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator
    .参数 字串缓冲区, 文本型, , lpBuffer String，一个字串缓冲区，预先初始化成由nSize指定的长度。它将用于容纳用户名
    .参数 字串缓冲长度, 整数型, 传址, nSize  Long，初始化成lpBuffer的长度。返回以后，它会包含载入lpBuffer的字符数量

.DLL命令 取WINDOWS运行时间_, 整数型, "kernel32", "GetTickCount", 公开, GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 GetTickCount, 整数型, "kernel32", "GetTickCount", 公开, GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 取默认语言ID_, 整数型, "kernel32", "GetUserDefaultLangID", 公开, GetUserDefaultLangID

.DLL命令 GetUserDefaultLangID, 整数型, "kernel32", "GetUserDefaultLangID", 公开, GetUserDefaultLangID

.DLL命令 GetUserDefaultLCID, 整数型, "kernel32", "GetUserDefaultLCID", 公开, GetUserDefaultLCID

.DLL命令 取默认地方设置_, 整数型, "kernel32", "GetUserDefaultLCID", 公开, GetUserDefaultLCID

.DLL命令 WNetGetUserA, 整数型, "mpr.dll", "WNetGetUserA", 公开, WNetGetUserA获取一个网络资源用以连接的名字 Long，零表示成功。会设置GetLastError。如GetLastError是ERROR_EXTENDED_ERROR，则可用WNetGetLastError取得额外的错误信息 
    .参数 已连接资源的远程名称或本地名称, 文本型, , lpNameString，指定已连接资源的远程名称或本地名称。用vbNullString获取当前用户的名字
    .参数 字串缓冲区, 文本型, , lpUserName String，用于装载用户名的一个字串缓冲区 
    .参数 缓冲区的长度, 整数型, 传址, lpnLength Long，lpUserName缓冲区的长度。如缓冲区不够大，则自动设为需要的缓冲区长度 

.DLL命令 获取一个网络资源用以连接的名字_, 整数型, "mpr.dll", "WNetGetUserA", 公开, WNetGetUserA获取一个网络资源用以连接的名字 Long，零表示成功。会设置GetLastError。如GetLastError是ERROR_EXTENDED_ERROR，则可用WNetGetLastError取得额外的错误信息 
    .参数 已连接资源的远程名称或本地名称, 文本型, , lpNameString，指定已连接资源的远程名称或本地名称。用vbNullString获取当前用户的名字
    .参数 字串缓冲区, 文本型, , lpUserName String，用于装载用户名的一个字串缓冲区 
    .参数 缓冲区的长度, 整数型, 传址, lpnLength Long，lpUserName缓冲区的长度。如缓冲区不够大，则自动设为需要的缓冲区长度 

.DLL命令 SetComputerNameA, 整数型, "kernel32", "SetComputerNameA", 公开, 设置计算机名 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错 一般要重新启动才生效
    .参数 新的计算机名称, 文本型, , lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   

.DLL命令 设置计算机名_, 整数型, "kernel32", "SetComputerNameA", 公开, 设置计算机名 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错 一般要重新启动才生效
    .参数 新的计算机名称, 文本型, , lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   

.DLL命令 释放动态链接库_, 整数型, "kernel32", "FreeLibrary", 公开, FreeLibrary, 释放指定的动态链接库，它们早先是用LoadLibrary ;API函数装载的  非零表示成功，零表示失败。会设置GetLastError
    .参数 库句柄, 整数型, , hLibModule，要释放的一个库句柄，在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用

.DLL命令 取进程地址_, 整数型, "kernel32.dll", "GetProcAddress", 公开, ,GetProcAddress 如果GetProcAddress执行成功，则返回模块中函数入口处的地址，否则返回nil。
    .参数 模块句柄, 整数型, , hModule
    .参数 进程名称, 文本型, , lpProcName

.DLL命令 载入动态链接库_, 整数型, "kernel32.dll", "LoadLibraryA", 公开, LoadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
    .参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称

.DLL命令 LoadLibrary, 整数型, "kernel32.dll", "LoadLibraryA", 公开, LoadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
    .参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称

.DLL命令 取实例句柄_, 整数型, "kernel32", "GetModuleHandleA", 公开, ,
    .参数 程序名, 文本型, , 

.DLL命令 LoadLibraryA, 整数型, "kernel32.dll", "LoadLibraryA", 公开, LoadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
    .参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称

.DLL命令 mciSendString, 整数型, "winmm.dll", "mciSendStringA", 公开, mciSendStringA  mciSendString是用来播放多媒体文件的API指令，可以播放MPEG,AVI,WAV,MP3,等等
    .参数 命令, 文本型, , lpstrCommand为命令字符串，有一长串命令列表以供使用，包括：open、play、stop、break、save、copy等等 ，其基本格式均为“命令 [设备] [命令属性] [标志]”，具体说明还是查看MSDN（或者查看MSDN网站上的这个网址http://windowssdk.msdn.microsoft.com/en-us/library/ms712587.aspx）。 一些常用的有：打开多媒体设备：open，如：open CDAudio、open c:\windows\chimes.wav type waveaudio 播放多媒体设备：play，如：play CDAudio from 5000 to 20000（播放CD的第5秒到第20秒）、play  c:\windows\chimes.wav。  关闭多媒体设备：close，如：close all（关闭所有多媒体设备）。  得到设备状态信息：status，如：status cdaudio number of track（得到CD的曲目总数）。 
    .参数 返回信息, 文本型, , lpstrReturnString为返回信息，可以设为空字符串。 
    .参数 返回信息, 整数型, , uReturnLength为返回信息lpstrReturnString的长度。
    .参数 回调窗口句柄, 整数型, , hwndCallback为回调窗口的句柄，只有当lpstrCommand中设置了notify标志位时才有效

.DLL命令 驱动器类型_, 整数型, "kernel32", "GetDriveTypeA", 公开, ,GetDriveTypeA,Long，如驱动器不能识别，则返回零。如指定的目录不存在，则返回1。如执行成功，则用下述任何一个常数指定驱动器类型：DRIVE_REMOVABLE， DRIVE_FIXED， DRIVE_REMOTE， DRIVE_CDROM 或 DRIVE_RAMDISK  2; {软盘} 3; {本地硬盘} 4; {网络磁盘} 5; {CD-ROM} 6; {RAM 磁盘}
    .参数 路径, 文本型, , nDrive String，包含了驱动器根目录路径的一个字串 如"c:\"

.DLL命令 GetDriveTypeA, 整数型, "kernel32", "GetDriveTypeA", 公开, ,GetDriveTypeA,Long，如驱动器不能识别，则返回零。如指定的目录不存在，则返回1。如执行成功，则用下述任何一个常数指定驱动器类型：DRIVE_REMOVABLE， DRIVE_FIXED， DRIVE_REMOTE， DRIVE_CDROM 或 DRIVE_RAMDISK  2; {软盘} 3; {本地硬盘} 4; {网络磁盘} 5; {CD-ROM} 6; {RAM 磁盘}
    .参数 路径, 文本型, , nDrive String，包含了驱动器根目录路径的一个字串 如"c:\"

.DLL命令 判断逻辑驱动器字母_, 整数型, "kernel32", "GetLogicalDrives", 公开, ,GetLogicalDrives 判断系统中存在哪些逻辑驱动器字母  Long，这个结构中的二进制位标志着存在哪些驱动器。其中，位0设为1表示驱动器A:存在于系统中；位1设为1表示存在B:驱动器；以次类推 

.DLL命令 GetLogicalDrives, 整数型, "kernel32", "GetLogicalDrives", 公开, ,GetLogicalDrives 判断系统中存在哪些逻辑驱动器字母  Long，这个结构中的二进制位标志着存在哪些驱动器。其中，位0设为1表示驱动器A:存在于系统中；位1设为1表示存在B:驱动器；以次类推 

.DLL命令 获取磁盘类型_, 整数型, "kernel32", "GetDriveTypeA", 公开, GetDriveTypeA,Long，如驱动器不能识别，则返回零。如指定的目录不存在，则返回1。如执行成功，则用下述任何一个常数指定驱动器类型：DRIVE_REMOVABLE， DRIVE_FIXED， DRIVE_REMOTE， DRIVE_CDROM 或 DRIVE_RAMDISK  2; {软盘} 3; {本地硬盘} 4; {网络磁盘} 5; {CD-ROM} 6; {RAM 磁盘}
    .参数 路径, 文本型, , nDrive String，包含了驱动器根目录路径的一个字串 如"c:\"

.DLL命令 GetShortPathNameA, 整数型, "kernel32", "GetShortPathNameA", 公开, 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度
    .参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定
    .参数 缓冲区, 文本型, , lpszShortPath String，指定一个缓冲区，用于装载文件的短路径和文件名
    .参数 缓冲区长度, 整数型, , cchBuffer Long，lpszShortPath缓冲区长度

.DLL命令 取短路径名_, 整数型, "kernel32", "GetShortPathNameA", 公开, 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度
    .参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定
    .参数 缓冲区, 文本型, , lpszShortPath String，指定一个缓冲区，用于装载文件的短路径和文件名
    .参数 缓冲区长度, 整数型, , cchBuffer Long，lpszShortPath缓冲区长度

.DLL命令 删除路径引号_, 空白型, "shlwapi.dll", "PathUnquoteSpacesA", 公开, PathUnquoteSpacesA 的作用是删除路径文本首部尾部的半角  如果有一个不存在将不执行删除，无返回值。
    .参数 路径文本, 文本型, , lpsz

.DLL命令 调用帮助_, 整数型, "user32.dll", "WinHelpA", 公开, 援引WINDOWSHELP
    .参数 窗口句柄, 整数型, , hwnd
    .参数 帮助文件, 文本型, , lpHelpFile
    .参数 命令, 整数型, , wCommand
    .参数 数据, 整数型, , dwData

.DLL命令 WinHelpA, 整数型, "user32.dll", "WinHelpA", 公开, 援引WINDOWSHELP
    .参数 窗口句柄, 整数型, , hwnd
    .参数 帮助文件, 文本型, , lpHelpFile
    .参数 命令, 整数型, , wCommand
    .参数 数据, 整数型, , dwData

.DLL命令 PathUnquoteSpacesA, 空白型, "shlwapi.dll", "PathUnquoteSpacesA", 公开, PathUnquoteSpacesA 的作用是删除路径文本首部尾部的半角  如果有一个不存在将不执行删除，无返回值。
    .参数 路径文本, 文本型, , lpsz

.DLL命令 判断窗口最小化_, 整数型, "user32.dll", "IsIconic", 公开, IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd,待检测窗口的句柄

.DLL命令 IsIconic, 整数型, "user32.dll", "IsIconic", 公开, IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd,待检测窗口的句柄

.DLL命令 SetForegroundWindow, 整数型, "user32", "SetForegroundWindow", 公开, SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.DLL命令 将窗口设为系统的前台窗口_, 整数型, "user32", "SetForegroundWindow", 公开, SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口

.DLL命令 创建扩展线程_, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 数据, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 SHCreateThread, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 数据, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 呼叫窗口函数地址_, 整数型, "user32.dll", "CallWindowProcA", 公开, CallWindowProcA
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 允许或禁止窗口_, 整数型, "user32.dll", "EnableWindow", 公开, EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 标识符, 整数型, , fEnable，非零允许，零禁止

.DLL命令 ShowWindow, 整数型, "user32.dll", "ShowWindow", 公开, ShowWindow返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。  控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
    .参数 窗口句柄, 整数型, , hWnd：窗口句柄。
    .参数 窗口如何显示, 整数型, , nCmdShow：指定窗口如何显示 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活 1 最小化取消激活 2 还原激活 3 显示激活 4 最大化激活 5 最小化激活 6 最小化 7 显示 8 最近状态显示 9 还原 更多查看常量:ShowWindow

.DLL命令 设置窗口透明度_, 整数型, "user32", "SetLayeredWindowAttributes", 公开, SetLayeredWindowAttributes 设置窗口透明度
    .参数 窗口句柄, 整数型, , 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
    .参数 颜色值, 整数型, , crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
    .参数 透明度, 整数型, , 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
    .参数 透明方式, 整数型, , dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。

.DLL命令 取得窗口信息_, 整数型, "user32", "GetWindowLongA", 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 GetWindowLongA, 整数型, "user32", "GetWindowLongA", 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", 公开, GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 设置窗口信息_, 整数型, "user32", "SetWindowLongA", 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 设定执行文件_, 整数型, "shell32.dll", "ShellExecuteEx", 公开, ShellExecuteEx
    .参数 设定执行文件信息结构, 设定执行文件信息_, , 

.DLL命令 ShellExecuteEx, 整数型, "shell32.dll", "ShellExecuteEx", 公开, ShellExecuteEx
    .参数 设定执行文件信息结构, 设定执行文件信息_, , 

.DLL命令 重新启动系统设置_, 整数型, "shell32.dll", "#59", 公开, #59
    .参数 窗口句柄, 整数型, , hOwner
    .参数 额外提示, 整数型, , sExtraPrompt
    .参数 标志, 整数型, , uFlags EWX_FORCE=4 EWX_SHUTDOWN=1

.DLL命令 发送消息返回_, 整数型, "user32.dll", "SendMessageCallbackA", 公开, SendMessageCallback，该函数最大的特定是可以立即返回。目标窗口函数执行完毕后，会用回调函数的形式将结果返回Long，TRUE表示成功，FALSE表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd，要接收消息的那个窗口的句柄
    .参数 消息标识符, 整数型, , wmsg，消息的标识符
    .参数 消息1, 整数型, , wParam，取决于消息
    .参数 消息2, 整数型, , lParam，取决于消息
    .参数 指定函数地址, 整数型, , lpResultCallBack，指定函数地址。在vb5中可用AddressOf操作符获得
    .参数 自定义值, 整数型, , dwData，用户自定义值

.DLL命令 同步发送消息_, 整数型, "user32.dll", "SendMessageTimeoutA", 公开, SendMessageTimeout，Long，成功时返回TRUE，失败时返回FALSE。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd，要接收消息的一个窗口的句柄
    .参数 标识符, 整数型, , msg，消息的标识符
    .参数 消息1, 整数型, , wparam，由消息决定
    .参数 消息2, 整数型, , lparam，由消息决定
    .参数 类型, 整数型, , fuflags，下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起，则函数立即返回
    .参数 超时值, 整数型, , utimeout，超时值，采用毫秒为单位
    .参数 结果, 整数型, , lpdwresult，用于装载函数结果的一个变量

.DLL命令 SendMessageTimeoutA, 整数型, "user32.dll", "SendMessageTimeoutA", 公开, SendMessageTimeout，Long，成功时返回TRUE，失败时返回FALSE。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd，要接收消息的一个窗口的句柄
    .参数 标识符, 整数型, , msg，消息的标识符
    .参数 消息1, 整数型, , wparam，由消息决定
    .参数 消息2, 整数型, , lparam，由消息决定
    .参数 类型, 整数型, , fuflags，下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起，则函数立即返回
    .参数 超时值, 整数型, , utimeout，超时值，采用毫秒为单位
    .参数 结果, 整数型, , lpdwresult，用于装载函数结果的一个变量

.DLL命令 SendMessageCallbackA, 整数型, "user32.dll", "SendMessageCallbackA", 公开, SendMessageCallback，该函数最大的特定是可以立即返回。目标窗口函数执行完毕后，会用回调函数的形式将结果返回Long，TRUE表示成功，FALSE表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , hwnd，要接收消息的那个窗口的句柄
    .参数 消息标识符, 整数型, , wmsg，消息的标识符
    .参数 消息1, 整数型, , wParam，取决于消息
    .参数 消息2, 整数型, , lParam，取决于消息
    .参数 指定函数地址, 整数型, , lpResultCallBack，指定函数地址。在vb5中可用AddressOf操作符获得
    .参数 自定义值, 整数型, , dwData，用户自定义值

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", 公开, ReleaseDC   Long，执行成功为1，否则为0   释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）
    .参数 窗口句柄, 整数型, , hwnd
    .参数 设备场景, 整数型, , hdc

.DLL命令 描绘桌面墙纸_, 整数型, "user32.dll", "PaintDesktop", 公开, PaintDesktop Long，TRUE（非零）表示成功，否则返回零  在指定的设备场景中描绘桌面墙纸图案
    .参数 设备场景句柄, 整数型, , hdc，要在其中填充的设备场景

.DLL命令 PaintDesktop, 整数型, "user32.dll", "PaintDesktop", 公开, PaintDesktop Long，TRUE（非零）表示成功，否则返回零  在指定的设备场景中描绘桌面墙纸图案
    .参数 设备场景句柄, 整数型, , hdc，要在其中填充的设备场景

.DLL命令 关闭系统_, 整数型, "user32.dll", "ExitWindowsEx", 公开, ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
    .参数 标志, 整数型, , uFlags,指定一个或多个标志的组合uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
    .参数 保留值, 整数型, , dwReserved,保留，设为零65535

.DLL命令 ExitWindowsEx, 整数型, "user32.dll", "ExitWindowsEx", 公开, ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
    .参数 标志, 整数型, , uFlags,指定一个或多个标志的组合uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
    .参数 保留值, 整数型, , dwReserved,保留，设为65535零

.DLL命令 SetWindowLongA, 整数型, "user32", "SetWindowLongA", 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", 公开, SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 取长路径名_, 整数型, "kernel32.dll", "GetLongPathNameA", 公开, GetLongPathNameA获取指定文件长路径名 返回文件路径长度
    .参数 短路径文本, 文本型, , lpszShortPath
    .参数 长路径文本, 文本型, , lpszLongPath
    .参数 缓冲区大小, 整数型, , cchBuffer

.DLL命令 取环境信息_, 整数型, "user32", "GetSystemMetrics", 公开, ,GetSystemMetrics
    .参数 索引, 整数型, , 

.DLL命令 GetSystemMetrics, 整数型, "user32", "GetSystemMetrics", 公开, ,GetSystemMetrics
    .参数 索引, 整数型, , 

.DLL命令 设置焦点窗口_, 整数型, "user32.dll", "SetFocus", 公开, 
    .参数 窗口句柄, 整数型, , Long，准备接收焦点的窗口的句柄

.DLL命令 GetLongPathNameA, 整数型, "kernel32.dll", "GetLongPathNameA", 公开, GetLongPathNameA获取指定文件长路径名 返回文件路径长度
    .参数 短路径文本, 文本型, , lpszShortPath
    .参数 长路径文本, 文本型, , lpszLongPath
    .参数 缓冲区大小, 整数型, , cchBuffer

.DLL命令 销毁时钟_, 整数型, "user32.dll", "KillTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 KillTimer, 整数型, "user32.dll", "KillTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 设置时钟_, 整数型, "user32.dll", "SetTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 回调函数地址, 整数型, , lpTimerFunc

.DLL命令 TerminateProcess, 整数型, "kernel32", "TerminateProcess", 公开, 结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , hProcess Long，指定要中断的一个进程的句柄
    .参数 退出代码, 整数型, , uExitCode Long，进程的一个退出代码

.DLL命令 结束进程_, 整数型, "kernel32", "TerminateProcess", 公开, 结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 进程句柄, 整数型, , hProcess Long，指定要中断的一个进程的句柄
    .参数 退出代码, 整数型, , uExitCode Long，进程的一个退出代码

.DLL命令 取系统时间_, 整数型, "kernel32", "GetSystemTime", 公开, GetSystemTime
    .参数 时间格式, 系统时间_, , 

.DLL命令 GetSystemTime, 整数型, "kernel32", "GetSystemTime", 公开, GetSystemTime
    .参数 时间格式, 系统时间_, , 

.DLL命令 取现行时间_, 整数型, "kernel32", "GetLocalTime", 公开, GetLocalTime
    .参数 系统时间格式, 系统时间_, 传址, 

.DLL命令 GetLocalTime, 整数型, "kernel32", "GetLocalTime", 公开, GetLocalTime
    .参数 系统时间格式, 系统时间_, 传址, 

.DLL命令 MD5Update, 整数型, "advapi32.dll", "MD5Update", 公开, 开始编码
    .参数 PROTO_LIST, MD5_CTX, , 
    .参数 数据, 文本型, , 也可以是字节集等
    .参数 数据长, 整数型, , 

.DLL命令 MD5Final, 整数型, "advapi32.dll", "MD5Final", 公开, 完成
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 MD5Init, 整数型, "advapi32.dll", "MD5Init", 公开, 初始化
    .参数 PROTO_LIST, MD5_CTX, , 

.DLL命令 更换墙纸_, 整数型, "user32.dll", "SystemParametersInfoA", 公开, Long，非零表示成功，零表示失败。会设置GetLastError  允许获取和设置数量众多的windows系统参数
    .参数 参数一, 整数型, , Long，指定要设置的参数 SPI_SETDESKWALLPAPER = 20
    .参数 参数二, 整数型, , Long，0
    .参数 壁纸路径, 文本型, , Any结构/String数据
    .参数 参数三, 整数型, , 

.DLL命令 打开开始菜单运行, 整数型, "shell32", "#61", 公开, #61
    .参数 窗口句柄, 整数型, , hOwner
    .参数 图标参数1, 整数型, , Unknown1 比较喜欢系统图标0 7 一般为0
    .参数 图标参数2, 整数型, , Unknown2 一般为0
    .参数 文本1, 文本型, , szTitl
    .参数 文本2, 文本型, , szPrompt 
    .参数 按钮参数, 整数型, , uFlags 设置按钮的可视性和禁止 一般为0  可以为负数

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", 公开, 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 回调函数地址, 整数型, , lpTimerFunc

.DLL命令 CreateFile, 整数型, "kernel32.dll", "CreateFileA", 公开, CreateFileA Long，如执行成功，则返回文件句柄。 
    .参数 打开文件名, 文本型, , lpFileName，要打开的文件的名字
    .参数 访问权限, 整数型, , dwDesiredAccess，访问权限 Long，如果为 GENERIC_READ 表示允许对设备进行读访问；如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）
    .参数 共享方式, 整数型, , dwShareMode，共享方式 Long，零表示不共享; FILE_SHARE_READ和/或FILE_SHARE_WRITE 表示允许对文件进行共享访问
    .参数 安全特性, 安全性结构_, 传址, lpSecurityAttributes，安全特性信息
    .参数 创建方式, 整数型, , dwCreationDisposition，创建方式  OPEN_EXISTING 文件必须已经存在。由设备提出要求
    .参数 文件属性, 整数型, , dwFlagsAndAttributes，参见相关帮助  FILE_ATTRIBUTE_NORMAL 默认属性 
    .参数 从文件复制文件属性, 整数型, , hTemplateFile，参见相关帮助  Long，如果不为零，则指定一个文件句柄

.DLL命令 创建文件_, 整数型, "kernel32.dll", "CreateFileA", 公开, CreateFileA Long，如执行成功，则返回文件句柄。 
    .参数 打开文件名, 文本型, , lpFileName，要打开的文件的名字
    .参数 访问权限, 整数型, , dwDesiredAccess，访问权限 Long，如果为 GENERIC_READ 表示允许对设备进行读访问；如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）
    .参数 共享方式, 整数型, , dwShareMode，共享方式 Long，零表示不共享; FILE_SHARE_READ和/或FILE_SHARE_WRITE 表示允许对文件进行共享访问
    .参数 安全特性, 安全性结构_, 传址, lpSecurityAttributes，安全特性信息
    .参数 创建方式, 整数型, , dwCreationDisposition，创建方式  OPEN_EXISTING 文件必须已经存在。由设备提出要求
    .参数 文件属性, 整数型, , dwFlagsAndAttributes，参见相关帮助  FILE_ATTRIBUTE_NORMAL 默认属性 
    .参数 从文件复制文件属性, 整数型, , hTemplateFile，参见相关帮助  Long，如果不为零，则指定一个文件句柄

.DLL命令 CreateFileA, 整数型, "kernel32.dll", "CreateFileA", 公开, CreateFileA Long，如执行成功，则返回文件句柄。 
    .参数 打开文件名, 文本型, , lpFileName，要打开的文件的名字
    .参数 访问权限, 整数型, , dwDesiredAccess，访问权限 Long，如果为 GENERIC_READ 表示允许对设备进行读访问；如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）
    .参数 共享方式, 整数型, , dwShareMode，共享方式 Long，零表示不共享; FILE_SHARE_READ和/或FILE_SHARE_WRITE 表示允许对文件进行共享访问
    .参数 安全特性, 安全性结构_, 传址, lpSecurityAttributes，安全特性信息
    .参数 创建方式, 整数型, , dwCreationDisposition，创建方式  OPEN_EXISTING 文件必须已经存在。由设备提出要求
    .参数 文件属性, 整数型, , dwFlagsAndAttributes，参见相关帮助  FILE_ATTRIBUTE_NORMAL 默认属性 
    .参数 从文件复制文件属性, 整数型, , hTemplateFile，参见相关帮助  Long，如果不为零，则指定一个文件句柄

.DLL命令 载入图标_, 整数型, "user32.dll", "LoadIconA", 公开, 从指定的模块或应用程序实例中载入一个图标
    .参数 实例句柄, 整数型, , hInstance,参见相关帮助
    .参数 图标标识, 文本型, , lpIconName,作为一个字串，指定欲载入的图标资源

.DLL命令 GetDlgItemText, 整数型, "User32.dll", "GetDlgItemTextA", 公开, 该函数用于获取对话框中指定控件的标题或文本。  如果函数调用成功，返回值为拷贝到缓冲区中的 TCHAR 字符个数（不包括结束空字符）。如果函数调用失败，返回值为 0  
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
    .参数 缓冲区最大字符数, 整数型, , nMaxCount

.DLL命令 GetDlgItem, 整数型, "User32.dll", "GetDlgItemA", 公开, 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。

.DLL命令 获取对话框文本_, 整数型, "User32.dll", "GetDlgItemTextA", 公开,  返回值字符个数  
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem
    .参数 缓冲区, 文本型, , lpString 
    .参数 缓冲区最大字符数, 整数型, , nMaxCount

.DLL命令 清除窗口_, 整数型, "user32.dll", "DestroyWindow", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

.DLL命令 DestroyWindow, 整数型, "user32.dll", "DestroyWindow", 公开, 
    .参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄

.DLL命令 SetDlgItemText, 整数型, "user32.dll", "SetDlgItemTextA", 公开, 该函数设置对话框中控制的文本和标题。
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 设置文本, 文本型, , lpString  

.DLL命令 设置对话框文本_, 整数型, "user32.dll", "SetDlgItemTextA", 公开, 该函数设置对话框中控制的文本和标题。
    .参数 对话框的句柄, 整数型, , hDlg
    .参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
    .参数 设置文本, 文本型, , lpString  

.DLL命令 GetCommandLine, 文本型, "kernel32", "GetCommandLineA", 公开, Win32程序的命令行参数  命令行参数的方法是使用 Api - GetCommandLine，它没有输入参数，返回的是指向命令行的指针，返回的字符串中，包含执行文件的文件名

.DLL命令 比较文本长度_, 整数型, "kernel32.dll", "lstrcmpi", 公开,  第二个参数比第一个参数长，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数长，返回值为1
    .参数 待比较文本一, 文本型, , lpString1
    .参数 待比较文本二, 文本型, , lpString2

.DLL命令 lstrcmpi, 整数型, "kernel32.dll", "lstrcmpi", 公开,  第二个参数比第一个参数长，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数长，返回值为1
    .参数 待比较文本一, 文本型, , lpString1
    .参数 待比较文本二, 文本型, , lpString2

.DLL命令 lstrcmp, 整数型, "kernel32.dll", "lstrcmpA", 公开, lstrcmp 第二个参数比第一个参数小，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数大，返回值为1
    .参数 待比较文本一, 文本型, , lpString1
    .参数 待比较文本二, 文本型, , lpString2

.DLL命令 释放内存分配_, 整数型, "kernel32", "GlobalFree", 公开, 释放GlobalAlloc 申请的内存
    .参数 内存句柄, 整数型, ,  hMem  

.DLL命令 全局分配分配_, 整数型, "kernel32.dll", "GlobalAlloc", 公开, 分配固定的内存,返回值是一个指针
    .参数 标志, 整数型, , wFlags
    .参数 字节, 整数型, , dwBytes

.DLL命令 取环境变量值_, 整数型, "kernel32", "GetEnvironmentVariableA", 公开, 如指定的环境字串不存在，就返回零。
    .参数 环境字串名称, 文本型, , 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 取环境变量文本_, 整数型, "kernel32", "GetEnvironmentStringsA", 公开, 为包含了当前环境字串设置的一个内存块分配和返回一个句柄。这个内存块包含了所有环境字串。各字串间用一个NULL分隔；连续两个NULL标志着列表的结尾  指向包含了环境字串的一个内存块的地址。零表示失败。会设置GetLastError

.DLL命令 释放环境变量文本_, 整数型, "kernel32", "FreeEnvironmentStringsA", 公开, 翻译指定的环境字串块  非零表示成功，零表示失败。会设置GetLastError
    .参数 内存块的句柄, 整数型, , lpsz Long，指向一个内存块的句柄；那个内存块是以前通过GetEnvironmentStrings函数获得的

.DLL命令 置环境变量值_, 整数型, "kernel32", "SetEnvironmentVariableA", 公开, 置环境变量值 TRUE（非零）表示成功，否则返回零
    .参数 环境字串名称, 文本型, , 
    .参数 价值, 文本型, , 

.DLL命令 GetLastError, 整数型, "kernel32.dll", "GetLastError", 公开, 针对之前调用的api函数，用这个函数取得扩展错误信息

.DLL命令 DragAcceptFiles, 整数型, "shell32.dll", "DragAcceptFiles", 公开, 是否以让窗口能够接受拖放
    .参数 窗口句柄, 整数型, ,  hWnd
    .参数 是否接受, 整数型, , fAccept True 1 False 0

.DLL命令 DragQueryFile, 整数型, "shell32.dll", "DragQueryFileA", 公开, 查询拖放的文件名 
    .参数 文件结构句柄, 整数型, , hDrop  设置为wParam
    .参数 文件序号, 整数型, , iFile 是以0   开始的被拖动文件的序号 -1 返回拖动文件的数量 不为1返回缓冲区文本长度 
    .参数 缓冲区, 文本型, , lpszFile 指向文件名的缓冲区
    .参数 缓冲区的大小, 整数型, , cch

.DLL命令 DragFinish, 整数型, "shell32.dll", "DragFinish", 公开, 释放拖放文件时使用的资源
    .参数 文件结构句柄, 整数型, , hDrop  设置为wParam

.DLL命令 枚举父窗口_, 整数型, "user32.dll", "EnumWindows", 公开, 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
    .参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
    .参数 自定义数值, 整数型, , lParam,参见相关帮助

.DLL命令 设置剪贴板中数据_, 整数型, "user32", "SetClipboardData", 公开, (0为失败)
    .参数 剪贴板格式, 整数型, , wFormat
    .参数 内存句柄, 整数型, , hMem

.DLL命令 Process32First, 整数型, "kernel32.dll", "Process32First", 公开, 成功返回1，失败返回0
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32

.DLL命令 取模块文件名扩展_, 整数型, "psapi.dll", "GetModuleFileNameExA", 公开, 零表示失败
    .参数 进程句柄, 整数型, , hProcess
    .参数 模块句柄, 整数型, , hModule
    .参数 文件名缓冲区, 文本型, , lpFileName
    .参数 缓冲区大小, 整数型, , nSize

.DLL命令 取模块本名_, 整数型, "psapi.dll", "GetModuleBaseNameA", 公开, 零表示失败
    .参数 进程句柄, 整数型, , hProcess
    .参数 模块句柄, 整数型, , hModule
    .参数 文件名缓冲区, 文本型, , lpFileName
    .参数 缓冲区大小, 整数型, , nSize

.DLL命令 Process32Next, 整数型, "kernel32.dll", "Process32Next", 公开, 成功返回1，失败返回0
    .参数 快照句柄, 整数型, , hSnapshot
    .参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32

.DLL命令 拷贝内存02_, 整数型, "kernel32.dll", "RtlMoveMemory", 公开, RtlMoveMemory
    .参数 目的地址, 整数型, , pTo
    .参数 源地址, 整数型, , uFrom
    .参数 长度, 整数型, , lSize

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (_启动窗口, , 假)


.类模块 树型框操作基类, , , 

.程序集变量 集_句柄组, 整数型, , "0", 
.程序集变量 集_单一项目, TVITEMEX, , , 
.程序集变量 集_单一外部项目, TVITEMEX2, , , 
.程序集变量 集_外部进程句柄, 整数型, , , 
.程序集变量 集_外部数据地址1, 整数型, , , 
.程序集变量 集_外部数据地址2, 整数型, , , 
.程序集变量 集_项目地址, 整数型, , , 
.程序集变量 集_树型框句柄, 整数型, , , 
.程序集变量 外部控件操作, 外部控件操作类, , , 
.程序集变量 集_外部控件, 逻辑型, , , 
.程序集变量 集_自动更新, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_单一项目.cchTextMax, 260)
赋值 (集_单一外部项目.cchTextMax, 260)
赋值 (集_自动更新, 真)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除数组 (集_句柄组)

.子程序 _初始化类A, 逻辑型, , 
.参数 目标树形框句柄, 整数型, , 

.判断开始 (等于 (到大写 (取类名 (目标树形框句柄)), “SYSTREEVIEW32”))
    赋值 (集_树型框句柄, 目标树形框句柄)
    遍历句柄 ()
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取类名, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 缓冲区, 文本型, , , 

赋值 (缓冲区, 取空白文本 (256))
取窗口类名称 (窗口句柄, 缓冲区, 256)
返回 (删首尾空 (缓冲区))

.子程序 更新数据1, 空白型, , 
遍历句柄 ()

.子程序 取数值变量地址, 整数型, , 
.参数 数值变量, 字节型, 参考, 

返回 (取数据地址2 (数值变量, 数值变量, 0))

.子程序 数据_取项目数, 整数型, 公开, 返回树型框中所有项目的数目。
返回 (发送消息1 (集_树型框句柄, #TVM_GETCOUNT, 0, 0))

.子程序 数据_取缩进层次, 整数型, 公开, 返回指定项目所处缩进层次，层次值从1开始。如果未找到指定项目，返回 0 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 层次, 空白型, , , 
.局部变量 父项目, 空白型, , , 


.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (0)
.默认
    赋值 (层次, 1)
    赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 集_句柄组 [相加 (项目索引, 1)]))
    .判断循环首 (不等于 (父项目, 0))
        赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 父项目))
        赋值 (层次, 相加 (层次, 1))
    .判断循环尾 ()
    返回 (层次)
.判断结束


.子程序 数据_取项目文本, 文本型, 公开, 返回指定项目的文本。如果该项目不存在，将返回空文本。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 缓冲区, 文本型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (“”)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 260))
        赋值 (集_单一外部项目.pszText, 集_外部数据地址2)
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_TEXT)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (缓冲区, 到文本 (外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址2, 260)))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (缓冲区)
    .默认
        赋值 (集_单一项目.pszText, 取空白文本 (260))
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_TEXT)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (删首尾空 (集_单一项目.pszText))
    .判断结束
    
.判断结束


.子程序 数据_取图片, 整数型, 公开, 返回指定项目的图片索引。如果该项目不存在，将返回 -1 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (-1)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_IMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.iImage)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_IMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.iImage)
    .判断结束
    
.判断结束


.子程序 数据_取选中图片, 整数型, 公开, 返回指定项目被选中后的图片索引。如果该项目不存在，将返回 -1 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (-1)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.iSelectedImage)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.iSelectedImage)
    .判断结束
    
.判断结束


.子程序 数据_取项目数值, 整数型, 公开, 返回与指定项目相关联的数值。如果该项目不存在，将返回 0 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (0)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_PARAM)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.lParam)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_PARAM)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.lParam)
    .判断结束
    
.判断结束


.子程序 数据_置图片, 逻辑型, 公开, 设置在指定项目首部所显示图片的索引。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

 ' 参数<1>的名称为“项目索引”，类型为“整数型（int）”。0 为项目一，1 为项目二，如此类推。
 ' 参数<2>的名称为“图片索引”，类型为“整数型（int）”。图片索引用于指定图片组属性中的某张图片，从 0 开始。
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_IMAGE)
        赋值 (集_单一外部项目.iImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_IMAGE)
        赋值 (集_单一项目.iImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
        
    .判断结束
    
    
.判断结束


.子程序 数据_置选中图片, 逻辑型, 公开, 设置指定项目被选中后所显示图片的索引。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_单一外部项目.iSelectedImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_单一项目.iSelectedImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
        
    .判断结束
    
    
.判断结束


.子程序 数据_置项目数值, 逻辑型, 公开, 设置与指定项目相关联的数值。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 欲置入的项目数值, 整数型, 可空, 可以被省略。该数值与指定项目相关联。如果本参数被省略，默认值为 0 。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_PARAM)
        赋值 (集_单一外部项目.lParam, 欲置入的项目数值)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_PARAM)
        赋值 (集_单一项目.lParam, 欲置入的项目数值)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.默认
    返回 (假)
.判断结束


.子程序 数据_置项目文本, 逻辑型, 公开, 设置指定项目的文本。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 欲置入的项目文本, 文本型, , 
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 相加 (取文本长度 (欲置入的项目文本), 1)))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_TEXT)
        赋值 (集_单一外部项目.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 取数据地址3 (欲置入的项目文本, 欲置入的项目文本, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (欲置入的项目文本), 1))
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_TEXT)
        赋值 (集_单一项目.pszText, 欲置入的项目文本)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.默认
    返回 (假)
.判断结束


.子程序 动作_保证显示, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_ENSUREVISIBLE, 0, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 状态_扩展, 空白型, 公开, 将指打开指定项目的下属分枝。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_EXPAND, #TVE_EXPAND, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 状态_收缩, 空白型, 公开, 缩回指定项目的下属分枝。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_EXPAND, #TVE_COLLAPSE, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 数据_加入项目_API方式加入, 整数型, 公开, 将单个或一批项目加入到树型框中，如果仅加入一个项目，成功返回加入后该项目所处的位置，失败返回 -1 。如果成批加入项目，成功返回 0 ，失败返回 -1 。成批加入项目可以用作一次性快速加入大量项目到树型框中。
.参数 父项目索引, 整数型, 可空, 可以被省略。指定欲加入项目所处的父项目，0 为项目一，1 为项目二，如此类推。如果没有父项目（即欲加入项目为顶层项目），请提供值 -1 。如果本参数被省略，默认值为 -1 。
.参数 项目数据1, 项目数据, 可空, 用于只加入一个项目，如欲批量加入，请留空
.参数 项目数据2, 项目数据, 可空 数组, 用于批量加入项目
.参数 加入方式, 整数型, 可空, 可以被省略。默认为 #树形框插入项目_在列表尾部插入
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。
.参数 是否使用高速插入, 逻辑型, 可空, 可以被省略。当使用高速插入时，最高可提速5倍。默认为真高速加入。

.局部变量 成员数, 整数型, , , 
.局部变量 计次, 空白型, , , 
.局部变量 数据地址, 整数型, , , 
.局部变量 插入项目, TVINSERTSTRUCT, , , 
.局部变量 插入项目2, TVINSERTSTRUCT2, , , 
.局部变量 当前项目, 整数型, , , 
.局部变量 空白数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (等于 (是否为空 (父项目索引), 假), 小于或等于 (相加 (父项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (父项目索引, 0)))
    连续赋值 (集_句柄组 [相加 (父项目索引, 1)], 插入项目.hParent, 插入项目2.hParent)
.如果真结束
.如果真 (或者 (是否为空 (加入方式), 大于 (加入方式, 4), 小于 (加入方式, 1)))
    赋值 (加入方式, #树形框插入项目_在列表尾部插入)
.如果真结束
.判断开始 (等于 (是否为空 (项目数据1), 假))
    .判断开始 (集_外部控件)
        赋值 (插入项目2.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目2.iImage, 项目数据1.图片索引)
        赋值 (插入项目2.iSelectedImage, 项目数据1.选中图片索引)
        赋值 (插入项目2.lParam, 项目数据1.项目数值)
        赋值 (插入项目2.mask, #TVIF_ALL)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 52))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 相加 (取文本长度 (项目数据1.项目文本), 1)))
        赋值 (插入项目2.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVINSERTSTRUCT2 (插入项目2, 插入项目2, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
        赋值 (当前项目, 取数据地址3 (项目数据1.项目文本, 项目数据1.项目文本, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据1.项目文本), 1))
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (当前项目)
    .默认
        赋值 (插入项目.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目.pszText, 项目数据1.项目文本)
        赋值 (插入项目.iImage, 项目数据1.图片索引)
        赋值 (插入项目.iSelectedImage, 项目数据1.选中图片索引)
        赋值 (插入项目.lParam, 项目数据1.项目数值)
        赋值 (插入项目.mask, #TVIF_ALL)
        赋值 (数据地址, 取变量地址_TVINSERTSTRUCT (插入项目, 插入项目, 0))
        返回 (发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址))
    .判断结束
    
.判断 (等于 (是否为空 (项目数据2), 假))
    .如果真 (或者 (是否为空 (是否使用高速插入), 是否使用高速插入))
        发送消息1 (集_树型框句柄, #WM_SETREDRAW, 0, 0)
    .如果真结束
    赋值 (成员数, 取数组成员数 (项目数据2))
    .判断开始 (集_外部控件)
        赋值 (空白数据, 取空白字节集 (260))
        赋值 (插入项目2.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目2.mask, #TVIF_ALL)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 52))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 260))
        赋值 (插入项目2.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVINSERTSTRUCT2 (插入项目2, 插入项目2, 0))
        .判断开始 (等于 (加入方式, 2))
            赋值 (计次, 成员数)
            .判断循环首 (大于 (计次, 0))
                 ' 插入项目.pszText ＝ 项目数据2 [I].项目文本
                赋值 (插入项目2.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目2.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目2.lParam, 项目数据2 [计次], 项目数值)
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
                赋值 (当前项目, 取数据地址3 (项目数据2 [计次], 项目文本, 项目数据2 [计次], 项目文本, 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据2 [计次], 项目文本), 1))
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1)
                赋值 (当前项目, 取数据地址2 (空白数据 [1], 空白数据 [1], 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 260)
                赋值 (计次, 相减 (计次, 1))
            .判断循环尾 ()
        .默认
            .判断循环首 (小于 (计次, 成员数))
                赋值 (计次, 相加 (计次, 1))
                赋值 (插入项目2.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目2.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目2.lParam, 项目数据2 [计次], 项目数值)
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
                赋值 (当前项目, 取数据地址3 (项目数据2 [计次], 项目文本, 项目数据2 [计次], 项目文本, 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据2 [计次], 项目文本), 1))
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1)
                赋值 (当前项目, 取数据地址2 (空白数据 [1], 空白数据 [1], 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 260)
            .判断循环尾 ()
            
        .判断结束
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        
    .默认
        赋值 (插入项目.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目.mask, #TVIF_ALL)
        赋值 (数据地址, 取变量地址_TVINSERTSTRUCT (插入项目, 插入项目, 0))
        .判断开始 (等于 (加入方式, 2))
            赋值 (计次, 成员数)
            .判断循环首 (大于 (计次, 0))
                赋值 (插入项目.pszText, 项目数据2 [计次], 项目文本)
                赋值 (插入项目.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目.lParam, 项目数据2 [计次], 项目数值)
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址)
                赋值 (计次, 相减 (计次, 1))
            .判断循环尾 ()
        .默认
            .判断循环首 (小于 (计次, 成员数))
                赋值 (计次, 相加 (计次, 1))
                赋值 (插入项目.pszText, 项目数据2 [计次], 项目文本)
                赋值 (插入项目.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目.lParam, 项目数据2 [计次], 项目数值)
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址)
            .判断循环尾 ()
        .判断结束
        
        
    .判断结束
    .如果真 (或者 (是否为空 (是否使用高速插入), 是否使用高速插入))
        发送消息1 (集_树型框句柄, #WM_SETREDRAW, 1, 0)
    .如果真结束
    返回 (0)
.默认
    返回 (-1)
.判断结束


.子程序 数据_删除项目, 逻辑型, 公开, 删除树型框中的指定项目。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.如果真结束
返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_DELETEITEM, 0, 集_句柄组 [相加 (项目索引, 1)]), 0))

.子程序 数据_清空, 空白型, 公开, 删除树型框中的所有项目。
发送消息1 (集_树型框句柄, #WM_SETREDRAW, 0, 0)
发送消息1 (集_树型框句柄, #TVM_DELETEITEM, 0, 0)
发送消息1 (集_树型框句柄, #WM_SETREDRAW, 1, 0)


.子程序 数据_取父项目, 整数型, 公开, 返回指定项目的父项目索引。如果该项目为顶层项目，将返回 -1 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 计次1, 整数型, , , 
.局部变量 计次2, 整数型, , , 
.局部变量 父项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (计次2, 取数组成员数 (集_句柄组))
.如果真 (或者 (大于 (相加 (项目索引, 1), 计次2), 小于 (项目索引, 0)))
    返回 (-1)
.如果真结束
赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 集_句柄组 [相加 (项目索引, 1)]))
.判断开始 (等于 (父项目, 0))
    返回 (-1)
.默认
    .判断循环首 (小于 (计次1, 计次2))
        赋值 (计次1, 相加 (计次1, 1))
        .如果真 (等于 (集_句柄组 [计次1], 父项目))
            返回 (相减 (计次1, 1))
        .如果真结束
        
    .判断循环尾 ()
.判断结束
返回 (-1)

.子程序 状态_是否有子项目, 逻辑型, 公开, 如果指定项目存在子项目，返回真，否则返回假。如果本命令返回真，意味着指定项目的下一项即为此项目的第一个子项目。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 成员数, 整数型, , , 
.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_CHILDREN)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.cChildren)
    .默认
        
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_CHILDREN)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.cChildren)
        
    .判断结束
    
.判断结束


.子程序 状态_是否已扩展, 逻辑型, 公开, 如果树型框中的指定项目具有子项目并已扩展显示，返回真，否则返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 成员数, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (成员数, 取数组成员数 (集_句柄组))
.如果真 (或者 (大于或等于 (相加 (项目索引, 1), 成员数), 小于 (项目索引, 0)))
     ' 如果索引超出范围，或索引是最后一个项目
    返回 (假)
.如果真结束
赋值 (成员数, 发送消息1 (集_树型框句柄, #TVM_GETITEMSTATE, 集_句柄组 [相加 (项目索引, 1)], 0))
返回 (等于 (位与 (成员数, #TVIS_EXPANDED), #TVIS_EXPANDED))


.子程序 样式_背景色_置, 空白型, 公开, 
.参数 背景颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETBKCOLOR, 0, 背景颜色)

.子程序 样式_背景色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETBKCOLOR, 0, 0))

.子程序 样式_项目间隔_置, 空白型, 公开, 
.参数 间隔距离, 整数型, 可空, 默认为16

.如果真 (是否为空 (间隔距离))
    赋值 (间隔距离, 16)
.如果真结束
发送消息1 (集_树型框句柄, #TVM_SETITEMHEIGHT, 间隔距离, 0)

.子程序 样式_项目间隔_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETITEMHEIGHT, 0, 0))

.子程序 样式_文本颜色_置, 空白型, 公开, 
.参数 文本颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETTEXTCOLOR, 0, 文本颜色)

.子程序 样式_文本颜色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETTEXTCOLOR, 0, 0))

.子程序 样式_连线颜色_置, 空白型, 公开, 
.参数 连线颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETLINECOLOR, 0, 连线颜色)

.子程序 样式_连线颜色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETLINECOLOR, 0, 0))


.子程序 样式_使用复选框, 空白型, 公开, 
.如果真 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_CHECKBOXES), #TVS_CHECKBOXES))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_CHECKBOXES))
.如果真结束


.子程序 样式_使用热点跟踪, 空白型, 公开, 
.如果真 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_TRACKSELECT), #TVS_TRACKSELECT))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_TRACKSELECT))
.如果真结束



.子程序 样式_禁止滚动条, 逻辑型, 公开, 返回禁止的状态
.参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

.判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL), 或者 (禁止, 是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL))
    返回 (真)
.判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL), 取反 (禁止), 取反 (是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL))
    返回 (假)
.默认
    返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL))
.判断结束



.子程序 样式_禁止水平滚动条, 逻辑型, 公开, 返回禁止的状态
.参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

.判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL), 或者 (禁止, 是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL))
    返回 (真)
.判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL), 取反 (禁止), 取反 (是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL))
    返回 (假)
.默认
    返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL))
.判断结束



.子程序 样式_使用整行选择, 逻辑型, 公开, 要使用本功能，就不能使用显示连线。
.参数 是否使用, 逻辑型, 可空, 真为使用，假为不使用。默认为真。

.判断开始 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_HASLINES), #TVS_HASLINES))
    .判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT), 或者 (是否使用, 是否为空 (是否使用))))
        设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT))
        返回 (真)
    .判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT), 取反 (是否使用), 取反 (是否为空 (是否使用))))
        设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT))
        返回 (假)
    .默认
        返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT))
    .判断结束
    
.默认
    暂停 ()
    返回 (假)
.判断结束


.子程序 状态_是否选中, 逻辑型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (等于 (位与 (集_单一外部项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (等于 (位与 (集_单一项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
    .判断结束
    
.判断结束


.子程序 状态_选中项目, 逻辑型, 公开, 操作成功返回真
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否选中, 逻辑型, 可空, 可以被省略。设置项目的选中状态，默认为真。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, 相加 (#TVIF_STATE, #TVIF_HANDLE))
        .判断开始 (或者 (是否选中, 是否为空 (是否选中)))
            赋值 (集_单一外部项目.state, #TVIS_SELECTEDA)
        .默认
            赋值 (集_单一外部项目.state, #TVIS_NOSELECTEDA)
        .判断结束
        赋值 (集_单一外部项目.stateMask, #TVIS_STATEIMAGEMASK)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (真)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, 相加 (#TVIF_STATE, #TVIF_HANDLE))
        .判断开始 (或者 (是否选中, 是否为空 (是否选中)))
            赋值 (集_单一项目.state, #TVIS_SELECTEDA)
        .默认
            赋值 (集_单一项目.state, #TVIS_NOSELECTEDA)
        .判断结束
        赋值 (集_单一项目.stateMask, #TVIS_STATEIMAGEMASK)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.判断结束


.子程序 状态_加粗, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_单一外部项目.state, #TVIS_BOLD)
        赋值 (集_单一外部项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_单一项目.state, #TVIS_BOLD)
        赋值 (集_单一项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址)
    .判断结束
    
.如果真结束


.子程序 状态_取消加粗, 空白型, 公开, 将指定项目的标题取消加粗显示。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 
.局部变量 当前状态, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_单一外部项目.state, 位取反 (#TVIS_BOLD))
        赋值 (集_单一外部项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_单一项目.state, 位取反 (#TVIS_BOLD))
        赋值 (集_单一项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址)
        
    .判断结束
    
    
    
.如果真结束


.子程序 数据_现行选中项_置, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 ()
.默认
    发送消息1 (集_树型框句柄, #TVM_SELECTITEM, #TVGN_CARET, 集_句柄组 [相加 (项目索引, 1)])
.判断结束


.子程序 数据_取可显示数量, 整数型, 公开, 取当前在树形框的用户区中大约可以显示的项目数量
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

 ' TVM_GETVISIBLECOUNT
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
返回 (发送消息1 (集_树型框句柄, #TVM_GETVISIBLECOUNT, 0, 0))

.子程序 数据_取第一项索引, 整数型, 公开, 取在当前树形框中显示的第一条项目的索引。失败返回-1
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 目标句柄, 空白型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 

 ' TVM_GETVISIBLECOUNT
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (目标句柄, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_FIRSTVISIBLE, 0))
赋值 (成员数, 取数组成员数 (集_句柄组))
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    .如果真 (等于 (目标句柄, 集_句柄组 [计次]))
        返回 (相减 (计次, 1))
    .如果真结束
    
.判断循环尾 ()
返回 (-1)

.子程序 数据_现行选中项_取, 整数型, 公开, 
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前句柄, 整数型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (当前句柄, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_CARET, 0)) ' 先取第一个根
.如果真 (不等于 (当前句柄, 0))
    赋值 (成员数, 取数组成员数 (集_句柄组))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        .如果真 (等于 (集_句柄组 [计次], 当前句柄))
            返回 (相减 (计次, 1))
        .如果真结束
        
    .判断循环尾 ()
.如果真结束
返回 (-1)

.子程序 数据_取全部选中项, 变体型, 公开, 返回选中项索引数组
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 选中项索引, 变体型, , , 
.局部变量 选中项索引A, 整数型, , "0", 
.局部变量 成员数, 整数型, , , 
.局部变量 成员数2, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
选中项索引.置类型 (#变体类型.数值型数组)
赋值 (成员数, 取数组成员数 (集_句柄组))
.判断开始 (集_外部控件)
    赋值 (集_单一外部项目.mask, #TVIF_STATE)
    赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
    赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
    赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [计次])
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        写到内存 (数据, 集_项目地址, 40)
        .如果真 (等于 (位与 (集_单一外部项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
            赋值 (成员数2, 相加 (取数组成员数 (选中项索引A), 1))
            重定义数组 (选中项索引A, 真, 成员数2)
            赋值 (选中项索引A [成员数2], 计次)
             ' 加入成员 (选中项索引A, I)
        .如果真结束
        
    .判断循环尾 ()
    外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
    外部控件操作.结束操作 (集_外部进程句柄)
.默认
    赋值 (集_单一项目.mask, #TVIF_STATE)
    赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        赋值 (集_单一项目.hItem, 集_句柄组 [计次])
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        .如果真 (等于 (位与 (集_单一项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
            赋值 (成员数2, 相加 (取数组成员数 (选中项索引A), 1))
            重定义数组 (选中项索引A, 真, 成员数2)
            赋值 (选中项索引A [成员数2], 计次)
             ' 加入成员 (选中项索引A, I)
        .如果真结束
        
    .判断循环尾 ()
    
.判断结束
选中项索引.赋值 (选中项索引A, )
返回 (选中项索引)

.子程序 遍历句柄, 空白型, , 
.局部变量 父项目, 空白型, , , 
.局部变量 子项目, 整数型, , , 
.局部变量 数值, 整数型, , , 
.局部变量 完成, 逻辑型, , , 
.局部变量 计次, 整数型, , , 

 ' 清除数组 (集_句柄组)
重定义数组 (集_句柄组, 假, 数据_取项目数 ())
赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_ROOT, 0)) ' 先取第一个根
.判断循环首 (不等于 (子项目, 0))
    赋值 (计次, 相加 (计次, 1))
    赋值 (集_句柄组 [计次], 子项目)
    赋值 (数值, 子项目)
    赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_CHILD, 子项目)) ' 取第一个子
    .如果真 (等于 (子项目, 0)) ' 取子取不到，就取兄弟
        赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_NEXT, 数值)) ' 取子的兄弟
         ' 找到了兄弟就直接到循环尾，否则进入下面的循环找父项目
        .判断循环首 (等于 (子项目, 0))
            赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 数值)) ' 退回上一级
            .如果真 (等于 (父项目, 0))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
            赋值 (数值, 父项目)
            赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_NEXT, 父项目)) ' 取父的兄弟
        .判断循环尾 ()
    .如果真结束
    .如果真 (完成)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()

.子程序 _置外部操作, 空白型, , 如果是外部控件，就要用这个方法初始化
赋值 (集_外部控件, 真)

.子程序 _销毁外部操作, 空白型, , 如果不再需要对外部控件进行初始化，可用这个销毁
赋值 (集_外部控件, 假)


.子程序 快速查找, 整数型, , 
.参数 欲查找句柄, 整数型, , 

.局部变量 计次1, 整数型, , , 
.局部变量 计次2, 整数型, , , 

赋值 (计次1, 1)
赋值 (计次2, 取数组成员数 (集_句柄组))
.判断循环首 (小于 (计次1, 计次2)) ' 循环直至左右指针相遇
    .如果真 (等于 (集_句柄组 [计次1], 欲查找句柄))
        返回 (计次1)
    .如果真结束
    .如果真 (等于 (集_句柄组 [计次2], 欲查找句柄))
        返回 (计次2)
    .如果真结束
    .判断开始 (小于 (计次1, 计次2))
        赋值 (计次1, 相加 (计次1, 1))
        赋值 (计次2, 相减 (计次2, 1))
    .默认
        返回 (0)
    .判断结束
    
.判断循环尾 ()
返回 (0)


.子程序 置自动更新状态, 空白型, 公开, 本方法决定了各个其它方法中“是否自动更新数据”参数的默认值。默认状态下，如果不使用本方法进行操作，“是否自动更新数据”参数的默认值将自动设置为真。
.参数 自动更新, 逻辑型, , 

赋值 (集_自动更新, 自动更新)

.子程序 查询自动更新状态, 逻辑型, 公开, 
返回 (集_自动更新)


.窗口程序集 启动窗口程序集, , , 

.程序集变量 集_树型框, 树型框句柄操作类, , , 
.程序集变量 集_树型框结构数据, 树型框结构, , "0", 
.程序集变量 树形列表框句柄, 整数型, , , 
.程序集变量 树形列表框坐标, 坐标_, , , 
.程序集变量 中文名称编辑框句柄, 整数型, , , 
.程序集变量 中文名称编辑框坐标, 坐标_, , , 
.程序集变量 下一步按钮坐标, 坐标_, , , 
.程序集变量 上一步按钮坐标, 坐标_, , , 
.程序集变量 中文详细说明编辑框, 整数型, , , 
.程序集变量 中文详细说明编辑框坐标, 坐标_, , , 
.程序集变量 总英文内容, 文本型, , , 
.程序集变量 翻译内容, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' .如果真 (等于 (集_树型框._初始化类 (取窗口句柄 ()), 假))
     ' 信息框 (“对象不是树型框”, 0, )
.如果真结束

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _按钮_取项目数_被单击, 空白型, , 
信息框 (相加 (“类操作：”, 到文本 (集_树型框.数据_取项目数 ())), 0, )

.子程序 _按钮_取项目文本_被单击, 空白型, , 
.局部变量 总数值, 整数型, , , 
.局部变量 小数值, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时文本, 文本型, , "0", 

赋值 (总英文内容, “”)
赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
超级延时 (30)
.如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
    信息框 (“对象不是树型框”, 0, )
    返回 ()
.如果真结束
赋值 (总数值, 相减 (集_树型框.数据_取项目数 (), 1))
调试输出 (集_树型框.数据_现行选中项_取 ())
调试输出 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))
 ' 本源码来自易语言资源网(www.5A5X.com)

赋值 (总英文内容, 相加 (总英文内容, 集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符))
相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
.计次循环首 (总数值, i)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    超级延时 (30)
    按键消息 (树形列表框句柄, 40, , )
    超级延时 (30)
    赋值 (总英文内容, 相加 (总英文内容, 集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符))
    相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
    鼠标消息 (取坐标句柄 (下一步按钮坐标.X, 下一步按钮坐标.Y), 5, 5, 1, )
    超级延时 (200)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    赋值 (小数值, 集_树型框.数据_取项目数 ())
    .计次循环首 (小数值, i)
        赋值 (总英文内容, 相加 (总英文内容, 集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符))
        相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
        按键消息 (树形列表框句柄, 40, , )
        超级延时 (30)
    .计次循环尾 ()
    
    鼠标消息 (取坐标句柄 (上一步按钮坐标.X, 上一步按钮坐标.Y), 5, 5, 1, )
    
    超级延时 (200)
.计次循环尾 ()
写到文件 (相加 (取运行目录 (), “\要翻译的文本.txt”), 到字节集 (大写加空格 (总英文内容)))
写到文件 (相加 (取运行目录 (), “\已经翻译文本.txt”), {  })
信息框 (相加 (“引文本本已经保存到 ”, 取运行目录 (), “\要翻译的文本.txt”, #换行符, “翻译过的文本请保存到”, 取运行目录 (), “\已经翻译文本.txt”), 0, )
未知支持库函数_6 (“http://translate.google.cn/#”, , , )
信息框 (“如果你翻译保存过后请点确定,我将进行合并”, 0, )
合并翻译文本 ()

.子程序 合并翻译文本, 空白型, , 
.局部变量 英文, 文本型, , "0", 
.局部变量 中文, 文本型, , "0", 
.局部变量 译文, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (英文, 分割文本 (到文本 (读入文件 (相加 (取运行目录 (), “\要翻译的文本.txt”))), #换行符, ))
赋值 (中文, 分割文本 (到文本 (子文本替换 (编码转换_Unicode转Ansi (读入文件 (相加 (取运行目录 (), “\已经翻译文本.txt”))), “ ”, “_”, , , 真)), #换行符, ))
调试输出 (取数组成员数 (英文), 取数组成员数 (中文))

.判断循环首 (不等于 (取数组成员数 (英文), 取数组成员数 (中文)))
    .如果真 (等于 (信息框 (“您的已经翻译文本.txt  和 要翻译的文本.txt 的行数不对应 可能编码不对 重新修改请点是 ”, #是否钮, ), #否钮))
        返回 ()
        跳出循环 ()
    .如果真结束
    赋值 (英文, 分割文本 (到文本 (读入文件 (相加 (取运行目录 (), “\要翻译的文本.txt”))), #换行符, ))
    赋值 (中文, 分割文本 (到文本 (读入文件 (相加 (取运行目录 (), “\已经翻译文本.txt”))), #换行符, ))
    
.判断循环尾 ()
.计次循环首 (取数组成员数 (英文), i)
    赋值 (译文, 相加 (译文, 英文 [i], “/”, 中文 [i], #换行符))
.计次循环尾 ()
写到文件 (相加 (取运行目录 (), “\译文.txt”), 到字节集 (译文))
信息框 (相加 (“已经合并好了 保存到 ”, 取运行目录 (), “\译文.txt”, “请手动修改匹配下 ”), 0, )
未知支持库函数_6 (“http://fy.iciba.com/”, , , )


.子程序 大写加空格, 文本型, , 
.参数 文本, 文本型, , 

赋值 (文本, 子文本替换 (文本, “Q”, “ Q”, , , 真))
赋值 (文本, 子文本替换 (文本, “W”, “ W”, , , 真))
赋值 (文本, 子文本替换 (文本, “E”, “ E”, , , 真))
赋值 (文本, 子文本替换 (文本, “R”, “ R”, , , 真))
赋值 (文本, 子文本替换 (文本, “T”, “ T”, , , 真))
赋值 (文本, 子文本替换 (文本, “Y”, “ Y”, , , 真))
赋值 (文本, 子文本替换 (文本, “U”, “ U”, , , 真))
赋值 (文本, 子文本替换 (文本, “I”, “ I”, , , 真))
赋值 (文本, 子文本替换 (文本, “O”, “ O”, , , 真))
赋值 (文本, 子文本替换 (文本, “P”, “ P”, , , 真))
赋值 (文本, 子文本替换 (文本, “A”, “ A”, , , 真))
赋值 (文本, 子文本替换 (文本, “S”, “ S”, , , 真))
赋值 (文本, 子文本替换 (文本, “D”, “ D”, , , 真))
赋值 (文本, 子文本替换 (文本, “F”, “ F”, , , 真))
赋值 (文本, 子文本替换 (文本, “G”, “ G”, , , 真))
赋值 (文本, 子文本替换 (文本, “H”, “ H”, , , 真))
赋值 (文本, 子文本替换 (文本, “J”, “ J”, , , 真))
赋值 (文本, 子文本替换 (文本, “K”, “ K”, , , 真))
赋值 (文本, 子文本替换 (文本, “L”, “ L”, , , 真))
赋值 (文本, 子文本替换 (文本, “Z”, “ Z”, , , 真))
赋值 (文本, 子文本替换 (文本, “X”, “ X”, , , 真))
赋值 (文本, 子文本替换 (文本, “C”, “ C”, , , 真))
赋值 (文本, 子文本替换 (文本, “V”, “ V”, , , 真))
赋值 (文本, 子文本替换 (文本, “B”, “ B”, , , 真))
赋值 (文本, 子文本替换 (文本, “N”, “ N”, , , 真))
赋值 (文本, 子文本替换 (文本, “M”, “ M”, , , 真))
赋值 (文本, 子文本替换 (文本, “1”, “ 1”, , , 真))
赋值 (文本, 子文本替换 (文本, “2”, “ 2”, , , 真))
赋值 (文本, 子文本替换 (文本, “3”, “ 3”, , , 真))
赋值 (文本, 子文本替换 (文本, “4”, “ 4”, , , 真))
赋值 (文本, 子文本替换 (文本, “5”, “ 5”, , , 真))
赋值 (文本, 子文本替换 (文本, “6”, “ 6”, , , 真))
赋值 (文本, 子文本替换 (文本, “7”, “ 7”, , , 真))
赋值 (文本, 子文本替换 (文本, “8”, “ 8”, , , 真))
赋值 (文本, 子文本替换 (文本, “9”, “ 9”, , , 真))
赋值 (文本, 子文本替换 (文本, “0”, “ 0”, , , 真))
返回 (文本)


.子程序 _按钮1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (树形列表框句柄, 未知支持库函数_78 ())
赋值 (树形列表框坐标.X, 取鼠标水平位置 ())
赋值 (树形列表框坐标.Y, 取鼠标垂直位置 ())
调试输出 (取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y), 树形列表框句柄)
.如果真 (等于 (集_树型框._初始化类 (树形列表框句柄), 假))
    信息框 (“对象不是树型框”, 0, )
    返回 ()
.如果真结束
调试输出 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))


.子程序 _按钮2_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (中文名称编辑框句柄, 未知支持库函数_78 ())
赋值 (中文名称编辑框坐标.X, 取鼠标水平位置 ())
赋值 (中文名称编辑框坐标.Y, 取鼠标垂直位置 ())

.子程序 _按钮5_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (中文详细说明编辑框, 未知支持库函数_78 ())
赋值 (中文详细说明编辑框坐标.X, 取鼠标水平位置 ())
赋值 (中文详细说明编辑框坐标.Y, 取鼠标垂直位置 ())

.子程序 _按钮3_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (下一步按钮坐标.X, 取鼠标水平位置 ())
赋值 (下一步按钮坐标.Y, 取鼠标垂直位置 ())

.子程序 _按钮4_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (上一步按钮坐标.X, 取鼠标水平位置 ())
赋值 (上一步按钮坐标.Y, 取鼠标垂直位置 ())


.子程序 鼠标移动, 空白型, 公开, 模拟鼠标移动(无返回值)
.参数 窗口句柄, 整数型, 可空, 可空:相对桌面移动鼠标  句柄有效则相对窗口中坐标移动
.参数 水平坐标, 整数型, , 水平坐标
.参数 垂直坐标, 整数型, , 垂直坐标

.局部变量 临时坐标, 坐标_, , , 

.如果真 (不等于 (窗口句柄, 0))
    _取窗口区域位置 (窗口句柄, 临时坐标)
.如果真结束
_移动鼠标 (水平坐标, 垂直坐标)

.子程序 取坐标句柄, 整数型, 公开, 取指定坐标位置所在窗口组件的句柄(返回句柄)
.参数 水平位置, 整数型, , 句柄组件的x坐标“X轴光标”
.参数 垂直位置, 整数型, , 句柄组件的y坐标“Y轴光标”

返回 (_取坐标句柄 (水平位置, 垂直位置))

.子程序 按键消息, 空白型, 公开, 向指定窗口句柄的窗口中发送按键消息(无返回值)
.参数 窗口句柄, 整数型, , 接收消息的窗口句柄
.参数 键代码, 整数型, , 按键的键代码
.参数 状态, 整数型, 可空, 可空:按键(按下+放开) 1 输入字符  3 #按下   4 #放开
.参数 是否功能键, 逻辑型, 可空, 可空为假:普通键   真:功能键 (为功能键可用于热键技能不输入字符)

.局部变量 按下, 整数型, , , 
.局部变量 放开, 整数型, , , 

.如果 (是否功能键)
    赋值 (按下, 260)
    赋值 (放开, 261)
.否则
    赋值 (按下, 256)
    赋值 (放开, 257)
.如果结束
.如果真 (等于 (状态, 1))
    _投递消息 (窗口句柄, 258, 键代码, 0)
    返回 ()
.如果真结束
.如果真 (不等于 (状态, 4))
    _投递消息 (窗口句柄, 按下, 键代码, 0)
.如果真结束
.如果真 (不等于 (状态, 3))
    _投递消息 (窗口句柄, 放开, 键代码, 0)
.如果真结束
返回 ()


.子程序 _按钮6_被单击, 空白型, , 
合并翻译文本 ()

.子程序 _按钮7_被单击, 空白型, , 
.局部变量 总数值, 整数型, , , 
.局部变量 小数值, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 取出文本, 文本型, , , 

信息框 (“请吧OCX树形框光标移动到第一项”, 0, )

赋值 (翻译内容, 子文本替换 (到文本 (读入文件 (相加 (取运行目录 (), “\译文.txt”))), “_”, “”, , , 真))
赋值 (翻译内容, 子文本替换 (翻译内容, “ ”, “”, , , 真))
赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
超级延时 (30)
.如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
    信息框 (“对象不是树型框”, 0, )
    返回 ()
.如果真结束
赋值 (总数值, 相减 (集_树型框.数据_取项目数 (), 1))
调试输出 (集_树型框.数据_现行选中项_取 ())
调试输出 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))

翻译内容 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))


.计次循环首 (总数值, i)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    超级延时 (30)
    按键消息 (树形列表框句柄, 40, , )
    超级延时 (30)
    翻译内容 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))
    
    相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
    鼠标消息 (取坐标句柄 (下一步按钮坐标.X, 下一步按钮坐标.Y), 5, 5, 1, )
    超级延时 (200)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    赋值 (小数值, 集_树型框.数据_取项目数 ())
    .计次循环首 (小数值, i)
        翻译内容 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))
        相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
        按键消息 (树形列表框句柄, 40, , )
        超级延时 (30)
    .计次循环尾 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
    
    鼠标消息 (取坐标句柄 (上一步按钮坐标.X, 上一步按钮坐标.Y), 5, 5, 1, )
    
    超级延时 (200)
.计次循环尾 ()


.子程序 置文本, 空白型, , 设置编辑框文本
.参数 句柄, 整数型, , 编辑框句柄
.参数 文本, 文本型, , 要发送的文本

发送消息2 (句柄, 12, 0, 文本)

.子程序 翻译内容, 整数型, , 
.参数 内容, 文本型, 可空, 
.参数 注释, 文本型, 可空, 
.参数 是否清理, 逻辑型, 可空, 

.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 
.局部变量 附加1, 文本型, , , 

赋值 (内容, 子文本替换 (内容, “_”, “”, , , 真))
.如果真 (等于 (是否清理, 真))
    置文本 (取坐标句柄 (中文名称编辑框坐标.X, 中文名称编辑框坐标.Y), “”) ' 这段代码清空的
    返回 (1)
.如果真结束
.如果真 (不等于 (寻找文本 (内容, “/”, , 真), -1))
    赋值 (内容, 取文本左边 (内容, 相减 (寻找文本 (内容, “/”, , 真), 1)))
.如果真结束
赋值 (位置1, 寻找文本 (翻译内容, 相加 (内容, “/”), , 真))
调试输出 (内容)

.如果真 (不等于 (位置1, -1))
    赋值 (位置2, 寻找文本 (翻译内容, #换行符, 位置1, 真))
    赋值 (附加1, 取文本中间 (翻译内容, 相加 (位置1, 取文本长度 (相加 (内容, “/”))), 相减 (位置2, 位置1, 取文本长度 (相加 (内容, “/”)))))
    置文本 (取坐标句柄 (中文名称编辑框坐标.X, 中文名称编辑框坐标.Y), 附加1)
    .如果真 (不等于 (注释, “”))
        置文本 (取坐标句柄 (中文详细说明编辑框坐标.X, 中文详细说明编辑框坐标.X), 注释)
    .如果真结束
    
.如果真结束

超级延时 (1)
返回 (1)


.子程序 _按钮8_被单击, 空白型, , 
.局部变量 总数值, 整数型, , , 
.局部变量 小数值, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 取出文本, 文本型, , , 

信息框 (“请吧OCX树形框光标移动到第一项”, 0, )
赋值 (翻译内容, 子文本替换 (到文本 (读入文件 (相加 (取运行目录 (), “\译文.txt”))), “_”, “”, , , 真))
赋值 (翻译内容, 子文本替换 (翻译内容, “ ”, “”, , , 真))
赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
超级延时 (30)
.如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
    信息框 (“对象不是树型框”, 0, )
    返回 ()
.如果真结束
赋值 (总数值, 相减 (集_树型框.数据_取项目数 (), 1))
调试输出 (集_树型框.数据_现行选中项_取 ())
调试输出 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ))

翻译内容 (真)


.计次循环首 (总数值, i)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    超级延时 (30)
    按键消息 (树形列表框句柄, 40, , )
    超级延时 (30)
    翻译内容 (真)
    
    相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
    鼠标消息 (取坐标句柄 (下一步按钮坐标.X, 下一步按钮坐标.Y), 5, 5, 1, )
    超级延时 (200)
    赋值 (树形列表框句柄, 取坐标句柄 (树形列表框坐标.X, 树形列表框坐标.Y))
    .如果真 (等于 (集_树型框._初始化类 (树形列表框句柄, 真), 假))
        信息框 (“对象不是树型框”, 0, )
        返回 ()
    .如果真结束
    赋值 (小数值, 集_树型框.数据_取项目数 ())
    .计次循环首 (小数值, i)
        翻译内容 (真)
        相加 (集_树型框.数据_取项目文本 (集_树型框.数据_现行选中项_取 (), ), #换行符).加入文本 ()
        按键消息 (树形列表框句柄, 40, , )
        超级延时 (30)
    .计次循环尾 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
    
    鼠标消息 (取坐标句柄 (上一步按钮坐标.X, 上一步按钮坐标.Y), 5, 5, 1, )
    
    超级延时 (200)
.计次循环尾 ()


.类模块 树型框操作类, 树型框操作基类, , 

.程序集变量 类_树型框1, 树型框, , , 
.程序集变量 类_树型框的数据, 树型框结构, , "0", 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除数组 (类_树型框的数据)


.子程序 _初始化类, 空白型, 公开, 
.参数 树型框, 树型框, , 

赋值 (类_树型框1, 树型框)
数据_读树形框 (树型框.图标, 类_树型框的数据)
_初始化类A (树型框.取窗口句柄 ())


.子程序 _更新数据, 空白型, 公开, 当某些操作没有使用自动更新时，可在这里以手动方式进行数据更新
数据_读树形框 (类_树型框1.图标, 类_树型框的数据)

.子程序 数据_加入项目_字节集方式加入, 整数型, 公开, 将单个或一批项目加入到树型框中，如果仅加入一个项目，成功返回加入后该项目所处的位置，失败返回 -1 。如果成批加入项目，成功返回 0 ，失败返回 -1 。成批加入项目可以用作一次性快速加入大量项目到树型框中。注意，加入数据后，树形框的句柄将会改变。
.参数 父项目索引, 整数型, 可空, 可以被省略。指定欲加入项目所处的父项目，0 为项目一，1 为项目二，如此类推。如果没有父项目（即欲加入项目为顶层项目），请提供值 -1 。如果本参数被省略，默认值为 -1 。
.参数 项目文本, 文本型, 数组, 如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 图片索引, 整数型, 可空 数组, 可以被省略。图片索引用于指定图片组属性中的某张图片，从 0 开始。如果本参数被省略，所有被加入项目的图片索引都默认为 0 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 选中图片索引, 整数型, 可空 数组, 可以被省略。选中图片索引用于指定项目被选中后所显示的图片，-1 表示与图片索引一致。如果本参数被省略，所有被加入项目的选中图片索引都默认为 -1 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 项目数值, 整数型, 可空 数组, 可以被省略。指定与本项目相关联的数值。如果本参数被省略，所有被加入项目的项目数值都默认为 0 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为真。

.局部变量 当前项目, 整数型, , , 
.局部变量 结构, 树型框结构, , "0", 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 缩进层次, 整数型, , , 

.如果真 (或者 (是否为空 (是否自动更新数据), 等于 (是否自动更新数据, 真)))
    数据_读树形框 (类_树型框1.图标, 类_树型框的数据)
.如果真结束
.判断开始 (或者 (是否为空 (父项目索引), 等于 (父项目索引, -1)))
    赋值 (缩进层次, 1)
.判断 (等于 (取数组成员数 (类_树型框的数据), 0))
    赋值 (父项目索引, -1)
    赋值 (缩进层次, 1)
.判断 (大于 (父项目索引, 取数组成员数 (类_树型框的数据)))
    赋值 (父项目索引, 相减 (取数组成员数 (类_树型框的数据), 1))
    赋值 (缩进层次, 相加 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 1))
.默认
    赋值 (缩进层次, 相加 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 1))
.判断结束
赋值 (成员数, 取数组成员数 (项目文本))
重定义数组 (结构, 假, 成员数)
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    赋值 (结构 [计次], 项目文本, 项目文本 [计次])
    赋值 (结构 [计次], 缩进层次, 缩进层次)
    .如果真 (小于或等于 (计次, 取数组成员数 (图片索引)))
        赋值 (结构 [计次], 图片索引, 图片索引 [计次])
    .如果真结束
    .判断开始 (小于或等于 (计次, 取数组成员数 (选中图片索引)))
        赋值 (结构 [计次], 选中图片索引, 选择 (等于 (选中图片索引 [计次], -1), 结构 [计次], 图片索引, 选中图片索引 [计次]))
    .默认
        赋值 (结构 [计次], 选中图片索引, 结构 [计次], 图片索引)
    .判断结束
    .如果真 (小于或等于 (计次, 取数组成员数 (项目数值)))
        赋值 (结构 [计次], 项目数值, 项目数值 [计次])
    .如果真结束
    
.判断循环尾 ()
.判断开始 (或者 (是否为空 (父项目索引), 等于 (父项目索引, -1)))
    赋值 (成员数, 相减 (取数组成员数 (类_树型框的数据), 1))
    加入成员 (类_树型框的数据, 结构)
.默认
    赋值 (成员数, 取数组成员数 (类_树型框的数据))
    赋值 (计次, 相加 (父项目索引, 2))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        .如果真 (大于或等于 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 类_树型框的数据 [计次], 缩进层次))
             ' 父项目的下一项目与父项目同级，或下一项目是父项目的上一层
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    插入成员 (类_树型框的数据, 计次, 结构)
    赋值 (成员数, 相减 (计次, 1))
.判断结束
赋值 (类_树型框1.图标, 生成数据 ())
赋值 (类_树型框1.最大化按钮, 当前项目)
类_树型框1.保证显示 (类_树型框1.最大化按钮)
_初始化类A (类_树型框1.取窗口句柄 ())
返回 (成员数)


.子程序 数据_清空, 空白型, 公开, 删除树型框中的所有项目。
数据_清空 ()

.子程序 生成数据, 字节集, , 
.局部变量 数据, 字节集, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 数据地址, 整数型, , , 
.局部变量 文件号, 整数型, , , 

赋值 (文件号, 打开内存文件 ())
赋值 (成员数, 取数组成员数 (类_树型框的数据))
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    赋值 (数据地址, 取数据地址 (类_树型框的数据 [计次], 类_树型框的数据 [计次], 0))
    写出文本 (文件号, 类_树型框的数据 [计次], 项目文本)
     ' 写出字节集 (文件号, )
    写出字节集 (文件号, 相加 ({ 0 }, 指针到字节集 (相加 (数据地址, 4), 20)))
.判断循环尾 ()
移到文件首 (文件号)
赋值 (数据, 读入字节集 (文件号, 取文件长度 (文件号)))
关闭文件 (文件号)
返回 (数据)

.子程序 数据_读树形框, 空白型, 公开, 
.参数 项目数据, 字节集, , 
.参数 树型框结构数据, 树型框结构, 参考 数组, 

.局部变量 文件号, 整数型, , , 
.局部变量 结构, 树型框结构, , , 
.局部变量 数据首地址, 整数型, , , 

清除数组 (树型框结构数据)
赋值 (文件号, 打开内存文件 ())
写出字节集 (文件号, 项目数据)
移到文件首 (文件号)
.判断循环首 (等于 (是否在文件尾 (文件号, ), 假))
    赋值 (结构.项目文本, 读入文本 (文件号, ))
    移动读写位置 (文件号, #现行位置, 1)
    赋值 (数据首地址, 取数值变量地址 (结构.图片索引))
    写到内存 (读入字节集 (文件号, 20), 数据首地址, 20)
    加入成员 (树型框结构数据, 结构)
.判断循环尾 ()
关闭文件 (文件号)

.类模块 树型框句柄操作类, 树型框操作基类, , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 _初始化类, 逻辑型, 公开, 成功返回真
.参数 树型框句柄, 整数型, , 
.参数 是否为外部进程的树形框, 逻辑型, 可空, 可以被省略。当为真时，可对这个外部进程一树形框进行操作。默认为假。

.如果真 (是否为外部进程的树形框)
    _置外部操作 ()
.如果真结束
返回 (_初始化类A (树型框句柄))


.子程序 _更新数据, 空白型, 公开, 当某些操作没有使用自动更新时，可在这里以手动方式进行数据更新
更新数据1 ()

.子程序 _取消外部操作, 空白型, 公开, 当要取消对外部树形框的操作，而转向使用内部树形框时，可使用此方法。
_销毁外部操作 ()

.子程序 _使用外部操作, 空白型, 公开, 当要取消对内部树形框的操作，而转向使用外部树形框时，可使用此方法。
_置外部操作 ()


.类模块 外部控件操作类, , , 

.子程序 打开进程, 整数型, , 成功就返回进程句柄
.参数 对象句柄, 整数型, , 



.子程序 写进程内存, 逻辑型, , 
.参数 进程句柄, 整数型, , 
.参数 数据指针, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 



.子程序 结束操作, 空白型, , 
.参数 进程句柄, 整数型, , 



.子程序 读外部指针数据, 字节集, , 
.参数 进程句柄, 整数型, , 
.参数 外部程序指针, 整数型, , 
.参数 读取数据大小, 整数型, , 



.子程序 分配外部指针, 整数型, , 
.参数 进程句柄, 整数型, , 
.参数 数据长度, 整数型, , 分配的数据长度



.子程序 销毁外部指针, 空白型, , 
.参数 进程句柄, 整数型, , 
.参数 外部指针, 整数型, , 



.类模块 APIHOOK类, , , 

.子程序 InstallApiHook, 逻辑型, , 
.参数 lpLibFileName, 文本型, , 
.参数 lpProcName, 文本型, , 
.参数 lpfn, 整数型, , 



.子程序 BeginHook, 空白型, , 


.子程序 StopHook, 空白型, , 


.子程序 UninstallApiHook, 空白型, , 


.子程序 GetApiHookInfo, 文本型, , 斩月


.类模块 数据库类, , , 

.子程序 连接ACCESS, 逻辑型, , 
.参数 私_数据库文件, 文本型, , 要连接的MDB数据库文件



.子程序 Execute, 对象, , 
.参数 CommandText, 文本型, , 
.参数 RecordsAffected, 变体型, 参考 可空, 类型为“变体型”，需要提供变量以取回方法所返回的数据
.参数 Options, 整数型, 可空, 参数默认值为“-1”



.子程序 查询, 逻辑型, , 
.参数 SQL, 文本型, , 



.子程序 移动, 空白型, , Move
.参数 NumRecords, 整数型, , 



.子程序 移动到上一条, 空白型, , MovePrevious


.子程序 移动到下一条, 空白型, , MoveNext


.子程序 移动到首记录, 空白型, , MoveFirst


.子程序 移动到尾记录, 空白型, , MoveLast


.子程序 更新, 空白型, , UpDate


.子程序 关闭, 空白型, , 关闭查询时打开的表


.子程序 GetRows, 变体型, , 
.参数 Rows, 整数型, 可空, 
.参数 Start, 整数型, 可空, 
.参数 Fields, 整数型, 可空, 



.子程序 断开, 空白型, , 断开数据库连接


.子程序 添加, 空白型, , 


.子程序 尾记录后, 逻辑型, , 


.子程序 取记录数, 整数型, , 


.子程序 读文本, 文本型, , 
.参数 字段名, 文本型, , 



.子程序 读整数, 整数型, , 
.参数 字段名, 文本型, , 



.子程序 读小数, 双精度小数型, , 
.参数 字段名, 文本型, , 



.子程序 读逻辑值, 逻辑型, , 
.参数 字段名, 文本型, , 



.子程序 读日期时间, 日期时间型, , 
.参数 字段名, 文本型, , 



.子程序 读字节集, 字节集, , 
.参数 字段名, 文本型, , 



.子程序 读变体型, 变体型, , 
.参数 字段名, 文本型, , 



.子程序 写文本, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入文本, 文本型, , 



.子程序 写整数, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入值, 整数型, , 



.子程序 写小数, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入值, 双精度小数型, , 



.子程序 写日期时间, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入值, 日期时间型, , 



.子程序 写字节集, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入值, 字节集, , 



.子程序 写变体型, 空白型, , 
.参数 字段名, 文本型, , 
.参数 写入值, 变体型, , 



.子程序 取最后错误, 文本型, , 


.类模块 组合类, , , 

.子程序 按列置组合结果, 文本型, , 返回储存结果的文本文件，每注一行。^e^易宝宝^e^
.参数 备选号码表, 文本型, , 包含间隔符号的文本字符串
.参数 间隔符号, 文本型, 可空, 默认为“,”
.参数 选出个数, 整数型, , 要选出的号码个数
.参数 进度显示器, 画板, 可空, 为空时不显示进度



.子程序 按行置组合结果, 文本型, , 返回储存结果的文本文件，每注一行。^e^易宝宝^e^
.参数 备选号码表, 文本型, , 包含间隔符号的文本字符串
.参数 间隔符号, 文本型, 可空, 默认为“,”
.参数 选出个数, 整数型, , 要选出的号码个数
.参数 进度显示器, 画板, 可空, 为空时不显示进度



.子程序 取组合数量, 整数型, , 返回能够形成的组合的数量。^e^易宝宝^e^
.参数 M, 整数型, , 30选7时，M＝30
.参数 N, 整数型, , 30选7时，N＝7



.类模块 文件操作类, , , 

.子程序 取尺寸, 文本型, , 可以取大于2G文件尺寸(返回文件大小K)
.参数 文件名, 文本型, , 欲取尺寸的文件名称



.子程序 文件打开, 整数型, , 打开一个文件(成功返回文件号,失败返回0)
.参数 文件名称, 文本型, , 欲打开的文件名称
.参数 方式, 整数型, 可空, 可空:默认为读写 详情同系统核心支持库"打开文件"



.子程序 文件关闭, 空白型, , 关闭文件号(无返回值)
.参数 文件号, 整数型, , 欲关闭的文件号



.子程序 文件移动, 整数型, , 
.参数 FromFile, 文本型, , 被移动文件名
.参数 ToFile, 文本型, , 移动到文件名



.子程序 文件复制, 整数型, , 
.参数 FromFile, 文本型, , 被复制文件名
.参数 ToFile, 文本型, , 复制到文件名



.子程序 文件删除, 整数型, , 
.参数 FromFile, 文本型, , 欲删除的文件名



.子程序 文件改名, 整数型, , 
.参数 FromFile, 文本型, , 文件名或目录名
.参数 ToFile, 文本型, , 新文件名或目录名



.子程序 取文本中间内容, 文本型, , 
.参数 需取文本, 文本型, , 
.参数 左边内容, 文本型, , 
.参数 右边内容, 文本型, , 
.参数 成功与否, 逻辑型, 参考 可空, 



.类模块 MD5演示类, , , 

.子程序 MD5演示函数_MD5加密, 文本型, , 不可逆的加密算法(返回加密后的密文)
.参数 字节集, 字节集, , 欲进行MD5加密处理的字节集



.子程序 MD5演示函数_取高16位, 整数型, , 
.参数 参数, 整数型, , 



.子程序 MD5演示函数_取低16位, 整数型, , 
.参数 参数, 整数型, , 



.子程序 MD5演示函数_正整数加法, 整数型, , 
.参数 参数X, 整数型, , 
.参数 参数Y, 整数型, , 



.子程序 MD5演示函数_循环左移, 整数型, , 
.参数 欲移位数, 整数型, , 
.参数 位数, 整数型, , 



.子程序 MD5演示函数_取输出文本, 文本型, , 
.参数 数值, 整数型, , 



.子程序 MD5演示函数_取十六进制文本, 文本型, , 这个取十六进制文本没有去0
.参数 数值, 整数型, , 只能是255以内的数



.子程序 MD5演示函数_F, 整数型, , 
.参数 参数X, 整数型, , 
.参数 参数Y, 整数型, , 
.参数 参数Z, 整数型, , 



.子程序 MD5演示函数_G, 整数型, , 
.参数 参数X, 整数型, , 
.参数 参数Y, 整数型, , 
.参数 参数Z, 整数型, , 



.子程序 MD5演示函数_H, 整数型, , 
.参数 参数X, 整数型, , 
.参数 参数Y, 整数型, , 
.参数 参数Z, 整数型, , 



.子程序 MD5演示函数_I, 整数型, , 
.参数 参数X, 整数型, , 
.参数 参数Y, 整数型, , 
.参数 参数Z, 整数型, , 



.子程序 MD5演示函数_FF, 空白型, , 
.参数 参数A, 整数型, 参考, 
.参数 参数B, 整数型, , 
.参数 参数C, 整数型, , 
.参数 参数D, 整数型, , 
.参数 信息, 整数型, , 
.参数 移位数, 整数型, , 
.参数 轮参数, 整数型, , 



.子程序 MD5演示函数_GG, 空白型, , 
.参数 参数A, 整数型, 参考, 
.参数 参数B, 整数型, , 
.参数 参数C, 整数型, , 
.参数 参数D, 整数型, , 
.参数 信息, 整数型, , 
.参数 移位数, 整数型, , 
.参数 轮参数, 整数型, , 



.子程序 MD5演示函数_HH, 空白型, , 
.参数 参数A, 整数型, 参考, 
.参数 参数B, 整数型, , 
.参数 参数C, 整数型, , 
.参数 参数D, 整数型, , 
.参数 信息, 整数型, , 
.参数 移位数, 整数型, , 
.参数 轮参数, 整数型, , 



.子程序 MD5演示函数_II, 空白型, , 
.参数 参数A, 整数型, 参考, 
.参数 参数B, 整数型, , 
.参数 参数C, 整数型, , 
.参数 参数D, 整数型, , 
.参数 信息, 整数型, , 
.参数 移位数, 整数型, , 
.参数 轮参数, 整数型, , 



.子程序 MD5演示函数_轮函数, 空白型, , 
.参数 参数A, 整数型, 参考, 
.参数 参数B, 整数型, 参考, 
.参数 参数C, 整数型, 参考, 
.参数 参数D, 整数型, 参考, 
.参数 信息, 整数型, 数组, 



.类模块 内存共享类, , , 作者: 路过已错过

.子程序 内存创建, 整数型, , 创建指定大小的内存空间,返回内存地址
.参数 大小, 整数型, , 指定大小



.子程序 内存写入, 整数型, , 返回内存地址
.参数 地址, 整数型, 可空, 指定写入地址,如果为空将自动创建
.参数 数据, 字节集, 参考, 欲写入的字节集数据



.子程序 内存读取, 字节集, , 读取地址数据！！注意，也可以调用核心库方法 指针到字节集(地址,内存共享.取内存长度(地址)) 来同样取得数据
.参数 地址, 整数型, , 由内存映射返回的地址
.参数 读取位置, 整数型, 可空, 从1开始到结束,如果留空则从首地址开始,超出作用范围将指定0
.参数 长度, 整数型, 可空, 若读取位置+长度超过总数据长度,将自动指定0



.子程序 内存释放, 逻辑型, , 释放内存
.参数 地址, 整数型, , 由内存映射返回的地址



.子程序 内存取长度, 整数型, , 取指定内存地址的长度
.参数 地址, 整数型, , 内存地址



.子程序 内存自动释放, 空白型, , 在类销毁时是否将自动释放所有已申请的内存地址
.参数 是否自动释放, 逻辑型, , 



.子程序 内存全部释放, 空白型, , 忽略自动释放属性,直接释放所有地址


.类模块 表达式运算类, , , 

.子程序 表达式运算, 文本型, , 对混合表达式进行运算 支持运算符号 +-\%*/() 支持负数小数(返回运算结果,计算错误返回空文本)
.参数 表达式, 文本型, , 欲计算的表达式. 对错误的表达式会自动报错!
.参数 信息框提示标题, 文本型, 可空, 可空:仅输出调试文本报错!  建意编译时设置标题:信息框提示错误原因!



.子程序 表达式是否合法, 逻辑型, , 
.参数 表达式, 文本型, , 



.子程序 计算表达式处理, 文本型, , 
.参数 表达式, 文本型, , 



.子程序 计算单表达式, 文本型, , 计算一个单运算符的表达式
.参数 表达式, 文本型, , 单运算表达式
.参数 符号位置, 整数型, , 



.子程序 取单表达式, 文本型, , 
.参数 文本, 文本型, , 
.参数 优先级, 整数型, 可空, 1 乘除 2 整除取余 3 加减
.参数 符号位置, 整数型, 参考, 取出来的单表达式符号的位置



.子程序 是否有符号, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 符号, 文本型, , 参考的符号组合



.子程序 合并符号, 文本型, , 合并表达式中的+-连续的符号
.参数 表达式, 文本型, , 



.子程序 取文本内段, 文本型, , 
.参数 文本, 文本型, , 欲取文本段的文本
.参数 左文本, 文本型, , 左特征文本
.参数 右文本, 文本型, , 右特征文本



.子程序 取文本外段, 文本型, , 这里没有用上
.参数 文本, 文本型, , 欲取文本段的文本
.参数 左文本, 文本型, , 左特征文本
.参数 右文本, 文本型, , 右特征文本



.类模块 HTTP类, , , 

.子程序 读网页, 文本型, , 读取网页源码(返回文本内容)
.参数 完整网址, 文本型, , 欲访问的网络地址



.子程序 访问网络, 字节集, , 可读取指定网络文件内容(返回读取的字节集内容) "写到文件"可查看其网页内容或得到网络文件
.参数 完整网址, 文本型, , 欲访问的网络地址
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用



.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 



.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 



.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 



.子程序 设COOKIE, 逻辑型, , 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空清除所有
.参数 COOKIE内容, 文本型, 可空, 为空清除
.参数 有效期, 日期时间型, 可空, 为空不保存



.子程序 取COOKIE, 文本型, , 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空返回全部COOKIE



.子程序 清除COOKIE, 逻辑型, , 
.参数 域名, 文本型, , 



.子程序 取网页链接, 整数型, , 取网页中所有链接.(成功返回链接数,失败返回-1)
.参数 网址, 文本型, , 欲下载的网页的地址,必须为完整的页面网址
.参数 返回链接, 文本型, 参考 数组, 取出来的网页中的所有链接(图片链接,FLASH链接,网页链接等)



.类模块 路径文件名操作, , , 

.子程序 取长路径名, 文本型, , GetLongPathNameA获取指定文件长路径名 返回文件路径长度
.参数 短路径文本, 文本型, , lpszShortPath



.子程序 删除路径引号, 文本型, , PathUnquoteSpacesA 的作用是删除路径文本首部尾部的半角  如果有一个不存在将不执行删除，无返回值。比如："c:\abc  " 返回：c:\abc  
.参数 路径文本, 文本型, , lpsz



.子程序 取短路径名, 文本型, , GetShortPathNameA 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度 比如 C:\Documents and Settings\Administrator\桌面\  返回的是 C:\DOCUME~1\ADMINI~1\桌面\
.参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定



.子程序 取路径文件名删除后缀, 文本型, , PathFindFileNameA 返回取得的文件名  比如 c:\1.txt  返回的是 1
.参数 路径文本, 文本型, , pszPath



.子程序 取根路径后文本, 文本型, ,  PathFindNextComponentA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
.参数 路径文本, 文本型, , pszPath



.子程序 删除路径根目录, 文本型, ,  PathSkipRootA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
.参数 路径文本, 文本型, , pszPath



.子程序 文件名删除后缀, 文本型, , 返回文本 比如:文件名为1.txt 返回的文本为1
.参数 文件名, 文本型, , 



.子程序 取路径文件名, 文本型, , PathFindFileNameA 返回取得的文件名  比如 c:\1.txt  返回的是 1.txt
.参数 路径文本, 文本型, , pszPath



.子程序 删除路径文件名, 文本型, , PathRemoveFileSpecA   返回转换的文本  如："c:\windows\boot.ini"返回"c:\windows"
.参数 路径文本, 文本型, , pszPath



.子程序 更改文件名的扩展名, 文本型, , PathRenameExtensionA  返回转换的文本
.参数 文件名, 文本型, , pszPath  第一个参数，提供全路径文件名变量。  比如:c:\windows\system32\user32.txt
.参数 扩展名, 文本型, , pszExt  ' 第二个参数，提供更改后的扩展名。比如: .dll



.子程序 取文件扩展名, 文本型, , 返回扩展名 比如: .exe
.参数 文件路径, 文本型, , 



.子程序 删除扩展名, 文本型, , 比如: C:\Documents and Settings\Administrator\桌面\1.exe  返回C:\Documents and Settings\Administrator\桌面\1
.参数 文件路径, 文本型, ,  得到的文本保存在变量中



.类模块 文本字符串操作, , , 

.子程序 去空格二进制文本, 文本型, , 返回 去除所有空格的文本
.参数 二进制文本, 文本型, , 



.子程序 去空格文本, 文本型, , 返回 去除所有空格的文本
.参数 二进制文本, 文本型, , 



.子程序 去消换行符, 文本型, , 返回 返回 去除换行符文本
.参数 文本, 文本型, , 



.子程序 读入文本API, 文本型, , ReadFileEx
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字



.子程序 Delete, 文本型, , Delete 删除字符串. //Delete(s,2,1)
.参数 欲取其部分的文本, 文本型, , 
.参数 起始删除出位置, 整数型, 可空, 默认为1 1为首位置，2为第2个位置，如此类推
.参数 欲删除字符的数目, 整数型, 可空, 默认为1



.子程序 lstrlen, 整数型, , 返回文本长度
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据。



.子程序 lstrcpy, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 lstrcat, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 删除字符串, 文本型, , Delete 删除字符串. //Delete(s,2,1)
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, 可空, 默认为1 1为首位置，2为第2个位置，如此类推
.参数 欲取出字符的数目, 整数型, 可空, 默认为1



.子程序 附加文本串, 文本型, , StrNCatA  
.参数 文本, 文本型, , psz1
.参数 附加文本, 文本型, , psz2



.子程序 加入文本, 文本型, , StrNCatA  
.参数 文本, 文本型, , psz1
.参数 附加文本, 文本型, , psz2



.子程序 寻找文本串, 整数型, , StrCSpnA
.参数 被寻找文本, 文本型, , lpStr
.参数 欲寻找文本, 文本型, , lpSet



.子程序 寻找文本串I, 整数型, , StrCSpnIA
.参数 被寻找文本, 文本型, , lpStr
.参数 欲寻找文本, 文本型, , lpSet



.子程序 到大写Dll, 文本型, , CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , str



.子程序 到小写DLL, 文本型, , CharLowerA 将文本中的大写英文字母变换为小写，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , str



.子程序 文本到字节数组, 文本型, , 
.参数 文本, 文本型, , 



.子程序 替换首尾文本, 文本型, , StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234 返回234
.参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
.参数 替换首尾文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234



.子程序 删首尾空DLL, 文本型, , 返回一个文本，其中包含被删除了首部及尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 



.子程序 文本连接, 文本型, , StrCatBuffA
.参数 文本1, 文本型, , 
.参数 文本2, 文本型, , 



.子程序 取空格前文本, 文本型, , PathRemoveArgsA 比如:1111 66666666  返回1111
.参数 文本, 文本型, , 



.子程序 删文本首尾空, 文本型, , PathRemoveBlanksA 比如:" 123456 "  返回"123456"
.参数 文本, 文本型, , 



.子程序 取文本内容长度, 整数型, , 返回文本长度
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据。



.子程序 复制字符串, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 文本复制, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 复制指定长度文本, 文本型, , lstrcpyn
.参数 文本, 文本型, , 
.参数 要复制的长度, 整数型, , 



.子程序 比较文本长度, 整数型, , lstrcmpi 第二个参数比第一个参数长，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数长，返回值为1
.参数 待比较文本一, 文本型, , lpString1
.参数 待比较文本二, 文本型, , lpString2



.子程序 lstrcmp, 整数型, , lstrcmp 第二个参数比第一个参数小，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数大，返回值为1
.参数 待比较文本一, 文本型, , lpString1
.参数 待比较文本二, 文本型, , lpString2



.类模块 文件目录操作, , , 

.子程序 取执行文件名DLL, 文本型, , 于易语言自带的命令基本相同


.子程序 取执行文件路径DLL, 文本型, , 返回所在路径的文本 比如:C:\Documents and Settings\Administrator\桌面\例子.exe


.子程序 文件是否存在属性法, 逻辑型, , 成功返回真 失败返回假
.参数 文件名, 文本型, , 



.子程序 删除目录DLL, 逻辑型, , 成功返回真 失败返回假  在调用这个函数前，目录必须为空  
.参数 目录名, 文本型, , 欲删除的目录



.子程序 创建目录DLL, 逻辑型, , 成功返回真 失败返回假
.参数 路径, 文本型, , pszPath



.子程序 建立模板目录, 逻辑型, , 成功则返回真 失败则返回假
.参数 模板目录, 文本型, , 
.参数 新目录名称, 文本型, , 



.子程序 删除文件DLL, 逻辑型, , 成功则返回真 失败则返回假
.参数 欲删除的文件名, 文本型, , 



.子程序 取临时目录, 文本型, , 


.子程序 取system32目录, 文本型, , 


.子程序 取桌面目录, 文本型, , 


.子程序 取系统目录, 文本型, , 
.参数 欲获取目录类型, 整数型, , 



.子程序 取得Win目录, 文本型, , 


.子程序 目录是否为空, 整数型, , 是返回非0，不存在或不是空目录返回0
.参数 路径文本, 文本型, , 



.子程序 取当前目录DLL, 文本型, , 


.子程序 复制目录, 文本型, , 复制目录下的文件到别的目录    返回少男少女论坛http://499767144.5d6d.com/bbs.php
.参数 窗口句柄, 整数型, , 一般为取窗口句柄()
.参数 源目录, 文本型, , 
.参数 目标目录, 文本型, , 
.参数 是否覆盖, 逻辑型, 可空,  默认为真       ' 如果是否覆盖为假  那么备份就没有了意义（我们不对存在的文件的人做任何事情)  , 如果是否覆盖的真 那么我们备份就有意义,那么就存在这是否备份的问题了
.参数 备份重复文件, 逻辑型, 可空, 默认为假     备份目标目录下存在的文件
.参数 备份后缀, 文本型, 可空, 默认为bak        比如:文件名为 1.txt 备份后缀名为 .bak   则备份的文件名为 1.bak
.参数 播放声音, 逻辑型, 可空, 复制王完成后 是否播放声音 默认为假
.参数 声音常量, 整数型, 可空, 默认为64  wType,参见相关帮助           16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标。



.子程序 取文件属性API, 整数型, , 1、#只读文件； 2、#隐藏文件；  4、#系统文件； 16、#子目录；32、#存档文件 要判断是否设置了某个属性，在返回值与想要得知的属性值之间使用“位与”命令进行比较。如果所得的结果不为零，则表示设置了这个属性值。如果取文件属性失败，将返回 -1。
.参数 文件名, 文本型, , 



.子程序 移动文件DLL, 整数型, , , MoveFileA,移动文件
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 



.子程序 取模板完整路径, 文本型, , GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 模块句柄, 整数型, 可空, 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄  一般填写0



.子程序 取执行文件名G, 文本型, , GetModuleFileNameA


.子程序 取执行文件路径G, 文本型, , GetModuleFileNameA


.子程序 取运行目录G, 文本型, ,    包含当前任务可执行文件的目录。利用函数GetModuleFileName可以返回这一目录的路径；例子:C:\Documents and Settings\Administrator\桌面\


.子程序 文件可否运行, 逻辑型, , GetBinaryTypeA
.参数 文件路径, 文本型, , lpApplicationName String，欲测试文件的完整路径名 
.参数 文件类型, 整数型, 可空, lpBinaryType Long，参见相关帮助  SCS_32BIT_BINARY win32执行程序=0  SCS_DOS_BINARY DOS执行程序=1    SCS_OS216_BINARY 16位OS/2执行程序=5   SCS_PIF_BINARY 用于执行DOS程序的一个pif文件=3  SCS_POSIX_BINARY 一个Posix应用=4  SCS_WOW_BINARY 16位windows执行程序=2



.子程序 设置当前目录, 逻辑型, , SetCurrentDirectoryA Long，非零表示成功，零表示失败。会设置GetLastError
.参数 新当前目录的路径, 文本型, , 



.子程序 检测文件是否存在, 逻辑型, , PathFileExistsA检测文件是否存在，0不存在, 1存在
.参数 文件名, 文本型, , 文件名（含路径） pszPath



.子程序 检测文件夹是否存在, 逻辑型, , PathIsDirectoryA 目录是否存在，0不存在, 16存在
.参数 目录名, 文本型, , 目录名（含路径） pszPath



.子程序 取Program目录, 文本型, , 比如:C:\Program Files
.参数 是否创建, 逻辑型, 可空, 默认为假



.子程序 关闭文件API, 逻辑型, , CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 欲关闭的文件号, 整数型, , 该文件号由“打开文件”命令所返回。



.子程序 打开文件API, 整数型, , OpenFile 打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字
.参数 文件操作结果, 文件结构信息_, 可空, lpReOpenBuff，文件操作结果 文件结构信息
.参数 操作方式, 整数型, 可空, wStyle，操作方式  一般为32 默认为32



.子程序 取文件尺寸API, 整数型, , GetFileSize Long，返回文件长度。&HFFFFFFFF表示出错。注意如lpFileSizeHigh不为NULL，且结果为&HFFFFFFFF，那么必须调用GetLastError，判断是否实际发生了一个错误，因为这是一个有效的结果
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字



.子程序 取文件长度API, 整数型, ,  返回指定被打开文件的尺寸，该尺寸以字节为单位。如果给定文件号无效或失败，返回 -1 。本命令为初级命令。
.参数 文件句柄, 整数型, , 该文件号必须由“打开文件”命令所返回。



.子程序 打开文件属性对话框, 整数型, , ShellExecuteEx
.参数 文件名, 文本型, 可空, 



.子程序 _lcreat, 整数型, , 创建文件 _lcreat  失败返回-1
.参数 文件路径, 文本型, , lpPathName，路径加文件名
.参数 文件类型, 整数型, , iAttribute，0,文件能够读写　1,创建只读文件 2,创建隐藏文件 3,创建系统文件



.子程序 CreateFile, 整数型, , CreateFileA Long，如执行成功，则返回文件句柄。 
.参数 打开文件名, 文本型, , lpFileName，要打开的文件的名字
.参数 访问权限, 整数型, , dwDesiredAccess，访问权限 Long，如果为 GENERIC_READ 表示允许对设备进行读访问；如果为 GENERIC_WRITE 表示允许对设备进行写访问（可组合使用）
.参数 共享方式, 整数型, , dwShareMode，共享方式 Long，零表示不共享; FILE_SHARE_READ和/或FILE_SHARE_WRITE 表示允许对文件进行共享访问
.参数 安全特性, 安全性结构_, , lpSecurityAttributes，安全特性信息
.参数 创建方式, 整数型, , dwCreationDisposition，创建方式  OPEN_EXISTING 文件必须已经存在。由设备提出要求
.参数 文件属性, 整数型, , dwFlagsAndAttributes，参见相关帮助  FILE_ATTRIBUTE_NORMAL 默认属性 
.参数 从文件复制文件属性, 整数型, , hTemplateFile，参见相关帮助  Long，如果不为零，则指定一个文件句柄



.类模块 窗口操作, , , 

.子程序 取活动窗口句柄, 整数型, , GetActiveWindow获得活动窗口的句柄 返回句柄


.子程序 判断窗口最大化, 逻辑型, , IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
.参数 窗口句柄, 整数型, 可空, hwnd,欲测试的窗口的句柄



.子程序 窗口获得焦点, 整数型, , SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
.参数 窗口句柄, 整数型, 可空, hWnd



.子程序 最小化所有窗口win加D, 空白型, , keybd_event 调用API 模拟按键 win+d     


.子程序 窗口是否可见返回逻辑, 逻辑型, , 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , 



.子程序 寻找子窗口句柄, 整数型, , 返回查找到的句柄值
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
.参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"



.子程序 取窗口类名, 文本型, , 返回窗口类名
.参数 窗口句柄, 整数型, , 



.子程序 恢复窗口, 整数型, , 恢复被最小化或最大化的窗口
.参数 窗口句柄, 整数型, , hwnd，窗口句柄



.子程序 获取指定窗口句柄, 整数型, ,  参数填写正确的话返回窗口句柄
.参数 窗口类名, 文本型, , lpClassName，参见相关帮助
.参数 窗口文本, 文本型, , lpWindowName，参见相关帮助



.子程序 窗口置顶, 整数型, , 
.参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄



.子程序 取标题文本长度, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 设置窗口标题, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 



.子程序 锁定窗口, 整数型, , LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
.参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁



.子程序 改变窗口, 整数型, , MoveWindow
.参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
.参数 左侧位置, 整数型, , x，窗口新的左侧位置
.参数 顶部位置, 整数型, , y，窗口新的顶部位置
.参数 新宽度, 整数型, , nWidth，窗口的新宽度
.参数 新高度, 整数型, , nHeight，窗口的新高度
.参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）



.子程序 设置指定窗口的显示状态, 整数型, , ShowWindow返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。  控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
.参数 窗口句柄, 整数型, , hWnd：窗口句柄。
.参数 窗口如何显示, 整数型, , nCmdShow：指定窗口如何显示 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活 1 最小化取消激活 2 还原激活 3 显示激活 4 最大化激活 5 最小化激活 6 最小化 7 显示 8 最近状态显示 9 还原 更多查看常量:ShowWindow



.子程序 设置窗口位置, 逻辑型, , SetWindowPos
.参数 窗口句柄, 整数型, 可空, Long，欲定位的窗口
.参数 定位类型, 整数型, , Long，窗口句柄。 取－1表示在最顶层显示窗口，取1表示在最底层显示；  在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
.参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
.参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
.参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
.参数 窗口新高度, 整数型, , Long，指定新的窗口高度
.参数 显示方式, 整数型, 可空, Long参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 ，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等



.子程序 窗口总在最前, 逻辑型, , SetWindowPos
.参数 窗口句柄, 整数型, 可空, 
.参数 总在最前, 逻辑型, 可空, 默认为真



.子程序 判断窗口可见性, 逻辑型, , 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , 



.子程序 取获取焦点窗口句柄, 整数型, , GetFocus，获得拥有输入焦点的窗口的句柄


.子程序 判断窗口句柄是否有效, 逻辑型, , IsWindow判断一个窗口句柄是否有效 如果为1则为有效 0为无效
.参数 窗口句柄, 整数型, , 



.子程序 置父窗口, 逻辑型, , 返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
.参数 子窗口句柄, 整数型, , hWndChild
.参数 新的父窗口句柄, 整数型, , hWndNewParent



.子程序 将窗口设为系统的前台窗口, 逻辑型, , SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 判断窗口最小化, 逻辑型, , IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 将窗口设为系统的前台窗口扩展, 逻辑型, , SetForegroundWindow 
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 呼叫窗口函数地址, 整数型, , CallWindowProcA
.参数 前一窗口函数地址, 整数型, , 
.参数 窗口句柄, 整数型, 可空, 
.参数 消息值, 整数型, 可空, 
.参数 附加参数1, 整数型, 可空, 
.参数 附加参数2, 整数型, 可空, 



.子程序 允许或禁止窗口, 整数型, , EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
.参数 窗口句柄, 整数型, 可空, hwnd，窗口句柄
.参数 标识符, 整数型, , fEnable，非零允许，零禁止



.子程序 设置窗口透明度API, 逻辑型, , SetLayeredWindowAttributes 设置窗口透明度
.参数 窗口句柄, 整数型, 可空, 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
.参数 颜色值, 整数型, 可空, crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
.参数 透明度, 整数型, 可空, 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
.参数 透明方式, 整数型, 可空, dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。



.子程序 取得窗口信息, 整数型, , GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
.参数 窗口句柄, 整数型, 可空, 欲为其获取信息的窗口的句柄
.参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;



.子程序 设置窗口信息, 整数型, , SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
.参数 窗口句柄, 整数型, 可空, hwnd，欲为其取得信息的窗口的句柄
.参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
.参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值



.子程序 取剪辑板窗口句柄, 整数型, , GetOpenClipboardWindow


.子程序 GetDlgItemText, 整数型, , 该函数用于获取对话框中指定控件的标题或文本
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
.参数 缓冲区最大字符数, 整数型, , nMaxCount



.子程序 清除窗口, 整数型, , DestroyWindow
.参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄



.子程序 SetDlgItemText, 整数型, , 该函数设置对话框中控制的文本和标题。
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 设置文本, 文本型, , lpString  



.子程序 EnumWindows, 整数型, , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
.参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
.参数 自定义数值, 整数型, , lParam,参见相关帮助



.子程序 GetDlgItem, 整数型, , 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。



.类模块 网页操作, , , 

.子程序 检查Internet连接, 逻辑型, , 成功返回真 InternetCheckConnectionA
.参数 Url地址, 文本型, 可空, http://499767144.5d6d.com/bbs.php



.子程序 打开网址, 整数型, , http://499767144.5d6d.com/bbs.php
.参数 网址, 文本型, 可空, 要打开的网页地址 http://499767144.5d6d.com/bbs.php  如果为空 则该目录



.子程序 HTTP下载, 逻辑型, , 成功返回真 失败返回假
.参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。 http://499767144.5d6d.com/bbs.php
.参数 保存到本地文件名, 文本型, , szFileName 例如:c:\1.exe  保存在:c:\1.exe



.子程序 HTTP读文件DLL, 字节集, , 
.参数 HTTP文件地址, 文本型, , 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。



.子程序 打开Internet, 整数型, , InternetOpen*  InetrnetOpen 初始化 WinInet.dll
.参数 代理商名称, 文本型, 可空, sAgent  比如:“http://499767144.5d6d.com/bbs.php”
.参数 存取类型, 整数型, 可空, lAccessType  比如:1
.参数 代理名称, 文本型, 可空, sProxyName  比如:""
.参数 代理地址, 文本型, 可空, sProxyBypass 比如""
.参数 标志, 整数型, 可空, lFlags      比如:0



.子程序 关闭Internet句柄, 整数型, , InternetCloseHandle
.参数 Internet句柄, 整数型, , hInet



.子程序 打开Internet地址, 整数型, , InternetOpenUrl
.参数 Internet句柄, 整数型, , hInternetSession
.参数 Url地址, 文本型, 可空, lpszUrl
.参数 头文本, 文本型, 可空, lpszHeaders     例子:""
.参数 头文本长度, 整数型, 可空, dwHeadersLength  例子: 0
.参数 标志, 整数型, 可空, dwFlags       例子:-2147483648
.参数 定义值, 整数型, 可空, dwContext   例子:0



.子程序 读Internet文件, 字节集, , InternetReadFile
.参数 Internet地址句柄, 整数型, , hFile
.参数 读取大小, 整数型, 可空, lNumBytesToRead  默认为:1000
.参数 读取首地址, 整数型, 可空, lNumberOfBytesRead



.子程序 取网站原码, 文本型, , 
.参数 读取大小, 整数型, 可空, lNumBytesToRead  默认为:1000
.参数 读取首地址, 整数型, 可空, lNumberOfBytesRead
.参数 HTTP文件地址, 文本型, 可空, 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。 默认:http://499767144.5d6d.com/bbs.php



.类模块 配置项操作, , , 

.子程序 读配置项Dll, 文本型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 默认文本, 文本型, 可空, lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 取配置节名DLL, 文本型, , 
.参数 节名称, 文本型, , lpAppName
.参数 配置项文件名, 文本型, , lpFileName



.子程序 初始化配置项, 整数型, , 
.参数 节名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 写配置项DLL, 整数型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 欲写入值, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.类模块 鼠标操作, , , 

.子程序 键盘和鼠标锁定, 整数型, , BlockInput
.参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除



.子程序 显示隐藏鼠标DLL, 整数型, , 控制鼠标指针的可视性   当设为显示鼠标返回值为正数相加 0 1 2 3 4.....       当设为隐藏鼠标 返回值为负数相减 -1 -2 -3 -4 .....
.参数 标示符, 逻辑型, , 真为显示 假为隐藏



.子程序 设置鼠标坐标, 整数型, , 非零表示成功，零表示失败
.参数 水平位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的水平位置
.参数 垂直位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的垂直位置



.子程序 取鼠标所在窗口句柄DLL, 整数型, , 返回鼠标处的窗口句柄


.子程序 取鼠标垂直位置DLL, 整数型, , 


.子程序 取鼠标水平位置DLL, 整数型, , 


.子程序 鼠标左右键交换, 整数型, , 
.参数 是否交换, 逻辑型, , 真为交换  假为还原  默认为真



.子程序 俘获鼠标, 整数型, , SetCapture
.参数 窗口句柄, 整数型, 参考, 



.子程序 释放鼠标DLL, 整数型, , ReleaseCapture


.子程序 模拟鼠标, 空白型, , mouse_event,模拟一次鼠标事件  没有返回值
.参数 标志组合, 整数型, , dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下  
.参数 水平方向, 整数型, , dx，参见相关帮助
.参数 垂直方向, 整数型, , dy，参见相关帮助
.参数 数据信息, 整数型, 可空, cButtons，未使用
.参数 扩展数据信息, 整数型, 可空, dwExtraInfo，通常未用的一个值



.子程序 取鼠标双击时间, 整数型, , 得到鼠标的双击间隔速度  GetDoubleClickTime 一般鼠标设置的双击时间为 500 


.子程序 设置鼠标双击时间, 逻辑型, , 设置鼠标的双击间隔速度 SetDoubleClickTime 成功返回真 失败返回假 
.参数 时间, 整数型, 可空, 默认为500



.类模块 剪辑板操作, , , 

.子程序 关闭剪辑板, 整数型, , 


.子程序 打开剪贴板, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 清除剪辑板API, 整数型, , 清除当前 Windows 系统剪辑板中的所有数据 由打开 清除 关闭组成
.参数 窗口句柄, 整数型, , 



.子程序 取剪辑板窗口句柄, 整数型, , GetOpenClipboardWindow


.子程序 取剪辑版序号, 整数型, , GetClipboardSequenceNumber


.子程序 确定格式是否可用, 逻辑型, , IsClipboardFormatAvailable
.参数 格式, 整数型, , CF_TEXT



.子程序 剪辑板中可有文本API, 逻辑型, , IsClipboardFormatAvailable


.子程序 取剪辑板文本API, 文本型, , GetClipboardData


.子程序 SetClipboardData, 整数型, , (0为失败)
.参数 剪贴板格式, 整数型, , wFormat
.参数 内存句柄, 整数型, , hMem



.类模块 编辑框操作, , , 

.子程序 获取某一行的内容, 文本型, , 获取编辑控件某一行的内容，变量须预先赋空格
.参数 编辑框容器, 编辑框, , 
.参数 行, 整数型, , 



.子程序 判断内容是否已发生变化, 整数型, , 返回TRUE则控件文本已被修改，返回FALSE(0)则未变。
.参数 编辑框容器, 编辑框, , 



.子程序 编辑框设为只读, 整数型, , 
.参数 编辑框容器, 编辑框, , 
.参数 参数, 整数型, , ' 1为只读 0为恢复



.子程序 指定行数的文本水平滚动, 整数型, , 
.参数 编辑框容器, 编辑框, , 
.参数 列数, 整数型, , 
.参数 行数, 整数型, , 



.子程序 获取编辑控件的总行数, 整数型, , 
.参数 编辑框容器, 编辑框, , 



.子程序 设置最大允许长度, 整数型, , 
.参数 编辑框容器, 编辑框, , 
.参数 最大允许长度, 整数型, , 



.子程序 改变系统编辑框, 整数型, , SHAutoComplete   '较大缓存时有效
.参数 编辑框句柄, 整数型, , hwndEdit 可以是外部句柄
.参数 标志, 整数型, 可空, dwFlags  一般为2



.子程序 创建插入符, 整数型, , CreateCaret，根据指定的信息创建一个插入符（光标），并将它选定为指定窗口的默认插入符。插入符可以是一根短线、一个方块或者一幅位图。通常用插入符指示文字在文字框中的插入位置
.参数 窗口句柄, 整数型, 可空, hwnd，窗口句柄
.参数 位图句柄, 整数型, 可空, hBitmap，位图句柄
.参数 宽度, 整数型, , nWidth，宽度
.参数 高度, 整数型, , nHeight，高度



.子程序 显示插入符, 整数型, , ShowCaret，在指定的窗口里显示插入符（光标）
.参数 窗口句柄, 整数型, 可空, hwnd，包含了插入符的窗口的句柄。可以为零；此时，只有在插入符包含于由活动任务拥有的一个窗口时，它才会显示出来



.类模块 内存操作, , , 

.子程序 全局分配分配, 整数型, , GlobalAlloc
.参数 标志, 整数型, , wFlags
.参数 字节, 整数型, , dwBytes



.子程序 释放内存分配, 整数型, , GlobalFree
.参数 内存句柄, 整数型, ,  hMem  



.子程序 锁住全局内存块, 文本型, , GlobalLock
.参数 内存句柄, 整数型, , hMem



.子程序 解锁全局内存块, 整数型, , GlobalUnlock
.参数 内存句柄, 整数型, , hMem



.子程序 拷贝内存, 文本型, , RtlMoveMemory
.参数 源缓冲区, 字节型, 数组, Source



.子程序 填充内存, 文本型, , $(b) RtlFillMemory
.参数 目的内存, 文本型, , Destination
.参数 填充内容, 字节型, , Fill 例子:取代码("A",)



.子程序 内存清零, 空白型, , RtlZeroMemory
.参数 目的内存, 文本型, , Destination
.参数 长度, 整数型, , Length



.子程序 写内存字节集, 整数型, , WriteProcessMemory写内存 失败返回0 返回值
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄 使用函数 OpenProcess() 返回。
.参数 内存地址, 整数型, , lpBaseAddress,内存地址
.参数 写入数据, 字节集, , lpBuffer, 数据指针  本参数的类型也能是“字节”型。
.参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
.参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写WriteProcessMemory 返回值为0则忽略。 



.子程序 写内存十六进制路径名, 逻辑型, , 成功返回真 失败返回假
.参数 完整的路径名, 文本型, , 完整的路径名 比如:c:\1.exe
.参数 地址, 文本型, , 例子:地址:0049500B
.参数 修改指令, 文本型, , 例子 修改指令:9090



.子程序 写内存十六进制进程句柄, 逻辑型, , 成功返回真 失败返回假
.参数 进程句柄, 整数型, , 例子:进程句柄:168
.参数 地址, 文本型, , 例子:地址:0049500B
.参数 修改指令, 文本型, , 例子 修改指令:9090



.子程序 读文本内存, 文本型, , 返回文本 ReadProcessMemory
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄
.参数 内存地址, 整数型, , lpBaseAddress,内存地址



.子程序 读文本内存进程句柄, 文本型, , 返回文本 ReadProcessMemory
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄
.参数 内存地址, 文本型, , lpBaseAddress,内存地址 例子:地址:0049500B。



.子程序 读文本十六进制路径名, 文本型, , 返回文本 ReadProcessMemory
.参数 完整的路径名, 文本型, , 完整的路径名 比如:c:\1.exe。
.参数 地址, 文本型, , 地址:0049500B。



.子程序 RtlMoveMemory, 整数型, , 
.参数 目的地址, 整数型, , pTo
.参数 源地址, 整数型, , uFrom
.参数 长度, 整数型, , lSize



.子程序 Process32First, 整数型, , 成功返回1，失败返回0
.参数 快照句柄, 整数型, , hSnapshot
.参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32



.子程序 Process32Next, 整数型, , 成功返回1，失败返回0
.参数 快照句柄, 整数型, , hSnapshot
.参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32



.子程序 GetModuleFileNameEx, 整数型, , ong，如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , hProcess
.参数 模块句柄, 整数型, , hModule
.参数 文件名缓冲区, 文本型, , lpFileName
.参数 缓冲区大小, 整数型, , nSize



.子程序 GetModuleBaseName, 整数型, , ong，如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , hProcess
.参数 模块句柄, 整数型, , hModule
.参数 文件名缓冲区, 文本型, , lpFileName
.参数 缓冲区大小, 整数型, , nSize



.类模块 进制操作, , , 

.子程序 十六进制转十进制, 整数型, , 
.参数 转换文本, 文本型, , 



.子程序 十进制转十六进制, 文本型, , 
.参数 欲取进制文本的数值, 整数型, , 



.子程序 二进制文本转10进制, 文本型, , 例如 文本：83 EC 58 53 56 57  返回131,236,88,83,86,87
.参数 二进制文本, 文本型, , 



.子程序 判断是否为十六进制文本, 逻辑型, , 成功返回真 失败返回假
.参数 文本, 文本型, , 



.子程序 十六进制文本到内存地址整数, 整数型, , 比如:0040346C 返回  4207724
.参数 内存地址, 文本型, , 



.子程序 十六进制到十进制无符号, 文本型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本



.子程序 十六进制转十进制有符号, 文本型, , StrToIntExA
.参数 转换文本, 文本型, , 



.类模块 字节集操作, , , 

.子程序 字节集到十六进制文本, 文本型, , 将字节集用16进制表示
.参数 字节集, 字节集, , 



.子程序 十六进制文本到字节集, 字节集, , 将一串十六进制文本还原为字节集
.参数 文本, 文本型, , 



.类模块 进程与线程函数, , , 

.子程序 退出进程, 整数型, , ExitProcess
.参数 进程句柄, 整数型, , 



.子程序 取当前进程标识符, 整数型, , 获取当前进程一个唯一的标识符 GetCurrentProcessId 


.子程序 取创建32位帮助工具快照, 整数型, , 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
.参数 标志, 整数型, , lFlags  一般填写8即可
.参数 进程标识符, 整数型, , lProcessID



.子程序 寻找第一个32位模块, 整数型, , Module32First  返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 模块地址_, 参考, uProcess



.子程序 寻找下一个32位模块, 整数型, , Module32Next 返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 模块地址_, 参考, uProcess



.子程序 打开进程, 整数型, , , OpenProcess将句柄返回给过程对象  如执行成功，返回进程句柄；零表示失败      2035711 完全访问
.参数 进程对象, 整数型, , dwDesiredAccess 常量 PROCESS_ALL_ACCESS: 2035711 最大权限  1024  16  当设置为1024 16 不能对内存写入 
.参数 继承句柄, 整数型, , bInheritHandle  一般可以填写0  
.参数 进程标识符, 整数型, , dwProcessId



.子程序 关闭进程句柄, 整数型, , CloseHandle 关闭进程句柄
.参数 进程句柄, 整数型, , 



.子程序 创建进程, 整数型, , 
.参数 要执行的程序名, 文本型, , lpApplicationName，参见相关帮助  
.参数 要执行的命令行, 文本型, , lpCommandLine，参见相关帮助  一般填写为空
.参数 安全特性参数1, 整数型, , lpProcessAttributes，参见相关帮助  一般填写为0
.参数 安全特性参数2, 整数型, , lpThreadAttributes，参见相关帮助  一般填写为0
.参数 允许新进程继承当前进程的句柄, 逻辑型, , bInheritHandles，参见相关帮助   一般填写 假
.参数 参数1, 整数型, , dwCreationFlags，赋0即可  一般填写为0
.参数 环境指针, 文本型, , lpEnvironment，赋0即可    一般填写为空
.参数 新进程当前目录路径, 整数型, , lpCurrentDriectory，参见相关帮助   一般填写为0
.参数 创建进程时附加信息, 启动信息数据, , lpStartupInfo，创建进程时附加信息
.参数 新进程的进程和线程标识符, 创建进程返回数据类型, , lpProcessInformation，参见相关帮助



.子程序 创建进程增强, 整数型, , 返回进程句柄
.参数 要执行的程序名, 文本型, , lpApplicationName，参见相关帮助  



.子程序 取进程线程标识符ID, 整数型, , GetWindowThreadProcessId返回进程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 退出线程, 整数型, , ExitThread
.参数 线程句柄, 整数型, , 



.子程序 取当前线程伪句柄, 整数型, , GetCurrentThread $(b)获取当前线程的一个伪句柄  当前线程的伪句柄


.子程序 取当前进程伪句柄, 整数型, , GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄


.子程序 取线程优先级, 整数型, , GetThreadPriority
.参数 线程句柄, 整数型, , 线程句柄



.子程序 取特定进程优先级, 整数型, , GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 进程句柄;



.子程序 置线程优先级, 整数型, , $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
.参数 线程句柄, 整数型, , hThread
.参数 优先权, 整数型, 可空, nPriority  默认-2 例如:-2 更过自己去搜索下



.子程序 置进程优先级, 整数型, , $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 
.参数 级别, 整数型, 可空, 默认64 例如:64 更过自己去搜索下



.子程序 为进程指定CPU, 整数型, , 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
.参数 进程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.子程序 为线程指定CPU, 整数型, , 设置CPU亲和性  线程句柄SetThreadAffinityMask
.参数 线程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.子程序 创建扩展线程, 整数型, , SHCreateThread
.参数 线程地址, 整数型, , pfnThreadProc   到数值 (&_按钮1_被单击)



.子程序 取进程标识符ID, 整数型, , GetWindowThreadProcessId返回进程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 取线程标识符ID, 整数型, , GetWindowThreadProcessId返回线程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 结束进程API, 逻辑型, , TerminateProcess  结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError 
.参数 进程标识, 整数型, 可空, 要终止进程的进程ID、进程句柄



.类模块 取函数地址, , , 

.子程序 取函数地址, 整数型, , GetProcAddress 返回函数地址
.参数 模块句柄, 整数型, , 
.参数 函数名, 文本型, , MessageBoxA



.子程序 取模块句柄, 整数型, , GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
.参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD; User32.dll



.子程序 取函数入口处的地址, 整数型, , 返回函数地址
.参数 模块名, 文本型, , 例:User32.dll
.参数 函数名, 文本型, , 例:MessageBoxA



.子程序 载入动态链接库, 整数型, , loadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
.参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称



.子程序 释放动态链接库, 逻辑型, , FreeLibrary, 释放指定的动态链接库，它们早先是用LoadLibrary ;API函数装载的  非零表示成功，零表示失败。会设置GetLastError
.参数 库句柄, 整数型, , hLibModule，要释放的一个库句柄，在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用



.类模块 键盘操作, , , 

.子程序 模拟键盘行动, 整数型, , keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
.参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 win键代码=91
.参数 键扫描码, 整数型, 可空, bScan,键的OEM扫描码
.参数 标志值, 整数型, 可空, dwFlags,标志常数  KEYEVENTF_KEYUP=2  放开某键的标志
.参数 特定值, 整数型, 可空, dwExtraInfo,通常不用的一个值



.子程序 模拟键盘行动放开键, 整数型, , keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
.参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 win键代码=91
.参数 键扫描码, 整数型, 可空, bScan,键的OEM扫描码
.参数 标志值, 整数型, 可空, dwFlags,标志常数  KEYEVENTF_KEYUP=2  放开某键的标志
.参数 特定值, 整数型, 可空, dwExtraInfo,通常不用的一个值



.子程序 键盘和鼠标锁定, 整数型, , BlockInput
.参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除



.类模块 快速文本对象DLL, , , 

.子程序 添加, 文本型, , 返回
.参数 欲添加的文本, 文本型, , 
.参数 添加到, 逻辑型, 可空, 真 为添加到前面 假为添加到后面 默认为假



.子程序 取文本, 文本型, , 返回文本


.子程序 取长度, 整数型, , 


.子程序 清除文本, 文本型, , 返回


.类模块 桌面操作, , , 

.子程序 更换墙纸API, 逻辑型, , SystemParametersInfo
.参数 壁纸路径, 文本型, , 



.子程序 描绘桌面墙纸, 逻辑型, , PaintDesktop Long，TRUE（非零）表示成功，否则返回零  在指定的设备场景中描绘桌面墙纸图案
.参数 窗口句柄, 整数型, , hwnd



.子程序 刷新桌面, 整数型, , 


.子程序 取桌面句柄, 整数型, , 返回句柄  代码:a ＝ 寻找顶级窗口_ (“Progman”, 字符 (0))


.子程序 显示桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 隐藏桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 取桌面目录, 文本型, , SHGetSpecialFolderPathA


.类模块 字节操作, , , 

.子程序 字节数据到文本w, 文本型, , 例子 文本:{49,50,51,52,53,54} 返回123456
.参数 二进制数据, 文本型, , 例子 文本:{49,50,51,52,53,54} 返回123456



.子程序 字节数据到文本S, 文本型, , SysAllocStringByteLen
.参数 二进制数据, 字节型, 数组, m_pBase



.子程序 字节数据到文本R, 文本型, , RtlMoveMemory
.参数 二进制数据, 字节型, 数组, m_pBase



.类模块 字母操作, , , 

.子程序 字母, 文本型, , 字母索引 ABCDEFGHIJKLMNOPQRSTUVWXYZ 
.参数 字母索引, 整数型, , 1.到26之间  



.子程序 零到九A到F, 文本型, , 
.参数 字母索引, 整数型, , 16个字母,为大写，你要小写的话用代码  到小写转换下



.类模块 任务栏操作, , , 

.子程序 取任务栏位置, 整数型, , SHAppBarMessage
.参数 参数, 整数型, 可空, 默认为1     1.左边  2.顶边  3.右边  4.底边



.子程序 不在任务栏显示, 整数型, , SetWindowLongA (取窗口句柄 (), -8, 128)
.参数 窗口句柄, 整数型, 可空, 



.子程序 任务栏是否被隐藏, 逻辑型, , 真为隐藏 假为未被隐藏


.子程序 任务是否保持在其它窗口的前端, 逻辑型, , 


.子程序 取任务栏句柄, 整数型, , 返回任务栏句柄


.子程序 隐藏任务栏, 逻辑型, , 


.子程序 显示任务栏, 逻辑型, , 


.类模块 取地址, , , 

.子程序 取字节数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节型, 参考, lpString1
.参数 数据2, 字节型, 参考, lpString2



.子程序 取字节集数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节集, 参考, lpString1
.参数 数据2, 字节集, 参考, lpString2



.子程序 取文本数据地址, 文本型, , lstrcpyn
.参数 数据1, 文本型, 参考, lpString1
.参数 数据2, 文本型, 参考, lpString2



.子程序 取整数数据地址, 文本型, , lstrcpyn
.参数 数据1, 整数型, 参考, lpString1
.参数 数据2, 整数型, 参考, lpString2



.子程序 取字节数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节型, 数组, lpString1
.参数 数据2, 字节型, 数组, lpString2



.子程序 取文本数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 文本型, 数组, lpString1
.参数 数据2, 文本型, 数组, lpString2



.子程序 取整数数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 整数型, 数组, lpString1
.参数 数据2, 整数型, 数组, lpString2



.类模块 禁止程序重复运行, , , 

.子程序 禁止程序重复运行, 整数型, , OpenEventA CreateEventA
.参数 识别符, 文本型, 可空, 比如:少男少女论坛



.类模块 CPU操作, , , 

.子程序 为进程指定CPU, 整数型, , 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
.参数 进程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.子程序 为线程指定CPU, 整数型, , 设置CPU亲和性  线程句柄SetThreadAffinityMask
.参数 线程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.类模块 按钮操作, , , 

.子程序 按钮按下或者弹起, 空白型, , 按钮.发送信息 (243, 按下或者弹起, 0)
.参数 按钮, 按钮, , 
.参数 按下或者弹起, 整数型, , 1.按钮  0.弹起



.类模块 置入代码操作, , , 

.子程序 调试中断, 逻辑型, , 如果当前进程正在调试器的描述表中运行,则加入int3(CC) 置入代码 ({ 204 })  


.类模块 屏幕操作, , , 

.子程序 取屏幕句柄, 整数型, , 


.子程序 取屏幕宽度API, 整数型, , GetSystemMetrics


.子程序 取屏幕高度API, 整数型, , GetSystemMetrics


.子程序 取屏幕宽度不包括任务栏等区域, 整数型, , GetSystemMetrics


.子程序 取屏幕高度度不包括任务栏等区域, 整数型, , GetSystemMetrics


.类模块 矩形操作, , , 

.子程序 设置矩形, 整数型, , SetRect
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 右边, 整数型, , 
.参数 底边, 整数型, , 



.子程序 取左边, 整数型, , 


.子程序 取顶边, 整数型, , 


.子程序 取右边, 整数型, , 


.子程序 取底边, 整数型, , 


.子程序 清空矩形, 整数型, , SetRectEmpty


.子程序 释放矩形, 整数型, , SetRectEmpty


.类模块 视频捕获类, , , 

.子程序 创建视频窗口, 逻辑型, , 成功返回真 失败返回假
.参数 分组框容器, 分组框, , 



.子程序 开始捕获视频, 逻辑型, , 成功返回真 失败返回假


.子程序 停止捕获视频, 逻辑型, , 成功返回真 失败返回假


.子程序 设置捕捉速率, 逻辑型, , 成功返回真 失败返回假
.参数 间隔毫秒数, 整数型, 可空, 表示每隔多少毫秒捕捉一次画面,-1表示默认



.子程序 视频抓图, 逻辑型, , 成功返回真 失败返回假
.参数 文件名, 文本型, , 



.子程序 视频设置, 逻辑型, , 成功返回真 失败返回假


.类模块 SendMessageA, , , 

.子程序 获取编辑控件某一行的内容, 文本型, , 获取编辑控件某一行的内容，变量须预先赋空格
.参数 编辑框句柄, 整数型, , 
.参数 行, 整数型, , 



.子程序 判断编辑控件的内容是否已发生变化, 整数型, , 返回TRUE则控件文本已被修改，返回FALSE(0)则未变。
.参数 编辑框句柄, 整数型, , 



.子程序 编辑控件指定行数的文本水平滚动, 整数型, , 
.参数 编辑框句柄, 整数型, , 
.参数 列数, 整数型, , 
.参数 行数, 整数型, , 



.子程序 编辑控件设为只读, 整数型, , 
.参数 编辑框句柄, 整数型, , 
.参数 参数, 整数型, , ' 1为只读 0为恢复



.子程序 获取编辑框的总行数, 整数型, , 
.参数 编辑框句柄, 整数型, , 



.子程序 发送消息, 整数型, , 
.参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
.参数 信息值, 整数型, , 消息的标识符
.参数 参数一, 整数型, 可空, 具体取决于消息
.参数 参数二, 整数型, 可空, 具体取决于消息;



.子程序 设置编辑框最大允许长度, 整数型, , 
.参数 编辑框句柄, 整数型, , 
.参数 最大允许长度, 整数型, , 



.子程序 发送消息文本, 整数型, , 
.参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
.参数 信息值, 整数型, , 消息的标识符
.参数 参数一, 整数型, , 具体取决于消息
.参数 参数二, 文本型, , 具体取决于消息;



.子程序 关闭监视器API, 整数型, , 
.参数 窗口句柄, 整数型, , 



.类模块 多媒体, , , 

.子程序 生成声音, 逻辑型, ,  Beep,用于生成简单的声音  Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
.参数 声音频率, 整数型, , dwFreq,声音频率（从37Hz到32767Hz）Long，声音频率（从37Hz到32767Hz）。在windows95中忽略
.参数 声音持续时间, 整数型, , dwDuration,参见相关帮助Long，声音的持续时间，以毫秒为单位。如为-1，表示一直播放声音，直到再次调用该函数为止。在windows95中会被忽略



.类模块 ShowWindow, , , 

.子程序 隐藏托盘和时钟, 整数型, , 


.子程序 显示托盘和时钟, 整数型, , 


.子程序 显示桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 隐藏桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 隐藏任务栏, 逻辑型, , 


.子程序 显示任务栏, 逻辑型, , 


.子程序 显示Windows的开始按钮, 整数型, , 


.子程序 隐藏Windows的开始按钮, 整数型, , 


.类模块 最近文档操作, , , 

.子程序 清除打开文档历史记录, 整数型, , SHAddToRecentDocs


.子程序 增加到最近文档, 逻辑型, , SHAddToRecentDocs 成功返回真 失败返回假
.参数 文件的路径, 文本型, 可空, 如“c:\windows\a.txt"



.类模块 图标操作, , , 

.子程序 LoadIcon, 整数型, , LoadIconA Long，执行成功则返回已载入的图标的句柄；零表示失败。
.参数 实例句柄, 整数型, , hInstance,参见相关帮助
.参数 图标标识, 文本型, , lpIconName,作为一个字串，指定欲载入的图标资源



.子程序 释放设备场景, 逻辑型, , ReleaseDC   Long，执行成功为1，否则为0   释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）
.参数 窗口句柄, 整数型, 可空, hwnd
.参数 设备场景, 整数型, , hdc



.子程序 提取图标扩展, 整数型, , 返回值提供画图标的图标句柄
.参数 文件名, 文本型, , lpszFile "shell32.dll"
.参数 图标索引, 整数型, , nIconIndex



.子程序 取设备场景, 整数型, , GetDC$(b)获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
.参数 窗口句柄, 整数型, 可空, 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;



.子程序 画图标, 逻辑型, , DrawIcon$(b)在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
.参数 设备场景句柄, 整数型, , 设备场景GetDC$(b)获取指定窗口的设备场景 
.参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
.参数 纵坐标, 整数型, , 同上
.参数 图标句柄, 整数型, , 欲描绘图标的句柄;



.类模块 时间操作, , , 

.子程序 取启动时间API, 整数型, , GetMessageTime


.子程序 取WINDOWS运行时间, 整数型, , GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）


.子程序 取现行时间API, 日期时间型, , GetLocalTime


.子程序 取星期几API, 整数型, , GetSystemTime


.类模块 计时操作, , , 

.子程序 开始, 整数型, , GetMessageTime


.子程序 结束, 小数型, , GetMessageTime


.类模块 快速整数对象DLL, , , 

.子程序 添加, 整数型, , 比如:欲添加的整数=1  初始值0 返回1
.参数 欲添加的整数, 整数型, 可空, 
.参数 初始值, 整数型, 可空, 



.子程序 取数值, 整数型, , 返回数值


.子程序 取文本, 文本型, , 返回文本


.子程序 取长度, 整数型, , 


.子程序 清除, 文本型, , 返回


.类模块 查找文件操作, , , 

.子程序 查找文件, 整数型, , FindFirstFileA  Long，如执行成功，返回一个搜索句柄  失败返回-1
.参数 文件名, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS\*.*   编辑框2.内容 ＋ “*.*” 



.子程序 关闭搜索文件, 整数型, , FindClose,关闭由FindFirstFile函数创建的一个搜索句柄


.子程序 取Find文件名, 文本型, , 查找的文件信息 文件信息.cFileName


.子程序 查找下一个文件, 整数型, , FindNextFileA  Long，非零表示成功，零表示失败。


.子程序 取目录下所有文件个数, 整数型, , 不包含子目录下的文件
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS



.子程序 取目录下所有文件, 文本型, , 不包含子目录下的文件
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS
.参数 索引, 整数型, , 取目录下所有文件个数



.子程序 取目录下所有子目录个数, 整数型, , 只包含当前目录的所有子目录
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS



.子程序 取目录下所有子目录, 文本型, , 只包含当前目录的所有子目录 一般使用 先取目录下所有子目录个数 
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS
.参数 索引, 整数型, , 取目录下所有子目录个数



.子程序 删除目录下指定文件, 逻辑型, , 删除该目录下指定文件（包含子目录)  返回真 可能删除了该文件成功 返回假 该目录下不存在该文件或者删除失败
.参数 目录, 文本型, , 比如:C:\Documents and Settings\Administrator\桌面
.参数 文件名, 文本型, , 比如:1.txt



.类模块 系统函数, , , 

.子程序 关闭系统API, 逻辑型, , ExitWindowsEx  Long，非零表示成功，零表示失败。会设置GetLastError，退出windows，并用特定的选项重新启动
.参数 标志, 整数型, , uFlags,指定一个或多个标志的组合 EWX_FORCE=4; //关闭所有程序并以其他用户身份登录    EWX_LOGOFF=0; //重新启动计算机并切换到MS-DOS方式 中止进程，然后注销  EWX_SHUTDOWN=1;//关闭计算机 关掉系统电源（如果可能的话，ATX电源就可以）  EWX_REBOOT=2; //重新启动计算机  重新引导系统 
.参数 保留值, 整数型, 可空, dwReserved,保留，设为零  65535



.子程序 设置计算机名, 逻辑型, , 设置计算机名  一般要重新启动才生效 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错
.参数 新的计算机名称, 文本型, 参考, lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   



.子程序 重新启动系统设置, 整数型, , #59
.参数 标志, 整数型, 可空, uFlags EWX_FORCE=4 EWX_SHUTDOWN=1



.子程序 获取用户缺省语言ID, 整数型, , GetUserDefaultLangID


.子程序 获取用户缺省本地ID, 整数型, , GetUserDefaultLCID


.子程序 取当前用户名, 文本型, , 返回用户名GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator


.子程序 取当前用户名扩展, 文本型, , GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator


.类模块 网络函数, , , 

.子程序 获取一个网络资源用以连接的名字, 文本型, , WNetGetUserA获取一个网络资源用以连接的名字 Long，零表示成功。会设置GetLastError。如GetLastError是ERROR_EXTENDED_ERROR，则可用WNetGetLastError取得额外的错误信息
.参数 已连接资源的远程名称或本地名称, 文本型, 可空, lpNameString，指定已连接资源的远程名称或本地名称。用vbNullString获取当前用户的名字



.类模块 动态调用中的API函数, , , 

.子程序 载入动态链接库, 整数型, , loadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
.参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称



.子程序 释放动态链接库, 逻辑型, , FreeLibrary, 释放指定的动态链接库，它们早先是用LoadLibrary ;API函数装载的  非零表示成功，零表示失败。会设置GetLastError
.参数 库句柄, 整数型, , hLibModule，要释放的一个库句柄，在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用



.子程序 取函数地址, 整数型, , GetProcAddress 返回函数地址
.参数 模块句柄, 整数型, , 
.参数 函数名, 文本型, , MessageBoxA



.子程序 取模块句柄, 整数型, , GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
.参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD; User32.dll



.子程序 取函数入口处的地址, 整数型, , 返回函数地址
.参数 模块名, 文本型, , 例:User32.dll
.参数 函数名, 文本型, , 例:MessageBoxA



.类模块 PostMessageA, , , 

.子程序 发送消息, 整数型, , PostMessageA 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
.参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄。
.参数 信息值, 整数型, , 消息的标识符。
.参数 参数1, 整数型, , 具体取决于消息。
.参数 参数2, 整数型, , 具体取决于消息。



.类模块 mciSendString, , , 

.子程序 打开, 整数型, , 
.参数 媒体文件, 文本型, , 例如:C:\winnt\media\ringin.wav



.子程序 关闭, 整数型, , 


.子程序 播放, 整数型, , 


.子程序 暂停, 整数型, , 


.子程序 弹出光驱API, 整数型, , 弹出光驱门。 mciSendString


.子程序 关闭光驱API, 整数型, , 关闭光驱门。 mciSendString


.类模块 Windows消息函数, , , 

.子程序 发送消息返回, 整数型, , SendMessageCallback，该函数最大的特定是可以立即返回。目标窗口函数执行完毕后，会用回调函数的形式将结果返回Long，TRUE表示成功，FALSE表示失败。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd，要接收消息的那个窗口的句柄
.参数 消息标识符, 整数型, , wmsg，消息的标识符
.参数 消息1, 整数型, 可空, wParam，取决于消息
.参数 消息2, 整数型, 可空, lParam，取决于消息
.参数 指定函数地址, 整数型, 可空, lpResultCallBack，指定函数地址。在vb5中可用AddressOf操作符获得
.参数 自定义值, 整数型, 可空, dwData，用户自定义值



.子程序 同步发送消息, 整数型, , SendMessageTimeout，Long，成功时返回TRUE，失败时返回FALSE。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd，要接收消息的一个窗口的句柄
.参数 标识符, 整数型, , msg，消息的标识符
.参数 消息1, 整数型, 可空, wparam，由消息决定
.参数 消息2, 整数型, 可空, lparam，由消息决定
.参数 类型, 整数型, 可空, fuflags，下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起，则函数立即返回
.参数 超时值, 整数型, 可空, utimeout，超时值，采用毫秒为单位
.参数 结果, 整数型, 可空, lpdwresult，用于装载函数结果的一个变量



.类模块 消息, , , 

.子程序 点击按钮, 逻辑型, , SendMessageCallbackA
.参数 窗口句柄, 整数型, , hwnd，要接收消息的那个窗口的句柄



.类模块 设备场景, , , 

.子程序 取设备场景, 整数型, , GetDC$(b)获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
.参数 窗口句柄, 整数型, 可空, 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;



.子程序 释放设备场景, 逻辑型, , ReleaseDC   Long，执行成功为1，否则为0   释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）


.类模块 图象操作, , , 

.子程序 复制位图, 逻辑型, , StretchBlt，Long，非零表示成功，零表示失败。会设置GetLastError将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容。这个函数会在设备场景中定义一个目标矩形，并在位图中定义一个源图象。源矩形会根据需要进行伸缩，以便与目标矩形的大小相符
.参数 目标设备场景句柄, 整数型, , hdc，目标设备场景
.参数 目标横坐标, 整数型, , x，目标矩形左上角的x,y坐标，以逻辑坐标表示
.参数 目标纵坐标, 整数型, , y，目标矩形左上角的x,y坐标，以逻辑坐标表示
.参数 目标宽度, 整数型, , nWidth，目标矩形的宽度和高度，以逻辑坐标表示
.参数 目标高度, 整数型, , nHeight，目标矩形的宽度和高度，以逻辑坐标表示
.参数 源设备场景句柄, 整数型, , hSrcDC，源设备场景。如光栅运算未指定一个源，则这个参数应为零
.参数 源横坐标, 整数型, , xSrc，用源DC的逻辑坐标表示的源矩形左上角位置
.参数 源纵坐标, 整数型, , ySrc，用源DC的逻辑坐标表示的源矩形左上角位置
.参数 源宽度, 整数型, , nSrcWidth，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
.参数 源高度, 整数型, , nSrcHeight，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
.参数 光栅运算, 整数型, 可空, dwRop，传输过程中进行的光栅运算。如刷子属于光栅运算的一部分，就使用选入目标DC的刷子  如果省略，默认 13369376



.类模块 chm, , , 

.子程序 反编译chm, 逻辑型, , Decompile：HH.EXE -decompile <输出路径> <目标chm文件>
.参数 输出路径, 文本型, , 
.参数 目标chm文件, 文本型, , 



.类模块 鼠标, , , 

.子程序 穿透鼠标, 整数型, , SetWindowLong (取窗口句柄 (), #GWL_EXSTYLE, a)
.参数 窗口句柄, 整数型, 可空, 



.类模块 时钟API, , , 

.子程序 设置时钟, 整数型, , SetTimer
.参数 事件标识符, 整数型, 可空, 默认 MBTIMERID=999
.参数 时钟周期, 整数型, , 
.参数 回调函数地址, 整数型, 可空, 



.子程序 销毁时钟, 整数型, , KillTimer
.参数 事件标识符, 整数型, 可空, 默认 MBTIMERID=999



.类模块 算法, , , 

.子程序 取MD5值, 文本型, , MD5Init(初始化) MD5Update(开始编码) MD5Final(完成)
.参数 文本, 文本型, , 
.参数 大小写, 逻辑型, 可空, 默认为真 返回大写



.类模块 环境存取, , , 

.子程序 SetEnvironmentVariable, 整数型, , 置环境变量值 TRUE（非零）表示成功，否则返回零
.参数 环境字串名称, 文本型, , 
.参数 价值, 文本型, , 



.子程序 FreeEnvironmentStrings, 整数型, , 翻译指定的环境字串块  非零表示成功，零表示失败。会设置GetLastError
.参数 内存块的句柄, 整数型, , lpsz Long，指向一个内存块的句柄；那个内存块是以前通过GetEnvironmentStrings函数获得的



.子程序 GetEnvironmentStrings, 整数型, , 取环境变量文本  枚举所有的环境变量


.子程序 GetEnvironmentVariable, 文本型, , 读环境变量
.参数 环境变量名称, 文本型, , 



.类模块 拖放对象API, , , 

.子程序 DragAcceptFiles, 整数型, , 是否以让窗口能够接受拖放
.参数 窗口句柄, 整数型, ,  hWnd
.参数 是否接受, 整数型, , fAccept True 1 False 0



.子程序 DragQueryFile, 整数型, , 查询拖放的文件名 
.参数 文件结构句柄, 整数型, , hDrop  设置为wParam
.参数 文件序号, 整数型, , iFile 是以0   开始的被拖动文件的序号 -1 返回拖动文件的数量 不为1返回缓冲区文本长度 
.参数 缓冲区, 文本型, , lpszFile 指向文件名的缓冲区
.参数 缓冲区的大小, 整数型, , cch



.子程序 DragFinish, 整数型, , 释放拖放文件时使用的资源
.参数 文件结构句柄, 整数型, , hDrop  设置为wParam



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 禁止重复运行, 空白型, , 禁止程序重复运行,还原已经运行的程序窗口 | 此功能应加在 __启动窗口_创建完毕 子程序下
.参数 临时句柄, 整数型, 可空, 再次运行_欲还原的窗口的句柄(可空则不还原已经运行的此程序窗口)
.参数 项名, 文本型, 可空, 如果有多个程序用到禁止重复运行功能,建意给每个程序定个不同的项名.任意文本



.子程序 删除自身, 空白型, , 程序删除自身EXE文件(无返回值)


.子程序 取窗口位置, 坐标_, , 取指定窗口句柄的窗口客户区(左上角)顶点位置(无返回值)
.参数 窗口句柄, 整数型, 可空, 可空:则取当前窗口句柄的位置



.子程序 取窗口标题, 文本型, , 取指定窗口句柄的窗口标题(返回窗口标题,失败返回空文本)
.参数 窗口句柄, 整数型, , 指定的窗口句柄



.子程序 取窗口类名, 文本型, , 取指定窗口句柄的窗口类名(返回窗口类名,失败返回0)
.参数 窗口句柄, 整数型, , 指定的窗口句柄



.子程序 取窗口进程, 文本型, , 取指定窗口句柄的窗口程序进程名(返回进程名,失败返回空文本)
.参数 窗口句柄, 整数型, , 



.子程序 取进程ID, 整数型, , 取指定窗口句柄的窗口进程ID(返回进程ID,失败返回0)
.参数 窗口句柄, 整数型, , 



.子程序 取点标题, 文本型, , 取出指定点的组件上的文字内容或标题(返回文字内容)
.参数 水平位置, 整数型, 可空, (可空为鼠标当前坐标x)   文字所在的x坐标“X轴光标”
.参数 垂直位置, 整数型, 可空, (可空为鼠标当前坐标y)   文字所以的y坐标“Y轴光标”



.子程序 窗口更改标题, 整数型, , 更改指定窗口句柄的窗口标题(非"0"表示成功,返回"0"表示失败)
.参数 窗口句柄, 整数型, 可空, 可空:则更改当前窗口的标题
.参数 新标题, 文本型, , 新的窗口标题



.子程序 控制窗口状态, 整数型, , 控制窗口状态  成功:返回TRUE（非零），失败:返回FALSE（零）
.参数 临时句柄, 整数型, , 窗口句柄
.参数 状态, 整数型, , 0 隐藏取消激活 1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活



.子程序 窗口隐藏显示, 逻辑型, , 显示隐藏指定句柄的窗口(如果显示则隐藏:返回假,如果隐藏则显示:返回真)
.参数 窗口句柄, 整数型, 可空, 要显示/隐藏的窗口句柄(可空:则显示/隐藏当前窗口)



.子程序 窗口移动, 空白型, , 移动指定窗口(无返回值)
.参数 临时句柄, 整数型, , 欲移动窗口的句柄
.参数 窗口新左边, 整数型, 可空, 可空:原左边不变
.参数 窗口新顶边, 整数型, 可空, 可空:原顶边不变
.参数 窗口新宽度, 整数型, 可空, 可空:原宽度不变
.参数 窗口新高度, 整数型, 可空, 可空:原高度不变



.子程序 窗口最大化, 空白型, , 将指定窗口最大化(无返回值)
.参数 临时句柄, 整数型, , 欲最大化窗口的句柄



.子程序 窗口最小化, 空白型, , 将指定窗口最小化(无返回值)
.参数 临时句柄, 整数型, , 欲最小化窗口的句柄



.子程序 窗口销毁, 空白型, , 将指定窗口销毁(无返回值)
.参数 临时句柄, 整数型, , 欲销毁窗口的句柄



.子程序 句柄是否有效, 逻辑型, , 判断窗口句柄是否有效(返回真,无效返回假)
.参数 窗口句柄, 整数型, , 



.子程序 取窗体句柄数组, 整数型, , 根据窗口类名或窗口标题来取窗口句柄数组(返回符合条件的窗口句柄的数量  失败返回0)
.参数 窗口数组, 整数型, 参考 数组, 返回的窗口句柄数组
.参数 窗口类名, 文本型, 可空, 欲查找的窗口类名
.参数 窗口标题, 文本型, 可空, 欲查找的窗口标题



.子程序 取坐标句柄, 整数型, , 取指定坐标位置所在窗口组件的句柄(返回句柄)
.参数 水平位置, 整数型, , 句柄组件的x坐标“X轴光标”
.参数 垂直位置, 整数型, , 句柄组件的y坐标“Y轴光标”



.子程序 取窗口标题句柄, 整数型, , 根据窗口标题的部分内容,取窗口句柄(返回第一个符合条件的窗口句柄,失败:返回-1)
.参数 标题, 文本型, , 窗口标题(可以为窗口部分标题)



.子程序 取窗口进程句柄, 长整数型, , 取指定进程启动窗口的句柄(返回第一个符合条件的窗口句柄,失败返回-1)
.参数 进程名, 文本型, , 窗口程序的进程名



.子程序 找子窗口, 整数型, , 查找指定窗口的子级窗口(返回子窗口句柄)
.参数 临时句柄, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
.参数 起始句柄, 整数型, 可空, 从该句柄后开始查找, 可空:找第一个符合条件的
.参数 临时类名, 文本型, 可空, 欲查找的子窗口类名



.子程序 枚举窗口, 整数型, , 枚举所有窗口,返回窗口句柄数目,失败返回0
.参数 句柄数组, 整数型, 参考 可空 数组, 返回的所有窗口句柄数组



.子程序 枚举窗口过程, 逻辑型, , 
.参数 hwnd, 整数型, , 



.子程序 文本投递, 空白型, , 向指定窗口句柄的窗口中后台发送文本内容,对游戏有效!(无返回值)
.参数 窗口句柄, 整数型, , 接收消息的窗口句柄
.参数 文本内容, 文本型, , 发送的文本内容



.子程序 文本发送, 空白型, , 向指定编辑框后台发送文本内容(无返回值)
.参数 临时句柄, 整数型, , 接收消息的编辑框的句柄
.参数 临时内容, 文本型, , 发送的文本内容



.子程序 控件单击消息, 空白型, , 向指定按钮(控件)发送按钮鼠标单击的消息(无返回值)
.参数 临时按钮句柄, 整数型, , 按钮控件的句柄
.参数 临时状态, 整数型, 可空, 可空:单击  3 #按下 4 #放开



.子程序 按键消息, 空白型, , 向指定窗口句柄的窗口中发送按键消息(无返回值)
.参数 窗口句柄, 整数型, , 接收消息的窗口句柄
.参数 键代码, 整数型, , 按键的键代码
.参数 状态, 整数型, 可空, 可空:按键(按下+放开) 1 输入字符  3 #按下   4 #放开
.参数 是否功能键, 逻辑型, 可空, 可空为假:普通键   真:功能键 (为功能键可用于热键技能不输入字符)



.子程序 按键, 空白型, , 执行模拟按键(无返回值)
.参数 键代码, 整数型, , 键代码
.参数 状态, 整数型, 可空, 可空:按键(按下+放开)   3 #按下   4 #放开



.子程序 鼠标移动, 空白型, , 模拟鼠标移动(无返回值)
.参数 窗口句柄, 整数型, 可空, 可空:相对桌面移动鼠标  句柄有效则相对窗口中坐标移动
.参数 水平坐标, 整数型, , 水平坐标
.参数 垂直坐标, 整数型, , 垂直坐标



.子程序 鼠标模拟, 空白型, , 模拟鼠标按键(无返回值)
.参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键
.参数 控制, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开



.子程序 鼠标记录, 坐标_, , 记录当前鼠标坐标(返回所记录的当前鼠标 坐标_)


.子程序 鼠标恢复, 空白型, , 恢复当前鼠标坐标到"鼠标记录"的坐标点或移动鼠标到指定点(无返回值)
.参数 坐标, 坐标_, 可空, 可空:恢复到上次记录的坐标点



.子程序 键名取键码, 整数型, , 取按键名的按键码(返回按键码)
.参数 按键名, 文本型, , 按键名



.子程序 键码取键名, 文本型, , 取按键码的按键名(返回按键名)
.参数 键代码, 整数型, , 按键码



.子程序 键盘锁定, 空白型, , 锁定所有键盘按键(锁定后,键盘无法操作!)
.参数 状态, 逻辑型, 可空, 真:锁全键盘(可空为假)假:锁定功能键与Win键Esc键F4键Tab键Print键Soroll键Pause键



.子程序 键盘解锁, 空白型, , 键盘解锁(键盘锁定后,用来恢复键盘的使用)


.子程序 鼠标锁定, 空白型, , 锁定鼠标键(锁定后,鼠标键无效)
.参数 状态, 逻辑型, 可空, 真:完全锁定鼠标 (可空为假) 假:锁定鼠标左右键



.子程序 鼠标解锁, 空白型, , 鼠标键解锁(锁定鼠标键锁定后,用来恢复鼠标的使用)


.子程序 进程取路径, 文本型, , 取指定进程名的程序启动路径(成功返回路径,失败或进程不存在返回空,存在的进程无路径返回"?"号)
.参数 进程名, 文本型, , 程序进程名(注意进程名的大小写!)



.子程序 进程ID取模块, 整数型, , 失败为0，成功返回模块数量(该命令为高级成员命令)
.参数 进程ID, 整数型, 可空, 为空 则取当前进程模块
.参数 模块信息数组, 模块信息_, 参考 可空 数组, 返回的模块信息 数组



.子程序 进程权限提升, 逻辑型, , 提升进程到指定权限( #备份  #启动  #关机  #调试)
.参数 目标进程, 整数型, 可空, 为空表示当前线程
.参数 权限类别, 文本型, 可空, 为空:#调试



.子程序 内存读文本, 文本型, , 读取文本型数据(返回文本 失败返回空文本)
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认为20 欲读取的长度字节



.子程序 内存读整数, 长整数型, , 读取整数型数据(返回整数内容 失败返回0)
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 是否长整数, 逻辑型, 可空, 默认为假:读取整数型  真:读取长整数型



.子程序 取类名或标题句柄, 整数型, , 根据窗口类名或窗口标题来取窗口句柄(返回第一个符合条件的窗口句柄,失败返回0)
.参数 窗口类名, 文本型, 可空, 欲查找的窗口类名
.参数 窗口标题, 文本型, 可空, 欲查找的窗口标题



.子程序 枚举窗口信息, 整数型, , 枚举所有可见窗口的句柄的窗口信息(返回数组数目,失败返回0)
.参数 临时窗口信息, 窗口信息, 参考 数组, 枚举出来的窗口信息数组



.子程序 窗口透明, 逻辑型, , 设置窗口透明状态(成功返回真,失败返回假)
.参数 临时句柄, 整数型, , 设置透明化窗口的句柄
.参数 临时透明度, 字节型, 可空, 设置整个窗口的透明度  取值范围是[0,255] 可空为不设定此参数
.参数 临时透明色, 整数型, 可空, (#颜色)指定某颜色为完全透明(完全透明处不属于该窗口)  可空为不指定
.参数 鼠标穿透, 逻辑型, 可空, 可空为假   真:窗口被鼠标穿透



.子程序 类名更改, 空白型, , 更改类名(必须在欲更改的类名的程序运行前-执行)(无返回值)
.参数 旧类名, 文本型, , 欲更改的类名
.参数 新类名, 文本型, , 更改后的新类名



.子程序 鼠标消息, 空白型, , 向指定窗口发送鼠标动作消息(无返回值)
.参数 窗口句柄, 整数型, 可空, 可空:为桌面超级列表框句柄  接收鼠标消息窗口句柄
.参数 水平坐标, 整数型, 可空, 可空:为原水平坐标不变  移动目标鼠标水平坐标 (注:坐标为参数一窗口句柄中的坐标)
.参数 垂直坐标, 整数型, 可空, 可空:为原垂直坐标不变  移动目标鼠标垂直坐标
.参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键  4 #中键上滚动 5 #中键下滚动(滚动前后请按下放开中键)
.参数 控制, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开



.子程序 鼠标限制, 空白型, , 限制鼠标的活动范围(无返回值)
.参数 临时左边, 整数型, 可空, 可空为0
.参数 临时顶边, 整数型, 可空, 可空为0
.参数 临时宽度, 整数型, 可空, 可空为屏幕宽度
.参数 临时高度, 整数型, 可空, 可空为屏幕高度



.子程序 转换BASE64编码, 文本型, , BASE64编码处理(返回编码后的文本)
.参数 待编码数据, 字节集, , 待编码字节集



.子程序 转换BASE64解码, 字节集, , BASE64解码处理(返回解码后的字节集数据)
.参数 编码文本, 文本型, 参考, 待解码的文本



.子程序 转换_十六到十, 文本型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本



.子程序 字节集查看A, 文本型, , 查看字节集内容(如: 字节集查看 (到字节集 (“垃圾”)) 返回内容文本:{192}{172}{187}{248}
.参数 临时字节集, 字节集, , 欲查看的字节集
.参数 查看方式, 逻辑型, 可空, 可空为假:以十进制文本数据形式查看 真:以字节集形式查看(如:{123}{123}{222}...)



.子程序 内存读字节集, 字节集, , 读取字节集数据(返回字节集 失败返回空)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 长度, 整数型, , 欲读长度



.子程序 内存写文本, 逻辑型, , 写入文本数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 文本型, , 写入数据



.子程序 内存写整数, 逻辑型, , 写入四字节数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 整数型, , 写入数据



.子程序 内存写字节集, 逻辑型, , 写入字节集数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 字节集, , 写入数据



.子程序 内存搜索, 整数型, , 某些情况，需提升权限(返回结果数目,失败返回0)
.参数 进程ID, 整数型, , 进程ID
.参数 搜索内容, 字节集, , 欲搜索的内容  其他类型-需自行转换为字节集类型
.参数 结果数组, 整数型, 参考 数组, 用来保存搜索的结果



.子程序 进程暂停, 空白型, , 将指定进程暂停(无返回值)
.参数 进程ID, 整数型, , 欲被暂停进程的进程ID
.参数 状态, 逻辑型, 可空, 可空为假:恢复进程   真:暂停进程



.子程序 注册码验证, 逻辑型, , 进行软件注册验证(注册成功返回真 注册失败返回假)
.参数 注册码, 文本型, 可空, 用作验证注册身份的注册码(可空则判断是否已经注册)  注册码的计算方法请使用子程序“注册码生成”
.参数 载入窗口, 窗口, 可空, 注册成功后载入的窗口,可空则不载入窗口
.参数 加密文本, 文本型, 可空, 用作处理注册码的文本(任意) 可空则不作加密处理
.参数 注册账号, 文本型, 可空, 用作生成对应注册码的注册账号,可空则取硬盘特字(建意用"取硬盘特征字()",将使用者的硬盘特征字发给软件作者,用"注册码生成()",生成注册码后发给使用方)



.子程序 注册码生成, 文本型, , 返回所生成的注册码(此命令仅供软件作者生成注册码,参数必须与"注册码验证"参数相同)
.参数 加密文本, 文本型, 可空, 用作处理注册码的文本(任意) 可空则不作加密处理
.参数 注册账号, 文本型, 可空, 用作生成对应注册码的注册账号,可空则取硬盘特字



.子程序 窗口置父, 整数型, , 指定一个窗口的新父(返回前一个父窗口的句柄)
.参数 窗口句柄, 整数型, , 子窗口句柄
.参数 新父, 整数型, 可空, 新的父窗口句柄 (可空为 嵌入桌面)



.子程序 转换文本倒序, 文本型, , 将指定文本倒序 (比如:"123456"倒序后成:"654321")
.参数 欲转换文本, 文本型, , 欲倒序的文本



.子程序 转换URL编码, 文本型, , 将URL文本进行编码(返回编码后的文本)
.参数 URL, 文本型, , 欲编码的文本



.子程序 转换URL解码, 文本型, , 将URL文本进行解码(返回解码后的文本)
.参数 URL, 文本型, , 欲解码的文本



.子程序 转换_十到二, 文本型, , 将十进制转换成二进制(返回二进制文本)
.参数 十进制数, 整数型, , 欲转换的十进制



.子程序 转换_ASCII转Unicode, 字节集, , 将ASCII码转换为Unicode码 (返回转换后的字节集)
.参数 ASCII文本, 文本型, , 欲转换的ASCII文本



.子程序 转换时间为GMT格式, 文本型, , 将日期时间型数据转换为GMT格式
.参数 待转换时间, 日期时间型, , 



.子程序 线程_启动线程, 整数型, , 创建一个线程来启动子程序(返回线程号)
.参数 线程子程序, 子程序指针, , 欲启动的线程子程序指针



.子程序 线程_结束线程, 空白型, , 结束指定线程(无返回值)
.参数 线程号, 整数型, , 欲结束的线程号



.子程序 转换任意进制, 文本型, , 可以将从二进制到三十六进制的数值随意进行转换(返回转换后的文本)
.参数 被转换文本, 文本型, , 欲被转换的文本(不可以转换负数以及小数)
.参数 被转换进制, 整数型, , 被转换文本的进制(2-36之间)
.参数 转换的进制, 整数型, , 要转换到的进制(2-36之间)



.子程序 转换_十到八, 文本型, , 将十进制转换成八进制(返回八进制文本)
.参数 十进制数, 长整数型, , 欲转换的十进制数



.子程序 转换_八到十, 整数型, , 将八进制转换成十进制(返回十进制整数)
.参数 八进制文本, 文本型, , 欲转换的八进制文本



.子程序 转换_二到十, 整数型, , 将二进制转换成十进制(返回十进制整数)
.参数 二进制文本, 文本型, , 欲转换的二进制



.子程序 转换_十到十六, 文本型, , 将十进制转换成十六进制(返回十六进制文本)
.参数 十进制数, 长整数型, , 待转换的十进制数
.参数 是否不去零, 逻辑型, 可空, 默认为假:去0  真:不去0



.子程序 转换到十进制, 整数型, , 将2,8,16进制文件转换到10进制数值(返回十进制数)
.参数 文本, 文本型, , 2,8,16进制文件
.参数 进制, 整数型, , 2为二进制，8为八进制，16为16进制



.子程序 字节集查看, 文本型, , 以"EBCE001234"(16进制)显示字节集或"{0,1,2,3}"(10进制)的形式显示字节集
.参数 原文, 字节集, , 要查看的字节集
.参数 显示格式, 逻辑型, 可空, 默认以"EBCE001234"显示字节集，为真以"{0,1,2,3}"的形式显示字节集



.子程序 字节集还原, 字节集, , 将"EBCE001234"(16进制)格式文本或"{0,1,2,3}"(10进制)的格式文本转换为字节集
.参数 文本, 文本型, , 如"00BFAD00"或者是"{0,1,2,3}"
.参数 文本格式, 逻辑型, 可空, 默认为"EBCE001234"格式文本，为真为"{0,1,2,3}"格式文本



.子程序 进程结束, 空白型, , 结束一个进程,可以结束绝大部分进程,不受系统权限限制(无返回值)
.参数 进程名, 文本型, , 窗口程序的进程名



.子程序 进程是否存在, 逻辑型, , 判断指定进程是否存在(此判断与进程其它信息无关联)(存在返回真,不存在或失败返回假)
.参数 进程名, 文本型, , 欲检测的进程名



.子程序 转换MD5加密, 文本型, , 不可逆的加密算法(返回加密后的32位MD5码)
.参数 字节集, 字节集, , 欲进行MD5加密处理的字节集



.子程序 转换RC4加密, 文本型, , 用RC4算法对文本进行加密.(返回加密后的密文)
.参数 instr, 文本型, , 欲加密的文本
.参数 key, 文本型, 可空, 用作加密的密钥 (解密时必须有密钥才能解开密文)



.子程序 转换RC4解密, 文本型, , 对RC4算法加密过的文本进行解密(返回解密后的文本)
.参数 instr, 文本型, , 欲解密的密文
.参数 key, 文本型, 可空, 用作解密的密钥(加密时使用的)



.子程序 转换简体到繁体, 文本型, , 将简体中文转换成繁体中文(返回转换后的繁体内容)
.参数 简体文本, 文本型, , 欲转换的文本内容



.子程序 转换繁体到简体, 文本型, , 将繁体中文转换成简体中文(返回转换后的简体内容)
.参数 繁体文本, 文本型, , 欲转换的文本内容



.子程序 窗口化, 空白型, , 将指定窗口窗口化.通常用于游戏中..(无返回值)
.参数 句柄, 整数型, , 欲窗口化的窗口句柄(通常有这一个参数就可以了,其它可以不设定)
.参数 新宽度, 整数型, 可空, 窗口化后的窗口宽度 可空:800
.参数 新高度, 整数型, 可空, 窗口化后的窗口高度 可空:600
.参数 窗口标题, 文本型, 可空, 窗口化后的窗口标题 可空:不修改原窗口标题(有的游戏修改标题后会自动退出)
.参数 是否带边框, 逻辑型, 可空, 可空:无边框窗口 真:带标题栏(有的游戏屏蔽了边框的修改,可通过其它方法来实现)
.参数 分辨率_宽, 整数型, 可空, 可空:不修改分辨率(有的游戏全屏时修改了其分辨率,需改回去..)
.参数 分辨率_高, 整数型, 可空, 可空:不修改分辨率



.子程序 分辨率_置, 空白型, , 设置屏幕分辨率(无返回值)
.参数 色深, 短整数型, 可空, 新的色深 可空:不改变原先设定
.参数 屏幕宽度, 短整数型, 可空, 新的屏幕宽度 可空:不改变原先设定
.参数 屏幕高度, 短整数型, 可空, 新的屏幕高度 可空:不改变原先设定
.参数 屏幕刷新率, 短整数型, 可空, 新的屏幕刷新率 可空:不改变原先设定



.子程序 分辨率_取, 空白型, , 获取屏幕分辨率(无返回值)
.参数 色深, 短整数型, 参考 可空, 
.参数 屏幕宽度, 短整数型, 参考 可空, 
.参数 屏幕高度, 短整数型, 参考 可空, 
.参数 屏幕刷新率, 短整数型, 参考 可空, 



.子程序 系统_取本机IP, 整数型, , 返回IP数
.参数 欲装载的数组, 文本型, 数组, 取出来的IP
.参数 过滤本地地址, 逻辑型, 可空, 过滤127.0.0.1



.子程序 系统_取操作系统, 文本型, , 获取操作系统信息
.参数 版本号, 文本型, 可空, 获取的操作系统的版本号
.参数 内部版本号, 文本型, 可空, 获取的操作系统的内部版本号



.子程序 系统_取浏览器版本, 文本型, ,  获得IE的版本(返回IE版本)
.参数 内部版本号, 文本型, 可空, 获以的内部版本号



.子程序 系统_取计算机名, 文本型, , 获取计算机名


.子程序 系统_取系统用户名, 文本型, , 获取当前系统的用户名


.子程序 转换取区位码, 文本型, , 例：取区位码 (“吕”)
.参数 汉字, 文本型, , 



.子程序 转换取机内码, 文本型, , 例：取机内码 (“吕”)
.参数 汉字, 文本型, , 



.子程序 进程取路径及命令行参数, 文本型, , 获取目标进程的映像路径及命令行参数。(失败返回空文本)
.参数 进程ID, 整数型, , 



.子程序 窗口总在最前, 空白型, , 将指定窗口设为总在最前.(注意参数2,真:总在最前)
.参数 句柄, 整数型, , 欲设置的窗口句柄
.参数 是否总在最前, 逻辑型, 可空, 默认为假:取消总在最前  真:总在最前



.子程序 计算表达式, 文本型, , 对混合表达式进行运算 支持运算符号 +-\%*/() 支持负数小数(返回运算结果,计算错误返回空文本)
.参数 表达式, 文本型, , 欲计算的表达式. 对错误的表达式会自动报错!
.参数 提示, 文本型, , 可空:仅输出调试文本报错!  建意编译时设置标题:信息框提示错误原因!



.子程序 按键组合消息, 空白型, , 向指定窗口句柄的窗口中发送组合按键的消息,游戏中有效!(无返回值)
.参数 窗口句柄, 整数型, , 接收消息的窗口句柄
.参数 键代码, 整数型, , 按键的键代码
.参数 功能键码1, 整数型, , 功能键的键代码
.参数 功能键码2, 整数型, 可空, 功能键的键代码(可选)
.参数 功能键码3, 整数型, 可空, 功能键的键代码(可选)



.子程序 游戏读内存, 整数型, , 读取内存地址数据
.参数 句柄, 整数型, , 游戏窗口句柄
.参数 基址, 文本型, , 欲读取的内存基址(十六进制)
.参数 偏移1, 文本型, 可空, 没有请留空 (十六进制)
.参数 偏移2, 文本型, 可空, 没有请留空 (十六进制)
.参数 偏移3, 文本型, 可空, 没有请留空 (十六进制)
.参数 偏移4, 文本型, 可空, 没有请留空 (十六进制)



.子程序 按键组合, 空白型, , 执行模拟组合按键(无返回值)
.参数 键码, 整数型, , 键代码
.参数 功能键码1, 整数型, , 功能键代码
.参数 功能键码2, 整数型, 可空, 功能键代码(可选)
.参数 功能键码3, 整数型, 可空, 功能键代码(可选)



.子程序 文本全选, 空白型, , 选定指定文本 必要时会自动激活窗口(无返回值)
.参数 句柄, 整数型, 可空, 文本所在处的窗口句柄   可空为当前窗口焦点处
.参数 是否全选, 逻辑型, 可空, 可空为假:取消全选  真:全选



.子程序 文本复制, 文本型, , 复制指定文本 必要时会自动激活窗口
.参数 句柄, 整数型, 可空, 文本所在处的窗口句柄   可空为当前窗口焦点处



.子程序 文本粘贴, 空白型, , 粘贴指定文本 必要时会自动激活窗口(无返回值)
.参数 句柄, 整数型, 可空, 欲粘贴文本处的窗口句柄  可空为当前窗口焦点处
.参数 文本内容, 文本型, 可空, 欲粘贴的文本内容   可空:清楚内容



.子程序 取焦点句柄, 整数型, , 取光标焦点处窗口句柄(返回句柄)


.子程序 窗口置焦点, 逻辑型, , 将输入焦点设到指定的窗口。如有必要,会激活窗口.不能对最小化窗口设置(成功返回真,失败返回假)
.参数 句柄, 整数型, , 欲置焦点的窗口句柄



.子程序 热键1_注册全局热键, 整数型, , 注册一个全局热键. (成功返回热键ID,失败返回0)
.参数 窗口句柄, 整数型, , 通常为    取窗口句柄()
.参数 功能键, 整数型, 可空, 1 Alt  2 Ctrl  4 Shitf  8 Win 若要两个或以上的状态键按则把它们的值相加.
.参数 键代码, 整数型, , 
.参数 子程序指针, 子程序指针, , 响应热键事件的子程序指针,四个参数(窗口句柄,消息786,热键ID,参数)



.子程序 热键1_撤销指定热键, 整数型, , 成功返回非0,失败返回0
.参数 窗口句柄, 整数型, , 
.参数 HotKeyID, 整数型, , 



.子程序 热键1_撤销所有热键, 空白型, , 撤销所有热键


.子程序 窗口是否当前, 逻辑型, , 判断指定窗口是否为当前窗口(为当前接收按键消息的窗口返回真,否则返回假)
.参数 进程名, 文本型, 可空, 欲判断窗口的程序进程名(注意区分大小写)
.参数 窗口类名, 文本型, 可空, 欲判断窗口的类名(注意区分大小写)
.参数 窗口标题, 文本型, 可空, 欲判断窗口的标题关键字



.子程序 取窗口句柄1, 整数型, , 通过进程,类名或标题关键字来取窗口句柄(返回句柄,失败返回-1)
.参数 进程名, 文本型, 可空, 欲取窗口句柄的窗口程序进程名(注意大小写)
.参数 类名, 文本型, 可空, 欲取窗口句柄的窗口类名
.参数 标题, 文本型, 可空, 欲取窗口句柄的窗口标题关键字



.子程序 取句柄数组, 整数型, , 通过进程,类名或标题关键字来取窗口句柄(返回符合条件的句柄数目,失败返回0)
.参数 句柄数组, 整数型, 数组, 返回的窗口句柄数组
.参数 进程名, 文本型, 可空, 欲取窗口句柄的窗口程序进程名(注意大小写)
.参数 类名, 文本型, 可空, 欲取窗口句柄的窗口类名
.参数 标题, 文本型, 可空, 欲取窗口句柄的窗口标题关键字



.子程序 文件夹同步, 空白型, , 将一个目录与另一个目录同步(自动将文件大小不同,多余的文件或目录删除,缺少的文件复制.)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录



.子程序 文件夹单线同步处理, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录



.子程序 进程权限提升Debug, 逻辑型, , 成功返回真，把一个进程的权限提升到调试级权限
.参数 进程ID, 整数型, 可空, 可空为提升当前进程



.子程序 转换_Unicode转Ansi, 文本型, , 将Unicode码转换为Ansi码 (返回转换后的文本)
.参数 Unicode, 字节集, , 欲转换的Unicode字节集



.子程序 转换_Ansi转Unicode, 字节集, , 将Ansi码转换为Unicode码 (返回转换后的字节集)
.参数 Ansi, 文本型, , 欲转换的Ansi文本



.子程序 文件搜索, 文本型, , 在指定目录下搜索文件,返回第一个符合条件的文件路径
.参数 临时目录, 文本型, , 欲寻找的目录
.参数 文件名, 文本型, , 欲寻找文件名
.参数 显示标签, 标签, , 用来显示搜索路径的标签



.子程序 文件夹进度同步, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录
.参数 显示标签, 标签, , 显示当前同步文件的标签
.参数 进度条, 进度条, , 显示同步进度的进度条



.子程序 文件夹进度同步处理, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录
.参数 显示标签, 标签, , 显示当前同步文件的标签
.参数 进度条, 进度条, , 显示同步进度的进度条
.参数 总文件数, 整数型, , 



.子程序 枚举子窗口, 整数型, , 枚举指定句柄的一级子窗口,返回子窗口句柄数目,失败或无子返回0
.参数 父窗口, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
.参数 子窗口数组, 整数型, 参考 数组, 返回的所有符合条件的子窗口句柄
.参数 类名, 文本型, 可空, 指定子窗口类名



.子程序 取配置项名称, 整数型, , 取配置文件指定节名中所有配置项名称(成功返回配置项名称数目,失败返回-1)
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀(可为任意后缀)
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, 参考 数组, 返回节名中所有配置项名称的文本数组



.子程序 特效_渐隐渐现, 空白型, , 窗口控件渐隐渐现效果(注:使用前必须先使用"窗口透明" 延时一定时间后再使用此功能)
.参数 句柄, 整数型, , 欲渐隐渐现效果的窗口,编辑框,按钮等的句柄
.参数 渐隐or渐现, 逻辑型, 可空, 渐隐效果还是渐现效果(真:渐现 可空为假:渐隐)
.参数 时间, 整数型, , 渐隐渐现所展示的时间(单位毫秒)



.子程序 特效_编辑框_打字效果, 空白型, , 在编辑框中输入文字效果(不支持多个同时打字效果)
.参数 编辑框, 编辑框, , 展现打字效果的编辑框
.参数 文字内容, 文本型, , 欲打入的文字内容
.参数 间隔, 整数型, 可空, 单个文字的等待时间(单位:毫秒) 可空为50毫秒
.参数 是否全角, 逻辑型, 可空, 默认为显示半角文字,真:显示全角文字



.子程序 特效_编辑框_打字效果控制, 空白型, , 控制正在使用的打字效果
.参数 打字状态, 整数型, 可空, 0 继续打字  1 暂停打字  2:结束打字  
.参数 间隔, 整数型, 可空, 单个文字的等待时间(单位:毫秒)   可空:保持原速度不变



.子程序 特效_打字效果, 空白型, , 自动向指定句柄的控件中输入文字效果
.参数 句柄, 整数型, , 欲接收打字的控件句柄 (-句柄 撤消指定打字效果  -1 撤消所有)
.参数 文字内容, 文本型, 可空, 欲打入的文字内容 (内容为空,暂停或恢复该句柄的打字效果)
.参数 间隔, 整数型, 可空, 单个文字的等待时间(单位:毫秒) 可空为50毫秒



.子程序 文件后缀关联, 空白型, , 关联指定后缀名到指定文件 (打开该后缀名文件,该后缀名文件路径将作为参数传递给指定文件)
.参数 程序路径, 文本型, 可空, 关联到程序的路径 可空:取此执行文件的路径
.参数 后缀, 文本型, , 欲关联的后缀名,多个后缀用|分开 (如: asp|htm|html)
.参数 ICO图标路径, 文本型, 可空, 被关联文件的图标 可空为执行文件(程序)图标
.参数 文件类型, 文本型, 可空, 关联文件的说明 被关联文件属性中的文件类型
.参数 关联名, 文本型, 可空, 可空为后缀



.子程序 文件后缀是否关联, 整数型, , 判断指定后缀名是否被关联(未关联返回-1 关联文件不存在返回0 已经关联返回1)
.参数 后缀, 文本型, , 欲判断是否已经关联的后缀 ( 如 html )



.子程序 文件夹双进度同步, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录
.参数 总进度, 进度条, , 显示同步进度的进度条
.参数 单进度, 进度条, , 
.参数 显示总进度, 标签, , 
.参数 显示单进度, 标签, , 
.参数 显示当前目录, 标签, , 
.参数 显示当前文件, 标签, , 
.参数 更新数, 标签, 可空, 



.子程序 文件夹双进度同步处理, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录



.子程序 文件夹同步清理, 空白型, , 将本地目录中多余的或不同的文件删除
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲清理的目录



.子程序 文件夹是否存在, 逻辑型, , 判断指定目录是否存在(存在返回真,不存在返回假)
.参数 目录名, 文本型, , 欲判断的目录



.子程序 文件相差数, 整数型, , 返回两个目录中相差的文件数
.参数 服务器目录, 文本型, , 
.参数 本地目录, 文本型, , 



.子程序 进程枚举, 整数型, , 失败返回0，成功返回进程数量(该命令为高级成员命令)
.参数 进程信息, 进程信息_, 参考 可空 数组, 返回的进程信息 数组



.子程序 进程取ID, 整数型, , 取指定进程的进程ID(返回第一个进程ID,失败返回空信息)
.参数 进程名, 文本型, , 程序进程名(注意进程名的大小写!)



.子程序 进程终止, 逻辑型, , 终止一个进程(成功返回真,失败返回假)
.参数 进程名, 文本型, , 欲结束的进程名



.子程序 取命令行参数, 文本型, , 取指定程序的命令行参数,要求取命令行程序权限不低于被取程序的权限(返回命令行参数,无命令行或失败返回空文本)
.参数 进程名或路径, 文本型, , 欲取命令行参数的进程名或完整的程序路径



.子程序 超级延时, 空白型, , 高精度延时,cpu占用低,窗口不卡死,一次最大可延时几年 (无返回值)
.参数 延时间隔, 整数型, , 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒
.参数 延时单位, 整数型, 可空, 可空:毫秒  0 毫秒  1 微秒  2 秒  3 分  4 小时  5 天



.子程序 打开网页, 逻辑型, , 打开指定网址(成功返回真,失败返回假)
.参数 网址, 文本型, , 欲打开的网页地址(如:http://wghai.com)



.子程序 文件下载, 文本型, , Http读网页源码或下载网络文件(实用于小文件下载)
.参数 http地址, 文本型, , http网页地址或下载文件的网络地址
.参数 保存路径, 文本型, 可空, 下载文件的保存路径 (可空:不保存到本地文件)
.参数 仅保存, 逻辑型, 可空, 可空为假 返回数据 真:只保存到本地,节约变量



.子程序 取特定目录, 文本型, , 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]



.子程序 运行文件, 逻辑型, , 执行文件夹或文件或命令(成功返回真,失败返回假)
.参数 欲操作文件名, 文本型, , 欲操作(文件)或(文件夹的名称)或(网址)
.参数 命令行, 文本型, 可空, 执行文件的命令行,没有则设为空
.参数 窗口方式, 整数型, 可空, 可空为0:普通激活方式  1 隐藏窗口 2 最小化窗口



.子程序 取路径文件名, 文本型, , 取指定路径中的文件名(返回文件名)
.参数 路径, 文本型, , 完整路径



.子程序 路径收缩, 文本型, , 将指定路径收缩(返回收缩后的路径,无效返回空文本)如: c:\program files\ 收缩后为:c:\progra~1\ 
.参数 路径, 文本型, , 欲收缩的路径



.子程序 创建桌面快捷方式, 逻辑型, , 创建桌面快捷方式 (成功返回真,失败返回假)
.参数 lnk名称, 文本型, , 快捷方式保存全路径文件名
.参数 目标, 文本型, , 指向的文件全路径文件名
.参数 参数文本, 文本型, 可空, 执行文件的参数
.参数 图标文件, 文本型, 可空, 图标文件的路径  可空:为空时用目标的第一个图标
.参数 运行方式, 整数型, 可空, 1,常规方式，3,最大化，7,最小化
.参数 备注, 文本型, 可空, 快方式的备注信息
.参数 快捷键, 文本型, 可空, 启动快捷方式的快捷键  如“Ctrl+Alt+Y”



.子程序 创建网页快捷方式, 逻辑型, , 创建网页快捷方式 (成功返回真,失败返回假)
.参数 保存路径, 文本型, , 全路径文件名
.参数 网页地址, 文本型, , URL
.参数 ico图标, 文本型, 可空, 图标路径 可空:默认为网页快捷方式图标
.参数 快捷键, 整数型, 可空, CTRL+ALT+? (A=1601 B=1602 C=1603 ...)



.子程序 取DOS返回, 文本型, , 取出一个dos命令的返回信息
.参数 dos命令, 文本型, 可空, 欲执行的dos命令 可空为:停止由此命令发起的所有正在执行的DOS命令
.参数 即时回显, 编辑框, 可空, 由编辑框来显示即时回显信息



.子程序 定时器_创建, 整数型, , 返回成功创建定时器的标志
.参数 窗口句柄, 整数型, 可空, 为空则为系统级定时器(通常为空)
.参数 时钟周期, 整数型, , 毫秒级单位 1秒=1000毫秒
.参数 定时器事件处理, 子程序指针, , 定时器触发事件



.子程序 定时器_销毁, 整数型, , 销毁已经创建的定时器(定时器不使用了一定要销毁!)
.参数 窗口句柄, 整数型, 可空, 创建定时器时指定的句柄
.参数 标志, 整数型, , 创建定时器时所返回的标志



.子程序 信息框提示, 整数型, , 弹出一个信息框(返回用户操作信息)(同 系统核心支持库功能"信息框")
.参数 句柄, 整数型, 可空, 信息框父窗口句柄 可空为系统信息框
.参数 内容, 文本型, 可空, 信息框内容 可空为无内容
.参数 标题, 文本型, 可空, 信息框标题 默认为:错误
.参数 按钮, 整数型, 可空, 信息框按钮 可空为确定钮 (同 系统核心支持库功能"信息框")



.子程序 特效_窗口抖动, 空白型, , 模仿QQ抖动窗口效果(无返回值)
.参数 临时句柄, 整数型, , 欲移动窗口的句柄
.参数 抖动次数, 整数型, 可空, 最低抖动次数为3,低于这个值则为3
.参数 抖动速度, 整数型, 可空, 最低抖动速度为10,低于这个值则为10



.子程序 特效_模仿QQ隐藏窗口, 逻辑型, , 模仿QQ隐藏窗口效果(不支持多个窗口)特效已经开启:返回真 特效成功关闭:返回假
.参数 窗口句柄, 整数型, 可空, 欲产生效果的窗口(可空:则去掉特效! 注:销毁窗口前请卸载特效功能!)
.参数 露出, 整数型, 可空, 默认为露出3像素,如果小于1则为默认值(单位像素)



.子程序 文件夹浏览, 文本型, , 浏览文件夹内支持创建文件夹 支持显示文件 编辑框 (返回被选择文件或文件夹路径)
.参数 标题, 文本型, 可空, 设置标题
.参数 显示文件, 逻辑型, 可空, 默认为假。
.参数 初始目录, 文本型, 可空, 设置一个初始目录,默认为我的电脑
.参数 地址栏, 逻辑型, 可空, 是否包含编辑框,可编辑,默认为假
.参数 新样式, 逻辑型, 可空, 有新建按钮及右键菜单,默认为真



.子程序 窗口禁止关闭, 逻辑型, , 控制窗口关闭按钮,(允许/禁止)关闭窗口 (成功返回真,失败返回假)
.参数 窗口句柄, 整数型, , 欲禁止或解除禁止的窗口句柄
.参数 禁止关闭, 逻辑型, 可空, 可空为禁止关闭, 假:允许关闭, 真:禁止关闭



.子程序 腾讯_QQ是否在线, 逻辑型, , 判断指定QQ在线状态(在线:返回真.否则返回假) 
.参数 QQ号, 文本型, , 欲判断的QQ号码



.子程序 腾讯_QQ密码转换MD5, 文本型, , 将QQ密码转换为MD5密码
.参数 QQ密码, 文本型, , 



.子程序 腾讯_取QQ路径, 文本型, , 取QQ.exe路径,失败返回空文本


.子程序 腾讯_取QQ目录路径, 文本型, , 取QQ安装目录路径,失败返回空文本


.子程序 腾讯_取QQ号码, 整数型, , 取本机的QQ号码(返回QQ号码数量,找不到QQ号返回0)
.参数 QQ号码数组, 文本型, 数组, 取出来滴QQ号码数组
.参数 全部号码, 逻辑型, 可空, 默认为假:取使用中的所有QQ号码  真:取本机所使用过的所有QQ号码



.子程序 腾讯_查找QQ号码, 文本型, , 
.参数 进程ID, 整数型, , 



.子程序 腾讯_取所有QQ号码, 逻辑型, , 取本机使用过的QQ号码
.参数 QQ号码数组, 文本型, 数组, 



.子程序 腾讯_转换为号码, 长整数型, , 
.参数 号码, 字节集, , 



.子程序 腾讯_创建QQ迷你门户快捷方式, 逻辑型, , (详情访问:QQ迷你门户网)
.参数 保存路径, 文本型, , 保存全路径文件名 (路径+文件名,无需后缀)
.参数 门户号, 文本型, , 迷你门户号.(如:29961)



.子程序 腾讯_创建QQ在线交谈快捷方式, 逻辑型, , QQ交谈快捷方式.(此快捷方式为腾讯QQ专用,不会占用网页!直接打开聊天窗口)
.参数 保存路径, 文本型, , 保存全路径文件名 (路径+文件名,无需后缀)
.参数 QQ号, 文本型, , QQ/TM号码
.参数 网站名称, 文本型, 可空, 留言的网站名称



.子程序 腾讯_创建QQ快速登陆快捷方式, 逻辑型, , 通过此快捷方式可以不必再输入QQ号与QQ密码.直接登陆QQ.其中的QQ密码经过MD5加密处理
.参数 保存路径, 文本型, , 保存快捷方式的全路径文件名
.参数 QQ路径, 文本型, 可空, 可空:取注册表QQ路径
.参数 QQ号, 文本型, , 
.参数 QQ密码, 文本型, , 
.参数 是否隐身, 逻辑型, 可空, 可空为假:正常登陆 真:隐身登陆



.子程序 腾讯_QQ强行聊天, 空白型, , 直接打开聊天窗口,不占用网页
.参数 QQ号码, 文本型, , 对方的QQ号码
.参数 网站名称, 文本型, 可空, 留言的网站名称



.子程序 特效_窗口漂移, 空白型, , 
.参数 窗口句柄, 整数型, , 



.子程序 鼠标穿透, 空白型, , 穿透鼠标键
.参数 窗口句柄, 整数型, , 



.子程序 进程_禁止创建进程, 空白型, , 


.子程序 进程_允许创建进程, 空白型, , 


.子程序 强力结束进程, 逻辑型, , 
.参数 hProcess, 整数型, , 
.参数 ExitStatus, 整数型, , 0



.子程序 强力打开进程, 整数型, , 
.参数 dwDesiredAccess, 整数型, , 
.参数 bInhert, 逻辑型, , 
.参数 ProcessId, 整数型, , 



.子程序 鼠标俘获, 空白型, , 


.子程序 释放鼠标, 空白型, , 


.子程序 DLL_注入DLL, 整数型, , 成功返回0,失败返回负值.
.参数 目标进程ID, 整数型, , 即PID
.参数 DLL文件全名, 文本型, , 不含路径,含扩展名,如:MyDLL.dll
.参数 DLL装载路径, 文本型, , 不含名称,如:C:\WINDOWS\SYSTEM32\
.参数 DLL函数名, 文本型, , 子程序的实际名称即可,文本型,区分大小写
.参数 隐藏错误信息, 逻辑型, 可空, 是否在出错时自动调用错误信息框



.子程序 DLL_卸载DLL, 整数型, , Uninst-DLL,成功返回0,失败返回负值
.参数 目标进程ID, 整数型, , 即PID
.参数 DLL文件全名, 文本型, , 不含路径,含扩展名,如:MyDLL.dll
.参数 DLL装载路径, 文本型, , 不含名称,如:C:\WINDOWS\SYSTEM32\
.参数 隐藏错误信息, 逻辑型, 可空, 是否在出错时自动调用错误信息框,若为真则不调用



.子程序 内存清零杀进程, 空白型, , 内存清零杀进程
.参数 进程名, 文本型, , 



.子程序 热键_注册热键, 整数型, , 返回热键ID
.参数 窗口句柄, 整数型, , 
.参数 功能键, 整数型, , 
.参数 主热键, 整数型, , 
.参数 响应子程序, 子程序指针, , 



.子程序 热键_卸载热键, 整数型, , 
.参数 热键ID, 整数型, 可空, 卸载全部热键时此功能无效
.参数 卸载全部, 逻辑型, 可空, 



.子程序 启动线程, 逻辑型, , 
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程句柄, 整数型, 参考 可空, 



.子程序 多线程_创建进入许可证, 多线程许可证_C, , 


.子程序 多线程_删除进入许可证, 空白型, , 
.参数 进入许可证, 多线程许可证_C, , 



.子程序 多线程_进入许可区, 空白型, , 
.参数 进入许可证, 多线程许可证_C, , 



.子程序 多线程_退出许可区, 空白型, , 
.参数 进入许可证, 多线程许可证_C, , 



.子程序 多线程_等待线程, 逻辑型, , 
.参数 线程句柄, 整数型, , 
.参数 等待时间, 整数型, 可空, 单位为毫秒，0和-1表示无限等待



.子程序 多线程_挂起线程, 逻辑型, , 
.参数 线程句柄, 整数型, , 



.子程序 多线程_继续执行, 空白型, , 继续运行被挂起的线程
.参数 线程句柄, 整数型, , 



.子程序 多线程_取线程返回值, 整数型, , 使用前请保证线程已经运行完毕，如线程尚未中断将返回STILL_ACTIVE(值为259)。子程序返回值为其他数据类型将返回指针。
.参数 线程句柄, 整数型, , 



.子程序 多线程_强制结束线程, 逻辑型, , 
.参数 线程句柄, 整数型, , 



.子程序 多线程_关闭线程句柄, 逻辑型, , 
.参数 线程句柄, 整数型, , 



.子程序 内存_读整数内存, 整数型, , 读取整数型数据(返回整数内容 失败返回0)
.参数 进程句柄, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认四字节  1=字节  2=二字节 4=四字节
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_读小数内存, 小数型, , 读取小数型数据(返回整数内容 失败返回0)
.参数 进程句柄, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_读文本内存, 文本型, , 读取文本型数据(返回文本 失败返回空文本)
.参数 进程句柄, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认为20 欲读取的长度字节
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_读宽文本内存, 文本型, , 读取文本型数据(返回文本 失败返回空文本)
.参数 进程句柄, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认为20 欲读取的长度字节
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_读字节集内存, 字节集, , 读取字节集数据(返回整数内容 失败返回0)
.参数 进程句柄, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 长度, 整数型, 可空, 默认为20
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_写整数内存, 整数型, , 写入整数数据
.参数 进程句柄, 整数型, , 进程ID
.参数 内存地址, 整数型, , 内存地址
.参数 写入数据, 整数型, , 写入数据
.参数 写入长度, 整数型, 可空, 默认四字节  1=字节  2=二字节 4=四字节
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_写字节集内存, 整数型, , 写入字节集数据
.参数 进程句柄, 整数型, , 进程ID
.参数 内存地址, 整数型, , 内存地址
.参数 写入数据, 字节集, , 写入数据
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_写文本内存, 整数型, , 写入文本型数据
.参数 进程句柄, 整数型, , 进程ID
.参数 内存地址, 整数型, , 内存地址
.参数 写入数据, 文本型, , 写入数据
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_写小数内存, 整数型, , 写入小数型数据
.参数 进程句柄, 整数型, , 进程ID
.参数 内存地址, 整数型, , 内存地址
.参数 写入数据, 小数型, , 写入数据
.参数 偏移量, 整数型, 可空 数组, 



.子程序 内存_打开进程, 整数型, , 获取进程操作句柄
.参数 进程ID, 整数型, , 指定进程ID



.子程序 内存_关闭句柄, 整数型, , 关闭已经打开的操作句柄
.参数 操作句柄, 整数型, , 进程句柄,线程句柄.等



.子程序 FTP_连接FTP服务器, 逻辑型, , 
.参数 FTP服务器地址, 文本型, , 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 端口号, 整数型, 可空, 
.参数 是否使用被动语义, 逻辑型, 可空, 



.子程序 FTP_断开FTP服务器, 空白型, , 


.子程序 FTP文件下载, 逻辑型, , 
.参数 欲下载的FTP文件, 文本型, , 
.参数 本地文件名, 文本型, , 
.参数 是否使用ASCII码方式, 逻辑型, 可空, 



.子程序 FTP文件上传, 逻辑型, , 
.参数 欲上传的本地文件, 文本型, , 
.参数 FTP文件路径, 文本型, , 
.参数 是否使用ASCII码方式, 逻辑型, 可空, 



.子程序 FTP删除文件, 逻辑型, , 
.参数 欲删除的FTP文件, 文本型, , 



.子程序 FTP文件改名, 逻辑型, , 
.参数 欲改名的FTP文件, 文本型, , 
.参数 新文件名称, 文本型, , 



.子程序 FTP创建目录, 逻辑型, , 
.参数 欲创建的目录名, 文本型, , 



.子程序 FTP删除目录, 逻辑型, , 
.参数 欲删除的目录名, 文本型, , 



.子程序 FTP置现行目录, 逻辑型, , 
.参数 FTP目录路径, 文本型, , 



.子程序 FTP取现行目录, 文本型, , 


.子程序 颜色_查找颜色数, 整数型, , 在指定范围内查找与指定颜色相同的数目(成功返回颜色相同的总数目,失败或未找到返回-1)
.参数 窗口句柄, 整数型, 可空, 可空:在屏幕中的指定范围内查找颜色 | 有数据:在窗口中的指定范围内查找颜色
.参数 左边, 整数型, , 查找范围的左边(在窗口中查找,坐标为窗口客户区内坐标)
.参数 顶边, 整数型, , 查找范围的顶边
.参数 宽度, 整数型, , 查找范围的宽度
.参数 高度, 整数型, , 查找范围的高度
.参数 颜色值, 整数型, , 欲查找的颜色值(10进制颜色)



.子程序 颜色_查找颜色, 整数型, , 在指定范围内查找颜色(成功返回1,失败返回-1)
.参数 窗口句柄, 整数型, 可空, 可空:在屏幕中的指定范围内查找颜色 | 有数据:在窗口中的指定范围内查找颜色
.参数 左边, 整数型, 可空, 可空:为0   查找范围的左边(在窗口中查找,坐标为窗口客户区内坐标)
.参数 顶边, 整数型, 可空, 可空:为0   查找范围的顶边
.参数 宽度, 整数型, , 查找范围的宽度
.参数 高度, 整数型, , 查找范围的高度
.参数 颜色值, 整数型, , 欲查找的颜色值(10进制颜色)
.参数 坐标X, 整数型, 参考, 返回的坐标X(颜色的位置)
.参数 坐标Y, 整数型, 参考, 返回的坐标Y(颜色的位置)



.子程序 颜色_取点颜色, 整数型, , 取窗口中指定点颜色,句柄为空,则取屏幕中.(返回10进制颜色值)
.参数 句柄, 整数型, 可空, 窗口句柄(可空:取屏幕中)
.参数 水平位置, 整数型, , 指定点横坐标
.参数 垂直位置, 整数型, , 指定点纵坐标



.子程序 颜色_取颜色亮度, 整数型, , 取指定颜色的亮度(返回亮度:0-255)
.参数 颜色, 整数型, , 欲取亮度的十进制颜色



.子程序 颜色_取颜色差, 整数型, ,  取两个十进制颜色的颜色差值,返回(颜色差值)
.参数 颜色一, 整数型, , 十进制颜色一
.参数 颜色二, 整数型, , 十进制颜色二
.参数 比较方式, 整数型, 可空, 可空为0:取最大色差  1 取R色差(红)  2 取G色差(绿)  3 取B色差(蓝)  4 取总色差(三差之和)



.子程序 颜色_取颜色RGB, 整数型, , 取指定颜色的RGB单色(返回R色,G色或B色:0-255)
.参数 颜色, 整数型, , 欲取颜色RGB单值的十进制颜色
.参数 RGB类型, 整数型, , 1 取R色  2 取G色  3 取B色



.子程序 字节集查找, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始寻找位置, 整数型, 可空, 可空为1
.参数 误差值, 整数型, 可空, 寻找字节集的误差值(单个字节所允许的与实际的最大差值)



.子程序 取鼠标坐标, 坐标_, , 取当前鼠标所在坐标(返回坐标)
.参数 句柄, 整数型, 可空, 鼠标坐标所在的窗口句柄,取出鼠标所在窗口中的坐标 可空为:在屏幕中的坐标



.子程序 取坐标距离, 整数型, , 返回两坐标点之间的距离
.参数 坐标1, 坐标_, , 
.参数 坐标2, 坐标_, , 



.子程序 winio_开启, 逻辑型, , 使用<winio>功能前必须要先 执行(成功开启返回真 失败返回假)
.参数 是否隐藏dll, 逻辑型, 可空, 可空为假:不隐藏  真:隐藏
.参数 版本号, 整数型, 可空, 可空:0默认为带补丁版本 1原始版本



.子程序 winio_关闭, 空白型, , 使用<winio>后 卸载winio 
.参数 是否清理, 逻辑型, 可空, 默认为假, 真为清理dll文件



.子程序 winio_按键, 空白型, , 模拟按键winio(无返回值)  此功能不会给游戏屏蔽掉,但只能在系统最高权限下运行,独立编译后有效
.参数 键代码, 整数型, , 键代码
.参数 状态, 整数型, 可空, 为空:默认为按键(按下+放开)   3 #按下  4 #放开
.参数 间隔, 整数型, 可空, 可空默认为:50 (毫秒) 按下放开之间的间隔时间 不得小于50



.子程序 winio_按键组合, 空白型, , 模拟组合按键winio
.参数 键代码, 整数型, , 
.参数 功能键码, 整数型, , 
.参数 间隔, 整数型, 可空, 可空默认为:50  (毫秒) 按下放开之间的间隔时间 不得小于50



.子程序 winio_鼠标偏移, 空白型, , 模拟鼠标移动winio(无返回值)坐标不精确! 只能在系统最高权限下运行,必须先开启winio
.参数 横坐标偏移距离, 整数型, , 鼠标横坐标偏移距离(最大偏移距离为: 505   即: -505 至 505 之间)
.参数 纵坐标偏移距离, 整数型, , 鼠标纵坐标偏移距离(最大偏移距离为: 505   即: -505 至 505 之间)



.子程序 winio_鼠标键, 空白型, , 模拟鼠标按键winio(无返回值) 只能在系统最高权限下运行,必须先开启winio
.参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键
.参数 状态, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开



.子程序 置_鼠标动作, 空白型, , 
.参数 鼠标动作, 整数型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 Z, 整数型, 可空, 保留，0



.子程序 置_键盘按键, 空白型, , 
.参数 扫描码, 整数型, , 



.子程序 等待空缓冲, 空白型, , 等待输入缓冲器为空(Wait4IBE)


.子程序 取扫描码, 整数型, , 详细扫描码，请参考《PS/2技术参考》第52页--第1套扫描码
.参数 键代码, 整数型, , 
.参数 是否通码, 逻辑型, , 真--按下（通码），假--放开（断码）。



.子程序 屏幕写字, 逻辑型, , 向指定窗口中写入文字内容(成功:返回 真)
.参数 窗口句柄, 整数型, 可空, 欲写入文字的窗口的句柄   为空则为屏幕
.参数 横坐标X, 整数型, 可空, 写入文字内容的起始位置x横坐标(为空:0)
.参数 纵坐标Y, 整数型, 可空, 写入文字内容的起始位置y纵坐标(为空:0)
.参数 本文内容, 文本型, , 欲写入的文本内容
.参数 字体颜色, 整数型, 可空, 为空则默认为:#红色 
.参数 字体大小, 整数型, 可空, 为空则默认为:16     (字体大小为:像素)    
.参数 字体名称, 文本型, 可空, !为空则默认为:"宋体" 更多字体请查看相关资料!
.参数 是否加粗, 逻辑型, 可空, !为空:不加粗    真:加粗   假:不加粗 
.参数 是否倾斜, 逻辑型, 可空, !为空:不倾斜    真:倾斜   假:不倾斜
.参数 是否下划线, 逻辑型, 可空, !为空:无下划线  真:下划线 假:无下划线



.子程序 注册_创建项, 逻辑型, , 
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , Software\Microsoft\Internet Explorer\Main\



.子程序 注册_写数值, 逻辑型, , 默认为整数 REG_DWORD
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , Software\Microsoft\Internet Explorer\Main\
.参数 键名称, 文本型, , Search Page
.参数 类型, 整数型, 可空, 默认4,REG_NONE = 0,REG_DWORD = 4,REG_DWORD_LITTLE_ENDIAN = 4,REG_DWORD_BIG_ENDIAN = 5
.参数 欲写入值, 整数型, 可空, 空为0,整数型,长度限制9位数
.参数 写入数据长度, 整数型, 可空, 类型为 REG_NONE = 0 时 可设置此参数,默认为16,其他类型无效



.子程序 注册_写字符串, 逻辑型, , 默认为文本 REG_SZ
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , Software\Microsoft\Internet Explorer\Main\
.参数 键名称, 文本型, , Search Page
.参数 类型, 整数型, 可空, REG_SZ = 1,REG_EXPAND_SZ = 2,REG_MULTI_SZ = 7
.参数 欲写入值, 文本型, 可空, about:blank 



.子程序 注册_写字节集, 逻辑型, , 默认为字节集 REG_BINARY 
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , Software\Microsoft\Internet Explorer\Main\
.参数 键名称, 文本型, , test
.参数 欲写入值, 字节集, , REG_BINARY



.子程序 注册_注册项是否存在, 逻辑型, , 
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , 
.参数 键名称, 文本型, 可空, 



.子程序 注册_枚举子项, 整数型, , 成功返回键数量，失败返回-1
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , 
.参数 注册表数据, 注册表数据_E, 参考 可空 数组, "注册表数据.键值" 用 "取字节集数据()" 取出需要的类型



.子程序 注册_读数据, 逻辑型, , 
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , 
.参数 键名称, 文本型, , 
.参数 键值数据, 字节集, 参考, 键值数据用 "取字节集数据()" 取出需要的类型



.子程序 注册_删除数据, 逻辑型, , 
.参数 根目录, 整数型, , 1、#根类,2、#现行设置,3、#现行用户, 4、#本地机器, 5、#所有用户,6、HKEY_PERFORMANCE_DATA,7、HKEY_DYN_DATA
.参数 注册项, 文本型, , 
.参数 键名称, 文本型, 可空, 



.子程序 窗口内运行外程序, 空白型, , 将外部程序运行于本身窗口内,注意：不要运行在“__启动窗口_创建完毕”下，否则无效！ 
.参数 外程序地址, 文本型, , E:/新文件夹
.参数 外程序名称, 文本型, , 123.exe
.参数 离左侧位置, 整数型, 可空, 可空 空为20   离窗口左侧位置  如：100
.参数 离顶部位置, 整数型, 可空, 可空 空为20   离窗口顶部位置  如：100



.子程序 取窗口大小, 空白型, , 取指定窗口句柄的窗口客户区的大小 (无返回值)
.参数 窗口句柄, 整数型, 可空, 可空:则取当前窗口大小
.参数 宽度, 整数型, 参考, 返回的窗口宽度
.参数 高度, 整数型, 参考, 返回的窗口高度



.子程序 图像_取屏幕宽度, 整数型, , 单位为像素。


.子程序 图像_取屏幕高度, 整数型, , 单位为像素。


.子程序 图像_图片句柄取图片, 字节集, , 返回的图片格式为位图。
.参数 hBitmap, 整数型, , 



.子程序 图像_取图片句柄, 整数型, , 支持bmp、gif、jpg、cur、ico等。感谢叮咚茶提供的极强悍源码，没有这个函数整个模块没法做了。。。
.参数 图形数据, 字节集, , 
.参数 输出宽度, 整数型, 可空, 
.参数 输出高度, 整数型, 可空, 



.子程序 图像_释放图片句柄, 逻辑型, , 用了 图像_取图片句柄() 得到的句柄后一定要用本函数释放，不然会造成内存泄露。
.参数 图像句柄, 整数型, , 



.子程序 图像_置图片尺寸, 字节集, , 返回新的图片数据。
.参数 原图片, 字节集, , 
.参数 新宽度, 整数型, 可空, 留空默认保持原大小，下同。
.参数 新高度, 整数型, 可空, 



.子程序 图像_取图片宽度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取图片高度, 整数型, , 支持bmp、gif、jpg、cur、ico等，不支持某些格式的图片(如png)，请先转换为bmp。
.参数 图片, 字节集, , 



.子程序 图像_取剪贴板图片, 字节集, , 


.子程序 图像_置剪贴板图片, 逻辑型, , 
.参数 图片, 字节集, , 



.子程序 图像_快照, 字节集, , 功能与支持库基本相同。
.参数 窗口句柄, 整数型, 可空, 指定欲捕获其显示内容的窗口。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_窗口快照, 字节集, , 能对被其他窗口挡住的未最小化窗口进行截图。
.参数 窗口句柄, 整数型, 可空, 要截取的窗口的句柄。为空则捕捉全屏。
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_截取屏幕区域, 字节集, , 
.参数 截取范围, _矩形区域_, , 
.参数 输出宽度, 整数型, 可空, 指定图片的输出宽度。如果小于0，参数值指定的是最终图片输出宽度相对于所取得图片宽度的百分比；如果等于0，则按图片原宽度输出；如果大于0，指定输出图片的绝对宽度。如果本参数被省略，默认值为0。
.参数 输出高度, 整数型, 可空, 指定图片的输出高度。如果小于0，参数值指定的是最终图片输出高度相对于所取得图片高度的百分比（最小为10%）；如果等于0，则按图片原高度输出；如果大于0，指定输出图片的绝对高度。如果本参数被省略，默认值为0。



.子程序 图像_转换图片格式, 字节集, , 支持bmp、jpg、gif、tiff、png互转。感谢凌晨孤星提供如此强大的代码。。。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换后的格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png



.子程序 特效_窗口标题滚动, 空白型, , 
.参数 窗口, 窗口, , 



.子程序 取CPU使用率, 整数型, , 取CPU使用率


.子程序 刷新托盘图标, 空白型, , 


.子程序 内存数据优化, 空白型, , 


.子程序 等待延时, 空白型, , 
.参数 延时, 整数型, , 



.子程序 启动优化, 逻辑型, , 
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程句柄, 整数型, 参考 可空, 



.子程序 刷新桌面, 逻辑型, , 刷新explorer


.子程序 刷新桌面2, 逻辑型, , 刷新explorer


.子程序 取按键码, 整数型, , 取按键名的按键码(返回按键码)
.参数 按键名, 文本型, , 按键名



.子程序 取按键名, 文本型, , 取按键码的按键名(返回按键名)
.参数 键代码, 整数型, , 按键码



.子程序 热键2_歇息, 逻辑型, , 暂停执行代码。但不影响其他代码的执行。歇息完毕返回真。本命令仅依赖核心库。
.参数 等待时间, 整数型, , 



.子程序 热键2_热键监视, 空白型, , 


.子程序 热键2_取触发代码, 文本型, , 当注册的热键被触发时，本命令可以返回被触发事件的按键代码。当触发事件已被执行完毕时，触发代码将被清空。本命令适合在响应热键的子程序的头部使用。


.子程序 热键2_热键是否已注册, 逻辑型, , 判断指定热键组是否已注册。
.参数 键代码, 文本型, , 若是组合键则各键之间以半角逗号分隔。



.子程序 热键2_刷新热键监视, 空白型, , 本命令旨在解决由于某些特殊情况导致的热键失效问题。


.子程序 热键2_注册超级热键, 逻辑型, , 注册一类热键(本子程序把“任意个任意按键的组合”叫做类按键)。注册成功返回真，否则返回假。不同于以前的热键规则，本命令所登记的组合键是没有任何配对限制的，而且不需要标签反馈，直接执行指定子程序。注册热键后可用“撤销超级热键()”子程序撤销。本子程序所属模块运行时依赖核心库和じ☆ve Hebe支持库。
.参数 键代码, 文本型, , 可以为任意单一键，也可以是任意并联的组合键，若有多个按键即类按键，各个按键的键代码之间以半角逗号分割，如“17,18”。可同时注册多组热键，分别以半角分号分隔，如“17,18;49,46”。
.参数 处理子程序, 子程序指针, 数组, 当指定键或类按键被按下时，本参数所指向的子程序将被执行。若是同时注册多个热键，本数组参数就需要给出对应的执行子程序。如果本参数给出的子程序指针数组不能对应欲注册热键的顺序，则一律默认执行数组中的第一个子程序指针。



.子程序 热键2_撤销超级热键, 逻辑型, , 撤销由“注册超级热键()”子程序创建的热键，成功返回真，失败返回假。
.参数 键代码, 文本型, , 可以同时撤销多个热键组，各热键组分别以半角分号分隔，热键组内各热键以逗号分隔。



.子程序 系统_重建图标缓存, 空白型, , 


.子程序 鼠标隐藏, 空白型, , 


.子程序 鼠标显示, 空白型, , 


.子程序 屏幕写字高效, 空白型, , 
.参数 本文内容, 文本型, , 
.参数 字体颜色, 整数型, 可空, 
.参数 靠左边距离, 整数型, 可空, 
.参数 靠顶部距离, 整数型, 可空, 



.子程序 模拟多级进度条, 空白型, , 
.参数 画板, 画板, , 
.参数 一层最大位置, 整数型, , 
.参数 一层当前位置, 整数型, , 
.参数 一层进度颜色, 整数型, , 
.参数 二层最大位置, 整数型, , 
.参数 二层当前位置, 整数型, , 
.参数 二层进度颜色, 整数型, , 
.参数 显示百分比, 逻辑型, , 



.子程序 模拟多方位进度条, 空白型, , 
.参数 画板, 画板, , 
.参数 最大位置, 整数型, , 
.参数 当前位置, 整数型, , 
.参数 进度类型, 整数型, 可空, 0:从左向右,1:从右向左,2:从上向下,3:从下向上 默认值为:0
.参数 显示百分比, 逻辑型, 可空, 是否在画板中显示 百分比 文本 默认值为:假
.参数 百分比类型, 整数型, 可空, 0:以整数 例(10%),1:以2位小数 例(11.24%) 默认值为:0
.参数 输出百分比, 文本型, 可空, 显示百分比为“假”时，才输出



.子程序 取随机数1, 整数型, , 对比方式实现
.参数 最小值, 整数型, , 
.参数 最大值, 整数型, , 



.子程序 取随机数2, 整数型, , 抽取方式实现
.参数 最小值, 整数型, , 
.参数 最大值, 整数型, , 



.子程序 取网络连接状态, 逻辑型, , 
.参数 连接名称, 文本型, 参考 可空, 
.参数 连接信息, 文本型, 参考 可空, 



.子程序 网络是否连接, 文本型, , 


.子程序 配置_读加密配置项, 文本型, , 读取失败，返回空文本
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 默认文本, 文本型, 可空, 



.子程序 配置_写加密配置项, 逻辑型, , 
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 欲写入值, 文本型, , 不允许写入空值。



.子程序 配置_取加密配置节名, 逻辑型, , 
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名称数组, 文本型, 数组, 保存取出的配置文件节名称数组



.子程序 配置_取加密配置项名, 逻辑型, , 
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 欲取出项目数组的小节名称
.参数 配置项名称数组, 文本型, 数组, 保存取出的配置项名称数组



.子程序 配置_删除加密配置小节, 逻辑型, , 
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 



.子程序 配置_删除加密配置项目, 逻辑型, , 
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 



.子程序 配置_置文件密码, 逻辑型, , 注意，本子程序同样适用于其它任意格式文件的加解密操作！如果在执行本操作时程序被非法中止，将可能导致数据丢失，请用程序自动生成的bak文件手工恢复至原文件。
.参数 配置文件名, 文本型, , 
.参数 原文件密码, 文本型, 可空, 如果原来无密码，则设为“”或保留为空。
.参数 新文件密码, 文本型, 可空, 如果欲取消密码，则设为“”或保留为空。如果新密码等于原密码，将不做任何操作，直接返回真。



.子程序 查询快捷方式, 文本型, , 本命令从指定快捷方式文件中获取该快捷方式所指向的文件路径名，如果该文件不是快捷方式文件或执行失败则返回空文本。
.参数 快捷方式文件名, 文本型, , 如果文件名不包含后缀，将自动加上“.lnk”后缀名。
.参数 读属性类型, 整数型, 可空, 要查询的项目，可以为0.指向路径【默认】；1.工作目录；2.命令行参数；3.备注



.子程序 读HTTP网页, 文本型, , 读取网页源码(返回文本内容)
.参数 完整网址, 文本型, , 欲访问的网络地址



.子程序 访问HTTP网络, 字节集, , 可读取指定网络文件内容(返回读取的字节集内容) "写到文件"可查看其网页内容或得到网络文件
.参数 完整网址, 文本型, , 欲访问的网络地址
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用



.子程序 取网络端口, 整数型, , 
.参数 网址, 文本型, , 



.子程序 取网络页面地址, 文本型, , 
.参数 网址, 文本型, , 



.子程序 设网络COOKIE, 逻辑型, , 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空清除所有
.参数 COOKIE内容, 文本型, 可空, 为空清除
.参数 有效期, 日期时间型, 可空, 为空不保存



.子程序 取网络COOKIE, 文本型, , 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空返回全部COOKIE



.子程序 清除网络COOKIE, 逻辑型, , 
.参数 域名, 文本型, , 



.子程序 取网页链接, 整数型, , 取网页中所有链接.(成功返回链接数,失败返回-1)
.参数 网址, 文本型, , 欲下载的网页的地址,必须为完整的页面网址
.参数 返回链接, 文本型, 参考 数组, 取出来的网页中的所有链接(图片链接,FLASH链接,网页链接等)



.子程序 下载文件, 整数型, , 进度下载HTTP指定文件 断点续传
.参数 远程地址, 文本型, , 要下载的文件远程路径
.参数 保存地址, 文本型, , 要保存到的本地位置
.参数 进度显示, 子程序指针, , 回调函数，参数一为目前下载字节数；参数二为总字节数；参数三为现行下载时间
.参数 起始位置, 整数型, 可空, 开始下载的位置(文件字节集尺寸)。



.子程序 取网络域名, 文本型, , 
.参数 网址, 文本型, , 



.子程序 访问HTTP网页, 字节集, , 超时或读取失败返回空数据
.参数 完整地址, 文本型, , 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。
.参数 读取超时, 整数型, 可空, 超时时间单位为毫秒,1000毫秒=1秒,如果不填写,默认为3秒.



.子程序 全文本替换, 文本型, , 
.参数 具体文本, 文本型, , 
.参数 要替换的文本, 文本型, , 
.参数 被替换的文本, 文本型, , 



.子程序 创建任意目录, 空白型, , 
.参数 目录, 文本型, , 



.子程序 特效_弹力窗口钉钉, 空白型, , 使用方法：  用时钟周期控制 如：时钟1.时钟周期 ＝ 1
.参数 使用特效窗口名字, 窗口, , 如：_启动窗口
.参数 固定窗口横位置X, 整数型, , 
.参数 固定窗口纵位置Y, 整数型, , 



.子程序 防调试_是否被调试, 逻辑型, , 


.子程序 防调试_防进程调试, 空白型, , 


.子程序 防调试_脱离调试器, 空白型, , 


.子程序 防调试_置调试异常, 空白型, , 


.子程序 防调试_置调试陷阱, 空白型, , 


.子程序 防调试_全防模式, 空白型, , 


.子程序 系统_从文件夹ID取PIDL, 整数型, , 
.参数 所有者句柄, 整数型, , 
.参数 文件夹ID, 整数型, , 



.子程序 系统_从PIDL取显示名称, 文本型, , 
.参数 PIDL, 整数型, , 



.子程序 系统_从PIDL取路径, 文本型, , 
.参数 PIDL, 整数型, , 



.子程序 系统_取缓冲区文字, 文本型, , 
.参数 缓冲区文本, 文本型, , 



.子程序 系统_注册Shell监视, 逻辑型, , 
.参数 接收信息窗口句柄, 整数型, , 



.子程序 系统_撤消Shell监视, 逻辑型, , 


.子程序 系统_取监视事件文本, 文本型, , 
.参数 事件索引, 整数型, , 



.子程序 系统_代理收到消息, 整数型, , 
.参数 消息号, 整数型, , 
.参数 消息参数1, 整数型, , 
.参数 消息参数2, 整数型, , 



.子程序 关机对话框, 整数型, , 
.参数 参数, 整数型, , 一般为0



.子程序 最小化窗口, 整数型, , 非0表示成功，0表示失败
.参数 窗口句柄, 整数型, , 



.子程序 十六进制到十进制无符号, 文本型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本



.子程序 十六进制转十进制有符号, 文本型, , StrToIntExA
.参数 转换文本, 文本型, , 



.子程序 取文件属性API, 整数型, , 1、#只读文件； 2、#隐藏文件；  4、#系统文件； 16、#子目录；32、#存档文件 要判断是否设置了某个属性，在返回值与想要得知的属性值之间使用“位与”命令进行比较。如果所得的结果不为零，则表示设置了这个属性值。如果取文件属性失败，将返回 -1。
.参数 文件名, 文本型, , 



.子程序 是否为管理员, 逻辑型, , 


.子程序 播放声音文件, 空白型, , 
.参数 文件路径, 文本型, , 



.子程序 ntdll函数快速关机, 整数型, , 
.参数 关闭方式, 整数型, 可空, 0为关机，1为重起   默认为关机



.子程序 取文件扩展名, 文本型, , 返回扩展名 比如: .exe
.参数 文件路径, 文本型, , 



.子程序 删除扩展名, 文本型, , 比如: C:\Documents and Settings\Administrator\桌面\1.exe  返回C:\Documents and Settings\Administrator\桌面\1
.参数 文件路径, 文本型, ,  得到的文本保存在变量中



.子程序 SetWindowTextA, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 



.子程序 设置窗口标题, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 



.子程序 ShellExecuteA, 整数型, , http://499767144.5d6d.com/bbs.php
.参数 网址, 文本型, 可空, 要打开的网页地址 http://499767144.5d6d.com/bbs.php  如果为空 则打开桌面 



.子程序 打开网址, 整数型, , http://499767144.5d6d.com/bbs.php
.参数 网址, 文本型, 可空, 要打开的网页地址 http://499767144.5d6d.com/bbs.php  如果为空 则该目录



.子程序 取标题文本长度, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 取窗口标题, 文本型, , 
.参数 窗口句柄, 整数型, , 



.子程序 读配置项Dll, 文本型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 默认文本, 文本型, 可空, lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 取配置节名DLL, 文本型, , 
.参数 节名称, 文本型, , lpAppName
.参数 配置项文件名, 文本型, , lpFileName



.子程序 GetPrivateProfileSectionA, 整数型, , 
.参数 节名称, 文本型, , lpAppName
.参数 返回文本, 文本型, , lpReturnedString
.参数 返回文本大小, 整数型, , nSize
.参数 配置项文件名, 文本型, , lpFileName



.子程序 写配置项DLL, 整数型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 欲写入值, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 WritePrivateProfileString, 整数型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 欲写入值, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 GetPrivateProfileStringA, 文本型, , 
.参数 节名称, 文本型, , lpApplicationName  String，要在其中写入新字串的小节名称。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写  Any，要设置的项名或条目名。这个字串不区分大小写。用vbNullString可删除这个小节的所有设置项
.参数 默认文本, 文本型, 可空, lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 初始化配置项, 整数型, , 
.参数 节名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 WritePrivateProfileSectionA, 整数型, , 
.参数 节名称, 文本型, , lpAppName，要设置的小节。这个字串不区分大小写
.参数 配置项名称, 文本型, , lpString，项和值字串的一个列表。
.参数 配置项文件名, 文本型, , lpFileName，初始化文件的名字。



.子程序 信息框MessageBox, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 窗口标题, 文本型, 可空, 
.参数 按钮值, 整数型, 可空, 



.子程序 MessageBoxA, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 窗口标题, 文本型, 可空, 
.参数 按钮值, 整数型, 可空, 



.子程序 系统_信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 窗口标题, 文本型, 可空, 
.参数 按钮值, 整数型, 可空, 



.子程序 MessageBoxW, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 窗口标题, 文本型, 可空, 
.参数 按钮值, 整数型, 可空, 



.子程序 取文本内容长度, 整数型, , 返回文本长度
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据。



.子程序 复制字符串, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 文本复制, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 lstrlenA, 整数型, , 返回文本长度
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据。



.子程序 lstrcpyA, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 lstrcatA, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 lstrlen, 整数型, , 返回文本长度
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据。



.子程序 lstrcpy, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 lstrcat, 整数型, , 
.参数 赋值的字符串, 文本型, , 
.参数 被赋值的字符串, 文本型, , 



.子程序 退出进程, 整数型, , ExitProcess
.参数 进程句柄, 整数型, , 



.子程序 目录是否为空, 整数型, , 是返回非0，不存在或不是空目录返回0
.参数 路径文本, 文本型, , 



.子程序 取当前目录DLL, 文本型, , 


.子程序 GetCurrentDirectoryA, 文本型, , 


.子程序 取得Win目录, 文本型, , 


.子程序 GetWindowsDirectoryA, 文本型, , 


.子程序 取计算机名, 文本型, , 


.子程序 GetComputerNameA, 文本型, , 


.子程序 取系统目录, 文本型, , 
.参数 欲获取目录类型, 整数型, , 



.子程序 取特定目录DLL, 文本型, , 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]
.参数 欲获取目录类型, 整数型, 可空, 默认为 0为桌面



.子程序 取桌面目录, 文本型, , SHGetSpecialFolderPathA


.子程序 SHGetSpecialFolderPathA, 文本型, , 
.参数 欲获取目录类型, 整数型, , 



.子程序 取system32目录, 文本型, , 


.子程序 GetSystemDirectoryA, 文本型, , 


.子程序 取临时目录, 文本型, , 


.子程序 GetTempPathA, 文本型, , 


.子程序 鼠标左右键交换, 整数型, , 
.参数 是否交换, 逻辑型, , 真为交换  假为还原  默认为真



.子程序 SwapMouseButton, 整数型, , 
.参数 是否交换, 逻辑型, , 真为交换  假为还原  默认为真



.子程序 取屏幕句柄, 整数型, , 


.子程序 删除文件DLL, 逻辑型, , 成功则返回真 失败则返回假
.参数 欲删除的文件名, 文本型, , 



.子程序 DeleteFile, 逻辑型, , 成功则返回真 失败则返回假
.参数 欲删除的文件名, 文本型, , 



.子程序 建立模板目录, 逻辑型, , 成功则返回真 失败则返回假
.参数 模板目录, 文本型, , 
.参数 新目录名称, 文本型, , 



.子程序 CreateDirectoryExA, 逻辑型, , 成功则返回真 失败则返回假
.参数 模板目录, 文本型, , 
.参数 新目录名称, 文本型, , 



.子程序 创建目录DLL, 逻辑型, , 成功返回真 失败返回假
.参数 路径, 文本型, , pszPath



.子程序 SHCreateDirectoryExA, 逻辑型, , 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , hwnd
.参数 路径, 文本型, , pszPath



.子程序 删除目录DLL, 逻辑型, , 成功返回真 失败返回假  在调用这个函数前，目录必须为空  
.参数 目录名, 文本型, , 欲删除的目录



.子程序 RemoveDirectoryA, 逻辑型, , 成功返回真 失败返回假   在调用这个函数前，目录必须为空  
.参数 目录名, 文本型, , 欲删除的目录



.子程序 添加新分区, 空白型, , 
.参数 新区名, 文本型, , 比如:  H:  (少男少女论坛欢迎你)
.参数 创建虚拟新区的目录, 文本型, , 当你选择3时，一定要为空



.子程序 删除分区, 空白型, , 
.参数 删除的区名, 文本型, , 比如:  H:  (少男少女论坛欢迎你)



.子程序 DefineDosDeviceA, 空白型, , 
.参数 类型, 整数型, , 0 为创建   3 为删除
.参数 新区名, 文本型, , 比如:  H:  (少男少女论坛欢迎你)
.参数 创建虚拟新区的目录, 文本型, , 当你选择3时，一定要为空



.子程序 about, 整数型, , ,调用系统关于窗口
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 
.参数 说明, 文本型, , 
.参数 图标句柄, 整数型, , 比如 _启动窗口.发送信息 (127, 1, 0) ExtractIconA (取窗口句柄 (), 取执行文件名 (), 0) 发送消息DLL (取窗口句柄 (), 127, 0, 0)



.子程序 ShellAboutA, 整数型, , ,调用系统关于窗口
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 
.参数 说明, 文本型, , 
.参数 图标句柄, 整数型, , 比如 _启动窗口.发送信息 (127, 1, 0)



.子程序 调用系统关于窗口, 整数型, , ,调用系统关于窗口
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 
.参数 说明, 文本型, , 
.参数 图标句柄, 整数型, , 比如 _启动窗口.发送信息 (127, 1, 0)



.子程序 取鼠标水平位置DLL, 整数型, , 


.子程序 取鼠标垂直位置DLL, 整数型, , 


.子程序 取鼠标所在窗口句柄DLL, 整数型, , 返回鼠标处的窗口句柄


.子程序 WindowFromPoint, 整数型, , 返回鼠标处的窗口句柄


.子程序 取指定点窗口句柄, 整数型, , 返回鼠标处的窗口句柄
.参数 横坐标, 整数型, , xPoint，x点值
.参数 纵坐标, 整数型, , yPoint，y点值



.子程序 取进程版本, 整数型, , 返回版本信息
.参数 进程标识符ProcessId, 整数型, 可空, 



.子程序 取前台窗口句柄, 整数型, , 返回窗口句柄


.子程序 GetForegroundWindow, 整数型, , 返回窗口句柄


.子程序 取得当前活动窗口句柄, 整数型, , 返回窗口句柄


.子程序 窗口置顶, 整数型, , 
.参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄



.子程序 BringWindowToTop, 整数型, , 
.参数 窗口句柄, 整数型, , hwnd,欲带至顶部的那个窗口的句柄



.子程序 运行WinExec, 逻辑型, , 成功则返回33  失败返回2
.参数 欲运行的命令行, 文本型, , 欲运行的文件名
.参数 被运行程序窗口显示方式, 整数型, 可空, 参数值可以为以下常量之一：1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活。如果省略本参数，默认为“普通激活”方式。



.子程序 WinExec, 逻辑型, , 成功则返回33  失败返回2
.参数 欲运行的命令行, 文本型, , 欲运行的文件名
.参数 被运行程序窗口显示方式, 整数型, 可空, 参数值可以为以下常量之一：1、#隐藏窗口； 2、#普通激活； 3、#最小化激活； 4、#最大化激活； 5、#普通不激活； 6、#最小化不激活。如果省略本参数，默认为“普通激活”方式。



.子程序 提取文件图标, 整数型, , 判断一个可执行文件或DLL中是否有图标存在，并将其提取出来  返回图标句柄
.参数 程序句柄, 整数型, , hInst,当前应用程序的实例句柄
.参数 文件名, 文本型, , lpszExeFileName,在其中提取图标的那个程序的全名
.参数 图标索引, 整数型, , nIconIndex,欲获取的图标的索引



.子程序 ExtractIconA, 整数型, , 判断一个可执行文件或DLL中是否有图标存在，并将其提取出来  返回图标句柄
.参数 程序句柄, 整数型, , hInst,当前应用程序的实例句柄
.参数 文件名, 文本型, , lpszExeFileName,在其中提取图标的那个程序的全名
.参数 图标索引, 整数型, , nIconIndex,欲获取的图标的索引



.子程序 清空回收站, 整数型, , 
.参数 窗口句柄, 整数型, , hwnd  
.参数 根路径, 文本型, , pszRootPath  可以为整数     如果类型是文本设置为空即可  如果类型是整数 填写0即可
.参数 标志, 整数型, 可空, dwFlags  表示为0则提示是否清空回收站 7则不提示直接清空回收站  默认为0



.子程序 SHEmptyRecycleBinA, 整数型, , 
.参数 窗口句柄, 整数型, , hwnd  
.参数 根路径, 文本型, , pszRootPath  可以为整数     如果类型是文本设置为空即可  如果类型是整数 填写0即可
.参数 标志, 整数型, 可空, dwFlags  表示为0则提示是否清空回收站 7则不提示直接清空回收站  默认为0



.子程序 获取指定窗口句柄, 整数型, ,  参数填写正确的话返回窗口句柄
.参数 窗口类名, 文本型, , lpClassName，参见相关帮助
.参数 窗口文本, 文本型, , lpWindowName，参见相关帮助



.子程序 FindWindowA, 整数型, ,  参数填写正确的话返回窗口句柄
.参数 窗口类名, 文本型, , lpClassName，参见相关帮助
.参数 窗口文本, 文本型, , lpWindowName，参见相关帮助



.子程序 关闭任务管理器, 空白型, , 关闭任务管理器
.参数 任务管理器窗口文本, 文本型, 可空, 中文版的为:   Windows 任务管理器



.子程序 关闭指定窗口DLL, 空白型, , 关闭任务管理器
.参数 窗口类名, 文本型, , 
.参数 窗口文本, 文本型, , 



.子程序 清除剪辑板DLL, 整数型, , 清除当前 Windows 系统剪辑板中的所有数据 由打开 清除 关闭组成
.参数 窗口句柄, 整数型, , 



.子程序 EmptyClipboard, 整数型, , 清除当前 Windows 系统剪辑板中的所有数据  由打开 清除 关闭组成
.参数 窗口句柄, 整数型, , 



.子程序 恢复窗口, 整数型, , 恢复被最小化或最大化的窗口
.参数 窗口句柄, 整数型, , hwnd，窗口句柄



.子程序 OpenIcon, 整数型, , 恢复被最小化或最大化的窗口
.参数 窗口句柄, 整数型, , hwnd，窗口句柄



.子程序 打开剪贴板, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 OpenClipboard, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 关闭剪辑板, 整数型, , 


.子程序 CloseClipboard, 整数型, , 


.子程序 启动Internet控制面板, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 LaunchInternetControlPanel, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 启动连接对话框, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 LaunchConnectionDialog, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 启动安全对话框, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent
.参数 保留参数, 整数型, , 一般为0



.子程序 LaunchSecurityDialog, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent
.参数 保留参数, 整数型, , 一般为0



.子程序 启动证书对话框, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 LaunchSiteCertDialog, 整数型, , 
.参数 父窗口句柄, 整数型, , hwndParent



.子程序 取窗口类名, 文本型, , 返回窗口类名
.参数 窗口句柄, 整数型, , 



.子程序 GetClassNameA, 文本型, , 返回窗口类名
.参数 窗口句柄, 整数型, , 



.子程序 寻找子窗口句柄, 整数型, , 返回查找到的句柄值
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
.参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"



.子程序 获取子窗口句柄, 整数型, , 返回查找到的句柄值
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
.参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"



.子程序 FindWindowExA, 整数型, , 返回查找到的句柄值
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, , 一般可以设置为0     从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。 零表示忽略 易语言代码: 字符(0)
.参数 欲搜索的类名2, 文本型, , 指向一个指定了窗口名（窗口标题）的空结束字符串 "按钮"



.子程序 播放系统声音, 逻辑型, , 成功返回真 失败返回假
.参数 声音常量, 整数型, 可空, wType,参见相关帮助    16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标



.子程序 系统声音, 逻辑型, , 成功返回真 失败返回假
.参数 声音常量, 整数型, 可空, wType,参见相关帮助    16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标



.子程序 设置鼠标坐标, 整数型, , 非零表示成功，零表示失败
.参数 水平位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的水平位置
.参数 垂直位置, 整数型, 可空, 鼠标指针在屏幕像素坐标系统中的垂直位置



.子程序 延迟时间秒, 整数型, , sleep
.参数 延迟秒数, 整数型, , 1代表1秒



.子程序 窗口是否可见返回逻辑, 逻辑型, , 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , 



.子程序 显示隐藏鼠标DLL, 整数型, , 控制鼠标指针的可视性   当设为显示鼠标返回值为正数相加 0 1 2 3 4.....       当设为隐藏鼠标 返回值为负数相减 -1 -2 -3 -4 .....
.参数 标示符, 逻辑型, , 真为显示 假为隐藏



.子程序 激活灰色按钮和窗体, 空白型, , 
.参数 句柄, 整数型, , 



.子程序 运行到焦点, 空白型, , explorer.exe的命令行参数
.参数 文件名, 文本型, , 



.子程序 执行到指定位置, 空白型, , explorer.exe的命令行参数
.参数 文件名, 文本型, , 



.子程序 Explorer打开, 空白型, , 
.参数 文件名, 文本型, 可空, 如果为空的话 Explorer”，可以按“资源管理器”方式打开“我的文档”;
.参数 参数, 整数型, 可空, 0. Explorer /n  1.Explorer /e 2.Explorer /select 3.Explorer /root



.子程序 是否为调试版DLL, 逻辑型, , IsDebuggerPresent 为真则当前进程正在调试器的描述表中运行否则  当前进程没有在调试器的描述表中运行 IsDebuggerPresent


.子程序 文件是否存在属性法, 逻辑型, , 成功返回真 失败返回假
.参数 文件名, 文本型, , 



.子程序 检查Internet连接, 逻辑型, , 成功返回真 InternetCheckConnectionA
.参数 Url地址, 文本型, 可空, http://499767144.5d6d.com/bbs.php



.子程序 改变系统编辑框, 整数型, , SHAutoComplete   '较大缓存时有效
.参数 编辑框句柄, 整数型, , hwndEdit 可以是外部句柄
.参数 标志, 整数型, 可空, dwFlags  一般为2



.子程序 是否输入的是十六进值, 逻辑型, , 成功则输入的O到9  A到F的值 失败则为其它值  判断方法：只能判断前面文本(第一位)输入的数值是不是其它值
.参数 文本, 文本型, , 



.子程序 是否输入的是数值, 逻辑型, , 成功则真 失败则假 判断方法：只能判断前面文本(第一位)输入的数值是不是其它值
.参数 文本, 文本型, , 



.子程序 延迟时间秒扩展, 整数型, , SleepEx 
.参数 延迟时间, 整数型, 可空, 1为5秒 2.为十秒 以此类推



.子程序 更改文件名的扩展名, 文本型, , PathRenameExtensionA  返回转换的文本
.参数 文件名, 文本型, , pszPath  第一个参数，提供全路径文件名变量。  比如:c:\windows\system32\user32.txt
.参数 扩展名, 文本型, , pszExt  ' 第二个参数，提供更改后的扩展名。比如: .dll



.子程序 删除路径文件名, 文本型, , PathRemoveFileSpecA   返回转换的文本  如："c:\windows\boot.ini"返回"c:\windows"
.参数 路径文本, 文本型, , pszPath



.子程序 取路径文件名, 文本型, , PathFindFileNameA 返回取得的文件名  比如 c:\1.txt  返回的是 1.txt
.参数 路径文本, 文本型, , pszPath



.子程序 文件名删除后缀, 文本型, , 返回文本 比如:文件名为1.txt 返回的文本为1
.参数 文件名, 文本型, , 



.子程序 取路径文件名删除后缀, 文本型, , PathFindFileNameA 返回取得的文件名  比如 c:\1.txt  返回的是 1
.参数 路径文本, 文本型, , pszPath



.子程序 取根路径后文本, 文本型, ,  PathFindNextComponentA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
.参数 路径文本, 文本型, , pszPath



.子程序 删除路径根目录, 文本型, ,  PathSkipRootA的作用是删除路径文本串的驱动器部分。        如："c:\windows\system32\user32.dll"返回"windows\system32\user32.dll"  与删除路径根目录(PathSkipRootA)       取根路径后文本(PathFindNextComponentA) 功能基本相似
.参数 路径文本, 文本型, , pszPath



.子程序 字节集到十六进制文本, 文本型, , 将字节集用16进制表示
.参数 字节集, 字节集, , 



.子程序 十六进制文本到字节集, 字节集, , 将一串十六进制文本还原为字节集
.参数 文本, 文本型, , 



.子程序 十六进制文本到内存地址整数, 整数型, , 比如:0040346C 返回  4207724
.参数 内存地址, 文本型, , 



.子程序 写内存字节集, 整数型, , WriteProcessMemory写内存 失败返回0 返回值
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄
.参数 内存地址, 整数型, , lpBaseAddress,内存地址
.参数 写入数据, 字节集, , lpBuffer, 数据指针
.参数 数据的长度, 整数型, , nSize,长度   取字节集长度 (数据)
.参数 实际数据的长度, 整数型, , lpNumberOfBytesWritten实际写出长度  一般填写WriteProcessMemory 返回值



.子程序 打开进程, 整数型, , , OpenProcess将句柄返回给过程对象  如执行成功，返回进程句柄；零表示失败
.参数 进程对象, 整数型, , dwDesiredAccess 常量 PROCESS_ALL_ACCESS: 2035711 最大权限  1024  16  当设置为1024 16 不能对内存写入 
.参数 继承句柄, 整数型, , bInheritHandle  一般可以填写0  
.参数 进程标识符, 整数型, , dwProcessId



.子程序 内存清零, 空白型, , RtlZeroMemory
.参数 目的内存, 文本型, , Destination
.参数 长度, 整数型, , Length



.子程序 取空格前文本, 文本型, , PathRemoveArgsA 比如:1111 66666666  返回1111
.参数 文本, 文本型, , 



.子程序 删文本首尾空, 文本型, , PathRemoveBlanksA 比如:" 123456 "  返回"123456"
.参数 文本, 文本型, , 



.子程序 俘获鼠标, 整数型, , SetCapture
.参数 窗口句柄, 整数型, 参考, 



.子程序 释放鼠标DLL, 整数型, , ReleaseCapture


.子程序 关闭进程句柄, 整数型, , CloseHandle 关闭进程句柄
.参数 进程句柄, 整数型, , 



.子程序 创建进程, 整数型, , 
.参数 要执行的程序名, 文本型, , lpApplicationName，参见相关帮助  
.参数 要执行的命令行, 文本型, , lpCommandLine，参见相关帮助  一般填写为空
.参数 安全特性参数1, 整数型, , lpProcessAttributes，参见相关帮助  一般填写为0
.参数 安全特性参数2, 整数型, , lpThreadAttributes，参见相关帮助  一般填写为0
.参数 允许新进程继承当前进程的句柄, 逻辑型, , bInheritHandles，参见相关帮助   一般填写 假
.参数 参数1, 整数型, , dwCreationFlags，赋0即可  一般填写为0
.参数 环境指针, 文本型, , lpEnvironment，赋0即可    一般填写为空
.参数 新进程当前目录路径, 整数型, , lpCurrentDriectory，参见相关帮助   一般填写为0
.参数 创建进程时附加信息, 启动信息数据, , lpStartupInfo，创建进程时附加信息
.参数 新进程的进程和线程标识符, 创建进程返回数据类型, , lpProcessInformation，参见相关帮助



.子程序 写内存十六进制路径名, 逻辑型, , 成功返回真 失败返回假
.参数 完整的路径名, 文本型, , 完整的路径名 比如:c:\1.exe
.参数 地址, 文本型, , 例子:地址:0049500B
.参数 修改指令, 文本型, , 例子 修改指令:9090



.子程序 锁定窗口, 整数型, , LockWindowUpdate 锁定指定窗口，禁止它更新。同时只能有一个窗口处于锁定状态
.参数 窗口句柄, 整数型, , hwndLock,欲锁定窗口的句柄。如设为零，则对窗口解锁



.子程序 改变窗口, 整数型, , MoveWindow
.参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
.参数 左侧位置, 整数型, , x，窗口新的左侧位置
.参数 顶部位置, 整数型, , y，窗口新的顶部位置
.参数 新宽度, 整数型, , nWidth，窗口的新宽度
.参数 新高度, 整数型, , nHeight，窗口的新高度
.参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）



.子程序 移动文件DLL, 整数型, , , MoveFileA,移动文件
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 



.子程序 取函数地址, 整数型, , GetProcAddress 返回函数地址
.参数 模块句柄, 整数型, , 
.参数 函数名, 文本型, , MessageBoxA



.子程序 取模块句柄, 整数型, , GetModuleHandleA获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
.参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD; User32.dll



.子程序 取函数句柄增强, 整数型, , 返回函数地址
.参数 模块名, 文本型, , 例:User32.dll
.参数 函数名, 文本型, , 例:MessageBoxA



.子程序 取模块句柄增强, 整数型, , 返回函数地址
.参数 模块名, 文本型, , 例:User32.dll
.参数 函数名, 文本型, , 例:MessageBoxA



.子程序 数值到格式化字节扩展, 文本型, , StrFormatByteSize64A  比如:1024 返回 1.0KB
.参数 字节大小, 长整数型, , 比如:1024



.子程序 文本连接, 文本型, , StrCatBuffA
.参数 文本1, 文本型, , 
.参数 文本2, 文本型, , 



.子程序 键盘和鼠标锁定, 整数型, , BlockInput
.参数 是否锁定, 整数型, , fBlock 1.锁定，0.解除



.子程序 取当前进程标识符, 整数型, , 获取当前进程一个唯一的标识符 GetCurrentProcessId 


.子程序 取创建32位帮助工具快照, 整数型, , 取进程信息 CreateToolhelp32Snapshot  返回快照句柄
.参数 标志, 整数型, , lFlags  一般填写8即可
.参数 进程标识符, 整数型, , lProcessID



.子程序 寻找第一个32位模块, 整数型, , Module32First  返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 模块地址_, 参考, uProcess



.子程序 寻找下一个32位模块, 整数型, , Module32Next 返回模块数目
.参数 快照句柄, 整数型, , hSnapshot
.参数 模块进程结构, 模块地址_, 参考, uProcess



.子程序 取执行文件名DLL, 文本型, , 于易语言自带的命令基本相同


.子程序 取执行文件路径DLL, 文本型, , 返回所在路径的文本 比如:C:\Documents and Settings\Administrator\桌面\例子.exe


.子程序 数值到格式化字节, 文本型, ,  比如:1024 返回 1.0KB
.参数 数值, 整数型, , dw



.子程序 写内存十六进制进程句柄, 逻辑型, , 成功返回真 失败返回假
.参数 进程句柄, 整数型, , 例子:进程句柄:168
.参数 地址, 文本型, , 例子:地址:0049500B
.参数 修改指令, 文本型, , 例子 修改指令:9090



.子程序 创建进程增强, 整数型, , 返回进程句柄
.参数 要执行的程序名, 文本型, , lpApplicationName，参见相关帮助  



.子程序 最小化所有窗口win加D, 空白型, , keybd_event 调用API 模拟按键 win+d     


.子程序 模拟键盘行动, 整数型, , keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
.参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 win键代码=91
.参数 键扫描码, 整数型, 可空, bScan,键的OEM扫描码
.参数 标志值, 整数型, 可空, dwFlags,标志常数  KEYEVENTF_KEYUP=2  放开某键的标志
.参数 特定值, 整数型, 可空, dwExtraInfo,通常不用的一个值



.子程序 模拟键盘行动放开键, 整数型, , keybd_event这个函数模拟了键盘行动   注意键按下后要放开键
.参数 键代码, 整数型, , bVk,欲模拟的虚拟键码 win键代码=91
.参数 键扫描码, 整数型, 可空, bScan,键的OEM扫描码
.参数 标志值, 整数型, 可空, dwFlags,标志常数  KEYEVENTF_KEYUP=2  放开某键的标志
.参数 特定值, 整数型, 可空, dwExtraInfo,通常不用的一个值



.子程序 模拟鼠标, 空白型, , mouse_event,模拟一次鼠标事件  没有返回值
.参数 标志组合, 整数型, , dwFlags，一系列标志的组合  3为按下鼠标        相关标志自己去网上查下  
.参数 水平方向, 整数型, , dx，参见相关帮助
.参数 垂直方向, 整数型, , dy，参见相关帮助
.参数 数据信息, 整数型, 可空, cButtons，未使用
.参数 扩展数据信息, 整数型, 可空, dwExtraInfo，通常未用的一个值



.子程序 HTTP下载, 逻辑型, , 成功返回真 失败返回假
.参数 HTTP文件地址, 文本型, , szURL 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。 http://499767144.5d6d.com/bbs.php
.参数 保存到本地文件名, 文本型, , szFileName 例如:c:\1.exe  保存在:c:\1.exe



.子程序 HTTP读文件DLL, 字节集, , 
.参数 HTTP文件地址, 文本型, , 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。



.子程序 取活动窗口句柄, 整数型, , GetActiveWindow获得活动窗口的句柄 返回句柄


.子程序 取进程标识符ID, 整数型, , GetWindowThreadProcessId返回进程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 取线程标识符ID, 整数型, , GetWindowThreadProcessId返回线程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 取进程线程标识符ID, 整数型, , GetWindowThreadProcessId返回进程ID
.参数 窗口句柄, 整数型, , hwnd，指定窗口句柄



.子程序 填充内存, 文本型, , $(b) RtlFillMemory
.参数 目的内存, 文本型, , Destination
.参数 填充内容, 字节型, , Fill 例子:取代码("A",)



.子程序 取桌面句柄, 整数型, , 返回句柄  代码:a ＝ 寻找顶级窗口_ (“Progman”, 字符 (0))


.子程序 设置指定窗口的显示状态, 整数型, , ShowWindow返回值：如果窗口以前可见，则返回值为非零。如果窗口以前被隐藏，则返回值为零。  控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
.参数 窗口句柄, 整数型, , hWnd：窗口句柄。
.参数 窗口如何显示, 整数型, , nCmdShow：指定窗口如何显示 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活 1 最小化取消激活 2 还原激活 3 显示激活 4 最大化激活 5 最小化激活 6 最小化 7 显示 8 最近状态显示 9 还原 更多查看常量:ShowWindow



.子程序 显示桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 隐藏桌面图标DLL, 空白型, , 与易语言自带的基本相同


.子程序 替换首尾文本, 文本型, , StrTrimA替换首尾文本 例子:文本:12341 替换首尾文本:1  结果: 文本:=234 返回234
.参数 文本, 文本型, , psz    例子:文本:12341 替换首尾文本:1  结果: 文本:=234
.参数 替换首尾文本, 文本型, , pszTrimChars 例子:文本:12341 替换首尾文本:1  结果: 文本:=234



.子程序 删首尾空DLL, 文本型, , 返回一个文本，其中包含被删除了首部及尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 



.子程序 拷贝内存, 文本型, , RtlMoveMemory
.参数 源缓冲区, 字节型, 数组, Source



.子程序 字节数据到文本S, 文本型, , SysAllocStringByteLen
.参数 二进制数据, 字节型, 数组, m_pBase



.子程序 字节数据到文本R, 文本型, , RtlMoveMemory
.参数 二进制数据, 字节型, 数组, m_pBase



.子程序 读文本内存, 文本型, , 返回文本 ReadProcessMemory
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄
.参数 内存地址, 整数型, , lpBaseAddress,内存地址



.子程序 读文本内存进程句柄, 文本型, , 返回文本 ReadProcessMemory
.参数 进程的句柄, 整数型, , hProcess , 进程的句柄
.参数 内存地址, 文本型, , lpBaseAddress,内存地址 例子:地址:0049500B。



.子程序 读文本十六进制路径名, 文本型, , 返回文本 ReadProcessMemory
.参数 完整的路径名, 文本型, , 完整的路径名 比如:c:\1.exe。
.参数 地址, 文本型, , 地址:0049500B。



.子程序 退出线程, 整数型, , ExitThread
.参数 线程句柄, 整数型, , 



.子程序 取当前线程伪句柄, 整数型, , GetCurrentThread $(b)获取当前线程的一个伪句柄  当前线程的伪句柄


.子程序 取当前进程伪句柄, 整数型, , GetCurrentProcess$(b)获取当前进程的一个伪句柄  当前进程的伪句柄


.子程序 取线程优先级, 整数型, , GetThreadPriority
.参数 线程句柄, 整数型, , 线程句柄



.子程序 取特定进程优先级, 整数型, , GetPriorityClass$(b)获取特定进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 进程句柄;



.子程序 置线程优先级, 整数型, , $(b)设定线程的优先级别  非零表示成功，零表示失败。会设置GetLastError
.参数 线程句柄, 整数型, , hThread
.参数 优先权, 整数型, 可空, nPriority  默认-2 例如:-2 更过自己去搜索下



.子程序 置进程优先级, 整数型, , $(b)设置一个进程的优先级别  进程的优先级，零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , 
.参数 级别, 整数型, 可空, 默认64 例如:64 更过自己去搜索下



.子程序 取模板完整路径, 文本型, , GetModuleFileNameA $(b)获取一个已装载模板的完整路径名称  如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 模块句柄, 整数型, 可空, 一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄  一般填写0



.子程序 取执行文件名G, 文本型, , GetModuleFileNameA


.子程序 取执行文件路径G, 文本型, , GetModuleFileNameA


.子程序 取运行目录G, 文本型, ,    包含当前任务可执行文件的目录。利用函数GetModuleFileName可以返回这一目录的路径；例子:C:\Documents and Settings\Administrator\桌面\


.子程序 取磁盘卷标DLL, 文本型, , 返回指定磁盘的卷标文本 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘卷序列号, 整数型, , 返回指定磁盘的卷标序列号 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取文件系统名称, 文本型, , 返回指定磁盘的文件系统名称 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 文件可否运行, 逻辑型, , GetBinaryTypeA
.参数 文件路径, 文本型, , lpApplicationName String，欲测试文件的完整路径名 
.参数 文件类型, 整数型, 可空, lpBinaryType Long，参见相关帮助  SCS_32BIT_BINARY win32执行程序=0  SCS_DOS_BINARY DOS执行程序=1    SCS_OS216_BINARY 16位OS/2执行程序=5   SCS_PIF_BINARY 用于执行DOS程序的一个pif文件=3  SCS_POSIX_BINARY 一个Posix应用=4  SCS_WOW_BINARY 16位windows执行程序=2



.子程序 设置窗口位置, 逻辑型, , SetWindowPos
.参数 窗口句柄, 整数型, 可空, Long，欲定位的窗口
.参数 定位类型, 整数型, , Long，窗口句柄。 取－1表示在最顶层显示窗口，取1表示在最底层显示；  在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
.参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
.参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
.参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
.参数 窗口新高度, 整数型, , Long，指定新的窗口高度
.参数 显示方式, 整数型, 可空, Long参数若取1，表示窗口大小保持不变，取2表示保持位置不变，因此，取3（=1＋2）表示大小和位置均保持不变，取0表示将窗口的大小和位置改变为指定值。 ，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等



.子程序 窗口总在最前, 逻辑型, , SetWindowPos
.参数 窗口句柄, 整数型, 可空, 
.参数 总在最前, 逻辑型, 可空, 默认为真



.子程序 判断窗口可见性, 逻辑型, , 成功返回真 失败返回假
.参数 窗口句柄, 整数型, , 



.子程序 取任务栏位置, 整数型, , SHAppBarMessage
.参数 参数, 整数型, 可空, 默认为1     1.左边  2.顶边  3.右边  4.底边



.子程序 任务栏是否被隐藏, 逻辑型, , 真为隐藏 假为未被隐藏


.子程序 任务是否保持在其它窗口的前端, 逻辑型, , 


.子程序 取任务栏句柄, 整数型, , 返回任务栏句柄


.子程序 隐藏任务栏, 逻辑型, , 


.子程序 显示任务栏, 逻辑型, , 


.子程序 取字节数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节型, 参考, lpString1
.参数 数据2, 字节型, 参考, lpString2



.子程序 取字节集数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节集, 参考, lpString1
.参数 数据2, 字节集, 参考, lpString2



.子程序 取文本数据地址, 文本型, , lstrcpyn
.参数 数据1, 文本型, 参考, lpString1
.参数 数据2, 文本型, 参考, lpString2



.子程序 取整数数据地址, 文本型, , lstrcpyn
.参数 数据1, 整数型, 参考, lpString1
.参数 数据2, 整数型, 参考, lpString2



.子程序 取字节数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 字节型, 数组, lpString1
.参数 数据2, 字节型, 数组, lpString2



.子程序 取文本数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 文本型, 数组, lpString1
.参数 数据2, 文本型, 数组, lpString2



.子程序 取整数数组数据地址, 文本型, , lstrcpyn
.参数 数据1, 整数型, 数组, lpString1
.参数 数据2, 整数型, 数组, lpString2



.子程序 格式化磁盘, 整数型, , SHFormatDrive
.参数 盘符, 整数型, , 0是A，1是B 2是C 3是D  4是E  以此类推。
.参数 功能, 整数型, , 弹出界面的功能‘参数为0-3’XP下“0、1”。



.子程序 禁止程序重复运行, 整数型, , OpenEventA CreateEventA
.参数 识别符, 文本型, 可空, 比如:少男少女论坛



.子程序 为进程指定CPU, 整数型, , 设置CPU亲和性  进程句柄  返回CPU号SetProcessAffinityMask
.参数 进程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.子程序 为线程指定CPU, 整数型, , 设置CPU亲和性  线程句柄SetThreadAffinityMask
.参数 线程句柄, 整数型, 可空, hProcess
.参数 参数, 整数型, , Mask



.子程序 取获取焦点窗口句柄, 整数型, , GetFocus，获得拥有输入焦点的窗口的句柄


.子程序 创建插入符, 整数型, , CreateCaret，根据指定的信息创建一个插入符（光标），并将它选定为指定窗口的默认插入符。插入符可以是一根短线、一个方块或者一幅位图。通常用插入符指示文字在文字框中的插入位置
.参数 窗口句柄, 整数型, 可空, hwnd，窗口句柄
.参数 位图句柄, 整数型, 可空, hBitmap，位图句柄
.参数 宽度, 整数型, , nWidth，宽度
.参数 高度, 整数型, , nHeight，高度



.子程序 显示插入符, 整数型, , ShowCaret，在指定的窗口里显示插入符（光标）
.参数 窗口句柄, 整数型, 可空, hwnd，包含了插入符的窗口的句柄。可以为零；此时，只有在插入符包含于由活动任务拥有的一个窗口时，它才会显示出来



.子程序 按钮按下或者弹起, 空白型, , 按钮.发送信息 (243, 按下或者弹起, 0)
.参数 按钮, 按钮, , 
.参数 按下或者弹起, 整数型, , 1.按钮  0.弹起



.子程序 到大写Dll, 文本型, , CharUpperA 将文本中的小写英文字母变换为大写，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , str



.子程序 到小写DLL, 文本型, , CharLowerA 将文本中的大写英文字母变换为小写，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , str



.子程序 附加文本串, 文本型, , StrNCatA  
.参数 文本, 文本型, , psz1
.参数 附加文本, 文本型, , psz2



.子程序 加入文本, 文本型, , StrNCatA  
.参数 文本, 文本型, , psz1
.参数 附加文本, 文本型, , psz2



.子程序 寻找文本串, 整数型, , StrCSpnA
.参数 被寻找文本, 文本型, , lpStr
.参数 欲寻找文本, 文本型, , lpSet



.子程序 寻找文本串I, 整数型, , StrCSpnIA
.参数 被寻找文本, 文本型, , lpStr
.参数 欲寻找文本, 文本型, , lpSet



.子程序 打开Internet, 整数型, , InternetOpen*  InetrnetOpen 初始化 WinInet.dll
.参数 代理商名称, 文本型, 可空, sAgent  比如:“http://499767144.5d6d.com/bbs.php”
.参数 存取类型, 整数型, 可空, lAccessType  比如:1
.参数 代理名称, 文本型, 可空, sProxyName  比如:""
.参数 代理地址, 文本型, 可空, sProxyBypass 比如""
.参数 标志, 整数型, 可空, lFlags      比如:0



.子程序 关闭Internet句柄, 整数型, , InternetCloseHandle
.参数 Internet句柄, 整数型, , hInet



.子程序 打开Internet地址, 整数型, , InternetOpenUrl
.参数 Internet句柄, 整数型, , hInternetSession
.参数 Url地址, 文本型, 可空, lpszUrl
.参数 头文本, 文本型, 可空, lpszHeaders     例子:""
.参数 头文本长度, 整数型, 可空, dwHeadersLength  例子: 0
.参数 标志, 整数型, 可空, dwFlags       例子:-2147483648
.参数 定义值, 整数型, 可空, dwContext   例子:0



.子程序 读Internet文件, 字节集, , InternetReadFile
.参数 Internet地址句柄, 整数型, , hFile
.参数 读取大小, 整数型, 可空, lNumBytesToRead  默认为:1000
.参数 读取首地址, 整数型, 可空, lNumberOfBytesRead



.子程序 取网站原码, 文本型, , 
.参数 读取大小, 整数型, 可空, lNumBytesToRead  默认为:1000
.参数 读取首地址, 整数型, 可空, lNumberOfBytesRead
.参数 HTTP文件地址, 文本型, 可空, 本参数指定欲读取文件在互联网上的HTTP地址（即URL）。 默认:http://499767144.5d6d.com/bbs.php



.子程序 取鼠标双击时间, 整数型, , 得到鼠标的双击间隔速度  GetDoubleClickTime 一般鼠标设置的双击时间为 500 


.子程序 设置当前目录, 逻辑型, , SetCurrentDirectoryA Long，非零表示成功，零表示失败。会设置GetLastError
.参数 新当前目录的路径, 文本型, , 



.子程序 设置鼠标双击时间, 逻辑型, , 设置鼠标的双击间隔速度 SetDoubleClickTime 成功返回真 失败返回假 
.参数 时间, 整数型, 可空, 默认为500



.子程序 设置磁盘卷标, 逻辑型, , SetVolumeLabelA 成功返回真 失败返回假 
.参数 磁盘卷的根路径, 文本型, , String，磁盘卷的根路径 例如:d:
.参数 指定新卷标, 文本型, , String，指定新卷标。用vbNullString指示删除当前卷名



.子程序 判断窗口最大化, 逻辑型, , IsZoomed 判断窗口是否最大化  返回1为窗口最大化真  0为窗口最大化为假
.参数 窗口句柄, 整数型, 可空, hwnd,欲测试的窗口的句柄



.子程序 窗口获得焦点, 整数型, , SetFocus 函数功能：该函数对指定的窗口设置键盘焦点。返回当前窗口焦点
.参数 窗口句柄, 整数型, 可空, hWnd



.子程序 清空矩形, 整数型, , SetRectEmpty
.参数 区域, 矩形_, , 



.子程序 设置矩形, 整数型, , SetRect
.参数 矩形, 矩形_, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 右边, 整数型, , 
.参数 底边, 整数型, , 



.子程序 生成声音, 逻辑型, ,  Beep,用于生成简单的声音  Long，TRUE（非零）表示成功，否则返回零。会设置GetLastError
.参数 声音频率, 整数型, , dwFreq,声音频率（从37Hz到32767Hz）Long，声音频率（从37Hz到32767Hz）。在windows95中忽略
.参数 声音持续时间, 整数型, , dwDuration,参见相关帮助Long，声音的持续时间，以毫秒为单位。如为-1，表示一直播放声音，直到再次调用该函数为止。在windows95中会被忽略



.子程序 取Windows的开始按钮句柄, 整数型, , 返回句柄


.子程序 显示Windows的开始按钮, 整数型, , 


.子程序 隐藏Windows的开始按钮, 整数型, , 


.子程序 取托盘时钟句柄, 整数型, , 返回句柄


.子程序 隐藏托盘和时钟, 整数型, , 


.子程序 显示托盘和时钟, 整数型, , 


.子程序 清除打开文档历史记录, 整数型, , SHAddToRecentDocs


.子程序 增加到最近文档, 逻辑型, , SHAddToRecentDocs 成功返回真 失败返回假
.参数 文件的路径, 文本型, 可空, 如“c:\windows\a.txt"



.子程序 提取图标扩展, 整数型, , 返回值提供画图标的图标句柄
.参数 文件名, 文本型, , lpszFile "shell32.dll"
.参数 图标索引, 整数型, , nIconIndex



.子程序 取设备场景, 整数型, , GetDC$(b)获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
.参数 窗口句柄, 整数型, 可空, 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;



.子程序 释放设备场景, 逻辑型, , ReleaseDC   Long，执行成功为1，否则为0   释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）
.参数 窗口句柄, 整数型, , hwnd
.参数 设备场景, 整数型, , hdc



.子程序 画图标, 逻辑型, , DrawIcon$(b)在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
.参数 设备场景句柄, 整数型, , 设备场景GetDC$(b)获取指定窗口的设备场景 
.参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
.参数 纵坐标, 整数型, , 同上
.参数 图标句柄, 整数型, , 欲描绘图标的句柄;



.子程序 判断窗口句柄是否有效, 逻辑型, , IsWindow判断一个窗口句柄是否有效 如果为1则为有效 0为无效
.参数 窗口句柄, 整数型, , 



.子程序 置父窗口, 逻辑型, , 返回值：如果函数成功，返回值为子窗口的原父窗口句柄；如果函数失败，返回值为NULL。若想获得多错误信息，请调用GetLastError函数。
.参数 子窗口句柄, 整数型, , hWndChild
.参数 新的父窗口句柄, 整数型, , hWndNewParent



.子程序 置360安全卫士父窗口, 逻辑型, , 成功返回真 失败返回假


.子程序 检测文件是否存在, 逻辑型, , PathFileExistsA检测文件是否存在，0不存在, 1存在
.参数 文件名, 文本型, , 文件名（含路径） pszPath



.子程序 检测文件夹是否存在, 逻辑型, , PathIsDirectoryA 目录是否存在，0不存在, 16存在
.参数 目录名, 文本型, , 目录名（含路径） pszPath



.子程序 取Program目录, 文本型, , 比如:C:\Program Files
.参数 是否创建, 逻辑型, 可空, 默认为假



.子程序 关闭内核对象, 逻辑型, , CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;



.子程序 关闭文件API, 逻辑型, , CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 欲关闭的文件号, 整数型, , 该文件号由“打开文件”命令所返回。



.子程序 打开文件API, 整数型, , OpenFile 打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 -1。本命令为初级命令。
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字
.参数 文件操作结果, 文件结构信息_, 可空, lpReOpenBuff，文件操作结果 文件结构信息
.参数 操作方式, 整数型, 可空, wStyle，操作方式  一般为32 默认为32



.子程序 取文件尺寸API, 整数型, , GetFileSize Long，返回文件长度。&HFFFFFFFF表示出错。注意如lpFileSizeHigh不为NULL，且结果为&HFFFFFFFF，那么必须调用GetLastError，判断是否实际发生了一个错误，因为这是一个有效的结果
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字



.子程序 取文件长度API, 整数型, ,  返回指定被打开文件的尺寸，该尺寸以字节为单位。如果给定文件号无效或失败，返回 -1 。本命令为初级命令。
.参数 文件句柄, 整数型, , 该文件号必须由“打开文件”命令所返回。



.子程序 读入文本API, 文本型, , ReadFileEx
.参数 文件名, 文本型, , lpFileName，欲打开文件的名字



.子程序 取启动时间API, 整数型, , GetMessageTime


.子程序 取磁盘总空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘剩余空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0。
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘可用剩余空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取当前用户名, 文本型, , 返回用户名GetUserNameA  Long，TRUE（非零）表示成功，否则返回零。例如:Administrator


.子程序 取当前用户名扩展, 文本型, , GetUserNameExA Long，TRUE（非零）表示成功，否则返回零 如:PC-200804121120\Administrator


.子程序 获取用户缺省语言ID, 整数型, , GetUserDefaultLangID


.子程序 获取用户缺省本地ID, 整数型, , GetUserDefaultLCID


.子程序 取WINDOWS运行时间, 整数型, , GetTickCount 返回值 以毫秒为单位的windows运行时间 用于获取自windows启动以来经历的时间长度（毫秒）


.子程序 获取一个网络资源用以连接的名字, 文本型, , WNetGetUserA获取一个网络资源用以连接的名字 Long，零表示成功。会设置GetLastError。如GetLastError是ERROR_EXTENDED_ERROR，则可用WNetGetLastError取得额外的错误信息
.参数 已连接资源的远程名称或本地名称, 文本型, 可空, lpNameString，指定已连接资源的远程名称或本地名称。用vbNullString获取当前用户的名字



.子程序 设置计算机名, 逻辑型, , 设置计算机名  一般要重新启动才生效 SetComputerNameA Long，非零表示成功，零表示失败。会设置GetLastError  windows95会将任何非法字符自动转换到标准的字符集里。windows nt则会报告出错
.参数 新的计算机名称, 文本型, 参考, lpComputerName String，新的计算机名称。最多可有MAX_COMPUTERNAME_LENGTH个字符   



.子程序 取函数入口处的地址, 整数型, , 返回函数地址
.参数 模块名, 文本型, , 例:User32.dll
.参数 函数名, 文本型, , 例:MessageBoxA



.子程序 载入动态链接库, 整数型, , loadLibraryA Long，成功则返回库模块的句柄，零表示失败。会设置GetLastError, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间
.参数 动态链接库名称, 文本型, , lpLibFileName,指定要载入的动态链接库的名称



.子程序 释放动态链接库, 逻辑型, , FreeLibrary, 释放指定的动态链接库，它们早先是用LoadLibrary ;API函数装载的  非零表示成功，零表示失败。会设置GetLastError
.参数 库句柄, 整数型, , hLibModule，要释放的一个库句柄，在VB里使用只能用这个函数释放那些由应用程序明确装载的DLL。对LoadLibrary的每一次调用都应该有一个对应的FreeLibrary调用



.子程序 刷新桌面, 整数型, , 


.子程序 弹出光驱API, 整数型, , 弹出光驱门。 mciSendString


.子程序 关闭光驱API, 整数型, , 关闭光驱门。 mciSendString


.子程序 取磁盘类型, 整数型, , ,GetDriveTypeA,Long，如驱动器不能识别，则返回零。如指定的目录不存在，则返回1。如执行成功，则用下述任何一个常数指定驱动器类型：DRIVE_REMOVABLE， DRIVE_FIXED， DRIVE_REMOTE， DRIVE_CDROM 或 DRIVE_RAMDISK  2; {软盘} 3; {本地硬盘} 4; {网络磁盘} 5; {CD-ROM} 6; {RAM 磁盘}
.参数 路径, 文本型, , nDrive String，包含了驱动器根目录路径的一个字串 如"c:\"



.子程序 判断逻辑驱动器字母, 长整数型, , GetLogicalDrives 判断系统中存在哪些逻辑驱动器字母  Long，这个结构中的二进制位标志着存在哪些驱动器。其中，位0设为1表示驱动器A:存在于系统中；位1设为1表示存在B:驱动器；以次类推


.子程序 取短路径名, 文本型, , GetShortPathNameA 获取指定文件的短路径名 Long，装载到lpszShortPath缓冲区的字符数量。如lpszShortPath的长度不足，不能容下文件名，就返回需要的缓冲区长度 比如 C:\Documents and Settings\Administrator\桌面\  返回的是 C:\DOCUME~1\ADMINI~1\桌面\
.参数 完整路径, 文本型, , lpszLongPath String，指定欲获取短路径名的那个文件的名字。可以是个完整路径，或者由当前目录决定



.子程序 删除路径引号, 文本型, , PathUnquoteSpacesA 的作用是删除路径文本首部尾部的半角  如果有一个不存在将不执行删除，无返回值。比如："c:\abc  " 返回：c:\abc  
.参数 路径文本, 文本型, , lpsz



.子程序 调用帮助, 整数型, , WinHelpA
.参数 帮助文件名, 文本型, , lpHelpFile指定欲打开帮助文件的名称，如果没有指定帮助文件，将使用默认帮助文件名称，即本易程序的文件名称（不含其后缀）＋“.hlp”后缀。
.参数 帮助标志值, 整数型, 可空, wCommand 默认HELP_CONTENTS=3



.子程序 将窗口设为系统的前台窗口, 逻辑型, , SetForegroundWindow Long，非零表示成功，零表示失败。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 判断窗口最小化, 逻辑型, , IsIconic, 判断窗口是否已最小化 Long，非零表示成功，零表示失败
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 将窗口设为系统的前台窗口扩展, 逻辑型, , SetForegroundWindow 
.参数 窗口句柄, 整数型, , hwnd Long，带到前台的窗口



.子程序 创建扩展线程, 整数型, , SHCreateThread
.参数 线程地址, 整数型, , pfnThreadProc   到数值 (&_按钮1_被单击)



.子程序 呼叫窗口函数地址, 整数型, , CallWindowProcA
.参数 前一窗口函数地址, 整数型, , 
.参数 窗口句柄, 整数型, 可空, 
.参数 消息值, 整数型, 可空, 
.参数 附加参数1, 整数型, 可空, 
.参数 附加参数2, 整数型, 可空, 



.子程序 允许或禁止窗口, 整数型, , EnableWindow Long，非零表示成功，零表示失败。会设置GetLastError, 在指定的窗口里允许或禁止所有鼠标及键盘输入
.参数 窗口句柄, 整数型, 可空, hwnd，窗口句柄
.参数 标识符, 整数型, , fEnable，非零允许，零禁止



.子程序 设置窗口透明度API, 逻辑型, , SetLayeredWindowAttributes 设置窗口透明度
.参数 窗口句柄, 整数型, 可空, 要设置透明度的窗口句柄。hwnd是透明窗体的句柄，
.参数 颜色值, 整数型, 可空, crKey为颜色值，// 掩码的颜色，可以用RGB(r,g,b)来指定
.参数 透明度, 整数型, 可空, 为0-255之间的整数。0 - 整个窗口透明, 255 - 完全不透明。bAlpha是透明度，取值范围是[0,255]，
.参数 透明方式, 整数型, 可空, dwFlags是透明方式，可以取两个值   LWA_ALPHA = 2 LWA_COLORKEY=1 当取值为LWA_ALPHA时，crKey参数无效，bAlpha参数有效； 当取值为LWA_COLORKEY时，窗体中的所有颜色为crKey的地方将变为透明，bAlpha参数无效   也可以取两个值的组合：LWA_ALPHA Or LWA_COLORKEY。这样crKey的地方将变为全透明，而其它地方根据bAlpha参数确定透明度。



.子程序 取得窗口信息, 整数型, , GetWindowLongA从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
.参数 窗口句柄, 整数型, 可空, 欲为其获取信息的窗口的句柄
.参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;



.子程序 设置窗口信息, 整数型, , SetWindowLongA在窗口结构中为指定的窗口设置信息  指定数据的前一个值
.参数 窗口句柄, 整数型, 可空, hwnd，欲为其取得信息的窗口的句柄
.参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
.参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值



.子程序 重新启动系统设置, 整数型, , #59
.参数 标志, 整数型, 可空, uFlags EWX_FORCE=4 EWX_SHUTDOWN=1



.子程序 打开文件属性对话框, 整数型, , ShellExecuteEx
.参数 文件名, 文本型, 可空, 



.子程序 发送消息返回, 整数型, , SendMessageCallback，该函数最大的特定是可以立即返回。目标窗口函数执行完毕后，会用回调函数的形式将结果返回Long，TRUE表示成功，FALSE表示失败。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd，要接收消息的那个窗口的句柄
.参数 消息标识符, 整数型, , wmsg，消息的标识符
.参数 消息1, 整数型, 可空, wParam，取决于消息
.参数 消息2, 整数型, 可空, lParam，取决于消息
.参数 指定函数地址, 整数型, 可空, lpResultCallBack，指定函数地址。在vb5中可用AddressOf操作符获得
.参数 自定义值, 整数型, 可空, dwData，用户自定义值



.子程序 同步发送消息, 整数型, , SendMessageTimeout，Long，成功时返回TRUE，失败时返回FALSE。会设置GetLastError
.参数 窗口句柄, 整数型, , hwnd，要接收消息的一个窗口的句柄
.参数 标识符, 整数型, , msg，消息的标识符
.参数 消息1, 整数型, 可空, wparam，由消息决定
.参数 消息2, 整数型, 可空, lparam，由消息决定
.参数 类型, 整数型, 可空, fuflags，下述常数的一个或多个SMTO_ABORTIFHUNG如目标进程挂起，则函数立即返回
.参数 超时值, 整数型, 可空, utimeout，超时值，采用毫秒为单位
.参数 结果, 整数型, 可空, lpdwresult，用于装载函数结果的一个变量



.子程序 描绘桌面墙纸, 逻辑型, , PaintDesktop Long，TRUE（非零）表示成功，否则返回零  在指定的设备场景中描绘桌面墙纸图案
.参数 窗口句柄, 整数型, , hwnd



.子程序 复制位图, 逻辑型, , StretchBlt，Long，非零表示成功，零表示失败。会设置GetLastError将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容。这个函数会在设备场景中定义一个目标矩形，并在位图中定义一个源图象。源矩形会根据需要进行伸缩，以便与目标矩形的大小相符
.参数 目标设备场景句柄, 整数型, , hdc，目标设备场景
.参数 目标横坐标, 整数型, , x，目标矩形左上角的x,y坐标，以逻辑坐标表示
.参数 目标纵坐标, 整数型, , y，目标矩形左上角的x,y坐标，以逻辑坐标表示
.参数 目标宽度, 整数型, , nWidth，目标矩形的宽度和高度，以逻辑坐标表示
.参数 目标高度, 整数型, , nHeight，目标矩形的宽度和高度，以逻辑坐标表示
.参数 源设备场景句柄, 整数型, , hSrcDC，源设备场景。如光栅运算未指定一个源，则这个参数应为零
.参数 源横坐标, 整数型, , xSrc，用源DC的逻辑坐标表示的源矩形左上角位置
.参数 源纵坐标, 整数型, , ySrc，用源DC的逻辑坐标表示的源矩形左上角位置
.参数 源宽度, 整数型, , nSrcWidth，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
.参数 源高度, 整数型, , nSrcHeight，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
.参数 光栅运算, 整数型, 可空, dwRop，传输过程中进行的光栅运算。如刷子属于光栅运算的一部分，就使用选入目标DC的刷子  如果省略，默认 13369376



.子程序 不在任务栏显示, 整数型, , SetWindowLongA (取窗口句柄 (), -8, 128)
.参数 窗口句柄, 整数型, 可空, 



.子程序 反编译chm, 逻辑型, , Decompile：HH.EXE -decompile <输出路径> <目标chm文件>
.参数 输出路径, 文本型, , 
.参数 目标chm文件, 文本型, , 



.子程序 穿透鼠标, 整数型, , SetWindowLong (取窗口句柄 (), #GWL_EXSTYLE, a)
.参数 窗口句柄, 整数型, 可空, 



.子程序 取长路径名, 文本型, , GetLongPathNameA获取指定文件长路径名 返回文件路径长度
.参数 短路径文本, 文本型, , lpszShortPath



.子程序 取屏幕宽度API, 整数型, , GetSystemMetrics


.子程序 取屏幕高度API, 整数型, , GetSystemMetrics


.子程序 取屏幕宽度不包括任务栏等区域, 整数型, , GetSystemMetrics


.子程序 取屏幕高度度不包括任务栏等区域, 整数型, , GetSystemMetrics


.子程序 call, 空白型, , 置入代码 ({ 255, 85, 252 })=call dword ptr ss:[ebp-4]
.参数 子程序, 子程序指针, , 



.子程序 结束进程API, 逻辑型, , TerminateProcess  结束一个进程 Long，非零表示成功，零表示失败。会设置GetLastError 
.参数 进程标识, 整数型, 可空, 要终止进程的进程ID、进程句柄



.子程序 wsprintf_, 整数型, , wsprintfA   wsprintf_ (a, “%d-CCMVGA”, 8451635)= 8451635-CCMVGA   
.参数 字符缓冲区, 文本型, , 
.参数 格式, 文本型, , %d-CCMVGA
.参数 要格式化的值, 整数型, , 



.子程序 wsprintfA, 文本型, , wsprintfA   wsprintfA (“%d-CCMVGA”, 8451635)= 8451635-CCMVGA   
.参数 格式, 文本型, , %d-CCMVGA
.参数 要格式化的值, 整数型, , 8451635



.子程序 取现行时间API, 日期时间型, , GetLocalTime


.子程序 取星期几API, 整数型, , GetSystemTime


.子程序 取MD5值, 文本型, , MD5Init(初始化) MD5Update(开始编码) MD5Final(完成)
.参数 文本, 文本型, , 
.参数 大小写, 逻辑型, 可空, 默认为真 返回大写



.子程序 复制指定长度文本, 文本型, , lstrcpyn
.参数 文本, 文本型, , 
.参数 要复制的长度, 整数型, , 



.子程序 更换墙纸API, 逻辑型, , SystemParametersInfo
.参数 壁纸路径, 文本型, , 



.子程序 关闭监视器API, 整数型, , 
.参数 窗口句柄, 整数型, , 



.子程序 取剪辑板窗口句柄, 整数型, , GetOpenClipboardWindow


.子程序 取剪辑版序号, 整数型, , GetClipboardSequenceNumber


.子程序 确定格式是否可用, 逻辑型, , IsClipboardFormatAvailable
.参数 格式, 整数型, , CF_TEXT



.子程序 剪辑板中可有文本API, 逻辑型, , IsClipboardFormatAvailable


.子程序 取剪辑板文本API, 文本型, , GetClipboardData


.子程序 锁住全局内存块, 文本型, , GlobalLock
.参数 内存句柄, 整数型, , hMem



.子程序 解锁全局内存块, 整数型, , GlobalUnlock
.参数 内存句柄, 整数型, , hMem



.子程序 _lcreat, 整数型, , 创建文件 _lcreat  失败返回-1
.参数 文件路径, 文本型, , lpPathName，路径加文件名
.参数 文件类型, 整数型, , iAttribute，0,文件能够读写　1,创建只读文件 2,创建隐藏文件 3,创建系统文件



.子程序 取命令行参数, 文本型, , Win32程序的命令行参数  命令行参数的方法是使用 Api - GetCommandLine，它没有输入参数，返回的是指向命令行的指针，返回的字符串中，包含执行文件的文件名


.子程序 LoadIcon, 整数型, , LoadIconA Long，执行成功则返回已载入的图标的句柄；零表示失败。
.参数 实例句柄, 整数型, , hInstance,参见相关帮助
.参数 图标标识, 文本型, , lpIconName,作为一个字串，指定欲载入的图标资源



.子程序 GetDlgItemText, 整数型, , 该函数用于获取对话框中指定控件的标题或文本
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 缓冲区, 文本型, , lpString  指向用于接收获取结果的缓冲区的指针
.参数 缓冲区最大字符数, 整数型, , nMaxCount



.子程序 清除窗口, 整数型, , DestroyWindow
.参数 窗口句柄, 整数型, , hwnd,预清除的窗口的句柄



.子程序 SetDlgItemText, 整数型, , 该函数设置对话框中控制的文本和标题。
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。
.参数 设置文本, 文本型, , lpString  



.子程序 比较文本长度, 整数型, , lstrcmpi 第二个参数比第一个参数长，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数长，返回值为1
.参数 待比较文本一, 文本型, , lpString1
.参数 待比较文本二, 文本型, , lpString2



.子程序 lstrcmp, 整数型, , lstrcmp 第二个参数比第一个参数小，返回值为-1 第一个参数和第二个参数一样，返回值为0  第一个参数比第二个参数大，返回值为1
.参数 待比较文本一, 文本型, , lpString1
.参数 待比较文本二, 文本型, , lpString2



.子程序 全局分配分配, 整数型, , GlobalAlloc
.参数 标志, 整数型, , wFlags
.参数 字节, 整数型, , dwBytes



.子程序 释放内存分配, 整数型, , GlobalFree
.参数 内存句柄, 整数型, ,  hMem  



.子程序 EnumWindows, 整数型, , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）
.参数 函数指针, 子程序指针, , lpEnumFunc,指向为每个子窗口都调用的一个函数的指针
.参数 自定义数值, 整数型, , lParam,参见相关帮助



.子程序 GetDlgItem, 整数型, , 返回值为给定控制的窗口句柄。如果函数调用失败，则返回值为NULL
.参数 对话框的句柄, 整数型, , hDlg
.参数 指定控件的标识符, 整数型, , nIDDlgItem 指定控件的标识符（ID）。



.子程序 Process32First, 整数型, , 成功返回1，失败返回0
.参数 快照句柄, 整数型, , hSnapshot
.参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32



.子程序 Process32Next, 整数型, , 成功返回1，失败返回0
.参数 快照句柄, 整数型, , hSnapshot
.参数 进程信息, PROCESSENTRY32, , PROCESSENTRY32



.子程序 GetModuleFileNameEx, 整数型, , ong，如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , hProcess
.参数 模块句柄, 整数型, , hModule
.参数 文件名缓冲区, 文本型, , lpFileName
.参数 缓冲区大小, 整数型, , nSize



.子程序 GetModuleBaseName, 整数型, , ong，如执行成功，返回复制到lpFileName的实际字符数量；零表示失败。会设置GetLastError
.参数 进程句柄, 整数型, , hProcess
.参数 模块句柄, 整数型, , hModule
.参数 文件名缓冲区, 文本型, , lpFileName
.参数 缓冲区大小, 整数型, , nSize



.子程序 复制目录, 文本型, , 复制目录下的文件到别的目录    返回少男少女论坛http://499767144.5d6d.com/bbs.php
.参数 窗口句柄, 整数型, , 一般为取窗口句柄()
.参数 源目录, 文本型, , 
.参数 目标目录, 文本型, , 
.参数 是否覆盖, 逻辑型, 可空,  默认为真       ' 如果是否覆盖为假  那么备份就没有了意义（我们不对存在的文件的人做任何事情)  , 如果是否覆盖的真 那么我们备份就有意义,那么就存在这是否备份的问题了
.参数 备份重复文件, 逻辑型, 可空, 默认为假     备份目标目录下存在的文件
.参数 备份后缀, 文本型, 可空, 默认为bak        比如:文件名为 1.txt 备份后缀名为 .bak   则备份的文件名为 1.bak
.参数 播放声音, 逻辑型, 可空, 复制王完成后 是否播放声音 默认为假
.参数 声音常量, 整数型, 可空, 默认为64  wType,参见相关帮助           16、#错误图标； 32、#询问图标； 48、#警告图标； 64、#信息图标。



.子程序 字母, 文本型, , 字母索引 ABCDEFGHIJKLMNOPQRSTUVWXYZ 
.参数 字母索引, 整数型, , 1.到26之间  



.子程序 零到九A到F, 文本型, , 
.参数 字母索引, 整数型, , 16个字母,为大写，你要小写的话用代码  到小写转换下



.子程序 文本到字节数组, 文本型, , 
.参数 文本, 文本型, , 



.子程序 字节数据到文本w, 文本型, , 例子 文本:{49,50,51,52,53,54} 返回123456
.参数 二进制数据, 文本型, , 例子 文本:{49,50,51,52,53,54} 返回123456



.子程序 Delete, 文本型, , Delete 删除字符串. //Delete(s,2,1)
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, 可空, 默认为1 1为首位置，2为第2个位置，如此类推
.参数 欲取出字符的数目, 整数型, 可空, 默认为1



.子程序 删除字符串, 文本型, , Delete 删除字符串. //Delete(s,2,1)
.参数 欲取其部分的文本, 文本型, , 
.参数 起始删除位置, 整数型, 可空, 默认为1 1为首位置，2为第2个位置，如此类推
.参数 欲删除字符的数目, 整数型, 可空, 默认为1



.子程序 vbNullString, 文本型, , 字符 (0)


.子程序 字符零, 文本型, , 字符 (0)


.子程序 去空格文本, 文本型, , 返回 去除所有空格的文本
.参数 二进制文本, 文本型, , 



.子程序 去消换行符, 文本型, , 返回 返回 去除换行符文本
.参数 文本, 文本型, , 



.子程序 去空格二进制文本, 文本型, , 返回 去除所有空格的文本
.参数 二进制文本, 文本型, , 



.子程序 二进制文本转10进制, 文本型, , 例如 文本：83 EC 58 53 56 57  返回131,236,88,83,86,87
.参数 二进制文本, 文本型, , 



.子程序 十六进制转十进制, 整数型, , 
.参数 转换文本, 文本型, , 



.子程序 十进制转十六进制, 文本型, , 
.参数 欲取进制文本的数值, 整数型, , 



.子程序 调试中断, 逻辑型, , 如果当前进程正在调试器的描述表中运行,则加入int3(CC) 置入代码 ({ 204 })  


.子程序 判断是否为十六进制文本, 逻辑型, , 成功返回真 失败返回假
.参数 文本, 文本型, , 



.子程序 创建视频窗口, 逻辑型, , 成功返回真 失败返回假
.参数 分组框容器, 分组框, , 



.子程序 开始捕获视频, 逻辑型, , 成功返回真 失败返回假


.子程序 停止捕获视频, 逻辑型, , 成功返回真 失败返回假


.子程序 设置捕捉速率, 逻辑型, , 成功返回真 失败返回假
.参数 间隔毫秒数, 整数型, 可空, 表示每隔多少毫秒捕捉一次画面,-1表示默认



.子程序 视频抓图, 逻辑型, , 成功返回真 失败返回假
.参数 文件名, 文本型, , 



.子程序 视频设置, 逻辑型, , 成功返回真 失败返回假


.子程序 查找文件, 整数型, , FindFirstFileA  Long，如执行成功，返回一个搜索句柄 失败返回-1
.参数 文件名, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS\*.*
.参数 文件信息, 查找的文件信息_, 可空, lpFindFileData，参见相关帮助  查找的文件信息_



.子程序 查找下一个文件, 整数型, , FindNextFileA  Long，非零表示成功，零表示失败。
.参数 搜索句柄, 整数型, , hFindFile，参见相关帮助  由FindFirstFile函数创建的一个搜索句柄
.参数 文件有关信息, 查找的文件信息_, 可空, lpFindFileData，参见相关帮助



.子程序 关闭搜索文件, 整数型, , FindClose,关闭由FindFirstFile/FindNextFileA函数创建的一个搜索句柄
.参数 搜索句柄, 整数型, , hFindFile，由FindFirstFile函数提供的搜索句柄



.子程序 取Find文件名, 文本型, , 查找的文件信息 文件信息.cFileName
.参数 cFileName, 字节型, 数组, cFileName



.子程序 取目录下所有文件, 文本型, , 不包含子目录下的文件
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS
.参数 索引, 整数型, , 取目录下所有文件个数



.子程序 取目录下所有文件个数, 整数型, , 不包含子目录下的文件
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS



.子程序 取目录下所有子目录, 文本型, , 只包含当前目录的所有子目录 一般使用 先取目录下所有子目录个数 
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS
.参数 索引, 整数型, , 取目录下所有子目录个数



.子程序 取目录下所有子目录个数, 整数型, , 只包含当前目录的所有子目录
.参数 目录, 文本型, , lpFileName，欲搜索的文件名 如：C:\WINDOWS



.子程序 删除目录下指定文件, 逻辑型, , 删除该目录下指定文件（包含子目录)  返回真 可能删除了该文件成功 返回假 该目录下不存在该文件或者删除失败
.参数 目录, 文本型, , 比如:C:\Documents and Settings\Administrator\桌面
.参数 文件名, 文本型, , 比如:1.txt



.子程序 禁止窗口最小化滑动, 空白型, , 
.参数 窗口句柄, 整数型, , 



.子程序 GetLastError, 整数型, , 针对之前调用的api函数，用这个函数取得扩展错误信息


.子程序 调试中断, 逻辑型, , 如果当前进程正在调试器的描述表中运行,则加入int3(CC) 置入代码 ({ 204 })  


.子程序 是否为调试版DLL, 逻辑型, , IsDebuggerPresent 为真则当前进程正在调试器的描述表中运行否则  当前进程没有在调试器的描述表中运行 IsDebuggerPresent


.子程序 数值到格式化字节, 文本型, ,  比如:1024 返回 1.0KB
.参数 数值, 整数型, , dw



.子程序 数值到格式化字节扩展, 文本型, , StrFormatByteSize64A  比如:1024 返回 1.0KB
.参数 字节大小, 长整数型, , 比如:1024



.子程序 取磁盘卷标DLL, 文本型, , 返回指定磁盘的卷标文本 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘卷序列号, 整数型, , 返回指定磁盘的卷标序列号 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取文件系统名称, 文本型, , 返回指定磁盘的文件系统名称 。GetVolumeInformationA
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 格式化磁盘, 整数型, , SHFormatDrive
.参数 盘符, 整数型, , 0是A，1是B 2是C 3是D  4是E  以此类推。
.参数 功能, 整数型, , 弹出界面的功能‘参数为0-3’XP下“0、1”。



.子程序 设置磁盘卷标, 逻辑型, , SetVolumeLabelA 成功返回真 失败返回假 
.参数 磁盘卷的根路径, 文本型, , String，磁盘卷的根路径 例如:d:
.参数 指定新卷标, 文本型, , String，指定新卷标。用vbNullString指示删除当前卷名



.子程序 取磁盘总空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘剩余空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0。
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘可用剩余空间API, 长整数型, , SHGetDiskFreeSpaceA 返回以 1024 字节（KB）为单位的指定磁盘全部空间。如果失败，返回0
.参数 磁盘驱动器字符, 文本型, 可空, 类似“A”、“B”、“C”等，只取用给定文本的第一个字符。如果本参数被省略，默认使用当前驱动器。



.子程序 取磁盘类型, 整数型, , ,GetDriveTypeA,Long，如驱动器不能识别，则返回零。如指定的目录不存在，则返回1。如执行成功，则用下述任何一个常数指定驱动器类型：DRIVE_REMOVABLE， DRIVE_FIXED， DRIVE_REMOTE， DRIVE_CDROM 或 DRIVE_RAMDISK  2; {软盘} 3; {本地硬盘} 4; {网络磁盘} 5; {CD-ROM} 6; {RAM 磁盘}
.参数 路径, 文本型, , nDrive String，包含了驱动器根目录路径的一个字串 如"c:\"



.子程序 判断逻辑驱动器字母, 长整数型, , GetLogicalDrives 判断系统中存在哪些逻辑驱动器字母  Long，这个结构中的二进制位标志着存在哪些驱动器。其中，位0设为1表示驱动器A:存在于系统中；位1设为1表示存在B:驱动器；以次类推


.子程序 窗口_搜寻顶级窗口, 整数型, , 返回符合条件的第一个窗口句柄，支持通配符模糊查找。
.参数 窗口标题, 文本型, 可空, 支持通配符“*”和“?”，例如要搜寻标题包含“易语言”三个字的窗口就提供参数“*易语言*”。
.参数 窗口类名, 文本型, 可空, 窗口类名和标题可根据实际需要选填一个，也可以都填。支持通配符“*”和“?”。
.参数 区分大小写, 逻辑型, 可空, 默认为假，即不区分，为真区分。



.子程序 窗口_枚举顶级窗口, 整数型, , 枚举所有的顶级窗口，将句柄存入数组中，返回找到的窗口个数。
.参数 句柄数组, 整数型, 参考 可空 数组, 请提供一个整数型数组接收找到的窗口句柄。



.子程序 窗口_匹配通配符, 逻辑型, , 匹配返回真，不匹配返回假。支持“*”和“?”
.参数 一般文本, 文本型, , 
.参数 含通配符文本, 文本型, , 
.参数 区分大小写, 逻辑型, 可空, 真则区分大小写，默认为假。



.子程序 窗口_取窗口类名, 文本型, , 
.参数 窗口句柄, 整数型, , 



.子程序 窗口_取窗口标题, 文本型, , 
.参数 窗口句柄, 整数型, , 



.子程序 窗口_条件枚举顶级窗口, 整数型, , 枚举符合条件的所有顶级窗口，支通配符持模糊查找，将句柄存入数组中，返回找到的窗口个数。
.参数 窗口标题, 文本型, 可空, 支持通配符“*”和“?”，例如要搜寻标题包含“易语言”三个字的窗口就提供参数“*易语言*”。
.参数 窗口类名, 文本型, 可空, 窗口类名和标题可根据实际需要选填一个，也可以都填。支持通配符“*”和“?”。
.参数 句柄数组, 整数型, 参考 可空 数组, 请提供变量保存找到的窗口句柄，如果不提供则只返回找到的窗口个数。
.参数 区分大小写, 逻辑型, 可空, 默认为假，即不区分，为真区分。



.子程序 窗口_条件枚举子窗口, 整数型, , 枚举符合条件的所有子窗口，支持通配符模糊查找，将句柄存入数组中，返回找到的窗口个数。
.参数 父窗口句柄, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口。
.参数 第一个子句柄, 整数型, 可空, 如果本参数为0或留空，将从第一个子窗口开始找，如果不为0，将从该子窗口往下找。
.参数 窗口标题, 文本型, 可空, 支持通配符“*”和“?”，例如要搜寻标题包含“易语言”三个字的窗口就提供参数“*易语言*”。
.参数 窗口类名, 文本型, 可空, 窗口类名和标题可根据实际需要选填一个，也可以都填。支持通配符“*”和“?”。
.参数 句柄数组, 整数型, 参考 可空 数组, 请提供变量保存找到的窗口句柄，如果不提供则只返回找到的窗口个数。
.参数 区分大小写, 逻辑型, 可空, 默认为假，即不区分，为真区分。



.子程序 窗口_枚举子窗口, 整数型, , 枚举在指定父窗口下的所有的子窗口，将句柄存入数组中，返回找到的窗口个数。
.参数 父窗口句柄, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口。
.参数 句柄数组, 整数型, 参考 可空 数组, 请提供一个整数型数组接收找到的窗口句柄。



.子程序 窗口_禁止窗口, 整数型, , 如果窗口原来是被禁止的，返回值不为零；如果窗口原来不是被禁止的，返回值为零。
.参数 窗口句柄, 整数型, , 
.参数 禁止, 逻辑型, 可空, 默认为真，为假则恢复。



.子程序 _取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 



.子程序 _取指针_字节型, 整数型, , 
.参数 字节, 字节型, 参考, 



.子程序 _取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 



.子程序 _取指针_整数型, 整数型, , 
.参数 x, 整数型, 参考, 



.子程序 _取指针_子程序指针, 整数型, , 
.参数 x, 子程序指针, 参考, 



.子程序 _取指针_长整数型, 整数型, , 
.参数 x, 长整数型, 参考, 



.子程序 _取指针_双精度小数型, 整数型, , 
.参数 x, 双精度小数型, 参考, 



.子程序 文本_取空白文本, 文本型, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 



.子程序 文本_取文本长度, 整数型, , 
.参数 文本, 文本型, , 



.子程序 文本_字符, 文本型, , 
.参数 欲取其字符的字符代码, 字节型, , 



.子程序 文本_取代码, 整数型, , 
.参数 欲取字符代码的文本, 文本型, , 
.参数 欲取其代码的字符位置, 整数型, 可空, 



.子程序 文本_到大写, 文本型, ,  
.参数 文本, 文本型, , 



.子程序 文本_到小写, 文本型, ,  
.参数 文本, 文本型, , 



.子程序 文本_字节集到文本, 文本型, , 
.参数 字节集, 字节集, , 



.子程序 文本_整数到文本, 文本型, , ' 这里只是个测试，其实用汇编是很简单的。哈哈～～，来个动态调用API吧。
.参数 整数, 整数型, , 



.子程序 文本_删首尾空, 文本型, , 
.参数 文本, 文本型, , 



.子程序 文本_倒找文本, 整数型, , 返回一个整数值，指定一文本在另一文本中最后出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为从被搜寻文本的尾部开始。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_寻找文本, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为 1 。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_取文本左边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_取文本右边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_取文本中间, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_分割文本, 整数型, , 返回实际的组数
.参数 待分割文本, 文本型, , 如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的文本, 文本型, 可空, 可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”
.参数 要返回的子文本数目, 整数型, 可空, 可以被省略。如果被省略，则默认返回所有的子文本
.参数 返回的文本数组, 文本型, 数组, 将指定文本进行分割，分割后的一维文本数组以参考方式传递



.子程序 文本_字节型数组到文本, 文本型, , 
.参数 字节型数组, 字节型, 数组, 



.子程序 文本_取重复文本, 文本型, , 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的文本, 文本型, , 



.子程序 文本_文本替换, 文本型, , 将指定文本的某一部分用其它的文本替换，然后返回替换后的结果。
.参数 欲替换其部分的文本, 文本型, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的文本, 文本型, 可空, 可以被省略。如果本参数被省略，则删除文本中的指定部分。



.子程序 文本_子文本替换, 文本型, , 返回一个文本，该文本中指定的子文本已被替换成另一子文本，并且替换发生的次数也是被指定的。
.参数 欲被替换的文本, 文本型, , 
.参数 欲被替换的子文本, 文本型, , 
.参数 用作替换的子文本, 文本型, 可空, 可以被省略。如果本参数被省略，默认为空文本。
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
.参数 是否区分大小写, 逻辑型, 可空, 初始值为“真”。为真区分大小写，为假不区分。



.子程序 文本_删首空, 文本型, , 返回一个文本，其中包含被删除了首部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 



.子程序 文本_删尾空, 文本型, , 返回一个文本，其中包含被删除了尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 



.子程序 文本_删全部空, 文本型, , 返回一个文本，其中包含被删除了所有全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 



.子程序 文本_到全角, 文本型, , 将文本中的半角字母、空格或数字变换为全角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 



.子程序 文本_到半角, 文本型, , 将文本中的全角字母、空格或数字变换为半角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 



.子程序 字节集_取空白字节集, 字节集, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 



.子程序 字节集_取字节集长度, 整数型, , 
.参数 字节集, 字节集, , 



.子程序 字节集_文本到字节集, 字节集, , 
.参数 文本, 文本型, , 



.子程序 字节集_整数到字节集, 字节集, , 
.参数 整数, 整数型, , 



.子程序 字节集_字节型到字节集, 字节集, , 
.参数 字节型, 字节型, , 



.子程序 字节集_寻找字节集, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。



.子程序 字节集_倒找字节集, 整数型, , 返回一字节集在另一字节集中最后出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。



.子程序 字节集_取字节集左边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_取字节集右边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_取字节集中间, 字节集, , 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_分割字节集, 整数型, , 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递



.子程序 字节集_取重复字节集, 字节集, , 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的字节集, 字节集, , 



.子程序 字节集_字节集替换, 字节集, , 将指定字节集的某一部分用其它的字节集替换，然后返回替换后的结果。
.参数 欲替换其部分的字节集, 字节集, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的字节集, 字节集, 可空, 可以被省略。如果本参数被省略，则删除字节集中的指定部分。



.子程序 字节集_子字节集替换, 字节集, , 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的。
.参数 欲被替换的字节集, 字节集, , 
.参数 欲被替换的子字节集, 字节集, , 
.参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集。
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。



.子程序 数值_取十六进制文本, 文本型, , 
.参数 十进制整数, 整数型, , 



.子程序 数值_子程序指针到整数, 整数型, , 
.参数 x, 子程序指针, , 



.子程序 数值_字节集到整数, 整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1



.子程序 数值_字节集到短整数, 短整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1



.子程序 数值_取十进制, 长整数型, , 
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：#十六进制,#十进制,#八进制，#二进制



.子程序 数值_长整数到整数, 整数型, , 
.参数 x, 长整数型, , 



.子程序 数值_整数取高字, 整数型, , 
.参数 x, 整数型, , 



.子程序 数值_整数取低字, 整数型, , 
.参数 x, 整数型, , 



.子程序 数值_整除, 整数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 



.子程序 数值_求余, 双精度小数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 



.子程序 数值_求次方, 双精度小数型, , 
.参数 欲求次方数值, 双精度小数型, , 
.参数 次方数, 双精度小数型, , 



.子程序 数值_求平方根, 双精度小数型, , 
.参数 欲求其平方根的数值, 双精度小数型, , 



.子程序 数值_合并整数, 整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 



.子程序 数值_合并短整数, 短整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 



.子程序 数值_绝对取整, 整数型, , 
.参数 欲取整的小数, 双精度小数型, , 



.子程序 数值_取整, 整数型, , 
.参数 欲取整的小数, 双精度小数型, , 



.子程序 数值_求正弦, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 



.子程序 数值_求余弦, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 



.子程序 数值_求正切, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 



.子程序 数值_求反正切, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 



.子程序 数值_求反正弦, 双精度小数型, , 
.参数 正弦值, 双精度小数型, , -1到1，否则返回0



.子程序 数值_求反余弦, 双精度小数型, , 
.参数 余弦值, 双精度小数型, , -1到1，否则返回0



.子程序 数值_循环左移, 整数型, , 
.参数 要循环左移的整数, 整数型, , 
.参数 左移位数, 整数型, , <255



.子程序 数值_循环右移, 整数型, , 
.参数 要循环右移的整数, 整数型, , 
.参数 右移位数, 整数型, , <255



.子程序 系统_延时, 空白型, , 
.参数 时长, 整数型, , ms



.子程序 系统_动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式



.子程序 系统_取操作系统类别, 整数型, , 返回值：0～8代表：“未知”, “Win95”, “Win98”, “WinME”, “ WinNT”, “Win2000”, “WinXP”, “Win2003”, “Vista”


.子程序 系统_信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 



.子程序 系统_取颜色值, 整数型, , 
.参数 红色, 整数型, , 数值范围从 0 到 255，表示颜色中的红色成份。
.参数 绿色, 整数型, , 数值范围从 0 到 255，表示颜色中的绿色成份。
.参数 蓝色, 整数型, , 数值范围从 0 到 255，表示颜色中的蓝色成份。



.子程序 系统_取文件名, 文本型, , 
.参数 带路径文件名, 文本型, , 



.子程序 系统_取路径, 文本型, , 
.参数 带路径文件名, 文本型, , 



.子程序 系统_文件夹是否存在, 逻辑型, , 
.参数 路径, 文本型, , 



.子程序 系统_读配置项, 文本型, , 读取指定配置文件中指定项目的文本内容。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, , 参数值指定欲读入配置项在其节中的名称。
.参数 默认文本, 文本型, 可空, 可以被省略。如果指定配置项不存在，将返回此默认文本。如果指定配置项不存在且本参数被省略，将返回空文本。



.子程序 系统_写配置项, 逻辑型, , 将指定文本内容写入指定配置项中或者删除指定的配置项或节，如果指定配置文件不存在，将会自动创建。成功返回真，失败返回假。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲写入配置项所处节的名称。
.参数 配置项名称, 文本型, 可空, 可以被省略。参数值指定欲写入配置项在其节中的名称。如果参数值被省略，则删除指定节及其下的所有配置项。
.参数 欲写入值, 文本型, 可空, 可以被省略。参数值指定欲写入到指定配置项中的文本。如果参数值被省略，则删除所指定配置项。



.子程序 系统_取配置节名, 整数型, , 返回配置文件中所有已有节名的数量。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 返回的配置节名数组, 文本型, 数组, 返回指定配置文件中所有已有节名的文本数组。



.子程序 系统_取配置项名, 整数型, , 
.参数 配置文件名, 文本型, , 
.参数 节名称, 文本型, , 
.参数 返回的配置项名数组, 文本型, 数组, 



.子程序 系统_文件是否存在, 逻辑型, , 
.参数 欲测试的文件名称, 文本型, , 



.子程序 系统_取短路径, 文本型, , 
.参数 文件名, 文本型, , 



.子程序 环境_读环境变量, 文本型, , 
.参数 环境变量名称, 文本型, , 



.子程序 环境_写环境变量, 逻辑型, , 
.参数 环境变量名称, 文本型, , 
.参数 欲写入内容, 文本型, , 



.子程序 环境_取运行目录, 文本型, , 


.子程序 环境_取执行文件名, 文本型, , 


.子程序 环境_取命令行, 文本型, , 


.子程序 加解密_crc32, 文本型, , 用于取crc32，结果为16进制文本
.参数 原文, 字节集, , 要取CRC32数据字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，为真小写。



.子程序 加解密_rc4, 字节集, , RC4加解密，与易的输出形式一样，可能和其它加解密程序输出形式不一样，可自行进行相应调整。
.参数 原文, 字节集, , 需要加、解密的字节集
.参数 密码, 文本型, , 输入相应的密码



.子程序 加解密_md5, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写



.子程序 加解密_md4, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写



.子程序 加解密_md2, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写



.子程序 加解密_sha1, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写



.子程序 编码转换_qp编码, 字节集, , 用于Quoted-Printable编码、URL编码
.参数 原文, 字节集, , 要进行编码的字节集
.参数 编码类型, 逻辑型, 可空, 真为URL，假为QP，默认为QP



.子程序 编码转换_qp解码, 字节集, , 用于Quoted-Printable解码,也可用来解码URL
.参数 原文, 字节集, , 要进行解码的字节集



.子程序 编码转换_base64编码, 字节集, , 未嵌汇编版
.参数 原文, 字节集, , 



.子程序 编码转换_base64解码, 字节集, , 未嵌汇编版
.参数 原文, 字节集, , 



.子程序 编码转换_Ansi转Unicode, 字节集, , 
.参数 Ansi文本, 文本型, , 



.子程序 编码转换_Unicode转Ansi, 文本型, , 
.参数 Unicode字节集, 字节集, , 



.子程序 编码转换_Utf8转unicode, 字节集, , 
.参数 utf8字节集, 字节集, , 



.子程序 编码转换_Unicode转utf8, 字节集, , 
.参数 Unicode字节集, 字节集, , 



.子程序 编码转换_Ansi转utf8, 字节集, , 
.参数 ansi文本, 文本型, , 



.子程序 编码转换_Utf8转ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 



.子程序 编码转换_ansi转usc2, 文本型, , usc2也就是unicode be
.参数 文本, 文本型, , 



.子程序 编码转换_usc2转ansi, 文本型, , usc2也就是unicode be
.参数 usc2文本, 文本型, , 



.子程序 编码转换_GBK简体到GBK繁体, 文本型, , 
.参数 简体文本, 文本型, , 



.子程序 编码转换_GBK繁体到GBK简体, 文本型, , 
.参数 繁体文本, 文本型, , 



.子程序 编码转换_BIG5到GBK繁体, 文本型, , 
.参数 待转换文本, 文本型, , 



.子程序 编码转换_BIG5到GBK简体, 文本型, , 
.参数 待转换文本, 文本型, , 



.子程序 编码转换_GBK繁体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 



.子程序 编码转换_GBK简体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 




 ' 不属于任何一个程序集、类模块的函数：
