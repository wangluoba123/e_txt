 ' 文件类型：Windows窗口程序

 ' 程序名称：黑白棋
 ' 程序描述： 
 ' 程序作者：bw
 ' 邮政编码：
 ' 联系地址： 
 ' 联系电话： 
 ' 传真号码： 
 ' 电子信箱：
 ' 主页地址： 
 ' 版权声明： 
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 398
    高度 = 321
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 真
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “黑白棋 - V1.00 - 无文件”
    帮助文件名 = “”

窗口 制作黑白棋开局库窗口
    左边 = 50
    顶边 = 50
    宽度 = 421
    高度 = 273
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “制作黑白棋开局库文件”
    帮助文件名 = “”



.常量 格宽度, "32", 公开, 
.常量 标题, "“黑白棋 - V1.00 - ”", 公开, 
.常量 没有文件, "“无文件”", 公开, 
.常量 黑白棋, "“黑白棋”", 公开, 
.常量 低智商电脑占角得分, "190", 公开, 
.常量 低智商电脑占边得分, "50", 公开, 
.常量 低智商普通步得分, "50", 公开, 
.常量 低智商电脑占边直边受角威胁得分, "-30", 公开, 
.常量 低智商电脑占边斜边受角威胁得分, "-50", 公开, 
.常量 低智商电脑吃子计算分, "5", 公开, 
.常量 当前坐标, "“当前坐标”", 公开, 
.常量 当前黑子, "“当前黑子:”", 公开, 
.常量 当前白子, "“当前白子:”", 公开, 
.常量 低智商电脑占直边受边威胁得分, "-25", 公开, 
.常量 低智商电脑占斜边受边威胁得分, "-15", 公开, 
.常量 黑方, "1", 公开, 
.常量 白方, "2", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 棋子, 公开, 用来表示棋形坐标位置的数据类型。
    .成员 横, 整数型, , , 在棋盘中的横向位置。
    .成员 纵, 整数型, , , 在棋盘中的纵向位置。
    .成员 从属常数, 整数型, , , 1表示人，2表示电脑，0表示改位置无棋子。

.全局变量 棋子, 整数型, 公开, "0", 
.全局变量 是否游戏中, 逻辑型, 公开, , 
.全局变量 从属符号常数, 整数型, 公开, , 
.全局变量 可下棋位置数组, 整数型, 公开, "0", 
.全局变量 是否高智力电脑, 逻辑型, 公开, , 
.全局变量 是否人机对战, 逻辑型, 公开, , 
.全局变量 是否玩家先行, 逻辑型, 公开, , 
.全局变量 棋步记录数组, 文本型, 公开, "0", 
.全局变量 棋分值, 整数型, 公开, , 
.全局变量 当前黑子, 整数型, 公开, , 
.全局变量 当前白子, 整数型, 公开, , 
.全局变量 当前棋局文件, 文本型, 公开, , 
.全局变量 开局库存储变量, 文本型, 公开, , 
.全局变量 临时棋子, 整数型, 公开, "0", 
.全局变量 可否悔棋, 逻辑型, 公开, , 

.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, 公开, 
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 

赋值 (从属符号常数, 1)
赋值 (是否人机对战, 真)
赋值 (是否玩家先行, 真)
赋值 (是否高智力电脑, 假)
赋值 (棋分值, 0)
赋值 (当前棋局文件, “”)
赋值 (当前黑子, 0)
赋值 (当前白子, 0)
重定义数组 (临时棋子, 假, 8, 8)
重定义数组 (可下棋位置数组, 假, 8, 8)
重定义数组 (棋步记录数组, 假, 0)
重定义数组 (棋子, 假, 8, 8)
赋值 (., 相加 (#当前坐标, “:[1,1]”))
赋值 (., 相加 (#当前黑子, “0”))
赋值 (., 相加 (#当前白子, “0”))
赋值 (_启动窗口., 相加 (#标题, #没有文件))
赋值 (_启动窗口., 相加 (相乘 (#格宽度, 10), 5))
赋值 (_启动窗口., 相加 (相乘 (#格宽度, 10), 68))
画棋盘 (1) ' 画出新棋盘
赋值 (., 假)
赋值 (., 假)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        赋值 (棋子 [循环变量] [循环计数变量], 0)
    .计次循环尾 ()
.计次循环尾 ()
赋值 (_启动窗口., 1)
判断是否人机对战 (是否人机对战)
判断电脑思路类型 (是否高智力电脑)
判断是否玩家先行 (是否玩家先行)
判断菜单显示 (是否游戏中)
更新启动窗口标题 (“”)

.子程序 判断显示, 空白型, 公开, 
.判断开始 (等于 (是否高智力电脑, 假))
    赋值 (., 假)
    赋值 (., 真)
.默认
    赋值 (., 真)
    赋值 (., 假)
.判断结束


.子程序 判断先行, 空白型, 公开, 
.参数 是否玩家先行变量, 逻辑型, , 

.判断开始 (等于 (是否玩家先行变量, 真))
    赋值 (., 真)
    赋值 (., 假)
.默认
    赋值 (., 假)
    赋值 (., 真)
.判断结束


.子程序 判断是否人机对战, 空白型, 公开, 
.参数 是否人机对战变量, 逻辑型, , 

.判断开始 (等于 (是否人机对战变量, 真))
    赋值 (., 真)
    赋值 (., 假)
    赋值 (., 假)
.默认
    赋值 (., 假)
    赋值 (., 真)
    赋值 (., 真)
.判断结束


.子程序 判断是否玩家先行, 空白型, 公开, 
.参数 是否玩家先行变量, 逻辑型, , 

.判断开始 (等于 (是否玩家先行变量, 真))
    赋值 (., 真)
    赋值 (., 假)
.默认
    赋值 (., 假)
    赋值 (., 真)
.判断结束


.子程序 __启动窗口_尺寸被改变, 空白型, 公开, 移动窗口组件以实现组件形状与位置的改变。
0.移动 (0, 相减 (_启动窗口., 5), 相减 (_启动窗口., 66))
0.移动 (相减 (_启动窗口., 64), 128, 20)
相加 (., 2).移动 (相减 (_启动窗口., 64), 相除 (相减 (_启动窗口., ., 10), 2), 20)
相加 (., 4, .).移动 (相减 (_启动窗口., 64), ., 20)

.子程序 画棋盘, 空白型, 公开, 
.参数 画线所需画板, 画板, , 
.参数 放大率, 双精度小数型, , 

.局部变量 a, 整数型, , , 

赋值 (画线所需画板., 1)
赋值 (画线所需画板., 3)
赋值 (画线所需画板., #黑色)
赋值 (画线所需画板., #浅灰)
画线所需画板.画矩形 (相减 (相乘 (放大率, #格宽度), 4), 相减 (相乘 (#格宽度, 放大率), 4), 相加 (相乘 (放大率, #格宽度, 9), 5), 相加 (相乘 (#格宽度, 放大率, 9), 5))
赋值 (画线所需画板., 1)
.计次循环首 (9, a)
    画线所需画板.画直线 (相乘 (#格宽度, 放大率), 相乘 (#格宽度, 放大率, a), 相乘 (#格宽度, 放大率, 9), 相乘 (#格宽度, 放大率, a))
    画线所需画板.画直线 (相乘 (#格宽度, 放大率, a), 相乘 (#格宽度, 放大率), 相乘 (#格宽度, 放大率, a), 相乘 (#格宽度, 放大率, 9))
.计次循环尾 ()

.子程序 _画板1_鼠标位置被移动, 逻辑型, 公开, 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 

赋值 (., 真)
赋值 (横坐标, 相加 (相乘 (四舍五入 (相除 (相减 (横向位置, 相除 (#格宽度, 2)), #格宽度), ), #格宽度), 相除 (#格宽度, 2)))
赋值 (纵坐标, 相加 (相乘 (四舍五入 (相除 (相减 (纵向位置, 相除 (#格宽度, 2)), #格宽度), ), #格宽度), 相除 (#格宽度, 2)))
.判断开始 (并且 (小于 (横坐标, #格宽度), 小于 (纵坐标, #格宽度)))
    赋值 (横坐标, 相乘 (#格宽度, 1.5))
    赋值 (纵坐标, 相乘 (#格宽度, 1.5))
.判断 (并且 (大于 (横坐标, 相乘 (9, #格宽度)), 小于 (纵坐标, #格宽度)))
    赋值 (横坐标, 相乘 (8.5, #格宽度))
    赋值 (纵坐标, 相乘 (#格宽度, 1.5))
.判断 (并且 (小于 (横坐标, #格宽度), 大于 (纵坐标, 相乘 (9, #格宽度))))
    赋值 (横坐标, 相乘 (#格宽度, 1.5))
    赋值 (纵坐标, 相乘 (8.5, #格宽度))
.判断 (并且 (大于 (横坐标, 相乘 (9, #格宽度)), 大于 (纵坐标, 相乘 (9, #格宽度))))
    赋值 (横坐标, 相乘 (8.5, #格宽度))
    赋值 (纵坐标, 相乘 (8.5, #格宽度))
.判断 (大于 (横坐标, 相乘 (9, #格宽度)))
    赋值 (横坐标, 相乘 (8.5, #格宽度))
.判断 (小于 (横坐标, #格宽度))
    赋值 (横坐标, 相乘 (#格宽度, 1.5))
.判断 (大于 (纵坐标, 相乘 (9, #格宽度)))
    赋值 (纵坐标, 相乘 (8.5, #格宽度))
.判断 (小于 (纵坐标, #格宽度))
    赋值 (纵坐标, 相乘 (#格宽度, 1.5))
.默认
    移动鼠标外形框 (横坐标, 纵坐标)
.判断结束
移动鼠标外形框 (横坐标, 纵坐标)

.子程序 移动鼠标外形框, 空白型, 公开, 
.参数 外形框, 外形框, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 

赋值 (外形框., 相减 (横坐标, 4))
赋值 (外形框., 相减 (纵坐标, 4))
赋值 (., 相加 (#当前坐标, “:[”, 到文本 (相减 (相除 (横坐标, #格宽度), 0.5)), “,”, 到文本 (相减 (相除 (纵坐标, #格宽度), 0.5)), “]”))

.子程序 判断下棋, 空白型, 公开, 用来实现判断黑白棋规则的子程序。
.参数 横, 整数型, , 1-8
.参数 纵, 整数型, , 1-8
.参数 从属常数, 整数型, , 1表示人，2表示电脑，0表示改位置无棋子。

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 计数变量, 整数型, , , 

.变量循环首 (1, 相减 (横, 1), 1, 循环变量) ' 分别判断不同方向上的棋路，以实现其规则的体现。下同。
    .判断开始 (等于 (棋子 [相减 (横, 循环变量)] [纵], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [纵], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相减 (横, 循环计数变量)] [纵], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (纵, 1), 1, 循环变量)
    .判断开始 (等于 (棋子 [横] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [横] [相减 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [横] [相减 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (8, 横), 1, 循环变量)
    .判断开始 (等于 (棋子 [相加 (横, 循环变量)] [纵], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [纵], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相加 (横, 循环计数变量)] [纵], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (8, 纵), 1, 循环变量)
    .判断开始 (等于 (棋子 [横] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [横] [相加 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [横] [相加 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (大于 (相加 (横, 循环变量), 8), 大于 (相加 (纵, 循环变量), 8)))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相加 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相加 (横, 循环计数变量)] [相加 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (小于 (相减 (横, 循环变量), 1), 小于 (相减 (纵, 循环变量), 1)))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相减 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相减 (横, 循环计数变量)] [相减 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (大于 (相加 (横, 循环变量), 8), 小于 (相减 (纵, 循环变量), 1)))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相减 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相加 (横, 循环计数变量)] [相减 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (小于 (相减 (横, 循环变量), 1), 大于 (相加 (纵, 循环变量), 8)))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相加 (纵, 循环变量)], 从属常数))
        .变量循环首 (1, 相减 (循环变量, 1), 1, 循环计数变量)
            赋值 (棋子 [相减 (横, 循环计数变量)] [相加 (纵, 循环计数变量)], 从属常数)
        .变量循环尾 ()
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()

.子程序 _新游戏_被选择, 空白型, 公开, 
.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 

.判断开始 (等于 (是否玩家先行, 真))
    .判断开始 (等于 (., 真))
        初始化 (“442552451541”, 真)
        赋值 (当前棋局文件, “”)
    .默认
        初始化 (“442552451541”, 假)
        赋值 (当前棋局文件, “”)
    .判断结束
    
.判断 (等于 (., 真))
    初始化 (“442552451541”, 真)
    赋值 (当前棋局文件, “”)
    简单电脑思路算法 (横坐标, 纵坐标, 取反从属常数 (从属符号常数, 反从属常数))
    计算可下棋位置 (从属符号常数, 可下棋位置数组)
    显示可下棋位置 (从属符号常数, 可下棋位置数组)
    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
    判断显示悔棋菜单 (可否悔棋)
.默认
    初始化 (“442552451541”, 假)
    赋值 (当前棋局文件, “”)
.判断结束


.子程序 判断显示悔棋菜单, 空白型, 公开, 动态判断悔棋菜单的显示
.参数 可否悔棋变量, 逻辑型, , 

.判断开始 (等于 (可否悔棋变量, 真))
    赋值 (., 假)
.默认
    赋值 (., 真)
.判断结束


.子程序 初始化, 空白型, 公开, 初始化程序以开始新游戏
.参数 开局库, 文本型, , 
.参数 是否人机对战变量, 逻辑型, , 

.局部变量 计数变量, 整数型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 

重定义数组 (棋子, 假, 8, 8)
重定义数组 (可下棋位置数组, 假, 8, 8)
重定义数组 (棋步记录数组, 假, 0)
赋值 (., 假)
赋值 (棋分值, 0)
赋值 (从属符号常数, 1)
赋值 (是否游戏中, 真)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 计数变量)
        赋值 (棋子 [循环变量] [计数变量], 0)
    .计次循环尾 ()
.计次循环尾 ()
更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
.判断开始 (等于 (是否人机对战变量, 假))
    读初始化数据 (开局库)
    计算可下棋位置 (从属符号常数, 可下棋位置数组)
    显示可下棋位置 (从属符号常数, 可下棋位置数组)
    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
    显示当前双方棋子数 (棋子)
    判断菜单显示 (是否游戏中)
    赋值 (开局库存储变量, 开局库)
    赋值 (当前棋局文件, “”)
    复制数组 (临时棋子, 棋子)
    赋值 (可否悔棋, 假)
    判断显示悔棋菜单 (可否悔棋)
    更新启动窗口标题 (“”)
.默认
    读初始化数据 (开局库)
    计算可下棋位置 (从属符号常数, 可下棋位置数组)
    显示可下棋位置 (从属符号常数, 可下棋位置数组)
    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
    显示当前双方棋子数 (棋子)
    判断菜单显示 (是否游戏中)
    赋值 (开局库存储变量, 开局库)
    赋值 (当前棋局文件, “”)
    复制数组 (临时棋子, 棋子)
    赋值 (可否悔棋, 假)
    判断显示悔棋菜单 (可否悔棋)
    更新启动窗口标题 (“”)
.判断结束


.子程序 更新显示, 空白型, 公开, 
.参数 画线所需画板, 画板, , 
.参数 放大率, 双精度小数型, , 
.参数 棋子变量, 整数型, 数组, 
.参数 可下棋位置数组变量, 整数型, 数组, 
.参数 棋步记录数组变量, 文本型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 格宽度, 整数型, , , 

画棋盘 (1)
赋值 (格宽度, 相乘 (#格宽度, 放大率))
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (棋子变量 [循环变量] [循环计数变量], 0)) ' 棋子数据等于0时表示无棋子
            赋值 (画线所需画板., 1)
            赋值 (画线所需画板., #浅灰) ' 设置为浅灰以清除原有椭圆
            赋值 (画线所需画板., #浅灰)
            画线所需画板.画椭圆 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 12), 相减 (相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度)), 12), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环变量), 12), 相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度), 12)) ' 在指定位置划出椭圆以更新显示，刷子颜色为填充颜色
        .判断 (等于 (棋子变量 [循环变量] [循环计数变量], 1)) ' 棋子数据等于1时表示其为玩家的棋子
            赋值 (画线所需画板., 1)
            赋值 (画线所需画板., #黑色)
            赋值 (画线所需画板., #黑色) ' 调整画笔及刷子颜色为黑色以画出黑色棋子
            画线所需画板.画椭圆 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 12), 相减 (相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度)), 12), 相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度), 12), 相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度), 12))
        .判断 (等于 (棋子变量 [循环变量] [循环计数变量], 2)) ' 棋子数据等于2时表示其为电脑的棋子
            赋值 (画线所需画板., 1)
            赋值 (画线所需画板., #白色)
            赋值 (画线所需画板., #白色) ' 同理画出白色棋子
            画线所需画板.画椭圆 (相减 (相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环变量)), 12), 相减 (相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度)), 12), 相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度), 12), 相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度), 12))
        .默认
            返回 () ' 无情况遗漏，故在此返回以实现程序结的终结
        .判断结束
        .判断开始 (等于 (可下棋位置数组变量 [循环变量] [循环计数变量], 1)) ' 棋子数据等于4时表示可下棋位置数据数组
            赋值 (画线所需画板., 3)
            赋值 (画线所需画板., #蓝色)
            赋值 (画线所需画板., #蓝色)
            画线所需画板.画直线 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 6), 相减 (相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度)), 6), 相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量), 6))
            画线所需画板.画直线 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环变量), 6), 相减 (相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量)), 6))
        .判断 (等于 (可下棋位置数组变量 [循环变量] [循环计数变量], 2)) ' 棋子数据等于4时表示可下棋位置数据数组
            赋值 (画线所需画板., 3)
            赋值 (画线所需画板., #红色)
            赋值 (画线所需画板., #红色)
            画线所需画板.画直线 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 6), 相减 (相加 (相除 (格宽度, 2), 相乘 (循环计数变量, 格宽度)), 6), 相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量), 6))
            画线所需画板.画直线 (相减 (相加 (相除 (格宽度, 2), 相乘 (循环变量, 格宽度)), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量), 6), 相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环变量), 6), 相减 (相加 (相除 (格宽度, 2), 相乘 (格宽度, 循环计数变量)), 6))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

.子程序 计算可下棋位置, 空白型, 公开, 本程序用来计算可走棋位置。
.参数 从属常数, 整数型, , 1表示人，2表示电脑，0表示改位置无棋子。
.参数 可下棋位置, 整数型, 数组, 定义可否下棋的整数型数组，0表示不可，1和2分别表示相应的玩家可以下棋。

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 

重定义数组 (可下棋位置, 假, 8, 8)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (并且 (不等于 (判断可否下棋 (循环变量, 循环计数变量, 从属常数), 0), 等于 (棋子 [循环变量] [循环计数变量], 0))) ' 若要可下棋，则该位置必须满足无棋子且可以落子。
            赋值 (可下棋位置 [循环变量] [循环计数变量], 从属常数)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

.子程序 显示可下棋位置, 空白型, 公开, 本程序十分重要，因为其决定了终局分流的作用
.参数 从属常数, 整数型, , 
.参数 可下棋位置, 整数型, 数组, 

.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时可下棋位置, 整数型, , "0", 

赋值 (反从属常数, 取反从属常数 (从属常数, 反从属常数))
重定义数组 (临时可下棋位置, 假, 0)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (可下棋位置 [循环变量] [循环计数变量], 从属常数))
            加入成员 (临时可下棋位置, 从属常数)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
.如果真 (等于 (从属常数, 1)) ' 待作修改
    赋值 (反从属常数, 2)
.如果真结束
.判断开始 (等于 (取数组成员数 (临时可下棋位置), 0)) ' 如无棋子可下，则继续由对方下棋。
    .判断开始 (等于 (是否人机对战, 真))
        .判断开始 (等于 (判断终局 (从属常数, 可下棋位置数组), 假))
            信息框 (相加 (“玩家”, 到文本 (从属常数), “无棋可下，由玩家”, 到文本 (取反从属常数 (从属常数, 反从属常数)), “继续下棋！”), 相加 (#警告图标, #确认钮), “黑白棋”)
            简单电脑思路算法 (横坐标, 纵坐标, 取反从属常数 (从属常数, 反从属常数))
            计算可下棋位置 (从属常数, 可下棋位置)
            显示可下棋位置 (从属常数, 可下棋位置)
            更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
            赋值 (., 真)
        .默认
            判断赢家 (从属常数, 取反从属常数 (从属常数, 反从属常数))
            赋值 (是否游戏中, 假)
            返回 ()
        .判断结束
        
    .判断 (等于 (判断终局 (从属常数, 可下棋位置数组), 假))
        信息框 (相加 (“玩家”, 到文本 (从属常数), “无棋可下，由玩家”, 到文本 (取反从属常数 (从属常数, 反从属常数)), “继续下棋！”), 相加 (#警告图标, #确认钮), “黑白棋”)
        赋值 (从属符号常数, 取反从属常数 (从属常数, 反从属常数))
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 可下棋位置)
        显示可下棋位置 (取反从属常数 (从属常数, 反从属常数), 可下棋位置)
        更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
        赋值 (., 真)
    .默认
        判断赢家 (从属常数, 取反从属常数 (从属常数, 反从属常数))
        赋值 (是否游戏中, 假)
        返回 ()
    .判断结束
    
.默认
    
.判断结束


.子程序 判断终局, 逻辑型, 公开, 当双方都无子可下时，则棋局结束
.参数 从属常数, 整数型, , 
.参数 可下棋位置数组变量, 整数型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时可下棋位置, 整数型, , "0", 
.局部变量 数组成员数, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 
.局部变量 数组成员数量, 整数型, , , 

重定义数组 (临时可下棋位置, 假, 0)
计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 可下棋位置数组变量) ' 取反方可否下棋数据
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (可下棋位置数组变量 [循环变量] [循环计数变量], 取反从属常数 (从属常数, 反从属常数)))
            加入成员 (临时可下棋位置, 取反从属常数 (从属常数, 反从属常数))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
赋值 (数组成员数量, 取数组成员数 (临时可下棋位置))
重定义数组 (临时可下棋位置, 假, 0)
计算可下棋位置 (从属常数, 可下棋位置数组变量) ' 去正方可否下棋数据
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (可下棋位置数组变量 [循环变量] [循环计数变量], 从属常数))
            加入成员 (临时可下棋位置, 从属常数)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
赋值 (数组成员数, 取数组成员数 (临时可下棋位置))
.判断开始 (并且 (等于 (数组成员数, 0), 等于 (数组成员数量, 0)))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取反从属常数, 整数型, 公开, 
.参数 从属常数, 整数型, , 
.参数 反从属常数, 整数型, , 

.判断开始 (等于 (从属常数, 1))
    赋值 (反从属常数, 2)
.判断 (等于 (从属常数, 2))
    赋值 (反从属常数, 1)
.判断 (等于 (从属常数, 0))
    赋值 (反从属常数, 0) ' 若从属常数为0，说明棋局未开始。
.默认
    返回 (反从属常数)
.判断结束
返回 (反从属常数)

.子程序 显示当前双方棋子数, 空白型, 公开, 
.参数 当前棋子数, 整数型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时黑棋子数, 整数型, , "0", 
.局部变量 临时白棋子数, 整数型, , "0", 

重定义数组 (临时黑棋子数, 假, 0)
重定义数组 (临时白棋子数, 假, 0)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (当前棋子数 [循环变量] [循环计数变量], 1))
            加入成员 (临时黑棋子数, 1)
        .判断 (等于 (当前棋子数 [循环变量] [循环计数变量], 2))
            加入成员 (临时白棋子数, 2)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
赋值 (., 相加 (#当前黑子, 到文本 (取数组成员数 (临时黑棋子数))))
赋值 (., 相加 (#当前白子, 到文本 (取数组成员数 (临时白棋子数))))

.子程序 判断可否下棋, 整数型, 公开, 用来计算是否有棋可下的函数，返回0代表无棋可下
.参数 横, 整数型, , 
.参数 纵, 整数型, , 
.参数 从属常数, 整数型, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 变量返回值, 整数型, , , 

赋值 (变量返回值, 0)
.变量循环首 (1, 相减 (横, 1), 1, 循环变量) ' 通过不同方向的变量循环来实现黑白其本身规则的体现，并通过反馈的变量值来计算可下棋位置的数目和位置。下同。
    .判断开始 (等于 (棋子 [相减 (横, 循环变量)] [纵], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [纵], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (8, 横), 1, 循环变量)
    .判断开始 (等于 (棋子 [相加 (横, 循环变量)] [纵], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [纵], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (纵, 1), 1, 循环变量)
    .判断开始 (等于 (棋子 [横] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [横] [相减 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 相减 (8, 纵), 1, 循环变量)
    .判断开始 (等于 (棋子 [横] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [横] [相加 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (大于 (相加 (横, 循环变量), 8), 大于 (相加 (纵, 循环变量), 8)))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相加 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (大于 (相加 (横, 循环变量), 8), 小于 (相减 (纵, 循环变量), 1)))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相加 (横, 循环变量)] [相减 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (小于 (相减 (横, 循环变量), 1), 小于 (相减 (纵, 循环变量), 1)))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相减 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相减 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, 循环变量)
    .判断开始 (或者 (小于 (相减 (横, 循环变量), 1), 大于 (相加 (纵, 循环变量), 8)))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相加 (纵, 循环变量)], 0))
        跳出循环 ()
    .判断 (等于 (棋子 [相减 (横, 循环变量)] [相加 (纵, 循环变量)], 从属常数))
        赋值 (变量返回值, 相减 (相加 (变量返回值, 循环变量), 1))
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
返回 (变量返回值)

.子程序 _人机对战_被选择, 空白型, 公开, 
赋值 (是否人机对战, 真)
判断是否人机对战 (是否人机对战)

.子程序 _双人对战_被选择, 空白型, 公开, 
赋值 (是否人机对战, 假)
判断是否人机对战 (是否人机对战)

.子程序 _画板1_鼠标左键被按下, 逻辑型, 公开, 设置画板上鼠标被单击触发事件
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 横, 整数型, , , 
.局部变量 纵, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 横坐标, 整数型, , , 
.局部变量 纵坐标, 整数型, , , 

赋值 (横, 四舍五入 (相除 (相减 (横向位置, 相除 (#格宽度, 2)), #格宽度), )) ' 其为鼠标所处位置在棋盘上所反映的横坐标值
赋值 (纵, 四舍五入 (相除 (相减 (纵向位置, 相除 (#格宽度, 2)), #格宽度), )) ' 其为纵坐标值
.判断开始 (等于 (是否游戏中, 真))
    .判断开始 (并且 (大于或等于 (横, 1), 大于或等于 (纵, 1), 小于或等于 (横, 8), 小于或等于 (纵, 8)))
        .判断开始 (等于 (是否人机对战, 假))
            .判断开始 (等于 (从属符号常数, 1))
                计算可下棋位置 (从属符号常数, 可下棋位置数组)
                .判断开始 (等于 (判断终局 (从属符号常数, 可下棋位置数组), 假))
                    .判断开始 (或者 (等于 (可下棋位置数组 [横] [纵], 0), 等于 (可下棋位置数组 [横] [纵], 取反从属常数 (从属符号常数, 反从属常数))))
                        返回 ()
                    .默认
                        复制数组 (临时棋子, 棋子)
                        赋值 (可否悔棋, 真)
                        判断显示悔棋菜单 (可否悔棋)
                        落子 (横, 纵, 从属符号常数)
                        赋值 (当前棋局文件, 相加 (当前棋局文件, 到文本 (横), 到文本 (纵), 到文本 (从属符号常数)))
                        判断下棋 (横, 纵, 从属符号常数)
                        显示当前双方棋子数 (棋子)
                        赋值 (从属符号常数, 相加 (从属符号常数, 1))
                        计算可下棋位置 (从属符号常数, 可下棋位置数组)
                        显示可下棋位置 (从属符号常数, 可下棋位置数组)
                        更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
                        赋值 (., 真)
                        移动外形框 (横, 纵)
                    .判断结束
                    
                .默认
                    赋值 (是否游戏中, 假)
                    返回 ()
                .判断结束
                
            .判断 (等于 (判断终局 (从属符号常数, 可下棋位置数组), 假))
                计算可下棋位置 (从属符号常数, 可下棋位置数组)
                .判断开始 (或者 (等于 (可下棋位置数组 [横] [纵], 0), 等于 (可下棋位置数组 [横] [纵], 取反从属常数 (从属符号常数, 反从属常数))))
                    返回 ()
                .默认
                    复制数组 (临时棋子, 棋子)
                    赋值 (可否悔棋, 真)
                    判断显示悔棋菜单 (可否悔棋)
                    落子 (横, 纵, 从属符号常数)
                    赋值 (当前棋局文件, 相加 (当前棋局文件, 到文本 (横), 到文本 (纵), 到文本 (从属符号常数)))
                    判断下棋 (横, 纵, 从属符号常数)
                    显示当前双方棋子数 (棋子)
                    赋值 (从属符号常数, 相减 (从属符号常数, 1))
                    计算可下棋位置 (从属符号常数, 可下棋位置数组)
                    显示可下棋位置 (从属符号常数, 可下棋位置数组)
                    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
                    赋值 (., 真)
                    移动外形框 (横, 纵)
                .判断结束
                
            .默认
                赋值 (是否游戏中, 假)
                返回 ()
            .判断结束
            
        .判断 (等于 (是否高智力电脑, 假))
            .判断开始 (等于 (从属符号常数, 1))
                计算可下棋位置 (从属符号常数, 可下棋位置数组)
                .判断开始 (等于 (判断终局 (从属符号常数, 可下棋位置数组), 假))
                    .判断开始 (或者 (等于 (可下棋位置数组 [横] [纵], 0), 等于 (可下棋位置数组 [横] [纵], 取反从属常数 (从属符号常数, 反从属常数))))
                        返回 ()
                    .默认
                        复制数组 (临时棋子, 棋子)
                        赋值 (可否悔棋, 真)
                        判断显示悔棋菜单 (可否悔棋)
                        落子 (横, 纵, 从属符号常数)
                        赋值 (当前棋局文件, 相加 (当前棋局文件, 到文本 (横), 到文本 (纵), 到文本 (从属符号常数)))
                        判断下棋 (横, 纵, 从属符号常数)
                        显示当前双方棋子数 (棋子)
                        移动外形框 (横, 纵)
                        赋值 (从属符号常数, 相加 (从属符号常数, 1))
                        简单电脑思路算法 (横坐标, 纵坐标, 从属符号常数)
                        赋值 (从属符号常数, 相减 (从属符号常数, 1))
                        计算可下棋位置 (从属符号常数, 可下棋位置数组)
                        显示可下棋位置 (从属符号常数, 可下棋位置数组)
                        更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
                        赋值 (., 真)
                    .判断结束
                    
                .默认
                    赋值 (是否游戏中, 假)
                    返回 ()
                .判断结束
                
            .判断 (等于 (判断终局 (从属符号常数, 可下棋位置数组), 假))
                计算可下棋位置 (从属符号常数, 可下棋位置数组)
                .判断开始 (或者 (等于 (可下棋位置数组 [横] [纵], 0), 等于 (可下棋位置数组 [横] [纵], 取反从属常数 (从属符号常数, 反从属常数))))
                    返回 ()
                .默认
                    复制数组 (临时棋子, 棋子)
                    赋值 (可否悔棋, 真)
                    判断显示悔棋菜单 (可否悔棋)
                    落子 (横, 纵, 从属符号常数)
                    赋值 (当前棋局文件, 相加 (当前棋局文件, 到文本 (横), 到文本 (纵), 到文本 (从属符号常数)))
                    判断下棋 (横, 纵, 从属符号常数)
                    显示当前双方棋子数 (棋子)
                    移动外形框 (横, 纵)
                    赋值 (从属符号常数, 相减 (从属符号常数, 1))
                    简单电脑思路算法 (横坐标, 纵坐标, 从属符号常数)
                    赋值 (从属符号常数, 相加 (从属符号常数, 1))
                    计算可下棋位置 (从属符号常数, 可下棋位置数组)
                    显示可下棋位置 (从属符号常数, 可下棋位置数组)
                    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
                    赋值 (., 真)
                .判断结束
                
            .默认
                赋值 (是否游戏中, 假)
                返回 ()
            .判断结束
            
        .默认
            
        .判断结束
        
    .默认
        返回 ()
    .判断结束
    
.默认
    返回 ()
.判断结束


.子程序 判断赢家, 空白型, 公开, 用来实现赢家与和棋的判断
.参数 从属常数, 整数型, , 
.参数 反从属常数, 整数型, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 玩家从属常数棋子个数, 整数型, , "0", 
.局部变量 玩家反从属常数棋子个数, 整数型, , "0", 

重定义数组 (玩家从属常数棋子个数, 假, 0)
重定义数组 (玩家反从属常数棋子个数, 假, 0)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (棋子 [循环变量] [循环计数变量], 从属常数))
            加入成员 (玩家从属常数棋子个数, 从属常数)
        .判断 (等于 (棋子 [循环变量] [循环计数变量], 反从属常数))
            加入成员 (玩家反从属常数棋子个数, 反从属常数)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
.判断开始 (大于 (取数组成员数 (玩家从属常数棋子个数), 取数组成员数 (玩家反从属常数棋子个数)))
    信息框 (相加 (“黑白棋棋局已结束。”, #换行符, “玩家[”, 到文本 (从属常数), “]”, 到文本 (取数组成员数 (玩家从属常数棋子个数)), “子；”, #换行符, “玩家[”, 到文本 (反从属常数), “]”, 到文本 (取数组成员数 (玩家反从属常数棋子个数)), “子；”, #换行符, “玩家[”, 到文本 (从属常数), “]”, “获胜。”), 相加 (#警告图标, #确认钮), “黑白棋 - 棋局已结束”)
    判断菜单显示 (是否游戏中)
.判断 (小于 (取数组成员数 (玩家从属常数棋子个数), 取数组成员数 (玩家反从属常数棋子个数)))
    信息框 (相加 (“黑白棋棋局已结束。”, #换行符, “玩家[”, 到文本 (从属常数), “]”, 到文本 (取数组成员数 (玩家从属常数棋子个数)), “子；”, #换行符, “玩家[”, 到文本 (反从属常数), “]”, 到文本 (取数组成员数 (玩家反从属常数棋子个数)), “子；”, #换行符, “玩家[”, 到文本 (反从属常数), “]”, “获胜。”), 相加 (#警告图标, #确认钮), “黑白棋 - 棋局已结束”)
    判断菜单显示 (是否游戏中)
.判断 (等于 (取数组成员数 (玩家从属常数棋子个数), 取数组成员数 (玩家反从属常数棋子个数)))
    信息框 (相加 (“黑白棋棋局已结束。”, #换行符, “玩家[”, 到文本 (从属常数), “]”, 到文本 (取数组成员数 (玩家从属常数棋子个数)), “子；”, #换行符, “玩家[”, 到文本 (反从属常数), “]”, 到文本 (取数组成员数 (玩家反从属常数棋子个数)), “子；”, #换行符, “本局棋和棋。”), 相加 (#警告图标, #确认钮), “黑白棋 - 棋局已结束”)
    判断菜单显示 (是否游戏中)
.默认
    返回 ()
.判断结束


.子程序 移动外形框, 空白型, 公开, 
.参数 外形框, 外形框, , 
.参数 横, 整数型, , 
.参数 纵, 整数型, , 

赋值 (外形框., 相减 (相加 (相除 (#格宽度, 2), 相乘 (#格宽度, 横)), 6))
赋值 (外形框., 相减 (相加 (相除 (#格宽度, 2), 相乘 (#格宽度, 纵)), 6))

.子程序 落子, 空白型, 公开, 
.参数 横, 整数型, , 
.参数 纵, 整数型, , 
.参数 从属常数, 整数型, , 

.局部变量 记录变量, 整数型, , , 
.局部变量 临时棋步数组, 文本型, , , 

赋值 (棋子 [横] [纵], 从属常数)

.子程序 _退出_被选择, 空白型, 公开, 
退出询问 (是否游戏中)

.子程序 退出询问, 空白型, 公开, 
.参数 是否游戏中变量, 逻辑型, , 

.局部变量 信息框整数返回变量, 整数型, , , 

.判断开始 (等于 (是否游戏中变量, 假))
    赋值 (信息框整数返回变量, 信息框 (“您确定要退出程序吗？”, 相加 (#警告图标, #确认取消钮), “黑白棋”))
    .判断开始 (等于 (信息框整数返回变量, 0))
        结束 ()
    .判断 (等于 (信息框整数返回变量, 1))
        返回 ()
    .默认
        返回 ()
    .判断结束
    
.默认
    赋值 (信息框整数返回变量, 信息框 (“您当前正在游戏中，确认退出吗？”, 相加 (#确认取消钮, #警告图标), “黑白棋”))
    .判断开始 (等于 (信息框整数返回变量, 0))
        结束 ()
    .判断 (等于 (信息框整数返回变量, 1))
        返回 ()
    .默认
        返回 ()
    .判断结束
    
.判断结束


.子程序 读初始化数据, 逻辑型, 公开, 
.参数 开局库, 文本型, , 开局库一定要是删全部空以后文本长度能被3整除的文本。否则将出错。

.局部变量 开局库数据, 文本型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (开局库数据, 删全部空 (开局库))
.判断开始 (不等于 (求余数 (取文本长度 (开局库数据), 3), 0))
    信息框 (“您所打开的并非正确开局库文件！请确定其为原始文件！”, 相加 (#警告图标, #确认钮), #黑白棋)
    返回 (假)
.默认
    .计次循环首 (取文本长度 (开局库数据), 循环变量)
        .判断开始 (或者 (小于 (到数值 (取文本中间 (开局库数据, 循环变量, 1)), 1), 大于 (到数值 (取文本中间 (开局库数据, 循环变量, 1)), 8)))
            信息框 (“您所打开的并非正确开局库文件！请确定其为原始文件！”, 相加 (#警告图标, #确认钮), #黑白棋)
            返回 (假)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    .计次循环首 (整除 (取文本长度 (开局库数据), 3), 循环变量)
        赋值 (临时文本, 取文本中间 (开局库数据, 相加 (1, 相乘 (相减 (循环变量, 1), 3)), 3))
        落子 (到数值 (取文本中间 (临时文本, 1, 1)), 到数值 (取文本中间 (临时文本, 2, 1)), 到数值 (取文本中间 (临时文本, 3, 1)))
    .计次循环尾 ()
    返回 (真)
.判断结束


.子程序 计算一步走法, 空白型, 公开, 
.参数 横, 整数型, , 
.参数 纵, 整数型, , 
.参数 从属常数, 整数型, , 



.子程序 __启动窗口_可否被关闭, 逻辑型, 公开, 
.局部变量 信息框整数返回变量, 整数型, , , 

.判断开始 (等于 (是否游戏中, 假))
    赋值 (信息框整数返回变量, 信息框 (“您确定要退出程序吗？”, 相加 (#警告图标, #确认取消钮), “黑白棋”))
    .判断开始 (等于 (信息框整数返回变量, 0))
        返回 (真)
    .判断 (等于 (信息框整数返回变量, 1))
        返回 (假)
    .默认
        返回 (假)
    .判断结束
    
.默认
    赋值 (信息框整数返回变量, 信息框 (“您当前正在游戏中，确认退出吗？”, 相加 (#确认取消钮, #警告图标), “黑白棋”))
    .判断开始 (等于 (信息框整数返回变量, 0))
        返回 (真)
    .判断 (等于 (信息框整数返回变量, 1))
        返回 (假)
    .默认
        返回 (假)
    .判断结束
    
.判断结束


.子程序 保存文件, 逻辑型, 公开, 用来保存棋局文件
.参数 棋子位置, 整数型, 数组, 
.参数 通用对话框, 通用对话框, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 文件号, 整数型, , , 

.判断开始 (等于 (写开局库文件 (棋子, 通用对话框), 真))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 _低智商电脑_被选择, 空白型, 公开, 
赋值 (是否高智力电脑, 假)
判断电脑思路类型 (是否高智力电脑)

.子程序 判断电脑思路类型, 空白型, 公开, 
.参数 是否高智力电脑变量, 逻辑型, , 

.判断开始 (等于 (是否高智力电脑变量, 真))
    赋值 (., 真)
    赋值 (., 假)
.默认
    赋值 (., 假)
    赋值 (., 真)
.判断结束


.子程序 _疯狂电脑_被选择, 空白型, 公开, 
赋值 (是否高智力电脑, 真)
判断电脑思路类型 (是否高智力电脑)

.子程序 _读取棋局_被选择, 空白型, 公开, 
读取棋局文件 ()

.子程序 读取棋局文件, 空白型, 公开, 
.参数 通用对话框, 通用对话框, , 

.局部变量 文件号, 整数型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时文本变量, 文本型, , , 

.如果真 (通用对话框.打开 ())
    赋值 (文件号, 打开文件 (通用对话框., #读入, ))
    读入数据 (文件号, 临时文本)
    关闭文件 (文件号)
    初始化 (临时文本, 是否人机对战)
    更新启动窗口标题 (通用对话框.)
.如果真结束
返回 ()

.子程序 _制作开局库文件_被选择, 空白型, 公开, 
载入 (制作黑白棋开局库窗口, _启动窗口, 真)

.子程序 简单电脑思路算法, 空白型, 公开, 本程序用来实现简单电脑（即与人下棋时的类似的思路）的算法。
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 从属常数, 整数型, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时横坐标, 整数型, , , 
.局部变量 临时纵坐标, 整数型, , , 
.局部变量 待定估值常数, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 
.局部变量 保存棋分值数组, 整数型, , "0", 
.局部变量 临时可下棋位置, 整数型, , "0", 
.局部变量 计数变量, 整数型, , , 

重定义数组 (保存棋分值数组, 假, 8, 8)
重定义数组 (临时可下棋位置, 假, 8, 8)
计算可下棋位置 (从属常数, 可下棋位置数组)
.如果真 (并且 (等于 (棋子 [1] [1], 0), 大于 (判断可否下棋 (1, 1, 从属常数), 0)))
    赋值 (保存棋分值数组 [1] [1], 相加 (#低智商电脑占角得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 1, 从属常数)), #低智商电脑占边得分, #低智商普通步得分)) ' 四角得分计算情况
.如果真结束
.如果真 (并且 (等于 (棋子 [1] [8], 0), 大于 (判断可否下棋 (1, 8, 从属常数), 0)))
    赋值 (保存棋分值数组 [1] [8], 相加 (#低智商普通步得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 8, 从属常数)), #低智商电脑占角得分, #低智商电脑占边得分))
.如果真结束
.如果真 (并且 (等于 (棋子 [8] [1], 0), 大于 (判断可否下棋 (8, 1, 从属常数), 0)))
    赋值 (保存棋分值数组 [8] [1], 相加 (#低智商普通步得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 1, 从属常数)), #低智商电脑占角得分, #低智商电脑占边得分))
.如果真结束
.如果真 (并且 (等于 (棋子 [8] [8], 0), 大于 (判断可否下棋 (8, 8, 从属常数), 0)))
    赋值 (保存棋分值数组 [8] [8], 相加 (#低智商普通步得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 8, 从属常数)), #低智商电脑占角得分, #低智商电脑占边得分))
.如果真结束
.计次循环首 (6, 循环变量)
    .判断开始 (并且 (大于 (判断可否下棋 (1, 相加 (循环变量, 1), 从属常数), 0), 等于 (棋子 [1] [相加 (循环变量, 1)], 0))) ' 要想让电脑计算在某坐标下子，前提是该坐标无子且可以下棋，下同
        赋值 (棋子 [1] [相加 (循环变量, 1)], 从属常数)
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 临时可下棋位置) ' 取模拟在某处下子后可能结果棋子数组
        .判断开始 (或者 (等于 (临时可下棋位置 [1] [1], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [1] [8], 取反从属常数 (从属常数, 反从属常数))))
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [1] [循环计数变量], 取反从属常数 (从属常数, 反从属常数))) ' 用来判断是否同时受角与边的威胁以计算可观得分，下同
                    赋值 (保存棋分值数组 [1] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [1] [相加 (循环变量, 1)], 0)
                .默认
                    赋值 (保存棋分值数组 [1] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 相加 (循环变量, 1), 从属常数)))) ' 若下子后只有角受威胁，则返回一个分值
                    赋值 (棋子 [1] [相加 (循环变量, 1)], 0) ' 在下一循环开始前要将虚拟下的棋还原，下同
                .判断结束
                
            .变量循环尾 ()
        .默认
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [1] [循环计数变量], 取反从属常数 (从属常数, 反从属常数)))
                     ' 若下子后只有边受威胁，则返回另一个分值
                    赋值 (保存棋分值数组 [1] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [1] [相加 (循环变量, 1)], 0)
                .默认
                    赋值 (保存棋分值数组 [1] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (1, 相加 (循环变量, 1), 从属常数)))) ' 均无威胁，则返回第三个分值，下同
                    赋值 (棋子 [1] [相加 (循环变量, 1)], 0)
                .判断结束
                
            .变量循环尾 ()
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
.计次循环首 (6, 循环变量)
    .判断开始 (并且 (等于 (棋子 [相加 (循环变量, 1)] [1], 0), 大于 (判断可否下棋 (相加 (循环变量, 1), 1, 从属常数), 0)))
        赋值 (棋子 [相加 (循环变量, 1)] [1], 从属常数)
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 临时可下棋位置)
        .判断开始 (或者 (等于 (临时可下棋位置 [1] [1], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [8] [1], 取反从属常数 (从属常数, 反从属常数))))
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [循环计数变量] [1], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [1], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 1, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [1], 0)
                .默认
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [1], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 1, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [1], 0)
                .判断结束
                
            .变量循环尾 ()
        .默认
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [循环计数变量] [1], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [1], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 1, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [1], 0)
                .默认
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [1], 相加 (#低智商普通步得分, #低智商电脑占边得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 1, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [1], 0)
                .判断结束
                
            .变量循环尾 ()
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
.计次循环首 (6, 循环变量)
    .判断开始 (并且 (等于 (棋子 [8] [相加 (循环变量, 1)], 0), 大于 (判断可否下棋 (8, 相加 (循环变量, 1), 从属常数), 0)))
        赋值 (棋子 [8] [相加 (循环变量, 1)], 从属常数)
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 临时可下棋位置)
        .判断开始 (或者 (等于 (临时可下棋位置 [8] [8], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [8] [1], 取反从属常数 (从属常数, 反从属常数))))
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [8] [循环计数变量], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [8] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [8] [相加 (循环变量, 1)], 0)
                .默认
                    赋值 (保存棋分值数组 [8] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [8] [相加 (循环变量, 1)], 0)
                .判断结束
                
            .变量循环尾 ()
        .默认
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [8] [循环计数变量], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [8] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [8] [相加 (循环变量, 1)], 0)
                .默认
                    赋值 (保存棋分值数组 [8] [相加 (循环变量, 1)], 相加 (#低智商普通步得分, #低智商电脑占边得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (8, 相加 (循环变量, 1), 从属常数))))
                    赋值 (棋子 [8] [相加 (循环变量, 1)], 0)
                .判断结束
                
            .变量循环尾 ()
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
.计次循环首 (6, 循环变量)
    .判断开始 (并且 (等于 (棋子 [相加 (循环变量, 1)] [8], 0), 大于 (判断可否下棋 (相加 (循环变量, 1), 8, 从属常数), 0)))
        赋值 (棋子 [相加 (循环变量, 1)] [8], 从属常数)
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 临时可下棋位置)
        .判断开始 (或者 (等于 (临时可下棋位置 [1] [8], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [8] [8], 取反从属常数 (从属常数, 反从属常数))))
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [循环计数变量] [8], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [8], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 8, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [8], 0)
                .默认
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [8], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占边直边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 8, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [8], 0)
                .判断结束
                
            .变量循环尾 ()
        .默认
            .变量循环首 (2, 7, 1, 循环计数变量)
                .判断开始 (等于 (临时可下棋位置 [循环计数变量] [8], 取反从属常数 (从属常数, 反从属常数)))
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [8], 相加 (#低智商普通步得分, #低智商电脑占边得分, #低智商电脑占直边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 8, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [8], 0)
                .默认
                    赋值 (保存棋分值数组 [相加 (循环变量, 1)] [8], 相加 (#低智商普通步得分, #低智商电脑占边得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (相加 (循环变量, 1), 8, 从属常数))))
                    赋值 (棋子 [相加 (循环变量, 1)] [8], 0)
                .判断结束
                
            .变量循环尾 ()
        .判断结束
        
    .默认
        
    .判断结束
    
.计次循环尾 ()
.变量循环首 (2, 7, 1, 循环变量)
    .变量循环首 (2, 7, 1, 循环计数变量)
        .判断开始 (并且 (大于 (判断可否下棋 (循环变量, 循环计数变量, 从属常数), 0), 等于 (棋子 [循环变量] [循环计数变量], 0)))
            赋值 (棋子 [循环变量] [循环计数变量], 从属常数)
            计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 临时可下棋位置)
            .判断开始 (或者 (等于 (临时可下棋位置 [1] [1], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [8] [1], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [1] [8], 取反从属常数 (从属常数, 反从属常数)), 等于 (临时可下棋位置 [8] [8], 取反从属常数 (从属常数, 反从属常数))))
                .变量循环首 (2, 7, 1, 计数变量)
                    .判断开始 (等于 (临时可下棋位置 [1] [计数变量], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [计数变量] [1], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [8] [计数变量], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [计数变量] [8], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .默认
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占边斜边受角威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断结束
                    
                .变量循环尾 ()
            .默认
                .变量循环首 (2, 7, 1, 计数变量)
                    .判断开始 (等于 (临时可下棋位置 [1] [计数变量], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [计数变量] [1], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [8] [计数变量], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断 (等于 (临时可下棋位置 [计数变量] [8], 取反从属常数 (从属常数, 反从属常数)))
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, #低智商电脑占斜边受边威胁得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .默认
                        赋值 (保存棋分值数组 [循环变量] [循环计数变量], 相加 (#低智商普通步得分, 相乘 (#低智商电脑吃子计算分, 判断可否下棋 (循环变量, 循环计数变量, 从属常数))))
                        赋值 (棋子 [循环变量] [循环计数变量], 0)
                    .判断结束
                    
                .变量循环尾 ()
            .判断结束
            
        .默认
            
        .判断结束
        
    .变量循环尾 ()
.变量循环尾 ()
.判断开始 (等于 (判断可否下子 (从属常数, 可下棋位置数组), 假)) ' 先判断是否有子可下
    .判断开始 (等于 (判断终局 (从属常数, 可下棋位置数组), 假)) ' 若无子可下，则进一步判断是否终局
        信息框 (相加 (“玩家”, 到文本 (从属常数), “无棋可下，由玩家”, 到文本 (取反从属常数 (从属常数, 反从属常数)), “继续下棋！”), 相加 (#警告图标, #确认钮), “黑白棋”)
        计算可下棋位置 (取反从属常数 (从属常数, 反从属常数), 可下棋位置数组)
        显示可下棋位置 (取反从属常数 (从属常数, 反从属常数), 可下棋位置数组)
        更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
    .默认
        赋值 (是否游戏中, 假)
        返回 ()
    .判断结束
    
.默认
    赋值 (待定估值常数, -280)
    .计次循环首 (8, 循环变量)
        .计次循环首 (8, 循环计数变量)
            .判断开始 (并且 (大于 (保存棋分值数组 [循环变量] [循环计数变量], 待定估值常数), 等于 (棋子 [循环变量] [循环计数变量], 0)))
                赋值 (横坐标, 循环变量)
                赋值 (纵坐标, 循环计数变量)
                赋值 (待定估值常数, 保存棋分值数组 [循环变量] [循环计数变量])
            .默认
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    落子 (横坐标, 纵坐标, 从属常数)
    赋值 (当前棋局文件, 相加 (当前棋局文件, 到文本 (横坐标), 到文本 (纵坐标), 到文本 (从属常数)))
    判断下棋 (横坐标, 纵坐标, 从属常数)
    显示当前双方棋子数 (棋子)
    更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
    移动外形框 (横坐标, 纵坐标)
    返回 ()
.判断结束


.子程序 判断可否下子, 逻辑型, 公开, 用来判断特定玩家是否可下子（非具体位置）
.参数 从属常数, 整数型, , 
.参数 可下棋位置数组变量, 整数型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时可下棋位置, 整数型, , "0", 
.局部变量 反从属常数, 整数型, , , 

重定义数组 (临时可下棋位置, 假, 0)
计算可下棋位置 (从属常数, 可下棋位置数组变量)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (可下棋位置数组变量 [循环变量] [循环计数变量], 从属常数))
            加入成员 (临时可下棋位置, 从属常数)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
.判断开始 (等于 (取数组成员数 (临时可下棋位置), 0))
    返回 (假)
.默认
    返回 (真)
.判断结束


.子程序 循环计算, 空白型, 公开, 用来实现边角简单计算以外的情况的判断
.参数 横, 整数型, , 
.参数 纵, 整数型, , 
.参数 从属常数, 整数型, , 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 待定估值常数, 整数型, , , 
.局部变量 临时横坐标, 整数型, , , 
.局部变量 临时纵坐标, 整数型, , , 
.局部变量 反从属常数, 整数型, , , 

判断下棋 (横, 纵, 从属常数)
更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
返回 ()

.子程序 _玩家先行_被选择, 空白型, 公开, 设置玩家先行选项
赋值 (是否玩家先行, 真)
判断先行 (是否玩家先行)

.子程序 _选择开局库文件_被选择, 空白型, 公开, 
.局部变量 临时文本, 文本型, , , 
.局部变量 文件号, 整数型, , , 

.如果真 (等于 (打开 (), 真))
    赋值 (文件号, 打开文件 (., #读入, ))
    读入数据 (文件号, 临时文本)
    关闭文件 (文件号)
    初始化 (临时文本, 是否人机对战)
    更新启动窗口标题 (.)
.如果真结束
返回 ()

.子程序 _悔棋_被选择, 空白型, 公开, 调用悔棋子程序来执行悔棋操作，注意：悔棋一步实质要返回两子数据
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

复制数组 (棋子, 临时棋子)
计算可下棋位置 (从属符号常数, 可下棋位置数组)
显示可下棋位置 (从属符号常数, 可下棋位置数组)
更新显示 (1, 临时棋子, 可下棋位置数组, 棋步记录数组)
赋值 (可否悔棋, 假)
赋值 (., 假)
赋值 (是否游戏中, 真)
判断菜单显示 (是否游戏中)
判断显示悔棋菜单 (可否悔棋)

.子程序 _电脑先行_被选择, 空白型, 公开, 
赋值 (是否玩家先行, 假)
判断先行 (是否玩家先行)

.子程序 _开局1_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“441451541552642651”, 真)
.默认
    初始化 (“441451541552642651”, 假)
.判断结束


.子程序 更新启动窗口标题, 空白型, 公开, 用以更新启动窗口标题
.参数 文件名, 文本型, 可空, 

.判断开始 (等于 (文件名, “”))
    赋值 (_启动窗口., 相加 (#标题, #没有文件))
.默认
    赋值 (_启动窗口., 相加 (#标题, 文件名))
.判断结束


.子程序 _开局2_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“431532441542451552461562”, 真)
.默认
    初始化 (“431532441542451552461562”, 假)
.判断结束


.子程序 _开局3_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“431441451551542642652662”, 真)
.默认
    初始化 (“431441451551542642652662”, 假)
.判断结束


.子程序 _开局4_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“451461631442542642552562”, 真)
.默认
    初始化 (“451461631442542642552562”, 假)
.判断结束


.子程序 _开局5_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“352452552652642441541531461561”, 真)
.默认
    初始化 (“352452552652642441541531461561”, 假)
.判断结束


.子程序 _开局6_被选择, 空白型, 公开, 
.判断开始 (等于 (是否人机对战, 真))
    初始化 (“362462562552542532451631”, 真)
.默认
    初始化 (“362462562552542532451631”, 假)
.判断结束


.子程序 _帮助主题_被选择, 空白型, 公开, 
信息框 (相加 (“=============黑白棋帮助=============       ”, #换行符, “”, #换行符, “”, #换行符, “黑白棋是很好的一款益智游戏，我用了几     ”, #换行符, “天时间编了这个小游戏。这也是我的第一     ”, #换行符, “个游戏软件。以前只是研究算法，未亲自     ”, #换行符, “下手去做。还是眼高手低啊，虽经几次大     ”, #换行符, “修改，电脑智商还是不太高。等再研究下     ”, #换行符, “再解决吧！”, #换行符, “”, #换行符, “====================================     ”, #换行符, “我的博客:bwhome724.yculblog.com/     ”, #换行符, “我的邮箱:super_student@sohu.com     ”, #换行符, “                   ”, #换行符, “”, #换行符, “                          2006.08.19      ”), 48, “黑白棋”)

.子程序 _关于_被选择, 空白型, 公开, 
信息框 (相加 (“黑白棋 V1.00 for Win98\Me\2000\XP\2003     ”, #换行符, “”, #换行符, “程序设计:黑洞里的光   ”, #换行符, “邮箱:super_student@sohu.com   ”, #换行符, “编程博客:bwhome724.yculblog.com/      ”, #换行符, “  ”, #换行符, “”, #换行符, “                              06.08.19   ”), 48, “黑白棋”)

.子程序 _结束当前棋局_被选择, 空白型, 公开, 
赋值 (是否游戏中, 假)
赋值 (., 假)
重定义数组 (棋子, 假, 8, 8)
重定义数组 (可下棋位置数组, 假, 8, 8)
重定义数组 (棋步记录数组, 假, 0)
赋值 (可否悔棋, 假)
判断显示悔棋菜单 (可否悔棋)
更新显示 (1, 棋子, 可下棋位置数组, 棋步记录数组)
判断菜单显示 (是否游戏中)
更新启动窗口标题 (“”)

.子程序 判断菜单显示, 空白型, 公开, 
.参数 是否游戏中变量, 逻辑型, , 

.判断开始 (等于 (是否游戏中变量, 真))
    赋值 (., 假)
    赋值 (., 真)
    赋值 (., 真)
    赋值 (., 真)
    赋值 (., 假)
.默认
    赋值 (., 真)
    赋值 (., 假)
    赋值 (., 假)
    赋值 (., 假)
    赋值 (., 真)
.判断结束


.子程序 _保存棋局_被选择, 空白型, 公开, 保存当前棋局到文件
.如果真 (保存文件 (棋子, ))
    更新启动窗口标题 (.)
.如果真结束
返回 ()

.窗口程序集 窗口程序集2, , , 

.程序集变量 棋步, 整数型, , "0", 
.程序集变量 是否画黑棋, 逻辑型, , , 
.子程序 _制作黑白棋开局库窗口_创建完毕, 空白型, 公开, 
重定义数组 (棋步, 假, 8, 8)
赋值 (., #浅灰)
赋值 (., 真)
赋值 (., #黑色)
赋值 (是否画黑棋, 真)
画棋盘 (0.5)
模拟移动鼠标外形框 (1, 1)
判断显示单选框 (是否画黑棋)

.子程序 判断按钮显示, 空白型, 公开, 习惯了微软式的按钮模式，易的按钮需要这样的代码来实现那样的模式效果
.参数 按钮, 按钮, , 

.判断开始 (等于 (按钮.可有焦点 (), 真))
    赋值 (按钮., 1)
.默认
    赋值 (按钮., 0)
.判断结束


.子程序 _按钮1_获得焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮1_失去焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮2_获得焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮2_失去焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮3_获得焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮3_失去焦点, 空白型, 公开, 
判断按钮显示 ()

.子程序 _按钮3_被单击, 空白型, 公开, 
销毁 ()

.子程序 _画板1_鼠标左键被按下, 逻辑型, 公开, 在模拟棋盘上画棋子
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 横, 整数型, , , 
.局部变量 纵, 整数型, , , 
.局部变量 临时数组, 整数型, , "0", 
.局部变量 临时数组变量, 棋子, , "0", 

赋值 (., #红色)
赋值 (., #黑色)
重定义数组 (临时数组, 假, 8, 8)
重定义数组 (临时数组变量, 假, 0)
赋值 (横, 四舍五入 (相乘 (相除 (相减 (横向位置, 相除 (#格宽度, 4)), #格宽度), 2), )) ' 计算出棋子的横坐标，下为纵坐标
赋值 (纵, 四舍五入 (相乘 (相除 (相减 (纵向位置, 相除 (#格宽度, 4)), #格宽度), 2), ))
.判断开始 (小于或等于 (横, 0))
    赋值 (横, 0)
.判断 (小于或等于 (纵, 0))
    赋值 (纵, 0)
.判断 (大于或等于 (横, 9))
    赋值 (横, 9)
.判断 (大于或等于 (纵, 9))
    赋值 (纵, 9)
.判断 (并且 (大于或等于 (横, 1), 小于或等于 (横, 8), 大于或等于 (纵, 1), 小于或等于 (纵, 8)))
    .判断开始 (等于 (是否画黑棋, 真))
        画模拟棋子 (横, 纵, 是否画黑棋)
        模拟更新显示 (棋步)
        添加列表框项目 (是否画黑棋, 横, 纵)
    .默认
        画模拟棋子 (横, 纵, 是否画黑棋)
        模拟更新显示 (棋步)
        添加列表框项目 (是否画黑棋, 横, 纵)
    .判断结束
    
.默认
    
.判断结束


.子程序 添加列表框项目, 空白型, 公开, 本程序用来享右边的棋步显示列表框中添加项目
.参数 列表框, 列表框, , 用来添加项目的列表框
.参数 是否画黑棋变量, 逻辑型, , 
.参数 横, 整数型, , 所添加棋步的横坐标，下为纵坐标
.参数 纵, 整数型, , 

.判断开始 (等于 (是否画黑棋变量, 真))
    列表框.加入项目 (相加 (“黑方:[”, 到文本 (横), “,”, 到文本 (纵), “] - ”, 到文本 (#黑方)), 0)
.默认
    列表框.加入项目 (相加 (“白方:[”, 到文本 (横), “,”, 到文本 (纵), “] - ”, 到文本 (#白方)), 0)
.判断结束


.子程序 画模拟棋子, 空白型, 公开, 执行画棋子的直接窗口
.参数 横, 整数型, , 
.参数 纵, 整数型, , 
.参数 是否画黑棋变量, 逻辑型, , 

.判断开始 (等于 (是否画黑棋变量, 真))
    赋值 (棋步 [横] [纵], 1)
.默认
    赋值 (棋步 [横] [纵], 2)
.判断结束


.子程序 模拟更新显示, 空白型, 公开, 用来更新所画棋子的显示情况
.参数 画线所需画板, 画板, , 
.参数 棋子变量, 整数型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 

.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (等于 (棋子变量 [循环变量] [循环计数变量], 1))
            赋值 (画线所需画板., 1) ' 画黑色棋子
            赋值 (画线所需画板., #黑色)
            赋值 (画线所需画板., #黑色)
            画线所需画板.画椭圆 (相减 (相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相减 (相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4), 6), 相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4), 6))
        .判断 (等于 (棋子变量 [循环变量] [循环计数变量], 2)) ' 画白色棋子
            赋值 (画线所需画板., 1)
            赋值 (画线所需画板., #白色)
            赋值 (画线所需画板., #白色)
            画线所需画板.画椭圆 (相减 (相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相减 (相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4), 6), 相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4), 6))
        .判断 (等于 (棋子变量 [循环变量] [循环计数变量], 0))
            赋值 (画线所需画板., 1) ' 用以清除棋子
            赋值 (画线所需画板., #浅灰)
            赋值 (画线所需画板., #浅灰)
            画线所需画板.画椭圆 (相减 (相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相减 (相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4)), 6), 相加 (相除 (相乘 (循环变量, #格宽度), 2), 相除 (#格宽度, 4), 6), 相加 (相除 (相乘 (循环计数变量, #格宽度), 2), 相除 (#格宽度, 4), 6))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

.子程序 _画板1_鼠标位置被移动, 逻辑型, 公开, 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 横, 整数型, , , 
.局部变量 纵, 整数型, , , 

赋值 (., #红色)
赋值 (., #黑色)
赋值 (横, 四舍五入 (相乘 (相除 (相减 (横向位置, 相除 (#格宽度, 4)), #格宽度), 2), ))
赋值 (纵, 四舍五入 (相乘 (相除 (相减 (纵向位置, 相除 (#格宽度, 4)), #格宽度), 2), ))
.判断开始 (小于或等于 (横, 0))
    赋值 (横, 0)
.判断 (小于或等于 (纵, 0))
    赋值 (纵, 0)
.判断 (大于或等于 (横, 9))
    赋值 (横, 9)
.判断 (大于或等于 (纵, 9))
    赋值 (纵, 9)
.判断 (并且 (大于或等于 (横, 1), 小于或等于 (横, 8), 大于或等于 (纵, 1), 小于或等于 (纵, 8)))
    模拟移动鼠标外形框 (横, 纵)
.默认
    模拟移动鼠标外形框 (横, 纵)
.判断结束


.子程序 模拟移动鼠标外形框, 空白型, 公开, 用来实现鼠标外形框移动的子程序
.参数 外形框, 外形框, , 
.参数 横, 整数型, , 
.参数 纵, 整数型, , 

赋值 (外形框., 相减 (相除 (相乘 (相加 (横, 0.5), #格宽度), 2), 4))
赋值 (外形框., 相减 (相除 (相乘 (相加 (纵, 0.5), #格宽度), 2), 4))

.子程序 判断显示单选框, 空白型, 公开, 用来现实画棋子的种类
.参数 是否画黑棋变量, 逻辑型, , 若为真则模拟棋盘上画黑子，否则为白旗子

.判断开始 (等于 (是否画黑棋变量, 真))
    赋值 (., 真)
    赋值 (., 假)
.默认
    赋值 (., 假)
    赋值 (., 真)
.判断结束


.子程序 _按钮2_被单击, 空白型, 公开, 
重定义数组 (棋步, 假, 8, 8)
模拟更新显示 (棋步)
清空 ()

.子程序 _单选框2_被单击, 空白型, 公开, 
赋值 (是否画黑棋, 假)
判断显示单选框 (是否画黑棋)

.子程序 _单选框1_被单击, 空白型, 公开, 
赋值 (是否画黑棋, 真)
判断显示单选框 (是否画黑棋)

.子程序 _按钮1_被单击, 空白型, 公开, 
写开局库文件 (棋步, )

.子程序 写开局库文件, 逻辑型, 公开, 
.参数 棋子变量, 整数型, 数组, 
.参数 通用对话框, 通用对话框, , 

.局部变量 文件号, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 

赋值 (临时文本, “”)
.判断开始 (大于 (判断棋步数目 (棋子变量), 0))
    .如果真 (通用对话框.打开 ())
        赋值 (文件号, 打开文件 (通用对话框., #重写, ))
        .计次循环首 (8, 循环变量)
            .计次循环首 (8, 循环计数变量)
                .判断开始 (等于 (棋子变量 [循环变量] [循环计数变量], 1))
                    赋值 (临时文本, 相加 (临时文本, 到文本 (循环变量), 到文本 (循环计数变量), “1”))
                .判断 (等于 (棋子变量 [循环变量] [循环计数变量], 2))
                    赋值 (临时文本, 相加 (临时文本, 到文本 (循环变量), 到文本 (循环计数变量), “2”))
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
        .计次循环尾 ()
        写出数据 (文件号, 临时文本)
        关闭文件 (文件号)
        返回 (真)
    .如果真结束
    
.默认
    信息框 (“您还未放置棋子，不能保存棋局文件！”, 相加 (#警告图标, #确认钮), #黑白棋)
    返回 (假)
.判断结束
返回 (假)

.子程序 判断棋步数目, 整数型, 公开, 用来判断棋子步数的子程序
.参数 棋子变量, 整数型, 数组, 

.局部变量 循环变量, 整数型, , , 
.局部变量 循环计数变量, 整数型, , , 
.局部变量 计数变量, 整数型, , , 

赋值 (计数变量, 0)
.计次循环首 (8, 循环变量)
    .计次循环首 (8, 循环计数变量)
        .判断开始 (或者 (等于 (棋子变量 [循环变量] [循环计数变量], 1), 等于 (棋子变量 [循环变量] [循环计数变量], 2)))
            赋值 (计数变量, 相加 (计数变量, 1))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (计数变量)


 ' 不属于任何一个程序集、类模块的函数：
