 ' 文件类型：Linux控制台程序

 ' 程序名称：Sqlite数据库支持库测试程序
 ' 程序描述：本测试程序覆盖了Sqlite支持库的绝大多数功能。执行一次本程序，即可获知本支持库中的基本功能能否正常工作。
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 数据库名称, "“测试数据库.sdb”", , 
.常量 测试表一, "“测试表一”", , 
.常量 主键字段, "“主键”", , 
.常量 整数型字段, "“整数型字段”", , 
.常量 小数型字段, "“小数型字段”", , 
.常量 文本型字段, "“文本型字段”", , 
.常量 字节集字段, "“字节集字段”", , 
.常量 无类型字段, "“无类型字段”", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' SqliteDB {295DD8F2-3584-4780-818D-9569AC5BC9D8} 1 2 Sqlite数据库支持库
 ' console 1E86AA0150514527BB567CD22F3733C8 1 0 控制台操作支持库




.全局变量 数据库, 未知类型0x20001, , , 
.全局变量 表, 未知类型0x20002, , , 
.全局变量 记录集, 未知类型0x20003, , , 
.全局变量 匿名全局变量_65, 空白型, , , 
.全局变量 执行次数, 整数型, , , 记录总测试执行次数
.全局变量 错误次数, 整数型, , , 记录出现执行错误的次数
.全局变量 匿名全局变量_80, 空白型, , , 
.全局变量 屏幕, 未知类型0x30001, , , 
.全局变量 屏幕宽度, 整数型, , , 
.全局变量 屏幕高度, 整数型, , , 
.全局变量 右上角提示文本初始横坐标, 整数型, , , 
.全局变量 右上角提示文本宽度, 整数型, , , 
.全局变量 匿名全局变量_142, 空白型, , , 
.全局变量 换行符, 文本型, , , Linux和Window下换行符不同，需区分
.全局变量 执行成功吗, 逻辑型, , , 用作可全局使用的临时变量
.全局变量 匿名全局变量_302, 空白型, , , 
.全局变量 操作系统类别, 整数型, , , 记录“取操作系统类别()”返回值，仅在程序启动时执行一次。

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
 ' 返回 (内部测试 ())
初始化 ()

测试_初始化 ()
Sqlite数据库支持库测试 ()
测试_收尾 ()

返回 (0) ' 可以根据您的需要返回任意数值


.子程序 Sqlite数据库支持库测试, 空白型, , 
测试_Sqlite数据库 ()
测试_Sqlite表 ()
测试_Sqlite记录集 ()


.子程序 内部测试, 整数型, , 
选择输出文本 (指定位置是不是前半个汉字 (“中小学生”, 1), “是”, “否”)
选择输出文本 (指定位置是不是前半个汉字 (“中小学生”, 2), “是”, “否”)
选择输出文本 (指定位置是不是前半个汉字 (“中小学生”, 3), “是”, “否”)
选择输出文本 (指定位置是不是前半个汉字 (“中小a生”, 5), “是”, “否”)
输出文本行 (相加 (取固定宽度文本 (“大脑皮层”, 7), “|”))
输出文本行 (相加 (取固定宽度文本 (“大a脑皮层中小学生”, 7), “|”))
标准输入 ()
返回 (0)


.子程序 初始化, 空白型, , 
 ' todo: 取操作系统类别 （）
赋值 (换行符, #换行符)

赋值 (执行次数, 0) ' 在“输出()”命令中，每执行一次测试任务，本变量值加一。将在程序结束时告知用户此执行次数。
赋值 (错误次数, 0) ' 在“输出()”命令中，每出现一次执行错误，本变量值加一。将在程序结束时告知用户此错误次数。

赋值 (右上角提示文本宽度, 32)
屏幕.未知支持库函数_7 (屏幕宽度, 屏幕高度)
赋值 (右上角提示文本初始横坐标, 相减 (屏幕宽度, 右上角提示文本宽度))
赋值 (操作系统类别, 取操作系统类别 ())



.子程序 测试_初始化, 空白型, , 
输出文本行 (相加 (“开始测试Sqlite数据库支持库……”, 换行符, 换行符))

测试 (“数据库打开前，是否已打开() = 假”, 等于 (数据库.未知支持库函数_29 (), 假))
赋值 (执行成功吗, 数据库.未知支持库函数_30 (#数据库名称, 真))
测试 (“打开数据库”, 执行成功吗)
.如果真 (等于 (执行成功吗, 假))
    输出文本行 (“数据库打开失败，后续测试无法进行！”)
    等待任意键继续 ()
    输出测试结果 ()
    结束 ()
.如果真结束
测试 (“数据库已打开”, 数据库.未知支持库函数_29 ())

等待任意键继续 ()


.子程序 测试_收尾, 空白型, , 
测试 (相加 (“删除表 ”, #测试表一), 数据库.未知支持库函数_63 (#测试表一)) ' 重要，不删除会导致“收缩数据库()”失败！奇怪。
测试 (“关闭数据库”, 数据库.未知支持库函数_31 ())
输出测试结果 ()


.子程序 测试_创建测试表, 空白型, , 
.局部变量 字段数组, 未知类型0x2000A, , "0", 

赋值 (执行成功吗, 数据库.未知支持库函数_50 (#测试表一))
选择输出文本 (执行成功吗, 相加 (“表 ”, #测试表一, “ 已存在，将被删除并重建。”), 相加 (“表 ”, #测试表一, “ 不存在，将被创建。”))
输出文本行 (“”)
.如果真 (等于 (执行成功吗, 真))
    测试 (相加 (“删除表 ”, #测试表一), 数据库.未知支持库函数_63 (#测试表一))
.如果真结束

加入Sqlite字段 (字段数组, #主键字段, -1)
加入Sqlite字段 (字段数组, #整数型字段, #整数型)
加入Sqlite字段 (字段数组, #小数型字段, #小数型)
加入Sqlite字段 (字段数组, #文本型字段, #文本型, 0)
加入Sqlite字段 (字段数组, #字节集字段, #字节集型)
加入Sqlite字段 (字段数组, #无类型字段, 0)
测试 (相加 (“创建表 ”, #测试表一), 数据库.未知支持库函数_61 (#测试表一, 字段数组))
测试 (“取表定义”, 大于 (取文本长度 (数据库.未知支持库函数_53 (#测试表一)), 0))
输出文本行 (相加 (“取表定义：”, 数据库.未知支持库函数_53 (#测试表一)))
输出文本行 (“”)

.子程序 测试_Sqlite表, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 表内容数组, 文本型, , "0", 
.局部变量 所有字段, 文本型, , "0", 
.局部变量 含表头, 逻辑型, , , 
.局部变量 原错误数, 整数型, , , 
.局部变量 测试记录数, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 文本2, 文本型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 字节集2, 字节集, , , 
.局部变量 整数, 整数型, , , 
.局部变量 整数2, 整数型, , , 

测试_创建测试表 ()
输出文本行 (相加 (换行符, 换行符, “开始测试Sqlite表……”))
测试 (“表打开前，是否已打开() = 假”, 等于 (表.未知支持库函数_104 (), 假))
测试 (相加 (“打开表 ”, #测试表一), 表.未知支持库函数_105 (#测试表一, 数据库))
测试 (“表是否已打开”, 表.未知支持库函数_104 ())
测试 (“首记录前() = 真”, 等于 (表.未知支持库函数_113 (), 真))
测试 (“尾记录后() = 真”, 等于 (表.未知支持库函数_114 (), 真)) ' 因为没有记录,所以"尾记录后()"也返回"真"
测试 (相加 (“取表名() = ”, #测试表一), 等于 (表.未知支持库函数_148 (), #测试表一))

测试 (“取记录数() = 0”, 等于 (表.未知支持库函数_150 (), 0))
测试 (“取字段数() = 6”, 等于 (表.未知支持库函数_152 (), 6))
赋值 (所有字段, 表.未知支持库函数_153 ())
测试 (“取所有字段”, 等于 (取数组成员数 (所有字段), 6))
插入成员 (所有字段, 1, “字段名称”)
输出文本数组 (所有字段, 真, 真, 50)

测试 (“开始事务”, 数据库.未知支持库函数_44 ())
输出文本行 (相加 (换行符, “开始向表中批量插入数据……”))
赋值 (原错误数, 错误次数)
赋值 (测试记录数, 10)
.计次循环首 (测试记录数, i)
    输出文本行 (相加 (“- ”, 到文本 (i)))
    测试 (相加 (“向表中插入记录”, 到文本 (i)), 表.未知支持库函数_121 ())
    测试 (“写整数型字段”, 表.未知支持库函数_136 (#整数型字段, i))
    测试 (“写小数型字段”, 表.未知支持库函数_136 (#小数型字段, 求平方根 (i)))
    测试 (“写文本型字段”, 表.未知支持库函数_136 (#文本型字段, 相加 (“文本：”, 到文本 (i))))
    测试 (“写无类型字段”, 表.未知支持库函数_136 (#无类型字段, 到文本 (取现行时间 ())))
    测试 (“提交插入”, 表.未知支持库函数_123 ())
    测试 (相加 (“取记录数() = ”, 到文本 (i)), 等于 (表.未知支持库函数_150 (), i))
    测试 (“取记录号() = 0”, 等于 (表.未知支持库函数_149 (), 0))
    测试 (“取最新插入ID”, 不等于 (数据库.未知支持库函数_39 (), 0))
    输出文本行 (相加 (“取最新插入ID() = ”, 到文本 (数据库.未知支持库函数_39 ())))
.计次循环尾 ()
输出文本行 (相加 (“结束向表中批量插入数据。”, 换行符))
.如果 (大于 (错误次数, 原错误数))
    输出文本行 (“事务开始后，发现在错误发生，将回滚事务，恢复数据库到事务开始前的状态。”)
    测试 (“回滚事务”, 数据库.未知支持库函数_46 ())
    测试 (“取记录数() = 0”, 等于 (表.未知支持库函数_150 (), 0))
.否则
    测试 (“提交事务”, 数据库.未知支持库函数_45 ())
    测试 (相加 (“取记录数() = ”, 到文本 (测试记录数)), 等于 (表.未知支持库函数_150 (), 测试记录数))
.如果结束
测试 (“刷新表”, 表.未知支持库函数_125 ())
输出文本行 (相加 (“取记录数：”, 到文本 (表.未知支持库函数_150 ())))

测试 (“到尾记录()”, 表.未知支持库函数_108 ())
测试 (“删除最后一个记录”, 表.未知支持库函数_122 ())
测试 (相加 (“取记录数() = ”, 到文本 (测试记录数)), 等于 (表.未知支持库函数_150 (), 相减 (测试记录数, 1)))
测试 (“取记录号() = 0，删除记录后，当前记录为首记录前”, 等于 (表.未知支持库函数_149 (), 0))

测试 (“到首记录()”, 表.未知支持库函数_107 ())
测试 (“编辑首记录”, 表.未知支持库函数_120 ())
测试 (“修改首记录中的第四个字段值”, 表.未知支持库函数_136 (4, “修改后文本”))
测试 (“提交对首记录的编辑”, 表.未知支持库函数_123 ())
测试 (“读刚修改的字段值”, 表.未知支持库函数_135 (4, 文本))
测试 (“刚修改的字段值为：修改后文本”, 等于 (文本, “修改后文本”))
测试 (“读字段文本值”, 等于 (表.未知支持库函数_137 (4, ), “修改后文本”))

测试 (“到下一记录() - 即第二条记录”, 表.未知支持库函数_109 ())
测试 (“编辑第二条记录”, 表.未知支持库函数_120 ())
测试 (“修改第二条记录中的字节集字段值”, 表.未知支持库函数_136 (#字节集字段, 到字节集 (“{E008B458-20E1-42b3-A0E9-5C3744DD027A}”)))
测试 (“提交编辑”, 表.未知支持库函数_123 ())
测试 (“读字段字节集值”, 等于 (表.未知支持库函数_141 (#字节集字段, ), 到字节集 (“{E008B458-20E1-42b3-A0E9-5C3744DD027A}”)))

测试 (“跳到第六条记录”, 表.未知支持库函数_112 (6))
测试 (“取记录号() = 6”, 等于 (表.未知支持库函数_149 (), 6))
测试 (“跳过(3)，到第九条记录”, 表.未知支持库函数_111 (3))
测试 (相加 (“读第九条记录的 ”, #整数型字段), 表.未知支持库函数_135 (#整数型字段, 整数))
测试 (相加 (“第九条记录的 ”, #整数型字段, “ 值为9”), 等于 (整数, 9))
测试 (“读字段整数值”, 等于 (表.未知支持库函数_138 (#整数型字段, ), 9))
测试 (“读字段文本值”, 等于 (表.未知支持库函数_137 (#整数型字段, ), “9”))
测试 (“读字段字节值”, 等于 (表.未知支持库函数_146 (#整数型字段, ), 9))

赋值 (含表头, 真)
赋值 (表内容数组, 表.未知支持库函数_151 (含表头))
测试 (“取表内容”, 等于 (取数组成员数 (表内容数组), 相乘 (相加 (表.未知支持库函数_150 (), 选择 (含表头, 1, 0)), 表.未知支持库函数_152 ())))
输出文本数组 (表内容数组, 含表头, 真, 10)

测试 (相加 (“关闭表 ”, #测试表一), 表.未知支持库函数_106 ())
测试 (“表关闭后，是否已打开() = 假”, 等于 (表.未知支持库函数_104 (), 假))

等待任意键继续 ()


.子程序 测试_Sqlite数据库, 空白型, , 
.局部变量 sql, 文本型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 所有表数组, 文本型, , "0", 

输出文本行 (相加 (换行符, 换行符, “开始测试Sqlite数据库……”))
测试 (“创建临时表 - test”, 数据库.未知支持库函数_32 (“create table test(a,b,c)”))
输出文本行 (相加 (“取表定义：”, 数据库.未知支持库函数_53 (“test”)))
测试 (“向表中插入数据”, 数据库.未知支持库函数_32 (“insert into test values(1,2,3)”))
测试 (“向表中插入数据”, 数据库.未知支持库函数_32 (“insert into test(a,c) values('aaa','ccc')”))
测试 (“修改表中记录”, 数据库.未知支持库函数_32 (“update test set b='bbb' where a='aaa'”))
测试 (“取字段值”, 数据库.未知支持库函数_54 (“test”, “b”, “c='ccc'”, 文本))
测试 (“取字段值() = 'bbb'”, 等于 (文本, “bbb”))
测试 (“创建另一临时表 - 中文名称表”, 数据库.未知支持库函数_32 (“create table 中文名称表(字段一 int,字段二 double,字段三 varchar)”))
测试 (“表是否存在(中文名称表) = 真”, 数据库.未知支持库函数_50 (“中文名称表”))
测试 (“插入中文内容记录”, 数据库.未知支持库函数_32 (“insert into 中文名称表 values(2005,3.14159,'汉字')”))
赋值 (所有表数组, 数据库.未知支持库函数_51 (真, 假, 假))
插入成员 (所有表数组, 1, “表名称”)
输出文本数组 (所有表数组, 真, 真, 50)
测试 (“删除表(中文名称表)”, 数据库.未知支持库函数_63 (“中文名称表”))
测试 (“清空表(test)”, 数据库.未知支持库函数_64 (“test”))
测试 (“删除表(test)”, 数据库.未知支持库函数_63 (“test”))
测试 (“表是否存在(test) = 假”, 等于 (数据库.未知支持库函数_50 (“test”), 假))
赋值 (所有表数组, 数据库.未知支持库函数_51 (真, 假, 假))
插入成员 (所有表数组, 1, “表名称”)
输出文本数组 (所有表数组, 真, 真, 50)
测试 (“收缩数据库”, 数据库.未知支持库函数_80 ()) ' !

等待任意键继续 ()


.子程序 测试_Sqlite记录集, 空白型, , 
.局部变量 所有参数数组, 文本型, , "0", 
.局部变量 文本, 文本型, , , 
.局部变量 整数, 整数型, , , 
.局部变量 小数, 双精度小数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 数组, 文本型, , "0", 

输出文本行 (相加 (换行符, 换行符, “开始测试Sqlite记录集……”))
测试 (“是否已打开() = 假”, 等于 (记录集.未知支持库函数_189 (), 假))
输出文本行 (“通过 Sqlite数据库.取记录集() 初始化Sqlite记录集”)
赋值 (记录集, 数据库.未知支持库函数_33 (相加 (“select * from ”, #测试表一, “ where ”, #整数型字段, “ = $n”))) ' 其中定义了SQL参数“$n”
测试 (“是否已打开() = 假，尚未调用 Sqlite记录集.打开()”, 等于 (记录集.未知支持库函数_189 (), 假))
测试 (“取参数个数() = 1”, 等于 (记录集.未知支持库函数_185 (), 1))
赋值 (所有参数数组, 记录集.未知支持库函数_186 ())
测试 (“取所有参数”, 等于 (取数组成员数 (所有参数数组), 1))
插入成员 (所有参数数组, 1, “SQL参数名称”)
输出文本数组 (所有参数数组, 真, 真, 50)
测试 (“绑定参数”, 记录集.未知支持库函数_187 (“$n”, 8))
测试 (“是否已打开() = 假，尚未调用 Sqlite记录集.打开()”, 等于 (记录集.未知支持库函数_189 (), 假))
测试 (“打开记录集”, 记录集.未知支持库函数_190 ())
测试 (“是否已打开() = 真”, 等于 (记录集.未知支持库函数_189 (), 真))
测试 (“首记录前() = 真”, 等于 (记录集.未知支持库函数_200 (), 真))
测试 (“尾记录后() = 假”, 等于 (记录集.未知支持库函数_201 (), 假)) ' 因为记录数不为0,所以"尾记录后()"返回"假"
输出文本行 (相加 (“取记录个数：”, 到文本 (记录集.未知支持库函数_208 ())))
输出文本行 (相加 (“取字段个数：”, 到文本 (记录集.未知支持库函数_210 ())))
赋值 (数组, 记录集.未知支持库函数_211 ())
输出文本行 (“取所有字段：”)
插入成员 (数组, 1, “字段名称”)
输出文本数组 (数组, 真, 真, 50)
.判断循环首 (记录集.未知支持库函数_198 ())
    测试 (“读文本字段”, 记录集.未知支持库函数_192 (#文本型字段, 文本))
    测试 (“该字段文本值”, 等于 (记录集.未知支持库函数_215 (#文本型字段, ), 文本))
    测试 (“读整数字段”, 记录集.未知支持库函数_192 (#整数型字段, 整数))
    测试 (“该字段整数值”, 等于 (记录集.未知支持库函数_216 (#整数型字段, ), 整数))
    测试 (“读小数字段”, 记录集.未知支持库函数_192 (#小数型字段, 小数))
    测试 (“该字段小数值”, 等于 (记录集.未知支持库函数_217 (#小数型字段, ), 小数))
    测试 (“读字节集字段”, 记录集.未知支持库函数_192 (#字节集字段, 字节集))
    测试 (“该字段字节集值”, 等于 (记录集.未知支持库函数_219 (#字节集字段, ), 字节集))
.判断循环尾 ()
测试 (“尾记录后() = 真”, 等于 (记录集.未知支持库函数_201 (), 真))

输出文本行 (“取记录集所有记录”)
赋值 (数组, 记录集.未知支持库函数_209 (真))
输出文本数组 (数组, 真, 真, 10)
测试 (“取所有记录()执行后，相当于重新打开记录集，首记录前() = 真”, 等于 (记录集.未知支持库函数_200 (), 真))
测试 (“关闭记录集”, 记录集.未知支持库函数_191 ())
测试 (“是否已打开() = 假”, 等于 (记录集.未知支持库函数_189 (), 假))
输出文本行 (“”)

测试 (“通过 Sqlite记录集.置SQL语句() 初始化记录集”, 记录集.未知支持库函数_184 (相加 (“update ”, #测试表一, “ set ”, #字节集字段, “ = ? where ”, #主键字段, “ = ?”), 数据库))
测试 (“有两个SQL参数”, 等于 (记录集.未知支持库函数_185 (), 2))
测试 (“绑定参数一”, 记录集.未知支持库函数_187 (1, 到字节集 (“0x01fe3b600”)))
测试 (“绑定参数二”, 记录集.未知支持库函数_187 (2, 5))
测试 (“打开，同时执行SQL语句”, 记录集.未知支持库函数_190 ())
测试 (“是否已打开() = 真”, 等于 (记录集.未知支持库函数_189 (), 真))
测试 (“取记录个数() = 0”, 等于 (记录集.未知支持库函数_208 (), 0))
测试 (“读写入的字节集”, 数据库.未知支持库函数_54 (#测试表一, #字节集字段, 相加 (#主键字段, “ = 5”), 字节集))
输出文本行 (到文本 (字节集))
测试 (“关闭记录集”, 记录集.未知支持库函数_191 ())

等待任意键继续 ()


.程序集 实用程序集, , , 

.子程序 测试, 空白型, 公开, 根据执行结果及相关的描述文本，向标准控制台输出成功与否的信息，并记录测试成功及错误的次数。
.参数 描述文本, 文本型, , 
.参数 执行结果, 逻辑型, , 

赋值 (执行次数, 相加 (执行次数, 1))
.如果 (执行结果)
    赋值 (描述文本, 相加 (“测试成功：”, 描述文本))
.否则
    赋值 (描述文本, 相加 (“！！！测试失败：”, 描述文本, “！错误文本：”, 数据库.未知支持库函数_38 ()))
    赋值 (错误次数, 相加 (错误次数, 1))
.如果结束

输出文本行 (描述文本, 选择 (执行结果, #, #)) ' 出错时以红色文本显示
更新右上角提示文本 ()


.子程序 更新右上角提示文本, 空白型, 公开, 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 

屏幕.未知支持库函数_6 (x, y) ' 记录原光标位置，用于命令返回时恢复。

屏幕.未知支持库函数_10 (右上角提示文本初始横坐标, 0, #, 右上角提示文本宽度)
屏幕.未知支持库函数_5 (右上角提示文本初始横坐标, 0)
输出文本 (“测试次数：”, #)
输出文本 (相加 (到文本 (执行次数), “    ”), #)
输出文本 (“错误次数：”, #)
.如果 (等于 (错误次数, 0))
    输出文本 (“0”, #)
.否则
    输出文本 (到文本 (错误次数), #)
.如果结束

屏幕.未知支持库函数_5 (x, y) ' 恢复原光标位置！


.子程序 输出文本行, 空白型, 公开, 在控制台当前位置输出一行文本（最后换行），文本颜色默认为“银白”
.参数 文本, 文本型, , 
.参数 文本颜色, 整数型, 可空, 必须为 #控制台颜色.* 等值，默认值为“#控制台颜色.银白”

.如果真 (是否为空 (文本颜色))
    赋值 (文本颜色, #)
.如果真结束

输出文本 (相加 (文本, 换行符), 文本颜色)


.子程序 输出文本, 空白型, 公开, 在控制台当前位置输出文本，文本颜色默认为“银白”
.参数 文本, 文本型, , 
.参数 文本颜色, 整数型, 可空, 必须为 #控制台颜色.* 等值，默认值为“#控制台颜色.银白”

.局部变量 输出行, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 

.如果真 (是否为空 (文本颜色))
    赋值 (文本颜色, #)
.如果真结束

屏幕.未知支持库函数_4 (假, 文本颜色, #, 文本)
 ' 如果真 (操作系统类别 ＝ 4)
屏幕.未知支持库函数_6 (x, y)
.如果真 (大于或等于 (y, 相减 (屏幕高度, 1))) ' 满屏后给出提示，然后清屏
    等待任意键继续 (“请按任意键继续……”)
    屏幕.未知支持库函数_2 ()
    屏幕.未知支持库函数_5 (0, 0)
.如果真结束


返回 ()

 ' 如果操作系统为Linux，则固定在某一行输出。因为无法做到自动滚屏输出！
 ' 赋值 (输出行, 5)
 ' 屏幕.未知支持库函数_11 (0, 输出行, “ ”, 屏幕宽度)
 ' 屏幕.未知支持库函数_4 (0, 输出行, 假, 文本颜色, #, 文本)



.子程序 定位输出文本, 空白型, , 
.参数 x, 整数型, 可空, 
.参数 y, 整数型, 可空, 
.参数 文本, 文本型, , 
.参数 文本颜色, 整数型, 可空, 

.如果真 (是否为空 (文本颜色))
    赋值 (文本颜色, #)
.如果真结束

屏幕.未知支持库函数_4 (x, y, 假, 文本颜色, #, 文本)


.子程序 选择输出文本, 空白型, 公开, 根据参数一决定输出哪个文本参数
.参数 写文本一吗, 逻辑型, , 
.参数 文本一, 文本型, , 
.参数 文本二, 文本型, , 

输出文本 (选择 (写文本一吗, 文本一, 文本二))


.子程序 等待任意键继续, 空白型, 公开, 
.参数 提示文本, 文本型, 可空, 

.如果真 (是否为空 (提示文本))
    赋值 (提示文本, 相加 (换行符, “请按任意键继续……”, 换行符))
.如果真结束

 ' 输出文本行 (提示文本, #控制台颜色.黄色) '防止递归调用!
屏幕.未知支持库函数_4 (假, #, #, 提示文本)
屏幕.未知支持库函数_3 (假, 假, , 假, 0)


.子程序 输出测试结果, 空白型, 公开, 
屏幕.未知支持库函数_2 ()
屏幕.未知支持库函数_5 (0, 0)
更新右上角提示文本 ()

输出文本行 (相加 (换行符, 换行符, 换行符, 换行符, “Sqlite数据库支持库测试结束，测试结果如下：”))
输出文本行 (“-----------------------------------------”)
输出文本行 (相加 (“执行测试次数：”, 到文本 (执行次数)), #)
输出文本行 (相加 (“测试错误次数：”, 到文本 (错误次数)), #)
输出文本行 (“-----------------------------------------”)
输出文本行 (“提示：有些错误可能并非真正的错误。”, )

等待任意键继续 (相加 (换行符, “请按任意键退出程序……”))
结束 ()

.子程序 加入Sqlite字段, 空白型, 公开, 向数组参数“字段数组”中添加一个成员
.参数 字段数组, 未知类型0x2000A, 参考 数组, 此参数同时作为输入参数和输出参数
.参数 名称, 文本型, , 
.参数 类型, 整数型, 可空, 
.参数 最大文本长度, 整数型, 可空, 

.局部变量 字段, 未知类型0x2000A, , , 

.如果真 (是否为空 (类型))
    赋值 (类型, 0)
.如果真结束
.如果真 (是否为空 (最大文本长度))
    赋值 (最大文本长度, 0)
.如果真结束

赋值 (字段., 名称)
赋值 (字段., 类型)
赋值 (字段., 最大文本长度)
加入成员 (字段数组, 字段)


.子程序 取数组列最大文本长度, 整数型, , 
.参数 数组, 文本型, 数组, 
.参数 第几列, 整数型, , 
.参数 总行数, 整数型, , 
.参数 总列数, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 本行字符数, 整数型, , , 
.局部变量 最大字符数, 整数型, , , 

赋值 (最大字符数, 0)
.计次循环首 (总行数, i)
    .如果 (小于或等于 (总列数, 1))
        赋值 (本行字符数, 取文本长度 (数组 [i]))
    .否则
        赋值 (本行字符数, 取文本长度 (数组 [i] [第几列]))
    .如果结束
    
    .如果真 (大于 (本行字符数, 最大字符数))
        赋值 (最大字符数, 本行字符数)
    .如果真结束
    
.计次循环尾 ()
返回 (最大字符数)


.子程序 指定位置是不是前半个汉字, 逻辑型, , 
.参数 文本, 文本型, , 
.参数 位置, 整数型, , >1

.局部变量 i, 整数型, , , 
.局部变量 是吗, 逻辑型, , , 

赋值 (是吗, 假)
.计次循环首 (位置, i)
    .如果真 (小于 (取代码 (文本, i), 0))
        赋值 (是吗, 取反 (是吗))
    .如果真结束
    
.计次循环尾 ()
返回 (是吗)


.子程序 取固定宽度文本, 文本型, , 对文本进行处理使其总字符数固定。宽度不足则加空格，超出则剪裁并加“...”。
.参数 文本, 文本型, , 
.参数 宽度, 整数型, , 以字符为单位

.局部变量 实际宽度, 整数型, , , 

赋值 (实际宽度, 取文本长度 (文本))
.如果真 (等于 (实际宽度, 宽度))
    返回 (文本)
.如果真结束

.如果 (小于 (实际宽度, 宽度))
    返回 (相加 (文本, 取空白文本 (相减 (宽度, 实际宽度))))
.否则
    
    .如果真 (小于 (宽度, 5))
        返回 (取空白文本 (宽度))
    .如果真结束
    
    .如果 (等于 (指定位置是不是前半个汉字 (文本, 相减 (宽度, 3)), 真)) ' 不要把一个汉字拆分！
        返回 (相加 (取文本左边 (文本, 相减 (宽度, 2)), “..”))
    .否则
        返回 (相加 (取文本左边 (文本, 相减 (宽度, 3)), “...”))
    .如果结束
    
.如果结束



.子程序 输出文本数组, 空白型, 公开, 将文本数组内容以表格的形式输出到控制台（类似于MySql）
.参数 文本数组, 文本型, 数组, 
.参数 含表头, 逻辑型, 可空, “数组”参数中是否包含表头
.参数 加序号, 逻辑型, 可空, 是否在表格的最左边添加序号列（从1到n递增）
.参数 最大列宽, 整数型, 可空, 以字符数为单位

.局部变量 行数, 整数型, , , 
.局部变量 列数, 整数型, , , 
.局部变量 各列宽度数组, 整数型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 行文本, 文本型, , , 
.局部变量 列文本, 文本型, , , 
.局部变量 序号, 整数型, , , 
.局部变量 序号列宽, 整数型, , , 
.局部变量 列宽, 整数型, , , 

.如果真 (是否为空 (含表头))
    赋值 (含表头, 假)
.如果真结束
.如果真 (是否为空 (加序号))
    赋值 (加序号, 假)
.如果真结束
.如果真 (或者 (是否为空 (最大列宽), 小于 (最大列宽, 5)))
    赋值 (最大列宽, 20)
.如果真结束

赋值 (行数, 取数组下标 (文本数组, 1))
赋值 (列数, 取数组下标 (文本数组, 2))
.如果真 (小于 (行数, 1))
    输出文本行 (“（表中没有数据）”)
    返回 ()
.如果真结束
.如果真 (等于 (列数, 0))
    赋值 (列数, 1)
.如果真结束

检查 (等于 (取数组下标 (文本数组, 3), 0)) ' 只能为一维或二维数组
.如果真 (大于 (取数组下标 (文本数组, 3), 0))
    输出文本行 (“（本命令不支持三维及三维以上维数的文本数组输出！）”)
    返回 ()
.如果真结束

 ' 把各列宽度先计算出来
重定义数组 (各列宽度数组, 假, 列数)
.计次循环首 (列数, i)
    赋值 (各列宽度数组 [i], 相加 (取数组列最大文本长度 (文本数组, i, 行数, 列数), 2)) ' 把两头的空格留出来
    .如果真 (大于 (各列宽度数组 [i], 最大列宽))
        赋值 (各列宽度数组 [i], 最大列宽)
    .如果真结束
    .如果真 (小于 (各列宽度数组 [i], 6))
        赋值 (各列宽度数组 [i], 6)
    .如果真结束
    
.计次循环尾 ()
.如果真 (加序号)
    插入成员 (各列宽度数组, 1, 选择 (小于 (行数, 10000), 6, 8))
    赋值 (序号列宽, 各列宽度数组 [1])
.如果真结束

 ' 开始输出表格形式的文本
赋值 (序号, 0)
.计次循环首 (行数, i)
    赋值 (行文本, “”)
    .如果真 (等于 (i, 1))
        赋值 (行文本, 相加 (行文本, 取分隔文本行 (各列宽度数组), 换行符))
    .如果真结束
    .如果真 (并且 (含表头, 等于 (i, 2)))
        赋值 (行文本, 相加 (行文本, 取分隔文本行 (各列宽度数组), 换行符))
    .如果真结束
    
    赋值 (行文本, 相加 (行文本, “|”))
    .如果真 (加序号)
        .如果真 (并且 (含表头, 等于 (i, 1)))
            赋值 (行文本, 相加 (行文本, “ ”, 取固定宽度文本 (“序号”, 相减 (序号列宽, 2)), “ |”))
        .如果真结束
        .如果真 (或者 (并且 (含表头, 大于 (i, 1)), 等于 (含表头, 假)))
            赋值 (序号, 相加 (序号, 1))
            赋值 (行文本, 相加 (行文本, “ ”, 取固定宽度文本 (到文本 (序号), 相减 (序号列宽, 2)), “ |”))
        .如果真结束
        
    .如果真结束
    
    .计次循环首 (列数, j)
        .如果 (小于或等于 (列数, 1))
            赋值 (列文本, 文本数组 [i])
        .否则
            赋值 (列文本, 文本数组 [i] [j])
        .如果结束
        
         ' 列宽 ＝ 选择 (加序号, 各列宽度数组 [j ＋ 1], 各列宽度数组 [j])  '不能这样写! 可能会读数组越界。
        赋值 (列宽, 各列宽度数组 [选择 (加序号, 相加 (j, 1), j)])
        赋值 (行文本, 相加 (行文本, “ ”, 取固定宽度文本 (列文本, 相减 (列宽, 2)), “ |”))
    .计次循环尾 ()
    输出文本行 (行文本)
.计次循环尾 ()
输出文本行 (取分隔文本行 (各列宽度数组))

等待任意键继续 ()


.子程序 取分隔文本行, 文本型, , 返回文本类似“+--+------+”。本命令仅用于“输出文本数组”命令。
.参数 匿名参数_244, 整数型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (文本, “+”)
.计次循环首 (取数组成员数 (匿名参数_244), i)
    赋值 (文本, 相加 (文本, 取重复文本 (匿名参数_244 [i], “-”), “+”))
.计次循环尾 ()
返回 (文本)



 ' 不属于任何一个程序集、类模块的函数：
