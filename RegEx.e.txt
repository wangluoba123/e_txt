 ' 文件类型：Windows窗口程序

 ' 程序名称：注册表操作增强模块
 ' 程序描述：内含大量注册表操作函数，让易操作注册表更强大
 ' 程序作者：Mr X
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：kingofdemon@sohu.com
 ' 主页地址：
 ' 版权声明：我的第42个“易语言”程序
 ' 版本号：1.32
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 3 系统核心支持库




数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 


.DLL命令 RegCreateKeyEx, 整数型, "Advapi32.dll", "RegCreateKeyExA", , 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 Reserved, 整数型, , 
    .参数 lpClass, 整数型, , 
    .参数 dwOptions, 整数型, , 
    .参数 samDesired, 整数型, , 
    .参数 lpSecurityAttributes, 整数型, , 
    .参数 phkResult, 整数型, 传址, 
    .参数 lpdwDisposition, 整数型, , 

.DLL命令 RegSetValueEx, 整数型, "Advapi32.dll", "RegSetValueExA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 
    .参数 Reserved, 整数型, , 
    .参数 dwType, 整数型, , 
    .参数 lpData, 字节集, , 
    .参数 cbData, 整数型, , 

.DLL命令 RegQueryValueEx, 整数型, "Advapi32.dll", "RegQueryValueExA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 
    .参数 lpReserved, 整数型, , 
    .参数 lpType, 整数型, 传址, 
    .参数 lpData, 字节集, , 
    .参数 lpcbData, 整数型, 传址, 

.DLL命令 RegCloseKey, 整数型, "Advapi32.dll", "RegCloseKey", , 
    .参数 hKey, 整数型, , 

.DLL命令 RegDeleteValue, 整数型, "Advapi32.dll", "RegDeleteValueA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 

.DLL命令 SHDeleteKey, 整数型, "shlwapi.dll", "SHDeleteKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 

.DLL命令 SHDeleteEmptyKey, 整数型, "shlwapi.dll", "SHDeleteEmptyKeyA", , 
    .参数 hkey, 整数型, , 
    .参数 pszSubKey, 文本型, , 

.DLL命令 RegEnumKeyEx, 整数型, "Advapi32.dll", "RegEnumKeyExA", , 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpName, 字节集, , 
    .参数 lpcName, 整数型, 传址, 
    .参数 lpReserved, 整数型, , 
    .参数 lpClass, 字节集, , 
    .参数 lpcClass, 整数型, 传址, 
    .参数 lpftLastWriteTime, FILETIME, , 

.DLL命令 RegEnumValue, 整数型, "Advapi32.dll", "RegEnumValueA", , 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpValueName, 字节集, , 
    .参数 lpcValueName, 整数型, 传址, 
    .参数 lpReserved, 整数型, , 
    .参数 lpType, 整数型, 传址, 
    .参数 lpData, 字节集, , 
    .参数 lpcData, 整数型, 传址, 

.DLL命令 RegSaveKey, 整数型, "Advapi32.dll", "RegSaveKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpFile, 文本型, , 
    .参数 lpSecurityAttributes, 整数型, , 

.DLL命令 RegLoadKey, 整数型, "Advapi32.dll", "RegLoadKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 lpFile, 文本型, , 

.DLL命令 RegReplaceKey, 整数型, "Advapi32.dll", "RegReplaceKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 lpNewFile, 文本型, , 
    .参数 lpOldFile, 文本型, , 

.DLL命令 RegRestoreKey, 整数型, "Advapi32.dll", "RegRestoreKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpFile, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 RegConnectRegistry, 整数型, "Advapi32.dll", "RegConnectRegistry", , 
    .参数 lpMachineName, 文本型, , 
    .参数 hKey, 整数型, , 
    .参数 phkResult, 整数型, 传址, 

.DLL命令 RegQueryInfoKey, 整数型, "Advapi32.dll", "RegQueryInfoKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpClass, 字节集, , 
    .参数 lpcClass, 整数型, 传址, 
    .参数 lpReserved, 整数型, 传址, 
    .参数 lpcSubKeys, 整数型, 传址, 
    .参数 lpcMaxSubKeyLen, 整数型, 传址, 
    .参数 lpcMaxClassLen, 整数型, 传址, 
    .参数 lpcValues, 整数型, 传址, 
    .参数 lpcMaxValueNameLen, 整数型, 传址, 
    .参数 lpcMaxValueLen, 整数型, 传址, 
    .参数 lpcbSecurityDescriptor, 整数型, 传址, 
    .参数 lpftLastWriteTime, FILETIME, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在模块初始化代码执行完毕后调用模块测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 hKey, 整数型, , "3", 
.局部变量 a, 文本型, , "0", 
.局部变量 b, 字节集, , "0", 
.局部变量 c, 整数型, , "0", 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的参数及返回值类型。
导出注册表文件 (“C:\a.reg”, “”)
暂停 ()

.程序集 _接口程序集, , , 在本程序集中定义的子程序可被模块外部程序访问，注意如果不存在本程序集就不能作为易模块编译。

.子程序 取根键句柄, 整数型, , 失败返回0。此句柄不必关闭
.参数 根键, 字节型, , 1、HKEY_CLASSES_ROOT； 2、HKEY_CURRENT_USER； 3、HKEY_LOCAL_MACHINE； 4、HKEY_USERS； 5、HKEY_PERFORMANCE_DATA（仅在WinNT）； 6、HKEY_CURRENT_CONFIG； 7、HKEY_DYN_DATA（仅在Win95/98/ME）

.如果真 (或者 (大于 (根键, 7), 等于 (根键, 0)))
    返回 (0)
.如果真结束
返回 (相加 (2147483647, 根键))

.子程序 打开子键, 逻辑型, , 
.参数 根键句柄, 整数型, , 
.参数 子键, 文本型, , 如果子键不存在将被创建
.参数 打开方式, 整数型, , 0：允许全部操作  1：只读  2：只写
.参数 易失性, 逻辑型, 可空, 注册项被保存在内存中，重启后消失（仅适用于WinNT）。默认为假
.参数 子键句柄, 整数型, 参考, 设置一个整数型容器，用来接收返回的子键句柄。不再使用时，应调用 关闭键句柄() 来关闭子键句柄

.局部变量 Lost, 整数型, , , 

赋值 (Lost, 0)
.如果真 (等于 (是否为空 (易失性), 假))
    .如果真 (易失性)
        赋值 (Lost, 1)
    .如果真结束
    
.如果真结束
.判断开始 (等于 (打开方式, 0))
    返回 (等于 (RegCreateKeyEx (根键句柄, 子键, 0, 0, Lost, 983103, 0, 子键句柄, 0), 0))
.判断 (等于 (打开方式, 1))
    返回 (等于 (RegCreateKeyEx (根键句柄, 子键, 0, 0, Lost, 131097, 0, 子键句柄, 0), 0))
.判断 (等于 (打开方式, 2))
    返回 (等于 (RegCreateKeyEx (根键句柄, 子键, 0, 0, Lost, 131078, 0, 子键句柄, 0), 0))
.默认
    
.判断结束
返回 (假)

.子程序 打开远程子键, 逻辑型, , 
.参数 远程计算机名, 文本型, , 采用“\\计算机名”的形式
.参数 根键句柄, 整数型, , 
.参数 远程句柄, 整数型, 参考, 设置一整数性容器，返回远程系统上的指定根键句柄

返回 (等于 (RegConnectRegistry (远程计算机名, 根键句柄, 远程句柄), 0))

.子程序 写键值项, 逻辑型, , 
.参数 父键句柄, 整数型, , 
.参数 键值项, 文本型, , 
.参数 键值类型, 字节型, , 1、字符串； 2、扩展字符串； 3、二进制数据； 4、小尾DWORD值； 5、大尾（高位排在低字节）DWORD值；  6、Unicode符号链接； 7、多字符串（格式为 "字符串1,0,字符串2,0,0"）； 8、设备驱动程序资源表
.参数 键值数据, 字节集, , 注意字符串、扩展字符串要以0结尾，多字符串要以0,0结尾

.局部变量 Length, 整数型, , , 

.如果真 (或者 (等于 (键值类型, 0), 大于 (键值类型, 8)))
    返回 (假)
.如果真结束
返回 (等于 (RegSetValueEx (父键句柄, 键值项, 0, 键值类型, 键值数据, 取字节集长度 (键值数据)), 0))

.子程序 读键值项, 逻辑型, , 
.参数 父键句柄, 整数型, , 
.参数 键值项, 文本型, , 
.参数 键值类型, 整数型, 参考, 设置一整数型容器，用来接收返回的键值类型。1、字符串； 2、扩展字符串； 3、二进制数据； 4、小尾DWORD值； 5、大尾（高位排在低字节）DWORD值；  6、Unicode符号链接； 7、多字符串（格式为 "字符串1,0,字符串2,0,0"）； 8、设备驱动程序资源表
.参数 键值数据, 字节集, , 设置一字节集缓冲区，用来接收返回的键值
.参数 键值长度, 整数型, 参考, 设置一整数性容器，返回实际键长，如果缓冲区太小，将返回需要的长度

赋值 (键值长度, 取字节集长度 (键值数据))
返回 (等于 (RegQueryValueEx (父键句柄, 键值项, 0, 键值类型, 键值数据, 键值长度), 0))

.子程序 删除键, 逻辑型, , 指定键包含的所有子键&键值都会被删除
.参数 父键句柄, 整数型, , 
.参数 键名, 文本型, , 

返回 (等于 (SHDeleteKey (父键句柄, 键名), 0))

.子程序 删除空键, 逻辑型, , 仅当指定键不包含任何子键或键值才会被删除
.参数 父键句柄, 整数型, , 
.参数 键名, 文本型, , 

返回 (等于 (SHDeleteEmptyKey (父键句柄, 键名), 0))

.子程序 删除键值项, 逻辑型, , 
.参数 父键句柄, 整数型, , 
.参数 键值项, 文本型, , 

返回 (等于 (RegDeleteValue (父键句柄, 键值项), 0))

.子程序 查询键信息, 逻辑型, , 
.参数 键句柄, 整数型, , 
.参数 类名, 文本型, 参考 可空, 
.参数 子键数, 整数型, 参考, 
.参数 子键最大长度, 整数型, 参考, 
.参数 子键类名最大长度, 整数型, 参考, 
.参数 键值数, 整数型, 参考, 
.参数 键值名最大长度, 整数型, 参考, 
.参数 键值数据最大长度, 整数型, 参考, 
.参数 安全描述符最大长度, 整数型, 参考, 
.参数 最后修改时间高位, 整数型, 参考 可空, 
.参数 最后修改时间低位, 整数型, 参考 可空, 

.局部变量 Class, 字节集, , , 
.局部变量 Time, FILETIME, , , 
.局部变量 long, 整数型, , , 
.局部变量 ret, 逻辑型, , , 

赋值 (long, 16384)
赋值 (Class, 取空白字节集 (long))
赋值 (ret, 等于 (RegQueryInfoKey (键句柄, Class, long, 0, 子键数, 子键最大长度, 子键类名最大长度, 键值数, 键值名最大长度, 键值数据最大长度, 安全描述符最大长度, Time), 0))
.如果真 (等于 (是否为空 (类名), 假))
    赋值 (类名, 取字节集数据 (取字节集左边 (Class, long), 10))
.如果真结束
.如果真 (等于 (是否为空 (最后修改时间高位), 假))
    赋值 (最后修改时间高位, Time.dwHighDateTime)
.如果真结束
.如果真 (等于 (是否为空 (最后修改时间低位), 假))
    赋值 (最后修改时间低位, Time.dwLowDateTime)
.如果真结束
返回 (ret)

.子程序 枚举子键, 整数型, , 返回子键数
.参数 父键句柄, 整数型, , 
.参数 子键名, 文本型, 数组, 
.参数 子键类名, 文本型, 可空 数组, 
.参数 最后修改时间高位, 整数型, 可空 数组, 最后修改时间高32位
.参数 最后修改时间低位, 整数型, 可空 数组, 最后修改时间低32位

.局部变量 Index, 整数型, , , 
.局部变量 Name, 字节集, , , 
.局部变量 Class, 字节集, , , 
.局部变量 Npoint, 整数型, , , 
.局部变量 Cpoint, 整数型, , , 
.局部变量 time, FILETIME, , , 
.局部变量 ret, 整数型, , , 

重定义数组 (子键名, 假, 0)
.如果真 (等于 (是否为空 (子键类名), 假))
    重定义数组 (子键类名, 假, 0)
.如果真结束
.如果真 (等于 (是否为空 (最后修改时间高位), 假))
    重定义数组 (最后修改时间高位, 假, 0)
.如果真结束
.如果真 (等于 (是否为空 (最后修改时间低位), 假))
    重定义数组 (最后修改时间低位, 假, 0)
.如果真结束
.如果真 (等于 (父键句柄, 0))
    返回 (0)
.如果真结束
赋值 (Name, 取空白字节集 (255))
赋值 (Class, 取空白字节集 (255))
赋值 (Npoint, 255)
赋值 (Cpoint, 255)
赋值 (ret, RegEnumKeyEx (父键句柄, Index, Name, Npoint, 0, Class, Cpoint, time))
.判断循环首 (不等于 (ret, 259))
    加入成员 (子键名, 取字节集数据 (Name, 10))
    .如果真 (等于 (是否为空 (子键类名), 假))
        加入成员 (子键类名, 取字节集数据 (Class, 10))
    .如果真结束
    .如果真 (等于 (是否为空 (最后修改时间高位), 假))
        加入成员 (最后修改时间高位, time.dwHighDateTime)
    .如果真结束
    .如果真 (等于 (是否为空 (最后修改时间低位), 假))
        加入成员 (最后修改时间低位, time.dwLowDateTime)
    .如果真结束
    赋值 (Name, 取空白字节集 (255))
    赋值 (Class, 取空白字节集 (255))
    赋值 (Npoint, 255)
    赋值 (Cpoint, 255)
    赋值 (Index, 相加 (Index, 1))
    赋值 (ret, RegEnumKeyEx (父键句柄, Index, Name, Npoint, 0, Class, Cpoint, time))
.判断循环尾 ()
返回 (取数组成员数 (子键名))

.子程序 枚举键值项, 整数型, , 返回键值数
.参数 父键句柄, 整数型, , 
.参数 键值项, 文本型, 数组, 
.参数 键值数据, 字节集, 数组, 
.参数 键值类型, 整数型, 数组, 1、字符串； 2、扩展字符串； 3、二进制数据； 4、小尾DWORD值； 5、大尾（高位排在低字节）DWORD值；  6、Unicode符号链接； 7、多字符串（格式为 "字符串1,0,字符串2,0,0"）； 8、设备驱动程序资源表

.局部变量 Index, 整数型, , , 
.局部变量 Name, 字节集, , , 
.局部变量 Type, 整数型, , , 
.局部变量 Nlong, 整数型, , , 
.局部变量 Dlong, 整数型, , , 
.局部变量 Data, 字节集, , , 
.局部变量 ret, 整数型, , , 

重定义数组 (键值项, 假, 0)
重定义数组 (键值数据, 假, 0)
重定义数组 (键值类型, 假, 0)
.如果真 (等于 (父键句柄, 0))
    返回 (0)
.如果真结束
赋值 (Name, 取空白字节集 (16384))
赋值 (Data, 取空白字节集 (16384))
赋值 (Nlong, 16384)
赋值 (Dlong, 16384)
赋值 (Index, 0)
赋值 (ret, RegEnumValue (父键句柄, Index, Name, Nlong, 0, Type, Data, Dlong))
.判断循环首 (不等于 (ret, 259))
    加入成员 (键值项, 取字节集数据 (取字节集左边 (Name, Nlong), 10))
    加入成员 (键值类型, Type)
    加入成员 (键值数据, 取字节集左边 (Data, Dlong))
    赋值 (Name, 取空白字节集 (16384))
    赋值 (Data, 取空白字节集 (16384))
    赋值 (Nlong, 16384)
    赋值 (Dlong, 16384)
    赋值 (Index, 相加 (Index, 1))
    赋值 (ret, RegEnumValue (父键句柄, Index, Name, Nlong, 0, Type, Data, Dlong))
.判断循环尾 ()
返回 (取数组成员数 (键值项))

.子程序 保存注册键, 逻辑型, , 将一个键以及它的所有子键都保存到一个磁盘文件
.参数 父键句柄, 整数型, , 
.参数 保存文件名, 文本型, , 

返回 (等于 (RegSaveKey (父键句柄, 保存文件名, 0), 0))

.子程序 载入注册键, 逻辑型, , 从以前用 保存注册键() 创建的一个文件里装载注册表信息
.参数 父键句柄, 整数型, , 
.参数 子键名, 文本型, , 要创建的新子项的名字
.参数 保存文件名, 文本型, , 包含了注册信息的文件

返回 (等于 (RegLoadKey (父键句柄, 子键名, 保存文件名), 0))

.子程序 替换注册键, 逻辑型, , 用一个磁盘文件保存的信息替换注册表信息；并创建一个备份，在其中包含当前注册表信息
.参数 父键句柄, 整数型, , 
.参数 子键名, 文本型, , 
.参数 新文件名, 文本型, , 包含了注册表信息的一个文件的名字。这个文件是 保存注册键() 创建的
.参数 旧文件名, 文本型, , 对当前注册表信息进行备份的文件名

返回 (等于 (RegReplaceKey (父键句柄, 子键名, 新文件名, 旧文件名), 0))

.子程序 恢复注册键, 逻辑型, , 
.参数 父键句柄, 整数型, , 
.参数 文件名, 文本型, , 要从中恢复注册表信息的文件
.参数 易失性, 逻辑型, , 如果为真，父键句柄必须为HKEY_USERS或HKEY_LOCAL_MACHINE。参见 打开子键()

.判断开始 (易失性)
    返回 (等于 (RegRestoreKey (父键句柄, 文件名, 1), 0))
.默认
    返回 (等于 (RegRestoreKey (父键句柄, 文件名, 2), 0))
.判断结束
返回 (假)

.子程序 关闭键句柄, 逻辑型, , 
.参数 句柄, 整数型, , 

返回 (等于 (RegCloseKey (句柄), 0))

.子程序 导出注册表文件, 空白型, , 
.参数 指定文件, 文本型, , 
.参数 导出的键, 文本型, , 空文本表示全部导出

运行 (相加 (“Regedit /E ”, #引号, 指定文件, #引号, “ ”, 导出的键), 真, )

.子程序 导入注册表文件, 空白型, , 
.参数 指定文件, 文本型, , 
.参数 显示询问消息框, 逻辑型, , 

.局部变量 K, 文本型, , , 

.如果真 (等于 (显示询问消息框, 假))
    赋值 (K, “/S ”)
.如果真结束
运行 (相加 (“Regedit ”, K, #引号, 指定文件, #引号), 真, )

.子程序 取根键名, 文本型, , 
.参数 根键, 字节型, , 1、HKEY_CLASSES_ROOT； 2、HKEY_CURRENT_USER； 3、HKEY_LOCAL_MACHINE； 4、HKEY_USERS； 5、HKEY_PERFORMANCE_DATA（仅在WinNT）； 6、HKEY_CURRENT_CONFIG； 7、HKEY_DYN_DATA（仅在Win95/98/ME）

.如果真 (或者 (小于 (根键, 1), 大于 (根键, 7)))
    返回 (“”)
.如果真结束
返回 (多项选择 (根键, “HKEY_CLASSES_ROOT”, “HKEY_CURRENT_USER”, “HKEY_LOCAL_MACHINE”, “HKEY_USERS”, “HKEY_PERFORMANCE_DATA”, “HKEY_CURRENT_CONFIG”, “HKEY_DYN_DATA”))


 ' 不属于任何一个程序集、类模块的函数：
