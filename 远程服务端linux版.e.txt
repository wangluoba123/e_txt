 ' 文件类型：Linux控制台程序

 ' 程序名称：远程服务端LINUX版
 ' 程序描述：实现了在LINUX系统下，服务端与客户端的发送，处理数据功能。
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库
 ' Exmlrpc A36CFD538657479eBD7C0D287BBB3D95 1 1 远程服务支持库





.程序集 启动程序集, , , 

.程序集变量 服务端, 未知类型0x20001, , , 
.程序集变量 接收方式, 文本型, , , 
.程序集变量 输出, 逻辑型, , , 
.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
启动服务器 ()
标准输入 ()
标准输出 (“再按就退出了”)
服务端.未知支持库函数_2 ()
标准输入 ()
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 取文本, 空白型, , 
.参数 地址, 整数型, , 
.参数 句柄, 整数型, , 

.局部变量 客户代码, 文本型, , , 
.局部变量 请求文本, 文本型, , , 

.如果 (等于 (服务端.未知支持库函数_4 (地址, 客户代码, 请求文本), 真))
    标准输出 (相加 (“ ,  ”, 到文本 (取文本长度 (请求文本)), #换行符))
    服务端.未知支持库函数_6 (客户代码, “收到”)
    服务端.未知支持库函数_6 (句柄, “123”) ' 只有异步发送数据时有效
.否则
    标准输出 (相加 (“  没有得到客户信息”, #换行符))
.如果结束


.子程序 启动服务器, 空白型, , 
.局部变量 最小线程数, 文本型, , , 
.局部变量 最大线程数, 文本型, , , 
.局部变量 端口号, 文本型, , , 
.局部变量 运行方式, 文本型, , , 
.局部变量 启动, 逻辑型, , , 

标准输出 (相加 (“设置线程范围”, #换行符))
标准输出 (“请输入最小线程数：”)
赋值 (最小线程数, 标准输入 ())
标准输出 (“请输入最大线程数：”)
赋值 (最大线程数, 标准输入 ())
.如果 (等于 (服务端.未知支持库函数_3 (到数值 (最小线程数), 到数值 (最大线程数)), 真))
    标准输出 (相加 (“设置线程范围成功”, #换行符))
.否则
    标准输出 (相加 (“设置线程范围失败”, #换行符))
    启动服务器 ()
.如果结束
标准输出 (“请输入端口号：”)
赋值 (端口号, 标准输入 ())
标准输出 (“运行方式选择：（0--并行，1--串行）”)
赋值 (运行方式, 标准输入 ())
.如果 (等于 (运行方式, “0”))
    赋值 (启动, 服务端.未知支持库函数_1 (到数值 (端口号), &服务, 真))
.否则
    赋值 (启动, 服务端.未知支持库函数_1 (到数值 (端口号), &服务, 假))
.如果结束

标准输出 (“0--接收文本，1--接收字节集 ：”)
赋值 (接收方式, 标准输入 ())

.如果 (等于 (启动, 真))
    标准输出 (相加 (“服务启动成功”, #换行符))
.否则
    标准输出 (相加 (“服务启动失败”, #换行符))
    启动服务器 ()
.如果结束
停止服务 ()

.子程序 服务, 空白型, , 
.参数 请求信息地址, 整数型, , 

.局部变量 客户代码, 文本型, , , 
.局部变量 客户IP地址, 文本型, , , 
.局部变量 客户句柄, 整数型, , , 

.如果 (等于 (服务端.未知支持库函数_8 (请求信息地址, 客户句柄), 真))
    服务端.未知支持库函数_9 (客户句柄, 客户IP地址)
    .如果真 (等于 (输出, 假))
        标准输出 (相加 (“共有 ”, 到文本 (服务端.未知支持库函数_10 ()), “ 个客户端连接”, #换行符))
        标准输出 (相加 (“IP：”, 客户IP地址, “,句柄：”, 到文本 (客户句柄)))
    .如果真结束
    
    .如果 (等于 (接收方式, “0”))
        取文本 (请求信息地址, 客户句柄)
    .否则
        取字节集 (请求信息地址, 客户句柄)
    .如果结束
    
.否则
    标准输出 (相加 (“接收发生错误”, #换行符))
.如果结束


.子程序 取字节集, 空白型, , 
.参数 地址, 整数型, , 
.参数 句柄, 整数型, , 

.局部变量 请求代码, 文本型, , , 
.局部变量 请求字节集, 字节集, , , 

.如果 (等于 (服务端.未知支持库函数_5 (地址, 请求代码, 请求字节集), 真))
    .如果真 (等于 (输出, 假))
        标准输出 (相加 (“ ,  ”, 到文本 (取字节集长度 (请求字节集)), #换行符))
    .如果真结束
    
    服务端.未知支持库函数_7 (请求代码, 请求字节集)
    服务端.未知支持库函数_7 (句柄, 请求字节集) ' 只有异步发送数据时有效
.否则
    标准输出 (相加 (“  没有得到客户信息”, #换行符))
.如果结束


.子程序 停止服务, 空白型, , 
.局部变量 停止, 文本型, , , 
.局部变量 断开句柄, 文本型, , , 
.局部变量 客户句柄, 整数型, , "0", 
.局部变量 计次变量, 整数型, , , 
.局部变量 客户IP, 文本型, , , 

标准输出 (相加 (“停止服务请输入 dj  ---- ”, #换行符))
标准输出 (相加 (“要断开某客户请输入 dk ----”, #换行符))
赋值 (停止, 标准输入 ())
.判断开始 (等于 (删全部空 (停止), “dj”))
    服务端.未知支持库函数_2 ()
    标准输出 (相加 (“服务停止”, #换行符))
    标准输入 ()
    启动服务器 ()
.判断 (等于 (删全部空 (停止), “dk”))
    赋值 (输出, 真)
    .如果真 (服务端.未知支持库函数_11 (客户句柄))
        标准输出 (相加 (“客户IP地址与客户端传送句柄列表”, #换行符))
        .计次循环首 (取数组成员数 (客户句柄), 计次变量)
            服务端.未知支持库函数_9 (客户句柄 [计次变量], 客户IP)
            标准输出 (相加 (客户IP, “ , ”, 到文本 (客户句柄 [计次变量]), #换行符))
        .计次循环尾 ()
    .如果真结束
    标准输出 (“请输入要停止的句柄：”)
    赋值 (断开句柄, 标准输入 ())
    服务端.未知支持库函数_12 (到数值 (断开句柄))
    赋值 (输出, 假)
    停止服务 ()
.默认
    
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
