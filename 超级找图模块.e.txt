 ' 文件类型：Windows模块源码

 ' 程序名称：超级位图找图模块
 ' 程序描述：速度第一！
@备注:
稳定第二！
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库




数据类型 坐标_找图, 公开, 
    .成员 横X, 整数型, , , 
    .成员 纵Y, 整数型, , , 


.程序集 找图, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 位图寻图_文件名寻图_高速模式, 逻辑型, 公开, 寻找是否有图，返回真为有，无为没有
.参数 被寻找的图文件名, 文本型, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图文件名, 文本型, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入文件 (被寻找的图文件名) ' 加载图片
要找的图.载入文件 (要寻找的图文件名) ' 加载图片
.判断开始 (小于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                 ' 本源码来自易语言资源网(www.5A5X.com)
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图寻图_字节集寻图_高速模式, 逻辑型, 公开, 寻找是否有图寻找是否有图，返回真为有，无为没有
.参数 被寻找的图字节集, 字节集, , 被寻找的图的字节集，可看为一张大图
.参数 要寻找的图字节集, 字节集, , 要大图中的小图的字节集，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入数据 (被寻找的图字节集)
要找的图.载入数据 (要寻找的图字节集) ' 加载图片
.判断开始 (小于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图寻图_位图寻图_高速模式, 逻辑型, 公开, 寻找是否有图，返回真为有，无为没有
.参数 被寻找的位图, 位图, , 被寻找的位图，可看为一张大图
.参数 要寻找的位图, 位图, , 要大图中的小位图，可看为一张小图

.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被寻找的位图.载入文件 (被寻找的位图) ' 加载图片
 ' 要寻找的位图.载入文件 (要寻找的位图) ' 加载图片
.判断开始 (小于 (要寻找的位图.取宽度 (), 要寻找的位图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图找图_文件名找图_高速模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的图文件名, 文本型, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图文件名, 文本型, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入文件 (被寻找的图文件名) ' 加载图片
要找的图.载入文件 (要寻找的图文件名) ' 加载图片
赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (小于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值


.子程序 位图找图_字节集找图_高速模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的图字节集, 字节集, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图字节集, 字节集, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入数据 (被寻找的图字节集)
要找的图.载入数据 (要寻找的图字节集) ' 加载图片
赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (小于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值


.子程序 位图找图_位图找图_高速模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的位图, 位图, , 被寻找的位图，可看为一张大图
.参数 要寻找的位图, 位图, , 要大图中的小位图，可看为一张小图

.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (小于 (要寻找的位图.取宽度 (), 要寻找的位图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                 ' 本源码来自易语言资源网(www.5A5X.com)
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值

.子程序 位图寻图_文件名寻图_准确模式, 逻辑型, 公开, 寻找是否有图，返回真为有，无为没有
.参数 被寻找的图文件名, 文本型, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图文件名, 文本型, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入文件 (被寻找的图文件名) ' 加载图片
要找的图.载入文件 (要寻找的图文件名) ' 加载图片
.判断开始 (大于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图寻图_字节集寻图_准确模式, 逻辑型, 公开, 寻找是否有图寻找是否有图，返回真为有，无为没有
.参数 被寻找的图字节集, 字节集, , 被寻找的图的字节集，可看为一张大图
.参数 要寻找的图字节集, 字节集, , 要大图中的小图的字节集，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入数据 (被寻找的图字节集)
要找的图.载入数据 (要寻找的图字节集) ' 加载图片
.判断开始 (大于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图寻图_位图寻图_准确模式, 逻辑型, 公开, 寻找是否有图，返回真为有，无为没有
.参数 被寻找的位图, 位图, , 被寻找的位图，可看为一张大图
.参数 要寻找的位图, 位图, , 要大图中的小位图，可看为一张小图

.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被寻找的位图.载入文件 (被寻找的位图) ' 加载图片
 ' 要寻找的位图.载入文件 (要寻找的位图) ' 加载图片
.判断开始 (大于 (要寻找的位图.取宽度 (), 要寻找的位图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .如果真 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (真) ' 返回坐标
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (假) ' 返回失败值

.子程序 位图找图_文件名找图_准确模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的图文件名, 文本型, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图文件名, 文本型, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入文件 (被寻找的图文件名) ' 加载图片
要找的图.载入文件 (要寻找的图文件名) ' 加载图片
赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (大于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                 ' 本源码来自易语言资源网(www.5A5X.com)
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值


.子程序 位图找图_字节集找图_准确模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的图字节集, 字节集, , 被寻找的图的文件名，可看为一张大图
.参数 要寻找的图字节集, 字节集, , 要大图中的小图的文件名，可看为一张小图

.局部变量 被找的图, 位图, , , 
.局部变量 要找的图, 位图, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

被找的图.载入数据 (被寻找的图字节集)
要找的图.载入数据 (要寻找的图字节集) ' 加载图片
赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (大于 (要找的图.取宽度 (), 要找的图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要找的图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被找的图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被找的图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被找的图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要找的图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要找的图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值


.子程序 位图找图_位图找图_准确模式, 坐标_找图, 公开, 找到图后将返回（要找的位图）相对与（被找的位图）的坐标，否则返回坐标（-1，-1）
.参数 被寻找的位图, 位图, , 被寻找的位图，可看为一张大图
.参数 要寻找的位图, 位图, , 要大图中的小位图，可看为一张小图

.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 返回坐标, 坐标_找图, , , 
.局部变量 递进扫描坐标, 整数型, , , 

赋值 (返回坐标.横X, -1) ' 准备找图失败返回
赋值 (返回坐标.纵Y, -1) ' 准备找图失败返回
.判断开始 (大于 (要寻找的位图.取宽度 (), 要寻找的位图.取高度 ())) ' 判断采用那个方式扫描快
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (递进扫描坐标, 0)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取宽度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.默认
    赋值 (颜色, 要寻找的位图.取某点颜色 (0, 0)) ' 预先取色
    .计次循环首 (被寻找的位图.取宽度 (), 宽) ' 横向扫描，循环取所有点颜色
        .计次循环首 (被寻找的位图.取高度 (), 高) ' 横向扫描，循环取所有点颜色
            .判断开始 (等于 (颜色, 被寻找的位图.取某点颜色 (相减 (宽, 2), 相减 (高, 2)))) ' 对比是否颜色相同
                赋值 (递进扫描坐标, 相加 (递进扫描坐标, 1)) ' 准备要找图的第二的坐标
                赋值 (颜色, 要寻找的位图.取某点颜色 (0, 递进扫描坐标)) ' 取要找图的第二点色
                .如果真 (等于 (返回坐标.横X, -1)) ' 判断是否赋值给返回坐标
                    赋值 (返回坐标.横X, 相减 (宽, 2)) ' 赋予第一点相同颜色只坐标
                    赋值 (返回坐标.纵Y, 相减 (高, 2)) ' 赋予第一点相同颜色只坐标
                .如果真结束
                .如果真 (等于 (递进扫描坐标, 相减 (要寻找的位图.取高度 (), 1))) ' 判断是否对比完图片的第一排像素
                    返回 (返回坐标) ' 返回坐标
                .如果真结束
                
            .默认
                .如果真 (不等于 (返回坐标.横X, -1)) ' 否颜色不相同，赋予初使值给返回坐标
                    赋值 (返回坐标.横X, -1)
                    赋值 (返回坐标.纵Y, -1)
                .如果真结束
                ' 本源码来自易语言资源网(www.5A5X.com)
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.判断结束
返回 (返回坐标) ' 返回失败值


 ' 不属于任何一个程序集、类模块的函数：
