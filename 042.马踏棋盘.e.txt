 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 马踏棋盘
 ' 程序描述：    在8 × 8的国际象棋棋盘上，从任意指定的方格出发，为马寻找一条走遍棋盘每一格并且只经过依次的一条路径，如果找到请显示出来。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 410
    高度 = 307
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 马踏棋盘”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一





.窗口程序集 启动窗口程序集, , , 

.程序集变量 行变化数组, 整数型, , "8", 记录可能的八种横坐标变化
.程序集变量 列变化数组, 整数型, , "8", 记录可能的八种纵坐标变化
.程序集变量 模拟棋盘数组, 整数型, , "8,8", 模拟一个8*8的棋盘
.程序集变量 可行方法数组, 整数型, , "0", 存储每种在棋盘内的下一步走法
.程序集变量 结果数组, 文本型, , "0", 存储找到的结果
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：贪心法
 ' 问题：马踏棋盘
 ' 问题描述：
 ' 在8 × 8的国际象棋棋盘上，从任意指定的方格出发，为马寻找一条走遍棋盘每一格并且只经过依次的一条路径，如果找到请显示出来。
 ' 问题分析：
 ' 熟悉国际象棋的人都知道，马在某个方格，可以在一步内到达的不同位置最多有8个。
 ' 如图所示：
 ' #4#3#
 ' 5#0#2
 ' 6###1
 ' #7#8#
 ' （1）对马走的方法可以设定一个顺序，如当前位置在棋盘的(i,j)方格，下一个可能的位置依次为(i+2,j+1),(i+1,j+2),(i-1,j+2),(i-2,j+1),(i-2,j-1),(i-1,j-2),(i+1,j-2),(i+2,j-1),实际可以走的位置很明显仅仅限于还未走过的和不越出边界的那些位置。
 ' （2）这里我们定义马在一步内实际可以走的位置数为马在当前位置的出口数，此外，为便于程序的统一处理，这里引入两个数组
 ' “行变化数组”和“列变化数组”，分别储存8种可能走法对马当前所在位置的横纵坐标的增量。
 ' （3）本题用贪心法策略求解。
 ' 当马处于某一位置时，其选择下一位置的准则为：从马当前位置所允许走的位置中，选择出口数最少的哪个位置。如马的当前位置只有3个出口，它们的出口数分别为4，2，3，则程序就选择出口数为2的那个出口。
 ' 算法简单描述
 ' {    马从棋盘第一行第一列位置开始出发；
 ' '     预设着法选择顺序控制变量“方法编号”为1；
 ' '     循环判断首（）
 ' '       模拟棋盘数组初始化为0；
 ' '       行号=起始行号；列号=起始列号；
 ' '         计次循环首（63，当前遍历步数）
 ' '            如果(马当前位置没有出口)
 ' '             返回（-1）
 ' '            否则 行号按返回方法改变；列号按返回方法改变。
 ' '              在棋盘相对位置记录为第几步骤；
 ' '         如果(找到解)
 ' '               输出模拟棋盘数组；
 ' '               终止循环；
 ' '         否则 方法编号=方法编号+1；
 ' '         循环判断尾（没有找到解）
 ' }

 ' 上述算法在整个找解的过程一直向前，所以能非常快地找到解。但是对于某些开始位置，实际上有解可程序第一次找不到解，则程序只要变换8中可能出口的顺序，就能找到解。考虑到这种变换8种方法的情况，程序引用“方法编号“用于控制8种可能走法的顺序。开始为1时不能找到解，就让"方法编号"加1，重新找解。
 ' 棋盘中任何一个位置，马最多可以向八个方向走，下面数组记录着向某一个方向跳马后，马在棋盘上的坐标变化

赋值 (行变化数组, { 2, 1, -1, -2, -2, -1, 1, 2 })
赋值 (列变化数组, { 1, 2, 2, 1, -1, -2, -2, -1 })

.子程序 _计算图形按钮_被单击, 空白型, , 
 ' 清空上一次的记录
全部删除 ()
.计次循环首 (取表项数 (), )
    0.删除表项 ()
.计次循环尾 ()
六十四格遍历子程序 () ' 开始运行主程序

.子程序 六十四格遍历子程序, 空白型, , 求出每个位置是否都有解，有则记录到结果数组中
.局部变量 起始行号, 整数型, , , 本次试探的开始行号
.局部变量 起始列号, 整数型, , , 本次试探的开始列号
.局部变量 行号, 整数型, , , 跳出一步后马所在的行
.局部变量 列号, 整数型, , , 跳出一步后马所在的列
.局部变量 当前遍历步数, 整数型, , , 记共走了多少步，等于64时得到一个解
.局部变量 方法编号, 整数型, , , 改变"行变化数组"和"列变化数组"的先后顺序以找到一个存在的解
.局部变量 返回的改变方法, 整数型, , , 找到一个合适的跳法，返回变化方法的数组下标
.局部变量 表项位置, 整数型, , , 插入新的表项的返回值
.局部变量 临时文本变量, 文本型, , , 找到一个解变换成文本放入数组中

.计次循环首 (8, 起始行号)
    .计次循环首 (8, 起始列号)
        赋值 (方法编号, 1) ' 从第1号方法开始顺序检查
        清除数组 (模拟棋盘数组)
        重定义数组 (模拟棋盘数组, 假, 8, 8)
        .循环判断首 () ' 循环64次求从不同位置为起始位置的解
            赋值 (模拟棋盘数组 [起始行号] [起始列号], 1) ' 在第一步位置标记为第1步
            赋值 (行号, 起始行号) ' 马的第一步的位置
            赋值 (列号, 起始列号) ' 马的第一步的位置
            .计次循环首 (63, 当前遍历步数) ' 依次试探剩余63步
                赋值 (当前遍历步数, 相加 (当前遍历步数, 1))
                赋值 (返回的改变方法, 试探下一步子程序 (行号, 列号, 方法编号))
                .如果真 (等于 (返回的改变方法, -1)) ' 马无处可跳，不在试探
                    跳出循环 ()
                .如果真结束
                 ' 有出口可走，走出下一步，改变坐标
                赋值 (行号, 相加 (行号, 行变化数组 [返回的改变方法]))
                赋值 (列号, 相加 (列号, 列变化数组 [返回的改变方法]))
                赋值 (模拟棋盘数组 [行号] [列号], 当前遍历步数)
                .如果真 (等于 (当前遍历步数, 64)) ' 找到一个解
                    赋值 (临时文本变量, “”) ' 清空前一个结果
                    赋值 (表项位置, .插入表项 ()) ' 将新结果保存
                    表项位置.置标题 (到文本 (相加 (表项位置, 1))) ' 列出是第几号结果
                     ' 列出第一步坐标
                    表项位置.置标题 (1, 相加 (“(”, 到文本 (起始行号), “,”, 到文本 (起始列号), “)”))
                    .计次循环首 (8, 行号)
                         ' 把棋盘六十四个格子的所走步数存于一个文本变量中用","分开10以内的步数用0补位
                        .计次循环首 (8, 列号)
                            .如果 (等于 (取文本长度 (到文本 (模拟棋盘数组 [行号] [列号])), 1))
                                赋值 (临时文本变量, 相加 (临时文本变量, “0”, 到文本 (模拟棋盘数组 [行号] [列号]), “,”))
                            .否则
                                赋值 (临时文本变量, 相加 (临时文本变量, 到文本 (模拟棋盘数组 [行号] [列号]), “,”))
                            .如果结束
                            
                        .计次循环尾 ()
                    .计次循环尾 ()
                    加入成员 (结果数组, 临时文本变量)
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (等于 (方法编号, 64)) ' 穷尽了所有方法，改变起始位置
                跳出循环 ()
            .如果真结束
            赋值 (方法编号, 相加 (方法编号, 1))
        .循环判断尾 (小于或等于 (当前遍历步数, 64))
    .计次循环尾 ()
.计次循环尾 ()

.子程序 试探下一步子程序, 整数型, , 
.参数 行号, 整数型, , 马的当前行坐标
.参数 列号, 整数型, , 马的当前列坐标
.参数 方法编号, 整数型, , 当前试探所用的顺序规则对应“行变化数组”和“列变化数组”

.局部变量 返回值, 整数型, , , 返回有多少种跳法
.局部变量 局部计次变量, 整数型, , , 
.局部变量 最小出口数, 整数型, , , 逐一考查每一个下一步，找到出口最少的下一步，记录它的出口数
.局部变量 获得方法数组, 整数型, , "0", 记录当前坐标可有多少重跳法
.局部变量 出口数临时变量, 整数型, , , 记录每种跳法的出口数
.局部变量 记录跳法变量, 整数型, , , 返回按哪种方法变化坐标，对应“行变化数组”和“列变化数组”下标

清除数组 (获得方法数组) ' 清空上一次结果
赋值 (返回值, 计算出口数子程序 (行号, 列号, 方法编号))
.如果真 (等于 (返回值, 0)) ' 没有出口，无法跳出下一步，返回
    返回 (-1)
.如果真结束
赋值 (最小出口数, 9)
 ' 得到的出口必然比9小
赋值 (获得方法数组, 可行方法数组) ' 接收找到的跳法
.计次循环首 (取数组成员数 (获得方法数组), 局部计次变量) ' 依次考查找到的跳法
    赋值 (出口数临时变量, 计算出口数子程序 (相加 (行号, 行变化数组 [获得方法数组] [局部计次变量]), 相加 (列号, 列变化数组 [获得方法数组] [局部计次变量]), 方法编号)) ' 求当前坐标，记录每种跳法（获得方法数组 [局部计次变量]）的出口数
    .如果真 (小于 (出口数临时变量, 最小出口数))
        赋值 (最小出口数, 出口数临时变量) ' 如果有比当前最小出口数还小的跳法替换之
        赋值 (记录跳法变量, 获得方法数组 [局部计次变量]) ' 返回该跳法的坐标变换方法
    .如果真结束
    
.计次循环尾 ()
返回 (记录跳法变量)

.子程序 计算出口数子程序, 整数型, , 求给定坐标的跳法总数
.参数 行号, 整数型, , 考查坐标的行
.参数 列号, 整数型, , 考查坐标的列
.参数 方法编号, 整数型, , 5记录顺序选择八种可能方向的变量

.局部变量 坐标改变后行号, 整数型, , , 记录改变后的行坐标
.局部变量 坐标改变后列号, 整数型, , , 记录改变后的列坐标
.局部变量 局部计次变量, 整数型, , , 从给定的方法编号开始依次变换八种坐标改变方法
.局部变量 出口数之和, 整数型, , , 记录仍在棋盘内的合理的走法

赋值 (出口数之和, 0)
清除数组 (可行方法数组) ' 清除上一次的记录
.计次循环首 (8, 局部计次变量)
     ' 向八个方向试探是否可以跳
    赋值 (坐标改变后行号, 相加 (行号, 行变化数组 [相加 (求余数 (相减 (相加 (方法编号, 局部计次变量), 2), 8), 1)]))
    赋值 (坐标改变后列号, 相加 (列号, 列变化数组 [相加 (求余数 (相减 (相加 (方法编号, 局部计次变量), 2), 8), 1)]))
    .如果真 (并且 (大于 (坐标改变后行号, 0), 小于或等于 (坐标改变后行号, 8), 大于 (坐标改变后列号, 0), 小于或等于 (坐标改变后列号, 8), 等于 (模拟棋盘数组 [坐标改变后行号] [坐标改变后列号], 0))) ' 如果按作标改变行号列号后，还能落在棋盘内（行列坐标大于0）并且该位置没有跳过则可以算做该位置的一个出口
        赋值 (出口数之和, 相加 (出口数之和, 1)) ' 跳法增加
        加入成员 (可行方法数组, 相加 (求余数 (相减 (相加 (方法编号, 局部计次变量), 2), 8), 1))
    .如果真结束
    
.计次循环尾 ()
返回 (出口数之和)

.子程序 _结果超级列表框_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 选择的结果, 整数型, , , 选择的要看结果
.局部变量 接收记录数组, 文本型, , "0", 
.局部变量 行号, 整数型, , , 坐标
.局部变量 列号, 整数型, , , 坐标

.计次循环首 (取表项数 (), )
    0.删除表项 ()
.计次循环尾 ()
.如果真 (不等于 (., -1))
    赋值 (选择的结果, 相加 (., 1))
    赋值 (接收记录数组, 分割文本 (结果数组 [选择的结果], , )) ' 按半角逗号分割一种跳法的六十四步，存于一维数组
    .计次循环首 (8, 行号) ' 依次在8 × 8的棋盘上显示步骤
        .插入表项 (相加 (到文本 (行号), “|”), , , , ) ' 打印行号
        .计次循环首 (8, 列号)
            相减 (行号, 1).置标题 (列号, 到文本 (到数值 (接收记录数组 [相加 (相乘 (相减 (行号, 1), 8), 列号)]))) ' 从第一步开始遍历六十四步
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
