 ' 文件类型：Windows模块源码

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.常量 h进制, "“0123456789ABCDEF”", , 
.常量 常0, "“0000”", , 
.常量 常1, "“0001”", , 
.常量 常2, "“0010”", , 
.常量 常3, "“0011”", , 
.常量 常4, "“0100”", , 
.常量 常5, "“0101”", , 
.常量 常6, "“0110”", , 
.常量 常7, "“0111”", , 
.常量 常8, "“1000”", , 
.常量 常9, "“1001”", , 
.常量 A, "“1010”", , 
.常量 B, "“1011”", , 
.常量 C, "“1100”", , 
.常量 D, "“1101”", , 
.常量 EE, "“1110”", , 
.常量 F, "“1111”", , 
.常量 , , , 
.常量 Q0, "“000”", , 
.常量 Q1, "“001”", , 
.常量 Q2, "“010”", , 
.常量 Q3, "“011”", , 
.常量 Q4, "“100”", , 
.常量 Q5, "“101”", , 
.常量 Q6, "“110”", , 
.常量 Q7, "“111”", , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
调试输出 (进制转换 (“31.5”, 8, 16))


 ' 二进制转十进制正确--------------------25.625
 ' 二进制转八进制---------------------31.5
 ' 二进制转换十六进制------------------19.A

 ' 十进制转二进制正确--------------------11001.101
 ' 十进制转十六进制------------------------19.A
 ' 十进制转八进制--------------------------------31.5

 ' 十六进制转换为二进制------------------------------0011001.1010
 ' 十六进制转换为十进制-------------------------------25.625
 ' 十六进制转换为八进制--------------------------------31.5

 ' 八进制转换为二进制-------------------------------------11001.101
 ' 八进制转换为十进制----------------------------------------25.625
 ' 八进制转换为十六进制-------------------------------------------19.A


.子程序 进制转换, 文本型, 公开, 支持2，8，10，16，进制互转
.参数 待转换数据, 文本型, , '准备转换的数据，要求文本数据
.参数 待转换进制, 整数型, , '准备转换的原始数据的进制数
.参数 欲转换进制, 整数型, , '欲转换成的进制数

.局部变量 数据分段, 文本型, , "0", 
.局部变量 正数数据长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 正数数值, 长整数型, , , 
.局部变量 负数数值, 双精度小数型, , , 
.局部变量 负数数据长度, 整数型, , , 
.局部变量 转换结果数值, 文本型, , , 
.局部变量 正数数据余数, 整数型, , , 
.局部变量 正数部分, 文本型, , , 
.局部变量 取文本段, 文本型, , , 
.局部变量 十六进制正数数据, 文本型, , , 
.局部变量 负数数据余数, 整数型, , , 
.局部变量 负数部分, 文本型, , , 
.局部变量 十六进制负数部分, 文本型, , , 
.局部变量 八进制正数数据, 文本型, , , 
.局部变量 八进制负数部分, 文本型, , , 
.局部变量 十进制余数, 整数型, , , 
.局部变量 余数, 文本型, , , 
.局部变量 十进制正数临时数据, 文本型, , , 
.局部变量 正数数据, 整数型, , , 
.局部变量 负数值, 双精度小数型, , , 
.局部变量 临时负数, 双精度小数型, , , 
.局部变量 负数运算, 文本型, , "0", 
.局部变量 十进制负数临时数据, 文本型, , , 
.局部变量 分割后负数, 文本型, , , 
.局部变量 八进制正数临时数据, 文本型, , , 
.局部变量 八进制负数临时数据, 文本型, , , 
.局部变量 十六进制正数临时数据, 文本型, , , 
.局部变量 十六进制负数临时数据, 文本型, , , 
.局部变量 二进制正数临时数据, 文本型, , , 
.局部变量 匿名局部变量_164, 空白型, , , 
.局部变量 匿名局部变量_165, 空白型, , , 
.局部变量 二进制负数临时数据, 文本型, , , 
.局部变量 十进制正数临时数, 整数型, , , 
.局部变量 十进制负数临时数, 双精度小数型, , , 
.局部变量 匿名局部变量_343, 空白型, , , 


.判断开始 (并且 (等于 (待转换进制, 2), 等于 (欲转换进制, 10))) ' 二进制转换为十进制@-------------------------------------------------
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
         ' 本源码来自易语言资源网(www.5A5X.com)
        .计次循环首 (正数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (数据分段 [1], i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
                
            .如果真结束
            赋值 (正数数值, 相加 (正数数值, 相乘 (到数值 (取文本中间 (数据分段 [1], i, 1)), 求次方 (2, 相减 (正数数据长度, i)))))
            调试输出 (取文本中间 (数据分段 [1], i, 1))
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (数据分段 [2], i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
                
            .如果真结束
            
            
            赋值 (负数数值, 相加 (负数数值, 相乘 (到数值 (取文本中间 (数据分段 [2], i, 1)), 求次方 (2, 负 (相减 (相加 (取文本长度 (数据分段 [2]), 1), i))))))
             ' 本源码来自易语言资源网(www.5A5X.com)
            调试输出 (负数数值)
        .计次循环尾 ()
        赋值 (转换结果数值, 到文本 (相加 (正数数值, 负数数值)))
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (待转换数据, i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
            .如果真结束
            
            赋值 (正数数值, 相加 (正数数值, 相乘 (到数值 (取文本中间 (待转换数据, i, 1)), 求次方 (2, 相减 (正数数据长度, i)))))
        .计次循环尾 ()
        赋值 (转换结果数值, 到文本 (正数数值))
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    
.判断 (并且 (等于 (待转换进制, 2), 等于 (欲转换进制, 16))) ' 二进制转换十六进制
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        赋值 (正数数据余数, 求余数 (正数数据长度, 4))
        赋值 (正数数据长度, 相减 (相加 (取文本长度 (数据分段 [1]), 4), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (4, 正数数据余数), “0”), 数据分段 [1]))
        
        .计次循环首 (相除 (正数数据长度, 4), i)
            
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            
            
            赋值 (十六进制正数数据, 相加 (十六进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        赋值 (负数数据余数, 求余数 (负数数据长度, 4))
        赋值 (负数数据长度, 相减 (相加 (负数数据长度, 4), 负数数据余数))
        赋值 (负数部分, 相加 (数据分段 [2], 取重复文本 (相减 (4, 负数数据余数), “0”)))
        赋值 (负数数据长度, 取文本长度 (负数部分))
        .计次循环首 (相除 (负数数据长度, 4), i)
            赋值 (取文本段, 取文本中间 (负数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            赋值 (十六进制负数部分, 相加 (十六进制负数部分, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
             ' 本源码来自易语言资源网(www.5A5X.com)
        .计次循环尾 ()
        赋值 (转换结果数值, 相加 (十六进制正数数据, “.”, 十六进制负数部分))
        
    .如果真结束
    
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        赋值 (正数数据余数, 求余数 (正数数据长度, 4))
        赋值 (正数数据长度, 相减 (相加 (正数数据长度, 4), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (4, 正数数据余数), “0”), 待转换数据))
        .计次循环首 (相除 (正数数据长度, 4), i)
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            赋值 (十六进制正数数据, 相加 (十六进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
        .计次循环尾 ()
        赋值 (转换结果数值, 十六进制正数数据)
        
    .如果真结束
    
.判断 (并且 (等于 (待转换进制, 2), 等于 (欲转换进制, 8))) ' 二进制转换为八进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        赋值 (正数数据余数, 求余数 (正数数据长度, 3))
        赋值 (正数数据长度, 相减 (相加 (取文本长度 (数据分段 [1]), 3), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (3, 正数数据余数), “0”), 数据分段 [1]))
         ' 本源码来自易语言资源网(www.5A5X.com)
        .计次循环首 (相除 (正数数据长度, 3), i)
            
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            
            赋值 (八进制正数数据, 相加 (八进制正数数据, 到文本 (相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))))))
            
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        赋值 (负数数据余数, 求余数 (负数数据长度, 3))
        赋值 (负数数据长度, 相减 (相加 (负数数据长度, 3), 负数数据余数))
        赋值 (负数部分, 相加 (数据分段 [2], 取重复文本 (相减 (3, 负数数据余数), “0”)))
        赋值 (负数数据长度, 取文本长度 (负数部分))
        .计次循环首 (相除 (负数数据长度, 3), i)
            赋值 (取文本段, 取文本中间 (负数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            
            
            赋值 (八进制负数部分, 相加 (八进制负数部分, 到文本 (相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))))))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 相加 (八进制正数数据, “.”, 八进制负数部分))
        
    .如果真结束
    
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        赋值 (正数数据余数, 求余数 (正数数据长度, 3))
        赋值 (正数数据长度, 相减 (相加 (正数数据长度, 3), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (3, 正数数据余数), “0”), 待转换数据))
        .计次循环首 (相除 (正数数据长度, 3), i)
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            赋值 (八进制正数数据, 相加 (八进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))), 1)))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 八进制正数数据)
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    
.判断 (并且 (等于 (待转换进制, 10), 等于 (欲转换进制, 2))) ' 十进制转换为二进制@
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据, 到数值 (数据分段 [1]))
        调试输出 (正数数据)
        
        .判断循环首 (大于 (正数数据, 0))
            赋值 (余数, 到文本 (求余数 (正数数据, 2)))
            调试输出 (余数)
            赋值 (正数数据, 整除 (正数数据, 2))
            
            赋值 (十进制正数临时数据, 相加 (余数, 十进制正数临时数据))
            .如果真 (等于 (正数数据, 1))
                赋值 (十进制正数临时数据, 相加 (到文本 (1), 十进制正数临时数据))
                跳出循环 ()
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断循环尾 ()
        赋值 (分割后负数, 相加 (“0.”, 数据分段 [2]))
        赋值 (临时负数, 到数值 (分割后负数))
        调试输出 (临时负数)
        
         ' 调试输出 (十进制正数临时数据)
        .循环判断首 ()
            赋值 (临时负数, 相乘 (临时负数, 2))
            赋值 (十进制负数临时数据, 相加 (十进制负数临时数据, 取文本左边 (到文本 (临时负数), 相减 (寻找文本 (到文本 (临时负数), “.”, , 假), 1))))
            
            赋值 (临时负数, 相减 (临时负数, 到数值 (取文本左边 (到文本 (临时负数), 寻找文本 (到文本 (临时负数), “.”, , 假)))))
            .如果真 (或者 (等于 (临时负数, 1), 等于 (临时负数, 0)))
                赋值 (十进制负数临时数据, 相加 (十进制负数临时数据, 到文本 (临时负数)))
                
            .如果真结束
            
        .循环判断尾 (不等于 (临时负数, 1))
        赋值 (转换结果数值, 相加 (十进制正数临时数据, “.”, 十进制负数临时数据))
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据, 到数值 (待转换数据))
        
        
        .判断循环首 (大于 (正数数据, 0))
            赋值 (余数, 到文本 (求余数 (正数数据, 2)))
            调试输出 (余数)
            赋值 (正数数据, 整除 (正数数据, 2))
            
            赋值 (十进制正数临时数据, 相加 (余数, 十进制正数临时数据))
            .如果真 (等于 (正数数据, 1))
                赋值 (十进制正数临时数据, 相加 (到文本 (1), 十进制正数临时数据))
                跳出循环 ()
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断循环尾 ()
        赋值 (转换结果数值, 十进制正数临时数据)
        
    .如果真结束
    
    
.判断 (并且 (等于 (待转换进制, 10), 等于 (欲转换进制, 8))) ' 十进制转换为八进制@
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据, 到数值 (数据分段 [1]))
        调试输出 (正数数据)
        
        .判断循环首 (大于 (正数数据, 7))
            赋值 (余数, 到文本 (求余数 (正数数据, 8)))
            调试输出 (余数)
            赋值 (正数数据, 整除 (正数数据, 8))
            
            赋值 (八进制正数临时数据, 相加 (余数, 八进制正数临时数据))
            
            .如果真 (小于 (正数数据, 8))
                赋值 (八进制正数临时数据, 相加 (到文本 (正数数据), 八进制正数临时数据))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (临时负数, 相减 (到数值 (待转换数据), 到数值 (数据分段 [1])))
        
        
         ' 调试输出 (十进制正数临时数据)
        .循环判断首 ()
            赋值 (临时负数, 相乘 (临时负数, 8))
            赋值 (数据分段, 分割文本 (到文本 (临时负数), “.”, ))
            
            赋值 (八进制负数临时数据, 相加 (八进制负数临时数据, 到文本 (数据分段 [1])))
            
            赋值 (临时负数, 相减 (临时负数, 到数值 (数据分段 [1])))
             ' 本源码来自易语言资源网(www.5A5X.com)
            
            
            清除数组 (数据分段)
        .循环判断尾 (不等于 (临时负数, 0))
        赋值 (转换结果数值, 相加 (八进制正数临时数据, “.”, 八进制负数临时数据))
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据, 到数值 (待转换数据))
        
        
        .判断循环首 (大于 (正数数据, 7))
            赋值 (余数, 到文本 (求余数 (正数数据, 8)))
            调试输出 (余数)
            赋值 (正数数据, 整除 (正数数据, 8))
            
            赋值 (八进制正数临时数据, 相加 (余数, 八进制正数临时数据))
            
            .如果真 (小于 (正数数据, 8))
                赋值 (八进制正数临时数据, 相加 (到文本 (正数数据), 八进制正数临时数据))
                
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (转换结果数值, 八进制正数临时数据)
    .如果真结束
    
    
    
    
    
.判断 (并且 (等于 (待转换进制, 10), 等于 (欲转换进制, 16))) ' 10进制转换为十六进制@
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据, 到数值 (数据分段 [1]))
        
        
        .判断循环首 (大于 (正数数据, 15))
            赋值 (余数, 到文本 (求余数 (正数数据, 16)))
            
            赋值 (正数数据, 整除 (正数数据, 16))
            
            赋值 (十六进制正数临时数据, 相加 (取文本中间 (#h进制, 相加 (到数值 (余数), 1), 1), 十六进制正数临时数据))
             ' 本源码来自易语言资源网(www.5A5X.com)
            .如果真 (小于 (正数数据, 16))
                赋值 (十六进制正数临时数据, 相加 (取文本中间 (#h进制, 相加 (到数值 (正数数据), 1), 1), 十六进制正数临时数据))
                
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (分割后负数, 相加 (“0.”, 数据分段 [2]))
        赋值 (临时负数, 到数值 (分割后负数))
         ' 调试输出 (十进制正数临时数据)
        .循环判断首 ()
            赋值 (临时负数, 相乘 (临时负数, 16))
            赋值 (数据分段, 分割文本 (到文本 (临时负数), “.”, ))
            赋值 (十六进制负数临时数据, 相加 (十六进制负数临时数据, 取文本中间 (#h进制, 相加 (到数值 (数据分段 [1]), 1), 1)))
            
            赋值 (数据分段, 分割文本 (到文本 (临时负数), “.”, ))
            
            赋值 (临时负数, 相减 (临时负数, 到数值 (数据分段 [1])))
            调试输出 (临时负数)
            
            
            清除数组 (数据分段)
            
        .循环判断尾 (不等于 (临时负数, 0))
        赋值 (转换结果数值, 相加 (十六进制正数临时数据, “.”, 十六进制负数临时数据))
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据, 到数值 (待转换数据))
        
        
        .判断循环首 (大于 (正数数据, 15))
            赋值 (余数, 到文本 (求余数 (正数数据, 16)))
            调试输出 (余数)
            赋值 (正数数据, 整除 (正数数据, 16))
            
            赋值 (十六进制正数临时数据, 相加 (取文本中间 (#h进制, 相加 (到数值 (余数), 1), 1), 十六进制正数临时数据))
            
            .如果真 (小于 (正数数据, 16))
                赋值 (十六进制正数临时数据, 相加 (取文本中间 (#h进制, 相加 (到数值 (正数数据), 1), 1), 十六进制正数临时数据))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (转换结果数值, 十六进制正数临时数据)
    .如果真结束
    
    
    
    
    
    
    
    
    
.判断 (并且 (等于 (待转换进制, 16), 等于 (欲转换进制, 2))) ' 十六进制转二进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            
            赋值 (二进制负数临时数据, 相加 (二进制负数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [2], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
            
        .计次循环尾 ()
        
        赋值 (转换结果数值, 相加 (二进制正数临时数据, “.”, 二进制负数临时数据))
        
        
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (转换结果数值, 二进制正数临时数据)
        
        
        
    .如果真结束
    
    
    
    
.判断 (并且 (等于 (待转换进制, 16), 等于 (欲转换进制, 8))) ' 十六进制装换8进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            
            赋值 (二进制负数临时数据, 相加 (二进制负数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [2], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
            
        .计次循环尾 ()
        
        赋值 (转换结果数值, 相加 (二进制正数临时数据, “.”, 二进制负数临时数据))
        
        
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (转换结果数值, 二进制正数临时数据)
        
        
        
    .如果真结束
    
    赋值 (待转换数据, 转换结果数值)
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        赋值 (正数数据余数, 求余数 (正数数据长度, 3))
        赋值 (正数数据长度, 相减 (相加 (取文本长度 (数据分段 [1]), 3), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (3, 正数数据余数), “0”), 数据分段 [1]))
        
        .计次循环首 (相除 (正数数据长度, 3), i)
            
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            
            赋值 (八进制正数数据, 相加 (八进制正数数据, 到文本 (相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))))))
            
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        赋值 (负数数据余数, 求余数 (负数数据长度, 3))
        赋值 (负数数据长度, 相减 (相加 (负数数据长度, 3), 负数数据余数))
        赋值 (负数部分, 相加 (数据分段 [2], 取重复文本 (相减 (3, 负数数据余数), “0”)))
        赋值 (负数数据长度, 取文本长度 (负数部分))
        .计次循环首 (相除 (负数数据长度, 3), i)
            赋值 (取文本段, 取文本中间 (负数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            
            
            赋值 (八进制负数部分, 相加 (八进制负数部分, 到文本 (相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))))))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 相加 (八进制正数数据, “.”, 八进制负数部分))
        
    .如果真结束
    
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        赋值 (正数数据余数, 求余数 (正数数据长度, 3))
        赋值 (正数数据长度, 相减 (相加 (正数数据长度, 3), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (3, 正数数据余数), “0”), 待转换数据))
        .计次循环首 (相除 (正数数据长度, 3), i)
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 3)), 3))
            赋值 (八进制正数数据, 相加 (八进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 0))), 1)))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 八进制正数数据)
    .如果真结束
    
    
.判断 (并且 (等于 (待转换进制, 16), 等于 (欲转换进制, 10))) ' 十六进制装换位十进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            
            赋值 (二进制负数临时数据, 相加 (二进制负数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [2], i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
            
        .计次循环尾 ()
        
        赋值 (转换结果数值, 相加 (二进制正数临时数据, “.”, 二进制负数临时数据))
        
        
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), , 假), #常0, #常1, #常2, #常3, #常4, #常5, #常6, #常7, #常8, #常9, #A, #B, #C, #D, #EE, #F)))
        .计次循环尾 ()
        
        赋值 (转换结果数值, 二进制正数临时数据)
        
        
    .如果真结束
    
    
    赋值 (待转换数据, 转换结果数值)
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (数据分段 [1], i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
                
            .如果真结束
            赋值 (正数数值, 相加 (正数数值, 相乘 (到数值 (取文本中间 (数据分段 [1], i, 1)), 求次方 (2, 相减 (正数数据长度, i)))))
            调试输出 (取文本中间 (数据分段 [1], i, 1))
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (数据分段 [2], i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
                
            .如果真结束
            
            
            赋值 (负数数值, 相加 (负数数值, 相乘 (到数值 (取文本中间 (数据分段 [2], i, 1)), 求次方 (2, 负 (i)))))
            调试输出 (负数数值)
        .计次循环尾 ()
        赋值 (转换结果数值, 到文本 (相加 (正数数值, 负数数值)))
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            .如果真 (大于 (到数值 (取文本中间 (待转换数据, i, 1)), 1))
                信息框 (“待二进制数据不允许有大于1的数值”, 0, )
                跳出循环 ()
            .如果真结束
            
            赋值 (正数数值, 相加 (正数数值, 相乘 (到数值 (取文本中间 (待转换数据, i, 1)), 求次方 (2, 相减 (正数数据长度, i)))))
        .计次循环尾 ()
        赋值 (转换结果数值, 到文本 (正数数值))
    .如果真结束
    
     ' 本源码来自易语言资源网(www.5A5X.com)
    
.判断 (并且 (等于 (待转换进制, 8), 等于 (欲转换进制, 2))) ' 八进制转换为二进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
        .计次循环尾 ()
        
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            
            赋值 (二进制负数临时数据, 相加 (二进制负数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [2], i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
            
        .计次循环尾 ()
        
        赋值 (转换结果数值, 相加 (二进制正数临时数据, “.”, 二进制负数临时数据))
        
        
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
        .计次循环尾 ()
        
        赋值 (转换结果数值, 二进制正数临时数据)
        
        
    .如果真结束
    
    
.判断 (并且 (等于 (待转换进制, 8), 等于 (欲转换进制, 10))) ' 八进制装换位十进制
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        
        .计次循环首 (取文本长度 (数据分段 [1]), i)
            赋值 (十进制正数临时数, 相加 (十进制正数临时数, 相乘 (到数值 (取文本中间 (数据分段 [1], i, 1)), 求次方 (8, 相减 (取文本长度 (数据分段 [1]), i)))))
            
        .计次循环尾 ()
        
        
        
        .计次循环首 (取文本长度 (数据分段 [2]), i)
            赋值 (十进制负数临时数, 相加 (十进制负数临时数, 相乘 (到数值 (取文本中间 (数据分段 [2], i, 1)), 求次方 (8, 负 (相加 (相减 (取文本长度 (数据分段 [2]), i), 1))))))
            
        .计次循环尾 ()
        调试输出 (十进制负数临时数)
        
        
        
        赋值 (转换结果数值, 到文本 (相加 (十进制正数临时数, 十进制负数临时数)))
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        
        .计次循环首 (取文本长度 (数据分段 [1]), i)
            赋值 (十进制正数临时数, 相加 (十进制正数临时数, 相乘 (到数值 (取文本中间 (数据分段 [1], i, 1)), 求次方 (8, 相减 (取文本长度 (数据分段 [1]), i)))))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 到文本 (十进制正数临时数))
        
    .如果真结束
    
    
    
    
    
    
    
    
    
    
    
    
    
.判断 (并且 (等于 (待转换进制, 8), 等于 (欲转换进制, 16)))
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [1], i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
        .计次循环尾 ()
        
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        .计次循环首 (负数数据长度, i)
            
            赋值 (二进制负数临时数据, 相加 (二进制负数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (数据分段 [2], i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
            
        .计次循环尾 ()
        
        赋值 (转换结果数值, 相加 (二进制正数临时数据, “.”, 二进制负数临时数据))
        
        
        
    .如果真结束
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        
        .计次循环首 (正数数据长度, i)
            
            调试输出 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), 1, 假))
            赋值 (二进制正数临时数据, 相加 (二进制正数临时数据, 多项选择 (寻找文本 (#h进制, 取文本中间 (待转换数据, i, 1), , 假), #Q0, #Q1, #Q2, #Q3, #Q4, #Q5, #Q6, #Q7)))
        .计次循环尾 ()
        
        赋值 (转换结果数值, 二进制正数临时数据)
        
        
    .如果真结束
    
    
    
    赋值 (待转换数据, 转换结果数值)
    
    .如果真 (不等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (数据分段, 分割文本 (待转换数据, “.”, ))
        赋值 (正数数据长度, 取文本长度 (数据分段 [1]))
        赋值 (正数数据余数, 求余数 (正数数据长度, 4))
        赋值 (正数数据长度, 相减 (相加 (取文本长度 (数据分段 [1]), 4), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (4, 正数数据余数), “0”), 数据分段 [1]))
        
        .计次循环首 (相除 (正数数据长度, 4), i)
            
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            
            
            赋值 (十六进制正数数据, 相加 (十六进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
        .计次循环尾 ()
        赋值 (负数数据长度, 取文本长度 (数据分段 [2]))
        赋值 (负数数据余数, 求余数 (负数数据长度, 4))
        赋值 (负数数据长度, 相减 (相加 (负数数据长度, 4), 负数数据余数))
        赋值 (负数部分, 相加 (数据分段 [2], 取重复文本 (相减 (4, 负数数据余数), “0”)))
        赋值 (负数数据长度, 取文本长度 (负数部分))
        .计次循环首 (相除 (负数数据长度, 4), i)
            赋值 (取文本段, 取文本中间 (负数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            赋值 (十六进制负数部分, 相加 (十六进制负数部分, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
            
        .计次循环尾 ()
        赋值 (转换结果数值, 相加 (十六进制正数数据, “.”, 十六进制负数部分))
        
    .如果真结束
    
    
    .如果真 (等于 (寻找文本 (待转换数据, “.”, , 假), -1))
        赋值 (正数数据长度, 取文本长度 (待转换数据))
        赋值 (正数数据余数, 求余数 (正数数据长度, 4))
        赋值 (正数数据长度, 相减 (相加 (正数数据长度, 4), 正数数据余数))
        赋值 (正数部分, 相加 (取重复文本 (相减 (4, 正数数据余数), “0”), 待转换数据))
        .计次循环首 (相除 (正数数据长度, 4), i)
            赋值 (取文本段, 取文本中间 (正数部分, 相加 (1, 相乘 (相减 (i, 1), 4)), 4))
            赋值 (十六进制正数数据, 相加 (十六进制正数数据, 取文本中间 (#h进制, 相加 (相乘 (到数值 (取文本中间 (取文本段, 1, 1)), 求次方 (2, 3)), 相乘 (到数值 (取文本中间 (取文本段, 2, 1)), 求次方 (2, 2)), 相乘 (到数值 (取文本中间 (取文本段, 3, 1)), 求次方 (2, 1)), 相乘 (到数值 (取文本中间 (取文本段, 4, 1)), 求次方 (2, 0)), 1), 1)))
        .计次循环尾 ()
        赋值 (转换结果数值, 十六进制正数数据)
    .如果真结束
    
    ' 本源码来自易语言资源网(www.5A5X.com)
.默认
    
.判断结束



返回 (转换结果数值)



 ' 不属于任何一个程序集、类模块的函数：
