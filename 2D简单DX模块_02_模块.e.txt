 ' 文件类型：Windows模块源码

 ' 程序名称：EDX_2D模块
 ' 程序描述：yish  2006-12-17
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 顶点大小, "28", 公开, 位置，颜色，纹理
.常量 顶点数组大小, "1000", 公开, 
.常量 , , , 
.常量 D3DFVF_PSIZE, "32", , 
.常量 D3DRS_POINTSPRITEENABLE, "156", , 
.常量 D3DRS_POINTSIZE_MIN, "155", , 
.常量 D3DRS_POINTSIZE_MAX, "166", , 
.常量 D3DRS_POINTSIZE, "154", , 
.常量 D3DRS_POINTSCALEENABLE, "157", , 
.常量 D3DRS_POINTSCALE_A, "158", , 
.常量 D3DRS_POINTSCALE_B, "159", , 
.常量 D3DRS_POINTSCALE_C, "160", , 
.常量 , , , 
.常量 度到弧, "0.01745329251944", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' ogrelib 2EAE87405D754ad780D8FE57432002EA 1 2 DirectX3D支持库
 ' commobj {A068799B-7551-46b9-8CA8-EEF8357AFEA4} 1 0 通用对象支持库




数据类型 顶点数据, , 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 
    .成员 z, 小数型, , , 
    .成员 RHW, 小数型, , , 
    .成员 顶点颜色, 整数型, , , 顶点数据使用
    .成员 纹理U, 小数型, , , 
    .成员 纹理V, 小数型, , , 

数据类型 两个点, , 
    .成员 V1, 顶点数据, , , 
    .成员 V2, 顶点数据, , , 

数据类型 三个点, , 
    .成员 V1, 顶点数据, , , 
    .成员 V2, 顶点数据, , , 
    .成员 V3, 顶点数据, , , 

数据类型 四个点, , 
    .成员 V1, 顶点数据, , , 
    .成员 V2, 顶点数据, , , 
    .成员 V3, 顶点数据, , , 
    .成员 V4, 顶点数据, , , 

数据类型 粒子属性, , 
    .成员 匿名成员410, 空白型, , , 
    .成员 匿名成员411, 空白型, , , 
    .成员 向量, 二维向量, , , 
    .成员 颜色_始, 空白型, , , 
    .成员 颜色_终, 空白型, , , 
    .成员 生命_上限, 空白型, , , 
    .成员 生命_下限, 空白型, , , 
    .成员 角度, 空白型, , , 

数据类型 二维向量, , 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 

数据类型 四维向量, , 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 
    .成员 z, 小数型, , , 
    .成员 RHW, 小数型, , , 

.全局变量 log, 日志类, 公开, , 
.全局变量 绘制对象, 未知类型0x30002, 公开, , 
.全局变量 设备, 未知类型0x20009, , , 
.全局变量 顶点缓冲, 未知类型0x20013, , , 
.全局变量 DX, 硬件设备类, 公开, , 
.全局变量 弧度表, 小数型, 公开, "360,2", 
.全局变量 图元暂存池, 未知类型0x30002, , , 
.全局变量 Z0, 小数型, , , 
.全局变量 RHW, 小数型, , , 
.全局变量 空纹理, 未知类型0x2000F, , , 

.DLL命令 复制内存_1V, 整数型, "kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址, 
    .参数 source, 顶点数据, 传址, 
    .参数 numBytes, 空白型, , 

.DLL命令 复制内存_2V, 整数型, "kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址, 
    .参数 source, 两个点, 传址, 
    .参数 numBytes, 空白型, , 

.DLL命令 复制内存_3V, 整数型, "kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址, 
    .参数 source, 三个点, 传址, 
    .参数 numBytes, 空白型, , 

.DLL命令 复制内存_4V, 整数型, "kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址, 
    .参数 source, 四个点, 传址, 
    .参数 numBytes, 空白型, , 

.DLL命令 timer, 整数型, "winmm.dll", "timeGetTime", , 高精度计时

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.程序集 数学集, , , 

.子程序 旋转二维向量, 空白型, , 
.参数 x_, 小数型, , 
.参数 y_, 小数型, , 
.参数 角度, 小数型, , 
.参数 retx, 小数型, 参考, 
.参数 rety, 小数型, 参考, 

赋值 (rety, 相加 (相乘 (x_, 求正弦 (角度)), 相乘 (y_, 求余弦 (角度))))
赋值 (retx, 相减 (相乘 (x_, 求余弦 (角度)), 相乘 (y_, 求正弦 (角度))))

.子程序 点等赋值2, 空白型, , 
.参数 v1, 二维向量, 参考, 
.参数 v2, 二维向量, 参考, 

赋值 (v1.x, v2.x)
赋值 (v1.y, v2.y)

.子程序 点加赋值2, 空白型, , 
.参数 v1, 二维向量, 参考, 
.参数 v2, 二维向量, 参考, 

赋值 (v1.x, 相加 (v1.x, v2.x))
赋值 (v1.y, 相加 (v1.y, v2.y))

.子程序 点减赋值2, 空白型, , 
.参数 v1, 二维向量, 参考, 
.参数 v2, 二维向量, 参考, 

赋值 (v1.x, 相减 (v1.x, v2.x))
赋值 (v1.y, 相减 (v1.y, v2.y))


.子程序 点乘赋值2, 空白型, , 
.参数 v1, 二维向量, 参考, 
.参数 v2, 二维向量, 参考, 

赋值 (v1.x, 相乘 (v1.x, v2.x))
赋值 (v1.y, 相乘 (v1.y, v2.y))


.子程序 点乘赋值1, 空白型, , 
.参数 v1, 二维向量, 参考, 
.参数 v2, 小数型, , 

赋值 (v1.x, 相乘 (v1.x, v2))
赋值 (v1.y, 相乘 (v1.y, v2))


.子程序 点绝对值, 小数型, , 
.参数 v1, 二维向量, 参考, 

返回 (求平方根 (相加 (相乘 (v1.x, v1.x), 相乘 (v1.y, v1.y))))

.子程序 点标准化, 空白型, , 
.参数 v1, 二维向量, 参考, 

.局部变量 长度, 小数型, , , 

赋值 (长度, 求平方根 (相加 (相乘 (v1.x, v1.x), 相乘 (v1.y, v1.y))))

.如果真 (等于 (长度, 0))
    返回 ()
.如果真结束

赋值 (长度, 相除 (1, 长度))
点乘赋值1 (v1, 长度)


.类模块 日志类, , , 

.程序集变量 私方式, 整数型, , , 
.程序集变量 私内容, 文本型, , , 
.程序集变量 私文件号, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (私方式, 0)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
.如果真 (不等于 (私文件号, 0))
    关闭文件 (私文件号)
.如果真结束


.子程序 开始记录, 空白型, , 
.参数 参输出方式, 空白型, , 0=关闭，1=调试输出，2=写到文本，3=写到文件
.参数 文件名, 文本型, 可空, 

赋值 (私方式, 参输出方式)
.如果真 (等于 (是否为空 (文件名), 假))
    赋值 (文件名, “默认日志.log.txt”)
.如果真结束
赋值 (私文件号, 打开文件 (相加 (取运行目录 (), “\”, 文件名), #重写, #禁止写))
输出 (“ ********      简单易用的DX平面图形模块 V0.1 版     ********”)
输出 (相加 (“ ********  当前的运行目录是 '”, 取运行目录 (), “'”, #换行符, #换行符))


.子程序 输出, 空白型, , 
.参数 txt, 文本型, , 



.判断开始 (等于 (私方式, 1)) ' 默认 输出调试文本()
    输出调试文本 (相加 (到文本 (取现行时间 ()), “:    ”, txt))
.判断 (等于 (私方式, 2))
    赋值 (私内容, 相加 (私内容, #换行符, “------------------  ”, #换行符, 到文本 (取现行时间 ()), “:    ”, txt))
.判断 (等于 (私方式, 3))
    写出文本 (私文件号, 相加 (#换行符, “------------------  ”, #换行符, 到文本 (取现行时间 ()), “:    ”, txt))
    
.默认
    
.判断结束


.子程序 输出方式, 空白型, , 
.参数 方式_, 整数型, , 

.如果真 (并且 (小于或等于 (0, 方式_), 小于或等于 (方式_, 3)))
    赋值 (私方式, 方式_)
.如果真结束


.子程序 取内容, 文本型, , 
返回 (私内容)

.类模块 硬件设备类, , , 

.程序集变量 灵活顶点标志_28, 整数型, , , 
.程序集变量 灵活顶点标志_20, 整数型, , , 
.程序集变量 匿名程序集变量_108, 空白型, , , 
.程序集变量 私背景颜色, 整数型, , , 
.程序集变量 匿名程序集变量_110, 空白型, , , 
.程序集变量 局设备, 未知类型0x2001B, , , 
.程序集变量 暂存点集_2, 字节集, , , 2个点,28*2
.程序集变量 匿名程序集变量_113, 空白型, , , 
.程序集变量 屏宽, 空白型, , , 
.程序集变量 屏高, 空白型, , , 
.程序集变量 匿名程序集变量_116, 空白型, , , 
.程序集变量 LTu, 小数型, , , 临时UV变量
.程序集变量 LTv, 小数型, , , 
.程序集变量 连画_类型, 空白型, , , 
.程序集变量 连画_有纹理, 逻辑型, , , 
.程序集变量 连画_开, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (暂存点集_2, 取空白字节集 (相乘 (28, 2)))
赋值 (Z0, 0)
赋值 (RHW, 1)

赋值 (LTv, 1)
赋值 (LTu, 1)


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化, 逻辑型, 公开, 
.参数 窗口句柄参, 整数型, , 
.参数 全屏否, 逻辑型, , 
.参数 参宽度, 空白型, 可空, 
.参数 参高度, 空白型, 可空, 

.局部变量 局设备特性, 未知类型0x20026, , , 
.局部变量 局特性, 整数型, , , 

log.开始记录 (1)


图元暂存池.未知支持库函数_133 (相乘 (1024, 20))
图元暂存池.未知支持库函数_132 (相乘 (20, 50, 4), 相乘 (28, 50, 4))



数学扩展集_初始化 ()
赋值 (局设备., 1)
.如果 (等于 (全屏否, 假)) ' 窗口模式
    log.输出 (“在窗口模式下运行”)
    赋值 (局设备., 真)
    赋值 (局设备., #.)
    赋值 (局设备., #.)
    赋值 (局设备., #.)
    
.否则
    赋值 (局设备., 假)
    赋值 (局设备., #.)
    
    赋值 (局设备., #.)
    赋值 (局设备., #.) ' 或者 #页面格式.透8红8绿8蓝8
    赋值 (局设备., 假)
     ' 局设备.深度缓冲的格式 ＝ #页面格式.Z缓冲区16位
    .如果 (小于 (参宽度, 640))
        赋值 (屏宽, 取屏幕宽度 ())
    .否则
        赋值 (屏宽, 参宽度)
    .如果结束
    
    .如果 (小于 (参高度, 480))
        赋值 (屏高, 取屏幕高度 ())
    .否则
        赋值 (屏高, 参高度)
    .如果结束
    
    赋值 (局设备., 屏宽)
    赋值 (局设备., 屏高)
    
.如果结束

赋值 (局设备., 窗口句柄参)
.如果真 (等于 (设备.未知支持库函数_172 (局设备特性), 假))
    log.输出 (“不能取得设备特性！”)
.如果真结束

.如果 (不等于 (位与 (局设备特性., 1048576), 0)) ' 1048576 = 纯设备
    赋值 (局特性, 位或 (#., #.))
    log.输出 (“支持并使用 [ 纯设备、硬件顶点处理 ] ”)
.否则
    .如果 (不等于 (位与 (局设备特性., #.), 0))
        赋值 (局特性, #.)
        log.输出 (“支持并使用 [ 硬件顶点处理 ] ”)
    .否则
        赋值 (局特性, #.)
        log.输出 (“不支持硬件顶点，只能使用 [ 软件顶点处理 ] ”)
    .如果结束
    
.如果结束



.如果真 (等于 (设备.未知支持库函数_144 (局设备, 窗口句柄参, #., 局特性), 假))
    log.输出 (“创建设备 失败！”)
    
    返回 (假)
.如果真结束

log.输出 (“创建设备 成功！”)

.如果真 (等于 (设备.未知支持库函数_152 (相乘 (1000, #顶点大小), 0, 灵活顶点标志_28, #., 顶点缓冲), 假))
    log.输出 (“创建顶点缓冲 失败！”)
    返回 (假)
.如果真结束


log.输出 (“创建顶点缓冲 成功！”)


 ' 2D 图像处理，只需位置4个，颜色1个，纹理2个，共7个乘4= 28 字节
赋值 (灵活顶点标志_28, 位或 (#., #., #.))
赋值 (灵活顶点标志_20, 位或 (#., #.))
设备.未知支持库函数_156 (灵活顶点标志_28)


 ' 设置设备取样器状态
设备.未知支持库函数_169 (0, #., #.)
设备.未知支持库函数_169 (0, #., #.)


 ' 启用以下项目
 ' 设备.置纹理层状态 (0, #纹理层状态类型.透明通道操作, #纹理层操作.乘)
设备.未知支持库函数_157 (#., 1)
设备.未知支持库函数_157 (#., 5)
设备.未知支持库函数_157 (#., 6)
 ' 设备.置渲染状态 (#渲染状态.着色模式, #渲染状态值.高洛德着色)

 ' 禁用以下项目
 ' 设备.置渲染状态 (#渲染状态.背面剔除模式, #渲染状态值.逆时针剔除背面)
设备.未知支持库函数_157 (#., 0)
设备.未知支持库函数_157 (#., 0)

log.输出 (“ DX 设备初始化成功！”)

 ' .如果 (设备.未知支持库函数_199 (128, 128, #., #., ))
     ' log.输出 (“ 创建 空页面成功！”)
.否则
     ' log.输出 (“ 创建 空页面失败！”)
    
.如果结束



返回 (真)

.子程序 开始渲染, 空白型, 公开, 
设备.未知支持库函数_149 ()

.子程序 清屏, 空白型, 公开, 
.参数 A, 空白型, , 
.参数 R, 空白型, , 
.参数 G, 空白型, , 
.参数 B, 空白型, , 

赋值 (私背景颜色, 未知支持库函数_287 (A, R, G, B))
设备.未知支持库函数_148 (#., 私背景颜色, , , )

.子程序 填充点结构, 空白型, , 
.参数 点结构_, 顶点数据, 参考, 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 color, 整数型, , 
.参数 tu, 小数型, 可空, 
.参数 tv, 小数型, 可空, 

赋值 (点结构_.x, x)
赋值 (点结构_.y, y)
赋值 (点结构_.z, 0)
赋值 (点结构_.RHW, 1)
赋值 (点结构_.顶点颜色, color)
赋值 (点结构_.纹理U, tu)
赋值 (点结构_.纹理V, tv)

.子程序 画线, 空白型, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 x2, 小数型, , 
.参数 y2, 小数型, , 
.参数 参颜色, 整数型, , 

 ' 填充点结构 (局线.V1, x1, y1, 参颜色)
 ' 填充点结构 (局线.V2, x2, y2, 参颜色)
图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色, LTu, LTv, x2, y2, Z0, RHW, 参颜色, LTu, LTv)

 ' 复制内存_2V (暂存点集_2 [1], 局线, 56)
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 28)
设备.未知支持库函数_156 (灵活顶点标志_28) ' 线 不使用纹理
设备.未知支持库函数_153 (#., 0, 1)

图元暂存池.未知支持库函数_86 ()

.子程序 画点, 空白型, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 参颜色, 整数型, 可空, 

.局部变量 局点, 顶点数据, , , 
.局部变量 Lz, 字节型, , "28", 28*1

 ' 填充点结构 (局点, x1, y1, 参颜色)
 ' 复制内存_1V (暂存点集_2 [1], 局点, 28)  ' 28*1
图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色)
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 20) ' 没有纹理，所以为20
设备.未知支持库函数_156 (灵活顶点标志_20)
设备.未知支持库函数_153 (#., 0, 1)


.子程序 连续画点_开始, 空白型, , 
.参数 图形类, 整数型, , 1=点列，2=线列，3=线带，4=三角列，5=三角带，6=三角扇
.参数 带纹理, 逻辑型, , 

 ' 1=点列，2=线列，3=线带，4=三角列，5=三角带，6=三角扇
 ' 必须在上次连画结束后才能调用
.如果真 (并且 (等于 (连画_开, 假), 大于 (图形类, 0), 小于 (图形类, 7)))
    图元暂存池.未知支持库函数_86 () ' 开始画以后不再清零
    赋值 (连画_开, 真)
    赋值 (连画_类型, 图形类)
    赋值 (连画_有纹理, 带纹理)
.如果真结束


.子程序 连续画点1, 空白型, , 没有纹理,5个成员
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 参颜色, 整数型, 可空, 

.如果真 (并且 (连画_开, 等于 (连画_有纹理, 假)))
    图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色)
    
.如果真结束


.子程序 连续画点2, 空白型, , 有纹理，7个成员
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 参颜色, 整数型, 可空, 
.参数 tu_, 小数型, , 
.参数 tv_, 小数型, , 

.如果真 (并且 (连画_开, 连画_有纹理))
    图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色, tu_, tv_)
    
.如果真结束


.子程序 连续画点_结束, 空白型, , 必须与 连续画点_开始 成对使用
.局部变量 N_, 空白型, , , 

.如果真 (连画_开)
    .如果 (连画_有纹理)
        赋值 (N_, 图元个数查询 (连画_类型, 相除 (图元暂存池.未知支持库函数_83 (), 28)))
        
        顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
        设备.未知支持库函数_155 (0, 顶点缓冲, 0, 28) ' 有纹理为28字节
        设备.未知支持库函数_156 (灵活顶点标志_28) ' 要设置28字节标志
        设备.未知支持库函数_153 (连画_类型, 0, N_)
        图元暂存池.未知支持库函数_86 ()
        
    .否则
         ' 无纹理时的计算
        赋值 (N_, 图元个数查询 (连画_类型, 相除 (图元暂存池.未知支持库函数_83 (), 20)))
        
        顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
        设备.未知支持库函数_155 (0, 顶点缓冲, 0, 20) ' 有纹理为20字节
        设备.未知支持库函数_156 (灵活顶点标志_20) ' 要设置20字节标志
        设备.未知支持库函数_153 (连画_类型, 0, N_)
        图元暂存池.未知支持库函数_86 ()
        
    .如果结束
    
    赋值 (连画_开, 假)
    赋值 (连画_类型, 0)
.如果真结束


.子程序 图元个数查询, 整数型, , 
.参数 类型, 整数型, , 
.参数 个数_, 整数型, , 

.判断开始 (等于 (类型, 1)) ' 点列
    返回 (个数_) ' 每N点绘出N个点
.判断 (等于 (类型, 2)) ' 线列
    返回 (相除 (个数_, 2)) ' 每N点绘出N/2 条线
.判断 (等于 (类型, 3)) ' 线带
    返回 (相减 (个数_, 1)) ' 每N点绘出N-1 条线
.判断 (等于 (类型, 4)) ' 三角列
    返回 (相除 (个数_, 3)) ' 每N点绘出N/3 个三角
.判断 (等于 (类型, 5)) ' 三角带
    返回 (相减 (个数_, 2)) ' 每N点绘出N-2 个三角
.判断 (等于 (类型, 6)) ' 三角扇
    返回 (相减 (个数_, 2)) ' 每N点绘出N-2 个三角
.默认
    返回 (0)
.判断结束


.子程序 连续画点_3, 空白型, , 没有纹理坐标
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 参颜色, 整数型, , 


图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色)

 ' 复制内存_2V (Lz [1], 局线, 28)

 ' 顶点缓冲.写入数据 (0, Lz)
 ' 设备.置源数据流 (0, 顶点缓冲, 0, 28)
 ' ' 设备.置灵活顶点格式 (灵活顶点标志)
 ' 设备.渲染图元 (#设备常量.点列, 0, 1)


.子程序 连续画点_置点_3, 空白型, , 没有纹理坐标
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 参颜色, 整数型, , 

图元暂存池.未知支持库函数_87 (x1, y1, Z0, RHW, 参颜色)
 ' 复制内存_2V (Lz [1], 局线, 28)

 ' 顶点缓冲.写入数据 (0, Lz)
 ' 设备.置源数据流 (0, 顶点缓冲, 0, 28)
 ' ' 设备.置灵活顶点格式 (灵活顶点标志)
 ' 设备.渲染图元 (#设备常量.点列, 0, 1)


.子程序 连续画点_最后画出_点3, 空白型, , 
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 20)
设备.未知支持库函数_156 (灵活顶点标志_20)
设备.未知支持库函数_153 (#., 0, 整除 (图元暂存池.未知支持库函数_83 (), 28))
图元暂存池.未知支持库函数_86 ()


.子程序 连续画点_最后画出_点5, 空白型, , 
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 28)
设备.未知支持库函数_156 (灵活顶点标志_28)
设备.未知支持库函数_153 (#., 0, 整除 (图元暂存池.未知支持库函数_83 (), 28))
图元暂存池.未知支持库函数_86 ()

.子程序 连续画点_最后画出_线3, 空白型, , 
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 20)
设备.未知支持库函数_156 (灵活顶点标志_20)
设备.未知支持库函数_153 (#., 0, 相减 (相除 (图元暂存池.未知支持库函数_83 (), 20), 1))
图元暂存池.未知支持库函数_86 ()


.子程序 连续画点_最后画出_四边形3, 空白型, , 
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 20)
设备.未知支持库函数_156 (灵活顶点标志_20)
设备.未知支持库函数_153 (#., 0, 相减 (相除 (图元暂存池.未知支持库函数_83 (), 20), 2))
图元暂存池.未知支持库函数_86 ()


.子程序 连续画点_最后画出_四边形5, 空白型, 公开, 
顶点缓冲.未知支持库函数_88 (0, 图元暂存池.未知支持库函数_84 ())
设备.未知支持库函数_155 (0, 顶点缓冲, 0, 28)
设备.未知支持库函数_156 (灵活顶点标志_28)
设备.未知支持库函数_153 (#., 0, 相减 (相除 (图元暂存池.未知支持库函数_83 (), 28), 2))
图元暂存池.未知支持库函数_86 ()

.子程序 画矩形, 空白型, 公开, 
.参数 左_, 空白型, , 
.参数 顶_, 空白型, , 
.参数 右_, 空白型, , 
.参数 下_, 空白型, , 
.参数 颜色_, 空白型, , 

连续画点_3 (左_, 顶_, 颜色_)
连续画点_3 (右_, 顶_, 颜色_)
连续画点_3 (右_, 下_, 颜色_)
连续画点_3 (左_, 下_, 颜色_)
连续画点_3 (左_, 顶_, 颜色_) ' 返回到第1点
连续画点_最后画出_线3 ()

.子程序 画填充矩形, 空白型, 公开, 
.参数 左_, 空白型, , 
.参数 顶_, 空白型, , 
.参数 右_, 空白型, , 
.参数 下_, 空白型, , 
.参数 颜色_, 空白型, , 

连续画点_3 (左_, 顶_, 颜色_)
连续画点_3 (右_, 顶_, 颜色_)
连续画点_3 (左_, 下_, 颜色_) ' 注意要颠倒顺序,成 Z 字形
连续画点_3 (右_, 下_, 颜色_)
连续画点_最后画出_四边形3 ()

.子程序 画渐变矩形, 空白型, , 
.参数 左_, 小数型, , 
.参数 顶_, 小数型, , 
.参数 右_, 小数型, , 
.参数 下_, 小数型, , 
.参数 颜色_左上, 小数型, , 
.参数 颜色_右上, 小数型, , 
.参数 颜色_右下, 小数型, , 
.参数 颜色_左下, 小数型, , 

连续画点_3 (左_, 顶_, 颜色_左上)
连续画点_3 (右_, 顶_, 颜色_右上)
连续画点_3 (左_, 下_, 颜色_左下) ' 注意要颠倒顺序,成 Z 字形
连续画点_3 (右_, 下_, 颜色_右下)
连续画点_最后画出_四边形3 ()


.子程序 设备丢失测试, 逻辑型, , 每次窗口更改时应调用，如果失去设备会自动重置

.判断开始 (等于 (设备.未知支持库函数_190 (), 0))
    返回 (假) ' OK,没问题
.判断 (等于 (设备.未知支持库函数_190 (), 1))
    log.输出 (“ Err   设备已丢失但这时不能重启，无法渲染！”)
    返回 (真)
.判断 (等于 (设备.未知支持库函数_190 (), 2))
    log.输出 (“ Err    设备已丢失但这时能重启，正在准备重置DX！”)
    .如果 (等于 (设备.未知支持库函数_204 (局设备), 假))
        log.输出 (“ Err    设备重启失败！”)
        返回 (假)
    .否则
        
        log.输出 (“ Err    设备重启成功！”)
        返回 (真)
    .如果结束
    
.默认
    
.判断结束
返回 (假)


.子程序 结束渲染, 空白型, , 
设备.未知支持库函数_150 ()
设备.未知支持库函数_151 ()


.类模块 图形类, , , 

.程序集变量 私纹理, 未知类型0x2000F, , , 
.程序集变量 源X1, 小数型, , , 源图像所要显示的矩形部分
.程序集变量 源Y1, 小数型, , , 
.程序集变量 源X2, 小数型, , , 
.程序集变量 源Y2, 小数型, , , 
.程序集变量 源X帧宽, 小数型, , , 
.程序集变量 源Y帧高, 小数型, , , 
.程序集变量 私分割行数, 空白型, , , 
.程序集变量 私分割列数, 空白型, , , 
.程序集变量 私分割单位宽, 小数型, , , 
.程序集变量 私分割单位高, 小数型, , , 
.程序集变量 是否割图, 逻辑型, , , 
.程序集变量 总块数, 空白型, , , 
.程序集变量 私X, 空白型, , , 
.程序集变量 私Y, 空白型, , , 
.程序集变量 私宽, 空白型, , , 
.程序集变量 私高, 空白型, , , 
.程序集变量 私中心X, 小数型, , , 
.程序集变量 私中心Y, 小数型, , , 
.程序集变量 私角度, 空白型, , , 弧度
.程序集变量 私缩放X, 小数型, , , 缩放系数
.程序集变量 私缩放Y, 小数型, , , 
.程序集变量 匿名程序集变量_246, 空白型, , , 
.程序集变量 现行帧, 空白型, , , 由私分割行数、私分割列数 所成的帧组
.程序集变量 私透明度, 字节型, , , 
.程序集变量 匿名程序集变量_249, 空白型, , , 
.程序集变量 VV, 顶点数据, , "4", 
.程序集变量 顶点颜色组, 字节型, , "4,4", 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
.局部变量 i, 整数型, , , 

赋值 (私缩放X, 1)
赋值 (私缩放Y, 1)

赋值 (源X1, 0.01)
赋值 (源Y1, 0.01)
赋值 (源X2, 1.01)
赋值 (源Y2, 1.01)
.计次循环首 (16, i)
    赋值 (顶点颜色组 [i], 255)
.计次循环尾 ()


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 载入图像, 逻辑型, , 
.参数 图像名, 文本型, , 
.参数 透明色, 整数型, , 
.参数 横向分割, 空白型, 可空, 
.参数 纵向分割, 空白型, 可空, 

.局部变量 局信息, 未知类型0x20028, , , 
.局部变量 i, 空白型, , , 



赋值 (图像名, 相加 (取运行目录 (), “\”, 图像名))
.如果真 (等于 (未知支持库函数_255 (设备, 图像名, 私纹理), 假))
    log.输出 (相加 (“载入纹理 失败！ ”, 图像名))
    返回 (假)
.如果真结束
未知支持库函数_271 (图像名, 局信息)
赋值 (私宽, 局信息.)
赋值 (私高, 局信息.)
赋值 (私中心X, 相乘 (私宽, 0.5))
赋值 (私中心Y, 相乘 (私高, 0.5))



.如果 (大于 (横向分割, 0))
    赋值 (私分割行数, 横向分割)
.否则
    赋值 (私分割行数, 1)
.如果结束

.如果 (大于 (纵向分割, 0))
    赋值 (私分割列数, 纵向分割)
.否则
    赋值 (私分割列数, 1)
.如果结束

赋值 (源X帧宽, 相除 (1, 私分割行数))
赋值 (源Y帧高, 相除 (1, 私分割列数))
赋值 (现行帧, 0)



.如果 (大于 (相乘 (私分割行数, 私分割列数), 1))
    赋值 (是否割图, 真)
    赋值 (总块数, 相乘 (私分割行数, 私分割列数))
.否则
    赋值 (是否割图, 假)
    赋值 (总块数, 1)
.如果结束

log.输出 (相加 (“载入纹理 成功！ ”, 图像名))


返回 (真)


.子程序 平移, 空白型, , 
.参数 x_, 小数型, , 
.参数 y_, 小数型, , 

赋值 (私X, 相加 (私X, x_))
赋值 (私Y, 相加 (私Y, y_))

.子程序 平移到, 空白型, , 
.参数 x_, 小数型, , 
.参数 y_, 小数型, , 

赋值 (私X, x_)
赋值 (私Y, y_)

.子程序 缩放, 空白型, , 
.参数 W_, 小数型, , 
.参数 H_, 小数型, , 

赋值 (私缩放X, W_)
赋值 (私缩放Y, H_)

.子程序 旋转, 空白型, , 
.参数 转角_, 空白型, , 

赋值 (私角度, 转角_)

.子程序 透明度, 空白型, , 
.参数 顶点序号, 整数型, 可空, 1234,左上、右上、左下、右下
.参数 透明_, 字节型, , 

.局部变量 i, 整数型, , , 

.如果 (等于 (是否为空 (顶点序号), 假))
    赋值 (顶点颜色组 [顶点序号] [1], 透明_)
.否则
    
     ' 当不指定某个顶点时，将4点全部染成同种颜色
    .计次循环首 (4, i)
        赋值 (顶点颜色组 [i] [1], 透明_)
    .计次循环尾 ()
.如果结束


.子程序 置颜色, 空白型, , 
.参数 顶点序号, 整数型, 可空, 1234,左上、右上、左下、右下
.参数 R, 字节型, , 
.参数 G, 字节型, , 
.参数 B, 字节型, , 
.参数 A, 字节型, , 

.局部变量 i, 整数型, , , 

.如果 (等于 (是否为空 (顶点序号), 假))
    赋值 (顶点颜色组 [顶点序号] [1], A)
    赋值 (顶点颜色组 [顶点序号] [2], R)
    赋值 (顶点颜色组 [顶点序号] [3], G)
    赋值 (顶点颜色组 [顶点序号] [4], B)
.否则
    
     ' 当不指定某个顶点时，将4点全部染成同种颜色
    .计次循环首 (4, i)
        赋值 (顶点颜色组 [i] [1], A)
        赋值 (顶点颜色组 [i] [2], R)
        赋值 (顶点颜色组 [i] [3], G)
        赋值 (顶点颜色组 [i] [4], B)
    .计次循环尾 ()
    
    
.如果结束


.子程序 置单色, 空白型, , 
.参数 顶点序号, 整数型, 可空, 1234,左上、右上、左下、右下
.参数 色位, 字节型, , 1,2,3,4
.参数 颜色_, 字节型, , 

.局部变量 i, 整数型, , , 

.判断开始 (小于 (色位, 1))
    赋值 (色位, 1)
.判断 (大于 (色位, 4))
    赋值 (色位, 4)
.默认
    
.判断结束


.如果 (等于 (是否为空 (顶点序号), 假))
    赋值 (顶点颜色组 [顶点序号] [色位], 颜色_)
.否则
    
     ' 当不指定某个顶点时，将4点全部染成同种颜色
    .计次循环首 (4, i)
        赋值 (顶点颜色组 [i] [色位], 颜色_)
    .计次循环尾 ()
    
    
.如果结束


.子程序 绘制, 空白型, , 
.局部变量 MMx, 小数型, , , 中心X
.局部变量 MMy, 小数型, , , 
.局部变量 Cx, 小数型, , , 
.局部变量 Cy, 小数型, , , 
.局部变量 color1, 整数型, , , 
.局部变量 color2, 整数型, , , 
.局部变量 color3, 整数型, , , 
.局部变量 color4, 整数型, , , 
.局部变量 retx, 小数型, , , 
.局部变量 rety, 小数型, , , 
.局部变量 临时角, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果 (等于 (私缩放X, 1))
    赋值 (MMx, 私宽)
.否则
    赋值 (MMx, 相乘 (私宽, 私缩放X))
.如果结束
.如果 (等于 (私缩放Y, 1))
    赋值 (MMy, 私高)
.否则
    赋值 (MMy, 相乘 (私高, 私缩放Y))
.如果结束


赋值 (Cx, 相乘 (MMx, 0.5))
赋值 (Cy, 相乘 (MMy, 0.5))

赋值 (color1, 未知支持库函数_287 (顶点颜色组 [1] [1], 顶点颜色组 [1] [2], 顶点颜色组 [1] [3], 顶点颜色组 [1] [4]))
赋值 (color2, 未知支持库函数_287 (顶点颜色组 [2] [1], 顶点颜色组 [2] [2], 顶点颜色组 [2] [3], 顶点颜色组 [2] [4]))
赋值 (color3, 未知支持库函数_287 (顶点颜色组 [3] [1], 顶点颜色组 [3] [2], 顶点颜色组 [3] [3], 顶点颜色组 [3] [4]))
赋值 (color4, 未知支持库函数_287 (顶点颜色组 [4] [1], 顶点颜色组 [4] [2], 顶点颜色组 [4] [3], 顶点颜色组 [4] [4]))

赋值 (临时角, 处理角度 (私角度)) ' 将角度处理成1~360 之内的安全数据



点旋转_某点_EX (负 (Cx), 负 (Cy), 临时角, 私X, 私Y, retx, rety) ' 左上角
图元暂存池.未知支持库函数_87 (retx, rety, Z0, RHW, color1, 源X1, 源Y1) ' 每点7个元素，共28字节

点旋转_某点_EX (Cx, 负 (Cy), 临时角, 私X, 私Y, retx, rety) ' 右上角
图元暂存池.未知支持库函数_87 (retx, rety, Z0, RHW, color2, 源X2, 源Y1) ' 每点7个元素，共28字节


点旋转_某点_EX (负 (Cx), Cy, 临时角, 私X, 私Y, retx, rety) ' 左下角
图元暂存池.未知支持库函数_87 (retx, rety, Z0, RHW, color3, 源X1, 源Y2) ' 每点7个元素，共28字节

点旋转_某点_EX (Cx, Cy, 临时角, 私X, 私Y, retx, rety) ' 右下角
图元暂存池.未知支持库函数_87 (retx, rety, Z0, RHW, color4, 源X2, 源Y2) ' 每点7个元素，共28字节
设备.未知支持库函数_134 (0, 私纹理)
 ' 调试输出 (retx, rety)
 ' 调试输出 (私X － Cx, 私Y － Cy, 私X ＋ Cx, 私Y ＋ Cy)
 ' 调试输出 (图元暂存池.取长度 ())
DX.连续画点_最后画出_四边形5 ()
设备.未知支持库函数_134 (0, 空纹理)

.子程序 指定帧号, 空白型, , 
.参数 指定值, 空白型, , 

.局部变量 Nx, 空白型, , , 
.局部变量 Ny, 空白型, , , 

.如果 (等于 (是否割图, 假))
    
    返回 ()
.否则
    
    .如果真 (大于 (指定值, 总块数))
        赋值 (指定值, 求余数 (指定值, 总块数))
        
    .如果真结束
    
    赋值 (Nx, 求余数 (指定值, 私分割行数))
    赋值 (Ny, 整除 (指定值, 私分割行数))
    赋值 (源X1, 相乘 (Nx, 源X帧宽))
    赋值 (源Y1, 相乘 (Ny, 源Y帧高))
    赋值 (源X2, 相加 (源X1, 源X帧宽))
    赋值 (源Y2, 相加 (源Y1, 源Y帧高))
     ' 调试输出 (源X1, 源Y1, 源X2, 源Y2)
.如果结束


.程序集 数学集扩展, , , 

.程序集变量 弧度常量_360, 双精度小数型, , , 
.子程序 数学扩展集_初始化, 空白型, , 
.局部变量 i, 整数型, , , 

赋值 (弧度常量_360, 到弧度 (360))
.计次循环首 (360, i)
    赋值 (弧度表 [i] [1], 求正弦 (到弧度 (i)))
    赋值 (弧度表 [i] [2], 求余弦 (到弧度 (i)))
.计次循环尾 ()

.子程序 到弧度, 小数型, , 
.参数 角度_, 小数型, , 

返回 (相除 (相乘 (角度_, #pi), 180))

.子程序 点旋转_原点, 空白型, , 将某点绕原点旋转指定角度
.参数 x_, 小数型, , 
.参数 y_, 小数型, , 
.参数 参角度, 小数型, , 
.参数 retx, 小数型, 参考, 返回的X值
.参数 rety, 小数型, 参考, 返回的Y值

.局部变量 sin_ang, 小数型, , , 
.局部变量 cos_ang, 小数型, , , 
.局部变量 角度_, 空白型, , , 

赋值 (角度_, 处理角度 (参角度))
赋值 (sin_ang, 弧度表 [角度_] [1])
赋值 (cos_ang, 弧度表 [角度_] [2])
赋值 (retx, 相减 (相乘 (x_, cos_ang), 相乘 (y_, sin_ang)))
赋值 (rety, 相加 (相乘 (x_, sin_ang), 相乘 (y_, cos_ang)))


.子程序 点旋转_某点, 空白型, , 将某点绕指定点旋转指定角度
.参数 x1_, 小数型, , 
.参数 y1_, 小数型, , 
.参数 参角度, 小数型, , 
.参数 x2_, 小数型, , 指定旋转中心点X
.参数 y2_, 小数型, , 指定旋转中心点Y
.参数 retx, 小数型, 参考, 返回的X值
.参数 rety, 小数型, 参考, 返回的Y值

.局部变量 sin_ang, 小数型, , , 
.局部变量 cos_ang, 小数型, , , 
.局部变量 角度_, 空白型, , , 

赋值 (角度_, 处理角度 (参角度))
赋值 (sin_ang, 弧度表 [角度_] [1])
赋值 (cos_ang, 弧度表 [角度_] [2])
赋值 (retx, 相减 (相乘 (x1_, cos_ang), 相乘 (y1_, sin_ang)))
赋值 (rety, 相加 (相乘 (x1_, sin_ang), 相乘 (y1_, cos_ang)))
赋值 (retx, 相加 (retx, x2_))
赋值 (rety, 相加 (rety, y2_))

.子程序 点旋转_某点_EX, 空白型, , 将某点绕指定点旋转指定角度,不检查角度值的合法性
.参数 x1_, 小数型, , 
.参数 y1_, 小数型, , 
.参数 参角度, 整数型, , 
.参数 x2_, 小数型, , 指定旋转中心点X
.参数 y2_, 小数型, , 指定旋转中心点Y
.参数 retx, 小数型, 参考, 返回的X值
.参数 rety, 小数型, 参考, 返回的Y值

.局部变量 sin_ang, 小数型, , , 
.局部变量 cos_ang, 小数型, , , 


赋值 (sin_ang, 弧度表 [参角度] [1])
赋值 (cos_ang, 弧度表 [参角度] [2])
赋值 (retx, 相减 (相乘 (x1_, cos_ang), 相乘 (y1_, sin_ang)))
赋值 (rety, 相加 (相乘 (x1_, sin_ang), 相乘 (y1_, cos_ang)))
赋值 (retx, 相加 (retx, x2_))
赋值 (rety, 相加 (rety, y2_))

.子程序 处理角度, 整数型, , 保证角度处理1-360之间
.参数 角度_参, 整数型, , 

.局部变量 角度_t, 空白型, , , 

赋值 (角度_t, 求余数 (角度_参, 360))
.如果真 (小于 (角度_t, 1))
    赋值 (角度_t, 相加 (角度_t, 360))
.如果真结束
返回 (角度_t)

.类模块 FPS类, , , 

.程序集变量 每秒总帧数, 小数型, , , 
.程序集变量 当前所在帧数, 小数型, , , 
.程序集变量 FPS值, 小数型, , , 
.程序集变量 初帧时间, 小数型, , , 
.程序集变量 每帧秒, 小数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 setFPS, 空白型, , 
.参数 限帧值, 空白型, , 

.如果真 (大于 (限帧值, 500))
    赋值 (限帧值, 500)
    
.如果真结束
赋值 (每秒总帧数, 限帧值)
赋值 (每帧秒, 相除 (1000, 限帧值))

.子程序 runFPS, 空白型, , 

.如果真 (大于或等于 (相减 (timer (), 初帧时间), 1000))
    赋值 (FPS值, 当前所在帧数)
    赋值 (当前所在帧数, 0)
    赋值 (初帧时间, timer ())
.如果真结束

赋值 (当前所在帧数, 相加 (当前所在帧数, 1))
 ' 全局计数 ＝ 全局计数 ＋ 1  ' 专供模块外部使用的全局计数器

.如果真 (大于 (每秒总帧数, 1))
    .判断循环首 (小于 (相减 (timer (), 初帧时间), 相乘 (每帧秒, 当前所在帧数)))
         ' p_空闲函数 (空闲函数指针)
        延时 (1)
    .判断循环尾 ()
    
.如果真结束


.子程序 getFPS, 小数型, , 
返回 (FPS值)

.子程序 getTIME, 整数型, , 
返回 (timer ())


 ' 不属于任何一个程序集、类模块的函数：
