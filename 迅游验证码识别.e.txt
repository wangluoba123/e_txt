 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 888
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 BITMAP, , 
    .成员 bmType, 整数型, , , 
    .成员 bmWidth, 整数型, , , 
    .成员 bmHeight, 整数型, , , 
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 整数型, 传址, , 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 BITMAPINFOHEADER, , 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 BITMAPINFO, , 
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 整数型, , , 

数据类型 范围, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 欲识别的数据, , 
    .成员 欲识别的数据, 字节型, , "1", 

数据类型 权值, , 
    .成员 权值, 小数型, , "1", 

.全局变量 NN_欲识别的数据, 欲识别的数据, , "0", 
.全局变量 NN_权值, 权值, , "0", 

.DLL命令 GlobalAlloc, 整数型, "kernel32", "", , 
    .参数 uFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "kernel32", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 RtlMoveMemory_字节集, 空白型, "kernel32", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 GlobalLock, 整数型, "kernel32", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "ole32", "", , 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 CLSIDFromString, 整数型, "ole32", "", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 OleLoadPicture, 整数型, "olepro32", "", , 
    .参数 pStream, 整数型, , 
    .参数 lSize, 整数型, , 
    .参数 fRunmode, 整数型, , 
    .参数 riid, 字节集, 传址, 
    .参数 ppvObj, 整数型, 传址, 

.DLL命令 CopyImage, 整数型, "", "", , 
    .参数 hImage, 整数型, , 
    .参数 uType, 整数型, , 
    .参数 cxDesired, 整数型, , 
    .参数 cyDesired, 整数型, , 
    .参数 fuFlags, 整数型, , 

.DLL命令 DeleteObject, 整数型, "", "DeleteObject", , 
    .参数 hObject, 整数型, , 

.DLL命令 GlobalFree, 整数型, "kernel32", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 lstrcat, 整数型, "", "lstrcatA", , 
    .参数 lpString1, 整数型, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 CallWindowProc, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 
    .参数 子程序, 整数型, , 
    .参数 参数, 整数型, 数组, 
    .参数 参数数目, 整数型, , 
    .参数 是否C调用, 逻辑型, , 

.DLL命令 RtlMoveMemory, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 GetObject, 整数型, "", "GetObjectA", , 
    .参数 hgdiobj, 整数型, , 
    .参数 cbBuffer, 整数型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 CreateCompatibleDC, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 GetDIBits_BimapInfo, 整数型, "", "GetDIBits", , 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits_BITMAPINFO, 整数型, "", "GetDIBits", , 
    .参数 HDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 整数型, , 

.DLL命令 RtlMoveMemory_BITMAPINFO, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_BITMAPFILEHEADER, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 DeleteDC, 整数型, "gdi32", "DeleteDC", , 
    .参数 设备描述句柄, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "", , 访问网页
    .参数 hInternet, 整数型, , 

.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "", , 访问网页
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "", , 访问网页
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "", , 访问网页
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "", , 访问网页
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 文本型, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", , ,
    .参数 数据1, 整数型, 数组, lpString1
    .参数 数据2, 整数型, 数组, lpString2
    .参数 数据长度, 整数型, , iMaxLength

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "", , 访问网页
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
初始化网络 ()
载入 (窗口1, , 真)
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 取图片句柄, 整数型, , 
.参数 图形数据, 字节集, , 
.参数 输出宽度, 整数型, 可空, 
.参数 输出高度, 整数型, 可空, 

.局部变量 BinLen, 整数型, , , 
.局部变量 hMem, 整数型, , , 
.局部变量 lpMem, 整数型, , , 
.局部变量 IID_IPicture, 字节集, , , 
.局部变量 Stream, 整数型, , , 
.局部变量 Subaddr, 整数型, , , 
.局部变量 Handle, 整数型, , , 
.局部变量 picobj, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (图形数据, {  }))
    返回 (0)
.如果真结束
赋值 (BinLen, 取字节集长度 (图形数据))
赋值 (hMem, GlobalAlloc (66, BinLen))
.如果真 (不等于 (hMem, 0))
    赋值 (lpMem, GlobalLock (hMem))
    .如果真 (不等于 (lpMem, 0))
        RtlMoveMemory_字节集 (lpMem, 图形数据, BinLen)
        GlobalUnlock (hMem)
        .如果真 (等于 (CreateStreamOnHGlobal (hMem, 0, Stream), 0))
            赋值 (IID_IPicture, 取空白字节集 (14))
            .如果真 (等于 (CLSIDFromString ({ 123, 0, 55, 0, 66, 0, 70, 0, 56, 0, 48, 0, 57, 0, 56, 0, 48, 0, 45, 0, 66, 0, 70, 0, 51, 0, 50, 0, 45, 0, 49, 0, 48, 0, 49, 0, 65, 0, 45, 0, 56, 0, 66, 0, 66, 0, 66, 0, 45, 0, 48, 0, 48, 0, 65, 0, 65, 0, 48, 0, 48, 0, 51, 0, 48, 0, 48, 0, 67, 0, 65, 0, 66, 0, 125, 0, 0, 0 }, IID_IPicture), 0))
                .如果真 (不等于 (OleLoadPicture (Stream, BinLen, 1, IID_IPicture, picobj), 0))
                    赋值 (picobj, 0)
                .如果真结束
                .如果真 (不等于 (picobj, 0))
                    赋值 (Handle, get_Handle (picobj))
                    赋值 (ret, CopyImage (Handle, 0, 输出宽度, 输出高度, 4))
                    DeleteObject (Handle)
                    Release (picobj)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    GlobalFree (hMem)
.如果真结束
返回 (ret)

.子程序 取位图颜色, 整数型, , 
.参数 图形数据, 字节集, , 
.参数 横坐标, 整数型, 可空, 范围为 0~图像宽度 - 1；留空为0。表示图像最左侧。
.参数 纵坐标, 整数型, 可空, 范围为 0~图像高度 - 1；留空为0。表示图像最顶边。

.局部变量 信息大小, 整数型, , , BITMAPINFOHEADER -> biSize        一般为 40，但从实际数据获取较保险
.局部变量 图像宽度, 整数型, , , BITMAPINFOHEADER -> biWidth
.局部变量 图像高度, 整数型, , , BITMAPINFOHEADER -> biHeight       > 0 从下至上逆向存储； < 0 从上至下正向存储
.局部变量 图像位数, 短整数型, , , BITMAPINFOHEADER -> biBitCount
.局部变量 图像压缩, 整数型, , , BITMAPINFOHEADER -> biCompression  1/2-压缩图像; 4/5-JPG/PNG  0-未压缩; 3-未压缩且调色板为3色掩码(位域方式)
.局部变量 扫描行, 整数型, , , 固定公式计算
.局部变量 坐标偏移, 整数型, , , 固定公式计算，返回相对于图像数据阵列起始位置的偏移量
.局部变量 数据偏移, 整数型, , , 文件头 + 信息头 + 调色板(如果有) + 坐标偏移，即指定坐标颜色数据(或其调色板索引)相对于图形数据的偏移量
.局部变量 色板大小, 整数型, , , 调色板大小，如果有。
.局部变量 RGB, 字节集, , , 

.如果真 (不等于 (取字节集左边 (图形数据, 2), { 66, 77 })) ' { 66, 77 } BM 标志
    返回 (-1)
.如果真结束
赋值 (信息大小, 取字节集数据 (取字节集中间 (图形数据, 15, 4), #整数型, ))
赋值 (图像宽度, 取字节集数据 (取字节集中间 (图形数据, 19, 4), #整数型, ))
赋值 (图像高度, 取字节集数据 (取字节集中间 (图形数据, 23, 4), #整数型, ))
赋值 (图像位数, 取字节集数据 (取字节集中间 (图形数据, 29, 2), #短整数型, ))
赋值 (图像压缩, 取字节集数据 (取字节集中间 (图形数据, 31, 4), #整数型, ))
.如果真 (并且 (不等于 (图像压缩, 0), 不等于 (图像压缩, 3)))
    返回 (-1)
.如果真结束
.如果真 (或者 (小于 (横坐标, 0), 小于 (纵坐标, 0), 大于 (横坐标, 相减 (图像宽度, 1)), 大于 (纵坐标, 相减 (图像高度, 1))))
    返回 (-1)
.如果真结束
.判断开始 (或者 (等于 (图像位数, 16), 等于 (图像位数, 32)))
    赋值 (色板大小, 选择 (等于 (图像压缩, 0), 0, 12))
.判断 (等于 (图像位数, 24))
    赋值 (色板大小, 0)
.默认
    返回 (-1)
.判断结束
赋值 (扫描行, 左移 (右移 (相加 (相乘 (图像宽度, 图像位数), 31), 5), 2)) ' 备用写法：右移 (位与 (图像宽度 × 图像位数 ＋ 31, 位取反 (31)), 3)
赋值 (坐标偏移, 相加 (相乘 (相减 (相加 (相乘 (右移 (图像高度, 31), 相加 (图像高度, 1)), 图像高度), 相乘 (位或 (右移 (图像高度, 31), 1), 相加 (纵坐标, 1))), 扫描行), 右移 (相乘 (横坐标, 图像位数), 3), 1))
赋值 (数据偏移, 相加 (14, 信息大小, 色板大小, 坐标偏移))
赋值 (RGB, { 0, 0, 0, 0 })
.判断开始 (等于 (图像位数, 32)) ' 3 字节表示 1个像素颜色
    赋值 (RGB, 取字节集中间 (图形数据, 数据偏移, 4))
.判断 (等于 (图像位数, 24))
    赋值 (RGB [1], 图形数据 [相加 (数据偏移, 2)])
    赋值 (RGB [2], 图形数据 [相加 (数据偏移, 1)])
    赋值 (RGB [3], 图形数据 [数据偏移])
.默认
    
.判断结束
返回 (取字节集数据 (RGB, #整数型, ))

.子程序 置位图颜色, 字节集, , 
.参数 图形数据, 字节集, , 
.参数 横坐标, 整数型, 可空, 范围为 0~图像宽度 - 1；留空为0。表示图像最左侧。
.参数 纵坐标, 整数型, 可空, 范围为 0~图像高度 - 1；留空为0。表示图像最顶边。
.参数 颜色值, 整数型, , 

.局部变量 信息大小, 整数型, , , BITMAPINFOHEADER -> biSize        一般为 40，但从实际数据获取较保险
.局部变量 图像宽度, 整数型, , , BITMAPINFOHEADER -> biWidth
.局部变量 图像高度, 整数型, , , BITMAPINFOHEADER -> biHeight       > 0 从下至上逆向存储； < 0 从上至下正向存储
.局部变量 图像位数, 短整数型, , , BITMAPINFOHEADER -> biBitCount
.局部变量 图像压缩, 整数型, , , BITMAPINFOHEADER -> biCompression  1/2-压缩图像; 4/5-JPG/PNG  0-未压缩; 3-未压缩且调色板为3色掩码(位域方式)
.局部变量 扫描行, 整数型, , , 固定公式计算
.局部变量 坐标偏移, 整数型, , , 固定公式计算，返回相对于图像数据阵列起始位置的偏移量
.局部变量 数据偏移, 整数型, , , 文件头 + 信息头 + 调色板(如果有) + 坐标偏移，即指定坐标颜色数据(或其调色板索引)相对于图形数据的偏移量
.局部变量 色板大小, 整数型, , , 调色板大小，如果有。
.局部变量 RGB, 字节集, , , 

.如果真 (不等于 (取字节集左边 (图形数据, 2), { 66, 77 })) ' { 66, 77 } BM 标志
    返回 ({  })
.如果真结束
赋值 (信息大小, 取字节集数据 (取字节集中间 (图形数据, 15, 4), #整数型, ))
赋值 (图像宽度, 取字节集数据 (取字节集中间 (图形数据, 19, 4), #整数型, ))
赋值 (图像高度, 取字节集数据 (取字节集中间 (图形数据, 23, 4), #整数型, ))
赋值 (图像位数, 取字节集数据 (取字节集中间 (图形数据, 29, 2), #短整数型, ))
赋值 (图像压缩, 取字节集数据 (取字节集中间 (图形数据, 31, 4), #整数型, ))
.如果真 (并且 (不等于 (图像压缩, 0), 不等于 (图像压缩, 3)))
    返回 (图形数据)
.如果真结束
.如果真 (或者 (小于 (横坐标, 0), 小于 (纵坐标, 0), 大于 (横坐标, 相减 (图像宽度, 1)), 大于 (纵坐标, 相减 (图像高度, 1))))
    返回 (图形数据)
.如果真结束
.判断开始 (或者 (等于 (图像位数, 16), 等于 (图像位数, 32)))
    赋值 (色板大小, 选择 (等于 (图像压缩, 0), 0, 12))
.判断 (等于 (图像位数, 24))
    赋值 (色板大小, 0)
.默认
    返回 (图形数据)
.判断结束
赋值 (扫描行, 左移 (右移 (相加 (相乘 (图像宽度, 图像位数), 31), 5), 2)) ' 备用写法：右移 (位与 (图像宽度 × 图像位数 ＋ 31, 位取反 (31)), 3)
赋值 (坐标偏移, 相加 (相乘 (相减 (相加 (相乘 (右移 (图像高度, 31), 相加 (图像高度, 1)), 图像高度), 相乘 (位或 (右移 (图像高度, 31), 1), 相加 (纵坐标, 1))), 扫描行), 右移 (相乘 (横坐标, 图像位数), 3), 1))
赋值 (数据偏移, 相加 (14, 信息大小, 色板大小, 坐标偏移))
赋值 (RGB, 到字节集 (颜色值))
.判断开始 (等于 (图像位数, 32)) ' 3 字节表示 1个像素颜色
    赋值 (图形数据, 字节集替换 (图形数据, 数据偏移, 4, RGB))
.判断 (等于 (图像位数, 24))
    赋值 (图形数据 [相加 (数据偏移, 2)], RGB [1])
    赋值 (图形数据 [相加 (数据偏移, 1)], RGB [2])
    赋值 (图形数据 [数据偏移], RGB [3])
.默认
    
.判断结束
返回 (图形数据)

.子程序 Release, 空白型, , 释放对象
.参数 IPicture, 整数型, , 

.局部变量 arg, 整数型, , "1", 

赋值 (arg [1], IPicture)
动态调用子程序 (_ToDword (相加 (_ToDword (IPicture), 相乘 (2, 4))), arg, 假)

.子程序 get_Handle, 整数型, , 
.参数 IPicture, 整数型, , 

.局部变量 arg, 整数型, , "2", 
.局部变量 pHandle, 整数型, , , 

赋值 (arg [1], IPicture)
赋值 (arg [2], lstrcat (pHandle, 0))
返回 (选择 (等于 (动态调用子程序 (_ToDword (相加 (_ToDword (IPicture), 相乘 (3, 4))), arg, 假), 0), pHandle, 0))

.子程序 _ToDword, 整数型, , 
.参数 Point, 整数型, , 

.局部变量 ret, 整数型, , , 

RtlMoveMemory (ret, Point, 4)
返回 (ret)

.子程序 动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 

返回 (CallWindowProc ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))

.子程序 句柄取图片, 字节集, , 返回的图片格式为位图。
.参数 hBitmap, 整数型, , 

.局部变量 Bitmap, BITMAP, , , 
.局部变量 Resource, 字节集, , , 
.局部变量 BitmapFileHeader, BITMAPFILEHEADER, , , 
.局部变量 bfh, 字节集, , , 
.局部变量 hMemDC, 整数型, , , 
.局部变量 BitmapInfo, BITMAPINFO, , , 
.局部变量 bi, 字节集, , , 

GetObject (hBitmap, 24, Bitmap)
赋值 (hMemDC, CreateCompatibleDC (0))
赋值 (BitmapInfo.BITMAPINFOHEADER.biSize, 44)
GetDIBits_BimapInfo (hMemDC, hBitmap, 0, 0, 0, BitmapInfo, 0)
赋值 (Resource, 取空白字节集 (BitmapInfo.BITMAPINFOHEADER.biSizeImage))
赋值 (BitmapInfo.BITMAPINFOHEADER.biCompression, 0)
GetDIBits_BITMAPINFO (hMemDC, hBitmap, 0, Bitmap.bmHeight, Resource, BitmapInfo, 0)
赋值 (bi, 取空白字节集 (BitmapInfo.BITMAPINFOHEADER.biSize))
RtlMoveMemory_BITMAPINFO (bi, BitmapInfo, BitmapInfo.BITMAPINFOHEADER.biSize)
赋值 (BitmapFileHeader.bfType, 19778)
赋值 (BitmapFileHeader.bfOffBits, 相加 (14, BitmapInfo.BITMAPINFOHEADER.biSize))
赋值 (BitmapFileHeader.bfSize, 相加 (BitmapFileHeader.bfOffBits, BitmapInfo.BITMAPINFOHEADER.biSizeImage))
连续赋值 (0, BitmapFileHeader.bfReserved1, BitmapFileHeader.bfReserved2)
赋值 (bfh, 取空白字节集 (14))
RtlMoveMemory_BITMAPFILEHEADER (bfh, BitmapFileHeader, 14)
DeleteDC (hMemDC)
返回 (相加 (bfh, bi, Resource))

.子程序 读取网页源码, 字节集, , 
.参数 完整网址, 文本型, , 完整网址
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 源地址, 文本型, 可空, 
.参数 内容类型, 文本型, 可空, 

.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 len, 整数型, , , 
.局部变量 lpBody, 字节集, , , 

赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 1, 字符 (0), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 ({  })
.如果真结束
赋值 (szDomain, 取域名 (完整网址))
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (完整网址), 字符 (0), 字符 (0), 3, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    返回 ({  })
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, 选择 (是否为空 (提交信息), “GET”, “POST”), 取页面地址 (完整网址), “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 ({  })
.如果真结束
赋值 (szHeaders, 相加 (“Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符, “Referer: ”, 选择 (是否为空 (源地址), 完整网址, 源地址), #换行符, “Accept-Language: zh-cn”, #换行符))
.判断开始 (是否为空 (提交信息))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.默认
    赋值 (szHeaders, 相加 (szHeaders, “Content-Type: ”, 选择 (是否为空 (内容类型), “application/x-www-form-urlencoded”, 内容类型), #换行符, “Content-Length: ”, 到文本 (取文本长度 (提交信息)), #换行符))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 提交信息, 取文本长度 (提交信息))
.判断结束
赋值 (lpBuffer, 取空白字节集 (4096))
.循环判断首 ()
    InternetReadFile (hRequest, lpBuffer, 4096, len)
    赋值 (lpBody, 相加 (lpBody, 取字节集左边 (lpBuffer, len)))
    处理事件 ()
.循环判断尾 (不等于 (len, 0))
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)
返回 (lpBody)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber, 选择 (等于 (寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 取文本中间 (szServerName, dwNumber, 选择 (等于 (寻找文本 (szServerName, “/”, dwNumber, 假), -1), 取文本长度 (szServerName), 相减 (寻找文本 (szServerName, “/”, dwNumber, 假), dwNumber)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber, -1))
        赋值 (szServerName, 取文本左边 (szServerName, 相减 (dwNumber, 1)))
    .如果真结束
    
.如果真结束
返回 (到小写 (szServerName))

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber, 选择 (等于 (dwNumber, -1), 80, 到数值 (取文本右边 (szServerName, 相减 (取文本长度 (szServerName), dwNumber)))))
返回 (dwNumber)

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 位图去杂点, 字节集, , 
.参数 位图, 字节集, , 

.局部变量 w, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 孤立值, 整数型, , , 
.局部变量 点x, 整数型, , , 
.局部变量 点y, 整数型, , , 
.局部变量 点阵, 整数型, , "8,3", 

赋值 (w, 取字节集数据 (取字节集中间 (位图, 19, 4), 3, ))
赋值 (h, 取字节集数据 (取字节集中间 (位图, 23, 4), 3, ))
写到内存 ({ 1, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 2, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 4, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 8, 0, 0, 0, 1, 0, 0, 0, 255, 255, 255, 255, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0 }, lstrcpyn (点阵, 点阵, 0), 96)
.计次循环首 (h, y)
    .计次循环首 (w, x)
        赋值 (点x, -1)
        赋值 (点y, -1)
        赋值 (孤立值, 点是否孤立 (位图, 相减 (x, 1), 相减 (y, 1)))
        .如果真 (等于 (孤立值, -1))
            到循环尾 ()
        .如果真结束
        .如果真 (等于 (孤立值, 0))
            赋值 (位图, 置位图颜色 (位图, 相减 (x, 1), 相减 (y, 1), #白色))
            到循环尾 ()
        .如果真结束
        .计次循环首 (8, i)
            .如果真 (等于 (位与 (孤立值, 点阵 [i] [1]), 点阵 [i] [1]))
                .如果 (并且 (等于 (点x, -1), 等于 (点y, -1)))
                    赋值 (点x, 相加 (x, 点阵 [i] [2]))
                    赋值 (点y, 相加 (y, 点阵 [i] [3]))
                .否则
                    跳出循环 ()
                .如果结束
                
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (等于 (i, 9))
            赋值 (i, 点是否孤立 (位图, 点x, 点y))
            .如果真 (等于 (i, 孤立值))
                赋值 (位图, 置位图颜色 (位图, 相减 (x, 1), 相减 (y, 1), #白色))
                赋值 (位图, 置位图颜色 (位图, 相减 (点x, 1), 相减 (点y, 1), #白色))
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    处理事件 ()
.计次循环尾 ()
返回 (位图)

.子程序 点是否孤立, 整数型, , 0表示孤立,1表示左边,2表示左上,4表示上,8表示右上,16表示右,32表示右下,64表示下,128表示左下
.参数 位图, 字节集, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 

.局部变量 相关点, 整数型, , , 
.局部变量 rgb, 整数型, , , 

赋值 (rgb, 取位图颜色 (位图, x, y))
.如果 (不等于 (rgb, #白色))
    赋值 (rgb, 取位图颜色 (位图, 相减 (x, 1), y))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 1))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, 相减 (x, 1), 相减 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 2))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, x, 相减 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 4))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, 相加 (x, 1), 相减 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 8))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, 相加 (x, 1), y))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 16))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, 相加 (x, 1), 相加 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 32))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, x, 相加 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 64))
    .如果真结束
    赋值 (rgb, 取位图颜色 (位图, 相减 (x, 1), 相加 (y, 1)))
    .如果真 (并且 (不等于 (rgb, -1), 不等于 (rgb, #白色)))
        赋值 (相关点, 相加 (相关点, 128))
    .如果真结束
    
.否则
    赋值 (相关点, -1)
.如果结束
返回 (相关点)

.子程序 位图反色, 字节集, , 
.参数 位图, 字节集, , 

.局部变量 w, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 rgb, 整数型, , , 
.局部变量 bin, 字节集, , , 

赋值 (w, 取字节集数据 (取字节集中间 (位图, 19, 4), 3, ))
赋值 (h, 取字节集数据 (取字节集中间 (位图, 23, 4), 3, ))
.计次循环首 (w, x)
    .计次循环首 (h, y)
        赋值 (rgb, 取位图颜色 (位图, 相减 (x, 1), 相减 (y, 1)))
        赋值 (bin, 到字节集 (rgb))
        赋值 (bin [1], 相减 (255, bin [1]))
        赋值 (bin [2], 相减 (255, bin [2]))
        赋值 (bin [3], 相减 (255, bin [3]))
        赋值 (rgb, 取字节集数据 (bin, 3, ))
        赋值 (位图, 置位图颜色 (位图, 相减 (x, 1), 相减 (y, 1), rgb))
    .计次循环尾 ()
    处理事件 ()
.计次循环尾 ()
返回 (位图)

.子程序 位图分割, 整数型, , 
.参数 位图, 字节集, , 
.参数 范围数组, 范围, 参考 可空 数组, 

.局部变量 w, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 rgb, 整数型, , , 
.局部变量 范围, 范围, , , 
.局部变量 有效, 逻辑型, , "2", 

赋值 (w, 取字节集数据 (取字节集中间 (位图, 19, 4), 3, ))
赋值 (h, 取字节集数据 (取字节集中间 (位图, 23, 4), 3, ))
清除数组 (范围数组)
.计次循环首 (w, x)
    赋值 (有效 [2], 假)
    .计次循环首 (h, y)
        赋值 (rgb, 取位图颜色 (位图, 相减 (x, 1), 相减 (y, 1)))
        .如果真 (不等于 (rgb, #白色))
            .如果 (有效 [1])
                赋值 (有效 [2], 真)
                赋值 (范围.顶边, 选择 (小于 (y, 相加 (范围.顶边, 1)), 相减 (y, 1), 范围.顶边))
            .否则
                赋值 (有效 [1], 真)
                赋值 (有效 [2], 真)
                赋值 (范围.左边, 相减 (x, 1))
                赋值 (范围.顶边, 相减 (y, 1))
            .如果结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (有效 [1])
        .如果真 (等于 (有效 [2], 假))
            赋值 (有效 [1], 假)
            赋值 (范围.宽度, 相减 (x, 1, 范围.左边))
            赋值 (范围.高度, 相减 (h, 1, 范围.顶边))
            .计次循环首 (范围.高度, y)
                .计次循环首 (范围.宽度, i)
                    赋值 (rgb, 取位图颜色 (位图, 相减 (相加 (范围.左边, i), 2), 相减 (h, y)))
                    .如果真 (不等于 (rgb, #白色))
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                .如果真 (不等于 (范围.宽度, 相加 (i, 1)))
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            赋值 (范围.高度, 相减 (范围.高度, y))
            加入成员 (范围数组, 范围)
        .如果真结束
        
    .如果真结束
    处理事件 ()
.计次循环尾 ()
返回 (取数组成员数 (范围数组))

.子程序 位图二值化, 字节集, , 
.参数 位图, 字节集, , 

.局部变量 w, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 rgb, 字节集, , , 

赋值 (w, 取字节集数据 (取字节集中间 (位图, 19, 4), 3, ))
赋值 (h, 取字节集数据 (取字节集中间 (位图, 23, 4), 3, ))
.计次循环首 (w, x)
    .计次循环首 (h, y)
        赋值 (rgb, 到字节集 (取位图颜色 (位图, 相减 (x, 1), 相减 (y, 1))))
        .如果 (并且 (小于 (rgb [1], 200), 小于 (rgb [2], 200), 小于 (rgb [3], 200)))
            赋值 (位图, 置位图颜色 (位图, 相减 (x, 1), 相减 (y, 1), #黑色))
        .否则
            赋值 (位图, 置位图颜色 (位图, 相减 (x, 1), 相减 (y, 1), #白色))
        .如果结束
        
    .计次循环尾 ()
    处理事件 ()
.计次循环尾 ()
返回 (位图)

.子程序 初始化网络, 空白型, , 
.局部变量 字符索引, 整数型, , , 
.局部变量 点阵索引, 整数型, , , 
.局部变量 字节索引, 整数型, , , 
.局部变量 权值, 字节集, , , 

重定义数组 (NN_权值, 假, 10)
.计次循环首 (10, 字符索引)
    重定义数组 (NN_权值 [字符索引], 权值, 假, 相乘 (7, 15))
.计次循环尾 ()
赋值 (字节索引, 1)
.如果真 (文件是否存在 (相加 (取运行目录 (), “\code2.dat”)))
    赋值 (权值, 读入文件 (相加 (取运行目录 (), “\code2.dat”)))
    .如果真 (等于 (取字节集长度 (权值), 相乘 (10, 7, 15, 4)))
        .计次循环首 (10, 字符索引)
            .计次循环首 (相乘 (7, 15), 点阵索引)
                赋值 (NN_权值 [字符索引], 权值 [点阵索引], 取字节集数据 (取字节集中间 (权值, 字节索引, 4), #小数型, ))
                赋值 (字节索引, 相加 (字节索引, 4))
            .计次循环尾 ()
        .计次循环尾 ()
    .如果真结束
    
.如果真结束


.子程序 识别, 整数型, , 
.参数 字符索引, 整数型, , 

.局部变量 d, 小数型, , "0", 
.局部变量 j, 整数型, , , 
.局部变量 k, 整数型, , , 
.局部变量 bestind, 整数型, , , 

重定义数组 (d, 假, 10)
.计次循环首 (10, j)
    .计次循环首 (相乘 (7, 15), k)
        赋值 (d [j], 相加 (d [j], 相乘 (NN_权值 [j], 权值 [k], NN_欲识别的数据 [字符索引], 欲识别的数据 [k])))
    .计次循环尾 ()
.计次循环尾 ()
赋值 (bestind, 1)
.变量循环首 (1, 10, 1, j)
    .如果真 (大于 (d [j], d [bestind]))
        赋值 (bestind, j)
    .如果真结束
    
.变量循环尾 ()
返回 (bestind)

.子程序 训练, 空白型, , 
.参数 字符索引, 整数型, , 
.参数 正确字符, 整数型, , 

.局部变量 j, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 识别结果, 整数型, , , 
.局部变量 训练完成, 逻辑型, , , 
.局部变量 训练次数, 整数型, , , 
.局部变量 save, 字节集, , , 

.循环判断首 ()
    赋值 (训练完成, 真)
    赋值 (识别结果, 识别 (字符索引))
    .如果真 (等于 (识别结果, 正确字符))
        跳出循环 ()
    .如果真结束
    赋值 (训练完成, 假)
    .变量循环首 (1, 相乘 (7, 15), 1, j)
        赋值 (NN_权值 [正确字符], 权值 [j], 相加 (NN_权值 [正确字符], 权值 [j], NN_欲识别的数据 [字符索引], 欲识别的数据 [j]))
    .变量循环尾 ()
    赋值 (训练次数, 相加 (训练次数, 1))
.循环判断尾 (并且 (取反 (训练完成), 小于或等于 (训练次数, 500)))
.计次循环首 (10, i)
    .计次循环首 (相乘 (7, 15), j)
        赋值 (save, 相加 (save, 到字节集 (NN_权值 [i], 权值 [j])))
    .计次循环尾 ()
.计次循环尾 ()
写到文件 (相加 (取运行目录 (), “\code2.dat”), save)

.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 字符索引, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 文本型, , , 

.计次循环首 (取数组成员数 (NN_欲识别的数据), 字符索引)
    赋值 (i, 识别 (字符索引))
    赋值 (结果, 相加 (结果, 到文本 (相减 (i, 1))))
.计次循环尾 ()
调试输出 (结果)
信息框 (结果, 0, )

.子程序 _窗口1_创建完毕, 空白型, , 
.局部变量 字符数, 整数型, , , 
.局部变量 范围, 范围, , "0", 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 字符索引, 整数型, , , 

赋值 (.图片, 句柄取图片 (取图片句柄 (读取网页源码 (“http://my.xunyou.com/index.php/imageoutput/VertifyCode/ver_code_2/50/24”))))
赋值 (.图片, 位图去杂点 (位图二值化 (位图反色 (.图片))))
赋值 (字符数, 位图分割 (.图片, 范围))
重定义数组 (NN_欲识别的数据, 假, 字符数)
.计次循环首 (字符数, 字符索引)
    重定义数组 (NN_欲识别的数据 [字符索引], 欲识别的数据, 假, 相乘 (7, 15))
    赋值 (i, 0)
    .计次循环首 (15, y)
        .计次循环首 (7, x)
            赋值 (i, 相加 (i, 1))
            赋值 (NN_欲识别的数据 [字符索引], 欲识别的数据 [i], 选择 (等于 (取位图颜色 (.图片, 相加 (相减 (x, 1), 范围 [字符索引], 左边), 相加 (相减 (y, 1), 范围 [字符索引], 顶边)), 0), 1, 0))
        .计次循环尾 ()
        处理事件 ()
    .计次循环尾 ()
.计次循环尾 ()
赋值 (.内容, “”)
.计次循环首 (15, y)
    .计次循环首 (字符数, 字符索引)
        .计次循环首 (7, x)
            赋值 (.内容, 相加 (.内容, 选择 (等于 (NN_欲识别的数据 [字符索引], 欲识别的数据 [相加 (相乘 (相减 (y, 1), 7), x)], 0), “ ”, “8”)))
        .计次循环尾 ()
        赋值 (.内容, 相加 (.内容, “ | ”))
    .计次循环尾 ()
    赋值 (.内容, 相加 (.内容, #换行符))
.计次循环尾 ()

.子程序 _图片框1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_窗口1_创建完毕 ()

.子程序 _按钮2_被单击, 空白型, , 
训练 (相加 (.现行选中项, 1), 相加 (到整数 (.内容), 1))


 ' 不属于任何一个程序集、类模块的函数：
