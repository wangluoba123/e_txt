 ' 文件类型：Windows模块源码

 ' 程序名称：多线程
 ' 程序描述：
 ' 程序作者：家范
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：QQ292459453
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库




数据类型 许可证, 公开, 
    .成员 调试信息, 整数型, , , 
    .成员 锁计数, 整数型, , , 
    .成员 递归计数, 整数型, , , 
    .成员 拥有线程, 整数型, , , 
    .成员 锁信号量, 整数型, , , 
    .成员 自旋数, 整数型, , , 

数据类型 线程控制, , 
    .成员 任务总数, 整数型, , , 
    .成员 线程句柄, 整数型, , "1", 
    .成员 是否启动, 逻辑型, , , 
    .成员 剩余线程数, 整数型, , , 
    .成员 反馈标签, 标签, , , 

.全局变量 全_线程控制, 线程控制, , "0", 

.DLL命令 _创建扩展线程, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 传递参数, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 _退出线程, 空白型, "", "ExitThread", 公开, 线程中使用
    .参数 句柄, 整数型, , 
    .参数 退出代码, 整数型, , 

.DLL命令 _创建线程, 整数型, "", "CreateThread", 公开, 创建线程返回线程句柄
    .参数 安全结构, 空白型, , 
    .参数 栈大小, 空白型, , 
    .参数 启动的函数, 空白型, , 
    .参数 参数, 空白型, , 
    .参数 启动标识, 空白型, , 4表示创建后挂起，0表示创建后立即运行
    .参数 线程ID, 空白型, 传址, 

.DLL命令 _恢复线程, 整数型, "", "ResumeThread", 公开, 恢复线程
    .参数 handle, 整数型, , 

.DLL命令 _暂停线程, 整数型, "", "SuspendThread", 公开, 暂停线程
    .参数 handle, 整数型, , 

.DLL命令 _设置线程优先级, 逻辑型, "", "SetThreadPriority", 公开, 设置线程优先级
    .参数 handle, 整数型, , 
    .参数 Priority, 整数型, , 

.DLL命令 _取线程优先级, 整数型, "", "GetThreadPriority", 公开, 取线程优先级
    .参数 handle, 整数型, , 

.DLL命令 _关闭线程句柄, 逻辑型, "", "CloseHandle", 公开, 
    .参数 线程句柄, 整数型, , 

.DLL命令 _延时, 空白型, "", "Sleep", 公开, 
    .参数 毫米, 整数型, , 

.DLL命令 _等待对象, 整数型, "", "WaitForSingleObject", 公开, 等待线程运行完毕
    .参数 句柄, 整数型, , 
    .参数 毫秒, 整数型, , -1 无限等待

.DLL命令 _等待多个对象, 空白型, "", "WaitForMultipleObjects", 公开, 
    .参数 线程数, 整数型, , 
    .参数 句柄, 整数型, 数组, 
    .参数 是否等待, 逻辑型, , 
    .参数 毫秒, 整数型, , -1无限等待

.DLL命令 _删除许可证, 空白型, "", "DeleteCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _创建许可证, 空白型, "", "InitializeCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _进入许可区, 空白型, "", "EnterCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _退出许可区, 空白型, "kernel32", "LeaveCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _结束线程, 整数型, "kernel32", "TerminateThread", 公开, 终止当前线程
    .参数 hThread, 整数型, , 指定要终止线程的句柄
    .参数 退出码, 整数型, 传址, 将用做被终止线程的退出码

.DLL命令 _原子变量递减, 长整数型, "kernel32", "InterlockedDecrement", 公开, 
    .参数 lpAddend, 整数型, 传址, 0

.DLL命令 _原子变量递增, 长整数型, "kernel32", "InterlockedIncrement", 公开, 
    .参数 操作的变量, 整数型, 传址, 0

.DLL命令 _取自身线程伪句柄, 整数型, "kernel32.dll", "GetCurrentThread", 公开, 获取当前线程的伪句柄

.DLL命令 _获取线程退出码, 整数型, "kernel32.dll", "GetExitCodeThread", 公开, 获取一个已中止线程的退出代码
    .参数 hThread, 整数型, , 想获取退出代码的一个线程的句柄
    .参数 lpExitCode, 整数型, , 用于装载线程退出代码的一个长整数变量。如线程尚未中断，则设为常数STILL_ACTIVE

.程序集 程序集1, , , 

.程序集变量 许可证, 整数型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
调试输出 (“by - 家范   QQ 292459453”)
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 子程序_创建许可证, 空白型, , 
.如果真 (等于 (许可证, 0))
    赋值 (许可证, 未知支持库函数_1 ())
.如果真结束


.子程序 _临时子程序, 空白型, , 


.子程序 子程序_线程模版, 空白型, , 
.参数 参_内存地址, 整数型, , 

.局部变量 局_文本, 文本型, , , 
.局部变量 局_总数, 整数型, , , 
.局部变量 局_起始位置, 整数型, , , 
.局部变量 局_调用地址, 整数型, , , 
.局部变量 局_控制id, 整数型, , , 
.局部变量 局_自身ID, 整数型, , , 

赋值 (局_文本, 指针到文本 (参_内存地址))
释放内存 (参_内存地址)
赋值 (局_起始位置, 到数值 (文本_取中间文本 (局_文本, “<”, “>”)))
赋值 (局_总数, 相加 (到数值 (文本_取中间文本 (局_文本, “(”, “)”)), 局_起始位置))
赋值 (局_调用地址, 到数值 (文本_取中间文本 (局_文本, “[”, “]”)))
赋值 (局_控制id, 到数值 (文本_取中间文本 (局_文本, “$”, “*”)))
赋值 (局_自身ID, 到数值 (文本_取中间文本 (局_文本, “_”, “-”)))

.判断循环首 (小于 (局_起始位置, 局_总数))
    赋值 (局_起始位置, 相加 (局_起始位置, 1))
    调用子程序 (局_调用地址, , , 局_起始位置)
    处理事件 ()
.判断循环尾 ()

未知支持库函数_3 (许可证)
赋值 (全_线程控制 [局_控制id], 剩余线程数, 相减 (全_线程控制 [局_控制id], 剩余线程数, 1))
未知支持库函数_7 (全_线程控制 [局_控制id], 线程句柄 [局_自身ID])
.如果真 (等于 (全_线程控制 [局_控制id], 剩余线程数, 0))
    赋值 (全_线程控制 [局_控制id], 是否启动, 假)
    全_线程控制.调用反馈事件 ( [局_控制id], 反馈标签, 局_控制id, , )
.如果真结束
未知支持库函数_4 (许可证)

.子程序 文本_取中间文本, 文本型, , 
.参数 参_源文本, 文本型, , 
.参数 参_左边, 文本型, , 
.参数 参_右边, 文本型, , 

.局部变量 局_左边, 整数型, , , 
.局部变量 局_右边, 整数型, , , 
.局部变量 局_文本, 文本型, , , 

赋值 (局_左边, 寻找文本 (参_源文本, 参_左边, , 假))
赋值 (局_右边, 寻找文本 (参_源文本, 参_右边, , 假))
赋值 (局_文本, 取文本中间 (参_源文本, 相加 (局_左边, 1), 相减 (局_右边, 局_左边)))
返回 (局_文本)


.类模块 多线程, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
子程序_创建许可证 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 启动, 逻辑型, , 
.参数 参_线程数, 整数型, , 
.参数 参_任务数, 整数型, , 
.参数 参_工作子程序, 子程序指针, , 
.参数 参_ID, 整数型, 参考, 
.参数 参_反馈标签, 标签, , 

.局部变量 局_位置, 整数型, , , 
.局部变量 局_内存数据, 文本型, , , 
.局部变量 局_任务个数, 整数型, , , 
.局部变量 局_余数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_内存地址, 整数型, , , 

.如果真 (等于 (参_任务数, 0))
    返回 (假)
.如果真结束

.如果 (并且 (小于或等于 (参_ID, 取数组成员数 (全_线程控制)), 大于 (参_ID, 0)))
    赋值 (局_位置, 参_ID)
    .如果真 (全_线程控制 [局_位置], 是否启动)
        返回 (假)
    .如果真结束
    
.否则
    赋值 (局_位置, 相加 (取数组成员数 (全_线程控制), 1))
    重定义数组 (全_线程控制, 真, 局_位置)
    赋值 (参_ID, 局_位置)
.如果结束


重定义数组 (全_线程控制 [局_位置], 线程句柄, 假, 参_线程数)
.如果真 (大于 (参_线程数, 参_任务数))
    赋值 (参_线程数, 参_任务数)
.如果真结束

赋值 (全_线程控制 [局_位置], 剩余线程数, 参_线程数)
赋值 (局_任务个数, 到整数 (相除 (参_任务数, 参_线程数)))
赋值 (局_余数, 求余数 (参_任务数, 参_线程数))
赋值 (全_线程控制 [局_位置], 反馈标签, 参_反馈标签)
赋值 (全_线程控制 [局_位置], 是否启动, 真)

.计次循环首 (参_线程数, 局_计次)
    .判断开始 (等于 (局_计次, 参_线程数))
        赋值 (局_内存数据, 相加 (“<”, 到文本 (相乘 (相减 (局_计次, 1), 局_任务个数)), “>(”, 到文本 (相加 (局_任务个数, 局_余数)), “)[”, 到文本 (到整数 (参_工作子程序)), “]$”, 到文本 (局_位置), “*_”, 到文本 (局_计次), “-”))
    .默认
        赋值 (局_内存数据, 相加 (“<”, 到文本 (相乘 (相减 (局_计次, 1), 局_任务个数)), “>(”, 到文本 (局_任务个数), “)[”, 到文本 (到整数 (参_工作子程序)), “]$”, 到文本 (局_位置), “*_”, 到文本 (局_计次), “-”))
    .判断结束
    
    赋值 (局_内存地址, 申请内存 (相加 (取文本长度 (局_内存数据), 15), 真))
    写到内存 (局_内存数据, 局_内存地址, )
    未知支持库函数_0 (&子程序_线程模版, 局_内存地址, 全_线程控制 [局_位置], 线程句柄 [局_计次]) ' _创建线程 (0, 0, 到整数 (&子程序_线程模版), 局_内存地址, 0, 0)
    处理事件 ()
.计次循环尾 ()
返回 (真)

.子程序 暂停, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 


.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束

赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    _暂停线程 (全_线程控制 [参_ID], 线程句柄 [局_计次])
    处理事件 ()
.计次循环尾 ()
返回 (真)


.子程序 恢复, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束

赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    _恢复线程 (全_线程控制 [参_ID], 线程句柄 [局_计次])
    处理事件 ()
.计次循环尾 ()
返回 (真)

.子程序 关闭句柄, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束


赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    未知支持库函数_7 (全_线程控制 [参_ID], 线程句柄 [局_计次])
.计次循环尾 ()
返回 (真)


.子程序 销毁, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束

赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    未知支持库函数_6 (全_线程控制 [参_ID], 线程句柄 [局_计次])
    未知支持库函数_7 (全_线程控制 [参_ID], 线程句柄 [局_计次])
.计次循环尾 ()
返回 (真)




 ' 不属于任何一个程序集、类模块的函数：
