 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 301
    高度 = 70
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 12632256 '  0xC0C0C0
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 真
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 真
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\输入法模板部分.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “五笔输入法”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 253
    高度 = 161
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “版本信息:”
    帮助文件名 = “”

窗口 维护窗口
    左边 = 50
    顶边 = 50
    宽度 = 260
    高度 = 177
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “造词/维护:”
    帮助文件名 = “”

窗口 反查窗口
    左边 = 50
    顶边 = 50
    宽度 = 253
    高度 = 161
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “反查:”
    帮助文件名 = “”



.常量 自动上屏, "0", , 
.图片 码表, " ' 已保存到：D:\易语言学习\Data\输入法模板部分.e\码表", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 8 系统核心支持库
 ' eLIBpp ECFB3D10541A422b8B73779AF00B4D0C 1 2 ｅＬＩＢ＋＋
 ' cncnv 63AA4BEA120C4DABAD567115556DE054 1 0 文字编码转换支持库
 ' ExtMenu 9909FBB013704cfa8FE7E739DB7172DE 1 1 超级菜单支持库





.DLL命令 取焦点窗口, 整数型, "", "GetForegroundWindow", , 

.DLL命令 获取窗口关联, 整数型, "", "GetWindowThreadProcessId", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 获取识别符, 整数型, "", "GetCurrentThreadId", , 

.DLL命令 模拟键盘, 整数型, "", "keybd_event", , 
    .参数 参数1, 字节型, , 
    .参数 参数2, 字节型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 进程关联, 整数型, "", "AttachThreadInput", , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 

.DLL命令 取焦点, 整数型, "", "GetFocus", , 

.DLL命令 取功能键状态, 整数型, "", "GetKeyState", , 
    .参数 nVirtKey, 空白型, , 

.DLL命令 取键状态, 整数型, "", "GetAsyncKeyState", , 
    .参数 key, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 码表, 文本型, , , 
.程序集变量 热键号, 整数型, , "40", 
.子程序 __启动窗口_创建完毕, 空白型, , 
移动 (相减 (相除 (取屏幕宽度 (), 2), 94), 相减 (取屏幕高度 (), 30, .高度), .宽度, .高度)
赋值 (码表, 相加 (到文本 (#码表), 到文本 (读入文件 (相加 (取运行目录 (), “\word.bin”))), #换行符)) ' 把码表文件和用户定义的词放到一个容器中
 ' 以下代码是注册热键,输入法反应时使用
赋值 (热键号 [1], 未知支持库函数_10 (取窗口句柄 (), 0, #A键))
赋值 (热键号 [2], 未知支持库函数_10 (取窗口句柄 (), 0, #B键))
赋值 (热键号 [3], 未知支持库函数_10 (取窗口句柄 (), 0, #C键))
赋值 (热键号 [4], 未知支持库函数_10 (取窗口句柄 (), 0, #D键))
赋值 (热键号 [5], 未知支持库函数_10 (取窗口句柄 (), 0, #E键))
赋值 (热键号 [6], 未知支持库函数_10 (取窗口句柄 (), 0, #F键))
赋值 (热键号 [7], 未知支持库函数_10 (取窗口句柄 (), 0, #G键))
赋值 (热键号 [8], 未知支持库函数_10 (取窗口句柄 (), 0, #H键))
赋值 (热键号 [9], 未知支持库函数_10 (取窗口句柄 (), 0, #I键))
赋值 (热键号 [10], 未知支持库函数_10 (取窗口句柄 (), 0, #J键))
赋值 (热键号 [11], 未知支持库函数_10 (取窗口句柄 (), 0, #K键))
赋值 (热键号 [12], 未知支持库函数_10 (取窗口句柄 (), 0, #L键))
赋值 (热键号 [13], 未知支持库函数_10 (取窗口句柄 (), 0, #M键))
赋值 (热键号 [14], 未知支持库函数_10 (取窗口句柄 (), 0, #N键))
赋值 (热键号 [15], 未知支持库函数_10 (取窗口句柄 (), 0, #O键))
赋值 (热键号 [16], 未知支持库函数_10 (取窗口句柄 (), 0, #P键))
赋值 (热键号 [17], 未知支持库函数_10 (取窗口句柄 (), 0, #Q键))
赋值 (热键号 [18], 未知支持库函数_10 (取窗口句柄 (), 0, #R键))
赋值 (热键号 [19], 未知支持库函数_10 (取窗口句柄 (), 0, #S键))
赋值 (热键号 [20], 未知支持库函数_10 (取窗口句柄 (), 0, #T键))
赋值 (热键号 [21], 未知支持库函数_10 (取窗口句柄 (), 0, #U键))
赋值 (热键号 [22], 未知支持库函数_10 (取窗口句柄 (), 0, #V键))
赋值 (热键号 [23], 未知支持库函数_10 (取窗口句柄 (), 0, #W键))
赋值 (热键号 [24], 未知支持库函数_10 (取窗口句柄 (), 0, #X键))
赋值 (热键号 [25], 未知支持库函数_10 (取窗口句柄 (), 0, #Y键))
赋值 (热键号 [26], 未知支持库函数_10 (取窗口句柄 (), 0, #Z键))
赋值 (热键号 [27], 未知支持库函数_10 (取窗口句柄 (), 0, #PageDown键))
赋值 (热键号 [28], 未知支持库函数_10 (取窗口句柄 (), 0, #PageUp键))
 ' $如果(隐藏=1)
赋值 (热键号 [29], 未知支持库函数_10 (取窗口句柄 (), #, 0))
 ' $结束
赋值 (热键号 [30], 未知支持库函数_10 (取窗口句柄 (), 0, #空格键))
赋值 (热键号 [31], 未知支持库函数_10 (取窗口句柄 (), 0, #退格键))
赋值 (热键号 [32], 未知支持库函数_10 (取窗口句柄 (), 0, #键1))
赋值 (热键号 [33], 未知支持库函数_10 (取窗口句柄 (), 0, #键2))
赋值 (热键号 [34], 未知支持库函数_10 (取窗口句柄 (), 0, #键3))
赋值 (热键号 [35], 未知支持库函数_10 (取窗口句柄 (), 0, #键4))
赋值 (热键号 [36], 未知支持库函数_10 (取窗口句柄 (), 0, #键5))
赋值 (热键号 [37], 未知支持库函数_10 (取窗口句柄 (), 0, #键6))
赋值 (热键号 [38], 未知支持库函数_10 (取窗口句柄 (), 0, #键7))
赋值 (热键号 [39], 未知支持库函数_10 (取窗口句柄 (), 0, #键8))
赋值 (热键号 [40], 未知支持库函数_10 (取窗口句柄 (), 0, #键9))
未知支持库函数_0 (取窗口句柄 (), #, &消息处理子程序)

.子程序 消息处理子程序, 逻辑型, , 
.参数 窗口句柄, 整数型, 参考, 
.参数 消息号, 整数型, 参考, 
.参数 消息参数1, 整数型, 参考, 
.参数 消息参数2, 整数型, 参考, 

 ' 以下代码为收到反应的热键执行相应的子程序
 ' $如果(隐藏=1)
.如果真 (等于 (消息参数1, 热键号 [29]))
    操作 (“隐藏”) ' 隐藏/显示
.如果真结束
 ' $结束
.判断开始 (等于 (消息参数1, 热键号 [1]))
    操作 (“a”)
.判断 (等于 (消息参数1, 热键号 [2]))
    操作 (“b”)
.判断 (等于 (消息参数1, 热键号 [3]))
    操作 (“c”)
.判断 (等于 (消息参数1, 热键号 [4]))
    操作 (“d”)
.判断 (等于 (消息参数1, 热键号 [5]))
    操作 (“e”)
.判断 (等于 (消息参数1, 热键号 [6]))
    操作 (“f”)
.判断 (等于 (消息参数1, 热键号 [7]))
    操作 (“g”)
.判断 (等于 (消息参数1, 热键号 [8]))
    操作 (“h”)
.判断 (等于 (消息参数1, 热键号 [9]))
    操作 (“i”)
.判断 (等于 (消息参数1, 热键号 [10]))
    操作 (“j”)
.判断 (等于 (消息参数1, 热键号 [11]))
    操作 (“k”)
.判断 (等于 (消息参数1, 热键号 [12]))
    操作 (“l”)
.判断 (等于 (消息参数1, 热键号 [13]))
    操作 (“m”)
.判断 (等于 (消息参数1, 热键号 [14]))
    操作 (“n”)
.判断 (等于 (消息参数1, 热键号 [15]))
    操作 (“o”)
.判断 (等于 (消息参数1, 热键号 [16]))
    操作 (“p”)
.判断 (等于 (消息参数1, 热键号 [17]))
    操作 (“q”)
.判断 (等于 (消息参数1, 热键号 [18]))
    操作 (“r”)
.判断 (等于 (消息参数1, 热键号 [19]))
    操作 (“s”)
.判断 (等于 (消息参数1, 热键号 [20]))
    操作 (“t”)
.判断 (等于 (消息参数1, 热键号 [21]))
    操作 (“u”)
.判断 (等于 (消息参数1, 热键号 [22]))
    操作 (“v”)
.判断 (等于 (消息参数1, 热键号 [23]))
    操作 (“w”)
.判断 (等于 (消息参数1, 热键号 [24]))
    操作 (“x”)
.判断 (等于 (消息参数1, 热键号 [25]))
    操作 (“y”)
.判断 (等于 (消息参数1, 热键号 [26]))
    操作 (“z”)
.判断 (等于 (消息参数1, 热键号 [27]))
    操作 (“后翻”) ' 往后翻页
.判断 (等于 (消息参数1, 热键号 [28]))
    操作 (“前翻”) ' 往前翻页
.判断 (等于 (消息参数1, 热键号 [30]))
    操作 (“ ”) ' 空格
.判断 (等于 (消息参数1, 热键号 [31]))
    操作 (“退格”) ' 退格
.判断 (等于 (消息参数1, 热键号 [32]))
    操作 (“1”)
.判断 (等于 (消息参数1, 热键号 [33]))
    操作 (“2”)
.判断 (等于 (消息参数1, 热键号 [34]))
    操作 (“3”)
.判断 (等于 (消息参数1, 热键号 [35]))
    操作 (“4”)
.判断 (等于 (消息参数1, 热键号 [36]))
    操作 (“5”)
.判断 (等于 (消息参数1, 热键号 [37]))
    操作 (“6”)
.判断 (等于 (消息参数1, 热键号 [38]))
    操作 (“7”)
.判断 (等于 (消息参数1, 热键号 [39]))
    操作 (“8”)
.默认
    操作 (“9”)
.判断结束
返回 (真)

.子程序 操作, 空白型, , 
.参数 操作号, 文本型, , 

.局部变量 文本, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 循环, 整数型, , , 
.局部变量 多余, 整数型, , , 

赋值 (临时文本, “1234567890abcdefghijklmnopqrstuvwxyz ”)
.如果 (等于 (操作号, “退格”))
    .如果 (等于 (.标题, “”))
         ' 如果已退格到没有编码的状态,则退格屏幕上的文字,退格键不受影响
        未知支持库函数_11 (取窗口句柄 (), 热键号 [31])
        模拟键盘 (#退格键, 0, 0, 0)
        模拟键盘 (#退格键, 0, 2, 0)
        赋值 (热键号 [31], 未知支持库函数_10 (取窗口句柄 (), 0, #退格键))
    .否则
        赋值 (.标题, 取文本左边 (.标题, 相减 (取文本长度 (.标题), 1))) ' 退格键按下输入法反应
        字刷新 (假, 0)
    .如果结束
    
.否则
    .如果 (或者 (等于 (操作号, “1”), 等于 (操作号, “2”), 等于 (操作号, “3”), 等于 (操作号, “4”), 等于 (操作号, “5”), 等于 (操作号, “6”), 等于 (操作号, “7”), 等于 (操作号, “8”), 等于 (操作号, “9”), 等于 (操作号, “ ”))) ' 按下选字键1-9键,由于输入法的宽度有限,没有选字键0
        .如果 (等于 (操作号, “ ”)) ' 空格选字键按下
            .如果 (等于 (.标题, “”))
                投递文本 (操作号) ' 如果没有文字,则投递空格到屏幕上去,空格键使用不受影响
            .否则
                .如果真 (不等于 (寻找文本 (.标题, “1.”, , 假), -1)) ' 寻找文本并投递到屏幕上去
                    赋值 (文本, 取文本中间 (.标题, 相加 (寻找文本 (.标题, “1.”, , 假), 2), 寻找文本 (取文本中间 (.标题, 相加 (寻找文本 (.标题, “1.”, , 假), 2), 200), “ ”, , 假)))
                    赋值 (多余, 0)
                    .计次循环首 (取文本长度 (文本), 循环)
                        .如果真 (不等于 (寻找文本 (临时文本, 取文本中间 (文本, 相减 (循环, 多余), 1), , 假), -1))
                            赋值 (文本, 文本替换 (文本, 相减 (循环, 多余), 1, “”))
                            赋值 (多余, 相加 (多余, 1))
                        .如果真结束
                        处理事件 ()
                    .计次循环尾 ()
                    投递文本 (删全部空 (文本))
                    赋值 (.标题, “”)
                    赋值 (.标题, “”)
                .如果真结束
                
            .如果结束
            
        .否则
            .如果 (等于 (.标题, “”))
                投递文本 (操作号) ' 如果没有可选择的文字,数字被投递到屏幕上去,数字键不受影响
            .否则
                .如果真 (不等于 (寻找文本 (.标题, 相加 (操作号, “.”), , 假), -1)) ' 寻找相应的字并投递到屏幕上去
                    赋值 (文本, 取文本中间 (.标题, 相加 (寻找文本 (.标题, 相加 (操作号, “.”), , 假), 2), 寻找文本 (取文本中间 (.标题, 相加 (寻找文本 (.标题, 相加 (操作号, “.”), , 假), 2), 200), “ ”, , 假)))
                    赋值 (多余, 0)
                    .计次循环首 (取文本长度 (文本), 循环)
                        .如果真 (不等于 (寻找文本 (临时文本, 取文本中间 (文本, 相减 (循环, 多余), 1), , 假), -1))
                            赋值 (文本, 文本替换 (文本, 相减 (循环, 多余), 1, “”))
                            赋值 (多余, 相加 (多余, 1))
                        .如果真结束
                        处理事件 ()
                    .计次循环尾 ()
                    投递文本 (删全部空 (文本))
                    赋值 (.标题, “”)
                    赋值 (.标题, “”)
                .如果真结束
                
            .如果结束
            
        .如果结束
        
    .否则
        .如果 (等于 (操作号, “后翻”))
            字刷新 (真, 0) ' 文字往后翻页
        .否则
            .如果 (等于 (操作号, “前翻”))
                字刷新 (真, 1) ' 文字往前翻页
            .否则
                .如果 (等于 (操作号, “隐藏”))
                    赋值 (.可视, 取反 (.可视)) ' 按下Shift键输入法隐藏/显示
                    .如果 (.可视)
                        赋值 (热键号 [1], 未知支持库函数_10 (取窗口句柄 (), 0, #A键))
                        赋值 (热键号 [2], 未知支持库函数_10 (取窗口句柄 (), 0, #B键))
                        赋值 (热键号 [3], 未知支持库函数_10 (取窗口句柄 (), 0, #C键))
                        赋值 (热键号 [4], 未知支持库函数_10 (取窗口句柄 (), 0, #D键))
                        赋值 (热键号 [5], 未知支持库函数_10 (取窗口句柄 (), 0, #E键))
                        赋值 (热键号 [6], 未知支持库函数_10 (取窗口句柄 (), 0, #F键))
                        赋值 (热键号 [7], 未知支持库函数_10 (取窗口句柄 (), 0, #G键))
                        赋值 (热键号 [8], 未知支持库函数_10 (取窗口句柄 (), 0, #H键))
                        赋值 (热键号 [9], 未知支持库函数_10 (取窗口句柄 (), 0, #I键))
                        赋值 (热键号 [10], 未知支持库函数_10 (取窗口句柄 (), 0, #J键))
                        赋值 (热键号 [11], 未知支持库函数_10 (取窗口句柄 (), 0, #K键))
                        赋值 (热键号 [12], 未知支持库函数_10 (取窗口句柄 (), 0, #L键))
                        赋值 (热键号 [13], 未知支持库函数_10 (取窗口句柄 (), 0, #M键))
                        赋值 (热键号 [14], 未知支持库函数_10 (取窗口句柄 (), 0, #N键))
                        赋值 (热键号 [15], 未知支持库函数_10 (取窗口句柄 (), 0, #O键))
                        赋值 (热键号 [16], 未知支持库函数_10 (取窗口句柄 (), 0, #P键))
                        赋值 (热键号 [17], 未知支持库函数_10 (取窗口句柄 (), 0, #Q键))
                        赋值 (热键号 [18], 未知支持库函数_10 (取窗口句柄 (), 0, #R键))
                        赋值 (热键号 [19], 未知支持库函数_10 (取窗口句柄 (), 0, #S键))
                        赋值 (热键号 [20], 未知支持库函数_10 (取窗口句柄 (), 0, #T键))
                        赋值 (热键号 [21], 未知支持库函数_10 (取窗口句柄 (), 0, #U键))
                        赋值 (热键号 [22], 未知支持库函数_10 (取窗口句柄 (), 0, #V键))
                        赋值 (热键号 [23], 未知支持库函数_10 (取窗口句柄 (), 0, #W键))
                        赋值 (热键号 [24], 未知支持库函数_10 (取窗口句柄 (), 0, #X键))
                        赋值 (热键号 [25], 未知支持库函数_10 (取窗口句柄 (), 0, #Y键))
                        赋值 (热键号 [26], 未知支持库函数_10 (取窗口句柄 (), 0, #Z键))
                        赋值 (热键号 [27], 未知支持库函数_10 (取窗口句柄 (), 0, #PageDown键))
                        赋值 (热键号 [28], 未知支持库函数_10 (取窗口句柄 (), 0, #PageUp键))
                        赋值 (热键号 [30], 未知支持库函数_10 (取窗口句柄 (), 0, #空格键))
                        赋值 (热键号 [31], 未知支持库函数_10 (取窗口句柄 (), 0, #退格键))
                        赋值 (热键号 [32], 未知支持库函数_10 (取窗口句柄 (), 0, #键1))
                        赋值 (热键号 [33], 未知支持库函数_10 (取窗口句柄 (), 0, #键2))
                        赋值 (热键号 [34], 未知支持库函数_10 (取窗口句柄 (), 0, #键3))
                        赋值 (热键号 [35], 未知支持库函数_10 (取窗口句柄 (), 0, #键4))
                        赋值 (热键号 [36], 未知支持库函数_10 (取窗口句柄 (), 0, #键5))
                        赋值 (热键号 [37], 未知支持库函数_10 (取窗口句柄 (), 0, #键6))
                        赋值 (热键号 [38], 未知支持库函数_10 (取窗口句柄 (), 0, #键7))
                        赋值 (热键号 [39], 未知支持库函数_10 (取窗口句柄 (), 0, #键8))
                        赋值 (热键号 [40], 未知支持库函数_10 (取窗口句柄 (), 0, #键9))
                    .否则
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [1])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [2])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [3])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [4])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [5])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [6])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [7])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [8])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [9])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [10])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [11])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [12])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [13])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [14])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [15])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [16])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [17])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [18])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [19])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [20])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [21])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [22])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [23])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [24])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [25])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [26])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [27])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [28])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [30])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [31])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [32])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [33])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [34])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [35])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [36])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [37])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [38])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [39])
                        未知支持库函数_11 (取窗口句柄 (), 热键号 [40])
                    .如果结束
                    
                .否则
                    .如果 (取大写锁定键状态 ())
                        投递文本 (到大写 (操作号)) ' 如果大写键打开,则直接将按键投递到屏幕上,A-Z键不影响
                    .否则
                        .如果 (等于 (#自动上屏, 0))
                            赋值 (.标题, 相加 (.标题, 操作号)) ' 如果以上条件都成立,则表示为输入键:A-Z,赋值到标签上
                            字刷新 (假, 0)
                        .否则
                            赋值 (.标题, 相加 (.标题, 操作号)) ' 如果以上条件都成立,则表示为输入键:A-Z,赋值到标签上
                            字刷新 (假, 0)
                            .如果真 (大于或等于 (取文本长度 (.标题), #自动上屏))
                                模拟键盘 (#空格键, 0, 0, 0)
                                模拟键盘 (#空格键, 0, 2, 0)
                            .如果真结束
                            
                        .如果结束
                        
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
        .如果结束
        
    .如果结束
    
.如果结束


.子程序 取大写锁定键状态, 逻辑型, , 检查大写键是否被按下，是返回真
.局部变量 大写记录, 逻辑型, 静态, , 
.局部变量 大写状态, 逻辑型, 静态, , 

.如果 (等于 (大写记录, 假))
    .判断循环首 (不等于 (未知函数_167838227 (20), 0))
    .判断循环尾 ()
    赋值 (大写状态, 选择 (不等于 (未知函数_167838228 (20), 0), 真, 假))
    赋值 (大写记录, 真)
.否则
    .如果真 (不等于 (未知函数_167838227 (20), 0))
        .判断循环首 (不等于 (未知函数_167838227 (20), 0))
        .判断循环尾 ()
        赋值 (大写状态, 取反 (大写状态))
    .如果真结束
    
.如果结束
返回 (大写状态)

.子程序 投递文本, 空白型, , 该子程序用于将文本发送到屏幕上去
.参数 文本, 文本型, , 欲投递的文本

.局部变量 前景窗口句柄, 整数型, , , 
.局部变量 前景窗口进程标识, 整数型, , , 
.局部变量 本进程标识, 整数型, , , 
.局部变量 要得到的窗口句柄, 整数型, , , 
.局部变量 消息, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 循环, 整数型, , , 
.局部变量 剪辑板格式, 整数型, , "0", 
.局部变量 剪辑板数据, 字节集, , "0", 

 ' $如果(文字输出=1)
 ' 如果文字模式不是标准格式,则需要先转换文字格式
.如果真 (.选中)
    赋值 (文本, 未知支持库函数_0 (文本, #))
.如果真结束
.如果真 (.选中)
    赋值 (文本, 未知支持库函数_0 (文本, #))
.如果真结束
.如果真 (.选中)
    赋值 (文本, 未知支持库函数_0 (文本, #))
.如果真结束
 ' $结束
 ' 以下代码为取得屏幕焦点控件句柄的代码
赋值 (前景窗口句柄, 取焦点窗口 ())
赋值 (前景窗口进程标识, 获取窗口关联 (前景窗口句柄, 前景窗口进程标识))
赋值 (前景窗口进程标识, 取绝对值 (前景窗口进程标识))
赋值 (本进程标识, 获取识别符 ())
赋值 (本进程标识, 取绝对值 (本进程标识))
进程关联 (前景窗口进程标识, 本进程标识, 1)
赋值 (要得到的窗口句柄, 取焦点 ())
 ' 以下代码将文字投递到屏幕中的焦点控件
赋值 (消息, 到字节集 (文本))
赋值 (长度, 取字节集长度 (消息))
.计次循环首 (长度, 循环)
    未知支持库函数_8 (要得到的窗口句柄, 258, 消息 [循环], 1)
.计次循环尾 ()

.子程序 字刷新, 空白型, , 该子程序用于刷新文字
.参数 翻页, 逻辑型, , 是否翻页
.参数 翻页模式, 整数型, , 0为后翻,1为前翻

.局部变量 搜寻位置, 整数型, 静态, , 记录文字搜寻的位置
.局部变量 文字, 文本型, , , 已搜索到的文字
.局部变量 分割, 文本型, , "0", 分割编码和汉字
.局部变量 循环, 整数型, , , 循环记录
.局部变量 翻页记录, 文本型, 静态, "0", 若往后翻,前一页的文字将被记录在此
.局部变量 现行页, 整数型, 静态, , 如果使用了翻页,该容器记录现行页

.如果 (不等于 (.标题, “”))
    .如果 (翻页) ' 判断是否需要翻页
        .如果 (等于 (翻页模式, 0))
            .如果 (大于或等于 (现行页, 取数组成员数 (翻页记录)))
                赋值 (循环, 1)
                赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), 相加 (搜寻位置, 1), 假)) ' 搜索汉字
                .如果真 (不等于 (搜寻位置, -1))
                    赋值 (.标题, “”)
                .如果真结束
                .判断循环首 (不等于 (搜寻位置, -1))
                     ' 如果已搜索到,则处理搜索到的文字
                    重定义数组 (分割, 假, 0)
                    复制数组 (分割, 分割文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 相减 (寻找文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 200), #换行符, , 假), 1)), “ ”, ))
                    .如果真 (等于 (寻找文本 (.标题, 相加 (分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))), , 假), -1))
                        赋值 (文字, 相加 (到文本 (循环), “.”, 分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))))
                        .如果 (大于 (相加 (.标题, “ ”, 文字).取宽度 (), 286))
                            跳出循环 ()
                        .否则
                            赋值 (.标题, 相加 (.标题, “ ”, 文字))
                        .如果结束
                        赋值 (循环, 相加 (循环, 1))
                    .如果真结束
                    赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), 相加 (搜寻位置, 1), 假))
                .判断循环尾 ()
                .如果真 (不等于 (.标题, “”))
                    赋值 (.标题, 相加 (.标题, “ ”))
                    加入成员 (翻页记录, .标题)
                .如果真结束
                赋值 (现行页, 取数组成员数 (翻页记录)) ' 改变现行页
            .否则
                赋值 (现行页, 相加 (现行页, 1))
                赋值 (.标题, 翻页记录 [现行页]) ' 往后翻页
            .如果结束
            
        .否则
            .如果 (大于 (现行页, 1))
                赋值 (现行页, 相减 (现行页, 1))
                赋值 (.标题, 翻页记录 [现行页]) ' 往前翻页
            .否则
                .如果真 (等于 (现行页, 1))
                     ' 如果现行页为第2页(第1页未加入到容器中),则重新搜索第1页的文字
                    赋值 (现行页, 0)
                    赋值 (循环, 1)
                    赋值 (现行页, 0)
                    赋值 (.标题, “”)
                    赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), , 假))
                    .判断循环首 (不等于 (搜寻位置, -1))
                        重定义数组 (分割, 假, 0)
                        复制数组 (分割, 分割文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 相减 (寻找文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 200), #换行符, , 假), 1)), “ ”, ))
                        .如果真 (等于 (寻找文本 (.标题, 相加 (分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))), , 假), -1))
                            赋值 (文字, 相加 (到文本 (循环), “.”, 分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))))
                            .如果 (大于 (相加 (.标题, “ ”, 文字).取宽度 (), 286))
                                跳出循环 ()
                            .否则
                                赋值 (.标题, 相加 (.标题, “ ”, 文字))
                            .如果结束
                            赋值 (循环, 相加 (循环, 1))
                        .如果真结束
                        赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), 相加 (搜寻位置, 1), 假))
                    .判断循环尾 ()
                    .如果真 (不等于 (.标题, “”))
                        赋值 (.标题, 相加 (.标题, “ ”))
                    .如果真结束
                    重定义数组 (翻页记录, 假, 0)
                .如果真结束
                
            .如果结束
            
        .如果结束
        
    .否则
         ' 搜索第1页的字
        赋值 (循环, 1)
        赋值 (现行页, 0)
        赋值 (.标题, “”)
        赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), , 假))
        .判断循环首 (不等于 (搜寻位置, -1))
            重定义数组 (分割, 假, 0)
            复制数组 (分割, 分割文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 相减 (寻找文本 (取文本中间 (码表, 相加 (搜寻位置, 2), 200), #换行符, , 假), 1)), “ ”, ))
            .如果真 (等于 (寻找文本 (.标题, 相加 (分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))), , 假), -1))
                赋值 (文字, 相加 (到文本 (循环), “.”, 分割 [2], 取文本右边 (分割 [1], 相减 (取文本长度 (分割 [1]), 取文本长度 (.标题)))))
                .如果 (大于 (相加 (.标题, “ ”, 文字).取宽度 (), 286))
                    跳出循环 ()
                .否则
                    赋值 (.标题, 相加 (.标题, “ ”, 文字))
                .如果结束
                赋值 (循环, 相加 (循环, 1))
            .如果真结束
            赋值 (搜寻位置, 寻找文本 (码表, 相加 (#换行符, .标题), 相加 (搜寻位置, 1), 假))
        .判断循环尾 ()
        .如果真 (不等于 (.标题, “”))
            赋值 (.标题, 相加 (.标题, “ ”))
        .如果真结束
        重定义数组 (翻页记录, 假, 0)
        赋值 (现行页, 0)
    .如果结束
    
.否则
    赋值 (.标题, “”) ' 如果没有编码,则也没有文字出现
.如果结束


.子程序 _标签1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 (.左边, .顶边) ' 弹出系统总菜单

.子程序 _标准文字_被选择, 空白型, , 更换输入法输出文字格式为标准
连续赋值 (假, .选中, .选中, .选中, .选中)
赋值 (.选中, 真)

.子程序 _繁体文字_被选择, 空白型, , 更换输入法输出文字格式为繁体
连续赋值 (假, .选中, .选中, .选中, .选中)
赋值 (.选中, 真)

.子程序 _BIG5文字_被选择, 空白型, , 更换输入法输出文字格式为BIG5
连续赋值 (假, .选中, .选中, .选中, .选中)
赋值 (.选中, 真)

.子程序 _SJIS文字_被选择, 空白型, , 更换输入法输出文字格式为SJIS
连续赋值 (假, .选中, .选中, .选中, .选中)
赋值 (.选中, 真)

.子程序 _退出_被选择, 空白型, , 退出输入法
赋值 (码表, “”) ' 释放码表占用的内存
结束 ()

.子程序 __启动窗口_可否被关闭, 逻辑型, , 
返回 (假) ' 不允许Alt+F4关闭输入法程序

.子程序 _版本信息_被选择, 空白型, , 
载入 (关于窗口, _启动窗口, 假)

.子程序 _造词管理_被选择, 空白型, , 
载入 (维护窗口, _启动窗口, 假)

.子程序 _时钟3_周期事件, 空白型, , 如果大写键打开,清除文字
.如果真 (取大写锁定键状态 ())
    .如果真 (不等于 (.标题, “”))
        赋值 (.标题, “”)
        字刷新 (假, 0)
    .如果真结束
    
.如果真结束


.子程序 _文字反查_被选择, 空白型, , 
载入 (反查窗口, _启动窗口, 假)

.窗口程序集 窗口程序集2, , , 

.子程序 _关于窗口_创建完毕, 空白型, , 
赋值 (.高度, 相加 (相减 (.高度, 取用户区高度 ()), .顶边, .高度, 8)) ' 将高度移动到合适位置,不同系统的窗口标题高度是不同的

.子程序 _关闭_被单击, 空白型, , 
销毁 ()

.窗口程序集 窗口程序集3, , , 

.子程序 _修改_被单击, 空白型, , 修改定义的词或字
.局部变量 存放容器, 文本型, , , 
.局部变量 循环, 整数型, , , 
.局部变量 用户词, 文本型, , , 

.如果真 (不等于 (.现行选中项, -1))
    .如果真 (输入框 (相加 (“请输入修改字的编码:”, #换行符, #换行符, “格式:编码 + 空格 + 文字,例:hang 行”), “修改:”, .取项目文本 (.现行选中项), 存放容器, ))
        .如果 (不等于 (删全部空 (), “”))
            .置项目文本 (.现行选中项, 存放容器)
            赋值 (用户词, “”)
            .计次循环首 (取项目数 (), 循环)
                赋值 (相加 (#换行符, 相减 (循环, 1).取项目文本 ()))
            .计次循环尾 ()
            赋值 (_启动窗口., 相加 (到文本 (#码表), 用户词, #换行符))
            写到文件 (相加 (取运行目录 (), “\word.bin”), 到字节集 ())
        .否则
            信息框 (“编码为空,不能加入到自定义词汇中!”, #错误图标, “错误:”)
        .如果结束
        
    .如果真结束
    
.如果真结束


.子程序 _维护窗口_创建完毕, 空白型, , 将用户词增加到列表中以便维护
.局部变量 循环, 整数型, , , 
.局部变量 文本容器, 文本型, , "0", 
.局部变量 用户词, 文本型, , , 

清空 ()
赋值 (用户词, 取文本右边 (_启动窗口., 相减 (取文本长度 (_启动窗口.), 取文本长度 (到文本 (#码表)))))
重定义数组 (文本容器, 假, 0)
复制数组 (文本容器, 分割文本 (用户词, #换行符, ))
.计次循环首 (取数组成员数 (文本容器), 循环)
    .如果真 (不等于 (删全部空 (文本容器 [循环]), “”))
        文本容器.加入项目 ( [循环], )
    .如果真结束
    处理事件 ()
.计次循环尾 ()
赋值 (_启动窗口., 相加 (到文本 (#码表), 用户词, #换行符))
赋值 (.高度, 相加 (相减 (.高度, 取用户区高度 ()), .顶边, .高度, 8)) ' 将高度移动到合适位置,不同系统的窗口标题高度是不同的

.子程序 _添加_被单击, 空白型, , 添加文字或词组
.局部变量 存放容器, 文本型, , , 
.局部变量 用户词, 文本型, , , 

.如果真 (输入框 (相加 (“请输入添加字的编码:”, #换行符, #换行符, “格式:编码 + 空格 + 文字,例:hang 行”), “添加:”, , 存放容器, ))
    .如果 (不等于 (删全部空 (存放容器), “”))
        赋值 (用户词, 相加 (用户词, #换行符, 存放容器))
        存放容器.加入项目 ()
        赋值 (_启动窗口., 相加 (到文本 (#码表), 用户词, #换行符))
        写到文件 (相加 (取运行目录 (), “\word.bin”), 到字节集 ())
    .否则
        信息框 (“编码为空,不能加入到自定义词汇中!”, #错误图标, “错误:”)
    .如果结束
    
.如果真结束


.子程序 _关闭_被单击, 空白型, , 
销毁 ()

.子程序 _删除_被单击, 空白型, , 删除已添加的文字或词组
.局部变量 循环, 整数型, , , 
.局部变量 用户词, 文本型, , , 

.如果真 (不等于 (.现行选中项, -1))
    .删除项目 (.现行选中项)
    赋值 (用户词, “”)
    .计次循环首 (取项目数 (), 循环)
        赋值 (相加 (#换行符, 相减 (1).取项目文本 ()))
    .计次循环尾 ()
    赋值 (_启动窗口., 相加 (到文本 (#码表), 用户词, #换行符))
    写到文件 (相加 (取运行目录 (), “\word.bin”), 到字节集 ())
.如果真结束


.窗口程序集 窗口程序集4, , , 

.子程序 _编辑框_内容被改变, 空白型, , 文字反查
.局部变量 搜寻位置, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (.内容, “”)
赋值 (搜寻位置, 寻找文本 (_启动窗口., 相加 (“ ”, .内容, #换行符), , 假))
.判断循环首 (不等于 (搜寻位置, -1))
    赋值 (文本, 取文本中间 (_启动窗口., 相减 (搜寻位置, 100), 100))
    赋值 (文本, 取文本右边 (文本, 相减 (取文本长度 (文本), 倒找文本 (文本, #换行符, , 假), 1)))
    赋值 (.内容, 相加 (.内容, 文本, #换行符))
    赋值 (搜寻位置, 寻找文本 (_启动窗口., 相加 (“ ”, .内容, #换行符), 相加 (搜寻位置, 1), 假))
.判断循环尾 ()
赋值 (.内容, 取文本左边 (.内容, 相减 (取文本长度 (.内容), 1)))

.子程序 _关闭_被单击, 空白型, , 
销毁 ()

.子程序 _反查窗口_创建完毕, 空白型, , 
赋值 (.高度, 相加 (相减 (.高度, 取用户区高度 ()), .顶边, .高度, 8)) ' 将高度移动到合适位置,不同系统的窗口标题高度是不同的


 ' 不属于任何一个程序集、类模块的函数：
