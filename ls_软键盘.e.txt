 ' 文件类型：Windows动态链接库

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口_键盘 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 392
    高度 = 166
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库




数据类型 自定义_位置, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 

.全局变量 全局_左边, 整数型, , , 
.全局变量 全局_顶边, 整数型, , , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置动态链接库初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 返回值被忽略。

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
调试输出 (子程序_软键盘 ())


.子程序 子程序_软键盘, 文本型, 公开, 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 

赋值 (全局_左边, 参数_左边)
赋值 (全局_顶边, 参数_顶边)
载入 (窗口_键盘, , 真)
返回 (窗口_键盘.)


.窗口程序集 窗口程序集1, , , 

.程序集变量 程序集_位置数组, 自定义_位置, , "36", 
.程序集变量 程序集_shift, 逻辑型, , , 
.程序集变量 程序集_文本, 文本型, , , 
.子程序 _窗口_键盘_创建完毕, 空白型, , 
窗口_键盘.移动 (全局_左边, 全局_顶边, , )
子程序_初始化 ()
子程序_排序 ()


.子程序 子程序_排序, 空白型, , 
.局部变量 局部_计次, 整数型, , , 
.局部变量 局部_随机数, 整数型, , , 

置随机数种子 (取启动时间 ())
.计次循环首 (36, 局部_计次)
    .判断循环首 (不等于 (取数组成员数 (程序集_位置数组), 0))
        赋值 (局部_随机数, 取随机数 (1, 取数组成员数 (程序集_位置数组)))
        .如果真 (等于 (局部_计次, 1))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 2))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 3))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 4))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 5))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 6))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 7))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 8))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 9))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 10))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 11))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 12))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 13))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 14))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 15))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 16))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 17))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 18))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 19))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 20))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 21))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 22))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 23))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 24))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 25))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 26))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 27))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 28))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 29))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 30))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 31))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 32))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 33))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 34))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 35))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (局部_计次, 36))
            程序集_位置数组.移动 ( [局部_随机数], 左边, 程序集_位置数组 [局部_随机数], 顶边, , )
            删除成员 (程序集_位置数组, 局部_随机数, )
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    
.计次循环尾 ()


.子程序 子程序_初始化, 空白型, , 
赋值 (程序集_位置数组 [1].左边, .左边)
赋值 (程序集_位置数组 [1].顶边, .顶边)

赋值 (程序集_位置数组 [2].左边, .左边)
赋值 (程序集_位置数组 [2].顶边, .顶边)

赋值 (程序集_位置数组 [3].左边, .左边)
赋值 (程序集_位置数组 [3].顶边, .顶边)

赋值 (程序集_位置数组 [4].左边, .左边)
赋值 (程序集_位置数组 [4].顶边, .顶边)

赋值 (程序集_位置数组 [5].左边, .左边)
赋值 (程序集_位置数组 [5].顶边, .顶边)

赋值 (程序集_位置数组 [6].左边, .左边)
赋值 (程序集_位置数组 [6].顶边, .顶边)

赋值 (程序集_位置数组 [7].左边, .左边)
赋值 (程序集_位置数组 [7].顶边, .顶边)

赋值 (程序集_位置数组 [8].左边, .左边)
赋值 (程序集_位置数组 [8].顶边, .顶边)

赋值 (程序集_位置数组 [9].左边, .左边)
赋值 (程序集_位置数组 [9].顶边, .顶边)

赋值 (程序集_位置数组 [10].左边, .左边)
赋值 (程序集_位置数组 [10].顶边, .顶边)

赋值 (程序集_位置数组 [11].左边, .左边)
赋值 (程序集_位置数组 [11].顶边, .顶边)

赋值 (程序集_位置数组 [12].左边, .左边)
赋值 (程序集_位置数组 [12].顶边, .顶边)

赋值 (程序集_位置数组 [13].左边, .左边)
赋值 (程序集_位置数组 [13].顶边, .顶边)

赋值 (程序集_位置数组 [14].左边, .左边)
赋值 (程序集_位置数组 [14].顶边, .顶边)

赋值 (程序集_位置数组 [15].左边, .左边)
赋值 (程序集_位置数组 [15].顶边, .顶边)

赋值 (程序集_位置数组 [16].左边, .左边)
赋值 (程序集_位置数组 [16].顶边, .顶边)

赋值 (程序集_位置数组 [17].左边, .左边)
赋值 (程序集_位置数组 [17].顶边, .顶边)

赋值 (程序集_位置数组 [18].左边, .左边)
赋值 (程序集_位置数组 [18].顶边, .顶边)

赋值 (程序集_位置数组 [19].左边, .左边)
赋值 (程序集_位置数组 [19].顶边, .顶边)

赋值 (程序集_位置数组 [20].左边, .左边)
赋值 (程序集_位置数组 [20].顶边, .顶边)

赋值 (程序集_位置数组 [21].左边, .左边)
赋值 (程序集_位置数组 [21].顶边, .顶边)

赋值 (程序集_位置数组 [22].左边, .左边)
赋值 (程序集_位置数组 [22].顶边, .顶边)

赋值 (程序集_位置数组 [23].左边, .左边)
赋值 (程序集_位置数组 [23].顶边, .顶边)

赋值 (程序集_位置数组 [24].左边, .左边)
赋值 (程序集_位置数组 [24].顶边, .顶边)

赋值 (程序集_位置数组 [25].左边, .左边)
赋值 (程序集_位置数组 [25].顶边, .顶边)

赋值 (程序集_位置数组 [26].左边, .左边)
赋值 (程序集_位置数组 [26].顶边, .顶边)

赋值 (程序集_位置数组 [27].左边, .左边)
赋值 (程序集_位置数组 [27].顶边, .顶边)

赋值 (程序集_位置数组 [28].左边, .左边)
赋值 (程序集_位置数组 [28].顶边, .顶边)

赋值 (程序集_位置数组 [29].左边, .左边)
赋值 (程序集_位置数组 [29].顶边, .顶边)

赋值 (程序集_位置数组 [30].左边, .左边)
赋值 (程序集_位置数组 [30].顶边, .顶边)

赋值 (程序集_位置数组 [31].左边, .左边)
赋值 (程序集_位置数组 [31].顶边, .顶边)

赋值 (程序集_位置数组 [32].左边, .左边)
赋值 (程序集_位置数组 [32].顶边, .顶边)

赋值 (程序集_位置数组 [33].左边, .左边)
赋值 (程序集_位置数组 [33].顶边, .顶边)

赋值 (程序集_位置数组 [34].左边, .左边)
赋值 (程序集_位置数组 [34].顶边, .顶边)

赋值 (程序集_位置数组 [35].左边, .左边)
赋值 (程序集_位置数组 [35].顶边, .顶边)

赋值 (程序集_位置数组 [36].左边, .左边)
赋值 (程序集_位置数组 [36].顶边, .顶边)

连续赋值 ({ 14, 0, 0, 0 }, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针, .鼠标指针)



.子程序 _标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “!”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)


.子程序 _标签2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “@”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)


.子程序 _标签3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “#”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签4_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “$”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签5_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “%”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签6_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “^”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签7_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “&”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签8_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “*”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签9_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “(”.加入文本 ()
.否则
    取文本左边 (.标题, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签10_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    “)”.加入文本 ()
.否则
    取文本中间 (.标题, 2, 1).加入文本 ()
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签11_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签12_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签13_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签14_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签15_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签16_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签17_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签18_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签19_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签20_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签21_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签22_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签23_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签24_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签25_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签26_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签27_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签28_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签29_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签30_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签31_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签32_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签33_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签34_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签35_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签36_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
.如果 (等于 (程序集_shift, 真))
    到大写 (.标题).加入文本 ()
.否则
    .加入文本 (.标题)
.如果结束
赋值 (程序集_shift, 假)
赋值 (.文本颜色, #蓝色)
赋值 (.边框, 2)

.子程序 _标签55_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
赋值 (.文本颜色, #红色)
赋值 (程序集_shift, 真)

.子程序 _标签66_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
赋值 (程序集_文本, 取文本左边 (.内容, 相减 (取文本长度 (.内容), 1)))
赋值 (.内容, 程序集_文本)



.子程序 _标签66_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _窗口_键盘_将被销毁, 空白型, , 
赋值 (程序集_文本, .内容)
清除数组 (程序集_位置数组)
重定义数组 (程序集_位置数组, 假, 36)

.子程序 _标签37_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 1)
赋值 (程序集_文本, .内容)
清除数组 (程序集_位置数组)
重定义数组 (程序集_位置数组, 假, 36)
窗口_键盘.销毁 ()


.子程序 _标签37_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签2_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签3_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签4_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签5_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签6_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签7_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签8_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签9_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签10_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签11_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签12_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签13_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签14_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签15_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签16_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签17_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签18_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签19_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签20_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签21_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签22_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签23_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签24_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签25_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签26_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签27_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签28_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签29_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签30_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签31_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签32_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签33_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签34_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签35_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)

.子程序 _标签36_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.边框, 2)


 ' 不属于任何一个程序集、类模块的函数：
