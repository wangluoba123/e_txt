 ' 文件类型：Windows窗口程序

 ' 程序名称：编码模拟器
 ' 程序描述：编码模拟器
@备注:
编码模拟器
 ' 程序作者：ESMaster
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 379
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “编码模拟器”
    帮助文件名 = “”



.常量 CP_ACP, "0", , ANSI代码页
.常量 CP_OEMCP, "1", , OEM代码页
.常量 CP_MACCP, "2", , Macintosh代码页
.常量 CP_THREAD_ACP, "3", , 当前线程ANSI代码页
.常量 CP_SYMBOL, "42", , 符号代码页（42）
.常量 CP_UTF7, "65000", , 使用UTF-7转换
.常量 CP_UTF8, "65001", , 使用UTF-8转换
.图片 测试文本, " ' 已保存到：D:\易语言学习\Data\编码模拟器.e\测试文本", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iconv {A0005538-9391-4dd9-B4D6-8EB7B9360F08} 2 0 编码转换支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二





.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", , 该函数映射一个unicode字符串到一个多字节字符串。
    .参数 代码页, 整数型, , #CP_ACP;#CP_OEMCP;#CP_MACCP;#CP_THREAD_ACP;#CP_SYMBOL;#CP_UTF7;#CP_UTF8
    .参数 标志, 整数型, , 
    .参数 宽字符字节集, 字节集, , 
    .参数 宽字符长度, 整数型, , 
    .参数 双字节字节集, 字节集, , 
    .参数 双字节长度, 整数型, , 
    .参数 默认文本, 整数型, 传址, 
    .参数 使用默认文本, 整数型, , 

.DLL命令 MultiByteToWideChar, 整数型, "kernel32.dll", "MultiByteToWideChar", , 该函数映射一个字符串到一个宽字符（unicode）的字符串。由该函数映射的字符串没必要是多字节字符组。 
    .参数 代码页, 整数型, , #CP_ACP;#CP_OEMCP;#CP_MACCP;#CP_THREAD_ACP;#CP_SYMBOL;#CP_UTF7;#CP_UTF8
    .参数 标志, 整数型, , 
    .参数 双字节字节集, 字节集, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符字节集, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (.现行选中项, 0)
赋值 (.现行选中项, 0)
赋值 (.现行选中项, 0)

.子程序 _按钮2_被单击, 空白型, , 
打开 ()
.如果真 (不等于 (.文件名, “”))
    赋值 (.内容, .文件名)
.如果真结束


.子程序 _按钮1_被单击, 空白型, , 
.局部变量 临时文件, 文本型, , , 
.局部变量 编码特征, 文本型, , , 
.局部变量 头字节数, 整数型, , , 
.局部变量 文件转换, 文件编码转换类, , , 

.如果真 (等于 (.内容, “”))
    信息框 (“文件路径不能为空!”, #信息图标, “提示”)
    返回 ()
.如果真结束

.如果 (.选中)
    赋值 (临时文件, 相加 (.内容, “.bak”))
    .如果真 (文件是否存在 (临时文件))
        删除文件 (临时文件)
    .如果真结束
    文件转换.打开 (.内容, 临时文件)
    .如果 (文件转换.转换 (.内容))
        信息框 (“文件转换完成!”, #信息图标, “信息”)
    .否则
        信息框 (“转换失败!”, #信息图标, “提示”)
    .如果结束
    
.否则
    赋值 (临时文件, 相加 (.内容, “.new”))
    文件转换.打开 (.内容, 临时文件)
    .如果 (文件转换.转换 (.内容))
        信息框 (“文件转换完成!”, #信息图标, “信息”)
    .否则
        信息框 (“转换失败!”, #信息图标, “提示”)
    .如果结束
    
.如果结束


.子程序 _按钮3_被单击, 空白型, , 
.如果真 (文件是否存在 (相加 (.内容, “.bak”)))
    .如果真 (文件是否存在 (.内容))
        删除文件 (.内容)
    .如果真结束
    文件更名 (相加 (.内容, “.bak”), .内容)
.如果真结束


.子程序 _按钮4_被单击, 空白型, , 
.局部变量 临时字节集, 字节集, , , 

赋值 (临时字节集, 到字节集 (.内容))
 ' 临时字节集 ＝ #测试文本1

赋值 (., “”)
超级编辑框_加入内容 (相加 (“原始数据:{”, 字节集取文本 (临时字节集), “}”, #换行符), #黑色) ' 显示原始数据

超级编辑框_加入内容 (相加 (取重复文本 (40, “=”), #换行符), #黑色)

赋值 (临时字节集, 未知支持库函数_0 (临时字节集, #, .内容, )) ' 用编码转换测试

超级编辑框_加入内容 (相加 (“编码转换:[”, #, “ --> ”, .内容, “]:”, #换行符), #蓝色)
超级编辑框_加入内容 (相加 (取重复文本 (40, “-”), #换行符), #黑色)
超级编辑框_加入内容 (相加 (“字节集:”, 到文本 (取字节集长度 (临时字节集)), “{”, 字节集取文本 (临时字节集), “}”, #换行符), #绿色) ' 显示编码转换

超级编辑框_加入内容 (相加 (取重复文本 (40, “=”), #换行符), #黑色)

赋值 (临时字节集, 到宽字符数据 (临时字节集, .取项目数值 (.现行选中项))) ' 用A2W测试
超级编辑框_加入内容 (相加 (“A2W:[”, .内容, “ --> ”, #, “]:”, #换行符), #红色)
超级编辑框_加入内容 (相加 (取重复文本 (40, “-”), #换行符), #黑色)
超级编辑框_加入内容 (相加 (“字节集:”, 到文本 (取字节集长度 (临时字节集)), “{”, 字节集取文本 (临时字节集), “}”, #换行符), #绿色) ' 显示A2W

超级编辑框_加入内容 (相加 (取重复文本 (40, “=”), #换行符), #黑色)
超级编辑框_加入内容 (相加 (“结果:”, #换行符), #黑色)
超级编辑框_加入内容 (相加 (取重复文本 (40, “-”), #换行符), #黑色)

超级编辑框_加入内容 (相加 (“编码转换:[”, #, “ --> ”, #, “]:”, #换行符), #蓝色)
超级编辑框_加入内容 (相加 (到文本 (未知支持库函数_0 (临时字节集, #, #, )), #换行符), #绿色) ' 用编码转换还原

超级编辑框_加入内容 (相加 (取重复文本 (40, “-”), #换行符), #黑色)

赋值 (临时字节集, 到多字节数据 (临时字节集, #CP_OEMCP)) ' 用W2A还原
超级编辑框_加入内容 (相加 (“W2A:[”, .内容, “ --> ”, #, “]:”, #换行符), #红色)
超级编辑框_加入内容 (到文本 (临时字节集), #绿色)

.程序集 应用程序集, , , 

.子程序 创建新文件, 逻辑型, , 
.参数 文件名称, 文本型, , 

.如果真 (文件是否存在 (文件名称))
    删除文件 (文件名称)
.如果真结束
返回 (写到文件 (文件名称, 取空白字节集 (0)))

.子程序 字节集取文本, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 整数, 整数型, , , 

赋值 (长度, 取字节集长度 (字节集))
.计次循环首 (长度, 计次)
    赋值 (整数, 取代码 (到文本 (取字节集中间 (字节集, 计次, 1)), 1))
    .如果真 (小于 (整数, 0))
        赋值 (整数, 相加 (整数, 256))
    .如果真结束
    .判断开始 (等于 (计次, 1))
        赋值 (临时文本, 到文本 (整数))
    .默认
        赋值 (临时文本, 相加 (临时文本, “,”, 到文本 (整数)))
    .判断结束
    
.计次循环尾 ()
返回 (临时文本)

.子程序 读文件字节集, 字节集, , 
.参数 文件, 文本型, , 
.参数 长度, 整数型, , 
.参数 位置, 整数型, 可空, 

.局部变量 文件号, 整数型, , , 
.局部变量 数据, 字节集, , , 

赋值 (文件号, 打开文件 (文件, , ))
.如果真 (取反 (是否为空 (位置)))
    移动读写位置 (文件号, #文件首, 位置)
.如果真结束
赋值 (数据, 读入字节集 (文件号, 长度)) ' 两个字节
关闭文件 (文件号)
返回 (数据)

.子程序 取文件编码_文件, 文本型, , UTF-16BE,UTF-16LE,UTF-8,UTF-7。
.参数 文件路径, 文本型, , 
.参数 头字节数, 整数型, 参考, 
.参数 判断长度, 整数型, 可空, UTF-7不大于127，如有这种编码的文件，不妨多取一些字节集在此判断,默认：10

.局部变量 数据, 字节集, , , 

.如果真 (是否为空 (判断长度))
    赋值 (判断长度, 10) ' 10个字节
.如果真结束
赋值 (数据, 读文件字节集 (文件路径, 判断长度))
返回 (取文件编码_字节集 (数据, 头字节数))

.子程序 取文件编码_字节集, 文本型, , 
.参数 有头数据有效, 字节集, , 
.参数 头字节数, 整数型, 参考, 

.局部变量 数据, 字节集, , , 
.局部变量 整数, 整数型, , , 
.局部变量 计次, 整数型, , , 

 ' UTF-16识别过程
赋值 (头字节数, 2)
赋值 (数据, 取字节集左边 (有头数据有效, 头字节数))
.判断开始 (等于 (数据, { 255, 254 })) ' FF,FE
    返回 (#)
.判断 (等于 (数据, { 254, 255 })) ' FE,FF
    返回 (#)
.默认
    
.判断结束

 ' UTF-8识别过程
赋值 (头字节数, 3)
赋值 (数据, 取字节集左边 (有头数据有效, 头字节数))
.判断开始 (等于 (数据, { 239, 187, 191 })) ' EF,BB,BF
    返回 (#)
.默认
    
.判断结束

 ' UTF-7识别过程
赋值 (头字节数, 0)
.计次循环首 (取字节集长度 (有头数据有效), 计次)
    赋值 (整数, 取代码 (到文本 (取字节集中间 (有头数据有效, 计次, 1)), 1))
    .如果真 (大于 (整数, 127)) ' 不大于127，大于则返回 ANSI，如有这种编码的文件，不妨多取一些字节集在此判断
        返回 (“ANSI”)
    .如果真结束
    
.计次循环尾 ()
返回 (#)

.子程序 取文件编码头, 字节集, , 
.参数 文件编码, 文本型, , UTF-16BE,UTF-16LE,UTF-8,UTF-7

.判断开始 (等于 (到小写 (文件编码), “utf-8”))
    返回 ({ 239, 187, 191 }) ' EF,BB,BF
.判断 (等于 (到小写 (文件编码), “utf-16le”))
    返回 ({ 255, 254 }) ' FF,FE
.判断 (等于 (到小写 (文件编码), “utf-16be”))
    返回 ({ 254, 255 }) ' FE,FF
.默认
    返回 ({  })
.判断结束


.子程序 到多字节数据, 字节集, , 到指定
.参数 字节集, 字节集, , 
.参数 代码页, 整数型, 可空, #CP_ACP;#CP_OEMCP;#CP_MACCP;#CP_THREAD_ACP;#CP_SYMBOL;#CP_UTF7;#CP_UTF8

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 
.局部变量 字节长度, 整数型, , , 

.如果真 (是否为空 (代码页))
    赋值 (代码页, #CP_OEMCP)
.如果真结束
赋值 (长度, WideCharToMultiByte (代码页, 0, 字节集, -1, {  }, 0, 0, 0))
赋值 (返回值, 取空白字节集 (长度))
WideCharToMultiByte (代码页, 0, 字节集, 长度, 返回值, 长度, 0, 0)
返回 (返回值)

.子程序 到宽字符数据, 字节集, , 到unicode
.参数 字节集, 字节集, , 
.参数 代码页, 整数型, 可空, #CP_ACP;#CP_OEMCP;#CP_MACCP;#CP_THREAD_ACP;#CP_SYMBOL;#CP_UTF7;#CP_UTF8

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 
.局部变量 字节长度, 整数型, , , 

.如果真 (是否为空 (代码页))
    赋值 (代码页, #CP_ACP)
.如果真结束
赋值 (长度, 相乘 (MultiByteToWideChar (代码页, 0, 字节集, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (代码页, 0, 字节集, 取文本长度 (到文本 (字节集)), 返回值, 长度)
返回 (返回值)

.子程序 取代码页, 整数型, , 
.参数 编码, 文本型, , 

.局部变量 返回值, 整数型, , , 

.判断开始 (等于 (到小写 (编码), “utf-8”))
    返回 (#CP_UTF8)
.判断 (等于 (到小写 (编码), “utf-7”))
    返回 (#CP_UTF7)
.判断 (等于 (到小写 (编码), “ansi”))
    返回 (#CP_ACP)
.默认
    返回 (#CP_OEMCP)
.判断结束


.子程序 超级编辑框_加入内容, 空白型, , 
.参数 超级编辑框, 未知类型0x40006, , 
.参数 插入内容, 文本型, , 
.参数 颜色, 整数型, , 

.局部变量 数组, 整数型, , "11", 
.局部变量 字符格式, 未知类型0x40004, , , 

.如果真 (大于或等于 (取文本长度 (超级编辑框.), 10000))
    赋值 (超级编辑框., “”)
.如果真结束
赋值 (超级编辑框., 取文本长度 (超级编辑框.))
赋值 (字符格式., 颜色)
超级编辑框.未知支持库函数_10 (字符格式)
赋值 (超级编辑框., 插入内容)

.类模块 文件编码转换类, , , 

.程序集变量 转换前编码, 文本型, , , 
.程序集变量 文件, 文本型, , , 要转换的文件路径
.程序集变量 头字节, 整数型, , , 
.程序集变量 转换到, 文本型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 打开, 空白型, , 
.参数 文件路径, 文本型, , 
.参数 转换到文件, 文本型, , 

赋值 (文件, 文件路径)
赋值 (转换到, 转换到文件)

.子程序 取原编码, 文本型, , 
.如果真 (等于 (转换前编码, “”))
    赋值 (转换前编码, 取文件编码_文件 (文件, 头字节))
.如果真结束
返回 (转换前编码)

.子程序 取回文件, 文本型, , 
返回 (转换到)

.子程序 转换, 逻辑型, , 
.参数 转换为, 文本型, , 
.参数 块大小, 整数型, 可空, 每次读取文件数据的大小

.局部变量 文件号, 整数型, , , 
.局部变量 文件号2, 整数型, , , 
.局部变量 临时数据, 字节集, , , 可以省去变量，但这样看着明白。
.局部变量 匿名局部变量_267, 空白型, , , 
.局部变量 头字节数, 整数型, , , 
.局部变量 匿名局部变量_544, 空白型, , , 
.局部变量 数据长度, 整数型, , , 
.局部变量 读入长度, 整数型, , , 

.如果真 (等于 (转换前编码, “”))
    赋值 (转换前编码, 取文件编码_文件 (文件, 头字节数))
.如果真结束
.如果 (不等于 (转换前编码, 转换为))
    赋值 (文件号, 打开文件 (文件, #读入, #禁止写))
    .如果真 (等于 (文件号, 0))
        信息框 (相加 (“打开文件:”, #换行符, #换行符, 文件, #换行符, “失败!”), #错误图标, “错误”)
        返回 (假)
    .如果真结束
    
    .如果真 (是否为空 (块大小))
        赋值 (块大小, 相乘 (512, 1024)) ' 512KB。再大就没试过，不知道会不会出错
    .如果真结束
    
    .如果真 (取反 (创建新文件 (转换到))) ' 创建临时文件
        信息框 (相加 (“创建临时文件:”, #换行符, #换行符, 转换到, #换行符, “失败!”), #错误图标, “错误”)
        返回 (假)
    .如果真结束
    
    赋值 (文件号2, 打开文件 (转换到, #写出, #禁止写))
    .如果真 (等于 (文件号2, 0))
        信息框 (相加 (“打开临时文件:”, #换行符, #换行符, 转换到, #换行符, “失败!”), #错误图标, “错误”)
        关闭文件 (文件号)
        返回 (假)
    .如果真结束
    
    .如果真 (不等于 (头字节数, 0))
         ' 移动读写位置 (文件号, #文件首, 头字节数)  ' 跳过字节数
        读入字节集 (文件号, 头字节数) ' 两种方法这里都能用，这个还能看到读取的数据
    .如果真结束
    
    写出字节集 (文件号2, 取文件编码头 (转换为)) ' 写入文件编码头
    .循环判断首 ()
        赋值 (临时数据, 读入字节集 (文件号, 块大小)) ' 读取原数据
        赋值 (读入长度, 相加 (读入长度, 取字节集长度 (临时数据)))
        .如果 (等于 (转换前编码, “ANSI”))
            赋值 (临时数据, 到宽字符数据 (临时数据)) ' 要多一个过程，先转换成unicode
            赋值 (临时数据, 未知支持库函数_0 (临时数据, #, 转换为, )) ' 再所需编码
        .否则
            赋值 (临时数据, 未知支持库函数_0 (临时数据, 转换前编码, 转换为, )) ' 用易语言自己的编码转换，真出错也可能在这里，数据不能太长。
        .如果结束
        赋值 (数据长度, 相加 (数据长度, 取字节集长度 (临时数据)))
        
        .如果真 (取反 (写出字节集 (文件号2, 临时数据))) ' 写出到临时文件
            信息框 (相加 (“写出临时文件:”, #换行符, #换行符, 转换到, #换行符, “失败!”), #错误图标, “错误”)
            返回 (假)
        .如果真结束
        
    .循环判断尾 (取反 (是否在文件尾 (文件号, )))
    调试输出 (数据长度) ' 存放的文件长度，同一编码的文件转换，不知道为啥会多一些字节
    调试输出 (读入长度) ' 读入的文件长度
    关闭文件 (文件号)
    关闭文件 (文件号2)
    返回 (真)
.否则
    返回 (假)
.如果结束



 ' 不属于任何一个程序集、类模块的函数：
