 ' 文件类型：Windows窗口程序

 ' 程序名称：超级方块
 ' 程序描述：这是一个由吴涛编写的专业级俄罗斯方块游戏，共有 15 关，要打通这 15 关绝对不容易。它一定会让你流连忘返！另外：运行前请将想在游戏过程中听的所有 MIDI 音乐文件放到与此程序相同的目录中。
 ' 程序作者：吴涛
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 523
    高度 = 465
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 12632256 '  0xC0C0C0
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 背景图片, " ' 已保存到：D:\易语言学习\Data\超级方块.e\背景图片", , 
.图片 waix, " ' 已保存到：D:\易语言学习\Data\超级方块.e\waix", , 
.图片 heis, " ' 已保存到：D:\易语言学习\Data\超级方块.e\heis", , 
.图片 t33, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t33", , 
.图片 t32, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t32", , 
.图片 t31, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t31", , 
.图片 t30, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t30", , 
.图片 t29, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t29", , 以上修改过
.图片 t28, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t28", , 
.图片 t27, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t27", , 
.图片 t26, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t26", , 
.图片 t25, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t25", , 
.图片 t24, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t24", , 
.图片 t23, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t23", , 
.图片 t22, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t22", , 
.图片 t21, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t21", , 
.图片 t20, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t20", , 
.图片 t19, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t19", , 
.图片 t18, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t18", , 
.图片 t17, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t17", , 
.图片 t16, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t16", , 
.图片 t15, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t15", , 
.图片 t14, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t14", , 
.图片 t13, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t13", , 
.图片 t12, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t12", , 
.图片 t11, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t11", , 
.图片 t10, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t10", , 
.图片 t9, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t9", , 
.图片 t8, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t8", , 
.图片 t7, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t7", , 
.图片 t6, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t6", , 
.图片 t5, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t5", , 
.图片 t4, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t4", , 
.图片 t3, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t3", , 
.图片 t2, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t2", , 
.图片 t1, " ' 已保存到：D:\易语言学习\Data\超级方块.e\t1", , 
.图片 文本信息, " ' 已保存到：D:\易语言学习\Data\超级方块.e\文本信息", , 
.声音 消层, " ' 已保存到：D:\易语言学习\Data\超级方块.e\消层", , 
.声音 ding, " ' 已保存到：D:\易语言学习\Data\超级方块.e\ding", , 
.声音 过关, " ' 已保存到：D:\易语言学习\Data\超级方块.e\过关", , 
.声音 失败, " ' 已保存到：D:\易语言学习\Data\超级方块.e\失败", , 
.声音 ti, " ' 已保存到：D:\易语言学习\Data\超级方块.e\ti", , 


 ' 所需要的支持库：
 ' KRNLN d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




.全局变量 方块画板, 画板, , "8", 记录画各种块时所使用的画板
.全局变量 图片画板, 画板, , , 
.全局变量 xx, 空白型, , , 
.全局变量 ss, 空白型, , , 
.全局变量 nf, 空白型, , , 
.全局变量 sl, 空白型, , , 
.全局变量 sx, 空白型, , , 
.全局变量 sj, 空白型, , , 

.窗口程序集 启动窗口程序集, , , 

.程序集变量 匿名程序集变量_162, 空白型, , , -- 下面的容器记录初始数据
.程序集变量 块数据, 字节集, , , 尺寸为7X4X4，分别记录7种块的4种位置数据
.程序集变量 匿名程序集变量_149, 空白型, , , -- 下面的容器记录当前游戏状态
.程序集变量 当前关, 整数型, , , 0 为第 1 关，依此类推
.程序集变量 总分, 整数型, , , 当前所得总分
.程序集变量 过关还差分数, 整数型, , , 过当前关还差的分数
.程序集变量 匿名程序集变量_157, 空白型, , , -- 下面的容器记录程序数据
.程序集变量 游戏区堆积块, 字节型, , "20,10", 高 20 ，宽 10 。
.程序集变量 下落块, 整数型, , , 0 - 28 。空块、7 X 4种块状态
.程序集变量 下落水平位置, 整数型, , , 当前水平下落位置
.程序集变量 下落垂直位置, 整数型, , , 当前垂直下落位置
.程序集变量 即将下落块, 整数型, , , 0 - 28 。 下一个即将下落的块。
.程序集变量 暂停, 逻辑型, , , 游戏是否被暂停。
.程序集变量 音乐数组1, 文本型, , "0", 所有在当前目录下找到的 mp3 文件
.程序集变量 音乐数组, 文本型, , "0", 所有在当前目录下找到的 mp3 文件
.程序集变量 音乐暂停, 逻辑型, , , 音乐是否被暂停。
.程序集变量 名, 文本型, , , 
.程序集变量 tx, 整数型, , , 
.程序集变量 ttx, 字节集, , "33", 
.程序集变量 匿名程序集变量_885, 空白型, , , 
.程序集变量 文本内容, 文本型, , , 
.程序集变量 结束位置, 整数型, , , 
.程序集变量 循环次数, 整数型, , , 
.程序集变量 循环变量, 整数型, , , 
.程序集变量 左符号, 文本型, , , 
.程序集变量 右符号, 文本型, , , 
.程序集变量 匿名程序集变量_879, 空白型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 xl, 空白型, , , 


赋值 (sj, 取启动时间 ())
_启动窗口.置外形图片 (#waix, #白色)
赋值 (., 相加 (#换行符, #换行符, “  这个小小软件是由小龚设计、编译的。”, #换行符, “  左右光标键水平移动方块，下光标键加速下落，上光标键翻转，下翻页键跳到下一关， 空格键暂停，回车键开关音乐。”))
连续赋值 (#背景图片, ., ., ., ., ., ., ., .) ' 添加底图。
赋值 (_启动窗口., #waix)
赋值 (方块画板 [1], )
赋值 (方块画板 [2], )
赋值 (方块画板 [3], )
赋值 (方块画板 [4], )
赋值 (方块画板 [5], )
赋值 (方块画板 [6], )
赋值 (方块画板 [7], )
赋值 (方块画板 [8], )

赋值 (ttx [1], #t1)
赋值 (ttx [2], #t2)
赋值 (ttx [3], #t3)
赋值 (ttx [4], #t4)
赋值 (ttx [5], #t5)
赋值 (ttx [6], #t6)
赋值 (ttx [7], #t7)
赋值 (ttx [8], #t8)
赋值 (ttx [9], #t9)
赋值 (ttx [10], #t10)
赋值 (ttx [11], #t11)
赋值 (ttx [12], #t12)
赋值 (ttx [13], #t13)
赋值 (ttx [14], #t14)
赋值 (ttx [15], #t15)
赋值 (ttx [16], #t16)
赋值 (ttx [17], #t17)
赋值 (ttx [18], #t18)
赋值 (ttx [19], #t19)
赋值 (ttx [20], #t20)
赋值 (ttx [21], #t21)
赋值 (ttx [22], #t22)
赋值 (ttx [23], #t23)
赋值 (ttx [24], #t24)
赋值 (ttx [25], #t25)
赋值 (ttx [26], #t26)
赋值 (ttx [27], #t27)
赋值 (ttx [28], #t28)
赋值 (ttx [29], #t29)
赋值 (ttx [30], #t30)
赋值 (ttx [31], #t31)
赋值 (ttx [32], #t32)
赋值 (ttx [33], #t33)


置随机数种子 (取启动时间 ())
初始化块数据 (块数据)
赋值 (., #背景图片)
赋值 (_启动窗口., 真)
赋值 (., #背景图片)
赋值 (., 真)
wenz ()
赋值 (nf, 到数值 (相加 (到文本 (到数值 (取年份 (取文件时间 (“c:\cjfk”)))), 取文本右边 (相加 (“0”, 到文本 (到数值 (取月份 (取文件时间 (“c:\cjfk”))))), 2), 取文本右边 (相加 (“0”, 到文本 (到数值 (取日 (取文件时间 (“c:\cjfk”))))), 2))))
.如果 ()

.子程序 搜寻, 空白型, , 
.参数 目录, 文本型, , 

.局部变量 音乐文件名, 文本型, , , 

.如果真 (不等于 (取文本右边 (目录, 1), “\”))
    赋值 (目录, 相加 (目录, “\”))
.如果真结束
赋值 (音乐文件名, 寻找文件 (相加 (目录, “*.mp3”), ))
.判断循环首 (不等于 (音乐文件名, “”))
    处理事件 ()
    赋值 (., 相加 (目录, 音乐文件名, #换行符, .))
    加入成员 (音乐数组, 相加 (目录, 音乐文件名))
    赋值 (音乐文件名, 寻找文件 ())
.判断循环尾 ()
赋值 (音乐文件名, 寻找文件 (相加 (目录, “*.*”), #子目录))
.判断循环首 (不等于 (音乐文件名, “”))
    处理事件 ()
    .如果真 (不等于 (取文本左边 (音乐文件名, 1), “.”))
        搜寻 (相加 (目录, 音乐文件名))
    .如果真结束
    赋值 (音乐文件名, 寻找文件 (#子目录))
.判断循环尾 ()


.子程序 _图形按钮1_被单击, 空白型, , 
赋值 (总分, 0)
赋值 (., “ 总分： 0”)
赋值 (音乐数组1, 音乐数组)
.如果真 (并且 (大于 (取数组成员数 (音乐数组), 0), 等于 (音乐暂停, 假)))
    .如果真 ()

.子程序 进入游戏指定关, 空白型, , 
.参数 欲进入关, 整数型, , 

.局部变量 垂直位置, 空白型, , , 
.局部变量 水平位置, 空白型, , , 
.局部变量 初始堆积层数, 空白型, , , 
.局部变量 容器1, 空白型, , , 

检查 (并且 (大于或等于 (欲进入关, 0), 小于 (欲进入关, 15)))
赋值 (暂停, 假)
置随机数种子 ()
赋值 (当前关, 欲进入关)
赋值 (过关还差分数, 相加 (相乘 (欲进入关, 500), 500)) ' 过关分数
赋值 (., 相减 (500, 相乘 (欲进入关, 25))) ' 下落速度
赋值 (., 相加 (“第”, 数值到大写 (相加 (当前关, 1), 真), “关”))
赋值 (., 相加 (“ 过关还差 ”, 到文本 (过关还差分数), “ 分”))
数组清零 (游戏区堆积块) ' 将所有现有堆积块清除
清除 ()
赋值 (初始堆积层数, 整除 (欲进入关, 2)) ' 根据当前关来设置初始堆积块。
.变量循环首 (相减 (21, 初始堆积层数), 20, 1, 垂直位置)
    .计次循环首 (10, 水平位置)
        .如果真 (并且 (不等于 (水平位置, 垂直位置), 等于 (取随机数 (0, 2), 0)))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 1)
            画方块 (1, 相乘 (相减 (水平位置, 1), 20), 相乘 (相减 (垂直位置, 1), 20), 真)
        .如果真结束
        
    .计次循环尾 ()
.变量循环尾 ()
赋值 (即将下落块, 0)
准备下落 ()
获取焦点 () ' 将输入焦点转移到游戏区画板。

.子程序 准备下落, 空白型, , 
.局部变量 偏移值, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 
.局部变量 水平位置, 空白型, , , 

.如果真 (等于 (ss, 1))
    特殊消除 ()
    赋值 (ss, 0)
    赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
.如果真结束
.如果真 (不等于 (即将下落块, 0))
    赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
.如果真结束
赋值 (下落块, 选择 (不等于 (即将下落块, 0), 即将下落块, 相加 (相乘 (取随机数 (0, 6), 4), 1))) ' 取得当前下落块。
赋值 (即将下落块, 相加 (相乘 (取随机数 (0, 6), 4), 1)) ' 准备即将下落块。

赋值 (下落垂直位置, 1) ' 初始下落位置
赋值 (下落水平位置, 4)
 ' 查看是否还可以下落。
赋值 (偏移值, 相加 (相乘 (相减 (下落块, 1), 16), 1))
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [偏移值], 0))
            .如果真 (不等于 (游戏区堆积块 [垂直位置] [水平位置], 0))
                 ' 如果不能下落则说明已经堆满。
                播放音乐 (#失败, )
                赋值 (., 0)
                20.定位写出 (180, “Game  Over!”)
                获取焦点 ()
                返回 ()
            .如果真结束
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 1)
        .如果真结束
        赋值 (偏移值, 相加 (偏移值, 1))
    .变量循环尾 ()
.变量循环尾 ()
画方块 (下落块, 60, 0, 假)
重画 ()
赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)


.子程序 _图形按钮2_被单击, 空白型, , 
销毁 ()

.子程序 _提示画板_绘画, 空白型, , 
.参数 需重画区左边, 整数型, , 
.参数 需重画区顶边, 整数型, , 
.参数 需重画区右边, 整数型, , 
.参数 需重画区底边, 整数型, , 

 ' 在提示画板中画出即将下落块。
.如果真 (不等于 (即将下落块, 0))
    .如果 (等于 (即将下落块, 25))
        .如果 (等于 (取随机数 (0, 1), 1))
            赋值 (图片画板., 方块画板 [8].)
            赋值 (ss, 2)
        .否则
            
        .如果结束
        
    .否则
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果结束
    
    画方块 (即将下落块, 40, 选择 (等于 (即将下落块, 1), 0, 20))
    
.如果真结束



.子程序 画方块, 空白型, , 
.参数 画板, 画板, , 
.参数 方块类型, 整数型, , 
.参数 绘画左边, 整数型, , 
.参数 绘画顶边, 整数型, , 
.参数 仅画单一方块, 逻辑型, 可空, 

.局部变量 偏移值, 整数型, , , 
.局部变量 水平位置, 整数型, , , 
.局部变量 垂直位置, 整数型, , , 
.局部变量 容器1, 空白型, , , 


.判断开始 (等于 (方块类型, 0)) ' 如果为空块，则返回。
    返回 ()
.默认
    赋值 (图片画板, 方块画板 [相加 (求余数 (当前关, 7), 1)]) ' 取得画当前关的块的画板。
    .如果 (等于 (仅画单一方块, 真))
        图片画板.复制 (0, 0, 20, 20, 画板, 绘画左边, 绘画顶边, )
    .否则
        赋值 (偏移值, 相加 (相乘 (相减 (方块类型, 1), 16), 1))
        .计次循环首 (4, 垂直位置)
            .计次循环首 (4, 水平位置)
                .如果真 (不等于 (块数据 [偏移值], 0))
                    图片画板.复制 (0, 0, 20, 20, 画板, 相加 (绘画左边, 相乘 (相减 (水平位置, 1), 20)), 相加 (绘画顶边, 相乘 (相减 (垂直位置, 1), 20)), )
                .如果真结束
                赋值 (偏移值, 相加 (偏移值, 1))
            .计次循环尾 ()
        .计次循环尾 ()
    .如果结束
    
.判断结束


.子程序 消除整层, 逻辑型, , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 
.局部变量 消除层数, 空白型, , , 
.局部变量 容器1, 空白型, , , 
.局部变量 容器2, 空白型, , , 
.局部变量 容器3, 空白型, , , 

赋值 (垂直位置, 相加 (下落垂直位置, 3))
.如果真 (大于 (垂直位置, 20))
    赋值 (垂直位置, 20)
.如果真结束
赋值 (容器3, 下落垂直位置)
.判断循环首 (大于或等于 (垂直位置, 容器3))
    .计次循环首 (10, 水平位置)
        .如果真 (等于 (游戏区堆积块 [垂直位置] [水平位置], 0))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果 (大于 (水平位置, 10)) ' 此层是否被堆满
        赋值 (消除层数, 相加 (消除层数, 1))
        0.复制 (0, 200, 相乘 (相减 (垂直位置, 1), 20), , 0, 20, ) ' 下移上面的所有层。
        播放音乐 (#消层, )
        .计次循环首 (10, 容器2) ' 清除顶层。
            .如果真 (不等于 (游戏区堆积块 [1] [容器2], 0))
                相乘 (相减 (容器2, 1), 20).填充矩形 (0, 相加 (相乘 (容器2, 20), 1), 21)
            .如果真结束
            
        .计次循环尾 ()
        .变量循环首 (相减 (垂直位置, 1), 1, -1, 容器1) ' 下移上面层的数据。
            .计次循环首 (10, 容器2)
                赋值 (游戏区堆积块 [相加 (容器1, 1)] [容器2], 游戏区堆积块 [容器1] [容器2])
            .计次循环尾 ()
        .变量循环尾 ()
        .计次循环首 (10, 容器2) ' 清除顶层的数据。
            赋值 (游戏区堆积块 [1] [容器2], 0)
        .计次循环尾 ()
        赋值 (容器3, 相加 (容器3, 1)) ' 下移目的层
    .否则
        赋值 (垂直位置, 相减 (垂直位置, 1))
    .如果结束
    
.判断循环尾 ()
 ' 根据一次消除层的数目来给出不同的分数。
.如果真 (等于 (消除层数, 0))
    返回 (假)
.如果真结束
.判断开始 (等于 (消除层数, 1))
    赋值 (容器1, 10)
.判断 (等于 (消除层数, 2))
    赋值 (容器1, 40)
.判断 (等于 (消除层数, 3))
    赋值 (容器1, 80)
.默认
    赋值 (容器1, 200)
.判断结束
赋值 (总分, 相加 (总分, 容器1))
赋值 (., 相加 (“ 总分： ”, 到文本 (总分)))
赋值 (过关还差分数, 相减 (过关还差分数, 容器1))
.如果 (小于或等于 (过关还差分数, 0)) ' 是否已经过关
    .如果 (等于 (当前关, 14)) ' 是否为最后一关
        赋值 (., 0)
        0.定位写出 (180, “恭喜你全部通关！”)
        赋值 (., 真)
        刷新显示 ()
        延时 (3000)
        赋值 (., 假)
        获取焦点 ()
    .否则
         ' 寻找有块的最顶层
        .计次循环首 (20, 垂直位置)
            .计次循环首 (10, 水平位置)
                .如果真 (不等于 (游戏区堆积块 [垂直位置] [水平位置], 0))
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (小于或等于 (水平位置, 10))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
         ' 动态消层，表示过关。
        .变量循环首 (20, 垂直位置, -1, 容器1)
            0.复制 (0, 200, 380, , 0, 20, )
            延时 (50)
        .变量循环尾 ()
        延时 (500)
        播放音乐 (#过关, )
         ' 本关已过
        进入游戏指定关 (相加 (当前关, 1)) ' 进入下一关
    .如果结束
    返回 (真)
.否则
    赋值 (., 相加 (“ 过关还差 ”, 到文本 (过关还差分数), “ 分”))
.如果结束
返回 (假)

.子程序 _下落时钟_周期事件, 空白型, , 
.局部变量 偏移值1, 空白型, , , 
.局部变量 偏移值2, 空白型, , , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 

赋值 (., 相加 (“玩了”, 到文本 (取整 (相除 (相减 (取启动时间 (), sj), 1000, 60))), “分钟”))
.如果 (等于 (下落块, 25))
    .如果 (等于 (ss, 2))
        赋值 (ss, 1)
        播放音乐 (#ti, )
        赋值 (图片画板., 方块画板 [8].)
        赋值 (图片画板., 方块画板 [8].)
        赋值 (图片画板., 方块画板 [8].)
    .否则
        
    .如果结束
    
.否则
    赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
.如果结束

.如果真 (或者 (等于 (暂停, 真), 等于 (下落块, 0)))
    返回 ()
.如果真结束
赋值 (偏移值2, 相加 (相乘 (相减 (下落块, 1), 16), 1))
赋值 (偏移值1, 相加 (偏移值2, 16))
.计次循环首 (4, 水平位置)
    .计次循环首 (4, 垂直位置)
        .如果真 (不等于 (块数据 [相减 (偏移值1, 相乘 (垂直位置, 4))], 0))
            赋值 (垂直位置, 相减 (5, 垂直位置))
            .如果真 (或者 (大于 (相加 (下落垂直位置, 垂直位置), 20), 不等于 (游戏区堆积块 [相加 (下落垂直位置, 垂直位置)] [相减 (相加 (下落水平位置, 水平位置), 1)], 0)))
                .如果真 (等于 (消除整层 (), 假))
                    赋值 (下落块, 0)
                    准备下落 ()
                .如果真结束
                返回 ()
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    赋值 (偏移值1, 相加 (偏移值1, 1))
.计次循环尾 ()
赋值 (偏移值1, 偏移值2)
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [偏移值1], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 0)
            .如果真 (或者 (等于 (垂直位置, 下落垂直位置), 等于 (块数据 [相减 (偏移值1, 4)], 0)))
                相乘 (相减 (水平位置, 1), 20).填充矩形 (相乘 (相减 (垂直位置, 1), 20), 相加 (相乘 (水平位置, 20), 1), 相加 (相乘 (垂直位置, 20), 1))
            .如果真结束
            
        .如果真结束
        赋值 (偏移值1, 相加 (偏移值1, 1))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (下落垂直位置, 相加 (下落垂直位置, 1))
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [偏移值2], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 1)
            .如果真 (或者 (等于 (垂直位置, 相加 (下落垂直位置, 3)), 等于 (块数据 [相加 (偏移值2, 4)], 0)))
                画方块 (下落块, 相乘 (相减 (水平位置, 1), 20), 相乘 (相减 (垂直位置, 1), 20), 真)
            .如果真结束
            
        .如果真结束
        赋值 (偏移值2, 相加 (偏移值2, 1))
    .变量循环尾 ()
.变量循环尾 ()



.子程序 _游戏区画板_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #左光标键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    .如果真 (等于 (暂停, 假))
        左移 ()
    .如果真结束
    
.判断 (等于 (键代码, #右光标键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    
    .如果真 (等于 (暂停, 假))
        右移 ()
    .如果真结束
    
.判断 (等于 (键代码, #上光标键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    
    .如果真 (等于 (暂停, 假))
        翻转 ()
    .如果真结束
    
.判断 (等于 (键代码, #下光标键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    .如果真 (大于 (., 0))
        _下落时钟_周期事件 ()
    .如果真结束
    
.判断 (等于 (键代码, #PageDown键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    .如果真 (小于 (当前关, 14))
        进入游戏指定关 (相加 (当前关, 1))
    .如果真结束
    
.判断 (等于 (键代码, #回车键))
    .如果真 (并且 (不等于 (ss, 1), 不等于 (即将下落块, 0)))
        赋值 (图片画板., 方块画板 [取随机数 (1, 7)].)
    .如果真结束
    .如果真 (大于 (取数组成员数 (音乐数组), 0))
        赋值 (音乐暂停, 取反 (音乐暂停))
        .如果 (等于 (音乐暂停, 真))
            停止播放 ()
        .否则
            赋值 (音乐数组1, 音乐数组)
            置随机数种子 (取启动时间 ())
            删除成员 (音乐数组1, 1, 取随机数 (1, 取数组成员数 (音乐数组)))
            播放MP3 (-1, 音乐数组1) ' 如果找到了音乐文件，则播放。
            
        .如果结束
        
    .如果真结束
    
.判断 (等于 (键代码, #空格键))
    赋值 (暂停, 取反 (暂停))
.默认
    
.判断结束
.判断开始 (等于 (键代码, #Q键))
    特殊消除 ()
.默认
    
.判断结束
.判断开始 (等于 (键代码, #A键))
    _时钟1_周期事件 ()
.默认
    
.判断结束



.子程序 翻转, 空白型, , 
.局部变量 新偏移值, 空白型, , , 
.局部变量 新下落块, 空白型, , , 
.局部变量 偏移值1, 空白型, , , 
.局部变量 偏移值2, 空白型, , , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 

赋值 (新下落块, 下落块)
赋值 (新偏移值, 相加 (相乘 (相减 (新下落块, 1), 16), 1))
.循环判断首 ()
    赋值 (新下落块, 相加 (新下落块, 1))
    赋值 (新偏移值, 相加 (新偏移值, 16))
    .如果真 (等于 (求余数 (新下落块, 4), 1))
        赋值 (新下落块, 相减 (新下落块, 4))
        赋值 (新偏移值, 相减 (新偏移值, 64))
    .如果真结束
    
.循环判断尾 (等于 (块数据 [新偏移值], 255))
.如果真 (等于 (新下落块, 下落块))
    返回 ()
.如果真结束
赋值 (偏移值1, 相加 (相乘 (相减 (下落块, 1), 16), 1))
赋值 (偏移值2, 偏移值1)
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [偏移值1], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 0)
            相乘 (相减 (水平位置, 1), 20).填充矩形 (相乘 (相减 (垂直位置, 1), 20), 相加 (相乘 (水平位置, 20), 1), 相加 (相乘 (垂直位置, 20), 1))
        .如果真结束
        赋值 (偏移值1, 相加 (偏移值1, 1))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (偏移值1, 新偏移值)
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [偏移值1], 0))
            .如果真 (或者 (大于 (垂直位置, 20), 大于 (水平位置, 10), 不等于 (游戏区堆积块 [垂直位置] [水平位置], 0)))
                赋值 (新偏移值, 偏移值2)
                赋值 (新下落块, 下落块)
                跳出循环 ()
            .如果真结束
            
        .如果真结束
        赋值 (偏移值1, 相加 (偏移值1, 1))
    .变量循环尾 ()
    .如果真 (等于 (新下落块, 下落块))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
    .变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
        .如果真 (不等于 (块数据 [新偏移值], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 新下落块)
            画方块 (新下落块, 相乘 (相减 (水平位置, 1), 20), 相乘 (相减 (垂直位置, 1), 20), 真)
        .如果真结束
        赋值 (新偏移值, 相加 (新偏移值, 1))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (下落块, 新下落块)


.子程序 左移, 空白型, , 
.局部变量 偏移值1, 空白型, , , 
.局部变量 偏移值2, 空白型, , , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 

.如果真 (等于 (下落水平位置, 1))
    返回 ()
.如果真结束
赋值 (偏移值1, 相加 (相乘 (相减 (下落块, 1), 16), 1))
赋值 (偏移值2, 偏移值1)
.计次循环首 (4, 垂直位置)
    .计次循环首 (4, 水平位置)
        .如果真 (不等于 (块数据 [相减 (相加 (偏移值1, 水平位置), 1)], 0))
            .如果真 (不等于 (游戏区堆积块 [相减 (相加 (下落垂直位置, 垂直位置), 1)] [相减 (相加 (下落水平位置, 水平位置), 2)], 0))
                返回 ()
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    赋值 (偏移值1, 相加 (偏移值1, 4))
.计次循环尾 ()
赋值 (偏移值1, 偏移值2)
.变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
    .变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
        .如果真 (不等于 (块数据 [相加 (偏移值1, 相乘 (相减 (垂直位置, 下落垂直位置), 4))], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 0)
            .如果真 (或者 (等于 (水平位置, 相加 (下落水平位置, 3)), 等于 (块数据 [相加 (偏移值1, 相乘 (相减 (垂直位置, 下落垂直位置), 4), 1)], 0)))
                相乘 (相减 (水平位置, 1), 20).填充矩形 (相乘 (相减 (垂直位置, 1), 20), 相加 (相乘 (水平位置, 20), 1), 相加 (相乘 (垂直位置, 20), 1))
            .如果真结束
            
        .如果真结束
        
    .变量循环尾 ()
    赋值 (偏移值1, 相加 (偏移值1, 1))
.变量循环尾 ()
赋值 (下落水平位置, 相减 (下落水平位置, 1))
.变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
    .变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
        .如果真 (不等于 (块数据 [相加 (偏移值2, 相乘 (相减 (垂直位置, 下落垂直位置), 4))], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 1)
            .如果真 (或者 (等于 (水平位置, 下落水平位置), 等于 (块数据 [相减 (相加 (偏移值2, 相乘 (相减 (垂直位置, 下落垂直位置), 4)), 1)], 0)))
                画方块 (下落块, 相乘 (相减 (水平位置, 1), 20), 相乘 (相减 (垂直位置, 1), 20), 真)
            .如果真结束
            
        .如果真结束
        
    .变量循环尾 ()
    赋值 (偏移值2, 相加 (偏移值2, 1))
.变量循环尾 ()

.子程序 右移, 空白型, , 
.局部变量 偏移值1, 空白型, , , 
.局部变量 偏移值2, 空白型, , , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 

.如果真 (等于 (下落水平位置, 10))
    返回 ()
.如果真结束
赋值 (偏移值1, 相加 (相乘 (相减 (下落块, 1), 16), 1))
赋值 (偏移值2, 偏移值1)
.计次循环首 (4, 垂直位置)
    .变量循环首 (4, 1, -1, 水平位置)
        .如果真 (不等于 (块数据 [相减 (相加 (偏移值1, 水平位置), 1)], 0))
            .如果真 (或者 (大于 (相加 (下落水平位置, 水平位置), 10), 不等于 (游戏区堆积块 [相减 (相加 (下落垂直位置, 垂直位置), 1)] [相加 (下落水平位置, 水平位置)], 0)))
                返回 ()
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    赋值 (偏移值1, 相加 (偏移值1, 4))
.计次循环尾 ()
赋值 (偏移值1, 偏移值2)
.变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
    .变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
        .如果真 (不等于 (块数据 [相加 (偏移值1, 相乘 (相减 (垂直位置, 下落垂直位置), 4))], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 0)
            .如果真 (或者 (等于 (水平位置, 下落水平位置), 等于 (块数据 [相减 (相加 (偏移值1, 相乘 (相减 (垂直位置, 下落垂直位置), 4)), 1)], 0)))
                相乘 (相减 (水平位置, 1), 20).填充矩形 (相乘 (相减 (垂直位置, 1), 20), 相加 (相乘 (水平位置, 20), 1), 相加 (相乘 (垂直位置, 20), 1))
            .如果真结束
            
        .如果真结束
        
    .变量循环尾 ()
    赋值 (偏移值1, 相加 (偏移值1, 1))
.变量循环尾 ()
赋值 (下落水平位置, 相加 (下落水平位置, 1))
.变量循环首 (下落水平位置, 相加 (下落水平位置, 3), 1, 水平位置)
    .变量循环首 (下落垂直位置, 相加 (下落垂直位置, 3), 1, 垂直位置)
        .如果真 (不等于 (块数据 [相加 (偏移值2, 相乘 (相减 (垂直位置, 下落垂直位置), 4))], 0))
            赋值 (游戏区堆积块 [垂直位置] [水平位置], 1)
            .如果真 (或者 (等于 (水平位置, 相加 (下落水平位置, 3)), 等于 (块数据 [相加 (偏移值2, 相乘 (相减 (垂直位置, 下落垂直位置), 4), 1)], 0)))
                画方块 (下落块, 相乘 (相减 (水平位置, 1), 20), 相乘 (相减 (垂直位置, 1), 20), 真)
            .如果真结束
            
        .如果真结束
        
    .变量循环尾 ()
    赋值 (偏移值2, 相加 (偏移值2, 1))
.变量循环尾 ()


.子程序 特殊消除, 空白型, , 
.局部变量 水平位置, 空白型, , , 
.局部变量 垂直位置, 空白型, , , 
.局部变量 消除层数, 空白型, , , 
.局部变量 容器1, 空白型, , , 
.局部变量 容器2, 空白型, , , 
.局部变量 容器3, 空白型, , , 


赋值 (垂直位置, 相加 (下落垂直位置, 3))
.如果真 (大于 (垂直位置, 20))
    赋值 (垂直位置, 20)
.如果真结束
赋值 (容器3, 下落垂直位置)
.判断循环首 (大于或等于 (垂直位置, 容器3))
    .计次循环首 (10, 水平位置)
        .如果真 (等于 (游戏区堆积块 [垂直位置] [水平位置], 0))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    赋值 (消除层数, 相加 (消除层数, 1))
    0.复制 (0, 200, 相乘 (相减 (垂直位置, 1), 20), , 0, 20, ) ' 下移上面的所有层。
    播放音乐 (#消层, )
    .计次循环首 (10, 容器2) ' 清除顶层。
        .如果真 (不等于 (游戏区堆积块 [1] [容器2], 0))
            相乘 (相减 (容器2, 1), 20).填充矩形 (0, 相加 (相乘 (容器2, 20), 1), 21)
        .如果真结束
        
    .计次循环尾 ()
    .变量循环首 (相减 (垂直位置, 1), 1, -1, 容器1) ' 下移上面层的数据。
        .计次循环首 (10, 容器2)
            赋值 (游戏区堆积块 [相加 (容器1, 1)] [容器2], 游戏区堆积块 [容器1] [容器2])
        .计次循环尾 ()
    .变量循环尾 ()
    .计次循环首 (10, 容器2) ' 清除顶层的数据。
        赋值 (游戏区堆积块 [1] [容器2], 0)
    .计次循环尾 ()
    赋值 (容器3, 相加 (容器3, 1)) ' 下移目的层
    赋值 (垂直位置, 相减 (垂直位置, 1))
    
.判断循环尾 ()


.子程序 文章, 空白型, , 
.局部变量 匿名局部变量_855, 空白型, , , 以下是文章子程序变量
.局部变量 匿名局部变量_874, 空白型, , , 
.局部变量 上次位置, 整数型, , , 
.局部变量 换行位置, 整数型, , , 
.局部变量 wbxx, 文本型, , , 
.局部变量 abl, 整数型, , , 
.局部变量 bbl, 整数型, , , 
.局部变量 左符号次数, 整数型, , , 
.局部变量 右符号次数, 整数型, , , 
.局部变量 匿名局部变量_869, 空白型, , , 以上是文章子程序变量


 ' .如果 (等于 (tx, 0))
     ' .如果真 (等于 (文本内容, “”))
         ' 文本内容 ＝ 到文本 (ttx [取随机数 (1, 33)])
    .如果真结束
    
.否则
    
     ' 文本内容 ＝ 读入文本 (打开文件 (名, 3, 1), )
    
.如果结束
赋值 (文本内容, 到全角 (文本内容))
.判断循环首 (不等于 (寻找文本 (文本内容, #换行符, 换行位置, 假), -1))
    赋值 (换行位置, 寻找文本 (文本内容, #换行符, 换行位置, 假))
    赋值 (文本内容, 相加 (取文本左边 (文本内容, 相减 (换行位置, 1)), 取文本右边 (文本内容, 相减 (取文本长度 (文本内容), 换行位置, 1))))
.判断循环尾 ()

赋值 (上次位置, 结束位置)
赋值 (结束位置, 相加 (寻找文本 (文本内容, “。”, 上次位置, 假), 2))

.如果真 (并且 (小于 (寻找文本 (文本内容, “！”, 上次位置, 假), 结束位置), 大于 (寻找文本 (文本内容, “！”, 上次位置, 假), 上次位置)))
    赋值 (结束位置, 相加 (寻找文本 (文本内容, “！”, 上次位置, 假), 2))
.如果真结束
.如果真 (并且 (小于 (寻找文本 (文本内容, “？”, 上次位置, 假), 结束位置), 大于 (寻找文本 (文本内容, “？”, 上次位置, 假), 上次位置)))
    赋值 (结束位置, 相加 (寻找文本 (文本内容, “？”, 上次位置, 假), 2))
.如果真结束
.如果真 (并且 (小于 (寻找文本 (文本内容, “……”, 上次位置, 假), 结束位置), 大于 (寻找文本 (文本内容, “……”, 上次位置, 假), 上次位置)))
    赋值 (结束位置, 相加 (寻找文本 (文本内容, “……”, 上次位置, 假), 4))
.如果真结束
赋值 (循环次数, 1)
赋值 (wbxx, 到全角 (相加 (#左引号, #右引号, “〔〕〈〉《》「」『』〖〗【】（）［］｛｝‘’”)))

.循环判断首 ()
    赋值 (左符号, 取文本中间 (wbxx, 循环次数, 2))
    赋值 (右符号, 取文本中间 (wbxx, 相加 (循环次数, 2), 2))
    赋值 (循环次数, 相加 (循环次数, 4))
    
    赋值 (左符号次数, 0)
    赋值 (abl, 0)
    .判断循环首 (不等于 (寻找文本 (取文本中间 (文本内容, 上次位置, 相减 (结束位置, 上次位置)), 左符号, abl, 假), -1))
        赋值 (abl, 相加 (寻找文本 (取文本中间 (文本内容, 上次位置, 相减 (结束位置, 上次位置)), 左符号, abl, 假), 2))
        赋值 (左符号次数, 相加 (左符号次数, 1))
    .判断循环尾 ()
    
    赋值 (右符号次数, 0)
    赋值 (bbl, 0)
    .判断循环首 (不等于 (寻找文本 (取文本中间 (文本内容, 上次位置, 相减 (结束位置, 上次位置)), 右符号, bbl, 假), -1))
        赋值 (bbl, 相加 (寻找文本 (取文本中间 (文本内容, 上次位置, 相减 (结束位置, 上次位置)), 右符号, bbl, 假), 2))
        赋值 (右符号次数, 相加 (右符号次数, 1))
    .判断循环尾 ()
    
    .如果真 (并且 (不等于 (左符号次数, 0), 等于 (左符号次数, 右符号次数)))
        赋值 (结束位置, 相加 (上次位置, bbl, 1))
    .如果真结束
    
    赋值 (循环变量, 上次位置)
    .判断循环首 (并且 (不等于 (相减 (左符号次数, 右符号次数), 0), 大于 (左符号次数, 右符号次数)))
        
        .如果 (不等于 (寻找文本 (文本内容, 右符号, 循环变量, 假), -1))
            赋值 (右符号次数, 相加 (右符号次数, 1))
            赋值 (循环变量, 相加 (寻找文本 (文本内容, 右符号, 循环变量, 假), 2))
            赋值 (结束位置, 循环变量)
        .否则
            
        .如果结束
        
    .判断循环尾 ()
.循环判断尾 (小于 (循环次数, 46))
赋值 (., 取文本中间 (文本内容, 上次位置, 相减 (结束位置, 上次位置)))
.如果真 (大于 (相加 (上次位置, 3), 取文本长度 (文本内容)))
    赋值 (结束位置, 0)
    赋值 (上次位置, 0)
    赋值 (文本内容, “”)
    wenz ()
    文章 ()
.如果真结束


.子程序 _时钟1_周期事件, 空白型, , 
.如果真 (不等于 (即将下落块, 0))
    文章 ()
    赋值 (., 20000)
    处理事件 ()
.如果真结束


.子程序 wenz, 空白型, , 
写到文件 (相加 (取运行目录 (), “\1.txt”), #文本信息)
赋值 (文本内容, 读入文本 (打开文件 (相加 (取运行目录 (), “\1.txt”), 3, 1), ))


.程序集 程序集1, , , 

.子程序 初始化块数据, 空白型, , 
.参数 块数据, 字节集, 参考, 

 ' 下面的语句可以合并到一条语句中。数据分别记录每类块的 4 种 4 X 4 翻转结构。如果某种翻转结构数据以 255 开头，表示该结构不存在。
赋值 (块数据, { 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }) ' 竖条， 255 表示无此翻转状态。
赋值 (块数据, 相加 (块数据, { 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 })) ' 2 字形
赋值 (块数据, 相加 (块数据, { 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 })) ' 7 字形
赋值 (块数据, 相加 (块数据, { 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 })) ' 丁字形
赋值 (块数据, 相加 (块数据, { 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 })) ' 反 7 字形
赋值 (块数据, 相加 (块数据, { 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 })) ' 反 2 字形
赋值 (块数据, 相加 (块数据, { 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 })) ' 方块


 ' 不属于任何一个程序集、类模块的函数：
