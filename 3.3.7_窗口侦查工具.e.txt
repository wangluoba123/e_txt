 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 440
    高度 = 330
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “《易精经》例程－窗口侦查工具”
    帮助文件名 = “”



.图片 精确定位光标, " ' 已保存到：D:\易语言学习\Data\3.3.7_窗口侦查工具.e\精确定位光标", , 
.常量 WM_GETTEXT, "13", , 应用程序发送此消息来复制对应窗口的文本到缓冲区
.常量 WM_NCPAINT, "133", , 程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时；
.常量 WM_PAINT, "15", , 要求一个窗口重画自己
.常量 PS_SOLID, "0", , 
.常量 NULL_BRUSH, "5", , 
.常量 SW_HIDE, "0", , 
.常量 SW_SHOW, "5", , 
.常量 SW_SHOWNOACTIVATE, "4", , 
.常量 RDW_INVALIDATE, "1", , 
.常量 RDW_ERASE, "4", , 
.常量 RDW_FRAME, "1024", , 
.常量 HWND_BROADCAST, "65535", , 
.常量 COLOR_DESKTOP, "1", , 
.常量 RDW_ALLCHILDREN, "128", , 
.常量 R2_NOT, "6", , 
.常量 GWL_EXSTYLE, "-20", , 
.常量 GWL_HINSTANCE, "-6", , 
.常量 GWL_HWNDPARENT, "-8", , 
.常量 GWL_ID, "-12", , 
.常量 GWL_STYLE, "-16", , 
.常量 GWL_USERDATA, "-21", , 
.常量 GWL_WNDPROC, "-4", , 
.常量 GCL_CBCLSEXTRA, "-20", , 
.常量 GCL_CBWNDEXTRA, "-18", , 
.常量 GCL_CONVERSION, "1", , 
.常量 GCL_HBRBACKGROUND, "-10", , 
.常量 GCL_HCURSOR, "-12", , 
.常量 GCL_HICON, "-14", , 
.常量 GCL_HICONSM, "-34", , 
.常量 GCL_HMODULE, "-16", , 
.常量 GCL_MENUNAME, "-8", , 
.常量 GCL_STYLE, "-26", , 
.常量 GCL_WNDPROC, "-24", , 
.常量 GW_CHILD, "5", , 
.常量 GW_HWNDFIRST, "0", , 
.常量 GW_HWNDLAST, "1", , 
.常量 GW_HWNDNEXT, "2", , 
.常量 GW_HWNDPREV, "3", , 
.常量 GW_OWNER, "4", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 0 特殊功能支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一



 ' 所需要的模块
 ' 设置控件锚点 $anchors.ec


数据类型 POINTAPI, , 坐标;
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 

数据类型 RECT, , 矩形;
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 


.DLL命令 ReleaseCapture, 整数型, "user32", "ReleaseCapture", , 为当前的应用程序释放鼠标捕获　TRUE（非零）表示成功，零表示失败

.DLL命令 SetCapture, 整数型, "user32", "SetCapture", , 将鼠标捕获设置到指定的窗口。在鼠标按钮按下的时候，这个窗口会为当前应用程序或整个系统接收所有鼠标输入　之前拥有鼠标捕获的窗口的句柄
    .参数 窗口句柄, 整数型, , 

.DLL命令 SetCursor, 整数型, "user32", "SetCursor", , 将指定的鼠标指针设为当前指针　前一个指针的值
    .参数 指针句柄, 整数型, , 

.DLL命令 LoadCursorFromFile, 整数型, "user32", "LoadCursorFromFileA", , 在一个指针文件或一个动画指针文件（扩展名分别是.cur和.ani）的基础上创建一个指针　执行成功则返回指向指针的一个句柄，零表示失败。如果失败，会将GetLastError设置为常数ERROR_FILE_NOT_FOUND
    .参数 文件名, 文本型, , 包含指针的那个文件的名字;  

.DLL命令 GetCursorPos, 整数型, "user32", "GetCursorPos", , 获取鼠标指针的当前位置　非零表示成功，零表示失败。会设置GetLastError
    .参数 位置, POINTAPI, , POINTAPI，随同指针在屏幕像素坐标中的位置载入的一个结构;

.DLL命令 WindowFromPoint, 整数型, "user32", "WindowFromPoint", , 返回包含了指定点的窗口的句柄。忽略屏蔽、隐藏以及透明窗口　包含了指定点的窗口的句柄。如指定的点处没有窗口存在，则返回零
    .参数 xPoint, 整数型, , x点值
    .参数 yPoint, 整数型, , y点值;

.DLL命令 GetWindowRect, 整数型, "user32", "GetWindowRect", , 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 想获得范围矩形的那个窗口的句柄
    .参数 矩形区域, RECT, , RECT，屏幕坐标中随同窗口装载的矩形;  

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式　由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 CreatePen, 整数型, "gdi32", "CreatePen", , 用指定的样式、宽度和颜色创建一个画笔　如函数执行成功，就返回指向新画笔的一个句柄；否则返回零
    .参数 风格, 整数型, , 指定画笔样式，可以是下述常数之一;PS_SOLID：画笔画出的是实线;PS_DASH：画笔画出的是虚线（nWidth必须是1）;PS_DOT：画笔画出的是点线（nWidth必须是1）;PS_DASHDOT：画笔画出的是点划线（nWidth必须是1）;PS_DASHDOTDOT：画笔画出的是点-点-划线（nWidth必须是1）;PS_NULL：画笔不能画图;PS_INSIDEFRAME：画笔在由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框中画图。如指定的准确RGB颜色不存在，就进行抖动处理
    .参数 宽度, 整数型, , 以逻辑单位表示的画笔的宽度
    .参数 颜色, 整数型, , 画笔的RGB颜色;  

.DLL命令 GetDC, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景　指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;  

.DLL命令 SelectObject, 整数型, "gdi32", "SelectObject", , 每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。例如，当前选定的画笔决定了在设备场景中描绘的线段颜色及样式　与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。如选定的对象是一个区域（Region），结果就是下列常数之一：SIMPLEREGION， ;    COMPLEXREGION 或 NULLREGION 对区域进行描述， GDI_ERROR 表示出错
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄
    .参数 对象句柄, 整数型, , 一个画笔、位图、刷子、字体或区域的句柄;  

.DLL命令 GetWindowDC, 整数型, "user32", "GetWindowDC", , 获取整个窗口（包括边框、滚动条、标题栏、菜单等）的设备场景　执行成功为窗口设备场景，失败则为0
    .参数 窗口句柄, 整数型, , 将获取其设备场景的窗口;  

.DLL命令 DeleteObject, 整数型, "gdi32", "DeleteObject", , 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放　非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄;  

.DLL命令 Rectangle, 整数型, "gdi32", "Rectangle", , 用当前选定的画笔描绘矩形，并用当前选定的刷子进行填充　非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 左上角横坐标, 整数型, , 指定矩形左上角位置
    .参数 左上角纵坐标, 整数型, , 同上
    .参数 右下角横坐标, 整数型, , 指定矩形右下角位置
    .参数 右下角纵坐标, 整数型, , 同上;

.DLL命令 GetStockObject, 整数型, "gdi32", "GetStockObject", , 取得一个固有对象（Stock）。这是可由任何应用程序使用的windows标准对象之一　指向指定对象的一个句柄。零表示出错
    .参数 类型, 整数型, , 下述表格中定义的任何常数之一BLACK_BRUSH黑色刷子DKGRAY_BRUSH黑灰色刷子GRAY_BRUSH灰色刷子HOLLOW_BRUSH凹刷子LTGRAY_BRUSH浅灰色刷子NULL_BRUSH空刷子WHITE_BRUSH白色刷子BLACK_PEN黑色画笔NULL_PEN空画笔WHITE_PEN白色画笔ANSI_FIXED_FONT采用windows（ANSI）字符集的等宽字体ANSI_VAR_FONT采用windows（ANSI）字符集的不等宽字体DEVICE_DEFAULT_FONT设备使用的默认字体（NT）DEFAULT_GUI_FONT用户界面的默认字体，包括菜单和对话框字体（Windows 95）OEM_FIXED_FONTOEM字符集的固有字体SYSTEM_FONT屏幕系统字体。这是用于菜单、对话框等等的默认不等宽字体SYSTEM_FIXED_FONT屏幕系统字体。这是用于菜单、对话框等等的默认等宽字体（在windows 3.0之前使用）DEFAULT_PALETTE默认调色板;  

.DLL命令 ShowWindow, 整数型, "user32", "ShowWindow", , 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）　如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 nCmdShow, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;SW_HIDE：隐藏窗口，活动状态给令一个窗口;SW_MINIMIZE：最小化窗口，活动状态给令一个窗口;SW_RESTORE：用原来的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOW：用当前的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOWMAXIMIZED：最大化窗口，并将其激活;SW_SHOWMINIMIZED：最小化窗口，并将其激活;SW_SHOWMINNOACTIVE：最小化一个窗口，同时不改变活动窗口;SW_SHOWNA：用当前的大小和位置显示一个窗口，不改变活动窗口;SW_SHOWNOACTIVATE：用最近的大小和位置显示一个窗口，同时不改变活动窗口;SW_SHOWNORMAL：与SW_RESTORE相同;

.DLL命令 SetForegroundWindow, 整数型, "user32", "SetForegroundWindow", , 将窗口设为系统的前台窗口。这个函数可用于改变用户目前正在操作的应用程序　非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 

.DLL命令 RedrawWindow, 整数型, "user32", "RedrawWindow", , 根据fuRedraw旗标的设置，重画全部或部分窗口　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要重画的窗口的句柄。零表示更新桌面窗口
    .参数 矩形, 整数型, , RECT，窗口中需要重画的一个矩形区域
    .参数 区域, 整数型, , 一个“区”的句柄，这个区描述了要重画的窗口区域。“区”：Region
    .参数 清楚模式, 整数型, , 规定具体重画操作的旗标。下列常数可组合使用，从而进行复杂的重画行动;RDW_ERASE：重画前，先清除重画区域的背景。也必须指定RDW_INVALIDATE;RDW_FRAME：如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW_INVALIDATE;RDW_INTERNALPAINT：即使窗口并非无效，也向其投递一条WM_PAINT消息;RDW_INVALIDATE：禁用（屏蔽）重画区域;RDW_NOERASE：禁止删除重画区域的背景;RDW_NOFRAME：禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW_VALIDATE;RDW_NOINTERNALPAINT：禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息;RDW_VALIDATE：检验重画区域;RDW_ERASENOW：立即删除指定的重画区域;RDW_UPDATENOW：立即更新指定的重画区域;RDW_ALLCHILDREN：重画操作包括子窗口（前提是它们存在于重画区域）;RDW_NOCHILDREN：重画操作排除子窗口（前提是它们存在于重画区域）;  

.DLL命令 SetROP2, 整数型, "gdi32", "SetROP2", , 设置指定设备场景的绘图模式。与vb的DrawMode属性完全一致　如执行成功，返回前一个绘图模式；零表示出错
    .参数 设备场景, 整数型, , 
    .参数 光栅运算方式, 整数型, , 

.DLL命令 GetParent, 整数型, "user32", "GetParent", , 判断指定窗口的父窗口　父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄;

.DLL命令 GetWindowThreadProcessId, 整数型, "user32", "GetWindowThreadProcessId", ,  ;    获取与指定窗口关联在一起的一个进程和线程标识符　拥有窗口的线程的标识符
    .参数 hwnd, 整数型, , 指定一个变量，用于装载拥有那个窗口的一个进程的标识符
    .参数 lpdwProcessId, 整数型, 传址, 指定窗口句柄;

.DLL命令 GetCurrentProcessId, 整数型, "kernel32", "GetCurrentProcessId", , 获取当前进程一个唯一的标识符　当前的进程标识符

.DLL命令 DrawIcon, 整数型, "user32", "DrawIcon", , 在指定的位置画一个图标　非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景
    .参数 横坐标, 整数型, , 想描绘图标的位置（逻辑坐标）
    .参数 纵坐标, 整数型, , 同上
    .参数 图标句柄, 整数型, , 欲描绘图标的句柄;

.DLL命令 GetClassName, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 缓冲区, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 缓冲区长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 GetClientRect, 整数型, "user32", "GetClientRect", , 返回指定窗口客户区矩形的大小　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲计算大小的目标窗口
    .参数 矩形区域, RECT, , RECT，指定一个矩形，用客户区域的大小载入（以像素为单位）;  

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息　由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 GetClassLong, 整数型, "user32", "GetClassLongA", , 取得窗口类的一个Long变量条目　由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要为其获得类信息的窗口的句柄
    .参数 值, 整数型, , 欲取得的信息，可能是下述任何一个常数：（正数表示一个字节偏移，用于取得在额外字节中为这个类分配的类信息）;GCL_CBCLSEXTRA：这个类结构中分配的额外字节数;GCL_CBWNDEXTRA：窗口结构里为这个类中每个窗口分配的额外字节数;GCL_HBRBACKGROUND：描绘这个类每个窗口的背景时，使用的默认刷子的句柄;GCL_HCURSOR：指向这个类窗口默认光标的句柄;GCL_HICON：这个类中窗口默认图标的句柄;GCL_HICONSM：这个类的小图标;GCL_HMODULE：这个类的模块的句柄;GCL_MENUNAME：为类菜单取得名称或资源ID;GCL_STYLE：这个类的样式;GCL_WNDPROC：取得类窗口函数（该类窗口的默认窗口函数）的地址;

.DLL命令 GetWindow, 整数型, "user32", "GetWindow", , 获得一个窗口的句柄，该窗口与某源窗口有特定的关系　由wCmd决定的一个窗口的句柄。如没有找到相符窗口，或者遇到错误，则返回零值。会设置GetLastError
    .参数 源窗口, 整数型, , 源窗口
    .参数 关系, 整数型, , 指定结果窗口与源窗口的关系，它们建立在下述常数基础上：;GW_CHILD：寻找源窗口的第一个子窗口;GW_HWNDFIRST：为一个源子窗口寻找第一个兄弟（同级）窗口，或寻找第一个顶级窗口;GW_HWNDLAST：为一个源子窗口寻找最后一个兄弟（同级）窗口，或寻找最后一个顶级窗口;GW_HWNDNEXT：为源窗口寻找下一个兄弟窗口;GW_HWNDPREV：为源窗口寻找前一个兄弟窗口;GW_OWNER：寻找窗口的所有者;  

.DLL命令 LineTo, 整数型, "gdi32", "LineTo", , 用当前画笔画一条线，从当前位置连到一个指定的点。这个函数调用完毕，当前位置变成x,y点　非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 终点横坐标, 整数型, , 线段终点位置，采用逻辑坐标表示。这个点不会实际画出来；它不属于线段的一部分;  
    .参数 终点纵坐标, 整数型, , 同上;

.DLL命令 MoveToEx, 整数型, "gdi32", "MoveToEx", , 为指定的设备场景指定一个新的当前画笔位置。前一个位置保存在lpPoint中　非零表示成功，零表示失败
    .参数 设备场景, 整数型, , 指向一个设备场景的句柄
    .参数 横坐标, 整数型, , 采用逻辑坐标表示的新画笔位置
    .参数 纵坐标, 整数型, , 同上
    .参数 画笔位置, POINTAPI, , POINTAPI，用于保存前一个画笔位置。可以为NULL（将参数改为ByVal As 以传递一个空参数）;  

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", , 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）　执行成功为1，否则为0
    .参数 窗口句柄, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , 要释放的设备场景句柄;  

.DLL命令 IsWindowVisible, 整数型, "user32", "IsWindowVisible", , 判断窗口是否可见　如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄;  

.DLL命令 GetDesktopWindow, 整数型, "user32", "GetDesktopWindow", , 获得代表整个屏幕的一个窗口（桌面窗口）句柄　桌面窗口的句柄

.窗口程序集 _启动窗口程序集, , , 

.程序集变量 集上次窗口句柄, 整数型, , , 鼠标上次经过的窗口
.程序集变量 集已按下, 逻辑型, , , 鼠标是否已按下
.程序集变量 集图标句柄, 整数型, , , 要绘制的图标句柄
.程序集变量 集鼠标按下点, POINTAPI, , , 鼠标被按下时的位置，用来绘制连线
.程序集变量 集上次点, POINTAPI, , , 鼠标移动时上次的位置，用来清除上一次绘制的连线
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 以下四句要用到“设置控件锚点”模块，模块文件名：anchors.ec
设置控件锚点 (取窗口句柄 (), 假, 真, 真, 假)
设置控件锚点 (取窗口句柄 (), 真, 真, 真, 真)
设置控件锚点 (取窗口句柄 (), 真, 真, 真, 真)
设置控件锚点 (取窗口句柄 (), 假, 假, 真, 真)

赋值 (.图片, #精确定位光标)


.子程序 _图片框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 光标句柄, 整数型, , , 
.局部变量 文件名, 文本型, , , 

GetCursorPos (集鼠标按下点) ' 获取鼠标光标的位置
赋值 (集上次点, 集鼠标按下点)
赋值 (集已按下, 真)
赋值 (集上次窗口句柄, 0)

赋值 (.鼠标指针, #精确定位光标)
处理事件 () ' 要加一个处理事件，否则光标不会立即改变
 ' 以下是使用ＡＰＩ的方法设置鼠标光标
 ' 文件名 ＝ 取临时文件名 () ＋ “.cur”
 ' 写到文件 (文件名, #精确定位光标)
 ' 光标句柄 ＝ LoadCursorFromFile (文件名)
 ' SetCursor (光标句柄)
 ' 删除文件 (文件名)  ' 过河拆桥

SetCapture (取窗口句柄 ()) ' 捕获鼠标，使得鼠标移到控件外后仍然能响应移动和释放事件。
赋值 (.图片, {  }) ' 删除图片，模拟拖出光标效果


.子程序 _图片框_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

ReleaseCapture ()
赋值 (.鼠标指针, { 0 }) ' 恢复鼠标光标
屏幕画线 (集鼠标按下点, 集上次点)
画窗口矩形 (集上次窗口句柄)
赋值 (集已按下, 假)
 ' 当连线经过窗口时释放鼠标，有可能在编辑框内留下残线，使用下面这句确保清除之。
RedrawWindow (_启动窗口.取窗口句柄 (), 0, 0, 位或 (#RDW_ERASE, #RDW_INVALIDATE, #RDW_ALLCHILDREN))
赋值 (.图片, #精确定位光标)


.子程序 _图片框_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 光标位置, POINTAPI, , , 
.局部变量 窗口句柄, 整数型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 窗口文本, 文本型, , , 
.局部变量 窗口矩形, RECT, , , 
.局部变量 窗口线程号, 整数型, , , 
.局部变量 窗口进程号, 整数型, , , 
.局部变量 菜单名地址, 整数型, , , 

.如果真 (等于 (集已按下, 假))
    返回 ()
.如果真结束
GetCursorPos (光标位置) ' 获取鼠标光标在屏幕的位置
屏幕画线 (集鼠标按下点, 集上次点) ' 清除原来的连线
屏幕画线 (集鼠标按下点, 光标位置) ' 绘制新的连线
赋值 (集上次点, 光标位置)

赋值 (窗口句柄, WindowFromPoint (光标位置.横向位置, 光标位置.纵向位置))
赋值 (窗口线程号, GetWindowThreadProcessId (窗口句柄, 窗口进程号))
.如果真 (等于 (GetCurrentProcessId (), 窗口进程号))
    返回 ()
.如果真结束
.如果真 (或者 (等于 (窗口句柄, 集上次窗口句柄), 等于 (窗口句柄, 0)))
    返回 ()
.如果真结束
画窗口矩形 (集上次窗口句柄) ' 清除已绘制的窗口矩形
画窗口矩形 (窗口句柄) ' 绘制新的窗口矩形
 ' 以下代码获取窗口信息
连续赋值 (取空白文本 (256), 窗口类名, 窗口文本)
SendMessage (窗口句柄, #WM_GETTEXT, 255, 取变量数据地址 (窗口文本))
GetClassName (窗口句柄, 窗口类名, 255)
赋值 (.内容, 到文本 (窗口句柄))
赋值 (.内容, 窗口文本)
赋值 (.内容, 窗口类名)
GetWindowRect (窗口句柄, 窗口矩形)
赋值 (.内容, 相加 (“(”, 到文本 (窗口矩形.左边), “,”, 到文本 (窗口矩形.顶边), “,”, 到文本 (窗口矩形.右边), “,”, 到文本 (窗口矩形.底边), “)”))
赋值 (.内容, 相加 (到文本 (相减 (窗口矩形.右边, 窗口矩形.左边)), “×”, 到文本 (相减 (窗口矩形.底边, 窗口矩形.顶边))))
GetClientRect (窗口句柄, 窗口矩形)
赋值 (.内容, 相加 (“(”, 到文本 (窗口矩形.左边), “,”, 到文本 (窗口矩形.顶边), “,”, 到文本 (窗口矩形.右边), “,”, 到文本 (窗口矩形.底边), “)”))
赋值 (.内容, 相加 (到文本 (相减 (窗口矩形.右边, 窗口矩形.左边)), “×”, 到文本 (相减 (窗口矩形.底边, 窗口矩形.顶边))))

赋值 (.内容, 到文本 (窗口进程号))
赋值 (.内容, 到文本 (窗口线程号))

赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_HINSTANCE)))
赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_STYLE)))
赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_EXSTYLE)))
赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_ID)))
赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_WNDPROC)))
赋值 (.内容, 到文本 (GetWindowLong (窗口句柄, #GWL_USERDATA)))
 ' 获取窗口类信息
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_STYLE)))
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_WNDPROC)))
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_HMODULE)))
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_CBCLSEXTRA)))
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_CBWNDEXTRA)))
赋值 (集图标句柄, GetClassLong (窗口句柄, #GCL_HICON))
赋值 (.内容, 到文本 (集图标句柄))
画图标 ()
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_HCURSOR)))
赋值 (.内容, 到文本 (GetClassLong (窗口句柄, #GCL_HBRBACKGROUND)))
 ' 获取相关窗口
赋值 (.内容, 取窗口基本信息 (GetParent (窗口句柄)))
赋值 (.内容, 取窗口基本信息 (GetWindow (窗口句柄, #GW_OWNER)))
赋值 (.内容, 取窗口基本信息 (GetWindow (窗口句柄, #GW_HWNDPREV)))
赋值 (.内容, 取窗口基本信息 (GetWindow (窗口句柄, #GW_HWNDNEXT)))
赋值 (.内容, 取窗口基本信息 (GetWindow (窗口句柄, #GW_CHILD)))

赋值 (集上次窗口句柄, 窗口句柄)


.子程序 屏幕画线, 空白型, , 在整个屏幕上画线
.参数 参起始点, POINTAPI, , 
.参数 参终止点, POINTAPI, , 

.局部变量 屏幕画布, 整数型, , , 
.局部变量 旧混合模式, 整数型, , , 
.局部变量 原来位置, POINTAPI, , , 

赋值 (屏幕画布, GetDC (0))
赋值 (旧混合模式, SetROP2 (屏幕画布, #R2_NOT)) ' 设置为反转模式，这样两次在同一位置绘制会清除。
MoveToEx (屏幕画布, 参起始点.横向位置, 参起始点.纵向位置, 原来位置)
LineTo (屏幕画布, 参终止点.横向位置, 参终止点.纵向位置)
SetROP2 (屏幕画布, 旧混合模式)
ReleaseDC (0, 屏幕画布)


.子程序 画图标, 空白型, , 画窗口的图标
.局部变量 画板画布, 整数型, , , 

.清除 () ' 先清除，以免出现图标重叠现象
.如果真 (等于 (集图标句柄, 0))
    返回 ()
.如果真结束
赋值 (画板画布, GetDC (取窗口句柄 ()))
DrawIcon (画板画布, 0, 0, 集图标句柄)
ReleaseDC (取窗口句柄 (), 画板画布)


.子程序 画窗口矩形, 空白型, , 在窗口上绘制矩形以凸显之。
.参数 窗口句柄, 空白型, , 

.局部变量 窗口矩形, RECT, , , 
.局部变量 旧画笔, 整数型, , , 
.局部变量 旧画刷, 整数型, , , 
.局部变量 旧混合模式, 整数型, , , 
.局部变量 混合模式, 整数型, , , 
.局部变量 画笔, 整数型, , , 
.局部变量 画布, 整数型, , , 

GetWindowRect (窗口句柄, 窗口矩形)
赋值 (画布, GetWindowDC (窗口句柄))
赋值 (画笔, CreatePen (#PS_SOLID, 4, #黑色)) ' 创建一个宽度为4的黑色画笔
赋值 (旧画笔, SelectObject (画布, 画笔)) ' 将该画笔选入到画板
赋值 (旧画刷, SelectObject (画布, GetStockObject (#NULL_BRUSH))) ' 将画刷选入到画板
赋值 (旧混合模式, SetROP2 (画布, #R2_NOT)) ' 将绘制设置为反转，这样绘制两次就清除
Rectangle (画布, 2, 2, 相减 (窗口矩形.右边, 窗口矩形.左边, 2), 相减 (窗口矩形.底边, 窗口矩形.顶边, 2)) ' 画一个矩形
SelectObject (画布, 旧画笔) ' 恢复原来的设置
SelectObject (画布, 旧画刷)
SetROP2 (画布, 旧混合模式)
DeleteObject (画笔) ' 删除创建的对象以释放内存
DeleteObject (旧画刷)
ReleaseDC (窗口句柄, 画布)


.子程序 取窗口基本信息, 文本型, , 返回指定窗口的句柄、窗口类名和窗口文本
.参数 参窗口句柄, 整数型, , 

.局部变量 窗口类名, 文本型, , , 
.局部变量 窗口文本, 文本型, , , 

.如果真 (等于 (参窗口句柄, 0))
    返回 (“0”)
.如果真结束
连续赋值 (取空白文本 (256), 窗口类名, 窗口文本)
GetClassName (参窗口句柄, 窗口类名, 255)
SendMessage (参窗口句柄, #WM_GETTEXT, 255, 取变量数据地址 (窗口文本))
返回 (相加 (到文本 (参窗口句柄), “|”, 窗口类名, “|”, 窗口文本))


.子程序 _画板图标_绘画, 空白型, , 
.参数 重画区左边, 整数型, , 
.参数 重画区上边, 整数型, , 
.参数 重画区右边, 整数型, , 
.参数 重画区下边, 整数型, , 

画图标 ()


.子程序 递归生成窗口树, 空白型, , 通过为树型框构造项目数据字节集的方式来生成窗口树
.参数 参文件号, 整数型, , 
.参数 参缩进层次, 整数型, , 
.参数 参窗口句柄, 整数型, , 要生成树的窗口句柄
.参数 参只显示可见窗口, 逻辑型, 可空, 

.局部变量 窗口类名, 文本型, , , 
.局部变量 窗口标题, 文本型, , , 
.局部变量 窗口句柄, 整数型, , , 
.局部变量 缩进层次, 整数型, , , 
.局部变量 窗口信息, 文本型, , , 

.如果真 (是否为空 (参只显示可见窗口))
    赋值 (参只显示可见窗口, 真)
.如果真结束
.如果真 (等于 (参窗口句柄, 0))
    返回 ()
.如果真结束
连续赋值 (取空白文本 (256), 窗口类名, 窗口标题)
未知函数_167838282 (参窗口句柄)

.子程序 寻找树型框项目, 整数型, , 返回找到的项目索引，没找到则返回-1
.参数 参包含的文本, 文本型, , 
.参数 参树型框, 树型框, , 

.局部变量 项目文本, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (参树型框.取项目数 (), i)
    赋值 (项目文本, 参树型框.取项目文本 (i))
    .如果真 (大于 (寻找文本 (项目文本, 参包含的文本, , 真), 0))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)


.子程序 _按钮刷新_被单击, 空白型, , 
.局部变量 文件号, 整数型, , , 
.局部变量 项目数据, 字节集, , , 

赋值 (.禁止, 真)
赋值 (文件号, 打开内存文件 ())
递归生成窗口树 (文件号, 0, GetDesktopWindow (), 假)
移动读写位置 (文件号, #文件首, 0)
赋值 (项目数据, 读入字节集 (文件号, 取文件长度 (文件号)))
关闭文件 (文件号)
赋值 (., 项目数据)
0.扩展 ()
赋值 (.禁止, 假)


.子程序 _按钮寻找_被单击, 空白型, , 
.局部变量 项目, 整数型, , , 

.如果真 (.禁止)
    信息框 (“还在生成系统窗口树，请稍候……”, #信息图标, )
    返回 ()
.如果真结束
赋值 (项目, 寻找树型框项目 (相加 (.内容, “|”), ))
.如果真 (不等于 (项目, -1))
    赋值 (., 项目)
    项目.扩展 ()
    项目.保证显示 ()
    获取焦点 ()
.如果真结束


.子程序 _按钮生成_被单击, 空白型, , 
.局部变量 窗口句柄, 整数型, , , 
.局部变量 父窗口句柄, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 项目数据, 字节集, , , 

赋值 (窗口句柄, 到数值 (.内容))
.如果真 (等于 (窗口句柄, 0))
    返回 ()
.如果真结束
.判断循环首 (不等于 (GetParent (窗口句柄), 0)) ' 向上搜索，直到找到其顶层窗口
    赋值 (窗口句柄, GetParent (窗口句柄))
.判断循环尾 ()
赋值 (打开内存文件 ())
递归生成窗口树 (文件号, 0, 窗口句柄, 假)
移动读写位置 (#文件首, 0)
赋值 (读入字节集 (取文件长度 ()))
关闭文件 ()
赋值 (., )
0.扩展 ()
_按钮寻找_被单击 ()


.子程序 _选择夹1_子夹被改变, 空白型, , 
.判断开始 (等于 (.现行子夹, 3)) ' 系统窗口树
     ' 切换到窗口树页面时以扩大空间。
    赋值 (., 600)
    赋值 (., 480)
    赋值 (_启动窗口., 1) ' 普通可调
    赋值 (_启动窗口., 真)
.默认
    赋值 (., 440)
    赋值 (., 330)
    赋值 (_启动窗口., 2) ' 固定
    赋值 (_启动窗口., 假)
.判断结束


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
结束 () ' 及时响应关闭按钮

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 设置控件锚点, 空白型, , 指定控件的锚点以适应窗口的大小改变
.参数 控件句柄, 整数型, , 控件的句柄
.参数 锚住左边, 逻辑型, , 是否锚住控件左边
.参数 锚住顶边, 逻辑型, , 是否锚住控件顶边
.参数 锚住右边, 逻辑型, , 是否锚住控件右边
.参数 锚住下边, 逻辑型, , 是否锚住控件下边



.子程序 水平均分子控件, 空白型, , 将该控件的第一层子控件水平均分
.参数 父窗口句柄, 整数型, , 要水平其子控件的父窗口句柄
.参数 子控件高度, 整数型, , 要固定高度，则设定一个值；要动态自适应，则设为0
.参数 控件间距, 整数型, 可空, 



.子程序 垂直均分子控件, 空白型, , 将该控件的第一层子控件垂直均分
.参数 父窗口句柄, 整数型, , 要均分其子控件的父控件
.参数 子控件宽度, 整数型, , 要固定宽度，则设定一个值；要动态自适应，则设为0
.参数 控件间距, 整数型, 可空, 默认为５，可以设置



.子程序 取被锚控件索引, 整数型, , 返回控件在全局数组中的索引，找不到则返回-1
.参数 参控件句柄, 整数型, , 




 ' 不属于任何一个程序集、类模块的函数：
