 ' 文件类型：Windows模块源码

 ' 程序名称：古木滑块条 免注册版
 ' 程序描述：　　使用[古木滑块条]，您可以使易语言中的任何控件变成滑块条，从而给予你在需要滑块条的场合以最大的灵活性！[古木滑块条]甚至可以实现动态的、动画的滑块条。　使用[古木滑块条]，要实现任何样式的滑块条都轻而易举了！

1.1 版修正了有时鼠标释放后仍然会限制在区域之内的Ｂｕｇ。

 ' 程序作者：曾劲松
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：0411-88995831
 ' 传真号码：0411-88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：www.dywt.com.cn
 ' 版权声明：
 ' 版本号：1.1
 ' 创建号：0.0

窗口 窗口注册
    左边 = 50
    顶边 = 50
    宽度 = 422
    高度 = 397
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “注册 【古木滑块条】”
    帮助文件名 = “”



.常量 GWL_WNDPROC, "-4", , 
.常量 WM_SIZE, "5", , 
.常量 WM_LBUTTONDOWN, "513", , 
.常量 WM_LBUTTONUP, "514", , 
.常量 WM_MOUSEMOVE, "512", , 
.图片 注册说明, " ' 已保存到：D:\易语言学习\Data\trackbar_ec_free.e\注册说明", , 
.常量 VK_LBUTTON, "1", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 RECT, , RECT
    .成员 Left, 整数型, , , left
    .成员 Top, 整数型, , , top
    .成员 Right, 整数型, , , right
    .成员 Bottom, 整数型, , , bottom

数据类型 POINT, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 滑块, , 
    .成员 句柄, 整数型, , , 
    .成员 滑条句柄, 整数型, , , 
    .成员 文本控件句柄, 整数型, , , 用来显示数值
    .成员 方向, 整数型, , , -1水平　1垂直
    .成员 最小值, 整数型, , , 滑块表示的最小值
    .成员 最大值, 整数型, , , 
    .成员 当前值, 整数型, , , 
    .成员 锁定的横坐标, 整数型, , , 垂直的锁定横坐标 -1 为不理会
    .成员 锁定的纵坐标, 整数型, , , 水平的锁定纵坐标，
    .成员 对齐方式, 整数型, , , -1 上对齐或左对齐　0居中对齐　1 右对齐或下对齐
    .成员 鼠标被按下, 逻辑型, , , 
    .成员 旧窗口过程, 整数型, , , 

数据类型 父窗口, , 需要拦截父窗口的wm_size 消息以调整滑条的位置
    .成员 句柄, 整数型, , , 
    .成员 旧窗口过程, 整数型, , , 
    .成员 子滑块索引, 文本型, , , 以逗号分隔的索引文本数组 ，　子数组中不能使用０，所以如此

数据类型 滑块条, , 
    .成员 句柄, 整数型, , , 
    .成员 滑块句柄, 整数型, , , 
    .成员 旧窗口过程, 整数型, , , 

.全局变量 全滑块数组, 滑块, , "0", 
.全局变量 全父窗口数组, 父窗口, , "0", 
.全局变量 全滑块条数组, 滑块条, , "0", 

.DLL命令 GetParent, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 SetWindowLongA, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 子程序指针, , 

.DLL命令 GetWindowLongA, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 CallWindowProcA, 整数型, "", "", , 
    .参数 lpPrevWndFunc, 整数型, , 可能为一个 WNDPROC 子程序指针。
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetWindowRect, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpRect, RECT, , 未知类型：LPRECT。

.DLL命令 MoveWindow, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 X, 整数型, , 
    .参数 Y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 bRepaint, 逻辑型, , 

.DLL命令 GetClientRect, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpRect, RECT, , 未知类型：LPRECT。

.DLL命令 EnumChildWindows, 逻辑型, "", "", , 
    .参数 hWndParent, 整数型, , 
    .参数 lpEnumFunc, 子程序指针, , 可能为一个 WNDENUMPROC 子程序指针。
    .参数 lParam, 整数型, , 

.DLL命令 SetWindowTextA, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpString, 文本型, 传址, 

.DLL命令 GetCursorPos, 逻辑型, "", "", , 
    .参数 lpPoint, POINT, , 未知类型：LPPOINT。

.DLL命令 ScreenToClient, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpPoint, POINT, 传址, 未知类型：LPPOINT。

.DLL命令 ClientToScreen, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpPoint, POINT, 传址, 未知类型：LPPOINT。

.DLL命令 SetCursorPos, 逻辑型, "", "", , 
    .参数 X, 整数型, , 
    .参数 Y, 整数型, , 

.DLL命令 KillTimer, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 uIDEvent, 整数型, , 

.DLL命令 SetTimer, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 
    .参数 uElapse, 整数型, , 
    .参数 lpTimerFunc, 子程序指针, , 可能为一个 TIMERPROC 子程序指针。

.DLL命令 ClipCursor, 逻辑型, "", "", , 
    .参数 lpRect, RECT, , 可能为 RECT 结构。

.DLL命令 ClipCursorA, 逻辑型, "", "ClipCursor", , 
    .参数 lpRect, 整数型, , 可能为 RECT 结构。

.DLL命令 GetKeyState, 短整数型, "", "", , 
    .参数 nVirtKey, 整数型, , 

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
 ' 载入 (窗口调试, , 真)
 ' 输出调试文本 (取执行文件名 ())


.程序集 公开程序集, , , 此程序集中的所有函数都公开

.子程序 构建水平滑块条, 空白型, 公开, 将某个控件置为水平方向可拖动的滑块
.参数 要被置为滑块的控件句柄, 整数型, , 要置为滑块的控件句柄
.参数 要被置为滑条的控件句柄, 整数型, , 要被置为滑块条的控件句柄
.参数 要显示当前值的控件句柄, 整数型, 可空, 要显示滑块值的控件句柄，可以为标签，编辑框，按钮等可以显示文本的控件
.参数 最小值, 整数型, 可空, 默认为０
.参数 最大值, 整数型, 可空, 默认为１００
.参数 当前位置, 整数型, 可空, 默认为最小值
.参数 对齐方式, 整数型, 可空, 滑块与滑块条的对齐方式。-2:底顶对齐  -1:顶顶对齐 0：居中对齐 1:底底对齐 2:顶底对齐　 默认为居中对齐

.局部变量 某滑块, 滑块, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 t, 空白型, , , 
.局部变量 某父窗口, 父窗口, , , 
.局部变量 父窗口索引, 整数型, , , 
.局部变量 某滑条, 滑块条, , , 


.如果真 (是否为空 (最大值))
    赋值 (最大值, 100)
.如果真结束

.如果真 (大于 (最小值, 最大值))
    赋值 (t, 最小值)
    赋值 (最小值, 最大值)
    赋值 (最大值, t)
.如果真结束

赋值 (当前位置, 选择 (小于 (当前位置, 最小值), 最小值, 当前位置))
赋值 (当前位置, 选择 (大于 (当前位置, 最大值), 最大值, 当前位置))

赋值 (t, 取控件在滑块数组中的索引 (要被置为滑块的控件句柄))
.如果真 (大于 (t, 0))
     ' 如果已在，则需重设固定的位置，和其他参数，以防在换肤时需要重设滑块条。
     ' 控件间的关系不能重设，否则如何捕获事件？
    赋值 (全滑块数组 [t], 最小值, 最小值)
    赋值 (全滑块数组 [t], 最大值, 最大值)
    赋值 (全滑块数组 [t], 当前值, 当前位置)
    赋值 (全滑块数组 [t], 对齐方式, 对齐方式)
    
    .判断开始 (等于 (全滑块数组 [t], 对齐方式, -2))
        赋值 (全滑块数组 [t], 锁定的纵坐标, 相减 (取控件在父窗口纵坐标 (全滑块数组 [t], 滑条句柄), 取窗口高度 (全滑块数组 [t], 句柄)))
    .判断 (等于 (全滑块数组 [t], 对齐方式, -1))
        赋值 (全滑块数组 [t], 锁定的纵坐标, 取控件在父窗口纵坐标 (全滑块数组 [t], 滑条句柄))
    .判断 (等于 (某滑块.对齐方式, 0))
        赋值 (全滑块数组 [t], 锁定的纵坐标, 相加 (取控件在父窗口纵坐标 (全滑块数组 [t], 滑条句柄), 相除 (相减 (取窗口高度 (全滑块数组 [t], 滑条句柄), 取窗口高度 (全滑块数组 [t], 句柄)), 2)))
    .判断 (等于 (全滑块数组 [t], 对齐方式, 1))
        赋值 (全滑块数组 [t], 锁定的纵坐标, 相减 (相加 (取控件在父窗口纵坐标 (全滑块数组 [t], 滑条句柄), 取窗口高度 (全滑块数组 [t], 滑条句柄)), 取窗口高度 (全滑块数组 [t], 句柄)))
    .判断 (等于 (某滑块.对齐方式, 2))
        赋值 (全滑块数组 [t], 锁定的纵坐标, 相加 (取控件在父窗口纵坐标 (全滑块数组 [t], 滑条句柄), 取窗口高度 (全滑块数组 [t], 滑条句柄)))
    .默认
        
    .判断结束
    
    赋值 (x, 相加 (取控件在父窗口横坐标 (全滑块数组 [t], 滑条句柄), 相乘 (相除 (相减 (全滑块数组 [t], 当前值, 全滑块数组 [t], 最小值), 相减 (全滑块数组 [t], 最大值, 全滑块数组 [t], 最小值)), 相减 (取窗口宽度 (全滑块数组 [t], 滑条句柄), 取窗口宽度 (全滑块数组 [t], 句柄)))))
    MoveWindow (全滑块数组 [t], 句柄, x, 全滑块数组 [t], 锁定的纵坐标, 取窗口宽度 (全滑块数组 [t], 句柄), 取窗口高度 (全滑块数组 [t], 句柄), 真)
    .如果真 (不等于 (全滑块数组 [t], 文本控件句柄, 0))
        SetWindowTextA (全滑块数组 [t], 文本控件句柄, 到文本 (全滑块数组 [t], 当前值))
    .如果真结束
    
    返回 ()
.如果真结束

赋值 (某滑块.句柄, 要被置为滑块的控件句柄)
赋值 (某滑块.滑条句柄, 要被置为滑条的控件句柄)
赋值 (某滑块.文本控件句柄, 要显示当前值的控件句柄)

赋值 (某滑块.方向, -1) ' 水平
赋值 (某滑块.最小值, 最小值)
赋值 (某滑块.最大值, 最大值)
赋值 (某滑块.当前值, 当前位置)
赋值 (某滑块.对齐方式, 对齐方式)

 ' 赋值 (某滑块., 取控件在父窗口横坐标 (某滑块.滑条句柄))
 ' 赋值 (某滑块., 相减 (相加 (某滑块., 取窗口宽度 (某滑块.滑条句柄)), 取窗口宽度 (某滑块.句柄)))
赋值 (某滑块.旧窗口过程, GetWindowLongA (某滑块.句柄, #GWL_WNDPROC))
赋值 (某滑块.锁定的横坐标, -1)

.判断开始 (等于 (某滑块.对齐方式, -2))
    赋值 (某滑块.锁定的纵坐标, 相减 (取控件在父窗口纵坐标 (某滑块.滑条句柄), 取窗口高度 (某滑块.句柄)))
.判断 (等于 (某滑块.对齐方式, -1))
    赋值 (某滑块.锁定的纵坐标, 取控件在父窗口纵坐标 (某滑块.滑条句柄))
.判断 (等于 (某滑块.对齐方式, 0))
    赋值 (某滑块.锁定的纵坐标, 相加 (取控件在父窗口纵坐标 (某滑块.滑条句柄), 相除 (相减 (取窗口高度 (某滑块.滑条句柄), 取窗口高度 (某滑块.句柄)), 2)))
.判断 (等于 (某滑块.对齐方式, 1))
    赋值 (某滑块.锁定的纵坐标, 相减 (相加 (取控件在父窗口纵坐标 (某滑块.滑条句柄), 取窗口高度 (某滑块.滑条句柄)), 取窗口高度 (某滑块.句柄)))
.判断 (等于 (某滑块.对齐方式, 2))
    赋值 (某滑块.锁定的纵坐标, 相加 (取控件在父窗口纵坐标 (某滑块.滑条句柄), 取窗口高度 (某滑块.滑条句柄)))
.默认
    
.判断结束

赋值 (x, 相加 (取控件在父窗口横坐标 (某滑块.滑条句柄), 相乘 (相除 (相减 (某滑块.当前值, 某滑块.最小值), 相减 (某滑块.最大值, 某滑块.最小值)), 相减 (取窗口宽度 (某滑块.滑条句柄), 取窗口宽度 (某滑块.句柄)))))
MoveWindow (某滑块.句柄, x, 某滑块.锁定的纵坐标, 取窗口宽度 (某滑块.句柄), 取窗口高度 (某滑块.句柄), 真)
.如果真 (不等于 (某滑块.文本控件句柄, 0))
    SetWindowTextA (某滑块.文本控件句柄, 到文本 (某滑块.当前值))
.如果真结束

SetWindowLongA (某滑块.句柄, #GWL_WNDPROC, &新窗口过程)

加入成员 (全滑块数组, 某滑块)

 ' 处理滑块条
.如果真 (小于或等于 (取滑块条在数组中的索引 (要被置为滑条的控件句柄), 0))
     ' 滑块条未被加入
    赋值 (某滑条.句柄, 要被置为滑条的控件句柄)
    赋值 (某滑条.滑块句柄, 要被置为滑块的控件句柄)
    赋值 (某滑条.旧窗口过程, GetWindowLongA (某滑条.句柄, #GWL_WNDPROC))
    SetWindowLongA (某滑条.句柄, #GWL_WNDPROC, &滑块条新窗口过程)
    加入成员 (全滑块条数组, 某滑条)
.如果真结束

 ' 处理其父窗口，当父窗口大小发生改变时捕获它。
赋值 (某父窗口.句柄, GetParent (某滑块.句柄))
赋值 (父窗口索引, 取父窗口在数组中的索引 (某父窗口.句柄))
.如果 (大于 (父窗口索引, 0))
     ' 该父窗口已加入,则将控件索引直接加入该窗口
     ' 加入成员 (全父窗口数组.子滑块索引数组, 取数组成员数 (全滑块数组))
    赋值 (全父窗口数组 [父窗口索引], 子滑块索引, 相加 (全父窗口数组 [父窗口索引], 子滑块索引, 到文本 (取数组成员数 (全滑块数组)), “,”))
.否则
     ' 如果该父窗口尚未加入
    赋值 (某父窗口.旧窗口过程, GetWindowLongA (某父窗口.句柄, #GWL_WNDPROC))
     ' 加入成员 (某父窗口.子滑块索引数组, 取数组成员数 (全滑块数组))
    赋值 (某父窗口.子滑块索引, 相加 (某父窗口.子滑块索引, 到文本 (取数组成员数 (全滑块数组)), “,”))
    SetWindowLongA (某父窗口.句柄, #GWL_WNDPROC, &新父窗口过程)
    加入成员 (全父窗口数组, 某父窗口)
.如果结束


.子程序 置滑块值, 逻辑型, 公开, 
.参数 已被置为滑块的控件句柄, 整数型, , 
.参数 欲置之值, 整数型, , 要置的置，设置值后滑块会自动滑道相应的位置，小于该滑块的最小值则用最小值，大于该滑块的最大值则用最大值

.局部变量 索引, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 r, 逻辑型, , , 


赋值 (索引, 取控件在滑块数组中的索引 (已被置为滑块的控件句柄))
.如果真 (小于或等于 (索引, 0))
    返回 (假)
.如果真结束
.如果 (或者 (小于 (欲置之值, 全滑块数组 [索引], 最小值), 大于 (欲置之值, 全滑块数组 [索引], 最大值)))
    赋值 (r, 假)
.否则
    赋值 (r, 真)
.如果结束
赋值 (欲置之值, 选择 (小于 (欲置之值, 全滑块数组 [索引], 最小值), 全滑块数组 [索引], 最小值, 欲置之值))
赋值 (欲置之值, 选择 (大于 (欲置之值, 全滑块数组 [索引], 最大值), 全滑块数组 [索引], 最大值, 欲置之值))

赋值 (全滑块数组 [索引], 当前值, 欲置之值)
.判断开始 (等于 (全滑块数组 [索引], 方向, -1))
     ' x ＝ (全滑块数组 [索引].最大位置 － 全滑块数组 [索引].最小位置) × 全滑块数组 [索引].当前值 ÷ 全滑块数组 [索引].最大值 － 全滑块数组 [索引].宽度 ÷ 2 ＋ 取控件在父窗口横坐标 (全滑块数组 [索引].滑条句柄)
    赋值 (x, 相加 (取控件在父窗口横坐标 (全滑块数组 [索引], 滑条句柄), 相乘 (相除 (相减 (全滑块数组 [索引], 当前值, 全滑块数组 [索引], 最小值), 相减 (全滑块数组 [索引], 最大值, 全滑块数组 [索引], 最小值)), 相减 (取窗口宽度 (全滑块数组 [索引], 滑条句柄), 取窗口宽度 (全滑块数组 [索引], 句柄)))))
    MoveWindow (全滑块数组 [索引], 句柄, x, 全滑块数组 [索引], 锁定的纵坐标, 取窗口宽度 (全滑块数组 [索引], 句柄), 取窗口高度 (全滑块数组 [索引], 句柄), 真)
    
.判断 (等于 (全滑块数组 [索引], 方向, 1))
    
    
.默认
    
.判断结束
.如果真 (不等于 (全滑块数组 [索引], 文本控件句柄, 0))
    SetWindowTextA (全滑块数组 [索引], 文本控件句柄, 到文本 (全滑块数组 [索引], 当前值))
.如果真结束
返回 (r)

.子程序 取滑块当前值, 整数型, 公开, 失败则返回-1
.参数 已被置为滑块的控件句柄, 整数型, , 

.局部变量 索引, 空白型, , , 

赋值 (索引, 取控件在滑块数组中的索引 (已被置为滑块的控件句柄))
.如果真 (小于或等于 (索引, 0))
    返回 (-1)
.如果真结束
返回 (全滑块数组 [索引], 当前值)


.子程序 取滑块最小值, 整数型, 公开, 失败则返回-1
.参数 已被置为滑块的控件句柄, 整数型, , 

.局部变量 索引, 空白型, , , 

赋值 (索引, 取控件在滑块数组中的索引 (已被置为滑块的控件句柄))
.如果真 (小于或等于 (索引, 0))
    返回 (-1)
.如果真结束
返回 (全滑块数组 [索引], 最小值)


.子程序 取滑块最大值, 整数型, 公开, 失败则返回-1
.参数 已被置为滑块的控件句柄, 整数型, , 

.局部变量 索引, 空白型, , , 

赋值 (索引, 取控件在滑块数组中的索引 (已被置为滑块的控件句柄))
.如果真 (小于或等于 (索引, 0))
    返回 (-1)
.如果真结束
返回 (全滑块数组 [索引], 最大值)


.子程序 置滑块最小最大值, 逻辑型, 公开, 
.参数 已被置为滑块的控件句柄, 整数型, , 
.参数 最小值, 整数型, , 
.参数 最大值, 整数型, , 

.局部变量 索引, 空白型, , , 
.局部变量 t, 空白型, , , 


赋值 (索引, 取控件在滑块数组中的索引 (已被置为滑块的控件句柄))
.如果真 (小于或等于 (索引, 0))
    返回 (假)
.如果真结束
.如果真 (大于 (最小值, 最大值))
    赋值 (t, 最小值)
    赋值 (最小值, 最大值)
    赋值 (最大值, t)
.如果真结束
赋值 (全滑块数组 [索引], 最小值, 最小值)
赋值 (全滑块数组 [索引], 最大值, 最大值)
 ' 调整滑块位置
返回 (置滑块值 (全滑块数组 [索引], 句柄, 全滑块数组 [索引], 当前值))


.子程序 新窗口过程, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 i, 空白型, , , 
.局部变量 p, POINT, , , 
.局部变量 值, 整数型, , , 
.局部变量 x, 空白型, , , 
.局部变量 rect, RECT, , , 
.局部变量 边界宽度, 空白型, , , 

 ' 拦截鼠标按下、经过、拖动事件
赋值 (i, 取控件在滑块数组中的索引 (hwnd))
.如果真 (小于或等于 (i, 0))
    返回 (-1)
.如果真结束
.如果真 (小于 (取绝对值 (GetKeyState (#VK_LBUTTON)), 2))
     ' 判断是否已释放了鼠标
    赋值 (全滑块数组 [i], 鼠标被按下, 假)
.如果真结束
.判断开始 (等于 (uMsg, #WM_LBUTTONDOWN))
     ' 输出调试文本 (“dwon”)
    赋值 (全滑块数组 [i], 鼠标被按下, 真)
    赋值 (边界宽度, 相加 (取窗口边界宽度 (全滑块数组 [i], 句柄), 1))
    赋值 (rect.Left, 相加 (min (取窗口左边 (全滑块数组 [i], 句柄), 取窗口左边 (全滑块数组 [i], 滑条句柄)), 边界宽度))
    赋值 (rect.Top, 相加 (min (取窗口上边 (全滑块数组 [i], 句柄), 取窗口上边 (全滑块数组 [i], 滑条句柄)), 边界宽度))
    赋值 (rect.Right, 相减 (max (取窗口右边 (全滑块数组 [i], 句柄), 取窗口右边 (全滑块数组 [i], 滑条句柄)), 边界宽度))
    赋值 (rect.Bottom, 相减 (max (取窗口下边 (全滑块数组 [i], 句柄), 取窗口下边 (全滑块数组 [i], 滑条句柄)), 边界宽度))
    ClipCursor (rect)
    SetTimer (全滑块数组 [i], 句柄, i, 10, &计时器回调过程)
.判断 (等于 (uMsg, #WM_LBUTTONUP))
     ' 输出调试文本 (“released”)
     ' 不能在此处杀计时器，否则计算器只执行一次就销毁了。
    赋值 (全滑块数组 [i], 鼠标被按下, 假)
    ClipCursorA (0)
.默认
    
.判断结束
返回 (CallWindowProcA (全滑块数组 [i], 旧窗口过程, hwnd, uMsg, wParam, lParam))


.子程序 滑块条新窗口过程, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 index, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 p, POINT, , , 
.局部变量 某滑块条, 滑块条, , , 
.局部变量 最小位置, 空白型, , , 
.局部变量 最大位置, 空白型, , , 
.局部变量 i, 空白型, , , 

赋值 (index, 取滑块条在数组中的索引 (hwnd))
赋值 (某滑块条, 全滑块条数组 [index])
赋值 (i, 取控件在滑块数组中的索引 (某滑块条.滑块句柄))
.如果真 (小于或等于 (index, 0))
    返回 (0)
.如果真结束
.判断开始 (等于 (uMsg, #WM_LBUTTONUP))
     ' 如果滑块条被单击 使用ｍｏｕｓｅｕｐ，用户可以拖出光标后悔。
    GetCursorPos (p)
    赋值 (最小位置, 取控件在父窗口横坐标 (全滑块数组 [i], 滑条句柄))
    赋值 (最大位置, 相减 (相加 (最小位置, 取窗口宽度 (全滑块数组 [i], 滑条句柄)), 取窗口宽度 (全滑块数组 [i], 句柄)))
    
    .判断开始 (等于 (全滑块数组 [i], 方向, -1))
        ScreenToClient (全滑块数组 [i], 滑条句柄, p)
        赋值 (x, 相加 (相减 (p.x, 相除 (取窗口宽度 (全滑块数组 [i], 句柄), 2)), 取控件在父窗口横坐标 (全滑块数组 [i], 滑条句柄)))
        .如果真 (小于 (x, 最小位置))
            赋值 (x, 最小位置)
        .如果真结束
        .如果真 (大于 (x, 最大位置))
            赋值 (x, 最大位置)
        .如果真结束
        
        MoveWindow (全滑块数组 [i], 句柄, x, 全滑块数组 [i], 锁定的纵坐标, 取窗口宽度 (全滑块数组 [i], 句柄), 取窗口高度 (全滑块数组 [i], 句柄), 真)
        
        赋值 (全滑块数组 [i], 当前值, 相加 (全滑块数组 [i], 最小值, 相乘 (相除 (相减 (取窗口左边 (全滑块数组 [i], 句柄), 取窗口左边 (全滑块数组 [i], 滑条句柄)), 相减 (取窗口宽度 (全滑块数组 [i], 滑条句柄), 取窗口宽度 (全滑块数组 [i], 句柄))), 相减 (全滑块数组 [i], 最大值, 全滑块数组 [i], 最小值))))
        .如果真 (大于 (全滑块数组 [i], 文本控件句柄, 0))
            SetWindowTextA (全滑块数组 [i], 文本控件句柄, 到文本 (全滑块数组 [i], 当前值))
        .如果真结束
        
    .判断 (等于 (全滑块数组 [i], 方向, 1))
        
    .默认
        
    .判断结束
    
.默认
    
.判断结束
返回 (CallWindowProcA (某滑块条.旧窗口过程, hwnd, uMsg, wParam, lParam))


.子程序 新父窗口过程, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 index, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 某滑块, 滑块, , , 
.局部变量 临时文本数组, 文本型, , "0", 

赋值 (index, 取父窗口在数组中的索引 (hWnd))
.如果真 (小于或等于 (index, 0))
    返回 (0)
.如果真结束
.判断开始 (等于 (uMsg, #WM_SIZE))
    赋值 (临时文本数组, 分割文本 (全父窗口数组 [index], 子滑块索引, “,”, ))
    .计次循环首 (取数组成员数 (临时文本数组), i)
        赋值 (某滑块, 全滑块数组 [到数值 (临时文本数组 [i])])
        置滑块值 (某滑块.句柄, 某滑块.当前值)
    .计次循环尾 ()
.默认
    
.判断结束
返回 (CallWindowProcA (全父窗口数组 [index], 旧窗口过程, hWnd, uMsg, wParam, lParam))


.子程序 计时器回调过程, 空白型, , 
.参数 hwnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 idEvent, 整数型, , 
.参数 dwTime, 整数型, , 

.局部变量 i, 空白型, , , 
.局部变量 p, POINT, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 值, 整数型, , , 
.局部变量 rect, RECT, , , 
.局部变量 最小位置, 整数型, , , 
.局部变量 最大位置, 整数型, , , 

赋值 (i, idEvent)

.如果 (全滑块数组 [i], 鼠标被按下)
    GetCursorPos (p)
     ' 如果鼠标超出范围
     ' 赋值 (rect.Left, min (取窗口左边 (全滑块数组 [i], 句柄), 取窗口左边 (全滑块数组 [i], 滑条句柄)))
     ' 赋值 (rect.Top, min (取窗口上边 (全滑块数组 [i], 句柄), 取窗口上边 (全滑块数组 [i], 滑条句柄)))
     ' 赋值 (rect.Right, max (取窗口右边 (全滑块数组 [i], 句柄), 取窗口右边 (全滑块数组 [i], 滑条句柄)))
     ' 赋值 (rect.Bottom, max (取窗口下边 (全滑块数组 [i], 句柄), 取窗口下边 (全滑块数组 [i], 滑条句柄)))
     ' .如果真 (取反 (未知函数_167838238 (rect, p)))
         ' 赋值 (全滑块数组 [i], 鼠标被按下, 假)
     ' .如果真结束
     ' 输出调试文本 (到文本 (rect.Left) ＋ “,” ＋ 到文本 (rect.Top) ＋ “,” ＋ 到文本 (rect.Right))
     ' .如果真 (或者 (小于 (p.x, rect.Left), 大于 (p.x, rect.Right), 小于 (p.y, rect.Top), 大于 (p.y, rect.Bottom)))
         ' 赋值 (全滑块数组 [i], 鼠标被按下, 假)
     ' .如果真结束
    赋值 (最小位置, 取控件在父窗口横坐标 (全滑块数组 [i], 滑条句柄))
    赋值 (最大位置, 相减 (相加 (最小位置, 取窗口宽度 (全滑块数组 [i], 滑条句柄)), 取窗口宽度 (全滑块数组 [i], 句柄)))
    
    .判断开始 (等于 (全滑块数组 [i], 方向, -1))
        ScreenToClient (全滑块数组 [i], 滑条句柄, p)
        赋值 (x, 相加 (相减 (p.x, 相除 (取窗口宽度 (全滑块数组 [i], 句柄), 2)), 取控件在父窗口横坐标 (全滑块数组 [i], 滑条句柄)))
        .如果真 (小于 (x, 最小位置))
            赋值 (x, 最小位置)
        .如果真结束
        .如果真 (大于 (x, 最大位置))
            赋值 (x, 最大位置)
        .如果真结束
        MoveWindow (全滑块数组 [i], 句柄, x, 全滑块数组 [i], 锁定的纵坐标, 取窗口宽度 (全滑块数组 [i], 句柄), 取窗口高度 (全滑块数组 [i], 句柄), 真)
        
        赋值 (全滑块数组 [i], 当前值, 相加 (全滑块数组 [i], 最小值, 相乘 (相除 (相减 (取窗口左边 (全滑块数组 [i], 句柄), 取窗口左边 (全滑块数组 [i], 滑条句柄)), 相减 (取窗口宽度 (全滑块数组 [i], 滑条句柄), 取窗口宽度 (全滑块数组 [i], 句柄))), 相减 (全滑块数组 [i], 最大值, 全滑块数组 [i], 最小值))))
        .如果真 (大于 (全滑块数组 [i], 文本控件句柄, 0))
            SetWindowTextA (全滑块数组 [i], 文本控件句柄, 到文本 (全滑块数组 [i], 当前值))
        .如果真结束
        
    .判断 (等于 (全滑块数组 [i], 方向, 1))
        
    .默认
        
    .判断结束
    
.否则
    KillTimer (全滑块数组 [i], 句柄, i)
    ClipCursorA (0)
.如果结束


.子程序 min, 整数型, , 
.参数 a, 整数型, , 
.参数 b, 整数型, , 

.如果真 (小于或等于 (a, b))
    返回 (a)
.如果真结束
返回 (b)


.子程序 max, 整数型, , 
.参数 a, 整数型, , 
.参数 b, 整数型, , 

.如果真 (大于或等于 (a, b))
    返回 (a)
.如果真结束
返回 (b)

.子程序 取控件在滑块数组中的索引, 整数型, , 找不到返回-1
.参数 控件句柄, 整数型, , 

.局部变量 i, 空白型, , , 

.计次循环首 (取数组成员数 (全滑块数组), i)
    .如果真 (等于 (全滑块数组 [i], 句柄, 控件句柄))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)


.子程序 取父窗口在数组中的索引, 整数型, , 
.参数 父窗口句柄, 整数型, , 

.局部变量 i, 空白型, , , 

.计次循环首 (取数组成员数 (全父窗口数组), i)
    .如果真 (等于 (全父窗口数组 [i], 句柄, 父窗口句柄))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)


.子程序 取滑块条在数组中的索引, 整数型, , 
.参数 滑块条句柄, 整数型, , 

.局部变量 i, 空白型, , , 

.计次循环首 (取数组成员数 (全滑块条数组), i)
    .如果真 (等于 (全滑块条数组 [i], 句柄, 滑块条句柄))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 释放滑块, 空白型, , 
.局部变量 i, 空白型, , , 

ClipCursorA (0)
.计次循环首 (取数组成员数 (全滑块数组), i)
    赋值 (全滑块数组 [i], 鼠标被按下, 假)
.计次循环尾 ()

.程序集 公用程序集, , , 

.子程序 取窗口左边, 整数型, , 取窗口在屏幕上的坐标
.参数 参窗口句柄, 整数型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (矩形.Left)


.子程序 取窗口上边, 整数型, , 
.参数 参窗口句柄, 整数型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (矩形.Top)


.子程序 取窗口右边, 整数型, , 
.参数 参窗口句柄, 整数型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (矩形.Right)


.子程序 取窗口下边, 整数型, , 
.参数 参窗口句柄, 空白型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (矩形.Bottom)


.子程序 取窗口宽度, 整数型, , 
.参数 参窗口句柄, 空白型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (相减 (矩形.Right, 矩形.Left))


.子程序 取窗口高度, 整数型, , 
.参数 参窗口句柄, 空白型, , 

.局部变量 矩形, RECT, , , 

GetWindowRect (参窗口句柄, 矩形)
返回 (相减 (矩形.Bottom, 矩形.Top))


.子程序 取窗口客户区宽度, 整数型, , 
.参数 参窗口句柄, 整数型, , 

.局部变量 矩形, RECT, , , 

GetClientRect (参窗口句柄, 矩形)
返回 (相减 (矩形.Right, 矩形.Left))


.子程序 取窗口客户区高度, 整数型, , 
.参数 参窗口句柄, 整数型, , 

.局部变量 矩形, RECT, , , 

GetClientRect (参窗口句柄, 矩形)
返回 (相减 (矩形.Bottom, 矩形.Top))


.子程序 取窗口标题栏高度, 整数型, , 
.参数 参窗口句柄, 整数型, , 

返回 (相减 (取窗口高度 (参窗口句柄), 取窗口客户区高度 (参窗口句柄), 取窗口边界宽度 (参窗口句柄)))


.子程序 取窗口边界宽度, 整数型, , 
.参数 参窗口句柄, 整数型, , 

返回 (相除 (相减 (取窗口宽度 (参窗口句柄), 取窗口客户区宽度 (参窗口句柄)), 2))


.子程序 取控件在父窗口横坐标, 整数型, , 
.参数 控件句柄, 空白型, , 

.局部变量 父窗口句柄, 整数型, , , 

赋值 (父窗口句柄, GetParent (控件句柄))
返回 (相减 (取窗口左边 (控件句柄), 取窗口左边 (父窗口句柄), 取窗口边界宽度 (父窗口句柄)))


.子程序 取控件在父窗口纵坐标, 整数型, , 
.参数 控件句柄, 空白型, , 

.局部变量 父窗口句柄, 空白型, , , 

赋值 (父窗口句柄, GetParent (控件句柄))
返回 (相减 (取窗口上边 (控件句柄), 取窗口上边 (父窗口句柄), 取窗口标题栏高度 (父窗口句柄)))


.子程序 取低字, 整数型, , 
.参数 数值, 整数型, , 

.局部变量 字节集, 字节集, , , 

赋值 (字节集, 到字节集 (数值))
返回 (相加 (相乘 (字节集 [2], 256), 字节集 [1]))


.子程序 取高字, 整数型, , 
.参数 数值, 整数型, , 

.局部变量 字节集, 字节集, , , 

赋值 (字节集, 到字节集 (数值))
返回 (相加 (相乘 (字节集 [4], 256), 字节集 [3]))


.子程序 生成整数, 整数型, , 
.参数 低字, 整数型, , 
.参数 高字, 整数型, , 

返回 (相加 (相乘 (高字, 65536), 低字))


.子程序 加解密字节集, 字节集, , 
.参数 待加密的字节集, 字节集, , 
.参数 加密还是解密, 整数型, , -1:加密 1:解密

.局部变量 i, 空白型, , , 
.局部变量 r, 字节集, , , 
.局部变量 l, 空白型, , , 长度

赋值 (l, 取字节集长度 (待加密的字节集))
赋值 (r, 取空白字节集 (l))
.计次循环首 (l, i)
    赋值 (r [i], 相加 (待加密的字节集 [i], 相乘 (加密还是解密, 30))) ' 32 以下结为特殊字符
.计次循环尾 ()
返回 (r)


.窗口程序集 窗口程序集注册, , , 

.子程序 _窗口注册_创建完毕, 空白型, , 
赋值 (., 到文本 (加解密字节集 (#注册说明, 1)))
赋值 (., 到文本 (取硬盘特征字 ()))

.子程序 _按钮关闭_被单击, 空白型, , 
销毁 ()


.子程序 _按钮打印_被单击, 空白型, , 
.如果真 (.开始打印 ())
    赋值 (., 50)
    赋值 (., 50)
    赋值 (., 100)
    .写出 (.)
    结束打印 ()
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
