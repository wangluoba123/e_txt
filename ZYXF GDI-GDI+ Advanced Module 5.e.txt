 ' 文件类型：Windows模块源码

 ' 程序名称：智圆行方GDI/GDI+高级模块
 ' 程序描述：智圆行方GDI/GDI+高级模块
---ZYXF GDI/GDI+ Advanced Module---
_________________
@备注:
智圆行方GDI/GDI+高级模块
---ZYXF GDI/GDI+ Advanced Module---
_________________
 ' 程序作者：智圆行方
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：菜鸟型GDI高级模块
---ZYXF GDI/GDI+ Advanced Module---
 --(R)智圆行方--
 ' 版本号：5.8
 ' 创建号：1.0



.常量 光栅运算_与, "8913094", 公开, 
.常量 光栅运算_复制, "13369376", 公开, 
.常量 光栅运算_反色, "4457256", 公开, 
.常量 光栅运算_异或, "6684742", 公开, 
.常量 光栅运算_或, "15597702", 公开, 
.常量 ___________1, "", , 分割一下
.常量 ____1_以下画笔样式独立一组____, "", , 该组（画笔样式），组内不可以重复用位或操作在一起
.常量 画笔样式1_实线, "0", 公开, 
.常量 画笔样式1_虚线, "1", 公开, 使用本样式，画笔宽度必须为1
.常量 画笔样式1_点线, "2", 公开, 使用本样式，画笔宽度必须为1
.常量 画笔样式1_点划线, "3", 公开, 使用本样式，画笔宽度必须为1
.常量 画笔样式1_点点划线, "4", 公开, 使用本样式，画笔宽度必须为1
.常量 画笔样式1_空笔, "5", 公开, 使用本样式，画笔无法绘图！
.常量 画笔样式1_内实线, "6", 公开, 画笔在由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框中画图。
.常量 ____2_以下画笔样式独立一组____, "", , 该组（画笔类型），组内不可以重复用位或操作在一起
.常量 画笔样式2_装饰画笔, "0", 公开, 
.常量 画笔样式2_几何画笔, "65536", 公开, 画笔宽度必须为1
.常量 ____3_以下画笔样式独立一组____, "", , 该组（画笔笔尖），组内不可以重复用位或操作在一起
.常量 画笔样式3_圆形笔尖, "0", 公开, 
.常量 画笔样式3_方形笔尖, "256", 公开, 
.常量 画笔样式3_平坦笔尖, "512", 公开, 
.常量 ____4_以下画笔样式独立一组____, "", , 该组（画笔连接），组内不可以重复用位或操作在一起
.常量 画笔样式4_圆形连接, "0", 公开, 
.常量 画笔样式4_尖角连接, "4096", 公开, 
.常量 ___________2, "", , 分割一下
.常量 刷子花纹_横线, "0", 公开, 
.常量 刷子花纹_左上右下连线, "2", 公开, 
.常量 刷子花纹_方格, "4", 公开, 
.常量 刷子花纹_右上左下连线, "3", 公开, 
.常量 刷子花纹_纵线, "1", 公开, 
.常量 刷子花纹_菱形, "5", 公开, 
.常量 ___________3, "", , 分割一下
.常量 图片_位图, "0", 公开, bitmap（*.BMP）
.常量 图片_图标, "1", 公开, icon（*.ICO）
.常量 图片_光标, "2", 公开, cursor（*.CUR）
.常量 ___________4, "", , 分割一下
.常量 载入图片_常规, "0", 公开, 
.常量 载入图片_替换像素, "32", 公开, 与图象中第一个像素相符的所有像素都由系统替换
.常量 载入图片_单色, "1", 公开, 转换为单色图片
.常量 ___________5, "", , 分割一下
.常量 字形_默认, "0", 公开, 
.常量 字形_瘦, "100", 公开, 
.常量 字形_超轻, "200", 公开, 
.常量 字形_轻, "300", 公开, 
.常量 字形_标准, "400", 公开, 
.常量 字形_中等, "500", 公开, 
.常量 字形_半粗体, "600", 公开, 
.常量 字形_粗体, "700", 公开, 
.常量 字形_超粗体, "800", 公开, 
.常量 字形_重体, "900", 公开, 
.常量 字形_黑体, "900", 公开, 
.常量 ___________6, "", , 分割一下
.常量 写出文本_底对齐, "8", 公开, 必须是单行文本写出时可用，因此必须同时利用位或同时与 写出文本_单行文本 设置。
.常量 写出文本_自动大小, "1024", 公开, 
.常量 写出文本_水平居中, "1", 公开, 
.常量 写出文本_左对齐, "0", 公开, 
.常量 写出文本_右对齐, "2", 公开, 
.常量 写出文本_单行文本, "32", 公开, 
.常量 写出文本_纵向居中, "4", 公开, 
.常量 写出文本_顶对齐, "0", 公开, 
.常量 写出文本_禁止and字符, "8", 公开, 通常，认为 & 字符表示应为下一个字符加上下划线。该标志禁止这种行为
.常量 写出文本_自动换行, "16", 公开, 
.常量 写出文本_隐藏超出部分, "8192", 公开, 对一个多行编辑控件进行模拟。不显示部分可见的行
.常量 写出文本_省略号省略超出, "32768", 公开, 倘若字串不能在矩形里全部容下，就在末尾显示省略号
.常量 写出文本_省略号省略路径, "16384", 公开, 如字串包含了 \ 字符，就用省略号替换字串内容，使其能在矩形中全部容下
.常量 ___________7, "", , 分割一下
.常量 刷子样式_纯色, "0", 公开, 
.常量 刷子样式_空刷子, "1", 公开, 
.常量 刷子样式_花纹, "2", 公开, 
.常量 ___________8, "", , 分割一下
.常量 填充模式_交替填充, "1", 公开, 
.常量 填充模式_按绘制方向填充, "2", 公开, 
.常量 ___________9, "", , 分割一下
.常量 合并方式_交集, "1", 公开, And，保留两区域重叠交差区域为当前区域
.常量 合并方式_并集, "2", 公开, Or，两区域结合起来为当前区域
.常量 合并方式_差集, "4", 公开, Diff，用区域1减去区域2，保留剩下区域为当前区域
.常量 合并方式_非交集, "3", 公开, Xor，两区域的并集减去两区域的交集即为当前区域
.常量 ___________10, "", , 分割一下
.常量 渐变类型_横向, "0", 公开, 在该模式下，两个端点表示一个矩形。该矩形被定义成左右边界具有固定颜色（由TRIVERTEX结构指定）。GDI从上至下插入颜色，并填充内部区域。
.常量 渐变类型_纵向, "1", 公开, 在该模式下，两个端点表示一个矩形。该矩形定义其顶部和底部边界的颜色为固定值（通过TRIVERTEX结构指定），GDI从顶至底部边界插入颜色，并填充内部区域。
.常量 ___________11, "", , 分割一下
.常量 镜像类型_垂直, "0", 公开, 
.常量 镜像类型_水平, "1", 公开, 
.常量 镜像类型_中心, "2", 公开, 即水平且垂直
.常量 ___________12, "", , 分割一下_给你点常用的消息常数
.常量 GWL_WNDPROC, "-4", 公开, 
.常量 WM_PAINT, "15", 公开, 
.常量 WM_KEYDOWN, "256", , 
.常量 WM_KEYUP, "257", , 
.常量 WM_SYSKEYDOWN, "260", , 按下Alt
.常量 WM_SYSKEYUP, "261", , 释放Alt
.常量 WM_CONTEXTMENU, "123", , 当用户某个窗口中点击了一下右键就发送此消息给这个窗口
.常量 WM_MOUSEMOVE, "512", , 移动鼠标
.常量 WM_LBUTTONDBLCLK, "515", , 双击鼠标左键
.常量 , , , 
.常量 混合模式_替换, "0", 公开, CompositingModeSourceOver
.常量 混合模式_复制, "1", 公开, CompositingModeSourceCopy
.常量 , , , 
.常量 混合品质_无效, "-1", 公开, CompositingQualityInvalid
.常量 混合品质_默认, "0", 公开, CompositingQualityDefault
.常量 混合品质_最佳性能, "1", 公开, CompositingQualityHighSpeed
.常量 混合品质_最佳质量, "2", 公开, CompositingQualityHighQuality
.常量 混合品质_伽玛校正, "3", 公开, CompositingQualityGammaCorrected
.常量 混合品质_假定线性, "4", 公开, CompositingQualityAssumeLinear
.常量 , , , 
.常量 平滑模式_无效, "-1", 公开, SmoothingModeInvalid
.常量 平滑模式_默认, "0", 公开, SmoothingModeDefault
.常量 平滑模式_最佳性能, "1", 公开, SmoothingModeHighSpeed
.常量 平滑模式_最佳质量, "2", 公开, SmoothingModeHighQuality
.常量 平滑模式_不抗锯齿, "3", 公开, SmoothingModeNone
.常量 平滑模式_抗锯齿, "4", 公开, SmoothingModeAntiAlias
.常量 , , , 
.常量 文本渲染模式_系统默认, "0", 公开, TextRenderingHintSystemDefault
.常量 文本渲染模式_符号位图和hinting技术, "1", 公开, TextRenderingHintSingleBitPerPixelGridFit
.常量 文本渲染模式_符号位图, "2", 公开, TextRenderingHintSingleBitPerPixel
.常量 文本渲染模式_抗锯齿和hinting技术, "3", 公开, TextRenderingHintAntiAliasGridFit
.常量 文本渲染模式_抗锯齿, "4", 公开, TextRenderingHintAntiAlias
.常量 文本渲染模式_ClearType文本和hinting技术, "5", 公开, TextRenderingHintClearTypeGridFit
.常量 , , , 
.常量 算法模式_无效, "-1", 公开, InterpolationModeInvalid
.常量 算法模式_默认, "0", 公开, InterpolationModeDefault
.常量 算法模式_低质量, "1", 公开, InterpolationModeLowQuality
.常量 算法模式_高质量, "2", 公开, InterpolationModeHighQuality
.常量 算法模式_双线性, "3", 公开, InterpolationModeBilinear
.常量 算法模式_双三次, "4", 公开, InterpolationModeBicubic
.常量 算法模式_邻近, "5", 公开, InterpolationModeNearestNeighbor
.常量 算法模式_高质量双线性, "6", 公开, InterpolationModeHighQualityBilinear
.常量 算法模式_高质量双三次, "7", 公开, InterpolationModeHighQualityBicubic
.常量 , , , 
.常量 像素偏移模式_无效, "-1", 公开, PixelOffsetModeInvalid
.常量 像素偏移模式_默认, "0", 公开, PixelOffsetModeDefault
.常量 像素偏移模式_高性能, "1", 公开, PixelOffsetModeHighSpeed
.常量 像素偏移模式_高质量, "2", 公开, PixelOffsetModeHighQuality
.常量 像素偏移模式_不偏移, "3", 公开, PixelOffsetModeNone
.常量 像素偏移模式_一半, "4", 公开, PixelOffsetModeHalf
.常量 , , , 
.常量 单位_世界坐标, "0", 公开, UnitWorld
.常量 单位_显示器, "1", 公开, UnitDisplay
.常量 单位_像素, "2", 公开, UnitPixel
.常量 单位_点, "3", 公开, UnitPoint
.常量 单位_英寸, "4", 公开, UnitInch
.常量 单位_文档, "5", 公开, UnitDocument。1/300英寸
.常量 单位_毫米, "6", 公开, UnitMillimeter。
.常量 , , , 
.常量 坐标空间_世界, "0", 公开, CoordinateSpaceWorld
.常量 坐标空间_页, "1", 公开, CoordinateSpacePage
.常量 坐标空间_设备, "2", 公开, CoordinateSpaceDevice
.常量 , , , 
.常量 字体风格_普通, "0", 公开, 
.常量 字体风格_加粗, "1", 公开, 
.常量 字体风格_倾斜, "2", 公开, 
.常量 字体风格_加粗倾斜, "3", 公开, 
.常量 字体风格_下划线, "4", 公开, 
.常量 字体风格_删除线, "8", 公开, 
.常量 , , , 
.常量 填充模式_交替, "0", 公开, Alternate 指定交替填充模式。  
.常量 填充模式_环绕, "1", 公开, Winding 指定环绕填充模式。  
.常量 , , , 
.常量 合并模式_替代, "0", 公开, Replace 一个剪辑区域被另一个剪辑区域替代。
.常量 合并模式_交集, "1", 公开, Intersect 通过采用两个剪辑区域的交集组合两个剪辑区域。
.常量 合并模式_并集, "2", 公开, Union 通过采用两个剪辑区域的联合组合两个剪辑区域。
.常量 合并模式_并集减交集, "3", 公开, Xor 两者的并集减去两者的交集。通过只采纳单独由其中一个区域（而非两个区域一起）包括的范围来组合两个剪辑区域。
.常量 合并模式_排除新区域, "4", 公开, Exclude 指定由从现有区域移除的新区域的结果替代现有区域。换言之，从现有区域中排除新区域。
.常量 合并模式_排除旧区域, "5", 公开, Complement 指定由从新区域移除的现有区域的结果替代现有区域。换言之，从新区域中排除现有区域。
.常量 , , , 
.常量 颜色调整类型_默认, "0", 公开, ColorAdjustTypeDefault
.常量 颜色调整类型_位图, "1", 公开, ColorAdjustTypeBitmap
.常量 颜色调整类型_画刷, "2", 公开, ColorAdjustTypeBrush
.常量 颜色调整类型_画笔, "3", 公开, ColorAdjustTypePen
.常量 颜色调整类型_文本, "4", 公开, ColorAdjustTypeText
.常量 颜色调整类型_总数, "5", 公开, ColorAdjustTypeCount，内部使用，用于记录色彩调整的种类
.常量 颜色调整类型_通用, "6", 公开, ColorAdjustTypeAny，保留，不使用
.常量 , , , 
.常量 输出通道_C, "0", 公开, ColorChannelFlagsC
.常量 输出通道_M, "1", 公开, ColorChannelFlagsM
.常量 输出通道_Y, "2", 公开, ColorChannelFlagsY
.常量 输出通道_K, "3", 公开, ColorChannelFlagsK
.常量 输出通道_Last, "4", 公开, ColorChannelFlagsLast
.常量 , , , 
.常量 调色板标志_含透明色, "1", 公开, PaletteFlagsHasAlpha
.常量 调色板标志_灰度, "2", 公开, PaletteFlagsGrayScale
.常量 调色板标志_半色, "4", 公开, PaletteFlagsHalftone
.常量 , , , 
.常量 矩阵顺序_预先计算, "0", 公开, Prepend 在旧操作前应用新操作。 
.常量 矩阵顺序_追加, "1", 公开, Append 在旧操作后应用新操作。 
.常量 , , , 
.常量 颜色矩阵标志_默认, "0", 公开, ColorMatrixFlagsDefault。所有的颜色值（包括灰度）是由相同的颜色调整矩阵调整的指定
.常量 颜色矩阵标志_忽略灰度, "1", 公开, ColorMatrixFlagsSkipGrays。不对灰度进行调整
.常量 颜色矩阵标志_分别, "2", 公开, ColorMatrixFlagsAltGray。颜色是一个矩阵，灰度是另一个矩阵。
.常量 , , , 
.常量 GMEM_ZEROINIT, "64", , 新分配的内存块全部初始化成零
.常量 GMEM_MOVEABLE, "2", , 分配一个可移动内存块
.常量 , , , 
.常量 图像格式_内存BMP, "“{B96B3CAA-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatMemoryBMP
.常量 图像格式_BMP, "“{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatBMP
.常量 图像格式_JPEG, "“{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatJPEG
.常量 图像格式_GIF, "“{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatGIF
.常量 图像格式_EMF, "“{B96B3CAC-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatEMF
.常量 图像格式_WMF, "“{B96B3CAD-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatWMF
.常量 图像格式_TIFF, "“{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatTIFF
.常量 图像格式_PNG, "“{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatPNG
.常量 图像格式_ICO, "“{B96B3CB5-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatIcon
.常量 , , , 
.常量 图像类型_未知, "0", 公开, ImageTypeUnknown
.常量 图像类型_位图, "1", 公开, ImageTypeBitmap
.常量 图像类型_图元文件, "2", 公开, ImageTypeMetafile
.常量 , , , 
.常量 图像属性_无, "0", 公开, ImageFlagsNone
.常量 图像属性_可缩放, "1", 公开, ImageFlagsScalable
.常量 图像属性_含透明, "2", 公开, ImageFlagsHasAlpha
.常量 图像属性_含半透明, "4", 公开, ImageFlagsHasTranslucent
.常量 图像属性_可部分缩放, "8", 公开, ImageFlagsPartiallyScalable
.常量 图像属性_色彩空间RGB, "16", 公开, ImageFlagsColorSpaceRGB
.常量 图像属性_色彩空间CMYK, "32", 公开, ImageFlagsColorSpaceCMYK
.常量 图像属性_色彩空间灰度, "64", 公开, ImageFlagsColorSpaceGRAY
.常量 图像属性_色彩空间YCBCR, "128", 公开, ImageFlagsColorSpaceYCBCR
.常量 图像属性_色彩空间YCCK, "256", 公开, ImageFlagsColorSpaceYCCK
.常量 图像属性_含DPI, "4096", 公开, ImageFlagsHasRealDPI
.常量 图像属性_含像素尺寸, "8192", 公开, ImageFlagsHasRealPixelSize
.常量 图像属性_只读, "65536", 公开, ImageFlagsReadOnly
.常量 图像属性_高速缓存, "131072", 公开, ImageFlagsCaching
.常量 , , , 
.常量 像素格式_Indexed, "65536", 公开, Indexed 该像素数据包含颜色索引值，这意味着这些值是系统颜色表中颜色的索引，而不是单个颜色值。
.常量 像素格式_GDI, "131072", 公开, Gdi 像素数据包含 GDI 颜色。
.常量 像素格式_Alpha, "262144", 公开, Alpha 像素数据包含没有进行过自左乘的 alpha 值。
.常量 像素格式_PAlpha, "524288", 公开, PAlpha 像素格式包含自左乘的 alpha 值。
.常量 像素格式_Extended, "1048576", 公开, Extended 保留。
.常量 像素格式_Canonical, "2097152", 公开, Canonical 保留。
.常量 像素格式_Undefined, "0", 公开, Undefined 未定义像素格式。
.常量 像素格式_DontCare, "0", 公开, DontCare 没有指定像素格式。
.常量 像素格式_1bppIndexed, "196865", 公开, Format1bppIndexed 指定像素格式为每像素 1 位，并指定它使用索引颜色。因此颜色表中有两种颜色。
.常量 像素格式_4bppIndexed, "197634", 公开, Format4bppIndexed 指定格式为每像素 4 位而且已创建索引。
.常量 像素格式_8bppIndexed, "198659", 公开, Format8bppIndexed 指定格式为每像素 8 位而且已创建索引。因此颜色表中有 256 种颜色。
.常量 像素格式_16bppGrayScale, "1052676", 公开, Format16bppGrayScale 像素格式为每像素 16 位。该颜色信息指定 65536 种灰色调。
.常量 像素格式_16bppRGB555, "135173", 公开, Format16bppRgb555 指定格式为每像素 16 位；红色、绿色和蓝色分量各使用 5 位。剩余的 1 位未使用。
.常量 像素格式_16bppRGB565, "135174", 公开, Format16bppRgb565 指定格式为每像素 16 位；红色分量使用 5 位，绿色分量使用 6 位，蓝色分量使用 5 位。
.常量 像素格式_16bppARGB1555, "397319", 公开, Format16bppArgb1555 像素格式为每像素 16 位。该颜色信息指定 32
.常量 像素格式_24bppRGB, "137224", 公开, Format24bppRgb 指定格式为每像素 24 位；红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppRGB, "139273", 公开, Format32bppRgb 指定格式为每像素 32 位；红色、绿色和蓝色分量各使用 8 位。剩余的 8 位未使用。
.常量 像素格式_32bppARGB, "2498570", 公开, Format32bppArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppPARGB, "925707", 公开, Format32bppPArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_48bppRGB, "1060876", 公开, Format48bppRgb 指定格式为每像素 48 位；红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppARGB, "3424269", 公开, Format64bppArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppPARGB, "1851406", 公开, Format64bppPArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_Max, "16", 公开, Max 此枚举的最大值。
.常量 , , , 
.常量 帧维面_时间, "“{6AEDBD6D-3FB5-418A-83A6-7F45229DC872}”", 公开, 
.常量 帧维面_分辨率, "“{84236F7B-3BD3-428F-8DAB-4EA1439CA315}”", 公开, 
.常量 帧维面_页, "“{7462DC86-6180-4C7E-8E3F-EE7333A7A483}”", 公开, 
.常量 , , , 
.常量 属性值类型_字节型数组, "1", 公开, PropertyTagTypeByte
.常量 属性值类型_文本型, "2", 公开, PropertyTagTypeASCII
.常量 属性值类型_短整数型数组, "3", 公开, PropertyTagTypeShort
.常量 属性值类型_整数型数组, "4", 公开, PropertyTagTypeLong
.常量 属性值类型_整数型对数组, "5", 公开, PropertyTagTypeRational。表示成对的整数数组
.常量 属性值类型_字节集型, "7", 公开, PropertyTagTypeUndefined
.常量 属性值类型_小数型数组, "9", 公开, PropertyTagTypeSLONG
.常量 属性值类型_小数型对数组, "10", 公开, PropertyTagTypeSRational。表示成对的小数数组
.常量 , , , 
.常量 属性标签_新子文件, "254", 公开, PropertyTagNewSubfileType
.常量 属性标签_子文件, "255", 公开, PropertyTagSubfileType
.常量 属性标签_图像宽度, "256", 公开, PropertyTagImageWidth
.常量 属性标签_图像高度, "257", 公开, PropertyTagImageHeight
.常量 属性标签_位深, "258", 公开, PropertyTagBitsPerSample
.常量 属性标签_压缩, "259", 公开, PropertyTagCompression
.常量 属性标签_光度测量解释, "262", 公开, PropertyTagPhotometricInterp
.常量 属性标签_分离黑白, "263", 公开, PropertyTagThreshHolding
.常量 属性标签_抖动或半色调宽, "264", 公开, PropertyTagCellWidth
.常量 属性标签_抖动或半色调高, "265", 公开, PropertyTagCellHeight
.常量 属性标签_填充顺序, "266", 公开, PropertyTagFillOrder
.常量 属性标签_文档名称, "269", 公开, PropertyTagDocumentName
.常量 属性标签_图像描述, "270", 公开, PropertyTagImageDescription
.常量 属性标签_设备制造商, "271", 公开, PropertyTagEquipMake
.常量 属性标签_设备型号, "272", 公开, PropertyTagEquipModel
.常量 属性标签_字节偏移量, "273", 公开, PropertyTagStripOffsets
.常量 属性标签_方向定位, "274", 公开, PropertyTagOrientation
.常量 属性标签_每像素颜色分量, "277", 公开, PropertyTagSamplesPerPixel
.常量 属性标签_每行字节数, "278", 公开, PropertyTagRowsPerStrip
.常量 属性标签_字节总数, "279", 公开, PropertyTagStripBytesCount
.常量 属性标签_最小采样值, "280", 公开, PropertyTagMinSampleValue
.常量 属性标签_最大采样值, "281", 公开, PropertyTagMaxSampleValue
.常量 属性标签_水平分辨率, "282", 公开, PropertyTagXResolution
.常量 属性标签_垂直分辨率, "283", 公开, PropertyTagYResolution
.常量 属性标签_数据配置, "284", 公开, PropertyTagPlanarConfig
.常量 属性标签_页名称, "285", 公开, PropertyTagPageName
.常量 属性标签_水平位置, "286", 公开, PropertyTagXPosition
.常量 属性标签_垂直位置, "287", 公开, PropertyTagYPosition
.常量 属性标签_释放偏移, "288", 公开, PropertyTagFreeOffset
.常量 属性标签_释放字节偏移, "289", 公开, PropertyTagFreeByteCounts
.常量 属性标签_灰度单位, "290", 公开, PropertyTagGrayResponseUnit
.常量 属性标签_灰度密度, "291", 公开, PropertyTagGrayResponseCurve
.常量 属性标签_T4选项, "292", 公开, PropertyTagT4Option
.常量 属性标签_T6选项, "293", 公开, PropertyTagT6Option
.常量 属性标签_分辨率单位, "296", 公开, PropertyTagResolutionUnit
.常量 属性标签_页码, "297", 公开, PropertyTagPageNumber
.常量 属性标签_传输功能, "301", 公开, PropertyTagTransferFuncition
.常量 属性标签_软件名, "305", 公开, PropertyTagSoftwareUsed
.常量 属性标签_创建时间, "306", 公开, PropertyTagDateTime
.常量 属性标签_作者, "315", 公开, PropertyTagArtist
.常量 属性标签_主机名, "316", 公开, PropertyTagHostComputer
.常量 属性标签_预测, "317", 公开, PropertyTagPredictor
.常量 属性标签_白点色度, "318", 公开, PropertyTagWhitePoint
.常量 属性标签_重要颜色, "319", 公开, PropertyTagPrimaryChromaticities
.常量 属性标签_调色板, "320", 公开, PropertyTagColorMap
.常量 属性标签_半色调, "321", 公开, PropertyTagHalftoneHints
.常量 属性标签_平铺宽度, "322", 公开, PropertyTagTileWidth
.常量 属性标签_平铺长度, "323", 公开, PropertyTagTileLength
.常量 属性标签_平铺偏移量, "324", 公开, PropertyTagTileOffset
.常量 属性标签_平铺字节总数, "325", 公开, PropertyTagTileByteCounts
.常量 属性标签_置墨水, "332", 公开, PropertyTagInkSet
.常量 属性标签_墨水名, "333", 公开, PropertyTagInkNames
.常量 属性标签_墨水数, "334", 公开, PropertyTagNumberOfInks
.常量 属性标签_颜色成分, "336", 公开, PropertyTagDotRange
.常量 属性标签_打印环境, "337", 公开, PropertyTagTargetPrinter
.常量 属性标签_额外颜色分量, "338", 公开, PropertyTagExtraSamples
.常量 属性标签_采样格式, "339", 公开, PropertyTagSampleFormat
.常量 属性标签_采样最小值, "340", 公开, PropertyTagSMinSampleValue
.常量 属性标签_采样最大值, "341", 公开, PropertyTagSMaxSampleValue
.常量 属性标签_传输范围, "342", 公开, PropertyTagTransferRange
.常量 , , , 
.常量 属性标签_JPEG压缩, "512", 公开, PropertyTagJPEGProc
.常量 属性标签_JPEG格式, "513", 公开, PropertyTagJPEGInterFormat
.常量 属性标签_JPEG长度, "514", 公开, PropertyTagJPEGInterLength
.常量 属性标签_JPEG重置间隔, "515", 公开, PropertyTagJPEGRestartInterval
.常量 属性标签_JPEG无损预测, "517", 公开, PropertyTagJPEGLosslessPredictors
.常量 属性标签_JPEG点变化值, "518", 公开, PropertyTagJPEGPointTransforms
.常量 属性标签_JPEG量化表, "519", 公开, PropertyTagJPEGQTables
.常量 属性标签_JPEGdc表, "520", 公开, PropertyTagJPEGDCTables
.常量 属性标签_JPEGac表, "521", 公开, PropertyTagJPEGACTables
.常量 , , , 
.常量 属性标签_伽玛值, "769", 公开, PropertyTagGamma
.常量 属性标签_ICC配置文件, "770", 公开, PropertyTagICCProfileDescriptor
.常量 属性标签_SRGB渲染, "771", 公开, PropertyTagSRGBRenderingIntent
.常量 , , , 
.常量 属性标签_图像标题, "800", 公开, PropertyTagImageTitle
.常量 属性标签_版权, "33432", 公开, PropertyTagCopyright
.常量 , , , 
.常量 , , , Adobe公司图像信息标签等
.常量 属性标签_水平分辨率单位, "20481", 公开, PropertyTagResolutionXUnit。1、每英寸，2.每厘米
.常量 属性标签_垂直分辨率单位, "20482", 公开, PropertyTagResolutionYUnit。1、每英寸，2.每厘米
.常量 属性标签_宽度单位, "20483", 公开, PropertyTagResolutionXLengthUnit。1、英寸，2、厘米，3、点，4、派卡，5、列
.常量 属性标签_高度单位, "20484", 公开, PropertyTagResolutionYLengthUnit。1、英寸，2、厘米，3、点，4、派卡，5、列
.常量 属性标签_打印选项, "20485", 公开, PropertyTagPrintFlags
.常量 属性标签_打印版本, "20486", 公开, PropertyTagPrintFlagsVersion
.常量 属性标签_打印裁剪标志, "20487", 公开, PropertyTagPrintFlagsCrop
.常量 属性标签_打印宽度, "20488", 公开, PropertyTagPrintFlagsBleedWidth
.常量 属性标签_打印宽度比例, "20489", 公开, PropertyTagPrintFlagsBleedWidthScale
.常量 属性标签_网格频率, "20490", 公开, PropertyTagHalftoneLPI
.常量 属性标签_网格频率单位, "20491", 公开, PropertyTagHalftoneLPIUnit
.常量 属性标签_网格角度, "20492", 公开, PropertyTagHalftoneDegree
.常量 属性标签_网格形状, "20493", 公开, PropertyTagHalftoneShape
.常量 属性标签_网格杂项, "20494", 公开, PropertyTagHalftoneMisc
.常量 属性标签_网格是否默认屏幕, "20495", 公开, PropertyTagHalftoneScreen
.常量 属性标签_JPEG品质_Adobe, "20496", 公开, PropertyTagJPEGQuality
.常量 属性标签_网格大小, "20497", 公开, PropertyTagGridSize
.常量 属性标签_缩略图格式, "20498", 公开, PropertyTagThumbnailFormat。0、原始RGB，1、JPEG
.常量 属性标签_缩略图宽度, "20499", 公开, PropertyTagThumbnailWidth
.常量 属性标签_缩略图高度, "20500", 公开, PropertyTagThumbnailHeight
.常量 属性标签_缩略图位深, "20501", 公开, PropertyTagThumbnailColorDepth
.常量 属性标签_缩略图色板数量, "20502", 公开, PropertyTagThumbnailPlanes
.常量 属性标签_缩略图行字节数, "20503", 公开, PropertyTagThumbnailRawBytes
.常量 属性标签_缩略图大小, "20504", 公开, PropertyTagThumbnailSize。总字节大小。
.常量 属性标签_缩略图压缩大小, "20505", 公开, PropertyTagThumbnailCompressedSize。
.常量 属性标签_颜色传输功能, "20506", 公开, PropertyTagColorTransferFunction
.常量 属性标签_缩略图数据, "20507", 公开, PropertyTagThumbnailData
.常量 , , , 缩略图热门标签
.常量 属性标签_缩略图_宽度, "20512", 公开, PropertyTagThumbnailImageWidth
.常量 属性标签_缩略图_高度, "20513", 公开, PropertyTagThumbnailImageHeight
.常量 属性标签_缩略图_位深, "20514", 公开, PropertyTagThumbnailBitsPerSample
.常量 属性标签_缩略图_压缩, "20515", 公开, PropertyTagThumbnailCompression
.常量 属性标签_缩略图_光度测量解释, "20516", 公开, PropertyTagThumbnailPhotometricInterp
.常量 属性标签_缩略图_描述, "20517", 公开, PropertyTagThumbnailImageDescription
.常量 属性标签_缩略图_设备制造商, "20518", 公开, PropertyTagThumbnailEquipMake
.常量 属性标签_缩略图_设备制型号, "20519", 公开, PropertyTagThumbnailEquipModel
.常量 属性标签_缩略图_字节偏移量, "20520", 公开, PropertyTagThumbnailStripOffsets
.常量 属性标签_缩略图_方向定位, "20521", 公开, PropertyTagThumbnailOrientation
.常量 属性标签_缩略图_每像素颜色分量, "20522", 公开, PropertyTagThumbnailSamplesPerPixel
.常量 属性标签_缩略图_每行字节数, "20523", 公开, PropertyTagThumbnailRowsPerStrip
.常量 属性标签_缩略图_字节总数, "20524", 公开, PropertyTagThumbnailStripBytesCount
.常量 属性标签_缩略图_水平分辨率, "20525", 公开, PropertyTagThumbnailResolutionX
.常量 属性标签_缩略图_垂直分辨率, "20526", 公开, PropertyTagThumbnailResolutionY
.常量 属性标签_缩略图_数据配置, "20527", 公开, PropertyTagThumbnailPlanarConfig
.常量 属性标签_缩略图_分辨率单位, "20528", 公开, PropertyTagThumbnailResolutionUnit
.常量 属性标签_缩略图_传输功能, "20529", 公开, PropertyTagThumbnailTransferFunction
.常量 属性标签_缩略图_软件名, "20530", 公开, PropertyTagThumbnailSoftwareUsed
.常量 属性标签_缩略图_更改时间, "20531", 公开, PropertyTagThumbnailDateTime
.常量 属性标签_缩略图_作者, "20532", 公开, PropertyTagThumbnailArtist
.常量 属性标签_缩略图_白点色度, "20533", 公开, PropertyTagThumbnailWhitePoint
.常量 属性标签_缩略图_重要颜色, "20534", 公开, PropertyTagThumbnailPrimaryChromaticities
.常量 属性标签_缩略图_YCbCr数据, "20535", 公开, PropertyTagThumbnailYCbCrCoefficients
.常量 属性标签_缩略图_YCbCr采样, "20536", 公开, PropertyTagThumbnailYCbCrSubsampling
.常量 属性标签_缩略图_YCbCr配置, "20537", 公开, PropertyTagThumbnailYCbCrPositioning
.常量 属性标签_缩略图_黑白参考, "20538", 公开, PropertyTagThumbnailRefBlackWhite
.常量 属性标签_缩略图_版权信息, "20539", 公开, PropertyTagThumbnailCopyRight
.常量 , , , 
.常量 属性标签_亮度表, "20624", 公开, PropertyTagLuminanceTable
.常量 属性标签_色度表, "20625", 公开, PropertyTagChrominanceTable
.常量 , , , 
.常量 属性标签_帧延时, "20736", 公开, PropertyTagFrameDelay
.常量 属性标签_循环次数, "20737", 公开, PropertyTagLoopCount。0、无限。
.常量 , , , 
.常量 属性标签_像素单位, "20752", 公开, PropertyTagPixelUnit
.常量 属性标签_水平像素单位, "20753", 公开, PropertyTagPixelPerUnitX
.常量 属性标签_垂直像素单位, "20754", 公开, PropertyTagPixelPerUnitY
.常量 属性标签_直方图调色板, "20755", 公开, PropertyTagPaletteHistogram
.常量 , , , 
.常量 属性标签_曝光时间, "33434", 公开, PropertyTagLuminanceTable。单位秒
.常量 属性标签_焦距, "33437", 公开, PropertyTagExifFNumber
.常量 属性标签_曝光模式, "34850", 公开, PropertyTagExifExposureProg。0.没有定义，1.手动，2.正常程序，3.光圈优先，4.快门优先，5.创意程序，6.运动模式，7.人像模式，8.风景模式
.常量 属性标签_测光, "34852", 公开, PropertyTagExifSpectralSense
.常量 属性标签_感光度, "34855", 公开, PropertyTagExifISOSpeed
.常量 属性标签_光转换能力, "34856", 公开, PropertyTagExifOECF
.常量 属性标签_版本, "36864", 公开, PropertyTagExifVer
.常量 属性标签_原始时间, "36867", 公开, PropertyTagExifDTOrig
.常量 属性标签_数字时间, "36868", 公开, PropertyTagExifDTDigitized
.常量 属性标签_扩展压缩, "37121", 公开, PropertyTagExifCompConfig
.常量 属性标签_压缩BPP, "37122", 公开, PropertyTagExifCompBPP
.常量 属性标签_快门速度, "37377", 公开, PropertyTagExifShutterSpeed
.常量 属性标签_光圈, "37378", 公开, PropertyTagExifAperture
.常量 属性标签_亮度, "37379", 公开, PropertyTagExifBrightness。-99.99到99.99
.常量 属性标签_曝光偏差, "37380", 公开, PropertyTagExifExposureBias。-99.99到99.99
.常量 属性标签_最大光圈, "37381", 公开, PropertyTagExifMaxAperture。00.00到99.99
.常量 属性标签_自动对焦, "37382", 公开, PropertyTagExifSubjectDist
.常量 属性标签_测光模式, "37383", 公开, PropertyTagExifMeteringMode。0.未知，1.正常，2.中央重点测光，3.点测光，4.多分区，5.平均测光，6.局部测光。
.常量 属性标签_白平衡, "37384", 公开, PropertyTagExifLightSource。0.未知，1.日光，2.荧光灯，3.钨丝灯，17.标准A，18.标准B，19.标准C，20.D55，21.D65，22.D75。
.常量 属性标签_闪光灯, "37385", 公开, PropertyTagExifFlash
.常量 属性标签_实际焦距, "37386", 公开, PropertyTagExifFocalLength
.常量 属性标签_制造商记录, "37500", 公开, PropertyTagExifMakerNote
.常量 属性标签_注释标记, "37510", 公开, PropertyTagExifUserComment
.常量 属性标签_创建时间2, "37520", 公开, PropertyTagExifDTSubsec
.常量 属性标签_原始时间2, "37521", 公开, PropertyTagExifDTOrigSS
.常量 属性标签_数字时间2, "37522", 公开, PropertyTagExifDTDigSS
.常量 属性标签_格式版本, "40960", 公开, PropertyTagExifFPXVer
.常量 属性标签_颜色空间, "40961", 公开, PropertyTagExifColorSpace
.常量 属性标签_有效宽度, "40962", 公开, PropertyTagExifPixXDim
.常量 属性标签_有效高度, "40963", 公开, PropertyTagExifPixYDim
.常量 属性标签_相关音频文件, "40964", 公开, PropertyTagExifRelatedWav
.常量 属性标签_偏移块, "40965", 公开, PropertyTagExifInterop
.常量 属性标签_闪光量, "41483", 公开, PropertyTagExifFlashEnergy
.常量 属性标签_空间频率表, "41484", 公开, PropertyTagExifSpatialFR
.常量 属性标签_焦平面X分辨率, "41486", 公开, PropertyTagExifFocalXRes
.常量 属性标签_焦平面Y分辨率, "41487", 公开, PropertyTagExifFocalYRes
.常量 属性标签_焦平面分辨率单位, "41488", 公开, PropertyTagExifFocalResUnit
.常量 属性标签_主要线路, "41492", 公开, PropertyTagExifSubjectLoc
.常量 属性标签_曝光指数, "41493", 公开, PropertyTagExifExposureIndex
.常量 属性标签_感光元件, "41495", 公开, PropertyTagExifSensingMethod。1.未定义，2.单芯片，3.双芯片，4.三芯片，5.连续色彩，7.三线，8.线性连续色彩
.常量 属性标签_图像源, "41728", 公开, PropertyTagExifFileSource
.常量 属性标签_作品类型, "41729", 公开, PropertyTagExifSceneType
.常量 属性标签_色彩滤镜阵列, "41730", 公开, PropertyTagExifCfaPattern
.常量 , , , 
.常量 旋转翻转_不旋转不翻转, "0", 公开, RotateNoneFlipNone
.常量 旋转翻转_旋转90度不翻转, "1", 公开, Rotate90FlipNone
.常量 旋转翻转_旋转180度不翻转, "2", 公开, Rotate180FlipNone
.常量 旋转翻转_旋转270度不翻转, "3", 公开, Rotate270FlipNone
.常量 旋转翻转_不旋转水平翻转, "4", 公开, RotateNoneFlipX
.常量 旋转翻转_旋转90度水平翻转, "5", 公开, Rotate90FlipX
.常量 旋转翻转_旋转180度水平翻转, "6", 公开, Rotate180FlipX
.常量 旋转翻转_旋转270度水平翻转, "7", 公开, Rotate270FlipX
.常量 旋转翻转_不旋转垂直翻转, "6", 公开, RotateNoneFlipY
.常量 旋转翻转_旋转90度垂直翻转, "7", 公开, Rotate90FlipY
.常量 旋转翻转_旋转180度垂直翻转, "4", 公开, Rotate180FlipY
.常量 旋转翻转_旋转270度垂直翻转, "5", 公开, Rotate270FlipY
.常量 旋转翻转_不旋转水平和垂直翻转, "2", 公开, RotateNoneFlipXY
.常量 旋转翻转_旋转90度水平和垂直翻转, "3", 公开, Rotate90FlipXY
.常量 旋转翻转_旋转180度水平和垂直翻转, "0", 公开, Rotate180FlipXY
.常量 旋转翻转_旋转270度水平和垂直翻转, "1", 公开, Rotate270FlipXY
.常量 , , , 
.常量 编码器_压缩, "“{E09D739D-CCD4-44EE-8EBA-3FBF8BE4FC58}”", 公开, EncoderCompression
.常量 编码器_色深, "“{66087055-AD66-4C7C-9A18-38A2310B8337}”", 公开, EncoderColorDepth
.常量 编码器_扫描方式, "“{3A4E2661-3109-4E56-8536-42C156E7DCFA}”", 公开, EncoderScanMethod
.常量 编码器_版本, "“{24D18C76-814A-41A4-BF53-1C219CCCF797}”", 公开, EncoderVersion
.常量 编码器_呈现方式, "“{6D42C53A-229A-4825-8BB7-5C99E2B9A8B8}”", 公开, EncoderRenderMethod
.常量 编码器_品质, "“{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}”", 公开, EncoderQuality
.常量 编码器_转换, "“{8D0EB2D1-A58E-4EA8-AA14-108074B7B6F9}”", 公开, EncoderTransformation
.常量 编码器_亮度表, "“{EDB33BCE-0266-4A77-B904-27216099E717}”", 公开, EncoderLuminanceTable
.常量 编码器_色度表, "“{F2E455DC-09B3-4316-8260-676ADA32481C}”", 公开, EncoderChrominanceTable
.常量 编码器_保存标志, "“{292266FC-AC40-47BF-8CFC-A85B89A655DE}”", 公开, EncoderSaveFlag
.常量 , , , 
.常量 编码器参数值类型_字节型, "1", 公开, EncoderParameterValueTypeByte
.常量 编码器参数值类型_字符型, "2", 公开, EncoderParameterValueTypeASCII
.常量 编码器参数值类型_短整数型, "3", 公开, EncoderParameterValueTypeShort
.常量 编码器参数值类型_整数型, "4", 公开, EncoderParameterValueTypeLong
.常量 编码器参数值类型_整数对, "5", 公开, EncoderParameterValueTypeRational。为整数型数组，有两个成员。第一个表示最小值，第二个表示最大值。
.常量 编码器参数值类型_整数范围, "6", 公开, EncoderParameterValueTypeLongRange。为整数型数组，有两个成员。第一个表示低32位，第二个表示高32位。
.常量 编码器参数值类型_未定义, "7", 公开, EncoderParameterValueTypeUndefined。
.常量 编码器参数值类型_整数对范围, "8", 公开, EncoderParameterValueTypeRationalRange。
.常量 , , , 
.常量 编码器值_颜色类型CMYK, "0", 公开, EncoderValueColorTypeCMYK。GDI+1.0没有使用。
.常量 编码器值_颜色类型YCCK, "1", 公开, EncoderValueColorTypeYCCK。GDI+1.0没有使用。
.常量 编码器值_压缩LZW, "2", 公开, EncoderValueCompressionLZW。对于TIF图像的LZW压缩方法
.常量 编码器值_压缩CCITT3, "3", 公开, EncoderValueCompressionCCITT3。对于TIF图像的CCITT3压缩方法
.常量 编码器值_压缩CCITT4, "4", 公开, EncoderValueCompressionCCITT4。对于TIF图像的CCITT4压缩方法
.常量 编码器值_压缩RLE, "5", 公开, EncoderValueCompressionRle。对于TIF图像的RLE压缩方法
.常量 编码器值_压缩无, "6", 公开, EncoderValueCompressionNone。对于TIF图像指定无压缩
.常量 编码器值_扫描方式隔行扫描, "7", 公开, EncoderValueScanMethodInterlaced。GDI+1.0没有使用。
.常量 编码器值_扫描方式逐行扫描, "8", 公开, EncoderValueScanMethodNonInterlaced。GDI+1.0没有使用。
.常量 编码器值_版本GIF87, "9", 公开, EncoderValueVersionGif87。GDI+1.0没有使用。
.常量 编码器值_版本GIF89, "10", 公开, EncoderValueVersionGif89。GDI+1.0没有使用。
.常量 编码器值_渲染, "11", 公开, EncoderValueRenderProgressive。GDI+1.0没有使用。
.常量 编码器值_不渲染, "12", 公开, EncoderValueRenderNonProgressive。GDI+1.0没有使用。
.常量 编码器值_旋转90度, "13", 公开, EncoderValueTransformRotate90。对于JPEG图像无损逆时针旋转90度。
.常量 编码器值_旋转180度, "14", 公开, EncoderValueTransformRotate180。对于JPEG图像无损旋转180度
.常量 编码器值_旋转270度, "15", 公开, EncoderValueTransformRotate270。对于JPEG图像无损逆时针旋转270度。
.常量 编码器值_水平翻转, "16", 公开, EncoderValueTransformFlipHorizontal。对于JPEG图像无损水平翻转。
.常量 编码器值_垂直翻转, "17", 公开, EncoderValueTransformFlipVertical。对于JPEG图像无损垂直翻转。
.常量 编码器值_多帧编码, "18", 公开, EncoderValueMultiFrame
.常量 编码器值_最后一帧, "19", 公开, EncoderValueLastFrame
.常量 编码器值_关闭, "20", 公开, EncoderValueFlush。指定的编码对象是被关闭的
.常量 编码器值_帧维面延时, "21", 公开, EncoderValueFrameDimensionTime。GDI+1.0没有使用。
.常量 编码器值_帧维面分辨率, "22", 公开, EncoderValueFrameDimensionResolution。GDI+1.0没有使用。
.常量 编码器值_帧维面页, "23", 公开, EncoderValueFrameDimensionPage。对于TIF图像指定页。
.常量 , , , 
.常量 画刷类型_固定色, "0", 公开, BrushTypeSolidColor
.常量 画刷类型_阴影, "1", 公开, BrushTypeHatchFill
.常量 画刷类型_图像纹理, "2", 公开, BrushTypeTextureFill
.常量 画刷类型_路径渐变, "3", 公开, BrushTypePathGradient
.常量 画刷类型_线性渐变, "4", 公开, BrushTypeLinearGradient
.常量 , , , 
.常量 阴影风格_水平线, "0", 公开, Horizontal 水平线的图案。
.常量 阴影风格_垂直线, "1", 公开, Vertical 垂直线的图案。
.常量 阴影风格_左斜线, "2", 公开, ForwardDiagonal 从左上到右下的对角线的线条图案。
.常量 阴影风格_右斜线, "3", 公开, BackwardDiagonal 从右上到左下的对角线的线条图案。
.常量 阴影风格_十字线, "4", 公开, Cross 指定交叉的水平线和垂直线。
.常量 阴影风格_交叉斜线, "5", 公开, DiagonalCross 指定互相交叉的正向对角线和反向对角线。这些直线是锯齿消除的。
.常量 阴影风格_百分05阴影, "6", 公开, Percent05 指定 5% 阴影。前景色与背景色的比例为 5:100。
.常量 阴影风格_百分10阴影, "7", 公开, Percent10 指定 10% 阴影。前景色与背景色的比例为 10:100。
.常量 阴影风格_百分20阴影, "8", 公开, Percent20 指定 20% 阴影。前景色与背景色的比例为 20:100。
.常量 阴影风格_百分25阴影, "9", 公开, Percent25 指定 25% 阴影。前景色与背景色的比例为 25:100。
.常量 阴影风格_百分30阴影, "10", 公开, Percent30 指定 30% 阴影。前景色与背景色的比例为 30:100。
.常量 阴影风格_百分40阴影, "11", 公开, Percent40 指定 40% 阴影。前景色与背景色的比例为 40:100。
.常量 阴影风格_百分50阴影, "12", 公开, Percent50 指定 50% 阴影。前景色与背景色的比例为 50:100。
.常量 阴影风格_百分60阴影, "13", 公开, Percent60 指定 60% 阴影。前景色与背景色的比例为 60:100。
.常量 阴影风格_百分70阴影, "14", 公开, Percent70 指定 70% 阴影。前景色与背景色的比例为 70:100。
.常量 阴影风格_百分75阴影, "15", 公开, Percent75 指定 75% 阴影。前景色与背景色的比例为 75:100。
.常量 阴影风格_百分80阴影, "16", 公开, Percent80 指定 80% 阴影。前景色与背景色的比例为 80:100。
.常量 阴影风格_百分90阴影, "17", 公开, Percent90 指定 90% 阴影。前景色与背景色的比例为 90:100。
.常量 阴影风格_细向下对角线, "18", 公开, LightDownwardDiagonal
.常量 阴影风格_细向上对角线, "19", 公开, LightUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，但这些直线不是锯齿消除的。
.常量 阴影风格_粗向下对角线, "20", 公开, DarkDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其两边夹角比 ForwardDiagonal 小 50%，宽度是其两倍。此阴影图案不是锯齿消除的。
.常量 阴影风格_粗向上对角线, "21", 公开, DarkUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，宽度是其两倍，但这些直线不是锯齿消除的。
.常量 阴影风格_宽向下对角线, "22", 公开, WideDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其间距与阴影样式 ForwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_宽向上对角线, "23", 公开, WideUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其间距与阴影样式 BackwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_细垂直线, "24", 公开, LightVertical 指定垂直线的两边夹角比 Vertical 小 50%。
.常量 阴影风格_细水平线, "25", 公开, LightHorizontal 指定水平线，其两边夹角比 Horizontal 小 50%。
.常量 阴影风格_密垂直线, "26", 公开, NarrowVertical 指定垂直线的两边夹角比阴影样式 Vertical 小 75%（或者比 LightVertical 小 25%）。
.常量 阴影风格_密水平线, "27", 公开, NarrowHorizontal 指定水平线的两边夹角比阴影样式 Horizontal 小 75%（或者比 LightHorizontal 小 25%）。
.常量 阴影风格_粗垂直线, "28", 公开, DarkVertical 指定垂直线的两边夹角比 Vertical 小 50% 并且宽度是其两倍。
.常量 阴影风格_粗水平线, "29", 公开, DarkHorizontal 指定水平线的两边夹角比水平小 50% 并且宽度是 HatchStyleHorizontal 的两倍。
.常量 阴影风格_右斜虚线, "30", 公开, DashedDownwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向右倾斜。
.常量 阴影风格_左斜虚线, "31", 公开, DashedUpwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向左倾斜。
.常量 阴影风格_水平虚线, "32", 公开, DashedHorizontal 指定虚线水平线。
.常量 阴影风格_垂直虚线, "33", 公开, DashedVertical 指定虚线垂直线。
.常量 阴影风格_小五彩纸屑, "34", 公开, SmallConfetti 指定带有五彩纸屑外观的阴影。
.常量 阴影风格_大五彩纸屑, "35", 公开, LargeConfetti 指定具有五彩纸屑外观的阴影，并且它是由比 SmallConfetti 更大的片构成的。
.常量 阴影风格_曲线, "36", 公开, ZigZag 指定由 Z 字形构成的水平线。
.常量 阴影风格_波浪线, "37", 公开, Wave 指定由代字号“~”构成的水平线。
.常量 阴影风格_左斜砖块, "38", 公开, DiagonalBrick 指定具有分层砖块外观的阴影，它从顶点到底点向左倾斜。
.常量 阴影风格_水平砖块, "39", 公开, HorizontalBrick 指定具有水平分层砖块外观的阴影。
.常量 阴影风格_编织, "40", 公开, Weave 指定具有织物外观的阴影。
.常量 阴影风格_花格子, "41", 公开, Plaid 指定具有格子花呢材料外观的阴影。
.常量 阴影风格_草皮, "42", 公开, Divot 指定具有草皮层外观的阴影。
.常量 阴影风格_十字点线, "43", 公开, DottedGrid 指定互相交叉的水平线和垂直线，每一直线都是由点构成的。
.常量 阴影风格_交叉点线, "44", 公开, DottedDiamond 指定互相交叉的正向对角线和反向对角线，每一对角线都是由点构成的。
.常量 阴影风格_瓦片, "45", 公开, Shingle 指定带有对角分层鹅卵石外观的阴影，它从顶点到底点向右倾斜。
.常量 阴影风格_网格, "46", 公开, Trellis 指定具有格架外观的阴影。
.常量 阴影风格_球体, "47", 公开, Sphere 指定具有球体彼此相邻放置的外观的阴影。
.常量 阴影风格_小网格, "48", 公开, SmallGrid 指定互相交叉的水平线和垂直线，其两边夹角比阴影样式 Cross 小 50%。
.常量 阴影风格_小棋盘, "49", 公开, SmallCheckerBoard 指定带有棋盘外观的阴影。
.常量 阴影风格_大棋盘, "50", 公开, LargeCheckerBoard 指定具有棋盘外观的阴影，棋盘所具有的方格大小是 SmallCheckerBoard 大小的两倍。
.常量 阴影风格_有锯齿交叉斜线, "51", 公开, OutlinedDiamond 指定互相交叉的正向对角线和反向对角线，但这些对角线不是锯齿消除的。
.常量 阴影风格_对角棋盘, "52", 公开, SolidDiamond 指定具有对角放置的棋盘外观的阴影。
.常量 阴影风格_Total, "53", , 
.常量 阴影风格_大网格, "4", 公开, LargeGrid 指定阴影样式 Cross。
.常量 阴影风格_Min, "0", 公开, Min 指定阴影样式 Horizonal。
.常量 阴影风格_Max, "52", 公开, Max 指定阴影样式 SolidDiamond。
.常量 , , , 
.常量 环绕模式_平铺, "0", 公开, Tile 平铺渐变或纹理。
.常量 环绕模式_平铺水平翻转, "1", 公开, TileFlipX 水平反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_平铺垂直翻转, "2", 公开, TileFlipY 垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_平铺水平垂直翻转, "3", 公开, TileFlipXY 水平和垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_固定, "4", 公开, Clamp 纹理或渐变没有平铺。
.常量 , , , 
.常量 线性渐变模式_从左到右, "0", 公开, Horizontal 指定从左到右的渐变。
.常量 线性渐变模式_从上到下, "1", 公开, Vertical 指定从上到下的渐变。
.常量 线性渐变模式_从左上到右下, "2", 公开, ForwardDiagonal 指定从左上到右下的渐变。
.常量 线性渐变模式_从右上到左下, "3", 公开, BackwardDiagonal 指定从右上到左下的渐变。
.常量 , , , 
.常量 线帽样式_平线帽, "0", 公开, LineCapFlat
.常量 线帽样式_方线帽, "1", 公开, LineCapSquare
.常量 线帽样式_圆线帽, "2", 公开, LineCapRound
.常量 线帽样式_三角线帽, "3", 公开, LineCapTriangle
.常量 线帽样式_没有锚, "16", 公开, LineCapNoAnchor
.常量 线帽样式_方锚头帽, "17", 公开, LineCapSquareAnchor
.常量 线帽样式_圆锚头帽, "18", 公开, LineCapRoundAnchor
.常量 线帽样式_菱形锚头帽, "19", 公开, LineCapDiamondAnchor
.常量 线帽样式_箭头状锚头帽, "20", 公开, LineCapArrowAnchor
.常量 线帽样式_自定义线帽, "255", 公开, LineCapCustom
.常量 , , , 
.常量 虚线帽样式_方线帽, "0", 公开, DashCapFlat
.常量 虚线帽样式_圆线帽, "2", 公开, DashCapRound
.常量 虚线帽样式_三角线帽, "3", 公开, DashCapTriangle
.常量 , , , 
.常量 连线方式_斜接, "0", 公开, LineJoinMiter
.常量 连线方式_斜角, "1", 公开, LineJoinBevel
.常量 连线方式_圆角, "2", 公开, LineJoinRound
.常量 连线方式_斜接截断, "3", 公开, LineJoinMiterClipped
.常量 , , , 
.常量 画笔对齐方式_居中, "0", 公开, 
.常量 画笔对齐方式_内侧, "1", 公开, 
.常量 画笔对齐方式_外侧, "2", 公开, 
.常量 画笔对齐方式_左侧, "3", 公开, 
.常量 画笔对齐方式_右侧, "4", 公开, 
.常量 , , , 
.常量 画笔类型_固色, "0", 公开, 
.常量 画笔类型_阴影, "1", 公开, 
.常量 画笔类型_图像纹理, "2", 公开, 
.常量 画笔类型_路径渐变, "3", 公开, 
.常量 画笔类型_线性渐变, "4", 公开, 
.常量 画笔类型_未知, "-1", 公开, 
.常量 , , , 
.常量 虚线类型_实线, "0", 公开, DashStyleSolid
.常量 虚线类型_划线, "1", 公开, DashStyleDash
.常量 虚线类型_点线, "2", 公开, DashStyleDot
.常量 虚线类型_点划线, "3", 公开, DashStyleDashDot
.常量 虚线类型_双点划线, "4", 公开, DashStyleDashDotDot
.常量 虚线类型_自定义, "5", 公开, DashStyleCustom
.常量 , , , 
.常量 路径点类型_开始, "0", 公开, PathPointTypeStart
.常量 路径点类型_直线, "1", 公开, PathPointTypeLine
.常量 路径点类型_贝塞尔曲线, "2", 公开, PathPointTypeBezier
.常量 路径点类型_掩膜类型, "3", 公开, PathPointTypePathTypeMask
.常量 路径点类型_虚线模式, "4", 公开, PathPointTypePathDashMode。没有使用
.常量 路径点类型_掩膜, "5", 公开, PathPointTypePathMarker
.常量 路径点类型_关闭子路径, "6", 公开, PathPointTypeCloseSubpath
.常量 路径点类型_贝塞尔曲线3, "7", 公开, PathPointTypeBezier3
.常量 , , , 
.常量 文本格式标志_方向右到左, "1", 公开, StringFormatFlagsDirectionRightToLeft
.常量 文本格式标志_方向垂直, "2", 公开, StringFormatFlagsDirectionVertical
.常量 文本格式标志_允许部分延伸, "4", 公开, StringFormatFlagsNoFitBlackBox
.常量 文本格式标志_Unicode, "32", 公开, StringFormatFlagsDisplayFormatControl
.常量 文本格式标志_禁止不支持字符, "1024", 公开, StringFormatFlagsNoFontFallback
.常量 文本格式标志_包含结尾空字符, "2048", 公开, StringFormatFlagsMeasureTrailingSpaces
.常量 文本格式标志_不换行, "4096", 公开, StringFormatFlagsNoWrap
.常量 文本格式标志_整行布局, "8192", 公开, StringFormatFlagsLineLimit。若要确保看到的都是整行，请指定此值，并仔细地提供格式化矩形，使其高度至少为一个行高
.常量 文本格式标志_不裁剪, "16384", 公开, StringFormatFlagsNoClip
.常量 , , , 
.常量 文本对齐_靠近, "0", 公开, StringAlignmentNear
.常量 文本对齐_居中, "1", 公开, StringAlignmentCenter 
.常量 文本对齐_远离, "2", 公开, StringAlignmentFar 
.常量 , , , 
.常量 文本修整_无, "0", 公开, StringTrimmingNone。指定不进行任何修整。
.常量 文本修整_字符, "1", 公开, StringTrimmingCharacter。指定将文本修整成最接近的字符。
.常量 文本修整_单词, "2", 公开, StringTrimmingWord。指定将文本修整成最接近的单词。
.常量 文本修整_字符和省略号, "3", 公开, StringTrimmingEllipsisCharacter。指定将文本修整成最接近的字符，并在被修整的行的末尾插入一个省略号。 
.常量 文本修整_单词和省略号, "4", 公开, StringTrimmingEllipsisWord。指定将文本修整成最接近的单词，并在被修整的行的末尾插入一个省略号。
.常量 文本修整_路径和省略号, "5", 公开, StringTrimmingEllipsisPath。中心从被修整的行移除并用省略号替换。这种算法尽可能多地保留了行中的最后一个由斜杠分隔的段。
.常量 , , , 
.常量 热键前缀_无, "0", 公开, HotkeyPrefixNone
.常量 热键前缀_显示, "1", 公开, HotkeyPrefixShow
.常量 热键前缀_隐藏, "2", 公开, HotkeyPrefixHide
.常量 , , , 
.常量 文本数字替换_用户定义, "0", 公开, StringDigitSubstituteUser
.常量 文本数字替换_无, "1", 公开, StringDigitSubstituteNone 
.常量 文本数字替换_国家, "2", 公开, StringDigitSubstituteNational
.常量 文本数字替换_本地, "3", 公开, StringDigitSubstituteTraditional
.常量 , , , 
.常量 扭曲模式_透视, "0", 公开, 
.常量 扭曲模式_双线性, "1", 公开, 
.常量 , , , 
.常量 图像锁定模式_读, "1", 公开, ImageLockModeRead
.常量 图像锁定模式_写, "2", 公开, ImageLockModeWrite
.常量 图像锁定模式_用户分配缓冲区, "4", 公开, ImageLockModeUserInputBuf 
.常量 , , , 
.常量 EMF类型_Emf, "3", 公开, EmfTypeEmfOnly
.常量 EMF类型_EmfPlusOnly, "4", 公开, EmfTypeEmfPlusOnly
.常量 EMF类型_EmfPlusDual, "5", 公开, EmfTypeEmfPlusDual
.常量 , , , 
.常量 图元文件单位_像素, "2", 公开, MetafileFrameUnitPixel
.常量 图元文件单位_点, "3", 公开, MetafileFrameUnitPoint。1/72英寸
.常量 图元文件单位_英寸, "4", 公开, MetafileFrameUnitInch
.常量 图元文件单位_文档, "5", 公开, MetafileFrameUnitDocument。1/300英寸
.常量 图元文件单位_毫米, "6", 公开, MetafileFrameUnitMillimeter
.常量 图元文件单位_GDI, "7", 公开, MetafileFrameUnitGdi。0.01毫米
.常量 , , , 
.常量 图元文件类型_无效, "0", 公开, MetafileTypeInvalid
.常量 图元文件类型_Wmf, "1", 公开, MetafileTypeWmf
.常量 图元文件类型_WmfAldus, "2", 公开, MetafileTypeWmfAldus
.常量 图元文件类型_Emf, "3", 公开, MetafileTypeEmf
.常量 图元文件类型_EmfPlusOnly, "4", 公开, MetafileTypeEmfPlusOnly
.常量 图元文件类型_EmfPlusDual, "5", 公开, MetafileTypeEmfPlusDual
.常量 , , , 
.常量 DEFAULT_GUI_FONT, "17", , 字体_缺省字体
.常量 , , , 
.常量 控制文本标志_查找映射表, "1", 公开, DriverStringOptionsCmapLookup。必须包含此标志，原因暂时不明
.常量 控制文本标志_垂直显示, "2", 公开, DriverStringOptionsVertical
.常量 控制文本标志_预先实现, "4", 公开, DriverStringOptionsRealizedAdvance。只提供第一个字符的坐标。
.常量 控制文本标志_高质量, "8", 公开, DriverStringOptionsLimitSubpixel


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 GDI_点, 公开, POINT；POINTAPI
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标, 整数型, , , 

数据类型 GDI_矩形2, , RECT
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 大小, , SIZE
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 尺寸_, , SIZE
    .成员 宽度, 整数型, , , width
    .成员 高度, 整数型, , , height

数据类型 坐标_, , POINTAPI
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 位图结构_, , BITMAP
    .成员 bmType, 整数型, , , 一定是0
    .成员 位图宽度, 整数型, , , bmWidth
    .成员 位图高度, 整数型, , , bmHeight
    .成员 bmWidthBytes, 整数型, , , 
    .成员 bmPlanes, 整数型, , , 
    .成员 bmBitsPixel, 整数型, , , 
    .成员 bmBits, 字节型, , , 

数据类型 设备初始设置_, , DEVMODE
    .成员 dmDeviceName, 字节型, , "32", 
    .成员 dmSpecVersion, 整数型, , , 
    .成员 dmDriverVersion, 整数型, , , 
    .成员 dmSize, 整数型, , , 
    .成员 dmDriverExtra, 整数型, , , 
    .成员 dmFields, 整数型, , , 
    .成员 dmOrientation, 整数型, , , 
    .成员 dmPaperSize, 整数型, , , 
    .成员 dmPaperLength, 整数型, , , 
    .成员 dmPaperWidth, 整数型, , , 
    .成员 dmScale, 整数型, , , 
    .成员 dmCopies, 整数型, , , 
    .成员 dmDefaultSource, 整数型, , , 
    .成员 dmPrintQuality, 整数型, , , 
    .成员 dmColor, 整数型, , , 
    .成员 dmDuplex, 整数型, , , 
    .成员 dmYResolution, 整数型, , , 
    .成员 dmTTOption, 整数型, , , 
    .成员 dmCollate, 整数型, , , 
    .成员 dmFormName, 字节型, , "32", 
    .成员 dmUnusedPadding, 整数型, , , 
    .成员 dmBitsPerPel, 整数型, , , 
    .成员 dmPelsWidth, 整数型, , , 
    .成员 dmPelsHeight, 整数型, , , 
    .成员 dmDisplayFlags, 整数型, , , 
    .成员 dmDisplayFrequency, 整数型, , , 

数据类型 设备无关位图_, , BITMAPINFOHEADER
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 整数型, , , 
    .成员 biBitCount, 整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 位图信息_, , BITMAPINFO
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 
    .成员 rgbBlue, 字节型, , , 
    .成员 rgbGreen, 字节型, , , 
    .成员 rgbRed, 字节型, , , 
    .成员 rgbReserved, 字节型, , , 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

数据类型 图标信息_, , ICONINFO
    .成员 fIcon, 整数型, , , 
    .成员 xHotspot, 整数型, , , 
    .成员 yHotspot, 整数型, , , 
    .成员 hbmMask, 整数型, , , 
    .成员 hbmColor, 整数型, , , 

数据类型 文字区_, , DRAWTEXTPARAMS
    .成员 结构尺寸, 整数型, , , cbSize
    .成员 输入长度, 整数型, , , iTabLength
    .成员 左边空, 整数型, , , iLeftMargin
    .成员 右边空, 整数型, , , iRightMargin
    .成员 间隔长度, 整数型, , , uiLengthDrawn

数据类型 GDI_画刷属性, 公开, 刷子样式
    .成员 刷子样式, 整数型, , , 参见常量表
    .成员 颜色值, 整数型, , , 颜色值
    .成员 刷子花纹, 整数型, , , 参见常量表，只有 刷子样式_花纹 才需要，否则提供任意值即可

数据类型 转换数据_, , XFORM
    .成员 平行缩放, 小数型, , , eM11 
    .成员 平行旋转, 小数型, , , eM12 
    .成员 垂直旋转, 小数型, , , eM21 
    .成员 垂直缩放, 小数型, , , eM22 
    .成员 平行, 小数型, , , eDx 
    .成员 垂直, 小数型, , , eDy 

数据类型 区域数据_, , RGNDATA 本数据类型嵌套了两个其它数据类型，调用时请注意
    .成员 dwSize, 整数型, , , 区域大小
    .成员 iType, 整数型, , , 区域类型
    .成员 nCount, 整数型, , , 区域数量
    .成员 nRgnSize, 整数型, , , 缓冲器大小
    .成员 区域左边, 整数型, , , left
    .成员 区域顶边, 整数型, , , top
    .成员 区域右边, 整数型, , , right
    .成员 区域底边, 整数型, , , bottom
    .成员 区域数据缓冲区左边, 整数型, , , left
    .成员 区域数据缓冲区顶边, 整数型, , , top
    .成员 区域数据缓冲区右边, 整数型, , , right
    .成员 区域数据缓冲区底边, 整数型, , , bottom

数据类型 逻辑字体_, , LOGFONT
    .成员 高度, 整数型, , , lfHeight
    .成员 宽度, 整数型, , , lfWidth
    .成员 控制摆, 整数型, , , lfEscapement
    .成员 定方位, 整数型, , , lfOrientation
    .成员 加粗, 整数型, , , lfWeight
    .成员 斜体, 字节型, , , lfItalic
    .成员 下划线, 字节型, , , lfUnderline
    .成员 袭击出, 字节型, , , lfStrikeOut
    .成员 零碎工作组合, 字节型, , , lfCharSet
    .成员 出自精确, 字节型, , , lfOutPrecision
    .成员 修剪精确, 字节型, , , lfClipPrecision
    .成员 性质, 字节型, , , lfQuality
    .成员 间距, 字节型, , , lfPitchAndFamily
    .成员 字体名称, 字节型, , "32", 用LF_FACESIZE,lfFaceName?

数据类型 长整数型_, , LARGE_INTEGER，此数据类型的意思请看msdn帮助
    .成员 低三十二位, 整数型, , , lowpart
    .成员 高三十二位, 整数型, , , highpart

数据类型 GDI_矩形, 公开, RECT
    .成员 左边, 整数型, , , Left
    .成员 顶边, 整数型, , , Top
    .成员 右边, 整数型, , , Right
    .成员 底边, 整数型, , , Bottom

数据类型 GDI_字体, 公开, 
    .成员 字符宽度, 整数型, , , 
    .成员 字符高度, 整数型, , , 
    .成员 斜度, 整数型, , , 
    .成员 字形_, 整数型, , , 详见常量表，字形_*
    .成员 颜色, 整数型, , , 颜色值
    .成员 是否斜体, 逻辑型, , , 
    .成员 是否下划线, 逻辑型, , , 
    .成员 是否删除线, 逻辑型, , , 
    .成员 字体名称, 文本型, , , 

数据类型 GDI_渐变数据, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 
    .成员 r, 短整数型, , , 0-255
    .成员 g, 短整数型, , , 0-255
    .成员 b, 短整数型, , , 0-255
    .成员 保留, 字节型, , , 该值无效，保留

数据类型 PAINTSTRUCT, , 重绘数据
    .成员 hdc, 整数型, , , 
    .成员 fErase, 整数型, , , 
    .成员 rcPaint, GDI_矩形, , , 
    .成员 fRestore, 整数型, , , 
    .成员 fIncUpdate, 整数型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 GDI_混合模式, , 
    .成员 BlendOp, 字节型, , , 0
    .成员 BlendFlags, 字节型, , , 0
    .成员 SourceConstantAlpha, 字节型, , , 0-255
    .成员 AlphaFormat, 字节型, , , 1

数据类型 GDI_RGB, 公开, 
    .成员 R, 整数型, , , 
    .成员 G, 整数型, , , 
    .成员 B, 整数型, , , 

数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 1
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 GP_坐标F, 公开, PointF
    .成员 横坐标, 小数型, , , 
    .成员 纵坐标, 小数型, , , 

数据类型 GP_坐标L, 公开, PointL
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标, 整数型, , , 

数据类型 GP_矩形F, 公开, RectF
    .成员 左边, 小数型, , , left
    .成员 顶边, 小数型, , , top
    .成员 宽度, 小数型, , , Width
    .成员 高度, 小数型, , , Height

数据类型 GP_矩形L, 公开, RectL
    .成员 左边, 整数型, , , left
    .成员 顶边, 整数型, , , top
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height

数据类型 GP_矩形16, 公开, Rect16
    .成员 左边, 短整数型, , , left
    .成员 顶边, 短整数型, , , top
    .成员 宽度, 短整数型, , , Width
    .成员 高度, 短整数型, , , Height

数据类型 GP_尺寸F, 公开, SizeF
    .成员 宽度, 小数型, , , Width
    .成员 高度, 小数型, , , Height

数据类型 GP_尺寸L, 公开, SizeL
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height

数据类型 GP_色彩映射表, 公开, ColorMap
    .成员 原颜色, 整数型, , , ARGB颜色
    .成员 新颜色, 整数型, , , ARGB颜色

数据类型 GP_颜色调色板, 公开, ColorPalette
    .成员 标志, 整数型, , , “调色板标志_”开头常量。
    .成员 数量, 整数型, , , 
    .成员 ARGB颜色, 整数型, , "1", 

数据类型 GP_编码器参数, 公开, EncoderParameter
    .成员 编码器Guid, 文本型, , , Guid。“编码器_”开头常量
    .成员 值成员数, 整数型, , , NumberOfValues
    .成员 值类型, 整数型, , , Type。“编码器参数值类型_”开头常量
    .成员 值, 字节集, , , Value。

数据类型 GP_编码器参数集, 公开, EncoderParameters
    .成员 参数数量, 整数型, , , 
    .成员 编码器参数, GP_编码器参数, , "1", 

数据类型 GP_属性项目, 公开, PropertyItem
    .成员 属性标签, 整数型, , , id“属性标签_”开头常量
    .成员 值大小, 整数型, , , length
    .成员 值类型, 整数型, , , type“属性值类型_”开头常量
    .成员 值, 字节集, , , value

数据类型 GP_图像编解码信息, 公开, ImageCodecInfo
    .成员 Clsid, 文本型, , , 
    .成员 图像格式ID, 文本型, , , FormatID
    .成员 编码器名, 文本型, , , CodecName
    .成员 DLL名, 文本型, , , DllName
    .成员 格式描述, 文本型, , , FormatDescription
    .成员 文件扩展名, 文本型, , , FilenameExtension
    .成员 Mime类型, 文本型, , , MimeType
    .成员 标志, 整数型, , , Flags
    .成员 版本, 整数型, , , Version
    .成员 签名数, 整数型, , , SigCount
    .成员 签名大小, 整数型, , , SigSize
    .成员 签名模式, 字节集, , , SigPattern
    .成员 签名掩码, 字节集, , , SigMask

数据类型 GP_路径数据, 公开, PathData
    .成员 总数, 整数型, , , Count
    .成员 坐标组, GP_坐标F, , "1", Points
    .成员 类型组, 字节型, , "1", Types

数据类型 PathData, , 
    .成员 Count, 整数型, , , 
    .成员 Points, 整数型, , , 
    .成员 Types, 整数型, , , 

数据类型 GP_位图数据, 公开, BitmapData
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height
    .成员 跨步, 整数型, , , Stride。指定相邻扫描行开始处之间字节偏移量的整数。这通常（但不一定）是以像素格式表示的字节数（例如，2 表示每像素 16 位）乘以位图的宽度。传递给此参数的值必须为 4 的倍数
    .成员 像素格式, 整数型, , , PixelFormat“像素格式_”开头常量。
    .成员 像素数据, 整数型, , , Scan0。指向包含像素数据的字节集指针。
    .成员 保留, 整数型, , , Reserved

数据类型 GP_测试字符范围, 公开, CharacterRange
    .成员 起始位置, 整数型, , , First
    .成员 长度, 整数型, , , Length

数据类型 GP_APM文件头, 公开, APMFileHeader
    .成员 标识, 整数型, , , Key。指示一个可放置图元文件头的存在。此值始终为2596720087
    .成员 句柄, 短整数型, , , hmf。当写入磁盘后，此句柄值为0。
    .成员 范围矩形, GP_矩形16, , , BoundingBox
    .成员 英寸, 短整数型, , , Inch。每英寸点数。通常为1440。
    .成员 保留, 整数型, , , Reserved
    .成员 校验, 短整数型, , , Checksum。该成员可以检测图元文件是否损坏。

数据类型 GP_EMF文件头, 公开, 
    .成员 类型, 整数型, , , Type。EMR_HEADER
    .成员 大小, 整数型, , , Size
    .成员 边界矩形, GP_矩形L, , , rclBounds
    .成员 框架矩形, GP_矩形L, , , rclFrame
    .成员 签名, 整数型, , , dSignature。ENHMETA_SIGNATURE
    .成员 版本, 整数型, , , nVersion
    .成员 字节数, 整数型, , , nBytes
    .成员 记录数, 整数型, , , nRecords
    .成员 句柄数, 短整数型, , , nHandles
    .成员 保留, 短整数型, , , sReserved
    .成员 描述数, 整数型, , , nDescription
    .成员 描述偏移, 整数型, , , offDescription
    .成员 调色板项目数, 整数型, , , nPalEntries
    .成员 设备像素尺寸, GP_尺寸L, , , szlDevice
    .成员 设备毫米尺寸, GP_尺寸L, , , szlMillimeters

数据类型 GP_WMF文件头, , METAHEADER
    .成员 类型, 短整数型, , , mtType 。1、内存，2.磁盘文件
    .成员 头大小, 短整数型, , , mtHeaderSize 
    .成员 版本, 短整数型, , , mtVersion 
    .成员 文件大小, 整数型, , , mtSize 
    .成员 对象数, 短整数型, , , mtNoObjects 
    .成员 最大记录数, 整数型, , , mtMaxRecord 
    .成员 保留, 短整数型, , , mtNoParameters 

数据类型 GP_图元文件头, 公开, MetafileHeader
    .成员 类型, 整数型, , , Type“图元文件类型_”开头常量。
    .成员 大小, 整数型, , , Size
    .成员 版本, 整数型, , , Version
    .成员 增强EMF标识, 整数型, , , EmfPlusFlags
    .成员 水平分辨率, 小数型, , , DpiX
    .成员 垂直分辨率, 小数型, , , DpiY
    .成员 左边, 整数型, , , X
    .成员 顶边, 整数型, , , Y
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height
    .成员 EMF文件头, GP_EMF文件头, , , EmfHeader
    .成员 增强EMF大小, 整数型, , , EmfPlusHeaderSize
    .成员 逻辑水平分辨率, 整数型, , , LogicalDpiX
    .成员 逻辑垂直分辨率, 整数型, , , LogicalDpiY

数据类型 GDI_HSL, 公开, 
    .成员 H, 整数型, , , 
    .成员 S, 整数型, , , 
    .成员 L, 整数型, , , 

.全局变量 全局_返回码, 整数型, , , 
.全局变量 错误信息, 文本型, , , 

.DLL命令 取消路径_, 整数型, "gdi32.dll", "AbortPath", , 非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄

.DLL命令 连接弧画直线_, 整数型, "gdi32.dll", "AngleArc", , 非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , hdc,要在其中作图的设备场景
    .参数 圆心横坐标, 整数型, , x,对弧进行描述的一个圆的中心点横坐标
    .参数 圆心纵坐标, 整数型, , y,对弧进行描述的一个圆的中心点纵坐标
    .参数 圆半径, 整数型, , dwRadius,圆的半径
    .参数 线角度, 小数型, , eStartAngle,线同圆连接时的角度（以度数为单位）
    .参数 弧度, 小数型, , eSweepAngle,弧在圆上占据的范围（以度数为单位）

.DLL命令 画圆弧_, 整数型, "gdi32.dll", "Arc", , 非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , hdc,一个显示场景的句柄
    .参数 矩形左上角横坐标, 整数型, , x1,围绕椭圆的矩形的左上角位置横坐标
    .参数 矩形左上角纵坐标, 整数型, , y1,围绕椭圆的矩形的左上角位置纵坐标
    .参数 矩形右下角横坐标, 整数型, , x2,围绕椭圆的矩形的右下角位置横坐标
    .参数 矩形右下角纵坐标, 整数型, , y2,围绕椭圆的矩形的右下角位置纵坐标
    .参数 圆弧起点横坐标, 整数型, , x3,指定圆弧起点横坐标
    .参数 圆弧起点纵坐标, 整数型, , y3,指定圆弧起点纵坐标
    .参数 圆弧终点横坐标, 整数型, , x4,指定圆弧终点横坐标
    .参数 圆弧终点纵坐标, 整数型, , y4,指定圆弧终点纵坐标

.DLL命令 启动路径分支_, 整数型, "gdi32.dll", "BeginPath", , BeginPath,启动一个路径分支
    .参数 设备场景句柄, 整数型, , hdc,欲在其中记录的设备场景

.DLL命令 复制场景位图_, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 目标设备场景, 整数型, , hDestDC,目标设备场景
    .参数 目标横坐标, 整数型, , x,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 目标纵坐标, 整数型, , y,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 传输图像宽度, 整数型, , nWidth,欲传输图象的宽度
    .参数 传输图像高度, 整数型, , nHeight,欲传输图象的高度
    .参数 源设备场景, 整数型, , hSrcDC,源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , xSrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 源纵坐标, 整数型, , ySrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 光栅运算方式, 整数型, , dwRop,传输过程要执行的光栅运算

.DLL命令 StrokePath, 整数型, "", "", , 
    .参数 mdc, 整数型, , 

.DLL命令 画弦_, 整数型, "gdi32.dll", "Chord", , Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , hdc，一个显示场景的句柄
    .参数 矩形左上角横坐标, 整数型, , x1，指定围绕椭圆的一个矩形的左上角位置的横坐标
    .参数 矩形左上角纵坐标, 整数型, , y1，指定围绕椭圆的一个矩形的左上角位置的纵坐标
    .参数 矩形右下角横坐标, 整数型, , x2，指定围绕椭圆的一个矩形的右下角位置的横坐标
    .参数 矩形右下角纵坐标, 整数型, , y2，指定围绕椭圆的一个矩形的右下角位置的纵坐标
    .参数 线段起点横坐标, 整数型, , x3，指定与椭圆相交的一条线的一个点的横坐标
    .参数 线段起点纵坐标, 整数型, , y3，指定与椭圆相交的一条线的一个点的纵坐标
    .参数 线段终点横坐标, 整数型, , x4，指定与椭圆相交的一条线的另一个点的横坐标
    .参数 线段终点纵坐标, 整数型, , y4，指定与椭圆相交的一条线的另一个点的纵坐标

.DLL命令 取窗口区域位置_, 整数型, "user32.dll", "ClientToScreen", , 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 坐标_, , lpGDI_点，参见相关帮助

.DLL命令 关闭增强图元设备场景_, 整数型, "gdi32.dll", "CloseEnhMetaFile", , 指向增强型图元文件的一个句柄，0为出错
    .参数 设备场景句柄, 整数型, , hdc

.DLL命令 描绘路径时关闭当前图形_, 整数型, "gdi32.dll", "CloseFigure", , 非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , hdc，包含了一个打开的Path分支的设备场景

.DLL命令 关闭图元文件设备场景_, 整数型, "gdi32.dll", "CloseMetaFile", , 指向图元文件的一个句柄。零表示出错
    .参数 图元文件设备场景, 整数型, , hMF，图元文件设备场景

.DLL命令 合并区域_, 整数型, "gdi32.dll", "CombineRgn", , 
    .参数 新区域句柄, 整数型, , hDestRgn，包含组合结果的区域句柄
    .参数 源区域1, 整数型, , hSrcRgn1，源区域1
    .参数 源区域2, 整数型, , hSrcRgn2，源区域2
    .参数 组合方式, 整数型, , nCombineMode，组合方式

.DLL命令 驱动世界转换_, 整数型, "gdi32.dll", "CombineTransform", , 
    .参数 保存转换结果, 转换数据_, 传址, lpxformResult，保存转换结果的结构
    .参数 第一个结构, 转换数据_, 传址, lpxform1，按顺序的第一个结构
    .参数 第二个结构, 转换数据_, 传址, lpxform2，按顺序的第二个结构

.DLL命令 拷贝增强图元文件_, 整数型, "gdi32.dll", "CopyEnhMetaFileA", , 如执行成功，返回副本的句柄。零表示失败
    .参数 源图元文件句柄, 整数型, , hemfSrc，欲复制的增强型图元文件的句柄
    .参数 副本文件名, 文本型, , lpszFile，参见相关帮助

.DLL命令 复制图标_, 整数型, "user32.dll", "CopyIcon", , 
    .参数 图标句柄, 整数型, , hIcon，欲复制的图标或指针的句柄

.DLL命令 复制图片_, 整数型, "user32.dll", "CopyImage", , 
    .参数 源资源句柄, 整数型, , handle，欲复制的图象的句柄
    .参数 资源类型, 整数型, , un1，根据资源而定
    .参数 目标宽度, 整数型, , n1，副本以像素表示的宽度
    .参数 目标高度, 整数型, , n2，副本以像素表示的高度
    .参数 处理参数, 整数型, , un2，复制过程中所做的处理，根据参数不同而作用不同

.DLL命令 拷贝标准图元文件_, 整数型, "gdi32.dll", "CopyMetaFileA", , 如执行成功，则返回副本的句柄。零表示失败
    .参数 源图元文件句柄, 整数型, , hMF，指向欲复制的图元文件的句柄
    .参数 新图元文件名, 文本型, , lpFileName，新图元文件的文件名

.DLL命令 拷贝矩形结构_, 整数型, "user32.dll", "CopyRect", , 
    .参数 目标矩形, GDI_矩形, 传址, lpDestRect，目标矩形结构
    .参数 源矩形, GDI_矩形, 传址, lpSourceRect，源矩形结构

.DLL命令 按格式创建位图_, 整数型, "gdi32.dll", "CreateBitmap", , 
    .参数 位图宽度, 整数型, , nWidth，位图宽度，以像素为单位
    .参数 位图高度, 整数型, , nHeight，位图高度，以像素为单位
    .参数 色层数量, 整数型, , nPlanes，色层数量
    .参数 像素位数, 整数型, , nBitCount，每像素的位数
    .参数 初始化处理, 短整数型, 传址, lpBits，可设为零，表示不对位图进行初始化

.DLL命令 创建设备有关位图_, 整数型, "gdi32.dll", "CreateBitmapIndirect", , 
    .参数 位图信息, 位图结构_, 传址, lpBitmap，位图信息

.DLL命令 创建插入符_, 整数型, "user32.dll", "CreateCaret", , CreateCaret，根据指定的信息创建一个插入符（光标），并将它选定为指定窗口的默认插入符。插入符可以是一根短线、一个方块或者一幅位图。通常用插入符指示文字在文字框中的插入位置
    .参数 窗口句柄, 整数型, , hwnd，窗口句柄
    .参数 位图句柄, 整数型, , hBitmap，位图句柄
    .参数 宽度, 整数型, , nWidth，宽度
    .参数 高度, 整数型, , nHeight，高度

.DLL命令 创建鼠标指针_, 整数型, "user32.dll", "CreateCursor", , 
    .参数 实例句柄, 整数型, , hInstance，准备拥有新指针的实例句柄
    .参数 指针横位置, 整数型, , nXhotspot，指针图象中代表准确指针位置的横坐标
    .参数 指针纵位置, 整数型, , nYhotspot，指针图象中代表准确指针位置的纵坐标
    .参数 指针图象宽度, 整数型, , nWidth，指针图象宽度
    .参数 指针图象高度, 整数型, , nHeight，指针图象高度
    .参数 AND位图指针, 字节型, 传址, lpANDbitPlane，指向AND位图数据的指针
    .参数 XOR位图指针, 字节型, 传址, lpXORbitPlane，指向XOR位图数据的指针

.DLL命令 创建设备场景_, 整数型, "gdi32.dll", "CreateDCA", , 
    .参数 驱动名称, 文本型, , lpDriverName，根据参数值而定
    .参数 设备名称, 文本型, , lpDeviceName，所要创建的设备场景名称
    .参数 参数, 文本型, , lpOutput，一般情况下为空
    .参数 场景结构, 设备初始设置_, 传址, lpInitData，0为使用默认设置

.DLL命令 无关位图创建到有关位图_, 整数型, "gdi32.dll", "CreateDIBitmap", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 设备无关位图, 设备无关位图_, 传址, 
    .参数 初始化位图, 整数型, , 
    .参数 位图指针, 空白型, 传址, 
    .参数 设备有关位图, 位图信息_, 传址, 
    .参数 颜色常数, 整数型, , 

.DLL命令 创建样式刷子_, 整数型, "gdi32.dll", "CreateDIBPatternBrush", , 
    .参数 内存地址, 整数型, , 
    .参数 常数, 整数型, , 

.DLL命令 创建GDI对象_, 整数型, "gdi32.dll", "CreateDIBSection", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 pBitmapInfo, 位图信息_, 传址, 
    .参数 常数, 整数型, , 
    .参数 内存地址, 整数型, , 
    .参数 文件映射句柄, 整数型, , 
    .参数 偏移量, 整数型, , 

.DLL命令 创建内切矩形的椭圆_, 整数型, "gdi32.dll", "CreateEllipticRgnIndirect", , 
    .参数 矩形信息, GDI_矩形, 传址, lpRect，定义要创建的椭圆区域尺寸的矩形

.DLL命令 创建增强图元文件设备场景_, 整数型, "gdi32.dll", "CreateEnhMetaFileA", , 
    .参数 参考设备场景, 整数型, , hdcRef，参考设备场景
    .参数 图元文件名, 文本型, , lpFileName，图元文件的磁盘文件名
    .参数 约束矩形, GDI_矩形, 传址, lpRect，约束矩形
    .参数 图元文件说明, 文本型, , lpDescription，对图元文件的一段说明

.DLL命令 用指定属性创建逻辑字体_, 整数型, "gdi32.dll", "CreateFontA", , 执行成功则返回逻辑字体的句柄，零表示失败
    .参数 字体高度, 整数型, , Height，字体高度
    .参数 字体宽度, 整数型, , Width，字体宽度
    .参数 旋转, 整数型, , Escapement，旋转
    .参数 Orientation, 整数型, , Orientation
    .参数 加粗, 整数型, , Weight，加粗
    .参数 倾斜, 整数型, , Italic，倾斜
    .参数 下划线, 整数型, , Underline，下划线
    .参数 删除线, 整数型, , StrikeOut，删除线
    .参数 内码, 整数型, , CharSet，内码
    .参数 OutputPrecision, 整数型, , OutputPrecision
    .参数 CP, 整数型, , ClipPrecision
    .参数 输出质量, 整数型, , Quality，输出质量
    .参数 PAF, 整数型, , PitchAndFamily
    .参数 新字体名, 文本型, , FaceName，新字体名

.DLL命令 使用指定属性创建逻辑字体_, 整数型, "gdi32.dll", "CreateFontIndirectA", , 执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, 逻辑字体_, 传址, lpLogFont，字体结构信息

.DLL命令 创建阴影刷子_, 整数型, "gdi32.dll", "CreateHatchBrush", , CreateHatchBrush
    .参数 刷子阴影类型, 整数型, , nIndex，请查看此参数的常量
    .参数 指定刷子的RGB前景色, 整数型, , crColor，指定刷子的前景颜色值

.DLL命令 创建图标_, 整数型, "user32.dll", "CreateIconIndirect", , 
    .参数 图标信息, 图标信息_, 传址, piconinfo，图标结构信息

.DLL命令 创建图元文件设备场景_, 整数型, "gdi32.dll", "CreateMetaFileA", , 
    .参数 容纳图元文件的文件名, 文本型, , lpString，参见相关帮助

.DLL命令 使用位图创建刷子_, 整数型, "gdi32.dll", "CreatePatternBrush", , 如执行成功，则返回新刷子的一个句柄；否则返回零
    .参数 位图句柄, 整数型, , hBitmap，指向一幅位图的句柄

.DLL命令 创建多点围成的区域_, 整数型, "gdi32.dll", "CreatePolygonRgn", , 
    .参数 坐标组, GDI_点, 数组, lpGDI_点，坐标组中第一个坐标
    .参数 多边形点数, 整数型, , nCount，多边形点数
    .参数 填充模式, 整数型, , nPolyFillMode，填充模式

.DLL命令 PtInRegion, 整数型, "", "", , 
    .参数 hrgn, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 创建多边形区域_, 整数型, "gdi32.dll", "CreatePolyPolygonRgn", , 
    .参数 第一个点坐标, GDI_点, 数组, 
    .参数 坐标地址, 整数型, 数组, 
    .参数 多边形的点数, 整数型, , 
    .参数 多边形填充模式, 整数型, , 

.DLL命令 MaskBlt, 整数型, "", "", , 
    .参数 desthdc, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 
    .参数 dwidth, 整数型, , 
    .参数 dheight, 整数型, , 
    .参数 srchdc, 整数型, , 
    .参数 sx, 整数型, , 
    .参数 sy, 整数型, , 
    .参数 maskbmp, 整数型, , 
    .参数 mx, 整数型, , 
    .参数 my, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 GetDIBits, 整数型, "", "", , 
    .参数 ahdc, 整数型, , 
    .参数 hbitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScan, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, 位图信息_, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits3, 整数型, "", "GetDIBits", , 
    .参数 ahdc, 整数型, , 
    .参数 hbitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScan, 整数型, , 
    .参数 lpBits, 字节型, 传址, 
    .参数 lpBI, 位图信息_, , 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits2, 整数型, "", "GetDIBits", , 
    .参数 ahdc, 整数型, , 
    .参数 hbitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScan, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, 位图信息_, , 
    .参数 wUsage, 整数型, , 

.DLL命令 SetDIBits, 整数型, "", "", , 
    .参数 ahdc, 整数型, , 
    .参数 hbitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScan, 整数型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, 整数型, , 
    .参数 wUsage, 整数型, , 

.DLL命令 RtlMoveMemory3, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 位图信息_, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory2, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 用矩形信息创建矩形区域_, 整数型, "gdi32.dll", "CreateRectRgnIndirect", , 执行成功为区域句柄，失败则为零
    .参数 矩形结构信息, GDI_矩形, 传址, lpRect，用来创建区域的矩形

.DLL命令 创建圆角矩形区域_, 整数型, "gdi32.dll", "CreateRoundRectRgn", , 
    .参数 左上横坐标, 整数型, , X1，矩形左上角横坐标
    .参数 左上纵坐标, 整数型, , Y1，矩形左上角纵坐标
    .参数 右下横坐标, 整数型, , X2，矩形右下角横坐标
    .参数 右下纵坐标, 整数型, , Y2，矩形右下角纵坐标
    .参数 圆角椭圆的宽, 整数型, , X3，参见相关帮助
    .参数 圆角椭圆的高, 整数型, , Y3，参见相关帮助

.DLL命令 创建TureType字体文件_, 整数型, "gdi32.dll", "CreateScalableFontResourceA", , 
    .参数 字体资源类型, 整数型, , 
    .参数 资源文件的名字, 文本型, , 
    .参数 TureType字体文件的文件名, 文本型, , 
    .参数 TureType字体文件路径, 文本型, , 

.DLL命令 创建纯色刷子_, 整数型, "gdi32.dll", "CreateSolidBrush", , 
    .参数 颜色值, 整数型, , crColor，颜色值

.DLL命令 创建矩形区域_, 整数型, "gdi32.dll", "CreateRectRgn", , CreateRectRgn
    .参数 左上横坐标, 整数型, , X1，矩形左上角横坐标
    .参数 左上纵坐标, 整数型, , Y1，矩形左上角纵坐标
    .参数 右下横坐标, 整数型, , X2，矩形右下角横坐标
    .参数 右下纵坐标, 整数型, , Y2，矩形右下角纵坐标

.DLL命令 删除设备场景_, 整数型, "gdi32.dll", "DeleteDC", , 
    .参数 设备场景句柄, 整数型, , hdc，将要删除的设备场景

.DLL命令 删除增强图元文件_, 整数型, "gdi32.dll", "DeleteEnhMetaFile", , 删除指定的增强型图元文件
    .参数 增强型图元文件句柄, 整数型, , hemf,增强型图元文件的句柄

.DLL命令 删除图元文件_, 整数型, "gdi32.dll", "DeleteMetaFile", , 
    .参数 图元文件句柄, 整数型, , hMF,图元文件的句柄

.DLL命令 删除对象_, 整数型, "gdi32.dll", "DeleteObject", , DeleteObject
    .参数 对象句柄, 整数型, , hObject,一个GDI对象的句柄

.DLL命令 取系统默认色_, 整数型, "user32", "GetSysColor", , 
    .参数 类型, 整数型, , 

.DLL命令 设置位图高宽_, 空白型, "gdi32", "SetBitmapDimensionEx", , 
    .参数 位图句柄, 整数型, , 
    .参数 建议宽度, 整数型, , 
    .参数 建议高度, 整数型, , 
    .参数 尺寸, 尺寸_, , 

.DLL命令 判断字符间距_, 整数型, "gdi32", "GetTextCharacterExtra", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 设置字符间距_, 整数型, "gdi32", "SetTextCharacterExtra", , 
    .参数 设备场景, 整数型, , 
    .参数 间距, 整数型, , 

.DLL命令 设置前景色_, 整数型, "gdi32", "SetTextColor", , 
    .参数 设备场景, 整数型, , 
    .参数 颜色, 整数型, , 

.DLL命令 取前景色_, 整数型, "gdi32", "GetTextColor", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 取字体样式_, 整数型, "gdi32", "GetTextFaceA", , 
    .参数 设备场景, 整数型, , 
    .参数 字符数, 整数型, , 
    .参数 缓冲区, 文本型, , 

.DLL命令 取绘画类型_, 整数型, "gdi32", "GetROP2", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 取对象属性_, 整数型, "gdi32", "GetObjectA", , 
    .参数 对象句柄, 整数型, , 
    .参数 数据尺寸, 整数型, , 
    .参数 属性, 位图结构_, , 

.DLL命令 转为逻辑坐标_, 整数型, "gdi32.dll", "DPtoLP", , 将点阵从设备坐标转换到专用设备场景逻辑坐标
    .参数 设备场景句柄, 整数型, , hdc,确定逻辑坐标系统的设备场景句柄 
    .参数 入口点, 坐标_, , lpGDI_点,参见相关帮助
    .参数 入口数, 整数型, , nCount,lpGDI_点阵列中的入口数 

.DLL命令 动态矩形_, 整数型, "user32.dll", "DrawAnimatedRects", , 
    .参数 描绘窗口句柄, 整数型, , hwnd,要在其中描绘矩形的窗口
    .参数 识别号码, 整数型, , idAni,windows 95要设为0 
    .参数 起始位置, GDI_矩形, , lprcFrom,原始矩形 
    .参数 到达目标, GDI_矩形, , lprcTo,目标矩形 

.DLL命令 描绘边框_, 整数型, "user32.dll", "DrawEdge", , 用指定的样式描绘一个矩形的边框
    .参数 设备场景句柄, 整数型, , hdc,要在其中绘图的设备场景
    .参数 矩形轮廓, GDI_矩形, , qrc,要为其描绘边框的矩形
    .参数 样式, 整数型, , edge,带有前缀BDR_的两个常数的组合
    .参数 状态, 整数型, , grfFlags,带有BF_前缀的常数的组合

.DLL命令 实现非GDI可画图设备_, 整数型, "gdi32.dll", "DrawEscape", , 换码（Escape）函数将数据直接发至显示设备驱动程序
    .参数 设备场景句柄, 整数型, , hdc,显示设备的设备场景 
    .参数 标识, 整数型, , nEscape,指定欲执行的换码的一个常数 
    .参数 缓冲区长度, 整数型, , cbInput,输入缓冲区的长度 
    .参数 缓冲区, 文本型, , lpszInData ,输入字串或缓冲区 

.DLL命令 画焦点矩形_, 空白型, "user32.dll", "DrawFocusRect", , 画一个焦点矩形
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄 
    .参数 矩形轮廓, GDI_矩形, , lpRect,要在逻辑坐标中描绘的矩形 

.DLL命令 描绘标准组件_, 整数型, "user32.dll", "DrawFrameControl", , 这个函数用于描绘一个标准组件
    .参数 设备场景, 整数型, , hDC,要在其中作画的设备场景 
    .参数 矩形轮廓, GDI_矩形, , lpRect,指定帧的位置及大小的一个矩形 
    .参数 外貌, 整数型, , un1,指定帧类型的一个常数
    .参数 状态, 整数型, , un2,一个常数，指定欲描绘的帧的状态

.DLL命令 画图标_, 整数型, "user32.dll", "DrawIcon", , 在指定的位置画一个图标  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , hdc Long，设备场景 
    .参数 横坐标, 整数型, , x,y Long，想描绘图标的位置（逻辑坐标） 
    .参数 纵坐标, 整数型, , 同上
    .参数 图标句柄, 整数型, , hIcon Long，欲描绘图标的句柄 

.DLL命令 画图标扩展_, 整数型, "user32.dll", "DrawIconEx", , 描绘一个图标或鼠标指针
    .参数 设备场景句柄, 整数型, , hdc，要在其中画图的一个设备场景的句柄 
    .参数 左边尽头, 整数型, , xLeft,yTop，图标左上角的位置，用逻辑坐标表示 
    .参数 顶边尽头, 整数型, , 
    .参数 图标句柄, 整数型, , hIcon，要描绘的图标的句柄 
    .参数 描绘宽度, 整数型, , cxWidth,cyWidth，希望的图标宽度和高度
    .参数 描绘高度, 整数型, , 
    .参数 描绘的帧, 整数型, , istepIfAniCur，参见相关帮助
    .参数 刷子句柄, 整数型, , hbrFlickerFreeDraw，参见相关帮助
    .参数 描绘标志, 整数型, , diFlags

.DLL命令 设置图象效果_, 整数型, "user32.dll", "DrawStateA", , 这个函数可为一幅图象或绘图操作应用各式各样的效果
    .参数 设备场景句柄, 整数型, , hDC,要在其中绘图的设备场景 
    .参数 刷子句柄, 整数型, , hBrush,参见相关帮助
    .参数 指针, 整数型, , lpDrawStateProc,指向一个函数地址的指针
    .参数 参数一, 整数型, , lParam,由图象的类型决定 
    .参数 参数二, 整数型, , wParam由图象的类型决定 
    .参数 水平点, 整数型, , n1,图象的水平位置 
    .参数 垂直点, 整数型, , n2,图象的垂直位置 
    .参数 需求宽度, 整数型, , n3,图象的宽度
    .参数 需求高度, 整数型, , n4,图象的高度
    .参数 需求效果, 整数型, , un,图象类型和状态的一个组合 

.DLL命令 描绘矩形文本_, 整数型, "user32.dll", "DrawTextA", , 将文本描绘到指定的矩形中
    .参数 设备场景句柄, 整数型, , hdc,欲在其中显示文字的一个设备场景的句柄 
    .参数 描绘的字串, 文本型, , lpStr,欲描绘的文本字串 
    .参数 描绘的字串数量, 整数型, , n,欲描绘的字符数量
    .参数 描绘文本区域, GDI_矩形, , lpRect,指定用于绘图的一个格式化矩形（采用逻辑坐标） 
    .参数 格式, 整数型, , wFormat,一个标志位数组，决定了以何种形式执行绘图 

.DLL命令 矩形内文本扩展_, 整数型, "", "DrawTextExA", , 与DrawText相似，只是加入了更多的功能
    .参数 设备场景句柄, 整数型, , hDC,要在其中绘图的一个设备场景的句柄 
    .参数 描绘的字串, 文本型, , lpsz,欲描绘的文本字串 
    .参数 描绘的字串数量, 整数型, , n,欲描绘的字符数量
    .参数 描绘文本区域, GDI_矩形, , lpRect,指定用于绘图的一个格式化矩形（采用逻辑坐标） 
    .参数 描绘的标志, 整数型, , un Long，一个标志位。决定了以何种形式执行绘图
    .参数 文字输入定义, 整数型, , lpDrawTextParams,这个结构包含了附加的绘图参数 

.DLL命令 移动区域_, 整数型, "gdi32.dll", "OffsetRgn", , 区域状态
    .参数 区域句柄, 整数型, , hRgn，区域句柄
    .参数 横向移动量, 整数型, , x，以逻辑坐标表示的水平偏移量
    .参数 纵向移动量, 整数型, , y，以逻辑坐标表示的垂直偏移量

.DLL命令 移动设备场景_, 整数型, "gdi32.dll", "OffsetViewportOrgEx", , 执行成功为非零值，失败为0
    .参数 设备场景句柄, 整数型, , hdc，设备场景句柄
    .参数 横向移动量, 整数型, , nX，横向移动量
    .参数 纵向移动量, 整数型, , nY，纵向移动量
    .参数 源设备场景起始位置, 坐标_, 传址, lpGDI_点，原先的起点的结构

.DLL命令 移动设备场景起始位置_, 整数型, "gdi32.dll", "OffsetWindowOrgEx", , 
    .参数 设备场景句柄, 整数型, , hdc，设备场景句柄
    .参数 横向移动量, 整数型, , nX，横向移动量
    .参数 纵向移动量, 整数型, , nY，纵向移动量
    .参数 源起始位置, 坐标_, 传址, lpGDI_点，源起始位置

.DLL命令 取增强图元文件说明_, 整数型, "gdi32", "GetEnhMetaFileDescriptionA", , 获取说明
    .参数 图元文件句柄, 整数型, , 
    .参数 缓冲区大小, 整数型, , 
    .参数 字串缓冲区, 文本型, , 

.DLL命令 复制增强图元文件到缓存_, 整数型, "", "GetEnhMetaFileBits", , 
    .参数 增强图元文件的句柄, 整数型, , 
    .参数 缓冲区的长度, 整数型, , 
    .参数 缓冲区的头一个字节, 字节型, , 

.DLL命令 取系统颜色刷子_, 整数型, "user32", "GetSysColorBrush", , 
    .参数 索引, 整数型, , 

.DLL命令 当前剪裁区_, 整数型, "gdi32", "GetClipRgn", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 区域句柄, 整数型, 传址, 

.DLL命令 置剪裁区_, 整数型, "gdi32", "SelectClipRgn", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 区域, 整数型, , 

.DLL命令 平移剪裁区_, 整数型, "gdi32", "OffsetClipRgn", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 水平偏移量, 整数型, , 
    .参数 垂直偏移量, 整数型, , 

.DLL命令 指定画笔位置_, 整数型, "gdi32.dll", "MoveToEx", , 
    .参数 设备场景, 整数型, , hdc，指向一个设备场景的句柄
    .参数 横坐标, 整数型, , x，采用逻辑坐标表示的新画笔位置
    .参数 纵坐标, 整数型, , y，采用逻辑坐标表示的新画笔位置
    .参数 画笔位置, 坐标_, , lpGDI_点，用于保存前一个画笔位置

.DLL命令 枚举线段中的点_, 整数型, "gdi32.dll", "LineDDA", , 枚举指定线段中的所有点
    .参数 起点横坐标, 整数型, , n1,线段的起点横坐标
    .参数 起点纵坐标, 整数型, , n2,线段的起点纵坐标
    .参数 终点横坐标, 整数型, , n3,线段的终点横坐标
    .参数 终点纵坐标, 整数型, , n4,线段的终点纵坐标
    .参数 函数地址, 子程序指针, , lpLineDDAProc,vb5中的一个函数地址
    .参数 返回值, 整数型, , lParam,枚举过程中传递给回调函数的用户自定义值

.DLL命令 画直线_, 整数型, "gdi32.dll", "LineTo", , 用当前画笔画一条线，从当前位置连到一个指定的点
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 终点横坐标, 整数型, , x,线段终点位置，采用逻辑坐标表示
    .参数 终点纵坐标, 整数型, , y,线段终点位置，采用逻辑坐标表示

.DLL命令 载入位图_, 整数型, "user32.dll", "LoadBitmapA", , 从指定的模块或应用程序实例中载入一幅位图
    .参数 实例句柄, 整数型, , hInstance,参见相关帮助
    .参数 位图标识, 空白型, , lpBitmapName,参见相关帮助

.DLL命令 载入鼠标指针_, 整数型, "user32.dll", "LoadCursorA", , 从指定的模块或应用程序实例中载入一个鼠标指针
    .参数 实例句柄, 整数型, , hInstance,参见相关帮助
    .参数 鼠标指针标识, 空白型, , lpCursorName,参见相关帮助

.DLL命令 创建指针_, 整数型, "user32.dll", "LoadCursorFromFileA", , 
    .参数 文件名, 文本型, , lpFileName,包含指针的那个文件的名字

.DLL命令 载入图标_, 整数型, "user32.dll", "LoadIconA", , 从指定的模块或应用程序实例中载入一个图标
    .参数 实例句柄, 整数型, , hInstance,参见相关帮助
    .参数 图标标识, 空白型, , lpIconName,作为一个字串，指定欲载入的图标资源

.DLL命令 载入图象_, 整数型, "user32.dll", "LoadImageA", , 载入一个位图、图标或指针
    .参数 实例句柄, 整数型, , hInst,要从其中载入图象的DLL或应用程序模块或实例句柄
    .参数 图象标志符, 文本型, , lpsz,欲载入图象的名字
    .参数 图象类型, 整数型, , un1,指定了欲载入的图象类型
    .参数 图象宽度, 整数型, , n1,要求的图象宽度
    .参数 图象高度, 整数型, , n2,要求的图象高度
    .参数 常数组合, 整数型, , un2,常数的任意组合

.DLL命令 转换坐标_, 整数型, "gdi32.dll", "LPtoDP", , 将点阵从指定设备场景逻辑坐标转换为设备坐标
    .参数 设备场景句柄, 整数型, , hdc,定义了逻辑坐标系统的设备场景句柄
    .参数 坐标入口, 坐标_, , lpGDI_点,参见相关帮助
    .参数 入口数, 整数型, , nCount,lpGDI_点阵列中的入口数

.DLL命令 定义剪裁区_, 整数型, "gdi32.dll", "IntersectClipRect", , 
    .参数 设备场景句柄, 整数型, , hdc,设备场景
    .参数 矩形左上角横坐标, 整数型, , x1,矩形左上角X坐标
    .参数 矩形左上角纵坐标, 整数型, , y1,矩形左上角Y坐标
    .参数 矩形右下角横坐标, 整数型, , x2,矩形右下角X坐标
    .参数 矩形右下角纵坐标, 整数型, , y2,矩形右下角Y坐标

.DLL命令 载入矩形_, 整数型, "user32.dll", "IntersectRect", , 
    .参数 目标矩形, GDI_矩形, , lpDestRect,目标矩形
    .参数 源矩形1, GDI_矩形, , lpSrc1Rect,第一个源矩形
    .参数 源矩形2, GDI_矩形, , lpSrc2Rect,第二个源矩形

.DLL命令 屏蔽窗口矩形_, 整数型, "user32.dll", "InvalidateRect", , 这个函数屏蔽一个窗口客户区的全部或部分区域
    .参数 窗口句柄, 整数型, , hwnd,待屏蔽窗口的句柄
    .参数 屏蔽矩形, GDI_矩形, , lpRect,用于描述待屏蔽矩形部分的一个矩形结构
    .参数 重画前删除, 整数型, , bErase,TRUE（非零）导致指定的区域在重画前先删除

.DLL命令 刷新窗口禁止区域_, 整数型, "user32.dll", "InvalidateRgn", , 
    .参数 窗口句柄, 整数型, , hwnd,窗口句柄
    .参数 不活动区域句柄, 整数型, , hRgn,不活动区域句柄，该区域以窗口客户坐标定义
    .参数 重画前删除, 整数型, , bErase,为非零值则表示要在刷新前擦除

.DLL命令 反转矩形_, 整数型, "user32.dll", "InvertRect", , 
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 要反转的矩形, GDI_矩形, , lpRect,要反转的矩形，用逻辑坐标指定

.DLL命令 反转区域_, 整数型, "gdi32.dll", "InvertRgn", , 
    .参数 设备场景句柄, 整数型, , hdc,设备场景句柄
    .参数 将反转的区域, 整数型, , hRgn,将反转的设备区域

.DLL命令 判断矩形_, 整数型, "user32.dll", "IsRectEmpty", , 判断一个矩形是否为空
    .参数 要检查的矩形, GDI_矩形, , lpRect,要检查的矩形

.DLL命令 取得GDI数量_, 整数型, "", "GdiGetBatchLimit", , 判断有多少个GDI绘图命令位于队列中

.DLL命令 绘图补充_, 整数型, "gdi32.dll", "GdiFlush", , 执行任何未决的绘图操作

.DLL命令 限定GDI数量_, 整数型, "gdi32", "GdiSetBatchLimit", , 指定有多少个GDI绘图命令能够进入队列
    .参数 数量, 整数型, , dwLimit Long，参见相关帮助

.DLL命令 判断弧绘制方向_, 整数型, "gdi32", "GetArcDirection", , 画圆弧的时候，判断当前采用的绘图方向
    .参数 设备场景句柄, 整数型, , hdc Long，要查询的设备场景 

.DLL命令 取图片高宽_, 整数型, "gdi32", "GetBitmapDimensionEx", , 
    .参数 位图句柄, 整数型, , 
    .参数 尺寸, 尺寸_, 传址, 

.DLL命令 复制二进制位图_, 空白型, "gdi32", "GetBitmapBits", , 
    .参数 位图句柄, 整数型, , 
    .参数 字节限制, 整数型, , 
    .参数 缓冲区, 字节集, 传址, 

.DLL命令 关闭图形_, 整数型, "gdi32.dll", "FillPath", , FillPath,关闭路径中任何打开的图形，并用当前刷子填充
    .参数 设备场景句柄, 整数型, , hdc，欲在其中操作的设备场景

.DLL命令 填充矩形_, 整数型, "user32.dll", "FillRect", , FillRect,用指定的刷子填充一个矩形
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 填充区域, GDI_矩形, , lpRect，对填充区域进行描述的一个矩形，采用逻辑坐标
    .参数 刷子句柄, 整数型, , hBrush，欲使用的刷子的句柄

.DLL命令 取得图标信息_, 整数型, "user32", "GetIconInfo", , 
    .参数 图标句柄, 整数型, , 
    .参数 图标信息, 图标信息_, , 

.DLL命令 取得近似色_, 整数型, "gdi32", "GetNearestColor", , 
    .参数 设备场景, 整数型, , 
    .参数 颜色, 整数型, , 

.DLL命令 取得剪裁区_, 整数型, "gdi32", "GetClipBox", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 剪裁区, GDI_矩形, 传址, 

.DLL命令 取得边界矩形_, 整数型, "gdi32", "GetBoundsRect", , 
    .参数 设备场景句柄, 整数型, , hdc Long，边界矩形对应的设备场景 
    .参数 装载矩形, GDI_矩形, 传址, lprcBounds RECT，装载设备场景hdc的当前边界矩形 
    .参数 标识, 整数型, , flags Long，参见相关帮助

.DLL命令 取背景色_, 整数型, "gdi32", "GetBkColor", , 取得指定设备场景当前的背景颜色
    .参数 设备场景句柄, 整数型, , hdc Long，欲查询背景颜色的一个设备场景

.DLL命令 判断伸缩模式_, 整数型, "gdi32", "GetStretchBltMode", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 设置弧描绘方向_, 整数型, "gdi32", "SetArcDirection", , 设置圆弧的描绘方向
    .参数 设备场景句柄, 整数型, , 
    .参数 方向, 整数型, , 

.DLL命令 创建刷子_, 整数型, "gdi32", "CreateBrushIndirect", , 
    .参数 格式, GDI_画刷属性, , 

.DLL命令 清空矩形_, 整数型, "user32", "SetRectEmpty", , 
    .参数 区域, GDI_矩形, , 

.DLL命令 设置矩形_, 整数型, "user32", "SetRect", , 
    .参数 矩形, GDI_矩形, , 
    .参数 左边, 整数型, , 
    .参数 顶边, 整数型, , 
    .参数 右边, 整数型, , 
    .参数 底边, 整数型, , 

.DLL命令 获取最小矩形_, 整数型, "gdi32", "GetRgnBox", , 
    .参数 区域, 整数型, , 
    .参数 矩形区域, GDI_矩形, , 

.DLL命令 偏移矩形_, 整数型, "user32", "OffsetRect", , 
    .参数 目标矩形, GDI_矩形, , 
    .参数 水平偏移量, 整数型, , 
    .参数 垂直偏移量, 整数型, , 

.DLL命令 取对象句柄_, 整数型, "gdi32", "GetStockObject", , 
    .参数 类型, 整数型, , 

.DLL命令 取得指针剪裁区_, 整数型, "user32", "GetClipCursor", , 
    .参数 矩形, GDI_矩形, , 

.DLL命令 曲线转换线段_, 整数型, "gdi32.dll", "FlattenPath", , FlattenPath,将一个路径中的所有曲线都转换成线段
    .参数 设备场景句柄, 整数型, , hdc，包含了路径的设备场景

.DLL命令 指定填充区域_, 整数型, "gdi32.dll", "FloodFill", , FloodFill,用当前选定的刷子在指定的设备场景中填充一个区域
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 横坐标, 整数型, , x，开始填充的那个点，用逻辑坐标表示
    .参数 纵坐标, 整数型, , y，开始填充的那个点，用逻辑坐标表示
    .参数 边界颜色, 整数型, , crColor，欲使用的边界颜色

.DLL命令 刷新文件缓冲区_, 整数型, "kernel32.dll", "FlushFileBuffers", , FlushFileBuffers,针对指定的文件句柄，刷新内部文件缓冲区
    .参数 文件句柄, 整数型, , hFile，文件句柄

.DLL命令 画矩形边框_, 整数型, "user32.dll", "FrameRect", , 
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 矩形, GDI_矩形, , lpRect，对要描绘的边框进行描述的一个矩形
    .参数 刷子句柄, 整数型, , hBrush，欲使用的刷子的句柄

.DLL命令 画区域外框_, 整数型, "gdi32.dll", "FrameRgn", , FrameRgn,用指定刷子围绕指定区域画一个外框
    .参数 设备场景, 整数型, , hdc，设备场景句柄
    .参数 区域句柄, 整数型, , hRgn，将数据设备坐标填充的区域句柄
    .参数 刷子句柄, 整数型, , hBrush，将用的刷子句柄
    .参数 垂直边框宽度, 整数型, , nWidth，垂直边框宽度（以设备单元为单位）
    .参数 水平边框高度, 整数型, , nHeight，水平边框高度（以设备单元为单位）

.DLL命令 画椭圆_, 整数型, "gdi32.dll", "Ellipse", , 描绘一个椭圆，由指定的矩形围绕
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 矩形左上角位置横坐标, 整数型, , X1,约束矩形采用逻辑坐标的左上角位置
    .参数 矩形左上角位置纵坐标, 整数型, , Y1,约束矩形采用逻辑坐标的左上角位置
    .参数 矩形右下角位置横坐标, 整数型, , X2,约束矩形采用逻辑坐标的右下角位置
    .参数 矩形右下角位置纵坐标, 整数型, , Y2,约束矩形采用逻辑坐标的右下角位置

.DLL命令 结束路径分支_, 整数型, "gdi32.dll", "EndPath", , 停止定义一个路径
    .参数 设备场景句柄, 整数型, , hdc,设备场景句柄

.DLL命令 枚举增强图元文件记录_, 整数型, "gdi32.dll", "EnumEnhMetaFile", , 针对一个增强型图元文件，列举其中单独的图元文件记录
    .参数 设备场景句柄, 整数型, , hdc,参见相关帮助
    .参数 图元文件句柄, 整数型, , hemf,欲列举的一个增强型图元文件的句柄
    .参数 函数指针, 子程序指针, , lpEnhMetaFunc,参见相关帮助
    .参数 自定义数据, 空白型, , lpData,用户自定义的值
    .参数 图元文件边框, GDI_矩形, , lpRect,定义图元文件边框的一个矩形

.DLL命令 枚举字体_, 整数型, "gdi32.dll", "EnumFontFamiliesA", , 列举指定设备可用的字体
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 枚举的字体资源, 文本型, , lpszFamily,欲枚举的字体家族
    .参数 函数地址, 子程序指针, , lpEnumFontFamProc,欲调用的函数地址
    .参数 自定义值, 整数型, , lParam,指定希望传递给回调函数的一个用户自定义值

.DLL命令 枚举指定字体_, 整数型, "gdi32.dll", "EnumFontFamiliesExA", , 根据一个LOGFONT结构提供的信息，列举指定设备可用的字体
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 枚举字体, 逻辑字体_, , lpLogFont,这个结构指定了欲枚举的字体
    .参数 函数地址, 子程序指针, , lpEnumFontFamProc,欲调用的函数地址
    .参数 自定义值, 整数型, , lParam,指定希望传递给回调函数的一个用户自定义值
    .参数 保留值, 整数型, , dw,保留，设为零

.DLL命令 枚举标准图元文件记录_, 整数型, "gdi32.dll", "EnumMetaFile", , 为一个标准的windows图元文件枚举单独的图元文件记录
    .参数 设备场景句柄, 整数型, , hDC,用于输出的设备场景的句柄
    .参数 图元文件句柄, 整数型, , hMetafile,欲列举的一个标准图元文件的句柄
    .参数 函数指针, 整数型, , lpMFEnumProc,参见相关帮助
    .参数 自定义数据, 整数型, , lParam,用户自定义的值

.DLL命令 枚举画笔和刷子_, 整数型, "gdi32.dll", "EnumObjects", , 枚举可随同指定设备场景使用的画笔和刷子
    .参数 设备场景句柄, 整数型, , hDC,设备场景的句柄
    .参数 枚举类型, 整数型, , n,欲枚举的对象的类型
    .参数 GDI对象指针, 整数型, , lpGOBJEnumProc,指向为每个GDI对象调用的指针
    .参数 回调函数值, 整数型, , lpVoid,枚举过程中传递给回调函数的值

.DLL命令 判断矩形结构_, 整数型, "user32.dll", "EqualRect", , 判断两个矩形结构是否相同
    .参数 矩形1, GDI_矩形, , lpRect1,要比较的矩形
    .参数 矩形2, GDI_矩形, , lpRect2,要比较的矩形

.DLL命令 判断区域_, 整数型, "gdi32.dll", "EqualRgn", , 确定两个区域是否相等
    .参数 区域1句柄, 整数型, , hSrcRgn1,一个区域的句柄
    .参数 区域2句柄, 整数型, , hSrcRgn2,另一个区域的句柄

.DLL命令 剪裁矩形区_, 整数型, "gdi32.dll", "ExcludeClipRect", , 
    .参数 设备场景句柄, 整数型, , hdc,要修改的设备场景
    .参数 被剪裁矩形区左上角的横坐标, 整数型, , X1,矩形（逻辑坐标）左上角的横坐标
    .参数 被剪裁矩形区左上角的纵坐标, 整数型, , Y1，矩形（逻辑坐标）左上角的纵坐标
    .参数 被剪裁矩形区右下角的横坐标, 整数型, , X2，参见相关帮助
    .参数 被剪裁矩形区右下角的纵坐标, 整数型, , Y2，参见相关帮助

.DLL命令 去掉刷新区域_, 整数型, "user32.dll", "ExcludeUpdateRgn", , 从专用设备场景剪裁区去掉指定窗口的刷新区域
    .参数 设备场景句柄, 整数型, , hdc,参见相关帮助
    .参数 刷新窗口句柄, 整数型, , hwnd,窗口句柄

.DLL命令 转换区域_, 整数型, "gdi32.dll", "ExtCreateRegion", , 根据世界转换修改区域
    .参数 转换的区域, 转换数据_, , lpXform,将用于由lpRgnData指定区域的转换
    .参数 缓冲区大小, 整数型, , nCount,lpRgnData数据结构或缓冲区的字节数
    .参数 区域结构, 区域数据_, , lpRgnData,用GetRegionData定义区域时载入的一个结构

.DLL命令 区域组合_, 整数型, "gdi32.dll", "ExtSelectClipRgn", , 将指定区域组合到设备场景的当前剪裁区
    .参数 设备场景句柄, 整数型, , hdc,剪裁区将被修改的设备场景的句柄
    .参数 区域句柄, 整数型, , hRgn,源区域句柄。若fnMode为RGN_COPY，它可为NULL
    .参数 组合方式, 整数型, , fnMode,常数之一

.DLL命令 扩展文本描绘_, 整数型, "gdi32.dll", "ExtTextOutA", , 经过扩展的文本描绘函数
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 起点横坐标, 整数型, , X,以逻辑坐标表示的一个点，指定了绘图起点横坐标
    .参数 起点纵坐标, 整数型, , Y,以逻辑坐标表示的一个点，指定了绘图起点纵坐标
    .参数 标志常数, 整数型, , wOptions,标志常数的任意组合
    .参数 描绘的范围, GDI_矩形, , lpRect,指定一个矩形，用于对文本进行格式化处理
    .参数 欲描绘的文本, 文本型, , lpString,欲描绘的字串
    .参数 文本长度, 整数型, , nCount,字串中要显示出来的字符数
    .参数 间距, 整数型, , lpDx,参见相关帮助

.DLL命令 刷子起点_, 整数型, "gdi32", "GetBrushOrgEx", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 点, 坐标_, , 

.DLL命令 取错误信息_, 整数型, "kernel32", "GetLastError", , 

.DLL命令 逻辑刷子对象_, 整数型, "gdi32", "UnrealizeObject", , 
    .参数 刷子句柄, 整数型, , 

.DLL命令 设置刷子起点_, 整数型, "gdi32", "SetBrushOrgEx", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 定义起点x, 整数型, , 
    .参数 定义起点y, 整数型, , 
    .参数 装载结构, 坐标_, 传址, 

.DLL命令 是否允许增强图形模式_, 整数型, "gdi32", "GetGraphicsMode", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 取设备场景扩展_, 整数型, "user32", "GetDCEx", , 
    .参数 窗口句柄, 整数型, , 
    .参数 剪裁区, 整数型, , 
    .参数 复选项, 整数型, , 

.DLL命令 取设备场景起点_, 整数型, "gdi32", "GetDCOrgEx", , 
    .参数 设备场景, 整数型, , 
    .参数 起点, 坐标_, 传址, 

.DLL命令 取屏幕句柄_, 整数型, "user32", "GetDesktopWindow", , 

.DLL命令 取设备场景信息_, 整数型, "gdi32", "GetDeviceCaps", , 
    .参数 设备场景, 整数型, , 
    .参数 值, 整数型, , 

.DLL命令 背景色填充模式_, 整数型, "gdi32", "GetBkMode", , 
    .参数 设备场景, 整数型, , hdc Long，设备场景的句柄 

.DLL命令 取点_, 整数型, "gdi32.dll", "GetPixel", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 x坐标, 整数型, , 
    .参数 y坐标, 整数型, , 

.DLL命令 创建内存场景_, 整数型, "Gdi32", "CreateCompatibleDC", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 创建设备位图_, 整数型, "gdi32", "CreateCompatibleBitmap", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 

.DLL命令 取画笔位置_, 整数型, "gdi32", "GetCurrentPositionEx", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 位置, 坐标_, , 

.DLL命令 创建画笔扩展_, 整数型, "gdi32", "ExtCreatePen", , 
    .参数 笔风格, 整数型, , 
    .参数 笔尖宽度, 整数型, , 
    .参数 笔刷定义结构, GDI_画刷属性, , 
    .参数 自定义段数, 整数型, , 
    .参数 自定义线, 整数型, , 

.DLL命令 默认光栅运算_, 整数型, "gdi32", "SetROP2", , 
    .参数 设备场景, 整数型, , 
    .参数 光栅运算方式, 整数型, , 

.DLL命令 取窗口矩形_, 整数型, "user32", "GetWindowRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, GDI_矩形, , 

.DLL命令 取客户区矩形_, 整数型, "user32", "GetClientRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, GDI_矩形, , 

.DLL命令 创建画笔_, 整数型, "gdi32", "CreatePen", , 
    .参数 风格, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 颜色, 整数型, , 

.DLL命令 当前选定对象_, 整数型, "gdi32", "GetCurrentObject", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 对象类型, 整数型, , 

.DLL命令 设置窗口标题_, 整数型, "user32", "SetWindowTextA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 取需更新区域_, 整数型, "user32", "GetUpdateRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 区域, GDI_矩形, , 
    .参数 清除, 逻辑型, , 

.DLL命令 确定窗口刷新对象区域_, 整数型, "user32", "GetUpdateRgn", , 
    .参数 窗口句柄, 整数型, , 
    .参数 对象区域, 整数型, 传址, 
    .参数 刷新, 逻辑型, , 

.DLL命令 取窗口全部设备场景_, 整数型, "user32.dll", "GetWindowDC", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 取得场景窗口范围_, 整数型, "gdi32.dll", "GetWindowExtEx", , 
    .参数 场景句柄, 整数型, , 
    .参数 尺寸, 尺寸_, , 

.DLL命令 取得窗口区域_, 整数型, "user32.dll", "GetWindowRgn", , 
    .参数 窗口句柄, 整数型, , 
    .参数 区域, 整数型, 传址, 

.DLL命令 设置窗口区域_, 整数型, "user32.dll", "SetWindowRgn", , 
    .参数 窗口句柄, 整数型, , 
    .参数 区域, 整数型, , 
    .参数 自动刷新, 逻辑型, , 

.DLL命令 灰色文本_, 整数型, "user32.dll", "GrayStringA", , 
    .参数 场景句柄, 整数型, , 
    .参数 刷子句柄, 整数型, , 
    .参数 函数的指针, 整数型, , 
    .参数 文本, 文本型, , 
    .参数 文本大小, 整数型, , 
    .参数 约束框左边, 整数型, , 
    .参数 约束框顶边, 整数型, , 
    .参数 约束框宽度, 整数型, , 
    .参数 约束框高度, 整数型, , 

.DLL命令 创建内切椭圆_, 整数型, "gdi32.dll", "CreateEllipticRgn", , 
    .参数 左上角横坐标, 整数型, , 
    .参数 左上角纵坐标, 整数型, , 
    .参数 右下角横坐标, 整数型, , 
    .参数 右下角纵坐标, 整数型, , 

.DLL命令 设置窗口信息_, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 到客户区坐标_, 整数型, "user32.dll", "ScreenToClient", , ScreenToClient，Long，非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，Long，一个窗口的句柄，该窗口定义了要使用的客户区坐标系统
    .参数 点, 坐标_, , GDI_点API，屏幕坐标系统中包含了屏幕点的结构。这个函数会随同相应的客户区坐标（由hwnd决定）载入结构

.DLL命令 释放设备场景_, 整数型, "user32", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 画圆角矩形_, 整数型, "gdi32", "RoundRect", , 用当前选定的画笔画一个圆角矩形，并用当前选定的刷子在其中填充。X3和Y3定义了用于生成圆角的椭圆；非零表示成功，零表示失败。
    .参数 设备场景句柄, 整数型, , hdc，用于绘图的设备场景
    .参数 启始横坐标, 整数型, , X1，对矩形左上角位置进行说明的X，Y坐标
    .参数 启始纵坐标, 整数型, , Y1，
    .参数 结束横坐标, 整数型, , X2，对矩形右下角位置进行说明的X，Y坐标
    .参数 结束纵坐标, 整数型, , Y2，
    .参数 椭圆宽度, 整数型, , X3，用于生成圆角效果的一个椭圆的宽度。取值范围从零（表示不加圆角），一直到矩形的宽度（全圆）
    .参数 椭圆高度, 整数型, , Y3，

.DLL命令 选入设备场景_, 整数型, "gdi32.dll", "SelectObject", , SelectObject
    .参数 场景句柄, 整数型, , hdc
    .参数 对象句柄, 整数型, , hobject

.DLL命令 异步显示窗口_, 整数型, "user32", "ShowWindowAsync", , ShowWindowAsync
    .参数 窗口句柄, 整数型, , hwnd，欲接收ShowWindow命令的窗口
    .参数 可视性类型, 整数型, , nCmdShow，与ShowWindow相同

.DLL命令 设置背景颜色_, 整数型, "gdi32.dll", "SetBkColor", , SetBkColor，背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode,Long，前一个背景色，CLR_INVALID表示出错
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 RGB颜色值, 整数型, , crColor，新背景颜色的RGB颜色值

.DLL命令 设置背景模式_, 整数型, "gdi32", "SetBkMode", , SetBkMode，Long，前一个背景模式的值
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 方式, 整数型, , nBkMode，下述常数之一：OPAQUE用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙TRANSPARENT透明处理，即不作上述填充

.DLL命令 画矩形_, 整数型, "gdi32.dll", "Rectangle", , Rectangle
    .参数 设备场景句柄, 整数型, , hdc
    .参数 左上角横坐标, 整数型, , X
    .参数 左上角纵坐标, 整数型, , Y
    .参数 右下角横坐标, 整数型, , X1
    .参数 右下角纵坐标, 整数型, , Y1

.DLL命令 复制位图_, 整数型, "gdi32.dll", "StretchBlt", , StretchBlt，将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容。这个函数会在设备场景中定义一个目标矩形，并在位图中定义一个源图象。源矩形会根据需要进行伸缩，以便与目标矩形的大小相符
    .参数 目标设备场景句柄, 整数型, , hdc，目标设备场景
    .参数 目标横坐标, 整数型, , x，目标矩形左上角的x,y坐标，以逻辑坐标表示
    .参数 目标纵坐标, 整数型, , y，目标矩形左上角的x,y坐标，以逻辑坐标表示
    .参数 目标宽度, 整数型, , nWidth，目标矩形的宽度和高度，以逻辑坐标表示
    .参数 目标高度, 整数型, , nHeight，目标矩形的宽度和高度，以逻辑坐标表示
    .参数 源设备场景句柄, 整数型, , hSrcDC，源设备场景。如光栅运算未指定一个源，则这个参数应为零
    .参数 源横坐标, 整数型, , xSrc，用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源纵坐标, 整数型, , ySrc，用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源宽度, 整数型, , nSrcWidth，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
    .参数 源高度, 整数型, , nSrcHeight，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
    .参数 光栅运算, 整数型, , dwRop，传输过程中进行的光栅运算。如刷子属于光栅运算的一部分，就使用选入目标DC的刷子

.DLL命令 描绘桌面墙纸_, 整数型, "user32.dll", "PaintDesktop", , PaintDesktop
    .参数 设备场景句柄, 整数型, , hdc，要在其中填充的设备场景

.DLL命令 判断矩形区域_, 整数型, "gdi32.dll", "RectInRegion", , RectInRegion，若矩形有部分在指定区域内为非零值，否则为0
    .参数 区域句柄, 整数型, , Long，区域句柄
    .参数 要测试的矩形结构, GDI_矩形, , RECT，要测试的矩形结构

.DLL命令 矩形是否可见_, 整数型, "gdi32.dll", "RectVisible", , RectVisible
    .参数 设备场景, 整数型, , hdc，Long，设备场景句柄
    .参数 矩形, GDI_矩形, , lprect，RECT，用于测试是否可见的矩形（用逻辑坐标）

.DLL命令 取图标文件索引号_, 整数型, "shlwapi.dll", "PathParseIconLocationA", , 
    .参数 图标文件, 文本型, , pszIconFile

.DLL命令 设置设备场景布局_, 整数型, "gdi32.dll", "SetLayout", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 设备场景布局, 整数型, , dwLayout

.DLL命令 取设备场景_, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 取设备场景布局_, 整数型, "gdi32.dll", "GetLayout", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 取指定点窗口句柄_, 整数型, "user32.dll", "WindowFromGDI_点", , 
    .参数 横坐标, 整数型, , xGDI_点，x点值
    .参数 纵坐标, 整数型, , yGDI_点，y点值

.DLL命令 呼叫窗口函数地址_, 整数型, "user32.dll", "CallWindowProcA", , 
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 取16位低位_, 字节型, "TLBINF32.dll", "lobyte", , 获得16位整数的低位
    .参数 十六位值, 整数型, , 

.DLL命令 取16位高位_, 字节型, "TLBINF32.dll", "hibyte", , 获得16位整数的高位
    .参数 十六位值, 整数型, , 

.DLL命令 取32位低位_, 整数型, "TLBINF32.dll", "loword", , 取出32位值的低16位
    .参数 三十二位值, 整数型, , 

.DLL命令 取32位高位_, 整数型, "TLBINF32.dll", "hiword", , 取出32位值的高16位
    .参数 三十二位值, 整数型, , 

.DLL命令 取设备场景视口范围_, 整数型, "gdi32.dll", "GetViewportExtEx", , 获取设备场景视口（viewport）范围  执行成功为非零值，失败为0
    .参数 设备场景句柄, 整数型, , hdc，设备场景句柄
    .参数 尺寸结构, 尺寸_, , lpSize，装载DC视口水平和垂直范围（以设备单元表示）的结构;

.DLL命令 取设备场景刷子颜色_, 整数型, "gdi32.dll", "GetDCBrushColor", , 
    .参数 设备场景句柄, 整数型, , hdc

.DLL命令 梯度填充矩形_, 整数型, "msimg32.dll", "GradientFill", , 用于矩形填充
    .参数 设备场景句柄, 整数型, , hDC，设备场景
    .参数 顶点数组, 字节集, , pVertex，数组，用来存放各顶点的位置及颜色信息，顶点在TRIVERTEX中定义
    .参数 顶点数组数量, 整数型, , dwNumVertex，表示顶点的个数
    .参数 数组结构, 整数型, 传址, pMesh，一个数组结构，表示组成图形的各顶点顺序，表示一个矩形用两个顶点，三角形要用三个顶点
    .参数 数组结构数量, 整数型, , dwNumMesh，表示矩形或三角形的个数
    .参数 填充模式, 整数型, , dwMode，填充的模式：水平填充，垂直填充，三角形填充。

.DLL命令 取设备灰度斜坡_, 整数型, "gdi32.dll", "GetDeviceGammaRamp", , 获取显示器的辉度系数
    .参数 设备场景句柄, 整数型, , hdc
    .参数 结构缓冲区地址, 短整数型, 传址, lpv

.DLL命令 置设备灰度斜坡_, 整数型, "gdi32.dll", "SetDeviceGammaRamp", , 设置辉等级
    .参数 设备场景句柄, 整数型, , hdc
    .参数 结构缓冲区地址, 短整数型, 传址, lpv

.DLL命令 取根窗口_, 整数型, "user32.dll", "GetAncestor", , 
    .参数 窗口句柄, 整数型, , 
    .参数 标志, 整数型, , gaFlags

.DLL命令 图像列表_绘画_, 整数型, "comctl32.dll", "ImageList_Draw", , 
    .参数 图像列表句柄, 整数型, , himl
    .参数 索引, 整数型, , i
    .参数 目标设备场景句柄, 整数型, , hdcDst
    .参数 横坐标, 整数型, , x
    .参数 纵坐标, 整数型, , y
    .参数 标志类型, 整数型, , fStyle

.DLL命令 图像列表_绘画扩展_, 整数型, "comctl32.dll", "ImageList_DrawEx", , 
    .参数 图像列表句柄, 整数型, , himl
    .参数 索引, 整数型, , i
    .参数 目标设备场景句柄, 整数型, , hdcDst
    .参数 横坐标, 整数型, , x
    .参数 纵坐标, 整数型, , y
    .参数 宽度, 整数型, , dx
    .参数 高度, 整数型, , dy
    .参数 背景rgb, 整数型, , rgbBk
    .参数 前景rgb, 整数型, , rgbFg
    .参数 标志类型, 整数型, , fStyle

.DLL命令 描绘一个多边形_, 整数型, "gdi32.dll", "Polygon", , 
    .参数 设备场景, 整数型, , hdc，用于描绘的设备场景
    .参数 GDI_点API结构, GDI_点, 数组, lpGDI_点，在nCount GDI_点API结构数组中的第一个GDI_点API结构
    .参数 顶点数, 整数型, , nCount，多边形的总点数（顶点数）

.DLL命令 刷子填充区域_, 整数型, "gdi32.dll", "FillRgn", , 用指定刷子填充指定区域
    .参数 设备场景句柄, 整数型, , hdc，设备场景句柄
    .参数 区域句柄, 整数型, , hRgn，以数据设备坐标填充的区域句柄
    .参数 刷子句柄, 整数型, , hBrush，要用的刷子的句柄

.DLL命令 置伸缩模式_, 整数型, "gdi32", "SetStretchBltMode", , 指定StretchBlt 和 StretchDIBits函数的伸缩模式。这种伸缩模式定义了Windows如何对伸缩过程中剔除的扫描线进行控制。对于VB窗体和控件，倘若在API绘图过程中使用这个函数，建议恢复原来的StretchBlt模式  上一次伸缩模式的值，零表示失败
    .参数 设备场景句柄, 整数型, , hdc
    .参数 伸缩模式, 整数型, , nStretchMode

.DLL命令 设置多边形填充模式_, 整数型, "gdi32.dll", "SetPolyFillMode", , Long，如执行成功，返回前一种多边形填充模式。零表示出错
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 填充类型, 整数型, , npolyfillmode，ALTERNATE交替填充WINDING根据绘图方向填充

.DLL命令 取多边形填充模式_, 整数型, "gdi32", "GetPolyFillMode", , 针对指定的设备场景，获得多边形填充模式。关于填充模式见注解  常数ALTERNATE 或 WINDING。零表示失败
    .参数 设备场景句柄, 整数型, , 设备场景的句柄

.DLL命令 取得窗口信息_, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 设置窗口位置_, 整数型, "user32.dll", "SetWindowPos", , Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , Long，欲定位的窗口
    .参数 定位类型, 整数型, , Long，窗口句柄。在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。HWND_BOTTOM将窗口置于窗口列表底部HWND_TOP将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序HWND_TOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的前面HWND_NOTOPMOST将窗口置于列表顶部，并位于任何最顶部窗口的后面
    .参数 窗口新横坐标, 整数型, , Long，窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 窗口新纵坐标, 整数型, , Long，窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 窗口新宽度, 整数型, , Long，指定新的窗口宽度
    .参数 窗口新高度, 整数型, , Long，指定新的窗口高度
    .参数 显示方式, 整数型, , Long，包含了旗标的一个整数SWP_DRAWFRAME围绕窗口画一个框SWP_HIDEWINDOW隐藏窗口等等

.DLL命令 置文本对齐方式_, 整数型, "gdi32.dll", "SetTextAlign", , 设置文本对齐方式，并指定在文本输出过程中使用设备场景的当前位置
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 标志, 整数型, , 参考GetTextAlign函数的返回值列表

.DLL命令 文本绘图_, 整数型, "gdi32.dll", "TextOutA", , Long，非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 横, 整数型, , x，绘图的起点，采用逻辑坐标
    .参数 纵, 整数型, , y，绘图的起点，采用逻辑坐标
    .参数 内容, 文本型, , lpstring，欲描绘的字串
    .参数 内容数量, 整数型, , ncount，字串中要描绘的字符数量

.DLL命令 透明位图效果_, 逻辑型, "msimg32.dll", "TransparentBlt", , 
    .参数 目标设备场景句柄, 整数型, , hdc
    .参数 目标横坐标, 整数型, , x
    .参数 目标纵坐标, 整数型, , y
    .参数 目标宽度, 整数型, , nWidth
    .参数 目标高度, 整数型, , nHeight
    .参数 源设备场景句柄, 整数型, , hSrcDC
    .参数 源横坐标, 整数型, , xSrc
    .参数 源纵坐标, 整数型, , ySrc
    .参数 源宽度, 整数型, , nSrcWidth
    .参数 源高度, 整数型, , nSrcHeight
    .参数 透明值, 整数型, , crTransparent

.DLL命令 十六进制转十进制_, 整数型, "shlwapi.dll", "StrToIntExA", , 
    .参数 转换文本, 文本型, , pszString
    .参数 标志, 整数型, , dwFlags
    .参数 返回值, 整数型, 传址, piRet

.DLL命令 创建文件1_, 整数型, "Kernel32.dll", "_lcreat", , 创建一个文件。如文件已经存在，就会将其缩短成零长度，并将其打开，以便读写
    .参数 文件路径, 文本型, , lpPathName，路径加文件名
    .参数 文件类型, 整数型, , iAttribute，0

.DLL命令 WindowFromDC, 整数型, "user32.dll", "WindowFromDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 SetPixelV, 整数型, "gdi32.dll", "SetPixelV", , 
    .参数 hdc, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 crColor, 整数型, , 

.DLL命令 Pie, 整数型, "Gdi32.dll", "Pie", , 
    .参数 设备句柄, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 PolyBezier, 整数型, "gdi32.dll", "PolyBezier", , 
    .参数 设备句柄, 整数型, , 
    .参数 点集合, GDI_点, 数组, 
    .参数 点数量, 整数型, , 

.DLL命令 Polyline, 整数型, "gdi32.dll", "Polyline", , 
    .参数 设备句柄, 整数型, , 
    .参数 点集合, GDI_点, 数组, 
    .参数 点数量, 整数型, , 

.DLL命令 EndPaint, 整数型, "user32", "EndPaint", , 结束重绘
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 BeginPaint, 整数型, "user32", "BeginPaint", , 开始重绘
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 AlphaBlend, 整数型, "msimg32.dll", "", , 
    .参数 desthdc, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 
    .参数 dwidth, 整数型, , 
    .参数 dheight, 整数型, , 
    .参数 srchdc, 整数型, , 
    .参数 sx, 整数型, , 
    .参数 sy, 整数型, , 
    .参数 sw, 整数型, , 
    .参数 sh, 整数型, , 
    .参数 BlendFunc, 整数型, , 

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", , 取内存变量地址
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 发送消息_, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 逻辑型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdipCreateFromHWND, 整数型, "gdiplus", "GdipCreateFromHWND", , 
    .参数 hwnd, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 代码页, 整数型, , cp_开头常量
    .参数 标志, 整数型, , 512
    .参数 宽字符文本, 整数型, , 字节集
    .参数 宽字符文本长度, 整数型, , 
    .参数 双字节文本, 文本型, , 字节集
    .参数 双字节文本长度, 整数型, , 
    .参数 默认文本, 整数型, , 
    .参数 使用默认文本, 整数型, , 逻辑

.DLL命令 MultiByteToWideChar, 整数型, "kernel32", "MultiByteToWideChar", , 将多媒体字符串映像为通配字符串
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 文本型, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus", "GdipLoadImageFromFile", , 
    .参数 filename, 字节集, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipLoadImageFromFileICM, 整数型, "gdiplus", "GdipLoadImageFromFileICM", , 
    .参数 filename, 字节集, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipDeleteGraphics, 整数型, "gdiplus", "GdipDeleteGraphics", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipCreateFromHDC, 整数型, "gdiplus", "GdipCreateFromHDC", , 
    .参数 hDC, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipGetDC, 整数型, "gdiplus", "GdipGetDC", , 
    .参数 graphics, 整数型, , 
    .参数 hDC, 整数型, 传址, 

.DLL命令 GdipReleaseDC, 整数型, "gdiplus", "GdipReleaseDC", , 
    .参数 graphics, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 GdipGetImageGraphicsContext, 整数型, "GdiPlus.dll", "GdipGetImageGraphicsContext", , 
    .参数 image, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipGetCompositingMode, 整数型, "gdiplus", "GdipGetCompositingMode", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingMd, 整数型, 传址, 

.DLL命令 GdipSetCompositingMode, 整数型, "gdiplus", "GdipSetCompositingMode", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingMd, 整数型, , 

.DLL命令 GdipGetRenderingOrigin, 整数型, "gdiplus", "GdipGetRenderingOrigin", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, 传址, 
    .参数 y, 整数型, 传址, 

.DLL命令 GdipSetRenderingOrigin, 整数型, "gdiplus", "GdipSetRenderingOrigin", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipGetCompositingQuality, 整数型, "gdiplus", "GdipGetCompositingQuality", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingQlty, 整数型, 传址, 

.DLL命令 GdipSetCompositingQuality, 整数型, "gdiplus", "GdipSetCompositingQuality", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingQlty, 整数型, , 

.DLL命令 GdipSetSmoothingMode, 整数型, "GdiPlus.dll", "GdipSetSmoothingMode", , 
    .参数 graphics, 整数型, , 
    .参数 smoothingMode, 整数型, , 

.DLL命令 GdipGetSmoothingMode, 整数型, "GdiPlus.dll", "GdipGetSmoothingMode", , 
    .参数 graphics, 整数型, , 
    .参数 smoothingMode, 整数型, 传址, 

.DLL命令 GdipSetTextRenderingHint, 整数型, "GdiPlus.dll", "GdipSetTextRenderingHint", , 
    .参数 graphics, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 GdipGetTextRenderingHint, 整数型, "GdiPlus.dll", "GdipGetTextRenderingHint", , 
    .参数 graphics, 整数型, , 
    .参数 mode, 整数型, 传址, 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 GdipDeletePen, 整数型, "GdiPlus.dll", "GdipDeletePen", , 
    .参数 pen, 整数型, , 

.DLL命令 GdipCreatePen1, 整数型, "gdiplus", "GdipCreatePen1", , 
    .参数 color, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 GdipCreatePen2, 整数型, "gdiplus", "GdipCreatePen2", , 
    .参数 Brush, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 GdipDeleteBrush, 整数型, "GdiPlus.dll", "GdipDeleteBrush", , 
    .参数 brush, 整数型, , 

.DLL命令 GdipCreateSolidFill, 整数型, "GdiPlus.dll", "GdipCreateSolidFill", , 
    .参数 color, 整数型, , 
    .参数 brush, 整数型, 传址, 

.DLL命令 GdipCloneBrush, 整数型, "gdiplus", "GdipCloneBrush", , 
    .参数 Brush, 整数型, , 
    .参数 cloneBrush, 整数型, 传址, 

.DLL命令 GdipDeleteFont, 整数型, "gdiplus", "GdipDeleteFont", , 
    .参数 curFont, 整数型, , 

.DLL命令 GdipCreateFont, 整数型, "gdiplus", "GdipCreateFont", , 
    .参数 fontFamily, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 style, 整数型, , 
    .参数 unit, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipDeleteFontFamily, 整数型, "gdiplus", "GdipDeleteFontFamily", , 
    .参数 fontFamily, 整数型, , 

.DLL命令 GdipCreateFontFamilyFromName, 整数型, "gdiplus", "GdipCreateFontFamilyFromName", , 
    .参数 name, 字节集, , 
    .参数 fontCollection, 整数型, , 
    .参数 fontFamily, 整数型, 传址, 

.DLL命令 GdipDrawString, 整数型, "gdiplus", "GdipDrawString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, GP_矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipDrawRectangle, 整数型, "GdiPlus.dll", "GdipDrawRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 width, 小数型, , 
    .参数 height, 小数型, , 

.DLL命令 GdipDrawRectangleI, 整数型, "GdiPlus.dll", "GdipDrawRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 GdipDeleteRegion, 整数型, "gdiplus", "GdipDeleteRegion", , 
    .参数 region, 整数型, , 

.DLL命令 GdipCreateRegion, 整数型, "gdiplus", "GdipCreateRegion", , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRect, 整数型, "gdiplus", "GdipCreateRegionRect", , 
    .参数 rect, GP_矩形F, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRectI, 整数型, "gdiplus", "GdipCreateRegionRectI", , 
    .参数 rect, GP_矩形L, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipDeletePath, 整数型, "gdiplus", "GdipDeletePath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipCreatePath, 整数型, "gdiplus", "GdipCreatePath", , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipDrawLine, 整数型, "gdiplus", "GdipDrawLine", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 

.DLL命令 GdipDrawLineI, 整数型, "gdiplus", "GdipDrawLineI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 

.DLL命令 GdipDrawLines, 整数型, "gdiplus", "GdipDrawLines", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawLinesI, 整数型, "gdiplus", "GdipDrawLinesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawArc, 整数型, "gdiplus", "GdipDrawArc", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawArcI, 整数型, "gdiplus", "GdipDrawArcI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawBezier, 整数型, "gdiplus", "GdipDrawBezier", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 
    .参数 x3, 小数型, , 
    .参数 y3, 小数型, , 
    .参数 x4, 小数型, , 
    .参数 y4, 小数型, , 

.DLL命令 GdipDrawBezierI, 整数型, "gdiplus", "GdipDrawBezierI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 GdipDrawBeziers, 整数型, "gdiplus", "GdipDrawBeziers", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawBeziersI, 整数型, "gdiplus", "GdipDrawBeziersI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectangles, 整数型, "gdiplus", "GdipDrawRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, GP_矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectanglesI, 整数型, "gdiplus", "GdipDrawRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, GP_矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawEllipse, 整数型, "gdiplus", "GdipDrawEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipDrawEllipseI, 整数型, "gdiplus", "GdipDrawEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipDrawImage, 整数型, "gdiplus", "GdipDrawImage", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 

.DLL命令 GdipDrawImageI, 整数型, "gdiplus", "GdipDrawImageI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipGetDpiX, 整数型, "gdiplus", "GdipGetDpiX", , 
    .参数 graphics, 整数型, , 
    .参数 dpi, 小数型, 传址, 

.DLL命令 GdipGetDpiY, 整数型, "gdiplus", "GdipGetDpiY", , 
    .参数 graphics, 整数型, , 
    .参数 dpi, 小数型, 传址, 

.DLL命令 GdipDrawPie, 整数型, "gdiplus", "GdipDrawPie", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPieI, 整数型, "gdiplus", "GdipDrawPieI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPolygon, 整数型, "gdiplus", "GdipDrawPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawPolygonI, 整数型, "gdiplus", "GdipDrawPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawPath, 整数型, "gdiplus", "GdipDrawPath", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipDrawCurve3, 整数型, "gdiplus", "GdipDrawCurve3", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve3I, 整数型, "gdiplus", "GdipDrawCurve3I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve2, 整数型, "gdiplus", "GdipDrawCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve2I, 整数型, "gdiplus", "GdipDrawCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve, 整数型, "gdiplus", "GdipDrawCurve", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawCurveI, 整数型, "gdiplus", "GdipDrawCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurve, 整数型, "gdiplus", "GdipDrawClosedCurve", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurveI, 整数型, "gdiplus", "GdipDrawClosedCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurve2, 整数型, "gdiplus", "GdipDrawClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawClosedCurve2I, 整数型, "gdiplus", "GdipDrawClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipGraphicsClear, 整数型, "gdiplus", "GdipGraphicsClear", , 
    .参数 graphics, 整数型, , 
    .参数 lColor, 整数型, , 

.DLL命令 GdipFillRectangle, 整数型, "gdiplus", "GdipFillRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillRectangleI, 整数型, "gdiplus", "GdipFillRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillRectangles, 整数型, "gdiplus", "GdipFillRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, GP_矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillRectanglesI, 整数型, "gdiplus", "GdipFillRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, GP_矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillPolygon, 整数型, "gdiplus", "GdipFillPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillPolygonI, 整数型, "gdiplus", "GdipFillPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillEllipse, 整数型, "gdiplus", "GdipFillEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillEllipseI, 整数型, "gdiplus", "GdipFillEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillPie, 整数型, "gdiplus", "GdipFillPie", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillPieI, 整数型, "gdiplus", "GdipFillPieI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillPath, 整数型, "gdiplus", "GdipFillPath", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipFillClosedCurve, 整数型, "gdiplus", "GdipFillClosedCurve", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillClosedCurve2, 整数型, "gdiplus", "GdipFillClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillClosedCurveI, 整数型, "gdiplus", "GdipFillClosedCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillClosedCurve2I, 整数型, "gdiplus", "GdipFillClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillRegion, 整数型, "gdiplus", "GdipFillRegion", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 region, 整数型, , 

.DLL命令 GdipDrawImageRect, 整数型, "gdiplus", "GdipDrawImageRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipDrawImageRectI, 整数型, "gdiplus", "GdipDrawImageRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipDrawImagePoints, 整数型, "gdiplus", "GdipDrawImagePoints", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstpoints, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawImagePointsI, 整数型, "gdiplus", "GdipDrawImagePointsI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstpoints, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawImagePointRect, 整数型, "gdiplus", "GdipDrawImagePointRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 

.DLL命令 GdipDrawImagePointRectI, 整数型, "gdiplus", "GdipDrawImagePointRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 

.DLL命令 GdipDrawImageRectRect, 整数型, "gdiplus", "GdipDrawImageRectRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstX, 小数型, , 
    .参数 dstY, 小数型, , 
    .参数 dstWidth, 小数型, , 
    .参数 dstHeight, 小数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipDrawImageRectRectI, 整数型, "gdiplus", "GdipDrawImageRectRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstX, 整数型, , 
    .参数 dstY, 整数型, , 
    .参数 dstWidth, 整数型, , 
    .参数 dstHeight, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipSetClipGraphics, 整数型, "gdiplus", "GdipSetClipGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 srcgraphics, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipPath, 整数型, "gdiplus", "GdipSetClipPath", , 
    .参数 graphics, 整数型, , 
    .参数 path, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRect, 整数型, "gdiplus", "GdipSetClipRect", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRectI, 整数型, "gdiplus", "GdipSetClipRectI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRegion, 整数型, "gdiplus", "GdipSetClipRegion", , 
    .参数 graphics, 整数型, , 
    .参数 region, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipHrgn, 整数型, "gdiplus", "GdipSetClipHrgn", , 
    .参数 graphics, 整数型, , 
    .参数 hRgn, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipResetClip, 整数型, "gdiplus", "GdipResetClip", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipTranslateClip, 整数型, "gdiplus", "GdipTranslateClip", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipTranslateClipI, 整数型, "gdiplus", "GdipTranslateClipI", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 

.DLL命令 GdipGetClip, 整数型, "gdiplus", "GdipGetClip", , 
    .参数 graphics, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipGetClipBounds, 整数型, "gdiplus", "GdipGetClipBounds", , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形F, 传址, 

.DLL命令 GdipGetClipBoundsI, 整数型, "gdiplus", "GdipGetClipBoundsI", , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形L, 传址, 

.DLL命令 GdipIsClipEmpty, 整数型, "gdiplus", "GdipIsClipEmpty", , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipGetVisibleClipBounds, 整数型, "gdiplus", "GdipGetVisibleClipBounds", , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形F, 传址, 

.DLL命令 GdipGetVisibleClipBoundsI, 整数型, "gdiplus", "GdipGetVisibleClipBoundsI", , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形L, 传址, 

.DLL命令 GdipIsVisibleClipEmpty, 整数型, "gdiplus", "GdipIsVisibleClipEmpty", , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePoint, 整数型, "gdiplus", "GdipIsVisiblePoint", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePointI, 整数型, "gdiplus", "GdipIsVisiblePointI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRect, 整数型, "gdiplus", "GdipIsVisibleRect", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRectI, 整数型, "gdiplus", "GdipIsVisibleRectI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipDrawImagePointsRect, 整数型, "gdiplus", "GdipDrawImagePointsRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipDrawImagePointsRectI, 整数型, "gdiplus", "GdipDrawImagePointsRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipCreateImageAttributes, 整数型, "gdiplus", "GdipCreateImageAttributes", , 
    .参数 imageattr, 整数型, 传址, 

.DLL命令 GdipDisposeImageAttributes, 整数型, "gdiplus", "GdipDisposeImageAttributes", , 
    .参数 imageattr, 整数型, , 

.DLL命令 GdipCloneImageAttributes, 整数型, "gdiplus", "GdipCloneImageAttributes", , 
    .参数 imageattr, 整数型, , 
    .参数 cloneImageattr, 整数型, 传址, 

.DLL命令 GdipSetImageAttributesToIdentity, 整数型, "gdiplus", "GdipSetImageAttributesToIdentity", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipResetImageAttributes, 整数型, "gdiplus", "GdipResetImageAttributes", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipSetImageAttributesThreshold, 整数型, "gdiplus", "GdipSetImageAttributesThreshold", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 threshold, 小数型, , 

.DLL命令 GdipSetImageAttributesNoOp, 整数型, "gdiplus", "GdipSetImageAttributesNoOp", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 

.DLL命令 GdipSetImageAttributesGamma, 整数型, "gdiplus", "GdipSetImageAttributesGamma", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 gamma, 小数型, , 

.DLL命令 GdipSetImageAttributesColorKeys, 整数型, "gdiplus", "GdipSetImageAttributesColorKeys", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colorLow, 整数型, , 
    .参数 colorHigh, 整数型, , 

.DLL命令 GdipSetImageAttributesOutputChannel, 整数型, "gdiplus", "GdipSetImageAttributesOutputChannel", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjstType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 channelFlags, 整数型, , 

.DLL命令 GdipSetImageAttributesOutputChannelColorProfile, 整数型, "gdiplus", "GdipSetImageAttributesOutputChannelColorProfile", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colorProfileFilename, 字节集, , 

.DLL命令 GdipSetImageAttributesRemapTable, 整数型, "gdiplus", "GdipSetImageAttributesRemapTable", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 mapSize, 整数型, , 
    .参数 map, GP_色彩映射表, 数组, 

.DLL命令 GdipSetImageAttributesWrapMode, 整数型, "gdiplus", "GdipSetImageAttributesWrapMode", , 
    .参数 imageattr, 整数型, , 
    .参数 wrap, 整数型, , 
    .参数 argb, 整数型, , 
    .参数 bClamp, 整数型, , 

.DLL命令 GdipGetImageAttributesAdjustedPalette, 整数型, "gdiplus", "GdipGetImageAttributesAdjustedPalette", , 
    .参数 imageattr, 整数型, , 
    .参数 colorPal, GP_颜色调色板, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipCreateMatrix, 整数型, "gdiplus", "GdipCreateMatrix", , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipDeleteMatrix, 整数型, "gdiplus", "GdipDeleteMatrix", , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreateMatrix2, 整数型, "gdiplus", "GdipCreateMatrix2", , 
    .参数 m11, 小数型, , 
    .参数 m12, 小数型, , 
    .参数 m21, 小数型, , 
    .参数 m22, 小数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCreateMatrix3, 整数型, "gdiplus", "GdipCreateMatrix3", , 
    .参数 rect, GP_矩形F, , 
    .参数 dstplg, GP_坐标F, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCreateMatrix3I, 整数型, "gdiplus", "GdipCreateMatrix3I", , 
    .参数 rect, GP_矩形L, , 
    .参数 dstplg, GP_坐标L, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCloneMatrix, 整数型, "gdiplus", "GdipCloneMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 cloneMatrix, 整数型, 传址, 

.DLL命令 GdipSetMatrixElements, 整数型, "gdiplus", "GdipSetMatrixElements", , 
    .参数 matrix, 整数型, , 
    .参数 m11, 小数型, , 
    .参数 m12, 小数型, , 
    .参数 m21, 小数型, , 
    .参数 m22, 小数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipGetMatrixElements, 整数型, "gdiplus", "GdipGetMatrixElements", , 
    .参数 matrix, 整数型, , 
    .参数 matrixOut, 小数型, 数组, 

.DLL命令 GdipSetWorldTransform, 整数型, "GdiPlus.dll", "GdipSetWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyMatrix, 整数型, "GdiPlus.dll", "GdipMultiplyMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 matrix2, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateMatrix, 整数型, "gdiplus", "GdipTranslateMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 offsetX, 小数型, , 
    .参数 offsetY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateMatrix, 整数型, "gdiplus", "GdipRotateMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleMatrix, 整数型, "gdiplus", "GdipScaleMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 scaleX, 小数型, , 
    .参数 scaleY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipInvertMatrix, 整数型, "GdiPlus.dll", "GdipInvertMatrix", , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipShearMatrix, 整数型, "gdiplus", "GdipShearMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 shearX, 小数型, , 
    .参数 shearY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTransformMatrixPoints, 整数型, "gdiplus", "GdipTransformMatrixPoints", , 
    .参数 matrix, 整数型, , 
    .参数 pts, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipVectorTransformMatrixPoints, 整数型, "gdiplus", "GdipVectorTransformMatrixPoints", , 
    .参数 matrix, 整数型, , 
    .参数 pts, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipIsMatrixEqual, 整数型, "gdiplus", "GdipIsMatrixEqual", , 
    .参数 matrix, 整数型, , 
    .参数 matrix2, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsMatrixIdentity, 整数型, "gdiplus", "GdipIsMatrixIdentity", , 
    .参数 matrix, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsMatrixInvertible, 整数型, "gdiplus", "GdipIsMatrixInvertible", , 
    .参数 matrix, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipSetImageAttributesColorMatrix, 整数型, "gdiplus", "GdipSetImageAttributesColorMatrix", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colourMatrix, 小数型, 数组, 
    .参数 grayMatrix, 小数型, 数组, 
    .参数 flags, 整数型, , 

.DLL命令 GdipGetWorldTransform, 整数型, "gdiplus", "GdipGetWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipResetWorldTransform, 整数型, "gdiplus", "GdipResetWorldTransform", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipMultiplyWorldTransform, 整数型, "gdiplus", "GdipMultiplyWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateWorldTransform, 整数型, "gdiplus", "GdipRotateWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleWorldTransform, 整数型, "gdiplus", "GdipScaleWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateWorldTransform, 整数型, "gdiplus", "GdipTranslateWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPageUnit, 整数型, "gdiplus", "GdipGetPageUnit", , 
    .参数 graphics, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipSetPageUnit, 整数型, "gdiplus", "GdipSetPageUnit", , 
    .参数 graphics, 整数型, , 
    .参数 unit, 整数型, , 

.DLL命令 GdipGetPageScale, 整数型, "gdiplus", "GdipGetPageScale", , 
    .参数 graphics, 整数型, , 
    .参数 sScale, 小数型, 传址, 

.DLL命令 GdipSetPageScale, 整数型, "gdiplus", "GdipSetPageScale", , 
    .参数 graphics, 整数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipGetNearestColor, 整数型, "gdiplus", "GdipGetNearestColor", , 
    .参数 graphics, 整数型, , 
    .参数 argb, 整数型, 传址, 

.DLL命令 GdipRestoreGraphics, 整数型, "gdiplus", "GdipRestoreGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, , 

.DLL命令 GdipSaveGraphics, 整数型, "gdiplus", "GdipSaveGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainer, 整数型, "gdiplus", "GdipBeginContainer", , 
    .参数 graphics, 整数型, , 
    .参数 dstRect, GP_矩形F, , 
    .参数 srcRect, GP_矩形F, , 
    .参数 unit, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainerI, 整数型, "gdiplus", "GdipBeginContainerI", , 
    .参数 graphics, 整数型, , 
    .参数 dstRect, GP_矩形L, , 
    .参数 srcRect, GP_矩形L, , 
    .参数 unit, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainer2, 整数型, "gdiplus", "GdipBeginContainer2", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipEndContainer, 整数型, "gdiplus", "GdipEndContainer", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 空白型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 GlobalAlloc, 整数型, "kernel32", "GlobalAlloc", , 在堆中分配内存  成功返回内存块句柄，失败返回零
    .参数 wFlags, 整数型, , GMEM_开头常量。如指定了 GMEM_FIXED那么无须调用GlobalLock/GlobalUnlock 操作
    .参数 dwBytes, 整数型, , 要分配的字符数

.DLL命令 GlobalFree, 整数型, "kernel32", "GlobalFree", , 释放全局内存块
    .参数 hMem, 整数型, , 

.DLL命令 GlobalLock, 整数型, "kernel32", "GlobalLock", , 锁定内存对象并返回一个指针  成功返回内存指针，失败返回null。GetLastError来获得出错信息
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "kernel32", "GlobalUnlock", , 开锁全局内存块  非零值，指定的内存对象仍处于被锁定状态。0，函数执行出错，可以用GetLastError来获得出错信息，如果返回NO_ERROR，则表示内存对象已经解锁了
    .参数 hMem, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32", "WriteProcessMemory", , 在指定进程中写内存  非0成功
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 0

.DLL命令 GetCurrentProcess, 整数型, "kernel32", "GetCurrentProcess", , 获取当前进程的一个伪句柄  当前进程的伪句柄

.DLL命令 lstrcpy_字节集, 整数型, "kernel32", "lstrcpyA", , 取内存变量地址
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 

.DLL命令 RtlMoveMemory, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_points, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, GP_坐标F, 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_bytes, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节型, 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_int2bin, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节集, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_bin2intary, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 数组, 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_intary2bin, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, 数组, 
    .参数 Length, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 字节集, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GlobalSize, 整数型, "kernel32", "GlobalSize", , 返回全局内存块大小
    .参数 hMem, 整数型, , 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 整数型, , 
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream", , 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipLoadImageFromStreamICM, 整数型, "GdiPlus.dll", "GdipLoadImageFromStreamICM", , 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipCloneImage, 整数型, "gdiplus", "GdipCloneImage", , 
    .参数 Image, 整数型, , 
    .参数 cloneImage, 整数型, 传址, 

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus", "GdipSaveImageToFile", , 
    .参数 Image, 整数型, , 
    .参数 filename, 字节集, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipSaveImageToStream, 整数型, "GdiPlus.dll", "GdipSaveImageToStream", , 
    .参数 image, 整数型, , 
    .参数 stream, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipGetImageRawFormat, 整数型, "gdiplus", "GdipGetImageRawFormat", , 
    .参数 Image, 整数型, , 
    .参数 format, 字节集, 传址, 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GdipGetImageBounds, 整数型, "gdiplus", "GdipGetImageBounds", , 
    .参数 Image, 整数型, , 
    .参数 srcRect, GP_矩形F, 传址, 
    .参数 srcUnit, 整数型, 传址, 

.DLL命令 GdipGetImageDimension, 整数型, "gdiplus", "GdipGetImageDimension", , 
    .参数 Image, 整数型, , 
    .参数 Width, 小数型, 传址, 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetImageType, 整数型, "gdiplus", "GdipGetImageType", , 
    .参数 Image, 整数型, , 
    .参数 itype, 整数型, 传址, 

.DLL命令 GdipGetImageHeight, 整数型, "gdiplus", "GdipGetImageHeight", , 
    .参数 Image, 整数型, , 
    .参数 Height, 整数型, 传址, 

.DLL命令 GdipGetImageWidth, 整数型, "gdiplus", "GdipGetImageWidth", , 
    .参数 Image, 整数型, , 
    .参数 Width, 整数型, 传址, 

.DLL命令 GdipGetImageHorizontalResolution, 整数型, "gdiplus", "GdipGetImageHorizontalResolution", , 
    .参数 Image, 整数型, , 
    .参数 resolution, 小数型, 传址, 

.DLL命令 GdipGetImageVerticalResolution, 整数型, "gdiplus", "GdipGetImageVerticalResolution", , 
    .参数 Image, 整数型, , 
    .参数 resolution, 小数型, 传址, 

.DLL命令 GdipGetImageFlags, 整数型, "gdiplus", "GdipGetImageFlags", , 
    .参数 Image, 整数型, , 
    .参数 flags, 整数型, 传址, 

.DLL命令 GdipGetImagePixelFormat, 整数型, "gdiplus", "GdipGetImagePixelFormat", , 
    .参数 Image, 整数型, , 
    .参数 PixelFormat, 整数型, 传址, 

.DLL命令 GdipGetImageThumbnail, 整数型, "gdiplus", "GdipGetImageThumbnail", , 
    .参数 Image, 整数型, , 
    .参数 thumbWidth, 整数型, , 
    .参数 thumbHeight, 整数型, , 
    .参数 thumbImage, 整数型, 传址, 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipGetEncoderParameterList, 整数型, "gdiplus", "GdipGetEncoderParameterList", , 
    .参数 Image, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 size, 整数型, , 
    .参数 buffer, 字节集, , 

.DLL命令 GdipGetEncoderParameterListSize, 整数型, "gdiplus", "GdipGetEncoderParameterListSize", , 
    .参数 Image, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipImageGetFrameDimensionsCount, 整数型, "gdiplus", "GdipImageGetFrameDimensionsCount", , 
    .参数 Image, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipImageGetFrameDimensionsList, 整数型, "gdiplus", "GdipImageGetFrameDimensionsList", , 
    .参数 Image, 整数型, , 
    .参数 dimensionIDs, 字节集, , 
    .参数 count, 整数型, , 

.DLL命令 GdipImageGetFrameCount, 整数型, "gdiplus", "GdipImageGetFrameCount", , 
    .参数 Image, 整数型, , 
    .参数 dimensionID, 字节集, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipImageSelectActiveFrame, 整数型, "gdiplus", "GdipImageSelectActiveFrame", , 
    .参数 Image, 整数型, , 
    .参数 dimensionID, 字节集, , 
    .参数 frameIndex, 整数型, , 

.DLL命令 GdipGetPropertyItem, 整数型, "gdiplus", "GdipGetPropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 
    .参数 propSize, 整数型, , 
    .参数 buffer, 字节集, , 

.DLL命令 GdipGetPropertyItemSize, 整数型, "gdiplus", "GdipGetPropertyItemSize", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipGetPropertyCount, 整数型, "gdiplus", "GdipGetPropertyCount", , 
    .参数 Image, 整数型, , 
    .参数 numOfProperty, 整数型, 传址, 

.DLL命令 GdipGetPropertyIdList, 整数型, "gdiplus", "GdipGetPropertyIdList", , 
    .参数 Image, 整数型, , 
    .参数 numOfProperty, 整数型, , 
    .参数 list, 整数型, 数组, 

.DLL命令 GdipImageRotateFlip, 整数型, "gdiplus", "GdipImageRotateFlip", , 
    .参数 Image, 整数型, , 
    .参数 rfType, 整数型, , 

.DLL命令 GdipGetImagePalette, 整数型, "gdiplus", "GdipGetImagePalette", , 
    .参数 Image, 整数型, , 
    .参数 palette, 字节集, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetImagePaletteSize, 整数型, "gdiplus", "GdipGetImagePaletteSize", , 
    .参数 Image, 整数型, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipSetImagePalette, 整数型, "gdiplus", "GdipSetImagePalette", , 
    .参数 Image, 整数型, , 
    .参数 palette, GP_颜色调色板, , 

.DLL命令 GdipRemovePropertyItem, 整数型, "gdiplus", "GdipRemovePropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 

.DLL命令 GdipSetPropertyItem, 整数型, "gdiplus", "GdipSetPropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 Item, GP_属性项目, , 

.DLL命令 GdipSaveAdd, 整数型, "gdiplus", "GdipSaveAdd", , 
    .参数 Image, 整数型, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipSaveAddImage, 整数型, "gdiplus", "GdipSaveAddImage", , 
    .参数 Image, 整数型, , 
    .参数 newImage, 整数型, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipGetImageEncoders, 整数型, "gdiplus.dll", "GdipGetImageEncoders", , 
    .参数 numEncoders, 整数型, , 
    .参数 size, 整数型, , 
    .参数 encoders, 字节集, , 

.DLL命令 GdipGetImageEncodersSize, 整数型, "gdiplus.dll", "GdipGetImageEncodersSize", , 
    .参数 numEncoders, 整数型, 传址, 
    .参数 size, 整数型, 传址, 

.DLL命令 StringFromGUID2, 整数型, "ole32.dll", "StringFromGUID2", , 
    .参数 rguid, 字节集, , 
    .参数 lpsz, 字节集, , 
    .参数 cchMax, 整数型, , 长度+1

.DLL命令 GdipGetBrushType, 整数型, "gdiplus", "GdipGetBrushType", , 
    .参数 Brush, 整数型, , 
    .参数 brshType, 整数型, 传址, 

.DLL命令 GdipSetSolidFillColor, 整数型, "GdiPlus.dll", "GdipSetSolidFillColor", , 
    .参数 brush, 整数型, , 
    .参数 color, 整数型, , 

.DLL命令 GdipGetSolidFillColor, 整数型, "GdiPlus.dll", "GdipGetSolidFillColor", , 
    .参数 brush, 整数型, , 
    .参数 color, 整数型, 传址, 

.DLL命令 GdipCreateHatchBrush, 整数型, "gdiplus", "GdipCreateHatchBrush", , 
    .参数 style, 整数型, , 
    .参数 forecolr, 整数型, , 
    .参数 backcolr, 整数型, , 
    .参数 Brush, 整数型, 传址, 

.DLL命令 GdipGetHatchStyle, 整数型, "gdiplus", "GdipGetHatchStyle", , 
    .参数 Brush, 整数型, , 
    .参数 style, 整数型, 传址, 

.DLL命令 GdipGetHatchBackgroundColor, 整数型, "gdiplus", "GdipGetHatchBackgroundColor", , 
    .参数 Brush, 整数型, , 
    .参数 backcolr, 整数型, 传址, 

.DLL命令 GdipGetHatchForegroundColor, 整数型, "gdiplus", "GdipGetHatchForegroundColor", , 
    .参数 Brush, 整数型, , 
    .参数 forecolr, 整数型, 传址, 

.DLL命令 GdipCreateTexture, 整数型, "gdiplus", "GdipCreateTexture", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTexture2, 整数型, "gdiplus", "GdipCreateTexture2", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTexture2I, 整数型, "gdiplus", "GdipCreateTexture2I", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTextureIA, 整数型, "gdiplus", "GdipCreateTextureIA", , 
    .参数 Image, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTextureIAI, 整数型, "gdiplus", "GdipCreateTextureIAI", , 
    .参数 Image, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipGetTextureTransform, 整数型, "gdiplus", "GdipGetTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetTextureTransform, 整数型, "gdiplus", "GdipSetTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipResetTextureTransform, 整数型, "gdiplus", "GdipResetTextureTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipMultiplyTextureTransform, 整数型, "gdiplus", "GdipMultiplyTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateTextureTransform, 整数型, "gdiplus", "GdipTranslateTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleTextureTransform, 整数型, "gdiplus", "GdipScaleTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateTextureTransform, 整数型, "gdiplus", "GdipRotateTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetTextureImage, 整数型, "gdiplus", "GdipGetTextureImage", , 
    .参数 Brush, 整数型, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipGetTextureWrapMode, 整数型, "gdiplus", "GdipGetTextureWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetTextureWrapMode, 整数型, "gdiplus", "GdipSetTextureWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipCreateLineBrush, 整数型, "gdiplus", "GdipCreateLineBrush", , 
    .参数 Point1, GP_坐标F, , 
    .参数 Point2, GP_坐标F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushI, 整数型, "gdiplus", "GdipCreateLineBrushI", , 
    .参数 Point1, GP_坐标L, , 
    .参数 Point2, GP_坐标L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRect, 整数型, "gdiplus", "GdipCreateLineBrushFromRect", , 
    .参数 rect, GP_矩形F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 Mode, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectI, 整数型, "gdiplus", "GdipCreateLineBrushFromRectI", , 
    .参数 rect, GP_矩形L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 Mode, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectWithAngle, 整数型, "gdiplus", "GdipCreateLineBrushFromRectWithAngle", , 
    .参数 rect, GP_矩形F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 isAngleScalable, 逻辑型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectWithAngleI, 整数型, "gdiplus", "GdipCreateLineBrushFromRectWithAngleI", , 
    .参数 rect, GP_矩形L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 isAngleScalable, 逻辑型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipGetLineColors, 整数型, "gdiplus", "GdipGetLineColors", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, 数组, 

.DLL命令 GdipSetLineColors, 整数型, "gdiplus", "GdipSetLineColors", , 
    .参数 Brush, 整数型, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 

.DLL命令 GdipGetLineRect, 整数型, "gdiplus", "GdipGetLineRect", , 
    .参数 Brush, 整数型, , 
    .参数 rect, GP_矩形F, 传址, 

.DLL命令 GdipGetLineRectI, 整数型, "gdiplus", "GdipGetLineRectI", , 
    .参数 Brush, 整数型, , 
    .参数 rect, GP_矩形L, 传址, 

.DLL命令 GdipGetLineGammaCorrection, 整数型, "gdiplus", "GdipGetLineGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, 传址, 

.DLL命令 GdipSetLineGammaCorrection, 整数型, "gdiplus", "GdipSetLineGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, , 

.DLL命令 GdipGetLineBlend, 整数型, "gdiplus", "GdipGetLineBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLineBlendCount, 整数型, "gdiplus", "GdipGetLineBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetLineBlend, 整数型, "gdiplus", "GdipSetLineBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLinePresetBlend, 整数型, "gdiplus", "GdipGetLinePresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLinePresetBlendCount, 整数型, "gdiplus", "GdipGetLinePresetBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetLinePresetBlend, 整数型, "gdiplus", "GdipSetLinePresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipSetLineLinearBlend, 整数型, "gdiplus", "GdipSetLineLinearBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 theScale, 小数型, , 

.DLL命令 GdipSetLineSigmaBlend, 整数型, "gdiplus", "GdipSetLineSigmaBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 theScale, 小数型, , 

.DLL命令 GdipGetLineWrapMode, 整数型, "gdiplus", "GdipGetLineWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetLineWrapMode, 整数型, "gdiplus", "GdipSetLineWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipGetLineTransform, 整数型, "gdiplus", "GdipGetLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetLineTransform, 整数型, "gdiplus", "GdipSetLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyLineTransform, 整数型, "gdiplus", "GdipMultiplyLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetLineTransform, 整数型, "gdiplus", "GdipResetLineTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipRotateLineTransform, 整数型, "gdiplus", "GdipRotateLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleLineTransform, 整数型, "gdiplus", "GdipScaleLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateLineTransform, 整数型, "gdiplus", "GdipTranslateLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipCreatePathGradient, 整数型, "gdiplus", "GdipCreatePathGradient", , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipCreatePathGradientI, 整数型, "gdiplus", "GdipCreatePathGradientI", , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipCreatePathGradientFromPath, 整数型, "gdiplus", "GdipCreatePathGradientFromPath", , 
    .参数 path, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipGetPathGradientCenterColor, 整数型, "gdiplus", "GdipGetPathGradientCenterColor", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, 传址, 

.DLL命令 GdipSetPathGradientCenterColor, 整数型, "gdiplus", "GdipSetPathGradientCenterColor", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, , 

.DLL命令 GdipGetPathGradientSurroundColorsWithCount, 整数型, "gdiplus", "GdipGetPathGradientSurroundColorsWithCount", , 
    .参数 Brush, 整数型, , 
    .参数 argb, 整数型, 数组, 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientSurroundColorsWithCount, 整数型, "gdiplus", "GdipSetPathGradientSurroundColorsWithCount", , 
    .参数 Brush, 整数型, , 
    .参数 argb, 整数型, 数组, 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientSurroundColorCount, 整数型, "gdiplus", "GdipGetPathGradientSurroundColorCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientPath, 整数型, "gdiplus", "GdipGetPathGradientPath", , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipSetPathGradientPath, 整数型, "gdiplus", "GdipSetPathGradientPath", , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathGradientCenterPoint, 整数型, "gdiplus", "GdipGetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标F, 传址, 

.DLL命令 GdipGetPathGradientCenterPointI, 整数型, "gdiplus", "GdipGetPathGradientCenterPointI", , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标L, 传址, 

.DLL命令 GdipSetPathGradientCenterPoint, 整数型, "gdiplus", "GdipSetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标F, , 

.DLL命令 GdipSetPathGradientCenterPointI, 整数型, "gdiplus", "GdipSetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, GP_坐标L, , 

.DLL命令 GdipGetPathGradientRect, 整数型, "gdiplus", "GdipGetPathGradientRect", , 
    .参数 Brush, 整数型, , 
    .参数 rect, GP_矩形F, 传址, 

.DLL命令 GdipGetPathGradientRectI, 整数型, "gdiplus", "GdipGetPathGradientRectI", , 
    .参数 Brush, 整数型, , 
    .参数 rect, GP_矩形L, 传址, 

.DLL命令 GdipGetPathGradientPointCount, 整数型, "gdiplus", "GdipGetPathGradientPointCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientGammaCorrection, 整数型, "gdiplus", "GdipGetPathGradientGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, 传址, 

.DLL命令 GdipSetPathGradientGammaCorrection, 整数型, "gdiplus", "GdipSetPathGradientGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, , 

.DLL命令 GdipGetPathGradientBlend, 整数型, "gdiplus", "GdipGetPathGradientBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientBlendCount, 整数型, "gdiplus", "GdipGetPathGradientBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientBlend, 整数型, "gdiplus", "GdipSetPathGradientBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientPresetBlend, 整数型, "gdiplus", "GdipGetPathGradientPresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientPresetBlendCount, 整数型, "gdiplus", "GdipGetPathGradientPresetBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientPresetBlend, 整数型, "gdiplus", "GdipSetPathGradientPresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipSetPathGradientLinearBlend, 整数型, "gdiplus", "GdipSetPathGradientLinearBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipSetPathGradientSigmaBlend, 整数型, "gdiplus", "GdipSetPathGradientSigmaBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipGetPathGradientWrapMode, 整数型, "gdiplus", "GdipGetPathGradientWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetPathGradientWrapMode, 整数型, "gdiplus", "GdipSetPathGradientWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipGetPathGradientTransform, 整数型, "gdiplus", "GdipGetPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipMultiplyPathGradientTransform, 整数型, "gdiplus", "GdipMultiplyPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetPathGradientTransform, 整数型, "gdiplus", "GdipResetPathGradientTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipRotatePathGradientTransform, 整数型, "gdiplus", "GdipRotatePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScalePathGradientTransform, 整数型, "gdiplus", "GdipScalePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipSetPathGradientTransform, 整数型, "gdiplus", "GdipSetPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipTranslatePathGradientTransform, 整数型, "gdiplus", "GdipTranslatePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPathGradientFocusScales, 整数型, "gdiplus", "GdipGetPathGradientFocusScales", , 
    .参数 Brush, 整数型, , 
    .参数 xScale, 小数型, 传址, 
    .参数 yScale, 小数型, 传址, 

.DLL命令 GdipSetPathGradientFocusScales, 整数型, "gdiplus", "GdipSetPathGradientFocusScales", , 
    .参数 Brush, 整数型, , 
    .参数 xScale, 小数型, , 
    .参数 yScale, 小数型, , 

.DLL命令 GdipClonePen, 整数型, "gdiplus", "GdipClonePen", , 
    .参数 pen, 整数型, , 
    .参数 clonepen, 整数型, 传址, 

.DLL命令 GdipGetPenWidth, 整数型, "gdiplus", "GdipGetPenWidth", , 
    .参数 pen, 整数型, , 
    .参数 Width, 小数型, 传址, 

.DLL命令 GdipSetPenWidth, 整数型, "gdiplus", "GdipSetPenWidth", , 
    .参数 pen, 整数型, , 
    .参数 Width, 小数型, , 

.DLL命令 GdipGetPenUnit, 整数型, "gdiplus", "GdipGetPenUnit", , 
    .参数 pen, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipSetPenUnit, 整数型, "gdiplus", "GdipSetPenUnit", , 
    .参数 pen, 整数型, , 
    .参数 unit, 整数型, , 

.DLL命令 GdipSetPenLineCap197819, 整数型, "gdiplus", "GdipSetPenLineCap197819", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipSetPenDashCap197819, 整数型, "gdiplus", "GdipSetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipSetPenEndCap, 整数型, "gdiplus", "GdipSetPenEndCap", , 
    .参数 pen, 整数型, , 
    .参数 endCap, 整数型, , 

.DLL命令 GdipSetPenStartCap, 整数型, "gdiplus", "GdipSetPenStartCap", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 

.DLL命令 GdipGetPenDashCap197819, 整数型, "gdiplus", "GdipGetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, 传址, 

.DLL命令 GdipGetPenEndCap, 整数型, "gdiplus", "GdipGetPenEndCap", , 
    .参数 pen, 整数型, , 
    .参数 endCap, 整数型, 传址, 

.DLL命令 GdipGetPenStartCap, 整数型, "gdiplus", "GdipGetPenStartCap", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, 传址, 

.DLL命令 GdipGetPenLineJoin, 整数型, "gdiplus", "GdipGetPenLineJoin", , 
    .参数 pen, 整数型, , 
    .参数 lnJoin, 整数型, 传址, 

.DLL命令 GdipSetPenLineJoin, 整数型, "gdiplus", "GdipSetPenLineJoin", , 
    .参数 pen, 整数型, , 
    .参数 lnJoin, 整数型, , 

.DLL命令 GdipGetPenCustomEndCap, 整数型, "gdiplus", "GdipGetPenCustomEndCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipGetPenCustomStartCap, 整数型, "gdiplus", "GdipGetPenCustomStartCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipSetPenCustomEndCap, 整数型, "gdiplus", "GdipSetPenCustomEndCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipSetPenCustomStartCap, 整数型, "gdiplus", "GdipSetPenCustomStartCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipCreateCustomLineCap, 整数型, "gdiplus", "GdipCreateCustomLineCap", , 
    .参数 fillPath, 整数型, , 
    .参数 strokePath, 整数型, , 
    .参数 baseCap, 整数型, , 
    .参数 baseInset, 小数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipDeleteCustomLineCap, 整数型, "gdiplus", "GdipDeleteCustomLineCap", , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipCloneCustomLineCap, 整数型, "gdiplus", "GdipCloneCustomLineCap", , 
    .参数 customCap, 整数型, , 
    .参数 clonedCap, 整数型, 传址, 

.DLL命令 GdipGetCustomLineCapStrokeCaps, 整数型, "gdiplus", "GdipGetCustomLineCapStrokeCaps", , 
    .参数 customCap, 整数型, , 
    .参数 startCap, 整数型, 传址, 
    .参数 endCap, 整数型, 传址, 

.DLL命令 GdipSetCustomLineCapStrokeCaps, 整数型, "gdiplus", "GdipSetCustomLineCapStrokeCaps", , 
    .参数 customCap, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 

.DLL命令 GdipGetCustomLineCapStrokeJoin, 整数型, "gdiplus", "GdipGetCustomLineCapStrokeJoin", , 
    .参数 customCap, 整数型, , 
    .参数 lnJoin, 整数型, 传址, 

.DLL命令 GdipSetCustomLineCapStrokeJoin, 整数型, "gdiplus", "GdipSetCustomLineCapStrokeJoin", , 
    .参数 customCap, 整数型, , 
    .参数 lnJoin, 整数型, , 

.DLL命令 GdipGetCustomLineCapBaseCap, 整数型, "gdiplus", "GdipGetCustomLineCapBaseCap", , 
    .参数 customCap, 整数型, , 
    .参数 baseCap, 整数型, 传址, 

.DLL命令 GdipGetCustomLineCapBaseInset, 整数型, "gdiplus", "GdipGetCustomLineCapBaseInset", , 
    .参数 customCap, 整数型, , 
    .参数 inset, 小数型, 传址, 

.DLL命令 GdipSetCustomLineCapBaseCap, 整数型, "gdiplus", "GdipSetCustomLineCapBaseCap", , 
    .参数 customCap, 整数型, , 
    .参数 baseCap, 整数型, , 

.DLL命令 GdipSetCustomLineCapBaseInset, 整数型, "gdiplus", "GdipSetCustomLineCapBaseInset", , 
    .参数 customCap, 整数型, , 
    .参数 inset, 小数型, , 

.DLL命令 GdipGetCustomLineCapWidthScale, 整数型, "gdiplus", "GdipGetCustomLineCapWidthScale", , 
    .参数 customCap, 整数型, , 
    .参数 widthScale, 小数型, 传址, 

.DLL命令 GdipSetCustomLineCapWidthScale, 整数型, "gdiplus", "GdipSetCustomLineCapWidthScale", , 
    .参数 customCap, 整数型, , 
    .参数 widthScale, 小数型, , 

.DLL命令 GdipGetPenMiterLimit, 整数型, "gdiplus", "GdipGetPenMiterLimit", , 
    .参数 pen, 整数型, , 
    .参数 miterLimit, 小数型, 传址, 

.DLL命令 GdipSetPenMiterLimit, 整数型, "gdiplus", "GdipSetPenMiterLimit", , 
    .参数 pen, 整数型, , 
    .参数 miterLimit, 小数型, , 

.DLL命令 GdipGetPenMode, 整数型, "gdiplus", "GdipGetPenMode", , 
    .参数 pen, 整数型, , 
    .参数 penMode, 整数型, 传址, 

.DLL命令 GdipSetPenMode, 整数型, "gdiplus", "GdipSetPenMode", , 
    .参数 pen, 整数型, , 
    .参数 penMode, 整数型, , 

.DLL命令 GdipGetPenTransform, 整数型, "gdiplus", "GdipGetPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetPenTransform, 整数型, "gdiplus", "GdipSetPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyPenTransform, 整数型, "gdiplus", "GdipMultiplyPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetPenTransform, 整数型, "gdiplus", "GdipResetPenTransform", , 
    .参数 pen, 整数型, , 

.DLL命令 GdipRotatePenTransform, 整数型, "gdiplus", "GdipRotatePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScalePenTransform, 整数型, "gdiplus", "GdipScalePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslatePenTransform, 整数型, "gdiplus", "GdipTranslatePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPenColor, 整数型, "gdiplus", "GdipGetPenColor", , 
    .参数 pen, 整数型, , 
    .参数 argb, 整数型, 传址, 

.DLL命令 GdipSetPenColor, 整数型, "gdiplus", "GdipSetPenColor", , 
    .参数 pen, 整数型, , 
    .参数 argb, 整数型, , 

.DLL命令 GdipGetPenBrushFill, 整数型, "gdiplus", "GdipGetPenBrushFill", , 
    .参数 pen, 整数型, , 
    .参数 Brush, 整数型, 传址, 

.DLL命令 GdipSetPenBrushFill, 整数型, "gdiplus", "GdipSetPenBrushFill", , 
    .参数 pen, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipGetPenFillType, 整数型, "gdiplus", "GdipGetPenFillType", , 
    .参数 pen, 整数型, , 
    .参数 ptype, 整数型, 传址, 

.DLL命令 GdipGetPenDashStyle, 整数型, "gdiplus", "GdipGetPenDashStyle", , 
    .参数 pen, 整数型, , 
    .参数 dStyle, 整数型, 传址, 

.DLL命令 GdipSetPenDashStyle, 整数型, "gdiplus", "GdipSetPenDashStyle", , 
    .参数 pen, 整数型, , 
    .参数 dStyle, 整数型, , 

.DLL命令 GdipGetPenDashOffset, 整数型, "gdiplus", "GdipGetPenDashOffset", , 
    .参数 pen, 整数型, , 
    .参数 Offset, 小数型, 传址, 

.DLL命令 GdipSetPenDashOffset, 整数型, "gdiplus", "GdipSetPenDashOffset", , 
    .参数 pen, 整数型, , 
    .参数 Offset, 小数型, , 

.DLL命令 GdipGetPenDashArray, 整数型, "gdiplus", "GdipGetPenDashArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenDashCount, 整数型, "gdiplus", "GdipGetPenDashCount", , 
    .参数 pen, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPenDashArray, 整数型, "gdiplus", "GdipSetPenDashArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenCompoundArray, 整数型, "gdiplus", "GdipGetPenCompoundArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenCompoundCount, 整数型, "gdiplus", "GdipGetPenCompoundCount", , 
    .参数 pen, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPenCompoundArray, 整数型, "gdiplus", "GdipSetPenCompoundArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipCreateFontFromDC, 整数型, "gdiplus", "GdipCreateFontFromDC", , 
    .参数 hDC, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipCloneFont, 整数型, "gdiplus", "GdipCloneFont", , 
    .参数 curFont, 整数型, , 
    .参数 cloneFont, 整数型, 传址, 

.DLL命令 GdipGetFamily, 整数型, "gdiplus", "GdipGetFamily", , 
    .参数 curFont, 整数型, , 
    .参数 family, 整数型, 传址, 

.DLL命令 GdipGetFontStyle, 整数型, "gdiplus", "GdipGetFontStyle", , 
    .参数 curFont, 整数型, , 
    .参数 style, 整数型, 传址, 

.DLL命令 GdipGetFontSize, 整数型, "gdiplus", "GdipGetFontSize", , 
    .参数 curFont, 整数型, , 
    .参数 size, 小数型, 传址, 

.DLL命令 GdipGetFontUnit, 整数型, "gdiplus", "GdipGetFontUnit", , 
    .参数 curFont, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipGetFontHeight, 整数型, "gdiplus", "GdipGetFontHeight", , 
    .参数 curFont, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetFontHeightGivenDPI, 整数型, "gdiplus", "GdipGetFontHeightGivenDPI", , 
    .参数 curFont, 整数型, , 
    .参数 dpi, 小数型, , 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetLogFontA, 整数型, "gdiplus", "GdipGetLogFontA", , 
    .参数 curFont, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 logfont, 整数型, , 

.DLL命令 GdipCreateFontFromLogfontA, 整数型, "gdiplus", "GdipCreateFontFromLogfontA", , 
    .参数 hDC, 整数型, , 
    .参数 logfont, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipCloneFontFamily, 整数型, "gdiplus", "GdipCloneFontFamily", , 
    .参数 fontFamily, 整数型, , 
    .参数 clonedFontFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilySerif, 整数型, "gdiplus", "GdipGetGenericFontFamilySerif", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilySansSerif, 整数型, "gdiplus", "GdipGetGenericFontFamilySansSerif", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilyMonospace, 整数型, "gdiplus", "GdipGetGenericFontFamilyMonospace", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetFamilyName, 整数型, "gdiplus", "GdipGetFamilyName", , 
    .参数 family, 整数型, , 
    .参数 name, 字节集, , 
    .参数 language, 短整数型, , 

.DLL命令 GdipIsStyleAvailable, 整数型, "gdiplus", "GdipIsStyleAvailable", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 IsStyleAvailable, 整数型, 传址, 

.DLL命令 GdipGetEmHeight, 整数型, "gdiplus", "GdipGetEmHeight", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 EmHeight, 短整数型, 传址, 

.DLL命令 GdipGetCellAscent, 整数型, "gdiplus", "GdipGetCellAscent", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 CellAscent, 短整数型, 传址, 

.DLL命令 GdipGetCellDescent, 整数型, "gdiplus", "GdipGetCellDescent", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 CellDescent, 短整数型, 传址, 

.DLL命令 GdipGetLineSpacing, 整数型, "gdiplus", "GdipGetLineSpacing", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 LineSpacing, 短整数型, 传址, 

.DLL命令 GdipNewInstalledFontCollection, 整数型, "gdiplus", "GdipNewInstalledFontCollection", , 
    .参数 fontCollection, 整数型, 传址, 

.DLL命令 GdipNewPrivateFontCollection, 整数型, "gdiplus", "GdipNewPrivateFontCollection", , 
    .参数 fontCollection, 整数型, 传址, 

.DLL命令 GdipDeletePrivateFontCollection, 整数型, "gdiplus", "GdipDeletePrivateFontCollection", , 
    .参数 fontCollection, 整数型, , 

.DLL命令 GdipGetFontCollectionFamilyCount, 整数型, "gdiplus", "GdipGetFontCollectionFamilyCount", , 
    .参数 fontCollection, 整数型, , 
    .参数 numFound, 整数型, 传址, 

.DLL命令 GdipGetFontCollectionFamilyList, 整数型, "gdiplus", "GdipGetFontCollectionFamilyList", , 
    .参数 fontCollection, 整数型, , 
    .参数 numSought, 整数型, , 
    .参数 gpFamilies, 整数型, 数组, 
    .参数 numFound, 整数型, 传址, 

.DLL命令 GdipPrivateAddFontFile, 整数型, "gdiplus", "GdipPrivateAddFontFile", , 
    .参数 fontCollection, 整数型, , 
    .参数 filename, 字节集, , 

.DLL命令 GdipPrivateAddMemoryFont, 整数型, "gdiplus", "GdipPrivateAddMemoryFont", , 
    .参数 fontCollection, 整数型, , 
    .参数 memory, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 GdipCreateRegionHrgn, 整数型, "gdiplus", "GdipCreateRegionHrgn", , 
    .参数 hRgn, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionPath, 整数型, "gdiplus", "GdipCreateRegionPath", , 
    .参数 path, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRgnData, 整数型, "gdiplus", "GdipCreateRegionRgnData", , 
    .参数 regionData, 字节集, , 
    .参数 size, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCloneRegion, 整数型, "gdiplus", "GdipCloneRegion", , 
    .参数 region, 整数型, , 
    .参数 cloneRegion, 整数型, 传址, 

.DLL命令 GdipSetEmpty, 整数型, "gdiplus", "GdipSetEmpty", , 
    .参数 region, 整数型, , 

.DLL命令 GdipSetInfinite, 整数型, "gdiplus", "GdipSetInfinite", , 
    .参数 region, 整数型, , 

.DLL命令 GdipCombineRegionRect, 整数型, "gdiplus", "GdipCombineRegionRect", , 
    .参数 region, 整数型, , 
    .参数 rect, GP_矩形F, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionRectI, 整数型, "gdiplus", "GdipCombineRegionRectI", , 
    .参数 region, 整数型, , 
    .参数 rect, GP_矩形L, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionRegion, 整数型, "gdiplus", "GdipCombineRegionRegion", , 
    .参数 region, 整数型, , 
    .参数 region2, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionPath, 整数型, "gdiplus", "GdipCombineRegionPath", , 
    .参数 region, 整数型, , 
    .参数 path, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipTranslateRegion, 整数型, "gdiplus", "GdipTranslateRegion", , 
    .参数 region, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipTranslateRegionI, 整数型, "gdiplus", "GdipTranslateRegionI", , 
    .参数 region, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 

.DLL命令 GdipTransformRegion, 整数型, "gdiplus", "GdipTransformRegion", , 
    .参数 region, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionBounds, 整数型, "gdiplus", "GdipGetRegionBounds", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形F, , 

.DLL命令 GdipGetRegionBoundsI, 整数型, "gdiplus", "GdipGetRegionBoundsI", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 rect, GP_矩形L, , 

.DLL命令 GdipGetRegionData, 整数型, "gdiplus", "GdipGetRegionData", , 
    .参数 region, 整数型, , 
    .参数 buffer, 字节集, , 
    .参数 bufferSize, 整数型, , 
    .参数 sizeFilled, 整数型, 传址, 

.DLL命令 GdipGetRegionDataSize, 整数型, "gdiplus", "GdipGetRegionDataSize", , 
    .参数 region, 整数型, , 
    .参数 bufferSize, 整数型, 传址, 

.DLL命令 GdipGetRegionHRgn, 整数型, "gdiplus", "GdipGetRegionHRgn", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 hRgn, 整数型, 传址, 

.DLL命令 GdipIsEmptyRegion, 整数型, "gdiplus", "GdipIsEmptyRegion", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsInfiniteRegion, 整数型, "gdiplus", "GdipIsInfiniteRegion", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsEqualRegion, 整数型, "gdiplus", "GdipIsEqualRegion", , 
    .参数 region, 整数型, , 
    .参数 region2, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionPoint, 整数型, "gdiplus", "GdipIsVisibleRegionPoint", , 
    .参数 region, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionPointI, 整数型, "gdiplus", "GdipIsVisibleRegionPointI", , 
    .参数 region, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionRect, 整数型, "gdiplus", "GdipIsVisibleRegionRect", , 
    .参数 region, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionRectI, 整数型, "gdiplus", "GdipIsVisibleRegionRectI", , 
    .参数 region, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipGetRegionScans, 整数型, "gdiplus", "GdipGetRegionScans", , 
    .参数 region, 整数型, , 
    .参数 rects, GP_矩形F, 数组, 
    .参数 count, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionScansI, 整数型, "gdiplus", "GdipGetRegionScansI", , 
    .参数 region, 整数型, , 
    .参数 rects, GP_矩形L, 数组, 
    .参数 count, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionScansCount, 整数型, "gdiplus", "GdipGetRegionScansCount", , 
    .参数 region, 整数型, , 
    .参数 Ucount, 整数型, 传址, 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreatePath2, 整数型, "gdiplus", "GdipCreatePath2", , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipCreatePath2I, 整数型, "gdiplus", "GdipCreatePath2I", , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipClonePath, 整数型, "gdiplus", "GdipClonePath", , 
    .参数 path, 整数型, , 
    .参数 clonePath, 整数型, 传址, 

.DLL命令 GdipResetPath, 整数型, "gdiplus", "GdipResetPath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathPoints, 整数型, "gdiplus", "GdipGetPathPoints", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathTypes, 整数型, "gdiplus", "GdipGetPathTypes", , 
    .参数 path, 整数型, , 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPointCount, 整数型, "gdiplus", "GdipGetPointCount", , 
    .参数 path, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathFillMode, 整数型, "gdiplus", "GdipGetPathFillMode", , 
    .参数 path, 整数型, , 
    .参数 brushmode, 整数型, 传址, 

.DLL命令 GdipGetPathData, 整数型, "gdiplus", "GdipGetPathData", , 
    .参数 path, 整数型, , 
    .参数 pdata, PathData, , 

.DLL命令 GdipStartPathFigure, 整数型, "gdiplus", "GdipStartPathFigure", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClosePathFigure, 整数型, "gdiplus", "GdipClosePathFigure", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClosePathFigures, 整数型, "gdiplus", "GdipClosePathFigures", , 
    .参数 path, 整数型, , 

.DLL命令 GdipSetPathMarker, 整数型, "gdiplus", "GdipSetPathMarker", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClearPathMarkers, 整数型, "gdiplus", "GdipClearPathMarkers", , 
    .参数 path, 整数型, , 

.DLL命令 GdipReversePath, 整数型, "gdiplus", "GdipReversePath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathLastPoint, 整数型, "gdiplus", "GdipGetPathLastPoint", , 
    .参数 path, 整数型, , 
    .参数 lastPoint, GP_坐标F, , 

.DLL命令 GdipSetPathFillMode, 整数型, "gdiplus", "GdipSetPathFillMode", , 
    .参数 path, 整数型, , 
    .参数 brushmode, 整数型, , 

.DLL命令 GdipAddPathLine, 整数型, "gdiplus", "GdipAddPathLine", , 
    .参数 path, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 

.DLL命令 GdipAddPathLineI, 整数型, "gdiplus", "GdipAddPathLineI", , 
    .参数 path, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 

.DLL命令 GdipAddPathLine2, 整数型, "gdiplus", "GdipAddPathLine2", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathLine2I, 整数型, "gdiplus", "GdipAddPathLine2I", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathArc, 整数型, "gdiplus", "GdipAddPathArc", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 小数型
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathArcI, 整数型, "gdiplus", "GdipAddPathArcI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathBezier, 整数型, "gdiplus", "GdipAddPathBezier", , 
    .参数 path, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 
    .参数 x3, 小数型, , 
    .参数 y3, 小数型, , 
    .参数 x4, 小数型, , 
    .参数 y4, 小数型, , 

.DLL命令 GdipAddPathBeziers, 整数型, "gdiplus", "GdipAddPathBeziers", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathBezierI, 整数型, "gdiplus", "GdipAddPathBezierI", , 
    .参数 path, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 GdipAddPathBeziersI, 整数型, "gdiplus", "GdipAddPathBeziersI", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve, 整数型, "gdiplus", "GdipAddPathCurve", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve2, 整数型, "gdiplus", "GdipAddPathCurve2", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurve3, 整数型, "gdiplus", "GdipAddPathCurve3", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurveI, 整数型, "gdiplus", "GdipAddPathCurveI", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve2I, 整数型, "gdiplus", "GdipAddPathCurve2I", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurve3I, 整数型, "gdiplus", "GdipAddPathCurve3I", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathClosedCurve, 整数型, "gdiplus", "GdipAddPathClosedCurve", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathClosedCurve2, 整数型, "gdiplus", "GdipAddPathClosedCurve2", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathClosedCurveI, 整数型, "gdiplus", "GdipAddPathClosedCurveI", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathClosedCurve2I, 整数型, "gdiplus", "GdipAddPathClosedCurve2I", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathRectangle, 整数型, "gdiplus", "GdipAddPathRectangle", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipAddPathRectangles, 整数型, "gdiplus", "GdipAddPathRectangles", , 
    .参数 path, 整数型, , 
    .参数 rect, GP_矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathRectangleI, 整数型, "gdiplus", "GdipAddPathRectangleI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipAddPathRectanglesI, 整数型, "gdiplus", "GdipAddPathRectanglesI", , 
    .参数 path, 整数型, , 
    .参数 rect, GP_矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathEllipse, 整数型, "gdiplus", "GdipAddPathEllipse", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipAddPathPie, 整数型, "gdiplus", "GdipAddPathPie", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathEllipseI, 整数型, "gdiplus", "GdipAddPathEllipseI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipAddPathPieI, 整数型, "gdiplus", "GdipAddPathPieI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathPolygon, 整数型, "gdiplus", "GdipAddPathPolygon", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathPolygonI, 整数型, "gdiplus", "GdipAddPathPolygonI", , 
    .参数 path, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathPath, 整数型, "gdiplus", "GdipAddPathPath", , 
    .参数 path, 整数型, , 
    .参数 addingPath, 整数型, , 
    .参数 bConnect, 逻辑型, , 

.DLL命令 GdipAddPathString, 整数型, "gdiplus", "GdipAddPathString", , 
    .参数 path, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 layoutRect, GP_矩形F, , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipAddPathStringI, 整数型, "gdiplus", "GdipAddPathStringI", , 
    .参数 path, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 layoutRect, GP_矩形L, , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipCreateStringFormat, 整数型, "gdiplus", "GdipCreateStringFormat", , 
    .参数 formatAttributes, 整数型, , 
    .参数 language, 短整数型, , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipStringFormatGetGenericDefault, 整数型, "gdiplus", "GdipStringFormatGetGenericDefault", , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipStringFormatGetGenericTypographic, 整数型, "gdiplus", "GdipStringFormatGetGenericTypographic", , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipDeleteStringFormat, 整数型, "gdiplus", "GdipDeleteStringFormat", , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipCloneStringFormat, 整数型, "gdiplus", "GdipCloneStringFormat", , 
    .参数 StringFormat, 整数型, , 
    .参数 newFormat, 整数型, 传址, 

.DLL命令 GdipGetStringFormatFlags, 整数型, "gdiplus", "GdipGetStringFormatFlags", , 
    .参数 StringFormat, 整数型, , 
    .参数 flags, 整数型, 传址, 

.DLL命令 GdipSetStringFormatFlags, 整数型, "gdiplus", "GdipSetStringFormatFlags", , 
    .参数 StringFormat, 整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 GdipGetStringFormatAlign, 整数型, "gdiplus", "GdipGetStringFormatAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, 传址, 

.DLL命令 GdipSetStringFormatAlign, 整数型, "gdiplus", "GdipSetStringFormatAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, , 

.DLL命令 GdipGetStringFormatLineAlign, 整数型, "gdiplus", "GdipGetStringFormatLineAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, 传址, 

.DLL命令 GdipSetStringFormatLineAlign, 整数型, "gdiplus", "GdipSetStringFormatLineAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, , 

.DLL命令 GdipGetStringFormatTrimming, 整数型, "gdiplus", "GdipGetStringFormatTrimming", , 
    .参数 StringFormat, 整数型, , 
    .参数 trimming, 整数型, 传址, 

.DLL命令 GdipSetStringFormatTrimming, 整数型, "gdiplus", "GdipSetStringFormatTrimming", , 
    .参数 StringFormat, 整数型, , 
    .参数 trimming, 整数型, , 

.DLL命令 GdipGetStringFormatHotkeyPrefix, 整数型, "gdiplus", "GdipGetStringFormatHotkeyPrefix", , 
    .参数 StringFormat, 整数型, , 
    .参数 hkPrefix, 整数型, 传址, 

.DLL命令 GdipSetStringFormatHotkeyPrefix, 整数型, "gdiplus", "GdipSetStringFormatHotkeyPrefix", , 
    .参数 StringFormat, 整数型, , 
    .参数 hkPrefix, 整数型, , 

.DLL命令 GdipGetStringFormatTabStops, 整数型, "gdiplus", "GdipGetStringFormatTabStops", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, , 
    .参数 firstTabOffset, 小数型, 传址, 
    .参数 tabStops, 小数型, 数组, 

.DLL命令 GdipSetStringFormatTabStops, 整数型, "gdiplus", "GdipSetStringFormatTabStops", , 
    .参数 StringFormat, 整数型, , 
    .参数 firstTabOffset, 小数型, , 
    .参数 count, 整数型, , 
    .参数 tabStops, 小数型, 数组, 

.DLL命令 GdipGetStringFormatTabStopCount, 整数型, "gdiplus", "GdipGetStringFormatTabStopCount", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetStringFormatDigitSubstitution, 整数型, "gdiplus", "GdipGetStringFormatDigitSubstitution", , 
    .参数 StringFormat, 整数型, , 
    .参数 language, 短整数型, 传址, 
    .参数 substitute, 整数型, 传址, 

.DLL命令 GdipSetStringFormatDigitSubstitution, 整数型, "gdiplus", "GdipSetStringFormatDigitSubstitution", , 
    .参数 StringFormat, 整数型, , 
    .参数 language, 短整数型, , 
    .参数 substitute, 整数型, , 

.DLL命令 GdipGetStringFormatMeasurableCharacterRangeCount, 整数型, "gdiplus", "GdipGetStringFormatMeasurableCharacterRangeCount", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetStringFormatMeasurableCharacterRanges, 整数型, "gdiplus", "GdipSetStringFormatMeasurableCharacterRanges", , 
    .参数 StringFormat, 整数型, , 
    .参数 rangeCount, 整数型, , 
    .参数 ranges, GP_测试字符范围, 数组, 

.DLL命令 GdipFlattenPath, 整数型, "gdiplus", "GdipFlattenPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWindingModeOutline, 整数型, "gdiplus", "GdipWindingModeOutline", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWidenPath, 整数型, "gdiplus", "GdipWidenPath", , 
    .参数 NativePath, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWarpPath, 整数型, "gdiplus", "GdipWarpPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 WarpMd, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipTransformPath, 整数型, "gdiplus", "GdipTransformPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetPathWorldBounds, 整数型, "gdiplus", "GdipGetPathWorldBounds", , 
    .参数 path, 整数型, , 
    .参数 bounds, GP_矩形F, 传址, 
    .参数 matrix, 整数型, , 
    .参数 pen, 整数型, , 

.DLL命令 GdipIsVisiblePathPoint, 整数型, "gdiplus", "GdipIsVisiblePathPoint", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePathPointI, 整数型, "gdiplus", "GdipIsVisiblePathPointI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsOutlineVisiblePathPoint, 整数型, "gdiplus", "GdipIsOutlineVisiblePathPoint", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 pen, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, , 

.DLL命令 GdipIsOutlineVisiblePathPointI, 整数型, "gdiplus", "GdipIsOutlineVisiblePathPointI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, , 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromStreamICM, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStreamICM", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromFile, 整数型, "gdiplus", "GdipCreateBitmapFromFile", , 
    .参数 filename, 字节集, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromFileICM, 整数型, "gdiplus", "GdipCreateBitmapFromFileICM", , 
    .参数 filename, 字节集, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromScan0, 整数型, "gdiplus", "GdipCreateBitmapFromScan0", , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 stride, 整数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 scan0, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromGraphics, 整数型, "gdiplus", "GdipCreateBitmapFromGraphics", , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromGdiDib, 整数型, "gdiplus", "GdipCreateBitmapFromGdiDib", , 
    .参数 gdiBitmapInfo, 整数型, , 
    .参数 gdiBitmapData, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromHBITMAP, 整数型, "gdiplus", "GdipCreateBitmapFromHBITMAP", , 
    .参数 hbm, 整数型, , 
    .参数 hpal, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromHICON, 整数型, "gdiplus", "GdipCreateBitmapFromHICON", , 
    .参数 hicon, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromResource, 整数型, "gdiplus", "GdipCreateBitmapFromResource", , 
    .参数 hInstance, 整数型, , 
    .参数 lpBitmapName, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateHBITMAPFromBitmap, 整数型, "gdiplus", "GdipCreateHBITMAPFromBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 hbmReturn, 整数型, 传址, 
    .参数 background, 整数型, , 

.DLL命令 GdipCreateHICONFromBitmap, 整数型, "gdiplus", "GdipCreateHICONFromBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 hbmReturn, 整数型, 传址, 

.DLL命令 GdipCloneBitmapArea, 整数型, "gdiplus", "GdipCloneBitmapArea", , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 srcBitmap, 整数型, , 
    .参数 dstBitmap, 整数型, 传址, 

.DLL命令 GdipBitmapLockBits, 整数型, "gdiplus", "GdipBitmapLockBits", , 
    .参数 bitmap, 整数型, , 
    .参数 rect, GP_矩形L, , 
    .参数 flags, 整数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 lockedBitmapData, GP_位图数据, , 

.DLL命令 GdipBitmapUnlockBits, 整数型, "gdiplus", "GdipBitmapUnlockBits", , 
    .参数 bitmap, 整数型, , 
    .参数 lockedBitmapData, GP_位图数据, , 

.DLL命令 GdipBitmapGetPixel, 整数型, "gdiplus", "GdipBitmapGetPixel", , 
    .参数 bitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 color, 整数型, 传址, 

.DLL命令 GdipBitmapSetPixel, 整数型, "gdiplus", "GdipBitmapSetPixel", , 
    .参数 bitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 color, 整数型, , 

.DLL命令 GdipBitmapSetResolution, 整数型, "gdiplus", "GdipBitmapSetResolution", , 
    .参数 bitmap, 整数型, , 
    .参数 xdpi, 小数型, , 
    .参数 ydpi, 小数型, , 

.DLL命令 GdipCreateMetafileFromFile, 整数型, "gdiplus", "GdipCreateMetafileFromFile", , 
    .参数 byvalfile, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromStream, 整数型, "gdiplus.dll", "GdipCreateMetafileFromStream", , 
    .参数 stream, 整数型, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromWmf, 整数型, "gdiplus", "GdipCreateMetafileFromWmf", , 
    .参数 hWmf, 整数型, , 
    .参数 bDeleteWmf, 逻辑型, , 
    .参数 WmfPlaceableFileHdr, GP_APM文件头, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromEmf, 整数型, "gdiplus", "GdipCreateMetafileFromEmf", , 
    .参数 hEmf, 整数型, , 
    .参数 bDeleteEmf, 逻辑型, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromWmfFile, 整数型, "gdiplus", "GdipCreateMetafileFromWmfFile", , 
    .参数 file, 字节集, , 
    .参数 WmfPlaceableFileHdr, GP_APM文件头, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafile, 整数型, "gdiplus", "GdipRecordMetafile", , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, GP_矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileI, 整数型, "gdiplus", "GdipRecordMetafileI", , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, GP_矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileFileName, 整数型, "gdiplus", "GdipRecordMetafileFileName", , 
    .参数 filename, 字节集, , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, GP_矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileFileNameI, 整数型, "gdiplus", "GdipRecordMetafileFileNameI", , 
    .参数 filename, 字节集, , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, GP_矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileStream, 整数型, "gdiplus", "GdipRecordMetafileStream", , 
    .参数 stream, 整数型, , 
    .参数 referenceHdc, 整数型, , 
    .参数 EmfType, 整数型, , 
    .参数 frameRect, GP_矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileStreamI, 整数型, "gdiplus", "GdipRecordMetafileStreamI", , 
    .参数 stream, 整数型, , 
    .参数 referenceHdc, 整数型, , 
    .参数 EmfType, 整数型, , 
    .参数 frameRect, GP_矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipSetMetafileDownLevelRasterizationLimit, 整数型, "gdiplus", "GdipSetMetafileDownLevelRasterizationLimit", , 
    .参数 metafile, 整数型, , 
    .参数 metafileRasterizationLimitDpi, 整数型, , 

.DLL命令 GdipGetMetafileDownLevelRasterizationLimit, 整数型, "gdiplus", "GdipGetMetafileDownLevelRasterizationLimit", , 
    .参数 metafile, 整数型, , 
    .参数 metafileRasterizationLimitDpi, 整数型, 传址, 

.DLL命令 GdipGetHemfFromMetafile, 整数型, "gdiplus", "GdipGetHemfFromMetafile", , 
    .参数 metafile, 整数型, , 
    .参数 hEmf, 整数型, 传址, 

.DLL命令 GdipPlayMetafileRecord, 整数型, "gdiplus", "GdipPlayMetafileRecord", , 
    .参数 metafile, 整数型, , 
    .参数 recordType, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 dataSize, 整数型, , 
    .参数 byteData, 整数型, , 

.DLL命令 GdipCreateFromHDC2, 整数型, "gdiplus", "GdipCreateFromHDC2", , 
    .参数 hDC, 整数型, , 
    .参数 hDevice, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipCreateFromHWNDICM, 整数型, "gdiplus", "GdipCreateFromHWNDICM", , 
    .参数 hwnd, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipSetInterpolationMode, 整数型, "gdiplus", "GdipSetInterpolationMode", , 
    .参数 graphics, 整数型, , 
    .参数 interpolation, 整数型, , 

.DLL命令 GdipGetInterpolationMode, 整数型, "gdiplus", "GdipGetInterpolationMode", , 
    .参数 graphics, 整数型, , 
    .参数 interpolation, 整数型, 传址, 

.DLL命令 GdipGetPixelOffsetMode, 整数型, "gdiplus", "GdipGetPixelOffsetMode", , 
    .参数 graphics, 整数型, , 
    .参数 pixelOffsetMode, 整数型, 传址, 

.DLL命令 GdipSetPixelOffsetMode, 整数型, "gdiplus", "GdipSetPixelOffsetMode", , 
    .参数 graphics, 整数型, , 
    .参数 pixelOffsetMode, 整数型, , 

.DLL命令 GdipTransformPoints, 整数型, "gdiplus", "GdipTransformPoints", , 
    .参数 graphics, 整数型, , 
    .参数 destSpace, 整数型, , 
    .参数 srcSpace, 整数型, , 
    .参数 Points, GP_坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipTransformPointsI, 整数型, "gdiplus", "GdipTransformPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 destSpace, 整数型, , 
    .参数 srcSpace, 整数型, , 
    .参数 Points, GP_坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GetObject, 整数型, "gdi32", "GetObjectA", , 取得对指定对象进行说明的一个结构。windows手册建议用GetObject这个名字来引用该函数。GetObjectAPI在vb中用于避免与GetObject关键字混淆  如lpObject设为零（用ByVal As Long在这种情况下传递一个NULL参数），则必须设置缓冲区的长度。如执行成功，返回载入结构内部的实际字节数；如失败，返回零值
    .参数 hObject, 整数型, , 画笔、刷子、字体、位图或调色板等对象的句柄
    .参数 nCount, 整数型, , 欲取回的字节数。通常是由lpObject定义的那个结构的长度
    .参数 lpObject, 整数型, , 任何类型，用于容纳对象数据的结构。针对画笔，通常是一个LOGPEN结构；针对扩展画笔，通常是EXTLOGPEN；针对字体是LOGBRUSH；针对位图是BITMAP；针对DIBSection位图是DIBSECTION；针对调色板，应指向一个整型变量，代表调色板中的条目数量

.DLL命令 GetStockObject, 整数型, "gdi32", "GetStockObject", , 取得一个固有对象（Stock）。这是可由任何应用程序使用的windows标准对象之一  指向指定对象的一个句柄。零表示出错
    .参数 nIndex, 整数型, , 下述表格中定义的任何常数之一BLACK_BRUSH黑色刷子DKGRAY_BRUSH黑灰色刷子GRAY_BRUSH灰色刷子HOLLOW_BRUSH凹刷子LTGRAY_BRUSH浅灰色刷子NULL_BRUSH空刷子WHITE_BRUSH白色刷子BLACK_PEN黑色画笔NULL_PEN空画笔WHITE_PEN白色画笔ANSI_FIXED_FONT采用windows（ANSI）字符集的等宽字体ANSI_VAR_FONT采用windows（ANSI）字符集的不等宽字体DEVICE_DEFAULT_FONT设备使用的默认字体（NT）DEFAULT_GUI_FONT用户界面的默认字体，包括菜单和对话框字体（Windows 95）OEM_FIXED_FONTOEM字符集的固有字体SYSTEM_FONT屏幕系统字体。这是用于菜单、对话框等等的默认不等宽字体SYSTEM_FIXED_FONT屏幕系统字体。这是用于菜单、对话框等等的默认等宽字体（在windows 3.0之前使用）DEFAULT_PALETTE默认调色板;

.DLL命令 GetDC, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", , 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）  执行成功为1，否则为0
    .参数 hwnd, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 hdc, 整数型, , 要释放的设备场景句柄;

.DLL命令 GdipMeasureString, 整数型, "gdiplus", "GdipMeasureString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, GP_矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 boundingBox, GP_矩形F, 传址, 
    .参数 codepointsFitted, 整数型, , 
    .参数 linesFilled, 整数型, , 

.DLL命令 lstrlenw, 整数型, "kernel32.dll", "lstrlenW", , 取宽文本长度
    .参数 dqcs, 字节集, , 文本指针

.DLL命令 GdipMeasureCharacterRanges, 整数型, "gdiplus", "GdipMeasureCharacterRanges", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, GP_矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 regionCount, 整数型, , 
    .参数 regions, 整数型, 数组, 

.DLL命令 GdipDrawDriverString, 整数型, "gdiplus", "GdipDrawDriverString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 positions, GP_坐标F, 数组, 
    .参数 flags, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreateCachedBitmap, 整数型, "gdiplus", "GdipCreateCachedBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 cachedBitmap, 整数型, 传址, 

.DLL命令 GdipDeleteCachedBitmap, 整数型, "gdiplus", "GdipDeleteCachedBitmap", , 
    .参数 cachedBitmap, 整数型, , 

.DLL命令 GdipDrawCachedBitmap, 整数型, "gdiplus", "GdipDrawCachedBitmap", , 
    .参数 graphics, 整数型, , 
    .参数 cachedBitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPoint, 整数型, "gdiplus", "GdipEnumerateMetafileDestPoint", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标F, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPointI, 整数型, "gdiplus", "GdipEnumerateMetafileDestPointI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标L, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPoints, 整数型, "gdiplus", "GdipEnumerateMetafileDestPoints", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPointsI, 整数型, "gdiplus", "GdipEnumerateMetafileDestPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestRect, 整数型, "gdiplus", "GdipEnumerateMetafileDestRect", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, GP_矩形F, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestRectI, 整数型, "gdiplus", "GdipEnumerateMetafileDestRectI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, GP_矩形L, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPoint, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPoint", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标F, , 
    .参数 srcRect, GP_矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPointI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPointI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, GP_坐标L, , 
    .参数 srcRect, GP_矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPoints, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPoints", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoints, GP_坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcRect, GP_矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPointsI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoints, GP_坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 srcRect, GP_矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestRect, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestRect", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, GP_矩形F, , 
    .参数 srcRect, GP_矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestRectI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestRectI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, GP_矩形L, , 
    .参数 srcRect, GP_矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipComment, 整数型, "gdiplus", "GdipComment", , 
    .参数 graphics, 整数型, , 
    .参数 sizeData, 整数型, , 
    .参数 data, 字节集, , 

.DLL命令 GdipGetPenDashCap, 整数型, "gdiplus", "GdipGetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, 传址, 

.DLL命令 GdipSetPenLineCap, 整数型, "gdiplus", "GdipSetPenLineCap197819", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipGetMetafileHeaderFromFile, 整数型, "gdiplus", "GdipGetMetafileHeaderFromFile", , 
    .参数 filename, 字节集, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromWmf, 整数型, "gdiplus", "GdipGetMetafileHeaderFromWmf", , 
    .参数 hWmf, 整数型, , 
    .参数 WmfPlaceableFileHdr, GP_APM文件头, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromEmf, 整数型, "gdiplus", "GdipGetMetafileHeaderFromEmf", , 
    .参数 hEmf, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromStream, 整数型, "gdiplus", "GdipGetMetafileHeaderFromStream", , 
    .参数 IStream, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromMetafile, 整数型, "gdiplus", "GdipGetMetafileHeaderFromMetafile", , 
    .参数 metafile, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipAlloc, 整数型, "gdiplus", "GdipAlloc", , 
    .参数 size, 整数型, , 

.DLL命令 GdipFree, 空白型, "gdiplus", "GdipFree", , 
    .参数 ptr, 整数型, , 

.DLL命令 GdipGetImageDecoders, 整数型, "gdiplus", "GdipGetImageDecoders", , 
    .参数 numDecoders, 整数型, , 
    .参数 size, 整数型, , 
    .参数 decoders, 字节集, , 

.DLL命令 GdipGetImageDecodersSize, 整数型, "gdiplus", "GdipGetImageDecodersSize", , 
    .参数 numDecoders, 整数型, 传址, 
    .参数 size, 整数型, 传址, 

.DLL命令 DrawShadowText, 整数型, "Comctl32.dll", "DrawShadowText", , 
    .参数 hdc, 整数型, , 设备环境句柄。
    .参数 pszText, 字节集, 传址, 包含待绘制文本的串的指针。
    .参数 cch, 整数型, , 指定即将绘制的串中的字符个数的UINT
    .参数 pRect, GDI_矩形, 传址, 包含即将在其中绘制文本的矩形的RECT结构指针。
    .参数 dwFlags, 整数型, , 指定怎样绘制文本的DWORD。
    .参数 crText, 整数型, , 文本颜色值
    .参数 crShadow, 整数型, , 阴影颜色值
    .参数 ixOffset, 整数型, , 指定文本开始点的X坐标的整数。
    .参数 iyOffset, 整数型, , 指定文本开始点的Y坐标的整数。

.DLL命令 SetWindowLongA, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.程序集 程序集1, , , 

.程序集变量 g_Token, 整数型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
.局部变量 GpInput, GdiplusStartupInput, , , 

赋值 (GpInput.GdiplusVersion, 1)
GdiplusStartup (g_Token, GpInput, 0)
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 RGB到ARGB, 整数型, , 
.参数 参数_RGB, 整数型, , 
.参数 参数_透明度, 字节型, 可空, 默认为255，不透明。

.局部变量 Color, 字节集, , , 
.局部变量 temp, 字节型, , , 

.如果真 (是否为空 (参数_透明度))
    赋值 (参数_透明度, 255)
.如果真结束
赋值 (Color, 到字节集 (参数_RGB))
赋值 (temp, Color [1])
赋值 (Color [1], Color [3])
赋值 (Color [3], temp)
赋值 (Color [4], 参数_透明度)
 ' 参数_RGB ＝ 位或 (Color [3] ＋ Color [2] × 256 ＋ Color [1] × 65536, 左移 (参数_透明度, 24))  ' 转换成GDI+的颜色值
返回 (取字节集数据 (Color, #整数型, ))


.子程序 ARGB到RGB, 整数型, , 
.参数 参数_ARGB, 整数型, , 
.参数 参数_透明度, 字节型, 参考 可空, 

.局部变量 Color, 字节集, , , 
.局部变量 temp, 字节型, , , 

赋值 (Color, 到字节集 (参数_ARGB))
赋值 (参数_透明度, Color [4])
赋值 (Color [4], 0)
赋值 (temp, Color [3])
赋值 (Color [3], Color [1])
赋值 (Color [1], temp)
返回 (取字节集数据 (Color, #整数型, ))

.子程序 结束处理, 整数型, , 
.局部变量 r, 整数型, , , 

.如果真 (不等于 (g_Token, 0))
    赋值 (r, GdiplusShutdown (g_Token))
    赋值 (g_Token, 0)
.如果真结束
返回 (r)

.子程序 取错误描述_GDI_PLUS, 文本型, , 
.参数 返回码, 整数型, , 执行某命令后的返回值

 ' enum Status
.判断开始 (等于 (返回码, 0))
    返回 (“Ok = 0”)
.判断 (等于 (返回码, 1))
    返回 (“GenericError = 1”)
.判断 (等于 (返回码, 2))
    返回 (“InvalidParameter = 2”)
.判断 (等于 (返回码, 3))
    返回 (“OutOfMemory = 3”)
.判断 (等于 (返回码, 4))
    返回 (“ObjectBusy = 4”)
.判断 (等于 (返回码, 5))
    返回 (“InsufficientBuffer = 5”)
.判断 (等于 (返回码, 6))
    返回 (“NotImplemented = 6”)
.判断 (等于 (返回码, 7))
    返回 (“Win32Error = 7”)
.判断 (等于 (返回码, 8))
    返回 (“WrongState = 8”)
.判断 (等于 (返回码, 9))
    返回 (“Aborted = 9”)
.判断 (等于 (返回码, 10))
    返回 (“FileNotFound = 10”)
.判断 (等于 (返回码, 11))
    返回 (“ValueOverflow = 11”)
.判断 (等于 (返回码, 12))
    返回 (“AccessDenied = 12”)
.判断 (等于 (返回码, 13))
    返回 (“UnknownImageFormat = 13”)
.判断 (等于 (返回码, 14))
    返回 (“FontFamilyNotFound = 14”)
.判断 (等于 (返回码, 15))
    返回 (“FontStyleNotFound = 15”)
.判断 (等于 (返回码, 16))
    返回 (“NotTrueTypeFont = 16”)
.判断 (等于 (返回码, 17))
    返回 (“UnsupportedGdiplusVersion = 17”)
.判断 (等于 (返回码, 18))
    返回 (“GdiplusNotInitialized = 18”)
.判断 (等于 (返回码, 19))
    返回 (“PropertyNotFound = 19”)
.判断 (等于 (返回码, 20))
    返回 (“PropertyNotSupported = 20”)
.默认
    返回 (“未知错误”)
.判断结束




.子程序 _临时子程序, 空白型, , 
.局部变量 g, GDI_GP_图形, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
g.GetPixelAddress (0, 0)

.子程序 取错误信息, 文本型, , 请在得知发生错误后使用，若返回为数值，则是程序未知，系统反馈的错误代码，若为空则无错误
返回 (错误信息)

.子程序 Gdiplus取最后错误, 整数型, , GdiplusGetLastStatus
返回 (全局_返回码)


.子程序 Gdiplus取最后错误文本, 文本型, , GdiplusGetLastStatusText
.判断开始 (等于 (全局_返回码, 0))
    返回 (“”)
.判断 (等于 (全局_返回码, 1))
    返回 (“通用错误”)
.判断 (等于 (全局_返回码, 2))
    返回 (“无效的参数”)
.判断 (等于 (全局_返回码, 3))
    返回 (“内存溢出”)
.判断 (等于 (全局_返回码, 4))
    返回 (“对象繁忙”)
.判断 (等于 (全局_返回码, 5))
    返回 (“缓冲区不足”)
.判断 (等于 (全局_返回码, 6))
    返回 (“未实现”)
.判断 (等于 (全局_返回码, 7))
    返回 (“Win32错误”)
.判断 (等于 (全局_返回码, 8))
    返回 (“错误状态”)
.判断 (等于 (全局_返回码, 9))
    返回 (“失败”)
.判断 (等于 (全局_返回码, 10))
    返回 (“未找到文件”)
.判断 (等于 (全局_返回码, 11))
    返回 (“值溢出”)
.判断 (等于 (全局_返回码, 12))
    返回 (“访问被拒绝”)
.判断 (等于 (全局_返回码, 13))
    返回 (“未知图像格式”)
.判断 (等于 (全局_返回码, 14))
    返回 (“未找到字体族”)
.判断 (等于 (全局_返回码, 15))
    返回 (“未找到字体风格”)
.判断 (等于 (全局_返回码, 16))
    返回 (“不是TrueType字体”)
.判断 (等于 (全局_返回码, 17))
    返回 (“不支持Gdiplus版本”)
.判断 (等于 (全局_返回码, 18))
    返回 (“Gdiplus未装载”)
.判断 (等于 (全局_返回码, 19))
    返回 (“资源未找到”)
.判断 (等于 (全局_返回码, 20))
    返回 (“资源不支持”)
.判断 (等于 (全局_返回码, 21))
    返回 (“未找到配置文件”)
.默认
    返回 (“未知错误”)
.判断结束


.子程序 W2A, 文本型, , 将Unicode转成Ansi
.参数 参数_Unicode文本指针, 整数型, , 

.局部变量 Ansi长度, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (Ansi长度, WideCharToMultiByte (1, 0, 参数_Unicode文本指针, -1, “”, 0, 0, 0))
赋值 (返回值, 取空白文本 (Ansi长度))
WideCharToMultiByte (1, 0, 参数_Unicode文本指针, -1, 返回值, Ansi长度, 0, 0)
返回 (返回值)

.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 参数_Ansi文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (长度, 相乘 (MultiByteToWideChar (0, 0, 参数_Ansi文本, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (0, 0, 参数_Ansi文本, 取文本长度 (参数_Ansi文本), 返回值, 长度)
返回 (返回值)


.子程序 取宽文本长度, 整数型, , lstrlenw
.参数 参数_Unicode文本, 字节集, , 

返回 (lstrlenw (参数_Unicode文本))

.子程序 取图像编码列表, 整数型, , GdipGetImageEncoders。返回图像编码列表数。
.参数 参数_图像编码信息, GP_图像编解码信息, 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_temp, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (全局_返回码, GdipGetImageEncodersSize (局部_数量, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_图像编码信息, 假, 局部_数量)
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImageEncoders (局部_数量, 局部_size, 局部_字节集))
赋值 (j, 1)
.计次循环首 (局部_数量, i)
    赋值 (参数_图像编码信息 [i], Clsid, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (参数_图像编码信息 [i], 图像格式ID, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 编码器名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], DLL名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 格式描述, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 文件扩展名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], Mime类型, W2A (局部_temp))
    
    赋值 (参数_图像编码信息 [i], 标志, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 版本, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名数, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名大小, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名模式, 指针到字节集 (局部_temp, 相乘 (参数_图像编码信息 [i], 签名大小, 参数_图像编码信息 [i], 签名数)))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名掩码, 指针到字节集 (局部_temp, 相乘 (参数_图像编码信息 [i], 签名大小, 参数_图像编码信息 [i], 签名数)))
.计次循环尾 ()
返回 (局部_数量)


.子程序 取图像解码列表, 整数型, , GdipGetImageEncoders。返回图像解码列表数。
.参数 参数_信息, GP_图像编解码信息, 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_temp, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (全局_返回码, GdipGetImageDecodersSize (局部_数量, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_信息, 假, 局部_数量)
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImageDecoders (局部_数量, 局部_size, 局部_字节集))
赋值 (j, 1)
.计次循环首 (局部_数量, i)
    赋值 (参数_信息 [i], Clsid, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (参数_信息 [i], 图像格式ID, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 编码器名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], DLL名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 格式描述, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 文件扩展名, W2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], Mime类型, W2A (局部_temp))
    
    赋值 (参数_信息 [i], 标志, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 版本, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名数, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名大小, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名模式, 指针到字节集 (局部_temp, 相乘 (参数_信息 [i], 签名大小, 参数_信息 [i], 签名数)))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名掩码, 指针到字节集 (局部_temp, 相乘 (参数_信息 [i], 签名大小, 参数_信息 [i], 签名数)))
.计次循环尾 ()
返回 (局部_数量)


.子程序 取图像编码CLSID自Mime, 文本型, , GetCodecClsid
.参数 参数_Mime, 文本型, , 只能是如下值：“image/bmp”、“image/jpeg”、“image/gif”、“image/tiff”、“image/png”

.局部变量 局部_图像编码信息, GP_图像编解码信息, , "0", 
.局部变量 局部_数量, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_数量, 取图像编码列表 (局部_图像编码信息))
.计次循环首 (局部_数量, i)
    .如果真 (等于 (参数_Mime, 局部_图像编码信息 [i], Mime类型))
        返回 (局部_图像编码信息 [i], Clsid)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)

.子程序 取图像编码CLSID自图像格式, 文本型, , GetCodecClsid
.参数 参数_图像格式, 文本型, , “图像格式_”开头常量

.局部变量 局部_图像编码信息, GP_图像编解码信息, , "0", 
.局部变量 局部_数量, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_数量, 取图像编码列表 (局部_图像编码信息))
.计次循环首 (局部_数量, i)
    .如果真 (等于 (参数_图像格式, 局部_图像编码信息 [i], 图像格式ID))
        返回 (局部_图像编码信息 [i], Clsid)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)


.子程序 GUID到文本, 文本型, , StringFromGUID2
.参数 参数_CLSID, 字节集, , 

.局部变量 局部_String, 字节集, , , 

赋值 (局部_String, 取空白字节集 (78))
StringFromGUID2 (参数_CLSID, 局部_String, 78)
返回 (W2A (lstrcpy_字节集 (局部_String, 局部_String)))

.子程序 文本到GUDI, 字节集, , CLSIDFromString
.参数 参数_文本, 文本型, , 

.局部变量 局部_clsid, 字节集, , , 

赋值 (局部_clsid, 取空白字节集 (16))
CLSIDFromString (A2W (参数_文本), 局部_clsid)
返回 (局部_clsid)

.子程序 制坐标F, GP_坐标F, , MakePointF
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 

.局部变量 局部_坐标, GP_坐标F, , , 

赋值 (局部_坐标.横坐标, 参数_x)
赋值 (局部_坐标.纵坐标, 参数_y)
返回 (局部_坐标)


.子程序 制矩形F, GP_矩形F, , MakeRectF
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, 可空, 
.参数 参数_高度, 小数型, 可空, 

.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (局部_矩形.左边, 参数_左边)
赋值 (局部_矩形.顶边, 参数_顶边)
赋值 (局部_矩形.宽度, 参数_宽度)
赋值 (局部_矩形.高度, 参数_高度)
返回 (局部_矩形)

.子程序 制坐标L, GP_坐标L, , MakePointL
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_坐标, GP_坐标L, , , 

赋值 (局部_坐标.横坐标, 参数_x)
赋值 (局部_坐标.纵坐标, 参数_y)
返回 (局部_坐标)


.子程序 制矩形L, GP_矩形L, , MakeRectL
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, 可空, 
.参数 参数_高度, 整数型, 可空, 

.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (局部_矩形.左边, 参数_左边)
赋值 (局部_矩形.顶边, 参数_顶边)
赋值 (局部_矩形.宽度, 参数_宽度)
赋值 (局部_矩形.高度, 参数_高度)
返回 (局部_矩形)

.子程序 颜色值取RGB, 空白型, , 
.参数 颜色, 整数型, , 
.参数 R, 整数型, 参考, 
.参数 G, 整数型, 参考, 
.参数 B, 整数型, 参考, 

赋值 (B, 右移 (颜色, 16))
赋值 (R, 位异或 (颜色, 左移 (右移 (颜色, 8), 8)))
赋值 (G, 位异或 (右移 (颜色, 8), 左移 (B, 8)))

.子程序 TRIVERTEX2字节集, 字节集, , 
.参数 VertEX, GDI_渐变数据, 数组, 

.局部变量 元素个数, 整数型, , , 
.局部变量 变量, 整数型, , , 
.局部变量 数据, 字节集, , , 

赋值 (元素个数, 取数组成员数 (VertEX))
.计次循环首 (元素个数, 变量)
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], x)))
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], y)))
    赋值 (数据, 相加 (数据, 取空白字节集 (1)))
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], r)))
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], g)))
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], b)))
    赋值 (数据, 相加 (数据, 到字节集 (VertEX [变量], 保留)))
.计次循环尾 ()
返回 (数据)

.子程序 取渐变色, 空白型, , 
.参数 开始色, 整数型, , 渐变初始色
.参数 结束色, 整数型, , 渐变最终色
.参数 颜色数, 整数型, , 取出多少个颜色
.参数 色集合, 整数型, 参考 数组, 

.局部变量 计次, 整数型, , "3", 
.局部变量 红, 整数型, , "3", 
.局部变量 绿, 整数型, , "3", 
.局部变量 蓝, 整数型, , "3", 
.局部变量 最终颜色值, 整数型, , , 

颜色值取RGB (开始色, 红 [1], 绿 [1], 蓝 [1])
颜色值取RGB (结束色, 红 [2], 绿 [2], 蓝 [2])
重定义数组 (色集合, 假, 0)
.计次循环首 (颜色数, 计次 [1])
    赋值 (红 [3], 相加 (红 [1], 相乘 (相除 (相减 (红 [2], 红 [1]), 颜色数), 相减 (计次 [1], 1))))
    赋值 (绿 [3], 相加 (绿 [1], 相乘 (相除 (相减 (绿 [2], 绿 [1]), 颜色数), 相减 (计次 [1], 1))))
    赋值 (蓝 [3], 相加 (蓝 [1], 相乘 (相除 (相减 (蓝 [2], 蓝 [1]), 颜色数), 相减 (计次 [1], 1))))
    .如果真 (小于 (红 [3], 0))
        赋值 (红 [3], 0)
    .如果真结束
    .如果真 (小于 (绿 [3], 0))
        赋值 (绿 [3], 0)
    .如果真结束
    .如果真 (小于 (蓝 [3], 0))
        赋值 (蓝 [3], 0)
    .如果真结束
    .如果真 (大于 (红 [3], 255))
        赋值 (红 [3], 255)
    .如果真结束
    .如果真 (大于 (绿 [3], 255))
        赋值 (绿 [3], 255)
    .如果真结束
    .如果真 (大于 (蓝 [3], 255))
        赋值 (蓝 [3], 255)
    .如果真结束
    赋值 (最终颜色值, 取颜色值 (红 [3], 绿 [3], 蓝 [3]))
    加入成员 (色集合, 最终颜色值)
.计次循环尾 ()

.子程序 RGB2HSL, GDI_HSL, , 
.参数 RGB, GDI_RGB, , 

.局部变量 HSL, GDI_HSL, , , 
.局部变量 r, 小数型, , , 
.局部变量 g, 小数型, , , 
.局部变量 b, 小数型, , , 
.局部变量 maxVal, 小数型, , , 
.局部变量 minVal, 小数型, , , 
.局部变量 h, 小数型, , , 
.局部变量 s, 小数型, , , 
.局部变量 l, 小数型, , , 

赋值 (r, 相除 (RGB.R, 255))
赋值 (g, 相除 (RGB.G, 255))
赋值 (b, 相除 (RGB.B, 255))
.如果 (大于 (r, g))
    .如果 (大于 (r, b))
        赋值 (maxVal, r)
        .如果 (大于 (g, b))
            赋值 (minVal, b)
        .否则
            赋值 (minVal, g)
        .如果结束
        
    .否则
        赋值 (maxVal, b)
        赋值 (minVal, g)
    .如果结束
    
.否则
    .如果 (大于 (g, b))
        赋值 (maxVal, g)
        .如果 (大于 (r, b))
            赋值 (minVal, b)
        .否则
            赋值 (minVal, r)
        .如果结束
        
    .否则
        赋值 (maxVal, b)
        赋值 (minVal, r)
    .如果结束
    
.如果结束
 ' // hue
.判断开始 (等于 (maxVal, minVal))
    赋值 (h, 0)
.判断 (并且 (等于 (maxVal, r), 大于或等于 (g, b)))
    赋值 (h, 相除 (相乘 (60, 相减 (g, b)), 相减 (maxVal, minVal)))
.判断 (并且 (等于 (maxVal, r), 小于 (g, b)))
    赋值 (h, 相加 (相除 (相乘 (60, 相减 (g, b)), 相减 (maxVal, minVal)), 360))
.判断 (等于 (maxVal, g))
    赋值 (h, 相加 (相除 (相乘 (60, 相减 (b, r)), 相减 (maxVal, minVal)), 120))
.判断 (等于 (maxVal, b))
    赋值 (h, 相加 (相除 (相乘 (60, 相减 (r, g)), 相减 (maxVal, minVal)), 240))
.默认
    
.判断结束
 ' // luminance
赋值 (l, 相除 (相加 (maxVal, minVal), 2))

 ' // saturation
.判断开始 (或者 (等于 (l, 0), 等于 (maxVal, minVal)))
    赋值 (s, 0)
.判断 (并且 (小于 (0, l), 小于或等于 (l, 0.5)))
    赋值 (s, 相除 (相减 (maxVal, minVal), 相加 (maxVal, minVal)))
.判断 (大于 (l, 0.5))
    赋值 (s, 相除 (相减 (maxVal, minVal), 相减 (2, 相加 (maxVal, minVal))))
.默认
    
.判断结束
 ' //----------
.判断开始 (大于 (h, 360))
    赋值 (h, 360)
.判断 (小于 (h, 0))
    赋值 (h, 0)
.默认
    
.判断结束
.判断开始 (大于 (s, 1))
    赋值 (s, 1)
.判断 (小于 (h, 0))
    赋值 (s, 0)
.默认
    
.判断结束
赋值 (s, 相乘 (s, 100))
.判断开始 (大于 (l, 1))
    赋值 (l, 1)
.判断 (小于 (h, 0))
    赋值 (l, 0)
.默认
    
.判断结束
赋值 (l, 相乘 (l, 100))
赋值 (HSL.H, h)
赋值 (HSL.S, s)
赋值 (HSL.L, l)
返回 (HSL)


.子程序 HSI2RGB, GDI_RGB, , HSI通道转到RGB通道，RGB：红绿蓝通道；HSI：色相、饱和度、亮度 通道
.参数 cr_hsl, GDI_HSL, , 

.局部变量 h, 小数型, , , 
.局部变量 s, 小数型, , , 
.局部变量 l, 小数型, , , 
.局部变量 r, 小数型, , , 
.局部变量 g, 小数型, , , 
.局部变量 b, 小数型, , , 
.局部变量 q, 小数型, , , 
.局部变量 p, 小数型, , , 
.局部变量 Hk, 小数型, , , 
.局部变量 T, 小数型, , "3", 
.局部变量 i, 整数型, , , 
.局部变量 cr_rgb, GDI_RGB, , , 

赋值 (h, cr_hsl.H)
赋值 (s, 相除 (cr_hsl.S, 100))
赋值 (l, 相除 (cr_hsl.L, 100))
.如果真 (大于 (s, 1))
    赋值 (s, 1)
.如果真结束
.如果真 (大于 (l, 1))
    赋值 (l, 1)
.如果真结束
.如果真 (小于 (s, 0))
    赋值 (s, 0)
.如果真结束
.如果真 (小于 (l, 0))
    赋值 (l, 0)
.如果真结束
.如果 (等于 (s, 0))
    赋值 (r, 相乘 (l, 255))
    赋值 (g, 相乘 (l, 255))
    赋值 (b, 相乘 (l, 255))
.否则
    .如果 (小于 (l, 0.5))
        赋值 (q, 相乘 (l, 相加 (1, s)))
    .否则
        赋值 (q, 相减 (相加 (l, s), 相乘 (l, s)))
    .如果结束
    赋值 (p, 相减 (相乘 (2, l), q))
    赋值 (Hk, 相除 (h, 360))
    赋值 (T [1], 相加 (Hk, 0.3333333))
    赋值 (T [2], Hk)
    赋值 (T [3], 相减 (Hk, 0.3333333))
    .计次循环首 (3, i)
        .如果真 (小于 (T [i], 0))
            赋值 (T [i], 相加 (T [i], 1))
        .如果真结束
        .如果真 (大于 (T [i], 1))
            赋值 (T [i], 相减 (T [i], 1))
        .如果真结束
        .判断开始 (小于 (相乘 (T [i], 6), 1))
            赋值 (T [i], 相加 (p, 相乘 (相减 (q, p), 6, T [i])))
        .判断 (小于 (相乘 (T [i], 2), 1))
            赋值 (T [i], q)
        .判断 (小于 (相乘 (T [i], 3), 2))
            赋值 (T [i], 相加 (p, 相乘 (相减 (q, p), 相减 (相除 (2, 3), T [i]), 6)))
        .默认
            赋值 (T [i], p)
        .判断结束
        
    .计次循环尾 ()
    赋值 (r, 相乘 (T [1], 255))
    赋值 (g, 相乘 (T [2], 255))
    赋值 (b, 相乘 (T [3], 255))
.如果结束
赋值 (cr_rgb.R, r)
赋值 (cr_rgb.G, g)
赋值 (cr_rgb.B, b)
返回 (cr_rgb)

.类模块 GDI_GP_图形, Gdiplus基类, , 

.程序集变量 hdc, 整数型, , , 
.程序集变量 mdc, 整数型, , , 
.程序集变量 bmp, 整数型, , , 
.程序集变量 obmp, 整数型, , , 
.程序集变量 hwnd, 整数型, , , 
.程序集变量 窗口矩形, GDI_矩形, , , 
.程序集变量 width, 整数型, , , 
.程序集变量 height, 整数型, , , 
.程序集变量 offsetX, 整数型, , , 
.程序集变量 offsetY, 整数型, , , 
.程序集变量 m_Graphics, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Graphics, 参数_指针)

.子程序 得到GDIPLUS图形句柄, 整数型, , 
返回 (m_Graphics)

.子程序 宽度, 整数型, , 
返回 (width)

.子程序 高度, 整数型, , 
返回 (height)

.子程序 取窗口宽度, 整数型, , 
返回 (相减 (窗口矩形.右边, 窗口矩形.左边))

.子程序 取窗口高度, 整数型, , 
返回 (相减 (窗口矩形.底边, 窗口矩形.顶边))

.子程序 创建_自窗口句柄, 逻辑型, , 成功则真，失败则假
.参数 窗口句柄, 整数型, , 可以是窗口句柄同样可以是组件句柄，只要是　取窗口句柄（）　得到的即可。

赋值 (hwnd, 窗口句柄)
赋值 (hdc, 取设备场景_ (hwnd))
.如果真 (等于 (hdc, 0))
    赋值 (错误信息, 相加 (错误信息, “获取设备句柄失败（GetDC()结果为0）请检查提供的窗口句柄是否有误。”))
    返回 (假)
.如果真结束
赋值 (mdc, 创建内存场景_ (hdc))
.如果真 (等于 (mdc, 0))
    赋值 (错误信息, 相加 (错误信息, “创建内存设备句柄失败（CreateCompatibleDC()结果为0）”))
    返回 (假)
.如果真结束
取窗口矩形_ (hwnd, 窗口矩形)
赋值 (width, 相减 (窗口矩形.右边, 窗口矩形.左边))
赋值 (height, 相减 (窗口矩形.底边, 窗口矩形.顶边))
.如果真 (等于 (hwnd, 0))
    赋值 (窗口矩形.右边, 取屏幕宽度 ())
    赋值 (窗口矩形.底边, 取屏幕高度 ())
    赋值 (width, 取屏幕宽度 ())
    赋值 (height, 取屏幕高度 ())
.如果真结束
赋值 (bmp, 创建设备位图_ (hdc, width, height))
.如果真 (等于 (bmp, 0))
    赋值 (错误信息, 相加 (错误信息, “创建设备位图失败（CreateCompatibleBitmap()结果为0）”))
    返回 (假)
.如果真结束
赋值 (obmp, 选入设备场景_ (mdc, bmp))
GdipCreateFromHDC (mdc, m_Graphics)
置指针 (m_Graphics)
设置背景模式_ (mdc, 1)
.如果真 (等于 (obmp, 0))
    赋值 (错误信息, 相加 (错误信息, “选入位图到内存设备失败（SelectObject()结果为0）”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自窗口, 逻辑型, , 成功则真，失败则假
.参数 窗口, 窗口, , 直接提供你的窗口就行啊

返回 (创建_自窗口句柄 (窗口.取窗口句柄 ()))

.子程序 创建_自窗口2, 逻辑型, , 成功则真，失败则假，这个方法可以拥有自定义大的后台（内存无限则后台无限），没有更大的后台，平移方法后留下的空白区域则无法填充
.参数 窗口, 窗口, , 直接提供你的窗口就行啊
.参数 后台宽度, 整数型, , 
.参数 后台高度, 整数型, , 

返回 (创建_自窗口句柄2 (窗口.取窗口句柄 (), 后台宽度, 后台高度))

.子程序 创建_自窗口句柄2, 逻辑型, , 成功则真，失败则假，这个方法可以拥有自定义大的后台（内存无限则后台无限），没有更大的后台，平移方法后留下的空白区域则无法填充
.参数 窗口句柄, 整数型, , 可以是窗口句柄同样可以是组件句柄，只要是　取窗口句柄（）　得到的即可。
.参数 后台宽度, 整数型, , 
.参数 后台高度, 整数型, , 

赋值 (hwnd, 窗口句柄)
赋值 (hdc, 取设备场景_ (hwnd))
.如果真 (等于 (hdc, 0))
    赋值 (错误信息, 相加 (错误信息, “获取设备句柄失败（GetDC()结果为0）请检查提供的窗口句柄是否有误。”))
    返回 (假)
.如果真结束
赋值 (mdc, 创建内存场景_ (hdc))
.如果真 (等于 (mdc, 0))
    赋值 (错误信息, 相加 (错误信息, “创建内存设备句柄失败（CreateCompatibleDC()结果为0）”))
    返回 (假)
.如果真结束
取窗口矩形_ (hwnd, 窗口矩形)
.如果真 (等于 (hwnd, 0))
    赋值 (窗口矩形.右边, 取屏幕宽度 ())
    赋值 (窗口矩形.底边, 取屏幕高度 ())
.如果真结束
赋值 (width, 后台宽度)
赋值 (height, 后台高度)
赋值 (bmp, 创建设备位图_ (hdc, 后台宽度, 后台高度))
.如果真 (等于 (bmp, 0))
    赋值 (错误信息, 相加 (错误信息, “创建设备位图失败（CreateCompatibleBitmap()结果为0）”))
    返回 (假)
.如果真结束
赋值 (obmp, 选入设备场景_ (mdc, bmp))
设置背景模式_ (mdc, 1)
GdipCreateFromHDC (mdc, m_Graphics)
置指针 (m_Graphics)
.如果真 (等于 (obmp, 0))
    赋值 (错误信息, 相加 (错误信息, “选入位图到内存设备失败（SelectObject()结果为0）”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自设备句柄2, 逻辑型, , 成功则真，失败则假，这个方法可以拥有自定义大的后台（内存无限则后台无限），没有更大的后台，平移方法后留下的空白区域则无法填充
.参数 设备句柄_HDC, 整数型, , 请提供由GetDC()或画板.取设备句柄()或其他方式获得HDC设备句柄
.参数 后台宽度, 整数型, , 
.参数 后台高度, 整数型, , 

赋值 (hdc, 设备句柄_HDC)
赋值 (hwnd, WindowFromDC (hdc))
.如果真 (等于 (hdc, 0))
    赋值 (错误信息, 相加 (错误信息, “您提供的设备句柄为0(图形.创建_自设备句柄(此处您提供的是一个值为0的整数))请检查您获得设备句柄的方法”))
    返回 (假)
.如果真结束
赋值 (mdc, 创建内存场景_ (hdc))
.如果真 (等于 (mdc, 0))
    赋值 (错误信息, 相加 (错误信息, “创建内存设备句柄失败（CreateCompatibleDC()结果为0）”))
    返回 (假)
.如果真结束
取窗口矩形_ (hwnd, 窗口矩形)
赋值 (width, 后台宽度)
赋值 (height, 后台高度)
赋值 (bmp, 创建设备位图_ (hdc, 后台宽度, 后台高度))
.如果真 (等于 (bmp, 0))
    赋值 (错误信息, 相加 (错误信息, “创建设备位图失败（CreateCompatibleBitmap()结果为0）”))
    返回 (假)
.如果真结束
赋值 (obmp, 选入设备场景_ (mdc, bmp))
GdipCreateFromHDC (mdc, m_Graphics)
置指针 (m_Graphics)
设置背景模式_ (mdc, 1)
.如果真 (等于 (obmp, 0))
    赋值 (错误信息, 相加 (错误信息, “选入位图到内存设备失败（SelectObject()结果为0）”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自设备句柄, 逻辑型, , 成功则真，失败则假
.参数 设备句柄_HDC, 整数型, , 请提供由GetDC()或画板.取设备句柄()或其他方式获得HDC设备句柄

赋值 (hdc, 设备句柄_HDC)
赋值 (hwnd, WindowFromDC (hdc))
.如果真 (等于 (hdc, 0))
    赋值 (错误信息, 相加 (错误信息, “您提供的设备句柄为0(图形.创建_自设备句柄(此处您提供的是一个值为0的整数))请检查您获得设备句柄的方法”))
    返回 (假)
.如果真结束
赋值 (mdc, 创建内存场景_ (hdc))
.如果真 (等于 (mdc, 0))
    赋值 (错误信息, 相加 (错误信息, “创建内存设备句柄失败（CreateCompatibleDC()结果为0）”))
    返回 (假)
.如果真结束
取窗口矩形_ (hwnd, 窗口矩形)
赋值 (width, 相减 (窗口矩形.右边, 窗口矩形.左边))
赋值 (height, 相减 (窗口矩形.底边, 窗口矩形.顶边))
赋值 (bmp, 创建设备位图_ (hdc, width, height))
.如果真 (等于 (bmp, 0))
    赋值 (错误信息, 相加 (错误信息, “创建设备位图失败（CreateCompatibleBitmap()结果为0）”))
    返回 (假)
.如果真结束
赋值 (obmp, 选入设备场景_ (mdc, bmp))
GdipCreateFromHDC (mdc, m_Graphics)
置指针 (m_Graphics)
设置背景模式_ (mdc, 1)
.如果真 (等于 (obmp, 0))
    赋值 (错误信息, 相加 (错误信息, “选入位图到内存设备失败（SelectObject()结果为0）”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 描_像素点, 逻辑型, , 成功则真，失败则假。画一个像素点，由于操作简单，不依赖画笔
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 颜色值, 整数型, , 
.参数 透明度, 整数型, , 0-255

.局部变量 r, 整数型, , "2", 
.局部变量 g, 整数型, , "2", 
.局部变量 b, 整数型, , "2", 

.如果真 (或者 (大于 (透明度, 255), 小于 (透明度, 0)))
    赋值 (错误信息, 相加 (错误信息, “透明度超出0-255的取值范围，请检查”))
    返回 (假)
.如果真结束
颜色值取RGB (取点_ (mdc, 横坐标, 纵坐标), r [1], g [1], b [1])
颜色值取RGB (颜色值, r [2], g [2], b [2])
.如果真 (等于 (SetPixelV (mdc, 横坐标, 纵坐标, 取颜色值 (相加 (相除 (相乘 (r [1], 相减 (255, 透明度)), 255), 相除 (相乘 (r [2], 透明度), 255)), 相加 (相除 (相乘 (g [1], 相减 (255, 透明度)), 255), 相除 (相乘 (g [2], 透明度), 255)), 相加 (相除 (相乘 (b [1], 相减 (255, 透明度)), 255), 相除 (相乘 (b [2], 透明度), 255)))), 0))
    赋值 (错误信息, 相加 (错误信息, “画点失败(SetPixelV()返回值为0)请检查提供的参数是否正常。请检查是否创建图形”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 清除, 逻辑型, , 
.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (4)))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)”))
    返回 (假)
.如果真结束
.如果真 (等于 (画矩形_ (mdc, 0, 0, width, height), 0))
    赋值 (错误信息, 相加 (错误信息, “清除失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 清除_局部, 逻辑型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (4)))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)”))
    返回 (假)
.如果真结束
.如果真 (等于 (画矩形_ (mdc, 左边, 顶边, 宽度, 高度), 0))
    赋值 (错误信息, 相加 (错误信息, “清除失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 复制_窗口快照, 逻辑型, , 
.参数 窗口句柄, 整数型, 可空, 默认为画布窗口
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*

.局部变量 wndhdc, 整数型, , , 

.如果 (是否为空 (窗口句柄))
    赋值 (wndhdc, hdc)
.否则
    赋值 (wndhdc, 取设备场景_ (窗口句柄))
.如果结束
.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (复制场景位图_ (mdc, 0, 0, 相减 (窗口矩形.右边, 窗口矩形.左边), 相减 (窗口矩形.底边, 窗口矩形.顶边), wndhdc, 0, 0, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    .如果真 (等于 (是否为空 (窗口句柄), 假))
        释放设备场景_ (窗口句柄, wndhdc)
    .如果真结束
    返回 (假)
.如果真结束
返回 (真)

.子程序 清除_窗口, 逻辑型, , 
.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (hdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (hdc, 取对象句柄_ (4)))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)”))
    返回 (假)
.如果真结束
.如果真 (等于 (画矩形_ (hdc, 0, 0, width, height), 0))
    赋值 (错误信息, 相加 (错误信息, “清除失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (hdc, oPen)
选入设备场景_ (hdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 清除_窗口_局部, 逻辑型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (hdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (hdc, 取对象句柄_ (4)))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)”))
    返回 (假)
.如果真结束
.如果真 (等于 (画矩形_ (hdc, 左边, 顶边, 宽度, 高度), 0))
    赋值 (错误信息, 相加 (错误信息, “清除失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (hdc, oPen)
选入设备场景_ (hdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描边_矩形, 逻辑型, , 成功则真，失败则假。
.参数 画笔, GDI_画笔, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
.如果真 (等于 (画矩形_ (mdc, 横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)), 0))
    赋值 (错误信息, 相加 (错误信息, “画矩形失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 填充_矩形, 逻辑型, , 成功则真，失败则假。
.参数 刷子, GDI_刷子, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画矩形_ (mdc, 横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)), 0))
    赋值 (错误信息, 相加 (错误信息, “画矩形失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描边_椭圆, 逻辑型, , 成功则真，失败则假。
.参数 画笔, GDI_画笔, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
.如果真 (等于 (画椭圆_ (mdc, 横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)), 0))
    赋值 (错误信息, 相加 (错误信息, “画矩形失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 填充_椭圆, 逻辑型, , 成功则真，失败则假。
.参数 刷子, GDI_刷子, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画椭圆_ (mdc, 横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)), 0))
    赋值 (错误信息, 相加 (错误信息, “画矩形失败(Rectangle()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描边_弧, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 椭圆起始横坐标, 整数型, , 
.参数 椭圆起始纵坐标, 整数型, , 
.参数 椭圆终止横坐标, 整数型, , 
.参数 椭圆终止纵坐标, 整数型, , 
.参数 弧线起始横坐标, 整数型, , 
.参数 弧线起始纵坐标, 整数型, , 
.参数 弧线终止横坐标, 整数型, , 
.参数 弧线终止纵坐标, 整数型, , 

.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画圆弧_ (mdc, 椭圆起始横坐标, 椭圆起始纵坐标, 椭圆终止横坐标, 椭圆终止纵坐标, 弧线起始横坐标, 弧线起始纵坐标, 弧线终止横坐标, 弧线终止纵坐标), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧线失败(Arc()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 填充_弧, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 椭圆起始横坐标, 整数型, , 
.参数 椭圆起始纵坐标, 整数型, , 
.参数 椭圆终止横坐标, 整数型, , 
.参数 椭圆终止纵坐标, 整数型, , 
.参数 弧线起始横坐标, 整数型, , 
.参数 弧线起始纵坐标, 整数型, , 
.参数 弧线终止横坐标, 整数型, , 
.参数 弧线终止纵坐标, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画弦_ (mdc, 椭圆起始横坐标, 椭圆起始纵坐标, 椭圆终止横坐标, 椭圆终止纵坐标, 弧线起始横坐标, 弧线起始纵坐标, 弧线终止横坐标, 弧线终止纵坐标), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧失败(Chord()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 填充_弧2, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 椭圆横坐标, 整数型, , 
.参数 椭圆纵坐标, 整数型, , 
.参数 椭圆宽度, 整数型, , 
.参数 椭圆高度, 整数型, , 
.参数 初始角度, 整数型, , 角度0表示正上方，范围0-360
.参数 结束角度, 整数型, , 角度360同样表示正上方，范围0-360

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
赋值 (初始角度, 相加 (初始角度, 180))
赋值 (结束角度, 相加 (结束角度, 180))
.如果真 (等于 (画弦_ (mdc, 椭圆横坐标, 椭圆纵坐标, 相加 (椭圆横坐标, 椭圆宽度), 相加 (椭圆纵坐标, 椭圆高度), 相加 (相乘 (求正弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2)), 相加 (相乘 (求正弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2))), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧线失败(Arc()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 填充_饼, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 椭圆起始横坐标, 整数型, , 
.参数 椭圆起始纵坐标, 整数型, , 
.参数 椭圆终止横坐标, 整数型, , 
.参数 椭圆终止纵坐标, 整数型, , 
.参数 弧线起始横坐标, 整数型, , 
.参数 弧线起始纵坐标, 整数型, , 
.参数 弧线终止横坐标, 整数型, , 
.参数 弧线终止纵坐标, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (Pie (mdc, 椭圆起始横坐标, 椭圆起始纵坐标, 椭圆终止横坐标, 椭圆终止纵坐标, 弧线起始横坐标, 弧线起始纵坐标, 弧线终止横坐标, 弧线终止纵坐标), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧失败(Chord()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描边_饼, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 椭圆起始横坐标, 整数型, , 
.参数 椭圆起始纵坐标, 整数型, , 
.参数 椭圆终止横坐标, 整数型, , 
.参数 椭圆终止纵坐标, 整数型, , 
.参数 弧线起始横坐标, 整数型, , 
.参数 弧线起始纵坐标, 整数型, , 
.参数 弧线终止横坐标, 整数型, , 
.参数 弧线终止纵坐标, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
.如果真 (等于 (Pie (mdc, 椭圆起始横坐标, 椭圆起始纵坐标, 椭圆终止横坐标, 椭圆终止纵坐标, 弧线起始横坐标, 弧线起始纵坐标, 弧线终止横坐标, 弧线终止纵坐标), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧失败(Chord()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 填充_饼2, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 椭圆横坐标, 整数型, , 
.参数 椭圆纵坐标, 整数型, , 
.参数 椭圆宽度, 整数型, , 
.参数 椭圆高度, 整数型, , 
.参数 初始角度, 整数型, , 角度0表示正上方，范围0-360
.参数 结束角度, 整数型, , 角度360同样表示正上方，范围0-360

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
赋值 (初始角度, 相加 (初始角度, 180))
赋值 (结束角度, 相加 (结束角度, 180))
.如果真 (等于 (Pie (mdc, 椭圆横坐标, 椭圆纵坐标, 相加 (椭圆横坐标, 椭圆宽度), 相加 (椭圆纵坐标, 椭圆高度), 相加 (相乘 (求正弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2)), 相加 (相乘 (求正弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2))), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧线失败(Arc()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描边_饼2, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 椭圆横坐标, 整数型, , 
.参数 椭圆纵坐标, 整数型, , 
.参数 椭圆宽度, 整数型, , 
.参数 椭圆高度, 整数型, , 
.参数 初始角度, 整数型, , 角度0表示正上方，范围0-360
.参数 结束角度, 整数型, , 角度360同样表示正上方，范围0-360

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
赋值 (初始角度, 相加 (初始角度, 180))
赋值 (结束角度, 相加 (结束角度, 180))
.如果真 (等于 (Pie (mdc, 椭圆横坐标, 椭圆纵坐标, 相加 (椭圆横坐标, 椭圆宽度), 相加 (椭圆纵坐标, 椭圆高度), 相加 (相乘 (求正弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2)), 相加 (相乘 (求正弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2))), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧线失败(Arc()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 描边_弧2, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 椭圆横坐标, 整数型, , 
.参数 椭圆纵坐标, 整数型, , 
.参数 椭圆宽度, 整数型, , 
.参数 椭圆高度, 整数型, , 
.参数 初始角度, 整数型, , 角度0表示正上方，范围0-360
.参数 结束角度, 整数型, , 角度360同样表示正上方，范围0-360

.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (初始角度, 相加 (初始角度, 180))
赋值 (结束角度, 相加 (结束角度, 180))
.如果真 (等于 (画圆弧_ (mdc, 椭圆横坐标, 椭圆纵坐标, 相加 (椭圆横坐标, 椭圆宽度), 相加 (椭圆纵坐标, 椭圆高度), 相加 (相乘 (求正弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (初始角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2)), 相加 (相乘 (求正弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆横坐标, 相除 (椭圆宽度, 2)), 相加 (相乘 (求余弦 (相除 (相乘 (结束角度, #pi), 180)), 50), 椭圆纵坐标, 相除 (椭圆高度, 2))), 0))
    赋值 (错误信息, 相加 (错误信息, “画弧线失败(Arc()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 描_直线, 逻辑型, , 连接指定矩形范围的对角线
.参数 画笔, GDI_画笔, , 
.参数 起始横坐标, 整数型, , 
.参数 起始纵坐标, 整数型, , 
.参数 结束横坐标, 整数型, , 
.参数 结束纵坐标, 整数型, , 

.局部变量 oPen, 整数型, , , 
.局部变量 点, 坐标_, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (指定画笔位置_ (mdc, 起始横坐标, 起始纵坐标, 点), 0))
    赋值 (错误信息, 相加 (错误信息, “指定画笔位置失败(MoveToEx()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画直线_ (mdc, 结束横坐标, 结束纵坐标), 0))
    赋值 (错误信息, 相加 (错误信息, “画直线失败(LineTo()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 填充_渐变, 逻辑型, , 
.参数 渐变数据, GDI_渐变数据, 数组, 
.参数 渐变类型, 整数型, , 详见常量表，渐变类型_*

.局部变量 i, 整数型, , "2", 

加入成员 (i, 0)
加入成员 (i, 1)
.如果真 (等于 (梯度填充矩形_ (mdc, TRIVERTEX2字节集 (渐变数据), 取数组成员数 (渐变数据), i [1], 2, 渐变类型), 0))
    赋值 (错误信息, 相加 (错误信息, “渐变填充失败(GdiGradientFill()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 描边_圆角矩形, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 圆角宽度, 整数型, , 
.参数 圆角高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
.如果真 (等于 (画圆角矩形_ (mdc, 横坐标, 纵坐标, 相加 (宽度, 横坐标), 相加 (纵坐标, 高度), 圆角宽度, 圆角高度), 0))
    赋值 (错误信息, 相加 (错误信息, “画圆角矩形失败(RoundRect()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 填充_圆角矩形, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 圆角宽度, 整数型, , 
.参数 圆角高度, 整数型, , 

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (画圆角矩形_ (mdc, 横坐标, 纵坐标, 相加 (宽度, 横坐标), 相加 (纵坐标, 高度), 圆角宽度, 圆角高度), 0))
    赋值 (错误信息, 相加 (错误信息, “画圆角矩形失败(RoundRect()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 描_贝塞尔曲线集合, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。其中的第一个结构指定了起点。剩下的点三个一组――包括两个控制点和一个终点
.参数 点数量, 整数型, 可空, 为空则自动计算数量

.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (是否为空 (点数量))
    赋值 (点数量, 取数组成员数 (点集合))
.如果真结束
.如果真 (不等于 (求余数 (相减 (点数量, 1), 3), 0))
    赋值 (错误信息, 相加 (错误信息, “画多条贝塞尔曲线 的第一个参数 点集合 点 数组类型 中的第一个点指定了起点。剩下的点三个一组――包括两个控件点和一个终点，必须符合规范，除去一个，必能与3整除！”))
    返回 (假)
.如果真结束
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (PolyBezier (mdc, 点集合, 点数量), 0))
    赋值 (错误信息, 相加 (错误信息, “画贝赛尔曲线集合失败(PolyBezier()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 描_直线集合, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。
.参数 点数量, 整数型, 可空, 为空则自动计算数量

.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (是否为空 (点数量))
    赋值 (点数量, 取数组成员数 (点集合))
.如果真结束
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (Polyline (mdc, 点集合, 点数量), 0))
    赋值 (错误信息, 相加 (错误信息, “画直线集合失败(PolyLine()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 描边_多边形, 逻辑型, , 
.参数 画笔, GDI_画笔, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。各个点连成多边形
.参数 点数量, 整数型, 可空, 为空则自动计算数量

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
赋值 (oBrush, 选入设备场景_ (mdc, 取对象句柄_ (5)))
.如果真 (是否为空 (点数量))
    赋值 (点数量, 取数组成员数 (点集合))
.如果真结束
.如果真 (等于 (描绘一个多边形_ (mdc, 点集合, 点数量), 0))
    赋值 (错误信息, 相加 (错误信息, “画多边形失败(Polygon()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 写出文本, 逻辑型, , 
.参数 字体, GDI_字体, , 
.参数 背景色, 整数型, 可空, 如果为空，则不填充背景
.参数 文本内容, 文本型, , 
.参数 文本矩形范围, GDI_矩形, , 
.参数 方式, 整数型, , 详见常量表，写出文本_*

.局部变量 Font, 整数型, , , 
.局部变量 oFont, 整数型, , , 

.如果 (等于 (是否为空 (背景色), 假))
    设置背景模式_ (mdc, 2)
    设置背景颜色_ (mdc, 背景色)
.否则
    设置背景模式_ (mdc, 1)
.如果结束
赋值 (Font, 用指定属性创建逻辑字体_ (字体.字符高度, 字体.字符宽度, 字体.斜度, 字体.斜度, 字体.字形_, 到数值 (字体.是否斜体), 到数值 (字体.是否下划线), 到数值 (字体.是否删除线), 134, 0, 0, 1, 0, 字体.字体名称))
设置前景色_ (mdc, 字体.颜色)
.如果真 (等于 (Font, 0))
    赋值 (错误信息, 相加 (错误信息, “创建字体失败(CreateFontA()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束
赋值 (oFont, 选入设备场景_ (mdc, Font))
.如果真 (等于 (oFont, 0))
    赋值 (错误信息, 相加 (错误信息, “选入字体到内存设备场景失败(SelectObject()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (矩形内文本扩展_ (mdc, 文本内容, -1, 文本矩形范围, 方式, 0), 0))
    赋值 (错误信息, 相加 (错误信息, “写出文本失败(DrawTextEx()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oFont)
删除对象_ (Font)
返回 (真)

.子程序 写出文本_阴影, 逻辑型, , 
.参数 字体, GDI_字体, , 
.参数 背景色, 整数型, 可空, 如果为空，则不填充背景
.参数 文本内容, 文本型, , 
.参数 文本矩形范围, GDI_矩形, , 
.参数 阴影色, 整数型, , 
.参数 阴影横向偏移, 整数型, , 
.参数 阴影纵向偏移, 整数型, , 
.参数 方式, 整数型, , 

.局部变量 Font, 整数型, , , 
.局部变量 oFont, 整数型, , , 

.如果 (等于 (是否为空 (背景色), 假))
    设置背景模式_ (mdc, 2)
    设置背景颜色_ (mdc, 背景色)
.否则
    设置背景模式_ (mdc, 1)
.如果结束
赋值 (Font, 用指定属性创建逻辑字体_ (字体.字符高度, 字体.字符宽度, 字体.斜度, 字体.斜度, 字体.字形_, 到数值 (字体.是否斜体), 到数值 (字体.是否下划线), 到数值 (字体.是否删除线), 134, 0, 0, 1, 0, 字体.字体名称))
.如果真 (等于 (Font, 0))
    赋值 (错误信息, 相加 (错误信息, “创建字体失败(CreateFontA()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束
赋值 (oFont, 选入设备场景_ (mdc, Font))
.如果真 (等于 (oFont, 0))
    赋值 (错误信息, 相加 (错误信息, “选入字体到内存设备场景失败(SelectObject()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束

.如果真 (等于 (DrawShadowText (mdc, A2W (文本内容), 相除 (取文本长度 (到全角 (文本内容)), 2), 文本矩形范围, 方式, 字体.颜色, #黑色, 阴影横向偏移, 阴影纵向偏移), 0))
    赋值 (错误信息, 相加 (错误信息, “写出文本失败(DrawShadowText()返回0)请检查GDI_字体是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oFont)
删除对象_ (Font)
返回 (真)

.子程序 取点_后台, 整数型, , 返回您绘制的那个后台页面的某点颜色值
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 

返回 (取点_ (mdc, 横坐标, 纵坐标))

.子程序 填充_多边形, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。各个点连成多边形
.参数 点数量, 整数型, 可空, 为空则自动计算数量

.局部变量 oBrush, 整数型, , , 
.局部变量 oPen, 整数型, , , 
.局部变量 空画笔, 整数型, , , 

赋值 (空画笔, 创建画笔_ (#画笔样式1_空笔, 0, 0))
赋值 (oPen, 选入设备场景_ (mdc, 空画笔))
赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (是否为空 (点数量))
    赋值 (点数量, 取数组成员数 (点集合))
.如果真结束
.如果真 (等于 (描绘一个多边形_ (mdc, 点集合, 点数量), 0))
    赋值 (错误信息, 相加 (错误信息, “画多边形失败(Polygon()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
选入设备场景_ (mdc, oBrush)
删除对象_ (空画笔)
返回 (真)

.子程序 反色, 逻辑型, , 将指定范围的颜色翻转过来
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 矩形临时, GDI_矩形, , , 

赋值 (矩形临时.左边, 横坐标)
赋值 (矩形临时.顶边, 纵坐标)
赋值 (矩形临时.右边, 相加 (横坐标, 宽度))
赋值 (矩形临时.底边, 相加 (纵坐标, 高度))
.如果真 (等于 (反转矩形_ (mdc, 矩形临时), 0))
    赋值 (错误信息, 相加 (错误信息, “反色范围失败(InvertRect()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 取窗口句柄, 整数型, , 返回该图像挂接的窗口句柄
返回 (WindowFromDC (hdc))

.子程序 填充_区域, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 区域, GDI_区域, , 

.如果真 (等于 (刷子填充区域_ (mdc, 区域.取句柄 (), 刷子.取句柄 ()), 0))
    赋值 (错误信息, 相加 (错误信息, “填充区域失败(FillRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 描边_区域_用刷子, 逻辑型, , 
.参数 刷子, GDI_刷子, , 
.参数 区域, GDI_区域, , 
.参数 边框宽度, 整数型, , 
.参数 边框高度, 整数型, , 

.如果真 (等于 (画区域外框_ (mdc, 区域.取句柄 (), 刷子.取句柄 (), 边框宽度, 边框高度), 0))
    赋值 (错误信息, 相加 (错误信息, “描边区域失败(FrameRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 路径_启动, 逻辑型, , 开始一个路径，路径中可进行绘制，但无法显现出来，需要调用特定命令以显现路径
.如果真 (等于 (启动路径分支_ (mdc), 0))
    赋值 (错误信息, 相加 (错误信息, “启动路径失败(BeiginPath()返回0)请检查GDI_图形是否已创建”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 路径_结束, 逻辑型, , 结束开始的路径
.如果真 (等于 (结束路径分支_ (mdc), 0))
    赋值 (错误信息, 相加 (错误信息, “结束路径失败(EndPath()返回0)请检查路径是否已开始”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 填充_路径, 逻辑型, , 
.参数 刷子, GDI_刷子, , 

.局部变量 oBrush, 整数型, , , 

赋值 (oBrush, 选入设备场景_ (mdc, 刷子.取句柄 ()))
.如果真 (等于 (oBrush, 0))
    赋值 (错误信息, 相加 (错误信息, “选入刷子失败(SelectObject()返回0)请检查刷子是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (关闭图形_ (mdc), 0))
    赋值 (错误信息, 相加 (错误信息, “填充路径失败(FillPath()返回0)请检查路径是否已启动”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oBrush)
返回 (真)

.子程序 描边_路径, 逻辑型, , 
.参数 画笔, GDI_画笔, , 

.局部变量 oPen, 整数型, , , 

赋值 (oPen, 选入设备场景_ (mdc, 画笔.取句柄 ()))
.如果真 (等于 (oPen, 0))
    赋值 (错误信息, 相加 (错误信息, “选入画笔失败(SelectObject()返回0)请检查画笔是否已创建”))
    返回 (假)
.如果真结束
.如果真 (等于 (StrokePath (mdc), 0))
    赋值 (错误信息, 相加 (错误信息, “描边路径失败(StrokePath()返回0)请检查路径是否已启动”))
    返回 (假)
.如果真结束
选入设备场景_ (mdc, oPen)
返回 (真)

.子程序 取点_前台, 整数型, , 返回将后台页面显现出来的窗口画布的某点颜色值
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 

返回 (取点_ (hdc, 横坐标, 纵坐标))

.子程序 画图片, 逻辑型, , 
.参数 图片, GDI_图片, , 
.参数 画到横坐标, 整数型, , 画到窗口上的位置
.参数 画到纵坐标, 整数型, , 画到窗口上的位置
.参数 截取横坐标, 整数型, , 对图片的截取
.参数 截取纵坐标, 整数型, , 对图片的截取
.参数 截取宽度, 整数型, 可空, 对图片的截取，默认为正常宽度
.参数 截取高度, 整数型, 可空, 对图片的截取，默认为正常宽度
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*，默认为 光栅运算_复制

.局部变量 图片内存设备句柄, 整数型, , , 
.局部变量 oldbitmap, 整数型, , , 
.局部变量 bmps, 位图结构_, , , 
.局部变量 尺寸, 尺寸_, , , 

赋值 (图片内存设备句柄, 创建内存场景_ (hdc))
取对象属性_ (图片.取句柄 (), 相乘 (7, 4), bmps)
赋值 (尺寸.宽度, bmps.位图宽度)
赋值 (尺寸.高度, bmps.位图高度)
.如果真 (是否为空 (截取宽度))
    赋值 (截取宽度, 尺寸.宽度)
.如果真结束
.如果真 (是否为空 (截取高度))
    赋值 (截取高度, 尺寸.高度)
.如果真结束
.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (图片内存设备句柄, 0))
    赋值 (错误信息, 相加 (错误信息, “创建用来存放的内存设备场景失败(CreateCompatibleDC()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
赋值 (oldbitmap, 选入设备场景_ (图片内存设备句柄, 图片.取句柄 ()))
.如果真 (等于 (oldbitmap, 0))
    赋值 (错误信息, 相加 (错误信息, “将位图选入用来存放的内存设备场景失败(SelectObject()返回值为0)请检查图片是否创建成功”))
    返回 (假)
.如果真结束
.如果真 (等于 (复制场景位图_ (mdc, 画到横坐标, 画到纵坐标, 截取宽度, 截取高度, 图片内存设备句柄, 截取横坐标, 截取纵坐标, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将存放图片的内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
选入设备场景_ (图片内存设备句柄, oldbitmap)
删除设备场景_ (图片内存设备句柄)
返回 (真)

.子程序 画图片_透空, 逻辑型, , 该方法可以抠出图片需要的部分，取出不需要的颜色
.参数 图片, GDI_图片, , 
.参数 画到横坐标, 整数型, , 画到窗口上的位置
.参数 画到纵坐标, 整数型, , 画到窗口上的位置
.参数 画到宽度, 整数型, 可空, 此宽度若与截取图片的不同，将进行缩放处理默认为正常宽度
.参数 画到高度, 整数型, 可空, 此高度若与截取图片的不同，将进行缩放处理默认为正常高度
.参数 截取横坐标, 整数型, , 对图片的截取
.参数 截取纵坐标, 整数型, , 对图片的截取
.参数 截取宽度, 整数型, 可空, 对图片的截取默认为正常宽度
.参数 截取高度, 整数型, 可空, 对图片的截取默认为正常高度
.参数 透明色, 整数型, , 凡图片中为该透明色的地方均被扣去，留下剩余部分

.局部变量 图片内存设备句柄, 整数型, , , 
.局部变量 oldbitmap, 整数型, , , 
.局部变量 尺寸, 尺寸_, , , 
.局部变量 bmps, 位图结构_, , , 

赋值 (图片内存设备句柄, 创建内存场景_ (hdc))
取对象属性_ (图片.取句柄 (), 相乘 (7, 4), bmps)
赋值 (尺寸.宽度, bmps.位图宽度)
赋值 (尺寸.高度, bmps.位图高度)
.如果真 (是否为空 (画到宽度))
    赋值 (画到宽度, 尺寸.宽度)
.如果真结束
.如果真 (是否为空 (画到高度))
    赋值 (画到高度, 尺寸.高度)
.如果真结束
.如果真 (是否为空 (截取宽度))
    赋值 (截取宽度, 尺寸.宽度)
.如果真结束
.如果真 (是否为空 (截取高度))
    赋值 (截取高度, 尺寸.高度)
.如果真结束
.如果真 (等于 (图片内存设备句柄, 0))
    赋值 (错误信息, 相加 (错误信息, “创建用来存放的内存设备场景失败(CreateCompatibleDC()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
赋值 (oldbitmap, 选入设备场景_ (图片内存设备句柄, 图片.取句柄 ()))
.如果真 (等于 (oldbitmap, 0))
    赋值 (错误信息, 相加 (错误信息, “将位图选入用来存放的内存设备场景失败(SelectObject()返回值为0)请检查图片是否创建成功”))
    返回 (假)
.如果真结束
.如果真 (等于 (透明位图效果_ (mdc, 画到横坐标, 画到纵坐标, 画到宽度, 画到高度, 图片内存设备句柄, 截取横坐标, 截取纵坐标, 截取宽度, 截取高度, 透明色), 假))
    赋值 (错误信息, 相加 (错误信息, “将存放图片的内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
选入设备场景_ (图片内存设备句柄, oldbitmap)
删除设备场景_ (图片内存设备句柄)
返回 (真)

.子程序 刷新显示, 逻辑型, , 成功则真，失败则假。
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*

.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (复制场景位图_ (hdc, 0, 0, 相减 (窗口矩形.右边, 窗口矩形.左边), 相减 (窗口矩形.底边, 窗口矩形.顶边), mdc, offsetX, offsetY, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 变换_平移, 空白型, , 如果您的GDI_图形不是用 创建_*2 即第二种办法创建，则尽量不使用为好，详见 创建_*2 方法的备注
.参数 横向平移, 整数型, , 正为向右，反之
.参数 纵向平移, 整数型, , 正为向下，反之

赋值 (offsetX, 相减 (offsetX, 横向平移))
赋值 (offsetY, 相减 (offsetY, 纵向平移))

.子程序 变换_镜像, 空白型, , 即对称
.参数 变换范围, GDI_矩形2, , 
.参数 镜像类型, 整数型, , 详见常量表，镜像类型_*

.局部变量 result, 整数型, , , 

.如果 (等于 (镜像类型, 0))
    赋值 (result, 复制位图_ (mdc, 变换范围.左边, 变换范围.顶边, 变换范围.宽度, 负 (变换范围.高度), mdc, 变换范围.左边, 变换范围.顶边, 变换范围.宽度, 变换范围.高度, #光栅运算_复制))
.否则
    .如果 (等于 (镜像类型, 1))
        赋值 (result, 复制位图_ (mdc, 变换范围.左边, 变换范围.顶边, 负 (变换范围.宽度), 变换范围.高度, mdc, 变换范围.左边, 变换范围.顶边, 变换范围.宽度, 变换范围.高度, #光栅运算_复制))
    .否则
        赋值 (result, 复制位图_ (mdc, 变换范围.左边, 变换范围.顶边, 负 (变换范围.宽度), 负 (变换范围.高度), mdc, 变换范围.左边, 变换范围.顶边, 变换范围.宽度, 变换范围.高度, #光栅运算_复制))
    .如果结束
    
.如果结束
.如果真 (等于 (result, 0))
    赋值 (错误信息, 相加 (错误信息, “变换设备场景失败(StretchBlt()返回值为0)”))
.如果真结束


.子程序 刷新显示_局部, 逻辑型, , 成功则真，失败则假。
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*

.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (复制场景位图_ (hdc, 左边, 顶边, 宽度, 高度, mdc, offsetX, offsetY, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 刷新显示_透明混合_局部, 逻辑型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 透明度, 整数型, , 0-255

.局部变量 a, 字节集, , , 
.局部变量 af, 整数型, , , 

赋值 (a, 取空白字节集 (4))
赋值 (a [3], 透明度)
赋值 (af, 取字节集数据 (a, #整数型, ))
.如果真 (等于 (AlphaBlend (hdc, 左边, 顶边, 宽度, 高度, mdc, offsetX, offsetY, 宽度, 高度, af), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(AlphaBlend()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 复制, 逻辑型, , 成功则真，失败则假。
.参数 图形, GDI_GP_图形, , 
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*

.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (复制场景位图_ (mdc, 0, 0, 相减 (窗口矩形.右边, 窗口矩形.左边), 相减 (窗口矩形.底边, 窗口矩形.顶边), 图形.获取_内存设备句柄_MDC (), 0, 0, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 复制_透空, 逻辑型, , 成功则真，失败则假。
.参数 图形, GDI_GP_图形, , 
.参数 目标左边, 整数型, , 
.参数 目标顶边, 整数型, , 
.参数 目标宽度, 整数型, , 
.参数 目标高度, 整数型, , 
.参数 源左边, 整数型, , 
.参数 源顶边, 整数型, , 
.参数 源宽度, 整数型, , 
.参数 源高度, 整数型, , 
.参数 透明色, 整数型, , 

.如果真 (等于 (透明位图效果_ (mdc, 目标左边, 目标顶边, 目标宽度, 目标高度, 图形.获取_内存设备句柄_MDC (), 源左边, 源顶边, 源宽度, 源高度, 透明色), 假))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(TransparentBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 复制_局部, 逻辑型, , 成功则真，失败则假。
.参数 图形, GDI_GP_图形, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 光栅运算, 整数型, 可空, 详见常量表，光栅运算_*

.如果真 (是否为空 (光栅运算))
    赋值 (光栅运算, #光栅运算_复制)
.如果真结束
.如果真 (等于 (复制场景位图_ (mdc, 左边, 顶边, 宽度, 高度, 图形.获取_内存设备句柄_MDC (), 0, 0, 光栅运算), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(BitBlt()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 灰度化, 空白型, , 
.局部变量 bBytes, 字节集, , , 
.局部变量 h, 小数型, , , 
.局部变量 s, 小数型, , , 
.局部变量 l, 小数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 Bitmap, 位图结构_, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 n, 字节集, , , 
.局部变量 bytGray, 小数型, , , 

取对象属性_ (bmp, 相加 (相乘 (5, 4), 2, 2), Bitmap)
赋值 (BitmapInfo.biSize, 44)
赋值 (BitmapInfo.biWidth, Bitmap.位图宽度)
赋值 (BitmapInfo.biHeight, Bitmap.位图高度)
赋值 (BitmapInfo.biPlanes, 1)
赋值 (BitmapInfo.biBitCount, Bitmap.bmBitsPixel)
赋值 (bBytes, 取像素数据 ())
.计次循环首 (相除 (取字节集长度 (bBytes), 4), i)
    赋值 (bytGray, 整除 (相加 (bBytes [相减 (相乘 (i, 4), 3)], bBytes [相减 (相乘 (i, 4), 2)], bBytes [相减 (相乘 (i, 4), 1)]), 3))
    赋值 (bBytes [相减 (相乘 (i, 4), 3)], bytGray)
    赋值 (bBytes [相减 (相乘 (i, 4), 2)], bytGray)
    赋值 (bBytes [相减 (相乘 (i, 4), 1)], bytGray)
.计次循环尾 ()
赋值 (n, getdata2 (bBytes))
SetDIBits (mdc, bmp, 0, Bitmap.位图高度, bBytes, 相加 (lstrcpyn (n, n, 0), 14), 0)

.子程序 色相处理, 空白型, , 
.参数 色相偏差, 小数型, , 正则加，负则减。请想象有一个色盘，正数为顺时针旋转色盘，负数反之
.参数 饱和度偏差, 小数型, , 正则加，负则减
.参数 亮度偏差, 小数型, , 正则加，负则减

.局部变量 Data, 字节集, , , 
.局部变量 h, 小数型, , , 
.局部变量 s, 小数型, , , 
.局部变量 l, 小数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 Bitmap, 位图结构_, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 n, 字节集, , , 
.局部变量 cr_rgb, GDI_RGB, , , 
.局部变量 cr_hsl, GDI_HSL, , , 

取对象属性_ (bmp, 相加 (相乘 (5, 4), 2, 2), Bitmap)
赋值 (BitmapInfo.biSize, 44)
赋值 (BitmapInfo.biWidth, Bitmap.位图宽度)
赋值 (BitmapInfo.biHeight, Bitmap.位图高度)
赋值 (BitmapInfo.biPlanes, 1)
赋值 (BitmapInfo.biBitCount, Bitmap.bmBitsPixel)
赋值 (Data, 取像素数据 ())
.计次循环首 (相除 (取字节集长度 (Data), 4), i)
    赋值 (cr_rgb.R, Data [相减 (相乘 (i, 4), 3)])
    赋值 (cr_rgb.G, Data [相减 (相乘 (i, 4), 2)])
    赋值 (cr_rgb.B, Data [相减 (相乘 (i, 4), 1)])
    赋值 (cr_hsl, RGB2HSL (cr_rgb))
    赋值 (cr_hsl.H, 相加 (cr_hsl.H, 色相偏差))
    赋值 (cr_hsl.S, 相加 (cr_hsl.S, 饱和度偏差))
    赋值 (cr_hsl.L, 相加 (cr_hsl.L, 亮度偏差))
    赋值 (cr_rgb, HSI2RGB (cr_hsl))
    赋值 (Data [相减 (相乘 (i, 4), 3)], cr_rgb.R)
    赋值 (Data [相减 (相乘 (i, 4), 2)], cr_rgb.G)
    赋值 (Data [相减 (相乘 (i, 4), 1)], cr_rgb.B)
.计次循环尾 ()
赋值 (n, getdata2 (Data))
SetDIBits (mdc, bmp, 0, Bitmap.位图高度, Data, 相加 (lstrcpyn (n, n, 0), 14), 0)

.子程序 置像素数据, 整数型, , 
.参数 像素数据, 字节集, , 每三个字节为一组，第一个为红色值，第二个为绿色值，第三个为蓝色值。每一组如是。

.局部变量 Data, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 Bitmap, 位图结构_, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 n, 字节集, , , 
.局部变量 cr_rgb, GDI_RGB, , , 

取对象属性_ (bmp, 相加 (相乘 (5, 4), 2, 2), Bitmap)
赋值 (BitmapInfo.biSize, 44)
赋值 (BitmapInfo.biWidth, Bitmap.位图宽度)
赋值 (BitmapInfo.biHeight, Bitmap.位图高度)
赋值 (BitmapInfo.biPlanes, 1)
赋值 (BitmapInfo.biBitCount, Bitmap.bmBitsPixel)
赋值 (Data, 像素数据)
赋值 (n, getdata2 (Data))
返回 (SetDIBits (mdc, bmp, 0, Bitmap.位图高度, Data, 相加 (lstrcpyn (n, n, 0), 14), 0))

.子程序 取像素数据, 字节集, , 
.局部变量 bits, 字节集, , , 

赋值 (bits, 取图形数据 ())
返回 (取字节集右边 (bits, 相减 (取字节集长度 (bits), 54)))

.子程序 保存到文件, 空白型, , 
.参数 文件路径, 文本型, , 

写到文件 (文件路径, 取图形数据 ())

.子程序 GetPixelAddress, 整数型, 公开, 
.局部变量 res, 字节型, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 Bitmap, 位图结构_, , , 

取对象属性_ (bmp, 26, Bitmap)
 ' BitmapInfo.biSize ＝ 44
 ' BitmapInfo.biCompression ＝ 0
 ' GetDIBits (mdc, bmp, 0, 0, 0, BitmapInfo, 0)
 ' GetDIBits3 (mdc, bmp, 0, Bitmap.位图高度, res, BitmapInfo, 0)
返回 (取变量数据地址 (Bitmap.bmBits))

.子程序 取图形数据, 字节集, 公开, 根据位图句柄取回位图数据。
.局部变量 hBitmap, 整数型, , , 
.局部变量 Bitmap, 位图结构_, , , 
.局部变量 Resource, 字节集, , , 
.局部变量 bfh, 字节集, , , 
.局部变量 hMemDC, 整数型, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 bi, 字节集, , , 
.局部变量 BitmapFileHeader, BITMAPFILEHEADER, , , 

赋值 (hBitmap, bmp)
取对象属性_ (hBitmap, 26, Bitmap)
赋值 (BitmapInfo.biSize, 44)
GetDIBits (mdc, hBitmap, 0, 0, 0, BitmapInfo, 0)
赋值 (Resource, 取空白字节集 (BitmapInfo.biSizeImage))
赋值 (BitmapInfo.biCompression, 0)
GetDIBits2 (mdc, hBitmap, 0, Bitmap.位图高度, Resource, BitmapInfo, 0)
 ' 构造位图信息
赋值 (bi, 取空白字节集 (BitmapInfo.biSize))
RtlMoveMemory3 (bi, BitmapInfo, BitmapInfo.biSize)
 ' 构造位图文件头
赋值 (BitmapFileHeader.bfType, 19778)
赋值 (BitmapFileHeader.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), BitmapInfo.biSize))
赋值 (BitmapFileHeader.bfSize, 相加 (BitmapFileHeader.bfOffBits, BitmapInfo.biSizeImage))
赋值 (BitmapFileHeader.bfReserved1, 0)
赋值 (BitmapFileHeader.bfReserved2, 0)
赋值 (bfh, 取空白字节集 (14))
RtlMoveMemory2 (bfh, BitmapFileHeader, 14)
返回 (相加 (bfh, bi, Resource))

.子程序 getdata2, 字节集, , 根据位图句柄取回位图数据。
.参数 data, 字节集, , 

.局部变量 hBitmap, 整数型, , , 
.局部变量 Bitmap, 位图结构_, , , 
.局部变量 Resource, 字节集, , , 
.局部变量 bfh, 字节集, , , 
.局部变量 hMemDC, 整数型, , , 
.局部变量 BitmapInfo, 位图信息_, , , 
.局部变量 bi, 字节集, , , 
.局部变量 BitmapFileHeader, BITMAPFILEHEADER, , , 

赋值 (hBitmap, bmp)
取对象属性_ (hBitmap, 26, Bitmap)
赋值 (BitmapInfo.biSize, 44)
GetDIBits (mdc, hBitmap, 0, 0, 0, BitmapInfo, 0)
赋值 (Resource, 取空白字节集 (BitmapInfo.biSizeImage))
赋值 (BitmapInfo.biCompression, 0)
GetDIBits2 (mdc, hBitmap, 0, Bitmap.位图高度, Resource, BitmapInfo, 0)
赋值 (Resource, data)
 ' 构造位图信息
赋值 (bi, 取空白字节集 (BitmapInfo.biSize))
RtlMoveMemory3 (bi, BitmapInfo, BitmapInfo.biSize)
 ' 构造位图文件头
赋值 (BitmapFileHeader.bfType, 19778)
赋值 (BitmapFileHeader.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), BitmapInfo.biSize))
赋值 (BitmapFileHeader.bfSize, 相加 (BitmapFileHeader.bfOffBits, BitmapInfo.biSizeImage))
赋值 (BitmapFileHeader.bfReserved1, 0)
赋值 (BitmapFileHeader.bfReserved2, 0)
赋值 (bfh, 取空白字节集 (14))
RtlMoveMemory2 (bfh, BitmapFileHeader, 14)
返回 (相加 (bfh, bi, Resource))

.子程序 复制_透明混合_局部, 逻辑型, , 
.参数 图形, GDI_GP_图形, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 透明度, 整数型, , 0-255

.局部变量 a, 字节集, , , 
.局部变量 af, 整数型, , , 

赋值 (a, 取空白字节集 (4))
赋值 (a [3], 透明度)
赋值 (af, 取字节集数据 (a, #整数型, ))
.如果真 (等于 (AlphaBlend (mdc, 左边, 顶边, 宽度, 高度, 图形.获取_内存设备句柄_MDC (), 0, 0, 宽度, 高度, af), 0))
    赋值 (错误信息, 相加 (错误信息, “将内存设备场景内容复制到窗口设备场景失败(AlphaBlend()返回值为0)请检查图形是否创建成功”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 获取_窗口句柄, 整数型, , 
返回 (hwnd)

.子程序 获取_设备句柄_HDC, 整数型, , 
返回 (hdc)

.子程序 获取_内存设备句柄_MDC, 整数型, , 
返回 (mdc)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 销毁, 逻辑型, , 提供本方法的目的是为了可以在不用时候方便清理，如想再用可以再次创建。每次创建都会销毁上一次的本对象，然而不调用本方法的话，则必须等到程序结束，才能自行清理掉一直保留的一个本对象，因此，若确实不再用之时可调用本方法，节省内存使用。
选入设备场景_ (mdc, obmp)
删除对象_ (bmp)
释放设备场景_ (hwnd, mdc)
删除设备场景_ (hdc)
.如果真 (等于 (m_Graphics, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteGraphics (m_Graphics))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 GP取混合模式, 整数型, , GdipGetCompositingMode。“混合模式_”开头常量。
.局部变量 局部_混合模式, 整数型, , , 

赋值 (全局_返回码, GdipGetCompositingMode (m_Graphics, 局部_混合模式))
返回 (局部_混合模式)


.子程序 GP置混合模式, 逻辑型, , GdipSetCompositingMode
.参数 参数_混合模式, 整数型, , “混合模式_”开头常量。

赋值 (全局_返回码, GdipSetCompositingMode (m_Graphics, 参数_混合模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP取渲染源点, 逻辑型, , GdipGetRenderingOrigin
.参数 参数_x, 整数型, 参考, 只能提供变量，装载数据
.参数 参数_y, 整数型, 参考, 只能提供变量，装载数据

赋值 (全局_返回码, GdipGetRenderingOrigin (m_Graphics, 参数_x, 参数_y))
返回 (等于 (全局_返回码, 0))

.子程序 GP置渲染源点, 逻辑型, , GdipSetRenderingOrigin
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

赋值 (全局_返回码, GdipSetRenderingOrigin (m_Graphics, 参数_x, 参数_y))
返回 (等于 (全局_返回码, 0))

.子程序 GP取混合品质, 整数型, , GdipGetCompositingQuality。“混合品质_”开头常量。
.局部变量 局部_混合质量, 整数型, , , 

赋值 (全局_返回码, GdipGetCompositingQuality (m_Graphics, 局部_混合质量))
返回 (局部_混合质量)


.子程序 GP置混合品质, 逻辑型, , GdipSetCompositingQuality
.参数 参数_混合模式, 整数型, , “混合品质_”开头常量。

赋值 (全局_返回码, GdipSetCompositingQuality (m_Graphics, 参数_混合模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置平滑模式, 逻辑型, , GdipSetSmoothingMode
.参数 参数_呈现模式, 整数型, , “平滑模式_”开头常量。

赋值 (全局_返回码, GdipSetSmoothingMode (m_Graphics, 参数_呈现模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP取平滑模式, 整数型, , GdipGetSmoothingMode。“平滑模式_”开头常量。
.局部变量 局部_呈现模式, 整数型, , , 

赋值 (全局_返回码, GdipGetSmoothingMode (m_Graphics, 局部_呈现模式))
返回 (局部_呈现模式)

.子程序 GP置文本渲染模式, 逻辑型, , GdipSetTextRenderingHint
.参数 参数_文本呈现模式, 整数型, , “文本渲染模式_”开头常量。

赋值 (全局_返回码, GdipSetTextRenderingHint (m_Graphics, 参数_文本呈现模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP取文本渲染模式, 整数型, , GdipGetTextRenderingHint。“文本渲染模式_”开头常量。
.局部变量 局部_文本呈现模式, 整数型, , , 

赋值 (全局_返回码, GdipGetTextRenderingHint (m_Graphics, 局部_文本呈现模式))
返回 (局部_文本呈现模式)


.子程序 GP置算法模式, 逻辑型, , GdipSetInterpolationMode。设置在缩放或旋转图像时使用的算法
.参数 参数_算法模式, 整数型, , “算法模式_”开头常量。

赋值 (全局_返回码, GdipSetInterpolationMode (m_Graphics, 参数_算法模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP取算法模式, 整数型, , GdipGetInterpolationMode。“算法模式_”开头常量。
.局部变量 局部_算法模式, 整数型, , , 

赋值 (全局_返回码, GdipGetInterpolationMode (m_Graphics, 局部_算法模式))
返回 (局部_算法模式)

.子程序 GP置像素偏移模式, 逻辑型, , GdipSetPixelOffsetMode。设置在缩放或旋转图像时使用的算法
.参数 参数_像素偏移模式, 整数型, , “像素偏移模式_”开头常量。

赋值 (全局_返回码, GdipSetPixelOffsetMode (m_Graphics, 参数_像素偏移模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP取像素偏移模式, 整数型, , GdipGetTextRenderingHint。“像素偏移模式_”开头常量。
.局部变量 局部_像素偏移模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPixelOffsetMode (m_Graphics, 局部_像素偏移模式))
返回 (局部_像素偏移模式)

.子程序 GP变形置矩阵, 逻辑型, , GdipSetWorldTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetWorldTransform (m_Graphics, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP变形取矩阵, 逻辑型, , GdipGetWorldTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetWorldTransform (m_Graphics, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 GP变形重置, 逻辑型, , GdipResetWorldTransform
赋值 (全局_返回码, GdipResetWorldTransform (m_Graphics))
返回 (等于 (全局_返回码, 0))

.子程序 GP变形相乘, 逻辑型, , GdipMultiplyWorldTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyWorldTransform (m_Graphics, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 GP变形平移, 逻辑型, , GdipTranslateWorldTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateWorldTransform (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 GP变形缩放, 逻辑型, , GdipScaleWorldTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleWorldTransform (m_Graphics, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 GP变形旋转, 逻辑型, , GdipRotateWorldTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateWorldTransform (m_Graphics, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 GP置页单位, 逻辑型, , GdipSetPageUnit。设置当前页的变形单位。
.参数 参数_单位, 整数型, , “单位_”开头常量。

赋值 (全局_返回码, GdipSetPageUnit (m_Graphics, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 GP取页单位, 整数型, , GdipGetPageUnit。“单位_”开头常量。
.局部变量 局部_单位, 整数型, , , 

赋值 (全局_返回码, GdipGetPageUnit (m_Graphics, 局部_单位))
返回 (局部_单位)


.子程序 GP置页比例, 逻辑型, , GdipSetPageScale
.参数 参数_比例, 小数型, , 

赋值 (全局_返回码, GdipSetPageScale (m_Graphics, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 GP取页比例, 小数型, , GdipGetPageUnit。
.局部变量 局部_比例, 小数型, , , 

赋值 (全局_返回码, GdipGetPageScale (m_Graphics, 局部_比例))
返回 (局部_比例)

.子程序 GP取水平分辨率, 小数型, , GdipGetDpiX
.局部变量 局部_DPIX, 小数型, , , 

赋值 (全局_返回码, GdipGetDpiX (m_Graphics, 局部_DPIX))
返回 (局部_DPIX)

.子程序 GP取垂直分辨率, 小数型, , GdipGetDpiY
.局部变量 局部_DPIY, 小数型, , , 

赋值 (全局_返回码, GdipGetDpiY (m_Graphics, 局部_DPIY))
返回 (局部_DPIY)

.子程序 GP转换坐标空间, 逻辑型, , GdipTransformPoints
.参数 参数_目标坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_源坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_坐标组, GP_坐标F, 参考 数组, 

赋值 (全局_返回码, GdipTransformPoints (m_Graphics, 参数_目标坐标空间, 参数_源坐标空间, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP转换坐标空间I, 逻辑型, , GdipTransformPoints
.参数 参数_目标坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_源坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_坐标组, GP_坐标L, 参考 数组, 

赋值 (全局_返回码, GdipTransformPointsI (m_Graphics, 参数_目标坐标空间, 参数_源坐标空间, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP取最近颜色, 整数型, , GdipGetNearestColor。返回最近的ARGB颜色。
.参数 参数_参考颜色, 整数型, , 

赋值 (全局_返回码, GdipGetNearestColor (m_Graphics, 参数_参考颜色))
返回 (参数_参考颜色)


.子程序 GP画直线, 逻辑型, , GdipDrawLine
.参数 参数_画笔, GP画笔, , 
.参数 参数_起始x, 小数型, , 
.参数 参数_起始y, 小数型, , 
.参数 参数_结束x, 小数型, , 
.参数 参数_结束y, 小数型, , 

赋值 (全局_返回码, GdipDrawLine (m_Graphics, 参数_画笔.取指针 (), 参数_起始x, 参数_起始y, 参数_结束x, 参数_结束y))
返回 (等于 (全局_返回码, 0))


.子程序 GP画直线I, 逻辑型, , GdipDrawLineI
.参数 参数_画笔, GP画笔, , 
.参数 参数_起始x, 整数型, , 
.参数 参数_起始y, 整数型, , 
.参数 参数_结束x, 整数型, , 
.参数 参数_结束y, 整数型, , 

赋值 (全局_返回码, GdipDrawLineI (m_Graphics, 参数_画笔.取指针 (), 参数_起始x, 参数_起始y, 参数_结束x, 参数_结束y))
返回 (等于 (全局_返回码, 0))

.子程序 GP画直线组, 逻辑型, , GdipDrawLines
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipDrawLines (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画直线组I, 逻辑型, , GdipDrawLinesI
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipDrawLinesI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP画圆弧, 逻辑型, , GdipDrawArc。以顺时针方向画一个圆弧
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawArc (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 GP画圆弧I, 逻辑型, , GdipDrawArcI。以顺时针方向画一个圆弧
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawArcI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画贝塞尔曲线, 逻辑型, , GdipDrawBezier。
.参数 参数_画笔, GP画笔, , 
.参数 参数_x1, 小数型, , 
.参数 参数_y1, 小数型, , 
.参数 参数_x2, 小数型, , 
.参数 参数_y2, 小数型, , 
.参数 参数_x3, 小数型, , 
.参数 参数_y3, 小数型, , 
.参数 参数_x4, 小数型, , 
.参数 参数_y4, 小数型, , 

赋值 (全局_返回码, GdipDrawBezier (m_Graphics, 参数_画笔.取指针 (), 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))


.子程序 GP画贝塞尔曲线I, 逻辑型, , GdipDrawBezierI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_x1, 整数型, , 
.参数 参数_y1, 整数型, , 
.参数 参数_x2, 整数型, , 
.参数 参数_y2, 整数型, , 
.参数 参数_x3, 整数型, , 
.参数 参数_y3, 整数型, , 
.参数 参数_x4, 整数型, , 
.参数 参数_y4, 整数型, , 

赋值 (全局_返回码, GdipDrawBezierI (m_Graphics, 参数_画笔.取指针 (), 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))

.子程序 GP画贝塞尔曲线组, 逻辑型, , GdipDrawBeziers。“参数_坐标组”的成员数必须4个以上。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipDrawBeziers (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画贝塞尔曲线组I, 逻辑型, , GdipDrawBeziersI。“参数_坐标组”的成员数必须4个以上。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipDrawBeziersI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP画矩形, 逻辑型, , GdipDrawRectangle
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipDrawRectangle (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画矩形I, 逻辑型, , GdipDrawRectangleI
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipDrawRectangleI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画矩形组, 逻辑型, , GdipDrawRectangles
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩形组, GP_矩形F, 数组, 

赋值 (全局_返回码, GdipDrawRectangles (m_Graphics, 参数_画笔.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP画矩形组I, 逻辑型, , GdipDrawRectanglesI
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩形组, GP_矩形L, 数组, 

赋值 (全局_返回码, GdipDrawRectanglesI (m_Graphics, 参数_画笔.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP画椭圆, 逻辑型, , GdipDrawEllipse。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipDrawEllipse (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 GP画椭圆I, 逻辑型, , GdipDrawEllipseI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipDrawEllipseI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画饼, 逻辑型, , GdipDrawPie。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawPie (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画饼I, 逻辑型, , GdipDrawPieI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawPieI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 GP画多边形, 逻辑型, , GdipDrawPolygon
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipDrawPolygon (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画多边形I, 逻辑型, , GdipDrawPolygonI
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipDrawPolygonI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画路径, 逻辑型, , GdipDrawPath
.参数 参数_画笔, GP画笔, , 
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipDrawPath (m_Graphics, 参数_画笔.取指针 (), 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线, 逻辑型, , GdipDrawCurve。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipDrawCurve (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线I, 逻辑型, , GdipDrawCurveI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipDrawCurveI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线2, 逻辑型, , GdipDrawCurve2。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawCurve2 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线2I, 逻辑型, , GdipDrawCurve2I。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawCurve2I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线3, 逻辑型, , GdipDrawCurve3。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipDrawCurve3 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 GP画曲线3I, 逻辑型, , GdipDrawCurve3I。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipDrawCurve3I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 GP画闭合曲线, 逻辑型, , GdipDrawClosedCurve。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipDrawClosedCurve (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画闭合曲线I, 逻辑型, , GdipDrawClosedCurveI。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipDrawClosedCurveI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP画闭合曲线2, 逻辑型, , GdipDrawClosedCurve2。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawClosedCurve2 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 GP画闭合曲线2I, 逻辑型, , GdipDrawClosedCurve2I。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawClosedCurve2I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 GP清除, 逻辑型, , GdipGraphicsClear。清除整个绘图面，并以指定色填充。
.参数 参数_ARGB颜色, 整数型, 可空, 默认为-1。

.如果真 (是否为空 (参数_ARGB颜色))
    赋值 (参数_ARGB颜色, -1)
.如果真结束
赋值 (全局_返回码, GdipGraphicsClear (m_Graphics, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充矩形, 逻辑型, , GdipFillRectangle
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipFillRectangle (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充矩形2, 逻辑型, , GdipFillRectangle
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形, GP_矩形F, , 

赋值 (全局_返回码, GdipFillRectangle (m_Graphics, 参数_画刷.取指针 (), 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充矩形I, 逻辑型, , GdipFillRectangleI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipFillRectangleI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充矩形组, 逻辑型, , GdipFillRectangles
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形组, GP_矩形F, 数组, 

赋值 (全局_返回码, GdipFillRectangles (m_Graphics, 参数_画刷.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充矩形组I, 逻辑型, , GdipFillRectanglesI
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形组, GP_矩形L, 数组, 

赋值 (全局_返回码, GdipFillRectanglesI (m_Graphics, 参数_画刷.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充多边形, 逻辑型, , GdipFillPolygon
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillPolygon (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_填充模式))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充多边形I, 逻辑型, , GdipFillPolygonI
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillPolygonI (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充椭圆, 逻辑型, , GdipFillEllipse
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipFillEllipse (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充椭圆I, 逻辑型, , GdipFillEllipseI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipFillEllipseI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充饼, 逻辑型, , GdipFillPie
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipFillPie (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充饼I, 逻辑型, , GdipFillPieI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipFillPieI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充路径, 逻辑型, , GdipFillPath
.参数 参数_画刷, GP画刷, , 
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipFillPath (m_Graphics, 参数_画刷.取指针 (), 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充闭合曲线, 逻辑型, , GdipFillClosedCurve
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipFillClosedCurve (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充闭合曲线2, 逻辑型, , GdipFillClosedCurve2
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_张力, 小数型, , 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillClosedCurve2 (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充闭合曲线I, 逻辑型, , GdipFillClosedCurveI
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipFillClosedCurveI (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 GP填充闭合曲线2I, 逻辑型, , GdipFillClosedCurve2I
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_张力, 小数型, , 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillClosedCurve2I (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP填充区域, 逻辑型, , GdipFillRegion
.参数 参数_画刷, GP画刷, , 
.参数 参数_区域, GP区域, , 

赋值 (全局_返回码, GdipFillRegion (m_Graphics, 参数_画刷.取指针 (), 参数_区域.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP画文本, 逻辑型, , GdipDrawString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形, GP_矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_宽字符, 字节集, , , 

赋值 (局部_宽字符, A2W (参数_文本))
赋值 (全局_返回码, GdipDrawString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_矩形, 参数_文本格式.取指针 (), 参数_画刷.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP测量文本矩形, 逻辑型, , GdipMeasureString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_参考矩形, GP_矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 
.参数 参数_测量矩形, GP_矩形F, 参考, 返回测量“参数_文本”所需要的矩形。

.局部变量 局部_宽字符, 字节集, , , 

赋值 (局部_宽字符, A2W (参数_文本))
赋值 (全局_返回码, GdipMeasureString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_参考矩形, 参数_文本格式.取指针 (), 参数_测量矩形, 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 GP测量文本区域, 逻辑型, , GdipMeasureCharacterRanges
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_参考矩形, GP_矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 
.参数 参数_区域数, 整数型, , 
.参数 参数_区域集, GP区域, 参考 数组, 返回区域数组。

.局部变量 局部_宽字符, 字节集, , , 
.局部变量 局部_区域集指针, 整数型, , "0", 
.局部变量 i, 整数型, , , 

赋值 (局部_宽字符, A2W (参数_文本))
重定义数组 (参数_区域集, 假, 参数_区域数)
重定义数组 (局部_区域集指针, 假, 参数_区域数)
赋值 (全局_返回码, GdipMeasureCharacterRanges (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_参考矩形, 参数_文本格式.取指针 (), 参数_区域数, 局部_区域集指针))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
.计次循环首 (参数_区域数, i)
    参数_区域集.置指针 ( [i], 局部_区域集指针 [i])
.计次循环尾 ()
返回 (真)

.子程序 GP画控制文本, 逻辑型, , GdipDrawDriverString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标集, GP_坐标F, 数组, 每一个坐标指定每个文本所在的位置。
.参数 参数_标志, 整数型, 可空, “控制文本标志_”开头常量组合。默认为：“控制文本标志_映射查找”
.参数 参数_矩阵, GP矩阵, 可空, 

.局部变量 局部_宽字符, 字节集, , , 
.局部变量 局部_指针, 整数型, , , 

赋值 (局部_宽字符, A2W (参数_文本))
.如果真 (是否为空 (参数_标志))
    赋值 (参数_标志, 1)
.如果真结束
赋值 (全局_返回码, GdipDrawDriverString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_画刷.取指针 (), 参数_坐标集, 参数_标志, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像, 逻辑型, , GdipDrawImage。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 

赋值 (全局_返回码, GdipDrawImage (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像I, 逻辑型, , GdipDrawImageI。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 

赋值 (全局_返回码, GdipDrawImageI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))

.子程序 GP画缓存位图, 逻辑型, , GdipDrawCachedBitmap
.参数 参数_缓存位图, GP缓存位图, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 

赋值 (全局_返回码, GdipDrawCachedBitmap (m_Graphics, 参数_缓存位图.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像缩放, 逻辑型, , GdipDrawImageRect。按照指定的矩形缩放图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipDrawImageRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像缩放I, 逻辑型, , GdipDrawImageRectI。按照指定的矩形缩放图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipDrawImageRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像变形, 逻辑型, , GdipDrawImagePoints，可以画出平行四边形的图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 小数型, , 
.参数 参数_左上角Y, 小数型, , 
.参数 参数_右上角X, 小数型, , 
.参数 参数_右上角Y, 小数型, , 
.参数 参数_左下角X, 小数型, , 
.参数 参数_左下角Y, 小数型, , 

.局部变量 局部_坐标组, GP_坐标F, , "3", 

赋值 (局部_坐标组 [1].横坐标, 参数_左上角X)
赋值 (局部_坐标组 [1].纵坐标, 参数_左上角Y)
赋值 (局部_坐标组 [2].横坐标, 参数_右上角X)
赋值 (局部_坐标组 [2].纵坐标, 参数_右上角Y)
赋值 (局部_坐标组 [3].横坐标, 参数_左下角Y)
赋值 (局部_坐标组 [3].纵坐标, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePoints (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像变形I, 逻辑型, , GdipDrawImagePointsI，可以画出平行四边形的图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 整数型, , 
.参数 参数_左上角Y, 整数型, , 
.参数 参数_右上角X, 整数型, , 
.参数 参数_右上角Y, 整数型, , 
.参数 参数_左下角X, 整数型, , 
.参数 参数_左下角Y, 整数型, , 

.局部变量 局部_坐标组, GP_坐标L, , "3", 

赋值 (局部_坐标组 [1].横坐标, 参数_左上角X)
赋值 (局部_坐标组 [1].纵坐标, 参数_左上角Y)
赋值 (局部_坐标组 [2].横坐标, 参数_右上角X)
赋值 (局部_坐标组 [2].纵坐标, 参数_右上角Y)
赋值 (局部_坐标组 [3].横坐标, 参数_左下角Y)
赋值 (局部_坐标组 [3].纵坐标, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsI (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像部分, 逻辑型, , GdipDrawImagePointRect。可以画出源图像的一部分或全部。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_单位))
    赋值 (参数_单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImagePointRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_单位))
返回 (等于 (全局_返回码, 0))


.子程序 GP画图像部分I, 逻辑型, , GdipDrawImagePointRectI。可以画出源图像的一部分或全部。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_单位))
    赋值 (参数_单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImagePointRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像缩放部分, 逻辑型, , GdipDrawImageRectRect。按照指定的矩形缩放图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像缩放部分I, 逻辑型, , GdipDrawImageRectRectI。按照指定的矩形缩放图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像变形部分, 逻辑型, , GdipDrawImagePointsRect。可以画出平行四边形的图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 小数型, , 
.参数 参数_左上角Y, 小数型, , 
.参数 参数_右上角X, 小数型, , 
.参数 参数_右上角Y, 小数型, , 
.参数 参数_左下角X, 小数型, , 
.参数 参数_左下角Y, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.局部变量 局部_坐标组, GP_坐标F, , "3", 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (局部_坐标组 [1].横坐标, 参数_左上角X)
赋值 (局部_坐标组 [1].纵坐标, 参数_左上角Y)
赋值 (局部_坐标组 [2].横坐标, 参数_右上角X)
赋值 (局部_坐标组 [2].纵坐标, 参数_右上角Y)
赋值 (局部_坐标组 [3].横坐标, 参数_左下角Y)
赋值 (局部_坐标组 [3].纵坐标, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsRect (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 GP画图像变形部分I, 逻辑型, , GdipDrawImagePointsRectI。可以画出平行四边形的图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 整数型, , 
.参数 参数_左上角Y, 整数型, , 
.参数 参数_右上角X, 整数型, , 
.参数 参数_右上角Y, 整数型, , 
.参数 参数_左下角X, 整数型, , 
.参数 参数_左下角Y, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.局部变量 局部_坐标组, GP_坐标L, , "3", 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (局部_坐标组 [1].横坐标, 参数_左上角X)
赋值 (局部_坐标组 [1].纵坐标, 参数_左上角Y)
赋值 (局部_坐标组 [2].横坐标, 参数_右上角X)
赋值 (局部_坐标组 [2].纵坐标, 参数_右上角Y)
赋值 (局部_坐标组 [3].横坐标, 参数_左下角Y)
赋值 (局部_坐标组 [3].纵坐标, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsRectI (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件目的坐标, 逻辑型, , GdipEnumerateMetafileDestPoint。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, GP_坐标F, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPoint (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件目的坐标I, 逻辑型, , GdipEnumerateMetafileDestPointI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, GP_坐标L, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPointI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP列举图元文件目的坐标集, 逻辑型, , GdipEnumerateMetafileDestPoints。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, GP_坐标F, 数组, 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPoints (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件目的坐标集I, 逻辑型, , GdipEnumerateMetafileDestPointsI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, GP_坐标L, 数组, 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPointsI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP列举图元文件目的矩形, 逻辑型, , GdipEnumerateMetafileDestRect。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, GP_矩形F, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestRect (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件目的矩形I, 逻辑型, , GdipEnumerateMetafileDestRectI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, GP_矩形L, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestRectI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP列举图元文件源矩形目的坐标, 逻辑型, , GdipEnumerateMetafileSrcRectDestPoint。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, GP_坐标F, , 
.参数 参数_源矩形, GP_矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPoint (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件源矩形目的坐标I, 逻辑型, , GdipEnumerateMetafileSrcRectDestPointI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, GP_坐标L, , 
.参数 参数_源矩形, GP_矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPointI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP列举图元文件源矩形目的坐标集, 逻辑型, , GdipEnumerateMetafileSrcRectDestPoints。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, GP_坐标F, 数组, 
.参数 参数_源矩形, GP_矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPoints (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件源矩形目的坐标集I, 逻辑型, , GdipEnumerateMetafileSrcRectDestPointsI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, GP_坐标L, 数组, 
.参数 参数_源矩形, GP_矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPointsI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 取数组成员数 (参数_目的坐标), 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 GP列举图元文件源矩形目的矩形, 逻辑型, , GdipEnumerateMetafileSrcRectDestRect。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, GP_矩形F, , 
.参数 参数_源矩形, GP_矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestRect (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP列举图元文件源矩形目的矩形I, 逻辑型, , GdipEnumerateMetafileSrcRectDestRectI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, GP_矩形L, , 
.参数 参数_源矩形, GP_矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestRectI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自图形, 逻辑型, , GdipSetClipGraphics
.参数 参数_源图形, GDI_GP_图形, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipGraphics (m_Graphics, 参数_源图形.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自路径, 逻辑型, , GdipSetClipPath
.参数 参数_路径, GP路径, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipPath (m_Graphics, 参数_路径.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自矩形, 逻辑型, , GdipSetClipRect
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRect (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自矩形I, 逻辑型, , GdipSetClipRectI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRectI (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自区域, 逻辑型, , GdipSetClipRegion
.参数 参数_区域, GP区域, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRegion (m_Graphics, 参数_区域.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 GP置剪辑区自区域句柄, 逻辑型, , GdipSetClipRegion
.参数 参数_区域句柄, 整数型, , hRgn
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipHrgn (m_Graphics, 参数_区域句柄, 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 GP重置剪辑区, 逻辑型, , GdipResetClip。重置为无限区域。
赋值 (全局_返回码, GdipResetClip (m_Graphics))
返回 (等于 (全局_返回码, 0))

.子程序 GP平移剪辑区, 逻辑型, , GdipTranslateClip
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 

赋值 (全局_返回码, GdipTranslateClip (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 GP平移剪辑区I, 逻辑型, , GdipTranslateClipI
.参数 参数_水平偏移量, 整数型, , 
.参数 参数_垂直偏移量, 整数型, , 

赋值 (全局_返回码, GdipTranslateClipI (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 GP取剪辑区, 逻辑型, , GdipGetClip
.参数 参数_区域, GP区域, 参考, 返回的区域。

.局部变量 局部_区域, 整数型, , , 

赋值 (全局_返回码, GdipGetClip (m_Graphics, 局部_区域))
参数_区域.置指针 (局部_区域)
返回 (等于 (全局_返回码, 0))


.子程序 GP取剪辑区边界, GP_矩形F, , GdipGetClipBounds
.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetClipBounds (m_Graphics, 局部_矩形))
返回 (局部_矩形)


.子程序 GP取剪辑区边界I, GP_矩形L, , GdipGetClipBoundsI
.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (全局_返回码, GdipGetClipBoundsI (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 GP取可见剪辑区边界, GP_矩形F, , GdipGetVisibleClipBounds
.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetVisibleClipBounds (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 GP取可见剪辑区边界I, GP_矩形L, , GdipGetVisibleClipBoundsI
.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (全局_返回码, GdipGetVisibleClipBoundsI (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 GP是否为空剪辑区, 逻辑型, , GdipIsClipEmpty
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsClipEmpty (m_Graphics, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 GP是否为空可见剪辑区, 逻辑型, , GdipIsVisibleClipEmpty
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleClipEmpty (m_Graphics, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 GP是否可见坐标, 逻辑型, , GdipIsVisiblePoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePoint (m_Graphics, 参数_x, 参数_y, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 GP是否可见坐标I, 逻辑型, , GdipIsVisiblePointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePointI (m_Graphics, 参数_x, 参数_y, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 GP是否可见矩形, 逻辑型, , GdipIsVisibleRect
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRect (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 GP是否可见矩形I, 逻辑型, , GdipIsVisibleRectI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRectI (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 GP保存, 整数型, , GdipSaveGraphics。返回状态
.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipSaveGraphics (m_Graphics, 局部_状态))
返回 (局部_状态)


.子程序 GP恢复, 逻辑型, , GdipRestoreGraphics
.参数 参数_状态, 整数型, , 由“保存()”返回的值。

赋值 (全局_返回码, GdipRestoreGraphics (m_Graphics, 参数_状态))
返回 (等于 (全局_返回码, 0))

.子程序 GP开始容器, 整数型, , GdipBeginContainer。返回状态。
.参数 参数_目标矩形, GP_矩形F, , 
.参数 参数_源矩形, GP_矩形F, , 
.参数 参数_单位, 整数型, 可空, 

.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainer (m_Graphics, 参数_目标矩形, 参数_源矩形, 参数_单位, 局部_状态))
返回 (局部_状态)


.子程序 GP开始容器I, 整数型, , GdipBeginContainerI。建一个新绘图状态，返回状态。
.参数 参数_目标矩形, GP_矩形L, , 
.参数 参数_源矩形, GP_矩形L, , 
.参数 参数_单位, 整数型, 可空, 

.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainerI (m_Graphics, 参数_目标矩形, 参数_源矩形, 参数_单位, 局部_状态))
返回 (局部_状态)

.子程序 GP开始容器2, 整数型, , GdipBeginContainer2。建一个新绘图状态，返回状态。
.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainer2 (m_Graphics, 局部_状态))
返回 (局部_状态)


.子程序 GP结束容器, 逻辑型, , GdipEndContainer。结束一个绘制状态。
.参数 参数_状态, 整数型, , 

赋值 (全局_返回码, GdipEndContainer (m_Graphics, 参数_状态))
返回 (等于 (全局_返回码, 0))


.子程序 GP添加图元文件注译, 逻辑型, , GdipComment
.参数 参数_数据, 字节集, , 

赋值 (全局_返回码, GdipComment (m_Graphics, 取字节集长度 (参数_数据), 参数_数据))
返回 (等于 (全局_返回码, 0))



.类模块 GDI_画笔, , , 

.程序集变量 hPen, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 销毁, 空白型, , 提供本方法的目的是为了可以在不用时候方便清理，如想再用可以再次创建。每次创建都会销毁上一次的本对象，然而不调用本方法的话，则必须等到程序结束，才能自行清理掉一直保留的一个本对象，因此，若确实不再用之时可调用本方法，节省内存使用。
删除对象_ (hPen)

.子程序 创建, 逻辑型, , 
.参数 样式, 整数型, , 详见常量表！画笔样式1_*
.参数 粗细, 整数型, , 
.参数 颜色值, 整数型, , 

删除对象_ (hPen)
赋值 (hPen, 创建画笔_ (样式, 粗细, 颜色值))
.如果真 (等于 (hPen, 0))
    赋值 (错误信息, “创建画笔失败（CreatePen()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自画刷属性, 逻辑型, , 
.参数 样式, 整数型, , 详见常量表！画笔样式*_*，如有多个，请进行位或操作。
.参数 画刷属性, GDI_画刷属性, , 

删除对象_ (hPen)
赋值 (hPen, 创建画笔扩展_ (样式, 1, 画刷属性, 0, 0))
.如果真 (等于 (hPen, 0))
    赋值 (错误信息, “创建画笔失败（ExtCreatePen()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 取句柄, 整数型, , 得到hPen，若无特殊需要，不用调用本方法，本方法是为本模块服务的
.如果真 (等于 (hPen, 0))
    赋值 (错误信息, “未创建画笔或曾创建画笔但创建失败！”)
.如果真结束
返回 (hPen)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
删除对象_ (hPen)

.类模块 GDI_刷子, , , 

.程序集变量 hBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
删除对象_ (hBrush)

.子程序 创建_纯色, 逻辑型, , 
.参数 颜色值, 整数型, , 

删除对象_ (hBrush)
赋值 (hBrush, 创建纯色刷子_ (颜色值))
.如果真 (等于 (hBrush, 0))
    赋值 (错误信息, “创建刷子失败（CreateSolidBrush()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_阴影, 逻辑型, , 
.参数 刷子花纹, 整数型, , 详见常量表 刷子花纹_*
.参数 颜色值, 整数型, , 

删除对象_ (hBrush)
赋值 (hBrush, 创建阴影刷子_ (刷子花纹, 颜色值))
.如果真 (等于 (hBrush, 0))
    赋值 (错误信息, “创建刷子失败（CreateHatchBrush()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自画刷属性, 逻辑型, , 
.参数 画刷属性, GDI_画刷属性, , 

删除对象_ (hBrush)
赋值 (hBrush, 创建刷子_ (画刷属性))
.如果真 (等于 (hBrush, 0))
    赋值 (错误信息, “创建刷子失败（CreateBrushIndirect()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自图片, 逻辑型, , 
.参数 图片, GDI_图片, , 

删除对象_ (hBrush)
使用位图创建刷子_ (图片.取句柄 ())
.如果真 (等于 (hBrush, 0))
    赋值 (错误信息, “创建刷子失败（CreatePatternBrush()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 取句柄, 整数型, , 得到hBrush，若无特殊需要，不用调用本方法，本方法是为本模块服务的
.如果真 (等于 (hBrush, 0))
    赋值 (错误信息, “未创建刷子或曾创建刷子但创建失败！”)
.如果真结束
返回 (hBrush)

.子程序 销毁, 空白型, , 提供本方法的目的是为了可以在不用时候方便清理，如想再用可以再次创建。每次创建都会销毁上一次的本对象，然而不调用本方法的话，则必须等到程序结束，才能自行清理掉一直保留的一个本对象，因此，若确实不再用之时可调用本方法，节省内存使用。
删除对象_ (hBrush)

.类模块 GDI_图片, , , 

.程序集变量 对象, 对象, , , 
.程序集变量 hBitmap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 销毁, 空白型, , 提供本方法的目的是为了可以在不用时候方便清理，如想再用可以再次创建。每次创建都会销毁上一次的本对象，然而不调用本方法的话，则必须等到程序结束，才能自行清理掉一直保留的一个本对象，因此，若确实不再用之时可调用本方法，节省内存使用。
删除对象_ (hBitmap)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
对象.清除 ()
删除对象_ (hBitmap)

.子程序 取图片宽度, 整数型, , 
.局部变量 bmps, 位图结构_, , , 

取对象属性_ (取句柄 (), 相乘 (7, 4), bmps)
返回 (bmps.位图宽度)

.子程序 取图片高度, 整数型, , 
.局部变量 bmps, 位图结构_, , , 

取对象属性_ (取句柄 (), 相乘 (7, 4), bmps)
返回 (bmps.位图高度)

.子程序 创建_自文件, 逻辑型, , 
.参数 文件名, 文本型, , 全路径
.参数 图片宽度, 整数型, , 0为默认大小
.参数 图片高度, 整数型, , 0为默认大小
.参数 图片类型, 整数型, , 详见常量表，图片_*
.参数 载入方式, 整数型, , 详见常量表，载入图片_*（可进行 位或 操作以同时利用多种方式！）

删除对象_ (hBitmap)
赋值 (hBitmap, 载入图象_ (0, 文件名, 图片类型, 图片宽度, 图片高度, 位或 (载入方式, 16)))
.如果真 (等于 (hBitmap, 0))
    赋值 (错误信息, “创建图片失败（LoadImageA()返回值为0）”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_自字节集, 逻辑型, , 
.参数 字节集, 字节集, , #XX，放在资源表里的，或读入文件（）返回值

删除对象_ (hBitmap)
对象.清除 ()
对象.创建图片对象 (字节集)
赋值 (hBitmap, 对象.读数值属性 (“Handle”, ))
.如果真 (等于 (hBitmap, 0))
    赋值 (错误信息, “创建图片失败”)
    返回 (假)
.如果真结束
返回 (真)

.子程序 取句柄, 整数型, , 得到hBitmap，若无特殊需要，不用调用本方法，本方法是为本模块服务的
.如果真 (等于 (hBitmap, 0))
    赋值 (错误信息, “未创建图片或曾创建图片但创建失败！”)
.如果真结束
返回 (hBitmap)

.类模块 GDI_区域, , , 

.程序集变量 hRgn, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 创建_矩形区域, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

删除对象_ (hRgn)
赋值 (hRgn, 创建矩形区域_ (横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建矩形区域失败(CreateRectRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_椭圆区域, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

删除对象_ (hRgn)
赋值 (hRgn, 创建内切椭圆_ (横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建椭圆区域失败(CreateEllipticRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_圆角矩形区域, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 圆角宽度, 整数型, , 
.参数 圆角高度, 整数型, , 

删除对象_ (hRgn)
赋值 (hRgn, 创建圆角矩形区域_ (横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度), 圆角宽度, 圆角高度))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建圆角矩形区域失败(CreateRoundRectRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_多边形区域, 逻辑型, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。各个点连成多边形
.参数 点数量, 整数型, 可空, 为空则自动计算数量
.参数 填充模式, 整数型, 可空, 详见常量表，填充模式_*

.如果真 (是否为空 (填充模式))
    赋值 (填充模式, 1)
.如果真结束
.如果真 (是否为空 (点数量))
    赋值 (点数量, 取数组成员数 (点集合))
.如果真结束
删除对象_ (hRgn)
赋值 (hRgn, 创建多点围成的区域_ (点集合, 点数量, 填充模式))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建多边形区域失败(CreatePolygonRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_多个多边形区域, 逻辑型, , 
.参数 点集合, GDI_点, 数组, 请提供点数据类型的数组。各个点连成多边形
.参数 每个多边形的点数量, 整数型, 数组, 比如说：第一个多边形由三个点组成，则该数组[1]赋值为3，第n个由m个点组成，则[n]=m
.参数 总点数量, 整数型, 可空, 为空则自动计算数量
.参数 填充模式, 整数型, 可空, 详见常量表，填充模式_*

.如果真 (是否为空 (填充模式))
    赋值 (填充模式, 1)
.如果真结束
.如果真 (是否为空 (总点数量))
    赋值 (总点数量, 取数组成员数 (点集合))
.如果真结束
删除对象_ (hRgn)
赋值 (hRgn, 创建多边形区域_ (点集合, 每个多边形的点数量, 总点数量, 填充模式))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建多个多边形区域失败(CreatePolyPolygonRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_合并区域, 整数型, , 将两个已创建GDI_区域用指定方式合并起来，获得最终区域即本区域。注意返回值：0：不能创建组合区域；1：区域为空；2：区域边界没有互相交叠；3：区域有互相交叠的边界
.参数 区域1, GDI_区域, , 
.参数 区域2, GDI_区域, , 
.参数 合并方式, 整数型, 可空, 详见常量表，合并方式_*，默认为 合并方式_并集 即将两区域结合起来组成当前区域

.局部变量 r, 整数型, , , 

.如果真 (等于 (hRgn, 0))
    创建_矩形区域 (0, 0, 0, 0)
.如果真结束
.如果真 (是否为空 (合并方式))
    赋值 (合并方式, #合并方式_并集)
.如果真结束
赋值 (r, 合并区域_ (hRgn, 区域1.取句柄 (), 区域2.取句柄 (), 合并方式))
返回 (r)

.子程序 创建_复制区域, 逻辑型, , 复制一个已创建的GDI_区域为当前区域
.参数 区域, GDI_区域, , 

删除对象_ (hRgn)
.如果真 (等于 (合并区域_ (hRgn, 区域.取句柄 (), 0, 5), 0))
    赋值 (错误信息, 相加 (错误信息, “复制区域失败(CombineRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 创建_窗口区域, 逻辑型, , 根据一个窗口创建当前区域
.参数 窗口句柄, 整数型, , 

删除对象_ (hRgn)
.如果真 (等于 (取得窗口区域_ (窗口句柄, hRgn), 0))
    赋值 (错误信息, 相加 (错误信息, “取窗口区域失败(GetWindowRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 是否相等于当前区域, 逻辑型, , 确定两个区域是否相等，假则不等，真则相等
.参数 另一区域, GDI_区域, , 

.如果真 (等于 (判断区域_ (hRgn, 另一区域.取句柄 ()), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 平移区域, 逻辑型, , 
.参数 横向平移, 整数型, , 
.参数 纵向平移, 整数型, , 

.如果真 (等于 (移动区域_ (hRgn, 横向平移, 纵向平移), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 某点是否在当前区域内, 逻辑型, , 真则是，假则否
.参数 点, GDI_点, , 

.如果真 (等于 (PtInRegion (hRgn, 点.横坐标, 点.纵坐标), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 某点是否在当前区域内2, 逻辑型, , 真则是，假则否
.参数 x, 整数型, , 
.参数 y, 整数型, , 

.如果真 (等于 (PtInRegion (hRgn, x, y), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 某矩形是否在当前区域内, 逻辑型, , 真则是，假则否
.参数 矩形, GDI_矩形, , 

.如果真 (等于 (判断矩形区域_ (hRgn, 矩形), 0))
    返回 (假)
.如果真结束
返回 (真)

.子程序 置窗口区域, 逻辑型, , 此方法妙哉，可以改变窗口外形，将窗口外形置为当前区域形状
.参数 窗口句柄, 整数型, , 欲操作的窗口句柄
.参数 是否立即重画窗口, 逻辑型, 可空, 默认为真

.如果真 (是否为空 (是否立即重画窗口))
    赋值 (是否立即重画窗口, 真)
.如果真结束
.如果真 (等于 (设置窗口区域_ (窗口句柄, hRgn, 是否立即重画窗口), 0))
    赋值 (错误信息, 相加 (错误信息, “设置窗口区域失败(SetWindowRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 取区域矩形, GDI_矩形, , 包含本区域的矩形范围
.局部变量 矩形范围, GDI_矩形, , , 

获取最小矩形_ (hRgn, 矩形范围)
返回 (矩形范围)

.子程序 取句柄, 整数型, , 得到hRgn，若无特殊需要，不用调用本方法，本方法是为本模块服务的
返回 (hRgn)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
删除对象_ (hRgn)

.子程序 销毁, 空白型, , 提供本方法的目的是为了可以在不用时候方便清理，如想再用可以再次创建。每次创建都会销毁上一次的本对象，然而不调用本方法的话，则必须等到程序结束，才能自行清理掉一直保留的一个本对象，因此，若确实不再用之时可调用本方法，节省内存使用。
删除对象_ (hRgn)

.类模块 GDI_自绘, , , 

.程序集变量 oWndProc, 整数型, , , 
.程序集变量 组件句柄, 整数型, , , 
.程序集变量 isPaint, 逻辑型, , , 
.程序集变量 ps, PAINTSTRUCT, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 还原, 整数型, , 
.局部变量 r, 整数型, , , 

赋值 (r, 到整数 (SetWindowLongA (组件句柄, #GWL_WNDPROC, oWndProc)))
赋值 (组件句柄, 0)
返回 (r)

.子程序 创建, 逻辑型, , 
.参数 组件的句柄, 整数型, , 组件.取窗口句柄（）获得的值
.参数 窗口消息回调, 子程序指针, 可空, 如果为空，则表明您只想用来改变组件外形，而非重绘。

赋值 (组件句柄, 组件的句柄)
赋值 (isPaint, 假)
.如果真 (等于 (是否为空 (窗口消息回调), 假))
    赋值 (isPaint, 真)
    赋值 (oWndProc, 设置窗口信息_ (组件句柄, -4, 到数值 (窗口消息回调)))
    .如果真 (等于 (oWndProc, 0))
        赋值 (错误信息, “设置窗口信息失败(SetWindowLongA()返回值为0)”)
        返回 (假)
    .如果真结束
    
.如果真结束
返回 (真)

.子程序 开始重绘, 空白型, , 请放在 如果（wmsg=15）中 即将开始绘制之前
BeginPaint (组件句柄, ps)

.子程序 结束重绘, 空白型, , 请放在 如果（wmsg=15）中 绘制完成之后，和 开始重绘 配对使用
EndPaint (组件句柄, ps)

.子程序 默认处理消息, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 wmsg, 整数型, , 
.参数 lparam, 整数型, , 
.参数 wparam, 整数型, , 

.如果真 (等于 (isPaint, 假))
    赋值 (错误信息, “您未提供 窗口消息回调 子程序指针！”)
    返回 (0)
.如果真结束
返回 (呼叫窗口函数地址_ (oWndProc, hwnd, wmsg, lparam, wparam))

.子程序 置外形_自区域, 逻辑型, , 
.参数 区域, GDI_区域, , 
.参数 是否立即重画窗口, 逻辑型, 可空, 默认为真

.如果真 (是否为空 (是否立即重画窗口))
    赋值 (是否立即重画窗口, 真)
.如果真结束
.如果真 (等于 (设置窗口区域_ (组件句柄, 区域.取句柄 (), 是否立即重画窗口), 0))
    赋值 (错误信息, 相加 (错误信息, “设置窗口区域失败(SetWindowRgn()返回值为0)”))
    返回 (假)
.如果真结束
返回 (真)

.子程序 置外形_椭圆, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 是否立即重画窗口, 逻辑型, 可空, 默认为真

.局部变量 hRgn, 整数型, , , 

赋值 (hRgn, 创建内切椭圆_ (横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度)))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建椭圆区域失败(CreateEllipticRgn()返回值为0)”))
    返回 (假)
.如果真结束
.如果真 (是否为空 (是否立即重画窗口))
    赋值 (是否立即重画窗口, 真)
.如果真结束
.如果真 (等于 (设置窗口区域_ (组件句柄, hRgn, 是否立即重画窗口), 0))
    赋值 (错误信息, 相加 (错误信息, “设置窗口区域失败(SetWindowRgn()返回值为0)”))
    删除对象_ (hRgn)
    返回 (假)
.如果真结束
删除对象_ (hRgn)
返回 (真)

.子程序 置外形_圆角矩形, 逻辑型, , 
.参数 横坐标, 整数型, , 
.参数 纵坐标, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 
.参数 圆角宽度, 整数型, , 
.参数 圆角高度, 整数型, , 
.参数 是否立即重画窗口, 逻辑型, 可空, 默认为真

.局部变量 hRgn, 整数型, , , 

赋值 (hRgn, 创建圆角矩形区域_ (横坐标, 纵坐标, 相加 (横坐标, 宽度), 相加 (纵坐标, 高度), 圆角宽度, 圆角高度))
.如果真 (等于 (hRgn, 0))
    赋值 (错误信息, 相加 (错误信息, “创建圆角矩形区域失败(CreateRoundRectRgn()返回值为0)”))
    返回 (假)
.如果真结束
.如果真 (是否为空 (是否立即重画窗口))
    赋值 (是否立即重画窗口, 真)
.如果真结束
.如果真 (等于 (设置窗口区域_ (组件句柄, hRgn, 是否立即重画窗口), 0))
    赋值 (错误信息, 相加 (错误信息, “设置窗口区域失败(SetWindowRgn()返回值为0)”))
    删除对象_ (hRgn)
    返回 (假)
.如果真结束
删除对象_ (hRgn)
返回 (真)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.类模块 GP图像, Gdiplus基类, , 

.程序集变量 m_Image, 整数型, , , 
.程序集变量 m_IStream, IStream, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Image, 参数_指针)
方法_子置指针 (m_Image)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, GdipDisposeImage。
.如果真 (等于 (m_Image, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDisposeImage (m_Image))
置指针 (0)
m_IStream.释放 ()
返回 (等于 (全局_返回码, 0))

.子程序 创建自文件, 逻辑型, 公开, GdipLoadImageFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用ICC文件调整颜色。

销毁 ()
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipLoadImageFromFileICM (A2W (参数_文件名), m_Image))
.否则
    赋值 (全局_返回码, GdipLoadImageFromFile (A2W (参数_文件名), m_Image))
.如果结束
置指针 (m_Image)
返回 (等于 (全局_返回码, 0))


.子程序 创建自字节集, 逻辑型, 公开, GdipLoadImageFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用ICC文件调整颜色。

销毁 ()
m_IStream.创建 (参数_字节集)
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipLoadImageFromStreamICM (m_IStream.取字节流指针 (), m_Image))
.否则
    赋值 (全局_返回码, GdipLoadImageFromStream (m_IStream.取字节流指针 (), m_Image))
.如果结束
置指针 (m_Image)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneImage
.参数 参数_图像, GP图像, 参考, 

.局部变量 局部_Image, 整数型, , , 

赋值 (全局_返回码, GdipCloneImage (m_Image, 局部_Image))
参数_图像.置指针 (局部_Image)
返回 (等于 (全局_返回码, 0))

.子程序 保存到文件, 逻辑型, 公开, GdipSaveImageToFile
.参数 参数_文件名, 文本型, , 
.参数 参数_图像格式, 文本型, 可空, “图像格式_”开头常量。
.参数 参数_编码器参数集, GP_编码器参数集, 可空, 

.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

.如果真 (是否为空 (参数_图像格式))
    赋值 (参数_图像格式, 取原始格式 ())
.如果真结束
赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
.如果真 (等于 (局部_CLSID, {  }))
    返回 (假)
.如果真结束
.如果 (是否为空 (参数_编码器参数集))
    赋值 (全局_返回码, GdipSaveImageToFile (m_Image, A2W (参数_文件名), 局部_CLSID, 0))
.否则
    赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
    .计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
        赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpy_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值))))
    .计次循环尾 ()
    赋值 (全局_返回码, GdipSaveImageToFile (m_Image, A2W (参数_文件名), 局部_CLSID, lstrcpy_字节集 (局部_字节集, 局部_字节集)))
.如果结束

返回 (等于 (全局_返回码, 0))

.子程序 保存到字节集, 字节集, 公开, GdipSaveImageToStream
.参数 参数_图像格式, 文本型, 可空, “图像格式_”开头常量
.参数 参数_编码器参数集, GP_编码器参数集, 可空, 

.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_IStream, IStream, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

.如果真 (是否为空 (参数_图像格式))
    赋值 (参数_图像格式, 取原始格式 ())
.如果真结束
赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
.如果真 (等于 (局部_CLSID, {  }))
    返回 ({  })
.如果真结束
局部_IStream.创建 ()
.如果 (是否为空 (参数_编码器参数集))
    赋值 (全局_返回码, GdipSaveImageToStream (m_Image, 局部_IStream.取字节流指针 (), 局部_CLSID, 0))
.否则
    赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
    .计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
        赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpy_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值))))
    .计次循环尾 ()
    赋值 (全局_返回码, GdipSaveImageToStream (m_Image, 局部_IStream.取字节流指针 (), 局部_CLSID, lstrcpy_字节集 (局部_字节集, 局部_字节集)))
.如果结束

返回 (局部_IStream.取出字节集 ())


.子程序 保存添加, 逻辑型, 公开, GdipSaveAdd
.参数 参数_编码器参数集, GP_编码器参数集, , 

.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
.计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
    赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpy_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值))))
.计次循环尾 ()
赋值 (全局_返回码, GdipSaveAdd (m_Image, lstrcpy_字节集 (局部_字节集, 局部_字节集)))
返回 (等于 (全局_返回码, 0))


.子程序 保存添加图像, 逻辑型, 公开, GdipSaveAddImage
.参数 参数_图像, GP图像, , 
.参数 参数_编码器参数集, GP_编码器参数集, , 

.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
.计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
    赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpy_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值))))
.计次循环尾 ()
赋值 (全局_返回码, GdipSaveAddImage (m_Image, 参数_图像.取指针 (), lstrcpy_字节集 (局部_字节集, 局部_字节集)))
返回 (等于 (全局_返回码, 0))

.子程序 取编码器参数列表, 逻辑型, 公开, GdipGetEncoderParameterList。
.参数 参数_图像格式, 文本型, , “图像格式_”开头常量。
.参数 参数_编码器, GP_编码器参数集, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_格式, 字节集, , , 
.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_值大小, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 局部_值指针, 整数型, , , 

赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
赋值 (全局_返回码, GdipGetEncoderParameterListSize (m_Image, 局部_CLSID, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetEncoderParameterList (m_Image, 局部_CLSID, 局部_size, 局部_字节集))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (参数_编码器.参数数量, 取字节集数据 (局部_字节集, #整数型, ))
重定义数组 (参数_编码器.编码器参数, 假, 参数_编码器.参数数量)
.计次循环首 (参数_编码器.参数数量, i)
    赋值 (参数_编码器.编码器参数 [i], 编码器Guid, GUID到文本 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 5), 16)))
    赋值 (参数_编码器.编码器参数 [i], 值成员数, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 21), 4), #整数型, ))
    赋值 (参数_编码器.编码器参数 [i], 值类型, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 25), 4), #整数型, ))
    .判断开始 (或者 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_字节型), 等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_未定义)))
        赋值 (局部_值大小, 参数_编码器.编码器参数 [i], 值成员数)
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_字符型))
        赋值 (局部_值大小, 参数_编码器.编码器参数 [i], 值成员数)
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_短整数型))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 2))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数型))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 4))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数对))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 8))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数范围))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 8))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数对范围))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 16))
    .默认
        
    .判断结束
    赋值 (局部_值指针, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 29), 4), #整数型, ))
    .如果真 (不等于 (局部_值指针, 0))
        赋值 (参数_编码器.编码器参数 [i], 值, 指针到字节集 (局部_值指针, 局部_值大小))
    .如果真结束
    
.计次循环尾 ()
返回 (等于 (全局_返回码, 0))

.子程序 取原始格式, 文本型, 公开, GdipGetImageRawFormat。返回“图像格式_”开头常量。
.局部变量 局部_CLSID, 字节集, , , 

赋值 (局部_CLSID, 取空白字节集 (16))
赋值 (全局_返回码, GdipGetImageRawFormat (m_Image, 局部_CLSID))
返回 (GUID到文本 (局部_CLSID))


.子程序 取边界矩形, GP_矩形F, 公开, GdipGetImageBounds。返回矩形范围
.参数 参数_单位, 整数型, 参考 可空, 提供整数型变量取返回值,指定该矩形的单位。“单位_”开头常量。

.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetImageBounds (m_Image, 局部_矩形, 参数_单位))
返回 (局部_矩形)


.子程序 取物理尺寸, GP_尺寸F, 公开, GdipGetImageDimension
.局部变量 局部_尺寸, GP_尺寸F, , , 

赋值 (全局_返回码, GdipGetImageDimension (m_Image, 局部_尺寸.宽度, 局部_尺寸.高度))
返回 (局部_尺寸)

.子程序 取类型, 整数型, 公开, GdipGetImageType。返回“图像类型_”开头常量。
.局部变量 局部_类型, 整数型, , , 

赋值 (全局_返回码, GdipGetImageType (m_Image, 局部_类型))
返回 (局部_类型)


.子程序 取宽度, 整数型, 公开, GdipGetImageWidth
.局部变量 局部_宽度, 整数型, , , 

赋值 (全局_返回码, GdipGetImageWidth (m_Image, 局部_宽度))
返回 (局部_宽度)


.子程序 取高度, 整数型, 公开, GdipGetImageHeight
.局部变量 局部_高度, 整数型, , , 

赋值 (全局_返回码, GdipGetImageHeight (m_Image, 局部_高度))
返回 (局部_高度)

.子程序 取水平分辨率, 小数型, 公开, GdipGetImageHorizontalResolution。以“像素/英寸”为单位
.局部变量 局部_分辨率, 小数型, , , 

赋值 (全局_返回码, GdipGetImageHorizontalResolution (m_Image, 局部_分辨率))
返回 (局部_分辨率)


.子程序 取垂直分辨率, 小数型, 公开, GdipGetImageVerticalResolution。以“像素/英寸”为单位
.局部变量 局部_分辨率, 小数型, , , 

赋值 (全局_返回码, GdipGetImageVerticalResolution (m_Image, 局部_分辨率))
返回 (局部_分辨率)

.子程序 取图像属性, 整数型, 公开, GdipGetImageFlags。返回“图像属性_”开头常量。
.局部变量 局部_属性, 整数型, , , 

赋值 (全局_返回码, GdipGetImageFlags (m_Image, 局部_属性))
返回 (局部_属性)


.子程序 取像素格式, 整数型, 公开, GdipGetImagePixelFormat。返回“像素格式_”开头常量。
.局部变量 局部_格式, 整数型, , , 

赋值 (全局_返回码, GdipGetImagePixelFormat (m_Image, 局部_格式))
返回 (局部_格式)

.子程序 取图像缩略图, 逻辑型, 公开, GdipGetImageThumbnail
.参数 参数_缩略图宽度, 整数型, , 
.参数 参数_缩略图高度, 整数型, , 
.参数 参数_缩略图, GP图像, 参考, 返回一个缩略图的Gdip图像。

.局部变量 局部_缩略图, 整数型, , , 

赋值 (全局_返回码, GdipGetImageThumbnail (m_Image, 参数_缩略图宽度, 参数_缩略图高度, 局部_缩略图, 0, 0))
参数_缩略图.置指针 (局部_缩略图)
返回 (等于 (全局_返回码, 0))

.子程序 取帧数, 整数型, 公开, GdipImageGetFrameCount
.参数 参数_帧维面, 文本型, , “帧维面_”开头常量。

.局部变量 局部_帧数, 整数型, , , 

赋值 (全局_返回码, GdipImageGetFrameCount (m_Image, 文本到GUDI (参数_帧维面), 局部_帧数))
返回 (局部_帧数)


.子程序 取帧维面列表, 逻辑型, 公开, GdipImageGetFrameDimensionsList
.参数 参数_帧惟面, 文本型, 数组, “帧维面_”开头常量。

.局部变量 局部_cont, 整数型, , , 
.局部变量 局部_GUID, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipImageGetFrameDimensionsCount (m_Image, 局部_cont))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_GUID, 取空白字节集 (相乘 (16, 局部_cont)))
重定义数组 (参数_帧惟面, 假, 局部_cont)
赋值 (全局_返回码, GdipImageGetFrameDimensionsList (m_Image, 局部_GUID, 局部_cont))
.计次循环首 (局部_cont, i)
    赋值 (参数_帧惟面 [i], GUID到文本 (取字节集中间 (局部_GUID, 相加 (相乘 (相减 (i, 1), 16), 1), 16)))
.计次循环尾 ()
返回 (等于 (全局_返回码, 0))


.子程序 置活动帧, 逻辑型, 公开, GdipImageSelectActiveFrame
.参数 参数_帧维面, 文本型, , “帧维面_”开头常量。
.参数 参数_索引, 整数型, , 

赋值 (全局_返回码, GdipImageSelectActiveFrame (m_Image, 文本到GUDI (参数_帧维面), 参数_索引))
返回 (等于 (全局_返回码, 0))


.子程序 取各帧延时, 逻辑型, 公开, 
.参数 参数_延时, 整数型, 数组, 

.局部变量 局部_属性, GP_属性项目, , , 

.如果真 (等于 (取属性项目 (#属性标签_帧延时, 局部_属性), 假))
    返回 (假)
.如果真结束
重定义数组 (参数_延时, 假, 相除 (局部_属性.值大小, 4))
RtlMoveMemory_bin2intary (参数_延时, 局部_属性.值, 局部_属性.值大小)
返回 (真)

.子程序 取属性项目, 逻辑型, 公开, GdipGetPropertyItem
.参数 参数_属性标签, 整数型, , “属性标签_”开头常量。通常是通过“取属性标签列表()”方法来查看此图像有哪些属性。
.参数 参数_属性项目, GP_属性项目, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_缓冲区, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipGetPropertyItemSize (m_Image, 参数_属性标签, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_缓冲区, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetPropertyItem (m_Image, 参数_属性标签, 局部_size, 局部_缓冲区))
赋值 (i, 1)
赋值 (参数_属性项目.属性标签, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值大小, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值类型, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值, 取字节集中间 (局部_缓冲区, 相加 (i, 4), 参数_属性项目.值大小))

返回 (等于 (全局_返回码, 0))


.子程序 置属性项目, 逻辑型, 公开, GdipSetPropertyItem
.参数 参数_属性项目, GP_属性项目, , 

赋值 (全局_返回码, GdipSetPropertyItem (m_Image, 参数_属性项目))
返回 (等于 (全局_返回码, 0))

.子程序 移除属性项目, 逻辑型, 公开, GdipRemovePropertyItem
.参数 参数_属性标签, 整数型, , “属性标签_”开头常量。通常是通过“取属性标签列表()”方法来查看此图像有哪些属性。

赋值 (全局_返回码, GdipRemovePropertyItem (m_Image, 参数_属性标签))
返回 (等于 (全局_返回码, 0))

.子程序 取属性标签列表, 整数型, 公开, GdipGetPropertyIdList。返回属性标签数。
.参数 参数_属性标签数组, 整数型, 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPropertyCount (m_Image, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_属性标签数组, 假, 局部_count)
赋值 (全局_返回码, GdipGetPropertyIdList (m_Image, 局部_count, 参数_属性标签数组))
返回 (局部_count)

.子程序 旋转翻转, 逻辑型, 公开, GdipImageRotateFlip
.参数 参数_旋转翻转类型, 整数型, , “旋转翻转_”开头常量。

赋值 (全局_返回码, GdipImageRotateFlip (m_Image, 参数_旋转翻转类型))
返回 (等于 (全局_返回码, 0))


.子程序 取颜色调色板, 逻辑型, 公开, GdipGetImagePalette
.参数 参数_颜色调色板, GP_颜色调色板, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipGetImagePaletteSize (m_Image, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImagePalette (m_Image, 局部_字节集, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (i, 1)
赋值 (参数_颜色调色板.标志, 取字节集数据 (局部_字节集, #整数型, i))
赋值 (参数_颜色调色板.数量, 取字节集数据 (局部_字节集, #整数型, i))
重定义数组 (参数_颜色调色板.ARGB颜色, 假, 参数_颜色调色板.数量)
RtlMoveMemory_bin2intary (参数_颜色调色板.ARGB颜色, 取字节集右边 (局部_字节集, 相减 (局部_size, 8)), 相减 (局部_size, 8))
返回 (等于 (全局_返回码, 0))

.子程序 置颜色调色板, 逻辑型, 公开, GdipSetImagePalette
.参数 参数_颜色调色板, GP_颜色调色板, , 

赋值 (全局_返回码, GdipSetImagePalette (m_Image, 参数_颜色调色板))
返回 (等于 (全局_返回码, 0))


.类模块 IStream, , , 

.程序集变量 成员_内存句柄, 整数型, , , 
.程序集变量 成员_内存指针, 整数型, , , 
.程序集变量 成员_字节流对象, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
释放 ()

.子程序 创建, 整数型, , 成功返回字节流指针，失败返回0。上次创建的字节流指针会自动释放。
.参数 参数_字节集, 字节集, 可空, 字节集数据。
.参数 参数_大小, 整数型, 可空, 默认为 参数_字节集 的长度

释放 ()
.如果 (是否为空 (参数_字节集))
    赋值 (成员_内存句柄, GlobalAlloc (#GMEM_MOVEABLE, 0))
    CreateStreamOnHGlobal (成员_内存句柄, 1, 成员_字节流对象)
.否则
    
    .如果真 (是否为空 (参数_大小))
        赋值 (参数_大小, 取字节集长度 (参数_字节集))
    .如果真结束
    赋值 (成员_内存句柄, GlobalAlloc (#GMEM_ZEROINIT, 参数_大小))
    赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
    CreateStreamOnHGlobal (成员_内存指针, 0, 成员_字节流对象)
    WriteProcessMemory (GetCurrentProcess (), 成员_内存指针, lstrcpy_字节集 (参数_字节集, 参数_字节集), 参数_大小, 0)
    GlobalUnlock (成员_内存句柄)
.如果结束
返回 (成员_字节流对象)

.子程序 释放, 空白型, , 释放内存资源。
.局部变量 var, 整数型, , , 
.局部变量 addr, 整数型, , , 

.如果真 (不等于 (成员_内存句柄, 0))
    GlobalFree (成员_内存句柄)
    赋值 (成员_内存句柄, 0)
    赋值 (var, 取字节集数据 (指针到字节集 (成员_字节流对象, 4), #整数型, ))
    赋值 (var, 相加 (var, 相乘 (2, 4))) ' Release方法地址
    赋值 (addr, 取字节集数据 (指针到字节集 (var, 4), #整数型, )) ' 取出Release方法地址
    CallWindowProc ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }, addr, 成员_字节流对象, 0, 0) ' 调用Release方法
    赋值 (成员_字节流对象, 0)
.如果真结束


.子程序 取尺寸, 整数型, , 取出字节流的字节集数据尺寸大小。
.局部变量 局部_大小, 整数型, , , 

赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
赋值 (局部_大小, GlobalSize (成员_内存指针))
GlobalUnlock (成员_内存句柄)
返回 (局部_大小)


.子程序 取字节流指针, 整数型, , 取出字节流对象的内存指针。
返回 (成员_字节流对象)


.子程序 取内存句柄, 整数型, , 
返回 (成员_内存句柄)


.子程序 置字节流指针, 逻辑型, , 将另一个字节流对象指针导入到本类，之前的指针会自动释放。
.参数 参数_字节流指针, 整数型, , 

释放 ()
GetHGlobalFromStream (参数_字节流指针, 成员_内存句柄)
赋值 (成员_字节流对象, 参数_字节流指针)
返回 (不等于 (成员_内存句柄, 0))

.子程序 取出字节集, 字节集, , 取出字节流指针的字节集数据。
.局部变量 局部_大小, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
赋值 (局部_大小, GlobalSize (成员_内存指针))
赋值 (局部_数据, 指针到字节集 (成员_内存指针, 局部_大小))
GlobalUnlock (成员_内存句柄)
返回 (局部_数据)


.类模块 GP画笔, Gdiplus基类, , 

.程序集变量 m_Pen, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用

销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Pen, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeletePen。
.如果真 (等于 (m_Pen, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePen (m_Pen))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自颜色, 逻辑型, 公开, GdipCreatePen1
.参数 参数_ARGB颜色, 整数型, , 需要将RGB颜色转换为ARGB颜色。
.参数 参数_宽度, 小数型, , 
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。默认为：“单位_世界坐标”

销毁 ()
赋值 (全局_返回码, GdipCreatePen1 (参数_ARGB颜色, 参数_宽度, 参数_单位, m_Pen))
置指针 (m_Pen)
返回 (等于 (全局_返回码, 0))


.子程序 创建自画刷, 逻辑型, 公开, GdipCreatePen2
.参数 参数_画刷, GP画刷, 参考, 
.参数 参数_宽度, 小数型, , 
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。默认为：“单位_世界坐标”

销毁 ()
赋值 (全局_返回码, GdipCreatePen2 (参数_画刷.取指针 (), 参数_宽度, 参数_单位, m_Pen))
置指针 (m_Pen)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, 公开, GdipClonePen
.参数 参数_画笔, GP画笔, 参考, 

.局部变量 局部_画笔, 整数型, , , 

赋值 (全局_返回码, GdipClonePen (m_Pen, 局部_画笔))
参数_画笔.置指针 (局部_画笔)
返回 (等于 (全局_返回码, 0))


.子程序 取宽度, 小数型, 公开, GdipGetPenWidth
.局部变量 局部_宽度, 小数型, , , 

赋值 (全局_返回码, GdipGetPenWidth (m_Pen, 局部_宽度))
返回 (局部_宽度)


.子程序 置宽度, 逻辑型, 公开, GdipSetPenWidth
.参数 参数_宽度, 小数型, , 

赋值 (全局_返回码, GdipSetPenWidth (m_Pen, 参数_宽度))
返回 (等于 (全局_返回码, 0))


.子程序 取单位, 整数型, 公开, GdipGetPenUnit。返回“单位_”开头常量。
.局部变量 局部_单位, 小数型, , , 

赋值 (全局_返回码, GdipGetPenUnit (m_Pen, 局部_单位))
返回 (局部_单位)


.子程序 置单位, 逻辑型, 公开, GdipSetPenUnit
.参数 参数_单位, 小数型, , “单位_”开头常量。

赋值 (全局_返回码, GdipSetPenUnit (m_Pen, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 置线帽197819, 逻辑型, 公开, GdipSetPenLineCap197819
.参数 参数_起点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_终点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_虚线帽, 整数型, , “虚线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineCap197819 (m_Pen, 参数_起点帽, 参数_终点帽, 参数_虚线帽))
返回 (等于 (全局_返回码, 0))


.子程序 置线帽, 逻辑型, 公开, GdipSetPenLineCap
.参数 参数_起点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_终点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_虚线帽, 整数型, , “虚线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineCap (m_Pen, 参数_起点帽, 参数_终点帽, 参数_虚线帽))
返回 (等于 (全局_返回码, 0))

.子程序 置起点线帽, 逻辑型, 公开, GdipSetPenStartCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenStartCap (m_Pen, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))


.子程序 置终点线帽, 逻辑型, 公开, GdipSetPenEndCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenEndCap (m_Pen, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))

.子程序 置虚线帽, 逻辑型, 公开, GdipSetPenDashCap
.参数 参数_虚线帽样式, 整数型, , “虚线帽样式_”开头常量

赋值 (全局_返回码, GdipSetPenDashCap197819 (m_Pen, 参数_虚线帽样式))
返回 (等于 (全局_返回码, 0))


.子程序 取起点线帽, 整数型, 公开, GdipGetPenStartCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenStartCap (m_Pen, 局部_线帽))
返回 (局部_线帽)


.子程序 取终点线帽, 整数型, 公开, GdipGetPenEndCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenEndCap (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 取虚线帽197819, 整数型, 公开, GdipGetPenDashCap197819
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCap197819 (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 取虚线帽, 整数型, 公开, GdipGetPenDashCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCap (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 置连线方式, 逻辑型, 公开, GdipSetPenLineJoin
.参数 参数_连线方式, 整数型, , “连线方式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineJoin (m_Pen, 参数_连线方式))
返回 (等于 (全局_返回码, 0))


.子程序 取连线方式, 整数型, 公开, GdipGetPenLineJoin。返回“连线方式_”开头常量。
.局部变量 局部_连线方式, 整数型, , , 

赋值 (全局_返回码, GdipGetPenLineJoin (m_Pen, 局部_连线方式))
返回 (局部_连线方式)


.子程序 置自定起点线帽, 逻辑型, 公开, GdipSetPenCustomStartCap
.参数 参数_自定义线帽, GP自定义线帽, , 

赋值 (全局_返回码, GdipSetPenCustomStartCap (m_Pen, 参数_自定义线帽.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取自定起点线帽, 逻辑型, 公开, GdipSetPenCustomStartCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCustomStartCap (m_Pen, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))


.子程序 置自定终点线帽, 逻辑型, 公开, GdipSetPenCustomEndCap
.参数 参数_自定义线帽, GP自定义线帽, , 

赋值 (全局_返回码, GdipSetPenCustomEndCap (m_Pen, 参数_自定义线帽.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取自定终点线帽, 逻辑型, 公开, GdipGetPenCustomEndCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCustomEndCap (m_Pen, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))

.子程序 置斜接限制, 逻辑型, 公开, GdipSetPenMiterLimit
.参数 参数_斜接限制, 小数型, , 

赋值 (全局_返回码, GdipSetPenMiterLimit (m_Pen, 参数_斜接限制))
返回 (等于 (全局_返回码, 0))


.子程序 取斜接限制, 小数型, 公开, GdipGetPenMiterLimit
.局部变量 局部_斜接限制, 小数型, , , 

赋值 (全局_返回码, GdipGetPenMiterLimit (m_Pen, 局部_斜接限制))
返回 (局部_斜接限制)

.子程序 置对齐方式, 逻辑型, 公开, GdipSetPenMode
.参数 参数_对齐方式, 整数型, , “画笔对齐方式_”开头常量。

赋值 (全局_返回码, GdipSetPenMode (m_Pen, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))

.子程序 取对齐方式, 整数型, 公开, GdipGetPenMode。返回“画笔对齐方式_”开头常量。
.局部变量 局部_对齐方式, 整数型, , , 

赋值 (全局_返回码, GdipGetPenMode (m_Pen, 局部_对齐方式))
返回 (局部_对齐方式)

.子程序 变形置矩阵, 逻辑型, 公开, GdipSetPenTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetPenTransform (m_Pen, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, 公开, GdipGetpenTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetPenTransform (m_Pen, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形重置, 逻辑型, 公开, GdipResetPenTransform
赋值 (全局_返回码, GdipResetPenTransform (m_Pen))
返回 (等于 (全局_返回码, 0))

.子程序 变形相乘, 逻辑型, 公开, GdipMultiplyPenTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyPenTransform (m_Pen, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形旋转, 逻辑型, 公开, GdipRotatePenTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotatePenTransform (m_Pen, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形缩放, 逻辑型, 公开, GdipScalePenTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScalePenTransform (m_Pen, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形平移, 逻辑型, 公开, GdipTranslatePenTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslatePenTransform (m_Pen, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 取颜色, 整数型, 公开, GdipGetPenColor。返回ARGB颜色值。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetPenColor (m_Pen, 局部_ARGB颜色))
返回 (局部_ARGB颜色)


.子程序 置颜色, 逻辑型, 公开, GdipSetPenColor。
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetPenColor (m_Pen, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 置画刷, 逻辑型, 公开, GdipSetPenBrushFill
.参数 参数_画刷, GP画刷, , 

赋值 (全局_返回码, GdipSetPenBrushFill (m_Pen, 参数_画刷.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取画刷, 逻辑型, 公开, GdipGetPenBrushFill
.参数 参数_画刷, GP画刷, 参考, 

.局部变量 局部_画刷, 整数型, , , 

赋值 (全局_返回码, GdipGetPenBrushFill (m_Pen, 局部_画刷))
参数_画刷.置指针 (局部_画刷)
返回 (等于 (全局_返回码, 0))


.子程序 取填充类型, 整数型, 公开, GdipGetPenFillType。返回“画笔类型_”开头常量。
.局部变量 局部_填充类型, 整数型, , , 

赋值 (全局_返回码, GdipGetPenFillType (m_Pen, 局部_填充类型))
返回 (局部_填充类型)


.子程序 置虚线类型, 逻辑型, 公开, GdipSetPenDashStyle
.参数 参数_虚线类型, 整数型, , “虚线类型_”开头常量。

赋值 (全局_返回码, GdipSetPenDashStyle (m_Pen, 参数_虚线类型))
返回 (等于 (全局_返回码, 0))


.子程序 取虚线类型, 整数型, 公开, GdipGetPenDashStyle。返回“虚线类型_”开头常量。
.局部变量 局部_虚线类型, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashStyle (m_Pen, 局部_虚线类型))
返回 (局部_虚线类型)

.子程序 取虚线偏移, 小数型, 公开, GdipGetPenDashOffset。
.局部变量 局部_偏移, 小数型, , , 

赋值 (全局_返回码, GdipGetPenDashOffset (m_Pen, 局部_偏移))
返回 (局部_偏移)


.子程序 置虚线偏移, 逻辑型, 公开, GdipSetPenDashOffset。
.参数 参数_偏移, 小数型, , 

赋值 (全局_返回码, GdipSetPenDashOffset (m_Pen, 参数_偏移))
返回 (等于 (全局_返回码, 0))


.子程序 取虚线格式, 整数型, 公开, GdipGetPenDashArray。返回虚线格式数量。
.参数 参数_虚线格式, 小数型, 参考 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCount (m_Pen, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_虚线格式, 假, 局部_count)
赋值 (全局_返回码, GdipGetPenDashArray (m_Pen, 参数_虚线格式, 局部_count))
返回 (局部_count)


.子程序 置虚线格式, 逻辑型, 公开, GdipSetPenDashOffset。
.参数 参数_虚线格式, 小数型, 数组, 第一个成员表示虚线长度，第二个成员表示空白长度，以此类推。

赋值 (全局_返回码, GdipSetPenDashArray (m_Pen, 参数_虚线格式, 取数组成员数 (参数_虚线格式)))
返回 (等于 (全局_返回码, 0))

.子程序 置分割数组, 逻辑型, 公开, GdipSetPenCompoundArray。将画笔画出的线分割成若干条。
.参数 参数_分割数组, 小数型, 数组, 成员值必须是0到1之间的小数，且必须是升序。如：{0,0.2,0.7,1}，表示分割成两条线，第1条线宽度为20%，中间的空白宽度为50%，第2条线宽度为30%

赋值 (全局_返回码, GdipSetPenCompoundArray (m_Pen, 参数_分割数组, 取数组成员数 (参数_分割数组)))
返回 (等于 (全局_返回码, 0))


.子程序 取分割数组, 整数型, 公开, GdipGetPenCompoundArray。返回分割数。
.参数 参数_分割数组, 小数型, 参考 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCompoundCount (m_Pen, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_分割数组, 假, 局部_count)
赋值 (全局_返回码, GdipGetPenCompoundArray (m_Pen, 参数_分割数组, 局部_count))
返回 (局部_count)


.类模块 GP画刷, Gdiplus基类, , 

.程序集变量 m_Brush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Brush, 参数_指针)
方法_子置指针 (m_Brush)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, GdipDeleteBrush。
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_Brush, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteBrush (m_Brush))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneBrush。将当前画刷复制到“参数_画刷”。
.参数 参数_画刷, GP画刷, 参考, 

.局部变量 局部_brush, 整数型, , , 

赋值 (全局_返回码, GdipCloneBrush (m_Brush, 局部_brush))
参数_画刷.置指针 (局部_brush)
返回 (等于 (全局_返回码, 0))

.子程序 取类型, 整数型, 公开, GdipGetBrushType。返回“#画刷类型_”开头常量。
.局部变量 局部_类型, 整数型, , , 

赋值 (全局_返回码, GdipGetBrushType (m_Brush, 局部_类型))
返回 (局部_类型)


.类模块 GP矩阵, Gdiplus基类, , 

.程序集变量 m_Matrix, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Matrix, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteMatrix。
.如果真 (等于 (m_Matrix, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteMatrix (m_Matrix))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateMatrix。创建一个默认矩阵。
销毁 ()
赋值 (全局_返回码, GdipCreateMatrix (m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))


.子程序 创建2, 逻辑型, 公开, GdipCreateMatrix2
.参数 参数_m11, 小数型, , 第一行，第一列
.参数 参数_m12, 小数型, , 第一行，第二列
.参数 参数_m21, 小数型, , 第二行，第一列
.参数 参数_m22, 小数型, , 第二行，第二列
.参数 参数_dx, 小数型, , 第三行，第一列
.参数 参数_dy, 小数型, , 第三行，第二列

销毁 ()
赋值 (全局_返回码, GdipCreateMatrix2 (参数_m11, 参数_m12, 参数_m21, 参数_m22, 参数_dx, 参数_dy, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))

.子程序 创建3, 逻辑型, 公开, GdipCreateMatrix3
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_坐标, GP_坐标F, , 

销毁 ()
赋值 (全局_返回码, GdipCreateMatrix3 (参数_矩形, 参数_坐标, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))


.子程序 创建3I, 逻辑型, 公开, GdipCreateMatrix3I
.参数 参数_矩形, GP_矩形L, , 
.参数 参数_坐标, GP_坐标L, , 

销毁 ()
赋值 (全局_返回码, GdipCreateMatrix3I (参数_矩形, 参数_坐标, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneImageAttributes。将本矩阵复制到 参数_矩阵。
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipCloneMatrix (m_Matrix, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))

.子程序 置元素, 逻辑型, 公开, GdipSetMatrixElements。设置矩阵元素。
.参数 参数_m11, 小数型, , 第一行，第一列
.参数 参数_m12, 小数型, , 第一行，第二列
.参数 参数_m21, 小数型, , 第二行，第一列
.参数 参数_m22, 小数型, , 第二行，第二列
.参数 参数_dx, 小数型, , 第三行，第一列
.参数 参数_dy, 小数型, , 第三行，第二列

赋值 (全局_返回码, GdipSetMatrixElements (m_Matrix, 参数_m11, 参数_m12, 参数_m21, 参数_m22, 参数_dx, 参数_dy))
返回 (等于 (全局_返回码, 0))

.子程序 取元素, 逻辑型, 公开, GdipGetMatrixElements
.参数 参数_元素组, 小数型, 数组, 返回值。

重定义数组 (参数_元素组, 假, 6)
赋值 (全局_返回码, GdipGetMatrixElements (m_Matrix, 参数_元素组))
返回 (等于 (全局_返回码, 0))


.子程序 相乘, 逻辑型, 公开, GdipMultiplyMatrix。如果指定的顺序是“#矩阵顺序_预先计算”，则按预先计算的顺序将此 矩阵 对象乘以指定的矩阵。如果指定的顺序是“#矩阵顺序_追加”，则按追加的顺序将此 矩阵 对象乘以指定的矩阵。
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyMatrix (m_Matrix, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 平移, 逻辑型, 公开, GdipTranslateMatrix。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateMatrix (m_Matrix, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 旋转, 逻辑型, 公开, GdipRotateMatrix
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipRotateMatrix (m_Matrix, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 逆转, 逻辑型, 公开, GdipInvertMatrix。设置旋转方向为逆向。
赋值 (全局_返回码, GdipInvertMatrix (m_Matrix))
返回 (等于 (全局_返回码, 0))

.子程序 缩放, 逻辑型, 公开, GdipScaleMatrix
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleMatrix (m_Matrix, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 切变, 逻辑型, 公开, GdipShearMatrix
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipShearMatrix (m_Matrix, 参数_x, 参数_y, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 重置, 逻辑型, 公开, 
赋值 (全局_返回码, GdipSetMatrixElements (m_Matrix, 1, 0, 0, 1, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 仿射变换, 逻辑型, 公开, GdipTransformMatrixPoints
.参数 参数_坐标组, GP_坐标F, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipTransformMatrixPoints (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 矢量仿射变换, 逻辑型, 公开, GdipVectorTransformMatrixPoints
.参数 参数_坐标组, GP_坐标F, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipVectorTransformMatrixPoints (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 是否逆转, 逻辑型, 公开, GdipIsMatrixInvertible
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixInvertible (m_Matrix, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否单位矩阵, 逻辑型, 公开, GdipIsMatrixIdentity
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixIdentity (m_Matrix, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否相等, 逻辑型, 公开, GdipIsMatrixEqual
.参数 参数_矩阵, GP矩阵, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixEqual (m_Matrix, 参数_矩阵.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.类模块 GP路径, Gdiplus基类, , 

.程序集变量 m_Path, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Path, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeletePath。
.如果真 (等于 (m_Path, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePath (m_Path))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreatePath
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

销毁 ()
.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath (参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))

.子程序 创建自坐标组, 逻辑型, 公开, GdipCreatePath2
.参数 参数_坐标, GP_坐标F, 数组, 
.参数 参数_类型, 字节型, 数组, “路径点类型_”开头常量。
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

销毁 ()
.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath2 (参数_坐标, 参数_类型, 取数组成员数 (参数_坐标), 参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))


.子程序 创建自坐标组I, 逻辑型, 公开, GdipCreatePath2
.参数 参数_坐标, GP_坐标L, 数组, 
.参数 参数_类型, 字节型, 数组, “路径点类型_”开头常量。
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

销毁 ()
.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath2I (参数_坐标, 参数_类型, 取数组成员数 (参数_坐标), 参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipClonePath
.参数 参数_路径, GP路径, 参考, 

.局部变量 局部_路径, 整数型, , , 

赋值 (全局_返回码, GdipClonePath (m_Path, 局部_路径))
参数_路径.置指针 (局部_路径)
返回 (等于 (全局_返回码, 0))

.子程序 重置, 逻辑型, 公开, GdipResetPath
赋值 (全局_返回码, GdipResetPath (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 取填充模式, 整数型, 公开, GdipGetPathFillMode。返回“填充模式_”开头常量
.局部变量 局部_填充模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPathFillMode (m_Path, 局部_填充模式))
返回 (局部_填充模式)


.子程序 置填充模式, 逻辑型, 公开, GdipSetPathFillMode
.参数 参数_填充模式, 整数型, , “填充模式_”开头常量

赋值 (全局_返回码, GdipSetPathFillMode (m_Path, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 取路径数据, 逻辑型, 公开, GdipGetPathData。
.参数 参数_路径数据, GP_路径数据, 参考, 

.局部变量 局部_总数, 整数型, , , 
.局部变量 局部_PathData, PathData, , , 

赋值 (全局_返回码, GdipGetPointCount (m_Path, 局部_总数))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_PathData.Count, 局部_总数)
重定义数组 (参数_路径数据.坐标组, 假, 局部_总数)
重定义数组 (参数_路径数据.类型组, 假, 局部_总数)
.如果真 (小于或等于 (局部_PathData.Count, 0))
    返回 (假)
.如果真结束
赋值 (局部_PathData.Points, new (相乘 (8, 局部_总数)))
赋值 (局部_PathData.Types, new (局部_总数))
赋值 (全局_返回码, GdipGetPathData (m_Path, 局部_PathData))
.如果真 (不等于 (全局_返回码, 0))
    delete (局部_PathData.Points)
    delete (局部_PathData.Types)
    返回 (假)
.如果真结束
赋值 (参数_路径数据.总数, 局部_PathData.Count)
RtlMoveMemory_points (参数_路径数据.坐标组, 局部_PathData.Points, 相乘 (8, 局部_总数))
RtlMoveMemory_bytes (参数_路径数据.类型组, 局部_PathData.Types, 局部_总数)
delete (局部_PathData.Points)
delete (局部_PathData.Types)
返回 (等于 (全局_返回码, 0))

.子程序 取路径类型组, 逻辑型, 公开, GdipGetPathTypes
.参数 参数_类型, 字节型, 参考 数组, 返回“路径点类型_”开头常量。
.参数 参数_总数, 整数型, , 可用“取坐标数()”获得。

重定义数组 (参数_类型, 假, 参数_总数)
赋值 (全局_返回码, GdipGetPathTypes (m_Path, 参数_类型, 参数_总数))
返回 (等于 (全局_返回码, 0))

.子程序 取路径坐标组, 逻辑型, 公开, GdipGetPathPoints
.参数 参数_坐标, GP_坐标F, 数组, 
.参数 参数_总数, 整数型, , 

重定义数组 (参数_坐标, 假, 参数_总数)
赋值 (全局_返回码, GdipGetPathPoints (m_Path, 参数_坐标, 参数_总数))
返回 (等于 (全局_返回码, 0))


.子程序 开始图形, 逻辑型, 公开, GdipStartPathFigure。不闭合当前图形即开始一个新图形。后面添加到该路径的所有点都被添加到此新图形中。
赋值 (全局_返回码, GdipStartPathFigure (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 关闭图形, 逻辑型, 公开, GdipClosePathFigure。闭合当前图形并开始新的图形。如果当前图形包含一系列相互连接的直线和曲线，该方法通过连接一条从终结点到起始点的直线，闭合该环回。
赋值 (全局_返回码, GdipClosePathFigure (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 关闭所有图形, 逻辑型, 公开, GdipClosePathFigures。闭合此路径中所有开放的图形并开始一个新图形。它通过连接一条从图形的终结点到起始点的直线，闭合每一开放的图形。 
赋值 (全局_返回码, GdipClosePathFigures (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 置标记, 逻辑型, 公开, GdipSetPathMarker。
赋值 (全局_返回码, GdipSetPathMarker (m_Path))
返回 (等于 (全局_返回码, 0))


.子程序 清除标记, 逻辑型, 公开, GdipClearPathMarkers
赋值 (全局_返回码, GdipClearPathMarkers (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 反向, 逻辑型, 公开, GdipReversePath
赋值 (全局_返回码, GdipReversePath (m_Path))
返回 (等于 (全局_返回码, 0))


.子程序 取最后坐标, GP_坐标F, 公开, GdipGetPathLastPoint
.局部变量 局部_坐标, GP_坐标F, , , 

赋值 (全局_返回码, GdipGetPathLastPoint (m_Path, 局部_坐标))
返回 (局部_坐标)


.子程序 添加直线, 逻辑型, 公开, GdipAddPathLine
.参数 参数_起点X, 小数型, , 
.参数 参数_起点Y, 小数型, , 
.参数 参数_终点X, 小数型, , 
.参数 参数_终点Y, 小数型, , 

赋值 (全局_返回码, GdipAddPathLine (m_Path, 参数_起点X, 参数_起点Y, 参数_终点X, 参数_终点Y))
返回 (等于 (全局_返回码, 0))


.子程序 添加直线I, 逻辑型, 公开, GdipAddPathLineI
.参数 参数_起点X, 整数型, , 
.参数 参数_起点Y, 整数型, , 
.参数 参数_终点X, 整数型, , 
.参数 参数_终点Y, 整数型, , 

赋值 (全局_返回码, GdipAddPathLineI (m_Path, 参数_起点X, 参数_起点Y, 参数_终点X, 参数_终点Y))
返回 (等于 (全局_返回码, 0))

.子程序 添加直线组, 逻辑型, 公开, GdipAddPathLine2
.参数 参数_坐标, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathLine2 (m_Path, 参数_坐标, 取数组成员数 (参数_坐标)))
返回 (等于 (全局_返回码, 0))

.子程序 添加直线组I, 逻辑型, 公开, GdipAddPathLine2I
.参数 参数_坐标, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathLine2I (m_Path, 参数_坐标, 取数组成员数 (参数_坐标)))
返回 (等于 (全局_返回码, 0))

.子程序 添加圆弧, 逻辑型, 公开, GdipAddPathArc
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathArc (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 添加圆弧I, 逻辑型, 公开, GdipAddPathArcI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathArcI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线, 逻辑型, 公开, GdipAddPathBezier
.参数 参数_x1, 小数型, , 
.参数 参数_y1, 小数型, , 
.参数 参数_x2, 小数型, , 
.参数 参数_y2, 小数型, , 
.参数 参数_x3, 小数型, , 
.参数 参数_y3, 小数型, , 
.参数 参数_x4, 小数型, , 
.参数 参数_y4, 小数型, , 

赋值 (全局_返回码, GdipAddPathBezier (m_Path, 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))


.子程序 添加贝塞尔曲线I, 逻辑型, 公开, GdipAddPathBezierI
.参数 参数_x1, 整数型, , 
.参数 参数_y1, 整数型, , 
.参数 参数_x2, 整数型, , 
.参数 参数_y2, 整数型, , 
.参数 参数_x3, 整数型, , 
.参数 参数_y3, 整数型, , 
.参数 参数_x4, 整数型, , 
.参数 参数_y4, 整数型, , 

赋值 (全局_返回码, GdipAddPathBezierI (m_Path, 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线组, 逻辑型, 公开, GdipAddPathBeziers。“参数_坐标组”的成员数必须4个以上。
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathBeziers (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线组I, 逻辑型, 公开, GdipAddPathBeziersI。“参数_坐标组”的成员数必须4个以上。
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathBeziersI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加曲线, 逻辑型, 公开, GdipAddPathCurve。
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathCurve (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线2, 逻辑型, 公开, GdipAddPathCurve2。
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathCurve2 (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线3, 逻辑型, 公开, GdipAddPathCurve3。
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipAddPathCurve3 (m_Path, 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线I, 逻辑型, 公开, GdipAddPathCurveI
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathCurveI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线2I, 逻辑型, 公开, GdipAddPathCurve2I
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathCurve2I (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线3I, 逻辑型, 公开, GdipAddPathCurve3I
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipAddPathCurve3I (m_Path, 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加闭合曲线, 逻辑型, 公开, GdipAddPathClosedCurve。最后一点将和起始点自动连接。
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathClosedCurve (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加闭合曲线2, 逻辑型, 公开, GdipAddPathClosedCurve2。最后一点将和起始点自动连接。
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathClosedCurve2 (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加闭合曲线I, 逻辑型, 公开, GdipAddPathClosedCurveI。最后一点将和起始点自动连接。
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathClosedCurveI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加闭合曲线2I, 逻辑型, 公开, GdipAddPathClosedCurve2I。最后一点将和起始点自动连接。
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathClosedCurve2I (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加矩形, 逻辑型, 公开, GdipAddPathRectangle
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipAddPathRectangle (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加矩形组, 逻辑型, 公开, GdipAddPathRectangles
.参数 参数_矩形组, GP_矩形F, 数组, 

赋值 (全局_返回码, GdipAddPathRectangles (m_Path, 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加矩形I, 逻辑型, 公开, GdipAddPathRectangleI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipAddPathRectangleI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加矩形组I, 逻辑型, 公开, GdipAddPathRectanglesI
.参数 参数_矩形组, GP_矩形L, 数组, 

赋值 (全局_返回码, GdipAddPathRectanglesI (m_Path, 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加椭圆, 逻辑型, 公开, GdipAddPathEllipse。
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipAddPathEllipse (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加椭圆I, 逻辑型, 公开, GdipAddPathEllipseI。
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipAddPathEllipseI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 添加饼I, 逻辑型, 公开, GdipAddPathPieI。
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathPieI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 添加多边形, 逻辑型, 公开, GdipAddPathPolygon
.参数 参数_坐标组, GP_坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathPolygon (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加多边形I, 逻辑型, 公开, GdipAddPathPolygonI
.参数 参数_坐标组, GP_坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathPolygonI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加路径, 逻辑型, 公开, GdipAddPathPath
.参数 参数_路径, GP路径, , 
.参数 参数_连接, 逻辑型, 可空, 它指定添加的路径中的第一个图形是否是该路径中最后一个图形的一部分。真 的值指定（如果可能）添加的路径中的第一个图形是该路径中最后一个图形的一部分。假 的值指定添加的路径中的第一个图形与该路径中最后一个图形不同。默认为：假。

赋值 (全局_返回码, GdipAddPathPath (m_Path, 参数_路径.取指针 (), 参数_连接))
返回 (等于 (全局_返回码, 0))

.子程序 添加文本, 逻辑型, 公开, GdipAddPathString
.参数 参数_文本, 文本型, , 
.参数 参数_字体族, GP字体族, , 
.参数 参数_EM大小, 整数型, , 世界坐标单位
.参数 参数_矩形, GP_矩形F, 可空, 
.参数 参数_字体风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_W, 字节集, , , 

赋值 (局部_W, A2W (参数_文本))
赋值 (全局_返回码, GdipAddPathString (m_Path, 局部_W, lstrlenw (局部_W), 参数_字体族.取指针 (), 参数_字体风格, 参数_EM大小, 参数_矩形, 参数_文本格式.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 添加文本I, 逻辑型, 公开, GdipAddPathStringI
.参数 参数_文本, 文本型, , 
.参数 参数_字体族, GP字体族, , 
.参数 参数_EM大小, 整数型, , 世界坐标单位
.参数 参数_矩形, GP_矩形L, 可空, 
.参数 参数_字体风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_W, 字节集, , , 

赋值 (局部_W, A2W (参数_文本))
赋值 (全局_返回码, GdipAddPathStringI (m_Path, 局部_W, lstrlenw (局部_W), 参数_字体族.取指针 (), 参数_字体风格, 参数_EM大小, 参数_矩形, 参数_文本格式.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形置矩阵, 逻辑型, 公开, GdipTransformPath
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipTransformPath (m_Path, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 变平, 逻辑型, 公开, GdipFlattenPath
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipFlattenPath (m_Path, 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 扩大, 逻辑型, 公开, GdipWidenPath
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipWidenPath (m_Path, 参数_画笔.取指针 (), 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 轮廓线, 逻辑型, 公开, GdipWindingModeOutline
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipWindingModeOutline (m_Path, 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))


.子程序 扭曲, 逻辑型, 公开, GdipWarpPath
.参数 参数_坐标, GP_坐标F, 数组, 一个 坐标F 结构的数组，它们定义由 “参数_源矩形” 定义的矩形将变形到的平行四边形。该数组可以包含三个或四个元素。如果该数组包含三个元素，则平行四边形的右下角位置的点可从前三个点导出。
.参数 参数_源矩形, GP_矩形F, , 一个 矩形F 结构，它表示将变形为 destPoints 定义的平行四边形的矩形
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_扭曲模式, 整数型, 可空, “扭曲模式_”开头常量。默认为：“扭曲模式_透视”
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
.如果真 (是否为空 (参数_扭曲模式))
    赋值 (参数_扭曲模式, #扭曲模式_透视)
.如果真结束
赋值 (全局_返回码, GdipWarpPath (m_Path, 参数_矩阵.取指针 (), 参数_坐标, 取数组成员数 (参数_坐标), 参数_源矩形.左边, 参数_源矩形.顶边, 参数_源矩形.宽度, 参数_源矩形.高度, 参数_扭曲模式, 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 取坐标数, 整数型, 公开, GdipGetPointCount
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipGetPointCount (m_Path, 局部_总数))
返回 (局部_总数)


.子程序 取边界矩形, GP_矩形F, 公开, GdipGetPathWorldBounds
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_画笔, GP画笔, 可空, 

.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetPathWorldBounds (m_Path, 局部_矩形, 参数_矩阵.取指针 (), 参数_画笔.取指针 ()))
返回 (局部_矩形)


.子程序 是否可见坐标, 逻辑型, 公开, GdipIsVisiblePathPoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePathPoint (m_Path, 参数_x, 参数_y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标I, 逻辑型, 公开, GdipIsVisiblePathPointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePathPointI (m_Path, 参数_x, 参数_y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见坐标轮廓, 逻辑型, 公开, GdipIsOutlineVisiblePathPoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_画笔, GP画笔, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsOutlineVisiblePathPoint (m_Path, 参数_x, 参数_y, 参数_画笔.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标轮廓I, 逻辑型, 公开, GdipIsOutlineVisiblePathPointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_画笔, GP画笔, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsOutlineVisiblePathPointI (m_Path, 参数_x, 参数_y, 参数_画笔.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.类模块 GP区域, Gdiplus基类, , 

.程序集变量 m_Region, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Region, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteRegion。
.如果真 (等于 (m_Region, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteRegion (m_Region))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateRegion
销毁 ()
赋值 (全局_返回码, GdipCreateRegion (m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形, 逻辑型, 公开, GdipCreateRegionRect
.参数 参数_矩形, GP_矩形F, , 

销毁 ()
赋值 (全局_返回码, GdipCreateRegionRect (参数_矩形, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形I, 逻辑型, 公开, GdipCreateRegionRectI
.参数 参数_矩形, GP_矩形L, , 

销毁 ()
赋值 (全局_返回码, GdipCreateRegionRectI (参数_矩形, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))

.子程序 创建自路径, 逻辑型, 公开, GdipCreateRegionPath
.参数 参数_路径, GP路径, , 

销毁 ()
赋值 (全局_返回码, GdipCreateRegionPath (参数_路径.取指针 (), m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自句柄, 逻辑型, 公开, GdipCreateRegionHrgn
.参数 参数_hRgn, 整数型, , 区域句柄

销毁 ()
赋值 (全局_返回码, GdipCreateRegionHrgn (参数_hRgn, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自数据, 逻辑型, 公开, GdipCreateRegionRgnData
.参数 参数_数据, 字节集, , 
.参数 参数_数据大小, 整数型, , 

销毁 ()
赋值 (全局_返回码, GdipCreateRegionRgnData (参数_数据, 参数_数据大小, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneRegion
.参数 参数_区域, GP区域, 参考, 

.局部变量 局部_区域, 整数型, , , 

赋值 (全局_返回码, GdipCloneRegion (m_Region, 局部_区域))
参数_区域.置指针 (局部_区域)
返回 (等于 (全局_返回码, 0))

.子程序 置为无限, 逻辑型, 公开, GdipSetInfinite
赋值 (全局_返回码, GdipSetInfinite (m_Region))
返回 (等于 (全局_返回码, 0))


.子程序 置为空, 逻辑型, 公开, GdipSetEmpty
赋值 (全局_返回码, GdipSetEmpty (m_Region))
返回 (等于 (全局_返回码, 0))

.子程序 合并矩形, 逻辑型, 公开, GdipCombineRegionRect
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRect (m_Region, 参数_矩形, 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 合并矩形I, 逻辑型, 公开, GdipCombineRegionRectI
.参数 参数_矩形, GP_矩形L, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRectI (m_Region, 参数_矩形, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 合并区域, 逻辑型, 公开, GdipCombineRegionRegion
.参数 参数_区域, GP区域, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRegion (m_Region, 参数_区域.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 合并路径, 逻辑型, 公开, GdipCombineRegionPath
.参数 参数_路径, GP路径, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionPath (m_Region, 参数_路径.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 平移区域, 逻辑型, 公开, GdipTranslateRegion
.参数 参数_水平偏移量, 小数型, , 水平偏移的量。
.参数 参数_垂直偏移量, 小数型, , 垂直偏移的量。

赋值 (全局_返回码, GdipTranslateRegion (m_Region, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 平移区域I, 逻辑型, 公开, GdipTranslateRegionI
.参数 参数_水平偏移量, 整数型, , 水平偏移的量。
.参数 参数_垂直偏移量, 整数型, , 垂直偏移的量。

赋值 (全局_返回码, GdipTranslateRegionI (m_Region, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 变换区域, 逻辑型, 公开, GdipTransformRegion
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipTransformRegion (m_Region, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取矩形边界, GP_矩形F, 公开, GdipGetRegionBounds
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetRegionBounds (m_Region, 参数_图形.取指针 (), 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形边界I, GP_矩形L, 公开, GdipGetRegionBoundsI
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (全局_返回码, GdipGetRegionBoundsI (m_Region, 参数_图形.取指针 (), 局部_矩形))
返回 (局部_矩形)

.子程序 取数据大小, 整数型, 公开, GdipGetRegionDataSize
.局部变量 局部_size, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionDataSize (m_Region, 局部_size))
返回 (局部_size)


.子程序 取数据, 字节集, 公开, GdipGetRegionData
.参数 参数_数据大小, 整数型, , 
.参数 参数_填充大小, 整数型, 参考 可空, 

.局部变量 局部_数据, 字节集, , , 

赋值 (局部_数据, 取空白字节集 (参数_数据大小))
赋值 (全局_返回码, GdipGetRegionData (m_Region, 局部_数据, 参数_数据大小, 参数_填充大小))
返回 (局部_数据)


.子程序 取区域句柄, 整数型, 公开, GdipGetRegionHRgn。返回区域句柄。
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_hRgn, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionHRgn (m_Region, 参数_图形.取指针 (), 局部_hRgn))
返回 (局部_hRgn)

.子程序 是否为空, 逻辑型, 公开, GdipIsEmptyRegion
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsEmptyRegion (m_Region, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否为无限, 逻辑型, 公开, GdipIsInfiniteRegion
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsInfiniteRegion (m_Region, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否相等, 逻辑型, 公开, GdipIsEqualRegion
.参数 参数_区域, GP区域, , 
.参数 参数_图形, GDI_GP_图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsEqualRegion (m_Region, 参数_区域.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标, 逻辑型, 公开, GdipIsVisibleRegionPoint
.参数 参数_坐标, GP_坐标F, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionPoint (m_Region, 参数_坐标.横坐标, 参数_坐标.纵坐标, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标I, 逻辑型, 公开, GdipIsVisibleRegionPointI
.参数 参数_坐标, GP_坐标L, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionPointI (m_Region, 参数_坐标.横坐标, 参数_坐标.纵坐标, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见矩形, 逻辑型, 公开, GdipIsVisibleRegionRect
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionRect (m_Region, 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见矩形I, 逻辑型, 公开, GdipIsVisibleRegionRectI
.参数 参数_矩形, GP_矩形L, , 
.参数 参数_图形, GDI_GP_图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionRectI (m_Region, 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 取扫描数, 整数型, 公开, GdipGetRegionScansCount
.参数 参数_矩阵, GP矩阵, , 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)

.子程序 取扫描矩形, 整数型, 公开, GdipGetRegionScans
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩形, GP_矩形F, 数组, 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_矩形, 假, 局部_数量)
赋值 (全局_返回码, GdipGetRegionScans (m_Region, 参数_矩形, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)


.子程序 取扫描矩形I, 整数型, 公开, GdipGetRegionScansI
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩形, GP_矩形L, 数组, 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_矩形, 假, 局部_数量)
赋值 (全局_返回码, GdipGetRegionScansI (m_Region, 参数_矩形, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)

.类模块 GP字体, Gdiplus基类, , 

.程序集变量 m_Font, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Font, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteFont
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_Font, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteFont (m_Font))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateFont
.参数 参数_字体族, GP字体族, , 
.参数 参数_字体大小, 小数型, , 字体大小
.参数 参数_风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。

销毁 ()
赋值 (全局_返回码, GdipCreateFont (参数_字体族.取指针 (), 参数_字体大小, 参数_风格, 参数_单位, m_Font))
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 创建自默认字体, 逻辑型, 公开, 
.局部变量 局部_hfont, 整数型, , , 
.局部变量 局部_逻辑字体, 整数型, , , 
.局部变量 局部_DC, 整数型, , , 

销毁 ()
赋值 (局部_hfont, GetStockObject (#DEFAULT_GUI_FONT))
赋值 (局部_逻辑字体, new (60))
.如果真 (等于 (GetObject (局部_hfont, 60, 局部_逻辑字体), 0))
    返回 (假)
.如果真结束
赋值 (局部_DC, GetDC (0))
赋值 (全局_返回码, GdipCreateFontFromLogfontA (局部_DC, 局部_逻辑字体, m_Font))
ReleaseDC (0, 局部_DC)
delete (局部_逻辑字体)
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))

.子程序 创建自名称, 逻辑型, 公开, GdipCreateFont
.参数 参数_名称, 文本型, , 
.参数 参数_尺寸, 小数型, , 字体大小
.参数 参数_风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。

.局部变量 局部_字体族, GP字体族, , , 

销毁 ()
局部_字体族.创建自名称 (参数_名称)
赋值 (全局_返回码, GdipCreateFont (局部_字体族.取指针 (), 参数_尺寸, 参数_风格, 参数_单位, m_Font))
置指针 (m_Font)
局部_字体族.销毁 ()
返回 (等于 (全局_返回码, 0))


.子程序 创建自DC, 逻辑型, 公开, GdipCreateFontFromDC
.参数 参数_hdc, 整数型, , 设备场景句柄。

销毁 ()
赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 创建自hFont, 逻辑型, 公开, 
.参数 参数_hdc, 整数型, , 设备场景句柄
.参数 参数_hFont, 整数型, , 字体句柄

.局部变量 局部_逻辑字体, 整数型, , , 

销毁 ()
.如果 (不等于 (参数_hFont, 0))
    赋值 (局部_逻辑字体, new (60))
    .如果 (不等于 (GetObject (参数_hFont, 60, 局部_逻辑字体), 0))
        赋值 (全局_返回码, GdipCreateFontFromLogfontA (参数_hdc, 局部_逻辑字体, m_Font))
    .否则
        赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
    .如果结束
    delete (局部_逻辑字体)
.否则
    赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
.如果结束
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))

.子程序 创建自逻辑字体, 逻辑型, 公开, GdipCreateFontFromLogfontA
.参数 参数_hdc, 整数型, , 设备场景句柄。
.参数 参数_pLogfont, 整数型, , logfont的指针。

销毁 ()
.如果 (不等于 (参数_pLogfont, 0))
    赋值 (全局_返回码, GdipCreateFontFromLogfontA (参数_hdc, 参数_pLogfont, m_Font))
.否则
    赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
.如果结束
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, 公开, GdipCloneFont
.参数 参数_字体, GP字体, 参考, 

.局部变量 局部_字体, 整数型, , , 

赋值 (全局_返回码, GdipCloneFont (m_Font, 局部_字体))
参数_字体.置指针 (局部_字体)
返回 (等于 (全局_返回码, 0))


.子程序 取字体族, 逻辑型, 公开, GdipGetFamily
.参数 参数_字体族, GP字体族, 参考, 

.局部变量 局部_字体族, 整数型, , , 

赋值 (全局_返回码, GdipGetFamily (m_Font, 局部_字体族))
参数_字体族.置指针 (局部_字体族)
返回 (等于 (全局_返回码, 0))


.子程序 取风格, 整数型, 公开, GdipGetFontStyle。返回“字体风格_”开头常量。
.局部变量 局部_风格, 整数型, , , 

赋值 (全局_返回码, GdipGetFontStyle (m_Font, 局部_风格))
返回 (局部_风格)


.子程序 取尺寸, 小数型, 公开, GdipGetFontSize
.局部变量 局部_尺寸, 小数型, , , 

赋值 (全局_返回码, GdipGetFontSize (m_Font, 局部_尺寸))
返回 (局部_尺寸)


.子程序 取单位, 整数型, 公开, GdipGetFontUnit。“单位_”开头常量。
.局部变量 局部_单位, 整数型, , , 

赋值 (全局_返回码, GdipGetFontUnit (m_Font, 局部_单位))
返回 (局部_单位)

.子程序 取高度, 小数型, 公开, GdipGetFontHeight
.参数 参数_图形, GDI_GP_图形, 可空, 参数为空时，字体单位必须是像素。

.局部变量 局部_高度, 小数型, , , 

赋值 (全局_返回码, GdipGetFontHeight (m_Font, 参数_图形.取指针 (), 局部_高度))
返回 (局部_高度)


.子程序 取高度自分辨率, 小数型, 公开, GdipGetFontHeightGivenDPI
.参数 参数_分辨率, 小数型, , 

.局部变量 局部_高度, 小数型, , , 

赋值 (全局_返回码, GdipGetFontHeightGivenDPI (m_Font, 参数_分辨率, 局部_高度))
返回 (局部_高度)


.子程序 取逻辑字体, 逻辑型, 公开, GdipGetLogFontA
.参数 参数_图形, GDI_GP_图形, , 
.参数 参数_逻辑字体, 字节集, 参考, LogFontA结构的字节集形式，长度60。

赋值 (全局_返回码, GdipGetLogFontA (m_Font, 参数_图形.取指针 (), lstrcpy_字节集 (参数_逻辑字体, 参数_逻辑字体)))
返回 (等于 (全局_返回码, 0))


.程序集 GDI与GP转换, , , 

.子程序 坐标F_2_GDI_点, GDI_点, 公开, 
.参数 坐标F, GP_坐标F, , 

.局部变量 点, GDI_点, , , 

赋值 (点.横坐标, 四舍五入 (坐标F.横坐标, ))
赋值 (点.纵坐标, 四舍五入 (坐标F.纵坐标, ))
返回 (点)

.子程序 坐标L_2_GDI_点, GDI_点, 公开, 
.参数 坐标L, GP_坐标L, , 

.局部变量 点, GDI_点, , , 

赋值 (点.横坐标, 四舍五入 (坐标L.横坐标, ))
赋值 (点.纵坐标, 四舍五入 (坐标L.纵坐标, ))
返回 (点)

.子程序 GDI_点_2_坐标F, GP_坐标F, 公开, 
.参数 GDI_点, GDI_点, , 

.局部变量 点, GP_坐标F, , , 

赋值 (点.横坐标, GDI_点.横坐标)
赋值 (点.纵坐标, GDI_点.纵坐标)
返回 (点)

.子程序 GDI_点_2_坐标L, GP_坐标L, 公开, 
.参数 GDI_点, GDI_点, , 

.局部变量 点, GP_坐标L, , , 

赋值 (点.横坐标, GDI_点.横坐标)
赋值 (点.纵坐标, GDI_点.纵坐标)
返回 (点)

.子程序 匿名子程序_41797, 空白型, , 


.子程序 矩形F_2_GDI_矩形2, GDI_矩形2, 公开, 
.参数 矩形F, GP_矩形F, , 

.局部变量 rect, GDI_矩形2, , , 

赋值 (rect.左边, 四舍五入 (矩形F.左边, ))
赋值 (rect.顶边, 四舍五入 (矩形F.顶边, ))
赋值 (rect.宽度, 四舍五入 (矩形F.宽度, ))
赋值 (rect.高度, 四舍五入 (矩形F.高度, ))
返回 (rect)

.子程序 矩形L_2_GDI_矩形2, GDI_矩形2, 公开, 
.参数 矩形L, GP_矩形L, , 

.局部变量 rect, GDI_矩形2, , , 

赋值 (rect.左边, 四舍五入 (矩形L.左边, ))
赋值 (rect.顶边, 四舍五入 (矩形L.顶边, ))
赋值 (rect.宽度, 四舍五入 (矩形L.宽度, ))
赋值 (rect.高度, 四舍五入 (矩形L.高度, ))
返回 (rect)

.类模块 Gdiplus基类, , , 

.程序集变量 m_Pointer, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取指针, 整数型, 公开, 
返回 (m_Pointer)


.子程序 置指针, 空白型, 公开, 
.参数 参数_指针, 整数型, , 

赋值 (m_Pointer, 参数_指针)
方法_置指针 (参数_指针)

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 new, 整数型, , GdipAlloc
.参数 参数_大小, 整数型, , 

返回 (GdipAlloc (参数_大小))

.子程序 delete, 空白型, , GdipFree
.参数 参数_内存指针, 整数型, , 

GdipFree (参数_内存指针)


.类模块 GP字体族, Gdiplus基类, , 

.程序集变量 m_FontFamily, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_FontFamily, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteFontFamily。
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_FontFamily, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteFontFamily (m_FontFamily))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自名称, 逻辑型, 公开, GdipCreateFontFamilyFromName
.参数 参数_名称, 文本型, , 
.参数 参数_字体集, GP字体集, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateFontFamilyFromName (A2W (参数_名称), 参数_字体集.取指针 (), m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用无衬线, 逻辑型, 公开, GdipGetGenericFontFamilySansSerif
销毁 ()
赋值 (全局_返回码, GdipGetGenericFontFamilySansSerif (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用衬线, 逻辑型, 公开, GdipGetGenericFontFamilySerif
销毁 ()
赋值 (全局_返回码, GdipGetGenericFontFamilySerif (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用等宽, 逻辑型, 公开, GdipGetGenericFontFamilyMonospace
销毁 ()
赋值 (全局_返回码, GdipGetGenericFontFamilyMonospace (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, 公开, GdipCloneFontFamily
.参数 参数_字体族, GP字体族, 参考, 

.局部变量 局部_字体族, 整数型, , , 

赋值 (全局_返回码, GdipCloneFontFamily (m_FontFamily, 局部_字体族))
参数_字体族.置指针 (局部_字体族)
返回 (等于 (全局_返回码, 0))


.子程序 取名称, 文本型, 公开, GdipGetFamilyName
.局部变量 局部_名称, 字节集, , , 

赋值 (局部_名称, 取空白字节集 (64))
赋值 (全局_返回码, GdipGetFamilyName (m_FontFamily, 局部_名称, 0))
返回 (W2A (lstrcpy_字节集 (局部_名称, 局部_名称)))


.子程序 是否有效风格, 逻辑型, 公开, GdipIsStyleAvailable
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsStyleAvailable (m_FontFamily, 参数_字体风格, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 取EM高度, 短整数型, 公开, GdipGetEmHeight。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_EM高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetEmHeight (m_FontFamily, 参数_字体风格, 局部_EM高度))
返回 (局部_EM高度)

.子程序 取上区高度, 短整数型, 公开, GdipGetCellAscent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_上区高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetCellAscent (m_FontFamily, 参数_字体风格, 局部_上区高度))
返回 (局部_上区高度)


.子程序 取下区高度, 短整数型, 公开, GdipGetCellDescent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_下区高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetCellDescent (m_FontFamily, 参数_字体风格, 局部_下区高度))
返回 (局部_下区高度)

.子程序 取行间距, 短整数型, 公开, GdipGetCellDescent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_行间距, 短整数型, , , 

赋值 (全局_返回码, GdipGetLineSpacing (m_FontFamily, 参数_字体风格, 局部_行间距))
返回 (局部_行间距)

.类模块 GP图像属性, Gdiplus基类, , 

.程序集变量 m_ImageAttribute, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ImageAttribute, 参数_指针)


.子程序 销毁, 逻辑型, 公开, GdipDisposeImageAttributes
赋值 (全局_返回码, GdipDisposeImageAttributes (m_ImageAttribute))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateImageAttributes
销毁 ()
赋值 (全局_返回码, GdipCreateImageAttributes (m_ImageAttribute))
置指针 (m_ImageAttribute)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneImageAttributes。复制本图像属性到 参数_图像属性。
.参数 参数_图像属性, GP图像属性, 参考, 

.局部变量 局部_图像属性, 整数型, , , 

赋值 (全局_返回码, GdipCloneImageAttributes (m_ImageAttribute, 局部_图像属性))
参数_图像属性.置指针 (局部_图像属性)
返回 (等于 (全局_返回码, 0))


.子程序 置类型, 逻辑型, 公开, GdipSetImageAttributesToIdentity。
.参数 参数_颜色调整类型, 整数型, , “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesToIdentity (m_ImageAttribute, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 重置, 逻辑型, 公开, GdipResetImageAttributes
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipResetImageAttributes (m_ImageAttribute, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 置临界值, 逻辑型, 公开, GdipSetImageAttributesThreshold。
.参数 参数_临界值, 小数型, , 临界值是一个从0到1，指定每个颜色成分分界点。例如，假设临界值为0.7，假设你是提供一种颜色的红，绿，蓝230，50，220。红色部分，230>0.7 × 255，因此红色成分将改为255（全强度）。绿色部分，50<0.7 × 255，所以绿色成分将被更改为0。蓝色的部分，220>0.7 × 255，所以蓝色部分将改为255
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesThreshold (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_临界值))
返回 (等于 (全局_返回码, 0))


.子程序 清除临界值, 逻辑型, 公开, GdipSetImageAttributesThreshold
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesThreshold (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 禁用, 逻辑型, 公开, GdipSetImageAttributesNoOp。可以用 恢复() 方法恢复被禁用的颜色调整类型。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesNoOp (m_ImageAttribute, 参数_颜色调整类型, 1))
返回 (等于 (全局_返回码, 0))


.子程序 恢复, 逻辑型, 公开, GdipSetImageAttributesNoOp。恢复禁用的颜色调整类型。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesNoOp (m_ImageAttribute, 参数_颜色调整类型, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置伽玛值, 逻辑型, 公开, GdipSetImageAttributesGamma
.参数 参数_伽玛值, 小数型, , 一般是1.0到2.2之间，有时候0.1到5.0也有效。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesGamma (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_伽玛值))
返回 (等于 (全局_返回码, 0))


.子程序 清除伽玛值, 逻辑型, 公开, GdipSetImageAttributesGamma
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesGamma (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置透明色范围, 逻辑型, 公开, GdipSetImageAttributesColorKeys。在 参数_低颜色 和 参数_高颜色 之间的颜色值将是透明的。
.参数 参数_低颜色, 整数型, , ARGB颜色
.参数 参数_高颜色, 整数型, , ARGB颜色
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesColorKeys (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_低颜色, 参数_高颜色))
返回 (等于 (全局_返回码, 0))


.子程序 清除透明色范围, 逻辑型, 公开, GdipSetImageAttributesColorKeys
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesColorKeys (m_ImageAttribute, 参数_颜色调整类型, 0, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置输出通道, 逻辑型, 公开, GdipSetImageAttributesOutputChannel。设置CMYK输出通道。
.参数 参数_输出通道, 整数型, , “输出通道_”开头常量。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesOutputChannel (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_输出通道))
返回 (等于 (全局_返回码, 0))


.子程序 清除输出通道, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesOutputChannel (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置输出通道配置文件, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色配置文件, 文本型, , *.ICM
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesOutputChannelColorProfile (m_ImageAttribute, 参数_颜色调整类型, 1, A2W (参数_颜色配置文件)))
返回 (等于 (全局_返回码, 0))


.子程序 清除出通道配置文件, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesOutputChannelColorProfile (m_ImageAttribute, 参数_颜色调整类型, 0, {  }))
返回 (等于 (全局_返回码, 0))

.子程序 置色彩映射表, 逻辑型, 公开, GdipSetImageAttributesRemapTable。将原来的颜色映射成为新的颜色。
.参数 参数_色彩映射表, GP_色彩映射表, 数组, 
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesRemapTable (m_ImageAttribute, 参数_颜色调整类型, 1, 取数组成员数 (参数_色彩映射表), 参数_色彩映射表))
返回 (等于 (全局_返回码, 0))


.子程序 清除色彩映射表, 逻辑型, 公开, GdipSetImageAttributesRemapTable。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

.局部变量 局部_色彩映射表, GP_色彩映射表, , "0", 

赋值 (全局_返回码, GdipSetImageAttributesRemapTable (m_ImageAttribute, 参数_颜色调整类型, 0, 0, 局部_色彩映射表))
返回 (等于 (全局_返回码, 0))


.子程序 置环绕模式, 逻辑型, 公开, GdipSetImageAttributesWrapMode。设置空白区域的覆盖模式。
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。
.参数 参数_背景颜色, 整数型, 可空, ARGB颜色，当环绕模式为“环绕模式_固定”时，指定用什么颜色来填充空白区域。

赋值 (全局_返回码, GdipSetImageAttributesWrapMode (m_ImageAttribute, 参数_环绕模式, 参数_背景颜色, 0))
返回 (等于 (全局_返回码, 0))


.子程序 取颜色调整调色板, 逻辑型, 公开, GdipGetImageAttributesAdjustedPalette
.参数 参数_颜色调色板, GP_颜色调色板, 参考, 输入\输出，
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipGetImageAttributesAdjustedPalette (m_ImageAttribute, 参数_颜色调色板, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 置颜色矩阵, 逻辑型, 公开, GdipSetImageAttributesColorMatrix
.参数 参数_颜色矩阵, 小数型, 数组, 颜色矩阵是一个5x5的二维数组。
.参数 参数_灰度矩阵, 小数型, 可空 数组, 同上。
.参数 参数_颜色矩阵标志, 整数型, 可空, “颜色矩阵标志_”开头常量。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesColorMatrix (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_颜色矩阵, 参数_灰度矩阵, 参数_颜色矩阵标志))
返回 (等于 (全局_返回码, 0))

.子程序 清除颜色矩阵, 逻辑型, 公开, 
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesColorMatrix (m_ImageAttribute, 参数_颜色调整类型, 0, { 0 }, { 0 }, 0))
返回 (等于 (全局_返回码, 0))


.类模块 GP纯色画刷, GP画刷, , 

.程序集变量 m_SolidBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_SolidBrush, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipCreateSolidFill
.参数 参数_ARGB颜色, 整数型, , 需要将RGB颜色转换为ARGB颜色。

销毁 ()
赋值 (全局_返回码, GdipCreateSolidFill (参数_ARGB颜色, m_SolidBrush))
置指针 (m_SolidBrush)
返回 (等于 (全局_返回码, 0))


.子程序 置颜色, 逻辑型, 公开, GdipSetSolidFillColor
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetSolidFillColor (m_SolidBrush, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))

.子程序 取颜色, 整数型, 公开, GdipGetSolidFillColor
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetSolidFillColor (m_SolidBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.类模块 GP阴影画刷, GP画刷, , 

.程序集变量 m_HatchBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_HatchBrush, 参数_指针)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 创建, 逻辑型, 公开, GdipCreateHatchBrush
.参数 参数_阴影风格, 整数型, , “阴影风格_”开头常量。
.参数 参数_前景ARGB颜色, 整数型, , 
.参数 参数_背景ARGB颜色, 整数型, , 

销毁 ()
赋值 (全局_返回码, GdipCreateHatchBrush (参数_阴影风格, 参数_前景ARGB颜色, 参数_背景ARGB颜色, m_HatchBrush))
置指针 (m_HatchBrush)
返回 (等于 (全局_返回码, 0))

.子程序 取阴影风格, 整数型, 公开, GdipGetHatchStyle。返回“阴影风格_”开头常量。
.局部变量 局部_阴影风格, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchStyle (m_HatchBrush, 局部_阴影风格))
返回 (局部_阴影风格)

.子程序 取前景色, 整数型, 公开, GdipGetHatchForegroundColor。返回前景ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchForegroundColor (m_HatchBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)


.子程序 取背景色, 整数型, 公开, GdipGetHatchBackgroundColor。返回背景ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchBackgroundColor (m_HatchBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.类模块 GP纹理画刷, GP画刷, , 

.程序集变量 m_TextureBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_TextureBrush, 参数_指针)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 创建, 逻辑型, 公开, GdipCreateTexture
.参数 参数_图像, GP图像, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：“环绕模式_平铺”

销毁 ()
.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture (参数_图像.取指针 (), 参数_环绕模式, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形, 逻辑型, 公开, GdipCreateTexture2
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。

销毁 ()
.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture2 (参数_图像.取指针 (), 参数_环绕模式, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形I, 逻辑型, 公开, GdipCreateTexture2I
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。

销毁 ()
.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture2I (参数_图像.取指针 (), 参数_环绕模式, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自图像属性, 逻辑型, 公开, GdipCreateTextureIA
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_图像属性, GP图像属性, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateTextureIA (参数_图像.取指针 (), 参数_图像属性.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自图像属性I, 逻辑型, 公开, GdipCreateTextureIAI
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_图像属性, GP图像属性, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateTextureIAI (参数_图像.取指针 (), 参数_图像属性.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 变形取矩阵, 逻辑型, 公开, GdipGetTextureTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureTransform (m_TextureBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, 公开, GdipSetTextureTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetTextureTransform (m_TextureBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, 公开, GdipResetTextureTransform
赋值 (全局_返回码, GdipResetTextureTransform (m_TextureBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, 公开, GdipMultiplyTextureTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyTextureTransform (m_TextureBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, 公开, GdipTranslateTextureTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateTextureTransform (m_TextureBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, 公开, GdipScaleTextureTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleTextureTransform (m_TextureBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, 公开, GdipRotateTextureTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateTextureTransform (m_TextureBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 取环绕模式, 整数型, 公开, GdipGetTextureWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureWrapMode (m_TextureBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, 公开, GdipSetTextureWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetTextureWrapMode (m_TextureBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 取图像, 逻辑型, 公开, GdipGetTextureImage
.参数 参数_图像, GP图像, 参考, 

.局部变量 局部_图像, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureImage (m_TextureBrush, 局部_图像))
参数_图像.置指针 (局部_图像)
返回 (等于 (全局_返回码, 0))

.类模块 GP线性渐变画刷, GP画刷, , 

.程序集变量 m_LinearGradientBrush, 整数型, , , 
.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_LinearGradientBrush, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipCreateLineBrush
.参数 参数_起点坐标, GP_坐标F, , 
.参数 参数_终点坐标, GP_坐标F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrush (参数_起点坐标, 参数_终点坐标, 参数_起点ARGB颜色, 参数_终点ARGB颜色, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建I, 逻辑型, 公开, GdipCreateLineBrushI
.参数 参数_起点坐标, GP_坐标L, , 
.参数 参数_终点坐标, GP_坐标L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrushI (参数_起点坐标, 参数_终点坐标, 参数_起点ARGB颜色, 参数_终点ARGB颜色, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形, 逻辑型, 公开, GdipCreateLineBrushFromRect
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_线性渐变模式, 整数型, 可空, “线性渐变模式_”开头常量。

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrushFromRect (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_线性渐变模式, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形I, 逻辑型, 公开, GdipCreateLineBrushFromRectI
.参数 参数_矩形, GP_矩形L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_线性渐变模式, 整数型, 可空, “线性渐变模式_”开头常量。

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrushFromRectI (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_线性渐变模式, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形角度, 逻辑型, 公开, GdipCreateLineBrushFromRectWithAngle
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_角度, 小数型, , 
.参数 参数_角度是否可扩展, 逻辑型, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrushFromRectWithAngle (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_角度, 参数_角度是否可扩展, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形角度I, 逻辑型, 公开, GdipCreateLineBrushFromRectWithAngleI
.参数 参数_矩形, GP_矩形L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_角度, 小数型, , 
.参数 参数_角度是否可扩展, 逻辑型, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateLineBrushFromRectWithAngleI (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_角度, 参数_角度是否可扩展, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 取线性渐变色, 逻辑型, 公开, GdipGetLineColors
.参数 参数_起点ARGB颜色, 整数型, 参考, 
.参数 参数_终点ARGB颜色, 整数型, 参考, 

.局部变量 局部_颜色, 整数型, , "2", 

赋值 (全局_返回码, GdipGetLineColors (m_LinearGradientBrush, 局部_颜色))
赋值 (参数_起点ARGB颜色, 局部_颜色 [1])
赋值 (参数_终点ARGB颜色, 局部_颜色 [2])
返回 (等于 (全局_返回码, 0))

.子程序 置线性渐变色, 逻辑型, 公开, GdipSetLineColors
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetLineColors (m_LinearGradientBrush, 参数_起点ARGB颜色, 参数_终点ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 取矩形, GP_矩形F, 公开, GdipGetLineRect
.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetLineRect (m_LinearGradientBrush, 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形I, GP_矩形L, 公开, GdipGetLineRectI
.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (全局_返回码, GdipGetLineRectI (m_LinearGradientBrush, 局部_矩形))
返回 (局部_矩形)

.子程序 置伽玛校正, 逻辑型, 公开, GdipSetLineGammaCorrection
.参数 参数_是否启用校正, 逻辑型, , 

赋值 (全局_返回码, GdipSetLineGammaCorrection (m_LinearGradientBrush, 参数_是否启用校正))
返回 (等于 (全局_返回码, 0))


.子程序 取伽玛校正, 逻辑型, 公开, GdipSetLineGammaCorrection
.局部变量 局部_是否启用校正, 逻辑型, , , 

赋值 (全局_返回码, GdipGetLineGammaCorrection (m_LinearGradientBrush, 局部_是否启用校正))
返回 (局部_是否启用校正)

.子程序 置混合, 逻辑型, 公开, GdipSetLineBlend
.参数 参数_颜色比例, 小数型, 数组, 如：{0，0.5，1}
.参数 参数_位置比例, 小数型, 数组, 如：{0，0.2，1}

赋值 (全局_返回码, GdipSetLineBlend (m_LinearGradientBrush, 参数_颜色比例, 参数_位置比例, 取数组成员数 (参数_颜色比例)))
返回 (等于 (全局_返回码, 0))

.子程序 取混合, 整数型, 公开, GdipGetLineBlend。返回总数。
.参数 参数_颜色比例, 小数型, 数组, 提供小数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 同上。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetLineBlendCount (m_LinearGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_颜色比例, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetLineBlend (m_LinearGradientBrush, 参数_颜色比例, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置预设混合, 逻辑型, 公开, GdipSetLinePresetBlend
.参数 参数_ARGB颜色, 整数型, 数组, ARGB颜色数组。
.参数 参数_位置比例, 小数型, 数组, 如{0，0.3，1}

赋值 (全局_返回码, GdipSetLinePresetBlend (m_LinearGradientBrush, 参数_ARGB颜色, 参数_位置比例, 取数组成员数 (参数_ARGB颜色)))
返回 (等于 (全局_返回码, 0))


.子程序 取预设混合, 整数型, 公开, GdipGetLineBlend。返回总数。
.参数 参数_ARGB颜色, 整数型, 数组, 提供整数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 提供小数型数组变量，装载数据。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetLinePresetBlendCount (m_LinearGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_ARGB颜色, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetLinePresetBlend (m_LinearGradientBrush, 参数_ARGB颜色, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置钟形混合, 逻辑型, 公开, GdipSetLineSigmaBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetLineSigmaBlend (m_LinearGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 置线性混合, 逻辑型, 公开, GdipSetLineLinearBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetLineLinearBlend (m_LinearGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 取环绕模式, 整数型, 公开, GdipGetLineWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetLineWrapMode (m_LinearGradientBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, 公开, GdipSetLineWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetLineWrapMode (m_LinearGradientBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, 公开, GdipGetLineTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetLineTransform (m_LinearGradientBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, 公开, GdipSetLineTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetLineTransform (m_LinearGradientBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, 公开, GdipResetLineTransform
赋值 (全局_返回码, GdipResetLineTransform (m_LinearGradientBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, 公开, GdipMultiplyLineTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyLineTransform (m_LinearGradientBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, 公开, GdipTranslateLineTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateLineTransform (m_LinearGradientBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, 公开, GdipScaleLineTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleLineTransform (m_LinearGradientBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, 公开, GdipRotateLineTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateLineTransform (m_LinearGradientBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.类模块 GP路径渐变画刷, GP画刷, , 

.程序集变量 m_PathGradientBrush, 整数型, , , 
.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_PathGradientBrush, 参数_指针)

.子程序 创建, 逻辑型, 公开, GdipCreatePathGradient
.参数 参数_坐标组, GP_坐标F, 数组, 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：#环绕模式_固定

销毁 ()
.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_固定)
.如果真结束
赋值 (全局_返回码, GdipCreatePathGradient (参数_坐标组, 取数组成员数 (参数_坐标组), 参数_环绕模式, m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建I, 逻辑型, 公开, GdipCreatePathGradientI
.参数 参数_坐标组, GP_坐标L, 数组, 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：#环绕模式_固定

销毁 ()
.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_固定)
.如果真结束
赋值 (全局_返回码, GdipCreatePathGradientI (参数_坐标组, 取数组成员数 (参数_坐标组), 参数_环绕模式, m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自路径, 逻辑型, 公开, GdipCreatePathGradientFromPath
.参数 参数_路径, GP路径, , 

销毁 ()
赋值 (全局_返回码, GdipCreatePathGradientFromPath (参数_路径.取指针 (), m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 取中心点颜色, 整数型, 公开, GdipGetPathGradientCenterColor。返回ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterColor (m_PathGradientBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.子程序 置中心点颜色, 逻辑型, 公开, GdipSetPathGradientCenterColor
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetPathGradientCenterColor (m_PathGradientBrush, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 取坐标数, 整数型, 公开, GdipGetPathGradientPointCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPointCount (m_PathGradientBrush, 局部_count))
返回 (局部_count)

.子程序 取周围颜色数, 整数型, 公开, GdipGetPathGradientSurroundColorCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientSurroundColorCount (m_PathGradientBrush, 局部_count))
返回 (局部_count)

.子程序 取周围颜色, 逻辑型, 公开, GdipGetPathGradientSurroundColorsWithCount
.参数 参数_ARGB颜色, 整数型, 参考 数组, 
.参数 参数_数量, 整数型, 参考, [in/out]

赋值 (全局_返回码, GdipGetPathGradientSurroundColorsWithCount (m_PathGradientBrush, 参数_ARGB颜色, 参数_数量))
返回 (等于 (全局_返回码, 0))

.子程序 置周围颜色, 逻辑型, 公开, GdipSetPathGradientSurroundColorsWithCount
.参数 参数_ARGB颜色, 整数型, 数组, 
.参数 参数_数量, 整数型, 参考 可空, [in/out]

.如果真 (是否为空 (参数_数量))
    赋值 (参数_数量, 取数组成员数 (参数_ARGB颜色))
.如果真结束
赋值 (全局_返回码, GdipSetPathGradientSurroundColorsWithCount (m_PathGradientBrush, 参数_ARGB颜色, 参数_数量))
返回 (等于 (全局_返回码, 0))


.子程序 取路径, 逻辑型, 公开, GdipGetPathGradientPath
.参数 参数_路径, GP路径, 参考, 

.局部变量 局部_路径, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPath (m_PathGradientBrush, 局部_路径))
参数_路径.置指针 (局部_路径)
返回 (等于 (全局_返回码, 0))

.子程序 置路径, 逻辑型, 公开, GdipGetPathGradientPath
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipGetPathGradientPath (m_PathGradientBrush, 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取中心点, GP_坐标F, 公开, GdipGetPathGradientCenterPoint
.局部变量 局部_坐标, GP_坐标F, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterPoint (m_PathGradientBrush, 局部_坐标))
返回 (局部_坐标)


.子程序 取中心点I, GP_坐标L, 公开, GdipGetPathGradientCenterPointI
.局部变量 局部_坐标, GP_坐标L, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterPointI (m_PathGradientBrush, 局部_坐标))
返回 (局部_坐标)

.子程序 置中心点, 逻辑型, 公开, GdipSetPathGradientCenterPoint
.参数 参数_坐标, GP_坐标F, , 

赋值 (全局_返回码, GdipSetPathGradientCenterPoint (m_PathGradientBrush, 参数_坐标))
返回 (等于 (全局_返回码, 0))


.子程序 置中心点I, 逻辑型, 公开, GdipSetPathGradientCenterPointI
.参数 参数_坐标, GP_坐标L, , 

赋值 (全局_返回码, GdipSetPathGradientCenterPointI (m_PathGradientBrush, 参数_坐标))
返回 (等于 (全局_返回码, 0))

.子程序 取矩形, GP_矩形F, 公开, GdipGetPathGradientRect
.局部变量 局部_矩形, GP_矩形F, , , 

赋值 (全局_返回码, GdipGetPathGradientRect (m_PathGradientBrush, 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形I, GP_矩形L, 公开, GdipGetPathGradientRectI
.局部变量 局部_矩形, GP_矩形L, , , 

赋值 (全局_返回码, GdipGetPathGradientRectI (m_PathGradientBrush, 局部_矩形))
返回 (局部_矩形)

.子程序 置伽玛校正, 逻辑型, 公开, GdipSetPathGradientGammaCorrection
.参数 参数_是否启用校正, 逻辑型, , 

赋值 (全局_返回码, GdipSetPathGradientGammaCorrection (m_PathGradientBrush, 参数_是否启用校正))
返回 (等于 (全局_返回码, 0))


.子程序 取伽玛校正, 逻辑型, 公开, GdipGetPathGradientGammaCorrection
.局部变量 局部_是否启用校正, 逻辑型, , , 

赋值 (全局_返回码, GdipGetPathGradientGammaCorrection (m_PathGradientBrush, 局部_是否启用校正))
返回 (局部_是否启用校正)

.子程序 置混合, 逻辑型, 公开, GdipSetPathGradientBlend
.参数 参数_颜色比例, 小数型, 数组, 如：{0，0.5，1}
.参数 参数_位置比例, 小数型, 数组, 如：{0，0.2，1}

赋值 (全局_返回码, GdipSetPathGradientBlend (m_PathGradientBrush, 参数_颜色比例, 参数_位置比例, 取数组成员数 (参数_颜色比例)))
返回 (等于 (全局_返回码, 0))

.子程序 取混合, 整数型, 公开, GdipGetPathGradientBlend。返回总数。
.参数 参数_颜色比例, 小数型, 数组, 提供小数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 同上。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientBlendCount (m_PathGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_颜色比例, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetPathGradientBlend (m_PathGradientBrush, 参数_颜色比例, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 取中心点比例, 逻辑型, 公开, GdipGetPathGradientFocusScales
.参数 参数_比例X, 小数型, 参考, 
.参数 参数_比例Y, 小数型, 参考, 

赋值 (全局_返回码, GdipGetPathGradientFocusScales (m_PathGradientBrush, 参数_比例X, 参数_比例Y))
返回 (等于 (全局_返回码, 0))


.子程序 置中心点比例, 逻辑型, 公开, GdipGetPathGradientFocusScales
.参数 参数_比例X, 小数型, , 0到1之间的小数。
.参数 参数_比例Y, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientFocusScales (m_PathGradientBrush, 参数_比例X, 参数_比例Y))
返回 (等于 (全局_返回码, 0))

.子程序 置预设颜色, 逻辑型, 公开, GdipSetPathGradientPresetBlend
.参数 参数_ARGB颜色, 整数型, 数组, ARGB颜色数组。
.参数 参数_位置比例, 小数型, 数组, 如{0，0.3，1}

赋值 (全局_返回码, GdipSetPathGradientPresetBlend (m_PathGradientBrush, 参数_ARGB颜色, 参数_位置比例, 取数组成员数 (参数_ARGB颜色)))
返回 (等于 (全局_返回码, 0))


.子程序 取预设颜色, 整数型, 公开, GdipGetPathGradientPresetBlend。返回总数。
.参数 参数_ARGB颜色, 整数型, 数组, 提供整数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 提供小数型数组变量，装载数据。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPresetBlendCount (m_PathGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_ARGB颜色, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetPathGradientPresetBlend (m_PathGradientBrush, 参数_ARGB颜色, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置钟形混合, 逻辑型, 公开, GdipSetPathGradientSigmaBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientSigmaBlend (m_PathGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 置线性混合, 逻辑型, 公开, GdipSetPathGradientLinearBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientLinearBlend (m_PathGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 取环绕模式, 整数型, 公开, GdipGetPathGradientWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientWrapMode (m_PathGradientBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, 公开, GdipSetPathGradientWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetPathGradientWrapMode (m_PathGradientBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, 公开, GdipGetPathGradientTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientTransform (m_PathGradientBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, 公开, GdipSetPathGradientTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetPathGradientTransform (m_PathGradientBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, 公开, GdipResetPathGradientTransform
赋值 (全局_返回码, GdipResetPathGradientTransform (m_PathGradientBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, 公开, GdipMultiplyPathGradientTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyPathGradientTransform (m_PathGradientBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, 公开, GdipTranslatePathGradientTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslatePathGradientTransform (m_PathGradientBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, 公开, GdipScalePathGradientTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScalePathGradientTransform (m_PathGradientBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, 公开, GdipRotatePathGradientTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotatePathGradientTransform (m_PathGradientBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.类模块 GP自定义线帽, Gdiplus基类, , 

.程序集变量 m_CustomLineCap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 销毁, 逻辑型, 公开, GdipDeleteCustomLineCap
.如果真 (等于 (m_CustomLineCap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteCustomLineCap (m_CustomLineCap))
置指针 (0)
返回 (等于 (全局_返回码, 0))


.子程序 创建, 逻辑型, 公开, GdipCreateCustomLineCap
.参数 参数_填充路径, GP路径, 可空, “参数_填充路径”和“参数_笔画路径”二选一，如果两参数都是非空，将忽略“参数_填充路径”
.参数 参数_笔画路径, GP路径, 可空, 
.参数 参数_基线帽, 整数型, 可空, 默认为：“线帽样式_平线帽”
.参数 参数_基距离, 小数型, 可空, 默认为：0

销毁 ()
赋值 (全局_返回码, GdipCreateCustomLineCap (参数_填充路径, 参数_笔画路径, 参数_基线帽, 参数_基距离, m_CustomLineCap))
置指针 (m_CustomLineCap)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, 公开, GdipCloneCustomLineCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipCloneCustomLineCap (m_CustomLineCap, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))

.子程序 置笔画线帽, 逻辑型, 公开, GdipSetCustomLineCapStrokeCaps
.参数 参数_起点线帽, 整数型, , “线帽样式_”开头常量
.参数 参数_终点线帽, 整数型, , “线帽样式_”开头常量

赋值 (全局_返回码, GdipSetCustomLineCapStrokeCaps (m_CustomLineCap, 参数_起点线帽, 参数_终点线帽))
返回 (等于 (全局_返回码, 0))

.子程序 取笔画线帽, 逻辑型, 公开, GdipSetCustomLineCapStrokeCaps
.参数 参数_起点线帽, 整数型, 参考, 只能提供变量，装载数据。
.参数 参数_终点线帽, 整数型, 参考, 只能提供变量，装载数据。

赋值 (全局_返回码, GdipGetCustomLineCapStrokeCaps (m_CustomLineCap, 参数_起点线帽, 参数_终点线帽))
返回 (等于 (全局_返回码, 0))


.子程序 置笔画连线方式, 逻辑型, 公开, GdipSetCustomLineCapStrokeJoin
.参数 参数_连线方式, 整数型, , “连线方式_”开头常量。

赋值 (全局_返回码, GdipSetCustomLineCapStrokeJoin (m_CustomLineCap, 参数_连线方式))
返回 (等于 (全局_返回码, 0))


.子程序 取笔画连线方式, 整数型, 公开, GdipGetCustomLineCapStrokeJoin。返回“连线方式_”开头常量。
.局部变量 局部_连线方式, 整数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapStrokeJoin (m_CustomLineCap, 局部_连线方式))
返回 (局部_连线方式)

.子程序 置基线帽, 逻辑型, 公开, GdipSetCustomLineCapBaseCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量

赋值 (全局_返回码, GdipSetCustomLineCapBaseCap (m_CustomLineCap, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))

.子程序 取基线帽, 整数型, 公开, GdipGetCustomLineCapBaseCap。返回“线帽样式_”开头常量
.局部变量 局部_线帽样式, 整数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapBaseCap (m_CustomLineCap, 局部_线帽样式))
返回 (局部_线帽样式)

.子程序 置基距离, 逻辑型, 公开, GdipSetCustomLineCapBaseInset
.参数 参数_基距离, 小数型, , 

赋值 (全局_返回码, GdipSetCustomLineCapBaseInset (m_CustomLineCap, 参数_基距离))
返回 (等于 (全局_返回码, 0))


.子程序 取基距离, 小数型, 公开, GdipGetCustomLineCapBaseInset。返回“线帽样式_”开头常量
.局部变量 局部_基距离, 小数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapBaseInset (m_CustomLineCap, 局部_基距离))
返回 (局部_基距离)

.子程序 置宽比例, 逻辑型, 公开, GdipSetCustomLineCapWidthScale
.参数 参数_宽比例, 小数型, , 

赋值 (全局_返回码, GdipSetCustomLineCapWidthScale (m_CustomLineCap, 参数_宽比例))
返回 (等于 (全局_返回码, 0))


.子程序 取宽比例, 小数型, 公开, GdipGetCustomLineCapWidthScale。
.局部变量 局部_宽比例, 小数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapWidthScale (m_CustomLineCap, 局部_宽比例))
返回 (局部_宽比例)

.类模块 GP字体集, Gdiplus基类, , 

.程序集变量 m_FontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_FontCollection, 参数_指针)
方法_子置指针 (m_FontCollection)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 取字体族数, 整数型, 公开, GdipGetFontCollectionFamilyCount。
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipGetFontCollectionFamilyCount (m_FontCollection, 局部_总数))
返回 (局部_总数)

.子程序 取字体族列表, 整数型, 公开, GdipGetFontCollectionFamilyList。成功返回实际字体族数量。
.参数 参数_数量, 整数型, , 
.参数 参数_字体族, GP字体族, 参考 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_字体族, 整数型, , "0", 
.局部变量 i, 整数型, , , 

.如果真 (小于或等于 (参数_数量, 0))
    赋值 (全局_返回码, 2)
    返回 (0)
.如果真结束
重定义数组 (局部_字体族, 假, 参数_数量)
重定义数组 (参数_字体族, 假, 参数_数量)
赋值 (全局_返回码, GdipGetFontCollectionFamilyList (m_FontCollection, 参数_数量, 局部_字体族, 局部_数量))
.如果真 (等于 (全局_返回码, 0))
    .计次循环首 (取数组成员数 (局部_字体族), i)
        参数_字体族.置指针 ( [i], 局部_字体族 [i])
    .计次循环尾 ()
.如果真结束
返回 (局部_数量)


.类模块 GP系统字体集, GP字体集, , 

.程序集变量 m_InstalledFontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_InstalledFontCollection, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipNewInstalledFontCollection
赋值 (全局_返回码, GdipNewInstalledFontCollection (m_InstalledFontCollection))
置指针 (m_InstalledFontCollection)
返回 (等于 (全局_返回码, 0))


.类模块 GP私有字体集, GP字体集, , 

.程序集变量 m_PrivateFontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_PrivateFontCollection, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipNewPrivateFontCollection
销毁 ()
赋值 (全局_返回码, GdipNewPrivateFontCollection (m_PrivateFontCollection))
置指针 (m_PrivateFontCollection)
返回 (等于 (全局_返回码, 0))

.子程序 销毁, 逻辑型, 公开, GdipDeletePrivateFontCollection
.如果真 (等于 (m_PrivateFontCollection, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePrivateFontCollection (m_PrivateFontCollection))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 添加字体文件, 逻辑型, 公开, GdipPrivateAddFontFile
.参数 参数_字体文件名, 文本型, , 

赋值 (全局_返回码, GdipPrivateAddFontFile (m_PrivateFontCollection, A2W (参数_字体文件名)))
返回 (等于 (全局_返回码, 0))

.子程序 添加字体字节集, 逻辑型, 公开, 
.参数 参数_字体字节集, 字节集, , 

.局部变量 局部_Istream, IStream, , , 

局部_Istream.创建 (参数_字体字节集)
赋值 (全局_返回码, GdipPrivateAddMemoryFont (m_PrivateFontCollection, 局部_Istream.取内存句柄 (), 局部_Istream.取尺寸 ()))
返回 (等于 (全局_返回码, 0))

.类模块 GP文本格式, Gdiplus基类, , 

.程序集变量 m_StringFormat, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_StringFormat, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteStringFormat
.如果真 (等于 (m_StringFormat, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteStringFormat (m_StringFormat))
置指针 (0)
返回 (等于 (全局_返回码, 0))


.子程序 创建, 逻辑型, 公开, GdipCreateStringFormat
.参数 参数_格式标志, 整数型, 可空, “文本格式标志_”开头常量。
.参数 参数_语言, 短整数型, 可空, 默认为：LANG_NEUTRAL=0

销毁 ()
赋值 (全局_返回码, GdipCreateStringFormat (参数_格式标志, 参数_语言, m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用默认, 逻辑型, 公开, GdipStringFormatGetGenericDefault
销毁 ()
赋值 (全局_返回码, GdipStringFormatGetGenericDefault (m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用印刷, 逻辑型, 公开, GdipStringFormatGetGenericTypographic
销毁 ()
赋值 (全局_返回码, GdipStringFormatGetGenericTypographic (m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneStringFormat
.参数 参数_文本格式, GP文本格式, 参考, 

.局部变量 局部_文本格式, 整数型, , , 

赋值 (全局_返回码, GdipCloneStringFormat (m_StringFormat, 局部_文本格式))
参数_文本格式.置指针 (局部_文本格式)
返回 (等于 (全局_返回码, 0))

.子程序 置格式标志, 逻辑型, 公开, GdipSetStringFormatFlags
.参数 参数_格式标志, 整数型, , “文本格式标志_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatFlags (m_StringFormat, 参数_格式标志))
返回 (等于 (全局_返回码, 0))

.子程序 取格式标志, 整数型, 公开, GdipGetStringFormatFlags。返回“文本格式标志_”开头常量。
.局部变量 局部_标志, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatFlags (m_StringFormat, 局部_标志))
返回 (局部_标志)

.子程序 置对齐, 逻辑型, 公开, GdipSetStringFormatAlign
.参数 参数_对齐方式, 整数型, , “文本对齐_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatAlign (m_StringFormat, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))


.子程序 取对齐, 整数型, 公开, GdipGetStringFormatAlign。返回“文本对齐_”开头常量。
.局部变量 局部_对齐, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatAlign (m_StringFormat, 局部_对齐))
返回 (局部_对齐)


.子程序 置行对齐, 逻辑型, 公开, GdipSetStringFormatLineAlign
.参数 参数_对齐方式, 整数型, , “文本对齐_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatLineAlign (m_StringFormat, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))


.子程序 取行对齐, 整数型, 公开, GdipGetStringFormatLineAlign。返回“文本对齐_”开头常量。
.局部变量 局部_对齐, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatLineAlign (m_StringFormat, 局部_对齐))
返回 (局部_对齐)

.子程序 置修整, 逻辑型, 公开, GdipSetStringFormatTrimming
.参数 参数_修整方式, 整数型, , “文本修整_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatTrimming (m_StringFormat, 参数_修整方式))
返回 (等于 (全局_返回码, 0))


.子程序 取修整, 整数型, 公开, GdipGetStringFormatTrimming。返回“文本修整_”开头常量。
.局部变量 局部_修整, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatTrimming (m_StringFormat, 局部_修整))
返回 (局部_修整)

.子程序 置热键前缀, 逻辑型, 公开, GdipSetStringFormatHotkeyPrefix。字符(&)
.参数 参数_热键前缀, 整数型, , “热键前缀_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatHotkeyPrefix (m_StringFormat, 参数_热键前缀))
返回 (等于 (全局_返回码, 0))


.子程序 取热键前缀, 整数型, 公开, GdipGetStringFormatHotkeyPrefix。返回“热键前缀_”开头常量。
.局部变量 局部_热键前缀, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatHotkeyPrefix (m_StringFormat, 局部_热键前缀))
返回 (局部_热键前缀)

.子程序 置制表位偏移, 逻辑型, 公开, GdipSetStringFormatTabStops
.参数 参数_初始偏移量, 小数型, , 文本行开头和第一个制表位之间的空格数
.参数 参数_偏移距离, 小数型, 数组, 数组中的每个制表位偏移量（第一个除外）都是相对于前一个的。第一个制表位偏移量相对于由 “参数_初始偏移量” 指定的初始偏移位置。例如，如果初始偏移位置是 8，第一个制表位偏移量是 50，则第一个制表位的位置是 58。如果初始偏移位置是零，则第一个制表位偏移量相对于位置 0（即原点字符串）。

赋值 (全局_返回码, GdipSetStringFormatTabStops (m_StringFormat, 参数_初始偏移量, 取数组成员数 (参数_偏移距离), 参数_偏移距离))
返回 (等于 (全局_返回码, 0))

.子程序 取制表位偏移, 整数型, 公开, GdipGetStringFormatTabStops。返回制表位偏移总数。
.参数 参数_初始偏移量, 小数型, 参考, 文本行开头和第一个制表位之间的空格数
.参数 参数_偏移距离, 小数型, 参考 数组, 数组中的每个制表位偏移量（第一个除外）都是相对于前一个的。第一个制表位偏移量相对于由 “参数_初始偏移量” 指定的初始偏移位置。例如，如果初始偏移位置是 8，第一个制表位偏移量是 50，则第一个制表位的位置是 58。如果初始偏移位置是零，则第一个制表位偏移量相对于位置 0（即原点字符串）。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatTabStopCount (m_StringFormat, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_偏移距离, 假, 参数_初始偏移量)
赋值 (全局_返回码, GdipGetStringFormatTabStops (m_StringFormat, 局部_count, 参数_初始偏移量, 参数_偏移距离))
返回 (局部_count)


.子程序 置数字替换, 逻辑型, 公开, GdipSetStringFormatDigitSubstitution
.参数 参数_数字替换, 整数型, , “文本数字替换_”开头常量。
.参数 参数_语言, 短整数型, 可空, 默认为：LANG_NEUTRAL

赋值 (全局_返回码, GdipSetStringFormatDigitSubstitution (m_StringFormat, 参数_语言, 参数_数字替换))
返回 (等于 (全局_返回码, 0))

.子程序 取数字替换, 逻辑型, 公开, GdipGetStringFormatDigitSubstitution
.参数 参数_数字替换, 整数型, 参考, 返回“文本数字替换_”开头常量。
.参数 参数_语言, 短整数型, 参考 可空, 

赋值 (全局_返回码, GdipGetStringFormatDigitSubstitution (m_StringFormat, 参数_语言, 参数_数字替换))
返回 (等于 (全局_返回码, 0))


.子程序 置测量字符范围, 逻辑型, 公开, GdipSetStringFormatMeasurableCharacterRanges
.参数 参数_字符范围, GP_测试字符范围, 数组, 

赋值 (全局_返回码, GdipSetStringFormatMeasurableCharacterRanges (m_StringFormat, 取数组成员数 (参数_字符范围), 参数_字符范围))
返回 (等于 (全局_返回码, 0))

.子程序 取测量字符范围数, 整数型, 公开, GdipGetStringFormatMeasurableCharacterRangeCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatMeasurableCharacterRangeCount (m_StringFormat, 局部_count))
返回 (局部_count)

.类模块 GP位图, GP图像, , 

.程序集变量 m_Bitmap, 整数型, , , 
.程序集变量 m_Istream, IStream, , , 
.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Bitmap, 参数_指针)


.子程序 销毁, 逻辑型, 公开, GdipDisposeImage。
.如果真 (等于 (m_Bitmap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDisposeImage (m_Bitmap))
置指针 (0)
m_Istream.释放 ()
返回 (等于 (全局_返回码, 0))

.子程序 创建自文件, 逻辑型, 公开, GdipCreateBitmapFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用ICC文件调整颜色。

销毁 ()
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipCreateBitmapFromFileICM (A2W (参数_文件名), m_Bitmap))
.否则
    赋值 (全局_返回码, GdipCreateBitmapFromFile (A2W (参数_文件名), m_Bitmap))
.如果结束

置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自字节集, 逻辑型, 公开, GdipCreateBitmapFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用ICC文件调整颜色。

销毁 ()
m_Istream.创建 (参数_字节集)
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipCreateBitmapFromStreamICM (m_Istream.取字节流指针 (), m_Bitmap))
.否则
    赋值 (全局_返回码, GdipCreateBitmapFromStream (m_Istream.取字节流指针 (), m_Bitmap))
.如果结束

置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))

.子程序 创建自扫描行, 逻辑型, 公开, GdipCreateBitmapFromScan0
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_跨步, 整数型, , 指定相邻扫描行开始处之间字节偏移量的整数。这通常（但不一定）是以像素格式表示的字节数（例如，2 表示每像素 16 位）乘以位图的宽度。传递给此参数的值必须为 4 的倍数。提供一个公式：左移(右移(参数_宽度*位深+31,5),2)
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_像素数据, 整数型, 可空, 指向包含像素数据的字节集指针。

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromScan0 (参数_宽度, 参数_高度, 参数_跨步, 参数_像素格式, 参数_像素数据, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自像素格式, 逻辑型, 公开, GdipCreateBitmapFromScan0
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_像素格式, 整数型, 可空, “像素格式_”开头常量。默认为：“像素格式_32bppARGB”

销毁 ()
.如果真 (是否为空 (参数_像素格式))
    赋值 (参数_像素格式, #像素格式_32bppARGB)
.如果真结束
赋值 (全局_返回码, GdipCreateBitmapFromScan0 (参数_宽度, 参数_高度, 0, 参数_像素格式, 0, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自图形, 逻辑型, 公开, GdipCreateBitmapFromGraphics
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_图形, GDI_GP_图形, , 

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromGraphics (参数_宽度, 参数_高度, 参数_图形.取指针 (), m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自GDI对象, 逻辑型, 公开, GdipCreateBitmapFromGdiDib
.参数 参数_BITMAPINFO, 整数型, , BITMAPINFO结构指针。
.参数 参数_位图数据, 整数型, , 位图数据指针。

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromGdiDib (参数_BITMAPINFO, 参数_位图数据, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自位图句柄, 逻辑型, 公开, GdipCreateBitmapFromHBITMAP
.参数 参数_位图句柄, 整数型, , hBitmap
.参数 参数_调色板句柄, 整数型, 可空, 如果位图句柄不是一个设备无关位图，则用于定义位图颜色。

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromHBITMAP (参数_位图句柄, 参数_调色板句柄, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自图标句柄, 逻辑型, 公开, GdipCreateBitmapFromHICON
.参数 参数_图标句柄, 整数型, , hIcon

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromHICON (参数_图标句柄, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自资源, 逻辑型, 公开, GdipCreateBitmapFromResource
.参数 参数_实例句柄, 整数型, , 
.参数 参数_资源ID, 整数型, , 

销毁 ()
赋值 (全局_返回码, GdipCreateBitmapFromResource (参数_实例句柄, 参数_资源ID, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 取位图句柄, 整数型, 公开, GdipCreateHBITMAPFromBitmap。返回位图句柄。需要调用 DeleteObject 释放。
.参数 参数_背景ARGB颜色, 整数型, 可空, 指定背景色。如果位图完全不透明，则忽略此参数。

.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipCreateHBITMAPFromBitmap (m_Bitmap, 局部_句柄, 参数_背景ARGB颜色))
返回 (局部_句柄)


.子程序 取图标句柄, 整数型, 公开, GdipCreateHICONFromBitmap。返回图标句柄。需要调用 DestroyIcon 释放。
.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipCreateHICONFromBitmap (m_Bitmap, 局部_句柄))
返回 (局部_句柄)


.子程序 复制部分, 逻辑型, 公开, GdipCloneBitmapArea
.参数 参数_矩形, GP_矩形F, , 
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_位图, GP位图, 参考, 返回新的位图对象。

.局部变量 局部_位图, 整数型, , , 

赋值 (全局_返回码, GdipCloneBitmapArea (参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_像素格式, m_Bitmap, 局部_位图))
参数_位图.置指针 (局部_位图)
返回 (等于 (全局_返回码, 0))

.子程序 锁定数据, 逻辑型, 公开, GdipBitmapLockBits
.参数 参数_锁定矩形, GP_矩形L, , 被锁定的矩形范围。
.参数 参数_锁定模式, 整数型, , “图像锁定模式_”开头常量。
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_位图数据, GP_位图数据, 参考, [in,out]

赋值 (全局_返回码, GdipBitmapLockBits (m_Bitmap, 参数_锁定矩形, 参数_锁定模式, 参数_像素格式, 参数_位图数据))
返回 (等于 (全局_返回码, 0))

.子程序 解锁数据, 逻辑型, 公开, GdipBitmapUnlockBits
.参数 参数_位图数据, GP_位图数据, , 

赋值 (全局_返回码, GdipBitmapUnlockBits (m_Bitmap, 参数_位图数据))
返回 (等于 (全局_返回码, 0))

.子程序 取某点颜色, 整数型, 公开, GdipBitmapGetPixel。返回ARGB颜色值。
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipBitmapGetPixel (m_Bitmap, 参数_x, 参数_y, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.子程序 置某点颜色, 逻辑型, 公开, GdipBitmapSetPixel
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipBitmapSetPixel (m_Bitmap, 参数_x, 参数_y, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 置分辨率, 逻辑型, 公开, GdipBitmapSetResolution
.参数 参数_水平分辨率, 小数型, , 
.参数 参数_垂直分辨率, 小数型, , 

赋值 (全局_返回码, GdipBitmapSetResolution (m_Bitmap, 参数_水平分辨率, 参数_垂直分辨率))
返回 (等于 (全局_返回码, 0))

.类模块 GP图元文件, GP图像, , 

.程序集变量 m_Metafile, 整数型, , , 
.程序集变量 m_Istream, IStream, , , 
.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Metafile, 参数_指针)


.子程序 创建自文件, 逻辑型, 公开, GdipCreateMetafileFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_保留, 逻辑型, 可空, 

销毁 ()
赋值 (全局_返回码, GdipCreateMetafileFromFile (A2W (参数_文件名), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自字节集, 逻辑型, 公开, GdipCreateMetafileFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_保留, 逻辑型, 可空, 

销毁 ()
m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipCreateMetafileFromStream (m_Istream.取字节流指针 (), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自hWMF, 逻辑型, 公开, GdipCreateMetafileFromWmf
.参数 参数_WMF句柄, 整数型, , 
.参数 参数_APM文件头, GP_APM文件头, , 
.参数 参数_是否删除句柄, 逻辑型, 可空, 指定是否自动删除图元文件句柄。

销毁 ()
赋值 (全局_返回码, GdipCreateMetafileFromWmf (参数_WMF句柄, 参数_是否删除句柄, 参数_APM文件头, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自hEMF, 逻辑型, 公开, GdipCreateMetafileFromEmf
.参数 参数_EMF句柄, 整数型, , 
.参数 参数_是否删除句柄, 逻辑型, 可空, 指定是否自动删除图元文件句柄。

销毁 ()
赋值 (全局_返回码, GdipCreateMetafileFromEmf (参数_EMF句柄, 参数_是否删除句柄, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自WMF文件, 逻辑型, 公开, GdipCreateMetafileFromWmfFile
.参数 参数_文件名, 文本型, , 
.参数 参数_APM文件头, GP_APM文件头, , 

销毁 ()
赋值 (全局_返回码, GdipCreateMetafileFromWmfFile (A2W (参数_文件名), 参数_APM文件头, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录, 逻辑型, 公开, GdipRecordMetafile
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafile (参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录I, 逻辑型, 公开, GdipRecordMetafileI
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileI (参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自记录文件名, 逻辑型, 公开, GdipRecordMetafileFileName
.参数 参数_文件名, 文本型, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_适合
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileFileName (A2W (参数_文件名), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录文件名I, 逻辑型, 公开, GdipRecordMetafileFileNameI
.参数 参数_文件名, 文本型, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_适合
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileFileNameI (A2W (参数_文件名), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自记录字节集, 逻辑型, 公开, GdipRecordMetafileStream
.参数 参数_字节集, 字节集, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipRecordMetafileStream (m_Istream.取字节流指针 (), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录字节集I, 逻辑型, 公开, GdipRecordMetafileStreamI
.参数 参数_字节集, 字节集, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, GP_矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

销毁 ()
.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipRecordMetafileStreamI (m_Istream.取字节流指针 (), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, A2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 取图元文件头自hWMF, GP_图元文件头, 公开, GdipGetMetafileHeaderFromWmf
.参数 参数_hWMF, 整数型, , 
.参数 参数_APM文件头, GP_APM文件头, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromWmf (参数_hWMF, 参数_APM文件头, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头自hEMF, GP_图元文件头, 公开, GdipGetMetafileHeaderFromEmf
.参数 参数_hEMF, 整数型, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromEmf (参数_hEMF, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头自文件, GP_图元文件头, 公开, GdipGetMetafileHeaderFromFile
.参数 参数_文件名, 文本型, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromFile (A2W (参数_文件名), 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))


.子程序 取图元文件头自字节集, GP_图元文件头, 公开, GdipGetMetafileHeaderFromStream
.参数 参数_字节集, 字节集, , 

.局部变量 局部_缓冲区, 字节集, , , 
.局部变量 局部_IStream, IStream, , , 

局部_IStream.创建 (参数_字节集)
赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromStream (局部_IStream.取字节流指针 (), 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头, GP_图元文件头, 公开, GdipGetMetafileHeaderFromMetafile
.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromMetafile (m_Metafile, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 GetMetafileHeader, GP_图元文件头, , 
.参数 参数_缓冲区, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 局部_文件头, GP_图元文件头, , , 

赋值 (i, 1)
赋值 (局部_文件头.类型, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.大小, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.版本, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.增强EMF标识, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.水平分辨率, 取字节集数据 (参数_缓冲区, #小数型, i))
赋值 (局部_文件头.垂直分辨率, 取字节集数据 (参数_缓冲区, #小数型, i))
赋值 (局部_文件头.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.类型, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.大小, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.签名, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.版本, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.字节数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.记录数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.句柄数, 取字节集数据 (参数_缓冲区, #短整数型, i))
赋值 (局部_文件头.EMF文件头.保留, 取字节集数据 (参数_缓冲区, #短整数型, i))
赋值 (局部_文件头.EMF文件头.描述数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.描述偏移, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.描述数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.调色板项目数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备像素尺寸.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备像素尺寸.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备毫米尺寸.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备毫米尺寸.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
返回 (局部_文件头)

.子程序 置栅格化限制, 逻辑型, 公开, GdipSetMetafileDownLevelRasterizationLimit
.参数 参数_栅格化限制DPI, 整数型, , 

赋值 (全局_返回码, GdipSetMetafileDownLevelRasterizationLimit (m_Metafile, 参数_栅格化限制DPI))
返回 (等于 (全局_返回码, 0))


.子程序 取栅格化限制, 整数型, 公开, GdipGetMetafileDownLevelRasterizationLimit
.局部变量 局部_栅格化限制DPI, 整数型, , , 

赋值 (全局_返回码, GdipGetMetafileDownLevelRasterizationLimit (m_Metafile, 局部_栅格化限制DPI))
返回 (局部_栅格化限制DPI)


.子程序 取EMF句柄, 整数型, 公开, GdipGetHemfFromMetafile。需要使用 DeleteEnhMetafile 释放。
.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipGetHemfFromMetafile (m_Metafile, 局部_句柄))
返回 (局部_句柄)


.子程序 播放记录, 逻辑型, 公开, GdipPlayMetafileRecord
.参数 参数_记录类型, 整数型, , 
.参数 参数_标志, 整数型, , 0
.参数 参数_数据大小, 整数型, , 
.参数 参数_数据指针, 整数型, , 

赋值 (全局_返回码, GdipPlayMetafileRecord (m_Metafile, 参数_记录类型, 参数_标志, 参数_数据大小, 参数_数据指针))
返回 (等于 (全局_返回码, 0))


.类模块 GP缓存位图, Gdiplus基类, , 

.程序集变量 m_CachedBitmap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_CachedBitmap, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteCachedBitmap
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_CachedBitmap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteCachedBitmap (m_CachedBitmap))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateCachedBitmap
.参数 参数_位图, GP位图, , 
.参数 参数_图形, GDI_GP_图形, , 

销毁 ()
赋值 (全局_返回码, GdipCreateCachedBitmap (参数_位图.取指针 (), 参数_图形.取指针 (), m_CachedBitmap))
置指针 (m_CachedBitmap)
返回 (等于 (全局_返回码, 0))



 ' 不属于任何一个程序集、类模块的函数：
