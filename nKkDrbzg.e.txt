 ' 文件类型：Windows模块源码

 ' 程序名称：内存DLL注入
 ' 程序描述：可以将内存中的DLL直接注入到指定进程中，无需写出。支持黑月。

★★作者：易语言我吃了★★
 ' 程序作者：易语言我吃了
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.声音 测试DLL, " ' 已保存到：D:\易语言学习\Data\nKkDrbzg.e\测试DLL", , 
.图片 load_code, " ' 已保存到：D:\易语言学习\Data\nKkDrbzg.e\load_code", , 这三个代码的主要加载部分原作者为 凌晨孤星
.图片 getaddr_code, " ' 已保存到：D:\易语言学习\Data\nKkDrbzg.e\getaddr_code", , 我反汇编后稍微修改了下代码的前前后后 让这三个可以脱离 置入代码()运行
.图片 free_code, " ' 已保存到：D:\易语言学习\Data\nKkDrbzg.e\free_code", , 这样就可以在其他进程中执行 并返回数据~做这模块让我终于学会了最基本的汇编 挖哈哈~~庆祝下..


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




.全局变量 只运行一次, 逻辑型, , , 

.DLL命令 VirtualAllocEx, 整数型, "", "", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 VirtualFreeEx, 整数型, "", "", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 RtlAdjustPrivilege, 整数型, "ntdll.dll", "RtlAdjustPrivilege", 公开, 提升进程\线程权限
    .参数 Privilege, 整数型, , 20:调试 19:关机 18:启动 17:备份
    .参数 Enable, 整数型, , 1
    .参数 CurrentThread, 整数型, , 线程句柄或0（0表示整个进程） 
    .参数 Enabled, 整数型, 传址, 0

.DLL命令 OpenProcess, 整数型, "kernel32", "OpenProcess", 公开, 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 CreateRemoteThread, 整数型, "", "", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 CopyMemory, 整数型, "", "RtlMoveMemory", 公开, 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", , 
    .参数 hWnd1, 整数型, , 
    .参数 hWnd2, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 lpWindowName, 整数型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "user32", "GetWindowThreadProcessId", , 
    .参数 句柄, 整数型, , 
    .参数 lpdwProcessId, 整数型, 传址, 

.DLL命令 CloseHandle, 整数型, "kernel32", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 WaitForSingleObject, 整数型, "kernel32", "WaitForSingleObject", 公开, 等待线程
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 GetExitCodeThread, 整数型, "", "", 公开, 取线程返回值
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32", "GetCurrentProcessId", 公开, 取自进程PID

.DLL命令 ReadProcessMemory, 整数型, "kernel32", "ReadProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 DuplicateHandle, 整数型, "kernel32", "DuplicateHandle", 公开, 复制对象句柄
    .参数 hSourceProcessHandle, 整数型, , 
    .参数 hSourceHandle, 整数型, , 
    .参数 hTargetProcessHandle, 整数型, , 
    .参数 lpTargetHandle, 整数型, 传址, 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwOptions, 整数型, , 

.程序集 程序集1, , , 易语言我吃了 制作~ 支持黑月

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
输出调试文本 (“★★★★★★★★★★★★★★★★★★★★★”)
输出调试文本 (“★     欢迎使用 内存DLL注入模块V1.0     ★”)
输出调试文本 (“★          作者：易语言我吃了          ★”)
输出调试文本 (“★                                      ★”)
输出调试文本 (“★     版本V1.0 完成日期：10月14日      ★”)
输出调试文本 (“★★★★★★★★★★★★★★★★★★★★★”)

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 PID, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 窗口句柄, 整数型, , , 
.局部变量 注入, 内存DLL注入, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
运行 (相加 (读环境变量 (“SystemRoot”), “\system32\notepad.exe”), 假, )
赋值 (窗口句柄, FindWindowEx (FindWindowEx (0, 0, “Notepad”, 0), 0, “Edit”, 0)) ' 以记事本的编辑框句柄为参数传给DLL
GetWindowThreadProcessId (窗口句柄, PID)
赋值 (进程句柄, 打开进程_ (PID))
.如果真 (或者 (等于 (进程句柄, 0), 等于 (注入.注入DLL (进程句柄, #测试DLL), 0), 等于 (注入.执行DLL函数 (“Start”, , , , 窗口句柄), 0)))
    信息框 (“注入失败！”, #系统等待, )
.如果真结束
CloseHandle (进程句柄)


.子程序 释放进程内存, 空白型, , 内部子程序 防止内存泄漏
.参数 参数指针, 整数型, , 

.局部变量 数据, 字节集, , , 
.局部变量 参数, 整数型, , "0", 
.局部变量 计次, 整数型, , , 

赋值 (数据, 指针到字节集 (参数指针, 16))
.变量循环首 (1, 13, 4, 计次)
    加入成员 (参数, 字节集_到整数 (数据, 计次))
.变量循环尾 ()
WaitForSingleObject (参数 [2], -1)
释放内存_ (参数 [1], 参数 [3])
.如果真 (等于 (参数 [4], 1))
    CloseHandle (参数 [2])
.如果真结束
释放内存_ (-1, 参数指针)

.类模块 内存DLL注入, , , 易语言我吃了 制作~ 支持黑月

.程序集变量 DataAddr, 整数型, , , 
.程序集变量 LoadAddr, 整数型, , , 
.程序集变量 GetAddr, 整数型, , , 
.程序集变量 FreeAddr, 整数型, , , 
.程序集变量 hModule, 整数型, , , 
.程序集变量 hProcess, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
.如果真 (是否已注入 ())
    释放内存_ (hProcess, LoadAddr)
    CloseHandle (hProcess)
.如果真结束


.子程序 注入DLL, 整数型, 公开, 成功返回DLL的模块句柄，失败或已注入返回0。
.参数 进程句柄, 整数型, , 句柄必须拥有对被注入进程的完全操作权限。注入后如果没有其他用处可以关闭该句柄。
.参数 DLL数据, 字节集, , 

.如果真 (或者 (是否已注入 (), 等于 (DLL数据, {  }), 等于 (进程句柄, 0)))
    返回 (0)
.如果真结束
 ' 将内存中的DLL写到目标进程
赋值 (DataAddr, 写入内存数据_ (进程句柄, DLL数据))
.如果真 (等于 (DataAddr, 0))
    返回 (0)
.如果真结束
 ' 把加载函数写到目标进程
赋值 (LoadAddr, 写入内存数据_ (进程句柄, 相加 (#load_code, #getaddr_code, #free_code)))
.如果真 (等于 (LoadAddr, 0))
    释放内存_ (进程句柄, DataAddr)
    重载变量 ()
    返回 (0)
.如果真结束
赋值 (GetAddr, 相加 (LoadAddr, 2143)) ' 2143 = 取字节集长度(#load_code)
赋值 (FreeAddr, 相加 (GetAddr, 277)) ' 277 = 取字节集长度(#getaddr_code)
赋值 (hModule, 启动线程_Ret (进程句柄, LoadAddr, DataAddr))
.如果真 (等于 (hModule, 0))
    释放内存_ (进程句柄, LoadAddr)
    释放内存_ (进程句柄, DataAddr)
    重载变量 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
    返回 (0)
.如果真结束
DuplicateHandle (-1, 进程句柄, -1, hProcess, 0, 0, 2) ' 复制句柄
返回 (hModule)

.子程序 取DLL函数地址, 整数型, 公开, 返回已经注入到指定进程内的DLL的函数地址。失败返回0。
.参数 DLL函数名, 文本型, , 区分大小写。

.局部变量 地址, 整数型, , , 
.局部变量 指针, 整数型, , , 

.如果真 (或者 (等于 (是否已注入 (), 假), 等于 (DLL函数名, “”)))
    返回 (0)
.如果真结束
赋值 (地址, 写入内存数据_ (hProcess, 到字节集 (DLL函数名)))
.如果真 (等于 (地址, 0))
    返回 (0)
.如果真结束
赋值 (指针, 启动线程_多参_Ret (hProcess, , GetAddr, hModule, 地址))
释放内存_ (hProcess, 地址)
返回 (指针)

.子程序 执行DLL函数, 整数型, 公开, 执行已经注入到指定进程内的DLL的函数，成功返回所执行的函数的地址，失败返回0。
.参数 DLL函数名, 文本型, , 区分大小写。
.参数 等待函数执行完毕, 逻辑型, 可空, 默认为假，为真则函数执行完毕后本函数才返回。
.参数 返回值, 空白型, 参考 可空, 如果上一个参数为真，则可提供一个变量保存被执行的DLL函数的返回值。
.参数 线程句柄, 空白型, 参考 可空, 可提供变量保存函数执行线程的句柄,不需要请留空.接收了句柄记得不用时要关闭.
.参数 参数1, 空白型, 可空, 可提供给被执行函数最多10个参数(理论上支持无限个,自己看着改吧)不需要的请留空。
.参数 参数2, 空白型, 可空, 非整数型参数需传递变量的内存数据指针，该指针必须是在目标进程内的。
.参数 参数3, 空白型, 可空, 提供的参数请与所执行的函数的参数个数一致，否则被注入的进程绝对会崩溃！
.参数 参数4, 空白型, 可空, 
.参数 参数5, 空白型, 可空, 
.参数 参数6, 空白型, 可空, 
.参数 参数7, 空白型, 可空, 
.参数 参数8, 空白型, 可空, 
.参数 参数9, 空白型, 可空, 
.参数 参数10, 空白型, 可空, 

.局部变量 计次, 整数型, , , 
.局部变量 数值, 字节集, , , 
.局部变量 参数, 整数型, , "0", 
.局部变量 指针, 整数型, , , 
.局部变量 地址, 整数型, , , 

连续赋值 (0, 返回值, 线程句柄)
赋值 (指针, 取DLL函数地址 (DLL函数名))
.如果真 (等于 (指针, 0))
    返回 (0)
.如果真结束
赋值 (数值, 指针到字节集 (_取整数型数据地址 (参数1), 80))
.变量循环首 (1, 73, 8, 计次)
    .如果真 (等于 (数值 [相加 (计次, 4)], 1))
        加入成员 (参数, 字节集_到整数 (数值, 计次))
        到循环尾 ()
    .如果真结束
    跳出循环 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
.变量循环尾 ()
赋值 (地址, 写入内存数据_ (hProcess, MakeCallCode (指针, 参数)))
.如果真 (等于 (地址, 0))
    返回 (0)
.如果真结束
赋值 (线程句柄, CreateRemoteThread (hProcess, 0, 0, 地址, 0, 0, 0))
.如果 (或者 (等待函数执行完毕, 等于 (线程句柄, 0)))
    .如果真 (不等于 (线程句柄, 0))
        WaitForSingleObject (线程句柄, -1)
        GetExitCodeThread (线程句柄, 返回值)
    .如果真结束
    .如果真 (并且 (是否为空 (线程句柄), 不等于 (线程句柄, 0)))
        CloseHandle (线程句柄)
    .如果真结束
    释放内存_ (hProcess, 地址)
.否则
     ' 启动专门关句柄和释放目标进程内存的子程序：
    CloseHandle (启动线程_hThread (-1, _取子程序地址 (&释放进程内存), 写入内存数据_ (-1, 相加 (到字节集 (hProcess), 到字节集 (线程句柄), 到字节集 (地址), 选择 (是否为空 (线程句柄), { 1, 0, 0, 0 }, { 0, 0, 0, 0 })))))
.如果结束
返回 (指针)

.子程序 卸载DLL, 逻辑型, 公开, 卸载已经注入的内存中的DLL,成功返回真,失败返回假.(最好不要卸载，卸载的话被注入的进程很容易崩溃)
.如果真 (等于 (hModule, 0))
    返回 (假)
.如果真结束
启动线程_Ret (hProcess, FreeAddr, hModule)
释放内存_ (hProcess, LoadAddr)
释放内存_ (hProcess, DataAddr)
CloseHandle (hProcess)
重载变量 ()
返回 (真)

.子程序 是否已注入, 逻辑型, 公开, 已注入返回真，未注入返回假。
.局部变量 句柄, 整数型, , , 

.如果真 (只运行一次)
    返回 (真)
.如果真结束
.如果真 (等于 (hProcess, 0))
    赋值 (只运行一次, 真)
    返回 (假)
.如果真结束
赋值 (句柄, CreateRemoteThread (hProcess, 0, 0, 2088802608, 0, 0, 0)) ' 这里“lpStartAddress”用到绝对地址，可能不通用。
.如果真 (等于 (句柄, 0))
    卸载DLL ()
     ' 本源码来自易语言资源网(www.5A5X.com)
    返回 (假)
.如果真结束
CloseHandle (句柄)
赋值 (只运行一次, 真)
返回 (真)

.子程序 重载变量, 空白型, , 
连续赋值 (0, hProcess, DataAddr, hModule, LoadAddr, GetAddr, FreeAddr)

.程序集 辅助程序集, , , 

.子程序 申请内存_, 整数型, , 返回内存地址，不用时记得一定要释放。
.参数 进程句柄, 整数型, , -1为自进程
.参数 申请长度, 整数型, , 
.参数 lpAddress, 整数型, 可空, 
.参数 flAllocationType, 整数型, 可空, 
.参数 flProtect, 整数型, 可空, 

返回 (VirtualAllocEx (进程句柄, lpAddress, 申请长度, 选择 (是否为空 (flAllocationType), 4096, flAllocationType), 选择 (是否为空 (flAllocationType), 64, flAllocationType)))

.子程序 释放内存_, 逻辑型, , 
.参数 进程句柄, 整数型, , -1为自进程
.参数 内存地址, 整数型, , 
.参数 dwSize, 整数型, 可空, 
.参数 flAllocationType, 整数型, 可空, 

返回 (不等于 (VirtualFreeEx (进程句柄, 内存地址, dwSize, 选择 (是否为空 (flAllocationType), 32768, flAllocationType)), 0))

.子程序 写到内存_, 逻辑型, , 
.参数 进程句柄, 整数型, , -1为自进程
.参数 内存地址, 整数型, , 
.参数 数据, 字节集, , 
.参数 写入长度, 整数型, 可空, 默认将数据全部写入

返回 (不等于 (WriteProcessMemory (进程句柄, 内存地址, 数据, 选择 (是否为空 (写入长度), 取字节集长度 (数据), 写入长度), 0), 0))

.子程序 读取内存_, 字节集, , 
.参数 进程句柄, 整数型, , -1为自进程
.参数 地址, 整数型, , 
.参数 读入长度, 整数型, , 

.局部变量 数据, 字节集, , , 

赋值 (数据, 取空白字节集 (读入长度))
ReadProcessMemory (进程句柄, 地址, 数据, 读入长度, 0)
返回 (数据)

.子程序 写入内存数据_, 整数型, , 返回内存地址，不用时记得一定要释放。
.参数 进程句柄, 整数型, , -1为自进程
.参数 数据, 字节集, , 
.参数 写入长度, 整数型, 可空, 默认将数据全部写入

.局部变量 地址, 整数型, , , 

.如果真 (是否为空 (写入长度))
    赋值 (写入长度, 取字节集长度 (数据))
.如果真结束
赋值 (地址, VirtualAllocEx (进程句柄, 0, 写入长度, 4096, 64))
.如果真 (等于 (地址, 0))
    返回 (0)
.如果真结束
WriteProcessMemory (进程句柄, 地址, 数据, 写入长度, 0)
返回 (地址)

.子程序 调用子程序_, 逻辑型, , By:叮咚茶
.参数 子程序地址, 空白型, , 
.参数 是否为C调用, 逻辑型, 可空, 
.参数 返回值, 空白型, 参考 可空, 
.参数 参数1, 空白型, 可空, 
.参数 参数2, 空白型, 可空, 
.参数 参数3, 空白型, 可空, 
.参数 参数4, 空白型, 可空, 
.参数 参数5, 空白型, 可空, 
.参数 参数6, 空白型, 可空, 
.参数 参数7, 空白型, 可空, 
.参数 参数8, 空白型, 可空, 
.参数 参数9, 空白型, 可空, 
.参数 参数10, 空白型, 可空, 

置入代码 ({ 86, 81, 51, 201, 81, 177, 15, 139, 245, 129, 198, 152, 0, 0, 0, 131, 238, 8, 139, 198, 139, 0, 133, 192, 116, 8, 139, 70, 252, 80, 131, 69, 244, 4, 226, 235, 255, 85, 8, 139, 77, 20, 137, 1, 51, 192, 57, 69, 12, 116, 3, 3, 101, 244, 89, 89, 94 })
返回 (真)

.子程序 提升进程权限_, 逻辑型, , 
.参数 进程句柄, 整数型, 可空, 留空或为-1为提升本进程权限。
.参数 权限类别, 整数型, 可空, 17、备份；18、启动；19、关机；20、调试。留空默认为20，即提升到调试级。

.局部变量 地址, 整数型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (返回值, -1)
.如果真 (是否为空 (进程句柄))
    赋值 (进程句柄, -1)
.如果真结束
赋值 (地址, 申请内存_ (进程句柄, 4))
.如果真 (等于 (地址, 0))
    返回 (假)
.如果真结束
 ' 2090112829 = "RtlAdjustPrivilege"
赋值 (返回值, 启动线程_多参_Ret (进程句柄, , , 2090112829, 选择 (是否为空 (权限类别), 20, 权限类别), 1, 0, 地址))
释放内存_ (进程句柄, 地址)
返回 (等于 (返回值, 0))

.子程序 打开进程_, 整数型, , 返回进程句柄。
.参数 进程PID, 整数型, , 
.参数 dwDesiredAccess, 整数型, 可空, 默认为2035711完全权限
.参数 bInheritHandle, 整数型, 可空, 0或1

返回 (OpenProcess (选择 (是否为空 (dwDesiredAccess), 2035711, dwDesiredAccess), bInheritHandle, 进程PID))

.子程序 _取子程序地址, 整数型, , 
.参数 子程序, 子程序指针, , 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 _取字节集数据地址, 整数型, , 
.参数 字节集变量, 字节集, , 

置入代码 ({ 139, 69, 8, 139, 0, 131, 192, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 _取文本数据地址, 整数型, , 
.参数 文本变量, 文本型, , 

置入代码 ({ 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (0)

.子程序 _取整数型数据地址, 整数型, , 
.参数 整数变量, 整数型, 参考, 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 字节集_到整数, 整数型, , 
.参数 字节集, 字节集, , 
.参数 起始位置, 整数型, 可空, 

.局部变量 数值, 整数型, , , 
.局部变量 地址, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (地址, _取字节集数据地址 (字节集))
赋值 (长度, 取字节集长度 (字节集))
.如果真 (是否为空 (起始位置))
    赋值 (起始位置, 1)
.如果真结束
.如果真 (或者 (大于 (起始位置, 长度), 小于 (起始位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (长度, 起始位置), 4))
    CopyMemory (数值, 相减 (相加 (地址, 起始位置), 1), 相加 (相减 (长度, 起始位置), 1))
.否则
    CopyMemory (数值, 相减 (相加 (地址, 起始位置), 1), 4)
.如果结束
返回 (数值)

.子程序 取线程返回值_, 整数型, , 如果线程尚未中断将返回#STILL_ACTIVE(值为259)。
.参数 线程句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

GetExitCodeThread (线程句柄, 返回值)
返回 (返回值)

.子程序 启动线程_Ret, 整数型, , 普通单参数方式启动线程，线程执行完毕后才返回，返回所执行函数的返回值。
.参数 进程句柄, 空白型, , -1为自进程
.参数 子程序地址, 空白型, , 
.参数 参数, 空白型, 可空, 
.参数 线程句柄, 空白型, 参考 可空, 可提供变量保存新建线程的句柄，不需要请留空。如果接收了句柄记得要关闭。
.参数 线程ID, 空白型, 参考 可空, 可提供变量保存新建线程的ID，不需要请留空。

.局部变量 返回值, 整数型, , , 

赋值 (线程句柄, CreateRemoteThread (进程句柄, 0, 0, 子程序地址, 参数, 0, 线程ID))
WaitForSingleObject (线程句柄, -1)
GetExitCodeThread (线程句柄, 返回值)
.如果真 (并且 (是否为空 (线程句柄), 不等于 (线程句柄, 0)))
    CloseHandle (线程句柄)
.如果真结束
返回 (返回值)

.子程序 启动线程_hThread, 整数型, , 普通单参数方式启动线程，返回线程句柄。
.参数 进程句柄, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 可空, 
.参数 线程ID, 整数型, 参考 可空, 可提供变量保存新建线程的ID，不需要请留空。

返回 (CreateRemoteThread (进程句柄, 0, 0, 子程序地址, 参数, 0, 线程ID))

.子程序 MakeCallCode, 字节集, , 构造调用代码,这函数的用处一两句话解释不清.自己领会吧..总之很有用..呃..
.参数 函数地址, 整数型, , 
.参数 参数, 整数型, 可空 数组, 
.参数 不为函数头, 逻辑型, 可空, 默认为假。
.参数 不返回, 逻辑型, 可空, 默认为假。

.局部变量 计次, 整数型, , , 
.局部变量 代码, 字节集, , , 

.变量循环首 (取数组成员数 (参数), 1, -1, 计次)
    赋值 (代码, 相加 (代码, { 104 }, 到字节集 (参数 [计次])))
.变量循环尾 ()
返回 (相加 (选择 (不为函数头, {  }, { 85, 139, 236 }), { 184 }, 到字节集 (函数地址), 代码, { 255, 208 }, 选择 (不返回, {  }, { 201, 195 })))

.子程序 启动线程_多参_Ret, 整数型, , 返回所执行的线程的返回值。
.参数 进程句柄, 空白型, , -1为自进程
.参数 线程句柄, 空白型, 参考 可空, 可提供变量保存新建线程的句柄，不需要请留空。如果接收了句柄记得要关闭。
.参数 子程序指针, 空白型, , 
.参数 参数1, 空白型, 可空, 实际上支持无限个参数，自己看着改。
.参数 参数2, 空白型, 可空, 
.参数 参数3, 空白型, 可空, 
.参数 参数4, 空白型, 可空, 
.参数 参数5, 空白型, 可空, 
.参数 参数6, 空白型, 可空, 
.参数 参数7, 空白型, 可空, 
.参数 参数8, 空白型, 可空, 
.参数 参数9, 空白型, 可空, 
.参数 参数10, 空白型, 可空, 
.参数 参数11, 空白型, 可空, 
.参数 参数12, 空白型, 可空, 
.参数 参数13, 空白型, 可空, 
.参数 参数14, 空白型, 可空, 
.参数 参数15, 空白型, 可空, 

.局部变量 计次, 整数型, , , 
.局部变量 数值, 字节集, , , 
.局部变量 参数, 整数型, , "0", 
.局部变量 地址, 整数型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (数值, 指针到字节集 (_取整数型数据地址 (参数1), 120))
.变量循环首 (1, 113, 8, 计次)
    .如果真 (等于 (数值 [相加 (计次, 4)], 1))
        加入成员 (参数, 字节集_到整数 (数值, 计次))
        到循环尾 ()
    .如果真结束
    跳出循环 ()
.变量循环尾 ()
赋值 (地址, 写入内存数据_ (进程句柄, MakeCallCode (子程序指针, 参数)))
.如果真 (等于 (地址, 0))
    返回 (0)
.如果真结束
赋值 (线程句柄, CreateRemoteThread (进程句柄, 0, 0, 地址, 0, 0, 0))
WaitForSingleObject (线程句柄, -1)
GetExitCodeThread (线程句柄, 返回值)
释放内存_ (进程句柄, 地址)
.如果真 (并且 (是否为空 (线程句柄), 不等于 (线程句柄, 0)))
    CloseHandle (线程句柄)
.如果真结束
返回 (返回值)

.子程序 启动线程_多参_hThread, 整数型, , 返回新创建的线程的句柄，不用时记得关闭句柄。
.参数 进程句柄, 空白型, , 
.参数 参数保存地址, 空白型, 参考, 记得要用 释放内存_() 释放该处地址的内存及使用CloseHandle关闭线程句柄。
.参数 子程序地址, 空白型, , 
.参数 参数1, 空白型, 可空, 
.参数 参数2, 空白型, 可空, 
.参数 参数3, 空白型, 可空, 
.参数 参数4, 空白型, 可空, 
.参数 参数5, 空白型, 可空, 
.参数 参数6, 空白型, 可空, 
.参数 参数7, 空白型, 可空, 
.参数 参数8, 空白型, 可空, 
.参数 参数9, 空白型, 可空, 
.参数 参数10, 空白型, 可空, 
.参数 参数11, 空白型, 可空, 
.参数 参数12, 空白型, 可空, 
.参数 参数13, 空白型, 可空, 
.参数 参数14, 空白型, 可空, 
.参数 参数15, 空白型, 可空, 

.局部变量 计次, 整数型, , , 
.局部变量 数值, 字节集, , , 
.局部变量 参数, 整数型, , "0", 

赋值 (数值, 指针到字节集 (_取整数型数据地址 (参数1), 120))
.变量循环首 (1, 113, 8, 计次)
    .如果真 (等于 (数值 [相加 (计次, 4)], 1))
        加入成员 (参数, 字节集_到整数 (数值, 计次))
        到循环尾 ()
    .如果真结束
    跳出循环 ()
.变量循环尾 ()
赋值 (参数保存地址, 写入内存数据_ (进程句柄, MakeCallCode (子程序地址, 参数)))
.如果真 (等于 (参数保存地址, 0))
    返回 (0)
.如果真结束
返回 (CreateRemoteThread (进程句柄, 0, 0, 参数保存地址, 0, 0, 0))



 ' 不属于任何一个程序集、类模块的函数：
