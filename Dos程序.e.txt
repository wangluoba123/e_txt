 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库




数据类型 COORD, , 坐标（控制台）
    .成员 X, 短整数型, , , 
    .成员 Y, 短整数型, , , 

.全局变量 标准输入, 整数型, , , 设备句柄
.全局变量 标准输出, 整数型, , , 设备句柄
.全局变量 标准错误, 整数型, , , 设备句柄

.DLL命令 apiAllocConsole, 整数型, "", "AllocConsole", , 创建一个控制台窗口

.DLL命令 apiFreeConsole, 整数型, "", "FreeConsole", , 销毁控制台窗口

.DLL命令 apiGetStdHandle, 整数型, "", "GetStdHandle", , 取标准设备句柄
    .参数 nStdHandle, 整数型, , -10: 标准输入；-11: 标准输出；-12: 标准错误。

.DLL命令 apiWriteConsole, 逻辑型, "", "WriteConsoleA", , 向控制台标准输出设备写文本
    .参数 hConsoleOutput, 整数型, , 标准输出设备句柄
    .参数 lpBuffer, 文本型, , 欲输出文本
    .参数 nNumberOfCharsToWrite, 整数型, , 欲输出文本的字符数
    .参数 lpNumberOfCharsWriten, 整数型, 传址, 实际输出的字符数，可置为0
    .参数 lpReserved, 整数型, 传址, 保留参数，必须为0

.DLL命令 apiReadConsole, 逻辑型, "", "ReadConsoleA", , 从控制台标准输入设备读取文本
    .参数 hConsoleInput, 整数型, , 标准输入设备句柄
    .参数 lpBuffer, 文本型, , 缓冲区，用于存储输入文本
    .参数 nNumberOfCharTosRead, 整数型, , 缓冲区长度（字符数）
    .参数 lpNumberOfCharsRead, 整数型, 传址, 实际读入的字符数，可置为0
    .参数 lpReserved, 整数型, 传址, 保留参数，必须为0

.DLL命令 apiSetConsoleMode, 整数型, "", "SetConsoleMode", , 设置输入或输出模式
    .参数 hConsole, 整数型, , 输入或输出设备句柄
    .参数 dwMode, 整数型, , 模式值。可以是以下值的组合：（Ⅰ）输入模式值：1: Ctrl-C,Backspace,Tab,回车键,换行键和Ctrl-Z将在输入缓冲区中被处理；2: 字符输入一直到收到一个换行符才将整行字符返回给函数ReadFile的调用者；4: 字符在它们被敲入的同时也被显示在屏幕上(必须同时选择2)；8: 函数ReadFile的调用者必须是活动窗口。（Ⅱ）输出模式值：1: 输出时将处理Backspace,Tab,响铃,回车和换行字符；2: 当输出达到行尾时，光标会自动显示在下一行行首。

.DLL命令 apiSetConsoleTitle, 整数型, "", "SetConsoleTitleA", , 置控制台窗口标题
    .参数 lpTitle, 文本型, , 标题

.DLL命令 apiSetConsoleTextAttribute, 整数型, "", "SetConsoleTextAttribute", , 设置控制台窗口前/背景颜色
    .参数 hConsoleOutput, 整数型, , 标准输出设备句柄
    .参数 wAttribute, 整数型, , 前景/背景颜色代号。前景：1蓝 2绿 4红 8高亮度 | 背景：16蓝 32绿 64红 128高亮度。

.程序集 控制台程序集, , , 程序集的名称是可以随便改的，最好取有意义的名称。

.子程序 主程序, 空白型, , 
.局部变量 文本, 文本型, , , 

 ' 各位如果要添加代码，最好都写在这个子程序里面，这样结构会好一些。
 ' 您可以调用Liigo自定义的几个子程序：“Liigo说()”“请输入()”“置标题()”...    当然也可以直接调用API函数。

置标题 (“Liigo易语言天堂”)
Liigo说 (相加 (“        ------- Liigo -------    ”, #换行符), 相加 (2, 8))
Liigo说 (相加 (“亲爱的朋友，我是Liigo，现在向您演示用易语言编写DOS程序。”, #换行符), 10)
Liigo说 (“请输入您的姓名：”)
赋值 (文本, 取空白文本 (255)) ' 这一行不可少！长度嘛，当然长一些更保险一些。
请输入 (文本, 12)
Liigo说 (相加 (“您的大名是：”, 文本), 10)
Liigo说 (“------- http://liigo.yeah.net -------”, 相加 (2, 8, 32, 64))
Liigo说 (“   5秒后结束本程序！”)

 ' Liigo在这里顺便说一下本程序的结构。
 ' 首先，易语言系统自动执行“_启动子程序”（通过‘程序’-‘系统配置’-‘通常’，选中“通过名称为‘_启动子程序’的子程序启动”）。“_启动子程序”也是自定义子程序，但它的名称不能改动。我在“_启动子程序”中主要做了一些辅助性工作。
 ' 在“_启动子程序”中调用名称为“主程序”的子程序，“主程序”中包含主要功能代码。
 ' “主程序”完成后返回到“_启动子程序”，通过API结束本程序。
 ' 2002.1.13 庄

.子程序 _启动子程序, 整数型, , 
apiAllocConsole () ' 创建控制台程序窗口（DOS窗口）。

 ' 以下三行获取标准设备句柄（StdIn，StdOut，StdErr）。
赋值 (apiGetStdHandle (-10))
赋值 (apiGetStdHandle (-11))
赋值 (apiGetStdHandle (-12))

 ' 下面两行分别设置输入输出模式。
apiSetConsoleMode (15)
apiSetConsoleMode (3)

主程序 () ' 主要功能代码都在这里面。

延时 (5000)
apiFreeConsole () ' 结束控制台程序（DOS程序）。
返回 (0)

.子程序 Liigo说, 逻辑型, , 向控制台窗口输出文本。您当然可以换个名字，如“输出文本”。
.参数 欲输出文本, 文本型, , 
.参数 前景背景颜色, 整数型, 可空, 前景/背景颜色代号。前景：1蓝 2绿 4红 8高亮度 | 背景：16蓝 32绿 64红 128高亮度。本参数为可选参数。

.如果 (是否为空 (前景背景颜色))
    apiSetConsoleTextAttribute (标准输出, 15) ' 如果未指定前/背景颜色，默认黑底白字。
.否则
    apiSetConsoleTextAttribute (标准输出, 前景背景颜色)
.如果结束
返回 (apiWriteConsole (标准输出, 欲输出文本, 取文本长度 (欲输出文本), 0, 0))

.子程序 请输入, 逻辑型, , 从控制台窗口接受文本数据。
.参数 缓冲区, 文本型, 参考, 
.参数 前景背景颜色, 整数型, 可空, 前景/背景颜色代号。前景：1蓝 2绿 4红 8高亮度 | 背景：16蓝 32绿 64红 128高亮度。本参数为可选参数。

.局部变量 临时字节集, 字节集, , , 
.局部变量 x, 逻辑型, , , 
.局部变量 n, 整数型, , , 

.如果 (是否为空 ())
    apiSetConsoleTextAttribute (标准输出, 15) ' 如果未指定前/背景颜色，默认黑底白字。
.否则
    apiSetConsoleTextAttribute (标准输出, )
.如果结束

赋值 (x, apiReadConsole (标准输入, 缓冲区, 取文本长度 (缓冲区), 0, 0))

赋值 (临时字节集, 到字节集 (缓冲区))
赋值 (n, 寻找字节集 (临时字节集, 取字节集左边 (到字节集 (#换行符), 2)))
赋值 (临时字节集, 取字节集中间 (临时字节集, 0, 相减 (n, 1)))
赋值 (缓冲区, 相加 (取字节集数据 (临时字节集, #文本型), #换行符))
 ' 上面这四行一定要注意深入思考！
返回 (x)

.子程序 置标题, 逻辑型, , 设置或改写控制台窗口标题栏中的文字。
.参数 标题, 文本型, , 

.如果真 (等于 (apiSetConsoleTitle (标题), 0)) ' 设置标题
    返回 (假)
.如果真结束
返回 (真)


 ' 不属于任何一个程序集、类模块的函数：
