 ' 文件类型：Windows窗口程序

 ' 程序名称：人机大战黑白棋
 ' 程序描述：
 ' 程序作者：李学锋
 ' 邮政编码：072250
 ' 联系地址：河北省顺平县联社
 ' 联系电话：7620462
 ' 传真号码：7624861
 ' 电子信箱：splsywk@sina.com.cn
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 581
    高度 = 518
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “人机大战黑白棋”
    帮助文件名 = “”

窗口 当前战况
    左边 = 50
    顶边 = 50
    宽度 = 204
    高度 = 186
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\当前战况_图标.ico
    背景音乐 =  ' 空
    标题 = “当前战况”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 252
    高度 = 169
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “关于”
    帮助文件名 = “”

窗口 提示窗口
    左边 = 50
    顶边 = 50
    宽度 = 294
    高度 = 115
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 黑棋, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\黑棋", , 
.图片 白棋, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\白棋", , 
.图片 下子黑棋, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\下子黑棋", , 
.图片 下子白棋, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\下子白棋", , 
.图片 空格, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\空格", , 
.图片 棋盘, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\棋盘", , 
.图片 白棋可走的位置, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\白棋可走的位置", , 
.图片 黑棋可走的位置, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\黑棋可走的位置", , 
.图片 转棋一, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋一", , 
.图片 转棋二, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋二", , 
.图片 转棋三, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋三", , 
.图片 转棋四, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋四", , 
.图片 转棋五, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋五", , 
.图片 转棋六, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\转棋六", , 
.图片 电脑, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\电脑", , 
.图片 玩家, " ' 已保存到：D:\易语言学习\Data\人机大战黑白棋.e\玩家", , 
.常量 四面受保护棋子分值, "30", , 
.常量 三面受保护棋子分值, "2", , 
.常量 一二面受保护棋子分值, "1", , 
.常量 落子点分值, "61", , 
.常量 四角分值, "190", , 
.常量 角边分值, "-130", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库
 ' xplib 7F54B9CE8887428dBA9CEEB94CEF4C72 1 1 XP风格界面库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 1 扩展界面支持库一




数据类型 棋子点, , 棋子坐标
    .成员 横坐标, 短整数型, , , 
    .成员 纵坐标, 短整数型, , , 

数据类型 一步走法, , 一步走法的信息
    .成员 落子点, 棋子点, , , 
    .成员 棋子类型, 短整数型, , , 
    .成员 被吃棋子个数, 短整数型, , , 
    .成员 被吃棋子点, 棋子点, , "30", 
    .成员 历史得分, 整数型, , , 

.全局变量 棋局, 短整数型, , "8,8", 存储当前棋局:1.黑子,2.白子,0.无子
.全局变量 走法库, 一步走法, , "16,30", 用于存储搜索引擎产生所有走法
.全局变量 玩家全部走法, 一步走法, , "2,30", 用于存储玩家所有可能的走法
.全局变量 玩家全部走法数量, 短整数型, , "2", 存储玩家所有走法的数量
.全局变量 是否正在进行游戏, 短整数型, , , 是否正确进行游戏:0.未进行,1.正在进行,2.游戏暂停
.全局变量 游戏类型, 短整数型, , , 当前进行的游戏类型:1.双人游戏,2.人机对战
.全局变量 是否玩家先走, 短整数型, , , 玩家是否先走棋:1.玩家先走,2.电脑先走(仅在人机对战中有效)
.全局变量 该谁下, 短整数型, , , 目前该哪一方走棋:1.黑棋,2.白棋
.全局变量 开局库, 文本型, , "10", 存储开局信息
.全局变量 开局库号, 短整数型, , , 当前开局库的编号
.全局变量 白棋子数, 短整数型, , , 白棋已下的子数
.全局变量 黑棋子数, 短整数型, , , 黑棋已下的子数
.全局变量 历史得分表, 整数型, , "8,8", 用于历史启发提高搜索速度,存储历史得分
.全局变量 搜索深度, 短整数型, , , 搜索的深度
.全局变量 终局搜索步数, 短整数型, , , 当还剩下多少步时进入终局搜索
.全局变量 先手, 短整数型, , , 谁先下:2.人,1.计算机
.全局变量 最佳走法, 一步走法, , , 搜索出的一步走法
.全局变量 黑棋用时, 长整数型, , , 黑棋用时秒数
.全局变量 白棋用时, 长整数型, , , 白棋用时秒数
.全局变量 落子记录, 一步走法, , "64", 存储全部走棋记录
.全局变量 战况, 整数型, , "2,3", 存储本次游戏的胜负信息

.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 图片号, 整数型, , , 

 ' 初始化游戏界面
未知支持库函数_0 (#)
赋值 (图片号, 载入图片 (#棋盘))
图片号.画图片 (0, 0, , , )
卸载图片 (图片号)
赋值 (是否正在进行游戏, 0)
赋值 (.图片, #玩家)
赋值 (.图片, #玩家)
赋值 (., “时间[00：00]”)
赋值 (., “时间[00：00]”)
 ' 初始化开局库
赋值 (开局库 [1], “04441542452551”)
赋值 (开局库 [2], “06441451542551641652”)
赋值 (开局库 [3], “08431441451461532542552562”)
赋值 (开局库 [4], “08431441451542551642652662”)
赋值 (开局库 [5], “08442451461542552562631642”)
赋值 (开局库 [6], “08362451462532542552562631”)
赋值 (开局库 [7], “09352361441451462542551651751”)
赋值 (开局库 [8], “10332342351441452542551642651661”)
赋值 (开局库 [9], “10352441452461531541552561642652”)
赋值 (开局库 [10], “11352361431442451462541552632642651”)
 ' 初始化参数,设置默认值
赋值 (该谁下, 1)
赋值 (游戏类型, 2)
赋值 (搜索深度, 5)
赋值 (终局搜索步数, 8)
赋值 (是否玩家先走, 2)
赋值 (开局库号, 1)
数组清零 (战况)

.子程序 _退出游戏按钮_被单击, 空白型, , 
.如果 (等于 (是否正在进行游戏, 1))
    .如果真 (等于 (信息框 (“游戏正在进行，真的退出吗？”, 1, “提示信息”), 0))
        销毁 ()
    .如果真结束
    
.否则
    销毁 ()
.如果结束


.子程序 能否下子, 逻辑型, , 判断一个点位能否下子,能下子返回真,不能下子返回假
.参数 落子位置, 棋子点, 参考, 将要下子的位置
.参数 落子类型, 短整数型, , 将要走的棋子类型

.局部变量 能否走棋, 逻辑型, , , 
.局部变量 变量1, 棋子点, , , 
.局部变量 吃子类型, 短整数型, , , 

赋值 (能否走棋, 假)
.如果 (等于 (落子类型, 1))
    赋值 (吃子类型, 2)
.否则
    赋值 (吃子类型, 1)
.如果结束
.如果真 (等于 (棋局 [落子位置].横坐标 [落子位置].纵坐标, 0))
     ' 左上方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.横坐标, 0), 大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (并且 (大于 (变量1.横坐标, 0), 大于 (变量1.纵坐标, 0)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
                跳出循环 ()
            .默认
                赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
                赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 上方
    赋值 (变量1.横坐标, 落子位置.横坐标)
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (大于 (变量1.纵坐标, 0))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 右上方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.横坐标, 9), 大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (并且 (小于 (变量1.横坐标, 9), 大于 (变量1.纵坐标, 0)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
                赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 右方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 落子位置.纵坐标)
    .如果真 (并且 (小于 (变量1.横坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        .判断循环首 (小于 (变量1.横坐标, 9))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 右下方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.横坐标, 9), 小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (并且 (小于 (变量1.横坐标, 9), 小于 (变量1.纵坐标, 9)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
                赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 下方
    赋值 (变量1.横坐标, 落子位置.横坐标)
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (小于 (变量1.纵坐标, 9))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 左下方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.横坐标, 0), 小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (并且 (大于 (变量1.横坐标, 0), 小于 (变量1.纵坐标, 9)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
                赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
     ' 左方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 落子位置.纵坐标)
    .如果真 (并且 (大于 (变量1.横坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        .判断循环首 (大于 (变量1.横坐标, 0))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                返回 (真)
            .默认
                赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
            .判断结束
            
        .判断循环尾 ()
    .如果真结束
    
.如果真结束
返回 (能否走棋)

.子程序 创建一步走法, 逻辑型, , 创建一个点位的走法,不能下子返回假
.参数 落子位置, 棋子点, 参考, 将要下子的位置
.参数 落子类型, 短整数型, , 将要走的棋子类型
.参数 走法, 一步走法, 参考, 保存走法的变量

.局部变量 能否走棋, 逻辑型, , , 
.局部变量 变量1, 棋子点, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 变量3, 短整数型, , , 
.局部变量 吃子类型, 短整数型, , , 
.局部变量 吃子数, 短整数型, , , 
.局部变量 经过棋子, 棋子点, , "8", 

赋值 (能否走棋, 假)
赋值 (吃子数, 0)
.如果 (等于 (落子类型, 1))
    赋值 (吃子类型, 2)
.否则
    赋值 (吃子类型, 1)
.如果结束
.如果真 (等于 (棋局 [落子位置].横坐标 [落子位置].纵坐标, 0))
     ' 左上方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.横坐标, 0), 大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (并且 (大于 (变量1.横坐标, 0), 大于 (变量1.纵坐标, 0)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
            赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 上方
    赋值 (变量1.横坐标, 落子位置.横坐标)
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (大于 (变量1.纵坐标, 0))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 右上方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相减 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.横坐标, 9), 大于 (变量1.纵坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环首 (并且 (小于 (变量1.横坐标, 9), 大于 (变量1.纵坐标, 0)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
            赋值 (变量1.纵坐标, 相减 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 右方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 落子位置.纵坐标)
    .如果真 (并且 (小于 (变量1.横坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        .判断循环首 (小于 (变量1.横坐标, 9))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 右下方
    赋值 (变量1.横坐标, 相加 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.横坐标, 9), 小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (并且 (小于 (变量1.横坐标, 9), 小于 (变量1.纵坐标, 9)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相加 (变量1.横坐标, 1))
            赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 下方
    赋值 (变量1.横坐标, 落子位置.横坐标)
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (小于 (变量1.纵坐标, 9))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 左下方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 相加 (落子位置.纵坐标, 1))
    .如果真 (并且 (大于 (变量1.横坐标, 0), 小于 (变量1.纵坐标, 9), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环首 (并且 (大于 (变量1.横坐标, 0), 小于 (变量1.纵坐标, 9)))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
            赋值 (变量1.纵坐标, 相加 (变量1.纵坐标, 1))
        .判断循环尾 ()
    .如果真结束
     ' 左方
    赋值 (变量1.横坐标, 相减 (落子位置.横坐标, 1))
    赋值 (变量1.纵坐标, 落子位置.纵坐标)
    .如果真 (并且 (大于 (变量1.横坐标, 0), 等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 吃子类型)))
        赋值 (变量2, 1)
        赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
        赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
        赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        .判断循环首 (大于 (变量1.横坐标, 0))
            .判断开始 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 0))
                跳出循环 ()
            .判断 (等于 (棋局 [变量1].横坐标 [变量1].纵坐标, 落子类型))
                赋值 (能否走棋, 真)
                赋值 (变量3, 1)
                .判断循环首 (小于或等于 (变量3, 变量2))
                    赋值 (吃子数, 相加 (吃子数, 1))
                    赋值 (走法.被吃棋子点 [吃子数], 横坐标, 经过棋子 [变量3], 横坐标)
                    赋值 (走法.被吃棋子点 [吃子数], 纵坐标, 经过棋子 [变量3], 纵坐标)
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
                跳出循环 ()
            .默认
                赋值 (变量2, 相加 (变量2, 1))
                赋值 (经过棋子 [变量2], 横坐标, 变量1.横坐标)
                赋值 (经过棋子 [变量2], 纵坐标, 变量1.纵坐标)
            .判断结束
            赋值 (变量1.横坐标, 相减 (变量1.横坐标, 1))
        .判断循环尾 ()
    .如果真结束
    
.如果真结束
.如果真 (能否走棋) ' 如果能下子,保存走法信息
    赋值 (走法.棋子类型, 落子类型)
    赋值 (走法.被吃棋子个数, 吃子数)
    赋值 (走法.落子点.横坐标, 落子位置.横坐标)
    赋值 (走法.落子点.纵坐标, 落子位置.纵坐标)
.如果真结束
返回 (能否走棋)

.子程序 估值函数, 整数型, , 评估一个棋局的分值
.参数 棋子类型, 短整数型, , 模子类型

.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 变量3, 短整数型, , , 
.局部变量 变量4, 短整数型, , , 
.局部变量 变量5, 短整数型, , , 
.局部变量 判断类型, 短整数型, , , 
.局部变量 判断类型2, 短整数型, , , 
.局部变量 起始位置, 短整数型, , , 
.局部变量 起始位置2, 短整数型, , , 
.局部变量 终止位置, 短整数型, , , 
.局部变量 终止位置2, 短整数型, , , 
.局部变量 局面分值, 整数型, , "2,3", 
.局部变量 当前局面, 短整数型, , "2,8,8", 
.局部变量 棋子类型2, 短整数型, , , 
.局部变量 棋子位置, 未知类型0x410101FE, , , 
.局部变量 左空格数, 短整数型, , , 
.局部变量 右空格数, 短整数型, , , 

赋值 (局面分值 [1] [1], 0)
赋值 (局面分值 [1] [2], 0)
赋值 (局面分值 [2] [1], 0)
赋值 (局面分值 [2] [2], 0)
 ' 判断棋子横向是否有保护
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 1)
    赋值 (左空格数, 0)
    .判断循环首 (小于或等于 (变量2, 8))
        .如果 (等于 ( [变量2] [变量1], 0))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量2, 相加 (变量2, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (判断类型, 棋局 [起始位置] [变量1])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量3, 相加 (起始位置, 1))
            .判断循环首 (小于或等于 (变量3, 8))
                .如果真 (不等于 (棋局 [变量3] [变量1], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量3, 相加 (变量3, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相减 (变量3, 1))
            .如果 (或者 (小于 (相减 (起始位置, 1), 1), 大于 (相加 (终止位置, 1), 8)))
                赋值 (变量3, 起始位置)
                .判断循环首 (小于或等于 (变量3, 终止位置))
                    赋值 (当前局面 [判断类型] [变量3] [变量1], 相加 (当前局面 [判断类型] [变量3] [变量1], 1))
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [相减 (起始位置, 1)] [变量1], 判断类型2), 等于 (棋局 [相加 (终止位置, 1)] [变量1], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量3, 相加 (终止位置, 1))
                    .判断循环首 (小于或等于 (变量3, 8))
                        .如果 (等于 (棋局 [变量3] [变量1], 0))
                            赋值 (右空格数, 相加 (右空格数, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量3] [变量1], 判断类型2), 等于 (变量3, 8)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量3, 相加 (变量3, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量3, 起始位置)
                        .判断循环首 (小于或等于 (变量3, 终止位置))
                            赋值 (当前局面 [判断类型] [变量3] [变量1], 相加 (当前局面 [判断类型] [变量3] [变量1], 1))
                            赋值 (变量3, 相加 (变量3, 1))
                        .判断循环尾 ()
                        
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相加 (终止位置, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
 ' 判断棋子纵向是否有保护
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 1)
    .判断循环首 (小于或等于 (变量2, 8))
        .如果 (等于 ( [变量1] [变量2], 0))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量2, 相加 (变量2, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (判断类型,  [变量1] [起始位置])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量3, 相加 (起始位置, 1))
            .判断循环首 (小于或等于 (变量3, 8))
                .如果真 (不等于 ( [变量1] [变量3], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量3, 相加 (变量3, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相减 (变量3, 1))
            .如果 (或者 (小于 (相减 (起始位置, 1), 1), 大于 (相加 (终止位置, 1), 8)))
                赋值 (变量3, 起始位置)
                .判断循环首 (小于或等于 (变量3, 终止位置))
                    赋值 (当前局面 [判断类型] [变量1] [变量3], 相加 (当前局面 [判断类型] [变量1] [变量3], 1))
                    赋值 (变量3, 相加 (变量3, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [变量1] [相减 (起始位置, 1)], 判断类型2), 等于 (棋局 [变量1] [相加 (终止位置, 1)], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量3, 相加 (终止位置, 1))
                    .判断循环首 (小于或等于 (变量3, 8))
                        .如果 (等于 (棋局 [变量1] [变量3], 0))
                            赋值 (变量3, 相加 (变量3, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量1] [变量3], 判断类型2), 等于 (变量3, 8)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量3, 相加 (变量3, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量3, 起始位置)
                        .判断循环首 (小于或等于 (变量3, 终止位置))
                            赋值 (当前局面 [判断类型] [变量1] [变量3], 相加 (当前局面 [判断类型] [变量1] [变量3], 1))
                            赋值 (变量3, 相加 (变量3, 1))
                        .判断循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相加 (终止位置, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
 ' 判断棋子左上到右下方向是否有保护
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 变量1)
    赋值 (变量3, 1)
    赋值 (左空格数, 0)
    .判断循环首 (小于或等于 (变量2, 8))
        .如果 (等于 ( [变量3] [变量2], 0))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量2, 相加 (变量2, 1))
            赋值 (变量3, 相加 (变量3, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (起始位置2, 变量3)
            赋值 (判断类型,  [起始位置2] [起始位置])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量4, 相加 (起始位置, 1))
            赋值 (变量5, 相加 (起始位置2, 1))
            .判断循环首 (小于或等于 (变量4, 8))
                .如果真 (不等于 ( [变量5] [变量4], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量4, 相加 (变量4, 1))
                赋值 (变量5, 相加 (变量5, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相减 (变量4, 1))
            赋值 (终止位置2, 相减 (变量5, 1))
            .如果 (或者 (小于 (相减 (起始位置, 1), 变量1), 大于 (相加 (终止位置, 1), 8)))
                赋值 (变量4, 起始位置)
                赋值 (变量5, 起始位置2)
                .判断循环首 (小于或等于 (变量4, 终止位置))
                    赋值 (当前局面 [判断类型] [变量5] [变量4], 相加 (当前局面 [判断类型] [变量5] [变量4], 1))
                    赋值 (变量4, 相加 (变量4, 1))
                    赋值 (变量5, 相加 (变量5, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [相减 (起始位置2, 1)] [相减 (起始位置, 1)], 判断类型2), 等于 (棋局 [相加 (终止位置2, 1)] [相加 (终止位置, 1)], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量4, 相加 (终止位置, 1))
                    赋值 (变量5, 相加 (终止位置2, 1))
                    .判断循环首 (小于或等于 (变量4, 8))
                        .如果 (等于 (棋局 [变量5] [变量4], 0))
                            赋值 (右空格数, 相加 (右空格数, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量5] [变量4], 判断类型2), 等于 (变量4, 8)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量4, 相加 (变量4, 1))
                        赋值 (变量5, 相加 (变量5, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量4, 起始位置)
                        赋值 (变量5, 起始位置2)
                        .判断循环首 (小于或等于 (变量4, 终止位置))
                            赋值 (当前局面 [判断类型] [变量5] [变量4], 相加 (当前局面 [判断类型] [变量5] [变量4], 1))
                            赋值 (变量4, 相加 (变量4, 1))
                            赋值 (变量5, 相加 (变量5, 1))
                        .判断循环尾 ()
                        
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相加 (终止位置, 1))
            赋值 (变量3, 相加 (终止位置2, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
赋值 (变量1, 2)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 变量1)
    赋值 (变量3, 1)
    赋值 (左空格数, 0)
    .判断循环首 (小于或等于 (变量2, 8))
        .如果 (等于 ( [变量2] [变量3], 0))
            赋值 (变量2, 相加 (变量2, 1))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量3, 相加 (变量3, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (起始位置2, 变量3)
            赋值 (判断类型,  [起始位置] [起始位置2])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量4, 相加 (起始位置, 1))
            赋值 (变量5, 相加 (起始位置2, 1))
            .判断循环首 (小于或等于 (变量4, 8))
                .如果真 (不等于 ( [变量4] [变量5], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量4, 相加 (变量4, 1))
                赋值 (变量5, 相加 (变量5, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相减 (变量4, 1))
            赋值 (终止位置2, 相减 (变量5, 1))
            .如果 (或者 (小于 (相减 (起始位置, 1), 变量1), 大于 (相加 (终止位置, 1), 8)))
                赋值 (变量4, 起始位置)
                赋值 (变量5, 起始位置2)
                .判断循环首 (小于或等于 (变量4, 终止位置))
                    赋值 (当前局面 [判断类型] [变量4] [变量5], 相加 (当前局面 [判断类型] [变量4] [变量5], 1))
                    赋值 (变量4, 相加 (变量4, 1))
                    赋值 (变量5, 相加 (变量5, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [相减 (起始位置, 1)] [相减 (起始位置2, 1)], 判断类型2), 等于 (棋局 [相加 (终止位置, 1)] [相加 (终止位置2, 1)], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量4, 相加 (终止位置, 1))
                    赋值 (变量5, 相加 (终止位置2, 1))
                    .判断循环首 (小于或等于 (变量4, 8))
                        .如果 (等于 (棋局 [变量4] [变量5], 0))
                            赋值 (右空格数, 相加 (右空格数, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量4] [变量5], 判断类型2), 等于 (变量4, 8)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量4, 相加 (变量4, 1))
                        赋值 (变量5, 相加 (变量5, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量4, 起始位置)
                        赋值 (变量5, 起始位置2)
                        .判断循环首 (小于或等于 (变量4, 终止位置))
                            赋值 (当前局面 [判断类型] [变量4] [变量5], 相加 (当前局面 [判断类型] [变量4] [变量5], 1))
                            赋值 (变量4, 相加 (变量4, 1))
                            赋值 (变量5, 相加 (变量5, 1))
                        .判断循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相加 (终止位置, 1))
            赋值 (变量3, 相加 (终止位置2, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
 ' 判断棋子右上到左下方向是否有保护
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 变量1)
    赋值 (变量3, 8)
    赋值 (左空格数, 0)
    .判断循环首 (小于或等于 (变量2, 8))
        .如果 (等于 ( [变量3] [变量2], 0))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量2, 相加 (变量2, 1))
            赋值 (变量3, 相减 (变量3, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (起始位置2, 变量3)
            赋值 (判断类型,  [起始位置2] [起始位置])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量4, 相加 (起始位置, 1))
            赋值 (变量5, 相减 (起始位置2, 1))
            .判断循环首 (小于或等于 (变量4, 8))
                .如果真 (不等于 ( [变量5] [变量4], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量4, 相加 (变量4, 1))
                赋值 (变量5, 相减 (变量5, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相减 (变量4, 1))
            赋值 (终止位置2, 相加 (变量5, 1))
            .如果 (或者 (小于 (相减 (起始位置, 1), 变量1), 大于 (相加 (终止位置, 1), 8)))
                赋值 (变量4, 起始位置)
                赋值 (变量5, 起始位置2)
                .判断循环首 (小于或等于 (变量4, 终止位置))
                    赋值 (当前局面 [判断类型] [变量5] [变量4], 相加 (当前局面 [判断类型] [变量5] [变量4], 1))
                    赋值 (变量4, 相加 (变量4, 1))
                    赋值 (变量5, 相减 (变量5, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [相加 (起始位置2, 1)] [相减 (起始位置, 1)], 判断类型2), 等于 (棋局 [相减 (终止位置2, 1)] [相加 (终止位置, 1)], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量4, 相加 (终止位置, 1))
                    赋值 (变量5, 相减 (终止位置2, 1))
                    .判断循环首 (小于或等于 (变量4, 8))
                        .如果 (等于 (棋局 [变量5] [变量4], 0))
                            赋值 (右空格数, 相加 (右空格数, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量5] [变量4], 判断类型2), 等于 (变量4, 8)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量4, 相加 (变量4, 1))
                        赋值 (变量5, 相减 (变量5, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量4, 起始位置)
                        赋值 (变量5, 起始位置2)
                        .判断循环首 (小于或等于 (变量4, 终止位置))
                            赋值 (当前局面 [判断类型] [变量5] [变量4], 相加 (当前局面 [判断类型] [变量5] [变量4], 1))
                            赋值 (变量4, 相加 (变量4, 1))
                            赋值 (变量5, 相减 (变量5, 1))
                        .判断循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相加 (终止位置, 1))
            赋值 (变量3, 相减 (终止位置2, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
赋值 (变量1, 7)
.判断循环首 (大于或等于 (变量1, 1))
    赋值 (变量2, 变量1)
    赋值 (变量3, 1)
    赋值 (左空格数, 0)
    .判断循环首 (大于或等于 (变量2, 1))
        .如果 (等于 ( [变量2] [变量3], 0))
            赋值 (左空格数, 相加 (左空格数, 1))
            赋值 (变量2, 相减 (变量2, 1))
            赋值 (变量3, 相加 (变量3, 1))
        .否则
            赋值 (起始位置, 变量2)
            赋值 (起始位置2, 变量3)
            赋值 (判断类型,  [起始位置] [起始位置2])
            .如果 (等于 (判断类型, 1))
                赋值 (判断类型2, 2)
            .否则
                赋值 (判断类型2, 1)
            .如果结束
            赋值 (变量4, 相减 (起始位置, 1))
            赋值 (变量5, 相加 (起始位置2, 1))
            .判断循环首 (大于或等于 (变量4, 1))
                .如果真 (不等于 ( [变量4] [变量5], 判断类型))
                    跳出循环 ()
                .如果真结束
                赋值 (变量4, 相减 (变量4, 1))
                赋值 (变量5, 相加 (变量5, 1))
            .判断循环尾 ()
            赋值 (终止位置, 相加 (变量4, 1))
            赋值 (终止位置2, 相减 (变量5, 1))
            .如果 (或者 (大于 (相加 (起始位置, 1), 变量1), 小于 (相减 (终止位置, 1), 1)))
                赋值 (变量4, 起始位置)
                赋值 (变量5, 起始位置2)
                .判断循环首 (大于或等于 (变量4, 终止位置))
                    赋值 (当前局面 [判断类型] [变量4] [变量5], 相加 (当前局面 [判断类型] [变量4] [变量5], 1))
                    赋值 (变量4, 相减 (变量4, 1))
                    赋值 (变量5, 相加 (变量5, 1))
                .判断循环尾 ()
            .否则
                .如果真 (并且 (等于 (棋局 [相加 (起始位置, 1)] [相减 (起始位置2, 1)], 判断类型2), 等于 (棋局 [相减 (终止位置, 1)] [相加 (终止位置2, 1)], 判断类型2)))
                    赋值 (右空格数, 0)
                    赋值 (变量4, 相减 (终止位置, 1))
                    赋值 (变量5, 相加 (终止位置2, 1))
                    .判断循环首 (大于或等于 (变量4, 1))
                        .如果 (等于 (棋局 [变量4] [变量5], 0))
                            赋值 (右空格数, 相加 (右空格数, 1))
                        .否则
                            .如果真 (或者 (等于 (棋局 [变量4] [变量5], 判断类型2), 等于 (变量4, 1)))
                                跳出循环 ()
                            .如果真结束
                            
                        .如果结束
                        赋值 (变量4, 相减 (变量4, 1))
                        赋值 (变量5, 相加 (变量5, 1))
                    .判断循环尾 ()
                    .如果真 (并且 (小于 (左空格数, 2), 小于 (右空格数, 2)))
                        赋值 (变量4, 起始位置)
                        赋值 (变量5, 起始位置2)
                        .判断循环首 (大于或等于 (变量4, 终止位置))
                            赋值 (当前局面 [判断类型] [变量4] [变量5], 相加 (当前局面 [判断类型] [变量4] [变量5], 1))
                            赋值 (变量4, 相减 (变量4, 1))
                            赋值 (变量5, 相加 (变量5, 1))
                        .判断循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            赋值 (变量2, 相减 (终止位置, 1))
            赋值 (变量3, 相加 (终止位置2, 1))
            赋值 (左空格数, 0)
        .如果结束
        
    .判断循环尾 ()
    赋值 (变量1, 相减 (变量1, 1))
.判断循环尾 ()
.如果 (等于 (棋子类型, 1))
    赋值 (棋子类型2, 2)
.否则
    赋值 (棋子类型2, 1)
.如果结束
 ' 计算黑白双方棋子分值
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 8))
    赋值 (变量2, 1)
    .判断循环首 (小于或等于 (变量2, 8))
        .判断开始 (等于 ( [变量1] [变量2], 棋子类型))
            .判断开始 (等于 (当前局面 [棋子类型] [变量1] [变量2], 1))
                赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #一二面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型] [变量1] [变量2], 2))
                赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #一二面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型] [变量1] [变量2], 3))
                赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #三面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型] [变量1] [变量2], 4))
                赋值 (局面分值 [棋子类型] [1], 相加 (局面分值 [棋子类型] [1], #四面受保护棋子分值))
            .默认
                
            .判断结束
            
        .判断 (等于 ( [变量1] [变量2], 棋子类型2))
            .判断开始 (等于 (当前局面 [棋子类型2] [变量1] [变量2], 1))
                赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #一二面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型2] [变量1] [变量2], 2))
                赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #一二面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型2] [变量1] [变量2], 3))
                赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #三面受保护棋子分值))
            .判断 (等于 (当前局面 [棋子类型2] [变量1] [变量2], 4))
                赋值 (局面分值 [棋子类型2] [1], 相加 (局面分值 [棋子类型2] [1], #四面受保护棋子分值))
            .默认
                
            .判断结束
            
        .默认
            赋值 (棋子位置., 变量1)
            赋值 (棋子位置., 变量2)
            .如果真 (未知函数_67174911 (棋子位置, 棋子类型))
                 ' 加上移动力分值
                赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #落子点分值))
                .如果真 (等于 (棋子位置., 1))
                    .如果真 (或者 (等于 (棋子位置., 1), 等于 (棋子位置., 8)))
                        赋值 (局面分值 [棋子类型] [2], 相减 (相加 (局面分值 [棋子类型] [2], #四角分值), #落子点分值))
                    .如果真结束
                    
                .如果真结束
                .如果真 (等于 (棋子位置., 8))
                    .如果真 (或者 (等于 (棋子位置., 1), 等于 (棋子位置., 8)))
                        赋值 (局面分值 [棋子类型] [2], 相减 (相加 (局面分值 [棋子类型] [2], #四角分值), #落子点分值))
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
        .判断结束
        赋值 (变量2, 相加 (变量2, 1))
    .判断循环尾 ()
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
 ' 对四个角上的棋子额外增加分值
.如果真 (等于 ( [1] [1], 棋子类型))
    赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [1] [8], 棋子类型))
    赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [8] [1], 棋子类型))
    赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [8] [8], 棋子类型))
    赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [1] [1], 棋子类型2))
    赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [1] [8], 棋子类型2))
    赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [8] [1], 棋子类型2))
    赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #四角分值))
.如果真结束
.如果真 (等于 ( [8] [8], 棋子类型2))
    赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #四角分值))
.如果真结束
 ' 对与四个角相邻的棋子增加额外分值(增加数为负值,实质的是减少分值)
.如果真 (等于 ( [1] [1], 0))
    .如果真 (或者 (并且 (等于 (棋局 [2] [1], 棋子类型), 不等于 (当前局面 [棋子类型] [2] [1], 4)), 并且 (等于 (棋局 [2] [2], 棋子类型), 不等于 (当前局面 [棋子类型] [2] [2], 4)), 并且 (等于 (棋局 [1] [2], 棋子类型), 不等于 (当前局面 [棋子类型] [1] [2], 4))))
        赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #角边分值))
    .如果真结束
    .如果真 (或者 (并且 (等于 (棋局 [2] [1], 棋子类型2), 不等于 (当前局面 [棋子类型2] [2] [1], 4)), 并且 (等于 (棋局 [2] [2], 棋子类型2), 不等于 (当前局面 [棋子类型2] [2] [2], 4)), 并且 (等于 (棋局 [1] [2], 棋子类型2), 不等于 (当前局面 [棋子类型2] [1] [2], 4))))
        赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #角边分值))
    .如果真结束
    
.如果真结束
.如果真 (等于 ( [1] [8], 0))
    .如果真 (或者 (并且 (等于 (棋局 [1] [7], 棋子类型), 不等于 (当前局面 [棋子类型] [1] [7], 4)), 并且 (等于 (棋局 [2] [7], 棋子类型), 不等于 (当前局面 [棋子类型] [2] [7], 4)), 并且 (等于 (棋局 [2] [8], 棋子类型), 不等于 (当前局面 [棋子类型] [2] [8], 4))))
        赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #角边分值))
    .如果真结束
    .如果真 (或者 (并且 (等于 (棋局 [1] [7], 棋子类型2), 不等于 (当前局面 [棋子类型2] [1] [7], 4)), 并且 (等于 (棋局 [2] [7], 棋子类型2), 不等于 (当前局面 [棋子类型2] [2] [7], 4)), 并且 (等于 (棋局 [2] [8], 棋子类型2), 不等于 (当前局面 [棋子类型2] [2] [8], 4))))
        赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #角边分值))
    .如果真结束
    
.如果真结束
.如果真 (等于 ( [8] [1], 0))
    .如果真 (或者 (并且 (等于 (棋局 [7] [1], 棋子类型), 不等于 (当前局面 [棋子类型] [7] [1], 4)), 并且 (等于 (棋局 [7] [2], 棋子类型), 不等于 (当前局面 [棋子类型] [7] [2], 4)), 并且 (等于 (棋局 [8] [2], 棋子类型), 不等于 (当前局面 [棋子类型] [8] [2], 4))))
        赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #角边分值))
    .如果真结束
    .如果真 (或者 (并且 (等于 (棋局 [7] [1], 棋子类型2), 不等于 (当前局面 [棋子类型2] [7] [1], 4)), 并且 (等于 (棋局 [7] [2], 棋子类型2), 不等于 (当前局面 [棋子类型2] [7] [2], 4)), 并且 (等于 (棋局 [8] [2], 棋子类型2), 不等于 (当前局面 [棋子类型2] [8] [2], 4))))
        赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #角边分值))
    .如果真结束
    
.如果真结束
.如果真 (等于 ( [8] [8], 0))
    .如果真 (或者 (并且 (等于 (棋局 [8] [7], 棋子类型), 不等于 (当前局面 [棋子类型] [8] [7], 4)), 并且 (等于 (棋局 [7] [7], 棋子类型), 不等于 (当前局面 [棋子类型] [7] [7], 4)), 并且 (等于 (棋局 [7] [8], 棋子类型), 不等于 (当前局面 [棋子类型] [7] [8], 4))))
        赋值 (局面分值 [棋子类型] [2], 相加 (局面分值 [棋子类型] [2], #角边分值))
    .如果真结束
    .如果真 (或者 (并且 (等于 (棋局 [8] [7], 棋子类型2), 不等于 (当前局面 [棋子类型2] [8] [7], 4)), 并且 (等于 (棋局 [7] [7], 棋子类型2), 不等于 (当前局面 [棋子类型2] [7] [7], 4)), 并且 (等于 (棋局 [7] [8], 棋子类型2), 不等于 (当前局面 [棋子类型2] [7] [8], 4))))
        赋值 (局面分值 [棋子类型2] [2], 相加 (局面分值 [棋子类型2] [2], #角边分值))
    .如果真结束
    
.如果真结束
.如果真 (大于或等于 (局面分值 [棋子类型] [1], 相乘 (#四面受保护棋子分值, 32)))
    返回 (相减 (相加 (10000, 局面分值 [棋子类型] [1]), 局面分值 [棋子类型2] [1]))
.如果真结束
.如果真 (大于或等于 (局面分值 [棋子类型2] [1], 相乘 (#四面受保护棋子分值, 32)))
    返回 (相减 (相加 (-10000, 局面分值 [棋子类型] [1]), 局面分值 [棋子类型2] [1]))
.如果真结束
.如果 (或者 (大于或等于 (局面分值 [棋子类型] [1], 相乘 (10, #四面受保护棋子分值)), 大于或等于 (局面分值 [棋子类型2] [1], 相乘 (16, #四面受保护棋子分值))))
    返回 (相减 (相加 (局面分值 [棋子类型] [1], 局面分值 [棋子类型] [2]), 局面分值 [棋子类型2] [1], 局面分值 [棋子类型2] [2]))
.否则
    返回 (相减 (相加 (局面分值 [棋子类型] [1], 相乘 (局面分值 [棋子类型] [2], 2)), 局面分值 [棋子类型2] [1], 相乘 (局面分值 [棋子类型2] [2], 2)))
.如果结束


.子程序 产生玩家所有走法, 短整数型, , 产生所有可能的走法,返回走法数量,用于玩家下子
.参数 棋子类型, 短整数型, , 将要下的棋子类型

.局部变量 落子位置, 棋子点, , , 
.局部变量 走法数量, 短整数型, , , 

赋值 (落子位置.横坐标, 1)
赋值 (走法数量, 0)
.判断循环首 (小于 (落子位置.横坐标, 9))
    赋值 (落子位置.纵坐标, 1)
    .判断循环首 (小于 (落子位置.纵坐标, 9))
        .如果真 (创建一步走法 (落子位置, 棋子类型, 玩家全部走法 [棋子类型] [相加 (走法数量, 1)]))
            赋值 (走法数量, 相加 (走法数量, 1))
        .如果真结束
        赋值 (落子位置.纵坐标, 相加 (落子位置.纵坐标, 1))
    .判断循环尾 ()
    赋值 (落子位置.横坐标, 相加 (落子位置.横坐标, 1))
.判断循环尾 ()
返回 (走法数量)

.子程序 创建所有走法, 短整数型, , 创建所有走法,返回走法数量,用于搜索引擎
.参数 深度, 短整数型, , 深度
.参数 棋子类型, 短整数型, , 棋子类型

.局部变量 落子位置, 棋子点, , , 
.局部变量 走法数量, 短整数型, , , 

赋值 (落子位置.横坐标, 1)
赋值 (走法数量, 0)
.判断循环首 (小于 (落子位置.横坐标, 9))
    赋值 (落子位置.纵坐标, 1)
    .判断循环首 (小于 (落子位置.纵坐标, 9))
        .如果真 (创建一步走法 (落子位置, 棋子类型, 走法库 [深度] [相加 (走法数量, 1)]))
            赋值 (走法数量, 相加 (走法数量, 1))
        .如果真结束
        赋值 (落子位置.纵坐标, 相加 (落子位置.纵坐标, 1))
    .判断循环尾 ()
    赋值 (落子位置.横坐标, 相加 (落子位置.横坐标, 1))
.判断循环尾 ()
返回 (走法数量)

.子程序 显示可走棋位置, 空白型, , 显示所有可走棋的位置
.参数 棋子类型, 短整数型, , 将要走的棋子类型
.参数 走法数量, 短整数型, , 所有走法数量

.局部变量 变量1, 短整数型, , , 
.局部变量 图片号, 整数型, , , 

.如果 (等于 (棋子类型, 1))
    赋值 (图片号, 载入图片 (#黑棋可走的位置))
.否则
    赋值 (图片号, 载入图片 (#白棋可走的位置))
.如果结束
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 走法数量))
    图片号.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [棋子类型] [变量1], 落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [棋子类型] [变量1], 落子点.纵坐标, 1))), , , )
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
卸载图片 (图片号)

.子程序 修改玩家图片, 空白型, , 修改玩家图片
.如果 (等于 (游戏类型, 1))
    赋值 (.图片, #玩家)
    赋值 (.图片, #玩家)
.否则
    .如果 (等于 (先手, 1))
        赋值 (.图片, #电脑)
        赋值 (.图片, #玩家)
    .否则
        赋值 (.图片, #玩家)
        赋值 (.图片, #电脑)
    .如果结束
    
.如果结束


.子程序 初始化, 空白型, , 开始新游戏,初始化棋局
.参数 当前关卡, 短整数型, , 当前关卡

.局部变量 棋子数, 短整数型, , , 
.局部变量 变量1, 短整数型, , , 
.局部变量 图片号, 整数型, , , 
.局部变量 棋子类型, 短整数型, , , 
.局部变量 棋子位置, 棋子点, , , 

赋值 (开局库号, 当前关卡)
数组清零 (棋局)
赋值 (图片号, 载入图片 (#棋盘))
图片号.画图片 (0, 0, , , )
卸载图片 (图片号)
 ' 根据不同开局库摆放新局
赋值 (棋子数, 到数值 (取文本左边 (开局库 [当前关卡], 2)))
赋值 (白棋子数, 0)
赋值 (黑棋子数, 0)
赋值 (.标题, 相加 (“开局库”, 到文本 (当前关卡)))
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 棋子数))
    赋值 (棋子类型, 到数值 (取文本中间 (开局库 [当前关卡], 相加 (5, 相乘 (相减 (变量1, 1), 3)), 1)))
    赋值 (棋子位置.横坐标, 到数值 (取文本中间 (开局库 [当前关卡], 相加 (3, 相乘 (相减 (变量1, 1), 3)), 1)))
    赋值 (棋子位置.纵坐标, 到数值 (取文本中间 (开局库 [当前关卡], 相加 (4, 相乘 (相减 (变量1, 1), 3)), 1)))
    赋值 (棋局 [棋子位置].横坐标 [棋子位置].纵坐标, 棋子类型)
    .如果 (等于 (棋子类型, 1))
        赋值 (图片号, 载入图片 (#黑棋))
        赋值 (黑棋子数, 相加 (黑棋子数, 1))
    .否则
        赋值 (图片号, 载入图片 (#白棋))
        赋值 (白棋子数, 相加 (白棋子数, 1))
    .如果结束
    图片号.画图片 (相加 (32, 相乘 (48, 相减 (棋子位置.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (棋子位置.纵坐标, 1))), , , )
    卸载图片 (图片号)
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
赋值 (该谁下, 1)
赋值 (., 到文本 (黑棋子数))
赋值 (., 到文本 (白棋子数))
修改玩家图片 ()
赋值 (黑棋用时, 0)
赋值 (白棋用时, 0)
清空 ()
赋值 (.禁止, 真)
赋值 (.禁止, 假)
赋值 (.禁止, 假)
赋值 (.禁止, 假)
赋值 (.禁止, 假)
赋值 (是否正在进行游戏, 1)
.如果真 (并且 (等于 (游戏类型, 2), 等于 (先手, 1)))
     ' 如是人机对战计算机先行时计算机先走出一步
    赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
    数组清零 (历史得分表)
    赋值 (最佳走法.落子点.横坐标, -1)
    .如果 (大于 (相减 (64, 黑棋子数, 白棋子数), 终局搜索步数))
        负极大值搜索 (搜索深度, 该谁下, -30000, 30000, 假)
    .否则
        终局搜索 (终局搜索步数, 该谁下, -30000, 30000, 假)
    .如果结束
    .如果真 (不等于 (最佳走法.落子点.横坐标, -1))
        复制走法 (最佳走法, 玩家全部走法 [该谁下] [1])
    .如果真结束
    赋值 (玩家全部走法数量 [该谁下], 1)
    落子 (玩家全部走法 [该谁下] [1].落子点)
    .如果 (等于 (该谁下, 1))
        赋值 (该谁下, 2)
    .否则
        赋值 (该谁下, 1)
    .如果结束
    
.如果真结束
赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
显示可走棋位置 (该谁下, 玩家全部走法数量 [该谁下])

.子程序 走出一步, 空白型, , 走一步棋,用于搜索引擎
.参数 走棋方法, 一步走法, 参考, 一步走棋方法

.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 

赋值 (棋局 [走棋方法].落子点.横坐标 [走棋方法].落子点.纵坐标, 走棋方法.棋子类型)
赋值 (变量2, 走棋方法.被吃棋子个数)
.如果 (等于 (走棋方法.棋子类型, 1))
    赋值 (黑棋子数, 相加 (黑棋子数, 变量2, 1))
    赋值 (白棋子数, 相减 (白棋子数, 变量2))
.否则
    赋值 (白棋子数, 相加 (白棋子数, 变量2, 1))
    赋值 (黑棋子数, 相减 (黑棋子数, 变量2))
.如果结束
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 变量2))
    赋值 (棋局 [走棋方法].被吃棋子点 [变量1], 横坐标 [走棋方法].被吃棋子点 [变量1], 纵坐标, 走棋方法.棋子类型)
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()

.子程序 退回一步, 空白型, , 退回一步棋,用于搜索引擎
.参数 走棋方法, 一步走法, 参考, 一步走棋方法

.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 吃子类型, 短整数型, , , 

赋值 (.被吃棋子个数)
.如果 (等于 (走棋方法.棋子类型, 1))
    赋值 (吃子类型, 2)
    赋值 (黑棋子数, 相减 (黑棋子数, 变量2, 1))
    赋值 (白棋子数, 相加 (白棋子数, 变量2))
.否则
    赋值 (白棋子数, 相减 (白棋子数, 变量2, 1))
    赋值 (黑棋子数, 相加 (黑棋子数, 变量2))
    赋值 (吃子类型, 1)
.如果结束
赋值 (棋局 [走棋方法].落子点.横坐标 [走棋方法].落子点.纵坐标, 0)
赋值 (变量2, 走棋方法.被吃棋子个数)
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 变量2))
    赋值 (棋局 [走棋方法].被吃棋子点 [变量1], 横坐标 [走棋方法].被吃棋子点 [变量1], 纵坐标, 吃子类型)
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()

.子程序 落子, 逻辑型, , 下子,在棋盘上走出一步棋
.参数 落子位置, 棋子点, , 下棋子的位置

.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 变量3, 短整数型, , , 
.局部变量 变量4, 短整数型, , , 
.局部变量 图片号1, 整数型, , , 
.局部变量 图片号2, 整数型, , , 
.局部变量 图片号3, 整数型, , , 
.局部变量 是否可下子, 逻辑型, , , 
.局部变量 延时时间, 整数型, , , 

赋值 (是否可下子, 假)
赋值 (延时时间, 40) ' 设置翻转棋子的显示时间
赋值 (图片号2, 载入图片 (#空格))
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 玩家全部走法数量 [该谁下]))
    图片号2.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 落子点.纵坐标, 1))), , , ) ' 清除上一步显示的可走位置标识
    .如果真 (并且 (等于 (玩家全部走法 [该谁下] [变量1], 落子点.横坐标, 落子位置.横坐标), 等于 (玩家全部走法 [该谁下] [变量1], 落子点.纵坐标, 落子位置.纵坐标)))
        .如果 (等于 (该谁下, 1))
            赋值 (图片号1, 载入图片 (#下子黑棋))
        .否则
            赋值 (图片号1, 载入图片 (#下子白棋))
        .如果结束
        图片号1.画图片 (相加 (32, 相乘 (48, 相减 (落子位置.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子位置.纵坐标, 1))), , , ) ' 在落子点显示带有新子标识的棋子
        卸载图片 (图片号1)
        .如果真 (大于 (取项目数 (), 0)) ' 如果不是本局的第一步棋,清除上一步新子标识,显示如正常棋子
            .如果 (等于 (落子记录 [取项目数 ()].棋子类型, 1))
                赋值 (图片号1, 载入图片 (#黑棋))
            .否则
                赋值 (图片号1, 载入图片 (#白棋))
            .如果结束
            图片号1.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.纵坐标, 1))), , , )
            卸载图片 (图片号1)
        .如果真结束
        卸载图片 (图片号1)
        .如果 (等于 (该谁下, 1))
            赋值 (图片号1, 载入图片 (#黑棋))
        .否则
            赋值 (图片号1, 载入图片 (#白棋))
        .如果结束
        赋值 (棋局 [落子位置].横坐标 [落子位置].纵坐标, 该谁下)
        赋值 (变量3, 玩家全部走法 [该谁下] [变量1], 被吃棋子个数)
        赋值 (变量2, 相加 (取项目数 (), 1))
        复制走法 (玩家全部走法 [该谁下] [变量1], 落子记录 [变量2])
         ' 更改棋子数量
        .如果 (等于 (该谁下, 1))
            赋值 (黑棋子数, 相加 (黑棋子数, 变量3, 1))
            赋值 (白棋子数, 相减 (白棋子数, 变量3))
        .否则
            赋值 (白棋子数, 相加 (白棋子数, 变量3, 1))
            赋值 (黑棋子数, 相减 (黑棋子数, 变量3))
        .如果结束
         ' 显示落子记录
        .如果 (等于 (该谁下, 1))
            .如果 (小于 (变量2, 10))
                相加 (“ ”, 到文本 (变量2), “.黑棋：”, 字符 (相减 (相加 (取代码 (“A”, ), 落子记录 [变量2], 落子点.横坐标), 1)), 到文本 (落子记录 [变量2], 落子点.纵坐标)).加入项目 ()
            .否则
                相加 (到文本 (变量2), “.黑棋：”, 字符 (相减 (相加 (取代码 (“A”, ), 落子记录 [变量2], 落子点.横坐标), 1)), 到文本 (落子记录 [变量2], 落子点.纵坐标)).加入项目 ()
            .如果结束
            
        .否则
            .如果 (小于 (变量2, 10))
                相加 (“ ”, 到文本 (变量2), “.白棋：”, 字符 (相减 (相加 (取代码 (“A”, ), 落子记录 [变量2], 落子点.横坐标), 1)), 到文本 (落子记录 [变量2], 落子点.纵坐标)).加入项目 ()
            .否则
                相加 (到文本 (变量2), “.白棋：”, 字符 (相减 (相加 (取代码 (“A”, ), 落子记录 [变量2], 落子点.横坐标), 1)), 到文本 (落子记录 [变量2], 落子点.纵坐标)).加入项目 ()
            .如果结束
            
        .如果结束
        赋值 (.现行选中项, 相减 (取项目数 (), 1))
        复制走法 (玩家全部走法 [该谁下] [变量1], 落子记录 [取项目数 ()]) ' 加入走落子记录
        处理事件 ()
        延时 (延时时间)
         ' 显示翻转棋子动画
        .如果 (等于 (该谁下, 1)) ' 由白子变为黑子
            赋值 (图片号3, 载入图片 (#转棋一))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋二))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋三))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋四))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋五))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋六))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
        .否则
             ' 由黑子变为白子
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋六))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋五))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋四))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋三))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋二))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
            赋值 (图片号3, 载入图片 (#转棋一))
            赋值 (变量2, 1)
            .判断循环首 (小于或等于 (变量2, 变量3))
                图片号3.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
                赋值 (变量2, 相加 (变量2, 1))
            .判断循环尾 ()
            卸载图片 (图片号3)
            处理事件 ()
            延时 (延时时间)
        .如果结束
        赋值 (变量2, 1)
        处理事件 ()
        延时 (延时时间)
        .判断循环首 (小于或等于 (变量2, 变量3)) ' 正常显示被吃棋子
            图片号1.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 1))), , , )
            赋值 (棋局 [玩家全部走法] [该谁下] [变量1], 被吃棋子点 [变量2], 横坐标 [玩家全部走法] [该谁下] [变量1], 被吃棋子点 [变量2], 纵坐标, 该谁下)
            赋值 (变量2, 相加 (变量2, 1))
        .判断循环尾 ()
        卸载图片 (图片号1)
        赋值 (是否可下子, 真)
    .如果真结束
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
卸载图片 (图片号2)
赋值 (., 到文本 (黑棋子数))
赋值 (., 到文本 (白棋子数))
返回 (是否可下子)

.子程序 _退出_被选择, 空白型, , 
_退出游戏按钮_被单击 ()

.子程序 _新游戏按钮_被单击, 空白型, , 
初始化 (开局库号)

.子程序 游戏已结束, 空白型, , 游戏结束时进行相应处理
赋值 (是否正在进行游戏, 0)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 假)
载入 (提示窗口, , 真)

.子程序 _棋局画板_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 鼠标位置, 棋子点, , , 

赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
 ' 将屏幕坐标转化到棋局坐标
赋值 (鼠标位置.横坐标, 相加 (整除 (相减 (横向位置, 32), 48), 1))
赋值 (鼠标位置.纵坐标, 相加 (整除 (相减 (纵向位置, 32), 48), 1))
.如果真 (并且 (等于 (是否正在进行游戏, 1), 大于 (鼠标位置.横坐标, 0), 大于 (鼠标位置.纵坐标, 0), 小于 (鼠标位置.横坐标, 9), 小于 (鼠标位置.纵坐标, 9)))
    .如果 (等于 (游戏类型, 1)) ' 如果是双人游戏
        .如果真 (落子 (鼠标位置))
            .如果真 (或者 (等于 (黑棋子数, 0), 等于 (白棋子数, 0)))
                游戏已结束 ()
                返回 ()
            .如果真结束
            .如果真 (大于或等于 (相加 (黑棋子数, 白棋子数), 64))
                游戏已结束 ()
                返回 ()
            .如果真结束
            .如果 (等于 (该谁下, 1))
                赋值 (该谁下, 2)
            .否则
                赋值 (该谁下, 1)
            .如果结束
            赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
            .如果 (等于 (玩家全部走法数量 [该谁下], 0)) ' 如果一方无法下子，对方继续下
                .如果 (等于 (该谁下, 1))
                    赋值 (该谁下, 2)
                .否则
                    赋值 (该谁下, 1)
                .如果结束
                赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
                .如果 (等于 (玩家全部走法数量 [该谁下], 0)) ' 双方都无法下子，游戏结束
                    游戏已结束 ()
                    返回 ()
                .否则
                    .如果 (等于 (该谁下, 1))
                        信息框 (“白棋无路可走,黑棋继续下子!”, 0, “提示信息”)
                    .否则
                        信息框 (“黑棋无路可走,白棋继续下子!”, 0, “提示信息”)
                    .如果结束
                    
                .如果结束
                
            .否则
                
            .如果结束
            
        .如果真结束
        显示可走棋位置 (该谁下, 玩家全部走法数量 [该谁下])
    .否则
        .如果真 (落子 (鼠标位置))
            .如果真 (或者 (等于 (黑棋子数, 0), 等于 (白棋子数, 0)))
                游戏已结束 ()
                返回 ()
            .如果真结束
            .如果真 (大于或等于 (相加 (黑棋子数, 白棋子数), 64))
                游戏已结束 ()
                返回 ()
            .如果真结束
            .如果 (等于 (该谁下, 1))
                赋值 (该谁下, 2)
            .否则
                赋值 (该谁下, 1)
            .如果结束
            赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
            .如果 (等于 (玩家全部走法数量 [该谁下], 0)) ' 如果电脑棋手无法落子，玩家继续下
                信息框 (“电脑无路可走,玩家继续下子!!!”, 0, )
                .如果 (等于 (该谁下, 1))
                    赋值 (该谁下, 2)
                .否则
                    赋值 (该谁下, 1)
                .如果结束
                赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
                .如果真 (等于 (玩家全部走法数量 [该谁下], 0)) ' 双方都无法落子，游戏结束
                    游戏已结束 ()
                    返回 ()
                .如果真结束
                
            .否则
                 ' 如果是人机对战
                处理事件 ()
                 ' 电脑计算落子位置
                数组清零 (历史得分表)
                赋值 (最佳走法.落子点.横坐标, -1)
                .如果 (大于 (相减 (64, 黑棋子数, 白棋子数), 终局搜索步数))
                    负极大值搜索 (搜索深度, 该谁下, -30000, 30000, 假)
                .否则
                    终局搜索 (终局搜索步数, 该谁下, -30000, 30000, 假)
                .如果结束
                .如果真 (不等于 (最佳走法.落子点.横坐标, -1))
                    复制走法 (最佳走法, 玩家全部走法 [该谁下] [1])
                .如果真结束
                赋值 (玩家全部走法数量 [该谁下], 1)
                落子 (玩家全部走法 [该谁下] [1].落子点) ' 电脑走棋
                .如果 (等于 (该谁下, 1))
                    赋值 (该谁下, 2)
                .否则
                    赋值 (该谁下, 1)
                .如果结束
                赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
                .判断循环首 (等于 (玩家全部走法数量 [该谁下], 0)) ' 玩家无法落子，电脑继续下子，直到玩家可以下子
                    .如果 (等于 (该谁下, 1))
                        赋值 (该谁下, 2)
                    .否则
                        赋值 (该谁下, 1)
                    .如果结束
                    赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
                    .如果真 (等于 (玩家全部走法数量 [该谁下], 0)) ' 双方都无法落子，游戏结束
                        游戏已结束 ()
                        返回 ()
                    .如果真结束
                    信息框 (“玩家无路可走,电脑继续下子!!!”, 0, )
                     ' 电脑计算落子位置
                    数组清零 (历史得分表)
                    赋值 (最佳走法.落子点.横坐标, -1)
                    .如果 (大于 (相减 (64, 黑棋子数, 白棋子数), 终局搜索步数))
                        负极大值搜索 (搜索深度, 该谁下, -30000, 30000, 假)
                    .否则
                        终局搜索 (终局搜索步数, 该谁下, -30000, 30000, 假)
                    .如果结束
                    .如果真 (不等于 (最佳走法.落子点.横坐标, -1))
                        复制走法 (最佳走法, 玩家全部走法 [该谁下] [1])
                    .如果真结束
                    赋值 (玩家全部走法数量 [该谁下], 1)
                    落子 (玩家全部走法 [该谁下] [1].落子点) ' 电脑下子
                    .如果 (等于 (该谁下, 1))
                        赋值 (该谁下, 2)
                    .否则
                        赋值 (该谁下, 1)
                    .如果结束
                    赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
                .判断循环尾 ()
            .如果结束
            
        .如果真结束
        
    .如果结束
    显示可走棋位置 (该谁下, 玩家全部走法数量 [该谁下])
.如果真结束
赋值 (.禁止, 假)
赋值 (.禁止, 假)
赋值 (.禁止, 假)

.子程序 复制走法, 空白型, , 复制一步法走
.参数 源走法, 一步走法, , 要复制的走法
.参数 目标走法, 一步走法, , 目标走法

赋值 (目标走法.落子点.横坐标, 源走法.落子点.横坐标)
赋值 (目标走法.落子点.纵坐标, 源走法.落子点.纵坐标)
赋值 (目标走法.棋子类型, 源走法.棋子类型)
赋值 (目标走法.历史得分, 源走法.历史得分)
赋值 (目标走法.被吃棋子个数, 源走法.被吃棋子个数)
复制数组 (目标走法.被吃棋子点, 源走法.被吃棋子点)

.子程序 历史得分排序, 空白型, , 将所有走法按历史得分从大到小排序
.参数 走法数, 短整数型, , 所有走法的数量
.参数 深度, 短整数型, , 搜索深度

.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 变量3, 短整数型, , , 
.局部变量 走棋方法, 一步走法, , , 

赋值 (变量1, 1)
.判断循环首 (小于 (变量1, 走法数))
    赋值 (变量2, 相加 (变量1, 1))
    赋值 (变量3, 变量1)
    .判断循环首 (小于或等于 (变量2, 走法数))
        .如果真 (大于 (走法库 [深度] [变量2], 历史得分, 走法库 [深度] [变量3], 历史得分))
            赋值 (变量3, 变量2)
        .如果真结束
        赋值 (变量2, 相加 (变量2, 1))
    .判断循环尾 ()
    .如果真 (不等于 (变量3, 变量1))
        复制走法 (走法库 [深度] [变量3], 走棋方法)
        复制走法 (走法库 [深度] [变量1], 走法库 [深度] [变量3])
        复制走法 (走棋方法, 走法库 [深度] [变量1])
    .如果真结束
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()

.子程序 终局搜索, 整数型, , 当达到终局搜索步数时搜索到当前棋局的最后一步
.参数 深度, 短整数型, , 搜索深度
.参数 棋子类型, 短整数型, , 棋子类型
.参数 下界, 整数型, , 搜索下界
.参数 上界, 整数型, , 搜索上界
.参数 无棋可走, 逻辑型, , 对方是否已无棋可走

.局部变量 棋局分值, 整数型, , , 
.局部变量 走法数, 短整数型, , , 
.局部变量 变量1, 短整数型, , , 
.局部变量 好走法, 整数型, , , 
.局部变量 吃子类型, 短整数型, , , 

.如果 (等于 (1))
    赋值 (吃子类型, 2)
.否则
    赋值 (吃子类型, 1)
.如果结束
.如果真 (小于或等于 (0)) ' 叶结点返回估值
    .如果 (等于 (棋子类型, 1))
        返回 (相减 (黑棋子数, 白棋子数))
    .否则
        返回 (相减 (白棋子数, 黑棋子数))
    .如果结束
    
.如果真结束
.如果真 (等于 (相加 (黑棋子数, 白棋子数), 64)) ' 棋子已满返回估值
    .如果 (等于 (棋子类型, 1))
        返回 (相减 (黑棋子数, 白棋子数))
    .否则
        返回 (相减 (白棋子数, 黑棋子数))
    .如果结束
    
.如果真结束
.如果真 (等于 (黑棋子数, 0)) ' 黑子被吃光，返回估值
    .如果 (等于 (2))
        返回 (相加 (20000, 白棋子数))
    .否则
        返回 (相减 (-20000, 白棋子数))
    .如果结束
    
.如果真结束
.如果真 (等于 (白棋子数, 0)) ' 白子被吃光，返回估值
    .如果 (等于 (1))
        返回 (相加 (20000, 黑棋子数))
    .否则
        返回 (相减 (-20000, 黑棋子数))
    .如果结束
    
.如果真结束
赋值 (走法数, 创建所有走法 ())
.如果真 (等于 (深度, 终局搜索步数)) ' 搜索顶层，置进度条
    赋值 (.最小位置, 0)
    赋值 (.最大位置, 走法数)
    赋值 (.位置, 0)
.如果真结束
.如果真 (并且 (等于 (走法数, 0), 等于 (真))) ' 双方都无棋可走，返回估值
    .如果 (等于 (1))
        返回 (相减 (黑棋子数, 白棋子数))
    .否则
        返回 (相减 (白棋子数, 黑棋子数))
    .如果结束
    
.如果真结束
 ' 按历史得分表确定各落子点的历史得分
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 走法数))
    赋值 (走法库 [深度] [变量1], 历史得分, 历史得分表 [走法库] [深度] [变量1], 落子点.横坐标 [走法库] [深度] [变量1], 落子点.纵坐标)
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
历史得分排序 (走法数, )
赋值 (好走法, -1)
.如果 (等于 (走法数, 0)) ' 无法走棋，对方继续
    赋值 (棋局分值, 负 (终局搜索 (相减 (深度, 1), 吃子类型, 负 (上界), 负 (下界), 真)))
    .如果真 (大于 (棋局分值, ))
        赋值 (棋局分值)
    .如果真结束
    
.否则
    赋值 (变量1, 1)
    .判断循环首 (小于或等于 (变量1, 走法数))
        .如果真 (等于 (深度, 终局搜索步数))
            赋值 (.位置, 变量1)
        .如果真结束
         ' 走出一步，继续搜索
        走出一步 (走法库 [ [变量1]])
        赋值 (棋局分值, 负 (终局搜索 (相减 (深度, 1), 吃子类型, 负 (上界), 负 (下界), 假)))
        退回一步 (走法库 [ [变量1]])
        .如果真 (大于 (棋局分值, ))
            赋值 (棋局分值)
            .如果真 (等于 (深度, 终局搜索步数))
                复制走法 (走法库 [ [变量1]], 最佳走法)
            .如果真结束
            赋值 (好走法, 变量1)
        .如果真结束
        .如果真 (大于或等于 ())
            赋值 (好走法, 变量1)
            跳出循环 ()
        .如果真结束
        赋值 (变量1, 相加 (变量1, 1))
    .判断循环尾 ()
.如果结束
.如果真 (不等于 (好走法, -1))
    赋值 (历史得分表 [走法库] [深度] [好走法], 落子点.横坐标 [走法库] [深度] [好走法], 落子点.纵坐标, 相加 (历史得分表 [走法库] [深度] [好走法], 落子点.横坐标 [走法库] [深度] [好走法], 落子点.纵坐标, 相乘 (深度, 4))) ' 汇入历史得分表
.如果真结束
返回 ()

.子程序 负极大值搜索, 整数型, , 历史启发增强的负极大值搜索
.参数 深度, 短整数型, , 搜索深度
.参数 棋子类型, 短整数型, , 棋子类型
.参数 下界, 整数型, , 搜索下界
.参数 上界, 整数型, , 搜索上界
.参数 无棋可走, 逻辑型, , 对方是否已无棋可走

.局部变量 棋局分值, 整数型, , , 
.局部变量 走法数, 短整数型, , , 
.局部变量 变量1, 短整数型, , , 
.局部变量 好走法, 整数型, , , 
.局部变量 吃子类型, 短整数型, , , 

.如果 (等于 (棋子类型, 1))
    赋值 (吃子类型, 2)
.否则
    赋值 (吃子类型, 1)
.如果结束
.如果真 (小于或等于 (深度, 0)) ' 叶结点返回估值
    返回 (估值函数 (棋子类型))
.如果真结束
.如果真 (等于 (黑棋子数, 0)) ' 黑子被吃光，返回估值
    .如果 (等于 (棋子类型, 2))
        返回 (相加 (20000, 白棋子数))
    .否则
        返回 (相减 (-20000, 白棋子数))
    .如果结束
    
.如果真结束
.如果真 (等于 (白棋子数, 0)) ' 白子被吃光，返回估值
    .如果 (等于 (棋子类型, 1))
        返回 (相加 (20000, 黑棋子数))
    .否则
        返回 (相减 (-20000, 黑棋子数))
    .如果结束
    
.如果真结束

赋值 (走法数, 创建所有走法 (深度, ))
.如果真 (等于 (深度, 搜索深度)) ' 顶层搜索，置进度条
    赋值 (.最小位置, 0)
    赋值 (.最大位置, 走法数)
    赋值 (.位置, 0)
.如果真结束
.如果真 (并且 (等于 (走法数, 0), 等于 (无棋可走, 真))) ' 双方都无法落子，返回估值
    .如果 (等于 (1))
        .如果 (大于 (黑棋子数, 白棋子数))
            返回 (相加 (20000, 相减 (黑棋子数, 白棋子数)))
        .否则
            返回 (相减 (相加 (-20000, 黑棋子数), 白棋子数))
        .如果结束
        
    .否则
        .如果 (大于 (白棋子数, 黑棋子数))
            返回 (相减 (相加 (20000, 白棋子数), 黑棋子数))
        .否则
            返回 (相减 (相加 (-20000, 白棋子数), 黑棋子数))
        .如果结束
        
    .如果结束
    
.如果真结束
 ' 按历史得分表确定各落子点的历史得分
赋值 (变量1, 1)
.判断循环首 (小于或等于 (变量1, 走法数))
    赋值 (走法库 [深度] [变量1], 历史得分, 历史得分表 [走法库] [深度] [变量1], 落子点.横坐标 [走法库] [深度] [变量1], 落子点.纵坐标)
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
历史得分排序 (走法数, 深度)
赋值 (好走法, -1)
.如果 (等于 (走法数, 0))
     ' 无法走棋，对方继续
    赋值 (棋局分值, 负 (负极大值搜索 (相减 (深度, 1), 吃子类型, 负 (上界), 负 (下界), 真)))
    .如果真 (大于 (棋局分值, 下界))
        赋值 (下界, 棋局分值)
    .如果真结束
    
.否则
    赋值 (变量1, 1)
    .判断循环首 (小于或等于 (变量1, 走法数))
        .如果真 (等于 (深度, 搜索深度))
            赋值 (.位置, 变量1)
        .如果真结束
         ' 走出一步，继续搜索
        走出一步 (走法库 [深度] [变量1])
        赋值 (棋局分值, 负 (负极大值搜索 (相减 (深度, 1), 吃子类型, 负 (上界), 负 (下界), 假)))
        退回一步 (走法库 [深度] [变量1])
        .如果真 (大于 (棋局分值, 下界))
            赋值 (下界, 棋局分值)
            .如果真 (等于 (深度, 搜索深度))
                复制走法 (走法库 [深度] [变量1], 最佳走法)
            .如果真结束
            赋值 (好走法, 变量1)
        .如果真结束
        .如果真 (大于或等于 (下界, 上界))
            赋值 (好走法, 变量1)
            跳出循环 ()
        .如果真结束
        赋值 (变量1, 相加 (变量1, 1))
    .判断循环尾 ()
.如果结束
.如果真 (不等于 (好走法, -1))
    赋值 (历史得分表 [走法库] [深度] [好走法], 落子点.横坐标 [走法库] [深度] [好走法], 落子点.纵坐标, 相加 (历史得分表 [走法库] [深度] [好走法], 落子点.横坐标 [走法库] [深度] [好走法], 落子点.纵坐标, 相乘 (深度, 4))) ' 汇入历史得分表
.如果真结束
返回 (下界)

.子程序 _记时时钟_周期事件, 空白型, , 
.局部变量 分数, 整数型, , , 
.局部变量 秒数, 整数型, , , 
.局部变量 变量1, 文本型, , , 

.如果真 (等于 (是否正在进行游戏, 1))
    .如果 (等于 (该谁下, 1))
        赋值 (黑棋用时, 相加 (黑棋用时, 1))
    .否则
        赋值 (白棋用时, 相加 (白棋用时, 1))
    .如果结束
    赋值 (分数, 整除 (黑棋用时, 60))
    赋值 (秒数, 求余数 (黑棋用时, 60))
    赋值 (变量1, “时间[”)
    .如果 (大于 (分数, 9))
        赋值 (变量1, 相加 (变量1, 到文本 (分数)))
    .否则
        赋值 (变量1, 相加 (变量1, “0”, 到文本 (分数)))
    .如果结束
    .如果 (大于 (秒数, 9))
        赋值 (变量1, 相加 (变量1, “：”, 到文本 (秒数), “]”))
    .否则
        赋值 (变量1, 相加 (变量1, “：0”, 到文本 (秒数), “]”))
    .如果结束
    赋值 (., 变量1)
    赋值 (分数, 整除 (白棋用时, 60))
    赋值 (秒数, 求余数 (白棋用时, 60))
    赋值 (变量1, “时间[”)
    .如果 (大于 (分数, 9))
        赋值 (变量1, 相加 (变量1, 到文本 (分数)))
    .否则
        赋值 (变量1, 相加 (变量1, “0”, 到文本 (分数)))
    .如果结束
    .如果 (大于 (秒数, 9))
        赋值 (变量1, 相加 (变量1, “：”, 到文本 (秒数), “]”))
    .否则
        赋值 (变量1, 相加 (变量1, “：0”, 到文本 (秒数), “]”))
    .如果结束
    赋值 (., 变量1)
.如果真结束


.子程序 _新游戏_被选择, 空白型, , 
初始化 (开局库号)

.子程序 _双人游戏_被选择, 空白型, , 
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (游戏类型, 1)
赋值 (.禁止, 真)
赋值 (.禁止, 真)

.子程序 _人机对战_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (游戏类型, 2)
赋值 (.禁止, 假)
赋值 (.禁止, 假)

.子程序 _电脑先走_被选择, 空白型, , 
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (先手, 1)

.子程序 _玩家先走_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (先手, 2)

.子程序 _容易_被选择, 空白型, , 
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (搜索深度, 5)
赋值 (终局搜索步数, 8)

.子程序 _一般_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (搜索深度, 6)
赋值 (终局搜索步数, 9)

.子程序 _困难_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (搜索深度, 7)
赋值 (终局搜索步数, 11)

.子程序 _结束_被选择, 空白型, , 
赋值 (是否正在进行游戏, 0)
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)

.子程序 _悔棋按钮_被单击, 空白型, , 悔棋
.局部变量 变量1, 短整数型, , , 
.局部变量 变量2, 短整数型, , , 
.局部变量 变量3, 短整数型, , , 
.局部变量 图片号, 整数型, , , 
.局部变量 图片号2, 整数型, , , 

赋值 (变量1, 1)
赋值 (图片号, 载入图片 (#空格))
 ' 清除可落子位置标识
.判断循环首 (小于或等于 (变量1, 玩家全部走法数量 [该谁下]))
    图片号.画图片 (相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (玩家全部走法 [该谁下] [变量1], 落子点.纵坐标, 1))), , , )
    赋值 (变量1, 相加 (变量1, 1))
.判断循环尾 ()
.如果 (等于 (游戏类型, 1)) ' 如果是双人游戏
    .如果真 (大于 (取项目数 (), 0)) ' 走棋记录不为空,可悔棋
        赋值 (该谁下, 落子记录 [取项目数 ()].棋子类型)
        图片号.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.纵坐标, 1))), , , ) ' 清除本步棋落子点棋子
         ' 还原本步棋被吃棋子
        .如果 (等于 (落子记录 [取项目数 ()].棋子类型, 1))
            赋值 (图片号2, 载入图片 (#白棋))
        .否则
            赋值 (图片号2, 载入图片 (#黑棋))
        .如果结束
        赋值 (变量3, 1)
        .判断循环首 (小于或等于 (变量3, 落子记录 [取项目数 ()].被吃棋子个数))
            图片号2.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 纵坐标, 1))), , , )
            赋值 (变量3, 相加 (变量3, 1))
        .判断循环尾 ()
        卸载图片 (图片号2)
        退回一步 (落子记录 [取项目数 ()]) ' 修改棋局
        相减 (取项目数 (), 1).删除项目 () ' 删除落子记录
    .如果真结束
    
.否则
     ' 如果是人机对战
    .如果真 (大于 (取项目数 (), 1)) ' 如果可悔棋(人机对战悔棋不同于双人游戏,双人游戏每次悔棋黑方或白方悔一步棋,而人机对战是电脑棋手与玩家各悔一步棋
        .如果 (等于 (先手, 1))
            赋值 (变量1, 1)
            赋值 (变量2, 2)
        .否则
            赋值 (变量2, 1)
            赋值 (变量1, 2)
        .如果结束
        .判断循环首 (并且 (大于 (取项目数 (), 0), 等于 (落子记录 [取项目数 ()].棋子类型, 变量1))) ' 电脑棋手悔棋,到该玩家走的一步为止
            退回一步 (落子记录 [取项目数 ()]) ' 修改棋局
            图片号.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.纵坐标, 1))), , , ) ' 清除本步棋落子点棋子
             ' 还原本步棋被吃棋子
            .如果 (等于 (落子记录 [取项目数 ()].棋子类型, 1))
                赋值 (图片号2, 载入图片 (#白棋))
            .否则
                赋值 (图片号2, 载入图片 (#黑棋))
            .如果结束
            赋值 (变量3, 1)
            .判断循环首 (小于或等于 (变量3, 落子记录 [取项目数 ()].被吃棋子个数))
                图片号2.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 纵坐标, 1))), , , )
                赋值 (变量3, 相加 (变量3, 1))
            .判断循环尾 ()
            卸载图片 (图片号2)
            相减 (取项目数 (), 1).删除项目 () ' 删除落子记录
        .判断循环尾 ()
        .判断循环首 (并且 (大于 (取项目数 (), 0), 等于 (落子记录 [取项目数 ()].棋子类型, 变量2))) ' 玩家悔棋,直到该电脑走为止
            退回一步 (落子记录 [取项目数 ()]) ' 修改棋局
            图片号.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.纵坐标, 1))), , , ) ' 清除本步棋落子点棋子
             ' 还原本步棋被吃棋子
            .如果 (等于 (落子记录 [取项目数 ()].棋子类型, 1))
                赋值 (图片号2, 载入图片 (#白棋))
            .否则
                赋值 (图片号2, 载入图片 (#黑棋))
            .如果结束
            赋值 (变量3, 1)
            .判断循环首 (小于或等于 (变量3, 落子记录 [取项目数 ()].被吃棋子个数))
                图片号2.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].被吃棋子点 [变量3], 纵坐标, 1))), , , )
                赋值 (变量3, 相加 (变量3, 1))
            .判断循环尾 ()
            卸载图片 (图片号2)
            相减 (取项目数 (), 1).删除项目 () ' 删除落子记录
        .判断循环尾 ()
        赋值 (该谁下, 变量2)
    .如果真结束
    
.如果结束
卸载图片 (图片号)
赋值 (., 到文本 (黑棋子数))
赋值 (., 到文本 (白棋子数))
.如果真 (大于 (取项目数 (), 0)) ' 显示新下棋子
    .如果 (等于 (落子记录 [取项目数 ()].棋子类型, 1))
        赋值 (图片号, 载入图片 (#下子黑棋))
    .否则
        赋值 (图片号, 载入图片 (#下子白棋))
    .如果结束
    图片号.画图片 (相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.横坐标, 1))), 相加 (32, 相乘 (48, 相减 (落子记录 [取项目数 ()].落子点.纵坐标, 1))), , , )
    卸载图片 (图片号)
.如果真结束
赋值 (玩家全部走法数量 [该谁下], 产生玩家所有走法 (该谁下))
显示可走棋位置 (该谁下, 玩家全部走法数量 [该谁下])

.子程序 _悔棋_被选择, 空白型, , 
_悔棋按钮_被单击 ()

.子程序 _查看战况_被选择, 空白型, , 
载入 (当前战况, , 真)

.子程序 _查看战况按钮_被单击, 空白型, , 
载入 (当前战况, , 真)

.子程序 _关于按钮_被单击, 空白型, , 
载入 (关于窗口, , 真)

.子程序 _关于_被选择, 空白型, , 
载入 (关于窗口, , 真)

.子程序 _游戏简介_被选择, 空白型, , 
运行 (“explorer.exe help\help.htm”, 假, )

.子程序 _开局一_被选择, 空白型, , 
初始化 (1)

.子程序 _开局二_被选择, 空白型, , 
初始化 (2)

.子程序 _开局三_被选择, 空白型, , 
初始化 (3)

.子程序 _开局四_被选择, 空白型, , 
初始化 (4)

.子程序 _开局五_被选择, 空白型, , 
初始化 (5)

.子程序 _开局六_被选择, 空白型, , 
初始化 (6)

.子程序 _开局七_被选择, 空白型, , 
初始化 (7)

.子程序 _开局八_被选择, 空白型, , 
初始化 (8)

.子程序 _开局九_被选择, 空白型, , 
初始化 (9)

.子程序 _开局十_被选择, 空白型, , 
初始化 (10)

.窗口程序集 窗口程序集2, , , 

.子程序 _当前战况_创建完毕, 空白型, , 
未知支持库函数_0 (2)
.如果 (大于 (相加 (战况 [1] [1], 战况 [1] [2], 战况 [1] [3]), 0))
    赋值 (., 相加 (“黑棋胜：”, 到文本 (战况 [1] [1]), “局，胜率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [1] [1], 100), 相加 (战况 [1] [1], 战况 [1] [2], 战况 [1] [3])), 1)), “%”))
    赋值 (., 相加 (“白棋胜：”, 到文本 (战况 [1] [2]), “局，胜率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [1] [2], 100), 相加 (战况 [1] [1], 战况 [1] [2], 战况 [1] [3])), 1)), “%”))
    赋值 (., 相加 (“和棋：”, 到文本 (战况 [1] [3]), “局，和棋率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [1] [3], 100), 相加 (战况 [1] [1], 战况 [1] [2], 战况 [1] [3])), 1)), “%”))
.否则
    赋值 (., “黑棋胜：0局”)
    赋值 (., “白棋胜：0局”)
    赋值 (., “和棋：0局”)
.如果结束
.如果 (大于 (相加 (战况 [2] [1], 战况 [2] [2], 战况 [2] [3]), 0))
    赋值 (., 相加 (“电脑胜：”, 到文本 (战况 [2] [1]), “局，胜率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [2] [1], 100), 相加 (战况 [2] [1], 战况 [2] [2], 战况 [2] [3])), 1)), “%”))
    赋值 (., 相加 (“玩家胜：”, 到文本 (战况 [2] [2]), “局，胜率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [2] [2], 100), 相加 (战况 [2] [1], 战况 [2] [2], 战况 [2] [3])), 1)), “%”))
    赋值 (., 相加 (“和棋：”, 到文本 (战况 [2] [3]), “局，和棋率：”, 到文本 (四舍五入 (相除 (相乘 (战况 [2] [3], 100), 相加 (战况 [2] [1], 战况 [2] [2], 战况 [2] [3])), 1)), “%”))
.否则
    赋值 (., “黑棋胜：0局”)
    赋值 (., “白棋胜：0局”)
    赋值 (., “和棋：0局”)
.如果结束
.如果 (等于 (游戏类型, 1))
    赋值 (.现行子夹, 0)
.否则
    赋值 (.现行子夹, 1)
.如果结束


.子程序 _关闭按钮_被单击, 空白型, , 
销毁 ()

.窗口程序集 窗口程序集3, , , 

.子程序 _关于窗口_创建完毕, 空白型, , 
未知支持库函数_0 (2)

.子程序 _图片框1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()

.子程序 _透明标签3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()

.子程序 _透明标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()

.子程序 _透明标签2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()

.窗口程序集 窗口程序集4, , , 

.子程序 _提示窗口_创建完毕, 空白型, , 
未知支持库函数_0 (2)
.如果 (等于 (游戏类型, 1))
    .判断开始 (大于 (黑棋子数, 白棋子数))
        赋值 (战况 [1] [1], 相加 (战况 [1] [1], 1))
        赋值 (黑棋子数, 相减 (64, 白棋子数))
        赋值 (., 相加 (“黑棋胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “黑棋胜白棋”, 到文本 (相减 (黑棋子数, 白棋子数)), “子。”))
        赋值 (.标题, “黑棋胜”)
    .判断 (小于 (黑棋子数, 白棋子数))
        赋值 (白棋子数, 相减 (64, 黑棋子数))
        赋值 (战况 [1] [2], 相加 (战况 [1] [2], 1))
        赋值 (., 相加 (“白棋胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “白棋胜黑棋”, 到文本 (相减 (白棋子数, 黑棋子数)), “子。”))
        赋值 (.标题, “白棋胜”)
    .默认
        赋值 (战况 [1] [3], 相加 (战况 [1] [3], 1))
        赋值 (., 相加 (“和胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个。”))
        赋值 (.标题, “和胜”)
    .判断结束
    
.否则
    .如果 (等于 (先手, 1))
        .判断开始 (大于 (黑棋子数, 白棋子数))
            赋值 (黑棋子数, 相减 (64, 白棋子数))
            赋值 (战况 [2] [1], 相加 (战况 [2] [1], 1))
            赋值 (., 相加 (“电脑胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “电脑胜玩家”, 到文本 (相减 (黑棋子数, 白棋子数)), “子。”))
            赋值 (.标题, “电脑胜”)
        .判断 (小于 (黑棋子数, 白棋子数))
            赋值 (白棋子数, 相减 (64, 黑棋子数))
            赋值 (战况 [2] [2], 相加 (战况 [2] [2], 1))
            赋值 (., 相加 (“玩家胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “玩家胜电脑”, 到文本 (相减 (白棋子数, 黑棋子数)), “子。”))
            赋值 (.标题, “玩家胜”)
        .默认
            赋值 (战况 [2] [3], 相加 (战况 [2] [3], 1))
            赋值 (., 相加 (“和胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个。”))
            赋值 (.标题, “和胜”)
        .判断结束
        
    .否则
        .判断开始 (大于 (黑棋子数, 白棋子数))
            赋值 (黑棋子数, 相减 (64, 白棋子数))
            赋值 (战况 [2] [2], 相加 (战况 [2] [2], 1))
            赋值 (., 相加 (“玩家胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “玩家胜电脑”, 到文本 (相减 (黑棋子数, 白棋子数)), “子。”))
            赋值 (.标题, “玩家胜”)
        .判断 (小于 (黑棋子数, 白棋子数))
            赋值 (白棋子数, 相减 (64, 黑棋子数))
            赋值 (战况 [2] [1], 相加 (战况 [2] [1], 1))
            赋值 (., 相加 (“电脑胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个，”, “电脑胜玩家”, 到文本 (相减 (白棋子数, 黑棋子数)), “子。”))
            赋值 (.标题, “电脑胜”)
        .默认
            赋值 (战况 [2] [3], 相加 (战况 [2] [3], 1))
            赋值 (., 相加 (“和胜!!!”, 字符 (13), 字符 (10), “黑棋共”, 到文本 (黑棋子数), “个，”, “白棋共”, 到文本 (白棋子数), “个。”))
            赋值 (.标题, “和胜”)
        .判断结束
        
    .如果结束
    
.如果结束


.子程序 _不玩了_被单击, 空白型, , 
销毁 ()

.子程序 _重玩本局_被单击, 空白型, , 
初始化 (开局库号)
销毁 ()

.子程序 _下一局_被单击, 空白型, , 
赋值 (开局库号, 相加 (开局库号, 1))
.如果真 (大于 (开局库号, 10))
    赋值 (开局库号, 1)
.如果真结束
初始化 (开局库号)
销毁 ()


 ' 不属于任何一个程序集、类模块的函数：
