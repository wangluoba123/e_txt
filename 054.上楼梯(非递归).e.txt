 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 上楼梯(非递归)
 ' 程序描述：某人上台阶，他一步可以迈一个台阶或两个台阶，共有8个台阶，编程输出他所有可能上法。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 283
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 上楼梯(非递归)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：循环法
 ' 问题：上楼梯
 ' 问题描述：
 ' 某人上台阶，他一步可以迈一个台阶或两个台阶，共有８个台阶，编程输出他所有可能上法。
 ' 问题分析：
 ' 如：有4个台阶，输出应是：
 ' 2    2
 ' 2    1    1
 ' 1    2    1
 ' 1    1    2
 ' 1    1    1    1
 ' 共有5种方法。
 ' 按照上面列出的式子，一个一个的往出找，先找所有两步走的，然后再依次将每一个两步走的变成一步走的，
 ' 一步走的变成两步走的。一直到所有都变成一步走的为止。
 ' 通过上面规律可以推导出结果。
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
.局部变量 台阶数目, 整数型, , , 存放要上的台阶数目
.局部变量 步数数组, 整数型, , "8", 存放上台阶时的步数
.局部变量 变量, 整数型, , , 数组下标值
.局部变量 循环变量, 整数型, , , 
.局部变量 方法数目, 整数型, , , 最后找到的上台阶总数目

赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (台阶数目, 8)
赋值 (变量, 0)
 ' 开始循环
.判断循环首 (等于 (1, 1))
     ' 当台阶数目大于等于２时，每步上两个台阶
    .判断循环首 (大于或等于 (台阶数目, 2))
        赋值 (变量, 相加 (变量, 1))
        赋值 (步数数组 [变量], 2)
        赋值 (台阶数目, 相减 (台阶数目, 2))
    .判断循环尾 ()
     ' 当台阶数目为１时，上一个台阶
    .如果真 (等于 (台阶数目, 1))
        赋值 (变量, 相加 (变量, 1))
        赋值 (步数数组 [变量], 1)
    .如果真结束
    赋值 (台阶数目, 0)
     ' 输出找到的上台阶方法
    .变量循环首 (1, 变量, 1, 循环变量)
        到文本 (步数数组 [循环变量]).加入文本 (“,”)
    .变量循环尾 ()
    #换行符.加入文本 ()
     ' 计找到的上台阶方法个数
    赋值 (方法数目, 相加 (方法数目, 1))
     ' 将中间的原来一步上的台阶变成两步上的台阶
    .判断循环首 (并且 (大于 (变量, 0), 不等于 (步数数组 [变量], 2)))
        赋值 (变量, 相减 (变量, 1))
        赋值 (台阶数目, 相加 (台阶数目, 1))
    .判断循环尾 ()
     ' 当数组下标值为０时，即已经找到所有的方法，退出循环
    .如果真 (等于 (变量, 0))
        跳出循环 ()
    .如果真结束
     ' 将原来两步上的台阶变成一步上的台阶
    赋值 (步数数组 [变量], 相减 (步数数组 [变量], 1))
    赋值 (台阶数目, 相加 (台阶数目, 1))
.判断循环尾 ()
 ' 显示找到的方法数目
赋值 (.内容, 到文本 (方法数目))



 ' 不属于任何一个程序集、类模块的函数：
