 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 268
    高度 = 234
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 12632256 '  0xC0C0C0
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 背景, " ' 已保存到：D:\易语言学习\Data\易用标尺 V1.0.e\背景", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库





.DLL命令 俘获鼠标, 空白型, "", "SetCapture", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 显示窗口, 整数型, "", "ShowWindow", , 
    .参数 窗口, 整数型, , 
    .参数 显示模式, 整数型, , 

.DLL命令 释放鼠标, 空白型, "", "ReleaseCapture", , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 按下, 逻辑型, , , 
.程序集变量 当前模式, 字节型, , , 0标尺模式，1测量模式
.程序集变量 点数, 字节型, , , 
.程序集变量 横1, 短整数型, , , 
.程序集变量 垂1, 短整数型, , , 
.程序集变量 横2, 短整数型, , , 
.程序集变量 垂2, 短整数型, , , 
.程序集变量 第一点为零零, 逻辑型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (., #背景)
赋值 (当前模式, 0)
显示标尺 ()

.子程序 画象素, 空白型, , 
.局部变量 容器1, 整数型, , , 
.局部变量 垂直刻度, 短整数型, , , 

.清除 ()
赋值 (., 0)
.如果 (.)
    赋值 (.., “宋体”)
    6.定位写出 (32, “当前单位：象素”)
    .变量循环首 (0, 取屏幕宽度 (), 10, 容器1)
        .如果 (等于 (求余数 (容器1, 50), 0))
            .如果 (等于 (求余数 (容器1, 100), 0))
                赋值 (., 2)
                容器1.画直线 (0, 容器1, 16)
                .判断开始 (等于 (容器1, 0))
                    容器1.定位写出 (18, 容器1)
                .判断 (等于 (容器1, .))
                    相减 (容器1, 18).定位写出 (18, 容器1)
                .默认
                    相减 (容器1, 5).定位写出 (18, 容器1)
                .判断结束
                
            .否则
                赋值 (., 1)
                容器1.画直线 (0, 容器1, 12)
            .如果结束
            
        .否则
            .如果真 (等于 (求余数 (容器1, 10), 0))
                赋值 (., 1)
                容器1.画直线 (0, 容器1, 6)
            .如果真结束
            
        .如果结束
        
    .变量循环尾 ()
.否则
    赋值 (.., “@宋体”)
    32.定位写出 (相减 (取屏幕高度 (), 20), “当”)
    32.定位写出 (相减 (取屏幕高度 (), 32), “前”)
    32.定位写出 (相减 (取屏幕高度 (), 44), “单”)
    32.定位写出 (相减 (取屏幕高度 (), 56), “位”)
    32.定位写出 (相减 (取屏幕高度 (), 68), “：”)
    32.定位写出 (相减 (取屏幕高度 (), 80), “象”)
    32.定位写出 (相减 (取屏幕高度 (), 92), “素”)
    .变量循环首 (取屏幕高度 (), 0, -10, 容器1)
        .如果 (等于 (求余数 (垂直刻度, 50), 0))
            .如果 (等于 (求余数 (垂直刻度, 100), 0))
                赋值 (., 2)
                0.画直线 (容器1, 16, 容器1)
                18.定位写出 (相减 (容器1, 5), 垂直刻度)
            .否则
                赋值 (., 1)
                0.画直线 (容器1, 12, 容器1)
            .如果结束
            
        .否则
            .如果真 (等于 (求余数 (垂直刻度, 10), 0))
                赋值 (., 1)
                0.画直线 (容器1, 6, 容器1)
            .如果真结束
            
        .如果结束
        赋值 (垂直刻度, 相加 (垂直刻度, 10))
    .变量循环尾 ()
    
.如果结束


.子程序 画厘米, 空白型, , 
.局部变量 容器1, 整数型, , , 
.局部变量 垂直刻度, 短整数型, , , 

.清除 ()
赋值 (., 1)
.如果 (.)
    赋值 (.., “宋体”)
    15.定位写出 (85, “当前单位：厘米”)
    .变量循环首 (0, 相加 (取整 (相乘 (取屏幕宽度 (), 2.65)), 1), 10, 容器1)
        .如果 (等于 (求余数 (容器1, 50), 0))
            .如果 (等于 (求余数 (容器1, 100), 0))
                赋值 (., 3)
                容器1.画直线 (1, 容器1, 40)
                .判断开始 (等于 (容器1, 0))
                    容器1.定位写出 (45, 相除 (容器1, 100))
                .默认
                    相减 (容器1, 5).定位写出 (45, 相除 (容器1, 100))
                .判断结束
                
            .否则
                赋值 (., 1)
                容器1.画直线 (1, 容器1, 30)
            .如果结束
            
        .否则
            .如果真 (等于 (求余数 (容器1, 10), 0))
                赋值 (., 1)
                容器1.画直线 (1, 容器1, 15)
            .如果真结束
            
        .如果结束
        
    .变量循环尾 ()
.否则
    赋值 (.., “@宋体”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 20), 2.65)), 2), “当”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 32), 2.65)), 2), “前”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 44), 2.65)), 2), “单”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 56), 2.65)), 2), “位”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 68), 2.65)), 2), “：”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 80), 2.65)), 2), “厘”)
    85.定位写出 (相减 (取整 (相乘 (相减 (取屏幕高度 (), 92), 2.65)), 2), “米”)
    .变量循环首 (取整 (相乘 (取屏幕高度 (), 2.65)), 0, -10, 容器1)
        .如果 (等于 (求余数 (垂直刻度, 50), 0))
            .如果 (等于 (求余数 (垂直刻度, 100), 0))
                赋值 (., 3)
                0.画直线 (容器1, 40, 容器1)
                45.定位写出 (相减 (容器1, 10), 相除 (垂直刻度, 100))
            .否则
                赋值 (., 1)
                0.画直线 (容器1, 30, 容器1)
            .如果结束
            
        .否则
            .如果真 (等于 (求余数 (垂直刻度, 10), 0))
                赋值 (., 1)
                0.画直线 (容器1, 15, 容器1)
            .如果真结束
            
        .如果结束
        赋值 (垂直刻度, 相加 (垂直刻度, 10))
    .变量循环尾 ()
    
.如果结束


.子程序 _标尺画板_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _厘米_被选择, 空白型, , 
赋值 (., 假)
赋值 (., 真)
画厘米 ()

.子程序 _象素_被选择, 空白型, , 
赋值 (., 假)
赋值 (., 真)
画象素 ()

.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _时钟1_周期事件, 空白型, , 
.如果 (或者 (小于 (取鼠标水平位置 (), _启动窗口.), 大于 (取鼠标水平位置 (), 相加 (_启动窗口., _启动窗口.)), 小于 (取鼠标垂直位置 (), _启动窗口.), 大于 (取鼠标垂直位置 (), 相加 (_启动窗口., _启动窗口.))))
    .如果 (等于 (当前模式, 0))
        .如果真 (并且 (小于或等于 (_启动窗口., 0), .))
            _启动窗口.移动 (0, 0, , 2)
        .如果真结束
        .如果真 (并且 (小于或等于 (_启动窗口., 0), .))
            _启动窗口.移动 (0, 0, 2, )
        .如果真结束
        
    .否则
        .如果真 (小于或等于 (_启动窗口., 0))
            _启动窗口.移动 (0, , 2)
        .如果真结束
        
    .如果结束
    
.否则
    .如果 (等于 (当前模式, 0))
        .如果真 (并且 (等于 (_启动窗口., 2), .))
            _启动窗口.移动 (0, 0, , 52)
        .如果真结束
        .如果真 (并且 (等于 (_启动窗口., 2), .))
            _启动窗口.移动 (0, 0, 52, )
        .如果真结束
        
    .否则
        .如果真 (小于或等于 (_启动窗口., 0))
            _启动窗口.移动 (0, , 156)
        .如果真结束
        
    .如果结束
    
.如果结束


.子程序 _标尺画板_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_启动窗口.发送信息 (161, 2, 0)

.子程序 显示标尺, 空白型, , 
.如果 (.)
    _启动窗口.移动 (0, 0, 取屏幕宽度 (), 52)
    0.移动 (0, 取屏幕宽度 (), 52)
    赋值 (., #黑色)
.否则
    _启动窗口.移动 (0, 0, 52, 取屏幕高度 ())
    0.移动 (0, 52, 取屏幕高度 ())
    赋值 (., #黑色)
.如果结束
.如果 (.)
    画象素 ()
.否则
    画厘米 ()
.如果结束


.子程序 _水平_被选择, 空白型, , 
赋值 (., 真)
赋值 (., 假)
显示标尺 ()

.子程序 _垂直_被选择, 空白型, , 
赋值 (., 假)
赋值 (., 真)
显示标尺 ()

.子程序 _自动隐藏_被选择, 空白型, , 
赋值 (., 取反 (.))
赋值 (., .)
赋值 (., 选择 (., 100, 0))
.如果真 (等于 (., 0))
    .如果真 (等于 (_启动窗口., 2))
        _启动窗口.移动 (0, 0, , 52)
    .如果真结束
    .如果真 (等于 (_启动窗口., 2))
        _启动窗口.移动 (0, 0, 52, )
    .如果真结束
    
.如果真结束


.子程序 _测量模式_被选择, 空白型, , 
赋值 (当前模式, 1)
_启动窗口.移动 (0, 0, 182, 156)
0.移动 (0, , )
连续赋值 (#背景, ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., ., .)
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
赋值 (., 假)
赋值 (., 真)
赋值 (., 100)

.子程序 _第一点_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件单元, 标签, , , 

赋值 (事件单元, 取事件组件 ())
.如果真 (等于 (按下, 假))
    赋值 (事件单元., 5)
.如果真结束


.子程序 _画板1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 0)
赋值 (., 0)

.子程序 _第一点_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件单元, 标签, , , 

赋值 (事件单元, 取事件组件 ())
赋值 (按下, 真)
赋值 (事件单元., 3)

.子程序 _第一点_鼠标左键被放开, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件单元, 标签, , , 

赋值 (事件单元, 取事件组件 ())
赋值 (按下, 假)
赋值 (事件单元., 5)
赋值 (点数, 到数值 (事件单元.))
.如果真 (等于 (点数, 1))
    连续赋值 (“”, ., ., ., ., ., ., ., .)
    连续赋值 (0, 横1, 垂1, 横2, 垂2)
    赋值 (第一点为零零, 假)
.如果真结束
.如果真 (并且 (等于 (点数, 2), 等于 (横1, 0), 等于 (垂1, 0), 等于 (第一点为零零, 假)))
    信息框 (“位置一无数据，请先点击[第一点]按钮，选取要测量的第一点的位置！”, #信息图标, “位置一无数据”)
    返回 ()
.如果真结束
俘获鼠标 (_启动窗口.取窗口句柄 ())

.子程序 _画板1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (按下, 假)

.子程序 _画板1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _标尺模式_被选择, 空白型, , 
赋值 (当前模式, 0)
赋值 (., 0)
赋值 (., 假)
赋值 (., 真)
显示标尺 ()

.子程序 _画板1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_启动窗口.发送信息 (161, 2, 0)

.子程序 _自动隐藏1_被选择, 空白型, , 
赋值 (., 取反 (.))
赋值 (., .)
赋值 (., 选择 (., 100, 0))
.如果真 (等于 (., 0))
    .如果真 (等于 (_启动窗口., 2))
        _启动窗口.移动 (0, , 156)
    .如果真结束
    
.如果真结束


.子程序 _退出2_被选择, 空白型, , 
结束 ()

.子程序 _时钟2_周期事件, 空白型, , 
赋值 (., 相加 (到文本 (取鼠标水平位置 ()), “,”, 到文本 (取鼠标垂直位置 ())))

.子程序 __启动窗口_鼠标左键被按下, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 水平距离, 短整数型, , , 
.局部变量 垂直距离, 短整数型, , , 
.局部变量 直线距离, 短整数型, , , 

释放鼠标 ()
.如果 (等于 (点数, 1))
    赋值 (横1, 取鼠标水平位置 ())
    赋值 (垂1, 取鼠标垂直位置 ())
    .如果真 (并且 (等于 (横1, 0), 等于 (垂1, 0)))
        .如果 (等于 (信息框 (相加 (“你选取的第一点位置为”, #左引号, “0,0”, #右引号, “，确定吗？”), 相加 (#询问图标, #确认取消钮), 相加 (“位置一为”, #左引号, “0,0”, #右引号)), #确认钮))
            赋值 (第一点为零零, 真)
        .否则
            赋值 (第一点为零零, 假)
            返回 ()
        .如果结束
        
    .如果真结束
    赋值 (., 相加 (到文本 (横1), “,”, 到文本 (垂1)))
.否则
    赋值 (横2, 取鼠标水平位置 ())
    赋值 (垂2, 取鼠标垂直位置 ())
    赋值 (., 相加 (到文本 (横2), “,”, 到文本 (垂2)))
    赋值 (水平距离, 取绝对值 (相减 (横1, 横2)))
    赋值 (垂直距离, 取绝对值 (相减 (垂1, 垂2)))
    赋值 (直线距离, 求平方根 (相加 (求次方 (水平距离, 2), 求次方 (垂直距离, 2))))
    鸣叫 ()
    赋值 (., 到文本 (水平距离))
    赋值 (., 到文本 (垂直距离))
    赋值 (., 到文本 (直线距离))
    赋值 (., 到文本 (四舍五入 (相乘 (相除 (水平距离, 100), 2.65), 2)))
    赋值 (., 到文本 (四舍五入 (相乘 (相除 (垂直距离, 100), 2.65), 2)))
    赋值 (., 到文本 (四舍五入 (相乘 (相除 (直线距离, 100), 2.65), 2)))
.如果结束


.子程序 __启动窗口_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

释放鼠标 ()

.子程序 _标签1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _帮助_被选择, 空白型, , 
信息框 (相加 (“                    使  用  帮  助”, #换行符, “”, #换行符, “    １、单击［第一点］按钮，然后单击要测量的第一点位置。”, #换行符, “    ２、单位［第二点］按钮，然后单击要测量的第二点位置。”, #换行符, “    ３、程序将自动计算位置一与位置二之间的距离。”, #换行符, “    ４、单击［第一点］或［第二点］按钮后，在任何地方单击”, #换行符, “鼠标右键，可取消取测量位置的状态。”, #换行符, “    ５、你也可以用键盘直接操作，方法如下：”, #换行符, “        Ａ键：取当前鼠标位置为第一点位置。”, #换行符, “        Ｓ键：取当前鼠标位置为第二点位置，并计算距离。”, #换行符, “        Ｄ键：清空所有位置及距离值。”, #换行符, “    ６、至于别的，我想就不用多说了吧！如果你还不会用，那”, #换行符, “我只能建议你~@$#%￥%―%…*…―！”), 0, “使用帮助”)

.子程序 _关于_被选择, 空白型, , 
信息框 (相加 (“                《 易 用 标 尺 1.0 》”, #换行符, “”, #换行符, “    一个简单的Windows标尺，内置：”, #换行符, “    １、标尺模式”, #换行符, “    可设置标尺方向为水平或垂直，可粗略测量水平或垂直”, #换行符, “方向两点之间的距离。”, #换行符, “    ２、测量模式”, #换行符, “    兼容鼠标与键盘两种方式，要精确测量，请使用此模式。”, #换行符, “”, #换行符, “    本程序编程语言为《全中文全可视易语言》，欢迎访问”, #换行符, “易语言网站：http://eyuyan.com。”, #换行符, “”, #换行符, “                            作者：西风qdlhk@263.net”, #换行符, “                                 二○○二年二月五日”), 0, “关于”)

.子程序 _关于2_被选择, 空白型, , 
信息框 (相加 (“                《 易 用 标 尺 1.0 》”, #换行符, “”, #换行符, “    一个简单的Windows标尺，内置：”, #换行符, “    １、标尺模式”, #换行符, “    可设置标尺方向为水平或垂直，可粗略测量水平或垂直”, #换行符, “方向两点之间的距离。”, #换行符, “    ２、测量模式”, #换行符, “    兼容鼠标与键盘两种方式，要精确测量，请使用此模式。”, #换行符, “”, #换行符, “    本程序编程语言为《全中文全可视易语言》，欢迎访问”, #换行符, “易语言网站：http://eyuyan.com。”, #换行符, “”, #换行符, “                            作者：西风qdlhk@263.net”, #换行符, “                                 二○○二年二月五日”), 0, “关于”)

.子程序 _标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_启动窗口.发送信息 (161, 2, 0)

.子程序 __启动窗口_按下某键, 空白型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #A键))
    赋值 (点数, 1)
    连续赋值 (“”, ., ., ., ., ., ., ., .)
    连续赋值 (0, 横1, 垂1, 横2, 垂2)
    赋值 (第一点为零零, 假)
    __启动窗口_鼠标左键被按下 (0, 0, 0)
.判断 (等于 (键代码, #S键))
    赋值 (点数, 2)
    .如果真 (并且 (等于 (点数, 2), 等于 (横1, 0), 等于 (垂1, 0), 等于 (第一点为零零, 假)))
        信息框 (“位置一无数据，请先点击[第一点]按钮，选取要测量的第一点的位置！”, #信息图标, “位置一无数据”)
        返回 ()
    .如果真结束
    __启动窗口_鼠标左键被按下 (0, 0, 0)
.判断 (等于 (键代码, #D键))
    连续赋值 (“”, ., ., ., ., ., ., ., .)
    连续赋值 (0, 横1, 垂1, 横2, 垂2)
    赋值 (第一点为零零, 假)
.默认
    
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
