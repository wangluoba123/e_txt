 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 373
    高度 = 404
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 16777215 '  0xFFFFFF
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\小学数学口算题出题助手.e\_启动窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “小学数学口算题出题助手”
    帮助文件名 = “”



.图片 背景, " ' 已保存到：D:\易语言学习\Data\小学数学口算题出题助手.e\背景", , 
.常量 WS_SYSMENU, "524288", , 
.图片 , , , 
.图片 模板, " ' 已保存到：D:\易语言学习\Data\小学数学口算题出题助手.e\模板", , 
.图片 竖式, " ' 已保存到：D:\易语言学习\Data\小学数学口算题出题助手.e\竖式", , 
.图片 时钟, " ' 已保存到：D:\易语言学习\Data\小学数学口算题出题助手.e\时钟", , 
.图片 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 2 1 扩展功能支持库一
 ' ExtMenu 9909FBB013704cfa8FE7E739DB7172DE 1 6 超级菜单支持库





.DLL命令 取窗口属性, 整数型, "user32.dll", "GetWindowLongA", , 
    .参数 句柄, 整数型, , 
    .参数 索引, 整数型, , 

.DLL命令 置窗口属性, 整数型, "user32.dll", "SetWindowLongA", , 
    .参数 句柄, 整数型, , 
    .参数 索引, 整数型, , 
    .参数 属性值, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 题目顺序, 整数型, , "0", 
.程序集变量 圆心横坐标, 整数型, , , 
.程序集变量 圆心纵坐标, 整数型, , , 
.程序集变量 匿名程序集变量_587, 空白型, , , 
.程序集变量 滚动文本, 文本型, , "4", 
.程序集变量 滚动索引, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
_启动窗口.置外形图片 (#背景, #绿色)
未知支持库函数_0 (取窗口句柄 (), “最小化”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “关闭”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “快速打印算式”, 假, 假)
未知支持库函数_4 (#蓝色)
设置无边框窗口 (_启动窗口.取窗口句柄 ())
 ' 以上代码设置窗口外观

赋值 (.现行子夹, 4) ' 系统启动时，默认显示关于界面
_选择夹1_子夹被改变 ()
#顶层.调整层次 () ' 防止阴影标签到顶层，影响美观

 ' 以下编辑框名称含义：
 ' 1位数字，选择夹在0子夹，数字为编辑框顺序。
 ' 2位数字，十位数为选择夹所在子夹，个位数为编辑框顺序
 ' 例：编辑框5，为0子夹中第5个编辑框；编辑框22，为2子夹中第2个编辑框

事件转移 () ' 将所有题数编辑框事件转移到编辑框1，以节省代码
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()

赋值 (滚动文本 [1], “版权所有(C) 启东今日网络科技有限公司 黄方”) ' 用于状态栏滚动显示的文字
赋值 (滚动文本 [2], “编程语言 全中文全可视跨平台编程 易语言”)
赋值 (滚动文本 [3], “鸣谢 大连大有吴涛易语言软件开发有限公司”)
赋值 (滚动文本 [4], “感谢易友西风在软件编写过程中给予的无私帮助”)
赋值 (滚动索引, 1) ' 启动时显示第1组内容
赋值 (.内容, 滚动文本 [1])
赋值 (.时钟周期, 100)


.子程序 设置无边框窗口, 空白型, , 使无边框窗口显示任务栏图标和系统菜单
.参数 窗口句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

赋值 (返回值, 取窗口属性 (窗口句柄, -16)) ' 使无边框窗口显示任务栏图标和系统菜单
赋值 (返回值, 位或 (返回值, #WS_SYSMENU))
置窗口属性 (窗口句柄, -16, 返回值)


.子程序 _编辑框1_获得焦点, 空白型, , 
.局部变量 事件编辑框, 编辑框, , , 

 ' 设置所有编辑框获得焦点时，全选其内容，以方便修改
赋值 (事件编辑框, 取事件组件 ())
赋值 (事件编辑框.被选择字符数, -1)


.子程序 _图形按钮_关闭窗口_被单击, 空白型, , 
结束 ()


.子程序 _图形按钮_题型菜单_被单击, 空白型, , 
弹出菜单 (相加 (_启动窗口.左边, .左边), 相加 (_启动窗口.顶边, .顶边, 22)) ' 模拟菜单显示


.子程序 _图形按钮_生成菜单_被单击, 空白型, , 
弹出菜单 (相加 (_启动窗口.左边, .左边), 相加 (_启动窗口.顶边, .顶边, 22)) ' 模拟菜单显示


.子程序 _图形按钮_帮助菜单_被单击, 空白型, , 
弹出菜单 (相加 (_启动窗口.左边, .左边), 相加 (_启动窗口.顶边, .顶边, 22)) ' 模拟菜单显示


.子程序 _加减法计算_被选择, 空白型, , 
赋值 (.现行子夹, 0) ' 进入第0个子夹
_选择夹1_子夹被改变 ()


.子程序 _乘除法计算_被选择, 空白型, , 
赋值 (.现行子夹, 1) ' 进入第1个子夹
_选择夹1_子夹被改变 ()


.子程序 _简单竖式_被选择, 空白型, , 
赋值 (.现行子夹, 2) ' 进入第2个子夹
_选择夹1_子夹被改变 ()


.子程序 _看钟面识时间_被选择, 空白型, , 
赋值 (.现行子夹, 3) ' 进入第3个子夹
_选择夹1_子夹被改变 ()


.子程序 _图形按钮_最小化_被单击, 空白型, , 
赋值 (_启动窗口.位置, 2) ' 最小化窗口


.子程序 _退出X_被选择, 空白型, , 
结束 ()


.子程序 _选择夹1_子夹被改变, 空白型, , 
 ' 本子程序响应菜单选择事件
.判断开始 (等于 (.现行子夹, 0))
    赋值 (.内容, “题型设置 － 加减法计算（总数：30题）”) ' 限制每页纸出30题，下同
    赋值 (.禁止, 假) ' 允许生成到文本，下同
    赋值 (.禁止, 假) ' 允许打印到纸张，下同
    赋值 (.可视, 真) ' 为了方便打印，特地添加这个打印按钮，下同
    获取焦点 () ' 第一个编辑框获得焦点
.判断 (等于 (.现行子夹, 1))
    赋值 (.内容, “题型设置 － 乘除法计算（总数：30题）”)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.可视, 真)
    获取焦点 () ' 第一个编辑框获得焦点
.判断 (等于 (.现行子夹, 2))
    赋值 (.内容, “题型设置 － 简单竖式（总数：30题）”)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.可视, 真)
    获取焦点 () ' 第一个编辑框获得焦点
.判断 (等于 (.现行子夹, 3))
    赋值 (.内容, “题型设置 － 看钟面识时间（总数：10题）”)
    赋值 (.禁止, 真) ' 由于看钟面是图形题，禁止生成到文本，只能打印到纸张
    赋值 (.禁止, 假)
    赋值 (.可视, 真)
    获取焦点 ()
.判断 (等于 (.现行子夹, 4)) ' 进入关系界面
    赋值 (.内容, “”)
    赋值 (.禁止, 真) ' 在关于界面，禁止生成到文本及打印功能，下同
    赋值 (.禁止, 真)
    赋值 (.可视, 假) ' 隐藏打印按钮
.判断 (等于 (.现行子夹, 5)) ' 进入帮助界面
    赋值 (.内容, “使用帮助”)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.可视, 假)
.默认
    
.判断结束


.子程序 __启动窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (小于或等于 (纵向位置, 34)) ' 点击在窗口标题位置时，允许拖动窗口
    _启动窗口.发送信息 (161, 2, 0)
.如果真结束


.子程序 _透明标签_窗口标题_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_启动窗口.发送信息 (161, 2, 0) ' 点击在窗口标题位置时，允许拖动窗口


.子程序 _关于_被选择, 空白型, , 
赋值 (.现行子夹, 4) ' 进入第4个子夹
_选择夹1_子夹被改变 ()


.子程序 _使用帮助_被选择, 空白型, , 
赋值 (.现行子夹, 5) ' 进入第5个子夹
_选择夹1_子夹被改变 ()


.子程序 _打印_被选择, 空白型, , 
.判断开始 (等于 (.现行子夹, 0)) ' 加减题
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30)) ' 先判断出题总数是否正确，总数应为30题
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.判断 (等于 (.现行子夹, 1)) ' 乘除题
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30)) ' 先判断出题总数是否正确，总数应为30题
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.判断 (等于 (.现行子夹, 2)) ' 竖式题
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30)) ' 先判断出题总数是否正确，总数应为30题
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.判断 (等于 (.现行子夹, 3)) ' 钟面题
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 10)) ' 先判断出题总数是否正确，总数应为10题（图形钟面）
        信息框 (“请确保各个类型的题目总数等于10。”, #信息图标, )
        返回 ()
    .如果真结束
    
.默认
    
.判断结束
清除数组 (题目顺序)
清空 ()
生成算式 ()
随机排序 ()
填充模板 ()


.子程序 生成算式, 空白型, , 
 ' 将各个算式生成模块分开成单独的子程序，便于代码维护
.判断开始 (等于 (.现行子夹, 0))
    生成加减法算式 ()
.判断 (等于 (.现行子夹, 1))
    生成乘除法算式 ()
.判断 (等于 (.现行子夹, 2))
    生成竖式算式 ()
.判断 (等于 (.现行子夹, 3))
    生成时钟算式 ()
.默认
    
.判断结束


.子程序 生成加减法算式, 空白型, , 
.局部变量 题数, 整数型, , , 
.局部变量 加法, 整数型, , , 
.局部变量 数1, 整数型, , , 
.局部变量 数2, 整数型, , , 
.局部变量 数3, 整数型, , , 
.局部变量 数4, 整数型, , , 
.局部变量 题目, 文本型, , , 

.如果真 (大于 (到数值 (.内容), 0)) ' 编辑框1为10以内加减法
     ' 直到题数等于编辑框中设定的数值，才跳出循环，下同
    
    置随机数种子 ()
    赋值 (题数, 0)
    赋值 (加法, 相加 (取整 (相除 (到数值 (.内容), 2)), 1)) ' 编辑框1中设置的题数，一半置为加法，一半置为减法，如果不是双数，则加法多一题
    .判断循环首 (小于 (题数, 加法)) ' 10以内加法
        赋值 (数1, 取随机数 (1, 9))
        赋值 (数2, 取随机数 (1, 相减 (10, 数1))) ' 确保2个数相加不超过10，所以数2的取值上限为10－数1
        赋值 (题目, 相加 (到文本 (数1), “ ＋ ”, 到文本 (数2), “ ＝”))
        .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
            题目.加入项目 ()
            赋值 (题数, 相加 (题数, 1))
        .如果真结束
        
    .判断循环尾 ()
    置随机数种子 ()
    赋值 (题数, 0)
    .判断循环首 (小于 (题数, 相减 (到数值 (.内容), 加法))) ' 10以内减法
        赋值 (数1, 取随机数 (4, 9))
        赋值 (数2, 取随机数 (1, 数1)) ' 由于是减法，所以数2不能大于数1
        赋值 (题目, 相加 (到文本 (数1), “ － ”, 到文本 (数2), “ ＝”))
        .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
            题目.加入项目 ()
            赋值 (题数, 相加 (题数, 1))
        .如果真结束
        
    .判断循环尾 ()
    
.如果真结束
置随机数种子 ()
赋值 (0)
.判断循环首 (小于 (到数值 (.内容))) ' 20以内连加
    赋值 (取随机数 (3, 10))
    赋值 (取随机数 (1, 相减 (10, ))) ' 确保前2位相加不大于10
    赋值 (数3, 取随机数 (5, 10)) ' 数字确保足够大，以保证题目有适当难度。所以数3取值下限这里设为5
    赋值 (相加 (到文本 (), “ ＋ ”, 到文本 (), “ ＋ ”, 到文本 (), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        .加入项目 ()
        赋值 (相加 (1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (0)
.判断循环首 (小于 (到数值 (.内容))) ' 加减混合运算
    .如果 (小于或等于 (整除 (到数值 (.内容), 2))) ' 前一半题目为先加后减
        赋值 (数1, 取随机数 (4, 10)) ' 适当加大数值取值下限，以保证题目肯适当难度
        赋值 (数2, 取随机数 (4, 10)) ' 同上
        赋值 (数3, 取随机数 (1, 选择 (大于 (相加 (数1, 数2), 10), 相减 (相加 (数1, 数2), 10), 相加 (数1, 数2)))) ' 保证数3在10以内,且不大于数1、数2之和
        赋值 (相加 (到文本 (), “ ＋ ”, 到文本 (), “ － ”, 到文本 (), “ ＝”))
    .否则
         ' 后一半题目为先减后加
        赋值 (取随机数 (8, 19)) ' 避免被减数过小
        .如果 (大于 (10))
            赋值 (数2, 取随机数 (1, 相减 (数1, 10))) ' 确保数2不大于数1的个位数
        .否则
            赋值 (数2, 取随机数 (1, 相减 (数1, 1))) ' 确保数1－数2大于0
        .如果结束
        赋值 (数3, 取随机数 (1, 选择 (大于 (相加 (相减 (20, 数1), 数2), 10), 10, 相加 (相减 (20, 数1), 数2)))) ' 确保运算结果不大于20
        赋值 (相加 (到文本 (), “ － ”, 到文本 (), “ ＋ ”, 到文本 (), “ ＝”))
    .如果结束
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        .加入项目 ()
        赋值 (相加 (1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 20以内加法
    赋值 (数1, 取随机数 (2, 10))
    赋值 (数2, 取随机数 (相减 (11, 数1), 10)) ' 确保2数相加大于11，小于20
    赋值 (题目, 相加 (到文本 (数1), “ ＋ ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数加整10
    赋值 (数1, 取随机数 (11, 89)) ' 确保运算结果不大于100，所以数1的取值上限设为89
    赋值 (数2, 相乘 (取随机数 (1, 取整 (相除 (相减 (100, 数1), 10))), 10)) ' 确保运算结果不大于100，所以数2的取值上限用取整方法计算出来
    赋值 (题目, 相加 (到文本 (数1), “ ＋ ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数加1位数
    赋值 (数1, 取随机数 (11, 89))
    .如果 (等于 (求余数 (数1, 10), 0)) ' 如果数1的个位数为0，则数2不大于9，如果数1的个位数不为0，则数2必须大于“10－个位数”，确保有进位计算
        赋值 (数2, 取随机数 (3, 9)) ' 数1的个位数为0
    .否则
        赋值 (数2, 取随机数 (相减 (10, 求余数 (数1, 10)), 9)) ' 数1的个位数不为0
        .如果真 (小于或等于 (数2, 2)) ' 如果数2太小，则设定为3，以保证适当的难度
            赋值 (数2, 3)
        .如果真结束
        
    .如果结束
    赋值 (题目, 相加 (到文本 (数1), “ ＋ ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 20以内退位减法
    赋值 (数1, 取随机数 (11, 18)) ' 如果为19的话，就没有退位了
    赋值 (数2, 取随机数 (相加 (相减 (数1, 10), 1), 9)) ' 确保运算中发生退位计算
    赋值 (题目, 相加 (到文本 (数1), “ － ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数加法
    赋值 (数1, 取随机数 (11, 80))
    赋值 (数2, 取随机数 (11, 相减 (100, 数1))) ' 确保运算结果不大于100
    赋值 (题目, 相加 (到文本 (数1), “ ＋ ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数不退位减法
    赋值 (数1, 取随机数 (2, 9)) ' 将2位数的十位和个位分别取值，便于第2个数的取值
    赋值 (数2, 取随机数 (5, 9)) ' 为确保不发生退位减，第1个数的个位必须稍大一些。这里设置下限为5
    赋值 (数3, 取随机数 (1, 相减 (数1, 1))) ' 第2个数的十位数必须不大于第1个数的十位数减1
    赋值 (数4, 取随机数 (1, 相减 (数2, 1))) ' 第2个数的个位数必须不大于第1个数的个位数，这样不会发生退位减
    赋值 (题目, 相加 (到文本 (数1), 到文本 (数2), “ － ”, 到文本 (数3), 到文本 (数4), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数退位减法
    赋值 (数1, 取随机数 (2, 9)) ' 将2位数的十位和个位分别取值，便于第2个数的取值
    赋值 (数2, 取随机数 (1, 8))
    赋值 (数3, 取随机数 (1, 相减 (数1, 1))) ' 第2个数的十位数必须不大于第1个数的十位数减1
    赋值 (数4, 取随机数 (相加 (数2, 1), 9)) ' 第2个数的个位数必须大于第1个数的个位数，确保发生退位减
    赋值 (题目, 相加 (到文本 (数1), 到文本 (数2), “ － ”, 到文本 (数3), 到文本 (数4), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()


.子程序 生成乘除法算式, 空白型, , 
.局部变量 题数, 整数型, , , 
.局部变量 数1, 整数型, , , 
.局部变量 数2, 整数型, , , 
.局部变量 数3, 整数型, , , 
.局部变量 题目, 文本型, , , 

置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 乘法口诀
    赋值 (数1, 取随机数 (1, 9))
    赋值 (数2, 取随机数 (1, 9))
    赋值 (题目, 相加 (到文本 (数1), “ × ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 乘法连加减
    赋值 (数1, 取随机数 (2, 9)) ' 数字的取值下限大于1，保证适当的难度，并保证适当的乘法结果，以便进行减法运算
    赋值 (数2, 取随机数 (2, 9))
    赋值 (题目, 相加 (到文本 (数1), “ × ”, 到文本 (数2)))
    赋值 (数3, 取随机数 (1, 8)) ' 随机决定减法的难度，从概率上来讲，各有50%的机会
    .如果 (等于 (求余数 (数3, 2), 0)) ' 如果数3是偶数，则减数设为从9到前2位数的积之间，有退位减法运算并适当加大难度
        赋值 (题目, 相加 (题目, “ － ”))
        赋值 (数3, 取随机数 (3, 选择 (大于 (相乘 (数1, 数2), 9), 9, 相乘 (数1, 数2))))
        赋值 (题目, 相加 (题目, 到文本 (数3), “ ＝”))
    .否则
        赋值 (题目, 相加 (题目, “ ＋ ”, 到文本 (取随机数 (3, 9)), “ ＝”)) ' 如果数3是奇数，则减数设为1位数，难度较低
    .如果结束
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 100以内除法
    赋值 (数1, 取随机数 (2, 9)) ' 先用乘法口诀取得被除数，在选取数1为除数
    赋值 (数2, 取随机数 (2, 9))
    赋值 (数3, 相乘 (数1, 数2))
    赋值 (题目, 相加 (到文本 (数3), “ ÷ ”, 到文本 (数1), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 除法连加减
    赋值 (数1, 取随机数 (2, 9))
    赋值 (数2, 取随机数 (2, 9))
    赋值 (数3, 相乘 (数1, 数2))
    赋值 (题目, 相加 (到文本 (数3), “ ÷ ”, 到文本 (数1))) ' 先取得除法的算式
    赋值 (数3, 取随机数 (1, 9)) ' 随机决定是加法还是减法，加法的机会是5/9，减法的机会是4/9
    .如果 (等于 (求余数 (数3, 2), 1)) ' 是奇数，则加法。是偶数，则减法
        赋值 (数1, 取随机数 (5, 20))
        赋值 (题目, 相加 (题目, “ ＋ ”, 到文本 (数1), “ ＝”))
    .否则
        赋值 (数1, 取随机数 (2, 数2)) ' 数2即前面除法的结果，减法中，第3个数不能大于数2
        赋值 (题目, 相加 (题目, “ － ”, 到文本 (数1), “ ＝”))
    .如果结束
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 除法有余数（数字围绕乘法口诀生成）
    赋值 (数1, 取随机数 (2, 9))
    赋值 (数2, 取随机数 (2, 9))
    赋值 (数3, 相加 (相乘 (数1, 数2), 取随机数 (1, 相减 (数1, 1)))) ' 将乘法结果加上一个小于数1的数作为被除数，数1作为除数，这样，确保有余数
    赋值 (题目, 相加 (到文本 (数3), “ ÷ ”, 到文本 (数1), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 除法有余数（随机2位数除1位数）
    赋值 (数1, 取随机数 (10, 91)) ' 随机2位数除1位数，难度要比通过乘法口诀加一个数来作被除数大，因为商很有可能是2位数
    赋值 (数2, 取随机数 (2, 9)) ' 被除数为1位数
    .如果真 (等于 (求余数 (数1, 数2), 0)) ' 如果取出的被除数能被除数整除，则被除数再加上一个小于除数的数
        赋值 (数1, 相加 (数1, 取随机数 (1, 相减 (数2, 1))))
    .如果真结束
    赋值 (题目, 相加 (到文本 (数1), “ ÷ ”, 到文本 (数2), “ ＝”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()


.子程序 生成竖式算式, 空白型, , 
.局部变量 题数, 整数型, , , 
.局部变量 数1, 整数型, , , 
.局部变量 数2, 整数型, , , 
.局部变量 数3, 整数型, , , 
.局部变量 竖式1, 文本型, , , 
.局部变量 竖式2, 文本型, , , 
.局部变量 题目, 文本型, , , 

置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数以内加法
    赋值 (数1, 取随机数 (11, 99))
    赋值 (数2, 取随机数 (11, 99))
    赋值 (竖式1, 取文本右边 (相加 (取空白文本 (5), 到文本 (数1), “ ”), 6)) ' 确保第一行和第二行长度均为6，保持对齐，下同
    赋值 (竖式2, 相加 (“＋ ”, 取文本右边 (相加 (取空白文本 (3), 到文本 (数2), “ ”), 3)))
    赋值 (竖式1, 相加 (取文本左边 (竖式1, 4), “ ”, 取文本右边 (竖式1, 2))) ' 将2位数的中间加上一个空格，这样比较美观，下同
    赋值 (竖式2, 相加 (取文本左边 (竖式2, 4), “ ”, 取文本右边 (竖式2, 2)))
    赋值 (题目, 相加 (到文本 (竖式1), #换行符, 到文本 (竖式2), #换行符, “───―”)) ' 横线为8个字符宽
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数以内减法
    赋值 (数1, 取随机数 (11, 99))
    赋值 (数2, 取随机数 (11, 数1)) ' 确保减数大于11，小于数1
    赋值 (竖式1, 取文本右边 (相加 (取空白文本 (5), 到文本 (数1), “ ”), 6))
    赋值 (竖式2, 相加 (“－ ”, 取文本右边 (相加 (取空白文本 (3), 到文本 (数2), “ ”), 3)))
    赋值 (竖式1, 相加 (取文本左边 (竖式1, 4), “ ”, 取文本右边 (竖式1, 2)))
    赋值 (竖式2, 相加 (取文本左边 (竖式2, 4), “ ”, 取文本右边 (竖式2, 2)))
    赋值 (题目, 相加 (到文本 (竖式1), #换行符, 到文本 (竖式2), #换行符, “───―”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数以内乘法
    赋值 (数1, 取随机数 (11, 99)) ' 被乘数为2位数
    赋值 (数2, 取随机数 (2, 9)) ' 乘数为1位数
    赋值 (竖式1, 取文本右边 (相加 (取空白文本 (5), 到文本 (数1), “ ”), 6))
    赋值 (竖式2, 相加 (“× ”, 取文本右边 (相加 (取空白文本 (3), 到文本 (数2), “ ”), 3)))
    赋值 (竖式1, 相加 (取文本左边 (竖式1, 4), “ ”, 取文本右边 (竖式1, 2)))
    赋值 (竖式2, 相加 (取文本左边 (竖式2, 4), “ ”, 取文本右边 (竖式2, 2)))
    赋值 (题目, 相加 (到文本 (竖式1), #换行符, 到文本 (竖式2), #换行符, “───―”))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 2位数以内除法
    赋值 (数1, 取随机数 (2, 9))
    赋值 (数2, 取随机数 (相加 (取整 (相除 (10, 数1)), 1), 9)) ' 确保数1与数2相乘结果为2位数
    赋值 (数3, 相乘 (数1, 数2))
    赋值 (竖式1, “  ______”)
    赋值 (竖式2, 相加 (到文本 (数1), “ ) ”, 到文本 (数3), “ ”))
    赋值 (竖式2, 相加 (取文本左边 (竖式2, 5), “ ”, 取文本右边 (竖式2, 2)))
    赋值 (题目, 相加 (到文本 (竖式1), #换行符, 到文本 (竖式2)))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()


.子程序 生成时钟算式, 空白型, , 
.局部变量 题数, 整数型, , , 
.局部变量 小时数, 整数型, , , 
.局部变量 分钟数, 整数型, , , 
.局部变量 题目, 文本型, , , 

置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 整点时间
    赋值 (小时数, 取随机数 (1, 12)) ' 随机取小时数
    赋值 (分钟数, 0)
    赋值 (题目, 相加 (到文本 (小时数), “,”, 到文本 (分钟数))) ' 先以文本形式保存时间，等打印时，再生成钟面图片。下同
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 半点时间
    赋值 (小时数, 取随机数 (1, 12))
    赋值 (分钟数, 30) ' 确保分钟为30分
    赋值 (题目, 相加 (到文本 (小时数), “,”, 到文本 (分钟数)))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 分钟逢5的时间
    赋值 (小时数, 取随机数 (1, 12))
    赋值 (分钟数, 取随机数 (1, 11)) ' 取出后乘以5，确保分钟逢5
    .判断循环首 (等于 (分钟数, 6)) ' 排除分钟数为30的情况，所以这里不能为6
        赋值 (分钟数, 取随机数 (1, 11))
    .判断循环尾 ()
    赋值 (分钟数, 相乘 (分钟数, 5))
    赋值 (题目, 相加 (到文本 (小时数), “,”, 到文本 (分钟数)))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()
置随机数种子 ()
赋值 (题数, 0)
.判断循环首 (小于 (题数, 到数值 (.内容))) ' 随机时间
    赋值 (小时数, 取随机数 (1, 12))
    赋值 (分钟数, 相减 (取随机数 (1, 60), 1)) ' 时间应从0份到59份，也可以写成：取随机数（0，59），个人习惯问题，呵呵
    赋值 (题目, 相加 (到文本 (小时数), “,”, 到文本 (分钟数)))
    .如果真 (等于 (题目.选择 (), -1)) ' 判断组合框中是否已有相同的题目，如果没有相同的题目，则将题目加入到组合框中，且题数+1
        题目.加入项目 ()
        赋值 (题数, 相加 (题数, 1))
    .如果真结束
    
.判断循环尾 ()


.子程序 随机排序, 空白型, , 
.局部变量 索引, 整数型, , , 
.局部变量 过渡数组, 整数型, , "30", 

清除数组 (题目顺序)
.计次循环首 (30, 索引)
    赋值 (过渡数组 [索引], 索引) ' 过度索引为从1到30的顺序数组
.计次循环尾 ()
置随机数种子 ()
.判断循环首 (大于 (取数组成员数 (过渡数组), 0))
    赋值 (索引, 取随机数 (1, 取数组成员数 (过渡数组)))
    加入成员 (题目顺序, 过渡数组 [索引]) ' 从顺序数组中随机取数，加入到题目顺序中，确保题目顺序随机显示
    删除成员 (过渡数组, 索引, )
.判断循环尾 ()


.子程序 填充模板, 空白型, , 
.局部变量 索引, 整数型, , , 
.局部变量 时分, 文本型, , "0", 

.判断开始 (或者 (等于 (.现行子夹, 0), 等于 (.现行子夹, 1))) ' 加减法和乘除法使用同一个表格模板
    #模板.从字节集读 ()
    .计次循环首 (15, 索引) ' 每次取出2个，所以30个题目，只需循环15次
        相加 (索引, 4).置文本 (1, 相减 (题目顺序 [索引], 1).取项目文本 ()) ' 每行显示2个算式
        相加 (索引, 4).置文本 (2, 相减 (题目顺序 [相加 (索引, 15)], 1).取项目文本 ())
    .计次循环尾 ()
    
.判断 (等于 (.现行子夹, 2)) ' 竖式计算单独使用一个表格模板
    #竖式.从字节集读 ()
    .计次循环首 (10, 索引) ' 每次取出3个题目，所以30个题目只需循环10次
        相加 (索引, 4).置文本 (1, 相减 (题目顺序 [索引], 1).取项目文本 ()) ' 每行显示3个竖式
        相加 (索引, 4).置文本 (2, 相减 (题目顺序 [相加 (索引, 10)], 1).取项目文本 ())
        相加 (索引, 4).置文本 (3, 相减 (题目顺序 [相加 (索引, 20)], 1).取项目文本 ())
    .计次循环尾 ()
    
.判断 (等于 (.现行子夹, 3)) ' 钟面时间也单独使用一个表格模板。由于时间的特殊性，没有必须使用排序，所以这里没用到“题目顺序”数组
    #时钟.从字节集读 ()
    .计次循环首 (5, 索引) ' 模板中，每行显示2只时钟界面，所以10个题目只需循环5次
        赋值 (时分, 分割文本 (相减 (索引, 1).取项目文本 (), “,”, )) ' 取出以逗号分隔的时和分
        画钟面 () ' 在后台画钟面
        画指针 (到数值 (时分 [1]), 到数值 (时分 [2])) ' 在后台画指针
        相加 (相乘 (索引, 2), 1).置数据 (1, .取图片 ()) ' 将最后的钟面图片取出，置入到表格模板中
        赋值 (时分, 分割文本 (相加 (索引, 4).取项目文本 (), “,”, ))
        画钟面 ()
        画指针 (到数值 (时分 [1]), 到数值 (时分 [2]))
        相加 (相乘 (索引, 2), 1).置数据 (3, .取图片 ())
    .计次循环尾 ()
.默认
    
.判断结束
打印预览 ()


.子程序 画钟面, 空白型, , 
.局部变量 索引, 整数型, , , 

.清除 ()
赋值 (.画笔颜色, #黑色)
赋值 (.画笔粗细, 2)
0.画椭圆 (0, 128, 128) ' 画外圈
赋值 (圆心横坐标, 64)
赋值 (圆心纵坐标, 64)
.计次循环首 (60, 索引) ' 画60根刻度
    .如果 (等于 (求余数 (索引, 5), 0))
        赋值 (.画笔粗细, 2) ' 逢5的刻度较粗
        相加 (圆心横坐标, 相乘 (60, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).画直线 (相减 (圆心纵坐标, 相乘 (60, 求余弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相加 (圆心横坐标, 相乘 (53, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相减 (圆心纵坐标, 相乘 (53, 求余弦 (相除 (相乘 (6, 索引, #pi), 180)))))
         ' 以下代码是写1到12这12个数字到钟面，具体位置是慢慢摸索的，我几何不太好，没有一定之规
        .判断开始 (等于 (索引, 60))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相除 (“12”.取宽度 (), 2)).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180)))))
            “12”.写文本行 ()
        .判断 (等于 (索引, 5))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相乘 (相除 (“1”.取宽度 (), 3), 2)).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“1”.取高度 (), 6)))
            “1”.写文本行 ()
        .判断 (等于 (索引, 10))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), “2”.取宽度 ()).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“2”.取高度 (), 3)))
            “2”.写文本行 ()
        .判断 (等于 (索引, 15))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), “3”.取宽度 ()).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“3”.取高度 (), 2)))
            “3”.写文本行 ()
        .判断 (等于 (索引, 20))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), “4”.取宽度 ()).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相乘 (相除 (“4”.取高度 (), 3), 2)))
            “4”.写文本行 ()
        .判断 (等于 (索引, 25))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相乘 (相除 (“5”.取宽度 (), 3), 2)).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相乘 (相除 (“5”.取高度 (), 6), 5)))
            “5”.写文本行 ()
        .判断 (等于 (索引, 30))
            相减 (相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相除 (“6”.取宽度 (), 2)).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), “6”.取高度 ()))
            “6”.写文本行 ()
        .判断 (等于 (索引, 35))
            相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相乘 (相除 (“7”.取高度 (), 6), 5)))
            “7”.写文本行 ()
        .判断 (等于 (索引, 40))
            相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相乘 (相除 (“8”.取高度 (), 3), 2)))
            “8”.写文本行 ()
        .判断 (等于 (索引, 45))
            相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“9”.取高度 (), 2)))
            “9”.写文本行 ()
        .判断 (等于 (索引, 50))
            相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“10”.取高度 (), 3)))
            “10”.写文本行 ()
        .判断 (等于 (索引, 55))
            相加 (圆心横坐标, 相乘 (52, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).置写出位置 (相减 (圆心纵坐标, 相乘 (52, 求余弦 (相除 (相乘 (6, 索引, #pi), 180))), 相除 (“11”.取高度 (), 6)))
            “11”.写文本行 ()
        .默认
            
        .判断结束
        
    .否则
        赋值 (.画笔粗细, 1) ' 小刻度较细
        相加 (圆心横坐标, 相乘 (60, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))).画直线 (相减 (圆心纵坐标, 相乘 (60, 求余弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相加 (圆心横坐标, 相乘 (56, 求正弦 (相除 (相乘 (6, 索引, #pi), 180)))), 相减 (圆心纵坐标, 相乘 (56, 求余弦 (相除 (相乘 (6, 索引, #pi), 180)))))
    .如果结束
    
.计次循环尾 ()
赋值 (.画笔粗细, 2) ' 画中心点
61.画椭圆 (61, 67, 67)


.子程序 画指针, 空白型, , 
.参数 时, 整数型, , 
.参数 分, 整数型, , 

赋值 (.画笔粗细, 1) ' 分针较细较长
圆心横坐标.画直线 (圆心纵坐标, 相加 (圆心横坐标, 相乘 (45, 求正弦 (相除 (相乘 (6, 分, #pi), 180)))), 相减 (圆心纵坐标, 相乘 (45, 求余弦 (相除 (相乘 (6, 分, #pi), 180)))))
赋值 (.画笔粗细, 2) ' 时针较粗较短
圆心横坐标.画直线 (圆心纵坐标, 相加 (圆心横坐标, 相乘 (28, 求正弦 (相除 (相乘 (相加 (相乘 (30, 时), 相除 (分, 2)), #pi), 180)))), 相减 (圆心纵坐标, 相乘 (28, 求余弦 (相除 (相乘 (相加 (相乘 (30, 时), 相除 (分, 2)), #pi), 180)))))


.子程序 _生成到文本_被选择, 空白型, , 
 ' 以下代码判断各个类型的题目总数是否等于规定的数目
.判断开始 (等于 (.现行子夹, 0))
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30))
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.判断 (等于 (.现行子夹, 1))
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30))
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.判断 (等于 (.现行子夹, 2))
    .如果真 (不等于 (相加 (到数值 (.内容), 到数值 (.内容), 到数值 (.内容), 到数值 (.内容)), 30))
        信息框 (“请确保各个类型的题目总数等于30。”, #信息图标, )
        返回 ()
    .如果真结束
    
.默认
    
.判断结束
.如果真 (打开 ())
    清除数组 (题目顺序)
    清空 ()
    生成算式 ()
    随机排序 ()
     ' 通过子程序“生成算式文本”，将算式生成到文本，继而写出到文件
    .如果 (写到文件 (.文件名, 到字节集 (生成算式文本 ())))
        信息框 (“生成口算题至文本文件成功！”, #信息图标, )
        返回 ()
    .否则
        信息框 (“生成口算题至文本文件失败！”, #信息图标, )
        返回 ()
    .如果结束
    
.如果真结束


.子程序 生成算式文本, 文本型, , 
.局部变量 索引, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

.判断开始 (等于 (.现行子夹, 0))
    赋值 (结果文本, “　加减法口算题”)
    .计次循环首 (15, 索引)
        赋值 (结果文本, 相加 (结果文本, #换行符, 相减 (题目顺序 [索引], 1).取项目文本 ()))
        赋值 (结果文本, 相加 (结果文本, #换行符, 相减 (题目顺序 [相加 (索引, 15)], 1).取项目文本 ()))
    .计次循环尾 ()
.判断 (等于 (.现行子夹, 1))
    赋值 (结果文本, “　乘除法口算题”)
    .计次循环首 (15, 索引)
        赋值 (结果文本, 相加 (结果文本, #换行符, 相减 (题目顺序 [索引], 1).取项目文本 ()))
        赋值 (结果文本, 相加 (结果文本, #换行符, 相减 (题目顺序 [相加 (索引, 15)], 1).取项目文本 ()))
    .计次循环尾 ()
.判断 (等于 (.现行子夹, 2))
    赋值 (结果文本, “　竖式计算题”)
    .计次循环首 (10, 索引)
        赋值 (结果文本, 相加 (结果文本, #换行符, #换行符, 相减 (题目顺序 [索引], 1).取项目文本 ()))
        赋值 (结果文本, 相加 (结果文本, #换行符, #换行符, 相减 (题目顺序 [相加 (索引, 10)], 1).取项目文本 ()))
        赋值 (结果文本, 相加 (结果文本, #换行符, #换行符, 相减 (题目顺序 [相加 (索引, 20)], 1).取项目文本 ()))
    .计次循环尾 ()
.默认
    
.判断结束
返回 (结果文本)


.子程序 _图形按钮_快捷打印_被单击, 空白型, , 
_打印_被选择 ()


.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 驻停时间, 整数型, 静态, , 

 ' 只用一个时钟，一个标签实现状态栏的滚动文字，而且不是连续滚动，中间要有停顿。这段代码由西风提供，在此鸣谢
 ' 这里信息向上滚动，分为三个状态：
 ' 1、已经滚动过去
 ' 2、正好滚动到显示位置
 ' 3、其它情况，正常从下往上滚动中
 ' 针对以上三个状态分别作调整，就可以实现信息的自然滚动和中途驻停

.判断开始 (小于 (.顶边, 相减 (负 (.高度), 1))) ' 当完全滚动上去后，将标签置回底部，准备第二次滚动
    赋值 (.顶边, 相加 (.高度, 1))
    赋值 (滚动索引, 相加 (滚动索引, 1)) ' 换一个滚动文本用来显示
    .如果真 (等于 (滚动索引, 5)) ' 因为一开始只创建了4条滚动信息，所以达到5时，重置为1
        赋值 (滚动索引, 1)
    .如果真结束
    赋值 (.内容, 滚动文本 [滚动索引])
.判断 (等于 (.顶边, 0)) ' 当滚动信息正好显示时，驻停30个时钟周期
    赋值 (驻停时间, 相加 (驻停时间, 1))
    .如果真 (等于 (驻停时间, 31)) ' 驻停30个时钟周期后，继续向上滚动
        赋值 (.顶边, 相减 (.顶边, 1))
        赋值 (驻停时间, 0) ' 驻停时间清除为0，等待下一次驻停
    .如果真结束
    
.默认
    赋值 (.顶边, 相减 (.顶边, 1)) ' 正常滚动中的情况，每次向上滚动1个单位
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
