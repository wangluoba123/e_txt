 ' 文件类型：Windows控制台程序

 ' 程序名称：快速文本字节集测试程序
 ' 程序描述：本程序用于测试“快速文本对象”“快速字节集对象”。
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' commobj {A068799B-7551-46b9-8CA8-EEF8357AFEA4} 1 0 通用对象支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库





.程序集 测试程序集, , , 

.程序集变量 文本, 文本型, , , 
.程序集变量 文本数组, 文本型, , "0", 
.程序集变量 文本数组2, 文本型, , "0", 
.程序集变量 文本对象, 未知类型0x20001, , , 
.程序集变量 字节集对象, 未知类型0x20002, , , 
.程序集变量 缓冲区地址, 整数型, , , 
.程序集变量 匿名程序集变量_196, 空白型, , , 以下变量用于速度测试
.程序集变量 开始时间, 整数型, , , 
.程序集变量 结束时间, 整数型, , , 
.程序集变量 耗时1, 整数型, , , 
.程序集变量 耗时2, 整数型, , , 
.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行

测试_快速文本对象 ()
测试_快速字节集对象 ()

测试_缓冲区及内存管理 ()
测试_速度测试 ()

返回 (0) ' 可以根据您的需要返回任意数值


.子程序 测试_快速文本对象, 空白型, , 
.局部变量 现行时间, 日期时间型, , , 
.局部变量 临时文件名, 文本型, , , 
.局部变量 x, 整数型, , , 

开始测试 (“快速文本对象”)
测试 (“初始文本为空”, 等于 (文本对象.未知支持库函数_24 (), “”))
测试 (“置文本”, 文本对象.未知支持库函数_25 (“Abc易语言--”))
测试 (“取文本”, 等于 (文本对象.未知支持库函数_24 (), “Abc易语言--”))
赋值 (文本数组, { “a”, “b”, “c” })
测试 (“添加各种数据”, 文本对象.未知支持库函数_27 (“X”, 到字节 (256), 到短整数 (65536), 123, 到小数 (7.8), 100.123, 真, 假, 文本数组))
测试 (等于 (文本对象.未知支持库函数_24 (), “Abc易语言--X001237.8100.123真假abc”))

赋值 (现行时间, 取现行时间 ())
测试 (“置文本，日期时间数据”, 文本对象.未知支持库函数_25 (现行时间))
调试输出 (文本对象.未知支持库函数_24 ())
测试 (等于 (文本对象.未知支持库函数_24 (), 到文本 (现行时间)))

测试 (“清除文本”, 文本对象.未知支持库函数_26 ())
测试 (等于 (文本对象.未知支持库函数_23 (), 0))
测试 (“插入”, 文本对象.未知支持库函数_28 (“语言”))
测试 (“插入”, 文本对象.未知支持库函数_28 (1, “易”))
测试 (等于 (文本对象.未知支持库函数_24 (), “易语言”))
测试 (“添加”, 文本对象.未知支持库函数_27 (“!”))
测试 (“插入，使用负索引”, 文本对象.未知支持库函数_28 (-1, “万岁”))
测试 (等于 (文本对象.未知支持库函数_24 (), “易语言万岁!”))
测试 (文本对象.未知支持库函数_25 (“123”))
测试 (“插入”, 文本对象.未知支持库函数_28 (2, “6”))
调试输出 (文本对象.未知支持库函数_24 ())
测试 (“插入”, 等于 (文本对象.未知支持库函数_24 (), “1623”))

文本对象.未知支持库函数_25 (“123456789abc123456789”)
测试 (“删除字符”, 文本对象.未知支持库函数_29 (10, 3))
测试 (等于 (文本对象.未知支持库函数_24 (), “123456789123456789”))
测试 (“删除字符，删除到文本结尾”, 文本对象.未知支持库函数_29 (10, -1))
测试 (等于 (文本对象.未知支持库函数_24 (), “123456789”))
测试 (“删除字符，使用负索引”, 文本对象.未知支持库函数_29 (-2, 1))
测试 (等于 (文本对象.未知支持库函数_24 (), “12345679”))
文本对象.未知支持库函数_25 (“您好吗”)
测试 (“删除字符，汉字按两个字符计”, 文本对象.未知支持库函数_29 (5, 2))
测试 (等于 (文本对象.未知支持库函数_24 (), “您好”))

测试 (“置文本”, 文本对象.未知支持库函数_25 (“1,2,3”))
测试 (等于 (文本对象.未知支持库函数_24 (), “1,2,3”))
赋值 (文本数组, 文本对象.未知支持库函数_38 ())
调试输出 (文本数组)
测试 (“分隔文本”, 等于 (取数组成员数 (文本数组), 3))
测试 (“分隔文本”, 比较文本数组 (文本数组, 分割文本 (“1,2,3”, , )))
文本对象.未知支持库函数_25 (“|||b|||c|||”)
赋值 (文本数组, 文本对象.未知支持库函数_38 (“|||”, ))
调试输出 (文本数组)
测试 (“分隔文本，使用多字符作为分隔文本”, 比较文本数组 (文本数组, 分割文本 (“|||b|||c|||”, “|||”, )))
文本对象.未知支持库函数_25 (“孔子孟子老子庄子孙子韩非子”)
赋值 (文本数组, 文本对象.未知支持库函数_38 (“子”, ))
调试输出 (文本数组)
测试 (“分隔文本，使用汉字作为分隔文本”, 比较文本数组 (文本数组, 分割文本 (“孔子孟子老子庄子孙子韩非子”, “子”, )))


文本对象.未知支持库函数_25 (“12345678”)
测试 (“替换文本”, 文本对象.未知支持库函数_36 (3, 3, “-”))
测试 (等于 (文本对象.未知支持库函数_24 (), “12-678”))
文本对象.未知支持库函数_25 (“123”)
测试 (“替换文本，‘替换长度’故意超出边界”, 文本对象.未知支持库函数_36 (3, 3, “-”))
测试 (等于 (文本对象.未知支持库函数_24 (), “12-”))
测试 (“替换文本，‘起始替换位置’故意超出边界”, 等于 (文本对象.未知支持库函数_36 (888, 3, “-”), 假))

文本对象.未知支持库函数_25 (“abc,xyz,AbC,xYz”)
测试 (“替换子文本，区分大小写”, 等于 (文本对象.未知支持库函数_37 (“abc”, “-”, , , 真), 1)) ' 替换1次
调试输出 (文本对象.未知支持库函数_24 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “-,xyz,AbC,xYz”))
文本对象.未知支持库函数_25 (“abc,xyz,AbC,xYz”)
测试 (“替换子文本，不区分大小写”, 等于 (文本对象.未知支持库函数_37 (“abc”, “-”, , , 假), 2)) ' 替换2次
测试 (等于 (文本对象.未知支持库函数_24 (), “-,xyz,-,xYz”))
文本对象.未知支持库函数_25 (“abc,xyz,AbC,xYz”)
测试 (“替换子文本，从指定位置开始替换”, 等于 (文本对象.未知支持库函数_37 (“abc”, “-”, 2, , 假), 1))
测试 (等于 (文本对象.未知支持库函数_24 (), “abc,xyz,-,xYz”))
文本对象.未知支持库函数_25 (“abc,xyz,AbC,xYz”)
测试 (“替换子文本，指定最大替换次数”, 等于 (文本对象.未知支持库函数_37 (“abc”, “-”, , 1, 假), 1))
调试输出 (文本对象.未知支持库函数_24 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “-,xyz,AbC,xYz”))

文本对象.未知支持库函数_25 (“123456789abcAbc123”)
测试 (“寻找文本”, 等于 (文本对象.未知支持库函数_34 (“123”, , 真), 1))
测试 (“寻找文本，指定起始寻找位置”, 等于 (文本对象.未知支持库函数_34 (“123”, 2, 真), 16))
测试 (“寻找文本，指定起始寻找位置（使用负索引）”, 等于 (文本对象.未知支持库函数_34 (“123”, -3, 真), 16))
测试 (“寻找文本，找不到则返回-1”, 等于 (文本对象.未知支持库函数_34 (“找不到我”, , 真), -1))
测试 (“寻找文本，区分大小写”, 等于 (文本对象.未知支持库函数_34 (“Abc”, , 真), 13))
测试 (“寻找文本，不区分大小写”, 等于 (文本对象.未知支持库函数_34 (“ABC”, , 假), 10))

文本对象.未知支持库函数_25 (“123456789abcAbc123”)
测试 (“倒找文本”, 等于 (文本对象.未知支持库函数_35 (“123”, , 真), 16))
测试 (“倒找文本，指定起始寻找位置”, 等于 (文本对象.未知支持库函数_35 (“123”, 3, 真), 1))
赋值 (x, 倒找文本 (文本对象.未知支持库函数_24 (), “123”, 17, 真)) ' x=1
测试 (“倒找文本，指定起始寻找位置（使用负索引）”, 等于 (文本对象.未知支持库函数_35 (“123”, -2, 真), x)) ' 结果与易核心库中的“倒找文本”命令一致
测试 (“倒找文本，指定起始寻找位置（使用负索引）”, 等于 (文本对象.未知支持库函数_35 (“123”, -1, 真), 16))
测试 (“倒找文本，找不到则返回-1”, 等于 (文本对象.未知支持库函数_35 (“找不到我”, , 真), -1))
测试 (“倒找文本，区分大小写”, 等于 (文本对象.未知支持库函数_35 (“abc”, , 真), 10))
测试 (“倒找文本，不区分大小写”, 等于 (文本对象.未知支持库函数_35 (“ABC”, , 假), 13))

文本对象.未知支持库函数_25 (“中国China，易语言，eyuyan，EPL”)
测试 (“到大写，全部”, 文本对象.未知支持库函数_45 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “中国CHINA，易语言，EYUYAN，EPL”))
测试 (“到小写，全部”, 文本对象.未知支持库函数_46 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “中国china，易语言，eyuyan，epl”))
测试 (“到大写，部分”, 文本对象.未知支持库函数_45 (-3, )) ' 把'epl'大写
测试 (等于 (文本对象.未知支持库函数_24 (), “中国china，易语言，eyuyan，EPL”))
测试 (“到大写，部分”, 文本对象.未知支持库函数_45 (5, 5)) ' 把'china'大写!
测试 (等于 (文本对象.未知支持库函数_24 (), “中国CHINA，易语言，eyuyan，EPL”))
测试 (“到小写，部分”, 文本对象.未知支持库函数_46 (5, 5))
测试 (等于 (文本对象.未知支持库函数_24 (), “中国china，易语言，eyuyan，EPL”))
测试 (“到小写，部分”, 文本对象.未知支持库函数_46 (-3, ))
测试 (等于 (文本对象.未知支持库函数_24 (), “中国china，易语言，eyuyan，epl”))
测试 (“到大写，起始位置越界则返回假”, 等于 (文本对象.未知支持库函数_45 (10000, ), 假))
测试 (“到大写，指定的字符数超出文本总字符数，则默认为从起始位置开始到结尾的字符数”, 文本对象.未知支持库函数_45 (1, 10000))
测试 (等于 (文本对象.未知支持库函数_24 (), “中国CHINA，易语言，EYUYAN，EPL”))
测试 (“到小写，起始位置越界则返回假”, 等于 (文本对象.未知支持库函数_46 (10000, ), 假))
测试 (“到小写，指定的字符数超出文本总字符数，则默认为从起始位置开始到结尾的字符数”, 文本对象.未知支持库函数_46 (1, 10000))
测试 (等于 (文本对象.未知支持库函数_24 (), “中国china，易语言，eyuyan，epl”))

文本对象.未知支持库函数_25 (“ABC”)
测试 (“到全角”, 文本对象.未知支持库函数_47 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “ＡＢＣ”))
测试 (等于 (文本对象.未知支持库函数_23 (), 6))
测试 (“到半角”, 文本对象.未知支持库函数_48 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “ABC”))
测试 (等于 (文本对象.未知支持库函数_23 (), 3))

赋值 (文本, “ 　　   　 易　语 言， eyuyan.com　 　　 　 ”) ' 其中包括中文空格“　”和英文空格“ ”
文本对象.未知支持库函数_25 (文本)
测试 (“删首空”, 文本对象.未知支持库函数_49 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “易　语 言， eyuyan.com　 　　 　 ”))
测试 (“删尾空”, 文本对象.未知支持库函数_50 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “易　语 言， eyuyan.com”))
文本对象.未知支持库函数_25 (文本)
测试 (“删首尾空”, 文本对象.未知支持库函数_51 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “易　语 言， eyuyan.com”))
文本对象.未知支持库函数_25 (文本)
测试 (“删全部空”, 文本对象.未知支持库函数_52 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “易语言，eyuyan.com”))
文本对象.未知支持库函数_25 (“　 　　 　 ”)
测试 (“删首空，全部是空格”, 文本对象.未知支持库函数_49 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “”))
文本对象.未知支持库函数_25 (“　 　　 　 ”)
测试 (“删尾空，全部是空格”, 文本对象.未知支持库函数_50 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “”))
文本对象.未知支持库函数_25 (“ ”)
测试 (“删尾空，一个空格”, 文本对象.未知支持库函数_50 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “”))
文本对象.未知支持库函数_26 ()
测试 (“删尾空，空文本”, 文本对象.未知支持库函数_50 ())
测试 (等于 (文本对象.未知支持库函数_24 (), “”))

赋值 (临时文件名, “temp.txt”)
测试 (文本对象.未知支持库函数_25 (“易eyuyan语言”))
测试 (“写到文件”, 文本对象.未知支持库函数_67 (临时文件名))
测试 (文本对象.未知支持库函数_26 ())
测试 (“从文件读”, 文本对象.未知支持库函数_66 (临时文件名))
测试 (等于 (文本对象.未知支持库函数_24 (), “易eyuyan语言”))
测试 (“读入的字符数”, 等于 (文本对象.未知支持库函数_23 (), 12))
测试 (文本对象.未知支持库函数_26 ())
测试 (“写空文本到文件”, 文本对象.未知支持库函数_67 (临时文件名))
测试 (文本对象.未知支持库函数_25 (“123...”))
测试 (“从空文件读”, 文本对象.未知支持库函数_66 (临时文件名))
测试 (等于 (文本对象.未知支持库函数_24 (), “”))
测试 (“读入的字符数”, 等于 (文本对象.未知支持库函数_23 (), 0))
测试 (“从不存在文件读，将返回假”, 等于 (文本对象.未知支持库函数_66 (“no-this-file.txt”), 假))

调试输出 (文本对象.未知支持库函数_24 ())

结束测试 ()


.子程序 测试_快速字节集对象, 空白型, , 
.局部变量 字节集数组, 字节集, , "2", 
.局部变量 临时文件名, 文本型, , , 

开始测试 (“快速字节集对象”)

测试 (“添加”, 字节集对象.未知支持库函数_87 (到字节 (1), 到字节 (2), 到字节 (3), 4))
测试 (“取长度”, 等于 (字节集对象.未知支持库函数_83 (), 7))
测试 (“添加”, 字节集对象.未知支持库函数_87 (“ABC”)) ' 将添加字节0
测试 (“添加”, 字节集对象.未知支持库函数_87 (“”)) ' 将添加字节0
测试 (“取长度”, 等于 (字节集对象.未知支持库函数_83 (), 12))
调试输出 (字节集对象.未知支持库函数_84 ())

测试 (“清除”, 字节集对象.未知支持库函数_86 ())
测试 (等于 (字节集对象.未知支持库函数_83 (), 0))
测试 (“添加日期时间”, 字节集对象.未知支持库函数_87 (取现行时间 ()))
测试 (等于 (字节集对象.未知支持库函数_83 (), 8))

测试 (“清除”, 字节集对象.未知支持库函数_86 ())
测试 (“添加短整数”, 字节集对象.未知支持库函数_87 (到短整数 (8)))
测试 (“取字节集”, 等于 (字节集对象.未知支持库函数_84 (), { 8, 0 }))
测试 (“添加字节数组”, 字节集对象.未知支持库函数_87 ({ 1, 2, 3 }))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 8, 0, 1, 2, 3 }))

赋值 (文本数组, { “A”, “B”, “C” })
重定义数组 (字节集数组, 假, 2)
赋值 (字节集数组 [1], { 1, 2, 3 })
赋值 (字节集数组 [2], { 4, 5, 6 })
测试 (字节集对象.未知支持库函数_86 ())
测试 (“添加各种数据”, 字节集对象.未知支持库函数_87 (到短整数 (8), { 1, 2, 3 }, 文本数组, 字节集数组))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 8, 0, 1, 2, 3, 65, 0, 66, 0, 67, 0, 1, 2, 3, 4, 5, 6 }))


测试 (字节集对象.未知支持库函数_85 ({ 1, 2, 3 }))
测试 (“插入”, 字节集对象.未知支持库函数_88 (2, { 6 }))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 1, 6, 2, 3 }))

测试 (字节集对象.未知支持库函数_85 ({ 1, 2, 3, 4, 5, 6, 7, 8 }))
测试 (“删除字节”, 字节集对象.未知支持库函数_89 (2, 3))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 1, 5, 6, 7, 8 }))
测试 (“删除字节，欲删除的字节数多于实际存在的字节数”, 字节集对象.未知支持库函数_89 (2, 100))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 1 }))

字节集对象.未知支持库函数_85 ({ 1, 2, 3 })
测试 (“取字节”, 等于 (字节集对象.未知支持库函数_90 (1), 1))
测试 (“取字节”, 等于 (字节集对象.未知支持库函数_90 (2), 2))
 ' 字节集对象.取字节 (5)  ' 将报错并退出程序

测试 (字节集对象.未知支持库函数_85 ({ 1, 2, 3, 0, 5, 6, 7, 0, 8 }))
赋值 (字节集数组, 字节集对象.未知支持库函数_98 ())
测试 (“分隔字节集”, 比较字节集数组 (字节集数组, 分割字节集 ({ 1, 2, 3, 0, 5, 6, 7, 0, 8 }, , )))
字节集对象.未知支持库函数_85 ({ 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0 })
赋值 (字节集数组, 字节集对象.未知支持库函数_98 ({ 0, 0, 0 }, ))
测试 (“分隔字节集，用作分隔的字节集为多字节”, 比较字节集数组 (字节集数组, 分割字节集 ({ 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0 }, { 0, 0, 0 }, )))
赋值 (字节集数组, 字节集对象.未知支持库函数_98 ({ 0, 0, 0 }, 2))
测试 (“分隔字节集，限制返回的子字节集个数”, 比较字节集数组 (字节集数组, 分割字节集 ({ 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0 }, { 0, 0, 0 }, 2)))
测试 (等于 (取数组成员数 (字节集数组), 2))
字节集对象.未知支持库函数_85 ({ 1, 2, 3 })
赋值 (字节集数组, 字节集对象.未知支持库函数_98 ())
测试 (“分割字节集，未被实际分割，返回只有一个数数据成员的数组”, 比较字节集数组 (字节集数组, 分割字节集 ({ 1, 2, 3 }, , )))
测试 (等于 (取数组成员数 (字节集数组), 1))
测试 (等于 (字节集数组 [1], { 1, 2, 3 }))

字节集对象.未知支持库函数_85 ({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3 })
测试 (“寻找字节集”, 等于 (字节集对象.未知支持库函数_94 ({ 1, 2, 3 }, ), 1))
测试 (“寻找字节集，指定起始寻找位置”, 等于 (字节集对象.未知支持库函数_94 ({ 1, 2, 3 }, 2), 11))
测试 (“寻找字节集，指定起始寻找位置（使用负索引）”, 等于 (字节集对象.未知支持库函数_94 ({ 1, 2, 3 }, -5), 11))
测试 (“倒找字节集”, 等于 (字节集对象.未知支持库函数_95 ({ 1, 2, 3 }, ), 11))
测试 (“倒找字节集，指定起始寻找位置”, 等于 (字节集对象.未知支持库函数_95 ({ 1, 2, 3 }, 6), 1))
测试 (“倒找字节集，指定起始寻找位置（使用负索引）”, 等于 (字节集对象.未知支持库函数_95 ({ 1, 2, 3 }, -5), 1))


赋值 (临时文件名, “temp.bin”)
字节集对象.未知支持库函数_85 ({ 1, 2, 3, 4, 5, 6, 7, 8 })
测试 (“写到文件”, 字节集对象.未知支持库函数_127 (临时文件名))
测试 (字节集对象.未知支持库函数_86 ())
测试 (“从文件读”, 字节集对象.未知支持库函数_126 (临时文件名))
测试 (等于 (字节集对象.未知支持库函数_84 (), { 1, 2, 3, 4, 5, 6, 7, 8 }))
测试 (“读入的字节数”, 等于 (字节集对象.未知支持库函数_83 (), 8))
测试 (字节集对象.未知支持库函数_86 ())
测试 (“写空字节集到文件”, 字节集对象.未知支持库函数_127 (临时文件名))
测试 (字节集对象.未知支持库函数_85 ({ 1, 2, 3 }))
测试 (“从空文件读”, 字节集对象.未知支持库函数_126 (临时文件名))
测试 (等于 (字节集对象.未知支持库函数_84 (), {  }))
测试 (“读入的字节数”, 等于 (字节集对象.未知支持库函数_83 (), 0))
测试 (“从不存在文件读，将返回假”, 等于 (字节集对象.未知支持库函数_126 (“no-this-file.bin”), 假))



结束测试 ()


.子程序 比较文本数组, 逻辑型, , 
.参数 文本数组1, 文本型, 数组, 
.参数 文本数组2, 文本型, 数组, 

.局部变量 i, 整数型, , , 

.如果真 (不等于 (取数组成员数 (文本数组1), 取数组成员数 (文本数组2)))
    返回 (假)
.如果真结束

.计次循环首 (取数组成员数 (文本数组1), i)
    .如果真 (不等于 (文本数组1 [i], 文本数组2 [i]))
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
返回 (真)

.子程序 比较字节集数组, 逻辑型, , 
.参数 字节集数组1, 字节集, 数组, 
.参数 字节集数组2, 字节集, 数组, 

.局部变量 i, 整数型, , , 

.如果真 (不等于 (取数组成员数 (字节集数组1), 取数组成员数 (字节集数组2)))
    返回 (假)
.如果真结束

.计次循环首 (取数组成员数 (字节集数组1), i)
    .如果真 (不等于 (字节集数组1 [i], 字节集数组2 [i]))
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
返回 (真)




.子程序 测试_速度测试, 空白型, , 
开始测试 (“速度测试”)
输出文本行 (“提示：此测试并不严密，结果仅供参考！”)
输出文本行 (“提示：Linux操作系统下没有‘取启动时间()’命令，不做速度统计！”)

速度测试_快速文本对象 ()
速度测试_快速字节集对象 ()

结束测试 ()

.子程序 速度测试_快速文本对象, 空白型, , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时快速文本, 未知类型0x20001, , , 
.局部变量 i, 整数型, , , 
.局部变量 循环次数, 整数型, , , 

赋值 (循环次数, 20000)

赋值 (开始时间, 取系统启动时间 ())
临时快速文本.未知支持库函数_26 ()
.计次循环首 (循环次数, i)
    临时快速文本.未知支持库函数_27 (i, “ ”)
.计次循环尾 ()
赋值 (结束时间, 取系统启动时间 ())
赋值 (耗时1, 相加 (相减 (结束时间, 开始时间), 1)) ' 加 1 可保证耗时不可能为0，下同。因为此变量将作为被除数，不可为0。
输出文本行 (相加 (“快速文本耗时：”, 到文本 (耗时1)))

赋值 (开始时间, 取系统启动时间 ())
赋值 (临时文本, “”)
.计次循环首 (循环次数, i)
    赋值 (临时文本, 相加 (临时文本, 到文本 (i), “ ”))
.计次循环尾 ()
赋值 (结束时间, 取系统启动时间 ())
赋值 (耗时2, 相加 (相减 (结束时间, 开始时间), 1))
输出文本行 (相加 (“普通文本耗时：”, 到文本 (耗时2)))

测试 (“快速文本对象 在大批量数据操作时 速度快于 普通文本”, 小于或等于 (耗时1, 耗时2))
输出文本行 (相加 (“速度比：”, 到文本 (整除 (耗时2, 耗时1))))
测试 (“两者操作结果相同”, 等于 (临时文本, 临时快速文本.未知支持库函数_24 ()))


.子程序 速度测试_快速字节集对象, 空白型, , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 临时快速字节集, 未知类型0x20002, , , 
.局部变量 i, 整数型, , , 
.局部变量 循环次数, 整数型, , , 

赋值 (循环次数, 20000)

赋值 (开始时间, 取系统启动时间 ())
临时快速字节集.未知支持库函数_86 ()
.计次循环首 (循环次数, i)
    临时快速字节集.未知支持库函数_87 (i)
.计次循环尾 ()
赋值 (结束时间, 取系统启动时间 ())
赋值 (耗时1, 相加 (相减 (结束时间, 开始时间), 1))
输出文本行 (相加 (“快速字节集耗时：”, 到文本 (耗时1)))

赋值 (开始时间, 取系统启动时间 ())
赋值 (临时字节集, {  })
.计次循环首 (循环次数, i)
    赋值 (临时字节集, 相加 (临时字节集, 到字节集 (i)))
.计次循环尾 ()
赋值 (结束时间, 取系统启动时间 ())
赋值 (耗时2, 相加 (相减 (结束时间, 开始时间), 1))
输出文本行 (相加 (“普通字节集耗时：”, 到文本 (耗时2)))

测试 (“快速字节集对象 在大批量数据操作时 速度快于 普通字节集”, 小于或等于 (耗时1, 耗时2))
输出文本行 (相加 (“速度比：”, 到文本 (整除 (耗时2, 耗时1))))
测试 (“两者操作结果相同”, 等于 (临时字节集, 临时快速字节集.未知支持库函数_84 ()))


.子程序 取系统启动时间, 整数型, , 
 ' 返回 (0)
返回 (取启动时间 ()) ' Linux下不被支持


.子程序 测试_缓冲区及内存管理, 空白型, , 高级命令
.局部变量 text1, 未知类型0x20001, , , 
.局部变量 bin1, 未知类型0x20002, , , 

开始测试 (“缓冲区及内存管理”)

text1.未知支持库函数_72 (100, 1000)
text1.未知支持库函数_73 (200)
赋值 (缓冲区地址, text1.未知支持库函数_70 (100))
测试 (“取缓冲区”, 不等于 (缓冲区地址, 0))
.如果真 (不等于 (缓冲区地址, 0))
    写到内存 (“易语言eyuyan”, 缓冲区地址, )
    测试 (“释放缓冲区”, text1.未知支持库函数_71 ())
    测试 (“写缓冲区成功”, 等于 (text1.未知支持库函数_24 (), “易语言eyuyan”))
.如果真结束

赋值 (缓冲区地址, text1.未知支持库函数_70 (1001))
测试 (“如果所申请的缓冲区超出‘最大可用内存’（由‘置可用内存’设置），将返回0”, 等于 (缓冲区地址, 0))

bin1.未知支持库函数_132 (100, 1000)
bin1.未知支持库函数_133 (200)
赋值 (缓冲区地址, bin1.未知支持库函数_130 (100))
测试 (“取缓冲区”, 不等于 (缓冲区地址, 0))
.如果真 (不等于 (缓冲区地址, 0))
    写到内存 ({ 1, 2, 3, 4, 5 }, 缓冲区地址, )
    测试 (“释放缓冲区”, bin1.未知支持库函数_131 (5))
    测试 (“写缓冲区成功”, 等于 (bin1.未知支持库函数_84 (), { 1, 2, 3, 4, 5 }))
.如果真结束

赋值 (缓冲区地址, bin1.未知支持库函数_130 (1001))
测试 (“如果所申请的缓冲区 超出‘最大可用内存’（由‘置可用内存’设置），将返回0”, 等于 (缓冲区地址, 0))

结束测试 ()


.程序集 测试框架程序集, , , 

.程序集变量 测试总数, 整数型, , , 内部维护，外界勿修改
.程序集变量 失败次数, 整数型, , , 内部维护，外界勿修改
.程序集变量 本次测试对象, 文本型, , , 内部维护，外界勿修改
.子程序 测试, 空白型, 公开, 检查测试结果是否为真，为真则输出测试成功，否则输出测试失败.
.参数 测试内容, 文本型, 可空, 对本次被测试项的基本描述
.参数 测试结果, 逻辑型, , 

.如果真 (是否为空 (测试内容))
    赋值 (测试内容, “”)
.如果真结束

赋值 (测试总数, 相加 (测试总数, 1))

.如果 (测试结果)
    .如果真 (不等于 (测试内容, “”))
        输出文本行 (相加 (“测试成功：”, 测试内容))
    .如果真结束
    
.否则
    输出文本行 (相加 (“测试失败：”, 测试内容, 字符 (#Tab键), 字符 (#Tab键), “<------------------------------------------ (错误!)”))
    赋值 (失败次数, 相加 (失败次数, 1))
    标准输出 (#标准输出设备, 字符 (7)) ' 鸣叫，警示用户。“鸣叫”命令不支持linux!
    暂停 () ' 用于定位测试失败代码行，请按F8。(编译后此行无效!)
.如果结束


.子程序 输出文本, 空白型, , 
.参数 文本, 文本型, , 

标准输出 (文本)
输出调试文本 (文本) ' 没法不换行！

.子程序 输出文本行, 空白型, , 
.参数 文本, 文本型, 可空, 

.如果真 (是否为空 (文本))
    赋值 (文本, “”)
.如果真结束

 ' 输出文本 (文本 ＋ #换行符)
输出调试文本 (文本)
标准输出 (相加 (文本, #换行符))


.子程序 开始测试, 空白型, 公开, 
.参数 测试对象, 文本型, , 对本次测试分类的基本描述
.参数 前缀文本, 文本型, 可空, 
.参数 后缀文本, 文本型, 可空, 

.如果真 (是否为空 (前缀文本))
    赋值 (前缀文本, 相加 (取重复文本 (9, “-”), “ 开始测试”, #左引号))
.如果真结束
.如果真 (是否为空 (后缀文本))
    赋值 (后缀文本, 相加 (#右引号, 取重复文本 (30, “-”)))
.如果真结束

输出文本行 (相加 (前缀文本, 测试对象, 后缀文本))

赋值 (本次测试对象, 测试对象)
赋值 (测试总数, 0)
赋值 (失败次数, 0)


.子程序 结束测试, 空白型, 公开, 
.参数 测试对象, 文本型, 可空, 
.参数 前缀文本, 文本型, 可空, 
.参数 后缀文本, 文本型, 可空, 

.如果真 (是否为空 (测试对象))
    赋值 (测试对象, 本次测试对象)
.如果真结束
.如果真 (是否为空 (前缀文本))
    赋值 (前缀文本, 相加 (取重复文本 (9, “=”), “ 结束测试”, #左引号))
.如果真结束
.如果真 (是否为空 (后缀文本))
    赋值 (后缀文本, 相加 (#右引号, 取重复文本 (30, “=”)))
.如果真结束

输出文本行 (相加 (前缀文本, 测试对象, 后缀文本))
输出文本行 (“测试结果：”)

输出文本行 (相加 (“测试总数：”, 到文本 (测试总数), “，”, 选择 (等于 (失败次数, 0), “全部成功！”, 相加 (“失败次数：”, 到文本 (失败次数), “。”))))
输出文本行 ()
赋值 (测试总数, 0)
赋值 (失败次数, 0)



 ' 不属于任何一个程序集、类模块的函数：
