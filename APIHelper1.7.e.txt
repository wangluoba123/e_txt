 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 866
    高度 = 588
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “APIHelper”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “API小小助手    By:小叶 →QQ:690821103”
    帮助文件名 = “”



.图片 最大化点燃, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\最大化点燃", , 
.图片 正常, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\正常", , 
.图片 正常点燃, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\正常点燃", , 
.图片 最大化, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\最大化", , 
.图片 确认, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\确认", , 
.图片 确认点燃, " ' 已保存到：D:\易语言学习\Data\APIHelper1.7.e\确认点燃", , 
.常量 GWL_WNDPROC, "-4", , 
.常量 WM_NOTIFY, "78", , 
.常量 NM_CUSTOMDRAW, "-12", , 
.常量 CDDS_PREPAINT, "1", , 
.常量 CDRF_NOTIFYITEMDRAW, "32", , 
.常量 CDDS_ITEMPREPAINT, "65537", , 
.常量 CDRF_NEWFONT, "2", , 
.常量 CDDS_SUBITEM, "131072", , 
.常量 CDRF_NOTIFYSUBITEMDRAW, "32", , 
.常量 WM_CTLCOLOREDIT, "307", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 2 0 高级表格支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 参数, , 
    .成员 参数名, 文本型, , , 
    .成员 类型, 文本型, , , 
    .成员 传址, 文本型, , , 
    .成员 数组, 文本型, , , 
    .成员 备注, 文本型, , , 

数据类型 NMHDR, , 
    .成员 hwndFrom, 整数型, , , 
    .成员 idFrom, 整数型, , , 
    .成员 code, 整数型, , , 

数据类型 NMCUSTOMDRAW, , 
    .成员 hdr, NMHDR, , , 
    .成员 dwDrawStage, 整数型, , , 
    .成员 hdc, 整数型, , , 
    .成员 rc, 未知类型0x50002, , , 
    .成员 dwItemSpec, 整数型, , , 
    .成员 uItemState, 整数型, , , 
    .成员 lItemlParam, 整数型, , , 

数据类型 NMLVCUSTOMDRAW, , 
    .成员 nmcd, NMCUSTOMDRAW, , , 
    .成员 clrText, 整数型, , , 
    .成员 clrTextBk, 整数型, , , 
    .成员 iSubItem, 整数型, , , 


.DLL命令 SetWindowLongA, 整数型, "", "", , 在窗口结构中为指定的窗口设置信息
    .参数 hWnd, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 nIndex, 整数型, , GWL_WNDPROC 该窗口的窗口函数的地址 GWL_STYLE 窗口样式 GWL_EXSTYLE 扩展窗口样式 
    .参数 dwNewLong, 整数型, , 由nIndex指定的窗口信息的新值

.DLL命令 CallWindowProcA, 整数型, "", "", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 CopyMemory_NMHDR, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, NMHDR, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 CopyMemory_NMLVCUSTOMDRAWTolParam, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, NMLVCUSTOMDRAW, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 CopyMemory_NMLVCUSTOMDRAW, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, NMLVCUSTOMDRAW, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 GetDlgCtrlID, 整数型, "user32", "GetDlgCtrlID", , 
    .参数 hwnd, 整数型, , 

.DLL命令 GetClassNameA, 空白型, "", "GetClassNameA", , 
    .参数 hwnd, 空白型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 空白型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 old, 整数型, , , 
.程序集变量 程序集_是否可编辑, 逻辑型, , , 
.程序集变量 程序集_对比文本, 文本型, , , 
.程序集变量 程序集_英文API, 文本型, , , 
.程序集变量 程序集_中文API, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.如果真 (取反 (文件是否存在 (相加 (取运行目录 (), “\API.mdb”))))
    信息框 (相加 (取运行目录 (), “\API.mdb  文件不存在!”), 0, )
    返回 ()
.如果真结束
.如果真 (取反 (相加 (取运行目录 (), “\API.mdb”).打开MDB数据库 ()))
    信息框 (“接连失败”, 0, )
    返回 ()
.如果真结束
未知支持库函数_0 (&_初始化数据, , )
_时钟_状态栏提示_周期事件 ()
DLL文本转表格 (“.DLL命令 DLL命令1”) ' 测试
_高表大小 ()
赋值 (old, SetWindowLongA (取窗口句柄 (), #GWL_WNDPROC, 到数值 (&NewProc)))
赋值 (.背景颜色, 13158600)
_正常化 ()

.子程序 _初始化数据, 空白型, , 
.局部变量 局部_记录集, 整数型, , , 
.局部变量 局部_英文API, 文本型, , , 
.局部变量 局部_中文PI, 文本型, , , 
.局部变量 局部_索引, 整数型, , , 
.局部变量 Index, 整数型, , , 

全部删除 ()
禁止重画 ()
赋值 (局部_记录集, “Select * From API”.查询 ())
.如果 (不等于 (局部_记录集, 0))
    局部_记录集.到首记录 ()
    .判断循环首 (取反 (局部_记录集.尾记录后 ()))
        赋值 (局部_英文API, 局部_记录集.读 (“EAPI”))
        赋值 (局部_中文PI, 局部_记录集.读 (“CAPI”))
        赋值 (局部_索引, 局部_记录集.读 (“ID”))
        赋值 (Index, .插入表项 ())
        Index.置标题 (0, 局部_英文API)
        Index.置标题 (1, 局部_中文PI)
        Index.置表项数值 (局部_索引)
        局部_记录集.到后一记录 ()
    .判断循环尾 ()
    局部_记录集.关闭记录集 ()
    赋值 (.标题, 相加 (“共”, 到文本 (取表项数 ()), “个”))
.否则
    信息框 (“查询失败!”, 16, )
.如果结束
允许重画 ()

.子程序 调整列宽, 空白型, , 
.参数 高级表格, 未知类型0x20001, , 

.局部变量 局部_字宽, 整数型, , , 
.局部变量 局部_列宽度, 整数型, , , 
.局部变量 局部_长度, 空白型, , , 
.局部变量 Index, 整数型, , , 

赋值 (.字体.字体名称, 高级表格.未知支持库函数_15 (0, 0))
赋值 (.字体.字体大小, 高级表格.未知支持库函数_17 (0, 0))
赋值 (局部_字宽, 相乘 (“Z”.取宽度 (), 0.85))
.计次循环首 (相减 (高级表格., 1), Index) ' DLL命令名,参数名比较
    .如果真 (等于 (Index, 1))
        赋值 (局部_长度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (0, 0)), 局部_字宽), 10)) ' 第0行的长度
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (1, 0)), 局部_字宽), 10)) ' 第1行的长度
    .如果真结束
    .如果真 (大于或等于 (Index, 7))
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (Index, 0)), 局部_字宽), 10))
    .如果真结束
    
    .如果真 (小于 (局部_长度, 局部_列宽度)) ' 与上一次作比较
        赋值 (局部_长度, 局部_列宽度)
    .如果真结束
    
.计次循环尾 ()
高级表格.未知支持库函数_32 (0, 局部_长度)

.计次循环首 (相减 (高级表格., 1), Index) ' 返回值类型和参数类型
    .如果真 (等于 (Index, 1))
        赋值 (局部_长度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (0, 1)), 局部_字宽), 10))
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (1, 1)), 局部_字宽), 10))
    .如果真结束
    .如果真 (大于或等于 (7))
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (Index, 1)), 局部_字宽), 10))
    .如果真结束
    
    .如果真 (小于 ())
        赋值 ()
    .如果真结束
    
.计次循环尾 ()
高级表格.未知支持库函数_32 (1, 局部_长度)

赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (0, 2)), 局部_字宽), 10))
高级表格.未知支持库函数_32 (2, 局部_列宽度)

赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (6, 3)), 局部_字宽), 10))
高级表格.未知支持库函数_32 (3, 局部_列宽度)
赋值 (局部_长度, 0)
.计次循环首 (相减 (高级表格., 1), Index) ' 备注
    .如果真 (等于 (Index, 1))
        赋值 (局部_长度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (0, 4)), 局部_字宽), 100))
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (1, 3)), 局部_字宽), 10))
    .如果真结束
    .如果真 (大于或等于 (Index, 7))
        赋值 (局部_列宽度, 相加 (相乘 (取文本长度 (高级表格.未知支持库函数_10 (Index, 4)), 局部_字宽), 10))
    .如果真结束
    .如果真 (小于 (局部_长度, 局部_列宽度))
        赋值 (局部_长度, 局部_列宽度)
    .如果真结束
    
.计次循环尾 ()
高级表格.未知支持库函数_32 (4, 局部_长度)

.子程序 DLL文本转表格, 空白型, , 
.参数 高级表格, 未知类型0x20001, , 
.参数 dll文本, 文本型, , 

.局部变量 Index, 整数型, , , 
.局部变量 局部_临时值, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , "0", 
.局部变量 局部_分割1, 文本型, , "0", 
.局部变量 局部_DLL命令名, 文本型, , , 
.局部变量 局部_返回类型, 文本型, , , 
.局部变量 局部_DLL库文件名, 文本型, , , 
.局部变量 局部_参数, 参数, , "0", 
.局部变量 局部_临时参数, 参数, , , 
.局部变量 局部_备注, 文本型, , , 
.局部变量 局部_公开, 文本型, , , 
.局部变量 局部_在DLL库中对应命令名, 文本型, , , 
.局部变量 局部_成员数, 整数型, , , 

高级表格.禁止重画 () ' 和下面的高级表格1.允许重画 ()配合使用..防止高级表格1的闪烁
高级表格.未知支持库函数_57 () ' 清空之前的数据
赋值 (高级表格., 7) ' 初始化行数
赋值 (高级表格., 5) ' 初始化列数
 ' ---------------下面把表格设置成和dll表格一样的样式---------------
高级表格.未知支持库函数_58 (1, 3, , 4)
高级表格.未知支持库函数_58 (2, 0, , 4)
高级表格.未知支持库函数_58 (3, 0, , 4)
高级表格.未知支持库函数_58 (4, 0, , 4)
高级表格.未知支持库函数_58 (5, 0, , 4)
 ' -------------------------------------------------------------------
 ' --------------------下面置属性-------------------------
高级表格.未知支持库函数_25 (0, 2, 20, , 2) ' 居中
高级表格.未知支持库函数_20 (1, 2, , , 1) ' 公开字体
高级表格.未知支持库函数_22 (1, 2, , , 128) ' 公开
高级表格.未知支持库函数_22 (1, 0, , , 8388608) ' DLL命令名
高级表格.未知支持库函数_22 (1, 1, , , 16711680) ' 返回类型
高级表格.未知支持库函数_22 (1, 3, , , 32768) ' 备注
高级表格.未知支持库函数_22 (3, 0, , , 128) ' DLL库文件名
高级表格.未知支持库函数_22 (5, 0, , , 128) ' 在DLL库中对应命令名
高级表格.未知支持库函数_24 (0, 0, , 4, 15003110)
高级表格.未知支持库函数_24 (2, 0, , 4, 15003110)
高级表格.未知支持库函数_24 (4, 0, , 4, 15003110)
高级表格.未知支持库函数_24 (6, 0, , 4, 15003110)
高级表格.未知支持库函数_30 (1, 4) ' 数据类型

.计次循环首 (11, Index)
    高级表格.未知支持库函数_45 (1, 多项选择 (Index, “字节型”, “整数型”, “小数型”, “逻辑型”, “文本型”, “字节集”, “短整数型”, “长整数型”, “日期时间型”, “子程序指针”, “双精度小数型”))
.计次循环尾 ()

 ' --------------------下面初始化DLL的文字-------------------------
高级表格.未知支持库函数_9 (6, 1, 1, “类型”)
高级表格.未知支持库函数_9 (0, 4, 1, “备注”)
高级表格.未知支持库函数_9 (6, 2, 1, “传址”)
高级表格.未知支持库函数_9 (6, 3, 1, “数组”)
高级表格.未知支持库函数_9 (6, 4, 1, “备注”)
高级表格.未知支持库函数_9 (0, 0, 1, “DLL命令名”)
高级表格.未知支持库函数_9 (4, 0, 1, “在DLL库中对应命令名：”)
高级表格.未知支持库函数_9 (6, 0, 1, “参数名”)
高级表格.未知支持库函数_9 (0, 1, 1, “返回类型”)
高级表格.未知支持库函数_9 (2, 0, 1, “DLL库文件名：”)
高级表格.未知支持库函数_9 (0, 2, 1, “公开”)
 ' -----------------------------------------------------------
 ' .版本 2

 ' .DLL命令 _取窗口进程ID, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
 ' .参数 窗口句柄, 整数型, 传址 数组, hwnd，指定窗口句柄
 ' .参数 进程标识符, 整数型, 传址 数组, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

 ' ------------------------提取dll各项数据---------------------------
赋值 (局部_临时文本, 分割文本 (dll文本, #换行符, ))
.计次循环首 (取数组成员数 (局部_临时文本), Index)
    .判断开始 (近似等于 (删全部空 (局部_临时文本 [Index]), “.DLL命令”))
        赋值 (局部_分割1, 分割文本 (局部_临时文本 [Index], “, ”, ))
        赋值 (局部_成员数, 取数组成员数 (局部_分割1))
         ' --------------------------一步一步的取相应的数据..----------------
        .如果真 (等于 (局部_成员数, 0))
            赋值 (局部_DLL命令名, 删首尾空 (子文本替换 (局部_临时文本 [Index], “.DLL命令 ”, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 1))
            赋值 (局部_DLL命令名, 删首尾空 (子文本替换 (局部_分割1 [1], “.DLL命令 ”, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 2))
            赋值 (局部_返回类型, 局部_分割1 [2])
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 3))
            赋值 (局部_DLL库文件名, 删首尾空 (子文本替换 (局部_分割1 [3], #引号, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 4))
            赋值 (局部_在DLL库中对应命令名, 删首尾空 (子文本替换 (局部_分割1 [4], #引号, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 5))
            赋值 (局部_公开, 子文本替换 (局部_分割1 [5], “公开”, “√”, , , 真))
        .如果真结束
        .判断开始 (等于 (局部_成员数, 6))
            赋值 (局部_备注, 局部_分割1 [6])
        .判断 (大于 (6))
             ' 局部_DLL命令名 ＝ 子文本替换 (局部_分割1 [1], “.DLL命令”, , , , 真)
             ' 局部_返回类型 ＝ 局部_分割1 [2]
             ' 局部_DLL库文件名 ＝ 子文本替换 (局部_分割1 [3], #引号, , , , 真)
             ' 局部_在DLL库中对应命令名 ＝ 子文本替换 (局部_分割1 [4], #引号, , , , 真)
             ' 局部_公开 ＝ 子文本替换 (局部_分割1 [5], “公开”, “√”, , , 真)
            .变量循环首 (6, 取数组成员数 (), 1, )
                赋值 (相加 ( [“,”]))
            .变量循环尾 ()
            赋值 (取文本左边 (相减 (取文本长度 (), 1))) ' 去掉后面多余的逗号(,)
        .默认
            
        .判断结束
        
    .判断 (近似等于 (删全部空 (局部_临时文本 [Index]), “.参数”))
        赋值 (局部_分割1, 分割文本 (局部_临时文本 [Index], “,”, ))
        赋值 (局部_成员数, 取数组成员数 (局部_分割1))
        .如果真 (等于 (局部_成员数, 0))
            赋值 (局部_临时参数.参数名, 删全部空 (子文本替换 (局部_临时文本 [Index], “.参数 ”, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 1))
            赋值 (局部_临时参数.参数名, 删全部空 (子文本替换 (局部_分割1 [1], “.参数 ”, , , , 真)))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 2))
            赋值 (局部_临时参数.类型, 删全部空 (局部_分割1 [2]))
        .如果真结束
        .如果真 (大于或等于 (局部_成员数, 3))
            .如果 (不等于 (寻找文本 (局部_分割1 [3], “传址”, , 假), -1))
                赋值 (局部_临时参数.传址, “√”)
            .否则
                赋值 (局部_临时参数.传址, “”)
            .如果结束
            .如果 (不等于 (寻找文本 (局部_分割1 [3], “数组”, , 假), -1))
                赋值 (局部_临时参数.数组, “√”)
            .否则
                赋值 (局部_临时参数.数组, “”)
            .如果结束
            
        .如果真结束
        .如果真 (等于 (局部_成员数, 4))
            赋值 (局部_临时参数.备注, 删首尾空 (局部_分割1 [4]))
        .如果真结束
        .如果真 (大于 (取数组成员数 (局部_分割1), 4))
            .变量循环首 (4, 取数组成员数 (局部_分割1), 1, Index)
                赋值 (局部_备注, 相加 (局部_备注, 局部_分割1 [Index], “,”))
            .变量循环尾 ()
            赋值 (局部_临时参数.备注, 取文本左边 (局部_备注, 相减 (取文本长度 (局部_备注), 1)))
        .如果真结束
        加入成员 (局部_参数, 局部_临时参数)
    .默认
        
    .判断结束
    
.计次循环尾 ()
 ' ------------------------dll置数据---------------------------
高级表格.未知支持库函数_9 (1, 2, 1, 局部_公开) ' DLL命令名公开
高级表格.未知支持库函数_9 (1, 1, 1, 局部_返回类型) ' 返回类型
高级表格.未知支持库函数_9 (1, 0, 1, 局部_DLL命令名) ' DLL命令名
高级表格.未知支持库函数_9 (1, 3, 1, 局部_备注) ' 备注
高级表格.未知支持库函数_9 (5, 0, 1, 局部_在DLL库中对应命令名) ' 在DLL库中对应命令名
高级表格.未知支持库函数_9 (3, 0, 1, 局部_DLL库文件名) ' DLL库文件名
 ' -----------------------------------------------------------
 ' -----------------参数插入----------------
.计次循环首 (取数组成员数 (局部_参数), Index) ' 判断插入多少个参数
    高级表格.未知支持库函数_38 () ' 插入一空行
     ' ------------------下面置数据-----------------------
    高级表格.未知支持库函数_9 (相减 (高级表格., 1), 0, 1, 局部_参数 [Index], 参数名) ' 参数名
    高级表格.未知支持库函数_9 (相减 (高级表格., 1), 1, 1, 局部_参数 [Index], 类型) ' 类型
    高级表格.未知支持库函数_9 (相减 (高级表格., 1), 2, 1, 局部_参数 [Index], 传址) ' 传址
    高级表格.未知支持库函数_9 (相减 (高级表格., 1), 3, 1, 局部_参数 [Index], 数组) ' 数组
    高级表格.未知支持库函数_9 (相减 (高级表格., 1), 4, 1, 局部_参数 [Index], 备注) ' 参数备注
     ' --------------------下面置属性-------------------------
    高级表格.未知支持库函数_20 (相减 (高级表格., 1), 2, , , 1) ' 传址字体
    高级表格.未知支持库函数_20 (相减 (高级表格., 1), 3, , , 1) ' 数组字体
    高级表格.未知支持库函数_22 (相减 (高级表格., 1), 2, , , 128) ' 传址
    高级表格.未知支持库函数_22 (相减 (高级表格., 1), 3, , , 128) ' 数组
    高级表格.未知支持库函数_22 (相减 (高级表格., 1), 1, , , 16711680) ' 数据类型
    高级表格.未知支持库函数_22 (相减 (高级表格., 1), 4, , , 32768) ' 参数备注
.计次循环尾 ()
 ' ------------------------------------------
调整列宽 (高级表格)
 ' ------------------------------------------
高级表格.允许重画 () ' 和上面的高级表格1.禁止重画 ()配合使用..防止高级表格1的闪烁


.子程序 __启动窗口_尺寸被改变, 空白型, , 
.移动 (相乘 (., 0.3), ) ' 编辑框和超级列表框占窗口的宽度30%.
.移动 (.宽度, 相减 (取用户区高度 (), .加粗, .))
0.置列宽 (相除 (.倾斜, 2)) ' 把0列和1列按当前的超级列表框的宽度分成一半.
1.置列宽 (相除 (.倾斜, 2)) ' 把0列和1列按当前的超级列表框的宽度分成一半.
相加 (.角度, .倾斜, 5).移动 (相减 (., .角度, .倾斜, 15), ) ' 以超级列表框的位置作为基础进行移动到相应位置
.移动 (.左边, 相加 (.顶边, .高度, 5), 相减 (取用户区宽度 (), .左边, 2), )
赋值 (.宽度, 相减 (.宽度, 相乘 (.左边, 2)))
_高表大小 ()
.如果真 (.可视)
    .如果 (等于 (.标记, “正常”)) ' 标记是记录着当前是最大化还是正常状态..
        _正常化 ()
    .否则
        _最大化 ()
    .如果结束
    
.如果真结束


.子程序 _高表大小, 空白型, , 
.参数 高级表格, 未知类型0x20001, , 

.局部变量 Index, 整数型, , , 
.局部变量 局部_临时值, 整数型, , , 

.计次循环首 (5, Index)
    赋值 (局部_临时值, 相加 (局部_临时值, 高级表格.未知支持库函数_44 (相减 (Index, 1))))
.计次循环尾 ()
赋值 (高级表格., 相加 (局部_临时值, 5))
赋值 (局部_临时值, 0)
.计次循环首 (高级表格., Index)
    赋值 (局部_临时值, 相加 (局部_临时值, 高级表格.未知支持库函数_43 (相减 (Index, 1))))
.计次循环尾 ()
赋值 (高级表格., 相加 (局部_临时值, 20))
.移动 (相加 (高级表格., 5), 相加 (高级表格., 15))
.如果真 (大于 (.宽度, .宽度))
    赋值 (.宽度, .宽度)
    赋值 (高级表格., 相减 (.宽度, 5))
.如果真结束
.如果真 (大于 (.高度, 相减 (., .顶边, 54)))
    赋值 (.高度, 相减 (., .顶边, 54))
    赋值 (高级表格., 相减 (.高度, 5))
.如果真结束


.子程序 _时钟_状态栏提示_周期事件, 空白型, , 改变状态栏的显示
.局部变量 局部_提示文本类型, 整数型, 静态, , 
.局部变量 局部_显示文本, 文本型, , , 

.如果真 (或者 (等于 (局部_提示文本类型, 0), 大于 (局部_提示文本类型, 5))) ' 第一次局部_提示文本类型的初始值为0,下面只有5项内容..所以这里要把它们都修改回从1开始.才能进行循环
    赋值 (局部_提示文本类型, 1)
.如果真结束
赋值 (局部_显示文本, 多项选择 (局部_提示文本类型, “双击列表框选项..可添加到待复制区”, “单击列表框选项..可查看该API原型”, “<添加按钮>可以添加API,输入直接从易语言复制出来的文本即可”, “<修改按钮>可以修改当前显示的API!”, “<删除按钮>可以删除当前显示的API!”))
1.置文本 (局部_显示文本)
赋值 (局部_提示文本类型, 相加 (局部_提示文本类型, 1))

.子程序 _按钮_复制_被单击, 空白型, , 
.如果 (并且 (不等于 (.内容, “”), 置剪辑板文本 (.内容)))
    信息框 (“已复制”, 64, )
.否则
    信息框 (“复制失败”, 16, )
.如果结束


.子程序 _按钮_全选_被单击, 空白型, , 
获取焦点 ()
赋值 (.被选择字符数, -1)

.子程序 _按钮_清空_被单击, 空白型, , 
赋值 (.内容, “”)

.子程序 _编辑框1_内容被改变, 空白型, , 
.局部变量 局部_临时内容, 文本型, , , 
.局部变量 局部_SQL语句, 文本型, , , 
.局部变量 局部_ID, 整数型, , , 
.局部变量 局部_记录集, 整数型, , , 
.局部变量 Index, 整数型, , , 

赋值 (局部_临时内容, 到小写 (删首尾空 (.内容)))
.如果真 (不等于 (局部_临时内容, “”))
    赋值 (局部_SQL语句, 相加 (“Select top 2 * from API where EAPI like ”, _SQL搜索文本格式化 (局部_临时内容)))
    赋值 (局部_记录集, 局部_SQL语句.查询 ())
    局部_记录集.到首记录 ()
    .如果 (局部_记录集.尾记录后 ()) ' 如果这处成功.则代表没有代到符合条件的字段.再以字段CAPI去查询
        局部_记录集.关闭记录集 ()
        赋值 (局部_SQL语句, 相加 (“Select top 2 * from API where CAPI like ”, _SQL搜索文本格式化 (局部_临时内容)))
        赋值 (局部_记录集, 局部_SQL语句.查询 ())
        局部_记录集.到首记录 ()
        .如果真 (取反 (局部_记录集.尾记录后 ()))
            赋值 (局部_ID, 局部_记录集.读 (“ID”))
        .如果真结束
        
    .否则
        赋值 (局部_ID, 局部_记录集.读 (“ID”))
    .如果结束
    局部_记录集.关闭记录集 ()
    .如果真 (不等于 (局部_ID, 0))
        .计次循环首 (取表项数 (), Index)
            .如果真 (等于 (相减 (Index, 1).取表项数值 (), 局部_ID))
                赋值 (., 相减 (Index, 1))
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.如果真结束


.子程序 NewProc, 整数型, , 超级列表框 选项高亮   参考yuzo555的代码..原作者不详..可能原作者是yuzo555
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 lvcd, NMLVCUSTOMDRAW, , , 
.局部变量 hdr, NMHDR, , , 

.如果真 (并且 (等于 (msg, #WM_NOTIFY), 等于 (wparam, GetDlgCtrlID (取窗口句柄 ()))))
    CopyMemory_NMHDR (hdr, lparam, 12)
    .如果真 (等于 (hdr.code, #NM_CUSTOMDRAW))
        CopyMemory_NMLVCUSTOMDRAW (lvcd, lparam, 60)
        .判断开始 (等于 (lvcd.nmcd.dwDrawStage, #CDDS_PREPAINT))
            返回 (#CDRF_NOTIFYITEMDRAW)
        .判断 (等于 (lvcd.nmcd.dwDrawStage, #CDDS_ITEMPREPAINT))
            返回 (#CDRF_NOTIFYSUBITEMDRAW)
        .判断 (等于 (lvcd.nmcd.dwDrawStage, 位或 (#CDDS_ITEMPREPAINT, #CDDS_SUBITEM)))
            .判断开始 (lvcd.是否被选择 (.nmcd.dwItemSpec))
                赋值 (lvcd.clrText, #白色) ' 改为自己需要的高亮文本颜色
                赋值 (lvcd.clrTextBk, 11890490) ' 改为自己需要的高亮文本背景颜色
                 ' 返回 (#CDRF_SKIPDEFAULT)
            .默认
                赋值 (lvcd.clrText, .)
                赋值 (lvcd.clrTextBk, .)
            .判断结束
            赋值 (lvcd.nmcd.uItemState, 0)
            CopyMemory_NMLVCUSTOMDRAWTolParam (lparam, lvcd, 60)
            返回 (#CDRF_NEWFONT)
        .默认
            
        .判断结束
        
    .如果真结束
    
.如果真结束
返回 (CallWindowProcA (old, hwnd, msg, wparam, lparam))

.子程序 _SQL搜索文本格式化, 文本型, , 这是用于查询...把文字里的单引号做一些处理,因为一个单引号在数据库是相当易语言的双引号.会导致出错的.
.参数 内容, 文本型, , 

返回 (相加 (“'”, 子文本替换 (内容, “'”, “''”, , , 真), “%'”))

.子程序 _SQL文本格式化, 文本型, , 这是用于添加,修改...把文字里的单引号做一些处理,因为一个单引号在数据库是相当易语言的双引号.会导致出错的.
.参数 内容, 文本型, , 

返回 (相加 (“'”, 子文本替换 (内容, “'”, “''”, , , 真), “'”))

.子程序 _超级列表框1_右键单击表项, 空白型, , 
连续赋值 (等于 (., -1), .禁止, .禁止, .禁止, .禁止, .禁止, .禁止)
弹出菜单 ()

.子程序 _导入_被选择, 空白型, , 
.如果真 (打开 ())
    _功能调用 (“导入API”)
.如果真结束


.子程序 _添加_被选择, 空白型, , 
_功能调用 (“添加API”)

.子程序 _修改DLL_被选择, 空白型, , 
.如果真 (等于 (., -1))
    信息框 (“请先选择一项API..再点击进行修改!!”, 16, )
    返回 ()
.如果真结束
_功能调用 (“修改API”)

.子程序 _删除_被选择, 空白型, , 
.局部变量 局部_ID, 整数型, , , 
.局部变量 局部_SQL语句, 文本型, , , 

.如果真 (等于 (信息框 (“确认要删除这一项API,如果删除则无法恢复,如果你是误点了.请选择取消.!如果确认要删除请选择确认”, 相加 (#警告图标, #确认取消钮), ), #确认钮))
    赋值 (局部_ID, .取表项数值 (.))
    .如果 (不等于 (局部_ID, 0))
        赋值 (局部_SQL语句, 相加 (“delete from API where ID=”, 到文本 (局部_ID)))
        .如果 (局部_SQL语句.执行 ())
            信息框 (“数据删除成功!”, 64, )
        .否则
            信息框 (“数据删除失败!”, 16, )
        .如果结束
        
    .否则
        信息框 (“删除失败!没有找到ID值”, 16, )
        
    .如果结束
    
.如果真结束


.子程序 _按钮_查找_被单击, 空白型, , 此处用复制组件来写查找和查找下一个..只是为了加强一下复制组件的运用..
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 局部_位置, 整数型, 静态, , 
.局部变量 局部_临时按钮, 按钮, 静态, , 
.局部变量 局部_按钮, 按钮, , , 

赋值 (局部_按钮, 取事件组件 ())
赋值 (局部_临时文本, 删首尾空 (.内容))
.如果 (不等于 (局部_临时文本, “”))
    .如果真 (等于 (局部_按钮.标记, “0”)) ' 这个是按钮_查找
        赋值 (局部_位置, 寻找文本 (.内容, 局部_临时文本, , 真))
    .如果真结束
    .如果真 (等于 (局部_按钮.标记, “1”)) ' 这个是临时按钮
        赋值 (局部_位置, 寻找文本 (.内容, 局部_临时文本, 相加 (局部_位置, 1), 真))
    .如果真结束
    .如果 (不等于 (局部_位置, -1))
        获取焦点 () ' 必须要把焦点赋值于编辑框..才能让编辑框显示选择的内容
        赋值 (.起始选择位置, 相减 (局部_位置, 1))
        赋值 (.被选择字符数, 取文本长度 (局部_临时文本))
        .如果真 (取反 (是否已创建 (局部_临时按钮))) ' 判断一下临时按钮是否已创建
            复制窗口组件 (局部_临时按钮)
            赋值 (局部_临时按钮.标题, “下一个”)
            局部_临时按钮.移动 (相加 (.左边, .宽度, 10), , , )
            赋值 (局部_临时按钮.标记, “1”) ' 把按钮标记一下,以便和按钮_查找区分
            赋值 (局部_临时按钮.可视, 真)
        .如果真结束
        
    .否则
        信息框 (相加 (“找不到”, 局部_临时文本), 16, )
        .如果真 (等于 (局部_按钮.标记, “1”))
            局部_按钮.销毁 ()
        .如果真结束
        
    .如果结束
    
.否则
    信息框 (“请输入查找的内容!”, 16, )
.如果结束


.子程序 _加入待复制区双击_被选择, 空白型, , 
.局部变量 局部_SQL语句, 文本型, , , 
.局部变量 局部_ID, 整数型, , , 
.局部变量 局部_记录集, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 

.如果真 (等于 (., -1))
    返回 ()
.如果真结束
赋值 (局部_ID, .取表项数值 (.))
.如果 (不等于 (局部_ID, 0))
    赋值 (局部_SQL语句, 相加 (“Select * from API where ID=”, 到文本 (局部_ID)))
    赋值 (局部_记录集, 局部_SQL语句.查询 ())
    .如果 (局部_记录集.尾记录后 ())
        信息框 (“没有找到数据!”, 16, )
    .否则
        
        赋值 (局部_临时文本, 局部_记录集.读 (“DLL”))
        .如果 (不等于 (寻找文本 (.内容, 局部_临时文本, , 假), -1)) ' 检测是否之前已经加过..
            信息框 (“已经加过了!请勿重复添加!!”, 16, )
        .否则
            相加 (局部_临时文本, #换行符).加入文本 ()
        .如果结束
        
    .如果结束
    局部_记录集.关闭记录集 ()
.否则
    信息框 (“没有找到ID值”, 16, )
.如果结束


.子程序 _查看单击_被选择, 空白型, , 
.局部变量 局部_SQL语句, 文本型, , , 
.局部变量 局部_ID, 整数型, , , 
.局部变量 局部_记录集, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 

.如果真 (等于 (., -1))
    返回 ()
.如果真结束
赋值 (局部_ID, .取表项数值 (.))
.如果 (不等于 (局部_ID, 0))
    赋值 (局部_SQL语句, 相加 (“Select * from API where ID=”, 到文本 (局部_ID)))
    赋值 (局部_记录集, 局部_SQL语句.查询 ())
    .如果 (局部_记录集.尾记录后 ())
        信息框 (“没有找到数据!”, 16, )
    .否则
        
        赋值 (局部_临时文本, 局部_记录集.读 (“DLL”))
        DLL文本转表格 (局部_临时文本)
        _高表大小 ()
        赋值 (., “高级表格1”)
        赋值 (.可视, 真)
    .如果结束
    局部_记录集.关闭记录集 ()
    .保证显示 (.)
.否则
    信息框 (“没有找到ID值”, 16, )
.如果结束


.子程序 _超级列表框1_被双击, 逻辑型, , 把双击的表项索引加入编辑框_DLL声明里..
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_加入待复制区双击_被选择 ()

.子程序 _高级表格1_可否被编辑, 逻辑型, , 只有第1行,第3行,第5行,和参数(从第7行开始)可以编辑外..其它的直接返回假,即不可编辑!
.局部变量 局部_行号, 整数型, , , 
.局部变量 局部_列号, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 高级表格, 未知类型0x20001, , , 

赋值 (高级表格, 取事件组件 ())
.如果真 (并且 (程序集_是否可编辑, 不等于 (高级表格., “高级表格1”)))
    赋值 (局部_行号, 高级表格.未知支持库函数_3 ())
    赋值 (局部_列号, 高级表格.未知支持库函数_4 ())
    .判断开始 (并且 (大于或等于 (局部_行号, 1), 等于 (局部_列号, 2)))
        高级表格.未知支持库函数_9 (局部_行号, 2, 1, 选择 (等于 (高级表格.未知支持库函数_10 (局部_行号, 2), “”), “√”, “”)) ' 公开和传址..直接打勾或取消打勾
        _高级表格1_结束编辑 ()
        返回 (假)
    .判断 (或者 (等于 (局部_行号, 1), 等于 (局部_行号, 3), 等于 (局部_行号, 5)))
        返回 (真)
    .判断 (并且 (大于或等于 (局部_行号, 7), 等于 (局部_列号, 3)))
        高级表格.未知支持库函数_25 (局部_行号, 3, , , 2) ' 居中
        高级表格.未知支持库函数_9 (局部_行号, 3, 1, 选择 (等于 (高级表格.未知支持库函数_10 (局部_行号, 3), “”), “√”, “”)) ' 参数里的数组..直接打勾或取消打勾
        _高级表格1_结束编辑 ()
        返回 (假)
    .判断 (大于或等于 (局部_行号, 7))
        返回 (真)
    .默认
        返回 (假)
    .判断结束
    
.如果真结束
返回 (假)

.子程序 _高级表格1_结束编辑, 空白型, , 添加参数后调整列宽
.局部变量 高级表格, 未知类型0x20001, , , 
.局部变量 局部_DLL命令名, 文本型, , , 
.局部变量 局部_返回类型, 文本型, , , 
.局部变量 局部_DLL库文件名, 文本型, , , 
.局部变量 局部_参数, 参数, , "0", 
.局部变量 局部_临时参数, 参数, , , 
.局部变量 局部_备注, 文本型, , , 
.局部变量 局部_公开, 文本型, , , 
.局部变量 局部_在DLL库中对应命令名, 文本型, , , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 Index, 整数型, , , 
.局部变量 局部_参数备注, 文本型, , , 
.局部变量 局部_传址, 文本型, , , 
.局部变量 局部_参数数组, 文本型, , , 
.局部变量 局部_参数类型, 文本型, , , 
.局部变量 局部_参数名, 文本型, , , 
.局部变量 局部_传址_数组, 文本型, , , 

赋值 (高级表格, 取事件组件 ())
.如果真 (等于 (高级表格., “高级表格1”))
    返回 ()
.如果真结束
 ' .DLL命令 _取窗口进程ID, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
 ' .参数 窗口句柄, 整数型, 传址 数组, hwnd，指定窗口句柄
 ' .参数 进程标识符, 整数型, 传址 数组, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

 ' ------------------------dll取数据---------------------------
赋值 (局部_公开, 高级表格.未知支持库函数_10 (1, 2)) ' DLL命令名公开
赋值 (局部_返回类型, 高级表格.未知支持库函数_10 (1, 1)) ' 返回类型
赋值 (局部_DLL命令名, 高级表格.未知支持库函数_10 (1, 0)) ' DLL命令名
赋值 (局部_备注, 高级表格.未知支持库函数_10 (1, 3)) ' 备注
赋值 (局部_在DLL库中对应命令名, 删全部空 (高级表格.未知支持库函数_10 (5, 0))) ' 在DLL库中对应命令名
赋值 (局部_在DLL库中对应命令名, 选择 (等于 (局部_在DLL库中对应命令名, “”), “”, 相加 (#引号, 局部_在DLL库中对应命令名, #引号)))

赋值 (局部_DLL库文件名, 删全部空 (高级表格.未知支持库函数_10 (3, 0))) ' DLL库文件名
赋值 (局部_DLL库文件名, 选择 (等于 (局部_DLL库文件名, “”), “”, 相加 (#引号, 局部_DLL库文件名, #引号)))

 ' -----------------构造DLL参数格式----------------
.计次循环首 (相减 (高级表格., 7), Index) ' 判断插入多少个参数
    赋值 (局部_参数备注, 高级表格.未知支持库函数_10 (相加 (6, Index), 4))
    赋值 (局部_传址, 高级表格.未知支持库函数_10 (相加 (6, Index), 2))
    赋值 (局部_参数数组, 高级表格.未知支持库函数_10 (相加 (6, Index), 3))
    赋值 (局部_参数类型, 高级表格.未知支持库函数_10 (相加 (6, Index), 1))
    赋值 (局部_参数名, 高级表格.未知支持库函数_10 (相加 (6, Index), 0))
     ' ----------------------传址和数组的格式...--------------------------
    .判断开始 (并且 (不等于 (局部_传址, “”), 不等于 (局部_参数数组, “”)))
        赋值 (局部_传址_数组, “传址 数组”)
    .判断 (不等于 (局部_传址, “”))
        赋值 (局部_传址_数组, “传址”)
    .判断 (不等于 (局部_参数数组, “”))
        赋值 (局部_传址_数组, “数组”)
    .默认
        赋值 (局部_传址_数组, “”)
    .判断结束
     ' -----------------------------------------------------------------------------------
    .判断开始 (不等于 (局部_参数备注, “”))
        赋值 (局部_临时文本, 相加 (局部_临时文本, “.参数 ”, 局部_参数名, “, ”, 局部_参数类型, “, ”, 局部_传址_数组, “, ”, 局部_参数备注, #换行符))
    .判断 (不等于 (局部_传址_数组, “”))
        赋值 (局部_临时文本, 相加 (局部_临时文本, “.参数 ”, 局部_参数名, “, ”, 局部_参数类型, “, ”, 局部_传址_数组, #换行符))
    .判断 (不等于 (局部_参数类型, “”))
        赋值 (局部_临时文本, 相加 (局部_临时文本, “.参数 ”, 局部_参数名, “, ”, 局部_参数类型, #换行符))
    .判断 (不等于 (局部_参数名, “”))
        赋值 (局部_临时文本, 相加 (局部_临时文本, “.参数 ”, 局部_参数名, #换行符))
    .默认
        
    .判断结束
    
.计次循环尾 ()
 ' ----------------------------------------构造DLL格式,不包含参数------------------------------------------------
.判断开始 (不等于 (局部_备注, “”))
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名, “, ”, 局部_返回类型, “, ”, 局部_DLL库文件名, “, ”, 局部_在DLL库中对应命令名, “, ”, 选择 (等于 (局部_公开, “”), “”, “公开”), “, ”, 局部_备注))
.判断 (不等于 (局部_公开, “”))
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名, “, ”, 局部_返回类型, “, ”, 局部_DLL库文件名, “, ”, 局部_在DLL库中对应命令名, “, ”, 选择 (等于 (局部_公开, “”), “”, “公开”)))
.判断 (不等于 (局部_在DLL库中对应命令名, “”))
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名, “, ”, 局部_返回类型, “, ”, 局部_DLL库文件名, “, ”, 局部_在DLL库中对应命令名))
.判断 (不等于 (局部_DLL库文件名, “”))
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名, “, ”, 局部_返回类型, “, ”, 局部_DLL库文件名))
.判断 (不等于 (局部_返回类型, “”))
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名, “, ”, 局部_返回类型))
.默认
    赋值 (程序集_对比文本, 相加 (“.DLL命令 ”, 局部_DLL命令名))
.判断结束
 ' -----------------------------------------------------------------------------------------------------------------
 ' ----------------------------------------------把dll格式和参数合在一起-----------------------------
.如果真 (不等于 (局部_临时文本, “.参数 ”))
    赋值 (程序集_对比文本, 相加 (程序集_对比文本, #换行符, 局部_临时文本))
.如果真结束
 ' -------------------------------------把最后的多余换行符删除------------------------------------
.判断循环首 (等于 (取文本右边 (程序集_对比文本, 2), #换行符))
    赋值 (程序集_对比文本, 取文本左边 (程序集_对比文本, 相减 (取文本长度 (程序集_对比文本), 2)))
.判断循环尾 ()
 ' ---------------------------------------------------------------------------------------------------
调试输出 (“程序集_对比文本”)
调试输出 (删全部空 (程序集_对比文本))
调试输出 (“高级表格.标记”)
调试输出 (删全部空 (高级表格.))
 ' --------------------------------------做比较...如果当前修改的和当初的不一样..就显示确认的按钮..否则删除确认按钮-------------------
.如果 (不等于 (删全部空 (程序集_对比文本), 删全部空 (高级表格.)))
    _功能调用 (“添加确认”)
.否则
    _功能调用 (“删除确认”)
.如果结束
 ' -------------------------------自动调整列宽,以便显示所有内容-----------------------------------------------------------
调整列宽 (高级表格)
 ' ---------------------------------------------------------------

.如果真 (不等于 (局部_在DLL库中对应命令名, “”))
    .如果真 (等于 (.内容, “”))
        赋值 (.内容, 子文本替换 (局部_在DLL库中对应命令名, #引号, , , , 真))
        .如果真 (等于 (.内容, “”))
            赋值 (.内容, 局部_DLL命令名)
        .如果真结束
        
    .如果真结束
    
.如果真结束



.子程序 _高级表格1_按下某键, 逻辑型, , 添加参数和删除参数
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 高级表格, 未知类型0x20001, , , 

赋值 (高级表格, 取事件组件 ())
.如果真 (程序集_是否可编辑)
    .如果真 (等于 (键代码, #回车键)) ' 添加一行参数
        .如果真 (大于或等于 (高级表格.未知支持库函数_3 (), 6))
            高级表格.未知支持库函数_38 ()
            _高表大小 (高级表格)
        .如果真结束
        
    .如果真结束
    .如果真 (并且 (等于 (键代码, #Del键), 大于或等于 (高级表格.未知支持库函数_3 (), 7))) ' 删除一行参数
        高级表格.未知支持库函数_36 (高级表格.未知支持库函数_3 ())
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 _功能调用, 空白型, , 
.参数 功能, 文本型, , 如:添加API ; 修改API ; 导入API

.局部变量 高级表格, 未知类型0x20001, 静态, , 
.局部变量 图形按钮, 图形按钮, 静态, , 
.局部变量 Index, 整数型, , , 
.局部变量 局部_临时值, 整数型, , , 
.局部变量 局部_英文API, 文本型, , , 
.局部变量 局部_中文API, 文本型, , , 
.局部变量 局部_SQL语句, 文本型, , , 
.局部变量 局部_ID, 整数型, , , 
.局部变量 局部_记录集, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 局部_读入文本, 文本型, , , 
.局部变量 局部_DLL数组, 文本型, , "0", 
.局部变量 局部_分割, 文本型, , "0", 
.局部变量 局部_分割1, 文本型, , "0", 
.局部变量 局部_索引, 整数型, , , 
.局部变量 局部_DLL, 文本型, , , 

.判断开始 (等于 (功能, “数据库操作”)) ' ----------------------------------数据库操作,如添加到数据,修改数据.导入数据到数据库--------------------------------------
    .如果真 (并且 (是否已创建 (图形按钮), 等于 (.标题, “修改API”))) ' --------修改API写入数据库
        .如果 (相加 (“update API set [EAPI]=”, _SQL文本格式化 (.内容), “,[CAPI]=”, _SQL文本格式化 (.内容), “,[DLL]=”, _SQL文本格式化 (程序集_对比文本), “ where [ID]=”, .标记).执行 ())
            调试输出 (.标记)
            信息框 (“修改成功”, 0, )
        .否则
            信息框 (“修改失败”, 0, )
        .如果结束
        _初始化数据 ()
    .如果真结束
    .如果真 (并且 (是否已创建 (图形按钮), 等于 (.标题, “添加API”))) ' --------添加API到数据库
        .如果 (等于 (信息框 (“确认添加此数据?”, 相加 (16, #是否钮), ), #是钮))
            .如果 (相加 (“insert into API (EAPI,CAPI,DLL)values(”, _SQL文本格式化 (.内容), “,”, _SQL文本格式化 (.内容), “,”, _SQL文本格式化 (程序集_对比文本), “)”).执行 ())
                信息框 (“添加成功”, 0, )
                _初始化数据 ()
            .否则
                信息框 (“添加失败”, 0, )
                返回 ()
            .如果结束
            
        .否则
            返回 ()
        .如果结束
        _初始化数据 ()
    .如果真结束
    .如果真 (并且 (是否已创建 (图形按钮), 等于 (.标题, “导入API”))) ' --------导入API到数据库
        .计次循环首 (取表项数 (), Index)
            赋值 (局部_英文API, 相减 (Index, 1).取标题 (0))
            赋值 (局部_中文API, 相减 (Index, 1).取标题 (1))
            赋值 (局部_DLL, 相减 (Index, 1).取标题 (2))
            .判断循环首 (等于 (取文本右边 (局部_DLL, 2), #换行符))
                赋值 (局部_DLL, 取文本左边 (局部_DLL, 相减 (取文本长度 (局部_DLL), 2)))
            .判断循环尾 ()
            赋值 (局部_SQL语句, 相加 (“Select * from API where EAPI=”, _SQL文本格式化 (局部_英文API)))
            赋值 (局部_记录集, 局部_SQL语句.查询 ())
            .如果真 (等于 (局部_记录集.尾记录后 (), 假))
                 ' 局部_临时文本 ＝ 外部数据库1.读 (局部_记录集, “DLL”)
                .如果真 (等于 (信息框 (相加 (“英文API:”, 局部_英文API, “出现了重复,如果想继续添加此API选择是,否则选择否跳过这些API的添加”), 相加 (16, #是否钮), ), #否钮))
                    局部_记录集.关闭记录集 ()
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            局部_记录集.关闭记录集 ()
            .如果真 (等于 (相加 (“insert into API (EAPI,CAPI,DLL)values(”, _SQL文本格式化 (局部_英文API), “,”, _SQL文本格式化 (局部_中文API), “,”, _SQL文本格式化 (局部_DLL), “)”).执行 (), 假))
                信息框 (“添加到数据库失败!”, 16, )
            .如果真结束
            
        .计次循环尾 ()
        信息框 (“添加完毕!”, 64, )
        _初始化数据 ()
    .如果真结束
    _功能调用 (“关闭”)
    返回 ()
.判断 (等于 (功能, “导入API”)) ' ----------------------------------------------导入API-----------------------------------------------
    全部删除 ()
    禁止重画 ()
    赋值 (.可视, 假)
    .如果真 (是否已创建 (高级表格))
        赋值 (高级表格., 假)
    .如果真结束
    赋值 (.可视, 假)
    
    赋值 (程序集_是否可编辑, 假)
    5.移动 (相加 (.高度, 5), 相减 (.宽度, 10), 相减 (.高度, .高度, 10))
    2.置列宽 (相减 (.倾斜, 240))
    赋值 (.标题, 功能)
    赋值 (局部_读入文本, 到文本 (读入文件 (.文件名)))
    赋值 (局部_读入文本, 子文本替换 (局部_读入文本, 相加 (“.版本 2”, #换行符), , , , 假))
    赋值 (局部_DLL数组, 分割文本 (局部_读入文本, “.DLL命令 ”, ))
    .计次循环首 (取数组成员数 (局部_DLL数组), Index)
        .如果真 (不等于 (删全部空 (局部_DLL数组 [Index]), “”))
            赋值 (局部_分割, 分割文本 (局部_DLL数组 [Index], #换行符, ))
            .如果真 (大于或等于 (取数组成员数 (局部_分割), 1)) ' 第一行.
                .如果 (不等于 (寻找文本 (局部_分割 [1], “, ”, , 假), -1)) ' 把第一行分割.如 .DLL命令 GetClassNameA, , , "GetClassNameA"
                    赋值 (局部_分割1, 分割文本 (局部_分割 [1], “, ”, ))
                    .如果真 (大于或等于 (取数组成员数 (局部_分割1), 4))
                        赋值 (局部_英文API, 子文本替换 (局部_分割1 [4], #引号, , , , 真))
                        赋值 (局部_中文API, 局部_分割1 [1])
                    .如果真结束
                    .如果真 (或者 (等于 (局部_英文API, “”), 小于 (取数组成员数 (局部_分割1), 4)))
                        赋值 (局部_英文API, 局部_分割1 [1])
                    .如果真结束
                    
                .否则
                    赋值 (局部_英文API, 局部_分割 [1])
                .如果结束
                
                .如果真 (不等于 (局部_英文API, “”))
                    赋值 (局部_索引, .插入表项 ())
                    局部_索引.置标题 (0, 局部_英文API)
                    局部_索引.置标题 (1, 局部_中文API)
                    局部_索引.置标题 (2, 相加 (“.DLL命令 ”, 局部_DLL数组 [Index]))
                    赋值 (局部_英文API, “”)
                    赋值 (局部_中文API, “”)
                    
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    赋值 (.字体大小, 真)
    _功能调用 (“添加确认”)
    允许重画 ()
    刷新显示 ()
    
.判断 (等于 (功能, “添加API”)) ' ----------------------------------------------添加API-----------------------------------------------
    赋值 (.可视, 假)
    连续赋值 (“”, .内容, .内容, 程序集_英文API, 程序集_中文API)
    赋值 (程序集_是否可编辑, 真)
    赋值 (.字体大小, 假)
    赋值 (.标题, 功能)
    .如果真 (等于 (是否已创建 (高级表格), 假))
        复制窗口组件 (高级表格)
        高级表格.置父窗口 ()
        高级表格.移动 (1, .高度, 相减 (.宽度, 5), 相减 (.高度, .高度, 5))
        
    .如果真结束
    赋值 (高级表格., 真)
    DLL文本转表格 (高级表格, “.DLL命令 DLL命令1”)
    赋值 (.顶边, 相加 (.高度, 5))
    赋值 (高级表格., 相加 (.顶边, .高度, 4))
    赋值 (.可视, 真)
    赋值 (高级表格., “.DLL命令 DLL命令1”)
.判断 (等于 (功能, “修改API”)) ' ----------------------------------------------修改API-----------------------------------------------
    赋值 (.可视, 假)
    赋值 (.字体大小, 假)
    赋值 (程序集_是否可编辑, 真)
    赋值 (.标题, 功能)
    .如果真 (等于 (是否已创建 (高级表格), 假))
        复制窗口组件 (高级表格)
        高级表格.置父窗口 ()
        高级表格.移动 (1, .高度, 相减 (.宽度, 5), 相减 (.高度, .高度, 5))
    .如果真结束
    赋值 (高级表格., 真)
     ' --------------------读取对应的数据-----------------------
    .如果真 (等于 (., -1))
        返回 ()
    .如果真结束
    赋值 (局部_ID, .取表项数值 (.))
    .如果 (不等于 (局部_ID, 0))
        赋值 (局部_SQL语句, 相加 (“Select * from API where ID=”, 到文本 (局部_ID)))
        赋值 (局部_记录集, 局部_SQL语句.查询 ())
        .如果 (局部_记录集.尾记录后 ())
            信息框 (“没有找到数据!”, 16, )
        .否则
            
            赋值 (局部_临时文本, 局部_记录集.读 (“DLL”))
            赋值 (程序集_英文API, 局部_记录集.读 (“EAPI”))
            赋值 (程序集_中文API, 局部_记录集.读 (“CAPI”))
            赋值 (.内容, 程序集_英文API)
            赋值 (.内容, 程序集_中文API)
            赋值 (高级表格., 局部_临时文本) ' 记录着当前的DLL格式代码,,省变量..就用标记来当变量用..
            赋值 (.标记, 到文本 (.取表项数值 (.))) ' 记录着数据库的对应ID
            DLL文本转表格 (高级表格, 高级表格.)
            _高表大小 (高级表格)
            赋值 (.顶边, 相加 (.高度, 5))
            赋值 (高级表格., 相加 (.顶边, .高度, 4))
            赋值 (.可视, 真)
            
        .如果结束
        局部_记录集.关闭记录集 ()
    .否则
        信息框 (“没有找到ID值”, 16, )
    .如果结束
    
.判断 (等于 (功能, “关闭”)) ' ----------------------------------------------关闭-----------------------------------------------
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.字体大小, 假)
    .如果真 (是否已创建 (高级表格))
        高级表格.销毁 ()
    .如果真结束
    .如果真 (是否已创建 (图形按钮))
        图形按钮.销毁 ()
    .如果真结束
    赋值 (程序集_是否可编辑, 假)
    返回 ()
.判断 (等于 (功能, “修改大小”)) ' ----------------------------------------------修改大小-----------------------------------------------
    
    .如果真 (是否已创建 (高级表格))
        .计次循环首 (5, Index)
            赋值 (局部_临时值, 相加 (局部_临时值, 高级表格.未知支持库函数_44 (相减 (Index, 1))))
        .计次循环尾 ()
        赋值 (高级表格., 相加 (局部_临时值, 5))
        赋值 (局部_临时值, 0)
        .计次循环首 (高级表格., Index)
            赋值 (局部_临时值, 相加 (局部_临时值, 高级表格.未知支持库函数_43 (相减 (Index, 1))))
        .计次循环尾 ()
        赋值 (高级表格., 相加 (局部_临时值, 20))
        .如果真 (大于 (高级表格., 相减 (.高度, .高度, 5)))
            赋值 (高级表格., 相减 (.高度, .高度, 5))
        .如果真结束
        .如果真 (大于 (高级表格., 相减 (.宽度, 5)))
            赋值 (高级表格., 相减 (.宽度, 5))
        .如果真结束
        
    .如果真结束
    .如果真 (是否已创建 (图形按钮))
        图形按钮.移动 (相减 (.左边, 28), , , )
    .如果真结束
    5.移动 (相加 (.高度, 5), 相减 (.宽度, 10), 相减 (.高度, .高度, 10))
    2.置列宽 (相减 (.倾斜, 240))
    
    返回 ()
.判断 (等于 (功能, “添加确认”)) ' ----------------------------------------------添加确认-----------------------------------------------
    .如果真 (等于 (是否已创建 (图形按钮), 假))
        复制窗口组件 (图形按钮)
        图形按钮.置父窗口 ()
        赋值 (图形按钮.正常图片, #确认)
        赋值 (图形按钮.点燃图片, #确认点燃)
        赋值 (图形按钮.可视, 真)
        赋值 (图形按钮.标记, “数据库操作”)
    .如果真结束
    图形按钮.移动 (相减 (.左边, 28), , , )
.判断 (等于 (功能, “删除确认”)) ' ----------------------------------------------删除确认-----------------------------------------------
    .如果真 (是否已创建 (图形按钮))
        图形按钮.销毁 ()
    .如果真结束
    
.默认
    返回 ()
.判断结束



_正常化 ()
赋值 (.可视, 真)

.子程序 _图形按钮_最小化_被单击, 空白型, , 
赋值 (.高度, .高度)

.子程序 _图形按钮_最大化_被单击, 空白型, , 
.如果 (等于 (.标记, “最大化”)) ' 标记是记录着当前是最大化还是正常状态..
    _正常化 ()
    赋值 (.标记, “正常”)
.否则
    _最大化 ()
    赋值 (.标记, “最大化”)
.如果结束


.子程序 _最大化, 空白型, , 
0.移动 (0, 取用户区宽度 (), 相减 (取用户区高度 (), .)) ' 最大化
赋值 (.点燃图片, #正常点燃)
赋值 (.正常图片, #正常)
_按钮初始化 ()

.子程序 _正常化, 空白型, , 
104.移动 (88, 696, 392)
赋值 (.点燃图片, #最大化点燃)
赋值 (.正常图片, #最大化)
_按钮初始化 ()

.子程序 _按钮初始化, 空白型, , 
相减 (.宽度, .宽度, 1).移动 ()
相减 (.左边, .宽度, 5).移动 ()
相减 (.左边, .宽度, 5).移动 ()
赋值 (.宽度, .宽度)
_功能调用 (“修改大小”)

.子程序 _标签_功能标题栏_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

161.发送信息 (2, 0)

.子程序 _图形按钮_关闭_被单击, 空白型, , 
.局部变量 图形按钮, 图形按钮, , , 

赋值 (图形按钮, 取事件组件 ())
.如果 (等于 (图形按钮.标记, “关闭”))
    _功能调用 (“关闭”)
.否则
    _功能调用 (“数据库操作”)
.如果结束


.子程序 _标签_功能标题栏_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_图形按钮_最大化_被单击 ()

.子程序 _超级列表框1_当前表项被改变, 空白型, , 
_查看单击_被选择 ()

.子程序 _编辑框_英文API_内容被改变, 空白型, , 
.如果 (不等于 (.内容, 程序集_英文API))
    _功能调用 (“添加确认”)
.否则
    _功能调用 (“删除确认”)
.如果结束


.子程序 _编辑框_中文API_内容被改变, 空白型, , 
.如果 (不等于 (.内容, 程序集_中文API))
    _功能调用 (“添加确认”)
.否则
    _功能调用 (“删除确认”)
.如果结束


.子程序 _超级列表框2_右键单击表项, 空白型, , 
连续赋值 (等于 (., -1), .禁止, .禁止)
.如果真 (等于 (取表项数 (), 0))
    赋值 (.禁止, 真)
.如果真结束
弹出菜单 ()

.子程序 _新增一项_被选择, 空白型, , 
赋值 (.可视, 真)
赋值 (.标题, “新增”)

.子程序 _修改此项_被选择, 空白型, , 
赋值 (.可视, 真)
赋值 (.标题, “修改”)
赋值 (.标记, 到文本 (.))
赋值 (.内容, .取标题 (., 0))
赋值 (.内容, .取标题 (., 1))
赋值 (.内容, .取标题 (., 2))

.子程序 _删除此项_被选择, 空白型, , 
.删除表项 (.)

.子程序 _清空所有_被选择, 空白型, , 
全部删除 ()

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 局部_索引, 整数型, , , 

.如果 (等于 (.标题, “修改”))
    到整数 (.标记).置标题 (0, .内容)
    到整数 (.标记).置标题 (1, .内容)
    到整数 (.标记).置标题 (2, .内容)
.否则
    
    .如果真 (等于 (.内容, “”))
        信息框 (“请输入DLL声明内容”, 16, )
        返回 ()
    .如果真结束
    .如果真 (并且 (等于 (.内容, “”), 等于 (.内容, “”)))
        信息框 (“英文API或中文API..至少要输入一个!”, 16, )
        返回 ()
    .如果真结束
    赋值 (局部_索引, .插入表项 ())
    局部_索引.置标题 (0, .内容)
    局部_索引.置标题 (1, .内容)
    局部_索引.置标题 (2, .内容)
    
.如果结束
赋值 (.可视, 假)

.子程序 _按钮_取消_被单击, 空白型, , 
赋值 (.可视, 假)

.子程序 _修改英文API_被选择, 空白型, , 
.局部变量 局部_临时文本, 文本型, , , 

.如果真 (输入框 (“请修改为对应的英文API”, , .取标题 (., 0), 局部_临时文本, ))
    .如果 (相加 (“update API set [EAPI]=”, _SQL文本格式化 (局部_临时文本), “ where [ID]=”, 到文本 (.取表项数值 (.))).执行 ())
        信息框 (“修改成功”, 0, )
    .否则
        信息框 (“修改失败”, 0, )
    .如果结束
    未知函数_67175356 ()
.如果真结束


.子程序 _修改中文API_被选择, 空白型, , 
.局部变量 局部_临时文本, 文本型, , , 

.如果真 (输入框 (“请修改为对应的中文API”, , .取标题 (., 1), 局部_临时文本, ))
    .如果 (相加 (“update API set [CAPI]=”, _SQL文本格式化 (局部_临时文本), “ where [ID]=”, 到文本 (.取表项数值 (.))).执行 ())
        信息框 (“修改成功”, 0, )
    .否则
        信息框 (“修改失败”, 0, )
    .如果结束
    未知函数_67175362 ()
.如果真结束


.子程序 _按钮2_被单击, 空白型, , 把中文API和英文API一样的中文API内容清空!
.局部变量 局部_计次, 整数型, , , 
.局部变量 局部_英文API, 文本型, , , 
.局部变量 局部_中文API, 文本型, , , 

.计次循环首 (取表项数 (), 局部_计次)
    赋值 (局部_英文API, 相减 (局部_计次, 1).取标题 (0))
    赋值 (局部_中文API, 相减 (局部_计次, 1).取标题 (1))
    .如果真 (或者 (等于 (局部_英文API, 局部_中文API), 等于 (局部_英文API, 相加 (局部_中文API, “A”)), 等于 (相加 (“API”, 局部_英文API), 局部_中文API), 等于 (相加 (“API”, 局部_英文API), 相加 (局部_中文API, “A”))))
        相加 (“update API set [CAPI]=”, _SQL文本格式化 (“”), “ where [ID]=”, 到文本 (相减 (局部_计次, 1).取表项数值 ())).执行 ()
    .如果真结束
    
.计次循环尾 ()
_初始化数据 ()
信息框 (“完毕”, 0, )



 ' 不属于任何一个程序集、类模块的函数：
