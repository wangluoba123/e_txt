 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 螺旋数组
 ' 程序描述：　　从键盘上任意输入一个1－10之间的整数N，就产生一个NXN阶的方阵，并且此方阵是一个螺旋方阵。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 280
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 螺旋方阵”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一





.窗口程序集 启动窗口程序集, , , 

.程序集变量 数字数组, 整数型, , "10,10", 存放方阵中的所有数字
.程序集变量 循环变量, 整数型, , , 
.程序集变量 下起始, 整数型, , , 向下填充的起始位置
.程序集变量 右起始, 整数型, , , 向右填充的起始位置
.程序集变量 上起始, 整数型, , , 向上填充的起始位置
.程序集变量 左起始, 整数型, , , 向左填充的起始位置
.程序集变量 填充数字, 整数型, , , 被填充的数字
.程序集变量 最大值, 整数型, , , 方阵中的最大数字
.程序集变量 阶数, 整数型, , , 方阵的阶数
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：循环
 ' 问题：螺旋方阵
 ' 问题描述：
 ' 从键盘上任意输入一个1－10之间的整数N，就产生一个NXN阶的方阵，并且此方阵是一个螺旋方阵。
 ' 问题分析：
 ' 求一个螺旋方阵，其实就是分别往下、往右、往上、往左四个方向来依次填充数字，那么就是想办法判定什么时候向什么方向填充数字。
 ' 本算法采用四个子程序来分别控制往下、往右、往上、往左四个方向的填充，设四个变量，用于标识四个方向每次填充的起始位置，每填充一个方向后起始位置加1。
 ' 再用一个二维数组存放要填充的数字先将这个数组数据全部置为0，在每个方向填充时，每填充一个数字，就将这个数字存放到数组中相应的位置，通过判断要填充的位置所对应的数组数据是否为0，来确定是否终止该方向的数字填充。
 ' 通过上面规律可以推导出结果。
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
全部删除 ()
 ' 接收方阵的阶数
赋值 (阶数, 到数值 (.内容))
 ' 判断阶数的范围
.如果真 (或者 (小于 (阶数, 1), 大于 (阶数, 10)))
    信息框 (“输入的值只能在1－10之间！”, 0, )
    返回 ()
.如果真结束
 ' 初始化数字数组，初始为0
.变量循环首 (1, 阶数, 1, 下起始)
    .变量循环首 (1, 阶数, 1, 右起始)
        赋值 (数字数组 [下起始] [右起始], 0)
    .变量循环尾 ()
.变量循环尾 ()
 ' 设定要填充的第一个数字为１
赋值 (填充数字, 1)
 ' 设定四个方向填充时的初始位置值　
赋值 (下起始, 1)
赋值 (左起始, 1)
赋值 (右起始, 阶数)
赋值 (上起始, 阶数)
 ' 方阵中的最大数字
赋值 (最大值, 相乘 (阶数, 阶数))
 ' 开始填充
.判断循环首 (小于或等于 (填充数字, 最大值))
    向下填充 ()
    向右填充 ()
    向上填充 ()
    向左填充 ()
.判断循环尾 ()
 ' 显示结果方阵
.变量循环首 (1, 阶数, 1, 下起始)
    下起始.插入表项 ()
    .变量循环首 (1, 阶数, 1, 右起始)
        相减 (下起始, 1).置标题 (相减 (右起始, 1), 到文本 (数字数组 [下起始] [右起始]))
    .变量循环尾 ()
.变量循环尾 ()


.子程序 向下填充, 空白型, , 向下填充方阵中的数字
 ' 向下填充
.变量循环首 (1, 阶数, 1, 循环变量)
     ' 向方阵中填充数字
    .如果真 (等于 (数字数组 [循环变量] [下起始], 0))
        赋值 (数字数组 [循环变量] [下起始], 填充数字)
         ' 下一个要填充的数字
        赋值 (填充数字, 相加 (填充数字, 1))
    .如果真结束
    
.变量循环尾 ()
 ' 向下填充的下一个起始位置
赋值 (下起始, 相加 (下起始, 1))

.子程序 向右填充, 空白型, , 向右填充方阵中的数字
 ' 向右填充
.变量循环首 (1, 阶数, 1, 循环变量)
    .如果真 (等于 (数字数组 [右起始] [循环变量], 0))
         ' 向方阵中填充数字
        赋值 (数字数组 [右起始] [循环变量], 填充数字)
         ' 下一个要填充的数字
        赋值 (填充数字, 相加 (填充数字, 1))
    .如果真结束
    
.变量循环尾 ()
 ' 向右填充的下一个起始位置
赋值 (右起始, 相减 (右起始, 1))

.子程序 向上填充, 空白型, , 向上填充方阵中的数字
 ' 向上填充
.变量循环首 (阶数, 1, -1, 循环变量)
    .如果真 (等于 (数字数组 [循环变量] [上起始], 0))
         ' 向方阵中填充数字
        赋值 (数字数组 [循环变量] [上起始], 填充数字)
         ' 下一个要填充的数字
        赋值 (填充数字, 相加 (填充数字, 1))
    .如果真结束
    
.变量循环尾 ()
 ' 向上填充的下一个起始位置
赋值 (上起始, 相减 (上起始, 1))

.子程序 向左填充, 空白型, , 向左填充方阵中的数字
 ' 向左填充
.变量循环首 (阶数, 1, -1, 循环变量)
    .如果真 (等于 (数字数组 [左起始] [循环变量], 0))
         ' 向方阵中填充数字
        赋值 (数字数组 [左起始] [循环变量], 填充数字)
         ' 下一个要填充的数字
        赋值 (填充数字, 相加 (填充数字, 1))
    .如果真结束
    
.变量循环尾 ()
 ' 向左填充的下一个起始位置
赋值 (左起始, 相加 (左起始, 1))



 ' 不属于任何一个程序集、类模块的函数：
