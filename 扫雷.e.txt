 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 500
    高度 = 474
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “扫雷戒指版”
    帮助文件名 = “”

窗口 自定义雷区窗口
    左边 = 50
    顶边 = 50
    宽度 = 281
    高度 = 147
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “自定义雷区”
    帮助文件名 = “”

窗口 扫雷英雄榜窗口
    左边 = 50
    顶边 = 50
    宽度 = 366
    高度 = 193
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “扫雷英雄榜”
    帮助文件名 = “”

窗口 破记录窗口
    左边 = 50
    顶边 = 50
    宽度 = 227
    高度 = 185
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “破记录：”
    帮助文件名 = “”



.声音 时间音乐, " ' 已保存到：D:\易语言学习\Data\扫雷.e\时间音乐", , 
.声音 胜利音乐, " ' 已保存到：D:\易语言学习\Data\扫雷.e\胜利音乐", , 
.声音 失败音乐, " ' 已保存到：D:\易语言学习\Data\扫雷.e\失败音乐", , 
.常量 原始, "0", , 
.常量 有雷, "-1", , 
.常量 空格, "2", , 
.常量 问号, "3", , 
.常量 标记, "4", , 
.常量 数字, "5", , 
.常量 雷, "6", , 
.常量 雷叉, "7", , 
.常量 已加入, "1", , 
.常量 原始图片, "0", , 
.常量 空图片, "240", , 
.常量 标记图片, "16", , 
.常量 问号图片, "32", , 
.常量 问号按下图片, "96", , 
.常量 雷红图片, "48", , 
.常量 雷叉图片, "64", , 
.常量 雷图片, "80", , 
.常量 , , , 
.常量 数字1, "230", , 
.常量 数字2, "204", , 
.常量 数字3, "184", , 
.常量 数字4, "161", , 
.常量 数字5, "138", , 
.常量 数字6, "115", , 
.常量 数字7, "92", , 
.常量 数字8, "69", , 
.常量 数字9, "46", , 
.常量 数字0, "253", , 
.常量 数字空, "23", , 
.常量 数字横杠, "0", , 
.常量 , , , 
.常量 微笑按下, "0", , 
.常量 墨镜, "24", , 
.常量 哭泣, "48", , 
.常量 张嘴, "72", , 
.常量 微笑, "96", , 
.常量 , , , 
.常量 setupwrite, "“[main]
level=0
;0初级，1中级，2高级，3自定义
width=9
height=9
num=10
;自定义使用
mark=1
color=1
sound=0
name=匿名
time=999
;1有,0无
mm=0
;毫秒,1有,0无
hour=0
;0秒,1时分秒

[0]
name=匿名
time=999

[1]
name=匿名
time=999

[2]
name=匿名
time=999

[3]
name=匿名
time=999”", , 
.常量 setup, "“setup.ini”", , 
.常量 main, "“main”", , 
.常量 level, "“level”", , 
.常量 width, "“width”", , 
.常量 height, "“height”", , 
.常量 num, "“num”", , 
.常量 mark, "“mark”", , 
.常量 color, "“color”", , 
.常量 sound, "“sound”", , 
.常量 mm, "“mm”", , 
.常量 hour, "“hour”", , 
.常量 name0, "“name”", , 
.常量 time0, "“time”", , 
.常量 name1, "“name”", , 
.常量 time1, "“time”", , 
.常量 name2, "“name”", , 
.常量 time2, "“time”", , 
.常量 name3, "“name”", , 
.常量 time3, "“time”", , 
.图片 有颜色雷图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\有颜色雷图片", , 
.图片 无颜色雷图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\无颜色雷图片", , 
.图片 有颜色时间图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\有颜色时间图片", , 
.图片 无颜色时间图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\无颜色时间图片", , 
.图片 有颜色开始图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\有颜色开始图片", , 
.图片 无颜色开始图片, " ' 已保存到：D:\易语言学习\Data\扫雷.e\无颜色开始图片", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库




.全局变量 运行目录, 文本型, , , 
.全局变量 level, 整数型, , , 
.全局变量 width, 整数型, , , 
.全局变量 height, 整数型, , , 
.全局变量 num, 整数型, , , 
.全局变量 mark, 整数型, , , 
.全局变量 color, 整数型, , , 
.全局变量 sound, 整数型, , , 
.全局变量 mm, 整数型, , , 毫秒
.全局变量 hour, 整数型, , , 时分秒
.全局变量 name0, 文本型, , , 
.全局变量 time0, 双精度小数型, , , 
.全局变量 name1, 文本型, , , 
.全局变量 time1, 双精度小数型, , , 
.全局变量 name2, 文本型, , , 
.全局变量 time2, 双精度小数型, , , 
.全局变量 name3, 文本型, , , 
.全局变量 time3, 双精度小数型, , , 
.全局变量 时分秒类型, 逻辑型, , , 英雄榜内类型 假:秒 真:时分秒
.全局变量 匿名全局变量_667, 空白型, , , 
.全局变量 格子最大宽度, 整数型, , , 
.全局变量 格子最大高度, 整数型, , , 

.DLL命令 WindowFromPoint, 空白型, "", "WindowFromPoint", , 
    .参数 xPoint, 整数型, , 
    .参数 yPoint, 整数型, , 

.DLL命令 SetCapture, 空白型, "", "SetCapture", , 
    .参数 hwnd, 整数型, , 

.DLL命令 ShellAbout, 空白型, "", "ShellAboutA", , 
    .参数 hwnd, 整数型, , 
    .参数 szApp, 文本型, , 
    .参数 szOtherStuff, 文本型, , 
    .参数 hIcon, 整数型, , 

.DLL命令 LoadIcon, 整数型, "", "LoadIconA", , 
    .参数 hInstance, 整数型, , 
    .参数 lpIconName, 整数型, , 

.DLL命令 GetModuleHandle, 整数型, "", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 ReleaseCapture, 空白型, "", "ReleaseCapture", , 

.窗口程序集 启动窗口程序集, , , 

.程序集变量 左键是否按下, 逻辑型, , , 
.程序集变量 右键是否按下, 逻辑型, , , 
.程序集变量 是否双击, 逻辑型, , , 
.程序集变量 是否开始, 逻辑型, , , 
.程序集变量 扫雷数组, 整数型, , "0", 0:原始，1:已加入，2:空格，3:问号，4:标记，5:数字，6:雷，7:雷叉
.程序集变量 真实雷数组, 整数型, , "0", 0为空格，-1为有雷，其他为数字
.程序集变量 上一次位置组, 整数型, , "2", 
.程序集变量 当前格子位置, 整数型, , "2", [横][纵]
.程序集变量 格子宽度, 整数型, , , 数量
.程序集变量 格子高度, 整数型, , , 数量
.程序集变量 雷数量, 整数型, , , 
.程序集变量 数字图片, 整数型, , "8", 
.程序集变量 时间数字图片, 整数型, , "10", 0为第一个成员
.程序集变量 显示雷数量, 整数型, , , 显示在画板上的数量
.程序集变量 实际雷数量, 整数型, , , 为0表示完全标记正确
.程序集变量 空格数字数量, 整数型, , , 已经出现的空格或者数字数量
.程序集变量 记时, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 边框宽度, 整数型, , , 
.局部变量 边框高度, 整数型, , , 

赋值 (运行目录, 取运行目录 ())
.如果真 (不等于 (取文本右边 (运行目录, 1), “\”))
    赋值 (运行目录, 相加 (运行目录, “\”))
.如果真结束
.如果真 (等于 (文件是否存在 (相加 (运行目录, #setup)), 假))
    写到文件 (相加 (运行目录, #setup), 到字节集 (#setupwrite))
.如果真结束
读取配置项目 ()
赋值 (边框宽度, 相减 (_启动窗口., _启动窗口.取用户区宽度 ()))
赋值 (边框高度, 相减 (_启动窗口., _启动窗口.取用户区高度 ()))
赋值 (格子最大宽度, 取整 (相除 (相减 (取屏幕宽度 (), 边框宽度, 4), 16)))
赋值 (格子最大高度, 取整 (相除 (相减 (取屏幕高度 (), 边框高度, 40, 4), 16)))
.如果真 (大于 (格子宽度, 格子最大宽度))
    赋值 (格子宽度, 格子最大宽度)
.如果真结束
.如果真 (大于 (格子高度, 格子最大高度))
    赋值 (格子高度, 格子最大高度)
.如果真结束

.判断开始 (等于 (level, 0))
    _初级_被选择 ()
.判断 (等于 (level, 1))
    _中级_被选择 ()
.判断 (等于 (level, 2))
    _高级_被选择 ()
.默认
    设置级别菜单 ()
    设置级别 (格子宽度, 格子高度)
.判断结束
赋值 (., 选择 (等于 (mm, 0), 假, 真))
.判断开始 (等于 (hour, 0))
    赋值 (., 真)
.默认
    赋值 (., 真)
.判断结束

赋值 (., 选择 (等于 (mark, 1), 真, 假))
赋值 (., 选择 (等于 (color, 1), 真, 假))
赋值 (., 选择 (等于 (sound, 1), 真, 假))
转换颜色图片 (color)
画笑脸图片 (#微笑)

.计次循环首 (8, i)
    赋值 (数字图片 [相加 (相减 (8, i), 1)], 相加 (96, 相乘 (i, 16)))
.计次循环尾 ()
.计次循环首 (9, i)
    赋值 (时间数字图片 [相加 (相减 (9, i), 2)], 相加 (23, 相乘 (i, 23)))
.计次循环尾 ()
赋值 (时间数字图片 [1], 253)

设置级别 (格子宽度, 格子高度)
_按钮1_被单击 ()

.子程序 _按钮1_被单击, 空白型, , 
画格子线 (格子宽度, 格子高度)
0.复制 (0, 取用户区宽度 (), 取用户区高度 (), , 0, 0, )
初始化雷数 (格子宽度, 格子高度, 雷数量)
赋值 (显示雷数量, 雷数量)
赋值 (空格数字数量, 0)
画雷数 (显示雷数量)
画板初始化 (格子宽度, 格子高度)
画笑脸图片 (#微笑)
设置时间菜单 ()
赋值 (记时, 0)
连续赋值 (假, 左键是否按下, 右键是否按下, 是否双击)
赋值 (., 100)
赋值 (是否开始, 真)

.子程序 _画板2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 当前标记, 整数型, , , 
.局部变量 图片资源, 整数型, , , 

.如果真 (等于 (是否开始, 真))
    赋值 (左键是否按下, 真)
    SetCapture (取窗口句柄 ())
    画笑脸图片 (#张嘴)
    .如果真 (等于 (转换位置 (横向位置, 纵向位置, 当前格子位置), 真))
        赋值 (当前标记, 扫雷数组 [当前格子位置] [1] [当前格子位置] [2])
        .判断开始 (等于 (右键是否按下, 真))
            赋值 (是否双击, 真)
            画8个图片 (当前格子位置, 格子宽度, 格子高度, 扫雷数组, 假)
            .如果真 (并且 (不等于 (当前标记, #标记), 不等于 (当前标记, #数字)))
                赋值 (图片资源, 判断画图片 (当前标记, 假))
                .如果真 (不等于 (图片资源, -1))
                    画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                .如果真结束
                
            .如果真结束
            
        .默认
            .如果真 (并且 (不等于 (当前标记, #标记), 不等于 (当前标记, #数字)))
                赋值 (图片资源, 判断画图片 (当前标记, 假))
                .如果真 (不等于 (图片资源, -1))
                    画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                .如果真结束
                
            .如果真结束
            
        .判断结束
        
    .如果真结束
    
.如果真结束


.子程序 _画板2_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 当前标记, 整数型, , , 

.如果真 (等于 (是否开始, 真))
    赋值 (右键是否按下, 真)
    .判断开始 (等于 (左键是否按下, 真))
        赋值 (是否双击, 真)
        _画板2_鼠标左键被按下 (横向位置, 纵向位置, 功能键状态)
    .默认
        .如果真 (等于 (转换位置 (横向位置, 纵向位置, 当前格子位置), 真))
            赋值 (当前标记, 扫雷数组 [当前格子位置] [1] [当前格子位置] [2])
            .如果真 (并且 (不等于 (当前标记, #空格), 不等于 (当前标记, #数字)))
                .判断开始 (等于 (当前标记, #原始))
                    画雷图片 (#标记图片, 当前格子位置 [1], 当前格子位置 [2])
                    赋值 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #标记)
                    赋值 (显示雷数量, 相减 (显示雷数量, 1))
                .判断 (等于 (当前标记, #标记))
                    .如果 (等于 (mark, 1))
                        画雷图片 (#问号图片, 当前格子位置 [1], 当前格子位置 [2])
                        赋值 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #问号)
                    .否则
                        画雷图片 (#原始, 当前格子位置 [1], 当前格子位置 [2])
                        赋值 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #原始)
                    .如果结束
                    赋值 (显示雷数量, 相加 (显示雷数量, 1))
                .判断 (等于 (当前标记, #问号))
                    画雷图片 (#原始图片, 当前格子位置 [1], 当前格子位置 [2])
                    赋值 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #原始)
                .默认
                    
                .判断结束
                画雷数 (显示雷数量)
                .如果真 (并且 (等于 (实际雷数量, 0), 等于 (相加 (空格数字数量, 实际雷数量), 相乘 (格子宽度, 格子高度)))) ' 完全通过
                    通过 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .判断结束
    
.如果真结束


.子程序 _画板2_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 图片资源, 整数型, , , 

.如果真 (并且 (等于 (左键是否按下, 真), 等于 (是否开始, 真)))
    .如果真 (或者 (不等于 (相乘 (整除 (上一次位置组 [1], 16), 16), 相乘 (整除 (横向位置, 16), 16)), 不等于 (相乘 (整除 (上一次位置组 [2], 16), 16), 相乘 (整除 (纵向位置, 16), 16)))) ' 如果鼠标还是在同一格子，不需要画图片
        .如果真 (等于 (转换位置 (上一次位置组 [1], 上一次位置组 [2], 上一次位置组), 真))
            .判断开始 (等于 (右键是否按下, 真))
                画8个图片 (上一次位置组, 格子宽度, 格子高度, 扫雷数组, 真)
                .如果真 (并且 (不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #标记), 不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #空格), 不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #数字))) ' 判断是否需要画图片
                    赋值 (图片资源, 判断画图片 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], 真))
                    .如果真 (不等于 (图片资源, -1))
                        画雷图片 (图片资源, 上一次位置组 [1], 上一次位置组 [2])
                    .如果真结束
                    
                .如果真结束
                
            .默认
                .如果真 (并且 (不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #标记), 不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #空格), 不等于 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], #数字))) ' 判断是否需要画图片
                    赋值 (图片资源, 判断画图片 (扫雷数组 [上一次位置组] [1] [上一次位置组] [2], 真))
                    .如果真 (不等于 (图片资源, -1))
                        画雷图片 (图片资源, 上一次位置组 [1], 上一次位置组 [2])
                    .如果真结束
                    
                .如果真结束
                
            .判断结束
            
        .如果真结束
        
        .如果真 (等于 (转换位置 (横向位置, 纵向位置, 当前格子位置), 真))
            .判断开始 (等于 (右键是否按下, 真))
                画8个图片 (当前格子位置, 格子宽度, 格子高度, 扫雷数组, 假)
                .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
                    赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], 假))
                    .如果真 (不等于 (图片资源, -1))
                        画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                    .如果真结束
                    
                .如果真结束
                
            .默认
                .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
                    赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], 假))
                    .如果真 (不等于 (图片资源, -1))
                        画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                    .如果真结束
                    
                .如果真结束
                
            .判断结束
            
        .如果真结束
        赋值 (上一次位置组 [1], 横向位置)
        赋值 (上一次位置组 [2], 纵向位置)
    .如果真结束
    
.如果真结束


.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 结果数组, 整数型, , "0", 

赋值 (记时, 相加 (记时, 1))
.如果真 (并且 (等于 (求余数 (记时, 10), 0), 等于 (sound, 1)))
    播放音乐 (#时间音乐, 假)
.如果真结束
显示时间 (记时, ., .)

.子程序 _画板2_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 当前标记, 整数型, , , 
.局部变量 雷标记, 整数型, , , 
.局部变量 图片资源, 整数型, , , 
.局部变量 格子数组1, 整数型, , "0", 
.局部变量 格子数组2, 整数型, , "0", 

.如果真 (并且 (等于 (是否开始, 真), 等于 (左键是否按下, 真)))
    ReleaseCapture ()
    _画板2_鼠标位置被移动 (横向位置, 纵向位置, 功能键状态)
    .如果真 (等于 (转换位置 (横向位置, 纵向位置, 当前格子位置), 真))
        赋值 (当前标记, 扫雷数组 [当前格子位置] [1] [当前格子位置] [2])
        赋值 (雷标记, 真实雷数组 [当前格子位置] [1] [当前格子位置] [2])
        .如果 (等于 (右键是否按下, 真))
            .如果 (等于 (当前标记, #数字))
                双击判断图片 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
            .否则
                赋值 (图片资源, 判断画图片 (当前标记, 真))
                .如果真 (不等于 (图片资源, -1))
                    画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                .如果真结束
                画8个图片 (当前格子位置, 格子宽度, 格子高度, 扫雷数组, 真)
                画笑脸图片 (#微笑)
            .如果结束
            
        .否则
            .如果真 (并且 (不等于 (当前标记, #标记), 不等于 (当前标记, #空格), 不等于 (当前标记, #数字))) ' 可以按下
                .判断开始 (等于 (雷标记, #有雷)) ' 有雷，结束
                    画所有雷 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
                    画雷图片 (#雷红图片, 当前格子位置 [1], 当前格子位置 [2])
                    赋值 (扫雷数组 [当前格子位置] [1] [当前格子位置] [2], #雷叉)
                    赋值 (是否开始, 假)
                .默认
                    加入成员 (格子数组1, 当前格子位置 [1])
                    加入成员 (格子数组2, 当前格子位置 [2])
                    单击判断图片 (格子宽度, 格子高度, 扫雷数组, 真实雷数组, 格子数组1, 格子数组2)
                .判断结束
                
            .如果真结束
            
        .如果结束
        .如果真 (并且 (等于 (实际雷数量, 0), 等于 (相加 (空格数字数量, 雷数量), 相乘 (格子宽度, 格子高度)))) ' 完全通过
            通过 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
        .如果真结束
        
    .如果真结束
    赋值 (左键是否按下, 假)
    赋值 (是否双击, 假)
    .如果真 (等于 (是否开始, 真))
        画笑脸图片 (#微笑)
    .如果真结束
    
.如果真结束


.子程序 _画板2_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 当前标记, 整数型, , , 
.局部变量 图片资源, 整数型, , , 

.如果真 (等于 (是否开始, 真))
    ReleaseCapture ()
    .如果真 (等于 (转换位置 (横向位置, 纵向位置, 当前格子位置), 真))
        赋值 (当前标记, 扫雷数组 [当前格子位置] [1] [当前格子位置] [2])
        .如果真 (等于 (是否双击, 真))
            .如果 (等于 (当前标记, #数字))
                双击判断图片 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
            .否则
                赋值 (图片资源, 判断画图片 (当前标记, 真))
                .如果真 (不等于 (图片资源, -1))
                    画雷图片 (图片资源, 当前格子位置 [1], 当前格子位置 [2])
                .如果真结束
                画8个图片 (当前格子位置, 格子宽度, 格子高度, 扫雷数组, 真)
            .如果结束
            
        .如果真结束
        
    .如果真结束
    赋值 (右键是否按下, 假)
    赋值 (左键是否按下, 假)
    赋值 (是否双击, 假)
    .如果真 (等于 (是否开始, 真))
        画笑脸图片 (#微笑)
    .如果真结束
    
.如果真结束


.子程序 _开局_被选择, 空白型, , 
_按钮1_被单击 ()

.子程序 _初级_被选择, 空白型, , 
赋值 (格子宽度, 9)
赋值 (格子高度, 9)
赋值 (雷数量, 10)
设置级别 (格子宽度, 格子高度)
_按钮1_被单击 ()
设置级别菜单 ()
赋值 (level, 0)

.子程序 _中级_被选择, 空白型, , 
赋值 (格子宽度, 16)
赋值 (格子高度, 16)
赋值 (雷数量, 40)
设置级别 (格子宽度, 格子高度)
_按钮1_被单击 ()
设置级别菜单 ()
赋值 (level, 1)

.子程序 _高级_被选择, 空白型, , 
赋值 (格子宽度, 30)
赋值 (格子高度, 16)
赋值 (雷数量, 99)
设置级别 (格子宽度, 格子高度)
_按钮1_被单击 ()
设置级别菜单 ()
赋值 (level, 2)

.子程序 _自定义_被选择, 空白型, , 
设置级别菜单 ()
赋值 (level, 3)
载入 (自定义雷区窗口, , 真)

.子程序 __启动窗口_将被销毁, 空白型, , 
写入配置项目 ()

.子程序 _标记_被选择, 空白型, , 
赋值 (., 取反 (.))
赋值 (mark, 选择 (等于 (., 真), 1, 0))

.子程序 _颜色_被选择, 空白型, , 
赋值 (., 取反 (.))
赋值 (color, 选择 (等于 (., 真), 1, 0))
转换颜色图片 (color)

.子程序 _声音_被选择, 空白型, , 
赋值 (., 取反 (.))
赋值 (sound, 选择 (等于 (., 真), 1, 0))

.子程序 _扫雷英雄榜_被选择, 空白型, , 
载入 (扫雷英雄榜窗口, , 真)

.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _关于扫雷_被选择, 空白型, , 
ShellAbout (0, “扫雷戒指版”, “by 银戒指”, LoadIcon (GetModuleHandle (字符 (0)), 129))

.子程序 __启动窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (是否开始, 真))
    画笑脸图片 (#张嘴)
    _画板2_鼠标左键被按下 (相加 (., 32), 相加 (., 32), 0)
    赋值 (上一次位置组 [1], 相加 (., 32))
    赋值 (上一次位置组 [2], 相加 (., 32))
.如果真结束


.子程序 __启动窗口_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (是否开始, 真))
    画笑脸图片 (#微笑)
    _画板2_鼠标左键被放开 (相加 (., 32), 相加 (., 32), 0)
    赋值 (上一次位置组 [1], 相加 (., 32))
    赋值 (上一次位置组 [2], 相加 (., 32))
.如果真结束


.子程序 _时间画板_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _毫秒_被选择, 空白型, , 
赋值 (., 取反 (.))
设置时间菜单 ()

.子程序 _秒_被选择, 空白型, , 
赋值 (., 真)
赋值 (., 假)
设置时间菜单 ()

.子程序 _时分秒_被选择, 空白型, , 
赋值 (., 真)
赋值 (., 假)
设置时间菜单 ()

.子程序 __启动窗口_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (功能键状态, 相加 (#Ctrl键状态, #Shift键状态, #Alt键状态)))
    显示所有图片 (格子宽度, 格子高度, 扫雷数组, 真实雷数组)
.如果真结束


.程序集 功能程序集, , , 

.子程序 设置级别, 空白型, , 移动组件宽度高度
.参数 画板, 画板, 参考, 
.参数 格子宽度, 整数型, , 
.参数 格子高度, 整数型, , 

.局部变量 边框宽度, 整数型, , , 
.局部变量 边框高度, 整数型, , , 

赋值 (边框宽度, 相减 (_启动窗口., _启动窗口.取用户区宽度 ()))
赋值 (边框高度, 相减 (_启动窗口., _启动窗口.取用户区高度 ()))
赋值 (画板., 相加 (相乘 (格子宽度, 16), 4))
赋值 (画板., 相加 (相乘 (格子高度, 16), 4))
赋值 (_启动窗口.., 画板.)
赋值 (_启动窗口.., 画板.)
重定义数组 (_启动窗口., 假, _启动窗口., _启动窗口.)
重定义数组 (_启动窗口., 假, _启动窗口., _启动窗口.)
_启动窗口.移动 (相加 (画板., 边框宽度), 相加 (画板., 40, 边框高度))
赋值 (边框高度, 相减 (_启动窗口., _启动窗口.取用户区高度 ()))
赋值 (_启动窗口., 相加 (画板., 40, 边框高度))
_启动窗口.按钮1.左边 ＝ (_启动窗口.取用户区宽度 () － _启动窗口.按钮1.宽度) ÷ 2

.子程序 画板初始化, 空白型, , 重新画画板及雷数字
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 

.局部变量 图片号, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

.计次循环首 (行数量, i)
    .计次循环首 (列数量, j)
        _启动窗口.复制 (., 0, #原始图片, 16, 16, 画板, 相乘 (相减 (i, 1), 16), 相乘 (相减 (j, 1), 16), )
    .计次循环尾 ()
.计次循环尾 ()

.子程序 画格子线, 空白型, , 
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 

.局部变量 i, 整数型, , , 

.计次循环首 (相减 (行数量, 1), i)
    画板.画直线 (0, 相乘 (i, 16), 画板.取用户区宽度 (), 相乘 (i, 16))
.计次循环尾 ()
.计次循环首 (相减 (列数量, 1), i)
    画板.画直线 (相乘 (i, 16), 0, 相乘 (i, 16), 画板.取用户区高度 ())
.计次循环尾 ()

.子程序 取图片, 字节集, , 
.参数 源画板, 画板, , 
.参数 目的画板, 画板, , 
.参数 图片宽度, 整数型, , 
.参数 图片高度, 整数型, , 
.参数 纵向位置, 整数型, , 

源画板.复制 (0, 纵向位置, 图片宽度, 图片高度, 目的画板, 0, 0, )
返回 (目的画板.取图片 ())

.子程序 画雷图片, 空白型, , 
.参数 画板, 画板, , 
.参数 图片资源, 整数型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 

_启动窗口.复制 (., 0, 图片资源, 16, 16, 画板, 相乘 (相减 (横向位置, 1), 16), 相乘 (相减 (纵向位置, 1), 16), )

.子程序 画笑脸图片, 空白型, , 
.参数 按钮, 按钮, , 
.参数 图片资源, 整数型, , 

赋值 (按钮., 取图片 (_启动窗口., _启动窗口., 24, 24, 图片资源))

.子程序 画雷数图片, 空白型, , 
.参数 画板, 画板, , 
.参数 图片资源, 整数型, , 
.参数 复制位置, 整数型, , 1,2,3,4

_启动窗口.复制 (., 0, 图片资源, 13, 23, 画板, 相乘 (相减 (复制位置, 1), 13), 0, )

.子程序 画雷数, 空白型, , 画雷数画板
.参数 数量, 整数型, , 

.局部变量 结果数组, 整数型, , "1", 
.局部变量 i, 整数型, , , 

转换数字 (到文本 (数量), 结果数组, 4)
.计次循环首 (4, i)
    画雷数图片 (_启动窗口., 结果数组 [i], i)
.计次循环尾 ()

.子程序 转换位置, 逻辑型, , 把当前鼠标位置转换成格子位置
.参数 欲转换的横向位置, 整数型, , 
.参数 欲转换的纵向位置, 整数型, , 
.参数 转换后的格子组, 整数型, 参考 数组, 

.如果真 (并且 (小于或等于 (相加 (整除 (欲转换的横向位置, 16), 1), _启动窗口.), 小于或等于 (相加 (整除 (欲转换的纵向位置, 16), 1), _启动窗口.)))
    赋值 (转换后的格子组 [1], 相加 (整除 (欲转换的横向位置, 16), 1))
    赋值 (转换后的格子组 [2], 相加 (整除 (欲转换的纵向位置, 16), 1))
    返回 (真)
.如果真结束
返回 (假)

.子程序 初始化雷数, 空白型, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 雷数量, 整数型, , 

.局部变量 临时位置, 整数型, , "0", 
.局部变量 随机数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 当前格子位置, 整数型, , "2", 

重定义数组 (_启动窗口., 假, 行数量, 列数量)
重定义数组 (_启动窗口., 假, 行数量, 列数量)
重定义数组 (临时位置, 假, 行数量, 列数量)
.计次循环首 (相乘 (行数量, 列数量), i)
    赋值 (临时位置 [i], i)
.计次循环尾 ()
.计次循环首 (雷数量, i)
    置随机数种子 ()
    赋值 (随机数, 取随机数 (1, 取数组成员数 (临时位置)))
    转换数组位置 (临时位置 [随机数], 列数量, 当前格子位置 [1], 当前格子位置 [2])
    赋值 (_启动窗口. [当前格子位置] [1] [当前格子位置] [2], -1)
     ' 设置周围8个数字
    .如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 大于 (相减 (当前格子位置 [2], 1), 0), 不等于 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷))) ' 左上
        赋值 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 相加 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 1))
    .如果真结束
    .如果真 (并且 (大于 (相减 (当前格子位置 [2], 1), 0), 不等于 (_启动窗口. [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #有雷))) ' 上
        赋值 (_启动窗口. [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 相加 (_启动窗口. [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 1))
    .如果真结束
    .如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 大于 (相减 (当前格子位置 [2], 1), 0), 不等于 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷))) ' 右上
        赋值 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 相加 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 1))
    .如果真结束
    .如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 不等于 (_启动窗口. [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷))) ' 左
        赋值 (_启动窗口. [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 相加 (_启动窗口. [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 1))
    .如果真结束
    .如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 不等于 (_启动窗口. [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷))) ' 右
        赋值 (_启动窗口. [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 相加 (_启动窗口. [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 1))
    .如果真结束
    .如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量), 不等于 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷))) ' 左下
        赋值 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 相加 (_启动窗口. [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 1))
    .如果真结束
    .如果真 (并且 (小于或等于 (相加 (当前格子位置 [2], 1), 列数量), 不等于 (_启动窗口. [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #有雷))) ' 下
        赋值 (_启动窗口. [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 相加 (_启动窗口. [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 1))
    .如果真结束
    .如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量), 不等于 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷))) ' 右下
        赋值 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 相加 (_启动窗口. [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 1))
    .如果真结束
    删除成员 (临时位置, 随机数, 1)
.计次循环尾 ()

.子程序 转换数组位置, 空白型, , 将单维数组位置转换成2维位置
.参数 原位置, 整数型, , 
.参数 列数量, 整数型, , 
.参数 行位置, 整数型, 参考, 
.参数 列位置, 整数型, 参考, 

.如果 (等于 (求余数 (原位置, 列数量), 0))
    赋值 (行位置, 整除 (原位置, 列数量))
    赋值 (列位置, 列数量)
.否则
    赋值 (行位置, 相加 (整除 (原位置, 列数量), 1))
    赋值 (列位置, 求余数 (原位置, 列数量))
.如果结束


.子程序 判断画图片, 整数型, , 判断是否画哪张图片
.参数 当前标记, 整数型, , 
.参数 是否画上一次, 逻辑型, , 

.如果 (等于 (是否画上一次, 假))
    .判断开始 (或者 (等于 (当前标记, #原始), 等于 (当前标记, #有雷)))
        返回 (#空图片)
    .判断 (等于 (当前标记, #问号))
        返回 (#问号按下图片)
    .默认
        
    .判断结束
    
.否则
    .判断开始 (或者 (等于 (当前标记, #原始), 等于 (当前标记, #有雷)))
        返回 (#原始图片)
    .判断 (等于 (当前标记, #问号))
        返回 (#问号图片)
    .默认
        
    .判断结束
    
.如果结束
返回 (-1)

.子程序 重新画图, 空白型, , 改变颜色，重新画图
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 

.局部变量 图片数组, 整数型, , "8", 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (图片数组 [1], #原始图片) ' #原始=0
赋值 (图片数组 [3], #空图片) ' #空格=2
赋值 (图片数组 [4], #问号图片) ' #问号=3
赋值 (图片数组 [5], #标记图片) ' #标记=4
赋值 (图片数组 [7], #雷图片) ' #雷=6
赋值 (图片数组 [8], #雷叉图片) ' #雷叉=7

.判断开始 (等于 (_启动窗口., 假))
    .计次循环首 (行数量, i)
        .计次循环首 (列数量, j)
            .判断开始 (等于 (扫雷数组 [i] [j], #数字))
                画雷图片 (画板, _启动窗口. [真实雷数组] [i] [j], i, j)
            .判断 (并且 (大于 (扫雷数组 [i] [j], 0), 不等于 (扫雷数组 [i] [j], 2), 小于 (扫雷数组 [i] [j], 9)))
                画雷图片 (画板, 图片数组 [扫雷数组] [i] [j], i, j)
            .默认
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.默认
    .计次循环首 (行数量, i)
        .计次循环首 (列数量, j)
            .判断开始 (等于 (扫雷数组 [i] [j], #数字))
                画雷图片 (画板, _启动窗口. [真实雷数组] [i] [j], i, j)
            .默认
                画雷图片 (画板, 扫雷数组 [i] [j], i, j)
                
            .判断结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.判断结束
画雷数 (_启动窗口.)

.子程序 画所有雷, 空白型, , 死亡，画所有雷
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (_启动窗口.., 0)
.计次循环首 (行数量, i)
    .计次循环首 (列数量, j)
        .判断开始 (并且 (等于 (扫雷数组 [i] [j], #原始), 等于 (真实雷数组 [i] [j], #有雷)))
            画雷图片 (画板, #雷图片, i, j)
            赋值 (扫雷数组 [i] [j], #雷)
        .判断 (并且 (等于 (扫雷数组 [i] [j], #标记), 不等于 (真实雷数组 [i] [j], #有雷)))
            画雷图片 (画板, #雷叉图片, i, j)
            赋值 (扫雷数组 [i] [j], #雷叉)
        .判断 (并且 (等于 (扫雷数组 [i] [j], #问号), 等于 (真实雷数组 [i] [j], #有雷)))
            画雷图片 (画板, #雷图片, i, j)
            赋值 (扫雷数组 [i] [j], #雷)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()
画笑脸图片 (_启动窗口., #哭泣)
.如果真 (等于 (sound, 1))
    播放音乐 (#失败音乐, 假)
.如果真结束


.子程序 单击判断图片, 空白型, , 判断此图片以及周围图片，先加入格子数组，然后再调用此程序
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 
.参数 匿名参数_374, 整数型, 参考 数组, 
.参数 匿名参数_375, 整数型, 参考 数组, 

.局部变量 临时格子位置, 整数型, , "2", [横][纵]

 ' 判断鼠标按下的这一格
 ' 周围无雷，空格需要加入数组
.判断循环首 (大于 (取数组成员数 (匿名参数_374), 0))
    .判断开始 (等于 (真实雷数组 [匿名参数_374] [1] [匿名参数_375] [1], 0))
        .如果真 (不等于 (扫雷数组 [匿名参数_374] [1] [匿名参数_375] [1], #空格))
            赋值 (扫雷数组 [匿名参数_374] [1] [匿名参数_375] [1], #空格)
            赋值 (_启动窗口., 相加 (_启动窗口., 1))
            画雷图片 (画板, #空图片, 匿名参数_374 [1], 匿名参数_375 [1])
        .如果真结束
        
        .如果真 (大于 (相减 (匿名参数_375 [1], 1), 0)) ' 上
            .如果真 (或者 (等于 (扫雷数组 [匿名参数_374] [1] [相减 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [匿名参数_374] [1] [相减 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 匿名参数_374 [1])
                加入成员 (匿名参数_375, 相减 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [匿名参数_374] [1] [相减 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (大于 (相减 (匿名参数_374 [1], 1), 0)) ' 左
            .如果真 (或者 (等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #原始), 等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #问号)))
                加入成员 (匿名参数_374, 相减 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 匿名参数_375 [1])
                赋值 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (相加 (匿名参数_374 [1], 1), 行数量)) ' 右
            .如果真 (或者 (等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #原始), 等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #问号)))
                加入成员 (匿名参数_374, 相加 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 匿名参数_375 [1])
                赋值 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [匿名参数_375] [1], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (相加 (匿名参数_375 [1], 1), 列数量)) ' 下
            .如果真 (或者 (等于 (扫雷数组 [匿名参数_374] [1] [相加 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [匿名参数_374] [1] [相加 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 匿名参数_374 [1])
                加入成员 (匿名参数_375, 相加 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [匿名参数_374] [1] [相加 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (大于 (相减 (匿名参数_374 [1], 1), 0), 大于 (相减 (匿名参数_375 [1], 1), 0))) ' 左上
            .如果真 (或者 (等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 相减 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 相减 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (相加 (匿名参数_374 [1], 1), 行数量), 大于 (相减 (匿名参数_375 [1], 1), 0))) ' 右上
            .如果真 (或者 (等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 相加 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 相减 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相减 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (大于 (相减 (匿名参数_374 [1], 1), 0), 小于或等于 (相加 (匿名参数_375 [1], 1), 列数量))) ' 左下
            .如果真 (或者 (等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 相减 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 相加 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [相减 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (相加 (匿名参数_374 [1], 1), 行数量), 小于或等于 (相加 (匿名参数_375 [1], 1), 列数量))) ' 右下
            .如果真 (或者 (等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #原始), 等于 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #问号)))
                加入成员 (匿名参数_374, 相加 (匿名参数_374 [1], 1))
                加入成员 (匿名参数_375, 相加 (匿名参数_375 [1], 1))
                赋值 (扫雷数组 [相加 (匿名参数_374 [1], 1)] [相加 (匿名参数_375 [1], 1)], #已加入)
            .如果真结束
            
        .如果真结束
        
    .默认
        .如果真 (不等于 (真实雷数组 [匿名参数_374] [1] [匿名参数_375] [1], #有雷))
            .如果真 (不等于 (扫雷数组 [匿名参数_374] [1] [匿名参数_375] [1], #数字))
                赋值 (扫雷数组 [匿名参数_374] [1] [匿名参数_375] [1], #数字)
                赋值 (_启动窗口., 相加 (_启动窗口., 1))
                画雷图片 (画板, _启动窗口. [真实雷数组] [匿名参数_374] [1] [匿名参数_375] [1], 匿名参数_374 [1], 匿名参数_375 [1])
            .如果真结束
            
        .如果真结束
        
    .判断结束
    删除成员 (匿名参数_374, 1, 1)
    删除成员 (匿名参数_375, 1, 1)
.判断循环尾 ()

.子程序 双击判断图片, 空白型, , 判断此图片以及周围图片
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 

.局部变量 当前格子位置, 整数型, , "2", [横][纵]
.局部变量 临时格子位置, 整数型, , "2", [横][纵]
.局部变量 雷标记, 整数型, , , 
.局部变量 当前标记, 整数型, , , 
.局部变量 格子数组1, 整数型, , "0", 横向位置
.局部变量 格子数组2, 整数型, , "0", 纵向位置
.局部变量 数字数组1, 整数型, , "0", 
.局部变量 数字数组2, 整数型, , "0", 
.局部变量 匿名局部变量_314, 空白型, , , 
.局部变量 雷数量, 整数型, , , 
.局部变量 标记数量, 整数型, , , 
.局部变量 图片资源, 整数型, , , 
.局部变量 是否有错, 逻辑型, , , 有雷不标记 或 有标记无雷
.局部变量 i, 整数型, , , 

赋值 (当前格子位置, _启动窗口.)
赋值 (雷数量, 真实雷数组 [当前格子位置] [1] [当前格子位置] [2])
.如果真 (大于 (相减 (当前格子位置 [2], 1), 0)) ' 上
    .判断开始 (等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 当前格子位置 [1])
        加入成员 (格子数组2, 相减 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 当前格子位置 [1])
        加入成员 (数字数组2, 相减 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (大于 (相减 (当前格子位置 [1], 1), 0)) ' 左
    .判断开始 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 0), 或者 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #原始), 等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #问号))))
        加入成员 (格子数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 当前格子位置 [2])
    .判断 (并且 (大于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 0), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字)))
        加入成员 (数字数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 当前格子位置 [2])
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #原始), 等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷)), 并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量)) ' 右
    .判断开始 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 0), 或者 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #原始), 等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #问号))))
        加入成员 (格子数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 当前格子位置 [2])
    .判断 (并且 (大于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 0), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字)))
        加入成员 (数字数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 当前格子位置 [2])
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #原始), 等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷)), 并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [2], 1), 列数量)) ' 下
    .判断开始 (等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 当前格子位置 [1])
        加入成员 (格子数组2, 相加 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 当前格子位置 [1])
        加入成员 (数字数组2, 相加 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 左上
    .判断开始 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 相减 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 相减 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 右上
    .判断开始 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 相减 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 相减 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 左下
    .判断开始 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 相加 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 相减 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 相加 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 右下
    .判断开始 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记))
        赋值 (标记数量, 相加 (标记数量, 1))
    .判断 (并且 (等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 0), 或者 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #原始), 等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #问号))))
        加入成员 (格子数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (格子数组2, 相加 (当前格子位置 [2], 1))
    .判断 (并且 (大于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 0), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字)))
        加入成员 (数字数组1, 相加 (当前格子位置 [1], 1))
        加入成员 (数字数组2, 相加 (当前格子位置 [2], 1))
    .默认
        
    .判断结束
    .如果真 (或者 (并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #原始), 等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷)), 并且 (等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (真实雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #有雷))))
        赋值 (是否有错, 真)
    .如果真结束
    
.如果真结束
画8个图片 (画板, 当前格子位置, _启动窗口., _启动窗口., 扫雷数组, 真)
.判断开始 (等于 (标记数量, 雷数量))
    .如果真 (等于 (是否有错, 真))
        画所有雷 (画板, _启动窗口., _启动窗口., 扫雷数组, 真实雷数组)
        赋值 (_启动窗口., 假)
    .如果真结束
    .计次循环首 (取数组成员数 (数字数组1), i)
        .如果真 (不等于 (扫雷数组 [数字数组1] [i] [数字数组2] [i], #数字))
            赋值 (_启动窗口., 相加 (_启动窗口., 1))
            画雷图片 (画板, _启动窗口. [真实雷数组] [数字数组1] [i] [数字数组2] [i], 数字数组1 [i], 数字数组2 [i])
            赋值 (扫雷数组 [数字数组1] [i] [数字数组2] [i], #数字)
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (大于 (取数组成员数 (格子数组1), 0))
        单击判断图片 (画板, _启动窗口., _启动窗口., 扫雷数组, 真实雷数组, 格子数组1, 格子数组2)
    .如果真结束
    
.判断 (大于 (标记数量, 雷数量))
    画所有雷 (画板, _启动窗口.格子宽度, _启动窗口.格子高度, 扫雷数组, 真实雷数组)
    _启动窗口.是否开始 ＝ 假
.默认
    
.判断结束


.子程序 画8个图片, 空白型, , 左右键同时按下时画
.参数 画板, 画板, , 
.参数 当前格子位置, 整数型, 数组, 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 是否画上一次, 逻辑型, , 

.局部变量 图片资源, 整数型, , , 

.如果真 (大于 (相减 (当前格子位置 [2], 1), 0)) ' 上
    .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 当前格子位置 [1], 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (大于 (相减 (当前格子位置 [1], 1), 0)) ' 左
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 当前格子位置 [2])
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量)) ' 右
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 当前格子位置 [2])
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [2], 1), 列数量)) ' 下
    .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 当前格子位置 [1], 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 左上
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 右上
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 左下
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 右下
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 恢复8个图片, 空白型, , 左右键同时按下时画
.参数 画板, 画板, , 
.参数 当前格子位置, 整数型, 数组, 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 是否画上一次, 逻辑型, , 

.局部变量 图片资源, 整数型, , , 

.如果真 (大于 (相减 (当前格子位置 [2], 1), 0)) ' 上
    .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 当前格子位置 [1], 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (大于 (相减 (当前格子位置 [1], 1), 0)) ' 左
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [当前格子位置] [2], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 当前格子位置 [2])
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量)) ' 右
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [当前格子位置] [2], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 当前格子位置 [2])
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (小于或等于 (相加 (当前格子位置 [2], 1), 列数量)) ' 下
    .如果真 (并且 (不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [当前格子位置] [1] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 当前格子位置 [1], 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 左上
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 大于 (相减 (当前格子位置 [2], 1), 0))) ' 右上
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相减 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 相减 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (大于 (相减 (当前格子位置 [1], 1), 0), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 左下
    .如果真 (并且 (不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相减 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相减 (当前格子位置 [1], 1), 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (并且 (小于或等于 (相加 (当前格子位置 [1], 1), 行数量), 小于或等于 (相加 (当前格子位置 [2], 1), 列数量))) ' 右下
    .如果真 (并且 (不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #标记), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #空格), 不等于 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], #数字))) ' 判断是否需要画图片
        赋值 (图片资源, 判断画图片 (扫雷数组 [相加 (当前格子位置 [1], 1)] [相加 (当前格子位置 [2], 1)], 是否画上一次))
        .如果真 (不等于 (图片资源, -1))
            画雷图片 (画板, 图片资源, 相加 (当前格子位置 [1], 1), 相加 (当前格子位置 [2], 1))
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 显示所有图片, 空白型, , 
.参数 画板, 画板, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

.计次循环首 (行数量, i)
    .计次循环首 (列数量, j)
        .判断开始 (等于 (真实雷数组 [i] [j], #有雷))
            画雷图片 (画板, #雷图片, i, j)
        .判断 (大于 (真实雷数组 [i] [j], 0))
            画雷图片 (画板, _启动窗口. [真实雷数组] [i] [j], i, j)
        .默认
            
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

.子程序 转换颜色图片, 空白型, , 
.参数 是否有颜色, 整数型, , 

.判断开始 (等于 (是否有颜色, 1))
    赋值 (_启动窗口.., #有颜色雷图片)
    赋值 (_启动窗口.., #有颜色时间图片)
    赋值 (_启动窗口.., #有颜色开始图片)
    
.默认
    赋值 (_启动窗口.., #无颜色雷图片)
    赋值 (_启动窗口.., #无颜色时间图片)
    赋值 (_启动窗口.., #无颜色开始图片)
    
.判断结束
重新画图 (_启动窗口., _启动窗口., _启动窗口., _启动窗口., _启动窗口.)

.子程序 设置级别菜单, 空白型, , 
.参数 菜单, 菜单, , 

连续赋值 (假, _启动窗口.., _启动窗口.., _启动窗口.., _启动窗口..)
赋值 (菜单., 真)

.子程序 设置时间菜单, 空白型, , 
.局部变量 剩余宽度, 整数型, , , 
.局部变量 中间宽度, 整数型, , , 按钮和雷数画板之间的宽度

赋值 (中间宽度, 8)
赋值 (剩余宽度, 相减 (_启动窗口.取用户区宽度 (), 2, _启动窗口.., 中间宽度, 2, _启动窗口..))
赋值 (_启动窗口.., 假)
赋值 (_启动窗口.., 假)
赋值 (_启动窗口.., 假)
.判断开始 (小于 (剩余宽度, 67)) ' 只能是秒
    赋值 (_启动窗口.., 假)
    赋值 (_启动窗口.., 真)
    赋值 (_启动窗口.., 假)
    赋值 (_启动窗口.., 真)
    赋值 (_启动窗口.., 41)
.判断 (小于 (剩余宽度, 106)) ' 最多是秒+毫秒
    赋值 (_启动窗口.., 假)
    赋值 (_启动窗口.., 真)
    .判断开始 (等于 (_启动窗口.., 真))
        赋值 (_启动窗口.., 67)
    .默认
        赋值 (_启动窗口.., 41)
    .判断结束
    
.判断 (小于 (剩余宽度, 132)) ' 不能是时分秒+毫秒
    .判断开始 (等于 (_启动窗口.., 真))
        赋值 (_启动窗口.., 假)
        赋值 (_启动窗口.., 真)
        赋值 (_启动窗口.., 106)
    .判断 (等于 (_启动窗口.., 真))
        赋值 (_启动窗口.., 67)
    .默认
        赋值 (_启动窗口.., 41)
    .判断结束
    
.判断 (等于 (_启动窗口.., 真)) ' 时分秒
    .判断开始 (等于 (_启动窗口.., 真))
        赋值 (_启动窗口.., 132)
    .默认
        赋值 (_启动窗口.., 106)
    .判断结束
    
.判断 (等于 (_启动窗口.., 真)) ' 秒
    赋值 (_启动窗口.., 67)
.默认
    赋值 (_启动窗口.., 41)
.判断结束
赋值 (_启动窗口.., 相减 (_启动窗口.取用户区宽度 (), 2, _启动窗口..))
赋值 (_启动窗口.., 相加 (2, _启动窗口.., 相除 (相减 (_启动窗口.., 2, _启动窗口.., _启动窗口..), 2)))

.子程序 读取配置项目, 空白型, , 
赋值 (level, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #level, “0”)))
.如果真 (小于 (level, 0))
    赋值 (level, 0)
.如果真结束
.如果真 (大于 (level, 3))
    赋值 (level, 3)
.如果真结束
赋值 (width, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #width, “9”)))
赋值 (height, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #height, “9”)))
赋值 (num, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #num, “10”)))
赋值 (mark, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #mark, “1”)))
赋值 (color, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #color, “1”)))
赋值 (sound, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #sound, “0”)))
赋值 (mm, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #mm, “0”)))
赋值 (hour, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #hour, “0”)))
赋值 (name0, 读配置项 (相加 (运行目录, #setup), #main, #name0, “匿名”))
赋值 (time0, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #time0, “999”)))
赋值 (name1, 读配置项 (相加 (运行目录, #setup), #main, #name1, “匿名”))
赋值 (time1, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #time1, “999”)))
赋值 (name2, 读配置项 (相加 (运行目录, #setup), #main, #name2, “匿名”))
赋值 (time2, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #time2, “999”)))
赋值 (name3, 读配置项 (相加 (运行目录, #setup), #main, #name3, “匿名”))
赋值 (time3, 到数值 (读配置项 (相加 (运行目录, #setup), #main, #time3, “999”)))
赋值 (_启动窗口., width)
赋值 (_启动窗口., height)
赋值 (_启动窗口., num)

.子程序 写入配置项目, 空白型, , 
赋值 (width, _启动窗口.)
赋值 (height, _启动窗口.)
赋值 (num, _启动窗口.)
写配置项 (相加 (运行目录, #setup), #main, #level, 到文本 (level))
写配置项 (相加 (运行目录, #setup), #main, #width, 到文本 (width))
写配置项 (相加 (运行目录, #setup), #main, #height, 到文本 (height))
写配置项 (相加 (运行目录, #setup), #main, #num, 到文本 (num))
写配置项 (相加 (运行目录, #setup), #main, #mark, 到文本 (mark))
写配置项 (相加 (运行目录, #setup), #main, #color, 到文本 (color))
写配置项 (相加 (运行目录, #setup), #main, #sound, 到文本 (sound))
写配置项 (相加 (运行目录, #setup), #main, #name0, name0)
写配置项 (相加 (运行目录, #setup), #main, #time0, 到文本 (time0))
写配置项 (相加 (运行目录, #setup), #main, #name1, name1)
写配置项 (相加 (运行目录, #setup), #main, #time1, 到文本 (time1))
写配置项 (相加 (运行目录, #setup), #main, #name2, name2)
写配置项 (相加 (运行目录, #setup), #main, #time2, 到文本 (time2))
写配置项 (相加 (运行目录, #setup), #main, #name3, name3)
写配置项 (相加 (运行目录, #setup), #main, #time3, 到文本 (time3))

.子程序 转换数字, 空白型, , 转换雷数
.参数 欲转换的数字, 文本型, , 
.参数 结果数组, 整数型, 参考 数组, 从左边开始
.参数 数字数量, 整数型, , 

.局部变量 数字文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 数字, 整数型, , , 
.局部变量 单个文本, 文本型, , , 

赋值 (数字文本, 欲转换的数字)
赋值 (数字文本, 相加 (取重复文本 (相减 (数字数量, 取文本长度 (数字文本)), “0”), 数字文本))
重定义数组 (结果数组, 假, 数字数量)
.计次循环首 (数字数量, i)
    赋值 (单个文本, 取文本中间 (数字文本, i, 1))
    .如果 (等于 (单个文本, “-”))
        赋值 (结果数组 [i], #数字横杠)
    .否则
        赋值 (数字, 到数值 (单个文本))
        赋值 (结果数组 [i], _启动窗口. [相加 (数字, 1)])
    .如果结束
    
.计次循环尾 ()

.子程序 显示时间, 空白型, , 
.参数 时间, 双精度小数型, , 毫秒
.参数 毫秒, 逻辑型, , 
.参数 时分秒, 逻辑型, , 

.局部变量 结果数组, 整数型, , "0", 
.局部变量 时间日期, 日期时间型, , , 
.局部变量 秒时间, 整数型, , , 
.局部变量 时, 整数型, , , 
.局部变量 分, 整数型, , , 
.局部变量 秒, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (秒时间, 相除 (时间, 10))
.判断开始 (等于 (时分秒, 真))
    .如果真 (等于 (毫秒, 真))
        转换数字 (相加 (“-”, 取文本右边 (到文本 (时间), 1)), 结果数组, 2)
        画雷数图片 (_启动窗口., 结果数组 [1], 9)
        画雷数图片 (_启动窗口., 结果数组 [2], 10)
    .如果真结束
    
    赋值 (时间日期)

.子程序 通过, 空白型, , 
.参数 行数量, 整数型, , 
.参数 列数量, 整数型, , 
.参数 扫雷数组, 整数型, 数组, 
.参数 真实雷数组, 整数型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (_启动窗口.., 0)
赋值 (_启动窗口., 假)
画笑脸图片 (_启动窗口., #墨镜)
.计次循环首 (行数量, i)
    .计次循环首 (列数量, j)
        .如果真 (并且 (不等于 (扫雷数组 [i] [j], #标记), 等于 (真实雷数组 [i] [j], #有雷)))
            画雷图片 (_启动窗口., #标记图片, i, j)
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
.如果真 (等于 (sound, 1))
    播放音乐 (#胜利音乐, 假)
.如果真结束
.判断开始 (或者 (等于 (level, 0), 等于 (level, 1), 等于 (level, 2))) ' 初级、中级、高级
    .如果真 (小于 (相除 (_启动窗口., 10), 多项选择 (相加 (level, 1), time0, time1, time2)))
        载入 (破记录窗口, , 真)
    .如果真结束
    
.默认
    
.判断结束


.子程序 英雄榜时间转换, 文本型, , 转换“时分秒-秒”
.参数 时间, 双精度小数型, , 

.局部变量 时间文本, 文本型, , , 
.局部变量 秒时间, 整数型, , , 
.局部变量 毫秒时间, 整数型, , , 
.局部变量 时间日期, 日期时间型, , , 
.局部变量 时, 整数型, , , 
.局部变量 分, 整数型, , , 
.局部变量 秒, 整数型, , , 

赋值 (时间文本, 到文本 (四舍五入 (时间, 1)))
赋值 (秒时间, 取整 (时间))
.判断开始 (等于 (寻找文本 (时间文本, “.”, , 假), -1))
    赋值 (毫秒时间, 0)
.默认
    赋值 (毫秒时间, 到数值 (取文本右边 (时间文本, 相减 (取文本长度 (时间文本), 寻找文本 (时间文本, “.”, , 假)))))
.判断结束
赋值 (时间日期)

.窗口程序集 自定义雷区窗口程序集, , , 

.子程序 _自定义雷区窗口_创建完毕, 空白型, , 
赋值 (., 到文本 (_启动窗口.))
赋值 (., 到文本 (_启动窗口.))
赋值 (., 到文本 (_启动窗口.))

.子程序 _确定按钮_被单击, 空白型, , 
赋值 (_启动窗口., 到数值 (.))
赋值 (_启动窗口., 到数值 (.))
赋值 (_启动窗口., 到数值 (.))
.如果真 (小于 (_启动窗口., 9))
    赋值 (_启动窗口., 9)
.如果真结束
.如果真 (大于 (_启动窗口., 格子最大高度))
    赋值 (_启动窗口., 格子最大高度)
.如果真结束
.如果真 (小于 (_启动窗口., 9))
    赋值 (_启动窗口., 9)
.如果真结束
.如果真 (大于 (_启动窗口., 格子最大宽度))
    赋值 (_启动窗口., 格子最大宽度)
.如果真结束
.如果真 (小于 (_启动窗口., 10))
    赋值 (_启动窗口., 10)
.如果真结束
.如果真 (小于 (_启动窗口., 10))
    赋值 (_启动窗口., 10)
.如果真结束
.如果真 (大于 (_启动窗口., 相乘 (相减 (_启动窗口., 1), 相减 (_启动窗口., 1))))
    赋值 (_启动窗口., 相乘 (相减 (_启动窗口., 1), 相减 (_启动窗口., 1)))
.如果真结束
设置级别 (_启动窗口., _启动窗口., _启动窗口.)
_按钮1_被单击 ()
销毁 ()

.子程序 _取消按钮_被单击, 空白型, , 
销毁 ()

.子程序 _高度编辑框_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _确定按钮_被单击 ()
.如果真结束


.子程序 _宽度编辑框_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _确定按钮_被单击 ()
.如果真结束


.子程序 _雷数编辑框_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _确定按钮_被单击 ()
.如果真结束


.窗口程序集 扫雷英雄榜窗口程序集, , , 

.子程序 _扫雷英雄榜窗口_创建完毕, 空白型, , 
_分组框1_鼠标右键被按下 (0, 0, 0)
赋值 (., name0)
赋值 (., name1)
赋值 (., name2)
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()

.子程序 _确定按钮_被单击, 空白型, , 
销毁 ()

.子程序 _重新计分按钮_被单击, 空白型, , 
连续赋值 (“匿名”, name0, name1, name2, name3)
连续赋值 (999, time0, time1, time2, time3)

.子程序 _重新计分按钮_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #R键))
    _重新计分按钮_被单击 ()
.如果真结束


.子程序 _确定按钮_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #R键))
    _重新计分按钮_被单击 ()
.如果真结束


.子程序 _扫雷英雄榜窗口_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #R键))
    _重新计分按钮_被单击 ()
.如果真结束


.子程序 _分组框1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (时分秒类型, 取反 (时分秒类型))
.判断开始 (等于 (时分秒类型, 真))
    赋值 (., 英雄榜时间转换 (time0))
    赋值 (., 英雄榜时间转换 (time1))
    赋值 (., 英雄榜时间转换 (time2))
.默认
    赋值 (., 到文本 (四舍五入 (time0, 1)))
    赋值 (., 到文本 (四舍五入 (time1, 1)))
    赋值 (., 到文本 (四舍五入 (time2, 1)))
.判断结束


.子程序 _标签1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_分组框1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _重新计分按钮_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_分组框1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _确定按钮_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_分组框1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _扫雷英雄榜窗口_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_分组框1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.窗口程序集 破记录窗口程序集, , , 

.程序集变量 类型, 逻辑型, , , 
.程序集变量 时间文本, 文本型, , , 
.程序集变量 time, 双精度小数型, , , 
.子程序 _破记录窗口_创建完毕, 空白型, , 
赋值 (time, 相除 (_启动窗口., 10))
_破记录窗口_鼠标右键被按下 (0, 0, 0)

.子程序 _破记录窗口_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (类型, 取反 (类型))
.判断开始 (等于 (类型, 真))
    赋值 (时间文本, 英雄榜时间转换 (time))
.默认
    赋值 (时间文本, 到文本 (四舍五入 (time, 1)))
.判断结束
赋值 (., 相加 (“已破”, 多项选择 (相加 (level, 1), “初级”, “中级”, “高级”), “记录”, #换行符, “输入尊姓大名”, #换行符, “时间：”, #换行符, 时间文本))

.子程序 _标签1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_破记录窗口_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _编辑框1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_破记录窗口_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _按钮1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_破记录窗口_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)

.子程序 _按钮1_被单击, 空白型, , 
销毁 ()

.子程序 _破记录窗口_将被销毁, 空白型, , 
.判断开始 (等于 (level, 0)) ' 初级
    赋值 (name0, .)
    赋值 (time0, time)
.判断 (等于 (level, 1)) ' 中级
    赋值 (name1, .)
    赋值 (time1, time)
.判断 (等于 (level, 2)) ' 高级
    赋值 (name2, .)
    赋值 (time2, time)
.默认
    
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
