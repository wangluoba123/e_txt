 ' 文件类型：未知类型

 ' 程序名称：易语言模块代码分析区
 ' 程序描述：易语言模块代码分析区
@备注:
易语言模块代码分析区
 ' 程序作者：超级用户
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：超级用户全权开发
 ' 版本号：1.0
 ' 创建号：0.0



.常量 字符0, "48", , 
.常量 字符9, "57", , 
.常量 字符A, "65", , 
.常量 字符F, "70", , 
.常量 字符aa, "97", , 
.常量 字符ff, "102", , 
.常量 , , , 
.常量 属性_私有, "0", , 
.常量 属性_公开, "2", , 
.常量 属性_引用模块, "4", , 
.常量 , , , 
.常量 , , , 右移 24 后判断
.常量 代号_子程序, "4", , 也包括方法，易语言本身没有区分它们
.常量 代号_全局变量, "5", , 
.常量 代号_程序集, "9", , 
.常量 代号_DLL命令, "10", , 
.常量 代号_程序集变量, "21", , 也包括类成员，易语言本身没有区分它们
.常量 代号_窗口程序集, "25", , 0x19
.常量 代号_类模块, "73", , 0x49
.常量 代号_控件资源, "22", , 0x16
.常量 代号_常量资源, "24", , 0x18
.常量 代号_图片资源, "40", , 0x28
.常量 代号_声音资源, "56", , 0x38
.常量 代号_数据类型, "65", , 
.常量 代号_窗口资源, "82", , 0x52
.常量 , , , 
.常量 类型_整数, "-2147482879", , 
.常量 类型_文本, "-2147483644", , 
.常量 类型_字节集, "-2147483643", , 
.常量 类型_字节, "-2147483391", , 
.常量 类型_短整数, "-2147483135", , 
.常量 类型_长整数, "-2147482623", , 
.常量 类型_时间型, "-2147483645", , 
.常量 类型_逻辑值, "-2147483646", , 
.常量 类型_小数型, "-2147482367", , 
.常量 类型_双精度, "-2147482111", , 
.常量 类型_子程序指针, "-2147483642", , 
.常量 , , , 
.常量 流程头_如果, "107", , 0x6B
.常量 流程头_如果真, "108", , 0x6C
.常量 流程头_判断开始, "109", , 0x6D
.常量 流程头_判断, "110", , 0x6E
.常量 流程头_循环首, "112", , 0x70
.常量 流程头_循环尾, "113", , 0x71


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库




数据类型 标识符数据, , 
    .成员 名称, 文本型, , , 
    .成员 代号, 整数型, , , 
    .成员 匿名成员76, 空白型, , , 以下成员可能为空，例如窗口、常量、资源等等很简单的对象
    .成员 属性, 整数型, , , 
    .成员 注释, 文本型, , , 
    .成员 匿名成员79, 空白型, , , 变量对象专用数据成员
    .成员 数据类型, 整数型, , , 存储的是代号
    .成员 数组维数, 整数型, , "1", 
    .成员 匿名成员82, 空白型, , , 对于程序集、类模块、子程序、数据结构等等等等 包含对象的对象
    .成员 包含对象, 整数型, , "1", 存储的是代号
    .成员 匿名成员84, 空白型, , , 对于子程序(方法)专用的成员
    .成员 局部变量, 局部变量数据, , "1", 如果是自定义数据类型，存储的是成员
    .成员 局部参数, 局部变量数据, , "1", 
    .成员 代码数据段, 字节集, , "6", 
    .成员 匿名成员88, 空白型, , , 
    .成员 附加整数, 整数型, , , 对于类模块，是基类对象代号，对于程序集是0
    .成员 附加内容, 文本型, , , 

数据类型 局部变量数据, , 
    .成员 名称, 文本型, , , 
    .成员 代号, 整数型, , , 
    .成员 注释, 文本型, , , 
    .成员 属性, 整数型, , , 
    .成员 数据类型, 整数型, , , 
    .成员 数组维数, 整数型, , "1", 

数据类型 数据结构, , 
    .成员 成员名称, 文本型, , "1", 

数据类型 支持库数据, , 
    .成员 名称, 文本型, , , 
    .成员 数据类型, 文本型, , "1", 
    .成员 函数, 文本型, , "1", 
    .成员 常量, 文本型, , "1", 
    .成员 结构, 数据结构, , "1", 

.全局变量 全局_统计数据规律, 统计类, , , 

.程序集 程序集1, , , 

.程序集变量 分析数据, 易语言文件分析类, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 分析模块, 文本型, 公开, 
.参数 模块位置, 文本型, , 

分析数据.资源保存目录 (相加 (取运行目录 (), “\DATA\”))
分析数据.代码保存文件名 (“反编译结果.txt”)
分析数据.分析数据 (读入文件 (模块位置))
返回 (分析数据.取结果 ())

.程序集 十六进制程序集, , , 

.子程序 字节集到十六进制文本, 文本型, 公开, 返回结果类似 { 0x00, 0xFF }
.参数 字节集, 字节集, , 
.参数 数字前缀, 文本型, 可空, 默认为 0x
.参数 对齐, 逻辑型, 可空, 

.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 

.如果真 (是否为空 (数字前缀))
    赋值 (数字前缀, “0x”)
.如果真结束

赋值 (文本, 相加 (“{ ”, 选择 (对齐, #换行符, “”)))
.计次循环首 (取字节集长度 (字节集), i)
    赋值 (文本, 相加 (文本, 数字前缀))
    赋值 (文本, 相加 (文本, 多项选择 (相加 (右移 (字节集 [i], 4), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”)))
    赋值 (文本, 相加 (文本, 多项选择 (相加 (位与 (字节集 [i], 15), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”)))
    赋值 (文本, 相加 (文本, “,”))
    .如果真 (对齐)
        .判断开始 (等于 (位与 (i, 15), 0))
            赋值 (文本, 相加 (文本, #换行符))
        .判断 (等于 (位与 (i, 7), 0))
            赋值 (文本, 相加 (文本, “  ”))
        .判断 (等于 (位与 (i, 3), 0))
            赋值 (文本, 相加 (文本, “ ”))
        .默认
            
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (文本, 相加 (取文本左边 (文本, 相减 (取文本长度 (文本), 1)), 选择 (对齐, #换行符, “”), “ }”))
返回 (文本)


.子程序 字节集到十进制文本, 文本型, 公开, 
.参数 字节集, 字节集, , 

.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (文本, “{ ”)
.计次循环首 (取字节集长度 (字节集), i)
    赋值 (文本, 相加 (文本, 到文本 (字节集 [i]), “,”))
.计次循环尾 ()
赋值 (文本, 相加 (取文本左边 (文本, 相减 (取文本长度 (文本), 1)), “ }”))
返回 (文本)


.子程序 十六进制文本到字节集, 字节集, 公开, 类似 { 0x00, 0xFF }这样的表示方法
.参数 十六进制文本, 文本型, , 支持删除 {、}、0x、&H，支持大小写

.局部变量 文本, 文本型, , , 
.局部变量 数组, 文本型, , "0", 
.局部变量 字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (文本, 到小写 (删全部空 (十六进制文本)))
赋值 (文本, 子文本替换 (文本, “0x”, , , , 真))
赋值 (文本, 子文本替换 (文本, “&h”, , , , 真))
赋值 (文本, 子文本替换 (文本, “{”, , , , 真))
赋值 (文本, 子文本替换 (文本, “}”, , , , 真))
赋值 (文本, 子文本替换 (文本, “，”, “,”, , , 真))

赋值 (数组, 分割文本 (文本, “,”, ))
赋值 (字节集, 取空白字节集 (取数组成员数 (数组)))
.计次循环首 (取数组成员数 (数组), i)
    赋值 (字节集 [i], 十六进制文本到整数 (数组 [i]))
.计次循环尾 ()
返回 (字节集)


.子程序 十六进制文本到整数, 整数型, 公开, 若遇到0123456789abcdefABCDEF之外的字符立即返回
.参数 文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 ch, 整数型, , , 
.局部变量 结果, 整数型, , , 

赋值 (结果, 0)
.计次循环首 (取文本长度 (文本), i)
    赋值 (ch, 取代码 (文本, i))
    
    .判断开始 (并且 (小于或等于 (#字符0, ch), 小于或等于 (ch, #字符9)))
        赋值 (ch, 相减 (ch, #字符0))
    .判断 (并且 (小于或等于 (#字符A, ch), 小于或等于 (ch, #字符F)))
        赋值 (ch, 相加 (相减 (ch, #字符A), 10))
    .判断 (并且 (小于或等于 (#字符aa, ch), 小于或等于 (ch, #字符ff)))
        赋值 (ch, 相加 (相减 (ch, #字符aa), 10))
    .默认
        返回 (结果)
    .判断结束
    
    赋值 (结果, 位或 (左移 (结果, 4), ch)) ' 结果 × 16 ＋ ch
.计次循环尾 ()
返回 (结果)


.类模块 统计类, , , 

.程序集变量 统计数据, 字节集, , "0", 
.程序集变量 出现次数, 整数型, , "0", 
.子程序 记录, 空白型, 公开, 
.参数 数据, 字节集, , 

.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (统计数据), i)
    .如果真 (等于 (统计数据 [i], 数据))
        赋值 (出现次数 [i], 相加 (出现次数 [i], 1))
        返回 ()
    .如果真结束
    
.计次循环尾 ()
加入成员 (统计数据, 数据)
加入成员 (出现次数, 1)


.子程序 清空, 空白型, 公开, 
重定义数组 (统计数据, 假, 0)
重定义数组 (出现次数, 假, 0)


.子程序 取结果, 空白型, 公开, 
.参数 数据数组, 字节集, 参考 数组, 
.参数 次数数组, 整数型, 参考 数组, 

复制数组 (数据数组, 统计数据)
复制数组 (次数数组, 出现次数)


.程序集 支持库信息常量程序集, , , 

.程序集变量 支持库信息, 支持库数据, , "0", 
.子程序 支持库信息初始化, 空白型, , 
.局部变量 信息, 支持库数据, , , 

赋值 (信息.名称, “krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库”)
赋值 (信息.函数, { “如果”, “如果真”, “判断”, “判断循环首”, “判断循环尾”, “循环判断首”, “循环判断尾”, “计次循环首”, “计次循环尾”, “变量循环首”, “变量循环尾”, “到循环尾”, “跳出循环”, “返回”, “结束”, “相乘”, “相除”, “整除”, “求余数”, “相加”, “相减”, “负”, “取符号”, “取绝对值”, “取整”, “绝对取整”, “四舍五入”, “求次方”, “求平方根”, “求正弦”, “求余弦”, “求正切”, “求反正切”, “求自然对数”, “求反对数”, “是否运算正确”, “置随机数种子”, “取随机数”, “等于”, “不等于”, “小于”, “大于”, “小于或等于”, “大于或等于”, “近似等于”, “并且”, “或者”, “取反”, “位取反”, “位与”, “位或”, “位异或”, “赋值”, “连续赋值”, “参考”, “重定义数组”, “取数组成员数”, “取数组下标”, “复制数组”, “加入成员”, “插入成员”, “删除成员”, “清除数组”, “数组排序”, “取命令行”, “取运行目录”, “取执行文件名”, “读环境变量”, “写环境变量”, “取所有发音”, “取发音数目”, “取拼音”, “取声母”, “取韵母”, “发音比较”, “输入字比较”, “取文本长度”, “取文本左边”, “取文本右边”, “取文本中间”, “字符”, “取代码”, “寻找文本”, “倒找文本”, “到大写”, “到小写”, “到全角”, “到半角”, “到时间”, “到数值”, “到文本”, “删首空”, “删尾空”, “删首尾空”, “删全部空”, “文本替换”, “子文本替换”, “取空白文本”, “取重复文本”, “文本比较”, “分割文本”, “取字节集长度”, “到字节集”, “取字节集数据”, “取字节集左边”, “取字节集右边”, “取字节集中间”, “寻找字节集”, “倒找字节集”, “字节集替换”, “子字节集替换”, “取空白字节集”, “取重复字节集”, “分割字节集”, “数值到大写”, “数值到金额”, “数值到格式文本”, “取十六进制文本”, “取八进制文本”, “增减时间”, “取时间间隔”, “取某月天数”, “时间到文本”, “取时间部分”, “取年份”, “取月份”, “取日”, “取星期几”, “取小时”, “取分钟”, “取秒”, “指定时间”, “取现行时间”, “置现行时间”, “取磁盘总空间”, “取磁盘剩余空间”, “取磁盘卷标”, “置磁盘卷标”, “改变驱动器”, “改变目录”, “取当前目录”, “创建目录”, “删除目录”, “复制文件”, “移动文件”, “删除文件”, “文件更名”, “文件是否存在”, “寻找文件”, “取文件时间”, “取文件尺寸”, “取文件属性”, “置文件属性”, “取临时文件名”, “读入文件”, “写到文件”, “打开文件”, “打开内存文件”, “关闭文件”, “关闭所有文件”, “锁住文件”, “解锁文件”, “移动读写位置”, “移到文件首”, “移到文件尾”, “读入字节集”, “写出字节集”, “读入文本”, “写出文本”, “读入一行”, “写文本行”, “读入数据”, “写出数据”, “是否在文件尾”, “取读写位置”, “取文件长度”, “运行”, “取剪辑板文本”, “置剪辑板文本”, “剪辑板中可有文本”, “清除剪辑板”, “取屏幕宽度”, “取屏幕高度”, “取鼠标水平位置”, “取鼠标垂直位置”, “取颜色数”, “取文本注册表项”, “取数值注册表项”, “取字节集注册表项”, “写注册表项”, “删除注册表项”, “输入框”, “信息框”, “鸣叫”, “取启动时间”, “播放音乐”, “停止播放”, “输出调试文本”, “暂停”, “检查”, “载入”, “选择”, “多项选择”, “是否为空”, “是否已创建”, “取数据类型尺寸”, “取颜色值”, “取子程序地址”, “压缩图片”, “取事件组件”, “事件转移”, “复制窗口组件”, “处理事件”, “载入图片”, “卸载图片”, “取窗口句柄”, “销毁”, “获取焦点”, “可有焦点”, “取用户区宽度”, “取用户区高度”, “禁止重画”, “允许重画”, “重画”, “部分重画”, “取消重画”, “刷新显示”, “移动”, “调整层次”, “弹出菜单”, “取子夹数目”, “取子夹名称”, “置子夹名称”, “打开”, “取顶端可见项目”, “置顶端可见项目”, “取项目数”, “取项目数值”, “置项目数值”, “取项目文本”, “置项目文本”, “加入项目”, “插入项目”, “删除项目”, “清空”, “选择”, “取顶端可见项目”, “置顶端可见项目”, “取项目数”, “取项目数值”, “置项目数值”, “取项目文本”, “置项目文本”, “取已选择项目数”, “取所有被选择项目”, “是否被选择”, “选择项目”, “取焦点项目”, “置焦点项目”, “加入项目”, “插入项目”, “删除项目”, “清空”, “选择”, “取顶端可见项目”, “置顶端可见项目”, “取项目数”, “取项目数值”, “置项目数值”, “取项目文本”, “置项目文本”, “加入项目”, “插入项目”, “删除项目”, “清空”, “选择”, “是否被选中”, “选中项目”, “是否被允许”, “允许”, “取设备句柄”, “清除”, “取点”, “画点”, “画直线”, “画椭圆”, “画弧线”, “画弦”, “画饼”, “画矩形”, “画渐变矩形”, “填充矩形”, “画圆角矩形”, “翻转矩形区”, “画多边形”, “置写出位置”, “写文本行”, “滚动写行”, “写出”, “定位写出”, “取宽度”, “取高度”, “画图片”, “取图片宽度”, “取图片高度”, “复制”, “取设备句柄”, “开始打印”, “结束打印”, “取消打印”, “换页”, “开始下一份”, “画点”, “画直线”, “画椭圆”, “画弧线”, “画弦”, “画饼”, “画矩形”, “画渐变矩形”, “填充矩形”, “画圆角矩形”, “画多边形”, “置写出位置”, “写文本行”, “写出”, “定位写出”, “取宽度”, “取高度”, “画图片”, “取图片宽度”, “取图片高度”, “加入文本”, “发送信息”, “投递信息”, “指针是否有效”, “是否支持多用户”, “取错误码”, “取错误信息”, “创建”, “打开”, “替换打开”, “置当前库”, “取当前库”, “关闭”, “全部关闭”, “取库文件名”, “是否已打开”, “取记录数”, “取创建时间”, “取字段数”, “取字段名”, “改字段名”, “取字段类型”, “取字段尺寸”, “新建索引”, “置当前索引”, “取当前索引”, “更新索引”, “取索引数”, “取索引名”, “取索引字段”, “置加锁重试时间”, “锁住数据库”, “解锁数据库”, “锁住增删”, “解增删锁”, “锁住记录”, “解锁记录”, “全部解锁”, “取平均值”, “求和”, “取最大值”, “取最小值”, “取最大时间”, “取最小时间”, “计算数目”, “复制结构”, “复制记录”, “计算排序”, “排序”, “分类计算”, “添加”, “加记录”, “加空记录”, “替换”, “修改”, “删除”, “是否已删除”, “恢复删除”, “彻底删除”, “清空”, “读”, “写”, “读字段”, “写字段”, “附加字节集”, “附加备注”, “索引查找”, “查找”, “到首记录”, “到尾记录”, “跳过”, “取记录号”, “跳到”, “取标签”, “记录是否存在”, “标签跳转”, “首记录前”, “尾记录后”, “写出缓存”, “写出所有缓存”, “编辑”, “置等待鼠标”, “恢复鼠标”, “延时”, “播放MID”, “是否为调试版”, “插入字节集”, “插入文本”, “插入文本行”, “删除数据”, “取文本注册项”, “取数值注册项”, “取字节集注册项”, “写注册项”, “删除注册项”, “注册项是否存在”, “取标记组件”, “跳转”, “置外形图片”, “播放MP3”, “激活”, “取硬盘特征字”, “取主机名”, “通信测试”, “发送数据”, “取回数据”, “连接”, “断开连接”, “发送数据”, “取回数据”, “启动”, “停止”, “发送数据”, “转换为主机名”, “转换为IP地址”, “取回客户”, “发送数据”, “取回数据”, “置托盘图标”, “弹出托盘菜单”, “断开客户”, “取默认底色”, “取图片”, “快照”, “到首记录”, “到尾记录”, “跳过”, “跳到”, “取记录号”, “取表头行数”, “置表头行数”, “取表头列数”, “置表头列数”, “取行高”, “置行高”, “取列宽”, “置列宽”, “取类型”, “置类型”, “取文本色”, “置文本色”, “取背景色”, “置背景色”, “取字体名”, “置字体名”, “取字体尺寸”, “置字体尺寸”, “取字体属性”, “置字体属性”, “取边距”, “置边距”, “取文本输入格式”, “置文本输入格式”, “取对齐方式”, “置对齐方式”, “取密码方式”, “置密码方式”, “取文本”, “置文本”, “取数据”, “置数据”, “合并”, “分解”, “是否被合并”, “加线条”, “删线条”, “是否有线条”, “清除”, “置初始属性”, “初始尺寸”, “取行数”, “取列数”, “插入行”, “添加行”, “删除行”, “插入列”, “删除列”, “添加”, “存到字节集”, “从字节集读”, “存到文件”, “从文件读”, “单元格到字节集”, “字节集到单元格”, “单元格到文件”, “文件到单元格”, “刷新”, “保存更改”, “打印设置”, “取打印设置”, “置打印设置”, “取打印页宽”, “取打印页高”, “置光标”, “选择”, “全部选择”, “取光标行号”, “取光标列号”, “取选择行数”, “取选择列数”, “等宽缩放”, “全部复制”, “复制”, “粘贴到光标处”, “粘贴”, “打印”, “打印预览”, “打开”, “关闭”, “取连接文本”, “启动事务”, “回滚事务”, “提交事务”, “查询”, “重新查询”, “关闭记录集”, “首记录前”, “尾记录后”, “到首记录”, “到尾记录”, “到前一记录”, “到后一记录”, “读”, “执行”, “修改程序”, “清除记录”, “写出程序”, “取日期”, “取时间”, “数组清零”, “读配置项”, “写配置项”, “取配置节名”, “取操作系统类别”, “打开加密文件”, “是否已加密”, “置数据库密码”, “密码输入框”, “复制密码”, “信号操作”, “取系统语言”, “打开MDB数据库”, “打开SQL数据库”, “取只读方式”, “置只读方式”, “标准输出”, “标准输入”, “指针到文本”, “指针到字节集”, “写到内存”, “复制”, “创建”, “获取”, “清除”, “是否为空”, “是否相等”, “读文本属性”, “读数值属性”, “读逻辑属性”, “读日期属性”, “读对象型属性”, “读属性”, “写属性”, “方法”, “通用方法”, “文本方法”, “数值方法”, “逻辑方法”, “日期方法”, “对象型方法”, “创建图片对象”, “创建字体对象”, “取回图片”, “取回字体”, “取错误”, “查看”, “复制”, “清除”, “取类型”, “取数组成员数”, “取文本”, “取数值”, “取逻辑值”, “取日期”, “取对象”, “取变体型”, “赋值”, “创建数组”, “取和历文本”, “取接口”, “???”, “调用反馈事件”, “单位转换”, “DLL命令调用转向”, “置父窗口”, “置类型”, “取字节集”, “到字节”, “到短整数”, “到整数”, “到长整数”, “到小数”, “置自定义纸张类型”, “删除自定义纸张类型”, “取自定义纸张大小”, “取所有纸张类型”, “左移”, “右移”, “合并整数”, “合并短整数”, “置错误提示管理”, “同步播放MP3”, “暂停播放MP3”, “继续播放MP3”, “取MP3播放状态”, “多文件对话框”, “置DLL装载目录”, “单位转换”, “取组件名称”, “取对象类型”, “寻找组件”, “取找到组件数目”, “取所找到组件”, “清除组件寻找句柄”, “置入代码”, “取设备名称”, “载入易包文件”, “载入易包数据”, “卸载易包”, “易包是否被载入”, “复制易包常量”, “指针到整数”, “指针到小数”, “指针到双精度小数”, “十六进制”, “二进制” })
赋值 (信息.数据类型, { “窗口”, “报表”, “菜单”, “字体”, “编辑框”, “图片框”, “外形框”, “画板”, “分组框”, “标签”, “按钮”, “选择框”, “单选框”, “组合框”, “列表框”, “选择列表框”, “横向滚动条”, “纵向滚动条”, “进度条”, “滑块条”, “选择夹”, “影像框”, “日期框”, “月历”, “驱动器框”, “目录框”, “文件框”, “颜色选择器”, “超级链接框”, “调节器”, “通用对话框”, “时钟”, “打印机”, “字段信息”, “数据报”, “数据报”, “客户”, “服务器”, “端口”, “打印设置信息”, “表格”, “数据源”, “通用提供者”, “数据库提供者”, “图形按钮”, “外部数据库”, “外部数据提供者”, “对象”, “变体型”, “变体类型”, “无法载入的窗口组件” })
赋值 (信息.常量, { “引号”, “左引号”, “右引号”, “换行符”, “pi”, “e”, “黑色”, “藏青”, “墨绿”, “深青”, “红褐”, “紫红”, “褐绿”, “浅灰”, “灰色”, “蓝色”, “绿色”, “艳青”, “红色”, “品红”, “黄色”, “白色”, “蓝灰”, “藏蓝”, “嫩绿”, “青绿”, “黄褐”, “粉红”, “嫩黄”, “银白”, “紫色”, “天蓝”, “灰绿”, “青蓝”, “橙黄”, “桃红”, “芙红”, “深灰”, “透明”, “隐藏窗口”, “普通激活”, “最小化激活”, “最大化激活”, “普通不激活”, “最小化不激活”, “读入”, “写出”, “读写”, “重写”, “改写”, “改读”, “无限制”, “禁止读”, “禁止写”, “禁止读写”, “文件首”, “文件尾”, “现行位置”, “只读文件”, “隐藏文件”, “系统文件”, “子目录”, “存档文件”, “无属性文件”, “字节型”, “短整数型”, “整数型”, “长整数型”, “小数型”, “双精度小数型”, “逻辑型”, “日期时间型”, “子程序指针型”, “文本型”, “年份”, “季度”, “月份”, “周”, “自年首周数”, “日”, “小时”, “分钟”, “秒”, “星期几”, “自年首天数”, “确认钮”, “确认取消钮”, “放弃重试忽略钮”, “取消是否钮”, “是否钮”, “重试取消钮”, “错误图标”, “询问图标”, “警告图标”, “信息图标”, “默认按钮一”, “默认按钮二”, “默认按钮三”, “默认按钮四”, “程序等待”, “系统等待”, “位于前台”, “文本右对齐”, “取消钮”, “放弃钮”, “重试钮”, “忽略钮”, “是钮”, “否钮”, “首拼及全拼”, “双拼”, “自动判别”, “Ctrl键状态”, “Shift键状态”, “Alt键状态”, “键0”, “键1”, “键2”, “键3”, “键4”, “键5”, “键6”, “键7”, “键8”, “键9”, “A键”, “B键”, “C键”, “D键”, “E键”, “F键”, “G键”, “H键”, “I键”, “J键”, “K键”, “L键”, “M键”, “N键”, “O键”, “P键”, “Q键”, “R键”, “S键”, “T键”, “U键”, “V键”, “W键”, “X键”, “Y键”, “Z键”, “F1键”, “F2键”, “F3键”, “F4键”, “F5键”, “F6键”, “F7键”, “F8键”, “F9键”, “F10键”, “F11键”, “F12键”, “F13键”, “F14键”, “F15键”, “F16键”, “Break键”, “退格键”, “Tab键”, “回车键”, “Shift键”, “Ctrl键”, “Alt键”, “Pause键”, “CapsLock键”, “NumLock键”, “ScrollLock键”, “Esc键”, “空格键”, “PageUp键”, “PageDown键”, “Home键”, “End键”, “左光标键”, “上光标键”, “右光标键”, “下光标键”, “Ins键”, “Del键”, “分号键”, “等号键”, “逗号键”, “减号键”, “圆点键”, “除号键”, “反撇号键”, “左中括号键”, “右中括号键”, “斜杠键”, “单引号键”, “顶层”, “底层”, “最高层”, “次高层”, “全部转换”, “日期部分”, “时间部分”, “输入文本”, “输入整数”, “输入小数”, “拷贝”, “翻转拷贝”, “位异或”, “位或”, “位与”, “从上到下”, “从左到右”, “从左上到右下”, “从右上到左下”, “从下到上”, “从右到左”, “从右下到左上”, “从左下到右上”, “字节集型”, “备注型”, “通常索引”, “读音索引”, “南方读音索引”, “不区分大小写”, “忽略所有空格”, “取平均值”, “求和”, “取最大值”, “取最小值”, “禁止修改”, “禁止添加”, “禁止删除”, “禁止自动判断”, “根类”, “现行设置”, “现行用户”, “本地机器”, “所有用户”, “单击左键”, “双击”, “单击右键”, “默认色”, “文本”, “图片文件名”, “图片数据”, “字节集数据”, “上左”, “上中”, “上右”, “中左”, “中中”, “中右”, “下左”, “下中”, “下右”, “缩放图片”, “居中图片”, “缩放居中图片”, “平铺图片”, “缩放平铺图片”, “粗体”, “斜体”, “下划线”, “删除线”, “通常型”, “左边框”, “上边框”, “右边框”, “下边框”, “水平线”, “垂直线”, “单斜线”, “双斜线”, “交叉线”, “左单元格”, “上单元格”, “右单元格”, “下单元格”, “无页号”, “上左页号”, “上中页号”, “上右页号”, “下左页号”, “下中页号”, “下右页号”, “全部页”, “仅打印奇数页”, “仅打印偶数页”, “页范围”, “行范围”, “纵向”, “横向”, “默认纸”, “A3纸”, “A4纸”, “A5纸”, “B4纸”, “B5纸”, “四开”, “十六开”, “三十二开”, “信纸”, “法律用纸”, “行政用纸”, “声明”, “小报”, “笔记”, “帐本”, “对开纸”, “输入密码”, “缩放到纸宽”, “限定到纸宽”, “常量”, “资源”, “清除信号”, “发送或置位”, “DTR信号”, “RTS信号”, “Break信号”, “GBK中文”, “英文”, “BIG5中文”, “标准输出设备”, “标准错误设备”, “无法载入的常量”, “横向绘画单位”, “纵向绘画单位”, “横向像素单位”, “纵向像素单位” })
重定义数组 (信息.结构, 假, 0)
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “标题”, “边框”, “底色”, “底图”, “底图方式”, “背景音乐”, “播放次数”, “控制按钮”, “最大化按钮”, “最小化按钮”, “位置”, “可否移动”, “图标”, “回车下移焦点”, “Esc键关闭”, “F1键打开帮助”, “帮助文件名”, “帮助标志值”, “在任务条中显示”, “随意移动”, “外形”, “总在最前”, “保持标题条激活”, “窗口类名” })
加入成员名称 (信息, )
加入成员名称 (信息, { “标题”, “选中”, “禁止”, “可视” })
加入成员名称 (信息, { “角度”, “加粗”, “倾斜”, “删除线”, “下划线”, “字体大小”, “字体名称” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “内容”, “边框”, “文本颜色”, “背景颜色”, “字体”, “隐藏选择”, “最大允许长度”, “是否允许多行”, “滚动条”, “对齐方式”, “输入方式”, “密码遮盖字符”, “转换方式”, “调节器方式”, “调节器底限值”, “调节器上限值”, “起始选择位置”, “被选择字符数”, “被选择文本”, “数据源”, “数据列” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “背景颜色”, “图片”, “显示方式”, “播放动画”, “数据源”, “数据列” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “背景颜色”, “外形”, “线条效果”, “线型”, “线宽”, “线条颜色”, “填充颜色” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “画板背景色”, “底图”, “底图方式”, “自动重画”, “绘画单位”, “画笔类型”, “画出方式”, “画笔粗细”, “画笔颜色”, “刷子类型”, “刷子颜色”, “文本颜色”, “文本背景颜色”, “字体”, “画板宽度”, “画板高度” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “标题”, “对齐方式”, “文本颜色”, “背景颜色”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “标题”, “效果”, “边框”, “渐变边框宽度”, “渐变边框颜色1”, “渐变边框颜色2”, “渐变边框颜色3”, “字体”, “文本颜色”, “背景颜色”, “底图”, “底图方式”, “渐变背景方式”, “渐变背景颜色1”, “渐变背景颜色2”, “渐变背景颜色3”, “横向对齐方式”, “是否自动折行”, “纵向对齐方式”, “数据源”, “数据列” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “图片”, “类型”, “标题”, “横向对齐方式”, “纵向对齐方式”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “图片”, “按钮形式”, “平面”, “标题”, “标题居左”, “横向对齐方式”, “纵向对齐方式”, “文本颜色”, “背景颜色”, “字体”, “选中”, “数据源”, “数据列” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “图片”, “按钮形式”, “平面”, “标题”, “标题居左”, “横向对齐方式”, “纵向对齐方式”, “文本颜色”, “背景颜色”, “字体”, “选中” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “类型”, “内容”, “最大文本长度”, “起始选择位置”, “被选择字符数”, “被选择文本”, “自动排序”, “行间距”, “文本颜色”, “背景颜色”, “字体”, “现行选中项”, “列表项目”, “项目数值”, “数据源”, “数据列”, “除去重复” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “自动排序”, “多列”, “行间距”, “文本颜色”, “背景颜色”, “字体”, “允许选择多项”, “现行选中项”, “列表项目”, “项目数值”, “数据源”, “数据列”, “除去重复” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “自动排序”, “多列”, “行间距”, “单选”, “字体”, “现行选中项”, “列表项目”, “项目数值” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “最小位置”, “最大位置”, “页改变值”, “行改变值”, “位置”, “允许拖动跟踪” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “最小位置”, “最大位置”, “页改变值”, “行改变值”, “位置”, “允许拖动跟踪” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “方向”, “显示方式”, “最小位置”, “最大位置”, “位置” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “边框”, “方向”, “刻度类型”, “单位刻度值”, “允许选择”, “首选择位置”, “选择长度”, “页改变值”, “行改变值”, “最小位置”, “最大位置”, “位置” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “表头方向”, “允许多行表头”, “字体”, “子夹管理”, “现行子夹”, “隐藏自身”, “是否填充背景”, “背景颜色” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “文件名”, “居中播放”, “透明背景”, “播放”, “播放次数” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “允许编辑”, “附件类型”, “今天”, “最小日期”, “最大日期”, “字体”, “边框”, “数据源”, “数据列” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “不显示今天”, “不圈注今天”, “开始星期首日”, “显示星期序号”, “滚动月数”, “今天”, “最小日期”, “最大日期”, “允许选择多天”, “最多选择天数”, “首选择日”, “尾选择日”, “字体”, “文本颜色”, “背景颜色”, “内背景颜色”, “标题颜色”, “标题背景颜色”, “非本月颜色”, “边框” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “驱动器”, “类型”, “文本颜色”, “背景颜色”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “目录”, “边框”, “背景颜色”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “目录”, “被选择文件”, “允许选择多项”, “通配符”, “通常”, “存档”, “只读”, “系统”, “隐藏”, “最小日期”, “最大日期”, “边框”, “文本颜色”, “背景颜色”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “颜色”, “允许透明” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “标题”, “类型”, “电子信箱地址”, “Internet地址”, “文本颜色”, “访问后的颜色”, “热点颜色”, “背景颜色”, “边框”, “字体” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “方向”, “热点跟踪” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “类型”, “标题”, “文件名”, “过滤器”, “初始过滤器”, “初始目录”, “默认文件后缀”, “创建时提示”, “文件必须存在”, “文件覆盖提示”, “目录必须存在”, “不改变目录”, “字体颜色”, “加粗”, “倾斜”, “删除线”, “下划线”, “字体名称”, “字体大小”, “帮助文件名”, “帮助命令”, “帮助标志值” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “时钟周期” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “绘画单位”, “画笔类型”, “画出方式”, “画笔粗细”, “画笔颜色”, “刷子类型”, “刷子颜色”, “文本颜色”, “文本背景颜色”, “字体”, “打印作业名”, “打印份数”, “多份打印方式”, “最小页号”, “最大页号”, “首页页号”, “末页页号”, “打印选择区”, “左边空”, “顶边空”, “右边空”, “底边空”, “当前页号”, “已打印份数”, “打印区宽度”, “打印区高度”, “打印被中止” })
加入成员名称 (信息, { “名称”, “类型”, “最大文本长度” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “端口” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “端口” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “端口” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “端口号”, “波特率”, “数据位数”, “停止位数”, “奇偶校验”, “事件字符”, “等待时间”, “自动启动”, “奇偶校验方案”, “流控制方案”, “Rts流控制”, “Dtr流控制” })
加入成员名称 (信息, { “纸张类型”, “纸张方向”, “左边距”, “上边距”, “右边距”, “下边距”, “页号位置”, “打印份数”, “首页打印页号”, “是否打印到文件”, “打印文件名”, “自动填充”, “自动添加表格线”, “奇偶页方式”, “打印范围方式”, “起始打印位置”, “结束打印位置”, “每页打印行数”, “打印缩放比” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “数据源”, “表格线颜色”, “背景颜色”, “缩放比”, “允许选择块”, “显示标尺”, “显示空表格线”, “禁止调整行高”, “禁止调整列宽”, “允许粘贴扩展” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “数据提供者”, “只读”, “允许添加”, “允许删除” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “初始行数”, “初始列数” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “数据库文件名”, “字节集字段处理”, “数据库密码” })
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “类型”, “选中”, “正常图片”, “点燃图片”, “按下图片”, “禁止图片”, “透明颜色” })
加入成员名称 (信息, )
加入成员名称 (信息, { “左边”, “顶边”, “宽度”, “高度”, “标记”, “可视”, “禁止”, “鼠标指针”, “连接文本”, “查询SQL” })
加入成员名称 (信息, { “指针”, “辅助数据” })
加入成员名称 (信息, { “数据1”, “数据2”, “数据3”, “数据4” })
加入成员名称 (信息, { “未知”, “空”, “数值型”, “文本型”, “逻辑型”, “日期型”, “对象型”, “错误值型”, “数值型数组”, “文本型数组”, “逻辑型数组”, “日期型数组”, “对象型数组”, “错误值型数组”, “变体型数组” })
加入成员名称 (信息, )

加入成员 (支持库信息, 信息)

赋值 (信息.名称, “iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一”)
赋值 (信息.函数, { “取项目数”, “取缩进层次”, “取项目文本”, “取图片”, “取选中图片”, “取项目数值”, “置项目文本”, “置图片”, “置选中图片”, “置项目数值”, “加粗”, “取消加粗”, “扩展”, “收缩”, “保证显示”, “进入编辑”, “加入项目”, “删除项目”, “清空”, “清空”, “加入栏目”, “删除栏目”, “取栏目数”, “取文本”, “取提示文本”, “取宽度”, “取类型”, “取图片”, “取栏目左边”, “取栏目顶边”, “取栏目宽度”, “取栏目高度”, “置文本”, “置提示文本”, “置宽度”, “置类型”, “置图片”, “插入按钮”, “删除按钮”, “取按钮数”, “取标题”, “取提示文本”, “取类型”, “取状态”, “取图片”, “置提示文本”, “加入状态”, “去除状态”, “取标题”, “取图片”, “取当前状态图片”, “取缩进数目”, “取表项数值”, “置标题”, “置图片”, “置状态图片”, “置缩进数目”, “置表项数值”, “取被选择表项”, “取已选择表项数”, “是否被选择”, “选择表项”, “取消表项选择”, “取表项数”, “插入表项”, “删除表项”, “全部删除”, “查找表项”, “查找表项数值”, “保证显示”, “排列图标”, “取列标题”, “取列对齐方式”, “取列宽”, “取列图片”, “图片是否居右”, “置列标题”, “置列宽”, “置列图片”, “取列数”, “插入列”, “删除列”, “进入编辑”, “取父项目”, “是否有子项目”, “是否已扩展”, “置标题”, “是否已加粗”, “取检查框状态”, “置检查框状态” })
赋值 (信息.数据类型, { “树型框”, “状态条”, “工具条”, “超级列表框”, “透明标签” })
赋值 (信息.常量, { “凹入”, “无边框”, “凸出”, “普通按钮”, “多选按钮”, “单选按钮”, “下拉按钮”, “分隔条”, “选中”, “按下”, “禁止”, “隐藏”, “变灰”, “左对齐”, “中间对齐”, “右对齐” })
加入成员 (支持库信息, 信息)

赋值 (信息.名称, “spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库”)
赋值 (信息.函数, { “置入代码”, “取变量地址”, “取子程序地址”, “取变量数据地址”, “调试输出”, “验证”, “调用子程序”, “延迟”, “推迟调用子程序”, “申请内存”, “释放内存”, “调用易系统功能”, “取文本”, “取文本_属性设置”, “取文本_属性读取”, “推迟调用子程序_高精度计时” })
重定义数组 (信息.数据类型, 假, 0)
重定义数组 (信息.常量, 假, 0)
加入成员 (支持库信息, 信息)

赋值 (信息.名称, “BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库”)
赋值 (信息.函数, { “构造函数”, “析构函数”, “复制构造函数”, “取错误信息”, “载入文件”, “载入数据”, “取位图数据”, “取宽度”, “取高度”, “取位深度”, “创建”, “取颜色表”, “取像素点阵”, “取某点颜色”, “取某点颜色索引”, “是否使用颜色表”, “是否为空”, “置某点颜色”, “置某点颜色索引”, “置颜色表”, “置像素点阵”, “转换位深度”, “复制到”, “取指针”, “旋转90度”, “镜像”, “创建兼容位图”, “从句柄创建”, “旋转”, “取横向分辨率”, “取纵向分辨率”, “置横向分辨率”, “置纵向分辨率”, “映射文件”, “位图_转换位深度” })
赋值 (信息.数据类型, { “位图” })
重定义数组 (信息.常量, 假, 0)
加入成员 (支持库信息, 信息)


.子程序 加入成员名称, 空白型, , 
.参数 信息, 支持库数据, 参考, 
.参数 所有成员名称, 文本型, 可空 数组, 

.局部变量 结构, 数据结构, , , 

赋值 (结构.成员名称, 所有成员名称)
加入成员 (信息.结构, 结构)


.子程序 支持库数据类型查询, 文本型, , 失败返回空
.参数 库名称, 文本型, , 
.参数 索引, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (等于 (取数组成员数 (支持库信息), 0))
    支持库信息初始化 ()
.如果真结束

赋值 (i, 匹配支持库 (库名称))
.如果真 (或者 (小于或等于 (i, 0), 大于 (i, 取数组成员数 (支持库信息))))
    返回 (“”)
.如果真结束
.如果真 (或者 (小于或等于 (索引, 0), 大于 (索引, 取数组成员数 (支持库信息 [i], 数据类型))))
    返回 (“”)
.如果真结束

返回 (支持库信息 [i], 数据类型 [索引])


.子程序 支持库数据类型成员查询, 文本型, , 
.参数 库名称, 文本型, , 
.参数 结构索引, 整数型, , 
.参数 成员索引, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 结构, 数据结构, , , 

.如果真 (等于 (取数组成员数 (支持库信息), 0))
    支持库信息初始化 ()
.如果真结束

赋值 (i, 匹配支持库 (库名称))
.如果真 (或者 (小于或等于 (i, 0), 大于 (i, 取数组成员数 (支持库信息))))
    返回 (“”)
.如果真结束
.如果真 (或者 (小于或等于 (结构索引, 0), 大于 (结构索引, 取数组成员数 (支持库信息 [i], 结构))))
    返回 (“”)
.如果真结束

赋值 (结构, 支持库信息 [i], 结构 [结构索引])
.如果真 (或者 (小于或等于 (成员索引, 0), 大于 (成员索引, 取数组成员数 (结构.成员名称))))
    返回 (“”)
.如果真结束
返回 (结构.成员名称 [成员索引])


.子程序 支持库函数查询, 文本型, , 
.参数 库名称, 文本型, , 
.参数 索引, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (等于 (取数组成员数 (支持库信息), 0))
    支持库信息初始化 ()
.如果真结束

赋值 (i, 匹配支持库 (库名称))
.如果真 (或者 (小于或等于 (i, 0), 大于 (i, 取数组成员数 (支持库信息))))
    返回 (“”)
.如果真结束

赋值 (索引, 相加 (索引, 1))
.如果真 (或者 (小于或等于 (索引, 0), 大于 (索引, 取数组成员数 (支持库信息 [i], 函数))))
    返回 (“”)
.如果真结束

返回 (支持库信息 [i], 函数 [索引])


.子程序 支持库常量查询, 文本型, , 
.参数 库名称, 文本型, , 
.参数 索引, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (等于 (取数组成员数 (支持库信息), 0))
    支持库信息初始化 ()
.如果真结束

赋值 (i, 匹配支持库 (库名称))
.如果真 (或者 (小于或等于 (i, 0), 大于 (i, 取数组成员数 (支持库信息))))
    返回 (“”)
.如果真结束

.如果真 (或者 (小于或等于 (索引, 0), 大于 (索引, 取数组成员数 (支持库信息 [i], 常量))))
    返回 (“”)
.如果真结束

返回 (支持库信息 [i], 常量 [索引])


.子程序 匹配支持库, 整数型, , 
.参数 库名称, 文本型, , 

.局部变量 文本, 文本型, , , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (支持库信息), i)
    .如果真 (等于 (支持库信息 [i], 名称, 库名称))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()

赋值 (n, 倒找文本 (库名称, “ ”, , 假))
.如果真 (小于 (n, 0))
    赋值 (n, 0)
.如果真结束
赋值 (n, 相减 (取文本长度 (库名称), n))
赋值 (文本, 取文本右边 (库名称, n))

.计次循环首 (取数组成员数 (支持库信息), i)
    .如果真 (等于 (取文本右边 (支持库信息 [i], 名称, n), 文本))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)


.类模块 易语言文件分析类, , , 

.程序集变量 类_文件数据, 字节集, , , 
.程序集变量 类_分析位置, 整数型, , , 
.程序集变量 类_分析结果, 文本型, , , 
.程序集变量 类_对象, 标识符数据, , "0", 
.程序集变量 类_支持库, 文本型, , "0", 
.程序集变量 类_资源保存目录, 文本型, , , 
.程序集变量 类_代码保存文件名, 文本型, , , 
.程序集变量 类_信息前缀, 文本型, , , 分析过程中产生的错误、警告信息前缀
.子程序 信息前缀, 文本型, 公开, 分析过程中产生的错误、警告信息前缀
.参数 前缀, 文本型, 可空, 

.如果真 (等于 (是否为空 (前缀), 假))
    赋值 (类_信息前缀, 前缀)
.如果真结束

返回 (类_信息前缀)


.子程序 资源保存目录, 文本型, 公开, 分析过程中产生的文件数据保存目录
.参数 目录, 文本型, 可空, 

.如果真 (等于 (是否为空 (目录), 假))
    赋值 (类_资源保存目录, 目录)
.如果真结束

返回 (类_资源保存目录)


.子程序 代码保存文件名, 文本型, 公开, 
.参数 文件名, 文本型, 可空, 

.如果真 (等于 (是否为空 (文件名), 假))
    赋值 (类_代码保存文件名, 文件名)
.如果真结束

返回 (类_代码保存文件名)


.子程序 保存代码结果, 空白型, , 
整理对象到文本 ()
写到文件 (相加 (类_资源保存目录, 类_代码保存文件名), 到字节集 (类_分析结果))

.子程序 发生异常_立即保存数据, 空白型, , 
整理对象到文本 ()
赋值 (类_分析结果, 相加 (类_分析结果, #换行符, 类_信息前缀, “发生异常，当前文件偏移：0x”, 取十六进制文本 (类_分析位置)))
写到文件 (相加 (类_资源保存目录, 类_代码保存文件名), 到字节集 (类_分析结果))


.子程序 取结果, 文本型, 公开, 
返回 (类_分析结果)

.子程序 代号取对象类型, 整数型, , 常量、声音、图片、窗口、变量 等等
.参数 代号, 整数型, , 

返回 (位与 (右移 (代号, 24), 255))


.子程序 代号取对象类型名, 文本型, , 常量、声音、图片、窗口、变量 等等
.参数 参数, 整数型, , 

.局部变量 代号, 整数型, , , 

赋值 (代号, 代号取对象类型 (参数))
.判断开始 (等于 (代号, #代号_控件资源))
    返回 (“控件”)
.判断 (等于 (代号, #代号_常量资源))
    返回 (“常量”)
.判断 (等于 (代号, #代号_图片资源))
    返回 (“图片”)
.判断 (等于 (代号, #代号_声音资源))
    返回 (“声音”)
.判断 (等于 (代号, #代号_窗口资源))
    返回 (“窗口”)
.判断 (等于 (代号, #代号_程序集))
    返回 (“程序集”)
.判断 (等于 (代号, #代号_窗口程序集))
    返回 (“窗口程序集”)
.判断 (等于 (代号, #代号_类模块))
    返回 (“类模块”)
.判断 (等于 (代号, #代号_子程序))
    返回 (“子程序”)
.判断 (等于 (代号, #代号_全局变量))
    返回 (“全局变量”)
.判断 (等于 (代号, #代号_数据类型))
    返回 (“数据类型”)
.判断 (等于 (代号, #代号_程序集变量))
    返回 (“程序集变量”)
.判断 (等于 (代号, #代号_DLL命令))
    返回 (“DLL命令”)
.默认
    返回 (相加 (“未知”, 到文本 (代号)))
.判断结束


.子程序 取数据类型名, 文本型, , 
.参数 类型, 整数型, , 

.局部变量 文本, 文本型, , , 
.局部变量 n, 整数型, , , 

.判断开始 (等于 (类型, 0))
    返回 (“”)
.判断 (等于 (类型, #类型_整数))
    返回 (“整数型”)
.判断 (等于 (类型, #类型_文本))
    返回 (“文本型”)
.判断 (等于 (类型, #类型_字节))
    返回 (“字节型”)
.判断 (等于 (类型, #类型_字节集))
    返回 (“字节集”)
.判断 (等于 (类型, #类型_短整数))
    返回 (“短整数型”)
.判断 (等于 (类型, #类型_长整数))
    返回 (“长整数型”)
.判断 (等于 (类型, #类型_时间型))
    返回 (“日期时间型”)
.判断 (等于 (类型, #类型_逻辑值))
    返回 (“逻辑型”)
.判断 (等于 (类型, #类型_小数型))
    返回 (“小数型”)
.判断 (等于 (类型, #类型_双精度))
    返回 (“双精度小数型”)
.判断 (等于 (类型, #类型_子程序指针))
    返回 (“子程序指针”)
.默认
    
.判断结束

赋值 (n, 寻找对象 (类型))
.如果真 (并且 (大于 (n, 0), 小于或等于 (n, 取数组成员数 (类_对象))))
    返回 (类_对象 [n], 名称)
.如果真结束

赋值 (n, 位与 (右移 (类型, 16), 65535))
.如果真 (并且 (大于 (n, 0), 小于或等于 (n, 取数组成员数 (类_支持库))))
    赋值 (文本, 支持库数据类型查询 (类_支持库 [n], 位与 (类型, 65535)))
    .如果真 (不等于 (文本, “”))
        返回 (文本)
    .如果真结束
    
.如果真结束

返回 (相加 (“未知类型0x”, 取十六进制文本 (类型)))


.子程序 读取整数, 整数型, , 
.局部变量 位置, 整数型, , , 

赋值 (位置, 类_分析位置)
赋值 (类_分析位置, 相加 (类_分析位置, 4))
返回 (取字节集数据 (类_文件数据, #整数型, 位置))


.子程序 读取短整数, 短整数型, , 
.局部变量 位置, 整数型, , , 

赋值 (位置, 类_分析位置)
赋值 (类_分析位置, 相加 (类_分析位置, 2))
返回 (取字节集数据 (类_文件数据, #短整数型, 位置))


.子程序 读取字节, 字节型, , 
.局部变量 ch, 字节型, , , 

.如果真 (或者 (小于或等于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (0)
.如果真结束
赋值 (ch, 类_文件数据 [类_分析位置])
赋值 (类_分析位置, 相加 (类_分析位置, 1))
返回 (ch)


.子程序 读取日期时间, 日期时间型, , 
.局部变量 位置, 整数型, , , 

赋值 (位置, 类_分析位置)
赋值 (类_分析位置, 相加 (类_分析位置, 8))
返回 (取字节集数据 (类_文件数据, #日期时间型, 位置))


.子程序 读取双精度, 双精度小数型, , 
.局部变量 位置, 整数型, , , 

赋值 (位置, 类_分析位置)
赋值 (类_分析位置, 相加 (类_分析位置, 8))
返回 (取字节集数据 (类_文件数据, #双精度小数型, 位置))


.子程序 读取定长文本, 文本型, , 
.局部变量 结果, 文本型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 读取整数 ())
赋值 (结果, 到文本 (取字节集中间 (类_文件数据, 类_分析位置, 长度)))
赋值 (类_分析位置, 相加 (类_分析位置, 长度))
返回 (结果)


.子程序 读取变长文本, 文本型, , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

.如果真 (或者 (小于或等于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (“”)
.如果真结束

赋值 (i, 寻找字节集 (类_文件数据, { 0 }, 类_分析位置))
赋值 (i, 选择 (大于 (i, 0), i, 取字节集长度 (类_文件数据)))
赋值 (n, 类_分析位置)
赋值 (类_分析位置, 相加 (i, 1))
返回 (到文本 (取字节集中间 (类_文件数据, n, 相减 (i, n))))


.子程序 读取字节集, 字节集, , 
.局部变量 结果, 字节集, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 读取整数 ())
赋值 (结果, 取字节集中间 (类_文件数据, 类_分析位置, 长度))
赋值 (类_分析位置, 相加 (类_分析位置, 长度))
返回 (结果)


.子程序 读取并保存文件, 文本型, , 将应该用文件保存的字节集保存
.参数 文件名, 文本型, , 不包括路径

.局部变量 字节集, 字节集, , , 

赋值 (字节集, 读取字节集 ())
.如果真 (等于 (字节集, {  }))
    返回 (相加 (类_信息前缀, “空”))
.如果真结束

写到文件 (相加 (类_资源保存目录, 文件名), 字节集)

返回 (相加 (类_信息前缀, “已保存到：”, 类_资源保存目录, 文件名))


.子程序 寻找对象, 整数型, , 返回索引
.参数 代号, 整数型, , 

.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (类_对象), i)
    .如果真 (等于 (类_对象 [i], 代号, 代号))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (0)


.子程序 分析数据, 逻辑型, 公开, 
.参数 数据, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (类_文件数据, 数据)
赋值 (类_分析结果, “”)
赋值 (类_分析位置, 9) ' CNWTEPRG 长度为8
重定义数组 (类_对象, 假, 0)

.计次循环首 (16, )
    赋值 (i, 相加 (类_分析位置, 8))
    赋值 (n, 取字节集数据 (类_文件数据, #整数型, i))
    
    .判断开始 (等于 (n, 十六进制文本到整数 (“2007319”)))
        .如果真 (等于 (分析基本信息数据段 (), 假))
            发生异常_立即保存数据 ()
            返回 (假)
        .如果真结束
        
    .判断 (等于 (n, 十六进制文本到整数 (“3007319”)))
        .如果真 (等于 (分析代码信息数据段 (), 假))
            发生异常_立即保存数据 ()
            返回 (假)
        .如果真结束
        
    .判断 (等于 (n, 十六进制文本到整数 (“4007319”)))
        .如果真 (等于 (分析资源信息数据段 (), 假))
            发生异常_立即保存数据 ()
            返回 (假)
        .如果真结束
        
    .判断 (等于 (n, 十六进制文本到整数 (“C007319”)))
        .如果真 (等于 (分析模块信息数据段 (), 假))
            发生异常_立即保存数据 ()
            返回 (假)
        .如果真结束
        
    .默认
        
        赋值 (n, 寻找字节集 (类_文件数据, 十六进制文本到字节集 (“{ 19, 73, 11, 15 }”), i))
        .如果 (小于或等于 (n, 0))
            跳出循环 ()
        .否则
            赋值 (类_分析位置, n)
        .如果结束
        
    .判断结束
    
.计次循环尾 ()
保存代码结果 ()
返回 (真)


.子程序 整理对象到文本, 空白型, , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (类_分析结果, 相加 (类_分析结果, #换行符, #换行符))

.计次循环首 (取数组成员数 (类_对象), i)
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (等于 (n, #代号_数据类型))
        赋值 (类_分析结果, 相加 (类_分析结果, 数据类型到文本 (类_对象 [i]), #换行符))
    .如果真结束
    .如果真 (等于 (n, #代号_子程序))
        赋值 (类_对象 [i], 附加整数, 0)
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (取数组成员数 (类_对象), i)
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (等于 (n, #代号_全局变量))
        赋值 (类_分析结果, 相加 (类_分析结果, 全局变量到文本 (类_对象 [i]), #换行符))
    .如果真结束
    
.计次循环尾 ()

赋值 (类_分析结果, 相加 (类_分析结果, #换行符))

.计次循环首 (取数组成员数 (类_对象), i)
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (等于 (n, #代号_DLL命令))
        赋值 (类_分析结果, 相加 (类_分析结果, 类_对象 [i], 附加内容, #换行符))
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (取数组成员数 (类_对象), i)
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (或者 (等于 (n, #代号_程序集), 等于 (n, #代号_类模块), 等于 (n, #代号_窗口程序集)))
        赋值 (类_分析结果, 相加 (类_分析结果, 模块到文本 (类_对象 [i])))
    .如果真结束
    
.计次循环尾 ()

赋值 (类_分析结果, 相加 (类_分析结果, #换行符, 类_信息前缀, “不属于任何一个程序集、类模块的函数：”, #换行符))

.计次循环首 (取数组成员数 (类_对象), i)
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (等于 (n, #代号_子程序))
        赋值 (类_分析结果, 相加 (类_分析结果, 子程序到文本 (类_对象 [i])))
    .如果真结束
    
.计次循环尾 ()


.子程序 数据段校验, 逻辑型, , 
.如果真 (小于 (取字节集长度 (类_文件数据), 相加 (类_分析位置, 256)))
    赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “数据长度不够 当前位置0x”, 取十六进制文本 (类_分析位置), #换行符))
    返回 (假)
.如果真结束

.如果真 (不等于 (取字节集中间 (类_文件数据, 类_分析位置, 4), { 25, 115, 17, 21 })) ' 0x19, 0x73, 0x11, 0x15
    赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “校验错误 当前位置0x”, 取十六进制文本 (类_分析位置), #换行符))
.如果真结束

返回 (真)


.子程序 分析基本信息数据段, 逻辑型, , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (数据段校验 (), 假))
    返回 (假)
.如果真结束

赋值 (i, 类_文件数据 [相加 (类_分析位置, 4)])
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “文件类型：”))
.判断开始 (等于 (i, 97)) ' 0x61
    赋值 (类_分析结果, 相加 (类_分析结果, “windows模块源码”))
.判断 (等于 (i, 99)) ' 0x63
    赋值 (类_分析结果, 相加 (类_分析结果, “已经编译的windows模块”))
.判断 (等于 (i, 100)) ' 0x64
    赋值 (类_分析结果, 相加 (类_分析结果, “已经编译的windows模块”))
.判断 (等于 (i, 136)) ' 0x88
    赋值 (类_分析结果, 相加 (类_分析结果, “windows控制台程序”))
.判断 (等于 (i, 137)) ' 0x89
    赋值 (类_分析结果, 相加 (类_分析结果, “windows窗口程序”))
.判断 (等于 (i, 142)) ' 0x8E
    赋值 (类_分析结果, 相加 (类_分析结果, “windows窗口程序”))
.判断 (等于 (i, 143)) ' 0x8F
    赋值 (类_分析结果, 相加 (类_分析结果, “windows窗口程序”))
.判断 (等于 (i, 139)) ' 0x8B
    赋值 (类_分析结果, 相加 (类_分析结果, “windows动态链接库”))
.判断 (等于 (i, 153)) ' 0x99
    赋值 (类_分析结果, 相加 (类_分析结果, “linux控制台程序”))
.判断 (等于 (i, 113)) ' 0x71
    赋值 (类_分析结果, 相加 (类_分析结果, “linux模块源码”))
.判断 (等于 (i, 115)) ' 0x73
    赋值 (类_分析结果, 相加 (类_分析结果, “已经编译的linux模块”))
.默认
    赋值 (类_分析结果, 相加 (类_分析结果, “未知类型”))
.判断结束

赋值 (类_分析结果, 相加 (类_分析结果, #换行符, #换行符))
赋值 (类_分析位置, 相加 (类_分析位置, 260))

赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “程序名称：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “程序描述：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “程序作者：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “邮政编码：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “联系地址：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “联系电话：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “传真号码：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “电子信箱：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “主页地址：”, 读取定长文本 (), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “版权声明：”, 读取定长文本 (), #换行符))

赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “版本号：”, 到文本 (读取整数 ()), “.”, 到文本 (读取整数 ()), #换行符))
赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “创建号：”, 到文本 (读取整数 ()), “.”, 到文本 (读取整数 ()), #换行符))

赋值 (类_分析位置, 相加 (类_分析位置, 32)) ' 这32字节不知道什么意思，跳过，不分析
返回 (小于 (类_分析位置, 取字节集长度 (类_文件数据)))


.子程序 分析资源信息数据段, 逻辑型, , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (数据段校验 (), 假))
    返回 (假)
.如果真结束

赋值 (类_分析位置, 相加 (类_分析位置, 100))
赋值 (类_分析结果, 相加 (类_分析结果, #换行符))

.如果真 (等于 (读取窗口 (), 假))
    返回 (假)
.如果真结束
.如果真 (等于 (读取常量资源 (), 假))
    返回 (假)
.如果真结束

赋值 (类_分析位置, 相加 (类_分析位置, 4))
返回 (真)


.子程序 读取窗口, 逻辑型, , 
.局部变量 窗口, 标识符数据, , "0", 
.局部变量 窗口个数, 整数型, , , 
.局部变量 控件个数, 整数型, , , 
.局部变量 下一位置, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 注释, 文本型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 附加属性, 整数型, , , 

赋值 (n, 读取整数 ())
.如果真 (或者 (小于 (n, 0), 大于 (n, 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

赋值 (窗口个数, 相除 (n, 8))
重定义数组 (窗口, 假, 窗口个数)

.计次循环首 (窗口个数, i)
    赋值 (窗口 [i], 代号, 读取整数 ())
.计次循环尾 ()
 ' 调试输出 (“窗口代号后面, 位置0x” ＋ 取十六进制文本 (类_分析位置) ＋ 字节集到十六进制文本 (取字节集中间 (类_文件数据, 类_分析位置, 窗口个数 × 4)))
赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (窗口个数, 4)))

.计次循环首 (窗口个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类_分析位置, 相加 (类_分析位置, 8))
    
    赋值 (窗口 [i], 名称, 读取定长文本 ())
    对象命名 (窗口 [i])
    赋值 (注释, 读取定长文本 ())
    赋值 (注释, 选择 (等于 (注释, “”), “”, 相加 (“ ' ”, 注释)))
    
    赋值 (类_分析结果, 相加 (类_分析结果, “窗口 ”, 窗口 [i], 名称, 注释, #换行符))
    赋值 (控件个数, 读取整数 ())
    赋值 (下一位置, 相加 (类_分析位置, 读取整数 ()))
    .如果真 (或者 (小于或等于 (下一位置, 类_分析位置), 大于 (下一位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类_分析位置, 相加 (类_分析位置, 34, 相乘 (控件个数, 8)))
    赋值 (类_分析结果, 相加 (类_分析结果, “    左边 = ”, 到文本 (读取整数 ()), #换行符))
    赋值 (类_分析结果, 相加 (类_分析结果, “    顶边 = ”, 到文本 (读取整数 ()), #换行符))
    赋值 (类_分析结果, 相加 (类_分析结果, “    宽度 = ”, 到文本 (读取整数 ()), #换行符))
    赋值 (类_分析结果, 相加 (类_分析结果, “    高度 = ”, 到文本 (读取整数 ()), #换行符))
    
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    
    赋值 (字节集, 读取字节集 ())
    .如果 (大于 (取字节集长度 (字节集), 4))
        赋值 (字节集, 取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 4)))
        赋值 (文本, 相加 (类_资源保存目录, 窗口 [i], 名称, “_鼠标指针.cur”))
        写到文件 (文本, 字节集)
        赋值 (文本, 相加 (类_信息前缀, “已保存到：”, 文本))
        
    .否则
        赋值 (文本, 字节集到十进制文本 (字节集))
    .如果结束
    赋值 (类_分析结果, 相加 (类_分析结果, “    鼠标指针 = ”, 文本, #换行符))
    赋值 (类_分析结果, 相加 (类_分析结果, “    标记 = ”, #左引号, 读取变长文本 (), #右引号, #换行符))
    
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    
    赋值 (n, 读取整数 ())
    赋值 (类_分析结果, 相加 (类_分析结果, “    可视 = ”, 到文本 (不等于 (位与 (n, 1), 0)), #换行符))
    赋值 (类_分析结果, 相加 (类_分析结果, “    禁止 = ”, 到文本 (不等于 (位与 (n, 2), 0)), #换行符))
    
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    
    赋值 (n, 读取整数 ()) ' ' 消息响应函数个数，不包括 子控件的消息函数
    赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (n, 8))) ' 应该是 整数型 2个，不过也可能是双精度或长整数
    
    .如果真 (或者 (小于或等于 (类_分析位置, 0), 大于 (类_分析位置, 相减 (下一位置, 20))))
        赋值 (类_分析位置, 下一位置)
        到循环尾 ()
    .如果真结束
    
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    赋值 (n, 读取整数 ())
    检查 (等于 (n, 0))
    
    赋值 (附加属性, 读取整数 ())
    .如果真 (并且 (大于 (附加属性, 0), 小于或等于 (附加属性, 6)))
        赋值 (类_分析结果, 相加 (类_分析结果, “    边框 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    底图方式 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (n, 读取整数 ())
        赋值 (类_分析结果, 相加 (类_分析结果, “    底色 = ”, 到文本 (n), 类_信息前缀, “ 0x”, 取十六进制文本 (n), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    最大化按钮 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    最小化按钮 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    控制按钮 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    位置 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    可否移动 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    背景音乐播放次数 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    回车下移焦点 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    Esc键关闭 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    F1键打开帮助 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    帮助标志值 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    在任务栏中显示 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    随意移动 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    外形 = ”, 到文本 (读取整数 ()), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    总在最前 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        赋值 (类_分析结果, 相加 (类_分析结果, “    保持标题栏激活 = ”, 到文本 (不等于 (读取整数 (), 0)), #换行符))
        .如果真 (等于 (附加属性, 6))
            赋值 (类_分析结果, 相加 (类_分析结果, “    窗口类名 = ”, #左引号, 读取定长文本 (), #右引号, #换行符))
        .如果真结束
        .如果真 (大于或等于 (附加属性, 5))
            赋值 (类_分析结果, 相加 (类_分析结果, “    底图 = ”, 读取并保存文件 (相加 (窗口 [i], 名称, “_底图”)), #换行符))
        .如果真结束
        .如果真 (大于或等于 (附加属性, 4))
            赋值 (类_分析结果, 相加 (类_分析结果, “    图标 = ”, 读取并保存文件 (相加 (窗口 [i], 名称, “_图标.ico”)), #换行符))
        .如果真结束
        .如果真 (大于或等于 (附加属性, 3))
            赋值 (类_分析结果, 相加 (类_分析结果, “    背景音乐 = ”, 读取并保存文件 (相加 (窗口 [i], 名称, “_背景音乐”)), #换行符))
        .如果真结束
        .如果真 (大于或等于 (附加属性, 2))
            赋值 (类_分析结果, 相加 (类_分析结果, “    标题 = ”, #左引号, 读取定长文本 (), #右引号, #换行符))
        .如果真结束
        赋值 (类_分析结果, 相加 (类_分析结果, “    帮助文件名 = ”, #左引号, 读取定长文本 (), #右引号, #换行符))
    .如果真结束
    
     ' 输出调试文本 (类_代码保存文件名 ＋ “ ” ＋ 到文本 (附加属性) ＋ “ 0x” ＋ 取十六进制文本 (类_分析位置))
    
    赋值 (类_分析结果, 相加 (类_分析结果, #换行符))
    赋值 (类_分析位置, 下一位置)
.计次循环尾 ()
加入成员 (类_对象, 窗口)
返回 (真)


.子程序 读取常量资源, 逻辑型, , 
.局部变量 常量, 标识符数据, , "0", 
.局部变量 常量个数, 整数型, , , 
.局部变量 属性, 整数型, , , 
.局部变量 注释, 文本型, , , 
.局部变量 内容, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 匿名, 逻辑型, , , 

赋值 (常量个数, 读取整数 ())
.如果真 (或者 (小于 (常量个数, 0), 大于 (相乘 (常量个数, 4), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (常量, 假, 常量个数)

赋值 (类_分析位置, 相加 (类_分析位置, 4))

.计次循环首 (常量个数, i)
    赋值 (常量 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (常量个数, 4)))
赋值 (类_分析结果, 相加 (类_分析结果, #换行符, #换行符))

.计次循环首 (常量个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类_分析位置, 相加 (类_分析位置, 4))
    
    赋值 (属性, 读取短整数 ()) ' 位与 (读取短整数 (), 255)
    赋值 (常量 [i], 名称, 读取变长文本 ())
    赋值 (匿名, 等于 (常量 [i], 名称, “”))
    对象命名 (常量 [i])
    赋值 (注释, 读取变长文本 ())
    赋值 (内容, 读取一个常量资源数值 (常量 [i]))
    
    .如果 (并且 (匿名, 等于 (内容, “”)))
        赋值 (常量 [i], 名称, “”)
    .否则
        赋值 (内容, 相加 (#引号, 内容, #引号))
    .如果结束
    
    赋值 (类_分析结果, 相加 (类_分析结果, “.”, 代号取对象类型名 (常量 [i], 代号), “ ”, 常量 [i], 名称, “, ”, 内容, “, ”))
    .判断开始 (等于 (属性, #属性_公开))
        赋值 (类_分析结果, 相加 (类_分析结果, “公开”))
    .判断 (等于 (属性, #属性_引用模块))
        赋值 (类_分析结果, 相加 (类_分析结果, “隐藏”))
    .默认
        
    .判断结束
    
    赋值 (类_分析结果, 相加 (类_分析结果, “, ”, 注释, #换行符))
.计次循环尾 ()
加入成员 (类_对象, 常量)
返回 (真)


.子程序 读取一个常量资源数值, 文本型, , 如果 为 图片 或者 声音数据，写入文件夹
.参数 标识, 标识符数据, , 如果 代号 表明是图片 或者声音，就按照名称 存为文件，其他情况不写文件

.局部变量 数据, 字节集, , , 
.局部变量 n, 整数型, , , 

赋值 (n, 位与 (右移 (标识.代号, 24), 255))

.如果真 (或者 (等于 (n, #代号_图片资源), 等于 (n, #代号_声音资源)))
    赋值 (数据, 读取字节集 ())
    .如果真 (等于 (数据, {  }))
        返回 (“”)
    .如果真结束
    
    写到文件 (相加 (类_资源保存目录, 标识.名称), 数据)
    返回 (相加 (类_信息前缀, “已保存到：”, 类_资源保存目录, 标识.名称))
.如果真结束

赋值 (n, 类_文件数据 [类_分析位置])
赋值 (类_分析位置, 相加 (类_分析位置, 1))
.判断开始 (等于 (n, 23)) ' 0x17
    返回 (到文本 (读取双精度 ()))
.判断 (等于 (n, 24)) ' 0x18
    返回 (到文本 (不等于 (读取短整数 (), 0)))
.判断 (等于 (n, 25)) ' 0x19
    返回 (相加 (“[”, 到文本 (读取日期时间 ()), “]”))
.判断 (等于 (n, 26)) ' 0x1A
    返回 (相加 (#左引号, 读取定长文本 (), #右引号))
.默认
    返回 (“”)
.判断结束


.子程序 对象命名, 空白型, , 避免匿名对象，如果为匿名对象，重新命名，否则不变
.参数 对象, 标识符数据, 参考, 

赋值 (对象.名称, 删全部空 (对象.名称))
.如果真 (等于 (对象.名称, “”))
    赋值 (对象.名称, 相加 (“匿名”, 代号取对象类型名 (对象.代号), “_”, 到文本 (位与 (对象.代号, 65535))))
.如果真结束


.子程序 分析代码信息数据段, 逻辑型, , 
.如果真 (等于 (数据段校验 (), 假))
    返回 (假)
.如果真结束

赋值 (类_分析结果, 相加 (类_分析结果, #换行符, #换行符))
赋值 (类_分析位置, 相加 (类_分析位置, 108))

.如果真 (等于 (读取支持库 (), 假))
    返回 (假)
.如果真结束
赋值 (类_分析结果, 相加 (类_分析结果, #换行符, #换行符))
.如果真 (等于 (读取所有模块 (), 假))
    返回 (假)
.如果真结束
.如果真 (等于 (读取所有子程序 (), 假))
    返回 (假)
.如果真结束
.如果真 (等于 (读取全局变量 (), 假))
    返回 (假)
.如果真结束
.如果真 (等于 (读取自定义数据类型 (), 假))
    返回 (假)
.如果真结束
.如果真 (等于 (读取DLL命令 (), 假))
    返回 (假)
.如果真结束

赋值 (类_分析位置, 相加 (类_分析位置, 40))
返回 (真)


.子程序 分析模块信息数据段, 逻辑型, , 
.局部变量 模块个数, 整数型, , , 

.如果真 (等于 (数据段校验 (), 假))
    返回 (真)
.如果真结束

赋值 (类_分析位置, 相加 (类_分析位置, 100))

赋值 (模块个数, 读取整数 ())
赋值 (类_分析结果, 相加 (类_分析结果, #换行符, 类_信息前缀, “所需要的模块”, #换行符))
.计次循环首 (模块个数, )
    .如果真 (或者 (大于或等于 (类_分析位置, 取字节集长度 (类_文件数据)), 小于或等于 (类_分析位置, 0)))
        跳出循环 ()
    .如果真结束
    
    赋值 (类_分析位置, 相加 (类_分析位置, 20))
    赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, 读取定长文本 (), “ ”, 读取定长文本 (), #换行符))
    赋值 (类_分析位置, 相加 (类_分析位置, 读取整数 ()))
    赋值 (类_分析位置, 相加 (类_分析位置, 读取整数 ()))
.计次循环尾 ()
返回 (真)


.子程序 数组维数到文本, 文本型, , 
.参数 数组, 整数型, 数组, 

.局部变量 结果, 文本型, , , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (n, 取数组成员数 (数组))
.如果真 (等于 (n, 0))
    返回 (“”)
.如果真结束

赋值 (结果, #引号)
.计次循环首 (相减 (n, 1), i)
    赋值 (结果, 相加 (结果, 到文本 (数组 [i]), “,”))
.计次循环尾 ()
赋值 (结果, 相加 (结果, 到文本 (数组 [n]), #引号))
返回 (结果)


.子程序 读取支持库, 逻辑型, , 
.局部变量 个数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (n, 读取整数 ())
.如果真 (或者 (小于 (n, 0), 大于 (n, 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

赋值 (个数, 相除 (n, 4))
重定义数组 (类_支持库, 假, 个数)

赋值 (类_分析位置, 相加 (类_分析位置, 10, 相乘 (个数, 8)))

赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, “所需要的支持库：”, #换行符))
.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类_支持库 [i], 子文本替换 (读取定长文本 (), 字符 (13), “ ”, , , 真))
    赋值 (类_分析结果, 相加 (类_分析结果, 类_信息前缀, 类_支持库 [i], #换行符))
.计次循环尾 ()
返回 (真)


.子程序 读取所有模块, 逻辑型, , 
.局部变量 模块, 标识符数据, , "0", 包括程序集 与 类模块
.局部变量 成员变量, 标识符数据, , "0", 
.局部变量 数组, 整数型, , "0", 
.局部变量 个数, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

读取整数 ()
读取整数 ()
赋值 (类_分析位置, 相加 (类_分析位置, 读取整数 ()))
赋值 (类_分析位置, 相加 (类_分析位置, 读取整数 ()))

赋值 (n, 读取整数 ())
.如果真 (或者 (小于 (n, 0), 大于 (n, 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

赋值 (个数, 相除 (n, 8)) ' 程序集 和 类模块 总数
重定义数组 (模块, 假, 个数)

.计次循环首 (个数, i)
    赋值 (模块 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (模块 [i], 属性, 读取整数 ())
    赋值 (模块 [i], 附加整数, 读取整数 ()) ' 基类
    赋值 (模块 [i], 名称, 读取定长文本 ())
    赋值 (模块 [i], 注释, 读取定长文本 ())
    对象命名 (模块 [i])
    
    赋值 (n, 相除 (读取整数 (), 4)) ' 包含子程序、方法 个数
    .如果真 (或者 (小于 (n, 0), 大于 (相乘 (n, 4), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
        返回 (假)
    .如果真结束
    
    重定义数组 (模块 [i], 包含对象, 假, n)
    .计次循环首 (n, j)
        赋值 (模块 [i], 包含对象 [j], 读取整数 ())
    .计次循环尾 ()
    
    .如果真 (等于 (读取模块成员变量 (成员变量), 假))
        返回 (假)
    .如果真结束
    
    重定义数组 (数组, 假, 取数组成员数 (成员变量))
    .计次循环首 (取数组成员数 (数组), j)
        赋值 (数组 [j], 成员变量 [j], 代号)
    .计次循环尾 ()
    插入成员 (模块 [i], 包含对象, 1, 数组)
    加入成员 (类_对象, 成员变量)
.计次循环尾 ()
加入成员 (类_对象, 模块)
返回 (真)


.子程序 读取模块成员变量, 逻辑型, , 
.参数 变量, 标识符数据, 参考 数组, 

.局部变量 个数, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (个数, 读取整数 ()) ' 包含 程序集变量、成员变量
赋值 (结束, 相加 (读取整数 (), 类_分析位置))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (变量, 假, 个数)
.计次循环首 (个数, i)
    赋值 (变量 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (位置, 相加 (读取整数 (), 类_分析位置))
    赋值 (变量 [i], 数据类型, 读取整数 ())
    
    赋值 (类_分析位置, 相加 (类_分析位置, 2))
    
    赋值 (n, 类_文件数据 [类_分析位置]) ' 数组维数
    赋值 (类_分析位置, 相加 (类_分析位置, 1))
    重定义数组 (变量 [i], 数组维数, 假, n)
    .计次循环首 (n, j)
        赋值 (变量 [i], 数组维数 [j], 读取整数 ())
    .计次循环尾 ()
    赋值 (变量 [i], 名称, 读取变长文本 ())
    赋值 (变量 [i], 注释, 读取变长文本 ())
    对象命名 (变量 [i])
    
     ' 检查 (类_分析位置 ＝ 位置)
    赋值 (类_分析位置, 位置)
.计次循环尾 ()
 ' 检查 (类_分析位置 ＝ 结束)
赋值 (类_分析位置, 结束)
返回 (真)


.子程序 读取所有子程序, 逻辑型, , 
.局部变量 子程序, 标识符数据, , "0", 
.局部变量 个数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (n, 读取整数 ())
.如果真 (或者 (小于 (n, 0), 大于 (n, 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

赋值 (个数, 相除 (n, 8))
重定义数组 (子程序, 假, 个数)

.计次循环首 (个数, i)
    赋值 (子程序 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类_分析位置, 相加 (类_分析位置, 4))
    
    赋值 (子程序 [i], 属性, 读取整数 ())
    赋值 (子程序 [i], 数据类型, 读取整数 ())
    赋值 (子程序 [i], 名称, 读取定长文本 ())
    赋值 (子程序 [i], 注释, 读取定长文本 ())
    对象命名 (子程序 [i])
    
    .如果真 (等于 (读取局部变量 (子程序 [i], 局部变量), 假))
        返回 (假)
    .如果真结束
    .如果真 (等于 (读取参数 (子程序 [i], 局部参数), 假))
        返回 (假)
    .如果真结束
    
    .计次循环首 (6, n)
        赋值 (子程序 [i], 代码数据段 [n], 读取字节集 ())
    .计次循环尾 ()
.计次循环尾 ()
加入成员 (类_对象, 子程序)
返回 (真)


.子程序 读取局部变量, 逻辑型, , 
.参数 变量, 局部变量数据, 参考 数组, 
.参数 成员, 逻辑型, 可空, 

.局部变量 个数, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (个数, 读取整数 ())
赋值 (结束, 相加 (读取整数 (), 类_分析位置))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (变量, 假, 个数)
.计次循环首 (个数, i)
    赋值 (变量 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (位置, 相加 (读取整数 (), 类_分析位置))
    赋值 (变量 [i], 数据类型, 读取整数 ())
    赋值 (变量 [i], 属性, 读取短整数 ())
    赋值 (n, 类_文件数据 [类_分析位置])
    赋值 (类_分析位置, 相加 (类_分析位置, 1))
    重定义数组 (变量 [i], 数组维数, 假, n)
    .计次循环首 (n, j)
        赋值 (变量 [i], 数组维数 [j], 读取整数 ())
    .计次循环尾 ()
    赋值 (变量 [i], 名称, 读取变长文本 ())
    赋值 (变量 [i], 注释, 读取变长文本 ())
    
    .如果真 (等于 (变量 [i], 名称, “”))
        赋值 (变量 [i], 名称, 相加 (选择 (成员, “匿名成员”, “匿名局部变量_”), 到文本 (位与 (变量 [i], 代号, 65535))))
    .如果真结束
    
     ' 检查 (类_分析位置 ＝ 位置)
    赋值 (类_分析位置, 位置)
.计次循环尾 ()
 ' 检查 (类_分析位置 ＝ 结束)
赋值 (类_分析位置, 结束)
返回 (真)


.子程序 读取参数, 逻辑型, , 
.参数 参数, 局部变量数据, 参考 数组, 

.局部变量 个数, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (个数, 读取整数 ())
赋值 (结束, 相加 (读取整数 (), 类_分析位置))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (参数, 假, 个数)
.计次循环首 (个数, i)
    赋值 (参数 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (位置, 相加 (读取整数 (), 类_分析位置))
    赋值 (参数 [i], 数据类型, 读取整数 ())
    赋值 (参数 [i], 属性, 读取短整数 ())
    赋值 (类_分析位置, 相加 (类_分析位置, 1))
    赋值 (参数 [i], 名称, 读取变长文本 ())
    赋值 (参数 [i], 注释, 读取变长文本 ())
    .如果真 (等于 (参数 [i], 名称, “”))
        赋值 (参数 [i], 名称, 相加 (“匿名参数_”, 到文本 (位与 (参数 [i], 代号, 65535))))
    .如果真结束
    
     ' 检查 (类_分析位置 ＝ 位置)
    赋值 (类_分析位置, 位置)
.计次循环尾 ()
 ' 检查 (类_分析位置 ＝ 结束)
赋值 (类_分析位置, 结束)
返回 (真)


.子程序 读取全局变量, 逻辑型, , 
.局部变量 变量, 标识符数据, , "0", 
.局部变量 个数, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (个数, 读取整数 ())
赋值 (结束, 相加 (读取整数 (), 类_分析位置))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (变量, 假, 个数)
.计次循环首 (个数, i)
    赋值 (变量 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (位置, 相加 (类_分析位置, 读取整数 ()))
    赋值 (变量 [i], 数据类型, 读取整数 ())
    赋值 (变量 [i], 属性, 读取短整数 ())
    赋值 (n, 类_文件数据 [类_分析位置])
    赋值 (类_分析位置, 相加 (类_分析位置, 1))
    重定义数组 (变量 [i], 数组维数, 假, n)
    .计次循环首 (n, j)
        赋值 (变量 [i], 数组维数 [j], 读取整数 ())
    .计次循环尾 ()
    赋值 (变量 [i], 名称, 读取变长文本 ())
    赋值 (变量 [i], 注释, 读取变长文本 ())
    
    .如果真 (等于 (变量 [i], 名称, “”))
        赋值 (变量 [i], 名称, 相加 (“匿名全局变量_”, 到文本 (位与 (变量 [i], 代号, 65535))))
    .如果真结束
    
     ' 检查 (类_分析位置 ＝ 位置)
    赋值 (类_分析位置, 位置)
.计次循环尾 ()
 ' 检查 (类_分析位置 ＝ 结束)
赋值 (类_分析位置, 结束)
加入成员 (类_对象, 变量)
返回 (真)


.子程序 读取自定义数据类型, 逻辑型, , 
.局部变量 类型, 标识符数据, , "0", 
.局部变量 个数, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (个数, 相除 (读取整数 (), 8))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (类型, 假, 个数)
.计次循环首 (个数, i)
    赋值 (类型 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (类型 [i], 属性, 读取整数 ())
    赋值 (类型 [i], 名称, 读取定长文本 ())
    赋值 (类型 [i], 注释, 读取定长文本 ())
    对象命名 (类型 [i])
    .如果真 (等于 (读取局部变量 (类型 [i], 局部变量, 真), 假))
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
加入成员 (类_对象, 类型)
返回 (真)


.子程序 读取DLL命令, 逻辑型, , 
.局部变量 命令, 标识符数据, , "0", 
.局部变量 参数, 局部变量数据, , , 
.局部变量 函数, 文本型, , , 
.局部变量 库, 文本型, , , 
.局部变量 个数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (个数, 相除 (读取整数 (), 8))
.如果真 (或者 (小于 (个数, 0), 大于 (相乘 (个数, 12), 相减 (取字节集长度 (类_文件数据), 类_分析位置))))
    返回 (假)
.如果真结束
.如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    返回 (假)
.如果真结束

重定义数组 (命令, 假, 个数)
.计次循环首 (个数, i)
    赋值 (命令 [i], 代号, 读取整数 ())
.计次循环尾 ()

赋值 (类_分析位置, 相加 (类_分析位置, 相乘 (个数, 4)))

.计次循环首 (个数, i)
    .如果真 (或者 (小于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
        返回 (假)
    .如果真结束
    
    赋值 (命令 [i], 属性, 读取整数 ())
    赋值 (命令 [i], 数据类型, 读取整数 ())
    赋值 (命令 [i], 名称, 读取定长文本 ())
    赋值 (命令 [i], 注释, 读取定长文本 ())
    赋值 (库, 读取定长文本 ())
    赋值 (函数, 读取定长文本 ())
    .如果真 (等于 (命令 [i], 名称, “”))
        赋值 (命令 [i], 名称, 相加 (函数, “_”, 到文本 (位与 (命令 [i], 代号, 65535))))
    .如果真结束
    
    .如果真 (等于 (读取参数 (命令 [i], 局部参数), 假))
        返回 (假)
    .如果真结束
    
    赋值 (命令 [i], 附加内容, 相加 (“.DLL命令 ”, 命令 [i], 名称, “, ”, 取数据类型名 (命令 [i], 数据类型), “, ”, #引号, 库, #引号, “, ”, #引号, 函数, #引号, “, ”, 选择 (不等于 (命令 [i], 属性, 0), “公开”, “”), “, ”, 命令 [i], 注释, #换行符))
    
    .计次循环首 (取数组成员数 (命令 [i], 局部参数), j)
        赋值 (参数, 命令 [i], 局部参数 [j])
        赋值 (函数, 相加 (选择 (不等于 (位与 (参数.属性, 2), 0), “传址 ”, “”), 选择 (不等于 (位与 (参数.属性, 8), 0), “数组 ”, “”)))
        赋值 (函数, 删首尾空 (函数))
        赋值 (命令 [i], 附加内容, 相加 (命令 [i], 附加内容, “    .参数 ”, 参数.名称, “, ”, 取数据类型名 (参数.数据类型), “, ”, 函数, “, ”, 参数.注释, #换行符))
    .计次循环尾 ()
.计次循环尾 ()
加入成员 (类_对象, 命令)
返回 (真)

.子程序 局部变量到文本, 文本型, , 
.参数 变量, 局部变量数据, , 

返回 (相加 (“.局部变量 ”, 变量.名称, “, ”, 取数据类型名 (变量.数据类型), “, ”, 选择 (等于 (变量.属性, 0), “”, “静态”), “, ”, 数组维数到文本 (变量.数组维数), “, ”, 变量.注释))

.子程序 全局变量到文本, 文本型, , 
.参数 变量, 标识符数据, , 

返回 (相加 (“.全局变量 ”, 变量.名称, “, ”, 取数据类型名 (变量.数据类型), “, ”, 选择 (等于 (变量.属性, 0), “”, “公开”), “, ”, 数组维数到文本 (变量.数组维数), “, ”, 变量.注释))

.子程序 参数到文本, 文本型, , 
.参数 参数, 局部变量数据, , 

.局部变量 属性, 文本型, , , 

赋值 (属性, 相加 (选择 (不等于 (位与 (参数.属性, 2), 0), “参考 ”, “”), 选择 (不等于 (位与 (参数.属性, 4), 0), “可空 ”, “”), 选择 (不等于 (位与 (参数.属性, 8), 0), “数组”, “”)))
赋值 (属性, 删首尾空 (属性))
返回 (相加 (“.参数 ”, 参数.名称, “, ”, 取数据类型名 (参数.数据类型), “, ”, 属性, “, ”, 参数.注释))


.子程序 模块成员变量到文本, 文本型, , 
.参数 变量, 标识符数据, , 

返回 (相加 (“.程序集变量 ”, 变量.名称, “, ”, 取数据类型名 (变量.数据类型), “, , ”, 数组维数到文本 (变量.数组维数), “, ”, 变量.注释))

.子程序 数据类型到文本, 文本型, , 
.参数 类型, 标识符数据, , 

.局部变量 文本, 文本型, , , 
.局部变量 成员, 局部变量数据, , , 
.局部变量 i, 整数型, , , 

赋值 (文本, 相加 (“.数据类型 ”, 类型.名称, “, ”, 选择 (不等于 (类型.属性, 0), “公开”, “”), “, ”, 类型.注释, #换行符))
.计次循环首 (取数组成员数 (类型.局部变量), i)
    赋值 (成员, 类型.局部变量 [i])
    赋值 (文本, 相加 (文本, “    .成员 ”, 成员.名称, “, ”, 取数据类型名 (成员.数据类型), “, ”, 选择 (不等于 (成员.属性, 0), “传址”, “”), “, ”, 数组维数到文本 (成员.数组维数), “, ”, 成员.注释, #换行符))
.计次循环尾 ()
返回 (文本)

.子程序 子程序到文本, 文本型, , 附加整数不是0表示已经解析过，返回空
.参数 子程序, 标识符数据, , 

.局部变量 局部对象, 局部变量数据, , "0", 
.局部变量 返回文本, 文本型, , , 
.局部变量 行文本, 文本型, , , 
.局部变量 函数, 文本型, , , 
.局部变量 注释, 文本型, , , 
.局部变量 出错, 逻辑型, , , 
.局部变量 前置, 逻辑型, , , 
.局部变量 成员, 逻辑型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 屏蔽, 文本型, , , 
.局部变量 缩进, 整数型, , , 
.局部变量 头, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (不等于 (子程序.附加整数, 0))
    返回 (“”)
.如果真结束

赋值 (子程序.附加整数, 1)
赋值 (返回文本, 相加 (“.子程序 ”, 子程序.名称, “, ”, 取数据类型名 (子程序.数据类型), “, ”, 选择 (等于 (子程序.属性, 8), “公开”, “”), “, ”, 子程序.注释, #换行符))

.如果真 (大于 (取数组成员数 (子程序.局部参数), 0))
    .计次循环首 (取数组成员数 (子程序.局部参数), i)
        赋值 (返回文本, 相加 (返回文本, 参数到文本 (子程序.局部参数 [i]), #换行符))
    .计次循环尾 ()
    赋值 (返回文本, 相加 (返回文本, #换行符))
.如果真结束

.如果真 (大于 (取数组成员数 (子程序.局部变量), 0))
    .计次循环首 (取数组成员数 (子程序.局部变量), i)
        赋值 (返回文本, 相加 (返回文本, 局部变量到文本 (子程序.局部变量 [i]), #换行符))
    .计次循环尾 ()
    赋值 (返回文本, 相加 (返回文本, #换行符))
.如果真结束

 ' 检查 (取字节集长度 (子程序.代码数据段 [1]) ％ 4 ＝ 0)  ' 代码行起始位置偏移，整数型，模块是空
 ' 检查 (取字节集长度 (子程序.代码数据段 [2]) ％ 9 ＝ 0)  ' 块起始与结束偏移，字节型 块标志 整数型 起始偏移 整数型 结束偏移 类似C语言的 { } ，模块是空
 ' 检查 (取字节集长度 (子程序.代码数据段 [3]) ％ 4 ＝ 0)  ' 用户定义的 子程序、方法、dll命令 的调用对象偏移
 ' 检查 (取字节集长度 (子程序.代码数据段 [4]) ％ 4 ＝ 0)
 ' 检查 (取字节集长度 (子程序.代码数据段 [5]) ％ 4 ＝ 0)
 ' 检查 (取字节集长度 (子程序.代码数据段 [6]) ＞ 18)  '     代码数据

复制数组 (局部对象, 子程序.局部变量)
加入成员 (局部对象, 子程序.局部参数)
赋值 (类_文件数据, 子程序.代码数据段 [6])
赋值 (类_分析位置, 1)
赋值 (出错, 假)
赋值 (缩进, 0)
赋值 (屏蔽, “”)

 ' 代码行循环
.判断循环首 (并且 (等于 (出错, 假), 大于 (类_分析位置, 0), 小于 (类_分析位置, 取字节集长度 (类_文件数据))))
    赋值 (头, 读取字节 ()) ' 流程头
    .判断开始 (等于 (头, #流程头_判断开始))
        读取字节 ()
        
    .判断 (等于 (头, 80)) ' 0x50
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (相减 (缩进, 4)), 屏蔽, “.否则”, #换行符))
        到循环尾 ()
        
    .判断 (等于 (头, 81)) ' 0x51
        赋值 (缩进, 相减 (缩进, 4))
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, “.如果结束”, #换行符))
        读取字节 ()
        到循环尾 ()
        
    .判断 (等于 (头, 82)) ' 0x52
        赋值 (缩进, 相减 (缩进, 4))
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, “.如果真结束”, #换行符))
        读取字节 ()
        到循环尾 ()
        
    .判断 (等于 (头, 83)) ' 0x53
        .如果 (等于 (读取字节 (), 111)) ' 0x6f
            赋值 (返回文本, 相加 (返回文本, 取空白文本 (相减 (缩进, 4)), 屏蔽, “.默认”, #换行符))
        .否则
            赋值 (类_分析位置, 相减 (类_分析位置, 1))
            赋值 (缩进, 相减 (缩进, 4))
        .如果结束
        到循环尾 ()
        
    .判断 (等于 (头, 84)) ' 0x54
        赋值 (缩进, 相减 (缩进, 4))
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, “.判断结束”, #换行符))
        读取字节 ()
        到循环尾 ()
        
    .判断 (等于 (头, 85)) ' 0x55  循环结束
        赋值 (缩进, 相减 (缩进, 4))
        到循环尾 ()
    .默认
        
    .判断结束
    
    赋值 (a, 读取整数 ())
    赋值 (b, 读取短整数 ())
    赋值 (i, 读取短整数 ()) ' 不知道是什么意思，可能有0、0x40、0x20、1、2
    赋值 (函数, 取函数名称 (b, a))
    赋值 (行文本, 读取定长文本 ())
    赋值 (注释, 读取定长文本 ())
    .如果真 (不等于 (注释, “”))
        赋值 (注释, 相加 (“ ' ”, 注释))
    .如果真结束
    .如果真 (等于 (头, #流程头_判断开始))
        赋值 (函数, “判断开始”)
    .如果真结束
    
    .判断开始 (不等于 (行文本, “”))
        赋值 (函数, “”)
        检查 (等于 (注释, “”))
    .判断 (或者 (等于 (i, 1), 等于 (i, 32)))
        赋值 (屏蔽, “ ' ”)
    .默认
        赋值 (屏蔽, “”)
    .判断结束
    
    .如果真 (不等于 (函数, “”))
        赋值 (函数, 相加 (函数, “ (”))
    .如果真结束
    
    赋值 (文本, 读取代码对象 (局部对象, 1, 前置, 出错, 成员))
    .判断循环首 (并且 (等于 (出错, 假), 不等于 (文本, “)”)))
        .判断开始 (前置)
            赋值 (函数, 相加 (文本, “.”, 函数))
        .判断 (成员)
            赋值 (函数, 相加 (函数, “.”, 文本))
        .默认
            赋值 (函数, 函数追加参数 (函数, 文本))
        .判断结束
        
        赋值 (文本, 读取代码对象 (局部对象, 1, 前置, 出错, 成员))
    .判断循环尾 ()
    
    .如果真 (不等于 (函数, “”))
        赋值 (函数, 相加 (函数, “)”))
    .如果真结束
    
    .判断开始 (或者 (等于 (头, #流程头_如果), 等于 (头, #流程头_判断开始), 等于 (头, #流程头_判断), 等于 (头, #流程头_如果真), 等于 (头, #流程头_循环首)))
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, “.”, 行文本, 函数, 注释, #换行符))
        赋值 (缩进, 相加 (缩进, 4))
    .判断 (等于 (头, #流程头_循环尾))
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, “.”, 行文本, 函数, 注释, #换行符))
    .默认
        赋值 (返回文本, 相加 (返回文本, 取空白文本 (缩进), 屏蔽, 行文本, 函数, 注释, #换行符))
    .判断结束
    
.判断循环尾 ()
输出调试文本 (字节集到十六进制文本 (取字节集右边 (类_文件数据, 相加 (相减 (取字节集长度 (类_文件数据), 类_分析位置), 1))))
输出调试文本 (子程序.名称)
检查 (等于 (出错, 假))

 ' 返回文本 ＝ 返回文本 ＋ “ ' ” ＋ 字节集到十六进制文本 (类_文件数据) ＋ #换行符
返回 (返回文本)


.子程序 函数追加参数, 文本型, , 
.参数 代码, 文本型, , 
.参数 参数, 文本型, , 

.局部变量 a, 文本型, , , 

赋值 (a, 取文本右边 (删尾空 (代码), 1))
.如果真 (或者 (等于 (a, “(”), 等于 (a, “[”), 等于 (a, “{”), 等于 (a, “”)))
    返回 (相加 (代码, 参数))
.如果真结束

赋值 (a, 取文本左边 (删首空 (参数), 1))
.如果真 (或者 (等于 (a, “)”), 等于 (a, “]”), 等于 (a, “}”), 等于 (a, “[”)))
    返回 (相加 (代码, 参数))
.如果真结束

返回 (相加 (代码, “, ”, 参数))


.子程序 读取代码对象, 文本型, , 递归执行，就是 函数嵌套函数
.参数 局部对象, 局部变量数据, 数组, 注意函数内部不要修改它
.参数 递归次数, 整数型, , 保险机制，避免堆栈溢出
.参数 前置对象, 逻辑型, 参考, 对于“对象.方法 ()”的情况，返回值不包含“.”
.参数 解析出错, 逻辑型, 参考, 
.参数 成员符号, 逻辑型, 参考, 

.局部变量 文本, 文本型, , , 
.局部变量 函数, 文本型, , , 
.局部变量 前置, 逻辑型, , , 
.局部变量 成员, 逻辑型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 c, 整数型, , , 

赋值 (前置对象, 假)
赋值 (解析出错, 假)
赋值 (成员符号, 假)

.如果真 (大于 (递归次数, 20))
    赋值 (解析出错, 真)
    返回 (相加 (类_信息前缀, “递归超过20次”))
.如果真结束
.如果真 (或者 (小于或等于 (类_分析位置, 0), 大于 (类_分析位置, 取字节集长度 (类_文件数据))))
    赋值 (解析出错, 真)
    返回 (相加 (类_信息前缀, “数据出错”))
.如果真结束

赋值 (a, 读取字节 ())
.判断开始 (等于 (a, 1))
    返回 (“)”)
.判断 (等于 (a, 22)) ' 0x16
    返回 (“”)
.判断 (等于 (a, 23)) ' 0x17
    返回 (到文本 (读取双精度 ()))
.判断 (等于 (a, 24)) ' 0x18
    返回 (到文本 (不等于 (读取短整数 (), 0)))
.判断 (等于 (a, 26)) ' 0x1A
    返回 (相加 (#左引号, 读取定长文本 (), #右引号))
.判断 (等于 (a, 27)) ' 0x1B
    赋值 (文本, 取自定义常量名称 (读取整数 ()))
    .如果真 (不等于 (文本, “”))
        返回 (文本)
    .如果真结束
    赋值 (类_分析位置, 相减 (类_分析位置, 4)) ' 尝试失败，倒回去
    
.判断 (等于 (a, 28)) ' 0x1C
    赋值 (b, 读取整数 ())
    赋值 (c, 位与 (b, 65535))
    .如果真 (并且 (大于 (c, 0), 小于或等于 (c, 取数组成员数 (类_支持库))))
        赋值 (文本, 支持库常量查询 (类_支持库 [c], 位与 (右移 (b, 16), 65535)))
        返回 (相加 (“#”, 文本))
    .如果真结束
    赋值 (类_分析位置, 相减 (类_分析位置, 4)) ' 尝试失败，倒回去
    
.判断 (等于 (a, 29)) ' 0x1D
    赋值 (b, 读取字节 ())
    检查 (等于 (b, 56)) ' 0x38
    返回 (取变量名称 (局部对象, 读取整数 ()))
    
.判断 (等于 (a, 30)) ' 0x1E
    赋值 (b, 寻找对象 (读取整数 ()))
    .如果真 (并且 (大于 (b, 0), 小于或等于 (b, 取数组成员数 (类_对象))))
        返回 (相加 (“&”, 类_对象 [b], 名称))
    .如果真结束
    
.判断 (等于 (a, 31))
    返回 (“{ ”)
.判断 (等于 (a, 32))
    返回 (“ }”)
.判断 (等于 (a, 33)) ' 0x21
    赋值 (b, 读取整数 ())
    赋值 (c, 读取短整数 ())
    赋值 (文本, 取函数名称 (c, b))
    检查 (不等于 (文本, “”))
    赋值 (类_分析位置, 相加 (类_分析位置, 10))
    赋值 (函数, 相加 (文本, “ (”))
    赋值 (文本, 读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员))
    .判断循环首 (并且 (等于 (解析出错, 假), 不等于 (文本, “)”)))
        .判断开始 (前置)
            赋值 (函数, 相加 (文本, “.”, 函数))
        .判断 (成员)
            赋值 (函数, 相加 (函数, “.”, 文本))
        .默认
            赋值 (函数, 函数追加参数 (函数, 文本))
        .判断结束
        
        赋值 (文本, 读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员))
    .判断循环尾 ()
    返回 (相加 (函数, “)”))
    
.判断 (等于 (a, 35)) ' 0x23
    赋值 (b, 读取整数 ())
    赋值 (c, 读取整数 ())
    返回 (相加 (“#”, 取数据类型成员名称 (b, c, 真)))
    
.判断 (等于 (a, 54)) ' 0x36       不太确定，函数的参数列表之前是这个
    返回 (读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员))
.判断 (等于 (a, 55)) ' 0x37       不太确定，类的方法参数列表有一个是 0x38  剩下的 0x37
    返回 (读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员))
.判断 (等于 (a, 56)) ' 0x38
    赋值 (前置对象, 真)
    赋值 (文本, 取变量名称 (局部对象, 读取整数 ()))
    .如果真 (不等于 (文本, “”))
        返回 (文本)
    .如果真结束
    赋值 (类_分析位置, 相加 (类_分析位置, 1))
    返回 (读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员))
    
.判断 (等于 (a, 57)) ' 0x39
    赋值 (b, 读取整数 ())
    赋值 (c, 读取整数 ())
    赋值 (成员符号, 真)
    返回 (取数据类型成员名称 (c, b))
    
.判断 (等于 (a, 58)) ' 0x3A
    返回 (相加 (“ [”, 读取代码对象 (局部对象, 相加 (递归次数, 1), 前置, 解析出错, 成员), “]”))
.判断 (等于 (a, 59)) ' 0x3B
    返回 (到文本 (读取整数 ()))
.默认
    
.判断结束

输出调试文本 (相加 (“代码函数嵌套出错 ”, 到文本 (a)))
暂停 ()
赋值 (类_分析位置, 相减 (类_分析位置, 1))
赋值 (解析出错, 真)
返回 (“”)


.子程序 取数据类型成员名称, 文本型, , 
.参数 数据类型代号, 整数型, , 
.参数 成员代号, 整数型, , 
.参数 包括类型名称, 逻辑型, 可空, 

.局部变量 对象, 标识符数据, , , 
.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (i, 右移 (数据类型代号, 16))
赋值 (n, 位与 (数据类型代号, 65535))
.如果真 (并且 (大于 (i, 0), 小于 (i, 取数组成员数 (类_支持库))))
    .如果 (包括类型名称)
        赋值 (文本, 相加 (支持库数据类型查询 (类_支持库 [i], n), “.”))
    .否则
        赋值 (文本, “”)
    .如果结束
    返回 (相加 (文本, 支持库数据类型成员查询 (类_支持库 [i], n, 成员代号)))
.如果真结束

赋值 (i, 寻找对象 (数据类型代号))
.如果真 (或者 (小于 (i, 1), 大于 (i, 取数组成员数 (类_对象))))
    返回 (“”)
.如果真结束

赋值 (对象, 类_对象 [i])
.如果 (包括类型名称)
    赋值 (文本, 相加 (对象.名称, “.”))
.否则
    赋值 (文本, “”)
.如果结束

.计次循环首 (取数组成员数 (对象.局部变量), i)
    .如果真 (等于 (对象.局部变量 [i], 代号, 成员代号))
        返回 (相加 (文本, 对象.局部变量 [i], 名称))
    .如果真结束
    
.计次循环尾 ()
返回 (“”)


.子程序 取变量名称, 文本型, , 先寻找局部变量，再寻找 全局 程序集。。如果找到的对象不属于变量，或者没找到，返回空
.参数 局部变量, 局部变量数据, 数组, 
.参数 代号, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

.计次循环首 (取数组成员数 (局部变量), i)
    .如果真 (等于 (局部变量 [i], 代号, 代号))
        返回 (局部变量 [i], 名称)
    .如果真结束
    
.计次循环尾 ()
赋值 (n, 代号取对象类型 (代号))
.如果真 (并且 (不等于 (n, #代号_全局变量), 不等于 (n, #代号_程序集变量), 不等于 (n, #代号_控件资源), 不等于 (n, #代号_窗口资源)))
    返回 (“”)
.如果真结束

赋值 (i, 寻找对象 (代号))
.如果真 (并且 (大于 (i, 0), 小于或等于 (i, 取数组成员数 (类_对象))))
    返回 (类_对象 [i], 名称)
.如果真结束
返回 (“”)


.子程序 取自定义常量名称, 文本型, , 如果找到的对象不属于常量，或者没找到，返回空。返回文本包括“#”
.参数 代号, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (i, 寻找对象 (代号))
.如果真 (并且 (大于 (i, 0), 小于或等于 (i, 取数组成员数 (类_对象))))
    赋值 (n, 代号取对象类型 (类_对象 [i], 代号))
    .如果真 (或者 (等于 (n, #代号_常量资源), 等于 (n, #代号_图片资源), 等于 (n, #代号_声音资源)))
        返回 (相加 (“#”, 类_对象 [i], 名称))
    .如果真结束
    
.如果真结束
返回 (“”)


.子程序 取函数名称, 文本型, , 子程序、方法、支持库提供函数 等等等等
.参数 支持库索引, 整数型, , 
.参数 函数索引, 整数型, , 

.局部变量 文本, 文本型, , , 
.局部变量 n, 整数型, , , 

赋值 (支持库索引, 相加 (支持库索引, 1))
.如果真 (并且 (大于 (支持库索引, 0), 小于或等于 (支持库索引, 取数组成员数 (类_支持库))))
    赋值 (文本, 支持库函数查询 (类_支持库 [支持库索引], 函数索引))
    .如果真 (等于 (文本, “”))
        赋值 (文本, 相加 (“未知支持库函数_”, 到文本 (函数索引)))
    .如果真结束
    返回 (文本)
.如果真结束

.如果真 (等于 (函数索引, 0))
    返回 (“”)
.如果真结束

赋值 (n, 寻找对象 (函数索引))
.如果真 (并且 (大于 (n, 0), 小于或等于 (n, 取数组成员数 (类_对象))))
    返回 (类_对象 [n], 名称)
.如果真结束

返回 (相加 (“未知函数_”, 到文本 (函数索引)))


.子程序 模块到文本, 文本型, , 
.参数 模块, 标识符数据, , 

.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 

 ' 基类对象
.如果真 (并且 (等于 (代号取对象类型 (模块.代号), #代号_类模块), 不等于 (模块.附加整数, 0), 不等于 (模块.附加整数, -1)))
    赋值 (i, 寻找对象 (模块.附加整数))
    .如果真 (并且 (大于 (i, 0), 小于或等于 (i, 取数组成员数 (类_对象))))
        赋值 (文本, 类_对象 [i], 名称)
    .如果真结束
    
.如果真结束
赋值 (文本, 相加 (#换行符, #换行符, “.”, 代号取对象类型名 (模块.代号), “ ”, 模块.名称, “, ”, 文本, “, , ”, 模块.注释, #换行符, #换行符))

.计次循环首 (取数组成员数 (模块.包含对象), i)
    赋值 (n, 寻找对象 (模块.包含对象 [i]))
    .如果真 (并且 (大于 (n, 0), 小于或等于 (n, 取数组成员数 (类_对象))))
        .如果 (等于 (代号取对象类型 (类_对象 [n], 代号), #代号_子程序))
            赋值 (文本, 相加 (文本, 子程序到文本 (类_对象 [n]), #换行符))
        .否则
            赋值 (文本, 相加 (文本, 模块成员变量到文本 (类_对象 [n]), #换行符))
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (文本)



 ' 不属于任何一个程序集、类模块的函数：
