 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 旅游最省钱路径
 ' 程序描述：设有n个城市（或景点），今从某市出发旅游各城市，使之旅费最少（即找出一条旅费最少的路径）。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 426
    高度 = 352
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 旅游最省钱路径”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 5 扩展界面支持库三
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一





.窗口程序集 启动窗口程序集, , , 

.程序集变量 模拟城市数组, 整数型, , "8,8",  模拟8个城市的邻接关系
.程序集变量 临时城市数组, 整数型, , "8,8", 临时存储模拟城市数组
.程序集变量 试探行号, 整数型, , , 当前所要试探的城市编号
.程序集变量 总旅费, 整数型, , , 当前的旅费总数
.程序集变量 已比较列数组, 整数型, , "0", 标志与数组下标相同的城市是否已走过
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：分枝界定法
 ' 问题：旅游路线选择
 ' 问题描述：
 ' 设有1个城市（或景点），今从某市出发遍历各城市，使之旅费最少（即找出一条旅费相对少的路径）。
 ' 问题分析：
 ' 分枝定界（branch and bound）是另一种系统地搜索解空间的方法，它与回溯法的主要区别在于对E-节点的扩充方式。每个活节点有且仅有一次机会变成E-节点。当一个节点变为E-节点时，则生成从该节点移动一步即可到达的所有新节点。在生成的节点中，抛弃那些不可能导出（最优）可行解的节点，其余节点加入活节点表，然后从表中选择一个节点作为下一个E-节点。从活节点表中取出所选择的节点并进行扩充，直到找到解或活动表为空，扩充过程才结束。

 ' 提示： 设矩阵元素aij 表示从第i号城市到第j号城市之旅费。并设城市间往返旅费可以不等（即aij ≠aji ）。aii 是没有意义的，由于问题是求最少，因此aii 不应为零，今试为无穷（∞）。各城市间旅费如下表：
 ' ∞   17  13  24  10
 ' 10  ∞  20   9   6
 ' 17  29  ∞  21  28
 ' 12  10  22  ∞  19
 ' 12  18  31  20  ∞
 ' 问题的算法是在表每行中找最小元素，并用该数减该行非∞元素。再对每列也施同样工作，形成一个新表（保证每行、每列均不少于1个为零），所有减数累加为min（其含义为旅费下界，即旅费不会少于min）。旅行路程因成环路，故可设起点是第0号城市。若选第i号到第j号城市，则表上bij 表示还需旅费，同时由于选了i→j，则i不可能再选向其它城市，则第i行全填∞，同理，由于j已由i过来，则第j城市不可能再由其它城市过来，第j列也全填上∞。对新矩阵再施每行至少有一个0，每列至少有一个0，找出余下城市遍历所需旅费下界mj 。对于不同的j，比较mj +bij 以最小的一个为选定从i到达的城市，并将选择路径记下。
 ' 备注：

初始化子程序 ()

.子程序 初始化子程序, 空白型, , 组件恢复没有计算时的状态
.局部变量 行号, 整数型, , , 数组下标变量
.局部变量 列号, 整数型, , , 数组下标变量
.局部变量 旅费, 整数型, , , 随机产生

.计次循环首 (取表项数 (), ) ' 删除超级列表框表项
    0.删除表项 ()
.计次循环尾 ()
重定义数组 (模拟城市数组, 假, 8, 8)
清除数组 (已比较列数组)
.计次循环首 (8, 行号)
    .插入表项 (相加 (到文本 (行号), “|”), , , , ) ' 标出行号
    .计次循环首 (8, 列号)
        .判断开始 (等于 (列号, 行号))
            相减 (行号, 1).置标题 (列号, “∞”)
            赋值 (模拟城市数组 [行号] [列号], 9999) ' 同一城市旅费为无限大
        .默认
            
            赋值 (旅费, 取随机数子程序 ()) ' 随机产生城市之间的旅行花费
            相减 (行号, 1).置标题 (列号, 到文本 (旅费)) ' 在超级列表框中显示
            赋值 (模拟城市数组 [行号] [列号], 旅费) ' 把旅费存入数组
        .判断结束
        
    .计次循环尾 ()
.计次循环尾 ()

赋值 (.内容, “”)

.子程序 取随机数子程序, 整数型, , 获得一个随机的旅费
.局部变量 随机数, 整数型, , , 

置随机数种子 ()
赋值 (随机数, 取随机数 (1, 50)) ' 旅费在1到50元之间
返回 (随机数)

.子程序 _计算图形按钮_被单击, 空白型, , 
赋值 (总旅费, 计算最少路费子程序 (模拟城市数组))
赋值 (试探行号, 1) ' 从1号城市开始
加入成员 (已比较列数组, 1) ' 标记第1列已经比较过
赋值 (.内容, “从1号城市开始：1号城市”)
.计次循环首 (7, ) ' 除1号城市外还剩7个城市
    试探下一步子程序 ()
.计次循环尾 ()
赋值 (.禁止, 真)

.子程序 计算最少路费子程序, 整数型, , 给定一个8*8的数组如果一行或一列不全是大于50的数并且最小的数不为0改变之
.参数 城市数组, 空白型, 数组, 给定一个城市路费关系数组

.局部变量 行号, 整数型, , , 数组下标
.局部变量 列号, 整数型, , , 数组下标
.局部变量 最少旅费, 整数型, , , 一行或一列中最小的数
.局部变量 旅费总数, 整数型, , , 一次改变后所减去的所有钱数

.计次循环首 (8, 行号) ' 遍历每一行
    赋值 (最少旅费, 10000) ' 必然大于所有可能的城市之间的旅费
    .计次循环首 (8, 列号) ' 找出当前城市到其它7个城市花费最少的旅费
        .如果真 (并且 (小于或等于 (城市数组 [行号] [列号], 50), 大于 (最少旅费, 城市数组 [行号] [列号])))
            赋值 (最少旅费, 城市数组 [行号] [列号])
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (小于或等于 (最少旅费, 50))
        .计次循环首 (8, 列号) ' 把当前城市到每个城市的旅费减少，产生一个花费为0的路径
            赋值 (城市数组 [行号] [列号], 相减 (城市数组 [行号] [列号], 最少旅费))
        .计次循环尾 ()
        赋值 (旅费总数, 相加 (旅费总数, 最少旅费)) ' 累积在数组中减去的最少旅费数
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (8, 列号) ' 遍历每一列，因为可能不同行为0的坐标列号相同
    赋值 (最少旅费, 10000) ' 必然大于所有可能的城市之间的旅费
    .计次循环首 (8, 行号) ' 找出到达当前城市的最少的旅费
        .如果真 (大于 (最少旅费, 城市数组 [行号] [列号]))
            赋值 (最少旅费, 城市数组 [行号] [列号])
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (并且 (不等于 (最少旅费, 0), 小于或等于 (最少旅费, 50))) ' 如果本列没有为0的旅费
        .计次循环首 (8, 行号) ' 把到当前城市的旅费减少，产生一个花费为0的路径
            赋值 (城市数组 [行号] [列号], 相减 (城市数组 [行号] [列号], 最少旅费))
        .计次循环尾 ()
        赋值 (旅费总数, 相加 (旅费总数, 最少旅费)) ' 累积在数组中减去的最少旅费数
    .如果真结束
    
.计次循环尾 ()
返回 (旅费总数)

.子程序 试探下一步子程序, 空白型, , 
.局部变量 试探列号, 整数型, , , 从数组第一列开始试探最小旅费
.局部变量 最小值, 整数型, , , 找到一个比当前旅费少的值
.局部变量 局部计次变量, 整数型, , , 
.局部变量 最小值行号, 整数型, , , 标记最小值在数组中的位置
.局部变量 最小值列号, 整数型, , , 标记最小值在数组中的位置
.局部变量 临时旅费变量, 整数型, , , 记录到该城市所需的旅费
.局部变量 是否比较, 逻辑型, , , 判断是否已被比较过了

赋值 (最小值, 9999)
.计次循环首 (8, 试探列号) ' 依次试探每一列
    赋值 (是否比较, 真)
    .计次循环首 (取数组成员数 (已比较列数组), 局部计次变量)
        .如果真 (等于 (已比较列数组 [局部计次变量], 试探列号))
            赋值 (是否比较, 假) ' 如果是已经改变过的行列则跳过
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (等于 (是否比较, 真)) ' 没有比较的行列
        赋值 (临时旅费变量, 模拟城市数组 [试探行号] [试探列号]) ' 获得到达该城市需要的最少旅费
        
        .如果真 (小于 (临时旅费变量, 最小值))
            赋值 (最小值, 临时旅费变量) ' 找到最旅费最小的城市
            赋值 (最小值行号, 试探行号) ' 标记数组下标
            赋值 (最小值列号, 试探列号) ' 标记数组下标
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (8, 局部计次变量) ' 把得到的最小值的行列标记为已比较过
    赋值 (模拟城市数组 [最小值行号] [局部计次变量], 9999)
    赋值 (模拟城市数组 [局部计次变量] [最小值列号], 9999)
.计次循环尾 ()
赋值 (总旅费, 相加 (总旅费, 计算最少路费子程序 (模拟城市数组))) ' 累积总旅行费用
相加 (“→”, 到文本 (最小值列号), “号城市”).加入文本 ()
加入成员 (已比较列数组, 最小值列号) ' 加入已比较过的列号
赋值 (试探行号, 最小值列号) ' 下一次比较改变后的城市

.子程序 _刷新图形按钮_被单击, 空白型, , 
赋值 (.禁止, 假)
初始化子程序 ()

.子程序 返回最小值子程序, 整数型, , 
.参数 列号, 空白型, , 
.参数 城市数组, 空白型, 数组, 给定一个城市旅费关系数组

.局部变量 临时费用值, 空白型, , , 

赋值 (临时费用值, 城市数组 [试探行号] [列号])
返回 (临时费用值)


 ' 不属于任何一个程序集、类模块的函数：
