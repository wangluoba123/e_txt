 ' 文件类型：Windows模块源码

 ' 程序名称：winio模拟键盘
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库





.DLL命令 InstallWinIoDriver, 逻辑型, "WinIo.dll", "InstallWinIoDriver", , 安装WinIo驱动(忽略)
    .参数 DriverPath, 文本型, , 
    .参数 Mode, 短整数型, , 

.DLL命令 RemoveWinIoDriver, 逻辑型, "WinIo.dll", "RemoveWinIoDriver", , 卸载WinIo驱动(忽略)

.DLL命令 openwinio, 逻辑型, "WinIo.dll", "InitializeWinIo", , 初始化WioIO库。调用成功，返回非零值

.DLL命令 closewinio, 逻辑型, "WinIo.dll", "ShutdownWinIo", , 在内存中关闭清除WinIO库

.DLL命令 读端口, 逻辑型, "WinIo.dll", "GetPortVal", , 从一个输入或输出端口读取一个字节/字/双字数据。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, 传址, 指向双字变量的指针，接收从端口得到的数据。
    .参数 bSize, 字节型, , 需要读的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 写端口, 逻辑型, "WinIo.dll", "SetPortVal", , 将一个字节/字/双字的数据写入输入或输出接口。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, , 要写入的数据
    .参数 bSize, 字节型, , 需要写入的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 开始内存映射, 整数型, "WinIo.dll", "MapPhysToLin", , 将物理内存的一部分映射到一个32位程序的线性地址空间。成功返回一个与物理地址相关的线性地址，错误返回NULL
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysSize, 整数型, , 需要映射的字节数
    .参数 PhysMemHandle, 整数型, 传址, 变量指针，如果调用成功，负责接收物理内存句柄。(any)

.DLL命令 解除内存映射, 逻辑型, "WinIo.dll", "UnmapPhysicalMemory", , 解除使用MapPhysToLin映射的一段线性物理内存区域
    .参数 PhysMemHandle, 整数型, , 物理内存句柄(any)
    .参数 LinAddr, 整数型, , MapPhysToLin函数调用返回的线性地址

.DLL命令 读内存双字数据, 逻辑型, "WinIo.dll", "GetPhysLong", , 从指定的物理地址读取一个双字数据。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, 传址, 指向一个双字变量的指针，接收从物理内存中传来的数据。

.DLL命令 写内存双字数据, 逻辑型, "WinIo.dll", "SetPhysLong", , 将一个双字型数据写入指定的物理地址。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, , 指定待写入物理内存地址出的双字型数据。

.DLL命令 键码转换, 整数型, "", "MapVirtualKeyA", , 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
延时 (3000)
模拟按键wio (#A键)

.子程序 模拟按键wio, 空白型, 公开, 
.参数 键代码, 整数型, , 键代码
.参数 间隔, 整数型, 可空, 毫秒 如果为空 默认50

.如果真 (等于 (间隔, 0))
    赋值 (间隔, 50)
.如果真结束
置键盘按键 (取扫描码 (键代码, 真)) ' 按下
延时 (间隔)
置键盘按键 (取扫描码 (键代码, 假)) ' 弹起
延时 (间隔)


.子程序 开启winio, 空白型, 公开, 使用winio功能前必须要先 执行
.如果真 (等于 (openwinio (), 假))
    信息框 (“WinIO没有正常启动”, 0, )
.如果真结束


.子程序 关闭winio, 空白型, 公开, 卸载winio
closewinio ()

.子程序 置鼠标动作, 空白型, , 
.参数 鼠标动作, 整数型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 Z, 整数型, 可空, 保留，0

 ' 左键按下(鼠标动作=9)。X、Y、Z 为0
 ' 右键按下(鼠标动作=10)。X、Y、Z 为0
 ' 中键按下(鼠标动作=12)。X、Y、Z 为0
 ' 任意键放开(鼠标动作=8)。X、Y、Z 为0
 ' ------------------------------------
 ' 鼠标上移(鼠标动作=8)。Y为移动距离，最大为255，最小为1。X、Z 为0
 ' 鼠标下移(鼠标动作=40)。Y为移动距离，最大为1，最小为255。X、Z 为0
 ' 鼠标左移(鼠标动作=24)。X为移动距离，最大为1，最小为255。Y、Z 为0
 ' 鼠标右移(鼠标动作=8)。X为移动距离，最大为255，最小为1。Y、Z 为0
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, 鼠标动作, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, X, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, Y, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, Z, 1)


.子程序 置键盘按键, 空白型, , 
.参数 扫描码, 整数型, , 

等待空缓冲 () ' 等状态寄存器OBF变0
写端口 (100, 210, 1) ' 210（写键盘输出缓冲区），211（写鼠标输出缓冲区）。具体命令请参考《PS/2技术参考》第32页
等待空缓冲 ()
写端口 (96, 扫描码, 1) ' 写参数


.子程序 等待空缓冲, 空白型, , 等待输入缓冲器为空(Wait4IBE)
.局部变量 dwVal, 整数型, , , 

赋值 (dwVal, 0)
.循环判断首 ()
    读端口 (100, dwVal, 1) ' 读状态寄存器
.循环判断尾 (大于 (位与 (dwVal, 2), 0))


.子程序 取扫描码, 整数型, , 详细扫描码，请参考《PS/2技术参考》第52页--第1套扫描码。
.参数 键代码, 整数型, , 
.参数 是否通码, 逻辑型, , 真--按下（通码），假--放开（断码）。

.如果 (等于 (是否通码, 真))
    返回 (键码转换 (键代码, 0))
.否则
    返回 (位或 (键码转换 (键代码, 0), 128))
.如果结束



 ' 不属于任何一个程序集、类模块的函数：
