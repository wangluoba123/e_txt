 ' 文件类型：未知类型

 ' 程序名称：红尘丶自用
 ' 程序描述：红尘丶自用易模块
@备注:
红尘丶自用易模块
 ' 程序作者：红尘丶QQ：625999902
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：本模块仅用于学习交流，用于非法用途后果自负!
 ' 版本号：1.2
 ' 创建号：1.0



.常量 TYPE_BYTE, "0", , 
.常量 TYPE_DOUBLE, "5", , 
.常量 TYPE_FLOAT, "4", , 
.常量 TYPE_INT, "2", , 
.常量 TYPE_JCE_MAX_STRING_LENGTH, "104857600", , 
.常量 TYPE_LIST, "9", , 
.常量 TYPE_LONG, "3", , 
.常量 TYPE_MAP, "8", , 
.常量 TYPE_SHORT, "1", , 
.常量 TYPE_SIMPLE_LIST, "13", , 
.常量 TYPE_STRING1, "6", , 
.常量 TYPE_STRING4, "7", , 
.常量 TYPE_STRUCT_BEGIN, "10", , 
.常量 TYPE_STRUCT_END, "11", , 
.常量 TYPE_ZERO_TAG, "12", , 
.常量 , , , 
.常量 , , , 
.常量 INTERNET_FLAG_RELOAD, "2147483648", , 
.常量 INTERNET_COOKIE_THIRD_PARTY, "16", , 运行第三方COOKIE
.常量 INTERNET_FLAG_NO_COOKIES, "524288", , 
.常量 INTERNET_FLAG_NO_CACHE_WRITE, "67108864", , 0x04000000
.常量 INTERNET_FLAG_NO_AUTO_REDIRECT, "2097152", , HttpSendRequest、InternetOpenUrl 不自动处理重定向
.常量 INTERNET_FLAG_SECURE, "8388608", , SSL访问
.常量 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP, "32768", , 禁用检测这一特殊类型的重新传入。当这个标志使用,WinINet透明允许将从HTTPS to HTTP的网址。这个标志可以使用的,HttpOpenRequest InternetOpenUrl
.常量 INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS, "16384", , 禁用检测这一特殊类型的重新传入。当这个标志使用,WinINet透明允许将从HTTP到HTTPS网址。这个标志可以使用的,HttpOpenRequest InternetOpenUrl
.常量 INTERNET_FLAG_PASSIVE, "134217728", , FTP连接被动模式
.常量 , , , 
.常量 WINHTTP_ACCESS_TYPE_NO_PROXY, "1", , 直接访问，不使用代理。
.常量 WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, "2", , 通过静态代理或注册表配置的代理访问。不继承和不共享IE的代理设置，调用WinHttpSetDefaultProxyConfiguration进行设置。
.常量 WINHTTP_ACCESS_TYPE_NAMED_PROXY, "3", , 通过指定名称的代理访问。
.常量 INTERNET_SCHEME_HTTPS, "2", , 
.常量 INTERNET_SCHEME_HTTP, "1", , 
.常量 WINHTTP_NO_REFERER, "0", , 没有来源页面
.常量 WINHTTP_DEFAULT_ACCEPT_TYPES, "0", , 默认文件类型
.常量 WINHTTP_FLAG_SECURE, "8388608", , SSL/TLS安全超文本协议。
.常量 WINHTTP_AUTH_TARGET_SERVER, "0", , 验证目标：网站服务器。
.常量 WINHTTP_AUTH_TARGET_PROXY, "1", , 验证目标：代理服务器。
.常量 WINHTTP_AUTH_SCHEME_BASIC, "1", , 基本认证方式(BASE64加密)。
.常量 WINHTTP_OPTION_DISABLE_FEATURE, "63", , 禁用功能
.常量 WINHTTP_OPTION_ENABLE_FEATURE, "79", , 
.常量 WINHTTP_DISABLE_COOKIES, "1", , 禁用自动设置COOKIES
.常量 WINHTTP_DISABLE_REDIRECTS, "2", , 禁用重定向
.常量 WINHTTP_ADDREQ_FLAG_ADD, "536870912", , 添加一个协议头，如果协议头已存在则被新值替换，与WINHTTP_ADDREQ_FLAG_REPLACE标志一起使用。
.常量 WINHTTP_ADDREQ_FLAG_REPLACE, "-2147483648", , 替换或者删除一个协议头，如果值为空则删除，否则被替换。
.常量 WINHTTP_QUERY_RAW_HEADERS_CRLF, "22", , 协议头以换行符分割
.常量 WINHTTP_NO_HEADER_INDEX, "0", , 没有协议索引
.常量 , , , 
.常量 , , , 
.常量 JS格式化, "“function ysjs(str){return jsmin("",str,2)}
String.prototype.has=function(c){return this.indexOf(c)>-1;};function jsmin(comment,input,level){if(input===undefined){input=comment;comment='';level=2;}else if(level===undefined||level<1||level>3){level=2;}if(comment.length>0){comment+='\n';}var a='',b='',EOF=-1,LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',DIGITS='0123456789',ALNUM=LETTERS+DIGITS+'_$\\',theLookahead=EOF;function isAlphanum(c){return c!=EOF&&(ALNUM.has(c)||c.charCodeAt(0)>126);}function get(){var c=theLookahead;if(get.i==get.l){return EOF;}theLookahead=EOF;if(c==EOF){c=input.charAt(get.i);++get.i;}if(c>=' '||c=='\n'){return c;}if(c=='\r'){return'\n';}return' ';}get.i=0;get.l=input.length;function peek(){theLookahead=get();return theLookahead;}function next(){var c=get();if(c=='/'){switch(peek()){case'/':for(;;){c=get();if(c<='\n'){return c;}}break;case'*':get();for(;;){switch(get()){case'*':if(peek()=='/'){get();return' ';}break;case EOF:throw'Error: Unterminated comment.';}}break;default:return c;}}return c;}function action(d){var r=[];if(d==1){r.push(a);}if(d<3){a=b;if(a=='\''||a=='"'){for(;;){r.push(a);a=get();if(a==b){break;}if(a<='\n'){throw'Error: unterminated string literal: '+a;}if(a=='\\'){r.push(a);a=get();}}}}b=next();if(b=='/'&&'(,=:[!&|'.has(a)){r.push(a);r.push(b);for(;;){a=get();if(a=='/'){break;}else if(a=='\\'){r.push(a);a=get();}else if(a<='\n'){throw'Error: unterminated Regular Expression literal';}r.push(a);}b=next();}return r.join('');}function m(){var r=[];a='\n';r.push(action(3));while(a!=EOF){switch(a){case' ':if(isAlphanum(b)){r.push(action(1));}else{r.push(action(2));}break;case'\n':switch(b){case'{':case'[':case'(':case'+':case'-':r.push(action(1));break;case' ':r.push(action(3));break;default:if(isAlphanum(b)){r.push(action(1));}else{if(level==1&&b!='\n'){r.push(action(1));}else{r.push(action(2));}}}break;default:switch(b){case' ':if(isAlphanum(a)){r.push(action(1));break;}r.push(action(3));break;case'\n':if(level==1&&a!='\n'){r.push(action(1));}else{switch(a){case'}':case']':case')':case'+':case'-':case'"':case'\'':if(level==3){r.push(action(3));}else{r.push(action(1));}break;default:if(isAlphanum(a)){r.push(action(1));}else{r.push(action(3));}}}break;default:r.push(action(1));break;}}}return r.join('');}jsmin.oldSize=input.length;ret=m(input);jsmin.newSize=ret.length;return comment+ret;}

function js_beautify(js_source_text,options){var input,output,token_text,last_type,last_text,last_last_text,last_word,flags,flag_store,indent_string;var whitespace,wordchar,punct,parser_pos,line_starters,digits;var prefix,token_type,do_block_just_closed;var wanted_newline,just_added_newline,n_newlines;var preindent_string='';options=options?options:{};var opt_brace_style;if(options.space_after_anon_function!==undefined&&options.jslint_happy===undefined){options.jslint_happy=options.space_after_anon_function}if(options.braces_on_own_line!==undefined){opt_brace_style=options.braces_on_own_line?"expand":"collapse"}opt_brace_style=options.brace_style?options.brace_style:(opt_brace_style?opt_brace_style:"collapse");var opt_indent_size=options.indent_size?options.indent_size:4,opt_indent_char=options.indent_char?options.indent_char:' ',opt_preserve_newlines=typeof options.preserve_newlines==='undefined'?true:options.preserve_newlines,opt_break_chained_methods=typeof options.break_chained_methods==='undefined'?false:options.break_chained_methods,opt_max_preserve_newlines=typeof options.max_preserve_newlines==='undefined'?false:options.max_preserve_newlines,opt_jslint_happy=options.jslint_happy==='undefined'?false:options.jslint_happy,opt_keep_array_indentation=typeof options.keep_array_indentation==='undefined'?false:options.keep_array_indentation,opt_space_before_conditional=typeof options.space_before_conditional==='undefined'?true:options.space_before_conditional,opt_unescape_strings=typeof options.unescape_strings==='undefined'?false:options.unescape_strings;just_added_newline=false;var input_length=js_source_text.length;function trim_output(eat_newlines){eat_newlines=typeof eat_newlines==='undefined'?false:eat_newlines;while(output.length&&(output[output.length-1]===' '||output[output.length-1]===indent_string||output[output.length-1]===preindent_string||(eat_newlines&&(output[output.length-1]==='\n'||output[output.length-1]==='\r')))){output.pop()}}function trim(s){return s.replace(/^\s\s*|\s\s*$/,'')}function split_newlines(s){s=s.replace(/\x0d/g,'');var out=[],idx=s.indexOf("\n");while(idx!==-1){out.push(s.substring(0,idx));s=s.substring(idx+1);idx=s.indexOf("\n")}if(s.length){out.push(s)}return out}function force_newline(){var old_keep_array_indentation=opt_keep_array_indentation;opt_keep_array_indentation=false;print_newline();opt_keep_array_indentation=old_keep_array_indentation}function print_newline(ignore_repeated,reset_statement_flags){flags.eat_next_space=false;if(opt_keep_array_indentation&&is_array(flags.mode)){return}ignore_repeated=typeof ignore_repeated==='undefined'?true:ignore_repeated;reset_statement_flags=typeof reset_statement_flags==='undefined'?true:reset_statement_flags;if(reset_statement_flags){flags.if_line=false;flags.chain_extra_indentation=0}trim_output();if(!output.length){return}if(output[output.length-1]!=="\n"||!ignore_repeated){just_added_newline=true;output.push("\n")}if(preindent_string){output.push(preindent_string)}for(var i=0;i<flags.indentation_level+flags.chain_extra_indentation;i+=1){output.push(indent_string)}if(flags.var_line&&flags.var_line_reindented){output.push(indent_string)}}function print_single_space(){if(last_type==='TK_COMMENT'){return print_newline()}if(flags.eat_next_space){flags.eat_next_space=false;return}var last_output=' ';if(output.length){last_output=output[output.length-1]}if(last_output!==' '&&last_output!=='\n'&&last_output!==indent_string){output.push(' ')}}function print_token(){just_added_newline=false;flags.eat_next_space=false;output.push(token_text)}function indent(){flags.indentation_level+=1}function remove_indent(){if(output.length&&output[output.length-1]===indent_string){output.pop()}}function set_mode(mode){if(flags){flag_store.push(flags)}flags={previous_mode:flags?flags.mode:'BLOCK',mode:mode,var_line:false,var_line_tainted:false,var_line_reindented:false,in_html_comment:false,if_line:false,chain_extra_indentation:0,in_case_statement:false,in_case:false,case_body:false,eat_next_space:false,indentation_level:(flags?flags.indentation_level+((flags.var_line&&flags.var_line_reindented)?1:0):0),ternary_depth:0}}function is_array(mode){return mode==='[EXPRESSION]'||mode==='[INDENTED-EXPRESSION]'}function is_expression(mode){return in_array(mode,['[EXPRESSION]','(EXPRESSION)','(FOR-EXPRESSION)','(COND-EXPRESSION)'])}function restore_mode(){do_block_just_closed=flags.mode==='DO_BLOCK';if(flag_store.length>0){var mode=flags.mode;flags=flag_store.pop();flags.previous_mode=mode}}function all_lines_start_with(lines,c){for(var i=0;i<lines.length;i++){var line=trim(lines[i]);if(line.charAt(0)!==c){return false}}return true}function is_special_word(word){return in_array(word,['case','return','do','if','throw','else'])}function in_array(what,arr){for(var i=0;i<arr.length;i+=1){if(arr[i]===what){return true}}return false}function look_up(exclude){var local_pos=parser_pos;var c=input.charAt(local_pos);while(in_array(c,whitespace)&&c!==exclude){local_pos++;if(local_pos>=input_length){return 0}c=input.charAt(local_pos)}return c}function get_next_token(){var i;var resulting_string;n_newlines=0;if(parser_pos>=input_length){return['','TK_EOF']}wanted_newline=false;var c=input.charAt(parser_pos);parser_pos+=1;var keep_whitespace=opt_keep_array_indentation&&is_array(flags.mode);if(keep_whitespace){var whitespace_count=0;while(in_array(c,whitespace)){if(c==="\n"){trim_output();output.push("\n");just_added_newline=true;whitespace_count=0}else{if(c==='\t'){whitespace_count+=4}else if(c==='\r'){}else{whitespace_count+=1}}if(parser_pos>=input_length){return['','TK_EOF']}c=input.charAt(parser_pos);parser_pos+=1}if(just_added_newline){for(i=0;i<whitespace_count;i++){output.push(' ')}}}else{while(in_array(c,whitespace)){if(c==="\n"){n_newlines+=((opt_max_preserve_newlines)?(n_newlines<=opt_max_preserve_newlines)?1:0:1)}if(parser_pos>=input_length){return['','TK_EOF']}c=input.charAt(parser_pos);parser_pos+=1}if(opt_preserve_newlines){if(n_newlines>1){for(i=0;i<n_newlines;i+=1){print_newline(i===0);just_added_newline=true}}}wanted_newline=n_newlines>0}if(in_array(c,wordchar)){if(parser_pos<input_length){while(in_array(input.charAt(parser_pos),wordchar)){c+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos===input_length){break}}}if(parser_pos!==input_length&&c.match(/^[0-9]+[Ee]$/)&&(input.charAt(parser_pos)==='-'||input.charAt(parser_pos)==='+')){var sign=input.charAt(parser_pos);parser_pos+=1;var t=get_next_token();c+=sign+t[0];return[c,'TK_WORD']}if(c==='in'){return[c,'TK_OPERATOR']}if(wanted_newline&&last_type!=='TK_OPERATOR'&&last_type!=='TK_EQUALS'&&!flags.if_line&&(opt_preserve_newlines||last_text!=='var')){print_newline()}return[c,'TK_WORD']}if(c==='('||c==='['){return[c,'TK_START_EXPR']}if(c===')'||c===']'){return[c,'TK_END_EXPR']}if(c==='{'){return[c,'TK_START_BLOCK']}if(c==='}'){return[c,'TK_END_BLOCK']}if(c===';'){return[c,'TK_SEMICOLON']}if(c==='/'){var comment='';var inline_comment=true;if(input.charAt(parser_pos)==='*'){parser_pos+=1;if(parser_pos<input_length){while(parser_pos<input_length&&!(input.charAt(parser_pos)==='*'&&input.charAt(parser_pos+1)&&input.charAt(parser_pos+1)==='/')){c=input.charAt(parser_pos);comment+=c;if(c==="\n"||c==="\r"){inline_comment=false}parser_pos+=1;if(parser_pos>=input_length){break}}}parser_pos+=2;if(inline_comment&&n_newlines===0){return['/*'+comment+'*/','TK_INLINE_COMMENT']}else{return['/*'+comment+'*/','TK_BLOCK_COMMENT']}}if(input.charAt(parser_pos)==='/'){comment=c;while(input.charAt(parser_pos)!=='\r'&&input.charAt(parser_pos)!=='\n'){comment+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos>=input_length){break}}if(wanted_newline){print_newline()}return[comment,'TK_COMMENT']}}if(c==="'"||c==='"'||(c==='/'&&((last_type==='TK_WORD'&&is_special_word(last_text))||(last_text===')'&&in_array(flags.previous_mode,['(COND-EXPRESSION)','(FOR-EXPRESSION)']))||(last_type==='TK_COMMA'||last_type==='TK_COMMENT'||last_type==='TK_START_EXPR'||last_type==='TK_START_BLOCK'||last_type==='TK_END_BLOCK'||last_type==='TK_OPERATOR'||last_type==='TK_EQUALS'||last_type==='TK_EOF'||last_type==='TK_SEMICOLON')))){var sep=c;var esc=false;var esc1=0;var esc2=0;resulting_string=c;if(parser_pos<input_length){if(sep==='/'){var in_char_class=false;while(esc||in_char_class||input.charAt(parser_pos)!==sep){resulting_string+=input.charAt(parser_pos);if(!esc){esc=input.charAt(parser_pos)==='\\';if(input.charAt(parser_pos)==='['){in_char_class=true}else if(input.charAt(parser_pos)===']'){in_char_class=false}}else{esc=false}parser_pos+=1;if(parser_pos>=input_length){return[resulting_string,'TK_STRING']}}}else{while(esc||input.charAt(parser_pos)!==sep){resulting_string+=input.charAt(parser_pos);if(esc1&&esc1>=esc2){esc1=parseInt(resulting_string.substr(-esc2),16);if(esc1&&esc1>=0x20&&esc1<=0x7e){esc1=String.fromCharCode(esc1);resulting_string=resulting_string.substr(0,resulting_string.length-esc2-2)+(((esc1===sep)||(esc1==='\\'))?'\\':'')+esc1}esc1=0}if(esc1){esc1++}else if(!esc){esc=input.charAt(parser_pos)==='\\'}else{esc=false;if(opt_unescape_strings){if(input.charAt(parser_pos)==='x'){esc1++;esc2=2}else if(input.charAt(parser_pos)==='u'){esc1++;esc2=4}}}parser_pos+=1;if(parser_pos>=input_length){return[resulting_string,'TK_STRING']}}}}parser_pos+=1;resulting_string+=sep;if(sep==='/'){while(parser_pos<input_length&&in_array(input.charAt(parser_pos),wordchar)){resulting_string+=input.charAt(parser_pos);parser_pos+=1}}return[resulting_string,'TK_STRING']}if(c==='#'){if(output.length===0&&input.charAt(parser_pos)==='!'){resulting_string=c;while(parser_pos<input_length&&c!=='\n'){c=input.charAt(parser_pos);resulting_string+=c;parser_pos+=1}output.push(trim(resulting_string)+'\n');print_newline();return get_next_token()}var sharp='#';if(parser_pos<input_length&&in_array(input.charAt(parser_pos),digits)){do{c=input.charAt(parser_pos);sharp+=c;parser_pos+=1}while(parser_pos<input_length&&c!=='#'&&c!=='=');if(c==='#'){}else if(input.charAt(parser_pos)==='['&&input.charAt(parser_pos+1)===']'){sharp+='[]';parser_pos+=2}else if(input.charAt(parser_pos)==='{'&&input.charAt(parser_pos+1)==='}'){sharp+='{}';parser_pos+=2}return[sharp,'TK_WORD']}}if(c==='<'&&input.substring(parser_pos-1,parser_pos+3)==='<!--'){parser_pos+=3;c='<!--';while(input.charAt(parser_pos)!=='\n'&&parser_pos<input_length){c+=input.charAt(parser_pos);parser_pos++}flags.in_html_comment=true;return[c,'TK_COMMENT']}if(c==='-'&&flags.in_html_comment&&input.substring(parser_pos-1,parser_pos+2)==='-->'){flags.in_html_comment=false;parser_pos+=2;if(wanted_newline){print_newline()}return['-->','TK_COMMENT']}if(c==='.'){return[c,'TK_DOT']}if(in_array(c,punct)){while(parser_pos<input_length&&in_array(c+input.charAt(parser_pos),punct)){c+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos>=input_length){break}}if(c===','){return[c,'TK_COMMA']}else if(c==='='){return[c,'TK_EQUALS']}else{return[c,'TK_OPERATOR']}}return[c,'TK_UNKNOWN']}indent_string='';while(opt_indent_size>0){indent_string+=opt_indent_char;opt_indent_size-=1}while(js_source_text&&(js_source_text.charAt(0)===' '||js_source_text.charAt(0)==='\t')){preindent_string+=js_source_text.charAt(0);js_source_text=js_source_text.substring(1)}input=js_source_text;last_word='';last_type='TK_START_EXPR';last_text='';last_last_text='';output=[];do_block_just_closed=false;whitespace="\n\r\t ".split('');wordchar='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$'.split('');digits='0123456789'.split('');punct='+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! !! , : ? ^ ^= |= ::';punct+=' <%= <% %> <?= <? ?>';punct=punct.split(' ');line_starters='continue,try,throw,return,var,if,switch,case,default,for,while,break,function'.split(',');flag_store=[];set_mode('BLOCK');parser_pos=0;while(true){var t=get_next_token();token_text=t[0];token_type=t[1];if(token_type==='TK_EOF'){break}switch(token_type){case'TK_START_EXPR':if(token_text==='['){if(last_type==='TK_WORD'||last_text===')'){if(in_array(last_text,line_starters)){print_single_space()}set_mode('(EXPRESSION)');print_token();break}if(flags.mode==='[EXPRESSION]'||flags.mode==='[INDENTED-EXPRESSION]'){if(last_last_text===']'&&last_text===','){if(flags.mode==='[EXPRESSION]'){flags.mode='[INDENTED-EXPRESSION]';if(!opt_keep_array_indentation){indent()}}set_mode('[EXPRESSION]');if(!opt_keep_array_indentation){print_newline()}}else if(last_text==='['){if(flags.mode==='[EXPRESSION]'){flags.mode='[INDENTED-EXPRESSION]';if(!opt_keep_array_indentation){indent()}}set_mode('[EXPRESSION]');if(!opt_keep_array_indentation){print_newline()}}else{set_mode('[EXPRESSION]')}}else{set_mode('[EXPRESSION]')}}else{if(last_word==='for'){set_mode('(FOR-EXPRESSION)')}else if(in_array(last_word,['if','while'])){set_mode('(COND-EXPRESSION)')}else{set_mode('(EXPRESSION)')}}if(last_text===';'||last_type==='TK_START_BLOCK'){print_newline()}else if(last_type==='TK_END_EXPR'||last_type==='TK_START_EXPR'||last_type==='TK_END_BLOCK'||last_text==='.'){if(wanted_newline){print_newline()}}else if(last_type!=='TK_WORD'&&last_type!=='TK_OPERATOR'){print_single_space()}else if(last_word==='function'||last_word==='typeof'){if(opt_jslint_happy){print_single_space()}}else if(in_array(last_text,line_starters)||last_text==='catch'){if(opt_space_before_conditional){print_single_space()}}print_token();break;case'TK_DOT':if(is_special_word(last_text)){print_single_space()}else if(last_text===')'){if(opt_break_chained_methods||wanted_newline){flags.chain_extra_indentation=1;print_newline(true,false)}}print_token();break;case'TK_END_EXPR':if(token_text===']'){if(opt_keep_array_indentation){if(last_text==='}'){remove_indent();print_token();restore_mode();break}}else{if(flags.mode==='[INDENTED-EXPRESSION]'){if(last_text===']'){restore_mode();print_newline();print_token();break}}}}restore_mode();print_token();break;case'TK_START_BLOCK':if(last_word==='do'){set_mode('DO_BLOCK')}else{set_mode('BLOCK')}if(opt_brace_style==="expand"||opt_brace_style==="expand-strict"){var empty_braces=false;if(opt_brace_style==="expand-strict"){empty_braces=(look_up()==='}');if(!empty_braces){print_newline(true)}}else{if(last_type!=='TK_OPERATOR'){if(last_text==='='||(is_special_word(last_text)&&last_text!=='else')){print_single_space()}else{print_newline(true)}}}print_token();if(!empty_braces){indent()}}else{if(last_type!=='TK_OPERATOR'&&last_type!=='TK_START_EXPR'){if(last_type==='TK_START_BLOCK'){print_newline()}else{print_single_space()}}else{if(is_array(flags.previous_mode)&&last_text===','){if(last_last_text==='}'){print_single_space()}else{print_newline()}}}indent();print_token()}break;case'TK_END_BLOCK':restore_mode();if(opt_brace_style==="expand"||opt_brace_style==="expand-strict"){if(last_text!=='{'){print_newline()}print_token()}else{if(last_type==='TK_START_BLOCK'){if(just_added_newline){remove_indent()}else{trim_output()}}else{if(is_array(flags.mode)&&opt_keep_array_indentation){opt_keep_array_indentation=false;print_newline();opt_keep_array_indentation=true}else{print_newline()}}print_token()}break;case'TK_WORD':if(do_block_just_closed){print_single_space();print_token();print_single_space();do_block_just_closed=false;break}prefix='NONE';if(token_text==='function'){if(flags.var_line&&last_type!=='TK_EQUALS'){flags.var_line_reindented=true}if((just_added_newline||last_text===';')&&last_text!=='{'&&last_type!=='TK_BLOCK_COMMENT'&&last_type!=='TK_COMMENT'){n_newlines=just_added_newline?n_newlines:0;if(!opt_preserve_newlines){n_newlines=1}for(var i=0;i<2-n_newlines;i++){print_newline(false)}}if(last_type==='TK_WORD'){if(last_text==='get'||last_text==='set'||last_text==='new'||last_text==='return'){print_single_space()}else{print_newline()}}else if(last_type==='TK_OPERATOR'||last_text==='='){print_single_space()}else if(is_expression(flags.mode)){}else{print_newline()}print_token();last_word=token_text;break}if(token_text==='case'||(token_text==='default'&&flags.in_case_statement)){print_newline();if(flags.case_body){flags.indentation_level--;flags.case_body=false;remove_indent()}print_token();flags.in_case=true;flags.in_case_statement=true;break}if(last_type==='TK_END_BLOCK'){if(!in_array(token_text.toLowerCase(),['else','catch','finally'])){prefix='NEWLINE'}else{if(opt_brace_style==="expand"||opt_brace_style==="end-expand"||opt_brace_style==="expand-strict"){prefix='NEWLINE'}else{prefix='SPACE';print_single_space()}}}else if(last_type==='TK_SEMICOLON'&&(flags.mode==='BLOCK'||flags.mode==='DO_BLOCK')){prefix='NEWLINE'}else if(last_type==='TK_SEMICOLON'&&is_expression(flags.mode)){prefix='SPACE'}else if(last_type==='TK_STRING'){prefix='NEWLINE'}else if(last_type==='TK_WORD'){if(last_text==='else'){trim_output(true)}prefix='SPACE'}else if(last_type==='TK_START_BLOCK'){prefix='NEWLINE'}else if(last_type==='TK_END_EXPR'){print_single_space();prefix='NEWLINE'}if(in_array(token_text,line_starters)&&last_text!==')'){if(last_text==='else'){prefix='SPACE'}else{prefix='NEWLINE'}}if(flags.if_line&&last_type==='TK_END_EXPR'){flags.if_line=false}if(in_array(token_text.toLowerCase(),['else','catch','finally'])){if(last_type!=='TK_END_BLOCK'||opt_brace_style==="expand"||opt_brace_style==="end-expand"||opt_brace_style==="expand-strict"){print_newline()}else{trim_output(true);print_single_space()}}else if(prefix==='NEWLINE'){if(is_special_word(last_text)){print_single_space()}else if(last_type!=='TK_END_EXPR'){if((last_type!=='TK_START_EXPR'||token_text!=='var')&&last_text!==':'){if(token_text==='if'&&last_word==='else'&&last_text!=='{'){print_single_space()}else{flags.var_line=false;flags.var_line_reindented=false;print_newline()}}}else if(in_array(token_text,line_starters)&&last_text!==')'){flags.var_line=false;flags.var_line_reindented=false;print_newline()}}else if(is_array(flags.mode)&&last_text===','&&last_last_text==='}'){print_newline()}else if(prefix==='SPACE'){print_single_space()}print_token();last_word=token_text;if(token_text==='var'){flags.var_line=true;flags.var_line_reindented=false;flags.var_line_tainted=false}if(token_text==='if'){flags.if_line=true}if(token_text==='else'){flags.if_line=false}break;case'TK_SEMICOLON':print_token();flags.var_line=false;flags.var_line_reindented=false;if(flags.mode==='OBJECT'){flags.mode='BLOCK'}break;case'TK_STRING':if(last_type==='TK_END_EXPR'&&in_array(flags.previous_mode,['(COND-EXPRESSION)','(FOR-EXPRESSION)'])){print_single_space()}else if(last_type==='TK_COMMENT'||last_type==='TK_STRING'||last_type==='TK_START_BLOCK'||last_type==='TK_END_BLOCK'||last_type==='TK_SEMICOLON'){print_newline()}else if(last_type==='TK_WORD'){print_single_space()}else{if(opt_preserve_newlines&&wanted_newline&&flags.mode!=='OBJECT'){print_newline();output.push(indent_string)}}print_token();break;case'TK_EQUALS':if(flags.var_line){flags.var_line_tainted=true}print_single_space();print_token();print_single_space();break;case'TK_COMMA':if(flags.var_line){if(is_expression(flags.mode)||last_type==='TK_END_BLOCK'){flags.var_line_tainted=false}if(flags.var_line_tainted){print_token();flags.var_line_reindented=true;flags.var_line_tainted=false;print_newline();break}else{flags.var_line_tainted=false}print_token();print_single_space();break}if(last_type==='TK_COMMENT'){print_newline()}if(last_type==='TK_END_BLOCK'&&flags.mode!=="(EXPRESSION)"){print_token();if(flags.mode==='OBJECT'&&last_text==='}'){print_newline()}else{print_single_space()}}else{if(flags.mode==='OBJECT'){print_token();print_newline()}else{print_token();print_single_space()}}break;case'TK_OPERATOR':var space_before=true;var space_after=true;if(is_special_word(last_text)){print_single_space();print_token();break}if(token_text==='*'&&last_type==='TK_DOT'&&!last_last_text.match(/^\d+$/)){print_token();break}if(token_text===':'&&flags.in_case){flags.case_body=true;indent();print_token();print_newline();flags.in_case=false;break}if(token_text==='::'){print_token();break}if(in_array(token_text,['--','++','!'])||(in_array(token_text,['-','+'])&&(in_array(last_type,['TK_START_BLOCK','TK_START_EXPR','TK_EQUALS','TK_OPERATOR'])||in_array(last_text,line_starters)||last_text==','))){space_before=false;space_after=false;if(last_text===';'&&is_expression(flags.mode)){space_before=true}if(last_type==='TK_WORD'&&in_array(last_text,line_starters)){space_before=true}if(flags.mode==='BLOCK'&&(last_text==='{'||last_text===';')){print_newline()}}else if(token_text===':'){if(flags.ternary_depth===0){if(flags.mode==='BLOCK'){flags.mode='OBJECT'}space_before=false}else{flags.ternary_depth-=1}}else if(token_text==='?'){flags.ternary_depth+=1}if(space_before){print_single_space()}print_token();if(space_after){print_single_space()}break;case'TK_BLOCK_COMMENT':var lines=split_newlines(token_text);var j;if(all_lines_start_with(lines.slice(1),'*')){print_newline();output.push(lines[0]);for(j=1;j<lines.length;j++){print_newline();output.push(' ');output.push(trim(lines[j]))}}else{if(lines.length>1){print_newline()}else{if(last_type==='TK_END_BLOCK'){print_newline()}else{print_single_space()}}for(j=0;j<lines.length;j++){output.push(lines[j]);output.push("\n")}}if(look_up('\n')!=='\n'){print_newline()}break;case'TK_INLINE_COMMENT':print_single_space();print_token();if(is_expression(flags.mode)){print_single_space()}else{force_newline()}break;case'TK_COMMENT':if(last_text===','&&!wanted_newline){trim_output(true)}if(last_type!=='TK_COMMENT'){if(wanted_newline){print_newline()}else{print_single_space()}}print_token();print_newline();break;case'TK_UNKNOWN':print_token();break}last_last_text=last_text;last_type=token_type;last_text=token_text}var sweet_code=preindent_string+output.join('').replace(/[\r\n ]+$/,'');return sweet_code}if(typeof exports!=="undefined"){exports.js_beautify=js_beautify}”", , ysjs(code)、js_beautify(code)
.常量 SW_SHOWDEFAULT, "10", 公开, 按默认状态显示
.常量 SEE_MASK_FLAG_DDEWAIT, "256", 公开, 0x00000100
.常量 js2, "“function get__count(c){var i=-2;for(v in c)i++;return i}if(typeof JSON!=='object'){JSON={}}(function(){'use strict';function f(n){return n<10?'0'+n:n}if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+f(this.getUTCMonth()+1)+'-'+f(this.getUTCDate())+'T'+f(this.getUTCHours())+':'+f(this.getUTCMinutes())+':'+f(this.getUTCSeconds())+'Z':null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf()}}var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+string+'"'}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key)}if(typeof rep==='function'){value=rep.call(holder,key,value)}switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null'}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null'}v=partial.length===0?'[]':gap?'[\n'+gap+partial.join(',\n'+gap)+'\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v}if(rep&&typeof rep==='object'){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v)}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v)}}}}v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+mind+'}':'{'+partial.join(',')+'}';gap=mind;return v}}if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' '}}else if(typeof space==='string'){indent=space}rep=replacer;if(replacer&&typeof replacer!=='function'&&(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}return str('',{'':value})}}if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==='object'){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v}else{delete value[k]}}}}return reviver.call(holder,key,value)}text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4)})}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j}throw new SyntaxError('JSON.parse');}}if(!Object.prototype.toJSONString){Object.prototype.toJSONString=function(filter){return JSON.stringify(this,filter)};Object.prototype.parseJSON=function(filter){return JSON.parse(this,filter)}}}());”", , 
.常量 json2, "“//  json2.js
//  2016-10-28
if (typeof JSON !== "object") {
    JSON = {};
}

(function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        return n < 10
            ? "0" + n
            : n;
    }

    function this_value() {
        return this.valueOf();
    }

    if (typeof Date.prototype.toJSON !== "function") {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + "-" +
                        f(this.getUTCMonth() + 1) + "-" +
                        f(this.getUTCDate()) + "T" +
                        f(this.getUTCHours()) + ":" +
                        f(this.getUTCMinutes()) + ":" +
                        f(this.getUTCSeconds()) + "Z"
                : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }

    var gap;
    var indent;
    var meta;
    var rep;


    function quote(string) {

        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string)
            ? "\"" + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === "string"
                    ? c
                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\""
            : "\"" + string + "\"";
    }


    function str(key, holder) {
        var i;
        var k;
        var v;
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];

        if (value && typeof value === "object" &&
                typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }

        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }

       switch (typeof value) {
        case "string":
            return quote(value);

        case "number":
            return isFinite(value)
                ? String(value)
                : "null";
        case "boolean":
        case "null":
            return String(value);
        case "object":
            if (!value) {
                return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }
                v = partial.length === 0
                    ? "[]"
                    : gap
                        ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                        : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            }
            v = partial.length === 0
                ? "{}"
                : gap
                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                    : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }
    if (typeof JSON.stringify !== "function") {
        meta = {    // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }
            } else if (typeof space === "string") {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" &&
                    (typeof replacer !== "object" ||
                    typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }
            return str("", {"": value});
        };
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" +
                            ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (
                rx_one.test(
                    text
                        .replace(rx_two, "@")
                        .replace(rx_three, "]")
                        .replace(rx_four, "")
                )
            ) {
                j = eval("(" + text + ")");
                return (typeof reviver === "function")
                    ? walk({"": j}, "")
                    : j;
            }
            throw new SyntaxError("JSON.parse");
        };
    }
}());”", , JSON官方JavaScript脚本
.常量 U码, "“function to16on(str){
    var a = [],i = 0;
    for (; 
    i < str.length ;
    ) a[i] = ("00" + str.charCodeAt(i ++).toString(16)).slice(-4);
    return "\\u" + a.join("\\u");
}
function to16un(str) {
    return unescape(str.replace(/\\/g, "%"));
}
function to10on(str){
    var a = [], i = 0;
    for (; 
    i < str.length ;
    ) a[i] = str.charCodeAt(i ++);
    return "&#" + a.join(";&#") + ";";
}
function to10un(str){
    return str.replace(/&#(x)?([^&]{1,5});?/g, function (a, b, c) {
        return String.fromCharCode(parseInt(c,b?16:10));
    });
}”", , U码转换，分别包含to16和to10
.常量 MACSet, "“Function MACAddress() 
Dim mc,mo
    Set mc=GetObject("Winmgmts:").InstancesOf("Win32_NetworkAdapterConfiguration")
    For Each mo In mc
        If mo.IPEnabled=True Then
           MACAddress= mo.MacAddress
           Exit For
        End If
    Next 
End Function”", , 
.常量 , , , 
.常量 , , , 
.常量 STD_OUTPUT_HANDLE, "-11", , 
.常量 EM_REPLACESEL, "194", , 
.常量 FOREGROUND_RED, "4", , 
.常量 FOREGROUND_INTENSITY, "8", , 
.常量 FOREGROUND_GREEN, "2", , 
.常量 FOREGROUND_BLUE, "1", , 
.常量 GMEM_MOVEABLE, "2", , 
.常量 , , , 
.常量 IP_SUCCESS, "0", , 
.常量 TIME_FORCE24HOURFORMAT, "8", , 0x00000008 ----强制使用24小时制。
.常量 , , , 
.常量 MAX_WBITS, "15", , 
.常量 Z_OK, "0", , 
.常量 Z_NO_FLUSH, "0", , 
.常量 Z_STREAM_END, "1", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库
 ' iconv {A0005538-9391-4dd9-B4D6-8EB7B9360F08} 2 0 编码转换支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 2 0 数据操作支持库一
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库




数据类型 HeadData, , 
    .成员 type, 字节型, , , 
    .成员 tag, 整数型, , , 1-10

数据类型 z_stream, , 56
    .成员 next_in, 整数型, , , 
    .成员 avail_in, 整数型, , , 
    .成员 total_in, 整数型, , , 
    .成员 next_out, 整数型, , , 
    .成员 avail_out, 整数型, , , 
    .成员 total_out, 整数型, , , 
    .成员 msg, 整数型, , , 
    .成员 state, 整数型, , , 
    .成员 zalloc, 整数型, , , 
    .成员 zfree, 整数型, , , 
    .成员 opaque, 整数型, , , 
    .成员 data_type, 整数型, , , 
    .成员 adler, 整数型, , , 
    .成员 reserved, 整数型, , , 

数据类型 JceMap, , 
    .成员 key_type, 字节型, , , 
    .成员 key, 字节集, , , 
    .成员 val_type, 字节型, , , 
    .成员 val, 字节集, , , 

数据类型 URL_COMPONENTS, 公开, 
    .成员 dwStructSize, 空白型, , , 本结构长度，注：60
    .成员 lpszScheme, 空白型, , , 协议类型
    .成员 dwSchemeLength, 空白型, , , 协议类型缓冲区长度
    .成员 nScheme, 空白型, , , 链接类型，1=http，2=https。（INTERNET_SCHEME_HTTP=1，INTERNET_SCHEME_HTTPS=2）
    .成员 lpszHostName, 空白型, , , 主机域名(Host)
    .成员 dwHostNameLength, 空白型, , , 主机域名缓冲区长度
    .成员 nPort, 空白型, , , 端口
    .成员 lpszUserName, 空白型, , , 帐号
    .成员 dwUserNameLength, 空白型, , , 帐号缓冲区长度
    .成员 lpszPassword, 空白型, , , 密码
    .成员 dwPasswordLength, 空白型, , , 密码缓冲区长度
    .成员 lpszUrlPath, 空白型, , , 路径(页面地址)
    .成员 dwUrlPathLength, 空白型, , , 路径缓冲区长度
    .成员 lpszExtraInfo, 空白型, , , 额外信息，比如“?”或“#”之后的参数字符串。
    .成员 dwExtraInfoLength, 空白型, , , 额外信息长度

数据类型 精易_进程信息列表, 公开, 
    .成员 dwSize, 整数型, , , 1
    .成员 cntUsage, 整数型, , , 2
    .成员 进程ID, 整数型, , , 3
    .成员 th32DefaultHeapID, 整数型, , , 4
    .成员 th32ModuleID, 整数型, , , 5
    .成员 cntThreads, 整数型, , , 6
    .成员 th32ParentProcessID, 整数型, , , 7
    .成员 pcPriClassBase, 整数型, , , 8
    .成员 dwFlags, 整数型, , , 9
    .成员 进程名称, 字节型, , "256", 10

数据类型 精易_进程结构, 公开, 
    .成员 进程句柄, 整数型, , , hProcess
    .成员 线程句柄, 整数型, , , hThread
    .成员 进程标识符, 整数型, , , dwProcessId
    .成员 线程标识符, 整数型, , , dwThreadId

数据类型 StartupInfo, 公开, 
    .成员 cbSize, 整数型, , , 
    .成员 lpReserved, 整数型, , , 
    .成员 lpDesktop, 整数型, , , 
    .成员 lpTitle, 整数型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 长整数型, , , 
    .成员 cbReserved2, 长整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 系统时间, , 系统时间;
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 天, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 精易_时间, 公开, , SYSTEMTIME
    .成员 年, 短整数型, , , wYear
    .成员 月, 短整数型, , , wMonth
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , wDay
    .成员 时, 短整数型, , , wHour
    .成员 分, 短整数型, , , wMinute
    .成员 秒, 短整数型, , , wSecond
    .成员 毫, 短整数型, , , wMilliseconds

数据类型 IP_ADAPTER_INFO, , 
    .成员 Next, 整数型, , , 
    .成员 ComboIndex, 整数型, , , 
    .成员 AdapterName, 字节型, , "260", 名称
    .成员 Description, 字节型, , "132", 描述
    .成员 AddressLength, 整数型, , , 
    .成员 Address, 字节型, , "8", 
    .成员 Index, 整数型, , , 
    .成员 Type, 整数型, , , 类型
    .成员 DhcpEnabled, 整数型, , , 
    .成员 CurrentIpAddress, 整数型, , , 
    .成员 IpAddressList, IP_ADDR_STRING, , , 
    .成员 GatewayList, IP_ADDR_STRING, , , 
    .成员 DhcpServer, IP_ADDR_STRING, , , 
    .成员 HaveWins, 逻辑型, , , 
    .成员 PrimaryWinsServer, IP_ADDR_STRING, , , 
    .成员 SecondaryWinsServer, IP_ADDR_STRING, , , 
    .成员 LeaseObtained, 整数型, , , 
    .成员 LeaseExpires, 整数型, , , 

数据类型 IP_ADDR_STRING, , 
    .成员 Next, 整数型, , , 
    .成员 IpAddress, 字节型, , "16", 
    .成员 IpMask, 字节型, , "16", 
    .成员 Context, 整数型, , , 

数据类型 ADSL拨号0, , 
    .成员 结构的大小, 整数型, , , 该结构的大小（以字节为单位）
    .成员 访问的入口名, 字节型, , "257", 表示一个远程访问的入口名,拨号网络中的连接图标小的文字,空表示仅与第一个有效的MODEM建立远程连接
    .成员 呼叫的号码, 字节型, , "129", 表示呼叫的号码,szEntryName为空时,该元素不能为空
    .成员 回叫号码, 字节型, , "129", 表示回叫号码,一般都设为空
    .成员 指定用户名称, 字节型, , "257", 指定用户名称
    .成员 指定用户密码, 字节型, , "257", 指定用户密码
    .成员 指定域, 字节型, , "16", 指定域

数据类型 取连接信息用结构, , ADSL拨号1
    .成员 内存大小, 整数型, , , 该结构占内存大小
    .成员 拨号连接名称, 字节型, , "255", 拨号连接名称
    .成员 缓冲区的大小, 字节型, , , 缓冲区的大小
    .成员 连接的个数, 文本型, , , 实际的连接的个数

数据类型 ADSL拨号2, , 
    .成员 data1, 整数型, , , 
    .成员 data2, 短整数型, , , 
    .成员 data3, 短整数型, , , 
    .成员 data4, 字节型, , "8", 

数据类型 ADSL拨号3, , 
    .成员 a, 字节型, , , 
    .成员 b, 字节型, , , 
    .成员 c, 字节型, , , 
    .成员 d, 字节型, , , 

数据类型 LSA_UNICODE_STRING, , 
    .成员 长度, 短整数型, , , 
    .成员 最大长度, 短整数型, , , 
    .成员 缓冲区, 字节集, , , 

数据类型 创建连接所用结构, , ADSL拨号4
    .成员 dwSize, 整数型, , , 
    .成员 dwfOptions, 整数型, , , 
    .成员 dwCountryID, 整数型, , , 
    .成员 dwCountryCode, 整数型, , , 
    .成员 szAreaCode, 字节型, , "8", 
    .成员 szLocalPhoneNumber, 字节型, , "132", 
    .成员 dwAlternateOffset, 整数型, , , 
    .成员 ipaddr, ADSL拨号3, , , 
    .成员 ipaddrDns, ADSL拨号3, , , 
    .成员 dbury, ADSL拨号3, , , 
    .成员 ipaddrWins, ADSL拨号3, , , 
    .成员 ipaddrWinsAlt, ADSL拨号3, , , 
    .成员 dwFrameSize, 整数型, , , 
    .成员 hr57hfb, 整数型, , , 
    .成员 dwFramingProtocol, 整数型, , , 
    .成员 szScript, 字节型, , "260", 
    .成员 szAutodialDll, 字节型, , "260", 
    .成员 d75hdrb, 字节型, , "260", 
    .成员 szDeviceType, 字节型, , "16", 
    .成员 szDeviceName, 字节型, , "132", 
    .成员 szX25PadType, 字节型, , "32", 
    .成员 sd5h7rd, 字节型, , "200", 
    .成员 szX25Facilities, 字节型, , "200", 
    .成员 szX25UserData, 字节型, , "204", 
    .成员 dwChannels, 整数型, , , 
    .成员 sd5rybh, 整数型, , , 
    .成员 dwReserved2, 整数型, , , 
    .成员 dwSubEntries, 整数型, , , 
    .成员 dwDialMode, 整数型, , , 
    .成员 dwDialExtraPercent, 整数型, , , 
    .成员 dbh5uy, 整数型, , , 
    .成员 dwHangUpExtraPercent, 整数型, , , 
    .成员 dwHangUpExtraSampleSeconds, 整数型, , , 
    .成员 dburgy, 整数型, , , 
    .成员 dwType, 整数型, , , 
    .成员 sdr5uyhbd, 整数型, , , 
    .成员 dwCustomAuthKey, 整数型, , , 
    .成员 guidId, ADSL拨号2, , , 
    .成员 szCustomDialDll, 字节型, , "260", 
    .成员 sbyhrs, 整数型, , , 
    .成员 dwfOptions2, 整数型, , , 
    .成员 dwfOptions3, 整数型, , , 
    .成员 szDnsSuffix, 字节型, , "256", 
    .成员 dwTcpWindowSize, 整数型, , , 
    .成员 szPrerequisitePbk, 字节型, , "260", 
    .成员 szPrerequisiteEntry, 字节型, , "260", 
    .成员 dwRedialCount, 整数型, , , 
    .成员 dwRedialPause, 整数型, , , 

数据类型 设置拨号所以结构, , ADSL拨号5
    .成员 dsubr, 整数型, , , 该结构的大小（以字节为单位）
    .成员 dwMask, 整数型, , , 
    .成员 szUserName, 字节型, , "257", 
    .成员 szPassword, 字节型, , "257", 
    .成员 szDomain, 字节型, , "16", 

数据类型 OSVersionInfo, , 
    .成员 版本信息大小, 整数型, , , 
    .成员 主版本, 整数型, , , 
    .成员 次版本, 整数型, , , 
    .成员 构造版本, 整数型, , , 
    .成员 平台标识符, 整数型, , , 
    .成员 CSD版本, 文本型, , , 

数据类型 RasEntry, , 
    .成员 dwSize, 整数型, , , 
    .成员 dwfOptions, 整数型, , , 
    .成员 dwCountryID, 整数型, , , 
    .成员 dwCountryCode, 整数型, , , 
    .成员 szAreaCode, 字节型, , "8", 
    .成员 szLocalPhoneNumber, 字节型, , "132", 
    .成员 dwAlternatesOffset, 整数型, , , 
    .成员 ipaddr, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrDns, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrDnsAlt, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrWins, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 ipaddrWinsAlt, ADSL拨号3, , , 未知类型：TRasIPAddr。
    .成员 dwFrameSize, 整数型, , , 
    .成员 dwfNetProtocols, 整数型, , , 
    .成员 dwFramingProtocol, 整数型, , , 
    .成员 szScript, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szAutodialDll, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szAutodialFunc, 字节型, , "260", 数组：MAX_PATH - 1+1。
    .成员 szDeviceType, 字节型, , "16", 
    .成员 szDeviceName, 字节型, , "132", 
    .成员 szX25PadType, 字节型, , "32", 
    .成员 szX25Address, 字节型, , "200", 
    .成员 szX25Facilities, 字节型, , "200", 
    .成员 szX25UserData, 字节型, , "204", 
    .成员 dwChannels, 整数型, , , 
    .成员 dwReserved1, 整数型, , , 
    .成员 dwReserved2, 整数型, , , 
    .成员 dwSubEntries, 整数型, , , 
    .成员 dwDialMode, 整数型, , , 
    .成员 dwDialExtraPercent, 整数型, , , 
    .成员 dwDialExtraSampleSeconds, 整数型, , , 
    .成员 dwHangUpExtraPercent, 整数型, , , 
    .成员 dwHangUpExtraSampleSeconds, 整数型, , , 
    .成员 dwIdleDisconnectSeconds, 整数型, , , 

数据类型 Stroks, , 
    .成员 名字, 文本型, , , 
    .成员 条目名字, 文本型, , , 
    .成员 用户, 文本型, , , 
    .成员 值, 文本型, , , 

数据类型 LSA_OBJECT_ATTRIBUTES, , 
    .成员 Length, 整数型, , , 
    .成员 RootDirectory, 整数型, , , 
    .成员 ObjectName, LSA_UNICODE_STRING, , , 未知类型：PLSA_UNICODE_STRING。
    .成员 Attributes, 整数型, , , 
    .成员 SecurityDescriptor, 整数型, 传址, , 此参数需传址。
    .成员 SecurityQualityOfService, 整数型, 传址, , 此参数需传址。


.DLL命令 CoInitialize, 空白型, "ole32.dll", "CoInitialize", 公开, 加载COM
    .参数 pvReserved, 整数型, , 值为0

.DLL命令 CoUninitialize, 空白型, "ole32.dll", "CoUninitialize", 公开, 卸载COM

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", , 

.DLL命令 inflateEnd, 整数型, "zlib.dll", "inflateEnd", , 
    .参数 strm, 未知类型0x41012C00, , 

.DLL命令 HeapReAlloc, 整数型, "kernel32.dll", "HeapReAlloc", , 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMem, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 inflate, 整数型, "zlib.dll", "inflate", , 
    .参数 strm, 未知类型0x41012C00, , 
    .参数 flush, 整数型, , 

.DLL命令 inflateInit_, 整数型, "zlib.dll", "inflateInit_", , 
    .参数 strm, 未知类型0x41012BFA, , 
    .参数 version, 文本型, , 
    .参数 stream_size, 整数型, , 

.DLL命令 inflateInit2_, 整数型, "zlib.dll", "inflateInit2_", , 
    .参数 strm, 未知类型0x41012BF0, , 
    .参数 windowBits, 整数型, , 
    .参数 version, 文本型, , 
    .参数 stream_size, 整数型, , 

.DLL命令 RtlMoveMemory_读字节型, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 字节型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 HeapFree, 逻辑型, "kernel32.dll", "HeapFree", , 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMem, 整数型, , 

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", , 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 InternetOpenA, 整数型, "wininet.dll", "InternetOpenA", 公开, Internet激活
    .参数 句柄名称, 文本型, 传址, 
    .参数 连接类型, 整数型, , 1直接连接;3代理连接
    .参数 代理地址, 文本型, 传址, 
    .参数 代理掩码, 文本型, 传址, 
    .参数 dwFlags, 整数型, , 0

.DLL命令 InternetCloseHandle, 逻辑型, "wininet.dll", "InternetCloseHandle", 公开, Internet关闭句柄
    .参数 句柄, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "wininet.dll", "InternetConnectA", 公开, Internet建立连接
    .参数 Internet句柄, 整数型, , 
    .参数 域名, 文本型, 传址, 
    .参数 服务器端口, 整数型, , 80HTTP;21FTP;
    .参数 用户名, 文本型, 传址, 空
    .参数 用户口令, 文本型, 传址, 空
    .参数 服务类型, 整数型, , 1FTP;3HTTP
    .参数 dwFlags, 整数型, , 0http;134217728被动FTP模式
    .参数 dwContext, 整数型, , 0

.DLL命令 HttpOpenRequestA, 整数型, "wininet.dll", "HttpOpenRequestA", 公开, Http创建请求
    .参数 Internet连接句柄, 整数型, , 由Internet建立连接返回
    .参数 访问方式, 文本型, 传址, "GET" or "POST"为空默认GET
    .参数 页面路径, 文本型, 传址, 简短路径,不带域名
    .参数 协议版本, 文本型, 传址, 为空默认HTTP/1.1
    .参数 引用页, 文本型, 传址, 可为空
    .参数 识别类型, 文本型, 传址, 可为空
    .参数 dwFlags, 整数型, , 2147483648更新下载
    .参数 dwContext, 整数型, , 0

.DLL命令 HttpSendRequestA, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, Http发送请求
    .参数 HTTP请求句柄, 整数型, , 
    .参数 附加协议头, 文本型, 传址, 
    .参数 附加协议头长度, 整数型, , 
    .参数 提交信息, 文本型, 传址, 
    .参数 提交信息长度, 整数型, , 

.DLL命令 HttpSendRequestA_字节集, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, Http发送请求
    .参数 HTTP请求句柄, 整数型, , 
    .参数 附加协议头, 文本型, 传址, 
    .参数 附加协议头长度, 整数型, , 
    .参数 提交信息, 字节集, 传址, 
    .参数 提交信息长度, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "wininet.dll", "InternetReadFile", 公开, Internet读文件
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sBuffer, 字节集, 传址, 
    .参数 lNumBytesToRead, 整数型, , 
    .参数 lNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "wininet.dll", "HttpQueryInfoA", 公开, HTTP查询信息
    .参数 Internet请求句柄, 整数型, , 
    .参数 待查信息, 整数型, , 22返回所有信息;43SET_COOKIE;+2147483648返回文本
    .参数 返回容器, 文本型, 传址, 
    .参数 返回容器长度, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 WinHttpCheckPlatform, 逻辑型, "Winhttp.dll", "WinHttpCheckPlatform", 公开, BOOL WinHttpCheckPlatform(void);

.DLL命令 WinHttpCrackUrl, 逻辑型, "Winhttp.dll", "", 公开, 
    .参数 pwszUrl, 字节集, , 
    .参数 dwUrlLength, 空白型, , 
    .参数 dwFlags, 空白型, , 
    .参数 lpUrlComponents, URL_COMPONENTS, , 

.DLL命令 WinHttpOpen, 整数型, "Winhttp.dll", "WinHttpOpen", 公开, HINTERNET WINAPI WinHttpOpen
    .参数 pwszUserAgent, 整数型, , __in_opt  LPCWSTR pwszUserAgent
    .参数 dwAccessType, 整数型, , __in      DWORD dwAccessType
    .参数 pwszProxyName, 字节集, , __in      LPCWSTR pwszProxyName
    .参数 pwszProxyBypass, 整数型, , __in      LPCWSTR pwszProxyBypass
    .参数 dwFlags, 整数型, , __in      DWORD dwFlags

.DLL命令 WinHttpConnect, 整数型, "Winhttp.dll", "WinHttpConnect", 公开, HINTERNET WINAPI WinHttpConnect
    .参数 hSession, 整数型, , __in        HINTERNET hSession
    .参数 pswzServerName, 字节集, , __in        LPCWSTR pswzServerName
    .参数 nServerPort, 整数型, , __in        INTERNET_PORT nServerPort
    .参数 dwReserved, 整数型, , __reserved  DWORD dwReserved

.DLL命令 WinHttpOpenRequest, 整数型, "Winhttp.dll", "WinHttpOpenRequest", 公开, HINTERNET WINAPI WinHttpOpenRequest
    .参数 hConnect, 整数型, , __in  HINTERNET hConnect
    .参数 pwszVerb, 字节集, , __in  LPCWSTR pwszVerb
    .参数 pwszObjectName, 字节集, , __in  LPCWSTR pwszObjectName
    .参数 pwszVersion, 空白型, , __in  LPCWSTR pwszVersion
    .参数 pwszReferrer, 整数型, , __in  LPCWSTR pwszReferrer
    .参数 ppwszAcceptTypes, 整数型, , __in  LPCWSTR *ppwszAcceptTypes
    .参数 dwFlags, 整数型, , __in  DWORD dwFlags

.DLL命令 WinHttpSetTimeouts, 逻辑型, "Winhttp.dll", "WinHttpSetTimeouts", 公开, BOOL WINAPI WinHttpSetTimeouts
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwResolveTimeout, 整数型, , __in  int dwResolveTimeout
    .参数 dwConnectTimeout, 整数型, , __in  int dwConnectTimeout
    .参数 dwSendTimeout, 整数型, , __in  int dwSendTimeout
    .参数 dwReceiveTimeout, 整数型, , __in  int dwReceiveTimeout

.DLL命令 WinHttpSetCredentials, 逻辑型, "Winhttp.dll", "WinHttpSetCredentials", , BOOL WINAPI WinHttpSetCredentials
    .参数 hRequest, 整数型, , __in        HINTERNET hRequest
    .参数 AuthTargets, 整数型, , __in        DWORD AuthTargets
    .参数 AuthScheme, 整数型, , __in        DWORD AuthScheme
    .参数 pwszUserName, 字节集, , __in        LPCWSTR pwszUserName
    .参数 pwszPassword, 字节集, , __in        LPCWSTR pwszPassword
    .参数 pAuthParams, 整数型, , __reserved  LPVOID pAuthParams

.DLL命令 WinHttpCloseHandle, 逻辑型, "Winhttp.dll", "WinHttpCloseHandle", 公开, BOOL WINAPI WinHttpCloseHandle
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet

.DLL命令 WinHttpSetOption, 逻辑型, "Winhttp.dll", "WinHttpSetOption", 公开, BOOL WINAPI WinHttpSetOption
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwOption, 整数型, , __in  DWORD dwOption
    .参数 lpBuffer, 整数型, 传址, __in  LPVOID lpBuffer
    .参数 dwBufferLength, 整数型, , __in  DWORD dwBufferLength

.DLL命令 WinHttpAddRequestHeaders, 逻辑型, "Winhttp.dll", "WinHttpAddRequestHeaders", 公开, BOOL WINAPI WinHttpAddRequestHeaders
    .参数 hRequest, 整数型, , __in  HINTERNET hRequest
    .参数 pwszHeaders, 字节集, , __in  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in  DWORD dwHeadersLength
    .参数 dwModifiers, 整数型, , __in  DWORD dwModifiers

.DLL命令 WinHttpSendRequest, 逻辑型, "Winhttp.dll", "WinHttpSendRequest", 公开, BOOL WINAPI WinHttpSendRequest
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 pwszHeaders, 整数型, , __in_opt  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in      DWORD dwHeadersLength
    .参数 lpOptional, 字节集, , __in_opt  LPVOID lpOptional
    .参数 dwOptionalLength, 整数型, , __in      DWORD dwOptionalLength
    .参数 dwTotalLength, 整数型, , __in      DWORD dwTotalLength
    .参数 dwContext, 整数型, , __in      DWORD_PTR dwContext

.DLL命令 WinHttpReceiveResponse, 逻辑型, "Winhttp.dll", "WinHttpReceiveResponse", 公开, BOOL WINAPI WinHttpReceiveResponse
    .参数 hRequest, 整数型, , __in        HINTERNET hRequest
    .参数 lpReserved, 整数型, , __reserved  LPVOID lpReserved

.DLL命令 WinHttpQueryDataAvailable, 逻辑型, "Winhttp.dll", "WinHttpQueryDataAvailable", 公开, 查询是否有可读数据
    .参数 hRequest, 整数型, , 请求句柄
    .参数 lpdwNumberOfBytesAvailable, 整数型, 传址, 可读数据长度

.DLL命令 WinHttpReadData, 逻辑型, "Winhttp.dll", "WinHttpReadData", 公开, BOOL WINAPI WinHttpReadData
    .参数 hRequest, 整数型, , __in   HINTERNET hRequest
    .参数 lpBuffer, 字节集, , __out  LPVOID lpBuffer
    .参数 dwNumberOfBytesToRead, 整数型, , __in   DWORD dwNumberOfBytesToRead
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, __out  LPDWORD lpdwNumberOfBytesRead

.DLL命令 WinHttpQueryHeaders, 逻辑型, "Winhttp.dll", "WinHttpQueryHeaders", 公开, BOOL WINAPI WinHttpQueryHeaders
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 dwInfoLevel, 整数型, , __in      DWORD dwInfoLevel
    .参数 pwszName, 整数型, , __in_opt  LPCWSTR pwszName
    .参数 lpBuffer, 字节集, , __out     LPVOID lpBuffer
    .参数 lpdwBufferLength, 整数型, 传址, __inout   LPDWORD lpdwBufferLength
    .参数 lpdwIndex, 整数型, 传址, __inout   LPDWORD lpdwIndex

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 _宽字符到双字节, 空白型, "kernel32.dll", "WideCharToMultiByte", , lpMultiByteStr 为字节集
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 字节集, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 _宽字符到双字节1, 整数型, "kernel32.dll", "WideCharToMultiByte", , lpMultiByteStr 为整数型
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 整数型, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 MultiByteToWideChar_字节集, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开, kernel32.dll 将通配符映像为多字节 _Unicode转Utf8
    .参数 CodePage, 整数型, , 1
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 _Unicode转Ansi, 整数型, "kernel32.dll", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 0
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , -1
    .参数 lpMultiByteStr, 文本型, 传址, 
    .参数 cchMultiByte, 整数型, , 
    .参数 默认文本, 整数型, , 0
    .参数 使用默认文本, 整数型, , 0

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 取自进程ID

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", 公开, 创建进程快照
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 Process32First, 整数型, "", "Process32First", 公开, 取第一个进程
    .参数 h, 整数型, , 
    .参数 p, 精易_进程信息列表, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", 公开, 取下一个进程
    .参数 h, 整数型, , 
    .参数 p, 精易_进程信息列表, , 

.DLL命令 CloseHandle, 逻辑型, "kernel32", "CloseHandle", 公开, 
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 FindWindowExA_文本, 整数型, "user32", "FindWindowExA", 公开, 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口, 整数型, , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 IsWindow, 整数型, "user32", "IsWindow", 公开, 窗口_句柄是否有效  判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型, , 

.DLL命令 IsWindowVisible, 逻辑型, "", "IsWindowVisible", 公开, 窗口_是否可见  判断窗口是否可见  返回真为可见，否则为不可见
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, 线程_取ID
    .参数 hwnd, 整数型, , 指定窗口句柄
    .参数 进程标识符, 整数型, 传址, 用于装载进程ID的变量

.DLL命令 GetWindowTextLength, 整数型, "user32", "GetWindowTextLengthA", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 GetWindowTextA, 整数型, "", "GetWindowTextA", 公开, 窗口_取标题
    .参数 hwnd, 整数型, , 
    .参数 标题名, 文本型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 SetWindowTextA, 逻辑型, "user32", "SetWindowTextA", 公开, 窗口_置标题
    .参数 hwnd, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 窗口_取类名 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, 传址, 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 CreateProcessA, 整数型, "kernel32.dll", "", 公开, 
    .参数 lpApplicationName, 文本型, , 
    .参数 lpCommandLine, 文本型, , 
    .参数 lpProcessAttributes, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 bInheritHandles, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 
    .参数 lpCurrentDriectory, 文本型, , 
    .参数 lpStartupInfo, StartupInfo, , 
    .参数 lpProcessInformation, 精易_进程结构, , 

.DLL命令 TerminateProcess, 整数型, "", "TerminateProcess", 公开, _进程终止
    .参数 进程ID, 整数型, , 
    .参数 a, 整数型, , 

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 打开进程
    .参数 进程对象, 整数型, , 
    .参数 继承句柄, 整数型, , 
    .参数 进程标识符, 整数型, , 

.DLL命令 FreeConsole, 整数型, "kernel32", "FreeConsole", , 

.DLL命令 AllocConsole, 逻辑型, "kernel32", "AllocConsole", , 

.DLL命令 GetStdHandle, 整数型, "kernel32", "GetStdHandle", , 
    .参数 nStdHandle, 整数型, , 

.DLL命令 SetConsoleTitleA, 逻辑型, "kernel32", "SetConsoleTitleA", , 
    .参数 lpConsoleTitle, 文本型, , 

.DLL命令 SetConsoleTextAttribute, 逻辑型, "kernel32", "SetConsoleTextAttribute", , 
    .参数 hConsoleOutput, 整数型, , 
    .参数 wAttributes, 整数型, , 

.DLL命令 WriteConsoleA, 逻辑型, "kernel32", "WriteConsoleA", , 
    .参数 hConsoleOutput, 整数型, , 
    .参数 lpBuffer, 文本型, , 
    .参数 nNumberOfCharsToWrite, 整数型, , 
    .参数 lpNumberOfCharsWritten, 整数型, , 
    .参数 lpReserved, 整数型, , 

.DLL命令 OutputDebugStringA, 空白型, "kernel32", "OutputDebugStringA", , 
    .参数 lpOutputString, 文本型, , 

.DLL命令 SendMessageA_文本, 整数型, "user32", "SendMessageA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 消息号, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 文本型, , 具体取决于消息

.DLL命令 GetLocalTime_, 空白型, "kernel32", "GetLocalTime", , 
    .参数 lpSystemTime, 系统时间, , 

.DLL命令 GetDateFormatA, 整数型, "kernel32.dll", "GetDateFormatA", 公开, 针对指定的“当地”格式，对一个系统日期进行格式化  格式化过后的字串的长度。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数――即使它们已由用户取代。
    .参数 日期结构, 系统时间, , lpDate，包含了一个系统日期的结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。否则包含一个日期格式字串。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 GetTimeFormatA, 整数型, "kernel32.dll", "GetTimeFormatA", 公开, _系统置时间进行格式化 针对指定的“当地”格式，对一个系统时间进行格式化。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数
    .参数 时间结构, 系统时间, , lpDate，SYSTEMTIME，用于包容系统时间的一个结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 VariantTimeToSystemTime_Date, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", 公开, 
    .参数 vtime, 日期时间型, , 
    .参数 lpSystemTime, 系统时间, , 

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, 目录是否存在
    .参数 lpszPath, 文本型, , 

.DLL命令 MakeSureDirectoryPathExists, 逻辑型, "dbghelp.dll", "MakeSureDirectoryPathExists", , 目录_创建
    .参数 DirPath, 文本型, , 

.DLL命令 GetLocalTime, 整数型, "kernel32", "GetLocalTime", 公开, ,
    .参数 系统时间格式, 精易_时间, 传址, 

.DLL命令 GetLocaleInfo, 整数型, "kernel32", "GetLocaleInfoA", , 
    .参数 地方ID, 整数型, , 
    .参数 类型, 整数型, , 
    .参数 数据, 文本型, , 
    .参数 数据尺寸, 整数型, , 

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", , 
    .参数 vtime, 日期时间型, , 
    .参数 lpSystemTime, 精易_时间, , 

.DLL命令 GetAdaptersInfo, 整数型, "IPHlpApi", "", 公开, 
    .参数 IpAdapterInfo, 空白型, , 
    .参数 pOutBufLen, 整数型, 传址, 

.DLL命令 CopyMemory_ip_adapter_info, 整数型, "kernel32", "RtlMoveMemory", 公开, 
    .参数 Destination, IP_ADAPTER_INFO, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 GlobalAlloc, 整数型, "kernel32", "GlobalAlloc", 公开, 在堆中分配内存
    .参数 wFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", 公开, 释放全局内存块
    .参数 hMem, 整数型, , 

.DLL命令 _内存拷贝1, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 lpvDest, 字节型, 传址 数组, 
    .参数 lpvSource, 文本型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 RasDialA, 整数型, "rasapi32.dll", "RasDialA", 公开, _ADSL拨号
    .参数 lprasdialextensions, 整数型, , 拔号参数
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lprasdialparamsa, ADSL拨号0, , 拔号参数
    .参数 dwNotifierType, 整数型, , 消息通知方式
    .参数 lpvNotifier, 整数型, , 消息处理回调子程序
    .参数 lphrasconn, 整数型, 传址, 返回的成功连接的连接句柄

.DLL命令 RasHangUpA, 整数型, "rasapi32.dll", "RasHangUpA", 公开, RasApi32.DLL挂断当前拔号连接 0表示成功
    .参数 hRasConn, 整数型, , 连接句柄

.DLL命令 GlobalSize_取连接信息用结构, 整数型, "", "GlobalSize", 公开, kernel32.dll取结构尺寸
    .参数 结构, 取连接信息用结构, 传址, 

.DLL命令 RasEnumEntries, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开, rasapi32.dll 取连接信息结构,连接名称,数量等等
    .参数 lpStrNull, 整数型, , 保留字段,必须为NIL
    .参数 lpszphonebook, 整数型, , 电话本名称,在Win9X下无作用
    .参数 lprasetryname, 取连接信息用结构, 传址 数组, RASENTRYNAME类型数组的指针
    .参数 lpcb, 整数型, 传址, 接收拨号连接名称的缓冲区的大小
    .参数 lpcentries, 整数型, 传址, 实际获得的拨号连接名称的数目

.DLL命令 InternetGetConnectedStateEx, 整数型, "wininet.dll", "InternetGetConnectedStateEx", 公开, _取连接状态 wininet.dll
    .参数 lpdwFlags, 整数型, 传址, 
    .参数 lpszConnectionName, 文本型, 传址, 
    .参数 dwNameLen, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 RasSetEntryPropertiesA, 整数型, "rasapi32.dll", "RasSetEntryPropertiesA", 公开, _创建新拨号连接 rasapi32.dll 0=建立成功,其他为失败
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpRasEntry, 创建连接所用结构, , 
    .参数 dwEntryInfoSize, 整数型, , 
    .参数 lpbDeviceInfo, 整数型, , 
    .参数 wDeviceInfoSize, 整数型, , 

.DLL命令 RasSetCredentialsA, 整数型, "rasapi32.dll", "RasSetCredentialsA", 公开, _设置拨号连接 rasapi32.dll
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpCredentials, 设置拨号所以结构, , 
    .参数 fClearCredentials, 整数型, , 

.DLL命令 SHGetSpecialFolderPath, 逻辑型, "", "SHGetSpecialFolderPathA", 公开, 取系统目录
    .参数 hwndOwner, 整数型, , 
    .参数 lpszPath, 文本型, , 
    .参数 nFolder, 整数型, , 
    .参数 fCreate, 逻辑型, , 

.DLL命令 GlobalSize_RASDIALPARAMS, 整数型, "kernel32.dll", "GlobalSize", , 取结构尺寸
    .参数 结构, ADSL拨号0, 传址, 

.DLL命令 RtlMoveMemory_字节型, 空白型, "", "RtlMoveMemory", 公开, 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, 字节型, 数组, 目标地址
    .参数 Source, 字节型, 数组, 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 RasGetEntryDialParams, 整数型, "rasapi32.dll", "RasGetEntryDialParamsA", 公开, 
    .参数 lpszPhoneBook, 文本型, 传址, 
    .参数 lpDialParams, ADSL拨号0, 传址, 未知类型：TRasDialParams。
    .参数 lpfPassword, 逻辑型, 传址, 

.DLL命令 GlobalSize_RASENTRY, 整数型, "kernel32.dll", "GlobalSize", 公开, 取结构尺寸
    .参数 结构, RasEntry, 传址, 

.DLL命令 RasGetEntryProperties, 整数型, "rasapi32.dll", "RasGetEntryPropertiesA", , 　
    .参数 lpcstr, 文本型, , 
    .参数 lpcstr, 字节型, 传址 数组, 
    .参数 TLPRASENTRYA, RasEntry, , 
    .参数 lpdword, 整数型, 传址, 
    .参数 lpbyte, 文本型, , 
    .参数 lpdword, 整数型, , 

.DLL命令 GetPrivateProfileInt, 整数型, "kernel32", "GetPrivateProfileIntA", 公开, 读配置项数值
    .参数 小节名, 字节集, , 
    .参数 项目名, 文本型, , 
    .参数 默认返回值, 整数型, , 
    .参数 文件名, 文本型, ,   

.DLL命令 RasEnumEntrie, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开, 
    .参数 reserved, 整数型, , 
    .参数 lpszPhoneBook, 整数型, , 
    .参数 entrynamesArray, 取连接信息用结构, 传址, 未知类型：LPRasEntryNameA。
    .参数 lpcb, 整数型, 传址, 
    .参数 lpcEntries, 整数型, 传址, 

.DLL命令 LsaFreeMemory, 整数型, "ADVAPI32.DLL", "LsaFreeMemory", 公开, 
    .参数 Buffer, 字节集, 传址, 

.DLL命令 LsaOpenPolicy, 整数型, "ADVAPI32.DLL", "LsaOpenPolicy", 公开, 
    .参数 SystemName, 整数型, , 未知类型：PLSA_UNICODE_STRING。
    .参数 ObjectAttributes, LSA_OBJECT_ATTRIBUTES, , 未知类型：PLSA_OBJECT_ATTRIBUTES。
    .参数 DesiredAccess, 整数型, , 
    .参数 PolicyHandle, 整数型, 传址, 未知类型：PLongWord。

.DLL命令 LsaRetrievePrivateData, 整数型, "ADVAPI32.DLL", "LsaRetrievePrivateData", 公开, 
    .参数 LSA_HANDLE, 整数型, , 
    .参数 KeyName, LSA_UNICODE_STRING, , 未知类型：PLSA_UNICODE_STRING。
    .参数 PrivateData, 整数型, 传址, 未知类型：PLSA_UNICODE_STRING。

.DLL命令 RtlMoveMemory_LSA_UNICODE_STRING, 空白型, "", "RtlMoveMemory", , 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, LSA_UNICODE_STRING, 传址, 目标地址
    .参数 Source, 字节集, , 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 LsaClose, 整数型, "ADVAPI32.DLL", "LsaClose", 公开, 
    .参数 ObjectHandle, 整数型, , 

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 LookupAccountName, 整数型, "advapi32.dll", "LookupAccountNameA", 公开, 把帐户名转为SID　
    .参数 lpSystemName, 文本型, 传址, 
    .参数 lpAccountName, 文本型, , 
    .参数 Sid, 字节集, 传址, 
    .参数 cbSid, 整数型, 传址, 
    .参数 ReferencedDomainName, 文本型, , 
    .参数 cbReferencedDomainName, 整数型, 传址, 
    .参数 peUse, 整数型, 传址, 

.DLL命令 IsValidSid, 整数型, "advapi32.dll", "IsValidSid", 公开, 使SID有效　
    .参数 pSid, 整数型, , 

.DLL命令 ConvertSidToStringSid, 整数型, "ADVAPI32.DLL", "ConvertSidToStringSidW", 公开, 　
    .参数 Sid, 字节集, 传址, 
    .参数 StringSid, 整数型, 传址, 

.DLL命令 lstrlen, 整数型, "kernel32", "lstrlenW", 公开, 取字节长度　
    .参数 lpString, 整数型, , 

.DLL命令 RtlMoveMemory_整数型2, 空白型, "kernel32", "RtlMoveMemory", 公开, 公开
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32.dll", "lstrcpyn", 公开, 字节集
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 SetWindowLongA, 整数型, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 SetWindowLongA1, 子程序指针, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 子程序指针, , 新样式

.DLL命令 RegisterWindowMessageA, 整数型, "user32", "RegisterWindowMessageA", 公开, _获取消息编号  获取分配给一个字串标识符的消息编号　&C000 到 &FFFF之间的一个消息编号。零意味着出错
    .参数 消息名称, 文本型, , 注册消息的名字;  

.DLL命令 lstrcpynA_字节集, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 SendMessageA_整数, 整数型, "user32", "SendMessageA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 消息号, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息

.DLL命令 ReadProcessMemory_字节集, 逻辑型, "", "ReadProcessMemory", 公开, 内存读字节集
    .参数 hProcess, 整数型, , 
    .参数 内存地址, 整数型, , 
    .参数 数据指针, 字节集, 传址, 
    .参数 数据长度, 整数型, , 
    .参数 读取的长度, 整数型, 传址, 

.DLL命令 WriteProcessMemory_字节集, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 内存地址, 整数型, , 
    .参数 数据指针, 字节集, , 
    .参数 数据长度, 整数型, , 
    .参数 实际写出长度, 整数型, , 

.DLL命令 _程序执行整数子程序2, 整数型, "user32", "CallWindowProcA", , 
    .参数 DefWindowProc, 字节集, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 zlibVersion, 文本型, "zlib.dll", "zlibVersion", , 返回zlib版本号

.DLL命令 compressBound, 整数型, "zlib.dll", "compressBound", , 预估压缩后长度
    .参数 原始长度, 整数型, , 

.DLL命令 compress, 整数型, "zlib.dll", "compress", , 成功返回0
    .参数 dest, 字节集, 传址, 
    .参数 destLen, 整数型, 传址, 
    .参数 source, 字节集, , 
    .参数 sourceLen, 整数型, , 

.DLL命令 uncompress, 整数型, "zlib.dll", "uncompress", , 成功返回0
    .参数 dest, 字节集, 传址, 
    .参数 destLen, 整数型, 传址, 
    .参数 source, 字节集, , 
    .参数 sourceLen, 整数型, , 

.DLL命令 CallWindowProcA, 整数型, "user32.dll", "CallWindowProcA", 公开, 
    .参数 窗口程序指针, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.程序集 临时程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.类模块 _Pack, , , 

.程序集变量 m_bin, 字节集, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 Empty, 空白型, , 清除
赋值 (m_bin, 取空白字节集 (0))

.子程序 GetAll, 字节集, , 取全部数据
返回 (m_bin)

.子程序 Len, 整数型, , 取长度
返回 (取字节集长度 (m_bin))

.子程序 SetBin, 空白型, , 置字节集
.参数 t, 字节集, , 

赋值 (m_bin, 相加 (m_bin, t))

.子程序 SetByte, 空白型, , 置字节
.参数 b, 字节型, , 

赋值 (m_bin, 相加 (m_bin, Byte2Bin (b)))

.子程序 SetData, 空白型, , 置类数据
.参数 bin, 字节集, , 

赋值 (m_bin, bin)

.子程序 SetHex, 空白型, , 置文本十六进制格式
.参数 t, 文本型, , 

赋值 (m_bin, 相加 (m_bin, Hex2Bin (t)))

.子程序 SetInt, 空白型, , 置整数
.参数 int, 整数型, , 

赋值 (m_bin, 相加 (m_bin, Int2Bin (int)))

.子程序 SetShort, 空白型, , 置短整数
.参数 short, 短整数型, , 

赋值 (m_bin, 相加 (m_bin, Short2Bin (short)))

.子程序 SetLong, 空白型, , 
.参数 long, 长整数型, , 

赋值 (m_bin, 相加 (m_bin, 到字节集 (long)))

.子程序 SetUint, 空白型, , 
.参数 uint, 整数型, , 

SetBin (到字节集 (ToULong (uint)))

.子程序 SetStr, 空白型, , 
.参数 t, 文本型, , 

赋值 (m_bin, 相加 (m_bin, 到字节集 (t)))

.子程序 SetToken, 空白型, , 置令牌
.参数 t, 字节集, , 

SetShort (取字节集长度 (t))
SetBin (t)

.子程序 setUTF_8, 空白型, , 
.参数 v, 文本型, , 

.局部变量 b, 字节集, , , 

赋值 (b, 未知支持库函数_0 (到字节集 (v), #, #, ))
SetShort (取字节集长度 (b))
SetBin (b)


.子程序 e, 空白型, , 


.程序集 DataPro, , , 

.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 Utf8, 字节集, , 

返回 (到文本 (未知支持库函数_0 (Utf8, #, #, )))

.子程序 编码_Ansi到Utf8, 字节集, , 
.参数 ansi, 文本型, , 

返回 (相加 (未知支持库函数_0 (到字节集 (ansi), #, #, ), { 0 }))

.子程序 进制_十六到十, 整数型, , 将16进制文件转换到10进制数值(返回十进制数)
.参数 文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 t, 文本型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 局_文本, 文本型, , , 

赋值 (t, “0123456789ABCDEF”)
赋值 (局_文本, 到大写 (文本))
.计次循环首 (取文本长度 (文本), i)
    赋值 (结果, 相减 (相加 (相乘 (结果, 16), 寻找文本 (t, 取文本中间 (局_文本, i, 1), , 假)), 1))
.计次循环尾 ()
返回 (结果)

.子程序 到无符号长整型, 长整数型, , 
.参数 long, 整数型, , 

置入代码 ({ 139, 69, 8, 51, 210, 201, 194, 4, 0 })

返回 (0)

.子程序 MidBin, 字节集, , 取出想要的内容
.参数 完整内容, 字节集, , 完整内容
.参数 左边文本, 字节集, 可空, 左边文本
.参数 右边文本, 字节集, 可空, 右边文本
.参数 循环读取, 逻辑型, 可空, 可空，默认为假，为真时“左边文本”“右边文本”“结果数组”不能为空.
.参数 结果数组, 字节集, 可空 数组, 可空，当“循环读取”为真时，不可为空.返回结果的数组.

.局部变量 临时位置, 整数型, , , 
.局部变量 总长度, 整数型, , , 
.局部变量 临时文本, 字节集, , , 
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 

赋值 (总长度, 取字节集长度 (完整内容))
.如果 (等于 (循环读取, 真))
    .如果 (或者 (等于 (左边文本, {  }), 等于 (右边文本, {  })))
        返回 ({  })
    .否则
        重定义数组 (结果数组, 假, 0)
        赋值 (位置1, 寻找字节集 (完整内容, 左边文本, ))
        .判断循环首 (不等于 (位置1, -1))
            赋值 (临时位置, 相加 (位置1, 1))
            赋值 (位置2, 寻找字节集 (完整内容, 右边文本, 位置1))
            加入成员 (结果数组, 取字节集中间 (完整内容, 相加 (位置1, 取字节集长度 (左边文本)), 相减 (位置2, 位置1, 取字节集长度 (左边文本))))
            赋值 (位置1, 寻找字节集 (完整内容, 左边文本, 临时位置))
        .判断循环尾 ()
        .如果 (大于 (取数组成员数 (结果数组), 1))
            返回 (结果数组 [1])
        .否则
            返回 ({  })
        .如果结束
        
    .如果结束
    
.否则
    .判断开始 (等于 (右边文本, {  }))
        .如果 (大于 (寻找字节集 (完整内容, 左边文本, ), -1))
            赋值 (临时位置, 相加 (寻找字节集 (完整内容, 左边文本, ), 取字节集长度 (左边文本)))
            赋值 (临时文本, 取字节集中间 (完整内容, 临时位置, 总长度))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断 (等于 (左边文本, {  }))
        .如果 (大于 (寻找字节集 (完整内容, 右边文本, ), -1))
            赋值 (临时位置, 相减 (寻找字节集 (完整内容, 右边文本, ), 1))
            赋值 (临时文本, 取字节集左边 (完整内容, 临时位置))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断 (并且 (等于 (左边文本, {  }), 等于 (右边文本, {  })))
        返回 ({  })
    .默认
        .如果 (大于 (寻找字节集 (完整内容, 左边文本, ), -1))
            赋值 (临时位置, 相加 (寻找字节集 (完整内容, 左边文本, ), 取字节集长度 (左边文本)))
            赋值 (临时文本, 取字节集中间 (完整内容, 临时位置, 总长度))
            赋值 (总长度, 取字节集长度 (临时文本))
            赋值 (临时位置, 相减 (寻找字节集 (临时文本, 右边文本, ), 1))
            赋值 (临时文本, 取字节集中间 (临时文本, 1, 临时位置))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断结束
    
    
    
.如果结束


.子程序 Flip, 字节集, , 反转字节集
.参数 bin, 字节集, 参考, 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 
.局部变量 结果, 字节集, , , 

赋值 (长度, 取字节集长度 (bin))
Bin2Array (bin, 字节数组)
.计次循环首 (长度, i)
    赋值 (结果, 相加 (结果, 到字节集 (字节数组 [相加 (相减 (长度, i), 1)])))
.计次循环尾 ()
返回 (结果)


.子程序 Bin2Int, 整数型, , 到整数
.参数 四字节, 字节集, , 

返回 (取字节集数据 (Flip (四字节), #整数型, 1))

.子程序 Int2Bin, 字节集, , 
.参数 int, 整数型, , 

返回 (Flip (到字节集 (int)))

.子程序 Long2Bin, 字节集, , 
.参数 Long, 长整数型, , 

返回 (Flip (到字节集 (Long)))

.子程序 Bin2Short, 整数型, , 二字节到整数
.参数 二字节, 字节集, , 

返回 (到整数 (取字节集数据 (Flip (二字节), #短整数型, 1)))

.子程序 Short2Bin, 字节集, , 
.参数 short, 短整数型, , 

返回 (Flip (到字节集 (short)))

.子程序 Bin2Byte, 整数型, , 一字节到整数
.参数 字节, 字节集, , 

返回 (到整数 (取字节集数据 (字节, #字节型, 1)))


.子程序 Byte2Bin, 字节集, , 
.参数 byte, 字节型, , 

返回 (Flip (到字节集 (byte)))

.子程序 BinToString, 文本型, , 显示字节集
.参数 字节集, 字节集, 参考, 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 
.局部变量 结果, 文本型, , , 

赋值 (长度, 取字节集长度 (字节集))
Bin2Array (字节集, 字节数组)
.计次循环首 (长度, i)
    赋值 (结果, 相加 (结果, 到文本 (到整数 (字节数组 [i])), “,”))
.计次循环尾 ()
返回 (取文本左边 (结果, 相减 (取文本长度 (结果), 1)))

.子程序 ToIP, 文本型, , 到IP
.参数 四字节, 字节集, , 四字节

.局部变量 ip1, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (4, i)
    赋值 (ip1, 相加 (ip1, 到文本 (到整数 (取字节集数据 (四字节, #字节型, i))), “.”))
.计次循环尾 ()
返回 (取文本左边 (ip1, 相减 (取文本长度 (ip1), 1)))


.子程序 Bin2Array, 空白型, , 
.参数 参_字节集, 字节集, 参考, 
.参数 参_字节型数组, 字节型, 参考 数组, 

.局部变量 局_i, 空白型, , , 

重定义数组 (参_字节型数组, 假, 取字节集长度 (参_字节集))
.计次循环首 (取字节集长度 (参_字节集), 局_i)
    赋值 (参_字节型数组 [局_i], 参_字节集 [局_i])
.计次循环尾 ()

.子程序 Bin2Long, 长整数型, , 
.参数 bin, 字节集, , 

.局部变量 tmp, 长整数型, , , 

赋值 (tmp, 到长整数 (取字节集数据 (Flip (bin), #长整数型, 1)))
返回 (tmp)

.子程序 Bin2HexTo, 文本型, , 字节集到十六
.参数 字节集, 字节集, 参考, 

.局部变量 长度, 空白型, , , 
.局部变量 i, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 字节, 文本型, , , 

赋值 (长度, 取字节集长度 (字节集))
.计次循环首 (长度, i)
    赋值 (字节, 到大写 (取十六进制文本 (到整数 (取字节集数据 (字节集, #字节型, i)))))
    .如果真 (小于 (取文本长度 (字节), 2))
        赋值 (字节, 相加 (“0”, 字节))
    .如果真结束
    赋值 (文本, 相加 (文本, 字节, “ ”))
.计次循环尾 ()
返回 (文本)

.子程序 Hex2Bin2, 字节集, , 十六到字节集
.参数 文本, 文本型, 参考, 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 十六, 文本型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 

赋值 (文本数组, 分割文本 (文本, “ ”, ))
.计次循环首 (取数组成员数 (文本数组), i)
    赋值 (十六, 相加 (“0x”, 文本数组 [i]))
    赋值 (结果, 进制_十六到十 (十六))
    
    加入成员 (字节数组, 到字节 (结果))
.计次循环尾 ()
返回 (到字节集 (字节数组))


.子程序 Hex2Bin, 字节集, , 嵌ASM
.参数 原文, 文本型, , 

返回 (十六进制文本到字节集 (删全部空 (原文)))

.子程序 GetRandomBin, 字节集, , 
.参数 len, 整数型, , 

.局部变量 字节, 字节型, , "0", 

.计次循环首 (len, )
    加入成员 (字节, 到字节 (取随机数 (0, 255)))
.计次循环尾 ()
返回 (到字节集 (字节))

.子程序 FuncToInt, 整数型, , 子程序指针到整数
.参数 x, 子程序指针, , 

返回 (0)

.子程序 GetHigh, 整数型, , 取高位
.参数 x, 整数型, , 

返回 (0)

.子程序 GetLow, 整数型, , 取低位
.参数 x, 整数型, , 

返回 (0)

.子程序 LongAnd, 长整数型, , 长整数的AND
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.计次循环首 (8, i)
    赋值 (t3 [i], 位与 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 LongMoveL, 长整数型, , 长整型左移
.参数 x, 长整数型, , 
.参数 n, 整数型, , 

.计次循环首 (n, )
    赋值 (x, 相乘 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 LongMoveR, 长整数型, , 长整型右移
.参数 x, 长整数型, , 
.参数 n, 整数型, , 

.计次循环首 (n, )
    赋值 (x, 相除 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 LongToInt, 整数型, , 长整数到整数
.参数 x, 长整数型, , 

返回 (0)

.子程序 LongXor, 长整数型, , 长整数的XOR
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.计次循环首 (8, i)
    赋值 (t3 [i], 位异或 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 ToDecimal, 长整数型, , 到十进制
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：4#十六进制,10#十进制,2#八进制，1#二进制

返回 (0)

.子程序 ToULong, 长整数型, , 到无符号长整数
.参数 long, 整数型, , 

置入代码 ({ 139, 69, 8, 51, 210, 201, 194, 4, 0 })
返回 (0)

.子程序 ToUshort, 整数型, , 
.参数 short, 短整数型, , 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 ToUchar, 短整数型, , 
.参数 char, 字节型, , 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 HashMD5, 文本型, , 返回十六
.参数 字节集, 字节集, , 

.局部变量 a, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 文本型, , , 

赋值 (a, 未知支持库函数_2 (字节集))
.计次循环首 (相除 (取文本长度 (a), 2), i)
    赋值 (b, 相加 (b, 取文本中间 (a, 相减 (相乘 (i, 2), 1), 2), “ ”))
.计次循环尾 ()
返回 (b)

.子程序 HashMD5_, 字节集, , 返回字节集
.参数 字节集, 字节集, , 

.局部变量 a, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 文本型, , , 

赋值 (a, 未知支持库函数_2 (字节集))
.计次循环首 (相除 (取文本长度 (a), 2), i)
    赋值 (b, 相加 (b, 取文本中间 (a, 相减 (相乘 (i, 2), 1), 2), “ ”))
.计次循环尾 ()
返回 (Hex2Bin2 (b))


.子程序 PictureProcessing, 字节集, , 图片置参
.参数 字节集, 字节集, , 

.局部变量 a, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 文本型, , , 

赋值 (a, 未知支持库函数_2 (字节集))
.计次循环首 (相除 (取文本长度 (a), 2), i)
    赋值 (b, 相加 (b, 取文本中间 (a, 相减 (相乘 (i, 2), 1), 2), “ ”))
.计次循环尾 ()
返回 (Hex2Bin2 (b))

.子程序 字节集到十六进制文本, 文本型, , 返回字节集的十六进制文本,可能有最大长度的限制
.参数 输入字节集, 字节集, 参考, 

.局部变量 字节集指针, 整数型, , , 
.局部变量 文本指针, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 字节集长度, 整数型, , , 
.局部变量 记数, 整数型, , , 

赋值 (字节集指针, 取变量数据地址 (输入字节集))
赋值 (字节集长度, 取字节集长度 (输入字节集))
赋值 (文本, 取空白文本 (相乘 (字节集长度, 3)))
赋值 (文本指针, 取变量数据地址 (文本))
.计次循环首 (字节集长度, 记数)
    置入代码 ({ 139, 69, 252, 138, 0, 50, 228, 102, 193, 224, 4, 192, 232, 4, 134, 224, 60, 9, 126, 4, 4, 55, 235, 2, 4, 48, 128, 252, 9, 126, 5, 128, 196, 55, 235, 3, 128, 196, 48, 139, 77, 240, 102, 137, 1, 131, 193, 3, 137, 77, 240, 139, 77, 252, 65, 137, 77, 252 })
.计次循环尾 ()
返回 (文本)

.子程序 十六进制文本到字节集, 字节集, , 嵌ASM
.参数 原文, 文本型, , 

.局部变量 原文长度, 整数型, , , 
.局部变量 原文地址, 整数型, , , 
.局部变量 码表地址, 整数型, , , 
.局部变量 结果地址, 整数型, , , 
.局部变量 结果, 字节集, , , 

赋值 (原文长度, 0) ' ebp-4
赋值 (原文地址, 1) ' ebp-8
赋值 (码表地址, 2) ' ebp-c
赋值 (结果地址, 3) ' ebp-10
置入代码 ({ 139, 93, 8, 139, 27, 137, 93, 248, 139, 251, 185, 255, 255, 255, 255, 50, 192, 252, 242, 174, 184, 254, 255, 255, 255, 43, 193, 137, 69, 252 })
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
置入代码 ({ 232, 0, 0, 0, 0, 89, 131, 193, 6, 235, 103 }) ' 跳转到代码
 ' ==========码表开始
置入代码 ({ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13, 14, 15 })
 ' 跳到这里了
置入代码 ({ 144, 144, 144, 144, 144, 137, 77, 244 }) ' 码表地址到ebp-c
置入代码 ({ 209, 109, 252 }) ' 原文长度/2
赋值 (结果, 取空白字节集 (原文长度))
置入代码 ({ 131, 192, 8, 137, 69, 240 }) ' 结果地址
 ' 计算开始
置入代码 ({ 139, 93, 244, 139, 117, 248, 139, 125, 240, 209, 101, 252, 139, 77, 252, 3, 206, 51, 192, 102, 139, 6, 70, 70, 80, 37, 255, 0, 0, 0, 138, 52, 24, 88, 193, 232, 8, 138, 20, 24, 192, 230, 4, 8, 242, 136, 23, 71, 59, 241, 124, 223 })
返回 (结果)

.子程序 TimeStamp, 长整数型, , GetUnixTime
.参数 精确到毫秒, 逻辑型, 可空, 默认为假 精确到秒10位数 精确到毫秒13位数

.局部变量 易语言时间, 日期时间型, , , 
.局部变量 时间戳, 长整数型, , , 

赋值 (易语言时间, 取现行时间 ())
赋值 (时间戳)

.子程序 format_ip, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 t_text, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (取字节集长度 (bin), i)
    赋值 (t_text, 相加 (t_text, 到文本 (bin [i])))
    .如果真 (不等于 (取字节集长度 (bin), i))
        赋值 (t_text, 相加 (t_text, “.”))
    .如果真结束
    
.计次循环尾 ()
返回 (t_text)


.子程序 IMEI算法, 文本型, , 
.局部变量 文本, 文本型, , , 
.局部变量 imei, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 偶数, 文本型, , "0", 
.局部变量 和值, 整数型, , , 

赋值 (文本, “86084102”)

.计次循环首 (6, )
    
    置随机数种子 ()
    赋值 (文本, 相加 (文本, 到文本 (取随机数 (0, 9))))
    
.计次循环尾 ()

赋值 (imei, 文本)

.计次循环首 (7, i)
    
    加入成员 (偶数, 到文本 (相乘 (到整数 (取文本右边 (取文本左边 (文本, 相乘 (i, 2)), 1)), 2)))
    .如果真 (等于 (取文本长度 (偶数 [i]), 1))
        赋值 (偶数 [i], 相加 (“0”, 偶数 [i]))
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (7, i)
    
    赋值 (和值, 相加 (和值, 到整数 (取文本右边 (取文本左边 (文本, 相减 (相乘 (i, 2), 1)), 1)), 到整数 (取文本左边 (偶数 [i], 1)), 到整数 (取文本右边 (偶数 [i], 1))))
    
.计次循环尾 ()

.如果 (等于 (和值, 0))
    赋值 (imei, 相加 (imei, “0”))
.否则
    赋值 (imei, 相加 (imei, 到文本 (相减 (10, 到整数 (取文本右边 (到文本 (和值), 1))))))
.如果结束

.如果真 (大于 (取文本长度 (imei), 15))
    赋值 (imei, 取文本左边 (imei, 15))
.如果真结束
返回 (imei)

.子程序 Guid算法, 字节集, , 
.局部变量 Guid, 文本型, , , 

置随机数种子 ()
赋值 (Guid, 相加 (文本_取随机字母 (2, 0), 文本_取随机数字 (2, 0), 文本_取随机字母 (1, 0), 文本_取随机数字 (1, 0), 文本_取随机字母 (2, 0), “-”, 文本_取随机字母 (2, 0), 文本_取随机数字 (1, 0), 文本_取随机字母 (1, 0), “-”, 文本_取随机数字 (2, 0), 文本_取随机数字 (2, 0), “-”, 文本_取随机字母 (4, 0), “-”, 文本_取随机字母 (1, 0), 文本_取随机数字 (3, 0), 文本_取随机字母 (2, 0), 文本_取随机数字 (1, 0), 文本_取随机字母 (2, 0), 文本_取随机数字 (3, 0)))
返回 (HashMD5_ (到字节集 (Guid)))


.子程序 ZlibDo_, 字节集, , 利用zlib对字节集进行压缩，成功返回压缩后字节集，失败返回空字节集
.参数 source, 字节集, , 需要压缩的字节集数据

.局部变量 匿名局部变量_整数型_38, 整数型, , , 
.局部变量 匿名局部变量_字节集_40, 字节集, , , 
.局部变量 匿名局部变量_整数型_44, 整数型, , , 

赋值 (匿名局部变量_整数型_38, 取字节集长度 (source))
赋值 (匿名局部变量_整数型_44, compressBound (匿名局部变量_整数型_38))
赋值 (匿名局部变量_字节集_40, 取空白字节集 (匿名局部变量_整数型_44))
.判断开始 (等于 (compress (匿名局部变量_字节集_40, 匿名局部变量_整数型_44, source, 匿名局部变量_整数型_38), 0))
    返回 (取字节集左边 (匿名局部变量_字节集_40, 匿名局部变量_整数型_44))
.默认
    返回 ({  })
.判断结束


.子程序 ZlibInflate_, 字节集, 公开, 
.参数 bin, 字节集, , 

.局部变量 NULL, 字节集, , , 
.局部变量 Heap, 整数型, , , 
.局部变量 Datalen, 整数型, , , 
.局部变量 AddDatalen, 整数型, , , 
.局部变量 lpData, 整数型, , , 
.局部变量 Offset, 整数型, , , 
.局部变量 Retlen, 整数型, , , 
.局部变量 lpTmpData, 整数型, , , 
.局部变量 Data, 字节集, , , 
.局部变量 strm, 未知类型0x41012BBD, , , 
.局部变量 zh1, 字节型, , , 
.局部变量 zh2, 字节型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 Size2, 整数型, , , 
.局部变量 Datalen2, 整数型, , , 
.局部变量 AddDatalen2, 整数型, , , 
.局部变量 lpData2, 整数型, , , 
.局部变量 Offset2, 整数型, , , 
.局部变量 Retlen2, 整数型, , , 

 ' 复制来的代码 懒得细致的修改了 能得出结果就行 。。。。
赋值 (Heap, 未知函数_167848894 ())

赋值 (Datalen, 取字节集长度 (bin))
赋值 (lpData, 取变量数据地址 (bin))

赋值 (Size2, 1024)
赋值 (AddDatalen2, Size2)
赋值 (Datalen2, Size2)
赋值 (lpData2, 未知函数_167848895 (Heap, 0, Datalen2))
.如果真 (等于 (lpData2, 0))
    未知函数_167848896 (Heap, 0, lpData)
    返回 (NULL)
.如果真结束

未知函数_167848897 (zh1, lpData, 1)
未知函数_167848897 (zh2, 相加 (lpData, 1), 1)
.如果 (或者 (不等于 (zh1, 120), 不等于 (求余数 (相加 (zh2, 相乘 (zh1, 256)), 31), 0))) ' 字节1 0x78 字节1+2 能被31整除
    赋值 (ret)

.类模块 _Unpack, , , 

.程序集变量 m_bin, 字节集, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 GetAll, 字节集, , 取所有数据
.参数 忽略03, 逻辑型, 可空, 

返回 (m_bin)

.子程序 GetAll_Hex, 文本型, , 取所有数据,十六进制展示
返回 (Bin2HexTo (m_bin))

.子程序 GetBin, 字节集, , 取字节集
.参数 len, 整数型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, len))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), len)))
返回 (bin)

.子程序 GetByte, 字节型, , 取字节
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 1))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 1)))
返回 (Bin2Byte (bin))

.子程序 GetInt, 整数型, , 取整数
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 4))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 4)))
返回 (Bin2Int (bin))

.子程序 GetLong, 长整数型, , 
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 8))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 8)))
返回 (Bin2Long (bin))


.子程序 GetShort, 短整数型, , 取短整数
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 2))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 2)))
返回 (Bin2Short (bin))

.子程序 GetToken, 字节集, , 取令牌
.局部变量 len, 整数型, , , 

赋值 (len, GetShort ())
返回 (GetBin (len))

.子程序 GetUTF_8, 文本型, , 
返回 (到文本 (未知支持库函数_0 (GetToken (), #, #, )))

.子程序 Len, 整数型, , 取长度
返回 (取字节集长度 (m_bin))

.子程序 SetData, 空白型, , 置数据
.参数 b, 字节集, , 

赋值 (m_bin, b)


.子程序 SetData_Hex, 空白型, , 置数据_十六进制文本
.参数 hex, 文本型, , 十六进制文本

赋值 (m_bin, Hex2Bin (hex))


.类模块 QQTEA, , , 

.程序集变量 加密许可证, 整数型, , , 
.程序集变量 m_Plain, 字节型, , "8", 指向当前的明文块
.程序集变量 m_prePlain, 字节型, , "8", 指向前面一个明文块
.程序集变量 m_out, 字节型, , "0", 
.程序集变量 m_Crypt, 整数型, , , 
.程序集变量 m_preCrypt, 整数型, , , 当前加密的密文位置和上一次加密的密文块位置，他们相差8
.程序集变量 m_Pos, 长整数型, , , 当前处理的加密解密块的位置
.程序集变量 m_padding, 长整数型, , , 填充数
.程序集变量 m_Key, 字节型, , "16", 密钥
.程序集变量 m_Header, 逻辑型, , , 用于加密时，表示当前是否是第一个8字节块，因为加密算法是反馈的
.程序集变量 m_contextStart, 长整数型, , , 
.子程序 _初始化, 空白型, , 
赋值 (加密许可证, 未知支持库函数_1 ())

.子程序 解密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本

.局部变量 局_回传字节型数组, 字节型, 静态, "0", 
.局部变量 i, 空白型, , , 
.局部变量 局_返回的文本, 文本型, , , 
.局部变量 局_binfrom, 字节型, , "0", 
.局部变量 局_Key, 字节型, , "0", 
.局部变量 bin, 字节集, , , 

未知支持库函数_3 (加密许可证)
.如果真 (等于 (加密内容, {  }))
    返回 ({  })
.如果真结束
.如果真 (等于 (密钥, {  }))
    赋值 (密钥, 取空白字节集 (16))
.如果真结束
字节集到数组 (密钥, 局_Key)
字节集到数组 (加密内容, 局_binfrom)
赋值 (m_preCrypt, 0)
赋值 (m_Crypt, 0)
赋值 (m_Pos, 0)
赋值 (m_padding, 0)
清除数组 (m_out)
UnHashTea (局_binfrom, 局_Key, 1, 真, 局_回传字节型数组)
赋值 (bin, 到字节集 (局_回传字节型数组))
未知支持库函数_4 (加密许可证)
返回 (bin)





.子程序 字节集到数组, 空白型, , 
.参数 参_字节集, 字节集, 参考, 
.参数 参_字节型数组, 字节型, 参考 数组, 

.局部变量 局_i, 空白型, , , 

重定义数组 (参_字节型数组, 假, 取字节集长度 (参_字节集))
.计次循环首 (取字节集长度 (参_字节集), 局_i)
    赋值 (参_字节型数组 [局_i], 参_字节集 [局_i])
.计次循环尾 ()

.子程序 加密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本

.局部变量 局_回传字节型数组, 字节型, 静态, "0", 
.局部变量 i, 空白型, , , 
.局部变量 局_返回的文本, 文本型, , , 
.局部变量 局_binfrom, 字节型, , "0", 
.局部变量 局_Key, 字节型, , "0", 
.局部变量 bin, 字节集, , , 

未知支持库函数_3 (加密许可证)
字节集到数组 (密钥, 局_Key)
字节集到数组 (加密内容, 局_binfrom)
HashTea (局_binfrom, 局_Key, 1, 真, 局_回传字节型数组)
赋值 (bin, 到字节集 (局_回传字节型数组))
未知支持库函数_4 (加密许可证)
返回 (bin)


.子程序 UnHashTea, 逻辑型, , 
.参数 binFrom, 字节型, 数组, 
.参数 binTkye, 字节型, 数组, 
.参数 offset, 空白型, , 起始位置，从1开始
.参数 is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 o_count, 空白型, , , 
.局部变量 o_m, 字节型, , "0", 
.局部变量 o_intLen, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 i2, 空白型, , , 


赋值 (m_Crypt, 0)
赋值 (m_preCrypt, 0)
赋值 (m_Key, binTkye)
重定义数组 (o_m, 假, 相加 (offset, 7))
赋值 (o_intLen, 取数组成员数 (binFrom))

Decipher (binFrom, m_Key, 真, m_prePlain)

赋值 (m_Pos, 位与 (m_prePlain [1], 7))
赋值 (o_count, 相减 (o_intLen, m_Pos, 10))
.变量循环首 (offset, 取数组成员数 (o_m), 1, i)
    赋值 (o_m [i], 0)
.变量循环尾 ()
重定义数组 (m_out, 假, o_count)

赋值 (m_preCrypt, 0)
赋值 (m_Crypt, 8)
赋值 (m_contextStart, 8)
赋值 (m_Pos, 相加 (m_Pos, 1))

赋值 (m_padding, 1)
.判断循环首 (小于或等于 (m_padding, 2))
    .如果真 (小于 (m_Pos, 8))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (m_padding, 相加 (m_padding, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        赋值 (o_m, binFrom)
        Decrypt8Bytes (binFrom, offset, o_intLen)
    .如果真结束
    
.判断循环尾 ()
赋值 (i2, 1)
.判断循环首 (不等于 (o_count, 0))
    .如果真 (小于 (m_Pos, 8))
        .判断开始 (小于或等于 (i2, 取数组成员数 (m_out)))
            .判断开始 (小于或等于 (相加 (m_Pos, 1), 取数组成员数 (m_prePlain)))
                .判断开始 (小于或等于 (相加 (offset, m_preCrypt, m_Pos), 取数组成员数 (o_m)))
                    赋值 (m_out [i2], 位异或 (o_m [相加 (offset, m_preCrypt, m_Pos)], m_prePlain [相加 (m_Pos, 1)]))
                .默认
                    返回 (假)
                .判断结束
                
            .默认
                返回 (假)
            .判断结束
            
        .默认
            返回 (假)
        .判断结束
        赋值 (i2, 相加 (i2, 1))
        赋值 (o_count, 相减 (o_count, 1))
        赋值 (m_Pos, 相加 (m_Pos, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        赋值 (o_m, binFrom)
        赋值 (m_preCrypt, 相减 (m_Crypt, 8))
        Decrypt8Bytes (binFrom, offset, o_intLen)
    .如果真结束
    
.判断循环尾 ()

.变量循环首 (1, 7, 1, i)
    .如果真 (小于 (m_Pos, 8))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        
        .如果真 (等于 (m_Pos, 8))
            赋值 (o_m, binFrom)
            Decrypt8Bytes (binFrom, offset, o_intLen)
        .如果真结束
        
        
    .如果真结束
    
    
.变量循环尾 ()

赋值 (参_回传字节型数组, m_out)
返回 (真)

.子程序 Decrypt8Bytes, 逻辑型, , 
.参数 input, 字节型, 数组, 
.参数 offset, 空白型, , 
.参数 intlen, 空白型, , 

.局部变量 i, 空白型, , , 

.变量循环首 (1, 8, 1, i)
    .如果真 (大于 (相加 (m_contextStart, i), intlen))
        返回 (真)
    .如果真结束
    .如果真 (大于 (相减 (相加 (offset, m_Crypt, i), 1), 取数组成员数 (input)))
        返回 (假)
    .如果真结束
    赋值 (m_prePlain [i], 位异或 (m_prePlain [i], input [相减 (相加 (offset, m_Crypt, i), 1)]))
     ' 输出调试文本 (m_prePlain [i])
.变量循环尾 ()
Decipher (m_prePlain, m_Key, 真, m_prePlain)

.如果真 (等于 (取数组成员数 (m_prePlain), 0))
    返回 (假)
.如果真结束

赋值 (m_contextStart, 相加 (m_contextStart, 8))
赋值 (m_Crypt, 相加 (m_Crypt, 8))
赋值 (m_Pos, 0)
返回 (真)

.子程序 Decipher, 空白型, , 
.参数 BinInput, 字节型, 数组, 
.参数 BinKey, 字节型, 数组, 
.参数 Is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 sum, 长整数型, , , 
.局部变量 rounds, 空白型, , , 
.局部变量 y, 长整数型, , , 
.局部变量 z, 长整数型, , , 
.局部变量 a, 长整数型, , , 
.局部变量 b, 长整数型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 d, 长整数型, , , 
.局部变量 i, 空白型, , , 
.局部变量 test, 长整数型, , , 

赋值 (sum, 3816266640)

赋值 (y, GetUInt (BinInput, 1, 4))

赋值 (z, GetUInt (BinInput, 5, 4))

赋值 (a, GetUInt (m_Key, 1, 4))

赋值 (b, GetUInt (m_Key, 5, 4))

赋值 (c, GetUInt (m_Key, 9, 4))

赋值 (d, GetUInt (m_Key, 13, 4))

.如果 (Is16Rounds)
    赋值 (rounds, 16)
.否则
    赋值 (rounds, 32)
.如果结束

.计次循环首 (rounds, i)
    赋值 (test, 长整型位异或 (长整型位异或 (相加 (长整型左移 (y, 4), c), 相加 (y, sum)), 相加 (长整型右移 (y, 5), d)))
    赋值 (z, 相减 (z, test))
    赋值 (z, 长整型位与 (z, 4294967295))
    赋值 (test, 长整型位异或 (长整型位异或 (相加 (长整型左移 (z, 4), a), 相加 (z, sum)), 相加 (长整型右移 (z, 5), b)))
    赋值 (y, 相减 (y, test))
    赋值 (y, 长整型位与 (y, 4294967295))
    赋值 (sum, 相减 (sum, 2654435769))
    赋值 (sum, 长整型位与 (sum, 4294967295))
.计次循环尾 ()
ToBytes (y, z, 参_回传字节型数组)

.子程序 GetUInt, 长整数型, , 
.参数 Input, 字节型, 数组, 
.参数 Ioffset, 空白型, , 
.参数 intLen, 空白型, , 

.局部变量 ret, 长整数型, , , 
.局部变量 lend, 空白型, , , 
.局部变量 i, 空白型, , , 

.如果 (大于 (intLen, 4))
    赋值 (lend, 相加 (Ioffset, 4))
.否则
    赋值 (lend, 相加 (Ioffset, intLen))
.如果结束

.变量循环首 (Ioffset, 相减 (lend, 1), 1, i)
    赋值 (ret, 左移 (ret, 8))
    .如果真 (小于 (取数组成员数 (Input), i))
        跳出循环 ()
    .如果真结束
    赋值 (ret, 位或 (ret, Input [i]))
    
.变量循环尾 ()
返回 (到无符号长整型 (ret))

.子程序 ToBytes, 空白型, , '返回字节型数组的字节集
.参数 a, 长整数型, , 
.参数 b, 长整数型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 bytes, 字节型, , "8", 

赋值 (bytes [1], 位与 (右移 (a, 24), 255))
赋值 (bytes [2], 位与 (右移 (a, 16), 255))
赋值 (bytes [3], 位与 (右移 (a, 8), 255))
赋值 (bytes [4], 位与 (a, 255))
赋值 (bytes [5], 位与 (右移 (b, 24), 255))
赋值 (bytes [6], 位与 (右移 (b, 16), 255))
赋值 (bytes [7], 位与 (右移 (b, 8), 255))
赋值 (bytes [8], 位与 (b, 255))
赋值 (参_回传字节型数组, bytes)


.子程序 HashTea, 空白型, , 
.参数 binFrom, 字节型, 数组, 
.参数 binTkye, 字节型, 数组, 
.参数 offset, 空白型, , 起始位置，从1开始
.参数 is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 intlen, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 i2, 空白型, , , 

赋值 (m_Header, 真)
赋值 (m_Key, binTkye)
赋值 (m_Pos, 1)
赋值 (m_padding, 0)
赋值 (m_Crypt, 0)
赋值 (m_preCrypt, 0)
赋值 (intlen, 取数组成员数 (binFrom))
赋值 (m_Pos, 求余数 (相加 (intlen, 10), 8))
.如果真 (不等于 (m_Pos, 0))
    赋值 (m_Pos, 相减 (8, m_Pos))
.如果真结束
重定义数组 (m_out, 假, 相加 (intlen, m_Pos, 9, 1))
置随机数种子 ()

赋值 (m_Plain [1], 长整型位异或 (长整型位与 (取随机数 (1000, 5000), 248), m_Pos))

.计次循环首 (m_Pos, i)
    .如果真 (小于 (取数组成员数 (m_Plain), 相加 (i, 1)))
        跳出循环 ()
    .如果真结束
    赋值 (m_Plain [相加 (i, 1)], 长整型位与 (取随机数 (1000, 5000), 255))
.计次循环尾 ()

.计次循环首 (8, i)
    .如果真 (小于 (取数组成员数 (m_prePlain), i))
        跳出循环 ()
    .如果真结束
    赋值 (m_prePlain [i], 0)
.计次循环尾 ()

赋值 (m_Pos, 相加 (m_Pos, 1))
赋值 (m_padding, 1)

.循环判断首 ()
    .如果 (小于 (m_Pos, 8))
        .如果真 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)))
            跳出循环 ()
        .如果真结束
        赋值 (m_Plain [相加 (m_Pos, 1)], 长整型位与 (取随机数 (1000, 5000), 255))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (m_padding, 相加 (m_padding, 1))
    .否则
        Encrypt8Bytes (is16Rounds)
    .如果结束
    
.循环判断尾 (小于 (m_padding, 3))

赋值 (i2, offset)
.判断循环首 (大于 (intlen, 0))
    
    .如果 (小于 (m_Pos, 8))
        .如果真 (或者 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)), 小于 (取数组成员数 (binFrom), i2)))
            跳出循环 ()
        .如果真结束
        
        赋值 (m_Plain [相加 (m_Pos, 1)], binFrom [i2])
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (intlen, 相减 (intlen, 1))
        赋值 (i2, 相加 (i2, 1))
    .否则
        Encrypt8Bytes (is16Rounds)
    .如果结束
    
    
.判断循环尾 ()

赋值 (m_padding, 1)
.判断循环首 (小于 (m_padding, 8))
    .如果真 (小于 (m_Pos, 8))
        .如果真 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)))
            跳出循环 ()
        .如果真结束
        
        赋值 (m_Plain [相加 (m_Pos, 1)], 0)
        赋值 (m_padding, 相加 (m_padding, 1))
        赋值 (m_Pos, 相加 (m_Pos, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        Encrypt8Bytes (is16Rounds)
    .如果真结束
    
.判断循环尾 ()
赋值 (参_回传字节型数组, m_out)


.子程序 Encrypt8Bytes, 空白型, , 
.参数 Is16Rounds, 逻辑型, , 

.局部变量 Crypted, 字节型, , "0", 
.局部变量 i, 空白型, , , 

赋值 (m_Pos, 1)
.计次循环首 (8, i)
    .如果真 (或者 (小于 (取数组成员数 (m_Plain), i), 小于 (取数组成员数 (m_out), 相加 (m_preCrypt, i))))
        返回 ()
    .如果真结束
    
    
    .如果 (m_Header)
        赋值 (m_Plain [i], 长整型位异或 (m_Plain [i], m_prePlain [1]))
    .否则
        .如果真 (大于 (相加 (m_preCrypt, i), 取数组成员数 (m_out)))
            返回 ()
        .如果真结束
        赋值 (m_Plain [i], 长整型位异或 (m_Plain [i], m_out [相加 (m_preCrypt, i)]))
    .如果结束
    
.计次循环尾 ()
Encipher (m_Plain, m_Key, Is16Rounds, Crypted)
.计次循环首 (取数组成员数 (Crypted), i)
    .如果真 (大于 (相加 (m_Crypt, i), 取数组成员数 (m_out)))
        返回 ()
    .如果真结束
    赋值 (m_out [相加 (m_Crypt, i)], Crypted [i])
.计次循环尾 ()

.计次循环首 (8, i)
    .如果真 (大于 (相加 (m_Crypt, i), 取数组成员数 (m_out)))
        返回 ()
    .如果真结束
    赋值 (m_out [相加 (m_Crypt, i)], 长整型位异或 (m_out [相加 (m_Crypt, i)], m_prePlain [i]))
.计次循环尾 ()

.计次循环首 (取数组成员数 (m_Plain), i)
    .如果真 (大于 (i, 取数组成员数 (m_prePlain)))
        返回 ()
    .如果真结束
    赋值 (m_prePlain [i], m_Plain [i])
.计次循环尾 ()

赋值 (m_preCrypt, m_Crypt)
赋值 (m_Crypt, 相加 (m_Crypt, 8))
赋值 (m_Pos, 0)
赋值 (m_Header, 假)

.子程序 Encipher, 空白型, , 
.参数 BinInput, 字节型, 数组, 
.参数 k, 字节型, 数组, 
.参数 Is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 sum, 长整数型, , , 
.局部变量 rounds, 空白型, , , 
.局部变量 y, 长整数型, , , 
.局部变量 z, 长整数型, , , 
.局部变量 a, 长整数型, , , 
.局部变量 b, 长整数型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 d, 长整数型, , , 
.局部变量 i, 空白型, , , 
.局部变量 test, 长整数型, , , 
.局部变量 匿名局部变量_501, 空白型, , , 

清除数组 (参_回传字节型数组)
赋值 (y, GetUInt (BinInput, 1, 4))
赋值 (z, GetUInt (BinInput, 5, 4))
赋值 (a, GetUInt (m_Key, 1, 4))
赋值 (b, GetUInt (m_Key, 5, 4))
赋值 (c, GetUInt (m_Key, 9, 4))
赋值 (d, GetUInt (m_Key, 13, 4))

.如果 (Is16Rounds)
    赋值 (rounds, 16)
.否则
    赋值 (rounds, 32)
.如果结束

.计次循环首 (rounds, i)
    赋值 (sum, 长整型位与 (sum, 4294967295))
    赋值 (sum, 相加 (sum, 2654435769))
    赋值 (z, 长整型位与 (z, 4294967295))
    赋值 (y, 相加 (y, 长整型位异或 (长整型位异或 (相加 (长整型左移 (z, 4), a), 相加 (z, sum)), 相加 (长整型右移 (z, 5), b))))
    赋值 (y, 长整型位与 (y, 4294967295))
    赋值 (z, 相加 (z, 长整型位异或 (长整型位异或 (相加 (长整型左移 (y, 4), c), 相加 (y, sum)), 相加 (长整型右移 (y, 5), d))))
    
.计次循环尾 ()

ToBytes (y, z, 参_回传字节型数组)

.子程序 长整型位异或, 长整数型, , 长整数的XOR
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.如果真 (或者 (小于 (取字节集长度 (t1), 8), 小于 (取字节集长度 (t2), 8)))
    返回 (0)
.如果真结束
.计次循环首 (8, i)
    赋值 (t3 [i], 位异或 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 长整型位与, 长整数型, , 长整数的AND
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.如果真 (或者 (小于 (取字节集长度 (t1), 8), 小于 (取字节集长度 (t2), 8)))
    返回 (0)
.如果真结束

.计次循环首 (8, i)
    赋值 (t3 [i], 位与 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 长整型右移, 长整数型, , 右移
.参数 x, 长整数型, , 
.参数 n, 空白型, , 

.计次循环首 (n, )
    赋值 (x, 相除 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 长整型左移, 长整数型, , 左移
.参数 x, 长整数型, , 
.参数 n, 空白型, , 

.计次循环首 (n, )
    赋值 (x, 相乘 (x, 2))
.计次循环尾 ()
返回 (x)

.类模块 JceOutputStream, , , 

.程序集变量 pack, _Pack, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 clear, 空白型, , 
pack.Empty ()

.子程序 toByteArray, 字节集, , 
返回 (pack.GetAll ())

.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 

pack.SetData (bin)


.子程序 WriteHead, 空白型, , 
.参数 p_val, 字节型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节型, , , 

.如果 (大于或等于 (p_tag, 15))
    赋值 (t_val, 位或 (p_val, 240))
    pack.SetByte (t_val)
    pack.SetByte (p_tag)
    
.否则
    赋值 (t_val, 位或 (p_val, 左移 (p_tag, 4)))
    pack.SetByte (t_val)
.如果结束



.子程序 WriteObj, 空白型, , 
.参数 p_type, 字节型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

.判断开始 (等于 (p_type, #TYPE_BYTE))
    WriteByte (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_SHORT))
    WriteShort (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_INT))
    WriteInt (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_LONG))
    WriteLong (到长整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_SIMPLE_LIST))
    WriteSimpleList (p_val, p_tag)
.判断 (等于 (p_type, #TYPE_MAP))
     ' WriteMap (p_val, p_tag)
    调试输出 (“error can't write map ”)
.判断 (等于 (p_type, #TYPE_STRING1))
    WriteStringByte (到文本 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_LIST))
    WriteList (p_val, p_tag)
.判断 (等于 (p_type, #TYPE_STRING4))
    WriteStringByte (到文本 (p_val), p_tag)
.默认
    调试输出 (相加 (“error WriteObj  type=”, 到文本 (p_type)))
.判断结束


.子程序 WriteByte, 空白型, , 
.参数 p_val, 字节型, , 
.参数 p_tag, 整数型, , 

.判断开始 (等于 (p_val, 0))
    WriteHead (#TYPE_ZERO_TAG, p_tag)
.默认
    WriteHead (#TYPE_BYTE, p_tag)
    pack.SetByte (p_val)
.判断结束


.子程序 WriteShort, 空白型, , 
.参数 p_val, 短整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -128), 小于或等于 (p_val, 127)))
    WriteByte (p_val, p_tag)
.默认
    WriteHead (#TYPE_SHORT, p_tag)
    pack.SetShort (p_val)
.判断结束


.子程序 WriteInt, 空白型, , 
.参数 p_val, 整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -32768), 小于或等于 (p_val, 32767)))
    WriteShort (p_val, p_tag)
.默认
    WriteHead (#TYPE_INT, p_tag)
    pack.SetInt (p_val)
.判断结束


.子程序 WriteLong, 空白型, , 
.参数 p_val, 长整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -2147483648), 小于或等于 (p_val, 2147483647)))
    WriteInt (到整数 (p_val), p_tag)
.默认
    
    WriteHead (#TYPE_LONG, p_tag)
    pack.SetBin (Long2Bin (p_val))
.判断结束


.子程序 WriteByteString, 空白型, , 十六进制字节
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 十六进制文本到字节集 (删全部空 (p_val)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.SetInt (取字节集长度 (t_val))
    pack.SetBin (t_val)
.默认
    WriteHead (#TYPE_STRING1, p_tag)
    pack.SetByte (取字节集长度 (t_val))
    pack.SetBin (t_val)
.判断结束


.子程序 WriteStringByte, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 编码_Ansi到Utf8 (p_val))
赋值 (t_val, 取字节集左边 (t_val, 相减 (取字节集长度 (t_val), 1)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.SetInt (取字节集长度 (t_val))
    pack.SetBin (t_val)
.默认
    WriteHead (#TYPE_STRING1, p_tag)
    pack.SetByte (取字节集长度 (t_val))
    pack.SetBin (t_val)
.判断结束


.子程序 WriteJceStruct, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

WriteHead (#TYPE_STRUCT_BEGIN, p_tag)
pack.SetBin (p_val)
WriteHead (#TYPE_STRUCT_END, 0)

.子程序 WriteSimpleList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

WriteHead (#TYPE_SIMPLE_LIST, p_tag)
WriteHead (0, 0)
WriteInt (取字节集长度 (p_val), 0)
pack.SetBin (p_val)

.子程序 WriteList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

.局部变量 i, 整数型, , , 

WriteHead (#TYPE_LIST, p_tag)
WriteInt (取字节集长度 (p_val), 0)
.计次循环首 (取字节集长度 (p_val), i)
    WriteInt (p_val [i], 0)
.计次循环尾 ()

.子程序 WriteMap, 空白型, , 
.参数 p_key, JceMap, 数组, 
.参数 p_tag, 长整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 len, 整数型, , , 

WriteHead (#TYPE_MAP, p_tag)
赋值 (len, 取数组成员数 (p_key))
WriteShort (len, 0)
.如果真 (等于 (len, 0))
    返回 ()
.如果真结束
.计次循环首 (len, i)
    WriteObj (p_key [i], key_type, p_key [i], key, 0)
    WriteObj (p_key [i], val_type, p_key [i], val, 1)
.计次循环尾 ()



.子程序 putHex, 空白型, , 
.参数 hex, 文本型, , 

pack.SetHex (hex)


.子程序 WriteStringByte_2, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 编码_Ansi到Utf8 (p_val))
赋值 (t_val, 取字节集左边 (t_val, 相减 (取字节集长度 (t_val), 1)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.SetInt (取字节集长度 (t_val))
    pack.SetBin (t_val)
.默认
    WriteHead (13, p_tag)
    pack.SetByte (取字节集长度 (t_val))
    pack.SetBin (t_val)
.判断结束


.类模块 JceInputStream, , , 

.程序集变量 unpackReq, _Unpack, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 

unpackReq.SetData (bin)


.子程序 SkipToTag, 逻辑型, , 跳到指定tag处
.参数 p_tag, 整数型, , 

.局部变量 localHeadData, HeadData, , , 
.局部变量 step, 整数型, , , 

.循环判断首 ()
    赋值 (step, peakHead (localHeadData))
    .如果真 (等于 (localHeadData.type, #TYPE_STRUCT_END))
        跳出循环 ()
    .如果真结束
    .如果 (小于或等于 (localHeadData.tag, p_tag))
        .如果真 (不等于 (localHeadData.tag, p_tag))
            跳出循环 ()
        .如果真结束
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    skip (step)
    skipField (localHeadData.type)
.循环判断尾 (假)
返回 (假)

.子程序 skipField, 空白型, , 
.参数 p_type, 整数型, , 

.局部变量 t_len, 整数型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 

.判断开始 (等于 (p_type, #TYPE_BYTE))
    skip (1)
.判断 (等于 (p_type, #TYPE_SHORT))
    skip (2)
.判断 (等于 (p_type, #TYPE_INT))
    skip (4)
.判断 (等于 (p_type, #TYPE_LONG))
    skip (8)
.判断 (等于 (p_type, #TYPE_SIMPLE_LIST))
     ' 7D    00 00 46
     ' FD 15 00 00 08  08 88 F2 02 88 19 C0 17
    unpackReq.GetByte ()
     ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (localHeadData.type, #TYPE_SHORT))
            赋值 (t_len, unpackReq.GetShort ())
        .否则
            赋值 (t_len, unpackReq.GetByte ())
        .如果结束
        skip (t_len)
    .判断结束
    
.判断 (等于 (p_type, #TYPE_MAP))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        ReadHead (localHeadData)
        赋值 (t_count, localHeadData.type)
        .计次循环首 (t_count, i)
             ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
            
            ReadHead (localHeadData)
            skipField (localHeadData.type)
             ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
            ReadHead (localHeadData)
            skipField (localHeadData.type)
        .计次循环尾 ()
    .判断结束
    
.判断 (等于 (p_type, #TYPE_ZERO_TAG))
    
.判断 (等于 (p_type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.GetByte ())
    skip (t_len)
.判断 (等于 (p_type, #TYPE_LIST))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (localHeadData.type, #TYPE_SHORT))
            赋值 (t_count, unpackReq.GetShort ())
        .否则
            赋值 (t_count, unpackReq.GetByte ())
        .如果结束
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            skipField (localHeadData.type)
        .计次循环尾 ()
    .判断结束
    
.判断 (等于 (p_type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.GetInt ())
    skip (t_len)
.判断 (等于 (p_type, #TYPE_STRUCT_BEGIN))
    ReadHead (localHeadData)
    .判断循环首 (不等于 (localHeadData.type, #TYPE_STRUCT_END))
        skipField (localHeadData.type)
        ReadHead (localHeadData)
    .判断循环尾 ()
.默认
    调试输出 (相加 (“error skipField  type=”, 到文本 (p_type)))
.判断结束


.子程序 skip, 空白型, , 
.参数 step, 整数型, , 

unpackReq.GetBin (step)

.子程序 peakHead, 整数型, , 
.参数 localHeadData, HeadData, , 

返回 (ReadHead (localHeadData, unpackReq.GetAll ()))

.子程序 ReadHead, 整数型, , 
.参数 paramHead, HeadData, 参考, 
.参数 buffer, 字节集, 可空, 

.局部变量 i, 字节型, , , 
.局部变量 unptmp, _Unpack, , , 
.局部变量 ptmp, _Pack, , , 

.判断开始 (等于 (是否为空 (buffer), 真))
    赋值 (i, unpackReq.GetByte ())
    
     ' 调试输出 (i)
    赋值 (paramHead.type, 位与 (i, 15))
    赋值 (paramHead.tag, 右移 (位与 (i, 240), 4))
     ' 调试输出 (i, type, tag)
     ' paramHead.type ＝ type
     ' paramHead.tag ＝ tag
    .如果真 (等于 (paramHead.tag, 15))
        赋值 (paramHead.tag, unpackReq.GetByte ())
        返回 (2)
    .如果真结束
    返回 (1)
.默认
    ptmp.Empty ()
    ptmp.SetBin (buffer)
    unptmp.SetData (ptmp.GetAll ())
    赋值 (i, unptmp.GetByte ())
    
     ' 调试输出 (i)
    赋值 (paramHead.type, 位与 (i, 15))
    赋值 (paramHead.tag, 右移 (位与 (i, 240), 4))
     ' 调试输出 (i, type, tag)
     ' paramHead.type ＝ type
     ' paramHead.tag ＝ tag
    .如果真 (等于 (paramHead.tag, 15))
        赋值 (paramHead.tag, unptmp.GetByte ())
        返回 (2)
    .如果真结束
    返回 (1)
.判断结束

 ' paramHeadData.type = ((byte)(i & 0xF));
 ' paramHeadData.tag = ((i & 0xF0) >> 4);


.子程序 ReadObj, 文本型, , 
.参数 type, 字节型, , 

.局部变量 t_val, 文本型, , , 
.局部变量 t_len, 整数型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 

.判断开始 (等于 (type, #TYPE_BYTE))
    赋值 (t_val, 到文本 (unpackReq.GetByte ()))
.判断 (等于 (type, #TYPE_SHORT))
    赋值 (t_val, 到文本 (unpackReq.GetShort ()))
.判断 (等于 (type, #TYPE_INT))
    赋值 (t_val, 到文本 (unpackReq.GetInt ()))
.判断 (等于 (type, #TYPE_LONG))
    赋值 (t_val, 到文本 (unpackReq.GetLong ()))
.判断 (等于 (type, #TYPE_SIMPLE_LIST))
     ' 7D 00 00 46
    unpackReq.GetByte ()
    .如果 (等于 (unpackReq.GetByte (), #TYPE_SHORT))
        赋值 (t_len, unpackReq.GetShort ())
    .否则
        赋值 (t_len, unpackReq.GetByte ())
    .如果结束
    赋值 (t_val, 字节集到十六进制文本 (unpackReq.GetBin (t_len)))
    
.判断 (等于 (type, #TYPE_MAP))
    ReadHead (localHeadData)
    赋值 (t_val, “{”)
    .判断开始 (等于 (type, #TYPE_ZERO_TAG))
        
    .默认
        ReadHead (localHeadData)
        赋值 (t_count, type)
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “k=”, ReadObj (localHeadData.type)))
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “,  v=”, ReadObj (localHeadData.type), “  ”))
        .计次循环尾 ()
    .判断结束
    赋值 (t_val, 相加 (t_val, “}”))
    
.判断 (等于 (type, #TYPE_ZERO_TAG))
    赋值 (t_val, “0”)
.判断 (等于 (type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.GetByte ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.GetBin (t_len), { 0 })))
.判断 (等于 (type, #TYPE_LIST))
    ReadHead (localHeadData)
    赋值 (t_val, “[”)
    .判断开始 (等于 (type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (type, #TYPE_SHORT))
            赋值 (t_count, unpackReq.GetShort ())
        .否则
            赋值 (t_count, unpackReq.GetByte ())
        .如果结束
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “”, ReadObj (localHeadData.type)))
            .如果真 (不等于 (i, t_count))
                赋值 (t_val, 相加 (t_val, “,”))
            .如果真结束
            
        .计次循环尾 ()
        
    .判断结束
    赋值 (t_val, 相加 (t_val, “]”))
    
.判断 (等于 (type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.GetInt ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.GetBin (t_len), { 0 })))
.判断 (等于 (type, #TYPE_STRUCT_BEGIN))
    ReadHead (localHeadData)
    .判断循环首 (不等于 (localHeadData.type, #TYPE_STRUCT_END))
        赋值 (t_val, 相加 (t_val, ReadObj (localHeadData.type)))
        ReadHead (localHeadData)
    .判断循环尾 ()
    
    
.默认
    调试输出 (相加 (“error ReadValNum  type=”, 到文本 (type)))
.判断结束

返回 (t_val)

.子程序 ReadByte, 字节型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramByte, 字节型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramByte)
.如果真结束

ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramByte, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramByte, unpackReq.GetByte ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramByte, unpackReq.GetShort ())
.默认
     ' 调试输出 (“read Byte :error type mismatch”)
.判断结束
返回 (paramByte)


.子程序 ReadShort, 短整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramShort, 短整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramShort)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramShort, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramShort, unpackReq.GetByte ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramShort, unpackReq.GetShort ())
.默认
     ' 调试输出 (“read short :error type mismatch”)
.判断结束
返回 (paramShort)


.子程序 ReadInt, 整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramInt1, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramInt1)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramInt1, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramInt1, unpackReq.GetByte ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramInt1, unpackReq.GetShort ())
.判断 (等于 (localHeadData.type, #TYPE_INT))
    赋值 (paramInt1, unpackReq.GetInt ())
.默认
     ' 调试输出 (“read int :error type mismatch”, localHeadData.type)
.判断结束
返回 (paramInt1)

.子程序 ReadLong, 长整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramLong, 长整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramLong)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramLong, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramLong, unpackReq.GetByte ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramLong, unpackReq.GetShort ())
.判断 (等于 (localHeadData.type, #TYPE_INT))
    赋值 (paramLong, unpackReq.GetInt ())
.判断 (等于 (localHeadData.type, #TYPE_LONG))
    赋值 (paramLong, unpackReq.GetLong ())
.默认
     ' 调试输出 (“read int :error type mismatch”, localHeadData.type)
.判断结束
返回 (paramLong)


.子程序 ReadString, 文本型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_len, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (t_val)
.如果真结束
ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.判断 (等于 (localHeadData.type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.GetByte ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.GetBin (t_len), { 0 })))
.判断 (等于 (localHeadData.type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.GetInt ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.GetBin (t_len), { 0 })))
.默认
    
.判断结束
返回 (t_val)

.子程序 ReadSimpleList, 字节集, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 字节集, , , 
.局部变量 t_len, 整数型, , , 
.局部变量 t_type, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (t_val)
.如果真结束

ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_SIMPLE_LIST))
    unpackReq.GetByte ()
    赋值 (t_type, unpackReq.GetByte ())
    .判断开始 (等于 (t_type, #TYPE_ZERO_TAG))
        返回 (t_val)
    .判断 (等于 (t_type, #TYPE_SHORT))
        赋值 (t_len, unpackReq.GetShort ())
    .默认
        赋值 (t_len, unpackReq.GetByte ())
    .判断结束
    赋值 (t_val, unpackReq.GetBin (t_len))
    
.默认
    
.判断结束
返回 (t_val)


.子程序 ReadList, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 ret_arr, 文本型, 数组, 

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 


.如果真 (取反 (SkipToTag (p_tag)))
    返回 ()
.如果真结束
ReadHead (localHeadData)

.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.判断 (等于 (localHeadData.type, #TYPE_LIST))
    赋值 (t_count, ReadShort (0))
    .计次循环首 (t_count, i) ' 这里需要改改 具体看jceFormat
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        加入成员 (ret_arr, t_val)
    .计次循环尾 ()
.默认
    
.判断结束


.子程序 ReadType, 字节型, , 
.局部变量 localHeadData, HeadData, , , 

ReadHead (localHeadData)
返回 (localHeadData.type)

.子程序 ReadToTag, 字节型, , 返回type -1没找到
.参数 p_tag, 整数型, , 

.局部变量 localHeadData, HeadData, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (-1)
.如果真结束
ReadHead (localHeadData)

返回 (localHeadData.type)


.子程序 skipToEnd, 空白型, , 
.局部变量 te, 文本型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 step, 整数型, , , 


.计次循环首 (100, )
    赋值 (te, 字节集到十六进制文本 (unpackReq.GetAll ()))
    赋值 (step, ReadHead (localHeadData))
    赋值 (te, 字节集到十六进制文本 (unpackReq.GetAll ()))
    .如果真 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (localHeadData.type, #TYPE_STRUCT_END))
        跳出循环 ()
    .如果真结束
    skipField (localHeadData.type)
.计次循环尾 ()

.子程序 ReadMap, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 p_val, JceMap, 数组, JceMap

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 t_map, JceMap, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 ()
.如果真结束

ReadHead (localHeadData)
.如果真 (不等于 (localHeadData.type, #TYPE_MAP))
    返回 ()
.如果真结束

ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.默认
    
    .如果 (等于 (localHeadData.type, #TYPE_SHORT))
        赋值 (t_count, unpackReq.GetShort ())
    .否则
        赋值 (t_count, unpackReq.GetByte ())
    .如果结束
    
    .计次循环首 (t_count, i)
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        赋值 (t_map.key_type, localHeadData.type)
        赋值 (t_map.key, 到字节集 (t_val))
        
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        赋值 (t_map.val_type, localHeadData.type)
        赋值 (t_map.val, 到字节集 (t_val))
        
        加入成员 (p_val, t_map)
    .计次循环尾 ()
.判断结束


.子程序 getAll, 字节集, , 返回剩余
返回 (unpackReq.GetAll ())

.类模块 Protobuf, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 Protobuf封装字节集, 字节集, , 
.参数 下标, 整数型, , 
.参数 被封装字节集, 字节集, , 

.局部变量 头, 整数型, , , 
.局部变量 返回字节集, 字节集, , , 
.局部变量 长度, 长整数型, , , 

赋值 (头, 位或 (左移 (下标, 3), 2))
赋值 (长度, 取字节集长度 (被封装字节集))
赋值 (返回字节集, 相加 (到字节集 (到字节 (头)), Protobuf生成整数部分 (长度), 被封装字节集))
返回 (返回字节集)

.子程序 Protobuf封装整数, 字节集, , 
.参数 下标, 整数型, , 
.参数 整数, 长整数型, , 

.局部变量 头, 整数型, , , 
.局部变量 返回字节集, 字节集, , , 

赋值 (头, 位或 (左移 (下标, 3), 0))
赋值 (返回字节集, Protobuf生成整数部分 (整数))
返回 (相加 (到字节集 (到字节 (头)), 返回字节集))

.子程序 Protobuf生成整数部分, 字节集, , 
.参数 整数, 长整数型, , 

.局部变量 余数, 长整数型, , , 
.局部变量 商数, 长整数型, , , 
.局部变量 返回字节集, 字节集, , , 

赋值 (返回字节集, {  })
赋值 (商数, 整数)
.计次循环首 (8, )
    .如果 (小于 (商数, 128))
        赋值 (返回字节集, 相加 (返回字节集, 到字节集 (到字节 (商数))))
        返回 (返回字节集)
    .否则
        赋值 (余数, 求余数 (商数, 128))
        赋值 (商数, 相除 (商数, 128))
        赋值 (返回字节集, 相加 (返回字节集, 到字节集 (到字节 (位或 (余数, 128)))))
    .如果结束
    
.计次循环尾 ()
返回 ({  })



.子程序 Protobuf到json, 文本型, , 
.参数 块数据, 字节集, , 
.参数 继承下标, 文本型, , 

.局部变量 数组, 字节集, , "0", 
.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 细分数组, 字节集, , "0", 
.局部变量 下标, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 匿名局部变量_789, 空白型, , , 
.局部变量 当前数据, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 ia, 整数型, , , 
.局部变量 当前描述, 文本型, , , 
.局部变量 全部描述, 文本型, , "0", 
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (取字节集长度 (块数据), 0))
    返回 (“”)
.如果真结束
Protobuf分割成员 (块数据, 数组)
赋值 (ki, 取数组成员数 (数组))

.计次循环首 (ki, i)
    赋值 (当前描述, “”)
    .如果真 (等于 (取字节集长度 (数组 [i]), 0))
        到循环尾 ()
    .如果真结束
    Protobuf取下标和类型 (取字节集数据 (取字节集左边 (数组 [i], 1), #字节型, 1), 下标, 类型)
    .如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:[”, 删全部空 (字节集到十六进制文本 (数组 [i])), “]”))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    赋值 (当前数据, Protobuf取单个数据值 (数组 [i]))
    .如果真 (等于 (当前数据, {  }))
        赋值 (当前描述, 相加 (到文本 (下标), “:[]”))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    .如果真 (等于 (类型, 0))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, Protobuf解析整数 (当前数据)))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    赋值 (a, Protobuf分割成员 (当前数据, 细分数组))
    取数组成员数 (细分数组)
    .如果真 (等于 (a, 0))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, #引号, 删全部空 (字节集到十六进制文本 (当前数据)), #引号))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, Protobuf到json (当前数据, 相加 (继承下标, 到文本 (下标), “_”))))
    加入成员 (全部描述, 当前描述)
.计次循环尾 ()
赋值 (ki, 取数组成员数 (全部描述))
赋值 (返回文本, “”)
.计次循环首 (ki, i)
    .如果 (等于 (i, ki))
        赋值 (返回文本, 相加 (返回文本, 全部描述 [i]))
    .否则
        赋值 (返回文本, 相加 (返回文本, 全部描述 [i], “ , ”))
    .如果结束
    
.计次循环尾 ()
赋值 (返回文本, 相加 (“{”, 返回文本, “}”))
赋值 (返回文本, 删全部空 (返回文本))
返回 (返回文本)

.子程序 Protobuf分割成员, 整数型, , 
.参数 字节集, 字节集, , 
.参数 成员值, 字节集, 数组, 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 下标, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 当前块, 字节集, , , 
.局部变量 ii, 整数型, , , 
.局部变量 长度字节集, 字节集, , , 
.局部变量 aaa, 整数型, , , 

清除数组 (成员值)
赋值 (ki, 取字节集长度 (字节集))
赋值 (i, 1)
.判断循环首 (小于或等于 (i, ki))
    Protobuf取下标和类型 (字节集 [i], 下标, 类型)
    .如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
        赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
        加入成员 (成员值, 当前块)
        返回 (0)
    .如果真结束
    
    .如果真 (或者 (大于 (下标, 16), 小于 (下标, 1)))
        赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
        加入成员 (成员值, 当前块)
        返回 (0)
    .如果真结束
    
    
    .如果真 (等于 (类型, 2))
        .如果真 (大于或等于 (相加 (ii, 1), ki))
            赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
            加入成员 (成员值, 当前块)
            返回 (0)
        .如果真结束
        
        赋值 (aaa, i)
        赋值 (长度字节集, {  })
        .循环判断首 ()
            赋值 (aaa, 相加 (aaa, 1))
            
            .如果真 (大于 (aaa, ki))
                赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
                加入成员 (成员值, 当前块)
                返回 (0)
            .如果真结束
            赋值 (长度字节集, 相加 (长度字节集, 取字节集中间 (字节集, aaa, 1)))
            
        .循环判断尾 (大于或等于 (字节集 [aaa], 128))
        
        赋值 (长度, 到整数 (Protobuf解析整数 (长度字节集)))
        
        赋值 (当前块, 取字节集中间 (字节集, i, 相加 (长度, 取字节集长度 (长度字节集), 1)))
        加入成员 (成员值, 当前块)
        赋值 (i, 相加 (i, 长度, 1, 取字节集长度 (长度字节集)))
        到循环尾 ()
    .如果真结束
    
    .如果真 (等于 (类型, 0))
        赋值 (ii, i)
        .循环判断首 ()
            赋值 (ii, 相加 (ii, 1))
            .如果真 (大于 (ii, ki))
                跳出循环 ()
            .如果真结束
            
        .循环判断尾 (大于或等于 (字节集 [ii], 128))
        赋值 (当前块, 取字节集中间 (字节集, i, 相加 (相减 (ii, i), 1)))
        加入成员 (成员值, 当前块)
        赋值 (i, 相加 (ii, 1))
        到循环尾 ()
    .如果真结束
    
    
.判断循环尾 ()
返回 (取数组成员数 (成员值))

.子程序 Protobuf取单个数据值, 字节集, , 
.参数 字节集, 字节集, , 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 下标, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 当前块, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 长度字节集, 字节集, , , 
.局部变量 aaa, 整数型, , , 

赋值 (ki, 取字节集长度 (字节集))
.如果真 (等于 (ki, 0))
    返回 ({  })
.如果真结束
Protobuf取下标和类型 (字节集 [1], 下标, 类型)
.如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
    返回 (字节集)
.如果真结束

.如果真 (或者 (大于 (下标, 16), 小于 (下标, 1)))
    返回 (字节集)
.如果真结束


.如果真 (等于 (类型, 2))
    .如果真 (小于 (ki, 2))
        返回 (字节集)
    .如果真结束
    
    赋值 (aaa, 1)
    赋值 (长度字节集, {  })
    .循环判断首 ()
        赋值 (aaa, 相加 (aaa, 1))
        
        .如果真 (大于 (aaa, ki))
            赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
            返回 (当前块)
        .如果真结束
        赋值 (长度字节集, 相加 (长度字节集, 取字节集中间 (字节集, aaa, 1)))
    .循环判断尾 (大于或等于 (字节集 [aaa], 128))
    
    赋值 (长度, 到整数 (Protobuf解析整数 (长度字节集)))
    
    .如果真 (大于 (相加 (长度, 2), ki))
        赋值 (长度, 相减 (ki, 2))
    .如果真结束
    赋值 (当前块, 取字节集中间 (字节集, 相加 (1, 取字节集长度 (长度字节集), 1), 长度))
    返回 (当前块)
.如果真结束

.如果真 (等于 (类型, 0))
    .如果真 (小于 (ki, 2))
        返回 ({  })
    .如果真结束
    赋值 (i, 1)
    .循环判断首 ()
        赋值 (i, 相加 (i, 1))
        .如果真 (大于 (i, ki))
            跳出循环 ()
        .如果真结束
        赋值 (长度, i)
    .循环判断尾 (大于或等于 (字节集 [i], 128))
    赋值 (当前块, 取字节集中间 (字节集, 2, 长度))
    返回 (当前块)
.如果真结束

返回 ({  })

.子程序 Protobuf取下标和类型, 空白型, , 
.参数 标志字节, 字节型, , 
.参数 下标, 整数型, 参考, 
.参数 类型, 整数型, 参考, 

赋值 (下标, 右移 (标志字节, 3))
赋值 (类型, 位与 (标志字节, 7))



.子程序 Protobuf解析整数, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 新字节集, 字节集, , , 
.局部变量 位数, 长整数型, , , 

赋值 (ki, 取字节集长度 (字节集))
.计次循环首 (ki, i)
    .如果真 (大于 (字节集 [i], 128))
        赋值 (字节集 [i], 位与 (字节集 [i], 127))
    .如果真结束
    
.计次循环尾 ()
赋值 (字节集, Flip (字节集))
赋值 (新字节集, 取空白字节集 (ki))
.计次循环首 (ki, i)
    赋值 (位数, 相加 (相乘 (位数, 128), 字节集 [i]))
.计次循环尾 ()
返回 (到文本 (位数))


.程序集 集_文本, , , 

.子程序 文本_取随机范围数字, 文本型, , 如1-100之间的双数或单数或单双一起！
.参数 起始数, 整数型, , 如：1
.参数 结束数, 整数型, , 如：1000
.参数 单双选择, 整数型, 可空, 1为单，2为双,否则为取单双

.局部变量 临时整数, 整数型, , , 

赋值 (临时整数, 汇编_取随机数 (起始数, 结束数))
.判断开始 (等于 (单双选择, 1))
    .如果真 (等于 (求余数 (临时整数, 2), 0))
        .判断开始 (等于 (临时整数, 结束数))
            赋值 (临时整数, 相减 (临时整数, 1))
        .默认
            赋值 (临时整数, 相加 (临时整数, 1))
        .判断结束
        
    .如果真结束
    返回 (到文本 (临时整数))
.判断 (等于 (单双选择, 2))
    .如果真 (等于 (求余数 (临时整数, 2), 1))
        .判断开始 (等于 (临时整数, 结束数))
            赋值 (临时整数, 相减 (临时整数, 1))
        .默认
            赋值 (临时整数, 相加 (临时整数, 1))
        .判断结束
        
    .如果真结束
    返回 (到文本 (临时整数))
.默认
    返回 (到文本 (临时整数))
.判断结束


.子程序 文本_取随机字符, 文本型, , A-Z、a-z、0-9 中取出随机指定数量的字符
.参数 要取出的字符数, 整数型, , 

.局部变量 局_临时文本, 文本型, , , 
.局部变量 局_随机数, 整数型, , , 

.计次循环首 (要取出的字符数, )
    赋值 (局_随机数, 汇编_取随机数 (1, 3))
    .判断开始 (等于 (局_随机数, 1))
        赋值 (局_临时文本, 相加 (局_临时文本, 字符 (汇编_取随机数 (48, 57))))
    .判断 (等于 (局_随机数, 2))
        赋值 (局_临时文本, 相加 (局_临时文本, 字符 (汇编_取随机数 (65, 90))))
    .默认
        赋值 (局_临时文本, 相加 (局_临时文本, 字符 (汇编_取随机数 (97, 122))))
    .判断结束
    
.计次循环尾 ()
返回 (局_临时文本)

.子程序 文本_取随机汉字, 文本型, , 取常用的随机汉字
.参数 个数, 整数型, , 要取出多少个汉字！
.参数 汉字或全拼, 整数型, 可空, 0为汉字，否则为全拼音！

.局部变量 计次, 整数型, , , 
.局部变量 得到的文本, 文本型, , , 

.判断开始 (等于 (汉字或全拼, 0))
    .计次循环首 (个数, 计次)
        赋值 (得到的文本, 相加 (得到的文本, 到文本 (相加 (字符 (负 (汇编_取随机数 (38, 80))), 字符 (负 (汇编_取随机数 (38, 80)))))))
    .计次循环尾 ()
.默认
    .计次循环首 (个数, 计次)
        赋值 (得到的文本, 相加 (得到的文本, 取拼音 (到文本 (相加 (字符 (负 (汇编_取随机数 (38, 80))), 字符 (负 (汇编_取随机数 (38, 80))))), 1)))
    .计次循环尾 ()
.判断结束
返回 (得到的文本)

.子程序 文本_取随机字母, 文本型, , 取随机26个字母！
.参数 要取的字符数, 整数型, , 要取字符个数；
.参数 字母类型, 整数型, 可空, 可空：默认为小写字母；0=小写字母；1=大写字母；2=大小写字母混合；

.局部变量 临时文本, 文本型, , , 
.局部变量 大小写, 整数型, , , 
.局部变量 i, 整数型, , , 

.判断开始 (等于 (字母类型, 0))
    .计次循环首 (要取的字符数, )
        赋值 (临时文本, 相加 (临时文本, 字符 (汇编_取随机数 (97, 122))))
    .计次循环尾 ()
.判断 (等于 (字母类型, 1))
    .计次循环首 (要取的字符数, )
        赋值 (临时文本, 相加 (临时文本, 字符 (汇编_取随机数 (65, 90))))
    .计次循环尾 ()
.默认
    .计次循环首 (要取的字符数, i)
        赋值 (大小写, 选择 (等于 (求余数 (i, 2), 1), 1, 0))
        .如果 (等于 (大小写, 1))
            赋值 (临时文本, 相加 (临时文本, 字符 (汇编_取随机数 (97, 122))))
        .否则
            赋值 (临时文本, 相加 (临时文本, 字符 (汇编_取随机数 (65, 90))))
        .如果结束
        
    .计次循环尾 ()
.判断结束
返回 (临时文本)

.子程序 文本_取随机数字, 文本型, , 汇编_取随机数字，可选单或双！
.参数 字符数, 整数型, , 要取字符个数
.参数 单双选择, 整数型, 可空, 0为单双，1为单，其他数值为双；默认单双一起

.局部变量 返回的文本, 文本型, , , 

.判断开始 (等于 (单双选择, 0))
    .计次循环首 (字符数, )
        赋值 (返回的文本, 相加 (返回的文本, 到文本 (汇编_取随机数 (0, 9))))
    .计次循环尾 ()
.判断 (等于 (单双选择, 1))
    .计次循环首 (字符数, )
        赋值 (返回的文本, 相加 (返回的文本, 到文本 (多项选择 (汇编_取随机数 (1, 5), 1, 3, 5, 7, 9))))
    .计次循环尾 ()
.默认
    .计次循环首 (字符数, )
        赋值 (返回的文本, 相加 (返回的文本, 到文本 (多项选择 (汇编_取随机数 (1, 5), 0, 2, 4, 6, 8))))
    .计次循环尾 ()
.判断结束
返回 (返回的文本)

.子程序 汇编_取随机数, 整数型, , 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
.参数 欲取随机数的最小值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
.参数 欲取随机数的最大值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为无限。

置入代码 ({ 81, 82, 15, 49, 105, 192, 253, 67, 3, 0, 5, 195, 158, 38, 0, 193, 232, 16, 37, 255, 127, 0, 0, 139, 77, 16, 133, 201, 117, 5, 185, 255, 255, 255, 127, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 139, 229, 93, 194, 16, 0 })
返回 (0)

.子程序 文本_取左边, 文本型, , 从文本的左边按 欲寻找的文本 开始寻找
.参数 被查找的文本, 文本型, , 被查找的文本
.参数 欲寻找的文本, 文本型, , 欲寻找的文本
.参数 起始寻找位置, 整数型, 可空, 欲寻找的文本的起始寻找位置
.参数 是否不区分大小写, 逻辑型, 可空, 默认为假区分大小写

.局部变量 找到的位置, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

.如果真 (小于或等于 (起始寻找位置, 0))
    赋值 (起始寻找位置, 1)
.如果真结束
赋值 (找到的位置, 寻找文本 (被查找的文本, 欲寻找的文本, 起始寻找位置, 是否不区分大小写))
.如果真 (等于 (找到的位置, -1))
    返回 (“”)
.如果真结束
赋值 (结果文本, 取文本左边 (被查找的文本, 相减 (找到的位置, 1)))
返回 (结果文本)

.子程序 文本_取右边, 文本型, , 从文本的右边按 欲寻找的文本 开始寻找, 取行右边 (“1234567890”, “5”, 1, 真)
.参数 被查找的文本, 文本型, , 被查找的文本
.参数 欲寻找的文本, 文本型, , 欲寻找的文本
.参数 起始寻找位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为从被搜寻文本的尾部开始。
.参数 是否不区分大小写, 逻辑型, 可空, 默认为假,区分大小写

.局部变量 找到的位置, 整数型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (起始寻找位置, 选择 (是否为空 (起始寻找位置), 相加 (取文本长度 (被查找的文本), 1), 起始寻找位置))
赋值 (找到的位置, 倒找文本 (被查找的文本, 欲寻找的文本, 起始寻找位置, 是否不区分大小写))
.如果真 (等于 (找到的位置, -1))
    返回 (“”)
.如果真结束
赋值 (结果文本, 取文本右边 (被查找的文本, 相加 (相减 (取文本长度 (被查找的文本), 取文本长度 (欲寻找的文本), 找到的位置), 1)))
返回 (结果文本)

.子程序 文本_取出中间文本, 文本型, , 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
.参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
.参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。

.局部变量 局_前面文本位置, 整数型, , , 
.局部变量 局_后面文本位置, 整数型, , , 
.局部变量 局_前面文本, 文本型, , , 
.局部变量 局_后面文本, 文本型, , , 

赋值 (局_前面文本, 子文本替换 (前面文本, “#引号”, #引号, , , 真))
赋值 (局_后面文本, 子文本替换 (后面文本, “#引号”, #引号, , , 真))
赋值 (局_前面文本位置, 寻找文本 (欲取全文本, 局_前面文本, 起始搜寻位置, 是否不区分大小写))
.如果真 (不等于 (局_前面文本位置, -1))
    赋值 (局_前面文本位置, 相加 (局_前面文本位置, 取文本长度 (局_前面文本)))
.如果真结束
赋值 (局_后面文本位置, 寻找文本 (欲取全文本, 局_后面文本, 局_前面文本位置, 是否不区分大小写))
.如果真 (或者 (等于 (局_前面文本位置, -1), 等于 (局_后面文本位置, -1)))
    返回 (“”)
.如果真结束
返回 (取文本中间 (欲取全文本, 局_前面文本位置, 相减 (局_后面文本位置, 局_前面文本位置)))

.子程序 文本_取中间_批量, 整数型, , 比如：欲取全文本为<12345>,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”
.参数 源文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面标识文本, 文本型, , 3的前面为“2”
.参数 后面标识文本, 文本型, , 3的后面为“4”
.参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
.参数 是否区分大小写, 逻辑型, 可空, 是否区分大小写
.参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要;如取出的文本大于50的不要;留空为不限制
.参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
.参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
.参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出? 默认为假，不取出！
.参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出? 默认为假，不取出！
.参数 起始搜寻位置, 整数型, 可空, 注明：位置值从 1 开始。如果本参数被省略，默认为 1 。

.局部变量 Search, 文本型, , , 
.局部变量 StartPos, 整数型, , , 
.局部变量 EndPos, 整数型, , , 

清除数组 (存放取出文本的数组)
赋值 (StartPos, 起始搜寻位置)
.循环判断首 ()
    赋值 (StartPos, 寻找文本 (源文本, 前面标识文本, StartPos, 取反 (是否区分大小写)))
    .如果 (不等于 (StartPos, -1))
        赋值 (EndPos, 寻找文本 (源文本, 后面标识文本, 相加 (StartPos, 取文本长度 (前面标识文本)), 取反 (是否区分大小写)))
        .如果 (不等于 (EndPos, -1))
            赋值 (StartPos, 相加 (StartPos, 取文本长度 (前面标识文本)))
            赋值 (Search, 删首尾空 (取文本中间 (源文本, StartPos, 相减 (EndPos, StartPos))))
            赋值 (Search, 相加 (为取出的文本加上前缀, Search))
            赋值 (Search, 相加 (Search, 为取出的文本加上后缀))
            .如果真 (大于 (取文本长度 (Search), 0))
                .如果真 (连前面标识文本一起取出)
                    赋值 (Search, 相加 (前面标识文本, Search))
                .如果真结束
                .如果真 (连后面标识文本一起取出)
                    赋值 (Search, 相加 (Search, 后面标识文本))
                .如果真结束
                .如果 (不等于 (文本长度大于此数的不要, 0))
                    .如果真 (小于 (取文本长度 (Search), 文本长度大于此数的不要))
                        加入成员 (存放取出文本的数组, Search)
                    .如果真结束
                    处理事件 ()
                .否则
                    加入成员 (存放取出文本的数组, Search)
                .如果结束
                赋值 (StartPos, EndPos)
            .如果真结束
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        处理事件 ()
    .否则
        跳出循环 ()
    .如果结束
    处理事件 ()
.循环判断尾 (不等于 (StartPos, -1))
返回 (取数组成员数 (存放取出文本的数组))

.子程序 文本_去重复文本, 文本型, , 
.参数 原文本, 文本型, , 
.参数 分割符, 文本型, , 

.局部变量 局_数组, 文本型, , "0", 
.局部变量 局_数组1, 文本型, , "0", 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_文本, 文本型, , , 

赋值 (局_数组, 分割文本 (原文本, 分割符, ))
.计次循环首 (取数组成员数 (局_数组), 局_计次)
    .如果真 (等于 (内部_数组成员是否存在_文本 (局_数组1, 局_数组 [局_计次]), -1))
        加入成员 (局_数组1, 局_数组 [局_计次])
        赋值 (局_文本, 相加 (局_文本, 局_数组 [局_计次], 分割符))
    .如果真结束
    
.计次循环尾 ()
赋值 (局_文本, 取文本左边 (局_文本, 相减 (取文本长度 (局_文本), 取文本长度 (分割符))))
返回 (局_文本)

.子程序 内部_数组成员是否存在_文本, 整数型, , 
.参数 数组, 文本型, 数组, 
.参数 要判断值, 文本型, , 

.局部变量 局_计次, 整数型, , , 

.计次循环首 (取数组成员数 (数组), 局_计次)
    .如果真 (等于 (数组 [局_计次], 要判断值))
        返回 (局_计次)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.程序集 集_网页, , , 

.子程序 网页_访问_对象, 字节集, , 使用WinHttp对象的方式访问网页
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 提交Cookies, 文本型, 参考 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 返回状态代码, 整数型, 参考 可空, 网页返回的状态代码，例如：200；302；404等
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 字节集提交, 字节集, 可空, 提交字节集数据
.参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
.参数 超时, 整数型, 可空, 秒|默认为15秒,-1为无限等待
.参数 代理用户名, 文本型, 可空, 用户名
.参数 代理密码, 文本型, 可空, 密码
.参数 代理标识, 整数型, 可空, 代理标识，默认为1，0为路由器
.参数 对象继承, 对象, 可空, 此处可自行提供对象，不再主动创建
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新

.局部变量 局_访问方式, 文本型, , , 
.局部变量 局_WinHttp, 对象, , , 
.局部变量 局_发送协议头, 文本型, , "0", 
.局部变量 局_返回协议头, 文本型, , "0", 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_网页数据, 字节集, , , 
.局部变量 局_变体提交, 变体型, , , 

.如果真 (是否为空 (是否自动合并更新Cookie))
    赋值 (是否自动合并更新Cookie, 真)
.如果真结束

线程_初始化COM库 ()
 ' 局_访问方式 ＝ 选择 (访问方式 ＝ 1, “POST”, “GET”)
.如果真 (或者 (小于 (访问方式, 0), 大于 (访问方式, 2)))
    赋值 (访问方式, 0)
.如果真结束
赋值 (局_访问方式, 多项选择 (相加 (访问方式, 1), “GET”, “POST”, “HEAD”))

.判断开始 (是否为空 (对象继承))
    .如果真 (等于 (局_WinHttp.创建 (“WinHttp.WinHttpRequest.5.1”, ), 假))
        返回 ({  })
    .如果真结束
    
.默认
    赋值 (局_WinHttp, 对象继承)
.判断结束
 ' 局_WinHttp.查看 ()
.如果真 (不等于 (超时, -1))
    .如果 (小于 (超时, 1))
        赋值 (超时, 15000)
    .否则
        赋值 (超时, 相乘 (超时, 1000))
    .如果结束
    局_WinHttp.方法 (“SetTimeouts”, 超时, 超时, 超时, 超时)
.如果真结束

.如果真 (不等于 (代理地址, “”))
    局_WinHttp.方法 (“SetProxy”, 2, 代理地址)
    .如果真 (不等于 (代理用户名, “”))
        .如果真 (是否为空 (代理标识))
            赋值 (代理标识, 1)
        .如果真结束
         ' 局_WinHttp.方法 (“SetProxyCredentials”, 代理用户名, 代理密码, 代理标识)
        .如果真 (等于 (代理标识, 1))
            局_WinHttp.方法 (“SetRequestHeader”, “Proxy-Authorization”, 相加 (“Basic ”, 编码_BASE64编码 (到字节集 (相加 (代理用户名, “:”, 代理密码)))))
        .如果真结束
        
    .如果真结束
    
.如果真结束
局_WinHttp.方法 (“Open”, 局_访问方式, 网址, 假)
.如果真 (禁止重定向)
    局_WinHttp.写属性 (“Option”, 6, 0)
.如果真结束

局_WinHttp.写属性 (“Option”, 4, 13056)

.判断开始 (等于 (附加协议头, “”))
    赋值 (附加协议头, “Accept: */*”)
.默认
    .如果真 (等于 (寻找文本 (附加协议头, “Accept:”, , 假), -1))
        赋值 (附加协议头, 相加 (附加协议头, #换行符, “Accept: */*”))
    .如果真结束
    
.判断结束

.如果真 (等于 (寻找文本 (附加协议头, “Referer:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Referer: ”, 网址))
.如果真结束

.如果真 (等于 (寻找文本 (附加协议头, “Accept-Language:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Accept-Language: zh-cn”))
.如果真结束

.如果真 (等于 (寻找文本 (附加协议头, “User-Agent:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “User-Agent: Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”))
.如果真结束

.如果真 (等于 (寻找文本 (附加协议头, “Content-Type:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Content-Type: application/x-www-form-urlencoded”))
.如果真结束

.如果真 (不等于 (提交Cookies, “”))
    局_WinHttp.方法 (“SetRequestHeader”, “Cookie”, 提交Cookies)
.如果真结束

.判断开始 (等于 (寻找文本 (附加协议头, #换行符, , 假), -1))
    局_WinHttp.方法 (“SetRequestHeader”, 内部_协议头取名 (附加协议头), 内部_协议头取值 (附加协议头))
.默认
    赋值 (局_发送协议头, 分割文本 (附加协议头, #换行符, ))
    .计次循环首 (取数组成员数 (局_发送协议头), 局_计次)
        .如果真 (不等于 (局_发送协议头 [局_计次], “”))
            局_WinHttp.方法 (“SetRequestHeader”, 内部_协议头取名 (局_发送协议头 [局_计次]), 内部_协议头取值 (局_发送协议头 [局_计次]))
        .如果真结束
        
    .计次循环尾 ()
.判断结束

.判断开始 (等于 (字节集提交, {  }))
    局_WinHttp.方法 (“Send”, 提交信息)
.默认
    局_变体提交.赋值 (字节集提交, )
    局_WinHttp.方法 (“Send”, 局_变体提交)
.判断结束
赋值 (局_网页数据, 局_WinHttp.读属性 (“ResponseBody”, ).取字节集 ())
赋值 (返回协议头, 局_WinHttp.读文本属性 (“GetallResponseHeaders”, ))
赋值 (返回协议头, 子文本替换 (返回协议头, “Set-Cookie”, “Set-Cookie”, , , 假))
赋值 (返回状态代码, 局_WinHttp.读数值属性 (“Status”, ))
赋值 (局_返回协议头, 分割文本 (返回协议头, #换行符, ))
赋值 (返回Cookies, “”)
.计次循环首 (取数组成员数 (局_返回协议头), 局_计次)
    .如果真 (不等于 (寻找文本 (局_返回协议头 [局_计次], “Set-Cookie”, , 假), -1))
        .判断开始 (不等于 (寻找文本 (局_返回协议头 [局_计次], “;”, , 假), -1))
            赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (文本_取出中间文本 (局_返回协议头 [局_计次], “Set-Cookie:”, “;”)), “; ”))
        .默认
            赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (子文本替换 (局_返回协议头 [局_计次], “Set-Cookie:”, , , , 假)), “; ”))
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (返回Cookies, 取文本左边 (返回Cookies, 相减 (取文本长度 (返回Cookies), 2)))

.如果真 (是否自动合并更新Cookie)
    .如果真 (取反 (是否为空 (提交Cookies)))
        赋值 (返回Cookies, 网页_Cookie合并更新 (提交Cookies, 返回Cookies))
    .如果真结束
    
.如果真结束

局_WinHttp.清除 ()
线程_取消COM库 ()
返回 (局_网页数据)

.子程序 网页_访问, 字节集, , 使用WinInet的方式访问网页
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, POST专用
.参数 提交Cookies, 文本型, 参考 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 字节集提交, 字节集, 可空, 提交字节集数据
.参数 代理地址, 文本型, 可空, 代理地址，格式为:ip:port,例如:8.8.8.8:88
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新

.局部变量 局_Internet句柄, 整数型, , , 
.局部变量 局_Internet连接句柄, 整数型, , , 
.局部变量 局_HTTP请求句柄, 整数型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_字节集, 字节集, , , 
.局部变量 局_访问方式, 文本型, , , 
.局部变量 局_User_Agent, 文本型, , , 
.局部变量 局_返回协议头, 文本型, , "0", 
.局部变量 局_页面内容, 字节集, , , 
.局部变量 局_请求标记, 整数型, , , 
.局部变量 局_重定向地址, 文本型, , , 
.局部变量 局_HTTPS, 逻辑型, , , 

.如果真 (是否为空 (是否自动合并更新Cookie))
    赋值 (是否自动合并更新Cookie, 真)
.如果真结束


 ' 局_访问方式 ＝ 选择 (访问方式 ＝ 1, “POST”, “GET”)
.如果真 (或者 (小于 (访问方式, 0), 大于 (访问方式, 2)))
    赋值 (访问方式, 0)
.如果真结束
赋值 (局_访问方式, 多项选择 (相加 (访问方式, 1), “GET”, “POST”, “HEAD”))

.如果真 (等于 (到小写 (取文本左边 (网址, 8)), “https://”))
    赋值 (局_HTTPS, 真)
.如果真结束

.判断开始 (不等于 (寻找文本 (附加协议头, “User-Agent:”, , 真), -1))
    赋值 (局_User_Agent, 删首尾空 (文本_取出中间文本 (相加 (附加协议头, #换行符), “User-Agent:”, #换行符)))
    .如果真 (等于 (局_User_Agent, “”))
        赋值 (局_User_Agent, 内部_协议头取值 (附加协议头))
    .如果真结束
    
.默认
    赋值 (局_User_Agent, “Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”)
.判断结束

.判断开始 (等于 (代理地址, “”))
    赋值 (局_Internet句柄, InternetOpenA (局_User_Agent, 1, 字符 (0), 字符 (0), 0))
.默认
    .判断开始 (局_HTTPS) ' 用于解决win7下https协议代理无效问题
        赋值 (局_Internet句柄, InternetOpenA (局_User_Agent, 3, 代理地址, “”, 0))
    .默认
        赋值 (局_Internet句柄, InternetOpenA (局_User_Agent, 3, 相加 (“http=”, 代理地址), “”, 0))
    .判断结束
    
.判断结束

.如果真 (等于 (局_Internet句柄, 0))
    InternetCloseHandle (局_Internet句柄)
    返回 ({  })
.如果真结束
赋值 (局_Internet连接句柄, InternetConnectA (局_Internet句柄, 网页_取域名 (网址), 网页_取端口 (网址), 字符 (0), 字符 (0), 3, 0, 0))
.如果真 (等于 (局_Internet连接句柄, 0))
    InternetCloseHandle (局_Internet连接句柄)
    InternetCloseHandle (局_Internet句柄)
    返回 ({  })
.如果真结束

赋值 (局_请求标记, 位或 (#INTERNET_FLAG_RELOAD, #INTERNET_COOKIE_THIRD_PARTY))
.如果真 (取反 (是否为空 (提交Cookies)))
    赋值 (局_请求标记, 位或 (局_请求标记, #INTERNET_FLAG_NO_COOKIES))
.如果真结束

.如果真 (禁止重定向)
    赋值 (局_请求标记, 位或 (局_请求标记, #INTERNET_FLAG_NO_AUTO_REDIRECT))
.如果真结束

.判断开始 (局_HTTPS)
    赋值 (局_请求标记, 位或 (局_请求标记, #INTERNET_FLAG_SECURE))
.默认
    赋值 (局_请求标记, 位或 (局_请求标记, #INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS))
.判断结束

赋值 (局_HTTP请求句柄, HttpOpenRequestA (局_Internet连接句柄, 局_访问方式, 网页_取页面地址 (网址), “HTTP/1.1”, 字符 (0), 字符 (0), 局_请求标记, 0))
.如果真 (等于 (局_HTTP请求句柄, 0))
    InternetCloseHandle (局_HTTP请求句柄)
    InternetCloseHandle (局_Internet连接句柄)
    InternetCloseHandle (局_Internet句柄)
    返回 ({  })
.如果真结束


.判断开始 (等于 (附加协议头, “”))
    赋值 (附加协议头, “Accept: */*”)
.默认
    .如果真 (等于 (寻找文本 (附加协议头, “Accept:”, , 假), -1))
        赋值 (附加协议头, 相加 (附加协议头, #换行符, “Accept: */*”))
    .如果真结束
    
.判断结束

.如果真 (等于 (寻找文本 (附加协议头, “Referer:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Referer: ”, 网址))
.如果真结束

.如果真 (等于 (寻找文本 (附加协议头, “Accept-Language:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Accept-Language: zh-cn”))
.如果真结束

.如果真 (等于 (寻找文本 (附加协议头, “Content-Type:”, , 假), -1))
    赋值 (附加协议头, 相加 (附加协议头, #换行符, “Content-Type: application/x-www-form-urlencoded”))
.如果真结束

.如果真 (不等于 (提交Cookies, “”))
    .判断开始 (等于 (寻找文本 (提交Cookies, “Cookie:”, , 假), -1))
        赋值 (附加协议头, 相加 (附加协议头, #换行符, “Cookie: ”, 提交Cookies))
    .默认
        赋值 (附加协议头, 相加 (附加协议头, #换行符, 提交Cookies))
    .判断结束
    
.如果真结束


.判断开始 (等于 (访问方式, 0))
    HttpSendRequestA (局_HTTP请求句柄, 附加协议头, 取文本长度 (附加协议头), “”, 0)
.默认
    .如果真 (等于 (字节集提交, {  }))
        赋值 (字节集提交, 到字节集 (提交信息))
    .如果真结束
    HttpSendRequestA_字节集 (局_HTTP请求句柄, 附加协议头, 取文本长度 (附加协议头), 字节集提交, 取字节集长度 (字节集提交))
.判断结束

赋值 (局_计次, 0)
赋值 (局_字节集, 取空白字节集 (1024))
.循环判断首 ()
    InternetReadFile (局_HTTP请求句柄, 局_字节集, 1024, 局_计次)
    赋值 (局_页面内容, 相加 (局_页面内容, 取字节集左边 (局_字节集, 局_计次)))
.循环判断尾 (不等于 (局_计次, 0))
赋值 (返回协议头, 取空白文本 (5000))
HttpQueryInfoA (局_HTTP请求句柄, 22, 返回协议头, 5000, 0)
赋值 (返回协议头, 子文本替换 (返回协议头, “Set-Cookie”, “Set-Cookie”, , , 假))
InternetCloseHandle (局_HTTP请求句柄)
InternetCloseHandle (局_Internet连接句柄)
InternetCloseHandle (局_Internet句柄)
赋值 (局_返回协议头, 分割文本 (返回协议头, #换行符, ))
赋值 (返回Cookies, “”)
.计次循环首 (取数组成员数 (局_返回协议头), 局_计次)
    .如果真 (不等于 (寻找文本 (局_返回协议头 [局_计次], “Set-Cookie”, , 假), -1))
        .判断开始 (不等于 (寻找文本 (局_返回协议头 [局_计次], “;”, , 假), -1))
            赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (文本_取出中间文本 (局_返回协议头 [局_计次], “Set-Cookie:”, “;”)), “; ”))
        .默认
            赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (子文本替换 (局_返回协议头 [局_计次], “Set-Cookie:”, , , , 假)), “; ”))
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (返回Cookies, 取文本左边 (返回Cookies, 相减 (取文本长度 (返回Cookies), 2)))
.如果真 (是否自动合并更新Cookie)
    .如果真 (取反 (是否为空 (提交Cookies)))
        赋值 (返回Cookies, 网页_Cookie合并更新 (提交Cookies, 返回Cookies))
    .如果真结束
    
.如果真结束
返回 (局_页面内容)

.子程序 网页_访问S, 文本型, , 源码由[洫蜘蛛]提供,使用WinHttp的方式访问网页,如果返回是“?”请查询返回协议头是否有“Content-Encoding: gzip“表示gzip压缩过网页，可用 网页_GZIP解压()命令解压，如果返回是乱码，则返回原始文本，请自行转换编码，失败返回空文本，请取出状态文本。
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, POST专用
.参数 提交Cookies, 文本型, 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 网站登录用户名, 文本型, 可空, 自动登录网页用户名 如路由器
.参数 网站登录密码, 文本型, 可空, 
.参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
.参数 代理帐号, 文本型, 可空, 
.参数 代理密码, 文本型, 可空, 
.参数 超时时间, 整数型, 可空, 可以被省略，单位：秒，默认30秒，如果提供大于0的数值，则修改操作超时时间。
.参数 返回重定向, 文本型, 参考 可空, 可以被省略，提供参数时只能提供文本型变量，用于当发生重定向时取回页面重定向的地址。
.参数 返回状态文本, 文本型, 参考 可空, 
.参数 返回原始数据, 字节集, 参考 可空, 可以被省略，返回原始网页编码
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新

.局部变量 局_URL结构, URL_COMPONENTS, , , 
.局部变量 局_网页地址, 字节集, , , 
.局部变量 局_域名, 文本型, , , 
.局部变量 局_端口, 空白型, , , 
.局部变量 局_重定向地址, 文本型, , , 
.局部变量 局_HTTPS, 逻辑型, , , 
.局部变量 局_会话句柄, 整数型, , , 
.局部变量 局_User_Agent, 文本型, , , 
.局部变量 局_代理名称, 字节集, , , 
.局部变量 局_会话类型, 空白型, , , 
.局部变量 局_连接句柄, 空白型, , , 
.局部变量 局_请求句柄, 空白型, , , 
.局部变量 局_访问方式, 文本型, , , 
.局部变量 局_页面地址, 字节集, , , 
.局部变量 局_设置超时, 空白型, , , 
.局部变量 局_请求标记, 空白型, , , 
.局部变量 局_请求协议, 文本型, , , 
.局部变量 局_请求报头, 字节集, , , 
.局部变量 局_数据长度, 整数型, , , 
.局部变量 局_提交数据, 字节集, , , 
.局部变量 局_可读长度, 整数型, , , 
.局部变量 局_缓存数据, 字节集, , , 
.局部变量 局_网页数据, 字节集, , , 
.局部变量 局_网页内容, 文本型, , , 
.局部变量 局_文本数组, 文本型, , "0", 
.局部变量 局_编码类型, 文本型, , , 
.局部变量 局_解码对象, 对象, , , 
.局部变量 局_变体型, 变体型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_正则, 正则表达式类, , , 

.如果真 (是否为空 (是否自动合并更新Cookie))
    赋值 (是否自动合并更新Cookie, 真)
.如果真结束


.如果 (WinHttpCheckPlatform ())
    赋值 (局_URL结构.dwStructSize, 60)
    连续赋值 (-1, 局_URL结构.dwSchemeLength, 局_URL结构.dwHostNameLength, 局_URL结构.dwUrlPathLength, 局_URL结构.dwExtraInfoLength)
    赋值 (局_网页地址, 编码_Ansi到Unicode (网址))
    .如果 (WinHttpCrackUrl (局_网页地址, 取字节集长度 (局_网页地址), 0, 局_URL结构))
        赋值 (局_域名, 编码_Unicode到Ansi (指针到字节集 (局_URL结构.lpszHostName, 相乘 (局_URL结构.dwHostNameLength, 2))))
        赋值 (局_页面地址, 选择 (小于 (局_URL结构.dwUrlPathLength, 1), 编码_Ansi到Unicode (“/”), 相加 (指针到字节集 (局_URL结构.lpszUrlPath, 相乘 (局_URL结构.dwUrlPathLength, 2)), 指针到字节集 (局_URL结构.lpszExtraInfo, 相乘 (局_URL结构.dwExtraInfoLength, 2)), { 0, 0 })))
        赋值 (局_端口, 局_URL结构.nPort)
        赋值 (局_HTTPS, 等于 (#INTERNET_SCHEME_HTTPS, 局_URL结构.nScheme))
        赋值 (局_会话类型, 选择 (大于 (取文本长度 (代理地址), 0), #WINHTTP_ACCESS_TYPE_NAMED_PROXY, #WINHTTP_ACCESS_TYPE_NO_PROXY))
        赋值 (局_代理名称, 选择 (等于 (取文本长度 (代理地址), 0), { 0, 0 }, 选择 (局_HTTPS, 编码_Ansi到Unicode (代理地址), 编码_Ansi到Unicode (相加 (“http=”, 代理地址)))))
        赋值 (局_会话句柄, WinHttpOpen (0, 局_会话类型, 局_代理名称, 0, 0))
        .如果 (不等于 (局_会话句柄, 0))
            赋值 (局_连接句柄, WinHttpConnect (局_会话句柄, 编码_Ansi到Unicode (局_域名), 局_端口, 0))
            .如果 (不等于 (局_连接句柄, 0))
                赋值 (局_访问方式, 选择 (或者 (小于 (访问方式, 0), 大于 (访问方式, 3)), “GET”, 多项选择 (相加 (访问方式, 1), “GET”, “POST”, “HEAD”, “PUT”)))
                赋值 (局_请求句柄, WinHttpOpenRequest (局_连接句柄, 编码_Ansi到Unicode (局_访问方式), 局_页面地址, 0, #WINHTTP_NO_REFERER, #WINHTTP_DEFAULT_ACCEPT_TYPES, 选择 (局_HTTPS, #WINHTTP_FLAG_SECURE, 0)))
                .如果 (不等于 (局_请求句柄, 0))
                    赋值 (局_设置超时, 选择 (大于 (超时时间, 0), 相乘 (超时时间, 1000), 30000))
                    .如果 (WinHttpSetTimeouts (局_请求句柄, 局_设置超时, 局_设置超时, 局_设置超时, 局_设置超时))
                        .如果真 (并且 (大于 (取文本长度 (网站登录用户名), 0), 大于 (取文本长度 (网站登录密码), 0)))
                            .如果真 (等于 (WinHttpSetCredentials (局_请求句柄, #WINHTTP_AUTH_TARGET_SERVER, #WINHTTP_AUTH_SCHEME_BASIC, 编码_Ansi到Unicode (网站登录用户名), 编码_Ansi到Unicode (网站登录密码), 0), 假))
                                赋值 (返回状态文本, “707 设置代理凭证失败!”)
                                WinHttpCloseHandle (局_请求句柄)
                                WinHttpCloseHandle (局_连接句柄)
                                WinHttpCloseHandle (局_会话句柄)
                                返回 (“”)
                            .如果真结束
                            
                        .如果真结束
                        .如果真 (并且 (大于 (取文本长度 (代理帐号), 0), 大于 (取文本长度 (代理密码), 0)))
                            .如果真 (等于 (WinHttpSetCredentials (局_请求句柄, #WINHTTP_AUTH_TARGET_PROXY, #WINHTTP_AUTH_SCHEME_BASIC, 编码_Ansi到Unicode (代理帐号), 编码_Ansi到Unicode (代理密码), 0), 假))
                                WinHttpCloseHandle (局_请求句柄)
                                WinHttpCloseHandle (局_连接句柄)
                                WinHttpCloseHandle (局_会话句柄)
                                赋值 (返回状态文本, “707 设置代理凭证失败!”)
                                返回 (“”)
                            .如果真结束
                            
                        .如果真结束
                        赋值 (局_请求标记, 选择 (是否为空 (提交Cookies), #WINHTTP_OPTION_DISABLE_FEATURE, #WINHTTP_OPTION_ENABLE_FEATURE))
                        .如果真 (等于 (WinHttpSetOption (局_请求句柄, 局_请求标记, #WINHTTP_DISABLE_COOKIES, 4), 假))
                            赋值 (返回状态文本, “708 禁止自动设置Cookies失败!”)
                            WinHttpCloseHandle (局_请求句柄)
                            WinHttpCloseHandle (局_连接句柄)
                            WinHttpCloseHandle (局_会话句柄)
                            返回 (“”)
                        .如果真结束
                        .如果真 (禁止重定向)
                            .如果真 (等于 (WinHttpSetOption (局_请求句柄, #WINHTTP_OPTION_DISABLE_FEATURE, #WINHTTP_DISABLE_REDIRECTS, 4), 假))
                                赋值 (返回状态文本, “709 重定向设置失败!”)
                                WinHttpCloseHandle (局_请求句柄)
                                WinHttpCloseHandle (局_连接句柄)
                                WinHttpCloseHandle (局_会话句柄)
                                返回 (“”)
                            .如果真结束
                            
                        .如果真结束
                        .如果真 (大于 (取文本长度 (附加协议头), 0)) ' 先加载用户设置的协议头，后面再进行补充。
                            赋值 (局_请求协议, 相加 (附加协议头, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “User-Agent: ”, 1, 真), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Accept: ”, 1, 真), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “Accept: text/html, application/xhtml+xml, */*”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Accept-Encoding: ”, 1, 真), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “Accept-Encoding: gbk, GB2312”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Accept-Language: ”, 1, 真), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “Accept-Language: zh-cn”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Content-Type:”, , 假), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “Content-Type: application/x-www-form-urlencoded”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Cache-Control: ”, , 真), -1))
                            赋值 (局_请求协议, 相加 (局_请求协议, “Cache-Control: no-cache”, #换行符))
                        .如果真结束
                        .如果真 (等于 (寻找文本 (局_请求协议, “Cookie: ”, , 真), -1))
                            .如果真 (大于 (取文本长度 (提交Cookies), 0))
                                赋值 (局_请求协议, 相加 (局_请求协议, “Cookie: ”, 提交Cookies, #换行符))
                            .如果真结束
                            
                        .如果真结束
                        
                        赋值 (局_请求报头, 编码_Ansi到Unicode (局_请求协议))
                        赋值 (局_数据长度, 相减 (相除 (取字节集长度 (局_请求报头), 2), 1))
                        .如果 (WinHttpAddRequestHeaders (局_请求句柄, 局_请求报头, 局_数据长度, 位或 (#WINHTTP_ADDREQ_FLAG_ADD, #WINHTTP_ADDREQ_FLAG_REPLACE)))
                            赋值 (局_提交数据, 到字节集 (提交信息))
                            赋值 (局_数据长度, 取字节集长度 (局_提交数据))
                            .如果 (WinHttpSendRequest (局_请求句柄, 0, 0, 局_提交数据, 局_数据长度, 局_数据长度, 0))
                                .如果 (WinHttpReceiveResponse (局_请求句柄, 0))
                                    赋值 (局_缓存数据, {  })
                                    赋值 (局_网页数据, {  })
                                    .判断循环首 (WinHttpQueryDataAvailable (局_请求句柄, 局_可读长度))
                                        .如果真 (小于 (局_可读长度, 1))
                                            跳出循环 ()
                                        .如果真结束
                                        赋值 (局_缓存数据, 取空白字节集 (局_可读长度))
                                        .如果真 (等于 (WinHttpReadData (局_请求句柄, 局_缓存数据, 局_可读长度, 局_数据长度), 假))
                                            赋值 (返回状态文本, “713 读取数据失败!”)
                                            跳出循环 ()
                                        .如果真结束
                                        赋值 (局_网页数据, 相加 (局_网页数据, 取字节集左边 (局_缓存数据, 局_数据长度)))
                                    .判断循环尾 ()
                                    赋值 (局_缓存数据, {  })
                                    赋值 (局_数据长度, 0)
                                    WinHttpQueryHeaders (局_请求句柄, #WINHTTP_QUERY_RAW_HEADERS_CRLF, 0, 局_缓存数据, 局_数据长度, #WINHTTP_NO_HEADER_INDEX)
                                    赋值 (局_缓存数据, 取空白字节集 (局_数据长度))
                                    .如果真 (WinHttpQueryHeaders (局_请求句柄, #WINHTTP_QUERY_RAW_HEADERS_CRLF, 0, 局_缓存数据, 局_数据长度, #WINHTTP_NO_HEADER_INDEX))
                                        赋值 (返回协议头, 编码_Unicode到Ansi (局_缓存数据))
                                        赋值 (返回状态文本, 取文本中间 (返回协议头, 10, 相减 (寻找文本 (返回协议头, #换行符, 10, 假), 9)))
                                        赋值 (返回协议头, 子文本替换 (返回协议头, “Set-Cookie”, “Set-Cookie”, , , 假))
                                        赋值 (局_文本数组, 分割文本 (返回协议头, #换行符, ))
                                        .计次循环首 (取数组成员数 (局_文本数组), 局_计次)
                                            .如果真 (不等于 (寻找文本 (局_文本数组 [局_计次], “Set-Cookie”, , 假), -1))
                                                .判断开始 (不等于 (寻找文本 (局_文本数组 [局_计次], “;”, , 假), -1))
                                                    赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (文本_取出中间文本 (局_文本数组 [局_计次], “Set-Cookie:”, “;”)), “; ”))
                                                .默认
                                                    赋值 (返回Cookies, 相加 (返回Cookies, 删首尾空 (子文本替换 (局_文本数组 [局_计次], “Set-Cookie:”, , , , 假)), “; ”))
                                                .判断结束
                                                
                                            .如果真结束
                                            .如果真 (等于 (文本比较 (取文本左边 (局_文本数组 [局_计次], 10), “Location: ”, 假), 0))
                                                赋值 (返回重定向, 取文本中间 (局_文本数组 [局_计次], 11, 相减 (取文本长度 (局_文本数组 [局_计次]), 10)))
                                            .如果真结束
                                            处理事件 ()
                                        .计次循环尾 ()
                                        赋值 (返回Cookies, 取文本左边 (返回Cookies, 相减 (取文本长度 (返回Cookies), 2)))
                                        
                                        
                                        .如果真 (是否自动合并更新Cookie)
                                            .如果真 (取反 (是否为空 (提交Cookies)))
                                                赋值 (返回Cookies, 网页_Cookie合并更新 (提交Cookies, 返回Cookies))
                                            .如果真结束
                                            
                                            
                                        .如果真结束
                                         ' -------------------提取网页编码，并转码
                                        赋值 (返回原始数据, 局_网页数据)
                                        赋值 (局_网页内容, 到文本 (返回原始数据))
                                        CoInitialize (0)
                                        .如果真 (局_正则.创建 (“<meta.+?charset=[^\w]?([-\w]+)”, 取文本左边 (局_网页内容, 1024)))
                                            赋值 (局_编码类型, 局_正则.取子匹配文本 (1, 1))
                                            .如果真 (大于 (取文本长度 (局_编码类型), 0))
                                                .如果真 (或者 (不等于 (局_编码类型, “gbk”), 不等于 (局_编码类型, “gb2312”))) ' 如果为中文就不处理
                                                    .如果真 (局_解码对象.创建 (“Adodb.Stream”, ))
                                                        局_变体型.赋值 (局_网页数据, )
                                                        局_解码对象.写属性 (“Type”, 1)
                                                        局_解码对象.写属性 (“Mode”, 3)
                                                        局_解码对象.方法 (“Open”, )
                                                        局_解码对象.方法 (“Write”, 局_变体型)
                                                        局_解码对象.写属性 (“Position”, 0)
                                                        局_解码对象.写属性 (“Type”, 2)
                                                        局_解码对象.写属性 (“Charset”, 局_编码类型)
                                                        赋值 (局_网页内容, 局_解码对象.文本方法 (“ReadText”, ))
                                                        局_解码对象.方法 (“Close”, )
                                                        局_解码对象.清除 ()
                                                        局_变体型.清除 ()
                                                    .如果真结束
                                                    
                                                .如果真结束
                                                
                                            .如果真结束
                                            处理事件 ()
                                        .如果真结束
                                        CoUninitialize ()
                                    .如果真结束
                                    处理事件 ()
                                .否则
                                    赋值 (返回状态文本, “712 服务器未响应!”)
                                .如果结束
                                处理事件 ()
                            .否则
                                赋值 (返回状态文本, “711 发送请求失败!”)
                            .如果结束
                            处理事件 ()
                        .否则
                            赋值 (返回状态文本, “710 设置协议头失败!”)
                        .如果结束
                        处理事件 ()
                    .否则
                        赋值 (返回状态文本, “705 设置超时时间失败!”)
                    .如果结束
                    处理事件 ()
                .否则
                    赋值 (返回状态文本, “704 创建WinHttp请求失败!”)
                .如果结束
                处理事件 ()
            .否则
                赋值 (返回状态文本, “703 创建WinHttp连接失败!”)
            .如果结束
            处理事件 ()
        .否则
            赋值 (返回状态文本, “702 创建WinHttp会话失败!”)
        .如果结束
        处理事件 ()
    .否则
        赋值 (返回状态文本, “701 解析URL地址失败!”)
    .如果结束
    处理事件 ()
.否则
    赋值 (返回状态文本, “700 当前系统不支持WinHttp服务!”)
.如果结束
WinHttpCloseHandle (局_请求句柄)
WinHttpCloseHandle (局_连接句柄)
WinHttpCloseHandle (局_会话句柄)
返回 (局_网页内容)

.子程序 网页_Cookie合并更新, 文本型, , 返回更新后的Cookie
.参数 旧Cookie, 文本型, 参考, 
.参数 新Cookie, 文本型, , 

.局部变量 局_旧Cookie组, 文本型, , "0", 
.局部变量 局_新Cookie组, 文本型, , "0", 
.局部变量 局_计次, 整数型, , , 

 ' 初步格式化
赋值 (旧Cookie, 删全部空 (旧Cookie))
赋值 (新Cookie, 删全部空 (新Cookie))
 ' 开始更新Cookie
赋值 (局_旧Cookie组, 分割文本 (旧Cookie, “;”, ))
赋值 (局_新Cookie组, 分割文本 (新Cookie, “;”, ))
.计次循环首 (取数组成员数 (局_旧Cookie组), 局_计次)
    .如果真 (等于 (内部_数组成员是否存在1 (局_新Cookie组, 内部_Cookie取名 (局_旧Cookie组 [局_计次])), 假))
        加入成员 (局_新Cookie组, 局_旧Cookie组 [局_计次])
    .如果真结束
    
.计次循环尾 ()
 ' 去除无效的Cookie
赋值 (旧Cookie, “”)
.计次循环首 (取数组成员数 (局_新Cookie组), 局_计次)
    .如果真 (不等于 (取文本右边 (局_新Cookie组 [局_计次], 8), “=deleted”))
        赋值 (旧Cookie, 相加 (旧Cookie, 局_新Cookie组 [局_计次], “; ”))
    .如果真结束
    
.计次循环尾 ()
赋值 (旧Cookie, 取文本左边 (旧Cookie, 相减 (取文本长度 (旧Cookie), 2)))
 ' 对重复的Cookie进行合并
赋值 (旧Cookie, 文本_去重复文本 (旧Cookie, “; ”))
返回 (旧Cookie)

.子程序 网页_取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 网页_取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
.如果 (大于 (符号位置, 0))
    赋值 (页面地址, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1)))
.否则
    赋值 (页面地址, “/”)
.如果结束
返回 (页面地址)

.子程序 网页_取域名, 文本型, , 通过“/”或者“.”来获取网址中的域名，默认使用“/”方式
.参数 网址, 文本型, , 
.参数 去除二级域名, 逻辑型, 可空, 
.参数 不过滤端口, 逻辑型, 可空, 
.参数 后缀点数量, 整数型, 可空, 不留空表示通过“.”的方式取域名 。如：.com后缀点数量为1 ,.com.cn后缀点数量为2

.局部变量 域名, 文本型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 二级, 文本型, , "0", 
.局部变量 域名长度, 整数型, , , 
.局部变量 前点开始, 整数型, , , 如www.bbs.125.la   www后面.的位置
.局部变量 前点结束, 整数型, , , 如www.bbs.125.la   bbs后面.的位置
.局部变量 后点开始, 整数型, , , 如www.bbs.125.la   125后面.的位置

赋值 (域名, 到小写 (网址))
.判断开始 (是否为空 (后缀点数量)) ' 使用“/”方式获取域名，网页_访问() 内部 必须使用这个
    .如果真 (不等于 (取文本右边 (域名, 1), “/”))
        赋值 (域名, 相加 (域名, “/”))
    .如果真结束
    
    .判断开始 (等于 (取文本左边 (域名, 8), “https://”))
        赋值 (域名, 文本_取出中间文本 (域名, “https://”, “/”))
    .默认
        .如果真 (等于 (寻找文本 (域名, “http://”, , 假), -1))
            赋值 (域名, 相加 (“http://”, 域名))
        .如果真结束
        赋值 (域名, 文本_取出中间文本 (域名, “http://”, “/”))
    .判断结束
    
    .如果真 (去除二级域名)
        赋值 (二级, 分割文本 (域名, “.”, ))
        赋值 (位置, 取数组成员数 (二级))
        .如果真 (大于 (位置, 1))
            赋值 (域名, 相加 (二级 [相减 (位置, 1)], “.”, 二级 [位置]))
        .如果真结束
        
    .如果真结束
    
.默认
     ' 通过“.”的方式取域名，支持任何后缀域名
    赋值 (域名, 子文本替换 (域名, “http://”, “”, , , 真))
    赋值 (域名, 子文本替换 (域名, “https://”, “”, , , 真))
    赋值 (位置, 寻找文本 (域名, “/”, , 假)) ' 一撇位置
    .如果真 (不等于 (位置, -1))
        赋值 (域名, 取文本左边 (域名, 相减 (位置, 1)))
    .如果真结束
    连续赋值 (取文本长度 (域名), 域名长度, 后点开始)
    .计次循环首 (后缀点数量, )
        赋值 (后点开始, 倒找文本 (域名, “.”, 后点开始, 假))
    .计次循环尾 ()
    赋值 (前点结束, 倒找文本 (域名, “.”, 后点开始, 假))
    .判断开始 (去除二级域名)
        赋值 (域名, 取文本右边 (域名, 相减 (域名长度, 前点结束)))
    .默认
         ' 保留二级域名---------------------------------------
        .如果真 (不等于 (前点结束, -1)) ' 至少是二级域名
            赋值 (前点开始, 倒找文本 (域名, “.”, 前点结束, 假))
            .如果真 (不等于 (前点开始, -1)) ' 至少是三级域名
                赋值 (域名, 取文本右边 (域名, 相减 (域名长度, 前点开始)))
            .如果真结束
            
        .如果真结束
        
    .判断结束
    
.判断结束
 ' 端口过滤处理--------------------------------------------------------
.判断开始 (不过滤端口)
    返回 (域名)
.默认
    赋值 (位置, 寻找文本 (域名, “:”, , 假)) ' 冒号位置
    .判断开始 (不等于 (位置, -1))
        返回 (取文本左边 (域名, 相减 (位置, 1)))
    .默认
        返回 (域名)
    .判断结束
    
.判断结束


.子程序 网页_取端口, 整数型, , 取出网站服务器的默认端口
.参数 网址, 文本型, , 

.局部变量 端口, 文本型, , , 
.局部变量 位置, 整数型, , , 

赋值 (端口, 网页_取域名 (网址, , 真))
赋值 (位置, 倒找文本 (端口, “:”, , 假))
.判断开始 (不等于 (位置, -1))
    返回 (到整数 (取文本右边 (端口, 相减 (取文本长度 (端口), 位置))))
.判断 (等于 (取文本左边 (到小写 (网址), 5), “https”))
    返回 (443)
.默认
    返回 (80)
.判断结束


.子程序 网页_取外网IP, 文本型, , 取本机的外网IP
.参数 所在省市, 文本型, 可空, 可空。请提供一个文本变量，用于存放您所在的省市

.局部变量 网页源码, 文本型, , , 

赋值 (网页源码, 到文本 (网页_访问 (“http://www.ip138.com”)))
赋值 (网页源码, 到文本 (网页_访问 (文本_取出中间文本 (网页源码, “<iframe src=#引号”, “#引号 rel=#引号nofollow”))))
赋值 (所在省市, 文本_取出中间文本 (网页源码, “来自：”, “</center>”))
返回 (文本_取出中间文本 (网页源码, “您的IP是：[”, “]”))

.子程序 内部_协议头取名, 文本型, , 
.参数 协议头, 文本型, , 

.局部变量 位置, 整数型, , , 
.局部变量 结果, 文本型, , , 

赋值 (位置, 寻找文本 (协议头, “:”, , 假))
.如果真 (不等于 (位置, -1))
    赋值 (结果, 取文本左边 (协议头, 相减 (位置, 1)))
.如果真结束
返回 (删首尾空 (结果))

.子程序 内部_协议头取值, 文本型, , 
.参数 协议头, 文本型, , 

.局部变量 位置, 整数型, , , 
.局部变量 结果, 文本型, , , 

赋值 (位置, 寻找文本 (协议头, “:”, , 假))
.如果真 (不等于 (位置, -1))
    赋值 (结果, 取文本右边 (协议头, 相减 (取文本长度 (协议头), 位置)))
.如果真结束
返回 (删首尾空 (结果))

.子程序 内部_数组成员是否存在1, 逻辑型, , Cookie处理专用
.参数 数组, 文本型, 数组, 
.参数 要判断值, 文本型, , 

.局部变量 局_计次, 整数型, , , 

.计次循环首 (取数组成员数 (数组), 局_计次)
    .如果真 (等于 (内部_Cookie取名 (数组 [局_计次]), 要判断值))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 内部_Cookie取名, 文本型, , 
.参数 Cookie, 文本型, , 

.局部变量 位置, 整数型, , , 
.局部变量 结果, 文本型, , , 

赋值 (位置, 寻找文本 (Cookie, “=”, , 假))
.判断开始 (不等于 (位置, -1))
    赋值 (结果, 取文本左边 (Cookie, 相减 (位置, 1)))
.默认
    赋值 (结果, Cookie)
.判断结束
返回 (删首尾空 (结果))

.类模块 正则表达式类, , , 

.程序集变量 正则, 对象, , , 
.程序集变量 集_过度对象, 对象, , , 
.程序集变量 集_被搜索的文本, 变体型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
线程_初始化COM库 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
正则.清除 ()
集_过度对象.清除 ()
集_被搜索的文本.清除 ()
线程_取消COM库 ()

.子程序 创建, 逻辑型, , 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
.参数 正则表达式文本, 文本型, , 比如“易语言4\.0(模块|支持库)?”
.参数 被搜索的文本, 文本型, , 
.参数 是否区分大小写, 逻辑型, 可空, 可以留空,默认为假,不区分大小写; 真为区分大小写;本参数指定这个正则表达式在创建成功后进行匹配、搜索、替换时，是否区分大小写;
.参数 是否匹配多行, 逻辑型, 可空, 可以留空,默认为真,允许匹配多行; 如果本成员值为真，字符“^”不仅匹配目标文本的开头，而且匹配目标文本中换行符（字符(10)，字符(13)或 #换行符）的后面；字符“$”不仅匹配目标文本的结尾，而且匹配目标文本中换行符的前面。否则字符“^”仅仅匹配目标文本的开头，“$”也仅仅匹配目标文本的结尾。
.参数 是否全局匹配, 逻辑型, 可空, 可以留空，默认为真，全局匹配
.参数 自动替换引号, 逻辑型, 可空, 可空。默认为不替换。说明：正则表达式文本为【formhash" value="7b4aa6c5】，这里面的引号处理起来很麻烦，直接把此参数设置为真，把"换成 #引号 再传进来就可以了，如：【formhash#引号 value=#引号7b4aa6c5】

.局部变量 局_正则文本, 文本型, , , 


赋值 (是否区分大小写, 取反 (选择 (是否为空 (是否区分大小写), 假, 是否区分大小写)))
赋值 (是否匹配多行, 选择 (是否为空 (是否匹配多行), 真, 是否匹配多行))
赋值 (是否全局匹配, 选择 (是否为空 (是否全局匹配), 真, 是否全局匹配))
正则.清除 ()
集_过度对象.清除 ()
正则.创建 (“VBScript.RegExp”, )
正则.写属性 (“IgnoreCase”, 是否区分大小写) ' 匹配时不区分大小写
正则.写属性 (“Multiline”, 是否匹配多行) ' 是否匹配多行
正则.写属性 (“Singleline”, 真) ' Singleline(单行模式)
正则.写属性 (“Global”, 是否全局匹配) ' 是否全局匹配
.判断开始 (自动替换引号)
    赋值 (局_正则文本, 子文本替换 (正则表达式文本, “#引号”, #引号, , , 真))
.默认
    赋值 (局_正则文本, 正则表达式文本)
.判断结束
正则.写属性 (“Pattern”, 局_正则文本)
 ' -----------------
集_被搜索的文本.赋值 (被搜索的文本, )
赋值 (集_过度对象, 正则.对象型方法 (“Execute”, 集_被搜索的文本))
 ' .如果真 (大于 (取文本长度 (被搜索的文本), 510000))
     ' 输出调试文本 (“友情提醒：正则类 → 创建() 命令的参数二 → 被搜索的文本 的长度过长，可以会导致程序直接结束。”)
.如果真结束
 ' 集_过度对象 ＝ 正则.对象型方法 (“Execute”, 被搜索的文本)
 ' 集_被搜索的文本 ＝ 被搜索的文本

返回 (等于 (集_过度对象.是否为空 (), 假))

.子程序 查看, 空白型, ,  
正则.查看 ()

.子程序 取正则文本, 文本型, , 返回以文本形式表示的正则表达式。如果该对象尚未创建，则返回空文本。本命令为高级对象成员命令
返回 (选择 (正则.是否为空 (), “”, 正则.读文本属性 (“Pattern”, )))

.子程序 替换, 文本型, , 替换在正则表达式查找中找到的文本
.参数 用作替换的文本, 文本型, 可空, 用作替换的文本

.局部变量 用作替换的文本_变体型, 变体型, , , 

用作替换的文本_变体型.赋值 (用作替换的文本, )
 ' 返回 (编码_Unicode到Ansi (正则.通用方法 (“Replace”, 集_被搜索的文本, 用作替换的文本_变体型).取字节集 ()))
返回 (正则.文本方法 (“Replace”, 集_被搜索的文本, 用作替换的文本_变体型))

.子程序 取匹配数量, 整数型, , 取出该正则匹配到的数量
返回 (集_过度对象.读数值属性 (“Count”, ))

.子程序 取匹配文本, 文本型, , 取出该正则匹配到的文本
.参数 匹配索引, 整数型, , 索引值从1开始
.参数 起始位置, 整数型, 参考 可空, 可以被省略，提供参数数据时只能提供变量。该命令调用成功后，本参数存放取得的子文本在整个被搜索文本中的起始位置

.局部变量 Match, 对象, , , 
.局部变量 Value, 文本型, , , 

赋值 (Match, 集_过度对象.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
 ' ----------------------
赋值 (Value, Match.读属性 (“Value”, ).取文本 ())
.如果真 (等于 (是否为空 (起始位置), 假))
    赋值 (起始位置, 相减 (寻找文本 (集_被搜索的文本.取文本 (), Value, Match.读数值属性 (“FirstIndex”, ), 选择 (等于 (正则.读属性 (“IgnoreCase”, ).取文本 (), “0”), 真, 假)), 1))
.如果真结束
返回 (Value)
 ' Value ＝ Match.读文本属性 (“Value”, )
 ' .如果真 (等于 (是否为空 (起始位置), 假))
     ' 起始位置 ＝ 寻找文本 (集_被搜索的文本, Value, Match.读数值属性 (“FirstIndex”, ), 选择 (正则.读文本属性 (“IgnoreCase”, ) ＝ “0”, 真, 假)) － 1
.如果真结束
 ' 返回 (Value)

.子程序 取子匹配文本, 文本型, , 取出该正则的子表达式匹配到的文本
.参数 匹配索引, 整数型, , 索引值从1开始
.参数 子表达式索引, 整数型, , 欲取其值的子表达式,该参数对应与正则表达式中的一个子表达式以圆括号"( )"为标记,索引从1开始
.参数 起始位置, 整数型, 参考 可空, 可以被省略，提供参数数据时只能提供变量。该命令调用成功后，本参数存放取得的子文本在整个被搜索文本中的起始位置

.局部变量 Match, 对象, , , 
.局部变量 SubMatches, 对象, , , 
.局部变量 value, 文本型, , , 

赋值 (Match, 集_过度对象.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
赋值 (SubMatches, Match.读对象型属性 (“SubMatches”, ))
赋值 (value, SubMatches.读属性 (“Item”, 相减 (子表达式索引, 1)).取文本 ())
.如果真 (等于 (是否为空 (起始位置), 假))
    赋值 (起始位置, 相减 (寻找文本 (集_被搜索的文本.取文本 (), value, Match.读数值属性 (“FirstIndex”, ), 选择 (等于 (正则.读属性 (“IgnoreCase”, ).取文本 (), “0”), 真, 假)), 1))
     ' 起始位置 ＝ 寻找文本 (集_被搜索的文本, value, Match.读数值属性 (“FirstIndex”, ), 选择 (正则.读文本属性 (“IgnoreCase”, ) ＝ “0”, 真, 假)) － 1
.如果真结束
返回 (value)

.子程序 取子匹配数量, 整数型, , 取出该正则的子表达式匹配到的数量
返回 (集_过度对象.读对象型属性 (“Item”, 0).读对象型属性 (“SubMatches”, ).读数值属性 (“Count”, ))

.程序集 集_进程线程, , , 

.子程序 线程_初始化COM库, 空白型, , 有时执行线程的时候，会自动关闭，此时，可以在多线程的程序里创建COM对象前先初始化，一个线程只能调用一次
CoInitialize (0)

.子程序 线程_取消COM库, 空白型, , 取消COM库的初始化，如果你在线程头部加入了 线程_初始化COM库 请在尾部加入此命令
CoUninitialize ()

.子程序 进程_名取句柄, 整数型, , 通过进程名取对应的窗口句柄；成功返回窗口句柄，失败返回0，返回-1表示找到进程。
.参数 进程名, 文本型, , 要取窗口句柄的进程名；

.局部变量 pid, 空白型, , , 
.局部变量 hwnd, 空白型, , , 

赋值 (pid, 进程_名取ID (进程名))
.如果真 (不等于 (pid, 0))
    返回 (进程_ID取窗口句柄 (pid))
.如果真结束
返回 (-1)

.子程序 进程_取自进程ID, 整数型, , 取自身的进程ID，成功返回进程ID；失败返回0
返回 (GetCurrentProcessId ())

.子程序 进程_ID取进程名, 文本型, , 通过进程ID取得该进程执行文件名，也就是进程名;
.参数 参数_进程ID, 整数型, , 该进程的ID;

.局部变量 hProcessSnap, 整数型, , , 
.局部变量 bool, 空白型, , , 
.局部变量 pe32, 精易_进程信息列表, , , 
.局部变量 name, 文本型, , , 

赋值 (hProcessSnap, CreateToolhelp32Snapshot (2, 0)) ' #TH32CS_SNAPPROCESS
赋值 (pe32.dwSize, 296)
赋值 (bool, Process32Next (hProcessSnap, pe32))
.判断循环首 (等于 (bool, 1))
    .如果真 (等于 (pe32.进程ID, 参数_进程ID))
        赋值 (name, 到文本 (pe32.进程名称))
        跳出循环 ()
    .如果真结束
    赋值 (bool, Process32Next (hProcessSnap, pe32))
.判断循环尾 ()
CloseHandle (hProcessSnap)
返回 (name)

.子程序 进程_ID取窗口句柄, 整数型, , 通过进程ID取得该进程的窗口句柄,超时则返回零
.参数 进程ID, 整数型, , 该进程的ID;
.参数 窗口标题, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 窗口类名, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 超时, 空白型, 可空, 为空则无限循环

.局部变量 局_超时时间, 空白型, , , 
.局部变量 局_开始时间, 空白型, , , 
.局部变量 局_窗口句柄, 空白型, , , 
.局部变量 局_进程ID, 空白型, , , 
.局部变量 局_标题, 文本型, , , 
.局部变量 局_类名, 文本型, , , 

赋值 (局_开始时间, 取启动时间 ())
赋值 (局_超时时间, 选择 (或者 (是否为空 (超时), 等于 (超时, -1)), 31536000, 超时))
.判断循环首 (小于 (相减 (取启动时间 (), 局_开始时间), 局_超时时间))
    赋值 (局_窗口句柄, FindWindowExA_文本 (0, 局_窗口句柄, 字符 (0), 字符 (0)))
    .如果真 (等于 (IsWindow (局_窗口句柄), 1))
        .如果真 (IsWindowVisible (局_窗口句柄))
            赋值 (局_进程ID, 窗口_句柄取进程ID (局_窗口句柄))
            .如果真 (等于 (局_进程ID, 进程ID))
                赋值 (局_标题, 窗口_取标题 (局_窗口句柄))
                赋值 (局_类名, 窗口_取类名 (局_窗口句柄))
                .如果真 (不等于 (寻找文本 (局_标题, 窗口标题, , 假), -1))
                    返回 (局_窗口句柄)
                .如果真结束
                .如果真 (不等于 (寻找文本 (局_类名, 窗口类名, , 假), -1))
                    返回 (局_窗口句柄)
                .如果真结束
                .如果真 (或者 (是否为空 (窗口标题), 是否为空 (窗口类名)))
                    返回 (局_窗口句柄)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    处理事件 ()
.判断循环尾 ()
返回 (0)

.子程序 进程_名取ID, 整数型, , 通过进程名取进程ID；失败返回0 
.参数 进程名, 文本型, , 取要进程ID的进程名
.参数 是否区分大小写, 逻辑型, 可空, 默认为不区分,真=区分

.局部变量 局_进程信息, 精易_进程信息列表, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

赋值 (进程快照, CreateToolhelp32Snapshot (2, 0))
.如果真 (等于 (进程快照, 0))
    返回 (0)
.如果真结束
赋值 (局_进程信息.dwSize, 512)
赋值 (进程句柄, Process32First (进程快照, 局_进程信息))
.判断开始 (是否区分大小写)
    .判断循环首 (不等于 (进程句柄, 0))
        .如果真 (等于 (到文本 (局_进程信息.进程名称), 进程名))
            CloseHandle (进程快照)
            返回 (局_进程信息.进程ID)
        .如果真结束
        赋值 (进程句柄, Process32Next (进程快照, 局_进程信息))
    .判断循环尾 ()
.默认
    .判断循环首 (不等于 (进程句柄, 0))
        .如果真 (等于 (到小写 (到文本 (局_进程信息.进程名称)), 到小写 (进程名)))
            CloseHandle (进程快照)
            返回 (局_进程信息.进程ID)
        .如果真结束
        赋值 (进程句柄, Process32Next (进程快照, 局_进程信息))
    .判断循环尾 ()
.判断结束
CloseHandle (进程快照)
返回 (0)

.子程序 进程_创建, 整数型, , 创建一个程序进程(成功返回进程ID,失败返回0)
.参数 程序路径, 文本型, , 欲创建进程的执行路径
.参数 命令行, 文本型, 可空, 附加上程序路径后的命令行参数
.参数 运行目录, 文本型, 可空, 通常留空,特殊情况下使用
.参数 进程结构, 精易_进程结构, 参考 可空, 接收进程结构信息的变量,如果不为空，产品的句柄用CloseHandle函数释放

.局部变量 窗口结构, StartupInfo, , , 

.如果真 (等于 (运行目录, “”))
    赋值 (运行目录, 取文本左边 (程序路径, 倒找文本 (程序路径, “\”, , 假)))
.如果真结束
CreateProcessA (程序路径, 命令行, 0, 0, 0, 0, 0, 运行目录, 窗口结构, 进程结构)
.如果真 (是否为空 (进程结构))
    CloseHandle (进程结构.进程句柄)
    CloseHandle (进程结构.线程句柄)
.如果真结束
返回 (进程结构.进程标识符)

.子程序 进程_结束, 逻辑型, , 结束指定进程。成功返回真，失败返回假。本命令为初级命令
.参数 进程ID, 整数型, 可空, 欲结束的进程ID,如果为空将结束自己

.如果真 (是否为空 (进程ID))
    赋值 (进程ID, 进程_取自进程ID ())
.如果真结束
返回 (等于 (TerminateProcess (OpenProcess (1, 0, 进程ID), 0), 1))

.程序集 集_编码进制转换, , , 

.子程序 编码_BASE64编码, 文本型, , BASE64编码处理；成功返回编码后的文本；
.参数 待编码数据, 字节集, , 待编码字节集

.局部变量 余数, 空白型, , , 
.局部变量 临时, 字节型, , "3", 
.局部变量 变量, 空白型, , , 
.局部变量 集合, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 字符, 字节集, , , 
.局部变量 i, 空白型, , , 

赋值 (长度, 取字节集长度 (待编码数据))
.如果真 (小于 (长度, 1))
    返回 (“”)
.如果真结束
赋值 (余数, 求余数 (长度, 3))
.如果真 (大于 (余数, 0))
    赋值 (待编码数据, 相加 (待编码数据, 取空白字节集 (相减 (3, 余数))))
.如果真结束
赋值 (长度, 取字节集长度 (待编码数据))
赋值 (字符, 取空白字节集 (相除 (相乘 (长度, 4), 3)))
赋值 (i, 1)
赋值 (集合, 到字节集 (“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”))
.变量循环首 (1, 长度, 3, 变量)
    赋值 (临时 [1], 待编码数据 [变量])
    赋值 (临时 [2], 待编码数据 [相加 (变量, 1)])
    赋值 (临时 [3], 待编码数据 [相加 (变量, 2)])
    赋值 (字符 [i], 集合 [相加 (右移 (临时 [1], 2), 1)])
    赋值 (字符 [相加 (i, 1)], 集合 [相加 (左移 (位与 (临时 [1], 3), 4), 右移 (临时 [2], 4), 1)])
    赋值 (字符 [相加 (i, 2)], 集合 [相加 (左移 (位与 (临时 [2], 15), 2), 右移 (临时 [3], 6), 1)])
    赋值 (字符 [相加 (i, 3)], 集合 [相加 (位与 (临时 [3], 63), 1)])
    赋值 (i, 相加 (i, 4))
.变量循环尾 ()
.如果真 (大于 (余数, 0))
    赋值 (长度, 取字节集长度 (字符))
    .如果 (等于 (余数, 1))
        赋值 (字符 [相减 (长度, 1)], 到字节 (取代码 (“=”, )))
        赋值 (字符 [长度], 到字节 (取代码 (“=”, )))
    .否则
        赋值 (字符 [长度], 到字节 (取代码 (“=”, )))
    .如果结束
    
.如果真结束
返回 (到文本 (字符))

.子程序 编码_Ansi到Unicode, 字节集, , 将Ansi码转换为Unicode码；成功返回转换后的字节集；
.参数 Ansi, 文本型, , 欲转换的Ansi文本
.参数 非标准Unicode编码, 逻辑型, 可空, 默认为假，为标准Unicode编码

.局部变量 数据2, 字节集, , , 
.局部变量 长度, 整数型, , , 

.如果真 (等于 (Ansi, “”))
    返回 ({  })
.如果真结束
赋值 (长度, MultiByteToWideChar (936, 0, Ansi, -1, {  }, 0))
赋值 (数据2, 取空白字节集 (相乘 (长度, 2)))
MultiByteToWideChar (936, 0, Ansi, -1, 数据2, 相乘 (长度, 2))
.如果真 (非标准Unicode编码)
    赋值 (数据2, 取字节集左边 (数据2, 相减 (取字节集长度 (数据2), 2)))
.如果真结束
返回 (数据2)

.子程序 编码_Unicode到Ansi, 文本型, , 将Unicode码转换为Ansi码；成功返回转换后的文本；
.参数 Unicode, 字节集, , 欲转换的Unicode字节集

.局部变量 局_计数, 整数型, , , 
.局部变量 局_结果数据, 字节集, , , 
.局部变量 局_结果文本, 文本型, , , 

赋值 (局_计数, 相除 (取字节集长度 (Unicode), 2)) ' 字符数目两个
赋值 (局_计数, _宽字符到双字节1 (936, 512, Unicode, 局_计数, 0, 0, 0, 假)) ' 取转换后的数目
赋值 (局_结果数据, 取空白字节集 (局_计数))
_宽字符到双字节 (936, 512, Unicode, -1, 局_结果数据, 局_计数, 0, 假)
赋值 (局_结果文本, 取字节集数据 (局_结果数据, #文本型, ))
返回 (局_结果文本)

.子程序 编码_Unicode到Utf8, 字节集, , 
.参数 Unicode字节集, 字节集, , 

.局部变量 utf8_len, 整数型, , , 
.局部变量 unicode_len, 空白型, , , word
.局部变量 uft8, 字节集, , , 

赋值 (unicode_len, 相除 (取字节集长度 (Unicode字节集), 2))
赋值 (utf8_len, WideCharToMultiByte (65001, 0, Unicode字节集, unicode_len, uft8, 0, 0, 假))
赋值 (uft8, 取空白字节集 (utf8_len))
WideCharToMultiByte (65001, 0, Unicode字节集, -1, uft8, utf8_len, 0, 假)
返回 (uft8)

.子程序 编码_Ansi到Utf8, 字节集, , 如果在保存到的文件中发现结尾有NUL字符，可以使用编码_Ansi到Utf8_对象或编码_Ansi到Utf8_无BOM文件命令替代
.参数 ansi文本, 文本型, , 

.局部变量 局_临时, 字节集, , , 

赋值 (局_临时, 编码_Ansi到Unicode (ansi文本))
返回 (编码_Unicode到Utf8 (局_临时))

.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 

.局部变量 ll, 空白型, , , 
.局部变量 Length, 空白型, , , 
.局部变量 Unicode, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 ansi_len, 整数型, , , 
.局部变量 ansi, 字节集, , , 

.如果真 (等于 (utf8字节集, {  }))
    返回 (“”)
.如果真结束
赋值 (ll, 取字节集长度 (utf8字节集))
赋值 (Length, MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, {  }, 0))
赋值 (Unicode, 取空白字节集 (相乘 (Length, 2)))
MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, Unicode, 相乘 (Length, 2))

赋值 (unicode_len, 相除 (取字节集长度 (Unicode), 2))
赋值 (ansi_len, WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, 0, 0, 假))
赋值 (ansi, 取空白字节集 (ansi_len))
WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, ansi_len, 0, 假)
返回 (取字节集数据 (ansi, #文本型, ))

.子程序 编码_URL解码, 文本型, , 
.参数 URL, 文本型, , 
.参数 是否UTF8, 逻辑型, 可空, 先将文本串解码为文本,再从UTF8转成GBK编码

.局部变量 循环容器, 整数型, , , 
.局部变量 Len, 整数型, , , 
.局部变量 HEX, 文本型, , , 
.局部变量 目标, 文本型, , , 
.局部变量 H, 整数型, , , 
.局部变量 L, 整数型, , , 

赋值 (Len, 取文本长度 (URL))
赋值 (循环容器, 1)
赋值 (HEX, “0123456789ABCDEF”)
.判断循环首 (小于或等于 (循环容器, Len))
    .判断开始 (不等于 (取文本中间 (URL, 循环容器, 1), “%”))
        赋值 (目标, 相加 (目标, 取文本中间 (URL, 循环容器, 1)))
    .默认
        赋值 (循环容器, 相加 (循环容器, 1))
        赋值 (H, 相减 (寻找文本 (HEX, 到大写 (取文本中间 (URL, 循环容器, 1)), , 假), 1))
        赋值 (循环容器, 相加 (循环容器, 1))
        赋值 (L, 相减 (寻找文本 (HEX, 到大写 (取文本中间 (URL, 循环容器, 1)), , 假), 1))
        赋值 (目标, 相加 (目标, 字符 (相加 (相乘 (H, 16), L))))
    .判断结束
    赋值 (循环容器, 相加 (循环容器, 1))
.判断循环尾 ()
.如果真 (是否UTF8)
    赋值 (目标, 编码_utf8到gb2312 (目标))
.如果真结束
返回 (目标)

.子程序 编码_URL编码, 文本型, , 
.参数 欲编码的文本, 文本型, , 
.参数 不编码字母数字, 逻辑型, 可空, 不需要编码【字母数字.-】可以把此参数设置为真
.参数 是否UTF8, 逻辑型, 可空, 先把文本转换成UTF8编码,再编码成URL

.局部变量 结果文本, 文本型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 计次, 整数型, , , 
.局部变量 temp, 文本型, , , 

.如果真 (等于 (欲编码的文本, “”))
    返回 (“”)
.如果真结束

.判断开始 (是否UTF8)
    赋值 (字节集, 到字节集 (编码_gb2312到utf8 (欲编码的文本)))
.默认
    赋值 (字节集, 到字节集 (欲编码的文本))
.判断结束

.变量循环首 (1, 取字节集长度 (字节集), 1, 计次)
    赋值 (temp, 取十六进制文本 (字节集 [计次]))
    .如果真 (小于 (取文本长度 (temp), 2))
        赋值 (temp, 相加 (“0”, temp))
    .如果真结束
    
    .如果 (不编码字母数字)
        .判断开始 (并且 (大于 (字节集 [计次], 44), 小于 (字节集 [计次], 58), 不等于 (字节集 [计次], 47)))
             ' -.0-9
            赋值 (结果文本, 相加 (结果文本, 字符 (字节集 [计次])))
            
        .判断 (并且 (大于 (字节集 [计次], 64), 小于 (字节集 [计次], 91))) ' A-Z
            赋值 (结果文本, 相加 (结果文本, 字符 (字节集 [计次])))
            
        .判断 (并且 (大于 (字节集 [计次], 96), 小于 (字节集 [计次], 123))) ' a-z
            赋值 (结果文本, 相加 (结果文本, 字符 (字节集 [计次])))
            
        .默认
            赋值 (结果文本, 相加 (结果文本, “%”, temp))
        .判断结束
        
    .否则
        赋值 (结果文本, 相加 (结果文本, “%”, temp))
    .如果结束
    
.变量循环尾 ()
返回 (结果文本)

.子程序 编码_utf8到gb2312, 文本型, , 
.参数 欲转换的源码, 文本型, , 

返回 (Unicode到Ansi (Ansi到Unicode (欲转换的源码), 936)) ' 从utf8到gb2312

.子程序 编码_gb2312到utf8, 文本型, , 
.参数 欲转换的源码, 文本型, , 

返回 (Unicode到Ansi (Ansi到Unicode (欲转换的源码, 936), 65001)) ' 从utf8到gb2312

.子程序 Unicode到Ansi, 文本型, , 
.参数 Unicode, 字节集, , 
.参数 目标编码, 整数型, 可空, 

.局部变量 Ansi, 文本型, , , 
.局部变量 长度, 整数型, , , 

.如果真 (是否为空 (目标编码))
    赋值 (目标编码, 0)
.如果真结束
赋值 (长度, _Unicode转Ansi (0, 0, Unicode, -1, “”, 0, 0, 0))
赋值 (Ansi, 取空白文本 (相乘 (长度, 2)))
_Unicode转Ansi (目标编码, 0, Unicode, -1, Ansi, 相乘 (长度, 2), 0, 0)
返回 (Ansi)

.子程序 Ansi到Unicode, 字节集, , 
.参数 Ansi, 文本型, , 
.参数 原始编码, 整数型, 可空, 

.局部变量 Unicode, 字节集, , , 
.局部变量 长度, 整数型, , , 

.如果真 (是否为空 (原始编码))
    赋值 (原始编码, 65001)
.如果真结束
赋值 (长度, MultiByteToWideChar (0, 0, Ansi, -1, {  }, 0))
赋值 (Unicode, 取空白字节集 (相乘 (长度, 2)))
MultiByteToWideChar (原始编码, 0, Ansi, -1, Unicode, 长度)
返回 (Unicode)

.子程序 进制_十到十六, 文本型, , 十进制到十六进制（支持负数）,源码作者：QQ418995189
.参数 十进制长整数, 长整数型, , 不支持无符号长整数型，易BUG，超过15位长整数型，不能直接使用，必须 用 到长整数()转换
.参数 是否在前端补零, 逻辑型, 可空, 如果为真，则自动在前面补0，补足位数。如果为假，则不补零；默认为假

.局部变量 局部_低32位, 整数型, , , ebp-0x8
.局部变量 局部_高32位, 整数型, , , ebp-0xc
.局部变量 局部_结果, 文本型, , , ebp-0x4
.局部变量 零的个数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 是否为长整数, 逻辑型, , , 

置入代码 ({ 139, 69, 8, 137, 69, 248, 139, 69, 12, 137, 69, 244 })
 ' mov eax,[ebp+0x08]
 ' mov [ebp-0x08],eax
 ' mov eax,[ebp+0x0c]
 ' mov [ebp-0x0c],eax
赋值 (局部_结果, _十进制 (局部_低32位))
.如果真 (不等于 (局部_高32位, 0))
    赋值 (局部_结果, 相加 (_十进制 (局部_高32位), 局部_结果))
    赋值 (是否为长整数, 真)
.如果真结束

.如果 (等于 (是否在前端补零, 假))
    .计次循环首 (取文本长度 (局部_结果), i)
        .如果 (等于 (取文本中间 (局部_结果, i, 1), “0”))
            赋值 (零的个数, 相加 (零的个数, 1))
        .否则
            跳出循环 ()
        .如果结束
        
    .计次循环尾 ()
    赋值 (局部_结果, 取文本右边 (局部_结果, 相减 (取文本长度 (局部_结果), 零的个数)))
     ' 去掉前面所有的0
    
.否则
    
    .如果真 (等于 (是否为长整数, 真))
        赋值 (局部_结果, 相加 (取重复文本 (相减 (16, 取文本长度 (局部_结果)), “0”), 局部_结果))
    .如果真结束
    
.如果结束

返回 (局部_结果)

.子程序 进制_十六到十, 长整数型, , 十六进制到十进制（已优化算法）,源码作者：QQ418995189
.参数 十六进制文本, 文本型, , 字母不区分大小写

.局部变量 局部_十六进制, 字节集, , , ebp-0x4
.局部变量 局部_循环变量, 整数型, , , ebp-0x8
.局部变量 局部_十六进制数, 整数型, , , ebp-0xc
.局部变量 局部_高32位, 整数型, , , ebp-0x10
.局部变量 局部_高次方数, 整数型, , , ebp-0x14
.局部变量 局部_低32位, 整数型, , , ebp-0x18
.局部变量 局部_低次方数, 整数型, , , ebp-0x1c
.局部变量 局部_结果, 长整数型, , , ebp-0x20 ebp-0x24

赋值 (局部_十六进制, 相加 (取重复字节集 (16, { 48 }), 到字节集 (十六进制文本)))
赋值 (局部_十六进制, 取字节集右边 (局部_十六进制, 16))
.变量循环首 (取字节集长度 (局部_十六进制), 1, -1, 局部_循环变量)
    .判断开始 (大于或等于 (局部_十六进制 [局部_循环变量], 97)) ' 十六进制 [计次] ≤ 102
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 87)) ' 小写
    .判断 (大于或等于 (局部_十六进制 [局部_循环变量], 65)) ' 十六进制 [计次] ≤ 70
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 55)) ' 大写
    .默认
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 48)) ' 数字
    .判断结束
    .如果 (小于或等于 (局部_循环变量, 8))
        赋值 (局部_高32位, 相加 (局部_高32位, 相乘 (局部_十六进制数, 求次方 (16, 局部_高次方数))))
        赋值 (局部_高次方数, 相加 (局部_高次方数, 1))
    .否则
        赋值 (局部_低32位, 相加 (局部_低32位, 相乘 (局部_十六进制数, 求次方 (16, 局部_低次方数))))
        赋值 (局部_低次方数, 相加 (局部_低次方数, 1))
    .如果结束
    
.变量循环尾 ()
置入代码 ({ 139, 69, 232, 137, 69, 220, 139, 69, 240, 137, 69, 224 })
 ' label 低次方数 at ebp-0x1c
 ' label 高32位 at ebp-0x10
 ' label 低32位 at ebp-0x18
 ' label 结果高32位 at ebp-0x20
 ' label 结果低32位 at ebp-0x24

 ' mov eax,[低32位]
 ' mov [结果低32位],eax
 ' mov eax,[高32位]
 ' mov [结果高32位],eax
返回 (局部_结果)


.子程序 _十进制, 文本型, , 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 取空白文本 (8))
置入代码 ({ 139, 69, 8, 87, 139, 125, 252, 49, 201, 177, 8, 80, 36, 15, 60, 9, 119, 4, 4, 48, 235, 2, 4, 55, 136, 68, 15, 255, 88, 193, 232, 4, 226, 233, 95 })
返回 (ret)

.程序集 集_窗口, , , 

.子程序 窗口_句柄取进程ID, 整数型, , 返回进程ID；
.参数 窗口句柄, 整数型, , 

.局部变量 进程ID, 整数型, 静态, , 用于装载进程ID的变量

GetWindowThreadProcessId (窗口句柄, 进程ID)
返回 (进程ID)

.子程序 窗口_取标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 局_缓冲区, 文本型, , , 
.局部变量 局_缓冲大小, 空白型, , , 

赋值 (局_缓冲大小, 相加 (GetWindowTextLength (窗口句柄), 1))
赋值 (局_缓冲区, 取空白文本 (局_缓冲大小))
GetWindowTextA (窗口句柄, 局_缓冲区, 局_缓冲大小)
返回 (局_缓冲区)

.子程序 窗口_置标题, 逻辑型, , 改指定窗口句柄的窗口标题(非"0"表示成功,返回"0"表示失败)
.参数 窗口句柄, 整数型, , 欲更改窗口标题的句柄
.参数 新标题, 文本型, , 欲改成的新标题

返回 (SetWindowTextA (窗口句柄, 新标题))

.子程序 窗口_取类名, 文本型, , 取指定窗口句柄的窗口类名(返回窗口类名,失败返回空文本)
.参数 窗口句柄, 整数型, , 欲取类名的窗口句柄

.局部变量 类名, 文本型, , , 

赋值 (类名, 取空白文本 (50))
GetClassNameA (窗口句柄, 类名, 50)
返回 (类名)

.类模块 类_json, , , 

.程序集变量 dataName, 文本型, , , 
.程序集变量 对象, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (dataName, “da”)
初始化 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
对象.清除 ()
CoUninitialize ()

.子程序 初始化, 空白型, , 
CoInitialize (0)
对象.创建 (“MSScriptControl.ScriptControl”, ) ' 创建
对象.写属性 (“Language”, “JavaScript”)
 ' 对象.数值方法 (“AddCode”, #JSON操作)
对象.数值方法 (“AddCode”, #js2)
对象.数值方法 (“Eval”, 相加 (“var ”, dataName, “={}”))

.子程序 解析, 逻辑型, , 
.参数 数据文本, 文本型, , json的文本数据

.如果真 (等于 (对象.是否为空 (), 假))
    对象.清除 ()
    初始化 ()
.如果真结束
.如果真 (对象.是否为空 ())
    返回 (假)
.如果真结束
对象.数值方法 (“Eval”, 相加 (“var ”, dataName, “=null”))
对象.数值方法 (“AddCode”, 相加 (“var ”, dataName, “=eval(”, 数据文本, “)”))
返回 (对象.逻辑方法 (“Eval”, 相加 (“null !=”, dataName)))

.子程序 取数据文本, 文本型, , 
 ' 返回 (对象.文本方法 (“Eval”, dataName ＋ “.toJSONString()”))
返回 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, dataName, “)”)))

.子程序 置属性, 空白型, , 
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 属性解析为json对象,数组

.如果真 (为对象)
    赋值 (值, 选择 (等于 (值, “”), “{}”, 值))
    对象.方法 (“Eval”, 相加 (dataName, “.”, 名字, “= eval(”, 值, “)”))
    返回 ()
.如果真结束
对象.方法 (“Eval”, 相加 (dataName, “.”, 名字, “='”, 值, “'”))

.子程序 置属性对象, 空白型, , 属性解析为json对象,数组
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型, , 

对象.方法 (“Eval”, 相加 (dataName, “.”, 名字, “= eval(”, 值, “)”))

.子程序 置属性数值, 空白型, , 
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 双精度小数型, , 

对象.方法 (“Eval”, 相加 (dataName, “.”, 名字, “=”, 到文本 (值), “”))

.子程序 取属性数值, 双精度小数型, , 
.参数 名字, 文本型, , 支持a.b.c[0]

返回 (对象.数值方法 (“Eval”, 相加 (dataName, “.”, 名字)))

.子程序 取属性对象, 文本型, , 返回对象文本
.参数 名字, 文本型, , 支持a.b.c[0]

 ' 返回 (对象.文本方法 (“Eval”, dataName ＋ “.” ＋ 名字 ＋ “.toJSONString()”))
 ' “JSON.stringify(” ＋ dataName ＋ “)”
返回 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, dataName, “.”, 名字, “)”)))

.子程序 取通用属性, 文本型, , 对于数字键名或者非正常变量字符（比如有空格），必须使用 aa[x]的方式。
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b,键名为数值时a.b模式无效，必须使用a[20]模式。
.参数 为对象, 逻辑型, 可空, 为真解析属性为 数值,json{},不然有转义"\"

.局部变量 a, 文本型, , , 

.如果真 (不等于 (取文本左边 (名字, 1), “[”))
    赋值 (a, “.”)
.如果真结束
.如果真 (为对象)
    返回 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, dataName, a, 名字, “)”)))
.如果真结束
.如果真 (等于 (对象.是否为空 (), 假))
    .如果真 (等于 (取类型 (名字), 2))
        返回 (到文本 (取属性数值 (名字)))
    .如果真结束
    返回 (对象.文本方法 (“Eval”, 相加 (dataName, a, 名字)))
.如果真结束
返回 (“”)

.子程序 取属性, 类_json, , 
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b

.局部变量 临时, 类_json, , , 
.局部变量 a, 文本型, , , 

.如果真 (不等于 (取文本左边 (名字, 1), “[”))
    赋值 (a, “.”)
.如果真结束
临时.解析 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, dataName, a, 名字, “)”)))
返回 (临时)

.子程序 成员数, 整数型, , 
.参数 名字, 文本型, 可空, 支持a.b.c,根目录为空

.局部变量 name, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (name, 相加 (dataName, 选择 (等于 (取文本左边 (名字, 1), “[”), “”, “.”), 名字))
.否则
    赋值 (name, dataName)
.如果结束
返回 (对象.数值方法 (“Eval”, 相加 (“get__count(”, name, “)”)))

.子程序 加成员, 空白型, , 
.参数 成员值, 文本型, , 对象
.参数 名字, 文本型, 可空, 支持a.b.c
.参数 为对象, 逻辑型, 可空, 数值,json节点

.局部变量 a, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (名字, 相加 (dataName, “.”, 名字))
.否则
    赋值 (名字, dataName)
.如果结束
.如果真 (等于 (为对象, 假))
    赋值 (a, “'”)
.如果真结束
对象.方法 (“Eval”, 相加 (“if (Object.prototype.toString.call(”, 名字, “) != '[object Array]') { ”, 名字, “=new Array();} ”, 名字, “.push(”, a, 成员值, a, “)”))

.子程序 取成员, 类_json, , 
.参数 索引, 整数型, , 
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点

.局部变量 临时, 类_json, , , 
.局部变量 _名字, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (_名字, 相加 (dataName, “.”, 名字))
.否则
    赋值 (_名字, dataName)
.如果结束
临时.解析 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, _名字, “[”, 到文本 (索引), “])”)))

返回 (临时)

.子程序 取成员文本, 文本型, , 
.参数 索引, 整数型, , 支持a.b.c
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点
.参数 为对象, 逻辑型, 可空, 对象为真,否则返回obj,数值,json节点

.局部变量 _名字, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (_名字, 相加 (dataName, “.”, 名字))
.否则
    赋值 (_名字, dataName)
.如果结束
.如果真 (为对象)
    返回 (对象.文本方法 (“Eval”, 相加 (“JSON.stringify(”, _名字, “[”, 到文本 (索引), “])”)))
    
.如果真结束
返回 (对象.文本方法 (“Eval”, 相加 (_名字, “[”, 到文本 (索引), “]”)))

.子程序 置成员, 空白型, , 
.参数 索引, 整数型, , 支持a.b.c
.参数 成员值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 数值,json节点

.局部变量 a, 文本型, , , 

.如果真 (等于 (为对象, 假))
    赋值 (a, “'”)
.如果真结束
对象.方法 (“Eval”, 相加 (dataName, “[”, 到文本 (索引), “]=”, a, 成员值, a))

.子程序 删成员, 空白型, , 
.参数 索引, 整数型, , 支持a.b.c

对象.方法 (“Eval”, 相加 (dataName, “.splice(”, 到文本 (索引), “,1)”))

.子程序 删属性, 空白型, , 
.参数 名字, 文本型, , 

对象.文本方法 (“Eval”, 相加 (“delete ”, dataName, “.”, 名字))

.子程序 置类型, 空白型, , 
.参数 值, 整数型, , 0空,4对象,5数组

.如果真 (等于 (值, 0))
    对象.数值方法 (“Eval”, 相加 (“var ”, dataName, “={}”))
    返回 ()
.如果真结束
.如果真 (等于 (值, 4))
    对象.数值方法 (“Eval”, 相加 (“var ”, dataName, “={}”))
    返回 ()
.如果真结束
.如果真 (等于 (值, 5))
    对象.数值方法 (“Eval”, 相加 (“var ”, dataName, “=new Array()”))
    返回 ()
.如果真结束


.子程序 赋值, 空白型, , 
.参数 值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 数值,json节点

.局部变量 a, 文本型, , , 

.如果真 (等于 (为对象, 假))
    赋值 (a, “'”)
.如果真结束
对象.逻辑方法 (“Eval”, 相加 (dataName, “=”, a, 值, a))

.子程序 属性是否存在, 逻辑型, , 
.参数 名字, 文本型, , 支持a.b.c

返回 (对象.逻辑方法 (“Eval”, 相加 (dataName, “.”, 名字, “ !=null”)))

.子程序 取所有属性名, 整数型, , 注意：对于数字键名或者非正常变量字符（比如有空格），必须使用 aa[x]的方式。
.参数 属性名数组, 文本型, 参考 数组, 
.参数 名字, 文本型, 可空, a.b,空为根节点,键名为数值时a.b模式无效，必须使用a[20]模式。

.局部变量 obj, 文本型, , , 
.局部变量 _名字, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (_名字, 相加 (dataName, “.”, 名字))
.否则
    赋值 (_名字, dataName)
.如果结束
赋值 (obj, 对象.文本方法 (“Eval”, 相加 (“var ary=''; for (var key in ”, _名字, “) {ary=ary+ key+','; }”)))
赋值 (obj, 子文本替换 (obj, “toJSONString,”, “”, , , 真))
赋值 (obj, 子文本替换 (obj, “parseJSON,”, “”, , , 真))
对象.通用方法 (“Eval”, “ary=null”)
赋值 (属性名数组, 分割文本 (obj, “,”, ))
返回 (取数组成员数 (属性名数组))
 ' var jsons = { name: "1111", age: 18 };
 ' "for (var key in jsons){alert(key);alert(jsons[key]);}"

.子程序 取类型, 整数型, , 空=0，数=2，对象=4，数组=5，文本=6
.参数 名字, 文本型, 可空, 

.局部变量 l, 文本型, , , 
.局部变量 _名字, 文本型, , , 
.局部变量 text, 文本型, , , 

.如果 (不等于 (名字, “”))
    赋值 (_名字, 相加 (dataName, “.”, 名字))
.否则
    赋值 (_名字, dataName)
.如果结束
.如果真 (对象.逻辑方法 (“Eval”, 相加 (_名字, “==null”)))
    返回 (0)
.如果真结束
赋值 (l, 对象.文本方法 (“Eval”, 相加 (“typeof (”, _名字, “)”)))
.判断开始 (等于 (l, “string”))
    返回 (6)
.判断 (等于 (l, “object”))
     ' .如果真 (对象.逻辑方法 (“Eval”, 相加 (“=”, _名字, “.map”))) ' 只有数组才有 map 这个方法
         ' 返回 (5)
    .如果真结束
    赋值 (text, 取通用属性 (名字, 真))
    返回 (选择 (等于 (取文本左边 (text, 1), “[”), 5, 4))
.判断 (等于 (l, “number”))
    返回 (2)
.默认
    返回 (-1)
.判断结束


.子程序 清除, 空白型, , 
对象.方法 (“Eval”, 相加 (dataName, “={}”))

.类模块 类_日志输出, , , 

.程序集变量 集_目录, 文本型, , , 
.程序集变量 集_日志名, 文本型, , , 
.程序集变量 集_控制台句柄, 整数型, , , 
.程序集变量 集_日志文件句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 
赋值 (集_目录, 相加 (取运行目录 (), “\Log\”, 时间_格式化 (取现行时间 (), “yyyyMM\”)))
赋值 (集_日志名, 相加 (时间_格式化 (取现行时间 (), “yyyy-MM-dd”), “.txt”))

.子程序 _销毁, 空白型, , 
.如果真 (大于 (集_控制台句柄, 0))
    FreeConsole ()
    赋值 (集_控制台句柄, 0)
.如果真结束

.如果真 (大于 (集_日志文件句柄, 0))
    关闭文件 (集_日志文件句柄)
    赋值 (集_日志文件句柄, 0)
.如果真结束


.子程序 文件路径, 文本型, , 获取与设置日志输出文件目录，请在【输出文件】日志前设置目录。
.参数 参_目录, 文本型, 可空, 默认会在程序运行目录下生成(Log+年月)格式的目录
.参数 参_文件名, 文本型, 可空, 

.如果真 (大于 (取文本长度 (参_目录), 0))
    赋值 (集_目录, 参_目录)
    赋值 (集_目录, 选择 (不等于 (取文本右边 (集_目录, 1), “\”), 相加 (集_目录, “\”), 集_目录))
.如果真结束
.如果真 (大于 (取文本长度 (参_文件名), 0))
    赋值 (集_日志名, 参_文件名)
    赋值 (集_日志名, 选择 (不等于 (到小写 (取文本右边 (集_日志名, 4)), “.txt”), 相加 (集_日志名, “.txt”), 集_日志名))
.如果真结束
返回 (相加 (集_目录, 集_日志名))

.子程序 输出文件, 逻辑型, , 输出内容到文件到
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_信息框, 逻辑型, 可空, 默认不提示

.局部变量 局_文件句柄, 整数型, , , 
.局部变量 局_提示图标, 整数型, , , 
.局部变量 局_返回值, 逻辑型, , , 

.如果真 (或者 (小于 (参_级别, 0), 大于 (参_级别, 3)))
    赋值 (参_级别, 0)
.如果真结束
.如果真 (等于 (目录_是否存在 (集_目录), 假))
    目录_创建 (集_目录)
.如果真结束
.判断开始 (等于 (参_级别, 1))
    赋值 (局_提示图标, #警告图标)
.判断 (等于 (参_级别, 2))
    赋值 (局_提示图标, #错误图标)
.判断 (等于 (参_级别, 3))
    赋值 (局_提示图标, #信息图标)
.默认
    赋值 (局_提示图标, #信息图标)
.判断结束
.如果真 (参_信息框)
    信息框 (参_内容, 局_提示图标, “日志输出”)
.如果真结束

.如果真 (等于 (集_日志文件句柄, 0))
    赋值 (集_日志文件句柄, 打开文件 (文件路径 (), 5, 1))
    移到文件尾 (集_日志文件句柄)
.如果真结束
 ' 局_文件句柄 ＝ 打开文件 (文件路径 (), 6, 1)

赋值 (局_返回值, 写出文本 (集_日志文件句柄, 取格式文本 (参_内容, 参_级别)))

返回 (局_返回值)

.子程序 输出控制台, 逻辑型, , 输入日志内容到控制台
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_标题, 文本型, 可空, 控制台标题，默认 程序日志
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件

.局部变量 局_控制台属性, 整数型, , , 
.局部变量 局_日志, 文本型, , , 
.局部变量 匿名局部变量_逻辑型_63103, 逻辑型, , , 

.如果 (AllocConsole ())
    赋值 (集_控制台句柄, GetStdHandle (#STD_OUTPUT_HANDLE))
    SetConsoleTitleA (选择 (大于 (取文本长度 (参_标题), 0), 参_标题, “程序日志”))
.否则
    赋值 (集_控制台句柄, GetStdHandle (#STD_OUTPUT_HANDLE))
.如果结束
.如果真 (不等于 (集_控制台句柄, 0))
    .如果真 (参_写到文件)
        输出文件 (参_内容, 参_级别)
    .如果真结束
    .判断开始 (等于 (参_级别, 1))
        赋值 (局_控制台属性, 相加 (#FOREGROUND_RED, #FOREGROUND_INTENSITY))
    .判断 (等于 (参_级别, 2))
        赋值 (局_控制台属性, 相加 (#FOREGROUND_RED, #FOREGROUND_GREEN, #FOREGROUND_INTENSITY))
    .判断 (等于 (参_级别, 3))
        赋值 (局_控制台属性, 相加 (#FOREGROUND_RED, #FOREGROUND_GREEN, #FOREGROUND_BLUE, #FOREGROUND_INTENSITY))
    .默认
        赋值 (局_控制台属性, 相加 (#FOREGROUND_RED, #FOREGROUND_GREEN, #FOREGROUND_BLUE))
    .判断结束
    赋值 (局_日志, 取格式文本 (参_内容, 参_级别))
    SetConsoleTextAttribute (集_控制台句柄, 局_控制台属性)
    返回 (WriteConsoleA (集_控制台句柄, 局_日志, 取文本长度 (局_日志), 0, 0))
.如果真结束
返回 (假)

.子程序 输出易调试, 空白型, , 只在调试模式下有效
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件

.局部变量 局_日志, 文本型, , , 

赋值 (局_日志, 取格式文本 (参_内容, 参_级别))
.如果真 (参_写到文件)
    输出文件 (参_内容, 参_级别)
.如果真结束
输出调试文本 (局_日志)

.子程序 输出调试器, 空白型, , 输出到 调试器，编译模式下有效，可用DbgView 查看
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件

.局部变量 局_日志, 文本型, , , 

赋值 (局_日志, 取格式文本 (参_内容, 参_级别))
.如果真 (参_写到文件)
    输出文件 (参_内容, 参_级别)
.如果真结束
OutputDebugStringA (局_日志)

.子程序 输出编辑框, 空白型, , 输出日志内容到编辑框
.参数 参_编辑框句柄, 整数型, , 
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件

.局部变量 局_日志, 文本型, , , 

赋值 (局_日志, 取格式文本 (参_内容, 参_级别))
.如果真 (参_写到文件)
    输出文件 (参_内容, 参_级别)
.如果真结束
.如果真 (等于 (IsWindow (参_编辑框句柄), 1))
    SendMessageA_文本 (参_编辑框句柄, #EM_REPLACESEL, 0, 局_日志)
.如果真结束


.子程序 取格式文本, 文本型, , 
.参数 参_日志内容, 文本型, , 
.参数 参_日志级别, 整数型, 可空, 

.局部变量 局_系统时间, 系统时间, , , 
.局部变量 局_格式, 文本型, , , 
.局部变量 局_日期, 文本型, , , 
.局部变量 局_时间, 文本型, , , 
.局部变量 局_日志级别, 文本型, , , 

.判断开始 (等于 (参_日志级别, 1))
    赋值 (局_日志级别, “警告”)
.判断 (等于 (参_日志级别, 2))
    赋值 (局_日志级别, “错误”)
.判断 (等于 (参_日志级别, 3))
    赋值 (局_日志级别, “调试”)
.默认
    赋值 (局_日志级别, “信息”)
.判断结束
GetLocalTime_ (局_系统时间)
赋值 (局_日期, 取空白文本 (50))
GetDateFormatA (0, 0, 局_系统时间, “yyyy-MM-dd ”, 局_日期, 50)
赋值 (局_时间, 取空白文本 (50))
GetTimeFormatA (0, #TIME_FORCE24HOURFORMAT, 局_系统时间, “hh:mm:ss.”, 局_时间, 50)
赋值 (局_格式, 相加 (局_日期, 局_时间, 到文本 (局_系统时间.毫秒), “ ”, 局_日志级别, “:”, 参_日志内容, #换行符))
返回 (局_格式)

.子程序 目录_是否存在, 逻辑型, , 输入一个目录名,判断此目录是否存在
.参数 欲判断的目录名, 文本型, , 传入的目录名不会被改变

返回 (等于 (PathIsDirectoryA (欲判断的目录名), 16))

.子程序 目录_创建, 逻辑型, , 创建多级目录，成功返回真，失败返回假。如果指定目录存在也会返回真，不覆盖目录内容。
.参数 目录路径, 文本型, , 

.局部变量 m_Path, 文本型, , , 

赋值 (m_Path, 选择 (不等于 (取文本右边 (目录路径, 1), “\”), 相加 (目录路径, “\”), 目录路径))
返回 (MakeSureDirectoryPathExists (m_Path))

.程序集 集_时间, , , 

.子程序 时间_格式化, 文本型, , 格式化指定日期与时间，失败返回空文本
.参数 参_欲格式化时间, 日期时间型, , 
.参数 参_日期格式, 文本型, 可空, 可以为空，格式：yyyy [年]，M [月],d [日],dddd [星期]，如;yyyy/M/d dddd(年/月/日 星期几)
.参数 参_时间格式, 文本型, 可空, 可以为空，格式：tt [上午或下午],h [小时],m [分钟], s [秒] 。如;hh:mm:ss(小时:分钟:秒),tt hh:mm:ss(上午或下午 小时:分钟:秒)
.参数 参_是否为24小时制, 逻辑型, 可空, 

.局部变量 局_系统时间, 系统时间, , , 
.局部变量 局_整数返回, 空白型, , , 
.局部变量 局_日期, 文本型, , , 
.局部变量 局_时间, 文本型, , , 
.局部变量 局_Flags, 整数型, , , 

赋值 (局_整数返回, VariantTimeToSystemTime_Date (参_欲格式化时间, 局_系统时间))
.如果真 (等于 (1, 局_整数返回))
    .如果真 (大于 (取文本长度 (参_日期格式), 2))
        赋值 (局_日期, 取空白文本 (50))
        GetDateFormatA (0, 0, 局_系统时间, 参_日期格式, 局_日期, 50)
    .如果真结束
    .如果真 (大于 (取文本长度 (参_时间格式), 2))
        赋值 (局_时间, 取空白文本 (50))
        .如果真 (等于 (参_是否为24小时制, 真))
            赋值 (局_Flags, #TIME_FORCE24HOURFORMAT)
        .如果真结束
        GetTimeFormatA (0, 局_Flags, 局_系统时间, 参_时间格式, 局_时间, 50)
    .如果真结束
    返回 (相加 (局_日期, 局_时间))
.如果真结束
返回 (“”)


.子程序 时间_北京转格林威治, 长整数型, , 将【北京标准时间】转换成【格林威治的标准时间】，13位的时间戳可用“时间_取现行时间戳（）”获得
.参数 欲转换的时间, 日期时间型, 可空, 如果为空则取当前时间，如: 1970-01-01 08:00:00 或 2009年2月9日12时36分36秒

.如果真 (是否为空 (欲转换的时间))
    赋值 (欲转换的时间, 取现行时间 ())
.如果真结束
返回 ()

.子程序 时间_格林威治转北京, 日期时间型, , 将【格林威治的标准时间】转换成【北京标准时间】,源码修改至官方用户
.参数 要转换的格林威治时间, 长整数型, , 要转换的格林威治时间

.局部变量 time, 日期时间型, , , 

赋值 (time, 指定时间 (1970, 1, 1, 8, 0, 0))
返回 (增减时间 (time, #秒, 要转换的格林威治时间))

.子程序 时间_取现行时间戳, 文本型, , 生成一个13位或者10位的现行时间戳，默认生成13位时间戳。13位：1325252169718，10位：1325252169
.参数 是否取十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回

.局部变量 时间b, 精易_时间, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 毫秒数, 文本型, , , 
.局部变量 时间a, 文本型, , , 

GetLocalTime (时间b)
赋值 (毫秒数, 相加 (取重复文本 (相减 (3, 取文本长度 (到文本 (时间b.毫))), “0”), 到文本 (时间b.毫)))
赋值 (时间a, 到文本 (取时间间隔 (取现行时间 (), 到时间 (“1970-01-01 08:00:00”), #秒)))
赋值 (返回值, 相加 (时间a, 毫秒数))
 ' 返回值 ＝ 选择 (是否取十位时间戳, 取文本左边 (时间a ＋ 毫秒数, 10), 时间a ＋ 毫秒数)
.判断开始 (是否取十位时间戳)
    赋值 (返回值, 取文本左边 (返回值, 10))
    .判断循环首 (小于 (取文本长度 (返回值), 10))
        赋值 (返回值, 相加 (返回值, “0”))
    .判断循环尾 ()
    返回 (返回值)
.默认
    
    .判断循环首 (小于 (取文本长度 (返回值), 13))
        赋值 (返回值, 相加 (返回值, “0”))
    .判断循环尾 ()
    返回 (返回值)
.判断结束


.子程序 时间_时间戳转文本, 文本型, , 把一个13位的时间戳，如：1325252169718 转成 2011-12-30 21:36:09
.参数 时间戳, 文本型, , 

.局部变量 VBscript, 对象, , , 
.局部变量 局_文本, 文本型, , , 
.局部变量 局_数组, 文本型, , "0", 
.局部变量 局_时间, 日期时间型, , , 

CoInitialize (0)
.如果 (等于 (取文本长度 (时间戳), 10))
    赋值 (局_时间, 增减时间 (到时间 (“1970.01.01 08:00:00”), #秒, 到整数 (时间戳)))
    返回 (选择 (等于 (时间_取制式 (), 0), 时间_格式化 (局_时间, “yyyy-M-dd ”, “hh:mm:ss”), 时间_格式化 (局_时间, “yyyy-M-dd ”, “HH:mm:ss”)))
.否则
    .如果真 (VBscript.创建 (“ScriptControl”, ))
        VBscript.写属性 (“Language”, “JScript”)
        VBscript.数值方法 (“ExecuteStatement”, 相加 (“function timea(){var d,s;d=new Date();d.setTime('”, 时间戳, “');return(d);}”))
        赋值 (局_文本, VBscript.通用方法 (“Run”, “timea”, ).取文本 ())
        VBscript.清除 ()
        CoUninitialize ()
        .如果真 (大于 (取文本长度 (局_文本), 0))
            赋值 (局_数组, 分割文本 (局_文本, “ ”, ))
            .如果真 (大于或等于 (取数组成员数 (局_数组), 6))
                .判断开始 (等于 (局_数组 [2], “Jan”))
                    赋值 (局_数组 [2], “1”)
                .判断 (等于 (局_数组 [2], “Feb”))
                    赋值 (局_数组 [2], “2”)
                .判断 (等于 (局_数组 [2], “Mar”))
                    赋值 (局_数组 [2], “3”)
                .判断 (等于 (局_数组 [2], “Apr”))
                    赋值 (局_数组 [2], “4”)
                .判断 (等于 (局_数组 [2], “May”))
                    赋值 (局_数组 [2], “5”)
                .判断 (等于 (局_数组 [2], “Jun”))
                    赋值 (局_数组 [2], “6”)
                .判断 (等于 (局_数组 [2], “Jul”))
                    赋值 (局_数组 [2], “7”)
                .判断 (等于 (局_数组 [2], “Aug”))
                    赋值 (局_数组 [2], “8”)
                .判断 (等于 (局_数组 [2], “Sep”))
                    赋值 (局_数组 [2], “9”)
                .判断 (等于 (局_数组 [2], “Oct”))
                    赋值 (局_数组 [2], “10”)
                .判断 (等于 (局_数组 [2], “Nov”))
                    赋值 (局_数组 [2], “11”)
                .判断 (等于 (局_数组 [2], “Dec”))
                    赋值 (局_数组 [2], “12”)
                .默认
                    
                .判断结束
                
                返回 (相加 (局_数组 [6], “-”, 局_数组 [2], “-”, 局_数组 [3], “ ”, 局_数组 [4]))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果结束
返回 (“”)

.子程序 时间_到时间戳, 文本型, , 把指定日期时间转换为10位或13位时间戳,默认生成13位时间戳。13位：1325252169718，10位：1325252169
.参数 参_时间, 日期时间型, 可空, 可为空，默认为现行时间
.参数 参_十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回
.参数 参_是否取满10位, 逻辑型, 可空, 如果参数为真，则保证一定取出至少10位，如果不足10位，在前面补0. 如果为假，则直接取出

.局部变量 局_时间, 精易_时间, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 毫秒数, 文本型, , , 
.局部变量 时间a, 文本型, , , 

赋值 (参_时间, 选择 (是否为空 (参_时间), 取现行时间 (), 参_时间))
VariantTimeToSystemTime (参_时间, 局_时间)
赋值 (毫秒数, 相加 (取重复文本 (相减 (3, 取文本长度 (到文本 (局_时间.毫))), “0”), 到文本 (局_时间.毫)))
赋值 (时间a, 到文本 (取时间间隔 (参_时间, 到时间 (“1970-01-01 08:00:00”), #秒)))
.如果真 (参_是否取满10位)
    .如果真 (小于 (取文本长度 (时间a), 10))
        赋值 (时间a, 相加 (取重复文本 (相减 (10, 取文本长度 (时间a)), “0”), 时间a))
    .如果真结束
    
.如果真结束
返回 (选择 (参_十位时间戳, 取文本左边 (相加 (时间a, 毫秒数), 10), 相加 (时间a, 毫秒数)))

.子程序 时间_取制式, 整数型, , 取当前系统时间制式，返回值；0表示12小时制，1表示24小时制
.局部变量 局_缓冲区, 文本型, , , 

赋值 (局_缓冲区, 取空白文本 (4))
GetLocaleInfo (0, 35, 局_缓冲区, 4)
返回 (到整数 (局_缓冲区))

.类模块 ADSL拨号, , , 

.程序集变量 FLSAList, Stroks, , "0", 
.程序集变量 集_链接句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 _取本机IP, 整数型, 公开, 返回IP的个数，如2:本地IP和外网IP
.参数 IP数组, 文本型, 数组, 用于装载IP的文本数组

.局部变量 ulOutBufLen, 空白型, , , 
.局部变量 AdapterInfo, IP_ADAPTER_INFO, , , 
.局部变量 pAdapterInfo, 空白型, , , 
.局部变量 addr, 整数型, , , 
.局部变量 buf_ip, IP_ADDR_STRING, , , 
.局部变量 Success, 空白型, , , 
.局部变量 pAdapter, 整数型, , , 

GetAdaptersInfo (0, ulOutBufLen)
赋值 (pAdapterInfo, GlobalAlloc (64, ulOutBufLen))
赋值 (Success, GetAdaptersInfo (pAdapterInfo, ulOutBufLen))
赋值 (pAdapter, pAdapterInfo)
.如果真 (等于 (Success, 0))
    .循环判断首 ()
        CopyMemory_ip_adapter_info (AdapterInfo, pAdapter, 640)
        加入成员 (IP数组, 到文本 (AdapterInfo.IpAddressList.IpAddress))
        赋值 (pAdapter, AdapterInfo.Next)
    .循环判断尾 (不等于 (pAdapter, 0))
.如果真结束
GlobalFree (pAdapterInfo)
返回 (取数组成员数 (IP数组))

.子程序 取外网IP, 文本型, , 获取本机的外网IP
返回 (网页_取外网IP ())

.子程序 重拨, 文本型, , 重拨成功返回外网IP，失败返回空文本
.参数 连接名称, 文本型, 可空, 可空,默认为 宽带连接  已建立的拨号连接的名称
.参数 用户名, 文本型, , 用于拨号的用户名
.参数 密码, 文本型, , 用于拨号的密码

.局部变量 局_数组, 文本型, , "0", 

.如果真 (是否为空 (连接名称))
    赋值 (连接名称, “宽带连接”)
.如果真结束
.如果真 (取连接状态 (连接名称))
    .如果真 (等于 (断开 (), 假))
        断开_cmd (连接名称)
    .如果真结束
    
.如果真结束
.如果真 (等于 (拨号 (连接名称, 用户名, 密码), 0))
    返回 (“”)
.如果真结束
_取本机IP (局_数组)
.如果真 (大于或等于 (取数组成员数 (局_数组), 2))
    返回 (局_数组 [2])
.如果真结束
返回 (“”)

.子程序 拨号, 整数型, , 通过拨号建立网络连接，成功返回连接句柄，失败返回0
.参数 连接名称, 文本型, , 已建立的拨号连接的名称,一般为 宽带连接
.参数 用户名, 文本型, , 用于拨号的用户名
.参数 密码, 文本型, , 用于拨号的密码

.局部变量 ras, ADSL拨号0, , , 

赋值 (集_链接句柄, 0)
赋值 (ras.结构的大小, 1052)
_内存拷贝1 (ras.访问的入口名, 连接名称, 取文本长度 (连接名称))
_内存拷贝1 (ras.指定用户名称, 用户名, 取文本长度 (用户名))
_内存拷贝1 (ras.指定用户密码, 密码, 取文本长度 (密码))
RasDialA (0, 0, ras, 0, 0, 集_链接句柄)
.如果真 (等于 (集_链接句柄, 0))
    RasDialA (0, 0, ras, 0, 0, 集_链接句柄)
.如果真结束
返回 (集_链接句柄)

.子程序 断开, 逻辑型, , 断开当前拨号网络连接
返回 (等于 (RasHangUpA (集_链接句柄), 0))

.子程序 重拨_cmd, 空白型, , 宽带重拨，cmd方式
.参数 宽带名称, 文本型, 可空, 可空。默认为“宽带连接”
.参数 用户名称, 文本型, , 
.参数 用户密码, 文本型, , 

.如果真 (是否为空 (宽带名称))
    赋值 (宽带名称, “宽带连接”)
.如果真结束
断开_cmd (宽带名称)
拨号_cmd (宽带名称, 用户名称, 用户密码)

.子程序 拨号_cmd, 空白型, , CMD方式拨号
.参数 宽带名称, 文本型, 可空, 可空。默认为“宽带连接”
.参数 用户名称, 文本型, , 
.参数 用户密码, 文本型, , 

.如果真 (是否为空 (宽带名称))
    赋值 (宽带名称, “宽带连接”)
.如果真结束
运行 (相加 (“rasdial ”, 宽带名称, “ ”, 用户名称, “ ”, 用户密码), 真, 1)

.子程序 断开_cmd, 逻辑型, , 断开宽带连接，cmd方式。
.参数 连接名称, 文本型, 可空, 可空,默认为“宽带连接”。已建立的拨号连接的名称

.如果真 (等于 (删首尾空 (连接名称), “”))
    赋值 (连接名称, “宽带连接”)
.如果真结束
返回 (运行 (相加 (“rasphone -h ”, 连接名称), 真, #隐藏窗口)) ' cmd断开连接方式

.子程序 取连接名称, 文本型, 公开, 利用索引取出电脑中拨号的连接名称，成功返回连接名称，失败返回空文本
.参数 连接索引, 整数型, , 欲取名称的连接索引
.参数 所有名称数组, 文本型, 参考 可空 数组, 存放所有连接名称的文本数组

.局部变量 连接信息, 取连接信息用结构, , "10", 
.局部变量 lpcb, 整数型, , , 
.局部变量 连接数, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (或者 (大于 (连接索引, 10), 小于 (连接索引, 1)))
    返回 (“”)
.如果真结束
赋值 (连接信息 [1].内存大小, GlobalSize_取连接信息用结构 (连接信息 [1]))
赋值 (lpcb, 相乘 (连接信息 [1].内存大小, 256))
RasEnumEntries (0, 0, 连接信息, lpcb, 连接数)
.如果真 (是否为空 (所有名称数组))
    返回 (到文本 (连接信息 [连接索引], 拨号连接名称))
.如果真结束
.计次循环首 (连接数, i)
    加入成员 (所有名称数组, 到文本 (连接信息 [i], 拨号连接名称))
.计次循环尾 ()
.如果真 (并且 (大于 (连接索引, 0), 小于或等于 (连接索引, 取数组成员数 (所有名称数组))))
    返回 (所有名称数组 [连接索引])
.如果真结束
返回 (“”)

.子程序 取连接数量, 整数型, , 取系统中已经建立的连接数量
.局部变量 连接信息, 取连接信息用结构, , "10", 假设最多10个连接
.局部变量 lpcb, 整数型, , , 电话本名称,0
.局部变量 连接数, 整数型, , , 

赋值 (连接信息 [1].内存大小, GlobalSize_取连接信息用结构 (连接信息 [1]))
赋值 (lpcb, 相乘 (连接信息 [1].内存大小, 256))
RasEnumEntries (0, 0, 连接信息, lpcb, 连接数)
返回 (连接数)

.子程序 取连接状态, 逻辑型, , 判断指定的连接是否已连接，如果已连接返回真，否则返回假;
.参数 连接名称, 文本型, , 欲判断的连接名称

.局部变量 连接信息, 文本型, 静态, , 
.局部变量 dwFlags, 整数型, , , 
.局部变量 sNameBuf, 文本型, , , 
.局部变量 lR, 整数型, , , 

赋值 (sNameBuf, 取空白文本 (513))
赋值 (lR, InternetGetConnectedStateEx (dwFlags, sNameBuf, 512, 0))
.如果真 (不等于 (lR, 1)) ' 无连接 (这个连接并不一定是通外网，可能是连接路由器等设备)
    返回 (假)
.如果真结束
.如果真 (不等于 (连接名称, 删首尾空 (sNameBuf)))
    返回 (假)
.如果真结束
返回 (真)

.子程序 连接是否存在, 逻辑型, , 如果指定的连接名称存在返回真，否则返回假;
.参数 连接名称, 文本型, , 欲判断的连接名称

.局部变量 连接信息, 取连接信息用结构, , "10", 
.局部变量 lpcb, 整数型, , , 
.局部变量 连接数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

赋值 (连接信息 [1].内存大小, GlobalSize_取连接信息用结构 (连接信息 [1]))
赋值 (lpcb, 相乘 (连接信息 [1].内存大小, 256))
RasEnumEntries (0, 0, 连接信息, lpcb, 连接数)
.计次循环首 (连接数, 局_计次)
    .如果真 (等于 (到文本 (连接信息 [局_计次], 拨号连接名称), 连接名称))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 断开所有连接, 空白型, , 
.局部变量 tmp, 文本型, , "0", 
.局部变量 局_计次, 整数型, , , 

取连接名称 (1, tmp)
.计次循环首 (取数组成员数 (tmp), 局_计次)
    运行 (相加 (“rasphone -h ”, tmp [局_计次]), 假, #隐藏窗口)
.计次循环尾 ()

.子程序 创建新拨号连接, 逻辑型, , 建立一个ADS拨号连接，成功反回真，失败返回假;
.参数 连接名称, 文本型, , 拨号连接的名称,可自定义,如"我的ADSL连接"
.参数 用户名, 文本型, 可空, 用于拨号的用户名
.参数 密码, 文本型, 可空, 用于拨号的密码
.参数 拨号类型, 整数型, 可空, 可空,默认为1  1=PPPoE虚拟拨号  2=电话拨号

.局部变量 re, 创建连接所用结构, , , 
.局部变量 sDeviceName, 文本型, , , 
.局部变量 sDeviceType, 文本型, , , 

.如果真 (是否为空 (拨号类型))
    赋值 (拨号类型, 1)
.如果真结束
赋值 (sDeviceName, “WAN 微型端口 (PPPOE)”) ' 设备名称  内容和系统盘下的 rasphone.pbk 文件相同
赋值 (sDeviceType, “PPPoE”) ' 设备类型
赋值 (re.dwSize, 2884)
赋值 (re.dwCountryCode, 86)
赋值 (re.dwCountryID, 86)
赋值 (re.dwDialExtraPercent, 75)
赋值 (re.dbh5uy, 120)
赋值 (re.dwDialMode, 1)
赋值 (re.sdr5uyhbd, 3)
赋值 (re.hr57hfb, 4)
赋值 (re.dwfOptions, 相减 (1024262928, 256)) ' 去掉托盘显示  RASEO_ModemLights As Long = &H100
赋值 (re.dwfOptions2, 367)
赋值 (re.dwFramingProtocol, 1)
赋值 (re.dwHangUpExtraPercent, 10)
赋值 (re.dwHangUpExtraSampleSeconds, 120)
赋值 (re.dwRedialCount, 3) ' 重拨次数
赋值 (re.dwRedialPause, 5) ' 重拨间隔 5ms
赋值 (re.dwType, 选择 (等于 (拨号类型, 1), 5, 1)) ' 1为拨号连接,5为宽带虚拟拨号,4为连接管理器
_内存拷贝1 (re.szDeviceType, sDeviceType, 取文本长度 (sDeviceType))
_内存拷贝1 (re.szDeviceName, sDeviceName, 取文本长度 (sDeviceName))
.如果真 (等于 (RasSetEntryPropertiesA (0, 连接名称, re, re.dwSize, 0, 0), 0))
    .如果真 (是否为空 (用户名)) ' 如果没有提供用户名,即创建完成
        返回 (真)
    .如果真结束
    .如果真 (设置拨号连接 (连接名称, 用户名, 密码)) ' 提供了用户名,即用rc类型设置连接,rc中包含用户名密码结构
        返回 (真)
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 设置拨号连接, 逻辑型, , 设置已经存在的连接的用户名或密码
.参数 连接名称, 文本型, , 已建立的拨号连接的名称
.参数 用户名, 文本型, , 用于拨号的用户名,留空将不写入连接中
.参数 密码, 文本型, 可空, 用于拨号的密码

.局部变量 rc, 设置拨号所以结构, , , 

赋值 (rc.dsubr, 540)
赋值 (rc.dwMask, 11)
_内存拷贝1 (rc.szUserName, 用户名, 取文本长度 (用户名))
_内存拷贝1 (rc.szPassword, 密码, 取文本长度 (密码))
.如果 (等于 (RasSetCredentialsA (0, 连接名称, rc, 0), 0))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 删除拨号连接, 空白型, , 
.参数 连接名称, 文本型, , 

运行 (相加 (“rasphone -h ”, 连接名称), 假, #隐藏窗口) ' 先挂断连接
运行 (相加 (“rasphone -r ”, 连接名称), 假, #隐藏窗口) ' 删除连接

.子程序 取宽带用户名密码, 逻辑型, , 成功返回真，失败返回假  注：只有ADSL拨号上网的才能取
.参数 连接名称, 文本型, 可空, 请提供一个文本变量,用于存放 连接名称
.参数 宽带用户名, 文本型, 可空, 请提供一个文本变量,用于存放 宽带用户名
.参数 宽带密码, 文本型, 可空, 请提供一个文本变量,用于存放 宽带密码

返回 (系统_取宽带用户名密码 (连接名称, 宽带用户名, 宽带密码))

.子程序 系统_取宽带用户名密码, 逻辑型, 公开, 成功返回真,失败返回假  注：只有ADSL拨号上网的才能取
.参数 连接名称, 文本型, 可空, 请提供一个文本变量,用于存放 连接名称
.参数 宽带用户名, 文本型, 可空, 请提供一个文本变量,用于存放 宽带用户名
.参数 宽带密码, 文本型, 可空, 请提供一个文本变量,用于存放 宽带密码

.局部变量 局_RasArraySize, 整数型, , , 
.局部变量 局_信息, 整数型, , , 
.局部变量 局_RasCount, 整数型, , , 
.局部变量 局_RasArray, 取连接信息用结构, , "0", 
.局部变量 局_图书1, 文本型, , , 
.局部变量 局_图书2, 文本型, , , 
.局部变量 局_osi, OSVersionInfo, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_RasParams, ADSL拨号0, , , 
.局部变量 局_RasEntryProperties, RasEntry, , , 
.局部变量 局_名字1, 字节集, , , 
.局部变量 局_名字2, 字节集, , , 
.局部变量 局_DialParamsUID, 整数型, , , 

赋值 (局_RasCount, 子_GetRasEntryCount ())
.如果真 (等于 (局_RasCount, 0))
    返回 (假)
.如果真结束
重定义数组 (局_RasArray, 假, 局_RasCount)
.如果真 (大于或等于 (取数组成员数 (局_RasArray), 1))
    赋值 (局_RasArray [1].内存大小, GlobalSize_取连接信息用结构 (局_RasArray [1]))
    赋值 (局_RasArraySize, 相乘 (局_RasCount, 局_RasArray [1].内存大小))
.如果真结束
.如果真 (不等于 (RasEnumEntries (0, 0, 局_RasArray, 局_RasArraySize, 局_RasCount), 0))
    返回 (假)
.如果真结束
 ' 局_osi.版本信息大小 ＝ 148
 ' 局_osi.CSD版本 ＝ 取空白文本 (128)
 ' API_GetVersionEx (局_osi)
 ' .如果真 (并且 (等于 (局_osi.平台标识符, 2), 大于或等于 (局_osi.主版本, 5)))
    赋值 (局_图书1, 取空白文本 (255))
    赋值 (局_图书2, 取空白文本 (255))
    .如果真 (SHGetSpecialFolderPath (0, 局_图书1, 26, 假))
        赋值 (局_图书1, 相加 (局_图书1, “\Microsoft\Network\Connections\pbk\rasphone.pbk”))
    .如果真结束
    .如果真 (SHGetSpecialFolderPath (0, 局_图书2, 35, 假))
        赋值 (局_图书2, 相加 (局_图书2, “\Microsoft\Network\Connections\pbk\rasphone.pbk”))
    .如果真结束
    子_GetLSAPasswords ()
.如果真结束
.计次循环首 (取数组成员数 (局_RasArray), 局_计次)
    赋值 (局_RasParams.结构的大小, GlobalSize_RASDIALPARAMS (局_RasParams))
    RtlMoveMemory_字节型 (局_RasParams.访问的入口名, 局_RasArray [局_计次], 拨号连接名称, 255)
    RasGetEntryDialParams (“”, 局_RasParams, 真)
    赋值 (局_RasArraySize, GlobalSize_RASENTRY (局_RasEntryProperties))
    赋值 (局_RasEntryProperties.dwSize, 局_RasArraySize)
    RasGetEntryProperties (“”, 局_RasArray [局_计次], 拨号连接名称, 局_RasEntryProperties, 局_RasArraySize, “”, 局_信息)
    .如果真 (或者 (不等于 (局_图书1, “”), 不等于 (局_图书2, “”)))
        赋值 (局_名字1, 相加 (到字节集 (子_字节型数组到文本 (局_RasParams.访问的入口名)), { 0 }))
        赋值 (局_名字2, 编码_Ansi到Utf8 (子_字节型数组到文本 (局_RasParams.访问的入口名)))
        赋值 (局_DialParamsUID, GetPrivateProfileInt (局_名字1, “DialParamsUID”, 0, 局_图书1))
        .如果真 (等于 (局_DialParamsUID, 0))
            赋值 (局_DialParamsUID, GetPrivateProfileInt (局_名字1, “DialParamsUID”, 0, 局_图书2))
        .如果真结束
        .如果真 (等于 (局_DialParamsUID, 0))
            赋值 (局_DialParamsUID, GetPrivateProfileInt (局_名字2, “DialParamsUID”, 0, 局_图书1))
        .如果真结束
        .如果真 (等于 (局_DialParamsUID, 0))
            赋值 (局_DialParamsUID, GetPrivateProfileInt (局_名字2, “DialParamsUID”, 0, 局_图书2))
        .如果真结束
        .如果真 (大于 (局_DialParamsUID, 0))
            .计次循环首 (取数组成员数 (FLSAList), 局_计次)
                .如果真 (并且 (等于 (FLSAList [局_计次], 名字, 到文本 (局_DialParamsUID)), 不等于 (FLSAList [局_计次], 值, “”)))
                    子_文本到字节型数组 (局_RasParams.指定用户名称, FLSAList [局_计次], 用户)
                    子_文本到字节型数组 (局_RasParams.指定用户密码, FLSAList [局_计次], 值)
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .如果真结束
    赋值 (连接名称, 子_字节型数组到文本 (局_RasParams.访问的入口名))
    赋值 (宽带用户名, 子_字节型数组到文本 (局_RasParams.指定用户名称))
    赋值 (宽带密码, 子_字节型数组到文本 (局_RasParams.指定用户密码))
.计次循环尾 ()
返回 (不等于 (删首尾空 (宽带用户名), “”))

.子程序 子_文本到字节型数组, 空白型, , 
.参数 字节, 字节型, 参考 数组, 
.参数 文本, 文本型, , 

.局部变量 局_计次, 整数型, , , 

赋值 (局_计次, 取文本长度 (文本))
重定义数组 (字节, 假, 相加 (局_计次, 2))
.计次循环首 (取数组成员数 (字节), 局_计次)
    赋值 (字节 [局_计次], 取代码 (取文本中间 (文本, 局_计次, 1), ))
.计次循环尾 ()

.子程序 子_字节型数组到文本, 文本型, , 
.参数 字节, 字节型, 数组, 

.局部变量 局_计次, 整数型, , , 
.局部变量 局_ret, 文本型, , , 

赋值 (局_ret, “”)
.计次循环首 (取数组成员数 (字节), 局_计次)
    .如果 (不等于 (字节 [局_计次], 0))
        赋值 (局_ret, 相加 (局_ret, 字符 (字节 [局_计次])))
    .否则
        跳出循环 ()
    .如果结束
    
.计次循环尾 ()
返回 (局_ret)

.子程序 子_GetLSAPasswords, 空白型, , 获取LSA的密码
.局部变量 局_PrivateData, LSA_UNICODE_STRING, , , 

.如果真 (子_GetLsaData (4, 相加 (“RasDialParams!”, 子_GetLocalSid (), “#0”), 局_PrivateData))
    子_ProcessLSABuffer (局_PrivateData.缓冲区, 局_PrivateData.长度)
    LsaFreeMemory (局_PrivateData.缓冲区)
.如果真结束
.如果真 (子_GetLsaData (4, “L$_RasDefaultCredentials#0”, 局_PrivateData))
    子_ProcessLSABuffer (局_PrivateData.缓冲区, 局_PrivateData.长度)
    LsaFreeMemory (局_PrivateData.缓冲区)
.如果真结束


.子程序 子_GetRasEntryCount, 整数型, , 获取RAS项计数
.局部变量 局_SizeOfRasEntryName, 整数型, , , 
.局部变量 局_Ret, 整数型, , , 
.局部变量 局_Count, 整数型, , , 
.局部变量 局_RasEntry, 取连接信息用结构, , , 

赋值 (局_SizeOfRasEntryName, GlobalSize_取连接信息用结构 (局_RasEntry))
赋值 (局_RasEntry.内存大小, 局_SizeOfRasEntryName)
赋值 (局_Ret, RasEnumEntrie (0, 0, 局_RasEntry, 局_SizeOfRasEntryName, 局_Count))
.如果 (或者 (等于 (局_Ret, 603), 等于 (局_Ret, 0)))
    重定义数组 (FLSAList, 假, 局_Count)
    赋值 (局_Ret, 局_Count)
.否则
    赋值 (局_Ret, 0)
.如果结束
返回 (局_Ret)

.子程序 子_GetLsaData, 逻辑型, , 获取LSA的数据
.参数 Policy, 整数型, , 
.参数 KeyName, 文本型, , 
.参数 OutData, LSA_UNICODE_STRING, 参考, 

.局部变量 局_LsaObjectAttribs, LSA_OBJECT_ATTRIBUTES, , , 
.局部变量 局_LsaHandle, 整数型, , , 
.局部变量 局_LsaKeyName, LSA_UNICODE_STRING, , , 
.局部变量 局_LsaPrivateData, 整数型, , , 
.局部变量 局_status, 整数型, , , 
.局部变量 局_temp1, 字节集, , , 
.局部变量 局_temp2, 整数型, , , 

.如果真 (大于 (LsaOpenPolicy (0, 局_LsaObjectAttribs, Policy, 局_LsaHandle), 0))
    返回 (假)
.如果真结束
子_AnsiStringToLsaStr (KeyName, 局_LsaKeyName)
赋值 (局_status, LsaRetrievePrivateData (局_LsaHandle, 局_LsaKeyName, 局_LsaPrivateData))
.如果真 (等于 (局_status, 0))
    赋值 (局_temp1, 指针到字节集 (局_LsaPrivateData, 8))
    RtlMoveMemory_LSA_UNICODE_STRING (OutData, 局_temp1, 8)
    赋值 (局_temp1, 取字节集右边 (局_temp1, 4))
    赋值 (局_temp2, 取字节集数据 (局_temp1, #整数型, ))
    赋值 (OutData.缓冲区, 指针到字节集 (局_temp2, OutData.长度))
    LsaClose (局_LsaHandle)
    返回 (真)
.如果真结束
返回 (假)

.子程序 子_AnsiStringToLsaStr, 空白型, , ANSI字符串str中的LSA
.参数 AValue, 文本型, , 
.参数 LStr, LSA_UNICODE_STRING, 参考, 

赋值 (LStr.长度, 相乘 (取文本长度 (AValue), 2))
赋值 (LStr.最大长度, 相加 (LStr.长度, 2))
赋值 (LStr.缓冲区, 编码_Ansi到Unicode (AValue))

.子程序 子_GetLocalSid, 文本型, , 获取本地SID
.局部变量 局_sUserName, 文本型, , , 
.局部变量 局_iResult, 整数型, , , 
.局部变量 局_bUserSid, 字节集, , , 
.局部变量 局_iUserSIDSize, 整数型, , , 
.局部变量 局_sDomainName, 文本型, , , 
.局部变量 局_iDomainNameLength, 整数型, , , 
.局部变量 局_iSIDType, 整数型, , , 
.局部变量 局_sUserSid, 文本型, , , 
.局部变量 局_hUserSid, 整数型, , , 

赋值 (局_sUserName, 取空白文本 (256))
GetUserNameA (局_sUserName, 255)
赋值 (局_bUserSid, 取空白字节集 (255))
赋值 (局_iResult, LookupAccountName (取空白文本 (0), 局_sUserName, 局_bUserSid, 局_iUserSIDSize, 局_sDomainName, 局_iDomainNameLength, 局_iSIDType))
赋值 (局_sDomainName, 取空白文本 (局_iDomainNameLength))
赋值 (局_bUserSid, 取空白字节集 (局_iUserSIDSize))
赋值 (局_iResult, LookupAccountName (取空白文本 (0), 局_sUserName, 局_bUserSid, 局_iUserSIDSize, 局_sDomainName, 局_iDomainNameLength, 局_iSIDType))
.如果真 (等于 (IsValidSid (取指针地址_字节集型 (局_bUserSid)), 0))
    返回 (“”)
.如果真结束
赋值 (局_iResult, ConvertSidToStringSid (局_bUserSid, 局_hUserSid))
.如果真 (不等于 (局_iResult, 0))
    赋值 (局_iResult, lstrlen (局_hUserSid))
    .如果真 (大于 (局_iResult, 0))
        赋值 (局_sUserSid, 取空白文本 (相乘 (局_iResult, 2)))
        赋值 (局_bUserSid, 取空白字节集 (相乘 (局_iResult, 2)))
        RtlMoveMemory_整数型2 (取指针地址_字节集型 (局_bUserSid), 局_hUserSid, 相乘 (局_iResult, 2))
        赋值 (局_sUserSid, 编码_Unicode到Ansi (局_bUserSid))
    .如果真结束
    
.如果真结束
返回 (局_sUserSid)

.子程序 取指针地址_字节集型, 整数型, , 
.参数 欲取地址的数据, 字节集, 参考, 

返回 (lstrcpyn_字节集 (欲取地址的数据, 欲取地址的数据, 0))

.子程序 子_ProcessLSABuffer, 空白型, , LSA的缓冲过程
.参数 Buffer, 字节集, , 
.参数 BufLen, 整数型, , 

.局部变量 局_c, 字节集, , , 
.局部变量 局_记录, 整数型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_SPos, 整数型, , , 
.局部变量 局_S, 字节集, , , 
.局部变量 局_BookID, 文本型, , , 
.局部变量 局_用户名, 文本型, , , 
.局部变量 局_密码, 文本型, , , 

赋值 (局_记录, 1)
.变量循环首 (1, BufLen, 2, 局_计次)
    赋值 (局_c, 取字节集中间 (Buffer, 局_计次, 2))
    .如果 (等于 (局_c, { 0, 0 }))
        赋值 (局_SPos, 相加 (局_SPos, 1))
        .判断开始 (等于 (局_SPos, 1))
            赋值 (局_BookID, 编码_Unicode到Ansi (局_S))
        .判断 (等于 (局_SPos, 6))
            赋值 (局_用户名, 编码_Unicode到Ansi (局_S))
        .判断 (等于 (局_SPos, 7))
            赋值 (局_密码, 编码_Unicode到Ansi (局_S))
            .如果真 (小于 (取数组成员数 (FLSAList), 局_记录))
                重定义数组 (FLSAList, 真, 局_记录)
            .如果真结束
            赋值 (FLSAList [局_记录], 名字, 局_BookID)
            赋值 (FLSAList [局_记录], 值, 局_密码)
            赋值 (FLSAList [局_记录], 用户, 局_用户名)
        .默认
            
        .判断结束
        赋值 (局_S, {  })
    .否则
        赋值 (局_S, 相加 (局_S, 局_c))
    .如果结束
    .如果真 (等于 (局_SPos, 9))
        赋值 (局_记录, 相加 (局_记录, 1))
        赋值 (局_BookID, “”)
        赋值 (局_SPos, 0)
    .如果真结束
    
.变量循环尾 ()

.程序集 集_进程通信, , , 

.程序集变量 集_oldlong, 整数型, , , 
.程序集变量 集_标志文本数组, 文本型, , "0", 
.程序集变量 集_消息编号数组, 整数型, , "0", 
.程序集变量 集_数据数组, 字节集, , "0", 
.程序集变量 集_指针数组, 整数型, , "0", 
.程序集变量 集_窗口句柄, 整数型, , , 
.子程序 进程通信_接收端_初始化, 空白型, , 监听前必需调用此子程序，只需使用一次，停止监听前不能再使用此子程序，否则会出错。
.参数 参数_窗口句柄, 整数型, , 当前窗口句柄，可用 取窗口句柄() 得到。

赋值 (集_窗口句柄, 参数_窗口句柄)
赋值 (集_oldlong, SetWindowLongA (参数_窗口句柄, -4, 到整数 (&接收端_读数据)))

.子程序 进程通信_接收端_开始监听, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_标志文本, 文本型, , 可以为任意文本(不能为空文本)，但是不要和系统中已有的冲突。设置不同的标志文本，可绑定不同的子程序。
.参数 参数_回调函数, 子程序指针, 可空, 接收到信息后要触发的子程序，不可多个标志文本绑定同个子程序，不需要可不填。

.局部变量 局_计次, 整数型, , , 

.如果真 (等于 (参数_标志文本, “”))
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (集_标志文本数组), 局_计次) ' 判断是否有相同的标识文件存在
    .如果真 (等于 (集_标志文本数组 [局_计次], 参数_标志文本))
        返回 (假)
    .如果真结束
    
.计次循环尾 () ' 判断是否有相同的标识文件存在

加入成员 (集_消息编号数组, RegisterWindowMessageA (参数_标志文本))
加入成员 (集_标志文本数组, 参数_标志文本)

.如果真 (等于 (集_消息编号数组 [取数组成员数 (集_消息编号数组)], 0)) ' 如果获取的消息编号为0,将其删除;
    删除成员 (集_标志文本数组, 取数组成员数 (集_标志文本数组), )
    删除成员 (集_消息编号数组, 取数组成员数 (集_消息编号数组), )
    返回 (假)
.如果真结束

.计次循环首 (相减 (取数组成员数 (集_消息编号数组), 1), 局_计次) ' 判断 集_消息编号数组 是否有重复
    .如果真 (等于 (集_消息编号数组 [局_计次], 集_消息编号数组 [取数组成员数 (集_消息编号数组)]))
        删除成员 (集_标志文本数组, 取数组成员数 (集_标志文本数组), )
        删除成员 (集_消息编号数组, 取数组成员数 (集_消息编号数组), )
        返回 (假)
    .如果真结束
    
.计次循环尾 ()

.计次循环首 (取数组成员数 (集_指针数组), 局_计次)
    .如果真 (等于 (集_指针数组 [局_计次], 到整数 (参数_回调函数)))
        删除成员 (集_标志文本数组, 取数组成员数 (集_标志文本数组), )
        删除成员 (集_消息编号数组, 取数组成员数 (集_消息编号数组), )
        返回 (假)
    .如果真结束
    
.计次循环尾 ()

加入成员 (集_指针数组, 到整数 (参数_回调函数))
加入成员 (集_数据数组, 到字节集 (“”))
返回 (真)

.子程序 进程通信_接收端_关闭监听, 空白型, , 关闭某监听，要恢复请直接开始(不用重新初始化)。
.参数 参数_标志文本, 文本型, , 

.局部变量 计次, 整数型, , , 

.计次循环首 (取数组成员数 (集_标志文本数组), 计次)
    .如果真 (等于 (集_标志文本数组 [计次], 参数_标志文本))
        删除成员 (集_消息编号数组, 计次, )
        删除成员 (集_标志文本数组, 计次, )
        删除成员 (集_数据数组, 计次, )
        删除成员 (集_指针数组, 计次, )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 进程通信_接收端_停止监听, 空白型, , 关闭所有监听，要恢复请重新初始化。
SetWindowLongA (集_窗口句柄, -4, 集_oldlong)
清除数组 (集_标志文本数组)
清除数组 (集_消息编号数组)
清除数组 (集_数据数组)
清除数组 (集_指针数组)

.子程序 进程通信_接收端_取出数据, 字节集, , 回调函数或其它子程序可用此子程序取出接收到的数据。
.参数 参数_标识文本, 文本型, , 接收端监听时设置的文本。

.局部变量 局_计次, 整数型, , , 

.计次循环首 (取数组成员数 (集_标志文本数组), 局_计次)
    .如果真 (等于 (集_标志文本数组 [局_计次], 参数_标识文本))
        返回 (集_数据数组 [局_计次])
    .如果真结束
    
.计次循环尾 ()
返回 ({  })

.子程序 进程通信_接收端_清除数据, 空白型, , 清除某监听得到的数据(其它数据不变)，释放该数据所占的内存。
.参数 参数_标志文本, 文本型, , 

.局部变量 局_计次, 整数型, , , 

.计次循环首 (取数组成员数 (集_标志文本数组), 局_计次)
    .如果真 (等于 (集_标志文本数组 [局_计次], 参数_标志文本))
        赋值 (集_数据数组 [局_计次], {  })
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 进程通信_接收端_清空数据, 空白型, , 清空所有监听得到的所有数据，释放内存。
重定义数组 (集_数据数组, 假, 取数组成员数 (集_数据数组))

.子程序 进程通信_发送端_发送数据, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_窗口句柄, 整数型, , 接收端的窗口句柄。
.参数 参数_标志文本, 文本型, , 接收端监听时设置的文本。
.参数 参数_欲发送的数据, 字节集, , 要发送的数据。

.局部变量 局_消息文本, 字节集, , , 
.局部变量 局_标识文本, 字节集, , , 
.局部变量 局_进程ID, 文本型, 静态, , 
.局部变量 局_消息号, 整数型, , , 
.局部变量 局_PIDlen, 文本型, , , 

赋值 (局_消息号, RegisterWindowMessageA (参数_标志文本))
.如果真 (或者 (等于 (局_进程ID, “”), 等于 (局_进程ID, “0”)))
    赋值 (局_进程ID, 到文本 (GetCurrentProcessId ()))
.如果真结束
.如果真 (不等于 (IsWindow (参数_窗口句柄), 0))
    赋值 (局_标识文本, { 1 })
    赋值 (局_消息文本, 到字节集 (相加 (到文本 (lstrcpynA_字节集 (局_标识文本, 局_标识文本, 0)), “$”, 到文本 (取字节集长度 (参数_欲发送的数据)), “&”, 到文本 (lstrcpynA_字节集 (参数_欲发送的数据, 参数_欲发送的数据, 0)))))
    赋值 (局_PIDlen, 到文本 (取文本长度 (局_进程ID)))
    SendMessageA_整数 (参数_窗口句柄, 局_消息号, 到整数 (相加 (局_PIDlen, 局_进程ID, 到文本 (取字节集长度 (局_消息文本)))), lstrcpynA_字节集 (局_消息文本, 局_消息文本, 0))
    .如果真 (等于 (局_标识文本, { 2 }))
        返回 (真)
    .如果真结束
    返回 (假)
.如果真结束
返回 (假)

.子程序 接收端_读数据, 整数型, , 
.参数 参数_窗口句柄, 整数型, , 
.参数 参数_消息号, 整数型, , 
.参数 参数_参数1, 整数型, , 
.参数 参数_参数2, 整数型, , 

.局部变量 局_消息文本, 文本型, , , 
.局部变量 局_标识地址, 整数型, , , 
.局部变量 局_len, 整数型, , , 
.局部变量 局_drlen, 整数型, , , 
.局部变量 局_hProcess, 整数型, , , 
.局部变量 局_lpBuffer, 字节集, , , 
.局部变量 局_计次, 整数型, , , 

.计次循环首 (取数组成员数 (集_消息编号数组), 局_计次)
    .如果真 (等于 (集_消息编号数组 [局_计次], 参数_消息号))
        赋值 (局_消息文本, 到文本 (参数_参数1))
        赋值 (局_len, 到整数 (取文本左边 (局_消息文本, 1)))
        赋值 (局_消息文本, 取文本右边 (局_消息文本, 相减 (取文本长度 (局_消息文本), 1)))
        赋值 (局_hProcess, OpenProcess (2035711, 0, 到整数 (取文本左边 (局_消息文本, 局_len))))
        赋值 (局_drlen, 到整数 (取文本右边 (局_消息文本, 相减 (取文本长度 (局_消息文本), 局_len))))
        赋值 (局_lpBuffer, 取空白字节集 (局_drlen))
        ReadProcessMemory_字节集 (局_hProcess, 参数_参数2, 局_lpBuffer, 局_drlen, 0)
        赋值 (局_消息文本, 到文本 (局_lpBuffer))
        赋值 (局_标识地址, 到整数 (取文本左边 (局_消息文本, 相减 (寻找文本 (局_消息文本, “$”, , 假), 1))))
        WriteProcessMemory_字节集 (局_hProcess, 局_标识地址, { 2 }, 1, 0)
        赋值 (局_消息文本, 取文本右边 (局_消息文本, 相减 (取文本长度 (局_消息文本), 寻找文本 (局_消息文本, “$”, , 假))))
        赋值 (局_drlen, 到整数 (取文本左边 (局_消息文本, 相减 (寻找文本 (局_消息文本, “&”, , 假), 1))))
        赋值 (局_len, 到整数 (取文本右边 (局_消息文本, 相减 (取文本长度 (局_消息文本), 寻找文本 (局_消息文本, “&”, , 假)))))
        赋值 (局_lpBuffer, 取空白字节集 (局_drlen))
        ReadProcessMemory_字节集 (局_hProcess, 局_len, 局_lpBuffer, 局_drlen, 0)
        赋值 (集_数据数组 [局_计次], 局_lpBuffer)
        CloseHandle (局_hProcess)
        .如果真 (不等于 (到整数 (集_指针数组 [局_计次]), 0))
            _程序执行整数子程序2 ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }, 集_指针数组 [局_计次], 0, 0, 0)
        .如果真结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (CallWindowProcA (集_oldlong, 参数_窗口句柄, 参数_消息号, 参数_参数1, 参数_参数2))


 ' 不属于任何一个程序集、类模块的函数：
