 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 790
    高度 = 598
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\TCP控制端.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “飞扬远控【开发版本】”
    帮助文件名 = “”

窗口 窗口4
    左边 = 50
    顶边 = 50
    宽度 = 237
    高度 = 210
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\TCP控制端.e\窗口4_图标.ico
    背景音乐 =  ' 空
    标题 = “注册表”
    帮助文件名 = “”

窗口 _远程视频窗口
    左边 = 50
    顶边 = 50
    宽度 = 341
    高度 = 498
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 237
    高度 = 209
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “高级运行方式-远程运行”
    帮助文件名 = “”

窗口 _TELNET
    左边 = 50
    顶边 = 50
    宽度 = 516
    高度 = 415
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “Telnet”
    帮助文件名 = “”

窗口 _自动上线
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 276
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “自动上线-FTP更新”
    帮助文件名 = “”

窗口 配置服务端窗口
    左边 = 50
    顶边 = 50
    宽度 = 412
    高度 = 257
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 16777215 '  0xFFFFFF
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “配置服务端  ”
    帮助文件名 = “”

窗口 _远程屏幕窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 553
    高度 = 403
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “远程屏幕控制”
    帮助文件名 = “”

窗口 关于窗口
    左边 = 50
    顶边 = 50
    宽度 = 350
    高度 = 293
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “关于 网络测试”
    帮助文件名 = “”

窗口 传输窗口
    左边 = 50
    顶边 = 50
    宽度 = 760
    高度 = 438
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 磁盘图标组, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\磁盘图标组", , 
.常量 下任务数, "5", , 
.常量 上任务数, "5", , 
.常量 传送大小, "100000", , 
.常量 , , , 
.常量 OF_CREATE, "4096", 公开, 创建指定的文件。如已经存在，则将其缩减为零长度
.常量 OF_PROMPT, "8192", 公开, 如文件不存在，则显示一个消息框，在其中列出重试和取消按钮
.常量 OF_EXIST, "16384", 公开, 通过尝试打开文件的做法，判断一个文件是否存在。如文件存在，则将其关闭。
.常量 OF_REOPEN, "32768", 公开, 打开lpReOpenBuff结构内指定的文件，而不是用lpFileName参数
.常量 FORMAT_MESSAGE_FROM_SYSTEM, "4096", , 
.常量 FORMAT_MESSAGE_ARGUMENT_ARRAY, "8192", , 
.常量 GENERIC_READ, "2147483648", , ""
.常量 GENERIC_WRITE, "1073741824", , ""
.常量 FILE_SHARE_READ, "1", , ""
.常量 FILE_SHARE_WRITE, "2", , ""
.常量 OPEN_EXISTING, "3", , 
.常量 FILE_ATTRIBUTE_NORMAL, "128", , ""
.常量 CREATE_ALWAYS, "2", , 
.常量 FILE_CURRENT, "1", , 
.常量 FILE_BEGIN, "0", , 
.常量 FILE_END, "2", , 
.常量 FILE_FLAG_DELETE_ON_CLOSE, "67108864", , ""
.常量 PAGE_READONLY, "2", , ""
.常量 PAGE_READWRITE, "4", , ""
.常量 PAGE_WRITECOPY, "8", , ""
.常量 FILE_MAP_WRITE, "2", , 
.常量 FILE_MAP_READ, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 
.常量 , , , 
.常量 OF_READ, "0", 公开, 以只读方式打开文件
.常量 OF_SHARE_COMPAT, "0", 公开, 文件可由多个应用程序打开多次
.常量 OF_WRITE, "1", 公开, 文件以只写模式打开
.常量 OF_READWRITE, "2", 公开, 以可读、可写的方式打开文件
.常量 OPEN_ALWAYS, "4", 公开, 
.常量 , , , 
.图片 图标组, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\图标组", , 
.图片 exe, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\exe", , 
.图片 txt, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\txt", , 
.图片 无, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\无", , 
.图片 dll, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\dll", , 
.图片 ini, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\ini", , 
.图片 托盘, " ' 已保存到：D:\易语言学习\Data\TCP控制端.e\托盘", , 
.常量 客户进入, "1", 隐藏, 
.常量 数据到达, "2", 隐藏, 
.常量 客户离开, "3", 隐藏, 
.常量 打开方式_读写, "4", 隐藏, OPEN_ALWAYS' 如文件不存在则创建它。
.常量 打开方式_重写, "5", 隐藏, TRUNCATE_EXISTING' 文件必须已经存在。
.常量 打开方式_创建, "1", 隐藏, CREATE_NEW' 如文件存在则会出错。
.常量 共享方式_不共享, "0", 隐藏, 
.常量 共享方式_可读, "1", 隐藏, FILE_SHARE_READ
.常量 共享方式_可写, "2", 隐藏, FILE_SHARE_WRITE
.常量 SRET_OK, "0", 隐藏, 错误代码：操作成功
.常量 SRET_ERROR, "1", 隐藏, 错误代码：操作失败
.常量 SRET_ERROR_FILE, "2", 隐藏, 错误代码：文件操作失败
.常量 SRET_ERROR_PARAM, "3", 隐藏, 错误代码：参数错误
.常量 SRET_ERROR_CREATE, "4", 隐藏, 错误代码：创建皮肤失败
.常量 SRET_ERROR_FORMAT, "5", 隐藏, 错误代码：皮肤格式错误
.常量 SRET_ERROR_VERSION, "6", 隐藏, 错误代码：皮肤版本错误
.常量 SRET_ERROR_PASSWORD, "7", 隐藏, 错误代码：皮肤密码错误
.常量 TYPE_UNKNOWN, "0", 隐藏, 换肤类型：未知类型
.常量 TYPE_ANIMATE, "1001", 隐藏, 换肤类型：动画控件
.常量 TYPE_CHECKBOX, "1002", 隐藏, 换肤类型：复选框
.常量 TYPE_COMBOBOX, "1003", 隐藏, 换肤类型：组合框
.常量 TYPE_COMBOLBOX, "1004", 隐藏, 换肤类型：组合下拉框
.常量 TYPE_CONTROLBAR, "1005", 隐藏, 换肤类型：控件栏
.常量 TYPE_DATETIME, "1006", 隐藏, 换肤类型：日期控件
.常量 TYPE_EDITBOX, "1007", 隐藏, 换肤类型：文本框
.常量 TYPE_GROUPBOX, "1008", 隐藏, 换肤类型：分组框
.常量 TYPE_HEADERCTRL, "1009", 隐藏, 换肤类型：列头控件
.常量 TYPE_HOTKEY, "1010", 隐藏, 换肤类型：热键控件
.常量 TYPE_IPADDRESS, "1011", 隐藏, 换肤类型：IP地址控件
.常量 TYPE_LABEL, "1012", 隐藏, 换肤类型：标签控件
.常量 TYPE_LISTBOX, "1013", 隐藏, 换肤类型：列表框
.常量 TYPE_LISTVIEW, "1014", 隐藏, 换肤类型：列表视图
.常量 TYPE_MDICLIENT, "1015", 隐藏, 换肤类型：MDI客户区
.常量 TYPE_MENU, "1016", 隐藏, 换肤类型：菜单
.常量 TYPE_MONTHCAL, "1017", 隐藏, 换肤类型：月历控件
.常量 TYPE_PICTURE, "1018", 隐藏, 换肤类型：图片框
.常量 TYPE_PROGRESS, "1019", 隐藏, 换肤类型：进度条
.常量 TYPE_PUSHBUTTON, "1020", 隐藏, 换肤类型：普通按钮
.常量 TYPE_RADIOBUTTON, "1021", 隐藏, 换肤类型：单选框
.常量 TYPE_REBAR, "1022", 隐藏, 换肤类型：重组栏
.常量 TYPE_RICHEDIT, "1023", 隐藏, 换肤类型：富文本框
.常量 TYPE_SCROLLBAR, "1024", 隐藏, 换肤类型：滚动条
.常量 TYPE_SCROLLCTRL, "1025", 隐藏, 换肤类型：内置滚动条的控件
.常量 TYPE_SPINCTRL, "1026", 隐藏, 换肤类型：调节器
.常量 TYPE_STATUSBAR, "1027", 隐藏, 换肤类型：状态栏
.常量 TYPE_TABCTRL, "1028", 隐藏, 换肤类型：选择夹
.常量 TYPE_TOOLBAR, "1029", 隐藏, 换肤类型：工具栏
.常量 TYPE_TOOLBARWND, "1030", 隐藏, 换肤类型：MFC工具栏窗体
.常量 TYPE_TRACKBAR, "1031", 隐藏, 换肤类型：滑条控件
.常量 TYPE_TREEVIEW, "1032", 隐藏, 换肤类型：树形视图
.常量 TYPE_WINDOW, "1034", 隐藏, 换肤类型：标准窗体
.常量 TYPE_COMCTRL, "1036", 隐藏, 换肤类型：通用换肤1
.常量 TYPE_PAINTCTRL, "1037", 隐藏, 换肤类型：通用换肤2
.常量 TYPE_DNET_LABEL, "2001", 隐藏, 换肤类型：标签(.Net)
.常量 TYPE_DNET_WINDOW, "2002", 隐藏, 换肤类型：窗体(.Net)
.常量 TYPE_DNET_CHECKBOX, "2003", 隐藏, 换肤类型：复选框(.Net)
.常量 TYPE_DNET_RADIOBUTTON, "2004", 隐藏, 换肤类型：单选框(.Net)
.常量 TYPE_DNET_PUSHBUTTON, "2005", 隐藏, 换肤类型：普通按钮(.Net)
.常量 TYPE_DNET_TOOLSTRIP, "2006", 隐藏, 换肤类型：工具栏(.Net)
.常量 TYPE_DNET_MENUSTRIP, "2007", 隐藏, 换肤类型：菜单栏(.Net)
.常量 TYPE_DNET_STATUSSTRIP, "2008", 隐藏, 换肤类型：状态栏(.Net)
.常量 TYPE_DNET_TOOLSTRIPMENU, "2009", 隐藏, 换肤类型：工具菜单(.Net)
.常量 TYPE_DNET_TOOLSTRIPOVERFLOW, "2010", 隐藏, 换肤类型：工具溢出菜单(.Net)
.常量 TYPE_DNET_DATAGRIDVIEW, "2011", 隐藏, 换肤类型：数据视图(.Net)
.常量 TYPE_DELPHI_WINDOW, "3001", 隐藏, 换肤类型：窗体(Delphi)
.常量 TYPE_DELPHI_BITBUTTON, "3002", 隐藏, 换肤类型：位图按钮(Delphi)
.常量 TYPE_DELPHI_TWINCONTROL, "3003", 隐藏, 换肤类型：带句柄的基类（Delphi)
.常量 TYPE_DELPHI_GROUPBOX, "3004", 隐藏, 换肤类型：分组框(Delphi)
.常量 TYPE_VB_FORM, "4001", 隐藏, 换肤类型：窗体(VB6)
.常量 TYPE_VB_PUSHBUTTON, "4002", 隐藏, 换肤类型：普通按钮(VB6)
.常量 TYPE_VB_RADIOBUTTON, "4003", 隐藏, 换肤类型：单选框(VB6)
.常量 TYPE_VB_CHECKBOX, "4004", 隐藏, 换肤类型：复选框(VB6)
.常量 TYPE_VB_GROUPBOX, "4005", 隐藏, 换肤类型：分组框(VB6)
.常量 TYPE_VB_TABCTRL, "4006", 隐藏, 换肤类型：选择夹(VB6)
.常量 TYPE_VB_DATACOMBOCTRL, "4007", 隐藏, 换肤类型：数据组合框(VB6)
.常量 TYPE_EL_EDIT, "5001", 隐藏, 换肤类型：文本框(易语言)
.常量 TYPE_EL_WINDOW, "5002", 隐藏, 换肤类型：窗体(易语言)
.常量 TYPE_EL_COLORSEL, "5003", 隐藏, 换肤类型：颜色选择器(易语言)
.常量 TYPE_PB_FORM, "6001", 隐藏, 换肤类型：窗体(PB)
.常量 TYPE_PB_PICTUREBUTTON, "6002", 隐藏, 换肤类型：图片框(PB)
.常量 TYPE_PB_TABCTRL, "6003", 隐藏, 换肤类型：选择夹(PB)
.图片 客户XP, "", , 
.常量 WM_PAINT, "15", , 
.常量 , , , 
.常量 分割符, "“|\”", , 
.常量 收到数据, "1", , 
.常量 可发送数据, "2", , 
.常量 数据到达_, "4", , 
.常量 外来连接, "8", , 
.常量 连接建立, "16", , 
.常量 断开连接, "32", , 
.常量 重叠操作, "997", , 
.常量 INVALID_HANDLE_VALUE, "-1", , 
.常量 AF_INET, "2", , 
.常量 SOCK_STREAM, "1", , 
.常量 WSA_FLAG_OVERLAPPED, "1", , 
.常量 PF_INET, "2", , 
.常量 WSAID_ACCEPTEX, "“{b5367df1-cbac-11cf-95ca-00805f48a192}”", , 
.常量 SIO_GET_EXTENSION_FUNCTION_POINTER, "-939524090", , 
.常量 ERROR_IO_PENDING, "997", , 
.常量 事件_连接, "1", , 
.常量 事件_接收数据, "2", , 
.常量 事件_发送数据, "3", , 
.常量 WSAID_TRANSMITFILE, "“{b5367df0-cbac-11cf-95ca-00805f48a192}”", , 
.常量 WSAID_GETACCEPTEXSOCKADDRS, "“{b5367df2-cbac-11cf-95ca-00805f48a192}”", , 
.常量 发送数据, "128", , 
.常量 发送文件, "256", , 
.常量 接收数据, "1", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 6 扩展界面支持库一
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 6 扩展界面支持库三
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 2 扩展界面支持库二
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库
 ' internet 707ca37322474f6ca841f0e224f4b620 1 1 互联网支持库
 ' sock A6B983789F624b2cBDFD7D671249C097 1 1 网络通讯支持库
 ' ExtMenu 9909FBB013704cfa8FE7E739DB7172DE 1 7 超级菜单支持库



 ' 所需要的模块
 ' TCP服务器 G:\数据传送\TCP服务器.ec
 ' 内存申请模块 G:\数据传送\内存申请模块.ec
 ' 文件读写 I:\E\远程控制\文件读写.ec
 ' SkinSharp(静态皮肤模块) D:\易语言\TCP远程\TCP远控\SkinSharp静态模块.ec
 ' 压缩数据_ C:\Documents and Settings\Administrator\桌面\TCP远控\压缩数据_.ec
 ' 屏幕差异数据获取模块 C:\Documents and Settings\Administrator\桌面\TCP远控(配置项)\差异屏幕模块.ec
 ' 开机启动 C:\Documents and Settings\Administrator\桌面\TCP远控(远程视频)\TCP远控(远程视频)\开机启动.ec
 ' COM对象操作模块 C:\Documents and Settings\Administrator\桌面\2008\COM对象模块.ec
 ' 取变量指针模块 C:\Documents and Settings\Administrator\桌面\2008\取变量指针模块.ec


数据类型 SHFILEOPSTRUCT, 公开, 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 

数据类型 系统时间, 公开, 
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 临时总数据类型, , 
    .成员 地址, 整数型, , , 
    .成员 数据, 内存申请, , , 

数据类型 沾包头处理数据类型, , 
    .成员 地址, 整数型, , , 
    .成员 字节集, 字节集, , , 

数据类型 客户信息, 公开, 
    .成员 Socket, 整数型, , , 
    .成员 in_addr, 整数型, , , 
    .成员 IP, 文本型, , , 

数据类型 WAVEFORMATEX, , 
    .成员 格式, 短整数型, , , 
    .成员 声道, 短整数型, , , 
    .成员 采样率, 整数型, , , 
    .成员 数据量, 整数型, , , 
    .成员 对齐单位, 短整数型, , , 
    .成员 位数, 短整数型, , , 
    .成员 长度, 短整数型, , , 

数据类型 文件夹信息_, , BROWSEINFO
    .成员 窗口句柄, 整数型, , , hOwner
    .成员 根目录, 整数型, , , pidlRoot
    .成员 显示名称, 文本型, , , pszDisplayName
    .成员 标题, 文本型, , , lpszTitle
    .成员 标志, 整数型, , , ulFlags
    .成员 回调函数地址, 整数型, , , lpfn
    .成员 回调函数参数, 整数型, , , lParam
    .成员 图像索引, 整数型, , , iImage

数据类型 项目标识符列表_, , ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 WAVEHDR, , 
    .成员 缓冲指针, 整数型, , , 
    .成员 缓冲大小, 整数型, , , 
    .成员 dwBytesRecorded, 整数型, , , 
    .成员 dwUser, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 dwLoops, 整数型, , , 
    .成员 lpNext, 整数型, , , 
    .成员 Reserved, 整数型, , , 

数据类型 矩形, , 矩形;
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 重画信息, , 
    .成员 hdc, 整数型, , , 
    .成员 fErase, 逻辑型, , , 
    .成员 rcPaint, 矩形, , , 
    .成员 fRestore, 逻辑型, , , 
    .成员 fIncUpdate, 逻辑型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 OVERLAPPED, , 
    .成员 Internal, 空白型, , , 被系统内部赋值，用来表示系统状态
    .成员 InternalHigh, 空白型, , , 被系统内部赋值，传输的字节数
    .成员 Offset, 空白型, , , 和OffsetHigh合成一个64位的整数,用来表示从文件头部的多少字节开始
    .成员 OffsetHigh, 空白型, , , 操作，如果不是对文件I/O来操作，则必须设定为0
    .成员 hEvent, 空白型, , , 如果不使用，就务必设为0,否则请赋一个有效的Event句

数据类型 WSABUF, , 
    .成员 len, 空白型, , , 
    .成员 buf, 空白型, , , 

数据类型 客户端, , 
    .成员 套接口, 空白型, , , 
    .成员 是否已连接, 逻辑型, , , 
    .成员 文件句柄, 空白型, , , 
    .成员 接收大小, 空白型, , , 
    .成员 当前时间, 空白型, , , 
    .成员 文件发送大小, 长整数型, , , 
    .成员 文件已发送大小, 长整数型, , , 
    .成员 不可发送数据, 逻辑型, , , 
    .成员 IP地址, 文本型, , , 
    .成员 用户名, 文本型, , , 
    .成员 标志, 空白型, , , 
    .成员 接收连接IO操作, I0操作, , , 
    .成员 发送IO操作, I0操作, , , 
    .成员 文件发送, I0操作, , , 
    .成员 待发送数据, 字节集, , "1", 
    .成员 登陆, 逻辑型, , , 
    .成员 附加参数, 字节集, , , 

数据类型 SYSTEM_INFO, , 
    .成员 dwOemID, 空白型, , , 
    .成员 dwPageSize, 空白型, , , 
    .成员 lpMinimumApplicationAddress, 空白型, , , 
    .成员 lpMaximumApplicationAddress, 空白型, , , 
    .成员 dwActiveProcessorMask, 空白型, , , 
    .成员 dwNumberOrfProcessors, 空白型, , , 
    .成员 dwProcessorType, 空白型, , , 
    .成员 dwAllocationGranularity, 空白型, , , 
    .成员 dwReserved, 空白型, , , 

数据类型 I0操作, , 
    .成员 Internal, 空白型, , , 被系统内部赋值，用来表示系统状态
    .成员 InternalHigh, 空白型, , , 被系统内部赋值，传输的字节数
    .成员 Offset, 空白型, , , 和OffsetHigh合成一个64位的整数,用来表示从文件头部的多少字节开始
    .成员 OffsetHigh, 空白型, , , 操作，如果不是对文件I/O来操作，则必须设定为0
    .成员 hEvent, 空白型, , , 如果不使用，就务必设为0,否则请赋一个有效的Event句
    .成员 类型, 空白型, , , 
    .成员 大小, 空白型, , , 如果 类型为接受连接 大小IO操作组所在的用户组位置
    .成员 数据, 字节集, , , 
    .成员 缓冲, WSABUF, , , 

数据类型 sockt, , 
    .成员 协议类型, 短整数型, , , 
    .成员 端口, 短整数型, , , 
    .成员 IP, 空白型, , , 
    .成员 结构大小, 字节型, , "8", 

数据类型 传输项目, , 
    .成员 传送状态, 整数型, , , 0、等侍中，1、传送中，2、完成，3、暂停
    .成员 客户IP, 文本型, , , 
    .成员 客户名称, 文本型, , , 
    .成员 发送, 逻辑型, , , 
    .成员 本地路径, 文本型, , , 
    .成员 远程路径, 文本型, , , 
    .成员 文件大小, 长整数型, , , 
    .成员 已完成大小, 长整数型, , ,  
    .成员 完成百分比, 文本型, , , 
    .成员 平均速度, 整数型, , , 
    .成员 创建时间, 文本型, , , 
    .成员 完成时间, 文本型, , , 
    .成员 剩余时间, 文本型, , , 
    .成员 连接时间, 日期时间型, , , 
    .成员 状态说明, 文本型, , , 
    .成员 显示大小, 文本型, , , 
    .成员 远程IP, 文本型, , , 
    .成员 开始微秒, 整数型, , , 
    .成员 已计完成, 长整数型, , , 

.全局变量 匿名全局变量_504, 空白型, , , 
.全局变量 总数据, 临时总数据类型, , "0", 
.全局变量 TCP服务器, TCP服务器, , , 
.全局变量 分割符, 字节集, , , 10位的字节集
.全局变量 现操作地址, 空白型, , , 
.全局变量 传输端口, 空白型, , , 
.全局变量 匿名全局变量_697, 空白型, , , 
.全局变量 树型框点击值, 整数型, , , 
.全局变量 停止操作, 逻辑型, , , 
.全局变量 注册表双击, 逻辑型, , , 
.全局变量 注册表位置, 整数型, , , 
.全局变量 服务启动类型, 整数型, , , 
.全局变量 注册表功能, 整数型, , , 
.全局变量 匿名全局变量_1027, 空白型, , , 
.全局变量 多线程许可证, 整数型, , , '屏幕控制
.全局变量 匿名全局变量_1603, 空白型, , , 
.全局变量 启始, 整数型, , , 'CMD
.全局变量 匿名全局变量_2481, 空白型, , , 
.全局变量 文件读写, 文件读写, , , 
.全局变量 匿名全局变量_3254, 空白型, , , 
.全局变量 下载任务数, 空白型, , , 
.全局变量 上传任务数, 空白型, , , 
.全局变量 匿名全局变量_5269, 空白型, , , 
.全局变量 视频状态, 逻辑型, , , 
.全局变量 播放状态, 逻辑型, , , 
.全局变量 全局_声音, 字节集, , , 
.全局变量 匿名全局变量_5488, 空白型, , , 
.全局变量 发送鼠标, 逻辑型, , , 
.全局变量 颜色表_8位深, 字节集, , , 
.全局变量 发送键盘, 逻辑型, , , 
.全局变量 匿名全局变量_5489, 空白型, , , 
.全局变量 备份场景, 整数型, , , 
.全局变量 备份场景句柄, 整数型, , , 
.全局变量 图片框场景, 整数型, , , 
.全局变量 接受数据长度, 整数型, , , 
.全局变量 旧句柄, 整数型, , , 
.全局变量 匿名全局变量_5682, 空白型, , , 
.全局变量 上传_目录路径, 文本型, , , 
.全局变量 下载_目录路径, 文本型, , , 

.DLL命令 CopyFileA, 整数型, "kernel32.dll", "CopyFileA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 bFailIfExists, 整数型, , 

.DLL命令 GetTempPathA, 整数型, "kernel32.dll", "GetTempPathA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 SHFileOperationA, 整数型, "shell32.dll", "SHFileOperationA", , 
    .参数 文件参数, SHFILEOPSTRUCT, , 

.DLL命令 FormatMessageA, 整数型, "kernel32.dll", "FormatMessageA", , 
    .参数 dwFlags, 整数型, , 
    .参数 lpSource, 整数型, , Any
    .参数 消息ID, 整数型, , 
    .参数 语言ID, 整数型, , 现在系统不支持了，置0
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区大小, 整数型, , 
    .参数 Arguments, 整数型, , 

.DLL命令 GetLastError, 整数型, "kernel32.dll", "GetLastError", , 

.DLL命令 SetFilePointer, 整数型, "kernel32.dll", "SetFilePointer", , ""
    .参数 hFile, 整数型, , ""
    .参数 lDistanceToMove, 整数型, , ""
    .参数 lpDistanceToMoveHigh, 整数型, 传址, ""
    .参数 dwMoveMethod, 整数型, , ""

.DLL命令 CreateFile, 整数型, "kernel32.dll", "CreateFileA", , ""
    .参数 lpFileName, 文本型, , ""
    .参数 dwDesiredAccess, 整数型, , ""
    .参数 dwShareMode, 整数型, , ""
    .参数 lpSecurityAttributes, 整数型, , ""
    .参数 dwCreationDisposition, 整数型, , ""
    .参数 dwFlagsAndAttributes, 整数型, , ""
    .参数 hTemplateFile, 整数型, , ""

.DLL命令 SystemTimeToFileTime, 整数型, "kernel32.dll", "SystemTimeToFileTime", , 
    .参数 lpSystemTime, 系统时间, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 VariantTimeToSystemTime, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", , 
    .参数 double, 日期时间型, , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 

.DLL命令 SystemTimeToVariantTime, 整数型, "oleaut32.dll", "SystemTimeToVariantTime", , 
    .参数 LPSYSTEMTIME, 系统时间, 传址, 
    .参数 double, 日期时间型, 传址, 

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32.dll", "FileTimeToSystemTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpSystemTime, 系统时间, 传址, 

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32.dll", "FileTimeToLocalFileTime", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpLocalFileTime, FILETIME, 传址, 

.DLL命令 GetFileTime, 整数型, "kernel32.dll", "GetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 SetFileTime, 逻辑型, "kernel32.dll", "SetFileTime", , 
    .参数 hFile, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpLastAccessTime, FILETIME, 传址, 
    .参数 lpLastWriteTime, FILETIME, 传址, 

.DLL命令 LocalFileTimeToFileTime, 整数型, "kernel32.dll", "LocalFileTimeToFileTime", , 
    .参数 lpLocalFileTime, FILETIME, 传址, 
    .参数 lpFileTime, FILETIME, 传址, 

.DLL命令 SetFileAttributesA, 逻辑型, "kernel32.dll", "SetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 
    .参数 dwFileAttributes, 整数型, , 

.DLL命令 GetFileAttributesA, 整数型, "kernel32.dll", "GetFileAttributesA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 WriteFile, 逻辑型, "kernel32.dll", "WriteFile", , （非零）表示成功，否则返回零。
    .参数 文件句柄, 整数型, , hFile，一个文件的句柄
    .参数 数据缓冲区, 字节集, 传址, lpBuffer，要写入的一个数据缓冲区
    .参数 欲写入字节数量, 整数型, , nNumberOfBytesToWrite，要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 实际写入字节数量, 整数型, 传址, lpNumberOfBytesWritten，实际写入文件的字节数量
    .参数 特殊结构, 整数型, , lpOverlapped，倘若在指定FILE_FLAG_OVERLAPPED的前提下打开文件，这个参数就必须引用一个特殊的结构。那个结构定义了一次异步写操作。否则，该参数应置为空（将声明变为ByVal As Long，并传递零值）

.DLL命令 ReadFile, 整数型, "kernel32.dll", "ReadFile", , ""
    .参数 hFile, 整数型, , 文件的句柄
    .参数 lpBuffer, 字节集, 传址, 用于保存读入数据的一个缓冲区
    .参数 nNumberOfBytesToRead, 整数型, , 要读入的字符数
    .参数 lpNumberOfBytesRead, 整数型, 传址, 从文件中实际读入的字符数
    .参数 lpOverlapped, 整数型, , 如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须用这个参数引用一个特殊的结构。那个结构定义了一次异步读取操作。否则，应将这个参数设为NULL（将函数声明成ByVal As Long，并传递零值）

.DLL命令 GetFileSize, 整数型, "kernel32.dll", "GetFileSize", , 
    .参数 hFile, 整数型, , 文件号
    .参数 lpFileSizeHigh, 整数型, 传址, 

.DLL命令 CloseHandle, 整数型, "kernel32.dll", "CloseHandle", 公开, CloseHandle非零表示成功，零表示失败。
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 GetTempFileNameA, 整数型, "kernel32.dll", "GetTempFileNameA", , 
    .参数 lpszPath, 文本型, , 
    .参数 lpPrefixString, 整数型, , 
    .参数 wUnique, 整数型, , 
    .参数 lpTempFileName, 文本型, , 

.DLL命令 MoveFileExA, 逻辑型, "kernel32.dll", "MoveFileExA", , 
    .参数 lpExistingFileName, 文本型, , 
    .参数 lpNewFileName, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 DeleteFileA, 整数型, "kernel32.dll", "DeleteFileA", , 
    .参数 lpFileName, 文本型, , 

.DLL命令 浏览文件夹信息_, 整数型, "shell32.dll", "SHBrowseForFolder", , 
    .参数 lpbi, 文件夹信息_, , 

.DLL命令 从列表id取路径_, 整数型, "shell32.dll", "SHGetPathFromIDListA", , $(b)
    .参数 结构指针, 整数型, , pIdl
    .参数 路径, 文本型, 传址, pszPath

.DLL命令 取地址_, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 数据1, 字节集, , 
    .参数 数据2, 字节集, , 
    .参数 数据长度, 整数型, , 

.DLL命令 查找放音设备, 整数型, "winmm.dll", "waveOutGetNumDevs", , 

.DLL命令 打开放音设备, 整数型, "winmm.dll", "waveOutOpen", , 
    .参数 lphWaveIn, 整数型, 传址, 
    .参数 uDeviceID, 整数型, , 
    .参数 lpFormat, WAVEFORMATEX, , 
    .参数 dwCallbac, 子程序指针, , 
    .参数 dwInstance, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 关闭放音设备, 整数型, "winmm.dll", "waveOutClose", , 
    .参数 hWaveIn, 整数型, , 

.DLL命令 写入声音输出设备, 整数型, "winmm.dll", "waveOutWrite", , 
    .参数 hWaveOut, 整数型, , 
    .参数 lpWaveOutHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 暂停声音回放, 整数型, "winmm.dll", "waveOutPause", , 
    .参数 hWaveOut, 整数型, , 

.DLL命令 重开始声音回放, 整数型, "winmm.dll", "waveOutRestart", , 
    .参数 hWaveOut, 整数型, , 

.DLL命令 停止声音回放, 整数型, "winmm.dll", "waveOutReset", , 
    .参数 hWaveOut, 整数型, , 

.DLL命令 准备缓冲, 整数型, "winmm.dll", "waveOutPrepareHeader", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 清除缓冲, 整数型, "winmm.dll", "waveOutUnprepareHeader", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 增加缓冲, 整数型, "winmm.dll", "waveInAddBuffer", , 
    .参数 hWaveIn, 整数型, , 
    .参数 lpWaveInHdr, WAVEHDR, , 
    .参数 uSize, 整数型, , 

.DLL命令 发送消息, 空白型, "winmm.dll", "waveOutMessage", , 
    .参数 hWaveIn, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 dw1, 整数型, , 
    .参数 dw2, 整数型, , 

.DLL命令 关闭对象, 整数型, "kernel32", "CloseHandle", , 可关闭文件与映射
    .参数 对象句柄, 整数型, , 

.DLL命令 取错误代码, 整数型, "kernel32", "GetLastError", , 

.DLL命令 创建映射, 整数型, "kernel32", "CreateFileMappingA", , 创建文件映射对象。成功就返回文件映射对象句柄
    .参数 文件句柄, 整数型, , 欲在其中创建映射的一个已经打开的磁盘文件句柄
    .参数 安全对象, 整数型, , 通常用0表示使用默认安全对象
    .参数 映射方式, 整数型, , 打开映射的方式（用API常数表示的读/写或其它） 2表示只读，4表示可读写
    .参数 高32位, 整数型, , 表示文件映射的最大长度的高32位。通常均设为0表示磁盘文件的实际长度
    .参数 低32位, 整数型, , 表示文件映射的最大长度的低32位。通常均设为0表示磁盘文件的实际长度
    .参数 对象名字, 整数型, , 指定文件映射对象的名称

.DLL命令 映射装载, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序空间。成功就返回文件映射在内存中的起始地址
    .参数 映射句柄, 整数型, , 文件映射对象的句柄
    .参数 映射方式, 整数型, , 用API常数表示的对文件映射的访问方式 2可读可写,4只读,
    .参数 高32位, 整数型, , 表示文件中的映射起点的高32位。通常均设为0表示从文件的起始处开始映射
    .参数 低32位, 整数型, , 表示文件中的映射起点的低32位。通常均设为0表示从文件的起始处开始映射
    .参数 字节数, 整数型, , 要映射的字节数，通常设为0表示映射整个文件映射对象。

.DLL命令 映射卸载, 整数型, "kernel32.dll", "UnmapViewOfFile", , 解除当前应用程序中的一个文件映射对象的映射地址空间。非零表示成功，零表示失败
    .参数 映射地址, 整数型, , 要解除映射的文件映射起始地址。

.DLL命令 写入映射_字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 将指定字节集的全部或部分写入映射空间的指定位置
    .参数 起始位置, 整数型, , 用映射装载命令得到的
    .参数 待写入数据, 字节集, 传址, 要写入的数据，可以更改为其他类型
    .参数 数据长度, 整数型, , 要写入的数据长度，不大于实际数据长度

.DLL命令 GetInputState, 整数型, "user32", "GetInputState", , 

.DLL命令 取设备场景_, 整数型, "", "GetDC", , 获取指定窗口的设备场景　指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC; 

.DLL命令 创建内存场景_, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 释放场景, 整数型, "", "ReleaseDC", , 
    .参数 hwnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 复制场景位图_, 整数型, "", "BitBlt", , gdi32.dll将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , 目标设备场景
    .参数 目标横坐标, 整数型, , 对目标DC中目标矩形左上角位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 目标纵坐标, 整数型, , 同上
    .参数 传输图像宽度, 整数型, , 欲传输图象的宽度和高度
    .参数 传输图像高度, 整数型, , 同上
    .参数 源设备场景, 整数型, , 源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , 对源DC中源矩形左上角位置进行描述的那个点。用源DC的逻辑坐标表示
    .参数 源纵坐标, 整数型, , 同上
    .参数 光栅运算方式, 整数型, , 传输过程要执行的光栅运算;

.DLL命令 删除句柄, 逻辑型, "", "DeleteObject", , 
    .参数 GDI对象句柄, 整数型, , 

.DLL命令 删除场景, 整数型, "", "DeleteDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 选入设备场景, 整数型, "", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 obj, 整数型, , 

.DLL命令 _取指针_字节集, 整数型, "", "lstrcpyn", , 
    .参数 目的指针, 字节集, 传址, 
    .参数 源指针, 字节集, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 创建兼容位图, 整数型, "", "CreateCompatibleBitmap", , 
    .参数 hdc, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 设置窗口新特征, 整数型, "user32", "SetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 开始重画, 整数型, "", "BeginPaint", , 
    .参数 HWND, 整数型, , 
    .参数 LPPAINTSTRUCT, 重画信息, , 

.DLL命令 结束重画, 空白型, "", "EndPaint", , 
    .参数 hwnd, 整数型, , 
    .参数 lppaintstruct, 重画信息, , 

.DLL命令 消息系统回调, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 _设置窗口信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 _透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", , 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 复制位图到场景, 整数型, "gdi32", "SetDIBitsToDevice", , 将一幅与设备无关位图的全部或部分数据直接复制到一个设备。这个函数在设备中定义了一个目标矩形，以便接收位图数据。它也在DIB中定义了一个源矩形，以便从中提取数据  执行成功则返回扫描线的数量，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 一个设备场景的句柄。该场景用于接收位图数据
    .参数 x, 整数型, , 用逻辑坐标表示的目标矩形的起点
    .参数 y, 整数型, , 同上
    .参数 dx, 整数型, , 用目标矩形的设备单位表示的宽度及高度
    .参数 dy, 整数型, , 同上
    .参数 SrcX, 整数型, , 用设备坐标表示的源矩形在DIB中的起点
    .参数 SrcY, 整数型, , 同上
    .参数 Scan, 整数型, , Bits数组中第一条扫描线的编号。如BitsInfo之BITMAPINFOHEADER部分的biHeight字段是正数，那么这条扫描线就会从位图的底部开始计算；如果是负数，就从顶部开始计算
    .参数 NumScans, 整数型, , 欲复制的扫描线数量
    .参数 Bits, 字节型, 传址, 指向一个缓冲区的指针。这个缓冲区包含了以DIB格式描述的位图数据；这种格式是由BitsInfo指定的
    .参数 BitsInfo, 字节型, 传址, BITMAPINFO，对Bits DIB的格式和颜色进行描述的一个结构
    .参数 wUsage, 整数型, , 下述常数之一;DIB_PAL_COLORS：颜色表是一个整数数组，其中包含了与目前选入hdc设备场景的调色板相关的索引;DIB_RGB_COLORS：颜色表包含了RG颜色;

.DLL命令 sendto, 整数型, "wsock32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 待发送数据的缓冲区, 字节集, , 
    .参数 待发送数据的缓冲区长度, 空白型, , 
    .参数 标志位, 空白型, , 
    .参数 目的地套接字描述符, sockt, , 
    .参数 目的地套接字描述符长度, 空白型, , 

.DLL命令 inet_addr, 整数型, "wsock32.dll", "", , 把一个Internet标准的"."记号地址转换成Internet地址数值
    .参数 IP, 文本型, , 

.DLL命令 htons, 整数型, "wsock32.dll", "", , 把16位的数字从主机字节顺序转换到网络字节顺序
    .参数 主机字节, 空白型, , 

.DLL命令 WSAStartup, 整数型, "Ws2_32.dll", "", , 
    .参数 版本, 空白型, , 
    .参数 版本信息, 字节集, , 

.DLL命令 socket, 整数型, "Ws2_32.dll", "", , 
    .参数 协议类型, 空白型, , 2-表示TCP/IP协议
    .参数 套接字类型, 空白型, , 流套接字类型为1；数据报套接字2
    .参数 通信协议, 空白型, , 

.DLL命令 WSACleanup, 整数型, "Ws2_32.dll", "", , 

.DLL命令 bind, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 地址结构, sockt, , 
    .参数 结构大小, 空白型, , 

.DLL命令 recvfrom, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 接收数据缓冲区, 字节集, , 
    .参数 缓冲区长度, 空白型, , 
    .参数 操作方式, 空白型, , 
    .参数 装有源地址的缓冲区, sockt, , 
    .参数 装有源地址的缓冲区长度, 空白型, 传址, 

.DLL命令 inet_ntoa, 文本型, "Ws2_32.dll", "", , 把Internet地址数值转换成带"."的ASCII字符串
    .参数 数值IP, 空白型, , 

.DLL命令 ntohs, 整数型, "Ws2_32.dll", "ntohs", , 把16位数字从网络字节顺序转换为主机字节顺序
    .参数 网络字节, 整数型, , 

.DLL命令 WSASocketA, 整数型, "Ws2_32.dll", "", , 成功就返回新创建的套接字的描述符，如果失败就返回-1
    .参数 协议类型, 空白型, , 2-表示TCP/IP协议
    .参数 套接字类型, 空白型, , 流套接字类型为1；数据报套接字2
    .参数 通信协议, 空白型, , 
    .参数 套接口描述指针, 空白型, , 
    .参数 套接口组描述字, 空白型, , 
    .参数 套接口属性描述, 空白型, , 

.DLL命令 WSASendTo, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 待发送数据的缓冲区, 空白型, 传址 数组, 
    .参数 缓冲个数, 空白型, , 
    .参数 实际发送长度, 空白型, 传址, 
    .参数 标志位, 空白型, , 
    .参数 目的地套接字描述符, sockt, , 
    .参数 目的地套接字描述符长度, 空白型, , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 

.DLL命令 recv, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 欲接收的数据缓冲, 字节集, , 
    .参数 欲接收数据的长度, 空白型, , 
    .参数 flags, 空白型, , 一般默认为0

.DLL命令 WSACreateEvent, 整数型, "Ws2_32.dll", "", , 

.DLL命令 WSAEventSelect, 整数型, "Ws2_32.dll", "", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 
    .参数 c, 空白型, , 

.DLL命令 WSAResetEvent, 整数型, "Ws2_32.dll", "", , 
    .参数 a, 空白型, , 

.DLL命令 WSACloseEvent, 空白型, "Ws2_32.dll", "", , 
    .参数 b, 空白型, , 

.DLL命令 WSAAccept, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 套接字地址结构, sockt, , 
    .参数 套接字地址结构长度, 空白型, 传址, 
    .参数 条件函数, 空白型, , 
    .参数 回调数据, 空白型, , 

.DLL命令 listen, 整数型, "Ws2_32.dll", "", , 成功，则返回0；如果执行失败，则返回-1
    .参数 套接字描述符, 空白型, , 
    .参数 客户最大响应数, 空白型, , 

.DLL命令 WSAWaitforMultipleEvents, 整数型, "Ws2_32.dll", "", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, 传址 数组, 
    .参数 c, 逻辑型, , 
    .参数 d, 空白型, , 
    .参数 e, 空白型, , 

.DLL命令 WSAEnumNetworkEvents, 整数型, "Ws2_32.dll", "", , 
    .参数 s, 空白型, , 
    .参数 jb, 空白型, , 
    .参数 cwdm, 空白型, 传址 数组, 

.DLL命令 closesocket, 整数型, "Ws2_32.dll", "", , 成功就返回0，否则返回-1
    .参数 套接字描述符, 空白型, , 

.DLL命令 send, 整数型, "Ws2_32.dll", "", , 当调用该函数时，欲发送的数据长度参数（后面简称数据长度）先比较待数据的长度和套接字描述符的发送缓冲区的长度，如果数据长度大于描述符的发送缓冲区的长度，该函数返回-1；如果数据长度小于或者等于描述符的发送缓冲区的长度，那么send先检查协议是否正在发送描述符的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送描述符的发送缓冲中的数据或者描述符的发送缓冲中没有数据，那么send就比较描述符的发送缓冲区的剩余空间和数据长度，如果数据长度大于剩余空间大小send就一直等待协议把s的发送缓冲中的数据发送完，如果数据长度小于剩余空间大小send就仅仅把数据缓冲区中的数据复制到剩余空间里（注意并不是send把描述符的发送缓冲中的数据传到连接的另一端的，而是协议传的，send仅仅是把缓冲区中的数据copy到s的发送缓冲区的剩余空间里）。如果send函数复制数据成功，就返回实际复制的字节数，如果send在复制数据时出现错误，那么send就返回-1；如果send在等待协议传送数据时网络断开的话，那么send函数也返回-1。要注意send函数把缓冲中的数据成功复制到描述符的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个Socket函数就会返回-1。（每一个除send外的Socket函数在执行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该Socket函数就返回-1）
    .参数 套接字描述符, 空白型, , 
    .参数 欲发送的数据, 空白型, , 
    .参数 欲发送数据的长度, 空白型, , 
    .参数 flags, 空白型, , 一般默认为0

.DLL命令 setsockopt, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 定义层次, 空白型, , 
    .参数 选项, 空白型, , 
    .参数 选项值缓冲区指针, 空白型, 传址, 
    .参数 缓冲区大小指针, 空白型, 传址, 

.DLL命令 select, 整数型, "wsock32.dll", "", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 
    .参数 c, 空白型, 传址 数组, 
    .参数 d, 空白型, , 
    .参数 e, 空白型, 传址 数组, 

.DLL命令 GetCurrentThread, 整数型, "", "", , 

.DLL命令 getpeername, 空白型, "Ws2_32.dll", "getpeername", , 取客户地址
    .参数 套接字描述符, 空白型, , 
    .参数 套接字地址结构, sockt, , 
    .参数 套接字地址结构长度, 空白型, 传址, 

.DLL命令 PostQueuedCompletionStatus, 空白型, "", "", , 
    .参数 CompletionPort, 空白型, , 
    .参数 dwNumberOfBytesTransferred, 空白型, 传址, 
    .参数 dwCompletionKey, 空白型, , 
    .参数 lpOverlapped, OVERLAPPED, , 

.DLL命令 GetSystemInfo, 整数型, "", "", , 
    .参数 系统信息, SYSTEM_INFO, , 

.DLL命令 CreateIoCompletionPort, 整数型, "", "", , 
    .参数 FileHandle, 空白型, , 
    .参数 ExistingCompletionPort, 空白型, , 
    .参数 CompletionKey, 空白型, , 
    .参数 NumberOfConcurrentThreads, 空白型, , 

.DLL命令 WSAIoctl, 整数型, "Ws2_32.dll", "", , 
    .参数 套接口, 空白型, , 
    .参数 信息, 空白型, , 
    .参数 s, 字节集, , 
    .参数 scb, 空白型, , 
    .参数 scc, 空白型, 传址, 
    .参数 dd, 空白型, , 
    .参数 sccb, 空白型, 传址, 
    .参数 b, 空白型, , 
    .参数 n, 空白型, , 

.DLL命令 WSAGetLastError, 整数型, "Ws2_32.dll", "", , 

.DLL命令 CreateThread, 整数型, "", "CreateThread", , 句柄
    .参数 安全, 空白型, , 
    .参数 栈大小, 整数型, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 线程ID, 整数型, 传址, 

.DLL命令 GetQueuedCompletionStatus, 整数型, "", "", , 
    .参数 CompletionPort, 空白型, , 
    .参数 lpNumberOfBytesTransferred, 空白型, 传址, 
    .参数 lpCompletionKey, 空白型, , 
    .参数 lpOverlapped, 空白型, 传址, 
    .参数 dwMilliseconds, 空白型, , 

.DLL命令 WSARecv, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 接收缓冲, WSABUF, , 
    .参数 缓冲数, 空白型, , 
    .参数 接收大小, 空白型, 传址, 
    .参数 FLAG, 空白型, , 
    .参数 重叠结构, 空白型, , 
    .参数 完成例程, 空白型, , 

.DLL命令 WSASend, 整数型, "Ws2_32.dll", "", , 
    .参数 套接字描述符, 空白型, , 
    .参数 发送缓冲, WSABUF, , 
    .参数 缓冲数, 空白型, , 
    .参数 发送大小, 空白型, 传址, 
    .参数 FLAG, 空白型, , 
    .参数 重叠结构, 空白型, , 
    .参数 完成例程, 空白型, , 

.DLL命令 CloseHandle, 整数型, "", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 GetCurrentProcessId, 整数型, "", "GetCurrentProcessId", 公开, 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", 公开, 
    .参数 hinst, 整数型, , 
    .参数 函数过程名, 文本型, , 

.DLL命令 GetModuleHandle, 整数型, "", "GetModuleHandleA", 公开, 
    .参数 lpModuleName, 文本型, , 

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 
    .参数 c, 整数型, , 

.DLL命令 LoadLibrary, 整数型, "", "LoadLibraryA", 公开, 载入指定的动态链接库，并将它映射到当前进程使用的地址空间。一旦载入，即可访问库内保存的资源
    .参数 lpLibFileName, 文本型, , 指定要载入的动态链接库的名称

.DLL命令 FreeLibrary, 整数型, "", "FreeLibrary", 公开, 
    .参数 DLL句柄, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "", "WriteProcessMemory", 公开, 
    .参数 要写进程的句柄, 整数型, , 
    .参数 写内存的起始地址, 整数型, , 
    .参数 写入数据的地址, 整数型, , 
    .参数 要写的字节数, 整数型, , 
    .参数 实际写入的子节数, 整数型, 传址, 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", 公开, 
    .参数 要读进程的句柄, 整数型, , 
    .参数 读内存的起始地址, 整数型, , 
    .参数 读入数据的地址, 整数型, , 
    .参数 要读入的字节数, 整数型, , 
    .参数 实际读入的子节数, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "", "VirtualAllocEx", 公开, 
    .参数 目标进程的句柄, 整数型, , 
    .参数 分配的起始地址, 整数型, , 
    .参数 分配空间的大小, 整数型, , byte
    .参数 分配的类型, 整数型, , 
    .参数 读写的保护模式, 整数型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "", "GetWindowThreadProcessId", 公开, 
    .参数 xc, 整数型, , 
    .参数 jb, 整数型, 传址, 

.DLL命令 VirtualProtectEx, 整数型, "", "VirtualProtectEx", 公开, 
    .参数 要修改内存的进程句柄, 整数型, , 
    .参数 要修改内存的起始地址, 整数型, , 
    .参数 修改内存的字节, 整数型, , 
    .参数 修改后的内存属性, 整数型, , 
    .参数 修改前的内存属性的地址, 整数型, , 

.DLL命令 CreateDirectoryA, 逻辑型, "kernel32.dll", "CreateDirectoryA", , 
    .参数 lpPathName, 文本型, , 
    .参数 lpSecurityAttributes, 整数型, , 

.窗口程序集 启动窗口程序集, , , 

.程序集变量 复制文件a, 文本型, , , 
.程序集变量 是否复制, 逻辑型, , , 
.程序集变量 上传_文件名, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 　　开放源代码的定义由Bruce Perens（曾是Debian的创始人之一）定义如下： 　　自由再散布（Free Distribution）：获得源代码的人可自由再将此源代码散布。源代码（Source Code）：程式的可执行档在散布时，必需随附完整源代码或是可让人方便的事后取得源代码。衍生著作（Derived Works）：让人可依此源代码修改后，在依照同一授权条款的情形下再散布。原创作者程式源代码的完整性（Integrity of The Author’s Source Code）：意即修改后的版本，需以不同的版本号码以与原始的程式码做分别，保障原始的程式码完整性。不得对任何人或团体有差别待遇（No Discrimination Against Persons or Groups）：开放源代码软件不得因性别、团体、国家、族群等设定限制，但若是因为法律规定的情形则为例外（如：美国政府限制高加密软件的出口）。对程式在任何领域内的利用不得有差别待遇（No Discrimination Against Fields of Endeavor）：意即不得限制商业使用。散布授权条款（Distribution of License）：若软件再散布，必需以同一条款散布之。授权条款不得专属于特定产品（License Must Not Be Specific to a Product）：若多个程式组合成一套软件，则当某一开放源代码的程式单独散布时，也必需要符合开放源代码的条件。授权条款不得限制其他软件（License Must Not Restrict Other Software）：当某一开放源代码软件与其他非开放源代码软件一起散布时（例如放在同一光碟片），不得限制其他软件的授权条件也要遵照开放源代码的授权。授权条款必须技术中立（License Must Be Technology-Neutral）：意即授权条款不得限制为电子格式才有效，若是纸本的授权条款也应视为有效。
 ' PS 如果您修改本源，不管是商业化否，请开源，或禁止使用。
 ' 看到本段文字时，表示已无条件接受或请立即删除。
-1.加入项目 (相加 (“符合条件主机(”, 到文本 (0), “)”), 55, , , , )
 ' 上线树型框.加入项目 (-1, “自动上线主机(” ＋ 到文本 (0) ＋ “)”, 2, , , , )
_启动窗口.置文本 (., 0, 相加 (“连接总数：”, 到文本 (0)))
初始化子程序 ()

.子程序 _上线树型框_项目被选择, 空白型, , 
.参数 选择方式, 整数型, , 

.局部变量 计次, 空白型, , , 

.如果真 (等于 (.取项目数值 (.最大化按钮), 0))
    返回 ()
.如果真结束

.如果真 (不等于 (.取项目文本 (.最大化按钮), 0.取标题 (1)))
    .如果真 (不等于 (1.取标题 (1), “”))
        .计次循环首 (20, 计次)
            _启动窗口.置标题 (., 计次, 1, “”)
        .计次循环尾 ()
    .如果真结束
    
.如果真结束

赋值 (现操作地址, .取项目数值 (.最大化按钮))
0.置标题 (1, .取项目文本 (.最大化按钮))
 ' 状态条1.置文本 (1, 上线树型框.取项目文本 (上线树型框.现行选中项))
赋值 (., 假)
赋值 (., 真)

传送数据子程序 (现操作地址, 相加 ({ 3 }, 到字节集 (现操作地址)))

.子程序 _文件框_即将扩展, 逻辑型, , 
.参数 项目索引, 整数型, , 

.局部变量 容器1, 整数型, , , 
.局部变量 目录名, 文本型, , , 


.如果真 (等于 (项目索引, 0))
    返回 ()
.如果真结束
处理事件 ()
赋值 (树型框点击值, 项目索引)
.如果真 (等于 (相加 (项目索引, 1).取项目文本 (), “正在读取，请稍后！”))
    赋值 (.最大化按钮, 项目索引)
    _文件框_双击项目 ()
.如果真结束


.子程序 _文件框_双击项目, 空白型, , 
.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 目录名, 文本型, , , 
.局部变量 磁盘符, 文本型, , , 
.局部变量 项目索引, 整数型, , , 

处理事件 ()
赋值 (项目索引, .最大化按钮)
赋值 (树型框点击值, 项目索引)
处理事件 ()
.如果真 (等于 (.取图片 (.最大化按钮), 0))
    返回 ()
.如果真结束
.如果真 (小于或等于 (.取图片 (.最大化按钮), 6))
    赋值 (.标题, .取项目文本 (.最大化按钮))
.如果真结束
.如果真 (大于或等于 (.取图片 (.最大化按钮), 7))
    赋值 (.标题, 相加 (获取树形框目录名 (.最大化按钮), “\”))
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 9 }, 到字节集 (.标题)))
1.置文本 (.标题)
全部删除 ()


.子程序 获取树形框目录名, 文本型, , 
.参数 索引, 整数型, , 

.局部变量 记次, 整数型, , , 
.局部变量 值, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (值, 索引)
.计次循环首 (索引.取缩进层次 (), 记次)
    .如果真 (等于 (值.取项目数值 (), 1))
        .如果 (不等于 (取文本右边 (值.取项目文本 (), 1), “\”))
            赋值 (文本, 相加 (值.取项目文本 (), “\”, 文本))
        .否则
            赋值 (文本, 相加 (值.取项目文本 (), 文本))
        .如果结束
        赋值 (值, 值.取父项目 ())
    .如果真结束
    
.计次循环尾 ()

.判断开始 (等于 (取文本右边 (文本, 1), “\”))
    赋值 (文本, 取文本左边 (文本, 相减 (取文本长度 (文本), 1)))
.默认
    
.判断结束
返回 (文本)

.子程序 _文件列_表项被激活, 空白型, , 
.局部变量 文件名, 文本型, , , 
.局部变量 变量i, 空白型, , , 
.局部变量 层次, 空白型, , , 

.如果真 (或者 (等于 (.取图片 (., ), 0), 小于 (取文本长度 (.取标题 (., 0)), 4)))
    .如果真 (等于 (.取标题 (., 0), “返回上一级”))
        _返回向上一级_被选择 ()
        返回 ()
    .如果真结束
    赋值 (文件名, 相加 (.标题, .取标题 (., 0)))
    .判断开始 (不等于 (取文本右边 (.标题, 1), “\”))
        赋值 (.标题, 相加 (.标题, “\”, .取标题 (., ), “\”))
    .默认
        赋值 (.标题, 相加 (.标题, .取标题 (., ), “\”))
    .判断结束
    
    .变量循环首 (相加 (.最大化按钮, 1), 取项目数 (), 1, 变量i)
        .如果真 (等于 (变量i.取项目文本 (), .取标题 (., 0)))
            赋值 (.最大化按钮, 变量i)
            _文件框_双击项目 ()
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    
.如果真结束
.如果真 (变量i.是否已扩展 ())
    返回 ()
.如果真结束
变量i.扩展 ()


.子程序 _进程刷新_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 1 }))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _进程关闭_被单击, 空白型, , 
.局部变量 id, 整数型, , , 

.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 2 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口刷新_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 3 }))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口关闭_被单击, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 4 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口最小化_被单击, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 5 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口最大化_被单击, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 6 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口显示_被单击, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 7 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _窗口隐藏_被单击, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 5 }, { 8 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _注册框_即将扩展, 逻辑型, , 
.参数 项目索引, 整数型, , 

.局部变量 父项目数值, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 信息, 文本型, , , 
.局部变量 信息2, 文本型, , , 

.如果真 (等于 (注册表双击, 真))
    返回 ()
.如果真结束
.如果真 (不等于 (相加 (项目索引, 1).取项目文本 (), “正在读取，请稍后！”))
    返回 ()
.如果真结束
.如果真 (小于 (项目索引.取父项目 (), 0))
    返回 ()
.如果真结束
赋值 (注册表位置, 项目索引)
赋值 (父项目数值, 项目索引)
赋值 (信息, “”)
赋值 (容器1, 父项目数值.取项目数值 ())
.判断循环首 (等于 (容器1, 0))
    赋值 (信息, 相加 (父项目数值.取项目文本 (), “\”, 信息))
    赋值 (父项目数值, 父项目数值.取父项目 ())
    赋值 (容器1, 父项目数值.取项目数值 ())
.判断循环尾 ()
.如果真 (不等于 (取文本右边 (信息, 1), “\”))
    赋值 (信息, 相加 (信息, “\”))
.如果真结束
.如果真 (不等于 (取文本左边 (信息, 1), “\”))
    赋值 (信息, 相加 (“\”, 信息))
.如果真结束
赋值 (.标题, 相加 (父项目数值.取项目文本 (), “\”, 信息))
赋值 (注册表双击, 假)
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 1 }, 到字节集 (相加 (到文本 (父项目数值.取项目数值 ()), 信息))))
 ' 控制服务器发送数据 (“注册表@1” ＋ 到文本 (注册框.取项目数值 (父项目数值)) ＋ 信息 ＋ “@”)

.子程序 _注册框_双击项目, 空白型, , 
.局部变量 父项目数值, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 信息, 文本型, , , 

赋值 (注册表双击, 真)
赋值 (父项目数值, .最大化按钮)
赋值 (注册表位置, .最大化按钮)
.如果真 (小于 (父项目数值.取父项目 (), 0))
    返回 ()
.如果真结束
赋值 (信息, “”)
赋值 (容器1, 父项目数值.取项目数值 ())
.判断循环首 (等于 (容器1, 0))
    赋值 (信息, 相加 (父项目数值.取项目文本 (), “\”, 信息))
    赋值 (父项目数值, 父项目数值.取父项目 ())
    赋值 (容器1, 父项目数值.取项目数值 ())
.判断循环尾 ()
赋值 (.标题, 相加 (父项目数值.取项目文本 (), “\”, 信息))
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 1 }, 到字节集 (相加 (到文本 (父项目数值.取项目数值 ()), 信息))))
 ' 控制服务器发送数据 (“注册表@1” ＋ 到文本 (注册框.取项目数值 (父项目数值)) ＋ 信息 ＋ “@”)

.子程序 _服务刷新_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 7 }, { 1 }))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _服务删除_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 7 }, { 6 }, 到字节集 (.取标题 (., 1))))
_启动窗口.加入文本 (., 相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符))

.子程序 _超级列表框1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.取标题 (., 1), “”))
     ' 选择夹2.禁止 ＝ 真
    赋值 (.内容, .取标题 (., 1))
    赋值 (.内容, .取标题 (., 0))
    赋值 (.内容, .取标题 (., 2))
    赋值 (服务启动类型, .取标题 (., 4).选择 ())
    赋值 (.内容, “”)
    赋值 (.内容, “正在读取远程数据......”)
    赋值 (.禁止, 真)
    赋值 (., 真)
    赋值 (., 真)
    赋值 (.可视, 真)
    赋值 (.标题, 到文本 (.))
    传送数据子程序 (现操作地址, 相加 ({ 7 }, { 2 }, 到字节集 (.取标题 (., 1))))
     ' 控制服务器发送数据 (“进程窗口@d” ＋ 超级列表框1.取标题 (超级列表框1.现行选中项, 1) ＋ “@ddd@”)
    赋值 (.时钟周期, 120000)
.如果真结束


.子程序 _时钟3_周期事件, 空白型, , 
赋值 (.时钟周期, 0)
赋值 (.可视, 假)

.子程序 _服务取消_被单击, 空白型, , 
 ' 选择夹2.禁止 ＝ 假
赋值 (.时钟周期, 0)
赋值 (.可视, 假)

.子程序 _服务确定_被单击, 空白型, , 
.如果真 (不等于 (服务启动类型, .现行选中项))
     ' 更新
    传送数据子程序 (现操作地址, 相加 ({ 7 }, { 5 }, 到字节集 (相加 (.内容, 到文本 (相加 (.现行选中项, 2))))))
     ' 控制服务器发送数据 (“进程窗口@g” ＋ 服务名称.内容 ＋ 到文本 (服务启动类型a.现行选中项 ＋ 2) ＋ “@ddd@”)
.如果真结束
_服务取消_被单击 ()

.子程序 _服务启动_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 7 }, { 3 }, 到字节集 (.内容)))
 ' 控制服务器发送数据 (“进程窗口@e” ＋ 服务名称.内容 ＋ “@ddd@”)

.子程序 _服务停止_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 7 }, { 4 }, 到字节集 (.内容)))
 ' 控制服务器发送数据 (“进程窗口@f” ＋ 服务名称.内容 ＋ “@ddd@”)


.子程序 _注册启动刷新_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 5 }))

.子程序 _注册卸载刷新_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 6 }))

.子程序 注册启动列表加入, 空白型, , 
.参数 信息, 文本型, , 

.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 容器3, 整数型, , , 
.局部变量 剩余信息, 文本型, , , 
.局部变量 本次信息, 文本型, , , 

全部删除 ()
赋值 (容器, 寻找文本 (信息, “к”, , 假))
赋值 (容器1, 到数值 (取文本左边 (信息, 相减 (容器, 1))))
 ' 状态条置文本 (“远程注册启动共有: ” ＋ 到文本 (容器1) ＋ “ 个表项”)
赋值 (剩余信息, 取文本右边 (信息, 相减 (取文本长度 (信息), 容器, 1)))
.计次循环首 (容器1, )
    赋值 (容器2, 寻找文本 (剩余信息, “к”, , 假))
    赋值 (本次信息, 取文本左边 (剩余信息, 相减 (容器2, 1)))
    赋值 (容器, 寻找文本 (本次信息, “ё”, , 假))
    .如果 (等于 (取文本左边 (本次信息, 1), “0”))
        赋值 (容器3, .插入表项 (“HKEY_LOCAL_MACHINE”, , , , 0))
    .否则
        赋值 (容器3, .插入表项 (“HKEY_CURRENT_USER”, , , , 1))
    .如果结束
    容器3.置标题 (1, 取文本中间 (本次信息, 2, 相减 (容器, 2)))
    容器3.置标题 (2, 取文本右边 (本次信息, 相减 (取文本长度 (本次信息), 容器, 1)))
    赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器2, 1)))
.计次循环尾 ()


.子程序 _注册启动列表_左键单击表项, 空白型, , 
.局部变量 d, 整数型, , , 

赋值 (d, .)
.如果真 (等于 (d.取标题 (0), “”))
    返回 ()
.如果真结束
赋值 (.现行选中项, d.取表项数值 ())
赋值 (.内容, d.取标题 (1))
赋值 (.内容, d.取标题 (2))


.子程序 _注册启动添加_被单击, 空白型, , 
赋值 (.禁止, 假)
赋值 (.标题, “添加启动表项”)
赋值 (.禁止, 假)
赋值 (.输入方式, 0)
赋值 (.现行选中项, 0)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.禁止, 假)
赋值 (.字体名称, 真)
赋值 (.禁止, 真)
赋值 (.标题, “1”)
获取焦点 ()

.子程序 _注册启动取消_被单击, 空白型, , 
赋值 (.禁止, 真)
赋值 (.标题, “”)
赋值 (.标题, “”)
赋值 (.标题, “选中表项”)
赋值 (.字体名称, 假)
赋值 (.禁止, 假)

.子程序 _注册启动修改_被单击, 空白型, , 
.局部变量 d, 整数型, , , 

赋值 (d, .)
.如果真 (等于 (d.取标题 (0), “”))
    返回 ()
.如果真结束
赋值 (.现行选中项, d.取表项数值 ())
赋值 (.内容, d.取标题 (1))
赋值 (.内容, d.取标题 (2))
赋值 (.禁止, 假)
赋值 (.标题, “修改启动表项数值”)
赋值 (.禁止, 真)
赋值 (.输入方式, 1)
赋值 (.禁止, 假)
赋值 (.字体名称, 真)
赋值 (.禁止, 真)
赋值 (.标题, “2”)


.子程序 _注册启动刷新3_被单击, 空白型, , 
.局部变量 d, 整数型, , , 

赋值 (d, .)
.如果真 (等于 (d.取标题 (0), “”))
    返回 ()
.如果真结束
赋值 (.现行选中项, d.取表项数值 ())
赋值 (.内容, d.取标题 (1))
赋值 (.标题, .内容)
赋值 (.内容, d.取标题 (2))
赋值 (.禁止, 假)
赋值 (.标题, “修改启动表项名称”)
赋值 (.禁止, 真)
赋值 (.输入方式, 0)
赋值 (.禁止, 真)
赋值 (.字体名称, 真)
赋值 (.禁止, 真)
赋值 (.标题, “3”)


.子程序 _注册启动保存_被单击, 空白型, , 
.局部变量 f, 文本型, , , 

赋值 (f, “Software\Microsoft\Windows\CurrentVersion\Run\”)
.如果真 (等于 (.标题, “1”)) ' 添加
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 2 }, 到字节集 (相加 (到文本 (.取项目数值 (.现行选中项)), “|”, f, .内容, “|”, .内容))))
.如果真结束
.如果真 (等于 (.标题, “2”)) ' 添加
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 2 }, 到字节集 (相加 (到文本 (.取项目数值 (.现行选中项)), “|”, f, .内容, “|”, .内容))))
.如果真结束
.如果真 (等于 (.标题, “3”)) ' 添加
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 3 }, 到字节集 (相加 (到文本 (.取项目数值 (.现行选中项)), “|”, f, “|”, f, .内容, “|”, .标题))))
.如果真结束
_注册启动取消_被单击 ()

.子程序 _注册启动刷新2_被单击, 空白型, , 
.局部变量 d, 整数型, , , 

赋值 (d, .)
.如果真 (等于 (d.取标题 (1), “”))
    返回 ()
.如果真结束
赋值 (.现行选中项, d.取表项数值 ())
赋值 (.内容, d.取标题 (1))
赋值 (.内容, d.取标题 (2))
.如果真 (不等于 (信息框 (相加 (“你确定要删除 ”, .内容, “ 表项吗？”), 36, “删除程序”), #是钮))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 4 }, 到字节集 (相加 (到文本 (.取项目数值 (.现行选中项)), “|”, “Software\Microsoft\Windows\CurrentVersion\Run\”, “|”, .内容))))

.子程序 _注册列_右键单击表项, 空白型, , 
.如果真 (并且 (不等于 (.标题, “”), 不等于 (取表项数 (), 0)))
    .如果 (并且 (不等于 (.取标题 (., 0), “”), 不等于 (.取标题 (., 0), “(默认)”)))
        .如果 (小于 (.取表项数值 (.), 3))
            赋值 (.禁止, 假)
            赋值 (.禁止, 假)
        .否则
            赋值 (.禁止, 真)
            赋值 (.禁止, 真)
        .如果结束
        赋值 (.禁止, 假)
    .否则
        赋值 (.禁止, 真)
        赋值 (.禁止, 真)
        赋值 (.禁止, 真)
    .如果结束
    弹出菜单 ()
    
.如果真结束


.子程序 _新建字串值_被选择, 空白型, , 
赋值 (注册表功能, 1)
载入 (窗口4, , 真)

.子程序 返回名称, 文本型, , 
.参数 名称2, 文本型, , 

.局部变量 容器, 字节型, , , 
.局部变量 类型, 文本型, , , 
.局部变量 qt, 文本型, , , 

赋值 (容器, 寻找文本 (名称2, “\”, , 假))
赋值 (类型, 取文本左边 (名称2, 相减 (容器, 1)))
赋值 (qt, 取文本右边 (名称2, 相减 (取文本长度 (名称2), 容器)))
.如果真 (等于 (类型, “HKEY_CURRENT_CONFIG”))
    返回 (相加 (“2”, qt))
.如果真结束
.如果真 (等于 (类型, “HKEY_CURRENT_USER”))
    返回 (相加 (“3”, qt))
.如果真结束
.如果真 (等于 (类型, “HKEY_LOCAL_MACHINE”))
    返回 (相加 (“4”, qt))
.如果真结束
.如果真 (等于 (类型, “HKEY_USERS”))
    返回 (相加 (“5”, qt))
.如果真结束
返回 (“”)

.子程序 _修改_被选择, 空白型, , 
赋值 (注册表功能, 2)
赋值 (.标题, .取标题 (., 0))
赋值 (.标题, .取标题 (., 2))
载入 (窗口4, , 真)


.子程序 _重名命_被选择, 空白型, , 
赋值 (注册表功能, 3)
赋值 (.标题, .取标题 (., 0))
赋值 (.标题, .取标题 (., 2))
载入 (窗口4, , 真)


.子程序 _删除注册项_被选择, 空白型, , 
.局部变量 d, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 传输信息, 文本型, , , 
.局部变量 a, 文本型, , , 

赋值 (d, .)
.如果真 (等于 (d.取标题 (0), “”))
    返回 ()
.如果真结束
.如果真 (不等于 (信息框 (相加 (“你确定要删除 ”, d.取标题 (0), “ 表项吗？”), 36, “删除程序”), #是钮))
    返回 ()
.如果真结束
赋值 (传输信息, .标题)
赋值 (容器1, 寻找文本 (传输信息, “\”, 2, 假))
赋值 (a, 根名转根值 (取文本左边 (传输信息, 相减 (容器1, 1))))
赋值 (传输信息, 取文本右边 (传输信息, 相减 (取文本长度 (传输信息), 容器1)))
.如果真 (或者 (等于 (传输信息, “\”), 等于 (传输信息, “”)))
    赋值 (传输信息, “”)
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 6 }, { 4 }, 到字节集 (到文本 (相加 (a, “|”, 传输信息, “|”, d.取标题 (0))))))
 ' 控制服务器发送数据 (“注册表@4” ＋  ＋ “|111@”)

.子程序 根名转根值, 文本型, , 
.参数 根名, 文本型, , 

.如果真 (等于 (根名, “HKEY_LOCAL_MACHINE”))
    返回 (“4”)
.如果真结束
.如果真 (等于 (根名, “HKEY_CURRENT_USER”))
    返回 (“3”)
.如果真结束
.如果真 (等于 (根名, “HKEY_CURRENT_CONFIG”))
    返回 (“2”)
.如果真结束
.如果真 (等于 (根名, “HKEY_CLASSES_ROOT”))
    返回 (“1”)
.如果真结束
.如果真 (等于 (根名, “HKEY_USERS”))
    返回 (“5”)
.如果真结束
返回 (“2”)

.子程序 _工具条1_被单击, 空白型, , 
.参数 按钮索引, 整数型, , 

 ' 输出调试文本 (按钮索引)
.判断开始 (等于 (按钮索引, 0))
    载入 (_自动上线, , 假)
.判断 (等于 (按钮索引, 2))
    .如果 (不等于 (.取项目数值 (.最大化按钮), 0))
        载入 (_远程屏幕窗口, , 假)
    .否则
        _启动窗口.加入文本 (., 相加 (“您没有连接任何远程主机！  ”, 时间运算 (), #换行符))
    .如果结束
    
.判断 (等于 (按钮索引, 4))
    .如果 (不等于 (.取项目数值 (.最大化按钮), 0))
        载入 (_远程视频窗口, , 假)
    .否则
        _启动窗口.加入文本 (., 相加 (“您没有连接任何远程主机！  ”, 时间运算 (), #换行符))
    .如果结束
    
.判断 (等于 (按钮索引, 6))
    .如果 (不等于 (.取项目数值 (.最大化按钮), 0))
        载入 (_TELNET, , 假)
    .否则
        _启动窗口.加入文本 (., 相加 (“您没有连接任何远程主机！  ”, 时间运算 (), #换行符))
    .如果结束
    
.判断 (等于 (按钮索引, 8))
    载入 (配置服务端窗口, , 假)
.判断 (等于 (按钮索引, 10))
    赋值 (_启动窗口., 假)
    置托盘图标 (#托盘, _启动窗口.)
.判断 (等于 (按钮索引, 12))
    _关于_被选择 ()
.判断 (等于 (按钮索引, 14))
    结束 ()
.默认
    
.判断结束


.子程序 __启动窗口_托盘事件, 空白型, , 
.参数 操作类型, 整数型, , 

.判断开始 (等于 (操作类型, 1))
    _程序显示_被选择 ()
.判断 (等于 (操作类型, 3))
    弹出菜单 ()
    
.默认
    
.判断结束


.子程序 _关于_被选择, 空白型, , 
载入 (关于窗口, , 假)
 ' 打开指定网址 (“http://wtqq.net”)

.子程序 _程序显示_被选择, 空白型, , 
赋值 (., 0)
赋值 (., 真)
赋值 (., 真)
置托盘图标 ()

.子程序 _托盘状态_被选择, 空白型, , 
赋值 (., 假)
赋值 (., 假)

.子程序 _程序退出_被选择, 空白型, , 
.如果真 (等于 (信息框 (“确定要退出程序吗?　　　”, 相加 (48, 1), “退出程序：”), 0))
    销毁 ()
.如果真结束


.子程序 _文件列_右键单击表项, 空白型, , 
.如果真 (或者 (等于 (.标题, “”), 等于 (.取标题 (., 0), “返回上一级”)))
    返回 ()
.如果真结束
.如果 (等于 (.取标题 (., 1), “文件夹”))
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
.否则
    赋值 (.禁止, 真)
.如果结束
.如果 (等于 (.取标题 (., 3), “”))
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
.否则
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
.如果结束
.如果 (等于 (.取标题 (., 0), “”))
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    .如果 (等于 (复制文件a, “”))
        赋值 (.禁止, 真)
    .否则
        赋值 (.禁止, 假)
    .如果结束
    
.否则
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.禁止, 真)
    赋值 (.禁止, 假)
.如果结束

弹出菜单 ()


.子程序 _刷新文件夹_被选择, 空白型, , 
 ' _文件框_双击项目 ()
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 9 }, 到字节集 (.标题)))
1.置文本 (相加 (“正在读取：”, .标题))

.子程序 _返回向上一级_被选择, 空白型, , 
.如果真 (小于 (取文本长度 (.标题), 4))
    传送数据子程序 (现操作地址, 相加 ({ 3 }, 到字节集 (现操作地址)))
    返回 ()
.如果真结束
赋值 (.最大化按钮, .取父项目 (.最大化按钮))
_文件框_双击项目 ()

.子程序 _运行_被选择, 空白型, , 
载入 (窗口1, _启动窗口, 假)
赋值 (窗口1..标题, 相加 (.标题, .取标题 (., 0)))

.子程序 _新建文件_被选择, 空白型, , 
.局部变量 变量1, 文本型, , , 

.如果真 (输入框 (“请输入要新建的文件名”, “新建文件”, , 变量1, ))
    .如果真 (等于 (变量1, “”))
        信息框 (“文件名不能为空！”, 0, )
        返回 ()
    .如果真结束
    文件列表是否存在 (假, 变量1)
.如果真结束


.子程序 文件列表是否存在, 空白型, , 
.参数 类型, 逻辑型, , 
.参数 文件名1, 文本型, , 

.局部变量 s, 整数型, , , 

赋值 (s, 0)
.如果 (等于 (类型, 真))
    .计次循环首 (相减 (取表项数 (), 1), s)
        .如果 (等于 (s.取标题 (1), “文件夹”))
            .如果真 (等于 (s.取标题 (0), 文件名1))
                信息框 (“文件名已经存在！”, 0, )
                返回 ()
            .如果真结束
            
        .否则
            跳出循环 ()
        .如果结束
        
    .计次循环尾 ()
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 5 }, 到字节集 (到文本 (相加 (.标题, 文件名1)))))
     ' 控制服务器发送数据 (“文件操作@5” ＋ 标签12.标题 ＋ 文件名1 ＋ “@”)
.否则
    .计次循环首 (相减 (取表项数 (), 1), s)
        .如果真 (并且 (等于 (s.取标题 (0), 文件名1), 不等于 (s.取标题 (1), “文件夹”)))
            信息框 (“文件名已经存在！”, 0, )
            返回 ()
        .如果真结束
        
    .计次循环尾 ()
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 2 }, 到字节集 (到文本 (相加 (.标题, 文件名1)))))
     ' 控制服务器发送数据 (“文件操作@2” ＋ 标签12.标题 ＋ 文件名1 ＋ “@”)
    
.如果结束


.子程序 _新建文件夹_被选择, 空白型, , 
.局部变量 变量1, 文本型, , , 

.如果真 (输入框 (“请输入要新建的文件夹名”, “新建文件夹”, , 变量1, ))
    .如果真 (等于 (变量1, “”))
        信息框 (“文件夹名不能为空！”, 0, )
        返回 ()
    .如果真结束
    文件列表是否存在 (真, 变量1)
.如果真结束


.子程序 _删除_被选择, 空白型, , 
.如果真 (不等于 (信息框 (相加 (“您确定要删除：”, .取标题 (., 0)), 36, “删除文件”), #是钮))
    返回 ()
.如果真结束
.如果 (等于 (.取标题 (., 1), “文件夹”))
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 4 }, 到字节集 (到文本 (相加 (.标题, .取标题 (., 0))))))
.否则
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 6 }, 到字节集 (到文本 (相加 (.标题, .取标题 (., 0))))))
.如果结束


.子程序 _复制_被选择, 空白型, , 
.如果真 (等于 (.取标题 (., 0), “”))
    返回 ()
.如果真结束
赋值 (复制文件a, 相加 (.标题, .取标题 (., 0)))
赋值 (是否复制, 真)

.子程序 _剪贴_被选择, 空白型, , 
.如果真 (等于 (.取标题 (., 0), “”))
    返回 ()
.如果真结束
赋值 (复制文件a, 相加 (.标题, .取标题 (., 0)))
赋值 (是否复制, 假)

.子程序 _粘贴_被选择, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 短文件名, 文本型, , , 

.如果真 (等于 (复制文件a, “”))
    返回 ()
.如果真结束
赋值 (i, 倒找文本 (复制文件a, “\”, , 真))
.如果真 (小于或等于 (i, 1))
    返回 ()
.如果真结束
赋值 (短文件名, 取文本中间 (复制文件a, 相加 (i, 1), 相减 (取文本长度 (复制文件a), i)))
.如果真 (等于 (复制文件a, 相加 (.标题, 短文件名)))
    返回 ()
.如果真结束
.如果 (等于 (是否复制, 真))
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 7 }, 到字节集 (到文本 (相加 (复制文件a, “|”, .标题, 短文件名)))))
.否则
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 8 }, 到字节集 (到文本 (相加 (复制文件a, “|”, .标题, 短文件名)))))
.如果结束
赋值 (复制文件a, “”)

.子程序 _重命名_被选择, 空白型, , 
.局部变量 变量1, 文本型, , , 

.如果真 (等于 (.取标题 (., 0), “”))
    返回 ()
.如果真结束
.如果真 (输入框 (“请输入重命名”, “文件重命名”, .取标题 (., 0), 变量1, ))
    .如果真 (等于 (变量1, “”))
        信息框 (“文件名不能为空！”, 0, )
        返回 ()
    .如果真结束
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 3 }, 到字节集 (到文本 (相加 (.标题, .取标题 (., 0), “|”, .标题, 变量1)))))
.如果真结束


.子程序 _上传文件_被选择, 空白型, , 
.局部变量 发送文件名, 文本型, , , 
.局部变量 远程保存名, 文本型, , , 
.局部变量 文件大小, 长整数型, , , 
.局部变量 客户信息, 客户信息, , , 

赋值 (.标题, “请选择要上传的文件：”)
.如果真 (等于 (打开 (), 真))
    赋值 (发送文件名, .文件名)
    赋值 (远程保存名, 相加 (.标题, 取文本右边 (发送文件名, 相减 (取文本长度 (发送文件名), 倒找文本 (发送文件名, “\”, , 假)))))
    赋值 (文件大小, 取文件尺寸 (发送文件名))
    .如果真 (大于 (文件大小, 0))
        赋值 (文件大小, 整除 (文件大小, 1024))
    .如果真结束
     ' 添加传输文件_ (1, 现操作地址, , 取文件尺寸 (本地文件路径), 本地文件路径)
    赋值 (客户信息, TCP服务器.取回客户 (现操作地址))
    添加传输文件 (客户信息.IP, 真, 到文本 (现操作地址), 远程保存名, 发送文件名, 相加 (数值到格式文本 (文件大小, , 真), “ KB”), 假)
.如果真结束


.子程序 _上传文件夹_被选择, 空白型, , 
.局部变量 上传目录, 文本型, , , 

赋值 (上传目录, 浏览文件夹子程序 (“请选择要上传目录”, 0))
.如果真 (等于 (上传目录, “”))
    返回 ()
.如果真结束

.如果真 (等于 (取文本右边 (上传目录, 1), “\”))
    赋值 (上传目录, 取文本左边 (上传目录, 相减 (取文本长度 (上传目录), 1)))
.如果真结束
赋值 (上传_文件名, 取文本右边 (上传目录, 相减 (取文本长度 (上传目录), 倒找文本 (上传目录, “\”, , 假))))
赋值 (上传_目录路径, 相加 (上传目录, “\”))
寻找 (相加 (上传目录, “\”), .标题, 取文本长度 (上传目录))

.子程序 寻找, 空白型, , 寻找文件的子程序
.参数 本地路径, 文本型, , 寻找文件的路径
.参数 远程路径, 文本型, , 
.参数 本地路径数, 整数型, , 

.局部变量 文件名, 文本型, , , 
.局部变量 表项位置, 整数型, , , 
.局部变量 发送文件名, 文本型, , , 
.局部变量 远程保存名, 文本型, , , 
.局部变量 文件大小, 长整数型, , , 
.局部变量 客户信息, 客户信息, , , 
.局部变量 临时文本, 文本型, , , 

处理事件 () ' 加入它，可以在程序运行中，响应人为的操作
.如果真 (不等于 (取文本右边 (本地路径, 1), “\”)) ' 设置完整的文件路径
    赋值 (本地路径, 相加 (本地路径, “\”))
.如果真结束

赋值 (文件名, 寻找文件 (相加 (本地路径, “*.*”), )) ' 寻找当前目录的指定文件
.判断循环首 (不等于 (文件名, “”)) ' 显示找到的文件
    赋值 (发送文件名, 相加 (本地路径, 文件名))
    赋值 (临时文本, 子文本替换 (发送文件名, 上传_目录路径, , , , 真))
    赋值 (远程保存名, 相加 (.标题, 上传_文件名, “\”, 临时文本))
    赋值 (文件大小, 取文件尺寸 (发送文件名))
    .如果真 (大于 (文件大小, 0))
        赋值 (文件大小, 整除 (文件大小, 1024))
    .如果真结束
    赋值 (客户信息, TCP服务器.取回客户 (现操作地址))
    添加传输文件 (客户信息.IP, 真, 到文本 (现操作地址), 远程保存名, 发送文件名, 相加 (数值到格式文本 (文件大小, , 真), “ KB”), 假)
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()

赋值 (文件名, 寻找文件 (相加 (本地路径, “*.*”), #子目录)) ' 寻找当前目录的子目录
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”))) ' "."和".."为目录自身和上一级目录
        寻找 (相加 (本地路径, 文件名), 远程路径, 本地路径数) ' 用递归调用自身
    .如果真结束
    赋值 (文件名, 寻找文件 (#子目录))
    
.判断循环尾 ()

.子程序 _下载文件_被选择, 空白型, , 
.局部变量 客户信息, 客户信息, , , 
.局部变量 远程路径, 文本型, , , 
.局部变量 本地保存名, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 整数变量, 整数型, , , 

.如果真 (等于 (.取标题 (., 3), “”))
    返回 ()
.如果真结束
.如果 (不等于 (取文本右边 (.标题, 1), “\”))
    赋值 (相加 (.标题, “\”, .取标题 (., 0)))
.否则
    赋值 (相加 (.标题, .取标题 (., 0)))
.如果结束
赋值 (.取标题 (., 0))
赋值 (.文件名, )
赋值 (倒找文本 (“.”, , 假))
.如果真 (大于或等于 (0))
    赋值 (.默认文件后缀, 取文本右边 (相减 (取文本长度 (), )))
.如果真结束
.如果真 (等于 (打开 (), 真))
    赋值 (.文件名)
    赋值 (.未知函数_67181727 ())
    添加传输文件 (客户信息.IP, 假, 到文本 (现操作地址), 远程路径, 本地保存名, .取标题 (., 2), 真)
.如果真结束


.子程序 _下载文件夹_被选择, 空白型, , 
.局部变量 下载目录, 文本型, , , 
.局部变量 发送字节集, 字节集, , , 

赋值 (下载目录, 浏览文件夹子程序 (“请选择要下载目录”, 0))
.如果真 (等于 (下载目录, “”))
    返回 ()
.如果真结束
赋值 (下载_目录路径, 下载目录)
.如果真 (等于 (.取标题 (., 0), “”))
    返回 ()
.如果真结束
.如果真 (不等于 (取文本右边 (.标题, 1), “\”))
    赋值 (.标题, 相加 (.标题, “\”))
.如果真结束
赋值 (发送字节集, 到字节集 (相加 (.标题, .取标题 (., 0), “\”)))
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 13 }, 发送字节集))

.子程序 _搜索按钮_被单击, 空白型, , 
.局部变量 X, 空白型, , , 
.局部变量 盘, 文本型, , , 

_启动窗口.获取焦点 (.)
处理事件 ()
.如果真 (等于 (_启动窗口.取项目文本 (., _启动窗口..现行选中项), “先刷新文件查看”))
    信息框 (“先刷新文件查看!”, #警告图标, .)
    返回 ()
.如果真结束
.如果真 (等于 (_启动窗口..内容, “”))
    信息框 (“请输入需要搜索的文件名称!”, #警告图标, .)
    返回 ()
.如果真结束
.如果真 (等于 (_启动窗口.取项目文本 (., _启动窗口..现行选中项), “搜索磁盘分区框”))
    返回 ()
.如果真结束
.如果真 (等于 (_启动窗口.取项目文本 (., _启动窗口..现行选中项), “所有硬盘”))
    .计次循环首 (相减 (_启动窗口.取项目数 (.), 1), X)
        赋值 (盘, 相加 (盘, 取文本左边 (_启动窗口.取项目文本 (., X), 3), “|”))
    .计次循环尾 ()
    输出调试文本 (盘)
    _启动窗口.全部删除 (.)
    传送数据子程序 (现操作地址, 相加 ({ 4 }, { 10 }, 到字节集 (相加 (“所有硬盘?|*|/”, 盘, “?|*|/”, _启动窗口..内容, “?|*|/”))))
    返回 ()
.如果真结束

_启动窗口.全部删除 (.)
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 10 }, 到字节集 (相加 (取文本左边 (_启动窗口.取项目文本 (., _启动窗口..现行选中项), 3), “?|*|/”, _启动窗口..内容, “?|*|/”))))


.子程序 _停止搜索按钮_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 11 }, { 1 }))


.子程序 _工具重新启动2_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 1 }))

.子程序 _工具关机2_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 2 }))

.子程序 _高级选择夹_子夹被改变, 空白型, , 
.判断开始 (等于 (., 2))
    _进程刷新_被单击 ()
    返回 ()
.判断 (等于 (., 3))
    _窗口刷新_被单击 ()
    返回 ()
.判断 (等于 (., 4))
    _服务刷新_被单击 ()
    返回 ()
.默认
    
.判断结束
1.置文本 (.取项目文本 (.最大化按钮))

.子程序 _注册表高级选择夹_子夹被改变, 空白型, , 
.判断开始 (等于 (., 1))
    _注册启动刷新_被单击 ()
.判断 (等于 (., 2))
    _注册卸载刷新_被单击 ()
.默认
    
.判断结束


.子程序 _查看远程信息_被单击, 空白型, , 
.如果真 (等于 (.取项目数值 (.最大化按钮), 0))
    返回 ()
.如果真结束
 ' 上线树型框.禁止 ＝ 真
 ' 高级选择夹.禁止 ＝ 真
传送数据子程序 (现操作地址, 相加 ({ 2 }, 到字节集 (现操作地址)))
相加 (“命令发送完毕!请等待主机回应.  ”, 时间运算 (), #换行符).加入文本 ()

.子程序 _上线树型框_双击项目, 空白型, , 
_查看远程信息_被单击 ()


.子程序 _工具剪粘板_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 16 }, { 1 }))


.子程序 _工具点击_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 16 }, { 2 }))
赋值 (., 真)
赋值 (., 假)

.子程序 _工具返回_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 16 }, { 3 }))
赋值 (., 假)
赋值 (., 真)

.子程序 _清除记录_被单击, 空白型, , 
赋值 (., “”)

.子程序 _保存记录_被单击, 空白型, , 
.如果真 (等于 (.内容, “”))
    信息框 (“没有记录内容”, 0, )
    返回 ()
.如果真结束
.如果真 (打开 ())
    写到文件 (相加 (.文件名, “.txt”), 到字节集 (.内容))
.如果真结束


.子程序 _工具关机_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 1 }))

.子程序 _工具重新启动_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 2 }))

.子程序 _工具注销_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 3 }))

.子程序 _工具卸载_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 4 }))

.子程序 _工具关闭_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 5 }))

.子程序 _工具重启_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 6 }))

.子程序 _打开网页_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 7 }, 到字节集 (.内容)))

.子程序 _下载_被单击, 空白型, , 
.如果真 (.选中)
    命令广播 (相加 ({ 14 }, { 8 }, { 2 }, 到字节集 (.内容)))
    返回 ()
.如果真结束
命令广播 (相加 ({ 14 }, { 8 }, { 1 }, 到字节集 (.内容)))

.子程序 _筛选_被单击, 空白型, , 
.局部变量 i, 空白型, , , 

.如果真 (等于 (.内容, “”))
    信息框 (“请输入筛选内容”, 0, )
.如果真结束
.如果真 (等于 (.现行选中项, 7))
    命令广播 (相加 ({ 14 }, { 9 }, 到字节集 (.内容)))
    返回 ()
.如果真结束
.如果真 (等于 (.现行选中项, 8))
    命令广播 (相加 ({ 14 }, { 10 }, 到字节集 (.内容)))
    返回 ()
.如果真结束
筛选子程序 (相加 (.现行选中项, 1))

.子程序 筛选子程序, 空白型, , 
.参数 方式, 空白型, , 

.局部变量 i, 空白型, , , 

.计次循环首 (取表项数 (), i)
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 1))
        .如果真 (等于 (寻找文本 (相减 (i, 1).取标题 (方式), .内容, , 假), -1))
            相减 (i, 1).置状态图片 (0)
            处理事件 ()
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()


.子程序 _组合框_筛选_列表项被选择, 空白型, , 
.如果真 (等于 (.现行选中项, 3))
    赋值 (.内容, “有”)
    赋值 (.禁止, 真)
    返回 ()
.如果真结束
赋值 (.禁止, 假)

.子程序 _对话框预览_被单击, 空白型, , 
信息框 (.内容, 相加 (.取项目数值 (.现行选中项), .取项目数值 (.现行选中项)), .内容)

.子程序 _对话框发送_被单击, 空白型, , 
命令广播 (相加 ({ 14 }, { 11 }, 到字节集 (相加 (.内容, 到文本 (分割符), 到文本 (相加 (.取项目数值 (.现行选中项), .取项目数值 (.现行选中项))), 到文本 (分割符), .内容))))

.子程序 _全部选中_被单击, 空白型, , 
.局部变量 i, 空白型, , , 

.计次循环首 (取表项数 (), i)
    .如果真 (不等于 (相减 (i, 1).取当前状态图片 (), 1))
        相减 (i, 1).置状态图片 (1)
    .如果真结束
    处理事件 ()
.计次循环尾 ()


.子程序 _全部不选_被单击, 空白型, , 
.局部变量 i, 空白型, , , 

.计次循环首 (取表项数 (), i)
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 1))
        相减 (i, 1).置状态图片 (0)
    .如果真结束
    处理事件 ()
.计次循环尾 ()


.子程序 _反向选中_被单击, 空白型, , 
.局部变量 i, 空白型, , , 

.计次循环首 (取表项数 (), i)
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 1))
        相减 (i, 1).置状态图片 (3)
    .如果真结束
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 0))
        相减 (i, 1).置状态图片 (1)
    .如果真结束
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 3))
        相减 (i, 1).置状态图片 (0)
    .如果真结束
    处理事件 ()
.计次循环尾 ()


.子程序 _上线树型框_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (.取项目数值 (.最大化按钮), 0))
    返回 ()
.如果真结束
弹出菜单 ()


.子程序 _远程信息_被选择, 空白型, , 
_查看远程信息_被单击 ()

.子程序 _修改备注_被选择, 空白型, , 
.局部变量 名称, 文本型, , , 
.局部变量 IP, 文本型, , , 
.局部变量 备注, 文本型, , , 
.局部变量 分割, 文本型, , "0", 
.局部变量 分割1, 文本型, , "0", 
.局部变量 i, 空白型, , , 

赋值 (分割, 分割文本 (.取项目文本 (.最大化按钮), “(”, ))
赋值 (名称, 分割 [1])
 ' 分割 [2] ＝ 取文本左边 (分割 [2], 取文本长度 (分割 [2]) － 1)
赋值 (分割1, 分割文本 (分割 [2], “)”, ))
赋值 (备注, 分割1 [1])
.如果真 (等于 (输入框 (相加 (“请输入 ”, 名称, “ 的备注信息”), “修改备注”, 备注, 备注, 1), 真))
    .计次循环首 (取项目数 (), i)
        .如果真 (等于 (i.取父项目 (), 0))
            .如果真 (等于 (i.取项目文本 (), .取项目文本 (.最大化按钮)))
                i.置项目文本 (相加 (名称, “(”, 备注, “)”))
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    
    .置项目文本 (.最大化按钮, 相加 (名称, “(”, 备注, “)”))
    
    .计次循环首 (_启动窗口.取表项数 (.), i)
        .如果真 (等于 (相加 (_启动窗口.取标题 (., 相减 (i, 1), 0), “ ”), 分割 [1]))
            _启动窗口.置标题 (., 相减 (i, 1), 7, 备注)
            跳出循环 ()
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    
    传送数据子程序 (现操作地址, 相加 ({ 14 }, { 12 }, 到字节集 (备注)))
.如果真结束


.子程序 _远程关机_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 1 }))

.子程序 _远程重启_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 2 }))

.子程序 _快速关机_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 3 }))

.子程序 _卸载客户端_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 4 }))

.子程序 _关闭客户端_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 5 }))

.子程序 _重启客户端_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 14 }, { 6 }))

.子程序 _刷新进程_被选择, 空白型, , 
_进程刷新_被单击 ()

.子程序 _结束进程_被选择, 空白型, , 
_进程关闭_被单击 ()

.子程序 _进程列表框_右键单击表项, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
弹出菜单 ()


.子程序 _刷新窗口_被选择, 空白型, , 
_窗口刷新_被单击 ()

.子程序 _关闭窗口_被选择, 空白型, , 
_窗口关闭_被单击 ()

.子程序 _显示窗口_被选择, 空白型, , 
_窗口显示_被单击 ()

.子程序 _隐藏窗口_被选择, 空白型, , 
_窗口隐藏_被单击 ()

.子程序 _最小化窗口_被选择, 空白型, , 
_窗口最小化_被单击 ()

.子程序 _最大化窗口_被选择, 空白型, , 
_窗口最大化_被单击 ()

.子程序 _窗口列表框_右键单击表项, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
弹出菜单 ()

.子程序 _刷新服务_被选择, 空白型, , 
_启动窗口._服务刷新_被单击 ()

.子程序 _删除服务_被选择, 空白型, , 
_启动窗口._服务删除_被单击 ()

.子程序 _超级列表框1_右键单击表项, 空白型, , 
.如果真 (等于 (.取标题 (., 1), “”))
    返回 ()
.如果真结束
弹出菜单 ()


.子程序 _添加主机_被单击, 空白型, , 
.局部变量 i, 空白型, , , 
.局部变量 计次, 空白型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 临时文本1, 文本型, , "0", 

.计次循环首 (取项目数 (), i)
    .如果真 (等于 (i.取父项目 (), 0))
        i.删除项目 ()
        赋值 (临时文本, 分割文本 (_启动窗口.取项目文本 (., 0), “(”, ))
        赋值 (临时文本1, 分割文本 (临时文本 [2], “)”, ))
        _启动窗口.置项目文本 (., 0, 相加 (临时文本 [1], “(”, 到文本 (相减 (到整数 (临时文本1 [1]), 1)), “)”))
        
    .如果真结束
    
.计次循环尾 ()
赋值 (i, 0)
.计次循环首 (取表项数 (), i)
    .如果真 (等于 (相减 (i, 1).取当前状态图片 (), 1))
        
        
        
        赋值 (临时文本, 分割文本 (_启动窗口.取项目文本 (., 0), “(”, ))
        赋值 (临时文本1, 分割文本 (临时文本 [2], “)”, ))
        _启动窗口.置项目文本 (., 0, 相加 (临时文本 [1], “(”, 到文本 (相加 (到整数 (临时文本1 [1]), 1)), “)”))
        
        
        _启动窗口.加入项目 (., 0, 相加 (相减 (i, 1).取标题 (), “ (”, 相减 (i, 1).取标题 (7), “)”), 相减 (i, 1).取图片 (), , 到整数 (相减 (i, 1).取标题 (8)), , )
        
    .如果真结束
    
.计次循环尾 ()


.子程序 _QQ2008_被选择, 空白型, , 
加载皮肤 (相加 (取运行目录 (), “\皮肤\QQ2008.she”))


.子程序 _积木_被选择, 空白型, , 
加载皮肤 (相加 (取运行目录 (), “\皮肤\积木.she”))


.子程序 _旋黑_被选择, 空白型, , 
加载皮肤 (相加 (取运行目录 (), “\皮肤\旋黑.she”))

.子程序 __启动窗口_将被销毁, 空白型, , 
终止自身进程 ()

.子程序 _自动上线_被选择, 空白型, , 
载入 (_自动上线, , 假)

.子程序 _配置服务_被选择, 空白型, , 
载入 (配置服务端窗口, , 假)

.子程序 _文件管理高级选择夹_子夹被改变, 空白型, , 
.如果真 (等于 (., 1))
    获取焦点 ()
.如果真结束


.类模块 TCP服务器, , , 

.子程序 启动, 逻辑型, , 启动服务.
.参数 IP地址, 文本型, 可空, 欲绑定的IP地址. 留空绑定所有可用IP.
.参数 端口号, 整数型, , 欲绑定的服务端口号.
.参数 处理函数, 子程序指针, , 网络事件回调函数, 该函数必须具有三个整数型参数, 第一个参数为 事件类型 ,第二个参数为 数据地址 ,第三个参数为 数据长度.
.参数 AcceptEx保持数量, 整数型, 可空, AcceptEx 的数量. 留空 保持100个 AcceptEx.



.子程序 停止, 空白型, , 停止服务.


.子程序 取回客户, 客户信息, , 获取客户信息.
.参数 数据地址, 整数型, , 事件回调函数的第二个参数.



.子程序 取回数据, 字节集, , 取回接收到的数据.
.参数 数据地址, 整数型, , 事件回调函数的第二个参数.
.参数 数据长度, 整数型, , 事件回调函数的第三个参数.



.子程序 发送数据, 逻辑型, , 将数据发送到指定的客户端.
.参数 数据地址, 整数型, , 事件回调函数的第二个参数.
.参数 数据, 字节集, , 欲发送到客户端的数据.



.子程序 断开客户, 空白型, , 断开与指定客户端的连接.
.参数 数据地址, 整数型, , 事件回调函数的第二个参数.



.类模块 内存申请, , , 

.子程序 申请内存大小, 逻辑型, , 
.参数 申请尺寸, 长整数型, , 



.子程序 取写到位置, 长整数型, , 


.子程序 读出全部字节集_并关闭, 字节集, , 


.子程序 写入字节集, 逻辑型, , 
.参数 欲写入字节集, 字节集, , 



.子程序 取总尺寸, 长整数型, , 如果是用“初始化_从映射对象创建”来初始化类，得到的尺寸会有可能比真实文件尺寸稍大（4096的倍数）


.程序集 TCP核心程序集, , , 

.子程序 初始化子程序, 空白型, , 
.如果 (TCP服务器.启动 (1020, &网络事件回调函数, 5000))
    _启动窗口.加入文本 (., 相加 (“服务器启动成功....”, #换行符))
.否则
    _启动窗口.加入文本 (., 相加 (“服务器启动失败....”, #换行符))
.如果结束
赋值 (分割符, { 45, 17, 215, 45, 709, 208, 109, 140, 146, 219 }) ' 10位的字节集

载入 (传输窗口, , 假)

.子程序 网络事件回调函数, 空白型, , 网络事件回调函数, 该函数必须具有三个整数型参数, 第一个参数为 事件类型 ,第二个参数为 数据地址 ,第三个参数为 数据长度.
.参数 事件类型, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 

.局部变量 客户信息, 客户信息, , , 
.局部变量 计次, 空白型, , , 
.局部变量 父项目, 空白型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 临时文本1, 文本型, , "0", 
.局部变量 分割, 文本型, , "0", 

.判断开始 (等于 (事件类型, #数据到达))
    包合并_子程序 (数据地址, TCP服务器.取回数据 (数据地址, 数据长度))
.判断 (等于 (事件类型, #客户进入))
    赋值 (客户信息, TCP服务器.取回客户 (数据地址))
    输出调试文本 (相加 (“有客户进入：”, 客户信息.IP))
    输出调试文本 (相加 (“数据地址：”, 到文本 (数据地址)))
.判断 (等于 (事件类型, #客户离开))
    赋值 (客户信息, TCP服务器.取回客户 (数据地址))
    输出调试文本 (相加 (“有客户离开：”, 客户信息.IP))
    _启动窗口.置文本 (., 1, 相加 (“有客户离开：”, 客户信息.IP))
    .计次循环首 (取数组成员数 (总数据), 计次)
        .如果真 (等于 (总数据 [计次], 地址, 数据地址))
            删除成员 (总数据, 计次, 1)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .计次循环首 (_启动窗口.取项目数 (.), 计次)
        .如果真 (大于 (寻找文本 (_启动窗口.取项目文本 (., 相减 (计次, 1)), 客户信息.IP, , 假), 0))
            赋值 (父项目, _启动窗口.取父项目 (., 相减 (计次, 1)))
            赋值 (临时文本, 分割文本 (_启动窗口.取项目文本 (., 父项目), “(”, ))
            赋值 (临时文本1, 分割文本 (临时文本 [2], “)”, ))
            _启动窗口.置项目文本 (., 父项目, 相加 (临时文本 [1], “(”, 到文本 (相减 (到整数 (临时文本1 [1]), 1)), “)”))
            .如果真 (不等于 (_启动窗口.取父项目 (., 相减 (计次, 1)), 0))
                _启动窗口.删除项目 (., 相减 (计次, 1))
                跳出循环 ()
            .如果真结束
            _启动窗口.删除项目 (., 相减 (计次, 1))
        .如果真结束
        
    .计次循环尾 ()
    
    .计次循环首 (_启动窗口.取表项数 (.), 计次)
        .如果真 (等于 (_启动窗口.取标题 (., 相减 (计次, 1), 0), 客户信息.IP))
            _启动窗口.删除表项 (., 相减 (计次, 1))
            赋值 (分割, 分割文本 (_启动窗口.取文本 (., 0), “：”, ))
            _启动窗口.置文本 (., 0, 相加 (分割 [1], “：”, 到文本 (相减 (到整数 (分割 [2]), 1))))
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束


.子程序 包合并_子程序, 空白型, , 头 = { 215, 98, 59, 186, 146, 86 }
.参数 数据地址, 空白型, , 
.参数 到达的数据, 字节集, , 

.局部变量 操作变量, 整数型, , , 
.局部变量 临时数据, 临时总数据类型, , , 
.局部变量 客户信息, 客户信息, , , 
.局部变量 剩余长度, 空白型, , , 取字节集长度 (到达的数据) ＋ 总数据 [操作变量].接收长度
.局部变量 地址正确否, 空白型, , , 0=假 1=真
.局部变量 沾包头处理_临时, 沾包头处理数据类型, , , 
.局部变量 沾包头处理, 沾包头处理数据类型, 静态, "0", 

.如果真 (等于 (取字节集左边 (到达的数据, 6), { 215, 98, 59, 186, 146, 86 }))
    赋值 (临时数据.地址, 数据地址)
    加入成员 (总数据, 临时数据)
    总数据.申请内存大小 ( [取数组成员数 (总数据)].数据, 到数值 (到文本 (取字节集中间 (到达的数据, 7, 13))))
    
    赋值 (客户信息, TCP服务器.取回客户 (数据地址))
    _启动窗口.插入表项 (., , 客户信息.IP, , , , 数据地址)
    
    包合并_子程序 (数据地址, 取字节集右边 (到达的数据, 相减 (取字节集长度 (到达的数据), 19)))
    返回 ()
.如果真结束


.计次循环首 (取数组成员数 (总数据), 操作变量)
    .如果真 (等于 (总数据 [操作变量], 地址, 数据地址))
        赋值 (地址正确否, 1)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (等于 (地址正确否, 0)) ' 包头不完整,开始处理
    输出调试文本 (“开始处理 沾包头 ”)
    .计次循环首 (取数组成员数 (沾包头处理), 操作变量)
        .如果真 (等于 (沾包头处理 [操作变量], 地址, 数据地址))
            包合并_子程序 (数据地址, 相加 (沾包头处理 [操作变量], 字节集, 到达的数据))
            删除成员 (沾包头处理, 操作变量, 1)
            赋值 (地址正确否, 1)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
    .如果真 (等于 (地址正确否, 0))
        输出调试文本 (相加 (“地址错误 = ”, 到文本 (数据地址)))
         ' 输出调试文本 (“内容 = ” ＋ 到文本 (到达的数据))
         ' 输出调试文本 (“长度 = ” ＋ 到文本 (取字节集长度 (到达的数据)))
         ' 输出调试文本 (到达的数据)
    .如果真结束
    
    返回 ()
.如果真结束

.判断开始 (小于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 还有数据
    总数据.写入字节集 ( [操作变量], 数据, 到达的数据)
    _启动窗口.置标题 (., _启动窗口.查找表项数值 (., , 数据地址), 1, 相加 (到文本 (总数据.取写到位置 ( [操作变量], 数据)), “/”, 到文本 (总数据.取总尺寸 ( [操作变量], 数据))))
.判断 (等于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 数据完整
    _启动窗口.删除表项 (., _启动窗口.查找表项数值 (., , 数据地址))
    总数据.写入字节集 ( [操作变量], 数据, 到达的数据)
    数据处理_子程序 (数据地址, 总数据.读出全部字节集_并关闭 ( [操作变量], 数据))
    删除成员 (总数据, 操作变量, 1)
.判断 (大于 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据))) ' 数据有多
    _启动窗口.删除表项 (., _启动窗口.查找表项数值 (., , 数据地址))
    赋值 (剩余长度, 相减 (相加 (取字节集长度 (到达的数据), 总数据.取写到位置 ( [操作变量], 数据)), 总数据.取总尺寸 ( [操作变量], 数据)))
    总数据.写入字节集 ( [操作变量], 数据, 取字节集左边 (到达的数据, 相减 (取字节集长度 (到达的数据), 剩余长度)))
    数据处理_子程序 (数据地址, 总数据.读出全部字节集_并关闭 ( [操作变量], 数据))
    删除成员 (总数据, 操作变量, 1)
    .如果真 (小于 (剩余长度, 20)) ' 包头不完整
        赋值 (沾包头处理_临时.地址, 数据地址)
        赋值 (沾包头处理_临时.字节集, 取字节集右边 (到达的数据, 剩余长度))
        加入成员 (沾包头处理, 沾包头处理_临时)
        输出调试文本 (“沾包 会出错 已经给数据保存”)
        返回 ()
    .如果真结束
    包合并_子程序 (数据地址, 取字节集右边 (到达的数据, 剩余长度))
    
.默认
    
.判断结束



.子程序 传送数据子程序, 逻辑型, , 
.参数 地址, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 发送的数据, 字节集, , , 

.如果 (TCP服务器.发送数据 (地址, 相加 ({ 215, 98, 59, 186, 146, 86 }, 到字节集 (取文本右边 (相加 (“0000000000000”, 到文本 (取字节集长度 (数据))), 13)), 数据)))
    返回 (真)
.否则
    返回 (假)
.如果结束



.子程序 数据处理_子程序, 空白型, , 
.参数 地址, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 命令, 字节集, , , 
.局部变量 真数据, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 255 })) ' 信息返回
    信息返回子程序 (数据, 地址)
.默认
    
.判断结束


.判断开始 (等于 (命令, { 1 })) ' 有用户发送上线信息来.
    上线_子程序 (数据, 地址)
.判断 (等于 (命令, { 2 })) ' 有用户上线详情来.
    上线详情子程序 (数据, 地址)
.判断 (等于 (命令, { 3 })) ' 取硬盘信息子程序
    加入硬盘信息 (到文本 (数据))
.判断 (等于 (命令, { 4 })) ' 文件管理子程序
    文件管理子程序 (数据, 地址)
.判断 (等于 (命令, { 5 })) ' 进程子程序
    进程信息子程序 (数据, 地址)
.判断 (等于 (命令, { 6 })) ' 注册表子程序
    注册表子程序 (数据, 地址)
.判断 (等于 (命令, { 7 })) ' 系统服务子程序
    系统服务子程序 (数据, 地址)
.判断 (等于 (命令, { 8 })) ' 视频显示
    视频显示子程序 (数据, 地址)
.判断 (等于 (命令, { 9 })) ' 屏幕操作
    屏幕操作子程序 (数据, 地址)
.判断 (等于 (命令, { 10 })) ' 声音传送
    声音传送子程序 (数据, 地址)
.判断 (等于 (命令, { 11 })) ' CMD
    CMD子程序 (数据, 地址)
.判断 (等于 (命令, { 14 }))
    键盘记录子程序 (数据, 地址)
.判断 (等于 (命令, { 15 }))
    命令广播子程序 (数据, 地址)
.默认
    
.判断结束
 ' 输出调试文本 (“接收完整 地址 = ” ＋ 到文本 (地址) ＋ “    数据长度 = ” ＋ 到文本 (取字节集长度 (数据)))



.程序集 功能程序集, , , 

.程序集变量 屏幕, 屏幕差异处理, , , 
.子程序 上线_子程序, 空白型, , 
.参数 字节集, 字节集, , 到字节集 (“自动上线组”) ＋ 分割符 ＋ 到字节集 (“0”) ＋ 分割符 ＋ 到字节集 (“WINXP”)      1=“有视频”
.参数 地址, 空白型, , 

.局部变量 数据, 字节集, , "0", 
.局部变量 计次, 空白型, , , 
.局部变量 是否有组, 空白型, , , 0=没组
.局部变量 客户信息, 客户信息, , , 
.局部变量 表项索引, 整数型, , , 
.局部变量 匿名局部变量_3827, 空白型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 临时文本1, 文本型, , "0", 
.局部变量 分割, 文本型, , "0", 

传送数据子程序 (地址, 相加 ({ 1 }, 到字节集 (到文本 (传输端口))))

赋值 (数据, 分割字节集 (字节集, 分割符, ))
.如果真 (不等于 (取数组成员数 (数据), 7))
    输出调试文本 (“有错误的上线信息”)
    返回 ()
.如果真结束


 ' .计次循环首 (取数组成员数 (数据), 计次)
     ' 输出调试文本 (到文本 (数据 [计次]))
 ' .计次循环尾 ()



.计次循环首 (_启动窗口.取项目数 (.), 计次)
    赋值 (临时文本, 分割文本 (_启动窗口.取项目文本 (., 相减 (计次, 1)), “(”, ))
    
    .如果真 (等于 (临时文本 [1], 到文本 (数据 [1])))
        赋值 (临时文本1, 分割文本 (临时文本 [2], “)”, ))
        
        _启动窗口.置项目文本 (., 相减 (计次, 1), 相加 (临时文本 [1], “(”, 到文本 (相加 (到整数 (临时文本1 [1]), 1)), “)”))
         ' 计次 ＝ 计次 ＋ 2
        赋值 (是否有组, 1)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (等于 (是否有组, 0))
    _启动窗口.加入项目 (., , 相加 (到文本 (数据 [1]), “(”, 到文本 (1), “)”), 58, , , 真, )
.如果真结束

赋值 (客户信息, TCP服务器.取回客户 (地址))

 ' .如果 (等于 (数据 [2], { 1 }))
     ' _启动窗口.上线树型框.加入项目 (计次 － 1, 客户信息.IP ＋ “ (” ＋ 到文本 (数据 [3]) ＋ “)”, 1, , 地址, , )  ' 0=无视频,1=有视频
     ' ' 有视频
.否则
     ' _启动窗口.上线树型框.加入项目 (计次 － 1, 客户信息.IP ＋ “ (” ＋ 到文本 (数据 [3]) ＋ “)”, 0, , 地址, , )
     ' 表项索引 ＝ _启动窗口.超级列表框8.插入表项 (, “假”, , , , )
.如果结束

_启动窗口.加入项目 (., 相减 (计次, 1), 相加 (客户信息.IP, “ (”, 到文本 (数据 [7]), “)”), 到整数 (到文本 (数据 [2])), , 地址, , )

_启动窗口.扩展 (., 相减 (计次, 1))



赋值 (表项索引, _启动窗口.插入表项 (., , 客户信息.IP, 到整数 (到文本 (数据 [2])), , , ))
_启动窗口.置标题 (., 表项索引, 1, “地理位置”)
_启动窗口.置标题 (., 表项索引, 2, 到文本 (数据 [3]))
_启动窗口.置标题 (., 表项索引, 3, 到文本 (数据 [4]))
_启动窗口.置标题 (., 表项索引, 4, 到文本 (数据 [5]))
_启动窗口.置标题 (., 表项索引, 5, 到文本 (时间运算 ()))
_启动窗口.置标题 (., 表项索引, 6, 到文本 (数据 [6]))
_启动窗口.置标题 (., 表项索引, 7, 到文本 (数据 [7]))
_启动窗口.置标题 (., 表项索引, 8, 到文本 (地址))

 ' _启动窗口.超级列表框8.置标题 (表项索引, 1, 到文本 (地址))
 ' _启动窗口.超级列表框8.置标题 (表项索引, 2, 客户信息.IP)
 ' _启动窗口.超级列表框8.置标题 (表项索引, 4, 到文本 (数据 [3]))
 ' _启动窗口.超级列表框8.置标题 (表项索引, 6, 到文本 (取现行时间 ()))

赋值 (分割, 分割文本 (_启动窗口.取文本 (., 0), “：”, ))
_启动窗口.置文本 (., 0, 相加 (分割 [1], “：”, 到文本 (相加 (到整数 (分割 [2]), 1))))
_启动窗口.置文本 (., 1, 相加 (“有客户进入：”, 客户信息.IP))

.子程序 上线详情子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 客户信息, 客户信息, , , 
.局部变量 信息, 文本型, , "0", 
.局部变量 计次, 空白型, , , 

赋值 (客户信息, TCP服务器.取回客户 (地址))
.如果真 (等于 (寻找文本 (_启动窗口.取标题 (., 0, 1), 客户信息.IP, , 假), -1))
    返回 ()
.如果真结束
_启动窗口.加入文本 (., 相加 (“远程信息列表读取完毕.  ”, 时间运算 (), #换行符))
赋值 (信息, 分割文本 (到文本 (数据), #换行符, ))

 ' 输出调试文本 (取数组成员数 (信息))
 ' 输出调试文本 (到文本 (数据))

 ' _启动窗口.上线树型框.禁止 ＝ 假
 ' _启动窗口.高级选择夹.禁止 ＝ 假
 ' 返回 ()
.计次循环首 (取数组成员数 (信息), 计次)
    _启动窗口.置标题 (., 计次, 1, 信息 [计次])
.计次循环尾 ()


.子程序 加入硬盘信息, 空白型, , 
.参数 硬盘数据, 文本型, , 

.局部变量 盘符, 文本型, , , 
.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 总盘符, 文本型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 磁盘分割, 文本型, , "0", 
.局部变量 i, 空白型, , , 
.局部变量 数据分割, 文本型, , "0", 
.局部变量 临时位置, 空白型, , , 

_启动窗口.清空 (.)
_启动窗口.全部删除 (.)
赋值 (_启动窗口..标题, “”)
_启动窗口.清空 (.)
_启动窗口.全部删除 (.)
_启动窗口.全部删除 (.)

.计次循环首 (_启动窗口.取列数 (.), )
    _启动窗口.删除列 (., 0)
.计次循环尾 ()


_启动窗口.插入列 (., 0, “磁盘列表”, 150, , , )
_启动窗口.插入列 (., 1, “总大小”, 100, , , )
_启动窗口.插入列 (., 2, “剩余大小”, 100, , , )

赋值 (_启动窗口.., #磁盘图标组)

_启动窗口.加入项目 (., , “我的电脑”, 0, , , , )
赋值 (磁盘分割, 分割文本 (硬盘数据, “||~!@#$%^&||”, ))

_启动窗口.清空 (.)
_启动窗口.加入项目 (., “所有硬盘”, )

.计次循环首 (取数组成员数 (磁盘分割), 容器)
    赋值 (数据分割, 分割文本 (取文本右边 (磁盘分割 [容器], 相减 (取文本长度 (磁盘分割 [容器]), 1)), “分割符”, ))
    _启动窗口.加入项目 (., 数据分割 [1], )
    _启动窗口.加入项目 (., 0, 数据分割 [1], 到数值 (取文本左边 (磁盘分割 [容器], 1)), , 1, , )
    _启动窗口.加入项目 (., 相减 (_启动窗口.取项目数 (.), 1), “正在读取，请稍后！”, , , , , )
    赋值 (临时位置, _启动窗口.插入表项 (., _启动窗口.取表项数 (.), 数据分割 [1], 到数值 (取文本左边 (磁盘分割 [容器], 1)), , , ))
    .如果真 (等于 (取数组成员数 (数据分割), 3))
        _启动窗口.置标题 (., 临时位置, 1, 相加 (数据分割 [2], “GB”))
        _启动窗口.置标题 (., 临时位置, 2, 相加 (数据分割 [3], “GB”))
    .如果真结束
    
.计次循环尾 ()

赋值 (_启动窗口..现行选中项, 0)

_启动窗口.加入项目 (., , “远程注册表”, 0, , , , )
_启动窗口.加入项目 (., 0, “HKEY_CURRENT_USER”, 4, 5, 3, , )
_启动窗口.加入项目 (., 相减 (_启动窗口.取项目数 (.), 1), “正在读取，请稍后！”, , , , , )
_启动窗口.加入项目 (., 0, “HKEY_LOCAL_MACHINE”, 4, 5, 4, , )
_启动窗口.加入项目 (., 相减 (_启动窗口.取项目数 (.), 1), “正在读取，请稍后！”, , , , , )
_启动窗口.加入项目 (., 0, “HKEY_USERS”, 4, 5, 5, , )
_启动窗口.加入项目 (., 相减 (_启动窗口.取项目数 (.), 1), “正在读取，请稍后！”, , , , , )
_启动窗口.加入项目 (., 0, “HKEY_CURRENT_CONFIG”, 4, 5, 2, , )
_启动窗口.加入项目 (., 相减 (_启动窗口.取项目数 (.), 1), “正在读取，请稍后！”, , , , , )


_启动窗口.扩展 (., 0)
_启动窗口.扩展 (., 0)

_启动窗口.加入文本 (., 相加 (“驱动器列表读取完毕.现在可以对主机进行远程控制了.  ”, 时间运算 (), #换行符))
_启动窗口.置文本 (., 1, “驱动器列表读取完毕.”)


.子程序 文件管理子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 命令1, 文本型, , "2", 
.局部变量 分割1, 文本型, , "0", 
.局部变量 分割2, 文本型, , "0", 
.局部变量 命令字, 文本型, , , 
.局部变量 分割数据数据, 文本型, , "0", 
.局部变量 搜索到的文件, 文本型, , "0", 
.局部变量 x, 空白型, , , 
.局部变量 Q, 空白型, , , 
.局部变量 搜索到的文件名, 文本型, 静态, , 
.局部变量 i, 空白型, , , 
.局部变量 客户信息, 客户信息, , , 
.局部变量 远程路径, 文本型, , , 
.局部变量 本地保存名, 文本型, , , 
.局部变量 文件大小, 空白型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    赋值 (分割数据数据, 分割文本 (到文本 (数据), “%工|(”, ))
    _启动窗口.全部删除 (.)
    .计次循环首 (_启动窗口.取列数 (.), )
        _启动窗口.删除列 (., 0)
    .计次循环尾 ()
    
    _启动窗口.插入列 (., 0, “文件名”, 150, , , )
    _启动窗口.插入列 (., 1, “文件类型”, 110, , , )
    _启动窗口.插入列 (., 2, “文件大小”, 100, , , )
    _启动窗口.插入列 (., 3, “修改日期”, 150, , , )
    
    _启动窗口.插入表项 (., , “返回上一级”, 0, , , )
    
    .如果 (大于 (取数组成员数 (分割数据数据), 1))
        返回文件夹 (分割数据数据 [1])
        返回文件名 (分割数据数据 [2])
    .否则
        返回文件夹 (到文本 (数据))
    .如果结束
    _启动窗口.置文本 (., 1, “数据返回完成”)
.判断 (等于 (命令, { 2 }))
    赋值 (命令1, 分割文本 (到文本 (数据), “★4?\+^”, ))
    .如果真 (不等于 (搜索到的文件名, 命令1 [1]))
        赋值 (搜索到的文件名, 命令1 [1])
    .如果真结束
    赋值 (搜索到的文件, 分割文本 (到文本 (命令1 [2]), “|”, ))
    .计次循环首 (取数组成员数 (搜索到的文件), x)
        赋值 (Q, _启动窗口.插入表项 (., , , , , , ))
        _启动窗口.置标题 (., Q, 0, 到文本 (相加 (Q, 1)))
        _启动窗口.置标题 (., Q, 1, 搜索到的文件 [x])
    .计次循环尾 ()
.判断 (等于 (命令, { 3 })) ' 文件传送返回信息
    
.判断 (等于 (命令, { 4 }))
    赋值 (分割1, 分割文本 (到文本 (数据), “$^&*()%^”, ))
    .计次循环首 (取数组成员数 (分割1), i)
        赋值 (分割2, 分割文本 (分割1 [i], “%工|(”, ))
        .如果真 (不等于 (取数组成员数 (分割2), 2))
            返回 ()
        .如果真结束
        赋值 (文件大小, 到整数 (分割2 [2]))
        .如果真 (大于 (文件大小, 0))
            赋值 (文件大小, 整除 (文件大小, 1024))
        .如果真结束
        赋值 (远程路径, 分割2 [1])
        赋值 (本地保存名, 相加 (下载_目录路径, “\”, 取文本右边 (远程路径, 相减 (取文本长度 (远程路径), 3))))
        创建目录_ (取文本左边 (本地保存名, 倒找文本 (本地保存名, “\”, , 假)))
        赋值 (客户信息, TCP服务器.取回客户 (现操作地址))
        添加传输文件 (客户信息.IP, 假, 到文本 (现操作地址), 远程路径, 本地保存名, 相加 (数值到格式文本 (文件大小, , 真), “ KB”), 假)
    .计次循环尾 ()
.默认
    
.判断结束


.子程序 进程信息子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 进程信息列表, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 单一信息, 文本型, , "0", 
.局部变量 临时文本, 文本型, , , 
.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 文本信息, 文本型, , "0", 
.局部变量 容器3, 整数型, , , 
.局部变量 本次信息, 文本型, , , 
.局部变量 窗口信息, 文本型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))


.判断开始 (等于 (命令, { 1 }))
    赋值 (临时文本, 到文本 (数据))
    _启动窗口.全部删除 (.)
    赋值 (进程信息列表, 分割文本 (临时文本, #换行符, ))
    .计次循环首 (取数组成员数 (进程信息列表), i)
        赋值 (单一信息, 分割文本 (进程信息列表 [i], “|”, ))
        .如果真 (等于 (取数组成员数 (单一信息), 4))
            赋值 (容器1, _启动窗口.插入表项 (., , 单一信息 [2], , , , ))
            _启动窗口.置标题 (., 容器1, 1, 单一信息 [1])
            _启动窗口.置标题 (., 容器1, 2, 单一信息 [3])
            _启动窗口.置标题 (., 容器1, 3, 单一信息 [4])
        .如果真结束
        
    .计次循环尾 ()
    _启动窗口.置文本 (., 1, 相加 (“对方共有进程:”, 到文本 (_启动窗口.取表项数 (.)), “ 个”))
    _启动窗口.加入文本 (., 相加 (“进程查看类命令执行完成.  ”, 时间运算 (), #换行符))
    
.判断 (等于 (命令, { 2 }))
    
.判断 (等于 (命令, { 3 }))
    赋值 (窗口信息, 到文本 (数据))
    _启动窗口.全部删除 (.)
    赋值 (文本信息, 分割文本 (窗口信息, #换行符, ))
    .如果真 (等于 (取数组成员数 (文本信息), 0))
        _启动窗口.置文本 (., 1, “对不起没有找到窗口!”)
        返回 ()
    .如果真结束
    .计次循环首 (取数组成员数 (文本信息), 容器1)
        赋值 (本次信息, 文本信息 [容器1])
        赋值 (容器3, _启动窗口.插入表项 (., , 取文本左边 (本次信息, 相减 (取文本长度 (本次信息), 9)), , , , ))
        _启动窗口.置标题 (., 容器3, 1, 删首尾空 (取文本右边 (本次信息, 9)))
    .计次循环尾 ()
    
    _启动窗口.置文本 (., 1, 相加 (“对方共有窗口:”, 到文本 (_启动窗口.取表项数 (.)), “ 个”))
    _启动窗口.加入文本 (., 相加 (“远程窗口管理类命令执行完成.  ”, 时间运算 (), #换行符))
.默认
    
.判断结束


.子程序 系统服务子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 文本a, 文本型, , "0", 
.局部变量 文本b, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 表项索引, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (文本, 到文本 (数据))
.如果真 (等于 (文本, “服务修改成功”))
    _启动窗口.置标题 (., _启动窗口.., 4, _启动窗口.取项目文本 (., _启动窗口..现行选中项))
    _启动窗口.置文本 (., 1, 文本)
    返回 ()
.如果真结束
.如果真 (等于 (文本, “服务删除成功”))
    _启动窗口.删除表项 (., _启动窗口..)
    _启动窗口.置文本 (., 1, 文本)
    返回 ()
.如果真结束

.如果真 (等于 (寻找文本 (文本, “|”, , 假), -1))
    _启动窗口.置文本 (., 1, 文本)
     ' _启动窗口.超级列表框1.全部删除 ()
    返回 ()
.如果真结束
赋值 (文本a, 分割文本 (文本, #换行符, ))
赋值 (i, 取数组成员数 (文本a))
.如果真 (并且 (大于 (i, 0), 小于 (i, 3)))
    .如果真 (等于 (_启动窗口..可视, 真))
        赋值 (文本b, 分割文本 (文本a [1], “|”, ))
        .如果真 (等于 (取数组成员数 (文本b), 3))
            赋值 (_启动窗口..内容, 文本b [3])
            赋值 (_启动窗口..内容, 文本b [2])
            赋值 (i, 到数值 (文本b [1]))
            .判断开始 (等于 (i, 1))
                赋值 (_启动窗口.., 假)
                赋值 (_启动窗口.., 真)
            .判断 (或者 (等于 (i, 2), 等于 (i, 3)))
                赋值 (_启动窗口.., 真)
                赋值 (_启动窗口.., 真)
            .判断 (等于 (i, 4))
                赋值 (_启动窗口.., 真)
                赋值 (_启动窗口.., 假)
            .判断 (等于 (i, 7))
                赋值 (_启动窗口.., 真)
                赋值 (_启动窗口.., 真)
            .默认
                赋值 (_启动窗口.., 真)
                赋值 (_启动窗口.., 真)
            .判断结束
            赋值 (_启动窗口..禁止, 假)
            _启动窗口.置标题 (., 到数值 (_启动窗口..标题), 3, 状态 (i))
        .如果真结束
        
    .如果真结束
    返回 ()
.如果真结束
_启动窗口.全部删除 (.)
.计次循环首 (取数组成员数 (文本a), i)
    赋值 (文本b, 分割文本 (文本a [i], “|”, ))
    .如果真 (等于 (取数组成员数 (文本b), 6))
        赋值 (表项索引, _启动窗口.插入表项 (., , 文本b [2], 0, , , ))
        _启动窗口.置标题 (., 表项索引, 1, 文本b [1])
        _启动窗口.置标题 (., 表项索引, 2, 文本b [3])
        _启动窗口.置标题 (., 表项索引, 5, 文本b [4])
        _启动窗口.置标题 (., 表项索引, 3, 文本b [5])
        _启动窗口.置标题 (., 表项索引, 4, 文本b [6])
    .如果真结束
    
.计次循环尾 ()

_启动窗口.置文本 (., 1, 相加 (“对方共开启服务项:”, 到文本 (_启动窗口.取表项数 (.)), “ 个”))
_启动窗口.加入文本 (., 相加 (“远程服务管理类命令执行完成.  ”, 时间运算 (), #换行符))

.子程序 信息返回子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
.如果真 (等于 (命令, { 1 }))
    _启动窗口.置文本 (., 1, 到文本 (取字节集右边 (数据, 相减 (取字节集长度 (数据), 1))))
    返回 ()
.如果真结束
.如果真 (等于 (命令, { 2 }))
    赋值 (数据, 到字节集 (“进程结束成功...  ”))
    _启动窗口.置文本 (., 1, 到文本 (数据))
    _启动窗口._进程刷新_被单击 ()
.如果真结束
.如果真 (等于 (命令, { 3 }))
    赋值 (数据, 到字节集 (“进程结束失败...  ”))
    _启动窗口.置文本 (., 1, 到文本 (数据))
    _启动窗口._进程刷新_被单击 ()
.如果真结束
.如果真 (等于 (命令, { 4 }))
    赋值 (数据, 到字节集 (“远程窗口关闭成功...  ”))
    _启动窗口.置文本 (., 1, 到文本 (数据))
    _启动窗口._窗口刷新_被单击 ()
.如果真结束
.如果真 (等于 (命令, { 5 }))
    赋值 (数据, 到字节集 (“远程窗口关闭失败...  ”))
    _启动窗口.置文本 (., 1, 到文本 (数据))
    _启动窗口._窗口刷新_被单击 ()
.如果真结束
.如果真 (等于 (命令, { 6 }))
    赋值 (数据, 到字节集 (“远程窗口管理类命令执行完成.  ”))
.如果真结束
_启动窗口.加入文本 (., 相加 (到文本 (数据), 时间运算 (), #换行符))

.子程序 注册表子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 容器3, 整数型, , , 
.局部变量 剩余信息, 文本型, , , 
.局部变量 本次信息, 文本型, , , 
.局部变量 信息, 文本型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, 到字节集 ({ 1 })))
    注册表加入 (到文本 (数据))
.判断 (等于 (命令, 到字节集 ({ 3 })))
    
.判断 (等于 (命令, 到字节集 ({ 4 })))
    
.判断 (等于 (命令, 到字节集 ({ 5 })))
    注册启动列表加入 (到文本 (数据))
.判断 (等于 (命令, 到字节集 ({ 6 })))
    
.判断 (等于 (命令, 到字节集 ({ 7 })))
    
.判断 (等于 (命令, 到字节集 ({ 8 })))
    
.判断 (等于 (命令, 到字节集 ({ 9 })))
    
    赋值 (信息, 到文本 (数据))
    _启动窗口.全部删除 (.)
    赋值 (容器, 寻找文本 (信息, “к”, , 假))
    赋值 (容器1, 到数值 (取文本左边 (信息, 相减 (容器, 1))))
    _启动窗口.置文本 (., 1, 相加 (“远程软件列表共有: ”, 到文本 (容器1), “ 个表项”))
    赋值 (剩余信息, 取文本右边 (信息, 相减 (取文本长度 (信息), 容器, 1)))
    .计次循环首 (容器1, )
        赋值 (容器2, 寻找文本 (剩余信息, “к”, , 假))
        赋值 (本次信息, 取文本左边 (剩余信息, 相减 (容器2, 1)))
        赋值 (容器, 寻找文本 (本次信息, “ё”, , 假))
        赋值 (容器3, _启动窗口.插入表项 (., , 取文本左边 (本次信息, 相减 (容器, 1)), , , , 0))
        _启动窗口.置标题 (., 容器3, 1, 取文本右边 (本次信息, 相减 (取文本长度 (本次信息), 容器, 1)))
        赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器2, 1)))
    .计次循环尾 ()
.判断 (等于 (命令, 到字节集 ({ 10 })))
    
.判断 (等于 (命令, 到字节集 ({ 11 })))
    
.默认
    
.判断结束


.子程序 屏幕操作子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 临时, 字节集, , "0", 
.局部变量 图片长度, 整数型, , , 
.局部变量 图像位数, 整数型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, 到字节集 ({ 1 })))
    赋值 (临时, 分割字节集 (数据, 到字节集 (“||”), ))
    赋值 (_远程屏幕窗口..宽度, 到整数 (到文本 (临时 [2])))
    赋值 (_远程屏幕窗口..高度, 到整数 (到文本 (临时 [3])))
    
    屏幕.启动 (_远程屏幕窗口.取窗口句柄 (.), _远程屏幕窗口..宽度, _远程屏幕窗口..高度)
    传送数据子程序 (地址, 相加 ({ 9 }, { 2 }))
.判断 (等于 (命令, 到字节集 ({ 2 })))
     ' 传送数据子程序 (到字节集 (“OK”))
    传送数据子程序 (现操作地址, 相加 ({ 9 }, { 2 }))
    屏幕.处理变化数据 (解压数据_ (数据))
.默认
    
.判断结束


.子程序 视频显示子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 文本, 文本型, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 
.局部变量 局部_图片号, 整数型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))

.判断开始 (等于 (命令, { 1 }))
    .如果真 (等于 (是否已创建 (_远程视频窗口), 真))
        赋值 (文本, 分割文本 (到文本 (数据), “|”, ))
        
        _远程视频窗口.清空 (.)
        .计次循环首 (取数组成员数 (文本), 计次)
            _远程视频窗口.加入项目 (., 文本 [计次], )
            
        .计次循环尾 ()
        赋值 (_远程视频窗口..现行选中项, 0)
    .如果真结束
    
.判断 (等于 (命令, { 2 })) ' 8位图
    .如果真 (等于 (是否已创建 (_远程视频窗口), 真))
        赋值 (_远程视频窗口..底图, 数据)
        .如果真 (视频状态)
            传送数据子程序 (现操作地址, 相加 ({ 8 }, { 2 }, 到字节集 (_远程视频窗口..现行选中项)))
        .如果真结束
        
    .如果真结束
    
.默认
    
.判断结束


.子程序 声音传送子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 文本, 文本型, , "0", 
.局部变量 计次, 空白型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.如果真 (等于 (是否已创建 (_远程视频窗口), 假))
    返回 ()
.如果真结束
.判断开始 (等于 (命令, { 2 })) ' 声音
    赋值 (_远程视频窗口..位置, 取字节集长度 (数据))
     ' 输出调试文本 (取字节集长度 (数据))
     ' .如果真 (大于 (取字节集长度 (数据), 500))
     ' .如果真结束
    赋值 (全局_声音, 相加 (全局_声音, 解压数据_ (数据)))
     ' 开始播放语音 (解压数据_ (数据))
    
     ' 传送数据子程序 (现操作地址, { 10 } ＋ { 2 } ＋ 到字节集 (到文本 (“开始声音传输开始”)))
.默认
    
.判断结束


.子程序 CMD子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, 到字节集 ({ 1 })))
    .如果真 (是否已创建 (_TELNET))
        .如果真 (大于 (相加 (取文本长度 (_TELNET..内容), 取文本长度 (到文本 (数据))), 30000))
            赋值 (_TELNET..内容, “”)
        .如果真结束
        _TELNET.加入文本 (., 到文本 (数据))
        赋值 (启始, 取文本长度 (_TELNET..内容))
    .如果真结束
    
.判断 (等于 (命令, 到字节集 ({ 2 })))
    .如果 (等于 (到文本 (数据), “失败”))
        调试输出 (“远程MS-DOS模拟连接失败.  ”)
    .否则
         ' 调试输出 (“远程MS-DOS模拟连接成功.  ”)
    .如果结束
    
.判断 (等于 (命令, 到字节集 ({ 3 })))
    .如果 (等于 (到文本 (数据), “完成”))
        调试输出 (“远程MS-DOS模拟断开成功.  ”)
    .否则
        
    .如果结束
    
.默认
    
.判断结束


.子程序 键盘记录子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 临时文本, 文本型, , "2", 
.局部变量 客户信息, 未知类型0x41011C81, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
赋值 (TCP服务器.取回客户 (地址))
.判断开始 (等于 (命令, { 1 }))
    赋值 (临时文本 [1], “当前剪辑板内容”)
    赋值 (临时文本 [2], 到文本 (数据))
    键盘记录加入文本 (临时文本 [1], 相加 (#换行符, 临时文本 [2]), 客户信息.IP)
.判断 (等于 (命令, { 2 }))
    赋值 (临时文本 [1], “当前剪辑板没有内容”)
    键盘记录加入文本 (临时文本 [1], “”, 客户信息.IP)
.判断 (等于 (命令, { 3 }))
    赋值 (临时文本 [1], “点击记录启动成功！”)
    键盘记录加入文本 (临时文本 [1], “”, 客户信息.IP)
.判断 (等于 (命令, { 4 }))
    赋值 (临时文本 [1], “点击记录已经启动了！”)
    键盘记录加入文本 (临时文本 [1], “”, 客户信息.IP)
.判断 (等于 ({ 5 }))
    赋值 (临时文本 [1], “停止点击记录成功！”)
    赋值 (临时文本 [2], 到文本 (数据))
    键盘记录加入文本 (临时文本 [1], 相加 (#换行符, 临时文本 [2]), 客户信息.IP)
.判断 (等于 (命令, { 6 }))
    赋值 (临时文本 [1], “没有点击记录！”)
    未知函数_67181716 ( [1], “”, .)
.默认
    
.判断结束


.子程序 键盘记录加入文本, 空白型, , 
.参数 命令, 文本型, , 
.参数 内容, 文本型, , 
.参数 ip, 文本型, , 

.如果真 (等于 (..内容, “”))
    赋值 (_启动窗口..内容, 相加 (ip, “ ”, 到文本 (时间运算 ()), “ ”, 命令, 到文本 (内容)))
    返回 ()
.如果真结束
赋值 (_启动窗口..内容, 相加 (_启动窗口..内容, #换行符, ip, “ ”, 到文本 (时间运算 ()), “ ”, 命令, 到文本 (内容)))

.子程序 命令广播子程序, 空白型, , 
.参数 数据, 字节集, , 
.参数 地址, 空白型, , 

.局部变量 命令, 字节集, , , 
.局部变量 i, 空白型, , , 

赋值 (命令, 取字节集左边 (数据, 1))
赋值 (数据, 取字节集右边 (数据, 相减 (取字节集长度 (数据), 1)))
.判断开始 (等于 (命令, { 1 }))
    .计次循环首 (_启动窗口.取表项数 (.), i)
        .如果真 (等于 (_启动窗口.取标题 (., 相减 (i, 1), 8), 到文本 (地址)))
            _启动窗口.置状态图片 (., 相减 (i, 1), 0)
            处理事件 ()
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束



.程序集 杂项程序集, , , 

.子程序 返回文件夹, 空白型, , 
.参数 文件夹, 文本型, , 

.局部变量 容器3, 整数型, , , 
.局部变量 文件夹数组, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 文件夹名, 文本型, , , 
.局部变量 大型分割, 文本型, , , 

 ' 输出调试文本 (文件夹)
.如果真 (等于 (_启动窗口.取父项目 (., 相加 (树型框点击值, 1)), 树型框点击值))
    赋值 (容器3, _启动窗口.取父项目 (., 相加 (树型框点击值, 1)))
    .判断循环首 (等于 (容器3, 树型框点击值))
        _启动窗口.删除项目 (., 相加 (树型框点击值, 1))
        赋值 (容器3, _启动窗口.取父项目 (., 相加 (树型框点击值, 1)))
    .判断循环尾 ()
.如果真结束
.如果真 (等于 (文件夹, “”))
    
    返回 ()
.如果真结束
赋值 (文件夹数组, 分割文本 (文件夹, “><”, ))

.计次循环首 (取数组成员数 (文件夹数组), 容器3)
    .如果真 (不等于 (删首尾空 (文件夹数组 [容器3]), “”))
        赋值 (文件夹名, 文件夹数组 [容器3])
         ' 输出调试文本 (文件夹名)
        赋值 (i, _启动窗口.加入项目 (., 树型框点击值, 取文本右边 (文件夹名, 相减 (取文本长度 (文件夹名), 1)), 7, 8, 1, , ))
        .如果真 (等于 (取文本左边 (文件夹名, 1), “1”))
             ' 输出调试文本 (“插入+”)
            _启动窗口.加入项目 (., i, “正在读取，请稍后！”, 7, 8, , , )
        .如果真结束
        赋值 (i, _启动窗口.插入表项 (., , 取文本右边 (文件夹名, 相减 (取文本长度 (文件夹名), 1)), 0, , , i))
        _启动窗口.置标题 (., i, 1, “文件夹”)
    .如果真结束
    .如果真 (不等于 (GetInputState (), 0))
        处理事件 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 返回文件名, 空白型, , 
.参数 文件名A, 文本型, , 

.局部变量 文件名数组, 文本型, , "0", 
.局部变量 小图片组, 字节集, , , 
.局部变量 I, 整数型, , , 
.局部变量 文件明细数组, 文本型, , "0", 
.局部变量 文件信息, 文本型, , , 
.局部变量 后缀名, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 类型注册项名, 文本型, , , 
.局部变量 文件图标信息, 文本型, , , 
.局部变量 文件路径, 文本型, , , 
.局部变量 文件图标索引, 整数型, , , 
.局部变量 图片索引, 整数型, , , 


.如果真 (等于 (文件名A, “”))
    返回 ()
.如果真结束
赋值 (文件名数组, 分割文本 (文件名A, “><”, ))
赋值 (小图片组, 未知支持库函数_30 (16, 16))
赋值 (小图片组, #图标组)
赋值 (_启动窗口..字体大小, 假)
.计次循环首 (取数组成员数 (文件名数组), I)
    处理事件 ()
    .如果真 (等于 (停止操作, 真))
        跳出循环 ()
    .如果真结束
    赋值 (文件明细数组, 分割文本 (文件名数组 [I], “|”, ))
    .如果真 (大于 (取数组成员数 (文件明细数组), 2))
        赋值 (文件信息, 文件明细数组 [1])
        赋值 (a, 倒找文本 (文件信息, “.”, , 假))
        .如果 (大于 (a, 1))
            赋值 (后缀名, 删首尾空 (取文本右边 (文件信息, 相加 (相减 (取文本长度 (文件信息), a), 1))))
        .否则
            赋值 (后缀名, “”)
        .如果结束
        .判断开始 (等于 (后缀名, “.exe”))
            赋值 (图片索引, 未知支持库函数_24 (小图片组, #exe, ))
            赋值 (类型注册项名, “应用程序”)
        .判断 (等于 (后缀名, “”))
            赋值 (图片索引, 未知支持库函数_24 (小图片组, #无, ))
            赋值 (类型注册项名, “文件”)
        .判断 (或者 (等于 (后缀名, “.txt”), 等于 (后缀名, “.log”)))
            赋值 (图片索引, 未知支持库函数_24 (小图片组, #txt, ))
            赋值 (类型注册项名, “文本文件”)
        .判断 (或者 (等于 (后缀名, “.dll”), 等于 (后缀名, “.ocx”)))
            赋值 (图片索引, 未知支持库函数_24 (小图片组, #dll, ))
            赋值 (类型注册项名, “应用程序扩展”)
        .判断 (等于 (后缀名, “.ini”))
            赋值 (图片索引, 未知支持库函数_24 (小图片组, #ini, ))
            赋值 (类型注册项名, “配置文件”)
        .默认
            
            赋值 (类型注册项名, 取文本注册项 (1, 相加 (后缀名, “\”), ))
            赋值 (文件图标信息, 取文本注册项 (1, 相加 (类型注册项名, “\DefaultIcon\”), ))
            赋值 (a, 倒找文本 (文件图标信息, “,”, , 假))
            赋值 (文件路径, 取文本左边 (文件图标信息, 相减 (a, 1)))
            赋值 (文件图标索引, 到数值 (取文本右边 (文件图标信息, 相减 (取文本长度 (文件图标信息), a))))
            赋值 (类型注册项名, 相加 (到大写 (取文本右边 (后缀名, 相减 (取文本长度 (后缀名), 1))), “ 文件”))
            赋值 (a, 未知支持库函数_26 (小图片组, 文件路径, 文件图标索引))
            .如果 (等于 (a, -1))
                赋值 (图片索引, 未知支持库函数_24 (小图片组, #无, ))
            .否则
                赋值 (图片索引, a)
            .如果结束
            
        .判断结束
        
        
        赋值 (a, _启动窗口.插入表项 (., , 文件信息, 图片索引, , , ))
        _启动窗口.置标题 (., a, 1, 类型注册项名)
        _启动窗口.置标题 (., a, 2, 相加 (文件明细数组 [2], “KB”))
        _启动窗口.置标题 (., a, 3, 文件明细数组 [3])
        .如果真 (不等于 (GetInputState (), 0))
            处理事件 ()
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (_启动窗口.., 小图片组)
赋值 (_启动窗口..字体大小, 真)









.子程序 状态, 文本型, , 
.参数 N, 整数型, , 

.如果真 (并且 (大于或等于 (N, 1), 小于或等于 (N, 7)))
    返回 (多项选择 (N, “已停止”, “准备开始”, “准备停止”, “正在运行”, “准备继续”, “准备暂停”, “已暂停”))
.如果真结束
返回 (相加 (“未知状态：”, 到文本 (N)))

.子程序 注册表加入, 空白型, , 
.参数 信息, 文本型, , 

.局部变量 容器, 整数型, , , 
.局部变量 容器1, 整数型, , , 
.局部变量 容器2, 整数型, , , 
.局部变量 剩余信息, 文本型, , , 
.局部变量 容器3, 整数型, , , 
.局部变量 本次信息, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 文本数组, 文本型, , "0", 
.局部变量 远程路径, 文本型, , , 
.局部变量 本地保存名, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 整数变量, 整数型, , , 


赋值 (文本数组, 分割文本 (信息, “к”, ))
_启动窗口.全部删除 (.)
.如果 (等于 (_启动窗口.取项目文本 (., 相加 (注册表位置, 1)), “正在读取，请稍后！”))
    _启动窗口.删除项目 (., 相加 (注册表位置, 1))
.否则
    赋值 (容器1, 相加 (注册表位置, 1))
    赋值 (容器3, _启动窗口.取父项目 (., 容器1))
    .判断循环首 (等于 (注册表位置, 容器3))
        _启动窗口.删除项目 (., 容器1)
        赋值 (容器3, _启动窗口.取父项目 (., 容器1))
    .判断循环尾 ()
.如果结束
赋值 (容器, 寻找文本 (信息, “к”, , 假))
赋值 (容器1, 到数值 (取文本左边 (信息, 相减 (容器, 1))))
赋值 (剩余信息, 取文本右边 (信息, 相减 (取文本长度 (信息), 容器, 1)))
.计次循环首 (容器1, )
    赋值 (容器2, 寻找文本 (剩余信息, “к”, , 假))
    赋值 (本次信息, 取文本左边 (剩余信息, 相减 (容器2, 1)))
    赋值 (容器, 取文本长度 (本次信息))
    赋值 (容器3, _启动窗口.加入项目 (., 注册表位置, 取文本左边 (本次信息, 相减 (容器, 1)), 4, 5, , , ))
    .如果真 (等于 (取文本右边 (本次信息, 1), “0”))
        _启动窗口.加入项目 (., 容器3, “正在读取，请稍后！”, , , , , )
    .如果真结束
    赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器2, 1)))
.计次循环尾 ()
赋值 (容器, 寻找文本 (剩余信息, “*#$”, , 假))
.如果真 (不等于 (容器, -1))
    赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器, 2)))
    赋值 (容器, 寻找文本 (剩余信息, “к”, , 假))
    赋值 (容器1, 到数值 (取文本左边 (剩余信息, 相减 (容器, 1))))
    赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器, 1)))
    .计次循环首 (容器1, )
        赋值 (容器2, 寻找文本 (剩余信息, “к”, , 假))
        赋值 (本次信息, 取文本左边 (剩余信息, 相减 (容器2, 1)))
        赋值 (容器, 寻找文本 (本次信息, “ё”, , 假))
         ' "  "
        赋值 (i, 到数值 (取文本中间 (本次信息, 相加 (容器, 2), 1)))
        .如果 (小于 (i, 3))
            赋值 (容器3, _启动窗口.插入表项 (., , 取文本左边 (本次信息, 相减 (容器, 1)), 0, , , i))
        .否则
            赋值 (容器3, _启动窗口.插入表项 (., , 取文本左边 (本次信息, 相减 (容器, 1)), 1, , , i))
        .如果结束
        _启动窗口.置标题 (., 容器3, 1, 取类型 (i))
        _启动窗口.置标题 (., 容器3, 2, 取文本右边 (本次信息, 相减 (取文本长度 (本次信息), 容器, 2)))
        赋值 (剩余信息, 取文本右边 (剩余信息, 相减 (取文本长度 (剩余信息), 容器2, 1)))
    .计次循环尾 ()
    
.如果真结束
_启动窗口.置文本 (., 1, 相加 (“读取远程注册表: ”, _启动窗口..标题, “ 成功”))
 ' 状态条置文本 (“读取远程注册表: ” ＋ 标签13.标题 ＋ “ 成功”)
赋值 (注册表双击, 假)

.子程序 取类型, 文本型, , 
.参数 nd, 整数型, , 

.如果真 (或者 (小于 (nd, 1), 大于 (nd, 8)))
    返回 (“字符串”)
.如果真结束
返回 (多项选择 (nd, “字符串”, “扩展字符串”, “二进制数据”, “小尾DWORD值”, “大尾DWORD值”, “Unicode符号链接”, “多字符串”, “设备驱动程序资源表”))

.子程序 组合差异图片, 字节集, , 
.参数 原图, 字节集, , 
.参数 差异图, 字节集, , 

.局部变量 图像宽, 整数型, , , 
.局部变量 图像高, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 偏移, 整数型, , , 

赋值 (图像宽, 相加 (原图 [19], 相乘 (原图 [20], 256)))
赋值 (图像高, 相加 (原图 [23], 相乘 (原图 [24], 256)))
赋值 (数据, 原图)
赋值 (偏移, 选择 (等于 (求余数 (相乘 (图像宽, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (图像宽, 3), 4))))
置入代码 ({ 51, 246, 190, 54, 4, 0, 0, 51, 219, 139, 93, 12, 139, 27, 51, 255, 139, 125, 244, 139, 69, 248, 51, 201, 65, 81, 80, 59, 200, 15, 143, 45, 0, 0, 0, 139, 69, 252, 51, 201, 65, 81, 80, 59, 200, 15, 143, 19, 0, 0, 0, 138, 68, 51, 8, 60, 12, 117, 2, 235, 4, 136, 68, 62, 8, 70, 88, 89, 235, 226, 131, 196, 8, 3, 117, 240, 88, 89, 235, 200, 131, 196, 8 })
返回 (数据)

.子程序 添加传输文件_, 空白型, , 
.参数 下载_上传, 整数型, , 下载=0 上传=1
.参数 连接地址, 整数型, , 
.参数 远程文件路径, 文本型, , 
.参数 总文件大小, 长整数型, , 
.参数 本地文件路径, 文本型, 可空, 

.局部变量 临时项目, 空白型, , , 
.局部变量 客户信息, 客户信息, , , 
.局部变量 a, 整数型, , , 
.局部变量 整数变量, 整数型, , , 
.局部变量 未知, 整数型, , , 
.局部变量 位置A, 整数型, , , 

 ' 临时项目.下载_上传 ＝ 下载_上传
 ' 临时项目.连接地址 [1] ＝ 连接地址
 ' 临时项目.文件大小 [1] ＝ 总文件大小
 ' 临时项目.文件路径 [1] ＝ 远程文件路径
 ' 临时项目.文件路径 [2] ＝ 本地文件路径
 ' 客户信息 ＝ TCP服务器.取回客户 (连接地址)
 ' 临时项目.客户信息 ＝ 客户信息.IP
 ' 临时项目.时间 [1] ＝ 时间运算 ()

 ' 置随机数种子 ()
 ' 临时项目.编号 ＝ 到文本 (取随机数 (10000, 99999))

 ' 加入成员 (传输项目组, 临时项目)

 ' 位置A ＝ 取数组成员数 (传输项目组)

 ' ' 执行传送 ()


 ' ' 0、编号 1、方式 2、客户 3、文件名 4、文件大小 5、完成进度 6、创建时间 7、开始时间 8、状态说明
 ' a ＝ 传输窗口.传输列表框.插入表项 (, “停止”, , 6, , )
 ' .如果 (等于 ( [位置A], , 0))
     ' 传输窗口.传输列表框.置标题 (a, 1, “下载”)
     ' 传输窗口.传输列表框.置图片 (a, 1, 3)
.否则
     ' 传输窗口.传输列表框.置标题 (a, 1, “上传”)
     ' 传输窗口.传输列表框.置图片 (a, 1, 2)
.如果结束
 ' 传输窗口.传输列表框.置标题 (a, 2, 传输项目组 [位置A].客户信息)
 ' 整数变量 ＝ 倒找文本 (传输项目组 [位置A].文件路径 [1], “\”, , 假)
 ' 传输窗口.传输列表框.置标题 (a, 3, 取文本右边 (传输项目组 [位置A].文件路径 [1], 取文本长度 (传输项目组 [位置A].文件路径 [1]) － 整数变量))
 ' 整数变量 ＝ 传输项目组 [位置A].文件大小 [1] ＼ 1024  ' ＋ 1
 ' 传输窗口.传输列表框.置标题 (a, 4, 数值到格式文本 (整数变量, 0, 真) ＋ “ KB”)
 ' 传输窗口.传输列表框.置标题 (a, 5, “0%”)
 ' 传输窗口.传输列表框.置标题 (a, 6, 传输项目组 [位置A].时间 [1])
 ' ' 传输窗口.传输列表框.置标题 (a, 7, “ 停止”)
 ' 传输窗口.传输列表框.置标题 (a, 9, 传输项目组 [位置A].编号)

 ' 传输项目组 [位置A].状态 ＝ 1  ' 自动上传

.子程序 浏览文件夹子程序, 文本型, , ’假，返回空
.参数 标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 文件夹信息, 文件夹信息_, , , 
.局部变量 项目标识符列表, 项目标识符列表_, , , 
.局部变量 路径, 文本型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (文件夹信息.标题, 标题)
赋值 (文件夹信息.窗口句柄, 窗口句柄)
赋值 (路径, 取空白文本 (255))
赋值 (返回值, 浏览文件夹信息_ (文件夹信息))
从列表id取路径_ (返回值, 路径)
返回 (路径)

.子程序 命令广播, 空白型, , 
.参数 数据, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 次数, 整数型, , , 

赋值 (次数, 0)
.计次循环首 (_启动窗口.取表项数 (.), i)
    .如果真 (等于 (_启动窗口.取当前状态图片 (., 相减 (i, 1)), 1))
        传送数据子程序 (到整数 (_启动窗口.取标题 (., 相减 (i, 1), 8)), 数据)
        赋值 (次数, 相加 (次数, 1))
    .如果真结束
    处理事件 ()
.计次循环尾 ()
调试输出 (相加 (到文本 (次数), “条命令发送完毕!请等待主机回应.  ”))

.子程序 视频_组合差异图片, 字节集, , 
.参数 底图, 字节集, , 只支持bmp 且两张图的大小、尺寸必须相同
.参数 差异图, 字节集, , 

.局部变量 计次, 整数型, , , 
.局部变量 偏移, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 图像宽, 整数型, , , 
.局部变量 图像高, 整数型, , , 

 ' 同上..不解释
.如果真 (或者 (小于或等于 (取字节集长度 (底图), 56), 不等于 (底图 [1], 66), 不等于 (底图 [2], 77), 不等于 (差异图 [1], 66), 不等于 (差异图 [2], 77)))
    返回 ({  })
.如果真结束
赋值 (图像宽, 相加 (底图 [19], 相乘 (底图 [20], 256)))
赋值 (图像高, 相加 (底图 [23], 相乘 (底图 [24], 256)))
.如果真 (或者 (不等于 (相加 (差异图 [19], 相乘 (差异图 [20], 256)), 图像宽), 不等于 (相加 (差异图 [23], 相乘 (差异图 [24], 256)), 图像高)))
    返回 ({  })
.如果真结束
 ' 同上..不解释
赋值 (计次, 55)
赋值 (数据, 差异图)
赋值 (偏移, 选择 (等于 (求余数 (相乘 (图像宽, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (图像宽, 3), 4))))
.计次循环首 (图像高, )
    .计次循环首 (图像宽, )
         ' 检查改点是否为白色
        .如果真 (并且 (等于 (差异图 [计次], 253), 等于 (差异图 [相加 (计次, 1)], 254), 等于 (差异图 [相加 (计次, 2)], 255)))
             ' 如果为白色则保持原图的点颜色不变
            赋值 (数据 [计次], 底图 [计次])
            赋值 (数据 [相加 (计次, 1)], 底图 [相加 (计次, 1)])
            赋值 (数据 [相加 (计次, 2)], 底图 [相加 (计次, 2)])
        .如果真结束
        赋值 (计次, 相加 (计次, 3))
    .计次循环尾 ()
    赋值 (计次, 相加 (计次, 偏移))
.计次循环尾 ()
返回 (数据)


.子程序 时间运算, 文本型, , 
.局部变量 h, 文本型, , , 
.局部变量 min, 文本型, , , 
.局部变量 s, 文本型, , , 
.局部变量 T, 文本型, , , 

.如果 (小于 (到整数 (到数值 (取日 (取现行时间 ()))), 10))
    赋值 (s, 相加 (“0”, 到文本 (到数值 (取日 (取现行时间 ())))))
.否则
    赋值 (s, 到文本 (到数值 (取日 (取现行时间 ()))))
.如果结束

.如果 (小于 (到整数 (到数值 (取小时 (取现行时间 ()))), 10))
    赋值 (h, 相加 (“0”, 到文本 (到数值 (取小时 (取现行时间 ())))))
.否则
    赋值 (h, 到文本 (到数值 (取小时 (取现行时间 ()))))
.如果结束

.如果 (小于 (到整数 (到数值 (取分钟 (取现行时间 ()))), 10))
    赋值 (min, 相加 (“0”, 到文本 (到数值 (取分钟 (取现行时间 ())))))
.否则
    赋值 (min, 到文本 (到数值 (取分钟 (取现行时间 ()))))
.如果结束


赋值 (T, 相加 (s, “-”, h, “:”, min))
返回 (T)

.子程序 创建目录_, 整数型, 公开, 1：创建失败 2：目录已经存在 0：创建成功
.参数 目录完整路径, 文本型, , 

.局部变量 文件夹名称组, 文本型, , "0", 
.局部变量 数组成员数量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 临时目录数组, 文本型, , "0", 

赋值 (临时目录数组, 分割文本 (目录完整路径, “\”, ))
复制数组 (文件夹名称组, 临时目录数组)
赋值 (数组成员数量, 取数组成员数 (文件夹名称组))
.如果真 (小于 (数组成员数量, 2))
    返回 (1)
.如果真结束
赋值 (临时文本, 文件夹名称组 [1]) ' 磁盘符号
.如果真 (不等于 (取文本长度 (临时文本), 2)) ' c:
    返回 (1)
.如果真结束
.如果真 (不等于 (取文本右边 (临时文本, 1), “:”)) ' 是否为“:”
    返回 (1)
.如果真结束

.计次循环首 (相减 (数组成员数量, 1), 计次变量)
    .如果真 (或者 (等于 (文件夹名称组 [相加 (计次变量, 1)], “.”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “..”), 等于 (文件夹名称组 [相加 (计次变量, 1)], “”)))
        返回 (1)
    .如果真结束
    赋值 (临时文本, 相加 (临时文本, “\”, 文件夹名称组 [相加 (计次变量, 1)]))
    .如果 (等于 (寻找文件 (临时文本, #子目录), “”))
        .如果真 (等于 (CreateDirectoryA (临时文本, 0), 假))
            返回 (1) ' 创建失败
        .如果真结束
        
    .否则
        .如果真 (等于 (计次变量, 相减 (数组成员数量, 1)))
            返回 (2) ' 最后一个文件夹已经存在
        .如果真结束
        
    .如果结束
    
.计次循环尾 ()
返回 (0)

.窗口程序集 注册表窗口程序集, , , 

.子程序 _窗口4_创建完毕, 空白型, , 
.判断开始 (等于 (注册表功能, 1))
    赋值 (窗口4., “注册表 - - 加入表项”)
    .如果 (不等于 (取文本右边 (_启动窗口..标题, 1), “\”))
        赋值 (.内容, 相加 (_启动窗口..标题, “\”))
    .否则
        赋值 (.内容, _启动窗口..标题)
    .如果结束
    返回 ()
.判断 (等于 (注册表功能, 2))
    赋值 (窗口4., “注册表 - - 修改表项”)
    赋值 (.禁止, 真)
    赋值 (.内容, _启动窗口..标题)
    赋值 (.内容, _启动窗口..标题)
    .如果 (不等于 (取文本右边 (_启动窗口..标题, 1), “\”))
        赋值 (.内容, 相加 (_启动窗口..标题, “\”))
    .否则
        赋值 (.内容, _启动窗口..标题)
    .如果结束
    返回 ()
.判断 (等于 (注册表功能, 3))
    赋值 (窗口4., “注册表 - - 重命名表项”)
    赋值 (.标题, “旧名:”)
    赋值 (.标题, “新名:”)
    .如果 (不等于 (取文本右边 (_启动窗口..标题, 1), “\”))
        赋值 (.内容, 相加 (_启动窗口..标题, “\”))
    .否则
        赋值 (.内容, _启动窗口..标题)
    .如果结束
    赋值 (.内容, _启动窗口..标题)
    赋值 (.禁止, 真)
    赋值 (.高度, .高度)
    赋值 (.是否允许多行, 假)
    赋值 (.内容, _启动窗口..标题)
    返回 ()
.默认
    
.判断结束
窗口4.销毁 ()

.子程序 _窗口4_可否被关闭, 逻辑型, , 
赋值 (.禁止, 假)
赋值 (.内容, “”)
赋值 (.禁止, 假)
赋值 (.内容, “”)
赋值 (.标题, “名称：”)
赋值 (.标题, “数值：”)
赋值 (.是否允许多行, 真)
赋值 (.高度, 153)

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 容器1, 整数型, , , 
.局部变量 d, 文本型, , , 
.局部变量 传输信息, 文本型, , , 

赋值 (容器1, 寻找文本 (.内容, “\”, 2, 假))
赋值 (d, _启动窗口.根名转根值 (取文本左边 (.内容, 相减 (容器1, 1))))
赋值 (传输信息, 取文本右边 (.内容, 相减 (取文本长度 (.内容), 容器1)))
.如果真 (等于 (取文本左边 (传输信息, 1), “\”))
    赋值 (传输信息, 取文本右边 (传输信息, 相减 (取文本长度 (传输信息), 1)))
.如果真结束
.判断开始 (等于 (注册表功能, 1))
    .如果真 (不等于 (取文本右边 (传输信息, 1), “\”))
        赋值 (传输信息, 相加 (传输信息, “\”))
    .如果真结束
    
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 2 }, 到字节集 (到文本 (相加 (d, “|”, 传输信息, .内容, “|”, .内容)))))
     ' _启动窗口.控制服务器发送数据 (“注册表@2” ＋ d ＋ “|” ＋ 传输信息 ＋ 名称1.内容 ＋ “|” ＋ 数值1.内容 ＋ “|sdgfds|@sdaf@”)
    窗口4.销毁 ()
.判断 (等于 (注册表功能, 2))
    .如果真 (不等于 (取文本右边 (传输信息, 1), “\”))
        赋值 (传输信息, 相加 (传输信息, “\”))
    .如果真结束
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 2 }, 到字节集 (到文本 (相加 (d, “|”, 传输信息, .内容, “|”, .内容)))))
     ' _启动窗口.控制服务器发送数据 (“注册表@2” ＋ d ＋ “|” ＋ 传输信息 ＋ 名称1.内容 ＋ “|” ＋ 数值1.内容 ＋ “@sdaf@”)
    窗口4.销毁 ()
.判断 (等于 (注册表功能, 3))
    .如果真 (不等于 (取文本右边 (传输信息, 1), “\”))
        赋值 (传输信息, 相加 (传输信息, “\”))
    .如果真结束
    传送数据子程序 (现操作地址, 相加 ({ 6 }, { 2 }, 到字节集 (到文本 (相加 (d, “|”, 传输信息, “|”, 传输信息, .内容, “|”, .内容)))))
     ' _启动窗口.控制服务器发送数据 (“注册表@3” ＋ d ＋ “|” ＋ 传输信息 ＋ “|” ＋ 传输信息 ＋ 数值1.内容 ＋ “|” ＋ 名称1.内容 ＋ “|ffff@sdaf@”)
    窗口4.销毁 ()
.默认
    
.判断结束


.子程序 _按钮2_被单击, 空白型, , 
窗口4.销毁 ()

.窗口程序集 视频声音窗口程序集, , , 

.程序集变量 放音格式, WAVEFORMATEX, , , 
.程序集变量 放音设备号, 整数型, , , 
.程序集变量 缓存大小, 整数型, , , 
.程序集变量 缓存1, 字节集, , , 
.程序集变量 缓存1地址, 整数型, , , 
.程序集变量 放音数据1, WAVEHDR, , , 
.程序集变量 处理序号, 整数型, , , 
.程序集变量 文件号, 整数型, , , 
.程序集变量 数据, 字节集, , , 
.程序集变量 t, 空白型, , , 
.程序集变量 匿名程序集变量_5264, 空白型, , , 
.程序集变量 语音状态, 逻辑型, , , 
.子程序 __远程视频窗口_创建完毕, 空白型, , 
赋值 (., 真)
赋值 (.禁止, 真)

.子程序 数据处理, 空白型, , 
.参数 hwi, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 dwInstance, 整数型, , 
.参数 dwParam1, 整数型, , 
.参数 dwParam2, 整数型, , 

.判断开始 (等于 (uMsg, 957))
    .判断开始 (等于 (处理序号, 1))
        赋值 (缓存1, 数据)
        赋值 (缓存大小, 取字节集长度 (数据))
        赋值 (缓存1地址, 取地址_ (缓存1, 缓存1, 0))
        赋值 (放音数据1.缓冲指针, 缓存1地址)
        赋值 (放音数据1.缓冲大小, 缓存大小)
        赋值 (放音数据1.dwFlags, 1)
        清除缓冲 (放音设备号, 放音数据1, 32)
        写入声音输出设备 (放音设备号, 放音数据1, 32)
         ' 开始播放语音 ()
        赋值 (.时钟周期, 10) ' 传送数据子程序 (现操作地址, { 10 } ＋ { 2 } ＋ 到字节集 (_远程视频窗口.声音设备组合框.现行选中项))
    .判断 (等于 (处理序号, 0))
        清除缓冲 (放音设备号, 放音数据1, 32)
        停止声音回放 (放音设备号)
        关闭放音设备 (放音设备号)
        赋值 (缓存1, {  })
    .默认
        
    .判断结束
    
.默认
    
.判断结束


.子程序 开始播放语音, 空白型, , 
.参数 声音, 字节集, , 

 ' .如果真 (等于 (打开 (), 假))
     ' 返回 ()
.如果真结束

 ' 文件号 ＝ 打开文件 (通用对话框1.文件名, , )

 ' 关闭文件 (文件号)
赋值 (数据, 声音)
.如果 (大于或等于 (查找放音设备 (), 1))
    赋值 (t, 0)
    
    赋值 (放音格式.格式, 1)
    赋值 (放音格式.声道, 1)
    赋值 (放音格式.采样率, 22050)
    赋值 (放音格式.位数, 8)
    赋值 (放音格式.数据量, 相除 (相乘 (放音格式.位数, 放音格式.采样率, 放音格式.声道), 8))
    赋值 (放音格式.对齐单位, 相除 (相乘 (放音格式.位数, 放音格式.声道), 8))
    
    
    打开放音设备 (放音设备号, -1, 放音格式, &数据处理, 0, 196608)
    
    赋值 (缓存1, 数据)
    赋值 (缓存大小, 取字节集长度 (数据))
    赋值 (缓存1地址, 取地址_ (缓存1, 缓存1, 0))
    赋值 (放音数据1.缓冲指针, 缓存1地址)
    赋值 (放音数据1.缓冲大小, 缓存大小)
    赋值 (放音数据1.dwFlags, 1)
    准备缓冲 (放音设备号, 放音数据1, 32)
    写入声音输出设备 (放音设备号, 放音数据1, 32)
    赋值 (处理序号, 1)
.否则
    信息框 (“无放音设备”, 0, )
.如果结束


.子程序 停止播放语音, 空白型, , 
赋值 (处理序号, 0)

.子程序 _视频驱动_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 8 }, { 1 }, 到字节集 (“视频驱动”))) ' 刷新视频驱动

.子程序 _视频启动_被单击, 空白型, , 
.如果真 (等于 (.现行选中项, -1))
    信息框 (“请选择使用的设备!”, 0, )
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 8 }, { 2 }, 到字节集 (.现行选中项)))
赋值 (视频状态, 真)
赋值 (., 真)
赋值 (., 假)

.子程序 _视频停止_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 8 }, { 4 }, 到字节集 (“停止发送”)))
赋值 (视频状态, 假)
赋值 (., 假)
赋值 (., 真)

.子程序 __远程视频窗口_可否被关闭, 逻辑型, , 
.如果真 (视频状态)
    传送数据子程序 (现操作地址, 相加 ({ 8 }, { 3 }, 到字节集 (“停止发送”)))
    赋值 (视频状态, 假)
.如果真结束
.如果真 (语音状态)
    停止播放语音 ()
    传送数据子程序 (现操作地址, 相加 ({ 10 }, { 2 }))
.如果真结束
返回 (真)

.子程序 _音频启动_被单击, 空白型, , 
.如果真 (语音状态)
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 10 }, { 1 }))
赋值 (语音状态, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 假)
赋值 (.时钟周期, 10)

.子程序 _音频关闭_被单击, 空白型, , 
.如果真 (等于 (语音状态, 假))
    返回 ()
.如果真结束
传送数据子程序 (现操作地址, 相加 ({ 10 }, { 3 }))
停止播放语音 ()
赋值 (语音状态, 假)
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (.时钟周期, 0)

.子程序 _保存图片_被单击, 空白型, , 
创建目录 (相加 (取运行目录 (), “\视频图片\”))
写到文件 (相加 (取运行目录 (), “\视频图片\”, 到文本 (取现行时间 ()), “.bmp”), 320.取图片 (240))

.子程序 _时钟1_周期事件, 空白型, , 
.如果真 (不等于 (全局_声音, {  }))
    开始播放语音 (全局_声音)
    赋值 (全局_声音, {  })
    赋值 (.时钟周期, 0)
.如果真结束


.窗口程序集 窗口程序集4, , , 

.子程序 _按钮1_被单击, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 4 }, { 1 }, 到字节集 (到文本 (相加 (.标题, “| ”, .内容, “ |”, 到文本 (.取项目数值 (.现行选中项)))))))
销毁 ()

.子程序 _窗口1_可否被关闭, 逻辑型, , 
赋值 (.标题, “”)

.子程序 _按钮2_被单击, 空白型, , 
销毁 ()

.子程序 _窗口1_创建完毕, 空白型, , 
赋值 (窗口1., 相加 (相减 (窗口1., 取用户区高度 ()), 185))
赋值 (.现行选中项, 0)

.窗口程序集 TELNET窗口程序集, , , 

.程序集变量 后来, 整数型, , , 
.程序集变量 得到, 整数型, , , 
.程序集变量 得到字符, 文本型, , , 
.子程序 __TELNET_创建完毕, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 11 }, { 1 }))

.子程序 _执行按钮_被单击, 空白型, , 
.如果真 (不等于 (.内容, “”))
    传送数据子程序 (现操作地址, 相加 ({ 11 }, { 2 }, 到字节集 (.内容)))
    赋值 (.内容, “”)
.如果真结束


.子程序 __TELNET_将被销毁, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 11 }, { 3 }))

.子程序 _编辑框1_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.局部变量 发送数据, 字节集, , , 

.如果真 (等于 (字符代码, #回车键))
    赋值 (后来, 取文本长度 (.内容))
    赋值 (得到, 相减 (后来, 启始))
    赋值 (得到字符, 取文本右边 (.内容, 得到))
    传送数据子程序 (现操作地址, 相加 ({ 11 }, { 2 }, 到字节集 (得到字符)))
     ' 发送数据 ＝ 到字节集 (自动上线密码 ＋ “||~!@*$%^&||” ＋ “系统信息” ＋ “||~!@*$%^&||” ＋ “发送DOS” ＋ “||~!@*$%^&||” ＋ 得到字符)
     ' 发送数据 (_启动窗口.编辑框1.内容, 发送数据, 连接主机超时)
.如果真结束
.如果 (等于 (字符代码, #退格键))
    赋值 (后来, 取文本长度 (.内容))
    赋值 (得到, 相减 (后来, 启始))
    .如果 (等于 (得到, 0))
        赋值 (.输入方式, 1)
    .否则
        
    .如果结束
    
.否则
    赋值 (.输入方式, 0)
.如果结束


.子程序 _组合框1_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _执行按钮_被单击 ()
.如果真结束


.类模块 文件读写, , , 

.子程序 打开文件, 整数型, , 成功返回文件句柄 ,失败返回 -1  .  会设置GetLastError
.参数 文件名, 文本型, , 欲打开的文件名称
.参数 打开方式, 整数型, 可空, 默认 #打开方式_读写
.参数 共享方式, 整数型, 可空, 默认 #共享方式_不共享



.子程序 关闭文件, 空白型, , 关闭一个已打开的文件
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.子程序 移动读写位置, 长整数型, , 成功返回新位置, 失败返回 -1 . 会设置GetLastError
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 长整数型, , 参数值指定相对于起始移动位置的移动长度。



.子程序 取文件长度, 长整数型, , 成功返回文件长度 ,失败返回 -1 .会设置GetLastError
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.子程序 读入字节集, 整数型, , 成功返回 实际读入的字节数 ,失败返回 -1 . 会设置GetLastError
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。
.参数 存放数据的变量, 字节集, 参考, 
.参数 欲读入数据的长度, 整数型, , 



.子程序 写出字节集, 整数型, , 成功返回 实际写出字节数, 失败返回 -1 . 会设置GetLastError
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。
.参数 欲写出的字节集数据, 字节集, , 



.子程序 取读写位置, 长整数型, , 成功返回 当前读写位置 , 失败返回 -1 . 会设置GetLastError
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.子程序 是否在文件尾, 逻辑型, , 
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.子程序 移到文件首, 逻辑型, , 成功返回真 , 失败返回假
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.子程序 移到文件尾, 逻辑型, , 成功返回真 , 失败返回假
.参数 文件句柄, 整数型, , 该句柄由“打开文件”命令所返回。



.程序集 文件, , , 

.子程序 文件_移动文件, 逻辑型, 公开, 
.参数 被移动的文件, 文本型, , 
.参数 移动到的位置, 文本型, , 

返回 (MoveFileExA (被移动的文件, 移动到的位置, 2))

.子程序 文件_复制文件, 逻辑型, 公开, 
.参数 被复制的文件名, 文本型, , 
.参数 复制到的文件名, 文本型, , 

返回 (不等于 (CopyFileA (被复制的文件名, 复制到的文件名, 0), 0))

.子程序 文件_删除文件, 逻辑型, 公开, 
.参数 欲删除的文件, 文本型, 可空, 

返回 (不等于 (DeleteFileA (欲删除的文件), 0))

.子程序 文件_取临时文件名, 文本型, 公开, 
.参数 指定目录, 文本型, 可空, 留空为默认为系统临时目录。

.局部变量 长度, 整数型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件名, 文本型, , , 

.如果 (是否为空 (指定目录))
    赋值 (长度, GetTempPathA (长度, 路径))
    赋值 (路径, 取空白文本 (300))
    GetTempPathA (长度, 路径)
    赋值 (文件名, 取空白文本 (300))
    GetTempFileNameA (路径, 0, 0, 文件名)
    DeleteFileA (文件名)
.否则
    赋值 (文件名, 取空白文本 (300))
    GetTempFileNameA (指定目录, 0, 0, 文件名)
    DeleteFileA (文件名)
.如果结束
返回 (文件名)

.子程序 文件_更名, 逻辑型, 公开, 
.参数 欲更名的原文件或目录名, 文本型, , 
.参数 欲更改为的现文件或目录名, 文本型, , 

返回 (MoveFileExA (欲更名的原文件或目录名, 欲更改为的现文件或目录名, 0))

.子程序 文件_是否存在, 逻辑型, 公开, 
.参数 欲测试的文件名称, 文本型, , 

.局部变量 句柄, 空白型, , , 

赋值 (句柄, 文件_打开文件 (欲测试的文件名称, , ))
.如果 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.否则
    CloseHandle (句柄)
    返回 (真)
.如果结束


.子程序 文件_取文件尺寸, 整数型, 公开, 失败返回-1。
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 句柄, 整数型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (-1)
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
CloseHandle (句柄)
返回 (选择 (等于 (大小, 429496729), -1, 大小))

.子程序 文件_关闭文件, 逻辑型, 公开, CloseHandle非零表示成功，零表示失败。会设置GetLastError关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
.参数 欲关闭的文件号, 整数型, , 该文件号由“打开文件”命令所返回。

.局部变量 变量, 整数型, , , 
.局部变量 返回, 逻辑型, , , 

 ' 关闭文件 ()

赋值 (变量, CloseHandle (欲关闭的文件号))
.如果真 (不等于 (变量, 0))
    赋值 (返回, 真)
    
.如果真结束
返回 (返回)


.子程序 文件_读入文件, 字节集, 公开, 
.参数 文件名, 文本型, , 

.局部变量 大小, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 实际读入的字符数, 空白型, , , 

赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (大小, GetFileSize (句柄, 0))
.如果真 (等于 (大小, 4294967295))
    CloseHandle (句柄)
    返回 ({  })
.如果真结束
赋值 (字节集, 取空白字节集 (大小))
 ' lread (句柄, 字节集, 大小)
ReadFile (句柄, 字节集, 大小, 实际读入的字符数, 0)

CloseHandle (句柄)
返回 (字节集)

.子程序 文件_写到文件, 逻辑型, 公开, 
.参数 文件名, 文本型, , 
.参数 欲写入数据, 字节集, , 

.局部变量 句柄, 整数型, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 实际写入字节数量, 空白型, , , 
.局部变量 返回, 逻辑型, , , 

赋值 (句柄, 文件_打开文件 (文件名, 4, 4))
 ' 句柄 ＝ 文件_打开文件 (核心_取当前目录 () ＋ “\bb.txt”, , )
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
 ' 返回值 ＝ lwrite (句柄, 欲写入数据, 取字节集长度 (欲写入数据))
.如果 (WriteFile (句柄, 欲写入数据, 取字节集长度 (欲写入数据), 实际写入字节数量, 0))
    赋值 (返回, 真)
.否则
    赋值 (返回, 假)
.如果结束
CloseHandle (句柄)
返回 (返回)

.子程序 文件_取文件属性, 整数型, 公开, 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件名或目录名, 文本型, , 

返回 (GetFileAttributesA (文件名或目录名))

.子程序 文件_置文件属性, 逻辑型, 公开, 与支持库原命令使用方法一样，请参考支持库原命令的说明。
.参数 文件或目录名, 文本型, , 
.参数 欲设置为的属性值, 整数型, , 

返回 (SetFileAttributesA (文件或目录名, 欲设置为的属性值))

.子程序 文件_置文件时间, 逻辑型, 公开, 成功返回真，失败返回假。
.参数 文件名, 文本型, , 
.参数 新的创建时间, 日期时间型, 可空, 至少选择一项修改。
.参数 新的修改时间, 日期时间型, 可空, 
.参数 新的上次访问时间, 日期时间型, 可空, 

.局部变量 返回值, 逻辑型, , , 
.局部变量 句柄, 整数型, , , 
.局部变量 FileTime, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 

.如果真 (并且 (是否为空 (新的创建时间), 是否为空 (新的修改时间), 是否为空 (新的上次访问时间)))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (等于 (句柄, -1))
    CloseHandle (句柄)
    返回 (假)
.如果真结束
赋值 (FileTime [1], 文件_VariantTimeToFileTime (新的创建时间))
赋值 (FileTime [2], 文件_VariantTimeToFileTime (新的上次访问时间))
赋值 (FileTime [3], 文件_VariantTimeToFileTime (新的修改时间))
.计次循环首 (3, 计次)
    LocalFileTimeToFileTime (FileTime [计次], FileTime [计次])
.计次循环尾 ()
赋值 (返回值, SetFileTime (句柄, FileTime [1], FileTime [2], FileTime [3]))
CloseHandle (句柄)
返回 (返回值)

.子程序 文件_取文件时间, 日期时间型, 公开, 返回文件上一次修改的时间。
.参数 文件名, 文本型, , 
.参数 文件的创建时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。
.参数 文件上次访问时间, 日期时间型, 参考 可空, 可提供变量接收此文件的该额外信息，不需要可不填。

.局部变量 句柄, 整数型, , , 
.局部变量 时间, 日期时间型, , "3", 
.局部变量 FILETIME, FILETIME, , "3", 
.局部变量 计次, 整数型, , , 


连续赋值 (核心_文本到时间 (“”), 时间 [3], 文件的创建时间, 文件上次访问时间)
赋值 (句柄, 文件_打开文件 (文件名, , ))
.如果真 (不等于 (句柄, -1))
    GetFileTime (句柄, FILETIME [1], FILETIME [2], FILETIME [3])
    CloseHandle (句柄)
    .计次循环首 (3, 计次)
        FileTimeToLocalFileTime (FILETIME [计次], FILETIME [计次])
        赋值 (时间 [计次], 文件_FileTimeToVariantTime (FILETIME [计次]))
    .计次循环尾 ()
    赋值 (文件的创建时间, 时间 [1])
    赋值 (文件上次访问时间, 时间 [2])
.如果真结束
CloseHandle (句柄)
返回 (时间 [3])

.子程序 文件_FileTimeToVariantTime, 日期时间型, , 
.参数 FileTime, FILETIME, , 

.局部变量 系统时间, 系统时间, , , 
.局部变量 时间, 日期时间型, , , 

FileTimeToSystemTime (FileTime, 系统时间)
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.子程序 文件_VariantTimeToFileTime, FILETIME, , 
.参数 时间, 日期时间型, , 

.局部变量 FileTime, FILETIME, , , 
.局部变量 系统时间, 系统时间, , , 

VariantTimeToSystemTime (时间, 系统时间)
SystemTimeToFileTime (系统时间, FileTime)
返回 (FileTime)

.子程序 文件_进度移动, 逻辑型, 公开, 可移动文件，也可移动目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被移动的文件或目录, 文本型, , 
.参数 移动到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 1)
赋值 (类型.pFrom, 相加 (到字节集 (被移动的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (移动到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度复制, 逻辑型, 公开, 可复制文件，也可复制目录。成功返回真，失败返回假。参考了“美女勿进”的代码。
.参数 被复制的文件或目录, 文本型, , 
.参数 复制到的位置, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 2)
赋值 (类型.pFrom, 相加 (到字节集 (被复制的文件或目录), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (复制到的位置), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 1021, 1024, 4, 0))
.否则
    赋值 (类型.fFlags, 1021)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_进度删除, 逻辑型, 公开, 可删除文件，也可删除目录。成功返回真，失败返回假。
.参数 欲删除的文件或目录, 文本型, , 
.参数 复制选项, 整数型, 可空, 1.#既不提示错误，也不显示进度；2.#不提示错误，显示进度；3.#不显示进度；4.#既提示错误，又显示进度。如果被省略，默认值为 1 。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (到字节集 (欲删除的文件或目录), { 0, 0 }))
.如果 (并且 (大于 (复制选项, 0), 小于或等于 (复制选项, 4)))
    赋值 (类型.fFlags, 多项选择 (复制选项, 55, 1040, 20, 16)) ' , 位或 (16, 1024) ', 位或 (4, 16),
.否则
    赋值 (类型.fFlags, 55)
.如果结束
返回 (等于 (SHFileOperationA (类型), 0))

.子程序 文件_打开文件, 整数型, 公开, 失败返回-1, 如果文件已用同一个类打开将会失败。
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 打开方式1, 整数型, , , 
.局部变量 共享方式1, 整数型, , , 
.局部变量 打开方式2, 整数型, , , 

.如果真 (是否为空 (打开方式))
    赋值 (打开方式, #读写)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.判断开始 (等于 (打开方式, #读入)) ' 从指定文件读入数据，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_READ) ' #OF_READ
.判断 (等于 (打开方式, #写出)) ' 写出数据到指定文件，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_WRITE) ' #OF_WRITE
.判断 (等于 (打开方式, #读写)) ' 从文件中读入数据或者写出数据到文件，如果该文件不存在则失败
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_READWRITE
.判断 (等于 (打开方式, #重写)) ' 写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_CREATE ＋ #OF_WRITE
.判断 (等于 (打开方式, #改写)) ' 写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, #GENERIC_WRITE) ' #OPEN_ALWAYS
.判断 (等于 (打开方式, #改读)) ' 从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OPEN_ALWAYS ＋ #OF_READWRITE
.默认
    
.判断结束
.判断开始 (等于 (共享方式, #无限制))
    赋值 (共享方式1, 相加 (#FILE_SHARE_WRITE, #FILE_SHARE_READ))
.判断 (等于 (共享方式, #禁止读))
    赋值 (共享方式1, #FILE_SHARE_WRITE)
.判断 (等于 (共享方式, #禁止写))
    赋值 (共享方式1, #FILE_SHARE_READ)
.判断 (等于 (共享方式, #禁止读写))
    赋值 (共享方式1, 0)
.默认
    
.判断结束

返回 (CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), #FILE_ATTRIBUTE_NORMAL, 0))

.子程序 文件_生成空文件, 长整数型, 公开, 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 空文件的尺寸, 长整数型, 可空, 默认为0
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 I, 长整数型, , , 
.局部变量 空白字节, 字节集, , , 
.局部变量 是否成功, 整数型, , , 
.局部变量 文件号, 空白型, , , 
.局部变量 文件长度, 空白型, , , 

 ' 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：
.如果真 (小于 (空文件的尺寸, 0))
    返回 (-1)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
赋值 (文件号, 文件_打开文件 (欲生成的文件名称, #重写, 共享方式))
.如果真 (不等于 (文件号, -1))
    .如果 (等于 (空文件的尺寸, 0))
        文件_关闭文件 (文件号)
        返回 (0)
    .否则
        .判断开始 (小于或等于 (空文件的尺寸, 2097152)) ' 2* 1024 × 1024) 2M
            文件_写出字节集 (文件号, 取空白字节集 (空文件的尺寸))
        .默认
            赋值 (空白字节, 取空白字节集 (2097152))
            赋值 (I, 整除 (空文件的尺寸, 2097152))
            .计次循环首 (I, )
                写出字节集 (文件号, 空白字节)
            .计次循环尾 ()
            赋值 (I, 相减 (空文件的尺寸, 相乘 (I, 2097152)))
            .如果真 (不等于 (I, 0))
                写出字节集 (文件号, 取空白字节集 (I))
            .如果真结束
            
        .判断结束
        
    .如果结束
    
.如果真结束
赋值 (文件长度, 取文件长度 (文件号))
文件_关闭文件 (文件号)
返回 (文件长度)

.子程序 文件_移到文件首, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_BEGIN), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移到文件尾, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

.如果 (等于 (SetFilePointer (文件号, 0, 0, #FILE_END), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 文件_移动读写位置, 逻辑型, 公开, 
.参数 文件号, 整数型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 整数型, , 

 ' 移动读写位置 （整数型 欲进行操作的文件号，［整数型 起始移动位置］，整数型 移动距离）
.如果真 (或者 (是否为空 (起始移动位置), 大于 (起始移动位置, #现行位置), 小于或等于 (起始移动位置, 0)))
    赋值 (起始移动位置, #文件首)
.如果真结束
.判断开始 (等于 (SetFilePointer (文件号, 移动距离, 0, 多项选择 (起始移动位置, #FILE_BEGIN, #FILE_END, #FILE_CURRENT)), -1))
    返回 (假)
.默认
    返回 (真)
.判断结束
 ' FILE_BEGIN lOffset将新位置设为从文件起始处开始算的起的一个偏移
 ' FILE_CURRENT lOffset将新位置设为从当前位置开始计算的一个偏移
 ' FILE_END


.子程序 文件_取读写位置, 整数型, 公开, 
.参数 文件号, 整数型, , 

返回 (SetFilePointer (文件号, 0, 0, #FILE_CURRENT))


.子程序 文件_取文件长度, 长整数型, 公开, 
.参数 文件号, 整数型, , 

.局部变量 高32位文件尺寸, 整数型, , , 
.局部变量 文件长度, 整数型, , , 

赋值 (文件长度, GetFileSize (文件号, 高32位文件尺寸))
返回 (到数值 (相加 (到字节集 (文件长度), 到字节集 (高32位文件尺寸))))


.子程序 文件_写出字节集, 逻辑型, 公开, 写出一段或数段字节集数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。
.参数 文件号, 整数型, , 
.参数 欲写出的字节集数据, 字节集, , 

.局部变量 实际写入字节数量, 整数型, , , 
.局部变量 写入字节数量, 整数型, , , 

赋值 (写入字节数量, 取字节集长度 (欲写出的字节集数据))
.判断开始 (等于 (WriteFile (文件号, 欲写出的字节集数据, 写入字节数量, 实际写入字节数量, 0), 假))
    返回 (假)
.默认
    返回 (取反 (等于 (实际写入字节数量, 0)))
.判断结束


.子程序 文件_是否在文件尾, 逻辑型, 公开, 
.参数 文件号, 整数型, , 

返回 (等于 (取读写位置 (文件号), 取文件长度 (文件号)))

.子程序 文件_取错误信息, 空白型, 公开, 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 

.局部变量 Bytes, 整数型, , , 

赋值 (错误号, GetLastError ())
.如果真 (不等于 (错误号, 0))
    赋值 (错误文本, 取空白文本 (129))
    赋值 (Bytes, FormatMessageA (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_ARGUMENT_ARRAY), 0, 错误号, 0, 错误文本, 128, 0))
    .判断开始 (大于 (Bytes, 2))
        赋值 (错误文本, 取文本左边 (错误文本, 相减 (Bytes, 2)))
    .默认
        赋值 (错误文本, “”)
    .判断结束
    
.如果真结束


.子程序 文件_读入字节集, 字节集, 公开, 
.参数 文件号, 整数型, , 
.参数 欲读入数据的长度, 整数型, 可空, 如果为空则读入 当前读写位置 到 文件尾 之间的全部字节集

.局部变量 缓冲区, 字节集, , , 
.局部变量 实际读入的字符数, 整数型, , , 


.如果真 (或者 (是否为空 (欲读入数据的长度), 等于 (欲读入数据的长度, 0)))
    赋值 (欲读入数据的长度, 相减 (取文件长度 (文件号), 取读写位置 (文件号)))
.如果真结束
赋值 (缓冲区, 取空白字节集 (欲读入数据的长度))
ReadFile (文件号, 缓冲区, 欲读入数据的长度, 实际读入的字符数, 0)
.判断开始 (等于 (欲读入数据的长度, 实际读入的字符数))
    返回 (缓冲区)
.默认
    返回 (取字节集左边 (缓冲区, 实际读入的字符数))
.判断结束


.子程序 文件_读入文本, 文本型, 公开, 从文件中当前读写位置读取并返回一段文本数据，实际读入长度（即返回文本的尺寸）可能会小于欲读入长度。如果该数据中存在字节 0 或 26（文本结束标志），将仅返回该字节之前的数据。
.参数 文件号, 整数型, , 
.参数 欲读入文本数据的长度, 整数型, 可空, 如果本参数被省略，默认读入文件中的所有文本数据。

 ' 〈文本型〉 读入文本 （整数型 欲读入文本数据的文件号，［整数型 欲读入文本数据的长度］）
返回 (到文本 (文件_读入字节集 (文件号, 欲读入文本数据的长度)))


.子程序 文件_写出文本, 逻辑型, 公开, 写出文本数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 文件号, 整数型, , 
.参数 欲写出的文本, 文本型, , 

 ' 调用格式： 〈逻辑型〉 写出文本 （整数型 欲写出文本的文件号，通用型 欲写出的文本，... ） - 系统核心支持库->文件读写
 ' 英文名称：WriteText
 ' 本命令用作写出一段或数段文本数据到文件中当前读写位置处。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出文本的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的文本”，类型为“通用型（all）”。参数值如果不为文本类型数据，将自动进行转换，如果无法转换（即数据类型为字节集、子程序指针、库或用户自定义数据类型），则不写出此数据。
返回 (文件_写出字节集 (文件号, 到字节集 (欲写出的文本)))


.子程序 核心_文本到时间, 日期时间型, , 将指定文本转换到时间日期型，如果格式不符合将出错，将返回100年1月1日。
.参数 文本, 文本型, , 目前只支持“1973年11月15日12时30分25秒”

.局部变量 位置, 整数型, , , 
.局部变量 时间, 日期时间型, , , 
.局部变量 系统时间, 系统时间, , , 

赋值 (系统时间.年, 100)
连续赋值 (1, 系统时间.月, 系统时间.日)
SystemTimeToVariantTime (系统时间, 时间)
.如果真 (不等于 (寻找文本 (文本, “年”, , 假), -1))
    赋值 (系统时间.年, 到整数 (取文本左边 (文本, 相减 (寻找文本 (文本, “年”, , 假), 1))))
    赋值 (位置, 寻找文本 (文本, “月”, , 假))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.月, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “年”, , 假), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (位置, 寻找文本 (文本, “日”, , 假))
    .如果 (不等于 (位置, -1))
        赋值 (系统时间.日, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “月”, , 假), 2), 相减 (位置, 1))))
    .否则
        返回 (时间)
    .如果结束
    赋值 (文本, 取文本右边 (文本, 相减 (取文本长度 (文本), 位置, 1)))
    
    赋值 (位置, 寻找文本 (文本, “时”, , 假))
    .如果真 (不等于 (位置, -1))
        赋值 (系统时间.时, 到整数 (取文本左边 (文本, 相减 (位置, 1))))
        赋值 (位置, 寻找文本 (文本, “分”, , 假))
        .如果真 (不等于 (位置, -1))
            赋值 (系统时间.分, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “时”, , 假), 2), 相减 (位置, 1))))
            赋值 (位置, 寻找文本 (文本, “秒”, , 假))
            .如果真 (不等于 (位置, -1))
                赋值 (系统时间.秒, 到整数 (取文本中间 (文本, 相加 (寻找文本 (文本, “分”, , 假), 2), 相减 (位置, 1))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
SystemTimeToVariantTime (系统时间, 时间)
返回 (时间)

.类模块 内存申请, , , 

.程序集变量 集_句柄, 整数型, , , 
.程序集变量 集_起始地址, 整数型, , , 
.程序集变量 集_当前位置, 长整数型, , , 
.程序集变量 集_文件尺寸, 长整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
取错误代码 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭_销毁 ()

.子程序 申请内存大小, 逻辑型, 公开, 
.参数 申请尺寸, 长整数型, , 

.局部变量 句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 

.如果真 (小于或等于 (申请尺寸, 0))
    返回 (假)
.如果真结束
赋值 (句柄, 创建映射 (-1, 0, 4, 取字节集数据 (到字节集 (申请尺寸), #整数型, 5), 取字节集数据 (到字节集 (申请尺寸), #整数型, 1), 0))
.判断开始 (等于 (句柄, 0))
    返回 (假)
.默认
    赋值 (起始地址, 映射装载 (句柄, 2, 0, 0, 0))
    .如果真 (等于 (起始地址, 0))
        关闭对象 (句柄)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_句柄, 0))
        .如果真 (等于 (关闭_销毁 (), 假))
            映射卸载 (起始地址)
            关闭对象 (句柄)
            返回 (假)
        .如果真结束
        
    .如果真结束
    赋值 (集_句柄, 句柄)
    赋值 (集_起始地址, 起始地址)
    赋值 (集_文件尺寸, 申请尺寸)
    返回 (真)
.判断结束


.子程序 关闭_销毁, 逻辑型, , 
.如果 (不等于 (映射卸载 (集_起始地址), 0))
    关闭对象 (集_句柄)
    连续赋值 (0, 集_起始地址, 集_句柄, 集_当前位置, 集_文件尺寸)
    返回 (真)
.否则
    返回 (假)
.如果结束



.子程序 取写到位置, 长整数型, 公开, 
.如果真 (等于 (集_起始地址, 0))
    返回 (-1)
.如果真结束
返回 (集_当前位置)


.子程序 读出全部字节集_并关闭, 字节集, 公开, 
.局部变量 Temp, 字节集, , , 

赋值 (Temp, 指针到字节集 (集_起始地址, 集_文件尺寸))
关闭_销毁 ()
返回 (Temp)

.子程序 写入字节集, 逻辑型, 公开, 
.参数 欲写入字节集, 字节集, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 取字节集长度 (欲写入字节集)), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
写入映射_字节集 (相加 (集_起始地址, 集_当前位置), 欲写入字节集, 取字节集长度 (欲写入字节集))
赋值 (集_当前位置, 相加 (集_当前位置, 取字节集长度 (欲写入字节集)))
返回 (真)

.子程序 取总尺寸, 长整数型, 公开, 如果是用“初始化_从映射对象创建”来初始化类，得到的尺寸会有可能比真实文件尺寸稍大（4096的倍数）
返回 (集_文件尺寸)

.窗口程序集 窗口程序集2, , , 

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 内容, 字节集, , , 

.如果真 (等于 (.内容, “”))
    赋值 (.标题, “请输入FTP服务器地址！”)
    返回 ()
.如果真结束
.如果真 (等于 (.内容, “”))
    赋值 (.标题, “请输入FTP用户名！”)
    返回 ()
.如果真结束
赋值 (.标题, “正在连接FTO服务器...”)
.判断开始 (等于 (.内容, “PASV”))
    .如果真 (等于 (未知支持库函数_8 (.内容, .内容, .内容, 到整数 (.内容), 真), 假))
        赋值 (.标题, “连接FTP服务器出错”)
        返回 ()
    .如果真结束
    
.判断 (等于 (.内容, “PORT”))
    .如果真 (等于 (未知支持库函数_8 (.内容, .内容, .内容, 到整数 (.内容), 假), 假))
        赋值 (.标题, “连接FTP服务器出错”)
        返回 ()
    .如果真结束
    
.默认
    
.判断结束
.如果真 (等于 (.选中, 真))
    写配置项 (相加 (取运行目录 (), “/1.ini”), “系统管理”, “主动上线”, 相加 (.内容, “☆”, .内容, “☆”, .内容, “☆”, .内容, “☆”, .内容))
    
.如果真结束
赋值 (.标题, “连接FTP服务器成功，正在上传IP文件！”)
赋值 (内容, 到字节集 (.内容))
写到文件 (相加 (取运行目录 (), “\”, .内容), 内容)
.如果真 (等于 (未知支持库函数_11 (相加 (取运行目录 (), “\”, .内容), .内容, ), 假))
    删除本地IP文件 ()
    赋值 (.标题, “FTP更新IP文件失败！”)
    返回 ()
.如果真结束
删除本地IP文件 ()
赋值 (.标题, “FTP更新IP文件成功.”)
 ' .如果真 (等于 (真))
     ' 播放音乐 (取运行目录 () ＋ “\mp3\FTP更新IP文件.wav”, )
.如果真结束



.子程序 __自动上线_创建完毕, 空白型, , 
.局部变量 IP, 文本型, , "0", 
.局部变量 IP数据, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 ftp, 文本型, , , 
.局部变量 分割, 文本型, , "4", 
.局部变量 数据, 字节集, , , 

赋值 (IP, 未知支持库函数_17 ())
.计次循环首 (取数组成员数 (IP), i)
    赋值 (IP数据, 相加 (IP数据, IP [i], “  ”))
.计次循环尾 ()
赋值 (IP, 分割文本 (IP数据, “  ”, ))
赋值 (循环次数, 取数组成员数 (IP))
.计次循环首 (循环次数, i)
    IP.加入项目 ( [i], )
.计次循环尾 ()
赋值 (.现行选中项, 相减 (循环次数, 1))
赋值 (ftp, 读配置项 (相加 (取运行目录 (), “/1.ini”), “系统管理”, “主动上线”, ftp))
.如果真 (不等于 (ftp, “”))
    赋值 (分割, 分割文本 (ftp, “☆”, ))
    赋值 (.内容, 分割 [1])
    赋值 (.内容, 分割 [2])
    赋值 (.内容, 分割 [3])
    赋值 (.内容, 分割 [4])
    赋值 (.内容, 分割 [5])
    赋值 (.选中, 真)
.如果真结束


.子程序 删除本地IP文件, 空白型, , 
删除文件 (相加 (取运行目录 (), “\”, .内容))


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 加载内存资源皮肤, 整数型, , 从资源添加皮肤，并指定皮肤的色调，饱和度，亮度，成功返回0
.参数 资源皮肤, 字节集, , 皮肤数据
.参数 皮肤密码, 文本型, 可空, 皮肤密码
.参数 色调, 整数型, 可空, 取值范围 -180 - 180
.参数 饱和度, 整数型, 可空, 取值范围 -100 - 100
.参数 亮度, 整数型, 可空, 取值范围 -100 - 100



.子程序 调整皮肤颜色, 整数型, , 调整色调，饱和度，亮度，成功返回0
.参数 色调, 整数型, , 取值范围 -180 - 180
.参数 饱和度, 整数型, , 取值范围 -100 - 100
.参数 亮度, 整数型, , 取值范围 -100 - 100



.子程序 置Vista特效阴影, 整数型, , 设置Vista特效的阴影大小。成功返回0，失败返回非0
.参数 透明度, 整数型, 可空, 1－255 默认值0
.参数 亮度, 整数型, 可空, 1－255 默认值0
.参数 锐度, 整数型, 可空, 1－255 默认值0
.参数 阴影大小, 整数型, 可空, 2－19 默认值0
.参数 水平偏移, 整数型, 可空, 默认值0
.参数 垂直偏移, 整数型, 可空, 默认值0
.参数 红色分量, 整数型, 可空, 0－255 默认值 -1
.参数 绿色分量, 整数型, 可空, 0－255 默认值 -1
.参数 蓝色分量, 整数型, 可空, 0－255 默认值 -1



.子程序 置控件的背景色, 整数型, , 目前仅对单选框,复选框,分组框有效。成功返回0，失败返回非0
.参数 句柄, 整数型, , 控件句柄
.参数 红色分量, 整数型, , 取值范围0-255
.参数 绿色分量, 整数型, , 取值范围0-255
.参数 蓝色分量, 整数型, , 取值范围0-255



.子程序 置控件的文本颜色, 整数型, , 目前仅对单选框,复选框,分组框有效。成功返回0，失败返回非0
.参数 句柄, 整数型, , 控件句柄
.参数 红色分量, 整数型, , 取值范围0-255
.参数 绿色分量, 整数型, , 取值范围0-255
.参数 蓝色分量, 整数型, , 取值范围0-255



.子程序 标题菜单栏, 整数型, , 在窗口标题栏定义菜单，成功返回0。说明:WIN7系统下不可与置Vista特效()函数同时使用
.参数 窗口句柄, 整数型, , 欲换肤的窗口句柄
.参数 是否启用, 整数型, , 是否启用标题菜单栏；0停用，1启用
.参数 菜单高度, 整数型, , 0为默认；一般设置为22或10；根据需要设置
.参数 顶部偏移, 整数型, , 顶部偏移
.参数 右部偏移, 整数型, , 右部偏移



.子程序 置菜单透明度, 整数型, , 设置菜单的透明度，成功返回0
.参数 透明度, 整数型, , 取值范围 0-255



.子程序 置皮肤透明度, 整数型, , 设置指定句柄的窗体的透明度，成功返回0
.参数 句柄, 整数型, , 指定窗体句柄
.参数 透明度, 整数型, , 取值范围 0-255



.子程序 窗口可否移动, 整数型, , 设置窗体是否可以移动。成功返回0，失败返回非0
.参数 句柄, 整数型, , 窗口句柄
.参数 是否移动, 整数型, , 0为不可移动,1为可移动



.子程序 卸载皮肤, 整数型, , 成功返回0


.子程序 指定换肤类型, 整数型, , 指定窗体和控件的换肤类型，成功返回0。换肤类型参见常量表
.参数 句柄, 整数型, , 窗口或控件的句柄
.参数 换肤类型, 整数型, , 换肤类型：换肤类型参见常量表



.子程序 指定不使用皮肤的组件, 整数型, , 卸载指定句柄的窗体或者控件的皮肤，成功返回0
.参数 句柄, 整数型, , 指定窗体或控件的句柄



.子程序 置Vista特效, 整数型, , 为指定句柄的窗体或者控件设置Vista特效。成功返回0，失败返回非0
.参数 有效位, 整数型, 可空, Vista特效是否有效,1为有效,0为无效 默认1



.子程序 加载皮肤, 整数型, , 加载指定的皮肤，成功返回0
.参数 皮肤路径, 文本型, , 皮肤文件路径
.参数 皮肤口令, 文本型, 可空, 皮肤密钥



.子程序 加载皮肤并设置色调参数, 整数型, , 载指定皮肤，并指定皮肤的色调，饱和度，亮度，  成功返回0
.参数 皮肤路径, 文本型, , 皮肤文件路径
.参数 皮肤密码, 文本型, 可空, 皮肤密钥 默认空
.参数 色调, 整数型, 可空, 取值范围 -180 - 180 默认0
.参数 饱和度, 整数型, 可空, 取值范围 -100 - 100 默认0
.参数 亮度, 整数型, 可空, 取值范围 -100 - 100 默认0



.子程序 获取指定点颜色, 整数型, , 获取指定窗口或控件在nX,nY处的颜色值，无符号整型 返回颜色值(RGB)
.参数 句柄, 整数型, , 指定窗口或控件的句柄
.参数 横坐标, 整数型, , 指定横坐标点
.参数 纵坐标, 整数型, , 指定纵坐标点



.子程序 绘制设备元素, 整数型, , 绘制指定设备上下文的元素。成功返回0，失败返回非0
.参数 目标设备, 整数型, , 目标设备上下文
.参数 X1, 整数型, , 左上角水平坐标
.参数 Y1, 整数型, , 左上角垂直坐标
.参数 X2, 整数型, , 右下角水平坐标
.参数 Y2, 整数型, , 右下角垂直坐标
.参数 元素ID, 整数型, , 元素id



.子程序 加载PE资源皮肤, 整数型, , 从exe或dll资源加载皮肤，成功返回0
.参数 资源名, 文本型, , PE内的皮肤资源名
.参数 资源类型, 文本型, , PE内的皮肤资源类型



.子程序 验证签名, 整数型, , 验证是否正版签名。已签名返回1，未签名返回0


.窗口程序集 窗口程序集1, , , 

.子程序 _配置服务端窗口_创建完毕, 空白型, , 
赋值 (.内容, 相加 (取运行目录 (), “\服务端.exe”))

.子程序 _生成服务端按钮_被单击, 空白型, , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 寻找, 字节集, , "5", 
.局部变量 临时文本, 文本型, , "0", 

赋值 (临时字节集, #客户XP) ' 读入文件 (取运行目录 () ＋ “\dat\服务端.DAT”)
赋值 (寻找 [1], 到字节集 (“AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA”))
赋值 (临时字节集, 子字节集替换 (临时字节集, 寻找 [1], 到字节集 (相加 (.标题, 取空白文本 (相减 (取字节集长度 (寻找 [1]), 取文本长度 (.标题))))), , ))
赋值 (寻找 [2], 到字节集 (“BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB”))
赋值 (临时字节集, 子字节集替换 (临时字节集, 寻找 [2], 到字节集 (相加 (.内容, 取空白文本 (相减 (取字节集长度 (寻找 [2]), 取文本长度 (.内容))))), , ))
赋值 (临时文本, 分割文本 (_启动窗口.取文本 (., 4), “:”, ))
赋值 (寻找 [3], 到字节集 (“CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC”))
赋值 (临时字节集, 子字节集替换 (临时字节集, 寻找 [3], 到字节集 (相加 (临时文本 [2], 取空白文本 (相减 (取字节集长度 (寻找 [3]), 取文本长度 (临时文本 [2]))))), , ))
赋值 (寻找 [4], 到字节集 (“DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD”))
赋值 (临时字节集, 子字节集替换 (临时字节集, 寻找 [4], 到字节集 (相加 (.内容, 取空白文本 (相减 (取字节集长度 (寻找 [4]), 取文本长度 (.内容))))), , ))
赋值 (寻找 [5], 到字节集 (“EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE”))
赋值 (临时字节集, 子字节集替换 (临时字节集, 寻找 [5], 到字节集 (相加 (.内容, 取空白文本 (相减 (取字节集长度 (寻找 [5]), 取文本长度 (.内容))))), , ))


写到文件 (.内容, 临时字节集)
信息框 (“客户端生成完毕！”, #信息图标, “提示：”)
配置服务端窗口.发送信息 (16, 0, 0)

.子程序 _浏览文件按钮_被单击, 空白型, , 
打开 ()
赋值 (.内容, .文件名)


.子程序 _上线图标列表框_当前表项被改变, 空白型, , 
赋值 (.标题, 到文本 (.))


.子程序 _超级链接框3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (打开 ())
    赋值 (.图片, 读入文件 (.文件名))
    
.如果真结束


.窗口程序集 窗口程序集3, , , 

.子程序 __远程屏幕窗口_创建完毕, 空白型, , 
.局部变量 临时宽度, 空白型, , , 
.局部变量 临时高度, 空白型, , , 

赋值 (.禁止, 假)
赋值 (.禁止, 真)

赋值 (临时宽度, 相除 (相减 (取屏幕宽度 (), 800), 2))
赋值 (临时高度, 相除 (相减 (取屏幕高度 (), 600), 2))
_远程屏幕窗口.移动 (临时宽度, 临时高度, 800, 600)

赋值 (.禁止, 真)
赋值 (.禁止, 真)

赋值 (旧句柄, 设置窗口新特征 (取窗口句柄 (), -4, 到整数 (&新窗口函数)))


赋值 (.选中, 真)
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 1 }, 到字节集 (到文本 (3))))


.子程序 新窗口函数, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 重画信息, 重画信息, , , 
.局部变量 重画宽度, 整数型, , , 
.局部变量 重画高度, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 

.如果真 (等于 (Msg, 256)) ' 键盘被按下
    .如果真 (发送键盘)
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 8 }, 到字节集 (到文本 (wParam))))
         ' 传送数据子程序 (到字节集 (“6|” ＋ 到文本 (wParam)))
         ' 传送数据子程序 (现操作地址, { 9 } ＋ { 1 })
    .如果真结束
    
.如果真结束
.如果真 (等于 (Msg, 257)) ' 键盘被放开
    .如果真 (发送键盘)
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 9 }, 到字节集 (到文本 (wParam))))
         ' 传送数据子程序 (到字节集 (“7|” ＋ 到文本 (wParam)))
    .如果真结束
    
.如果真结束
.如果真 (等于 (Msg, 512)) ' 鼠标位置被移动
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 7 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
         ' 传送数据子程序 (到字节集 (“5|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    .如果真结束
    
.如果真结束
.如果真 (等于 (Msg, 513)) ' 鼠标左键被按下
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 3 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
         ' 传送数据子程序 (到字节集 (“1|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    .如果真结束
    获取焦点 ()
.如果真结束
.如果真 (等于 (Msg, 514)) ' 鼠标左键被放开
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 4 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
         ' 传送数据子程序 (到字节集 (“2|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    .如果真结束
    
.如果真结束
.如果真 (等于 (Msg, 516)) ' 鼠标右键被按下
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 5 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
         ' 传送数据子程序 (到字节集 (“3|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    .如果真结束
    获取焦点 ()
.如果真结束
.如果真 (等于 (Msg, 517)) ' 鼠标右键被放开
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
        传送数据子程序 (现操作地址, 相加 ({ 9 }, { 6 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
         ' 传送数据子程序 (到字节集 (“4|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    .如果真结束
    
.如果真结束
.如果真 (等于 (Msg, 515)) ' 鼠标左键被双击
    .如果真 (发送鼠标)
        赋值 (X, 位与 (lParam, 65535))
        赋值 (Y, 右移 (lParam, 16))
    .如果真结束
    传送数据子程序 (现操作地址, 相加 ({ 9 }, { 3 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
     ' 传送数据子程序 (到字节集 (“1|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    延时 (1)
    传送数据子程序 (现操作地址, 相加 ({ 9 }, { 4 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
     ' 传送数据子程序 (到字节集 (“2|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    延时 (10)
    传送数据子程序 (现操作地址, 相加 ({ 9 }, { 3 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
     ' 传送数据子程序 (到字节集 (“1|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
    延时 (1)
    传送数据子程序 (现操作地址, 相加 ({ 9 }, { 4 }, 到字节集 (相加 (“|”, 到文本 (X), “|”, 到文本 (Y), “|”))))
     ' 传送数据子程序 (到字节集 (“2|” ＋ 到文本 (X) ＋ “|” ＋ 到文本 (Y) ＋ “|”))
.如果真结束
返回 (消息系统回调 (旧句柄, hwnd, Msg, wParam, lParam))

.子程序 __远程屏幕窗口_尺寸被改变, 空白型, , 
赋值 (.左边, 相减 (., 23))
赋值 (.高度, 相减 (., 59))
赋值 (.顶边, 相减 (., 68))
赋值 (.宽度, 相减 (., 23))
赋值 (.顶边, 相减 (相除 (相乘 (相减 (., .高度), 相减 (.位置, 1)), 100), 相乘 (相减 (.位置, 1), 0.64)))
赋值 (.左边, 相减 (相除 (相乘 (相减 (., .宽度), 相减 (.位置, 1)), 100), 相乘 (相减 (.位置, 1), 0.3)))
 ' 窗口2.左边 ＝ _远程屏幕窗口.左边 ＋ _远程屏幕窗口.宽度
 ' 窗口2.顶边 ＝ _远程屏幕窗口.顶边


.子程序 _纵向滚动条1_位置被改变, 空白型, , 
赋值 (.顶边, 相减 (相除 (相乘 (相减 (., .高度), 相减 (.位置, 1)), 100), 相乘 (相减 (.位置, 1), 0.64)))

.子程序 _横向滚动条1_位置被改变, 空白型, , 
赋值 (.左边, 相减 (相除 (相乘 (相减 (., .宽度), 相减 (.位置, 1)), 100), 相乘 (相减 (.位置, 1), 0.3)))

.子程序 _横向滚动条1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

获取焦点 ()

.子程序 _横向滚动条1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

获取焦点 ()

.子程序 __远程屏幕窗口_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

获取焦点 ()

.子程序 __远程屏幕窗口_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

获取焦点 ()

.子程序 __远程屏幕窗口_将被销毁, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 11 }))

.子程序 _传送鼠标和键盘操作_被选择, 空白型, , 
赋值 (.禁止, 真)
赋值 (.禁止, 假)
赋值 (_远程屏幕窗口., “远程屏幕控制 - 传送鼠标和键盘操作已开始”)
赋值 (发送鼠标, 真)
赋值 (发送键盘, 真)

.子程序 _停止鼠标和键盘操作_被选择, 空白型, , 
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (_远程屏幕窗口., “远程屏幕控制”)
赋值 (发送鼠标, 假)
赋值 (发送键盘, 假)

.子程序 _颜色8位_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 10 }, 到字节集 (到文本 (1))))
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _颜色16位_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 10 }, 到字节集 (到文本 (2))))
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _颜色24位_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 10 }, 到字节集 (到文本 (3))))
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (.选中, 假)


.子程序 _颜色32位_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 真)

传送数据子程序 (现操作地址, 相加 ({ 9 }, { 10 }, 到字节集 (到文本 (4))))

.子程序 _锁定鼠键_被选择, 空白型, , 
赋值 (.禁止, 真)
赋值 (.禁止, 假)
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 12 }))

.子程序 _解除鼠键_被选择, 空白型, , 
赋值 (.禁止, 假)
赋值 (.禁止, 真)
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 13 }))

.子程序 _关闭显示器_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 14 }))
赋值 (.禁止, 假)
赋值 (.禁止, 真)

.子程序 _开启显示器_被选择, 空白型, , 
传送数据子程序 (现操作地址, 相加 ({ 9 }, { 15 }))
赋值 (.禁止, 真)
赋值 (.禁止, 假)


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 压缩数据_, 字节集, , 返回 压缩后的数据
.参数 数据, 字节集, , 欲压缩的数据



.子程序 解压数据_, 字节集, , 返回 解压缩后的数据
.参数 数据, 字节集, , 由本模块压缩过的数据.



.类模块 屏幕差异获取, , , 

.子程序 启动, 逻辑型, , 在启动完毕后，如果不用了一定要销毁！
.参数 位深, 整数型, 可空, 1=#8位，2=#16位，3=#24位，4=#32位，为空默认为8位
.参数 隔行数, 整数型, 可空, 每隔多少行扫描1次，1~20之间，推荐13~17，为空默认为15



.子程序 销毁, 空白型, , 


.子程序 获取差异, 字节集, , 一定要先启动！


.类模块 屏幕差异处理, , , 

.子程序 启动, 逻辑型, , 在调用本类其他命令之前一定要先启动！
.参数 窗口句柄, 整数型, , 一定要提供有效的窗口句柄！不然出现什么不良后果可别怪我
.参数 接受图像宽, 整数型, , 
.参数 接受图像高, 整数型, , 



.子程序 处理变化数据, 空白型, , 一定要先启动！否则造成的不良后果不关我事！
.参数 变化数据, 字节集, , 



.子程序 销毁, 空白型, , 


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 开机启动, 整数型, , 


.子程序 KillMe, 空白型, , 无返回值
.参数 FileName, 文本型, , 



.子程序 终止自身进程, 逻辑型, , 终止一个进程(成功返回真,失败返回假)


.子程序 http读文件_, 字节集, , 有可能线程阻塞,请在外部加超时判断
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 



.窗口程序集 文件传送窗口程序集, , , 

.程序集变量 客户组, 客户端, , "50", 
.程序集变量 待连接套接口, 空白型, , "0", 
.程序集变量 CPU数, 空白型, , , 
.程序集变量 系统信息, SYSTEM_INFO, , , 
.程序集变量 完成端口, 空白型, , , 
.程序集变量 接收连接函数地址, 空白型, , , 
.程序集变量 取套接口地址函数地址, 空白型, , , 
.程序集变量 发送文件函数地址, 空白型, , , 
.程序集变量 匿名程序集变量_6326, 空白型, , , 
.程序集变量 是否已创建服务器, 逻辑型, , , 
.程序集变量 端口, 空白型, , , 
.程序集变量 最大线程数, 空白型, , , 
.程序集变量 当前线程数, 空白型, , , 
.程序集变量 监听套接口, 空白型, , , 
.程序集变量 数据缓冲, 字节集, , , 
.程序集变量 服务器是否退出, 逻辑型, , , 
.程序集变量 匿名程序集变量_6334, 空白型, , , 
.程序集变量 文件句柄组, 空白型, , "0", 
.程序集变量 申请连接事件句柄, 空白型, , , 
.程序集变量 每秒数据下传量, 长整数型, , , 
.程序集变量 下载点数, 空白型, , , 
.程序集变量 允许速度, 长整数型, , , 
.程序集变量 匿名程序集变量_6340, 空白型, , , 
.程序集变量 正在发送文件, 逻辑型, , , 
.程序集变量 正在接收文件, 逻辑型, , , 
.程序集变量 匿名程序集变量_6343, 空白型, , , 
.程序集变量 当前传送项目, 整数型, , , 
.程序集变量 传输项目组, 传输项目, , "0", 
.程序集变量 传送客户位置, 整数型, , , 
.子程序 关闭服务器, 空白型, 公开, 
.局部变量 pp, OVERLAPPED, , , 

closesocket (监听套接口)
PostQueuedCompletionStatus (完成端口, 4, -1, pp)
PostQueuedCompletionStatus (完成端口, 4, -1, pp)
置等待鼠标 ()
延时 (1000)
断开所有用户 ()
赋值 (服务器是否退出, 真)
延时 (1000)
恢复鼠标 ()
.如果真 (大于 (完成端口, 0))
    CloseHandle (完成端口)
    赋值 (完成端口, 0)
.如果真结束
WSACleanup ()
赋值 (监听套接口, 0)
赋值 (是否已创建服务器, 假)

.子程序 建立服务, 逻辑型, , 
.局部变量 版本信息, 字节集, , , 
.局部变量 绑定结构地址, sockt, , , 
.局部变量 绑定成功, 逻辑型, , , 
.局部变量 调用结果, 空白型, , , 
.局部变量 mm, 字节集, , , 
.局部变量 a, 空白型, , , 
.局部变量 xcid, 空白型, , , 
.局部变量 n, 整数型, , , 
.局部变量 xcjb, 空白型, , , 
.局部变量 s, 空白型, , , 

赋值 (s, 5805)
GetSystemInfo (系统信息)
赋值 (版本信息, 取空白字节集 (600))
.如果真 (不等于 (WSAStartup (合并整数 (2, 2), 版本信息), 0))
    信息框 (“SOKET库初始化失败！”, 0, )
    返回 (假)
.如果真结束
赋值 (完成端口, CreateIoCompletionPort (#INVALID_HANDLE_VALUE, 0, 0, 0))
赋值 (监听套接口, WSASocketA (#AF_INET, #SOCK_STREAM, 6, 0, 0, #WSA_FLAG_OVERLAPPED))
赋值 (a, CreateIoCompletionPort (监听套接口, 完成端口, -11, 0))
赋值 (绑定结构地址.协议类型, #PF_INET)
赋值 (绑定结构地址.端口, htons (s))
.判断循环首 (等于 (bind (监听套接口, 绑定结构地址, 16), -1))
    赋值 (s, 相加 (s, 1))
    赋值 (绑定结构地址.端口, htons (s))
.判断循环尾 ()
赋值 (调用结果, listen (监听套接口, 20))
.如果真 (不等于 (调用结果, 0))
    信息框 (“连接库监听失败！”, 0, )
    返回 (假)
.如果真结束
赋值 (传输端口, s)
赋值 (mm, 对象取GUID (#WSAID_ACCEPTEX))
WSAIoctl (监听套接口, #SIO_GET_EXTENSION_FUNCTION_POINTER, mm, 16, 接收连接函数地址, 4, a, 0, 0)
赋值 (mm, 对象取GUID (#WSAID_GETACCEPTEXSOCKADDRS))
WSAIoctl (监听套接口, #SIO_GET_EXTENSION_FUNCTION_POINTER, mm, 16, 取套接口地址函数地址, 4, a, 0, 0)
赋值 (mm, 对象取GUID (#WSAID_TRANSMITFILE))
WSAIoctl (监听套接口, #SIO_GET_EXTENSION_FUNCTION_POINTER, mm, 16, 发送文件函数地址, 4, a, 0, 0)
.计次循环首 (系统信息.dwNumberOrfProcessors, )
    赋值 (xcjb, CreateThread (0, 0, &服务线程, 0, 0, xcid))
    CloseHandle (xcjb)
.计次循环尾 ()
.计次循环首 (5, )
    投递新连接 ()
.计次循环尾 ()
赋值 (是否已创建服务器, 真)
赋值 (服务器是否退出, 假)
返回 (真)

.子程序 断开所有用户, 空白型, , 
.局部变量 n, 整数型, , , 
.局部变量 p, 空白型, , , 

赋值 (p, 取数组成员数 (客户组))
.计次循环首 (p, n)
    .如果真 (不等于 (客户组 [n], 用户名, “”))
        赋值 (客户组 [n], 用户名, “”)
    .如果真结束
    .如果真 (大于 (客户组 [n], 套接口, 0))
        closesocket (客户组 [n], 套接口)
        赋值 (客户组 [n], 套接口, 0)
    .如果真结束
    .如果真 (大于 (客户组 [n], 文件句柄, 0))
        关闭文件 (客户组 [n], 文件句柄)
        赋值 (客户组 [n], 文件句柄, 0)
    .如果真结束
    
.计次循环尾 ()
重定义数组 (客户组, 假, p)
.计次循环首 (5, )
    投递新连接 ()
.计次循环尾 ()


.子程序 投递新连接, 空白型, , 
.局部变量 n, 空白型, , , 

赋值 (n, 取空闲客户组 ())
.如果真 (小于或等于 (n, 0))
    返回 ()
.如果真结束
赋值 (客户组 [n], 套接口, WSASocketA (#AF_INET, #SOCK_STREAM, 6, 0, 0, #WSA_FLAG_OVERLAPPED))
赋值 (客户组 [n], 接收连接IO操作.数据, 取空白字节集 (系统信息.dwPageSize))
赋值 (客户组 [n], 接收连接IO操作.类型, #外来连接)
赋值 (客户组 [n], 接收连接IO操作.大小, n)
清除数组 (客户组 [n], 待发送数据)
AcceptEx (监听套接口, 客户组 [n], 套接口, 取字节集型变量指针 (客户组 [n], 接收连接IO操作.数据), 0, 32, 32, 取整数型变量指针 (客户组 [n], 接收大小), 取整数型变量指针 (客户组 [n], 接收连接IO操作.Internal))

.子程序 数据到达, 整数型, , 
.参数 接收的数据, 字节集, , 
.参数 客户套接口, 空白型, , 
.参数 客户组位置, 空白型, , 

.局部变量 过度数据, 字节集, , , 
.局部变量 信息组, 字节集, , "0", 
.局部变量 地址, sockt, , , 
.局部变量 IP, 文本型, , , 
.局部变量 监听端口, 文本型, , , 
.局部变量 登陆结果, 空白型, , , 
.局部变量 文件长度, 长整数型, , , 
.局部变量 进度, 整数型, , , 

.如果真 (大于 (客户组 [客户组位置], 文件句柄, 0))
    写出字节集 (客户组 [客户组位置], 文件句柄, 接收的数据)
    赋值 (客户组 [客户组位置], 文件已发送大小, 相加 (客户组 [客户组位置], 文件已发送大小, 取字节集长度 (接收的数据)))
    赋值 (传输项目组 [当前传送项目], 已完成大小, 客户组 [客户组位置], 文件已发送大小)
    .如果真 (大于或等于 (客户组 [客户组位置], 文件已发送大小, 客户组 [客户组位置], 文件发送大小))
        赋值 (.位置, 100)
        赋值 (传输项目组 [当前传送项目], 完成百分比, “100%”)
        赋值 (传输项目组 [当前传送项目], 已完成大小, 客户组 [客户组位置], 文件已发送大小)
        传输完成 (1)
    .如果真结束
    返回 (0)
.如果真结束

.如果真 (等于 (取字节集左边 (接收的数据, 4), 到字节集 (“文下”)))
    .如果真 (不等于 (客户组位置, 传送客户位置))
        返回 (0)
    .如果真结束
    赋值 (过度数据, 取字节集右边 (接收的数据, 相减 (取字节集长度 (接收的数据), 4)))
    返回 (命令执行 (过度数据, 客户套接口, 客户组位置))
.如果真结束
.如果真 (等于 (取字节集左边 (接收的数据, 4), 到字节集 (“文上”)))
    .如果真 (等于 (客户组位置, 传送客户位置))
        赋值 (过度数据, 取字节集右边 (接收的数据, 相减 (取字节集长度 (接收的数据), 4)))
        赋值 (客户组 [客户组位置], 文件句柄, 打开文件 (传输项目组 [当前传送项目], 本地路径, #重写, #无限制))
        .如果真 (大于 (客户组 [客户组位置], 文件句柄, 0))
            赋值 (.时钟周期, 1000)
            赋值 (传输项目组 [当前传送项目], 状态说明, “开始接收”)
            写到内存 (过度数据, 取长整数变量指针 (文件长度), 8)
            赋值 (客户组 [客户组位置], 文件发送大小, 文件长度)
            赋值 (传输项目组 [当前传送项目], 文件大小, 文件长度)
            赋值 (传输项目组 [当前传送项目], 显示大小, 相加 (数值到格式文本 (相加 (整除 (文件长度, 1024), 1), 0, 真), “KB”))
            赋值 (过度数据, 取字节集右边 (过度数据, 相减 (取字节集长度 (过度数据), 8)))
            赋值 (正在接收文件, 真)
            写出字节集 (客户组 [客户组位置], 文件句柄, 过度数据)
            赋值 (客户组 [客户组位置], 文件已发送大小, 取字节集长度 (过度数据))
            赋值 (传输项目组 [当前传送项目], 已完成大小, 客户组 [客户组位置], 文件已发送大小)
            赋值 (进度, 整除 (客户组 [客户组位置], 文件已发送大小, 相乘 (客户组 [客户组位置], 文件发送大小, 100)))
            赋值 (.位置, 进度)
            赋值 (传输项目组 [当前传送项目], 完成百分比, 相加 (到文本 (进度), “%”))
            列表状态刷新 ()
            .如果真 (等于 (客户组 [客户组位置], 文件已发送大小, 客户组 [客户组位置], 文件发送大小))
                传输完成 (1)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束

返回 (0)

.子程序 命令执行, 整数型, , 
.参数 信息数据, 字节集, 参考, 
.参数 客户套接口, 空白型, 参考, 
.参数 客户组位置, 空白型, 可空, 

.局部变量 命令标识, 文本型, , , 
.局部变量 附加参数, 字节集, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 n, 整数型, , , 
.局部变量 匿名局部变量_6378, 空白型, , , 
.局部变量 xcjb, 整数型, , , 
.局部变量 xcid, 整数型, , , 

赋值 (命令标识, 到文本 (取字节集左边 (信息数据, 4)))
赋值 (附加参数, 取字节集右边 (信息数据, 相减 (取字节集长度 (信息数据), 4)))
.判断开始 (等于 (命令标识, “读文”)) ' 头12字节  客户端保留信息头； 接下来三个参数跟随其后以{0}隔开:文件名；起始位置；读取长度
    .如果真 (等于 (正在发送文件, 真))
        返回 (0)
    .如果真结束
    赋值 (客户组 [客户组位置], 附加参数, 附加参数)
    赋值 (xcjb, CreateThread (0, 0, &服务_读文件数据, 客户组位置, 0, xcid))
    CloseHandle (xcjb)
    返回 (0)
.判断 (等于 (命令标识, “取大”))
    赋值 (文件名, 到文本 (附加参数))
    IO发送数据 (客户组位置, 相加 (到字节集 (“大小”), 到字节集 (到文本 (取文件尺寸 (文件名)))))
    返回 (3)
.默认
    
.判断结束
返回 (0)

.子程序 服务_读文件数据, 整数型, , 
.参数 客户组位置, 空白型, , 

.局部变量 信息组, 字节集, , "0", 
.局部变量 文件号, 空白型, , , 
.局部变量 错误码, 空白型, , , 
.局部变量 读入长度, 长整数型, , , 
.局部变量 文件数据, 字节集, , , 
.局部变量 a, 空白型, , , 
.局部变量 已发送长度, 长整数型, , , 
.局部变量 下载事件句柄, 空白型, , , 
.局部变量 发送数据包大小, 空白型, , , 
.局部变量 事件, 空白型, , "11", 
.局部变量 重发次数, 空白型, , , 
.局部变量 b, 空白型, , , 
.局部变量 y, 空白型, , "2", 
.局部变量 y1, 空白型, , "2", 
.局部变量 匿名局部变量_6396, 空白型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 匿名局部变量_6398, 空白型, , , 
.局部变量 文件缓冲, 字节集, , , 
.局部变量 已读入缓冲长度, 长整数型, , , 
.局部变量 缓冲读入大小, 空白型, , , 
.局部变量 缓冲读写位置, 长整数型, , , 
.局部变量 客户信息头, 字节集, , , 
.局部变量 客户套接口, 空白型, 静态, , 
.局部变量 匿名局部变量_6405, 空白型, , , 
.局部变量 进度, 空白型, , , 

赋值 (客户信息头, 客户组 [客户组位置], 附加参数)
赋值 (客户套接口, 客户组 [客户组位置], 套接口)
赋值 (信息组, 分割字节集 (客户信息头, 取空白字节集 (1), ))
刷新子列表 ()
.如果真 (等于 (取数组成员数 (信息组), 3))
    赋值 (读入长度, 传输项目组 [当前传送项目], 文件大小)
    .如果真 (不等于 (到文本 (信息组 [1]), 传输项目组 [当前传送项目], 远程路径))
        传输完成 (4)
        返回 (0)
    .如果真结束
    赋值 (文件名, 传输项目组 [当前传送项目], 本地路径)
    .如果真 (不等于 (取文本右边 (取文本左边 (文件名, 2), 1), “:”))
        赋值 (文件名, 相加 (取运行目录 (), “\”, 文件名))
    .如果真结束
    赋值 (传输项目组 [当前传送项目], 状态说明, “开始发送”)
    赋值 (传输项目组 [当前传送项目], 完成百分比, 相加 (到文本 (0), “%”))
    赋值 (文件号, 打开文件 (文件名, #读入, #无限制))
    列表状态刷新 ()
    .如果 (大于或等于 (文件号, 0))
        赋值 (传输项目组 [当前传送项目], 开始微秒, 取启动时间 ())
        赋值 (.时钟周期, 1000)
        .如果真 (移动读写位置 (文件号, #文件首, 到数值 (到文本 (信息组 [2]))))
            赋值 (发送数据包大小, 20000)
            .如果真 (小于 (读入长度, 20000))
                赋值 (发送数据包大小, 读入长度)
            .如果真结束
            赋值 (下载事件句柄, WSACreateEvent ())
            WSAEventSelect (客户套接口, 下载事件句柄, #断开连接)
            赋值 (缓冲读入大小, 300000)
            .如果真 (小于 (读入长度, 300000))
                赋值 (缓冲读入大小, 读入长度)
            .如果真结束
            赋值 (已读入缓冲长度, 相加 (已读入缓冲长度, 缓冲读入大小))
            赋值 (文件数据, 读入字节集 (文件号, 缓冲读入大小))
            赋值 (a, send (客户套接口, 取字节集型变量指针 (文件数据), 发送数据包大小, 0))
            .如果真 (大于 (a, 0))
                赋值 (缓冲读写位置, 相加 (缓冲读写位置, a))
                赋值 (已发送长度, 相加 (已发送长度, a))
                赋值 (传输项目组 [当前传送项目], 已完成大小, 已发送长度)
            .如果真结束
            
            .循环判断首 ()
                 ' 进度 ＝ 已发送长度 ÷ 读入长度 × 100
                 ' 当前传输进度.位置 ＝ 进度
                 ' 传输项目组 [当前传送项目].完成百分比 ＝ 到文本 (进度) ＋ “%”
                 ' 列表状态刷新 ()
                赋值 (y [1], 1)
                赋值 (y [2], 客户套接口)
                赋值 (y1 [1], 1)
                赋值 (y1 [2], 100)
                赋值 (b, select (0, 0, y, 0, y1))
                WSAEnumNetworkEvents (客户套接口, 下载事件句柄, 事件)
                .如果 (大于 (b, 0))
                    赋值 (重发次数, 0)
                    .如果真 (大于或等于 (已发送长度, 读入长度))
                        传输完成 (1)
                        跳出循环 ()
                    .如果真结束
                    .如果 (小于 (缓冲读写位置, 缓冲读入大小))
                        赋值 (发送数据包大小, 20000)
                        .如果真 (小于 (相减 (缓冲读入大小, 缓冲读写位置), 20000))
                            赋值 (发送数据包大小, 相减 (缓冲读入大小, 缓冲读写位置))
                        .如果真结束
                        .如果真 (小于 (相减 (读入长度, 已发送长度), 发送数据包大小))
                            赋值 (发送数据包大小, 相减 (读入长度, 发送数据包大小))
                        .如果真结束
                        
                    .否则
                        赋值 (缓冲读入大小, 300000)
                        .如果真 (小于 (相减 (读入长度, 已读入缓冲长度), 300000))
                            赋值 (缓冲读入大小, 相减 (读入长度, 已读入缓冲长度))
                        .如果真结束
                        赋值 (已读入缓冲长度, 相加 (已读入缓冲长度, 缓冲读入大小))
                        赋值 (文件数据, 读入字节集 (文件号, 缓冲读入大小))
                        赋值 (缓冲读写位置, 0)
                        赋值 (发送数据包大小, 20000)
                        .如果真 (小于 (相减 (缓冲读入大小, 缓冲读写位置), 20000))
                            赋值 (发送数据包大小, 相减 (缓冲读入大小, 缓冲读写位置))
                        .如果真结束
                        .如果真 (小于 (相减 (读入长度, 已发送长度), 发送数据包大小))
                            赋值 (发送数据包大小, 相减 (读入长度, 发送数据包大小))
                        .如果真结束
                        
                    .如果结束
                    赋值 (a, send (客户套接口, 相加 (取字节集型变量指针 (文件数据), 缓冲读写位置), 发送数据包大小, 0))
                    .如果真 (大于 (a, 0))
                        赋值 (缓冲读写位置, 相加 (缓冲读写位置, a))
                        赋值 (已发送长度, 相加 (已发送长度, a))
                        赋值 (传输项目组 [当前传送项目], 已完成大小, 已发送长度)
                    .如果真结束
                    
                .否则
                    
                .如果结束
                .如果真 (等于 (事件 [1], #断开连接))
                    传输完成 (3)
                    跳出循环 ()
                .如果真结束
                赋值 (重发次数, 0)
                .如果真 (小于或等于 (b, 0))
                    .如果真 (小于或等于 (a, 0))
                        赋值 (a, 发送数据 (客户套接口, 文件数据))
                    .如果真结束
                    赋值 (重发次数, 相加 (重发次数, 1))
                    .如果真 (大于 (重发次数, 90))
                        赋值 (客户套接口, 0)
                        传输完成 (6)
                        跳出循环 ()
                    .如果真结束
                    
                .如果真结束
                .如果真 (等于 (是否已创建服务器, 假))
                    传输完成 (8)
                    跳出循环 ()
                .如果真结束
                
            .循环判断尾 (小于 (已发送长度, 读入长度))
            WSACloseEvent (下载事件句柄)
        .如果真结束
        关闭文件 (文件号)
    .否则
        传输完成 (5)
    .如果结束
    赋值 (进度, 相乘 (相除 (已发送长度, 读入长度), 100))
    赋值 (.位置, 进度)
    .如果真 (大于 (当前传送项目, 0))
        赋值 (传输项目组 [当前传送项目], 完成百分比, 相加 (到文本 (进度), “%”))
    .如果真结束
    
.如果真结束
赋值 (正在发送文件, 假)
列表状态刷新 ()
.如果真 (大于或等于 (已发送长度, 读入长度)) ' 完成传送
    传输完成 (1)
.如果真结束
返回 (1)

.子程序 发送数据, 整数型, , 
.参数 客户套接口, 空白型, , 
.参数 数据, 字节集, 参考, 

返回 (send (客户套接口, 取字节集型变量指针 (数据), 取字节集长度 (数据), 0))

.子程序 服务线程, 空白型, , 
.参数 a, 空白型, , 

.局部变量 完成大小, 空白型, , , 
.局部变量 标识, 空白型, , , 
.局部变量 返回结果, 空白型, , , 
.局部变量 接收大小, 空白型, , , 
.局部变量 错误信息, 空白型, , , 
.局部变量 客户组位置, 空白型, , , 
.局部变量 临时IO操作, I0操作, , , 
.局部变量 结构指针, 空白型, , , 
.局部变量 匿名局部变量_6418, 空白型, , , 
.局部变量 匿名局部变量_6419, 空白型, , , 
.局部变量 本地地址, 空白型, 静态, , 
.局部变量 本地地址长度, 空白型, 静态, , 
.局部变量 远程地址, 空白型, 静态, , 
.局部变量 远程地址长度, 空白型, 静态, , 
.局部变量 匿名局部变量_6424, 空白型, , , 
.局部变量 空客户, 客户端, , , 
.局部变量 端口1, 空白型, , , 
.局部变量 IP, 空白型, , , 
.局部变量 IP文本, 文本型, , , 

.判断循环首 (等于 (标识, 0))
    赋值 (返回结果, GetQueuedCompletionStatus (完成端口, 完成大小, 取整数型变量指针 (标识), 结构指针, -1))
    .如果真 (等于 (标识, -1))
        返回 () ' 结束线程
    .如果真结束
    .判断开始 (等于 (标识, -11)) ' 有连接
        复制内存 (结构指针, 取整数型变量指针 (临时IO操作.Internal), 28)
        赋值 (客户组位置, 临时IO操作.大小)
        .如果真 (并且 (大于 (客户组位置, 0), 等于 (临时IO操作.类型, #外来连接)))
            .如果真 (大于 (客户组 [客户组位置], 套接口, 0))
                赋值 (客户组 [客户组位置], 是否已连接, 真)
                赋值 (本地地址长度, 32)
                赋值 (远程地址长度, 32)
                GetAcceptExSockaddrs (取字节集型变量指针 (客户组 [客户组位置], 接收连接IO操作.数据), 0, 32, 32, 取整数型变量指针 (本地地址), 本地地址长度, 取整数型变量指针 (远程地址), 远程地址长度)
                复制内存 (相加 (远程地址, 2), 取整数型变量指针 (端口1), 2)
                复制内存 (相加 (远程地址, 4), 取整数型变量指针 (IP), 4)
                赋值 (IP文本, inet_ntoa (IP))
                赋值 (客户组 [客户组位置], IP地址, 相加 (IP文本, “:”, 到文本 (ntohs (端口1))))
                赋值 (返回结果, CreateIoCompletionPort (客户组 [客户组位置], 套接口, 完成端口, 客户组位置, 0))
                .如果真 (大于 (返回结果, 0))
                    赋值 (客户组 [客户组位置], 接收连接IO操作.缓冲.len, 系统信息.dwPageSize)
                    赋值 (客户组 [客户组位置], 接收连接IO操作.缓冲.buf, 取字节集型变量指针 (客户组 [客户组位置], 接收连接IO操作.数据))
                    赋值 (客户组 [客户组位置], 接收连接IO操作.类型, #接收数据)
                    赋值 (返回结果, WSARecv (客户组 [客户组位置], 套接口, 客户组 [客户组位置], 接收连接IO操作.缓冲, 1, 客户组 [客户组位置], 接收连接IO操作.大小, 取整数型变量指针 (客户组 [客户组位置], 标志), 取整数型变量指针 (客户组 [客户组位置], 接收连接IO操作.Internal), 0))
                .如果真结束
                相加 (客户组 [客户组位置], IP地址, “进入”, #换行符).加入文本 ()
                .如果真 (大于 (当前传送项目, 0))
                    .如果 (等于 (IP文本, 取文本左边 (传输项目组 [当前传送项目], 客户IP, 取文本长度 (IP文本))))
                        赋值 (传输项目组 [当前传送项目], 状态说明, “客户上线成功”)
                        赋值 (传输项目组 [当前传送项目], 连接时间, 取现行时间 ())
                        赋值 (传送客户位置, 客户组位置)
                        赋值 (传输项目组 [当前传送项目], 远程IP, 客户组 [客户组位置], IP地址)
                        列表状态刷新 ()
                        相加 (“主客户来了”, #换行符).加入文本 ()
                    .否则
                        断开客户 (客户组位置)
                    .如果结束
                    
                .如果真结束
                投递新连接 ()
            .如果真结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    .如果真 (大于 (标识, 0))
        赋值 (客户组位置, 标识)
        .如果真 (等于 (完成大小, 0)) ' 用户套接口断开
            断开客户 (客户组位置)
            .如果真 (等于 (客户组位置, 传送客户位置))
                相加 (“主客户离开”, #换行符).加入文本 ()
                赋值 (传送客户位置, -1)
                断开所有用户 ()
            .如果真结束
            
        .如果真结束
        .如果真 (等于 (返回结果, 1))
            复制内存 (结构指针, 取整数型变量指针 (临时IO操作.Internal), 28)
            .如果真 (等于 (临时IO操作.类型, #接收数据))
                .如果 (大于 (客户组 [客户组位置], 接收连接IO操作.InternalHigh, 0))
                    数据到达 (取字节集左边 (客户组 [客户组位置], 接收连接IO操作.数据, 客户组 [客户组位置], 接收连接IO操作.InternalHigh), 客户组 [客户组位置], 套接口, 客户组位置)
                    赋值 (客户组 [客户组位置], 接收连接IO操作.类型, #接收数据)
                .否则
                    
                .如果结束
                赋值 (返回结果, WSARecv (客户组 [客户组位置], 套接口, 客户组 [客户组位置], 接收连接IO操作.缓冲, 1, 客户组 [客户组位置], 接收连接IO操作.大小, 取整数型变量指针 (客户组 [客户组位置], 标志), 取整数型变量指针 (客户组 [客户组位置], 接收连接IO操作.Internal), 0))
            .如果真结束
            .如果真 (等于 (临时IO操作.类型, #发送数据))
                赋值 (客户组 [客户组位置], 不可发送数据, 假)
                .如果 (小于 (客户组 [客户组位置], 发送IO操作.InternalHigh, 客户组 [客户组位置], 发送IO操作.缓冲.len))
                    赋值 (客户组 [客户组位置], 发送IO操作.缓冲.len, 相减 (客户组 [客户组位置], 发送IO操作.缓冲.len, 客户组 [客户组位置], 发送IO操作.InternalHigh))
                    赋值 (客户组 [客户组位置], 发送IO操作.缓冲.buf, 相加 (取字节集型变量指针 (客户组 [客户组位置], 发送IO操作.数据), 客户组 [客户组位置], 发送IO操作.InternalHigh))
                    赋值 (客户组 [客户组位置], 发送IO操作.类型, #发送数据)
                    WSASend (客户组 [客户组位置], 套接口, 客户组 [客户组位置], 发送IO操作.缓冲, 1, 客户组 [客户组位置], 发送IO操作.大小, 0, 取整数型变量指针 (客户组 [客户组位置], 发送IO操作.Internal), 0)
                    赋值 (客户组 [客户组位置], 不可发送数据, 真)
                .否则
                    IO发送数据 (客户组位置)
                .如果结束
                
            .如果真结束
            .如果真 (等于 (临时IO操作.类型, #发送文件))
                .如果真 (大于 (客户组 [客户组位置], 文件句柄, 0))
                    关闭文件 (客户组 [客户组位置], 文件句柄)
                    赋值 (客户组 [客户组位置], 文件句柄, 0)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    赋值 (完成大小, 0)
    赋值 (标识, 0)
.判断循环尾 ()

.子程序 AcceptEx, 整数型, , 
.参数 套接口, 空白型, , 
.参数 新套接口, 空白型, , 
.参数 缓冲, 空白型, , 
.参数 缓冲大小1, 空白型, , 
.参数 缓冲大小2, 空白型, , 
.参数 缓冲大小3, 空白型, , 
.参数 实际返回大小指针, 空白型, , 
.参数 完成结构指针, 空白型, , 

.局部变量 参数表, 空白型, , "10", 

赋值 (参数表 [1], 套接口)
赋值 (参数表 [2], 新套接口)
赋值 (参数表 [3], 缓冲)
赋值 (参数表 [4], 缓冲大小1)
赋值 (参数表 [5], 缓冲大小2)
赋值 (参数表 [6], 缓冲大小3)
赋值 (参数表 [7], 实际返回大小指针)
赋值 (参数表 [8], 完成结构指针)
返回 (对象执行 (取整数型变量指针 (接收连接函数地址), 8, 参数表))


.子程序 GetAcceptExSockaddrs, 整数型, , 
.参数 缓冲, 空白型, , 
.参数 缓冲大小1, 空白型, , 
.参数 缓冲大小2, 空白型, , 
.参数 缓冲大小3, 空白型, , 
.参数 本地地址, 空白型, , 
.参数 本地地址长度, 空白型, 参考, 
.参数 远程地址, 空白型, , 
.参数 远程地址长度, 空白型, 参考, 

.局部变量 参数表, 空白型, , "10", 

赋值 (参数表 [1], 缓冲)
赋值 (参数表 [2], 缓冲大小1)
赋值 (参数表 [3], 缓冲大小2)
赋值 (参数表 [4], 缓冲大小3)
赋值 (参数表 [5], 本地地址)
赋值 (参数表 [6], 取整数型变量指针 (本地地址长度))
赋值 (参数表 [7], 远程地址)
赋值 (参数表 [8], 取整数型变量指针 (远程地址长度))
返回 (对象执行 (取整数型变量指针 (取套接口地址函数地址), 8, 参数表))


.子程序 TransmitFile, 整数型, , 
.参数 套接口, 空白型, , 
.参数 文件句柄, 空白型, , 
.参数 发送长度, 空白型, , 0表示发送整个文件
.参数 发送块长度, 空白型, , 
.参数 完成结构地址, 空白型, , 这里可以指定文件发送起始位置
.参数 缓冲, 空白型, , 
.参数 标志, 空白型, , 

.局部变量 参数表, 空白型, , "10", 

赋值 (参数表 [1], 套接口)
赋值 (参数表 [2], 文件句柄)
赋值 (参数表 [3], 发送长度)
赋值 (参数表 [4], 发送块长度)
赋值 (参数表 [5], 完成结构地址)
赋值 (参数表 [6], 缓冲)
赋值 (参数表 [7], 标志)
返回 (对象执行 (取整数型变量指针 (发送文件函数地址), 7, 参数表))


.子程序 取空闲客户组, 整数型, , 
.局部变量 n, 整数型, , , 

.计次循环首 (取数组成员数 (客户组), n)
    .如果真 (等于 (客户组 [n], 套接口, 0))
        返回 (n)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 IO发送数据, 空白型, , 
.参数 客户组位置, 空白型, , 
.参数 数据, 字节集, 可空, 
.参数 是否滞留发送, 逻辑型, 可空, 

.局部变量 cd, 空白型, , , 

.如果真 (小于或等于 (客户组位置, 0))
    返回 ()
.如果真结束
.如果 (等于 (取字节集长度 (数据), 0))
    .如果真 (等于 (客户组 [客户组位置], 不可发送数据, 假))
        .如果真 (大于 (取数组成员数 (客户组 [客户组位置], 待发送数据), 0))
            赋值 (客户组 [客户组位置], 发送IO操作.数据, 客户组 [客户组位置], 待发送数据 [1])
            赋值 (客户组 [客户组位置], 发送IO操作.缓冲.len, 取字节集长度 (客户组 [客户组位置], 待发送数据 [1]))
            删除成员 (客户组 [客户组位置], 待发送数据, 1, 1)
            赋值 (客户组 [客户组位置], 发送IO操作.缓冲.buf, 取字节集型变量指针 (客户组 [客户组位置], 发送IO操作.数据))
            赋值 (客户组 [客户组位置], 发送IO操作.类型, #发送数据)
            赋值 (客户组 [客户组位置], 发送IO操作.大小, 0)
            WSASend (客户组 [客户组位置], 套接口, 客户组 [客户组位置], 发送IO操作.缓冲, 1, 客户组 [客户组位置], 发送IO操作.大小, 0, 取整数型变量指针 (客户组 [客户组位置], 发送IO操作.Internal), 0)
            赋值 (客户组 [客户组位置], 不可发送数据, 真)
            返回 ()
        .如果真结束
        赋值 (客户组 [客户组位置], 发送IO操作.数据, {  })
        赋值 (客户组 [客户组位置], 发送IO操作.缓冲.len, 0)
    .如果真结束
    
.否则
    .如果 (等于 (客户组 [客户组位置], 不可发送数据, 假))
        .如果 (等于 (是否滞留发送, 真))
            赋值 (cd, 取字节集长度 (数据))
            赋值 (客户组 [客户组位置], 发送IO操作.数据, 相加 (到字节集 (cd), 数据))
            赋值 (客户组 [客户组位置], 发送IO操作.缓冲.len, 相加 (取字节集长度 (数据), 4))
        .否则
            赋值 (客户组 [客户组位置], 发送IO操作.数据, 数据)
            赋值 (客户组 [客户组位置], 发送IO操作.缓冲.len, 取字节集长度 (数据))
        .如果结束
        赋值 (客户组 [客户组位置], 发送IO操作.缓冲.buf, 取字节集型变量指针 (客户组 [客户组位置], 发送IO操作.数据))
        赋值 (客户组 [客户组位置], 发送IO操作.类型, #发送数据)
        赋值 (客户组 [客户组位置], 发送IO操作.大小, 0)
        WSASend (客户组 [客户组位置], 套接口, 客户组 [客户组位置], 发送IO操作.缓冲, 1, 客户组 [客户组位置], 发送IO操作.大小, 0, 取整数型变量指针 (客户组 [客户组位置], 发送IO操作.Internal), 0)
        赋值 (客户组 [客户组位置], 不可发送数据, 真)
    .否则
        .如果 (等于 (是否滞留发送, 真))
            赋值 (cd, 取字节集长度 (数据))
            加入成员 (客户组 [客户组位置], 待发送数据, 相加 (到字节集 (cd), 数据))
        .否则
            加入成员 (客户组 [客户组位置], 待发送数据, 数据)
        .如果结束
        
    .如果结束
    
.如果结束


.子程序 断开客户, 空白型, , 
.参数 客户组位置, 整数型, , 

.局部变量 空客户, 客户端, , , 

.如果真 (小于 (客户组位置, 1))
    返回 ()
.如果真结束
.如果真 (不等于 (客户组 [客户组位置], 用户名, “”))
    赋值 (客户组 [客户组位置], 用户名, “”)
.如果真结束
.如果真 (大于 (客户组 [客户组位置], 套接口, 0))
    closesocket (客户组 [客户组位置], 套接口)
    赋值 (客户组 [客户组位置], 套接口, 0)
.如果真结束
.如果真 (大于 (客户组 [客户组位置], 文件句柄, 0))
    关闭文件 (客户组 [客户组位置], 文件句柄)
    赋值 (客户组 [客户组位置], 文件句柄, 0)
    赋值 (正在接收文件, 假)
.如果真结束
赋值 (客户组 [客户组位置], 空客户)
相加 (客户组 [客户组位置], IP地址, “断开”, #换行符).加入文本 ()
投递新连接 ()

.子程序 添加传输文件, 空白型, 公开, 
.参数 IP, 文本型, , 
.参数 发送, 逻辑型, 可空, 
.参数 客户名称, 文本型, , 
.参数 远程路径, 文本型, , 
.参数 本地路径, 文本型, , 
.参数 大小, 文本型, , 
.参数 暂停, 逻辑型, 可空, 

.局部变量 临时项目, 传输项目, , , 

赋值 (临时项目.客户IP, IP)
赋值 (临时项目.发送, 发送)
赋值 (临时项目.客户名称, 客户名称)
赋值 (临时项目.远程路径, 远程路径)
赋值 (临时项目.本地路径, 本地路径)
.如果 (等于 (暂停, 假))
    赋值 (临时项目.传送状态, 0)
.否则
    赋值 (临时项目.传送状态, 3)
.如果结束
赋值 (临时项目.创建时间, 时间到文本 (取现行时间 (), 1))
赋值 (临时项目.显示大小, 大小)
加入成员 (传输项目组, 临时项目)
列表添加 (取数组成员数 (传输项目组))
执行传送 ()

.子程序 执行传送, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, 取下条传送项目 ())
.如果真 (大于 (a, 0))
     ' 断开所有用户 ()
    发送通知上线_ ()
.如果真结束
.如果真 (小于 (当前传送项目, 0)) ' 无传送项目
    赋值 (.标题, “无”)
    赋值 (.位置, 0)
    赋值 (.标题, “”)
.如果真结束


.子程序 取传送中项目, 整数型, , 
.局部变量 n, 整数型, , , 

.计次循环首 (取数组成员数 (传输项目组), n)
    .如果真 (等于 (传输项目组 [n], 传送状态, 1))
        赋值 (当前传送项目, n)
        返回 (n)
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 取下条传送项目, 整数型, , 
.局部变量 n, 整数型, , , 

.如果真 (小于 (取传送中项目 (), 0))
    .计次循环首 (取数组成员数 (传输项目组), n)
        .如果真 (等于 (传输项目组 [n], 传送状态, 0))
            赋值 (当前传送项目, n)
            返回 (n)
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
返回 (-1)

.子程序 发送通知上线_, 空白型, , 
.局部变量 a, 空白型, , , 
.局部变量 sb, 逻辑型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 长度, 字节集, , , 
.局部变量 发送字节集, 字节集, , , 

.如果 (等于 (传输项目组 [当前传送项目], 发送, 真)) ' 发送文件
    赋值 (a, 取文件尺寸 (传输项目组 [当前传送项目], 本地路径))
    赋值 (长度, 取空白字节集 (8))
    写到内存 (a, 取字节集型变量指针 (长度), 8)
    赋值 (sb, 真)
    .如果 (大于 (a, 0))
        赋值 (传输项目组 [当前传送项目], 文件大小, a)
        列表大小刷新 ()
        赋值 (发送字节集, 相加 (到字节集 (相加 (“下载|”, 传输项目组 [当前传送项目], 远程路径, “|abcd|”)), 长度))
        赋值 (.标题, 到文本 (当前传送项目))
        .如果真 (等于 (传送数据子程序 (到整数 (传输项目组 [当前传送项目], 客户名称), 相加 ({ 4 }, { 12 }, 发送字节集)), 真))
            赋值 (sb, 假)
        .如果真结束
        
    .否则
        传输完成 (7)
        返回 ()
    .如果结束
    
.否则
    赋值 (发送字节集, 到字节集 (相加 (“上传|”, 传输项目组 [当前传送项目], 远程路径, “|”, “2222|1111|”)))
    .如果真 (等于 (传送数据子程序 (到整数 (传输项目组 [当前传送项目], 客户名称), 相加 ({ 4 }, { 12 }, 发送字节集)), 真))
        赋值 (.标题, 到文本 (当前传送项目))
        赋值 (sb, 假)
    .如果真结束
     ' 接收文件
.如果结束
.如果 (等于 (sb, 真))
    传输完成 (9)
.否则
    传输完成 (0)
.如果结束


.子程序 列表添加, 空白型, , 
.参数 位置A, 整数型, , 

.局部变量 a, 整数型, , , 
.局部变量 整数变量, 整数型, , , 
.局部变量 未知, 整数型, , , 

 ' 0、编号 1、方式 2、客户 3、文件名 4、文件大小 5、完成百分比 6、状态说明
.如果真 (小于或等于 (位置A, 0))
    返回 ()
.如果真结束
赋值 (a, .插入表项 (到文本 (位置A), 6, 6, , ))
.如果 (等于 (传输项目组 [位置A], 发送, 真))
    a.置标题 (1, “发送”)
    a.置图片 (1, 2)
.否则
    a.置标题 (1, “接收”)
    a.置图片 (1, 3)
.如果结束
a.置标题 (2, 传输项目组 [位置A], 客户名称)
赋值 (整数变量, 倒找文本 (传输项目组 [位置A], 本地路径, “\”, , 假))
a.置标题 (3, 取文本右边 (传输项目组 [位置A], 本地路径, 相减 (取文本长度 (传输项目组 [位置A], 本地路径), 整数变量)))
a.置标题 (5, “0 %”)
.如果 (等于 (传输项目组 [位置A], 传送状态, 3))
    a.置标题 (6, “ 暂停”)
.否则
    a.置标题 (6, “ 等待发送”)
.如果结束
.如果真 (大于 (传输项目组 [位置A], 文件大小, 0))
    赋值 (整数变量, 相加 (整除 (传输项目组 [位置A], 文件大小, 1024), 1))
    a.置标题 (4, 相加 (数值到格式文本 (整数变量, 0, 真), “ KB”))
.如果真结束
.如果 (不等于 (传输项目组 [位置A], 显示大小, “”))
    a.置标题 (4, 传输项目组 [位置A], 显示大小)
.否则
    a.置标题 (4, “未知”)
.如果结束


.子程序 列表排列编号, 空白型, , 
.局部变量 n, 整数型, , , 

.计次循环首 (取表项数 (), n)
    相减 (n, 1).置标题 (0, 到文本 (n))
.计次循环尾 ()


.子程序 列表状态刷新, 空白型, , 
 ' 0、编号 1、方式 2、客户 3、文件名 4、文件大小 5、完成百分比 6、状态说明
.如果真 (大于 (当前传送项目, 0))
    相减 (当前传送项目, 1).置标题 (6, 传输项目组 [当前传送项目], 状态说明)
    相减 (当前传送项目, 1).置标题 (5, 传输项目组 [当前传送项目], 完成百分比)
    相减 (当前传送项目, 1).置标题 (4, 传输项目组 [当前传送项目], 显示大小)
    
.如果真结束


.子程序 列表大小刷新, 空白型, , 
.局部变量 整数变量, 整数型, , , 

.如果真 (大于 (当前传送项目, 0))
    .如果 (大于 (传输项目组 [当前传送项目], 文件大小, 0))
        赋值 (整数变量, 相加 (整除 (传输项目组 [当前传送项目], 文件大小, 1024), 1))
        相减 (当前传送项目, 1).置标题 (4, 相加 (数值到格式文本 (整数变量, 0, 真), “ KB”))
    .否则
        相减 (当前传送项目, 1).置标题 (4, “未知”)
    .如果结束
    
.如果真结束


.子程序 刷新子列表, 空白型, , 
.局部变量 位, 整数型, , , 

 ' 0、选中ID  1、传送方式  2、服务状态  3、远程路径  4、本地路径  5、大小  6、完成  7、平均速度  8、剩余时间  9、创建时间  10、连接时间  11、完成时间  12、远程IP
赋值 (位, .)
.如果 (小于 (位, 0))
    0.置标题 (1, “”)
    1.置标题 (1, “”)
    2.置标题 (1, “”)
    3.置标题 (1, “”)
    4.置标题 (1, “”)
    5.置标题 (1, “”)
    6.置标题 (1, “”)
    7.置标题 (1, “”)
    8.置标题 (1, “”)
    9.置标题 (1, “”)
    10.置标题 (1, “”)
    11.置标题 (1, “”)
    12.置标题 (1, “”)
.否则
    赋值 (位, 相加 (位, 1))
    0.置标题 (1, 到文本 (位))
    1.置标题 (1, 相减 (位, 1).取标题 (1))
    2.置标题 (1, 传输项目组 [位], 状态说明)
    3.置标题 (1, 传输项目组 [位], 远程路径)
    4.置标题 (1, 传输项目组 [位], 本地路径)
    5.置标题 (1, 数值到格式文本 (传输项目组 [位], 文件大小, , 真))
    6.置标题 (1, 数值到格式文本 (传输项目组 [位], 已完成大小, , 真))
    7.置标题 (1, 相加 (到文本 (传输项目组 [位], 平均速度), “ KB/秒”))
    8.置标题 (1, 传输项目组 [位], 剩余时间)
    9.置标题 (1, 传输项目组 [位], 创建时间)
    10.置标题 (1, 时间到文本 (传输项目组 [位], 连接时间, 1))
    11.置标题 (1, 传输项目组 [位], 完成时间)
    12.置标题 (1, 传输项目组 [位], 远程IP)
.如果结束


.子程序 _按钮3_被单击, 空白型, , 
.局部变量 a, 整数型, , , 

.计次循环首 (取表项数 (), a)
    相加 (到文本 (相减 (a, 1)), “、”, 相减 (a, 1).取标题 (0), “  ”).加入文本 ()
.计次循环尾 ()

.子程序 _传输列表框_右键单击表项, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.如果真 (小于 (a, 0))
    返回 ()
.如果真结束
.判断开始 (等于 (传输项目组 [相加 (a, 1)].传送状态, 0))
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.可视, 真)
.判断 (等于 (传输项目组 [相加 (a, 1)].传送状态, 1))
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 真)
.判断 (等于 (传输项目组 [相加 (a, 1)].传送状态, 2))
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.可视, 真)
.判断 (等于 (传输项目组 [相加 (a, 1)].传送状态, 3))
    赋值 (.可视, 真)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.可视, 假)
.默认
    
.判断结束
弹出菜单 ()


.子程序 _菜单传送_被选择, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.如果真 (小于 (a, 0))
    返回 ()
.如果真结束
赋值 (传输项目组 [相加 (a, 1)].传送状态, 0)
执行传送 ()

.子程序 _菜单重新传送_被选择, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.如果真 (小于 (a, 0))
    返回 ()
.如果真结束
赋值 (a, 相加 (a, 1))
.如果真 (等于 (传输项目组 [a], 传送状态, 2))
    赋值 (传输项目组 [a], 传送状态, 0)
    赋值 (传输项目组 [a], 已完成大小, 0)
    赋值 (传输项目组 [a], 状态说明, “正在等待重新下载”)
    赋值 (传输项目组 [a], 完成百分比, “0 %”)
    执行传送 ()
.如果真结束


.子程序 _菜单暂停_被选择, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.如果真 (小于 (a, 0))
    返回 ()
.如果真结束
.如果真 (等于 (传输项目组 [相加 (a, 1)].传送状态, 0))
    赋值 (传输项目组 [相加 (a, 1)].传送状态, 3)
.如果真结束



.子程序 _菜单停止_被选择, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.如果真 (等于 (信息框 (“你确定要停止当前任务吗?”, #是否钮, “提示”), #是钮))
    .如果真 (不等于 (传输项目组 [相加 (a, 1)].传送状态, 1))
        返回 ()
    .如果真结束
    赋值 (传输项目组 [相加 (a, 1)].传送状态, 2)
    赋值 (传输项目组 [相加 (a, 1)].状态说明, “用户停止”)
    断开客户 (传送客户位置)
    刷新子列表 ()
    执行传送 ()
    返回 ()
.如果真结束


.子程序 _菜单删除_被选择, 空白型, , 
.局部变量 a, 整数型, , , 

赋值 (a, .)
.判断开始 (等于 (传输项目组 [相加 (a, 1)].传送状态, 0))
    赋值 (传输项目组 [相加 (a, 1)].传送状态, 3)
    .如果真 (等于 (信息框 (“是否删除选中任务?”, #是否钮, “提示”), #否钮))
        赋值 (传输项目组 [相加 (a, 1)].传送状态, 0)
        执行传送 ()
        返回 ()
    .如果真结束
    
.判断 (等于 (传输项目组 [相加 (a, 1)].传送状态, 1))
    .如果真 (等于 (信息框 (“任务正在下载，是否删除?”, #是否钮, “提示”), #否钮))
        返回 ()
    .如果真结束
    断开客户 (传送客户位置)
    删除成员 (传输项目组, 相加 (a, 1), 1)
    a.删除表项 ()
    刷新子列表 ()
    执行传送 ()
    返回 ()
.默认
    
.判断结束
删除成员 (传输项目组, 相加 (a, 1), 1)
a.删除表项 ()



.子程序 _时钟1_周期事件, 空白型, , 
执行传送 ()
赋值 (.时钟周期, 0)


.子程序 传输完成, 空白型, , 0、传送中 1、完成，2、失败，3、断开，4、传输比对错误，5、文件读写错误,6、重试失败,7、本地文件不存在8、服务器创建失败
.参数 整数, 整数型, , 

.如果真 (小于 (当前传送项目, 0))
    返回 ()
.如果真结束
.如果真 (等于 (整数, 0))
    赋值 (传输项目组 [当前传送项目], 传送状态, 1)
    赋值 (传输项目组 [当前传送项目], 状态说明, “等侍客户”)
    赋值 (.位置, 0)
    赋值 (.标题, “0”)
    .如果 (等于 (传输项目组 [当前传送项目], 发送, 真))
        相减 (当前传送项目, 1).置图片 (1, 0)
    .否则
        相减 (当前传送项目, 1).置图片 (1, 1)
    .如果结束
    列表状态刷新 ()
    返回 ()
.如果真结束
.如果真 (等于 (整数, 3))
    赋值 (传输项目组 [当前传送项目], 状态说明, “远程断开”)
    相减 (当前传送项目, 1).置图片 (1, 11)
    .如果真 (等于 (传输项目组 [当前传送项目], 传送状态, 2))
        赋值 (传输项目组 [当前传送项目], 状态说明, “用户停止”)
    .如果真结束
    返回 ()
.如果真结束
赋值 (传输项目组 [当前传送项目], 传送状态, 2)
.判断开始 (等于 (整数, 1)) ' 接收完成
    赋值 (传输项目组 [当前传送项目], 状态说明, “传送完成”)
    相减 (当前传送项目, 1).置图片 (1, 4)
.判断 (等于 (整数, 2))
    赋值 (传输项目组 [当前传送项目], 状态说明, “传送失败”)
    相减 (当前传送项目, 1).置图片 (1, 10)
.判断 (等于 (整数, 4))
    赋值 (传输项目组 [当前传送项目], 状态说明, “传输比对错误”)
    相减 (当前传送项目, 1).置图片 (1, 9)
.判断 (等于 (整数, 5))
    赋值 (传输项目组 [当前传送项目], 状态说明, “文件读写错误”)
    相减 (当前传送项目, 1).置图片 (1, 5)
.判断 (等于 (整数, 6))
    赋值 (传输项目组 [当前传送项目], 状态说明, “重试失败”)
    相减 (当前传送项目, 1).置图片 (1, 5)
.判断 (等于 (整数, 7))
    赋值 (传输项目组 [当前传送项目], 状态说明, “本地文件不存在”)
    相减 (当前传送项目, 1).置图片 (1, 5)
.判断 (等于 (整数, 8))
    赋值 (传输项目组 [当前传送项目], 状态说明, “服务器创建失败”)
    相减 (当前传送项目, 1).置图片 (1, 9)
.判断 (等于 (整数, 9))
    赋值 (传输项目组 [当前传送项目], 状态说明, “通知客户失败”)
    相减 (当前传送项目, 1).置图片 (1, 9)
.默认
    
.判断结束
赋值 (传输项目组 [当前传送项目], 完成时间, 时间到文本 (取现行时间 (), 1))
更新平均速度 ()
列表状态刷新 ()
赋值 (当前传送项目, -1)
赋值 (.时钟周期, 500)

.子程序 _传输列表框_左键单击表项, 空白型, , 
刷新子列表 ()

.子程序 _时钟2_周期事件, 空白型, , 
.如果 (小于 (当前传送项目, 1))
    赋值 (.时钟周期, 0)
.否则
    更新当前速度 ()
.如果结束


.子程序 更新平均速度, 空白型, , 
.局部变量 用时, 长整数型, , , 
.局部变量 完成KB, 长整数型, , , 

.如果真 (大于 (当前传送项目, 0))
    赋值 (用时, 相减 (取启动时间 (), 传输项目组 [当前传送项目], 开始微秒))
    .如果真 (大于 (传输项目组 [当前传送项目], 已完成大小, 0))
        赋值 (用时, 整除 (用时, 1000))
        赋值 (完成KB, 整除 (传输项目组 [当前传送项目], 已完成大小, 1024))
        赋值 (传输项目组 [当前传送项目], 平均速度, 完成KB)
        赋值 (传输项目组 [当前传送项目], 剩余时间, “”)
        刷新子列表 ()
    .如果真结束
    
.如果真结束


.子程序 更新当前速度, 空白型, , 
.局部变量 本秒完成, 长整数型, , , 
.局部变量 当前速度a, 整数型, , , 
.局部变量 进度, 整数型, , , 

赋值 (本秒完成, 相减 (传输项目组 [当前传送项目], 已完成大小, 传输项目组 [当前传送项目], 已计完成))
赋值 (当前速度a, 整除 (本秒完成, 1024))
赋值 (传输项目组 [当前传送项目], 已计完成, 传输项目组 [当前传送项目], 已完成大小)
赋值 (.标题, 数值到格式文本 (当前速度a, 0, 真))
赋值 (本秒完成, 整除 (相减 (传输项目组 [当前传送项目], 文件大小, 传输项目组 [当前传送项目], 已完成大小), 1024))
.如果 (小于 (当前速度a, 1))
    赋值 (传输项目组 [当前传送项目], 剩余时间, “?”)
.否则
    赋值 (传输项目组 [当前传送项目], 剩余时间, 相加 (数值到格式文本 (整除 (本秒完成, 当前速度a), 0, 真), “秒”))
.如果结束
.如果真 (等于 (., 相减 (当前传送项目, 1)))
    2.置标题 (1, 传输项目组 [当前传送项目], 状态说明)
    6.置标题 (1, 数值到格式文本 (传输项目组 [当前传送项目], 已完成大小, , 真))
    7.置标题 (1, 相加 (到文本 (.标题), “ KB/秒”))
    8.置标题 (1, 传输项目组 [当前传送项目], 剩余时间)
.如果真结束
赋值 (进度, 相乘 (相除 (传输项目组 [当前传送项目], 已完成大小, 传输项目组 [当前传送项目], 文件大小), 100))
赋值 (.位置, 进度)
赋值 (传输项目组 [当前传送项目], 完成百分比, 相加 (到文本 (进度), “%”))
列表状态刷新 ()

.子程序 _传输列表框_当前表项被改变, 空白型, , 
刷新子列表 ()


.子程序 _传输窗口_创建完毕, 空白型, , 
传输窗口.置父窗口 (_启动窗口.)
传输窗口.移动 (0, 0, , )
.如果真 (等于 (是否已创建服务器, 假))
    .如果真 (建立服务 ())
    .如果真结束
    
.如果真结束


.子程序 _编辑框1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.内容, “”)

.子程序 _传输停止_被单击, 空白型, , 


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 对象初始化, 空白型, , 


.子程序 对象卸载, 空白型, , 


.子程序 对象创建接口, 整数型, , 
.参数 主标识符, 文本型, , 
.参数 接口标识符, 文本型, , 
.参数 接口, 整数型, 参考, 



.子程序 对象执行, 整数型, , 
.参数 子程序入口地址, 整数型, , 
.参数 参数个数, 整数型, 可空, 
.参数 参数, 整数型, 可空 数组, 



.子程序 对象到宽字符, 字节集, , 
.参数 待转换文本, 文本型, , 



.子程序 对象到窄字符, 文本型, , 
.参数 地址, 整数型, , 



.子程序 对象取GUID, 字节集, , 
.参数 GUID, 文本型, , 



.子程序 对象读数, 整数型, , 
.参数 地址, 整数型, , 



.子程序 对象取接口, 整数型, , 
.参数 原接口, 整数型, , 
.参数 标识符, 文本型, , 
.参数 新接口, 整数型, 参考, 



.子程序 对象销毁, 整数型, , 
.参数 接口, 整数型, , 



.子程序 对象转换GUID到文本, 文本型, , 
.参数 IID, 字节集, , 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 取文本型变量指针, 整数型, , 
.参数 a, 文本型, 参考, 



.子程序 取字节集型变量指针, 整数型, , 
.参数 a, 字节集, , 



.子程序 取整数型变量指针, 整数型, , 
.参数 a, 整数型, 参考, 



.子程序 运行函数, 整数型, , 
.参数 子程序入口地址, 整数型, , 
.参数 参数个数, 整数型, 可空, 
.参数 参数, 整数型, 可空 数组, 



.子程序 取字节型数组变量指针, 整数型, , 
.参数 a, 字节型, 参考 数组, 



.子程序 取长整数变量指针, 整数型, , 
.参数 a, 长整数型, 参考, 



.子程序 复制字节集, 整数型, , 
.参数 源字节集, 字节集, 参考, 
.参数 目的字节集, 字节集, 参考, 
.参数 复制大小, 整数型, , 



.子程序 复制内存, 整数型, , 
.参数 源地址, 整数型, , 
.参数 目的地址, 整数型, , 
.参数 复制大小, 整数型, , 



.子程序 拷贝字节集到内存, 整数型, , 
.参数 源字节集, 字节集, 参考, 
.参数 目的地址, 整数型, , 
.参数 复制大小, 整数型, , 



.子程序 拷贝内存到字节集, 整数型, , 
.参数 源地址, 整数型, , 
.参数 目的字节集, 字节集, 参考, 
.参数 复制大小, 整数型, , 



.子程序 合成跳转代码, 字节集, , 
.参数 目的函数地址, 整数型, , 



.子程序 打开进程, 整数型, , 
.参数 进程ID, 整数型, , 



.子程序 取双精度小数型变量指针, 整数型, , 
.参数 a, 双精度小数型, 参考, 



.子程序 右移位, 整数型, , 
.参数 目标数据, 整数型, , 
.参数 移动位数, 整数型, , 



.子程序 左移位, 整数型, , 
.参数 目标数据, 整数型, , 
.参数 移动位数, 整数型, , 



.子程序 取日期时间型变量指针, 整数型, , 
.参数 a, 日期时间型, 参考, 



.子程序 取小数型变量指针, 整数型, , 
.参数 a, 小数型, 参考, 



.子程序 取字节型变量指针, 整数型, , 
.参数 a, 字节型, 参考, 



.子程序 _取字节集长度, 整数型, , 
.参数 字节集数据, 字节集, 参考, 




 ' 不属于任何一个程序集、类模块的函数：
