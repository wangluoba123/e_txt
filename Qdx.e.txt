 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.wodesoft.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 640
    高度 = 504
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “呵呵启动项管理”
    帮助文件名 = “”



.图片 未知图标, " ' 已保存到：D:\易语言学习\Data\Qdx.e\未知图标", , 
.图片 程序图标, " ' 已保存到：D:\易语言学习\Data\Qdx.e\程序图标", , 
.常量 目录_AppData, "“AppData”", 公开, 
.常量 目录_IE临时目录, "“Cache”", 公开, 
.常量 目录_CDBurning, "“CD Burning”", 公开, 
.常量 目录_Cookies, "“Cookies”", 公开, 
.常量 目录_桌面, "“Desktop”", 公开, 
.常量 目录_收藏夹, "“Favorites”", 公开, 
.常量 目录_字体, "“Fonts”", 公开, 
.常量 目录_历史记录, "“History”", 公开, 
.常量 目录_LocalAppData, "“Local AppData”", 公开, 
.常量 目录_LocalSettings, "“Local Settings”", 公开, 
.常量 目录_我的音乐, "“My Music”", 公开, 
.常量 目录_我的图片, "“My Pictures”", 公开, 图片收藏。
.常量 目录_我的视频, "“My Video”", 公开, 
.常量 目录_NetHood, "“NetHood”", 公开, 
.常量 目录_我的文档, "“Personal”", 公开, 
.常量 目录_PrintHood, "“PrintHood”", 公开, 
.常量 目录_开始_程序, "“Programs”", 公开, 
.常量 目录_我最近的文档, "“Recent”", 公开, 
.常量 目录_发送到, "“SendTo”", 公开, 右键-发送到。
.常量 目录_开始菜单, "“Start Menu”", 公开, 
.常量 目录_启动文件夹, "“Startup”", 公开, 
.常量 目录_Templates, "“Templates”", 公开, 
.常量 目录_所有用户_管理工具, "“Common Administrative Tools”", 公开, 
.常量 目录_所有用户_AppData, "“Common AppData”", 公开, 
.常量 目录_所有用户_桌面, "“Common Desktop”", 公开, 
.常量 目录_所有用户_文档, "“Common Documents”", 公开, 
.常量 目录_所有用户_收藏夹, "“Common Favorites”", 公开, 
.常量 目录_所有用户_开始_程序, "“Common Programs”", 公开, 
.常量 目录_所有用户_开始菜单, "“Common Start Menu”", 公开, 
.常量 目录_所有用户_启动文件夹, "“Common Startup”", 公开, 
.常量 目录_所有用户_Templates, "“Common Templates”", 公开, 
.常量 目录_所有用户_音乐, "“CommonMusic”", 公开, 
.常量 目录_所有用户_图片, "“CommonPictures”", 公开, 
.常量 目录_所有用户_视频, "“CommonVideo”", 公开, 
.常量 , , , 
.常量 目录_临时目录, "“Temp”", 公开, 
.常量 目录_安装目录, "“WinDir”", 公开, 
.常量 目录_系统目录, "“System32”", 公开, 
.常量 目录_用户目录, "“USERPROFILE”", 公开, 
.常量 目录_所有用户, "“ALLUSERSPROFILE”", 公开, 
.常量 目录_程序文件, "“ProgramFiles”", 公开, 
.常量 目录_所有用户_程序文件, "“CommonProgramFiles”", 公开, 
.常量 目录_系统盘, "“SystemDrive”", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库




数据类型 键名数据, 公开, 
    .成员 键名, 文本型, , , 
    .成员 类型, 整数型, , , 

数据类型 程序信息, 公开, 
    .成员 文件版本, 文本型, , , 
    .成员 内部名称, 文本型, , , 
    .成员 公司名称, 文本型, , , 
    .成员 版权, 文本型, , , 
    .成员 描述, 文本型, , , 
    .成员 语言, 文本型, , , 


.DLL命令 枚举键值, 整数型, "", "RegEnumValueA", , 零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 句柄, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 表项索引, 整数型, , 欲获取值的索引。注意第一个值的索引编号为零
    .参数 子键名, 文本型, , 用于装载位于指定索引处值名的一个缓冲区
    .参数 子键长度, 整数型, 传址, 用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 lpReserved, 整数型, , 未用设为零
    .参数 键值类型, 整数型, 传址, 值的类型，用于装载值的类型代码的变量
    .参数 键值数据, 字节集, 传址, 用于装载值数据的一个缓冲区
    .参数 键值缓寸, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 RegOpenKey, 整数型, "advapi32.dll", "RegOpenKeyA", , 打开一个现有的注册表项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或指定一个标准项名
    .参数 lpSubKey, 文本型, , 要打开的项名
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载（保存）打开注册表项的一个句柄;

.DLL命令 API_RegCloseKey, 整数型, "advapi32.dll", "RegCloseKey", , 关闭系统注册表中的一个项（或键）  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要关闭的项;

.DLL命令 RegEnumKey, 整数型, "", "RegEnumKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 dwIndex, 整数型, , 
    .参数 lpName, 文本型, 传址, 
    .参数 cbName, 整数型, , 

.DLL命令 RegDeleteValueA, 整数型, "advapi32.dll", "RegDeleteValueA", , 
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 

.DLL命令 RegQueryValueEx, 整数型, "advapi32.dll", "RegQueryValueExA", , 获取一个项的设置值  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 一个已打开项的句柄，或者指定一个标准项名
    .参数 lpValueName, 文本型, , 要获取值的名字
    .参数 lpReserved, 整数型, , 未用，设为零
    .参数 lpType, 整数型, 传址, 用于装载取回数据类型的一个变量
    .参数 lpData, 字节集, 传址, 用于装载指定值的一个缓冲区
    .参数 lpcbData, 整数型, 传址, 用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际装载到缓冲区的字节数;

.DLL命令 RegSetValueEx, 整数型, "advapi32", "RegSetValueExA", , RegSetValue，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 
    .参数 pValueName, 文本型, , 
    .参数 Reserved, 整数型, , Long，未用，设为零
    .参数 dwType, 整数型, , 
    .参数 lpData, 文本型, 传址, 
    .参数 cbData, 整数型, , 

.DLL命令 取错误信息_, 整数型, "kernel32", "GetLastError", , $(b)

.DLL命令 格式化消息字符串, 整数型, "kernel32", "FormatMessageA", , FormatMessage
    .参数 标志, 整数型, , dwFlags
    .参数 来源, 整数型, , lpSource
    .参数 消息Id, 整数型, , dwMessageId
    .参数 语言Id, 整数型, , dwLanguageId
    .参数 缓冲区, 文本型, , lpBuffer
    .参数 缓冲区大小, 整数型, , nSize
    .参数 变数, 整数型, , Arguments

.DLL命令 GetFileVersionInfo, 整数型, "version.dll", "GetFileVersionInfoA", , 
    .参数 lptstrFilename, 文本型, , 
    .参数 dwHandle, 整数型, , 
    .参数 dwLen, 整数型, , 
    .参数 lpData, 字节集, 传址, 

.DLL命令 GetFileVersionInfoSize, 整数型, "version.dll", "GetFileVersionInfoSizeA", , 
    .参数 lptstrFilename, 文本型, , 
    .参数 lpdwHandle, 整数型, , 

.DLL命令 VerQueryValue, 整数型, "version.dll", "VerQueryValueA", , 
    .参数 pBlock, 字节集, 传址, 
    .参数 lpSubBlock, 文本型, , 
    .参数 lplpBuffer, 整数型, 传址, 
    .参数 puLen, 整数型, 传址, 

.DLL命令 MoveMemory, 空白型, "Kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 lstrcpy, 整数型, "Kernel32", "lstrcpyA", , 
    .参数 lpString1, 文本型, , 
    .参数 lpString2, 整数型, , 

.DLL命令 VerLanguageName, 整数型, "Kernel32", "VerLanguageNameA", , 
    .参数 wLang, 整数型, , 
    .参数 szLang, 文本型, , 
    .参数 nSize, 整数型, , 

.DLL命令 FindWindow, 整数型, "user32", "FindWindowA", , 
    .参数 lpClassName, 文本型, , 
    .参数 lpWindowName, 整数型, , 

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", , 
    .参数 hWnd1, 整数型, , 
    .参数 hWnd2, 整数型, , 
    .参数 lpsz1, 文本型, , 
    .参数 lpsz2, 整数型, , 

.DLL命令 SendMessageA, 整数型, "", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 信息值, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 图片组, 字节集, , , 
.程序集变量 根, 整数型, , , 
.程序集变量 路, 文本型, , , 
.程序集变量 类, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

赋值 (., 真)
填充列表框 ()

.子程序 填充列表框, 空白型, , 
赋值 (图片组, 未知支持库函数_30 (16, 16))
全部删除 ()
枚举目录启动项 (取目录 (#目录_所有用户_启动文件夹), “所有用户启动文件夹”)
枚举目录启动项 (取目录 (#目录_启动文件夹), “当前用户启动文件夹”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\Run”, “当前用户Run”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\Run”, “所有用户Run”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run”, “当前用户ExpRun”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run”, “所有用户ExpRun”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\RunOnce”, “当前用户RunOnce”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce”, “所有用户RunOnce”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\RunServicesOnce”, “当前用户RunServicesOnce”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\RunServicesOnce”, “所有用户RunServicesOnce”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\RunServices”, “当前用户RunServices”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\RunServicese”, “所有用户RunServices”)
枚举注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\RunOnceEx”, “当前用户RunOnceEx”)
枚举注册表启动项 (4, “SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx”, “所有用户RunOnceEx”)
注册表启动项 (3, “Software\Microsoft\Windows NT\Load”, “HKCU\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load”)
注册表启动项 (4, “SOFTWARE\Microsoft\Windows NT\Load”, “HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\Load”)
注册表分解启动项 (4, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\UIHost”, “UIHost”)
.如果 (等于 (取文本注册项 (3, “Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell”, ), 取文本注册项 (4, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell”, )))
    注册表分解启动项 (4, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell”, “Shell”)
.否则
    注册表分解启动项 (3, “Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell”, “当前用户Shell”)
    注册表分解启动项 (4, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell”, “所有用户Shell”)
.如果结束
注册表分解启动项 (4, “SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit”, “Userinit”)
注册表启动项 (3, “Software\Microsoft\Windows\CurrentVersion\Policies\System\Shell”, “HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System\Shell”)
注册表启动项 (3, “Software\Policies\Microsoft\Windows\System\Scripts”, “Scripts”)
注册表启动项 (4, “SOFTWARE\Policies\Microsoft\Windows\System\Scripts”, “Scripts”)
注册项分解启动项 (相加 (读环境变量 (“SystemRoot”), “\win.ini”), “windows”, “run”, “win.ini-Run”)
注册项分解启动项 (相加 (读环境变量 (“SystemRoot”), “\win.ini”), “windows”, “load”, “win.ini-Load”)
注册项分解启动项 (相加 (读环境变量 (“SystemRoot”), “\system.ini”), “boot”, “shell”, “system.ini-shell”)
处理事件 ()
.如果真 (等于 (.选中, 假))
    枚举服务 ()
.如果真结束
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 枚举服务, 空白型, , 
.局部变量 a, 文本型, , "0", 

菜鸟老大_枚举注册表子项 (#本地机器, “SYSTEM\CurrentControlSet\Services”, a, 真, &服务回调)

.子程序 服务回调, 空白型, , 
.参数 文本, 文本型, , 

.局部变量 类型, 整数型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 Name, 文本型, , , 
.局部变量 Cs, 文本型, , , 
.局部变量 索引, 整数型, , , 

.如果真 (或者 (等于 (取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 文本, “\Start”), ), 2), 等于 (.选中, 假)))
    赋值 (类型, 取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 文本, “\Start”), ))
    赋值 (Text, 取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 文本, “\ImagePath”), ))
    .如果真 (等于 (删首尾空 (Text), “”))
        返回 ()
    .如果真结束
    赋值 (Name, 取文件名参数 (Text, Cs))
    赋值 (Name, 删首尾空 (子文本替换 (相加 (Name, “ ”), “svchost ”, “svchost.exe ”, , , 假)))
    .如果真 (等于 (到小写 (取扩展名 (Name)), “sys”))
        返回 ()
    .如果真结束
    加入文件 (Name, 多项选择 (类型, “服务”, “服务(自动)”, “服务(手动)”, “服务(禁用)”), Text)
    赋值 (索引, 相减 (取表项数 (), 1))
    .如果真 (并且 (等于 (索引.取标题 (11), “Microsoft Corporation”), .选中))
        索引.删除表项 ()
        返回 ()
    .如果真结束
    索引.置标题 (1, 取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 文本, “\DisplayName”), ))
    索引.置标题 (9, 相加 (“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\”, 文本))
    索引.置标题 (10, 取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, 文本, “\Description”), ))
    .如果真 (等于 (到小写 (Name), 到小写 (相加 (取目录 (#目录_系统目录), “\lsass.exe”))))
        索引.置状态图片 (2)
    .如果真结束
    .如果真 (等于 (到小写 (Name), 到小写 (相加 (取目录 (#目录_系统目录), “\services.exe”))))
        索引.置状态图片 (2)
    .如果真结束
    .如果真 (不等于 (类型, 2))
        索引.置状态图片 (0)
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.如果真结束


.子程序 回调, 空白型, , 
.参数 文本, 文本型, , 
.参数 类型, 整数型, , 

.局部变量 Text, 文本型, , , 
.局部变量 Name, 文本型, , , 
.局部变量 Cs, 文本型, , , 

赋值 (Text, 取文本注册项 (根, 相加 (路, “\”, 文本), ))
赋值 (Name, 取文件名参数 (Text, Cs))
加入文件 (Name, 类, Text)
相减 (取表项数 (), 1).置标题 (9, 相加 (注册表根目录取文本 (根), “\”, 路))

.子程序 注册表启动项, 空白型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 Text, 文本型, , , 
.局部变量 Name, 文本型, , , 
.局部变量 Cs, 文本型, , , 

.如果真 (不等于 (取文本注册项 (根目录, 路径, ), “”))
    赋值 (Text, 取文本注册项 (根目录, 路径, ))
    赋值 (Name, 取文件名参数 (Text, Cs))
    加入文件 (Name, 类型, Text)
    相减 (取表项数 (), 1).置标题 (9, 相加 (注册表根目录取文本 (根目录), “\”, 路径))
.如果真结束


.子程序 注册项分解启动项, 空白型, , 
.参数 配置文件, 文本型, , 
.参数 节, 文本型, , 
.参数 名, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 数组, 文本型, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 Name, 文本型, , , 
.局部变量 Cs, 文本型, , , 

赋值 (Text, 相加 (到文本 (读入文件 (配置文件)), #换行符))
.如果真 (等于 (寻找文本 (Text, 相加 (“[”, 节, “]”), , 真), -1))
    返回 ()
.如果真结束
赋值 (Text, 取两文本中间 (相加 (Text, “[HeHeEnd]”), 相加 (“[”, 节, “]”), “[HeHeEnd]”))
.如果真 (等于 (寻找文本 (Text, 相加 (名, “=”), , 真), -1))
    返回 ()' 本源码来自易语言资源网(www.wodesoft.com)
.如果真结束
赋值 (Text, 取两文本中间 (Text, 相加 (名, “=”), #换行符))
分割_呵呵_空格 (Text, 数组)
.计次循环首 (取数组成员数 (数组), 计次)
    赋值 (Name, 取文件名参数 (数组 [计次], Cs))
    加入文件 (Name, 类型, Text)
.计次循环尾 ()

.子程序 注册表分解启动项, 空白型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 数组, 文本型, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 Name, 文本型, , , 
.局部变量 Cs, 文本型, , , 

.如果真 (不等于 (取文本注册项 (根目录, 路径, ), “”))
    赋值 (Text, 取文本注册项 (根目录, 路径, ))
    分割_呵呵 (Text, 数组)
    .计次循环首 (取数组成员数 (数组), 计次)
        赋值 (Name, 取文件名参数 (数组 [计次], Cs))
        加入文件 (Name, 类型, Text)
        相减 (取表项数 (), 1).置标题 (9, 相加 (注册表根目录取文本 (根目录), “\”, 路径))
    .计次循环尾 ()
.如果真结束


.子程序 枚举注册表启动项, 空白型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 数组, 键名数据, , "0", 

赋值 (根, 根目录)
赋值 (路, 路径)
赋值 (类, 类型)
菜鸟老大_枚举注册表子项所有键名 (根目录, 路, 数组, 真, &回调)

.子程序 枚举目录启动项, 空白型, , 
.参数 目录, 文本型, , 
.参数 类型, 文本型, , 

.局部变量 文件, 文本型, , , 

赋值 (文件, 寻找文件 (相加 (目录, “\*”), ))
.循环判断首 ()
    加入文件 (相加 (目录, “\”, 文件), 类型)
    赋值 (文件, 寻找文件 ())
.循环判断尾 (不等于 (文件, “”))
赋值 (文件, 寻找文件 (相加 (目录, “\*”), 16))
.循环判断首 ()
    .如果真 (或者 (等于 (文件, “.”), 等于 (文件, “..”)))
        赋值 (文件, 寻找文件 (16))
        到循环尾 ()
    .如果真结束
     ' 加入文件 (目录 ＋ “\” ＋ 文件, 类型)
    处理事件 ()
    赋值 (文件, 寻找文件 (16))
.循环判断尾 (不等于 (文件, “”))
处理事件 ()
返回 ()

.子程序 加入文件, 空白型, , 
.参数 文件名, 文本型, , 
.参数 类型, 文本型, , 
.参数 命令, 文本型, 可空, 

.局部变量 真实, 文本型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 图片, 整数型, , , 
.局部变量 扩展名图标, 文本型, , , 
.局部变量 扩展名图标索引, 整数型, , , 
.局部变量 命令行, 文本型, , , 
.局部变量 Shell, 文本型, , , 
.局部变量 信息, 程序信息, , , 

.如果真 (不等于 (到小写 (取文件名 (文件名)), “desktop.ini”))
    赋值 (索引, .插入表项 (1, , ))
    .如果 (等于 (到小写 (取扩展名 (文件名)), “lnk”))
        未知支持库函数_41 (文件名, 真实, 命令行, , , , , )
        赋值 (Shell, 取关联文件文件名 (取扩展名 (真实), 命令行))
        赋值 (命令行, 子文本替换 (命令行, “%1”, 文件名, , , 真))
    .否则
        赋值 (真实, 文件名)
        赋值 (命令行, 文件名)
        赋值 (Shell, 取关联文件文件名 (取扩展名 (真实), 命令行))
        赋值 (命令行, 子文本替换 (命令行, “%1”, 文件名, , , 真))
    .如果结束
    .如果 (或者 (等于 (到小写 (取扩展名 (真实)), “exe”), 等于 (到小写 (取扩展名 (真实)), “ico”)))
        赋值 (图片, 未知支持库函数_26 (图片组, 真实, 0, 真))
    .否则
        赋值 (扩展名图标, 取扩展名图标 (取扩展名 (真实), 扩展名图标索引))
        赋值 (图片, 选择 (不等于 (扩展名图标索引, -1), 未知支持库函数_26 (图片组, 扩展名图标, 扩展名图标索引, 真), -1))
    .如果结束
    .如果真 (并且 (等于 (图片, -1), 等于 (到小写 (取扩展名 (真实)), “exe”)))
        赋值 (图片, 未知支持库函数_24 (图片组, #程序图标, ))
    .如果真结束
    .如果真 (等于 (图片, -1))
        赋值 (图片, 未知支持库函数_24 (图片组, #未知图标, ))
    .如果真结束
    赋值 (命令行, 选择 (是否为空 (命令), 命令行, 命令))
    赋值 (Shell, 子文本替换 (Shell, “%1”, 文件名, , , 真))
    赋值 (., 图片组)
    索引.置标题 (1, 取无扩展名 (取文件名 (文件名)))
    索引.置标题 (2, 取文件名 (真实))
    索引.置标题 (3, 选择 (等于 (扩展名图标, “”), 取文件名 (文件名), 取文件名 (Shell)))
    索引.置标题 (4, 真实)
    索引.置标题 (5, Shell)
    索引.置标题 (6, 类型)
    索引.置标题 (7, 取文件类型 (取扩展名 (真实)))
    索引.置标题 (8, 命令行)
    赋值 (信息, 取程序信息 (Shell))
    索引.置标题 (11, 信息.公司名称)
    索引.置标题 (12, 信息.描述)
    索引.置标题 (13, 信息.文件版本)
    索引.置图片 (图片)
    索引.置状态图片 (1)
.如果真结束
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 _列表框_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.如果真 (等于 (检查框状态, 0))
    表项索引.置状态图片 (2)
    返回 ()
.如果真结束
.如果真 (等于 (检查框状态, 2))
    .如果真 (并且 (近似等于 (表项索引.取标题 (6), “Shell”), 等于 (到小写 (表项索引.取标题 (5)), 到小写 (相加 (读环境变量 (“SystemRoot”), “\Explorer.exe”)))))
        .如果真 (不等于 (信息框 (“Explorer.exe应该在Shell的位置上，取消启动将导致系统无法自动进入桌面，你确认要取消启动？”, 相加 (4, 48, 256, 4096), “确认！！”), 5))
            表项索引.置状态图片 (1)
            返回 ()
        .如果真结束
        ' 本源码来自易语言资源网(www.wodesoft.com)
    .如果真结束
    .如果真 (并且 (近似等于 (表项索引.取标题 (6), “Userinit”), 等于 (到小写 (表项索引.取标题 (5)), 到小写 (相加 (取目录 (#目录_系统目录), “\Userinit.exe”)))))
        .如果真 (不等于 (信息框 (“Userinit.exe应该在Userinit的位置上，取消启动将导致系统无法登录，你确认要取消启动？”, 相加 (4, 48, 256, 4096), “确认！！”), 5))
            表项索引.置状态图片 (1)
            返回 ()
        .如果真结束
        
    .如果真结束
    表项索引.置状态图片 (0)
    返回 ()
.如果真结束


.子程序 __启动窗口_尺寸被改变, 空白型, , 
赋值 (.倾斜, 相减 (取用户区宽度 (), 12))
赋值 (.删除线, 相减 (取用户区高度 (), 17))

.子程序 _列表框_右键单击表项, 空白型, , 
连续赋值 (假, .禁止, .禁止, .禁止)
.如果真 (等于 (., -1))
    连续赋值 (真, .禁止, .禁止, .禁止)
.如果真结束
弹出菜单 ()

.子程序 _定位文件_被选择, 空白型, , 
定位文件 (.取标题 (., 4))

.子程序 _定位程序_被选择, 空白型, , 
定位文件 (.取标题 (., 5))

.子程序 _定位注册表_被选择, 空白型, , 
.局部变量 hwnd, 整数型, , , 
.局部变量 hndRegEdit, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 lngVK, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 strTmp, 文本型, , , 

赋值 (文本, .取标题 (., 9))
运行 (“regedit”, 假, )
.判断循环首 (等于 (hwnd, 0))
    赋值 (hndRegEdit, FindWindow (“RegEdit_RegEdit”, 0))
    .如果真 (不等于 (hndRegEdit, 0))
        赋值 (hwnd, FindWindowEx (hndRegEdit, 0, “SysTreeView32”, 0))
    .如果真结束
    处理事件 ()
.判断循环尾 ()
.变量循环首 (1, 取文本长度 (文本), 1, i)
    赋值 (strTmp, 取文本中间 (文本, i, 1))
    .如果 (等于 (strTmp, “\”))
        SendMessageA (hwnd, 256, 39, 0) ' 展开
        延时 (100)
    .否则
        赋值 (lngVK, 取代码 (到大写 (strTmp), ))
        SendMessageA (hwnd, 258, lngVK, 0)
    .如果结束
    
.变量循环尾 ()

.子程序 _隐藏服务_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (.禁止, .选中)
赋值 (.禁止, .选中)
填充列表框 ()

.子程序 _隐藏系统服务_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
填充列表框 ()

.子程序 _只显示自动服务_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
填充列表框 ()

.子程序 _启动项属性_被选择, 空白型, , 
输出调试文本 (1)

.程序集 接口程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
 ' 载入 (窗口1, , 真)

.子程序 菜鸟老大_枚举注册表子项, 整数型, , 枚举注册表指定项目地所有子项,并返回子项个数。返回-1表示失败，请用（取注册表操作错误信息）取得详细地错误信息
.参数 根目录, 整数型, , 请参考易语言注册表操作函数中地根目录参数。
.参数 路径, 文本型, , 
.参数 子项列表, 文本型, 数组, 该参数用来返回子项列表数组,返回时,该数组将被子项填充。
.参数 是否继续枚举, 逻辑型, , 提供一个变量用来控制是否继续枚举过程,如果需要停止枚举过程,请将该变量置为假即可。
.参数 进度回调函数地址, 子程序指针, 可空, 提供一个函数地址用来回调当前枚举进度(该参数只能有一个参数,用来接受子项文本)

.局部变量 i, 空白型, , , 
.局部变量 项名, 文本型, , , 
.局部变量 结果, 空白型, , , 
.局部变量 句柄, 空白型, , , 
.局部变量 柄, 空白型, , , 

赋值 (是否继续枚举, 真)
清除数组 (子项列表)
赋值 (句柄, 易语言注册表常量到API (根目录))
RegOpenKey (句柄, 路径, 柄)
.如果真 (等于 (柄, 0)) ' 失败
     ' 错误文本 ＝ “打开注册表项目错误，请确定你具有该操作的权限！”
    返回 (-1)
.如果真结束
 ' --下面开始枚举
赋值 (i, 0)
赋值 (项名, 取空白文本 (265))
赋值 (结果, RegEnumKey (柄, i, 项名, 取文本长度 (项名)))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (是否为空 (进度回调函数地址), 假))
        调用子程序 (进度回调函数地址, , , 项名)
    .如果真结束
    .如果 (等于 (是否继续枚举, 真))
        加入成员 (子项列表, 项名)
        赋值 (i, 相加 (i, 1))
        赋值 (项名, 取空白文本 (265))
        赋值 (结果, RegEnumKey (柄, i, 项名, 取文本长度 (项名)))
    .否则
        跳出循环 ()
    .如果结束
    ' 本源码来自易语言资源网(www.wodesoft.com)
.判断循环尾 ()
API_RegCloseKey (柄)
返回 (取数组成员数 (子项列表))


.子程序 glGetError, 文本型, , 取错误消息文本
.参数 错误码, 整数型, , 

.局部变量 局部_缓存, 文本型, , , 
.局部变量 大小, 空白型, , , 

赋值 (大小, 260)
赋值 (局部_缓存, 取空白文本 (大小))
格式化消息字符串 (4096, 0, 错误码, 0, 局部_缓存, 大小, 0)
返回 (局部_缓存)

.子程序 菜鸟老大_枚举注册表子项所有键名, 整数型, , 枚举注册表指定项目地所有键名和类型,并返回键名个数。返回-1表示失败
.参数 根目录, 整数型, , 请参考易语言注册表操作函数中地根目录参数。
.参数 路径, 文本型, , 
.参数 键名数据数组, 键名数据, 数组, 该参数用来返回键名列表数组,返回时,该数组将被键名填充。
.参数 是否继续枚举, 逻辑型, , 提供一个变量用来控制是否继续枚举过程,如果需要停止枚举过程,请将该变量置为假即可。
.参数 进度回调函数地址, 子程序指针, 可空, 提供一个函数地址用来回调当前枚举进度(该参数只能有二个参数,第一个用来接受键名，第一个用来接受键值类型)

.局部变量 i, 空白型, , , 
.局部变量 键名, 文本型, , , 
.局部变量 结果, 空白型, , , 
.局部变量 句柄, 空白型, , , 
.局部变量 柄, 空白型, , , 
.局部变量 类型, 空白型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 空白型, , , 
.局部变量 临时, 键名数据, , , 

赋值 (是否继续枚举, 真)
清除数组 (键名数据数组)
赋值 (句柄, 易语言注册表常量到API (根目录))
RegOpenKey (句柄, 路径, 柄)
.如果真 (等于 (柄, 0)) ' 打开失败
    返回 (-1)
.如果真结束
赋值 (键名, 取空白文本 (255))
赋值 (内容, 取空白字节集 (0))
赋值 (结果, 枚举键值 (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (是否为空 (进度回调函数地址), 假))
        调用子程序 (进度回调函数地址, , , 键名, 类型)
    .如果真结束
    赋值 (内容, 取空白字节集 (内容长度))
    RegQueryValueEx (柄, 键名, 0, 类型, 内容, 取字节集长度 (内容))
    .如果 (等于 (是否继续枚举, 真)) ' "类型为1表示为文本"
        赋值 (临时.键名, 键名)
        赋值 (临时.类型, 类型)
        加入成员 (键名数据数组, 临时)
        赋值 (i, 相加 (i, 1))
        赋值 (键名, 取空白文本 (255))
        赋值 (内容, 取空白字节集 (0))
        赋值 (结果, 枚举键值 (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()
API_RegCloseKey (柄)
返回 (取数组成员数 (键名数据数组))

.子程序 易语言注册表常量到API, 整数型, , 
.参数 根目录, 空白型, , 

.局部变量 句柄, 空白型, , , 

.判断开始 (等于 (根目录, #根类))
    赋值 (句柄, 2147483648)
.判断 (等于 (根目录, #现行用户))
    赋值 (句柄, 2147483649)
.判断 (等于 (根目录, #本地机器))
    赋值 (句柄, 2147483650)
.判断 (等于 (根目录, #所有用户))
    赋值 (句柄, 2147483651)
.默认
    赋值 (句柄, 根目录)
.判断结束
返回 (句柄)


.子程序 菜鸟老大_删除注册表项目, 逻辑型, , 删除注册表项目(注意,该项目所包含地所有项目都将被删除)
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 

.局部变量 数组, 文本型, , "0", 

清除数组 (数组)
生成子项目数组 (根目录, 路径, 数组)
返回 (删除子项目数组 (数组))

.子程序 生成子项目数组, 空白型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 数组, 文本型, 数组, 首次调用必须(清除数组)

.局部变量 a, 文本型, , "0", 
.局部变量 i, 整数型, , , 

菜鸟老大_枚举注册表子项 (根目录, 路径, a, 真, )
.如果 (大于 (取数组成员数 (a), 0))
    加入成员 (数组, 相加 (到文本 (根目录), “-@#$_”, 路径))
    .计次循环首 (取数组成员数 (a), i)
        .如果 (等于 (路径, “”))
            生成子项目数组 (根目录, a [i], 数组)
        .否则
            生成子项目数组 (根目录, 相加 (路径, “\”, a [i]), 数组)
        .如果结束
        
    .计次循环尾 ()
.否则
    加入成员 (数组, 相加 (到文本 (根目录), “-@#$_”, 路径))
.如果结束



.子程序 删除子项目数组, 逻辑型, , 
.参数 数组, 文本型, 数组, 

.局部变量 i, 整数型, , , 
.局部变量 y, 文本型, , "2", 

.变量循环首 (取数组成员数 (数组), 1, -1, i)
    赋值 (y, 分割文本 (数组 [i], “-@#$_”, ))
    .如果真 (等于 (删除注册项 (到整数 (y [1]), y [2]), 假))
        返回 (假)
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.变量循环尾 ()
返回 (真)



.子程序 菜鸟老大_注册项目是否存在_键名, 逻辑型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 
.参数 欲检测键名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 柄, 整数型, , , 
.局部变量 键名, 文本型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 内容, 字节集, , , 
.局部变量 内容长度, 整数型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 s, 整数型, , , 

RegOpenKey (根目录, 路径, 柄)
赋值 (键名, 取空白文本 (265))
赋值 (内容, 取空白字节集 (0))
赋值 (结果, 枚举键值 (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环首 (等于 (结果, 0))
    .如果真 (等于 (到小写 (键名), 到小写 (欲检测键名)))
        返回 (真)
    .如果真结束
    赋值 (i, 相加 (i, 1))
    赋值 (键名, 取空白文本 (265))
    赋值 (内容, 取空白字节集 (0))
    赋值 (结果, 枚举键值 (柄, i, 键名, 取文本长度 (键名), 0, 类型, 内容, 内容长度))
.判断循环尾 ()
API_RegCloseKey (柄)
返回 (假)

.子程序 菜鸟老大_注册项目是否存在_项目, 逻辑型, , 
.参数 根目录, 整数型, , 
.参数 路径, 文本型, , 

.局部变量 柄, 整数型, , , 

RegOpenKey (根目录, 路径, 柄)
.如果真 (等于 (柄, 0))
    返回 (假)
.如果真结束
API_RegCloseKey (柄)
返回 (真)

.子程序 取目录, 文本型, , 
.参数 目录名, 文本型, , 参考#目录_开头的常量

.如果真 (等于 (目录名, #目录_临时目录))
    返回 (读环境变量 (#目录_临时目录))
.如果真结束
.如果真 (等于 (目录名, #目录_安装目录))
    返回 (读环境变量 (#目录_安装目录))
.如果真结束
.如果真 (等于 (目录名, #目录_用户目录))
    返回 (读环境变量 (#目录_用户目录))
.如果真结束
.如果真 (等于 (目录名, #目录_所有用户))
    返回 (读环境变量 (#目录_所有用户))
.如果真结束
.如果真 (等于 (目录名, #目录_程序文件))
    返回 (读环境变量 (#目录_程序文件))
.如果真结束
.如果真 (等于 (目录名, #目录_所有用户_程序文件))
    返回 (读环境变量 (#目录_所有用户_程序文件))
.如果真结束
.如果真 (等于 (目录名, #目录_系统盘))
    返回 (读环境变量 (#目录_系统盘))
.如果真结束
.如果真 (等于 (目录名, #目录_系统目录))
    返回 (取文件目录 (读环境变量 (“ComSpec”)))
.如果真结束
返回 (取文本注册项 (选择 (等于 (到小写 (取文本左边 (目录名, 6)), “common”), #本地机器, #现行用户), 相加 (“Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\”, 目录名), ))

.子程序 取文件名, 文本型, , 通过文件路径取得文件名。
.参数 完整路径, 文本型, , 

返回 (取文本中间 (完整路径, 相加 (倒找文本 (完整路径, “\”, , 假), 1), 100000))

.子程序 取文件目录, 文本型, , 通过文件路径取得文件所在的目录，结尾不包含“\”。
.参数 完整路径, 文本型, , 

返回 (取文本左边 (完整路径, 相减 (倒找文本 (完整路径, “\”, , 假), 1)))

.子程序 取无扩展名, 文本型, , 
.参数 文件名, 文本型, , 

返回 (取文本左边 (文件名, 相减 (倒找文本 (文件名, “.”, , 假), 1)))

.子程序 取扩展名, 文本型, , 
.参数 完整路径, 文本型, , 

.如果真 (小于 (倒找文本 (完整路径, “.”, , 假), 倒找文本 (完整路径, “\”, , 假)))
    返回 (“”)
.如果真结束
返回 (取文本中间 (完整路径, 相加 (倒找文本 (完整路径, “.”, , 假), 1), 100000))

.子程序 取扩展名图标, 文本型, , 
.参数 扩展名, 文本型, , 
.参数 索引, 整数型, 参考, 

.局部变量 File, 文本型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 数组, 文本型, , "0", 

赋值 (File, 取文本注册项 (#根类, 相加 (“.”, 扩展名, “\”), 相加 (“.”, 扩展名)))
赋值 (Text, 取文本注册项 (#根类, 相加 (File, “\DefaultIcon\”), 取文本注册项 (#根类, 相加 (“.”, 扩展名, “\DefaultIcon\”), )))
赋值 (数组, 分割文本 (Text, “,”, ))
.如果真 (等于 (取数组成员数 (数组), 0))
    赋值 (索引, -1)
    返回 (相加 (取目录 (#目录_系统目录), “\shell32.dll”))
.如果真结束
.如果真 (等于 (取数组成员数 (数组), 1))
    赋值 (索引, 0)
    返回 (数组 [1])
.如果真结束
.如果真 (大于或等于 (取数组成员数 (数组), 2))
    赋值 (索引, 到整数 (数组 [2]))
    返回 (数组 [1])
.如果真结束
返回 (“”)

.子程序 取关联文件文件名, 文本型, 公开, 
.参数 扩展名, 文本型, , 
.参数 命令行, 文本型, 参考, 

.局部变量 File, 文本型, , , 
.局部变量 Shell, 文本型, , , 
.局部变量 Text, 文本型, , , 

赋值 (File, 取文本注册项 (#根类, 相加 (“.”, 扩展名, “\”), 相加 (“.”, 扩展名)))
赋值 (Shell, 取文本注册项 (#根类, 相加 (File, “\shell\”), “open”))
赋值 (Text, 取文本注册项 (#根类, 相加 (File, “\shell\”, Shell, “\command\”), ))
赋值 (命令行, Text)
返回 (取文件名参数 (Text))

.子程序 取文件类型, 文本型, , 
.参数 扩展名, 文本型, , 

.局部变量 File, 文本型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 数组, 文本型, , "0", 

赋值 (File, 取文本注册项 (#根类, 相加 (“.”, 扩展名, “\”), 相加 (“.”, 扩展名)))
赋值 (Text, 取文本注册项 (#根类, 相加 (File, “\”), 相加 (“.”, 扩展名, “\”)))
返回 (Text)

.子程序 取文件名参数, 文本型, 公开, 返回文件名
.参数 命令行, 文本型, , 
.参数 参数, 文本型, 参考 可空, 

.局部变量 字节集, 字节集, , , 
.局部变量 计次, 整数型, , , 
.局部变量 当前, 字节集, , , 
.局部变量 引号状态, 逻辑型, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 PATH, 文本型, , "0", 
.局部变量 环境, 文本型, , "0", 

赋值 (字节集, 到字节集 (命令行))
.计次循环首 (取字节集长度 (字节集), 计次)
    赋值 (当前, 取字节集中间 (字节集, 计次, 1))
    .如果真 (等于 (当前, { 34 }))
        赋值 (引号状态, 取反 (引号状态))
    .如果真结束
    .如果真 (并且 (等于 (当前, { 32 }), 等于 (引号状态, 假)))
        赋值 (参数, 取文本右边 (命令行, 相减 (取文本长度 (命令行), 计次)))
        赋值 (返回值, 子文本替换 (取文本左边 (命令行, 相减 (计次, 1)), #引号, , , , 真))
         ' 本源码来自易语言资源网(www.wodesoft.com)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (返回值, “”))
    赋值 (返回值, 子文本替换 (命令行, “\??\”, , , , 真))
.如果真结束
赋值 (返回值, 子文本替换 (返回值, #引号, , , , 真))
.如果真 (等于 (寻找文本 (返回值, “\”, , 假), -1))
    赋值 (PATH, 分割文本 (读环境变量 (“path”), “;”, ))
    .计次循环首 (取数组成员数 (PATH), 计次)
        .如果真 (不等于 (PATH [计次], “”))
            .如果真 (文件是否存在 (相加 (PATH [计次], “\”, 返回值)))
                赋值 (返回值, 相加 (PATH [计次], “\”, 返回值))
                跳出循环 ()
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
取两文本中间数组 (返回值, “%”, “%”, 环境)
.计次循环首 (取数组成员数 (环境), 计次)
    .如果真 (不等于 (环境 [计次], “”))
        .如果真 (不等于 (读环境变量 (环境 [计次]), “”))
            赋值 (返回值, 子文本替换 (返回值, 相加 (“%”, 环境 [计次], “%”), 读环境变量 (环境 [计次]), , , 真))
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (返回值)

.子程序 分割_呵呵, 空白型, , 
.参数 文本, 文本型, , 
.参数 数组, 文本型, 参考 数组, 

.局部变量 字节集, 字节集, , , 
.局部变量 计次, 整数型, , , 
.局部变量 当前, 字节集, , , 
.局部变量 引号状态, 逻辑型, , , 
.局部变量 文件, 文本型, , , 
.局部变量 上, 整数型, , , 

赋值 (字节集, 到字节集 (文本))
.计次循环首 (取字节集长度 (字节集), 计次)
    赋值 (当前, 取字节集中间 (字节集, 计次, 1))
    .如果真 (等于 (当前, { 34 }))
        赋值 (引号状态, 取反 (引号状态))
    .如果真结束
    .如果真 (并且 (等于 (当前, { 44 }), 等于 (引号状态, 假)))
        加入成员 (数组, 取文本中间 (文本, 相加 (上, 1), 相减 (计次, 1, 上)))
        赋值 (上, 计次)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (取文本中间 (文本, 相加 (上, 1), 相减 (取字节集长度 (字节集), 上)), “”))
    加入成员 (数组, 取文本中间 (文本, 相加 (上, 1), 相减 (取字节集长度 (字节集), 上)))
.如果真结束


.子程序 分割_呵呵_空格, 空白型, , 
.参数 文本, 文本型, , 
.参数 数组, 文本型, 参考 数组, 

.局部变量 字节集, 字节集, , , 
.局部变量 计次, 整数型, , , 
.局部变量 当前, 字节集, , , 
.局部变量 引号状态, 逻辑型, , , 
.局部变量 文件, 文本型, , , 
.局部变量 上, 整数型, , , 
.局部变量 a, 文本型, , , 

赋值 (字节集, 到字节集 (文本))
.计次循环首 (取字节集长度 (字节集), 计次)
    赋值 (当前, 取字节集中间 (字节集, 计次, 1))
    .如果真 (等于 (当前, { 34 }))
        赋值 (引号状态, 取反 (引号状态))
    .如果真结束
    .如果真 (并且 (等于 (当前, { 32 }), 等于 (引号状态, 假)))
        赋值 (a, 取文本中间 (文本, 相加 (上, 1), 相减 (计次, 1, 上)))
        .如果真 (或者 (不等于 (寻找文本 (a, “.exe”, , 真), -1), 不等于 (寻找文本 (a, “.scr”, , 真), -1), 不等于 (寻找文本 (a, “.bat”, , 真), -1), 不等于 (寻找文本 (a, “.cmd”, , 真), -1), 不等于 (寻找文本 (a, “.vbs”, , 真), -1), 不等于 (寻找文本 (a, “.vbe”, , 真), -1), 不等于 (寻找文本 (a, “.js”, , 真), -1)))
            加入成员 (数组, 取文本中间 (文本, 相加 (上, 1), 相减 (计次, 1, 上)))
        .如果真结束
        赋值 (上, 计次)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (取文本中间 (文本, 相加 (上, 1), 相减 (取字节集长度 (字节集), 上)), “”))
    赋值 (a, 取文本中间 (文本, 相加 (上, 1), 相减 (取字节集长度 (字节集), 上)))
    .如果真 (或者 (不等于 (寻找文本 (a, “.exe”, , 真), -1), 不等于 (寻找文本 (a, “.scr”, , 真), -1), 不等于 (寻找文本 (a, “.bat”, , 真), -1), 不等于 (寻找文本 (a, “.cmd”, , 真), -1), 不等于 (寻找文本 (a, “.vbs”, , 真), -1), 不等于 (寻找文本 (a, “.vbe”, , 真), -1), 不等于 (寻找文本 (a, “.js”, , 真), -1)))
        加入成员 (数组, 取文本中间 (文本, 相加 (上, 1), 相减 (取字节集长度 (字节集), 上)))
    .如果真结束
    
.如果真结束


.子程序 取两文本中间数组, 整数型, , 和取两文本中间差不多，只是会取出完整文本中的所有符合条件的文本到参数四数组。返回找到的个数。
.参数 文本, 文本型, , 完整文本。
.参数 左边文本, 文本型, , 欲取得结果左边的内容。
.参数 右边文本, 文本型, , 欲取得结果右边的内容。
.参数 数组, 文本型, 参考 数组, 接收结果的数组。
.参数 起始位置, 整数型, 可空, 开始取的位置，从0开始。默认0。

.局部变量 开始, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 内容, 文本型, , , 

.判断循环首 (不等于 (寻找文本 (文本, 左边文本, 开始, 真), -1))
    赋值 (开始, 相加 (寻找文本 (文本, 左边文本, 开始, 真), 取文本长度 (左边文本)))
    .如果真 (等于 (开始, -1))
        到循环尾 ()
    .如果真结束
    赋值 (结束, 寻找文本 (文本, 右边文本, 开始, 真))
    .如果真 (等于 (结束, -1))
        到循环尾 ()
    .如果真结束
    赋值 (长度, 相减 (结束, 开始))
    赋值 (内容, 取文本中间 (文本, 开始, 长度))
    加入成员 (数组, 内容)
.判断循环尾 ()
返回 (取数组成员数 (数组))

.子程序 取两文本中间, 文本型, , 取得文本中指定的内容。如 文本:abcdefg 左边文本:d 右边文本:g 取得结果:ef 。失败返回空文本。
.参数 文本, 文本型, , 完整文本，如上面的abcdefg。
.参数 左边的文本, 文本型, , 欲取得结果左边的内容，如上面的d。
.参数 右边的文本, 文本型, , 欲取得结果右边的内容，如上面的g。
.参数 起始位置, 整数型, 可空, 开始取的位置，从0开始。默认0。

.局部变量 开始, 整数型, , , 
.局部变量 结束, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 内容, 文本型, , , 

赋值 (开始, 相加 (寻找文本 (文本, 左边的文本, 起始位置, 真), 取文本长度 (左边的文本)))
.如果真 (等于 (开始, -1))
    返回 (“”)
.如果真结束
赋值 (结束, 寻找文本 (文本, 右边的文本, 开始, 真))
赋值 (长度, 相减 (结束, 开始))
赋值 (内容, 取文本中间 (文本, 开始, 长度))
返回 (内容)' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 注册表根目录取文本, 文本型, , 
.参数 根, 整数型, , 

.如果真 (等于 (根, #根类))
    返回 (“HKEY_CLASSES_ROOT”)
.如果真结束
.如果真 (等于 (根, #现行设置))
    返回 (“HKEY_CURRENT_CONFIG”)
.如果真结束
.如果真 (等于 (根, #现行用户))
    返回 (“HKEY_CURRENT_USER”)
.如果真结束
.如果真 (等于 (根, #本地机器))
    返回 (“HKEY_LOCAL_MACHINE”)
.如果真结束
.如果真 (等于 (根, #所有用户))
    返回 (“HKEY_USERS”)
.如果真结束
返回 (“”)

.子程序 取程序信息, 程序信息, , 
.参数 程序, 文本型, , 程序路径

.局部变量 FullFileName, 文本型, , , 
.局部变量 rc, 长整数型, , , 
.局部变量 sBuffer, 字节集, , , 
.局部变量 lBufferLen, 整数型, , , 
.局部变量 lVerPointer, 整数型, , , 
.局部变量 bytebuffer, 字节型, , "261", 
.局部变量 Lang_Charset_String, 文本型, , , 
.局部变量 HexNumber, 整数型, , , 
.局部变量 Buffer, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 strtemp, 文本型, , , 
.局部变量 strFileVer, 文本型, , "6", 
.局部变量 VerInfo, 程序信息, , , 

赋值 (FullFileName, 程序)
赋值 (lBufferLen, GetFileVersionInfoSize (FullFileName, 0))
.如果真 (小于 (lBufferLen, 1))
    返回 (VerInfo)
.如果真结束
赋值 (lBufferLen, 相加 (lBufferLen, 1))
赋值 (sBuffer, 取空白字节集 (lBufferLen))
赋值 (rc, GetFileVersionInfo (FullFileName, 0, lBufferLen, sBuffer))
.如果真 (等于 (rc, 0))
    返回 (VerInfo)
.如果真结束
赋值 (rc, VerQueryValue (sBuffer, “\VarFileInfo\Translation”, lVerPointer, lBufferLen))
.如果真 (等于 (rc, 0))
    返回 (VerInfo)
.如果真结束
赋值 (strFileVer [1], “FileVersion”)
赋值 (strFileVer [2], “InternalName”)
赋值 (strFileVer [3], “CompanyName”)
赋值 (strFileVer [4], “LegalCopyright”)
赋值 (strFileVer [5], “FileDescription”)
MoveMemory (bytebuffer, lVerPointer, lBufferLen)

赋值 (HexNumber, 相加 (bytebuffer [3], 相乘 (bytebuffer [4], 256), 相乘 (bytebuffer [1], 65536), 相乘 (bytebuffer [2], 16777216)))
赋值 (rc, 到长整数 (相加 (bytebuffer [1], 相乘 (bytebuffer [2], 256))))
赋值 (Lang_Charset_String, 取十六进制文本 (HexNumber))

.判断循环首 (小于 (取文本长度 (Lang_Charset_String), 8))
    赋值 (Lang_Charset_String, 相加 (“0”, Lang_Charset_String))
.判断循环尾 ()


赋值 (strtemp, 取空白文本 (261))
赋值 (rc, VerLanguageName (rc, strtemp, 255))
赋值 (strFileVer [6], 删首尾空 (strtemp))
赋值 (strtemp, “”)

.变量循环首 (1, 5, 1, i)
    赋值 (Buffer, 取空白文本 (261))
    赋值 (strtemp, 相加 (“\StringFileInfo\”, Lang_Charset_String, “\”, strFileVer [i]))
    赋值 (rc, VerQueryValue (sBuffer, strtemp, lVerPointer, lBufferLen))
    .如果 (不等于 (rc, 0))
        lstrcpy (Buffer, lVerPointer)
    .否则
        赋值 (Buffer, “”)
    .如果结束
    赋值 (strFileVer [i], 删首尾空 (Buffer))
.变量循环尾 ()
赋值 (VerInfo.文件版本, strFileVer [1])
赋值 (VerInfo.内部名称, strFileVer [2])
赋值 (VerInfo.公司名称, strFileVer [3])
赋值 (VerInfo.版权, strFileVer [4])
赋值 (VerInfo.描述, strFileVer [5])
赋值 (VerInfo.语言, strFileVer [6])
返回 (VerInfo)

.子程序 定位文件, 空白型, , 
.参数 地址, 文本型, , 

运行 (相加 (“explorer.exe /select,”, 地址), 假, )


 ' 不属于任何一个程序集、类模块的函数：
