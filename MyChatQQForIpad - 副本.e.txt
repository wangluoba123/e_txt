 ' 文件类型：Windows控制台程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 300
    高度 = 346
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “MyIpadQQ”
    帮助文件名 = “”



.常量 login_state_logining, "0", 公开, 正在登陆
.常量 login_state_veriy, "1", 公开, 需要验证码
.常量 login_state_success, "2", 公开, 验证成功
.常量 login_state_arr, "3", 公开, 帐号密码错误
.常量 share_key1, "“DE0989C3D45DE9B6E6448C1B46B2E824”", , 
.常量 publickey1, "“03 A1 A1 5C 61 6B 1C 8B 70 F0 C4 71 D6 F9 EA B1 EF D8 02 3D DC 05 6D 0A 39”", , 
.常量 , , , 
.常量 , , , 
.常量 TYPE_BYTE, "0", 公开, 
.常量 TYPE_DOUBLE, "5", 公开, 
.常量 TYPE_FLOAT, "4", 公开, 
.常量 TYPE_INT, "2", 公开, 
.常量 TYPE_JCE_MAX_STRING_LENGTH, "104857600", 公开, 
.常量 TYPE_LIST, "9", 公开, 
.常量 TYPE_LONG, "3", 公开, 
.常量 TYPE_MAP, "8", 公开, 
.常量 TYPE_SHORT, "1", 公开, 
.常量 TYPE_SIMPLE_LIST, "13", 公开, 
.常量 TYPE_STRING1, "6", 公开, 
.常量 TYPE_STRING4, "7", 公开, 
.常量 TYPE_STRUCT_BEGIN, "10", 公开, 
.常量 TYPE_STRUCT_END, "11", 公开, 
.常量 TYPE_ZERO_TAG, "12", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库
 ' iconv {A0005538-9391-4dd9-B4D6-8EB7B9360F08} 2 0 编码转换支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 2 0 数据操作支持库一
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库
 ' sock A6B983789F624b2cBDFD7D671249C097 2 0 网络通讯支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一




数据类型 qq_information, 公开, 
    .成员 Account, 文本型, , , qq
    .成员 QQ, 长整数型, , , qq 10
    .成员 user, 字节集, , , qq_hex
    .成员 caption, 字节集, , , qq_utf-8
    .成员 pass, 文本型, , , 
    .成员 md5, 字节集, , , 
    .成员 md52, 字节集, , , 
    .成员 time, 字节集, , , 
    .成员 key, 字节集, , , 
    .成员 nick, 文本型, , , 
    .成员 Token002C, 字节集, , , 
    .成员 Token004C, 字节集, , , A2
    .成员 TGTKey, 字节集, , , 
    .成员 shareKey, 字节集, , , 
    .成员 pub_key, 字节集, , , 
    .成员 randKey, 字节集, , , 
    .成员 stweb, 文本型, , , 
    .成员 skey, 字节集, , , 
    .成员 vkey, 字节集, , , 
    .成员 sid, 字节集, , , 
    .成员 sessionKey, 字节集, , , 
    .成员 ssoSeq_, 字节集, , , 
    .成员 匿名成员641, 空白型, , , 
    .成员 loginState, 整数型, , , 登陆是否验证成功
    .成员 VieryToken1, 字节集, , , 验证码token
    .成员 VieryToken2, 字节集, , , 验证码token
    .成员 Viery, 字节集, , , 验证码

数据类型 Device_information, 公开, 
    .成员 imei, 文本型, , , 
    .成员 imei_, 字节集, , , 
    .成员 ver, 字节集, , , 
    .成员 appId, 整数型, , , 
    .成员 appId2, 整数型, , , 
    .成员 os_type, 文本型, , , 
    .成员 os_version, 文本型, , , 
    .成员 device, 文本型, , , 
    .成员 deviceModel, 文本型, , , 
    .成员 _apk_v, 文本型, , , 

数据类型 JceMap, , 
    .成员 key_type, 字节型, , , 
    .成员 key, 字节集, , , 
    .成员 val_type, 字节型, , , 
    .成员 val, 字节集, , , 

数据类型 HeadData, , 
    .成员 type, 字节型, , , 
    .成员 tag, 整数型, , , 1-10

数据类型 CardData, , 
    .成员 qq, 长整数型, , , 
    .成员 name, 文本型, , , 
    .成员 zanNum, 整数型, , , 
    .成员 TmpChatSig, 字节集, , , 

数据类型 JceStruct_RequestPacket, , 
    .成员 iversion, 短整数型, , , 
    .成员 cPacketType, 短整数型, , , 
    .成员 iMessageType, 短整数型, , , 
    .成员 iRequestId, 整数型, , , 
    .成员 sServantName, 文本型, , , 
    .成员 sFuncName, 文本型, , , 
    .成员 sBuffer, 字节集, , , 
    .成员 iTimeout, 整数型, , , 
    .成员 context, JceMap, , "1", 重定义下
    .成员 status, JceMap, , "1", 重定义下


.类模块 _Pack, , , 

.程序集变量 m_bin, 字节集, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 Empty, 空白型, , 清除
赋值 (m_bin, 取空白字节集 (0))

.子程序 GetAll, 字节集, , 取全部数据
返回 (m_bin)

.子程序 Len, 整数型, , 取长度
返回 (取字节集长度 (m_bin))

.子程序 SetBin, 空白型, , 置字节集
.参数 t, 字节集, , 

赋值 (m_bin, 相加 (m_bin, t))

.子程序 SetByte, 空白型, , 置字节
.参数 b, 字节型, , 

赋值 (m_bin, 相加 (m_bin, Byte2Bin (b)))

.子程序 SetData, 空白型, , 置类数据
.参数 bin, 字节集, , 

赋值 (m_bin, bin)

.子程序 SetHex, 空白型, , 置文本十六进制格式
.参数 t, 文本型, , 

赋值 (m_bin, 相加 (m_bin, Hex2Bin (t)))

.子程序 SetInt, 空白型, , 置整数
.参数 int, 整数型, , 

赋值 (m_bin, 相加 (m_bin, Int2Bin (int)))

.子程序 SetShort, 空白型, , 置短整数
.参数 short, 短整数型, , 

赋值 (m_bin, 相加 (m_bin, Short2Bin (short)))

.子程序 SetLong, 空白型, , 
.参数 long, 长整数型, , 

赋值 (m_bin, 相加 (m_bin, 到字节集 (long)))

.子程序 SetUint, 空白型, , 
.参数 uint, 整数型, , 

SetBin (到字节集 (ToULong (uint)))

.子程序 SetStr, 空白型, , 
.参数 t, 文本型, , 

赋值 (m_bin, 相加 (m_bin, 到字节集 (t)))

.子程序 SetToken, 空白型, , 置令牌
.参数 t, 字节集, , 

SetShort (取字节集长度 (t))
SetBin (t)


.子程序 setUTF_8, 空白型, , 
.参数 v, 文本型, , 

.局部变量 b, 字节集, , , 

赋值 (b, 未知支持库函数_0 (到字节集 (v), #, #, ))
SetShort (取字节集长度 (b))
SetBin (b)


.子程序 e, 空白型, , 


.类模块 _Unpack, , , 

.程序集变量 m_bin, 字节集, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 GetAll, 字节集, , 取所有数据
.参数 忽略03, 逻辑型, 可空, 

返回 (m_bin)

.子程序 GetAll_Hex, 文本型, , 取所有数据,十六进制展示
返回 (Bin2Hex (m_bin))

.子程序 GetBin, 字节集, , 取字节集
.参数 len, 整数型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, len))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), len)))
返回 (bin)

.子程序 GetByte, 字节型, , 取字节
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 1))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 1)))
返回 (Bin2Byte (bin))

.子程序 GetInt, 整数型, , 取整数
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 4))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 4)))
返回 (Bin2Int (bin))

.子程序 GetLong, 长整数型, , 
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 8))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 8)))
返回 (Bin2Long (bin))


.子程序 GetShort, 短整数型, , 取短整数
.局部变量 bin, 字节集, , , 

赋值 (bin, 取字节集左边 (m_bin, 2))
赋值 (m_bin, 取字节集右边 (m_bin, 相减 (取字节集长度 (m_bin), 2)))
返回 (Bin2Short (bin))

.子程序 GetToken, 字节集, , 取令牌
.局部变量 len, 整数型, , , 

赋值 (len, GetShort ())
返回 (GetBin (len))

.子程序 GetUTF_8, 文本型, , 
返回 (到文本 (未知支持库函数_0 (GetToken (), #, #, )))

.子程序 Len, 整数型, , 取长度
返回 (取字节集长度 (m_bin))

.子程序 SetData, 空白型, , 置数据
.参数 b, 字节集, , 

赋值 (m_bin, b)


.子程序 SetData_Hex, 空白型, , 置数据_十六进制文本
.参数 hex, 文本型, , 十六进制文本

赋值 (m_bin, Hex2Bin (hex))


.类模块 QQTEA, , , 

.程序集变量 加密许可证, 整数型, , , 
.程序集变量 m_Plain, 字节型, , "8", 指向当前的明文块
.程序集变量 m_prePlain, 字节型, , "8", 指向前面一个明文块
.程序集变量 m_out, 字节型, , "0", 
.程序集变量 m_Crypt, 整数型, , , 
.程序集变量 m_preCrypt, 整数型, , , 当前加密的密文位置和上一次加密的密文块位置，他们相差8
.程序集变量 m_Pos, 长整数型, , , 当前处理的加密解密块的位置
.程序集变量 m_padding, 长整数型, , , 填充数
.程序集变量 m_Key, 字节型, , "16", 密钥
.程序集变量 m_Header, 逻辑型, , , 用于加密时，表示当前是否是第一个8字节块，因为加密算法是反馈的
.程序集变量 m_contextStart, 长整数型, , , 
.子程序 _初始化, 空白型, , 
赋值 (加密许可证, 未知支持库函数_1 ())

.子程序 解密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本

.局部变量 局_回传字节型数组, 字节型, 静态, "0", 
.局部变量 i, 空白型, , , 
.局部变量 局_返回的文本, 文本型, , , 
.局部变量 局_binfrom, 字节型, , "0", 
.局部变量 局_Key, 字节型, , "0", 
.局部变量 bin, 字节集, , , 

未知支持库函数_3 (加密许可证)
.如果真 (等于 (加密内容, {  }))
    返回 ({  })
.如果真结束
.如果真 (等于 (密钥, {  }))
    赋值 (密钥, 取空白字节集 (16))
.如果真结束
字节集到数组 (密钥, 局_Key)
字节集到数组 (加密内容, 局_binfrom)
赋值 (m_preCrypt, 0)
赋值 (m_Crypt, 0)
赋值 (m_Pos, 0)
赋值 (m_padding, 0)
清除数组 (m_out)
UnHashTea (局_binfrom, 局_Key, 1, 真, 局_回传字节型数组)
赋值 (bin, 到字节集 (局_回传字节型数组))
未知支持库函数_4 (加密许可证)
返回 (bin)





.子程序 字节集到数组, 空白型, , 
.参数 参_字节集, 字节集, 参考, 
.参数 参_字节型数组, 字节型, 参考 数组, 

.局部变量 局_i, 空白型, , , 

重定义数组 (参_字节型数组, 假, 取字节集长度 (参_字节集))
.计次循环首 (取字节集长度 (参_字节集), 局_i)
    赋值 (参_字节型数组 [局_i], 参_字节集 [局_i])
.计次循环尾 ()

.子程序 加密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本

.局部变量 局_回传字节型数组, 字节型, 静态, "0", 
.局部变量 i, 空白型, , , 
.局部变量 局_返回的文本, 文本型, , , 
.局部变量 局_binfrom, 字节型, , "0", 
.局部变量 局_Key, 字节型, , "0", 
.局部变量 bin, 字节集, , , 

未知支持库函数_3 (加密许可证)
字节集到数组 (密钥, 局_Key)
字节集到数组 (加密内容, 局_binfrom)
HashTea (局_binfrom, 局_Key, 1, 真, 局_回传字节型数组)
赋值 (bin, 到字节集 (局_回传字节型数组))
未知支持库函数_4 (加密许可证)
返回 (bin)


.子程序 UnHashTea, 逻辑型, , 
.参数 binFrom, 字节型, 数组, 
.参数 binTkye, 字节型, 数组, 
.参数 offset, 空白型, , 起始位置，从1开始
.参数 is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 o_count, 空白型, , , 
.局部变量 o_m, 字节型, , "0", 
.局部变量 o_intLen, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 i2, 空白型, , , 


赋值 (m_Crypt, 0)
赋值 (m_preCrypt, 0)
赋值 (m_Key, binTkye)
重定义数组 (o_m, 假, 相加 (offset, 7))
赋值 (o_intLen, 取数组成员数 (binFrom))

Decipher (binFrom, m_Key, 真, m_prePlain)

赋值 (m_Pos, 位与 (m_prePlain [1], 7))
赋值 (o_count, 相减 (o_intLen, m_Pos, 10))
.变量循环首 (offset, 取数组成员数 (o_m), 1, i)
    赋值 (o_m [i], 0)
.变量循环尾 ()
重定义数组 (m_out, 假, o_count)

赋值 (m_preCrypt, 0)
赋值 (m_Crypt, 8)
赋值 (m_contextStart, 8)
赋值 (m_Pos, 相加 (m_Pos, 1))

赋值 (m_padding, 1)
.判断循环首 (小于或等于 (m_padding, 2))
    .如果真 (小于 (m_Pos, 8))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (m_padding, 相加 (m_padding, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        赋值 (o_m, binFrom)
        Decrypt8Bytes (binFrom, offset, o_intLen)
    .如果真结束
    
.判断循环尾 ()
赋值 (i2, 1)
.判断循环首 (不等于 (o_count, 0))
    .如果真 (小于 (m_Pos, 8))
        .判断开始 (小于或等于 (i2, 取数组成员数 (m_out)))
            .判断开始 (小于或等于 (相加 (m_Pos, 1), 取数组成员数 (m_prePlain)))
                .判断开始 (小于或等于 (相加 (offset, m_preCrypt, m_Pos), 取数组成员数 (o_m)))
                    赋值 (m_out [i2], 位异或 (o_m [相加 (offset, m_preCrypt, m_Pos)], m_prePlain [相加 (m_Pos, 1)]))
                .默认
                    返回 (假)
                .判断结束
                
            .默认
                返回 (假)
            .判断结束
            
        .默认
            返回 (假)
        .判断结束
        赋值 (i2, 相加 (i2, 1))
        赋值 (o_count, 相减 (o_count, 1))
        赋值 (m_Pos, 相加 (m_Pos, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        赋值 (o_m, binFrom)
        赋值 (m_preCrypt, 相减 (m_Crypt, 8))
        Decrypt8Bytes (binFrom, offset, o_intLen)
    .如果真结束
    
.判断循环尾 ()

.变量循环首 (1, 7, 1, i)
    .如果真 (小于 (m_Pos, 8))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        
        .如果真 (等于 (m_Pos, 8))
            赋值 (o_m, binFrom)
            Decrypt8Bytes (binFrom, offset, o_intLen)
        .如果真结束
        
        
    .如果真结束
    
    
.变量循环尾 ()

赋值 (参_回传字节型数组, m_out)
返回 (真)

.子程序 Decrypt8Bytes, 逻辑型, , 
.参数 input, 字节型, 数组, 
.参数 offset, 空白型, , 
.参数 intlen, 空白型, , 

.局部变量 i, 空白型, , , 

.变量循环首 (1, 8, 1, i)
    .如果真 (大于 (相加 (m_contextStart, i), intlen))
        返回 (真)
    .如果真结束
    .如果真 (大于 (相减 (相加 (offset, m_Crypt, i), 1), 取数组成员数 (input)))
        返回 (假)
    .如果真结束
    赋值 (m_prePlain [i], 位异或 (m_prePlain [i], input [相减 (相加 (offset, m_Crypt, i), 1)]))
     ' 输出调试文本 (m_prePlain [i])
.变量循环尾 ()
Decipher (m_prePlain, m_Key, 真, m_prePlain)

.如果真 (等于 (取数组成员数 (m_prePlain), 0))
    返回 (假)
.如果真结束

赋值 (m_contextStart, 相加 (m_contextStart, 8))
赋值 (m_Crypt, 相加 (m_Crypt, 8))
赋值 (m_Pos, 0)
返回 (真)

.子程序 Decipher, 空白型, , 
.参数 BinInput, 字节型, 数组, 
.参数 BinKey, 字节型, 数组, 
.参数 Is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 sum, 长整数型, , , 
.局部变量 rounds, 空白型, , , 
.局部变量 y, 长整数型, , , 
.局部变量 z, 长整数型, , , 
.局部变量 a, 长整数型, , , 
.局部变量 b, 长整数型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 d, 长整数型, , , 
.局部变量 i, 空白型, , , 
.局部变量 test, 长整数型, , , 

赋值 (sum, 3816266640)

赋值 (y, GetUInt (BinInput, 1, 4))

赋值 (z, GetUInt (BinInput, 5, 4))

赋值 (a, GetUInt (m_Key, 1, 4))

赋值 (b, GetUInt (m_Key, 5, 4))

赋值 (c, GetUInt (m_Key, 9, 4))

赋值 (d, GetUInt (m_Key, 13, 4))

.如果 (Is16Rounds)
    赋值 (rounds, 16)
.否则
    赋值 (rounds, 32)
.如果结束

.计次循环首 (rounds, i)
    赋值 (test, 长整型位异或 (长整型位异或 (相加 (长整型左移 (y, 4), c), 相加 (y, sum)), 相加 (长整型右移 (y, 5), d)))
    赋值 (z, 相减 (z, test))
    赋值 (z, 长整型位与 (z, 4294967295))
    赋值 (test, 长整型位异或 (长整型位异或 (相加 (长整型左移 (z, 4), a), 相加 (z, sum)), 相加 (长整型右移 (z, 5), b)))
    赋值 (y, 相减 (y, test))
    赋值 (y, 长整型位与 (y, 4294967295))
    赋值 (sum, 相减 (sum, 2654435769))
    赋值 (sum, 长整型位与 (sum, 4294967295))
.计次循环尾 ()
ToBytes (y, z, 参_回传字节型数组)

.子程序 GetUInt, 长整数型, , 
.参数 Input, 字节型, 数组, 
.参数 Ioffset, 空白型, , 
.参数 intLen, 空白型, , 

.局部变量 ret, 长整数型, , , 
.局部变量 lend, 空白型, , , 
.局部变量 i, 空白型, , , 

.如果 (大于 (intLen, 4))
    赋值 (lend, 相加 (Ioffset, 4))
.否则
    赋值 (lend, 相加 (Ioffset, intLen))
.如果结束

.变量循环首 (Ioffset, 相减 (lend, 1), 1, i)
    赋值 (ret, 左移 (ret, 8))
    .如果真 (小于 (取数组成员数 (Input), i))
        跳出循环 ()
    .如果真结束
    赋值 (ret, 位或 (ret, Input [i]))
    
.变量循环尾 ()
返回 (到无符号长整型 (ret))

.子程序 ToBytes, 空白型, , '返回字节型数组的字节集
.参数 a, 长整数型, , 
.参数 b, 长整数型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 bytes, 字节型, , "8", 

赋值 (bytes [1], 位与 (右移 (a, 24), 255))
赋值 (bytes [2], 位与 (右移 (a, 16), 255))
赋值 (bytes [3], 位与 (右移 (a, 8), 255))
赋值 (bytes [4], 位与 (a, 255))
赋值 (bytes [5], 位与 (右移 (b, 24), 255))
赋值 (bytes [6], 位与 (右移 (b, 16), 255))
赋值 (bytes [7], 位与 (右移 (b, 8), 255))
赋值 (bytes [8], 位与 (b, 255))
赋值 (参_回传字节型数组, bytes)


.子程序 HashTea, 空白型, , 
.参数 binFrom, 字节型, 数组, 
.参数 binTkye, 字节型, 数组, 
.参数 offset, 空白型, , 起始位置，从1开始
.参数 is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 intlen, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 i2, 空白型, , , 

赋值 (m_Header, 真)
赋值 (m_Key, binTkye)
赋值 (m_Pos, 1)
赋值 (m_padding, 0)
赋值 (m_Crypt, 0)
赋值 (m_preCrypt, 0)
赋值 (intlen, 取数组成员数 (binFrom))
赋值 (m_Pos, 求余数 (相加 (intlen, 10), 8))
.如果真 (不等于 (m_Pos, 0))
    赋值 (m_Pos, 相减 (8, m_Pos))
.如果真结束
重定义数组 (m_out, 假, 相加 (intlen, m_Pos, 9, 1))
置随机数种子 ()

赋值 (m_Plain [1], 长整型位异或 (长整型位与 (取随机数 (1000, 5000), 248), m_Pos))

.计次循环首 (m_Pos, i)
    .如果真 (小于 (取数组成员数 (m_Plain), 相加 (i, 1)))
        跳出循环 ()
    .如果真结束
    赋值 (m_Plain [相加 (i, 1)], 长整型位与 (取随机数 (1000, 5000), 255))
.计次循环尾 ()

.计次循环首 (8, i)
    .如果真 (小于 (取数组成员数 (m_prePlain), i))
        跳出循环 ()
    .如果真结束
    赋值 (m_prePlain [i], 0)
.计次循环尾 ()

赋值 (m_Pos, 相加 (m_Pos, 1))
赋值 (m_padding, 1)

.循环判断首 ()
    .如果 (小于 (m_Pos, 8))
        .如果真 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)))
            跳出循环 ()
        .如果真结束
        赋值 (m_Plain [相加 (m_Pos, 1)], 长整型位与 (取随机数 (1000, 5000), 255))
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (m_padding, 相加 (m_padding, 1))
    .否则
        Encrypt8Bytes (is16Rounds)
    .如果结束
    
.循环判断尾 (小于 (m_padding, 3))

赋值 (i2, offset)
.判断循环首 (大于 (intlen, 0))
    
    .如果 (小于 (m_Pos, 8))
        .如果真 (或者 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)), 小于 (取数组成员数 (binFrom), i2)))
            跳出循环 ()
        .如果真结束
        
        赋值 (m_Plain [相加 (m_Pos, 1)], binFrom [i2])
        赋值 (m_Pos, 相加 (m_Pos, 1))
        赋值 (intlen, 相减 (intlen, 1))
        赋值 (i2, 相加 (i2, 1))
    .否则
        Encrypt8Bytes (is16Rounds)
    .如果结束
    
    
.判断循环尾 ()

赋值 (m_padding, 1)
.判断循环首 (小于 (m_padding, 8))
    .如果真 (小于 (m_Pos, 8))
        .如果真 (小于 (取数组成员数 (m_Plain), 相加 (m_Pos, 1)))
            跳出循环 ()
        .如果真结束
        
        赋值 (m_Plain [相加 (m_Pos, 1)], 0)
        赋值 (m_padding, 相加 (m_padding, 1))
        赋值 (m_Pos, 相加 (m_Pos, 1))
    .如果真结束
    
    .如果真 (等于 (m_Pos, 8))
        Encrypt8Bytes (is16Rounds)
    .如果真结束
    
.判断循环尾 ()
赋值 (参_回传字节型数组, m_out)


.子程序 Encrypt8Bytes, 空白型, , 
.参数 Is16Rounds, 逻辑型, , 

.局部变量 Crypted, 字节型, , "0", 
.局部变量 i, 空白型, , , 

赋值 (m_Pos, 1)
.计次循环首 (8, i)
    .如果真 (或者 (小于 (取数组成员数 (m_Plain), i), 小于 (取数组成员数 (m_out), 相加 (m_preCrypt, i))))
        返回 ()
    .如果真结束
    
    
    .如果 (m_Header)
        赋值 (m_Plain [i], 长整型位异或 (m_Plain [i], m_prePlain [1]))
    .否则
        .如果真 (大于 (相加 (m_preCrypt, i), 取数组成员数 (m_out)))
            返回 ()
        .如果真结束
        赋值 (m_Plain [i], 长整型位异或 (m_Plain [i], m_out [相加 (m_preCrypt, i)]))
    .如果结束
    
.计次循环尾 ()
Encipher (m_Plain, m_Key, Is16Rounds, Crypted)
.计次循环首 (取数组成员数 (Crypted), i)
    .如果真 (大于 (相加 (m_Crypt, i), 取数组成员数 (m_out)))
        返回 ()
    .如果真结束
    赋值 (m_out [相加 (m_Crypt, i)], Crypted [i])
.计次循环尾 ()

.计次循环首 (8, i)
    .如果真 (大于 (相加 (m_Crypt, i), 取数组成员数 (m_out)))
        返回 ()
    .如果真结束
    赋值 (m_out [相加 (m_Crypt, i)], 长整型位异或 (m_out [相加 (m_Crypt, i)], m_prePlain [i]))
.计次循环尾 ()

.计次循环首 (取数组成员数 (m_Plain), i)
    .如果真 (大于 (i, 取数组成员数 (m_prePlain)))
        返回 ()
    .如果真结束
    赋值 (m_prePlain [i], m_Plain [i])
.计次循环尾 ()

赋值 (m_preCrypt, m_Crypt)
赋值 (m_Crypt, 相加 (m_Crypt, 8))
赋值 (m_Pos, 0)
赋值 (m_Header, 假)

.子程序 Encipher, 空白型, , 
.参数 BinInput, 字节型, 数组, 
.参数 k, 字节型, 数组, 
.参数 Is16Rounds, 逻辑型, , 
.参数 参_回传字节型数组, 字节型, 参考 数组, 

.局部变量 sum, 长整数型, , , 
.局部变量 rounds, 空白型, , , 
.局部变量 y, 长整数型, , , 
.局部变量 z, 长整数型, , , 
.局部变量 a, 长整数型, , , 
.局部变量 b, 长整数型, , , 
.局部变量 c, 长整数型, , , 
.局部变量 d, 长整数型, , , 
.局部变量 i, 空白型, , , 
.局部变量 test, 长整数型, , , 
.局部变量 匿名局部变量_186, 空白型, , , 

清除数组 (参_回传字节型数组)
赋值 (y, GetUInt (BinInput, 1, 4))
赋值 (z, GetUInt (BinInput, 5, 4))
赋值 (a, GetUInt (m_Key, 1, 4))
赋值 (b, GetUInt (m_Key, 5, 4))
赋值 (c, GetUInt (m_Key, 9, 4))
赋值 (d, GetUInt (m_Key, 13, 4))

.如果 (Is16Rounds)
    赋值 (rounds, 16)
.否则
    赋值 (rounds, 32)
.如果结束

.计次循环首 (rounds, i)
    赋值 (sum, 长整型位与 (sum, 4294967295))
    赋值 (sum, 相加 (sum, 2654435769))
    赋值 (z, 长整型位与 (z, 4294967295))
    赋值 (y, 相加 (y, 长整型位异或 (长整型位异或 (相加 (长整型左移 (z, 4), a), 相加 (z, sum)), 相加 (长整型右移 (z, 5), b))))
    赋值 (y, 长整型位与 (y, 4294967295))
    赋值 (z, 相加 (z, 长整型位异或 (长整型位异或 (相加 (长整型左移 (y, 4), c), 相加 (y, sum)), 相加 (长整型右移 (y, 5), d))))
    
.计次循环尾 ()

ToBytes (y, z, 参_回传字节型数组)

.子程序 长整型位异或, 长整数型, , 长整数的XOR
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.如果真 (或者 (小于 (取字节集长度 (t1), 8), 小于 (取字节集长度 (t2), 8)))
    返回 (0)
.如果真结束
.计次循环首 (8, i)
    赋值 (t3 [i], 位异或 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 长整型位与, 长整数型, , 长整数的AND
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.如果真 (或者 (小于 (取字节集长度 (t1), 8), 小于 (取字节集长度 (t2), 8)))
    返回 (0)
.如果真结束

.计次循环首 (8, i)
    赋值 (t3 [i], 位与 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 长整型右移, 长整数型, , 右移
.参数 x, 长整数型, , 
.参数 n, 空白型, , 

.计次循环首 (n, )
    赋值 (x, 相除 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 长整型左移, 长整数型, , 左移
.参数 x, 长整数型, , 
.参数 n, 空白型, , 

.计次循环首 (n, )
    赋值 (x, 相乘 (x, 2))
.计次循环尾 ()
返回 (x)

.程序集 CodeConversion, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 Utf8, 字节集, , 

返回 (到文本 (未知支持库函数_0 (Utf8, #, #, )))

.子程序 编码_Ansi到Utf8, 字节集, , 
.参数 ansi, 文本型, , 

返回 (相加 (未知支持库函数_0 (到字节集 (ansi), #, #, ), { 0 }))

.子程序 进制_十六到十, 整数型, , 将16进制文件转换到10进制数值(返回十进制数)
.参数 文本, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 t, 文本型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 局_文本, 文本型, , , 

赋值 (t, “0123456789ABCDEF”)
赋值 (局_文本, 到大写 (文本))
.计次循环首 (取文本长度 (文本), i)
    赋值 (结果, 相减 (相加 (相乘 (结果, 16), 寻找文本 (t, 取文本中间 (局_文本, i, 1), , 假)), 1))
.计次循环尾 ()
返回 (结果)

.子程序 到无符号长整型, 长整数型, , 
.参数 long, 整数型, , 

置入代码 ({ 139, 69, 8, 51, 210, 201, 194, 4, 0 })

返回 (0)

.子程序 MidBin, 字节集, , 取出想要的内容
.参数 完整内容, 字节集, , 完整内容
.参数 左边文本, 字节集, 可空, 左边文本
.参数 右边文本, 字节集, 可空, 右边文本
.参数 循环读取, 逻辑型, 可空, 可空，默认为假，为真时“左边文本”“右边文本”“结果数组”不能为空.
.参数 结果数组, 字节集, 可空 数组, 可空，当“循环读取”为真时，不可为空.返回结果的数组.

.局部变量 临时位置, 整数型, , , 
.局部变量 总长度, 整数型, , , 
.局部变量 临时文本, 字节集, , , 
.局部变量 位置1, 整数型, , , 
.局部变量 位置2, 整数型, , , 

赋值 (总长度, 取字节集长度 (完整内容))
.如果 (等于 (循环读取, 真))
    .如果 (或者 (等于 (左边文本, {  }), 等于 (右边文本, {  })))
        返回 ({  })
    .否则
        重定义数组 (结果数组, 假, 0)
        赋值 (位置1, 寻找字节集 (完整内容, 左边文本, ))
        .判断循环首 (不等于 (位置1, -1))
            赋值 (临时位置, 相加 (位置1, 1))
            赋值 (位置2, 寻找字节集 (完整内容, 右边文本, 位置1))
            加入成员 (结果数组, 取字节集中间 (完整内容, 相加 (位置1, 取字节集长度 (左边文本)), 相减 (位置2, 位置1, 取字节集长度 (左边文本))))
            赋值 (位置1, 寻找字节集 (完整内容, 左边文本, 临时位置))
        .判断循环尾 ()
        .如果 (大于 (取数组成员数 (结果数组), 1))
            返回 (结果数组 [1])
        .否则
            返回 ({  })
        .如果结束
        
    .如果结束
    
.否则
    .判断开始 (等于 (右边文本, {  }))
        .如果 (大于 (寻找字节集 (完整内容, 左边文本, ), -1))
            赋值 (临时位置, 相加 (寻找字节集 (完整内容, 左边文本, ), 取字节集长度 (左边文本)))
            赋值 (临时文本, 取字节集中间 (完整内容, 临时位置, 总长度))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断 (等于 (左边文本, {  }))
        .如果 (大于 (寻找字节集 (完整内容, 右边文本, ), -1))
            赋值 (临时位置, 相减 (寻找字节集 (完整内容, 右边文本, ), 1))
            赋值 (临时文本, 取字节集左边 (完整内容, 临时位置))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断 (并且 (等于 (左边文本, {  }), 等于 (右边文本, {  })))
        返回 ({  })
    .默认
        .如果 (大于 (寻找字节集 (完整内容, 左边文本, ), -1))
            赋值 (临时位置, 相加 (寻找字节集 (完整内容, 左边文本, ), 取字节集长度 (左边文本)))
            赋值 (临时文本, 取字节集中间 (完整内容, 临时位置, 总长度))
            赋值 (总长度, 取字节集长度 (临时文本))
            赋值 (临时位置, 相减 (寻找字节集 (临时文本, 右边文本, ), 1))
            赋值 (临时文本, 取字节集中间 (临时文本, 1, 临时位置))
            返回 (临时文本)
        .否则
            返回 ({  })
        .如果结束
        
    .判断结束
    
    
    
.如果结束


.子程序 Flip, 字节集, , 反转字节集
.参数 bin, 字节集, 参考, 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 
.局部变量 结果, 字节集, , , 

赋值 (长度, 取字节集长度 (bin))
Bin2Array (bin, 字节数组)
.计次循环首 (长度, i)
    赋值 (结果, 相加 (结果, 到字节集 (字节数组 [相加 (相减 (长度, i), 1)])))
.计次循环尾 ()
返回 (结果)


.子程序 Bin2Int, 整数型, , 到整数
.参数 四字节, 字节集, , 

返回 (取字节集数据 (Flip (四字节), #整数型, 1))

.子程序 Int2Bin, 字节集, , 
.参数 int, 整数型, , 

返回 (Flip (到字节集 (int)))

.子程序 Long2Bin, 字节集, , 
.参数 Long, 长整数型, , 

返回 (Flip (到字节集 (Long)))

.子程序 Bin2Short, 整数型, , 二字节到整数
.参数 二字节, 字节集, , 

返回 (到整数 (取字节集数据 (Flip (二字节), #短整数型, 1)))


.子程序 Short2Bin, 字节集, , 
.参数 short, 短整数型, , 

返回 (Flip (到字节集 (short)))

.子程序 Bin2Byte, 整数型, , 一字节到整数
.参数 字节, 字节集, , 

返回 (到整数 (取字节集数据 (字节, #字节型, 1)))


.子程序 Byte2Bin, 字节集, , 
.参数 byte, 字节型, , 

返回 (Flip (到字节集 (byte)))

.子程序 BinToString, 文本型, , 显示字节集
.参数 字节集, 字节集, 参考, 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 
.局部变量 结果, 文本型, , , 

赋值 (长度, 取字节集长度 (字节集))
Bin2Array (字节集, 字节数组)
.计次循环首 (长度, i)
    赋值 (结果, 相加 (结果, 到文本 (到整数 (字节数组 [i])), “,”))
.计次循环尾 ()
返回 (取文本左边 (结果, 相减 (取文本长度 (结果), 1)))


.子程序 ToIP, 文本型, , 到IP
.参数 四字节, 字节集, , 四字节

.局部变量 ip1, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (4, i)
    赋值 (ip1, 相加 (ip1, 到文本 (到整数 (取字节集数据 (四字节, #字节型, i))), “.”))
.计次循环尾 ()
返回 (取文本左边 (ip1, 相减 (取文本长度 (ip1), 1)))


.子程序 Bin2Array, 空白型, , 
.参数 参_字节集, 字节集, 参考, 
.参数 参_字节型数组, 字节型, 参考 数组, 

.局部变量 局_i, 空白型, , , 

重定义数组 (参_字节型数组, 假, 取字节集长度 (参_字节集))
.计次循环首 (取字节集长度 (参_字节集), 局_i)
    赋值 (参_字节型数组 [局_i], 参_字节集 [局_i])
.计次循环尾 ()

.子程序 Bin2Long, 长整数型, , 
.参数 bin, 字节集, , 

.局部变量 tmp, 长整数型, , , 

赋值 (tmp, 到长整数 (取字节集数据 (Flip (bin), #长整数型, 1)))
返回 (tmp)

.子程序 Bin2Hex, 文本型, , 字节集到十六
.参数 字节集, 字节集, 参考, 

.局部变量 长度, 空白型, , , 
.局部变量 i, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 字节, 文本型, , , 

赋值 (长度, 取字节集长度 (字节集))
.计次循环首 (长度, i)
    赋值 (字节, 到大写 (取十六进制文本 (到整数 (取字节集数据 (字节集, #字节型, i)))))
    .如果真 (小于 (取文本长度 (字节), 2))
        赋值 (字节, 相加 (“0”, 字节))
    .如果真结束
    赋值 (文本, 相加 (文本, 字节, “ ”))
.计次循环尾 ()
返回 (文本)

.子程序 Hex2Bin2, 字节集, , 十六到字节集
.参数 文本, 文本型, 参考, 

.局部变量 文本数组, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 十六, 文本型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 字节数组, 字节型, , "0", 

赋值 (文本数组, 分割文本 (文本, “ ”, ))
.计次循环首 (取数组成员数 (文本数组), i)
    赋值 (十六, 相加 (“0x”, 文本数组 [i]))
    赋值 (结果, 进制_十六到十 (十六))
    
    加入成员 (字节数组, 到字节 (结果))
.计次循环尾 ()
返回 (到字节集 (字节数组))


.子程序 Hex2Bin, 字节集, , 嵌ASM
.参数 原文, 文本型, , 

返回 (十六进制文本到字节集 (删全部空 (原文)))

.子程序 GetRandomBin, 字节集, , 
.参数 len, 整数型, , 

.局部变量 字节, 字节型, , "0", 

.计次循环首 (len, )
    加入成员 (字节, 到字节 (取随机数 (0, 255)))
.计次循环尾 ()
返回 (到字节集 (字节))

.子程序 FuncToInt, 整数型, , 子程序指针到整数
.参数 x, 子程序指针, , 

返回 (0)

.子程序 GetHigh, 整数型, , 取高位
.参数 x, 整数型, , 

返回 (0)

.子程序 GetLow, 整数型, , 取低位
.参数 x, 整数型, , 

返回 (0)

.子程序 LongAnd, 长整数型, , 长整数的AND
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.计次循环首 (8, i)
    赋值 (t3 [i], 位与 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 LongMoveL, 长整数型, , 长整型左移
.参数 x, 长整数型, , 
.参数 n, 整数型, , 

.计次循环首 (n, )
    赋值 (x, 相乘 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 LongMoveR, 长整数型, , 长整型右移
.参数 x, 长整数型, , 
.参数 n, 整数型, , 

.计次循环首 (n, )
    赋值 (x, 相除 (x, 2))
.计次循环尾 ()
返回 (x)


.子程序 LongToInt, 整数型, , 长整数到整数
.参数 x, 长整数型, , 

返回 (0)

.子程序 LongXor, 长整数型, , 长整数的XOR
.参数 x, 长整数型, , 
.参数 y, 长整数型, , 

.局部变量 t1, 字节集, , , 
.局部变量 t2, 字节集, , , 
.局部变量 t3, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 temp, 长整数型, , , 

赋值 (t1, 到字节集 (x))
赋值 (t2, 到字节集 (y))
赋值 (t3, 取空白字节集 (8))
.计次循环首 (8, i)
    赋值 (t3 [i], 位异或 (t1 [i], t2 [i]))
.计次循环尾 ()
赋值 (temp, 取字节集数据 (t3, #长整数型, 1))
返回 (temp)


.子程序 ToDecimal, 长整数型, , 到十进制
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：4#十六进制,10#十进制,2#八进制，1#二进制

返回 (0)

.子程序 ToULong, 长整数型, , 到无符号长整数
.参数 long, 整数型, , 

置入代码 ({ 139, 69, 8, 51, 210, 201, 194, 4, 0 })
返回 (0)

.子程序 ToUshort, 整数型, , 
.参数 short, 短整数型, , 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 ToUchar, 短整数型, , 
.参数 char, 字节型, , 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
返回 (0)

.子程序 HashMD5, 文本型, , 返回十六
.参数 字节集, 字节集, , 

.局部变量 a, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 文本型, , , 

赋值 (a, 未知支持库函数_2 (字节集))
.计次循环首 (相除 (取文本长度 (a), 2), i)
    赋值 (b, 相加 (b, 取文本中间 (a, 相减 (相乘 (i, 2), 1), 2), “ ”))
.计次循环尾 ()
返回 (b)

.子程序 HashMD5_, 字节集, , 返回字节集
.参数 字节集, 字节集, , 

.局部变量 a, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 文本型, , , 

赋值 (a, 未知支持库函数_2 (字节集))
.计次循环首 (相除 (取文本长度 (a), 2), i)
    赋值 (b, 相加 (b, 取文本中间 (a, 相减 (相乘 (i, 2), 1), 2), “ ”))
.计次循环尾 ()
返回 (Hex2Bin2 (b))


.子程序 字节集到十六进制文本, 文本型, , 返回字节集的十六进制文本,可能有最大长度的限制
.参数 输入字节集, 字节集, 参考, 

.局部变量 字节集指针, 整数型, , , 
.局部变量 文本指针, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 字节集长度, 整数型, , , 
.局部变量 记数, 整数型, , , 

赋值 (字节集指针, 取变量数据地址 (输入字节集))
赋值 (字节集长度, 取字节集长度 (输入字节集))
赋值 (文本, 取空白文本 (相乘 (字节集长度, 3)))
赋值 (文本指针, 取变量数据地址 (文本))
.计次循环首 (字节集长度, 记数)
    置入代码 ({ 139, 69, 252, 138, 0, 50, 228, 102, 193, 224, 4, 192, 232, 4, 134, 224, 60, 9, 126, 4, 4, 55, 235, 2, 4, 48, 128, 252, 9, 126, 5, 128, 196, 55, 235, 3, 128, 196, 48, 139, 77, 240, 102, 137, 1, 131, 193, 3, 137, 77, 240, 139, 77, 252, 65, 137, 77, 252 })
.计次循环尾 ()
返回 (文本)

.子程序 十六进制文本到字节集, 字节集, , 嵌ASM
.参数 原文, 文本型, , 

.局部变量 原文长度, 整数型, , , 
.局部变量 原文地址, 整数型, , , 
.局部变量 码表地址, 整数型, , , 
.局部变量 结果地址, 整数型, , , 
.局部变量 结果, 字节集, , , 

赋值 (原文长度, 0) ' ebp-4
赋值 (原文地址, 1) ' ebp-8
赋值 (码表地址, 2) ' ebp-c
赋值 (结果地址, 3) ' ebp-10
置入代码 ({ 139, 93, 8, 139, 27, 137, 93, 248, 139, 251, 185, 255, 255, 255, 255, 50, 192, 252, 242, 174, 184, 254, 255, 255, 255, 43, 193, 137, 69, 252 })
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
置入代码 ({ 232, 0, 0, 0, 0, 89, 131, 193, 6, 235, 103 }) ' 跳转到代码
 ' ==========码表开始
置入代码 ({ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 12, 13, 14, 15 })
 ' 跳到这里了
置入代码 ({ 144, 144, 144, 144, 144, 137, 77, 244 }) ' 码表地址到ebp-c
置入代码 ({ 209, 109, 252 }) ' 原文长度/2
赋值 (结果, 取空白字节集 (原文长度))
置入代码 ({ 131, 192, 8, 137, 69, 240 }) ' 结果地址
 ' 计算开始
置入代码 ({ 139, 93, 244, 139, 117, 248, 139, 125, 240, 209, 101, 252, 139, 77, 252, 3, 206, 51, 192, 102, 139, 6, 70, 70, 80, 37, 255, 0, 0, 0, 138, 52, 24, 88, 193, 232, 8, 138, 20, 24, 192, 230, 4, 8, 242, 136, 23, 71, 59, 241, 124, 223 })
返回 (结果)

.子程序 TimeStamp, 长整数型, , GetUnixTime
.参数 精确到毫秒, 逻辑型, 可空, 默认为假 精确到秒10位数 精确到毫秒13位数

.局部变量 易语言时间, 日期时间型, , , 
.局部变量 时间戳, 长整数型, , , 

赋值 (易语言时间, 取现行时间 ())
赋值 (时间戳)

.子程序 format_ip, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 t_text, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (取字节集长度 (bin), i)
    赋值 (t_text, 相加 (t_text, 到文本 (bin [i])))
    .如果真 (不等于 (取字节集长度 (bin), i))
        赋值 (t_text, 相加 (t_text, “.”))
    .如果真结束
    
.计次循环尾 ()
返回 (t_text)


.类模块 JceOutputStream, , , 

.程序集变量 pack, _Pack, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 clear, 空白型, , 
pack.未知函数_67174818 ()

.子程序 toByteArray, 字节集, , 
返回 (pack.未知函数_67174819 ())

.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 

pack.未知函数_67174820 (bin)


.子程序 WriteHead, 空白型, , 
.参数 p_val, 字节型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节型, , , 

.如果 (大于或等于 (p_tag, 15))
    赋值 (t_val, 位或 (p_val, 240))
    pack.未知函数_67174821 (t_val)
    pack.未知函数_67174821 (p_tag)
    
.否则
    赋值 (t_val, 位或 (p_val, 左移 (p_tag, 4)))
    pack.未知函数_67174821 (t_val)
.如果结束



.子程序 WriteObj, 空白型, , 
.参数 p_type, 字节型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

.判断开始 (等于 (p_type, #TYPE_BYTE))
    WriteByte (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_SHORT))
    WriteShort (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_INT))
    WriteInt (到整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_LONG))
    WriteLong (到长整数 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_SIMPLE_LIST))
    WriteSimpleList (p_val, p_tag)
.判断 (等于 (p_type, #TYPE_MAP))
     ' WriteMap (p_val, p_tag)
    调试输出 (“error can't write map ”)
.判断 (等于 (p_type, #TYPE_STRING1))
    WriteStringByte (到文本 (p_val), p_tag)
.判断 (等于 (p_type, #TYPE_LIST))
    WriteList (p_val, p_tag)
.判断 (等于 (p_type, #TYPE_STRING4))
    WriteStringByte (到文本 (p_val), p_tag)
.默认
    调试输出 (相加 (“error WriteObj  type=”, 到文本 (p_type)))
.判断结束


.子程序 WriteByte, 空白型, , 
.参数 p_val, 字节型, , 
.参数 p_tag, 整数型, , 

.判断开始 (等于 (p_val, 0))
    WriteHead (#TYPE_ZERO_TAG, p_tag)
.默认
    WriteHead (#TYPE_BYTE, p_tag)
    pack.未知函数_67174821 (p_val)
.判断结束


.子程序 WriteShort, 空白型, , 
.参数 p_val, 短整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -128), 小于或等于 (p_val, 127)))
    WriteByte (p_val, p_tag)
.默认
    WriteHead (#TYPE_SHORT, p_tag)
    pack.未知函数_67174832 (p_val)
.判断结束


.子程序 WriteInt, 空白型, , 
.参数 p_val, 整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -32768), 小于或等于 (p_val, 32767)))
    WriteShort (p_val, p_tag)
.默认
    WriteHead (#TYPE_INT, p_tag)
    pack.未知函数_67174833 (p_val)
.判断结束


.子程序 WriteLong, 空白型, , 
.参数 p_val, 长整数型, , 
.参数 p_tag, 整数型, , 

.判断开始 (并且 (大于或等于 (p_val, -2147483648), 小于或等于 (p_val, 2147483647)))
    WriteInt (到整数 (p_val), p_tag)
.默认
    
    WriteHead (#TYPE_LONG, p_tag)
    pack.未知函数_67174834 (Long2Bin (p_val))
.判断结束


.子程序 WriteByteString, 空白型, , 十六进制字节
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 十六进制文本到字节集 (删全部空 (p_val)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.未知函数_67174833 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.默认
    WriteHead (#TYPE_STRING1, p_tag)
    pack.未知函数_67174821 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.判断结束


.子程序 WriteStringByte, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 编码_Ansi到Utf8 (p_val))
赋值 (t_val, 取字节集左边 (t_val, 相减 (取字节集长度 (t_val), 1)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.未知函数_67174833 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.默认
    WriteHead (#TYPE_STRING1, p_tag)
    pack.未知函数_67174821 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.判断结束


.子程序 WriteJceStruct, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

WriteHead (#TYPE_STRUCT_BEGIN, p_tag)
pack.未知函数_67174834 (p_val)
WriteHead (#TYPE_STRUCT_END, 0)

.子程序 WriteSimpleList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

WriteHead (#TYPE_SIMPLE_LIST, p_tag)
WriteHead (0, 0)
WriteInt (取字节集长度 (p_val), 0)
pack.未知函数_67174834 (p_val)

.子程序 WriteList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 

.局部变量 i, 整数型, , , 

WriteHead (#TYPE_LIST, p_tag)
WriteInt (取字节集长度 (p_val), 0)
.计次循环首 (取字节集长度 (p_val), i)
    WriteInt (p_val [i], 0)
.计次循环尾 ()

.子程序 WriteMap, 空白型, , 
.参数 p_key, JceMap, 数组, 
.参数 p_tag, 长整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 len, 整数型, , , 

WriteHead (#TYPE_MAP, p_tag)
赋值 (len, 取数组成员数 (p_key))
WriteShort (len, 0)
.如果真 (等于 (len, 0))
    返回 ()
.如果真结束
.计次循环首 (len, i)
    WriteObj (p_key [i], key_type, p_key [i], key, 0)
    WriteObj (p_key [i], val_type, p_key [i], val, 1)
.计次循环尾 ()



.子程序 putHex, 空白型, , 
.参数 hex, 文本型, , 

pack.未知函数_67174845 (hex)


.子程序 WriteStringByte_2, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 

.局部变量 t_val, 字节集, , , 

赋值 (t_val, 编码_Ansi到Utf8 (p_val))
赋值 (t_val, 取字节集左边 (t_val, 相减 (取字节集长度 (t_val), 1)))
.判断开始 (大于 (取字节集长度 (t_val), 255))
    WriteHead (#TYPE_STRING4, p_tag)
    pack.未知函数_67174833 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.默认
    WriteHead (13, p_tag)
    pack.未知函数_67174821 (取字节集长度 (t_val))
    pack.未知函数_67174834 (t_val)
.判断结束


.类模块 JceInputStream, , , 

.程序集变量 unpackReq, _Unpack, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 

unpackReq.未知函数_67174934 (bin)


.子程序 SkipToTag, 逻辑型, , 跳到指定tag处
.参数 p_tag, 整数型, , 

.局部变量 localHeadData, HeadData, , , 
.局部变量 step, 整数型, , , 

.循环判断首 ()
    赋值 (step, peakHead (localHeadData))
    .如果真 (等于 (localHeadData.type, #TYPE_STRUCT_END))
        跳出循环 ()
    .如果真结束
    .如果 (小于或等于 (localHeadData.tag, p_tag))
        .如果真 (不等于 (localHeadData.tag, p_tag))
            跳出循环 ()
        .如果真结束
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    skip (step)
    skipField (localHeadData.type)
.循环判断尾 (假)
返回 (假)

.子程序 skipField, 空白型, , 
.参数 p_type, 整数型, , 

.局部变量 t_len, 整数型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 

.判断开始 (等于 (p_type, #TYPE_BYTE))
    skip (1)
.判断 (等于 (p_type, #TYPE_SHORT))
    skip (2)
.判断 (等于 (p_type, #TYPE_INT))
    skip (4)
.判断 (等于 (p_type, #TYPE_LONG))
    skip (8)
.判断 (等于 (p_type, #TYPE_SIMPLE_LIST))
     ' 7D    00 00 46
     ' FD 15 00 00 08  08 88 F2 02 88 19 C0 17
    unpackReq.未知函数_67174939 ()
     ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (localHeadData.type, #TYPE_SHORT))
            赋值 (t_len, unpackReq.未知函数_67174940 ())
        .否则
            赋值 (t_len, unpackReq.未知函数_67174939 ())
        .如果结束
        skip (t_len)
    .判断结束
    
.判断 (等于 (p_type, #TYPE_MAP))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        ReadHead (localHeadData)
        赋值 (t_count, localHeadData.type)
        .计次循环首 (t_count, i)
             ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
            
            ReadHead (localHeadData)
            skipField (localHeadData.type)
             ' 调试输出 (字节集到十六进制文本 (unpackReq.GetAll ()))
            ReadHead (localHeadData)
            skipField (localHeadData.type)
        .计次循环尾 ()
    .判断结束
    
.判断 (等于 (p_type, #TYPE_ZERO_TAG))
    
.判断 (等于 (p_type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.未知函数_67174939 ())
    skip (t_len)
.判断 (等于 (p_type, #TYPE_LIST))
    ReadHead (localHeadData)
    .判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (localHeadData.type, #TYPE_SHORT))
            赋值 (t_count, unpackReq.未知函数_67174940 ())
        .否则
            赋值 (t_count, unpackReq.未知函数_67174939 ())
        .如果结束
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            skipField (localHeadData.type)
        .计次循环尾 ()
    .判断结束
    
.判断 (等于 (p_type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.未知函数_67174941 ())
    skip (t_len)
.判断 (等于 (p_type, #TYPE_STRUCT_BEGIN))
    ReadHead (localHeadData)
    .判断循环首 (不等于 (localHeadData.type, #TYPE_STRUCT_END))
        skipField (localHeadData.type)
        ReadHead (localHeadData)
    .判断循环尾 ()
.默认
    调试输出 (相加 (“error skipField  type=”, 到文本 (p_type)))
.判断结束


.子程序 skip, 空白型, , 
.参数 step, 整数型, , 

unpackReq.未知函数_67174953 (step)

.子程序 peakHead, 整数型, , 
.参数 localHeadData, HeadData, , 

返回 (ReadHead (localHeadData, unpackReq.未知函数_67174954 ()))

.子程序 ReadHead, 整数型, , 
.参数 paramHead, HeadData, 参考, 
.参数 buffer, 字节集, 可空, 

.局部变量 i, 字节型, , , 
.局部变量 unptmp, _Unpack, , , 
.局部变量 ptmp, _Pack, , , 

.判断开始 (等于 (是否为空 (buffer), 真))
    赋值 (i, unpackReq.未知函数_67174939 ())
    
     ' 调试输出 (i)
    赋值 (paramHead.type, 位与 (i, 15))
    赋值 (paramHead.tag, 右移 (位与 (i, 240), 4))
     ' 调试输出 (i, type, tag)
     ' paramHead.type ＝ type
     ' paramHead.tag ＝ tag
    .如果真 (等于 (paramHead.tag, 15))
        赋值 (paramHead.tag, unpackReq.未知函数_67174939 ())
        返回 (2)
    .如果真结束
    返回 (1)
.默认
    ptmp.Empty ()
    ptmp.SetBin (buffer)
    unptmp.SetData (ptmp.GetAll ())
    赋值 (i, unptmp.GetByte ())
    
     ' 调试输出 (i)
    赋值 (paramHead.type, 位与 (i, 15))
    赋值 (paramHead.tag, 右移 (位与 (i, 240), 4))
     ' 调试输出 (i, type, tag)
     ' paramHead.type ＝ type
     ' paramHead.tag ＝ tag
    .如果真 (等于 (paramHead.tag, 15))
        赋值 (paramHead.tag, unptmp.GetByte ())
        返回 (2)
    .如果真结束
    返回 (1)
.判断结束

 ' paramHeadData.type = ((byte)(i & 0xF));
 ' paramHeadData.tag = ((i & 0xF0) >> 4);


.子程序 ReadObj, 文本型, , 
.参数 type, 字节型, , 

.局部变量 t_val, 文本型, , , 
.局部变量 t_len, 整数型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 

.判断开始 (等于 (type, #TYPE_BYTE))
    赋值 (t_val, 到文本 (unpackReq.未知函数_67174939 ()))
.判断 (等于 (type, #TYPE_SHORT))
    赋值 (t_val, 到文本 (unpackReq.未知函数_67174940 ()))
.判断 (等于 (type, #TYPE_INT))
    赋值 (t_val, 到文本 (unpackReq.未知函数_67174941 ()))
.判断 (等于 (type, #TYPE_LONG))
    赋值 (t_val, 到文本 (unpackReq.未知函数_67174959 ()))
.判断 (等于 (type, #TYPE_SIMPLE_LIST))
     ' 7D 00 00 46
    unpackReq.未知函数_67174939 ()
    .如果 (等于 (unpackReq.未知函数_67174939 (), #TYPE_SHORT))
        赋值 (t_len, unpackReq.未知函数_67174940 ())
    .否则
        赋值 (t_len, unpackReq.未知函数_67174939 ())
    .如果结束
    赋值 (t_val, 字节集到十六进制文本 (unpackReq.未知函数_67174953 (t_len)))
    
.判断 (等于 (type, #TYPE_MAP))
    ReadHead (localHeadData)
    赋值 (t_val, “{”)
    .判断开始 (等于 (type, #TYPE_ZERO_TAG))
        
    .默认
        ReadHead (localHeadData)
        赋值 (t_count, type)
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “k=”, ReadObj (localHeadData.type)))
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “,  v=”, ReadObj (localHeadData.type), “  ”))
        .计次循环尾 ()
    .判断结束
    赋值 (t_val, 相加 (t_val, “}”))
    
.判断 (等于 (type, #TYPE_ZERO_TAG))
    赋值 (t_val, “0”)
.判断 (等于 (type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.未知函数_67174939 ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.未知函数_67174953 (t_len), { 0 })))
.判断 (等于 (type, #TYPE_LIST))
    ReadHead (localHeadData)
    赋值 (t_val, “[”)
    .判断开始 (等于 (type, #TYPE_ZERO_TAG))
        
    .默认
        .如果 (等于 (type, #TYPE_SHORT))
            赋值 (t_count, unpackReq.未知函数_67174940 ())
        .否则
            赋值 (t_count, unpackReq.未知函数_67174939 ())
        .如果结束
        .计次循环首 (t_count, i)
            ReadHead (localHeadData)
            赋值 (t_val, 相加 (t_val, “”, ReadObj (localHeadData.type)))
            .如果真 (不等于 (i, t_count))
                赋值 (t_val, 相加 (t_val, “,”))
            .如果真结束
            
        .计次循环尾 ()
        
    .判断结束
    赋值 (t_val, 相加 (t_val, “]”))
    
.判断 (等于 (type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.未知函数_67174941 ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.未知函数_67174953 (t_len), { 0 })))
.判断 (等于 (type, #TYPE_STRUCT_BEGIN))
    ReadHead (localHeadData)
    .判断循环首 (不等于 (localHeadData.type, #TYPE_STRUCT_END))
        赋值 (t_val, 相加 (t_val, ReadObj (localHeadData.type)))
        ReadHead (localHeadData)
    .判断循环尾 ()
    
    
.默认
    调试输出 (相加 (“error ReadValNum  type=”, 到文本 (type)))
.判断结束

返回 (t_val)

.子程序 ReadByte, 字节型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramByte, 字节型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramByte)
.如果真结束

ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramByte, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramByte, unpackReq.未知函数_67174939 ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramByte, unpackReq.未知函数_67174940 ())
.默认
     ' 调试输出 (“read Byte :error type mismatch”)
.判断结束
返回 (paramByte)


.子程序 ReadShort, 短整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramShort, 短整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramShort)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramShort, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramShort, unpackReq.未知函数_67174939 ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramShort, unpackReq.未知函数_67174940 ())
.默认
     ' 调试输出 (“read short :error type mismatch”)
.判断结束
返回 (paramShort)


.子程序 ReadInt, 整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramInt1, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramInt1)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramInt1, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramInt1, unpackReq.未知函数_67174939 ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramInt1, unpackReq.未知函数_67174940 ())
.判断 (等于 (localHeadData.type, #TYPE_INT))
    赋值 (paramInt1, unpackReq.未知函数_67174941 ())
.默认
     ' 调试输出 (“read int :error type mismatch”, localHeadData.type)
.判断结束
返回 (paramInt1)

.子程序 ReadLong, 长整数型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 paramLong, 长整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (paramLong)
.如果真结束
ReadHead (localHeadData)
 ' 调试输出 (localHeadData.type)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    赋值 (paramLong, 0)
.判断 (等于 (localHeadData.type, #TYPE_BYTE))
    赋值 (paramLong, unpackReq.未知函数_67174939 ())
.判断 (等于 (localHeadData.type, #TYPE_SHORT))
    赋值 (paramLong, unpackReq.未知函数_67174940 ())
.判断 (等于 (localHeadData.type, #TYPE_INT))
    赋值 (paramLong, unpackReq.未知函数_67174941 ())
.判断 (等于 (localHeadData.type, #TYPE_LONG))
    赋值 (paramLong, unpackReq.未知函数_67174959 ())
.默认
     ' 调试输出 (“read int :error type mismatch”, localHeadData.type)
.判断结束
返回 (paramLong)


.子程序 ReadString, 文本型, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_len, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (t_val)
.如果真结束
ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.判断 (等于 (localHeadData.type, #TYPE_STRING1))
    赋值 (t_len, unpackReq.未知函数_67174939 ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.未知函数_67174953 (t_len), { 0 })))
.判断 (等于 (localHeadData.type, #TYPE_STRING4))
    赋值 (t_len, unpackReq.未知函数_67174941 ())
    赋值 (t_val, 编码_Utf8到Ansi (相加 (unpackReq.未知函数_67174953 (t_len), { 0 })))
.默认
    
.判断结束
返回 (t_val)

.子程序 ReadSimpleList, 字节集, , 
.参数 p_tag, 整数型, , tag

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 字节集, , , 
.局部变量 t_len, 整数型, , , 
.局部变量 t_type, 整数型, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (t_val)
.如果真结束

ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_SIMPLE_LIST))
    unpackReq.未知函数_67174939 ()
    赋值 (t_type, unpackReq.未知函数_67174939 ())
    .判断开始 (等于 (t_type, #TYPE_ZERO_TAG))
        返回 (t_val)
    .判断 (等于 (t_type, #TYPE_SHORT))
        赋值 (t_len, unpackReq.未知函数_67174940 ())
    .默认
        赋值 (t_len, unpackReq.未知函数_67174939 ())
    .判断结束
    赋值 (t_val, unpackReq.未知函数_67174953 (t_len))
    
.默认
    
.判断结束
返回 (t_val)


.子程序 ReadList, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 ret_arr, 文本型, 数组, 

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 


.如果真 (取反 (SkipToTag (p_tag)))
    返回 ()
.如果真结束
ReadHead (localHeadData)

.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.判断 (等于 (localHeadData.type, #TYPE_LIST))
    赋值 (t_count, ReadShort (0))
    .计次循环首 (t_count, i) ' 这里需要改改 具体看jceFormat
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        加入成员 (ret_arr, t_val)
    .计次循环尾 ()
.默认
    
.判断结束


.子程序 ReadType, 字节型, , 
.局部变量 localHeadData, HeadData, , , 

ReadHead (localHeadData)
返回 (localHeadData.type)

.子程序 ReadToTag, 字节型, , 返回type -1没找到
.参数 p_tag, 整数型, , 

.局部变量 localHeadData, HeadData, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 (-1)
.如果真结束
ReadHead (localHeadData)

返回 (localHeadData.type)


.子程序 skipToEnd, 空白型, , 
.局部变量 te, 文本型, , , 
.局部变量 localHeadData, HeadData, , , 
.局部变量 step, 整数型, , , 


.计次循环首 (100, )
    赋值 (te, 字节集到十六进制文本 (unpackReq.未知函数_67174954 ()))
    赋值 (step, ReadHead (localHeadData))
    赋值 (te, 字节集到十六进制文本 (unpackReq.未知函数_67174954 ()))
    .如果真 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (localHeadData.type, #TYPE_STRUCT_END))
        跳出循环 ()
    .如果真结束
    skipField (localHeadData.type)
.计次循环尾 ()

.子程序 ReadMap, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 p_val, JceMap, 数组, 

.局部变量 localHeadData, HeadData, , , 
.局部变量 t_val, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 t_map, JceMap, , , 

.如果真 (取反 (SkipToTag (p_tag)))
    返回 ()
.如果真结束

ReadHead (localHeadData)
.如果真 (不等于 (localHeadData.type, #TYPE_MAP))
    返回 ()
.如果真结束

ReadHead (localHeadData)
.判断开始 (等于 (localHeadData.type, #TYPE_ZERO_TAG))
    
.默认
    
    .如果 (等于 (localHeadData.type, #TYPE_SHORT))
        赋值 (t_count, unpackReq.未知函数_67174940 ())
    .否则
        赋值 (t_count, unpackReq.未知函数_67174939 ())
    .如果结束
    
    .计次循环首 (t_count, i)
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        赋值 (t_map.key_type, localHeadData.type)
        赋值 (t_map.key, 到字节集 (t_val))
        
        ReadHead (localHeadData)
        赋值 (t_val, ReadObj (localHeadData.type))
        赋值 (t_map.val_type, localHeadData.type)
        赋值 (t_map.val, 到字节集 (t_val))
        
        加入成员 (p_val, t_map)
    .计次循环尾 ()
.判断结束



.子程序 getAll, 字节集, , 返回剩余
返回 (unpackReq.未知函数_67174954 ())

.程序集 JceRead, , , 

.子程序 Read_RequestPacket, 空白型, , 
.参数 in, JceInputStream, , 
.参数 struct, JceStruct_RequestPacket, , 

赋值 (struct.iversion, in.ReadShort (1))
赋值 (struct.cPacketType, in.ReadShort (2))
赋值 (struct.iMessageType, in.ReadShort (3))
赋值 (struct.iRequestId, in.ReadInt (4))
赋值 (struct.sServantName, in.ReadString (5))
赋值 (struct.sFuncName, in.ReadString (6))
赋值 (struct.sBuffer, in.ReadSimpleList (7))
赋值 (struct.iTimeout, in.ReadInt (8))
重定义数组 (struct.context, 假, 0)
in.ReadMap (9, struct.context)
重定义数组 (struct.status, 假, 0)
in.ReadMap (10, struct.status)


.类模块 IpadQQ, , , 

.程序集变量 Tcp, 未知类型0x60002, , , 
.程序集变量 Tea, QQTEA, , , 
.程序集变量 qq, qq_information, , , 
.程序集变量 Device, Device_information, , , 
.程序集变量 Tlv, Tlv_, , , 
.程序集变量 IsToken_Login, 逻辑型, , , 
.程序集变量 t_CardData, CardData, , , 
.程序集变量 gUserSyncCookie, 字节集, , , 
.程序集变量 m_bin, 字节集, , , 
.程序集变量 last_error, 文本型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 Protobuf封装字节集, 字节集, , 
.参数 下标, 整数型, , 
.参数 被封装字节集, 字节集, , 

.局部变量 头, 整数型, , , 
.局部变量 返回字节集, 字节集, , , 
.局部变量 长度, 长整数型, , , 

赋值 (头, 位或 (左移 (下标, 3), 2))
赋值 (长度, 取字节集长度 (被封装字节集))
赋值 (返回字节集, 相加 (到字节集 (到字节 (头)), Protobuf生成整数部分 (长度), 被封装字节集))
返回 (返回字节集)

.子程序 Protobuf封装整数, 字节集, , 
.参数 下标, 整数型, , 
.参数 整数, 长整数型, , 

.局部变量 头, 整数型, , , 
.局部变量 返回字节集, 字节集, , , 

赋值 (头, 位或 (左移 (下标, 3), 0))
赋值 (返回字节集, Protobuf生成整数部分 (整数))
返回 (相加 (到字节集 (到字节 (头)), 返回字节集))

.子程序 Protobuf生成整数部分, 字节集, , 
.参数 整数, 长整数型, , 

.局部变量 余数, 长整数型, , , 
.局部变量 商数, 长整数型, , , 
.局部变量 返回字节集, 字节集, , , 

赋值 (返回字节集, {  })
赋值 (商数, 整数)
.计次循环首 (8, )
    .如果 (小于 (商数, 128))
        赋值 (返回字节集, 相加 (返回字节集, 到字节集 (到字节 (商数))))
        返回 (返回字节集)
    .否则
        赋值 (余数, 求余数 (商数, 128))
        赋值 (商数, 相除 (商数, 128))
        赋值 (返回字节集, 相加 (返回字节集, 到字节集 (到字节 (位或 (余数, 128)))))
    .如果结束
    
.计次循环尾 ()
返回 ({  })



.子程序 Protobuf到json, 文本型, , 
.参数 块数据, 字节集, , 
.参数 继承下标, 文本型, , 

.局部变量 数组, 字节集, , "0", 
.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 细分数组, 字节集, , "0", 
.局部变量 下标, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 匿名局部变量_1579, 空白型, , , 
.局部变量 当前数据, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 ia, 整数型, , , 
.局部变量 当前描述, 文本型, , , 
.局部变量 全部描述, 文本型, , "0", 
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (取字节集长度 (块数据), 0))
    返回 (“”)
.如果真结束
Protobuf分割成员 (块数据, 数组)
赋值 (ki, 取数组成员数 (数组))

.计次循环首 (ki, i)
    赋值 (当前描述, “”)
    .如果真 (等于 (取字节集长度 (数组 [i]), 0))
        到循环尾 ()
    .如果真结束
    Protobuf取下标和类型 (取字节集数据 (取字节集左边 (数组 [i], 1), #字节型, 1), 下标, 类型)
    .如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:[”, 删全部空 (字节集到十六进制文本 (数组 [i])), “]”))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    赋值 (当前数据, Protobuf取单个数据值 (数组 [i]))
    .如果真 (等于 (当前数据, {  }))
        赋值 (当前描述, 相加 (到文本 (下标), “:[]”))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    .如果真 (等于 (类型, 0))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, Protobuf解析整数 (当前数据)))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    赋值 (a, Protobuf分割成员 (当前数据, 细分数组))
    取数组成员数 (细分数组)
    .如果真 (等于 (a, 0))
        赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, #引号, 删全部空 (字节集到十六进制文本 (当前数据)), #引号))
        加入成员 (全部描述, 当前描述)
        到循环尾 ()
    .如果真结束
    
    赋值 (当前描述, 相加 (#引号, 继承下标, 到文本 (下标), #引号, “:”, Protobuf到json (当前数据, 相加 (继承下标, 到文本 (下标), “_”))))
    加入成员 (全部描述, 当前描述)
.计次循环尾 ()
赋值 (ki, 取数组成员数 (全部描述))
赋值 (返回文本, “”)
.计次循环首 (ki, i)
    .如果 (等于 (i, ki))
        赋值 (返回文本, 相加 (返回文本, 全部描述 [i]))
    .否则
        赋值 (返回文本, 相加 (返回文本, 全部描述 [i], “ , ”))
    .如果结束
    
.计次循环尾 ()
赋值 (返回文本, 相加 (“{”, 返回文本, “}”))
赋值 (返回文本, 删全部空 (返回文本))
返回 (返回文本)

.子程序 Protobuf分割成员, 整数型, , 
.参数 字节集, 字节集, , 
.参数 成员值, 字节集, 数组, 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 下标, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 当前块, 字节集, , , 
.局部变量 ii, 整数型, , , 
.局部变量 长度字节集, 字节集, , , 
.局部变量 aaa, 整数型, , , 

清除数组 (成员值)
赋值 (ki, 取字节集长度 (字节集))
赋值 (i, 1)
.判断循环首 (小于或等于 (i, ki))
    Protobuf取下标和类型 (字节集 [i], 下标, 类型)
    .如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
        赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
        加入成员 (成员值, 当前块)
        返回 (0)
    .如果真结束
    
    .如果真 (或者 (大于 (下标, 16), 小于 (下标, 1)))
        赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
        加入成员 (成员值, 当前块)
        返回 (0)
    .如果真结束
    
    
    .如果真 (等于 (类型, 2))
        .如果真 (大于或等于 (相加 (ii, 1), ki))
            赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
            加入成员 (成员值, 当前块)
            返回 (0)
        .如果真结束
        
        赋值 (aaa, i)
        赋值 (长度字节集, {  })
        .循环判断首 ()
            赋值 (aaa, 相加 (aaa, 1))
            
            .如果真 (大于 (aaa, ki))
                赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
                加入成员 (成员值, 当前块)
                返回 (0)
            .如果真结束
            赋值 (长度字节集, 相加 (长度字节集, 取字节集中间 (字节集, aaa, 1)))
            
        .循环判断尾 (大于或等于 (字节集 [aaa], 128))
        
        赋值 (长度, 到整数 (Protobuf解析整数 (长度字节集)))
        
        赋值 (当前块, 取字节集中间 (字节集, i, 相加 (长度, 取字节集长度 (长度字节集), 1)))
        加入成员 (成员值, 当前块)
        赋值 (i, 相加 (i, 长度, 1, 取字节集长度 (长度字节集)))
        到循环尾 ()
    .如果真结束
    
    .如果真 (等于 (类型, 0))
        赋值 (ii, i)
        .循环判断首 ()
            赋值 (ii, 相加 (ii, 1))
            .如果真 (大于 (ii, ki))
                跳出循环 ()
            .如果真结束
            
        .循环判断尾 (大于或等于 (字节集 [ii], 128))
        赋值 (当前块, 取字节集中间 (字节集, i, 相加 (相减 (ii, i), 1)))
        加入成员 (成员值, 当前块)
        赋值 (i, 相加 (ii, 1))
        到循环尾 ()
    .如果真结束
    
    
.判断循环尾 ()
返回 (取数组成员数 (成员值))

.子程序 Protobuf取单个数据值, 字节集, , 
.参数 字节集, 字节集, , 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 下标, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 当前块, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 长度字节集, 字节集, , , 
.局部变量 aaa, 整数型, , , 

赋值 (ki, 取字节集长度 (字节集))
.如果真 (等于 (ki, 0))
    返回 ({  })
.如果真结束
Protobuf取下标和类型 (字节集 [1], 下标, 类型)
.如果真 (并且 (不等于 (类型, 0), 不等于 (类型, 2)))
    返回 (字节集)
.如果真结束

.如果真 (或者 (大于 (下标, 16), 小于 (下标, 1)))
    返回 (字节集)
.如果真结束


.如果真 (等于 (类型, 2))
    .如果真 (小于 (ki, 2))
        返回 (字节集)
    .如果真结束
    
    赋值 (aaa, 1)
    赋值 (长度字节集, {  })
    .循环判断首 ()
        赋值 (aaa, 相加 (aaa, 1))
        
        .如果真 (大于 (aaa, ki))
            赋值 (当前块, 取字节集右边 (字节集, 相加 (相减 (ki, i), 1)))
            返回 (当前块)
        .如果真结束
        赋值 (长度字节集, 相加 (长度字节集, 取字节集中间 (字节集, aaa, 1)))
    .循环判断尾 (大于或等于 (字节集 [aaa], 128))
    
    赋值 (长度, 到整数 (Protobuf解析整数 (长度字节集)))
    
    .如果真 (大于 (相加 (长度, 2), ki))
        赋值 (长度, 相减 (ki, 2))
    .如果真结束
    赋值 (当前块, 取字节集中间 (字节集, 相加 (1, 取字节集长度 (长度字节集), 1), 长度))
    返回 (当前块)
.如果真结束

.如果真 (等于 (类型, 0))
    .如果真 (小于 (ki, 2))
        返回 ({  })
    .如果真结束
    赋值 (i, 1)
    .循环判断首 ()
        赋值 (i, 相加 (i, 1))
        .如果真 (大于 (i, ki))
            跳出循环 ()
        .如果真结束
        赋值 (长度, i)
    .循环判断尾 (大于或等于 (字节集 [i], 128))
    赋值 (当前块, 取字节集中间 (字节集, 2, 长度))
    返回 (当前块)
.如果真结束

返回 ({  })

.子程序 Protobuf取下标和类型, 空白型, , 
.参数 标志字节, 字节型, , 
.参数 下标, 整数型, 参考, 
.参数 类型, 整数型, 参考, 

赋值 (下标, 右移 (标志字节, 3))
赋值 (类型, 位与 (标志字节, 7))



.子程序 Protobuf解析整数, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ki, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 新字节集, 字节集, , , 
.局部变量 位数, 长整数型, , , 

赋值 (ki, 取字节集长度 (字节集))
.计次循环首 (ki, i)
    .如果真 (大于 (字节集 [i], 128))
        赋值 (字节集 [i], 位与 (字节集 [i], 127))
    .如果真结束
    
.计次循环尾 ()
赋值 (字节集, Flip (字节集))
赋值 (新字节集, 取空白字节集 (ki))
.计次循环首 (ki, i)
    赋值 (位数, 相加 (相乘 (位数, 128), 字节集 [i]))
.计次循环尾 ()
返回 (到文本 (位数))


.子程序 QQ_初始化, 空白型, , 
.参数 QQ账号, 文本型, , 
.参数 QQ密码, 文本型, , 

.局部变量 luin, 长整数型, , , 
.局部变量 iuin, 整数型, , , 

赋值 (qq.Account, QQ账号)
赋值 (luin, 到整数 (QQ账号))
.判断开始 (大于 (luin, 2147483647))
    赋值 (qq.user, 取字节集右边 (Flip (到字节集 (luin)), 4))
.默认
    赋值 (iuin, luin)
    赋值 (qq.user, Flip (到字节集 (iuin)))
.判断结束
赋值 (qq.QQ, 到长整数 (QQ账号))
赋值 (qq.caption, 到字节集 (到文本 (QQ账号)))
赋值 (qq.pass, QQ密码)
赋值 (qq.md5, HashMD5_ (到字节集 (QQ密码)))
赋值 (qq.md52, HashMD5_ (相加 (qq.md5, { 0, 0, 0, 0 }, qq.user)))
赋值 (qq.ssoSeq_, Int2Bin (取随机数 (10125140, 10127140)))

赋值 (Device.imei, “CE4DE5DF-E564-4595-941E-E83CC7D6C574”)
赋值 (Device.ver, 到字节集 (“|00000|I6.0.0.244”))
赋值 (Device.appId, 537045915)
赋值 (Device.appId2, 537032245)
赋值 (Device.os_type, “android”)
赋值 (Device.os_version, “4.4.2”)
赋值 (Device.deviceModel, “huawei”)
赋值 (Device.device, “MT7-TL10”)
赋值 (Device._apk_v, “3.1.0”)
赋值 (Device.imei_, GetRandomBin (16))

赋值 (qq.Token002C, {  })
赋值 (qq.Token004C, {  })
赋值 (qq.sessionKey, {  })
赋值 (qq.key, 取空白字节集 (16))

.子程序 Un_pack, 字节集, , 
.参数 bin, 字节集, , 
.参数 bool, 逻辑型, 可空, 

.局部变量 pos1, 整数型, , , 

赋值 (pos1, 寻找字节集 (bin, qq.caption, ))
赋值 (bin, 取字节集右边 (bin, 相加 (相减 (取字节集长度 (bin), pos1, 取字节集长度 (qq.caption)), 1)))
.如果真 (bool)
    赋值 (pos1, 寻找字节集 (bin, qq.caption, ))
    赋值 (bin, 取字节集右边 (bin, 相加 (相减 (取字节集长度 (bin), pos1, 取字节集长度 (qq.caption)), 1)))
.如果真结束
返回 (bin)

.子程序 Un_Pack_Login, 逻辑型, , 
.参数 bin, 字节集, , 

.局部变量 len, 整数型, , , 
.局部变量 unPack, _Unpack, , , 
.局部变量 _0030, 字节集, , , 

赋值 (bin, Un_Pack_Login_Pc (bin))
.如果真 (等于 (取字节集长度 (bin), 0))
    返回 (假)
.如果真结束
unPack.SetData (bin)
unPack.GetShort ()
unPack.GetByte ()
unPack.GetInt ()
赋值 (len, unPack.GetShort ())
赋值 (bin, unPack.GetBin (len))

赋值 (bin, Tea.解密 (bin, qq.TGTKey))
Un_Tlv (bin)
赋值 (qq.key, qq.sessionKey)
调试输出 (“sessionKey”, 字节集到十六进制文本 (qq.sessionKey))
调试输出 (“skey”, 到文本 (qq.skey))
调试输出 (“sid”, 到文本 (qq.sid))
调试输出 (“stweb”, 删全部空 (qq.stweb))
调试输出 (“vkey”, 到文本 (qq.vkey))
赋值 (qq.loginState, #login_state_success)
返回 (真)

.子程序 Un_Tlv, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 unPack, _Unpack, , , 
.局部变量 tlv_count, 整数型, , , 
.局部变量 tlv_cmd, 字节集, , , 
.局部变量 tlv_len, 整数型, , , 

unPack.SetData (bin)
赋值 (tlv_count, unPack.GetShort ())
.计次循环首 (tlv_count, )
    赋值 (tlv_cmd, unPack.GetBin (2))
    赋值 (tlv_len, unPack.GetShort ())
    tlv_get (删尾空 (Bin2Hex (tlv_cmd)), unPack.GetBin (tlv_len))
.计次循环尾 ()

.子程序 tlv_get, 空白型, , 
.参数 tlv_cmd, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 unPack, _Unpack, , , 
.局部变量 len, 整数型, , , 
.局部变量 face, 短整数型, , , 
.局部变量 age, 字节型, , , 
.局部变量 gander, 字节型, , , 
.局部变量 i, 整数型, , , 

unPack.SetData (bin)
 ' 调试输出 (tlv_cmd, 字节集到十六进制文本 (bin))
.判断开始 (等于 (tlv_cmd, “01 0A”))
    赋值 (qq.Token004C, bin)
.判断 (等于 (tlv_cmd, “01 03”))
    赋值 (qq.stweb, 删全部空 (字节集到十六进制文本 (bin)))
.判断 (等于 (tlv_cmd, “01 1A”))
    赋值 (face, unPack.GetShort ())
    赋值 (age, unPack.GetByte ())
    赋值 (gander, unPack.GetByte ())
    赋值 (len, unPack.GetByte ())
    赋值 (qq.nick, 编码_Utf8到Ansi (相加 (unPack.GetBin (len), { 0 })))
    输出调试文本 (相加 (“昵称：”, qq.nick, “ face：”, 到文本 (face), “ age：”, 到文本 (age), “ gander：”, 到文本 (gander)))
.判断 (等于 (tlv_cmd, “01 20”))
    赋值 (qq.skey, bin)
.判断 (等于 (tlv_cmd, “01 36”))
    赋值 (qq.vkey, bin)
.判断 (等于 (tlv_cmd, “03 05”))
    赋值 (qq.sessionKey, bin)
.判断 (等于 (tlv_cmd, “01 43”))
    赋值 (qq.Token002C, bin)
.判断 (等于 (tlv_cmd, “01 64”))
    赋值 (qq.sid, bin)
.判断 (等于 (tlv_cmd, “01 05”))
    赋值 (len, unPack.GetShort ())
    赋值 (qq.VieryToken1, unPack.GetBin (len))
    赋值 (len, unPack.GetShort ())
    赋值 (qq.Viery, unPack.GetBin (len))
.判断 (等于 (tlv_cmd, “01 04”))
    赋值 (qq.VieryToken2, bin)
.默认
    
.判断结束


.子程序 Un_Pack_Login_Pc, 字节集, , 
.参数 bin, 字节集, , 

.局部变量 unPack, _Unpack, , , 
.局部变量 len, 整数型, , , 
.局部变量 result, 整数型, , , 

unPack.SetData (bin)
赋值 (len, unPack.GetInt ())
赋值 (bin, unPack.GetAll ())

unPack.SetData (bin)
unPack.GetByte ()
赋值 (len, unPack.GetShort ())
unPack.GetBin (10)
unPack.GetBin (2)
赋值 (result, unPack.GetByte ())

赋值 (bin, unPack.GetBin (相减 (len, 16, 1)))
赋值 (bin, Tea.解密 (bin, qq.shareKey))

.判断开始 (不等于 (result, 0))
    .判断开始 (等于 (result, 2)) ' 需要验证码
        Un_Pack_VieryImage (bin)
        赋值 (last_error, “需要输入验证码”)
        赋值 (qq.loginState, #login_state_veriy)
        返回 ({  })
    .默认
        
    .判断结束
    
    Un_Pack_ErrMsg (bin)
    赋值 (bin, {  })
    赋值 (qq.loginState, #login_state_logining)
.默认
    
.判断结束
返回 (bin)

.子程序 Un_Pack_ErrMsg, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 title, 文本型, , , 
.局部变量 message, 文本型, , , 
.局部变量 type, 整数型, , , 
.局部变量 unPack, _Unpack, , , 

unPack.SetData (bin)
unPack.GetShort ()
unPack.GetByte ()
unPack.GetInt ()
unPack.GetShort ()
赋值 (type, unPack.GetInt ())
赋值 (title, 编码_Utf8到Ansi (相加 (unPack.GetBin (unPack.GetShort ()), { 0 })))
赋值 (message, 编码_Utf8到Ansi (相加 (unPack.GetBin (unPack.GetShort ()), { 0 })))
赋值 (last_error, 相加 (title, “:”, message))
调试输出 (“Un_Pack_ErrMsg”, last_error)

.子程序 Un_Pack_VieryImage, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 unpack, _Unpack, , , 
.局部变量 i, 字节型, , , 

unpack.SetData (bin)
unpack.GetBin (3)
Un_Tlv (unpack.GetAll ())

.子程序 Un_Pack_RequestPacket, 空白型, , 
.参数 bin, 字节集, , 
.参数 CardData, CardData, 可空, 

.局部变量 req, JceStruct_RequestPacket, , , 
.局部变量 in, JceInputStream, , , 

in.wrap (bin)
Read_RequestPacket (in, req)
.如果真 (等于 (取字节集长度 (req.sBuffer), 0))
    返回 ()
.如果真结束
in.wrap (req.sBuffer)
Un_Pack_Map (in, CardData)

.子程序 Un_Pack_Map, 空白型, , 
.参数 in, JceInputStream, 参考, 
.参数 CardData, CardData, 可空, 

.局部变量 t_type, 字节型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 t_key, 文本型, , , 
.局部变量 t_bin, 字节集, , , 
.局部变量 t_is_firends_req, 逻辑型, , , 
.局部变量 t_is_groups_req, 逻辑型, , , 
.局部变量 j_count, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 t_verify_type, 整数型, , , 
.局部变量 question, 文本型, , , 
.局部变量 friendUin, 长整数型, , , 
.局部变量 t_suc, 逻辑型, , , 
.局部变量 t_msg, 文本型, , , 

赋值 (t_type, in.ReadType ())
.如果真 (不等于 (t_type, #TYPE_MAP))
    返回 ()
.如果真结束
赋值 (t_count, in.ReadShort (0))

.计次循环首 (t_count, i)
    赋值 (t_key, in.ReadString (0))
    .判断开始 (等于 (t_key, “RespHead”))
        赋值 (t_type, in.ReadType ())
        .如果真 (等于 (t_type, #TYPE_MAP))
            赋值 (j_count, in.ReadShort (0))
            .计次循环首 (j_count, j)
                赋值 (t_key, in.ReadString (0))
                赋值 (t_bin, in.ReadSimpleList (1))
                .判断开始 (等于 (t_key, “SummaryCard.RespHead”))
                    
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
        .如果真结束
        
    .判断 (等于 (t_key, “RespSummaryCard”)) ' 查看名片返回
        赋值 (t_type, in.ReadType ())
        .如果真 (等于 (t_type, #TYPE_MAP))
            赋值 (j_count, in.ReadShort (0))
            .计次循环首 (j_count, j)
                赋值 (t_key, in.ReadString (0))
                赋值 (t_bin, in.ReadSimpleList (1))
                .判断开始 (等于 (t_key, “SummaryCard.RespSummaryCard”))
                    Read_SummaryCard_RespHead (t_bin)
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
        .如果真结束
        
    .默认
        
        调试输出 (“未处理 key”, t_key)
    .判断结束
    
    
.计次循环尾 ()

.子程序 Fun_Send, 字节集, , 
.参数 bin, 字节集, , 
.参数 wait, 整数型, 可空, 

.局部变量 suc, 逻辑型, , , 

Tcp.未知支持库函数_11 (bin, -1)
赋值 (bin, Tcp.未知支持库函数_10 (wait, suc))
.如果真 (等于 (suc, 假))
    赋值 (bin, {  })
.如果真结束
返回 (bin)

.子程序 Fun_recv, 空白型, , 
.参数 DATA, 字节集, , 

.局部变量 bin, 字节集, , , 
.局部变量 bool, 逻辑型, , , 
.局部变量 unPack, _Unpack, , , 
.局部变量 sso_seq, 整数型, , , 
.局部变量 len, 整数型, , , 
.局部变量 serviceCmd, 文本型, , , 
.局部变量 head_len, 整数型, , , 
.局部变量 body_bin, 字节集, , , 
.局部变量 suc, 逻辑型, , , 
.局部变量 bin_len, 整数型, , , 

 ' 调试输出 (“接收到服务器返回数据=========”, 字节集到十六进制文本 (DATA), 字节集到十六进制文本 (qq.TGTKey))
unPack.SetData (DATA)
赋值 (bin_len, unPack.GetInt ())

.如果真 (小于 (取字节集长度 (DATA), bin_len))
    赋值 (DATA, 相加 (DATA, Tcp.未知支持库函数_10 (2000, suc)))
.如果真结束

赋值 (bin, Un_pack (DATA))
赋值 (bin, Tea.解密 (bin, qq.key))
 ' 调试输出 (字节集到十六进制文本 (bin))
 ' ---------------------------------------
赋值 (len, 取字节集长度 (bin))
unPack.SetData (bin)

赋值 (head_len, unPack.GetInt ())
赋值 (bin, unPack.GetBin (相减 (head_len, 4)))
赋值 (body_bin, unPack.GetAll ())

unPack.SetData (bin)
赋值 (sso_seq, unPack.GetInt ())
.判断开始 (等于 (unPack.GetBin (4), { 0, 0, 0, 0 }))
    unPack.GetBin (4)
.默认
    unPack.GetBin (相减 (unPack.GetInt (), 4))
.判断结束

赋值 (serviceCmd, 到文本 (unPack.GetBin (相减 (unPack.GetInt (), 4))))

.判断开始 (等于 (serviceCmd, “wtlogin.login”))
    Un_Pack_Login (body_bin)
.判断 (等于 (serviceCmd, “PushService.register”))
    .如果真 (等于 (IsToken_Login, 真))
        赋值 (qq.loginState, #login_state_success)
    .如果真结束
    
.默认
    Fun_Recv_GET (sso_seq, serviceCmd, body_bin)
.判断结束


.子程序 Fun_Recv_GET, 空白型, , 命令判断跳转
.参数 sso_seq_, 整数型, , 
.参数 serviceCmd, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 unPack, _Unpack, , , 
.局部变量 len, 整数型, , , 
.局部变量 t_bin, 字节集, , , 
.局部变量 body_bin, 字节集, , , 
.局部变量 body_len, 整数型, , , 
.局部变量 app文本, 文本型, , , 

unPack.SetData (bin)
赋值 (len, unPack.GetInt ())
赋值 (bin, unPack.GetBin (len))
调试输出 (“接收命令：====”, serviceCmd)
.判断开始 (等于 (serviceCmd, “StatSvc.register”))
    .如果真 (等于 (IsToken_Login, 真))
        赋值 (qq.loginState, #login_state_success)
    .如果真结束
    
.判断 (等于 (serviceCmd, “ConfigPushSvc.PushReq”))
    
.判断 (等于 (serviceCmd, “OidbSvc.0x7a2_0”))
    
.判断 (等于 (serviceCmd, “PushService.register”))
    
.判断 (等于 (serviceCmd, “EncounterSvc.ReqGetEncounterV2”))
    调试输出 (相加 (到文本 (取现行时间 ()), “|附近人接口初始化完成”))
.判断 (等于 (serviceCmd, “ConfigPushSvc.PushDomain”))
    
.判断 (等于 (serviceCmd, “SummaryCard.ReqSummaryCard”))
    Un_Pack_RequestPacket (bin)
.判断 (等于 (serviceCmd, “EncounterSvc.ReqGetEncounter”))
    调试输出 (相加 (到文本 (取现行时间 ()), “|附近人接口初始化完成”))
.判断 (等于 (serviceCmd, “MessageSvc.PushNotify”))
    
.判断 (等于 (serviceCmd, “MessageSvc.PbGetMsg”))
    
.判断 (等于 (serviceCmd, “StatSvc.ReqMSFOffline”))
    
.判断 (等于 (serviceCmd, “VisitorSvc.ReqFavorite”))
    
.默认
    调试输出 (“未处理数据”, serviceCmd, 字节集到十六进制文本 (bin))
    返回 ()
.判断结束


.子程序 Read_SummaryCard_RespHead, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 in, JceInputStream, 静态, , 
.局部变量 t_type, 整数型, , , 
.局部变量 t_name, 文本型, , , 
.局部变量 t_num, 整数型, , , 
.局部变量 t_arr, 文本型, , "0", 
.局部变量 t_qq, 长整数型, , , 
.局部变量 t_jce, JceMap, , "0", 
.局部变量 t_lable, JceInputStream, , , 
.局部变量 t_un_pack, _Unpack, , , 
.局部变量 t_str, 文本型, , , 

in.wrap (bin)
赋值 (t_type, in.ReadType ())
.如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
    
    in.ReadInt (0)
    in.ReadInt (1)
    in.ReadInt (2)
    赋值 (t_name, in.ReadString (3))
    in.ReadString (4)
    in.ReadInt (5)
    in.ReadString (6)
    in.ReadString (7)
    in.ReadString (8)
    in.ReadString (9)
    in.ReadString (10)
    in.ReadString (11)
    in.ReadString (12)
    in.ReadInt (13)
    in.ReadString (14)
    
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadList (0, t_arr)
    .如果真结束
    in.skipToEnd ()
    赋值 (t_num, in.ReadLong (16))
    in.ReadInt (17)
    in.ReadInt (18)
    赋值 (t_str, in.ReadString (19))
    in.ReadString (20)
    in.ReadString (21)
    in.ReadInt (22)
    赋值 (t_qq, in.ReadLong (23))
    
    赋值 (t_CardData., t_qq)
    赋值 (t_CardData., t_name)
    赋值 (t_CardData., t_num)
    
     ' 调试输出 (“QQ：” ＋ 到文本 (t_CardData.qq) ＋ “  名称：” ＋ t_CardData.name ＋ “   赞：” ＋ 到文本 (t_CardData.zanNum))
    in.ReadInt (24)
    in.ReadInt (25)
    in.ReadList (26, t_arr)
    in.ReadSimpleList (27)
    in.ReadString (28)
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadMap (29, t_jce)
    .如果真结束
    in.skipToEnd ()
    in.ReadString (30)
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadInt (0)
        in.ReadInt (1)
        in.ReadInt (2)
        in.ReadInt (3)
    .如果真结束
    in.skipToEnd ()
    in.ReadSimpleList (32)
    in.ReadLong (33)
    in.ReadSimpleList (34)
    in.ReadInt (35)
    in.ReadInt (36)
    赋值 (t_str, in.ReadString (37))
    in.ReadInt (38)
    in.ReadInt (39)
    in.ReadInt (40)
    in.ReadSimpleList (41)
     ' ----------------------------
    in.ReadString (42)
    in.ReadString (43)
    赋值 (t_type, in.ReadShort (0))
    .如果真 (等于 (t_type, 12))
        in.ReadMap (44, t_jce)
    .如果真结束
    in.skipToEnd ()
    in.ReadInt (45)
    in.ReadList (46, t_arr)
    in.ReadString (47)
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadString (0)
        in.ReadInt (1)
        in.ReadInt (2)
        in.ReadString (3) ' ......
    .如果真结束
    in.skipToEnd ()
    in.ReadLong (49)
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadInt (0) ' ......
    .如果真结束
    in.skipToEnd ()
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadInt (0) ' ......
    .如果真结束
    in.skipToEnd ()
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadInt (0) ' ......
    .如果真结束
    in.skipToEnd ()
    赋值 (t_type, in.ReadType ())
    .如果真 (等于 (t_type, #TYPE_STRUCT_BEGIN))
        in.ReadInt (0) ' ......
    .如果真结束
    in.skipToEnd ()
    赋值 (t_CardData., in.ReadSimpleList (54))
    调试输出 (“ChatQQ：========”, t_CardData.qq, “Chat昵称:========”, t_CardData.name, “ChatSig：========”, 字节集到十六进制文本 (t_CardData.TmpChatSig))
.如果真结束


.子程序 MakeLoginHead, 字节集, , 
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetBin (qq.ssoSeq_)
pack.SetInt (Device.appId)
pack.SetInt (Device.appId2)
pack.SetHex (“01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04”)
pack.SetInt (相加 (取文本长度 (ServiceCmd), 4))
pack.SetStr (ServiceCmd)
pack.SetHex (“00 00 00 08”)
pack.SetBin (GetRandomBin (4))
pack.SetInt (相加 (取文本长度 (Device.imei), 4))
pack.SetStr (Device.imei)
pack.SetHex (“00 00 00 04”)
pack.SetShort (相加 (取字节集长度 (Device.ver), 2))
pack.SetBin (Device.ver)
赋值 (bin_head, pack.GetAll ())

pack.Empty ()
pack.SetInt (相加 (取字节集长度 (bin_head), 4))
pack.SetBin (bin_head)
赋值 (bin_head, pack.GetAll ())

 ' ----------------------------------------------------------上面为头部

pack.Empty ()
pack.SetHex (“1F 41 08 10 00 00”)
pack.SetBin (qq.user)
pack.SetHex (“03 07 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01”)
pack.SetBin (GetRandomBin (16))
pack.SetHex (“01 02 00 19”)
pack.SetBin (qq.pub_key)
pack.SetBin (DATA)
pack.SetHex (“03”)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“02”)
pack.SetShort (相加 (取字节集长度 (bin), 3))
pack.SetBin (bin)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetBin (bin_head)
pack.SetInt (相加 (取字节集长度 (bin), 4))
pack.SetBin (bin)
赋值 (bin, Tea.加密 (pack.GetAll (), qq.key))
返回 (bin)

.子程序 MakePackHead, 字节集, , 组功能包头
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetBin (qq.ssoSeq_)
pack.SetInt (Device.appId)
pack.SetInt (Device.appId2)
pack.SetHex (“01 00 00 00 00 00 00 00 00 00 00 00”)
pack.SetInt (相加 (取字节集长度 (qq.Token004C), 4))
pack.SetBin (qq.Token004C)
pack.SetInt (相加 (取文本长度 (ServiceCmd), 4))
pack.SetStr (ServiceCmd)
pack.SetHex (“00 00 00 08”)
pack.SetBin (GetRandomBin (4))
pack.SetInt (相加 (取文本长度 (Device.imei), 4))
pack.SetStr (Device.imei)
pack.SetHex (“00 00 00 04”)
pack.SetShort (相加 (取字节集长度 (Device.ver), 2))
pack.SetBin (Device.ver)
赋值 (bin_head, pack.GetAll ())

pack.Empty ()
pack.SetInt (相加 (取字节集长度 (bin_head), 4))
pack.SetBin (bin_head)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetBin (bin)
pack.SetInt (相加 (取字节集长度 (DATA), 4))
pack.SetBin (DATA)
赋值 (bin, Tea.加密 (pack.GetAll (), qq.key))
返回 (bin)

.子程序 MakePackHeadNoToken, 字节集, , 组功能包头
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010809, , , 

pack.未知函数_67176458 ()
pack.未知函数_67176459 (.)
pack.未知函数_67176460 (.)
pack.未知函数_67176460 (.)
pack.SetHex (“01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04”)
pack.未知函数_67176460 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67176462 (ServiceCmd)
pack.未知函数_67176461 (“00 00 00 08”)
pack.未知函数_67176459 (未知函数_67176463 (4))
pack.未知函数_67176460 (相加 (取文本长度 (.), 4))
pack.未知函数_67176462 (.)
pack.未知函数_67176461 (“00 00 00 04”)
pack.未知函数_67176464 (相加 (取字节集长度 (.), 2))
pack.未知函数_67176459 (.)
赋值 (bin_head, pack.未知函数_67176465 ())

pack.未知函数_67176458 ()
pack.未知函数_67176460 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67176459 (bin_head)
赋值 (bin, pack.未知函数_67176465 ())

pack.未知函数_67176458 ()
pack.未知函数_67176459 (bin)
pack.未知函数_67176460 (相加 (取字节集长度 (DATA), 4))
pack.未知函数_67176459 (DATA)
赋值 (bin, pack.未知函数_67176465 ().未知函数_67176466 (.))
返回 (bin)

.子程序 Pack, 字节集, , 组包头
.参数 DATA, 字节集, , 
.参数 Type, 整数型, , 1 = 登录使用     2 = 上线（带002C）

.局部变量 bin, 字节集, , , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
.判断开始 (等于 (Type, 1))
    pack.SetHex (“00 00 00 08 02 00 00 00 04”)
.判断 (等于 (Type, 2))
    pack.SetHex (“00 00 00 08 01”)
    pack.SetInt (相加 (取字节集长度 (qq.Token002C), 4))
    pack.SetBin (qq.Token002C)
.判断 (等于 (3))
    “00 00 00 0B 01 00 01 57 55”.未知函数_67176542 ()
.默认
    
.判断结束

pack.SetHex (“00 00 00”)
pack.SetShort (相加 (取字节集长度 (qq.caption), 4))
pack.SetBin (qq.caption)
pack.SetBin (DATA)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetInt (相加 (取字节集长度 (bin), 4))
pack.SetBin (bin)
赋值 (bin, pack.GetAll ())

 ' 调试输出 (“Pack:======”, 字节集到十六进制文本 (bin))

返回 (bin)

.子程序 Pack_Login, 字节集, , 组登录包
.局部变量 pack, _Pack, , , 
.局部变量 bin, 字节集, , , 
.局部变量 a, 字节集, , , 

赋值 (qq.shareKey, 十六进制文本到字节集 (删全部空 (#share_key1)))
赋值 (qq.pub_key, 十六进制文本到字节集 (删全部空 (#publickey1)))

赋值 (qq.ssoSeq_, Int2Bin (取随机数 (75602, 78663)))
赋值 (qq.TGTKey, GetRandomBin (16))
赋值 (qq.time, Flip (取字节集左边 (到字节集 (TimeStamp ()), 4)))
赋值 (qq.randKey, GetRandomBin (16))


pack.Empty ()
pack.SetHex (“00 09”)
pack.SetShort (16) ' Tlv数量
pack.SetBin (Tlv.tlv108 ())
pack.SetBin (Tlv.tlv100 (Device.appId))
pack.SetBin (Tlv.tlv107 ())
pack.SetBin (Tlv.tlv116 ())
pack.SetBin (Tlv.tlv166 ())
pack.SetBin (Tlv.tlv142 ())
pack.SetBin (Tlv.tlv16B ())
pack.SetBin (Tlv.tlv16E ())
pack.SetBin (Tlv.tlv147 ())
pack.SetBin (Tlv.tlv144 (qq.TGTKey, Tlv.tlv128 (Device.imei_), Tlv.tlv124 (), Tlv.tlv16B ()))
pack.SetBin (Tlv.tlv145 (Device.imei_))
pack.SetBin (Tlv.tlv018 (qq.user))
pack.SetBin (Tlv.tlv141 ())
pack.SetBin (Tlv.tlv106 (qq.user, qq.md5, qq.md52, qq.TGTKey, Device.imei_, qq.time, Device.appId))
pack.SetBin (Tlv.tlv190 (Device.imei_))
pack.SetBin (Tlv.tlv191 ())
赋值 (bin, MakeLoginHead (Tea.加密 (pack.GetAll (), qq.shareKey), “wtlogin.login”))

返回 (Pack (bin, 1))

.子程序 Pack_OidbSvc_0x7a2_0, 字节集, , 
.局部变量 pack, _Pack, , , 
.局部变量 bin, 字节集, , , 

pack.Empty ()
pack.SetHex (“08 A2 0F 10 00”)
赋值 (bin, MakePackHead (pack.GetAll (), “OidbSvc.0x7a2_0”))
返回 (Pack (bin, 2))

.子程序 Pack_StatSvc_SvcReqRegister, 字节集, , 
.局部变量 pack, 未知类型0x4901090B, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Out, JceOutputStream, , , 

Out.clear ()
Out.WriteLong (qq.QQ, 0)
Out.WriteInt (1, 1)
Out.WriteInt (0, 2)
Out.WriteStringByte (“”, 3)
Out.WriteInt (11, 4)
Out.WriteInt (0, 5)
Out.WriteInt (1, 6)
Out.WriteInt (1, 7)
Out.WriteInt (0, 8)
Out.WriteInt (0, 9)
Out.WriteInt (0, 10)
Out.WriteInt (0, 11)
Out.WriteInt (0, 12)
Out.WriteStringByte (“6.0.0.244”, 13)
Out.WriteInt (0, 14)
Out.WriteSimpleList ({  }, 15)
Out.WriteSimpleList ({  }, 16)
Out.WriteInt (2052, 17)
Out.WriteInt (0, 18)
Out.WriteStringByte (“”, 19)
Out.WriteStringByte (“”, 20)
Out.WriteStringByte (“”, 21)
Out.WriteInt (1, 22)
Out.WriteInt (0, 23)
赋值 (Bin, Out.toByteArray ())

pack.Empty ()
pack.SetHex (“0A”)
pack.SetBin (Bin)
pack.SetHex (“0B”)
赋值 (Bin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“08 00 01 06 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 18 00 01 06 18 51 51 53 65 72 76 69 63 65 2E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 1D 00”)
pack.SetShort (取字节集长度 (Bin))
pack.SetBin (Bin)
赋值 (Bin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“10 02 2C 3C 42 1C D9 2F B9 56 07 53 74 61 74 53 76 63 66 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 7D 00”)
pack.SetShort (取字节集长度 (Bin))
pack.SetBin (Bin)
pack.SetHex (“8C 98 0C A8 0C”)

 ' 调试输出 (字节集到十六进制文本 (pack.GetAll ()))
赋值 (Bin, MakePackHead (pack.GetAll (), “PushService.register”))
返回 (Pack (Bin, 2))

.子程序 Pack_MessageSvc_PbGetMsg, 字节集, , 取回消息
.局部变量 pack, 未知类型0x4901083A, , , 
.局部变量 bin, 字节集, , , 

pack.未知函数_67176509 ()
pack.SetHex (“08 00 12 1E 08 BC 97 A9 B9 05 10 BC 97 A9 B9 05 28 8A C2 97 95 02 48 E9 CC 9D 99 01 58 B6 A3 CA F0 07 18 00 20 14 28 03 30 01 38 01”)
赋值 (bin, MakePackHead (pack.GetAll (), “MessageSvc.PbGetMsg”))
返回 (Pack (bin, 2))

.子程序 Pack_VerificationCode, 字节集, , 打包验证码
.参数 Code, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 pack, 未知类型0x490107CC, , , 

pack.未知函数_67176397 ()
pack.未知函数_67176398 (“00 02”)
pack.SetHex (“00 03”)
pack.未知函数_67176399 (.未知函数_67176402 (.))
pack.SetBin (Tlv.tlv2 (Code, qq.VieryToken1))
pack.未知函数_67176399 (未知函数_67176403 ())
赋值 (bin, pack.未知函数_67176405 ().未知函数_67176404 (.))

pack.未知函数_67176397 ()
pack.SetHex (“1F 41 08 10 00 00”)
pack.未知函数_67176399 (.)
pack.SetHex (“03 07 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01”)
pack.未知函数_67176399 (未知函数_67176406 (16))
pack.未知函数_67176398 (“01 02 00 19”)
pack.未知函数_67176399 (.)
pack.未知函数_67176399 (bin)
pack.未知函数_67176398 (“03”)
赋值 (bin, pack.未知函数_67176405 ())

pack.未知函数_67176397 ()
pack.未知函数_67176398 (“02”)
pack.未知函数_67176407 (相加 (取字节集长度 (bin), 3))
pack.未知函数_67176399 (bin)
赋值 (bin, pack.未知函数_67176405 ())

赋值 (bin, MakePackHeadNoToken (pack.GetAll (), “wtlogin.login”))
返回 (Pack (bin, 1))

.子程序 Pack_EncounterSvc_ReqGetEncounter, 字节集, , 
.参数 纬度, 整数型, , 
.参数 精度, 整数型, , 

.局部变量 pack, 未知类型0x4901087D, , , 
.局部变量 bin, 字节集, , , 

pack.未知函数_67176574 ()
pack.未知函数_67176577 (“00 00 00 2C 00 00 00 20 45 6E 63 6F 75 6E 74 65 72 53 76 63 2E 52 65 71 47 65 74 45 6E 63 6F 75 6E 74 65 72 00 00 00 08 D7 1C 77 15 00 00 01 88”)
pack.未知函数_67176577 (“10 03 2C 3C”)
pack.未知函数_67176577 (“42 45 DD E7 7C 56 0C 45 6E 63 6F 75 6E 74 65 72 4F 62 6A 66 13 43 4D 44 5F 47 45 54 5F 45 4E 43 4F 55 4E 54 45 52 56 32 7D 00 01 01 4E 08 00 02 06 09 52 65 71 48 65 61 64 65 72 1D 00 00 13 0A 00 02 12”)
pack.未知函数_67176575 (取字节集右边 (未知函数_67176576 (到字节集 (.)), 4))
pack.未知函数_67176577 (“22 20 02 9A A9 3C 40 02 5C 6C 0B 06 11”)
pack.未知函数_67176577 (“52 65 71 47 65 74 45 6E 63 6F 75 6E 74 65 72 56 32 1D 00 01 01 11 0A 0A 0A 02”)
pack.未知函数_67176578 (纬度)
pack.未知函数_67176577 (“12”)
pack.未知函数_67176578 (精度)
pack.未知函数_67176577 (“2C 30 01 0B 19 0C 29 0C 36 16 42 31 5F 51 51 5F 4E 65 69 67 68 62 6F 72 5F 61 6E 64 72 6F 69 64 46 08 4E 7A 56 4B 5F 71 47 45 5C 6C 0B 1A 0C 12 35 A4 E9 00 22 35 A4 E9 00 3C 4C 56 00 0B 20 00 30 FF 5D 00 00 01 00 6C 71 07 D0 80 FF 9C BD 00 00 72 00 00 00 72”)
pack.未知函数_67176577 (“10 03 2C 3C 40 01 56 1C 50 75 62 41 63 63 6F 75 6E 74 53 76 63 2E 6E 65 61 72 62 79 5F 70 75 62 61 63 63 74 66 0E 6E 65 61 72 62 79 5F 70 75 62 61 63 63 74 7D 00 00 31 08 00 01 06 0E 6E 65 61 72 62 79 5F 70 75 62 61 63 63 74 1D 00 00 1A 0A 00 02 1D 00 0C 20 02 3A 0A 02 01 78 40 64 12 06 1D 64 AD 2C 30 01 0B 0B 0B 8C 98 0C A8 0C CC D0 00 EC FC 0F FC 10 F1 11 01 E0 FC 12 FC 13 FC 14 F0 15 00 FC 16 FA 17 0A 02 01 78 40 64 12 06 1D 64 AD 2C 30 01 0B 19 0C 29 0C 36 00 46 00 50 01 6C 0B F0 18 0F FD 19 00 0C FC 1A FC 1B 0B 8C 98 0C A8 0C”)
赋值 (bin, pack.未知函数_67176579 ())
返回 (未知函数_67176580 (pack.未知函数_67176579 ().未知函数_67176581 (.), 3))

.子程序 Pack_EncounterSvc_ReqGetEncounterV2, 字节集, , 
.参数 经度, 整数型, , 
.参数 纬度, 整数型, , 

.局部变量 bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010869, , , 
.局部变量 NearbyGroup_Bin, 字节集, , , 
.局部变量 PubAccountSvc_bin, 字节集, , , 

pack.未知函数_67176554 ()
pack.未知函数_67176556 (“00 00 00 CD 10 02 2C 3C 42 1C D9 2F 3D 56 0B 4E 65 61 72 62 79 47 72 6F 75 70 66 08 47 65 74 45 6E 74 72 79 7D 00 01 00 9F 08 00 02 06 11 52 65 71 47 65 74 4E 65 61 72 62 79 47 72 6F 75 70 18 00 01 06 1D 4E 65 61 72 62 79 47 72 6F 75 70 2E 52 65 71 47 65 74 4E 65 61 72 62 79 47 72 6F 75 70 1D 00 00 26 0A 00 01 1D 00 0C 20 03 3A 0A 02”)
pack.未知函数_67176555 (经度)
pack.未知函数_67176556 (“12”)
pack.未知函数_67176555 (纬度)
pack.未知函数_67176556 (“2C 30 01 0B 19 0C 29 0C 3A 06 00 16 00 26 00 0B 0B 0B 06 09 52 65 71 48 65 61 64 65 72 18 00 01 06 16 4E 65 69 67 68 62 6F 72 43 6F 6D 6D 2E 52 65 71 48 65 61 64 65 72 1D 00 00 13 0A 00 01 12”)
pack.未知函数_67176557 (.)
pack.未知函数_67176556 (“22 20 02 AB 9B 3C 40 01 5C 6C 0B 8C 98 0C A8 0C”)
赋值 (NearbyGroup_Bin, pack.未知函数_67176558 ())

pack.未知函数_67176554 ()
pack.未知函数_67176556 (“00 00 00 9C 10 02 2C 3C 42 1C D9 2F 3D 56 0D 50 75 62 41 63 63 6F 75 6E 74 53 76 63 66 0E 6E 65 61 72 62 79 5F 70 75 62 61 63 63 74 7D 00 00 67 08 00 01 06 0E 6E 65 61 72 62 79 5F 70 75 62 61 63 63 74 18 00 01 06 25 4E 65 61 72 62 79 50 75 62 41 63 63 74 2E 52 65 71 47 65 74 4E 65 61 72 62 79 50 75 62 41 63 63 74 49 6E 66 6F 1D 00 00 26 0A 00 01 1D 00 0C 20 02 3A 0A 02”)
pack.未知函数_67176555 (经度)
pack.未知函数_67176556 (“12”)
pack.未知函数_67176555 (纬度)
pack.未知函数_67176556 (“2C 30 01 0B 19 0C 29 0C 3A 06 00 16 00 26 00 0B 0B 0B 8C 98 0C A8 0C”)
赋值 (PubAccountSvc_bin, pack.未知函数_67176558 ())

pack.未知函数_67176554 ()
pack.SetHex (“10 02 2C 3C 42 1C D9 2F 3D 56 0C 45 6E 63 6F 75 6E 74 65 72 4F 62 6A 66 13 43 4D 44 5F 47 45 54 5F 45 4E 43 4F 55 4E 54 45 52 56 32 7D 00 01 02 5D 08 00 02 06 11 52 65 71 47 65 74 45 6E 63 6F 75 6E 74 65 72 56 32 18 00 01 06 1E 45 6E 63 6F 75 6E 74 65 72 53 76 63 2E 52 65 71 47 65 74 45 6E 63 6F 75 6E 74 65 72 56 32 1D 00 01 01 E2 0A 0A 0A 02”)
.未知函数_67176559 ()
“12”.未知函数_67176560 ()
.未知函数_67176559 ()
pack.未知函数_67176556 (“2C 30 01 0B 19 00 01 03 00 00 3C 46 D8 1B 64 D7 29 0C 36 10 42 31 5F 51 51 5F 6E 62 66 5F 69 70 68 6F 6E 65 46 09 45 5F 39 55 37 45 6A 53 52 50 01 6C 7D 00 0C 89 0C 99 0C 0B 1A 0C 12 35 A4 E9 00 22 35 A4 E9 00 3C 4C 56 00 6D 00 0C 0B 20 02 30 FF 49 00 01 0C 5D 00 0C 60 01 71 07 D0 80 FF 9C AD 00 01 00 CD”)
pack.未知函数_67176557 (NearbyGroup_Bin)
pack.未知函数_67176556 (“BD 00 01 00 9C”)
pack.未知函数_67176557 (PubAccountSvc_bin)
pack.未知函数_67176556 (“0B 06 09 52 65 71 48 65 61 64 65 72 18 00 01 06 16 4E 65 69 67 68 62 6F 72 43 6F 6D 6D 2E 52 65 71 48 65 61 64 65 72 1D 00 00 13 0A 00 02 12”)
pack.未知函数_67176557 (.)
pack.未知函数_67176556 (“22 20 02 AB 9B 3C 40 01 5C 6C 0B 8C 98 0C A8 0C”)
赋值 (bin, MakePackHead (pack.GetAll (), “EncounterSvc.ReqGetEncounterV2”))
返回 (Pack (bin, 2))

.子程序 Pack_SummaryCard_ReqSummaryCard, 字节集, , 
.参数 目标QQ, 长整数型, , 

.局部变量 bin, 字节集, , , 
.局部变量 pack, _Pack, , , 
.局部变量 out, JceOutputStream, , , 
.局部变量 Gamebin, 字节集, , , 

 ' ----------------------------------------------------------GAMEBIN部份-----------------------------------------------------------------------------------
out.clear ()
out.WriteInt (1, 0)
out.WriteLong (目标QQ, 1)
赋值 (Gamebin, out.toByteArray ())

pack.Empty ()
pack.SetHex (“0A”)
pack.SetBin (Gamebin)
pack.SetHex (“0B”)
赋值 (Gamebin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“08 00 01 06 0F 52 65 71 4C 61 73 74 47 61 6D 65 49 6E 66 6F 1D 00”)
pack.SetShort (取字节集长度 (Gamebin))
pack.SetBin (Gamebin)
赋值 (Gamebin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“10 03 2C 3C 4C 56 11 51 51 53 65 72 76 69 63 65 2E 47 61 6D 65 53 76 63 66 0F 52 65 71 4C 61 73 74 47 61 6D 65 49 6E 66 6F 7D 00”)
pack.SetShort (取字节集长度 (Gamebin))
pack.SetBin (Gamebin)
pack.SetHex (“8C 98 0C A8 0C”)
赋值 (Gamebin, pack.GetAll ())

pack.Empty ()
pack.SetInt (相加 (取字节集长度 (Gamebin), 4))
pack.SetBin (Gamebin)
赋值 (Gamebin, pack.GetAll ())

 ' ----------------------------------------------------------GAMEBIN部份-----------------------------------------------------------------------------------
out.clear ()
out.WriteLong (目标QQ, 0)
out.WriteInt (6, 1)
out.WriteInt (0, 2)
out.WriteInt (0, 3)
out.WriteInt (0, 4)
out.WriteInt (0, 5)
out.WriteSimpleList ({  }, 6)
out.WriteStringByte (“”, 7)
out.WriteInt (7, 8)
out.WriteInt (2001, 9)
out.WriteSimpleList ({  }, 10)
out.WriteSimpleList (Gamebin, 11)
赋值 (bin, out.toByteArray ())

pack.Empty ()
pack.SetHex (“0A”)
pack.SetBin (bin)
pack.SetHex (“0B 8C 98 0C A8 0C”)
pack.SetHex (“E9 00 02 0D 00 00 2D 28 00 00 00 23 00 00 00 00 28 01 3A 18 41 62 74 38 6F 39 42 33 78 68 68 45 47 62 69 71 63 54 6D 53 42 6B 63 71 60 04 6A 03 36 2E 30 29 0D 00 00 13 28 00 00 00 09 00 00 00 00 28 02 60 04 6A 03 36 2E 30 29 0B”)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“08 00 02 06 07 52 65 71 48 65 61 64 18 00 01 06 13 53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 71 48 65 61 64 1D 00 00 04 0A 00 01 0B 06 0E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 18 00 01 06 1A 53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 1D 00 01”)
pack.SetShort (取字节集长度 (bin))
pack.SetBin (bin)
赋值 (bin, pack.GetAll ())

pack.Empty ()
pack.SetHex (“10 02 2C 3C 4C 56 24 51 51 53 65 72 76 69 63 65 2E 4D 43 61 72 64 53 76 63 2E 53 75 6D 6D 61 72 79 53 65 72 76 61 6E 74 4F 62 6A 66 0E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 7D 00 01”)
pack.SetShort (取字节集长度 (bin))
pack.SetBin (bin)
pack.SetHex (“8C 98 0C A8 0C”)
赋值 (bin, MakePackHead (pack.GetAll (), “SummaryCard.ReqSummaryCard”))
返回 (Pack (bin, 2))

.子程序 Pack_TextMsgToAccostTmp_文本, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 Cookie, 字节集, , 
.参数 msg, 字节集, , 
.参数 Sig, 字节集, , 

.局部变量 uin部分, 字节集, , , 
.局部变量 开关部分, 字节集, , , 
.局部变量 数据部分, 字节集, , , 
.局部变量 小随机数部分, 字节集, , , 
.局部变量 大随机数部分, 字节集, , , 
.局部变量 所谓cookie的部分, 字节集, , , 
.局部变量 尾部, 字节集, , , 

赋值 (gUserSyncCookie, Hex2Bin (“08 E5 88 A7 B9 05 10 E5 88 A7 B9 05 28 8A C2 BB 95 0D 48 9F 98 BD B1 01 58 A9 DB 94 E7 07”))
 ' 08 AE 9D A7 B9 05 10 AE 9D A7 B9 05 28 8A C2 B3 A5 03 48 C8 80 B4 D8 07 58 9D EC FA E7 07
 ' 08 D8 9F A7 B9 05 10 D8 9F A7 B9 05 28 8A C2 BB 95 0D 48 82 BC AB FD 0B 58 B9 C0 8C E8 07
 ' 08 BE A1 A7 B9 05 10 BE A1 A7 B9 05 28 8A D4 97 B4 02 48 FB B0 9C F1 02 58 93 D2 88 D9 08
赋值 (uin部分, 相加 (Protobuf封装整数 (1, Uin), Protobuf封装字节集 (2, Sig)))
赋值 (uin部分, Protobuf封装字节集 (13, uin部分))
赋值 (uin部分, Protobuf封装字节集 (1, uin部分))

赋值 (开关部分, 相加 (Protobuf封装整数 (1, 0), Protobuf封装整数 (2, 0), Protobuf封装整数 (3, 0)))
赋值 (开关部分, Protobuf封装字节集 (2, 开关部分))

赋值 (数据部分, Protobuf封装字节集 (1, msg))
赋值 (数据部分, Protobuf封装字节集 (1, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (2, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (1, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (3, 数据部分))

置随机数种子 ()
赋值 (小随机数部分, Protobuf封装整数 (4, 取随机数 (18570, 59876)))
置随机数种子 ()
赋值 (大随机数部分, Protobuf封装整数 (5, 取随机数 (549498816, 804266230)))
赋值 (所谓cookie的部分, Protobuf封装字节集 (6, gUserSyncCookie))
返回 (相加 (uin部分, 开关部分, 数据部分, 小随机数部分, 大随机数部分, 所谓cookie的部分))

.子程序 Pack_TextMsgToAccostTmp_表情, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 Cookie, 字节集, , 
.参数 msg, 字节集, , 
.参数 表情标识, 整数型, , 
.参数 Sig, 字节集, , 

.局部变量 uin部分, 字节集, , , 
.局部变量 开关部分, 字节集, , , 
.局部变量 数据部分, 字节集, , , 
.局部变量 小随机数部分, 字节集, , , 
.局部变量 大随机数部分, 字节集, , , 
.局部变量 所谓cookie的部分, 字节集, , , 
.局部变量 尾部, 字节集, , , 

赋值 (gUserSyncCookie, Hex2Bin (“08 D9 91 A7 B9 05 10 D9 91 A7 B9 05 28 8A D4 93 F4 0E 48 C8 80 B4 D8 07 58 ED CE A7 D8 08”))
赋值 (uin部分, 相加 (Protobuf封装整数 (1, Uin), Protobuf封装字节集 (2, Sig)))
赋值 (uin部分, Protobuf封装字节集 (13, uin部分))
赋值 (uin部分, Protobuf封装字节集 (1, uin部分))

赋值 (开关部分, 相加 (Protobuf封装整数 (1, 0), Protobuf封装整数 (2, 0), Protobuf封装整数 (3, 0)))
赋值 (开关部分, Protobuf封装字节集 (2, 开关部分))

赋值 (数据部分, Protobuf封装字节集 (2, msg))
赋值 (数据部分, Protobuf封装整数 (1, 表情标识))
赋值 (数据部分, Protobuf封装字节集 (2, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (2, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (1, 数据部分))
赋值 (数据部分, Protobuf封装字节集 (3, 数据部分))

置随机数种子 ()
赋值 (小随机数部分, Protobuf封装整数 (4, 取随机数 (18570, 59876)))
置随机数种子 ()
赋值 (大随机数部分, Protobuf封装整数 (5, 取随机数 (549498816, 804266230)))
赋值 (所谓cookie的部分, Protobuf封装字节集 (6, gUserSyncCookie))
返回 (相加 (uin部分, 开关部分, 数据部分, 小随机数部分, 大随机数部分, 所谓cookie的部分))

.子程序 Pack_TextMsgToAccostTmp_回复, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 Cookie, 字节集, , 
.参数 msg, 字节集, , 
.参数 Sig, 字节集, , 

.局部变量 uin部分, 字节集, , , 
.局部变量 开关部分, 字节集, , , 固定一个1:1,2:0,3:0，不知道是做什么用的，称为开关部分
.局部变量 数据部分, 字节集, , , 
.局部变量 小随机数部分, 字节集, , , 不知道是不是随机数，因为这个数据被封装在DLL里面了，找不到算法
.局部变量 大随机数部分, 字节集, , , 同上
.局部变量 所谓cookie的部分, 字节集, , , 实际上这也是一个Protobuf的封装，里面封装了6个长整数，应该是固定值
.局部变量 尾部, 字节集, , , 

赋值 (未知函数_67176601 (“08 C5 9A F7 B8 05 10 C5 9A F7 B8 05 28 8A 8A 96 C1 05 48 C7 9A F7 AD 0A 58 83 F2 E6 E5 05”))
赋值 (uin部分, 相加 (未知函数_67176599 (1, Uin), 未知函数_67176600 (2, Sig), 未知函数_67176599 (3, 1)))
赋值 (uin部分, 未知函数_67176600 (13, uin部分))
赋值 (uin部分, 未知函数_67176600 (1, uin部分))

赋值 (开关部分, 相加 (未知函数_67176599 (1, 1), 未知函数_67176599 (2, 0), 未知函数_67176599 (3, 0)))
赋值 (开关部分, 未知函数_67176600 (2, 开关部分))

赋值 (数据部分, 未知函数_67176600 (1, msg))
赋值 (数据部分, 未知函数_67176600 (1, 数据部分))
赋值 (数据部分, 未知函数_67176600 (2, 数据部分))
赋值 (数据部分, 未知函数_67176600 (1, 数据部分))
赋值 (数据部分, 未知函数_67176600 (3, 数据部分))

置随机数种子 ()
赋值 (小随机数部分, 未知函数_67176599 (4, 取随机数 (58476, 59876)))
置随机数种子 ()
赋值 (大随机数部分, 未知函数_67176599 (5, 取随机数 (804066230, 804266230)))
赋值 (所谓cookie的部分, 未知函数_67176600 (6, ))

赋值 (尾部, 未知函数_67176599 (8, 0))
返回 (相加 (uin部分, 开关部分, 数据部分, 小随机数部分, 大随机数部分, 所谓cookie的部分, 尾部))

.子程序 QQ_普通登录, 整数型, , 
.参数 QQ账号, 文本型, , 
.参数 QQ密码, 文本型, , 
.参数 运营商网络类型, 整数型, , 0 = 电信    1 = 联通   2 = 移动

.局部变量 地址文本, 文本型, , , 
.局部变量 地址分组, 文本型, , "0", 
.局部变量 测试结果, 整数型, , , 
.局部变量 Ip地址, 文本型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 i, 整数型, , , 

Tcp.未知支持库函数_9 ()
QQ_初始化 (删首尾空 (QQ账号), 删首尾空 (QQ密码))
赋值 (qq.loginState, #login_state_logining)
赋值 (IsToken_Login, 假)

.判断开始 (等于 (运营商网络类型, 0))
    赋值 (地址文本, “14.17.42.23+14.17.42.37+14.215.138.107+14.17.41.153+14.17.42.14+14.215.138.106+14.17.42.31+183.60.38.55+14.17.41.169+14.215.138.105+14.215.138.111+183.60.15.242+14.215.138.108+14.215.138.110+183.60.38.57”)
.判断 (等于 (运营商网络类型, 1))
    赋值 (地址文本, “112.90.78.168+163.177.92.121+163.177.92.123+163.177.92.24+163.177.92.111+112.90.78.169+163.177.71.147+112.90.78.170+163.177.92.110+163.177.89.195+112.90.140.143+163.177.92.122”)
.判断 (等于 (运营商网络类型, 2))
    赋值 (地址文本, “14.17.42.31+14.17.42.37+14.215.138.105+14.215.138.106+14.215.138.107+14.215.138.108+14.215.138.110+14.215.138.111+183.60.15.242+183.60.38.55+183.60.38.57+14.17.41.153+14.17.41.169+14.17.42.14+14.17.42.23”)
.默认
    赋值 (地址文本, “14.17.42.23+14.17.42.37+14.215.138.107+14.17.41.153+14.17.42.14+14.215.138.106+14.17.42.31+183.60.38.55+14.17.41.169+14.215.138.105+14.215.138.111+183.60.15.242+14.215.138.108+14.215.138.110+183.60.38.57”)
.判断结束


赋值 (地址分组, 分割文本 (地址文本, “+”, ))
置随机数种子 ()
.计次循环首 (取数组成员数 (地址分组), i)
    赋值 (Ip地址, 地址分组 [取随机数 (1, 取数组成员数 (地址分组))])
    赋值 (测试结果, 通信测试 (Ip地址, 500))
    .如果真 (大于 (测试结果, 0))
        调试输出 (相加 (“测速Ip地址: ”, Ip地址), 相加 (“结果|延时：”, 到文本 (测试结果), “ 毫秒”))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (取反 (Tcp.未知支持库函数_8 (Ip地址, 8080)))
    赋值 (last_error, “连接服务器失败”)
    返回 (qq.loginState)
.如果真结束


赋值 (bin, Fun_Send (Pack_Login ()))

.如果真 (等于 (bin, {  }))
    赋值 (last_error, “登陆返回空包”)
    调试输出 (“登录返回空包”)
    返回 (qq.loginState)
.如果真结束
Fun_recv (bin)
返回 (qq.loginState)

.子程序 QQ_令牌登录, 整数型, , 
.参数 QQ账号, 文本型, , 
.参数 令牌A2, 文本型, , 
.参数 令牌A4, 文本型, , 
.参数 令牌Sessionkey, 文本型, , 
.参数 运营商网络类型, 整数型, , 0 = 电信    1 = 联通   2 = 移动

.局部变量 地址文本, 文本型, , , 
.局部变量 地址分组, 文本型, , "0", 
.局部变量 测试结果, 整数型, , , 
.局部变量 Ip地址, 文本型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 i, 整数型, , , 

未知支持库函数_9 ()
QQ_初始化 (删首尾空 (QQ账号), “”)
QQ_Load_Token (令牌A2, 令牌A4, 令牌Sessionkey)
赋值 (.)

.子程序 QQ_上传验证码, 整数型, , 
.参数 Code, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (., {  })
赋值 (bin, Fun_Send (Pack_VerificationCode (Code)))
未知函数_67176496 (bin)
返回 (qq.loginState)

.子程序 QQ_取验证码图片, 字节集, , 
返回 (qq.Viery)

.子程序 QQ_取登录错误信息, 文本型, , 
返回 (last_error)

.子程序 QQ_上线, 空白型, , 
.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_StatSvc_SvcReqRegister ()))
Fun_recv (bin)
赋值 (bin, Fun_Send (Pack_OidbSvc_0x7a2_0 ()))
Fun_recv (bin)

.子程序 QQ_取回令牌, 空白型, , 
.参数 令牌A2, 文本型, 参考, 
.参数 令牌A4, 文本型, 参考, 
.参数 令牌Sessionkey, 文本型, 参考, 

赋值 (令牌A2, 删全部空 (字节集到十六进制文本 (qq.Token002C)))
赋值 (令牌A4, 删全部空 (字节集到十六进制文本 (qq.Token004C)))
赋值 (令牌Sessionkey, 删全部空 (字节集到十六进制文本 (qq.sessionKey)))

.子程序 QQ_Load_Token, 空白型, , 加载Token数据
.参数 Token_A2, 文本型, , 
.参数 Token_A4, 文本型, , 
.参数 Token_key, 文本型, , 

赋值 (., 未知函数_67176751 (删全部空 (Token_A2)))
赋值 (., 未知函数_67176751 (删全部空 (Token_A4)))
赋值 (., 未知函数_67176751 (删全部空 (Token_key)))
赋值 (., .)

.子程序 QQ_取回消息, 空白型, , 
.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_MessageSvc_PbGetMsg ()))
Fun_recv (bin)

.子程序 QQ_建立Chat, 空白型, , 
.参数 目标QQ, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_SummaryCard_ReqSummaryCard (到长整数 (删首尾空 (目标QQ)))))
Fun_recv (bin)

.子程序 QQ_获取附近的人, 空白型, , 获取附近人
.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_EncounterSvc_ReqGetEncounter (40019201, 116544342)))
Fun_recv (bin)

.子程序 组成文本消息数据包, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 msg, 文本型, , 
.参数 Sig, 字节集, , 

.局部变量 bin_Protobuf, 字节集, , , 
.局部变量 pack, _Pack, , , 
.局部变量 bin, 字节集, , , 

赋值 (bin_Protobuf, Pack_TextMsgToAccostTmp_文本 (Uin, gUserSyncCookie, 编码_Ansi到Utf8 (msg), Sig))
赋值 (bin, MakePackHead (bin_Protobuf, “MessageSvc.PbSendMsg”))
返回 (Pack (bin, 2))

.子程序 组成表情消息数据包, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 表情标识, 整数型, , 
.参数 Sig, 字节集, , 

.局部变量 bin_Protobuf, 字节集, , , 
.局部变量 pack, _Pack, , , 
.局部变量 bin, 字节集, , , 

 ' 赋值 (bin_Protobuf, Pack_TextMsgToAccostTmp_表情 (Uin, gUserSyncCookie, 编码_Ansi到Utf8 (“可爱”), 表情标识, Sig))
赋值 (bin, MakePackHead (bin_Protobuf, “MessageSvc.PbSendMsg”))
返回 (Pack (bin, 2))

.子程序 组成回复消息数据包, 字节集, , 
.参数 Uin, 长整数型, , 
.参数 Msg, 文本型, , 
.参数 Sig, 字节集, , 

.局部变量 bin_Protobuf, 字节集, , , 
.局部变量 pack, 未知类型0x490108A2, , , 
.局部变量 bin, 字节集, , , 

赋值 (bin_Protobuf, Pack_TextMsgToAccostTmp_回复 (Uin, gUserSyncCookie, 编码_Ansi到Utf8 (Msg), Sig))
赋值 (bin, 未知函数_67176613 (bin_Protobuf, “MessageSvc.PbSendMsg”))
返回 (未知函数_67176614 (bin, 2))

.子程序 QQ_发送文本消息, 空白型, , 
.参数 目标账号, 文本型, , 
.参数 消息内容, 文本型, , 
.参数 ChatSig, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (组成文本消息数据包 (到长整数 (删首尾空 (目标账号)), 删首尾空 (消息内容), Hex2Bin (ChatSig))))
Fun_recv (bin)


.子程序 QQ_发送表情消息, 空白型, , 
.参数 目标账号, 文本型, , 
.参数 表情代码, 整数型, , 
.参数 ChatSig, 文本型, , 

.局部变量 bin, 字节集, , , 

 ' 赋值 (bin, Fun_Send (组成表情消息数据包 (到长整数 (删首尾空 (目标账号)), 表情代码, Hex2Bin (ChatSig))))
Fun_recv (bin)


.子程序 QQ_发送回复消息, 空白型, , 
.参数 目标账号, 文本型, , 
.参数 消息内容, 文本型, , 
.参数 ChatSig, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (组成回复消息数据包 (到长整数 (删首尾空 (目标账号)), 删首尾空 (消息内容), Hex2Bin (ChatSig))))
未知函数_67176624 (bin)


.类模块 Tlv_, , , 

.程序集变量 QQTEA, QQTEA, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 tlv_pack, 字节集, , 
.参数 cmd, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (cmd)
pack.SetShort (取字节集长度 (bin))
pack.SetBin (bin)
返回 (pack.GetAll ())

.子程序 tlv2, 字节集, , 验证码TLV
.参数 code, 文本型, , 
.参数 VieryToken1, 字节集, , 

.局部变量 pack, 未知类型0x490107E8, , , 

pack.Empty ()
pack.SetHex (“00 02”)
pack.SetShort (取文本长度 (code))
pack.未知函数_67176427 (到字节集 (code))
pack.未知函数_67176428 (取字节集长度 (VieryToken1))
pack.未知函数_67176427 (VieryToken1)
返回 (未知函数_67176429 (“00 02”, pack.未知函数_67176430 ()))

.子程序 tlv104, 字节集, , 验证码TLV
.参数 VieryToken2, 字节集, , 

.局部变量 pack, 未知类型0x490107F4, , , 

pack.未知函数_67176440 ()
pack.未知函数_67176441 (VieryToken2)
返回 (未知函数_67176438 (“01 04”, pack.未知函数_67176439 ()))

.子程序 tlv16, 字节集, , 验证码TLV
.局部变量 pack, 未知类型0x490107FE, , , 

pack.未知函数_67176447 ()
pack.SetHex (“00 00 01 FF FC 00 00 00 00 00”)
返回 (tlv_pack (“01 16”, pack.GetAll ()))

.子程序 tlv108, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetBin (GetRandomBin (16)) ' D9 D6 DD 55 E8 A3 61 1C DA FD E4 2E 20 B1 E0 7B
返回 (tlv_pack (“01 08”, pack.GetAll ()))

.子程序 tlv100, 字节集, , 
.参数 Appid, 整数型, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 00 00 05 00 00 00 10”)
pack.SetInt (Appid)
pack.SetHex (“01 00 00 00 00 1E 10 E0”)
返回 (tlv_pack (“01 00”, pack.GetAll ()))

.子程序 tlv107, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 01 01 00 00 01”)
返回 (tlv_pack (“01 07”, pack.GetAll ()))

.子程序 tlv116, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 01 FF FC 00 00 00 00 00”)
返回 (tlv_pack (“01 16”, pack.GetAll ()))

.子程序 tlv166, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“01”)
返回 (tlv_pack (“01 66”, pack.GetAll ()))

.子程序 tlv142, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 13”)
pack.SetHex (“63 6F 6D 2E 74 65 6E 63 65 6E 74 2E 6D 69 70 61 64 71 71”) ' com.tencent.mipadqq
返回 (tlv_pack (“01 42”, pack.GetAll ()))

.子程序 tlv16B, 字节集, , TGT和外共用
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 05”)
pack.SetHex (“00 0C”)
pack.SetHex (“62 75 6C 75 6F 2E 71 71 2E 63 6F 6D”) ' buluo.qq.com
pack.SetHex (“00 0B”)
pack.SetHex (“67 61 6D 65 2E 71 71 2E 63 6F 6D”) ' game.qq.com
pack.SetHex (“00 0B”)
pack.SetHex (“6D 61 69 6C 2E 71 71 2E 63 6F 6D”) ' mail.qq.com
pack.SetHex (“00 0C”)
pack.SetHex (“71 7A 6F 6E 65 2E 71 71 2E 63 6F 6D”) ' qzone.qq.com
pack.SetHex (“00 0A”)
pack.SetHex (“71 75 6E 2E 71 71 2E 63 6F 6D”) ' qun.qq.com
返回 (tlv_pack (“01 6B”, pack.GetAll ()))

.子程序 tlv16E, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“69 50 61 64”) ' iPad
返回 (tlv_pack (“01 6E”, pack.GetAll ()))

.子程序 tlv147, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 10”)
pack.SetHex (“00 03”)
pack.SetHex (“36 2E 30”) ' 6.0
pack.SetHex (“00 13”)
pack.SetHex (“63 6F 6D 2E 74 65 6E 63 65 6E 74 2E 6D 69 70 61 64 71 71”) ' com.tencent.mipadqq
返回 (tlv_pack (“01 47”, pack.GetAll ()))

.子程序 tlv144, 字节集, , 
.参数 TGTKey, 字节集, , 
.参数 tlv128, 字节集, , 
.参数 tlv124, 字节集, , 
.参数 tlv16B, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetShort (3)
pack.SetBin (tlv128)
pack.SetBin (tlv124)
pack.SetBin (tlv16B)
返回 (tlv_pack (“01 44”, QQTEA.未知函数_67175260 (pack.GetAll (), TGTKey)))

.子程序 tlv128, 字节集, , TGT
.参数 IMEI_, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 01 00 01 00 00 00”)
pack.SetHex (“00 07”)
pack.SetHex (“69 50 61 64 35 2C 31”) ' iPad5,1
pack.SetHex (“00 10”)
pack.SetBin (IMEI_) ' E9 DB 6A F5 25 97 92 42 11 54 9D 64 2A 9B 13 15
pack.SetHex (“00 00”)
返回 (tlv_pack (“01 28”, pack.GetAll ()))

.子程序 tlv124, 字节集, , TGT
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 09”)
pack.SetHex (“69 50 68 6F 6E 65 20 4F 53”) ' iPhone OS
pack.SetHex (“00 03”)
pack.SetHex (“39 2E 30”) ' 9.0
pack.SetHex (“00 00 00 07”)
pack.SetHex (“55 6E 6B 6E 6F 77 6E”) ' Unknown
pack.SetHex (“00 00 00 00”)
返回 (tlv_pack (“01 24”, pack.GetAll ()))

.子程序 tlv145, 字节集, , 
.参数 IMEI_, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetBin (IMEI_) ' E9 DB 6A F5 25 97 92 42 11 54 9D 64 2A 9B 13 15
返回 (tlv_pack (“01 45”, pack.GetAll ()))

.子程序 tlv018, 字节集, , 
.参数 QQUSER, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 00 00 05 00 00 00 00 00 00 1F 41”)
pack.SetBin (QQUSER)
pack.SetHex (“00 00 00 00”)
返回 (tlv_pack (“00 18”, pack.GetAll ()))

.子程序 tlv141, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00 00 00 07”)
pack.SetHex (“55 6E 6B 6E 6F 77 6E”) ' Unknown
pack.SetHex (“00 00 00 00”)
返回 (tlv_pack (“01 41”, pack.GetAll ()))

.子程序 tlv106, 字节集, , 
.参数 User, 字节集, , 
.参数 Md5pass, 字节集, , 
.参数 Md52pass, 字节集, , 
.参数 _TGTKey, 字节集, , 
.参数 IMEI_, 字节集, , 
.参数 Time, 字节集, , 
.参数 AppId, 整数型, , 

.局部变量 pack, _Pack, , , 

pack.SetHex (“00 03”)
pack.SetBin (GetRandomBin (4))
pack.SetHex (“00 00 00 00 00 00 00 10 01 00 00 00 00 00 00 00”)
pack.SetBin (User)
pack.SetBin (Time)
pack.SetHex (“00 00 00 00 01”)
pack.SetBin (Md5pass)
pack.SetBin (_TGTKey)
pack.SetHex (“00 00 00 00 01”)
pack.SetBin (IMEI_)
pack.SetInt (AppId)
pack.SetHex (“00 00 00 01”)
返回 (tlv_pack (“01 06”, QQTEA.未知函数_67175332 (pack.GetAll (), Md52pass)))

.子程序 tlv190, 字节集, , 
.参数 IMEI_, 字节集, , 

.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetBin (IMEI_)
返回 (tlv_pack (“01 90”, pack.GetAll ()))

.子程序 tlv191, 字节集, , 
.局部变量 pack, _Pack, , , 

pack.Empty ()
pack.SetHex (“00”)
返回 (tlv_pack (“01 91”, pack.GetAll ()))

.窗口程序集 窗口程序集_启动窗口, , , 

.程序集变量 sdk, IpadQQ, , , 
.程序集变量 State, 整数型, , , 
.程序集变量 Code, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (.内容, 读配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “QQ账号”, ))
赋值 (.内容, 读配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “QQ密码”, ))

.子程序 __启动窗口_将被销毁, 空白型, , 
写配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “QQ账号”, .内容)
写配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “QQ密码”, .内容)

.子程序 _按钮_普通登录_被单击, 空白型, , 
赋值 (State, sdk.QQ_普通登录 (.内容, .内容, 0))
Login (假)

.子程序 Login, 空白型, , 
.参数 IsLoginToken, 逻辑型, , 

.判断开始 (等于 (State, 2))
    .如果 (IsLoginToken)
        调试输出 (“令牌登录成功”)
    .否则
        调试输出 (“登录成功”)
        写出令牌数据 ()
        sdk.QQ_上线 ()
    .如果结束
    未知函数_67176704 ()
    sdk.QQ_获取附近的人 ()
.判断 (等于 (State, 1))
    调试输出 (“需要验证码”)
    赋值 (.图片, sdk.QQ_取验证码图片 ())
    赋值 (.内容, “”)
.默认
    调试输出 (sdk.QQ_取登录错误信息 ())
.判断结束


.子程序 写出令牌数据, 空白型, , 
.局部变量 令牌A2, 文本型, , , 
.局部变量 令牌A4, 文本型, , , 
.局部变量 令牌Key, 文本型, , , 

sdk.QQ_取回令牌 ()
写配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌A2”, )
写配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌A4”, )
写配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌Sessionkey”, )

.子程序 _按钮_建立Chat_被单击, 空白型, , 
sdk.QQ_建立Chat (.内容)

.子程序 _按钮_发送消息_被单击, 空白型, , 
sdk.QQ_发送文本消息 (.内容, .内容, .内容)

.子程序 _编辑框_验证码_内容被改变, 空白型, , 
.如果真 (小于 (取文本长度 (.内容), 4))
    返回 ()
.如果真结束
赋值 (Code, .内容)
赋值 (.内容, “”)
赋值 (.图片, {  })
赋值 (State, sdk.QQ_上传验证码 (Code))
Login (假)

.子程序 _按钮_回复消息_被单击, 空白型, , 
sdk.QQ_发送回复消息 (.内容, .内容, .内容)

.子程序 _按钮_令牌登录_被单击, 空白型, , 
.局部变量 令牌A2, 文本型, , , 
.局部变量 令牌A4, 文本型, , , 
.局部变量 令牌Sessionkey, 文本型, , , 

赋值 (令牌A2, 读配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌A2”, ))
赋值 (令牌A4, 读配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌A4”, ))
赋值 (令牌Sessionkey, 读配置项 (相加 (取运行目录 (), “\Data.ini”), “登录配置”, “令牌Sessionkey”, ))

赋值 (State, sdk.QQ_令牌登录 (.内容, 令牌A2, 令牌A4, 令牌Sessionkey, 0))
Login (真)


 ' 不属于任何一个程序集、类模块的函数：
