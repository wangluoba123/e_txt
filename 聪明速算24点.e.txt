 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 538
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\_启动窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “24点速算”
    帮助文件名 = “”

窗口 指定牌点窗口
    左边 = 50
    顶边 = 50
    宽度 = 332
    高度 = 181
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\指定牌点窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 信息框窗口
    左边 = 50
    顶边 = 50
    宽度 = 420
    高度 = 186
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 1
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\信息框窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\信息框窗口_背景音乐
    标题 = “”
    帮助文件名 = “”



.常量 加, "1", , 
.常量 减, "2", , 
.常量 乘, "3", , 
.常量 除, "4", , 
.常量 , , , 
.常量 系统菜单, "524288", , WS_SYSMENU
.常量 , , , 
.常量 游戏介绍, "“　　一、游戏简介
　　24点游戏是经典的纸牌益智游戏，上至高龄老人，下至刚学会加减乘除的小学生，均可以在这款游戏中体会数学的无穷乐趣，锻炼良好的数学思维能力。特别是对于初学四则运算的小学生来说，在游戏中巩固所学知识，将会起到事半功倍的作用。
　　《智能速算24点》正是一款利用电脑进行24点游戏和学习的软件，有着精美绝伦的程序界面，独特快速的电脑智能算法和功能强大的游戏模式，既可以用于数学教学，更可以用于智能娱乐。
　　软件提供了学习模式、挑战模式和对战模式三种游戏模式，在游戏过程中，玩家既可以循序渐进，逐步学习，又可以挑战自我，向电脑宣战。如果有2个人，那么，也可以一起坐在电脑面前，来一场24点大比拼。可以说，本软件既是一款娱乐游戏，又是小学生学习四则运算不可多得的好帮手。
　　由于编写仓促，软件难免存在bug，欢迎广大24点爱好者提出宝贵意见，你的支持将是我不断完善本软件的动力。
　　作者联系方式：Email：qdflying@163.com

　　二、鸣谢
　　1、本软件使用吴涛先生出品的全中文全可视易语言V4.05正式企业版编写，特此感谢！
　　易语言官方网站：
　　大连大有吴涛易语言有限公司 http://www.dywt.com.cn
　　2、本软件在写作过程中，得到易语言高手西风的大力支持和帮助，在此深表谢意！”", , 
.常量 规则算法, "“　　一、规则简介
　　将一副扑克牌（挑去大、小王牌），平均分给2～4名玩家。游戏时每次取出4张牌。使用加减乘除对4张牌点进行运算，第一个能得出24点者为赢。赢者把这四张牌收走。先将手中的扑克牌用完的为输。

　　二、基本算法
　　游戏时，将10及10以下牌点的扑克牌，按其实际牌点取数值（A算1），J、Q、K均算10（也有少数地区将J算11，Q算12，K算13，但这将大大提高计算难度，一般不推荐）。将4个数值用加减乘除四则运算，计算出24点者胜出。
　　1、加法　加法是计算24点时用得最多的运算。特别要注意的是连加得24点的情况，经常会被忽略。另外，14＋10、15＋9、16＋8、18＋6等也是经常用到的计算24点的算法。
　　2、减法　计算24点时，经常遇到一个大数减去一个小数得24点的情况，比较常见的有28－4、30－6、36－12等。
　　3、乘法　使用频次最多的乘法包括3×8、4×6、2×12等。将4张扑克牌点进行运算，得出前述所示的2个数值，然后相乘得24点，是最常用的算法。
　　4、除法　除法一般用于将大数转换为小数，再参与其它运算。但也有直接通过除法得出24点的情况，如48÷2、72÷3、96÷4等。值得注意的是，在某些题目中，往往不直接计算除法的结果，而是将其引申为分数，通过分数的乘或除来计算24点。比如比较经典的5、5、5、1，其计算方法就是：(5－1/5)×5，其中的1/5实际就是1÷5，但这里我们不直接求得数，而是作为分数，上述算式演变为24/5×5，得24点。再如3、3、8、8，其算式是8÷(3-8/3)，也有异曲同工之妙。
　　在实际游戏过程中，往往需要将加减乘除综合引用，并注意适当的运算顺序。多注意上述提到的各种常见算法，举一反三，相信你会很快成为一个24点游戏高手。”", , 
.常量 练习模式, "“　　练习模式中，玩家可以通过没有时间限制的随机牌点学习，逐步领会计算24点的诀窍，从一个入门新手逐渐步入高手的殿堂。

　　一、洗牌
　　用鼠标点击“洗牌”按钮，软件将自动完成52张扑克牌的随机排序。

　　二、开始游戏
　　用鼠标点击扑克牌背面，软件将自动发出4张扑克牌，并显示牌点。玩家可以从容地对所显示的牌点进行计算。每次计算完毕，再次点击扑克牌背面，则会重新发出4张扑克。直到所有扑克牌发完，此时，玩家需要重新洗牌。

　　三、电脑求解
　　对于初学者来说，某些数字组合似乎无法计算出24点，此时，不妨用鼠标点击“电脑求解”按钮，看电脑智能计算会有多少种计算结果。或者，你算出了24点，也可以看看，还有多少种方法是你没有想到的。通过不断地与电脑之间的交互学习，你的24点速算水平将在不知不觉中有长足的进步。

　　四、指定牌点
　　24点速算在不少经典的数字组合，比如前面提到过的5、5、5、1和3、3、8、8，有时，你可能会有更多经典的或看似无解的数字组合需要求证，那么，你可以用鼠标点击“指定牌点”按钮，在弹出窗口中，输入指定的4个数字，并按“确定”按钮，界面上即会显示你所需要的4张扑克牌。此时，你再点击“电脑求解”，就可以让电脑为你求证这些难题了。”", , 
.常量 挑战模式, "“　　挑战模式是玩家挑战自我，肯定自我的过程，在这里，你将与电脑智能进行一场公平的比赛。
　　一、游戏规则
　　玩家与电脑每人26张扑克牌，每次各出2张，先计算出24点者为赢家，翻开的4张牌归赢家所有。如果翻开的4张牌无法计算24点，则各自将2张牌收回，并自动放置到各自扑克牌的最后。赢得全部52张扑克牌的为最后赢家。
　　二、游戏过程
　　1、洗牌　玩家用鼠标点击“洗牌”按钮，软件将自动完成52张扑克的随机排序，并均分给玩家与电脑。
　　2、游戏　玩家用鼠标点击玩家的扑克牌背面，软件将发出2张扑克，同时，电脑也自动发出2张扑克，并开始计算。对于无解的题目，电脑会自动给出提示。
　　如果电脑先计算出24点，则会弹出提示信息框通知玩家，同时自动在下方显示四则运算表达式。用户可以学习并核对表达式后，在弹出窗口中点击“确定”按钮，此时，翻开的4张扑克归电脑所有，玩家扑克牌张数递减2张。
　　如果玩家先算出24点，应用鼠标点击“算出了”按钮，在软件界面下方会显示表达式录入编辑框，用户需要在30秒内录入所计算出的表达式（应以半角形式录入，例：2*3*8／2），并按回车键确认。如果玩家录入的表达式计算正确，则翻开的4张扑克归玩家所有。反之，如果玩家录入的数字不足4位，或录入的表达式经计算不等于24，或在30秒内未能完成表达式的录入，则按玩家作弊处理，4张扑克归电脑所有。
　　如果玩家自觉胜利无忘，可以点击“玩家认输”按钮，并在弹出窗口中点击“确定”按钮，以放弃当前挑战。
　　三、级别选择
　　软件为电脑设置了一级高手、二级能手、三级好手、四级新手共4个级别，玩家可以根据自己的水平自由选择电脑级别进行挑战。”", , 
.常量 双人对战, "“　　双人对战模式提供两个玩家进行24点比赛。一切由电脑来载定，绝对公平。

　　一、游戏规则
　　两个玩家每人26张扑克牌，每次各出2张，先计算出24点者为赢家，翻开的4张牌归赢家所有。如果两个玩家均认为当前的4张牌无法计算24点，则各自将2张牌收回，并自动放置到各自扑克牌的最后。赢得全部52张扑克牌的为最后赢家。

　　二、游戏过程
　　1、发牌　玩家用鼠标点击各自的扑克牌背面，发出2张扑克。
　　可以在系统设置中，设置发牌热键，系统默认为：玩家一按“A”键发牌，玩家二按“L”键发牌。
　　2、抢答　先算出24点的玩家，可以点击其牌下的“算出了”按钮。在软件界面下方会显示表达式录入编辑框，点击的玩家需要在30秒内录入所计算出的表达式（应以半角形式录入，例：2*3*8／2），并按回车键确认。如果玩家录入的表达式计算正确，则翻开的4张扑克归玩家所有。反之，如果玩家录入的数字不足4位，或录入的表达式经计算不等于24，或在30秒内未能完成表达式的录入，则按作弊处理，4张扑克归对方玩家所有。
　　玩家也可以按下键盘热键抢答，其热键与发牌热键一致。
　　3、如果两个玩家均认为当前牌点无法计算出24点，可以点击“重新出牌”按钮，将发出的2张牌收回，并重新发牌。
　　4、一局比赛结束后，可以点击“返回”按钮，返回主界面，然后重新点击“双人对战”按钮，以重新开始比赛。
”", , 
.常量 系统设置, "“　　合理的设置可以使本软件更美观更方便，本软件提供了以下几项人性化的设置。

　　一、背景图片
　　点击左侧上部的组合框，可以选择“设置扑克背面图片”和“设置无牌时图片”，并分别对应右侧两个图片。在列表框中选择不同的图片，可以实时预览效果。

　　二、声音设置
　　1、背景音效　可以设置软件运行时，是否打开背景音效，如发牌声、信息框弹出声等。
　　2、背景音乐　可以设置软件运行时，是否打开背景音乐。如果设置成“打开”，则可以在下方的组合框中选择你喜欢的背景音乐。

　　三、挑战级别
　　设置挑战电脑时，电脑玩家的默认计算级别。级别从1级到4级，其中1级，计算机计算最快。4级计算机最慢。玩家可以根据自己的水平选择合适的电脑级别。

　　四、热键设置
　　在双人对战模式中，可以设置两个玩家发牌及抢答的热键（字母A－Z）。系统默认热键为：玩家一：A键；玩家二：L键。

　　附：其它系统默认热键：
　　1、在主界面中，热键“1”到“6”分别对应主界面的6个按钮。
　　2、在主窗口中，当“返回”按钮可见时，热键“ESC键”返回主界面。
　　3、在“使用帮助”界面，左右光标键切换各个栏目。
　　4、在弹出的信息框中，回车键＝“确认”，ESC键＝“取消”。”", , 
.声音 发牌音, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\发牌音", , 
.声音 开局音效, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\开局音效", , 
.声音 比牌, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\比牌", , 
.声音 获胜, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\获胜", , 
.声音 倒计时, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\倒计时", , 
.声音 , , , 
.声音 爱江山更爱美人, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\爱江山更爱美人", , 
.声音 北国之春, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\北国之春", , 
.声音 九百九十九朵玫瑰, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\九百九十九朵玫瑰", , 
.声音 梁祝, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梁祝", , 
.声音 萍聚, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\萍聚", , 
.声音 泰坦尼克号, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\泰坦尼克号", , 
.声音 致艾丽丝, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\致艾丽丝", , 
.图片 背景001, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景001", , 
.图片 背景按下001, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下001", , 
.图片 背景002, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景002", , 
.图片 背景按下002, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下002", , 
.图片 背景003, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景003", , 
.图片 背景按下003, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下003", , 
.图片 背景004, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景004", , 
.图片 背景按下004, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下004", , 
.图片 背景005, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景005", , 
.图片 背景按下005, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下005", , 
.图片 背景006, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景006", , 
.图片 背景按下006, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下006", , 
.图片 背景007, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景007", , 
.图片 背景按下007, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下007", , 
.图片 背景008, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景008", , 
.图片 背景按下008, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下008", , 
.图片 背景009, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景009", , 
.图片 背景按下009, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下009", , 
.图片 背景010, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景010", , 
.图片 背景按下010, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下010", , 
.图片 背景011, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景011", , 
.图片 背景按下011, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下011", , 
.图片 背景012, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景012", , 
.图片 背景按下012, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下012", , 
.图片 背景013, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景013", , 
.图片 背景按下013, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下013", , 
.图片 背景014, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景014", , 
.图片 背景按下014, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下014", , 
.图片 背景015, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景015", , 
.图片 背景按下015, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下015", , 
.图片 背景016, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景016", , 
.图片 背景按下016, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\背景按下016", , 
.图片 , , , 
.图片 无牌001, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌001", , 
.图片 无牌002, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌002", , 
.图片 无牌003, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌003", , 
.图片 无牌004, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌004", , 
.图片 无牌005, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌005", , 
.图片 无牌006, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌006", , 
.图片 无牌007, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\无牌007", , 
.图片 , , , 
.图片 黑桃1, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃1", , 
.图片 黑桃13, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃13", , 
.图片 黑桃12, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃12", , 
.图片 黑桃11, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃11", , 
.图片 黑桃10, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃10", , 
.图片 黑桃9, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃9", , 
.图片 黑桃8, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃8", , 
.图片 黑桃7, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃7", , 
.图片 黑桃6, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃6", , 
.图片 黑桃5, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃5", , 
.图片 黑桃4, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃4", , 
.图片 黑桃3, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃3", , 
.图片 黑桃2, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\黑桃2", , 
.图片 红心1, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心1", , 
.图片 红心13, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心13", , 
.图片 红心12, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心12", , 
.图片 红心11, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心11", , 
.图片 红心10, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心10", , 
.图片 红心9, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心9", , 
.图片 红心8, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心8", , 
.图片 红心7, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心7", , 
.图片 红心6, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心6", , 
.图片 红心5, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心5", , 
.图片 红心4, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心4", , 
.图片 红心3, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心3", , 
.图片 红心2, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\红心2", , 
.图片 梅花1, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花1", , 
.图片 梅花13, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花13", , 
.图片 梅花12, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花12", , 
.图片 梅花11, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花11", , 
.图片 梅花10, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花10", , 
.图片 梅花9, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花9", , 
.图片 梅花8, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花8", , 
.图片 梅花7, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花7", , 
.图片 梅花6, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花6", , 
.图片 梅花5, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花5", , 
.图片 梅花4, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花4", , 
.图片 梅花3, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花3", , 
.图片 梅花2, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\梅花2", , 
.图片 方块1, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块1", , 
.图片 方块13, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块13", , 
.图片 方块12, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块12", , 
.图片 方块11, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块11", , 
.图片 方块10, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块10", , 
.图片 方块9, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块9", , 
.图片 方块8, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块8", , 
.图片 方块7, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块7", , 
.图片 方块6, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块6", , 
.图片 方块5, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块5", , 
.图片 方块4, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块4", , 
.图片 方块3, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块3", , 
.图片 方块2, " ' 已保存到：D:\易语言学习\Data\聪明速算24点.e\方块2", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 2 1 扩展功能支持库一




.全局变量 全局信息, 文本型, , , 
.全局变量 全局按钮, 整数型, , , 
.全局变量 全局标题, 文本型, , , 
.全局变量 全局返回, 整数型, , , 
.全局变量 匿名全局变量_2438, 空白型, , , 
.全局变量 音效开, 逻辑型, , , 
.全局变量 音乐开, 逻辑型, , , 

.DLL命令 取窗口属性, 整数型, "user32.dll", "GetWindowLongA", , GetWindowLong
    .参数 句柄, 整数型, , 
    .参数 索引, 整数型, , 

.DLL命令 置窗口属性, 整数型, "user32.dll", "SetWindowLongA", , SetWindowLong
    .参数 句柄, 整数型, , 
    .参数 索引, 整数型, , 
    .参数 新属性, 整数型, , 

.DLL命令 设置窗口区域, 整数型, "user32.dll", "SetWindowRgn", , 
    .参数 hWnd, 整数型, , 
    .参数 hRgn, 整数型, , 
    .参数 bRedraw, 逻辑型, , 

.DLL命令 创建圆角矩形区域, 整数型, "gdi32.dll", "CreateRoundRectRgn", , 
    .参数 左上横坐标, 整数型, , X1，矩形左上角横坐标
    .参数 左上纵坐标, 整数型, , Y1，矩形左上角纵坐标
    .参数 右下横坐标, 整数型, , X2，矩形右下角横坐标
    .参数 右下纵坐标, 整数型, , Y2，矩形右下角纵坐标
    .参数 圆角椭圆的宽, 整数型, , X3，圆角椭圆的宽，其范围从0（没有圆角）到矩形宽（全圆）
    .参数 圆角椭圆的高, 整数型, , Y3，圆角椭圆的高，其范围从0（没有圆角）到矩形高（全圆）

.DLL命令 卸载对象, 整数型, "gdi32.dll", "DeleteObject", , 
    .参数 hObject, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 图片, 字节集, , "4,13", 
.程序集变量 初始牌序, 整数型, , "52", 
.程序集变量 洗后牌序, 整数型, , "52", 
.程序集变量 对战牌序1, 整数型, , "52", 玩家1的扑克
.程序集变量 对战牌序2, 整数型, , "52", 玩家2或电脑的扑克
.程序集变量 当前牌序, 整数型, , "4", 当前翻开的4张扑克牌
.程序集变量 扑克牌, 图片框, , "4", 
.程序集变量 匿名程序集变量_246, 空白型, , , 
.程序集变量 结果, 双精度小数型, , "3,5", 维1：1、2个数计算的结果；维2：3、4个数计算结果；维3：1、2个数计算结果与第3个数计算的结果
.程序集变量 表达式, 文本型, , "3,5", 同上，算术表达式
.程序集变量 匿名程序集变量_581, 空白型, , , 
.程序集变量 数值, 双精度小数型, , "4", 
.程序集变量 算式, 文本型, , "4", 
.程序集变量 匿名程序集变量_463, 空白型, , , 
.程序集变量 上次内容, 文本型, , "4", 
.程序集变量 匿名程序集变量_1195, 空白型, , , 
.程序集变量 与电脑对战, 逻辑型, , , 
.程序集变量 牌型索引, 整数型, , , 
.程序集变量 匿名程序集变量_1277, 空白型, , , 
.程序集变量 电脑算出, 逻辑型, , , 
.程序集变量 电脑表达式, 文本型, , , 在对战模式时，电脑计算出的表达式
.程序集变量 匿名程序集变量_1595, 空白型, , , 
.程序集变量 玩家算出, 逻辑型, , , 
.程序集变量 玩家时间, 整数型, , , 
.程序集变量 匿名程序集变量_1511, 空白型, , , 
.程序集变量 电脑级别, 整数型, , , 
.程序集变量 匿名程序集变量_2512, 空白型, , , 
.程序集变量 热键一, 整数型, , , 
.程序集变量 热键二, 整数型, , , 
.程序集变量 匿名程序集变量_2598, 空白型, , , 
.程序集变量 算出的玩家, 整数型, , , 1、玩家一；2、玩家二
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 索引, 整数型, , , 
.局部变量 圆角矩形区域句柄, 整数型, , , 
.局部变量 窗口句柄, 整数型, , , 

赋值 (窗口句柄, _启动窗口.取窗口句柄 ())
赋值 (圆角矩形区域句柄, 创建圆角矩形区域 (0, -50, ., ., 15, 15))
设置窗口区域 (窗口句柄, 圆角矩形区域句柄, 真)
卸载对象 (圆角矩形区域句柄)
置外形图片 (., #品红)
设置无边框窗口 (_启动窗口.取窗口句柄 ())
未知支持库函数_0 (取窗口句柄 (), “关闭”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “最小化”, 假, 假)
 ' 以上代码设置窗口外形，及无边框窗口系统右键菜单等

读取配置 () ' 读取各个系统设置项目

赋值 (图片 [1] [1], #方块1)
赋值 (图片 [1] [2], #方块2)
赋值 (图片 [1] [3], #方块3)
赋值 (图片 [1] [4], #方块4)
赋值 (图片 [1] [5], #方块5)
赋值 (图片 [1] [6], #方块6)
赋值 (图片 [1] [7], #方块7)
赋值 (图片 [1] [8], #方块8)
赋值 (图片 [1] [9], #方块9)
赋值 (图片 [1] [10], #方块10)
赋值 (图片 [1] [11], #方块11)
赋值 (图片 [1] [12], #方块12)
赋值 (图片 [1] [13], #方块13)
赋值 (图片 [2] [1], #梅花1)
赋值 (图片 [2] [2], #梅花2)
赋值 (图片 [2] [3], #梅花3)
赋值 (图片 [2] [4], #梅花4)
赋值 (图片 [2] [5], #梅花5)
赋值 (图片 [2] [6], #梅花6)
赋值 (图片 [2] [7], #梅花7)
赋值 (图片 [2] [8], #梅花8)
赋值 (图片 [2] [9], #梅花9)
赋值 (图片 [2] [10], #梅花10)
赋值 (图片 [2] [11], #梅花11)
赋值 (图片 [2] [12], #梅花12)
赋值 (图片 [2] [13], #梅花13)
赋值 (图片 [3] [1], #红心1)
赋值 (图片 [3] [2], #红心2)
赋值 (图片 [3] [3], #红心3)
赋值 (图片 [3] [4], #红心4)
赋值 (图片 [3] [5], #红心5)
赋值 (图片 [3] [6], #红心6)
赋值 (图片 [3] [7], #红心7)
赋值 (图片 [3] [8], #红心8)
赋值 (图片 [3] [9], #红心9)
赋值 (图片 [3] [10], #红心10)
赋值 (图片 [3] [11], #红心11)
赋值 (图片 [3] [12], #红心12)
赋值 (图片 [3] [13], #红心13)
赋值 (图片 [4] [1], #黑桃1)
赋值 (图片 [4] [2], #黑桃2)
赋值 (图片 [4] [3], #黑桃3)
赋值 (图片 [4] [4], #黑桃4)
赋值 (图片 [4] [5], #黑桃5)
赋值 (图片 [4] [6], #黑桃6)
赋值 (图片 [4] [7], #黑桃7)
赋值 (图片 [4] [8], #黑桃8)
赋值 (图片 [4] [9], #黑桃9)
赋值 (图片 [4] [10], #黑桃10)
赋值 (图片 [4] [11], #黑桃11)
赋值 (图片 [4] [12], #黑桃12)
赋值 (图片 [4] [13], #黑桃13)
赋值 (初始牌序, { 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413 }) ' 牌序数字的含义：花色+牌点。花色从1－4分别为方块、梅花、红心、黑桃
.计次循环首 (4, 索引)
    复制窗口组件 (扑克牌 [索引]) ' 创建4张扑克，用于显示
.计次循环尾 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()
事件转移 ()


.子程序 读取配置, 空白型, , 
.局部变量 设置值, 整数型, , , 

赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认扑克背景”, “1”)))
.如果真 (大于 (设置值, 16)) ' 系统只有15个扑克背景，加入此判断防止人工修改配置文件导致错误
    赋值 (设置值, 1)
.如果真结束
连续赋值 (多项选择 (设置值, #背景001, #背景002, #背景003, #背景004, #背景005, #背景006, #背景007, #背景008, #背景009, #背景010, #背景011, #背景012, #背景013, #背景014, #背景015, #背景016), .正常图片, .正常图片, .正常图片, .禁止图片, .正常图片, .禁止图片, .正常图片, .禁止图片)
连续赋值 (多项选择 (设置值, #背景按下001, #背景按下002, #背景按下003, #背景按下004, #背景按下005, #背景按下006, #背景按下007, #背景按下008, #背景按下009, #背景按下010, #背景按下011, #背景按下012, #背景按下013, #背景按下014, #背景按下015, #背景按下016), .按下图片, .按下图片, .按下图片, .按下图片)

赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认无牌背景”, “1”)))
.如果真 (大于 (设置值, 7)) ' 系统只有6个无牌背景，加入此判断防止人工修改配置文件导致错误
    赋值 (设置值, 2)
.如果真结束
连续赋值 (多项选择 (设置值, #无牌001, #无牌002, #无牌003, #无牌004, #无牌005, #无牌006, #无牌007), .禁止图片, .禁止图片)

赋值 (音效开, 等于 (读配置项 (“zn24.ini”, “option”, “背景音效”, “1”), “1”)) ' 0,关；1,开
赋值 (音乐开, 等于 (读配置项 (“zn24.ini”, “option”, “背景音乐”, “1”), “1”)) ' 0,关；1,开
.如果真 (音乐开)
    播放音乐 (多项选择 (到整数 (读配置项 (“zn24.ini”, “option”, “默认音乐”, “5”)), #爱江山更爱美人, #北国之春, #九百九十九朵玫瑰, #萍聚, #梁祝, #致艾丽丝, #泰坦尼克号), 真)
.如果真结束
赋值 (热键一, 取代码 (读配置项 (“zn24.ini”, “option”, “玩家一热键”, “A”), ))
赋值 (热键二, 取代码 (读配置项 (“zn24.ini”, “option”, “玩家二热键”, “L”), ))


.子程序 洗牌, 空白型, , 
.局部变量 临时牌序, 整数型, , "52", 
.局部变量 索引, 整数型, , , 

置随机数种子 ()
复制数组 (临时牌序, 初始牌序) ' 初始牌为有序牌，复制到临时牌序中用于洗牌，保证初始牌序不被改变
清除数组 (洗后牌序)
.计次循环首 (4, 索引) ' 将4张用于显示的扑克隐藏
    赋值 (扑克牌 [索引], 可视, 假)
    扑克牌.移动 ( [索引], 157, 126, , )
    扑克牌.调整层次 ( [索引], #底层)
.计次循环尾 ()
.判断循环首 (大于 (取数组成员数 (临时牌序), 0)) ' 通过随机从数组中取出牌序号，再顺序排列，达到洗牌效果
    赋值 (索引, 取随机数 (1, 取数组成员数 (临时牌序)))
    加入成员 (洗后牌序, 临时牌序 [索引])
    删除成员 (临时牌序, 索引, 1)
.判断循环尾 ()
赋值 (.禁止, 假)


.子程序 发牌, 空白型, , 
.局部变量 索引, 整数型, , , 

.如果真 (小于 (取数组成员数 (洗后牌序), 4))
    界面信息框 (“剩余扑克牌已不足4张，请重新洗牌！”, #信息图标, )
    返回 ()
.如果真结束
.计次循环首 (4, 索引) ' 将4张显示的扑克隐藏
    赋值 (扑克牌 [索引], 可视, 假)
    扑克牌.移动 ( [索引], 157, 126, , )
    扑克牌.调整层次 ( [索引], #底层)
.计次循环尾 ()
#底层.调整层次 ()
.计次循环首 (4, 索引) ' 从洗后牌序中按顺序提取4张扑克显示
    赋值 (扑克牌 [索引], 图片, 图片 [计算花色 (洗后牌序 [索引])] [计算牌点 (洗后牌序 [索引])])
    赋值 (扑克牌 [索引], 可视, 真)
    赋值 (扑克牌 [索引], 标记, 到文本 (计算牌点 (洗后牌序 [索引])))
    .如果真 (大于 (到数值 (扑克牌 [索引], 标记), 10)) ' 对于牌点大于10的，按10点处理
        赋值 (扑克牌 [索引], 标记, “10”)
    .如果真结束
    .如果真 (音效开)
        播放音乐 (#发牌音, )
    .如果真结束
    扑克牌.移动 ( [索引], 相加 (28, 相乘 (相减 (索引, 1), 91)), 138, , ) ' 将4张扑克移动的相应的位置
    处理事件 ()
    不阻滞延时 (100) ' 给出发牌空隙，但不影响程序响应事件
.计次循环尾 ()
删除成员 (洗后牌序, 1, 4) ' 将发出的4张牌从洗后牌序中删除
.如果真 (等于 (取数组成员数 (洗后牌序), 0)) ' 如果牌已发完，则禁止扑克牌
    赋值 (.禁止, 真)
.如果真结束


.子程序 计算花色, 字节型, , 
.参数 序号, 整数型, , 

返回 (取整 (相除 (序号, 100))) ' 用整除100，从牌序数字中取出花色


.子程序 计算牌点, 字节型, , 
.参数 序号, 整数型, , 

返回 (求余数 (序号, 100)) ' 用求余数100，从牌序数字中取出牌点


.子程序 _图形按钮_扑克_被单击, 空白型, , 
清空 () ' 清空上次计算结果
发牌 ()
赋值 (.禁止, 假)


.子程序 _图形按钮_洗牌_被单击, 空白型, , 
清空 ()
洗牌 () ' 重新洗牌
赋值 (.禁止, 真)


.子程序 _图形按钮_电脑求解_被单击, 空白型, , 
.局部变量 临时数值, 双精度小数型, , "4", 
.局部变量 临时算式, 文本型, , "4", 
.局部变量 顺序组合, 文本型, , "12", 
.局部变量 索引, 整数型, , , 
.局部变量 序号, 整数型, , "4", 

赋值 (.列表项目, {  })
赋值 (临时数值 [1], 到数值 (扑克牌 [1].标记))
赋值 (临时数值 [2], 到数值 (扑克牌 [2].标记))
赋值 (临时数值 [3], 到数值 (扑克牌 [3].标记))
赋值 (临时数值 [4], 到数值 (扑克牌 [4].标记))
赋值 (临时算式 [1], 扑克牌 [1].标记)
赋值 (临时算式 [2], 扑克牌 [2].标记)
赋值 (临时算式 [3], 扑克牌 [3].标记)
赋值 (临时算式 [4], 扑克牌 [4].标记)

赋值 (顺序组合, { “1234”, “1243”, “1324”, “1342”, “1423”, “1432”, “2314”, “2341”, “2413”, “2431”, “3412”, “3421” }) ' 这里的数字为4张扑克用于计算的顺序，其中1、2位数字顺序互换，对计算结果没有影响，因此可以不考虑仅有1、2位数字顺序互换的其余数字排列顺序
.计次循环首 (12, 索引)
    赋值 (牌型索引, 索引) ' 当计算方式为1、2位计算得a，3、4位计算得b，然后再将a、b进行计算求24点时，3、4位两个数字的位置互换，并不影响计算结果，因此，可以省略此重复计算。这里在12种数字顺序中，只计算1、3、5、7、9、11这六种顺序。
    赋值 (数值 [1], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
    赋值 (数值 [2], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
    赋值 (数值 [3], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
    赋值 (数值 [4], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
    赋值 (算式 [1], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
    赋值 (算式 [2], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
    赋值 (算式 [3], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
    赋值 (算式 [4], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
    计算 ()
.计次循环尾 ()
.如果真 (等于 (取项目数 (), 0))
    “本题无解！”.加入项目 ()
.如果真结束


.子程序 计算, 空白型, , 
.局部变量 索引, 整数型, , , 
.局部变量 索引2, 整数型, , , 

核心计算 (数值 [1], 算式 [1], 数值 [2], 算式 [2], 1) ' 1、2位数值计算
.计次循环首 (5, 索引)
    核心计算 (结果 [1] [索引], 表达式 [1] [索引], 数值 [3], 算式 [3], 3) ' 1、2位数值计算结果，与第3位数值进行计算
    .计次循环首 (5, 索引2)
        核心计算 (结果 [3] [索引2], 表达式 [3] [索引2], 数值 [4], 算式 [4], 4) ' 前三位计算结果，与第4位数值进行计算
    .计次循环尾 ()
.计次循环尾 ()
.如果真 (等于 (求余数 (牌型索引, 2), 1)) ' 当计算方式为1、2位计算得a，3、4位计算得b，然后再将a、b进行计算求24点时，3、4位两个数字的位置互换，并不影响计算结果，因此，可以省略此重复计算。这里在12种数字顺序中，只计算1、3、5、7、9、11这六种顺序。
    核心计算 (数值 [3], 算式 [3], 数值 [4], 算式 [4], 2) ' 3、4位数值计算
    .计次循环首 (5, 索引)
        .计次循环首 (5, 索引2)
            核心计算 (结果 [1] [索引], 表达式 [1] [索引], 结果 [2] [索引2], 表达式 [2] [索引2], 4) ' 1、2位计算结果，与3、4位计算结果进行计算
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束
赋值 (.现行选中项, 0)


.子程序 核心计算, 空白型, , 
.参数 数1, 双精度小数型, , 
.参数 式1, 文本型, , 
.参数 数2, 双精度小数型, , 
.参数 式2, 文本型, , 
.参数 计算层次, 整数型, , 

.局部变量 最终结果, 双精度小数型, , , 
.局部变量 最终表达式, 文本型, , , 
.局部变量 临时表达式1, 文本型, , , 
.局部变量 临时表达式2, 文本型, , , 

.判断开始 (小于 (计算层次, 4))
    赋值 (结果 [计算层次] [1], 相加 (数1, 数2)) ' 加法
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [1], 取表达式 (临时表达式1, 临时表达式2, 1))
    
     ' 注：本来，减法也应用2种，即“数1－数2”和“数2－数1”，但实际上，允许相减得负值，只不过是增加几个实质一样而形式不同的表达式而已。例：a-(5-9) 与 a+(9-5)，其实质是完全一样的。所以，本处对数1和数2进行了判断，不允许小数减大数。
    .如果 (大于或等于 (相减 (数1, 数2), 0)) ' 减法
        赋值 (结果 [计算层次] [2], 相减 (数1, 数2))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (表达式 [计算层次] [2], 取表达式 (临时表达式1, 临时表达式2, 2))
    .否则
        赋值 (结果 [计算层次] [2], 相减 (数2, 数1))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (表达式 [计算层次] [2], 取表达式 (临时表达式2, 临时表达式1, 2))
    .如果结束
    
    赋值 (结果 [计算层次] [3], 相乘 (数1, 数2)) ' 乘法
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [3], 取表达式 (临时表达式1, 临时表达式2, 3))
    
    赋值 (结果 [计算层次] [4], 相除 (数1, 数2)) ' 除法1
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [4], 取表达式 (临时表达式1, 临时表达式2, 4))
    
    赋值 (结果 [计算层次] [5], 相除 (数2, 数1)) ' 除法2
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [5], 取表达式 (临时表达式2, 临时表达式1, 4))
    
.默认
    赋值 (最终结果, 相加 (数1, 数2)) ' 加法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式1, 临时表达式2, 1))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
    赋值 (最终结果, 相减 (数1, 数2)) ' 减法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式1, 临时表达式2, 2))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
    赋值 (最终结果, 相减 (数2, 数1)) ' 减法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式2, 临时表达式1, 2))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
    赋值 (最终结果, 相乘 (数1, 数2)) ' 乘法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式1, 临时表达式2, 3))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
    赋值 (最终结果, 相除 (数1, 数2)) ' 除法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式1, 临时表达式2, 4))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
    赋值 (最终结果, 相除 (数2, 数1)) ' 除法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (最终表达式, 取表达式 (临时表达式2, 临时表达式1, 4))
        .如果真 (等于 (最终表达式.选择 (), -1))
            最终表达式.加入项目 ()
        .如果真结束
        
    .如果真结束
    
.判断结束


.子程序 取表达式, 文本型, , 
.参数 表达式1, 文本型, , 
.参数 表达式2, 文本型, , 
.参数 运算符号, 整数型, , 

.局部变量 结果表达式, 文本型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (结果表达式, “”)
.判断开始 (等于 (运算符号, 1)) ' 加法
    赋值 (结果表达式, 相加 (表达式1, 多项选择 (运算符号, “＋”, “－”, “×”, “÷”), 表达式2))
.判断 (或者 (等于 (运算符号, 2), 等于 (运算符号, 3))) ' 减法或乘法
    .如果真 (等于 (运算符号, 3)) ' 对于减法，被减数表达式不需要加括号
        .如果真 (不等于 (到文本 (到数值 (表达式1)), 表达式1)) ' 表示式子中包含有运算符号，作为减数时，需考虑在两边加上括号
            .判断开始 (等于 (寻找文本 (表达式1, “(”, , 假), -1)) ' 含加号或减号，且没有括号
                .如果真 (或者 (不等于 (寻找文本 (表达式1, “＋”, , 假), -1), 不等于 (寻找文本 (表达式1, “－”, , 假), -1)))
                    赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
                .如果真结束
                
            .判断 (等于 (取文本左边 (表达式1, 1), “(”)) ' 括号在前的情况
                赋值 (临时文本, 取文本右边 (表达式1, 相减 (取文本长度 (表达式1), 寻找文本 (表达式1, “)”, , 假), 1)))
                .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                    赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
                .如果真结束
                
            .判断 (等于 (取文本右边 (表达式1, 1), “)”)) ' 括号在后的情况
                赋值 (临时文本, 取文本左边 (表达式1, 相减 (取文本长度 (表达式1), 寻找文本 (表达式1, “(”, , 假), 1)))
                .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                    赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
                .如果真结束
                
            .默认
                
            .判断结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (到文本 (到数值 (表达式2)), 表达式2)) ' 表示式子中包含有运算符号，作为减数时，需考虑在两边加上括号
        .判断开始 (等于 (寻找文本 (表达式2, “(”, , 假), -1)) ' 含加号或减号，且没有括号
            .如果真 (或者 (不等于 (寻找文本 (表达式2, “＋”, , 假), -1), 不等于 (寻找文本 (表达式2, “－”, , 假), -1)))
                赋值 (表达式2, 相加 (“(”, 表达式2, “)”))
            .如果真结束
            
        .判断 (等于 (取文本左边 (表达式2, 1), “(”)) ' 括号在前的情况
            赋值 (临时文本, 取文本右边 (表达式2, 相减 (取文本长度 (表达式2), 寻找文本 (表达式2, “)”, , 假), 1)))
            .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                赋值 (表达式2, 相加 (“(”, 表达式2, “)”))
            .如果真结束
            
        .判断 (等于 (取文本右边 (表达式2, 1), “)”)) ' 括号在后的情况
            赋值 (临时文本, 取文本左边 (表达式2, 相减 (取文本长度 (表达式2), 寻找文本 (表达式2, “(”, , 假), 1)))
            .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                赋值 (表达式2, 相加 (“(”, 表达式2, “)”))
            .如果真结束
            
        .默认
            
        .判断结束
        
    .如果真结束
    赋值 (结果表达式, 相加 (表达式1, 多项选择 (运算符号, “＋”, “－”, “×”, “÷”), 表达式2))
.判断 (等于 (运算符号, 4)) ' 除法
    .如果真 (不等于 (到文本 (到数值 (表达式1)), 表达式1)) ' 表示式子中包含有运算符号，作为被除数时，需考虑在两边加上括号
        .判断开始 (等于 (寻找文本 (表达式1, “(”, , 假), -1)) ' 含加号或减号，且没有括号
            .如果真 (或者 (不等于 (寻找文本 (表达式1, “＋”, , 假), -1), 不等于 (寻找文本 (表达式1, “－”, , 假), -1)))
                赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
            .如果真结束
            
        .判断 (等于 (取文本左边 (表达式1, 1), “(”)) ' 括号在前的情况
            赋值 (临时文本, 取文本右边 (表达式1, 相减 (取文本长度 (表达式1), 寻找文本 (表达式1, “)”, , 假), 1)))
            .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
            .如果真结束
            
        .判断 (等于 (取文本右边 (表达式1, 1), “)”)) ' 括号在后的情况
            赋值 (临时文本, 取文本左边 (表达式1, 相减 (取文本长度 (表达式1), 寻找文本 (表达式1, “(”, , 假), 1)))
            .如果真 (取反 (并且 (等于 (寻找文本 (临时文本, “＋”, , 假), -1), 等于 (寻找文本 (临时文本, “－”, , 假), -1)))) ' 括号外有加号或减号
                赋值 (表达式1, 相加 (“(”, 表达式1, “)”))
            .如果真结束
            
        .默认
            
        .判断结束
        
    .如果真结束
    .如果真 (不等于 (到文本 (到数值 (表达式2)), 表达式2)) ' 表示式子中包含有运算符号，作为除数时，需在两边加上括号
        赋值 (表达式2, 相加 (“(”, 表达式2, “)”))
    .如果真结束
    赋值 (结果表达式, 相加 (表达式1, 多项选择 (运算符号, “＋”, “－”, “×”, “÷”), 表达式2))
.默认
    
.判断结束
返回 (结果表达式)


.子程序 _图形按钮_指定牌点_被单击, 空白型, , 
载入 (指定牌点窗口, , 真)


.子程序 是否有解, 逻辑型, , 
.局部变量 索引, 整数型, , , 
.局部变量 索引2, 整数型, , , 

电脑快速求解 (数值 [1], 数值 [2], 1) ' 1、2位数值计算
电脑快速求解 (数值 [3], 数值 [4], 2) ' 3、4位数值计算
.计次循环首 (5, 索引)
    电脑快速求解 (结果 [1] [索引], 数值 [3], 3) ' 1、2位数值计算结果，与第3位数值进行计算
    .计次循环首 (5, 索引2)
        电脑快速求解 (结果 [3] [索引2], 数值 [4], 4) ' 前三位计算结果，与第4位数值进行计算
        .如果真 (电脑算出)
            赋值 (电脑算出, 假)
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
.计次循环首 (5, 索引)
    .计次循环首 (5, 索引2)
        电脑快速求解 (结果 [1] [索引], 结果 [2] [索引2], 4) ' 1、2位计算结果，与3、4位计算结果进行计算
        .如果真 (电脑算出)
            赋值 (电脑算出, 假)
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (假)


.子程序 电脑快速求解, 空白型, , 
.参数 数1, 双精度小数型, , 
.参数 数2, 双精度小数型, , 
.参数 计算层次, 整数型, , 

.局部变量 最终结果, 双精度小数型, , , 

赋值 (电脑算出, 假)
.判断开始 (小于 (计算层次, 4))
    赋值 (结果 [计算层次] [1], 相加 (数1, 数2)) ' 加法
    
     ' 注：本来，减法也应用2种，即“数1－数2”和“数2－数1”，但实际上，允许相减得负值，只不过是增加几个实质一样而形式不同的表达式而已。例：a-(5-9) 与 a+(9-5)，其实质是完全一样的。所以，本处对数1和数2进行了判断，不允许小数减大数。
    .如果 (大于或等于 (相减 (数1, 数2), 0)) ' 减法
        赋值 (结果 [计算层次] [2], 相减 (数1, 数2))
    .否则
        赋值 (结果 [计算层次] [2], 相减 (数2, 数1))
    .如果结束
    
    赋值 (结果 [计算层次] [3], 相乘 (数1, 数2)) ' 乘法
    
    赋值 (结果 [计算层次] [4], 相除 (数1, 数2)) ' 除法1
    
    赋值 (结果 [计算层次] [5], 相除 (数2, 数1)) ' 除法2
    
.默认
    赋值 (最终结果, 相加 (数1, 数2)) ' 加法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
    赋值 (最终结果, 相减 (数1, 数2)) ' 减法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
    赋值 (最终结果, 相减 (数2, 数1)) ' 减法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
    赋值 (最终结果, 相乘 (数1, 数2)) ' 乘法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
    赋值 (最终结果, 相除 (数1, 数2)) ' 除法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
    赋值 (最终结果, 相除 (数2, 数1)) ' 除法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (电脑算出, 真)
        返回 ()
    .如果真结束
    
.判断结束


.子程序 电脑计算, 逻辑型, , 
.局部变量 索引, 整数型, , , 
.局部变量 索引2, 整数型, , , 

电脑求解 (数值 [1], 算式 [1], 数值 [2], 算式 [2], 1) ' 1、2位数值计算

.如果真 (等于 (求余数 (牌型索引, 2), 1)) ' 当计算方式为1、2位计算得a，3、4位计算得b，然后再将a、b进行计算求24点时，3、4位两个数字的位置互换，并不影响计算结果，因此，可以省略此重复计算。这里在12种数字顺序中，只计算1、3、5、7、9、11这六种顺序。
    电脑求解 (数值 [3], 算式 [3], 数值 [4], 算式 [4], 2) ' 3、4位数值计算
    .计次循环首 (5, 索引)
        .计次循环首 (5, 索引2)
            电脑求解 (结果 [1] [索引], 表达式 [1] [索引], 结果 [2] [索引2], 表达式 [2] [索引2], 4) ' 1、2位计算结果，与3、4位计算结果进行计算
            .如果真 (电脑算出)
                返回 (真)
            .如果真结束
            处理事件 ()
        .计次循环尾 ()
        处理事件 ()
    .计次循环尾 ()
.如果真结束

.计次循环首 (5, 索引)
    电脑求解 (结果 [1] [索引], 表达式 [1] [索引], 数值 [3], 算式 [3], 3) ' 1、2位数值计算结果，与第3位数值进行计算
    .计次循环首 (5, 索引2)
        电脑求解 (结果 [3] [索引2], 表达式 [3] [索引2], 数值 [4], 算式 [4], 4) ' 前三位计算结果，与第4位数值进行计算
        .如果真 (电脑算出)
            返回 (真)
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
.计次循环尾 ()
返回 (假)


.子程序 电脑求解, 空白型, , 
.参数 数1, 双精度小数型, , 
.参数 式1, 文本型, , 
.参数 数2, 双精度小数型, , 
.参数 式2, 文本型, , 
.参数 计算层次, 整数型, , 

.局部变量 最终结果, 双精度小数型, , , 
.局部变量 临时表达式1, 文本型, , , 
.局部变量 临时表达式2, 文本型, , , 

.判断开始 (小于 (计算层次, 4))
    赋值 (结果 [计算层次] [1], 相加 (数1, 数2)) ' 加法
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [1], 取表达式 (临时表达式1, 临时表达式2, 1))
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
     ' 注：本来，减法也应用2种，即“数1－数2”和“数2－数1”，但实际上，允许相减得负值，只不过是增加几个实质一样而形式不同的表达式而已。例：a-(5-9) 与 a+(9-5)，其实质是完全一样的。所以，本处对数1和数2进行了判断，不允许小数减大数。
    .如果 (大于或等于 (相减 (数1, 数2), 0)) ' 减法
        赋值 (结果 [计算层次] [2], 相减 (数1, 数2))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (表达式 [计算层次] [2], 取表达式 (临时表达式1, 临时表达式2, 2))
    .否则
        赋值 (结果 [计算层次] [2], 相减 (数2, 数1))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (表达式 [计算层次] [2], 取表达式 (临时表达式2, 临时表达式1, 2))
    .如果结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    赋值 (结果 [计算层次] [3], 相乘 (数1, 数2)) ' 乘法
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [3], 取表达式 (临时表达式1, 临时表达式2, 3))
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    赋值 (结果 [计算层次] [4], 相除 (数1, 数2)) ' 除法1
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [4], 取表达式 (临时表达式1, 临时表达式2, 4))
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    赋值 (结果 [计算层次] [5], 相除 (数2, 数1)) ' 除法2
    赋值 (临时表达式1, 式1)
    赋值 (临时表达式2, 式2)
    赋值 (表达式 [计算层次] [5], 取表达式 (临时表达式2, 临时表达式1, 4))
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
.默认
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相加 (数1, 数2)) ' 加法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式1, 临时表达式2, 1))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相减 (数1, 数2)) ' 减法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式1, 临时表达式2, 2))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相减 (数2, 数1)) ' 减法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式2, 临时表达式1, 2))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相乘 (数1, 数2)) ' 乘法
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式1, 临时表达式2, 3))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相除 (数1, 数2)) ' 除法1
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式1, 临时表达式2, 4))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
    .如果真 (玩家算出) ' 玩家算出时，不再继续计算
        返回 ()
    .如果真结束
    赋值 (最终结果, 相除 (数2, 数1)) ' 除法2
    .如果真 (并且 (大于 (最终结果, 23.99999), 小于 (最终结果, 24.00001)))
        赋值 (临时表达式1, 式1)
        赋值 (临时表达式2, 式2)
        赋值 (电脑表达式, 取表达式 (临时表达式2, 临时表达式1, 4))
        .如果真 (与电脑对战)
            赋值 (电脑算出, 真)
            赋值 (.禁止, 真)
            返回 ()
        .如果真结束
        
    .如果真结束
    处理事件 ()
    .如果真 (与电脑对战)
        不阻滞延时 (电脑级别)
    .如果真结束
    
.判断结束


.子程序 电脑开始计算, 空白型, , 
.局部变量 临时数值, 双精度小数型, , "4", 
.局部变量 临时算式, 文本型, , "4", 
.局部变量 顺序组合, 文本型, , "12", 
.局部变量 索引, 整数型, , , 
.局部变量 序号, 整数型, , "4", 
.局部变量 是否有解, 逻辑型, , , 

赋值 (是否有解, 假)
赋值 (.列表项目, {  })
赋值 (临时数值 [1], 到数值 (扑克牌 [1].标记))
赋值 (临时数值 [2], 到数值 (扑克牌 [2].标记))
赋值 (临时数值 [3], 到数值 (扑克牌 [3].标记))
赋值 (临时数值 [4], 到数值 (扑克牌 [4].标记))
赋值 (临时算式 [1], 扑克牌 [1].标记)
赋值 (临时算式 [2], 扑克牌 [2].标记)
赋值 (临时算式 [3], 扑克牌 [3].标记)
赋值 (临时算式 [4], 扑克牌 [4].标记)

赋值 (顺序组合, { “1234”, “1243”, “1324”, “1342”, “1423”, “1432”, “2314”, “2341”, “2413”, “2431”, “3412”, “3421” }) ' 1、2位数字顺序互换，对计算结果没有影响，因此可以不考虑仅有1、2位数字顺序互换的其余数字排列顺序
.计次循环首 (12, 索引)
    赋值 (数值 [1], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
    赋值 (数值 [2], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
    赋值 (数值 [3], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
    赋值 (数值 [4], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
    赋值 (算式 [1], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
    赋值 (算式 [2], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
    赋值 (算式 [3], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
    赋值 (算式 [4], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
    赋值 (是否有解, 是否有解 ())
    .如果真 (是否有解)
        跳出循环 ()
    .如果真结束
    处理事件 ()
.计次循环尾 ()
赋值 (与电脑对战, 真)
.如果 (是否有解)
    赋值 (.禁止, 假) ' 在电脑快速判断是否有解后，再允许玩家点击“算出”按钮，防止玩家乱点
    不阻滞延时 (4000) ' 延时4秒后开始计算，以免电脑反应太快，玩家来不及看牌
    .计次循环首 (12, 索引)
        .如果真 (玩家算出)
            返回 ()
        .如果真结束
        赋值 (牌型索引, 索引) ' 本参数用于减少相同类型的计算，即当计算方式为1、2位计算，3、4位计算，然后再将两次计算结果进行计算时，3、4位两个数字的位置互换，并不影响计算结果，因此，可以省略此重复计算
        赋值 (数值 [1], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
        赋值 (数值 [2], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
        赋值 (数值 [3], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
        赋值 (数值 [4], 临时数值 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
        赋值 (算式 [1], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 1, 1))])
        赋值 (算式 [2], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 2, 1))])
        赋值 (算式 [3], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 3, 1))])
        赋值 (算式 [4], 临时算式 [到数值 (取文本中间 (顺序组合 [索引], 4, 1))])
        .如果真 (等于 (电脑计算 (), 真))
            跳出循环 ()
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    .如果真 (等于 (玩家算出, 假)) ' 判断是电脑算出跳出循环，还是玩家算出，电脑终止计算而跳出循环
        赋值 (.标题, 相加 (电脑表达式, “＝24”))
        界面信息框 (“哈哈，电脑我又赢了，还是我厉害呀！”, #信息图标, )
        加入成员 (对战牌序2, 当前牌序) ' 将当前显示的4张扑克加入到电脑的扑克排序中，并放置在最后
        连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视) ' 隐藏4张显示的扑克
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
        赋值 (.禁止, 假)
        赋值 (.禁止, 假)
        赋值 (.禁止, 真)
        .如果真 (等于 (取数组成员数 (对战牌序1), 0)) ' 判断玩家是否还有扑克
            赋值 (.禁止图片, .禁止图片)
            赋值 (.禁止, 真)
            界面信息框 (“对不起，你已经输光了所有的扑克牌！”, #信息图标, )
            赋值 (.禁止, 假)
            赋值 (.禁止, 真)
        .如果真结束
        
    .如果真结束
    
.否则
    不阻滞延时 (500)
    界面信息框 (“此题无解！别浪费时间了。”, 0, )
    加入成员 (对战牌序1, 当前牌序 [1]) ' 将各自的扑克放回各自的牌序尾部去
    加入成员 (对战牌序1, 当前牌序 [2])
    加入成员 (对战牌序2, 当前牌序 [3])
    加入成员 (对战牌序2, 当前牌序 [4])
    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视) ' 隐藏4张显示的扑克
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
.如果结束


.子程序 _图形按钮_玩家扑克_被单击, 空白型, , 
赋值 (.内容, “”)
赋值 (.可视, 假)
赋值 (玩家算出, 假)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式：”)
对战发牌 ()
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真) ' 先禁止玩家点击“算出”按钮，等待电脑快速判断是否有解后才允许，防止用户发牌后直接点“算出”按钮，导致程序错误
电脑开始计算 ()


.子程序 对战洗牌, 空白型, , 
.局部变量 临时牌序, 整数型, , "52", 
.局部变量 索引, 整数型, , , 

置随机数种子 ()
复制数组 (临时牌序, 初始牌序)
清除数组 (对战牌序1)
清除数组 (对战牌序2)
.计次循环首 (4, 索引) ' 隐藏4张显示的扑克
    赋值 (扑克牌 [索引], 可视, 假)
    扑克牌.移动 ( [索引], 157, 126, , )
    扑克牌.调整层次 ( [索引], #底层)
.计次循环尾 ()
.判断循环首 (大于 (取数组成员数 (临时牌序), 0)) ' 从顺序牌序中随机取出扑克，加入到洗后牌序中，达到洗牌效果
    赋值 (索引, 取随机数 (1, 取数组成员数 (临时牌序)))
    .如果 (小于 (取数组成员数 (对战牌序1), 26)) ' 前26张给玩家1，后26给电脑或玩家2
        加入成员 (对战牌序1, 临时牌序 [索引])
    .否则
        加入成员 (对战牌序2, 临时牌序 [索引])
    .如果结束
    删除成员 (临时牌序, 索引, 1)
.判断循环尾 ()
.判断开始 (等于 (.现行子夹, 2)) ' 挑战电脑
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    赋值 (.禁止, 假)
.判断 (等于 (.现行子夹, 3)) ' 双人对战
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
.默认
    
.判断结束


.子程序 对战发牌, 空白型, , 
.局部变量 索引, 整数型, , , 

.计次循环首 (4, 索引)
    赋值 (扑克牌 [索引], 可视, 假)
    扑克牌.调整层次 ( [索引], #底层)
    .如果 (小于或等于 (索引, 2))
        扑克牌.移动 ( [索引], 21, 128, , ) ' 玩家1的牌
    .否则
        扑克牌.移动 ( [索引], 294, 128, , ) ' 玩家2的牌
    .如果结束
    
.计次循环尾 ()
#底层.调整层次 ()
.计次循环首 (4, 索引)
    .如果真 (等于 (索引, 3)) ' 玩家1发牌与电脑发牌之间稍留空隙时间
        不阻滞延时 (500)
    .如果真结束
    .如果 (小于或等于 (索引, 2))
        赋值 (扑克牌 [索引], 图片, 图片 [计算花色 (对战牌序1 [索引])] [计算牌点 (对战牌序1 [索引])]) ' 玩家1扑克
        赋值 (扑克牌 [索引], 标记, 到文本 (计算牌点 (对战牌序1 [索引])))
    .否则
        赋值 (扑克牌 [索引], 图片, 图片 [计算花色 (对战牌序2 [相减 (索引, 2)])] [计算牌点 (对战牌序2 [相减 (索引, 2)])]) ' 电脑扑克
        赋值 (扑克牌 [索引], 标记, 到文本 (计算牌点 (对战牌序2 [相减 (索引, 2)])))
    .如果结束
    赋值 (扑克牌 [索引], 可视, 真)
    .如果真 (大于 (到数值 (扑克牌 [索引], 标记), 10)) ' 如果牌点大于10，按10点计算
        赋值 (扑克牌 [索引], 标记, “10”)
    .如果真结束
    .如果真 (音效开)
        播放音乐 (#发牌音, )
    .如果真结束
    扑克牌.移动 ( [索引], 相加 (28, 相乘 (相减 (索引, 1), 91)), 138, , ) ' 将扑克显示的相应位置
    扑克牌.调整层次 ( [索引], #顶层)
    处理事件 ()
    不阻滞延时 (100)
.计次循环尾 ()
赋值 (当前牌序 [1], 对战牌序1 [1]) ' 记录当前显示的4张扑克到“当前牌序”
赋值 (当前牌序 [2], 对战牌序1 [2])
赋值 (当前牌序 [3], 对战牌序2 [1])
赋值 (当前牌序 [4], 对战牌序2 [2])
删除成员 (对战牌序1, 1, 2)
删除成员 (对战牌序2, 1, 2)
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
.如果真 (或者 (等于 (取数组成员数 (对战牌序1), 0), 等于 (取数组成员数 (对战牌序2), 0)))
    赋值 (.禁止, 真)
.如果真结束


.子程序 _选择夹1_子夹被改变, 空白型, , 
.局部变量 索引, 整数型, , , 

.判断开始 (等于 (.现行子夹, 0))
    .计次循环首 (4, 索引)
        赋值 (扑克牌 [索引], 可视, 假)
    .计次循环尾 ()
.判断 (等于 (.现行子夹, 1))
    洗牌 ()
.判断 (等于 (.现行子夹, 2))
    对战洗牌 ()
.判断 (等于 (.现行子夹, 3))
    对战洗牌 ()
.判断 (等于 (.现行子夹, 4)) ' 进入系统设置界面时，设置画板背景透明
    连续赋值 (假, .可视, .可视, .可视)
    刷新显示 ()
    .移动 (.左边, .顶边, , )
    .复制 (.宽度, .高度, , , , )
    .移动 (.左边, .顶边, , )
    .复制 (.宽度, .高度, , , , )
    .移动 (.左边, .顶边, , )
    .复制 (.宽度, .高度, , , , )
    相加 (.左边, .左边).移动 (相加 (.顶边, .顶边), , )
    .复制 (.宽度, .高度, , , , )
    相加 (.左边, .左边).移动 (相加 (.顶边, .顶边), , )
    .复制 (.宽度, .高度, , , , )
    .移动 (.左边, .顶边, , )
    .复制 (.宽度, .高度, , , , )
    连续赋值 (真, .可视, .可视, .可视, .可视, .可视, .可视, .可视, .可视, .可视)
    
.默认
    
.判断结束


.子程序 _图形按钮_挑战洗牌_被单击, 空白型, , 
对战洗牌 ()
赋值 (.禁止, 假)
赋值 (.禁止图片, .正常图片)


.子程序 _图形按钮_玩家认输_被单击, 空白型, , 
.局部变量 索引, 整数型, , , 

.如果真 (等于 (界面信息框 (“不战而败可是最可耻的哦，你真的要主动认输吗？”, #确认取消钮, “确认一下下”), #确认钮))
    赋值 (玩家算出, 真)
    界面信息框 (“嘿嘿，那就不客气了，剩下的扑克牌全归我了。”, , “太爽了”)
    .计次循环首 (4, 索引)
        赋值 (扑克牌 [索引], 可视, 假)
    .计次循环尾 ()
    赋值 (.内容, “剩余牌数:0”)
    赋值 (.内容, “剩余牌数:52”)
    赋值 (.禁止图片, #无牌001)
    赋值 (.禁止, 假)
    连续赋值 (真, .禁止, .禁止, .禁止)
.如果真结束


.子程序 _图形按钮_玩家算出_被单击, 空白型, , 
赋值 (.可视, 真)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式(请用半角方式输入符号和数字，按回车键结束。)：”)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (玩家算出, 真)
获取焦点 ()
赋值 (玩家时间, 31)
赋值 (.可视, 真)
赋值 (.时钟周期, 1000) ' 倒计时30秒，等待玩家输入表达式


.子程序 _编辑框_结果表达式_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 用户结果, 双精度小数型, , , 
.局部变量 用户算式, 文本型, , , 
.局部变量 用户数字文本, 文本型, , "0", 
.局部变量 用户数字, 整数型, , "4", 
.局部变量 扑克数字, 整数型, , "4", 
.局部变量 索引, 整数型, , , 

.如果真 (等于 (键代码, #回车键)) ' 按回车键结束输入
    赋值 (.时钟周期, 0)
    赋值 (.可视, 假)
    赋值 (.内容, “30”)
    重画 ()
     ' 玩家算出 ＝ 假
     ' 以下代码判断输入的数字是否正确
    赋值 (用户算式, .内容)
    赋值 (用户算式, 子文本替换 (用户算式, “+”, “,”, , , 真)) ' 将所有运算符号变成“,”，以计算输入的数字个数
    赋值 (用户算式, 子文本替换 (用户算式, “-”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “*”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “/”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “(”, “”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “)”, “”, , , 真))
    赋值 (用户数字文本, 分割文本 (用户算式, “,”, ))
    .如果真 (不等于 (取数组成员数 (用户数字文本), 4))
        赋值 (.标题, .内容)
        赋值 (.可视, 假)
        界面信息框 (“哈哈，你输入的数字不足4位或输入的符号错误。想作弊，没门。这4张牌归我啦！”, 0, )
        加入成员 (对战牌序2, 当前牌序) ' 将所有4张扑克加入电脑的牌序中
        连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
        赋值 (.禁止, 假)
        赋值 (.禁止, 假)
        返回 ()
    .如果真结束
    
     ' 以下代码判断用户输入的数字，与当前显示的扑克数字是否一致
    .计次循环首 (4, 索引)
        赋值 (用户数字 [索引], 到整数 (用户数字文本 [索引]))
        赋值 (扑克数字 [索引], 到整数 (扑克牌 [索引], 标记))
    .计次循环尾 ()
    数组排序 (用户数字, )
    数组排序 (扑克数字, )
    .计次循环首 (4, 索引)
        .如果真 (不等于 (用户数字 [索引], 扑克数字 [索引]))
            赋值 (.标题, .内容)
            赋值 (.可视, 假)
            界面信息框 (“哈哈，你输入的数字不对吧。想作弊，没门。这4张牌归我啦！”, 0, )
            加入成员 (对战牌序2, 当前牌序)
            连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
            赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
            赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
            赋值 (.禁止, 假)
            赋值 (.禁止, 假)
            返回 ()
        .如果真结束
        
    .计次循环尾 ()
     ' 如果输入的数字正确，则进行计算，看输入的表达式是否结果为24
    赋值 (用户算式, .内容)
    赋值 (用户算式, 子文本替换 (用户算式, “＋”, “+”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “－”, “-”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “×”, “*”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “÷”, “/”, , , 真))
    赋值 (用户结果, 表达式计算 (用户算式))
    .如果真 (并且 (大于 (用户结果, 23.99999), 小于 (用户结果, 24.00001)))
        赋值 (用户结果, 24)
    .如果真结束
    赋值 (.内容, 相加 (.内容, “＝”, 到文本 (用户结果)))
    赋值 (.起始选择位置, -1)
    .如果 (不等于 (用户结果, 24)) ' 计算错误
        赋值 (.标题, .内容)
        赋值 (.可视, 假)
        界面信息框 (“哈哈，你算错了，该罚，这4张牌归我啦！”, #信息图标, )
        加入成员 (对战牌序2, 当前牌序)
        连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
        赋值 (.禁止, 假)
        赋值 (.禁止, 假)
    .否则
         ' 计算正确
        赋值 (.标题, .内容)
        赋值 (.可视, 假)
        加入成员 (对战牌序1, 当前牌序)
        连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
        赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
        赋值 (.禁止, 假)
        赋值 (.禁止, 假)
    .如果结束
    
    .如果真 (等于 (取数组成员数 (对战牌序1), 0)) ' 判断玩家是否还有扑克
        赋值 (.禁止图片, #无牌001)
        赋值 (.禁止, 真)
        界面信息框 (“对不起，你已经输光了所有的扑克牌！”, #信息图标, )
        赋值 (.禁止, 假)
        赋值 (.禁止, 真)
    .如果真结束
    .如果真 (等于 (取数组成员数 (对战牌序2), 0)) ' 判断电脑是否还有扑克
        赋值 (.禁止, 真)
        界面信息框 (“真厉害，你战胜电脑了！”, #信息图标, )
        赋值 (.禁止, 假)
        赋值 (.禁止, 真)
    .如果真结束
    
.如果真结束


.子程序 _图形按钮_关闭_被单击, 空白型, , 
结束 ()


.子程序 _图形按钮_最小化_被单击, 空白型, , 
赋值 (., 2)


.子程序 _图形按钮_练习_被单击, 空白型, , 
清空 ()
赋值 (.现行子夹, 1)
_选择夹1_子夹被改变 ()
赋值 (.可视, 真)


.子程序 _图形按钮_返回_被单击, 空白型, , 
赋值 (.现行子夹, 0)
_选择夹1_子夹被改变 ()
赋值 (.可视, 假)
连续赋值 (“0”, .标记, .标记) ' 将两个图片框的标记置0,因为，在帮助界面中，需要用到命令“取标记组件（）”，这样才不会出错。


.子程序 _图形按钮_人机_被单击, 空白型, , 
.局部变量 上次级别, 整数型, , , 

赋值 (.标题, “”)
赋值 (.内容, “”)
赋值 (.可视, 假)
赋值 (.现行子夹, 2)
_选择夹1_子夹被改变 ()
赋值 (.可视, 真)
赋值 (上次级别, 到数值 (读配置项 (“zn24.ini”, “option”, “默认级别”, “4”))) ' 读取默认级别
.判断开始 (等于 (上次级别, 1))
    赋值 (.选中, 真)
    连续赋值 (假, .选中, .选中, .选中)
    _单选框1_被单击 ()
.判断 (等于 (上次级别, 2))
    赋值 (.选中, 真)
    连续赋值 (假, .选中, .选中, .选中)
    _单选框2_被单击 ()
.判断 (等于 (上次级别, 3))
    赋值 (.选中, 真)
    连续赋值 (假, .选中, .选中, .选中)
    _单选框3_被单击 ()
.判断 (等于 (上次级别, 4))
    赋值 (.选中, 真)
    连续赋值 (假, .选中, .选中, .选中)
    _单选框4_被单击 ()
.默认
    
.判断结束


.子程序 _图形按钮_退出_被单击, 空白型, , 
结束 ()


.子程序 _单选框1_被单击, 空白型, , 
赋值 (电脑级别, 3)
写配置项 (“zn24.ini”, “option”, “默认级别”, “1”) ' 自动将用户选择的电脑级别保存为默认级别，下同


.子程序 _单选框2_被单击, 空白型, , 
赋值 (电脑级别, 50)
写配置项 (“zn24.ini”, “option”, “默认级别”, “2”)


.子程序 _单选框3_被单击, 空白型, , 
赋值 (电脑级别, 200)
写配置项 (“zn24.ini”, “option”, “默认级别”, “3”)


.子程序 _单选框4_被单击, 空白型, , 
赋值 (电脑级别, 400)
写配置项 (“zn24.ini”, “option”, “默认级别”, “4”)


.子程序 _图形按钮_帮助_被单击, 空白型, , 
.局部变量 默认标签, 标签, , , 
.局部变量 索引, 整数型, , , 
.局部变量 标记标签, 标签, , , 

赋值 (.现行子夹, 5)
赋值 (默认标签, )
默认标签.移动 (16, , 24) ' 将当前帮助标签高度增高
赋值 (默认标签.文本颜色, #蓝色)
.计次循环首 (6, 索引) ' 将其它标签高度置为默认
    .如果真 (不等于 (索引, 到数值 (默认标签.标记)))
        赋值 (标记标签, 取标记组件 (索引))
        标记标签.移动 (20, , 20)
        赋值 (标记标签.文本颜色, #黑色)
    .如果真结束
    
.计次循环尾 ()
赋值 (.可视, 假) ' 先隐藏，载入内容后再显示，以避免闪烁
赋值 (.内容, #游戏介绍)
赋值 (.可视, 真)
_启动窗口.重画 ()
赋值 (.可视, 真)


.子程序 _标签帮助1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 事件标签, 标签, , , 
.局部变量 索引, 整数型, , , 
.局部变量 标记标签, 标签, , , 

赋值 (事件标签, 取事件组件 ())
事件标签.移动 (16, , 24) ' 增高当前标签高度
赋值 (事件标签.文本颜色, #蓝色)
事件标签.刷新显示 ()
.计次循环首 (6, 索引) ' 将其它标签高度置为默认
    .如果真 (不等于 (索引, 到数值 (事件标签.标记)))
        赋值 (标记标签, 取标记组件 (索引))
        标记标签.移动 (20, , 20)
        赋值 (标记标签.文本颜色, #黑色)
        标记标签.刷新显示 ()
    .如果真结束
    
.计次循环尾 ()
赋值 (.可视, 假) ' 防止闪烁
.判断开始 (等于 (事件标签.标记, “1”))
    赋值 (.内容, #游戏介绍)
.判断 (等于 (事件标签.标记, “2”))
    赋值 (.内容, #规则算法)
.判断 (等于 (事件标签.标记, “3”))
    赋值 (.内容, #练习模式)
.判断 (等于 (事件标签.标记, “4”))
    赋值 (.内容, #挑战模式)
.判断 (等于 (事件标签.标记, “5”))
    赋值 (.内容, #双人对战)
.判断 (等于 (事件标签.标记, “6”))
    赋值 (.内容, #系统设置)
.默认
    
.判断结束
赋值 (.可视, 真)
_启动窗口.重画 ()


.子程序 __启动窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_启动窗口.发送信息 (161, 2, 0) ' 允许鼠标移动窗口


.子程序 _时钟1_周期事件, 空白型, , 
赋值 (玩家时间, 相减 (玩家时间, 1))
.如果真 (音效开)
    播放音乐 (#倒计时, )
.如果真结束
赋值 (.内容, 到文本 (玩家时间))
赋值 (.可视, 真)
.如果真 (等于 (玩家时间, 0)) ' 时间到仍未输入表达式结束，则算负
    赋值 (.时钟周期, 0)
    赋值 (.标题, .内容)
    赋值 (.可视, 假)
    界面信息框 (“哈哈，你还没算出吧！想耍赖，没门。这4张牌归我啦！”, 0, )
    加入成员 (对战牌序2, 当前牌序)
    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (.可视, 假)
    返回 ()
.如果真结束


.子程序 _图形按钮_设置_被单击, 空白型, , 
.局部变量 设置值, 整数型, , , 
.局部变量 索引, 整数型, , , 

停止播放 ()
赋值 (.现行子夹, 4)
_选择夹1_子夹被改变 ()
赋值 (.可视, 真)
 ' 进入设置界面时，先读取默认设置值
赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认扑克背景”, “1”)))
.如果真 (大于 (设置值, 16))
    赋值 (设置值, 1)
.如果真结束
赋值 (.图片, 多项选择 (设置值, #背景001, #背景002, #背景003, #背景004, #背景005, #背景006, #背景007, #背景008, #背景009, #背景010, #背景011, #背景012, #背景013, #背景014, #背景015, #背景016))
赋值 (.标记, 到文本 (设置值))
赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认无牌背景”, “2”)))
.如果真 (大于 (设置值, 7))
    赋值 (设置值, 2)
.如果真结束
赋值 (.图片, 多项选择 (设置值, #无牌001, #无牌002, #无牌003, #无牌004, #无牌005, #无牌006, #无牌007))
赋值 (.标记, 到文本 (设置值))
赋值 (.现行选中项, 0)
清空 ()
.计次循环首 (16, 索引)
    相加 (“图片”, 取文本右边 (相加 (“00”, 到文本 (索引)), 3)).加入项目 (索引)
    .如果真 (等于 (索引, 到整数 (.标记)))
        赋值 (.现行选中项, 相减 (取项目数 (), 1))
    .如果真结束
    
.计次循环尾 ()
赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “背景音效”, “1”))) ' 0,关；1,开
.如果 (等于 (设置值, 0))
    赋值 (.选中, 假)
    赋值 (.选中, 真)
.否则
    赋值 (.选中, 真)
    赋值 (.选中, 假)
.如果结束
赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “背景音乐”, “1”))) ' 0,关；1,开
.如果 (等于 (设置值, 0))
    赋值 (.选中, 假)
    赋值 (.选中, 真)
    赋值 (.禁止, 真)
.否则
    赋值 (.选中, 真)
    赋值 (.选中, 假)
    赋值 (.禁止, 假)
.如果结束
赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认音乐”, “5”)))
.如果真 (大于 (设置值, 7))
    赋值 (设置值, 1)
.如果真结束
清空 ()
“爱江山更爱美人”.加入项目 ()
“北国之春”.加入项目 ()
“九百九十九朵玫瑰”.加入项目 ()
“萍聚”.加入项目 ()
“梁祝”.加入项目 ()
“致艾丽丝”.加入项目 ()
“泰坦尼克号”.加入项目 ()
赋值 (.现行选中项, 相减 (设置值, 1))

赋值 (设置值, 到整数 (读配置项 (“zn24.ini”, “option”, “默认级别”, “3”)))
赋值 (.现行选中项, 相减 (设置值, 1))

赋值 (.内容, 读配置项 (“zn24.ini”, “option”, “玩家一热键”, “A”))
赋值 (.内容, 读配置项 (“zn24.ini”, “option”, “玩家二热键”, “L”))


.子程序 _组合框_背景设置_列表项被选择, 空白型, , 
.局部变量 索引, 整数型, , , 

.如果 (等于 (.现行选中项, 0)) ' 选择扑克背景时，在列表框中加入所有扑克背景
    清空 ()
    .计次循环首 (16, 索引)
        相加 (“图片”, 取文本右边 (相加 (“00”, 到文本 (索引)), 3)).加入项目 (索引)
        .如果真 (等于 (索引, 到整数 (.标记)))
            赋值 (.现行选中项, 相减 (取项目数 (), 1))
        .如果真结束
        
    .计次循环尾 ()
    
.否则
    清空 () ' 选择无牌背景时，在列表框中加入所有无牌背景
    .计次循环首 (7, 索引)
        相加 (“图片”, 取文本右边 (相加 (“00”, 到文本 (索引)), 3)).加入项目 (索引)
        .如果真 (等于 (索引, 到整数 (.标记)))
            赋值 (.现行选中项, 相减 (取项目数 (), 1))
        .如果真结束
        
    .计次循环尾 ()
.如果结束
获取焦点 ()


.子程序 _列表框_背景_列表项被选择, 空白型, , 
.局部变量 当前项标记, 整数型, , , 

赋值 (当前项标记, .取项目数值 (.现行选中项)) ' 实时预览所选择的背景
.如果 (等于 (.现行选中项, 0))
    赋值 (.图片, 多项选择 (当前项标记, #背景001, #背景002, #背景003, #背景004, #背景005, #背景006, #背景007, #背景008, #背景009, #背景010, #背景011, #背景012, #背景013, #背景014, #背景015, #背景016))
    赋值 (.标记, 到文本 (当前项标记))
    
.否则
    赋值 (.图片, 多项选择 (当前项标记, #无牌001, #无牌002, #无牌003, #无牌004, #无牌005, #无牌006, #无牌007))
    赋值 (.标记, 到文本 (当前项标记))
    
.如果结束


.子程序 __启动窗口_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 索引, 整数型, , , 
.局部变量 标记标签, 标签, , , 

.如果真 (等于 (键代码, #Esc键)) ' 无论在哪个界面，按下ESC键，相当于点击了“返回”按钮
    _图形按钮_返回_被单击 ()
.如果真结束

.判断开始 (等于 (.现行子夹, 0)) ' 窗口主界面，按下键盘1－6，相当于点击了1－6个按钮
    .判断开始 (等于 (键代码, #键1))
        _图形按钮_练习_被单击 ()
    .判断 (等于 (键代码, #键2))
        _图形按钮_人机_被单击 ()
    .判断 (等于 (键代码, #键3))
        _图形按钮_双人_被单击 ()
    .判断 (等于 (键代码, #键4))
        _图形按钮_设置_被单击 ()
    .判断 (等于 (键代码, #键5))
        _图形按钮_帮助_被单击 ()
    .判断 (等于 (键代码, #键6))
        _图形按钮_退出_被单击 ()
    .默认
        
    .判断结束
    
.判断 (等于 (.现行子夹, 5)) ' 在帮助界面中，设置用左右光标键改变帮助标签
    .判断开始 (等于 (键代码, #右光标键))
        .计次循环首 (6, 索引)
            赋值 (标记标签, 取标记组件 (索引))
            .如果真 (等于 (标记标签.高度, 24))
                标记标签.移动 (20, , 20)
                赋值 (标记标签.文本颜色, #黑色)
                标记标签.刷新显示 ()
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        赋值 (索引, 相加 (索引, 1))
        .如果真 (等于 (索引, 7))
            赋值 (索引, 1)
        .如果真结束
        赋值 (标记标签, 取标记组件 (索引))
        标记标签.移动 (16, , 24)
        赋值 (标记标签.文本颜色, #蓝色)
        标记标签.刷新显示 ()
        
        赋值 (.可视, 假)
        .判断开始 (等于 (索引, 1))
            赋值 (.内容, #游戏介绍)
        .判断 (等于 (索引, 2))
            赋值 (.内容, #规则算法)
        .判断 (等于 (索引, 3))
            赋值 (.内容, #练习模式)
        .判断 (等于 (索引, 4))
            赋值 (.内容, #挑战模式)
        .判断 (等于 (索引, 5))
            赋值 (.内容, #双人对战)
        .判断 (等于 (索引, 6))
            赋值 (.内容, #系统设置)
        .默认
            
        .判断结束
        赋值 (.可视, 真)
        _启动窗口.重画 ()
        
    .判断 (等于 (键代码, #左光标键))
        .计次循环首 (6, 索引)
            赋值 (标记标签, 取标记组件 (索引))
            .如果真 (等于 (标记标签.高度, 24))
                标记标签.移动 (20, , 20)
                赋值 (标记标签.文本颜色, #黑色)
                标记标签.刷新显示 ()
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        赋值 (索引, 相减 (索引, 1))
        .如果真 (等于 (索引, 0))
            赋值 (索引, 6)
        .如果真结束
        赋值 (标记标签, 取标记组件 (索引))
        标记标签.移动 (16, , 24)
        赋值 (标记标签.文本颜色, #蓝色)
        标记标签.刷新显示 ()
        
        赋值 (.可视, 假)
        .判断开始 (等于 (索引, 1))
            赋值 (.内容, #游戏介绍)
        .判断 (等于 (索引, 2))
            赋值 (.内容, #规则算法)
        .判断 (等于 (索引, 3))
            赋值 (.内容, #练习模式)
        .判断 (等于 (索引, 4))
            赋值 (.内容, #挑战模式)
        .判断 (等于 (索引, 5))
            赋值 (.内容, #双人对战)
        .判断 (等于 (索引, 6))
            赋值 (.内容, #系统设置)
        .默认
            
        .判断结束
        赋值 (.可视, 真)
        _启动窗口.重画 ()
        
    .默认
        
    .判断结束
    
.判断 (等于 (.现行子夹, 3)) ' 双人对战模式中，发牌及抢答热键
    .判断开始 (等于 (键代码, 热键一))
        .如果 (等于 (扑克牌 [1].可视, 假))
            _图形按钮_玩家扑克1_被单击 ()
        .否则
            .如果真 (等于 (.禁止, 假))
                _图形按钮_玩家算出1_被单击 ()
            .如果真结束
            
        .如果结束
        
    .判断 (等于 (键代码, 热键二))
        .如果 (等于 (扑克牌 [3].可视, 假))
            _图形按钮_玩家扑克2_被单击 ()
        .否则
            .如果真 (等于 (.禁止, 假))
                _图形按钮_玩家算出2_被单击 ()
            .如果真结束
            
        .如果结束
        
    .默认
        
    .判断结束
    
.默认
    
.判断结束


.子程序 _透明标签_打开_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.选中, 真)
赋值 (.选中, 假)


.子程序 _透明标签_关闭_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.选中, 真)
赋值 (.选中, 假)


.子程序 _透明标签_打开1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.禁止, 假)


.子程序 _透明标签_关闭1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.禁止, 真)


.子程序 _编辑框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (或者 (小于 (键代码, 取代码 (“A”, )), 大于 (键代码, 取代码 (“Z”, )))) ' 热键只允许设置为字母A－Z
    返回 (假)
.如果真结束
赋值 (.内容, 到大写 (字符 (键代码)))
赋值 (.起始选择位置, -1)
返回 (假)


.子程序 _编辑框2_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (或者 (小于 (键代码, 取代码 (“A”, )), 大于 (键代码, 取代码 (“Z”, )))) ' 热键只允许设置为字母A－Z
    返回 (假)
.如果真结束
赋值 (.内容, 到大写 (字符 (键代码)))
赋值 (.起始选择位置, -1)
返回 (假)



.子程序 _图形按钮_设置确定_被单击, 空白型, , 
写配置项 (“zn24.ini”, “option”, “默认级别”, 到文本 (相加 (.现行选中项, 1)))
写配置项 (“zn24.ini”, “option”, “默认扑克背景”, .标记)
写配置项 (“zn24.ini”, “option”, “默认无牌背景”, .标记)
写配置项 (“zn24.ini”, “option”, “背景音效”, 选择 (.选中, “1”, “0”)) ' 0,关；1,开
写配置项 (“zn24.ini”, “option”, “背景音乐”, 选择 (.选中, “1”, “0”)) ' 0,关；1,开
写配置项 (“zn24.ini”, “option”, “默认音乐”, 到文本 (相加 (.现行选中项, 1)))
写配置项 (“zn24.ini”, “option”, “玩家一热键”, .内容)
写配置项 (“zn24.ini”, “option”, “玩家二热键”, .内容)
_图形按钮_返回_被单击 ()
读取配置 ()


.子程序 _图形按钮_设置取消_被单击, 空白型, , 
_图形按钮_返回_被单击 ()
读取配置 ()


.子程序 _图形按钮_双人_被单击, 空白型, , 
赋值 (.现行子夹, 3)
赋值 (算出的玩家, 0)
赋值 (.可视, 真)
赋值 (.内容, “”)
赋值 (.可视, 假)
_选择夹1_子夹被改变 ()
_启动窗口.获取焦点 ()


.子程序 玩家1发牌, 空白型, , 
.局部变量 索引, 整数型, , , 

.计次循环首 (2, 索引)
    赋值 (扑克牌 [索引], 可视, 假)
    扑克牌.调整层次 ( [索引], #底层)
    扑克牌.移动 ( [索引], 21, 128, , )
.计次循环尾 ()
#底层.调整层次 ()
.计次循环首 (2, 索引)
    赋值 (扑克牌 [索引], 图片, 图片 [计算花色 (对战牌序1 [索引])] [计算牌点 (对战牌序1 [索引])])
    赋值 (扑克牌 [索引], 标记, 到文本 (计算牌点 (对战牌序1 [索引])))
    赋值 (扑克牌 [索引], 可视, 真)
    .如果真 (大于 (到数值 (扑克牌 [索引], 标记), 10))
        赋值 (扑克牌 [索引], 标记, “10”)
    .如果真结束
    .如果真 (音效开)
        播放音乐 (#发牌音, )
    .如果真结束
    扑克牌.移动 ( [索引], 相加 (28, 相乘 (相减 (索引, 1), 91)), 138, , )
    扑克牌.调整层次 ( [索引], #顶层)
    处理事件 ()
    不阻滞延时 (100)
.计次循环尾 ()
赋值 (当前牌序 [1], 对战牌序1 [1])
赋值 (当前牌序 [2], 对战牌序1 [2])
删除成员 (对战牌序1, 1, 2)
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
.如果真 (或者 (等于 (取数组成员数 (对战牌序1), 0), 等于 (取数组成员数 (对战牌序2), 0))) ' 发牌后，发过牌的玩家禁止再次发牌
    赋值 (.禁止, 真)
.如果真结束


.子程序 玩家2发牌, 空白型, , 
.局部变量 索引, 整数型, , , 

.计次循环首 (2, 索引)
    赋值 (扑克牌 [相加 (索引, 2)].可视, 假)
    扑克牌.调整层次 ( [相加 (索引, 2)], #底层)
    扑克牌.移动 ( [相加 (索引, 2)], 294, 128, , )
.计次循环尾 ()
#底层.调整层次 ()
.计次循环首 (2, 索引)
    赋值 (扑克牌 [相加 (索引, 2)].图片, 图片 [计算花色 (对战牌序2 [索引])] [计算牌点 (对战牌序2 [索引])])
    赋值 (扑克牌 [相加 (索引, 2)].标记, 到文本 (计算牌点 (对战牌序2 [索引])))
    赋值 (扑克牌 [相加 (索引, 2)].可视, 真)
    .如果真 (大于 (到数值 (扑克牌 [相加 (索引, 2)].标记), 10))
        赋值 (扑克牌 [相加 (索引, 2)].标记, “10”)
    .如果真结束
    .如果真 (音效开)
        播放音乐 (#发牌音, )
    .如果真结束
    扑克牌.移动 ( [相加 (索引, 2)], 相加 (28, 相乘 (相加 (索引, 1), 91)), 138, , )
    扑克牌.调整层次 ( [相加 (索引, 2)], #顶层)
    处理事件 ()
    不阻滞延时 (100)
.计次循环尾 ()
赋值 (当前牌序 [3], 对战牌序2 [1])
赋值 (当前牌序 [4], 对战牌序2 [2])
删除成员 (对战牌序2, 1, 2)
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
.如果真 (或者 (等于 (取数组成员数 (对战牌序2), 0), 等于 (取数组成员数 (对战牌序1), 0))) ' 发牌后，在未计算结束前，发过牌的玩家禁止再次发牌
    赋值 (.禁止, 真)
.如果真结束


.子程序 _图形按钮_玩家扑克1_被单击, 空白型, , 
赋值 (.内容, “”)
赋值 (.可视, 假)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式：”)
玩家1发牌 ()
赋值 (.禁止, 真)
.如果真 (并且 (等于 (扑克牌 [1].可视, 真), 等于 (扑克牌 [3].可视, 真))) ' 两人均发了牌，且未计算
    连续赋值 (假, .禁止, .禁止, .禁止)
.如果真结束


.子程序 _图形按钮_玩家扑克2_被单击, 空白型, , 
赋值 (.内容, “”)
赋值 (.可视, 假)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式：”)
玩家2发牌 ()
赋值 (.禁止, 真)
.如果真 (并且 (等于 (扑克牌 [1].可视, 真), 等于 (扑克牌 [3].可视, 真))) ' 两人均发了牌，且未计算
    连续赋值 (假, .禁止, .禁止, .禁止)
.如果真结束


.子程序 _图形按钮_玩家算出1_被单击, 空白型, , 
赋值 (.可视, 真)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式(请用半角方式输入符号和数字，按回车键结束。)：”)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
获取焦点 ()
赋值 (算出的玩家, 1)
赋值 (玩家时间, 31)
赋值 (.内容, “30”)
赋值 (.可视, 真)
赋值 (.时钟周期, 1000) ' 等待玩家1输入


.子程序 _图形按钮_玩家算出2_被单击, 空白型, , 
赋值 (.可视, 真)
赋值 (.标题, “”)
赋值 (.内容, “计算结果表达式(请用半角方式输入符号和数字，按回车键结束。)：”)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (.禁止, 真)
获取焦点 ()
赋值 (算出的玩家, 2)
赋值 (玩家时间, 31)
赋值 (.内容, “30”)
赋值 (.可视, 真)
赋值 (.时钟周期, 1000) ' 等待玩家2输入


.子程序 _编辑框_结果表达式1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 用户结果, 双精度小数型, , , 
.局部变量 用户算式, 文本型, , , 
.局部变量 用户数字文本, 文本型, , "0", 
.局部变量 用户数字, 整数型, , "4", 
.局部变量 扑克数字, 整数型, , "4", 
.局部变量 索引, 整数型, , , 

.如果真 (等于 (键代码, #回车键)) ' 玩家输入结束
    赋值 (.时钟周期, 0)
    赋值 (.可视, 假)
    赋值 (.内容, “30”)
    重画 ()
     ' 以下代码判断输入的数字是否正确
    赋值 (用户算式, .内容)
    赋值 (用户算式, 子文本替换 (用户算式, “+”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “-”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “*”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “/”, “,”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “(”, “”, , , 真))
    赋值 (用户算式, 子文本替换 (用户算式, “)”, “”, , , 真))
    赋值 (用户数字文本, 分割文本 (用户算式, “,”, ))
    .如果 (不等于 (取数组成员数 (用户数字文本), 4))
        赋值 (.标题, .内容)
        赋值 (.可视, 假)
        界面信息框 (“你输入的数字不足4位，或输入的错误的符号，这4张牌归对家啦！”, 0, )
        .如果 (等于 (算出的玩家, 1))
            加入成员 (对战牌序2, 当前牌序)
            连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
            
        .否则
            加入成员 (对战牌序1, 当前牌序)
            连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
            
        .如果结束
        
    .否则
         ' 以下为输入数字是4位的情况
        .计次循环首 (4, 索引)
            赋值 (用户数字 [索引], 到整数 (用户数字文本 [索引]))
            赋值 (扑克数字 [索引], 到整数 (扑克牌 [索引], 标记))
        .计次循环尾 ()
        数组排序 (用户数字, )
        数组排序 (扑克数字, )
        .计次循环首 (4, 索引)
            .如果真 (不等于 (用户数字 [索引], 扑克数字 [索引]))
                赋值 (.标题, .内容)
                赋值 (.可视, 假)
                界面信息框 (“你输入的数字不对，这4张牌归对家啦！”, 0, )
                .如果 (等于 (算出的玩家, 1))
                    加入成员 (对战牌序2, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .否则
                    加入成员 (对战牌序1, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .如果结束
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (等于 (.可视, 真)) ' 在上面的循环中，如果未出现错误，编辑框不会被隐藏
             ' 输入的数字正确，则进行计算，看输入的表达式是否结果为24
            赋值 (用户算式, .内容)
            赋值 (用户算式, 子文本替换 (用户算式, “＋”, “+”, , , 真))
            赋值 (用户算式, 子文本替换 (用户算式, “－”, “-”, , , 真))
            赋值 (用户算式, 子文本替换 (用户算式, “×”, “*”, , , 真))
            赋值 (用户算式, 子文本替换 (用户算式, “÷”, “/”, , , 真))
            赋值 (用户结果, 表达式计算 (用户算式))
            .如果真 (并且 (大于 (用户结果, 23.99999), 小于 (用户结果, 24.00001)))
                赋值 (用户结果, 24)
            .如果真结束
            赋值 (.内容, 相加 (.内容, “＝”, 到文本 (用户结果)))
            赋值 (.起始选择位置, -1)
            .如果 (不等于 (用户结果, 24))
                赋值 (.标题, .内容)
                赋值 (.可视, 假)
                界面信息框 (“你算错了，该罚，这4张牌归对家啦！”, #信息图标, )
                .如果 (等于 (算出的玩家, 1))
                    加入成员 (对战牌序2, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .否则
                    加入成员 (对战牌序1, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .如果结束
                
            .否则
                赋值 (.标题, .内容)
                赋值 (.可视, 假)
                .如果 (等于 (算出的玩家, 1))
                    加入成员 (对战牌序1, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .否则
                    加入成员 (对战牌序2, 当前牌序)
                    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
                .如果结束
                
            .如果结束
            
        .如果真结束
        
    .如果结束
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    连续赋值 (假, .禁止, .禁止)
    连续赋值 (真, .禁止, .禁止, .禁止)
    
    .如果真 (等于 (取数组成员数 (对战牌序1), 0)) ' 判断玩家1是否还有扑克
        赋值 (.禁止图片, #无牌001)
        赋值 (.禁止, 真)
        界面信息框 (“玩家一已经输光了所有的扑克牌！”, #信息图标, )
        连续赋值 (真, .禁止, .禁止, .禁止, .禁止)
        赋值 (.禁止, 假)
        
    .如果真结束
    .如果真 (等于 (取数组成员数 (对战牌序2), 0)) ' 判断玩家2是否还有扑克
        赋值 (.禁止, 真)
        界面信息框 (“玩家二已经输光了所有的扑克牌！”, #信息图标, )
        连续赋值 (真, .禁止, .禁止, .禁止, .禁止)
        赋值 (.禁止, 假)
    .如果真结束
    
    _启动窗口.获取焦点 ()
.如果真结束


.子程序 _图形按钮_重新出牌_被单击, 空白型, , 
加入成员 (对战牌序1, 当前牌序 [1]) ' 各自收回当前显示的扑克
加入成员 (对战牌序1, 当前牌序 [2])
加入成员 (对战牌序2, 当前牌序 [3])
加入成员 (对战牌序2, 当前牌序 [4])
连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视)
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
连续赋值 (假, .禁止, .禁止)
连续赋值 (真, .禁止, .禁止, .禁止)
 ' 等待重新发牌


.子程序 _单选框_音乐开_被单击, 空白型, , 
赋值 (.禁止, 假)


.子程序 _单选框_音乐关_被单击, 空白型, , 
赋值 (.禁止, 真)


.子程序 _时钟2_周期事件, 空白型, , 
赋值 (玩家时间, 相减 (玩家时间, 1))
.如果真 (音效开)
    播放音乐 (#倒计时, )
.如果真结束
赋值 (.内容, 到文本 (玩家时间))
赋值 (.可视, 真)
.如果真 (等于 (玩家时间, 0)) ' 时间到仍未输入表达式结束，则算负
    赋值 (.时钟周期, 0)
    赋值 (.标题, .内容)
    赋值 (.可视, 假)
    界面信息框 (“你在规定的时间内没有输入算式，你的牌归对方所有啦！”, 0, )
    .如果 (等于 (算出的玩家, 1))
        加入成员 (对战牌序2, 当前牌序)
    .否则
        加入成员 (对战牌序1, 当前牌序)
    .如果结束
    连续赋值 (假, 扑克牌 [1].可视, 扑克牌 [2].可视, 扑克牌 [3].可视, 扑克牌 [4].可视, .可视)
    赋值 (.内容, “30”)
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序1))))
    赋值 (.内容, 相加 (“剩余牌数:”, 到文本 (取数组成员数 (对战牌序2))))
    连续赋值 (假, .禁止, .禁止)
    连续赋值 (真, .禁止, .禁止, .禁止)
    .如果真 (等于 (取数组成员数 (对战牌序1), 0)) ' 判断玩家1是否还有扑克
        赋值 (.禁止图片, #无牌001)
        赋值 (.禁止, 真)
        界面信息框 (“玩家一已经输光了所有的扑克牌！”, #信息图标, )
        连续赋值 (真, .禁止, .禁止, .禁止, .禁止)
        赋值 (.禁止, 假)
        
    .如果真结束
    .如果真 (等于 (取数组成员数 (对战牌序2), 0)) ' 判断玩家2是否还有扑克
        赋值 (.禁止, 真)
        界面信息框 (“玩家二已经输光了所有的扑克牌！”, #信息图标, )
        连续赋值 (真, .禁止, .禁止, .禁止, .禁止)
        赋值 (.禁止, 假)
    .如果真结束
    
    _启动窗口.获取焦点 ()
.如果真结束


.程序集 表达式计算程序集, , , 

.子程序 表达式计算, 双精度小数型, , 
.参数 表达式, 文本型, , 

.局部变量 临时算式, 文本型, , , 
.局部变量 右括号, 整数型, , , 
.局部变量 左括号, 整数型, , , 
.局部变量 括号内算式, 文本型, , , 

赋值 (临时算式, 表达式)
.如果 (等于 (寻找文本 (临时算式, “(”, , 假), -1)) ' 表达式内无括号
    返回 (无括号计算 (临时算式)) ' 对括号算式，直接返回计算结果
.否则
    赋值 (右括号, 寻找文本 (临时算式, “)”, , 假))
    赋值 (左括号, 倒找文本 (临时算式, “(”, 右括号, 假))
    赋值 (括号内算式, 取文本中间 (临时算式, 相加 (左括号, 1), 相减 (右括号, 左括号, 1))) ' 取出括号内的表达式，进行计算并替换
    赋值 (临时算式, 相加 (取文本左边 (临时算式, 相减 (左括号, 1)), 到文本 (无括号计算 (括号内算式)), 取文本右边 (临时算式, 相减 (取文本长度 (表达式), 右括号)))) ' 通过逐个括号计算，最后将表达式变成无括号表达式
    返回 (表达式计算 (临时算式)) ' 递归应用子程序
.如果结束


.子程序 无括号计算, 双精度小数型, , 
.参数 无括号算式, 文本型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 数字, 文本型, , "0", 
.局部变量 符号, 文本型, , "0", 
.局部变量 序号, 整数型, , , 
.局部变量 计算结果, 双精度小数型, , , 

赋值 (临时文本, 无括号算式)
.如果真 (或者 (不等于 (寻找文本 (无括号算式, “+”, , 假), -1), 不等于 (寻找文本 (无括号算式, “-”, , 假), -1), 不等于 (寻找文本 (无括号算式, “*”, , 假), -1), 不等于 (寻找文本 (无括号算式, “/”, , 假), -1))) ' 如果算式内存在加减乘除运算符号，则进行计算，否则，直接返回原值
    赋值 (临时文本, 子文本替换 (临时文本, “+”, “,”, , , 真)) ' 将所有运算符号均替换成“，”，以便取得所有的数值，并赋值到“数字”数组
    赋值 (临时文本, 子文本替换 (临时文本, “-”, “,”, , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “*”, “,”, , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “/”, “,”, , , 真))
    赋值 (数字, 分割文本 (临时文本, “,”, )) ' 表达式内所有的数字均赋值到“数字”数组
    赋值 (临时文本, 无括号算式)
    .计次循环首 (10, 序号)
        赋值 (临时文本, 子文本替换 (临时文本, 到文本 (相减 (序号, 1)), “”, , , 真)) ' 替换掉表达式内的所有数字
    .计次循环尾 ()
    赋值 (临时文本, 子文本替换 (临时文本, “.”, “”, , , 真)) ' 替换掉表达式内的小数点，只剩下运算符号
    .计次循环首 (取文本长度 (临时文本), 序号)
        加入成员 (符号, 取文本中间 (临时文本, 序号, 1)) ' 将所有运算符号分割到“符号”数组中
    .计次循环尾 ()
    
    
    赋值 (序号, 0)
    .计次循环首 (取数组成员数 (符号), )
        赋值 (序号, 相加 (序号, 1))
        .如果真 (大于 (序号, 取数组成员数 (符号))) ' 因为动态删除数组成员，所以需要对现有数组成员数进行判断，以免数组越界
            跳出循环 ()
        .如果真结束
        .判断开始 (等于 (符号 [序号], “*”))
            赋值 (计算结果, 相乘 (到数值 (数字 [序号]), 到数值 (数字 [相加 (序号, 1)])))
            赋值 (数字 [序号], 到文本 (计算结果)) ' 将计算结果替换原有数字，并删除后一数字（因为2个数字通过运算，已经变成一个数字）
            删除成员 (数字, 相加 (序号, 1), )
            删除成员 (符号, 序号, ) ' 删除已经运算过的符号
            赋值 (序号, 相减 (序号, 1)) ' 序号与数组成员同步减1
        .判断 (等于 (符号 [序号], “/”))
            赋值 (计算结果, 相除 (到数值 (数字 [序号]), 到数值 (数字 [相加 (序号, 1)]))) ' 同上
            赋值 (数字 [序号], 到文本 (计算结果))
            删除成员 (数字, 相加 (序号, 1), )
            删除成员 (符号, 序号, )
            赋值 (序号, 相减 (序号, 1)) ' 序号与数组成员同步减1
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    赋值 (计算结果, 到数值 (数字 [1]))
    .计次循环首 (取数组成员数 (符号), 序号) ' 本循环对剩下的加法和减法进行运算
        .判断开始 (等于 (符号 [序号], “+”))
            赋值 (计算结果, 相加 (计算结果, 到数值 (数字 [相加 (序号, 1)])))
        .判断 (等于 (符号 [序号], “-”))
            赋值 (计算结果, 相减 (计算结果, 到数值 (数字 [相加 (序号, 1)])))
        .默认
            
        .判断结束
        
    .计次循环尾 ()
    返回 (计算结果)
.如果真结束
返回 (到数值 (无括号算式))


.窗口程序集 指定牌点窗口程序集, , , 

.子程序 _指定牌点窗口_创建完毕, 空白型, , 
置外形图片 (., #品红)


.子程序 _图形按钮_确定_被单击, 空白型, , 
.局部变量 索引, 整数型, , , 

.如果真 (或者 (等于 (到数值 (.内容), 0), 大于 (到数值 (.内容), 10))) ' 以下代码判断输入的数字是否正确
    鸣叫 ()
    获取焦点 ()
    返回 ()
.如果真结束
.如果真 (或者 (等于 (到数值 (.内容), 0), 大于 (到数值 (.内容), 10)))
    鸣叫 ()
    获取焦点 ()
    返回 ()
.如果真结束
.如果真 (或者 (等于 (到数值 (.内容), 0), 大于 (到数值 (.内容), 10)))
    鸣叫 ()
    获取焦点 ()
    返回 ()
.如果真结束
.如果真 (或者 (等于 (到数值 (.内容), 0), 大于 (到数值 (.内容), 10)))
    鸣叫 ()
    获取焦点 ()
    返回 ()
.如果真结束
.计次循环首 (4, 索引) ' 隐藏主窗口显示的4张扑克
    赋值 (_启动窗口. [索引], 可视, 假)
.计次循环尾 ()
赋值 (_启动窗口. [1].图片, _启动窗口. [1] [到数值 (.内容)]) ' 重新显示
赋值 (_启动窗口. [2].图片, _启动窗口. [2] [到数值 (.内容)])
赋值 (_启动窗口. [3].图片, _启动窗口. [3] [到数值 (.内容)])
赋值 (_启动窗口. [4].图片, _启动窗口. [4] [到数值 (.内容)])
赋值 (_启动窗口. [1].标记, .内容)
赋值 (_启动窗口. [2].标记, .内容)
赋值 (_启动窗口. [3].标记, .内容)
赋值 (_启动窗口. [4].标记, .内容)
指定牌点窗口.销毁 ()
.计次循环首 (4, 索引)
    赋值 (_启动窗口. [索引], 可视, 真)
    .如果真 (音效开)
        播放音乐 (#发牌音, )
    .如果真结束
    _启动窗口.移动 (. [索引], 相加 (21, 相乘 (相减 (索引, 1), 91)), 138, , )
    处理事件 ()
    不阻滞延时 (100)
.计次循环尾 ()
重定义数组 (_启动窗口., 假, 4)
_启动窗口.清空 (.)


.子程序 _图形按钮_取消_被单击, 空白型, , 
重定义数组 (_启动窗口., 假, 4)
销毁 ()


.子程序 _编辑框1_内容被改变, 空白型, , 
.如果 (大于 (到数值 (.内容), 10)) ' 判断输入的数字是否正确，如果不正确，自动返回输入前的数字。以下同理
    鸣叫 ()
    赋值 (.内容, _启动窗口. [1])
    赋值 (.起始选择位置, -1)
.否则
    赋值 (_启动窗口. [1], .内容) ' 保留输入的数字到数组
.如果结束


.子程序 _编辑框2_内容被改变, 空白型, , 
.如果 (大于 (到数值 (.内容), 10))
    鸣叫 ()
    赋值 (.内容, _启动窗口. [2])
    赋值 (.起始选择位置, -1)
.否则
    赋值 (_启动窗口. [2], .内容)
.如果结束


.子程序 _编辑框3_内容被改变, 空白型, , 
.如果 (大于 (到数值 (.内容), 10))
    鸣叫 ()
    赋值 (.内容, _启动窗口. [3])
    赋值 (.起始选择位置, -1)
.否则
    赋值 (_启动窗口. [3], .内容)
.如果结束


.子程序 _编辑框4_内容被改变, 空白型, , 
.如果 (大于 (到数值 (.内容), 10))
    鸣叫 ()
    赋值 (.内容, _启动窗口. [4])
    赋值 (.起始选择位置, -1)
.否则
    赋值 (_启动窗口. [4], .内容)
.如果结束


.子程序 _编辑框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #回车键))
    _图形按钮_确定_被单击 ()
.判断 (等于 (键代码, #Esc键))
    _图形按钮_取消_被单击 ()
.默认
    
.判断结束


.子程序 _编辑框2_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (#回车键))
    未知函数_67177307 ()
.判断 (等于 (#Esc键))
    未知函数_67177308 ()
.默认
    
.判断结束


.子程序 _编辑框3_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (#回车键))
    未知函数_67177310 ()
.判断 (等于 (#Esc键))
    未知函数_67177311 ()
.默认
    
.判断结束


.子程序 _编辑框4_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (#回车键))
    未知函数_67177313 ()
.判断 (等于 (#Esc键))
    未知函数_67177314 ()
.默认
    
.判断结束


.程序集 扩展程序集, , , 

.子程序 界面信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 只支持“确定钮”和“确定取消钮”
.参数 窗口标题, 文本型, 可空, 

赋值 (全局信息, 提示信息)
赋值 (全局按钮, 按钮)
.如果真 (是否为空 (按钮))
    赋值 (按钮, #确认钮)
.如果真结束
.如果真 (并且 (不等于 (全局按钮, #确认钮), 不等于 (全局按钮, #确认取消钮))) ' 如果输入了其它按钮值，则自动调整为确定钮
    赋值 (全局按钮, #确认钮)
.如果真结束
.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息”)
.如果真结束
赋值 (全局标题, 窗口标题)
.如果真 (等于 (全局标题, “”))
    赋值 (全局标题, “信息”)
.如果真结束
载入 (信息框窗口, , 真)
返回 (全局返回)


.子程序 不阻滞延时, 空白型, , 
.参数 时间, 整数型, , 毫秒数

.计次循环首 (相除 (时间, 10), ) ' 将延时时间以20毫秒为单位分割，以免程序失去响应
    延时 (10)
    处理事件 ()
.计次循环尾 ()
延时 (求余数 (时间, 10))


.子程序 设置无边框窗口, 空白型, , 使无边框窗口显示任务栏图标和系统菜单
.参数 窗口句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

赋值 (返回值, 取窗口属性 (窗口句柄, -16))
赋值 (返回值, 位或 (返回值, #系统菜单))
置窗口属性 (窗口句柄, -16, 返回值)


.窗口程序集 信息框窗口程序集, , , 

.子程序 _信息框窗口_创建完毕, 空白型, , 
.局部变量 圆角矩形区域句柄, 整数型, , , 
.局部变量 窗口句柄, 整数型, , , 

.如果真 (等于 (音效开, 假))
    赋值 (信息框窗口., 2)
.如果真结束
赋值 (窗口句柄, 信息框窗口.取窗口句柄 ())
赋值 (圆角矩形区域句柄, 创建圆角矩形区域 (0, -5, 相加 (., 1), 相加 (., 5), 10, 10))
设置窗口区域 (窗口句柄, 圆角矩形区域句柄, 真)
卸载对象 (圆角矩形区域句柄)
 ' 以上代码设置信息框窗口外观
 ' 以下代码设置信息框窗口标题、信息及按钮
赋值 (.内容, 全局标题)
赋值 (.内容, 全局信息)
.如果 (等于 (全局按钮, #确认钮))
    赋值 (.可视, 真)
    赋值 (.可视, 假)
    赋值 (.可视, 假)
.否则
    赋值 (.可视, 假)
    赋值 (.可视, 真)
    赋值 (.可视, 真)
.如果结束


.子程序 _图形按钮_确定_被单击, 空白型, , 
赋值 (全局返回, #确认钮)
销毁 ()


.子程序 _图形按钮_确定1_被单击, 空白型, , 
赋值 (全局返回, #确认钮)
销毁 ()


.子程序 _图形按钮_取消_被单击, 空白型, , 
赋值 (全局返回, #取消钮)
销毁 ()


.子程序 _信息框窗口_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #回车键)) ' 响应系统默认的热键
    赋值 (全局返回, #确认钮)
    销毁 ()
.判断 (等于 (键代码, #Esc键))
    赋值 (全局返回, #取消钮)
    销毁 ()
.默认
    
.判断结束


.子程序 _信息框窗口_可否被关闭, 逻辑型, , 
返回 (假) ' 禁止关闭窗口



 ' 不属于任何一个程序集、类模块的函数：
