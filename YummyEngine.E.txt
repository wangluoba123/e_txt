 ' 文件类型：Windows模块源码

 ' 程序名称：丫米2D图像引擎
 ' 程序描述：Yummy 2D Graphics Engine
 ' 程序作者：尘羽泯
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 引擎风格_全屏模式, "1", 公开, 
.常量 引擎风格_隐藏鼠标, "2", 公开, 
.常量 引擎风格_反走样_点, "4", 公开, 开启反走样点后，对于像素点的描绘将更平滑细腻
.常量 引擎风格_反走样_线, "8", 公开, 开启反走样线后，对于线条的描绘将更平滑细腻
.常量 引擎风格_反走样_面, "16", 公开, 开启反走样线后，对于矩形的描绘将更平滑细腻
.常量 , , , 
.常量 引擎事件_按键按下, "1", 公开, 参数一：按键代码（整数型）
.常量 引擎事件_按键弹起, "2", 公开, 参数一：按键代码（整数型）
.常量 引擎事件_鼠标滚轮事件, "3", 公开, 参数一：转动量（整数型）
.常量 引擎事件_获得焦点, "4", 公开, 
.常量 引擎事件_失去焦点, "5", 公开, 
.常量 引擎事件_大小被改变, "6", 公开, 
.常量 引擎事件_将被销毁, "7", 公开, 
.常量 , , , 
.常量 鼠标左键, "1", 公开, 
.常量 鼠标右键, "2", 公开, 
.常量 鼠标中键, "4", 公开, 
.常量 , , , 
.常量 编辑框事件_内容被改变, "1", 公开, 参数一：现行内容（文本型），参数二：改变的内容（文本型），参数三：是否为删除内容（逻辑型）
.常量 编辑框事件_光标位置被移动, "2", 公开, 参数一：新光标位置（整数型），参数二：旧光标位置（整数型），参数三：起始选择位置（整数型），参数四：是否为用户手动移动（逻辑型）
.常量 , , , 
.常量 WM_QUIT, "18", , 
.常量 WM_CLOSE, "16", , 
.常量 WM_DESTROY, "2", , 
.常量 WM_KEYDOWN, "256", , 
.常量 WM_KEYUP, "257", , 
.常量 WM_LBUTTONDOWN, "513", , 
.常量 WM_LBUTTONUP, "514", , 
.常量 WM_LBUTTONDBLCLK, "515", , 
.常量 WM_RBUTTONDOWN, "516", , 
.常量 WM_RBUTTONDBLCLK, "518", , 
.常量 WM_RBUTTONUP, "517", , 
.常量 WM_MBUTTONDOWN, "519", , 
.常量 WM_MBUTTONDBLCLK, "521", , 
.常量 WM_MBUTTONUP, "520", , 
.常量 WM_MOUSEWHEEL, "522", , 
.常量 WM_SYSKEYDOWN, "260", , 
.常量 WM_SYSKEYUP, "261", , 
.常量 WM_SETFOCUS, "7", , 
.常量 WM_KILLFOCUS, "8", , 
.常量 WM_SIZE, "5", , 
.常量 GWL_WNDPROC, "-4", , 
.常量 WM_SETCURSOR, "32", , 
.常量 DLL, "“32.DLL”", , 
.常量 WM_CTLCOLOREDIT, "307", , 
.常量 WM_IME_CHAR, "646", , 
.常量 WM_CHAR, "258", , 
.常量 GL_EXT_texture_compression_s3tc, "“GL_EXT_texture_compression_s3tc”", , 
.常量 , , , 
.常量 IMAGE_DOS_SIGNATURE, "23117", , 
.常量 IMAGE_NT_SIGNATURE, "17744", , 
.常量 IMAGE_FILE_DLL, "8192", , 
.常量 IMAGE_ORDINAL_FLAG32, "2147483648", , 
.常量 IMAGE_FILE_EXECUTABLE_IMAGE, "2", , 
.常量 MEM_COMMIT, "4096", , 
.常量 MEM_RESERVE, "8192", , 
.常量 MEM_RELEASE, "32768", , 
.常量 PAGE_NOACCESS, "1", , 
.常量 PAGE_READONLY, "2", , 
.常量 PAGE_READWRITE, "4", , 
.常量 PAGE_WRITECOPY, "8", , 
.常量 PAGE_EXECUTE, "16", , 
.常量 PAGE_EXECUTE_READ, "32", , 
.常量 PAGE_EXECUTE_READWRITE, "64", , 
.常量 DLL_PROCESS_ATTACH, "1", , 
.常量 DLL_PROCESS_DETACH, "0", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库




数据类型 RECT, , 
    .成员 left, 整数型, , , 
    .成员 top, 整数型, , , 
    .成员 right, 整数型, , , 
    .成员 bottom, 整数型, , , 

数据类型 POINT, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 WNDCLASSEX, , 窗口类
    .成员 cbSize, 整数型, , , 结构字节数
    .成员 style, 整数型, , , 类风格
    .成员 lpfnWndProc, 子程序指针, , , 窗口过程地址
    .成员 cbClsExtra, 整数型, , , 窗口预留空间
    .成员 cbWndExtra, 整数型, , , 结构预留空间
    .成员 hInstance, 整数型, , , 窗口属于的模块句柄
    .成员 hIcon, 整数型, , , 图标句柄
    .成员 hCursor, 整数型, , , 光标句柄
    .成员 hbrBackground, 整数型, , , 窗口背景色
    .成员 lpszMenuName, 文本型, , , 默认菜单
    .成员 lpszClassName, 文本型, , , 窗口类名称
    .成员 hIconSm, 整数型, , , 小图标句柄

数据类型 TPIXELFORMATDESCRIPTOR, , 
    .成员 nSize, 整数型, , , 
    .成员 nVersion, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 iPixelType, 字节型, , , 
    .成员 cColorBits, 字节型, , , 
    .成员 cRedBits, 字节型, , , 
    .成员 cRedShift, 字节型, , , 
    .成员 cGreenBits, 字节型, , , 
    .成员 cGreenShift, 字节型, , , 
    .成员 cBlueBits, 字节型, , , 
    .成员 cBlueShift, 字节型, , , 
    .成员 cAlphaBits, 字节型, , , 
    .成员 cAlphaShift, 字节型, , , 
    .成员 cAccumBits, 字节型, , , 
    .成员 cAccumRedBits, 字节型, , , 
    .成员 cAccumGreenBits, 字节型, , , 
    .成员 cAccumBlueBits, 字节型, , , 
    .成员 cAccumAlphaBits, 字节型, , , 
    .成员 cDepthBits, 字节型, , , 
    .成员 cStencilBits, 字节型, , , 
    .成员 cAuxBuffers, 字节型, , , 
    .成员 iLayerType, 字节型, , , 
    .成员 bReserved, 字节型, , , 
    .成员 dwLayerMask, 整数型, , , 
    .成员 dwVisibleMask, 整数型, , , 
    .成员 dwDamageMask, 整数型, , , 

数据类型 TEXTMETRIC, , 
    .成员 tmHeight, 整数型, , , 字符上部高度(基线以上) 
    .成员 tmDescent, 整数型, , , 字符下部高度(基线以下) 
    .成员 tmInternalLeading, 整数型, , , 由tmHeight定义的字符高度的顶部空间数目 
    .成员 tmExternalLeading, 整数型, , , 夹在两行之间的空间数目 
    .成员 tmAveCharWidth, 整数型, , , 平均字符宽度 
    .成员 tmMaxCharWidth, 整数型, , , 最宽字符的宽度
    .成员 tmWeight, 整数型, , , 字体的粗细轻重程度 
    .成员 tmOverhang, 整数型, , , 加入某些拼接字体上的附加高度 
    .成员 tmDigitizedAspectX, 整数型, , , 字体设计所针对的设备水平方向 
    .成员 tmDigitizedAspectY, 整数型, , , 字体设计所针对的设备垂直方向 
    .成员 tmFirstChar, 文本型, , , 为字体定义的第一个字符 
    .成员 tmLastChar, 文本型, , , 为字体定义的最后一个字符 
    .成员 tmDefaultChar, 文本型, , , 字体中所没有字符的替代字符 
    .成员 tmBreakChar, 文本型, , , 用于拆字的字符 
    .成员 tmItalic, 字节型, , , 字体为斜体时非零 
    .成员 tmUnderlined, 字节型, , , 字体为下划线时非零 
    .成员 tmStruckOut, 字节型, , , 字体为删除线时非零 
    .成员 tmPitchAndFamily, 字节型, , , 字体间距(低4位)和族(高4位) 
    .成员 tmCharSet, 字节型, , , 字体的字符集 

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINT, , , 

数据类型 LARGE_INTEGER, , 
    .成员 Part, 长整数型, , , 

数据类型 YM_点, 公开, 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 

数据类型 YM_矩形, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 
    .成员 w, 整数型, , , 
    .成员 h, 整数型, , , 

数据类型 YM_位置, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 YM_颜色值, 公开, 
    .成员 r, 字节型, , , 
    .成员 g, 字节型, , , 
    .成员 b, 字节型, , , 
    .成员 a, 字节型, , , 

数据类型 YM_纹理, 公开, 
    .成员 纹理指针, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 字集, , 
    .成员 ListNum, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 Str, 短整数型, , , 
    .成员 used, 短整数型, , , 这是为了字节对齐

数据类型 IMAGE_DOS_HEADER, , 
    .成员 e_magic, 短整数型, , , 
    .成员 e_cblp, 短整数型, , , 
    .成员 e_cp, 短整数型, , , 
    .成员 e_crlc, 短整数型, , , 
    .成员 e_cparhdr, 短整数型, , , 
    .成员 e_minalloc, 短整数型, , , 
    .成员 e_maxalloc, 短整数型, , , 
    .成员 e_ss, 短整数型, , , 
    .成员 e_sp, 短整数型, , , 
    .成员 e_csum, 短整数型, , , 
    .成员 e_ip, 短整数型, , , 
    .成员 e_cs, 短整数型, , , 
    .成员 e_lfarlc, 短整数型, , , 
    .成员 e_ovno, 短整数型, , , 
    .成员 e_res, 短整数型, , "4", 
    .成员 e_oemid, 短整数型, , , 
    .成员 e_oeminfo, 短整数型, , , 
    .成员 e_res2, 短整数型, , "10", 
    .成员 e_lfanew, 整数型, , , 

数据类型 IMAGE_NT_HEADERS, , 
    .成员 Signature, 整数型, , , 
    .成员 FileHeader, IMAGE_FILE_HEADER, , , 
    .成员 OptionalHeader, IMAGE_OPTIONAL_HEADER, , , 

数据类型 IMAGE_FILE_HEADER, , 
    .成员 Machine, 短整数型, , , 
    .成员 NumberOfSections, 短整数型, , , 
    .成员 TimeDateStamp, 整数型, , , 
    .成员 PointerToSymbolTable, 整数型, , , 
    .成员 NumberOfSymbols, 整数型, , , 
    .成员 SizeOfOptionalHeader, 短整数型, , , 
    .成员 Characteristics, 短整数型, , , 

数据类型 IMAGE_OPTIONAL_HEADER, , 
    .成员 Magic, 短整数型, , , 
    .成员 MajorLinkerVersion, 字节型, , , 
    .成员 MinorLinkerVersion, 字节型, , , 
    .成员 SizeOfCode, 整数型, , , 
    .成员 SizeOfInitializedData, 整数型, , , 
    .成员 SizeOfUninitializedData, 整数型, , , 
    .成员 AddressOfEntryPoint, 整数型, , , 
    .成员 BaseOfCode, 整数型, , , 
    .成员 BaseOfData, 整数型, , , 
    .成员 ImageBase, 整数型, , , 
    .成员 SectionAlignment, 整数型, , , 
    .成员 FileAlignment, 整数型, , , 
    .成员 MajorOperatingSystemVersion, 短整数型, , , 
    .成员 MinorOperatingSystemVersion, 短整数型, , , 
    .成员 MajorImageVersion, 短整数型, , , 
    .成员 MinorImageVersion, 短整数型, , , 
    .成员 MajorSubsystemVersion, 短整数型, , , 
    .成员 MinorSubsystemVersion, 短整数型, , , 
    .成员 Win32VersionValue, 整数型, , , 
    .成员 SizeOfImage, 整数型, , , 
    .成员 SizeOfHeaders, 整数型, , , 
    .成员 CheckSum, 整数型, , , 
    .成员 Subsystem, 短整数型, , , 
    .成员 DllCharacteristics, 短整数型, , , 
    .成员 SizeOfStackReserve, 整数型, , , 
    .成员 SizeOfStackCommit, 整数型, , , 
    .成员 SizeOfHeapReserve, 整数型, , , 
    .成员 SizeOfHeapCommit, 整数型, , , 
    .成员 LoaderFlags, 整数型, , , 
    .成员 NumberOfRvaAndSizes, 整数型, , , 
    .成员 DataDirectory, IMAGE_DATA_DIRECTORY, , "16", 

数据类型 IMAGE_DATA_DIRECTORY, , 
    .成员 VirtualAddress, 整数型, , , 
    .成员 Size, 整数型, , , 

数据类型 IMAGE_SECTION_HEADER, , 
    .成员 Name, 字节型, , "8", 
    .成员 Misc, 整数型, , , 
    .成员 VirtualAddress, 整数型, , , 
    .成员 SizeOfRawData, 整数型, , , 
    .成员 PointerToRawData, 整数型, , , 
    .成员 PointerToRelocations, 整数型, , , 
    .成员 PointerToLinenumbers, 整数型, , , 
    .成员 NumberOfRelocations, 短整数型, , , 
    .成员 NumberOfLinenumbers, 短整数型, , , 
    .成员 Characteristics, 整数型, , , 

数据类型 IMAGE_BASE_RELOCATION, , 
    .成员 VirtualAddress, 整数型, , , 
    .成员 SizeOfBlock, 整数型, , , 

数据类型 IMAGE_IMPORT_DESCRIPTOR, , 
    .成员 OriginalFirstThunk, 整数型, , , 
    .成员 TimeDateStamp, 整数型, , , 
    .成员 ForwarderChain, 整数型, , , 
    .成员 Name, 整数型, , , 
    .成员 FirstThunk, 整数型, , , 

数据类型 IMAGE_IMPORT_BY_NAME, , 
    .成员 Hint, 短整数型, , , 
    .成员 Name, 整数型, , , 

数据类型 IMAGE_EXPORT_DIRECTORY, , 
    .成员 Characteristics, 整数型, , , 
    .成员 TimeDateStamp, 整数型, , , 
    .成员 MajorVersion, 短整数型, , , 
    .成员 MinorVersion, 短整数型, , , 
    .成员 Name, 整数型, , , 
    .成员 Base, 整数型, , , 
    .成员 NumberOfFunctions, 整数型, , , 
    .成员 NumberOfNames, 整数型, , , 
    .成员 AddressOfFunctions, 整数型, , , 
    .成员 AddressOfNames, 整数型, , , 
    .成员 AddressOfNameOrdinals, 整数型, , , 

.全局变量 模块句柄, 整数型, , , 
.全局变量 全局_编辑框焦点, 整数型, , , 
.全局变量 全局_编辑框内容, 文本型, , "0", 
.全局变量 全局_字集管理, 字集, , "0", 
.全局变量 拓展_允许压缩纹理, 逻辑型, , , 
.全局变量 匿名全局变量_30992, 空白型, , , 
.全局变量 Kernel32BaseAddress, 整数型, , , 
.全局变量 LoadLibraryA, 整数型, , , 
.全局变量 GetProcAddress, 整数型, , , 
.全局变量 KELNEL32A, 整数型, , , 
.全局变量 GLU32A, 整数型, , , 
.全局变量 GDI32A, 整数型, , , 
.全局变量 USER32A, 整数型, , , 
.全局变量 OPENGL32A, 整数型, , , 
.全局变量 OPENAL32A, 整数型, , , 
.全局变量 SelectObjectA, 整数型, , , 
.全局变量 DeleteObjectA, 整数型, , , 
.全局变量 CreateFontA, 整数型, , , 
.全局变量 MultiByteToWideCharA, 整数型, , , 
.全局变量 glColor4bA, 整数型, , , 
.全局变量 glRasterPos2fA, 整数型, , , 
.全局变量 glBitmapA, 整数型, , , 
.全局变量 glClearA, 整数型, , , 
.全局变量 glViewportA, 整数型, , , 
.全局变量 glOrthoA, 整数型, , , 
.全局变量 glDeleteListsA, 整数型, , , 
.全局变量 wglGetCurrentDCA, 整数型, , , 
.全局变量 glGenListsA, 整数型, , , 
.全局变量 wglUseFontBitmapsA, 整数型, , , 
.全局变量 glCallListA, 整数型, , , 
.全局变量 wglUseFontBitmapsWA, 整数型, , , 
.全局变量 GetTextMetricsA, 整数型, , , 
.全局变量 GetClientRectA, 整数型, , , 
.全局变量 GetWindowRectA, 整数型, , , 
.全局变量 glPushMatrixA, 整数型, , , 
.全局变量 glPopMatrixA, 整数型, , , 
.全局变量 glBeginA, 整数型, , , 
.全局变量 glEndA, 整数型, , , 
.全局变量 glTexCoord2fA, 整数型, , , 
.全局变量 glBindTextureA, 整数型, , , 
.全局变量 glEnableA, 整数型, , , 
.全局变量 glVertex2fA, 整数型, , , 
.全局变量 glRotatefA, 整数型, , , 
.全局变量 glGetStringA, 整数型, , , 
.全局变量 glCompressedTexImage2DA, 整数型, , , 
.全局变量 CreateWindowExA, 整数型, , , 
.全局变量 SendMessageA, 整数型, , , 
.全局变量 ShowWindowA, 整数型, , , 
.全局变量 SetWindowLongA, 整数型, , , 
.全局变量 SetCursorA, 整数型, , , 
.全局变量 CallWindowProcA, 整数型, , , 
.全局变量 glRectfA, 整数型, , , 
.全局变量 glGenTexturesA, 整数型, , , 
.全局变量 gluBuild2DMipmapsA, 整数型, , , 
.全局变量 glTexEnviA, 整数型, , , 
.全局变量 glTexParameteriA, 整数型, , , 
.全局变量 gluTexImage2DA, 整数型, , , 
.全局变量 RtlMoveMemoryA, 整数型, , , 
.全局变量 lstrcpynA, 整数型, , , 
.全局变量 alcGetStringA, 整数型, , , 

.程序集 调试程序集, , , 

.程序集变量 纹理指针, YM_纹理, , , 
.程序集变量 输入框, YM_编辑框, , , 
.程序集变量 文字, YM_文字渲染, , , 
.程序集变量 纹理指针2, YM_纹理, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
公共_置错误回调函数 (到整数 (&错误管理))
引擎_置屏幕背景色 (公共_到YM颜色 (0, 255, 255, 255))
引擎_创建 (位或 (#引擎风格_隐藏鼠标, 0))
输出调试文本 (引擎_取OpenGL版本号 ())
输出调试文本 (引擎_取OpenGL厂商 ())
赋值 (纹理指针, 纹理_载入bmp_24bit (读入文件 (“roomwall.bmp”)))
赋值 (纹理指针2, 纹理_载入dds_argb (读入文件 (“139.dds”)))
输入框.创建 (公共_到YM点 (600, 480), , , , 公共_到YM颜色 (255, 0, 255, 255))
输入框.置焦点 (真)
文字.创建 ()
引擎_启动循环 (到整数 (&消息循环), 60)
引擎_销毁 ()


.子程序 消息循环, 空白型, , 
.局部变量 a, 整数型, , , 
.局部变量 n, 整数型, , , 

引擎_清屏 ()
纹理_渲染 (纹理指针2)
纹理_渲染_拉伸 (纹理指针, 公共_到YM点 (245, 234), 公共_到YM点 (300, 300), 公共_到YM点 (128, 444), 公共_到YM点 (400, 484))
赋值 (a, 求余数 (取整 (相除 (相减 (取启动时间 (), 引擎_取启动时间 ()), 1000)), 2))
.计次循环首 (24, n)
    文字.显示 (多项选择 (相加 (a, 1), “一闪。.一闪..亮晶晶。。。。。。。一闪。.一闪..亮晶晶”, “English de xiaolv bijiao high...English de xiaolv bijiao hig”), 公共_到YM点 (0, 相乘 (24, 相减 (n, 1))), 公共_到YM颜色 (0, 0, 0, 255))
    
.计次循环尾 ()
.如果真 (引擎_取按键状态 (#A键))
    引擎_截图输出 (“a.bmp”)
.如果真结束
输入框.显示 (文字, 公共_到YM点 (31, 25), 公共_到YM颜色 (0, 0, 0, 255), , 2)
 ' 本源码来自易语言资源网(www.5A5X.com)
输入框.显示 (文字, 公共_到YM点 (32, 24), 公共_到YM颜色 (255, 255, 255, 255), , 2)
引擎_画矩形 (公共_到YM矩形 (32, 64, 43, 21), 公共_到YM颜色 (128, 234, 123, 192), 32)
 ' 调试输出 (输入框.取内容 ())
 ' glDrawString (“a”, 0, 0)
引擎_更新屏幕 ()
 ' 窗口1.标签1.标题 ＝ 到文本 (引擎_消息_取FPS ()) ＋ “,” ＋ 到文本 (引擎_消息_取FPS (1)) ＋ “,” ＋ 到文本 (引擎_消息_取FPS (2))
引擎_置标题 (相加 (到文本 (引擎_取FPS ()), “,”, 到文本 (引擎_取FPS (1)), “,”, 到文本 (引擎_取FPS (2))))

.子程序 错误管理, 空白型, , 
.参数 错误代码, 整数型, , 

 ' 本源码来自易语言资源网(www.5A5X.com)

输出调试文本 (公共_取错误代码对应内容 (错误代码))

.程序集 辅助程序集, , , 

.子程序 Call, 整数型, , 
.参数 函数指针, 整数型, , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)

.子程序 Call_1, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)

.子程序 Call_2, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_3, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_4, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_5, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_6, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)



.子程序 Call_7, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 
.参数 参数七, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_8, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 
.参数 参数七, 整数型, , 
.参数 参数八, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_9, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 
.参数 参数七, 整数型, , 
.参数 参数八, 整数型, , 
.参数 参数九, 整数型, , 


置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)

.子程序 Call_12, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 
.参数 参数七, 整数型, , 
.参数 参数八, 整数型, , 
.参数 参数九, 整数型, , 
.参数 参数十, 整数型, , 
.参数 参数十一, 整数型, , 
.参数 参数十二, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)


.子程序 Call_14, 整数型, , 
.参数 函数指针, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 
.参数 参数三, 整数型, , 
.参数 参数四, 整数型, , 
.参数 参数五, 整数型, , 
.参数 参数六, 整数型, , 
.参数 参数七, 整数型, , 
.参数 参数八, 整数型, , 
.参数 参数九, 整数型, , 
.参数 参数十, 整数型, , 
.参数 参数十一, 整数型, , 
.参数 参数十二, 整数型, , 
.参数 参数十三, 整数型, , 
.参数 参数十四, 整数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
返回 (0)

.子程序 公共_取高16位, 整数型, 公开, 
.参数 参数, 整数型, , 

返回 (右移 (参数, 16))

.子程序 公共_取低16位, 整数型, 公开, 
.参数 参数, 整数型, , 

返回 (位与 (参数, 65535))' 本源码来自易语言资源网(www.5A5X.com)

.子程序 公共_取高8位, 字节型, 公开, 
.参数 参数, 短整数型, , 

返回 (右移 (参数, 8))

.子程序 公共_取低8位, 字节型, 公开, 
.参数 参数, 短整数型, , 

返回 (位与 (参数, 255))

.子程序 公共_取高24位, 整数型, 公开, 
.参数 参数, 整数型, , 

返回 (右移 (参数, 24))

.子程序 公共_取低24位, 整数型, 公开, 
.参数 参数, 整数型, , 

返回 (位与 (参数, 16777215)) ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 GetKernel32BaseAddress, 整数型, , 取得Kernel32的基址,Bug修正,全系统支持,截止到Windows7 x86
 ' 00401000 > $  FC            cld
 ' 00401001   .  31D2          xor     edx, edx
 ' 00401003   .  64:8B52 30    mov     edx, dword ptr fs:[edx+30]
 ' 00401007   .  8B52 0C       mov     edx, dword ptr [edx+C]
 ' 0040100A   .  8B52 14       mov     edx, dword ptr [edx+14]
 ' 0040100D   >  8B72 28       mov     esi, dword ptr [edx+28]
 ' 00401010   .  6A 18         push    18
 ' 00401012   .  59            pop     ecx
 ' 00401013   .  31FF          xor     edi, edi
 ' 00401015   >  31C0          xor     eax, eax
 ' 00401017   .  AC            lods    byte ptr [esi]
 ' 00401018   .  3C 61         cmp     al, 61
 ' 0040101A   .  7C 02         jl      short 0040101E
 ' 0040101C   .  2C 20         sub     al, 20
 ' 0040101E   >  C1CF 0D       ror     edi, 0D
 ' 00401021   .  01C7          add     edi, eax
 ' 00401023   .^ E2 F0         loopd   short 00401015
 ' 00401025   .  81FF 5BBC4A6A cmp     edi, 6A4ABC5B
 ' 0040102B   .  8B5A 10       mov     ebx, dword ptr [edx+10]
 ' 0040102E   .  8B12          mov     edx, dword ptr [edx]
 ' 00401030   .^ 75 DB         jnz     short 0040100D
 ' 00401032      8BC3          mov     eax, ebx                         ;  kernel32.76770000
 ' 00401034      C9            leave
 ' 00401035      C3            retn
置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 252, 49, 210, 100, 139, 82, 48, 139, 82, 12, 139, 82, 20, 139, 114, 40, 106, 24, 89, 49, 255, 49, 192, 172, 60, 97, 124, 2, 44, 32, 193, 207, 13, 1, 199, 226, 240, 129, 255, 91, 188, 74, 106, 139, 90, 16, 139, 18, 117, 219, 139, 195, 201, 195 })
返回 (-1)

.子程序 SearchAPIAddressByName, 整数型, , 暴力搜索API
.参数 BaseAddress, 整数型, , 
.参数 Name, 整数型, , 

置入代码 ({ 129, 196, 4, 0, 0, 0, 139, 229, 93 }) ' 抵消头
置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 90, 88, 89, 82, 96, 137, 195, 137, 207, 48, 192, 174, 117, 253, 79, 41, 207, 135, 249, 139, 67, 60, 139, 116, 3, 120, 141, 116, 30, 24, 173, 146, 173, 80, 173, 149, 173, 149, 1, 216, 137, 124, 36, 24, 137, 76, 36, 20, 74, 116, 39, 139, 52, 144, 1, 222, 243, 166, 116, 10, 139, 124, 36, 24, 139, 76, 36, 20, 235, 234, 209, 226, 1, 213, 15, 183, 68, 29, 0, 193, 224, 2, 3, 4, 36, 139, 4, 3, 1, 216, 89, 137, 68, 36, 28, 97, 195 })
返回 (-1)

.子程序 SearchModuleHandle, 整数型, , 取得内存中模块的基址
.参数 ModuleName, 整数型, , 大写(地址为易语言的第一层地址)

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 100, 161, 48, 0, 0, 0, 139, 64, 12, 139, 64, 28, 139, 0, 80, 139, 64, 32, 139, 93, 8, 15, 182, 16, 128, 250, 0, 116, 34, 128, 250, 91, 124, 3, 128, 234, 32, 56, 19, 117, 15, 64, 64, 67, 15, 182, 11, 132, 201, 116, 8, 15, 182, 16, 235, 229, 88, 235, 209, 88, 139, 64, 8, 201, 195 })
返回 (-1)


.子程序 GetTextAddress, 整数型, , 取文本地址
.参数 文本, 文本型, , 文本型数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)


.子程序 GetByteArrayAddress, 整数型, , 
.参数 字节集, 字节集, , 

置入代码 ({ 51, 192, 139, 77, 8, 139, 9, 227, 9, 131, 73, 4, 0, 116, 3, 141, 65, 8, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetWndClassAddress, 整数型, , 取WndClass地址
.参数 WndClass, WNDCLASSEX, , WndClass数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetPDFAddress, 整数型, , 取PDF地址
.参数 PDF, TPIXELFORMATDESCRIPTOR, , PDF数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetRectAddress, 整数型, , 取Rect地址
.参数 Rect, RECT, , Rect数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetPointAddress, 整数型, , 取Point地址
.参数 Point, POINT, , Point数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetMsgAddress, 整数型, , 取Msg地址
.参数 Msg, MSG, , Msg数据

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)


.子程序 GetTextMetricAddress, 整数型, , 
.参数 TextMetric, TEXTMETRIC, , 

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetLargeIntegerAddress, 整数型, , LargeInteger
.参数 LargeInteger, LARGE_INTEGER, , 

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)


.子程序 GetYMColorAddress, 整数型, , 
.参数 YMColor, YM_颜色值, , 

置入代码 ({ 235, 20, 84, 104, 101, 67, 111, 100, 101, 77, 97, 100, 101, 66, 121, 90, 80, 67, 67, 90, 81, 0, 144, 139, 69, 8, 139, 0, 201, 194, 4, 0 })
返回 (-1)

.子程序 GetIntegerAddress, 整数型, , 
.参数 var, 整数型, 参考, 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
 ' mov eax,[ebp+8]
 ' leave
 ' retn
返回 (-1)


.子程序 GetBoolAddress, 整数型, , 
.参数 var, 逻辑型, 参考, 

置入代码 ({ 139, 69, 8, 201, 194, 4, 0 })
 ' mov eax,[ebp+8]
 ' leave
 ' retn
返回 (-1)

.子程序 GetAddressInteger, 整数型, , 
.参数 内存地址, 空白型, , 

置入代码 ({ 139, 93, 8, 139, 3, 201, 194, 4, 0 })
 ' mov ebx,[ebp+8]
 ' mov eax,[ebx]
 ' leave
 ' retn
返回 (-1)


.子程序 GetAddressShortInteger, 短整数型, , 
.参数 内存地址, 空白型, , 

置入代码 ({ 139, 93, 8, 102, 139, 3, 104, 0, 0, 0, 0, 102, 80, 88, 201, 195 })
 ' mov ebx,[ebp+8]
 ' mov ax,[ebx]
 ' push 0
 ' push ax
 ' pop eax
 ' leave
 ' retn
返回 (-1)


.子程序 GetAddressByte, 字节型, , 
.参数 内存地址, 空白型, , 

置入代码 ({ 139, 93, 8, 139, 3, 201, 195 })
 ' mov ebx,[ebp+8]
 ' mov eax,[ebx]
 ' leave
 ' retn
返回 (-1)


.子程序 BGR2RGB, 空白型, , 
.参数 字节集, 字节集, , 

置入代码 ({ 139, 69, 8, 139, 56, 139, 95, 4, 129, 199, 8, 0, 0, 0, 138, 7, 138, 103, 2, 136, 71, 2, 136, 39, 129, 199, 3, 0, 0, 0, 129, 235, 3, 0, 0, 0, 117, 232 })
 ' mov eax,[ebp+8]
 ' mov edi,[eax]
 ' mov ebx,[edi+4]
 ' add edi,8
 ' again:
 ' mov al,[edi+0]
 ' mov ah,[edi+2]
 ' mov [edi+2],al
 ' mov [edi+0],ah
 ' add edi,3
 ' sub ebx,3
 ' jne again

.子程序 BGRA2RGBA, 空白型, , 肥田方式
.参数 待转字节集, 字节集, , 

置入代码 ({ 139, 69, 8, 139, 56, 139, 79, 4, 193, 233, 2, 129, 199, 8, 0, 0, 0, 138, 7, 138, 95, 2, 136, 71, 2, 136, 31, 129, 199, 4, 0, 0, 0, 226, 238 })
 ' mov eax,[ebp+8]
 ' mov edi,[eax]
 ' mov ecx,[edi+4]
 ' shr ecx,2
 ' add edi,8
 ' again:
 ' mov al,[edi+0]
 ' mov bl,[edi+2]
 ' mov [edi+2],al
 ' mov [edi+0],bl
 ' add edi,4
 ' loop again

.子程序 逆转字节集, 字节集, , 
.参数 字节集, 字节集, , 

.局部变量 n, 整数型, , , 
.局部变量 新字节集, 字节集, , , 
.局部变量 temp, 字节型, , , 

赋值 (新字节集, 字节集)
.计次循环首 (相除 (取字节集长度 (字节集), 2), n)
    赋值 (temp, 新字节集 [n])
    赋值 (新字节集 [n], 新字节集 [相加 (相减 (取字节集长度 (字节集), n), 1)])
    赋值 (新字节集 [相加 (相减 (取字节集长度 (字节集), n), 1)], temp)
.计次循环尾 ()
返回 (新字节集)

.程序集 引擎程序集, , , 

.程序集变量 引擎事件, 整数型, , "7", 
.程序集变量 引擎是否已创建, 逻辑型, , , 
.程序集变量 窗口的句柄, 整数型, , , 
.程序集变量 启动的时间, 整数型, , , 
.程序集变量 消息循环执行次数, 整数型, , , 
.程序集变量 DC, 整数型, , , 
.程序集变量 RC, 整数型, , , 
.程序集变量 瞬时FPS, 小数型, , , 
.程序集变量 一秒内实际运行FPS, 整数型, , , 
.程序集变量 鼠标在屏幕内, 逻辑型, , , 
.程序集变量 鼠标坐标, POINT, , , 
.程序集变量 原始窗口消息地址, 整数型, , , 
.程序集变量 销毁引擎, 逻辑型, , , 
.程序集变量 是否隐藏鼠标, 逻辑型, , , 
.程序集变量 屏幕的宽度, 整数型, , , 
.程序集变量 屏幕的高度, 整数型, , , 
.程序集变量 自创建窗口, 逻辑型, , , 、
.程序集变量 屏幕背景色, YM_颜色值, , , 
.子程序 引擎_创建, 逻辑型, 公开, 创建引擎，成功返回真，失败返回假，并可以使用“公共_取最后错误()”取得创建失败的原因。
.参数 窗口标题, 文本型, 可空, 
.参数 窗口图标句柄, 整数型, 可空, 
.参数 窗口句柄, 整数型, 可空, 为空或为零时则默认自行创建窗口，可以绑定窗口控件句柄
.参数 屏幕宽度, 整数型, 可空, 为空或为零时则默认800
.参数 屏幕高度, 整数型, 可空, 为空或为零时则默认600
.参数 引擎风格, 整数型, 可空, 使用“位或()”把“#引擎风格_”开头的常量并起来

.局部变量 temp2, 文本型, , , 
.局部变量 用户区矩形, RECT, , , 
.局部变量 窗口矩形, RECT, , , 
.局部变量 glHintA, 整数型, , , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

.如果真 (引擎是否已创建)
    错误管理_ (1)
    返回 (假)
.如果真结束
.如果真 (等于 (Kernel32BaseAddress, 0))
    赋值 (Kernel32BaseAddress, GetKernel32BaseAddress ())
    .如果真 (等于 (Kernel32BaseAddress, 0))
        错误管理_ (35)
        返回 (假)
    .如果真结束
    赋值 (temp2, “LoadLibraryA”)
    赋值 (LoadLibraryA, SearchAPIAddressByName (Kernel32BaseAddress, GetTextAddress (temp2)))
    .如果真 (等于 (LoadLibraryA, 0))
        错误管理_ (37)
        返回 (假)
    .如果真结束
    赋值 (temp2, “GetProcAddress”)
    赋值 (GetProcAddress, SearchAPIAddressByName (Kernel32BaseAddress, GetTextAddress (temp2)))
    .如果真 (等于 (GetProcAddress, 0))
        错误管理_ (38)
        返回 (假)
    .如果真结束
    赋值 (temp2, 相加 (“KERNEL”, #DLL))
    赋值 (KELNEL32A, Call_1 (LoadLibraryA, GetTextAddress (temp2)))
    赋值 (temp2, 相加 (“OPENGL”, #DLL))
    赋值 (OPENGL32A, Call_1 (LoadLibraryA, GetTextAddress (temp2)))
    赋值 (temp2, 相加 (“GLU”, #DLL))
    赋值 (GLU32A, Call_1 (LoadLibraryA, GetTextAddress (temp2)))
    赋值 (temp2, 相加 (“GDI”, #DLL))
    赋值 (GDI32A, Call_1 (LoadLibraryA, GetTextAddress (temp2)))
    赋值 (temp2, 相加 (“USER”, #DLL))
    赋值 (USER32A, Call_1 (LoadLibraryA, GetTextAddress (temp2)))
     ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真 (或者 (等于 (OPENGL32A, 0), 等于 (GLU32A, 0), 等于 (GDI32A, 0), 等于 (USER32A, 0), 等于 (KELNEL32A, 0)))
        错误管理_ (39)
        返回 (假)
    .如果真结束
    赋值 (模块句柄, Call_1 (取API地址 (“GetModuleHandleA”, KELNEL32A), 0))
    .如果真 (等于 (模块句柄, 0))
        错误管理_ (36)
        返回 (假)
    .如果真结束
    
    初始化必要函数 ()
    
.如果真结束

赋值 (窗口标题, 选择 (是否为空 (窗口标题), 相加 (字符 (相加 (81, 到整数 (“8”))), 字符 (117), 字符 (109), 字符 (相加 (103, 到整数 (“6”))), 字符 (相减 (128, 到数值 (“7”))), 字符 (相加 (27, 到整数 (“5”))), 到文本 (相加 (-2, 到数值 (“4”))), 字符 (68), 字符 (32), 字符 (71), 字符 (114), 字符 (97), 字符 (相加 (112, 到整数 (“0”))), 字符 (104), 字符 (105), 字符 (相加 (97, 到整数 (“2”))), 字符 (115), 字符 (32), 字符 (69), 字符 (110), 字符 (103), 字符 (相加 (98, 到整数 (“7”))), 字符 (110), 字符 (101)), 窗口标题))

赋值 (屏幕宽度, 选择 (是否为空 (屏幕宽度), 800, 屏幕宽度))
赋值 (屏幕高度, 选择 (是否为空 (屏幕高度), 600, 屏幕高度))
.如果 (等于 (窗口句柄, 0))
    赋值 (temp2, 创建窗口基类_ (窗口图标句柄))
    赋值 (窗口句柄, Call_12 (CreateWindowExA, 位或 (262144, 256), GetTextAddress (temp2), GetTextAddress (窗口标题), 位或 (131072, 4194304, 12582912, 524288, 33554432, 67108864), 相除 (相减 (取屏幕宽度 (), 128), 2), 相除 (相减 (取屏幕高度 (), 128), 2), 128, 128, 0, 0, 模块句柄, 0))
    Call_2 (GetClientRectA, 窗口句柄, GetRectAddress (用户区矩形))
    Call_2 (GetWindowRectA, 窗口句柄, GetRectAddress (窗口矩形))
    .如果真 (等于 (窗口句柄, 0))
        错误管理_ (2)
        返回 (假)
    .如果真结束
    
    赋值 (窗口的句柄, 窗口句柄)
    引擎_移动窗口 (相除 (相减 (取屏幕宽度 (), 相减 (相加 (相减 (相加 (屏幕宽度, 用户区矩形.left), 窗口矩形.left), 窗口矩形.right), 用户区矩形.right)), 2), 相除 (相减 (取屏幕高度 (), 相减 (相加 (相减 (相加 (屏幕高度, 用户区矩形.top), 窗口矩形.top), 窗口矩形.bottom), 用户区矩形.bottom)), 2), 相减 (相加 (相减 (相加 (屏幕宽度, 用户区矩形.left), 窗口矩形.left), 窗口矩形.right), 用户区矩形.right), 相减 (相加 (相减 (相加 (屏幕高度, 用户区矩形.top), 窗口矩形.top), 窗口矩形.bottom), 用户区矩形.bottom))
    赋值 (自创建窗口, 真)
.否则
    赋值 (窗口的句柄, 窗口句柄)
.如果结束

赋值 (DC, Call_1 (取API地址 (“GetDC”, USER32A), 窗口的句柄))
.如果真 (等于 (DC, 0))
    错误管理_ (3)
    返回 (假)
.如果真结束
.如果真 (等于 (SetPDF (), 假))
    错误管理_ (5)
    返回 (假)
.如果真结束
赋值 (RC, Call_1 (取API地址 (“wglCreateContext”, OPENGL32A), DC))
.如果真 (等于 (RC, 0))
    错误管理_ (4)
    返回 (假)
.如果真结束
.如果真 (等于 (Call_2 (取API地址 (“wglMakeCurrent”, OPENGL32A), DC, RC), 0))
    错误管理_ (6)
    返回 (假)
.如果真结束
赋值 (是否隐藏鼠标, 不等于 (位与 (引擎风格, #引擎风格_隐藏鼠标), 0))
赋值 (引擎是否已创建, 真)
引擎_置屏幕背景色 (屏幕背景色)
引擎_更新屏幕 ()
引擎_置窗口可视 (真)
引擎_窗口设为活动窗口 ()
引擎_窗口获得焦点 ()
引擎_调节屏幕大小 (屏幕宽度, 屏幕高度)
 ' C_glClearDepth (取API地址 (“glClearDepth”, OPENGL32A), 1)
 ' Call_1 (glEnableA, 2929)
 ' Call_1 (取API地址 (“glShadeModel”, OPENGL32A), 7425)
Call_1 (glEnableA, 3008)
Call_1 (glEnableA, 3042)
Call_2 (取API地址 (“glBlendFunc”, OPENGL32A), 770, 771)
 ' Call_2 (取API地址 (“glAlphaFunc”, OPENGL32A), 516, 1053609165)
Call_1 (glEnableA, 3553)
.如果真 (不等于 (位与 (引擎风格, 位或 (#引擎风格_反走样_点, #引擎风格_反走样_线, #引擎风格_反走样_面)), 0))
    赋值 (glHintA, 取API地址 (“glHint”, OPENGL32A))
    .如果真 (不等于 (位与 (引擎风格, #引擎风格_反走样_点), 0))
        Call_1 (glEnableA, 2832)
        Call_2 (glHintA, 3153, 4354)
    .如果真结束
    .如果真 (不等于 (位与 (引擎风格, #引擎风格_反走样_线), 0))
        Call_1 (glEnableA, 2848)
        Call_2 (glHintA, 3154, 4354)
    .如果真结束
    .如果真 (不等于 (位与 (引擎风格, #引擎风格_反走样_面), 0))
        Call_1 (glEnableA, 2881)
        Call_2 (glHintA, 3155, 4354)
    .如果真结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束
 ' 处理拓展 ()
 ' 矩阵复位 ()
赋值 (启动的时间, 取启动时间 ())
赋值 (屏幕的宽度, 屏幕宽度)
赋值 (屏幕的高度, 屏幕高度)
赋值 (销毁引擎, 假)
赋值 (SetWindowLongA, 取API地址 (“SetWindowLongA”, USER32A))
赋值 (CallWindowProcA, 取API地址 (“CallWindowProcA”, USER32A))
赋值 (原始窗口消息地址, Call_3 (SetWindowLongA, 窗口的句柄, #GWL_WNDPROC, 到整数 (&消息处理_)))
返回 (真)


.子程序 引擎_窗口获得焦点, 逻辑型, 公开, 
.局部变量 SetFocusA, 整数型, 静态, , 

.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (40)
    返回 (假)
.如果真结束
.如果真 (等于 (SetFocusA, 0))
    赋值 (SetFocusA, 取API地址 (“SetFocus”, USER32A))
.如果真结束
返回 (等于 (Call_1 (SetFocusA, 窗口的句柄), 1))


.子程序 引擎_窗口设为活动窗口, 逻辑型, 公开, 
.局部变量 SetForegroundWindowA, 整数型, 静态, , 

.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (41)
    返回 (假)
.如果真结束
.如果真 (等于 (SetForegroundWindowA, 0))
    赋值 (SetForegroundWindowA, 取API地址 (“SetForegroundWindow”, USER32A))
.如果真结束
返回 (等于 (Call_1 (SetForegroundWindowA, 窗口的句柄), 1))


.子程序 引擎_取OpenGL版本号, 文本型, 公开, 其实这个完全可以用来计算硬盘特征字，这个是显卡上的硬件特征，不会随系统改变
.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (46)
    返回 (“”)
.如果真结束
返回 (指针到文本 (Call_1 (glGetStringA, 7938)))


.子程序 引擎_取OpenGL拓展兼容性, 文本型, 公开, 其实这个完全可以用来计算硬盘特征字，这个是显卡上的硬件特征，不会随系统改变
.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (47)
    返回 (“”)
.如果真结束
返回 (指针到文本 (Call_1 (glGetStringA, 7939)))


.子程序 引擎_取OpenGL厂商, 文本型, 公开, 其实这个完全可以用来计算硬盘特征字，这个是显卡上的硬件特征，不会随系统改变
.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (48)
    返回 (“”)
.如果真结束
返回 (指针到文本 (Call_1 (glGetStringA, 7936)))


.子程序 引擎_取OpenGL渲染设备名, 文本型, 公开, 显卡名，其实这个完全可以用来计算硬盘特征字，这个是显卡上的硬件特征，不会随系统改变
.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (49)
    返回 (“”)
.如果真结束
返回 (指针到文本 (Call_1 (glGetStringA, 7937)))

.子程序 引擎_移动窗口, 逻辑型, 公开, 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 
.参数 宽度, 整数型, , 
.参数 高度, 整数型, , 

.局部变量 MoveWindowA, 整数型, 静态, , 

.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (43)
    返回 (假)
.如果真结束
.如果真 (等于 (MoveWindowA, 0))
    赋值 (MoveWindowA, 取API地址 (“MoveWindow”, USER32A))
.如果真结束
返回 (等于 (Call_5 (MoveWindowA, 窗口的句柄, 左边, 顶边, 宽度, 高度), 1))

.子程序 引擎_是否已创建, 逻辑型, 公开, 引擎是否已经被创建，引擎被创建后返回真，销毁后返回假
返回 (引擎是否已创建)

.子程序 引擎_取启动时间, 整数型, 公开, 取引擎启动时的系统时间，可以用核心库的“取启动时间（）”减这个命令取到的时间差算出引擎启动的逻辑时间
返回 (启动的时间)

.子程序 引擎_取窗口句柄, 整数型, 公开, 取回引擎窗口的句柄（hwnd）
返回 (窗口的句柄)

.子程序 引擎_置窗口可视, 整数型, 公开, 置引擎窗口的可视性，ShowWindow
.参数 可视性, 逻辑型, , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (19)
    返回 (0)
.如果真结束
.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (20)
    返回 (0)
.如果真结束
.如果真 (等于 (ShowWindowA, 0))
    赋值 (ShowWindowA, 取API地址 (“ShowWindow”, USER32A))
.如果真结束
.如果 (可视性)
    返回 (Call_2 (ShowWindowA, 窗口的句柄, 5))
.否则
    返回 (Call_2 (ShowWindowA, 窗口的句柄, 0))
.如果结束


.子程序 引擎_取窗口可视, 逻辑型, 公开, IsWindowVisible
.局部变量 IsWindowVisibleA, 整数型, 静态, , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (21)
    返回 (假)
.如果真结束
.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (22)
    返回 (假)
.如果真结束
.如果真 (等于 (IsWindowVisibleA, 0))
    赋值 (IsWindowVisibleA, 取API地址 (“IsWindowVisible”, USER32A))
.如果真结束
返回 (等于 (Call_1 (IsWindowVisibleA, 窗口的句柄), 1))

.子程序 引擎_调节屏幕大小, 逻辑型, 公开, 
.参数 屏幕宽度, 整数型, , 
.参数 屏幕高度, 整数型, , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (23)
    返回 (假)
.如果真结束
Call_4 (glViewportA, 0, 0, 屏幕宽度, 屏幕高度)
 ' 选择矩阵模式 (5889)
 ' 创建对称透视投影 (45, 屏幕宽度 ÷ 屏幕高度, 1, 100)
C_glOrtho (glOrthoA, 0, 屏幕宽度, 屏幕高度, 0, -1, 1)
 ' 选择矩阵模式 (5888)
赋值 (屏幕的宽度, 屏幕宽度)
赋值 (屏幕的高度, 屏幕高度)
返回 (真)

.子程序 引擎_GetDeviceContext, 整数型, 公开, 这个函数主要给需要自己拓展高级功能的人使用，一般不需要用到
返回 (DC)

.子程序 引擎_GetOpenGLRenderingContext, 整数型, 公开, 这个函数主要给需要自己拓展高级功能的人使用，一般不需要用到
返回 (RC)


.子程序 引擎_消息_挂接事件, 空白型, , 
.参数 事件ID, 整数型, , 可以用“引擎事件_”开头的常量，注意这些常量的备注说明了各个挂接事件的参数
.参数 执行的函数指针, 整数型, , 

赋值 (引擎事件 [事件ID], 执行的函数指针)


.子程序 引擎_启动循环2, 逻辑型, 公开, 启动引擎开始消息循环（有能力者也可以不使用此函数自己构造消息循环）
.参数 函数地址, 整数型, , 每次想要执行的函数地址
.参数 FPS, 小数型, 可空, 每秒执行次数，不可过高，默认为60

.局部变量 glutTimerFuncA, 整数型, , , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (24)
    返回 (假)
.如果真结束
.如果真 (等于 (glutTimerFuncA, 0))
    赋值 (glutTimerFuncA, 取API地址 (“glutTimerFunc”, OPENGL32A))
.如果真结束
返回 (真)

.子程序 引擎_启动循环, 逻辑型, 公开, 启动引擎开始消息循环（有能力者也可以不使用此函数自己构造消息循环）
.参数 函数地址, 整数型, , 每次想要执行的函数地址
.参数 FPS, 小数型, 可空, 每秒执行次数，不可过高，默认为60

.局部变量 旧启动时间, 整数型, 静态, , 
.局部变量 旧启动时间2, 整数型, 静态, , 
.局部变量 旧消息循环执行次数, 整数型, 静态, , 
.局部变量 Msg, MSG, , , 
.局部变量 n, 整数型, , , 
.局部变量 局部_对象句柄, 整数型, , , 
.局部变量 延时, 整数型, , , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (24)
    返回 (假)
.如果真结束
赋值 (FPS, 选择 (是否为空 (FPS), 60, FPS))
赋值 (瞬时FPS, FPS)
赋值 (旧启动时间2, 取启动时间 ())
赋值 (n, GetMsgAddress (Msg))
.判断循环首 (引擎是否已创建)
    .如果真 (销毁引擎)
        跳出循环 ()
    .如果真结束
    更新鼠标_ ()
    赋值 (瞬时FPS, 相除 (相加 (瞬时FPS, 相除 (1000, 相减 (取启动时间 (), 旧启动时间))), 2))
    赋值 (瞬时FPS, 选择 (大于 (瞬时FPS, FPS), FPS, 瞬时FPS))
    赋值 (旧启动时间, 取启动时间 ())
    Call (函数地址)
    赋值 (消息循环执行次数, 相加 (消息循环执行次数, 1))
    .如果真 (大于 (相减 (取启动时间 (), 旧启动时间2), 1000))
        赋值 (旧启动时间2, 取启动时间 ())
        赋值 (一秒内实际运行FPS, 相减 (消息循环执行次数, 旧消息循环执行次数))
        赋值 (旧消息循环执行次数, 消息循环执行次数)
    .如果真结束
    处理事件 ()
    赋值 (延时, 相减 (相除 (相乘 (消息循环执行次数, 1000), FPS), 相减 (取启动时间 (), 启动的时间)))
    .如果真 (大于 (延时, 0))
        延时 (延时)
    .如果真结束
    
.判断循环尾 ()
返回 (真)

.子程序 引擎_取FPS, 整数型, 公开, 取实际运行的FPS值（只有使用了引擎自带的循环才可以取到，自己构造消息循环此函数无效）
.参数 FPS类型, 字节型, 可空, 0：普通FPS（得到的是一秒内的实际运行FPS），1：瞬时FPS（得到的是瞬时的FPS），2：平均FPS（得到的是消息循环函数的总执行次数除以总执行时间的值），关于平均FPS和瞬时FPS的理解可以参考高中物理必修一第一章。

.判断开始 (等于 (FPS类型, 0))
    返回 (一秒内实际运行FPS)
.判断 (等于 (FPS类型, 1))
    返回 (瞬时FPS)
.判断 (等于 (FPS类型, 2))
    返回 (相除 (消息循环执行次数, 相除 (相减 (取启动时间 (), 启动的时间), 1000)))
.默认
    
.判断结束
返回 (0)

.子程序 引擎_取鼠标位置, 整数型, 公开, 用“公共_取低16位”获得x坐标，用“公共_取高16位”获得y坐标
返回 (合并整数 (鼠标坐标.x, 鼠标坐标.y))

.子程序 引擎_置标题, 逻辑型, 公开, 
.参数 标题文本, 文本型, , 

.局部变量 SetWindowTextA, 整数型, 静态, , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (25)
    返回 (假)
.如果真结束
.如果真 (等于 (窗口的句柄, 0))
    错误管理_ (26)
    返回 (假)
.如果真结束
.如果真 (等于 (SetWindowTextA, 0))
    赋值 (SetWindowTextA, 取API地址 (“SetWindowTextA”, USER32A))
.如果真结束
Call_2 (SetWindowTextA, 窗口的句柄, GetTextAddress (标题文本))
返回 (真)

.子程序 引擎_置屏幕背景色, 空白型, 公开, 
.参数 屏幕的背景色, YM_颜色值, , 

.局部变量 glClearColorA, 整数型, 静态, , 

赋值 (屏幕背景色, 屏幕的背景色)
.如果真 (等于 (引擎是否已创建, 假))
    返回 ()
.如果真结束
.如果真 (等于 (glClearColorA, 0))
    赋值 (glClearColorA, 取API地址 (“glClearColor”, OPENGL32A))
.如果真结束
C_glClearColor (glClearColorA, 相除 (屏幕背景色.r, 255), 相除 (屏幕背景色.g, 255), 相除 (屏幕背景色.b, 255), 相除 (屏幕背景色.a, 255))


.子程序 引擎_截图, 字节集, 公开, 截图得到的不是图片数据，而是RGB编码，RGB编码可以直接使用“纹理_载入_RGB编码”载入到纹理，也可以使用“公共_RGB编码到BMP”转换为BMP再输出
.局部变量 glReadBufferA, 整数型, 静态, , 
.局部变量 glPixelStoreiA, 整数型, 静态, , 
.局部变量 glReadPixelsA, 整数型, 静态, , 
.局部变量 内存缓冲区, 字节集, , , 

.如果真 (等于 (glReadBufferA, 0))
    赋值 (glReadBufferA, 取API地址 (“glReadBuffer”, OPENGL32A))
    赋值 (glPixelStoreiA, 取API地址 (“glPixelStorei”, OPENGL32A))
    赋值 (glReadPixelsA, 取API地址 (“glReadPixels”, OPENGL32A))
.如果真结束
赋值 (内存缓冲区, 取空白字节集 (相乘 (屏幕的宽度, 屏幕的高度, 3)))
Call_1 (glReadBufferA, 1028)
Call_2 (glPixelStoreiA, 3333, 1)
Call_7 (glReadPixelsA, 0, 0, 屏幕的宽度, 屏幕的高度, 6407, 5121, GetByteArrayAddress (内存缓冲区))
返回 (内存缓冲区)


.子程序 引擎_截图输出, 逻辑型, 公开, 
.参数 文件路径, 文本型, , 

返回 (写到文件 (文件路径, 公共_RGB编码到BMP (引擎_截图 (), 屏幕的宽度, 屏幕的高度)))

.子程序 引擎_清屏, 逻辑型, 公开, 
.局部变量 i, 整数型, , , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (27)
    返回 (假)
.如果真结束
.如果真 (等于 (ShowWindowA, 0))
    赋值 (ShowWindowA, 取API地址 (“ShowWindow”, USER32A))
.如果真结束
 ' .计次循环首 (取数组成员数 (), i)
     ' .如果真 (等于 (GetAddressInteger ( [i]), 1))
         ' 写到内存 (0, 全局_编辑框可视性 [i], 4)
         ' .如果真 (等于 (GetAddressInteger (相加 ( [i], 4)), 0))
             ' Call_2 (ShowWindowA, GetAddressInteger (全局_编辑框可视性 [i] ＋ 8), 5)
             ' 写到内存 (1, 全局_编辑框可视性 [i] ＋ 4, 4)
        .如果真结束
        
    .如果真结束
    
 ' .计次循环尾 ()
Call_1 (glClearA, 位或 (16384, 256))
 ' glLoadIdentity ()
返回 (真)

.子程序 引擎_更新屏幕, 逻辑型, 公开, 结束渲染，把渲染的内容更新到屏幕上
.局部变量 n, 整数型, , , 
.局部变量 SwapBuffersA, 整数型, 静态, , 
.局部变量 glFlushA, 整数型, 静态, , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (28)
    返回 (假)
.如果真结束
.如果真 (等于 (glFlushA, 0))
    赋值 (glFlushA, 取API地址 (“glFlush”, OPENGL32A))
.如果真结束
Call (glFlushA)
.如果真 (等于 (SwapBuffersA, 0))
    赋值 (SwapBuffersA, 取API地址 (“SwapBuffers”, GDI32A))
.如果真结束
Call_1 (SwapBuffersA, DC)
 ' .计次循环首 (取数组成员数 (), n)
     ' .如果真 (并且 (等于 (GetAddressInteger ( [n]), 0), 等于 (GetAddressInteger (相加 ( [n], 4)), 1)))
         ' Call_2 (ShowWindowA, GetAddressInteger (全局_编辑框可视性 [n] ＋ 8), 0)
         ' 写到内存 (0, 全局_编辑框可视性 [n] ＋ 4, 4)
    .如果真结束
    
 ' .计次循环尾 ()

.判断循环首 (小于 (n, 取数组成员数 (全局_字集管理)))
    赋值 (n, 相加 (n, 1))
    .如果 (等于 (全局_字集管理 [n], used, 0))
        Call_2 (glDeleteListsA, 全局_字集管理 [n], ListNum, 1)
        删除成员 (全局_字集管理, n, )
        赋值 (n, 相减 (n, 1))
    .否则
        赋值 (全局_字集管理 [n], used, 0)
    .如果结束
    
.判断循环尾 ()
返回 (真)

.子程序 引擎_取按键状态, 逻辑型, 公开, 检测某个按键是否被按着
.参数 按键代码, 整数型, , 

.局部变量 GetAsyncKeyStateA, 整数型, 静态, , 

.如果真 (等于 (GetAsyncKeyStateA, 0))
    赋值 (GetAsyncKeyStateA, 取API地址 (“GetAsyncKeyState”, USER32A))
.如果真结束
Call_1 (GetAsyncKeyStateA, 按键代码)
返回 (不等于 (Call_1 (GetAsyncKeyStateA, 按键代码), 0))


.子程序 更新鼠标_, 空白型, , 
.局部变量 局部_用户区域, RECT, , , 
.局部变量 GetCursorPosA, 整数型, 静态, , 
.局部变量 PtInRectA, 整数型, 静态, , 
.局部变量 WindowFromPointA, 整数型, 静态, , 
.局部变量 ScreenToClientA, 整数型, 静态, , 
.局部变量 MapWindowPointsA, 整数型, 静态, , 
.局部变量 GetParentA, 整数型, 静态, , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 

Call_2 (GetClientRectA, 窗口的句柄, GetRectAddress (局部_用户区域))
.如果真 (等于 (MapWindowPointsA, 0))
    赋值 (MapWindowPointsA, 取API地址 (“MapWindowPoints”, USER32A))
.如果真结束
Call_4 (MapWindowPointsA, 窗口的句柄, 0, GetRectAddress (局部_用户区域), 2)
.如果真 (等于 (GetCursorPosA, 0))
    赋值 (GetCursorPosA, 取API地址 (“GetCursorPos”, USER32A))
.如果真结束
Call_1 (GetCursorPosA, GetPointAddress (鼠标坐标))
.如果真 (等于 (PtInRectA, 0))
    赋值 (PtInRectA, 取API地址 (“PtInRect”, USER32A))
.如果真结束
.如果真 (等于 (GetParentA, 0))
    赋值 (GetParentA, 取API地址 (“GetParent”, USER32A))
.如果真结束
.如果真 (等于 (WindowFromPointA, 0))
    赋值 (WindowFromPointA, 取API地址 (“WindowFromPoint”, USER32A))
.如果真结束
赋值 (n, Call_2 (WindowFromPointA, 鼠标坐标.x, 鼠标坐标.y))
赋值 (鼠标在屏幕内, 或者 (等于 (n, 窗口的句柄), 等于 (Call_1 (GetParentA, n), 窗口的句柄)))
赋值 (鼠标在屏幕内, 并且 (鼠标在屏幕内, 等于 (Call_3 (PtInRectA, GetRectAddress (局部_用户区域), 鼠标坐标.x, 鼠标坐标.y), 1)))
.如果真 (等于 (ScreenToClientA, 0))
    赋值 (ScreenToClientA, 取API地址 (“ScreenToClient”, USER32A))
.如果真结束
Call_2 (ScreenToClientA, 窗口的句柄, GetPointAddress (鼠标坐标))

.子程序 引擎_销毁, 逻辑型, 公开, 销毁引擎并释放内存
.局部变量 temp, 文本型, , , 

.如果真 (等于 (引擎是否已创建, 假))
    错误管理_ (12)
    返回 (假)
.如果真结束
清除数组 (全局_字集管理)
.如果真 (等于 (Call_1 (取API地址 (“wglDeleteContext”, OPENGL32A), RC), 0))
    错误管理_ (13)
    返回 (假)
.如果真结束
.如果真 (并且 (大于 (DC, 0), 等于 (Call_2 (取API地址 (“ReleaseDC”, USER32A), 窗口的句柄, DC), 0)))
    错误管理_ (14)
    返回 (假)
.如果真结束
.如果真 (并且 (不等于 (窗口的句柄, 0), 等于 (Call_1 (取API地址 (“DestroyWindow”, USER32A), 窗口的句柄), 0)))
    错误管理_ (15)
    返回 (假)
.如果真结束
赋值 (temp, “Yummy”)
.如果真 (并且 (自创建窗口, 等于 (Call_2 (取API地址 (“UnregisterClassA”, USER32A), GetTextAddress (temp), 模块句柄), 0)))
    错误管理_ (16)
    返回 (假)
.如果真结束
返回 (真)


.子程序 引擎_画矩形, 空白型, , 其实也可以用“纹理_描绘”来描绘一个纹理指针为0的纹理达到相同的效果，只不过这个是调用最底层的OpenGL矩形描绘函数，效率更高
.参数 矩形, YM_矩形, 可空, 
.参数 渲染颜色, YM_颜色值, 可空, 
.参数 旋转角度, 小数型, 可空, 

.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (56)
.如果真结束
.如果真 (是否为空 (渲染颜色))
    连续赋值 (255, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
.如果真结束
Call (glPushMatrixA)
.如果真 (不等于 (旋转角度, 0))
    C_glClearColor (glRotatefA, 旋转角度, 0, 0, -1)
.如果真结束
Call_4 (glColor4bA, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
C_glClearColor (glRectfA, 矩形.x, 矩形.y, 相加 (矩形.x, 矩形.w), 相加 (矩形.y, 矩形.h))
Call (glPopMatrixA)

.子程序 消息处理_, 整数型, , 
.参数 句柄, 整数型, , 
.参数 消息值, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 temp, 文本型, , , 
.局部变量 temp2, 文本型, , , 

.判断开始 (等于 (消息值, #WM_KEYDOWN))
    .如果真 (不等于 (参数一, 229))
        .如果真 (大于 (全局_编辑框焦点, 0))
            .判断开始 (等于 (参数一, #左光标键))
                赋值 (n, 相减 (相加 (GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 2))
                赋值 (n, 选择 (并且 (大于或等于 (GetAddressByte (n), 128), 大于或等于 (GetAddressByte (相加 (n, 1)), 128)), 2, 1))
                .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 0))
                    写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n)), 相加 (全局_编辑框焦点, 4), 4)
                .如果真结束
                写到内存 (到整数 (1), 相加 (全局_编辑框焦点, 24), 4)
                .如果真 (等于 (引擎_取按键状态 (#Shift键), 假))
                    写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
                .如果真结束
                .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), 0))
                    Call_4 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n), -1, 1)
                .如果真结束
                .如果真 (小于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 32))), 0))
                    .如果真 (大于或等于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n), 0))
                        写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n)), 相加 (全局_编辑框焦点, 32), 4)
                    .如果真结束
                    
                .如果真结束
                
            .判断 (等于 (参数一, #右光标键))
                赋值 (n, 相加 (GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                赋值 (n, 选择 (并且 (大于或等于 (GetAddressByte (n), 128), 大于或等于 (GetAddressByte (相加 (n, 1)), 128)), 2, 1))
                .如果真 (小于 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 取文本长度 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])))
                    写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n)), 相加 (全局_编辑框焦点, 4), 4)
                .如果真结束
                写到内存 (到整数 (1), 相加 (全局_编辑框焦点, 24), 4)
                .如果真 (等于 (引擎_取按键状态 (#Shift键), 假))
                    写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
                .如果真结束
                .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), 0))
                    Call_4 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n), -1, 1)
                .如果真结束
                .如果真 (大于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 32))), GetAddressInteger (相加 (全局_编辑框焦点, 36))))
                    .如果真 (小于或等于 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n), 取文本长度 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])))
                        写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n)), 相加 (全局_编辑框焦点, 32), 4)
                    .如果真结束
                    
                .如果真结束
                
            .判断 (等于 (参数一, #Shift键))
                .如果真 (等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                    写到内存 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相加 (全局_编辑框焦点, 20), 4)
                .如果真结束
                
            .判断 (等于 (参数一, #退格键))
                赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                    写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), 取绝对值 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4)))))), 相加 (全局_编辑框焦点, 32), 4)
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                    .否则
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                        写到内存 (到整数 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4)))), 相加 (全局_编辑框焦点, 4), 4)
                    .如果结束
                    
                .否则
                    赋值 (n, 选择 (大于或等于 (GetAddressByte (相减 (相加 (GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 1)), 128), 2, 1))
                    赋值 (temp, 相加 (取文本左边 (temp, 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                    .如果真 (大于或等于 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n))
                        写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), n)), 相加 (全局_编辑框焦点, 4), 4)
                    .如果真结束
                    .如果真 (大于或等于 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n))
                        写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), n)), 相加 (全局_编辑框焦点, 32), 4)
                    .如果真结束
                    
                .如果结束
                赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
                写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
            .判断 (等于 (参数一, #Del键))
                赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                    写到内存 (到整数 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), 取绝对值 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4)))))), 相加 (全局_编辑框焦点, 32), 4)
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                    .否则
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                        写到内存 (到整数 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4)))), 相加 (全局_编辑框焦点, 4), 4)
                    .如果结束
                    
                .否则
                    赋值 (n, 选择 (大于或等于 (GetAddressByte (相加 (GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetAddressInteger (相加 (全局_编辑框焦点, 4)))), 128), 2, 1))
                    赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4)), n))))
                    写到内存 (到整数 (GetAddressInteger (相加 (全局_编辑框焦点, 4))), 相加 (全局_编辑框焦点, 4), 4)
                .如果结束
                赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
                写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
            .判断 (等于 (参数一, #V键))
                .如果真 (引擎_取按键状态 (#Ctrl键))
                    赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                    赋值 (temp2, 取剪辑板文本 ())
                    .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                        .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                            赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), temp2, 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                            写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 取文本长度 (temp2))), 相加 (全局_编辑框焦点, 4), )
                        .否则
                            
                            赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), temp2, 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                            写到内存 (到整数 (相加 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 取文本长度 (temp2))), 相加 (全局_编辑框焦点, 4), )
                        .如果结束
                        
                    .否则
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), temp2, 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                        写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 取文本长度 (temp2))), 相加 (全局_编辑框焦点, 4), )
                    .如果结束
                    赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
                    写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
                    
                    
                .如果真结束
                
            .判断 (等于 (参数一, #C键))
                .如果真 (引擎_取按键状态 (#Ctrl键))
                    赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 取文本中间 (temp, 相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 1), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4)))))
                    .否则
                        赋值 (temp, 取文本中间 (temp, 相加 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), 1), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20)))))
                    .如果结束
                    置剪辑板文本 (temp)
                .如果真结束
                
            .判断 (等于 (参数一, #X键))
                .如果真 (引擎_取按键状态 (#Ctrl键))
                    赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 取文本中间 (temp, 相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 1), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4)))))
                    .否则
                        赋值 (temp, 取文本中间 (temp, 相加 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), 1), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20)))))
                    .如果结束
                    置剪辑板文本 (temp)
                    赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                    .否则
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                        写到内存 (到整数 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4)))), 相加 (全局_编辑框焦点, 4), 4)
                    .如果结束
                    赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
                    写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
                    
                .如果真结束
                
            .默认
                
            .判断结束
            
        .如果真结束
        .如果真 (并且 (不等于 (引擎事件 [1], 0), 等于 (位与 (参数二, 1073741824), 0)))
            Call_1 (引擎事件 [1], 参数一)
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (消息值, #WM_KEYUP))
    .如果真 (不等于 (引擎事件 [2], 0))
        Call_1 (引擎事件 [2], 参数一)
    .如果真结束
    
.判断 (或者 (等于 (消息值, #WM_LBUTTONDOWN), 等于 (消息值, #WM_LBUTTONDBLCLK)))
    .如果真 (不等于 (引擎事件 [1], 0))
        Call_1 (引擎事件 [1], #鼠标左键)
    .如果真结束
    
    
.判断 (等于 (消息值, #WM_LBUTTONUP))
    .如果真 (不等于 (引擎事件 [2], 0))
        Call_1 (引擎事件 [2], #鼠标左键)
    .如果真结束
    
.判断 (或者 (等于 (消息值, #WM_RBUTTONDOWN), 等于 (消息值, #WM_RBUTTONDBLCLK)))
    .如果真 (不等于 (引擎事件 [1], 0))
        Call_1 (引擎事件 [1], #鼠标右键)
    .如果真结束
    
    
.判断 (等于 (消息值, #WM_RBUTTONUP))
    .如果真 (不等于 (引擎事件 [2], 0))
        Call_1 (引擎事件 [2], #鼠标右键)
    .如果真结束
    
.判断 (或者 (等于 (消息值, #WM_MBUTTONDOWN), 等于 (消息值, #WM_MBUTTONDBLCLK)))
    .如果真 (不等于 (引擎事件 [1], 0))
        Call_1 (引擎事件 [1], #鼠标中键)
    .如果真结束
    
.判断 (等于 (消息值, #WM_MBUTTONUP))
    .如果真 (不等于 (引擎事件 [2], 0))
        Call_1 (引擎事件 [2], #鼠标中键)
    .如果真结束
    
.判断 (等于 (消息值, #WM_MOUSEWHEEL))
    .如果真 (不等于 (引擎事件 [3], 0))
        Call_1 (引擎事件 [3], 公共_取高16位 (参数一))
        
    .如果真结束
    
.判断 (并且 (等于 (消息值, #WM_SYSKEYDOWN), 等于 (位与 (参数二, 1073741824), 0)))
    .如果真 (并且 (不等于 (参数一, 13), 不等于 (参数一, 115)))
        .如果真 (不等于 (引擎事件 [1], 0))
            Call_1 (引擎事件 [1], 参数一)
        .如果真结束
        
        
    .如果真结束
    
.判断 (等于 (消息值, #WM_SYSKEYUP))
    .如果真 (不等于 (引擎事件 [2], 0))
        Call_1 (引擎事件 [2], 参数一)
    .如果真结束
    
.判断 (等于 (消息值, #WM_SETFOCUS))
    .如果真 (不等于 (引擎事件 [4], 0))
        Call (引擎事件 [4])
    .如果真结束
    
.判断 (等于 (消息值, #WM_KILLFOCUS))
    .如果真 (不等于 (引擎事件 [5], 0))
        Call (引擎事件 [5])
    .如果真结束
    
.判断 (等于 (消息值, #WM_SIZE))
    .如果真 (不等于 (引擎事件 [6], 0))
        Call (引擎事件 [6])
    .如果真结束
    
.判断 (等于 (消息值, #WM_CLOSE))
    .如果真 (不等于 (引擎事件 [7], 0))
        赋值 (销毁引擎, 等于 (Call (引擎事件 [7]), 1))
        返回 (0)
    .如果真结束
    赋值 (销毁引擎, 真)
    返回 (0)
    
.判断 (等于 (消息值, #WM_SETCURSOR))
    .如果真 (并且 (是否隐藏鼠标, 鼠标在屏幕内))
        .如果真 (等于 (SetCursorA, 0))
            赋值 (SetCursorA, 取API地址 (“SetCursor”, USER32A))
        .如果真结束
        Call_1 (SetCursorA, 0)
        返回 (0)
    .如果真结束
    
.判断 (等于 (消息值, #WM_IME_CHAR))
    .如果真 (大于 (全局_编辑框焦点, 0))
        置入代码 ({ 102, 139, 69, 16, 128, 252, 0, 116, 18, 136, 227, 136, 199, 102, 137, 93, 252, 184, 2, 0, 0, 0, 233, 9, 0, 0, 0, 102, 137, 69, 252, 184, 1, 0, 0, 0, 137, 69, 16 })
         ' mov ax,[ebp+16]
         ' cmp ah,0
         ' je s
         ' mov bl,ah
         ' mov bh,al
         ' mov [ebp-4],bx
         ' mov eax,2
         ' jmp s1
         ' s:mov [ebp-4],ax
         ' mov eax,1
         ' s1: mov [ebp+16],eax
        赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
        .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
            .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (n)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 参数一)), 相加 (全局_编辑框焦点, 4), 4)
            .否则
                
                赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 到文本 (到字节集 (n)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                写到内存 (到整数 (相加 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 参数一)), 相加 (全局_编辑框焦点, 4), 4)
            .如果结束
            
        .否则
            赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (n)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
            写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 参数一)), 相加 (全局_编辑框焦点, 4), 4)
        .如果结束
        赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
        写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
        
        .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), 0))
            Call_2 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetIntegerAddress (n))
        .如果真结束
        .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), 0))
            Call_3 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 参数一), -1)
        .如果真结束
        写到内存 (到整数 (1), 相加 (全局_编辑框焦点, 24), 4)
        .如果真 (大于或等于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 32))), GetAddressInteger (相加 (全局_编辑框焦点, 36))))
            写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), 参数一)), 相加 (全局_编辑框焦点, 32), 4)
        .如果真结束
        
        赋值 (i, n)
        返回 (0)
    .如果真结束
    
.判断 (等于 (消息值, #WM_CHAR))
    .如果真 (并且 (不等于 (i, 参数一), 大于 (全局_编辑框焦点, 0)))
        .如果 (并且 (小于或等于 (参数一, 128), 大于或等于 (参数一, 32)))
            赋值 (temp, 全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))])
            .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                    赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                    写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 1)), 相加 (全局_编辑框焦点, 4), 4)
                .否则
                    赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                    写到内存 (到整数 (相加 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 1)), 相加 (全局_编辑框焦点, 4), 4)
                .如果结束
                
            .否则
                
                赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 1)), 相加 (全局_编辑框焦点, 4), 4)
            .如果结束
            赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
            写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
            .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), 0))
                Call_2 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetIntegerAddress (参数一))
            .如果真结束
            .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), 0))
                Call_3 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 1), -1)
            .如果真结束
            写到内存 (到整数 (1), 相加 (全局_编辑框焦点, 24), 4)
            .如果真 (大于或等于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 32))), GetAddressInteger (相加 (全局_编辑框焦点, 36))))
                写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), 1)), 相加 (全局_编辑框焦点, 32), 4)
            .如果真结束
            
        .否则
            .如果真 (并且 (等于 (参数一, 13), 不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 16)), 0)))
                赋值 (参数一, 2573)
                赋值 (temp, 指针到文本 (GetAddressInteger (全局_编辑框焦点)))
                .如果 (不等于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), -1))
                    .如果 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 20)), GetAddressInteger (相加 (全局_编辑框焦点, 4))))
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 20))))))
                        写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 2)), 相加 (全局_编辑框焦点, 4), 4)
                    .否则
                        
                        赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 20))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                        写到内存 (到整数 (相加 (相减 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 20))), GetAddressInteger (相加 (全局_编辑框焦点, 4))), 2)), 相加 (全局_编辑框焦点, 4), 4)
                    .如果结束
                    
                .否则
                    
                    赋值 (temp, 相加 (取文本左边 (temp, GetAddressInteger (相加 (全局_编辑框焦点, 4))), 到文本 (到字节集 (参数一)), 取文本右边 (temp, 相减 (取文本长度 (temp), GetAddressInteger (相加 (全局_编辑框焦点, 4))))))
                    写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 2)), 相加 (全局_编辑框焦点, 4), 4)
                .如果结束
                赋值 (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))], temp)
                写到内存 (到整数 (-1), 相加 (全局_编辑框焦点, 20), 4)
                .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), 0))
                    Call_2 (GetAddressInteger (相加 (全局_编辑框焦点, 8)), GetTextAddress (全局_编辑框内容 [GetAddressInteger (相加 (全局_编辑框焦点, 28))]), GetIntegerAddress (参数一))
                .如果真结束
                .如果真 (大于 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), 0))
                    Call_3 (GetAddressInteger (相加 (全局_编辑框焦点, 12)), GetAddressInteger (相加 (全局_编辑框焦点, 4)), 相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), 2), -1)
                .如果真结束
                写到内存 (到整数 (1), 相加 (全局_编辑框焦点, 24), 4)
                .如果真 (大于或等于 (相减 (GetAddressInteger (相加 (全局_编辑框焦点, 4)), GetAddressInteger (相加 (全局_编辑框焦点, 32))), GetAddressInteger (相加 (全局_编辑框焦点, 36))))
                    写到内存 (到整数 (相加 (GetAddressInteger (相加 (全局_编辑框焦点, 32)), 1)), 相加 (全局_编辑框焦点, 32), 4)
                .如果真结束
                
            .如果真结束
            
        .如果结束
        
        返回 (0)
    .如果真结束
    
.默认
    
.判断结束
返回 (Call_5 (CallWindowProcA, 原始窗口消息地址, 句柄, 消息值, 参数一, 参数二))

.程序集 全局程序集, , , 

.程序集变量 最后错误, 整数型, , , 
.程序集变量 错误回调函数, 整数型, , , 
.子程序 公共_到RGBA颜色值, 整数型, 公开, 
.参数 YM_颜色值, YM_颜色值, , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

返回 (合并整数 (合并短整数 (YM_颜色值.r, YM_颜色值.g), 合并短整数 (YM_颜色值.b, YM_颜色值.a)))

.子程序 公共_到RGB颜色值, 整数型, 公开, 直接忽略透明度分量
.参数 YM_颜色值, YM_颜色值, , 

返回 (合并整数 (合并短整数 (YM_颜色值.r, YM_颜色值.g), YM_颜色值.b))

.子程序 公共_到YM颜色, YM_颜色值, 公开, 
.参数 红色色相, 字节型, , 
.参数 绿色色相, 字节型, , 
.参数 蓝色色相, 字节型, , 
.参数 不透明度, 字节型, , 

.局部变量 YM_颜色值, YM_颜色值, , , 

赋值 (YM_颜色值.r, 红色色相)
赋值 (YM_颜色值.g, 绿色色相)
赋值 (YM_颜色值.b, 蓝色色相)
赋值 (YM_颜色值.a, 不透明度)
返回 (YM_颜色值)

.子程序 公共_取颜色值, YM_颜色值, 公开, 
.参数 红色色相, 字节型, , 
.参数 绿色色相, 字节型, , 
.参数 蓝色色相, 字节型, , 
.参数 不透明度, 字节型, , 

.局部变量 YM_颜色值, YM_颜色值, , , 

赋值 (YM_颜色值.r, 红色色相)
赋值 (YM_颜色值.g, 绿色色相)
赋值 (YM_颜色值.b, 蓝色色相)
赋值 (YM_颜色值.a, 不透明度)
返回 (YM_颜色值)

.子程序 公共_到YM矩形, YM_矩形, 公开, 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 w, 整数型, , 
.参数 h, 整数型, , 

.局部变量 YM_矩形, YM_矩形, , , 

赋值 (YM_矩形.x, x)
赋值 (YM_矩形.y, y)
赋值 (YM_矩形.w, w)
赋值 (YM_矩形.h, h)
返回 (YM_矩形)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 公共_到YM位置, YM_位置, 公开, 
.参数 x, 整数型, , 
.参数 y, 整数型, , 

.局部变量 YM_位置, YM_位置, , , 

赋值 (YM_位置.x, x)
赋值 (YM_位置.y, y)
返回 (YM_位置)


.子程序 公共_到YM点, YM_点, 公开, 
.参数 x, 小数型, , 
.参数 y, 小数型, , 

.局部变量 YM_点, YM_点, , , 

赋值 (YM_点.x, x)
赋值 (YM_点.y, y)
返回 (YM_点)

.子程序 公共_取错误代码对应内容, 文本型, 公开, 根据返回的错误提示代码返回错误内容。之所以要单独写一个函数取内容，是想避免把这些字符编译出去。建议大家不要在正式程序中使用这个函数，建议调试使用
.参数 错误代码, 整数型, , 57

返回 (多项选择 (错误代码, “引擎出现二次创建”, “窗口创建失败”, “取窗口DeviceContext失败”, “OpenGLRenderingContext创建失败”, “添加窗口OpenGL兼容失败”, “OpenGLRenderingContext效验出错”, “ChoosePixelFormat失败”, “CreateSprite失败”, “D3DXSprite创建失败”, “窗口类名注册失败”, “引擎未创建无法置屏幕背景色”, “引擎未创建成功无法销毁”, “销毁引擎OpenGLRenderingContext失败”, “ReleaseDeviceContext失败”, “DestroyWindow失败”, “窗口类名销毁失败”, “获取消息循环相关函数地址失败”, “引擎未创建，无法创建YM_文字渲染”, “引擎未创建无法置窗口可视”, “窗口未正常创建，无法置可视”, “引擎未创建无法取可视”, “窗口未正常创建，无法取可视”, “引擎未创建无法调节屏幕大小”, “引擎未创建无法启动循环”, “引擎未创建无法置标题”, “窗口未正常创建，无法置标题”, “引擎未创建无法清屏”, “引擎未创建无法更新屏幕”, “文字创建失败”, “生成字符集失败”, “YM_文字渲染未创建无法显示”, “YM_文字渲染未创建无法销毁”, “YM_文字渲染未创建无法取文字宽度”, “YM_文字渲染未创建无法取文字高度”, “获取Kernel32入口失败”, “获取模块句柄失败”, “获取LoadLibraryA地址失败”, “获取GetProcAddress地址失败”, “载入引擎必要支持库失败”, “窗口未正常创建，无法获得焦点”, “窗口未正常创建，无法设为活动窗口”, “获取字体属性失败”, “窗口未正常创建，无法移动”, “未知错误，载入纹理失败”, “引擎未创建无法载入纹理”, “引擎未创建无法取OpenGL版本号”, “引擎未创建无法取OpenGL拓展兼容性”, “引擎未创建无法取OpenGL厂商”, “引擎未创建无法取OpenGL渲染设备名”, “编辑框创建失败”, “引擎未创建，无法创建YM_编辑框”, “YM_编辑框出现二次创建”, “YM_文字渲染出现二次创建”, “YM_编辑框未创建无法显示”, “YM_编辑框未创建无法销毁”, “引擎未创建无法画矩形”, “OpenGL硬件不支持GL_EXT_texture_compression_s3tc，无法载入dds_dxt3”))

.子程序 公共_置错误回调函数, 整数型, 公开, 当引发错误时将执行回调函数指针，错误回调函数可以接受到一个整数型参数，再用“公共_取错误代码对应内容”函数可以取到描述错误的详细内容，返回原函数指针
.参数 错误回调函数指针, 整数型, , 

.局部变量 旧错误回调函数指针, 整数型, , , 

赋值 (旧错误回调函数指针, 错误回调函数)
赋值 (错误回调函数, 错误回调函数指针)
返回 (旧错误回调函数指针)

.子程序 公共_取最后错误, 整数型, 公开, 取得引擎运行的最后错误
返回 (最后错误)

.子程序 错误管理_, 空白型, , 
.参数 错误内容, 整数型, , 

赋值 (最后错误, 错误内容)
.如果真 (不等于 (错误回调函数, 0))
    Call_1 (错误回调函数, 最后错误)
.如果真结束


.子程序 公共_取反色, YM_颜色值, 公开, 
.参数 颜色值, YM_颜色值, , 

.局部变量 新颜色值, YM_颜色值, , , 

赋值 (新颜色值, 颜色值)
赋值 (新颜色值.r, 相减 (255, 新颜色值.r))
赋值 (新颜色值.g, 相减 (255, 新颜色值.g))
赋值 (新颜色值.b, 相减 (255, 新颜色值.b))
返回 (新颜色值)

.子程序 公共_RGB编码到BMP, 字节集, 公开, 
.参数 RGB编码, 字节集, , 
.参数 图片宽度, 整数型, , 
.参数 图片高度, 整数型, , 

.局部变量 字节集, 字节集, , , 

赋值 (字节集, RGB编码)
BGR2RGB (字节集)
返回 (相加 ({ 66, 77, 54, 192, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 40, 0, 0, 0 }, 到字节集 (图片宽度), 到字节集 (图片高度), { 1, 0, 24, 0, 0, 0, 0, 0, 0, 192, 0, 0, 19, 11, 0, 0, 19, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 字节集))


.程序集 纹理程序集, , , 

.子程序 纹理_销毁, 空白型, 公开, 
.参数 纹理指针, 整数型, , 

.局部变量 glDeleteTexturesA, 整数型, 静态, , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

.如果真 (等于 (glDeleteTexturesA, 0))
    赋值 (glDeleteTexturesA, 取API地址 (“glDeleteTextures”, OPENGL32A))
.如果真结束
Call_2 (glDeleteTexturesA, 1, 纹理指针)

.子程序 载入纹理_, 整数型, , 
.参数 图片宽度, 整数型, , 
.参数 图片高度, 整数型, , 
.参数 载入方式, 整数型, , 
.参数 纹理类型, 整数型, , 
.参数 图像数据, 字节集, , 

.局部变量 纹理指针, 整数型, , , 

 ' glGenTextures (1, 纹理指针)
.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (45)
    返回 (0)
.如果真结束
.如果真 (等于 (glGenTexturesA, 0))
    赋值 (glGenTexturesA, 取API地址 (“glGenTextures”, OPENGL32A))
.如果真结束
Call_2 (glGenTexturesA, 1, GetIntegerAddress (纹理指针))
Call_2 (glBindTextureA, 3553, 纹理指针)
.如果真 (等于 (glTexEnviA, 0))
    赋值 (glTexEnviA, 取API地址 (“glTexEnvi”, OPENGL32A))
.如果真结束
Call_3 (glTexEnviA, 8960, 8704, 8448)
.如果真 (等于 (glTexParameteriA, 0))
    赋值 (glTexParameteriA, 取API地址 (“glTexParameteri”, OPENGL32A))
.如果真结束
Call_3 (glTexParameteriA, 3553, 10240, 9729)
Call_3 (glTexParameteriA, 3553, 10241, 9729)
.如果真 (等于 (gluBuild2DMipmapsA, 0))
    赋值 (gluBuild2DMipmapsA, 取API地址 (“gluBuild2DMipmaps”, GLU32A))
.如果真结束
.如果真 (不等于 (Call_7 (gluBuild2DMipmapsA, 3553, 载入方式, 图片宽度, 图片高度, 纹理类型, 5121, GetByteArrayAddress (图像数据)), 0))
    错误管理_ (44)
    返回 (0)
.如果真结束
返回 (纹理指针)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 载入纹理2_, 整数型, , 
.参数 图片宽度, 整数型, , 
.参数 图片高度, 整数型, , 
.参数 载入方式, 整数型, , 
.参数 纹理类型, 整数型, , 
.参数 图像数据, 字节集, , 

.局部变量 纹理指针, 整数型, , , 

 ' glGenTextures (1, 纹理指针)
.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (45)
    返回 (0)
.如果真结束
.如果真 (等于 (glGenTexturesA, 0))
    赋值 (glGenTexturesA, 取API地址 (“glGenTextures”, OPENGL32A))
.如果真结束
Call_2 (glGenTexturesA, 1, GetIntegerAddress (纹理指针))
Call_2 (glBindTextureA, 3553, 纹理指针)
.如果真 (等于 (glTexEnviA, 0))
    赋值 (glTexEnviA, 取API地址 (“glTexEnvi”, OPENGL32A))
.如果真结束
Call_3 (glTexEnviA, 8960, 8704, 8448)
.如果真 (等于 (glTexParameteriA, 0))
    赋值 (glTexParameteriA, 取API地址 (“glTexParameteri”, OPENGL32A))
.如果真结束
Call_3 (glTexParameteriA, 3553, 10240, 9729)
Call_3 (glTexParameteriA, 3553, 10241, 9729)
.如果真 (等于 (gluTexImage2DA, 0))
    赋值 (gluTexImage2DA, 取API地址 (“glTexImage2D”, OPENGL32A))
.如果真结束
.如果真 (不等于 (Call_9 (gluTexImage2DA, 0, 3553, 载入方式, 图片宽度, 图片高度, 0, 纹理类型, 5121, GetByteArrayAddress (图像数据)), 0))
    错误管理_ (44)
    返回 (0)
.如果真结束
返回 (纹理指针)

.子程序 纹理_载入dds_dxt3, YM_纹理, , 
.参数 图像数据, 字节集, , 

.局部变量 临时纹理, YM_纹理, , , 

.如果真 (并且 (等于 (拓展_允许压缩纹理, 假), 等于 (检测兼容性 (#GL_EXT_texture_compression_s3tc), 假)))
    错误管理_ (57)
    返回 (临时纹理)
.如果真结束
赋值 (临时纹理.宽度, 取字节集数据 (图像数据, #整数型, 17))
赋值 (临时纹理.高度, 取字节集数据 (图像数据, #整数型, 13))
赋值 (图像数据, 取字节集右边 (图像数据, 相减 (取字节集长度 (图像数据), 128)))
赋值 (临时纹理.纹理指针, 载入纹理_ (临时纹理.宽度, 临时纹理.高度, 33778, 6408, 图像数据))
返回 (临时纹理)


.子程序 纹理_载入bmp_24bit, YM_纹理, 公开, 
.参数 图像数据, 字节集, , 

.局部变量 临时纹理, YM_纹理, , , 

赋值 (临时纹理.宽度, 取字节集数据 (图像数据, #整数型, 19))
赋值 (临时纹理.高度, 取字节集数据 (图像数据, #整数型, 23))
赋值 (图像数据, 取字节集右边 (图像数据, 相减 (取字节集长度 (图像数据), 54)))
调试输出 (相除 (取字节集长度 (图像数据), 3))
BGR2RGB (图像数据)
赋值 (临时纹理.纹理指针, 载入纹理_ (临时纹理.宽度, 临时纹理.高度, 6407, 6407, 图像数据))
返回 (临时纹理)

.子程序 纹理_载入dds_argb, YM_纹理, 公开, 
.参数 图像数据, 字节集, , 

.局部变量 临时纹理, YM_纹理, , , 

赋值 (临时纹理.宽度, 取字节集数据 (图像数据, #整数型, 17))
赋值 (临时纹理.高度, 取字节集数据 (图像数据, #整数型, 13))
赋值 (图像数据, 取字节集右边 (图像数据, 相减 (取字节集长度 (图像数据), 128)))
BGRA2RGBA (图像数据)
赋值 (临时纹理.纹理指针, 载入纹理_ (临时纹理.宽度, 临时纹理.高度, 6408, 6408, 图像数据))
返回 (临时纹理)


.子程序 纹理_载入_RGB编码, YM_纹理, 公开, 
.参数 RGB编码, 字节集, , 
.参数 纹理宽度, 整数型, , 
.参数 纹理高度, 整数型, , 

.局部变量 临时纹理, YM_纹理, , , 

赋值 (临时纹理.宽度, 纹理宽度)
赋值 (临时纹理.高度, 纹理高度)
赋值 (临时纹理.纹理指针, 载入纹理_ (临时纹理.宽度, 临时纹理.高度, 6407, 6407, RGB编码))
返回 (临时纹理)


.子程序 纹理_渲染, 空白型, 公开, 
.参数 纹理, YM_纹理, , 
.参数 渲染坐标, YM_点, 可空, 
.参数 渲染颜色, YM_颜色值, 可空, 
.参数 缩放比例, YM_点, 可空, 
.参数 旋转角度, 小数型, 可空, 

.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (9)
.如果真结束
.如果真 (是否为空 (缩放比例))
    连续赋值 (1, 缩放比例.x, 缩放比例.y)
.如果真结束
.如果真 (是否为空 (渲染颜色))
    连续赋值 (255, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
.如果真结束
Call (glPushMatrixA)
 ' C_glVertex2f (glRasterPos2fA, 显示中心.x, 显示中心.y)
Call_2 (glBindTextureA, 3553, 纹理.纹理指针)
.如果真 (不等于 (旋转角度, 0))
    C_glClearColor (glRotatefA, 旋转角度, 0, 0, -1)
.如果真结束
Call_4 (glColor4bA, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
Call_1 (glBeginA, 9)
Call_2 (glTexCoord2fA, 0, 0)
C_glVertex2f (glVertex2fA, 渲染坐标.x, 渲染坐标.y)
Call_2 (glTexCoord2fA, 1065353216, 0)
C_glVertex2f (glVertex2fA, 相加 (渲染坐标.x, 相乘 (纹理.宽度, 缩放比例.x)), 渲染坐标.y)
Call_2 (glTexCoord2fA, 1065353216, 1065353216)
C_glVertex2f (glVertex2fA, 相加 (渲染坐标.x, 相乘 (纹理.宽度, 缩放比例.x)), 相加 (渲染坐标.y, 相乘 (纹理.高度, 缩放比例.y)))
Call_2 (glTexCoord2fA, 0, 1065353216)
C_glVertex2f (glVertex2fA, 渲染坐标.x, 相加 (渲染坐标.y, 相乘 (纹理.高度, 缩放比例.y)))
Call (glEndA)
Call_2 (glBindTextureA, 3553, 0)
Call (glPopMatrixA)


.子程序 纹理_渲染_拉伸, 空白型, 公开, 自动拉伸到四个端点，不过似乎不是一个平面内的了
.参数 纹理, YM_纹理, , 
.参数 渲染坐标_左上角, YM_点, 可空, 
.参数 渲染坐标_右上角, YM_点, 可空, 
.参数 渲染坐标_右下角, YM_点, 可空, 
.参数 渲染坐标_左下角, YM_点, 可空, 
.参数 渲染颜色, YM_颜色值, 可空, 
.参数 旋转角度, 小数型, 可空, 

.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (9)
.如果真结束
.如果真 (是否为空 (渲染颜色))
    连续赋值 (255, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
.如果真结束
Call (glPushMatrixA)
 ' C_glVertex2f (glRasterPos2fA, 显示中心.x, 显示中心.y)
Call_2 (glBindTextureA, 3553, 纹理.纹理指针)
.如果真 (不等于 (旋转角度, 0))
    C_glClearColor (glRotatefA, 旋转角度, 0, 0, -1)
.如果真结束
Call_4 (glColor4bA, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
Call_1 (glBeginA, 9)
Call_2 (glTexCoord2fA, 0, 0)
C_glVertex2f (glVertex2fA, 渲染坐标_左上角.x, 渲染坐标_左上角.y)
Call_2 (glTexCoord2fA, 1065353216, 0)
C_glVertex2f (glVertex2fA, 渲染坐标_右上角.x, 渲染坐标_右上角.y)
Call_2 (glTexCoord2fA, 1065353216, 1065353216)
C_glVertex2f (glVertex2fA, 渲染坐标_左下角.x, 渲染坐标_左下角.y)
Call_2 (glTexCoord2fA, 0, 1065353216)
C_glVertex2f (glVertex2fA, 渲染坐标_右下角.x, 渲染坐标_右下角.y)
Call (glEndA)
Call_2 (glBindTextureA, 3553, 0)
Call (glPopMatrixA)

.子程序 检测兼容性, 逻辑型, , 
.参数 兼容性, 文本型, , 

返回 (不等于 (寻找文本 (引擎_取OpenGL拓展兼容性 (), 兼容性, , 假), -1))


.类模块 YM_文字渲染, , , 

.程序集变量 字体句柄, 整数型, , , 
.程序集变量 DC, 整数型, , , 
.程序集变量 temp, 字节集, , , 
.程序集变量 英文数字清单, 整数型, , , 
.程序集变量 是否已创建, 逻辑型, , , 
.程序集变量 字体属性, TEXTMETRIC, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 创建, 逻辑型, 公开, 
.参数 字体大小, 整数型, 可空, 
.参数 字体名, 文本型, 可空, 
.参数 旋转角度, 小数型, 可空, 
.参数 是否倾斜, 逻辑型, 可空, 
.参数 是否加下划线, 逻辑型, 可空, 
.参数 是否加删除线, 逻辑型, 可空, 
.参数 加粗值, 整数型, 可空, 越大字体越粗，0为不加粗，1000是最粗。默认加粗是700。
.参数 字体宽度, 整数型, 可空, 留空为Windows默认值，也可以自行调节设置得更宽或更窄

.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (18)
    返回 (假)
.如果真结束
.如果真 (是否已创建)
    错误管理_ (53)
    返回 (假)
.如果真结束
.如果真 (等于 (SelectObjectA, 0))
    赋值 (SelectObjectA, 取API地址 (“SelectObject”, GDI32A))
    赋值 (DeleteObjectA, 取API地址 (“DeleteObject”, GDI32A))
    赋值 (MultiByteToWideCharA, 取API地址 (“MultiByteToWideChar”, KELNEL32A))
    赋值 (CreateFontA, 取API地址 (“CreateFontA”, GDI32A))
    赋值 (GetTextMetricsA, 取API地址 (“GetTextMetricsA”, GDI32A))
.如果真结束
赋值 (DC, Call (wglGetCurrentDCA))
赋值 (字体句柄, Call_14 (CreateFontA, 字体大小, 字体宽度, 旋转角度, 0, 加粗值, 到数值 (是否倾斜), 到数值 (是否加下划线), 到数值 (是否加删除线), 1, 4, 0, 4, 0, GetTextAddress (字体名)))
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (是否已创建, 不等于 (字体句柄, 0))
.如果真 (等于 (是否已创建, 假))
    错误管理_ (29)
    返回 (假)
.如果真结束
Call_2 (SelectObjectA, DC, 字体句柄)
.如果真 (等于 (Call_2 (GetTextMetricsA, DC, GetTextMetricAddress (字体属性)), 0))
    错误管理_ (42)
    返回 (假)
.如果真结束
赋值 (英文数字清单, Call_1 (glGenListsA, 96))
.如果真 (等于 (Call_4 (wglUseFontBitmapsA, DC, 32, 96, 英文数字清单), 0))
    Call_2 (glDeleteListsA, 英文数字清单, 96)
    错误管理_ (30)
    返回 (假)
.如果真结束
赋值 (temp, 取空白字节集 (3))
返回 (真)

.子程序 是否已创建, 逻辑型, 公开, 
返回 (是否已创建)

.子程序 显示, 逻辑型, 公开, 
.参数 文本内容, 文本型, , 
.参数 渲染坐标, YM_点, 可空, 
.参数 渲染颜色, YM_颜色值, 可空, 

.局部变量 n, 整数型, , , 
.局部变量 临时文本, 整数型, , , 
.局部变量 lists, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 高度, 整数型, , , 

.如果真 (等于 (是否已创建, 假))
    错误管理_ (31)
    返回 (假)
.如果真结束
Call_2 (SelectObjectA, DC, 字体句柄)
Call (glPushMatrixA)
Call_4 (glColor4bA, 渲染颜色.r, 渲染颜色.g, 渲染颜色.b, 渲染颜色.a)
Call_2 (glRasterPos2fA, 0, 0)
C_glBitmap (glBitmapA, 0, 0, 0, 0, 渲染坐标.x, 相减 (负 (渲染坐标.y), 字体属性.tmDescent), 0)
.判断循环首 (小于 (n, 取文本长度 (文本内容)))
    赋值 (n, 相加 (n, 1))
    赋值 (a, 取代码 (文本内容, n))
    .如果 (并且 (大于或等于 (a, 32), 小于或等于 (a, 128)))
        Call_1 (glCallListA, 相减 (相加 (英文数字清单, a), 32))
    .否则
        .如果 (小于 (a, 0))
            赋值 (lists, GetTextAddress (文本内容))
            置入代码 ({ 139, 93, 244 }) ' mov ebx,[ebp-12]
            置入代码 ({ 139, 69, 252 }) ' mov eax,[ebp-4]
            置入代码 ({ 1, 195 }) ' add ebx,eax
             ' 调试输出 (CYM_取EBX (), 临时文本)
            置入代码 ({ 139, 67, 255 }) ' mov eax,[ebx-1]
            置入代码 ({ 37, 255, 255, 0, 0 }) ' and eax,65535
            置入代码 ({ 137, 69, 244 }) ' mov [ebp-12],eax
            Call_6 (MultiByteToWideCharA, 0, 1, GetIntegerAddress (lists), -1, GetByteArrayAddress (temp), 2)
            赋值 (临时文本, 取字节集数据 (到字节集 (temp), #短整数型, ))
            .计次循环首 (相加 (取数组成员数 (全局_字集管理), 1), i)
                .如果 (等于 (i, 相加 (取数组成员数 (全局_字集管理), 1)))
                    赋值 (lists, Call_1 (glGenListsA, 1))
                    加入成员 (全局_字集管理, 到字集 (lists, 临时文本, 字体句柄))
                    Call_4 (wglUseFontBitmapsWA, DC, 临时文本, 1, lists)
                    Call_1 (glCallListA, lists)
                .否则
                    .如果真 (并且 (等于 (全局_字集管理 [i], Str, 临时文本), 等于 (全局_字集管理 [i], hwnd, 字体句柄)))
                        Call_1 (glCallListA, 全局_字集管理 [i], ListNum)
                        赋值 (全局_字集管理 [i], used, 1)
                        跳出循环 ()
                    .如果真结束
                    ' 本源码来自易语言资源网(www.5A5X.com)
                .如果结束
                
            .计次循环尾 ()
            赋值 (n, 相加 (n, 1))
        .否则
             ' .如果真 (等于 (a, 10))
                 ' C_glBitmap (glBitmapA, 0, 0, 0, 0, 0, －高度, 0)
            .如果真结束
            
        .如果结束
        
    .如果结束
    
.判断循环尾 ()
Call (glPopMatrixA)
返回 (真)

.子程序 销毁, 逻辑型, 公开, 
.局部变量 n, 整数型, , , 

.如果真 (等于 (是否已创建, 假))
    错误管理_ (32)
    返回 (假)
.如果真结束
Call_1 (DeleteObjectA, 字体句柄)
Call_2 (glDeleteListsA, 英文数字清单, 96)
.判断循环首 (小于 (n, 取数组成员数 (全局_字集管理)))
    赋值 (n, 相加 (n, 1))
    .如果 (等于 (全局_字集管理 [n], hwnd, 字体句柄))
        Call_2 (glDeleteListsA, 全局_字集管理 [n], ListNum, 1)
        删除成员 (全局_字集管理, n, )
        赋值 (n, 相减 (n, 1))
    .否则
        
    .如果结束
    
.判断循环尾 ()
返回 (真)


.子程序 取宽度, 整数型, 公开, 
返回 (字体属性.tmWeight)

.子程序 取高度, 整数型, 公开, 
返回 (字体属性.tmHeight)

.子程序 到字集, 字集, , 
.参数 list, 整数型, , 
.参数 str, 短整数型, , 
.参数 字体的句柄, 整数型, , 

.局部变量 字集, 字集, , , 

赋值 (字集.ListNum, list)
赋值 (字集.Str, str)
赋值 (字集.hwnd, 字体的句柄)
赋值 (字集.used, 1)
返回 (字集)

.程序集 API程序集, , , 

.子程序 C_glBitmap, 空白型, , 
.参数 地址, 整数型, , 
.参数 r, 整数型, , 
.参数 g, 整数型, , 
.参数 b, 整数型, , 
.参数 a, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 整数型, 整数型, , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })

.子程序 C_glOrtho, 空白型, , 
.参数 地址, 整数型, , 
.参数 l, 双精度小数型, , 
.参数 r, 双精度小数型, , 
.参数 b, 双精度小数型, , 
.参数 t, 双精度小数型, , 
.参数 n, 双精度小数型, , 
.参数 f, 双精度小数型, , 

置入代码 ({ 139, 69, 8, 139, 93, 4, 137, 93, 8, 93, 91, 255, 224 })

.子程序 C_glClearColor, 空白型, , 
.参数 地址, 整数型, , 
.参数 r, 小数型, , 
.参数 g, 小数型, , 
.参数 b, 小数型, , 
.参数 a, 小数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 C_SetWaitableTimer, 整数型, , 
.参数 地址, 整数型, , 
.参数 h, 整数型, , 
.参数 啊啊, LARGE_INTEGER, , 
.参数 r, 整数型, , 
.参数 g, 整数型, , 
.参数 b, 整数型, , 
.参数 a, 逻辑型, , 

置入代码 ({ 139, 69, 8, 139, 93, 4, 137, 93, 8, 93, 91, 255, 224 })
返回 (0)

.子程序 C_glClearDepth, 空白型, , 
.参数 地址, 整数型, , 
.参数 b, 双精度小数型, , 

置入代码 ({ 139, 69, 8, 139, 93, 4, 137, 93, 8, 93, 91, 255, 224 })
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 C_glVertex2f, 空白型, , 
.参数 地址, 整数型, , 
.参数 r, 小数型, , 
.参数 g, 小数型, , 

置入代码 ({ 201, 88, 135, 4, 36, 255, 224 })

.类模块 YM_编辑框, , , 

.程序集变量 内容地址, 整数型, , , 
.程序集变量 光标位置, 整数型, , , 
.程序集变量 挂接事件_内容被改变, 整数型, , , 
.程序集变量 挂接事件_光标位置被改变, 整数型, , , 
.程序集变量 多行模式, 逻辑型, , , 
.程序集变量 起始选中位置, 整数型, , , 
.程序集变量 光标闪烁状态, 逻辑型, , , 
.程序集变量 控件编号, 整数型, , , 
.程序集变量 编辑框显示偏移, 整数型, , , 
.程序集变量 最大显示字符数, 整数型, , , 
.程序集变量 是否已创建, 逻辑型, , , 
.程序集变量 编辑框宽度, 小数型, , , 
.程序集变量 编辑框高度, 小数型, , , 
.程序集变量 旧启动时间, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 创建, 逻辑型, 公开, 
.参数 编辑框宽高, YM_点, 可空, 默认为128*128
.参数 是否允许多行, 逻辑型, 可空, 
.参数 是否为密码模式, 逻辑型, 可空, 
.参数 是否只允许输入数值, 逻辑型, 可空, 
.参数 文字色, YM_颜色值, 可空, 不支持透明通道分量
.参数 最大输入长度, 整数型, 可空, 小于等于0为无限

.如果真 (等于 (引擎_是否已创建 (), 假))
    错误管理_ (51)
    返回 (假)
.如果真结束
.如果真 (是否已创建)
    错误管理_ (52)
    返回 (假)
.如果真结束
加入成员 (全局_编辑框内容, “”)
赋值 (控件编号, 取数组成员数 (全局_编辑框内容))
赋值 (内容地址, GetTextAddress (全局_编辑框内容 [控件编号]))
赋值 (多行模式, 是否允许多行)
.如果 (是否为空 (编辑框宽高))
    连续赋值 (128, 编辑框宽度, 编辑框高度)
.否则
    赋值 (编辑框宽度, 编辑框宽高.x)
    赋值 (编辑框高度, 编辑框宽高.y)
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束
赋值 (是否已创建, 真)
.如果真 (等于 (是否已创建, 假))
    错误管理_ (50)
    返回 (假)
.如果真结束
返回 (真)

.子程序 是否已创建, 逻辑型, 公开, 
返回 (是否已创建)


.子程序 置焦点, 空白型, 公开, 
.参数 焦点值, 逻辑型, , 

.如果 (焦点值)
    赋值 (全局_编辑框焦点, GetIntegerAddress (内容地址))
.否则
    .如果真 (等于 (全局_编辑框焦点, GetIntegerAddress (内容地址)))
        赋值 (全局_编辑框焦点, 0)
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束


.子程序 取焦点, 逻辑型, 公开, 
返回 (等于 (全局_编辑框焦点, GetIntegerAddress (内容地址)))


.子程序 取内容, 文本型, 公开, 
返回 (指针到文本 (内容地址))

.子程序 置内容, 空白型, 公开, 使用该指令后光标自动移动到最后，此指令不会响应挂接事件
.参数 新内容, 文本型, , 

赋值 (全局_编辑框内容 [控件编号], 新内容)
赋值 (光标位置, 取文本长度 (全局_编辑框内容 [控件编号]))

.子程序 置光标位置, 空白型, 公开, 注意光标位置不要插入到双字节字符中间，此指令不会响应挂接事件
.参数 新光标位置, 整数型, , 
.参数 起始选择位置, 整数型, 可空, 若此参数不为空且不等于光标位置，则会选中从起始选择位置到光标位置的文本

赋值 (光标位置, 新光标位置)
.如果 (或者 (是否为空 (起始选择位置), 等于 (起始选择位置, 新光标位置)))
    赋值 (起始选中位置, -1)
.否则
    赋值 (起始选中位置, 起始选择位置)
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 取选中文本, 文本型, 公开, 
.如果真 (大于 (起始选中位置, 0))
    .如果 (大于 (起始选中位置, 光标位置))
        返回 (取文本中间 (全局_编辑框内容 [控件编号], 光标位置, 相减 (起始选中位置, 光标位置)))
    .否则
        返回 (取文本中间 (全局_编辑框内容 [控件编号], 起始选中位置, 相减 (光标位置, 起始选中位置)))
    .如果结束
    
.如果真结束
返回 (“”)

.子程序 显示, 逻辑型, 公开, 
.参数 渲染文字, YM_文字渲染, 参考, 请确认此对象已经创建，否则将渲染文字失败
.参数 显示坐标, YM_点, 可空, 
.参数 显示颜色, YM_颜色值, 可空, 
.参数 选中文字背景色, YM_颜色值, 可空, 默认为R：32，G：128，B：255，A：255
.参数 光标宽度, 整数型, 可空, 默认为1
.参数 光标闪烁间隔毫秒数, 整数型, 可空, 默认为500，该值小于等于0时不会闪烁
.参数 光标颜色, YM_颜色值, 可空, 

.局部变量 渲染文本, 文本型, , , 

.如果真 (等于 (是否已创建, 假))
    错误管理_ (54)
    返回 (假)
.如果真结束
.如果真 (是否为空 (选中文字背景色))
    赋值 (选中文字背景色, 公共_到YM颜色 (32, 128, 255, 255))
.如果真结束
.如果真 (是否为空 (光标颜色))
    赋值 (光标颜色.a, 255)
.如果真结束
赋值 (最大显示字符数, 相乘 (相除 (编辑框宽度, 渲染文字.取宽度 ()), 2))
赋值 (渲染文本, 取文本中间 (全局_编辑框内容 [控件编号], 相加 (1, 编辑框显示偏移), 最大显示字符数))

.如果 (不等于 (起始选中位置, -1))
    .如果 (大于 (起始选中位置, 光标位置))
        渲染文字.显示 (渲染文本, 显示坐标, 显示颜色)
        引擎_画矩形 (公共_到YM矩形 (相加 (显示坐标.x, 相除 (相乘 (相减 (光标位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2)), 显示坐标.y, 相除 (相乘 (相减 (起始选中位置, 光标位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2), 渲染文字.取高度 ()), 选中文字背景色)
        渲染文字.显示 (取文本中间 (渲染文本, 相加 (相减 (光标位置, 编辑框显示偏移), 1), 相减 (起始选中位置, 光标位置)), 公共_到YM点 (相加 (显示坐标.x, 相除 (相乘 (相减 (光标位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2)), 显示坐标.y), 公共_取反色 (显示颜色))
    .否则
        .如果 (小于 (起始选中位置, 光标位置))
            渲染文字.显示 (渲染文本, 显示坐标, 显示颜色)
            引擎_画矩形 (公共_到YM矩形 (相加 (显示坐标.x, 相除 (相乘 (相减 (起始选中位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2)), 显示坐标.y, 相除 (相乘 (相减 (光标位置, 起始选中位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2), 渲染文字.取高度 ()), 选中文字背景色)
            渲染文字.显示 (取文本中间 (渲染文本, 相加 (相减 (起始选中位置, 编辑框显示偏移), 1), 相减 (光标位置, 起始选中位置)), 公共_到YM点 (相加 (显示坐标.x, 相除 (相乘 (相减 (起始选中位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2)), 显示坐标.y), 公共_取反色 (显示颜色))
        .否则
             ' 起始选中位置 ＝ -1
            渲染文字.显示 (渲染文本, 显示坐标, 显示颜色)
        .如果结束
        
    .如果结束
    
    
    
.否则
    渲染文字.显示 (渲染文本, 显示坐标, 显示颜色)
.如果结束

赋值 (光标宽度, 选择 (是否为空 (光标宽度), 1, 光标宽度))
赋值 (光标闪烁间隔毫秒数, 选择 (是否为空 (光标闪烁间隔毫秒数), 500, 光标闪烁间隔毫秒数))
.如果真 (大于 (相减 (取启动时间 (), 旧启动时间), 光标闪烁间隔毫秒数))
    赋值 (旧启动时间, 取启动时间 ())
    赋值 (光标闪烁状态, 等于 (光标闪烁状态, 假))
.如果真结束
.如果真 (并且 (光标闪烁状态, 大于 (光标闪烁间隔毫秒数, 0)))
    引擎_画矩形 (公共_到YM矩形 (相加 (显示坐标.x, 相除 (相乘 (相减 (光标位置, 编辑框显示偏移), 渲染文字.取宽度 ()), 2)), 显示坐标.y, 光标宽度, 渲染文字.取高度 ()), 光标颜色)
.如果真结束
返回 (真)


.子程序 挂接事件, 空白型, 公开, 
.参数 挂接事件编号, 整数型, , 请使用“编辑框事件_”开头的常量，关于函数内容请详细参阅常量说明
.参数 子程序指针, 整数型, , 

.判断开始 (等于 (挂接事件编号, #编辑框事件_内容被改变))
    赋值 (挂接事件_内容被改变, 子程序指针)
.判断 (等于 (挂接事件编号, #编辑框事件_光标位置被移动))
    赋值 (挂接事件_光标位置被改变, 子程序指针)
.默认
    
.判断结束


.子程序 销毁, 逻辑型, 公开, 
.如果真 (等于 (是否已创建, 假))
    错误管理_ (55)
    返回 (假)
.如果真结束
返回 (真)

.程序集 私有程序集, , , 

.子程序 初始化必要函数, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (CreateWindowExA, 取API地址 (“CreateWindowExA”, USER32A))
赋值 (GetWindowRectA, 取API地址 (“GetWindowRect”, USER32A))
赋值 (GetClientRectA, 取API地址 (“GetClientRect”, USER32A))
赋值 (RtlMoveMemoryA, 取API地址 (“RtlMoveMemory”, KELNEL32A))
赋值 (lstrcpynA, 取API地址 (“lstrcpynA”, KELNEL32A))

赋值 (glColor4bA, 取API地址 (“glColor4ub”, OPENGL32A))
赋值 (glRasterPos2fA, 取API地址 (“glRasterPos2f”, OPENGL32A))
赋值 (glBitmapA, 取API地址 (“glBitmap”, OPENGL32A))
赋值 (glClearA, 取API地址 (“glClear”, OPENGL32A))
赋值 (glViewportA, 取API地址 (“glViewport”, OPENGL32A))
赋值 (glOrthoA, 取API地址 (“glOrtho”, OPENGL32A))
赋值 (glDeleteListsA, 取API地址 (“glDeleteLists”, OPENGL32A))
赋值 (wglGetCurrentDCA, 取API地址 (“wglGetCurrentDC”, OPENGL32A))
赋值 (glGenListsA, 取API地址 (“glGenLists”, OPENGL32A))
赋值 (wglUseFontBitmapsA, 取API地址 (“wglUseFontBitmapsA”, OPENGL32A))
赋值 (wglUseFontBitmapsWA, 取API地址 (“wglUseFontBitmapsW”, OPENGL32A))
赋值 (glCallListA, 取API地址 (“glCallList”, OPENGL32A))
赋值 (glPushMatrixA, 取API地址 (“glPushMatrix”, OPENGL32A))
赋值 (glPopMatrixA, 取API地址 (“glPopMatrix”, OPENGL32A))
赋值 (glBeginA, 取API地址 (“glBegin”, OPENGL32A))
赋值 (glEndA, 取API地址 (“glEnd”, OPENGL32A))
赋值 (glTexCoord2fA, 取API地址 (“glTexCoord2f”, OPENGL32A))
赋值 (glVertex2fA, 取API地址 (“glVertex2f”, OPENGL32A))
赋值 (glRotatefA, 取API地址 (“glRotatef”, OPENGL32A))
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (glGetStringA, 取API地址 (“glGetString”, OPENGL32A))
赋值 (glBindTextureA, 取API地址 (“glBindTexture”, OPENGL32A))
赋值 (glEnableA, 取API地址 (“glEnable”, OPENGL32A))
赋值 (glRectfA, 取API地址 (“glRectf”, OPENGL32A))

.子程序 取API地址, 整数型, , 
.参数 API名, 文本型, , 
.参数 库地址, 整数型, , 

返回 (Call_2 (GetProcAddress, 库地址, GetTextAddress (API名)))

.子程序 消息处理, 整数型, , 
.参数 句柄, 整数型, , 
.参数 消息值, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 DefWindowProcA, 整数型, 静态, , 

.如果真 (等于 (DefWindowProcA, 0))
    赋值 (DefWindowProcA, 取API地址 (“DefWindowProcA”, USER32A))
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束
返回 (Call_4 (DefWindowProcA, 句柄, 消息值, 参数一, 参数二))

.子程序 SetPDF, 逻辑型, , 
.局部变量 PDF, TPIXELFORMATDESCRIPTOR, , , 
.局部变量 a, 整数型, , , 

赋值 (PDF.nSize, 40)
赋值 (PDF.nVersion, 1)
赋值 (PDF.dwFlags, 位或 (4, 32, 1))
赋值 (PDF.cDepthBits, 16)
赋值 (PDF.cColorBits, 32)
赋值 (a, Call_2 (取API地址 (“ChoosePixelFormat”, GDI32A), 引擎_GetDeviceContext (), GetPDFAddress (PDF)))
.如果真 (等于 (a, 0))
    错误管理_ (7)
    返回 (假)
.如果真结束
返回 (等于 (Call_3 (取API地址 (“SetPixelFormat”, GDI32A), 引擎_GetDeviceContext (), a, GetPDFAddress (PDF)), 1))

.子程序 创建窗口基类_, 文本型, , 
.参数 窗口图标句柄, 空白型, , 

.局部变量 WndClass, WNDCLASSEX, , , 

赋值 (WndClass.cbSize, 48)
赋值 (WndClass.lpfnWndProc, &消息处理)
赋值 (WndClass.style, 位或 (1, 2, 32))
赋值 (WndClass.hInstance, 模块句柄)
赋值 (WndClass.hIcon, 窗口图标句柄)
赋值 (WndClass.hCursor, Call_2 (取API地址 (“LoadCursorA”, USER32A), 0, 32512))
赋值 (WndClass.lpszClassName, “Yummy”)
' 本源码来自易语言资源网(www.5A5X.com)
.如果真 (等于 (Call_1 (取API地址 (“RegisterClassExA”, USER32A), GetWndClassAddress (WndClass)), 0))
    错误管理_ (10)
.如果真结束
返回 (WndClass.lpszClassName)


 ' 不属于任何一个程序集、类模块的函数：
