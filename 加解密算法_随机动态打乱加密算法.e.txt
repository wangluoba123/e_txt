 ' 文件类型：Windows模块源码

 ' 程序名称：动态加解密
 ' 程序描述：动态加解密
@备注:
动态加解密
 ' 程序作者：siquzhanshi2
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

调试输出 (动态算法_加密 (到字节集 (“我爱易语言！！我爱祖国！感谢CCTV、吴涛。。。”), “测试测试abcd”)) ' 加密，同一数据可以加密成不同密文
调试输出 (到文本 (动态算法_解密 (“J^KSK7J*IlK4JoIoJ#J0KfL)JkLUIpLtLVJ^K1LDJ6IILnL#KsLsJxJbICJpL9KwK#LYJ*JZLBJjKGIyJLKxJQLKL+LfKdKhJiJJInK8LTKsKYKYJ4KPLlLyJPLxL_JNKcJ@JhLsImLkLSJfKXKIJ3LULkLDKpKEJuJ&IzJ3L6J1K~KO”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
调试输出 (到文本 (动态算法_解密 (“KTJ&K&L6LKK^K7JYLWLSJaIrKeJGK4KdL(JqKaIzJfKUIkJYLQLALxLrKCLpJHIxJMJDL*LZK|J0JeLmLKJ*LPKNKUK2JZJ4LhL@KmLkJrJgIwIwL3K@K8KOJ@L+LuJUKzIlJEL4IJLLL%J3K)JhJbL&LHLoLMK%KRIkJWIpLeJ0KjK8”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
调试输出 (到文本 (动态算法_解密 (“KaLaLULIIKJGILJnKDKHL!K*JwKALMJAKRLqJWKzLeLpKjLXJoJMItIDLZK@K5IEJ0KULrLKKwIKJBLJIGL*L@IAK&K~J+JcLEL_KJL#KOKVJTJTLbKpKgK#JlKvIqL~J_KlLDJqKIJuKNKgJSLhLaJiKfK~JkK8IpKMLVKqK1KnJ6L4”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
调试输出 (到文本 (动态算法_解密 (“I2HTDBEpI@H1BKCKC*C+BXA5H*G$DvD6L(JqA(ysChBGEtFRGFFFJRJ&L4K^A4BnC%D5EdEwGpIPIBKJLNK2ANAzCZCWE!E%G|GuIlK0KxLWzxzxBJCvEVE^G8H&I(GPKhJ0zhBsBtyvDFD3GSIhI5GuK^Khz^APBeA#DqEVFCHzIOGM”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
调试输出 (到文本 (动态算法_解密 (“r2q2iWiKL*KExYxAqkqodfcm@(#F5131Yo1#D+FZs+rzh+hY)+_Y0+0iY+Z#D7BKs7tXh7hd)8*n08!%Y81zDRDnsRsOhRhV)R)@0R9zYRY^CBCBrBsngBhW(B)X9B!0XBVrClDIrlonglf~(l)a9l~dXlXCC(C3r(q3g(gOFBHwuBrz”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
调试输出 (到文本 (动态算法_解密 (“v$wQp^oed_df$f#LZvZrINH3sDtHkkhwfWgt*W^_8W7(LGL^AGBypGpweGft&G^g7G8tLqLLAqyApqqKeqh3&q$E7q7lLaLeAaAJpapMeaeh&a&a7a87L0LcA0zFp0q4e0cV&0%5707lLTJeATAEpTqfeTe7DbCCsbsKhbhQ)b(S0b0x”, “测试测试abcd”))) ' 不同的密文可以解密成同一个数据
 ' 但是每个密文的长度都相等，都是原文本长度×4
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 数据倒序, 字节集, , 
.参数 数据, 字节集, , 

.局部变量 返回值, 字节集, , , 
.局部变量 计数, 整数型, , , 

赋值 (返回值, 取空白字节集 (取字节集长度 (数据))) ' 预先分配内存，加快速度
.计次循环首 (取字节集长度 (数据), 计数)
    赋值 (返回值 [计数], 数据 [相加 (相减 (取字节集长度 (数据), 计数), 1)]) ' 从尾部开始加入返回值，这样就能求得倒序后的数据
.计次循环尾 ()
返回 (返回值)

.子程序 数据打乱, 字节集, , 可以打乱也可以恢复
.参数 数据, 字节集, , 

.局部变量 数据1, 字节集, , , 
.局部变量 数据2, 字节集, , , 

赋值 (数据1, 取字节集左边 (数据, 相除 (取字节集长度 (数据), 2))) ' 这两句把数据分拆成左右两半
赋值 (数据2, 取字节集右边 (数据, 相除 (取字节集长度 (数据), 2)))
 ' 调试输出 (数据1 ＋ 数据2)
赋值 (数据1, 数据倒序 (数据1)) ' 然后分别倒序
赋值 (数据2, 数据倒序 (数据2))
返回 (相加 (数据1, 数据2))

.子程序 动态算法_加密, 文本型, 公开, 
.参数 数据, 字节集, , 
.参数 密码, 文本型, , 

.局部变量 数据长度, 整数型, , , 
.局部变量 码表, 字节集, , , 
.局部变量 码表长度, 整数型, , , 
.局部变量 密码字节集, 字节集, , , 
.局部变量 密码长度, 整数型, , , 
.局部变量 随机密匙, 整数型, , , 
.局部变量 临时字节, 整数型, , , 
.局部变量 商数, 整数型, , , 
.局部变量 余数, 整数型, , , 
.局部变量 计数1, 整数型, , , 
.局部变量 计数2, 整数型, , , 
.局部变量 计数3, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (数据, 数据打乱 (数据)) ' 打乱一下，增加破解难度
赋值 (数据长度, 取字节集长度 (数据)) ' 取长度
赋值 (码表, 数据打乱 (到字节集 (“abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@#$%^&*()_+|”))) ' 生成打乱的码表 因为这里的字符都是只占1字节的，所以倒序后不会乱码
赋值 (码表长度, 取字节集长度 (码表)) ' 取长度
赋值 (密码字节集, 数据打乱 (到字节集 (密码))) ' 打乱一下密码，增加破解难度
赋值 (密码长度, 取字节集长度 (密码字节集)) ' 取长度
.计次循环首 (数据长度, 计数1) ' 加密过程正式开始
    赋值 (计数2, 相加 (计数2, 1)) ' 多个计数变量
    .如果真 (大于 (计数2, 码表长度)) ' 防止数据溢出
        赋值 (计数2, 1)
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    赋值 (计数3, 相加 (计数3, 1)) ' 多个计数变量
    .如果真 (大于 (计数3, 密码长度)) ' 防止数据溢出
        赋值 (计数3, 1)
    .如果真结束
    置随机数种子 () ' 我的习惯是要初始化一下种子，也可以不初始化
    赋值 (随机密匙, 取随机数 (1, 5000)) ' 生成一个随机密匙 码表足够长 所以即使取值5000也不会使字节数据溢出 注意如果你改了码表一定要把这个最大数据也改小
    赋值 (商数, 相加 (相除 (随机密匙, 码表长度), 1)) ' 下面两句把随机密钥分解成两个数据，一个是商，一个是余，将商乘上码表长度加上余数就是随机密匙 加1是为了防止得到0
    赋值 (余数, 相加 (求余数 (随机密匙, 码表长度), 1)) ' 同上
    赋值 (返回值, 相加 (返回值, 取字节集中间 (码表, 商数, 1), 取字节集中间 (码表, 余数, 1))) ' 加入返回值内
    赋值 (临时字节, 位异或 (数据 [计数1], 码表 [计数2], 密码字节集 [计数3], 随机密匙)) ' 把原数据内的对应字节这些值组合起来，形成一个新的数据
    赋值 (商数, 相加 (相除 (临时字节, 码表长度), 1)) ' 下面两句把商数分解成两个数据，一个是商，一个是余，将商乘上码表长度加上余数就是随机密匙 加1是为了防止得到0
    赋值 (余数, 相加 (求余数 (临时字节, 码表长度), 1)) ' 同上
    赋值 (返回值, 相加 (返回值, 取字节集中间 (码表, 商数, 1), 取字节集中间 (码表, 余数, 1))) ' 加入返回值内
.计次循环尾 ()
返回 (到文本 (返回值)) ' 把返回值转为文本

.子程序 动态算法_解密, 字节集, 公开, 
.参数 欲解密的数据, 文本型, , 
.参数 密码, 文本型, , 

.局部变量 数据, 字节集, , , 
.局部变量 数据长度, 整数型, , , 
.局部变量 码表, 字节集, , , 
.局部变量 码表长度, 整数型, , , 
.局部变量 密码字节集, 字节集, , , 
.局部变量 密码长度, 整数型, , , 
.局部变量 随机密匙, 整数型, , , 
.局部变量 临时字节, 整数型, , , 
.局部变量 商数, 整数型, , , 
.局部变量 余数, 整数型, , , 
.局部变量 计数1, 整数型, , , 
.局部变量 计数2, 整数型, , , 
.局部变量 计数3, 整数型, , , 
.局部变量 计数4, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (数据, 到字节集 (欲解密的数据)) ' 把要解密的数据转成字节集
赋值 (数据长度, 取字节集长度 (数据)) ' 取长度
赋值 (码表, 数据打乱 (到字节集 (“abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@#$%^&*()_+|”))) ' 生成打乱的码表 因为这里的字符都是只占1字节的，所以倒序后不会乱码
赋值 (码表长度, 取字节集长度 (码表)) ' 这些都解释过了 不重复解释
赋值 (密码字节集, 数据打乱 (到字节集 (密码)))
赋值 (密码长度, 取字节集长度 (密码字节集))
赋值 (返回值, 取空白字节集 (相除 (数据长度, 4))) ' 先分配内存，加快解密速度
.变量循环首 (4, 数据长度, 4, 计数1) ' 用变量循环首比较好，4个一循环
    赋值 (计数4, 相加 (计数4, 1)) ' 多个计数变量
    赋值 (计数2, 相加 (计数2, 1)) ' 多个计数变量
    .如果真 (大于 (计数2, 码表长度)) ' 防止越界访问
        赋值 (计数2, 1)
    .如果真结束
    赋值 (计数3, 相加 (计数3, 1)) ' 多个计数变量
    .如果真 (大于 (计数3, 密码长度)) ' 防止越界访问
        赋值 (计数3, 1)
        ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    赋值 (商数, 相减 (寻找字节集 (码表, 取字节集中间 (数据, 相减 (计数1, 3), 1), ), 1)) ' 某个字节在码表中的位置就是我们要在这个位置上保存的整数。这里我们通过取出商和余就能求出那个随机密匙
    赋值 (余数, 相减 (寻找字节集 (码表, 取字节集中间 (数据, 相减 (计数1, 2), 1), ), 1)) ' 补充上面：减1和上面的加1相对 同样是为了防止0的错误
    赋值 (随机密匙, 相加 (相乘 (商数, 码表长度), 余数)) ' 被除数=除数×商+余数，小学的知识 被除数就是我们保存的数据――随机密匙
    赋值 (商数, 相减 (寻找字节集 (码表, 取字节集中间 (数据, 相减 (计数1, 1), 1), ), 1)) ' 同上面取随机密匙的过程
    赋值 (余数, 相减 (寻找字节集 (码表, 取字节集中间 (数据, 计数1, 1), ), 1))
    赋值 (临时字节, 相加 (相乘 (商数, 码表长度), 余数)) ' 同上
    赋值 (临时字节, 位异或 (临时字节, 码表 [计数2], 密码字节集 [计数3], 随机密匙)) ' 位异或可以把用位异或组合的数据拆分
    赋值 (返回值 [计数4], 到字节 (临时字节)) ' 然后保存进返回值
.变量循环尾 ()
赋值 (返回值, 数据打乱 (返回值)) ' 最后解除数据的打乱就搞掂了
返回 (返回值)


 ' 不属于任何一个程序集、类模块的函数：
