 ' 文件类型：未知类型

 ' 程序名称：IP查询
 ' 程序描述：
 ' 程序作者：ming
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。



.子程序 IP查询, 文本型, , 查询IP地址的地理位置
.参数 IP地址, 文本型, , 可以是域名
.参数 数据库文件名, 文本型, 可空, 

.局部变量 文件号, 整数型, , , 
.局部变量 匿名局部变量_104, 空白型, , , 
.局部变量 文件头字节集, 字节集, , , 
.局部变量 IP数量, 长整数型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 开始IP字节集, 字节集, , , 
.局部变量 结束IP偏移, 长整数型, , , 
.局部变量 结束IP字节集, 字节集, , , 
.局部变量 地区偏移, 长整数型, , , 
.局部变量 查询IP数值, 长整数型, , , 
.局部变量 地区文本, 文本型, , , 
.局部变量 IP段信息, 文本型, , , 
.局部变量 开始IP读取位置, 长整数型, , , 
.局部变量 开始ip, 文本型, , , 
.局部变量 结束IP, 文本型, , , 
.局部变量 first_start_ip_offset, 长整数型, , , 
.局部变量 last_start_ip_offset, 长整数型, , , 
.局部变量 开始IP数值, 长整数型, , , 
.局部变量 结束IP数值, 长整数型, , , 

.如果真 (等于 (IP地址, “”))
    返回 (“”)
.如果真结束
.如果真 (是否为空 (数据库文件名))
    赋值 (数据库文件名, “.\QQWry.dat”)
.如果真结束
赋值 (文件号, 打开文件 (数据库文件名, #读入, #无限制))
.如果真 (等于 (文件号, 0))
    信息框 (“没找到数据库”, 0, )
    返回 (“”)
.如果真结束
赋值 (文件头字节集, 读入字节集 (文件号, 8))
赋值 (first_start_ip_offset, 取字节集数据 (取字节集左边 (文件头字节集, 4), #整数型, ))
赋值 (last_start_ip_offset, 取字节集数据 (取字节集右边 (文件头字节集, 4), #整数型, ))
赋值 (IP数量, 相加 (整除 (相减 (last_start_ip_offset, first_start_ip_offset), 7), 1))
赋值 (查询IP数值, IP文本转整数值 (IP地址))
赋值 (开始IP读取位置, 二分法确定位置 (文件号, first_start_ip_offset, 1, IP数量, 查询IP数值))
移动读写位置 (文件号, , 相加 (first_start_ip_offset, 相乘 (相减 (开始IP读取位置, 1), 7)))
赋值 (开始IP字节集, 读入字节集 (文件号, 7))
赋值 (开始ip, IP文本补位 (取十六进制文本 (取字节集数据 (取字节集左边 (开始IP字节集, 4), #整数型, ))))
赋值 (结束IP偏移, 取字节集数据 (取字节集右边 (开始IP字节集, 3), #整数型, ))
移动读写位置 (文件号, , 结束IP偏移)
赋值 (结束IP字节集, 读入字节集 (文件号, 4))
赋值 (结束IP, IP文本补位 (取十六进制文本 (取字节集数据 (结束IP字节集, #整数型, ))))
赋值 (地区偏移, 相加 (结束IP偏移, 4))
赋值 (开始IP数值, 十六进制到十进制 (开始ip))
赋值 (结束IP数值, 十六进制到十进制 (结束IP))
.如果真 (并且 (大于或等于 (查询IP数值, 开始IP数值), 小于或等于 (查询IP数值, 结束IP数值)))
    赋值 (地区文本, 取地区文本 (文件号, 地区偏移))
.如果真结束
关闭文件 (文件号)
返回 (地区文本)


.子程序 二分法确定位置, 整数型, , 
.参数 文件号, 整数型, , 
.参数 基址, 长整数型, , 
.参数 初始位置, 长整数型, , 
.参数 结束位置, 长整数型, , 
.参数 查询值, 长整数型, , 

.局部变量 中间读写位置, 长整数型, , , 
.局部变量 中间位置, 长整数型, , , 
.局部变量 中间IP文本, 文本型, , , 
.局部变量 中间IP数值, 长整数型, , , 
.局部变量 结束读写位置, 长整数型, , , 
.局部变量 结束IP文本, 文本型, , , 
.局部变量 结束IP数值, 长整数型, , , 

赋值 (中间位置, 整除 (相加 (初始位置, 结束位置), 2))
.如果真 (等于 (初始位置, 中间位置))
    返回 (初始位置)
.如果真结束
赋值 (结束读写位置, 相加 (基址, 相乘 (相减 (结束位置, 1), 7)))
移动读写位置 (文件号, , 结束读写位置)
赋值 (结束IP文本, IP文本补位 (取十六进制文本 (取字节集数据 (取字节集左边 (读入字节集 (文件号, 7), 4), #整数型, ))))
赋值 (结束IP数值, 十六进制到十进制 (结束IP文本))
.如果真 (大于或等于 (查询值, 结束IP数值))
    返回 (结束位置)
.如果真结束
赋值 (中间读写位置, 相加 (基址, 相乘 (相减 (中间位置, 1), 7)))
移动读写位置 (文件号, , 中间读写位置)
赋值 (中间IP文本, IP文本补位 (取十六进制文本 (取字节集数据 (取字节集左边 (读入字节集 (文件号, 7), 4), #整数型, ))))
赋值 (中间IP数值, 十六进制到十进制 (中间IP文本))
.如果真 (小于 (查询值, 中间IP数值))
    .如果真 (等于 (相减 (结束位置, 初始位置), 1))
        返回 (初始位置)
    .如果真结束
    返回 (二分法确定位置 (文件号, 基址, 初始位置, 中间位置, 查询值))
.如果真结束
.如果真 (大于 (查询值, 中间IP数值))
    返回 (二分法确定位置 (文件号, 基址, 中间位置, 结束位置, 查询值))
.如果真结束
.如果真 (等于 (查询值, 中间IP数值))
    返回 (中间位置)
.如果真结束
返回 (0)

.子程序 取地区文本, 文本型, , 
.参数 文件号, 整数型, , 
.参数 地区偏移, 整数型, , 

.局部变量 首字节集, 字节集, , , 
.局部变量 偏移, 整数型, , , 
.局部变量 国家记录, 文本型, , , 
.局部变量 地区记录, 文本型, , , 
.局部变量 长度, 整数型, , , 

 ' 参考 http://www.2cto.com/net/200504/4715.html
移动读写位置 (文件号, , 地区偏移)
赋值 (首字节集, 读入字节集 (文件号, 1))
.判断开始 (等于 (首字节集, { 1 })) ' 模式1的国家记录后面不会再有地区记录
    赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
    赋值 (国家记录, 读国家记录 (文件号, 偏移, 长度))
    赋值 (偏移, 相加 (偏移, 长度))
    
    赋值 (地区记录, 读地区记录 (文件号, 偏移))
    
.判断 (等于 (首字节集, { 2 })) ' 模式2的国家记录后会有地区记录
    赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
    赋值 (国家记录, 读国家记录 (文件号, 偏移, 长度))
    赋值 (偏移, 相加 (地区偏移, 4))
    赋值 (地区记录, 读地区记录 (文件号, 偏移))
    
.默认
    赋值 (偏移, 地区偏移)
    赋值 (国家记录, 读国家记录 (文件号, 偏移, 长度))
    
    赋值 (偏移, 相加 (偏移, 长度))
    赋值 (地区记录, 读地区记录 (文件号, 偏移))
.判断结束

.如果真 (等于 (到大写 (删首尾空 (地区记录)), “CZ88.NET”))
    赋值 (地区记录, “”)
.如果真结束
.如果真 (并且 (等于 (地区记录, “”), 不等于 (国家记录, “”)))
    返回 (国家记录)
.如果真结束
.如果真 (并且 (不等于 (地区记录, “”), 等于 (国家记录, “”)))
    返回 (地区记录)
.如果真结束
.如果真 (等于 (国家记录, 地区记录))
    返回 (国家记录)
.如果真结束
返回 (相加 (国家记录, “ ”, 地区记录))

.子程序 读国家记录, 文本型, , 
.参数 文件号, 整数型, , 
.参数 地区偏移, 整数型, , 
.参数 长度, 整数型, 参考, 记录所占的长度

.局部变量 首字节集, 字节集, , , 
.局部变量 偏移, 整数型, , , 
.局部变量 国家记录, 文本型, , , 
.局部变量 记录长度, 整数型, , , 

移动读写位置 (文件号, #文件首, 地区偏移)
赋值 (首字节集, 读入字节集 (文件号, 1))
.如果 (等于 (首字节集, { 2 })) ' 第2次重定向一定是模式2
    赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
    移动读写位置 (文件号, #文件首, 偏移)
    赋值 (首字节集, 读入字节集 (文件号, 1))
    .如果 (或者 (等于 (首字节集, { 2 }), 等于 (首字节集, { 1 }))) ' 可能有错误,不管了
        赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
        移动读写位置 (文件号, #文件首, 偏移)
        
    .否则
         ' 不是重定向
        移动读写位置 (文件号, #现行位置, -1) ' 移动回去 上面读过一字节数据了
        
    .如果结束
    赋值 (国家记录, 读入文本 (文件号, ))
    赋值 (长度, 4)
.否则
     ' 不是重定向
    移动读写位置 (文件号, #现行位置, -1) ' 移动回去 上面读过一字节数据了
    赋值 (国家记录, 读入文本 (文件号, ))
    赋值 (记录长度, 取文本长度 (国家记录))
    赋值 (长度, 相加 (记录长度, 1))
.如果结束

返回 (国家记录)

.子程序 读地区记录, 文本型, , 
.参数 文件号, 整数型, , 
.参数 地区偏移, 空白型, , 

.局部变量 首字节集, 字节集, , , 
.局部变量 偏移, 整数型, , , 
.局部变量 地区记录, 文本型, , , 

移动读写位置 (文件号, #文件首, 地区偏移)
赋值 (首字节集, 读入字节集 (文件号, 1))
.如果 (或者 (等于 (首字节集, { 1 }), 等于 (首字节集, { 2 }))) ' 对于地区记录，模式1和模式2是一样的
    赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
    移动读写位置 (文件号, #文件首, 偏移)
    赋值 (首字节集, 读入字节集 (文件号, 1))
    .如果 (或者 (等于 (首字节集, { 1 }), 等于 (首字节集, { 2 }))) ' 再来判断下是否是重定向,安全第一
        赋值 (偏移, 取字节集数据 (读入字节集 (文件号, 3), #整数型, ))
        移动读写位置 (文件号, #文件首, 偏移)
    .否则
         ' 不是重定向
        移动读写位置 (文件号, #现行位置, -1) ' 移动回去 上面读过一字节数据了
    .如果结束
    
.否则
     ' 不是重定向
    移动读写位置 (文件号, #现行位置, -1) ' 移动回去 上面读过一字节数据了
.如果结束

赋值 (地区记录, 读入文本 (文件号, ))
返回 (地区记录)

.子程序 IP文本转整数值, 长整数型, , 
.参数 IP文本, 文本型, , 

.局部变量 IP变量数组, 文本型, , "0", 
.局部变量 十六进制IP文本, 文本型, , , 
.局部变量 十进制值, 长整数型, , , 
.局部变量 新ip, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 IP段, 文本型, , , 

赋值 (IP变量数组, 分割文本 (IP文本, “.”, ))
.如果真 (不等于 (取数组成员数 (IP变量数组), 4))
    赋值 (新ip, 转换为IP地址 (IP文本))
    赋值 (IP变量数组, 分割文本 (新ip, “.”, ))
    .如果真 (不等于 (取数组成员数 (IP变量数组), 4))
        返回 (0)
    .如果真结束
    
.如果真结束
赋值 (十六进制IP文本, “”)
.计次循环首 (4, i)
    赋值 (IP段, 取文本右边 (相加 (“00”, 取十六进制文本 (到整数 (IP变量数组 [相减 (5, i)]))), 2))
    赋值 (十六进制IP文本, 相加 (十六进制IP文本, IP段))
.计次循环尾 ()
赋值 (十进制值, 十六进制到十进制 (倒转十六进制文本 (十六进制IP文本)))
返回 (十进制值)

.子程序 十六进制到十进制, 长整数型, , 
.参数 十六进制文本, 文本型, , 

.局部变量 字节集, 字节集, , , 
.局部变量 字节集长度, 整数型, , , 
.局部变量 最终值, 长整数型, , , 
.局部变量 i, 整数型, , , 中间循环变量
.局部变量 临时数值, 整数型, , , 每一位上的值

赋值 (字节集, 到字节集 (到大写 (十六进制文本)))
赋值 (字节集长度, 取字节集长度 (字节集))
.计次循环首 (字节集长度, i)
    赋值 (临时数值, 字节集 [相加 (相减 (字节集长度, i), 1)])
    .如果真 (并且 (大于 (临时数值, 64), 小于 (临时数值, 71))) ' A=65 F=70
        赋值 (最终值, 相加 (最终值, 相乘 (相加 (相减 (临时数值, 65), 10), 求次方 (16, 相减 (i, 1)))))
        到循环尾 ()
    .如果真结束
    赋值 (最终值, 相加 (最终值, 相乘 (到整数 (字符 (临时数值)), 求次方 (16, 相减 (i, 1)))))
.计次循环尾 ()
返回 (最终值)

.子程序 倒转十六进制文本, 文本型, , 
.参数 IP地址文本, 文本型, , 

.局部变量 计次变量, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (临时文本, IP文本补位 (IP地址文本))
.计次循环首 (4, 计次变量)
    赋值 (结果文本, 相加 (结果文本, 取文本中间 (临时文本, 相加 (相减 (8, 相乘 (计次变量, 2)), 1), 2)))
.计次循环尾 ()
返回 (结果文本)


.子程序 IP文本补位, 文本型, , 
.参数 IP地址文本, 文本型, , 

.局部变量 文本长度, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 计次变量, 整数型, , , 

赋值 (临时文本, IP地址文本)
赋值 (文本长度, 取文本长度 (IP地址文本))
.如果真 (小于 (文本长度, 8))
    赋值 (临时文本, 相加 (取重复文本 (相减 (8, 文本长度), “0”), 临时文本))
.如果真结束
返回 (临时文本)

.子程序 十六进制文本到IP地址, 文本型, , 
.参数 IP文本, 文本型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 结果文本, 文本型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 结果ip, 文本型, , "4", 
.局部变量 IP地址, 文本型, , , 

赋值 (临时文本, IP文本补位 (IP文本))
.计次循环首 (4, 计次变量)
    赋值 (结果文本, 取文本中间 (临时文本, 相加 (1, 相乘 (相减 (计次变量, 1), 2)), 2))
    赋值 (IP地址, 相加 (IP地址, 到文本 (十六进制到十进制 (结果文本)), “.”))
.计次循环尾 ()
返回 (取文本左边 (IP地址, 相减 (取文本长度 (IP地址), 1)))

.程序集 程序集2, , , 


 ' 不属于任何一个程序集、类模块的函数：
