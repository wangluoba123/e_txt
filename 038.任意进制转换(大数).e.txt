 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 任意进制转换(大数)
 ' 程序描述：    将任意的一个正整数进行2-36进制之间的转换。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 405
    高度 = 304
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 任意进制转换(大数)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eCalc 306AA9E31B5940399723021A0D782077 1 0 数值计算支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：进制算法、文本分析
 ' 问题：任意进制转换(大数)
 ' 问题描述：
 ' 将任意的一个正整数进行２-３６进制之间的转换
 ' 问题分析：
 ' 利用易语言大数支持库，用文本分析的方法进行转换，注意不能用基本数据类型，不然数值过大就会溢出。
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
 ' 显示转换之后的结果
赋值 (.内容, 进制转换 (.内容, 到数值 (.取项目文本 (.现行选中项)), 到数值 (.取项目文本 (.现行选中项))))

.子程序 进制转换, 文本型, , 进行转换的子程序
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 
.参数 转换的进制, 整数型, , 

.局部变量 欲转换文本, 文本型, , , 输入的文本串
.局部变量 临时文本, 文本型, , , 存放从输入的文本串中取出的一个文本
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量1, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 次方数, 未知类型0x2000A, , , 每一位数字对应的10的次方数
.局部变量 转换的进制大数1, 未知类型0x2000A, , , 要转换的进制-1
.局部变量 转换的进制大数, 未知类型0x2000A, , , 要转换的进制
.局部变量 被转换进制大数, 未知类型0x2000A, , , 被转换的进制
.局部变量 临时大数, 未知类型0x2000A, , , 将被转换数字转换成的大数
.局部变量 余数大数, 未知类型0x2000A, , , 存放求出的余数大数
.局部变量 数值1大数, 未知类型0x2000A, , , 只存放1
.局部变量 临时大数1, 未知类型0x2000A, , , 将被转换数字的每一位转换成的大数

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 36), 大于 (转换的进制, 36))) ' 判断两个“进制系数”是否正确
    返回 (“参数错误-进制只能在2-36之间”)
.如果真结束
赋值 (被转换文本, 到大写 (到半角 (被转换文本))) ' 规范参数
.变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1) ' 判断输入的数字文本是否有效
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量1, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, 被转换文本, “不是一个有效的”, 取文本左边 (数值到金额 (被转换进制, 真), 相减 (取文本长度 (数值到金额 (被转换进制, 真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
     ' 全部查找完毕
    .如果真 (等于 (计次变量1, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.变量循环尾 ()

 ' 如果临时文本不为空，说明此数字文本无效！
.如果真 (不等于 (临时文本, “”))
    返回 (临时文本)
.如果真结束
 ' 以上为数据正确性校验处理代码

.如果真 (等于 (被转换进制, 转换的进制)) ' 相同时，不用进行转换
    返回 (被转换文本)
.如果真结束

.变量循环首 (1, 取文本长度 (被转换文本), 1, 计次变量1) ' 先将要转换的数字放入大数中
    次方数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
    被转换进制大数.未知支持库函数_69 (被转换进制)
    .计次循环首 (相减 (取文本长度 (被转换文本), 计次变量1), 计次变量2) ' 求次方
        赋值 (次方数, 次方数.未知支持库函数_94 (被转换进制大数))
    .计次循环尾 ()
    
    临时大数1.未知支持库函数_69 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量1, 1), , 真), 1))
    赋值 (临时大数1, 临时大数1.未知支持库函数_94 (次方数))
    赋值 (临时大数, 临时大数1.未知支持库函数_92 (临时大数)) ' 临时大数即为最后转换成的大数
.变量循环尾 ()
转换的进制大数1.未知支持库函数_69 (相减 (转换的进制, 1))
转换的进制大数.未知支持库函数_69 (转换的进制)
数值1大数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
.判断循环首 (等于 (临时大数.未知支持库函数_86 (转换的进制大数1), 真)) ' 开始进制转换,除进制数取余数
    赋值 (余数大数, 临时大数.未知支持库函数_97 (转换的进制大数)) ' 求出的余数
    赋值 (临时大数1, 余数大数.未知支持库函数_92 (数值1大数)) ' 求出的余数＋1
    赋值 (临时数值, 到数值 (临时大数1.未知支持库函数_68 ())) ' 最后的余数
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 临时数值, 1), 欲转换文本)) ' 找出每一个余数对应的数字
    赋值 (临时大数, 临时大数.未知支持库函数_95 (转换的进制大数, 10)) ' 取出剩余的数字
    赋值 (临时大数, 临时大数.未知支持库函数_90 ())
.判断循环尾 ()
赋值 (临时数值, 临时大数.未知支持库函数_77 ()) ' 最后剩下的余数
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)


 ' 不属于任何一个程序集、类模块的函数：
