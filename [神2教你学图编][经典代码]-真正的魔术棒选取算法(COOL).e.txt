 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 542
    高度 = 477
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “[神2教你学图编][经典代码]-真正的魔术棒算法(COOL)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 1 0 位图操作支持库




数据类型 stackfield, , 
    .成员 xl, 整数型, , , 
    .成员 xr, 整数型, , , 
    .成员 y, 整数型, , , 


.窗口程序集 窗口程序集1, , , 

.程序集变量 i, 整数型, , , i, X, Xl, Xr, p_Xl, p_Xr, signed_Y
.程序集变量 X, 整数型, , , 
.程序集变量 Y, 整数型, , , 
.程序集变量 Xl, 整数型, , , 
.程序集变量 Xr, 整数型, , , 
.程序集变量 p_Xl, 整数型, , , 
.程序集变量 p_Xr, 整数型, , , 
.程序集变量 signed_Y, 整数型, , , 
.程序集变量 P, 字节型, , "0", 
.程序集变量 stack, stackfield, , "0", 
.程序集变量 正在处理, 逻辑型, , , 
.程序集变量 原始图片, 字节集, , , 
.子程序 set_stack_empty, 空白型, , 
.参数 匿名参数_75, 空白型, , 

重定义数组 (stack, 假, 1)
赋值 (stack [1].y, 1)


.子程序 stack_not_empty, 逻辑型, , 
.参数 匿名参数_74, 空白型, , 

.如果 (等于 (stack [1].y, 1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 push, 空白型, , xl, xr, yd: integer
.参数 xl, 整数型, 参考, 
.参数 xr, 整数型, 参考, 
.参数 yd, 整数型, 参考, 
.参数 匿名参数_73, 空白型, , 

赋值 (stack [1].y, 相加 (stack [1].y, 1))
.如果真 (大于 (stack [1].y, 取数组成员数 (stack)))
    重定义数组 (stack, 真, 相加 (取数组成员数 (stack), 1))
.如果真结束
赋值 (stack [stack] [1].y, xl, xl)
赋值 (stack [stack] [1].y, xr, xr)
赋值 (stack [stack] [1].y, y, yd)

.子程序 pop, 空白型, , var xl: integer; var xr: integer; var yd: integer
.参数 xl, 整数型, 参考, 
.参数 xr, 整数型, 参考, 
.参数 yd, 整数型, 参考, 
.参数 匿名参数_89, 空白型, , 

.如果真 (大于 (stack [1].y, 1))
    赋值 (xl, stack [stack] [1].y, xl)
    赋值 (xr, stack [stack] [1].y, xr)
    赋值 (yd, stack [stack] [1].y, y)
    赋值 (stack [1].y, 相减 (stack [1].y, 1))
    重定义数组 (stack, 真, 相减 (取数组成员数 (stack), 1))
.如果真结束


.子程序 FillLine, 字节集, , FBitmap: TBitmap; FWidth, FHeight, Xs,Ys: integer; OldColor, NewColor: Byte
.参数 FBitmap, 字节集, , 
.参数 FWidth, 整数型, , 
.参数 FHeight, 整数型, 参考, 
.参数 Xs, 整数型, , 
.参数 Ys, 整数型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 
.参数 匿名参数_343, 空白型, , 

.局部变量 TBitmap, 位图, , , 
.局部变量 TBitmap2, 位图, , , 
.局部变量 H, 整数型, , , 
.局部变量 W, 整数型, , , 
.局部变量 匿名局部变量_453, 空白型, , , 


set_stack_empty ()
.如果真 (CT_Color (OldColor, NewColor, ColorWarp))
    返回 (FBitmap)
.如果真结束
TBitmap.载入数据 (FBitmap)
TBitmap2.创建 (TBitmap.取宽度 (), TBitmap.取高度 (), 1, #白色)
赋值 (i, Xs)
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    TBitmap2.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), #黑色)
    赋值 (i, 相加 (i, 1))
    .如果真 (等于 (i, TBitmap.取宽度 ()))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xr, 相减 (i, 1))
赋值 (i, 相减 (Xs, 1))
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    TBitmap2.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), #黑色)
    赋值 (i, 相减 (i, 1))
    .如果真 (等于 (i, 0))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xl, 相加 (i, 1))
.如果真 (大于 (Ys, 0))
    push (Xl, Xr, 负 (相减 (Ys, 1)))
.如果真结束
.如果真 (小于 (Ys, 相减 (TBitmap.取高度 (), 1)))
    push (Xl, Xr, 相加 (Ys, 1))
.如果真结束
.判断循环首 (stack_not_empty ())
    pop (p_Xl, p_Xr, signed_Y)
    赋值 (Y, 取绝对值 (signed_Y))
    .如果 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (p_Xl, 1), 相减 (Y, 1)), ColorWarp))
         ' //xl处是oldcolor时
        .如果 (大于 (p_Xl, 0))
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .否则
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .如果结束
        
    .否则
        赋值 (X, p_Xl)
        .判断开始 (或者 (并且 (大于 (X, 0), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 2), 相减 (Y, 1)), ColorWarp), 假)), 等于 (X, 0)))
            .判断循环首 (等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, X)
            
        .判断 (大于 (p_Xl, 0))
             ' 否则xl 的左邻点是oldcolor时，先考虑左边，向左找xl
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .默认
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .判断结束
        
    .如果结束
    .判断循环首 (小于或等于 (X, 相加 (p_Xr, 1)))
        .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
            TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
            TBitmap2.置某点颜色 (相减 (X, 1), 相减 (Y, 1), #黑色)
            赋值 (X, 相加 (X, 1))
            .如果真 (等于 (X, TBitmap.取宽度 ()))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (Xr, 相减 (X, 1))
        .如果真 (并且 (小于或等于 (取绝对值 (相减 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相减 (signed_Y, 1)), 1)))
            .如果真 (小于或等于 (Xl, 相减 (p_Xl, 1)))
                push (Xl, 相减 (p_Xl, 1), 负 (相减 (signed_Y, 1)))
            .如果真结束
            .如果真 (大于或等于 (Xr, 相加 (p_Xr, 1)))
                push (相加 (p_Xr, 1), Xr, 负 (相减 (signed_Y, 1)))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取绝对值 (相加 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相加 (signed_Y, 1)), 1)))
            push (Xl, Xr, 相加 (signed_Y, 1))
        .如果真结束
        .如果真 (等于 (X, TBitmap.取宽度 ()))
            赋值 (X, 相加 (X, 1))
        .如果真结束
        .如果真 (小于或等于 (X, 相减 (TBitmap.取宽度 (), 1)))
            .判断循环首 (并且 (小于或等于 (X, 相加 (p_Xr, 1)), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假)))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
        .如果真结束
        
    .判断循环尾 ()
    处理事件 ()
.判断循环尾 ()
TBitmap.载入数据 (FBitmap)
.计次循环首 (TBitmap2.取高度 (), H)
    .计次循环首 (TBitmap2.取宽度 (), W)
        .如果真 (不等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), 相减 (H, 1))))
            .如果真 (或者 (等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 2), 相减 (H, 1))), 等于 (#白色, TBitmap2.取某点颜色 (W, 相减 (H, 1))), 等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), 相减 (H, 2))), 等于 (#白色, TBitmap2.取某点颜色 (相减 (W, 1), H)), 等于 (W, 0), 等于 (H, 0), 等于 (W, TBitmap2.取宽度 ()), 等于 (H, TBitmap2.取高度 ())))
                TBitmap.置某点颜色 (相减 (W, 1), 相减 (H, 1), NewColor)
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (TBitmap.取位图数据 ())


.子程序 FillColors, 字节集, , FBitmap: TBitmap; FWidth, FHeight, Xs,Ys: integer; OldColor, NewColor: Byte
.参数 FBitmap, 字节集, , 
.参数 FWidth, 整数型, , 
.参数 FHeight, 整数型, 参考, 
.参数 Xs, 整数型, , 
.参数 Ys, 整数型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 
.参数 匿名参数_165, 空白型, , 

.局部变量 TBitmap, 位图, , , 
.局部变量 匿名局部变量_169, 空白型, , , 


set_stack_empty ()
.如果真 (CT_Color (OldColor, NewColor, ColorWarp))
    返回 (FBitmap)
.如果真结束
TBitmap.载入数据 (FBitmap)
赋值 (i, Xs)
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    赋值 (i, 相加 (i, 1))
    .如果真 (等于 (i, TBitmap.取宽度 ()))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xr, 相减 (i, 1))
赋值 (i, 相减 (Xs, 1))
.判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (i, 1), 相减 (Ys, 1)), ColorWarp))
    TBitmap.置某点颜色 (相减 (i, 1), 相减 (Ys, 1), NewColor)
    赋值 (i, 相减 (i, 1))
    .如果真 (等于 (i, 0))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (Xl, 相加 (i, 1))
.如果真 (大于 (Ys, 0))
    push (Xl, Xr, 负 (相减 (Ys, 1)))
.如果真结束
.如果真 (小于 (Ys, 相减 (TBitmap.取高度 (), 1)))
    push (Xl, Xr, 相加 (Ys, 1))
.如果真结束
.判断循环首 (stack_not_empty ())
    pop (p_Xl, p_Xr, signed_Y)
    赋值 (Y, 取绝对值 (signed_Y))
    .如果 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (p_Xl, 1), 相减 (Y, 1)), ColorWarp))
         ' //xl处是oldcolor时
        .如果 (大于 (p_Xl, 0))
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .否则
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .如果结束
        
    .否则
        赋值 (X, p_Xl)
        .判断开始 (或者 (并且 (大于 (X, 0), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 2), 相减 (Y, 1)), ColorWarp), 假)), 等于 (X, 0)))
            .判断循环首 (等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, X)
            
        .判断 (大于 (p_Xl, 0))
             ' 否则xl 的左邻点是oldcolor时，先考虑左边，向左找xl
            赋值 (X, 相减 (p_Xl, 1))
            .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
                TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
                赋值 (X, 相减 (X, 1))
                .如果真 (等于 (X, -1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
            赋值 (Xl, 相加 (X, 1))
            赋值 (X, p_Xl)
        .默认
            赋值 (Xl, 0)
            赋值 (X, p_Xl)
        .判断结束
        
    .如果结束
    .判断循环首 (小于或等于 (X, 相加 (p_Xr, 1)))
        .判断循环首 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp))
            TBitmap.置某点颜色 (相减 (X, 1), 相减 (Y, 1), NewColor)
            赋值 (X, 相加 (X, 1))
            .如果真 (等于 (X, TBitmap.取宽度 ()))
                跳出循环 ()
            .如果真结束
            
        .判断循环尾 ()
        赋值 (Xr, 相减 (X, 1))
        .如果真 (并且 (小于或等于 (取绝对值 (相减 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相减 (signed_Y, 1)), 1)))
            .如果真 (小于或等于 (Xl, 相减 (p_Xl, 1)))
                push (Xl, 相减 (p_Xl, 1), 负 (相减 (signed_Y, 1)))
            .如果真结束
            .如果真 (大于或等于 (Xr, 相加 (p_Xr, 1)))
                push (相加 (p_Xr, 1), Xr, 负 (相减 (signed_Y, 1)))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取绝对值 (相加 (signed_Y, 1)), 相减 (TBitmap.取高度 (), 1)), 大于或等于 (取绝对值 (相加 (signed_Y, 1)), 1)))
            push (Xl, Xr, 相加 (signed_Y, 1))
        .如果真结束
        .如果真 (等于 (X, TBitmap.取宽度 ()))
            赋值 (X, 相加 (X, 1))
        .如果真结束
        .如果真 (小于或等于 (X, 相减 (TBitmap.取宽度 (), 1)))
            .判断循环首 (并且 (小于或等于 (X, 相加 (p_Xr, 1)), 等于 (CT_Color (OldColor, TBitmap.取某点颜色 (相减 (X, 1), 相减 (Y, 1)), ColorWarp), 假)))
                赋值 (X, 相加 (X, 1))
                .如果真 (等于 (X, TBitmap.取宽度 ()))
                    赋值 (X, 相加 (X, 1))
                    跳出循环 ()
                .如果真结束
                
            .判断循环尾 ()
        .如果真结束
        
    .判断循环尾 ()
    处理事件 ()
.判断循环尾 ()
返回 (TBitmap.取位图数据 ())

.子程序 CT_Color, 逻辑型, , 
.参数 OldColor, 整数型, , 
.参数 NewColor, 整数型, , 
.参数 ColorWarp, 整数型, , 

.局部变量 Red, 整数型, , "2", 
.局部变量 Green, 整数型, , "2", 
.局部变量 Blue, 整数型, , "2", 
.局部变量 匿名局部变量_145, 空白型, , , 

赋值 (Red [1], 求余数 (OldColor, 256))
赋值 (Blue [1], 相除 (OldColor, 65536))
赋值 (Green [1], 相除 (相减 (OldColor, Red [1], 相乘 (Blue [1], 65536)), 256))

赋值 (Red [2], 求余数 (NewColor, 256))
赋值 (Blue [2], 相除 (NewColor, 65536))
赋值 (Green [2], 相除 (相减 (NewColor, Red [2], 相乘 (Blue [2], 65536)), 256))

.如果 (并且 (小于或等于 (取绝对值 (相减 (Red [1], Red [2])), ColorWarp), 小于或等于 (取绝对值 (相减 (Blue [1], Blue [2])), ColorWarp), 小于或等于 (取绝对值 (相减 (Green [1], Green [2])), ColorWarp)))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 _画板1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (正在处理)
    信息框 (“还没有处理完毕！”, 0, )
.如果真结束
赋值 (正在处理, 真)
赋值 (.标题, “正在处理中...”)
.如果 (.选中)
    赋值 (.底图, FillColors (.取图片 (.宽度, .高度), .宽度, .高度, 横向位置, 纵向位置, 横向位置.取点 (纵向位置), .颜色, 到数值 (.内容)))
.否则
    赋值 (.底图, FillLine (.取图片 (.宽度, .高度), .宽度, .高度, 横向位置, 纵向位置, 横向位置.取点 (纵向位置), .颜色, 到数值 (.内容)))
.如果结束
赋值 (正在处理, 假)
赋值 (.标题, “处理完毕”)

.子程序 __启动窗口_将被销毁, 空白型, , 
结束 ()

.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (原始图片, .底图)

.子程序 _按钮1_被单击, 空白型, , 
赋值 (.底图, 原始图片)


 ' 不属于任何一个程序集、类模块的函数：
