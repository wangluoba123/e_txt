 ' 文件类型：Windows模块源码

 ' 程序名称：NT内存操作模块
 ' 程序描述：NT内存操作模块
1.模块_插远程进程
2.模块_提升进程权限
3.类_函数子类化(HOOK API),通过在内存中备份整个DLL解决同步问题!

不断添加中......



 ' 程序作者：hacker0058
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 PAGE_READWRITE, "4", , 
.常量 PAGE_EXECUTE_READWRITE, "64", , 
.常量 PAGE_EXECUTE_READ, "32", , 
.常量 WH_GETMESSAGE, "3", , 
.常量 SE_BACKUP_NAME, "“SeBackupPrivilege”", 公开, 
.常量 SE_RESTORE_NAME, "“SeRestorePrivilege”", 公开, 
.常量 SE_SHUTDOWN_NAME, "“SeShutdownPrivilege”", 公开, 关机
.常量 SE_DEBUG_NAME, "“SeDebugPrivilege”", 公开, 调试


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 虚拟信息, , MEMORY_BASIC_INFORMATION
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocationProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 lType, 整数型, , , 

数据类型 模块信息, , MODULEINFO
    .成员 lpBaseOfDll, 整数型, , , 模块基址
    .成员 SizeOfImage, 整数型, , , 模块大小
    .成员 EntryPoint, 整数型, , , 

数据类型 LuID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 TOKEN_PRIVILEGES, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 


.DLL命令 API_取模块句柄, 整数型, "kernel32", "GetModuleHandleA", 公开, 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 API_取DLL函数地址, 整数型, "kernel32", "GetProcAddress", 公开, 返回函数地址  成功返回DLL库模块内函数地址
    .参数 DLL句柄, 整数型, , DLL库模块的句柄，可以调用 LoadLibrary 函数返回。
    .参数 DLL库模块内函数名, 文本型, , DLL库模块内函数名

.DLL命令 API_寻找顶级窗口, 整数型, "user32", "FindWindowA", 公开, 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）  找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&

.DLL命令 API_取线程和进程标识符, 整数型, "user32", "GetWindowThreadProcessId", 公开, 获取与指定窗口关联在一起的一个进程和线程标识符,成功返回拥有窗口的线程的标识符
    .参数 窗口句柄, 整数型, , 指定窗口句柄
    .参数 进程ID, 整数型, 传址, 

.DLL命令 API_打开进程, 整数型, "", "OpenProcess", 公开, 打开进程
    .参数 访问方法, 整数型, , 指定这个句柄要求的访问方法,PROCESS_CREATE_THREAD（允许远程创建线程）；PROCESS_VM_OPERATION （允许远程VM操作）；PROCESS_VM_WRITE（允许远程VM写）；2035711 完全访问
    .参数 子进程继承, 整数型, , 如句柄能够由子进程继承，则为TRUE，0
    .参数 进程标识符, 整数型, , 要打开那个进程的进程标识符,使用一个变量装载进程ID。

.DLL命令 API_申请内存空间, 整数型, "kernel32.dll", "VirtualAllocEx", 公开, 申请内存地址空间  成功返回申请的内存空间的起始地址。
    .参数 进程句柄, 整数型, , 可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 0
    .参数 空间大小, 整数型, 传址, 申请的内存空间大小
    .参数 flAllocationType, 整数型, , 4096
    .参数 共享方式, 整数型, , 申请的内存空间共享方式，PAGE_READWRITE（4,可读写方式）；

.DLL命令 API_写内存字节, 逻辑型, "kernel32", "WriteProcessMemory", 公开, 在指定进程中写内存
    .参数 进程句柄, 整数型, , 使用函数 OpenProcess() 返回。
    .参数 起始写入地址, 整数型, , 
    .参数 要写入的内容, 字节集, , 本参数的类型也能是“字节”型。
    .参数 写入长度, 整数型, , 写入的数据长度。
    .参数 实际写入长度, 整数型, , 实际写入的数据长度，为0则忽略。

.DLL命令 API_读内存字节, 逻辑型, "kernel32", "ReadProcessMemory", 公开, 
    .参数 进程句柄, 整数型, , 使用函数 OpenProcess() 返回。
    .参数 起始读入地址, 整数型, , 
    .参数 读出的内容, 字节集, , 本参数的类型也能是“字节”型。
    .参数 读出长度, 整数型, , 要读出的数据长度。
    .参数 实际读出长度, 整数型, , 实际读出的数据长度，为0则忽略。

.DLL命令 API_运行远程线程, 整数型, "kernel32", "CreateRemoteThread", 公开, 在另一进程中建立并运行一个远程的线程  成功返回新线程句柄，失败返回NULL，并且可调用GetLastError获得错误值。
    .参数 进程句柄, 整数型, , 进程句柄
    .参数 线程安全描述字, 整数型, , 线程安全描述字，指向SECURITY_ATTRIBUTES结构的指针
    .参数 线程栈大小, 整数型, , 线程栈大小，以字节表示
    .参数 远程进程指针, 整数型, , 一个LPTHREAD_START_ROUTINE类型的指针，指向在远程进程中执行的函数地址
    .参数 传入参数, 整数型, , 传入参数
    .参数 其它标志, 整数型, , 创建线程的其它标志
    .参数 线程身份标志, 整数型, , 线程身份标志，如果为NULL

.DLL命令 API_监测对象, 整数型, "kernel32", "WaitForSingleObject", , 监测一个对象
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 API_释放内存空间, 逻辑型, "kernel32.dll", "VirtualFreeEx", 公开, 释放申请的内存地址空间
    .参数 进程句柄, 整数型, , 可以使用函数 OpenProcess() 返回。
    .参数 内存空间地址, 整数型, , 用 VirtualAllocEx() 申请的内存空间地址。
    .参数 dwSize, 整数型, 传址, 0
    .参数 dwFreeType, 整数型, , 32768

.DLL命令 API_关闭内核对象, 整数型, "kernel32", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 API_返回虚拟信息, 整数型, "kernel32", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 对象指针地址
    .参数 lpBuffer, 虚拟信息, , 返回的虚拟信息
    .参数 dwLength, 整数型, , 信息长度,已知 28

.DLL命令 API_修改虚拟保护, 逻辑型, "kernel32", "VirtualProtectEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 虚拟信息.BaseAddress
    .参数 dwSize, 整数型, , 虚拟信息.RegionSize
    .参数 flNewProtect, 整数型, , 修改类型,#PAGE_EXECUTE_READWRITE 64为可读写模式
    .参数 lpflOldProtect, 整数型, 传址, 虚拟信息.Protect

.DLL命令 API_取当前进程伪句柄, 整数型, "kernel32", "GetCurrentProcess", 公开, 

.DLL命令 API_取系统目录, 整数型, "kernel32", "GetSystemDirectoryA", 公开, 
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 API_加载DLL, 整数型, "", "LoadLibraryA", 公开, 
    .参数 DLL名, 文本型, , 

.DLL命令 API_取模块信息, 整数型, "psapi.dll", "GetModuleInformation", , 
    .参数 进程句柄, 整数型, , 可以由API_打开进程()或API_取当前进程伪句柄()返回
    .参数 模块句柄, 整数型, , 可以由API_取模块句柄()返回
    .参数 模块信息, 模块信息, 传址, 提供一个模块信息的变量用于装载模块信息
    .参数 模块信息的大小, 整数型, , SIZE:548

.DLL命令 API_OpenProcessToken, 整数型, "advapi32.dll", "OpenProcessToken", , NT/XP关机操作
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 API_LookupPrivilegeValue, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 在NT/XP恢复权限
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, 未知类型0x41012DC9, 传址, 

.DLL命令 API_AdjustTokenPrivileges, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 在NT/XP中拥有最高权限
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 未知类型0x41012DCA, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 未知类型0x41012DCA, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 模块_插远程进程, 整数型, , 如果成功返回插入的远程线程句柄,失败返回 0
.参数 进程标识符, 整数型, , 需要插入进程的进程标识符
.参数 DLL文件名, 文本型, , 需要插入的DLL文件名
.参数 DLL命令名, 文本型, 可空, 插入的DLL文件中对应的命令名,对易DLL来说,这个参数必须填写.

.局部变量 进程句柄, 整数型, , , 
.局部变量 线程句柄, 整数型, , , 
.局部变量 写入汇编, 字节集, , , 
.局部变量 写入参数, 字节集, , , 
.局部变量 函数地址, 整数型, , "2", 
.局部变量 写内存, 逻辑型, , "2", 
.局部变量 内存地址, 整数型, , "5", 

输出调试文本 (“------模块_插远程进程返回信息------”)
输出 (“进程标识符”, 进程标识符)
.如果 (等于 (进程标识符, 0))
    输出调试文本 (“停止运行!”)
    返回 (0)
.否则
    赋值 (进程句柄, API_打开进程 (2035711, 0, 进程标识符))
.如果结束
.如果 (等于 (进程句柄, 0))
    输出调试文本 (“打开进程失败,停止运行!”)
    返回 (0)
.否则
    输出 (“进程句柄”, 进程句柄)
.如果结束
 ' 取函数(LoadLibraryA,GetProcAddress)入口地址
赋值 (函数地址 [1], API_取DLL函数地址 (API_取模块句柄 (“Kernel32.dll”), “LoadLibraryA”))
输出 (“函数地址[1]”, 函数地址 [1])
.如果真 (等于 (函数地址 [1], 0))
    输出调试文本 (“取函数入口地址失败,停止运行!”)
    返回 (0)
.如果真结束
.如果 (等于 (是否为空 (DLL命令名), 假))
    赋值 (函数地址 [2], API_取DLL函数地址 (API_取模块句柄 (“Kernel32.dll”), “GetProcAddress”))
    输出 (“函数地址[2]”, 函数地址 [2])
     ' 写函数地址和DLL名及模块名
    赋值 (写入参数, 相加 (到字节集 (函数地址 [1]), 到字节集 (函数地址 [2]), 到字节集 (DLL文件名), { 0, 0, 0 }, 到字节集 (DLL命令名), { 0, 0, 0 }))
    赋值 (内存地址 [1], API_申请内存空间 (进程句柄, 0, 相加 (取字节集长度 (写入参数), 1), 4096, #PAGE_READWRITE))
    赋值 (内存地址 [2], 相加 (内存地址 [1], 取字节集长度 (到字节集 (函数地址 [1])))) ' 函数GetProcAddress内存起始地址
    赋值 (内存地址 [3], 相加 (内存地址 [2], 取字节集长度 (到字节集 (函数地址 [2])))) ' DLL名内存起始地址
    赋值 (内存地址 [4], 相加 (内存地址 [3], 取字节集长度 (相加 (到字节集 (DLL文件名), { 0, 0, 0 })))) ' DLL模块名内存起始地址
    
    赋值 (写入汇编, 相加 ({ 104 }, 到字节集 (内存地址 [3]), { 255, 21 }, 到字节集 (内存地址 [1]), { 104 }, 到字节集 (内存地址 [4]), { 80 }, { 255, 21 }, 到字节集 (内存地址 [2]), { 255, 208 }, { 195 }))
    赋值 (内存地址 [5], API_申请内存空间 (进程句柄, 0, 相加 (取字节集长度 (写入汇编), 1), 4096, #PAGE_EXECUTE_READWRITE)) ' 汇编机器码起始地址
    
    .如果 (或者 (等于 (内存地址 [1], 0), 等于 (内存地址 [5], 0))) ' 分配内存失败
        输出调试文本 (“分配内存失败,停止运行!”)
        API_关闭内核对象 (进程句柄)
    .否则
        输出 (“内存地址[1]”, 内存地址 [1])
        输出 (“内存地址[2]”, 内存地址 [2])
        输出 (“内存地址[3]”, 内存地址 [3])
        输出 (“内存地址[4]”, 内存地址 [4])
        输出 (“内存地址[5]”, 内存地址 [5])
    .如果结束
    赋值 (写内存 [1], API_写内存字节 (进程句柄, 内存地址 [1], 写入参数, 取字节集长度 (写入参数), 0)) ' 写入汇编所需的参数
    赋值 (写内存 [2], API_写内存字节 (进程句柄, 内存地址 [5], 写入汇编, 取字节集长度 (写入汇编), 0)) ' 写入汇编机器码
    .如果 (或者 (等于 (写内存 [1], 假), 等于 (写内存 [2], 假)))
        输出调试文本 (“写内存失败,停止运行!”)
        API_关闭内核对象 (进程句柄)
        返回 (0)
    .否则
        赋值 (线程句柄, API_运行远程线程 (进程句柄, 0, 0, 内存地址 [5], 0, 0, 0)) ' 开始执行机器码
        输出 (“线程句柄”, 线程句柄)
        API_监测对象 (线程句柄, 4294967295)
        API_释放内存空间 (进程句柄, 内存地址 [1], 0, 32768)
        API_释放内存空间 (进程句柄, 内存地址 [2], 0, 32768)
        API_释放内存空间 (进程句柄, 内存地址 [3], 0, 32768)
        API_释放内存空间 (进程句柄, 内存地址 [4], 0, 32768)
        API_释放内存空间 (进程句柄, 内存地址 [5], 0, 32768)
        API_关闭内核对象 (线程句柄)
        API_关闭内核对象 (进程句柄)
    .如果结束
    
.否则
    赋值 (内存地址 [1], API_申请内存空间 (进程句柄, 0, 相加 (取字节集长度 (到字节集 (DLL文件名)), 1), 4096, 4))
    .如果真 (等于 (内存地址 [1], 0)) ' 分配内存失败
        输出调试文本 (“分配内存失败,停止运行!”)
        API_关闭内核对象 (进程句柄)
        返回 (0)
    .如果真结束
    赋值 (写内存 [1], API_写内存字节 (进程句柄, 内存地址 [1], 到字节集 (DLL文件名), 取字节集长度 (到字节集 (DLL文件名)), 0))
    .如果真 (等于 (写内存 [1], 假))
        输出调试文本 (“写内存失败,停止运行!”)
        API_释放内存空间 (进程句柄, 内存地址 [1], 0, 32768)
        API_关闭内核对象 (进程句柄)
        返回 (0)
    .如果真结束
    赋值 (线程句柄, API_运行远程线程 (进程句柄, 0, 0, 函数地址 [1], 内存地址 [1], 0, 0)) ' 开始执行机器码
    输出 (“线程句柄”, 线程句柄)
    API_监测对象 (线程句柄, 4294967295)
    API_释放内存空间 (进程句柄, 内存地址 [1], 0, 32768)
    API_关闭内核对象 (线程句柄)
    API_关闭内核对象 (进程句柄)
.如果结束
返回 (线程句柄)

.子程序 模块_提升进程权限, 逻辑型, , 成功返回真，失败返回假
.参数 目标进程, 整数型, 可空, 要提升权限的进程句柄,一般由"API_打开进程()"返回,如果是在本进程,可以为空,程序将简单的由"API_取当前进程伪句柄()"返回值填充
.参数 权限类别, 文本型, 可空, 要提升到的权限类别，有以下几种常量：#SE_BACKUP_NAME，#SE_RESTORE_NAME，#SE_SHUTDOWN_NAME（关机），#SE_DEBUG_NAME（调试），默认为#SE_DEBUG_NAME

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, 未知类型0x41012DAC, , , 
.局部变量 tkp, 未知类型0x41012DAD, , , 
.局部变量 tkpNewButIgnored, 未知类型0x41012DAD, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.判断开始 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, API_取当前进程伪句柄 ())
.默认
    赋值 (hdlProcessHandle, 目标进程)
.判断结束
.如果真 (是否为空 (权限类别))
    赋值 (权限类别, #SE_DEBUG_NAME)
.如果真结束
API_OpenProcessToken (hdlProcessHandle, 40, hdlTokenHandle)
API_LookupPrivilegeValue (“”, 权限类别, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp., tmpLuid.)
赋值 (tkp., tmpLuid.)
赋值 (tkp., 2)
返回 (API_AdjustTokenPrivileges (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))


.程序集 接口程序集, , , 

.子程序 输出, 空白型, , 
.参数 文本, 文本型, , 
.参数 数值, 整数型, , 

输出调试文本 (相加 (文本, “ = ”, 到文本 (数值)))

.子程序 模块_取模块句柄, 整数型, , 
.参数 模块名, 文本型, , 如"Kernel32.dll"

.局部变量 DLLModule, 整数型, , , 

赋值 (DLLModule, API_取模块句柄 (模块名))
.如果真 (等于 (DLLModule, 0))
    赋值 (DLLModule, API_加载DLL (模块名))
.如果真结束
返回 (DLLModule)

.子程序 模块_取DLL中函数地址, 整数型, , 
.参数 DLL名, 文本型, , 如"Kernel32.dll"
.参数 DLL中命令名, 文本型, , 区分大小写

.局部变量 DLLModule, 整数型, , , 

赋值 (DLLModule, 模块_取模块句柄 (DLL名))
.如果真 (等于 (DLLModule, 0))
    返回 (0)
.如果真结束
返回 (API_取DLL函数地址 (DLLModule, DLL中命令名))


.类模块 函数子类化, , , HOOK API

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 函数子类化, 逻辑型, 公开, 
.参数 进程句柄, 整数型, , 要子类化API的进程的句柄,一般由"API_打开进程()"返回,如果是在本进程,可以简单的由"API_取当前进程伪句柄()"返回
.参数 原函数地址, 整数型, , 要子类化的API在内存中的首地址
.参数 新函数地址, 整数型, , 要替代API在内存中的地址,可以由"到整数(&子程序名)"转换得到,注意:新函数的参数一定要和原函数一样,否则会造成堆栈错误!

返回 (修改内存数据 (进程句柄, 原函数地址, 相加 ({ 184 }, 到字节集 (新函数地址), { 255, 224 })))

.子程序 取函数地址, 整数型, 公开, 返回指定模块中指定函数的地址
.参数 模块名, 文本型, , DLL名
.参数 函数名, 文本型, , API命令名

返回 (模块_取DLL中函数地址 (模块名, 函数名))

.子程序 修改内存数据, 逻辑型, , 修改指定内存指针所指向地址处的一段数据,成功返回真,失败返回假,注意:目前只对NT以上系统有效,没在98下测试
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 内存区域指针, 整数型, , 要写到内存的区域地址
.参数 欲写到内存的数据, 字节集, , 欲写到内存的字节集数据

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 

.如果真 (等于 (内存区域指针, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (API_返回虚拟信息 (目标进程句柄, 内存区域指针, mbi, 28), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (API_修改虚拟保护 (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READWRITE, mbi.Protect), 假))
    返回 (假)
.如果真结束
赋值 (结果, API_写内存字节 (目标进程句柄, 内存区域指针, 欲写到内存的数据, 取字节集长度 (欲写到内存的数据), 0))
API_修改虚拟保护 (目标进程句柄, mbi.BaseAddress, 8, #PAGE_EXECUTE_READ, mbi.Protect) ' 改回只读模式
返回 (结果)

.子程序 读内存数据, 字节集, 公开, 返回指定内存指针所指向地址处的一段数据,理论上对所有Windows系统都有效
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 内存区域指针, 整数型, , 要读的内存区域的开始地址
.参数 内存数据长度, 整数型, , 要读的内存区域的长度

.局部变量 缓存, 字节集, , , 

赋值 (缓存, 取空白字节集 (内存数据长度))
API_读内存字节 (目标进程句柄, 内存区域指针, 缓存, 内存数据长度, 0)
返回 (缓存)

.子程序 动态备份DLL, 整数型, , 在程序空间动态备份系统DLL,方便HOOK后的API调用,成功返回备份的DLL所在程序空间的内存地址,失败返回0
.参数 目标进程的句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 要备份的DLL名, 文本型, , 如 "Kernel32.dll"
.参数 原DLL的基地址, 整数型, 参考, 提供一个变量用来装载原DLL基地址

.局部变量 返回值, 整数型, , , 
.局部变量 模块句柄, 整数型, , , 
.局部变量 DLL内容, 字节集, , , 
.局部变量 模块信息, 模块信息, , , 

赋值 (模块句柄, 模块_取模块句柄 (要备份的DLL名))
输出调试文本 (相加 (“模块句柄=”, 取十六进制文本 (模块句柄)))
.如果真 (等于 (模块句柄, 0))
    返回 (0)
.如果真结束
赋值 (返回值, API_取模块信息 (目标进程的句柄, 模块句柄, 模块信息, 12))
赋值 (原DLL的基地址, 模块信息.lpBaseOfDll)
输出调试文本 (相加 (“模块基址=”, 取十六进制文本 (原DLL的基地址)))
输出调试文本 (相加 (“模块大小=”, 取十六进制文本 (模块信息.SizeOfImage)))
.如果真 (或者 (等于 (模块信息.lpBaseOfDll, 0), 等于 (模块信息.SizeOfImage, 0)))
    返回 (0)
.如果真结束
赋值 (DLL内容, 指针到字节集 (模块信息.lpBaseOfDll, 模块信息.SizeOfImage))
赋值 (返回值, API_申请内存空间 (目标进程的句柄, 0, 模块信息.lpBaseOfDll, 4096, #PAGE_EXECUTE_READWRITE))
输出调试文本 (相加 (“备份地址=”, 取十六进制文本 (返回值)))
.如果真 (等于 (返回值, 0))
    返回 (0)
.如果真结束
.如果真 (等于 (API_写内存字节 (目标进程的句柄, 返回值, DLL内容, 取字节集长度 (DLL内容), 0), 假))
    返回 (0)
.如果真结束
返回 (返回值)


.子程序 释放备份DLL, 逻辑型, , 释放由"模块_备份系统DLL()"备份的DLL空间
.参数 目标进程句柄, 整数型, , 一般由OpenProcess函数(打开进程)返回,如果是在本进程,可以简单的由GetCurrentProcess函数(取当前进程伪句柄)返回
.参数 空间地址, 整数型, , 由备份系统DLL()返回的值

返回 (API_释放内存空间 (目标进程句柄, 空间地址, 0, 3268))



.子程序 取备份DLL中函数地址, 整数型, 公开, 取出备份DLL中的API地址,可以使用"特殊功能支持库"里的"调用子程序()"命令调用这个API
.参数 备份空间地址, 整数型, , 由"备份系统DLL()"返回的值
.参数 原DLL基地址, 整数型, , 调用"备份系统DLL()"后最后一个参数的值
.参数 原函数地址, 整数型, , 由".取函数地址"返回的值

.局部变量 原API地址, 整数型, , , 

返回 (相减 (相加 (备份空间地址, 原函数地址), 原DLL基地址))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用



 ' 不属于任何一个程序集、类模块的函数：
