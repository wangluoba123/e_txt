 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 390
    高度 = 283
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 1 扩展界面支持库一




数据类型 MIB_IFROW, , 
    .成员 wszName, 字节集, , , 
    .成员 dwIndex, 整数型, , , 编号
    .成员 dwType, 整数型, , , 界面类型
    .成员 dwMtu, 整数型, , , 最大传输单元
    .成员 dwSpeed, 整数型, , , 界面速度
    .成员 dwPhysAddrLen, 整数型, , , 物理地址部分有效长度
    .成员 bPhysAddr, 字节集, , , 物理地址
    .成员 dwAdminStatus, 整数型, , , 管理状态
    .成员 dwOperStatus, 整数型, , , 操作状态
    .成员 dwLastChange, 整数型, , , 操作状态最近更新时间
    .成员 dwInOctets, 整数型, , , 总共收到(字节)
    .成员 dwInUcastPkts, 整数型, , , 总共收到(unicast包)
    .成员 dwInNUcastPkts, 整数型, , , 总共收到(non-unicast包)
    .成员 dwInDiscards, 整数型, , , 丢弃包总数（收到）
    .成员 dwInErrors, 整数型, , , 出错包总数（收到）
    .成员 dwInUnknownProtos, 整数型, , , 其它包总数（收到）
    .成员 dwOutOctets, 整数型, , , 总共发送(字节)
    .成员 dwOutUcastPkts, 整数型, , , 总共发送(unicast包)
    .成员 dwOutNUcastPkts, 整数型, , , 总共发送(non-unicast包)
    .成员 dwOutDiscards, 整数型, , , 丢弃包总数（发送）
    .成员 dwOutErrors, 整数型, , , 出错包总数（发送）
    .成员 dwOutQLen, 整数型, , , 发送队列长度
    .成员 dwDescrLen, 整数型, , , 界面描述部分有效长度
    .成员 bDescr, 字节集, , , 界面描述


.DLL命令 取网络信息, 整数型, "iphlpapi", "GetIfTable", , 
    .参数 信息表, 字节集, 传址, 
    .参数 信息表尺寸, 整数型, 传址, 
    .参数 内参数, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 原横向位置, 整数型, , , 
.程序集变量 原纵向位置, 整数型, , , 
.程序集变量 原接收总计, 整数型, , , 
.程序集变量 信息记录, MIB_IFROW, , "0", 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (.时钟周期, 1000) ' 每秒查询一次数据
赋值 (.自动重画, 真)
赋值 (., 3) ' 设超级列表框为报表列表框方式显示
赋值 (., 真)
赋值 (., 真)
-1.插入列 (80, , , ) ' 新加一列，并随后连续增加九行
.插入表项 (“接口编号”, , , , )
.插入表项 (“界面类型”, , , , )
.插入表项 (“连接速度”, , , , )
.插入表项 (“接收总计”, , , , )
.插入表项 (“发送总计”, , , , )
.插入表项 (“操作状态”, , , , )
.插入表项 (“错收总计”, , , , )
.插入表项 (“错发总计”, , , , )
.插入表项 (“其它共收”, , , , )

.子程序 __启动窗口_尺寸被改变, 空白型, , 
0.移动 (0, 取用户区宽度 (), 相减 (取用户区高度 (), 50))
0.移动 (相减 (取用户区高度 (), 48), 取用户区宽度 (), 48)

.子程序 取类型, 文本型, , 
.参数 类型值, 整数型, , 

.判断开始 (等于 (类型值, 6))
    返回 (“以太网”)
.判断 (等于 (类型值, 9))
    返回 (“令牌网”)
.判断 (等于 (类型值, 15))
    返回 (“光纤接口”)
.判断 (等于 (类型值, 23))
    返回 (“虚拟拨号”)
.判断 (等于 (类型值, 24))
    返回 (“内部环回”)
.判断 (等于 (类型值, 28))
    返回 (“串行连接”)
.默认
    返回 (“其它类型”)
.判断结束


.子程序 取状态, 文本型, , 
.参数 状态值, 整数型, , 

.判断开始 (等于 (状态值, 0))
    返回 (“未运作”)
.判断 (等于 (状态值, 1))
    返回 (“运作中”)
.判断 (等于 (状态值, 2))
    返回 (“断开连接”)
.判断 (等于 (状态值, 3))
    返回 (“正在连接”)
.判断 (等于 (状态值, 4))
    返回 (“已连接”)
.默认
    返回 (“无法获取”)
.判断结束


.子程序 取信息记录, 空白型, , 
.局部变量 成员数, 整数型, , , 
.局部变量 信息集, 字节集, , , 
.局部变量 缓冲区尺寸, 整数型, , , 
.局部变量 起始位, 整数型, , , 
.局部变量 整数容器, 整数型, , , 

取网络信息 ({ 0 }, 缓冲区尺寸, 0)
.如果真 (小于或等于 (缓冲区尺寸, 0))
    返回 ()
.如果真结束
赋值 (信息集, 取空白字节集 (缓冲区尺寸))
.如果真 (不等于 (取网络信息 (信息集, 缓冲区尺寸, 1), 0))
    返回 ()
.如果真结束
赋值 (取字节集数据 (取字节集左边 (信息集, 4), #整数型))
赋值 (信息集, 取字节集右边 (信息集, 相减 (缓冲区尺寸, 4)))
重定义数组 (假, 成员数)
.计次循环首 ()
    赋值 (起始位, 相乘 (相减 (整数容器, 1), 860))
    赋值 ( [整数容器], wszName, 取字节集中间 (信息集, 相加 (起始位, 1), 512))
    赋值 ( [整数容器], dwIndex, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 513), 4), #整数型))
    赋值 ( [整数容器], dwType, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 517), 4), #整数型))
    赋值 ( [整数容器], dwMtu, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 521), 4), #整数型))
    赋值 ( [整数容器], dwSpeed, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 525), 4), #整数型))
    赋值 ( [整数容器], dwPhysAddrLen, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 529), 4), #整数型))
    赋值 ( [整数容器], bPhysAddr, 取字节集中间 (信息集, 相加 (起始位, 533), 8))
    赋值 ( [整数容器], dwAdminStatus, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 541), 4), #整数型))
    赋值 ( [整数容器], dwOperStatus, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 545), 4), #整数型))
    赋值 ( [整数容器], dwLastChange, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 549), 4), #整数型))
    赋值 ( [整数容器], dwInOctets, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 553), 4), #整数型))
    赋值 ( [整数容器], dwInUcastPkts, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 557), 4), #整数型))
    赋值 ( [整数容器], dwInNUcastPkts, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 561), 4), #整数型))
    赋值 ( [整数容器], dwInDiscards, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 565), 4), #整数型))
    赋值 ( [整数容器], dwInErrors, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 569), 4), #整数型))
    赋值 ( [整数容器], dwInUnknownProtos, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 573), 4), #整数型))
    赋值 ( [整数容器], dwOutOctets, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 577), 4), #整数型))
    赋值 ( [整数容器], dwOutUcastPkts, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 581), 4), #整数型))
    赋值 ( [整数容器], dwOutNUcastPkts, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 585), 4), #整数型))
    赋值 ( [整数容器], dwOutDiscards, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 589), 4), #整数型))
    赋值 ( [整数容器], dwOutErrors, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 593), 4), #整数型))
    赋值 ( [整数容器], dwOutQLen, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 597), 4), #整数型))
    赋值 ( [整数容器], dwDescrLen, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 601), 4), #整数型))
    赋值 ( [整数容器], bDescr, 取字节集中间 (信息集, 相加 (起始位, 605), 256))
    
    .如果真 (小于 (取列数 (), 相加 (成员数, 1)))
        -1.插入列 (120,  (), , )
    .如果真结束
    0.置标题 (整数容器, 到文本 (整数容器))
    1.置标题 (整数容器, 取类型 ( [整数容器], dwType))
    2.置标题 (整数容器, 到文本 ( [整数容器], dwSpeed))
    3.置标题 (整数容器, 到文本 ( [整数容器], dwInOctets))
    4.置标题 (整数容器, 到文本 ( [整数容器], dwOutOctets))
    5.置标题 (整数容器, 取状态 ( [整数容器], dwOperStatus))
    6.置标题 (整数容器, 到文本 ( [整数容器], dwInErrors))
    7.置标题 (整数容器, 到文本 ( [整数容器], dwOutErrors))
    8.置标题 (整数容器, 到文本 ( [整数容器], dwInUnknownProtos))
.计次循环尾 ()

.子程序 绘制流量图, 空白型, , 
.参数 监控编号, 整数型, , 
.参数 最大峰值, 整数型, , 

.局部变量 接收速率, 整数型, , , 
.局部变量 整数容器, 整数型, , , 

赋值 (原横向位置, 相加 (原横向位置, 1))
.如果真 (大于 (原横向位置, 相减 (.宽度, 5)))
    赋值 (原横向位置, 相减 (原横向位置, 1))
    1.复制 (0, 相减 (.宽度, 5), .高度, , 0, 0, )
    相减 (.宽度, 5).清除 (0, 5, .高度)
.如果真结束
.计次循环首 (4, )
    赋值 (.画笔颜色, #灰色)
    0.画直线 (整除 (相乘 (.高度, ), 5), .宽度, 整除 (相乘 (.高度, ), 5))
.计次循环尾 ()
.如果真 (等于 (原接收总计, 0))
    赋值 (原接收总计,  [dwInOctets])
    赋值 (原纵向位置, 相减 (.高度, 5))
.如果真结束
赋值 (相减 ( [dwInOctets], 原接收总计))
赋值 (.标题, 相加 (到文本 (), “bps”))
.如果真 (大于 ())
    赋值 ()
.如果真结束
赋值 (相减 (.高度, 整除 (相乘 (.高度), ), 5)) ' 以最大峰值流量计算当前流量在画板中的位置
赋值 (.画笔颜色, #红色)
相减 (原横向位置, 1).画直线 (原纵向位置, 原横向位置, )
赋值 (原纵向位置, )
赋值 (原接收总计,  [dwInOctets])

.子程序 _时钟1_周期事件, 空白型, , 
取信息记录 ()
绘制流量图 (2, 相乘 (1024, 100))


 ' 不属于任何一个程序集、类模块的函数：
