 ' 文件类型：Windows窗口程序

 ' 程序名称：onekey
 ' 程序描述：一键通，用快捷键打开任意的文件
 ' 程序作者：李荆扉
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：gnuljf@21cn.com
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 2 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 1 扩展界面支持库一



窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 519
    高度 = 403
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “OneKey”
    帮助文件名 = “”

窗口 加入热键
    左边 = 50
    顶边 = 50
    宽度 = 263
    高度 = 127
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “请输入要加入的热键”
    帮助文件名 = “”

窗口 About
    左边 = 50
    顶边 = 50
    宽度 = 332
    高度 = 254
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 6
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 托盘图标, " ' 已保存到：D:\易语言学习\Data\一键通.e\托盘图标", , 


数据类型 热键, , 
    .成员 键代码, 整数型, , , 
    .成员 显示, 文本型, , , 
    .成员 Ctrl键, 逻辑型, , , Ctrl键是否被按下
    .成员 Shift键, 逻辑型, , , Shift键是否被按下
    .成员 Alt键, 逻辑型, , , Alt键是否被按下

.全局变量 配置文件, 文本型, , , 
.全局变量 热键, 热键, , "0", 
.全局变量 临时热键, 热键, , "0", 

.DLL命令 GetKeyNameText, 整数型, "user32.dll", "GetKeyNameTextA", , 在给出扫描码的前提下，判断键名;返回值Long，lpBuffer中载入的键名的实际长度
    .参数 lParam, 整数型, , Long，位0到5=0；位16到23=按键的扫描码；位24=增强型键盘上的扩展位；位25=如设为1，表示忽略左右Shift和Ctrl键的区别
    .参数 lpBuffer, 文本型, 传址, String，字串预先初始化成至少nSize+1字节，以便随同键名载入
    .参数 nSize, 整数型, , Long，字串的最大长度

.DLL命令 GetAsyncKeyState, 整数型, "user32.dll", "GetAsyncKeyState", , 
    .参数 vKey, 整数型, , Long，欲测试的虚拟键的键码

.窗口程序集 窗口程序集1, , , 

.子程序 _添加热键_被单击, 空白型, , 
载入 (加入热键, , 真)

.子程序 _添加文件_被单击, 空白型, , 
.局部变量 现行选中项, 整数型, , , 
.局部变量 父项目, 整数型, , , 

赋值 (现行选中项, .)
赋值 (父项目, 现行选中项.取父项目 ())
.如果真 (不等于 (现行选中项, -1))
    .如果真 (不等于 (父项目, -1))
        赋值 (现行选中项, 父项目)
    .如果真结束
    .如果真 (打开 ())
        现行选中项.加入项目 (.文件名, 1, , )
    .如果真结束
    
.如果真结束


.子程序 _去除_被单击, 空白型, , 
.局部变量 现行选中项, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (现行选中项, .)
.如果真 (不等于 (现行选中项, -1))
    .如果真 (等于 (现行选中项.取父项目 (), -1))
        赋值 (j, 现行选中项)
        .变量循环首 (相减 (现行选中项, 1), 0, -1, i)
            .如果真 (不等于 (i.取父项目 (), -1))
                赋值 (j, 相减 (j, 1))
            .如果真结束
            
        .变量循环尾 ()
        删除成员 (临时热键, 相加 (j, 1), )
    .如果真结束
    现行选中项.删除项目 ()
.如果真结束


.子程序 _确定_被单击, 空白型, , 
.局部变量 n, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 父项目, 整数型, , , 
.局部变量 k, 整数型, , , 
.局部变量 j, 整数型, , , 

.如果 (大于 (取数组成员数 (临时热键), 0))
    赋值 (n, 取项目数 ())
    赋值 (k, 0)
    赋值 (j, 0)
    .变量循环首 (0, 相减 (n, 1), 1, i)
        赋值 (父项目, i.取父项目 ())
        .如果 (不等于 (父项目, -1))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), 到文本 (k), i.取项目文本 ())
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), 到文本 (相加 (k, 1)), “;”)
            赋值 (k, 相加 (k, 1))
        .否则
            赋值 (k, 0)
            赋值 (j, 相加 (j, 1))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), “键代码”, 到文本 (临时热键 [j], 键代码))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), “显示”, 临时热键 [j], 显示)
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), “Ctrl键”, 到文本 (临时热键 [j], Ctrl键))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), “Shift键”, 到文本 (临时热键 [j], Shift键))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), “Alt键”, 到文本 (临时热键 [j], Alt键))
            写到配置文件 (配置文件, 到文本 (相减 (j, 1)), 到文本 (k), “;”)
            写到配置文件 (配置文件, 到文本 (j), “键代码”, “0”)
        .如果结束
        
    .变量循环尾 ()
.否则
    写到配置文件 (配置文件, “0”, “键代码”, “0”)
.如果结束
赋值 (_启动窗口.可视, 假)

.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (配置文件, 相加 (取运行目录 (), “\set.ini”))
置托盘图标 (#托盘图标, “一键通”)
ReadFromSet ()

.子程序 文本到逻辑, 逻辑型, , 
.参数 文本, 文本型, , 

.如果 (等于 (文本, “真”))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 __启动窗口_托盘事件, 空白型, , 
.参数 操作类型, 整数型, , 

.判断开始 (等于 (操作类型, #单击右键))
    弹出托盘菜单 ()
.判断 (等于 (操作类型, #单击左键))
    _关于_被选择 ()
.默认
    
.判断结束


.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _设置_被选择, 空白型, , 
.如果 (等于 (_启动窗口.可视, 假))
    赋值 (_启动窗口.可视, 真)
.否则
    _启动窗口.激活 ()
.如果结束


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
赋值 (_启动窗口.可视, 假)
返回 (假)

.子程序 _取消_被单击, 空白型, , 
赋值 (_启动窗口.可视, 假)

.子程序 __启动窗口_被隐藏, 空白型, , 
ReadFromSet ()

.子程序 ReadFromSet, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 读入的热键, 热键, , , 
.局部变量 j, 整数型, , , 
.局部变量 文件, 文本型, , , 
.局部变量 k, 整数型, , , 

清空 ()
清除数组 (热键)
赋值 (i, 0)
赋值 (k, 0)
.判断循环首 (真)
    赋值 (读入的热键.键代码, 从配置文件读取数值 (配置文件, 到文本 (i), “键代码”, 0))
    .如果 (不等于 (读入的热键.键代码, 0))
        赋值 (读入的热键.显示, 从配置文件读取文本 (配置文件, 到文本 (i), “显示”, “<-”))
        赋值 (读入的热键.Ctrl键, 文本到逻辑 (从配置文件读取文本 (配置文件, 到文本 (i), “Ctrl键”, “假”)))
        赋值 (读入的热键.Shift键, 文本到逻辑 (从配置文件读取文本 (配置文件, 到文本 (i), “Shift键”, “假”)))
        赋值 (读入的热键.Alt键, 文本到逻辑 (从配置文件读取文本 (配置文件, 到文本 (i), “Alt键”, “假”)))
        赋值 (j, 0)
        加入成员 (热键, 读入的热键)
        .加入项目 (读入的热键.显示, 0, , )
        赋值 (k, 相减 (取项目数 (), 1))
        .判断循环首 (真)
            赋值 (文件, 从配置文件读取文本 (配置文件, 到文本 (i), 到文本 (j), “;”))
            .如果 (不等于 (文件, “;”))
                k.加入项目 (文件, 1, , )
                赋值 (j, 相加 (j, 1))
            .否则
                跳出循环 ()
            .如果结束
            
        .判断循环尾 ()
        赋值 (i, 相加 (i, 1))
    .否则
        跳出循环 ()
    .如果结束
    
.判断循环尾 ()

.子程序 __启动窗口_被显示, 空白型, , 
复制数组 (临时热键, 热键)

.子程序 _扫描热键_周期事件, 空白型, , 
.局部变量 MYHOTKEY, 逻辑型, , , 
.局部变量 Ctrl, 逻辑型, , , 
.局部变量 Shift, 逻辑型, , , 
.局部变量 Alt, 逻辑型, , , 
.局部变量 i, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 文件, 文本型, , , 
.局部变量 j, 整数型, , , 

赋值 (n, 取数组成员数 (热键))
.变量循环首 (1, n, 1, i)
    赋值 (MYHOTKEY, 小于 (GetAsyncKeyState (热键 [i], 键代码), 0))
    赋值 (Ctrl) ' 若当前Ctrl键的状态与记录中的Ctrl键状态相同则Ctrl为真

.子程序 _关于_被选择, 空白型, , 
载入 (About, _启动窗口, 真)

.窗口程序集 窗口程序集2, , , 

.程序集变量 新加入的热键, 热键, , , 
.子程序 _取消_被单击, 空白型, , 
销毁 ()

.子程序 _确定_被单击, 空白型, , 
_启动窗口.加入项目 (., , .内容, 0, , )
加入成员 (临时热键, 新加入的热键)
销毁 ()

.子程序 _热键输入_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 Ctrl键, 逻辑型, , , 
.局部变量 Shift键, 逻辑型, , , 
.局部变量 Alt键, 逻辑型, , , 
.局部变量 按键名, 文本型, , , 

.如果 (不等于 (位与 (功能键状态, #Ctrl键状态), 0))
    赋值 (Ctrl键, 真)
.否则
    赋值 (Ctrl键, 假)
.如果结束
.如果 (不等于 (位与 (功能键状态, #Shift键状态), 0))
    赋值 (Shift键, 真)
.否则
    赋值 (Shift键, 假)
.如果结束
.如果 (不等于 (位与 (功能键状态, #Alt键状态), 0))
    赋值 (Alt键, 真)
.否则
    赋值 (Alt键, 假)
.如果结束

.如果 (等于 (键代码, #回车键))
    _确定_被单击 ()
.否则
    赋值 (.内容, “”)
    .判断开始 (或者 (并且 (大于或等于 (键代码, 48), 小于或等于 (键代码, 57)), 并且 (大于或等于 (键代码, 65), 小于或等于 (键代码, 90))))
        字符 (键代码).加入文本 ()
    .判断 (等于 (键代码, #F1键))
        “F1”.加入文本 ()
    .判断 (等于 (键代码, #F2键))
        “F2”.加入文本 ()
    .判断 (等于 (键代码, #F3键))
        “F3”.加入文本 ()
    .判断 (等于 (键代码, #F4键))
        “F4”.加入文本 ()
    .判断 (等于 (键代码, #F5键))
        “F5”.加入文本 ()
    .判断 (等于 (键代码, #F6键))
        “F6”.加入文本 ()
    .判断 (等于 (键代码, #F7键))
        “F7”.加入文本 ()
    .判断 (等于 (键代码, #F8键))
        “F8”.加入文本 ()
    .判断 (等于 (键代码, #F9键))
        “F9”.加入文本 ()
    .判断 (等于 (键代码, #F10键))
        “F10”.加入文本 ()
    .判断 (等于 (键代码, #F11键))
        “F11”.加入文本 ()
    .判断 (等于 (键代码, #F12键))
        “F12”.加入文本 ()
    .判断 (等于 (键代码, #F13键))
        “F13”.加入文本 ()
    .判断 (等于 (键代码, #F14键))
        “F14”.加入文本 ()
    .判断 (等于 (键代码, #F15键))
        “F15”.加入文本 ()
    .判断 (等于 (键代码, #F16键))
        “F16”.加入文本 ()
    .判断 (等于 (键代码, #Break键))
        “Break”.加入文本 ()
    .判断 (等于 (键代码, #Pause键))
        “Pause”.加入文本 ()
    .判断 (等于 (键代码, #PageUp键))
        “PageUp”.加入文本 ()
    .判断 (等于 (键代码, #PageDown键))
        “PageDown”.加入文本 ()
    .判断 (等于 (键代码, #Home键))
        “Home”.加入文本 ()
    .判断 (等于 (键代码, #End键))
        “End”.加入文本 ()
    .判断 (等于 (键代码, #左光标键))
        “Left”.加入文本 ()
    .判断 (等于 (键代码, #右光标键))
        “Right”.加入文本 ()
    .判断 (等于 (键代码, #上光标键))
        “Up”.加入文本 ()
    .判断 (等于 (键代码, #下光标键))
        “Down”.加入文本 ()
    .判断 (等于 (键代码, #Ins键))
        “Ins”.加入文本 ()
    .判断 (等于 (键代码, #分号键))
        “;”.加入文本 ()
    .判断 (等于 (键代码, #等号键))
        “=”.加入文本 ()
    .判断 (等于 (键代码, #逗号键))
        “,”.加入文本 ()
    .判断 (等于 (键代码, #减号键))
        “-”.加入文本 ()
    .判断 (等于 (键代码, #圆点键))
        “.”.加入文本 ()
    .判断 (等于 (键代码, #除号键))
        “/”.加入文本 ()
    .判断 (等于 (键代码, #反撇号键))
        “`”.加入文本 ()
    .判断 (等于 (键代码, #左中括号键))
        “[”.加入文本 ()
    .判断 (等于 (键代码, #右中括号键))
        “]”.加入文本 ()
    .判断 (等于 (键代码, #斜杠键))
        “\”.加入文本 ()
    .判断 (等于 (键代码, #单引号键))
        “'”.加入文本 ()
    .默认
        返回 (真)
    .判断结束
    .如果真 (Alt键)
        赋值 (.内容, 相加 (“Alt+”, .内容))
    .如果真结束
    .如果真 (Shift键)
        赋值 (.内容, 相加 (“Shift+”, .内容))
    .如果真结束
    .如果真 (Ctrl键)
        赋值 (.内容, 相加 (“Ctrl+”, .内容))
    .如果真结束
    赋值 (新加入的热键.键代码, 键代码)
    赋值 (新加入的热键.Ctrl键, Ctrl键)
    赋值 (新加入的热键.Shift键, Shift键)
    赋值 (新加入的热键.Alt键, Alt键)
    赋值 (新加入的热键.显示, .内容)
.如果结束


.程序集 _模块_配置文件操作, , , ** 不要更改此处 配置文件.ec

.子程序 写到配置文件, 整数型, , 创建或修改参数“配置文件名”指定的配置文件，非零表示成功
.参数 配置文件名, 文本型, , 全路径配置文件名，如果省略路径，则默认在windows目录下
.参数 小节名, 文本型, , 
.参数 项目名, 文本型, , 
.参数 项目值, 文本型, , 

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 从配置文件读取文本, 文本型, , 
.参数 配置文件名, 文本型, , 全路径配置文件名，如果省略路径，则默认在windows目录下
.参数 小节名, 文本型, , 
.参数 项目名, 文本型, , 
.参数 默认值, 文本型, , 如果该项目不存在，默认返回的文本内容

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 从配置文件读取数值, 整数型, , 
.参数 配置文件名, 文本型, , 全路径配置文件名，如果省略路径，则默认在windows目录下
.参数 小节名, 文本型, , 
.参数 项目名, 文本型, , 
.参数 默认值, 整数型, , 如果该项目不存在，默认返回的数值

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 删除配置文件小节, 整数型, , 删除配置文件中某个小节的全部内容，非零表示成功
.参数 配置文件名, 文本型, , 全路径配置文件名，如果省略路径，则默认在windows目录下
.参数 小节名, 文本型, , 欲删除的小节名

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 删除配置文件项, 整数型, , 删除配置文件中指定小节下某个项目，非零表示成功
.参数 配置文件名, 文本型, , 全路径配置文件名，如果省略路径，则默认在windows目录下
.参数 小节名, 文本型, , 欲删除项目所在的小节
.参数 项目名, 文本型, , 欲删除的项目名 

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.程序集 _模块_打开关联文件及调用关于窗口, , , ** 不要更改此处 调用外部命令.ec

.子程序 打开关联文件, 整数型, , 打开外部关联文件
.参数 窗口句柄, 整数型, , 调用API的窗口句柄
.参数 操作, 文本型, , 操作符：打开“open”；打印“print”
.参数 文件名, 文本型, , 欲打开的文件名
.参数 参数, 文本型, , 运行参数
.参数 路径, 文本型, , 关联程序的完整路径，同一目录下可为“”
.参数 运行状态, 整数型, , 关联程序的窗口状态，一般设置为1

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 调用关于窗口, 整数型, , 调用系统关于窗口
.参数 窗口句柄, 整数型, , 
.参数 窗口标题, 文本型, , 
.参数 说明, 文本型, , 说明文字
.参数 图标窗口句柄, 整数型, , 要提取图标的那个窗口的句柄
.参数 文件名称, 文本型, , 在其中提取图标的那个程序的全名
.参数 图标索引, 整数型, , 欲获取的图标的索引。如果为-1，表示取得文件中的图标总数

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.窗口程序集 窗口程序集3, , , 

.子程序 _About_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

销毁 ()


 ' 不属于任何一个程序集、类模块的函数：
