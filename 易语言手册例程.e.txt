 ' 文件类型：Windows窗口程序

 ' 程序名称：语法示例
 ' 程序描述：本例程用于与易语言手册配合阅读以快速掌握易语言语法。
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 365
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “用作说明易语言手册的例程”
    帮助文件名 = “”



.常量 自定义数值常量, "123", , 
.常量 自定义文本常量, "““带引号的文本”", , 
.常量 自定义日期时间常量, "[2000年9月10日]", , 
.图片 图片资源, " ' 已保存到：D:\易语言学习\Data\易语言手册例程.e\图片资源", , 


 ' 所需要的支持库：
 ' KRNLN d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库




数据类型 自定义数据类型1, , 本数据类型用作说明自定义数据类型的使用方法
    .成员 一般成员, 整数型, , , 
    .成员 数组成员, 文本型, , "3", 
    .成员 其它数据类型成员, 自定义数据类型2, , , 
    .成员 其它数据类型数组成员, 自定义数据类型2, , "10", 

数据类型 自定义数据类型2, , 本数据类型用作说明自定义数据类型的使用方法
    .成员 成员1, 整数型, , , 
    .成员 成员2, 整数型, , , 

数据类型 位置, , 用作演示 Dll 命令的调用
    .成员 水平坐标, 整数型, , , 
    .成员 垂直坐标, 整数型, , , 


.DLL命令 取鼠标当前位置, 逻辑型, "", "GetCursorPos", , 用作演示 Dll 命令的调用
    .参数 鼠标位置, 位置, 传址, 

.窗口程序集 启动窗口程序集, , , 

.程序集变量 演示项目标题数组, 文本型, , "11", 记录各演示项目的标题
.子程序 __启动窗口_创建完毕, 空白型, , 对演示用的数组数据进行初始化
赋值 (演示项目标题数组, { “系统基本数据类型”, “库定义数据类型”, “自定义数据类型”, “命令及操作符”, “子程序”, “Dll命令”, “变量”, “常数”, “常量”, “资源”, “窗口和窗口单元及窗口程序集” }) ' 使用文本常数集对文本数组进行赋值

.子程序 _演示按钮_被单击, 空白型, , 
.局部变量 目前演示项目, 整数型, 静态, , 
.局部变量 当前演示子程序, 子程序指针, , , 

.如果真 (等于 (目前演示项目, 0))
    赋值 (目前演示项目, 1)
    赋值 (., “&C.继续”)
    
     ' 清除最后一步操作所带来的改变
    连续赋值 (“”, ., .)
    #顶层.调整层次 ()
    赋值 (., #浅灰)
    赋值 (., #白色)
.如果真结束
赋值 (., 相加 (“现在演示项目：  ”, #左引号, 演示项目标题数组 [目前演示项目], #右引号))
清除 ()
.判断开始 (等于 (目前演示项目, 1))
    系统基本数据类型 ()
.判断 (等于 (目前演示项目, 2))
    库定义数据类型 ()
.判断 (等于 (目前演示项目, 3))
    自定义数据类型 ()
.判断 (等于 (目前演示项目, 4))
    命令及操作符 ()
.判断 (等于 (目前演示项目, 5))
    子程序 ()
.判断 (等于 (目前演示项目, 6))
    Dll命令 ()
.判断 (等于 (目前演示项目, 7))
    变量 ()
.判断 (等于 (目前演示项目, 8))
    常数 ()
.判断 (等于 (目前演示项目, 9))
    常量 ()
.判断 (等于 (目前演示项目, 10))
    资源 ()
.判断 (等于 (目前演示项目, 11))
    窗口和窗口单元及窗口程序集 ()
.默认
    
.判断结束
赋值 (目前演示项目, 相加 (目前演示项目, 1))
.如果真 (大于 (目前演示项目, 取数组成员数 (演示项目标题数组))) ' 查看是否已经演示完毕
    赋值 (目前演示项目, 0)
.如果真结束


.子程序 系统基本数据类型, 空白型, , 
演示字节集的使用方法 ()

.子程序 演示字节集的使用方法, 空白型, , 
.局部变量 字节集1, 字节集, , , 
.局部变量 字节集2, 字节集, , , 
.局部变量 字节数组, 字节型, , "3", 
.局部变量 短整数变量, 短整数型, , , 

 ' --- 下面演示字节集的使用方法

赋值 (字节集1, { 1, 2, 3 }) ' 使用数值常数集对字节集赋值
显示字节集内容 (字节集1)

赋值 (字节集2, 字节集1) ' 使用其它字节集对字节集赋值

赋值 (字节集1, 相加 (字节集1, 字节集2)) ' 字节集数据之间可以直接相加
显示字节集内容 (字节集1)

赋值 (字节数组, { 5, 6 }) ' 对字节数组进行赋值，未赋值的数组成员将被自动初始为零。
赋值 (字节集1, 到字节集 (字节数组)) ' 可以将字节数组转换赋值到字节集
显示字节集内容 (字节集1)

 ' 如果所赋予的数值超过了该数值数据类型的上限或者下限，将会产生溢出。
赋值 (字节集1, { 256, 257, 258 })
显示字节集内容 (字节集1)
赋值 (短整数变量, 40000)
短整数变量.滚动写行 ()

.子程序 显示字节集内容, 空白型, , 
.参数 字节集数据, 字节集, , 

.局部变量 变量1, 整数型, , , 

.计次循环首 (取字节集长度 (字节集数据), 变量1)
    字节集数据.滚动写行 ( [变量1]) ' 使用引用数组成员的方法来引用字节集数据中的字节
.计次循环尾 ()

.子程序 子程序1, 空白型, , 
“子程序1被调用”.滚动写行 ()

.子程序 库定义数据类型, 空白型, , 
.局部变量 字体变量, 字体, , , 
.局部变量 原字体大小, 整数型, , , 

 ' --- 下面以在系统核心支持库中定义的“字体”数据类型来举例

赋值 (字体变量, .)
字体变量.滚动写行 (.)

赋值 (字体变量., 20)
赋值 (字体变量., 真)
赋值 (原字体大小, ..)
赋值 (., 字体变量)
字体变量.滚动写行 (.)

 ' 恢复到原来的值
赋值 (.., 原字体大小)
赋值 (.., 假)

.子程序 自定义数据类型, 空白型, , 
.局部变量 变量1, 自定义数据类型1, , "2", 
.局部变量 变量2, 自定义数据类型1, , , 

 ' --- 下面演示自定义数据类型的使用方法

赋值 (变量1 [1].一般成员, 100)
赋值 (变量1 [1].数组成员, { “文本1”, “文本2”, “文本3” }) ' 对文本数组进行赋值。
赋值 (变量1 [1].其它数据类型成员.成员1, 200)
赋值 (变量1 [1].其它数据类型数组成员 [1].成员2, 300)
赋值 (变量2, 变量1 [1]) ' 同数据类型的容器之间可以直接进行赋值

变量1.滚动写行 ( [1].一般成员, 变量1 [1].数组成员 [2], 变量1 [1].数组成员 [3], 变量1 [1].其它数据类型成员.成员1, 变量1 [1].其它数据类型数组成员 [1].成员2, 变量2.一般成员, 变量2.其它数据类型数组成员 [1].成员2)

.子程序 命令及操作符, 空白型, , 
 ' --- 下面演示命令及操作符的使用方法

.滚动写行 (“文本1”, 123, 真, 取现行时间 ()) ' 1、画板“滚动写行”方法的参数即可无限扩展。注意此语句行首部，可以看到一个右向双箭头标志。 2、同时，此方法的“欲写出数据”参数也可以被省略。本语句中第一个“欲写出数据”参数即被省略，用作显示一个空行。
 ' 取代码 (“A”, ).滚动写行 () ' “取代码”命令的“欲取其代码的字符位置”参数在调用时可被省略。

.子程序 子程序, 空白型, , 
.局部变量 整数变量, 整数型, , , 
.局部变量 双精度小数变量, 双精度小数型, , , 
.局部变量 自定义数据类型变量, 自定义数据类型1, , , 
.局部变量 文本数组变量, 文本型, , "3", 

 ' --- 下面演示子程序的使用方法

子程序2 ().滚动写行 () ' 演示可以返回数据的子程序

子程序3 (123) ' 演示传递参数到子程序

 ' 下面演示“参考”型参数的使用方法
赋值 (整数变量, 1)
赋值 (双精度小数变量, #pi)
赋值 (自定义数据类型变量.一般成员, 234)
赋值 (文本数组变量 [1], “文本1”)
“--- 原有数据---”.滚动写行 (整数变量, 双精度小数变量, 自定义数据类型变量.一般成员, 文本数组变量 [1])
子程序4 (整数变量, 双精度小数变量, 自定义数据类型变量, 文本数组变量)
 ' 1、由于“整数容器”与子程序4的“整数参数”数据类型一致，所以被参考成功，在子程序4中对“整数参数”所进行的修改被反映到了本子程序中的“整数容器”中；2、由于“双精度小数容器”的数据类型与子程序4的“小数型参数”数据类型不一致，所以参考失败；3、由于系统强制自定义数据类型及数组型参数数据皆以参考形式传递，所以在子程序4中对相应参数所进行的修改都被反映到了本子程序中。
“--- 本子程序中被修改后的数据 ---”.滚动写行 (整数变量, 双精度小数变量, 自定义数据类型变量.一般成员, 文本数组变量 [1])

 ' 下面演示“可空”型参数的使用方法
子程序5 (2) ' 子程序5的“整数参数1”没有被提供参数数据

.子程序 子程序5, 空白型, , 
.参数 整数参数1, 整数型, 可空, 
.参数 整数参数2, 整数型, 可空, 

相加 (到文本 (是否为空 (整数参数1)), “， ”, 到文本 (整数参数1)).滚动写行 (相加 (到文本 (是否为空 (整数参数2)), “， ”, 到文本 (整数参数2)))

.子程序 子程序2, 文本型, , 本子程序将返回一段文本数据
返回 (“此文本为子程序所返回”)

.子程序 子程序3, 空白型, , 本子程序将接收一个参数
.参数 数值参数, 整数型, , 

相加 (“本数值为调用方所传递过来的： ”, 到文本 (数值参数)).滚动写行 ()

.子程序 子程序4, 空白型, , 本子程序用作说明“参考”型参数的使用方法
.参数 整数参数, 整数型, 参考, 
.参数 小数型参数, 小数型, 参考, 
.参数 自定义数据类型参数, 自定义数据类型1, , 
.参数 文本数组参数, 文本型, 数组, 

赋值 (整数参数, 100)
赋值 (小数型参数, 1.23)
赋值 (自定义数据类型参数.一般成员, 200)
赋值 (文本数组参数 [1], “新文本”)
“--- 在被调用子程序中的修改数据 ---”.滚动写行 (整数参数, 小数型参数, 自定义数据类型参数.一般成员, 文本数组参数 [1])

.子程序 Dll命令, 空白型, , 
.局部变量 现行鼠标位置, 位置, , , 

 ' --- 下面演示 Dll 命令的使用方法

.如果 (取鼠标当前位置 (现行鼠标位置))
    相加 (“水平鼠标位置： ”, 到文本 (现行鼠标位置.水平坐标)).滚动写行 (相加 (“垂直鼠标位置： ”, 到文本 (现行鼠标位置.垂直坐标)))
.否则
    “取鼠标位置失败！”.滚动写行 ()
.如果结束


.子程序 变量, 空白型, , 
.局部变量 字体变量, 字体, , , 
.局部变量 画板变量, 画板, , , 
.局部变量 数组变量, 整数型, , "2,3", 
.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 

 ' --- 下面演示容器的使用方法

 ' 1、容器的初始化
相加 (字体变量., “， ”, 到文本 (字体变量.)).滚动写行 () ' “字体”库定义数据类型对其“字体名称”及“字体大小”成员皆指定有初始值。

 ' 2、容器的赋值
赋值 (画板变量, ) ' 将本窗口上的“画板”对象赋予到“画板容器”中去。
画板变量.滚动写行 (“此文本通过画板变量写出”)

 ' 3、静态容器
子程序6 ()
子程序6 () ' 通过两次调用可以看出，“子程序6”中的“静态容器”的空间恒久存在。

 ' 4、多维数组容器的单维引用方法
赋值 (数组变量 [2] [2], 100)
数组变量.滚动写行 ( [5]) ' 多维数组（2，3），有 [1][1]，[1][2]，[1][3]，[2][1]，[2][2]，[2][3] 六个数组成员，单维表示方式 [5] 即对应多维表示方式 [2][2] 。
赋值 (数组变量 [6], 200)
数组变量.滚动写行 ( [2] [3])

.子程序 子程序6, 空白型, , 
.局部变量 静态变量, 整数型, 静态, , 

静态变量.滚动写行 ()
赋值 (静态变量, 相加 (静态变量, 1))

.子程序 常数, 空白型, , 
.局部变量 日期时间, 日期时间型, , "4", 
.局部变量 数值数组, 整数型, , "3", 

 ' --- 下面演示常数的使用方法

赋值 (日期时间, { )

.子程序 常量, 空白型, , 
 ' --- 下面演示常量的使用方法

#pi.滚动写行 (#e, 相加 (“文本1”, #换行符, “文本2”)) ' 演示库定义常量的使用方法
#自定义数值常量.滚动写行 (#自定义文本常量, #自定义日期时间常量) ' 演示用户自定义常量的使用方法，欲查看用户自定义常量请跳转到常量数据表。

.子程序 资源, 空白型, , 
.局部变量 图片号, 整数型, , , 

 ' --- 下面演示资源的使用方法

赋值 (., #图片资源) ' 演示直接在窗口单元上的使用方法。欲查看“图片资源”请跳转到图片资源表。

赋值 (图片号, 载入图片 (#图片资源)) ' 演示在画板或者打印机上的使用方法
.如果真 (不等于 (图片号, 0))
    图片号.画图片 (10, 10, , , )
    卸载图片 (图片号)
.如果真结束


.子程序 窗口和窗口单元及窗口程序集, 空白型, , 
赋值 (., {  }) ' 首先清除上一步所遗留下来的图片

 ' --- 下面演示窗口和窗口单元的使用方法

赋值 (., “标签1”) ' 本引用方式仅能够在本窗口程序集中使用
赋值 (_启动窗口.., “标签2”) ' 本引用方式能够在任何程序集中使用

#底层.调整层次 () ' 标签对象引用属于“窗口”数据类型的方法
赋值 (., #浅灰)
赋值 (., #白色)

.滚动写行 (., .) ' 使用窗口单元的“标记”固定属性。


 ' 不属于任何一个程序集、类模块的函数：
