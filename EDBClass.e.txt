 ' 文件类型：Windows模块源码

 ' 程序名称：edbClass
 ' 程序描述：
 ' 程序作者：星锋工作室-东灿
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.图片 空数据500字节, " ' 已保存到：D:\易语言学习\Data\EDBClass.e\空数据500字节", , 
.常量 DB_Begin_Mark_1, "“BDCW”", , 非加密数据库的起始标志
.常量 DB_Begin_Mark_2, "“WEDB”", , 
.常量 Encrypted_DB_Begin_Mark_1, "“BDCW”", , 加密数据库的起始标志
.常量 Encrypted_DB_Begin_Mark_2, "“WCDB”", , 
.常量 Dat_Begin_Mark_1, "“TDEW”", , 辅助文件的起始标志
.常量 Dat_Begin_Mark_2, "“WEDT”", , 
.常量 Index_Begin_Mark_1, "“XNEW”", , 索引文件的起始标志
.常量 , , , 
.常量 MAX_FIXED_TEXT_FIELD_WIDTH, "1024", , 
.常量 len_DBHead, "116", , 
.常量 len_FieldInf, "72", , 
.常量 BLK_SIZE, "512", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 DB_HEADER, , len=116;
    .成员 dwMark, 空白型, , , 为 DB_BEGIN_MARK 或 ENCRYPTED_DB_BEGIN_MARK
    .成员 nVer, 空白型, , , 本数据库的版本号
    .成员 dtCreated, 日期时间型, , , 创建日期
    .成员 匿名成员89, 空白型, , , 
    .成员 nRecordsCount, 空白型, , , 当前库中记录数
    .成员 nFreeBookmark, 空白型, , , 当前未用记录书签值
    .成员 nRecordSize, 空白型, , , 每一条记录的数据尺寸。
    .成员 szPasswordMD5, 字节型, , "36", 32+4
    .成员 nReserved, 空白型, , "11", 
    .成员 nReserved2, 空白型, , , 
    .成员 InfCount, 空白型, , , 

数据类型 FIELD_INF, , len=56;
    .成员 szName, 字节型, , "20", 
    .成员 nType, 空白型, , , 
    .成员 nOffset, 空白型, , , 
    .成员 nFixedTextWidth, 空白型, , , 
    .成员 nReserved, 空白型, , "10", 

数据类型 DAT_HEADER, , len=28
    .成员 dwMark, 空白型, , , ;\0-4
    .成员 nVer, 空白型, , , 本辅助文件所属数据库的版本号;\4-8
    .成员 dtCreated, 日期时间型, , , 创建日期;\8-16
    .成员 匿名成员88, 空白型, , , 
    .成员 nBlockCount, 空白型, , , 当前所有块的数目(包括文件头所在块);\16-20
    .成员 nEmptyBlockCount, 空白型, , , 当前空块的数目;\20-24
    .成员 nStartEmptyBlockNO, 空白型, , , 第一个空块的位置(0 表示无空块);\24-28

数据类型 BLOCK_HEADER, , len=12
    .成员 nPrevBlockNO, 空白型, , , 0-4
    .成员 nNextBlockNO, 空白型, , , 4-8
    .成员 nDataSize, 空白型, , , 8-12

数据类型 INDEX_HEADER, , 
    .成员 dwMark, 空白型, , , 
    .成员 nVer, 空白型, , , 本辅助文件所属数据库的版本号
    .成员 dtCreated, 空白型, , , 创建日期
    .成员 匿名成员86, 空白型, , , 
    .成员 nType, 空白型, , , 
    .成员 dwState, 空白型, , , 
    .成员 nNodeCount, 空白型, , , 当前所有结点的数目（包括文件头所在结点）
    .成员 nEmptyNodeCount, 空白型, , , 当前空结点的数目
    .成员 nStartEmptyNodeNO, 空白型, , , 第一个空结点的位置（0 表示无空结点）
    .成员 nRootNodeNO, 空白型, , , B+ 树根（树 / 叶）结点的位置

数据类型 ALL_FIELDS_OF_INDEX, , 
    .成员 nFieldsCount, 空白型, , , 
    .成员 szaryFieldName, 字节型, , "8,17", [MAX_INDEX_FIELDS_COUNT][MAX_FIELD_NAME_LEN + 1]
    .成员 匿名成员81, 空白型, , , 所有字段的类型,如果小于0,表示为文本型,其绝对值为文本的固定宽度
    .成员 naryFieldsType, 整数型, , "8", [MAX_INDEX_FIELDS_COUNT]

数据类型 my_Field_inf, , 
    .成员 szName, 文本型, , , NEW(MAX_FIELD_NAME_LEN)=+1
    .成员 nType, 空白型, , , 
    .成员 nOffset, 空白型, , , 
    .成员 nFixedTextWidth, 空白型, , , 


.DLL命令 CopyTo_DB_Header, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, DB_HEADER, , 
    .参数 Src, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 CopyTo_DAT_Header, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, DAT_HEADER, , 
    .参数 Src, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 CopyTo_Field_Header, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, FIELD_INF, , 
    .参数 Src, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 CopyTo_ptr, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 整数型, , 
    .参数 Src, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 CopyTo_BLOCK_HEAD, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, BLOCK_HEADER, , 
    .参数 Src, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 GetPtr_Str, 整数型, "", "lstrcpynA", , 
    .参数 cpy1, 文本型, , 
    .参数 cpy2, 文本型, , 
    .参数 len, 空白型, , 

.DLL命令 GetPtr_Bin, 整数型, "", "lstrcpynA", , 
    .参数 cpy1, 字节集, , 
    .参数 cpy2, 字节集, , 
    .参数 len, 空白型, , 

.DLL命令 _IsBadCodePtr, 逻辑型, "", "IsBadCodePtr", , 
    .参数 lptr, 空白型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 

_临时子程序 ()
返回 (0)

.子程序 _临时子程序, 空白型, , 
.局部变量 a, EDBClass, , , 
.局部变量 e, 空白型, , , 
.局部变量 FilePath, 文本型, , , 
.局部变量 time, 空白型, , , 

赋值 (FilePath, “C:\Documents and Settings\Administrator\桌面\化学.edb”)
a.打开 (FilePath)
 ' a.方法1 ()
 ' 调试输出 (a.写字节集 (“字节集”, {  }))
 ' 调试输出 (a.读字节集 (“字节集”))
a.跳过 ()
a.跳过 ()
a.彻底删除 ()
 ' 调试输出 (a.写字节集 (“字节集”, {  }))
 ' 调试输出 (a.读字节集 (“字节集”))
 ' 调试输出 (a.写备注 (“备注”, “”))
 ' ' 调试输出 (a.读备注 (“备注”))
a.关闭 ()


.类模块 EDBClass, , , 

.程序集变量 hFile, 空白型, , , 
.程序集变量 hEDT, 空白型, , , 
.程序集变量 Field_Inf, my_Field_inf, , "1", 
.程序集变量 首记录位置, 整数型, , , 
.程序集变量 记录条长, 空白型, , , 
.程序集变量 集_记录数, 空白型, , , 
.程序集变量 集_当前记录号, 空白型, , , 
.程序集变量 集_是否读出成功, 逻辑型, , , 
.子程序 _初始化, 空白型, , 


.子程序 _销毁, 空白型, , 
关闭 ()

.子程序 打开, 逻辑型, 公开, 
.参数 路径, 文本型, , 
.参数 密码, 文本型, 可空, 
.参数 edt路径, 文本型, 可空, [测试版不提供此功能谢谢]默认参数1同名EDT

.局部变量 headText, 文本型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 ThisFileSize, 空白型, , , 
.局部变量 i, 整数型, , , 
.局部变量 匿名局部变量_163, 空白型, , , 
.局部变量 tmp_FieldInf, FIELD_INF, , , 
.局部变量 DBHead, DB_HEADER, , , 
.局部变量 需要EDT, 逻辑型, , , 
.局部变量 tmp_path, 文本型, , , 
.局部变量 tmp_address, 空白型, , , 

关闭 ()
赋值 (hFile, 打开加密文件 (路径, , , 密码, 4))
赋值 (ThisFileSize, 取文件长度 (hFile))
.如果真 (或者 (等于 (hFile, 0), 小于 (ThisFileSize, 相加 (#len_DBHead, #len_FieldInf))))
    关闭 ()
    返回 (假)
.如果真结束
赋值 (bin, 读入字节集 (hFile, #len_DBHead))
.如果真 (不等于 (取字节集长度 (bin), #len_DBHead))
    关闭 ()
    返回 (假)
.如果真结束
CopyTo_DB_Header (DBHead, bin, #len_DBHead)
.如果真 (小于或等于 (DBHead.nRecordSize, 0))
    关闭 ()
    返回 (假)
.如果真结束
赋值 (headText, 到文本 (到字节集 (DBHead.dwMark)))
.如果真 (小于 (DBHead.nVer, 65536))
    关闭 ()
    返回 (假)
.如果真结束
.如果真 (或者 (小于或等于 (DBHead.InfCount, 0), 小于 (ThisFileSize, 相加 (#len_DBHead, 相乘 (DBHead.InfCount, #len_FieldInf)))))
    关闭 ()
    返回 (假)
.如果真结束
.判断开始 (或者 (等于 (headText, #DB_Begin_Mark_1), 等于 (headText, #DB_Begin_Mark_2)))
    
.判断 (或者 (等于 (headText, #Encrypted_DB_Begin_Mark_1), 等于 (headText, #Encrypted_DB_Begin_Mark_2)))
     ' md5检查
.默认
    关闭 ()
    返回 (假)
.判断结束
重定义数组 (Field_Inf, 假, DBHead.InfCount)
赋值 (需要EDT, 假)
.计次循环首 (DBHead.InfCount, i)
    赋值 (bin, 读入字节集 (hFile, #len_FieldInf))
    .如果真 (不等于 (取字节集长度 (bin), #len_FieldInf))
        关闭 ()
        返回 (假)
    .如果真结束
    CopyTo_Field_Header (tmp_FieldInf, bin, #len_FieldInf)
    赋值 (Field_Inf [i], szName, 到小写 (到文本 (tmp_FieldInf.szName)))
    赋值 (Field_Inf [i], nType, tmp_FieldInf.nType)
    .如果真 (或者 (等于 (tmp_FieldInf.nType, #备注型), 等于 (tmp_FieldInf.nType, #字节集型)))
        赋值 (需要EDT, 真)
    .如果真结束
    赋值 (Field_Inf [i], nOffset, tmp_FieldInf.nOffset)
    赋值 (Field_Inf [i], nFixedTextWidth, tmp_FieldInf.nFixedTextWidth)
.计次循环尾 ()
.如果真 (等于 (需要EDT, 真))
     ' .如果 (等于 (edt路径, “”))
        赋值 (tmp_address, 倒找文本 (路径, “.”, , 假))
        .如果 (不等于 (tmp_address, -1))
            赋值 (tmp_path, 相加 (取文本左边 (路径, tmp_address), “edt”))
        .否则
            赋值 (tmp_path, 相加 (路径, “.edt”))
        .如果结束
        
    .否则
         ' tmp_path ＝ edt路径
    .如果结束
    .如果真 (等于 (内部_打开edt (tmp_path, 密码), 假))
        关闭 ()
        返回 (假)
    .如果真结束
    
.如果真结束
赋值 (首记录位置, 相加 (#len_DBHead, 相乘 (DBHead.InfCount, #len_FieldInf)))
赋值 (记录条长, DBHead.nRecordSize)
.如果真 (大于 (取记录数 (), 0))
    赋值 (集_当前记录号, 1)
.如果真结束
返回 (真)

.子程序 内部_打开edt, 逻辑型, , 
.参数 路径, 文本型, , 
.参数 密码, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 DAT_Header, DAT_HEADER, , , 

赋值 (hEDT, 打开加密文件 (路径, , , 密码, 4))
.如果真 (等于 (hEDT, 0))
    返回 (假)
.如果真结束
.如果真 (或者 (不等于 (求余数 (取文件长度 (hEDT), #BLK_SIZE), 0), 小于或等于 (取文件长度 (hEDT), 0)))
    关闭文件 (hEDT)
    赋值 (hEDT, 0)
    返回 (假)
.如果真结束
赋值 (bin, 读入字节集 (hEDT, 28))
.如果真 (不等于 (取字节集长度 (bin), 28))
    关闭文件 (hEDT)
    赋值 (hEDT, 0)
    返回 (假)
.如果真结束
CopyTo_DAT_Header (DAT_Header, bin, 28)
.如果真 (或者 (等于 (DAT_Header.nBlockCount, 0), 大于 (DAT_Header.nEmptyBlockCount, DAT_Header.nBlockCount), 大于 (DAT_Header.nStartEmptyBlockNO, DAT_Header.nEmptyBlockCount)))
    关闭文件 (hEDT)
    赋值 (hEDT, 0)
    返回 (假)
.如果真结束
返回 (真)

.子程序 关闭, 空白型, 公开, 
.如果真 (不等于 (hFile, 0))
    关闭文件 (hFile)
.如果真结束
.如果真 (不等于 (hEDT, 0))
    关闭文件 (hEDT)
.如果真结束
连续赋值 (0, hFile, hEDT, 集_记录数, 集_当前记录号, 首记录位置, 记录条长)
赋值 (集_是否读出成功, 假)
清除数组 (Field_Inf)

.子程序 取记录数, 整数型, 公开, 
移动读写位置 (hFile, #文件首, 16)
读入数据 (hFile, 集_记录数)
返回 (集_记录数)

.子程序 内部_写记录数, 逻辑型, , 
.参数 记录数, 空白型, , 

移动读写位置 (hFile, #文件首, 16)
返回 (写出数据 (hFile, 记录数))

.子程序 读文本, 文本型, 公开, 
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 txt, 文本型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #文本型)))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
赋值 (txt, 读入文本 (hFile, Field_Inf [i], nFixedTextWidth))
赋值 (集_是否读出成功, 或者 (不等于 (txt, “”), 等于 (是否在文件尾 (hFile, ), 假)))
返回 (txt)

.子程序 读整数, 整数型, 公开, 失败返回-1,且 是否读出成功()=假
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #整数型)))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果结束


.子程序 读小数, 小数型, 公开, 同读整数
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 小数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #小数型)))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果结束


.子程序 是否读出成功, 逻辑型, 公开, 用于效正到底是否读出成功
返回 (集_是否读出成功)

.子程序 读长整数, 长整数型, 公开, 同读整数
.参数 字段名, 文本型, , 
.参数 是否兼容整数, 逻辑型, 可空, 默认为假

.局部变量 i, 空白型, , , 
.局部变量 长整数结果, 长整数型, , , 
.局部变量 整数结果, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (等于 (i, 0))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
.判断开始 (等于 (Field_Inf [i], nType, #长整数型))
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    .如果 (读入数据 (hFile, 长整数结果))
        赋值 (集_是否读出成功, 真)
        返回 (长整数结果)
    .否则
        赋值 (集_是否读出成功, 假)
        返回 (-1)
    .如果结束
    
.判断 (并且 (等于 (Field_Inf [i], nType, #整数型), 等于 (是否兼容整数, 真)))
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    .如果 (读入数据 (hFile, 整数结果))
        赋值 (集_是否读出成功, 真)
        返回 (长整数结果)
    .否则
        赋值 (集_是否读出成功, 假)
        返回 (-1)
    .如果结束
    
.默认
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.判断结束


.子程序 读日期时间, 日期时间型, 公开, 失败返回[100.1.1],且 是否读出成功()=假
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 日期时间型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 ()

.子程序 读双精度小数, 双精度小数型, 公开, 同读整数
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 双精度小数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #双精度小数型)))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果结束


.子程序 读逻辑, 逻辑型, 公开, 若失败返回假,且 是否读出成功()=假
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 逻辑型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #逻辑型)))
    赋值 (集_是否读出成功, 假)
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (假)
.如果结束


.子程序 读字节, 字节型, 公开, 同读整数
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 字节型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #字节型)))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果结束


.子程序 读短整数, 短整数型, 公开, 同读整数
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 短整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #短整数型)))
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
.如果 (读入数据 (hFile, result))
    赋值 (集_是否读出成功, 真)
    返回 (result)
.否则
    赋值 (集_是否读出成功, 假)
    返回 (-1)
.如果结束


.子程序 读备注, 文本型, 公开, 同读文本
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 result, 文本型, , , 
.局部变量 BLOCK_HEADER, BLOCK_HEADER, , "0", 
.局部变量 bin, 字节集, , , 
.局部变量 tmp_block, BLOCK_HEADER, , , 
.局部变量 groupSize, 空白型, , , 
.局部变量 listStringBlock, 字节集, , "0", 
.局部变量 ptrResult, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (hEDT, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #备注型)))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
读入数据 (hFile, tmp_block.nNextBlockNO)
.如果真 (等于 (tmp_block.nNextBlockNO, 0))
    赋值 (集_是否读出成功, 真)
    返回 (“”)
.如果真结束
移动读写位置 (hEDT, , 16)
.如果真 (小于 (取字节集数据 (读入字节集 (hEDT, 4), #整数型, ), tmp_block.nNextBlockNO))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
清除数组 (BLOCK_HEADER)
清除数组 (listStringBlock)
赋值 (groupSize, 0)
.循环判断首 ()
    移动读写位置 (hEDT, , 相乘 (#BLK_SIZE, tmp_block.nNextBlockNO))
    赋值 (bin, 读入字节集 (hEDT, 12))
    .如果真 (不等于 (取字节集长度 (bin), 12))
        赋值 (集_是否读出成功, 假)
        返回 (“”)
    .如果真结束
    CopyTo_BLOCK_HEAD (tmp_block, bin, 12)
    赋值 (groupSize, 相加 (groupSize, tmp_block.nDataSize))
    赋值 (bin, 读入字节集 (hEDT, tmp_block.nDataSize))
    .如果真 (不等于 (取字节集长度 (bin), tmp_block.nDataSize))
        赋值 (集_是否读出成功, 假)
        返回 (“”)
    .如果真结束
    加入成员 (listStringBlock, bin)
.循环判断尾 (大于 (tmp_block.nNextBlockNO, 0))
赋值 (result, 取空白文本 (groupSize))
赋值 (ptrResult, GetPtr_Str (result, result, 0))
.如果真 (_IsBadCodePtr (ptrResult))
    赋值 (集_是否读出成功, 假)
    返回 (“”)
.如果真结束
.计次循环首 (取数组成员数 (listStringBlock), i)
    CopyTo_ptr (ptrResult, listStringBlock [i], 取字节集长度 (listStringBlock [i]))
    赋值 (ptrResult, 相加 (ptrResult, 取字节集长度 (listStringBlock [i])))
.计次循环尾 ()
赋值 (集_是否读出成功, 真)
返回 (result)

.子程序 读字节集, 字节集, 公开, 失败返回{},且 是否读出成功()=假
.参数 字段名, 文本型, , 

.局部变量 result, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 BLOCK_HEADER, BLOCK_HEADER, , "0", 
.局部变量 bin, 字节集, , , 
.局部变量 tmp_block, BLOCK_HEADER, , , 
.局部变量 groupSize, 空白型, , , 
.局部变量 listBinBlock, 字节集, , "0", 
.局部变量 ptrResult, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (hEDT, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    赋值 (集_是否读出成功, 假)
    返回 ({  })
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #字节集型)))
    赋值 (集_是否读出成功, 假)
    返回 ({  })
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
读入数据 (hFile, tmp_block.nNextBlockNO)
.如果真 (等于 (tmp_block.nNextBlockNO, 0))
    赋值 (集_是否读出成功, 真)
    返回 ({  })
.如果真结束
移动读写位置 (hEDT, , 16)
.如果真 (小于 (取字节集数据 (读入字节集 (hEDT, 4), #整数型, ), tmp_block.nNextBlockNO))
    赋值 (集_是否读出成功, 假)
    返回 ({  })
.如果真结束
清除数组 (BLOCK_HEADER)
清除数组 (listBinBlock)
赋值 (groupSize, 0)
.循环判断首 ()
    移动读写位置 (hEDT, , 相乘 (#BLK_SIZE, tmp_block.nNextBlockNO))
    赋值 (bin, 读入字节集 (hEDT, 12))
    .如果真 (不等于 (取字节集长度 (bin), 12))
        赋值 (集_是否读出成功, 假)
        返回 ({  })
    .如果真结束
    CopyTo_BLOCK_HEAD (tmp_block, bin, 12)
    赋值 (groupSize, 相加 (groupSize, tmp_block.nDataSize))
    赋值 (bin, 读入字节集 (hEDT, tmp_block.nDataSize))
    .如果真 (不等于 (取字节集长度 (bin), tmp_block.nDataSize))
        赋值 (集_是否读出成功, 假)
        返回 ({  })
    .如果真结束
    加入成员 (listBinBlock, bin)
.循环判断尾 (大于 (tmp_block.nNextBlockNO, 0))
赋值 (result, 取空白字节集 (groupSize))
赋值 (ptrResult, GetPtr_Bin (result, result, 0))
.计次循环首 (取数组成员数 (listBinBlock), i)
    CopyTo_ptr (ptrResult, listBinBlock [i], 取字节集长度 (listBinBlock [i]))
    赋值 (ptrResult, 相加 (ptrResult, 取字节集长度 (listBinBlock [i])))
.计次循环尾 ()
赋值 (集_是否读出成功, 真)
返回 (result)

.子程序 取标签, 整数型, 公开, 失败返回0,若小于0表示被删除标记
.局部变量 标签值, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (0)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长)))
.如果 (读入数据 (hFile, 标签值))
    返回 (标签值)
.否则
    返回 (0)
.如果结束


.子程序 取字段数, 整数型, 公开, 
返回 (取数组成员数 (Field_Inf))

.子程序 取字段数据类型, 整数型, 公开, 返回0失败
.参数 字段名, 文本型, , 

.局部变量 i, 整数型, , , 

赋值 (i, 取字段名位置 (字段名))
.如果真 (等于 (i, 0))
    返回 (0)
.如果真结束
返回 (Field_Inf [i], nType)

.子程序 取字段名位置, 整数型, 公开, 从1开始;找不到返回0
.参数 字段名, 文本型, , 

.局部变量 txt, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (txt, 到小写 (字段名))
.计次循环首 (取数组成员数 (Field_Inf), i)
    .如果真 (等于 (Field_Inf [i], szName, txt))
        返回 (i)
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 取位置字段名, 文本型, 公开, 失败返回空文本；请注意,读出的是小写字段名
.参数 位置, 空白型, , 从1开始

.如果真 (或者 (小于或等于 (位置, 0), 大于 (位置, 取数组成员数 (Field_Inf))))
    返回 (“”)
.如果真结束
返回 (Field_Inf [位置], szName)

.子程序 跳过, 逻辑型, 公开, 易语言的跳过可以到达首记录前面,但本命令不行,只能到首记录(库中有记录时)
.参数 跳过记录数, 空白型, 可空, 如果为0的话自动变成1

.如果真 (等于 (跳过记录数, 0))
    赋值 (跳过记录数, 1)
.如果真结束
.如果 (大于 (相加 (集_当前记录号, 跳过记录数), 0)) ' 允许尾记录后
    赋值 (集_当前记录号, 相加 (集_当前记录号, 跳过记录数))
    .如果真 (大于 (集_当前记录号, 取记录数 ()))
        .如果 (等于 (集_记录数, 0))
            赋值 (集_当前记录号, 0)
        .否则
            赋值 (集_当前记录号, 相加 (集_记录数, 1))
        .如果结束
        
    .如果真结束
    返回 (真)
.否则
    .如果 (大于 (取记录数 (), 0))
        赋值 (集_当前记录号, 1)
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果结束


.子程序 到尾记录, 空白型, 公开, 
赋值 (集_当前记录号, 取记录数 ())

.子程序 跳到, 逻辑型, 公开, 
.参数 记录号, 空白型, , 从1开始

.如果 (并且 (大于或等于 (记录号, 1), 小于或等于 (记录号, 取记录数 ())))
    赋值 (集_当前记录号, 记录号)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 到首记录, 逻辑型, 公开, 
.如果 (大于或等于 (取记录数 (), 1))
    赋值 (集_当前记录号, 1)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 尾记录后, 逻辑型, 公开, 
返回 (大于 (集_当前记录号, 取记录数 ()))

.子程序 取当前记录号, 整数型, 公开, 需要注意的是,易语言的取记录号在无记录时为仍然为1,而本命令在无记录时=0
.判断开始 (等于 (取记录数 (), 0))
    赋值 (集_当前记录号, 0)
.判断 (大于 (相加 (集_当前记录号, 1), 集_记录数))
    赋值 (集_当前记录号, 相加 (集_记录数, 1))
.默认
    
.判断结束
返回 (集_当前记录号)

.子程序 写整数, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #整数型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写长整数, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 长整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #长整数型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写逻辑, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 逻辑型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #逻辑型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写小数, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 小数型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #小数型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写短整数, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 短整数型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #短整数型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写字节, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 字节型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #字节型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写日期时间, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 日期时间型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #日期时间型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写双精度小数, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 写入值, 双精度小数型, , 

.局部变量 i, 整数型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #双精度小数型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
返回 (写出数据 (hFile, 写入值))

.子程序 写文本, 逻辑型, 公开, 对于备注型无效
.参数 字段名, 文本型, , 
.参数 写入值, 文本型, , 

.局部变量 i, 整数型, , , 
.局部变量 len, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #文本型)))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
赋值 (len, 取文本长度 (写入值))
.判断开始 (大于 (len, Field_Inf [i], nFixedTextWidth))
    返回 (假)
.判断 (等于 (len, Field_Inf [i], nFixedTextWidth))
    返回 (写出字节集 (hFile, 到字节集 (写入值)))
.默认
    返回 (写出数据 (hFile, 写入值))
.判断结束


.子程序 内部_edt节点配置, 逻辑型, , 
.参数 DAT_HEAD, DAT_HEADER, , 
.参数 分配数组, 整数型, 参考 数组, 
.参数 原开始节点, 空白型, , 

.局部变量 id, 整数型, , , 
.局部变量 WriteBlockCount, 空白型, , , 
.局部变量 BLOCK_HEAD, BLOCK_HEADER, , , 
.局部变量 bin, 字节集, , , 
.局部变量 匿名局部变量_1058, 空白型, , , 
.局部变量 tmp_index, 空白型, , , 
.局部变量 匿名局部变量_1274, 空白型, , , 
.局部变量 写入最后的节点, 空白型, , , 
.局部变量 空节点组, 整数型, , "0", 

赋值 (BLOCK_HEAD.nNextBlockNO, 原开始节点)
赋值 (写入最后的节点, 原开始节点)
赋值 (WriteBlockCount, 取数组成员数 (分配数组))
赋值 (id, 1)
.判断循环首 (并且 (不等于 (BLOCK_HEAD.nNextBlockNO, 0), 小于或等于 (id, WriteBlockCount)))
    赋值 (写入最后的节点, BLOCK_HEAD.nNextBlockNO)
    赋值 (分配数组 [id], 写入最后的节点)
    赋值 (id, 相加 (id, 1))
    移动读写位置 (hEDT, , 相乘 (BLOCK_HEAD.nNextBlockNO, #BLK_SIZE))
    赋值 (bin, 读入字节集 (hEDT, 12))
    .如果真 (不等于 (取字节集长度 (bin), 12))
        赋值 (BLOCK_HEAD.nNextBlockNO, 0)
        跳出循环 ()
    .如果真结束
    CopyTo_BLOCK_HEAD (BLOCK_HEAD, bin, 12)
.判断循环尾 ()
.判断开始 (不等于 (BLOCK_HEAD.nNextBlockNO, 0)) ' 新数据小于原数据
    .如果真 (不等于 (WriteBlockCount, 0))
        移动读写位置 (hEDT, , 相加 (相乘 (写入最后的节点, #BLK_SIZE), 4))
        写出数据 (hEDT, 0)
    .如果真结束
    .判断循环首 (不等于 (BLOCK_HEAD.nNextBlockNO, 0))
        加入成员 (空节点组, BLOCK_HEAD.nNextBlockNO)
        移动读写位置 (hEDT, , 相加 (相乘 (BLOCK_HEAD.nNextBlockNO, #BLK_SIZE), 8))
        写出数据 (hEDT, 0)
        移动读写位置 (hEDT, , 相乘 (BLOCK_HEAD.nNextBlockNO, #BLK_SIZE))
        赋值 (bin, 读入字节集 (hEDT, 12))
        .如果真 (不等于 (取字节集长度 (bin), 12))
            返回 (假)
        .如果真结束
        CopyTo_BLOCK_HEAD (BLOCK_HEAD, bin, 12)
    .判断循环尾 ()
    赋值 (BLOCK_HEAD.nNextBlockNO, DAT_HEAD.nStartEmptyBlockNO)
    .判断循环首 (不等于 (BLOCK_HEAD.nNextBlockNO, 0))
        加入成员 (空节点组, BLOCK_HEAD.nNextBlockNO)
        移动读写位置 (hEDT, , 相乘 (BLOCK_HEAD.nNextBlockNO, #BLK_SIZE))
        赋值 (bin, 读入字节集 (hEDT, 12))
        .如果真 (不等于 (取字节集长度 (bin), 12))
            返回 (假)
        .如果真结束
        CopyTo_BLOCK_HEAD (BLOCK_HEAD, bin, 12)
    .判断循环尾 ()
    数组排序 (空节点组, 真) ' 没办法,只能用土办法
    赋值 (DAT_HEAD.nEmptyBlockCount, 取数组成员数 (空节点组))
    .判断循环首 (并且 (大于 (DAT_HEAD.nEmptyBlockCount, 0), 等于 (空节点组 [DAT_HEAD].nEmptyBlockCount, 相减 (DAT_HEAD.nBlockCount, 1))))
        移动读写位置 (hEDT, , 相乘 (相减 (DAT_HEAD.nBlockCount, 1), #BLK_SIZE))
        删除数据 (hEDT, #BLK_SIZE)
        删除成员 (空节点组, DAT_HEAD.nEmptyBlockCount, )
        赋值 (DAT_HEAD.nEmptyBlockCount, 相减 (DAT_HEAD.nEmptyBlockCount, 1))
        赋值 (DAT_HEAD.nBlockCount, 相减 (DAT_HEAD.nBlockCount, 1))
    .判断循环尾 ()
    移动读写位置 (hEDT, , 24)
    .如果 (大于 (DAT_HEAD.nEmptyBlockCount, 0))
        写出数据 (hEDT, 空节点组 [1])
    .否则
        写出数据 (hEDT, 0)
    .如果结束
    .计次循环首 (DAT_HEAD.nEmptyBlockCount, tmp_index)
        移动读写位置 (hEDT, , 相乘 (空节点组 [tmp_index], #BLK_SIZE))
        .如果 (等于 (tmp_index, 1))
            写出数据 (hEDT, 0)
        .否则
            写出数据 (hEDT, 空节点组 [相减 (tmp_index, 1)])
        .如果结束
        .如果 (等于 (tmp_index, DAT_HEAD.nEmptyBlockCount))
            写出数据 (hEDT, 0)
        .否则
            写出数据 (hEDT, 空节点组 [相加 (tmp_index, 1)])
        .如果结束
        
    .计次循环尾 ()
.判断 (小于或等于 (id, WriteBlockCount)) ' 新数据大于原数据
    赋值 (BLOCK_HEAD.nNextBlockNO, DAT_HEAD.nStartEmptyBlockNO)
    .判断循环首 (并且 (不等于 (BLOCK_HEAD.nNextBlockNO, 0), 小于或等于 (id, WriteBlockCount)))
        赋值 (分配数组 [id], BLOCK_HEAD.nNextBlockNO)
        赋值 (DAT_HEAD.nEmptyBlockCount, 相减 (DAT_HEAD.nEmptyBlockCount, 1))
        赋值 (id, 相加 (id, 1))
        移动读写位置 (hEDT, , 相乘 (BLOCK_HEAD.nNextBlockNO, #BLK_SIZE))
        赋值 (bin, 读入字节集 (hEDT, 12))
        .如果真 (不等于 (取字节集长度 (bin), 12))
            返回 (假)
        .如果真结束
        CopyTo_BLOCK_HEAD (BLOCK_HEAD, bin, 12)
    .判断循环尾 ()
    赋值 (DAT_HEAD.nStartEmptyBlockNO, BLOCK_HEAD.nNextBlockNO)
    .如果真 (小于或等于 (id, WriteBlockCount)) ' 新数据过大,需要增加空间
        赋值 (DAT_HEAD.nEmptyBlockCount, 0)
        赋值 (分配数组 [id], 相加 (DAT_HEAD.nBlockCount, 1))
        .变量循环首 (相加 (id, 1), WriteBlockCount, 1, tmp_index)
            赋值 (分配数组 [tmp_index], 相加 (分配数组 [相减 (tmp_index, 1)], 1))
        .变量循环尾 ()
        .变量循环首 (id, WriteBlockCount, 1, tmp_index)
            移动读写位置 (hEDT, , 相乘 (分配数组 [tmp_index], #BLK_SIZE))
            写出字节集 (hEDT, 选择 (等于 (tmp_index, 1), { 0, 0, 0, 0 }, 到字节集 (分配数组 [相减 (tmp_index, 1)])), 选择 (等于 (tmp_index, WriteBlockCount), { 0, 0, 0, 0 }, 到字节集 (分配数组 [相加 (tmp_index, 1)])), { 0, 0, 0, 0 }, #空数据500字节)
        .变量循环尾 ()
        赋值 (DAT_HEAD.nBlockCount, 分配数组 [WriteBlockCount])
    .如果真结束
    
.默认
     ' 占用数据块刚好相等
.判断结束
移动读写位置 (hEDT, , 16)
写出数据 (hEDT, DAT_HEAD.nBlockCount, DAT_HEAD.nEmptyBlockCount)
返回 (真)

.子程序 写备注, 逻辑型, 公开, 提示:返回假的原因与其他写入命令多了个edt文件损坏的可能
.参数 字段名, 文本型, , 
.参数 写入值, 文本型, , 

.局部变量 写入值_数据, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 DAT_HEAD, DAT_HEADER, , , 
.局部变量 BLOCK_HEAD, BLOCK_HEADER, , , 
.局部变量 ValueLen, 空白型, , , 
.局部变量 WriteBlockCount, 空白型, , , 
.局部变量 WriteIDList, 空白型, , "0", 

.如果真 (或者 (等于 (hFile, 0), 等于 (hEDT, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #备注型)))
    返回 (假)
.如果真结束
赋值 (写入值_数据, 到字节集 (写入值))
赋值 (ValueLen, 取字节集长度 (写入值_数据))
赋值 (WriteBlockCount, 整除 (ValueLen, 500))
.如果真 (不等于 (求余数 (ValueLen, 500), 0))
    赋值 (WriteBlockCount, 相加 (WriteBlockCount, 1))
.如果真结束
重定义数组 (WriteIDList, 假, WriteBlockCount)
移到文件首 (hEDT)
赋值 (bin, 读入字节集 (hEDT, 28))
.如果真 (不等于 (取字节集长度 (bin), 28))
    返回 (假)
.如果真结束
CopyTo_DAT_Header (DAT_HEAD, bin, 28)
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
读入数据 (hFile, BLOCK_HEAD.nNextBlockNO)
内部_edt节点配置 (DAT_HEAD, WriteIDList, BLOCK_HEAD.nNextBlockNO)
.如果 (不等于 (WriteBlockCount, 0))
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    写出数据 (hFile, WriteIDList [1])
    .计次循环首 (WriteBlockCount, i)
        赋值 (bin, 取字节集中间 (写入值_数据, 相加 (相乘 (相减 (i, 1), 500), 1), 500))
        移动读写位置 (hEDT, , 相加 (相乘 (WriteIDList [i], #BLK_SIZE), 8))
        写出数据 (hEDT, 取字节集长度 (bin))
        写出字节集 (hEDT, bin)
    .计次循环尾 ()
    .如果真 (不等于 (取字节集长度 (bin), 500))
        写出字节集 (hEDT, { 0 })
    .如果真结束
    
.否则
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    写出数据 (hFile, 0)
.如果结束
返回 (真)

.子程序 写字节集, 逻辑型, 公开, 与写备注相同,由于为了加快速度,写备注和写字节集都用了不置0字节的方式,所以如果用记事本打开edt时发现旧记录数据不要惊慌,这并不妨碍读写操作以及并不会出现文件体积只大不小的情况.
.参数 字段名, 文本型, , 
.参数 写入值, 字节集, , 

.局部变量 i, 空白型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 DAT_HEAD, DAT_HEADER, , , 
.局部变量 BLOCK_HEAD, BLOCK_HEADER, , , 
.局部变量 ValueLen, 空白型, , , 
.局部变量 WriteBlockCount, 空白型, , , 
.局部变量 WriteIDList, 空白型, , "0", 

.如果真 (或者 (等于 (hFile, 0), 等于 (hEDT, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
赋值 (i, 取字段名位置 (字段名))
.如果真 (或者 (等于 (i, 0), 不等于 (Field_Inf [i], nType, #字节集型)))
    返回 (假)
.如果真结束
赋值 (ValueLen, 取字节集长度 (写入值))
赋值 (WriteBlockCount, 整除 (ValueLen, 500))
.如果真 (不等于 (求余数 (ValueLen, 500), 0))
    赋值 (WriteBlockCount, 相加 (WriteBlockCount, 1))
.如果真结束
重定义数组 (WriteIDList, 假, WriteBlockCount)
移到文件首 (hEDT)
赋值 (bin, 读入字节集 (hEDT, 28))
.如果真 (不等于 (取字节集长度 (bin), 28))
    返回 (假)
.如果真结束
CopyTo_DAT_Header (DAT_HEAD, bin, 28)
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
读入数据 (hFile, BLOCK_HEAD.nNextBlockNO)
内部_edt节点配置 (DAT_HEAD, WriteIDList, BLOCK_HEAD.nNextBlockNO)
.如果 (不等于 (WriteBlockCount, 0))
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    写出数据 (hFile, WriteIDList [1])
    .计次循环首 (WriteBlockCount, i)
        赋值 (bin, 取字节集中间 (写入值, 相加 (相乘 (相减 (i, 1), 500), 1), 500))
        移动读写位置 (hEDT, , 相加 (相乘 (WriteIDList [i], #BLK_SIZE), 8))
        写出数据 (hEDT, 取字节集长度 (bin))
        写出字节集 (hEDT, bin)
    .计次循环尾 ()
.否则
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
    写出数据 (hFile, 0)
.如果结束
返回 (真)

.子程序 加空记录, 空白型, 公开, 
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (取记录数 (), 记录条长)))
插入字节集 (hFile, 取空白字节集 (记录条长))
赋值 (集_记录数, 相加 (集_记录数, 1))
内部_写记录数 (集_记录数)
赋值 (集_当前记录号, 集_记录数)

.子程序 删除, 逻辑型, 公开, 反复删除不会像易语言的删除一样可以恢复删除而只能删除
.局部变量 标签, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长)))
.如果真 (等于 (读入数据 (hFile, 标签), 假))
    返回 (假)
.如果真结束
移动读写位置 (hFile, #现行位置, -4)
返回 (写出数据 (hFile, 负 (取绝对值 (标签))))

.子程序 恢复删除, 逻辑型, 公开, 
.局部变量 标签, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (集_当前记录号, 0), 大于 (集_当前记录号, 取记录数 ())))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长)))
.如果真 (等于 (读入数据 (hFile, 标签), 假))
    返回 (假)
.如果真结束
移动读写位置 (hFile, #现行位置, -4)
返回 (写出数据 (hFile, 取绝对值 (标签)))

.子程序 彻底删除, 逻辑型, 公开, 同易命令执行完会移动到首记录
.局部变量 标签, 空白型, , , 
.局部变量 tmp, 空白型, , , 
.局部变量 i, 整数型, , , 
.局部变量 DAT_HEAD, DAT_HEADER, , , 
.局部变量 bin, 字节集, , , 
.局部变量 WriteIDList, 空白型, , "0", 
.局部变量 ThisID, 空白型, , , 

.如果真 (或者 (等于 (hFile, 0), 等于 (取记录数 (), 0)))
    返回 (假)
.如果真结束
.如果真 (不等于 (hEDT, 0))
    移到文件首 (hEDT)
    赋值 (bin, 读入字节集 (hEDT, 28))
    .如果真 (不等于 (取字节集长度 (bin), 28))
        返回 (假)
    .如果真结束
    CopyTo_DAT_Header (DAT_HEAD, bin, 28)
.如果真结束
.计次循环首 (集_记录数, 集_当前记录号)
    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长)))
    .如果真 (等于 (读入数据 (hFile, 标签), 假))
        返回 (假)
    .如果真结束
    .如果真 (小于 (标签, 0))
        .如果真 (不等于 (hEDT, 0))
            .计次循环首 (取数组成员数 (Field_Inf), i)
                .判断开始 (等于 (Field_Inf [i], nType, #备注型))
                    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
                    读入数据 (hFile, ThisID)
                    内部_edt节点配置 (DAT_HEAD, WriteIDList, ThisID)
                    移动读写位置 (hFile, #现行位置, -4)
                    写出数据 (hFile, 0)
                .判断 (等于 (Field_Inf [i], nType, #字节集型))
                    移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长), Field_Inf [i], nOffset))
                    读入数据 (hFile, ThisID)
                    内部_edt节点配置 (DAT_HEAD, WriteIDList, ThisID)
                    移动读写位置 (hFile, #现行位置, -4)
                    写出数据 (hFile, 0)
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
            
        .如果真结束
        移动读写位置 (hFile, , 相加 (首记录位置, 相乘 (相减 (集_当前记录号, 1), 记录条长)))
        删除数据 (hFile, 记录条长)
        赋值 (集_记录数, 相减 (集_记录数, 1))
    .如果真结束
    
    .如果真 (等于 (写出数据 (hFile, 取绝对值 (标签)), 假))
        内部_写记录数 (集_记录数)
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
内部_写记录数 (集_记录数)
到首记录 ()
返回 (真)

.子程序 清空, 逻辑型, 公开, 
.如果真 (等于 (hFile, 0))
    返回 (假)
.如果真结束
取记录数 ()
.如果真 (等于 (内部_写记录数 (0), 假))
    返回 (假)
.如果真结束
移动读写位置 (hFile, , 首记录位置)
.如果真 (并且 (等于 (删除数据 (hFile, 取文件长度 (hFile)), 假), 不等于 (集_记录数, 0)))
    内部_写记录数 (集_记录数)
    返回 (假)
.如果真结束
.如果真 (不等于 (hEDT, 0))
    移动读写位置 (hEDT, , 16)
    写出字节集 (hEDT, { 1, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 })
    移动读写位置 (hEDT, , #BLK_SIZE)
    删除数据 (hEDT, 取文件长度 (hEDT))
.如果真结束
返回 (真)


 ' 不属于任何一个程序集、类模块的函数：
