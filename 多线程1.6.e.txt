 ' 文件类型：未知类型

 ' 程序名称：多线程
 ' 程序描述：
 ' 程序作者：家范
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：QQ292459453
 ' 版本号：1.0
 ' 创建号：0.0



.常量 版权, "“





































--------------------------
版本 => 1.6

作者 => 家范

Q  Q => 292459453
--------------------------

”", , 
.常量 线程反馈_拨号, "2", 公开, 
.常量 线程反馈_任务完成, "1", 公开, 
.常量 , , , 
.常量 User_Agent_淘宝, "“Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11”", , 淘宝浏览器2.0 on Windows 7 x64：
.常量 User_Agent_猎豹, "“Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER”", , 猎豹浏览器2.0.10.3198 急速模式on Windows 7 x64：
.常量 , , , 
.常量 拨号状态_成功, "1", 公开, 
.常量 拨号状态_失败, "0", 公开, 
.常量 拨号状态_请勿同时拨号, "2", 公开, 
.常量 拨号状态_超时, "3", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库
 ' internet 707ca37322474f6ca841f0e224f4b620 2 0 互联网支持库




数据类型 许可证, 公开, 
    .成员 调试信息, 整数型, , , 
    .成员 锁计数, 整数型, , , 
    .成员 递归计数, 整数型, , , 
    .成员 拥有线程, 整数型, , , 
    .成员 锁信号量, 整数型, , , 
    .成员 自旋数, 整数型, , , 

数据类型 线程控制, , 
    .成员 任务总数, 整数型, , , 
    .成员 线程句柄, 整数型, , "1", 
    .成员 是否启动, 逻辑型, , , 
    .成员 剩余线程数, 整数型, , , 
    .成员 反馈标签, 标签, , , 
    .成员 许可证_收尾, 整数型, , , 线程销毁时调用
    .成员 许可证_计次, 整数型, , , 拨号的时候调用
    .成员 执行计次, 整数型, , , 记录任务执行次数
    .成员 次数换IP, 整数型, , , 每N次调用标签反馈事件换IP
    .成员 暂停, 逻辑型, , , 开启红灯等待线程累加
    .成员 线程累加, 整数型, , , 记录线程的累加次数是否达到总线程数

数据类型 子线程堆栈, , 
    .成员 线程ID, 整数型, , , 
    .成员 子线程ID, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 任务总数, 整数型, , , 
    .成员 调用地址, 整数型, , , 

数据类型 程序延时, , 
    .成员 成员_时间, 长整数型, , , 占用8个字节

数据类型 拨号配置, , 
    .成员 帐号, 文本型, , , 
    .成员 密码, 文本型, , , 
    .成员 宽带配置, 整数型, , , 
    .成员 回调子程序, 子程序指针, , , 
    .成员 超时_秒, 整数型, , , 
    .成员 拨号中, 逻辑型, , , 
    .成员 挂断延时拨号_秒, 整数型, , , 

.全局变量 全_线程控制, 线程控制, , "0", 

.DLL命令 _创建扩展线程, 整数型, "shlwapi.dll", "SHCreateThread", 公开, SHCreateThread
    .参数 线程地址, 整数型, , pfnThreadProc
    .参数 传递参数, 整数型, , pData，Any
    .参数 标志, 整数型, , dwFlags
    .参数 返回信息, 整数型, , pfnCallback

.DLL命令 _退出线程, 空白型, "", "ExitThread", 公开, 线程中使用
    .参数 句柄, 整数型, , 
    .参数 退出代码, 整数型, , 

.DLL命令 _创建线程, 整数型, "", "CreateThread", 公开, 创建线程返回线程句柄
    .参数 安全结构, 空白型, , 
    .参数 栈大小, 空白型, , 
    .参数 启动的函数, 空白型, , 
    .参数 参数, 空白型, , 
    .参数 启动标识, 空白型, , 4表示创建后挂起，0表示创建后立即运行
    .参数 线程ID, 空白型, 传址, 

.DLL命令 _恢复线程, 整数型, "", "ResumeThread", 公开, 恢复线程
    .参数 handle, 整数型, , 

.DLL命令 _暂停线程, 整数型, "", "SuspendThread", 公开, 暂停线程
    .参数 handle, 整数型, , 

.DLL命令 _设置线程优先级, 逻辑型, "", "SetThreadPriority", 公开, 设置线程优先级
    .参数 handle, 整数型, , 
    .参数 Priority, 整数型, , 

.DLL命令 _取线程优先级, 整数型, "", "GetThreadPriority", 公开, 取线程优先级
    .参数 handle, 整数型, , 

.DLL命令 _关闭线程句柄, 逻辑型, "", "CloseHandle", 公开, 
    .参数 线程句柄, 整数型, , 

.DLL命令 延时_, 空白型, "", "Sleep", 公开, 比精易的好用 一句 api 不占cpu  精易的 通过封装
    .参数 毫秒, 整数型, , 

.DLL命令 _等待对象, 整数型, "", "WaitForSingleObject", 公开, 等待线程运行完毕
    .参数 句柄, 整数型, , 
    .参数 毫秒, 整数型, , -1 无限等待

.DLL命令 _等待多个对象, 空白型, "", "WaitForMultipleObjects", 公开, 
    .参数 线程数, 整数型, , 
    .参数 句柄, 整数型, 数组, 
    .参数 是否等待, 逻辑型, , 
    .参数 毫秒, 整数型, , -1无限等待

.DLL命令 _删除许可证, 空白型, "", "DeleteCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _创建许可证, 空白型, "", "InitializeCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _进入许可区, 空白型, "", "EnterCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _退出许可区, 空白型, "kernel32", "LeaveCriticalSection", 公开, 
    .参数 许可证, 许可证, , 

.DLL命令 _结束线程, 整数型, "kernel32", "TerminateThread", 公开, 终止当前线程
    .参数 hThread, 整数型, , 指定要终止线程的句柄
    .参数 退出码, 整数型, 传址, 将用做被终止线程的退出码

.DLL命令 _原子变量递减, 长整数型, "kernel32", "InterlockedDecrement", 公开, 
    .参数 lpAddend, 整数型, 传址, 0

.DLL命令 _原子变量递增, 长整数型, "kernel32", "InterlockedIncrement", 公开, 
    .参数 操作的变量, 整数型, 传址, 0

.DLL命令 _取自身线程伪句柄, 整数型, "kernel32.dll", "GetCurrentThread", 公开, 获取当前线程的伪句柄

.DLL命令 _获取线程退出码, 整数型, "kernel32.dll", "GetExitCodeThread", 公开, 获取一个已中止线程的退出代码
    .参数 hThread, 整数型, , 想获取退出代码的一个线程的句柄
    .参数 lpExitCode, 整数型, , 用于装载线程退出代码的一个长整数变量。如线程尚未中断，则设为常数STILL_ACTIVE

.DLL命令 进程_绑定CPU, 逻辑型, "kernel32", "SetProcessAffinityMask", 公开, 
    .参数 进程句柄, 整数型, , 
    .参数 CPU核心, 整数型, , 与哪个CPU核心绑定

.DLL命令 线程_绑定CPU, 逻辑型, "", "SetThreadAffinityMask", 公开, 
    .参数 线程句柄, 空白型, , 
    .参数 CPU核心, 空白型, , 与哪个CPU核心绑定

.DLL命令 线程_取自身伪句柄, 整数型, "", "GetCurrentThread", 公开, 

.DLL命令 进程_取自身伪句柄, 整数型, "", "GetCurrentProcess", 公开, 

.DLL命令 CoInitialize, 整数型, "ole32", "CoInitialize", , 
    .参数 pvReserved, 整数型, , 0

.DLL命令 CoUninitialize, 整数型, "Ole32", "CoUninitialize", , 

.DLL命令 SetWaitableTimer, 整数型, "", "SetWaitableTimer", 公开, 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, 程序延时, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 CreateWaitableTimerA, 整数型, "", "CreateWaitableTimerA", 公开, 程序延时
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "MsgWaitForMultipleObjects", 公开, 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 CloseHandle, 逻辑型, "kernel32", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.程序集 程序集_线程, , , 

.子程序 子程序_线程模版, 空白型, , 
.参数 参_内存地址, 整数型, , 

.局部变量 局_工作序号, 整数型, , , 
.局部变量 局_内存堆栈, 子线程堆栈, , , 

 ' 写文本行 (局_内存地址, 到文本 (局_位置), 到文本 (局_子线程ID), 到文本 (参_线程数), 到文本 (参_任务数), 到文本 (参_是否需要调用winhttp对象), 到文本 (到整数 (参_工作子程序)))
 ' ---------------------------------------------------------------
 ' 初始化子线程配置
置入代码 ({ 219, 227 })
子程序_取数据 (参_内存地址, 局_内存堆栈)
释放内存 (参_内存地址)
 ' 调试输出 (局_内存堆栈.线程ID, 局_内存堆栈.子线程ID, 局_内存堆栈.线程数, 局_内存堆栈.任务总数, 局_内存堆栈.调用地址)
赋值 (局_工作序号, 局_内存堆栈.子线程ID)
 ' 调试输出 (局_工作序号)
 ' 返回 ()
 ' mov eax,dword ptr [ebp+8]

 ' mov ebx,[eax]
 ' mov dword ptr [ebp-0x4],ebx

 ' add eax,4
 ' mov ebx,[eax]
 ' mov dword ptr [ebp-0x8],ebx


 ' add eax,4
 ' mov ebx,[eax]
 ' mov dword ptr [ebp-0xc],ebx

 ' add eax,4
 ' mov ebx,[eax]
 ' mov dword ptr [ebp-0x10],ebx

 ' add eax,4
 ' mov ebx,[eax]
 ' mov dword ptr [ebp-0x14],ebx


 ' -----------------------------------------------------------------------
.循环判断首 ()
    调用子程序 (局_内存堆栈.调用地址, , , 局_工作序号)
    赋值 (局_工作序号, 相加 (局_工作序号, 局_内存堆栈.线程数))
    延时_ (10)
.循环判断尾 (小于或等于 (局_工作序号, 局_内存堆栈.任务总数))



未知支持库函数_3 (全_线程控制 [局_内存堆栈].线程ID, 许可证_收尾)
赋值 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 相减 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 1))
未知支持库函数_7 (全_线程控制 [局_内存堆栈].线程ID, 线程句柄 [局_内存堆栈].子线程ID)
.如果真 (等于 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 0))
    赋值 (全_线程控制 [局_内存堆栈].线程ID, 是否启动, 假)
    全_线程控制.调用反馈事件 ( [局_内存堆栈].线程ID, 反馈标签, 1, 局_内存堆栈.线程ID, )
.如果真结束
未知支持库函数_4 (全_线程控制 [局_内存堆栈].线程ID, 许可证_收尾)




.子程序 子程序_取数据, 空白型, , 
.参数 参_地址, 整数型, , 
.参数 子线程堆栈, 子线程堆栈, 参考, 

.局部变量 x1, 整数型, , , 
.局部变量 x2, 整数型, , , 
.局部变量 x3, 整数型, , , 
.局部变量 x4, 整数型, , , 
.局部变量 x5, 整数型, , , 

置入代码 ({ 139, 69, 8, 139, 24, 137, 93, 252, 131, 192, 4, 139, 24, 137, 93, 248, 131, 192, 4, 139, 24, 137, 93, 244, 131, 192, 4, 139, 24, 137, 93, 240, 131, 192, 4, 139, 24, 137, 93, 236 })
赋值 (子线程堆栈.线程ID, x1)
赋值 (子线程堆栈.子线程ID, x2)
赋值 (子线程堆栈.线程数, x3)
赋值 (子线程堆栈.任务总数, x4)
赋值 (子线程堆栈.调用地址, x5)


.子程序 子程序_线程模版_拨号版, 空白型, , 
.参数 参_内存地址, 整数型, , 

.局部变量 局_内存堆栈, 子线程堆栈, , , 
.局部变量 局_暂停, 逻辑型, , , 
.局部变量 局_工作序号, 整数型, , , 
.局部变量 局_达成要求的ID, 整数型, , , 
.局部变量 局_内存地址, 整数型, , , 

置入代码 ({ 219, 227 })
 ' 写文本行 (局_内存地址, 到文本 (局_位置), 到文本 (局_子线程ID), 到文本 (参_线程数), 到文本 (参_任务数), 到文本 (参_是否需要调用winhttp对象), 到文本 (到整数 (参_工作子程序)))
 ' ---------------------------------------------------------------
 ' 初始化子线程配置

子程序_取数据 (参_内存地址, 局_内存堆栈)
释放内存 (参_内存地址)
 ' 调试输出 (局_内存堆栈.线程ID, 局_内存堆栈.子线程ID, 局_内存堆栈.线程数, 局_内存堆栈.任务总数, 局_内存堆栈.调用地址)
 ' 局_工作序号 ＝ 局_内存堆栈.子线程ID
 ' 局_执行计次 ＝ 局_内存堆栈.子线程ID

.循环判断首 ()
    未知支持库函数_3 (全_线程控制 [局_内存堆栈].线程ID, 许可证_计次)
    赋值 (全_线程控制 [局_内存堆栈].线程ID, 执行计次, 相加 (全_线程控制 [局_内存堆栈].线程ID, 执行计次, 1))
    赋值 (局_工作序号, 全_线程控制 [局_内存堆栈].线程ID, 执行计次)
    
    .如果真 (等于 (求余数 (全_线程控制 [局_内存堆栈].线程ID, 执行计次, 全_线程控制 [局_内存堆栈].线程ID, 次数换IP), 0))
         ' 调试输出 (555555)
        
        .如果真 (等于 (全_线程控制 [局_内存堆栈].线程ID, 执行计次, 全_线程控制 [局_内存堆栈].线程ID, 次数换IP))
            调用子程序 (局_内存堆栈.调用地址, , , 局_内存堆栈.任务总数)
        .如果真结束
        
        赋值 (全_线程控制 [局_内存堆栈].线程ID, 暂停, 真)
        赋值 (局_内存地址, 申请内存 (取文本长度 (相加 (“(”, 到文本 (局_内存堆栈.线程数), “)[”, 到文本 (局_内存堆栈.线程ID), “]”)), 真))
        
        写到内存 (相加 (“(”, 到文本 (局_内存堆栈.线程数), “)[”, 到文本 (局_内存堆栈.线程ID), “]”), 局_内存地址, )
        未知支持库函数_0 (&子程序_判断线程是否累加完毕, 局_内存地址, )
        
        
        
    .如果真结束
    赋值 (局_暂停, 全_线程控制 [局_内存堆栈].线程ID, 暂停)
    未知支持库函数_4 (全_线程控制 [局_内存堆栈].线程ID, 许可证_计次)
    
    .如果真 (等于 (局_暂停, 真))
        赋值 (全_线程控制 [局_内存堆栈].线程ID, 线程累加, 相加 (全_线程控制 [局_内存堆栈].线程ID, 线程累加, 1))
        
    .如果真结束
    
    .如果真 (局_暂停)
        _暂停线程 (_取自身线程伪句柄 ())
    .如果真结束
    
    .如果真 (大于或等于 (局_工作序号, 局_内存堆栈.任务总数))
        跳出循环 ()
    .如果真结束
    
    调用子程序 (局_内存堆栈.调用地址, , , 局_工作序号)
    
    延时_ (10)
    赋值 (局_工作序号, 相加 (局_工作序号, 局_内存堆栈.线程数))
.循环判断尾 (小于 (局_工作序号, 局_内存堆栈.任务总数))


未知支持库函数_3 (全_线程控制 [局_内存堆栈].线程ID, 许可证_收尾)
赋值 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 相减 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 1))
未知支持库函数_7 (全_线程控制 [局_内存堆栈].线程ID, 线程句柄 [局_内存堆栈].子线程ID)
.如果真 (等于 (全_线程控制 [局_内存堆栈].线程ID, 剩余线程数, 0))
    赋值 (全_线程控制 [局_内存堆栈].线程ID, 是否启动, 假)
    全_线程控制.调用反馈事件 ( [局_内存堆栈].线程ID, 反馈标签, 1, 局_内存堆栈.线程ID, )
.如果真结束
未知支持库函数_4 (全_线程控制 [局_内存堆栈].线程ID, 许可证_收尾)

.子程序 子程序_判断线程是否累加完毕, 空白型, , 
.参数 参_内存地址, 整数型, , 

.局部变量 局_累加次数, 整数型, , , 
.局部变量 局_总线程数, 整数型, , , 
.局部变量 局_文本, 文本型, , , 
.局部变量 局_控制ID, 整数型, , , 
.局部变量 局_剩余线程, 整数型, , , 

 ' 调试输出 (11111111111)
赋值 (局_文本, 指针到文本 (参_内存地址))
释放内存 (参_内存地址)

赋值 (局_控制ID, 到数值 (文本_取中间文本 (局_文本, “[”, “]”)))
赋值 (局_总线程数, 到数值 (文本_取中间文本 (局_文本, “(”, “)”)))

.循环判断首 ()
    未知支持库函数_3 (全_线程控制 [局_控制ID], 许可证_计次)
    赋值 (局_剩余线程, 全_线程控制 [局_控制ID], 剩余线程数)
    赋值 (局_累加次数, 全_线程控制 [局_控制ID], 线程累加)
    未知支持库函数_4 (全_线程控制 [局_控制ID], 许可证_计次)
    
    .如果真 (大于或等于 (局_累加次数, 局_剩余线程))
        延时_ (10)
         ' 全_线程控制 [局_控制ID].暂停 ＝ 假
        赋值 (全_线程控制 [局_控制ID], 线程累加, 0)
        全_线程控制.调用反馈事件 ( [局_控制ID], 反馈标签, 2, 局_控制ID, )
        跳出循环 ()
    .如果真结束
    延时_ (10)
.循环判断尾 (真)

.子程序 线程_初始化COM库, 空白型, , 有时执行线程的时候，会自动关闭，此时，可以在多线程的程序里创建COM对象前先初始化，一个线程只能调用一次
CoInitialize (0)

.子程序 线程_取消COM库, 空白型, , 取消COM库的初始化，如果你在线程头部加入了 线程_初始化COM库 请在尾部加入此命令

CoUninitialize ()

.子程序 线程销毁, 空白型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
未知支持库函数_3 (全_线程控制 [参_ID], 许可证_收尾)
未知支持库函数_3 (全_线程控制 [参_ID], 许可证_计次)
.计次循环首 (局_次数, 局_计次)
    未知支持库函数_6 (全_线程控制 [参_ID], 线程句柄 [局_计次])
    未知支持库函数_7 (全_线程控制 [参_ID], 线程句柄 [局_计次])
.计次循环尾 ()
未知支持库函数_4 (全_线程控制 [参_ID], 许可证_计次)
未知支持库函数_4 (全_线程控制 [参_ID], 许可证_收尾)


.类模块 多线程, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 启动, 逻辑型, , 
.参数 参_线程数, 整数型, , 
.参数 参_任务数, 整数型, , 
.参数 参_工作子程序, 子程序指针, , 
.参数 参_ID, 整数型, 参考, 
.参数 参_反馈标签, 标签, , 标签反馈事件中传递的参数   参数一：工作状态   参数二：线程ID 
.参数 参_执行次数换IP, 整数型, 可空, 

.局部变量 局_位置, 整数型, , , 
.局部变量 局_内存数据, 文本型, , , 
.局部变量 局_任务个数, 整数型, , , 
.局部变量 局_余数, 整数型, , , 
.局部变量 局_子线程ID, 整数型, , , 
.局部变量 局_内存地址, 整数型, , , 
.局部变量 局_子程序指针, 子程序指针, , , 
.局部变量 a, 整数型, , , 


.如果真 (或者 (等于 (参_任务数, 0), 等于 (参_线程数, 0)))
     ' 当任务数为0 或线程数为0 则返回假不创建
    返回 (假)
.如果真结束

 ' 如果该线程ID 先前已经创建了 则不在创建 线程控制 直接读取之前的 线程控制
.如果 (并且 (小于或等于 (参_ID, 取数组成员数 (全_线程控制)), 大于 (参_ID, 0)))
    赋值 (局_位置, 参_ID)
    .如果真 (全_线程控制 [局_位置], 是否启动)
        返回 (假)
    .如果真结束
    
.否则
     ' 如果不存在 这里创建 线程控制
    赋值 (局_位置, 相加 (取数组成员数 (全_线程控制), 1))
    重定义数组 (全_线程控制, 真, 局_位置)
    赋值 (参_ID, 局_位置)
.如果结束

赋值 (全_线程控制 [局_位置], 是否启动, 真)
.如果真 (大于 (参_线程数, 参_任务数))
    赋值 (参_线程数, 参_任务数)
.如果真结束
重定义数组 (全_线程控制 [局_位置], 线程句柄, 假, 参_线程数)

 ' 分配线程任务数
赋值 (全_线程控制 [局_位置], 剩余线程数, 参_线程数)
赋值 (局_任务个数, 到整数 (相除 (参_任务数, 参_线程数)))
赋值 (局_余数, 求余数 (参_任务数, 参_线程数))

赋值 (全_线程控制 [局_位置], 反馈标签, 参_反馈标签)


.如果真 (等于 (全_线程控制 [局_位置], 许可证_收尾, 0))
    赋值 (全_线程控制 [局_位置], 许可证_收尾, 未知支持库函数_1 ())
.如果真结束

 ' 如果真 (是否为空 (参_执行次数换IP) ＝ 假 且 参_执行次数换IP ＞ 0)

 ' 需要线程里面处理 拨号

 ' 初始化线程任务配置
.如果真 (并且 (等于 (是否为空 (参_执行次数换IP), 假), 大于 (参_执行次数换IP, 0)))
    .如果真 (等于 (全_线程控制 [局_位置], 许可证_计次, 0))
        赋值 (全_线程控制 [局_位置], 许可证_计次, 未知支持库函数_1 ())
    .如果真结束
    
    .如果真 (大于 (参_线程数, 参_执行次数换IP))
        赋值 (参_线程数, 参_执行次数换IP)
        赋值 (全_线程控制 [局_位置], 剩余线程数, 参_线程数)
    .如果真结束
    
    赋值 (全_线程控制 [局_位置], 次数换IP, 参_执行次数换IP)
    
    赋值 (全_线程控制 [局_位置], 暂停, 假)
    赋值 (全_线程控制 [局_位置], 线程累加, 0)
    赋值 (全_线程控制 [局_位置], 执行计次, 0)
    
.如果真结束




.判断开始 (并且 (大于 (参_任务数, 参_执行次数换IP), 大于 (参_执行次数换IP, 0)))
    赋值 (局_子程序指针, &子程序_线程模版_拨号版)
.默认
    赋值 (局_子程序指针, &子程序_线程模版)
.判断结束


.计次循环首 (参_线程数, 局_子线程ID)
    赋值 (局_内存地址, 申请内存 (20, 真)) ' 4*5
    写到内存 (局_位置, 局_内存地址, 4)
    写到内存 (局_子线程ID, 相加 (局_内存地址, 4), 4)
    写到内存 (参_线程数, 相加 (局_内存地址, 8), 4)
    写到内存 (参_任务数, 相加 (局_内存地址, 12), 4)
    写到内存 (到整数 (参_工作子程序), 相加 (局_内存地址, 16), 4)
    未知支持库函数_0 (局_子程序指针, 局_内存地址, 全_线程控制 [局_位置], 线程句柄 [局_子线程ID]) ' _创建线程 (0, 0, 到整数 (&子程序_线程模版), 局_内存地址, 0, 0)
.计次循环尾 ()

返回 (真)

.子程序 暂停, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 


.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束

赋值 (全_线程控制 [参_ID], 暂停, 真)

赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    _暂停线程 (全_线程控制 [参_ID], 线程句柄 [局_计次])
    处理事件 ()
.计次循环尾 ()

返回 (真)


.子程序 恢复, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束
赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
赋值 (全_线程控制 [参_ID], 暂停, 假)
.计次循环首 (局_次数, 局_计次)
    .计次循环首 (10, )
        .如果真 (等于 (_恢复线程 (全_线程控制 [参_ID], 线程句柄 [局_计次]), 1))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    处理事件 ()
.计次循环尾 ()
返回 (真)

.子程序 取状态, 整数型, , 1.工作中 2.暂停 3.就绪 -1.不存在
.参数 参_ID, 整数型, , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (-1)
.如果真结束

.判断开始 (全_线程控制 [参_ID], 是否启动)
    .判断开始 (全_线程控制 [参_ID], 暂停)
        返回 (2)
    .默认
        返回 (1)
    .判断结束
    
.默认
    返回 (3)
.判断结束


.子程序 关闭句柄, 逻辑型, , 
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束


赋值 (局_次数, 取数组成员数 (全_线程控制 [参_ID], 线程句柄))
.计次循环首 (局_次数, 局_计次)
    未知支持库函数_7 (全_线程控制 [参_ID], 线程句柄 [局_计次])
.计次循环尾 ()
返回 (真)


.子程序 销毁, 逻辑型, , 一般不推荐使用
.参数 参_ID, 整数型, , 

.局部变量 局_次数, 整数型, , , 
.局部变量 局_计次, 整数型, , , 
.局部变量 局_句柄, 整数型, , , 

.如果真 (或者 (大于 (参_ID, 取数组成员数 (全_线程控制)), 小于或等于 (参_ID, 0)))
    返回 (假)
.如果真结束

.如果真 (等于 (全_线程控制 [参_ID], 是否启动, 假))
    返回 (假)
.如果真结束

未知支持库函数_0 (&线程销毁, 参_ID, 局_句柄)
_等待对象 (局_句柄, 5000)
未知支持库函数_7 (局_句柄)
返回 (真)

.子程序 修改换IP, 空白型, , 工作中修改
.参数 参_线程ID, 整数型, , 
.参数 参_次换IP, 整数型, , 

.如果真 (大于 (参_次换IP, 0))
    赋值 (全_线程控制 [参_线程ID], 次数换IP, 参_次换IP)
.如果真结束


.程序集 程序集3, , , 

.程序集变量 拨号配置, 拨号配置, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
.局部变量 a, 整数型, , , 

调试输出 (#版权)
 ' 置错误提示管理 (&子程序_错误处理)
 ' 载入 (窗口1, , 假)
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 


.子程序 程序_延时, 逻辑型, , 不占用cpu，窗口不卡死，不影响其它代码执行
.参数 延时间隔, 整数型, 可空, 1000毫秒 = 1秒  留空为无限等待
.参数 延时单位, 整数型, 可空, 默认为毫秒  0=毫秒  1=秒  2=分钟  3=小时

.局部变量 局_时间句柄, 整数型, , , 
.局部变量 局_时间, 程序延时, , , 

.判断开始 (并且 (等于 (延时单位, 0), 等于 (是否为空 (延时间隔), 真)))
    赋值 (延时单位, 相乘 (5000, 60, 60))
.判断 (等于 (延时单位, 0))
    赋值 (延时单位, 1)
.判断 (等于 (延时单位, 1))
    赋值 (延时单位, 1000)
.判断 (等于 (延时单位, 2))
    赋值 (延时单位, 相乘 (1000, 60))
.判断 (等于 (延时单位, 3))
    赋值 (延时单位, 相乘 (1000, 60, 60))
.默认
    
.判断结束
赋值 (局_时间.成员_时间, 相乘 (-10, 延时间隔, 1000, 延时单位))
赋值 (局_时间句柄, CreateWaitableTimerA (0, 假, 0))
SetWaitableTimer (局_时间句柄, 局_时间, 0, 0, 0, 假)
.判断循环首 (不等于 (MsgWaitForMultipleObjects (1, 局_时间句柄, 假, -1, 255), 0))
    处理事件 ()
.判断循环尾 ()
CloseHandle (局_时间句柄)
返回 (真)

.子程序 文本_取中间文本, 文本型, , 
.参数 参_源文本, 文本型, , 
.参数 参_左边, 文本型, , 
.参数 参_右边, 文本型, , 

.局部变量 局_左边, 整数型, , , 
.局部变量 局_右边, 整数型, , , 
.局部变量 局_文本, 文本型, , , 

赋值 (局_左边, 寻找文本 (参_源文本, 参_左边, , 假))
赋值 (局_右边, 寻找文本 (参_源文本, 参_右边, , 假))
赋值 (局_文本, 取文本中间 (参_源文本, 相加 (局_左边, 1), 相减 (局_右边, 局_左边)))
返回 (局_文本)


.子程序 线程_设置亲和性, 逻辑型, , 
返回 (进程_绑定CPU (-1, 1))


.子程序 自动拨号, 逻辑型, , 自动启动线程来拨号不卡UI  如果帐号信息不填写 则自动返回假 不执行拨号  但如果 已设置 线程ID  则会执行恢复线程
.参数 参_线程ID, 整数型, 可空, 如果不为空 开始时候会检测线程是否被暂停 如果没有则自动暂停线程  后执行拨号  最后自动恢复被暂停的线程   

.局部变量 多线程, 多线程, , , 
.局部变量 局_线程句柄, 整数型, , , 

调试输出 (“进入拨号”)
.如果真 (等于 (是否为空 (参_线程ID), 假))
    多线程.暂停 (参_线程ID)
    调试输出 (“线程已被暂停”)
.如果真结束


.如果真 (拨号配置.拨号中)
    调试输出 (“#拨号状态_请勿同时拨号”)
    调用子程序 (拨号配置.回调子程序, , , #拨号状态_请勿同时拨号)
    返回 (假)
.如果真结束

赋值 (拨号配置.拨号中, 真)
调试输出 (“进入拨号判断”)
.计次循环首 (10, )
    未知支持库函数_0 (&子程序_拨号, 参_线程ID, 局_线程句柄)
    .如果真 (大于 (局_线程句柄, 0))
        调试输出 (“已进入拨号”)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (等于 (局_线程句柄, 0))
    赋值 (拨号配置.拨号中, 假)
    多线程.恢复 (参_线程ID)
    调试输出 (“未进入拨号”)
    调用子程序 (拨号配置.回调子程序, , , #拨号状态_失败)
    返回 (假)
.如果真结束
未知支持库函数_7 (局_线程句柄)
返回 (真)

.子程序 子程序_拨号, 空白型, , 
.参数 参_线程ID, 整数型, , 如果填写  则自动恢复线程  失败的话不会恢复线程

.局部变量 局_时间, 整数型, , , 
.局部变量 多线程, 多线程, , , 

未知支持库函数_24 ()
.判断开始 (大于 (拨号配置.挂断延时拨号_秒, 0))
    延时_ (相乘 (拨号配置.挂断延时拨号_秒, 1000))
.默认
    延时_ (2000)
.判断结束

未知支持库函数_22 (相加 (“@”, 到文本 (拨号配置.宽带配置)), 拨号配置.帐号, 拨号配置.密码, 假, )
赋值 (局_时间, 取启动时间 ())
.循环判断首 ()
    处理事件 ()
    延迟 (2000)
    .如果真 (不等于 (拨号配置.超时_秒, 0))
        .如果真 (大于 (相除 (相减 (取启动时间 (), 局_时间), 1000), 拨号配置.超时_秒))
            赋值 (拨号配置.拨号中, 假)
            .如果真 (不等于 (到数值 (拨号配置.回调子程序), 0))
                调用子程序 (拨号配置.回调子程序, , , #拨号状态_超时)
            .如果真结束
            返回 ()
        .如果真结束
        
    .如果真结束
    
.循环判断尾 (等于 (通信测试 (“www.baidu.com”, 2000), -1))
赋值 (拨号配置.拨号中, 假)
延时_ (3000)
.如果真 (不等于 (到数值 (拨号配置.回调子程序), 0))
    调用子程序 (拨号配置.回调子程序, , , #拨号状态_成功)
.如果真结束

.如果真 (并且 (大于 (参_线程ID, 0), 小于或等于 (参_线程ID, 取数组成员数 (全_线程控制))))
    多线程.恢复 (参_线程ID)
.如果真结束


.子程序 文本_取出中间文本, 文本型, , 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
.参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
.参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。

.局部变量 局_前面文本位置, 整数型, , , 
.局部变量 局_后面文本位置, 整数型, , , 
.局部变量 局_前面文本, 文本型, , , 
.局部变量 局_后面文本, 文本型, , , 

赋值 (局_前面文本, 子文本替换 (前面文本, “#引号”, #引号, , , 真))
赋值 (局_后面文本, 子文本替换 (后面文本, “#引号”, #引号, , , 真))
赋值 (局_前面文本位置, 寻找文本 (欲取全文本, 局_前面文本, 起始搜寻位置, 是否不区分大小写))
.如果真 (不等于 (局_前面文本位置, -1))
    赋值 (局_前面文本位置, 相加 (局_前面文本位置, 取文本长度 (局_前面文本)))
.如果真结束
赋值 (局_后面文本位置, 寻找文本 (欲取全文本, 局_后面文本, 局_前面文本位置, 是否不区分大小写))
.如果真 (或者 (等于 (局_前面文本位置, -1), 等于 (局_后面文本位置, -1)))
    返回 (“”)
.如果真结束
返回 (取文本中间 (欲取全文本, 局_前面文本位置, 相减 (局_后面文本位置, 局_前面文本位置)))

.子程序 自动拨号_置拨号配置, 空白型, , 
.参数 参_帐号, 文本型, , 
.参数 参_密码, 文本型, , 
.参数 参_宽带配置, 整数型, 可空, 
.参数 参_回调子程序, 子程序指针, 可空, 回调子程序 该子程序必须有个参数（整数型） 该参数会接收两个参数，1.成功  0.失败   查考常量 #拨号状态_
.参数 参_超时_秒, 整数型, 可空, 为0 无限等待
.参数 参_挂断延时拨号_秒, 整数型, 可空, 当挂断后延时多少秒后才执行拨号,默认延时 2秒

赋值 (拨号配置.帐号, 参_帐号)
赋值 (拨号配置.密码, 参_密码)
赋值 (拨号配置.宽带配置, 参_宽带配置)
赋值 (拨号配置.回调子程序, 参_回调子程序)
赋值 (拨号配置.超时_秒, 参_超时_秒)
赋值 (拨号配置.挂断延时拨号_秒, 参_挂断延时拨号_秒)

.子程序 自动拨号__, 逻辑型, , 不会另启动线程，这个版本适合线程中拨号
.局部变量 多线程, 多线程, , , 

调试输出 (“进入拨号”)
.如果真 (拨号配置.拨号中)
    调试输出 (“#拨号状态_请勿同时拨号”)
    调用子程序 (拨号配置.回调子程序, , , #拨号状态_请勿同时拨号)
    返回 (假)
.如果真结束
子程序_拨号 (0)
返回 (真)


 ' 不属于任何一个程序集、类模块的函数：
