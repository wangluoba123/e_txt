 ' 文件类型：未知类型

 ' 程序名称：字节集模块
 ' 程序描述：增加三个字节集相关命令
“查看字节集”和“还原为字节集”
查看字节集可以将一串字节集用文本形式表示出来，极大地方便了调试字节集变量。
还原为字节集可以将默认的16进制文本转换成字节集。如“00BFAD00”可还原为
{0,191,173,0}

“字节集到十六进制”可以将字节集用系统标准16进制表示
 ' 程序作者：笨笨啊
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.1
 ' 创建号：0.0



.常量 十六进制, "0", , 
.常量 十进制, "1", , 
.常量 八进制, "2", , 
.常量 二进制, "3", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 变量, 字节集, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
赋值 (变量, 到字节集 (“我是笨笨”))
输出调试文本 (查看字节集 (变量))
赋值 (变量, 还原为字节集 (查看字节集 (变量), 假))
输出调试文本 (查看字节集 (变量))

.子程序 取十进制, 整数型, 公开, 将非十进制的标准格式文本转换成十进制整数值
.参数 欲转换的值, 文本型, , 欲转换的值，文本型！
.参数 数值类型, 整数型, 可空, 0，#十六进制；1，#十进制（默认）；2，#八进制；3，#二进制

.局部变量 s, 整数型, , , 最终结果
.局部变量 a, 整数型, , , 中间变量
.局部变量 b, 整数型, , , 中间变量
.局部变量 c, 文本型, , , 中间变量
.局部变量 d, 整数型, , , 中间变量

赋值 (欲转换的值, 到小写 (欲转换的值))
.如果真 (是否为空 ())
    赋值 (数值类型, 1)
.如果真结束
赋值 (s, 0)
.判断开始 (等于 (0))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (或者 (并且 (小于或等于 (取代码 (c, ), 取代码 (“f”, )), 大于或等于 (取代码 (c, ), 取代码 (“a”, ))), 并且 (小于或等于 (取代码 (c, ), 取代码 (“F”, )), 大于或等于 (取代码 (c, ), 取代码 (“A”, )))))
            .如果真 (并且 (大于或等于 (取代码 (c, ), 取代码 (“A”, )), 小于或等于 (取代码 (c, ), 取代码 (“F”, ))))
                赋值 (d, 相加 (相减 (取代码 (c, ), 取代码 (“A”, )), 10))
            .如果真结束
            .如果真 (并且 (大于或等于 (取代码 (c, ), 取代码 (“a”, )), 小于或等于 (取代码 (c, ), 取代码 (“f”, ))))
                赋值 (d, 相加 (相减 (取代码 (c, ), 取代码 (“a”, )), 10))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“9”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (16, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (1))
    赋值 (s, 到数值 (欲转换的值))
.默认
    
.判断结束
.判断开始 (等于 (2))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“7”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (8, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (3))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“1”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (2, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
返回 (s)

.子程序 还原为字节集, 字节集, 公开, 将一串十六进制文本还原为字节集
.参数 文本, 文本型, , 如“00BFAD00AFD4FD4F9E054F9FF91FC5FF2076FBAFDB071044”，或者是“{206,210,202,199}”之类
.参数 十六进制, 逻辑型, 可空, 如果未指明则为十六进制文本，如果为假则为十进制文本

.局部变量 字节集, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数组, 文本型, , "0", 

.如果真 (是否为空 (十六进制))
    赋值 (十六进制, 真)
    
.如果真结束
赋值 (字节集, {  })
赋值 (临时文本, 文本)
.如果 (十六进制)
    赋值 (临时文本, 子文本替换 (临时文本, “,”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “{”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “}”, , , , 真))
    .变量循环首 (1, 取文本长度 (文本), 2, i)
        赋值 (a, 取十进制 (取文本中间 (文本, i, 2), 0))
        赋值 (字节集, 相加 (字节集, 取字节集左边 (到字节集 (a), 1)))
    .变量循环尾 ()
.否则
    赋值 (临时文本, 子文本替换 (临时文本, “{”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “}”, , , , 真))
    赋值 (临时数组, 分割文本 (临时文本, “,”, ))
    .变量循环首 (1, 取数组成员数 (临时数组), 1, i)
        赋值 (a, 到数值 (临时数组 [i]))
        赋值 (字节集, 相加 (字节集, 取字节集左边 (到字节集 (a), 1)))
    .变量循环尾 ()
.如果结束
返回 (字节集)

.子程序 查看字节集, 文本型, 公开, 以文本表示字节集，适合于字节集的调试用
.参数 字节集, 字节集, , 要查看的字节集

.局部变量 i, 整数型, , , 
.局部变量 a, 文本型, , , 

.变量循环首 (1, 取字节集长度 (字节集), 1, i)
    赋值 (a, 相加 (a, “,”, 到文本 (取字节集数据 (取字节集中间 (字节集, i, 1), 3))))
.变量循环尾 ()
赋值 (a, 相加 (“{”, 取文本右边 (a, 相减 (取文本长度 (a), 1)), “}”))
返回 (a)

.子程序 字节集到十六进制, 文本型, 公开, 将字节集用16进制表示
.参数 字节集, 字节集, , 用于转换的字节集

.局部变量 返回值, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (返回值, “”)
赋值 (j, 取字节集长度 (字节集))
.变量循环首 (1, j, 1, i)
    赋值 (返回值, 相加 (返回值, 取十六进制文本 (取字节集数据 (取字节集中间 (字节集, i, 1), 3))))
.变量循环尾 ()
返回 (返回值)


 ' 不属于任何一个程序集、类模块的函数：
