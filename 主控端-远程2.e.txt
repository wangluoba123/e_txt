 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 1000
    高度 = 768
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 6316128 '  0x606060
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 3
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “远程桌面 - 主控端 - 王军 制作,我们的口号:集成也是种创新! QQ: 89006400”
    帮助文件名 = “”



.常量 GMEM_FIXED, "0", , 
.常量 软件说明, "“
　　　　　　远程桌面! V1.0――你的桌面我作主!

　　远程服务支持库例程,配合《易语言远程控制技术教程》之用.
　　远程控制实际上只要对桌面进行控制,基本上就没有什么问题了.
　　我们的口号:集成也是种创新!

　　一.软件简介:
　　这是一个将对方电脑桌面进行抓屏,查看的小软件,并且可用
鼠标控制受控端电脑,也可以使用快捷键,及输入文字.类似于QQ
的远程协助功能.

　　二.软件特点:
　　1.全面采用了远程服务支持库,支持大图片传输.
　　2.无论两台电脑的分辩率是否不一样,鼠标控制时,均能准确定位.
这个花了我很长时间搞.
　　3.可使用快捷键,及输入文字等功能.
　　4.可调节图像品质．
　　5.可设置传过来的是JPG,还是GIF.
　　6.可调节抓屏的间隔毫秒.
　　7.在内存中抓图像及压缩图象,以及在内存中转换图像放大还原图像,速度快.

　　三.软件使用:
　　运行于两台电脑之上,一台是你自己的主机,另一台是被控制的受控电脑.
　　1.将受控端给受控人使用.(必要时可设置受控端窗口隐藏.)
　　2.在自己的电脑上运行主控端,并且连接受控端IP.
　　3.大家注意正确使用,对于非法使用后出现的任何问题,均由你自己负责.

　　四.联系作者:
　　王军
　　QQ 89006400
　　EMAIL kindows@sina.com
　　http://www.eeeyyy.com
　　2007年10月”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 1 扩展界面支持库二
 ' Exmlrpc A36CFD538657479eBD7C0D287BBB3D95 1 2 远程服务支持库
 ' eImgConverter 8FA3AA46276847db8F28E57E7FB97B7F 1 0 图像格式转换支持库
 ' eCompress 7B68736E818E41c5A28B0AE4D43C128C 1 1 压缩解压支持库




数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 


.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus.dll", "GdipLoadImageFromFile", , 
    .参数 filename, 字节集, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus.dll", "GdipSaveImageToFile", , 
    .参数 image, 空白型, , 
    .参数 filename, 字节集, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 对象, 传址, 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 对象, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GlobalLock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 逻辑型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", , 
    .参数 uFlags, 空白型, , 
    .参数 dwBytes, 空白型, , 

.DLL命令 GetObjectPtr, 整数型, "", "lstrcpyn", , 
    .参数 lpString1, 对象, 传址, 
    .参数 lpString2, 对象, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 空白型, 传址, 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", , 
    .参数 hMem, 空白型, , 

.DLL命令 CreateStreamOnHGlobal_int, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 空白型, 传址, 

.DLL命令 GdipSaveImageToStream_int, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 空白型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 GetHGlobalFromStream_int, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 空白型, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipSaveImageToStream, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 对象, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 CopyMemory, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.窗口程序集 窗口程序集_客户端, , , 

.程序集变量 客户端, 未知类型0x30002, , , 
.程序集变量 发送的字节集, 字节集, , , 
.程序集变量 连接状态, 逻辑型, , , 
.程序集变量 左键, 逻辑型, , , 
.程序集变量 Token, 整数型, , , 
.程序集变量 ImageFormat, 整数型, , , 
.程序集变量 集_比例X, 小数型, , , 与对方屏幕的比例关系
.程序集变量 集_比例Y, 小数型, , , 与对方屏幕的比例关系
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 GpInput, GdiplusStartupInput, , , 

赋值 (GpInput.GdiplusVersion, 1)
GdiplusStartup (Token, GpInput, 0) ' 启动 GDI+
赋值 (ImageFormat, 5)
赋值 (., 读配置项 (相加 (取运行目录 (), “\远程桌面.INI”), “基本的”, “IP”, 转换为IP地址 (取主机名 ())))

.子程序 转换图像格式, 逻辑型, , 支持bmp、jpg、gif、tiff、png互转。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png
.参数 新图像, 字节集, 参考, 用于保存新图像的变量

.局部变量 Clsid, 字节集, , , 
.局部变量 pStr, 文本型, , , 
.局部变量 nLength, 整数型, , , 
.局部变量 hMem, 整数型, , , 
.局部变量 Stream, 对象, , , 
.局部变量 lpvoid, 整数型, , , 
.局部变量 pStream, 整数型, , , 
.局部变量 bitmap, 整数型, , , 
.局部变量 DataStream, 对象, , , 
.局部变量 hMemDataStream, 整数型, , , 
.局部变量 pDataStream, 整数型, , , 
.局部变量 nStreamSize, 整数型, , , 
.局部变量 bRet, 逻辑型, , , 

.判断开始 (等于 (转换格式, 1)) ' bmp
    赋值 (pStr, “{557CF400-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 2)) ' jpg
    赋值 (pStr, “{557CF401-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 3)) ' gif
    赋值 (pStr, “{557CF402-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 4)) ' tiff
    赋值 (pStr, “{557CF405-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 5)) ' png
    赋值 (pStr, “{557CF406-1A04-11D3-9A73-0000F81EF32E}”)
.默认
    
.判断结束
赋值 (Clsid, 取空白字节集 (16))
CLSIDFromString (A2W (pStr), Clsid) ' 获取图像格式对应的Clsid

赋值 (nLength, 取字节集长度 (图像数据))
赋值 (hMem, GlobalAlloc (#GMEM_FIXED, nLength)) ' 申请内存
CreateStreamOnHGlobal (hMem, 真, Stream) ' 创建流对象
赋值 (lpvoid, GlobalLock (hMem)) ' 锁定该区域，获得存放数据的地址
写到内存 (图像数据, lpvoid, nLength) ' 把数据写到流里面
GlobalUnlock (hMem) ' 取消锁定
赋值 (pStream, GetObjectPtr (Stream, Stream, 0)) ' 获得流对象指针
GdipCreateBitmapFromStream (取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1), bitmap) ' 创建位图对象

CreateStreamOnHGlobal (0, 真, DataStream)
赋值 (pStream, GetObjectPtr (DataStream, DataStream, 0))
赋值 (pStream, 取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1))
GdipSaveImageToStream_int (bitmap, pStream, Clsid, 0) ' 这里是图像格式转换的关键。把位图按指定格式保存到数据流里面
GetHGlobalFromStream_int (pStream, hMemDataStream) ' 获得数据流句柄
赋值 (pDataStream, GlobalLock (hMemDataStream)) ' 获得数据指针
赋值 (nStreamSize, GlobalSize (hMemDataStream)) ' 获取数据大小
.如果真 (不等于 (pDataStream, 0))
    赋值 (新图像, 取空白字节集 (nStreamSize))
    CopyMemory (新图像, pDataStream, nStreamSize) ' 复制到字节集里
    赋值 (bRet, 真)
.如果真结束
 ' 别忘记下面释放资源的函数，否则造成内存泄漏
GlobalUnlock (hMemDataStream)
GdipDisposeImage (bitmap)
GlobalFree (hMem)
返回 (bRet)

.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 

.局部变量 缓冲区, 字节集, , , 
.局部变量 缓冲区大小, 整数型, , , 

赋值 (缓冲区大小, 相乘 (MultiByteToWideChar (0, 0, 欲转换的文本, -1, {  }, 0), 2))
赋值 (缓冲区, 取空白字节集 (缓冲区大小))
MultiByteToWideChar (0, 0, 欲转换的文本, 取文本长度 (欲转换的文本), 缓冲区, 缓冲区大小)
返回 (缓冲区)

.子程序 _按钮_连接_被单击, 空白型, , 
.如果真 (等于 (.标题, “断开”))
    客户端.未知支持库函数_16 ()
    赋值 (.标题, “未连接”)
    赋值 (连接状态, 假)
    赋值 (.底图, .底图)
    赋值 (.标题, “连接”)
    返回 ()
.如果真结束
.如果真 (或者 (等于 (., “”), 等于 (.内容, “”)))
    返回 ()
.如果真结束
.如果真 (客户端.未知支持库函数_15 (到数值 (.内容), ., 假, &中心_数据到达处理))
    赋值 (连接状态, 真)
    赋值 (.内容, “100”)
    赋值 (.标题, “已连接”)
    赋值 (.标题, “断开”)
    赋值 (集_比例X, 0)
    赋值 (集_比例Y, 0)
    客户端.未知支持库函数_20 (到字节集 (相加 (“名称”, 取主机名 ()))) ' 远程服务有握手的过程,哈哈!
    返回 ()
.如果真结束
赋值 (连接状态, 假)

.子程序 中心_数据到达处理, 空白型, , 
.参数 消息地址, 整数型, , 

.局部变量 数据包, 字节集, , , 
.局部变量 头部标识, 文本型, , , 
.局部变量 实际图像数据, 字节集, , , 实际图像数据
.局部变量 文件号, 整数型, , , 
.局部变量 压缩字集ZIP, 未知类型0x50001, , , 
.局部变量 新图像数据, 字节集, , , BMP图像数据

客户端.未知支持库函数_22 (消息地址, 数据包)
赋值 (头部标识, 到文本 (取字节集左边 (数据包, 4)))
赋值 (实际图像数据, 取字节集右边 (数据包, 相减 (取字节集长度 (数据包), 4)))

.判断开始 (等于 (客户端.未知支持库函数_24 (消息地址), 0)) ' 服务器关闭或者与客户的连接意外断开返回0
    赋值 (.标题, “重新连接”)
    客户端.未知支持库函数_16 ()
    赋值 (连接状态, 假)
    赋值 (.标题, “未连接”)
    返回 ()
.判断 (等于 (客户端.未知支持库函数_24 (消息地址), 1)) ' 如果客户端接收到数据返回1
    赋值 (连接状态, 真)
    赋值 (.标题, “已连接”)
.判断 (等于 (客户端.未知支持库函数_24 (消息地址), -1)) ' 出错返回-1
    赋值 (.标题, “重新连接”)
    客户端.未知支持库函数_16 ()
    赋值 (连接状态, 假)
    返回 ()
.默认
    
.判断结束

.判断开始 (等于 (头部标识, “握手”))
    客户端.未知支持库函数_20 (到字节集 (“握手”)) ' 远程服务第一次连接必须有握手的过程,哈哈!
    返回 ()
.判断 (等于 (头部标识, “图像”)) ' 传过来的是图像
     ' 第一次传过来图像,找到对方屏幕与我方屏幕之间的比例关系.
    .如果真 (或者 (等于 (集_比例X, 0), 等于 (集_比例Y, 0)))
        .如果 (转换图像格式 (实际图像数据, 1, 新图像数据))
            输出调试文本 (“内存转换成功!”)
        .否则
            输出调试文本 (“内存转换失败!”)
        .如果结束
        赋值 (集_比例X, 取字节集数据 (取字节集中间 (新图像数据, 19, 4), #整数型, ))
        赋值 (集_比例Y, 取字节集数据 (取字节集中间 (新图像数据, 23, 4), #整数型, ))
        输出调试文本 (相加 (“X=”, 到文本 (集_比例X), “  Y=”, 到文本 (集_比例Y)))
        赋值 (集_比例X, 相除 (集_比例X, 取屏幕宽度 ()))
        赋值 (集_比例Y, 相除 (集_比例Y, 取屏幕高度 ()))
        输出调试文本 (相加 (“X=”, 到文本 (集_比例X), “  Y=”, 到文本 (集_比例Y), “X=”, 到文本 (取屏幕宽度 ()), “Y=”, 到文本 (取屏幕高度 ())))
    .如果真结束
    .如果真 (等于 (.选中, 真))
        赋值 (.底图, 实际图像数据) ' 画板显示JPG图片
    .如果真结束
     ' ===============================================
    .如果真 (等于 (.选中, 真))
        赋值 (.图片, 实际图像数据) ' 图片框显示JPG图片
    .如果真结束
     ' ===============================================
     ' .如果真 (等于 (.选中, 真))
         ' =============下面只用第一行代码,结果太闪了!加上第二行代码,结果不显示===========
         ' 图片框1.图片 ＝ 实际图像数据  ' 显示JPG图片
         ' 画板1.底图 ＝ 图片框1.图片
         ' =============下面取出的图片还是JPG格式的,不行哎!==================================
         ' 画板2.底图 ＝ 实际图像数据
         ' 画板1.底图 ＝ 画板2.取图片 (取屏幕宽度 (), 取屏幕高度 ())
         ' 由于未显示原图像,因此也不会显示,取图片命令相当于快照.
         ' ==============下面代码,由于未显示原图像,因此也不会显示,取图片命令相当于快照,需要组件显示的.=================================
         ' 画板2.移动 (0, 0, 取屏幕宽度 () × 到数值 (编辑框_品质) ÷ 100, 取屏幕高度 () × 到数值 (编辑框_品质) ÷ 100)
         ' 画板2.底图 ＝ 实际图像数据
         ' 画板1.底图 ＝ 画板2.取图片 (取屏幕宽度 (), 取屏幕高度 ())
         ' ==============下面用自定义子程序缩放图片,但由于还是JPG图片,数据不对,所以缩放失败=================================
         ' 图片框1.图片 ＝ 实际图像数据  ' 显示JPG图片
         ' 信息框 (100 ÷ 到数值 (编辑框_品质.内容) × 100, 0, )
         ' 画板1.底图 ＝ 比例缩放 (图片框1.图片, 100 ÷ 到数值 (编辑框_品质.内容) × 100, 100 ÷ 到数值 (编辑框_品质.内容) × 100)
    .如果真结束
     ' ===============下面用转换支持库,将JPG图片转换为BMP图片,但转换非常慢,不显示================================
     ' .如果真 (等于 (.选中, 真))
         ' .如果真 (等于 (写到文件 (“TEMP.JPG”, 实际图像数据), 假))
             ' 输出调试文本 (“写出传过来的图像到文件失败!”)
        .如果真结束
         ' .如果真 (不等于 (未知支持库函数_1 (“TEMP.JPG”, “TEMP.BMP”), 1))
             ' 输出调试文本 (“转换已存的图像文件到BMP文件失败!”)
        .如果真结束
         ' 关闭文件 (文件号)
         ' 文件号 ＝ 载入图片 (“TEMP.BMP”)
         ' .如果 (等于 (文件号, 0))
             ' 输出调试文本 (“打开转换后的BMP图像文件失败!”)
        .否则
             ' 画板2.画图片 (文件号, 0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
        .如果结束
        
    .如果真结束
     ' ============下面测试JPG图片能否在组件中转换为BMP图片,结果不行===================================
     ' .如果真 (等于 (.选中, 真))
         ' 画板1.底图 ＝ 实际图像数据  ' 显示JPG图片为BMP图片
         ' 写到文件 (“TEMP.BMP”, 画板1.底图)
         ' 文件号 ＝ 打开文件 (“TEMP.BMP”, , )
         ' 画板2.画图片 (文件号, 0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
    .如果真结束
     ' ============下面是BMP压缩方式,但压缩解压时间太长,不显示====================================
     ' .如果真 (等于 (.选中, 真))
         ' 写到文件 (“TEMP.BMP”, 解压数据 (实际图像数据))
         ' 文件号 ＝ 打开文件 (“TEMP.BMP”, , )
         ' 画板2.画图片 (文件号, 0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
    .如果真结束
     ' ============下面是ZIP压缩方式,但压缩解压时间太长,不显示==================================
     ' .如果真 (等于 (.选中, 真))
         ' 写到文件 (“TEMP.ZIP”, 解压数据 (实际图像数据))
         ' 压缩字集ZIP.解压 (“TEMP.ZIP”, 取运行目录 ())
         ' 文件号 ＝ 打开文件 (“TEMP.BMP”, , )
         ' 画板2.画图片 (文件号, 0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
    .如果真结束
     ' ============下面用位图支持库,取得图片框中JPG的图像数据到位图BMP中,再在画板中显示出来,想了一下,不行,哈哈==================================
     ' ============下面还是用在内存中转换JPG格式的方法,将JPG转换到BMP格式======================
    .如果真 (等于 (.选中, 真))
        .如果 (转换图像格式 (实际图像数据, 1, 新图像数据))
            输出调试文本 (“内存转换成功!”)
        .否则
            输出调试文本 (“内存转换失败!”)
        .如果结束
        关闭文件 (文件号)
        赋值 (文件号, 载入图片 (新图像数据)) ' 这里一定要用"载入图片()"命令,不能用"载入文件()"命令!!!
        输出调试文本 (相加 (“文件号:”, 到文本 (文件号)))
        文件号.画图片 (0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
        关闭文件 (文件号)
    .如果真结束
    
.判断 (等于 (头部标识, “消息”)) ' 传过来的是消息
    信息框 (到文本 (实际图像数据), 0, “主控端”) ' 显示JPG图片
.判断 (等于 (取文本左边 (到大写 (到文本 (数据包)), 3), “JPG”)) ' 改为JPG转送
    赋值 (.选中, 真)
    赋值 (.选中, 假)
.判断 (等于 (取文本左边 (到大写 (到文本 (数据包)), 3), “GIF”)) ' 改为GIF转送
    赋值 (.选中, 假)
    赋值 (.选中, 真)
.默认
    
.判断结束


.子程序 比例缩放, 字节集, 公开, 
.参数 源图像, 字节集, 参考, 
.参数 X比例, 整数型, 参考, 本参数为0时，默认100
.参数 Y比例, 整数型, 参考, 本参数为0时，默认100

.局部变量 新图像, 字节集, , , 
.局部变量 实际数宽, 整数型, , , 
.局部变量 数据大小, 整数型, , , 
.局部变量 新文件大小, 整数型, , , 
.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 当前行, 整数型, , , 
.局部变量 当前列, 整数型, , , 
.局部变量 行首点, 整数型, , , 
.局部变量 新当前列, 整数型, , , 
.局部变量 新行首点, 整数型, , , 
.局部变量 新数据大小, 整数型, , , 
.局部变量 新当前行, 整数型, , , 
.局部变量 新实际数宽, 整数型, , , 
.局部变量 纠正位, 整数型, , , 
.局部变量 宽度1, 整数型, , , 
.局部变量 高度1, 整数型, , , 

.如果真 (等于 (X比例, 0))
    赋值 (X比例, 100)
.如果真结束
.如果真 (等于 (Y比例, 0))
    赋值 (Y比例, 100)
.如果真结束
.如果真 (并且 (等于 (X比例, 100), 等于 (Y比例, 100)))
    返回 (源图像)
.如果真结束
赋值 (宽度1, 取字节集数据 (取字节集中间 (源图像, 19, 4), #整数型, ))
赋值 (高度1, 取字节集数据 (取字节集中间 (源图像, 23, 4), #整数型, ))
赋值 (数据大小, 取字节集数据 (取字节集中间 (源图像, 35, 4), #整数型))
赋值 (实际数宽, 相除 (数据大小, 高度1))

赋值 (新宽度, 取整 (相除 (相乘 (宽度1, X比例), 100)))
赋值 (新高度, 取整 (相除 (相乘 (高度1, Y比例), 100)))
赋值 (纠正位, 选择 (等于 (求余数 (相乘 (新宽度, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (新宽度, 3), 4))))
赋值 (新数据大小, 相乘 (新高度, 相加 (相乘 (新宽度, 3), 纠正位)))
赋值 (新实际数宽, 相除 (新数据大小, 新高度))

赋值 (新图像, 相加 (取字节集左边 (源图像, 54), 取空白字节集 (新数据大小)))
赋值 (新文件大小, 取字节集长度 (新图像))
.变量循环首 (0, 相减 (新高度, 1), 1, 新当前行)
    赋值 (行首点, 相加 (相乘 (取整 (相乘 (相除 (新当前行, Y比例), 100)), 实际数宽), 55))
    赋值 (新行首点, 相加 (相乘 (新当前行, 新实际数宽), 55))
    .变量循环首 (0, 相减 (相乘 (新宽度, 3), 1), 3, 新当前列)
        赋值 (当前列, 相乘 (取整 (相乘 (相除 (新当前列, 3, X比例), 100)), 3))
        
        赋值 (新图像 [相加 (新行首点, 新当前列)], 源图像 [相加 (行首点, 当前列)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 1)], 源图像 [相加 (行首点, 当前列, 1)])
        
        赋值 (新图像 [相加 (新行首点, 新当前列, 2)], 源图像 [相加 (行首点, 当前列, 2)])
    .变量循环尾 ()
.变量循环尾 ()
赋值 (新图像, 字节集替换 (新图像, 3, 4, 到字节集 (新文件大小)))
赋值 (新图像, 字节集替换 (新图像, 19, 4, 到字节集 (新宽度)))
赋值 (新图像, 字节集替换 (新图像, 23, 4, 到字节集 (新高度)))
赋值 (新图像, 字节集替换 (新图像, 35, 4, 到字节集 (新数据大小)))

返回 (新图像)


.子程序 _滑块条1_位置被改变, 空白型, , 
赋值 (.内容, 到文本 (.位置))


.子程序 _按钮_开始监控_被单击, 空白型, , 
赋值 (_启动窗口., 0)
.如果真 (等于 (连接状态, 真))
    .如果 (等于 (客户端.未知支持库函数_20 (到字节集 (相加 (“远控”, 到文本 (.内容)))), 真))
        赋值 (_启动窗口., “异步发送字节集成功”)
    .否则
        信息框 (“异步发送字节集失败”, 0, )
    .如果结束
    .如果 (等于 (客户端.未知支持库函数_20 (到字节集 (相加 (“毫秒”, 到文本 (.内容)))), 真))
        赋值 (_启动窗口., “异步发送字节集成功”)
    .否则
        信息框 (“异步发送字节集失败”, 0, )
    .如果结束
    
.如果真结束


.子程序 _编辑框1_内容被改变, 空白型, , 
.如果真 (等于 (连接状态, 真))
    客户端.未知支持库函数_20 (到字节集 (相加 (“毫秒”, 到文本 (.内容))))
.如果真结束


.子程序 _标签_我作主_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

161.发送信息 (2, 0)

.子程序 __启动窗口_尺寸被改变, 空白型, , 
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())

.子程序 _单选框_JPG_被单击, 空白型, , 
.如果 (等于 (客户端.未知支持库函数_20 (到字节集 (“JPG”)), 真))
    赋值 (_启动窗口., “异步发送字节集成功”)
.否则
     ' 信息框 (“异步发送字节集失败”, 0, )
.如果结束


.子程序 _单选框_GIF_被单击, 空白型, , 
.如果 (等于 (客户端.未知支持库函数_20 (到字节集 (“GIF”)), 真))
    赋值 (_启动窗口., “异步发送字节集成功”)
.否则
     ' 信息框 (“异步发送字节集失败”, 0, )
.如果结束


.子程序 _画板1_鼠标左键被按下, 逻辑型, , 左按,左放,右按,右放,鼠移,放键,输字
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “左按”)


.子程序 _画板1_鼠标左键被放开, 逻辑型, , 左放+3个参数!F!
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “左放”)


.子程序 _画板1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “双击”)


.子程序 _画板1_鼠标右键被按下, 逻辑型, , 右按
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “右按”)


.子程序 _画板1_鼠标右键被放开, 逻辑型, , 右放
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “右放”)


.子程序 _画板1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

发送鼠标信息 (横向位置, 纵向位置, 功能键状态, “鼠移”)

赋值 (.标题, 相加 (“鼠移”, 到文本 (相除 (相乘 (横向位置, 100), 到数值 (.内容))), “,”, 到文本 (相除 (相乘 (纵向位置, 100), 到数值 (.内容))), “  ”, 到文本 (横向位置), “!”, 到文本 (纵向位置)))


.子程序 _画板1_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 分割符, 文本型, , , 

.如果真 (等于 (.选中, 真))
    赋值 (分割符, “,”)
    .如果 (或者 (不等于 (键代码, 0), 不等于 (功能键状态, 0)))
        .如果真 (等于 (功能键状态, 1))
            赋值 (功能键状态, 17)
        .如果真结束
        .如果真 (等于 (功能键状态, 2))
            赋值 (功能键状态, 16)
        .如果真结束
        .如果真 (等于 (功能键状态, 4))
            赋值 (功能键状态, 18)
        .如果真结束
        客户端.未知支持库函数_20 (到字节集 (相加 (“放键”, 到文本 (键代码), “,”, 到文本 (功能键状态))))
         ' 时钟1.时钟周期 ＝ 500
    .否则
        
    .如果结束
    
.如果真结束



.子程序 _编辑框_发送文字_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    .如果真 (等于 (.选中, 真))
        客户端.未知支持库函数_20 (到字节集 (相加 (“输字”, .内容)))
    .如果真结束
    获取焦点 ()
.如果真结束


.子程序 _按钮_发送文字_被单击, 空白型, , 
.如果真 (等于 (.选中, 真))
    客户端.未知支持库函数_20 (到字节集 (相加 (“输字”, .内容)))
.如果真结束
获取焦点 ()


.子程序 _按钮_结束_被单击, 空白型, , 
写配置项 (相加 (取运行目录 (), “\远程桌面.INI”), “基本的”, “IP”, .)
信息框 (#软件说明, 0, )
结束 ()

.子程序 _编辑框_品质_内容被改变, 空白型, , 
.如果 (等于 (客户端.未知支持库函数_20 (到字节集 (相加 (“品质”, 到文本 (.内容)))), 真))
    赋值 (.宽度, 相除 (相乘 (取屏幕宽度 (), 到数值 (.内容)), 100))
    赋值 (.高度, 相除 (相乘 (取屏幕高度 (), 到数值 (.内容)), 100))
    赋值 (.标题, 相加 (“异步发送字节集成功:”, “品质”, 到文本 (.内容)))
.否则
    赋值 (.标题, 相加 (“异步发送字节集失败:”, “品质”, 到文本 (.内容)))
.如果结束


.子程序 _标签_对方IP_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 转换为IP地址 (取主机名 ()))


.子程序 _单选框_画板_被单击, 空白型, , 
赋值 (.底图, {  })
赋值 (.可视, 真)
赋值 (.可视, 假)
赋值 (.可视, 假)


.子程序 _单选框_图片框_被单击, 空白型, , 
赋值 (.图片, {  })
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (.可视, 真)


.子程序 _单选框_试_被单击, 空白型, , 
赋值 (.底图, {  })
赋值 (.可视, 假)
赋值 (.可视, 真)
0.移动 (0, 取屏幕宽度 (), 取屏幕高度 ())
赋值 (.可视, 假)


.子程序 _图片框1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标左键被按下 (横向位置, 纵向位置, 功能键状态)


.子程序 _图片框1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标左键被放开 (横向位置, 纵向位置, 功能键状态)


.子程序 _图片框1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_被双击 (横向位置, 纵向位置, 功能键状态)


.子程序 _图片框1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)


.子程序 _图片框1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标右键被放开 (横向位置, 纵向位置, 功能键状态)


.子程序 _图片框1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标位置被移动 (横向位置, 纵向位置, 功能键状态)


.子程序 _按钮_发送文字_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 文件号, 整数型, , , 

赋值 (.可视, 真)
赋值 (.可视, 假)
赋值 (.可视, 假)
赋值 (文件号, 载入图片 (“TEMP.BMP”))
文件号.画图片 (0, 0, 取屏幕宽度 (), 取屏幕高度 (), )
关闭文件 (文件号)


.子程序 _画板2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标左键被按下 (横向位置, 纵向位置, 功能键状态)


.子程序 _画板2_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标左键被放开 (横向位置, 纵向位置, 功能键状态)


.子程序 _画板2_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_被双击 (横向位置, 纵向位置, 功能键状态)


.子程序 _画板2_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标右键被按下 (横向位置, 纵向位置, 功能键状态)


.子程序 _画板2_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标右键被放开 (横向位置, 纵向位置, 功能键状态)


.子程序 _画板2_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板1_鼠标位置被移动 (横向位置, 纵向位置, 功能键状态)


.子程序 发送鼠标信息, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 
.参数 信息, 文本型, , 

.如果真 (.选中)
     ' 下面改为全部发送比例数据,在客户端处还原真实坐标的方法
    .如果 (等于 (.选中, 真))
        .如果 (客户端.未知支持库函数_20 (到字节集 (相加 (信息, 到文本 (相除 (相乘 (横向位置, 100), 到数值 (.内容))), “,”, 到文本 (相除 (相乘 (纵向位置, 100), 到数值 (.内容))), “,”, 到文本 (功能键状态)))))
            赋值 (_启动窗口., “异步发送字节集成功!”)
        .否则
            赋值 (_启动窗口., “异步发送字节集失败!”)
        .如果结束
        
    .否则
        
        .如果 (等于 (客户端.未知支持库函数_20 (到字节集 (相加 (信息, 到文本 (相乘 (横向位置, 集_比例X)), “,”, 到文本 (相乘 (纵向位置, 集_比例Y)), “,”, 到文本 (功能键状态)))), 真))
            赋值 (_启动窗口., “异步发送字节集成功!”)
        .否则
            赋值 (_启动窗口., “异步发送字节集失败!”)
        .如果结束
        
    .如果结束
    返回 ()
     ' 下面是完全发送坐标的代码,在两台电脑相同分辨率情况下还行,在不同分辨率下有严重对应的问题.
    .如果 (或者 (等于 (到数值 (.内容), 100), 等于 (.选中, 假)))
        .如果 (客户端.未知支持库函数_20 (到字节集 (相加 (信息, 到文本 (横向位置), “,”, 到文本 (纵向位置), “,”, 到文本 (功能键状态)))))
            赋值 (_启动窗口., “异步发送字节集成功!”)
        .否则
            赋值 (_启动窗口., “异步发送字节集失败!”)
        .如果结束
        
    .否则
        .如果 (等于 (客户端.未知支持库函数_20 (到字节集 (相加 (信息, 到文本 (相除 (相乘 (横向位置, 100), 到数值 (.内容))), “,”, 到文本 (相除 (相乘 (纵向位置, 100), 到数值 (.内容))), “,”, 到文本 (功能键状态)))), 真))
            赋值 (_启动窗口., “异步发送字节集成功!”)
        .否则
            赋值 (_启动窗口., “异步发送字节集失败!”)
        .如果结束
        
    .如果结束
    
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
