 ' 文件类型：Windows模块源码

 ' 程序名称：易语言皮肤模块
 ' 程序描述：易语言皮肤模块
@备注:
易语言皮肤模块
 ' 程序作者：智圆行方
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：不得利用本模块进行商业用途（包括引用本模块开发共享软件！）
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 637
    高度 = 310
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “示范窗口”
    帮助文件名 = “”

窗口 窗口2
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “示范载入窗口”
    帮助文件名 = “”



.常量 GWL_WNDPROC, "-4", 隐藏, 
.常量 WM_PAINT, "15", 隐藏, 
.常量 呈现模式_无效, "-1", 隐藏, 指定一个无效模式。
.常量 呈现模式_默认, "0", 隐藏, 指定默认模式。
.常量 呈现模式_高速度低质量, "1", 隐藏, 指定高速度、低质量呈现。
.常量 呈现模式_高质量低速度, "2", 隐藏, 指定高质量、低速度呈现。
.常量 呈现模式_不消除锯齿, "3", 隐藏, 指定不消除锯齿。
.常量 呈现模式_消除锯齿, "4", 隐藏, 指定消除锯齿的呈现。
.常量 文本呈现模式_SystemDefault, "0", 隐藏, 指定在有系统默认呈现提示的情况下使用每个字符的标志符号位图来绘制字符。将采用用户为系统选择的所有字体修匀设置来绘制文本。
.常量 文本呈现模式_SingleBitPerPixelGridFit, "1", 隐藏, 指定使用每个字符的标志符号位图来绘制字符。提示用于改善字符在主干和弯曲部分的外观。
.常量 文本呈现模式_SingleBitPerPixel, "2", 隐藏, 指定使用每个字符的标志符号位图来绘制字符。不使用提示。
.常量 文本呈现模式_AntiAliasGridFit, "3", 隐藏, 指定在有提示的情况下使用每个字符的 AntiAlias 标志符号位图来绘制字符。由于采用了 AntiAlias，质量会得到大大改善，但同时会增加性能成本。
.常量 文本呈现模式_AntiAlias, "4", 隐藏, 指定在无提示的情况下使用每个字符的 AntiAlias 标志符号位图来绘制字符。由于采用了 AntiAlias，质量会得到改善。由于关闭了提示，主干宽度差可能会比较明显。
.常量 文本呈现模式_ClearTypeGridFit, "5", 隐藏, 指定在有提示的情况下使用每个字符的标志符号 CT 位图来绘制字符。这是质量最高的设置。用于利用 ClearType 字体功能。
.常量 单位_世界坐标, "0", 隐藏, // 0 -- World coordinate (non-physical unit)
.常量 单位_Display, "1", 隐藏, // 1 -- Variable -- for PageTransform only
.常量 单位_像素, "2", 隐藏, // 2 -- Each unit is one device pixel.像素
.常量 单位_点, "3", 隐藏, // 3 -- Each unit is a printer's point 点
.常量 单位_英寸, "4", 隐藏, // 4 -- Each unit is 1 inch.英寸
.常量 单位_Document, "5", 隐藏, // 5 -- Each unit is 1/300 inch.
.常量 单位_毫米, "6", 隐藏, // 6 -- Each unit is 1 millimeter.毫米
.常量 字体风格_普通, "0", 隐藏, 
.常量 字体风格_加粗, "1", 隐藏, 
.常量 字体风格_倾斜, "2", 隐藏, 
.常量 字体风格_加粗倾斜, "3", 隐藏, 
.常量 字体风格_带下划线, "4", 隐藏, 
.常量 字体风格_带中间线, "8", 隐藏, 
.常量 填充模式_交替, "0", 隐藏, Alternate 指定交替填充模式。  
.常量 填充模式_环绕, "1", 隐藏, Winding 指定环绕填充模式。  
.常量 线帽样式_平线帽, "0", 隐藏, 0 // 指定平线帽。
.常量 线帽样式_方线帽, "1", 隐藏, 1 // 指定方线帽。
.常量 线帽样式_圆线帽, "2", 隐藏, 2 // 指定圆线帽。
.常量 线帽样式_三角线帽, "3", 隐藏, 3 // 指定三角线帽。
.常量 线帽样式_没有锚, "16", 隐藏, 0x10 // 指定没有锚。
.常量 线帽样式_方锚头帽, "17", 隐藏, 0x11 // 指定方锚头帽。
.常量 线帽样式_圆锚头帽, "18", 隐藏, 0x12 // 指定圆锚头帽。
.常量 线帽样式_菱形锚头帽, "19", 隐藏, 0x13 // 指定菱形锚头帽。
.常量 线帽样式_箭头状锚头帽, "20", 隐藏, 0x14 // 指定箭头状锚头帽。
.常量 线帽样式_自定义线帽, "255", 隐藏, 0xff // 指定自定义线帽。
.常量 线帽样式_AnchorMask, "240", 隐藏, 0xf0 // 指定用于检查线帽是否为锚头帽的掩码。
.常量 CustomLineCapType_Default, "0", 隐藏, 
.常量 CustomLineCapType_AdjustableArrow, "1", 隐藏, 
.常量 线条联接方式_Miter, "0", 隐藏, 指定斜联接。这将产生一个锐角或切除角，具体取决于斜联接的长度是否超过斜联接限制。
.常量 线条联接方式_斜角, "1", 隐藏, 指定成斜角的联接。这将产生一个斜角。
.常量 线条联接方式_圆角, "2", 隐藏, 指定圆形联接。这将在两条线之间产生平滑的圆弧。
.常量 线条联接方式_MiterClipped, "3", 隐藏, 指定斜联接。这将产生一个锐角或斜角，具体取决于斜联接的长度是否超过斜联接限制。
.常量 虚线线帽样式_方线帽, "0", 隐藏, 
.常量 虚线线帽样式_圆线帽, "2", 隐藏, 
.常量 虚线线帽样式_三角线帽, "3", 隐藏, 
.常量 画笔对齐方式_中心, "0", 隐藏, 
.常量 画笔对齐方式_内侧, "1", 隐藏, 
.常量 画笔对齐方式_外侧, "2", 隐藏, 
.常量 画笔对齐方式_左侧, "3", 隐藏, 
.常量 画笔对齐方式_右侧, "4", 隐藏, 
.常量 画笔类型_固定色, "0", 隐藏, 
.常量 画笔类型_阴影, "1", 隐藏, 
.常量 画笔类型_位图纹理, "2", 隐藏, 
.常量 画笔类型_路径渐变, "3", 隐藏, 
.常量 画笔类型_线性渐变, "4", 隐藏, 
.常量 画笔类型_未知, "-1", 隐藏, 
.常量 虚线风格_实线, "0", 隐藏, 
.常量 虚线风格_划线, "1", 隐藏, 
.常量 虚线风格_点, "2", 隐藏, 
.常量 虚线风格_划线点, "3", 隐藏, 
.常量 虚线风格_划线点点, "4", 隐藏, 
.常量 虚线风格_自定义, "5", 隐藏, 
.常量 画刷类型_固定色, "0", 隐藏, 
.常量 画刷类型_阴影, "1", 隐藏, 
.常量 画刷类型_位图纹理, "2", 隐藏, 
.常量 画刷类型_路径渐变, "3", 隐藏, 
.常量 画刷类型_线性渐变, "4", 隐藏, 
.常量 阴影风格_水平线, "0", 隐藏, Horizontal 水平线的图案。
.常量 阴影风格_垂直线, "1", 隐藏, Vertical 垂直线的图案。
.常量 阴影风格_左斜线, "2", 隐藏, ForwardDiagonal 从左上到右下的对角线的线条图案。
.常量 阴影风格_右斜线, "3", 隐藏, BackwardDiagonal 从右上到左下的对角线的线条图案。
.常量 阴影风格_十字线, "4", 隐藏, Cross 指定交叉的水平线和垂直线。
.常量 阴影风格_交叉斜线, "5", 隐藏, DiagonalCross 指定互相交叉的正向对角线和反向对角线。这些直线是锯齿消除的。
.常量 阴影风格_百分05阴影, "6", 隐藏, Percent05 指定 5% 阴影。前景色与背景色的比例为 5:100。
.常量 阴影风格_百分10阴影, "7", 隐藏, Percent10 指定 10% 阴影。前景色与背景色的比例为 10:100。
.常量 阴影风格_百分20阴影, "8", 隐藏, Percent20 指定 20% 阴影。前景色与背景色的比例为 20:100。
.常量 阴影风格_百分25阴影, "9", 隐藏, Percent25 指定 25% 阴影。前景色与背景色的比例为 25:100。
.常量 阴影风格_百分30阴影, "10", 隐藏, Percent30 指定 30% 阴影。前景色与背景色的比例为 30:100。
.常量 阴影风格_百分40阴影, "11", 隐藏, Percent40 指定 40% 阴影。前景色与背景色的比例为 40:100。
.常量 阴影风格_百分50阴影, "12", 隐藏, Percent50 指定 50% 阴影。前景色与背景色的比例为 50:100。
.常量 阴影风格_百分60阴影, "13", 隐藏, Percent60 指定 60% 阴影。前景色与背景色的比例为 60:100。
.常量 阴影风格_百分70阴影, "14", 隐藏, Percent70 指定 70% 阴影。前景色与背景色的比例为 70:100。
.常量 阴影风格_百分75阴影, "15", 隐藏, Percent75 指定 75% 阴影。前景色与背景色的比例为 75:100。
.常量 阴影风格_百分80阴影, "16", 隐藏, Percent80 指定 80% 阴影。前景色与背景色的比例为 80:100。
.常量 阴影风格_百分90阴影, "17", 隐藏, Percent90 指定 90% 阴影。前景色与背景色的比例为 90:100。
.常量 阴影风格_细向下对角线, "18", 隐藏, LightDownwardDiagonal
.常量 阴影风格_细向上对角线, "19", 隐藏, LightUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，但这些直线不是锯齿消除的。
.常量 阴影风格_粗向下对角线, "20", 隐藏, DarkDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其两边夹角比 ForwardDiagonal 小 50%，宽度是其两倍。此阴影图案不是锯齿消除的。
.常量 阴影风格_粗向上对角线, "21", 隐藏, DarkUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，宽度是其两倍，但这些直线不是锯齿消除的。
.常量 阴影风格_宽向下对角线, "22", 隐藏, WideDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其间距与阴影样式 ForwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_宽向上对角线, "23", 隐藏, WideUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其间距与阴影样式 BackwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_细垂直线, "24", 隐藏, LightVertical 指定垂直线的两边夹角比 Vertical 小 50%。
.常量 阴影风格_细水平线, "25", 隐藏, LightHorizontal 指定水平线，其两边夹角比 Horizontal 小 50%。
.常量 阴影风格_密垂直线, "26", 隐藏, NarrowVertical 指定垂直线的两边夹角比阴影样式 Vertical 小 75%（或者比 LightVertical 小 25%）。
.常量 阴影风格_密水平线, "27", 隐藏, NarrowHorizontal 指定水平线的两边夹角比阴影样式 Horizontal 小 75%（或者比 LightHorizontal 小 25%）。
.常量 阴影风格_粗垂直线, "28", 隐藏, DarkVertical 指定垂直线的两边夹角比 Vertical 小 50% 并且宽度是其两倍。
.常量 阴影风格_粗水平线, "29", 隐藏, DarkHorizontal 指定水平线的两边夹角比水平小 50% 并且宽度是 HatchStyleHorizontal 的两倍。
.常量 阴影风格_右斜虚线, "30", 隐藏, DashedDownwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向右倾斜。
.常量 阴影风格_左斜虚线, "31", 隐藏, DashedUpwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向左倾斜。
.常量 阴影风格_水平虚线, "32", 隐藏, DashedHorizontal 指定虚线水平线。
.常量 阴影风格_垂直虚线, "33", 隐藏, DashedVertical 指定虚线垂直线。
.常量 阴影风格_五彩纸屑, "34", 隐藏, SmallConfetti 指定带有五彩纸屑外观的阴影。
.常量 阴影风格_大五彩纸屑, "35", 隐藏, LargeConfetti 指定具有五彩纸屑外观的阴影，并且它是由比 SmallConfetti 更大的片构成的。
.常量 阴影风格_波浪线, "36", 隐藏, ZigZag 指定由 Z 字形构成的水平线。
.常量 阴影风格_波浪号水平线, "37", 隐藏, Wave 指定由代字号“~”构成的水平线。
.常量 阴影风格_左斜分层砖块, "38", 隐藏, DiagonalBrick 指定具有分层砖块外观的阴影，它从顶点到底点向左倾斜。
.常量 阴影风格_水平分层砖块, "39", 隐藏, HorizontalBrick 指定具有水平分层砖块外观的阴影。
.常量 阴影风格_织物外观, "40", 隐藏, Weave 指定具有织物外观的阴影。
.常量 阴影风格_格子花呢材料, "41", 隐藏, Plaid 指定具有格子花呢材料外观的阴影。
.常量 阴影风格_草皮层, "42", 隐藏, Divot 指定具有草皮层外观的阴影。
.常量 阴影风格_十字点线, "43", 隐藏, DottedGrid 指定互相交叉的水平线和垂直线，每一直线都是由点构成的。
.常量 阴影风格_交叉点线, "44", 隐藏, DottedDiamond 指定互相交叉的正向对角线和反向对角线，每一对角线都是由点构成的。
.常量 阴影风格_对角分层鹅卵石, "45", 隐藏, Shingle 指定带有对角分层鹅卵石外观的阴影，它从顶点到底点向右倾斜。
.常量 阴影风格_网格, "46", 隐藏, Trellis 指定具有格架外观的阴影。
.常量 阴影风格_球体相邻放置, "47", 隐藏, Sphere 指定具有球体彼此相邻放置的外观的阴影。
.常量 阴影风格_小网格, "48", 隐藏, SmallGrid 指定互相交叉的水平线和垂直线，其两边夹角比阴影样式 Cross 小 50%。
.常量 阴影风格_小棋盘, "49", 隐藏, SmallCheckerBoard 指定带有棋盘外观的阴影。
.常量 阴影风格_大棋盘, "50", 隐藏, LargeCheckerBoard 指定具有棋盘外观的阴影，棋盘所具有的方格大小是 SmallCheckerBoard 大小的两倍。
.常量 阴影风格_有锯齿交叉斜线, "51", 隐藏, OutlinedDiamond 指定互相交叉的正向对角线和反向对角线，但这些对角线不是锯齿消除的。
.常量 阴影风格_对角棋盘, "52", 隐藏, SolidDiamond 指定具有对角放置的棋盘外观的阴影。
.常量 阴影风格_大网格, "4", 隐藏, LargeGrid 指定阴影样式 Cross。
.常量 阴影风格_Min, "0", 隐藏, Min 指定阴影样式 Horizonal。
.常量 阴影风格_Max, "52", 隐藏, Max 指定阴影样式 SolidDiamond。
.常量 环绕模式_平铺, "0", 隐藏, Tile 平铺渐变或纹理。
.常量 环绕模式_水平反转后平铺, "1", 隐藏, TileFlipX 水平反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_垂直反转后平铺, "2", 隐藏, TileFlipY 垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_水平垂直反转后平铺, "3", 隐藏, TileFlipXY 水平和垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_不平铺, "4", 隐藏, Clamp 纹理或渐变没有平铺。
.常量 线性渐变模式_从左到右, "0", 隐藏, Horizontal 指定从左到右的渐变。
.常量 线性渐变模式_从上到下, "1", 隐藏, Vertical 指定从上到下的渐变。
.常量 线性渐变模式_从左上到右下, "2", 隐藏, ForwardDiagonal 指定从左上到右下的渐变。
.常量 线性渐变模式_从右上到左下, "3", 隐藏, BackwardDiagonal 指定从右上到左下的渐变。
.常量 路径点类型_Start, "0", 隐藏, Start GraphicsPath 对象的起始点。
.常量 路径点类型_Line, "1", 隐藏, Line 连线线段。
.常量 路径点类型_Bezier, "3", 隐藏, Bezier 默认贝塞尔曲线。
.常量 路径点类型_PathTypeMask, "7", 隐藏, PathTypeMask 遮盖点。
.常量 路径点类型_DashMode, "16", 隐藏, DashMode 对应线段为虚线。
.常量 路径点类型_PathMarker, "32", 隐藏, PathMarker 路径标记。
.常量 路径点类型_CloseSubpath, "128", 隐藏, CloseSubpath 子路径的终结点。
.常量 路径点类型_Bezier3, "3", 隐藏, Bezier3 立体贝塞尔曲线。
.常量 合并模式_替代, "0", 隐藏, Replace 一个剪辑区域被另一个剪辑区域替代。
.常量 合并模式_交集, "1", 隐藏, Intersect 通过采用两个剪辑区域的交集组合两个剪辑区域。
.常量 合并模式_并集, "2", 隐藏, Union 通过采用两个剪辑区域的联合组合两个剪辑区域。
.常量 合并模式_并集减交集, "3", 隐藏, Xor 两者的并集减去两者的交集。通过只采纳单独由其中一个区域（而非两个区域一起）包括的范围来组合两个剪辑区域。
.常量 合并模式_排除新区域, "4", 隐藏, Exclude 指定由从现有区域移除的新区域的结果替代现有区域。换言之，从现有区域中排除新区域。
.常量 合并模式_排除旧区域, "5", 隐藏, Complement 指定由从新区域移除的现有区域的结果替代现有区域。换言之，从新区域中排除现有区域。
.常量 图像类型_Unknown, "0", 隐藏, 
.常量 图像类型_Bitmap, "1", 隐藏, 
.常量 图像类型_Metafile, "2", 隐藏, 
.常量 像素格式_Indexed, "65536", 隐藏, Indexed 该像素数据包含颜色索引值，这意味着这些值是系统颜色表中颜色的索引，而不是单个颜色值。
.常量 像素格式_GDI, "131072", 隐藏, Gdi 像素数据包含 GDI 颜色。
.常量 像素格式_Alpha, "262144", 隐藏, Alpha 像素数据包含没有进行过自左乘的 alpha 值。
.常量 像素格式_PAlpha, "524288", 隐藏, PAlpha 像素格式包含自左乘的 alpha 值。
.常量 像素格式_Extended, "1048576", 隐藏, Extended 保留。
.常量 像素格式_Canonical, "2097152", 隐藏, Canonical 保留。
.常量 像素格式_Undefined, "0", 隐藏, Undefined 未定义像素格式。
.常量 像素格式_DontCare, "0", 隐藏, DontCare 没有指定像素格式。
.常量 像素格式_1bppIndexed, "196865", 隐藏, Format1bppIndexed 指定像素格式为每像素 1 位，并指定它使用索引颜色。因此颜色表中有两种颜色。
.常量 像素格式_4bppIndexed, "197634", 隐藏, Format4bppIndexed 指定格式为每像素 4 位而且已创建索引。
.常量 像素格式_8bppIndexed, "198659", 隐藏, Format8bppIndexed 指定格式为每像素 8 位而且已创建索引。因此颜色表中有 256 种颜色。
.常量 像素格式_16bppGrayScale, "1052676", 隐藏, Format16bppGrayScale 像素格式为每像素 16 位。该颜色信息指定 65536 种灰色调。
.常量 像素格式_16bppRGB555, "135173", 隐藏, Format16bppRgb555 指定格式为每像素 16 位；红色、绿色和蓝色分量各使用 5 位。剩余的 1 位未使用。
.常量 像素格式_16bppRGB565, "135174", 隐藏, Format16bppRgb565 指定格式为每像素 16 位；红色分量使用 5 位，绿色分量使用 6 位，蓝色分量使用 5 位。
.常量 像素格式_16bppARGB1555, "397319", 隐藏, Format16bppArgb1555 像素格式为每像素 16 位。该颜色信息指定 32
.常量 像素格式_24bppRGB, "137224", 隐藏, Format24bppRgb 指定格式为每像素 24 位；红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppRGB, "139273", 隐藏, Format32bppRgb 指定格式为每像素 32 位；红色、绿色和蓝色分量各使用 8 位。剩余的 8 位未使用。
.常量 像素格式_32bppARGB, "2498570", 隐藏, Format32bppArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppPARGB, "925707", 隐藏, Format32bppPArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_48bppRGB, "1060876", 隐藏, Format48bppRgb 指定格式为每像素 48 位；红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppARGB, "3424269", 隐藏, Format64bppArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppPARGB, "1851406", 隐藏, Format64bppPArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_Max, "15", 隐藏, Max 此枚举的最大值。
.常量 矩阵顺序_预先计算, "0", 隐藏, Prepend 在旧操作前应用新操作。 
.常量 矩阵顺序_追加, "1", 隐藏, Append 在旧操作后应用新操作。 
.常量 扭曲模式_透视环绕, "0", 隐藏, Perspective 指定透视环绕。 
.常量 扭曲模式_双线性环绕, "1", 隐藏, Bilinear 指定双线性环绕。 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' const 9DEDA17547CF40e085B7C8919B1800AF 1 6 常量支持库
 ' ogrelib 2EAE87405D754ad780D8FE57432002EA 2 0 DirectX3D支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库



 ' 所需要的模块
 ' ECallBack C:\Documents and Settings\Administrator\桌面\ECallBack.ec
 ' GDIPlus类模块 C:\Documents and Settings\Administrator\桌面\GDIPlus类模块.ec


数据类型 PAINTSTRUCT, , 
    .成员 hdc, 整数型, , , 
    .成员 fErase, 整数型, , , 
    .成员 rcPaint, Rect, , , 
    .成员 fRestore, 整数型, , , 
    .成员 fIncUpdate, 整数型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 回调, , 
    .成员 数值, 整数型, , , 
    .成员 hwnd, 整数型, , , 

数据类型 PointF, 公开, 
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 

数据类型 Point, 公开, 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 RectF, 公开, 
    .成员 X, 小数型, , , 
    .成员 Y, 小数型, , , 
    .成员 Width, 小数型, , , 
    .成员 Height, 小数型, , , 

数据类型 Rect, 公开, 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 
    .成员 Width, 整数型, , , 
    .成员 Height, 整数型, , , 

数据类型 SizeF, 公开, 
    .成员 Width, 小数型, , , 
    .成员 Height, 小数型, , , 

数据类型 Size, 公开, 
    .成员 Width, 整数型, , , 
    .成员 Height, 整数型, , , 

数据类型 PathData, 公开, 
    .成员 Count, 整数型, , , 路径中点的数量
    .成员 Points, 整数型, , , Count个成员的PointF数组内存地址
    .成员 Types, 整数型, , , Count个字节的内存地址

数据类型 ImageCodecInfo, 公开, 图像编解码器信息
    .成员 Clsid, 字节型, , "16", 
    .成员 FormatID, 字节型, , "16", 
    .成员 CodecName, 文本型, , , WCHAR*
    .成员 DllName, 文本型, , , WCHAR*
    .成员 FormatDescription, 文本型, , , WCHAR*
    .成员 FilenameExtension, 文本型, , , WCHAR*
    .成员 MimeType, 文本型, , , WCHAR*
    .成员 Flags, 整数型, , , 
    .成员 Version, 整数型, , , 
    .成员 SigCount, 整数型, , , 
    .成员 SigSize, 整数型, , , 
    .成员 SigPattern, 字节集, , , BYTE*
    .成员 SigMask, 字节集, , , BYTE*

.全局变量 lpPaint, PAINTSTRUCT, , , 
.全局变量 默认色, 整数型, , , 

.DLL命令 SetRect, 整数型, "user32", "SetRect", , 设置指定矩形的内容  非零表示成功，零表示失败。会设置GetLastError
    .参数 矩形, 未知类型0x30001, , RECT，欲设置的矩形
    .参数 左边, 整数型, , 左侧区域（Left）的值
    .参数 顶边, 整数型, , 顶部区域（Top）的值
    .参数 右边, 整数型, , 右侧区域（Right）的值
    .参数 底边, 整数型, , 底部区域（Bottom）的值;

.DLL命令 SetTextColor, 整数型, "gdi32", "SetTextColor", 公开, 设置当前文本颜色。这种颜色也称为“前景色”  文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 FrameRect, 空白型, "", "FrameRect", 公开, 
    .参数 hdc, 整数型, , 
    .参数 lpRect, 未知类型0x30001, , 
    .参数 hBrush, 整数型, , 

.DLL命令 SetBkColor, 整数型, "gdi32", "SetBkColor", 公开, 为指定的设备场景设置背景颜色。背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode  前一个背景色，CLR_INVALID表示出错
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 crColor, 整数型, , 新背景颜色的RGB颜色值;

.DLL命令 OffsetRect, 整数型, "user32", "OffsetRect", , 该函数通过应用一个指定的偏移，从而让矩形移动起来。x会添加到右侧和左侧区域。y添加到顶部和底部区域。偏移方向则取决于参数是正数还是负数，以及采用的是什么坐标系统  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标矩形, 未知类型0x30001, , RECT，欲移动的矩形
    .参数 水平偏移量, 整数型, , 水平偏移量
    .参数 垂直偏移量, 整数型, , 垂直偏移量;

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 GetSysColor, 整数型, "", "", , 
    .参数 nIndex, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetWindowDC, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 

.DLL命令 EnumChildWindows, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 lpEnumFunc, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 rect, 未知类型0x30001, 传址, 

.DLL命令 GetClientRect, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 rect, 未知类型0x30001, 传址, 

.DLL命令 GetSystemMetrics, 整数型, "", "", , 
    .参数 nIndex, 整数型, , 

.DLL命令 GetClassName, 整数型, "", "GetClassNameA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 classname, 文本型, , 
    .参数 cncount, 整数型, , 

.DLL命令 SendMessageA, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 CreateCompatibleDC, 整数型, "", "", , 
    .参数 hdc, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "", "", , 
    .参数 hdc, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 SelectObject, 整数型, "", "", , 
    .参数 hdc, 整数型, , 
    .参数 object, 整数型, , 

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", , 获取指定窗口的设备场景。返回指定窗口的设备场景句柄，出错则为0
    .参数 窗口句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC

.DLL命令 DeleteObject, 整数型, "gdi32.dll", "DeleteObject", , 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放。返回值非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 目标设备场景句柄, 整数型, , 
    .参数 置入横坐标, 整数型, , 对目标DC中目标矩形左上角x位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 置入纵坐标, 整数型, , 对目标DC中目标矩形左上角y位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 
    .参数 源设备场景句柄, 整数型, , 
    .参数 取出横坐标, 整数型, , 对源DC中目标矩形左上角x位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 取出纵坐标, 整数型, , 对源DC中目标矩形左上角y位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 光栅运算, 整数型, , 详见常量表！光栅运算_*

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", , 删除专用设备场景或信息场景，释放所有相关窗口资源。不要将它用于 取设备场景句柄_DLL 函数取回的设备场景
    .参数 设备场景句柄, 整数型, , 

.DLL命令 EndPaint, 整数型, "user32", "EndPaint", , 在指定窗口中标记图画结尾标志　
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 BeginPaint, 整数型, "user32", "BeginPaint", , 准备一个画图窗　
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 ScreenToClient, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 point, Point, , 

.DLL命令 GetWindowLongA, 整数型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 CreateSolidBrush, 整数型, "gdi32", "", 公开, 
    .参数 crColor, 整数型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
GDIPlus装载 ()
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (窗口1, , 假)

.窗口程序集 窗口程序集1, , , 

.程序集变量 a, 皮肤, , , 
.子程序 _窗口1_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

a.初始化 (取窗口句柄 (), #浅灰)

.子程序 _窗口1_可否被关闭, 逻辑型, , 
a.结束皮肤 ()

.子程序 _按钮1_被单击, 空白型, , 
载入 (窗口2, , 假)

.窗口程序集 窗口程序集2, , , 

.程序集变量 aa, 皮肤, , , 
.子程序 _窗口2_创建完毕, 空白型, , 
aa.初始化 (取窗口句柄 (), #蓝灰)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _窗口2_将被销毁, 空白型, , 
aa.结束皮肤 ()

.类模块 皮肤, , , 

.程序集变量 hOldWndProc, 整数型, , , 
.程序集变量 图形, Gdiplus图形, , , 
.程序集变量 画刷, Gdiplus画刷, , , 
.程序集变量 画笔, Gdiplus画笔, , , 
.程序集变量 字体, Gdiplus字体, , , 
.程序集变量 矩阵, Gdiplus矩阵, , , 
.程序集变量 是否活动, 整数型, , , 
.程序集变量 窗口句柄, 整数型, , , 
.程序集变量 设备句柄, 整数型, , , 
.程序集变量 内存位图, 整数型, , , 
.程序集变量 内存设备句柄, 整数型, , , 
.程序集变量 old内存位图, 整数型, , , 
.程序集变量 窗口范围, 未知类型0x30001, , , 
.程序集变量 组件范围, 未知类型0x30001, , , 
.程序集变量 FrameWidth, 整数型, , , 
.程序集变量 FrameHeight, 整数型, , , 
.程序集变量 CaptionHeight, 整数型, , , 
.程序集变量 hdc, 整数型, , , 
.程序集变量 客户区范围, 未知类型0x30001, , , 
.程序集变量 组件句柄列表, 整数型, , "0", 
.程序集变量 旧组件回调, 回调, , "0", 
.程序集变量 按下按钮句柄, 整数型, , "0", 
.程序集变量 组件设备句柄, 整数型, , "0", 
.程序集变量 组件内存位图, 整数型, , "0", 
.程序集变量 旧组件内存位图, 整数型, , "0", 
.程序集变量 选中组件句柄, 整数型, , "0", 
.程序集变量 子程序指针变量, 字节集, , , 
.程序集变量 子程序指针变量2, 字节集, , , 
.程序集变量 子程序指针变量3, 字节集, , "0", 
.程序集变量 组件内存设备, 整数型, , "0", 
.程序集变量 路径, Gdiplus路径, , , 
.程序集变量 最大化, 逻辑型, , , 
.程序集变量 最小化, 逻辑型, , , 
.程序集变量 关闭, 逻辑型, , , 
.程序集变量 是否最大化, 逻辑型, , , 
.程序集变量 是否最小化, 逻辑型, , , 
.程序集变量 是否关闭, 逻辑型, , , 
.程序集变量 bkcr, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 结束皮肤, 空白型, 公开, 
.局部变量 x, 整数型, , , 

.计次循环首 (取数组成员数 (组件设备句柄), x)
    SelectObject (组件内存设备 [x], 旧组件内存位图 [x])
    DeleteObject (组件内存位图 [x])
    DeleteDC (组件内存设备 [x])
    ReleaseDC (组件句柄列表 [x], 组件设备句柄 [x])
.计次循环尾 ()
重定义数组 (组件句柄列表, 假, 0)
重定义数组 (组件内存设备, 假, 0)
重定义数组 (组件内存位图, 假, 0)
重定义数组 (组件设备句柄, 假, 0)
重定义数组 (旧组件内存位图, 假, 0)
重定义数组 (按下按钮句柄, 假, 0)
重定义数组 (选中组件句柄, 假, 0)
重定义数组 (旧组件回调, 假, 0)
销毁设备场景 ()

.子程序 初始化, 空白型, 公开, 从本子程序执行后添加的组件无法添加皮肤
.参数 欲加载皮肤的窗口句柄, 整数型, , 
.参数 底色, 整数型, , 

.局部变量 n, 整数型, , , 
.局部变量 a, 文本型, , , 
.局部变量 旧回调, 回调, , , 
.局部变量 Style, 整数型, , , 
.局部变量 gwl, 整数型, , , 

赋值 (窗口句柄, 欲加载皮肤的窗口句柄)
赋值 (bkcr, 底色)
GetWindowRect (窗口句柄, 窗口范围)
赋值 (gwl, GetWindowLongA (窗口句柄, #))
.如果 (等于 (位或 (gwl, #), gwl))
    赋值 (FrameWidth, GetSystemMetrics (#))
    赋值 (FrameHeight, GetSystemMetrics (#))
.否则
    赋值 (FrameWidth, 相加 (GetSystemMetrics (#), 1))
    赋值 (FrameHeight, GetSystemMetrics (#))
.如果结束
.如果 (等于 (位或 (gwl, #), gwl))
    赋值 (最大化, 真)
.否则
    赋值 (最大化, 假)
.如果结束
.如果 (等于 (位或 (gwl, #), gwl))
    赋值 (最小化, 真)
.否则
    赋值 (最小化, 假)
.如果结束
.如果 (等于 (位或 (gwl, #), gwl))
    赋值 (关闭, 真)
.否则
    赋值 (关闭, 假)
.如果结束
赋值 (子程序指针变量, 辅_生成_类回调_易 (7, 4))
赋值 (hOldWndProc, SetWindowLong (窗口句柄, -4, 取变量地址_字节集 (子程序指针变量)))
赋值 (设备句柄, GetWindowDC (窗口句柄))
赋值 (hdc, GetDC (窗口句柄))
赋值 (子程序指针变量2, 辅_生成_类回调_易 (5, 2))
EnumChildWindows (窗口句柄, 取变量地址_字节集 (子程序指针变量2), 0)
.计次循环首 (255, )
    赋值 (a, 相加 (a, “ ”))
.计次循环尾 ()
重定义数组 (子程序指针变量3, 假, 取数组成员数 (组件句柄列表))
.计次循环首 (取数组成员数 (组件句柄列表), n)
    GetClassName (组件句柄列表 [n], a, 255)
    调试输出 (a)
    赋值 (Style, 位与 (GetWindowLongA (组件句柄列表 [n], #), 15))
    .判断开始 (等于 (a, “Button”)) ' 按钮_类
        .判断开始 (等于 (Style, #)) ' 可按按钮
            赋值 (旧回调.hwnd, 组件句柄列表 [n])
            赋值 (子程序指针变量3 [n], 辅_生成_类回调_易 (6, 4))
            赋值 (旧回调.数值, SetWindowLong (组件句柄列表 [n], #GWL_WNDPROC, 取变量地址_字节集 (子程序指针变量3 [n])))
        .判断 (等于 (Style, #)) ' 单选框按钮
            赋值 (旧回调.hwnd, 组件句柄列表 [n])
            赋值 (子程序指针变量3 [n], 辅_生成_类回调_易 (9, 4))
            赋值 (旧回调.数值, SetWindowLong (组件句柄列表 [n], #GWL_WNDPROC, 取变量地址_字节集 (子程序指针变量3 [n])))
        .判断 (等于 (Style, #)) ' 选择框按钮
            赋值 (旧回调.hwnd, 组件句柄列表 [n])
            赋值 (子程序指针变量3 [n], 辅_生成_类回调_易 (10, 4))
            赋值 (旧回调.数值, SetWindowLong (组件句柄列表 [n], #GWL_WNDPROC, 取变量地址_字节集 (子程序指针变量3 [n])))
        .默认
            
        .判断结束
        
    .判断 (等于 (a, “Edit”)) ' 编辑框_类
        赋值 (旧回调.hwnd, 组件句柄列表 [n])
        赋值 (子程序指针变量3 [n], 辅_生成_类回调_易 (11, 4))
        赋值 (旧回调.数值, SetWindowLong (组件句柄列表 [n], #, 取变量地址_字节集 (子程序指针变量3 [n])))
    .默认
         ' 本源码来自易语言资源网(www.5A5X.com)
    .判断结束
    GetWindowRect (组件句柄列表 [n], 组件范围)
    加入成员 (旧组件回调, 旧回调)
    加入成员 (组件设备句柄, GetWindowDC (组件句柄列表 [n]))
    加入成员 (组件内存设备, CreateCompatibleDC (组件设备句柄 [取数组成员数 (组件设备句柄)]))
    加入成员 (组件内存位图, CreateCompatibleBitmap (组件设备句柄 [取数组成员数 (组件设备句柄)], 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.)))
    加入成员 (旧组件内存位图, SelectObject (组件内存设备 [取数组成员数 (组件内存设备)], 组件内存位图 [取数组成员数 (组件内存位图)]))
.计次循环尾 ()

.子程序 EnumProc, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 lparam, 整数型, , 

加入成员 (组件句柄列表, hwnd)
返回 (1)

.子程序 按钮MsgProc, 整数型, , 
.参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
.参数 wMsg, 整数型, , 消息的标识符
.参数 wParam, 整数型, , 具体取决于消息
.参数 lParam, 整数型, , 具体取决于消息;

.局部变量 r, 整数型, , , 
.局部变量 p, PointF, , "2", 
.局部变量 计次, 整数型, , , 
.局部变量 有无当前按下, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 index, 整数型, , , 

.计次循环首 (取数组成员数 (旧组件回调), 计次)
    .如果真 (等于 (旧组件回调 [计次], hwnd, hwnd))
        赋值 (a, 旧组件回调 [计次], 数值)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (组件句柄列表), 计次)
    .如果真 (等于 (组件句柄列表 [计次], hwnd))
        赋值 (index, 计次)
        图形.未知函数_67175651 (组件内存设备 [index])
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.计次循环尾 ()
赋值 (有无当前按下, -10)
字体.未知函数_67175817 (“宋体”, 20, #字体风格_普通, #单位_像素)
GetWindowRect (hwnd, 组件范围)
.计次循环首 (取数组成员数 (按下按钮句柄), 计次)
    .如果真 (等于 (按下按钮句柄 [计次], hwnd))
        赋值 (有无当前按下, 计次)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (wMsg, #))
    赋值 (r, CallWindowProc (a, hwnd, wMsg, wParam, lParam))
    .如果真 (不等于 (有无当前按下, -10))
        删除成员 (按下按钮句柄, 有无当前按下, )
    .如果真结束
    SendMessageA (hwnd, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
.如果真 (等于 (wMsg, #))
    赋值 (r, CallWindowProc (a, hwnd, wMsg, wParam, lParam))
    加入成员 (按下按钮句柄, hwnd)
    SendMessageA (hwnd, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
.如果真 (等于 (wMsg, #WM_PAINT))
    BeginPaint (hwnd, lpPaint)
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 0)
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相减 (组件范围., 组件范围.))
    .如果 (等于 (有无当前按下, -10))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175663 (画刷, 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.))
    .否则
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175663 (画刷, 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.))
    .如果结束
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 0)
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 10)
    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#黑色, 255), RGB到ARGB (#蓝灰, 255))
    图形.未知函数_67175660 (未知支持库函数_76 (hwnd), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 相乘 (取文本长度 (未知支持库函数_76 (hwnd)), 5)), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 10), 字体, 画刷)
    BitBlt (组件设备句柄 [index], 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.), 组件内存设备 [index], 0, 0, #)
    EndPaint (hwnd, lpPaint)
    返回 (r)
.如果真结束
返回 (CallWindowProc (a, hwnd, wMsg, wParam, lParam))

.子程序 WinMsgProc, 整数型, , 
.参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
.参数 wMsg, 整数型, , 消息的标识符
.参数 wParam, 整数型, , 具体取决于消息
.参数 lParam, 整数型, , 具体取决于消息;

.局部变量 r, 整数型, , , 
.局部变量 p, PointF, , "2", 
.局部变量 a, 整数型, , , 
.局部变量 p2, Point, , , 
.局部变量 关闭按钮, 逻辑型, , , 
.局部变量 hSolidBrush, 空白型, , , 

GetWindowRect (窗口句柄, 窗口范围)
GetClientRect (窗口句柄, 客户区范围)
赋值 (CaptionHeight, 相减 (窗口范围., 窗口范围., 相减 (客户区范围., 客户区范围.), FrameHeight))
.如果真 (等于 (wMsg, #))
    DeleteObject (hSolidBrush)
    赋值 (hSolidBrush, CreateSolidBrush (#橙黄))
    SetTextColor (wParam, #藏蓝)
    SetBkColor (wParam, #橙黄)
    返回 (hSolidBrush)
.如果真结束
.如果真 (等于 (wMsg, #))
    DeleteObject (hSolidBrush)
    赋值 (hSolidBrush, CreateSolidBrush (#浅灰))
    SetTextColor (wParam, #灰色)
    SetBkColor (wParam, #浅灰)
    返回 (hSolidBrush)
.如果真结束
.如果真 (等于 (wMsg, #))
    赋值 (r, CallWindowProc (hOldWndProc, hwnd, wMsg, wParam, lParam))
    赋值 (p2.x, 位与 (lParam, 65535))
    赋值 (p2.y, 右移 (lParam, 16))
    ScreenToClient (窗口句柄, p2)
    赋值 (p2.x, 相加 (p2.x, 相除 (相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.), 2)))
    赋值 (p2.y, 相减 (相加 (p2.y, 相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.)), FrameHeight))
    SendMessageA (hwnd, #, 0, 0)
    .如果真 (或者 (等于 (r, #), 等于 (r, #), 等于 (r, #)))
        SendMessageA (hwnd, #, 0, 0)
        返回 (#)
    .如果真结束
    返回 (r)
.如果真结束
.如果真 (等于 (wMsg, #))
    赋值 (p2.x, 位与 (lParam, 65535))
    赋值 (p2.y, 右移 (lParam, 16))
    ScreenToClient (窗口句柄, p2)
    赋值 (p2.x, 相加 (p2.x, 相除 (相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.), 2)))
    赋值 (p2.y, 相减 (相加 (p2.y, 相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.)), FrameHeight))
    .如果真 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 50), 相减 (相除 (CaptionHeight, 2), 8), 40, 16))
        赋值 (是否关闭, 真)
        SendMessageA (hwnd, #, 0, 0)
        返回 (0)
    .如果真结束
    .如果真 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 95), 相减 (相除 (CaptionHeight, 2), 8), 40, 16))
        赋值 (是否最大化, 真)
        SendMessageA (hwnd, #, 0, 0)
        返回 (0)
    .如果真结束
    .如果真 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 140), 相减 (相除 (CaptionHeight, 2), 8), 40, 16))
        赋值 (是否最小化, 真)
        SendMessageA (hwnd, #, 0, 0)
        返回 (0)
    .如果真结束
    返回 (CallWindowProc (hOldWndProc, hwnd, wMsg, wParam, lParam))
.如果真结束
.如果真 (或者 (等于 (wMsg, #), 等于 (wMsg, #)))
    赋值 (p2.x, 位与 (lParam, 65535))
    赋值 (p2.y, 右移 (lParam, 16))
    ScreenToClient (窗口句柄, p2)
    赋值 (p2.x, 相加 (p2.x, 相除 (相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.), 2)))
    赋值 (p2.y, 相减 (相加 (p2.y, 相加 (相减 (窗口范围., 窗口范围., 客户区范围.), 客户区范围.)), FrameHeight))
    .如果真 (并且 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 50), 相减 (相除 (CaptionHeight, 2), 8), 40, 16), 关闭))
        SendMessageA (hwnd, #, 0, 0)
    .如果真结束
    .如果真 (并且 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 95), 相减 (相除 (CaptionHeight, 2), 8), 40, 16), 最大化))
        SendMessageA (hwnd, #, #, 0)
    .如果真结束
    .如果真 (并且 (判断鼠标碰撞 (p2.x, p2.y, 相减 (窗口范围., 窗口范围., 140), 相减 (相除 (CaptionHeight, 2), 8), 40, 16), 最小化))
        SendMessageA (hwnd, #, #, 0)
    .如果真结束
    赋值 (是否关闭, 假)
    赋值 (是否最小化, 假)
    赋值 (是否最大化, 假)
    SendMessageA (hwnd, #, 0, 0)
    返回 (0)
.如果真结束
.如果真 (等于 (wMsg, #))
    赋值 (是否活动, wParam)
    SendMessageA (hwnd, #WM_PAINT, 0, 0)
.如果真结束
.如果真 (或者 (等于 (wMsg, #WM_PAINT), 等于 (wMsg, #), 等于 (wMsg, #), 等于 (wMsg, #), 等于 (wMsg, #)))
    BeginPaint (hwnd, lpPaint)
    赋值 (r, 1)
    .如果真 (等于 (wMsg, #))
        ReleaseDC (窗口句柄, hdc)
        赋值 (hdc, GetDC (窗口句柄))
        SelectObject (内存设备句柄, old内存位图)
        DeleteObject (内存位图)
        DeleteDC (内存设备句柄)
        赋值 (内存设备句柄, CreateCompatibleDC (设备句柄))
        赋值 (内存位图, CreateCompatibleBitmap (设备句柄, 相减 (窗口范围., 窗口范围.), 相减 (窗口范围., 窗口范围.)))
        赋值 (old内存位图, SelectObject (内存设备句柄, 内存位图))
    .如果真结束
    .如果真 (等于 (wMsg, #WM_PAINT))
        赋值 (r, CallWindowProc (hOldWndProc, hwnd, wMsg, wParam, lParam))
    .如果真结束
    图形.未知函数_67175651 (内存设备句柄)
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 0)
    赋值 (p [2].x, 0)
    赋值 (p [2].y, CaptionHeight)
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
    .否则
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
    .如果结束
    图形.未知函数_67175663 (画刷, 0, 0, 相减 (窗口范围., 窗口范围.), CaptionHeight)
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 10)
    赋值 (p [2].x, FrameWidth)
    赋值 (p [2].y, 10)
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#橙黄, 255), RGB到ARGB (#红褐, 255))
    .否则
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
    .如果结束
    图形.未知函数_67175663 (画刷, 0, CaptionHeight, FrameWidth, 相减 (窗口范围., 窗口范围., CaptionHeight))
    赋值 (p [1].x, 相减 (窗口范围., 窗口范围., FrameWidth))
    赋值 (p [1].y, 10)
    赋值 (p [2].x, 相减 (窗口范围., 窗口范围.))
    赋值 (p [2].y, 10)
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#红褐, 255))
    .否则
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
    .如果结束
    图形.未知函数_67175663 (画刷, 相减 (窗口范围., 窗口范围., FrameWidth), CaptionHeight, FrameWidth, 相减 (窗口范围., 窗口范围., CaptionHeight))
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (窗口范围., 窗口范围., FrameHeight))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相减 (窗口范围., 窗口范围.))
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#橙黄, 255), RGB到ARGB (#红褐, 255))
    .否则
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
    .如果结束
    图形.未知函数_67175663 (画刷, FrameWidth, 相减 (窗口范围., 窗口范围., FrameHeight), 相减 (窗口范围., 窗口范围., 相乘 (FrameWidth, 2)), 相减 (窗口范围., 窗口范围.))
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (相除 (CaptionHeight, 2), 8))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相加 (相除 (CaptionHeight, 2), 8))
    .如果真 (关闭)
        .如果 (是否关闭)
            .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
            .否则
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
            .如果结束
            图形.未知函数_67175663 (画刷, 相减 (窗口范围., 窗口范围., 50), 相减 (相除 (CaptionHeight, 2), 8), 40, 16)
            画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            图形.未知函数_67175655 (画笔, 相减 (窗口范围., 窗口范围., 35), 相减 (相除 (CaptionHeight, 2), 5), 相减 (窗口范围., 窗口范围., 25), 相加 (相除 (CaptionHeight, 2), 5))
            图形.未知函数_67175655 (画笔, 相减 (窗口范围., 窗口范围., 35), 相加 (相除 (CaptionHeight, 2), 5), 相减 (窗口范围., 窗口范围., 25), 相减 (相除 (CaptionHeight, 2), 5))
        .否则
            .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
            .否则
                画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
            .如果结束
            图形.未知函数_67175663 (画刷, 相减 (窗口范围., 窗口范围., 50), 相减 (相除 (CaptionHeight, 2), 8), 40, 16)
            画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            图形.未知函数_67175655 (画笔, 相减 (窗口范围., 窗口范围., 35), 相减 (相除 (CaptionHeight, 2), 5), 相减 (窗口范围., 窗口范围., 25), 相加 (相除 (CaptionHeight, 2), 5))
            图形.未知函数_67175655 (画笔, 相减 (窗口范围., 窗口范围., 35), 相加 (相除 (CaptionHeight, 2), 5), 相减 (窗口范围., 窗口范围., 25), 相减 (相除 (CaptionHeight, 2), 5))
        .如果结束
         ' SendMessageA (hwnd, #WM_CLOSE, 0, 0)
    .如果真结束
    .如果真 (取反 (并且 (等于 (最大化, 假), 等于 (最小化, 假))))
        .如果 (最大化)
            .如果 (取反 (是否最大化))
                .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                    画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
                .否则
                    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
                .如果结束
                画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            .否则
                .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
                .否则
                    画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
                .如果结束
                画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            .如果结束
            
        .否则
            .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#浅灰, 255), RGB到ARGB (#深灰, 255))
            .否则
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
            .如果结束
            
            画笔.未知函数_67175709 (RGB到ARGB (#黑色, 200), 2)
        .如果结束
        图形.未知函数_67175663 (画刷, 相减 (窗口范围., 窗口范围., 95), 相减 (相除 (CaptionHeight, 2), 8), 40, 16)
        图形.未知函数_67175669 (画笔, 相减 (窗口范围., 窗口范围., 80), 相减 (相除 (CaptionHeight, 2), 5), 10, 10)
        .如果 (最小化)
            .如果 (取反 (是否最小化))
                .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                    画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
                .否则
                    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
                .如果结束
                画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            .否则
                .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#红褐, 255), RGB到ARGB (#橙黄, 255))
                .否则
                    画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
                .如果结束
                画笔.未知函数_67175709 (RGB到ARGB (#藏蓝, 200), 2)
            .如果结束
            
        .否则
            .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#浅灰, 255), RGB到ARGB (#深灰, 255))
            .否则
                画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (取颜色值 (150, 150, 0), 255), RGB到ARGB (取颜色值 (100, 100, 0), 255))
            .如果结束
             ' 本源码来自易语言资源网(www.5A5X.com)
            画笔.未知函数_67175709 (RGB到ARGB (#黑色, 200), 2)
        .如果结束
        图形.未知函数_67175663 (画刷, 相减 (窗口范围., 窗口范围., 140), 相减 (相除 (CaptionHeight, 2), 8), 40, 16)
        图形.未知函数_67175655 (画笔, 相减 (窗口范围., 窗口范围., 130), 相除 (CaptionHeight, 2), 相减 (窗口范围., 窗口范围., 110), 相除 (CaptionHeight, 2))
    .如果真结束
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (相除 (CaptionHeight, 2), 8))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相加 (相除 (CaptionHeight, 2), 12))
    字体.未知函数_67175817 (“黑体”, 21, #字体风格_普通, #单位_像素)
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#银白, 180), RGB到ARGB (#浅灰, 180))
    .否则
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#银白, 180), RGB到ARGB (#浅灰, 180))
    .如果结束
    图形.未知函数_67175660 (未知支持库函数_76 (hwnd), 35, 相减 (相除 (CaptionHeight, 2), 8), 字体, 画刷)
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (相除 (CaptionHeight, 2), 8))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相加 (相除 (CaptionHeight, 2), 12))
    .如果 (或者 (等于 (是否活动, 1), 等于 (是否活动, 2)))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#绿色, 255), RGB到ARGB (#藏蓝, 255))
    .否则
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#绿色, 255), RGB到ARGB (#藏蓝, 255))
    .如果结束
    字体.未知函数_67175817 (“黑体”, 20, #字体风格_普通, #单位_像素)
    图形.未知函数_67175660 (未知支持库函数_76 (hwnd), 33, 相减 (相除 (CaptionHeight, 2), 8), 字体, 画刷)
    画刷.未知函数_67175751 (RGB到ARGB (bkcr, 255))
    图形.未知函数_67175663 (画刷, FrameWidth, CaptionHeight, 相减 (客户区范围., 客户区范围.), 相减 (客户区范围., 客户区范围.))
    BitBlt (设备句柄, 0, 0, 相减 (窗口范围., 窗口范围.), 相减 (窗口范围., 窗口范围.), 内存设备句柄, 0, 0, #)
    EndPaint (hwnd, lpPaint)
    .计次循环首 (取数组成员数 (组件句柄列表), a)
        SendMessageA (组件句柄列表 [a], #WM_PAINT, 0, 0)
    .计次循环尾 ()
    返回 (r)
.如果真结束
返回 (CallWindowProc (hOldWndProc, hwnd, wMsg, wParam, lParam))

.子程序 销毁设备场景, 空白型, , 
SelectObject (内存设备句柄, old内存位图)
DeleteObject (内存位图)
ReleaseDC (窗口句柄, 设备句柄)
DeleteDC (内存设备句柄)

.子程序 单选框MsgProc, 整数型, , 
.参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
.参数 wMsg, 整数型, , 消息的标识符
.参数 wParam, 整数型, , 具体取决于消息
.参数 lParam, 整数型, , 具体取决于消息;

.局部变量 r, 整数型, , , 
.局部变量 p, PointF, , "2", 
.局部变量 计次, 整数型, , , 
.局部变量 有无当前按下, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 index, 整数型, , , 

.计次循环首 (取数组成员数 (旧组件回调), 计次)
    .如果真 (等于 (旧组件回调 [计次], hwnd, hwnd))
        赋值 (a, 旧组件回调 [计次], 数值)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (组件句柄列表), 计次)
    .如果真 (等于 (组件句柄列表 [计次], hwnd))
        赋值 (index, 计次)
        图形.未知函数_67175651 (组件内存设备 [index])
    .如果真结束
    
.计次循环尾 ()
赋值 (有无当前按下, -10)
字体.未知函数_67175817 (“宋体”, 20, #字体风格_普通, #单位_像素)
GetWindowRect (hwnd, 组件范围)
.计次循环首 (取数组成员数 (选中组件句柄), 计次)
    .如果真 (等于 (选中组件句柄 [计次], hwnd))
        赋值 (有无当前按下, 计次)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (wMsg, #))
    赋值 (r, CallWindowProc (a, hwnd, wMsg, wParam, lParam))
    .如果 (等于 (wParam, 1))
        .如果真 (等于 (有无当前按下, -10))
            加入成员 (选中组件句柄, hwnd)
        .如果真结束
        
    .否则
        .如果真 (不等于 (有无当前按下, -10))
            删除成员 (选中组件句柄, 有无当前按下, )
        .如果真结束
        
    .如果结束
    SendMessageA (hwnd, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
.如果真 (等于 (wMsg, #WM_PAINT))
     ' r ＝ CallWindowProc (a, hwnd, wMsg, wParam, lParam)
    BeginPaint (hwnd, lpPaint)
    画刷.未知函数_67175751 (RGB到ARGB (bkcr, 255))
    图形.未知函数_67175663 (画刷, 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.))
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 7))
    .如果 (等于 (有无当前按下, -10))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175676 (画刷, 0, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7), 14, 14)
        赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#墨绿, 200), RGB到ARGB (#嫩绿, 200))
        图形.未知函数_67175676 (画刷, 2, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5), 10, 10)
    .否则
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175676 (画刷, 0, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7), 14, 14)
        赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#黑色, 200), RGB到ARGB (#灰色, 200))
        图形.未知函数_67175676 (画刷, 2, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5), 10, 10)
        画刷.未知函数_67175751 (RGB到ARGB (#黑色, 255))
        图形.未知函数_67175676 (画刷, 4.5, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 2.5), 5, 5)
    .如果结束
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 0)
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 10)
    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#黑色, 255), RGB到ARGB (#紫色, 255))
    图形.未知函数_67175660 (未知支持库函数_76 (hwnd), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 相乘 (取文本长度 (未知支持库函数_76 (hwnd)), 5)), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 10), 字体, 画刷)
    EndPaint (hwnd, lpPaint)
    BitBlt (组件设备句柄 [index], 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.), 组件内存设备 [index], 0, 0, #)
     ' SendMessageA (窗口句柄, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
返回 (CallWindowProc (a, hwnd, wMsg, wParam, lParam))

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 选择框MsgProc, 整数型, , 
.参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
.参数 wMsg, 整数型, , 消息的标识符
.参数 wParam, 整数型, , 具体取决于消息
.参数 lParam, 整数型, , 具体取决于消息;

.局部变量 r, 整数型, , , 
.局部变量 p, PointF, , "2", 
.局部变量 计次, 整数型, , , 
.局部变量 有无当前按下, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 index, 整数型, , , 

.计次循环首 (取数组成员数 (旧组件回调), 计次)
    .如果真 (等于 (旧组件回调 [计次], hwnd, hwnd))
        赋值 (a, 旧组件回调 [计次], 数值)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (组件句柄列表), 计次)
    .如果真 (等于 (组件句柄列表 [计次], hwnd))
        赋值 (index, 计次)
        图形.未知函数_67175651 (组件内存设备 [index])
    .如果真结束
    
.计次循环尾 ()
赋值 (有无当前按下, -10)
字体.未知函数_67175817 (“宋体”, 20, #字体风格_普通, #单位_像素)
GetWindowRect (hwnd, 组件范围)
.计次循环首 (取数组成员数 (选中组件句柄), 计次)
    .如果真 (等于 (选中组件句柄 [计次], hwnd))
        赋值 (有无当前按下, 计次)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (wMsg, #))
    赋值 (r, CallWindowProc (a, hwnd, wMsg, wParam, lParam))
    .如果 (等于 (wParam, 1))
        .如果真 (等于 (有无当前按下, -10))
            加入成员 (选中组件句柄, hwnd)
        .如果真结束
        
    .否则
        .如果真 (不等于 (有无当前按下, -10))
            删除成员 (选中组件句柄, 有无当前按下, )
        .如果真结束
        
    .如果结束
    SendMessageA (hwnd, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
.如果真 (等于 (wMsg, #WM_PAINT))
     ' r ＝ CallWindowProc (a, hwnd, wMsg, wParam, lParam)
    BeginPaint (hwnd, lpPaint)
    画刷.未知函数_67175751 (RGB到ARGB (bkcr, 255))
    图形.未知函数_67175663 (画刷, 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.))
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7))
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 7))
    .如果 (等于 (有无当前按下, -10))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175663 (画刷, 0, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7), 14, 14)
        赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        画刷.未知函数_67175762 (p [2], p [1], RGB到ARGB (#墨绿, 200), RGB到ARGB (#嫩绿, 200))
        图形.未知函数_67175663 (画刷, 2, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5), 10, 10)
    .否则
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#橙黄, 255), RGB到ARGB (#黄褐, 255))
        图形.未知函数_67175663 (画刷, 0, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 7), 14, 14)
        赋值 (p [1].y, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        赋值 (p [2].y, 相加 (相除 (相减 (组件范围., 组件范围.), 2), 5))
        画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#黑色, 200), RGB到ARGB (#灰色, 200))
        图形.未知函数_67175663 (画刷, 2, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 5), 10, 10)
        画刷.未知函数_67175751 (RGB到ARGB (#黑色, 255))
        图形.未知函数_67175663 (画刷, 4.5, 相减 (相除 (相减 (组件范围., 组件范围.), 2), 2.5), 5, 5)
    .如果结束
    赋值 (p [1].x, 0)
    赋值 (p [1].y, 0)
    赋值 (p [2].x, 0)
    赋值 (p [2].y, 10)
    画刷.未知函数_67175762 (p [1], p [2], RGB到ARGB (#黑色, 255), RGB到ARGB (#紫色, 255))
    图形.未知函数_67175660 (未知支持库函数_76 (hwnd), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 相乘 (取文本长度 (未知支持库函数_76 (hwnd)), 5)), 相减 (相除 (相减 (组件范围., 组件范围.), 2), 10), 字体, 画刷)
    BitBlt (组件设备句柄 [index], 0, 0, 相减 (组件范围., 组件范围.), 相减 (组件范围., 组件范围.), 组件内存设备 [index], 0, 0, #)
    EndPaint (hwnd, lpPaint)
     ' SendMessageA (窗口句柄, #WM_PAINT, 0, 0)
    返回 (r)
.如果真结束
返回 (CallWindowProc (a, hwnd, wMsg, wParam, lParam))

.子程序 编辑框MsgProc, 整数型, , 
.参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
.参数 wMsg, 整数型, , 消息的标识符
.参数 wParam, 整数型, , 具体取决于消息
.参数 lParam, 整数型, , 具体取决于消息;

.局部变量 r, 整数型, , , 
.局部变量 p, PointF, , "2", 
.局部变量 计次, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 point, Point, , , 
.局部变量 point2, Point, , , 
.局部变量 index, 整数型, , , 
.局部变量 hBrush, 整数型, , , 
.局部变量 hBKBrush, 整数型, , , 
.局部变量 rect2, 未知类型0x30001, , , 
.局部变量 rect3, 未知类型0x30001, , , 
.局部变量 cdc, 整数型, , , 

.计次循环首 (取数组成员数 (旧组件回调), 计次)
    .如果真 (等于 (旧组件回调 [计次], hwnd, hwnd))
        赋值 (a, 旧组件回调 [计次], 数值)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (组件句柄列表), 计次)
    .如果真 (等于 (组件句柄列表 [计次], hwnd))
        赋值 (index, 计次)
        图形.未知函数_67175651 (组件内存设备 [index])
    .如果真结束
    
.计次循环尾 ()
GetWindowRect (hwnd, 组件范围)
.如果真 (等于 (wMsg, #))
    赋值 (point.x, 组件范围.)
    赋值 (point.y, 组件范围.)
    赋值 (point2.x, 组件范围.)
    赋值 (point2.y, 组件范围.)
    ScreenToClient (hwnd, point)
    ScreenToClient (hwnd, point2)
    赋值 (rect2., point.x)
    赋值 (rect2., point.y)
    赋值 (rect2., point2.x)
    赋值 (rect2., point2.y)
    OffsetRect (rect2, 2, 2)
     ' hBrush ＝ CreateSolidBrush (#黄色)
     ' hBKBrush ＝ CreateSolidBrush (#橙黄)
     ' FrameRect (组件内存设备 [index], rect2, hBrush)
    画笔.未知函数_67175709 (RGB到ARGB (#黄色, 255), 1)
    图形.未知函数_67175669 (画笔, rect2., rect2., 相减 (rect2., rect2., 1), 相减 (rect2., rect2., 1))
    SetRect (rect3, 相加 (rect2., 1), 相加 (rect2., 1), 相减 (rect2., 1), 相减 (rect2., 1))
    画笔.未知函数_67175709 (RGB到ARGB (#绿色, 255), 1)
    图形.未知函数_67175669 (画笔, rect3., rect3., 相减 (rect3., rect3., 1), 相减 (rect3., rect3., 1))
    BitBlt (组件设备句柄 [index], 0, 0, 相加 (相减 (rect2., rect2.), 2), 相加 (相减 (rect2., rect2.), 2), 组件内存设备 [index], 0, 0, #)
    返回 (1)
.如果真结束
返回 (CallWindowProc (a, hwnd, wMsg, wParam, lParam))

.子程序 判断鼠标碰撞, 逻辑型, , 
.参数 MouseX, 整数型, , 
.参数 MouseY, 整数型, , 
.参数 ObjectX, 整数型, , 
.参数 ObjectY, 整数型, , 
.参数 ObjectWidth, 整数型, , 
.参数 ObjectHeight, 整数型, , 

.如果真 (并且 (小于或等于 (MouseX, 相加 (ObjectX, ObjectWidth)), 大于或等于 (MouseX, ObjectX), 小于或等于 (MouseY, 相加 (ObjectY, ObjectHeight)), 大于或等于 (MouseY, ObjectY)))
    返回 (真)
.如果真结束
返回 (假)

.子程序 RGB2HSI, 空白型, , 
.参数 r, 整数型, , 
.参数 g, 整数型, , 
.参数 b, 整数型, , 
.参数 h, 整数型, 参考, 
.参数 s, 整数型, 参考, 
.参数 i, 整数型, 参考, 

.局部变量 max, 整数型, , , 
.局部变量 min, 整数型, , , 

.如果 (大于 (r, g))
    赋值 (max, r)
    赋值 (min, g)
    .如果 (大于 (b, r))
        赋值 (max, b)
    .否则
        .如果真 (小于 (b, g))
            赋值 (min, b)
        .如果真结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    
.否则
    赋值 (max, g)
    赋值 (min, r)
    .如果 (大于 (b, g))
        赋值 (max, b)
    .否则
        .如果真 (小于 (b, r))
            赋值 (min, b)
        .如果真结束
        
    .如果结束
    
.如果结束
.如果真 (等于 (r, max))
    赋值 (h, 相除 (相减 (g, b), 相减 (max, min)))
.如果真结束
.如果真 (等于 (g, max))
    赋值 (h, 相加 (2, 相除 (相减 (b, r), 相减 (max, min))))
.如果真结束
.如果真 (等于 (b, max))
    赋值 (h, 相加 (4, 相除 (相减 (b, g), 相减 (max, min))))
.如果真结束
赋值 (h, 相乘 (h, 60))
.如果真 (小于 (h, 0))
    赋值 (h, 相加 (h, 360))
.如果真结束
赋值 (i, max)
赋值 (s, 相除 (相减 (max, min), max))

.子程序 HSI2RGB, 空白型, , 
.参数 h, 小数型, , 
.参数 s, 小数型, , 
.参数 i, 小数型, , 
.参数 r, 整数型, 参考, 
.参数 g, 整数型, 参考, 
.参数 b, 整数型, 参考, 

.局部变量 q, 整数型, , , 
.局部变量 p, 整数型, , , 
.局部变量 Hk, 整数型, , , 
.局部变量 t, 整数型, , "3", 
.局部变量 n, 整数型, , , 

.如果 (等于 (s, 0))
    赋值 (r, 相乘 (i, 255))
    赋值 (g, 相乘 (i, 255))
    赋值 (b, 相乘 (i, 255))
.否则
    .如果 (小于 (i, 0.5))
        赋值 (q, 相加 (相乘 (i, 1), s))
    .否则
        赋值 (q, 相减 (相加 (i, s), 相乘 (i, s)))
    .如果结束
    赋值 (p, 相减 (相乘 (2, i), q))
    赋值 (Hk, 相除 (h, 360))
    赋值 (t [1], 相加 (Hk, 相除 (1, 3)))
    赋值 (t [2], Hk)
    赋值 (t [3], 相减 (Hk, 相除 (1, 3)))
    .计次循环首 (3, n)
        .如果真 (小于 (t [n], 0))
            赋值 (t [n], 相加 (t [n], 1))
        .如果真结束
        .如果真 (大于 (t [n], 1))
            赋值 (t [n], 相减 (t [n], 1))
        .如果真结束
        .如果 (小于 (相乘 (t [n], 6), 1))
            赋值 (t [n], 相加 (p, 相乘 (相减 (q, p), 6, t [n])))
        .否则
            .如果 (小于 (相乘 (t [n], 2), 1))
                赋值 (t [n], q)
            .否则
                .如果 (小于 (相乘 (t [n], 3), 2))
                    赋值 (t [n], 相加 (p, 相乘 (相减 (q, p), 相减 (相除 (2, 3), t [n]), 6)))
                .否则
                    赋值 (t [n], p)
                .如果结束
                
            .如果结束
            
        .如果结束
        
    .计次循环尾 ()
    赋值 (r, 相乘 (t [1], 255))
    赋值 (g, 相乘 (t [2], 255))
    赋值 (b, 相乘 (t [3], 255))
    .如果真 (大于 (r, 255))
        赋值 (r, 255)
    .如果真结束
    .如果真 (大于 (g, 255))
        赋值 (g, 255)
    .如果真结束
    .如果真 (大于 (b, 255))
        赋值 (b, 255)
    .如果真结束
    
.如果结束


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 取_类_函数地址, 整数型, , 
.参数 this, 整数型, , 
.参数 index, 整数型, , 从1开始,[_初始化][_销毁],[xx]



.子程序 取变量地址_整数, 整数型, , 
.参数 var, 整数型, 参考, 



.子程序 取变量地址_字节集, 整数型, , 
.参数 变量, 字节集, 参考, 



.子程序 辅_生成_类回调_易, 字节集, , [只能在类里调用]
.参数 函数序号, 整数型, , 从1开始,[_初始化][_销毁],[xx]
.参数 参数个数, 整数型, 可空, 
.参数 push_ecx, 逻辑型, 可空, 附加到第一个参数;默认为假
.参数 cdecl方式, 逻辑型, 可空, 默认为假



.子程序 到数值_从子程序指针, 整数型, , 
.参数 proc, 子程序指针, , 



.子程序 DumpEBin, 整数型, , GlobalAlloc/GlobalFree
.参数 v, 字节集, , 



.类模块 Gdiplus图形, , , 

.子程序 SetNativeGraphics, 空白型, , 
.参数 graphics, 整数型, , 



.子程序 创建_自图像, 整数型, , 
.参数 image, Gdiplus图像, , 



.子程序 创建_自HWND, 整数型, , 返回0成功,用 取错误描述() 来获取错误信息
.参数 hwnd, 整数型, , 



.子程序 创建_自Hdc, 整数型, , 返回0成功,用 取错误描述() 来获取错误信息
.参数 Hdc, 整数型, , 



.子程序 GetNativeGraphics, 整数型, , 


.子程序 画曲线, 整数型, , 绘制经过一组指定的 Point 结构的基数样条。
.参数 pen, Gdiplus画笔, , 线条画笔
.参数 points, PointF, 数组, 点数组,
.参数 count, 整数型, 可空, 点数组成员数
.参数 offset, 整数型, 可空, 点数组中,开始绘制的点位置,从0开始计算
.参数 numberOfSegments, 整数型, 可空, 点数组中,结束绘制的点位置,
.参数 tension, 小数型, 可空, 张力



.子程序 画直线组, 整数型, , 绘制一系列连接一组 Point 结构的线段。 
.参数 pen, Gdiplus画笔, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, 可空, 



.子程序 画直线, 整数型, , 绘制一条连接由坐标对指定的两个点的线条。 
.参数 pen, Gdiplus画笔, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 x2, 小数型, , 
.参数 y2, 小数型, , 



.子程序 置呈现模式, 整数型, , 
.参数 SmoothingMode, 整数型, , 



.子程序 取呈现模式, 整数型, , 
.参数 取回模式代码, 整数型, 参考, 提供一个整数型变量以接收取回模式代码



.子程序 置文本呈现模式, 整数型, , 
.参数 TextRenderingHint, 整数型, , 



.子程序 取文本呈现模式, 整数型, , 
.参数 取回模式代码, 整数型, 参考, 提供一个整数型变量以接收取回模式代码



.子程序 画文本, 整数型, , 
.参数 string, 文本型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 font, Gdiplus字体, , 
.参数 brush, Gdiplus画刷, , 



.子程序 获取HDC, 整数型, , 
.参数 取回设备场景句柄, 整数型, 参考, 提供一个整数型变量以接收取回HDC,不用后请释放设备场景句柄



.子程序 释放HDC, 整数型, , 
.参数 hdc, 整数型, , 



.子程序 填充矩形, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 清除, 整数型, , 清除整个绘图面并以指定背景色填充。 
.参数 ARGB颜色, 整数型, , 



.子程序 画闭合曲线, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, 可空, 
.参数 tension, 小数型, 可空, 



.子程序 画圆弧, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 startAngle, 小数型, , 
.参数 sweepAngle, 小数型, , 



.子程序 画贝赛尔曲线, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 x2, 小数型, , 
.参数 y2, 小数型, , 
.参数 x3, 小数型, , 
.参数 y3, 小数型, , 
.参数 x4, 小数型, , 
.参数 y4, 小数型, , 



.子程序 画贝赛尔曲线组, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 画矩形, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 画矩形组, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 rects, RectF, 数组, 矩形数组
.参数 count, 整数型, , 矩形数组成员数



.子程序 画椭圆, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 画圆饼, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 startAngle, 小数型, , 
.参数 sweepAngle, 小数型, , 



.子程序 画多边形, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 填充矩形组, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 rects, RectF, 数组, 
.参数 count, 整数型, , 



.子程序 填充多边形, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 
.参数 fillMode, 整数型, , 



.子程序 填充椭圆, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 填充圆饼, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 startAngle, 小数型, , 
.参数 sweepAngle, 小数型, , 



.子程序 填充闭合曲线, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 
.参数 tension, 小数型, , 默认 0.5
.参数 fillMode, 整数型, , 默认 #填充模式_交替



.子程序 画路径, 整数型, , 
.参数 pen, Gdiplus画笔, , 
.参数 path, Gdiplus路径, , 



.子程序 填充路径, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 path, Gdiplus路径, , 



.子程序 填充区域, 整数型, , 
.参数 brush, Gdiplus画刷, , 
.参数 region, Gdiplus区域, , 



.子程序 画图像, 整数型, , 画为原始大小图像
.参数 image, Gdiplus图像, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 



.子程序 画图像_缩放, 整数型, , 画为宽高可变的矩形
.参数 image, Gdiplus图像, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 画图像_扭曲, 整数型, , 画为一个平行四边形。
.参数 image, Gdiplus图像, , 
.参数 左上角x, 小数型, , 图片左上角画出位置
.参数 左上角y, 小数型, , 
.参数 右上角x, 小数型, , 图片右上角画出位置
.参数 右上角y, 小数型, , 
.参数 左下角x, 小数型, , 图片左下角画出位置
.参数 左下角y, 小数型, , 



.子程序 画图像_局部, 整数型, , 把图像的一部分画出为矩形
.参数 image, Gdiplus图像, , 
.参数 x, 小数型, , 画出位置
.参数 y, 小数型, , 
.参数 srcx, 小数型, , 图像局部起点x
.参数 srcy, 小数型, , 图像局部起点y
.参数 srcwidth, 小数型, , 图像局部宽度
.参数 srcheight, 小数型, , 图像局部高度
.参数 srcUnit, 整数型, , 图像单位,默认 #单位_像素



.子程序 置剪辑区域_自图形, 整数型, , 将此 图形 的剪辑区域设置为指定 图形 的 剪辑区域 属性。
.参数 srcgraphics, Gdiplus图形, , 从该对象中获取新剪辑区域。
.参数 combineMode, 整数型, 可空, #合并模式_XXXX



.子程序 置剪辑区域_自矩形, 整数型, , 将此 图形 的剪辑区域设置为指定的矩形。
.参数 x, 小数型, , 表示新的剪辑区域x
.参数 y, 小数型, , 表示新的剪辑区域y
.参数 width, 小数型, , 表示新的剪辑区域宽
.参数 height, 小数型, , 表示新的剪辑区域高
.参数 combineMode, 整数型, 可空, #合并模式_XXXX



.子程序 置剪辑区域_自路径, 整数型, , 将此 图形 的剪辑区域设置为指定的 路径。
.参数 path, Gdiplus路径, , 表示新的剪辑区域。
.参数 combineMode, 整数型, 可空, #合并模式_XXXX



.子程序 置剪辑区域_自区域, 整数型, , 将此 图形 的剪辑区域设置为指定的 区域。
.参数 region, Gdiplus区域, , 表示新的剪辑区域
.参数 combineMode, 整数型, 可空, #合并模式_XXXX



.子程序 置剪辑区域_自HRGN, 整数型, , 将此 图形 的剪辑区域设置为指定的 hRgn
.参数 hRgn, 整数型, , 表示新的剪辑区域
.参数 combineMode, 整数型, 可空, #合并模式_XXXX



.子程序 重置剪辑区域, 整数型, , 将此 图形 的剪辑区域重置为无限区域。


.子程序 平移剪辑区域, 整数型, , 将此 图形 的剪辑区域沿水平方向和垂直方向平移指定的量。
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 



.子程序 取剪辑区域, 整数型, , 
.参数 region, Gdiplus区域, , 



.子程序 取剪辑区域矩形边界, 整数型, , 
.参数 rect, RectF, , 提供RectF变量取返回值



.子程序 是否为空_剪辑区域, 整数型, , 
.参数 是否为空, 逻辑型, 参考, 提供逻辑型变量取返回值



.子程序 取可见剪辑区域矩形边界, 整数型, , 获取或设置此 Graphics 对象的可见剪辑区域的边框。
.参数 rect, RectF, , 提供一个变量取返回值



.子程序 是否为空_可见剪辑区域, 整数型, , 获取一个值，该值指示此 Graphics 对象的可见剪辑区域是否为空。
.参数 是否为空, 逻辑型, 参考, 提供一个变量取返回值



.子程序 是否可见_点, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 是否可见, 逻辑型, 参考, 提供一个变量取返回值



.子程序 是否可见_矩形, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 是否可见, 逻辑型, 参考, 提供一个变量取返回值



.子程序 变形_置矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_取矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_重置, 整数型, , 


.子程序 变形_平移, 整数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 变形_缩放, 整数型, , 
.参数 sx, 小数型, , 
.参数 sy, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 变形_旋转, 整数型, , 
.参数 角度, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 变形_相乘, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 



.子程序 取水平分辨率, 整数型, , 
.参数 dpi, 小数型, 参考, 



.子程序 取垂直分辨率, 整数型, , 
.参数 dpi, 小数型, 参考, 



.类模块 Gdiplus画笔, , , 

.子程序 创建_自颜色, 整数型, , 
.参数 ARGB颜色, 整数型, , 要通过 RGB到ARGB() 转换
.参数 宽度, 小数型, , 



.子程序 创建_自画刷, 整数型, , 
.参数 画刷, Gdiplus画刷, , 
.参数 宽度, 小数型, , 



.子程序 复制到, 整数型, , 
.参数 要复制到的画笔, Gdiplus画笔, , 



.子程序 GetNativePen, 整数型, , 


.子程序 SetNativePen, 空白型, , 
.参数 pen, 整数型, , 



.子程序 置宽度, 整数型, , 
.参数 画笔宽度, 小数型, , 



.子程序 取宽度, 整数型, , 
.参数 取回宽度, 小数型, 参考, 提供一个小数型变量以接收取回宽度



.子程序 置线帽, 整数型, , 
.参数 startCap, 整数型, , 使用 #线帽样式_ 开头的常量
.参数 endCap, 整数型, , 使用 #线帽样式_ 开头的常量
.参数 dashCap, 整数型, , 使用 #虚线线帽样式_ 开头的常量



.子程序 置起点线帽, 整数型, , 
.参数 startCap, 整数型, , 使用 #线帽样式_ 开头的常量



.子程序 置终点线帽, 整数型, , 
.参数 endCap, 整数型, , 使用 #线帽样式_ 开头的常量



.子程序 置虚线线帽, 整数型, , 
.参数 dashCap, 整数型, , 使用 #虚线线帽样式_ 开头的常量



.子程序 取起点线帽, 整数型, , 
.参数 startCap, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 取终点线帽, 整数型, , 
.参数 endCap, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 取虚线线帽, 整数型, , 
.参数 dashCap, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 置线条联接方式, 整数型, , 
.参数 lineJoin, 整数型, , 以 #线条联接方式_ 开头的常量



.子程序 取线条联接方式, 整数型, , 
.参数 lineJoin, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 置斜接长度限制, 整数型, , 设置斜接角上联接宽度的限制。 
.参数 miterLimit, 小数型, , 



.子程序 取斜接长度限制, 整数型, , 获取斜接角上联接宽度的限制。 
.参数 miterLimit, 小数型, 参考, 



.子程序 置画笔对齐方式, 整数型, , 
.参数 penMode, 整数型, , 以 #画笔对齐方式_ 开头的常量



.子程序 取画笔对齐方式, 整数型, , 
.参数 penMode, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 取画笔填充类型, 整数型, , 
.参数 type, 整数型, 参考, 提供一个整数型变量以取得返回的数值,为以 #画笔类型_ 开头的常量



.子程序 置颜色, 整数型, , 
.参数 ARGB颜色, 整数型, , 



.子程序 取颜色, 整数型, , 
.参数 ARGB颜色, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 置画刷, 整数型, , 
.参数 brush, Gdiplus画刷, , 



.子程序 取画刷, 整数型, , 
.参数 brush, Gdiplus画刷, , 取出的画刷



.子程序 置虚线风格, 整数型, , 设置划出的是否虚线
.参数 dashstyle, 整数型, , 以 #虚线风格_ 开头的常量



.子程序 取虚线风格, 整数型, , 
.参数 dashstyle, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 置虚线偏移, 整数型, , 获取或设置直线的起点到短划线图案起始处的距离。
.参数 offset, 小数型, , 



.子程序 取虚线偏移, 整数型, , 获取或设置直线的起点到短划线图案起始处的距离。
.参数 offset, 小数型, 参考, 提供一个小数型变量以取得返回的数值



.子程序 置虚线格式, 整数型, , 获取或设置自定义的短划线和空白区域的数组。
.参数 dashArray, 小数型, 数组, 
.参数 count, 整数型, , 



.子程序 取虚线格式, 整数型, , 获取或设置自定义的短划线和空白区域的数组。
.参数 dashArray, 小数型, 数组, 
.参数 count, 整数型, , 



.子程序 取虚线格式数, 整数型, , 
.参数 count, 整数型, 参考, 提供一个整数型变量以取得返回的数值



.子程序 置复合数组, 整数型, , 获取或设置用于指定复合钢笔的值数组。复合钢笔绘制由平行直线和空白区域组成的复合直线。 
.参数 compoundArray, 小数型, 数组, 用于指定复合数组的实数组。该数组中的元素必须按升序排列，不能小于 0，也不能大于 1。
.参数 count, 整数型, , 



.子程序 取复合数组, 整数型, , 获取或设置用于指定复合钢笔的值数组。复合钢笔绘制由平行直线和空白区域组成的复合直线。
.参数 compoundArray, 小数型, 数组, 
.参数 count, 整数型, , 



.子程序 取复合数组数, 整数型, , 
.参数 count, 整数型, 参考, 



.子程序 变形_置矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_取矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_重置, 整数型, , 


.子程序 变形_相乘, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 



.子程序 变形_平移, 整数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_缩放, 整数型, , 
.参数 sx, 小数型, , 
.参数 sy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_旋转, 整数型, , 
.参数 angle, 小数型, , 
.参数 order, 整数型, 可空, 



.类模块 Gdiplus画刷, , , 

.子程序 创建_固色画刷, 整数型, , 
.参数 ARGB颜色, 整数型, , 要通过 RGB到ARGB() 转换



.子程序 GetNativeBrush, 整数型, , 


.子程序 SetNativeBrush, 空白型, , 
.参数 brush, 整数型, , 



.子程序 复制到, 整数型, , 
.参数 要复制到的画刷, Gdiplus画刷, , 



.子程序 取画刷类型, 整数型, , 
.参数 type, 整数型, 参考, 提供一个整数型变量以取得返回的数值,为以 #画刷类型_ 开头的常数



.子程序 置固色画刷颜色, 整数型, , 
.参数 ARGB颜色, 整数型, , 



.子程序 取固色画刷颜色, 整数型, , 
.参数 ARGB颜色, 整数型, 参考, 



.子程序 创建_阴影画刷, 整数型, , 
.参数 阴影风格, 整数型, , 以 #阴影风格_ 开头的常量
.参数 前景ARGB颜色, 整数型, , 要通过 RGB到ARGB() 转换
.参数 背景ARGB颜色, 整数型, , 要通过 RGB到ARGB() 转换



.子程序 取阴影风格, 整数型, , 
.参数 hatchstyle, 整数型, 参考, 提供一个整数型变量以接受返回数值



.子程序 取阴影前景色, 整数型, , 
.参数 ARGB颜色, 整数型, 参考, 提供一个整数型变量以接受返回数值



.子程序 取阴影背景色, 整数型, , 
.参数 ARGB颜色, 整数型, 参考, 提供一个整数型变量以接受返回数值



.子程序 创建_线性渐变画刷, 整数型, , 
.参数 起始点, PointF, , 线性渐变起始点
.参数 终结点, PointF, , 线性渐变终结点
.参数 起始ARGB颜色, 整数型, , 线性渐变起始色
.参数 结束ARGB颜色, 整数型, , 线性渐变结束色



.子程序 创建_线性渐变画刷_自矩形, 整数型, , 
.参数 线性渐变界限矩形, RectF, , 线性渐变的界限。 
.参数 起始ARGB颜色, 整数型, , 线性渐变起始色
.参数 结束ARGB颜色, 整数型, , 线性渐变结束色
.参数 线性渐变模式, 整数型, , #线性渐变模式_XXXX



.子程序 创建_线性渐变画刷_自矩形角度, 整数型, , 
.参数 线性渐变界限矩形, RectF, , 线性渐变的界限
.参数 起始ARGB颜色, 整数型, , 线性渐变起始色
.参数 结束ARGB颜色, 整数型, , 线性渐变结束色
.参数 角度, 小数型, , 渐变方向线的角度（从 X 轴以顺时针角度计算）。
.参数 角度缩放, 逻辑型, , 设置为真，指定角度受与此 线性渐变画刷 关联的变换所影响；否则为 假。



.子程序 置线性渐变颜色, 整数型, , 
.参数 起始ARGB颜色, 整数型, , 线性渐变起始色
.参数 结束ARGB颜色, 整数型, , 线性渐变结束色



.子程序 取线性渐变颜色, 整数型, , 
.参数 起始ARGB颜色, 整数型, 参考, 提供一个整数型变量接受返回数值
.参数 结束ARGB颜色, 整数型, 参考, 提供一个整数型变量接受返回数值



.子程序 取线性渐变矩形, 整数型, , 
.参数 线性渐变界限矩形, RectF, , 



.子程序 置线性渐变灰度校正, 整数型, , 
.参数 是否启用灰度校正, 逻辑型, , 设置为真,为该 线性渐变画刷 启用了灰度校正。



.子程序 取线性渐变灰度校正, 整数型, , 
.参数 是否启用灰度校正, 逻辑型, 参考, 提供一个逻辑型变量接受返回数值



.子程序 取线性渐变自定过渡数, 整数型, , 
.参数 数量, 整数型, 参考, 



.子程序 置线性渐变自定过渡, 整数型, , 一个 Blend，表示渐变的自定义过渡 ，其中包含混合因子和位置的相应数组。混合因子指定在相应位置处使用的起始色和结束色的百分比。该位置作为沿渐变线的距离的百分比给出。
.参数 自定过渡因子, 小数型, 数组, 
.参数 自定过渡位置, 小数型, 数组, 
.参数 数量, 整数型, , 



.子程序 取线性渐变自定过渡, 整数型, , 获取或设置一个 Blend，它指定定义渐变自定义过渡的位置和因子。 
.参数 自定过渡因子, 小数型, 数组, 
.参数 自定过渡位置, 小数型, 数组, 
.参数 数量, 整数型, , 



.子程序 取线性渐变插值颜色数, 整数型, , 
.参数 count, 整数型, 参考, 



.子程序 置线性渐变插值颜色, 整数型, , 一个 ColorBlend，定义多色线性渐变,包含颜色和位置的相应数组。这些位置是介于 0 到 1 之间的值，指定沿定位相应颜色的渐变线的距离的百分比。设置该属性将在沿渐变线的每一位置创建具有一种颜色的多色渐变。设置该属性将使该 线性渐变画刷 以前的所有颜色、位置和过渡设置无效。
.参数 argbs, 整数型, 数组, 
.参数 blendPositions, 小数型, 数组, 
.参数 count, 整数型, , 



.子程序 取线性渐变插值颜色, 整数型, , 一个 ColorBlend，定义多色线性渐变,包含颜色和位置的相应数组。这些位置是介于 0 到 1 之间的值，指定沿定位相应颜色的渐变线的距离的百分比。设置该属性将在沿渐变线的每一位置创建具有一种颜色的多色渐变。设置该属性将使该 线性渐变画刷 以前的所有颜色、位置和过渡设置无效。
.参数 argbs, 整数型, 数组, 
.参数 blendPositions, 小数型, 数组, 
.参数 count, 整数型, , 



.子程序 置线性渐变钟形共混, 整数型, , 创建基于钟形曲线的渐变过渡过程。 
.参数 focus, 小数型, , 介于 0 到 1 之间的一个值，它指定渐变中心（渐变中只由结束色构成的点）。 
.参数 scale, 小数型, , 介于 0 到 1 之间的一个值，它指定颜色从 focus 过渡的过渡速度。



.子程序 置线性渐变线性共混, 整数型, , 创建一个从中心色向两端单个颜色线性过渡的线性渐变过程。
.参数 focus, 小数型, , 介于 0 到 1 之间的一个值，它指定渐变中心（渐变中只由结束色构成的点）。 
.参数 scale, 小数型, , 介于 0 到 1 之间的一个值，它指定颜色从起始色过渡到 focus（结束色）的过渡速度。 



.子程序 置线性渐变环绕模式, 整数型, , 
.参数 wrapmode, 整数型, , 以 #环绕模式_ 开头的常量



.子程序 取线性渐变环绕模式, 整数型, , 
.参数 wrapmode, 整数型, 参考, 提供一个整数型变量接受返回数值



.子程序 创建_图像纹理画刷, 整数型, , 
.参数 image, Gdiplus图像, , 
.参数 wrapmode, 整数型, 可空, #环绕模式_XXXX,指定此 TextureBrush 对象的平铺方式。 



.子程序 创建_图像纹理画刷_局部, 整数型, , 把图像的一部分创建为画刷
.参数 image, Gdiplus图像, , 
.参数 wrapmode, 整数型, 可空, #环绕模式_XXXX,指定此 TextureBrush 对象的平铺方式。
.参数 x, 小数型, , 图像局部起点x
.参数 y, 小数型, , 图像局部起点y
.参数 width, 小数型, , 图像局部宽度
.参数 height, 小数型, , 图像局部高度



.子程序 置图像纹理环绕模式, 整数型, , 
.参数 wrapmode, 整数型, , #环绕模式_XXXX



.子程序 取图像纹理环绕模式, 整数型, , 
.参数 wrapmode, 整数型, 参考, 提供整数变量取返回值,#环绕模式_XXXX



.子程序 取图像纹理画刷图像, 整数型, , 
.参数 image, Gdiplus图像, , 



.子程序 变形_图像纹理_置矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_图像纹理_取矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_图像纹理_重置, 整数型, , 


.子程序 变形_图像纹理_相乘, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 



.子程序 变形_图像纹理_平移, 整数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_图像纹理_缩放, 整数型, , 
.参数 sx, 小数型, , 
.参数 sy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_图像纹理_旋转, 整数型, , 
.参数 angle, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_线性渐变_置矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_线性渐变_取矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_线性渐变_重置, 整数型, , 


.子程序 变形_线性渐变_相乘, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 



.子程序 变形_线性渐变_平移, 整数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_线性渐变_缩放, 整数型, , 
.参数 sx, 小数型, , 
.参数 sy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_线性渐变_旋转, 整数型, , 
.参数 angle, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 创建_路径渐变画刷, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 
.参数 wrapMode, 整数型, 可空, #环绕模式_XXXX,指定此 TextureBrush 对象的平铺方式。 



.子程序 创建_路径渐变画刷_自路径, 整数型, , 
.参数 path, Gdiplus路径, , 



.子程序 置路径渐变中心点颜色, 整数型, , 
.参数 中心点ARGB颜色, 整数型, , 



.子程序 取路径渐变中心点颜色, 整数型, , 
.参数 中心点ARGB颜色, 整数型, 参考, 



.子程序 变形_路径渐变_取矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_路径渐变_置矩阵, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 变形_路径渐变_重置, 整数型, , 


.子程序 变形_路径渐变_相乘, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 



.子程序 变形_路径渐变_平移, 整数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_路径渐变_缩放, 整数型, , 
.参数 sx, 小数型, , 
.参数 sy, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 变形_路径渐变_旋转, 整数型, , 
.参数 angle, 小数型, , 
.参数 order, 整数型, 可空, 



.子程序 置路径渐变路径, 整数型, , 
.参数 path, Gdiplus路径, , 



.子程序 取路径渐变路径, 整数型, , 
.参数 path, Gdiplus路径, , 



.子程序 置路径渐变中心点, 整数型, , 
.参数 points, PointF, , 



.子程序 取路径渐变中心点, 整数型, , 
.参数 points, PointF, , 



.子程序 取路径渐变矩形边界, 整数型, , 
.参数 rect, RectF, , 



.子程序 置路径渐变环绕模式, 整数型, , 
.参数 wrapmode, 整数型, , 



.子程序 取路径渐变环绕模式, 整数型, , 
.参数 wrapmode, 整数型, 参考, 



.类模块 Gdiplus字体, , , 

.子程序 创建, 整数型, , 
.参数 name, 文本型, , 字体名称
.参数 emSize, 小数型, , 字体尺寸
.参数 style, 整数型, , 字体风格
.参数 unit, 整数型, , 字体度量单位



.子程序 创建_自HDC, 整数型, , 
.参数 hdc, 整数型, , 



.子程序 GetNativeFont, 整数型, , 


.子程序 SetNativeFont, 空白型, , 
.参数 Font, 整数型, , 



.子程序 取字体风格, 整数型, , 
.参数 style, 整数型, 参考, 



.子程序 取字体尺寸, 整数型, , 
.参数 size, 小数型, 参考, 



.子程序 取字体单位, 整数型, , 
.参数 unit, 整数型, 参考, 



.子程序 取字体高度, 整数型, , 
.参数 graphics, Gdiplus图形, , 
.参数 height, 小数型, 参考, 



.类模块 Gdiplus路径, , , 

.子程序 GetNativePath, 整数型, , 


.子程序 SetNativePath, 空白型, , 
.参数 path, 整数型, , 



.子程序 创建, 整数型, , 
.参数 填充模式, 整数型, 可空, 以 #填充模式_ 开头的常量, 默认 #填充模式_交替



.子程序 创建2, 整数型, , 
.参数 points, PointF, 数组, 
.参数 types, 字节型, 数组, 
.参数 count, 整数型, , 
.参数 fillMode, 整数型, 可空, 



.子程序 加入直线, 整数型, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 x2, 小数型, , 
.参数 y2, 小数型, , 



.子程序 加入直线组, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 加入圆弧, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 startAngle, 小数型, , 
.参数 sweepAngle, 小数型, , 



.子程序 加入贝赛尔曲线, 整数型, , 
.参数 x1, 小数型, , 
.参数 y1, 小数型, , 
.参数 x2, 小数型, , 
.参数 y2, 小数型, , 
.参数 x3, 小数型, , 
.参数 y3, 小数型, , 
.参数 x4, 小数型, , 
.参数 y4, 小数型, , 



.子程序 加入贝赛尔曲线组, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 加入曲线, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, 可空, 
.参数 offset, 整数型, 可空, 
.参数 numberOfSegments, 整数型, 可空, 
.参数 tension, 小数型, 可空, 



.子程序 加入闭合曲线, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, 可空, 
.参数 tension, 小数型, 可空, 



.子程序 加入矩形, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 加入矩形组, 整数型, , 
.参数 rects, RectF, 数组, 
.参数 count, 整数型, , 



.子程序 加入椭圆, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 



.子程序 加入圆饼, 整数型, , 
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 startAngle, 小数型, , 
.参数 sweepAngle, 小数型, , 



.子程序 加入多边形, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 加入路径, 整数型, , 
.参数 addingPath, Gdiplus路径, , 
.参数 connect, 逻辑型, , 指定添加的路径中的第一个图形是否是该路径中最后一个图形的一部分。为 真 指定（如果可能）添加的路径中的第一个图形是该路径中最后一个图形的一部分。为 假 指定添加的路径中的第一个图形与该路径中最后一个图形不同。



.子程序 加入文本, 整数型, , 
.参数 string, 文本型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 fontname, 文本型, , 
.参数 style, 整数型, , 
.参数 emSize, 小数型, , 



.子程序 复制到, 整数型, , 
.参数 clonePath, Gdiplus路径, , 



.子程序 重设路径, 整数型, , 清空 PathPoints 和 PathTypes 数组并将 FillMode 设置为 Alternate。


.子程序 置填充模式, 整数型, , 
.参数 fillmode, 整数型, , #填充模式_XXXX



.子程序 取填充模式, 整数型, , 
.参数 fillmode, 整数型, 参考, 提供一个整数型变量接受返回数值



.子程序 取点数量, 整数型, , 
.参数 count, 整数型, 参考, 



.子程序 取路径数据, 整数型, , 
.参数 pathData, PathData, , 



.子程序 开始新图形, 整数型, , 不闭合当前图形即开始一个新图形。后面添加到该路径的所有点都被添加到此新图形中。 


.子程序 闭合当前图形, 整数型, , 闭合当前图形并开始新的图形。如果当前图形包含一系列相互连接的直线和曲线，该方法通过连接一条从终结点到起始点的直线，闭合该环回。


.子程序 闭合所有图形, 整数型, , 闭合此路径中所有开放的图形并开始一个新图形。它通过连接一条从图形的终结点到起始点的直线，闭合每一开放的图形。 


.子程序 设置标记, 整数型, , 创建路径上的标记，标记可用于分隔该路径的各部分。然后可以使用 NextMarker 方法循环访问路径中的标记。标记用来分隔各组子路径。在路径的两个标记间可含有一个或多个子路径。


.子程序 清除标记, 整数型, , 清除此路径的所有标记。 


.子程序 反转路径点顺序, 整数型, , 反转此 GraphicsPath 的 PathPoints 数组中各点的顺序。


.子程序 取最终点, 整数型, , 获取此 GraphicsPath 的 PathPoints 数组中的最后的点。 
.参数 lastPoint, PointF, , 提供一个PointF变量接受返回值



.子程序 取路径点类型数组, 整数型, , 获取 PathPoints 数组中相应点的类型。指定路径中相应点的类型的字节数组。 
.参数 types, 字节型, 数组, 
.参数 count, 整数型, , 



.子程序 取路径点坐标数组, 整数型, , 
.参数 points, PointF, 数组, 
.参数 count, 整数型, , 



.子程序 是否在路径内部, 整数型, , 指示指定点是否包含在此 GraphicsPath 内，它位于指定的 Graphics 的可见剪辑区域内。
.参数 x, 小数型, , 测试点的 X 坐标。
.参数 y, 小数型, , 测试点的 Y 坐标。
.参数 graphics, Gdiplus图形, , 要对其测试可见性的 Graphics。
.参数 result, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 是否在路径轮廓, 整数型, , 指示当使用指定的 Pen 和 Graphics 绘制此 GraphicsPath 时，指定点是否包含在后者的轮廓内（下）。 
.参数 x, 小数型, , 测试点的 X 坐标。
.参数 y, 小数型, , 测试点的 Y 坐标。
.参数 pen, Gdiplus画笔, , 要测试的 Pen。绘制路径边界的画笔粗细
.参数 graphics, Gdiplus图形, , 要对其测试可见性的 Graphics。
.参数 result, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 平展路径, 整数型, , 此 GraphicsPath 对象中的各段曲线转换成相连的线段序列。
.参数 matrix, Gdiplus矩阵, 可空, 用来在展平前对此 GraphicsPath 进行变形的 Matrix 对象。
.参数 flatness, 小数型, 可空, 指定曲线和其展平的近似直线之间的最大允许误差。值 0.25 是默认值。降低该展平值将增加近似直线中线段的数目。



.子程序 变换路径, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 



.子程序 取路径矩形边界, 整数型, , 取得限定此 GraphicsPath 对象的矩形。
.参数 bounds, RectF, , 
.参数 matrix, Gdiplus矩阵, 可空, 
.参数 pen, Gdiplus画笔, 可空, 



.子程序 扩展路径, 整数型, , 在用指定的画笔绘制此路径时，用包含所填充区域的曲线代替此路径。
.参数 pen, Gdiplus画笔, , 指定路径原始轮廓和此方法创建的新轮廓之间的宽度。 
.参数 matrix, Gdiplus矩阵, 可空, 指定扩展前应用于路径的变形。
.参数 flatness, 小数型, 可空, 指定曲线展平的值。



.子程序 轮廓, 整数型, , 
.参数 matrix, Gdiplus矩阵, 可空, 
.参数 flatness, 小数型, 可空, 



.子程序 扭曲路径, 整数型, , 一个 PointF 结构的数组，它们定义由 srcRect 定义的矩形将变形到的平行四边形。该数组可以包含三个或四个元素。如果该数组包含三个元素，则平行四边形的右下角位置的点可从前三个点导出。
.参数 matrix, Gdiplus矩阵, 可空, 
.参数 points, PointF, 数组, 一个 PointF 结构的数组，它们定义由 srcRect 定义的矩形将变形到的平行四边形。该数组可以包含三个或四个元素。如果该数组包含三个元素，则平行四边形的右下角位置的点可从前三个点导出。
.参数 count, 整数型, , PointF 数组成员数
.参数 srcx, 小数型, , 一个 RectangleF 结构，它表示将变形为 destPoints 定义的平行四边形的矩形。 
.参数 srcy, 小数型, , 同上
.参数 srcwidth, 小数型, , 同上
.参数 srcheight, 小数型, , 同上
.参数 warpMode, 整数型, 可空, 一个 WarpMode 枚举，它指定此扭曲操作是使用透视模式还是双线性模式。 
.参数 flatness, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。



.类模块 Gdiplus区域, , , 

.子程序 GetNativeRegion, 整数型, , 


.子程序 SetNativeRegion, 空白型, , 
.参数 region, 整数型, , 



.子程序 创建_无限区域, 整数型, , 创建一个无限大小的区域


.子程序 创建_自矩形, 整数型, , 
.参数 rect, RectF, , 



.子程序 创建_自路径, 整数型, , 
.参数 path, Gdiplus路径, , 



.子程序 创建_自区域数据, 整数型, , 
.参数 regionData, 字节型, 数组, 区域数据数组
.参数 size, 整数型, , 数组大小



.子程序 创建_自HRGN, 整数型, , 
.参数 hRgn, 整数型, , 区域句柄



.子程序 复制到, 整数型, , 
.参数 cloneRegion, Gdiplus区域, , 



.子程序 合并路径, 整数型, , 
.参数 path, Gdiplus路径, , 要合并的路径
.参数 合并模式, 整数型, , 以 #合并模式_ 开头的常量



.子程序 合并矩形, 整数型, , 
.参数 rect, RectF, , 要合并的矩形
.参数 合并模式, 整数型, , 以 #合并模式_ 开头的常量



.子程序 合并区域, 整数型, , 
.参数 region, Gdiplus区域, , 要合并的区域
.参数 合并模式, 整数型, , 以 #合并模式_ 开头的常量



.子程序 置为无限, 整数型, , 将此 区域 初始化为无限大小的内部。


.子程序 置为空, 整数型, , 将此 区域 初始化为空内部。


.子程序 平移区域, 整数型, , 使此 区域 的坐标偏移指定的量。
.参数 dx, 小数型, , 水平偏移的量。
.参数 dy, 小数型, , 垂直偏移的量。



.子程序 取区域矩形边界, 整数型, , 获取一个表示矩形的 RectangleF 结构，该矩形形成 Graphics 对象的绘制表面上此 Region 对象的边界。
.参数 graphics, Gdiplus图形, , 区域所在的图形对象
.参数 rect, RectF, , 提供一个RectF变量接受返回值



.子程序 取区域HRGN, 整数型, , 返回指定图形上下文中此 Region 对象的 Windows 句柄。
.参数 graphics, Gdiplus图形, , 区域所在的图形对象
.参数 hRgn, 整数型, 参考, 提供一个整数型变量接受返回值



.子程序 是否空区域, 整数型, , 测试此 Region 对象在指定的绘制表面上是否有空的内部。
.参数 graphics, Gdiplus图形, , 区域所在的图形对象
.参数 是否为空, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 是否无限区域, 整数型, , 测试此 Region 对象在指定的绘制表面上是否有无限内部。
.参数 graphics, Gdiplus图形, , 
.参数 是否为无限, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 是否相等, 整数型, , 比较两个区域是否相等
.参数 region, Gdiplus区域, , 要比较的区域
.参数 graphics, Gdiplus图形, , 区域所在的图形对象
.参数 是否相等, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 取区域数据尺寸, 整数型, , 
.参数 bufferSize, 整数型, 参考, 提供一个整数型变量接受返回值



.子程序 取区域数据, 整数型, , 
.参数 buffer, 字节型, 数组, 取回数据的存放数组
.参数 bufferSize, 整数型, , 要取回多少个数据
.参数 sizeFilled, 整数型, 参考, 真实取回多少个数据, 提供一个整数型变量接受返回值



.子程序 是否在区域内_点, 整数型, , 判断一个点是否在区域内
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 graphics, Gdiplus图形, , 
.参数 是否在内, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 是否在区域内_矩形, 整数型, , 判断一个矩形是否在区域内,只要有任何重叠,就认为是真
.参数 x, 小数型, , 
.参数 y, 小数型, , 
.参数 width, 小数型, , 
.参数 height, 小数型, , 
.参数 graphics, Gdiplus图形, , 
.参数 是否在内, 逻辑型, 参考, 提供一个逻辑型变量接受返回值



.子程序 变换区域, 整数型, , 用指定的 Matrix 对象变换此 Region 对象。
.参数 matrix, Gdiplus矩阵, , 



.子程序 取区域扫描矩形数组, 整数型, , 返回与此 Region 对象近似的 RectangleF 结构的数组。
.参数 rects, RectF, 数组, 
.参数 count, 整数型, 参考, 
.参数 matrix, Gdiplus矩阵, , 



.子程序 取区域扫描矩形数量, 整数型, , 
.参数 count, 整数型, 参考, 
.参数 matrix, Gdiplus矩阵, , 



.类模块 Gdiplus图像, , , 

.子程序 GetNativeImage, 整数型, , 


.子程序 SetNativeImage, 空白型, , 
.参数 Image, 整数型, , 



.子程序 载入图像_自文件, 整数型, , 
.参数 文件名, 文本型, , 



.子程序 载入图像_自字节集, 整数型, , 
.参数 图像字节集, 字节集, , 



.子程序 保存图像_到字节集, 整数型, , 
.参数 取回图像数据, 字节集, , 
.参数 编码器CLSID, 字节集, , 
.参数 编码器参数, 未知类型0x41011A64, 可空 数组, 



.子程序 取图像类型, 整数型, , 
.参数 type, 整数型, 参考, 提供一个整数型变量接受返回值,是以 #图像类型_ 开头的常量



.子程序 创建位图_自文件, 整数型, , 
.参数 filename, 文本型, , 



.子程序 取图像宽度, 整数型, , 
.参数 width, 整数型, 参考, 提供一个整数型变量接受返回值



.子程序 取图像高度, 整数型, , 
.参数 height, 整数型, 参考, 提供一个整数型变量接受返回值



.子程序 创建位图_自图形, 整数型, , 
.参数 width, 整数型, , 
.参数 height, 整数型, , 
.参数 target, Gdiplus图形, , 以此图形的分辨率初始化位图。 



.子程序 创建位图_自HBITMAP, 整数型, , 
.参数 hBitmap, 整数型, , 要从其创建 Bitmap 对象的 GDI 位图句柄。 
.参数 hpal, 整数型, , 如果在 hBitmap 参数中指定的位图不是与设备无关的位图 (DIB)，则为用于定义位图颜色的 GDI 调色板的句柄。



.子程序 创建位图_自HICON, 整数型, , 
.参数 hicon, 整数型, , 



.子程序 取位图HBITMAP, 整数型, , 需要调用 DeleteObject 以释放 hBitmap。
.参数 返回hBitmap, 整数型, 参考, 提供一个整数型变量接受返回值
.参数 背景ARGB颜色, 整数型, 可空, 指定背景色。如果位图完全不透明，则忽略此参数。



.子程序 取位图HICON, 整数型, , 
.参数 返回hBitmap, 整数型, 参考, 提供一个整数型变量接受返回值



.子程序 置位图点, 整数型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 ARGB颜色, 整数型, , 



.子程序 取位图点, 整数型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 ARGB颜色, 整数型, 参考, 



.子程序 置位图分辨率, 整数型, , 
.参数 xdpi, 小数型, , Bitmap 的水平分辨率，以每英寸的点数为单位。 
.参数 ydpi, 小数型, , Bitmap 的垂直分辨率，以每英寸的点数为单位。 



.子程序 取图像原始格式, 整数型, , 
.参数 format, 字节集, , 提供一个字节集接受返回值



.子程序 保存图像_到文件, 整数型, , 
.参数 文件名, 文本型, , 
.参数 编码器CLSID, 字节集, , 
.参数 编码器参数, 未知类型0x41011A64, 可空 数组, 



.子程序 取图像编码器参数, 整数型, , 
.参数 clsidEncoder, 字节集, , 
.参数 buffer, 未知类型0x41011A64, 数组, 



.子程序 取图像物理尺寸, 整数型, , 获取此图像的宽度和高度。
.参数 width, 小数型, 参考, 提供小数型变量取返回值
.参数 height, 小数型, 参考, 提供小数型变量取返回值



.子程序 取图像边界矩形, 整数型, , 以指定的单位获取此 Image 对象的边框。
.参数 srcRect, RectF, , 提供RectF变量取返回值
.参数 srcUnit, 整数型, 参考, 提供整数型变量取返回值,指定该矩形的单位。#单位_XXXX



.子程序 取图像水平分辨率, 整数型, , 获取此 Image 对象的水平分辨率（以“像素/英寸”为单位）。
.参数 resolution, 小数型, 参考, 提供小数型变量取返回值



.子程序 取图像垂直分辨率, 整数型, , 获取此 Image 对象的垂直分辨率（以“像素/英寸”为单位）。
.参数 resolution, 小数型, 参考, 提供小数型变量取返回值



.子程序 取图像属性标记, 整数型, , 获取此 Image 对象的属性标记。
.参数 flags, 整数型, 参考, 提供整数型变量取返回值



.子程序 取图像像素格式, 整数型, , 指定图像中每个像素的颜色数据的格式。
.参数 format, 整数型, 参考, 提供整数型变量取返回值。#像素格式_XXXX



.子程序 取图像编码器信息, 整数型, , 
.参数 encoders, ImageCodecInfo, 数组, 



.类模块 Gdiplus矩阵, , , 

.子程序 GetNativeMatrix, 整数型, , 


.子程序 SetNativeMatrix, 空白型, , 
.参数 Matrix, 整数型, , 



.子程序 创建, 整数型, , 


.子程序 创建2, 整数型, , 
.参数 m11, 小数型, , 
.参数 m12, 小数型, , 
.参数 m21, 小数型, , 
.参数 m22, 小数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 



.子程序 创建3, 整数型, , 
.参数 rect, RectF, , 
.参数 dstplg, PointF, , 



.子程序 复制到, 整数型, , 
.参数 cloneMatrix, Gdiplus矩阵, , 



.子程序 平移, 整数型, , 按指定的顺序将指定的转换向量应用到此 Matrix 对象。
.参数 offsetX, 小数型, , 
.参数 offsetY, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 旋转, 整数型, , 
.参数 角度, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 逆转, 整数型, , 


.子程序 缩放, 整数型, , 
.参数 scaleX, 小数型, , 
.参数 scaleY, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 相乘, 整数型, , 如果指定的顺序是 MatrixOrder.Prepend，则按预先计算的顺序将此 Matrix 对象乘以指定的矩阵。如果指定的顺序是 MatrixOrder.Append，则按追加的顺序将此 Matrix 对象乘以指定的矩阵。
.参数 matrix, Gdiplus矩阵, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 切变, 整数型, , 仅当其中一个参数为 0 时此方法中应用的变形才是纯切变。当 shearY 因子为 0 时，应用于原始矩形的变形将下边缘水平移动矩形高度的 shearX 倍。当 shearX 因子为 0 时，会将右边缘垂直移动矩形宽度的 shearY 倍。请注意两个参数均不为零时这种情况，因为结果很难预料。例如，如果两个因子均为 1，则变形非常特殊（因此不可逆），将整个平面挤压成一条直线。
.参数 shearX, 小数型, , 
.参数 shearY, 小数型, , 
.参数 order, 整数型, 可空, 默认 #矩阵顺序_预先计算



.子程序 置矩阵元素, 整数型, , 
.参数 m11, 小数型, , 
.参数 m12, 小数型, , 
.参数 m21, 小数型, , 
.参数 m22, 小数型, , 
.参数 dx, 小数型, , 
.参数 dy, 小数型, , 



.子程序 取矩阵元素, 整数型, , 
.参数 matrixOut, 小数型, 数组, 提供小数数组接受返回值



.子程序 重置矩阵, 整数型, , 


.子程序 转换点数组, 整数型, , 
.参数 pts, PointF, 数组, 
.参数 count, 整数型, 可空, 



.子程序 转换矢量数组, 整数型, , 将数组中的每个矢量与矩阵相乘。该矩阵的转换元素（第三行）被忽略。
.参数 pts, PointF, 数组, 
.参数 count, 整数型, 可空, 



.子程序 是否可逆转, 整数型, , 
.参数 result, 逻辑型, 参考, 提供逻辑变量取返回值



.子程序 是否单位矩阵, 整数型, , 
.参数 result, 逻辑型, 参考, 提供逻辑变量取返回值



.子程序 是否相等, 整数型, , 
.参数 matrix, Gdiplus矩阵, , 
.参数 result, 逻辑型, 参考, 提供逻辑变量取返回值



.类模块 窗口子类化, , , 

.子程序 还原, 整数型, , 


.子程序 初始化, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 新窗口过程, 子程序指针, , 



.子程序 调用旧窗口过程, 整数型, , 
.参数 窗口句柄, 整数型, , 
.参数 消息号, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 GDIPlus装载, 整数型, , 整个程序只能调用一次


.子程序 GDIPlus卸载, 整数型, , 整个程序只能调用一次


.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 



.子程序 RGB到ARGB, 整数型, , 
.参数 RGB颜色, 整数型, , 
.参数 透明度, 整数型, , 



.子程序 取错误描述, 文本型, , 
.参数 返回码, 整数型, , 



.子程序 W2A, 文本型, , 将Unicode转成Ansi
.参数 欲转换的文本, 整数型, , Unicode文本内存地址




 ' 不属于任何一个程序集、类模块的函数：
