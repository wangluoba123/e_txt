 ' 文件类型：Windows模块源码

 ' 程序名称：fps表格类模块 雪松
 ' 程序描述：所有属性可取可置(除当前行()外,本属性只能取)!!
对于fps表格,如果参数为空,说明此属性为取属性(除非特殊注明)..否则加上参数即为置属性.
如:fps表.行数()  表示取行数
而fps表.行数(8)  表示置行数为8行
其它类同

对于fps表格打印预览类:置属性前 会加入 置_****()的形式

@备注:
特别感谢大鸟的黑月ocx组件驱动库
挂接事件请参考我的其它源程序
感谢您的使用
 ' 程序作者：雪松
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：版权没有,随意复制.  QQ:379049482
自己写的子程序 会在后面加入 **_自定义的字样,另外,本fps表格的句柄比较特殊,在普通版中用 fps表格.取窗口句柄()取出的句柄是错误的.就是在ocx支持库中用创建ocx的方法取出的句柄也是假的. 只有用fps.句柄()的方法是正确的.不过我对创建ocx()的返回值作了修正,返回是正确的句柄.
另外需要说明的一点:通用事件未录入进去.如果要加入通用事件,不妨使用鼠标和键盘钩子来操作!
 ' 版本号：1.1
 ' 创建号：1.11



.图片 城, " ' 已保存到：D:\易语言学习\Data\fps表格类模块-雪松.e\城", , 
.常量 单元格类型日期, "0", 公开, 单元格类型  0日期  1文本  2 双精度小数,  3 整数, 4贴图, 5. 只读  6.时间 ,7 按钮, 8 组合框  9 图片  10 复选框    11, 自绘   12,货币,  13,数字,   14,百分比 15, 科学,    16,自定义
.常量 单元格类型文本, "1", 公开, 单元格类型 
.常量 单元格类型双精度小数, "2", 公开, 单元格类型 
.常量 单元格类型整数, "3", 公开, 单元格类型 
.常量 单元格类型贴图, "4", 公开, 单元格类型 
.常量 单元格类型只读, "5", 公开, 单元格类型 
.常量 单元格类型时间, "6", 公开, 单元格类型 
.常量 单元格类型按钮, "7", 公开, 单元格类型 
.常量 单元格类型组合框, "8", 公开, 单元格类型 
.常量 单元格类型图片, "9", 公开, 单元格类型 
.常量 单元格类型复选框, "10", 公开, 单元格类型 
.常量 单元格类型自绘, "11", 公开, 单元格类型 
.常量 单元格类型货币, "12", 公开, 单元格类型 
.常量 单元格类型数字, "13", 公开, 单元格类型 
.常量 单元格类型百分比, "14", 公开, 单元格类型 
.常量 单元格类型科学, "15", 公开, 单元格类型 
.常量 单元格类型自定义, "16", 公开, 单元格类型 
.常量 WM_SETREDRAW, "11", , 
.常量 顶对齐, "0", 公开, 
.常量 左对齐, "0", 公开, 
.常量 右对齐, "1", 公开, 
.常量 底对齐, "1", 公开, 
.常量 居中对齐, "2", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' BMOleDriver {EB5A8679-6C96-4465-A329-7911418F2582} 1 1 黑月OCX组件驱动支持库




数据类型 矩形坐标_, , 
    .成员 矩形左边, 空白型, , , 
    .成员 矩形顶边, 空白型, , , 
    .成员 矩形右边, 空白型, , , 
    .成员 矩形底边, 空白型, , , 


.DLL命令 movewindow, 整数型, "user32", "MoveWindow", , 
    .参数 句柄, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 w, 整数型, , 
    .参数 h, 整数型, , 
    .参数 bRepaint, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "user32.dll", "GetWindowRect", 公开, 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
    .参数 句柄, 整数型, , Long，想获得范围矩形的那个窗口的句柄
    .参数 大小, 矩形坐标_, 传址, RECT，屏幕坐标中随同窗口装载的矩形(左边,顶边,右边,底边)

.DLL命令 InvalidateRect, 整数型, "user32", "InvalidateRect", , 这个函数屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 待屏蔽窗口的句柄
    .参数 lpRect, 整数型, , RECT，用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口
    .参数 bErase, 整数型, , TRUE（非零）导致指定的区域在重画前先删除;

.DLL命令 ValidateRect, 整数型, "user32", "ValidateRect", , 校验窗口的全部或部分客户区。这样便可告之windows指定的区域不需要重画  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 欲检验的窗口句柄
    .参数 lpRect, 整数型, , RECT，指定一个矩形结构，用于描叙欲校验的矩形部分。可使用ValidateRectBynum，同时将lpRect设为零（Long数据类型），从而对整个窗口进行校验;

.DLL命令 UpdateWindow, 整数型, "user32", "UpdateWindow", , 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法  非零表示成功，零表示失败
    .参数 hwnd, 整数型, , 欲更新窗口的句柄;

.DLL命令 GetCurrentProcess, 整数型, "kernel32", "GetCurrentProcess", 公开, 获取当前进程的一个伪句柄

.DLL命令 窗口是否可见, 整数型, "", "IsWindowVisible", 公开, 判断窗口是否可见  如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 发送信息_整数, 整数型, "user32", "SendMessageA", 公开, 最后的参数为整数型
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wparam, 整数型, , 
    .参数 lparam, 整数型, , 

.DLL命令 SetFocus_窗口置焦点, 整数型, "", "SetFocus", 公开, 将输入焦点设到指定的窗口。如有必要，会激活窗口  (返回前一个拥有焦点的窗口的句柄)
    .参数 窗口句柄, 整数型, , 准备接收焦点的窗口的句柄(必须为同一线程)

.DLL命令 GetModuleHandleA, 整数型, "", "GetModuleHandleA", 公开, 
    .参数 lpModuleName, 文本型, , 

.DLL命令 WriteBytes, 整数型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 控制窗口状态, 整数型, "", "ShowWindow", 公开, ShowWindow控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）ShowWindow
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由命令
    .参数 nCmdShow, 整数型, , 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活  1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 fp, fpspread表格类, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
fp.创建 (66500, )
输出调试文本 (fp.列宽 (1))
fp.列宽 (1, 12)
输出调试文本 (fp.列宽 (1))
 ' 输出调试文本 (fp.列数 ())
 ' 输出调试文本 (fp.行数 ())
 ' fp.列数 (1)
 ' fp.行数 (1)
 ' 输出调试文本 (fp.列数 ())
 ' 输出调试文本 (fp.行数 ())
输出调试文本 (fp.限制列数 ())
fp.复选框图片 (12)
fp.图片格图片 (fp.方法_从文件加载图片 (“D:\My Documents\凶器.gif”, 2))

.子程序 移动窗口, 空白型, , 移动指定窗口(无返回值)
.参数 临时句柄, 整数型, , 欲移动窗口的句柄
.参数 窗口新左边, 整数型, 可空, 可空:  空或 9999 原左边不变
.参数 窗口新顶边, 整数型, 可空, 可空:   空或9999 原顶边不变
.参数 窗口新宽度, 整数型, 可空, 可空:原宽度不变
.参数 窗口新高度, 整数型, 可空, 可空:原高度不变

.局部变量 位置大小, 矩形坐标_, , , 

GetWindowRect (临时句柄, 位置大小)
.如果真 (或者 (等于 (窗口新左边, 9999), 是否为空 (窗口新左边)))
    赋值 (窗口新左边, 位置大小.矩形左边)
.如果真结束
.如果真 (或者 (等于 (窗口新顶边, 9999), 是否为空 (窗口新顶边)))
    赋值 (窗口新顶边, 位置大小.矩形顶边)
.如果真结束
.如果真 (等于 (窗口新宽度, 0))
    赋值 (窗口新宽度, 相减 (位置大小.矩形右边, 位置大小.矩形左边))
.如果真结束
.如果真 (等于 (窗口新高度, 0))
    赋值 (窗口新高度, 相减 (位置大小.矩形底边, 位置大小.矩形顶边))
.如果真结束
movewindow (临时句柄, 窗口新左边, 窗口新顶边, 窗口新宽度, 窗口新高度, 1)

.类模块 fpspread表格类, , , 

.程序集变量 ocx, 未知类型0x20001, , , 
.程序集变量 允许修改单元格块, 逻辑型, , , 
.程序集变量 对象, 对象, , , fps表格的对象
.程序集变量 窗口句柄, 空白型, , , fps表格的句柄
.程序集变量 sheet表句柄, 空白型, , , fps sheet表的句柄
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
写注册项 (#本地机器, “SOFTWARE\Classes\Profile.Control.Data\ProductRoller\”, { 48, 48, 48, 48, 48, 48, 48, 48, 6, 159, 173, 176, 182, 114, 83, 215, 233, 18, 30, 55, 195, 115, 164, 38, 202, 228, 75, 15, 112, 170, 72, 238, 93, 247, 249, 190, 97, 71, 10, 242 })
运行 (相加 (“regsvr32 /s ”, 取运行目录 (), “\fpSPR80.OCX”), 假, )

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
对象.清除 ()
ocx.未知支持库函数_5 (对象)

.子程序 取黑月com类, 未知类型0x20001, 公开, 
返回 (ocx)

.子程序 创建, 整数型, 公开, 成功返回窗口句柄,失败返回0  创建后的表格默认为5行5列
.参数 父窗口, 整数型, , 
.参数 左, 整数型, 可空, 
.参数 顶, 整数型, 可空, 
.参数 宽, 整数型, 可空, 默认60
.参数 高, 整数型, 可空, 默认60
.参数 边框, 整数型, 可空, 

.局部变量 进程句柄, 整数型, , , 
.局部变量 dll基址, 整数型, , , 
.局部变量 计次, 整数型, , , 

.如果真 (是否为空 (宽))
    赋值 (宽, 60)
.如果真结束
.如果真 (是否为空 (高))
    赋值 (高, 60)
.如果真结束
赋值 (窗口句柄, ocx.未知支持库函数_2 (父窗口, “FPSpreadADO.fpSpread.6”, 左, 顶, 宽, 高, 边框)) ' 类名:progid
赋值 (对象, ocx.未知支持库函数_3 ())
行数 (5)
列数 (5)
 ' fp对象.查看 ()

 ' 以下进行日期框中英文字母的替换
赋值 (进程句柄, GetCurrentProcess ())
赋值 (dll基址, 取dll基址 (“fpSPR80.OCX”))
.计次循环首 (12, 计次)
    写内存文本 (进程句柄, 相加 (dll基址, 到整数 (转换十六到十 (“148220”)), 相乘 (32, 相减 (计次, 1))), 相加 (取月 (计次), “月”))
.计次循环尾 ()
 ' 写内存文本 (进程句柄, dll基址 ＋ 到整数 (转换十六到十 (“148220”)), “一月”)
 ' 写内存文本 (进程句柄, dll基址 ＋ 到整数 (转换十六到十 (“148240”)), “二月”)
 ' 写内存文本 (进程句柄, dll基址 ＋ 到整数 (转换十六到十 (“148260”)), “三月”)
.计次循环首 (7, 计次)
    写内存文本 (进程句柄, 相加 (dll基址, 到整数 (转换十六到十 (“148600”)), 相乘 (32, 相减 (计次, 1))), 相加 (“周”, 取周 (计次)))
.计次循环尾 ()
 ' 进程取模块 ()
赋值 (sheet表句柄, 句柄 ())
返回 (窗口句柄)

.子程序 转换十六到十, 文本型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

.变量循环首 (1, 取文本长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 取文本中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (取文本长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
返回 (到文本 (结果))

.子程序 写内存文本, 逻辑型, , 
.参数 进程句柄, 整数型, , 进程句柄
.参数 地址, 整数型, , 内存地址
.参数 文本变量, 文本型, , 写入数据

.局部变量 临时字节集, 字节集, , , 

 ' .如果真 (不等于 (进程句柄, 0))
     ' WriteText (进程句柄, 地址, 变量, 取文本长度 (变量), 0)
     ' 返回 (真)
.如果真结束
 ' 返回 (假)
赋值 (临时字节集, 到字节集 (文本变量))
.如果真 (不等于 (进程句柄, 0))
    WriteBytes (进程句柄, 地址, 相加 (临时字节集, { 0 }), 取字节集长度 (相加 (临时字节集, { 0 })), 0)
    返回 (真)
.如果真结束
返回 (假)

.子程序 取dll基址, 整数型, , 可能只能取系统dll的
.参数 dll文本名, 文本型, , 

返回 (GetModuleHandleA (dll文本名))

.子程序 取周, 文本型, , 
.参数 计次数, 空白型, , 

返回 (多项选择 (计次数, “天”, “一”, “二”, “三”, “四”, “五”, “六”))

.子程序 取月, 文本型, , 
.参数 变量, 空白型, , 

返回 (多项选择 (变量, “一”, “二”, “三”, “四”, “五”, “六”, “七”, “八”, “九”, “十”, “十一”, “十二”))

.子程序 移动, 空白型, , 
.参数 左, 空白型, 可空, 
.参数 右, 空白型, 可空, 
.参数 宽, 空白型, 可空, 
.参数 高, 空白型, 可空, 

移动窗口 (窗口句柄, 左, 右, 宽, 高)

.子程序 取fps表对象, 对象, , 
返回 (对象)

.子程序 列宽, 整数型, , 取/置列宽.参二为空时为取, 为置时,返回0 成功,返回-1 失败
.参数 lcol, 整数型, , 
.参数 参数2, 双精度小数型, 可空, 

.如果 (是否为空 (参数2)) ' 为取
    返回 (对象.读数值属性 (“ColWidth”, lcol))
.否则
    
.如果结束
返回 (选择 (对象.写属性 (“ColWidth”, lcol, 参数2), 0, -1))


.子程序 最大文本列宽, 双精度小数型, , 取/置文本最大列宽.参二为空时为取, 为置时,返回0 成功,返回-1 失败
.参数 lcol, 整数型, , 
.参数 参数2, 双精度小数型, 可空, 

.如果 (是否为空 (参数2))
    返回 (对象.读数值属性 (“MaxTextColWidth”, lcol))
.否则
    
.如果结束
返回 (选择 (对象.写属性 (“MaxTextColWidth”, lcol, 参数2), 0, -1))


.子程序 最大文本行高, 双精度小数型, , 取/置文本最大行高.参二为空时为取, 为置时,返回0 成功,返回-1 失败
.参数 lrow, 整数型, , 行
.参数 参数2, 双精度小数型, 可空, 

.如果真 (是否为空 (参数2))
    返回 (对象.读数值属性 (“MaxTextRowHeight”, lrow))
.如果真结束
返回 (选择 (对象.写属性 (“MaxTextRowHeight”, lrow, 参数2), 0, -1))


.子程序 可视, 逻辑型, 公开, 参数为空时表示取可视属性,否则 为置属性
.参数 是否可视, 逻辑型, 可空, 

.如果 (是否为空 (是否可视)) ' 为取属性
    返回 (不等于 (窗口是否可见 (窗口句柄), 0))
.否则
    返回 (不等于 (窗口置可视 (窗口句柄, 是否可视), 0))
    
.如果结束


.子程序 窗口置可视, 整数型, , 返回非0成功,0失败
.参数 窗口句柄, 整数型, , 
.参数 可视, 逻辑型, 可空, 默认为真

.如果真 (是否为空 (可视))
    赋值 (可视, 真)
.如果真结束
返回 (控制窗口状态 (窗口句柄, 选择 (可视, 9, 0)))


.子程序 sheet表句柄, 整数型, 公开, 
返回 (sheet表句柄)

.子程序 禁止重画, 空白型, 公开, 
发送信息_整数 (窗口句柄, #WM_SETREDRAW, 0, 0)


.子程序 获取焦点, 空白型, 公开, 
SetFocus_窗口置焦点 (窗口句柄)
SetFocus_窗口置焦点 (sheet表句柄)

.子程序 允许重画, 空白型, 公开, 
发送信息_整数 (窗口句柄, #WM_SETREDRAW, 1, 0)


.子程序 取消重画, 空白型, 公开, ValidateRect
ValidateRect (窗口句柄, 0)


.子程序 刷新显示, 空白型, 公开, UpdateWindow
UpdateWindow (窗口句柄)

.子程序 行高, 双精度小数型, 公开, 取/置.
.参数 lRow, 整数型, , 
.参数 参数2, 双精度小数型, 可空, 

.如果 (是否为空 (参数2))
    返回 (对象.读数值属性 (“RowHeight”, lRow))
.否则
    
.如果结束
返回 (选择 (对象.写属性 (“RowHeight”, lRow, 参数2), 0, -1))


.子程序 排序依据行列, 整数型, 公开, 取/置 Sets or returns the column or row to sort by
.参数 nindex, 短整数型, , 
.参数 参数2, 整数型, 可空, 

.如果真 (是否为空 (参数2))
    返回 (对象.读数值属性 (“SortKey”, nindex))
.如果真结束
返回 (选择 (对象.写属性 (“SortKey”, nindex, 参数2), 0, -1))

.子程序 行列排序方式, 整数型, 公开, 当为取时:返回以下值： 0、无SortKeyOrderNone； 1、SortKeyOrderAscending升序； 2、降序SortKeyOrderDescending   为置时 0成功,-1失败
.参数 nIndex, 短整数型, , 
.参数 参数2, 整数型, 可空, 参数值为以下值之一： 0、SortKeyOrderNone； 1、SortKeyOrderAscending； 2、SortKeyOrderDescending

.如果真 (是否为空 (参数2))
    返回 (对象.读数值属性 (“SortKeyOrder”, nIndex))
.如果真结束
返回 (选择 (对象.写属性 (“SortKeyOrder”, nIndex, 参数2), 0, -1))


.子程序 复选框图片, 字节集, 公开, 取/置
.参数 Index, 短整数型, , 
.参数 参数2, 字节集, 可空, 

.局部变量 a, 对象, , , 

.如果真 (是否为空 (参数2))
    赋值 (a, 对象.读对象型属性 (“TypeCheckPicture”, Index))
    a.查看 ()
    返回 (a.取回图片 ())
.如果真结束
对象.写属性 (“TypeCheckPicture”, Index, 参数2)
返回 ({  })

.子程序 列排序指示符, 整数型, 公开, 取时 0、ColUserSortIndicatorNone； 1、ColUserSortIndicatorAscending升序； 2、降序ColUserSortIndicatorDescending； 3、关闭ColUserSortIndicatorDisabled
.参数 lcol, 整数型, , 
.参数 参数2, 整数型, 可空, 0、ColUserSortIndicatorNone； 1升、ColUserSortIndicatorAscending； 2降、ColUserSortIndicatorDescending； 3关闭、ColUserSortIndicatorDisabled

 ' 参数值为以下值之一： 0、ColUserSortIndicatorNone； 1、ColUserSortIndicatorAscending； 2、ColUserSortIndicatorDescending； 3、ColUserSortIndicatorDisabled。
 ' 解释：Returns the SortIndicator of the specified column
.如果真 (是否为空 (参数2))
    返回 (对象.读数值属性 (“ColUserSortIndicator”, lcol))
.如果真结束
对象.写属性 (“ColUserSortIndicator”, lcol, 参数2)
返回 (0)

.子程序 激活事件, 逻辑型, 公开, Allows events to be disabled and not fire
.参数 eventid, 短整数型, , 
.参数 参数2, 逻辑型, 可空, 

.如果真 (是否为空 (参数2))
    返回 (对象.读逻辑属性 (“EventEnabled”, eventid))
.如果真结束
返回 (对象.写属性 (“EventEnabled”, eventid, 参数2))


.子程序 当前列, 整数型, 公开, 取 ,置 当前列
.参数 col, 整数型, 可空, 可空时,即为取当前列

.如果真 (是否为空 (col))
    返回 (对象.读数值属性 (“ActiveCol”, ))
.如果真结束
对象.写属性 (“ActiveCol”, col)
返回 (0)

.子程序 当前行, 整数型, 公开, 取/置
.参数 row, 整数型, 可空, 可空时,为取当前行

.如果 (是否为空 (row))
    返回 (对象.读数值属性 (“ActiveRow”, ))
    
.否则
    对象.写属性 (“ActiveRow”, row)
    返回 (0)
.如果结束


.子程序 溢流邻近空白格, 逻辑型, 公开, 当允许不为空时,为写属性,写成功为真,失败为假
.参数 允许, 逻辑型, 可空, 如为空,则为读属性()

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AllowCellOverflow”, ))
.否则
    返回 (对象.写属性 (“AllowCellOverflow”, 允许))
.如果结束


.子程序 是否可拖放, 逻辑型, 公开, 获取或设置是否可以拖动选定的对象,如行,单元格,选择的区域,里面的值也会跟着变化,当参数不为空时,为写属性,成功为真,失败为假
.参数 允许, 逻辑型, 可空, 如是为空,则为读属性

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AllowDragDrop”, ))
.否则
    返回 (对象.写属性 (“AllowDragDrop”, 允许))
.如果结束


.子程序 允许不连续单元块, 逻辑型, 公开, 成功返回真
.参数 允许, 逻辑型, 可空, 如空,则读属性()

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AllowMultiBlocks”, ))
.否则
    返回 (对象.写属性 (“AllowMultiBlocks”, 允许))
.如果结束


.子程序 浮点整数格写公式, 逻辑型, 公开, 成功返回真
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AllowUserFormulas”, ))
.否则
    返回 (对象.写属性 (“AllowUserFormulas”, 允许))
.如果结束


.子程序 编辑态用方向键, 逻辑型, 公开, 编辑状态下使用方向键移动焦点
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“ArrowsExitEditMode”, ))
.否则
    返回 (对象.写属性 (“ArrowsExitEditMode”, 允许))
.如果结束


.子程序 自动重新计算, 逻辑型, , 值改变可否重新计算
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AutoCalc”, ))
.否则
    返回 (对象.写属性 (“AutoCalc”, 允许))
.如果结束


.子程序 允许剪贴快捷键, 逻辑型, , 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AutoClipboard”, ))
.否则
    返回 (对象.写属性 (“AutoClipboard”, 允许))
.如果结束


.子程序 自动尺寸, 逻辑型, , 它的父指定列数和行或大小,表格控件自动更改其大小，无论较小
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“AutoSize”, ))
.否则
    返回 (对象.写属性 (“AutoSize”, 允许))
.如果结束


.子程序 允许修改单元格块, 逻辑型, 公开, 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“BlockMode”, ))
.否则
    .如果 (等于 (允许修改单元格块, 允许))
        返回 (真)
    .否则
        赋值 (允许修改单元格块, 允许)
        返回 (对象.写属性 (“BlockMode”, 允许))
        
    .如果结束
    
.如果结束


.子程序 单元格显示按钮, 整数型, 公开, 按钮型,组合框型单元格显示按钮..为以下值之一： 0、ButtonDrawModeAlways； 1、ButtonDrawModeCurrentCell； 2、ButtonDrawModeCurrentColumn； 4、ButtonDrawModeCurrentRow； 8、ButtonDrawModeAlwaysButton； 16、ButtonDrawModeAlwaysCombo
.参数 类型, 整数型, 可空, 0,总是  1当前单元格   2当前列   4当前行       8 按钮格    16 组合框格

.如果 (是否为空 (类型))
    返回 (对象.读数值属性 (“ButtonDrawMode”, ))
.否则
    对象.写属性 (“ButtonDrawMode”, 类型)
    返回 (0)
.如果结束


.子程序 单元格数据类型, 整数型, 公开, 0、CellTypeDate； 1、CellTypeEdit； 2、CellTypeFloat； 3、CellTypeInteger； 4、CellTypePic； 5、CellTypeStaticText； 6、CellTypeTime； 7、CellTypeButton； 8、CellTypeComboBox； 9、CellTypePicture； 10、CellTypeCheckBox； 11、CellTypeOwnerDrawn； 12、CellTypeCurrency； 13、CellTypeNumber； 14、CellTypePercent； 15、CellTypeScientific； 16、CellTypeCustom
.参数 类型, 整数型, 可空, 0日期  1文本  2 双精度小数,  3 整数, 4贴图, 5. 只读  6.时间 ,7 按钮, 8 组合框  9 图片  10 复选框    11, 自绘   12,货币,  13,数字,   14,百分比 15, 科学,    16,自定义

.如果 (是否为空 (类型))
    返回 (对象.读数值属性 (“CellType”, ))
.否则
    对象.写属性 (“CellType”, 类型)
    返回 (0)
.如果结束


.子程序 单元格被更改, 逻辑型, 公开, 用户已经修改单元格 ,如果参数不为空,则设置成功返回真
.参数 允许, 逻辑型, 可空, 

.如果真 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“ChangeMade”, ))
.如果真结束
返回 (对象.写属性 (“ChangeMade”, 允许))


.子程序 格式化数据, 文本型, 公开, 返回或设置一行,一列或一个单元格的格式化数据
.参数 格式化文本, 文本型, 可空, 

.如果 (是否为空 (格式化文本))
    返回 (对象.读文本属性 (“Clip”, ))
.否则
    对象.写属性 (“Clip”, 格式化文本)
    返回 (“”)
.如果结束


.子程序 未格式化数据, 文本型, 公开, 返回或设置一行,一列或一个单元格的未格式化数据
.参数 未格式化文本, 文本型, 可空, 

.如果 (是否为空 (未格式化文本))
    返回 (对象.读文本属性 (“ClipValue”, ))
.否则
    对象.写属性 (“ClipValue”, 未格式化文本)
    返回 (“”)
.如果结束
 ' 对象.读文本属性 (“ClipValue”, )

.子程序 起始列号, 整数型, , 返回或设置起始列
.参数 列, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (列))
    返回 (对象.读数值属性 (“Col”, ))
.否则
    对象.写属性 (“Col”, 列)
    返回 (0)
.如果结束


.子程序 结束列号, 整数型, , 返回或设置结束列
.参数 列, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (列))
    返回 (对象.读数值属性 (“Col2”, ))
.否则
    对象.写属性 (“Col2”, 列)
    返回 (0)
.如果结束


.子程序 隐藏列, 逻辑型, 公开, 设置或返回列 是否可隐藏
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“ColHidden”, ))
.否则
    返回 (对象.写属性 (“ColHidden”, 允许))
.如果结束


.子程序 指定分页符列号, 逻辑型, 公开, 设置是否在指定列显示分页符
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“ColPageBreak”, ))
.否则
    返回 (对象.写属性 (“ColPageBreak”, 允许))
.如果结束


.子程序 冻结列号, 整数型, 公开, 设置或返回
.参数 列号, 整数型, 可空, 

.如果 (是否为空 (列号))
    返回 (对象.读数值属性 (“ColsFrozen”, ))
.否则
    对象.写属性 (“ColsFrozen”, 列号)
    返回 (0)
.如果结束


.子程序 光标风格, 整数型, 公开, 设置或返回外观指针  值有0、CursorStyleUserDefined； 1、CursorStyleDefault； 2、CursorStyleArrow； 3、CursorStyleDefColResize； 4、CursorStyleDefRowResize
.参数 风格, 整数型, 可空, 0,自定义,1默认,2箭头,3列调整  4行调整

.如果 (是否为空 (风格))
    返回 (对象.读数值属性 (“CursorStyle”, ))
.否则
    对象.写属性 (“CursorStyle”, 风格)
    返回 (0)
.如果结束


.子程序 光标类型, 整数型, 公开, 0、CursorTypeDefault； 1、CursorTypeColResize； 2、CursorTypeRowResize； 3、CursorTypeButton； 4、CursorTypeGrayArea； 5、CursorTypeLockedCell； 6、CursorTypeColHeader； 7、CursorTypeRowHeader； 8、CursorTypeDragDropArea； 9、CursorTypeDragDrop
.参数 类型, 整数型, 可空, 0 默认  1 列调整 2行调整,  3按钮 4 灰色区域  5.锁定单元格  6.列标题  7.行标   8.拖放区域  9,拖放

.如果 (是否为空 (类型))
    返回 (对象.读数值属性 (“CursorType”, ))
.否则
    对象.写属性 (“CursorType”, 类型)
    返回 (0)
.如果结束


.子程序 允许外部进程编辑, 逻辑型, 公开, 它指出被绑定的控件中的数据已被某进程改变，这个进程不是从当前记录中检索数据的进程
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“DataChanged”, ))
.否则
    返回 (对象.写属性 (“DataChanged”, 允许))
.如果结束


.子程序 最后列号, 整数型, , 最后包含数据的列号
.参数 列号, 整数型, 可空, 

.如果 (是否为空 (列号))
    返回 (对象.读数值属性 (“DataColCnt”, ))
.否则
    对象.写属性 (“DataColCnt”, 列号)
    返回 (0)
.如果结束


.子程序 数据字段名, 文本型, 公开, 设置或返回数据库字段名称一栏指定的表格文本
.参数 字段名, 文本型, 可空, 

.如果 (是否为空 (字段名))
    返回 (对象.读文本属性 (“DataField”, ))
.否则
    对象.写属性 (“DataField”, 字段名)
    返回 (“”)
.如果结束



.子程序 数据填充指定列, 逻辑型, 公开, 设置或返回是否数据填充事件发生在指定栏
.参数 指定, 逻辑型, 可空, 

.如果 (是否为空 (指定))
    返回 (对象.读逻辑属性 (“DataFillEvent”, ))
.否则
    返回 (对象.写属性 (“DataFillEvent”, 指定))
    
.如果结束


.子程序 最后行号, 整数型, , 最后包含数据的行号
.参数 行号, 整数型, 可空, 

.如果 (是否为空 (行号))
    返回 (对象.读数值属性 (“DataRowCnt”, ))
.否则
    对象.写属性 (“DataRowCnt”, 行号)
    返回 (0)
.如果结束


.子程序 数据源, 对象, , 设置或返回的数据控件绑定到跨控件名称
.参数 源, 对象, 可空, 

.如果 (是否为空 (源))
    返回 (对象.读对象型属性 (“DataSource”, ))
.否则
    对象.写属性 (“DataSource”, 源)
    返回 (源)
.如果结束


.子程序 绑定表自动置类型, 逻辑型, , 自动为行定义指定类型
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“DAutoCellTypes”, ))
.否则
    返回 (对象.写属性 (“DAutoCellTypes”, 允许))
.如果结束


.子程序 绑定表自动取数据, 逻辑型, , 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“DAutoFill”, ))
.否则
    返回 (对象.写属性 (“DAutoFill”, 允许))
.如果结束


.子程序 绑定表自动列标题, 逻辑型, , 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“DAutoHeadings”, ))
.否则
    返回 (对象.写属性 (“DAutoHeadings”, 允许))
.如果结束


.子程序 绑定表自动保存, 逻辑型, , 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“DAutoSave”, ))
.否则
    返回 (对象.写属性 (“DAutoSave”, 允许))
.如果结束


.子程序 绑定表自动列宽, 整数型, 公开, 0、DAutoSizeColsNone； 1、DAutoSizeColsMax； 2、DAutoSizeColsBest
.参数 列宽属性, 整数型, 可空, 0 无  1.最大列宽, 2最适列宽

.如果 (是否为空 (列宽属性))
    返回 (对象.读数值属性 (“DAutoSizeCols”, ))
.否则
    对象.写属性 (“DAutoSizeCols”, 列宽属性)
    返回 (0)
.如果结束


.子程序 绑定表和控件通信, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“DInformActiveRowChange”, ))
.否则
    返回 (对象.写属性 (“DInformActiveRowChange”, 属性))
.如果结束


.子程序 回车键发生操作, 整数型, , 0、EditEnterActionNone； 1、EditEnterActionUp； 2EditEnterActionDown； 3、EditEnterActionLeft； 4、EditEnterActionRight； 5、EditEnterActionNext； 6、EditEnterActionPrevious 7、EditEnterActionSame； 8、EditEnterActionNextRow
.参数 行为, 整数型, 可空, 0无 1 上 2下,3 左 4右 5后  6 前,7 保存   8 下行 

.如果 (是否为空 (行为))
    返回 (对象.读数值属性 (“EditEnterAction”, ))
.否则
    对象.写属性 (“EditEnterAction”, 行为)
    返回 (0)
.如果结束


.子程序 单元格为编辑态, 逻辑型, 公开, 设置或返回一个单元格中的编辑模式
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“EditMode”, ))
.否则
    返回 (对象.写属性 (“EditMode”, 属性))
.如果结束


.子程序 活动单元格为编辑态, 逻辑型, 公开, 设置或返回一个单元格是否处于编辑模式时当它成为活动单元格
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“EditModePermanent”, ))
.否则
    返回 (对象.写属性 (“EditModePermanent”, 属性))
.如果结束


.子程序 编辑态选中内容, 逻辑型, 公开, 进入编辑状态自动选中文本
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“EditModeReplace”, ))
.否则
    返回 (对象.写属性 (“EditModeReplace”, 属性))
.如果结束


.子程序 单元格公式, 文本型, 公开, 设置或返回单元格公式
.参数 公式, 文本型, 可空, 

.如果 (是否为空 (公式))
    返回 (对象.读文本属性 (“Formula”, ))
.否则
    对象.写属性 (“Formula”, 公式)
    返回 (“”)
.如果结束


.子程序 灰色区域颜色, 整数型, , 设置灰色区域的颜色(即无表格区域)
.参数 颜色, 整数型, 可空, 

.如果真 (是否为空 (颜色))
    返回 (对象.读数值属性 (“GrayAreaBackColor”, ))
.如果真结束
对象.写属性 (“GrayAreaBackColor”, 颜色)
返回 (0)

.子程序 表格线颜色, 整数型, 公开, 设置返回表格线的颜色 当然可以设置为白色,打印时隐藏了
.参数 颜色, 整数型, 可空, 

.如果真 (是否为空 (颜色))
    返回 (对象.读数值属性 (“GridColor”, ))
.如果真结束
对象.写属性 (“GridColor”, 颜色)
返回 (0)


.子程序 表格线_水平, 逻辑型, , 设置返回单元格水平的表格线
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“GridShowHoriz”, ))
.否则
    返回 (对象.写属性 (“GridShowHoriz”, 属性))
.如果结束


.子程序 表格线_垂直, 逻辑型, , 设置返回单元格水平的表格线
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“GridShowVert”, ))
.否则
    返回 (对象.写属性 (“GridShowVert”, 属性))
.如果结束


.子程序 表格线显示, 逻辑型, 公开, 设置表格线显示与否
.参数 有线形, 逻辑型, 可空, 

.如果 (是否为空 (有线形))
    返回 (对象.读逻辑属性 (“GridSolid”, ))
.否则
    返回 (对象.写属性 (“GridSolid”, 有线形))
.如果结束


.子程序 打印设备句柄, 整数型, 公开, 设置或返回为打印机用于创建自定义的打印配置的设备上下文句柄(hdc)
.参数 句柄, 整数型, 可空, 

.如果真 (是否为空 (句柄))
    返回 (对象.读数值属性 (“hDCPrinter”, ))
.如果真结束
对象.写属性 (“hDCPrinter”, 句柄)
返回 (0)


.子程序 调用表设计器, 短整数型, , 调用 表设计器 未实验
.参数 值, 短整数型, 可空, 

.如果 (是否为空 (值))
    返回 (对象.读数值属性 (“InterfaceDesigner”, ))
.否则
    对象.写属性 (“InterfaceDesigner”, 值)
    返回 (0)
.如果结束



.子程序 选中单元格块, 逻辑型, 公开, 是否可选多个单元格
.参数 选中, 逻辑型, 可空, 

.如果 (是否为空 (选中))
    返回 (对象.读逻辑属性 (“IsBlockSelected”, ))
.否则
    返回 (对象.写属性 (“IsBlockSelected”, 选中))
.如果结束


.子程序 最左边列号, 整数型, 公开, 
.参数 列号, 整数型, 可空, 

.如果真 (是否为空 (列号))
    返回 (对象.读数值属性 (“LeftCol”, ))
.如果真结束
对象.写属性 (“LeftCol”, 列号)
返回 (0)


.子程序 锁定单元格, 逻辑型, 公开, 
.参数 锁定, 逻辑型, 可空, 

.如果 (是否为空 (锁定))
    返回 (对象.读逻辑属性 (“Lock”, ))
.否则
    返回 (对象.写属性 (“Lock”, 锁定))
.如果结束


.子程序 锁定格背景色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果真 (是否为空 (颜色))
    返回 (对象.读数值属性 (“LockBackColor”, ))
.如果真结束
对象.写属性 (“LockBackColor”, 颜色)
返回 (0)


.子程序 锁定格前景色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果真 (是否为空 (颜色))
    返回 (对象.读数值属性 (“LockForeColor”, ))
.如果真结束
对象.写属性 (“LockForeColor”, 颜色)
返回 (0)


.子程序 列数, 整数型, , 
.参数 列, 整数型, 可空, 

.如果真 (是否为空 (列))
    返回 (对象.读数值属性 (“MaxCols”, ))
.如果真结束
对象.写属性 (“MaxCols”, 列)
返回 (0)


.子程序 行数, 整数型, , 
.参数 列, 整数型, 可空, 

.如果真 (是否为空 (列))
    返回 (对象.读数值属性 (“MaxRows”, ))
.如果真结束
对象.写属性 (“MaxRows”, 列)
返回 (0)

.子程序 文本最小高度, 整数型, 公开, 显示所有文本所需最小高度
.参数 高度, 整数型, 可空, 

.如果真 (是否为空 (高度))
    返回 (对象.读数值属性 (“MaxTextCellHeight”, ))
.如果真结束
对象.写属性 (“MaxTextCellHeight”, 高度)
返回 (0)


.子程序 文本最小宽度, 整数型, , 显示所有文本所需最小宽度
.参数 宽度, 整数型, 可空, 

.如果真 (是否为空 (宽度))
    返回 (对象.读数值属性 (“MaxTextCellWidth”, ))
.如果真结束
对象.写属性 (“MaxTextCellWidth”, 宽度)
返回 (0)


.子程序 移到单元格显示位置, 逻辑型, , 鼠标移焦点到表格时活动单元格位置 Sets or returns the location of the active cell when the user moves the focus to the spreadsheet with the mouse
.参数 显示, 逻辑型, 可空, 

.如果 (是否为空 (显示))
    返回 (对象.读逻辑属性 (“MoveActiveOnFocus”, ))
.否则
    返回 (对象.写属性 (“MoveActiveOnFocus”, 显示))
.如果结束


.子程序 声音警告, 逻辑型, , 
.参数 提示, 逻辑型, 可空, 

.如果 (是否为空 (提示))
    返回 (对象.读逻辑属性 (“NoBeep”, ))
.否则
    返回 (对象.写属性 (“NoBeep”, 提示))
.如果结束


.子程序 显示表底部和右边, 逻辑型, , 
.参数 提示, 逻辑型, 可空, 

.如果 (是否为空 (提示))
    返回 (对象.读逻辑属性 (“NoBorder”, ))
.否则
    返回 (对象.写属性 (“NoBorder”, 提示))
.如果结束


.子程序 表操作模式, 整数型, 公开, 0、OperationModeNormal； 1、OperationModeRead； 2、OperationModeRow； 3、OperationModeSingle； 4、OperationModeMulti； 5、OperationModeExtended
.参数 模式, 整数型, 可空, 0 正常 1 只读模式 2行模式  3单一模式   4 多项模式   5 扩展模式

.如果真 (是否为空 (模式))
    返回 (对象.读数值属性 (“OperationMode”, ))
.如果真结束
对象.写属性 (“OperationMode”, 模式)
返回 (0)


.子程序 打印对话框中显示的信息, 文本型, 公开, Sets or returns the information displayed in an abort dialog box during printing
.参数 信息, 文本型, 可空, 

.如果 (是否为空 (信息))
    返回 (对象.读文本属性 (“PrintAbortMsg”, ))
.否则
    对象.写属性 (“PrintAbortMsg”, 信息)
    返回 (“”)
.如果结束


.子程序 打印边框, 逻辑型, , 是否打印外边框
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintBorder”, ))
.否则
    返回 (对象.写属性 (“PrintBorder”, 打印))
.如果结束


.子程序 打印列标头在每页中, 逻辑型, , 在每页中打印列标头
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintColHeaders”, ))
.否则
    返回 (对象.写属性 (“PrintColHeaders”, 打印))
.如果结束


.子程序 打印颜色, 逻辑型, , 
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintColor”, ))
.否则
    返回 (对象.写属性 (“PrintColor”, 打印))
.如果结束


.子程序 页脚文本和格式, 文本型, , 设置页脚文本
.参数 页脚, 文本型, 可空, 

.如果 (是否为空 (页脚))
    返回 (对象.读文本属性 (“PrintFooter”, ))
.否则
    对象.写属性 (“PrintFooter”, 页脚)
    返回 (“”)
.如果结束


.子程序 打印表格线, 逻辑型, 公开, 
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintGrid”, ))
.否则
    返回 (对象.写属性 (“PrintGrid”, 打印))
.如果结束


.子程序 打印标头文本和格式, 文本型, , 
.参数 标头, 文本型, 可空, 

.如果 (是否为空 (标头))
    返回 (对象.读文本属性 (“PrintHeader”, ))
.否则
    对象.写属性 (“PrintHeader”, 标头)
    返回 (“”)
.如果结束


.子程序 打印作业名称, 文本型, 公开, 
.参数 名称, 文本型, 可空, 

.如果 (是否为空 (名称))
    返回 (对象.读文本属性 (“PrintJobName”, ))
.否则
    对象.写属性 (“PrintJobName”, 名称)
    返回 (“”)
.如果结束


.子程序 下边距, 整数型, , 
.参数 边距, 整数型, 可空, 

.如果真 (是否为空 (边距))
    返回 (对象.读数值属性 (“PrintMarginBottom”, ))
.如果真结束
对象.写属性 (“PrintMarginBottom”, 边距)
返回 (0)


.子程序 左边距, 整数型, , 
.参数 边距, 整数型, 可空, 

.如果真 (是否为空 (边距))
    返回 (对象.读数值属性 (“PrintMarginLeft”, ))
.如果真结束
对象.写属性 (“PrintMarginLeft”, 边距)
返回 (0)


.子程序 右边距, 整数型, , 
.参数 边距, 整数型, 可空, 

.如果真 (是否为空 (边距))
    返回 (对象.读数值属性 (“PrintMarginRight”, ))
.如果真结束
对象.写属性 (“PrintMarginRight”, 边距)
返回 (0)

.子程序 上边距, 整数型, , 
.参数 边距, 整数型, 可空, 

.如果真 (是否为空 (边距))
    返回 (对象.读数值属性 (“PrintMarginTop”, ))
.如果真结束
对象.写属性 (“PrintMarginTop”, 边距)
返回 (0)

.子程序 打印最后一页, 短整数型, , 设置或返回要打印的最后一页
.参数 页码, 短整数型, 可空, 

.如果真 (是否为空 (页码))
    返回 (对象.读数值属性 (“PrintPageEnd”, ))
.如果真结束
对象.写属性 (“PrintPageEnd”, 页码)
返回 (0)


.子程序 打印起始页, 短整数型, , 
.参数 页码, 短整数型, 可空, 

.如果真 (是否为空 (页码))
    返回 (对象.读数值属性 (“PrintPageStart”, ))
.如果真结束
对象.写属性 (“PrintPageStart”, 页码)
返回 (0)


.子程序 打印行标头在每页, 逻辑型, , 每页都打印行的标头
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintRowHeaders”, ))
.否则
    返回 (对象.写属性 (“PrintRowHeaders”, 打印))
.如果结束


.子程序 打印标头加阴影效果, 逻辑型, , 
.参数 加阴影, 逻辑型, 可空, 

.如果 (是否为空 (加阴影))
    返回 (对象.读逻辑属性 (“PrintShadows”, ))
.否则
    返回 (对象.写属性 (“PrintShadows”, 加阴影))
.如果结束


.子程序 打印类型, 整数型, , 0、PrintTypeAll； 1、PrintTypeCellRange； 2、PrintTypeCurrentPage； 3、PrintTypePageRange
.参数 类型, 整数型, 可空, 0 全部 1单元格区域  2当前页  3页码范围

.如果真 (是否为空 (类型))
    返回 (对象.读数值属性 (“PrintType”, ))
.如果真结束
对象.写属性 (“PrintType”, 类型)
返回 (0)


.子程序 打印行列尾部空白格, 逻辑型, , 
.参数 打印, 逻辑型, 可空, 

.如果 (是否为空 (打印))
    返回 (对象.读逻辑属性 (“PrintUseDataMax”, ))
.否则
    返回 (对象.写属性 (“PrintUseDataMax”, 打印))
.如果结束


.子程序 Tab键移动焦点, 逻辑型, 公开, 设置或返回tab键作用是到下一个单元格 或是到表格之外的焦点
.参数 内容移动, 逻辑型, 可空, 

.如果 (是否为空 (内容移动))
    返回 (对象.读逻辑属性 (“ProcessTab”, ))
.否则
    返回 (对象.写属性 (“ProcessTab”, 内容移动))
.如果结束


.子程序 编辑锁定的单元格, 逻辑型, , Sets or returns whether users can edit cells marked as locked with the Lock property.
.参数 可编辑, 逻辑型, 可空, 

.如果 (是否为空 (可编辑))
    返回 (对象.读逻辑属性 (“Protect”, ))
.否则
    返回 (对象.写属性 (“Protect”, 可编辑))
.如果结束


.子程序 重画, 逻辑型, , 
.参数 可编辑, 逻辑型, 可空, 

.如果 (是否为空 (可编辑))
    返回 (对象.读逻辑属性 (“ReDraw”, ))
.否则
    返回 (对象.写属性 (“ReDraw”, 可编辑))
.如果结束


.子程序 限制列数, 逻辑型, , 数据超过最后一列数据时可否输入数据,默认不限制
.参数 限制, 逻辑型, 可空, 

.如果 (是否为空 (限制))
    返回 (对象.读逻辑属性 (“RestrictCols”, ))
.否则
    返回 (对象.写属性 (“RestrictCols”, 限制))
.如果结束


.子程序 限制行数, 逻辑型, , 数据超过最后一行数据时可否输入数据,默认不限制
.参数 限制, 逻辑型, 可空, 

.如果 (是否为空 (限制))
    返回 (对象.读逻辑属性 (“RestrictRows”, ))
.否则
    返回 (对象.写属性 (“RestrictRows”, 限制))
.如果结束


.子程序 选定块失去焦点高亮, 逻辑型, , 当选定块失去焦点时依然保持高亮
.参数 高亮, 逻辑型, 可空, 

.如果 (是否为空 (高亮))
    返回 (对象.读逻辑属性 (“RetainSelBlock”, ))
.否则
    返回 (对象.写属性 (“RetainSelBlock”, 高亮))
.如果结束


.子程序 隐藏行, 逻辑型, , 
.参数 隐藏, 逻辑型, 可空, 

.如果 (是否为空 (隐藏))
    返回 (对象.读逻辑属性 (“RowHidden”, ))
.否则
    返回 (对象.写属性 (“RowHidden”, 隐藏))
.如果结束


.子程序 起始行号, 整数型, , 返回或设置起始列
.参数 列, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (列))
    返回 (对象.读数值属性 (“Row”, ))
.否则
    对象.写属性 (“Row”, 列)
    返回 (0)
.如果结束


.子程序 结束行号, 整数型, , 返回或设置结束列
.参数 列, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (列))
    返回 (对象.读数值属性 (“Row2”, ))
.否则
    对象.写属性 (“Row2”, 列)
    返回 (0)
.如果结束


.子程序 打印表格显示分页符, 逻辑型, , 打印表格时显示分页符
.参数 显示, 逻辑型, 可空, 

.如果 (是否为空 (显示))
    返回 (对象.读逻辑属性 (“RowPageBreak”, ))
.否则
    返回 (对象.写属性 (“RowPageBreak”, 显示))
.如果结束


.子程序 冻结行, 整数型, , 
.参数 行号, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (行号))
    返回 (对象.读数值属性 (“RowsFrozen”, ))
.否则
    对象.写属性 (“RowsFrozen”, 行号)
    返回 (0)
.如果结束


.子程序 滚动条显示模式, 逻辑型, , 设置或返回滚动条总显示 或 仅需要时
.参数 总是显示, 逻辑型, 可空, 

.如果 (是否为空 (总是显示))
    返回 (对象.读逻辑属性 (“ScrollBarExtMode”, ))
.否则
    返回 (对象.写属性 (“ScrollBarExtMode”, 总是显示))
.如果结束


.子程序 滚动条最大对齐, 逻辑型, , 
.参数 总是对齐, 逻辑型, 可空, 

.如果 (是否为空 (总是对齐))
    返回 (对象.读逻辑属性 (“ScrollBarMaxAlign”, ))
.否则
    返回 (对象.写属性 (“ScrollBarMaxAlign”, 总是对齐))
.如果结束


.子程序 滚动条, 整数型, ,  0、ScrollBarsNone； 1、ScrollBarsHorizontal； 2、ScrollBarsVertical； 3、ScrollBarsBoth
.参数 模式, 整数型, 可空, 可空,为取属性,0 无  1水平  2垂直 3全部 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“ScrollBars”, ))
.否则
    对象.写属性 (“ScrollBars”, 模式)
    返回 (0)
.如果结束


.子程序 滚动条完全显示行列, 逻辑型, , 设置返回 滚动条是否可滚动显示全部行列,或 是有限的行列
.参数 完全显示, 逻辑型, 可空, 

.如果 (是否为空 (完全显示))
    返回 (对象.读逻辑属性 (“ScrollBarShowMax”, ))
.否则
    返回 (对象.写属性 (“ScrollBarShowMax”, 完全显示))
.如果结束


.子程序 选中块左边列号, 整数型, , 
.参数 模式, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“SelBlockCol”, ))
.否则
    对象.写属性 (“SelBlockCol”, 模式)
    返回 (0)
.如果结束


.子程序 选中块右边列号, 整数型, , 
.参数 模式, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“SelBlockCol2”, ))
.否则
    对象.写属性 (“SelBlockCol2”, 模式)
    返回 (0)
.如果结束


.子程序 选中块顶边行号, 整数型, , 
.参数 模式, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“SelBlockRow”, ))
.否则
    对象.写属性 (“SelBlockRow”, 模式)
    返回 (0)
.如果结束


.子程序 选中块底部行号, 整数型, , 
.参数 模式, 整数型, 可空, 可空,为取属性

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“SelBlockCol2”, ))
.否则
    对象.写属性 (“SelBlockCol2”, 模式)
    返回 (0)
.如果结束


.子程序 选择行列块组合, 整数型, 公开, 0、SelectBlockOptionsNone； 1、SelectBlockOptionsColumns； 2、SelectBlockOptionsRows； 4、SelectBlockOptionsBlocks； 8、SelectBlockOptionsSheet； 15、SelectBlockOptionsAll
.参数 模式, 整数型, 可空, 可空,为取属性  0 无   1列  2 行  4 空    8 : 工作表   15:所有

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“SelectBlockOptions”, ))
.否则
    对象.写属性 (“SelectBlockOptions”, 模式)
    返回 (0)
.如果结束


.子程序 选定数据长度, 整数型, , 编辑态选定数据长度
.参数 长度, 整数型, 可空, 可空,为取属性  0 无   1列  2 行  4 空    8 : 工作表   15:所有

.如果 (是否为空 (长度))
    返回 (对象.读数值属性 (“SelLength”, ))
.否则
    对象.写属性 (“SelLength”, 长度)
    返回 (0)
.如果结束


.子程序 单选模式选中行号, 整数型, 公开, 
.参数 长度, 整数型, 可空, 

.如果 (是否为空 (长度))
    返回 (对象.读数值属性 (“SelModeIndex”, ))
.否则
    对象.写属性 (“SelModeIndex”, 长度)
    返回 (0)
.如果结束


.子程序 多选模式下行选中状态, 逻辑型, , 
.参数 显示, 逻辑型, 可空, 

.如果 (是否为空 (显示))
    返回 (对象.读逻辑属性 (“SelModeSelected”, ))
.否则
    返回 (对象.写属性 (“SelModeSelected”, 显示))
.如果结束


.子程序 选定文本起始位置, 整数型, , 
.参数 起始位置, 整数型, 可空, 

.如果 (是否为空 (起始位置))
    返回 (对象.读数值属性 (“SelStart”, ))
.否则
    对象.写属性 (“SelStart”, 起始位置)
    返回 (0)
.如果结束


.子程序 选定的文本, 文本型, , 
.参数 名称, 文本型, 可空, 

.如果 (是否为空 (名称))
    返回 (对象.读文本属性 (“SelText”, ))
.否则
    对象.写属性 (“SelText”, 名称)
    返回 (“”)
.如果结束


.子程序 标头和静态格背景色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“ShadowColor”, ))
.否则
    对象.写属性 (“ShadowColor”, 颜色)
    返回 (0)
.如果结束


.子程序 标头和静态格边框色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“ShadowDark”, ))
.否则
    对象.写属性 (“ShadowDark”, 颜色)
    返回 (0)
.如果结束


.子程序 标头和静态格前景色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“ShadowText”, ))
.否则
    对象.写属性 (“ShadowText”, 颜色)
    返回 (0)
.如果结束


.子程序 显示在第一列的列号, 整数型, , 
.参数 列号, 整数型, 可空, 

.如果 (是否为空 (列号))
    返回 (对象.读数值属性 (“StartingColNumber”, ))
.否则
    对象.写属性 (“StartingColNumber”, 列号)
    返回 (0)
.如果结束


.子程序 显示在第一行的行号, 整数型, 公开, 表格第一行的行号.默认为1开始
.参数 行号, 整数型, 可空, 

.如果 (是否为空 (行号))
    返回 (对象.读数值属性 (“StartingRowNumber”, ))
.否则
    对象.写属性 (“StartingRowNumber”, 行号)
    返回 (0)
.如果结束


.子程序 显示顶行行号, 整数型, 公开, 在滚动条当前状态下顶行的行号
.参数 行号, 整数型, 可空, 

.如果 (是否为空 (行号))
    返回 (对象.读数值属性 (“TopRow”, ))
.否则
    对象.写属性 (“TopRow”, 行号)
    返回 (0)
.如果结束


.子程序 按钮格对齐方式, 整数型, 公开, 
.参数 行号, 整数型, 可空, 

.如果 (是否为空 (行号))
    返回 (对象.读数值属性 (“TypeButtonAlign”, ))
.否则
    对象.写属性 (“TypeButtonAlign”, 行号)
    返回 (0)
.如果结束


.子程序 按钮格边框色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“TypeButtonBorderColor”, ))
.否则
    对象.写属性 (“TypeButtonBorderColor”, 颜色)
    返回 (0)
.如果结束


.子程序 按钮格背景色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“TypeButtonColor”, ))
.否则
    对象.写属性 (“TypeButtonColor”, 颜色)
    返回 (0)
.如果结束


.子程序 按钮格周围阴影色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“TypeButtonDarkColor”, ))
.否则
    对象.写属性 (“TypeButtonDarkColor”, 颜色)
    返回 (0)
.如果结束


.子程序 按钮格周围突出色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“TypeButtonLightColor”, ))
.否则
    对象.写属性 (“TypeButtonLightColor”, 颜色)
    返回 (0)
.如果结束


.子程序 按钮格正常图片, 字节集, 公开, 
.参数 对象1, 字节集, 可空, 

.局部变量 a, 对象, , , 

.如果 (是否为空 (对象1))
    赋值 (a, 对象.读对象型属性 (“TypeButtonPicture”, ))
    a.查看 ()
    返回 (a.取回图片 ())
.否则
    a.创建图片对象 (对象1)
    对象.写属性 (“TypeButtonPicture”, a)
    返回 ({  })
.如果结束


.子程序 按钮格按下图片, 字节集, 公开, 
.参数 图片, 字节集, 可空, 

.局部变量 a, 对象, , , 

.如果 (是否为空 (图片))
    赋值 (a, 对象.读对象型属性 (“TypeButtonPictureDown”, ))
    a.查看 ()
    返回 (a.取回图片 ())
.否则
    a.创建图片对象 (图片)
    对象.写属性 (“TypeButtonPictureDown”, a)
    返回 (图片)
.如果结束


.子程序 按钮格阴影大小, 整数型, 公开, 
.参数 大小, 整数型, 可空, 

.如果 (是否为空 (大小))
    返回 (对象.读数值属性 (“TypeButtonShadowSize”, ))
.否则
    对象.写属性 (“TypeButtonShadowSize”, 大小)
    返回 (0)
.如果结束


.子程序 按钮格文本内容, 文本型, 公开, 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeButtonText”, ))
.否则
    对象.写属性 (“TypeButtonText”, 文本)
    返回 (“”)
.如果结束


.子程序 按钮格文本颜色, 整数型, , 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“TypeButtonTextColor”, ))
.否则
    对象.写属性 (“TypeButtonTextColor”, 颜色)
    返回 (0)
.如果结束


.子程序 按钮格类型, 整数型, 公开, 0、TypeButtonTypeNormal； 1、TypeButtonTypeTwoState
.参数 类型, 整数型, 可空, 0正常  1两个状态

.如果 (是否为空 (类型))
    返回 (对象.读数值属性 (“TypeButtonType”, ))
.否则
    对象.写属性 (“TypeButtonType”, 类型)
    返回 (0)
.如果结束


.子程序 复选框居中, 逻辑型, 公开, 
.参数 居中, 逻辑型, 可空, 

.如果 (是否为空 (居中))
    返回 (对象.读逻辑属性 (“TypeCheckCenter”, ))
.否则
    返回 (对象.写属性 (“TypeCheckCenter”, 居中))
.如果结束


.子程序 复选框文本, 文本型, 公开, 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeCheckText”, ))
.否则
    对象.写属性 (“TypeCheckText”, 文本)
    返回 (“”)
.如果结束


.子程序 复选框文本位置, 整数型, , 
.参数 类型, 整数型, 可空, 

.如果 (是否为空 (类型))
    返回 (对象.读数值属性 (“TypeCheckTextAlign”, ))
.否则
    对象.写属性 (“TypeCheckTextAlign”, 类型)
    返回 (0)
.如果结束


.子程序 组合框项目数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxCount”, ))
.否则
    对象.写属性 (“TypeComboBoxCount”, 数目)
    返回 (0)
.如果结束


.子程序 组合框选中项目序号, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxCurSel”, ))
.否则
    对象.写属性 (“TypeComboBoxCurSel”, 数目)
    返回 (0)
.如果结束


.子程序 组合框内容可编辑, 逻辑型, 公开, 组合框为编辑型组合框
.参数 可, 逻辑型, 可空, 

.如果 (是否为空 (可))
    返回 (对象.读逻辑属性 (“TypeComboBoxEditable”, ))
.否则
    返回 (对象.写属性 (“TypeComboBoxEditable”, 可))
.如果结束


.子程序 组合框执行操作的项, 整数型, 公开, 设置或返回操作的组合框索引 ?
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxIndex”, ))
.否则
    对象.写属性 (“TypeComboBoxIndex”, 数目)
    返回 (0)
.如果结束


.子程序 组合框中显示项列表, 文本型, , 
.参数 文本, 文本型, 可空, 以文本＋ 字符 (9) ＋文本的形式命名

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeComboBoxList”, ))
.否则
    对象.写属性 (“TypeComboBoxList”, 文本)
    返回 (“”)
.如果结束


.子程序 组合框内容, 文本型, 公开, 组合框中当前内容
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeComboBoxString”, ))
.否则
    对象.写属性 (“TypeComboBoxString”, 文本)
    返回 (“”)
.如果结束


.子程序 日期格为四位年份, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeDateCentury”, ))
.否则
    返回 (对象.写属性 (“TypeDateCentury”, 属性))
.如果结束


.子程序 日期格式, 整数型, , 0、TypeDateFormatDDMONYY； 1、TypeDateFormatDDMMYY； 2、TypeDateFormatMMDDYY； 3、TypeDateFormatYYMMDD； 99、TypeDateFormatDefault
.参数 数目, 整数型, 可空, 0:ddmyy  1.ddmmyy  2mmddyy  3yymmdd  99默认

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeDateFormat”, ))
.否则
    对象.写属性 (“TypeDateFormat”, 数目)
    返回 (0)
.如果结束


.子程序 日期格最大日期值, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeDateMax”, ))
.否则
    对象.写属性 (“TypeDateMax”, 文本)
    返回 (“”)
.如果结束


.子程序 日期格最小日期值, 文本型, 公开, 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeDateMin”, ))
.否则
    对象.写属性 (“TypeDateMin”, 文本)
    返回 (“”)
.如果结束


.子程序 日期格年月日分隔符, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeDateSeparator”, ))
.否则
    对象.写属性 (“TypeDateSeparator”, 数目)
    返回 (0)
.如果结束


.子程序 编辑格字符大小写, 整数型, ,  0、TypeEditCharCaseSetLower； 1、TypeEditCharCaseSetNone； 2、TypeEditCharCaseSetUpper
.参数 数目, 整数型, 可空, 0小写  1无  2大写

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeEditCharCase”, ))
.否则
    对象.写属性 (“TypeEditCharCase”, 数目)
    返回 (0)
.如果结束


.子程序 编辑格允许键入的字符, 整数型, 公开, 0、TypeEditCharSetASCII； 1、TypeEditCharSetAlpha； 2、TypeEditCharSetAlphanumeric； 3、TypeEditCharSetNumeric
.参数 数目, 整数型, 可空, 0ASCII码  1字母  2字母数字  3数字

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeEditCharSet”, ))
.否则
    对象.写属性 (“TypeEditCharSet”, 数目)
    返回 (0)
.如果结束


.子程序 编辑格允许多行, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeEditMultiLine”, ))
.否则
    返回 (对象.写属性 (“TypeEditMultiLine”, 属性))
.如果结束


.子程序 编辑格密码方式, 逻辑型, , 是否为密码
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeEditPassword”, ))
.否则
    返回 (对象.写属性 (“TypeEditPassword”, 属性))
.如果结束


.子程序 单元格水平对齐, 整数型, 公开, 0、TypeHAlignLeft； 1、TypeHAlignRight； 2、TypeHAlignCenter
.参数 数目, 整数型, 可空, 0左 1右对齐  2居中

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeHAlign”, ))
.否则
    对象.写属性 (“TypeHAlign”, 数目)
    返回 (0)
.如果结束


.子程序 单元格样式, 整数型, 公开, 自定义单元格的样式.
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeOwnerDrawStyle”, ))
.否则
    对象.写属性 (“TypeOwnerDrawStyle”, 数目)
    返回 (0)
.如果结束


.子程序 图片格中文本, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypePicDefaultText”, ))
.否则
    对象.写属性 (“TypePicDefaultText”, 文本)
    返回 (“”)
.如果结束


.子程序 图片格中使用遮罩, 文本型, 公开, 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypePicMask”, ))
.否则
    对象.写属性 (“TypePicMask”, 文本)
    返回 (“”)
.如果结束


.子程序 图片格居中图片, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypePictCenter”, ))
.否则
    返回 (对象.写属性 (“TypePictCenter”, 属性))
.如果结束


.子程序 图片格图片显示比例, 逻辑型, , Sets or returns whether the application maintains the proportions of a picture in a picture cell when it sizes the picture
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypePictMaintainScale”, ))
.否则
    返回 (对象.写属性 (“TypePictMaintainScale”, 属性))
.如果结束


.子程序 图片格图片, 字节集, 公开, 
.参数 图片, 字节集, 可空, 

.局部变量 a, 对象, , , 

.如果 (是否为空 (图片))
    赋值 (a, 对象.读对象型属性 (“TypePictPicture”, ))
    a.查看 ()
     ' a.创建图片对象 (#城)
    返回 (a.取回图片 ())
.否则
    
    a.创建图片对象 (图片)
     ' a.创建 (, )
    对象.写属性 (“TypePictPicture”, a)
    返回 ({  })
.如果结束


.子程序 图片格图片自适应, 逻辑型, , Sets or returns whether a picture in a picture cell is sized to fit the cell
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypePictStretch”, ))
.否则
    返回 (对象.写属性 (“TypePictStretch”, 属性))
.如果结束


.子程序 日期或整数格显示调节按钮, 逻辑型, , 日期,时间,整数单元格
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeSpin”, ))
.否则
    返回 (对象.写属性 (“TypeSpin”, 属性))
.如果结束


.子程序 文本格前辍符, 逻辑型, , 符号（ ＆ ）
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeTextPrefix”, ))
.否则
    返回 (对象.写属性 (“TypeTextPrefix”, 属性))
.如果结束


.子程序 文本格深凹, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeTextShadow”, ))
.否则
    返回 (对象.写属性 (“TypeTextShadow”, 属性))
.如果结束


.子程序 文本格浅凹, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeTextShadowIn”, ))
.否则
    返回 (对象.写属性 (“TypeTextShadowIn”, 属性))
.如果结束


.子程序 文本格允许多行, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeTextWordWrap”, ))
.否则
    返回 (对象.写属性 (“TypeTextWordWrap”, 属性))
.如果结束


.子程序 时间格表示方式, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeTime24Hour”, ))
.否则
    对象.写属性 (“TypeTime24Hour”, 数目)
    返回 (0)
.如果结束


.子程序 时间格允许最大值, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeTimeMax”, ))
.否则
    对象.写属性 (“TypeTimeMax”, 文本)
    返回 (“”)
.如果结束


.子程序 时间格允许最小值, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“TypeTimeMin”, ))
.否则
    对象.写属性 (“TypeTimeMin”, 文本)
    返回 (“”)
.如果结束


.子程序 时间格显示秒, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeTimeSeconds”, ))
.否则
    返回 (对象.写属性 (“TypeTimeSeconds”, 属性))
.如果结束


.子程序 时分秒分隔符, 短整数型, , 
.参数 数目, 短整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeTimeSeparator”, ))
.否则
    对象.写属性 (“TypeTimeSeparator”, 数目)
    返回 (0)
.如果结束


.子程序 列宽和行高单位, 整数型, , 0、UnitTypeNormal； 1、UnitTypeVGABase； 2、UnitTypeTwips
.参数 数目, 整数型, 可空, 0 正常 1 vga 模式 2 微点模式

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“UnitType”, ))
.否则
    对象.写属性 (“UnitType”, 数目)
    返回 (0)
.如果结束


.子程序 调整行列大小, 整数型, , 0 无 1列 2 行, 3全部
.参数 数目, 整数型, 可空, 0、UserResizeNone； 1、UserResizeColumns； 2、UserResizeRows； 3、UserResizeBoth

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“UserResize”, ))
.否则
    对象.写属性 (“UserResize”, 数目)
    返回 (0)
.如果结束


.子程序 调整单个列大小, 整数型, , 是否可调整单个列
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“UserResizeCol”, ))
.否则
    对象.写属性 (“UserResizeCol”, 数目)
    返回 (0)
.如果结束


.子程序 调整单个行大小, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“UserResizeRow”, ))
.否则
    对象.写属性 (“UserResizeRow”, 数目)
    返回 (0)
.如果结束


.子程序 未格式化文本, 文本型, 公开, 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“Value”, ))
.否则
    对象.写属性 (“Value”, 文本)
    返回 (“”)
.如果结束


.子程序 缓冲区中行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualCurRowCount”, ))
.否则
    对象.写属性 (“VirtualCurRowCount”, 数目)
    返回 (0)
.如果结束


.子程序 缓冲区当前顶行, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualCurTop”, ))
.否则
    对象.写属性 (“VirtualCurTop”, 数目)
    返回 (0)
.如果结束


.子程序 虚拟模式中最大行数, 整数型, , 最大的行数,如果行数超过最大行数时,数目无效
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualMaxRows”, ))
.否则
    对象.写属性 (“VirtualMaxRows”, 数目)
    返回 (0)
.如果结束


.子程序 虚拟模式开关, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“VirtualMode”, ))
.否则
    返回 (对象.写属性 (“VirtualMode”, 属性))
.如果结束


.子程序 缓冲区中检索行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualOverlap”, ))
.否则
    对象.写属性 (“VirtualOverlap”, 数目)
    返回 (0)
.如果结束


.子程序 缓冲一次请求行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualRows”, ))
.否则
    对象.写属性 (“VirtualRows”, 数目)
    返回 (0)
.如果结束


.子程序 滚动条缓冲区行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VirtualScrollBuffer”, ))
.否则
    对象.写属性 (“VirtualScrollBuffer”, 数目)
    返回 (0)
.如果结束


.子程序 可见列数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VisibleCols”, ))
.否则
    对象.写属性 (“VisibleCols”, 数目)
    返回 (0)
.如果结束


.子程序 可见行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VisibleRows”, ))
.否则
    对象.写属性 (“VisibleRows”, 数目)
    返回 (0)
.如果结束


.子程序 垂直滚动条多元化, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“VScrollSpecial”, ))
.否则
    返回 (对象.写属性 (“VScrollSpecial”, 属性))
.如果结束


.子程序 垂直滚动条样式, 整数型, , 0、VScrollSpecialTypeDefault； 1、VScrollSpecialTypeNoHomeEnd； 2、VScrollSpecialNoPageUpDown； 4、VScrollSpecialTypeNoLineUpDown
.参数 数目, 整数型, 可空, 0 默认  1 无跳头跳尾功能  2没有翻页功能 4无向上向下功能

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“VScrollSpecialType”, ))
.否则
    对象.写属性 (“VScrollSpecialType”, 数目)
    返回 (0)
.如果结束


.子程序 粗体, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“FontBold”, ))
.否则
    返回 (对象.写属性 (“FontBold”, 属性))
.如果结束


.子程序 斜体, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“FontItalic”, ))
.否则
    返回 (对象.写属性 (“FontItalic”, 属性))
.如果结束


.子程序 字体名, 文本型, , 
.参数 文本, 文本型, 可空, 

.如果 (是否为空 (文本))
    返回 (对象.读文本属性 (“FontName”, ))
.否则
    对象.写属性 (“FontName”, 文本)
    返回 (“”)
.如果结束


.子程序 字号, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“FontSize”, ))
.否则
    对象.写属性 (“FontSize”, 数目)
    返回 (0)
.如果结束


.子程序 删除线, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“FontStrikethru”, ))
.否则
    返回 (对象.写属性 (“FontStrikethru”, 属性))
.如果结束


.子程序 下划线, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“FontUnderline”, ))
.否则
    返回 (对象.写属性 (“FontUnderline”, 属性))
.如果结束


.子程序 光标自定义, 对象, , 
.参数 图片, 对象, 可空, 

.如果 (是否为空 (图片))
    返回 (对象.读对象型属性 (“CursorIcon”, ))
.否则
    对象.写属性 (“CursorIcon”, 图片)
    返回 (图片)
.如果结束


.子程序 页面方向, 整数型, , 0、PrintOrientationDefault； 1、PrintOrientationPortrait； 2、PrintOrientationLandscape
.参数 数目, 整数型, 可空, 0默认 1纵向  2 横向

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintOrientation”, ))
.否则
    对象.写属性 (“PrintOrientation”, 数目)
    返回 (0)
.如果结束


.子程序 背景色风格, 整数型, 公开, 0、BackColorStyleOverGrid； 1、BackColorStyleUnderGrid； 2、BackColorStyleOverHorzGridOnly； 3、BackColorStyleOverVertGridOnly
.参数 数目, 整数型, 可空, 0 整体  1 表下面.  2 仅水平 3 仅垂直方向

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintOrientation”, ))
.否则
    对象.写属性 (“PrintOrientation”, 数目)
    返回 (0)
.如果结束


.子程序 公式移动或交换, 逻辑型, 公开, Sets or returns whether the cell references in formulas are updated when columns or rows are added or deleted or when blocks of cells are moved or swapped
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“FormulaSync”, ))
.否则
    返回 (对象.写属性 (“FormulaSync”, 属性))
.如果结束


.子程序 复选框类型, 整数型, 公开, 0、TypeCheckTypeNormal； 1、TypeCheckTypeThreeState
.参数 数目, 整数型, 可空, 0 正常  1三态

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeCheckType”, ))
.否则
    对象.写属性 (“TypeCheckType”, 数目)
    返回 (0)
.如果结束


.子程序 边框样式, 整数型, 公开, 0、AppearanceFlat； 1、Appearance3D； 2、Appearance3DWithBorder
.参数 数目, 整数型, 可空, 0 平面 1 浅凹 2 深凹

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“Appearance”, ))
.否则
    对象.写属性 (“Appearance”, 数目)
    返回 (0)
.如果结束


.子程序 组合框列表显示的行数, 整数型, , 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxMaxDrop”, ))
.否则
    对象.写属性 (“TypeComboBoxMaxDrop”, 数目)
    返回 (0)
.如果结束


.子程序 允许输入最大字符数, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeMaxEditLen”, ))
.否则
    对象.写属性 (“TypeMaxEditLen”, 数目)
    返回 (0)
.如果结束


.子程序 组合框中下拉表宽度, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxWidth”, ))
.否则
    对象.写属性 (“TypeComboBoxWidth”, 数目)
    返回 (0)
.如果结束


.子程序 显示提示文本顶点, 整数型, 公开, 0、TextTipOff； 1、TextTipFixed； 2、TextTipFloating； 3、TextTipFixedFocusOnly； 4、TextTipFloatingFocusOnly
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TextTip”, ))
.否则
    对象.写属性 (“TextTip”, 数目)
    返回 (0)
.如果结束


.子程序 提示文本等待毫秒数, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TextTipDelay”, ))
.否则
    对象.写属性 (“TextTipDelay”, 数目)
    返回 (0)
.如果结束


.子程序 滚动条轨道, 整数型, 公开, 0、ScrollBarTrackOff； 1、ScrollBarTrackVertical； 2、ScrollBarTrackHorizontal； 3、ScrollBarTrackBoth
.参数 数目, 整数型, 可空, 0 关闭 1 垂直 2水平 3 都有

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“ScrollBarTrack”, ))
.否则
    对象.写属性 (“ScrollBarTrack”, 数目)
    返回 (0)
.如果结束


.子程序 单元格垂直对齐, 整数型, , 0、TypeVAlignTop； 1、TypeVAlignBottom； 2、TypeVAlignCenter
.参数 数目, 整数型, 可空, 0 顶部对齐  1底部对齐  2 中间对齐

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeVAlign”, ))
.否则
    对象.写属性 (“TypeVAlign”, 数目)
    返回 (0)
.如果结束


.子程序 粘贴板选项, 整数型, 公开, 0、ClipboardOptionsNoHeaders； 1、ClipboardOptionsCopyRowHeaders； 2、ClipboardOptionsPasteRowHeaders； 4、ClipboardOptionsCopyColumnHeaders； 8、ClipboardOptionsPasteColumnHeaders； 15、ClipboardOptionsCopyPasteAllHeaders
.参数 选项, 整数型, 可空, 0无表头    1  复制行  2 粘贴行 4 复制列   8 粘贴列 15  复制粘贴全部 

.如果 (是否为空 (选项))
    返回 (对象.读数值属性 (“ClipboardOptions”, ))
.否则
    对象.写属性 (“ClipboardOptions”, 选项)
    返回 (0)
.如果结束


.子程序 打印页顺序, 整数型, 公开,  0、PageOrderAuto； 1、PageOrderDownThenOver； 2、PageOrderOverThenDown
.参数 数目, 整数型, 可空,  0 自动  1顺序  2倒序

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintPageOrder”, ))
.否则
    对象.写属性 (“PrintPageOrder”, 数目)
    返回 (0)
.如果结束


.子程序 打印份数, 整数型, 公开, 
.参数 数目, 整数型, 可空,  0 自动  1顺序  2倒序

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintPageCount”, ))
.否则
    对象.写属性 (“PrintPageCount”, 数目)
    返回 (0)
.如果结束


.子程序 打印开始页码, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintFirstPageNumber”, ))
.否则
    对象.写属性 (“PrintFirstPageNumber”, 数目)
    返回 (0)
.如果结束


.子程序 列分页符后一列号, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintNextPageBreakCol”, ))
.否则
    对象.写属性 (“PrintNextPageBreakCol”, 数目)
    返回 (0)
.如果结束


.子程序 行分页符后一行号, 整数型, 公开, 
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“PrintNextPageBreakRow”, ))
.否则
    对象.写属性 (“PrintNextPageBreakRow”, 数目)
    返回 (0)
.如果结束


.子程序 组合框句柄, 整数型, 公开, 怎么用
.参数 数目, 整数型, 可空, 

.如果 (是否为空 (数目))
    返回 (对象.读数值属性 (“TypeComboBoxhWnd”, ))
.否则
    对象.写属性 (“TypeComboBoxhWnd”, 数目)
    返回 (0)
.如果结束


.子程序 选中块背景颜色, 整数型, 公开, 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“SelBackColor”, ))
.否则
    对象.写属性 (“SelBackColor”, 颜色)
    返回 (0)
.如果结束


.子程序 选中块前景颜色, 整数型, 公开, 
.参数 颜色, 整数型, 可空, 

.如果 (是否为空 (颜色))
    返回 (对象.读数值属性 (“SelBackColor”, ))
.否则
    对象.写属性 (“SelBackColor”, 颜色)
    返回 (0)
.如果结束


.子程序 设定两位数字的年份值, 整数型, 公开, 如20 19等
.参数 年份, 整数型, 可空, 

.如果 (是否为空 (年份))
    返回 (对象.读数值属性 (“TwoDigitYearMax”, ))
.否则
    对象.写属性 (“TwoDigitYearMax”, 年份)
    返回 (0)
.如果结束


.子程序 ole链接嵌入模式, 整数型, 公开, 0 无 1人工
.参数 模式, 整数型, 可空, 0、fpOLEDropNone； 1、fpOLEDropManual

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“OLEDropMode”, ))
.否则
    对象.写属性 (“OLEDropMode”, 模式)
    返回 (0)
.如果结束


.子程序 绑定控件名称, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“DataMember”, ))
.否则
    对象.写属性 (“DataMember”, 模式)
    返回 (“”)
.如果结束


.子程序 单元格注释, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“CellNote”, ))
.否则
    对象.写属性 (“CellNote”, 模式)
    返回 (“”)
.如果结束


.子程序 单击列标题事件, 整数型, , 0、UserColActionDefault； 1、UserColActionSort； 2、UserColActionSortNoIndicator； 3、UserColActionAutoSize
.参数 模式, 整数型, 可空, 0  默认   1 排序 2排序但不标记  3 自动尺寸

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“UserColAction”, ))
.否则
    对象.写属性 (“UserColAction”, 模式)
    返回 (0)
.如果结束


.子程序 滚动提示方式, 整数型, 公开, 0、ShowScrollTipsOff； 1、ShowScrollTipsVertical； 2、ShowScrollTipsHorizontal； 3、ShowScrollTipsBoth
.参数 模式, 整数型, 可空, 0  关闭 1 垂直 2 水平 3 全部

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“ShowScrollTips”, ))
.否则
    对象.写属性 (“ShowScrollTips”, 模式)
    返回 (0)
.如果结束


.子程序 单元格注释指示器, 整数型, 公开, 0、CellNoteIndicatorShowAndFireEvent； 1、CellNoteIndicatorShowAndDoNotFireEvent； 2、CellNoteIndicatorDoNotShowAndFireEvent； 3、CellNoteIndicatorDoNotShowAndDoNotFireEvent
.参数 模式, 整数型, 可空, 0 显示 且 响应 1 仅显示不响应 2 不显示仅响应 3 不显示不响应

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“CellNoteIndicator”, ))
.否则
    对象.写属性 (“CellNoteIndicator”, 模式)
    返回 (0)
.如果结束


.子程序 超宽显示省略号, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeEllipses”, ))
.否则
    返回 (对象.写属性 (“TypeEllipses”, 属性))
.如果结束


.子程序 使用脚本环境, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“ScriptEnhanced”, ))
.否则
    返回 (对象.写属性 (“ScriptEnhanced”, 属性))
.如果结束


.子程序 合并相同内容列, 整数型, , 0、MergeNone； 1、MergeAlways； 2、MergeRestricted
.参数 模式, 整数型, 可空, 0 无 1 总是 2 受限

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“ColMerge”, ))
.否则
    对象.写属性 (“ColMerge”, 模式)
    返回 (0)
.如果结束


.子程序 合并相同内容行, 整数型, 公开, 0、MergeNone； 1、MergeAlways； 2、MergeRestricted
.参数 模式, 整数型, 可空, 0 无 1 总是 2 受限

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“RowMerge”, ))
.否则
    对象.写属性 (“RowMerge”, 模式)
    返回 (0)
.如果结束


.子程序 列编号, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“ColID”, ))
.否则
    对象.写属性 (“ColID”, 模式)
    返回 (“”)
.如果结束


.子程序 行表头列数, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“RowHeaderCols”, ))
.否则
    对象.写属性 (“RowHeaderCols”, 模式)
    返回 (0)
.如果结束


.子程序 行表头自动索引, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“RowHeadersAutoTextIndex”, ))
.否则
    对象.写属性 (“RowHeadersAutoTextIndex”, 模式)
    返回 (0)
.如果结束


.子程序 列表头自动索引, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“ColHeadersAutoTextIndex”, ))
.否则
    对象.写属性 (“ColHeadersAutoTextIndex”, 模式)
    返回 (0)
.如果结束


.子程序 列表头行数, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“ColHeaderRows”, ))
.否则
    对象.写属性 (“ColHeaderRows”, 模式)
    返回 (0)
.如果结束


.子程序 组合框自动排序, 整数型, , 、TypeComboBoxAutoSearchNone； 1、TypeComboBoxAutoSearchSingleChar； 2、TypeComboBoxAutoSearchMultipleChar； 3、TypeComboBoxAutoSearchSingleCharGreater
.参数 模式, 整数型, 可空, 0 无  1.单字符   2 多字符  3 较多字符

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeComboBoxAutoSearch”, ))
.否则
    对象.写属性 (“TypeComboBoxAutoSearch”, 模式)
    返回 (0)
.如果结束


.子程序 调节按钮增量值, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeSpinInc”, ))
.否则
    对象.写属性 (“TypeSpinInc”, 模式)
    返回 (0)
.如果结束


.子程序 调节按钮已达终点, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeSpinWrap”, ))
.否则
    返回 (对象.写属性 (“TypeSpinWrap”, 属性))
.如果结束


.子程序 负数显示为红色, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeNegRed”, ))
.否则
    返回 (对象.写属性 (“TypeNegRed”, 属性))
.如果结束


.子程序 货币单元格最小值, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyMin”, ))
.否则
    对象.写属性 (“TypeCurrencyMin”, 模式)
    返回 (0)
.如果结束


.子程序 货币单元格最大值, 整数型, , 
.参数 模式, 整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyMax”, ))
.否则
    对象.写属性 (“TypeCurrencyMax”, 模式)
    返回 (0)
.如果结束


.子程序 货币单元格十进制文本, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypeCurrencyDecimal”, ))
.否则
    对象.写属性 (“TypeCurrencyDecimal”, 模式)
    返回 (“”)
.如果结束


.子程序 货币分隔符, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypeCurrencySeparator”, ))
.否则
    对象.写属性 (“TypeCurrencySeparator”, 模式)
    返回 (“”)
.如果结束


.子程序 货币格货币符号, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypeCurrencySymbol”, ))
.否则
    对象.写属性 (“TypeCurrencySymbol”, 模式)
    返回 (“”)
.如果结束


.子程序 货币格前导零, 整数型, , 0、TypeLeadingZeroIntl； 1、TypeLeadingZeroNo； 2、TypeLeadingZeroYes
.参数 模式, 整数型, 可空, 国际标准  1 无  2是

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyLeadingZero”, ))
.否则
    对象.写属性 (“TypeCurrencyLeadingZero”, 模式)
    返回 (0)
.如果结束


.子程序 货币格小数位数, 短整数型, , 
.参数 模式, 短整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyDecPlaces”, ))
.否则
    对象.写属性 (“TypeCurrencyDecPlaces”, 模式)
    返回 (0)
.如果结束


.子程序 货币格负数货币格式, 整数型, , 、TypeCurrencyNegStyleIntl； 1、TypeCurrencyNegStyle1； 2、TypeCurrencyNegStyle2； 3、TypeCurrencyNegStyle3； 4、TypeCurrencyNegStyle4； 5、TypeCurrencyNegStyle5； 6、TypeCurrencyNegStyle6； 7、TypeCurrencyNegStyle7； 8、TypeCurrencyNegStyle8； 9、TypeCurrencyNegStyle9； 10、TypeCurrencyNegStyle10； 11、TypeCurrencyNegStyle11； 12、TypeCurrencyNegStyle12； 13、TypeCurrencyNegStyle13； 14、TypeCurrencyNegStyle14； 15、TypeCurrencyNegStyle15； 16、TypeCurrencyNegStyle16。
.参数 模式, 整数型, 可空, 0 国际标准  1-16 格式1-16

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyNegStyle”, ))
.否则
    对象.写属性 (“TypeCurrencyNegStyle”, 模式)
    返回 (0)
.如果结束


.子程序 货币格正数货币格式, 整数型, 公开, 0、TypeCurrencyPosStyleIntl； 1、TypeCurrencyPosStyle1； 2、TypeCurrencyPosStyle2； 3、TypeCurrencyPosStyle3； 4、TypeCurrencyPosStyle4
.参数 模式, 整数型, 可空, 0 国际标准  1-4 格式1-4

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeCurrencyPosStyle”, ))
.否则
    对象.写属性 (“TypeCurrencyPosStyle”, 模式)
    返回 (0)
.如果结束


.子程序 货币格显示分隔符, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeCurrencyShowSep”, ))
.否则
    返回 (对象.写属性 (“TypeCurrencyShowSep”, 属性))
.如果结束


.子程序 货币格显示货币符, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeCurrencyShowSymbol”, ))
.否则
    返回 (对象.写属性 (“TypeCurrencyShowSymbol”, 属性))
.如果结束


.子程序 数字格允许最小值, 双精度小数型, , 
.参数 模式, 双精度小数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeNumberMin”, ))
.否则
    对象.写属性 (“TypeNumberMin”, 模式)
    返回 (0)
.如果结束


.子程序 数字格允许最大值, 双精度小数型, , 
.参数 模式, 双精度小数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeNumberMax”, ))
.否则
    对象.写属性 (“TypeNumberMax”, 模式)
    返回 (0)
.如果结束


.子程序 数字格小数点文本, 文本型, , 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypeNumberDecimal”, ))
.否则
    对象.写属性 (“TypeNumberDecimal”, 模式)
    返回 (“”)
.如果结束


.子程序 数字格分隔符, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypeNumberSeparator”, ))
.否则
    对象.写属性 (“TypeNumberSeparator”, 模式)
    返回 (“”)
.如果结束


.子程序 数字格显示前导零, 整数型, , 0 国际标准  1 无 2是
.参数 模式, 整数型, 可空, 0、TypeLeadingZeroIntl； 1、TypeLeadingZeroNo； 2、TypeLeadingZeroYes

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeNumberLeadingZero”, ))
.否则
    对象.写属性 (“TypeNumberLeadingZero”, 模式)
    返回 (0)
.如果结束


.子程序 数字格小数位数, 短整数型, , 
.参数 模式, 短整数型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读数值属性 (“TypeNumberDecPlaces”, ))
.否则
    对象.写属性 (“TypeNumberDecPlaces”, 模式)
    返回 (0)
.如果结束


.子程序 数字格负数格式, 整数型, , 格式1-5
.参数 高度, 整数型, 可空, 

.如果真 (是否为空 (高度))
    返回 (对象.读数值属性 (“TypeNumberNegStyle”, ))
.如果真结束
对象.写属性 (“TypeNumberNegStyle”, 高度)
返回 (0)


.子程序 数字格使用分隔符, 逻辑型, 公开, 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“TypeNumberShowSep”, ))
.否则
    返回 (对象.写属性 (“TypeNumberShowSep”, 属性))
.如果结束


.子程序 百分比格允许最小值, 双精度小数型, , 
.参数 属性, 双精度小数型, 可空, 

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypePercentMin”, ))
.如果真结束
对象.写属性 (“TypePercentMin”, 属性)
返回 (0)


.子程序 百分比格允许最大值, 双精度小数型, , 
.参数 属性, 双精度小数型, 可空, 

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypePercentMax”, ))
.如果真结束
对象.写属性 (“TypePercentMax”, 属性)
返回 (0)

.子程序 百分比格十进制, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“TypePercentDecimal”, ))
.否则
    对象.写属性 (“TypePercentDecimal”, 模式)
    返回 (“”)
.如果结束


.子程序 百分比格小数位, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypePercentDecPlaces”, ))
.如果真结束
对象.写属性 (“TypePercentDecPlaces”, 属性)
返回 (0)


.子程序 百分比格负数格式, 整数型, , 格式1-8
.参数 属性, 整数型, 可空, 

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypePercentNegStyle”, ))
.如果真结束
对象.写属性 (“TypePercentNegStyle”, 属性)
返回 (0)


.子程序 文本格文本方向, 整数型, 公开, 0、TypeTextOrientHorizontal； 1、TypeTextOrientVerticalLTR； 2、TypeTextOrientDown； 3、TypeTextOrientUp； 4、TypeTextOrientInvert； 5、TypeTextOrientVerticalRTL
.参数 属性, 整数型, 可空, 1.水平  2垂直LTR 2下 3 上 4 反转 5垂直rtl

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypeTextOrient”, ))
.如果真结束
对象.写属性 (“TypeTextOrient”, 属性)
返回 (0)


.子程序 单元格标记, 文本型, 公开, 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“CellTag”, ))
.否则
    对象.写属性 (“CellTag”, 模式)
    返回 (“”)
.如果结束


.子程序 编辑格溢流邻近格, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“AllowEditOverflow”, ))
.否则
    返回 (对象.写属性 (“AllowEditOverflow”, 属性))
.如果结束


.子程序 列表头标注方式, 整数型, , 0、DispBlank； 1、DispNumbers； 2、DispLetters
.参数 属性, 整数型, 可空, 0无 1数字  2字母

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“ColHeadersAutoText”, ))
.如果真结束
对象.写属性 (“ColHeadersAutoText”, 属性)
返回 (0)


.子程序 显示列表头, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“ColHeadersShow”, ))
.否则
    返回 (对象.写属性 (“ColHeadersShow”, 属性))
.如果结束


.子程序 行表头标注方式, 整数型, , 0、DispBlank； 1、DispNumbers； 2、DispLetters
.参数 属性, 整数型, 可空, 0无 1数字  2字母

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“RowHeadersAutoText”, ))
.如果真结束
对象.写属性 (“RowHeadersAutoText”, 属性)
返回 (0)


.子程序 显示行表头, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“RowHeadersShow”, ))
.否则
    返回 (对象.写属性 (“RowHeadersShow”, 属性))
.如果结束


.子程序 百分比格显示前导零, 整数型, , 0、TypeLeadingZeroIntl； 1、TypeLeadingZeroNo； 2、TypeLeadingZeroYes
.参数 属性, 整数型, 可空,  国际  1无 2是

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypePercentLeadingZero”, ))
.如果真结束
对象.写属性 (“TypePercentLeadingZero”, 属性)
返回 (0)

.子程序 表总数, 短整数型, , 
.参数 属性, 短整数型, 可空,  

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“SheetCount”, ))
.如果真结束
对象.写属性 (“SheetCount”, 属性)
返回 (0)

.子程序 当前表, 短整数型, , 
.参数 属性, 短整数型, 可空,  

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“ActiveSheet”, ))
.如果真结束
对象.写属性 (“ActiveSheet”, 属性)
返回 (0)

.子程序 选项卡左侧显示的表, 整数型, 公开, 
.参数 属性, 整数型, 可空,  

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TabStripLeftSheet”, ))
.如果真结束
对象.写属性 (“TabStripLeftSheet”, 属性)
返回 (0)

.子程序 选项卡字体, 对象, , 
.参数 字体, 对象, 可空, 

.如果 (是否为空 (字体))
    返回 (对象.读对象型属性 (“TabStripFont”, ))
.否则
    对象.写属性 (“TabStripFont”, 字体)
    返回 (字体)
.如果结束



.子程序 表名称, 文本型, , 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“SheetName”, ))
.否则
    对象.写属性 (“SheetName”, 模式)
    返回 (“”)
.如果结束


.子程序 选项卡可视度, 整数型, 公开, 、TabStripPolicyAsNeeded； 1、TabStripPolicyAlways；2、TabStripPolicyNever
.参数 属性, 整数型, 可空,  0 需要时 1 总是 2从不

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TabStripPolicy”, ))
.如果真结束
对象.写属性 (“TabStripPolicy”, 属性)
返回 (0)

.子程序 选项卡宽度比例, 双精度小数型, 公开, 
.参数 属性, 双精度小数型, 可空,  

.如果真 (是否为空 (属性))
    返回 (对象.读数值属性 (“TabStripRatio”, ))
.如果真结束
对象.写属性 (“TabStripRatio”, 属性)
返回 (0)

.子程序 打印缩放系数, 双精度小数型, 公开, 
.参数 属性, 双精度小数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“PrintZoomFactor”, ))
.否则
    对象.写属性 (“PrintZoomFactor”, 属性)
    返回 (0)
.如果结束


.子程序 垂直条宽度, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ScrollBarWidth”, ))
.否则
    对象.写属性 (“ScrollBarWidth”, 属性)
    返回 (0)
.如果结束


.子程序 水平条高度, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ScrollBarHeight”, ))
.否则
    对象.写属性 (“ScrollBarHeight”, 属性)
    返回 (0)
.如果结束


.子程序 激活格高亮, 整数型, , 0无 1正常
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ActiveCellHighlightStyle”, ))
.否则
    对象.写属性 (“ActiveCellHighlightStyle”, 属性)
    返回 (0)
.如果结束


.子程序 打印缩放比例, 整数型, , 0无 1灵活  2 缩放  3 最佳适应 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“PrintScalingMethod”, ))
.否则
    对象.写属性 (“PrintScalingMethod”, 属性)
    返回 (0)
.如果结束


.子程序 缩放宽度值以适应页, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“PrintBestFitPagesWide”, ))
.否则
    对象.写属性 (“PrintBestFitPagesWide”, 属性)
    返回 (0)
.如果结束


.子程序 缩放高度值以适应页, 短整数型, 公开, 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“PrintBestFitPagesTall”, ))
.否则
    对象.写属性 (“PrintBestFitPagesTall”, 属性)
    返回 (0)
.如果结束


.子程序 页面水平居中, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“PrintCenterOnPageH”, ))
.否则
    返回 (对象.写属性 (“PrintCenterOnPageH”, 属性))
    
.如果结束


.子程序 页面垂直居中, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“PrintCenterOnPageV”, ))
.否则
    返回 (对象.写属性 (“PrintCenterOnPageV”, 属性))
    
.如果结束


.子程序 允许移动列, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“AllowColMove”, ))
.否则
    返回 (对象.写属性 (“AllowColMove”, 属性))
    
.如果结束


.子程序 允许移动行, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“AllowRowMove”, ))
.否则
    返回 (对象.写属性 (“AllowRowMove”, 属性))
    
.如果结束


.子程序 科学格允许最小值, 双精度小数型, , 
.参数 属性, 双精度小数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypeScientificMin”, ))
.否则
    对象.写属性 (“TypeScientificMin”, 属性)
    返回 (0)
.如果结束


.子程序 科学格允许最大值, 双精度小数型, , 
.参数 属性, 双精度小数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypeScientificMax”, ))
.否则
    对象.写属性 (“TypeScientificMax”, 属性)
    返回 (0)
.如果结束


.子程序 科学格使用十进制, 文本型, , 
.参数 属性, 文本型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读文本属性 (“TypeScientificDecimal”, ))
.否则
    对象.写属性 (“TypeScientificDecimal”, 属性)
    返回 (“”)
.如果结束


.子程序 科学格小数位数, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypeScientificDecPlaces”, ))
.否则
    对象.写属性 (“TypeScientificDecPlaces”, 属性)
    返回 (0)
.如果结束


.子程序 水平条颜色, 整数型, , 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ScrollBarHColor”, ))
.否则
    对象.写属性 (“ScrollBarHColor”, 属性)
    返回 (0)
.如果结束


.子程序 垂直条颜色, 整数型, , 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ScrollBarVColor”, ))
.否则
    对象.写属性 (“ScrollBarVColor”, 属性)
    返回 (0)
.如果结束


.子程序 工作表索引, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“Sheet”, ))
.否则
    对象.写属性 (“Sheet”, 属性)
    返回 (0)
.如果结束


.子程序 当前工作表索引, 短整数型, , 
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“SheetSendingEvent”, ))
.否则
    对象.写属性 (“SheetSendingEvent”, 属性)
    返回 (0)
.如果结束


.子程序 表在选项卡中可视, 逻辑型, , 
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“SheetVisible”, ))
.否则
    返回 (对象.写属性 (“SheetVisible”, 属性))
    
.如果结束


.子程序 选择区单元格数目, 整数型, , 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“SelectionCount”, ))
.否则
    对象.写属性 (“SelectionCount”, 属性)
    返回 (0)
.如果结束


.子程序 外观风格, 整数型, , 0经典  1增强 3奢华
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“AppearanceStyle”, ))
.否则
    对象.写属性 (“AppearanceStyle”, 属性)
    返回 (0)
.如果结束


.子程序 选项卡形状, 整数型, , 0矩形 1圆角矩形 2梯形 3等腰梯形
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“TabEnhancedShape”, ))
.否则
    对象.写属性 (“TabEnhancedShape”, 属性)
    返回 (0)
.如果结束


.子程序 单元格注释颜色, 整数型, , 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“CellNoteIndicatorColor”, ))
.否则
    对象.写属性 (“CellNoteIndicatorColor”, 属性)
    返回 (0)
.如果结束


.子程序 单元格注释器形状, 整数型, , 0正方形 1三角形
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“CellNoteIndicatorShape”, ))
.否则
    对象.写属性 (“CellNoteIndicatorShape”, 属性)
    返回 (0)
.如果结束


.子程序 选项卡条形按钮, 整数型, , 0需要时  1总是  2 无
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“CellNoteIndicatorShape”, ))
.否则
    对象.写属性 (“CellNoteIndicatorShape”, 属性)
    返回 (0)
.如果结束


.子程序 标头高亮模式, 整数型, , 0 默认 1无 2开  当标头被选中或 单元格被选中时标头高亮色
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“HighlightHeaders”, ))
.否则
    对象.写属性 (“HighlightHeaders”, 属性)
    返回 (0)
.如果结束


.子程序 选择单元格风格, 整数型, , 0 默认 1反色 2 同色 3 透明  当选择的 单元格被画时风格
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“HighlightStyle”, ))
.否则
    对象.写属性 (“HighlightStyle”, 属性)
    返回 (0)
.如果结束


.子程序 选择单元格颜色, 整数型, , 只有当选择单元格风格()为3时才有效
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“HighlightAlphaBlendColor”, ))
.否则
    对象.写属性 (“HighlightAlphaBlendColor”, 属性)
    返回 (0)
.如果结束


.子程序 选择单元格前景色透明度, 短整数型, , 只有当选择单元格风格()为3时才有效 且 值在0-255 为0时完全透明.
.参数 属性, 短整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“HighlightAlphaBlend”, ))
.否则
    对象.写属性 (“HighlightAlphaBlend”, 属性)
    返回 (0)
.如果结束


.子程序 自定义单元格名称, 文本型, , 
.参数 属性, 文本型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读文本属性 (“TypeCustomName”, ))
.否则
    对象.写属性 (“TypeCustomName”, 属性)
    返回 (“”)
.如果结束


.子程序 自定义单元格样式, 整数型, , 
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“TypeCustomStyle”, ))
.否则
    对象.写属性 (“TypeCustomStyle”, 属性)
    返回 (0)
.如果结束


.子程序 自定义单元格项目数据, 变体型, , 
.参数 属性, 变体型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读属性 (“TypeCustomItemData”, ))
.否则
    对象.写属性 (“TypeCustomItemData”, 属性)
    返回 (属性)
.如果结束


.子程序 单元格呈现效果风格, 整数型, , 0继承  1是 2否
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“UseVisualStyles”, ))
.否则
    对象.写属性 (“UseVisualStyles”, 属性)
    返回 (0)
.如果结束


.子程序 文本格增强标头, 逻辑型, 公开, Sets or returns whether a static text cell is rendered like enhanced header cells
.参数 属性, 逻辑型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读逻辑属性 (“EnhanceStaticCells”, ))
.否则
    返回 (对象.写属性 (“EnhanceStaticCells”, 属性))
.如果结束


.子程序 滚动条风格, 整数型, 公开, 0继承  1正常 2效果 3增强
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ScrollBarStyle”, ))
.否则
    对象.写属性 (“ScrollBarStyle”, 属性)
    返回 (0)
.如果结束


.子程序 背景色, 整数型, 公开, 颜色
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“BackColor”, ))
.否则
    对象.写属性 (“BackColor”, 属性)
    返回 (0)
.如果结束


.子程序 边框线型, 整数型, , 0 空线  1实线
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“BorderStyle”, ))
.否则
    对象.写属性 (“BorderStyle”, 属性)
    返回 (0)
.如果结束


.子程序 启用, 逻辑型, , 表格是否可用 
.参数 允许, 逻辑型, 可空, 

.如果 (是否为空 (允许))
    返回 (对象.读逻辑属性 (“Enabled”, ))
.否则
    返回 (对象.写属性 (“Enabled”, 允许))
.如果结束


.子程序 字体, 字体, , 设置表格的字体
.参数 字体1, 字体, 可空, 

.局部变量 字体属性, 字体, , , 
.局部变量 对象2, 对象, , , 

赋值 (对象2, 对象.读对象型属性 (“Font”, ))
.如果 (是否为空 (字体1))
    赋值 (字体属性.加粗, 对象2.读逻辑属性 (“Bold”, ))
    赋值 (字体属性.字体名称, 对象2.读文本属性 (“Name”, ))
    赋值 (字体属性.下划线, 对象2.读逻辑属性 (“Underline”, ))
    赋值 (字体属性.倾斜, 对象2.读逻辑属性 (“Italic”, ))
    赋值 (字体属性.删除线, 对象2.读逻辑属性 (“Strikethrough”, ))
    赋值 (字体属性.字体大小, 对象2.读数值属性 (“Size”, ))
     ' 字体属性. ＝ 对象2.读数值属性 (“Charset”, ) 字符集
    返回 (字体属性)
.否则
    
    对象2.写属性 (“Bold”, 字体1.加粗)
    对象2.写属性 (“Name”, 字体1.字体名称)
    对象2.写属性 (“Underline”, 字体1.下划线)
    对象2.写属性 (“Italic”, 字体1.倾斜)
    对象2.写属性 (“Strikethrough”, 字体1.删除线)
    对象2.写属性 (“Size”, 字体1.字体大小)
    对象2.写属性 (“Font”, 字体1)
    返回 (字体属性)
.如果结束


.子程序 前景色, 整数型, , 文本颜色
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“ForeColor”, ))
.否则
    对象.写属性 (“ForeColor”, 属性)
    返回 (0)
.如果结束


.子程序 句柄, 整数型, , 句柄值-真正有效的
.参数 属性, 整数型, 可空, 

.如果 (是否为空 (属性))
    返回 (对象.读数值属性 (“hWnd”, ))
.否则
    对象.写属性 (“hWnd”, 属性)
    返回 (0)
.如果结束


.子程序 单元格内容, 文本型, , 
.参数 模式, 文本型, 可空, 

.如果 (是否为空 (模式))
    返回 (对象.读文本属性 (“Text”, ))
.否则
    对象.写属性 (“Text”, 模式)
    返回 (“”)
.如果结束


.子程序 方法_定义函数, 逻辑型, 公开, Defines a custom function, which can be used in a formula definition
.参数 FunctionName, 文本型, , 
.参数 ParameterCnt, 短整数型, , 

返回 (对象.逻辑方法 (“AddCustomFunction”, FunctionName, ParameterCnt))

.子程序 方法_定义加参数函数, 逻辑型, 公开, Defines a custom function with a variable number of parameters
.参数 FunctionName, 文本型, , 
.参数 MinParamCnt, 短整数型, , 
.参数 MaxParamCnt, 短整数型, , 
.参数 Flags, 空白型, , 0 无 1单元格引用 2 范围块引用

返回 (对象.逻辑方法 (“AddCustomFunction”, FunctionName, MinParamCnt))

.子程序 方法_置列对齐方式_自定义, 空白型, 公开, 对某列设置对齐方式 
.参数 列号, 空白型, , 
.参数 垂直对齐方式, 整数型, , 0、TypeVAlignTop顶； 1、TypeVAlignBottom底； 2、TypeVAlignCenter居中
.参数 水平对齐方式, 整数型, , 0、TypeHAlignLeft左； 1、TypeHAlignRight右； 2、TypeHAlignCenter居中

.如果真 (等于 (允许修改单元格块, 假))
    允许修改单元格块 (真)
    
.如果真结束
起始列号 (列号)
结束列号 (列号)
起始行号 (-1)
结束行号 (-1)
单元格水平对齐 (水平对齐方式)
单元格垂直对齐 (垂直对齐方式)

.子程序 方法_置单元格背景色与前景色, 空白型, 公开, 用这种方式可以对单元格区间设置前景背景色
.参数 列1, 空白型, , 
.参数 行1, 空白型, , 
.参数 列2, 空白型, 可空, 为空则与列1同
.参数 行2, 空白型, 可空, 为空则与行1同
.参数 背景色, 空白型, 可空, 
.参数 字体颜色, 空白型, 可空, 即前景色

格式化行列 (列1, 行1, 列2, 行2)
前景色 (字体颜色)
背景色 (背景色)


.子程序 格式化行列, 空白型, , 
.参数 列1, 空白型, , 
.参数 行1, 空白型, , 
.参数 列2, 空白型, 可空, 
.参数 行2, 空白型, 可空, 

.如果真 (等于 (允许修改单元格块, 假))
    允许修改单元格块 (真)
    
.如果真结束
起始列号 (列1)
起始行号 (行1)
.如果真 (是否为空 (列2))
    赋值 (列2, 列1)
.如果真结束
.如果真 (是否为空 (行2))
    赋值 (行2, 行1)
.如果真结束
结束列号 (列2)
结束行号 (行2)


.子程序 方法_置单元格字体, 空白型, 公开, 用这种方式可以对单元格区间设置单元格字体
.参数 列1, 空白型, , 
.参数 行1, 空白型, , 
.参数 列2, 空白型, 可空, 
.参数 行2, 空白型, 可空, 
.参数 字体类型, 字体, , 

格式化行列 (列1, 行1, 列2, 行2)
字体 ()


.子程序 方法_取单元格文本_自定义, 文本型, 公开, 自已写的取文本()代码,官方的因为变体型,在易中不好用
.参数 列1, 空白型, , 
.参数 行1, 空白型, , 

起始列号 (列1)
起始行号 (行1)
返回 (单元格内容 ())

.子程序 方法_置单元格对齐_自定义, 空白型, , 
.参数 列1, 空白型, , 
.参数 行1, 空白型, , 
.参数 垂直对齐, 空白型, , 0、TypeVAlignTop； 1、TypeVAlignBottom； 2、TypeVAlignCenter
.参数 水平对齐, 空白型, , 0、TypeHAlignLeft； 1、TypeHAlignRight； 2、TypeHAlignCenter

起始列号 (列1)
起始行号 (行1)
单元格垂直对齐 (垂直对齐)
单元格水平对齐 (水平对齐)


.子程序 方法_取坐标, 空白型, 公开, 返回传入自定义的函数的单元格引用参数列和行的坐标.Returns the column and row coordinates of a cell reference parameter that is being passed into a custom function
.参数 param, 整数型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 

对象.方法 (“CFGetCellParam”, param, Col, Row)


.子程序 方法_取双精度浮点值, 双精度小数型, , 返回一个自定义的函数参数作为双精度、 浮点值
.参数 param, 整数型, , 

返回 (对象.数值方法 (“CFGetDoubleParam”, param))


.子程序 方法_取强化双精度浮点值, 双精度小数型, 公开, 返回一个自定义的函数参数作为双精度、 浮点值
.参数 Param, 短整数型, , 
.参数 ParamValue, 双精度小数型, , 

返回 (对象.数值方法 (“CFGetDoubleParamExt”, Param, ParamValue))

.子程序 方法_取长整型值, 整数型, 公开, 返回一个自定义的函数参数作为长整型值
.参数 Param, 短整数型, , 

返回 (对象.数值方法 (“CFGetLongParam”, Param))

.子程序 方法_取参数信息, 逻辑型, 公开, 返回自定义函数的参数信息
.参数 Param, 短整数型, , 
.参数 Type, 空白型, , 0长整数 1双浮点   2文本 
.参数 Status, 空白型, , 0 ok  1 错误 2空

返回 (对象.逻辑方法 (“CFGetParamInfo”, Param, Type, Status))

.子程序 方法_取坐标1, 空白型, 公开, 返回列和行坐标的单元格区域的参考参数，正在进入一个自定义函数
.参数 param, 整数型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 col2, 空白型, , 
.参数 row2, 空白型, , 

对象.方法 (“CFGetRangeParam”, param, Col, Row, col2, row2)

.子程序 方法_取字符串, 文本型, 公开, 返回一个自定义函数的字符串参数
.参数 param, 短整数型, , 

返回 (对象.文本方法 (“CFGetStringParam”, param))


.子程序 方法_置返回值, 空白型, 公开, Sets the return value of a custom function
.参数 var, 变体型, , 

对象.方法 (“CFSetResult”, var)

.子程序 方法_列数字转为字母, 文本型, 公开, 
.参数 HeaderNumber, 整数型, , 

返回 (对象.文本方法 (“ColNumberToLetter”, HeaderNumber))


.子程序 方法_列宽值转为微点, 空白型, 公开, 
.参数 Width, 小数型, , 
.参数 Twips, 整数型, 参考, 

对象.方法 (“ColWidthToTwips”, Width, Twips)

.子程序 方法_取右下角坐标, 空白型, 公开, 返回单元格显示在右下角当前视图中的坐标
.参数 col, 空白型, 参考, 
.参数 row, 空白型, 参考, 

对象.方法 (“GetBottomRightCell”, col, row)

.子程序 方法_取绑定修改格, 逻辑型, , 确定已绑定的 fpSpread 控件中是否修改了单元格Determines if a cell has been modified in a bound fpSpread control
.参数 col, 空白型, , 
.参数 row, 空白型, , 

返回 (对象.逻辑方法 (“GetCellDirtyFlag”, col, row))


.子程序 方法_取单元格坐标, 空白型, , 返回单元坐标的单元格居住在指定的屏幕坐标  不好用
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 x, 空白型, 参考, 
.参数 y, 空白型, 参考, 

对象.方法 (“GetCellFromScreenCoord”, col, row, x, y)

.子程序 方法_取单元格微点宽高, 逻辑型, , 取单元格微点宽高  也不好用?
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 x, 空白型, 参考, 
.参数 y, 空白型, 参考, 
.参数 width, 空白型, , 
.参数 height, 空白型, , 

返回 (对象.逻辑方法 (“GetCellPos”, col, row, x, y, width, height))


.子程序 方法_取区域宽高微点, 空白型, 公开, Returns the height and width of the client area in twips
.参数 Width, 空白型, 参考, 
.参数 Height, 空白型, 参考, 

对象.方法 (“GetClientArea”, Width, Height)

.子程序 方法_取列关联数据, 整数型, 公开, 返回与指定的列相关联的项目数据
.参数 col, 空白型, , 

返回 (对象.数值方法 (“GetColItemData”, col))


.子程序 方法_返回自定义名称, 文本型, 公开, 
.参数 name, 文本型, , 

返回 (对象.文本方法 (“QueryCustomName”, name))


.子程序 方法_取自定义名称, 文本型, 公开, 
.参数 name, 文本型, , 

返回 (对象.文本方法 (“GetCustomName”, name))

.子程序 方法_取填充数据, 逻辑型, , 从数据库内数据填充事件返回数据
.参数 var, 变体型, , 
.参数 VarType, 短整数型, , 

返回 (对象.逻辑方法 (“GetDataFillData”, var, VarType))


.子程序 方法_取第一有效单元格, 空白型, , 允许用户将焦点移到它在电子表格中返回第一个单元格
.参数 col, 空白型, , 
.参数 row, 空白型, , 

对象.方法 (“GetFirstValidCell”, col, row)

.子程序 方法_取关联项目数据, 整数型, , 返回与 fpSpread 控件关联的项目数据
返回 (对象.数值方法 (“GetItemData”, ))


.子程序 方法_取迭代数, 逻辑型, , 
.参数 MaxIterations, 短整数型, , 
.参数 MaxChange, 双精度小数型, , 

返回 (对象.逻辑方法 (“GetIteration”, MaxIterations, MaxChange))


.子程序 方法_取最后有效单元格, 空白型, , 返回最后一个单元格中电子表格用户可以移动焦点
.参数 Col, 空白型, 参考, 
.参数 Row, 空白型, 参考, 

对象.方法 (“GetLastValidCell”, Col, Row)

.子程序 方法_取选择行, 整数型, 公开, 返回电子表格处于多重选择或扩展选择操作模式时选择哪些行
.参数 SelPrev, 空白型, , 

返回 (对象.数值方法 (“GetMultiSelItem”, SelPrev))


.子程序 方法_取引用样式, 整数型, 公开, 返回使用电子表格来代表公式和自定义名称引用样式
返回 (对象.数值方法 (“GetRefStyle”, ))


.子程序 方法_取行关联项目数据, 整数型, 公开, 
.参数 row, 空白型, , 

返回 (对象.数值方法 (“GetRowItemData”, row))


.子程序 方法_取单元格文本, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Var, 文本型, 参考, 

返回 (对象.逻辑方法 (“GetText”, Col, Row, Var))

.子程序 方法_单元格是否被选择, 逻辑型, 公开, 
.参数 col, 空白型, , 
.参数 row, 空白型, , 

返回 (对象.逻辑方法 (“IsCellSelected”, col, row))


.子程序 方法_公式是否有效, 逻辑型, , 
.参数 Formula, 文本型, , 

返回 (对象.逻辑方法 (“IsFormulaValid”, Formula))


.子程序 方法_是否可见, 逻辑型, , 指定列,行,单元格是否可见
.参数 Col, 空白型, 可空, 
.参数 Row, 空白型, 可空, 
.参数 Partial, 逻辑型, , 

返回 (对象.逻辑方法 (“IsVisible”, Col, Row, Partial))


.子程序 方法_载入二进制文件, 逻辑型, , 
.参数 FileName, 文本型, , 

返回 (对象.逻辑方法 (“LoadFromFile”, FileName))


.子程序 方法_加载制表分隔符文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 

返回 (对象.逻辑方法 (“LoadTabFile”, FileName))


.子程序 方法_行高到微点, 空白型, 公开, 转换行高程测量以缇。Converts a row-height measurement in to twips
.参数 Row, 空白型, , 
.参数 Height, 小数型, , 
.参数 Twips, 空白型, 参考, 

对象.方法 (“RowHeightToTwips”, Row, Height, Twips)

.子程序 方法_保存制表符文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 

返回 (对象.逻辑方法 (“SaveTabFile”, FileName))


.子程序 方法_保存二进制文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 DataOnly, 逻辑型, , 是否格式化数据

返回 (对象.逻辑方法 (“SaveToFile”, FileName, DataOnly))


.子程序 方法_置单元格更改标志, 逻辑型, 公开, 标志绑定的 fpSpread 控件中行或单元格，每当数据单元格中的已更改
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Dirty, 逻辑型, , 改变

返回 (对象.逻辑方法 (“SetCellDirtyFlag”, Col, Row, Dirty))


.子程序 方法_置项数据关联列, 空白型, 公开, 设置项数据与指定的列相关联
.参数 Col, 空白型, , 
.参数 Value, 空白型, , 

对象.方法 (“SetColItemData”, Col, Value)

.子程序 方法_置自定义名称, 逻辑型, 公开, 设置自定义的名称和其值
.参数 Name, 文本型, , 
.参数 Value, 文本型, , 

返回 (对象.逻辑方法 (“SetCustomName”, Name, Value))


.子程序 方法_数据库填充数据, 逻辑型, 公开, 
.参数 var, 变体型, , 

返回 (对象.逻辑方法 (“SetDataFillData”, var))


.子程序 方法_置项数据, 空白型, 公开, 设置项数据与 fpSpread 控件关联
.参数 Value, 空白型, , 

对象.方法 (“SetItemData”, Value)

.子程序 方法_置选代数, 空白型, 公开, 设置迭代和循环引用的迭代之间更改的数
.参数 Iteration, 逻辑型, , 
.参数 MaxIterations, 短整数型, , 
.参数 MaxChange, 双精度小数型, , 

对象.方法 (“SetIteration”, Iteration, MaxIterations, MaxChange)

.子程序 方法_置引用样式, 空白型, 公开, 设置使用电子表格来代表公式和自定义名称引用样式
.参数 RefStyle, 空白型, , 参数值为以下值之一： 0、RefStyleDefault； 1、RefStyleA1； 2、RefStyleR1C1

对象.方法 (“SetRefStyle”, RefStyle)

.子程序 方法_行关联数据, 空白型, 公开, 
.参数 Row, 空白型, , 
.参数 Value, 空白型, , 

对象.方法 (“SetRowItemData”, Row, Value)

.子程序 方法_置单元格内容, 空白型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Var, 文本型, , 原来是变体型,直接赋值为文本型

对象.方法 (“SetText”, Col, Row, Var)

.子程序 方法_微点到列宽, 空白型, 公开, 
.参数 Twips, 空白型, , 
.参数 ColWidth, 小数型, 参考, 

对象.方法 (“TwipsToColWidth”, Twips, ColWidth)

.子程序 方法_微点到行高, 空白型, 公开, 
.参数 Row, 空白型, , 
.参数 Twips, 空白型, , 
.参数 RowHeight, 小数型, , 

对象.方法 (“TwipsToRowHeight”, Row, Twips, RowHeight)

.子程序 方法_取功能键, 逻辑型, 公开, 返回快捷键或分配给指定的操作的导航键
.参数 Action, 空白型, , 参数值为以下值之一： 0、ActionKeyClear； 1、ActionKeyCurrent； 2、ActionKeyPopup
.参数 fShift, 逻辑型, , 
.参数 fCtrl, 逻辑型, , 
.参数 Key, 短整数型, , 

返回 (对象.逻辑方法 (“GetActionKey”, Action, fShift, fCtrl, Key))


.子程序 方法_置快捷键, 逻辑型, 公开, 置快捷键或导航键
.参数 Action, 空白型, , 参数值为以下值之一： 0、ActionKeyClear； 1、ActionKeyCurrent； 2、ActionKeyPopup
.参数 fShift, 逻辑型, , 
.参数 fCtrl, 逻辑型, , 
.参数 Key, 短整数型, , 

返回 (对象.逻辑方法 (“SetActionKey”, Action, fShift, fCtrl, Key))


.子程序 方法_取交替行颜色, 逻辑型, 公开, 返回为奇数，甚至行背景和文本颜色
.参数 clrBackOdd, 空白型, 参考, 奇数行背景色
.参数 clrForeOdd, 空白型, 参考, 奇数行前景
.参数 clrBackEven, 空白型, 参考, 偶数行背景
.参数 clrForeEven, 空白型, 参考, 偶数行前景

返回 (对象.逻辑方法 (“GetOddEvenRowColor”, clrBackOdd, clrForeOdd, clrBackEven, clrForeEven))


.子程序 方法_置交替行颜色, 逻辑型, 公开, 设置奇偶行背景和文本颜色
.参数 clrBackOdd, 空白型, , 奇数行背景
.参数 clrForeOdd, 空白型, , 奇数行前景
.参数 clrBackEven, 空白型, , 偶数行背景
.参数 clrForeEven, 空白型, , 偶数行前景

返回 (对象.逻辑方法 (“SetOddEvenRowColor”, clrBackOdd, clrForeOdd, clrBackEven, clrForeEven))

.子程序 方法_取浮点值, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 双精度小数型, 参考, 

返回 (对象.逻辑方法 (“GetFloat”, Col, Row, Value))


.子程序 方法_置浮点值, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 双精度小数型, , 

返回 (对象.逻辑方法 (“SetFloat”, Col, Row, Value))

.子程序 方法_取整数值, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 空白型, , 

返回 (对象.逻辑方法 (“GetInteger”, Col, Row, Value))

.子程序 方法_置整数值, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 空白型, , 

返回 (对象.逻辑方法 (“SetInteger”, Col, Row, Value))

.子程序 方法_置日期框弹出文本, 空白型, , Sets the text for the pop-up calendar in a date cell
.参数 ShortDays, 文本型, , 
.参数 LongDays, 文本型, , 
.参数 ShortMonths, 文本型, , 
.参数 LongMonths, 文本型, , 
.参数 OkText, 文本型, , 
.参数 CancelText, 文本型, , 

对象.方法 (“SetCalText”, ShortDays, LongDays, ShortMonths, LongMonths, OkText, CancelText)

.子程序 方法_取文本提示外观, 逻辑型, 公开, 
.参数 FontName, 文本型, 参考, 
.参数 FontSize, 短整数型, 参考, 
.参数 FontBold, 逻辑型, 参考, 
.参数 FontItalic, 逻辑型, 参考, 
.参数 BackColor, 空白型, 参考, 
.参数 ForeColor, 空白型, 参考, 

返回 (对象.逻辑方法 (“GetTextTipAppearance”, FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor))


.子程序 方法_置文本提示外观, 逻辑型, , 
.参数 FontName, 文本型, , 
.参数 FontSize, 短整数型, , 
.参数 FontBold, 逻辑型, , 
.参数 FontItalic, 逻辑型, , 
.参数 BackColor, 空白型, , 
.参数 ForeColor, 空白型, , 

返回 (对象.逻辑方法 (“SetTextTipAppearance”, FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor))

.子程序 方法_导出html文件, 逻辑型, , 
.参数 FileName, 文本型, , 
.参数 AppendFlag, 逻辑型, , 
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“ExportToHTML”, FileName, AppendFlag, LogFile))


.子程序 方法_导出部分范围html文件, 逻辑型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Col2, 空白型, , 
.参数 Row2, 空白型, , 
.参数 FileName, 文本型, , 
.参数 AppendFlag, 逻辑型, , 
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“ExportRangeToHTML”, Col, Row, Col2, Row2, FileName, AppendFlag, LogFile))


.子程序 方法_取阵列, 逻辑型, 公开, 不知参数对否
.参数 ColLeft, 空白型, , 左边列
.参数 RowTop, 空白型, , 顶部行
.参数 VarArray, 变体型, 参考, 返回值?

返回 (对象.逻辑方法 (“GetArray”, ColLeft, RowTop, VarArray))


.子程序 方法_置阵列, 逻辑型, 公开, 不知参数对否
.参数 ColLeft, 空白型, , 左边列
.参数 RowTop, 空白型, , 顶部行
.参数 VarArray, 变体型, , 返回值?

返回 (对象.逻辑方法 (“SetArray”, ColLeft, RowTop, VarArray))


.子程序 方法_是否excel文件, 短整数型, , 
.参数 FileName, 文本型, , 

返回 (对象.数值方法 (“IsExcelFile”, FileName))

.子程序 方法_取excel工作表句柄, 逻辑型, 公开, 返回工作簿和工作表在指定的 Excel 格式文件中的列表的句柄
.参数 FileName, 文本型, , 
.参数 VarArray, 变体型, , 
.参数 ListCount, 短整数型, , 
.参数 LogFileName, 文本型, 可空, 
.参数 WorkbookHandle, 短整数型, 参考, 
.参数 Replace, 逻辑型, , 

返回 (对象.逻辑方法 (“GetExcelSheetList”, FileName, VarArray, ListCount, LogFileName, WorkbookHandle, Replace))


.子程序 方法_导入Excel表, 逻辑型, , 
.参数 WorkbookHandle, 短整数型, , 
.参数 Sheet, 变体型, , 

返回 (对象.逻辑方法 (“ImportExcelSheet”, WorkbookHandle, Sheet))


.子程序 方法_导出Excel文件表, 逻辑型, 公开, 导出Excel文件
.参数 FileName, 文本型, , 
.参数 SheetName, 文本型, , 
.参数 LogFileName, 文本型, 可空, 

返回 (对象.逻辑方法 (“ExportToExcel”, FileName, SheetName, LogFileName))


.子程序 方法_下个自定义函数名, 逻辑型, , 
.参数 PrevFuncName, 文本型, , 
.参数 FuncName, 文本型, 参考, 

返回 (对象.逻辑方法 (“EnumCustomFunction”, PrevFuncName, FuncName))

.子程序 方法_取函数信息, 逻辑型, , 
.参数 FuncName, 文本型, , 
.参数 MinArgs, 短整数型, , 
.参数 MaxArgs, 短整数型, , 
.参数 Flags, 空白型, , 0、CustomFunctionFlagsNone； 1、CustomFunctionFlagsWantCellRef； 2、CustomFunctionFlagsWantRangeRef

返回 (对象.逻辑方法 (“GetCustomFunction”, FuncName, MinArgs, MaxArgs, Flags))


.子程序 方法_删除函数, 逻辑型, , 
.参数 FuncName, 文本型, , 

返回 (对象.逻辑方法 (“RemoveCustomFunction”, FuncName))


.子程序 方法_重计算单元格公式, 逻辑型, , 
.参数 col, 空白型, , 
.参数 row, 空白型, , 

返回 (对象.逻辑方法 (“ReCalcCell”, col, row))


.子程序 方法_拖放链接嵌入对象, 空白型, 公开, OLEDrag
对象.方法 (“OLEDrag”, )

.子程序 方法_取表标签, 逻辑型, , Returns whether the TextTipFetch event was fired for a Cell Note or not
返回 (对象.逻辑方法 (“IsFetchCellNote”, ))


.子程序 方法_导出XML文件, 逻辑型, , 
.参数 FileName, 文本型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, 可空, 

返回 (对象.逻辑方法 (“ExportToXML”, FileName, Root, Collection, Flags, LogFile))

.子程序 方法_部分范围导出XML文件, 逻辑型, , 
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 col2, 空白型, , 
.参数 row2, 空白型, , 
.参数 FileName, 文本型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, 可空, 

返回 (对象.逻辑方法 (“ExportRangeToXML”, col, row, col2, row2, FileName, Root, Collection, Flags, LogFile))

.子程序 方法_导出缓冲区XML格式, 逻辑型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Buff, 文本型, , 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, 可空, 

返回 (对象.逻辑方法 (“ExportToXMLBuffer”, Root, Collection, Buff, Flags, LogFile))


.子程序 方法_选定范围导出缓冲区XML格式, 逻辑型, 公开, 
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 col2, 空白型, , 
.参数 row2, 空白型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Buff, 文本型, , 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, 可空, 

返回 (对象.逻辑方法 (“ExportRangeToXMLBuffer”, col, row, col2, row2, Root, Collection, Buff, Flags, LogFile))

.子程序 方法_打印页加外框, 逻辑型, 公开, 
.参数 hDC, 空白型, , 
.参数 Left, 空白型, , 
.参数 Top, 空白型, , 
.参数 Right, 空白型, , 
.参数 Bottom, 空白型, , 
.参数 Page, 短整数型, , 

返回 (对象.逻辑方法 (“OwnerPrintDraw”, hDC, Left, Top, Right, Bottom, Page))


.子程序 方法_指定范围导出到文本文件, 逻辑型, 公开, 
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 col2, 空白型, , 
.参数 row2, 空白型, , 
.参数 FileName, 文本型, , 
.参数 CellDelim, 文本型, , 
.参数 ColDelim, 文本型, , 
.参数 RowDelim, 文本型, , 
.参数 Flags, 空白型, , 1、ExportRangeToTextFileCreateNewFile； 2、ExportRangeToTextFileAppendToExistingFile； 4、ExportRangeToTextFileUnformattedData； 8、ExportRangeToTextFileColHeaders； 16、ExportRangeToTextFileRowHeaders； 24、ExportRangeToTextFileAllHeaders； 32、ExportRangeToTextFileCheckBoxFalse
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“ExportRangeToTextFile”, col, row, col2, row2, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile))


.子程序 方法_导出到文本文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 CellDelim, 文本型, , 
.参数 ColDelim, 文本型, , 
.参数 RowDelim, 文本型, , 
.参数 Flags, 空白型, , 1、ExportRangeToTextFileCreateNewFile； 2、ExportRangeToTextFileAppendToExistingFile； 4、ExportRangeToTextFileUnformattedData； 8、ExportRangeToTextFileColHeaders； 16、ExportRangeToTextFileRowHeaders； 24、ExportRangeToTextFileAllHeaders； 32、ExportRangeToTextFileCheckBoxFalse
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“ExportToTextFile”, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile))

.子程序 方法_导入文本文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 CellDelim, 文本型, , 
.参数 ColDelim, 文本型, , 
.参数 RowDelim, 文本型, , 
.参数 Flags, 空白型, , 0、LoadTextFileNoHeaders； 1、LoadTextFileColHeaders； 2、LoadTextFileRowHeaders； 4、LoadTextFileClearDataOnly
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“LoadTextFile”, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile))


.子程序 方法_置日期框文本弹出跨度, 空白型, 公开, 
.参数 ShortDays, 文本型, , 
.参数 LongDays, 文本型, , 
.参数 ShortMonths, 文本型, , 
.参数 LongMonths, 文本型, , 
.参数 OkText, 文本型, , 
.参数 CancelText, 文本型, , 

对象.方法 (“SetCalTextOverride”, ShortDays, LongDays, ShortMonths, LongMonths, OkText, CancelText)


.子程序 方法_取日期框文本弹出跨度, 空白型, , 
.参数 ShortDays, 文本型, 参考, 
.参数 LenShortDays, 短整数型, 参考, 
.参数 LongDays, 文本型, 参考, 
.参数 LenLongDays, 短整数型, 参考, 
.参数 ShortMonths, 文本型, 参考, 
.参数 LenShortMonths, 短整数型, 参考, 
.参数 LongMonths, 文本型, 参考, 
.参数 LenLongMonths, 短整数型, 参考, 
.参数 OkText, 文本型, 参考, 
.参数 LenOkText, 短整数型, 参考, 
.参数 CancelText, 文本型, 参考, 
.参数 LenCancelText, 短整数型, 参考, 

对象.方法 (“GetCalTextOverride”, ShortDays, LenShortDays, LongDays, LenLongDays, ShortMonths, LenShortMonths, LongMonths, LenLongMonths, OkText, LenOkText, CancelText, LenCancelText)


.子程序 方法_脚本_取行列坐标, 空白型, 公开, 返回列和行坐标的单元格引用参数，正在进入一个自定义功能
.参数 Param, 短整数型, , 
.参数 col, 变体型, , 
.参数 row, 变体型, , 

对象.方法 (“ScriptCFGetCellParam”, Param, col, row)

.子程序 方法_脚本_取加强双精度浮点值, 双精度小数型, 公开, 
.参数 Param, 短整数型, , 
.参数 ParamValue, 变体型, , 

返回 (对象.数值方法 (“ScriptCFGetDoubleParamExt”, Param, ParamValue))


.子程序 方法_脚本_自定义函数信息, 逻辑型, , 
.参数 Param, 短整数型, , 
.参数 Type, 变体型, , 
.参数 Status, 变体型, , 

返回 (对象.逻辑方法 (“ScriptCFGetParamInfo”, Param, Type, Status))


.子程序 方法_脚本_自定义函数块坐标, 空白型, , 返回列和行的单元格区域引用参数是被传递到自定义函数坐标
.参数 Param, 短整数型, , 
.参数 Col, 变体型, , 
.参数 Row, 变体型, , 
.参数 Col2, 变体型, , 
.参数 Row2, 变体型, , 

对象.方法 (“ScriptCFGetRangeParam”, Param, Col, Row, Col2, Row2)

.子程序 方法_脚本_列宽度转微点, 空白型, , 
.参数 Width, 小数型, , 
.参数 Twips, 变体型, 参考, 

对象.方法 (“ScriptColWidthToTwips”, Width, Twips)

.子程序 方法_脚本_取右下角单元格, 空白型, , 
.参数 col, 变体型, 参考, 
.参数 row, 变体型, 参考, 

对象.方法 (“ScriptGetBottomRightCell”, col, row)

.子程序 方法_脚本_取单元格屏幕坐标, 空白型, , 
.参数 Col, 变体型, , 
.参数 Row, 变体型, , 
.参数 x, 空白型, 参考, 
.参数 y, 空白型, 参考, 

对象.方法 (“ScriptGetCellFromScreenCoord”, Col, Row, x, y)

.子程序 方法_脚本_单元格宽度微点, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 x, 变体型, 参考, 
.参数 y, 变体型, 参考, 
.参数 Width, 变体型, 参考, 
.参数 Height, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetCellPos”, Col, Row, x, y, Width, Height))


.子程序 方法_脚本_取用户区宽高微点, 空白型, 公开, 
.参数 Width, 变体型, 参考, 
.参数 Height, 变体型, 参考, 

对象.方法 (“ScriptGetClientArea”, Width, Height)

.子程序 方法_脚本_取第一单元格, 空白型, 公开, 
.参数 col, 变体型, , 
.参数 row, 变体型, , 

对象.方法 (“ScriptGetFirstValidCell”, col, row)

.子程序 方法_脚本_取迭代数, 逻辑型, 公开, 
.参数 MaxIterations, 变体型, , 
.参数 MaxChange, 变体型, , 

返回 (对象.逻辑方法 (“ScriptGetIteration”, MaxIterations, MaxChange))


.子程序 方法_脚本_最后有效单元格, 空白型, 公开, 
.参数 col, 变体型, , 
.参数 row, 变体型, , 

对象.方法 (“ScriptGetLastValidCell”, col, row)

.子程序 方法_脚本_行高转微点, 空白型, 公开, 
.参数 Row, 空白型, , 
.参数 Height, 小数型, , 
.参数 Twips, 变体型, 参考, 

对象.方法 (“ScriptRowHeightToTwips”, Row, Height, Twips)

.子程序 方法_脚本_微点转列宽, 空白型, 公开, 
.参数 Twips, 空白型, , 
.参数 ColWidth, 变体型, 参考, 

对象.方法 (“ScriptTwipsToColWidth”, Twips, ColWidth)

.子程序 方法_脚本_微点转行高, 空白型, , 
.参数 Row, 空白型, , 
.参数 Twips, 空白型, , 
.参数 RowHeight, 变体型, 参考, 

对象.方法 (“ScriptTwipsToRowHeight”, Row, Twips, RowHeight)

.子程序 方法_脚本_取快捷键或导航键, 逻辑型, , 
.参数 Action, 短整数型, 参考, 
.参数 fShift, 变体型, 参考, 
.参数 fCtrl, 变体型, 参考, 
.参数 Key, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetActionKey”, Action, fShift, fCtrl, Key))


.子程序 方法_脚本_取交替行颜色, 逻辑型, , 
.参数 clrBackOdd, 变体型, 参考, 
.参数 clrForeOdd, 变体型, 参考, 
.参数 clrBackEven, 变体型, 参考, 
.参数 clrForeEven, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetOddEvenRowColor”, clrBackOdd, clrForeOdd, clrBackEven, clrForeEven))


.子程序 方法_脚本_取浮点值, 逻辑型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetFloat”, Col, Row, Value))


.子程序 方法_脚本_取整数, 逻辑型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Value, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetInteger”, Col, Row, Value))


.子程序 方法_脚本_取文本提示外观, 逻辑型, , 
.参数 FontName, 变体型, 参考, 
.参数 FontSize, 变体型, 参考, 
.参数 FontBold, 变体型, 参考, 
.参数 FontItalic, 变体型, 参考, 
.参数 BackColor, 变体型, 参考, 
.参数 ForeColor, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptGetTextTipAppearance”, FontName, FontSize, FontBold, FontItalic, BackColor, ForeColor))


.子程序 方法_脚本_显示Excel格式表数目, 逻辑型, , Returns a handle to the workbook and a list of the sheets in the specified Excel-formatted file
.参数 FileName, 文本型, , 
.参数 VarArray, 变体型, 参考, 
.参数 ListCount, 变体型, 参考, 
.参数 LogFileName, 文本型, , 
.参数 WorkbookHandle, 变体型, , 
.参数 Replace, 逻辑型, , 

返回 (对象.逻辑方法 (“ScriptGetExcelSheetList”, FileName, VarArray, ListCount, LogFileName, WorkbookHandle, Replace))


.子程序 方法_脚本_下个自定义函数名, 逻辑型, , 
.参数 PrevFuncName, 文本型, , 
.参数 FuncName, 变体型, 参考, 

返回 (对象.逻辑方法 (“ScriptEnumCustomFunction”, PrevFuncName, FuncName))


.子程序 方法_脚本_取自定功能, 逻辑型, , 
.参数 FuncName, 文本型, , 
.参数 MinArgs, 变体型, , 
.参数 MaxArgs, 变体型, , 
.参数 Flags, 变体型, , 

返回 (对象.逻辑方法 (“ScriptGetCustomFunction”, FuncName, MinArgs, MaxArgs, Flags))


.子程序 方法_脚本_表格到XML缓冲区, 逻辑型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Buff, 变体型, 参考, 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, , 

返回 (对象.逻辑方法 (“ScriptExportToXMLBuffer”, Root, Collection, Buff, Flags, LogFile))

.子程序 方法_脚本_单元格块到XML缓冲区, 逻辑型, , 
.参数 col, 空白型, , 
.参数 row, 空白型, , 
.参数 col2, 空白型, , 
.参数 row2, 空白型, , 
.参数 Root, 文本型, , 
.参数 Collection, 文本型, , 
.参数 Buff, 变体型, , 
.参数 Flags, 空白型, , 0、ExportToXMLFormattedData； 1、ExportToXMLUnFormattedData
.参数 LogFile, 文本型, 可空, 

返回 (对象.逻辑方法 (“ScriptExportRangeToXMLBuffer”, col, row, col2, row2, Root, Collection, Buff, Flags, LogFile))


.子程序 方法_脚本_打印份数, 整数型, , 
.参数 hDC, 空白型, , 
.参数 Left, 空白型, , 
.参数 Top, 空白型, , 
.参数 Right, 空白型, , 
.参数 Bottom, 空白型, , 
.参数 PageCount, 变体型, 参考, 

返回 (对象.数值方法 (“ScriptOwnerPrintPageCount”, hDC, Left, Top, Right, Bottom, PageCount))


.子程序 方法_脚本_取日期框文本弹出跨度, 空白型, , 
.参数 ShortDays, 变体型, 参考, 
.参数 LenShortDays, 变体型, 参考, 
.参数 LongDays, 变体型, 参考, 
.参数 LenLongDays, 变体型, 参考, 
.参数 ShortMonths, 变体型, 参考, 
.参数 LenShortMonths, 变体型, 参考, 
.参数 LongMonths, 变体型, 参考, 
.参数 LenLongMonths, 变体型, 参考, 
.参数 OkText, 变体型, 参考, 
.参数 LenOkText, 变体型, 参考, 
.参数 CancelText, 变体型, 参考, 
.参数 LenCancelText, 变体型, 参考, 

对象.方法 (“ScriptGetCalTextOverride”, ShortDays, LenShortDays, LongDays, LenLongDays, ShortMonths, LenShortMonths, LongMonths, LenLongMonths, OkText, LenOkText, CancelText, LenCancelText)


.子程序 方法_打印表格, 空白型, , 打印的是sheet表
.参数 Flags, 变体型, , 

对象.方法 (“PrintSheet”, Flags)

.子程序 方法_添加选定内容, 空白型, 公开, 将一个新的范围添加到该电子表格中所选内容中，如果 AllowMultiBlocks 为 true
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 

对象.方法 (“AddSelection”, lCol, lRow, lCol2, lRow2)

.子程序 方法_清除数据和格式, 空白型, 公开, 清除了一系列的数据或数据和格式
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 bDataOnly, 逻辑型, , 是否含格式

对象.方法 (“ClearRange”, lCol, lRow, lCol2, lRow2, bDataOnly)

.子程序 方法_清除选择, 空白型, 公开, 
对象.方法 (“ClearSelection”, )

.子程序 方法_复制到剪贴板, 空白型, 公开, 
对象.方法 (“ClipboardCopy”, )

.子程序 方法_剪切到剪贴板, 空白型, 公开, 
对象.方法 (“ClipboardCut”, )

.子程序 方法_从剪贴板粘贴, 空白型, , 
对象.方法 (“ClipboardPaste”, )

.子程序 方法_复制块到新位置, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lColDest, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“CopyRange”, lCol, lRow, lCol2, lRow2, lColDest, lRowDest)

.子程序 方法_删除列, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lNumCols, 空白型, 可空, 

对象.方法 (“DeleteCols”, lCol, lNumCols)

.子程序 方法_删除行, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lNumRows, 空白型, 可空, 

对象.方法 (“DeleteRows”, lRow, lNumRows)

.子程序 方法_保存数据, 空白型, , 
对象.方法 (“DataSave”, )

.子程序 方法_取单元格边框, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 nIndex, 空白型, , 1、CellBorderIndexLeft； 2、CellBorderIndexRight； 4、CellBorderIndexTop； 8、CellBorderIndexBottom； 16、CellBorderIndexOutline
.参数 pcrColor, 变体型, 参考, 
.参数 pnStyle, 变体型, 参考, 

对象.方法 (“GetCellBorder”, lCol, lRow, nIndex, pcrColor, pnStyle)

.子程序 方法_取选择范围, 空白型, , 
.参数 lIndex, 空白型, , 
.参数 plCol, 变体型, 参考, 
.参数 plRow, 变体型, 参考, 
.参数 plCol2, 变体型, 参考, 
.参数 plRow2, 变体型, 参考, 

对象.方法 (“GetSelection”, lIndex, plCol, plRow, plCol2, plRow2)

.子程序 方法_添加行, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lNumRows, 空白型, 可空, 

对象.方法 (“InsertRows”, lRow, lNumRows)

.子程序 方法_添加列, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lNumCols, 空白型, 可空, 

对象.方法 (“InsertCols”, lCol, lNumCols)

.子程序 方法_移动块, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lColDest, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“MoveRange”, lCol, lRow, lCol2, lRow2, lColDest, lRowDest)

.子程序 方法_重计算公式, 空白型, 公开, 
对象.方法 (“ReCalc”, )

.子程序 方法_重置, 空白型, , 重置表格中所有内容,包括格式. 另外也可将行列数 自定义重置
.参数 行数, 空白型, 可空, 可空,默认为5
.参数 列数, 空白型, 可空, 可空,同上

禁止重画 ()
对象.方法 (“Reset”, )
.如果真 (等于 (行数, 0))
    赋值 (行数, 5)
.如果真结束
.如果真 (等于 (列数, 0))
    赋值 (列数, 5)
.如果真结束
行数 (行数)
列数 (列数)
允许重画 ()

.子程序 方法_置活动单元格, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 

对象.方法 (“SetActiveCell”, lCol, lRow)

.子程序 方法_置单元格边框, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 nIndex, 空白型, , 1、CellBorderIndexLeft； 2、CellBorderIndexRight； 4、CellBorderIndexTop； 8、CellBorderIndexBottom； 16、CellBorderIndexOutline
.参数 crColor, 空白型, , 
.参数 nStyle, 空白型, , 0、CellBorderStyleDefault； 1、CellBorderStyleSolid； 2、CellBorderStyleDash； 3、CellBorderStyleDot； 4、CellBorderStyleDashDot； 5、CellBorderStyleDashDotDot； 6、CellBorderStyleBlank； 11、CellBorderStyleFineSolid； 12、CellBorderStyleFineDash； 13、CellBorderStyleFineDot； 14、CellBorderStyleFineDashDot； 15、CellBorderStyleFineDashDotDot

对象.方法 (“SetCellBorder”, lCol, lRow, lCol2, lRow2, nIndex, crColor, nStyle)

.子程序 方法_选定区域, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 

对象.方法 (“SetSelection”, lCol, lRow, lCol2, lRow2)

.子程序 方法_滚动表显示单元格, 空白型, 公开, 滚动表到指定单元格
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 nPosition, 空白型, , 0、PositionUpperLeft； 1、PositionUpperCenter； 2、PositionUpperRight； 3、PositionCenterLeft； 4、PositionCenter； 5、PositionCenterRight； 6、PositionBottomLeft； 7、PositionBottomCenter； 8、PositionBottomRight

对象.方法 (“ShowCell”, lCol, lRow, nPosition)

.子程序 方法_排序表中单元格, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 nSortBy, 空白型, , 0、SortByRow； 1、SortByCol
.参数 SortKeys, 变体型, 可空, 
.参数 SortKeyOrders, 变体型, 可空, 

对象.逻辑方法 (“Sort”, lCol, lRow, lCol2, lRow2, nSortBy, SortKeys, SortKeyOrders)

.子程序 方法_交换单元格块到另外表, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lColDest, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“SwapRange”, lCol, lRow, lCol2, lRow2, lColDest, lRowDest)

.子程序 方法_清除组合框所有项, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 

对象.方法 (“TypeComboBoxClear”, lCol, lRow)

.子程序 方法_删除组合框项, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 nIndex, 短整数型, , 

对象.方法 (“TypeComboBoxRemoveItem”, lCol, lRow, nIndex)

.子程序 方法_从数据源加载, 空白型, 公开, virtualRefresh
对象.方法 (“VirtualRefresh”, )

.子程序 方法_合并单元格, 逻辑型, 公开, Create a span of cells  原来的译文是 添加单元格 () 不太准确
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 lNumCols, 空白型, , 
.参数 lNumRows, 空白型, , 

返回 (对象.逻辑方法 (“AddCellSpan”, lCol, lRow, lNumCols, lNumRows))


.子程序 方法_取合并单元格跨区, 整数型, 公开, 取本单元格的跨区.因为本单元格可能在合并的单元格中
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 
.参数 pvColAnchor, 变体型, , 
.参数 pvRowAnchor, 变体型, , 
.参数 pvNumCols, 变体型, , 
.参数 pvNumRows, 变体型, , 

返回 (对象.数值方法 (“GetCellSpan”, lCol, lRow, pvColAnchor, pvRowAnchor, pvNumCols, pvNumRows))


.子程序 方法_分解单元格, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRow, 空白型, , 

对象.方法 (“RemoveCellSpan”, lCol, lRow)

.子程序 方法_取索引列编号, 整数型, 公开, 
.参数 ColID, 文本型, , 

返回 (对象.数值方法 (“GetColFromID”, ColID))


.子程序 方法_复制整列到新位置, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lColDest, 空白型, , 

对象.方法 (“CopyColRange”, lCol, lCol2, lColDest)

.子程序 方法_复制整行到新位置, 空白型, 公开, 
.参数 lRow, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“CopyRowRange”, lRow, lRow2, lRowDest)

.子程序 方法_移动行, 空白型, 公开, 
.参数 lRow, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“MoveRowRange”, lRow, lRow2, lRowDest)

.子程序 方法_移动列, 空白型, , 
.参数 lCol, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lColDest, 空白型, , 

对象.方法 (“MoveRowRange”, lCol, lCol2, lColDest)

.子程序 方法_交换列串到新位置, 空白型, 公开, 
.参数 lCol, 空白型, , 
.参数 lCol2, 空白型, , 
.参数 lColDest, 空白型, , 

对象.方法 (“SwapColRange”, lCol, lCol2, lColDest)

.子程序 方法_交换行串到新位置, 空白型, 公开, 
.参数 lRow, 空白型, , 
.参数 lRow2, 空白型, , 
.参数 lRowDest, 空白型, , 

对象.方法 (“SwapColRange”, lRow, lRow2, lRowDest)

.子程序 方法_查找列, 整数型, 公开, 
.参数 lCol, 空白型, , 
.参数 lRowStart, 空白型, , 
.参数 lRowEnd, 空白型, , 
.参数 Text, 文本型, , 
.参数 SearchFlags, 空白型, , 0、SearchFlagsNone； 1、SearchFlagsGreaterOrEqual； 2、SearchFlagsPartialMatch； 4、SearchFlagsValue； 8、SearchFlagsCaseSensitive； 16、SearchFlagsSortedAscending； 32、SearchFlagsSortedDescending

返回 (对象.数值方法 (“SearchCol”, lCol, lRowStart, lRowEnd, Text, SearchFlags))

.子程序 方法_查找行, 整数型, 公开, 
.参数 行, 空白型, , 
.参数 起始列, 空白型, , 
.参数 结束列, 空白型, , 
.参数 文本, 文本型, , 
.参数 标志, 空白型, , 0、SearchFlagsNone； 1、SearchFlagsGreaterOrEqual； 2、SearchFlagsPartialMatch； 4、SearchFlagsValue； 8、SearchFlagsCaseSensitive； 16、SearchFlagsSortedAscending； 32、SearchFlagsSortedDescending

返回 (对象.数值方法 (“SearchRow”, 行, 起始列, 结束列, 文本, 标志))

.子程序 方法_块_导出Unicode文本文件, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Col2, 空白型, , 
.参数 Row2, 空白型, , 
.参数 FileName, 文本型, , 
.参数 CellDelim, 文本型, , 
.参数 ColDelim, 文本型, , 
.参数 RowDelim, 文本型, , 
.参数 Flags, 空白型, , 、ExportRangeToTextFileCreateNewFile； 2、ExportRangeToTextFileAppendToExistingFile； 4、ExportRangeToTextFileUnformattedData； 8、ExportRangeToTextFileColHeaders； 16、ExportRangeToTextFileRowHeaders； 24、ExportRangeToTextFileAllHeaders； 32、ExportRangeToTextFileCheckBoxFalse
.参数 LogFile, 空白型, , 

返回 (对象.逻辑方法 (“ExportRangeToTextFileU”, Col, Row, Col2, Row2, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile))


.子程序 方法_导出Unicode文本文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 CellDelim, 文本型, , 
.参数 ColDelim, 文本型, , 
.参数 RowDelim, 文本型, , 
.参数 Flags, 空白型, , 、ExportRangeToTextFileCreateNewFile； 2、ExportRangeToTextFileAppendToExistingFile； 4、ExportRangeToTextFileUnformattedData； 8、ExportRangeToTextFileColHeaders； 16、ExportRangeToTextFileRowHeaders； 24、ExportRangeToTextFileAllHeaders； 32、ExportRangeToTextFileCheckBoxFalse
.参数 LogFile, 空白型, , 

返回 (对象.逻辑方法 (“ExportToTextFileU”, FileName, CellDelim, ColDelim, RowDelim, Flags, LogFile))

.子程序 方法_导出Unicode制表符文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 

返回 (对象.逻辑方法 (“SaveTabFileU”, FileName))


.子程序 方法_列字母转为数字, 整数型, 公开, 
.参数 HeaderLetter, 文本型, , 

返回 (对象.数值方法 (“ColLetterToNumber”, HeaderLetter))


.子程序 方法_从数据源重新加载, 空白型, 公开, 
对象.方法 (“DataRefresh”, )

.子程序 方法_导入Excel文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 LogFileName, 文本型, , 

返回 (对象.逻辑方法 (“ImportExcelBook”, FileName, LogFileName))


.子程序 方法_导出Excel文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 LogFileName, 文本型, , 

返回 (对象.逻辑方法 (“ExportExcelBook”, FileName, LogFileName))


.子程序 方法_插入表, 逻辑型, 公开, 
.参数 SheetIndex, 短整数型, , 
.参数 SheetCnt, 短整数型, , 

返回 (对象.逻辑方法 (“InsertSheets”, SheetIndex, SheetCnt))


.子程序 方法_删除表, 逻辑型, 公开, 
.参数 SheetIndex, 短整数型, , 
.参数 SheetCnt, 短整数型, , 

返回 (对象.逻辑方法 (“DeleteSheets”, SheetIndex, SheetCnt))

.子程序 方法_移动表, 逻辑型, 公开, Moves one or more sheets
.参数 SheetSrc, 短整数型, , 
.参数 SheetCnt, 短整数型, , 
.参数 SheetDest, 短整数型, , 

返回 (对象.逻辑方法 (“MoveSheets”, SheetSrc, SheetCnt, SheetDest))


.子程序 方法_重置表, 逻辑型, 公开, 
.参数 Sheet, 短整数型, , 

返回 (对象.逻辑方法 (“ResetSheet”, Sheet))


.子程序 方法_从文件加载图片, 字节集, 公开, 
.参数 FileName, 文本型, , 
.参数 PictType, 空白型, , 0、PictureTypeUnknown； 1、PictureTypeBMP； 2、PictureTypeGIF； 3、PictureTypeJPEG； 4、PictureTypePNG； 5、PictureTypeICO； 6、PictureTypeTIFF； 7、PictureTypeTGA； 8、PictureTypePCX； 9、PictureTypeWBMP； 10、PictureTypeWMF； 11、PictureTypeJP2； 12、PictureTypeJPC； 13、PictureTypePGX； 14、PictureTypePNM； 15、PictureTypeRAS

.局部变量 a, 对象, , , 

赋值 (a, 对象.对象型方法 (“LoadPicture”, FileName, PictType))
返回 (a.取回图片 ())


.子程序 方法_从资源加载图片, 字节集, 公开, 
.参数 hInstance, 空白型, , 
.参数 ResourceName, 文本型, , 
.参数 ResourceType, 文本型, , 
.参数 PictType, 空白型, , 0、PictureTypeUnknown； 1、PictureTypeBMP； 2、PictureTypeGIF； 3、PictureTypeJPEG； 4、PictureTypePNG； 5、PictureTypeICO； 6、PictureTypeTIFF； 7、PictureTypeTGA； 8、PictureTypePCX； 9、PictureTypeWBMP； 10、PictureTypeWMF； 11、PictureTypeJP2； 12、PictureTypeJPC； 13、PictureTypePGX； 14、PictureTypePNM； 15、PictureTypeRAS

返回 (对象.对象型方法 (“LoadResPicture”, hInstance, ResourceName, ResourceType, PictType).取回图片 ())

.子程序 方法_从缓冲区加载图片, 字节集, 公开, 
.参数 Buffer, 变体型, , 
.参数 Size, 变体型, , 
.参数 PictType, 空白型, , 0、PictureTypeUnknown； 1、PictureTypeBMP； 2、PictureTypeGIF； 3、PictureTypeJPEG； 4、PictureTypePNG； 5、PictureTypeICO； 6、PictureTypeTIFF； 7、PictureTypeTGA； 8、PictureTypePCX； 9、PictureTypeWBMP； 10、PictureTypeWMF； 11、PictureTypeJP2； 12、PictureTypeJPC； 13、PictureTypePGX； 14、PictureTypePNM； 15、PictureTypeRAS

返回 (对象.对象型方法 (“LoadPictureBuffer”, Buffer, Size, PictType).取回图片 ())


.子程序 方法_保存图片, 逻辑型, 公开, 保存为文件这个真不知道如何用
.参数 Picture, 对象, , 
.参数 FileName, 文本型, , 
.参数 PictType, 空白型, , 0、PictureTypeUnknown； 1、PictureTypeBMP； 2、PictureTypeGIF； 3、PictureTypeJPEG； 4、PictureTypePNG； 5、PictureTypeICO； 6、PictureTypeTIFF； 7、PictureTypeTGA； 8、PictureTypePCX； 9、PictureTypeWBMP； 10、PictureTypeWMF； 11、PictureTypeJP2； 12、PictureTypeJPC； 13、PictureTypePGX； 14、PictureTypePNM； 15、PictureTypeRAS

返回 (对象.逻辑方法 (“SavePicture”, Picture, FileName, PictType))


.子程序 方法_图片存缓冲区, 逻辑型, 公开, 
.参数 Picture, 对象, , 
.参数 PictType, 空白型, , 0、PictureTypeUnknown； 1、PictureTypeBMP； 2、PictureTypeGIF； 3、PictureTypeJPEG； 4、PictureTypePNG； 5、PictureTypeICO； 6、PictureTypeTIFF； 7、PictureTypeTGA； 8、PictureTypePCX； 9、PictureTypeWBMP； 10、PictureTypeWMF； 11、PictureTypeJP2； 12、PictureTypeJPC； 13、PictureTypePGX； 14、PictureTypePNM； 15、PictureTypeRAS
.参数 Buffer, 变体型, , 
.参数 Size, 变体型, , 

返回 (对象.逻辑方法 (“SavePictureBuffer”, Picture, PictType, Buffer, Size))


.子程序 方法_取强化坐标, 空白型, 公开, 返回传入自定义的函数的单元格引用参数列和行的坐标
.参数 Param, 短整数型, , 
.参数 Sheet, 短整数型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 

对象.方法 (“CFGetCellParamExt”, Param, Sheet, Col, Row)

.子程序 方法_取强化坐标1, 空白型, 公开, 
.参数 Param, 短整数型, , 
.参数 Sheet, 短整数型, , 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 col2, 空白型, , 
.参数 Row2, 空白型, , 

对象.方法 (“CFGetRangeParamExt”, Param, Sheet, Col, Row, col2, Row2)

.子程序 方法_脚本_取行强化列坐标, 空白型, 公开, 
.参数 Param, 短整数型, , 
.参数 Sheet, 变体型, , 
.参数 Col, 变体型, , 
.参数 Row, 变体型, , 

对象.方法 (“ScriptCFGetCellParamExt”, Param, Sheet, Col, Row)

.子程序 方法_脚本_自定义函数块强化坐标, 空白型, 公开, 
.参数 Param, 短整数型, , 
.参数 Sheet, 变体型, , 
.参数 Col, 变体型, , 
.参数 Row, 变体型, , 
.参数 col2, 变体型, , 
.参数 Row2, 变体型, , 

对象.方法 (“ScriptCFGetRangeParamExt”, Param, Sheet, Col, Row, col2, Row2)

.子程序 方法_强化导出Excel文件中表, 逻辑型, 公开, Exports the spreadsheet to a sheet in an Excel-formatted file
.参数 FileName, 文本型, , 
.参数 SheetName, 文本型, , 
.参数 LogFileName, 文本型, , 
.参数 Flags, 空白型, , 0、ExcelSaveFlagNone； 1、ExcelSaveFlagNoFormulas

返回 (对象.逻辑方法 (“ExportToExcelEx”, FileName, SheetName, LogFileName, Flags))


.子程序 方法_强化导出Excel文件, 逻辑型, 公开, Exports to the specified Excel file
.参数 FileName, 文本型, , 
.参数 LogFileName, 文本型, , 
.参数 Flags, 空白型, , 0、ExcelSaveFlagNone； 1、ExcelSaveFlagNoFormulas

返回 (对象.逻辑方法 (“ExportExcelBookEx”, FileName, LogFileName, Flags))


.子程序 方法_置工作表标签色_增强, 逻辑型, , 
.参数 clrNormalUpperStartColor, 空白型, , 
.参数 clrNormalUpperEndColor, 空白型, , 
.参数 clrNormalLowerStartColor, 空白型, , 
.参数 clrNormalLowerEndColor, 空白型, , 
.参数 clrHoverUpperStartColor, 空白型, , 
.参数 clrHoverUpperEndColor, 空白型, , 
.参数 clrHoverLowerStartColor, 空白型, , 
.参数 clrHoverLowerEndColor, 空白型, , 
.参数 clrTabOuterBorderColor, 空白型, , 
.参数 clrTabInnerBorderColor, 空白型, , 
.参数 clrButtonUpperNormalStartColor, 空白型, , 
.参数 clrButtonUpperNormalEndColor, 空白型, , 
.参数 clrButtonLowerNormalStartColor, 空白型, , 
.参数 clrButtonLowerNormalEndColor, 空白型, , 
.参数 clrButtonUpperHoverStartColor, 空白型, , 
.参数 clrButtonUpperHoverEndColor, 空白型, , 
.参数 clrButtonLowerHoverStartColor, 空白型, , 
.参数 clrButtonLowerHoverEndColor, 空白型, , 
.参数 clrButtonUpperPushedStartColor, 空白型, , 
.参数 clrButtonUpperPushedEndColor, 空白型, , 
.参数 clrButtonLowerPushedStartColor, 空白型, , 
.参数 clrButtonLowerPushedEndColor, 空白型, , 
.参数 clrArrowColor, 空白型, , 
.参数 clrBackColorStartColor, 空白型, , 
.参数 clrBackColorEndColor, 空白型, , 
.参数 clrSplitBoxStartColor, 空白型, , 
.参数 clrSplitBoxEndColor, 空白型, , 
.参数 clrSheetTabForeColor, 空白型, , 
.参数 clrSheetTabActiveForeColor, 空白型, , 

返回 (对象.逻辑方法 (“SetEnhancedSheetTabColors”, clrNormalUpperStartColor, clrNormalUpperEndColor, clrNormalLowerStartColor, clrNormalLowerEndColor, clrHoverUpperStartColor, clrHoverUpperEndColor, clrHoverLowerStartColor, clrHoverLowerEndColor, clrTabOuterBorderColor, clrTabInnerBorderColor, clrButtonUpperNormalStartColor, clrButtonUpperNormalEndColor, clrButtonLowerNormalStartColor, clrButtonLowerNormalEndColor, clrButtonUpperHoverStartColor, clrButtonUpperHoverEndColor, clrButtonLowerHoverStartColor, clrButtonLowerHoverEndColor, clrButtonUpperPushedStartColor, clrButtonUpperPushedEndColor, clrButtonLowerPushedStartColor, clrButtonLowerPushedEndColor, clrArrowColor, clrBackColorStartColor, clrBackColorEndColor, clrSplitBoxStartColor, clrSplitBoxEndColor, clrSheetTabForeColor, clrSheetTabActiveForeColor))


.子程序 方法_置滚动条色_增强, 逻辑型, , 
.参数 clrTrackColor, 空白型, , 
.参数 clrArrowColor, 空白型, , 
.参数 clrUpperNormalStartColor, 空白型, , 
.参数 clrUpperNormalEndColor, 空白型, , 
.参数 clrLowerNormalStartColor, 空白型, , 
.参数 clrLowerNormalEndColor, 空白型, , 
.参数 clrUpperPushedStartColor, 空白型, , 
.参数 clrUpperPushedEndColor, 空白型, , 
.参数 clrLowerPushedStartColor, 空白型, , 
.参数 clrLowerPushedEndColor, 空白型, , 
.参数 clrUpperHoverStartColor, 空白型, , 
.参数 clrUpperHoverEndColor, 空白型, , 
.参数 clrLowerHoverStartColor, 空白型, , 
.参数 clrLowerHoverEndColor, 空白型, , 
.参数 clrHoverButtonBorderColor, 空白型, , 
.参数 clrButtonBorderColor, 空白型, , 

返回 (对象.逻辑方法 (“SetEnhancedScrollBarColors”, clrTrackColor, clrArrowColor, clrUpperNormalStartColor, clrUpperNormalEndColor, clrLowerNormalStartColor, clrLowerNormalEndColor, clrUpperPushedStartColor, clrUpperPushedEndColor, clrLowerPushedStartColor, clrLowerPushedEndColor, clrUpperHoverStartColor, clrUpperHoverEndColor, clrLowerHoverStartColor, clrLowerHoverEndColor, clrHoverButtonBorderColor, clrButtonBorderColor))


.子程序 方法_置增强列标头色, 逻辑型, 公开, 
.参数 clrSelectedHoverUpperColor, 空白型, , 
.参数 clrSelectedHoverLowerColor, 空白型, , 
.参数 clrSelectedUpperColor, 空白型, , 
.参数 clrSelectedLowerColor, 空白型, , 
.参数 clrHoverUpperColor, 空白型, , 
.参数 clrHoverLowerColor, 空白型, , 
.参数 clrUpperColor, 空白型, , 
.参数 clrLowerColor, 空白型, , 
.参数 clrSelectedBorderColor, 空白型, , 
.参数 clrBorderColor, 空白型, , 

返回 (对象.逻辑方法 (“SetEnhancedColumnHeaderColors”, clrSelectedHoverUpperColor, clrSelectedHoverLowerColor, clrSelectedUpperColor, clrSelectedLowerColor, clrHoverUpperColor, clrHoverLowerColor, clrUpperColor, clrLowerColor, clrSelectedBorderColor, clrBorderColor))


.子程序 方法_置增强行标头色, 逻辑型, , 
.参数 clrSelectedHoverUpperColor, 空白型, , 
.参数 clrSelectedHoverLowerColor, 空白型, , 
.参数 clrSelectedUpperColor, 空白型, , 
.参数 clrSelectedLowerColor, 空白型, , 
.参数 clrHoverUpperColor, 空白型, , 
.参数 clrHoverLowerColor, 空白型, , 
.参数 clrUpperColor, 空白型, , 
.参数 clrLowerColor, 空白型, , 
.参数 clrSelectedBorderColor, 空白型, , 
.参数 clrBorderColor, 空白型, , 

返回 (对象.逻辑方法 (“SetEnhancedRowHeaderColors”, clrSelectedHoverUpperColor, clrSelectedHoverLowerColor, clrSelectedUpperColor, clrSelectedLowerColor, clrHoverUpperColor, clrHoverLowerColor, clrUpperColor, clrLowerColor, clrSelectedBorderColor, clrBorderColor))


.子程序 方法_置增强拐角色, 逻辑型, 公开, 
.参数 BackColor, 空白型, , 
.参数 hoverBackColor, 空白型, , 
.参数 triangleColor, 空白型, , 
.参数 triangleHoverColor, 空白型, , 
.参数 triangleBorderColor, 空白型, , 
.参数 triangleHoverBorderColor, 空白型, , 

返回 (对象.逻辑方法 (“SetEnhancedCornerColors”, BackColor, hoverBackColor, triangleColor, triangleHoverColor, triangleBorderColor, triangleHoverBorderColor))


.子程序 方法_垂直滚动条可视, 逻辑型, 公开, 
返回 (对象.逻辑方法 (“IsVerticalScrollBarVisible”, ))


.子程序 方法_水平滚动条可视, 逻辑型, 公开, 
返回 (对象.逻辑方法 (“IsHorizontalScrollBarVisible”, ))


.子程序 方法_强化导出HTML文件, 逻辑型, 公开, 
.参数 FileName, 文本型, , 
.参数 AppendFlag, 文本型, , 
.参数 LogFile, 文本型, , 
.参数 TitleStr, 文本型, , 
.参数 CssFile, 文本型, , 
.参数 TableClass, 文本型, , 
.参数 TRClass, 文本型, , 
.参数 TDClass, 文本型, , 
.参数 THClass, 文本型, , 

返回 (对象.逻辑方法 (“ExportToHTMLEx”, FileName, AppendFlag, LogFile, TitleStr, CssFile, TableClass, TRClass, TDClass, THClass))


.子程序 方法_块_强化导出HTML文件, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Col2, 空白型, , 
.参数 Row2, 空白型, , 
.参数 FileName, 文本型, , 
.参数 AppendFlag, 文本型, , 
.参数 LogFile, 文本型, , 
.参数 TitleStr, 文本型, , 
.参数 CssFile, 文本型, , 
.参数 TableClass, 文本型, , 
.参数 TRClass, 文本型, , 
.参数 TDClass, 文本型, , 
.参数 THClass, 文本型, , 

返回 (对象.逻辑方法 (“ExportRangeToHTMLEx”, Col, Row, Col2, Row2, FileName, AppendFlag, LogFile, TitleStr, CssFile, TableClass, TRClass, TDClass, THClass))

.子程序 方法_工作簿存缓冲区, 变体型, 公开, 
返回 (对象.通用方法 (“SaveToBuffer”, ))


.子程序 方法_缓冲区加载工作簿, 逻辑型, 公开, 从缓冲区加载工作簿
.参数 buff, 变体型, , 

返回 (对象.逻辑方法 (“LoadFromBuffer”, buff))


.子程序 方法_块存缓冲区, 变体型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Col2, 空白型, , 
.参数 Row2, 空白型, , 
.参数 fSaveColInfo, 逻辑型, , 
.参数 fSaveRowInfo, 逻辑型, , 

返回 (对象.通用方法 (“SaveBlockToBuffer”, Col, Row, Col2, Row2, fSaveColInfo, fSaveRowInfo))


.子程序 方法_缓冲区加载单元格块, 逻辑型, 公开, 
.参数 Col, 空白型, , 
.参数 Row, 空白型, , 
.参数 Col2, 空白型, , 
.参数 Row2, 空白型, , 
.参数 Buff, 变体型, , 

返回 (对象.逻辑方法 (“LoadBlockFromBuffer”, Col, Row, Col2, Row2, Buff))


.子程序 方法_自定义单元格类型, 逻辑型, 公开, 
.参数 Name, 文本型, , 
.参数 Editable, 逻辑型, , 
.参数 CanOverflow, 逻辑型, , 
.参数 CanBeOverflown, 逻辑型, , 
.参数 UseRendererControl, 逻辑型, , 

返回 (对象.逻辑方法 (“AddCustomCellType”, Name, Editable, CanOverflow, CanBeOverflown, UseRendererControl))


.子程序 方法_删除单元格类型, 逻辑型, 公开, 
.参数 name, 文本型, , 

返回 (对象.逻辑方法 (“RemoveCustomCellType”, name))


.子程序 方法_下个单元格类型名, 逻辑型, 公开, 
.参数 PrevName, 文本型, , 
.参数 Name, 文本型, 参考, 

返回 (对象.逻辑方法 (“EnumCustomCellType”, PrevName, Name))


.子程序 方法_取单元格类型, 逻辑型, 公开, 
.参数 Name, 文本型, 参考, 
.参数 Editable, 逻辑型, 参考, 
.参数 CanOverflow, 逻辑型, 参考, 
.参数 CanBeOverflown, 逻辑型, 参考, 
.参数 UseRendererControl, 逻辑型, 参考, 

返回 (对象.逻辑方法 (“GetCustomCellType”, Name, Editable, CanOverflow, CanBeOverflown, UseRendererControl))


.子程序 方法_取单元格编辑器, 变体型, 公开, 
.参数 Name, 文本型, , 
.参数 Style, 空白型, , 

返回 (对象.通用方法 (“GetCustomEditor”, Name, Style))


.子程序 方法_取呈现器, 变体型, 公开, 
.参数 Name, 文本型, , 
.参数 Style, 空白型, , 

返回 (对象.通用方法 (“GetCustomRenderer”, Name, Style))


.子程序 方法_绘制外框, 逻辑型, , 到指定矩形在指定的设备上下文中绘制指定的控件
.参数 Ctrl, 变体型, , 
.参数 hDC, 空白型, , 
.参数 Left, 空白型, , 
.参数 Top, 空白型, , 
.参数 Right, 空白型, , 
.参数 Bottom, 空白型, , 
.参数 ClientOnly, 逻辑型, , 

返回 (对象.逻辑方法 (“PaintControl”, Ctrl, hDC, Left, Top, Right, Bottom, ClientOnly))


.子程序 方法_取对象字体句柄, 整数型, , 
.参数 font, 对象, , 

返回 (对象.数值方法 (“GetFontHandle”, font))


.子程序 方法_恢复, 空白型, , 
对象.方法 (“Refresh”, )

.子程序 方法_关于对话框, 空白型, 公开, 
对象.方法 (“AboutBox”, )


.子程序 挂接事件_初始化, 逻辑型, 公开, 参数一:用户数据,参数二:AdvanceNext 逻辑型  本事件无效
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (1, 子程序, 0))

.子程序 挂接事件_单元格被选择, 逻辑型, 公开, 参一用户数据,整数, 参数二:BlockCol,整数,参数三:BlockRow,整数 ,参数四:BlockCol2,整数,参数五:BlockRow2,整数
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (2, 子程序, 0))

.子程序 挂接事件_按钮被按下, 逻辑型, 公开, 参一:用户数据,整数,参数二:col ,参三:row, 参四:ButtonDown,短整数,相当于未格式化数据. 对按钮为0..对复选框而言,0表示未选中,1 表示选中    对复选框特别有用.可判断 选择状态
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (3, 子程序, 0))

.子程序 挂接事件_修改单元后格移走焦点, 逻辑型, 公开, 参一:用户数据  参二:col  参三:row 当修改了单元格数据并离开该 单元格时(包括在本单元格用敲击回车(回车并不起作用的情况) 的情况)的时候.
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (4, 子程序, 0))

.子程序 挂接事件_左键单击, 逻辑型, 公开, 参一:用户数据  参二:col  参三:row
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (5, 子程序, 0))

.子程序 挂接事件_鼠标改变列宽, 逻辑型, 公开, 参一:用户数据  参二:col1  参三:col2  列1与列2的之间所有列被同时改变列宽
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (6, 子程序, 0))

.子程序 挂接事件_定制函数, 逻辑型, 公开, 不知道 有什么 用途啊  参一:用户数据. 参二:FunctionName 文本型 参三:ParameterCnt 短整数型,参四:Col整数 参五 row 参六:Status 值状态. 参考
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (7, 子程序, 0))

.子程序 挂接事件_配置数据列, 逻辑型, 公开, 参一:用户数据  参二:col(从1开始到最后一列)  参三:DataField 文本型(该列的字段名) ,参四:DataType 短整数(该列的字段类型) 当绑定数据库的列时发生,主要 的作用 是可以在此时对 此列设置 数字的小数点
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (9, 子程序, 0))

.子程序 挂接事件_数据填充, 逻辑型, 公开, 参一:用户数据  参二:col  参三:row  参四:DataType短整数,参五:fGetData短整数 (一般为-1)参六:Cancel 短整数(参考) (为0时正常填充数据,  为1时 取消填充)  是否取消数据的填充  即电子表格1.数据填充指定栏 ＝ 真时才起作用
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (10, 子程序, 0))

.子程序 挂接事件_鼠标左键被双击, 逻辑型, 公开, 参一:用户数据  参二:col  参三:row  双击事件 要晚于 鼠标放开的事件
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (11, 子程序, 0))

.子程序 挂接事件_单元格块被拖放停定, 逻辑型, 公开, 可能只有在单元格被允许拖放的时候才起作用吧.
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (12, 子程序, 0))


.子程序 挂接事件_单元格块被画定, 逻辑型, 公开, 不明白有什么用
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (13, 子程序, 0))

.子程序 挂接事件_输入操作无效, 逻辑型, 公开, 没有看出什么作用来 !
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (14, 子程序, 0))

.子程序 挂接事件_进入离开编辑态, 逻辑型, 公开, 参一:用户数据  参二:col  参三:row   参四:mode:短整数型  参五:ChangeMade 逻辑型  进入时 mode 为1,changmade 为假,离开时mode为0,changmade为真
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (15, 子程序, 0))

.子程序 挂接事件_焦点将移动到新行, 逻辑型, 公开, 参一:用户数据 参二:row 参三:RowIsLast 整数型  注意 是新的一行.用 键盘来操作的,鼠标操作无效
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (16, 子程序, 0))

.子程序 挂接事件_离开单元格, 逻辑型, 公开, 参一:用户数据: 参二  col 参三: row  参四: newcol 参五:newrow  cancel 逻辑型(参考)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (17, 子程序, 0))

.子程序 挂接事件_单元格文本被更改, 逻辑型, 公开, 参一:用户数据 第二参数:col,参三:row, 每当用户输入字符时使文本被更改后发生此事件
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (33, 子程序, 0))

.子程序 挂接事件_离开行, 逻辑型, 公开, 参一:用户数据 参二:row 参三: RowWasLast 逻辑型 参四:RowChanged 逻辑型 参五:NewRow,参六:NewRowIsLast,参七:Cancel逻辑型 (参考)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (18, 子程序, 0))

.子程序 挂接事件_终止打印, 逻辑型, 公开, 参一:用户数据 参二:abort 逻辑型 参考
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (19, 子程序, 0))

.子程序 挂接事件_移走焦点, 逻辑型, 公开, 没看到有什么作用啊/
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (20, 子程序, 0))

.子程序 挂接事件_请求数据, 逻辑型, 公开, 当虚拟模式时表格向数据库请求数据时发生 参一:用户数据 参二:row,参三:RowsNeeded,参四:RowsLoaded,参考 参五:Direction 短整数,参六:AtTop 逻辑型 参考,参七:AtBottom 逻辑型 参考
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (21, 子程序, 0))

.子程序 挂接事件_鼠标右键被按下, 逻辑型, 公开, 特别声明 本事件不起作用
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (22, 子程序, 0))

.子程序 挂接事件_行高被改变, 逻辑型, 公开, 用户更改行高时发生: 参一:用户数据,参二:起始行号,参三:结束行号
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (23, 子程序, 0))


.子程序 挂接事件_选中单元格块, 逻辑型, 公开, 按下移动鼠标使单元格被选中时起作用,参一:用户数据 参二:起始列,参三:起始行,参四:结束列,参五:结束行.参六:当前列,参七:当前行(即鼠标所在行)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (24, 子程序, 0))

.子程序 挂接事件_更改左列和顶行, 逻辑型, 公开, 不错,用这里可以取出顶部的行或左的列,在移动滚动条时发生. 参一:用户数据.参二:旧左列,参三:旧顶行.参四:新左列.参五:新顶行
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (25, 子程序, 0))

.子程序 挂接事件_输入公式, 逻辑型, 公开, 当用户键入公式时发生.  不太起作用吧  因为是数字型,用户是不可键入其它字符的
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (26, 子程序, 0))

.子程序 挂接事件_丢弃缓冲区数据, 逻辑型, 公开, 虚拟模式并在数据刷新要丢弃旧数据时发生 参一:用户数据,参二,行, 参三:要清理的行数
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (27, 子程序, 0))

.子程序 挂接事件_将要完成打印, 逻辑型, 公开, 完成打印时显示打印中止对话框之前 调用此事件. 参一:用户数据,参二:text 文本型 参三:PrintID ,参四:OpenMsgBox 逻辑型,参五:Processed,逻辑型(参考)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (28, 子程序, 0))

.子程序 挂接事件_关闭下拉列表, 逻辑型, 公开, 组合框的下拉列表被关闭时发生此事件 参一:用户数据,参二:列 参三:行. 参四:SelChange 短整数型
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (29, 子程序, 0))

.子程序 挂接事件_伸展下拉列表, 逻辑型, 公开, 组合框的下拉列表被伸展时发生..参一:用户 参二:列,参三:行
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (30, 子程序, 0))

.子程序 挂接事件_下拉列表项被选择, 逻辑型, 公开, 组合框的下拉表项被选择时发生..参一:用户 参二:列,参三:行
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (31, 子程序, 0))

.子程序 挂接事件_显示文本提示, 逻辑型, 公开, 显示文本提示时发生..参一:用户 参二:列,参三:行  参四:MultiLine(文本提示方式,参考),参五:TipWidth整数(参考),参六:TipText文本(参考) 参七:ShowTip;逻辑型(参考)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (32, 子程序, 0))

.子程序 挂接事件_完成链接嵌入对象拖动, 逻辑型, 公开, 参一:用户 . 参二:effect 整数型(参考)
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (34, 子程序, 0))

.子程序 挂接事件_链接嵌入对象取得数据, 逻辑型, 公开, 太复杂了.不常用的命令
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (35, 子程序, 0))

.子程序 挂接事件_鼠标移动到链接嵌入对象, 逻辑型, 公开, 不常用
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (36, 子程序, 0))

.子程序 挂接事件_链接嵌入对象光标改变, 逻辑型, 公开, 不常用 
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (37, 子程序, 0))

.子程序 挂接事件_链接嵌入对象放置目标, 逻辑型, 公开, 不常用 
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (38, 子程序, 0))

.子程序 挂接事件_拖放链接嵌入对象, 逻辑型, 公开, 不常用 
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (39, 子程序, 0))

.子程序 挂接事件_单击标头将要排序, 逻辑型, 公开, 不常用 
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (40, 子程序, 0))

.子程序 挂接事件_点击列标头排序结束, 逻辑型, 公开, 不常用
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (41, 子程序, 0))

.子程序 挂接事件_键被按下, 逻辑型, 公开, 参一:用户数据,参二:keycode短整数,(参考)参三:功能键状态.短整数 alt 为4  ctr 2  shift 为1 无为0
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-602, 子程序, 0))

.子程序 挂接事件_键被单击, 逻辑型, 公开, 被 点击的事件 在按下 事件后 , 在放开 事件前 发生 参一:用户.参二:asi码 键 的asciima 形式(短整数 参考) 如z是122  Z是90
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-603, 子程序, 0))

.子程序 挂接事件_键被放开, 逻辑型, 公开, 参一:用户数据,参二:keycode短整数,(参考)参三:功能键状态.短整数 alt 为4  ctr 2  shift 为1 无为0
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-604, 子程序, 0))

.子程序 挂接事件_按下鼠标, 逻辑型, 公开, 在表格中按下鼠标时(左键,右键,中键) 参一 参二: 键代码:左键1 右键2  中键4 参三:功能键状态  alt 为4  ctr 2  shift 为1.参四:x,鼠标在表格的x坐标,参四:y,鼠标在表格的y坐标
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-605, 子程序, 0))

.子程序 挂接事件_移动鼠标, 逻辑型, 公开, 在表格中移动鼠标时(左键,右键,中键) 参一 参二: 键代码:左键1 右键2  中键4 参三:功能键状态  alt 为4  ctr 2  shift 为1.参四:x,鼠标在表格的x坐标,参四:y,鼠标在表格的y坐标
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-606, 子程序, 0))

.子程序 挂接事件_放开鼠标, 逻辑型, 公开, 放开事件在  双击事件之前 ,在表格中按下鼠标时(左键,右键,中键) 参一 参二: 键代码:左键1 右键2  中键4 参三:功能键状态  alt 为4  ctr 2  shift 为1.参四:x,鼠标在表格的x坐标,参四:y,鼠标在表格的y坐标
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (-607, 子程序, 0))

.子程序 挂接事件_单击选项卡改变表, 逻辑型, , 用户单击选项卡使表更改时. 参一:用户.参二:旧表 短整数,参三:新sheet.短整数
.参数 子程序, 子程序指针, , 

返回 (ocx.未知支持库函数_4 (122, 子程序, 0))

.子程序 挂接事件, 空白型, , --未用到的
 ' ocx.挂接事件 (24, &选中单元格块, 0)
 ' ocx.挂接事件 (25, &更改左列和顶行, 0)
 ' ocx.挂接事件 (26, &输入公式, 0)
 ' ocx.挂接事件 (27, &丢弃缓冲区数据, 0)
 ' ocx.挂接事件 (28, &将要完成打印, 0)
 ' ocx.挂接事件 (29, &关闭下拉列表, 0)
 ' ocx.挂接事件 (30, &伸展下拉列表, 0)
 ' ocx.挂接事件 (31, &下拉列表项被选择, 0)
 ' ocx.挂接事件 (32, &显示文本提示, 0)

 ' ocx.挂接事件 (34, &完成链接嵌入对象拖动, 0)
 ' ocx.挂接事件 (35, &链接嵌入对象取得数据, 0)
 ' ocx.挂接事件 (36, &鼠标移动到链接嵌入对象, 0)
 ' ocx.挂接事件 (37, &链接嵌入对象光标改变, 0)
 ' ocx.挂接事件 (38, &链接嵌入对象放置目标, 0)
 ' ocx.挂接事件 (39, &拖放链接嵌入对象, 0)
 ' ocx.挂接事件 (40, &单击标头将要排序, 0)
 ' ocx.挂接事件 (41, &点击列标头排序结束, 0)
 ' ocx.挂接事件 (-602, &键被按下, 0)
 ' ocx.挂接事件 (-603, &键被单击, 0)
 ' ocx.挂接事件 (-604, &键被放开, 0)
 ' ocx.挂接事件 (-605, &按下鼠标, 0)
 ' ocx.挂接事件 (-606, &移动鼠标, 0)
 ' ocx.挂接事件 (-607, &放开鼠标, 0)
 ' ' ocx.挂接事件 (101, &_DSpreadSheet_ScriptCustomFunction, 0)
 ' ' ocx.挂接事件 (102, &_DSpreadSheet_ScriptDataFill, 0)
 ' ' ocx.挂接事件 (103, &_DSpreadSheet_ScriptDragDropBlock, 0)
 ' ' ocx.挂接事件 (104, &_DSpreadSheet_ScriptLeaveCell, 0)
 ' ' ocx.挂接事件 (105, &_DSpreadSheet_ScriptLeaveRow, 0)
 ' ' ocx.挂接事件 (106, &_DSpreadSheet_ScriptPrintAbort, 0)
 ' ' ocx.挂接事件 (107, &_DSpreadSheet_ScriptQueryAdvance, 0)
 ' ' ocx.挂接事件 (108, &_DSpreadSheet_ScriptQueryData, 0)
 ' ' ocx.挂接事件 (109, &_DSpreadSheet_ScriptPrintMsgBox, 0)
 ' ' ocx.挂接事件 (110, &_DSpreadSheet_ScriptTextTipFetch, 0)
 ' ' ocx.挂接事件 (111, &_DSpreadSheet_ScriptOLECompleteDrag, 0)
 ' ' ocx.挂接事件 (112, &_DSpreadSheet_ScriptOLEDragDrop, 0)
 ' ' ocx.挂接事件 (113, &_DSpreadSheet_ScriptOLEDragOver, 0)
 ' ' ocx.挂接事件 (114, &_DSpreadSheet_ScriptOLEGiveFeedback, 0)
 ' ' ocx.挂接事件 (115, &_DSpreadSheet_ScriptOLEStartDrag, 0)
 ' ' ocx.挂接事件 (117, &_DSpreadSheet_ScriptBeforeUserSort, 0)
 ' ' ocx.挂接事件 (118, &_DSpreadSheet_ScriptKeyDown, 0)
 ' ' ocx.挂接事件 (119, &_DSpreadSheet_ScriptKeyPress, 0)
 ' ' ocx.挂接事件 (120, &_DSpreadSheet_ScriptKeyUp, 0)
 ' ' ocx.挂接事件 (121, &_DSpreadSheet_SheetChanging, 0)
 ' ocx.挂接事件 (122, &单击选项卡改变表, 0)
 ' ocx.挂接事件 (123, &将要改变表选项卡, 0)
 ' ocx.挂接事件 (124, &滚动表选项卡, 0)
 ' ' ocx.挂接事件 (125, &_DSpreadSheet_BeforeEditMode, 0)
 ' ocx.挂接事件 (126, &数据被加载, 0)
 ' ' ocx.挂接事件 (127, &_DSpreadSheet_BeforeScrollTip, 0)
 ' ' ocx.挂接事件 (128, &_DSpreadSheet_BeforeColMove, 0)
 ' ' ocx.挂接事件 (129, &_DSpreadSheet_BeforeRowMove, 0)
 ' ocx.挂接事件 (130, &函数被双重执行, 0)


.类模块 fps表格打印预览类, , , 

.程序集变量 黑月OCX, 未知类型0x20001, , , 
.程序集变量 对象, 对象, , , 
.程序集变量 窗口句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
对象.清除 ()
黑月OCX.未知支持库函数_5 (对象)

.子程序 创建, 整数型, 公开, 成功返回窗口句柄,失败返回0
.参数 父窗口, 整数型, , 
.参数 左, 整数型, 可空, 
.参数 顶, 整数型, 可空, 
.参数 宽, 整数型, 可空, 
.参数 高, 整数型, 可空, 
.参数 边框, 整数型, 可空, 

.如果真 (是否为空 (宽))
    赋值 (左, 60)
.如果真结束
.如果真 (是否为空 (高))
    赋值 (高, 60)
.如果真结束
赋值 (窗口句柄, 黑月OCX.未知支持库函数_2 (父窗口, “PVADO.PvCtrl.5”, 左, 顶, 宽, 高, 边框)) ' 类名:progid
.如果真 (等于 (窗口句柄, 0))
    返回 (0)
.如果真结束
赋值 (对象, 黑月OCX.未知支持库函数_3 ())
黑月OCX.未知支持库函数_9 ()
返回 (窗口句柄)

.子程序 取黑月com类, 未知类型0x20001, 公开, 
返回 (黑月OCX)

.子程序 方法_移动, 空白型, 公开, 移动到指定位置
.参数 左, 空白型, , 
.参数 右, 空白型, , 
.参数 宽, 空白型, , 
.参数 高, 空白型, , 

移动窗口 (窗口句柄, 左, 右, 宽, 高)

.子程序 方法_OLE拖放, 空白型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (53, 1, “”)
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 关于对话框, 空白型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (-552, 1, “”)
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 允许用户缩放, 逻辑型, 公开, 返回用户可以使用鼠标来查看页面时放大或缩小
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (1, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (假)

.子程序 置_允许用户缩放, 空白型, 公开, 设置或用户可以使用鼠标来查看页面时放大或缩小
.参数 属性值, 逻辑型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (1, 4, “0b”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 灰色区域颜色, 整数型, 公开, 返回控件的预览区的颜色
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (2, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_灰色区域颜色, 空白型, 公开, 设置控件的预览区的颜色
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (2, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 灰色区域水平边距, 整数型, 公开, 返回显示的页和控件缘之间的水平空间
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (3, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_灰色区域水平边距, 空白型, 公开, 设置显示的页和控件缘之间的水平空间
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (3, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 灰色区域页边距类型, 整数型, 公开, 灰色区域页边距类型0、GrayAreaMarginTypeScaled； 1、GrayAreaMarginTypeActual
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (4, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_灰色区域页边距类型, 空白型, 公开, 
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)0、GrayAreaMarginTypeScaled； 1、GrayAreaMarginTypeActual

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (4, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 灰色区域垂直边距, 整数型, 公开, 设置或返回显示的页和控件缘之间的垂直空间
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (5, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_灰色区域垂直边距, 空白型, 公开, 设置或返回显示的页和控件缘之间的垂直空间
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (5, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 预览窗口句柄, 整数型, 公开, 设置或返回电子表格到要预览的窗口句柄
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (6, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_预览窗口句柄, 空白型, 公开, 设置或返回电子表格到要预览的窗口句柄
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (6, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页面边框颜色, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (7, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_页面边框颜色, 空白型, 公开, 
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (7, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页面边框宽度, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (8, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_页面边框宽度, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (8, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页阴影颜色, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (9, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_页阴影颜色, 空白型, 公开, 
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (9, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页阴影宽度, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (10, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_页阴影宽度, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (10, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 显示页百分比大小, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (11, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_显示页百分比大小, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (11, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页面显示方式, 整数型, 公开, 0、PageViewTypeWholePage； 1、PageViewTypeNormalSize； 2、PageViewTypePercentage； 3、PageViewTypePageWidth； 4、PageViewTypePageHeight； 5、PageViewTypeMultiplePages
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (12, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_页面显示方式, 空白型, 公开, 0、PageViewTypeWholePage； 1、PageViewTypeNormalSize； 2、PageViewTypePercentage； 3、PageViewTypePageWidth； 4、PageViewTypePageHeight； 5、PageViewTypeMultiplePages
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (12, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 显示水平滚动条, 整数型, 公开, 0、ScrollBarShow； 1、ScrollBarAuto； 2、ScrollBarHide
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (13, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_显示水平滚动条, 空白型, 公开, 0、ScrollBarShow； 1、ScrollBarAuto； 2、ScrollBarHide
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (13, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 显示垂直滚动条, 整数型, 公开, 0、ScrollBarShow； 1、ScrollBarAuto； 2、ScrollBarHide
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (14, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_显示垂直滚动条, 空白型, 公开, 0、ScrollBarShow； 1、ScrollBarAuto； 2、ScrollBarHide
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (14, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 水平移动条移动距离, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (15, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_水平移动条移动距离, 空白型, 公开, 
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (15, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 垂直移动条移动距离, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (16, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_垂直移动条移动距离, 空白型, 公开, 
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (16, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 水平方向显示页数, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (17, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_水平方向显示页数, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (17, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 垂直方向显示页数, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (18, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_垂直方向显示页数, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (18, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 显示页水平距离, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (19, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_显示页水平距离, 空白型, 公开, 
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (19, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 显示页垂直距离, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (20, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_显示页垂直距离, 空白型, 公开, 
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (20, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 缩放状态, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (21, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_缩放状态, 空白型, 公开, 
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (21, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 当前页, 整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (22, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_当前页, 空白型, 公开, 
.参数 属性值, 整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (22, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 一次显示页面数, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (23, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_一次显示页面数, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (23, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 页实际的百分比, 短整数型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (24, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (0)

.子程序 置_页实际的百分比, 空白型, 公开, 
.参数 属性值, 短整数型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (24, 4, “0S”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 鼠标指针类型, 整数型, 公开, 0、Default； 1、Arrow； 2、Cross； 3、IBeam； 4、Icon； 5、Sizing； 6、SizeNESW； 7、SizeNS； 8、SizeNWSE； 9、SizeWE； 10、UpArrow； 11、Hourglass； 12、NoDrop； 13、ArrowHourglass； 14、ArrowQuestion； 15、SizeAll； 99、Custom
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (50, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_鼠标指针类型, 空白型, 公开, 0、Default； 1、Arrow； 2、Cross； 3、IBeam； 4、Icon； 5、Sizing； 6、SizeNESW； 7、SizeNS； 8、SizeNWSE； 9、SizeWE； 10、UpArrow； 11、Hourglass； 12、NoDrop； 13、ArrowHourglass； 14、ArrowQuestion； 15、SizeAll； 99、Custom
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (50, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 自定义鼠标图标, 对象, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (51, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_自定义鼠标图标, 空白型, 公开, 
.参数 属性值, 对象, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (51, 4, “1I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 预览器为OLE拖放目标, 整数型, 公开, 设置或返回是否电子表格预览控件可以作为一个 OLE 拖放目标0、fpOLEDropNone； 1、fpOLEDropManual
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (52, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_预览器为OLE拖放目标, 空白型, 公开, 设置或返回是否电子表格预览控件可以作为一个 OLE 拖放目标
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)0、fpOLEDropNone； 1、fpOLEDropManual

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (52, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 使用脚本环境, 逻辑型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (54, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (假)

.子程序 置_使用脚本环境, 空白型, 公开, 
.参数 属性值, 逻辑型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (54, 4, “0b”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 启动, 逻辑型, 公开, 
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (-514, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })
返回 (假)

.子程序 置_启用, 空白型, 公开, 
.参数 属性值, 逻辑型, , 

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (-514, 4, “0b”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })

.子程序 边框样式, 整数型, 公开, 0、BorderStyleNone； 1、BorderStyleFixedSingle
置入代码 ({ 85, 106, 0, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (-504, 2, )
置入代码 ({ 131, 196, 12, 201, 194, 4, 0 })

.子程序 置_边框样式, 空白型, 公开, 0、BorderStyleNone； 1、BorderStyleFixedSingle
.参数 属性值, 整数型, , 可能是枚举常量(用整数型代替)

置入代码 ({ 85, 106, 1, 104, 0, 0, 0, 0 })
黑月OCX.未知支持库函数_8 (-504, 4, “0I”)
置入代码 ({ 131, 196, 12, 201, 194, 8, 0 })


 ' 不属于任何一个程序集、类模块的函数：
