 ' 文件类型：Windows窗口程序

 ' 程序名称：防杀进程
 ' 程序描述：双狮软件工作室 作者：林劲国 出品
 ' 程序作者：林劲国
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：TLSWR@163.com
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “防终止程序进程演示”
    帮助文件名 = “”



.常量 PAGE_READWRITE, "4", , 
.常量 SE_BACKUP_NAME, "“SeBackupPrivilege”", 隐藏, 
.常量 SE_RESTORE_NAME, "“SeRestorePrivilege”", 隐藏, 
.常量 SE_SHUTDOWN_NAME, "“SeShutdownPrivilege”", 隐藏, 关机
.常量 SE_DEBUG_NAME, "“SeDebugPrivilege”", 隐藏, 调试
.常量 PAGE_EXECUTE_READWRITE, "64", , 
.常量 PAGE_EXECUTE_READ, "32", , 
.常量 WH_GETMESSAGE, "3", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 进程信息输出, , 
    .成员 结构大小, 整数型, , , 结构的大小(这里使用已知大小296)
    .成员 引用次数, 整数型, , , 引用计数
    .成员 进程标识, 整数型, , , 进程号
    .成员 进程堆栈标识, 整数型, , , 进程的堆号，只对Toolhelp函数有意义，并不是一个有效句柄
    .成员 进程模块标识, 整数型, , , 进程的模块号，只对Toolhelp函数有意义，并不是一个有效句柄
    .成员 调用线程数, 整数型, , , 进程中包括的线程数
    .成员 母进程标识, 整数型, , , 进程的母进程
    .成员 线程优先级, 整数型, , , 进程的线程的基优先级，所有此进程创建的线程将基于此优先级
    .成员 线程标志, 整数型, , , 保留，没有使用
    .成员 进程对应文件名, 字节型, , "256", 进程所对应的文件及路径

数据类型 虚拟信息, , MEMORY_BASIC_INFORMATION
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocationProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 lType, 整数型, , , 

.全局变量 API, 整数型, , , 
.全局变量 API_BAK, 字节集, , , 
.全局变量 hook, 整数型, , , 

.DLL命令 修改虚拟保护, 逻辑型, "kernel32", "VirtualProtectEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 虚拟信息.BaseAddress
    .参数 dwSize, 整数型, , 虚拟信息.RegionSize
    .参数 flNewProtect, 整数型, , 修改类型,#PAGE_EXECUTE_READWRITE 64为可读写模式
    .参数 lpflOldProtect, 整数型, 传址, 虚拟信息.Protect

.DLL命令 返回虚拟信息, 整数型, "kernel32", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 对象指针地址
    .参数 lpBuffer, 虚拟信息, , 返回的虚拟信息
    .参数 dwLength, 整数型, , 信息长度,已知 28

.DLL命令 取程序或DLL句柄, 整数型, "kernel32", "GetModuleHandleA", , 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 模块名, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 取DLL函数地址, 整数型, "kernel32", "GetProcAddress", , 返回函数地址  成功返回DLL库模块内函数地址
    .参数 DLL句柄, 整数型, , DLL库模块的句柄，可以调用 LoadLibrary 函数返回。
    .参数 DLL库模块内函数名, 文本型, , DLL库模块内函数名

.DLL命令 写内存字节, 逻辑型, "kernel32", "WriteProcessMemory", , 在指定进程中写内存
    .参数 hProcess, 整数型, , 对象的进程句柄,可以使用函数 OpenProcess() 返回。
    .参数 起始写入地址, 整数型, , 起始写入地址
    .参数 要写入的内容, 字节集, , 本参数的类型也能是“字节”型。
    .参数 写入长度, 整数型, , 写入的数据长度。
    .参数 实际写入长度, 整数型, , 实际写入的数据长度，为0则忽略。

.DLL命令 打开进程, 整数型, "", "OpenProcess", 公开, 
    .参数 访问方法, 整数型, , 指定这个句柄要求的访问方法,PROCESS_CREATE_THREAD（允许远程创建线程）；PROCESS_VM_OPERATION （允许远程VM操作）；PROCESS_VM_WRITE（允许远程VM写）；2035711 完全访问
    .参数 子进程继承, 整数型, , 如句柄能够由子进程继承，则为TRUE，0
    .参数 进程标识符, 整数型, , 要打开那个进程的进程标识符,使用一个变量装载进程ID。

.DLL命令 关闭内核对象, 整数型, "kernel32", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 api_ExitWindowsEx, 整数型, "user32.dll", "ExitWindowsEx", , 退出windows，并用特定的选项重新启动
    .参数 标志, 整数型, , 0.注销; 1.关机; 2.重启; 3.待机
    .参数 保留值, 整数型, , dwReserved,保留，设为零

.DLL命令 创建进程快照, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 快照类型, 整数型, , 
    .参数 进程标识, 整数型, , 

.DLL命令 开始进程快照, 整数型, "", "Process32First", , 
    .参数 快照句柄, 整数型, , 
    .参数 线程信息输出变量, 进程信息输出, , 

.DLL命令 继续进程快照, 整数型, "", "Process32Next", , 
    .参数 快照句柄, 整数型, , 
    .参数 线程信息输出变量, 进程信息输出, , 

.DLL命令 取当前进程伪句柄, 整数型, "kernel32", "GetCurrentProcess", , 

.DLL命令 释放内存空间, 整数型, "kernel32.dll", "VirtualFreeEx", , 释放申请的内存地址空间
    .参数 线程标识, 整数型, , 可以使用函数 OpenProcess() 返回。
    .参数 内存空间地址, 整数型, , 用 VirtualAllocEx() 申请的内存空间地址。
    .参数 dwSize, 整数型, 传址, 0
    .参数 dwFreeType, 整数型, , 32768

.DLL命令 申请内存空间, 整数型, "kernel32.dll", "VirtualAllocEx", , 申请内存地址空间  成功返回申请的内存空间的起始地址。
    .参数 线程标识, 整数型, , 可以使用函数 OpenProcess() 返回。
    .参数 lpAddress, 整数型, , 
    .参数 空间大小, 整数型, 传址, 申请的内存空间大小
    .参数 flAllocationType, 整数型, , 
    .参数 共享方式, 整数型, , 申请的内存空间共享方式，PAGE_READWRITE（可读写方式）；

.DLL命令 载入动态链接库, 整数型, "", "LoadLibraryA", , 
    .参数 lpFileName, 文本型, , 动态链接库名称

.DLL命令 返回函数地址, 子程序指针, "", "GetProcAddress", , 
    .参数 hMod, 整数型, , 
    .参数 lpFileName, 文本型, , 

.DLL命令 安装钩子过程, 整数型, "", "SetWindowsHookExA", , 
    .参数 idHook, 整数型, , 
    .参数 lpfn, 子程序指针, , 
    .参数 nMod, 整数型, , 
    .参数 dwThreadID, 整数型, , 

.DLL命令 关闭全局钩子, 逻辑型, "", "UnhookWindowsHookEx", , 
    .参数 hhook, 整数型, , 

.DLL命令 释放动态链接库, 整数型, "kernel32.dll", "FreeLibrary", , 
    .参数 库句柄, 整数型, , hLibModule，要释放的一个库句柄

.程序集 接口程序集, , , 

.子程序 刷新进程信息, 逻辑型, , 
.参数 进程信息输出, 进程信息输出, 数组, 

.局部变量 临时变量, 整数型, , , 
.局部变量 临时变量B, 整数型, , , 
.局部变量 线程基本优先级, 整数型, , "0", 
.局部变量 临时进程信息, 进程信息输出, , , 

清除数组 (进程信息输出)
赋值 (临时变量, 创建进程快照 (2, 0))
赋值 (临时进程信息.结构大小, 296)
赋值 (临时变量B, 开始进程快照 (临时变量, 临时进程信息))
.判断循环首 (不等于 (临时变量B, 0))
    加入成员 (进程信息输出, 临时进程信息)
    赋值 (临时变量B, 继续进程快照 (临时变量, 临时进程信息))
.判断循环尾 ()
关闭内核对象 (临时变量)
.如果真 (大于 (取数组成员数 (进程信息输出), 0))
    返回 (真)
.如果真结束
返回 (假)

.子程序 修改API首地址, 逻辑型, , 
.参数 Process, 整数型, , 目标进程句柄
.参数 Papi, 整数型, , 要修改的API函数地址
.参数 type, 字节集, , 要改写的内容,字节集

.局部变量 mbi, 虚拟信息, , , 
.局部变量 结果, 逻辑型, , , 
.局部变量 MyAPI, 整数型, , , 
.局部变量 Ptype, 字节集, , , 

.如果真 (等于 (Papi, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (返回虚拟信息 (Process, Papi, mbi, 28), 0))
    返回 (假)
.如果真结束
.如果真 (等于 (修改虚拟保护 (Process, mbi.BaseAddress, 相加 (取字节集长度 (type), 1), #PAGE_EXECUTE_READWRITE, mbi.Protect), 假))
    返回 (假)
.如果真结束
赋值 (结果, 写内存字节 (Process, Papi, type, 取字节集长度 (type), 0))
修改虚拟保护 (Process, mbi.BaseAddress, 相加 (取字节集长度 (type), 1), #PAGE_EXECUTE_READ, mbi.Protect) ' 改回只读模式
返回 (结果)

.子程序 还原API, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 进程信息, 进程信息输出, , "0", 
.局部变量 进程句柄, 整数型, , , 
.局部变量 修改内容, 整数型, , , 

刷新进程信息 (进程信息)
.计次循环首 (取数组成员数 (进程信息), i)
    赋值 (进程句柄, 打开进程 (2035711, 0, 进程信息 [i], 进程标识))
    .如果真 (不等于 (API_BAK, { 0 }))
        修改API首地址 (进程句柄, API, API_BAK)
    .如果真结束
    关闭内核对象 (进程句柄)
.计次循环尾 ()


.窗口程序集 窗口程序集, , , 

.程序集变量 hMod, 整数型, , , 
.程序集变量 还原API, 逻辑型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (API, 取DLL函数地址 (取程序或DLL句柄 (“kernel32.dll”), “OpenProcess”))
 ' 写入前先备份一下
赋值 (API_BAK, 指针到字节集 (API, 8))

.子程序 _按钮1_被单击, 空白型, , 因为我们的DLL是在初始化代码里放的HOOHAPI,所以第一次安装全局钩子时才有效
.局部变量 路径, 文本型, , , 

赋值 (路径, 相加 (取运行目录 (), “\”, 取执行文件名 ()))
写注册项 (#本地机器, “SOFTWARE\Microsoft\Windows\CurrentVersion\NND~1”, 路径)
赋值 (hook, 安装全局钩子 (相加 (取运行目录 (), “\DEP_hook.dll”)))
.如果真 (不等于 (hook, 0))
    赋值 (还原API, 真)
    信息框 (“恭喜,防杀成功！！”, 64, )
.如果真结束


.子程序 安装全局钩子, 整数型, , 安装全局消息钩子
.参数 DLLPath, 文本型, , 

.局部变量 lpProc, 子程序指针, , , 

赋值 (hMod, 载入动态链接库 (DLLPath))
赋值 (lpProc, 返回函数地址 (hMod, “GetMsgProc”))
赋值 (hook, 安装钩子过程 (#WH_GETMESSAGE, lpProc, hMod, 0))
返回 (hook)

.子程序 _按钮2_被单击, 空白型, , 
.如果真 (等于 (还原API, 真))
    关闭全局钩子 (hook)
     ' 关闭全局钩子时并没有释放自身进程的DLL
    释放动态链接库 (hMod)
    还原API ()
    删除注册项 (#本地机器, “SOFTWARE\Microsoft\Windows\CurrentVersion\NND~1”)
    赋值 (还原API, 假)
    信息框 (“提示:还原成功！！”, 48, “提示”)
    
.如果真结束


.子程序 __启动窗口_将被销毁, 空白型, , 
.如果真 (等于 (还原API, 真))
    关闭全局钩子 (hook)
     ' 关闭全局钩子时并没有释放自身进程的DLL
    释放动态链接库 (hMod)
    删除注册项 (#本地机器, “SOFTWARE\Microsoft\Windows\CurrentVersion\NND~1”)
    还原API ()
.如果真结束



 ' 不属于任何一个程序集、类模块的函数：
