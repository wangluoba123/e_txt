 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 九位累进可除数
 ' 程序描述：    求九位累进可除数。所谓九位累进可除数就是这样一个数：这个数用到1到9这九个
数字组成，每个数字刚好只出现一次。这九个位数的前两位能被2整除，前三位能
被3整除......前N位能被N整除，整个九位数能被9整除。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 283
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 九位累进可除数(回朔法)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.程序集变量 数字数组, 整数型, , "10", 存放找到的数字
.程序集变量 判断循环结束标志, 逻辑型, , , 循环结束的标志
.程序集变量 当前数字位数, 整数型, , , 存放当前的数字所在位置
.程序集变量 标志变量, 逻辑型, , , 
.程序集变量 循环变量, 整数型, , , 
.程序集变量 总和, 长整数型, , , 存放当前找到的数字
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：回朔法
 ' 问题：求九位累进可除数
 ' 问题描述：
 ' 求九位累进可除数。所谓九位累进可除数就是这样一个数：这个数用到1到9这九个
 ' 数字组成，每个数字刚好只出现一次。这九个位数的前两位能被2整除，前三位能
 ' 被3整除......前N位能被N整除，整个九位数能被9整除。
 ' 问题分析：
 ' 问题本身可以简化为一个穷举问题：只要穷举每位数字的各种可能取值，按照题目
 ' 的要求对穷举的结果进行判断就一定可以得到正确的结果。
 ' 问题中给出了“累进可除”这一条件，就使得我们可以在穷举法中加入条件判
 ' 断。在穷举的过程中，当确定部分位的值后，马上就判断产生的该部分是否符合“
 ' 累进可除”条件，若符合，则继续穷举下一位数字；否则刚刚产生的那一位数字就
 ' 是错误的。这样将条件判断引入到穷举法之中，可以尽可能早的发现矛盾，尽早地
 ' 放弃不必要穷举的值，从而提高程序的执行效率。
 ' 为了达到早期发现矛盾的目的，不能采用多重循环的方法实行穷举，那样编出
 ' 的程序质量较差。程序中使用的算法不再是穷举法，而是回朔法。
 ' 通过上面规律可以推导出结果。
 ' 备注：

 ' 当前数字位数:正在处理的数字数组元素，表示前当"前数字位数-1"个元素已经满足要求，正处理的是第"当前数字位数"个元素
赋值 (当前数字位数, 1)
 ' 为数字数组 [1]设置初值1,也就是将第一位数字设置成１
赋值 (数字数组 [1], 1)
 ' 将结束标志置为假:表示处理没有结束
赋值 (判断循环结束标志, 假)

.子程序 _计算图形按钮_被单击, 空白型, , 
 ' 结束标志 =假:表示处理没有结束
.判断循环首 (等于 (判断循环结束标志, 假))
     ' 结束标志 =假，并且找出来的数字没有超过９位时循环
    .判断循环首 (并且 (等于 (判断循环结束标志, 假), 小于或等于 (当前数字位数, 9)))
         ' 设置标志变量为假，表示当前找到的数字符合要求，相反不符合要求并进行相应的修改
        赋值 (标志变量, 假)
        .如果真 (等于 (标志变量, 假))
            .变量循环首 (1, 相减 (当前数字位数, 1), 1, 循环变量)
                 ' 判断第“当前数字位数”个元素是否与前“当前数字位数-1”个元素重复
                .如果真 (等于 (数字数组 [循环变量], 数字数组 [当前数字位数]))
                    赋值 (标志变量, 真)
                    跳出循环 ()
                .如果真结束
                
            .变量循环尾 ()
        .如果真结束
         ' 每次计算之前都将找到的数字置为０
        赋值 (总和, 0)
         ' 标志变量为假说明找到的数字和前面的数字没有相同的，接着判断它是否能被相应的位数整除
        .如果真 (等于 (标志变量, 假))
             ' 求出找到的数字
            .变量循环首 (1, 当前数字位数, 1, 循环变量)
                赋值 (总和, 相加 (相乘 (总和, 10), 数字数组 [循环变量]))
                 ' 判断找到的数字能否被相应的位数整除
                .如果真 (不等于 (求余数 (总和, 循环变量), 0))
                    赋值 (标志变量, 真)
                    跳出循环 ()
                .如果真结束
                
            .变量循环尾 ()
        .如果真结束
         ' 如果上面的两个条件中，有一个不符合，说明找到的这个数字不正确，则进行相应的修改；如果都符合则找下一个数字
        .如果 (等于 (标志变量, 真))
             ' 判断当前数字和上一个找到的数字是否相等，也就是说当前数字是否已经经过一圈追上上一个数字
            .如果 (等于 (数字数组 [当前数字位数], 数字数组 [相减 (当前数字位数, 1)]))
                 ' 追上了，则退回到前一个数字
                赋值 (当前数字位数, 相减 (当前数字位数, 1))
                 ' 当找到的当前数字达到９时，则当前的数字置1
                .如果 (并且 (大于 (当前数字位数, 1), 等于 (数字数组 [当前数字位数], 9)))
                    赋值 (数字数组 [当前数字位数], 1)
                .否则
                     ' 当第1位的数字达到９时结束，就是将判断循环结束标志置为真值
                    .如果 (并且 (等于 (当前数字位数, 1), 等于 (数字数组 [当前数字位数], 9)))
                        赋值 (判断循环结束标志, 真)
                    .否则
                         ' 否则，当前数字加１
                        赋值 (数字数组 [当前数字位数], 相加 (数字数组 [当前数字位数], 1))
                    .如果结束
                    
                .如果结束
                 ' 如果当前找到的数字为９，则将当前数字置１；否则当前数字加１
            .否则
                .如果 (等于 (数字数组 [当前数字位数], 9))
                    赋值 (数字数组 [当前数字位数], 1)
                .否则
                    赋值 (数字数组 [当前数字位数], 相加 (数字数组 [当前数字位数], 1))
                .如果结束
                
            .如果结束
            
             ' 当前找到的数字已经满足要求，开始找下一个数字
        .否则
            .如果真 (小于或等于 (当前数字位数, 9))
                 ' 当９位数字没有找完时，是继续找下一个数字
                赋值 (当前数字位数, 相加 (当前数字位数, 1))
                .如果 (等于 (数字数组 [相减 (当前数字位数, 1)], 9))
                     ' 当前要找的数字的前一个数字为９，则当前数字从１开始找
                    赋值 (数字数组 [当前数字位数], 1)
                     ' 否则当前数字从前一个数字加１开始找
                .否则
                    赋值 (数字数组 [当前数字位数], 相加 (数字数组 [相减 (当前数字位数, 1)], 1))
                .如果结束
                
            .如果真结束
            
        .如果结束
        
    .判断循环尾 ()
     ' 显示找到的数字，并且将判断循环结束标志置为真，结束最外层循环
    .如果真 (等于 (判断循环结束标志, 假))
        .计次循环首 (9, 循环变量)
            到文本 (数字数组 [循环变量]).加入文本 ()
            赋值 (判断循环结束标志, 真)
        .计次循环尾 ()
    .如果真结束
    
.判断循环尾 ()


 ' 不属于任何一个程序集、类模块的函数：
