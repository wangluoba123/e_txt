 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' Exmlrpc A36CFD538657479eBD7C0D287BBB3D95 2 0 远程服务支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 2 0 数据操作支持库一
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库




数据类型 BITMAPINFO, , 
    .成员 bmiHeader, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 整数型, , "255", 

数据类型 BITMAPINFOHEADER, , 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 整数型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 整数型, , , 

.全局变量 颜色表8位, 字节集, , , 
.全局变量 多线程许可证, 整数型, , , 

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", , 从堆中分配内存
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", , 获取调用过程堆句柄

.DLL命令 CopyMemory_BITMAPINFO, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 字节型, 传址, 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_BITMAPFILEHEADER, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 Destination, 字节型, 传址, 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 复制内存_字节集到字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 字节型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 CreateCompatibleDC, 整数型, "Gdi32.dll", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 SelectObject, 整数型, "gdi32.dll", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 hgdiobj, 整数型, , 

.DLL命令 CreateDIBSection, 整数型, "gdi32.dll", "CreateDIBSection", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 位图数据, 字节集, 传址, 
    .参数 常数, 整数型, , 
    .参数 内存地址, 整数型, 传址, 
    .参数 文件映射句柄, 整数型, , 
    .参数 偏移量, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 hdcDest, 整数型, , 
    .参数 nXDest, 整数型, , 
    .参数 nYDest, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hdcSrc, 整数型, , 
    .参数 nXSrc, 整数型, , 
    .参数 nYSrc, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 复制内存_字节集, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 pDestination, 字节型, 传址, 
    .参数 pSource, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", , 
    .参数 hdc, 空白型, , 

.DLL命令 DeleteObject, 逻辑型, "gdi32.dll", "DeleteObject", , 
    .参数 hObject, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "user32.dll", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 模拟键盘行动_, 整数型, "user32.dll", "keybd_event", , 这个函数模拟了键盘行动
    .参数 键代码, 空白型, , bVk,欲模拟的虚拟键码
    .参数 键扫描码, 空白型, , bScan,键的OEM扫描码
    .参数 标志值, 空白型, , dwFlags,标志常数
    .参数 特定值, 空白型, , dwExtraInfo,通常不用的一个值

.DLL命令 模拟鼠标, 空白型, "user32.dll", "mouse_event", , 
    .参数 dwFlags, 空白型, , 
    .参数 dx, 空白型, , 
    .参数 dy, 空白型, , 
    .参数 cButtons, 空白型, , 
    .参数 dwExtraInfo, 空白型, , 

.DLL命令 移动光标, 逻辑型, "user32.dll", "SetCursorPos", , 
    .参数 x, 空白型, , 
    .参数 y, 空白型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 客户端, 未知类型0x20002, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (颜色表8位, { 0, 0, 0, 0, 0, 0, 128, 0, 0, 128, 0, 0, 0, 128, 128, 0, 128, 0, 0, 0, 128, 0, 128, 0, 128, 128, 0, 0, 192, 192, 192, 0, 192, 220, 192, 0, 240, 202, 166, 0, 0, 32, 64, 0, 0, 32, 96, 0, 0, 32, 128, 0, 0, 32, 160, 0, 0, 32, 192, 0, 0, 32, 224, 0, 0, 64, 0, 0, 0, 64, 32, 0, 0, 64, 64, 0, 0, 64, 96, 0, 0, 64, 128, 0, 0, 64, 160, 0, 0, 64, 192, 0, 0, 64, 224, 0, 0, 96, 0, 0, 0, 96, 32, 0, 0, 96, 64, 0, 0, 96, 96, 0, 0, 96, 128, 0, 0, 96, 160, 0, 0, 96, 192, 0, 0, 96, 224, 0, 0, 128, 0, 0, 0, 128, 32, 0, 0, 128, 64, 0, 0, 128, 96, 0, 0, 128, 128, 0, 0, 128, 160, 0, 0, 128, 192, 0, 0, 128, 224, 0, 0, 160, 0, 0, 0, 160, 32, 0, 0, 160, 64, 0, 0, 160, 96, 0, 0, 160, 128, 0, 0, 160, 160, 0, 0, 160, 192, 0, 0, 160, 224, 0, 0, 192, 0, 0, 0, 192, 32, 0, 0, 192, 64, 0, 0, 192, 96, 0, 0, 192, 128, 0, 0, 192, 160, 0, 0, 192, 192, 0, 0, 192, 224, 0, 0, 224, 0, 0, 0, 224, 32, 0, 0, 224, 64, 0, 0, 224, 96, 0, 0, 224, 128, 0, 0, 224, 160, 0, 0, 224, 192, 0, 0, 224, 224, 0, 64, 0, 0, 0, 64, 0, 32, 0, 64, 0, 64, 0, 64, 0, 96, 0, 64, 0, 128, 0, 64, 0, 160, 0, 64, 0, 192, 0, 64, 0, 224, 0, 64, 32, 0, 0, 64, 32, 32, 0, 64, 32, 64, 0, 64, 32, 96, 0, 64, 32, 128, 0, 64, 32, 160, 0, 64, 32, 192, 0, 64, 32, 224, 0, 64, 64, 0, 0, 64, 64, 32, 0, 64, 64, 64, 0, 64, 64, 96, 0, 64, 64, 128, 0, 64, 64, 160, 0, 64, 64, 192, 0, 64, 64, 224, 0, 64, 96, 0, 0, 64, 96, 32, 0, 64, 96, 64, 0, 64, 96, 96, 0, 64, 96, 128, 0, 64, 96, 160, 0, 64, 96, 192, 0, 64, 96, 224, 0, 64, 128, 0, 0, 64, 128, 32, 0, 64, 128, 64, 0, 64, 128, 96, 0, 64, 128, 128, 0, 64, 128, 160, 0, 64, 128, 192, 0, 64, 128, 224, 0, 64, 160, 0, 0, 64, 160, 32, 0, 64, 160, 64, 0, 64, 160, 96, 0, 64, 160, 128, 0, 64, 160, 160, 0, 64, 160, 192, 0, 64, 160, 224, 0, 64, 192, 0, 0, 64, 192, 32, 0, 64, 192, 64, 0, 64, 192, 96, 0, 64, 192, 128, 0, 64, 192, 160, 0, 64, 192, 192, 0, 64, 192, 224, 0, 64, 224, 0, 0, 64, 224, 32, 0, 64, 224, 64, 0, 64, 224, 96, 0, 64, 224, 128, 0, 64, 224, 160, 0, 64, 224, 192, 0, 64, 224, 224, 0, 128, 0, 0, 0, 128, 0, 32, 0, 128, 0, 64, 0, 128, 0, 96, 0, 128, 0, 128, 0, 128, 0, 160, 0, 128, 0, 192, 0, 128, 0, 224, 0, 128, 32, 0, 0, 128, 32, 32, 0, 128, 32, 64, 0, 128, 32, 96, 0, 128, 32, 128, 0, 128, 32, 160, 0, 128, 32, 192, 0, 128, 32, 224, 0, 128, 64, 0, 0, 128, 64, 32, 0, 128, 64, 64, 0, 128, 64, 96, 0, 128, 64, 128, 0, 128, 64, 160, 0, 128, 64, 192, 0, 128, 64, 224, 0, 128, 96, 0, 0, 128, 96, 32, 0, 128, 96, 64, 0, 128, 96, 96, 0, 128, 96, 128, 0, 128, 96, 160, 0, 128, 96, 192, 0, 128, 96, 224, 0, 128, 128, 0, 0, 128, 128, 32, 0, 128, 128, 64, 0, 128, 128, 96, 0, 128, 128, 128, 0, 128, 128, 160, 0, 128, 128, 192, 0, 128, 128, 224, 0, 128, 160, 0, 0, 128, 160, 32, 0, 128, 160, 64, 0, 128, 160, 96, 0, 128, 160, 128, 0, 128, 160, 160, 0, 128, 160, 192, 0, 128, 160, 224, 0, 128, 192, 0, 0, 128, 192, 32, 0, 128, 192, 64, 0, 128, 192, 96, 0, 128, 192, 128, 0, 128, 192, 160, 0, 128, 192, 192, 0, 128, 192, 224, 0, 128, 224, 0, 0, 128, 224, 32, 0, 128, 224, 64, 0, 128, 224, 96, 0, 128, 224, 128, 0, 128, 224, 160, 0, 128, 224, 192, 0, 128, 224, 224, 0, 192, 0, 0, 0, 192, 0, 32, 0, 192, 0, 64, 0, 192, 0, 96, 0, 192, 0, 128, 0, 192, 0, 160, 0, 192, 0, 192, 0, 192, 0, 224, 0, 192, 32, 0, 0, 192, 32, 32, 0, 192, 32, 64, 0, 192, 32, 96, 0, 192, 32, 128, 0, 192, 32, 160, 0, 192, 32, 192, 0, 192, 32, 224, 0, 192, 64, 0, 0, 192, 64, 32, 0, 192, 64, 64, 0, 192, 64, 96, 0, 192, 64, 128, 0, 192, 64, 160, 0, 192, 64, 192, 0, 192, 64, 224, 0, 192, 96, 0, 0, 192, 96, 32, 0, 192, 96, 64, 0, 192, 96, 96, 0, 192, 96, 128, 0, 192, 96, 160, 0, 192, 96, 192, 0, 192, 96, 224, 0, 192, 128, 0, 0, 192, 128, 32, 0, 192, 128, 64, 0, 192, 128, 96, 0, 192, 128, 128, 0, 192, 128, 160, 0, 192, 128, 192, 0, 192, 128, 224, 0, 192, 160, 0, 0, 192, 160, 32, 0, 192, 160, 64, 0, 192, 160, 96, 0, 192, 160, 128, 0, 192, 160, 160, 0, 192, 160, 192, 0, 192, 160, 224, 0, 192, 192, 0, 0, 192, 192, 32, 0, 192, 192, 64, 0, 192, 192, 96, 0, 192, 192, 128, 0, 192, 192, 160, 0, 240, 251, 255, 0, 164, 160, 160, 0, 128, 128, 128, 0, 0, 0, 255, 0, 0, 255, 0, 0, 0, 255, 255, 0, 255, 0, 0, 0, 255, 0, 255, 0, 255, 255, 0, 0, 255, 255, 255, 0 })
赋值 (多线程许可证, 未知支持库函数_1 ())


.子程序 连接服务器, 逻辑型, , 
.参数 连接IP, 文本型, , 
.参数 连接端口, 整数型, , 

返回 (客户端.未知支持库函数_15 (连接端口, 连接IP, 假, &数据处理))

.子程序 数据处理, 空白型, , 
.参数 消息地址, 整数型, , 

.局部变量 消息类型, 整数型, , , 
.局部变量 结果信息, 字节集, , , 

赋值 (消息类型, 客户端.未知支持库函数_24 (消息地址))
.如果真 (等于 (消息类型, 0))
    赋值 (_启动窗口., “连接断开”)
    返回 ()
.如果真结束

.如果真 (等于 (消息类型, -1))
    赋值 (_启动窗口., “连接断开”)
    客户端断开 ()
    返回 ()
.如果真结束

客户端.未知支持库函数_22 (消息地址, 结果信息)
屏幕 (结果信息 [1], 取字节集中间 (结果信息, 2, 相减 (取字节集长度 (结果信息), 1)))


.子程序 发送数据, 逻辑型, , 
.参数 数据, 字节集, , 

返回 (客户端.未知支持库函数_20 (数据))


.子程序 客户端断开, 空白型, , 
客户端.未知支持库函数_16 ()

.子程序 __启动窗口_将被销毁, 空白型, , 
未知支持库函数_2 (多线程许可证)



.子程序 _按钮1_被单击, 空白型, , 
.如果 (连接服务器 (.内容, 到整数 (.内容)))
    赋值 (_启动窗口., “连接成功”)
.否则
    赋值 (_启动窗口., “连接失败”)
.如果结束


.子程序 _按钮2_被单击, 空白型, , 
客户端断开 ()

.程序集 程序集1, , , 

.程序集变量 宽度, 整数型, , , 
.程序集变量 高度, 整数型, , , 
.程序集变量 原图象数据, 字节集, , , 
.子程序 屏幕, 空白型, , 
.参数 操作, 整数型, , 
.参数 数据, 字节集, , 

.局部变量 新宽度, 整数型, , , 
.局部变量 新高度, 整数型, , , 
.局部变量 新图象数据, 字节集, , , 
.局部变量 坐标分割, 文本型, , "0", 

.判断开始 (等于 (操作, 0))
    赋值 (原图象数据, {  })
    赋值 (宽度, 取屏幕宽度 ())
    赋值 (高度, 取屏幕高度 ())
    发送数据 (相加 ({ 0 }, 到字节集 (相加 (到文本 (宽度), “|”, 到文本 (高度)))))
.判断 (等于 (操作, 1))
    赋值 (新宽度, 取屏幕宽度 ())
    赋值 (新高度, 取屏幕高度 ())
    .如果真 (或者 (不等于 (宽度, 新宽度), 不等于 (高度, 新高度)))
        赋值 (原图象数据, {  })
        赋值 (宽度, 新宽度)
        赋值 (高度, 新高度)
        发送数据 (相加 ({ 0 }, 到字节集 (相加 (到文本 (宽度), “|”, 到文本 (高度)))))
        返回 ()
    .如果真结束
    延时 (相乘 (_启动窗口..位置, 10))
    赋值 (新图象数据, 截图 (新宽度, 新高度))
    .判断开始 (等于 (原图象数据, {  }))
        赋值 (原图象数据, 新图象数据)
        发送数据 (相加 ({ 1 }, 未知支持库函数_0 (新图象数据)))
    .判断 (不等于 (原图象数据, 新图象数据))
        发送数据 (相加 ({ 2 }, 未知支持库函数_0 (取图片差异 (原图象数据, 新图象数据))))
        赋值 (原图象数据, 新图象数据)
    .默认
        发送数据 ({ 3 })
    .判断结束
    
.判断 (等于 (操作, 26))
    未知支持库函数_3 (多线程许可证)
    模拟键盘行动_ (数据 [1], 0, 0, 0)
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 10))
    未知支持库函数_3 (多线程许可证)
    .判断开始 (等于 (数据 [1], 0))
        模拟键盘行动_ (数据 [2], 0, 0, 0)
        模拟键盘行动_ (数据 [3], 0, 0, 0)
        模拟键盘行动_ (数据 [4], 0, 0, 0)
        模拟键盘行动_ (数据 [2], 0, 2, 0)
        模拟键盘行动_ (数据 [3], 0, 2, 0)
        模拟键盘行动_ (数据 [4], 0, 2, 0)
    .默认
        模拟键盘行动_ (数据 [2], 0, 0, 0)
        模拟键盘行动_ (数据 [3], 0, 0, 0)
        模拟键盘行动_ (数据 [2], 0, 2, 0)
        模拟键盘行动_ (数据 [3], 0, 2, 0)
    .判断结束
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 20))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    模拟鼠标 (4, 相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()), 0, 0)
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 21))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    模拟鼠标 (16, 相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()), 0, 0)
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 22))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    模拟鼠标 (2, 相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()), 0, 0)
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 23))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    模拟鼠标 (8, 相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()), 0, 0)
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 24))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    移动光标 (相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()))
    未知支持库函数_4 (多线程许可证)
.判断 (等于 (操作, 25))
    赋值 (坐标分割, 分割文本 (到文本 (数据), “|”, 2))
    未知支持库函数_3 (多线程许可证)
    模拟鼠标 (6, 相乘 (到数值 (坐标分割 [1]), 取屏幕宽度 ()), 相乘 (到数值 (坐标分割 [2]), 取屏幕高度 ()), 0, 0)
    未知支持库函数_4 (多线程许可证)
    
.默认
    
.判断结束



.子程序 取图片差异, 字节集, , 
.参数 原图, 字节集, , 
.参数 对比图, 字节集, , 

.局部变量 图像宽, 整数型, , , 
.局部变量 图像高, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 偏移, 整数型, , , 

赋值 (图像宽, 相加 (原图 [19], 相乘 (原图 [20], 256)))
赋值 (图像高, 相加 (原图 [23], 相乘 (原图 [24], 256)))
赋值 (数据, 对比图)
赋值 (偏移, 选择 (等于 (求余数 (相乘 (图像宽, 3), 4), 0), 0, 相减 (4, 求余数 (相乘 (图像宽, 3), 4))))
 ' 遍历各点的颜色
置入代码 ({ 51, 246, 190, 54, 4, 0, 0, 51, 219, 139, 93, 8, 139, 27, 51, 255, 139, 125, 244, 139, 69, 248, 51, 201, 65, 81, 80, 59, 200, 15, 143, 60, 0, 0, 0, 139, 69, 252, 51, 201, 65, 81, 80, 59, 200, 15, 143, 34, 0, 0, 0, 138, 68, 51, 8, 138, 84, 62, 8, 58, 208, 117, 17, 128, 250, 12, 117, 7, 198, 68, 62, 8, 13, 235, 5, 198, 68, 62, 8, 12, 70, 88, 89, 235, 211, 131, 196, 8, 3, 117, 240, 88, 89, 235, 185, 131, 196, 8 })
返回 (数据)

.子程序 截图, 字节集, , 
.参数 屏幕宽度, 整数型, , 
.参数 屏幕高度, 整数型, , 

.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 桌面场景句柄, 整数型, , , 
.局部变量 内存场景句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 图像, 字节集, , , 
.局部变量 文件头, 字节集, , , 
.局部变量 位图指针, 整数型, , , 

赋值 (位图信息.bmiHeader.biSize, 40)
赋值 (位图信息.bmiHeader.biWidth, 屏幕宽度)
赋值 (位图信息.bmiHeader.biHeight, 屏幕高度)
赋值 (位图信息.bmiHeader.biPlanes, 1)
赋值 (位图信息.bmiHeader.biBitCount, 8)
赋值 (位图信息.bmiHeader.biSizeImage, 相乘 (位图信息.bmiHeader.biWidth, 位图信息.bmiHeader.biHeight))
赋值 (图像, 取空白字节集_ (相加 (位图信息.bmiHeader.biSizeImage, 1064)))
CopyMemory_BITMAPINFO (图像 [1], 位图信息, 位图信息.bmiHeader.biSize)
复制内存_字节集到字节集 (图像 [41], 颜色表8位 [1], 1024)

赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 1078)
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.bmiHeader.biSizeImage))
赋值 (文件头, 取空白字节集_ (14))
CopyMemory_BITMAPFILEHEADER (文件头 [1], 位图文件头, 14)

赋值 (桌面场景句柄, GetDC (0))
赋值 (内存场景句柄, CreateCompatibleDC (桌面场景句柄))
赋值 (位图句柄, CreateDIBSection (内存场景句柄, 图像, 0, 位图指针, 0, 0))
赋值 (旧位图句柄, SelectObject (内存场景句柄, 位图句柄))
BitBlt (内存场景句柄, 0, 0, 位图信息.bmiHeader.biWidth, 位图信息.bmiHeader.biHeight, 桌面场景句柄, 0, 0, 13369376)
复制内存_字节集 (图像 [1065], 位图指针, 位图信息.bmiHeader.biSizeImage)
SelectObject (内存场景句柄, 旧位图句柄)
DeleteObject (位图句柄)
DeleteDC (内存场景句柄)
ReleaseDC (0, 桌面场景句柄)
返回 (相加 (文件头, 图像))


.子程序 取空白字节集_, 字节集, , 返回具有特定数目 0 字节的字节集
.参数 零字节数目, 整数型, , 

.局部变量 字节集指针, 整数型, , , 

.如果真 (小于或等于 (零字节数目, 0))
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 51, 192, 139, 229, 93, 194, 4, 0 })
     ' XOR EAX,EAX
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束
 ' 分配可用内存空间，+8是为了填充字节集类型标志
赋值 (字节集指针, HeapAlloc (GetProcessHeap (), 8, 相加 (零字节数目, 8))) ' #HEAP_ZERO_MEMORY=8
.如果真 (等于 (字节集指针, 0))
     ' 这里嵌入汇编代码取代  返回 ({ })
    置入代码 ({ 139, 229, 93, 194, 4, 0 })
     ' MOV ESP,EBP
     ' POP EBP
     ' RETN 04
.如果真结束
 ' 嵌入汇编代码以替换掉原来的返回代码，并添加字节集类型标志。
置入代码 ({ 254, 0, 255, 117, 8, 143, 64, 4, 139, 229, 93, 194, 4, 0 })
返回 ({  })




 ' 不属于任何一个程序集、类模块的函数：
