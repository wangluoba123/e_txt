 ' 文件类型：未知类型

 ' 程序名称：希尔排序模块
 ' 程序描述：本模块无恶意代码,不得用于写恶意软件!!如果用于写恶意软件是软件作者的行为,与模块作者无关!!请不要犯法,谢谢!!
 ' 程序作者：呵呵仙
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：本模块无恶意代码,不得用于写恶意软件!!如果用于写恶意软件是软件作者的行为,与模块作者无关!!请不要犯法,谢谢!!
 ' 版本号：1.0
 ' 创建号：0.2





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库




数据类型 希尔排序数据, 公开, 
    .成员 用作对比_文本, 文本型, , , 一定要保留此成员,不能删.原因:不想改动子程序
    .成员 用作对比_双精度小数, 双精度小数型, , , 一定要保留此成员,不能删.原因:不想改动子程序
    .成员 用作对比_日期时间, 日期时间型, , , 一定要保留此成员,不能删.原因:不想改动子程序
    .成员 数据_文本1, 文本型, , , 这里以下,自行增加,删减自己想保存的数据.自由创作
    .成员 数据_文本2, 文本型, , , 
    .成员 数据_文本3, 文本型, , , 
    .成员 数据_文本4, 文本型, , , 
    .成员 数据_文本5, 文本型, , , 
    .成员 数据_文本6, 文本型, , , 
    .成员 数据_文本7, 文本型, , , 
    .成员 数据_文本8, 文本型, , , 


.程序集 启动子程序, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.程序集 希尔排序集, , , 

.子程序 希尔排序_希尔排序数据, 空白型, , 利用"希尔排序数据"类型中的相对应成员来排序,即成员:"用作对比_文本" 或 "用作对比_双精度小数" 或 "用作对比_日期时间"
.参数 希尔排序数据数组, 希尔排序数据, 数组, 
.参数 从小到大排序____, 整数型, 可空, 为0,为空,从小到大排序.非0,从大到小排序
.参数 比较什么类型数据, 整数型, 可空, 将会用"希尔排序数据"中的"用作对比_"的成员来作比较; 0=用作对比_双精度小数; 1=用作对比_文本; 2=用作对比_日期时间; 默认为0

.局部变量 A, 整数型, , , 
.局部变量 B, 整数型, , , 
.局部变量 C, 整数型, , , 
.局部变量 D, 整数型, , , 
.局部变量 成员, 整数型, , , 
.局部变量 双精度小数, 双精度小数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 日期时间, 日期时间型, , , 

赋值 (成员, 取数组成员数 (希尔排序数据数组))
.如果真 (小于或等于 (成员, 0))
    返回 ()
.如果真结束
.判断循环首 (小于或等于 (D, 成员))
    赋值 (D, ASM_加 (ASM_乘 (D, 3), 1))
.判断循环尾 ()
.如果 (等于 (从小到大排序____, 0))
    .判断开始 (等于 (比较什么类型数据, 0))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                赋值 (双精度小数, 希尔排序数据数组 [A], 用作对比_双精度小数)
                .判断循环首 (并且 (大于 (B, 0), 大于 (希尔排序数据数组 [B], 用作对比_双精度小数, 双精度小数)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                赋值 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_双精度小数, 双精度小数)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
    .判断 (等于 (比较什么类型数据, 1))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                ASM_交换_变量交变量 (文本, 希尔排序数据数组 [A], 用作对比_文本)
                .判断循环首 (并且 (大于 (B, 0), 大于 (希尔排序数据数组 [B], 用作对比_文本, 文本)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_文本, 文本)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
        
    .判断 (等于 (比较什么类型数据, 2))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                赋值 (日期时间, 希尔排序数据数组 [A], 用作对比_日期时间)
                .判断循环首 (并且 (大于 (B, 0), 大于 (希尔排序数据数组 [B], 用作对比_日期时间, 日期时间)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                赋值 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_日期时间, 日期时间)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
        
    .默认
        
    .判断结束
    
.否则
    .判断开始 (等于 (比较什么类型数据, 0))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                赋值 (双精度小数, 希尔排序数据数组 [A], 用作对比_双精度小数)
                .判断循环首 (并且 (大于 (B, 0), 小于 (希尔排序数据数组 [B], 用作对比_双精度小数, 双精度小数)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                赋值 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_双精度小数, 双精度小数)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
    .判断 (等于 (比较什么类型数据, 1))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                ASM_交换_变量交变量 (文本, 希尔排序数据数组 [A], 用作对比_文本)
                .判断循环首 (并且 (大于 (B, 0), 小于 (希尔排序数据数组 [B], 用作对比_文本, 文本)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_文本, 文本)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
        
    .判断 (等于 (比较什么类型数据, 2))
        .判断循环首 (大于 (D, 0))
            .变量循环首 (D, 成员, 1, A)
                赋值 (B, ASM_减 (A, D))
                赋值 (日期时间, 希尔排序数据数组 [A], 用作对比_日期时间)
                .判断循环首 (并且 (大于 (B, 0), 小于 (希尔排序数据数组 [B], 用作对比_日期时间, 日期时间)))
                    ASM_交换_变量交变量 (希尔排序数据数组 [ASM_加 (B, D)], 希尔排序数据数组 [B])
                    赋值 (B, ASM_减 (B, D))
                .判断循环尾 ()
                赋值 (希尔排序数据数组 [ASM_加 (B, D)].用作对比_日期时间, 日期时间)
            .变量循环尾 ()
            赋值 (D, ASM_除 (ASM_减 (D, 1), 3))
        .判断循环尾 ()
        
    .默认
        
    .判断结束
    
    
.如果结束


.程序集 ASM集, , , 

.子程序 ASM_加, 整数型, , 返回两个整数的相加值
.参数 加数1, 整数型, , 
.参数 加数2, 整数型, , 

置入代码 ({ 139, 69, 8, 3, 69, 12, 201, 194, 8, 0 })
返回 (0)

.子程序 ASM_减, 整数型, , 返回两个整数的相减值,
.参数 被减数, 整数型, , 
.参数 减数, 整数型, , 

置入代码 ({ 139, 69, 8, 43, 69, 12, 201, 194, 8, 0 })
返回 (0)

.子程序 ASM_乘, 整数型, , 返回两个整数的相乘值
.参数 被乘数, 整数型, , 
.参数 乘数, 整数型, , 

置入代码 ({ 139, 69, 8, 15, 175, 69, 12, 201, 194, 8, 0 })
返回 (0)


.子程序 ASM_除, 整数型, , 返回两个整数的商
.参数 被除数, 整数型, , 
.参数 除数, 整数型, , 

置入代码 ({ 186, 0, 0, 0, 0, 139, 69, 8, 247, 117, 12, 201, 194, 8, 0 })
返回 (0)


.子程序 ASM_交换_变量交变量, 空白型, , 以变量和变量的交换方式，来交换两个变量数据，注意两变量要是相同类型的
.参数 变量1, 通用型, 参考, 变量；在某种情况下可以是数据
.参数 变量2, 通用型, 参考, 变量；在某种情况下可以是数据

置入代码 ({ 139, 69, 8, 139, 77, 12, 139, 16, 135, 17, 137, 16 })


 ' 不属于任何一个程序集、类模块的函数：
