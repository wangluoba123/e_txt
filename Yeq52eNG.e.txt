 ' 文件类型：Windows模块源码

 ' 程序名称：颜色选择器
 ' 程序描述：仿OFFICE2007的颜色选择器.


2008.08.03
 ' 程序作者：鱼儿
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.2
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 175
    高度 = 209
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 16777215 '  0xFFFFFF
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 0
    可否移动 = 假
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口2
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.图片 自动图1, " ' 已保存到：D:\易语言学习\Data\Yeq52eNG.e\自动图1", , 
.图片 自动图2, " ' 已保存到：D:\易语言学习\Data\Yeq52eNG.e\自动图2", , 
.常量 SRCCOPY, "13369376", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 2 扩展界面支持库二
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库




数据类型 Rect, , 
    .成员 x1, 空白型, , , 
    .成员 y1, 空白型, , , 
    .成员 x2, 空白型, , , 
    .成员 y2, 空白型, , , 

数据类型 BitMapInfoHeader, , BitMapInfoHeader
    .成员 biSize, 空白型, , , 
    .成员 biWidth, 空白型, , , 
    .成员 biHeight, 空白型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 空白型, , , 
    .成员 biSizeImage, 空白型, , , 
    .成员 biXPelsPerMeter, 空白型, , , 
    .成员 biYPelsPerMeter, 空白型, , , 
    .成员 biClrUsed, 空白型, , , 
    .成员 biClrImportant, 空白型, , , 

数据类型 Point, , 
    .成员 x, 空白型, , , 
    .成员 y, 空白型, , , 

数据类型 BitMapFileHeader, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 空白型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 空白型, , , 

数据类型 块结构, , 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 
    .成员 颜色值, 整数型, , , 
    .成员 画笔句柄, 整数型, , , 

.全局变量 局_返回颜色值, 整数型, , , 
.全局变量 局_X, 整数型, , , 
.全局变量 局_Y, 整数型, , , 

.DLL命令 CreateCompatibleDC, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 CreateSolidBrush, 整数型, "", "", , 
    .参数 crColor, 整数型, , 

.DLL命令 FillRect, 整数型, "", "", , 
    .参数 hDC, 整数型, , 
    .参数 lprc, Rect, , 可能为 RECT 结构。
    .参数 hbr, 整数型, , 

.DLL命令 FrameRect, 整数型, "", "", , 
    .参数 hDC, 整数型, , 
    .参数 lprc, Rect, , 可能为 RECT 结构。
    .参数 hbr, 整数型, , 

.DLL命令 SelectObject, 整数型, "", "SelectObject", , 
    .参数 hdc, 空白型, , 
    .参数 hgdiobj, 空白型, , 

.DLL命令 StretchBlt, 逻辑型, "", "StretchBlt", , 
    .参数 目标设备场景, 整数型, , 
    .参数 目标位置横坐标, 整数型, , 
    .参数 目标位置纵坐标, 整数型, , 
    .参数 目标图像宽, 整数型, , 
    .参数 目标图像高, 整数型, , 
    .参数 源设备场景, 整数型, , 
    .参数 源位置横坐标, 整数型, , 
    .参数 源位置纵坐标, 整数型, , 
    .参数 源图像宽, 整数型, , 
    .参数 源图像高, 整数型, , 
    .参数 光栅运算, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "", "CreateCompatibleBitmap", , 
    .参数 hdc, 空白型, , 
    .参数 nWidth, 空白型, , 
    .参数 nHeight, 空白型, , 

.DLL命令 DeleteDC, 整数型, "", "DeleteDC", , 
    .参数 hdc, 空白型, , 

.DLL命令 CreatePen, 整数型, "gdi32.dll", "CreatePen", , 
    .参数 nPenStyle, 整数型, , 该参数可取下列标识符之一： PS_SOLID、PS_DASH、Ps_DOT、PS_DASHDOT、 PS_DASHDOT DOT
    .参数 nWidth, 整数型, , 
    .参数 crColor, 整数型, , 

.DLL命令 LineTo, 整数型, "gdi32.dll", "LineTo", , , 用当前画笔画一条线，从当前位置连到一个指定的点
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 终点横坐标, 整数型, , x,线段终点位置，采用逻辑坐标表示
    .参数 终点纵坐标, 整数型, , y,线段终点位置，采用逻辑坐标表示

.DLL命令 MoveToEx, 整数型, "gdi32", "MoveToEx", , 
    .参数 hdc, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 lpPoint, Point, 传址, 

.DLL命令 BitBlt, 整数型, "", "BitBlt", , 
    .参数 hdcDest, 空白型, , 
    .参数 nXDest, 空白型, , 
    .参数 nYDest, 空白型, , 
    .参数 nWidth, 空白型, , 
    .参数 nHeight, 空白型, , 
    .参数 hdcSrc, 空白型, , 
    .参数 nXSrc, 空白型, , 
    .参数 nYSrc, 空白型, , 
    .参数 dwRop, 空白型, , 

.DLL命令 ReleaseDC, 整数型, "", "ReleaseDC", , 
    .参数 hWnd, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 DeleteObject, 整数型, "", "DeleteObject", , 
    .参数 hObject, 空白型, , 

.DLL命令 GetDC, 整数型, "", "GetDC", , 
    .参数 hwnd, 空白型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行

_临时子程序 ()

返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
载入 (窗口2, , 真)

.子程序 选择颜色, 整数型, 公开, 返回颜色值
.参数 参_X, 空白型, , 弹出的颜色选择器的左边位置
.参数 参_Y, 空白型, , 弹出的颜色选择器的顶边位置

赋值 (局_X, 参_X)
赋值 (局_Y, 参_Y)

载入 (窗口1, , 真)


返回 (局_返回颜色值)


.窗口程序集 窗口程序集1, , , 

.程序集变量 集_框宽, 整数型, , , 
.程序集变量 集_框高, 整数型, , , 
.程序集变量 集_主体颜色组, 整数型, , "0", 
.程序集变量 集_主体块组, 块结构, , "0", 
.程序集变量 集_上次选中颜色值, 整数型, , , 
.程序集变量 集_自定义颜色块, 块结构, , "0", 
.程序集变量 集_上次选中块索引, 整数型, , , 
.程序集变量 匿名程序集变量_964, 空白型, , , 
.程序集变量 匿名程序集变量_966, 空白型, , , 
.程序集变量 集_画刷句柄_方块边框, 整数型, , , 
.程序集变量 匿名程序集变量_968, 空白型, , , 
.程序集变量 集_画刷句柄_方块选中外框, 整数型, , , 
.程序集变量 集_画刷句柄_方块选中内框, 整数型, , , 
.程序集变量 集_画笔句柄_分割线, 整数型, , , 
.程序集变量 集_画刷句柄_整框线, 整数型, , , 
.程序集变量 集_画刷句柄_白色, 整数型, , , 
.程序集变量 匿名程序集变量_954, 空白型, , , 
.子程序 _窗口1_创建完毕, 空白型, , 
赋值 (集_框高, 13)
赋值 (集_框宽, 13)
清除数组 (集_主体颜色组)
清除数组 (集_主体块组)
初始化颜色组 ()
初始化块组 ()
赋值 (集_画刷句柄_方块边框, CreateSolidBrush (取颜色值 (197, 197, 197)))
赋值 (集_画刷句柄_方块选中外框, CreateSolidBrush (取颜色值 (242, 148, 54)))
赋值 (集_画刷句柄_方块选中内框, CreateSolidBrush (取颜色值 (255, 226, 148)))
赋值 (集_画笔句柄_分割线, CreatePen (0, 1, 取颜色值 (197, 197, 197)))
赋值 (集_画刷句柄_整框线, CreateSolidBrush (取颜色值 (128, 128, 128)))
赋值 (集_画刷句柄_白色, CreateSolidBrush (#白色))

 ' 置外形图片 (#底图1, #品红)
窗口1.移动 (局_X, 局_Y, , )

.子程序 显示主体颜色块, 空白型, , 
.参数 参_选中块索引, 整数型, , 

.局部变量 私_HDC, 空白型, , , 
.局部变量 私_HmemDC, 空白型, , , 
.局部变量 私_HBrush, 整数型, , , 
.局部变量 私_Rect, Rect, , , 
.局部变量 私_Rect1, Rect, , , 
.局部变量 私_HScrBitmap_D, 整数型, , , 
.局部变量 私_HOldBitmap_D, 整数型, , , 
.局部变量 私_I, 整数型, , , 
.局部变量 私_HOldBrush, 整数型, , , 
.局部变量 私_HPen, 整数型, , , 
.局部变量 私_HOldpen, 整数型, , , 
.局部变量 私_Point, Point, , , 
.局部变量 私_AIP返回值, 整数型, , , 

赋值 (私_HDC, GetDC (窗口1.取窗口句柄 ())) ' 获取屏幕DC
赋值 (私_HmemDC, CreateCompatibleDC (私_HDC))

赋值 (私_HScrBitmap_D, CreateCompatibleBitmap (私_HDC, 窗口1., 窗口1.))
赋值 (私_HOldBitmap_D, SelectObject (私_HmemDC, 私_HScrBitmap_D)) ' 把位图选入临时内存DC


赋值 (私_HBrush, 集_画刷句柄_白色) ' 创建画刷
赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))




赋值 (私_Rect.x1, 0)
赋值 (私_Rect.y1, 0)
赋值 (私_Rect.x2, 窗口1.)
赋值 (私_Rect.y2, 窗口1.)
赋值 (私_AIP返回值, FillRect (私_HmemDC, 私_Rect, 私_HBrush))
.如果真 (等于 (私_AIP返回值, 0))
    调试输出 (“背景色刷白失败”)
.如果真结束

 ' 画小颜色块
.变量循环首 (1, 取数组成员数 (集_主体块组), 1, 私_I)
    
    赋值 (私_Rect.x1, 集_主体块组 [私_I], X)
    赋值 (私_Rect.y1, 集_主体块组 [私_I], Y)
    赋值 (私_Rect.x2, 相加 (集_主体块组 [私_I], X, 集_框宽))
    赋值 (私_Rect.y2, 相加 (集_主体块组 [私_I], Y, 集_框高))
    
    .如果真 (或者 (小于或等于 (私_I, 10), 大于 (私_I, 60)))
        赋值 (私_Rect1.x1, 私_Rect.x1)
        赋值 (私_Rect1.y1, 私_Rect.y1)
        赋值 (私_Rect1.x2, 私_Rect.x2)
        赋值 (私_Rect1.y2, 私_Rect.y2)
        
         ' 私_Rect1.x1 ＝ 私_Rect.x1 ＋ 1
         ' 私_Rect1.y1 ＝ 私_Rect.y1 ＋ 1
         ' 私_Rect1.x2 ＝ 私_Rect.x2 － 1
         ' 私_Rect1.y2 ＝ 私_Rect.y2 － 1
        
    .如果真结束
    
     ' 填充实心方块的大小
     ' 私_HBrush ＝ CreateSolidBrush (局_主体块组 [私_I].颜色值)  ' 创建画刷
    赋值 (私_HBrush, 集_主体块组 [私_I], 画笔句柄)
    赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
    赋值 (私_AIP返回值, FillRect (私_HmemDC, 私_Rect, 私_HBrush))
    
     ' 画颜色框边线色
    .如果真 (或者 (小于或等于 (私_I, 10), 大于 (私_I, 60)))
        赋值 (私_HBrush, 集_画刷句柄_方块边框) ' 创建画刷
        赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
        
        FrameRect (私_HmemDC, 私_Rect1, 私_HBrush) ' 填充边框方块的大小
        
    .如果真结束
    
.变量循环尾 ()

 ' 填充下面50个方块的边框
赋值 (私_HBrush, 集_画刷句柄_整框线) ' 创建画刷
赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))

 ' 画整个边框
赋值 (私_Rect1.x1, 0)
赋值 (私_Rect1.y1, 0)
赋值 (私_Rect1.x2, 窗口1.)
赋值 (私_Rect1.y2, 窗口1.)
FrameRect (私_HmemDC, 私_Rect1, 私_HBrush) ' 填充边框方块的大小

.变量循环首 (1, 10, 1, 私_I)
    赋值 (私_Rect1.x1, 集_主体块组 [相加 (私_I, 10)].X)
    赋值 (私_Rect1.y1, 集_主体块组 [相加 (私_I, 10)].Y)
    赋值 (私_Rect1.x2, 相加 (私_Rect1.x1, 集_框宽))
    赋值 (私_Rect1.y2, 相减 (相加 (私_Rect1.y1, 相乘 (集_框高, 5)), 4))
    FrameRect (私_HmemDC, 私_Rect1, 私_HBrush) ' 填充边框方块的大小
.变量循环尾 ()

.如果真 (不等于 (参_选中块索引, 0))
     ' 画选中外框
    赋值 (私_HBrush, 集_画刷句柄_方块选中外框) ' 创建画刷
    赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
    赋值 (私_Rect.x1, 集_主体块组 [参_选中块索引], X)
    赋值 (私_Rect.y1, 集_主体块组 [参_选中块索引], Y)
    赋值 (私_Rect.x2, 相加 (私_Rect.x1, 集_框宽))
    赋值 (私_Rect.y2, 相加 (私_Rect.y1, 集_框高))
    FrameRect (私_HmemDC, 私_Rect, 私_HBrush) ' 填充边框方块的大小
     ' 调试输出 (“私_Rect.x1:” ＋ 到文本 (私_Rect.x1) ＋ “ 私_Rect.y1: ” ＋ 到文本 (私_Rect.y1) ＋ “ 私_Rect.x2 : ” ＋ 到文本 (私_Rect.x2) ＋ “ 私_Rect.y2: ” ＋ 到文本 (私_Rect.y2))
    
     ' 画选中内框
    赋值 (私_HBrush, 集_画刷句柄_方块选中内框) ' 创建画刷
    赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
    赋值 (私_Rect.x1, 相加 (集_主体块组 [参_选中块索引], X, 1))
    赋值 (私_Rect.y1, 相加 (集_主体块组 [参_选中块索引], Y, 1))
    赋值 (私_Rect.x2, 相减 (相加 (私_Rect.x1, 集_框宽), 2))
    赋值 (私_Rect.y2, 相减 (相加 (私_Rect.y1, 集_框高), 2))
    FrameRect (私_HmemDC, 私_Rect, 私_HBrush) ' 填充边框方块的大小
    
.如果真结束

.如果真 (不等于 (集_上次选中块索引, 0))
     ' 画选中外框
    赋值 (私_HBrush, 集_画刷句柄_方块选中外框) ' 创建画刷
    赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
    赋值 (私_Rect.x1, 集_主体块组 [集_上次选中块索引], X)
    赋值 (私_Rect.y1, 集_主体块组 [集_上次选中块索引], Y)
    赋值 (私_Rect.x2, 相加 (私_Rect.x1, 集_框宽))
    赋值 (私_Rect.y2, 相加 (私_Rect.y1, 集_框高))
    FrameRect (私_HmemDC, 私_Rect, 私_HBrush) ' 填充边框方块的大小
     ' 调试输出 (“私_Rect.x1:” ＋ 到文本 (私_Rect.x1) ＋ “ 私_Rect.y1: ” ＋ 到文本 (私_Rect.y1) ＋ “ 私_Rect.x2 : ” ＋ 到文本 (私_Rect.x2) ＋ “ 私_Rect.y2: ” ＋ 到文本 (私_Rect.y2))
    
     ' 画选中内框
    赋值 (私_HBrush, 集_画刷句柄_方块选中内框) ' 创建画刷
    赋值 (私_HOldBrush, SelectObject (私_HmemDC, 私_HBrush))
    赋值 (私_Rect.x1, 相加 (集_主体块组 [集_上次选中块索引], X, 1))
    赋值 (私_Rect.y1, 相加 (集_主体块组 [集_上次选中块索引], Y, 1))
    赋值 (私_Rect.x2, 相减 (相加 (私_Rect.x1, 集_框宽), 2))
    赋值 (私_Rect.y2, 相减 (相加 (私_Rect.y1, 集_框高), 2))
    FrameRect (私_HmemDC, 私_Rect, 私_HBrush) ' 填充边框方块的大小
    
.如果真结束


 ' 画分割线
赋值 (私_HPen, 集_画笔句柄_分割线)
赋值 (私_HOldpen, SelectObject (私_HmemDC, 私_HPen))

MoveToEx (私_HmemDC, .左边, 相加 (.顶边, .高度), 私_Point)
LineTo (私_HmemDC, 相减 (相加 (.左边, .宽度), 1), 相加 (.顶边, .高度))

MoveToEx (私_HmemDC, .左边, 相加 (.顶边, .高度), 私_Point)
LineTo (私_HmemDC, 相减 (相加 (.左边, .宽度), 1), 相加 (.顶边, .高度))

MoveToEx (私_HmemDC, ., 相减 (., 1), 私_Point)
LineTo (私_HmemDC, 相减 (相加 (., .), 1), 相减 (., 1))



赋值 (私_AIP返回值, BitBlt (私_HDC, 0, 0, 窗口1., 窗口1., 私_HmemDC, 0, 0, #SRCCOPY))
.如果真 (等于 (私_AIP返回值, 0))
    调试输出 (“BitBlt失败”)
.如果真结束

SelectObject (私_HmemDC, 私_HOldBitmap_D)
SelectObject (私_HmemDC, 私_HOldBrush)
 ' DeleteObject (私_HBrush)
DeleteDC (私_HmemDC)
ReleaseDC (窗口1.取窗口句柄 (), 私_HDC)
延时 (50)

.子程序 _窗口1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 私_值, 整数型, , , 

赋值 (私_值, 是否在块内 (横向位置, 纵向位置))
.如果真 (不等于 (私_值, 0))
    赋值 (集_上次选中块索引, 私_值)
    赋值 (局_返回颜色值, 集_主体块组 [私_值], 颜色值)
    销毁 ()
.如果真结束


.子程序 是否在块内, 整数型, , 
.参数 参_横, 空白型, , 
.参数 参_纵, 空白型, , 

.局部变量 私_I, 整数型, , , 
.局部变量 私_返回值, 整数型, , , 

赋值 (私_返回值, 0)
.变量循环首 (1, 取数组成员数 (集_主体块组), 1, 私_I)
    .如果真 (并且 (大于或等于 (参_横, 集_主体块组 [私_I], X), 小于或等于 (参_横, 相加 (集_主体块组 [私_I], X, 集_框宽)), 大于或等于 (参_纵, 集_主体块组 [私_I], Y), 小于或等于 (参_纵, 相加 (集_主体块组 [私_I], Y, 集_框高))))
        赋值 (私_返回值, 私_I)
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

返回 (私_返回值)


.子程序 _窗口1_首次激活, 空白型, , 
显示主体颜色块 (集_上次选中块索引)


.子程序 _窗口1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 私_值, 整数型, , , 

赋值 (私_值, 是否在块内 (横向位置, 纵向位置))
 ' 输出调试文本 (私_值)
显示主体颜色块 (私_值)
 ' .如果 (并且 (大于或等于 (横向位置, .左边), 小于或等于 (横向位置, 相加 (.左边, .宽度)), 大于或等于 (纵向位置, .顶边), 小于或等于 (纵向位置, 相加 (.顶边, .高度))))
     ' 自动画板.底图 ＝ #自动图2
    
.否则
     ' 自动画板.底图 ＝ #自动图1
.如果结束



.子程序 _超级按钮1_被单击, 空白型, , 
信息框 (“  还没有代码呢!     ”, 0, )

.子程序 _超级按钮2_被单击, 空白型, , 
赋值 (集_上次选中块索引, 2)
赋值 (局_返回颜色值, 集_主体块组 [2].颜色值)
销毁 ()


.子程序 初始化颜色组, 空白型, , 
加入成员 (集_主体颜色组, 取颜色值 (255, 255, 255))
加入成员 (集_主体颜色组, 取颜色值 (0, 0, 0))
加入成员 (集_主体颜色组, 取颜色值 (238, 236, 225))
加入成员 (集_主体颜色组, 取颜色值 (31, 73, 125))
加入成员 (集_主体颜色组, 取颜色值 (79, 129, 189))
加入成员 (集_主体颜色组, 取颜色值 (192, 80, 77))
加入成员 (集_主体颜色组, 取颜色值 (155, 187, 89))
加入成员 (集_主体颜色组, 取颜色值 (128, 100, 162))
加入成员 (集_主体颜色组, 取颜色值 (75, 172, 198))
加入成员 (集_主体颜色组, 取颜色值 (247, 150, 70))


加入成员 (集_主体颜色组, 取颜色值 (242, 242, 242))
加入成员 (集_主体颜色组, 取颜色值 (127, 127, 127))
加入成员 (集_主体颜色组, 取颜色值 (221, 217, 195))
加入成员 (集_主体颜色组, 取颜色值 (198, 217, 240))
加入成员 (集_主体颜色组, 取颜色值 (219, 229, 241))
加入成员 (集_主体颜色组, 取颜色值 (242, 220, 219))
加入成员 (集_主体颜色组, 取颜色值 (235, 241, 221))
加入成员 (集_主体颜色组, 取颜色值 (229, 224, 236))
加入成员 (集_主体颜色组, 取颜色值 (219, 238, 243))
加入成员 (集_主体颜色组, 取颜色值 (253, 234, 218))

加入成员 (集_主体颜色组, 取颜色值 (216, 216, 216))
加入成员 (集_主体颜色组, 取颜色值 (89, 89, 89))
加入成员 (集_主体颜色组, 取颜色值 (196, 189, 151))
加入成员 (集_主体颜色组, 取颜色值 (141, 179, 226))
加入成员 (集_主体颜色组, 取颜色值 (184, 204, 228))
加入成员 (集_主体颜色组, 取颜色值 (229, 185, 183))
加入成员 (集_主体颜色组, 取颜色值 (215, 227, 188))
加入成员 (集_主体颜色组, 取颜色值 (204, 193, 217))
加入成员 (集_主体颜色组, 取颜色值 (183, 221, 232))
加入成员 (集_主体颜色组, 取颜色值 (251, 213, 181))

加入成员 (集_主体颜色组, 取颜色值 (191, 191, 191))
加入成员 (集_主体颜色组, 取颜色值 (63, 63, 63))
加入成员 (集_主体颜色组, 取颜色值 (147, 137, 83))
加入成员 (集_主体颜色组, 取颜色值 (84, 141, 212))
加入成员 (集_主体颜色组, 取颜色值 (149, 179, 215))
加入成员 (集_主体颜色组, 取颜色值 (217, 150, 148))
加入成员 (集_主体颜色组, 取颜色值 (195, 214, 155))
加入成员 (集_主体颜色组, 取颜色值 (178, 162, 199))
加入成员 (集_主体颜色组, 取颜色值 (146, 205, 220))
加入成员 (集_主体颜色组, 取颜色值 (250, 192, 143))

加入成员 (集_主体颜色组, 取颜色值 (165, 165, 165))
加入成员 (集_主体颜色组, 取颜色值 (38, 38, 38))
加入成员 (集_主体颜色组, 取颜色值 (73, 68, 41))
加入成员 (集_主体颜色组, 取颜色值 (23, 54, 93))
加入成员 (集_主体颜色组, 取颜色值 (54, 96, 146))
加入成员 (集_主体颜色组, 取颜色值 (149, 55, 52))
加入成员 (集_主体颜色组, 取颜色值 (118, 146, 60))
加入成员 (集_主体颜色组, 取颜色值 (95, 73, 122))
加入成员 (集_主体颜色组, 取颜色值 (49, 133, 155))
加入成员 (集_主体颜色组, 取颜色值 (227, 108, 9))


加入成员 (集_主体颜色组, 取颜色值 (127, 127, 127))
加入成员 (集_主体颜色组, 取颜色值 (12, 12, 12))
加入成员 (集_主体颜色组, 取颜色值 (29, 27, 16))
加入成员 (集_主体颜色组, 取颜色值 (15, 36, 62))
加入成员 (集_主体颜色组, 取颜色值 (36, 64, 97))
加入成员 (集_主体颜色组, 取颜色值 (99, 36, 35))
加入成员 (集_主体颜色组, 取颜色值 (79, 97, 40))
加入成员 (集_主体颜色组, 取颜色值 (63, 49, 81))
加入成员 (集_主体颜色组, 取颜色值 (32, 88, 103))
加入成员 (集_主体颜色组, 取颜色值 (151, 72, 6))


加入成员 (集_主体颜色组, 取颜色值 (192, 0, 0))
加入成员 (集_主体颜色组, 取颜色值 (255, 0, 0))
加入成员 (集_主体颜色组, 取颜色值 (255, 192, 0))
加入成员 (集_主体颜色组, 取颜色值 (255, 255, 0))
加入成员 (集_主体颜色组, 取颜色值 (146, 208, 80))
加入成员 (集_主体颜色组, 取颜色值 (0, 176, 80))
加入成员 (集_主体颜色组, 取颜色值 (0, 176, 240))
加入成员 (集_主体颜色组, 取颜色值 (0, 112, 192))
加入成员 (集_主体颜色组, 取颜色值 (0, 32, 96))
加入成员 (集_主体颜色组, 取颜色值 (112, 48, 160))


.子程序 初始化块组, 空白型, , 
.局部变量 私_I, 整数型, , , 
.局部变量 私_块, 块结构, , , 
.局部变量 私_临时值, 整数型, , , 
.局部变量 私_临时值1, 整数型, , , 

.变量循环首 (1, 10, 1, 私_I)
    赋值 (私_块.X, 相加 (4, 相乘 (相减 (私_I, 1), 相加 (集_框宽, 4))))
    赋值 (私_块.Y, 54)
    赋值 (私_块.颜色值, 集_主体颜色组 [私_I])
    赋值 (私_块.画笔句柄, CreateSolidBrush (私_块.颜色值))
    加入成员 (集_主体块组, 私_块)
.变量循环尾 ()


.变量循环首 (1, 50, 1, 私_I)
    赋值 (私_临时值, 求余数 (私_I, 10))
    赋值 (私_临时值, 相减 (选择 (等于 (私_临时值, 0), 10, 私_临时值), 1))
    赋值 (私_临时值1, 相加 (取整 (相除 (私_I, 10)), 1))
    赋值 (私_临时值1, 选择 (等于 (求余数 (私_I, 10), 0), 相减 (私_临时值1, 1), 私_临时值1))
    
    赋值 (私_块.X, 相加 (4, 相乘 (私_临时值, 相加 (集_框宽, 4))))
    赋值 (私_块.Y, 相加 (60, 相乘 (私_临时值1, 相减 (集_框高, 1))))
    赋值 (私_块.颜色值, 集_主体颜色组 [相加 (私_I, 10)])
    赋值 (私_块.画笔句柄, CreateSolidBrush (私_块.颜色值))
    加入成员 (集_主体块组, 私_块)
    
.变量循环尾 ()


.变量循环首 (1, 10, 1, 私_I)
    赋值 (私_块.X, 相加 (4, 相乘 (相减 (私_I, 1), 相加 (集_框宽, 4))))
    赋值 (私_块.Y, 164)
    赋值 (私_块.颜色值, 集_主体颜色组 [相加 (私_I, 60)])
    赋值 (私_块.画笔句柄, CreateSolidBrush (私_块.颜色值))
    
    加入成员 (集_主体块组, 私_块)
.变量循环尾 ()


.子程序 _窗口1_将被销毁, 空白型, , 
.局部变量 私_I, 整数型, , , 

.变量循环首 (1, 取数组成员数 (集_主体块组), 1, 私_I)
    DeleteObject (集_主体块组 [私_I], 画笔句柄)
.变量循环尾 ()
DeleteObject (集_画刷句柄_白色)
DeleteObject (集_画笔句柄_分割线)
DeleteObject (集_画刷句柄_整框线)
DeleteObject (集_画刷句柄_方块边框)
DeleteObject (集_画刷句柄_方块选中外框)
DeleteObject (集_画刷句柄_方块选中内框)


.窗口程序集 窗口程序集2, , , 

.子程序 _按钮1_被单击, 空白型, , 
赋值 (.背景颜色, 选择颜色 (取鼠标水平位置 (), 取鼠标垂直位置 ()))



 ' 不属于任何一个程序集、类模块的函数：
