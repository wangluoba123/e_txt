 ' 文件类型：Windows窗口程序

 ' 程序名称：域名解析工具
 ' 程序描述：域名解析工具
@备注:
域名解析工具
 ' 程序作者：为你心冻
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 343
    高度 = 293
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “域名解析”
    帮助文件名 = “”



.常量 STARTF_USESHOWWINDOW, "1", , 
.常量 STARTF_USESTDHANDLES, "256", , 
.常量 STILL_ACTIVE, "259", , 
.常量 SW_HIDE, "0", , 隐藏,并且任务栏也没有最小化图标


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 STARTUPINFO, , 
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 文本型, , , 
    .成员 lpDesktop, 文本型, , , 
    .成员 lpTitle, 文本型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 SECURITY_ATTRIBUTES, , 
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 PROCESS_INFORMATION, , 
    .成员 hProcess, 整数型, , , 
    .成员 hThread, 整数型, , , 
    .成员 dwProcessId, 整数型, , , 
    .成员 dwThreadId, 整数型, , , 

数据类型 传递参数, , 
    .成员 hMemFile, 整数型, , , 
    .成员 MissWho, 文本型, , , 
    .成员 完整网址, 文本型, , , 
    .成员 访问方式, 文本型, , , 
    .成员 代理地址, 文本型, , , 
    .成员 用户名, 文本型, , , 
    .成员 密码, 文本型, , , 
    .成员 附加协议头, 文本型, , , 
    .成员 提交信息, 文本型, , , 

数据类型 POINTAPI, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 


.DLL命令 CreateProcess, 整数型, "", "CreateProcessA", 公开, 
    .参数 lpApplicationName, 整数型, , 
    .参数 lpCommandLine, 文本型, , 
    .参数 lpProcessAttributes, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 bInheritHandles, 逻辑型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 
    .参数 lpCurrentDriectory, 整数型, , 
    .参数 lpStartupInfo, STARTUPINFO, 传址, 
    .参数 lpProcessInformation, PROCESS_INFORMATION, 传址, 

.DLL命令 CreatePipe, 整数型, "", "CreatePipe", 公开, 
    .参数 phReadPipe, 整数型, 传址, 
    .参数 phWritePipe, 整数型, 传址, 
    .参数 lpPipeAttributes, SECURITY_ATTRIBUTES, 传址, 
    .参数 nSize, 整数型, , 

.DLL命令 ReadFile, 整数型, "", "ReadFile", 公开, 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nNumberOfBytesToRead, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, , 

.DLL命令 CloseHandle, 整数型, "", "CloseHandle", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 PeekNamedPipe, 整数型, "", "PeekNamedPipe", 公开, 
    .参数 hNamedPipe, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nBufferSize, 整数型, , 
    .参数 lpBytesRead, 整数型, , 
    .参数 lpTotalBytesAvail, 整数型, 传址, 
    .参数 lpBytesLeftThisMessage, 整数型, , 

.DLL命令 GetExitCodeProcess, 整数型, "", "GetExitCodeProcess", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 ShowWindow, 整数型, "user32", "ShowWindow", , 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 nCmdShow, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;SW_HIDE：隐藏窗口，活动状态给令一个窗口;SW_MINIMIZE：最小化窗口，活动状态给令一个窗口;SW_RESTORE：用原来的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOW：用当前的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOWMAXIMIZED：最大化窗口，并将其激活;SW_SHOWMINIMIZED：最小化窗口，并将其激活;SW_SHOWMINNOACTIVE：最小化一个窗口，同时不改变活动窗口;SW_SHOWNA：用当前的大小和位置显示一个窗口，不改变活动窗口;SW_SHOWNOACTIVATE：用最近的大小和位置显示一个窗口，同时不改变活动窗口;SW_SHOWNORMAL：与SW_RESTORE相同;

.DLL命令 CreateThread, 整数型, "", "CreateThread", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 VarPtr, 整数型, "", "lstrcatA", , 
    .参数 lpString1, 传递参数, 传址, 
    .参数 lpString2, 整数型, 传址, 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "MsgWaitForMultipleObjects", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 bWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 PeekMessageA, 逻辑型, "", "PeekMessageA", , 
    .参数 lpMsg, 整数型, 传址 数组, 
    .参数 hWnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 wRemoveMsg, 整数型, , 

.DLL命令 GetCurrentThreadId, 整数型, "", "GetCurrentThreadId", , 

.DLL命令 TranslateMessage_MSG, 整数型, "user32", "TranslateMessage", , 
    .参数 lpMsg, MSG, , 

.DLL命令 TranslateMessage_整数, 逻辑型, "", "TranslateMessage", , 
    .参数 lpMsg, 整数型, 传址 数组, 

.DLL命令 DispatchMessageA, 整数型, "", "DispatchMessageA", , 
    .参数 lpMsg, 整数型, 传址 数组, 

.DLL命令 TerminateThread, 逻辑型, "", "TerminateThread", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 RtlMoveMemory_传递参数, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 传递参数, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "InternetOpenA", , 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "InternetConnectA", , 
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "InternetCloseHandle", , 
    .参数 hInternet, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "HttpOpenRequestA", , 
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "HttpSendRequestA", , 
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 文本型, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "InternetReadFile", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "WinINet.dll", "HttpQueryInfoA", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 文本型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 InternetSetCookieA, 逻辑型, "WinINet.dll", "InternetSetCookieA", , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszCookieName, 文本型, , 
    .参数 lpszCookieData, 文本型, , 

.DLL命令 CreateFileA, 整数型, "", "CreateFileA", , 可打开和创建文件、管道、邮槽、通信服务、设备以及控制台，如执行成功，则返回文件句柄。
    .参数 lpFileName, 文本型, , 要打开的文件的名字
    .参数 dwDesiredAccess, 整数型, , 读2147483648，写1073741824
    .参数 dwShareMode, 整数型, , 0，不允许共享；1，允许读共享；2，允许写共享；1+2允许读写
    .参数 lpSecurityAttributes, 整数型, , 0
    .参数 dwCreationDisposition, 整数型, , 
    .参数 dwFlagsAndAttributes, 整数型, , 134217728
    .参数 hTemplateFile, 整数型, , 0

.DLL命令 CreateFileMappingA, 整数型, "", "CreateFileMappingA", , 
    .参数 hFile, 整数型, , CreateFileA()返回的句柄,-1表示映射虚拟文件，没有物理文件
    .参数 lpFileMappingAttributes, 整数型, , 0
    .参数 flProtect, 整数型, , 2读，4读写
    .参数 dwMaximumSizeHigh, 整数型, , 0
    .参数 dwMaximumSizeLow, 整数型, , 0
    .参数 lpName, 文本型, , 

.DLL命令 MapViewOfFile, 整数型, "", "MapViewOfFile", , 
    .参数 hFileMappingObject, 整数型, , CreateFileMappingA()取得
    .参数 dwDesiredAccess, 整数型, , 2，写；4，读；2+4，读写
    .参数 dwFileOffsetHigh, 整数型, , 文件映射的最大长度
    .参数 dwFileOffsetLow, 整数型, , 文件映射的最小长度
    .参数 dwNumberOfBytesToMap, 整数型, , 映射长度

.DLL命令 CopyMemory, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 字节集, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 UnmapViewOfFile, 逻辑型, "", "UnmapViewOfFile", , 
    .参数 lpBaseAddress, 整数型, , 

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 动态调用子程序_整数, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 StrToInt, 整数型, "shlwapi.dll", "StrToIntA", , 文本到整数
    .参数 lpSrc, 文本型, , 

.DLL命令 LocalAlloc, 整数型, "", "LocalAlloc", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 LocalFree, 整数型, "", "LocalFree", , 
    .参数 hMem, 整数型, , 

.DLL命令 lstrlen, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 文本, 文本型, , Ptr

.DLL命令 CharUpper, 文本型, "", "CharUpperA", , 
    .参数 str, 文本型, , 

.DLL命令 CharLower, 文本型, "", "CharLowerA", , 
    .参数 str, 文本型, , 

.DLL命令 lstrcpyn_字节集, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_字节型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 PeekMessage, 整数型, "user32", "PeekMessageA", , 
    .参数 lpMsg, MSG, , 
    .参数 句柄, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 wRemoveMsg, 整数型, , 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 
    .参数 lpMsg, MSG, , 

.DLL命令 MessageBox, 整数型, "user32", "MessageBoxA", , 建立消息框窗体
    .参数 hwnd, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 lpCaption, 文本型, , 
    .参数 wType, 整数型, , 

.DLL命令 GetActiveWindow, 整数型, "user32", "GetActiveWindow", , 获得活动窗口的句柄

.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 正则, 正则表达式, , , 
.局部变量 文本, 文本型, , , 

 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

赋值 (., 真)
赋值 (., 真)
.如果真 (等于 (., “”))
    赋值 (文本, 字节集到文本 (HTTP读文件 (“http://www.ip138.com/ip2city.asp”, “POST”)))
    赋值 (文本, 文本_取中间 (文本, 相加 (文本_寻找文本 (文本, “[”, , 假), 1), 相减 (文本_寻找文本 (文本, “]”, , 假), 文本_寻找文本 (文本, “[”, , 假), 1)))
    赋值 (., 文本)
.如果真结束
赋值 (., “”)
Ping (., )
正则.创建 (“Ping statistics for (.*?):”, 假, 真)
正则.匹配 (“test”)
正则.搜索全部 (.)
赋值 (., 正则.取子匹配文本 (1, 1))
赋值 (., 假)
赋值 (., 假)
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 文本, 文本型, , , 

赋值 (文本, 字节集到文本 (HTTP读文件 (“http://www.ip138.com/ip2city.asp”, “POST”)))
赋值 (文本, 文本_取中间 (文本, 相加 (文本_寻找文本 (文本, “[”, , 假), 1), 相减 (文本_寻找文本 (文本, “]”, , 假), 文本_寻找文本 (文本, “[”, , 假), 1)))
赋值 (., 文本)
获取焦点 ()

.子程序 Ping, 文本型, , 可以选返回也可以传值
.参数 IP或域名, 文本型, , 
.参数 IP_编辑框, 编辑框, 参考 可空, 

.局部变量 SECURITY_ATTRIBUTES, SECURITY_ATTRIBUTES, , , 
.局部变量 STARTUPINFO, STARTUPINFO, , , 
.局部变量 PROCESS_INFORMATION, PROCESS_INFORMATION, , , 
.局部变量 hWrite, 整数型, , , 
.局部变量 hRead, 整数型, , , 
.局部变量 txt, 字节集, , , 
.局部变量 len, 整数型, , , 
.局部变量 EXIT, 整数型, , , 
.局部变量 返回IP, 文本型, , , 

赋值 (SECURITY_ATTRIBUTES.nLength, 12)
赋值 (SECURITY_ATTRIBUTES.lpSecurityDescriptor, 0)
赋值 (SECURITY_ATTRIBUTES.bInheritHandle, -1)
CreatePipe (hRead, hWrite, SECURITY_ATTRIBUTES, 0) ' 创建一个匿名管道
赋值 (STARTUPINFO.cb, 68)
赋值 (STARTUPINFO.dwFlags, 位或 (#STARTF_USESHOWWINDOW, #STARTF_USESTDHANDLES))
赋值 (STARTUPINFO.wShowWindow, #SW_HIDE)
赋值 (STARTUPINFO.hStdOutput, hWrite)
赋值 (STARTUPINFO.hStdError, hWrite)
CreateProcess (0, 相加 (“ping ”, IP或域名), 0, 0, 真, 0, 0, 0, STARTUPINFO, PROCESS_INFORMATION)
.判断循环首 (不等于 (len, -1))
    PeekNamedPipe (hRead, 0, 0, 0, len, 0) ' 查看管道中是否有数据
    .如果 (不等于 (len, 0))
        赋值 (txt, 字节集_取空白 (1024))
        ReadFile (hRead, txt, 1023, len, 0) ' 从管道中读取数据
        赋值 (返回IP, 相加 (返回IP, 字节集到文本 (txt)))
        .如果真 (等于 (是否为空 (IP_编辑框), 假))
            赋值 (IP_编辑框., 返回IP)
        .如果真结束
         ' 本源码来自易语言资源网(www.wodesoft.com)
    .否则
        GetExitCodeProcess (PROCESS_INFORMATION.hProcess, EXIT) ' 查看指定进程是否已结束
        .如果真 (不等于 (EXIT, #STILL_ACTIVE)) ' 因为会有程序退出来了，但管道中还有数据的情况，所以必须在管道中没有数据的情况下判断程序是否已结束，这时才能中止循环！
            CloseHandle (hRead) ' 关闭管道
            跳出循环 ()
        .如果真结束
        
    .如果结束
    API_处理事件 ()
    .如果真 (大于 (len, 1023))
        API_信息框 (“超出范围”, 0, )
    .如果真结束
    
.判断循环尾 ()
返回 (返回IP)

.子程序 HTTP读文件, 字节集, , 
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 单位秒，默认90
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 内存映射地址, 整数型, , , 内存映射地址
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 
.局部变量 lpBody, 字节集, , , 
.局部变量 传递参数, 传递参数, 静态, , 
.局部变量 映像文件句柄, 整数型, , , 
.局部变量 读取字节长度_字节集, 字节集, , , 
.局部变量 lpBody读取字节长度, 整数型, , , 
.局部变量 Msg, 整数型, , "7", MSG结构体28长度,4个整数成员

赋值 (映像文件句柄, 创建映射文件 (假, 0, 相乘 (6, 1024, 1024), “访问网页_斩月”)) ' 申请6M内存  过大无法释放  造成内存过低错误
赋值 (内存映射地址, 映射到内存 (映像文件句柄, 0, 相乘 (6, 1024, 1024), 假))
赋值 (传递参数.hMemFile, 内存映射地址)
赋值 (传递参数.MissWho, “MissWho”)
赋值 (传递参数.完整网址, 完整网址)
赋值 (传递参数.访问方式, 访问方式)
赋值 (传递参数.代理地址, 代理地址)
赋值 (传递参数.用户名, 用户名)
赋值 (传递参数.密码, 密码)
赋值 (传递参数.附加协议头, 附加协议头)
赋值 (传递参数.提交信息, 提交信息)
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
.如果真 (或者 (是否为空 (超时值), 等于 (超时值, 0)))
    赋值 (超时值, 90)
.如果真结束
赋值 (hThread, CreateThread (0, 0, &HTTP_ReadFile, VarPtr (传递参数, 0), 0, 0))
.循环判断首 ()
    赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
    .判断循环首 (并且 (PeekMessageA (Msg, 0, 0, 0, 0), 不等于 (Msg [2], 18), 不等于 (Msg [2], 位或 (65536, 18, GetCurrentThreadId ()))))
         ' 调用PeekMessageA (Msg, 0, 0, 0, 0)
         ' 仅仅查看是否为QUIT消息，如果是将不处理，直接跳出，让系统处理。
        PeekMessageA (Msg, 0, 0, 0, 1)
         ' 如果不是，将调用[PeekMessageA (Msg, 0, 0, 0, 1)]取出消息，并且处理。
        TranslateMessage_整数 (Msg)
        DispatchMessageA (Msg)
    .判断循环尾 ()
.循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258), 不等于 (Msg [2], 18), 不等于 (Msg [2], 位或 (65536, 18, GetCurrentThreadId ()))))
TerminateThread (hThread, 0)
CloseHandle (hThread)
赋值 (读取字节长度_字节集, 读字节集数据 (内存映射地址, 0, 256))
赋值 (lpBody读取字节长度, 字节集到整数 (读取字节长度_字节集))
赋值 (szFlag, 字节集到文本 (读字节集数据 (内存映射地址, 256, 256)))
赋值 (szRequest, 字节集到文本 (读字节集数据 (内存映射地址, 512, 1024)))
赋值 (lpBody, 读字节集数据 (内存映射地址, 1536, lpBody读取字节长度))
解除映射 (内存映射地址)
关闭映射文件 (映像文件句柄)
.如果真 (或者 (不等于 (文本_取左边 (szFlag, 10), “MissWho_OK”), 等于 (ret, 258)))
    赋值 (lpBody, {  })
.如果真结束
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束
返回 (lpBody)

.子程序 HTTP_ReadFile, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 
.局部变量 传递参数, 传递参数, 静态, , 
.局部变量 hMemBody总长度, 整数型, , , 
.局部变量 内存映射地址, 整数型, , , 
.局部变量 szRequest长度, 整数型, , , 
.局部变量 lpBody, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 

RtlMoveMemory_传递参数 (传递参数, hMemFile, 相乘 (9, 4))
赋值 (szFlag, 传递参数.MissWho)
.如果真 (不等于 (szFlag, “MissWho”))
    返回 (假)
.如果真结束
赋值 (内存映射地址, 传递参数.hMemFile)
.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
赋值 (szFullAddr, 传递参数.完整网址)
赋值 (szVerb, 传递参数.访问方式)
赋值 (szProxyServer, 传递参数.代理地址)
赋值 (szUserName, 传递参数.用户名)
赋值 (szPassword, 传递参数.密码)
赋值 (szHeaders, 传递参数.附加协议头)
赋值 (szSendBody, 传递参数.提交信息)
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (szProxyServer, “”))
 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 文本_字符 (0)), 文本_字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 (假)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (szUserName, “”), szUserName, 文本_字符 (0)), 选择 (不等于 (szPassword, “”), szPassword, 文本_字符 (0)), 3, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 文本_字符 (0), 文本_字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束
 ' 补充协议头
.如果真 (等于 (文本_寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (文本_寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (文本_寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束
 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (文本_到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 文本_取长度 (szHeaders), 文本_字符 (0), 0)
.判断 (等于 (文本_到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (文本_寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 整数到文本 (文本_取长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 文本_取长度 (szHeaders), szSendBody, 文本_取长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.判断结束
 ' 读取页面数据
赋值 (hMemBody总长度, 0)
 ' 写数据 (内存映射地址, 0, 字节集_整数到字节集 (0))
.循环判断首 ()
    赋值 (lpBuffer, 字节集_取空白 (512))
    InternetReadFile (hRequest, lpBuffer, 512, dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写数据 (内存映射地址, 相加 (1536, hMemBody总长度), 字节集_取左边 (lpBuffer, dwNumber))
    赋值 (hMemBody总长度, 相加 (hMemBody总长度, dwNumber))
.循环判断尾 (不等于 (dwNumber, 0))
 ' 取服务器回传协议头
赋值 (szRequest, 文本_取空白 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)
写数据 (内存映射地址, 0, 整数到字节集 (hMemBody总长度))
写数据 (内存映射地址, 256, 文本到字节集 (“MissWho_OK”))
写数据 (内存映射地址, 512, 文本到字节集 (szRequest))
 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)
 ' 输出调试文本 (szRequest)
 ' 设置COOKIE
.如果真 (大于 (文本_寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
     ' 输出调试文本 (szRequest)
    .循环判断首 ()
        赋值 (a, 文本_寻找文本 (szRequest, “Set-Cookie: ”, b, 真))
        赋值 (b, 文本_寻找文本 (szRequest, #换行符, a, 真))
        赋值 (szPageAddr, 文本_取中间 (szRequest, a, 相减 (b, a)))
         ' 输出调试文本 (szPageAddr)
        .如果真 (大于 (文本_寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本_替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 文本_寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 文本_取左边 (szPageAddr, 相减 (hRequest, 1)), 文本_取右边 (szPageAddr, 相减 (文本_取长度 (szPageAddr), hRequest)))
        .如果真结束
         ' 本源码来自易语言资源网(www.wodesoft.com)
    .循环判断尾 (大于 (a, -1))
.如果真结束
返回 (真)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber, 选择 (等于 (文本_寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (文本_寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 文本_取中间 (szServerName, dwNumber, 选择 (等于 (文本_寻找文本 (szServerName, “/”, dwNumber, 假), -1), 文本_取长度 (szServerName), 相减 (文本_寻找文本 (szServerName, “/”, dwNumber, 假), dwNumber)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber, 文本_寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber, -1))
        赋值 (szServerName, 文本_取左边 (szServerName, 相减 (dwNumber, 1)))
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.如果真结束
返回 (文本_到小写 (szServerName))

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 文本_寻找文本 (网址, “/”, 文本_寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 文本_取右边 (网址, 相加 (相减 (文本_取长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber, 文本_寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber, 选择 (等于 (dwNumber, -1), 80, 文本到整数 (文本_取右边 (szServerName, 相减 (文本_取长度 (szServerName), dwNumber)))))
返回 (dwNumber)

.子程序 创建映射文件, 整数型, , 创建内存映射文件。返回映像文件句柄
.参数 文件名称, 文本型, 可空, 欲创建内存映射文件的文件全路径名称。如果为空则不对应实际文件，可以做进程间共享内存，通过共享名称来访问。
.参数 是否创建, 逻辑型, , 是打开一个已经存在的文件还是创建一个新文件。真代表创建一个新文件，假代表打开一个已经存在的文件。
.参数 文件大小高位, 长整数型, , 欲创建内存映射文件的文件大小。如果是超大文件，请设置高位和低位，否则只要设置低位，高位设为0即可。
.参数 文件大小低位, 长整数型, , 欲创建内存映射文件的文件大小。如果是打开一个已经存在的文件，可以指定高位和低位的值为0，表示创建的内存映射文件大小和文件本身大小是一致的。
.参数 名称, 文本型, 可空, 可以被省略。创建内存映射文件的名称，该参数可以为空，表示创建一个没有名称的内存映射文件。其他进程可以通过该名称打开内存映射文件。

.局部变量 方式, 整数型, , , 
.局部变量 hFile, 整数型, , , 
.局部变量 hFileMapping, 整数型, , , 

.如果 (是否为空 (文件名称))
    赋值 (hFile, -1)
.否则
    .如果 (是否创建)
        赋值 (方式, 1)
    .否则
        赋值 (方式, 3)
    .如果结束
    赋值 (hFile, CreateFileA (文件名称, 相加 (2147483648, 1073741824), 1, 0, 方式, 134217728, 0))
.如果结束
赋值 (hFileMapping, CreateFileMappingA (hFile, 0, 4, 文件大小高位, 文件大小低位, 名称))
.如果真 (大于 (hFile, 0))
    CloseHandle (hFile)
.如果真结束
返回 (hFileMapping)

.子程序 映射到内存, 长整数型, , 将一个创建完毕的或已打开的内存映射文件的全部或一部分映射到进程的内存空间中。内存映像文件地址
.参数 映像文件句柄, 整数型, , 
.参数 起始位置, 长整数型, , 映射到内存的文件起始位置。注意该值一定要是系统分配内存的分配粒度。windows的分配粒度是64k，所以该值一定要是64k的倍数，否则会执行出错。起始位置的值从0开始。
.参数 大小, 整数型, , 映射到内存的字节数量。该值等于0代表从起始位置开始文件其余部分全部映射到内存。如果太大请配合起始位置进行分段映射。
.参数 读写方式, 逻辑型, , 真=读，假=写。

.局部变量 内存映像文件地址, 长整数型, , , 

.如果 (读写方式)
    赋值 (内存映像文件地址, MapViewOfFile (映像文件句柄, 4, 0, 起始位置, 大小)) ' 读
.否则
    赋值 (内存映像文件地址, MapViewOfFile (映像文件句柄, 2, 0, 起始位置, 大小)) ' 写
.如果结束
返回 (内存映像文件地址)

.子程序 读字节集数据, 字节集, , 从已经创建或打开的内存映射文件中读出数据，注意：使用该命令时一定要注意不能超过映射文件的边界，否则会造成非法的内存访问，意外退出。本命令为初级对象成员命令。
.参数 内存映像文件地址, 长整数型, , 
.参数 起始位置, 长整数型, , 从已经映射到内存的内存映射文件中读出的数据的起始位置。起始位置的值从0开始。
.参数 长度, 整数型, , 从已经映射到内存的内存映射文件中读出的数据的长度。

返回 (指针到字节集 (相加 (内存映像文件地址, 起始位置), 长度))

.子程序 写数据, 空白型, , 向已经创建或打开的内存映射文件中写入数据，注意：使用该命令时一定要注意不能超过映射文件的边界，否则会造成非法的内存访问，意外退出。本命令为初级对象成员命令。
.参数 内存映像文件地址, 长整数型, , 
.参数 起始位置, 长整数型, , 向内存映射文件中写入的数据的起始位置。起始位置的值从0开始。
.参数 数据, 字节集, , 欲写入的数据。注意写数据时，数据的长度不能超过映射文件的边界。

.局部变量 插入长度, 整数型, , , 

赋值 (插入长度, 相加 (字节集_取长度 (数据), 1))
 ' MoveMemory (内存映像文件地址 ＋ 起始位置 ＋ 插入长度 － 1, 内存映像文件地址 ＋ 起始位置, 插入长度 － 1)
 ' MoveMemory (集_起始地址 ＋ 集_当前位置 ＋ 插入长度, 集_起始地址 ＋ 集_当前位置, 集_文件尺寸 － 集_当前位置)
CopyMemory (相加 (内存映像文件地址, 起始位置), 数据, 插入长度)

.子程序 解除映射, 空白型, , “映射到内存”方法的反操作，将已经映射到内存的文件解除映射。本命令为初级对象成员命令。
.参数 内存映像文件地址, 长整数型, , 

UnmapViewOfFile (内存映像文件地址)

.子程序 关闭映射文件, 空白型, , 关闭已经创建或打开的内存映射文件。本命令为初级对象成员命令。
.参数 内存映像文件句柄, 整数型, , 

CloseHandle (内存映像文件句柄)

.子程序 字节集到整数, 整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 取字节集指针 (字节集))
赋值 (len, 字节集_取长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 4))
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 4)
.如果结束
返回 (ret)

.子程序 字节集到文本, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ret, 文本型, , , 
.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (字节集, { 0 }))
返回 (指针到文本 (取字节集指针 (temp)))

.子程序 文本到字节集, 字节集, , 
.参数 文本, 文本型, , 

返回 (指针到字节集 (取文本型指针 (文本), 文本_取长度 (文本)))

.子程序 整数到字节集, 字节集, , 
.参数 整数, 整数型, , 

返回 (指针到字节集 (取整数型指针 (整数), 4))

.子程序 整数到文本, 文本型, , ' 这里只是个测试，其实用汇编是很简单的。哈哈～～，来个动态调用API吧。
.参数 整数, 整数型, , 

.局部变量 ret, 文本型, , , 
.局部变量 address, 空白型, , , 
.局部变量 参数, 整数型, , "3", 

赋值 (ret, 文本_取空白 (20))
赋值 (address, GetProcAddress (GetModuleHandle (“user32.dll”), “wsprintfA”))
赋值 (参数 [1], 取文本型指针 (ret))
赋值 (参数 [2], 取文本型指针 (“%d”))
赋值 (参数 [3], 整数)
动态调用子程序 (address, 参数, 真)
返回 (ret)

.子程序 文本到整数, 整数型, , 
.参数 文本变量, 文本型, , 

返回 (StrToInt (文本变量))

.子程序 文本_取空白, 文本型, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
FillMemory (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)

.子程序 文本_取长度, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrlen (文本))

.子程序 文本_取中间, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取中间 (temp, 起始取出位置, 欲取出字符的数目))
返回 (字节集到文本 (ret))

.子程序 文本_取左边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取左边 (temp, 欲取出字符的数目))
返回 (字节集到文本 (ret))

.子程序 文本_取右边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取右边 (temp, 欲取出字符的数目))
返回 (字节集到文本 (ret))

.子程序 文本_替换, 文本型, , 将指定文本的某一部分用其它的文本替换，然后返回替换后的结果。
.参数 欲替换其部分的文本, 文本型, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的文本, 文本型, 可空, 可以被省略。如果本参数被省略，则删除文本中的指定部分。

.局部变量 len_x, 整数型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 temp2, 文本型, , , 

.如果真 (等于 (欲替换其部分的文本, “”))
    返回 (“”)
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (len_x, 文本_取长度 (欲替换其部分的文本))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (temp1, 文本_取左边 (欲替换其部分的文本, 相减 (起始替换位置, 1)))
赋值 (temp2, 文本_取右边 (欲替换其部分的文本, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的文本, temp2))

.子程序 文本_到大写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharUpper (aaa))

.子程序 文本_到小写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharLower (aaa))

.子程序 文本_字符, 文本型, , 
.参数 欲取其字符的字符代码, 字节型, , 

.局部变量 address, 整数型, , , 

赋值 (address, 取字节型指针 (欲取其字符的字符代码))
返回 (字节集到文本 (指针到字节集 (address, 1)))

.子程序 文本_寻找文本, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为 1 。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 204, 0, 0, 0, 131, 249, 0, 126, 111, 139, 85, 244, 137, 203, 139, 117, 12, 232, 186, 0, 0, 0, 131, 249, 0, 126, 93, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 73, 73, 137, 77, 248, 41, 203, 137, 93, 252, 137, 93, 240, 1, 194, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 70, 227, 43, 138, 7, 71, 73, 232, 143, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 70, 71, 232, 118, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 70, 139, 69, 16, 3, 69, 240, 43, 69, 252, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 165, 71, 73, 235, 239, 132, 219, 116, 32, 139, 117, 244, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 130, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 16, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)

.子程序 字节集_取空白, 字节集, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)

.子程序 字节集_取左边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 取字节集指针 (字节集))
返回 (指针到字节集 (address, 欲取出字节的数目))

.子程序 字节集_取中间, 字节集, , 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.判断 (大于 (起始取出位置, len))
    返回 ({  })
.默认
    
.判断结束
.如果真 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出字节的数目, 起始取出位置), 1), len))
    赋值 (欲取出字节的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (address, 相减 (相加 (取字节集指针 (字节集), 起始取出位置), 1))
返回 (指针到字节集 (address, 欲取出字节的数目))

.子程序 字节集_取右边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 相减 (相加 (取字节集指针 (字节集), len), 欲取出字节的数目))
返回 (指针到字节集 (address, 欲取出字节的数目))

.子程序 字节集_取长度, 整数型, , 
.参数 字节集, 字节集, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
赋值 (address, 取字节集指针 (字节集))
RtlMoveMemory_整数 (ret, 相减 (address, 4), 4)
返回 (ret)

.子程序 取字节集指针, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))

.子程序 取文本型指针, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))

.子程序 取字节型指针, 整数型, , 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))

.子程序 取整数型指针, 整数型, , 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (动态调用子程序_整数 ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))

.子程序 API_处理事件, 空白型, , 
.局部变量 MSG, MSG, , , 

.判断循环首 (不等于 (PeekMessage (MSG, 0, 0, 0, 1), 0))
    DispatchMessage (MSG)
    TranslateMessage_MSG (MSG)
.判断循环尾 ()
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 API_信息框, 整数型, , 
.参数 提示信息, 文本型, 可空, 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBox (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))

.类模块 正则表达式, , , 

.程序集变量 对象, 对象, , , 
.程序集变量 搜索全部, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 创建, 逻辑型, , 创建正则表达式
.参数 正则表达式文本, 文本型, , 
.参数 是否区分大小写, 逻辑型, , 
.参数 全局匹配, 逻辑型, , 

.如果真 (对象.创建 (“VBScript.RegExp”, ))
    .如果真 (对象.写属性 (“pattern”, 正则表达式文本))
        .如果真 (对象.写属性 (“ignorecase”, 取反 (是否区分大小写)))
            .如果真 (对象.写属性 (“global”, 全局匹配))
                返回 (真)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 匹配, 逻辑型, , 匹配
.参数 欲匹配的文本, 文本型, , 

返回 (对象.逻辑方法 (“test”, 欲匹配的文本))

.子程序 搜索全部, 整数型, , 返回匹配数, 用于 取匹配文本
.参数 欲搜索的文本, 文本型, , 

.局部变量 匹配数, 整数型, , , 

赋值 (搜索全部, 对象.对象型方法 (“Execute”, 欲搜索的文本))
赋值 (匹配数, 搜索全部.读数值属性 (“count”, ))
返回 (匹配数)

.子程序 取匹配文本, 文本型, , 返回匹配文本
.参数 匹配索引, 整数型, , 

.局部变量 匹配文本, 对象, , , 

赋值 (匹配文本, 搜索全部.读对象型属性 (“item”, 相减 (匹配索引, 1)))
返回 (匹配文本.文本方法 (“Value”, ))

.子程序 取子表达式个数, 整数型, , 返回子表达式个数,用于 取子匹配文本
.参数 匹配索引, 整数型, , 

.局部变量 匹配文本, 对象, , , 
.局部变量 子匹配文本, 对象, , , 

赋值 (匹配文本, 搜索全部.读对象型属性 (“item”, 相减 (匹配索引, 1)))
赋值 (子匹配文本, 匹配文本.读对象型属性 (“SubMatches”, ))
返回 (子匹配文本.读数值属性 (“count”, ))

.子程序 取子匹配文本, 文本型, , 返回子匹配文本
.参数 匹配索引, 整数型, , 
.参数 子表达式索引, 整数型, , 

.局部变量 匹配文本, 对象, , , 
.局部变量 子匹配文本, 对象, , , 

赋值 (匹配文本, 搜索全部.读对象型属性 (“item”, 相减 (匹配索引, 1)))
赋值 (子匹配文本, 匹配文本.读对象型属性 (“SubMatches”, ))
返回 (子匹配文本.文本方法 (“item”, 相减 (子表达式索引, 1)))


 ' 不属于任何一个程序集、类模块的函数：
