 ' 文件类型：Windows窗口程序

 ' 程序名称：万象2008数据库管理
 ' 程序描述：兴起之作
@备注:
万象2008数据库网管工具
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.2

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 662
    高度 = 402
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “万象数据库辅助器”
    帮助文件名 = “”

窗口 登陆窗口
    左边 = 50
    顶边 = 50
    宽度 = 293
    高度 = 170
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “登 陆     By:LayMan”
    帮助文件名 = “”

窗口 数据连接窗口
    左边 = 50
    顶边 = 50
    宽度 = 334
    高度 = 228
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “数据库”
    帮助文件名 = “”



.常量 MF_POPUP, "16", , 
.常量 MF_BYPOSITION, "1024", , 
.常量 MF_SEPARATOR, "2048", , 
.常量 MF_STRING, "0", , 
.常量 MF_BYCOMMAND, "0", , 
.常量 MIIM_DATA, "32", , 
.常量 , , , 
.常量 AD_空, "0", 隐藏, , adEmpty；
.常量 AD_字节型, "16", 隐藏, , adTinyInt；
.常量 AD_短整数型, "2", 隐藏, , adSmallInt；
.常量 AD_整数型, "3", 隐藏, , adInteger；
.常量 AD_长整数型, "20", 隐藏, , adBigInt；
.常量 AD_无符号字节型, "17", 隐藏, , adUnsignedTinyInt；
.常量 AD_无符号短整数型, "18", 隐藏, , adUnsignedSmallInt；
.常量 AD_无符号整数型, "19", 隐藏, , adUnsignedInt；
.常量 AD_无符号长整数型, "21", 隐藏, , adUnsignedBigInt；
.常量 AD_小数型, "4", 隐藏, , adSingle；
.常量 AD_双数度小数型, "5", 隐藏, , adDouble；
.常量 AD_货币型, "6", 隐藏, , adCurrency；
.常量 AD_十进位数值型, "14", 隐藏, , adDecimal；
.常量 AD_数值型, "131", 隐藏, , adNumeric；
.常量 AD_逻辑型, "11", 隐藏, , adBoolean；
.常量 AD_错误型, "10", 隐藏, , adError；
.常量 AD_自定义型, "132", 隐藏, , adUserDefined；
.常量 AD_变体型, "12", 隐藏, , adVariant；
.常量 AD_对象型, "9", 隐藏, , adIDispatch；
.常量 AD_未知接口, "13", 隐藏, , adIUnknown；
.常量 AD_GUID, "72", 隐藏, , adGUID；
.常量 AD_日期型, "7", 隐藏, , adDate；
.常量 adDBDate, "133", 隐藏, , adDBDate；
.常量 adDBTime, "134", 隐藏, , adDBTime；
.常量 adDBTimeStamp, "135", 隐藏, , adDBTimeStamp；
.常量 AD_宽文本, "8", 隐藏, , adBSTR；
.常量 AD_字符型, "129", 隐藏, , adChar；
.常量 AD_变长字符串, "200", 隐藏, , adVarChar；
.常量 AD_超长字符串, "201", 隐藏, , adLongVarChar；
.常量 AD_宽字符型, "130", 隐藏, , adWChar；
.常量 AD_变长宽字符串, "202", 隐藏, , adVarWChar；
.常量 AD_超长宽字符串, "203", 隐藏, , adLongVarWChar；
.常量 AD_字节集, "128", 隐藏, , adBinary；
.常量 AD_变长字节集, "204", 隐藏, , adVarBinary；
.常量 AD_超长字节集, "205", 隐藏, , adLongVarBinary；
.常量 adChapter, "136", 隐藏, , adChapter；
.常量 AD_文件时间, "64", 隐藏, , adFileTime；
.常量 adPropVariant, "138", 隐藏, , adPropVariant；
.常量 adVarNumeric, "139", 隐藏, , adVarNumeric。


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一



 ' 所需要的模块
 ' 皮肤_易语言皮肤模块 E:\皮肤_易语言皮肤模块.ec
 ' 黑月ADODB数据库操作类模块 E:\黑月ADODB数据库操作类.ec


.全局变量 ado_db, ADODB数据库类, , , 
.全局变量 ad0_cache, ADODB记录集类, , , 
.全局变量 当前用户, 文本型, , , 
.全局变量 权限, 整数型, , , 
.全局变量 zhangtai, 文本型, , , 
.全局变量 dbx, 文本型, , , 
.全局变量 Email, 文本型, , "0", 
.全局变量 sql地址, 文本型, , , 
.全局变量 kaiguan, 逻辑型, , , 

.DLL命令 调用系统关于窗口, 整数型, "shell32.dll", "ShellAboutA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 
    .参数 说明, 文本型, , 
    .参数 图标句柄, 整数型, , 

.窗口程序集 集_启动, , , 

.程序集变量 菜单A句柄, 整数型, , , 
.程序集变量 回调指针, 子程序指针, , , 
.程序集变量 子菜单句柄, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 m1, 文本型, , , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (dbx, 相加 (取运行目录 (), “\yz.mdb”))
皮肤_加载皮肤 (8)
处理事件 ()
载入 (登陆窗口, _启动窗口, 真)
ado_db.连接Access (dbx)
ad0_cache.打开 (“select * from svr”, ado_db, 真)
.计次循环首 (ad0_cache.记录数量 (), n1)
    赋值 (m1, ad0_cache.读入字段名记录 (“svrip”).取文本 ())
    m1.加入项目 ()
    m1.选择 ()
    .如果真 (并且 (等于 (n1, 1), 大于 (ad0_cache.记录数量 (), 0)))
        赋值 (sql地址, 相加 (m1, “|”, ad0_cache.读入字段名记录 (“dbbasc”).取文本 (), “|”, ad0_cache.读入字段名记录 (“xname”).取文本 (), “|”, ad0_cache.读入字段名记录 (“xpassword”).取文本 ()))
    .如果真结束
    ad0_cache.到下一条 ()
.计次循环尾 ()
ad0_cache.关闭 () ' 必须关闭记录集的访问，否则再次使用该命令还是默认为以上大开的表和命令
ado_db.关闭 ()
延迟 (1000)
调试输出 (sql地址)

.子程序 _修改密码_被选择, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 密码_原, 文本型, , , 
.局部变量 密码_a, 文本型, , , 
.局部变量 密码_1, 文本型, , , 
.局部变量 密码_2, 文本型, , , 
.局部变量 逻辑A, 逻辑型, , , 

ado_db.连接Access (dbx)
ad0_cache.打开 (相加 (“select * from tabe1 where name='”, 当前用户, “'”), ado_db, 真)
调试输出 (ad0_cache.记录数量 ())
.计次循环首 (ad0_cache.记录数量 (), n1)
    赋值 (密码_原, A_解密 (ad0_cache.读入字段名记录 (“password”).取文本 ()))
.计次循环尾 ()
ad0_cache.关闭 () ' 关闭记录集打开的命令，否则下面执行不能实质的成功！
输入框 (“输入原始密码，以确定修改”, 相加 (“正在修改”, 当前用户, “密码”), , 密码_a, 4)
.如果 (等于 (密码_a, 密码_原))
    输入框 (“请输入要设置的新密码”, 相加 (“正在修改”, 当前用户, “密码”), , 密码_1, 4)
    输入框 (“请再次输入新密码”, 相加 (“正在修改”, 当前用户, “密码”), , 密码_2, 4)
    .如果 (等于 (密码_1, 密码_2))
         ' ad0_cache.打开 (“update [tabe1] set [password]='666' where [name]='admin'”, ado_db, 真)
        ad0_cache.打开 (相加 (“update [tabe1] set [password]='”, A_加密 (密码_2), “' ”, “where [name]='”, 当前用户, “'”), ado_db, 真)
        ad0_cache.关闭 ()
        延迟 (100)
         ' 由于UPDATE 返回错误信息，修改成功依旧返回“假”，故用查询帐户再读密码对比最后输入的新密码。
        ad0_cache.打开 (相加 (“select * from tabe1 where name='”, 当前用户, “'”), ado_db, 真)
        .如果 (等于 (密码_2, A_解密 (ad0_cache.读入字段名记录 (“password”).取文本 ())))
            信息框 (“密码修改成功！请重新登陆！”, 0, )
            _启动窗口.销毁 ()
        .否则
            信息框 (“密码修改失败！”, 0, )
        .如果结束
        ad0_cache.关闭 ()
    .否则
        信息框 (“二次输入密码不一致，请重新设置”, 0, “Err”)
    .如果结束
    
.否则
    信息框 (“验证密码错误”, 0, “Err”)
.如果结束


.子程序 _添加帐号_被选择, 空白型, , 
.局部变量 帐_号, 文本型, , , 
.局部变量 帐_号A, 文本型, , , 
.局部变量 密_码, 文本型, , , 
.局部变量 变量a, 文本型, , , 
.局部变量 分割文本A, 文本型, , "0", 
.局部变量 hou, 文本型, , , 
.局部变量 hou2, 整数型, , , 
.局部变量 qian, 文本型, , , 

ado_db.连接Access (dbx)
 ' INSERT INTO Persons VALUES ('Gates', 'Bill', 'Xuanwumen 10', 'Beijing')
输入框 (相加 (“格式:”, #换行符, “    帐号名,权限等级(1,2,3,4,5,6,7),默认为1”), “测试”, , 变量a, )
赋值 (hou, 取文本右边 (变量a, 2))
赋值 (hou2, 到数值 (取文本右边 (hou, 1)))
调试输出 (hou)
赋值 (qian, 取文本左边 (hou, 1))
.如果 (并且 (小于 (0, hou2), 小于或等于 (hou2, 7), 等于 (qian, “,”)))
    赋值 (分割文本A, 分割文本 (变量a, 到小写 (“,”), 2))
    赋值 (帐_号, 分割文本A [1])
    赋值 (帐_号A, 分割文本A [2])
.否则
    .如果 (不等于 (qian, “,”))
        赋值 (帐_号, 变量a)
        赋值 (帐_号A, “1”)
    .否则
        
    .如果结束
    
.如果结束
.如果 (等于 (删首尾空 (变量a), “”))
    信息框 (“帐号不能为空！”, 0, “Err”)
    返回 ()
.否则
    输入框 (“设置帐号的登陆密码，请牢记！”, “设置密码”, , 密_码, 4)
    ad0_cache.打开 (相加 (“select * from tabe1 where name='”, 帐_号, “'”), ado_db, 真)
    .如果 (大于或等于 (ad0_cache.记录数量 (), 1))
        信息框 (“帐号已经存在，请设置其他名字”, 0, )
    .否则
        
    .如果结束
    ad0_cache.关闭 ()
    延迟 (1000)
    ad0_cache.打开 (相加 (“INSERT INTO tabe1 VALUES ('”, 帐_号, “', '”, A_加密 (密_码), “', '”, 帐_号A, “','')”), ado_db, 真)
    延迟 (2000)
    ad0_cache.关闭 ()
    延迟 (1000)
    ad0_cache.打开 (相加 (“select * from tabe1 where name='”, 帐_号, “'”), ado_db, 真)
    .如果真 (大于 (ad0_cache.记录数量 (), 7))
        信息框 (相加 (“帐号加入成功！用户权限:”, 帐_号A), #询问图标, )
    .如果真结束
    
.如果结束


.子程序 __启动窗口_将被销毁, 空白型, , 


.子程序 _连接设置_被选择, 空白型, , 
载入 (数据连接窗口, _启动窗口, 假)


.子程序 _会员框_左键单击表项, 空白型, , 
.局部变量 索引_a, 整数型, , , 

.如果真 (大于 (取表项数 (), 0))
    1.置文本 (相加 (“ 会员名：〖”, .取标题 (., 1), “〗  余额：”, .取标题 (., 3), “  证件号码：”, .取标题 (., 4)))
    
    
.如果真结束


.子程序 _会员框_右键单击表项, 空白型, , 
.如果真 (大于 (取表项数 (), 0))
    弹出菜单 (取鼠标水平位置 (), 取鼠标垂直位置 ())
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _查询按钮_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 索引D, 整数型, , , 
.局部变量 sql, 文本型, , , 
.局部变量 分割文本a, 文本型, , "4", 

全部删除 ()
赋值 (分割文本a, 分割文本 (sql地址, “|”, 4))
.如果 (ado_db.连接SQLServer (分割文本a [1], 分割文本a [2], 分割文本a [3], A_解密 (分割文本a [4])))
    延迟 (100)
    .如果 (等于 (.选中, 真))
        赋值 (sql, 相加 (“select * from tusers where sname= '”, 删首尾空 (.内容), “' order by sname ”))
    .否则
        赋值 (sql, 相加 (“select * from tusers where sname like '[”, 删首尾空 (.内容), “]%' order by sname”))
    .如果结束
     ' SELECT * FROM Persons WHERE City LIKE '%lon%'
    
    调试输出 (sql)
    ad0_cache.打开 (sql, ado_db, 真)
    1.置文本 (相加 (“查询到以”, #左引号, 删首尾空 (.内容), #右引号, “相关的记录：”, 到文本 (ad0_cache.记录数量 ()), “条...”))
    .计次循环首 (ad0_cache.记录数量 (), n1)
        赋值 (索引D, .插入表项 ())
        索引D.置标题 (0, ad0_cache.读入字段名记录 (“scardid”).取文本 ()) ' 卡号
        索引D.置标题 (1, ad0_cache.读入字段名记录 (“sname”).取文本 ()) ' 姓名
        索引D.置标题 (2, ad0_cache.读入字段名记录 (“sstate”).取文本 ()) ' 卡状态
        .判断开始 (等于 (ad0_cache.读入字段名记录 (“stype”).取文本 (), “计时卡”))
            索引D.置标题 (3, 相加 (“※   ”, ad0_cache.读入字段名记录 (“irest”).取文本 (), “分钟”)) ' 余额
        .默认
            
        .判断结束
        .判断开始 (等于 (ad0_cache.读入字段名记录 (“stype”).取文本 (), “计费卡”))
            索引D.置标题 (3, 相加 (ad0_cache.读入字段名记录 (“mremain”).取文本 (), “元”))
        .默认
            
        .判断结束
        索引D.置标题 (4, ad0_cache.读入字段名记录 (“sidcard”).取文本 ()) ' 证件号码
        索引D.置标题 (5, ad0_cache.读入字段名记录 (“soperator”).取文本 ()) ' 操作人员
        索引D.置标题 (6, ad0_cache.读入字段名记录 (“smemo”).取文本 ()) ' 备注
        ad0_cache.到下一条 ()
    .计次循环尾 ()
    延迟 (100)
    ad0_cache.关闭 () ' 关闭防止后面对错误的数据库执行命令
    ado_db.关闭 () ' 关闭防止后面对错误的数据库执行命令
.否则
    信息框 (“数据库连接失败！请检查相关设置及确定数据库运行正常！”, #警告图标, “Err”)
.如果结束


.子程序 _删除帐号_被选择, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 outname, 文本型, , , 

ado_db.连接Access (dbx)
ad0_cache.打开 (“select * from tabe1”, ado_db, 真)
.计次循环首 (ad0_cache.记录数量 (), n1)
    赋值 (文本, 相加 (文本, “;”, ad0_cache.读入字段名记录 (“name”).取文本 ()))
    ad0_cache.到下一条 ()
    调试输出 (文本)
.计次循环尾 ()
ad0_cache.关闭 ()
输入框 (相加 (“用户名如下：”, 文本, #换行符, #换行符, “输入欲删除的用户名！”), “删除用户”, , outname, )

.如果真 (不等于 (当前用户, outname))
     ' DELETE FROM [表名] WHERE [字段名]>100
     ' DELETE FROM Person WHERE LastName = 'Wilson'
    ad0_cache.打开 (相加 (“delete from [tabe1] where [name]='”, 删首尾空 (outname), “'”), ado_db, 真)
    ad0_cache.更新 ()
    ad0_cache.关闭 ()
.如果真结束


.子程序 A_加密, 文本型, , 
.参数 文本, 文本型, , 

返回 (加密_H (文本, “y*$#zh@3”))


.子程序 A_解密, 文本型, , 
.参数 文本, 文本型, , 

返回 (解密_H (文本, “y*$#zh@3”))


.子程序 _会员框_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.取标题 (., 1), “”))
    
.如果真结束


.子程序 _程序相关_被选择, 空白型, , 
信息框 (相加 (“LayMan 编写 ”, #换行符, #换行符, “联系QQ： 170456340”, #换行符, #换行符, “请大家多多指教！”), 0, )


.子程序 _修改金额_被选择, 空白型, , 
.局部变量 noo, 文本型, , , 
.局部变量 n1, 整数型, , , 
.局部变量 分割文本a, 文本型, , "4", 
.局部变量 金钱, 整数型, , , 

ado_db.关闭 ()
ad0_cache.关闭 ()
.如果真 (不等于 (.取标题 (., ), “”))
    赋值 (noo, .取标题 (., 0))
    赋值 (分割文本a, 分割文本 (sql地址, “|”, 4))
    .如果真 (ado_db.连接SQLServer (分割文本a [1], 分割文本a [2], 分割文本a [3], A_解密 (分割文本a [4])))
        ad0_cache.打开 (相加 (“select * from tusers where scardid='”, noo, “'”), ado_db, 真)
        输入框 (相加 (“正在修改 ◇ ”, ad0_cache.读入字段名记录 (“sname”).取文本 (), “ ◇”, ad0_cache.读入字段名记录 (“stype”).取文本 (), “的金额”), “修改金额”, , 金钱, 2)
        调试输出 (金钱)
        调试输出 (noo)
         ' ad0_cache.打开 (“update tusers set mremain=” ＋ 删首尾空 (金额编辑框.内容) ＋ “ where scardid='” ＋ 删首尾空 (卡号透明标签.标题) ＋ “'”, ado_db, 真)
        .判断开始 (等于 (ad0_cache.读入字段名记录 (“stype”).取文本 (), “计费卡”))
            
            ad0_cache.关闭 ()
            延迟 (1000)
            ad0_cache.打开 (相加 (“update tusers set mremain=”, 到文本 (金钱), “ where scardid='”, noo, “'”), ado_db, 真)
            调试输出 (“计费卡”)
        .判断 (等于 (ad0_cache.读入字段名记录 (“stype”).取文本 (), “计时卡”))
            ad0_cache.关闭 ()
            延迟 (1000)
            ad0_cache.打开 (相加 (“update tusers set irest=”, 到文本 (相乘 (金钱, 60)), “ where scardid='”, noo, “'”), ado_db, 真)
            
            调试输出 (“计时卡”)
        .默认
            
        .判断结束
        ad0_cache.关闭 ()
        ado_db.关闭 ()
    .如果真结束
    
.如果真结束


.子程序 _关于_被选择, 空白型, , 
调用系统关于窗口 (_启动窗口.取窗口句柄 (), “万象数据库辅助器”, “layman 联系QQ:170456340   给网吧朋友的辅助工具，让大家有更多的时候处理其他问题！”, 0)

.子程序 _组合框1_列表项被选择, 空白型, , 
.局部变量 AA, 文本型, , , 

赋值 (AA, .取项目文本 (.现行选中项))
ado_db.连接Access (dbx)
ad0_cache.打开 (“select * from svr”, ado_db, 真)
延迟 (100)
ad0_cache.关闭 ()
延迟 (100)
ad0_cache.打开 (相加 (“select * from svr where svrip='”, AA, “'”), ado_db, 真)
赋值 (sql地址, 相加 (AA, “|”, ad0_cache.读入字段名记录 (“dbbasc”).取文本 (), “|”, ad0_cache.读入字段名记录 (“xname”).取文本 (), “|”, ad0_cache.读入字段名记录 (“xpassword”).取文本 ()))
ad0_cache.关闭 () ' 必须关闭记录集的访问，否则再次使用该命令还是默认为以上大开的表和命令
ado_db.关闭 ()
调试输出 (sql地址)


.子程序 _修改证件_被选择, 空白型, , 
.局部变量 noo, 文本型, , , 
.局部变量 分割文本a, 文本型, , "4", 
.局部变量 mingz, 文本型, , , 

ado_db.关闭 ()
ad0_cache.关闭 ()
.如果真 (不等于 (.取标题 (., ), “”))
    赋值 (noo, .取标题 (., 0))
    赋值 (分割文本a, 分割文本 (sql地址, “|”, 4))
    .如果真 (ado_db.连接SQLServer (分割文本a [1], 分割文本a [2], 分割文本a [3], A_解密 (分割文本a [4])))
         ' ad0_cache.打开 (相加 (“select * from tusers where scardid='”, noo, “'”), ado_db, 真)
        输入框 (相加 (“正在修改 ◇ ”, ad0_cache.读入字段名记录 (“sname”).取文本 (), “ ◇”, ad0_cache.读入字段名记录 (“stype”).取文本 (), “的证件”), “修改证件”, , mingz, )
        ad0_cache.关闭 ()
        延迟 (1000)
        ad0_cache.打开 (相加 (“update tusers set sidcard='”, mingz, “' where scardid='”, noo, “'”), ado_db, 真)
        ad0_cache.关闭 ()
        ado_db.关闭 ()
    .如果真结束
    
.如果真结束


.子程序 _修改名字_被选择, 空白型, , 
.局部变量 noo, 文本型, , , 
.局部变量 分割文本a, 文本型, , "4", 
.局部变量 mingz, 文本型, , , 

' 本源码来自易语言资源网(www.5A5X.com)
ado_db.关闭 ()
ad0_cache.关闭 ()
.如果真 (不等于 (.取标题 (., ), “”))
    赋值 (noo, .取标题 (., 0))
    赋值 (分割文本a, 分割文本 (sql地址, “|”, 4))
    .如果真 (ado_db.连接SQLServer (分割文本a [1], 分割文本a [2], 分割文本a [3], A_解密 (分割文本a [4])))
        ad0_cache.打开 (相加 (“select * from tusers where scardid='”, noo, “'”), ado_db, 真)
        输入框 (相加 (“正在修改证件号为 ◇ ”, ad0_cache.读入字段名记录 (“scardid”).取文本 (), “ ◇”, ad0_cache.读入字段名记录 (“stype”).取文本 (), “的名字”), “修改证件”, , mingz, )
        ad0_cache.关闭 ()
        延迟 (1000)
        ad0_cache.打开 (相加 (“update tusers set sname='”, mingz, “' where scardid='”, noo, “'”), ado_db, 真)
        ad0_cache.关闭 ()
        ado_db.关闭 ()
    .如果真结束
    
.如果真结束


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
.如果 (等于 (信息框 (“是否放弃登陆！”, #是否钮, “ERR”), #否钮))
    返回 ()
.否则
    延迟 (500)
    _启动窗口.销毁 ()
.如果结束


.子程序 _添加备注_被选择, 空白型, , 
.局部变量 noo, 文本型, , , 
.局部变量 分割文本a, 文本型, , "4", 
.局部变量 mingz, 文本型, , , 

ado_db.关闭 ()
ad0_cache.关闭 ()
.如果真 (不等于 (.取标题 (., ), “”))
    赋值 (noo, .取标题 (., 0))
    赋值 (分割文本a, 分割文本 (sql地址, “|”, 4))
    .如果真 (ado_db.连接SQLServer (分割文本a [1], 分割文本a [2], 分割文本a [3], A_解密 (分割文本a [4])))
        ad0_cache.打开 (相加 (“select * from tusers where scardid='”, noo, “'”), ado_db, 真)
        输入框 (相加 (“正在修改  ◇ ”, ad0_cache.读入字段名记录 (“sname”).取文本 (), “ ◇”, ad0_cache.读入字段名记录 (“stype”).取文本 (), “的备注”), “修改证件”, , mingz, )
        ad0_cache.关闭 ()
        延迟 (1000)
        ad0_cache.打开 (相加 (“update tusers set smemo='”, mingz, “' where scardid='”, noo, “'”), ado_db, 真)
        ad0_cache.关闭 ()
        ado_db.关闭 ()
    .如果真结束
    
.如果真结束


.窗口程序集 集_登陆, , , 

.子程序 _按钮2_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 mingz, 文本型, , , 
.局部变量 密码ss, 文本型, , , 


赋值 (mingz, 登陆窗口.取项目文本 (., 登陆窗口..现行选中项))
延迟 (10)
ad0_cache.打开 (相加 (“select * from tabe1 where name='”, mingz, “'”), ado_db, 真)
 ' 调试输出 (ad0_cache.记录数量 ())
 ' .计次循环首 (ad0_cache.记录数量 (), n1)
     ' ad0_cache.读入字段名记录 (“name”).取文本 ()
 ' .计次循环尾 ()
赋值 (密码ss, A_解密 (ad0_cache.读入字段名记录 (“password”).取文本 ())) ' 解密码
赋值 (权限, ad0_cache.读入字段名记录 (“level”).取数值 ())
 ' 调试输出 (权限)
.如果 (等于 (登陆窗口..内容, 密码ss))
    赋值 (当前用户, mingz)
    .如果真 (等于 (权限, 7))
        赋值 (_启动窗口..禁止, 假)
        赋值 (_启动窗口..禁止, 假)
        赋值 (_启动窗口..禁止, 假)
        赋值 (_启动窗口..禁止, 假)
        赋值 (_启动窗口..禁止, 假)
    .如果真结束
    赋值 (.时钟周期, 10)
    赋值 (.可视, 真)
    延迟 (2000)
    赋值 (_启动窗口., 真)
    赋值 (_启动窗口., 相加 (_启动窗口., “   当前用户：”, 当前用户))
    登陆窗口.销毁 ()
.否则
    信息框 (“登陆密码错误！”, 0, )
.如果结束
ad0_cache.关闭 ()



.子程序 _按钮1_被单击, 空白型, , 
.如果 (等于 (信息框 (“是否放弃登陆！”, #是否钮, “ERR”), #否钮))
    返回 ()
.否则
    登陆窗口.销毁 ()
    延迟 (1000)
    _启动窗口.销毁 ()
.如果结束


.子程序 _登陆窗口_创建完毕, 空白型, , 
.局部变量 n1, 整数型, , , 

ado_db.连接Access (dbx)
ad0_cache.打开 (“select * from tabe1”, ado_db, 真)
.计次循环首 (ad0_cache.记录数量 (), n1)
    ad0_cache.读入字段名记录 (“name”).取文本 ().加入项目 ()
    ad0_cache.读入字段名记录 (“name”).取文本 ().选择 ()
    ad0_cache.到下一条 ()
.计次循环尾 ()
ad0_cache.关闭 () ' 必须关闭记录集的访问，否则再次使用该命令还是默认为以上大开的表和命令


.子程序 _编辑框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _按钮2_被单击 ()
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _时钟1_周期事件, 空白型, , 
赋值 (.位置, 相加 (.位置, 1.5))


.窗口程序集 集_数据连接, , , 

.程序集变量 临时TMP, 文本型, , , 
.子程序 _数据连接窗口_创建完毕, 空白型, , 
.局部变量 n1, 整数型, , , 

未知函数_543 () ' *** 缩略程序块 ***
ado_db.连接Access (dbx)
ad0_cache.打开 (“select * from svr”, ado_db, 真)
.计次循环首 (ad0_cache.记录数量 (), n1)
    ad0_cache.读入字段名记录 (“svrip”).取文本 ().加入项目 ()
    ad0_cache.到下一条 ()
.计次循环尾 ()
 ' 编辑框2.内容 ＝ ad0_cache.读入字段名记录 (“dbbasc”).取文本 ()
 ' 编辑框3.内容 ＝ ad0_cache.读入字段名记录 (“xname”).取文本 ()
 ' 编辑框4.内容 ＝ ad0_cache.读入字段名记录 (“xpassword”).取文本 ()
ad0_cache.关闭 ()

.子程序 _按钮修改_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 m1, 文本型, , , 
.局部变量 j1, 整数型, , , 

.判断开始 (等于 (.内容, 临时TMP))
    调试输出 (“二个IP一样”)
    .如果真 (并且 (不等于 (.内容, “”), 不等于 (.内容, “”), 不等于 (.内容, “”), 不等于 (.内容, “”)))
        ad0_cache.打开 (相加 (“update [svr] set [dbbasc]='”, .内容, “',[xname]='”, .内容, “',[xpassword]='”, A_加密 (.内容), “'  where [svrip]='”, 删首尾空 (临时TMP), “'”), ado_db, 真)
        ad0_cache.关闭 ()
        延迟 (1000)
        数据连接窗口.销毁 ()
    .如果真结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.判断 (不等于 (.内容, 临时TMP))
    调试输出 (“二个IP不一样”)
     ' ad0_cache.打开 (“INSERT INTO tabe1 VALUES ('” ＋ 帐_号 ＋ “', '” ＋ A_加密 (密_码) ＋ “', '1','')”, ado_db, 真)
    .如果真 (并且 (不等于 (.内容, “”), 不等于 (.内容, “”), 不等于 (.内容, “”), 不等于 (.内容, “”)))
        ad0_cache.打开 (相加 (“INSERT INTO svr VALUES ('”, 删首尾空 (.内容), “','”, .内容, “','”, .内容, “', '”, A_加密 (.内容), “')”), ado_db, 真)
        ad0_cache.关闭 ()
        延迟 (1000)
        数据连接窗口.销毁 ()
    .如果真结束
    
.默认
    
.判断结束
信息框 (“IP列表修改,请重新启动程序,以获得新的IP列表！”, 0, )
_启动窗口.销毁 ()

.子程序 _组合框1_列表项被选择, 空白型, , 
未知函数_617 () ' *** 缩略程序块 ***
ad0_cache.打开 (相加 (“select * from svr where svrip='”, 删首尾空 (.取项目文本 (.现行选中项)), “'”), ado_db, 真)
赋值 (.内容, ad0_cache.读入字段名记录 (“dbbasc”).取文本 ())
赋值 (.内容, ad0_cache.读入字段名记录 (“xname”).取文本 ())
赋值 (.内容, A_解密 (ad0_cache.读入字段名记录 (“xpassword”).取文本 ()))
ad0_cache.关闭 ()
赋值 (临时TMP, .取项目文本 (.现行选中项))
调试输出 (相加 (“临时TMP:”, 临时TMP))


.子程序 _按钮删除_被单击, 空白型, , 
 ' ad0_cache.打开 (“delete from [tabe1] where [name]='” ＋ 删首尾空 (outname) ＋ “'”, ado_db, 真)
.如果 (或者 (不等于 (.取项目文本 (.现行选中项), “”), 不等于 (.内容, “”)))
    ad0_cache.打开 (相加 (“delete * from [svr] where [svrip]='”, 删首尾空 (.取项目文本 (.现行选中项)), “'”), ado_db, 真)
    ad0_cache.关闭 ()
    数据连接窗口.销毁 ()
.否则
    
.如果结束


.子程序 _数据连接窗口_将被销毁, 空白型, , 



.程序集 rc4, , , 

.子程序 加密_H, 文本型, , 用RC4算法对文本进行加密.(返回加密后的密文)
.参数 instr, 文本型, , 欲加密的文本
.参数 key, 文本型, 可空, 用作加密的密钥 (解密时必须有密钥才能解开密文)

.局部变量 临时, 字节集, , , 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 文本型, , , 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (临时, 到字节集 (instr))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (key)))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (key, j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取字节集长度 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
     ' aaa ＝ 进制转换_ (到文本 (位异或 (临时 [x], y)), 10, 16)
    赋值 (aaa, 到十六进制文本 (位异或 (临时 [x], y)))
    赋值 (outstr, 相加 (outstr, 选择 (大于 (取文本长度 (aaa), 1), “”, “0”), aaa, “,”))
.计次循环尾 ()
返回 (outstr)

.子程序 解密_H, 文本型, , 对RC4算法加密过的文本进行解密(返回解密后的文本)
.参数 instr, 文本型, , 欲解密的密文
.参数 key, 文本型, 可空, 用作解密的密钥(加密时使用的)

.局部变量 临时, 字节型, , "0", 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 字节型, , "0", 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 计次, 整数型, , , 

 ' 临时 ＝ 文本_16串到字节集 (instr)
赋值 (instr, 子文本替换 (instr, “,”, , , , 真))
.变量循环首 (1, 取文本长度 (instr), 2, 计次)
    加入成员 (临时, 到字节 (十六到十 (取文本中间 (instr, 计次, 2))))
.变量循环尾 ()
 ' 临时 ＝ 到字节集 (转换为十进制 (instr, 16))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (key)))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (key, j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取数组成员数 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    加入成员 (outstr, 位异或 (临时 [x], y))
.计次循环尾 ()
返回 (到文本 (outstr))


.子程序 十六到十, 整数型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本
.参数 返回结果, 文本型, 参考 可空, 返回文本结果(如十进制数超出整数范围,可通过返回结果获得十进制文本)

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

赋值 (返回结果, “”)
.变量循环首 (1, 取文本长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 取文本中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (取文本长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
.如果真 (等于 (是否为空 (返回结果), 假))
    赋值 (返回结果, 到文本 (结果))
.如果真结束
返回 (结果)

.子程序 十到十六, 文本型, 公开, 将十进制转换成十六进制(返回十六进制文本)
.参数 十进制数, 长整数型, , 待转换的十进制数
.参数 是否不去零, 逻辑型, 可空, 默认为假:去0  真:不去0

.局部变量 余数, 文本型, , "0", 
.局部变量 十六进制文本, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 字母数组, 文本型, , "6", 
.局部变量 字节集, 字节集, , , 

.如果真 (是否不去零)
    赋值 (字节集, 到字节集 (十进制数))
    .计次循环首 (整除 (相加 (取字节集长度 (字节集), 2), 3), 计次)
        赋值 (十六进制文本, 相加 (到十六进制文本 (字节集 [计次]), 十六进制文本))
    .计次循环尾 ()
    返回 (十六进制文本)
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)
赋值 (字母数组, { “A”, “B”, “C”, “D”, “E”, “F” })
.循环判断首 ()
    .判断开始 (小于 (求余数 (十进制数, 16), 10))
        加入成员 (余数, 到文本 (求余数 (十进制数, 16)))
    .默认
        加入成员 (余数, 字母数组 [相减 (求余数 (十进制数, 16), 9)])
    .判断结束
    赋值 (十进制数, 相除 (十进制数, 16))
    .如果真 (小于 (十进制数, 16))
        .判断开始 (小于 (十进制数, 10))
            加入成员 (余数, 到文本 (取整 (十进制数)))
        .默认
            加入成员 (余数, 字母数组 [相减 (十进制数, 9)])
        .判断结束
        跳出循环 ()
    .如果真结束
    
.循环判断尾 (真)
.计次循环首 (取数组成员数 (余数), 计次)
    赋值 (十六进制文本, 相加 (十六进制文本, 到文本 (余数 [相加 (相减 (取数组成员数 (余数), 计次), 1)])))
.计次循环尾 ()
.如果真 (等于 (取文本左边 (十六进制文本, 1), “0”))
    赋值 (十六进制文本, 去除首部零 (十六进制文本))
.如果真结束
返回 (十六进制文本)

.子程序 去除首部零, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 计次, 整数型, , , 

.计次循环首 (取文本长度 (文本), 计次)
    .如果真 (不等于 (取文本中间 (文本, 计次, 1), “0”))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (取文本右边 (文本, 相加 (相减 (取文本长度 (文本), 计次), 1)))

.子程序 到十六进制文本, 文本型, , 这个取十六进制文本没有去0
.参数 数值, 整数型, , 只能是255以内的数

 ' 取出十六进制文本，用易语言的函数会丢掉0，所以重新做了一个
 ' 论坛上monktiger少0的原因可能类似，只有亲自做过才知道啊
返回 (相加 (多项选择 (相加 (右移 (数值, 4), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”), 多项选择 (相加 (位与 (数值, 15), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”)))

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 皮肤_加载皮肤, 空白型, , 加载窗口皮肤
.参数 内置类型, 整数型, 可空, 可选:0-8,默认=0
.参数 皮肤路径, 文本型, 可空, ※内置类型=0皮肤路径不能为空※
.参数 皮肤口令, 文本型, 可空, 



.类模块 ADODB数据库类, , , 

.子程序 是否创建, 逻辑型, , ADODB数据库对象是否创建成功


.子程序 最后错误, 文本型, , 数据库最后错误


.子程序 取对象, 对象, , 


.子程序 取指针位置, 整数型, , 返回值为以下值之一： 1、adUseNone； 2、adUseServer； 3、adUseClient； 3、adUseClientBatch。


.子程序 置指针位置, 逻辑型, , 成功返回真.
.参数 指针位置, 整数型, , 参数值为以下值之一： 1、adUseNone； 2、adUseServer； 3、adUseClient； 3、adUseClientBatch。



.子程序 连接, 逻辑型, , 连接到数据源，如果连接成功返回"真"，失败返回"假"。
.参数 连接文本, 文本型, , 



.子程序 连接Access, 逻辑型, , 连接Access数据库，如果连接成功返回"真"，失败返回"假"。
.参数 文件名, 文本型, , 
.参数 密码, 文本型, 可空, 



.子程序 连接SQLServer, 逻辑型, , 连接SQL Server数据库，如果连接成功返回"真"，失败返回"假")。
.参数 服务器名, 文本型, 可空, 默认为localhost
.参数 数据库名, 文本型, , 
.参数 用户名, 文本型, 可空, 默认为sa
.参数 密码, 文本型, 可空, 默认为sa



.子程序 关闭, 逻辑型, , 断开当前数据库连接，成功返回"真"，失败返回"假"


.子程序 执行SQL, 对象, , 执行指定的查询、SQL 语句、存储过程等，执行成功返回有记录的记录集。产生的记录集将赋值给本模块的ADODB记录集
.参数 SQL语句, 文本型, , 
.参数 记录集结果, 整数型, 参考 可空, 通常是记录的数目，但需要数据驱动支持，不支持则取不回



.子程序 取得权限, 整数型, , 取得访问及相关权限，并返回一个整数代表用户连接当前的权限。该整数为以下常量值之一或之和：0、#未知权限； 1、#只读权限； 2、#只写权限； 3、#读写权限； 4、#独占读权限； 8、#独占写权限； 12、#独占权限；16、#共享权限。


.子程序 设置权限, 逻辑型, , 设置访问及相关权限，并返回一个逻辑型值，如果设置成功，即返回真，如果设置不成功，即返回假。
.参数 要设置的模式, 整数型, , “要设置的模式”，类型为“整数型（int）”。要设置的模式为以下常量值之一或之和：0、#未知权限； 1、#只读权限； 2、#只写权限； 3、#读写权限； 4、#独占读权限； 8、#独占写权限； 12、#独占权限；16、#共享权限。



.子程序 设超时时间, 逻辑型, , 设置超时时间，以毫秒为单位，1000毫秒为1秒钟，若时间超出，会取消相关命令，并弹出信息提示框。
.参数 要设置的时间, 整数型, , 本参数指定准备设置的时间（毫秒）。



.子程序 取超时时间, 整数型, , 取得连接超时时间，以毫秒为单位，1000毫秒为1秒钟。本命令为初级对象成员命令。


.子程序 开始事务, 整数型, , 开始新事务，返回一个整数型值，该数值表示当前事务嵌套的层数，譬如如果返回1，则表明为顶层事务。


.子程序 保存事务, 逻辑型, , 保存任何更改并结束当前事务，返回一个逻辑值，如果保存事务成功返回真，否则返回假。


.子程序 回滚事务, 逻辑型, , 取消当前事务中所作的任何更改并结束事务，返回一个逻辑值，如果操作成功返回真，否则返回假。


.子程序 是否已经连接, 逻辑型, , 


.子程序 对象提供者, 文本型, , 对象提供者名称。


.子程序 引擎版本, 文本型, , 数据引擎版本。


.类模块 ADODB记录集类, , , 

.子程序 是否创建, 逻辑型, , ADODB记录集对象是否创建成功


.子程序 最后错误, 文本型, , 记录集最后错误


.子程序 取对象, 对象, , 


.子程序 置对象, 空白型, , 
.参数 记录集对象, 对象, , 



.子程序 打开, 逻辑型, , 打开数据库表，用于具体指定是操作那一个表，返回一个逻辑值，如果打开表成功返回真，否则返回假。必须执行"ADODB数据库_连接()"等程序先进行数据库连接，最后才能打开表。
.参数 命令文本, 文本型, , 提供数据库中的某一个数据表名或SQL语句。
.参数 数据连接, ADODB数据库类, , 要连接的数据库对象
.参数 命令类型, 逻辑型, 可空, 是否为SQL命令，真为SQL命令，假为表名。默认为假



.子程序 打开并排序, 逻辑型, , 打开数据表，请切以指定条件排序。返回一个逻辑型值，如果排序成功返回真，否则返回假。
.参数 数据连接, ADODB数据库类, , 要连接的数据库对象
.参数 表名, 文本型, , 
.参数 排序条件, 文本型, , 指定排序条件，ASC为升序，DESC为降序例如让学生姓名字段按照升序排，成绩字段按照降序排，那排序条件可以为 "学生姓名 ASC,成绩 DESC"。



.子程序 打开并过滤, 逻辑型, , 用指定过滤条件打开一个表。
.参数 数据连接, ADODB数据库类, , 要连接的数据库对象
.参数 表名, 文本型, , 
.参数 过滤条件, 文本型, , 过滤的条件，例如："文本字段 = 'abc' and 整数字段 > 1"。



.子程序 关闭, 空白型, , 关闭当前打开的数据库表，打开一个数据表并使用后必须进行关闭操作。


.子程序 添加, 逻辑型, , 添加一个新的空记录，返回一个逻辑值。如果添加成功返回真，否则返回假。


.子程序 更新, 逻辑型, , 更新记录，刷新显示，返回一个逻辑值。如果更新成功返回真，否则返回假。


.子程序 删除, 逻辑型, , 删除记录，返回一个逻辑值。如果删除成功返回真，否则返回假，选项可为删除当前记录，或全部记录。
.参数 删除选项, 整数型, 可空, 1、删除当前记录； 3、删除全部记录。默认为1、删除当前记录



.子程序 写出序号记录, 逻辑型, , 通过序号写入记录值。返回一个逻辑型值，如果写成功返回真，否则返回假。
.参数 序号, 整数型, , 序号值从 0 开始。
.参数 记录值, 变体型, , 



.子程序 写出字段名记录, 逻辑型, , 通过字段名写入记录值。返回一个逻辑型值，如果写成功返回真，否则返回假。
.参数 字段名, 文本型, , 
.参数 记录值, 变体型, , 



.子程序 读入序号记录, 变体型, , 通过序号读取记录数据到变量中。返回变体型，失败返回空变量。
.参数 序号, 整数型, , 序号值从 0 开始。



.子程序 读入字段名记录, 变体型, , 通过字段名读取记录数据到变量中。返回变体型，失败返回空变量。
.参数 字段名, 文本型, , 



.子程序 到首记录, 逻辑型, , 移动到表的第一条记录，返回一个逻辑值，如果移动成功返回真，否则返回假。


.子程序 到尾记录, 逻辑型, , 移动到表的最后一条记录，返回一个逻辑值，如果移动成功返回真，否则返回假。


.子程序 到下一条, 逻辑型, , 移动到下一条记录，返回一个逻辑值，如果移动成功返回真，否则返回假。


.子程序 到前一条, 逻辑型, , 移动到前一条记录，返回一个逻辑值，如果移动成功返回真，否则返回假。


.子程序 移到, 逻辑型, , 移到指定记录。
.参数 移过记录数目, 整数型, , 移动过记录位置数，正向后，负向前
.参数 移动方式, 整数型, 可空, 1、从第1条记录开始；0、从当前位置开始；2、从最后一条记录开始，默认为1



.子程序 取页面数, 整数型, , 取得页面的总数


.子程序 取每页记录数, 整数型, , 取得每页的记录数


.子程序 置每页记录数, 逻辑型, , 置每页的记录数,成功返回真
.参数 每页的记录数, 整数型, , 



.子程序 取当前页号, 整数型, , 取得当前所在页的序号


.子程序 跳到页号, 逻辑型, , 翻到页的序号
.参数 页号, 整数型, , 



.子程序 取字段名, 文本型, , 取得指定序号字段的名称，返回一个文本型值，为字段名称文本。
.参数 字段序号, 整数型, , 提供当前表中指定字段的序号值，从 0 开始。



.子程序 取字段属性, 整数型, , 通过序号或字段名取得字段属性，返回一个整数值。为以下常量值之一或之和： 2、#字段被延迟； 4、#字段可写入； 8、#写入无法确定； 16、#定长数据； 32、#允许空值； 64、#可以读空值； 128、#二进制类型； 256、#持久标识符； 512、#包含标记； 4096、#字段被缓存。
.参数 字段序号, 整数型, 可空, 提供当前表中指定字段的序号值，从 0 开始。
.参数 字段名, 文本型, 可空, 如果该项不为空，就以该项的表名为准，以上指定的序号无效



.子程序 取字段定义长度, 整数型, , 通过序号或字段名取得字段定义长度，本命令返回一个整数值。
.参数 字段序号, 整数型, 可空, 提供当前表中指定字段的序号值，从 0 开始。
.参数 字段名, 文本型, 可空, 如果该项不为空，就以该项的表名为准，以上指定的序号无效



.子程序 取字段实际长度, 整数型, , 通过序号或字段名取得字段实际长度，返回一个整数型值。
.参数 字段序号, 整数型, 可空, 提供当前表中指定字段的序号值，从 0 开始。
.参数 字段名, 文本型, 可空, 如果该项不为空，就以该项的表名为准，以上指定的序号无效



.子程序 取字段类型, 整数型, , 通过序号或字段名取得字段类型，返回以下常量值之一： 20、#超长整数字段； 128、#二进制字段； 11、#逻辑型字段； 8、#宽文本字段； 129、#字符型字段； 6、#货币型字段； 7、#日期型字段； 133、#数据库日期型字段； 134、#时间型字段； 135、#时间戳字段； 14、#数值型字段； 5、#双精度字段； 0、#空白型字段； 10、#错误码字段； 72、#标识型字段； 9、#IDispatch字段； 3、#整数型字段； 13、#IUnknown字段； 205、#超变长二进制字段； 201、#超变长文本字段； 203、#超变长宽文本字段； 131、#数字型字段； 4、#单精度字段； 2、#短整数字段； 16、#有符号字节字段； 21、#无符号超长整数字段； 19、#无符号整数字段； 18、#无符号短整数字段； 17、#字节型字段； 132、#自定义型字段； 204、#变长二进制字段； 200、#变长文本字段； 12、#变体型字段； 202、#变长宽文本字段； 130、#宽文本字段。
.参数 字段序号, 整数型, 可空, 提供当前表中指定字段的序号值，从 0 开始。
.参数 字段名, 文本型, 可空, 如果该项不为空，就以该项的表名为准，以上指定的序号无效



.子程序 字段是否为空, 逻辑型, , 判断指定字段是否为空。返回一个逻辑型值，如果为空即为真，否则为假。
.参数 字段序号, 整数型, 可空, 提供当前表中指定字段的序号值，从 0 开始。
.参数 字段名, 文本型, 可空, 如果该项不为空，就以该项的表名为准，以上指定的序号无效



.子程序 查找, 逻辑型, , 查找满足条件的记录，返回一个逻辑型值，如果找到记录即返回真，并停留在满足条件的记录上，否则返回假。找到第一个满足条件的记录后，以后可以用"查找下一个"方法继续进行查找。
.参数 查找条件, 文本型, , 条件只能为一个,不能用AND OR 组合
.参数 是否反方向, 逻辑型, 可空, 真为逆向，假为正向。默认为假



.子程序 查找下一个, 逻辑型, , 查找下一个满足条件的记录。此命令用于"查找"命令之后使用，可继续按查找命令找到下一个满足条件的记录。返回一个逻辑型值，如果找到返回真，否则返回假。


.子程序 过滤记录, 逻辑型, , 过滤出满足条件的记录，返回一个逻辑型值，如果过滤成功返回真，否则返回假。注意：在不使用过滤的时候，一定要再次调用本函数并将过滤条件指定为""。
.参数 过滤条件, 文本型, , 



.子程序 是否已打开, 逻辑型, , 逻辑型。判断是否已经打开。


.子程序 操作状态, 整数型, , 0、没有编辑；1、正在编辑未保存；2、已经用添加新记录未存盘；4、正在删除未保存


.子程序 记录数量, 整数型, , 整数型。取得记录的数量。


.子程序 字段数量, 整数型, , 整数型。取得字段的数量。


.子程序 首记录前, 逻辑型, , 逻辑型。判断当前记录指针是否已在首记录前。


.子程序 尾记录后, 逻辑型, , 逻辑型。判断当前记录指针是否已在记录尾后。


.子程序 保存到XML, 逻辑型, , 将数据库表保存到XML文本文件，以作为交换通用数据表，返回一个逻辑值，如果保存XML文件成功返回真，否则返回假。
.参数 XML文件名, 文本型, , 



.子程序 保存到ADTG, 逻辑型, , 将数据库表用专用的"Advanced Data Tablegram"格式保存。返回一个逻辑值，如果保存ADTG文件成功返回真，否则返回假。
.参数 ADTG文件名, 文本型, , 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 创建新Access数据库文件, 逻辑型, , 成功返回真，失败返回假，原因查看错误文本
.参数 数据库文件名, 文本型, , 扩展名为*.MDB
.参数 错误信息, 文本型, 参考, 



.子程序 添加Access数据库表, 逻辑型, , 成功返回真，失败返回假，原因查看错误文本
.参数 数据库文件名, 文本型, , 扩展名为*.MDB
.参数 表名, 文本型, , 扩展名为*.MDB
.参数 字段信息, 字段信息, 可空 数组, 如果为空，则只创建表格，不创建字段
.参数 错误信息, 文本型, 参考, 




 ' 不属于任何一个程序集、类模块的函数：
