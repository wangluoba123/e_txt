 ' 文件类型：Windows模块源码

 ' 程序名称：获得网卡信息类
 ' 程序描述：获得网卡信息类
@备注:
获得网卡信息类
 ' 程序作者：陈平制作
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.图片 setinterface, " ' 已保存到：D:\易语言学习\Data\获得网卡信息类.e\setinterface", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库



 ' 所需要的模块
 ' 取DOS执行回显 $取DOS执行回显.ec


数据类型 IP_ADAPTER_INFO, , 
    .成员 Next, 整数型, , , 
    .成员 ComboIndex, 整数型, , , 
    .成员 AdapterName, 字节型, , "260", 名称
    .成员 Description, 字节型, , "132", 描述
    .成员 AddressLength, 整数型, , , 
    .成员 Address, 字节型, , "8", 
    .成员 Index, 整数型, , , 
    .成员 Type, 整数型, , , 类型
    .成员 DhcpEnabled, 整数型, , , 
    .成员 CurrentIpAddress, 整数型, , , 
    .成员 IpAddressList, IP_ADDR_STRING, , , 
    .成员 GatewayList, IP_ADDR_STRING, , , 
    .成员 DhcpServer, IP_ADDR_STRING, , , 
    .成员 HaveWins, 逻辑型, , , 
    .成员 PrimaryWinsServer, IP_ADDR_STRING, , , 
    .成员 SecondaryWinsServer, IP_ADDR_STRING, , , 
    .成员 LeaseObtained, 整数型, , , 
    .成员 LeaseExpires, 整数型, , , 

数据类型 IP_ADDR_STRING, , 
    .成员 Next, 整数型, , , 
    .成员 IpAddress, 字节型, , "16", IP_ADDRESS_STRING
    .成员 IpMask, 字节型, , "16", IP_MASK_STRING=IP_ADDRESS_STRING
    .成员 Context, 整数型, , , 

数据类型 IP地址类型, 公开, 返回网卡信息
    .成员 网卡名称, 文本型, , , 网卡名称如“本地连接”
    .成员 系统名称, 文本型, , , GUID信息
    .成员 网卡型号, 文本型, , , 网卡物理型号
    .成员 MAC地址, 文本型, , , 网卡MAC地址
    .成员 DHCP, 逻辑型, , , 判断是否开通DHCP方式
    .成员 IP地址, 文本型, , , 
    .成员 掩码, 文本型, , , 
    .成员 网关, 文本型, , , 
    .成员 主DNS, 文本型, , , 
    .成员 从DNS, 文本型, , , 


.DLL命令 GetAdaptersInfo, 整数型, "IPHlpApi", "", , 
    .参数 IpAdapterInfo, 字节集, 传址, 
    .参数 pOutBufLen, 整数型, 传址, 

.DLL命令 Len_iai, 整数型, "kernel32", "LocalSize", , 
    .参数 hMem, IP_ADAPTER_INFO, 传址, 

.DLL命令 Len_ias, 整数型, "kernel32", "LocalSize", , 
    .参数 hMem, IP_ADDR_STRING, 传址, 

.DLL命令 取变量地址_字节集, 整数型, "", "lstrcpynA", , 
    .参数 变量, 字节集, 传址, 
    .参数 变量, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 CopyMemory_iai, 空白型, "kernel32", "RtlMoveMemory", , 
    .参数 Destination, IP_ADAPTER_INFO, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 CopyMemory_ias, 空白型, "kernel32", "RtlMoveMemory", , 
    .参数 Destination, IP_ADDR_STRING, 传址, 
    .参数 Source, IP_ADDR_STRING, , 
    .参数 Length, 整数型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.类模块 获得网卡信息类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 获取网络信息_DOS管道, 整数型, , 返回网卡数量
.参数 IP信息, IP地址类型, 数组, 返回的网卡信息变量

.局部变量 返回量, 整数型, , , 
.局部变量 dos, 取DOS执行回显, , , 
.局部变量 信息内容, 文本型, , , 
.局部变量 F0, 文本型, , "0", 
.局部变量 F1, 文本型, , "0", 
.局部变量 F2, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 F变量, 文本型, , , 

赋值 (返回量, 0)
赋值 (信息内容, dos.执行回显 (“cmd /c ipconfig /all”))
.如果真 (不等于 (寻找文本 (信息内容, “Ethernet adapter ”, , 假), -1))
    赋值 (F0, 分割文本 (信息内容, “Ethernet adapter ”, ))
    重定义数组 (IP信息, 假, 相减 (取数组成员数 (F0), 1))
    .计次循环首 (取数组成员数 (F0), i)
        .如果真 (不等于 (i, 1))
            赋值 (F1, 分割文本 (F0 [i], “:”, ))
            赋值 (IP信息 [相减 (i, 1)].网卡名称, 过滤函数 (F1 [1], { 13 })) ' 获得名称
            赋值 (F2, 分割文本 (F1 [4], #换行符, ))
            赋值 (IP信息 [相减 (i, 1)].网卡型号, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 获得型号
            赋值 (F2, 分割文本 (F1 [5], #换行符, ))
            赋值 (IP信息 [相减 (i, 1)].MAC地址, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' MAC
            赋值 (F2, 分割文本 (F1 [6], #换行符, ))
            赋值 (IP信息 [相减 (i, 1)].DHCP, 判断控制 (过滤函数 (删首尾空 (F2 [1]), { 13 }))) ' MAC
             ' 这里判断是否是DHCP方式
            .如果 (等于 (IP信息 [相减 (i, 1)].DHCP, 假))
                赋值 (F2, 分割文本 (F1 [7], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].IP地址, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' IP地址
                赋值 (F2, 分割文本 (F1 [8], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].掩码, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 掩码
                赋值 (F2, 分割文本 (F1 [9], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].网关, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 网关
                赋值 (F2, 分割文本 (F1 [10], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].主DNS, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 主DNS
                调试输出 (F2)
                .如果真 (大于或等于 (取数组成员数 (F2), 2))
                    赋值 (IP信息 [相减 (i, 1)].从DNS, 过滤函数 (删首尾空 (F2 [2]), { 13 })) ' 主DNS
                .如果真结束
                
            .否则
                赋值 (F2, 分割文本 (F1 [8], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].IP地址, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' IP地址
                赋值 (F2, 分割文本 (F1 [9], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].掩码, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 掩码
                赋值 (F2, 分割文本 (F1 [10], #换行符, ))
                赋值 (IP信息 [相减 (i, 1)].网关, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 网关
                .如果真 (不等于 (寻找文本 (F1 [11], “DNS Servers”, , 假), -1)) ' 是否有dns服务器
                    赋值 (F2, 分割文本 (F1 [12], #换行符, ))
                    赋值 (IP信息 [相减 (i, 1)].主DNS, 过滤函数 (删首尾空 (F2 [1]), { 13 })) ' 主DNS
                    .如果真 (不等于 (取数组成员数 (F2), 2)) ' 判断是否有从DNS
                        赋值 (IP信息 [相减 (i, 1)].从DNS, 过滤函数 (删首尾空 (F2 [2]), { 13 })) ' 主DNS
                    .如果真结束
                    
                .如果真结束
                
            .如果结束
            
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
返回 (取数组成员数 (IP信息))

.子程序 获取网络信息_API, 整数型, , 
.参数 IP信息, IP地址类型, 数组, 返回的网卡信息变量

.局部变量 error, 整数型, , , 
.局部变量 size, 整数型, , , 
.局部变量 AdapterInfo, IP_ADAPTER_INFO, , , 
.局部变量 buf, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 addr, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 mac, 文本型, , , 
.局部变量 tmp, 文本型, , , 
.局部变量 Addr_ip, 整数型, , , 
.局部变量 buf_ip, IP_ADDR_STRING, , , 
.局部变量 DNS, 文本型, , , 
.局部变量 F0, 文本型, , "0", 

赋值 (error, GetAdaptersInfo ({ 0 }, size))
赋值 (buf, 取空白字节集 (size))
赋值 (addr, 取变量地址_字节集 (buf, buf, 0))
赋值 (error, GetAdaptersInfo (buf, size))
 ' 输出调试文本 (size)
赋值 (x, 1)
清除数组 (IP信息)
.如果真 (不等于 (error, 0))
    返回 (0)
.如果真结束
.循环判断首 ()
    重定义数组 (IP信息, 真, x)
    CopyMemory_iai (AdapterInfo, addr, 640)
    赋值 (IP信息 [x], 网卡名称, 取文本注册项 (4, 相加 (“SYSTEM\CurrentControlSet\Control\Network\{4D36E972-E325-11CE-BFC1-08002BE10318}\”, 到文本 (AdapterInfo.AdapterName), “\Connection\Name”), ))
    赋值 (IP信息 [x], 系统名称, 到文本 (AdapterInfo.AdapterName))
    赋值 (IP信息 [x], 网卡型号, 到文本 (AdapterInfo.Description))
    赋值 (mac, “”)
    .计次循环首 (相减 (AdapterInfo.AddressLength, 1), i)
        赋值 (tmp, 取十六进制文本 (AdapterInfo.Address [i]))
        赋值 (tmp, 前缀补零 (tmp, 2))
        赋值 (mac, 相加 (mac, 选择 (等于 (tmp, “0”), “00”, tmp), “-”))
    .计次循环尾 ()
    赋值 (mac, 取文本左边 (mac, 相减 (取文本长度 (mac), 1)))
    赋值 (IP信息 [x], MAC地址, mac)
    
    赋值 (Addr_ip, AdapterInfo.IpAddressList.Next)
    .循环判断首 ()
        CopyMemory_ias (buf_ip, AdapterInfo.IpAddressList, Len_ias (buf_ip))
        赋值 (IP信息 [x], IP地址, 到文本 (buf_ip.IpAddress))
        赋值 (IP信息 [x], 掩码, 到文本 (buf_ip.IpMask))
        赋值 (Addr_ip, buf_ip.Next)
    .循环判断尾 (不等于 (Addr_ip, 0))
    赋值 (Addr_ip, AdapterInfo.GatewayList.Next)
    .循环判断首 ()
        CopyMemory_ias (buf_ip, AdapterInfo.GatewayList, Len_ias (buf_ip))
        赋值 (IP信息 [x], 网关, 到文本 (buf_ip.IpAddress))
        赋值 (Addr_ip, buf_ip.Next)
    .循环判断尾 (不等于 (Addr_ip, 0))
    赋值 (DNS, 取文本注册项 (4, 相加 (“SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\”, 到文本 (AdapterInfo.AdapterName), “\NameServer”), ))
    赋值 (F0, 分割文本 (DNS, “,”, ))
    .如果 (等于 (取数组成员数 (F0), 2))
        赋值 (IP信息 [x], 主DNS, F0 [1])
        赋值 (IP信息 [x], 从DNS, F0 [2])
    .否则
        赋值 (IP信息 [x], 主DNS, DNS)
    .如果结束
    赋值 (x, 相加 (x, 1))
    赋值 (addr, AdapterInfo.Next)
.循环判断尾 (不等于 (addr, 0))
返回 (取数组成员数 (IP信息))

.子程序 判断控制, 逻辑型, , 
.参数 文本变量, 文本型, , 

.局部变量 返回值, 逻辑型, , , 

.如果 (等于 (文本变量, “Yes”))
    赋值 (返回值, 真)
.否则
    赋值 (返回值, 假)
.如果结束
返回 (返回值)

.子程序 操作网卡, 逻辑型, , 主要用于禁用网卡和启动网卡
.参数 网卡名称, 文本型, , 
.参数 控制, 逻辑型, 可空, 真为启用假为禁止

.局部变量 返回值, 逻辑型, , , 
.局部变量 变量值, 文本型, , , 

.如果 (等于 (控制, 真))
    赋值 (变量值, “enabled”)
.否则
    赋值 (变量值, “disabled”)
.如果结束
赋值 (返回值, 运行 (相加 (“cmd /c netsh interface set interface name=”, #引号, 网卡名称, #引号, “ admin=”, 变量值), 真, 1))
返回 (返回值)

.子程序 设置IP地址, 逻辑型, 公开, 设置IP地址，成功返回真
.参数 IP信息, IP地址类型, , 

.局部变量 命令行, 文本型, , , 
.局部变量 F0, 文本型, , "0", 

赋值 (命令行, 子文本替换 (到文本 (#setinterface), “{wk}”, IP信息.网卡名称, , , 真))
赋值 (命令行, 子文本替换 (命令行, “{ip}”, IP信息.IP地址, , , 真))
赋值 (命令行, 子文本替换 (命令行, “{ym}”, IP信息.掩码, , , 真))
赋值 (F0, 分割文本 (到文本 (命令行), “&”, ))
赋值 (命令行, F0 [1])
.如果真 (不等于 (IP信息.网关, “”))
    赋值 (命令行, 相加 (F0 [1], “&”, F0 [2]))
    赋值 (命令行, 子文本替换 (命令行, “{wg}”, IP信息.网关, , , 真))
.如果真结束
.如果真 (不等于 (IP信息.主DNS, “”))
    赋值 (命令行, 相加 (命令行, “&”, F0 [3]))
    赋值 (命令行, 子文本替换 (命令行, “{zdns}”, IP信息.主DNS, , , 真))
.如果真结束
.如果真 (不等于 (IP信息.从DNS, “”))
    赋值 (命令行, 相加 (命令行, “&”, F0 [4]))
    赋值 (命令行, 子文本替换 (命令行, “{cdns}”, IP信息.从DNS, , , 真))
.如果真结束
 ' 调试输出 (命令行)
运行 (相加 (“cmd /c ”, 命令行), 真, 1)
返回 (假)

.子程序 前缀补零, 文本型, , 前缀补零系统
.参数 文本, 文本型, , 
.参数 位数, 整数型, , 

.局部变量 jc_a, 整数型, , , 
.局部变量 内容, 文本型, , , 

.如果 (小于 (取文本长度 (到文本 (文本)), 位数))
    .计次循环首 (相减 (位数, 取文本长度 (到文本 (文本))), jc_a)
        .如果 (等于 (内容, “”))
            赋值 (内容, “0”)
        .否则
            赋值 (内容, 相加 (“0”, 内容))
        .如果结束
        
    .计次循环尾 ()
    返回 (相加 (内容, 到文本 (文本)))
.否则
    返回 (到文本 (文本))
.如果结束


.子程序 过滤函数, 文本型, , 过滤看不到字符
.参数 被过滤文本, 文本型, , 
.参数 过滤字节集, 字节集, , 

.局部变量 返回值, 文本型, , , 

赋值 (返回值, 到文本 (子字节集替换 (到字节集 (被过滤文本), 过滤字节集, , , )))
返回 (返回值)

.类模块 取DOS执行回显, , , 去DOS命令回显

.子程序 执行回显, 文本型, , 执行完成命令后获得回显信息
.参数 DOS命令, 文本型, , 执行的DOS命令




 ' 不属于任何一个程序集、类模块的函数：
