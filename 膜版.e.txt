 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 360
    高度 = 260
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 3
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 真
    窗口类名 = “”
    底图 =  ' 已保存到：D:\易语言学习\Data\膜版.e\_启动窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 主界面
    左边 = 50
    顶边 = 50
    宽度 = 660
    高度 = 430
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 输入框普通, " ' 已保存到：D:\易语言学习\Data\膜版.e\输入框普通", , 
.图片 输入框点燃, " ' 已保存到：D:\易语言学习\Data\膜版.e\输入框点燃", , 
.图片 头像, " ' 已保存到：D:\易语言学习\Data\膜版.e\头像", , 
.图片 图标, " ' 已保存到：D:\易语言学习\Data\膜版.e\图标", , 
.图片 下拉条按钮正常, " ' 已保存到：D:\易语言学习\Data\膜版.e\下拉条按钮正常", , 
.图片 下拉条按钮点燃, " ' 已保存到：D:\易语言学习\Data\膜版.e\下拉条按钮点燃", , 
.图片 下拉条按钮按下, " ' 已保存到：D:\易语言学习\Data\膜版.e\下拉条按钮按下", , 
.图片 最大正常, " ' 已保存到：D:\易语言学习\Data\膜版.e\最大正常", , 主界面
.图片 最大经过, " ' 已保存到：D:\易语言学习\Data\膜版.e\最大经过", , 主界面
.图片 最大按下, " ' 已保存到：D:\易语言学习\Data\膜版.e\最大按下", , 主界面
.图片 最小正常, " ' 已保存到：D:\易语言学习\Data\膜版.e\最小正常", , 主界面
.图片 最小经过, " ' 已保存到：D:\易语言学习\Data\膜版.e\最小经过", , 主界面
.图片 最小按下, " ' 已保存到：D:\易语言学习\Data\膜版.e\最小按下", , 主界面
.图片 关闭正常, " ' 已保存到：D:\易语言学习\Data\膜版.e\关闭正常", , 
.图片 关闭按下, " ' 已保存到：D:\易语言学习\Data\膜版.e\关闭按下", , 
.图片 关闭经过, " ' 已保存到：D:\易语言学习\Data\膜版.e\关闭经过", , 
.图片 , , , 
.图片 , , , 
.常量 GWL_WNDPROC, "-4", , 
.常量 GRADIENT_FILL_RECT_H, "0", , 
.常量 GRADIENT_FILL_RECT_V, "1", , 
.常量 PS_SOLID, "0", , 
.常量 SRCCOPY, "13369376", , 
.常量 WM_PAINT, "15", , 
.常量 WM_LBUTTONUP, "514", , 
.常量 DT_CENTER, "1", , 
.常量 DT_VCENTER, "4", , 
.常量 DT_SINGLELINE, "32", , 
.常量 WM_GETFONT, "49", , 
.常量 TRANSPARENT, "1", , 
.常量 NULL_BRUSH, "5", , 
.常量 WM_LBUTTONDOWN, "513", , 按下鼠标左键
.常量 BS_OWNERDRAW, "11", , 
.常量 WM_LBUTTONDBLCLK, "515", , 
.常量 HOVER_DEFAULT, "-1", , 
.常量 WM_MOUSEMOVE, "512", , 
.常量 TME_LEAVE, "2", , 
.常量 TME_HOVER, "1", , 
.常量 WM_MOUSELEAVE, "675", , 
.常量 BM_SETSTYLE, "244", , 
.常量 WM_MOUSEHOVER, "673", , 
.常量 WM_TIMER, "275", , 
.常量 WM_SETFOCUS, "7", , 
.常量 WM_KILLFOCUS, "8", , 
.常量 GWL_STYLE, "-16", , 
.常量 RDW_INVALIDATE, "1", , 
.常量 WM_ACTIVATE, "6", , 
.常量 BS_AUTOCHECKBOX, "3", , 
.常量 BS_AUTO3STATE, "6", , 
.常量 BS_AUTORADIOBUTTON, "9", , 
.常量 WM_DESTROY, "2", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二




数据类型 GRADIENT_RECT, , 
    .成员 UpperLeft, 整数型, , , 
    .成员 LowerRight, 整数型, , , 

数据类型 DRAWITEMSTRUCT, 公开, 
    .成员 CtlType, 整数型, , , 
    .成员 CtlID, 整数型, , , 
    .成员 itemId, 整数型, , , 
    .成员 itenAction, 整数型, , , 
    .成员 itemState, 整数型, , , 
    .成员 hwndItem, 整数型, , , 
    .成员 hdc, 整数型, , , 
    .成员 rcTtem, RECT, , , 
    .成员 itemData, 整数型, , , 

数据类型 Font, 公开, 
    .成员 字体高度, 整数型, , , 
    .成员 字体宽度, 整数型, , , 
    .成员 旋转, 整数型, , , 
    .成员 加粗, 整数型, , , 400正常
    .成员 倾斜, 整数型, , , 
    .成员 下划线, 整数型, , , 
    .成员 删除线, 整数型, , , 
    .成员 字体名称, 文本型, , , 

数据类型 PAINTSTRUCT, 公开, 
    .成员 hdc, 整数型, , , 
    .成员 fErase, 整数型, , , 
    .成员 rcPaint, RECT, , , 
    .成员 fRestore, 整数型, , , 
    .成员 fIncUpdate, 整数型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 POINTAPI, 公开, 坐标_
    .成员 X, 整数型, , , x，横向位置
    .成员 Y, 整数型, , , y，纵向位置

数据类型 RECT, 公开, 矩形;
    .成员 left, 整数型, , , 
    .成员 top, 整数型, , , 
    .成员 right, 整数型, , , 
    .成员 bottom, 整数型, , , 

数据类型 TRACKMOUSEEVENT, 公开, 
    .成员 cbSize, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 hwndTrack, 整数型, , , 
    .成员 dwHoverTime, 整数型, , , 

数据类型 TRIVERTEX, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 
    .成员 Red, 短整数型, , , 
    .成员 Green, 短整数型, , , 
    .成员 Blue, 短整数型, , , 
    .成员 zzAlpha, 短整数型, , , 

数据类型 数据包, , 发送与接收时处理的数据
    .成员 数据头, 字节集, , , 留作判断数据是干什么的{自节长度为4}
    .成员 数据长度, 字节集, , , {自节长度为4}
    .成员 数据, 字节集, , , 长度=倒整数（倒文本（数据长度）-8

数据类型 密码, , 
    .成员 键代码, 整数型, , "22", 
    .成员 匿名成员1918, 空白型, , , 
    .成员 匿名成员1919, 空白型, , , 

数据类型 窗口操作按钮, , 
    .成员 动画物体, 未知类型0x30009, , , 
    .成员 图片位置, 图片位置, , , 
    .成员 标记, 整数型, , , 

数据类型 图片位置, , 
    .成员 X, 整数型, , , 
    .成员 y, 整数型, , , 


.DLL命令 SetProp_, 整数型, "user32", "SetPropA", , 增加或修改属性列项
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 hData, 整数型, , 

.DLL命令 GetProp_, 整数型, "user32", "GetPropA", , 从窗口属性表列中返回数据句柄
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 

.DLL命令 BeginPaint, 整数型, "user32", "BeginPaint", 公开, 准备一个画图窗
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 BeginPath, 整数型, "gdi32", "BeginPath", 公开, 启动一个路径分支。在这个命令后执行的GDI绘图命令会自动成为路径的一部分。对线段的连接会结合到一起。设备场景中任何现成的路径都会被清除。参考下表，其中列出的函数都可记录到路径中  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 欲在其中记录的设备场景;

.DLL命令 BitBlt, 整数型, "gdi32", "BitBlt", 公开, 将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , 目标设备场景
    .参数 目标横坐标, 整数型, , 对目标DC中目标矩形左上角位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 目标纵坐标, 整数型, , 同上
    .参数 传输图像宽度, 整数型, , 欲传输图象的宽度和高度
    .参数 传输图像高度, 整数型, , 同上
    .参数 源设备场景, 整数型, , 源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , 对源DC中源矩形左上角位置进行描述的那个点。用源DC的逻辑坐标表示
    .参数 源纵坐标, 整数型, , 同上
    .参数 光栅运算方式, 整数型, , 传输过程要执行的光栅运算;

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", 公开, 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 句柄, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 参数, 整数型, , 
    .参数 参数, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "gdi32", "CreateCompatibleBitmap", 公开, 
    .参数 hDC, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 

.DLL命令 CreateCompatibleDC, 整数型, "gdi32", "CreateCompatibleDC", 公开, 
    .参数 hDC, 整数型, , 

.DLL命令 CreateFont, 整数型, "gdi32", "CreateFontA", 公开, 用指定的属性创建一种逻辑字体  执行成功则返回逻辑字体的句柄，零表示失败。会设置GetLastError
    .参数 字体高度, 整数型, , IfHeight
    .参数 字体宽度, 整数型, , IfWidth
    .参数 旋转, 整数型, , IfEscapement
    .参数 Orientation, 整数型, , IfOrientation
    .参数 加粗, 整数型, , IfWeight
    .参数 倾斜, 整数型, , IfItalic
    .参数 下划线, 整数型, , IfUnderline
    .参数 删除线, 整数型, , IfStrikeOut
    .参数 内码, 整数型, , IfCharSet
    .参数 OutputPrecision, 整数型, , IfOutputPrecision
    .参数 CP, 整数型, , IfClipPrecision
    .参数 输出质量, 整数型, , IfQuality
    .参数 PAF, 整数型, , IfPitchAndFamily
    .参数 新字体名, 文本型, , IfFaceName;

.DLL命令 CreatePen, 整数型, "gdi32", "CreatePen", 公开, 用指定的样式、宽度和颜色创建一个画笔  如函数执行成功，就返回指向新画笔的一个句柄；否则返回零
    .参数 风格, 整数型, , 指定画笔样式，可以是下述常数之一;PS_SOLID：画笔画出的是实线;PS_DASH：画笔画出的是虚线（nWidth必须是1）;PS_DOT：画笔画出的是点线（nWidth必须是1）;PS_DASHDOT：画笔画出的是点划线（nWidth必须是1）;PS_DASHDOTDOT：画笔画出的是点-点-划线（nWidth必须是1）;PS_NULL：画笔不能画图;PS_INSIDEFRAME：画笔在由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框中画图。如指定的准确RGB颜色不存在，就进行抖动处理
    .参数 宽度, 整数型, , 以逻辑单位表示的画笔的宽度
    .参数 颜色, 整数型, , 画笔的RGB颜色;

.DLL命令 CreateSolidBrush, 整数型, "gdi32", "CreateSolidBrush", 公开, 
    .参数 crColor, 整数型, , 

.DLL命令 DefWindowProc, 整数型, "user32.dll", "DefWindowProcA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 DeleteDC, 整数型, "gdi32", "DeleteDC", 公开, 
    .参数 hDC, 整数型, , 

.DLL命令 DeleteObject, 整数型, "gdi32", "DeleteObject", 公开, 
    .参数 hObject, 整数型, , 

.DLL命令 DrawFocusRect, 整数型, "user32", "DrawFocusRect", 公开, 
    .参数 hdc, 整数型, , 
    .参数 lpRect, RECT, , 

.DLL命令 DrawIcon, 整数型, "user32", "DrawIcon", 公开, 
    .参数 设备场景, 整数型, , 
    .参数 位置x, 整数型, , 
    .参数 位置y, 整数型, , 
    .参数 图标指针, 整数型, , 

.DLL命令 DrawText, 整数型, "user32", "DrawTextA", 公开, 
    .参数 hdc, 整数型, , 
    .参数 lpStr, 文本型, , 
    .参数 nCount, 整数型, , 
    .参数 lpRect, RECT, 传址, 
    .参数 wFormat, 整数型, , 

.DLL命令 Ellipse, 整数型, "gdi32", "Ellipse", 公开, 描绘一个椭圆，由指定的矩形围绕。椭圆用当前选择的画笔描绘，并用当前选择的刷子填充  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 
    .参数 矩形左上角位置横坐标, 整数型, , 
    .参数 矩形左上角位置纵坐标, 整数型, , 
    .参数 矩形右下角位置横坐标, 整数型, , 
    .参数 矩形右下角位置纵坐标, 整数型, , 

.DLL命令 EndPaint_API, 整数型, "user32", "EndPaint", 公开, 在指定窗口中标记图画结尾标志
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 EndPath, 整数型, "gdi32", "EndPath", 公开, 停止定义一个路径。如执行成功，BeginPath函数调用和这个函数之间发生的所有绘图操作都会正式成为指定设备场景的路径  非零表示成功，零表示失败。会将GetLastError设置为下述值之一：ERROR_CAN_NOT_COMPLETE ;    或 ERROR_INVALID_PARAMETER
    .参数 设备场景句柄, 整数型, , 设备场景;

.DLL命令 FillRect, 整数型, "user32", "FillRect", 公开, 
    .参数 hdc, 整数型, , 
    .参数 lpRect, RECT, 传址, 
    .参数 hBrush, 整数型, , 

.DLL命令 FloodFill, 整数型, "gdi32", "FloodFill", 公开, 用当前选定的刷子在指定的设备场景中填充一个区域。区域是由颜色crColor定义的  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 横坐标, 整数型, , 开始填充的那个点，用逻辑坐标表示
    .参数 纵坐标, 整数型, , 同上
    .参数 边界颜色, 整数型, , 欲使用的边界颜色。由这个颜色包围的表面会被填充;

.DLL命令 FrameRect, 空白型, "", "FrameRect", 公开, 
    .参数 hdc, 整数型, , 
    .参数 lpRect, RECT, , 
    .参数 hBrush, 整数型, , 

.DLL命令 GetDC, 整数型, "user32", "GetDC", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 GetStockObject, 整数型, "gdi32", "GetStockObject", 公开, 
    .参数 fnObject, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "user32", "GetWindowRect", 公开, 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 想获得范围矩形的那个窗口的句柄
    .参数 lpRect, RECT, , RECT，屏幕坐标中随同窗口装载的矩形;

.DLL命令 LineTo, 整数型, "gdi32", "LineTo", 公开, 用当前画笔画一条线，从当前位置连到一个指定的点。这个函数调用完毕，当前位置变成x,y点  非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 终点横坐标, 整数型, , 线段终点位置，采用逻辑坐标表示。这个点不会实际画出来；它不属于线段的一部分;
    .参数 终点纵坐标, 整数型, , 同上;

.DLL命令 LoadBitmap, 整数型, "user32", "LoadBitmapA", 公开, 
    .参数 hInstance, 整数型, , 
    .参数 lpBitmapName, 文本型, , 

.DLL命令 LoadImage, 整数型, "user32", "LoadImageA", 公开, 
    .参数 hInst, 整数型, , 
    .参数 lpsz, 文本型, , 
    .参数 un1, 整数型, , 
    .参数 n1, 整数型, , 
    .参数 n2, 整数型, , 
    .参数 un2, 整数型, , 

.DLL命令 MoveToEX, 整数型, "gdi32", "MoveToEx", 公开, 为指定的设备场景指定一个新的当前画笔位置。前一个位置保存在lpPoint中  非零表示成功，零表示失败
    .参数 设备场景, 整数型, , 指向一个设备场景的句柄
    .参数 横坐标, 整数型, , 采用逻辑坐标表示的新画笔位置
    .参数 纵坐标, 整数型, , 同上
    .参数 画笔位置, 整数型, , POINTAPI，用于保存前一个画笔位置。可以为NULL（将参数改为ByVal As 以传递一个空参数）;

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", 公开, 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）  执行成功为1，否则为0
    .参数 hwnd, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 hdc, 整数型, , 要释放的设备场景句柄;

.DLL命令 SelectObject, 整数型, "gdi32", "SelectObject", 公开, 
    .参数 hDC, 整数型, , 
    .参数 hObject, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
    .参数 wMsg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, 整数型, , 具体取决于消息;

.DLL命令 SetBkColor, 整数型, "gdi32", "SetBkColor", 公开, 为指定的设备场景设置背景颜色。背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode  前一个背景色，CLR_INVALID表示出错
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 crColor, 整数型, , 新背景颜色的RGB颜色值;

.DLL命令 SetBkMode, 整数型, "gdi32", "SetBkMode", 公开, 
    .参数 hdc, 整数型, , 
    .参数 nBkMode, 整数型, , 

.DLL命令 SetPixel, 整数型, "gdi32", "SetPixel", 公开, 
    .参数 hDC, 整数型, , 
    .参数 X, 整数型, , 
    .参数 Y, 整数型, , 
    .参数 crColor, 整数型, , 

.DLL命令 SetTextColor, 整数型, "gdi32", "SetTextColor", 公开, 设置当前文本颜色。这种颜色也称为“前景色”  文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 nIndex, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 dwNewLong, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 StretchBlt, 整数型, "gdi32", "StretchBlt", 公开, 
    .参数 hDC, 整数型, , 
    .参数 X, 整数型, , 
    .参数 Y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hSrcDC, 整数型, , 
    .参数 xSrc, 整数型, , 
    .参数 ySrc, 整数型, , 
    .参数 nSrcWidth, 整数型, , 
    .参数 nSrcHeight, 整数型, , 
    .参数 dwRop, 整数型, , 

.DLL命令 TextOut, 整数型, "gdi32", "TextOutA", 公开, 
    .参数 hdc, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 nCount, 整数型, , 

.DLL命令 TrackMouseEvent, 整数型, "user32.dll", "TrackMouseEvent", 公开, 
    .参数 lpEventTrack, TRACKMOUSEEVENT, , 

.DLL命令 UpdateWindow, 整数型, "user32", "UpdateWindow", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 GradientFill_, 逻辑型, "Msimg32.dll", "GradientFill", , 
    .参数 hdc, 整数型, , 
    .参数 pVertex, TRIVERTEX, 传址 数组, 未知类型：PTRIVERTEX。
    .参数 dwNumVertex, 整数型, , 
    .参数 pMesh, 整数型, , 
    .参数 dwNumMesh, 整数型, , 
    .参数 dwMode, 整数型, , 

.DLL命令 VarPtr1, 整数型, "msvbvm50.dll", "VarPtr", , 
    .参数 参数, 整数型, 传址, 

.DLL命令 SetWindowRgn_, 整数型, "user32", "SetWindowRgn", , 这是那些很难有人注意到的对编程者来说是个巨大的宝藏的隐含的API函数中的一个。本函数允许您改变窗口的区域。<br>;    通常所有窗口都是矩形的――窗口一旦存在就含有一个矩形区域。本函数允许您放弃该区域。这意味着您可以创建圆的、星形的窗口，也可以将它分为两个或许多部分――实际上可以是任何形状  执行成功为非零值，失败为0
    .参数 hWnd, 整数型, , 将设置其区域的窗口
    .参数 hRgn, 整数型, , 将设置的区域的句柄，一旦设置了该区域，就不能使用或修改该区域句柄，也不要删除它
    .参数 bRedraw, 逻辑型, , Boolean，若为TRUE，则立即重画窗口;

.DLL命令 CreateRoundRectRgn_, 整数型, "gdi32", "CreateRoundRectRgn", , 创建一个圆角矩形，该矩形由X1，Y1-X2，Y2确定，并由X3，Y3确定的椭圆描述圆角弧度  执行成功则为区域句柄，失败则为0
    .参数 X1, 整数型, , 矩形左上角的X，Y坐标
    .参数 Y1, 整数型, , 同上
    .参数 X2, 整数型, , 矩形右下角的X，Y坐标
    .参数 Y2, 整数型, , 同上
    .参数 X3, 整数型, , 圆角椭圆的宽。其范围从0（没有圆角）到矩形宽（全圆）
    .参数 Y3, 整数型, , 圆角椭圆的高。其范围从0（没有圆角）到矩形高（全圆）;

.DLL命令 RoundRect_, 整数型, "gdi32", "RoundRect", , 用当前选定的画笔画一个圆角矩形，并用当前选定的刷子在其中填充。X3和Y3定义了用于生成圆角的椭圆  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 用于绘图的设备场景
    .参数 X1, 整数型, , 对矩形左上角位置进行说明的X，Y坐标
    .参数 Y1, 整数型, , 同上
    .参数 X2, 整数型, , 对矩形右下角位置进行说明的X，Y坐标
    .参数 Y2, 整数型, , 同上
    .参数 X3, 整数型, , 用于生成圆角效果的一个椭圆的宽度。取值范围从零（表示不加圆角），一直到矩形的宽度（全圆）
    .参数 Y3, 整数型, , 用于生成圆角效果的一个椭圆的高度。取值范围从零（表示不加圆角），一直到矩形的高度（全圆）;

.DLL命令 SelectClipRgn_, 整数型, "gdi32", "SelectClipRgn", , 为指定设备场景选择新的剪裁区  下列常数之一，以描述当前剪裁区：;    COMPLEXREGION：该区域有互相交叠的边界;    SIMPLEREGION：该区域边界没有互相交叠;    NULLREGION：区域为空;    ERRORAPI：发生了错误（保留原有剪裁区）
    .参数 hdc, 整数型, , 将设置新剪裁区的设备场景
    .参数 hRgn, 整数型, , 将为设备场景设置剪裁区的句柄，该区域使用设备坐标;

.DLL命令 SetTimer_, 整数型, "user32", "SetTimer", , 安装系统定时器
    .参数 hWnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 
    .参数 uElapse, 整数型, , 
    .参数 lpTimerFunc, 整数型, , 

.DLL命令 KillTimer_, 整数型, "user32", "KillTimer", , 中止定时器
    .参数 hwnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 

.DLL命令 AlphaBlend_, 逻辑型, "msimg32.dll", "AlphaBlend", , 
    .参数 hdc, 整数型, , 
    .参数 nXOriginDest, 整数型, , 
    .参数 nYOriginDest, 整数型, , 
    .参数 nWidthDest, 整数型, , 
    .参数 nHeightDest, 整数型, , 
    .参数 hdcSrc, 整数型, , 
    .参数 nXOriginSrc, 整数型, , 
    .参数 nYOriginSrc, 整数型, , 
    .参数 nWidthSrc, 整数型, , 
    .参数 nHeightSrc, 整数型, , 
    .参数 BLENDFUNCT, 整数型, , 

.DLL命令 GetWindowDC_, 整数型, "user32", "GetWindowDC", , 获取整个窗口（包括边框、滚动条、标题栏、菜单等）的设备场景  执行成功为窗口设备场景，失败则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口;

.DLL命令 GetWindowText_, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）  复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 hwnd, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 lpString, 文本型, 传址, 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 cch, 整数型, , lp缓冲区的长度;

.DLL命令 GetWindowTextLength_, 整数型, "user32", "GetWindowTextLengthA", , 调查窗口标题文字或控件内容的长短（在vb里使用：直接使用vb窗体或控件的caption或text属性）  字串长度，不包括空中止字符
    .参数 hwnd, 整数型, , 想调查文字长度的窗口的句柄;

.DLL命令 Rectangle_, 整数型, "gdi32", "Rectangle", , 用当前选定的画笔描绘矩形，并用当前选定的刷子进行填充  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 X1, 整数型, , 指定矩形左上角位置
    .参数 Y1, 整数型, , 同上
    .参数 X2, 整数型, , 指定矩形右下角位置
    .参数 Y2, 整数型, , 同上;

.DLL命令 LocalSize_, 整数型, "kernel32", "LocalSize", , 返回本地内存块大小
    .参数 hMem, TRACKMOUSEEVENT, , 

.DLL命令 RemoveProp_, 整数型, "user32", "RemovePropA", , 删除属性列入口
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 

.DLL命令 RedrawWindow_, 整数型, "user32", "RedrawWindow", , 根据fuRedraw旗标的设置，重画全部或部分窗口  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 要重画的窗口的句柄。零表示更新桌面窗口
    .参数 lprcUpdate, 整数型, , RECT，窗口中需要重画的一个矩形区域
    .参数 hrgnUpdate, 整数型, , 一个“区”的句柄，这个区描述了要重画的窗口区域。“区”：Region
    .参数 fuRedraw, 整数型, , 规定具体重画操作的旗标。下列常数可组合使用，从而进行复杂的重画行动;RDW_ERASE：重画前，先清除重画区域的背景。也必须指定RDW_INVALIDATE;RDW_FRAME：如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW_INVALIDATE;RDW_INTERNALPAINT：即使窗口并非无效，也向其投递一条WM_PAINT消息;RDW_INVALIDATE：禁用（屏蔽）重画区域;RDW_NOERASE：禁止删除重画区域的背景;RDW_NOFRAME：禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW_VALIDATE;RDW_NOINTERNALPAINT：禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息;RDW_VALIDATE：检验重画区域;RDW_ERASENOW：立即删除指定的重画区域;RDW_UPDATENOW：立即更新指定的重画区域;RDW_ALLCHILDREN：重画操作包括子窗口（前提是它们存在于重画区域）;RDW_NOCHILDREN：重画操作排除子窗口（前提是它们存在于重画区域）;

.DLL命令 GetWindowLong_, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 hwnd, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 nIndex, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 GetClassName_, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名  以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 hwnd, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 lpClassName, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 nMaxCount, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 EnumChildWindows_, 整数型, "user32", "EnumChildWindows", , 为指定的父窗口枚举子窗口  非零表示成功，零表示失败
    .参数 hWndParent, 整数型, , 欲枚举子窗口的父窗口的句柄
    .参数 lpEnumFunc, 整数型, , 为每个子窗口调用的函数的指针。用AddressOf运算符获得函数在一个标准模块中的地址
    .参数 lParam, 整数型, , 在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的。（原文：Value that is passed to the EnumWindows event of the dwcbkd32.ocx custom control during enumeration. The meaning of this value is defined by the programmer.）;

.DLL命令 GetFocus_, 整数型, "user32", "GetFocus", , 获得拥有输入焦点的窗口的句柄  拥有焦点的那个窗口的句柄。如没有窗口拥有输入焦点，则返回零

.窗口程序集 图形界面, , , 

.程序集变量 图形标记, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (图形标记, .未知支持库函数_35 (0, 0, 真, “”))
图形标记.未知支持库函数_44 (#头像, )
.未知支持库函数_35 (0, 0, 真, “”).未知支持库函数_44 (#图标, )

Attach (取窗口句柄 ())
Attach (取窗口句柄 ())
Attach (取窗口句柄 ())
Attach (取窗口句柄 ())
 ' 圆角化窗口 (登录按钮.取窗口句柄 (), 4)
SetProp_ (取窗口句柄 (), “OLDPROC”, SetWindowLong (取窗口句柄 (), #GWL_WNDPROC, 到整数 (&DialogProc)))
赋值 (.图片, #输入框普通)
赋值 (.图片, #输入框普通)
赋值 (.正常图片, #下拉条按钮正常)
赋值 (.点燃图片, #下拉条按钮点燃)
赋值 (.按下图片, #下拉条按钮按下)

.子程序 _帐号框1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.图片, #输入框点燃))
    赋值 (.图片, #输入框点燃)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _帐号框1_获得焦点, 空白型, , 
.如果真 (等于 (.内容, “请输入帐号”))
    赋值 (.内容, “”)
    赋值 (.文本颜色, #黑色)
.如果真结束


.子程序 _帐号框1_失去焦点, 空白型, , 
.如果真 (等于 (.内容, “”))
    赋值 (.内容, “请输入帐号”)
    赋值 (.文本颜色, #灰色)
.如果真结束


.子程序 _密码框_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.图片, #输入框点燃))
    赋值 (.图片, #输入框点燃)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _密码框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果 (等于 (功能键状态, #Ctrl键状态))
    返回 (假)
.否则
    输出调试文本 (相加 (到文本 (键代码), “ ”))
    .如果 (并且 (不等于 (键代码, #退格键), 不等于 (键代码, #Shift键), 不等于 (键代码, #CapsLock键), 不等于 (键代码, #Ctrl键), 不等于 (键代码, #Alt键), 不等于 (键代码, #Del键), 不等于 (键代码, #End键), 不等于 (键代码, #Home键), 不等于 (键代码, #PageUp键), 不等于 (键代码, #PageDown键), 不等于 (键代码, #ScrollLock键), 不等于 (键代码, #NumLock键), 不等于 (键代码, #Ins键), 不等于 (键代码, #Pause键), 不等于 (键代码, #F1键), 不等于 (键代码, #F2键), 不等于 (键代码, #F3键), 不等于 (键代码, #F4键), 不等于 (键代码, #F5键), 不等于 (键代码, #F6键), 不等于 (键代码, #F7键), 不等于 (键代码, #F8键), 不等于 (键代码, #F9键), 不等于 (键代码, #F10键), 不等于 (键代码, #F11键), 不等于 (键代码, #F12键), 不等于 (键代码, #Esc键), 不等于 (键代码, #上光标键), 不等于 (键代码, #下光标键), 不等于 (键代码, #左光标键), 不等于 (键代码, #右光标键), 不等于 (键代码, #回车键), 不等于 (键代码, 93)))
        “●”.加入文本 ()
        返回 (假)
    .否则
        .如果 (等于 (键代码, #回车键))
            _登录按钮_被单击 ()
        .否则
            
        .如果结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    
.如果结束



.子程序 _密码框_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

返回 (假)


.子程序 _密码框1_获得焦点, 空白型, , 
.如果真 (等于 (.内容, “请输入密码”))
    赋值 (.字体.字体名称, “MS Sans Serif”)
    赋值 (.输入方式, 2)
    赋值 (.内容, “”)
    赋值 (.文本颜色, #黑色)
.如果真结束


.子程序 _密码框1_失去焦点, 空白型, , 

.如果真 (等于 (.内容, “”))
    赋值 (.字体.字体名称, “MS Sans Serif”)
    赋值 (.字体.字体名称, “”)
    赋值 (.输入方式, 0)
    赋值 (.内容, “请输入密码”)
    赋值 (.文本颜色, #灰色)
.如果真结束


.子程序 _密码框1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.图片, #输入框点燃))
    赋值 (.图片, #输入框点燃)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _图形按钮_小键盘按钮_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.图片, #输入框点燃))
    赋值 (.图片, #输入框点燃)
.如果真结束


.子程序 _密码框1_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

赋值 (.起始选择位置, -1)


.子程序 _图形按钮_关闭_被单击, 空白型, , 
置托盘图标 ()
结束 ()

.子程序 _图形按钮_最小化_被单击, 空白型, , 
赋值 (_启动窗口., 假)


.子程序 _密码框1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

获取焦点 ()
返回 (假)

.子程序 _切换模式按钮_被单击, 空白型, , 
 ' .如果 (等于 (.可视, 假))
     ' 图片框3.可视 ＝ 真
.否则
     ' 图片框3.可视 ＝ 假
.如果结束


.子程序 __启动窗口_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (不等于 (.图片, #输入框普通))
    赋值 (.图片, #输入框普通)
.如果真结束
.如果真 (不等于 (.图片, #输入框普通))
    赋值 (.图片, #输入框普通)
.如果真结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _客户1_数据到达, 空白型, , 


.子程序 _登录按钮_被单击, 空白型, , 
载入 (主界面, , 真)


.程序集 杂七杂八, , , 

.子程序 Attach, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 hdc, 整数型, , , 
.局部变量 hBitmap, 整数型, , , 
.局部变量 hMemDC, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 hRgn, 整数型, , , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

.如果真 (不等于 (GetProp_ (hwnd, “OLDPROC”), 0))
    返回 ()
.如果真结束
赋值 (hdc, GetWindowDC_ (hwnd))
.计次循环首 (4, i)
    赋值 (hMemDC, CreateCompatibleDC (hdc))
    赋值 (hBitmap, CreateCompatibleBitmap (hdc, GetWH (hwnd, 真), GetWH (hwnd, 假)))
    SelectObject (hMemDC, hBitmap)
    DeleteObject (hBitmap)
    SetProp_ (hwnd, 相加 (“hMemDC”, 到文本 (i)), hMemDC)
.计次循环尾 ()
 ' 本源码来自易语言资源网(www.5A5X.com)
ReleaseDC (hwnd, hdc)
SendMessage (hwnd, #BM_SETSTYLE, #BS_OWNERDRAW, 1)
赋值 (hRgn, CreateRoundRectRgn_ (0, 0, 相加 (GetWH (hwnd, 真), 1), 相加 (GetWH (hwnd, 假), 1), 4, 4))
SetWindowRgn_ (hwnd, hRgn, 真)
DeleteObject (hRgn)
SetProp_ (hwnd, “OLDPROC”, SetWindowLong (hwnd, #GWL_WNDPROC, 到整数 (&WndProc)))
SetProp_ (hwnd, “TIMERID”, 0)
SetProp_ (hwnd, “STATE”, 1)
.判断开始 (等于 (GetFocus_ (), hwnd))
    SetProp_ (hwnd, “STATE2”, 4)
.默认
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断结束
SetProp_ (hwnd, “ALPHALEVEL”, 0)
DrawMemDC (hwnd)
ModifyStyle (hwnd, , 67108864)

 ' RedrawWindow_ (hwnd, 0, 0, #RDW_INVALIDATE)

.子程序 DialogProc, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.判断开始 (等于 (msg, #WM_ACTIVATE))
    .判断开始 (并且 (不等于 (lParam, hwnd), 不等于 (lParam, 0)))
        EnumChildWindows_ (lParam, 到整数 (&EnumChildWindowsProc), 0)
    .默认
        
    .判断结束
    
.默认
    
.判断结束
返回 (CallWindowProc (GetProp_ (hwnd, “OLDPROC”), hwnd, msg, wParam, lParam))

.子程序 EnumChildWindowsProc, 逻辑型, , 
.参数 hwnd, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 style, 整数型, , , 

.判断开始 (等于 (GetClassName (hwnd), “Button”))
    赋值 (style, GetWindowLong_ (hwnd, #GWL_STYLE))
    .判断开始 (并且 (不等于 (位或 (style, #BS_AUTOCHECKBOX), style), 不等于 (位或 (style, #BS_AUTO3STATE), style), 不等于 (位或 (style, #BS_AUTORADIOBUTTON), style)))
        Attach (hwnd)
    .默认
         ' 本源码来自易语言资源网(www.5A5X.com)
    .判断结束
    
.默认
    
.判断结束
返回 (真)

.子程序 GetClassName, 文本型, , 
.参数 hwnd, 整数型, , 

.局部变量 length, 整数型, , , 
.局部变量 tmp, 文本型, , , 

赋值 (tmp, 取空白文本 (255))
GetClassName_ (hwnd, tmp, 255)
返回 (tmp)

.子程序 KillTimer, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 TIMERID, 整数型, , , 

赋值 (TIMERID, GetProp_ (hwnd, “TIMERID”))
.判断开始 (等于 (TIMERID, 0))
    返回 ()
.默认
    SetProp_ (hwnd, “TIMERID”, 0)
    KillTimer_ (hwnd, TIMERID)
.判断结束


.子程序 ModifyStyle, 空白型, , 感谢：泪闯天涯 调用这个成员函数以修改窗口的风格。要加入或清除的风格可以用位或操作符.如果成功地修改了风格，则返回非零值；否则返回0。
.参数 hwnd, 整数型, , 
.参数 dwRemove, 整数型, 可空, 指定了在修改风格时要清除的窗口风格。
.参数 dwAdd, 空白型, 可空, 

.局部变量 dwStyle, 整数型, , , 
.局部变量 dwNewStyle, 整数型, , , 

赋值 (dwStyle, GetWindowLong_ (hwnd, #GWL_STYLE))
赋值 (dwNewStyle, 位与 (dwStyle, 位取反 (dwRemove)))
赋值 (dwNewStyle, 位或 (dwNewStyle, dwAdd))
.如果真 (等于 (dwStyle, dwNewStyle))
    返回 ()
.如果真结束
SetWindowLong (hwnd, #GWL_STYLE, dwNewStyle)
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 Deatch, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 hMemDC, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 oldProc, 整数型, , , 

赋值 (oldProc, GetProp_ (hwnd, “OLDPROC”))
.如果真 (等于 (oldProc, 0))
    返回 ()
.如果真结束
.计次循环首 (4, i)
    赋值 (hMemDC, GetProp_ (hwnd, 相加 (“hMemDC”, 到文本 (i))))
    DeleteDC (hMemDC)
.计次循环尾 ()
KillTimer (hwnd)

RemoveProp_ (hwnd, “hMemDC”)
RemoveProp_ (hwnd, “OLDPROC”)
RemoveProp_ (hwnd, “TIMERID”)
RemoveProp_ (hwnd, “STATE”)
RemoveProp_ (hwnd, “STATE2”)
RemoveProp_ (hwnd, “ALPHALEVEL”)
 ' 本源码来自易语言资源网(www.5A5X.com)
ModifyStyle (hwnd, #BS_OWNERDRAW)
ModifyStyle (hwnd, 67108864)
SetWindowRgn_ (hwnd, 0, 真)
SetWindowLong (hwnd, #GWL_WNDPROC, oldProc)
RedrawWindow_ (hwnd, 0, 0, #RDW_INVALIDATE)


.子程序 WndProc, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 PS, PAINTSTRUCT, , , 
.局部变量 r, 整数型, , , 
.局部变量 OldProc, 整数型, , , 
.局部变量 hdc, 整数型, , , 
.局部变量 level, 整数型, , , 
.局部变量 hMemDC, 整数型, , , 

赋值 (OldProc, GetProp_ (hwnd, “OLDPROC”))
.判断开始 (等于 (msg, #WM_PAINT))
    BeginPaint (hwnd, PS)
    .判断开始 (等于 (GetProp_ (hwnd, “STATE2”), 4))
        BitBlt (PS.hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC4”), 0, 0, #SRCCOPY)
    .默认
        BitBlt (PS.hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, 相加 (“hMemDC”, 到文本 (GetProp_ (hwnd, “STATE”)))), 0, 0, #SRCCOPY)
    .判断结束
    EndPaint_API (hwnd, PS)
.判断 (等于 (msg, #WM_LBUTTONDOWN))
    赋值 (r, CallWindowProc (OldProc, hwnd, msg, wParam, lParam))
    SetProp_ (hwnd, “STATE”, 3)
    赋值 (hdc, GetWindowDC_ (hwnd))
    BitBlt (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC3”), 0, 0, #SRCCOPY)
    ReleaseDC (hwnd, hdc)
    返回 (r)
.判断 (等于 (msg, #WM_LBUTTONUP))
    赋值 (r, CallWindowProc (OldProc, hwnd, msg, wParam, lParam))
    赋值 (hdc, GetWindowDC_ (hwnd))
    BitBlt (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC1”), 0, 0, #SRCCOPY)
    ReleaseDC (hwnd, hdc)
    SetProp_ (hwnd, “STATE”, 5)
    SetProp_ (hwnd, “ALPHALEVEL”, 0)
    返回 (r)
.判断 (等于 (msg, #WM_LBUTTONDBLCLK))
    赋值 (r, CallWindowProc (OldProc, hwnd, msg, wParam, lParam))
    赋值 (hdc, GetWindowDC_ (hwnd))
    BitBlt (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC3”), 0, 0, #SRCCOPY)
    ReleaseDC (hwnd, hdc)
    返回 (r)
.判断 (等于 (msg, #WM_MOUSEMOVE))
    TrackMouseTracking (hwnd)
.判断 (等于 (msg, #WM_MOUSELEAVE))
    .判断开始 (不等于 (GetProp_ (hwnd, “TIMERID”), 0))
         ' KillTimer (hwnd)
        赋值 (hdc, GetWindowDC_ (hwnd))
        BitBlt (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC2”), 0, 0, #SRCCOPY)
        ReleaseDC (hwnd, hdc)
    .默认
        
    .判断结束
    
    .判断开始 (等于 (GetProp_ (hwnd, “STATE2”), 4))
        SetProp_ (hwnd, “ALPHALEVEL”, 0)
        SetProp_ (hwnd, “STATE”, 4)
        SetTimer (hwnd)
    .默认
        SetProp_ (hwnd, “ALPHALEVEL”, 0)
        SetProp_ (hwnd, “STATE”, 1)
        SetTimer (hwnd)
    .判断结束
    
    
.判断 (等于 (msg, #WM_MOUSEHOVER))
    .判断开始 (等于 (GetProp_ (hwnd, “STATE”), 5))
        SetProp_ (hwnd, “ALPHALEVEL”, 0)
        SetProp_ (hwnd, “STATE”, 2)
        SetTimer (hwnd)
    .判断 (不等于 (GetProp_ (hwnd, “STATE”), 3))
        SetProp_ (hwnd, “ALPHALEVEL”, 65)
        SetProp_ (hwnd, “STATE”, 2)
        SetTimer (hwnd)
    .默认
        
    .判断结束
    
.判断 (等于 (msg, #WM_TIMER))
    赋值 (hMemDC, GetProp_ (hwnd, 相加 (“hMemDC”, 到文本 (GetProp_ (hwnd, “STATE”)))))
    赋值 (level, GetProp_ (hwnd, “ALPHALEVEL”))
    赋值 (hdc, GetWindowDC_ (hwnd))
    AlphaBlend_ (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), hMemDC, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), 相乘 (level, 65536))
    赋值 (level, 相加 (level, 5))
    ReleaseDC (hwnd, hdc)
    .判断开始 (大于 (level, 255))
        KillTimer (hwnd)
        SetProp_ (hwnd, “ALPHALEVEL”, 0)
    .默认
        SetProp_ (hwnd, “ALPHALEVEL”, level)
    .判断结束
    
.判断 (等于 (msg, #WM_SETFOCUS))
    赋值 (r, CallWindowProc (OldProc, hwnd, msg, wParam, lParam))
    SetProp_ (hwnd, “STATE2”, 4)
    RedrawWindow_ (hwnd, 0, 0, #RDW_INVALIDATE)
    返回 (r)
.判断 (等于 (msg, #WM_KILLFOCUS))
    赋值 (r, CallWindowProc (OldProc, hwnd, msg, wParam, lParam))
    SetProp_ (hwnd, “STATE”, 1)
    SetProp_ (hwnd, “STATE2”, 0)
    赋值 (hdc, GetWindowDC_ (hwnd))
    BitBlt (hdc, 0, 0, GetWH (hwnd, 真), GetWH (hwnd, 假), GetProp_ (hwnd, “hMemDC1”), 0, 0, #SRCCOPY)
    ReleaseDC (hwnd, hdc)
    返回 (r)
.判断 (等于 (msg, #WM_DESTROY))
    Deatch (hwnd)
.默认
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断结束

返回 (CallWindowProc (OldProc, hwnd, msg, wParam, lParam))

.子程序 SetTimer, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 TIMERID, 整数型, , , 

赋值 (TIMERID, GetProp_ (hwnd, “TIMERID”))
.判断开始 (不等于 (TIMERID, 0))
    返回 ()
.默认
    赋值 (TIMERID, SetTimer_ (hwnd, 1, 15, 0))
    SetProp_ (hwnd, “TIMERID”, TIMERID)
.判断结束


.子程序 TrackMouseTracking, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 MouseEvent, TRACKMOUSEEVENT, , , 

赋值 (MouseEvent.cbSize, LocalSize_ (MouseEvent))
赋值 (MouseEvent.dwFlags, 位或 (#TME_HOVER, #TME_LEAVE))
赋值 (MouseEvent.hwndTrack, hwnd)
赋值 (MouseEvent.dwHoverTime, #HOVER_DEFAULT)
TrackMouseEvent (MouseEvent)

.子程序 渐变填充矩形, 空白型, , 
.参数 hdc, 整数型, , 
.参数 x1, 整数型, , 
.参数 y1, 整数型, , 
.参数 x2, 整数型, , 
.参数 y2, 整数型, , 
.参数 起始颜色, 整数型, , 
.参数 结束颜色, 整数型, , 
.参数 水平渐变, 逻辑型, , 

.局部变量 TRIVERTEX, TRIVERTEX, , "2", 
.局部变量 GRADIENT, GRADIENT_RECT, , , 
.局部变量 HV, 整数型, , , 
.局部变量 颜色1, 字节集, , , 
.局部变量 颜色2, 字节集, , , 

赋值 (颜色1, 到字节集 (起始颜色))
赋值 (颜色2, 到字节集 (结束颜色))
赋值 (TRIVERTEX [1].x, x1)
赋值 (TRIVERTEX [1].y, y1)
赋值 (TRIVERTEX [1].Red, 左移 (颜色1 [1], 8))
赋值 (TRIVERTEX [1].Green, 左移 (颜色1 [2], 8))
赋值 (TRIVERTEX [1].Blue, 左移 (颜色1 [3], 8))
赋值 (TRIVERTEX [1].zzAlpha, 0)
' 本源码来自易语言资源网(www.5A5X.com)
赋值 (TRIVERTEX [2].x, x2)
赋值 (TRIVERTEX [2].y, y2)
赋值 (TRIVERTEX [2].Red, 左移 (颜色2 [1], 8))
赋值 (TRIVERTEX [2].Green, 左移 (颜色2 [2], 8))
赋值 (TRIVERTEX [2].Blue, 左移 (颜色2 [3], 8))
赋值 (TRIVERTEX [2].zzAlpha, 0)

赋值 (GRADIENT.UpperLeft, 0)
赋值 (GRADIENT.LowerRight, 1)
.如果 (水平渐变)
    赋值 (HV, #GRADIENT_FILL_RECT_H)
.否则
    赋值 (HV, #GRADIENT_FILL_RECT_V)
.如果结束
 ' 输出调试文本 (GradientFill (hdc, TRIVERTEX到字节集 (TRIVERTEX), 2, VarPtr1 (GRADIENT.UpperLeft), 1, HV))
GradientFill_ (hdc, TRIVERTEX, 2, VarPtr1 (GRADIENT.UpperLeft), 1, HV)


.子程序 GetWH, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 b, 逻辑型, , 

.局部变量 rect, RECT, , , 

GetWindowRect (hwnd, rect)
.判断开始 (b)
    返回 (相减 (rect.right, rect.left))
.默认
    返回 (相减 (rect.bottom, rect.top))
.判断结束


.子程序 DrawMemDC, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 hMemDC, 整数型, , , 
.局部变量 width, 整数型, , , 
.局部变量 height, 整数型, , , 
.局部变量 hPen, 整数型, , , 
.局部变量 hRgn, 整数型, , , 
.局部变量 hOldPen, 整数型, , , 
.局部变量 tmp, 文本型, , , 
.局部变量 length, 整数型, , , 
.局部变量 rect, RECT, , , 
.局部变量 hBrush, 整数型, , , 
.局部变量 hOldBrush, 整数型, , , 

赋值 (width, GetWH (hwnd, 真))
赋值 (height, GetWH (hwnd, 假))
赋值 (hMemDC, GetProp_ (hwnd, “hMemDC1”))

赋值 (length, GetWindowTextLength_ (hwnd))
赋值 (tmp, 取空白文本 (length))
GetWindowText_ (hwnd, tmp, 相加 (length, 1))


赋值 (hRgn, CreateRoundRectRgn_ (1, 1, width, height, 2, 2))
赋值 (hPen, CreatePen (#PS_SOLID, 1, 12233887)) ' 按钮边框颜色
赋值 (hOldPen, SelectObject (hMemDC, hPen))
RoundRect_ (hMemDC, 0, 0, width, height, 5, 5)
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)

SelectClipRgn_ (hMemDC, hRgn)
渐变填充矩形 (hMemDC, 0, 0, width, height, 16514041, 15460317, 假)

赋值 (hPen, CreatePen (#PS_SOLID, 2, 15195090)) ' 按钮下边阴影
赋值 (hOldPen, SelectObject (hMemDC, hPen))
MoveToEX (hMemDC, 0, 相减 (height, 1), 0)
LineTo (hMemDC, width, 相减 (height, 1))
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)
SelectClipRgn_ (hMemDC, 0)

赋值 (rect.top, 2)
赋值 (rect.left, 2)
赋值 (rect.right, 相减 (GetWH (hwnd, 真), 2))
赋值 (rect.bottom, 相减 (GetWH (hwnd, 假), 2))
SelectObject (hMemDC, SendMessage (hwnd, #WM_GETFONT, 0, 0))
SetBkMode (hMemDC, #TRANSPARENT)
DrawText (hMemDC, tmp, -1, rect, 位或 (#DT_CENTER, #DT_VCENTER, #DT_SINGLELINE))



DeleteObject (hRgn)
 ' -----------------------------1=默认状态
赋值 (hMemDC, GetProp_ (hwnd, “hMemDC2”))
BitBlt (hMemDC, 0, 0, width, height, GetProp_ (hwnd, “hMemDC1”), 0, 0, #SRCCOPY)

赋值 (hBrush, GetStockObject (#NULL_BRUSH))
赋值 (hOldBrush, SelectObject (hMemDC, hBrush))

赋值 (hPen, CreatePen (#PS_SOLID, 1, 11042380))
赋值 (hOldPen, SelectObject (hMemDC, hPen))

RoundRect_ (hMemDC, 1, 1, 相减 (width, 1), 相减 (height, 1), 4, 4)
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)

赋值 (hPen, CreatePen (#PS_SOLID, 1, 16706731))
赋值 (hOldPen, SelectObject (hMemDC, hPen))

RoundRect_ (hMemDC, 2, 2, 相减 (width, 2), 相减 (height, 2), 4, 4)
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)



SelectObject (hMemDC, hOldBrush)
DeleteObject (hBrush)
 ' ------------------------------2=鼠标经过
赋值 (hMemDC, GetProp_ (hwnd, “hMemDC3”))

赋值 (length, GetWindowTextLength_ (hwnd))
赋值 (tmp, 取空白文本 (length))
GetWindowText_ (hwnd, tmp, 相加 (length, 1))


赋值 (hRgn, CreateRoundRectRgn_ (1, 1, width, height, 2, 2))
赋值 (hPen, CreatePen (#PS_SOLID, 1, 12300713)) ' 按钮按下边框颜色
赋值 (hOldPen, SelectObject (hMemDC, hPen))
RoundRect_ (hMemDC, 0, 0, width, height, 5, 5)
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)

SelectClipRgn_ (hMemDC, hRgn)
渐变填充矩形 (hMemDC, 0, 0, width, height, 15460060, 16513784, 假) ' 按钮从上到下颜色

赋值 (hPen, CreatePen (#PS_SOLID, 1, 12827315)) ' 按钮下面
赋值 (hOldPen, SelectObject (hMemDC, hPen))
MoveToEX (hMemDC, 0, 相减 (height, 1), 0)
LineTo (hMemDC, width, 相减 (height, 1))
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)
SelectClipRgn_ (hMemDC, 0)

赋值 (rect.top, 3)
赋值 (rect.left, 3)
赋值 (rect.right, GetWH (hwnd, 真))
赋值 (rect.bottom, GetWH (hwnd, 假))
SelectObject (hMemDC, SendMessage (hwnd, #WM_GETFONT, 0, 0))
SetBkMode (hMemDC, #TRANSPARENT)
DrawText (hMemDC, tmp, -1, rect, 位或 (#DT_CENTER, #DT_VCENTER, #DT_SINGLELINE))


DeleteObject (hRgn)
 ' ------------------------------3=鼠标按下
 ' hMemDC ＝ GetProp_ (hwnd, “hMemDC4”)
 ' BitBlt (hMemDC, 0, 0, width, height, GetProp_ (hwnd, “hMemDC1”), 0, 0, #SRCCOPY)

 ' hBrush ＝ GetStockObject (#NULL_BRUSH)
 ' hOldBrush ＝ SelectObject (hMemDC, hBrush)

 ' hPen ＝ CreatePen (#PS_SOLID, 1, 11042380)
 ' hOldPen ＝ SelectObject (hMemDC, hPen)

 ' Rectangle_ (hMemDC, 2, 2, width － 2, height － 2)


 ' SelectObject (hMemDC, hOldBrush)
 ' DeleteObject (hBrush)
 ' SelectObject (hMemDC, hOldPen)
 ' DeleteObject (hPen)
赋值 (hMemDC, GetProp_ (hwnd, “hMemDC4”))
BitBlt (hMemDC, 0, 0, width, height, GetProp_ (hwnd, “hMemDC1”), 0, 0, #SRCCOPY)

赋值 (hBrush, GetStockObject (#NULL_BRUSH))
赋值 (hOldBrush, SelectObject (hMemDC, hBrush))

赋值 (hPen, CreatePen (#PS_SOLID, 1, 11042380))
赋值 (hOldPen, SelectObject (hMemDC, hPen))

RoundRect_ (hMemDC, 1, 1, 相减 (width, 1), 相减 (height, 1), 4, 4)
SelectObject (hMemDC, hOldPen)
DeleteObject (hPen)

SelectObject (hMemDC, hOldBrush)
DeleteObject (hBrush)


.程序集 数据处理, , , 

.窗口程序集 主程序, , , 

.程序集变量 操作按钮, 窗口操作按钮, , "3", 将控制按钮搞出来
.程序集变量 图像位置, 图片位置, , "3", 
.子程序 _主界面_创建完毕, 空白型, , 
.局部变量 次数, 整数型, , , 

_启动窗口.销毁 ()
0.移动 (0, 660, 430)
.计次循环首 (3, 次数)
    复制窗口组件 (操作按钮 [次数], 动画物体)
    .如果 (等于 (次数, 1))
        赋值 (操作按钮 [次数], 标记, 操作按钮.未知支持库函数_35 ( [次数], 动画物体, 568, -2, 真, “”))
        操作按钮.未知支持库函数_44 ( [次数], 标记, #最小正常, )
    .否则
        .如果 (等于 (次数, 2))
            赋值 (操作按钮 [次数], 标记, 操作按钮.未知支持库函数_35 ( [次数], 动画物体, 595, -2, 真, “”))
            操作按钮.未知支持库函数_44 ( [次数], 标记, #最大正常, )
        .否则
            赋值 (操作按钮 [次数], 标记, 操作按钮.未知支持库函数_35 ( [次数], 动画物体, 623, -2, 真, “”))
            操作按钮.未知支持库函数_44 ( [次数], 标记, #关闭正常, )
        .如果结束
        
    .如果结束
    
.计次循环尾 ()

.子程序 _动画框1_双击物体, 空白型, , 
.参数 物体标识值, 整数型, , 

.如果 (等于 (物体标识值, 操作按钮 [1].标记))
    操作按钮.未知支持库函数_44 ( [1].标记, #最小正常, )
    赋值 (主界面., 1)
.否则
    .如果 (等于 (物体标识值, 操作按钮 [2].标记))
        操作按钮.未知支持库函数_44 ( [2].标记, #最大正常, )
        主界面.移动 (0, 0, 取屏幕宽度 (), 取屏幕高度 ())
    .否则
        .如果真 (等于 (物体标识值, 操作按钮 [3].标记))
            操作按钮.未知支持库函数_44 ( [3].标记, #关闭正常, )
            结束 ()
        .如果真结束
        
    .如果结束
    
.如果结束


.子程序 _动画框1_离开物体, 空白型, , 
.参数 物体标识值, 整数型, , 
.参数 已被按下物体, 整数型, , 

.如果 (等于 (物体标识值, 操作按钮 [1].标记))
    操作按钮.未知支持库函数_44 ( [1].标记, #最小正常, )
.否则
    .如果 (等于 (物体标识值, 操作按钮 [2].标记))
        操作按钮.未知支持库函数_44 ( [2].标记, #最大正常, )
    .否则
        .如果真 (等于 (物体标识值, 操作按钮 [3].标记))
            操作按钮.未知支持库函数_44 ( [3].标记, #关闭正常, )
        .如果真结束
        
    .如果结束
    
.如果结束


.子程序 _动画框1_进入物体, 空白型, , 
.参数 物体标识值, 整数型, , 
.参数 已被按下物体, 整数型, , 

.如果 (等于 (物体标识值, 操作按钮 [1].标记))
    操作按钮.未知支持库函数_44 ( [1].标记, #最小经过, )
.否则
    .如果 (等于 (物体标识值, 操作按钮 [2].标记))
        操作按钮.未知支持库函数_44 ( [2].标记, #最大经过, )
    .否则
        .如果真 (等于 (物体标识值, 操作按钮 [3].标记))
            操作按钮.未知支持库函数_44 ( [3].标记, #关闭经过, )
        .如果真结束
        
    .如果结束
    
.如果结束


.子程序 _动画框1_物体左键被按下, 空白型, , 
.参数 物体标识值, 整数型, , 

.如果 (等于 (物体标识值, 操作按钮 [1].标记))
    操作按钮.未知支持库函数_44 ( [1].标记, #最小按下, )
.否则
    .如果 (等于 (物体标识值, 操作按钮 [2].标记))
        操作按钮.未知支持库函数_44 ( [2].标记, #最大按下, )
    .否则
        .如果真 (等于 (物体标识值, 操作按钮 [3].标记))
            操作按钮.未知支持库函数_44 ( [3].标记, #关闭按下, )
        .如果真结束
        
    .如果结束
    
.如果结束


.子程序 _动画框1_物体右键被按下, 空白型, , 
.参数 物体标识值, 整数型, , 

.如果 (等于 (物体标识值, 操作按钮 [1].标记))
    操作按钮.未知支持库函数_44 ( [1].标记, #最小正常, )
    赋值 (_启动窗口., 1)
.否则
    .如果 (等于 (物体标识值, 操作按钮 [2].标记))
        操作按钮.未知支持库函数_44 ( [2].标记, #最大正常, )
        _启动窗口.移动 (0, 0, 取屏幕宽度 (), 取屏幕高度 ())
    .否则
        .如果真 (等于 (物体标识值, 操作按钮 [3].标记))
            操作按钮.未知支持库函数_44 ( [3].标记, #关闭正常, )
            结束 ()
        .如果真结束
        
    .如果结束
    
.如果结束



 ' 不属于任何一个程序集、类模块的函数：
