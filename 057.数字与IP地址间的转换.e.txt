 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 数字与IP地址间的转换
 ' 程序描述：编写程序，实现数字与IP地址间的转换。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 283
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 数字与IP地址间的转换”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：循环法
 ' 问题：数字与IP地址间的转换问题
 ' 问题描述：
 ' 编写程序，实现数字与IP地址间的转换。
 ' 问题分析：
 ' 数字和IP地址之间的转换：先将数字除以256的３次方，得出的数字就是IP地址中的第一组数值，
 ' 然后再将要转换的数字减去第一组数值乘以256的3次方，接着再将求出的数字除以256的2次方，得出
 ' IP地址中的第二组数，然后再像第一组数值那样做，用减去第一组之后剩余的数字减去第二组数值乘以
 ' 256的2次方一直到将IP地址全部转换完毕。
 ' 比如：将数字3232235521转换成IP地址，则先3232235521/（256的3次方），得出192，再用3232235521－192×（256的3次方），用求出的数除以256的2次方，得出168，这样一直求出0和1，最后的IP地址为192.168.0.1。
 ' IP地址和数字之间的转换：其实就是上面的方法逆运算。先将IP地址中的每一组数值取出，然后分别用它们与256的余数去乘以256的3次方，2次方，1次方，0次方，最后将这些所得的数字全部相加在一起，就是最后转换出来的数字。
 ' 通过上面规律可以推导出结果。
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
.局部变量 点位置, 整数型, , , IP地址中点的位置
.局部变量 点的个数, 整数型, , , 统计点的个数

 ' 判断能否转换
.如果 (等于 (.内容, “”))
    信息框 (“没有输入要转换的数字或IP地址！”, 0, )
.否则
     ' 判断是将数字转换在IP地址，还是将IP地址转换成数字
    .如果 (等于 (寻找文本 (删首尾空 (.内容), “.”, 1, 假), -1))
        赋值 (.内容, 数字到IP (到数值 (.内容)))
    .否则
         ' 判断IP地址是否符合要求,也就是在IP地址中是否有三个“.”
        赋值 (点的个数, 0)
        .判断循环首 (不等于 (寻找文本 (删首尾空 (.内容), “.”, 相加 (相乘 (点的个数, 4), 1), 假), -1))
            赋值 (点的个数, 相加 (点的个数, 1))
        .判断循环尾 ()
        .如果 (等于 (点的个数, 3))
            赋值 (.内容, 到文本 (IP到数字 (.内容)))
        .否则
            信息框 (“输入的IP地址不符合要求！”, 0, )
        .如果结束
        
        
    .如果结束
    
.如果结束


.子程序 数字到IP, 文本型, , 将输入的数字转换成IP地址
.参数 数字参数, 长整数型, , 接收输入的数字

.局部变量 循环变量1, 整数型, , , 
.局部变量 循环变量2, 整数型, , , 
.局部变量 乘积, 长整数型, , , 转换进程中的一个乘积值
.局部变量 数字, 长整数型, , , 转换过程中取出的一段IP地址值
.局部变量 结果, 文本型, , , 转换后的结果

 ' 判断输入的数字小于０，不能转换；相反进行转换
.如果 (小于 (数字参数, 0))
    赋值 (结果, “0.0.0.0”)
.否则
     ' 因为最终的IP地址分成四段数字，所以要循环四次
    .变量循环首 (1, 4, 1, 循环变量1)
         ' 求出２５６的（４－循环变量１）次方
        赋值 (乘积, 1)
        .变量循环首 (1, 相减 (4, 循环变量1), 1, 循环变量2)
            赋值 (乘积, 相乘 (乘积, 256))
        .变量循环尾 ()
         ' 取出IP地址中的一段数值
        赋值 (数字, 取整 (相除 (数字参数, 乘积)))
         ' 取出找下一段IP地址值的数字
        赋值 (数字参数, 相减 (数字参数, 相乘 (数字, 乘积)))
         ' IP地址中每一段的值都是不大于２５５的，大于它就是错误的
        .如果 (小于或等于 (数字, 255))
            .如果 (等于 (循环变量1, 1))
                 ' IP地址中的第一组数值前面没有“.”
                赋值 (结果, 到文本 (数字))
                 ' IP地址中其它组数值前面加“.”
            .否则
                赋值 (结果, 相加 (结果, “.”, 到文本 (数字)))
            .如果结束
            
        .否则
            赋值 (结果, “0.0.0.0”)
            跳出循环 ()
        .如果结束
        
    .变量循环尾 ()
.如果结束

返回 (结果)


.子程序 IP到数字, 长整数型, , 将输入的IP地址转换成数字
.参数 IP参数, 文本型, , 接收输入的IP地址

.局部变量 循环变量1, 整数型, , , 
.局部变量 循环变量2, 整数型, , , 
.局部变量 点位置, 整数型, , , IP地址中“.”的位置
.局部变量 上一位置, 整数型, , , IP地址中找到的上一个位置
.局部变量 数值, 整数型, , , 从IP地址中取出的一段数值
.局部变量 结果, 长整数型, , , 转换后的结果
.局部变量 乘积, 长整数型, , , 转换进程中一个乘积值

 ' 因为IP地址中有四组数值，所以循环四次，分四次转换
.变量循环首 (1, 4, 1, 循环变量1)
     ' 找出第一个“.”的位置
    赋值 (点位置, 寻找文本 (IP参数, “.”, 相加 (上一位置, 1), 假))
     ' 如果到第四组数值，因为没有点，所以位置为－１，那么就设置位置为IP地址的长度＋１
    .如果真 (等于 (循环变量1, 4))
        赋值 (点位置, 相加 (取文本长度 (IP参数), 1))
    .如果真结束
     ' 取出每两个点之间的一组数值
    赋值 (数值, 取整 (到数值 (取文本中间 (IP参数, 相加 (上一位置, 1), 相减 (点位置, 上一位置, 1)))))
     ' 判定IP地址是否符合要求，也就是IP地址中的每一组数字都要小于２５６
    .如果真 (大于 (数值, 255))
         ' 信息框 (“IP地址不符合要求，数值应小于等于255！”, 0, )
        赋值 (结果, 0)
        跳出循环 ()
    .如果真结束
     ' 将上一位置设置成当前位置，那么就能取出IP地址中下一组数值
    赋值 (上一位置, 点位置)
     ' 求出２５６的（４－循环变量１）次方
    赋值 (乘积, 1)
    .变量循环首 (1, 相减 (4, 循环变量1), 1, 循环变量2)
        赋值 (乘积, 相乘 (乘积, 256))
    .变量循环尾 ()
     ' 求出转换后的结果
    赋值 (结果, 相加 (相乘 (求余数 (数值, 256), 乘积), 结果))
.变量循环尾 ()
返回 (结果)


 ' 不属于任何一个程序集、类模块的函数：
