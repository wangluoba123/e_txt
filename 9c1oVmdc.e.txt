 ' 文件类型：Windows模块源码

 ' 程序名称：斩月_文本字节集相关
 ' 程序描述：这些命令全部支持斩月
 ' 程序作者：dtcser
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.图片 动态调用代码, " ' 已保存到：D:\易语言学习\Data\9c1oVmdc.e\动态调用代码", , 
.常量 十六进制, "4", 公开, 
.常量 八进制, "3", 公开, 
.常量 二进制, "1", 公开, 
.常量 十进制, "10", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库





.DLL命令 LocalFree, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 lstrcpyn_字节集, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 lstrcpyn_字节型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 RtlMoveMemory_文本, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 文本型, , 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 LocalAlloc, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", , 公开
    .参数 延时时间, 整数型, , 毫秒

.DLL命令 lstrcpyn_整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetLastError, 整数型, "", "GetLastError", , 公开

.DLL命令 动态调用子程序_API, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 FreeLibrary, 整数型, "", "", , 
    .参数 h, 整数型, , 

.DLL命令 LoadLibraryA, 整数型, "", "", , 
    .参数 w, 文本型, , 

.DLL命令 lstrcpyn_子程序子针, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_长整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 StrToInt64Ex, 整数型, "shlwapi.dll", "StrToInt64ExA", , 公开
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 整数型, 传址, 

.DLL命令 MessageBox, 整数型, "", "MessageBoxA", , 建立消息框窗体
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 lpText, 文本型, , 提示信息
    .参数 lpCaption, 文本型, , 窗口标题
    .参数 wType, 整数型, , 按钮

.DLL命令 GetActiveWindow, 整数型, "", "GetActiveWindow", , 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值

.DLL命令 lstrcpyn_双精型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 StrTrim, 整数型, "shlwapi.dll", "StrTrimA", , 
    .参数 psz, 文本型, , 
    .参数 pszTrimChars, 文本型, , 

.DLL命令 ExpandEnvironmentStringsA, 整数型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 
    .参数 c, 整数型, , 

.DLL命令 GetCommandLineA, 文本型, "kernel32", "GetCommandLineA", , 

.DLL命令 SetEnvironmentVariableA, 逻辑型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 

.DLL命令 GetCurrentDirectoryA, 整数型, "", "", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetModuleFileNameA, 整数型, "", "", , 
    .参数 handle, 整数型, , 
    .参数 filename, 文本型, , 
    .参数 cb, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "", "GetCurrentProcess", , 

.DLL命令 CharLower, 文本型, "", "CharLowerA", , 
    .参数 str, 文本型, , 

.DLL命令 CharUpper, 文本型, "", "CharUpperA", , 
    .参数 str, 文本型, , 

.DLL命令 API_MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 API_MultiByteToWideChar_utf8, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 API_WideCharToMultiByte_utf8, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 整数型, , 

.DLL命令 LCMapString, 整数型, "kernel32", "LCMapStringA", , 
    .参数 Locale, 整数型, , 
    .参数 dwMapFlags, 整数型, , 
    .参数 lpSrcStr, 文本型, , 
    .参数 cchSrc, 整数型, , 
    .参数 lpDestStr, 文本型, , 
    .参数 ByVal, 整数型, , 

.DLL命令 API_WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 整数型, , 

.DLL命令 API_CryptAcquireContext, 整数型, "advapi32.dll", "CryptAcquireContextA", , 
    .参数 phProv, 整数型, 传址, 
    .参数 pszContainer, 文本型, , 
    .参数 pszProvider, 文本型, , 
    .参数 dwProvType, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_CryptCreateHash, 整数型, "advapi32.dll", "CryptCreateHash", , 
    .参数 hProv, 整数型, , 
    .参数 Algid, 整数型, , 
    .参数 hKey, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 phHash, 整数型, 传址, 

.DLL命令 API_CryptReleaseContext, 整数型, "advapi32.dll", "CryptReleaseContext", , 
    .参数 hProv, 整数型, 传址, 
    .参数 dwFlags, 整数型, 传址, 

.DLL命令 API_CryptDestroyHash, 整数型, "advapi32.dll", "CryptDestroyHash", , 
    .参数 hHash, 整数型, 传址, 

.DLL命令 API_CryptGetHashParam, 整数型, "advapi32.dll", "CryptGetHashParam", , 
    .参数 hHash, 整数型, , 
    .参数 dwParam, 整数型, , 
    .参数 pByte, 字节集, , 
    .参数 pdwDataLen, 整数型, 传址, 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_CryptHashData, 整数型, "advapi32.dll", "CryptHashData", , 
    .参数 hHash, 整数型, , 
    .参数 pbData, 字节集, 传址, 
    .参数 dwDataLen, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_GetFileTitle, 空白型, "comdlg32.dll", "GetFileTitleA", , 返回文件名
    .参数 lpszFile, 文本型, , 
    .参数 lpszTitle, 文本型, , 
    .参数 cbBuf, 短整数型, , 

.DLL命令 PathIsDirectoryA, 逻辑型, "shlwapi.dll", "PathIsDirectoryA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 创建或修改配置文件, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 如果配置文件不存在则将被创建
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 文本型, , 就是等号后面的内容
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 读配置文本, 整数型, "kernel32.dll", "GetPrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 默认值, 文本型, , 可以为“”
    .参数 缓冲容器, 文本型, , 一般将容器的大小设定为255
    .参数 缓冲容积, 整数型, , 应与缓冲容器的大小相等255
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 删配置文件项, 整数型, "kernel32", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 删配置文件小节, 整数型, "kernel32", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 整数型, , 0
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 API_GetPrivateProfileSection, 整数型, "kernel32", "GetPrivateProfileSectionA", , 获取指定小节所有项名和值的一个列表  装载到lpReturnedString缓冲区的字符数量。如缓冲区的容量不够大，不能容下所有信息，就返回nSize-2
    .参数 lpAppName, 文本型, , 欲获取的小节。注意这个字串不区分大小写
    .参数 lpReturnedString, 字节集, , 项和值字串的列表。每个字串都由一个NULL字符分隔，最后一个字串后面用两个NULL字符中止
    .参数 nSize, 整数型, , lpReturned缓冲区的大小。在windows系统中最大值为32767
    .参数 lpFileName, 文本型, , 初始化文件的名字。如没有指定完整路径名，windows就在Windows目录中查找文件;

.DLL命令 API_GetPrivateProfileSectionNames, 整数型, "kernel32.dll", "GetPrivateProfileSectionNamesA", , 
    .参数 lpszReturnBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpFileName, 文本型, , 

.DLL命令 PathFileExistsA, 逻辑型, "shlwapi.dll", "PathFileExistsA", , 检测文件是否存在，0不存在, 1存在
    .参数 pszPath, 文本型, , 文件名（含路径）

.DLL命令 GetShortPathNameA, 整数型, "kernel32.dll", "GetShortPathNameA", , 
    .参数 lpszLongPath, 文本型, , 
    .参数 lpszShortPath, 文本型, , 
    .参数 cchBuffer, 整数型, , 

.DLL命令 lstrlen, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 文本, 文本型, , Ptr

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
输出调试文本 (数值_取十进制 (“1152921504606846975”, #十进制))
输出调试文本 (数值_整数取低字 (1118481))
输出调试文本 (文件是否存在 (“c:\tttt.txt”))


.程序集 取指针, , , 

.子程序 _取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))


.子程序 _取指针_字节型, 整数型, , 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))


.子程序 _取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))


.子程序 _取指针_整数型, 整数型, , 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 _取指针_子程序指针, 整数型, , 
.参数 x, 子程序指针, 参考, 

返回 (lstrcpyn_子程序子针 (x, x, 0))


.子程序 _取指针_长整数型, 整数型, , 
.参数 x, 长整数型, 参考, 

返回 (lstrcpyn_长整数型 (x, x, 0))


.子程序 _取指针_双精度小数型, 整数型, , 
.参数 x, 双精度小数型, 参考, 

返回 (lstrcpyn_双精型 (x, x, 0))


.程序集 文本, , , 

.子程序 文本_取空白文本, 文本型, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
FillMemory (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)


.子程序 文本_取文本长度, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrlen (文本))


.子程序 文本_字符, 文本型, , 
.参数 欲取其字符的字符代码, 字节型, , 

.局部变量 address, 整数型, , , 

赋值 (address, _取指针_字节型 (欲取其字符的字符代码))
返回 (文本_字节集到文本 (指针到字节集 (address, 1)))

.子程序 文本_取代码, 整数型, , 
.参数 欲取字符代码的文本, 文本型, , 
.参数 欲取其代码的字符位置, 整数型, 可空, 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 
.局部变量 ret, 整数型, , , 

赋值 (len, 文本_取文本长度 (欲取字符代码的文本))
.如果真 (是否为空 (欲取其代码的字符位置))
    赋值 (欲取其代码的字符位置, 1)
.如果真结束
.如果真 (或者 (大于 (欲取其代码的字符位置, len), 小于 (欲取其代码的字符位置, 1)))
    返回 (0)
.如果真结束
赋值 (address, _取指针_文本型 (欲取字符代码的文本))
RtlMoveMemory_整数 (ret, 相减 (相加 (address, 欲取其代码的字符位置), 1), 1)
返回 (ret)

.子程序 文本_到大写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharUpper (aaa))


.子程序 文本_到小写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharLower (aaa))


.子程序 文本_字节集到文本, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ret, 文本型, , , 
.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (字节集, { 0 }))
返回 (指针到文本 (_取指针_字节集 (temp)))

.子程序 文本_整数到文本, 文本型, , ' 这里只是个测试，其实用汇编是很简单的。哈哈～～，来个动态调用API吧。
.参数 整数, 整数型, , 

.局部变量 ret, 文本型, , , 
.局部变量 address, 空白型, , , 
.局部变量 参数, 整数型, , "3", 

赋值 (ret, 文本_取空白文本 (20))
赋值 (address, GetProcAddress (GetModuleHandle (“user32.dll”), “wsprintfA”))
赋值 (参数 [1], _取指针_文本型 (ret))
赋值 (参数 [2], _取指针_文本型 (“%d”))
赋值 (参数 [3], 整数)
系统_动态调用子程序 (address, 参数, 真)
返回 (ret)


.子程序 文本_删首尾空, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
赋值 (temp, 处理文本首全角 (aaa))
赋值 (temp1, 处理文本尾全角 (temp))
StrTrim (temp1, “ ”)
返回 (temp1)


.子程序 文本_倒找文本, 整数型, , 返回一个整数值，指定一文本在另一文本中最后出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为从被搜寻文本的尾部开始。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 207, 0, 0, 0, 131, 249, 0, 126, 117, 139, 85, 244, 137, 203, 139, 117, 12, 232, 189, 0, 0, 0, 131, 249, 0, 126, 99, 139, 69, 20, 133, 192, 116, 12, 139, 69, 16, 131, 248, 0, 126, 84, 57, 216, 118, 2, 137, 216, 57, 193, 119, 74, 73, 137, 77, 248, 1, 77, 244, 1, 194, 74, 41, 200, 137, 69, 252, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 78, 227, 43, 138, 7, 79, 73, 232, 140, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 78, 79, 232, 115, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 67, 139, 69, 252, 64, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 170, 71, 73, 235, 239, 132, 219, 116, 34, 139, 117, 12, 139, 54, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 133, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 12, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)


.子程序 文本_寻找文本, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1。
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 位置值从 1 开始。如果本参数被省略，默认为 1 。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。

置入代码 ({ 83, 82, 86, 87, 49, 192, 139, 117, 8, 232, 204, 0, 0, 0, 131, 249, 0, 126, 111, 139, 85, 244, 137, 203, 139, 117, 12, 232, 186, 0, 0, 0, 131, 249, 0, 126, 93, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 73, 73, 137, 77, 248, 41, 203, 137, 93, 252, 137, 93, 240, 1, 194, 139, 93, 24, 139, 117, 244, 139, 77, 252, 137, 215, 138, 38, 70, 227, 43, 138, 7, 71, 73, 232, 143, 0, 0, 0, 132, 228, 117, 241, 137, 250, 137, 77, 252, 139, 77, 248, 227, 25, 138, 38, 138, 7, 70, 71, 232, 118, 0, 0, 0, 132, 228, 117, 205, 73, 227, 7, 235, 236, 131, 200, 255, 235, 70, 139, 69, 16, 3, 69, 240, 43, 69, 252, 139, 125, 8, 139, 63, 137, 193, 73, 227, 15, 138, 63, 71, 73, 128, 255, 128, 118, 245, 227, 165, 71, 73, 235, 239, 132, 219, 116, 32, 139, 117, 244, 139, 77, 248, 65, 227, 23, 138, 62, 70, 71, 73, 128, 255, 128, 118, 244, 227, 11, 138, 62, 56, 63, 117, 130, 70, 71, 73, 235, 231, 95, 94, 90, 91, 131, 196, 16, 137, 236, 93, 194, 24, 0, 49, 201, 139, 54, 133, 246, 116, 12, 137, 117, 244, 138, 6, 70, 65, 132, 192, 117, 248, 73, 195, 56, 224, 116, 30, 168, 128, 117, 28, 132, 219, 116, 24, 52, 32, 56, 224, 117, 18, 60, 65, 114, 14, 60, 90, 118, 8, 60, 97, 114, 6, 60, 122, 119, 2, 48, 228, 195 })
返回 (0)

.子程序 文本_取文本左边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集左边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_取文本右边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集右边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_取文本中间, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集中间 (temp, 起始取出位置, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_分割文本, 整数型, , 返回实际的组数
.参数 待分割文本, 文本型, , 如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的文本, 文本型, 可空, 可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”
.参数 要返回的子文本数目, 整数型, 可空, 可以被省略。如果被省略，则默认返回所有的子文本
.参数 返回的文本数组, 文本型, 数组, 将指定文本进行分割，分割后的一维文本数组以参考方式传递

.局部变量 临时字节集数组, 字节集, , "0", 
.局部变量 用作分割的字节集, 字节集, , , 
.局部变量 temp, 字节集, , , 
.局部变量 count, 整数型, , , 
.局部变量 i, 整数型, , , 

清除数组 (返回的文本数组)
.如果真 (等于 (待分割文本, “”))
    返回 (0)
.如果真结束
.如果 (是否为空 (用作分割的文本))
    赋值 (用作分割的文本, “,”)
.否则
    .如果真 (等于 (用作分割的文本, “”))
        加入成员 (返回的文本数组, 待分割文本)
        返回 (1)
    .如果真结束
    
.如果结束
赋值 (temp, 字节集_文本到字节集 (待分割文本))
赋值 (用作分割的字节集, 字节集_文本到字节集 (用作分割的文本))
赋值 (count, 字节集_分割字节集 (temp, 用作分割的字节集, 要返回的子文本数目, 临时字节集数组))
.计次循环首 (count, i)
    加入成员 (返回的文本数组, 文本_字节集到文本 (临时字节集数组 [i]))
.计次循环尾 ()
返回 (count)


.子程序 文本_字节型数组到文本, 文本型, , 
.参数 字节型数组, 字节型, 数组, 

.局部变量 len, 整数型, , , 
.局部变量 address, 整数型, , , 

赋值 (len, 取数组成员数 (字节型数组))
.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, _取指针_字节型 (字节型数组 [1]))
返回 (指针到文本 (address))


.子程序 文本_取重复文本, 文本型, , 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的文本, 文本型, , 

.局部变量 temp, 文本型, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的文本))
.计次循环尾 ()
返回 (temp)


.子程序 文本_文本替换, 文本型, , 将指定文本的某一部分用其它的文本替换，然后返回替换后的结果。
.参数 欲替换其部分的文本, 文本型, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的文本, 文本型, 可空, 可以被省略。如果本参数被省略，则删除文本中的指定部分。

.局部变量 len_x, 整数型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 temp2, 文本型, , , 

.如果真 (等于 (欲替换其部分的文本, “”))
    返回 (“”)
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (len_x, 文本_取文本长度 (欲替换其部分的文本))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (temp1, 文本_取文本左边 (欲替换其部分的文本, 相减 (起始替换位置, 1)))
赋值 (temp2, 文本_取文本右边 (欲替换其部分的文本, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的文本, temp2))


.子程序 文本_子文本替换, 文本型, , 返回一个文本，该文本中指定的子文本已被替换成另一子文本，并且替换发生的次数也是被指定的。
.参数 欲被替换的文本, 文本型, , 
.参数 欲被替换的子文本, 文本型, , 
.参数 用作替换的子文本, 文本型, 可空, 可以被省略。如果本参数被省略，默认为空文本。
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
.参数 是否区分大小写, 逻辑型, 可空, 初始值为“真”。为真区分大小写，为假不区分。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 文本型, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (是否为空 (是否区分大小写))
    赋值 (是否区分大小写, 真)
.如果真结束
.如果真 (或者 (等于 (欲被替换的文本, “”), 等于 (欲被替换的子文本, “”)))
    返回 (“”)
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 查找子文本 (欲被替换的文本, 欲被替换的子文本, offset, 进行替换的起始位置, 是否区分大小写))
.如果真 (等于 (count, 0))
    返回 (欲被替换的文本)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的文本)
赋值 (len, 文本_取文本长度 (欲被替换的子文本))
赋值 (偏移, 相减 (文本_取文本长度 (用作替换的子文本), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 文本_文本替换 (ret, offset [i], len, 用作替换的子文本))
    .否则
        赋值 (ret, 文本_文本替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子文本))
    .如果结束
    
.计次循环尾 ()
返回 (ret)



.子程序 查找子文本, 整数型, , 
.参数 x, 文本型, , 
.参数 y, 文本型, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 
.参数 区分大小写, 逻辑型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 文本_取文本长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 文本_寻找文本 (x, y, j, 取反 (区分大小写)))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 处理文本首全角, 文本型, , 改成半角空格，用API再处理，偷懒了。哈～～
.参数 文本, 文本型, , 

置入代码 ({ 86, 49, 219, 139, 117, 8, 139, 54, 86, 133, 246, 116, 50, 138, 30, 132, 219, 116, 44, 128, 251, 32, 116, 10, 128, 251, 161, 116, 8, 233, 29, 0, 0, 0, 70, 235, 232, 102, 139, 30, 102, 129, 251, 161, 161, 116, 5, 233, 11, 0, 0, 0, 102, 187, 32, 32, 102, 137, 30, 70, 70, 235, 206, 88, 94, 201, 194, 4, 0 })
返回 (“”)


.子程序 处理文本尾全角, 文本型, , 改成半角空格，用API再处理，偷懒了。哈～～
.参数 文本, 文本型, , 

.局部变量 len, 整数型, , , 

赋值 (len, 文本_取文本长度 (文本))
置入代码 ({ 86, 49, 219, 139, 117, 8, 139, 54, 139, 77, 252, 73, 86, 133, 246, 116, 54, 131, 249, 255, 116, 49, 138, 28, 14, 128, 251, 32, 116, 10, 128, 251, 161, 116, 8, 233, 31, 0, 0, 0, 73, 235, 230, 73, 102, 139, 28, 14, 102, 129, 251, 161, 161, 116, 5, 233, 11, 0, 0, 0, 102, 187, 32, 32, 102, 137, 28, 14, 78, 235, 202, 88, 94, 201, 194, 4, 0 })
返回 (“”)


.子程序 文本_删首空, 文本型, , 返回一个文本，其中包含被删除了首部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (ret, 欲删除空格的文本)
赋值 (temp, 处理文本首全角 (ret))
置入代码 ({ 86, 87, 49, 219, 139, 117, 252, 139, 125, 248, 133, 246, 116, 26, 138, 30, 132, 219, 116, 20, 128, 251, 32, 117, 3, 70, 235, 242, 136, 31, 71, 70, 138, 30, 132, 219, 116, 2, 235, 244, 198, 7, 0, 95, 94 })
返回 (ret)


.子程序 文本_删尾空, 文本型, , 返回一个文本，其中包含被删除了尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp11, 文本型, , , 
.局部变量 len, 整数型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (len, 文本_取文本长度 (欲删除空格的文本))
赋值 (temp11, 欲删除空格的文本)
赋值 (temp, 处理文本尾全角 (temp11))
置入代码 ({ 86, 87, 49, 219, 139, 117, 252, 139, 77, 244, 73, 133, 246, 116, 21, 131, 249, 255, 116, 11, 138, 28, 14, 128, 251, 32, 117, 3, 73, 235, 240, 65, 198, 4, 14, 0, 94 })
返回 (temp)


.子程序 文本_删全部空, 文本型, , 返回一个文本，其中包含被删除了所有全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 欲删除空格的文本)
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 41, 138, 30, 132, 219, 116, 35, 128, 251, 32, 116, 8, 128, 251, 161, 116, 6, 136, 31, 71, 70, 235, 234, 102, 139, 30, 102, 129, 251, 161, 161, 116, 5, 102, 137, 31, 71, 71, 70, 70, 235, 215, 198, 7, 0, 95, 94 })
返回 (ret)


.子程序 文本_到全角, 文本型, , 将文本中的半角字母、空格或数字变换为全角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

 ' 数字范围163开头，176--185
 ' 大写字母，163开头，193--218
 ' 小写字母，163开头，225--250
 ' ///////////以上为全角的，下面是半角的
 ' 数字范围，48--57
 ' 大写字母，65--90
 ' 小写字母，97-122
赋值 (ret, 文本_取空白文本 (相乘 (文本_取文本长度 (欲变换的文本), 2)))
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 74, 138, 30, 132, 219, 116, 68, 128, 251, 32, 116, 53, 128, 251, 48, 114, 42, 128, 251, 57, 119, 13, 198, 7, 163, 71, 128, 195, 128, 136, 31, 71, 70, 235, 222, 128, 251, 65, 114, 19, 128, 251, 90, 119, 2, 235, 231, 128, 251, 97, 114, 7, 128, 251, 122, 119, 2, 235, 219, 136, 31, 70, 71, 235, 192, 102, 199, 7, 161, 161, 71, 71, 70, 235, 182, 198, 7, 0, 95, 94 })
返回 (ret)


.子程序 文本_到半角, 文本型, , 将文本中的全角字母、空格或数字变换为半角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

 ' 数字范围163开头，176--185
 ' 大写字母，163开头，193--218
 ' 小写字母，163开头，225--250
 ' ///////////以上为全角的，下面是半角的
 ' 数字范围，48--57
 ' 大写字母，65--90
 ' 小写字母，97-122
赋值 (ret, 欲变换的文本)
置入代码 ({ 86, 87, 49, 219, 139, 117, 8, 139, 54, 139, 125, 252, 133, 246, 116, 95, 138, 30, 132, 219, 116, 89, 128, 251, 161, 116, 28, 128, 251, 163, 116, 37, 233, 12, 0, 0, 0, 70, 138, 30, 128, 235, 128, 136, 31, 71, 70, 235, 223, 136, 31, 70, 71, 235, 217, 128, 126, 1, 161, 116, 2, 235, 242, 198, 7, 32, 70, 235, 232, 128, 126, 1, 176, 114, 230, 128, 126, 1, 185, 119, 2, 235, 210, 128, 126, 1, 193, 114, 216, 128, 126, 1, 218, 119, 2, 235, 196, 128, 126, 1, 225, 114, 202, 128, 126, 1, 250, 119, 196, 235, 182, 198, 7, 0, 95, 94 })
返回 (ret)


.程序集 字节集, , , 

.子程序 字节集_取空白字节集, 字节集, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)


.子程序 字节集_取字节集长度, 整数型, , 
.参数 字节集, 字节集, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
赋值 (address, _取指针_字节集 (字节集))
RtlMoveMemory_整数 (ret, 相减 (address, 4), 4)
返回 (ret)


.子程序 字节集_文本到字节集, 字节集, , 
.参数 文本, 文本型, , 

返回 (指针到字节集 (_取指针_文本型 (文本), 文本_取文本长度 (文本)))


.子程序 字节集_整数到字节集, 字节集, , 
.参数 整数, 整数型, , 

返回 (指针到字节集 (_取指针_整数型 (整数), 4))


.子程序 字节集_字节型到字节集, 字节集, , 
.参数 字节型, 字节型, , 

.局部变量 temp, 字节集, , , 

赋值 (temp, { 0 })
赋值 (temp [1], 字节型)
返回 (temp)
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 字节集_寻找字节集, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。

置入代码 ({ 83, 82, 86, 87, 139, 125, 8, 139, 63, 133, 255, 116, 119, 139, 95, 4, 131, 251, 0, 126, 111, 141, 87, 8, 139, 117, 12, 139, 54, 133, 246, 116, 99, 139, 78, 4, 131, 249, 0, 126, 91, 141, 70, 8, 137, 69, 244, 139, 69, 16, 72, 131, 248, 0, 125, 2, 49, 192, 137, 69, 16, 41, 195, 57, 217, 127, 65, 73, 137, 77, 248, 41, 203, 137, 93, 252, 1, 194, 139, 117, 244, 137, 215, 137, 217, 138, 38, 70, 227, 42, 138, 7, 71, 73, 48, 224, 117, 246, 137, 250, 137, 203, 139, 77, 248, 227, 15, 138, 38, 138, 7, 70, 71, 48, 224, 117, 217, 73, 227, 2, 235, 241, 139, 69, 16, 3, 69, 252, 41, 216, 235, 3, 131, 200, 255, 95, 94, 90, 91, 131, 196, 12, 137, 236, 93, 194, 16, 0 })
返回 (0)


.子程序 字节集_倒找字节集, 整数型, , 返回一字节集在另一字节集中最后出现的位置，位置值从 1 开始。如果未找到，返回 -1。
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 1为首位置，2为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从首部开始，“倒找字节集”命令默认从尾部开始。

置入代码 ({ 83, 82, 86, 87, 139, 125, 8, 139, 63, 133, 255, 116, 122, 139, 95, 4, 131, 251, 0, 126, 114, 141, 87, 8, 139, 117, 12, 139, 54, 133, 246, 116, 102, 139, 78, 4, 131, 249, 0, 126, 94, 141, 70, 8, 137, 69, 248, 139, 69, 20, 133, 192, 116, 12, 139, 69, 16, 131, 248, 0, 126, 73, 59, 195, 118, 2, 139, 195, 59, 200, 119, 63, 73, 137, 77, 252, 1, 77, 248, 3, 208, 74, 43, 193, 139, 216, 139, 117, 248, 139, 250, 139, 203, 138, 38, 78, 227, 37, 138, 7, 79, 73, 50, 196, 117, 246, 139, 215, 139, 217, 139, 77, 252, 227, 15, 138, 38, 138, 7, 78, 79, 50, 196, 117, 217, 73, 227, 2, 235, 241, 139, 195, 64, 235, 3, 131, 200, 255, 95, 94, 90, 91, 131, 196, 8, 139, 229, 93, 194, 16, 0 })
返回 (0)


.子程序 字节集_取字节集左边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, _取指针_字节集 (字节集))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取字节集右边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 相减 (相加 (_取指针_字节集 (字节集), len), 欲取出字节的数目))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取字节集中间, 字节集, , 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.判断 (大于 (起始取出位置, len))
    返回 ({  })
.默认
    
.判断结束
.如果真 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出字节的数目, 起始取出位置), 1), len))
    赋值 (欲取出字节的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (address, 相减 (相加 (_取指针_字节集 (字节集), 起始取出位置), 1))
返回 (指针到字节集 (address, 欲取出字节的数目))



.子程序 字节集_分割字节集, 整数型, , 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递

.局部变量 temp, 字节集, , , 
.局部变量 位置列表, 整数型, , "0", 
.局部变量 找到位置个数, 整数型, , , 
.局部变量 临时分割表, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 len_x, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (返回的字节集数组)
.如果真 (等于 (待分割字节集, {  }))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的字节集))
    赋值 (用作分割的字节集, { 0 })
.如果真结束
赋值 (找到位置个数, 查找子字节集 (待分割字节集, 用作分割的字节集, 位置列表))
.如果真 (等于 (找到位置个数, 0))
    返回 (0)
.如果真结束
赋值 (len_x, 字节集_取字节集长度 (待分割字节集))
赋值 (len_y, 字节集_取字节集长度 (用作分割的字节集))
.计次循环首 (找到位置个数, i)
    .如果真 (等于 (位置列表 [i], 1))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (i, 1))
        加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 1, 相减 (位置列表 [i], 1)))
        到循环尾 ()
    .如果真结束
    加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 相加 (位置列表 [相减 (i, 1)], len_y), 相减 (位置列表 [i], 相加 (位置列表 [相减 (i, 1)], len_y))))
.计次循环尾 ()
.如果真 (并且 (大于 (找到位置个数, 0), 小于或等于 (相加 (位置列表 [找到位置个数], len_y), len_x)))
    加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 相加 (位置列表 [找到位置个数], len_y), 相加 (相减 (len_x, 相加 (位置列表 [找到位置个数], len_y)), 1)))
.如果真结束
.如果真 (并且 (小于 (要返回的子字节集数目, 取数组成员数 (临时分割表)), 大于 (要返回的子字节集数目, 0)))
    .计次循环首 (要返回的子字节集数目, i)
        加入成员 (返回的字节集数组, 临时分割表 [i])
    .计次循环尾 ()
    返回 (要返回的子字节集数目)
.如果真结束
 ' 复制数组 (返回的字节集数组, 临时分割表)
赋值 (返回的字节集数组, 临时分割表)
返回 (取数组成员数 (返回的字节集数组))

.子程序 查找子字节集, 整数型, , 分割字节集时用
.参数 x, 字节集, , 
.参数 y, 字节集, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 字节集_取字节集长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 字节集_寻找字节集 (x, y, j))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 字节集_取重复字节集, 字节集, , 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的字节集, 字节集, , 

.局部变量 temp, 字节集, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的字节集))
.计次循环尾 ()
返回 (temp)


.子程序 字节集_字节集替换, 字节集, , 将指定字节集的某一部分用其它的字节集替换，然后返回替换后的结果。
.参数 欲替换其部分的字节集, 字节集, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的字节集, 字节集, 可空, 可以被省略。如果本参数被省略，则删除字节集中的指定部分。

.局部变量 len_x, 空白型, , , 
.局部变量 temp1, 字节集, , , 
.局部变量 temp2, 字节集, , , 

.如果真 (等于 (欲替换其部分的字节集, {  }))
    返回 ({  })
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (len_x, 字节集_取字节集长度 (欲替换其部分的字节集))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (temp1, 字节集_取字节集左边 (欲替换其部分的字节集, 相减 (起始替换位置, 1)))
赋值 (temp2, 字节集_取字节集右边 (欲替换其部分的字节集, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的字节集, temp2))


.子程序 字节集_子字节集替换, 字节集, , 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的。
.参数 欲被替换的字节集, 字节集, , 
.参数 欲被替换的子字节集, 字节集, , 
.参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集。
.参数 进行替换的起始位置, 空白型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 替换进行的次数, 空白型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 字节集, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (或者 (等于 (欲被替换的字节集, {  }), 等于 (欲被替换的子字节集, {  })))
    返回 ({  })
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 查找子字节集 (欲被替换的字节集, 欲被替换的子字节集, offset, 进行替换的起始位置))
.如果真 (等于 (count, 0))
    返回 (欲被替换的字节集)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的字节集)
赋值 (len, 字节集_取字节集长度 (欲被替换的子字节集))
赋值 (偏移, 相减 (字节集_取字节集长度 (用作替换的子字节集), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 字节集_字节集替换 (ret, offset [i], len, 用作替换的子字节集))
    .否则
        赋值 (ret, 字节集_字节集替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子字节集))
    .如果结束
    
.计次循环尾 ()
返回 (ret)


.程序集 数值转换, , , 

.子程序 数值_取十六进制文本, 文本型, , 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 文本_取空白文本 (8))
置入代码 ({ 87, 139, 69, 8, 139, 125, 252, 49, 201, 177, 8, 80, 36, 15, 60, 9, 119, 4, 4, 48, 235, 2, 4, 55, 136, 68, 15, 255, 88, 193, 232, 4, 226, 233, 137, 248, 95, 201, 194, 4, 0 })
返回 (“”)
 ' ///////置入代码
 ' push edi
 ' mov eax,dword[ebp+8]
 ' mov edi,dword[ebp-4]
 ' xor ecx,ecx
 ' mov cl ,byte 8
 ' aaa:
 ' push eax
 ' and al,0xf
 ' cmp al,byte 9
 ' ja bbb
 ' add al, 0x30
 ' jmp short ccc
 ' bbb:
 ' add al,55
 ' ccc:
 ' mov byte [edi+ecx-1], al
 ' pop eax
 ' shr eax,4
 ' loop aaa
 ' mov eax,edi
 ' pop edi
 ' leave
 ' retn 4


.子程序 数值_子程序指针到整数, 整数型, , 
.参数 x, 子程序指针, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

赋值 (address, _取指针_子程序指针 (x))
RtlMoveMemory_整数 (ret, address, 4)
返回 (ret)

.子程序 数值_字节集到整数, 整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, _取指针_字节集 (字节集))
赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 4))
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 4)
.如果结束
返回 (ret)


.子程序 数值_字节集到短整数, 短整数型, , 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, _取指针_字节集 (字节集))
赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 2))
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 2)
.如果结束
返回 (ret)


.子程序 数值_取十进制, 长整数型, , 
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：#十六进制,#十进制,#八进制，#二进制

.局部变量 ret, 长整数型, , , 

.如果真 (等于 (进制, #十进制)) ' 不想改汇编了，呵呵，就用API吧。
    StrToInt64Ex (欲转换的文本, 0, ret)
    返回 (ret)
.如果真结束
置入代码 ({ 86, 51, 210, 51, 192, 139, 117, 8, 139, 54, 133, 246, 116, 48, 139, 77, 12, 51, 219, 138, 30, 132, 219, 116, 26, 128, 251, 57, 119, 5, 128, 235, 48, 235, 6, 128, 203, 32, 128, 235, 87, 15, 165, 194, 211, 224, 3, 195, 70, 235, 224, 94, 139, 229, 93, 194, 8, 0 })
返回 (0)

.子程序 数值_长整数到整数, 整数型, , 
.参数 x, 长整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

返回 (x)

.子程序 数值_整数取高字, 整数型, , 
.参数 x, 整数型, , 

置入代码 ({ 139, 69, 8, 193, 232, 16, 201, 194, 4, 0 })
返回 (0)

.子程序 数值_整数取低字, 整数型, , 
.参数 x, 整数型, , 

置入代码 ({ 139, 69, 8, 37, 255, 255, 0, 0, 201, 194, 4, 0 })
返回 (0)

.子程序 数值_整除, 整数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 

返回 (相除 (被除数, 除数))


.子程序 数值_求余, 双精度小数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 

置入代码 ({ 221, 69, 16, 221, 69, 8, 217, 248, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 16, 0 })
返回 (0)

.子程序 数值_求次方, 双精度小数型, , 
.参数 欲求次方数值, 双精度小数型, , 
.参数 次方数, 双精度小数型, , 

置入代码 ({ 221, 69, 16, 221, 69, 8, 217, 241, 217, 192, 217, 252, 220, 225, 217, 201, 217, 224, 217, 240, 217, 232, 222, 193, 217, 253, 221, 217, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 16, 0 })
返回 (0)


.子程序 数值_求平方根, 双精度小数型, , 
.参数 欲求其平方根的数值, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 250, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)


.子程序 数值_合并整数, 整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 65535), 左移 (用作合并的整数2, 16)))


.子程序 数值_合并短整数, 短整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 255), 左移 (用作合并的整数2, 8)))


.子程序 数值_绝对取整, 整数型, , 
.参数 欲取整的小数, 双精度小数型, , 

返回 (欲取整的小数)


.子程序 数值_取整, 整数型, , 
.参数 欲取整的小数, 双精度小数型, , 

.如果 (大于或等于 (欲取整的小数, 0))
    返回 (欲取整的小数)
.否则
    返回 (相减 (欲取整的小数, 0.5))
.如果结束



.子程序 数值_求正弦, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 254, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求余弦, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 255, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求正切, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 242, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求反正切, 双精度小数型, , 
.参数 欲进行计算的角, 双精度小数型, , 

置入代码 ({ 221, 69, 8, 217, 243, 221, 93, 248, 139, 85, 252, 139, 69, 248, 201, 194, 8, 0 })
返回 (0)

.子程序 数值_求反正弦, 双精度小数型, , 
.参数 正弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (小于 (正弦值, -1), 大于 (正弦值, 1)))
    返回 (0)
.如果真结束
返回 (数值_求反正切 (相除 (正弦值, 数值_求平方根 (相减 (1, 相乘 (正弦值, 正弦值))))))

.子程序 数值_求反余弦, 双精度小数型, , 
.参数 余弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (大于 (余弦值, 1), 小于 (余弦值, -1)))
    返回 (0)
.如果真结束
返回 (相减 (相除 (#pi, 2), 数值_求反正弦 (余弦值)))

.子程序 数值_循环左移, 整数型, , 
.参数 要循环左移的整数, 整数型, , 
.参数 左移位数, 整数型, , <255

置入代码 ({ 139, 69, 8, 139, 77, 12, 211, 192, 201, 194, 4, 0 })
返回 (0)


.子程序 数值_循环右移, 整数型, , 
.参数 要循环右移的整数, 整数型, , 
.参数 右移位数, 整数型, , <255

置入代码 ({ 139, 69, 8, 139, 77, 12, 211, 200, 201, 194, 4, 0 })
返回 (0)


.程序集 系统, , , 

.子程序 系统_延时, 空白型, , 
.参数 时长, 整数型, , ms

Sleep (时长)
 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--


.子程序 系统_动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (动态调用子程序_API (#动态调用代码, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))


.子程序 系统_取操作系统类别, 整数型, , 返回值：0～8代表：“未知”, “Win95”, “Win98”, “WinME”, “ WinNT”, “Win2000”, “WinXP”, “Win2003”, “Vista”
置入代码 ({ 83, 51, 192, 100, 139, 29, 24, 0, 0, 0, 100, 139, 13, 48, 0, 0, 0, 133, 201, 121, 32, 185, 0, 0, 83, 0, 57, 75, 88, 117, 4, 176, 1, 235, 83, 57, 75, 84, 117, 4, 176, 2, 235, 74, 57, 75, 124, 117, 69, 176, 3, 235, 65, 139, 153, 168, 0, 0, 0, 139, 137, 164, 0, 0, 0, 131, 249, 4, 119, 4, 176, 4, 235, 44, 131, 249, 5, 117, 27, 131, 251, 0, 117, 4, 176, 5, 235, 30, 131, 251, 1, 117, 4, 176, 6, 235, 21, 131, 251, 2, 117, 4, 176, 7, 235, 12, 131, 249, 6, 117, 7, 131, 251, 0, 117, 2, 176, 8, 91, 139, 229, 93, 195 })
返回 (0)


.子程序 系统_信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBox (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 系统_取颜色值, 整数型, , 
.参数 红色, 整数型, , 数值范围从 0 到 255，表示颜色中的红色成份。
.参数 绿色, 整数型, , 数值范围从 0 到 255，表示颜色中的绿色成份。
.参数 蓝色, 整数型, , 数值范围从 0 到 255，表示颜色中的蓝色成份。

.局部变量 temp, 整数型, , , 
.局部变量 temp1, 整数型, , , 

赋值 (temp, 数值_合并短整数 (位与 (红色, 255), 位与 (绿色, 255)))
赋值 (temp1, 数值_合并整数 (temp, 位与 (蓝色, 255)))
返回 (temp1)


.子程序 系统_取文件名, 文本型, , 
.参数 带路径文件名, 文本型, , 

.局部变量 filename, 文本型, , , 

赋值 (filename, 文本_取空白文本 (255))
API_GetFileTitle (带路径文件名, filename, 255)
返回 (filename)


.子程序 系统_取路径, 文本型, , 
.参数 带路径文件名, 文本型, , 

.局部变量 offset, 空白型, , , 

赋值 (offset, 文本_倒找文本 (带路径文件名, “\”, , 假))
.如果 (等于 (offset, -1))
    返回 (环境_取运行目录 ())
.否则
    返回 (文本_取文本左边 (带路径文件名, offset))
.如果结束


.子程序 系统_文件夹是否存在, 逻辑型, , 
.参数 路径, 文本型, , 

返回 (PathIsDirectoryA (路径))


.子程序 系统_读配置项, 文本型, , 读取指定配置文件中指定项目的文本内容。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, , 参数值指定欲读入配置项在其节中的名称。
.参数 默认文本, 文本型, 可空, 可以被省略。如果指定配置项不存在，将返回此默认文本。如果指定配置项不存在且本参数被省略，将返回空文本。

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 文本_取空白文本 (255))
读配置文本 (节名称, 配置项名称, 默认文本, 返回文本, 255, 配置文件名)
返回 (文本_删首尾空 (返回文本))

.子程序 系统_写配置项, 逻辑型, , 将指定文本内容写入指定配置项中或者删除指定的配置项或节，如果指定配置文件不存在，将会自动创建。成功返回真，失败返回假。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲写入配置项所处节的名称。
.参数 配置项名称, 文本型, 可空, 可以被省略。参数值指定欲写入配置项在其节中的名称。如果参数值被省略，则删除指定节及其下的所有配置项。
.参数 欲写入值, 文本型, 可空, 可以被省略。参数值指定欲写入到指定配置项中的文本。如果参数值被省略，则删除所指定配置项。

.如果真 (是否为空 (配置项名称))
    .如果 (不等于 (删配置文件小节 (节名称, 0, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (是否为空 (欲写入值))
    .如果 (不等于 (删配置文件项 (节名称, 配置项名称, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (不等于 (文本_寻找文本 (配置项名称, “=”), -1))
    返回 (假)
.如果真结束
.如果真 (等于 (文本_寻找文本 (欲写入值, “=”), 1))
    返回 (假)
.如果真结束
.如果 (不等于 (创建或修改配置文件 (节名称, 配置项名称, 欲写入值, 配置文件名), 0))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 系统_取配置节名, 整数型, , 返回配置文件中所有已有节名的数量。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 返回的配置节名数组, 文本型, 数组, 返回指定配置文件中所有已有节名的文本数组。

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 

清除数组 (返回的配置节名数组)
赋值 (temp, 字节集_取空白字节集 (32767))
赋值 (len, API_GetPrivateProfileSectionNames (temp, 32767, 配置文件名))
赋值 (temp, 字节集_取字节集左边 (temp, len))
赋值 (count, 字节集_分割字节集 (temp, , , temp1))
.计次循环首 (count, i)
    加入成员 (返回的配置节名数组, 文本_字节集到文本 (temp1 [i]))
.计次循环尾 ()
返回 (count)
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 系统_取配置项名, 整数型, , 
.参数 配置文件名, 文本型, , 
.参数 节名称, 文本型, , 
.参数 返回的配置项名数组, 文本型, 数组, 

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 xxxx, 文本型, , , 

清除数组 (返回的配置项名数组)
赋值 (temp, 字节集_取空白字节集 (32767))
赋值 (len, API_GetPrivateProfileSection (节名称, temp, 32767, 配置文件名))
赋值 (temp, 字节集_取字节集左边 (temp, len))
赋值 (count, 字节集_分割字节集 (temp, , , temp1))
.计次循环首 (count, i)
    赋值 (xxxx, 文本_字节集到文本 (temp1 [i]))
    赋值 (xxxx, 文本_取文本左边 (xxxx, 相减 (文本_寻找文本 (xxxx, “=”), 1)))
    加入成员 (返回的配置项名数组, xxxx)
.计次循环尾 ()
返回 (count)


.子程序 系统_文件是否存在, 逻辑型, , 
.参数 欲测试的文件名称, 文本型, , 

返回 (PathFileExistsA (欲测试的文件名称))



.子程序 系统_取短路径, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 cb, 文本型, , , 
.局部变量 len, 整数型, , , 

赋值 (cb, 文本_取空白文本 (255))
赋值 (len, GetShortPathNameA (文件名, cb, 255))
返回 (文本_取文本左边 (cb, len))

.程序集 环境, , , 

.子程序 环境_读环境变量, 文本型, , 
.参数 环境变量名称, 文本型, , 

.局部变量 size, 整数型, , , 
.局部变量 name, 文本型, , , 

赋值 (size, 2048)
赋值 (name, 文本_取空白文本 (2048))
ExpandEnvironmentStringsA (环境变量名称, name, 2048)
.如果真 (等于 (name, 环境变量名称))
    返回 (“”)
.如果真结束
返回 (name)


.子程序 环境_写环境变量, 逻辑型, , 
.参数 环境变量名称, 文本型, , 
.参数 欲写入内容, 文本型, , 

返回 (SetEnvironmentVariableA (环境变量名称, 欲写入内容))


.子程序 环境_取运行目录, 文本型, , 
.局部变量 path, 文本型, , , 

赋值 (path, 文本_取空白文本 (255))
GetCurrentDirectoryA (255, path)
返回 (path)


.子程序 环境_取执行文件名, 文本型, , 
.局部变量 name, 文本型, , , 
.局部变量 offset, 整数型, , , 

赋值 (name, 文本_取空白文本 (255))
GetModuleFileNameA (0, name, 255)
赋值 (offset, 文本_倒找文本 (name, “\”))
赋值 (name, 文本_取文本右边 (name, 相减 (文本_取文本长度 (name), offset)))
返回 (name)


.子程序 环境_取命令行, 文本型, , 
返回 (GetCommandLineA ())


.程序集 加解密等, , , 

.子程序 加解密_crc32, 文本型, , 用于取crc32，结果为16进制文本
.参数 原文, 字节集, , 要取CRC32数据字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，为真小写。

.局部变量 crcval, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 文本型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 crc, 整数型, , , 
.局部变量 table, 整数型, , "256", 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 (“”)
.如果真结束
.变量循环首 (0, 255, 1, i) ' 用来得到码表
    赋值 (crc, i)
    .变量循环首 (1, 8, 1, )
        .如果 (不等于 (位与 (crc, 1), 0))
            赋值 (crc, 位异或 (位与 (右移 (crc, 1), 2147483647), 3988292384)) ' crc xor EDB88320
        .否则
            赋值 (crc, 位与 (右移 (crc, 1), 2147483647))
        .如果结束
        
    .变量循环尾 ()
    赋值 (table [相加 (i, 1)], crc)
.变量循环尾 ()
赋值 (crcval, 4294967295)
.计次循环首 (长度, i)
    赋值 (位置, 相加 (位异或 (原文 [i], 位与 (crcval, 255)), 1)) ' 查表
    赋值 (crcval, 位异或 (位与 (右移 (crcval, 8), 16777215), table [位置]))
.计次循环尾 ()
赋值 (结果, 数值_取十六进制文本 (位取反 (crcval)))
.如果真 (是否为小写)
    赋值 (结果, 文本_到小写 (结果))
.如果真结束
返回 (结果)


.子程序 加解密_rc4, 字节集, , RC4加解密，与易的输出形式一样，可能和其它加解密程序输出形式不一样，可自行进行相应调整。
.参数 原文, 字节集, , 需要加、解密的字节集
.参数 密码, 文本型, , 输入相应的密码

.局部变量 m, 字节型, , "256", 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 key, 字节集, , , 
.局部变量 密码长度, 整数型, , , 
.局部变量 原文长度, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 k, 字节型, , "256", 
.局部变量 temp, 字节型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
赋值 (密码长度, 文本_取文本长度 (密码))
赋值 (结果, 字节集_取空白字节集 (原文长度))
.计次循环首 (256, i)
    赋值 (m [i], 相减 (i, 1))
.计次循环尾 ()
.如果真 (大于 (密码长度, 0))
    赋值 (key, 字节集_文本到字节集 (密码))
    赋值 (j, 1)
    .计次循环首 (256, i)
        赋值 (k [i], key [j])
        赋值 (j, 相加 (j, 1))
        .如果真 (大于 (j, 密码长度))
            赋值 (j, 1)
        .如果真结束
        
    .计次循环尾 ()
    赋值 (j, 0)
    .计次循环首 (256, i)
        赋值 (j, 位与 (相加 (j, m [i], k [i]), 255))
        赋值 (temp, m [i])
        赋值 (m [i], m [相加 (j, 1)])
        赋值 (m [相加 (j, 1)], temp)
    .计次循环尾 ()
.如果真结束
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (原文长度, x)
    赋值 (i, 位与 (相加 (i, 1), 255))
    赋值 (j, 位与 (相加 (j, m [相加 (i, 1)]), 255))
    赋值 (temp, m [相加 (i, 1)])
    赋值 (m [相加 (i, 1)], m [相加 (j, 1)])
    赋值 (m [相加 (j, 1)], temp)
    赋值 (结果 [x], 位异或 (原文 [x], m [相加 (位与 (相加 (m [相加 (i, 1)], m [相加 (j, 1)]), 255), 1)]))
.计次循环尾 ()
返回 (结果)

.子程序 哈希, 文本型, , 
.参数 x, 字节集, , 
.参数 种类, 整数型, , 
.参数 长度, 整数型, , 

.局部变量 hCryptProv, 整数型, , , 
.局部变量 hKey, 空白型, , , 
.局部变量 hHash, 空白型, , , 
.局部变量 pbBuffer, 字节集, , , 
.局部变量 cbHash, 空白型, , , 
.局部变量 rgbHash, 字节集, , , 
.局部变量 rgbDigits, 字节集, , , 
.局部变量 szMD5, 字节集, , , 
.局部变量 b, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 len, 空白型, , , 

.如果 (等于 (API_CryptAcquireContext (hCryptProv, “”, “”, 1, -268435456), 0))
    .如果真 (等于 (API_CryptAcquireContext (hCryptProv, “”, “”, 1, 0), 0))
        返回 (“”)
    .如果真结束
    
.否则
    .如果 (等于 (API_CryptCreateHash (hCryptProv, 种类, hKey, 0, hHash), 0))
        API_CryptReleaseContext (hCryptProv, 0)
        返回 (“”)
        
    .否则
        赋值 (pbBuffer, x)
        赋值 (len, 字节集_取字节集长度 (x))
        .如果 (等于 (API_CryptHashData (hHash, pbBuffer, len, 0), 0))
            API_CryptDestroyHash (hHash)
            API_CryptReleaseContext (hCryptProv, 0)
            返回 (“”)
            
        .否则
            赋值 (rgbHash, 字节集_取空白字节集 (长度))
            赋值 (cbHash, 长度)
            .如果 (等于 (API_CryptGetHashParam (hHash, 2, rgbHash, cbHash, 0), 0))
                API_CryptDestroyHash (hHash)
                API_CryptReleaseContext (hCryptProv, 0)
                返回 (“”)
                
            .否则
                赋值 (rgbDigits, 字节集_文本到字节集 (“0123456789ABCDEF”))
                赋值 (szMD5, 字节集_取空白字节集 (相乘 (长度, 2)))
                .变量循环首 (0, 相减 (cbHash, 1), 1, i)
                    赋值 (b, rgbHash [相加 (i, 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 1)], rgbDigits [相加 (右移 (b, 4), 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 2)], rgbDigits [相加 (位与 (b, 15), 1)])
                .变量循环尾 ()
                API_CryptDestroyHash (hHash)
                API_CryptReleaseContext (hCryptProv, 0)
                
            .如果结束
            
        .如果结束
        
    .如果结束
    
.如果结束
返回 (文本_字节集到文本 (szMD5))


.子程序 加解密_md5, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32771, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)

.子程序 加解密_md4, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32770, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.子程序 加解密_md2, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32769, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.子程序 加解密_sha1, 文本型, , 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32772, 20))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.程序集 编码转换, , , 

.子程序 编码转换_qp编码, 字节集, , 用于Quoted-Printable编码、URL编码
.参数 原文, 字节集, , 要进行编码的字节集
.参数 编码类型, 逻辑型, 可空, 真为URL，假为QP，默认为QP

.局部变量 原文长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 整数型, , , 
.局部变量 新码表, 字节型, , "256,2", 
.局部变量 临时字节, 字节型, , , 
.局部变量 码表, 字节集, , , 
.局部变量 url, 空白型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 })
.如果 (编码类型)
    赋值 (url, 37)
.否则
    赋值 (url, 61)
.如果结束
.变量循环首 (0, 255, 1, i)
    赋值 (新码表 [相加 (i, 1)] [1], 码表 [相加 (右移 (i, 4), 1)])
    赋值 (新码表 [相加 (i, 1)] [2], 码表 [相加 (位与 (i, 15), 1)])
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相乘 (原文长度, 3)))
赋值 (j, 1)
.变量循环首 (1, 原文长度, 1, i)
    赋值 (临时字节, 原文 [i])
    赋值 (结果 [j], url)
    赋值 (结果 [相加 (j, 1)], 新码表 [相加 (临时字节, 1)] [1])
    赋值 (结果 [相加 (j, 2)], 新码表 [相加 (临时字节, 1)] [2])
    赋值 (j, 相加 (j, 3))
.变量循环尾 ()
返回 (结果)



.子程序 编码转换_qp解码, 字节集, , 用于Quoted-Printable解码,也可用来解码URL
.参数 原文, 字节集, , 要进行解码的字节集

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 空白型, , , 
.局部变量 新码表, 字节型, , "70,70", 
.局部变量 码表, 字节集, , , 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 })
.变量循环首 (0, 15, 1, i)
    .变量循环首 (0, 15, 1, j)
        赋值 (新码表 [码表] [相加 (i, 1)] [码表] [相加 (j, 1)], 相加 (左移 (i, 4), j))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相除 (长度, 3)))
赋值 (j, 1)
.变量循环首 (2, 相减 (长度, 1), 3, i)
    赋值 (结果 [j], 新码表 [原文] [i] [原文] [相加 (i, 1)])
    赋值 (j, 相加 (j, 1))
.变量循环尾 ()
返回 (结果)



.子程序 编码转换_base64编码, 字节集, , 未嵌汇编版
.参数 原文, 字节集, , 

.局部变量 余数, 整数型, , , 
.局部变量 三字节数据, 字节型, , "3", 
.局部变量 码表, 字节集, , , 
.局部变量 len_x, 整数型, , , 
.局部变量 len_y, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 k, 整数型, , , 

赋值 (len_x, 字节集_取字节集长度 (原文))
.如果真 (小于 (len_x, 1))
    返回 ({  })
.如果真结束
赋值 (余数, 数值_求余 (len_x, 3))
.如果真 (大于 (余数, 0))
    赋值 (原文, 相加 (原文, 字节集_取空白字节集 (相减 (3, 余数))))
    赋值 (len_x, 相减 (相加 (len_x, 3), 余数))
.如果真结束
赋值 (len_y, 相除 (相乘 (len_x, 4), 3))
赋值 (结果, 字节集_取空白字节集 (len_y))
赋值 (i, 1)
赋值 (码表, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 })
.变量循环首 (1, len_x, 3, k)
    赋值 (三字节数据 [1], 原文 [k])
    赋值 (三字节数据 [2], 原文 [相加 (k, 1)])
    赋值 (三字节数据 [3], 原文 [相加 (k, 2)])
    赋值 (结果 [i], 码表 [相加 (右移 (三字节数据 [1], 2), 1)])
    赋值 (结果 [相加 (i, 1)], 码表 [相加 (左移 (位与 (三字节数据 [1], 3), 4), 右移 (三字节数据 [2], 4), 1)])
    赋值 (结果 [相加 (i, 2)], 码表 [相加 (左移 (位与 (三字节数据 [2], 15), 2), 右移 (三字节数据 [3], 6), 1)])
    赋值 (结果 [相加 (i, 3)], 码表 [相加 (位与 (三字节数据 [3], 63), 1)])
    赋值 (i, 相加 (i, 4))
.变量循环尾 ()
.判断开始 (等于 (余数, 2))
    赋值 (结果 [len_y], 61)
.判断 (等于 (余数, 1))
    赋值 (结果 [len_y], 61)
    赋值 (结果 [相减 (len_y, 1)], 61)
.默认
    
.判断结束
返回 (结果)


.子程序 编码转换_base64解码, 字节集, , 未嵌汇编版
.参数 原文, 字节集, , 

.局部变量 码表, 字节集, , , 
.局部变量 位置码表, 字节型, , "256", 
.局部变量 结果, 字节集, , , 
.局部变量 原文长度, 整数型, , , 
.局部变量 补码, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 四字节数据, 字节型, , "4", 
.局部变量 j, 整数型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (等于 (原文长度, 0))
    返回 ({  })
.如果真结束
赋值 (码表, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 })
.计次循环首 (64, i)
    赋值 (位置码表 [码表] [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (补码, 0)
.判断开始 (等于 (字节集_取字节集右边 (原文, 2), { 61, 61 }))
    赋值 (补码, 2)
.判断 (等于 (字节集_取字节集右边 (原文, 1), { 61 }))
    赋值 (补码, 1)
.默认
    
.判断结束
赋值 (结果, 字节集_取空白字节集 (相乘 (相除 (原文长度, 4), 3)))
赋值 (j, 1)
.变量循环首 (1, 相减 (原文长度, 3), 4, i)
    赋值 (四字节数据 [1], 位置码表 [原文] [i])
    赋值 (四字节数据 [2], 位置码表 [原文] [相加 (i, 1)])
    赋值 (四字节数据 [3], 位置码表 [原文] [相加 (i, 2)])
    赋值 (四字节数据 [4], 位置码表 [原文] [相加 (i, 3)])
    赋值 (结果 [j], 相加 (左移 (四字节数据 [1], 2), 右移 (四字节数据 [2], 4)))
    赋值 (结果 [相加 (j, 1)], 相加 (左移 (四字节数据 [2], 4), 右移 (四字节数据 [3], 2)))
    赋值 (结果 [相加 (j, 2)], 相加 (左移 (四字节数据 [3], 6), 四字节数据 [4]))
    赋值 (j, 相加 (j, 3))
.变量循环尾 ()
.如果真 (大于 (补码, 0))
    赋值 (结果, 字节集_取字节集左边 (结果, 相减 (字节集_取字节集长度 (结果), 补码)))
.如果真结束
返回 (结果)

.子程序 编码转换_Ansi转Unicode, 字节集, , 
.参数 Ansi文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 

赋值 (len, API_MultiByteToWideChar (936, 0, Ansi文本, -1, {  }, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (936, 0, Ansi文本, -1, Unicode字节集, 相乘 (len, 2))
返回 (Unicode字节集)

.子程序 编码转换_Unicode转Ansi, 文本型, , 
.参数 Unicode字节集, 字节集, , 

.局部变量 ansi_len, 整数型, , , 单位: Word
.局部变量 unicode_len, 空白型, , , 
.局部变量 ansi, 文本型, , , 

赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (ansi_len, API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, ansi, 0, “”, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (ansi, 文本_取空白文本 (ansi_len))
 ' 输出调试文本 (ansi_len)
API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, ansi, ansi_len, “”, 0)
返回 (ansi)

.子程序 编码转换_Utf8转unicode, 字节集, , 
.参数 utf8字节集, 字节集, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 ll, 空白型, , , 

赋值 (ll, 字节集_取字节集长度 (utf8字节集))
赋值 (len, API_MultiByteToWideChar_utf8 (65001, 0, utf8字节集, ll, {  }, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar_utf8 (65001, 0, utf8字节集, ll, Unicode字节集, 相乘 (len, 2))
返回 (Unicode字节集)

.子程序 编码转换_Unicode转utf8, 字节集, , 
.参数 Unicode字节集, 字节集, , 

.局部变量 utf8_len, 整数型, , , 
.局部变量 unicode_len, 空白型, , , word
.局部变量 uft8, 字节集, , , 

赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (utf8_len, API_WideCharToMultiByte_utf8 (65001, 0, Unicode字节集, unicode_len, uft8, 0, 0, 0))
赋值 (uft8, 字节集_取空白字节集 (utf8_len))
 ' 输出调试文本 (utf8_len)
API_WideCharToMultiByte_utf8 (65001, 0, Unicode字节集, -1, uft8, utf8_len, 0, 0)
返回 (uft8)

.子程序 编码转换_Ansi转utf8, 字节集, , 
.参数 ansi文本, 文本型, , 

返回 (编码转换_Unicode转utf8 (编码转换_Ansi转Unicode (ansi文本)))


.子程序 编码转换_Utf8转ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 

返回 (编码转换_Unicode转Ansi (编码转换_Utf8转unicode (utf8字节集)))


.子程序 编码转换_ansi转usc2, 文本型, , usc2也就是unicode be
.参数 文本, 文本型, , 

.局部变量 unicode字节集, 字节集, , , 
.局部变量 len, 空白型, , , 
.局部变量 ret, 字节集, , , 

赋值 (unicode字节集, 编码转换_Ansi转Unicode (文本))
赋值 (len, 字节集_取字节集长度 (unicode字节集))
RtlMoveMemory_整数 (相减 (_取指针_字节集 (unicode字节集), 4), 相减 (len, 2), 4)
赋值 (ret, 字符交换 (unicode字节集))
返回 (输出字节集 (ret))


.子程序 编码转换_usc2转ansi, 文本型, , usc2也就是unicode be
.参数 usc2文本, 文本型, , 

.局部变量 unicode字节集, 字节集, , , 

赋值 (unicode字节集, 相加 (字符交换 (转到字节集 (字节集_文本到字节集 (usc2文本))), { 0, 0 }))
返回 (编码转换_Unicode转Ansi (unicode字节集))



.子程序 字符交换, 字节集, , ansi-usc2专用
.参数 字节集, 字节集, , 

.局部变量 i, 空白型, , , 
.局部变量 len, 空白型, , , 
.局部变量 ret, 字节集, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
赋值 (ret, 字节集_取空白字节集 (len))
.变量循环首 (1, len, 2, i)
    赋值 (ret [i], 字节集 [相加 (i, 1)])
    赋值 (ret [相加 (i, 1)], 字节集 [i])
.变量循环尾 ()
返回 (ret)


.子程序 输出字节集, 文本型, , ansi-usc2专用
.参数 原文, 字节集, , 

.局部变量 原文长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 整数型, , , 
.局部变量 新码表, 字节型, , "256,2", 
.局部变量 临时字节, 字节型, , , 
.局部变量 码表, 字节集, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 (“”)
.如果真结束
赋值 (码表, 字节集_文本到字节集 (“0123456789ABCDEF”))
.变量循环首 (0, 255, 1, i)
    赋值 (新码表 [相加 (i, 1)] [1], 码表 [相加 (右移 (i, 4), 1)])
    赋值 (新码表 [相加 (i, 1)] [2], 码表 [相加 (位与 (i, 15), 1)])
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相乘 (原文长度, 2)))
赋值 (j, 1)
.变量循环首 (1, 原文长度, 1, i)
    赋值 (临时字节, 原文 [i])
    赋值 (结果 [j], 新码表 [相加 (临时字节, 1)] [1])
    赋值 (结果 [相加 (j, 1)], 新码表 [相加 (临时字节, 1)] [2])
    赋值 (j, 相加 (j, 2))
.变量循环尾 ()
返回 (文本_字节集到文本 (结果))



.子程序 转到字节集, 字节集, , ansi-usc2专用
.参数 原文, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 空白型, , , 
.局部变量 新码表, 字节型, , "70,70", 
.局部变量 码表, 字节集, , , 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, 字节集_文本到字节集 (“0123456789ABCDEF”))
.变量循环首 (0, 15, 1, i)
    .变量循环首 (0, 15, 1, j)
        赋值 (新码表 [码表] [相加 (i, 1)] [码表] [相加 (j, 1)], 相加 (左移 (i, 4), j))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相除 (长度, 2)))
赋值 (j, 1)
.变量循环首 (1, 长度, 2, i)
    赋值 (结果 [j], 新码表 [原文] [i] [原文] [相加 (i, 1)])
    赋值 (j, 相加 (j, 1))
.变量循环尾 ()
返回 (结果)



.子程序 编码转换_GBK简体到GBK繁体, 文本型, , 
.参数 简体文本, 文本型, , 

.局部变量 文本长度, 整数型, , , 
.局部变量 繁体文本, 文本型, , , 

赋值 (文本长度, 文本_取文本长度 (简体文本))
赋值 (繁体文本, 文本_取空白文本 (文本长度))
LCMapString (2052, 67108864, 简体文本, 文本长度, 繁体文本, 文本长度)
返回 (繁体文本)

.子程序 编码转换_GBK繁体到GBK简体, 文本型, , 
.参数 繁体文本, 文本型, , 

.局部变量 文本长度, 整数型, , , 
.局部变量 简体文本, 文本型, , , 

赋值 (文本长度, 文本_取文本长度 (繁体文本))
赋值 (简体文本, 文本_取空白文本 (文本长度))
LCMapString (2052, 33554432, 繁体文本, 文本长度, 简体文本, 文本长度)
返回 (简体文本)

.子程序 编码转换_BIG5到GBK繁体, 文本型, , 
.参数 待转换文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (len, API_MultiByteToWideChar (950, 0, 待转换文本, -1, {  }, 0))
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (950, 0, 待转换文本, -1, Unicode字节集, 相乘 (len, 2))
 ' ////////////////////
赋值 (unicode_len, 相除 (取字节集长度 (Unicode字节集), 2))
赋值 (len, API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, 结果文本, 0, “”, 0))
赋值 (结果文本, 文本_取空白文本 (len))
API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, 结果文本, len, “”, 0)
返回 (结果文本)


.子程序 编码转换_BIG5到GBK简体, 文本型, , 
.参数 待转换文本, 文本型, , 

返回 (编码转换_GBK繁体到GBK简体 (编码转换_BIG5到GBK繁体 (待转换文本)))


.子程序 编码转换_GBK繁体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (len, API_MultiByteToWideChar (936, 0, 待转换文本, -1, {  }, 0))
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (936, 0, 待转换文本, -1, Unicode字节集, 相乘 (len, 2))
 ' ////////////////////
赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (len, API_WideCharToMultiByte (950, 0, Unicode字节集, unicode_len, 结果文本, 0, “”, 0))
赋值 (结果文本, 文本_取空白文本 (len))
API_WideCharToMultiByte (950, 0, Unicode字节集, unicode_len, 结果文本, len, “”, 0)
返回 (结果文本)


.子程序 编码转换_GBK简体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 

返回 (编码转换_GBK繁体到BIG5 (编码转换_GBK简体到GBK繁体 (待转换文本)))



 ' 不属于任何一个程序集、类模块的函数：
