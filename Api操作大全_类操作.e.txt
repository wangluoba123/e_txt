 ' 文件类型：Windows模块源码

 ' 程序名称：F.Api全能模块_1.6
 ' 程序描述：注意: 所有功能均在类中!
调用方式: 类名称.子程序名
例如: 系统.特殊延时
@备注:
作者:F.Dream QQ:708280
 ' 程序作者：F.Dream
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：FenDream@QQ.Com
 ' 主页地址：
 ' 版权声明：模块作者: F.Dream
 ' 版本号：1.6
 ' 创建号：0.0



.常量 窗口特效_从左到右打开窗口, "1", 公开, 从左到右打开窗口
.常量 窗口特效_从右到左打开窗口, "2", 公开, 从右到左打开窗口
.常量 窗口特效_从上到下打开窗口, "4", 公开, 从上到下打开窗口
.常量 窗口特效_从下到上打开窗口, "8", 公开, 从下到上打开窗口
.常量 窗口特效_逐渐放大, "16", 公开, 
.常量 窗口特效_卸载, "65536", 公开, 在窗体卸载时若想使用本函数就得加上此常量
.常量 窗口特效_获取焦点, "131072", 公开, 在窗体通过本函数打开后，默认情况下会失去焦点，除非加上此常量
.常量 窗口特效_特殊常量, "262144", 公开, 
.常量 窗口特效_淡入淡出效果, "524288", 公开, 淡入淡出效果
.常量 权限_备份, "“SeBackupPrivilege”", 公开, 系统权限
.常量 权限_启动, "“SeRestorePrivilege”", 公开, 系统权限
.常量 权限_关机, "“SeShutdownPrivilege”", 公开, 系统权限
.常量 权限_调试, "“SeDebugPrivilege”", 公开, 系统权限
.常量 QQ加密常量, "“var hexcase = 1;
var b64pad = "";
var chrsz = 8;
var mode = 32;

function preprocess(form)
{
  var str = "";
  str += form.verifycode.value;
  str = str.toUpperCase();
  form.p.value = md5(md5_3(form.p.value)+str);
  return true;
}

function md5_3(s)
{
  var tmp = new Array;
  tmp = core_md5(str2binl(s), s.length * chrsz);
  tmp = core_md5(tmp, 16 * chrsz);
  tmp = core_md5(tmp, 16 * chrsz);
  return binl2hex(tmp);
}

function md5(s)
{
  return hex_md5(s);
}
function hex_md5(s)
{
  return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}

function b64_md5(s)
{
  return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}

function str_md5(s)
{
  return binl2str(core_md5(str2binl(s), s.length * chrsz));
}

function hex_hmac_md5(key, data)
{
  return binl2hex(core_hmac_md5(key, data));
}

function b64_hmac_md5(key, data)
{
  return binl2b64(core_hmac_md5(key, data));
}

function str_hmac_md5(key, data)
{
  return binl2str(core_hmac_md5(key, data));
}

function md5_vm_test()
{
  return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
}

function core_md5(x, len)
{
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a = 1732584193;
  var b =  - 271733879;
  var c =  - 1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i + 0], 7,  - 680876936);
    d = md5_ff(d, a, b, c, x[i + 1], 12,  - 389564586);
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5_ff(b, c, d, a, x[i + 3], 22,  - 1044525330);
    a = md5_ff(a, b, c, d, x[i + 4], 7,  - 176418897);
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5_ff(c, d, a, b, x[i + 6], 17,  - 1473231341);
    b = md5_ff(b, c, d, a, x[i + 7], 22,  - 45705983);
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5_ff(d, a, b, c, x[i + 9], 12,  - 1958414417);
    c = md5_ff(c, d, a, b, x[i + 10], 17,  - 42063);
    b = md5_ff(b, c, d, a, x[i + 11], 22,  - 1990404162);
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5_ff(d, a, b, c, x[i + 13], 12,  - 40341101);
    c = md5_ff(c, d, a, b, x[i + 14], 17,  - 1502002290);
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

    a = md5_gg(a, b, c, d, x[i + 1], 5,  - 165796510);
    d = md5_gg(d, a, b, c, x[i + 6], 9,  - 1069501632);
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5_gg(b, c, d, a, x[i + 0], 20,  - 373897302);
    a = md5_gg(a, b, c, d, x[i + 5], 5,  - 701558691);
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5_gg(c, d, a, b, x[i + 15], 14,  - 660478335);
    b = md5_gg(b, c, d, a, x[i + 4], 20,  - 405537848);
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5_gg(d, a, b, c, x[i + 14], 9,  - 1019803690);
    c = md5_gg(c, d, a, b, x[i + 3], 14,  - 187363961);
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5_gg(a, b, c, d, x[i + 13], 5,  - 1444681467);
    d = md5_gg(d, a, b, c, x[i + 2], 9,  - 51403784);
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5_gg(b, c, d, a, x[i + 12], 20,  - 1926607734);

    a = md5_hh(a, b, c, d, x[i + 5], 4,  - 378558);
    d = md5_hh(d, a, b, c, x[i + 8], 11,  - 2022574463);
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5_hh(b, c, d, a, x[i + 14], 23,  - 35309556);
    a = md5_hh(a, b, c, d, x[i + 1], 4,  - 1530992060);
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5_hh(c, d, a, b, x[i + 7], 16,  - 155497632);
    b = md5_hh(b, c, d, a, x[i + 10], 23,  - 1094730640);
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5_hh(d, a, b, c, x[i + 0], 11,  - 358537222);
    c = md5_hh(c, d, a, b, x[i + 3], 16,  - 722521979);
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5_hh(a, b, c, d, x[i + 9], 4,  - 640364487);
    d = md5_hh(d, a, b, c, x[i + 12], 11,  - 421815835);
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5_hh(b, c, d, a, x[i + 2], 23,  - 995338651);

    a = md5_ii(a, b, c, d, x[i + 0], 6,  - 198630844);
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5_ii(c, d, a, b, x[i + 14], 15,  - 1416354905);
    b = md5_ii(b, c, d, a, x[i + 5], 21,  - 57434055);
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5_ii(d, a, b, c, x[i + 3], 10,  - 1894986606);
    c = md5_ii(c, d, a, b, x[i + 10], 15,  - 1051523);
    b = md5_ii(b, c, d, a, x[i + 1], 21,  - 2054922799);
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5_ii(d, a, b, c, x[i + 15], 10,  - 30611744);
    c = md5_ii(c, d, a, b, x[i + 6], 15,  - 1560198380);
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5_ii(a, b, c, d, x[i + 4], 6,  - 145523070);
    d = md5_ii(d, a, b, c, x[i + 11], 10,  - 1120210379);
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5_ii(b, c, d, a, x[i + 9], 21,  - 343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  if (mode == 16)
  {
    return Array(b, c);
  }
  else
  {
    return Array(a, b, c, d);
  }
}

function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

function core_hmac_md5(key, data)
{
  var bkey = str2binl(key);
  if (bkey.length > 16)
    bkey = core_md5(bkey, key.length * chrsz);

  var ipad = Array(16), opad = Array(16);
  for (var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = core_md5(ipad.concat(str2binl(data)), 512+data.length * chrsz);
  return core_md5(opad.concat(hash), 512+128);
}

function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

function bit_rol(num, cnt)
{
  return (num << cnt) | (num  >>> (32-cnt));
}

function str2binl(str)
{
  var bin = Array();
  var mask = (1 << chrsz) - 1;
  for (var i = 0; i < str.length * chrsz; i += chrsz)
    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << (i % 32);
  return bin;
}

function binl2str(bin)
{
  var str = "";
  var mask = (1 << chrsz) - 1;
  for (var i = 0; i < bin.length * 32; i += chrsz)
    str += String.fromCharCode((bin[i >> 5] >>> (i % 32)) & mask);
  return str;
}

function binl2hex(binarray)
{
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var str = "";

  for (var i = 0; i < binarray.length * 4; i++)
  {
    str += hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8+4)) & 0xF) +
      hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xF);
  }
  return str;
}

function binl2b64(binarray)
{
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var str = "";
  for (var i = 0; i < binarray.length * 4; i += 3)
  {
    var triplet = (((binarray[i >> 2] >> 8 * (i % 4)) & 0xFF) << 16) | ((
      (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4)) & 0xFF) << 8) | ((binarray[i
      + 2 >> 2] >> 8 * ((i + 2) % 4)) & 0xFF);
    for (var j = 0; j < 4; j++)
    {
      if (i * 8+j * 6 > binarray.length * 32)
        str += b64pad;
      else
        str += tab.charAt((triplet >> 6 * (3-j)) & 0x3F);
    }
  }
  return str;
}”", , QQ网页登陆加密常量
.常量 PROCESS_ALL_ACCESS, "2035711", , 内存操作
.常量 GWL_WNDPROC, "-4", , 
.常量 MAX_PATH, "260", , 
.常量 WM_DROPFILES, "563", , 
.常量 WAIT_OBJECT_0, "0", , 
.常量 QS_ALLINPUT, "255", , 
.常量 INFINITE, "-1", , 
.图片 动态调用代码, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\动态调用代码", , 
.常量 转换_十六进, "4", 公开, 
.常量 转换_八进制, "3", 公开, 
.常量 转换_二进制, "1", 公开, 
.常量 转换_十进制, "10", 公开, 
.常量 PROGRESS_CANCEL, "1", , 
.常量 PROGRESS_CONTINUE, "0", , 
.常量 PROGRESS_QUIET, "3", , 
.常量 PROGRESS_STOP, "2", , 
.常量 COPY_FILE_FAIL_IF_EXISTS, "1", , 
.常量 COPY_FILE_RESTARTABLE, "2", , 
.常量 TOKEN_ADJUST_PRIVILEGES, "32", , 
.常量 TOKEN_QUERY, "8", , 
.常量 SE_PRIVILEGE_ENABLED, "2", , 
.常量 TH32CS_SNAPPROCESS, "2", , 
.常量 PROCESS_QUERY_INFORMATION, "1024", , 
.常量 WRITE_DAC, "262144", , 
.常量 READ_CONTROL, "131072", , 
.常量 TOKEN_ALL_ACCESS, "983295", , 
.常量 GRANT_ACCESS, "1", , 
.常量 DACL_SECURITY_INFORMATION, "4", , 
.常量 ERROR_INSUFFICIENT_BUFFER, "122", , 
.常量 HEAP_ZERO_MEMORY, "8", , 
.常量 ERROR_SUCCESS, "0", , 
.常量 SecurityImpersonation, "2", , 
.常量 TokenPrimary, "1", , 
.常量 INTERNET_OPEN_TYPE_DIRECT, "1", , 
.常量 INTERNET_OPEN_TYPE_PROXY, "3", , 
.常量 INTERNET_SERVICE_HTTP, "3", , 
.常量 WAIT_TIMEOUT, "258", , 超时
.常量 GMEM_FIXED, "0", , 
.常量 MAXDWORD, "65535", , 
.常量 INVALID_HANDLE_VALUE, "-1", , 
.常量 FILE_ATTRIBUTE_ARCHIVE, "32", , 存档属性
.常量 FILE_ATTRIBUTE_DIRECTORY, "16", , 文件夹
.常量 FILE_ATTRIBUTE_HIDDEN, "2", , 隐藏属性
.常量 FILE_ATTRIBUTE_NORMAL, "128", , 无属性
.常量 FILE_ATTRIBUTE_READONLY, "1", , 只读属性
.常量 FILE_ATTRIBUTE_SYSTEM, "4", , 系统属性
.常量 FILE_ATTRIBUTE_TEMPORARY, "256", , 
.常量 BIF_RETURNONLYFSDIRS, "1", , 
.常量 DIB_RGB_COLORS, "0", , 
.常量 DIB_PAL_COLORS, "1", , 
.常量 HKEY_CLASSES_ROOT, "2147483648", 公开, 注册表导入,导出常量
.常量 HKEY_CURRENT_USER, "2147483649", 公开, 注册表导入,导出常量
.常量 HKEY_LOCAL_MACHINE, "2147483650", 公开, 注册表导入,导出常量
.常量 HKEY_USERS, "2147483651", 公开, 注册表导入,导出常量
.常量 REALTIME_PRIORITY_CLASS, "256", , 
.常量 THREAD_PRIORITY_TIME_CRITICAL, "15", , 
.常量 GetCurrentProcess, "-1", , 
.常量 GetCurrentThread, "-2", , 
.常量 Api_Alt, "1", 公开, 全局热键-按键代码
.常量 Api_Ctrl, "2", 公开, 全局热键-按键代码
.常量 Api_Shift, "4", 公开, 全局热键-按键代码
.常量 WM_HOTKEY, "786", 公开, 全局热键所需要的常数
.常量 NO_ERROR, "0", , 
.常量 FILE_ATTRIBUTE_COMPRESSED, "2048", , 被压缩的文件和目录
.常量 FILE_ATTRIBUTE_OFFLINE, "4096", , 
.常量 INTERNET_FLAG_RELOAD, "-2147483648", , 
.常量 GENERIC_READ, "-2147483648", , 
.常量 GENERIC_WRITE, "1073741824", , 
.常量 scUserAgent, "“FTP CLIENT”", , 
.常量 INTERNET_OPEN_TYPE_PRECONFIG, "0", , 
.常量 INTERNET_INVALID_PORT_NUMBER, "0", , 
.常量 FTP_TRANSFER_TYPE_ASCII, "1", , 
.常量 FTP_TRANSFER_TYPE_BINARY, "1", , 
.常量 INTERNET_FLAG_PASSIVE, "134217728", , 
.常量 ERROR_INTERNET_EXTENDED_ERROR, "12003", , 
.常量 INTERNET_DEFAULT_FTP_PORT, "21", , 
.常量 INTERNET_DEFAULT_GOPHER_PORT, "70", , 
.常量 INTERNET_DEFAULT_HTTP_PORT, "80", , 
.常量 INTERNET_SERVICE_FTP, "1", , 
.常量 ERROR_NO_MORE_FILES, "18", , 
.常量 winio左键按下, "9", , winio
.常量 winio右键按下, "10", , winio
.常量 winio中键按下, "12", , winio
.常量 winio任意键放开, "8", , winio
.常量 winio鼠标上移, "8", , winio
.常量 winio鼠标下移, "40", , winio
.常量 winio鼠标左移, "24", , winio
.常量 驱动_左键, "1", 公开, 
.常量 驱动_中键, "3", 公开, 
.常量 驱动_中键上滚动, "4", 公开, 
.常量 驱动_中键下滚动, "5", 公开, 
.常量 驱动_右键, "2", 公开, 
.常量 驱动_单击, "1", 公开, 
.常量 驱动_双击, "2", 公开, 
.常量 驱动_按下, "3", 公开, 
.常量 驱动_放开, "4", 公开, 
.常量 winio鼠标右移, "8", , winio
.图片 winio1a, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio1a", , winio.dll原始
.图片 winio2a, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio2a", , winio.sys原始
.图片 winio1, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio1", , winio.dll新
.图片 winio2, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio2", , winio.sys新
.图片 winio3, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio3", , winio.vxd原始
.图片 winio4, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio4", , hknm.sys
.图片 winio5, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\winio5", , hknms.sys
.常量 STATUS_INFO_LENGTH_MISMATCH, "-1073741820", , 
.常量 STATUS_SUCCESS, "0", , 
.常量 SysDbgReadVirtualMemory, "8", , 
.常量 SysDbgWriteVirtualMemory, "9", , 
.常量 SE_DEBUG_NAME, "“SeDebugPrivilege”", , 
.常量 SE_BACKUP_NAME, "“SeBackupPrivilege”", , 
.常量 SE_RESTORE_NAME, "“SeRestorePrivilege”", , 
.常量 SE_SHUTDOWN_NAME, "“SeShutdownPrivilege”", , 
.常量 system_handle_infomation, "16", , 
.常量 LWA_ALPHA, "5", , 窗口
.常量 PAGE_EXECUTE_READWRITE, "64", , 类名更改
.常量 PROCESS_VM_READ, "16", , 内存操作
.常量 PROCESS_DUP_HANDLE, "64", , 内存操作
.常量 PROCESS_VM_OPERATION, "8", , 内存操作
.常量 PROCESS_CREATE_THREAD, "2", , 内存操作
.常量 网页代码关键字, "“src="|href="”", , 
.常量 FO_MOVE, "1", , 移动
.常量 FOF_ALLOWUNDO, "64", , 
.常量 FO_COPY, "2", , 复制
.常量 FO_DELETE, "3", , 删除
.常量 FO_RENAME, "4", , 改名
.常量 GWL_EXSTYLE, "-20", , 
.常量 WS_EX_LAYERED, "524288", , 
.常量 WS_EX_TRANSPARENT, "32", , 
.常量 内存_不变的数值, "-1", 公开, 
.常量 内存_变大的数值, "-2", 公开, 
.常量 内存_变小的数值, "-3", 公开, 
.常量 内存_改变的数值, "-4", 公开, 
.常量 网页属性_网页标题, "“title”", 公开, title
.常量 网页属性_网页地址, "“location”", 公开, location
.常量 网页属性_网页源码, "“outerHTML”", 公开, outerHTML
.常量 网页属性_网页文本, "“innerText”", 公开, innerText
.常量 网页属性_网站域名, "“domain”", 公开, domain
.常量 网页属性_访问来源, "“referrer”", 公开, referrer
.常量 网页属性_创建时间, "“fileCreatedDate”", 公开, fileCreatedDate
.常量 网页属性_修改时间, "“lastModified”", 公开, lastModified
.常量 网页属性_Cookies, "“cookie”", 公开, cookie
.常量 网页属性_编码类型, "“charset”", 公开, charset
.常量 网页属性_文档大小, "“fileSize”", 公开, fileSize
.常量 脚本类型_JavaScript, "“JavaScript”", 公开, 
.常量 脚本类型_VBScript, "“VBScript”", 公开, 
.常量 网页事件_onabort, "“onabort”", 公开, 当用户中断下载图像时触发。.常量 网页事件_onactivate, "“onactivate”", 公开, 当对象设置为活动元素时触发。
.常量 网页事件_onafterprint, "“onafterprint”", 公开, 对象所关联的文档打印或打印预览后立即在对象上触发。
.常量 网页事件_onafterupdate, "“onafterupdate”", 公开, 当成功更新数据源对象中的关联对象后在数据绑定对象上触发。
.常量 网页事件_onbeforeactivate, "“onbeforeactivate”", 公开, 对象要被设置为当前元素前立即触发。
.常量 网页事件_onbeforecopy, "“onbeforecopy”", 公开, 当选中区复制到系统剪贴板之前在源对象触发。
.常量 网页事件_onbeforecut, "“onbeforecut”", 公开, 当选中区从文档中删除之前在源对象触发。
.常量 网页事件_onbeforedeactivate, "“onbeforedeactivate”", 公开, 在 activeElement 从当前对象变为父文档其它对象之前立即触发。
.常量 网页事件_onbeforeeditfocus, "“onbeforeeditfocus”", 公开, 在包含于可编辑元素内的对象进入用户界面激活状态前或可编辑容器变成控件选中区前触发。
.常量 网页事件_onbeforepaste, "“onbeforepaste”", 公开, 在选中区从系统剪贴板粘贴到文档前在目标对象上触发。
.常量 网页事件_onbeforeprint, "“onbeforeprint”", 公开, 对象的关联文档打印或打印预览前在对象上触发。
.常量 网页事件_onbeforeunload, "“onbeforeunload”", 公开, 在页面将要被卸载前触发。
.常量 网页事件_onbeforeupdate, "“onbeforeupdate”", 公开, 当成功更新数据源对象中的关联对象前在数据绑定对象上触发。
.常量 网页事件_onblur, "“onblur”", 公开, 在对象失去输入焦点时触发。
.常量 网页事件_onbounce, "“onbounce”", 公开, 当 marquee 对象的 behavior 属性设置为“alternate”且字幕的内容到达窗口一边时触发。
.常量 网页事件_oncellchange, "“oncellchange”", 公开, 在数据供应者中的数据变更时触发。
.常量 网页事件_onchange, "“onchange”", 公开, 当对象或选中区的内容改变时触发。
.常量 网页事件_onclick, "“onclick”", 公开, 在用户用鼠标左键单击对象时触发。
.常量 网页事件_oncontextmenu, "“oncontextmenu”", 公开, 在用户使用鼠标右键单击客户区打开上下文菜单时触发。
.常量 网页事件_oncontrolselect, "“oncontrolselect”", 公开, 当用户将要对该对象制作一个控件选中区时触发。
.常量 网页事件_oncopy, "“oncopy”", 公开, 当用户复制对象或选中区，将其添加到系统剪贴板上时在源元素上触发。
.常量 网页事件_oncut, "“oncut”", 公开, 当对象或选中区从文档中删除并添加到系统剪贴板上时在源元素上触发。
.常量 网页事件_ondataavailable, "“ondataavailable”", 公开, 每当异步传输数据的数据源对象的数据到达时触发。
.常量 网页事件_ondatasetchanged, "“ondatasetchanged”", 公开, 当数据源对象对应的数据集发生变更时触发。
.常量 网页事件_ondatasetcomplete, "“ondatasetcomplete”", 公开, 触发就表明数据源对象所有数据都可用。
.常量 网页事件_ondblclick, "“ondblclick”", 公开, 当用户双击对象时触发。
.常量 网页事件_ondeactivate, "“ondeactivate”", 公开, 当 activeElement 从当前对象变为父文档其它对象时触发。
.常量 网页事件_ondrag, "“ondrag”", 公开, 当进行拖曳操作时在源对象上持续触发。
.常量 网页事件_ondragend, "“ondragend”", 公开, 当用户在拖曳操作结束后释放鼠标时在源对象上触发。
.常量 网页事件_ondragenter, "“ondragenter”", 公开, 当用户拖曳对象到一个合法拖曳目标时在目标元素上触发。
.常量 网页事件_ondragleave, "“ondragleave”", 公开, 当用户在拖曳操作过程中将鼠标移出合法拖曳目标时在目标对象上触发。
.常量 网页事件_ondragover, "“ondragover”", 公开, 当用户拖曳对象划过合法拖曳目标时持续在目标元素上触发。
.常量 网页事件_ondragstart, "“ondragstart”", 公开, 当用户开始拖曳文本选中区或选中对象时在源对象上触发。
.常量 网页事件_ondrop, "“ondrop”", 公开, 当鼠标按钮在拖曳操作过程中释放时在目标对象上触发。
.常量 网页事件_onerror, "“onerror”", 公开, 当对象装载过程中发生错误时触发。
.常量 网页事件_onerrorupdate, "“onerrorupdate”", 公开, 更新数据源对象中的关联数据出错时在数据绑定对象上触发。
.常量 网页事件_onfilterchange, "“onfilterchange”", 公开, 当可视滤镜更改状态或完成转换时触发。
.常量 网页事件_onfinish, "“onfinish”", 公开, 当字幕循环完成后触发。
.常量 网页事件_onfocus, "“onfocus”", 公开, 当对象获得焦点时触发。
.常量 网页事件_onfocusin, "“onfocusin”", 公开, 当元素将要被设置为焦点之前触发。
.常量 网页事件_onfocusout, "“onfocusout”", 公开, 在移动焦点到其它元素之后立即触发于当前拥有焦点的元素上触发。
.常量 网页事件_onhelp, "“onhelp”", 公开, 当用户在浏览器为当前窗口时按
.常量 网页事件_onkeydown, "“onkeydown”", 公开, 当用户按下键盘按键时触发。
.常量 网页事件_onkeypress, "“onkeypress”", 公开, 当用户按下字面键时触发。
.常量 网页事件_onkeyup, "“onkeyup”", 公开, 当用户释放键盘按键时触发。
.常量 网页事件_onlayoutcomplete, "“onlayoutcomplete”", 公开, 当打印或打印预览版面处理完成用来自于源文档的内容填充当前
.常量 网页事件_onload, "“onload”", 公开, 在浏览器完成对象的装载后立即触发。
.常量 网页事件_onlosecapture, "“onlosecapture”", 公开, 当对象失去鼠标捕捉时触发。
.常量 网页事件_onmousedown, "“onmousedown”", 公开, 当用户用任何鼠标按钮单击对象时触发。
.常量 网页事件_onmouseenter, "“onmouseenter”", 公开, 当用户将鼠标指针移动到对象内时触发。
.常量 网页事件_onmouseleave, "“onmouseleave”", 公开, 当用户将鼠标指针移出对象边界时触发。
.常量 网页事件_onmousemove, "“onmousemove”", 公开, 当用户将鼠标划过对象时触发。
.常量 网页事件_onmouseout, "“onmouseout”", 公开, 当用户将鼠标指针移出对象边界时触发。
.常量 网页事件_onmouseover, "“onmouseover”", 公开, 当用户将鼠标指针移动到对象内时触发。
.常量 网页事件_onmouseup, "“onmouseup”", 公开, 当用户在鼠标位于对象之上时释放鼠标按钮时触发。
.常量 网页事件_onmousewheel, "“onmousewheel”", 公开, 当鼠标滚轮按钮旋转时触发。
.常量 网页事件_onmove, "“onmove”", 公开, 当对象移动时触发。
.常量 网页事件_onmoveend, "“onmoveend”", 公开, 当对象停止移动时触发。
.常量 网页事件_onmovestart, "“onmovestart”", 公开, 当对象开始移动时触发。
.常量 网页事件_onpaste, "“onpaste”", 公开, 当用户粘贴数据以便从系统剪贴板向文档传送数据时在目标对象上触发。
.常量 网页事件_onpropertychange, "“onpropertychange”", 公开, 当在对象上发生对象上发生属性更改时触发。
.常量 网页事件_onreadystatechange, "“onreadystatechange”", 公开, 当对象状态变更时触发。
.常量 网页事件_onreset, "“onreset”", 公开, 当用户重置表单时触发。
.常量 网页事件_onresize, "“onresize”", 公开, 当对象的大小将要改变时触发。
.常量 网页事件_onresizeend, "“onresizeend”", 公开, 当用户更改完控件选中区中对象的尺寸时触发。
.常量 网页事件_onresizestart, "“onresizestart”", 公开, 当用户开始更改控件选中区中对象的尺寸时触发。
.常量 网页事件_onrowenter, "“onrowenter”", 公开, 触发就表明当前行已经在数据源中更改，对象上有可用的新数据值。
.常量 网页事件_onrowexit, "“onrowexit”", 公开, 当数据源控件更改对象当前行前触发。
.常量 网页事件_onrowsdelete, "“onrowsdelete”", 公开, 当行将要从记录集中被删除时触发。
.常量 网页事件_onrowsinserted, "“onrowsinserted”", 公开, 当在当前记录集中插入新行后触发。
.常量 网页事件_onscroll, "“onscroll”", 公开, 当用户滚动对象的滚动条时触发。
.常量 网页事件_onselect, "“onselect”", 公开, 当当前选中区改变时触发。
.常量 网页事件_onselectionchange, "“onselectionchange”", 公开, 当文档的选中状态改变时触发。
.常量 网页事件_onselectstart, "“onselectstart”", 公开, 对象将要被选中时触发。
.常量 网页事件_onstart, "“onstart”", 公开, 在 marquee 对象的每次循环开始时触发。
.常量 网页事件_onstop, "“onstop”", 公开, 当用户单击停止按钮或离开
.常量 网页事件_onsubmit, "“onsubmit”", 公开, 当表单将要被提交时触发。
.常量 网页事件_onunload, "“onunload”", 公开, 在对象卸载前立即触发。
.常量 系统_Cpu常量, "“Function Getcpuid() 
Dim cpuSet,cpu
    Set cpuSet = GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_Processor")
    For Each cpu In cpuSet
      getcpuid=cpu.ProcessorId
      exit for
    Next
end Function”", , 
.常量 元素标识类型_名称, "0", 公开, 
.常量 元素标识类型_ID, "1", 公开, 
.常量 元素标识类型_索引, "2", 公开, 
.常量 元素标识类型_标题, "3", 公开, 
.常量 元素标识类型_地址, "4", 公开, 
.图片 文字比划, " ' 已保存到：D:\易语言学习\Data\Api操作大全_类操作.e\文字比划", , 
.常量 SYSTEM_PERFORMANCE_INFORMATION, "2", , 
.常量 SYSTEM_TIME_INFORMATION, "3", , 
.常量 GetTrait, "“Function GetTrait(P)
Dim WMI,Obj
    Select Case P
    Case "BIOS"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_BIOS")
    For Each Obj in WMI
    GetTrait ="BIOS.版本号:"&Obj.Name&chr(13)&chr(10) &"BIOS.制造商:"&Obj.Manufacturer&chr(13)&chr(10) &"BIOS.安装日期:"&Obj.InstallDate&chr(13)&chr(10) &"BIOS.标题:"&Obj.Caption&chr(13)&chr(10) &"BIOS.序列号:"&Obj.SerialNumber&chr(13)&chr(10) &"BIOS.SMBIOS的BIOS版本:"&Obj.SMBIOSBIOSVersion&chr(13)&chr(10) &"BIOS.基本的BIOS:"&Obj.PrimaryBIOS
    Exit For
    Next

    Case "硬盘"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_DiskDrive")
    For Each Obj in WMI
    GetTrait ="硬盘.型号:"&Obj.Model&chr(13)&chr(10) &"硬盘.介质类型:"&Obj.MediaType &chr(13)&chr(10) &"硬盘.制造商:"&Obj.Manufacturer &chr(13)&chr(10) &"硬盘.描述:"&Obj.Description &chr(13)&chr(10) &"硬盘.磁头柱面数:"&Obj.TotalCylinders &chr(13)&chr(10) &"硬盘.磁头数:"&Obj.TotalHeads &chr(13)&chr(10) &"硬盘.磁道扇区:"&Obj.SectorsPerTrack &chr(13)&chr(10) &"硬盘.大小:"&round(Obj.Size/1024/1024/1024,0)&"GB"
    Exit For
    Next

    Case "硬盘序列号"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_PhysicalMedia")
    For Each Obj in WMI
    GetTrait ="硬盘.序列号:"&Obj.SerialNumber
    Exit For
    Next
    Case "CPUID"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_Processor")
    For Each Obj in WMI
    GetTrait ="CPU.序列号:"&Obj.ProcessorId
    Exit For
    Next

    Case "声卡"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_SoundDevice")
    For Each Obj in WMI
    GetTrait ="声卡.型号:"& Obj.Caption &chr(13)&chr(10) &"声卡.描述:"&Obj.Description &chr(13)&chr(10) &"声卡.名称:"&Obj.Name &chr(13)&chr(10) &"声卡.制造商:"&Obj.Manufacturer
    Exit For
    Next

    Case "显卡"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_VideoController")
    For Each Obj in WMI
    GetTrait ="显卡.型号:"&Obj.Caption&chr(13)&chr(10) &"显卡.当前屏幕分辨率:"&Obj.CurrentHorizontalResolution &"×"&Obj.CurrentVerticalResolution&chr(13)&chr(10) &"显卡.视频构架:"&Obj.VideoArchitecture&chr(13)&chr(10) &"显卡.存储器类型:"&Obj.VideoMemoryType&chr(13)&chr(10)  &"显卡.显存:"&round(Obj.AdapterRAM/1024/1024,0)&"MB"&chr(13)&chr(10) &"显卡.当前位像素:"&Obj.CurrentBitsPerPixel&chr(13)&chr(10) &"显卡.名称:"&Obj.Description &chr(13)&chr(10) &"显卡.最大刷新率:"&Obj.MaxRefreshRate &chr(13)&chr(10) &"显卡.最低刷新率:"&Obj.MinRefreshRate &chr(13)&chr(10) &"显卡.适配器DAC类型:"&Obj.AdapterDACType &chr(13)&chr(10) &"显卡.视频处理器型号:"&Obj.VideoProcessor 
    Exit For
    Next

    Case "计算机名"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_ComputerSystem")
    For Each Obj in WMI
    GetTrait = Obj.Name
    Exit For
    Next

    Case "操作系统"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_OperatingSystem")
    For Each Obj in WMI
    GetTrait = "操作系统.名称及位置:"&Obj.Name &chr(13)&chr(10) &"操作系统.类型:"&Obj.OSType &chr(13)&chr(10) &"操作系统.代码集:"&Obj.CodeSet &chr(13)&chr(10) &"操作系统.安装日期:"&Obj.InstallDate &chr(13)&chr(10) &"操作系统.分页文件大小:"&Obj.SizeStoredInPagingFiles &chr(13)&chr(10) &"操作系统.名称:"&Obj.Caption &chr(13)&chr(10) &"操作系统.内存大小:"&round(Obj.TotalVisibleMemorySize/1024,0)&"MB"
    Exit For
    Next

    Case "主板"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_baseboard")
    For Each Obj in WMI
    GetTrait ="主板.型号:"&Obj.product
    Exit For
    Next

    Case "内存"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_LogicalMemoryConfiguration")
    For Each Obj in WMI
    GetTrait ="内存.大小:"&round(Obj.TotalPhysicalMemory/1024,0)&"MB"
    Exit For
    Next

    Case "光驱"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_CDROMDrive")
    For Each Obj in WMI
    GetTrait = "光驱.盘符:"&Obj.Drive&chr(13)&chr(10) &"光驱.类型:"&Obj.Manufacturer&chr(13)&chr(10) &"光驱.描述:"&Obj.Description &chr(13)&chr(10) &"光驱.厂家及型号:"&Obj.Caption
    Exit For
    Next

    Case "高速缓存"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_CacheMemory")
    For Each Obj in WMI
    GetTrait = "高速缓存.级别:"&Obj.Level&chr(13)&chr(10) &"高速缓存.写入策略:"&Obj.WritePolicy&chr(13)&chr(10) &"高速缓存.正确的错误:"&Obj.ErrorCorrectType &chr(13)&chr(10) &"高速缓存.缓存类型:"&Obj.CacheType&chr(13)&chr(10) &"高速缓存.结合力:"&Obj.Associativity &chr(13)&chr(10) &"高速缓存.更换政策:"&Obj.ReplacementPolicy
    Exit For
    Next

    Case "系统插槽"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_SystemSlot")
    For Each Obj in WMI
    GetTrait = "系统插槽.名称:"&Obj.SlotDesignation&chr(13)&chr(10)&"系统插槽.最大数据宽度:"&Obj.MaxDataWidth
    Exit For
    Next

    Case "MAC"
    Set WMI =GetObject("winmgmts:{impersonationLevel=impersonate}").InstancesOf("Win32_NetworkAdapterConfiguration")
    For Each Obj in WMI
        If Obj.IPEnabled=True Then
           GetTrait = Obj.MacAddress
           Exit For
        End If
    Next
    End Select
End Function”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库




数据类型 SHELLEXECUTEINFO, , 
    .成员 cbSize, 空白型, , , 
    .成员 fMask, 空白型, , , 
    .成员 hwnd, 空白型, , , 
    .成员 lpVerb, 文本型, , , 
    .成员 lpFile, 文本型, , , 
    .成员 lpParameters, 文本型, , , 
    .成员 lpDirectory, 文本型, , , 
    .成员 nShow, 空白型, , , 
    .成员 hInstApp, 空白型, , , 
    .成员 lpIDList, 空白型, , , 
    .成员 lpClass, 文本型, , , 
    .成员 hkeyClass, 空白型, , , 
    .成员 dwHotKey, 空白型, , , 
    .成员 hIcon, 空白型, , , 
    .成员 hProcess, 空白型, , , 

数据类型 ChooseColor, , 
    .成员 lStructSize, 空白型, , , 
    .成员 hwndOwner, 空白型, , , 
    .成员 hInstance, 空白型, , , 
    .成员 rgbResult, 空白型, , , 
    .成员 lpCustColors, 文本型, , , 
    .成员 flags, 空白型, , , 
    .成员 lCustData, 空白型, , , 
    .成员 lpfnHook, 空白型, , , 
    .成员 lpTemplateName, 文本型, , , 

数据类型 BITMAPINFOHEADER, , 
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 

数据类型 浏览信息, , 
    .成员 句柄, 整数型, , , 
    .成员 上层文件夹标识, 整数型, , , 
    .成员 返回文件夹, 文本型, , , 
    .成员 对话框标题, 文本型, , , 
    .成员 浏览参数, 整数型, , , 
    .成员 回调函数, 整数型, , , 
    .成员 映像索引缓冲区, 整数型, , , 

数据类型 保存句柄和指针, , 
    .成员 句柄, 空白型, , , 
    .成员 指针, 子程序指针, , , 

数据类型 模块信息, , 
    .成员 大小, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 模块句柄, 整数型, , , 
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

数据类型 矩形类型, 公开, 
    .成员 左边, 整数型, , , 左边
    .成员 顶边, 整数型, , , 顶边
    .成员 右边, 整数型, , , 右边
    .成员 底边, 整数型, , , 底边

数据类型 坐标类型, 公开, 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 

数据类型 LuID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 TOKEN_PRIVILEGES, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 LARGE_INTEGER, , 
    .成员 QuadPart, 长整数型, , , 占用8个字节

数据类型 ACL, , 
    .成员 AclRevision, 字节型, , , 
    .成员 Sbz1, 字节型, , , 
    .成员 AclSize, 短整数型, , , 
    .成员 AceCount, 短整数型, , , 
    .成员 Sbz2, 短整数型, , , 

数据类型 EXPLICIT_ACCESS, , 
    .成员 grfAccessPermissions, 整数型, , , 
    .成员 grfAccessMode, 整数型, , , ACCESS_MODE
    .成员 grfInheritance, 整数型, , , 
    .成员 TRUSTEE, TRUSTEE, , , 

数据类型 SECURITY_ATTRIBUTES, , 
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 TRUSTEE, , 
    .成员 pMultipleTrustee, 整数型, , , 
    .成员 MultipleTrusteeOperation, 整数型, , , MULTIPLE_TRUSTEE_OPERATION
    .成员 TrusteeForm, 整数型, , , TRUSTEE_FORM
    .成员 TrusteeType, 整数型, , , TRUSTEE_TYPE
    .成员 ptstrName, 文本型, , , 

数据类型 内存信息模块, , 内存
    .成员 BaseAddress, 整数型, , , 
    .成员 byscsd, 整数型, , , 应用程序可用的最小地址
    .成员 AllocattionProtect, 整数型, , , 应用程序可用的最大地址
    .成员 rvytsdfy, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 ACCESS_MODE, , 
    .成员 Enum, 整数型, , , 

数据类型 STARTUPINFO, , 
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 文本型, , , 
    .成员 lpDesktop, 文本型, , , 
    .成员 lpTitle, 文本型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 PROCESS_INFORMATION, , 
    .成员 hProcess, 整数型, , , 
    .成员 hThread, 整数型, , , 
    .成员 dwProcessId, 整数型, , , 
    .成员 dwThreadId, 整数型, , , 

数据类型 IO_STATUS_BLOCK, , 
    .成员 Status, 整数型, , , 
    .成员 Information, 整数型, , , 

数据类型 UNICODE_STRING, , 
    .成员 Length, 短整数型, , , 
    .成员 MaximumLength, 短整数型, , , 
    .成员 Buffer, 整数型, , , 

数据类型 OBJECT_ATTRIBUTES, , 
    .成员 Length, 整数型, , , 
    .成员 RootDirectory, 整数型, , , 
    .成员 ObjectName, UNICODE_STRING, 传址, , 
    .成员 Attributes, 整数型, , , 
    .成员 SecurityDeor, 整数型, , , 
    .成员 SecurityQualityOfService, 整数型, , , 

数据类型 MULTIPLE_TRUSTEE_OPERATION, , 
    .成员 Enum, 整数型, , , 

数据类型 TRUSTEE_FORM, , 
    .成员 Enum, 整数型, , , 

数据类型 TRUSTEE_TYPE, , 
    .成员 Enum, 整数型, , , 

数据类型 AceArray, , 
    .成员 List, EXPLICIT_ACCESS, , , 

数据类型 SE_OBJECT_TYPE, , 
    .成员 Enum, 整数型, , , 

数据类型 OSVERSIONINFO, , 
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 
    .成员 szCSDVersion, 字节型, , "128", 

数据类型 LUID_AND_ATTRIBUTES, , 
    .成员 Luid, LUID, , , 
    .成员 Attributes, 整数型, , , 

数据类型 LUID, , 
    .成员 LowPart, 整数型, , , 
    .成员 HighPart, 整数型, , , 

数据类型 PROCESSENTRY32, , 
    .成员 dwsize, 整数型, , , 296
    .成员 cntusage, 整数型, , , 引用数
    .成员 th32ProcessID, 整数型, , , 进程标识符
    .成员 th32defaultheapid, 整数型, , , 默认堆ID
    .成员 th32moduleid, 整数型, , , 进程模块标识符
    .成员 cntthreads, 整数型, , , 线程数
    .成员 th32ParentProcessID, 整数型, , , 父进程标识符
    .成员 pcpriclassbase, 整数型, , , 线程优先权
    .成员 dwflags, 整数型, , , 
    .成员 szExefile, 字节型, , "260", 进程名称

数据类型 SECURITY_DESCRIPTOR, , 30
    .成员 Revision, 字节型, , , 
    .成员 Sbz1, 字节型, , , 
    .成员 Control, 整数型, , , 
    .成员 Owner, 整数型, , , 
    .成员 Group, 整数型, , , 
    .成员 Sacl, ACL, , , 
    .成员 Dacl, ACL, , , 

数据类型 查找的文件信息_, , WIN32_FIND_DATA
    .成员 dwFileAttributes, 整数型, , , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 
    .成员 dwLowDateTime1, 整数型, , , 
    .成员 dwHighDateTime1, 整数型, , , 
    .成员 dwLowDateTime2, 整数型, , , 
    .成员 dwHighDateTime2, 整数型, , , 
    .成员 nFileSizeHigh, 整数型, , , 
    .成员 nFileSizeLow, 整数型, , , 文件大小
    .成员 dwReserved0, 整数型, , , 
    .成员 dwReserved1, 整数型, , , 
    .成员 cFileName, 字节型, , "260", 
    .成员 cAlternate, 文本型, , "14", 

数据类型 进程类型, 公开, 
    .成员 size, 整数型, , , 
    .成员 usage, 整数型, , , 
    .成员 id, 整数型, , , 
    .成员 hid, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 threads, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 clbase, 整数型, , , 
    .成员 flag, 整数型, , , 
    .成员 exefile, 字节型, , "256", 

数据类型 位图信息_, , BITMAPINFO
    .成员 结果大小, 整数型, , , biSize
    .成员 位图宽度, 整数型, , , biWidth
    .成员 位图高度, 整数型, , , biHeight
    .成员 位图位面数, 短整数型, , , biPlanes
    .成员 位深度, 短整数型, , , biBitCount
    .成员 压缩率, 整数型, , , biCompression
    .成员 位图大小, 整数型, , , biSizeImage
    .成员 水平折像度, 整数型, , , biXPelsPerMeter
    .成员 垂直折像度, 整数型, , , biYPelsPerMeter
    .成员 位图颜色表索引, 整数型, , , biClrUsed
    .成员 位图显示索引, 整数型, , , biClrImportant
    .成员 蓝色值, 字节型, , , rgbBlue
    .成员 绿色值, 字节型, , , rgbGreen
    .成员 红色值, 字节型, , , rgbRed
    .成员 保留参数, 字节型, , , rgbReserved

数据类型 文件头信息_, , 
    .成员 文件类型, 短整数型, , , bfType
    .成员 结果大小, 整数型, , , bfSize
    .成员 保留1, 短整数型, , , bfReserved1保留，必须设置为0
    .成员 保留2, 短整数型, , , bfReserved2保留，必须设置为0
    .成员 偏移量, 空白型, , , bfOffBits从文件头开始到实际的图象数据之间的字节的偏移量

数据类型 SYSTEMTIME, , 系统时间;
    .成员 wYear, 短整数型, , , 
    .成员 wMonth, 短整数型, , , 
    .成员 wDayOfWeek, 短整数型, , , 
    .成员 wDay, 短整数型, , , 
    .成员 wHour, 短整数型, , , 
    .成员 wMinute, 短整数型, , , 
    .成员 wSecond, 短整数型, , , 
    .成员 wMilliseconds, 短整数型, , , 

数据类型 Token_Privileges, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 WIN32_FIND_DATA, , 
    .成员 dwFileAttributes, 整数型, , , 文件的属性
    .成员 ftCreationTime, FILETIME, , , 文件的创建时间
    .成员 ftLastAccessTime, FILETIME, , , 文件的最后一次被读写的时间
    .成员 ftLastWriteTime, FILETIME, , , 文件的最后一次修改的时间
    .成员 nFileSizeHigh, 整数型, , , 
    .成员 nFileSizeLow, 整数型, , , 
    .成员 dwReserved0, 整数型, , , 
    .成员 dwReserved1, 整数型, , , 
    .成员 cFileName, 文本型, , , 用于存放文件名的字符串
    .成员 cAlternate, 文本型, , "14", 

数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 SYSTEM_HANDLE_INFORMATION, , 16byte
    .成员 ProcessId, 整数型, , , 进程标识符
    .成员 ObjectTypeNumber, 字节型, , , 打开的对象的类型
    .成员 Flags, 字节型, , , 句柄属性标志
    .成员 Handle, 短整数型, , , 句柄数值,在进程打开的句柄中唯一标识某个句柄
    .成员 Object, 整数型, , , 这个就是句柄对应的EPROCESS的地址
    .成员 GrantedAccess, 整数型, , , 句柄对象的访问权限

数据类型 BITMAP, , 
    .成员 bmType, 空白型, , , 
    .成员 bmWidth, 空白型, , , 
    .成员 bmHeight, 空白型, , , 
    .成员 bmWidthBytes, 空白型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 空白型, 传址, , 

数据类型 BITMAPINFO, , 
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 
    .成员 bmiHeader, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 空白型, , , RGBQUAD          bmiColors[1]; 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 空白型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 空白型, , , 

数据类型 RECT, , 
    .成员 left, 整数型, , , 
    .成员 top, 整数型, , , 
    .成员 right, 整数型, , , 
    .成员 bottom, 整数型, , , 

数据类型 安全属性, , 
    .成员 长度, 整数型, , , 
    .成员 权限, 整数型, , , 
    .成员 句柄, 整数型, , , 

数据类型 CMD回显_进程信息, , 
    .成员 进程号, 整数型, , , 
    .成员 线程号, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 线程ID, 整数型, , , 

数据类型 启动信息, , 
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 整数型, , , 
    .成员 lpDesktop, 整数型, , , 
    .成员 lpTitle, 整数型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 LOGFONT, , 逻辑字体;   (写屏幕)
    .成员 高度, 整数型, , , lfheight
    .成员 宽度, 整数型, , , lfwidth
    .成员 控制摆, 整数型, , , lfrscapement
    .成员 定方位, 整数型, , , lforientation
    .成员 加粗, 整数型, , , lfweight
    .成员 斜体, 字节型, , , lfitalic
    .成员 下划线, 字节型, , , lfunderline
    .成员 袭击出, 字节型, , , lfstrikeout
    .成员 零碎工作组合, 字节型, , , lfcharset
    .成员 出自精确, 字节型, , , lfoutprecision
    .成员 修剪精确, 字节型, , , lfclipprecision
    .成员 性质, 字节型, , , lfquality
    .成员 间距, 字节型, , , lfpitchandfamily
    .成员 字体名称, 文本型, , , lffacename[lf.facesize]

数据类型 窗口类型, 公开, 枚举窗口信息
    .成员 窗口句柄, 整数型, 传址, , 
    .成员 进程ID, 整数型, 传址, , 
    .成员 线程ID, 整数型, 传址, , 
    .成员 窗口类名, 文本型, , , 
    .成员 窗口标题, 文本型, , , 

数据类型 操作系统, , OSVERSIONINFO 结构中的 osName 返回操作系统的名称
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 主版本号 dwMajorVersion
    .成员 dwMinorVersion, 整数型, , , 次版本号
    .成员 dwBuildNumber, 整数型, , , 内部版本号
    .成员 dwPlatformId, 整数型, , , 操作平台标识
    .成员 szCSDVersion, 字节型, , "128", 补丁版本
    .成员 wServicePackMajor, 整数型, , , 
    .成员 wServicePackMinor, 整数型, , , 
    .成员 wSuiteMask, 整数型, , , 根据这个值可得到更具体的系统类型
    .成员 wProductType, 字节型, , , 产品类型
    .成员 wReserved, 字节型, , , 

数据类型 浏览器, , 
    .成员 cbSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 

数据类型 IPInfo, , IP
    .成员 dwAddr, 整数型, , , 
    .成员 dwIndex, 整数型, , , 
    .成员 dwMask, 整数型, , , 
    .成员 dwBCastAddr, 整数型, , , 
    .成员 dwReasmSize, 整数型, , , 
    .成员 unused1, 短整数型, , , 
    .成员 unused2, 短整数型, , , 

数据类型 MIB_IPAddrTable, , IP
    .成员 dEntrys, 整数型, , , 
    .成员 mIPInfo, IPInfo, , "255", 

数据类型 项目标识符列表_, , ITEMIDLIST
    .成员 结构大小, 整数型, , , cb
    .成员 标识符长度, 字节型, , "255", abID

数据类型 BROWSEINFO, , 
    .成员 hOwner, 空白型, , , 
    .成员 pidlRoot, 空白型, , , 
    .成员 pszDisplayName, 文本型, , , 
    .成员 lpszTitle, 文本型, , , 
    .成员 ulFlags, 空白型, , , 
    .成员 lpfn, 子程序指针, , , 
    .成员 lParam, 空白型, , , 
    .成员 iImage, 空白型, , , 

数据类型 SHFILEOPSTRUCT_, , 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 1移动
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 提示方式
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 标题

数据类型 模块类型, 公开, 进程模块信息
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 大小, 整数型, , , 
    .成员 模块句柄, 整数型, , , 
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

数据类型 进程权限_, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 MEMORY_BASIC_INFORMATION, , 内存
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 应用程序可用的最小地址
    .成员 AllocattionProtect, 整数型, , , 应用程序可用的最大地址
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 内存类型, 公开, 
    .成员 数据结构长度, 整数型, , , 
    .成员 内存使用百分比, 整数型, , , 
    .成员 实际内存总字节数, 整数型, , , 
    .成员 可用的实际内存字节数, 整数型, , , 
    .成员 分页文件总字节数, 整数型, , , 
    .成员 分页文件可用字节数, 整数型, , , 
    .成员 虚拟内存的总字节数, 整数型, , , 
    .成员 可用的虚拟内存字节数, 整数型, , , 

数据类型 WNDCLASSEX, , 类名更改
    .成员 cbSize, 整数型, , , 
    .成员 style, 整数型, , , 
    .成员 lpfnWndProc, 整数型, , , 
    .成员 cbClsExtra, 整数型, , , 
    .成员 cbWndExtra, 整数型, , , 
    .成员 hInstance, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 hCursor, 整数型, , , 
    .成员 hbrBackground, 整数型, , , 
    .成员 lpszMenuName, 文本型, , , 
    .成员 lpszClassName, 文本型, , , 
    .成员 hIconSm, 整数型, , , 

数据类型 按键信息_, , 钩子
    .成员 虚拟码, 整数型, , , 
    .成员 扫描码, 整数型, , , 
    .成员 标记, 整数型, , , 
    .成员 时间, 整数型, , , 
    .成员 额外信息, 整数型, , , 

数据类型 ITEMIDLIST, , ITEMIDLIST
    .成员 cd, 整数型, , , cb
    .成员 abID, 字节型, , "255", abID

数据类型 消息类型, 公开, 
    .成员 窗口句柄, 整数型, , , 
    .成员 消息标识, 整数型, , , 
    .成员 消息值1, 整数型, , , 
    .成员 消息值2, 整数型, , , 
    .成员 消息时间, 整数型, , , 
    .成员 坐标横, 整数型, , , 
    .成员 坐标纵, 整数型, , , 

数据类型 SYSTEM_PERFORMANCE_INFORMATION, , 
    .成员 liIdleTime, 长整数型, , , 
    .成员 dwSpare, 整数型, , "76", 

数据类型 SYSTEM_TIME_INFORMATION, , 
    .成员 liKeBootTime, 长整数型, , , 
    .成员 liKeSystemTime, 长整数型, , , 
    .成员 liExpTimeZoneBias, 长整数型, , , 
    .成员 uCurrentTimeZoneId, 整数型, , , 
    .成员 dwReserved, 整数型, , , 

.全局变量 Xml, Xml_操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 网页, 网页操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 系统, 系统操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 模拟, 模拟操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 窗口, 窗口操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 内存, 内存操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 文本, 文本操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 字节, 字节操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 加密, 加密操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 数值, 数值操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 编码, 编码操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 驱动, 驱动操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 进程, 进程操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 Hook, Hook操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 图形, 图形操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 网络, 网络操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 识图, 识图操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 磁盘, 磁盘操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 汇编, 汇编操作, 公开, , 类操作变量名称 - 提供快速操作
.全局变量 当前窗口信息, 窗口类型, , "0", 枚举出来的窗口信息
.全局变量 当前窗口列表, 整数型, , "0", 枚举出来的窗口句柄列表
.全局变量 A服务器目录, 文本型, , , 
.全局变量 A本地目录, 文本型, , , 
.全局变量 变量旧类名, 文本型, , , 
.全局变量 变量新类名, 文本型, , , 
.全局变量 键盘锁定钩子句柄, 整数型, , , 全局钩子
.全局变量 键盘锁定状态, 逻辑型, , , 全局钩子
.全局变量 鼠标锁定钩子句柄, 整数型, , , 全局钩子
.全局变量 鼠标锁定状态, 逻辑型, , , 全局钩子
.全局变量 Ftp_hConnection, 整数型, , , 
.全局变量 _全局热键_preWinProc, 整数型, 公开, , 
.全局变量 结束进程_进程ID, 整数型, , , 
.全局变量 结束进程_进程名称, 文本型, , , 
.全局变量 窗口信息, 窗口类型, , "0", 
.全局变量 _进度复制_当前进度, 文本型, 公开, , 
.全局变量 原函数指针, 空白型, , , 
.全局变量 保存, 保存句柄和指针, , "0", 
.全局变量 初始文件夹, 文本型, , , 

.DLL命令 Api_打开进程, 整数型, "", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 CallWindowProc_Hb, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 
    .参数 子程序, 整数型, , 
    .参数 参数, 整数型, 数组, 
    .参数 参数数目, 整数型, , 
    .参数 是否C调用, 逻辑型, , 

.DLL命令 LaunchInternetControlPanel, 整数型, "inetcpl.cpl", "", , 
    .参数 hwndParent, 整数型, , 

.DLL命令 LaunchConnectionDialog, 整数型, "inetcpl.cpl", "", , 
    .参数 hwndParent, 整数型, , 

.DLL命令 LaunchSecurityDialog, 整数型, "inetcpl.cpl", "", , 
    .参数 hwndParent, 整数型, , 

.DLL命令 LaunchSiteCertDialog, 整数型, "inetcpl.cpl", "", , 
    .参数 hwndParent, 整数型, , 

.DLL命令 OpenFontsDialog, 整数型, "inetcpl.cpl", "", , 
    .参数 hwndParent, 整数型, , 
    .参数 aa, 空白型, , 

.DLL命令 DoOrganizeFavDlg, 整数型, "shdocvw.dll", "", , 
    .参数 hwndParent, 整数型, , 
    .参数 lpszPath, 文本型, 传址, 

.DLL命令 SHGetSpecialFolderPath, 整数型, "shell32.dll", "SHGetSpecialFolderPathA", , 
    .参数 hwndOwner, 整数型, , 
    .参数 lpszPath, 文本型, , 
    .参数 nFolder, 整数型, , 
    .参数 fCreate, 整数型, , 

.DLL命令 ShellExecute, 空白型, "", "ShellExecuteA", , 
    .参数 hwnd, 空白型, , 
    .参数 lpOperation, 文本型, , 
    .参数 lpFile, 文本型, , 
    .参数 lpParameters, 空白型, , 空字符串
    .参数 lpDirectory, 空白型, , 空字符串
    .参数 nShowCmd, 空白型, , 

.DLL命令 SHRestartSystemMB, 空白型, "Shell32.dll", "#59", , 
    .参数 hOwner, 空白型, , 
    .参数 sExtraPrompt, 空白型, , 空字符串
    .参数 uFlags, 空白型, , 

.DLL命令 SHRunDialog, 空白型, "Shell32.dll", "#61", , 
    .参数 hOwner, 空白型, , 
    .参数 UnknownP1, 空白型, , 
    .参数 UnknownP2, 空白型, , 
    .参数 szTitle, 整数型, , 对话框的标题
    .参数 szPrompt, 整数型, , 对话框中的描述文字
    .参数 uFlags, 空白型, , 

.DLL命令 ShellExecuteEX, 空白型, "", "ShellExecuteEx", , 
    .参数 SEI, SHELLEXECUTEINFO, 传址, 

.DLL命令 SHShutDownDialog, 空白型, "Shell32.dll", "#60", , 
    .参数 YourGuess, 空白型, , 

.DLL命令 WNetConnectionDialog, 空白型, "mpr.dll", "WNetConnectionDialog", , 
    .参数 hWnd, 空白型, , 
    .参数 dwType, 空白型, , 

.DLL命令 ChooseColor, 整数型, "comdlg32.dll", "ChooseColorA", , 
    .参数 pChoosecolor, ChooseColor, 传址, 

.DLL命令 GetWindowWord, 整数型, "", "GetWindowWord", , 
    .参数 hwnd, 空白型, , 
    .参数 nIndex, 空白型, , 

.DLL命令 API_发送内容, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 文本型, , 具体取决于消息;

.DLL命令 Api_限制鼠标, 整数型, "", "BlockInput", , 
    .参数 fBlock, 空白型, , 1.锁定，0.解除

.DLL命令 API_改变窗口, 整数型, "user32", "MoveWindow", , 改变指定窗口的位置和大小。顶级窗口可能受最大或最小尺寸的限制，那些尺寸优先于这里设置的参数  非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 欲移动窗口的句柄
    .参数 左侧位置, 整数型, , 窗口新的左侧位置
    .参数 顶部位置, 整数型, , 窗口新的顶部位置
    .参数 新宽度, 整数型, , 窗口的新宽度
    .参数 高宽度, 整数型, , 窗口的高宽度
    .参数 是否重画, 整数型, , 如窗口此时应重画，则设为TRUE（非零）。FALSE（零）则表明应用程序会自己决定是否重画窗口;

.DLL命令 API_发送按键, 整数型, "user32.dll", "PostMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 Api_取窗体标题, 整数型, "", "GetWindowTextA", , 
    .参数 当前窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, 传址, 
    .参数 标题长度, 整数型, , 

.DLL命令 Api_总在最前, 整数型, "", "SetWindowPos", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 
    .参数 c, 空白型, , 
    .参数 d, 空白型, , 
    .参数 e, 空白型, , 
    .参数 f, 空白型, , 
    .参数 g, 空白型, , 

.DLL命令 Api_检测最前, 整数型, "user32", "GetForegroundWindow", , 

.DLL命令 Api_取窗口标题长度, 整数型, "user32", "GetWindowTextLengthA", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 Api_更改窗体名, 整数型, "user32", "SetWindowTextA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpString, 文本型, , 

.DLL命令 BitBlt, 逻辑型, "gdi32", "BitBlt", , 将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容  非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , 目标设备场景
    .参数 目标横坐标, 整数型, , 对目标DC中目标矩形左上角位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 目标纵坐标, 整数型, , 同上
    .参数 传输图像宽度, 整数型, , 欲传输图象的宽度和高度
    .参数 传输图像高度, 整数型, , 同上
    .参数 源设备场景, 整数型, , 源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , 对源DC中源矩形左上角位置进行描述的那个点。用源DC的逻辑坐标表示
    .参数 源纵坐标, 整数型, , 同上
    .参数 光栅运算方式, 整数型, , 传输过程要执行的光栅运算;

.DLL命令 CreateCompatibleBitmap, 整数型, "", "CreateCompatibleBitmap", , 
    .参数 hdc, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 CreateCompatibleDC, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 DeleteDC, 整数型, "", "DeleteDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "", "ReleaseDC", , 
    .参数 hwnd, 整数型, , 
    .参数 hdc, 整数型, , 

.DLL命令 DeleteObject, 逻辑型, "", "DeleteObject", , 
    .参数 GDI对象句柄, 整数型, , 

.DLL命令 SelectObject, 整数型, "", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 obj, 整数型, , 

.DLL命令 GetDC, 整数型, "", "GetDC", , 
    .参数 hWnd, 整数型, , 

.DLL命令 GetDeviceCaps, 整数型, "", "GetDeviceCaps", , 
    .参数 hdc, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 RtlMoveMemory_FromBitmapHead, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, BITMAPINFOHEADER, , 
    .参数 len, 空白型, , 

.DLL命令 GetDIBits, 整数型, "", "GetDIBits", , 
    .参数 aHDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节型, 传址, 
    .参数 lpBI, 字节型, 传址, 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits2, 整数型, "", "GetDIBits", , 
    .参数 aHDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, 传址, 
    .参数 lpBI, BITMAPINFO, 传址, 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBitsA, 整数型, "", "GetDIBits", , 
    .参数 aHDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 字节集, 传址, 
    .参数 lpBI, BITMAPINFO, 传址, 
    .参数 wUsage, 整数型, , 

.DLL命令 GetDIBits_指针, 整数型, "", "GetDIBits", , 
    .参数 aHDC, 整数型, , 
    .参数 hBitmap, 整数型, , 
    .参数 nStartScan, 整数型, , 
    .参数 nNumScans, 整数型, , 
    .参数 lpBits, 整数型, , 
    .参数 lpBI, 整数型, , 
    .参数 wUsage, 整数型, , 

.DLL命令 Api_鼠标坐标设定, 整数型, "", "SetCursorPos", , 鼠标坐标设定
    .参数 水平, 整数型, , 鼠标坐标设定水平
    .参数 垂直, 整数型, , 鼠标坐标设定垂直

.DLL命令 Api_隐藏鼠标, 空白型, "", "ShowCursor", , 隐藏鼠标
    .参数 隐藏鼠标, 逻辑型, , 为假则隐藏鼠标，为真则不隐藏鼠标

.DLL命令 Api_限制键盘, 空白型, "", "SystemParametersInfoA", , 锁键
    .参数 uAction, 整数型, , 
    .参数 uParam, 整数型, , 为非0时锁，为0时不锁
    .参数 lpvParam, 文本型, , 
    .参数 fuWinIni, 整数型, , 

.DLL命令 Api_检测网络连接, 逻辑型, "wininet.dll", "InternetGetConnectedState", , 
    .参数 lpdwFlags, 整数型, 传址, 
    .参数 dwReserved, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "", "GetWindowRect", , 
    .参数 hwnd, 整数型, , 
    .参数 lpRect, 矩形类型, , 

.DLL命令 浏览文件夹函数, 整数型, "", "SHBrowseForFolderA", , 
    .参数 lpBrowseInfo, 浏览信息, , 

.DLL命令 取文件夹信息, 整数型, "", "SHGetPathFromIDListA", , 
    .参数 pidl, 整数型, , 
    .参数 pszPath, 文本型, , 

.DLL命令 发送消息, 整数型, "", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 文本型, , 

.DLL命令 置窗口特征, 整数型, "", "SetWindowLongA", , 置窗口特征
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 空白型, , 

.DLL命令 执行窗口程序, 整数型, "", "CallWindowProcA", , 执行窗口程序
    .参数 lpPrevWndFunc, 空白型, , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 回调显示, 整数型, "", "CallWindowProcA", , 执行窗口程序
    .参数 lpPrevWndFunc, 子程序指针, , 
    .参数 hWnd, 文本型, , 
    .参数 Msg, 文本型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 设置窗口是否接受拖放, 整数型, "shell32.dll", "DragAcceptFiles", , 
    .参数 hWnd, 整数型, , 
    .参数 fAccept, 整数型, , 

.DLL命令 取被拖放文件数, 整数型, "shell32.dll", "DragQueryFileA", , 
    .参数 hDrop, 整数型, , 
    .参数 iFile, 整数型, , 
    .参数 lpszFile, 文本型, , 
    .参数 cch, 整数型, , 

.DLL命令 结束拖放, 整数型, "shell32.dll", "DragFinish", , 
    .参数 hDrop, 整数型, , 

.DLL命令 查找模块, 整数型, "kernel32.dll", "Module32First", , 
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息, , 

.DLL命令 下一个模块, 整数型, "kernel32.dll", "Module32Next", , 
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息, , 

.DLL命令 创建进程快照, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", , 
    .参数 falg, 整数型, , 
    .参数 进程ID, 整数型, , 

.DLL命令 取进程ID, 整数型, "user32.dll", "GetWindowThreadProcessId", , 
    .参数 窗口句柄, 空白型, , 
    .参数 进程ID, 空白型, 传址, 

.DLL命令 取鼠标当前点坐标, 整数型, "", "GetCursorPos", , 取鼠标当前点坐标
    .参数 point, 坐标类型, , 

.DLL命令 取指定点处窗口或控件句柄, 整数型, "", "WindowFromPoint", , 取指定点处窗口或控件句柄
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 取类名, 整数型, "", "GetClassNameA", , 取类名
    .参数 hWnd, 整数型, , 
    .参数 name, 文本型, , 用于保存获得的类名
    .参数 num, 整数型, , 上一参数的缓冲区长度

.DLL命令 取窗口控件ID, 整数型, "user32.dll", "GetWindowLongA", , 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 功能索引

.DLL命令 枚举所有子窗体, 整数型, "user32.dll", "EnumChildWindows", , 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口调用指针, 子程序指针, , 
    .参数 枚举期间传递的操作值, 整数型, 传址, 

.DLL命令 是否活动窗口, 整数型, "user32.dll", "IsWindowEnabled", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 激活窗口, 空白型, "", "EnableWindow", , 
    .参数 句柄, 整数型, , 
    .参数 操作值, 逻辑型, , 

.DLL命令 窗口句柄取ID, 空白型, "user32.dll", "GetWindowThreadProcessId", , 窗口句柄如何获得进程ID?告诉我吧...
    .参数 窗口句柄1, 整数型, , 
    .参数 进程ID, 整数型, 传址, ProcID  进程ID 容器

.DLL命令 SetWindowRgn, 整数型, "user32.dll", "SetWindowRgn", , 设置窗口区域
    .参数 hWnd, 整数型, , 
    .参数 hRgn, 整数型, , 
    .参数 bRedraw, 逻辑型, , 

.DLL命令 _创建圆角矩形区域, 整数型, "gdi32.dll", "CreateRoundRectRgn", , 
    .参数 左上横坐标, 整数型, , X1，矩形左上角横坐标
    .参数 左上纵坐标, 整数型, , Y1，矩形左上角纵坐标
    .参数 右下横坐标, 整数型, , X2，矩形右下角横坐标
    .参数 右下纵坐标, 整数型, , Y2，矩形右下角纵坐标
    .参数 圆角椭圆的宽, 整数型, , X3，圆角椭圆的宽，其范围从0（没有圆角）到矩形宽（全圆）
    .参数 圆角椭圆的高, 整数型, , Y3，圆角椭圆的高，其范围从0（没有圆角）到矩形高（全圆）

.DLL命令 API_透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", , 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 API_设置窗口信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 SetProcessWorkingSetSize, 整数型, "", "SetProcessWorkingSetSize", , 
    .参数 hProcess, 空白型, , 
    .参数 dwMinimumWorkingSetSize, 空白型, , 
    .参数 dwMaximumWorkingSetSize, 空白型, , 

.DLL命令 API_枚举任务窗口, 整数型, "user32.dll", "EnumThreadWindows", , 枚举与指定任务相关的窗口　非零表示成功，零表示失败
    .参数 线程标识符, 整数型, , 某线程的标识符，它的窗口将被枚举
    .参数 函数指针, 子程序指针, , 指向一个函数的指针，要求为每个子窗口都调用这个函数。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32d.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的
  

.DLL命令 API_取父窗口, 整数型, "user32.dll", "GetParent", , 判断指定窗口的父窗口　父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄


.DLL命令 SetParent, 整数型, "", "SetParent", , 
    .参数 hWndChild, 整数型, , 
    .参数 hWndNewParent, 整数型, , 

.DLL命令 改变窗口_, 整数型, "user32.dll", "MoveWindow", , 
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 取窗口矩形_, 整数型, "user32.dll", "GetWindowRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, 矩形类型, , 

.DLL命令 LocalFree, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 FillMemory, 空白型, "", "RtlFillMemory", , 填充内存字节
    .参数 Destination, 整数型, , 指针地址
    .参数 Length, 整数型, , 长度
    .参数 Fill, 字节型, , 字节数据

.DLL命令 lstrcpyn_字节集, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 RtlMoveMemory_整数, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 lstrcpyn_字节型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 欲取其指针, 字节型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 RtlMoveMemory_文本, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 文本型, , 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 LocalAlloc, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", , 公开
    .参数 延时时间, 整数型, , 毫秒

.DLL命令 lstrcpyn_整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetLastError, 整数型, "", "GetLastError", , 公开

.DLL命令 动态调用子程序_API, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 整数型, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 FreeLibrary, 整数型, "", "", , 
    .参数 h, 整数型, , 

.DLL命令 LoadLibraryA, 整数型, "", "", , 
    .参数 w, 文本型, , 

.DLL命令 lstrcpyn_子程序子针, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 欲取其指针, 子程序指针, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 lstrcpyn_长整数型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 欲取其指针, 长整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 StrToInt64Ex, 整数型, "shlwapi.dll", "StrToInt64ExA", , 公开
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 整数型, 传址, 

.DLL命令 MessageBox, 整数型, "", "MessageBoxA", , 建立消息框窗体
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 lpText, 文本型, , 提示信息
    .参数 lpCaption, 文本型, , 窗口标题
    .参数 wType, 整数型, , 按钮

.DLL命令 GetActiveWindow, 整数型, "", "GetActiveWindow", , 获得活动窗口的句柄  活动窗口的句柄，如没有窗口处于活动状态，则返回零值

.DLL命令 lstrcpyn_双精型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 欲取其指针, 双精度小数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 StrTrim, 整数型, "shlwapi.dll", "StrTrimA", , 
    .参数 psz, 文本型, , 
    .参数 pszTrimChars, 文本型, , 

.DLL命令 ExpandEnvironmentStringsA, 整数型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 
    .参数 c, 整数型, , 

.DLL命令 GetCommandLineA, 文本型, "kernel32", "GetCommandLineA", , 

.DLL命令 SetEnvironmentVariableA, 逻辑型, "", "", , 
    .参数 a, 文本型, , 
    .参数 b, 文本型, , 

.DLL命令 GetCurrentDirectoryA, 整数型, "", "", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetModuleFileNameA, 整数型, "", "", , 
    .参数 handle, 整数型, , 
    .参数 filename, 文本型, , 
    .参数 cb, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "", "GetCurrentProcess", , 

.DLL命令 CharLower, 文本型, "", "CharLowerA", , 
    .参数 str, 文本型, , 

.DLL命令 CharUpper, 文本型, "", "CharUpperA", , 
    .参数 str, 文本型, , 

.DLL命令 API_MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 API_MultiByteToWideChar_utf8, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 API_WideCharToMultiByte_utf8, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 整数型, , 

.DLL命令 LCMapString, 整数型, "kernel32", "LCMapStringA", , 
    .参数 Locale, 整数型, , 
    .参数 dwMapFlags, 整数型, , 
    .参数 lpSrcStr, 文本型, , 
    .参数 cchSrc, 整数型, , 
    .参数 lpDestStr, 文本型, , 
    .参数 ByVal, 整数型, , 

.DLL命令 API_WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 整数型, , 

.DLL命令 API_CryptAcquireContext, 整数型, "advapi32.dll", "CryptAcquireContextA", , 
    .参数 phProv, 整数型, 传址, 
    .参数 pszContainer, 文本型, , 
    .参数 pszProvider, 文本型, , 
    .参数 dwProvType, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_CryptCreateHash, 整数型, "advapi32.dll", "CryptCreateHash", , 
    .参数 hProv, 整数型, , 
    .参数 Algid, 整数型, , 
    .参数 hKey, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 phHash, 整数型, 传址, 

.DLL命令 API_CryptReleaseContext, 整数型, "advapi32.dll", "CryptReleaseContext", , 
    .参数 hProv, 整数型, 传址, 
    .参数 dwFlags, 整数型, 传址, 

.DLL命令 API_CryptDestroyHash, 整数型, "advapi32.dll", "CryptDestroyHash", , 
    .参数 hHash, 整数型, 传址, 

.DLL命令 API_CryptGetHashParam, 整数型, "advapi32.dll", "CryptGetHashParam", , 
    .参数 hHash, 整数型, , 
    .参数 dwParam, 整数型, , 
    .参数 pByte, 字节集, , 
    .参数 pdwDataLen, 整数型, 传址, 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_CryptHashData, 整数型, "advapi32.dll", "CryptHashData", , 
    .参数 hHash, 整数型, , 
    .参数 pbData, 字节集, 传址, 
    .参数 dwDataLen, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_GetFileTitle, 空白型, "comdlg32.dll", "GetFileTitleA", , 返回文件名
    .参数 lpszFile, 文本型, , 
    .参数 lpszTitle, 文本型, , 
    .参数 cbBuf, 短整数型, , 

.DLL命令 PathIsDirectoryA, 逻辑型, "shlwapi.dll", "PathIsDirectoryA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 创建或修改配置文件, 整数型, "kernel32.dll", "WritePrivateProfileStringA", , 如果配置文件不存在则将被创建
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 文本型, , 就是等号后面的内容
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 读配置文本, 整数型, "kernel32.dll", "GetPrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 默认值, 文本型, , 可以为“”
    .参数 缓冲容器, 文本型, , 一般将容器的大小设定为255
    .参数 缓冲容积, 整数型, , 应与缓冲容器的大小相等255
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 删配置文件项, 整数型, "kernel32", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 文本型, , 就是等号前边的内容
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 删配置文件小节, 整数型, "kernel32", "WritePrivateProfileStringA", , 
    .参数 小节名, 文本型, , 就是用中括号括起来的内容
    .参数 项目名, 整数型, , 0
    .参数 项目值, 整数型, , 0
    .参数 文件名, 文本型, , 就是你要写入的那个文件

.DLL命令 API_GetPrivateProfileSection, 整数型, "kernel32", "GetPrivateProfileSectionA", , 获取指定小节所有项名和值的一个列表  装载到lpReturnedString缓冲区的字符数量。如缓冲区的容量不够大，不能容下所有信息，就返回nSize-2
    .参数 lpAppName, 文本型, , 欲获取的小节。注意这个字串不区分大小写
    .参数 lpReturnedString, 字节集, , 项和值字串的列表。每个字串都由一个NULL字符分隔，最后一个字串后面用两个NULL字符中止
    .参数 nSize, 整数型, , lpReturned缓冲区的大小。在windows系统中最大值为32767
    .参数 lpFileName, 文本型, , 初始化文件的名字。如没有指定完整路径名，windows就在Windows目录中查找文件;

.DLL命令 API_GetPrivateProfileSectionNames, 整数型, "kernel32.dll", "GetPrivateProfileSectionNamesA", , 
    .参数 lpszReturnBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpFileName, 文本型, , 

.DLL命令 PathFileExistsA, 逻辑型, "shlwapi.dll", "PathFileExistsA", , 检测文件是否存在，0不存在, 1存在
    .参数 pszPath, 文本型, , 文件名（含路径）

.DLL命令 GetShortPathNameA, 整数型, "kernel32.dll", "GetShortPathNameA", , 
    .参数 lpszLongPath, 文本型, , 
    .参数 lpszShortPath, 文本型, , 
    .参数 cchBuffer, 整数型, , 

.DLL命令 lstrlen, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 文本, 文本型, , Ptr

.DLL命令 打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 CreateWaitableTimerA, 整数型, "", "CreateWaitableTimerA", , 
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 SetWaitableTimer, 整数型, "", "SetWaitableTimer", , 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, LARGE_INTEGER, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "MsgWaitForMultipleObjects", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 CloseHandle, 逻辑型, "", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 读内存小数, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 小数型, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 读内存整数, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 OpenProcess, 整数型, "", "", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 获取线程, 整数型, "kernel32.dll", "GetCurrentProcess", , 

.DLL命令 CopyFileEx, 整数型, "kernel32.dll", "CopyFileExA", , 
    .参数 lpExistingFileName, 文本型, , 源文件
    .参数 lpNewFileName, 文本型, , 目标文件
    .参数 lpProgressRoutine, 子程序指针, , 
    .参数 lpData, 整数型, 传址, 
    .参数 pbCancel, 整数型, 传址, 
    .参数 dwCopyFlags, 整数型, , 

.DLL命令 取窗体句柄, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题） 找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题 示例Dim hw&

.DLL命令 取窗体句柄A, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题） 找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题 示例Dim hw&

.DLL命令 OpenProcessToken, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 LookupPrivilegeValue, 整数型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "KERNEL32.DLL", "", , 
    .参数 lFlags, 整数型, , 
    .参数 lProcessID, 整数型, , 

.DLL命令 Process32First, 整数型, "KERNEL32.DLL", "", , 
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, PROCESSENTRY32, , 

.DLL命令 Process32Next, 整数型, "KERNEL32.DLL", "", , 
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, PROCESSENTRY32, , 

.DLL命令 StrCmpNI, 整数型, "shell32.dll", "StrCmpNIA", , 
    .参数 lpStr1, 文本型, , 
    .参数 lpStr2, 字节型, 传址 数组, 
    .参数 nChar, 整数型, , 

.DLL命令 BuildExplicitAccessWithName, 空白型, "ADVAPI32.DLL", "BuildExplicitAccessWithNameA", , 
    .参数 pExplicitAccess, EXPLICIT_ACCESS, , 
    .参数 pTrusteeName, 文本型, , 
    .参数 AccessPermissions, 整数型, , 
    .参数 AccessMode, 整数型, , 
    .参数 Inheritance, 整数型, , 

.DLL命令 GetKernelObjectSecurity, 整数型, "advapi32.dll", "GetKernelObjectSecurity", , 
    .参数 Handle, 整数型, , 
    .参数 RequestedInformation, 整数型, , 
    .参数 pSecurityDescriptor, SECURITY_DESCRIPTOR, , 
    .参数 nLength, 整数型, , 
    .参数 lpnLengthNeeded, 整数型, 传址, 

.DLL命令 HeapAlloc, 整数型, "kernel32.dll", "HeapAlloc", , 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GetProcessHeap, 整数型, "kernel32.dll", "GetProcessHeap", , 

.DLL命令 SetLastError, 空白型, "kernel32.dll", "SetLastError", , 
    .参数 dwErrCode, 整数型, , 

.DLL命令 GetSecurityDescriptorDacl, 整数型, "advapi32.dll", "GetSecurityDescriptorDacl", , 
    .参数 pSecurityDescriptor, SECURITY_DESCRIPTOR, , 
    .参数 lpbDaclPresent, 整数型, 传址, 
    .参数 pDacl, 整数型, 传址, 
    .参数 lpbDaclDefaulted, 整数型, 传址, 

.DLL命令 SetEntriesInAcl, 整数型, "ADVAPI32.DLL", "SetEntriesInAclA", , 
    .参数 cCountOfExplicitEntries, 整数型, , 
    .参数 pListOfExplicitEntries, EXPLICIT_ACCESS, 传址, 
    .参数 OldAcl, 整数型, , 
    .参数 NewAcl, 整数型, 传址, 

.DLL命令 MakeAbsoluteSD, 整数型, "advapi32.dll", "MakeAbsoluteSD", , 建立自相关SD (pOrigSd,pNewSd,&dwSDLen,pOldDAcl,&dwAclSize,pSacl,&dwSaclSize,pSidOwner,&dwSidOwnLen,pSidPrimary,&dwSidPrimLen)
    .参数 pSelfRelativeSecurityDescriptor, SECURITY_DESCRIPTOR, , 
    .参数 pAbsoluteSecurityDescriptor, 整数型, 传址, 
    .参数 lpdwAbsoluteSecurityDescriptorSize, 整数型, 传址, 
    .参数 pDacl, 整数型, , 
    .参数 lpdwDaclSize, 整数型, 传址, 
    .参数 pSacl, 整数型, , 
    .参数 lpdwSaclSize, 整数型, 传址, 
    .参数 pOwner, 整数型, , 
    .参数 lpdwOwnerSize, 整数型, 传址, 
    .参数 pPrimaryGroup, 整数型, , 
    .参数 lpdwPrimaryGroupSize, 整数型, 传址, 

.DLL命令 SetSecurityDescriptorDacl, 整数型, "advapi32.dll", "SetSecurityDescriptorDacl", , 
    .参数 pSecurityDescriptor, 整数型, 传址, 
    .参数 bDaclPresent, 整数型, , 
    .参数 pDacl, 整数型, , 
    .参数 bDaclDefaulted, 整数型, , 

.DLL命令 SetKernelObjectSecurity, 整数型, "advapi32.dll", "SetKernelObjectSecurity", , 
    .参数 Handle, 整数型, , 
    .参数 SecurityInformation, 整数型, , 
    .参数 SecurityDescriptor, 整数型, 传址, 

.DLL命令 DuplicateTokenEx, 整数型, "advapi32.dll", "DuplicateTokenEx", , 
    .参数 hExistingToken, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 lpTokenAttributes, 整数型, , 
    .参数 ImpersonationLevel, 整数型, , 
    .参数 TokenType, 整数型, , 
    .参数 phNewToken, 整数型, 传址, 

.DLL命令 ImpersonateLoggedOnUser, 整数型, "advapi32.dll", "ImpersonateLoggedOnUser", , 
    .参数 hToken, 整数型, , 

.DLL命令 CreateProcessAsUser, 整数型, "advapi32.dll", "CreateProcessAsUserA", , 
    .参数 hToken, 整数型, , 
    .参数 lpApplicationName, 文本型, , 
    .参数 lpCommandLine, 整数型, , 
    .参数 lpProcessAttributes, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 bInheritHandles, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 文本型
    .参数 lpCurrentDirectory, 整数型, , 文本型
    .参数 lpStartupInfo, STARTUPINFO, , 
    .参数 lpProcessInformation, PROCESS_INFORMATION, , 

.DLL命令 WaitForSingleObject, 整数型, "kernel32.dll", "WaitForSingleObject", , 
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 HeapFree, 整数型, "kernel32.dll", "HeapFree", , 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMem, 整数型, , 

.DLL命令 GetModuleFileName, 整数型, "kernel32.dll", "GetModuleFileNameA", , 
    .参数 hModule, 整数型, , 
    .参数 lpFileName, 文本型, , 
    .参数 nSize, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32.dll", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 字节集, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 RevertToSelf, 整数型, "advapi32.dll", "RevertToSelf", , 

.DLL命令 API_寻找子窗口, 整数型, "user32", "FindWindowExA", , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 欲搜索的类名2, 整数型, , 欲搜索的类名。零表示忽略;

.DLL命令 API_寻找子窗口A, 整数型, "user32", "FindWindowExA", , 在窗口列表中寻找与指定条件相符的第一个子窗口  找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。零表示忽略;

.DLL命令 取前台窗口_, 整数型, "user32", "GetForegroundWindow", , 

.DLL命令 取得窗口_, 整数型, "user32.dll", "GetWindow", , 
    .参数 源窗口, 整数型, , 
    .参数 关系, 整数型, , 

.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "", , 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "", , 
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 文本型, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 文本型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 InternetSetCookieA, 逻辑型, "WinINet.dll", "", , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszCookieName, 文本型, , 
    .参数 lpszCookieData, 文本型, , 

.DLL命令 CreateThread, 整数型, "", "", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 目录是否存在, 逻辑型, "shlwapi.dll", "PathIsDirectoryA", , 
    .参数 pszPath, 文本型, , 

.DLL命令 FindFirstFile, 整数型, "kernel32", "FindFirstFileA", , 查找文件
    .参数 lpFileName, 文本型, , 
    .参数 lpFindFileData, 查找的文件信息_, , 

.DLL命令 FindNextFile, 整数型, "kernel32", "FindNextFileA", , 查找下一个
    .参数 hFindFile, 整数型, , 
    .参数 lpFindFileData, 查找的文件信息_, , 

.DLL命令 FindClose, 整数型, "kernel32", "", , 
    .参数 hFindFile, 整数型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 TerminateThread, 逻辑型, "", "", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 API_投递消息, 整数型, "user32", "PostMessageA", , 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 hwnd, 整数型, , 接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考PostThreadMessage）
    .参数 wMsg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 API_获得窗口关联进程ID, 整数型, "user32", "GetWindowThreadProcessId", , ;    获取与指定窗口关联在一起的一个进程和线程标识符  拥有窗口的线程的标识符
    .参数 hwnd, 整数型, , 指定窗口句柄;
    .参数 lpdwProcessId, 整数型, 传址, 指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 API_取进程快照, 整数型, "", "CreateToolhelp32Snapshot", , CreateToolhelp32Snapshot
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 API_枚举父窗口, 整数型, "user32.dll", "EnumWindows", , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）  非零表示成功，零表示失败
    .参数 函数指针, 子程序指针, , 指向为每个子窗口都调用的一个函数的指针。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的;

.DLL命令 API_快照中获取进程列表, 整数型, "", "Process32First", , Process32First
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, 进程类型, , 

.DLL命令 API_遍历快照中进程列表, 整数型, "", "Process32Next", , Process32Next
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, 进程类型, , 

.DLL命令 API_关闭内核对象, 整数型, "kernel32", "CloseHandle", , 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 取屏幕句柄_, 整数型, "user32", "GetDesktopWindow", , 

.DLL命令 取设备场景_, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 创建内存场景_, 整数型, "Gdi32", "CreateCompatibleDC", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 创建设备位图_, 整数型, "gdi32", "CreateCompatibleBitmap", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 

.DLL命令 选入设备场景_, 整数型, "gdi32.dll", "SelectObject", , SelectObject
    .参数 场景句柄, 整数型, , hdc
    .参数 对象句柄, 整数型, , hobject

.DLL命令 删除对象_, 整数型, "gdi32.dll", "DeleteObject", , DeleteObject
    .参数 对象句柄, 整数型, , hObject,一个GDI对象的句柄

.DLL命令 删除设备场景_, 整数型, "gdi32.dll", "DeleteDC", , 
    .参数 设备场景句柄, 整数型, , hdc，将要删除的设备场景

.DLL命令 释放设备场景_, 整数型, "user32", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 复制场景位图_, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 目标设备场景, 整数型, , hDestDC,目标设备场景
    .参数 目标横坐标, 整数型, , x,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 目标纵坐标, 整数型, , y,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 传输图像宽度, 整数型, , nWidth,欲传输图象的宽度
    .参数 传输图像高度, 整数型, , nHeight,欲传输图象的高度
    .参数 源设备场景, 整数型, , hSrcDC,源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , xSrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 源纵坐标, 整数型, , ySrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 光栅运算方式, 整数型, , dwRop,传输过程要执行的光栅运算

.DLL命令 内存拷贝_, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 位图信息_, , 
    .参数 Length, 空白型, , 

.DLL命令 取位图二进制位_, 整数型, "gdi32.dll", "GetDIBits", , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里  非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 设备场景句柄, 整数型, , aHDC，定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 源位图句柄, 整数型, , hBitmap，源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 扫描线初始编号, 整数型, , nStartScan，欲复制到DIB中的第一条扫描线的编号
    .参数 扫描线数量, 整数型, , nNumScans，欲复制的扫描线数量
    .参数 缓冲区指针, 字节型, 传址, lpBits，指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 位图结构, 位图信息_, , lpBI，BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 常量标志, 整数型, , wUsage，下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;

.DLL命令 创建GDI对象_, 整数型, "gdi32", "CreateDIBSection", , 创建一个DIBSection。这是一个GDI对象，可象一幅与设备有关位图那样使用。但是，它在内部作为一幅与设备无关位图保存  执行成功返回DIBSection位图的句柄，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 一个设备场景的句柄。如dw设为DIB_PAL_COLORS，那么DIB颜色表就会用来自逻辑调色板的颜色进行初始化
    .参数 pBitmapInfo, 位图信息_, , BITMAPINFO，这个结构初始化成欲创建的那幅位图的配置数据
    .参数 常数, 整数型, , 下述常数之一：;DIB_PAL_COLORS：BITMAPINFO包含了一个16位调色板索引的数组;DIB_RGB_COLORS：BITMAPINFO包含了一个颜色表，其中保存有32位颜色（RGBQUAD）
    .参数 内存地址, 整数型, , 用于载入DIBSection数据区的内存地址
    .参数 文件映射句柄, 整数型, , 指向一个文件映射对象的可选句柄，位图将在其中创建。如设为零，Windows会自动分配内存
    .参数 偏移量, 整数型, , 如指定了句柄，就用这个参数指定位图数据在文件映射对象中的偏移量;

.DLL命令 复制位图_, 整数型, "gdi32.dll", "StretchBlt", , $(b)将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容。这个函数会在设备场景中定义一个目标矩形，并在位图中定义一个源图象。源矩形会根据需要进行伸缩，以便与目标矩形的大小相符
    .参数 目标设备场景句柄, 整数型, , hdc，目标设备场景
    .参数 目标横坐标, 整数型, , x，目标矩形左上角的x,y坐标，以逻辑坐标表示
    .参数 目标纵坐标, 整数型, , y，目标矩形左上角的x,y坐标，以逻辑坐标表示
    .参数 目标宽度, 整数型, , nWidth，目标矩形的宽度和高度，以逻辑坐标表示
    .参数 目标高度, 整数型, , nHeight，目标矩形的宽度和高度，以逻辑坐标表示
    .参数 源设备场景句柄, 整数型, , hSrcDC，源设备场景。如光栅运算未指定一个源，则这个参数应为零
    .参数 源横坐标, 整数型, , xSrc，用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源纵坐标, 整数型, , ySrc，用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源宽度, 整数型, , nSrcWidth，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
    .参数 源高度, 整数型, , nSrcHeight，分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度。如其中有一个参数的符号（指正负号）与对应的目标参数不符，位图就会在对应的轴上作镜像转换处理
    .参数 光栅运算, 整数型, , dwRop，传输过程中进行的光栅运算。如刷子属于光栅运算的一部分，就使用选入目标DC的刷子

.DLL命令 内存拷贝1_, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 文件头信息_, , 
    .参数 Length, 空白型, , 

.DLL命令 取得颜色表信息, 空白型, "gdi32", "GetDIBColorTable", , 
    .参数 hDC, 整数型, , Long，已选入了一个DIBSection对象的设备场景
    .参数 un1, 整数型, , Long，颜色表中欲取回的第一个条目的索引
    .参数 un2, 整数型, , Long，欲取回的条目数量
    .参数 pRGBQuad, 字节集, 传址, RGBQUAD，这个结构数组用于装载颜色表信息的第一个条目

.DLL命令 复制二进制位图_, 空白型, "gdi32", "GetBitmapBits", , 
    .参数 位图句柄, 整数型, , 
    .参数 字节限制, 整数型, , 
    .参数 缓冲区, 字节集, 传址, 

.DLL命令 GetLocalTime, 空白型, "kernel32.dll", "GetLocalTime", , 在lpSystemTime结构中装载本地日期和时间
    .参数 lpSystemTime, SYSTEMTIME, , SYSTEMTIME，用于装载本地时间的结构;

.DLL命令 AdjustTokenPrivileges, 整数型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 0
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 0

.DLL命令 RegSaveKeyA, 整数型, "", "", , 
    .参数 hKey, 整数型, , 
    .参数 lpFile, 文本型, , 
    .参数 lpSecurityAttributeswbx, 整数型, , 

.DLL命令 RegOpenKeyExA, 整数型, "", "RegOpenKeyExA", , 打开注册表项
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 ulOptions, 整数型, , 
    .参数 samDesired, 整数型, , 
    .参数 phkResult, 整数型, 传址, 

.DLL命令 RegCloseKey, 空白型, "", "RegCloseKey", , 
    .参数 hKey, 整数型, , 

.DLL命令 RegRestoreKey, 整数型, "Advapi32.dll", "RegRestoreKeyA", , 
    .参数 hKey, 整数型, , 
    .参数 lpFile, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 RegCreateKeyA, 整数型, "advapi32.dll", "RegCreateKeyA", , 在指定的项下创建一个新项。如指定的项已经存在，那么函数会打开现有的项  零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , 要打开项的句柄，或者一个标准项名
    .参数 lpSubKey, 文本型, , 欲创建的新子项。可同时创建多个项，只需用反斜杠将它们分隔开即可。例如level1\level2\newkey
    .参数 phkResult, 整数型, 传址, 指定一个变量，用于装载新子项的句柄;

.DLL命令 GetPriorityClass, 整数型, "kernel32.dll", "GetPriorityClass", , 
    .参数 hProcess, 整数型, , 

.DLL命令 GetThreadPriority, 整数型, "kernel32.dll", "GetThreadPriority", , 
    .参数 hThread, 整数型, , 

.DLL命令 SetPriorityClass, 整数型, "kernel32.dll", "SetPriorityClass", , 
    .参数 hProcess, 整数型, , 
    .参数 dwPriorityClass, 整数型, , 

.DLL命令 SetThreadPriority, 整数型, "kernel32.dll", "SetThreadPriority", , 
    .参数 hThread, 整数型, , 
    .参数 nPriority, 整数型, , 

.DLL命令 API_CallWindowProc, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数　
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 API_GetWindowLong, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息　由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 API_RegisterHotKey, 整数型, "user32", "RegisterHotKey", , 登记热键　
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 
    .参数 fsModifiers, 整数型, , 
    .参数 vk, 整数型, , 

.DLL命令 API_SetWindowLong, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息　指定数据的前一个值
    .参数 hwnd, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 nIndex, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 dwNewLong, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 API_UnregisterHotKey, 整数型, "user32", "UnregisterHotKey", , 释放热键　
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 InternetOpen, 整数型, "wininet.dll", "InternetOpenA", , 
    .参数 sAgent, 文本型, , 
    .参数 lAccessType, 整数型, , 
    .参数 sProxyName, 文本型, , 
    .参数 sProxyBypass, 文本型, , 
    .参数 lFlags, 整数型, , 

.DLL命令 InternetConnect, 整数型, "wininet.dll", "InternetConnectA", , 
    .参数 hInternetSession, 整数型, , 
    .参数 sServerName, 文本型, , 
    .参数 nServerPort, 短整数型, , 
    .参数 sUsername, 文本型, , 
    .参数 sPassword, 文本型, , 
    .参数 lService, 整数型, , 
    .参数 lFlags, 整数型, , 
    .参数 lContext, 整数型, , 

.DLL命令 FtpFindFirstFile, 整数型, "wininet.dll", "FtpFindFirstFileA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszSearchFile, 文本型, , 
    .参数 lpFindFileData, WIN32_FIND_DATA, 传址, 
    .参数 dwFlags, 整数型, , 
    .参数 dwContent, 整数型, , 

.DLL命令 InternetFindNextFile, 整数型, "wininet.dll", "InternetFindNextFileA", , 
    .参数 hFind, 整数型, , 
    .参数 lpvFindData, WIN32_FIND_DATA, 传址, 

.DLL命令 FtpSetCurrentDirectory, 逻辑型, "wininet.dll", "FtpSetCurrentDirectoryA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszDirectory, 文本型, , 

.DLL命令 FtpCreateDirectory, 逻辑型, "wininet.dll", "FtpCreateDirectoryA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszDirectory, 文本型, , 

.DLL命令 FtpGetCurrentDirectory, 逻辑型, "wininet.dll", "FtpGetCurrentDirectoryA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszCurrentDirectory, 文本型, 传址, 
    .参数 lpdwCurrentDirectory, 整数型, 传址, 

.DLL命令 FtpRemoveDirectory, 逻辑型, "wininet.dll", "FtpRemoveDirectoryA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszDirectory, 文本型, , 

.DLL命令 FtpGetFile, 逻辑型, "wininet.dll", "FtpGetFileA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszRemoteFile, 文本型, , 
    .参数 lpszNewFile, 文本型, , 
    .参数 fFailIfExists, 逻辑型, , 
    .参数 dwFlagsAndAttributes, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 FtpPutFile, 逻辑型, "wininet.dll", "FtpPutFileA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszLocalFile, 文本型, , 
    .参数 lpszRemoteFile, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 FtpOpenFile, 整数型, "wininet.dll", "FtpOpenFileA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 sFileName, 文本型, , 
    .参数 lAccess, 整数型, , 
    .参数 lFlags, 整数型, , 
    .参数 lContext, 整数型, , 

.DLL命令 FtpDeleteFile, 逻辑型, "wininet.dll", "FtpDeleteFileA", , 
    .参数 hFtpSession, 整数型, , 
    .参数 lpszFileName, 文本型, , 

.DLL命令 InternetGetLastResponseInfo, 逻辑型, "wininet.dll", "InternetGetLastResponseInfoA", , 
    .参数 lpdwError, 整数型, 传址, 
    .参数 lpszBuffer, 文本型, , 
    .参数 lpdwBufferLength, 整数型, 传址, 

.DLL命令 FindExecutable, 整数型, "shell32.dll", "FindExecutableA", , 查找与一个指定文件关联在一起的程序的文件名。可用Windows注册表编辑器将文件类型与特定的应用程序关联到一起。比如，扩展名为.TXT的文本文件通常与Windows记事本（Notepad.exe）关联到一起。如在文件管理器中双击含.TXT扩展名的一个文件，会自动启动记事本，并在其中载入文本文件  大于32表示成功；31表示不存在文件类型的关联；0表示系统内存或资源不足；ERROR_FILE_NOT_FOUND表示指定的文件不存在；ERROR_PATH_NOT_FOUND表示指定的路径不存在；ERROR_BAD_FORMAT表示执行格式无效
    .参数 lpFile, 文本型, , 指定要为其查找相关程序的一个文件名或程序名
    .参数 lpDirectory, 文本型, , 要使用的默认目录的完整路径
    .参数 lpResult, 文本型, , 指定一个字串缓冲区，用于装载可执行程序的名字。注意这个字串预先至少都要初始化成MAX_PATH个字符的长度;

.DLL命令 closewinio, 逻辑型, "WinIo.dll", "ShutdownWinIo", , 在内存中关闭清除WinIO库

.DLL命令 _判断鼠标双击间隔, 整数型, "", "GetDoubleClickTime", , 判断连续两次鼠标单击之间会被处理成双击事件的间隔时间 以毫秒表示的双击时间

.DLL命令 写端口, 逻辑型, "WinIo.dll", "SetPortVal", , 将一个字节/字/双字的数据写入输入或输出接口。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, , 要写入的数据
    .参数 bSize, 字节型, , 需要写入的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 读端口, 逻辑型, "WinIo.dll", "GetPortVal", , 从一个输入或输出端口读取一个字节/字/双字数据。调用成功，返回非零值
    .参数 PortAddr, 短整数型, , 输入输出端口地址
    .参数 PortVal, 整数型, 传址, 指向双字变量的指针，接收从端口得到的数据。
    .参数 bSize, 字节型, , 需要读的字节数，可以是1 (BYTE)、2 (WORD)、4 (DWORD)

.DLL命令 _键码转换, 整数型, "", "MapVirtualKeyA", , 返回转换后的代码
    .参数 wCode, 整数型, , 代码值
    .参数 wMapType, 整数型, , 0--虚拟键码->扫描码；1--扫描码->虚拟键码；2-虚拟键码->ASCII值（未加Shift组合键）。

.DLL命令 openwinio, 逻辑型, "WinIo.dll", "InitializeWinIo", , 初始化WioIO库。调用成功，返回非零值

.DLL命令 GetLogicalDriveStrings, 整数型, "kernel32.dll", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, ,   

.DLL命令 GetDriveTypeA, 整数型, "kernel32", "GetDriveTypeA", , 
    .参数 路径, 文本型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus.dll", "GdipLoadImageFromFile", , 
    .参数 filename, 字节集, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus.dll", "GdipSaveImageToFile", , 
    .参数 image, 空白型, , 
    .参数 filename, 字节集, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 对象, 传址, 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 对象, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GlobalLock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 逻辑型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", , 
    .参数 uFlags, 空白型, , 
    .参数 dwBytes, 空白型, , 

.DLL命令 GetObjectPtr, 整数型, "", "lstrcpyn", , 
    .参数 lpString1, 对象, 传址, 
    .参数 lpString2, 对象, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 空白型, 传址, 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", , 
    .参数 hMem, 空白型, , 

.DLL命令 CreateStreamOnHGlobal_int, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 空白型, 传址, 

.DLL命令 GdipSaveImageToStream_int, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 空白型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 GetHGlobalFromStream_int, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 空白型, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipSaveImageToStream, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 对象, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 CopyMemory, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 ZwQuerySystemInformation, 整数型, "ntdll.dll", "ZwQuerySystemInformation", , 
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 SystemInformation, 字节集, , any
    .参数 SystemInformationLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 StrToInt64ExA, 整数型, "shlwapi.dll", "StrToInt64ExA", , 64-bit integer
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 1为16进制，0为10进制
    .参数 piRet, 长整数型, 传址, 

.DLL命令 RtlMoveMemory3, 整数型, "", "RtlMoveMemory", , 
    .参数 dest, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 len, 空白型, , 4

.DLL命令 RtlMoveMemory2, 整数型, "", "RtlMoveMemory", , 
    .参数 dest, SYSTEM_HANDLE_INFORMATION, , 
    .参数 Source, 整数型, , 
    .参数 len, 空白型, , 284

.DLL命令 取指针_字节集, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 NtSystemDebugControl, 整数型, "ntdll.dll", "NtSystemDebugControl", , 
    .参数 Command, 整数型, , 8
    .参数 InputBuffer, 字节集, , 
    .参数 InputBufferLength, 整数型, , 
    .参数 OutputBuffer, 整数型, , 
    .参数 OutputBufferLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 api_LookupPrivilegeValue, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 api_AdjustTokenPrivileges, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 api_GetCurrentProcess, 整数型, "kernel32.dll", "GetCurrentProcess", , 

.DLL命令 api_OpenProcessToken, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 GetCurrentProcessId, 整数型, "", "", , 

.DLL命令 GetObjectA, 整数型, "", "GetObjectA", , 
    .参数 hgdiobj, 空白型, , 
    .参数 cbBuffer, 空白型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 GetDIBits_BimapInfo, 整数型, "", "GetDIBits", , 
    .参数 HDC, 空白型, , 
    .参数 hBitmap, 空白型, , 
    .参数 nStartScan, 空白型, , 
    .参数 nNumScans, 空白型, , 
    .参数 lpBits, 空白型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 空白型, , 

.DLL命令 CopyMemory_BITMAPINFO, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 空白型, , 

.DLL命令 CopyMemory_BITMAPFILEHEADER, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 空白型, , 

.DLL命令 IsWindow, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 PrintWindow, 逻辑型, "", "", , 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 EnumWindows, 逻辑型, "", "", , 
    .参数 lpEnumFunc, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 IsWindowVisible, 逻辑型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 GetWindowTextLengthA, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 GetWindowTextA, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 创建管道, 整数型, "", "CreatePipe", , 
    .参数 输出管道, 整数型, 传址, 
    .参数 输入管道, 整数型, 传址, 
    .参数 管道属性, 安全属性, 传址, 
    .参数 尺寸, 整数型, , 

.DLL命令 创建进程, 整数型, "", "CreateProcessA", , 
    .参数 程序名称, 整数型, , 32位程序用，可设为文本型
    .参数 命令行, 文本型, 传址, 
    .参数 进程属性, 安全属性, 传址, 
    .参数 线程属性, 安全属性, 传址, 
    .参数 参数一, 整数型, , 
    .参数 参数二, 整数型, , 
    .参数 参数三, 整数型, 传址, 
    .参数 运行目录, 整数型, , 如需指定运行目录设为文本行
    .参数 启动信息, 启动信息, 传址, 
    .参数 进程信息, CMD回显_进程信息, 传址, 

.DLL命令 读文件, 整数型, "", "ReadFile", , 
    .参数 文件号, 整数型, , 
    .参数 缓存, 字节集, 传址, 
    .参数 读取尺寸, 整数型, , 
    .参数 实际尺寸, 整数型, 传址, 
    .参数 参数, 整数型, , 

.DLL命令 关闭句柄, 整数型, "", "CloseHandle", , 
    .参数 句柄, 整数型, , 

.DLL命令 获取进程状态, 整数型, "", "GetExitCodeProcess", , 
    .参数 进程号, 整数型, , 
    .参数 进程状态, 整数型, 传址, 

.DLL命令 SetCursorPos, 整数型, "", "SetCursorPos", , 
    .参数 x, 空白型, , 
    .参数 y, 空白型, , 

.DLL命令 mouse_event, 整数型, "", "mouse_event", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 
    .参数 c, 空白型, , 
    .参数 d, 空白型, , 
    .参数 e, 空白型, , 

.DLL命令 GetDesktopWindow, 整数型, "user32", "GetDesktopWindow", , 

.DLL命令 使用指定属性创建逻辑字体_, 整数型, "gdi32", "CreateFontIndirectA", , 用指定的属性创建一种逻辑字体　执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, LOGFONT, , LOGFONT，这个结构定义了逻辑字体请求的属性;  

.DLL命令 SetBkMode_, 整数型, "gdi32", "SetBkMode", , 指定阴影刷子、虚线画笔以及字符中的空隙的填充方式　前一个背景模式的值
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 nBkMode, 整数型, , 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;  

.DLL命令 设置前景色_, 整数型, "gdi32", "SetTextColor", , 设置当前文本颜色。这种颜色也称为“前景色”　文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , 设备场景的句柄
    .参数 颜色, 整数型, , 新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 TextOut_, 整数型, "gdi32", "TextOutA", , 文本绘图函数。也请参考SetTextAlign　非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 x, 整数型, , 绘图的起点，采用逻辑坐标
    .参数 y, 整数型, , 同上
    .参数 lpString, 文本型, , 欲描绘的字串
    .参数 nCount, 整数型, , 字串中要描绘的字符数量;  

.DLL命令 _枚举窗口, 逻辑型, "", "EnumWindows", , 
    .参数 枚举过程, 子程序指针, , 
    .参数 参数, 整数型, , 

.DLL命令 _创建快照, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 _第一个, 整数型, "", "Process32First", , 
    .参数 h, 整数型, , 
    .参数 p, 进程类型, , 

.DLL命令 _下一个, 整数型, "", "Process32Next", , 
    .参数 h, 整数型, , 
    .参数 p, 进程类型, , 

.DLL命令 _控制窗口状态, 整数型, "", "ShowWindow", , 控制窗口的状态（在vb里使用：针对vb窗体及控件，请使用对应的vb属性） 成功:返回TRUE（非零），失败:返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由命令
    .参数 nCmdShow, 整数型, , 为窗口指定的一个命令。请用下述任何一个常数:0 隐藏取消激活  1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

.DLL命令 _取当前窗口, 整数型, "user32", "GetForegroundWindow", , 返回前台窗口句柄

.DLL命令 _窗口是否可见, 整数型, "", "IsWindowVisible", , 判断窗口是否可见  如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _进制文本转整数, 整数型, "shlwapi.dll", "StrToInt64ExA", , 进制文本转整数_64-bit integer
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 长整数型, 传址, 

.DLL命令 _取文本长度, 整数型, "kernel32.dll", "lstrlenA", , 取文本内容长度_
    .参数 文本, 文本型, , Ptr

.DLL命令 _延时, 整数型, "kernel32.dll", "Sleep", , 
    .参数 延时时间, 整数型, , 毫秒

.DLL命令 _替换首尾文本, 逻辑型, "shlwapi.dll", "StrTrimA", , 替换首尾文本
    .参数 psz, 文本型, , 
    .参数 pszTrimChars, 文本型, 传址, 

.DLL命令 _到小写, 文本型, "", "CharLowerA", , 
    .参数 str, 文本型, , 

.DLL命令 _到大写, 文本型, "", "CharUpperA", , 
    .参数 str, 文本型, , 

.DLL命令 _文件复制, 整数型, "", "CopyFileExA", , 
    .参数 lpExistingFileName, 文本型, , 源文件
    .参数 lpNewFileName, 文本型, , 目标文件
    .参数 lpProgressRoutine, 子程序指针, , 回调指针
    .参数 lpData, 空白型, 传址, 
    .参数 pbCancel, 空白型, , 
    .参数 dwCopyFlags, 空白型, , 是否覆盖文件 0覆盖 1不覆盖

.DLL命令 _取路径文件名, 文本型, "Shlwapi.dll", "PathFindFileNameA", , 取出指定路径中的文件名
    .参数 pPath, 文本型, , 路径

.DLL命令 _取版本号, 空白型, "kernel32", "GetVersionExA", , 取出当前计算机操作系统版本及相关信息
    .参数 取win信息, 操作系统, , 

.DLL命令 _取启动时间, 整数型, "kernel32.dll", "GetTickCount", , 用于获取自windows启动以来经历的时间长度（毫秒）

.DLL命令 _取计算机名, 整数型, "kernel32.dll", "GetComputerNameA", , 取出当前完整的计算机名称，TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 _取用户名, 整数型, "advapi32.dll", "GetUserNameA", , 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 _取浏览器, 整数型, "Shlwapi.dll", "DllGetVersion", , 取当前计算机IE浏览器版本及版本号
    .参数 dwVersion, 浏览器, , 

.DLL命令 _信息框, 整数型, "user32.dll", "MessageBoxA", , 弹出一个信息框(返回用户操作信息)
    .参数 hwnd, 整数型, , 信息框父窗口句柄
    .参数 lpText, 文本型, , 信息框内容
    .参数 lpCaption, 文本型, , 信息框标题
    .参数 wType, 整数型, , 信息框按钮(同 系统核心支持库功能"信息框")

.DLL命令 _释放内存, 整数型, "psapi.dll", "EmptyWorkingSet", , 
    .参数 进程句柄, 整数型, , 

.DLL命令 _释放DLL, 逻辑型, "kernel32.dll", "FreeLibrary", , 
    .参数 模块句柄, 整数型, , 

.DLL命令 _内存置零, 空白型, "kernel32.dll", "RtlZeroMemory", , 
    .参数 起始地址, 整数型, , 
    .参数 置零长度, 整数型, , 

.DLL命令 _取内存文本长度, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 内存地址, 整数型, , 

.DLL命令 GetIpAddrTable, 整数型, "IPHlpApi", "", , 
    .参数 pIPAdrTable, MIB_IPAddrTable, 传址, 
    .参数 pdwSize, 整数型, 传址, 
    .参数 Sort, 整数型, , 

.DLL命令 ChangeDisplaySettings, 整数型, "", "ChangeDisplaySettingsA", , 
    .参数 lpDevMode, 短整数型, 传址, 
    .参数 dwFlags, 整数型, , 

.DLL命令 EnumDisplaySettings, 整数型, "", "EnumDisplaySettingsA", , 
    .参数 lpszDeviceName, 整数型, , 
    .参数 iModeNum, 整数型, , 
    .参数 lpDevMode, 短整数型, 传址, 

.DLL命令 _取坐标子句柄, 整数型, "user32.dll", "ChildWindowFromPoint", , 取父窗口中包含了指定坐标的第一个子窗口句柄(与其它取窗口句柄不同的是:可取出不可视或透明的窗口)
    .参数 父窗口句柄, 整数型, , 欲取坐标句柄所在的父窗口句柄
    .参数 坐标x, 整数型, , 指定横坐标
    .参数 坐标y, 整数型, , 指定纵坐标

.DLL命令 _取中断进程退出代码, 整数型, "", "GetExitCodeProcess", , 非零表示成功，零表示失败。
    .参数 hProcess, 整数型, , 用于装载进程退出代码的一个长整数变量。
    .参数 lpExitCode, 整数型, 传址, 想获取退出代码的一个进程的句柄

.DLL命令 _读出文件中数据, 整数型, "", "ReadFile", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nNumberOfBytesToRead, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, , 

.DLL命令 _Internet激活, 整数型, "wininet.dll", "InternetOpenA", , 
    .参数 句柄名称, 文本型, 传址, 
    .参数 连接类型, 整数型, , 1直接连接;3代理连接
    .参数 代理地址, 文本型, 传址, 
    .参数 代理掩码, 文本型, 传址, 
    .参数 dwFlags, 整数型, , 0

.DLL命令 _Internet建立连接, 整数型, "wininet.dll", "InternetConnectA", , 
    .参数 Internet句柄, 整数型, , 
    .参数 域名, 文本型, 传址, 
    .参数 服务器端口, 整数型, , 80HTTP;21FTP;
    .参数 用户名, 文本型, 传址, 空
    .参数 用户口令, 文本型, 传址, 空
    .参数 服务类型, 整数型, , 1FTP;3HTTP
    .参数 dwFlags, 整数型, , 0http;134217728被动FTP模式
    .参数 dwContext, 整数型, , 0

.DLL命令 _Internet关闭句柄, 逻辑型, "wininet.dll", "InternetCloseHandle", , 
    .参数 句柄, 整数型, , 

.DLL命令 _Internet读文件, 逻辑型, "wininet.dll", "InternetReadFile", , 
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sBuffer, 字节集, 传址, 
    .参数 lNumBytesToRead, 整数型, , 
    .参数 lNumberOfBytesRead, 整数型, 传址, 

.DLL命令 _Http创建请求, 整数型, "wininet.dll", "HttpOpenRequestA", , 
    .参数 Internet连接句柄, 整数型, , 由Internet建立连接返回
    .参数 访问方式, 文本型, 传址, "GET" or "POST"为空默认GET
    .参数 页面路径, 文本型, 传址, 简短路径,不带域名
    .参数 协议版本, 文本型, 传址, 为空默认HTTP/1.1
    .参数 引用页, 文本型, 传址, 可为空
    .参数 识别类型, 文本型, 传址, 可为空
    .参数 dwFlags, 整数型, , 2147483648更新下载
    .参数 dwContext, 整数型, , 0

.DLL命令 _Http发送请求, 逻辑型, "wininet.dll", "HttpSendRequestA", , 
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sHeaders, 文本型, 传址, 
    .参数 lHeadersLength, 整数型, , 
    .参数 sOptional, 文本型, 传址, 
    .参数 lOptionalLength, 整数型, , 

.DLL命令 _读取COOKIE, 逻辑型, "wininet.dll", "InternetGetCookieA", , 
    .参数 域名, 文本型, 传址, 
    .参数 名称, 文本型, 传址, 
    .参数 内容, 文本型, 传址, 
    .参数 尺寸, 整数型, 传址, 

.DLL命令 _设置COOKIE, 逻辑型, "wininet.dll", "InternetSetCookieA", , 
    .参数 域名, 文本型, 传址, 
    .参数 名称, 文本型, 传址, 
    .参数 内容, 文本型, 传址, 

.DLL命令 _取当前线程, 整数型, "", "GetCurrentThreadId", , 获取当前线程一个唯一的线程标识符(返回线程标识符)

.DLL命令 _连接线程输入, 整数型, "", "AttachThreadInput", , 允许线程和进程共享输入队列。连接了线程后，输入焦点、窗口激活、鼠标捕获、键盘状态以及输入队列状态都会进入共享状态
    .参数 dwthreadthis, 空白型, , 欲连接线程的标识符（ID）
    .参数 dwthreadforeground, 空白型, , 与idAttach线程连接的另一个线程的标识符
    .参数 fAttach, 逻辑型, , TRUE（非零）连接，FALSE撤消连接

.DLL命令 _创建线程, 整数型, "", "CreateThread", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 _销毁定时器, 整数型, "", "KillTimer", , 
    .参数 c1, 整数型, , 
    .参数 Timerid, 整数型, , 

.DLL命令 _创建定时器, 整数型, "", "SetTimer", , 返回成功创建定时器的标志
    .参数 Thwnd, 整数型, , 为空则为系统级定时器
    .参数 nIDEvent, 整数型, , 除 0 之外任何整数型数值都可以
    .参数 uElapse, 整数型, , 毫秒级周期
    .参数 lpTimerFunc, 子程序指针, , 定时器触发事件

.DLL命令 _销毁线程, 空白型, "", "TerminateThread", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 _HTTP查询信息, 逻辑型, "wininet.dll", "HttpQueryInfoA", , 
    .参数 Internet请求句柄, 整数型, , 
    .参数 待查信息, 整数型, , 22返回所有信息;43SET_COOKIE;+2147483648返回文本
    .参数 返回容器, 文本型, 传址, 
    .参数 返回容器长度, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 获取特别文件夹位置_, 整数型, "shell32.dll", "SHGetSpecialFolderLocation", , 
    .参数 窗口句柄, 整数型, , hwndOwner
    .参数 文件夹位置, 整数型, , nFolder
    .参数 结构, 项目标识符列表_, 传址, pIdl

.DLL命令 SHBrowseForFolder, 整数型, "", "SHBrowseForFolderA", , 
    .参数 lpBrowseInfo, BROWSEINFO, , 

.DLL命令 _从列表id取路径, 整数型, "", "SHGetPathFromIDListA", , 
    .参数 pIdl, 整数型, , 
    .参数 pszPath, 文本型, 传址, 

.DLL命令 从列表id取路径_, 整数型, "shell32.dll", "SHGetPathFromIDListA", , $(b)
    .参数 结构指针, 整数型, , pIdl
    .参数 路径, 文本型, 传址, pszPath

.DLL命令 GetWindowText, 整数型, "user32.dll", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 文本, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 文本长度, 整数型, , lp缓冲区的长度;  

.DLL命令 GetClassName, 整数型, "user32.dll", "GetClassNameA", , 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 GetWindow, 整数型, "", "GetWindow", , 获得一个窗口的句柄，该窗口与某源窗口有特定的关系(返回一个窗口句柄,没有找到或错误返回0)
    .参数 hwnd, 整数型, , 源窗口
    .参数 cmd, 整数型, , 指定结果窗口与源窗口的关系，它们建立在下述常数基础上

.DLL命令 _置父窗口, 整数型, "user32", "SetParent", , 指定一个窗口的新父(返回  前一个父窗口的句柄)
    .参数 子窗口句柄, 整数型, , 子窗口的句柄
    .参数 父窗口句柄, 整数型, , hWndChild的新父

.DLL命令 _取父窗口, 整数型, "user32", "GetParent", , 判断指定窗口的父窗口  父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄;

.DLL命令 _寻找子窗口, 整数型, "user32", "FindWindowExA", , 寻找子窗口_
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。“”表示忽略
    .参数 欲搜索的类名2, 整数型, , 欲搜索的类名。“”表示忽略;

.DLL命令 _寻找子窗口2, 整数型, "user32", "FindWindowExA", , 寻找子窗口_
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。“”表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。“”表示忽略;

.DLL命令 模拟键盘行动_, 整数型, "user32.dll", "keybd_event", , 这个函数模拟了键盘行动
    .参数 键代码, 整数型, , bVk,欲模拟的虚拟键码
    .参数 键扫描码, 整数型, , bScan,键的OEM扫描码
    .参数 标志值, 整数型, , dwFlags,标志常数
    .参数 特定值, 整数型, , dwExtraInfo,通常不用的一个值

.DLL命令 _鼠标隐藏, 整数型, "", "ShowCursor", , 控制鼠标指针的可视性(返回值:显示计数（参考注解）)
    .参数 bShow, 逻辑型, , （非零）显示指针，零 隐藏

.DLL命令 _限制鼠标, 空白型, "", "ClipCursor", , 
    .参数 区域, 矩形类型, , 

.DLL命令 _发送消息A, 整数型, "", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 标识, 整数型, , 
    .参数 消息1, 整数型, , 
    .参数 消息2, 整数型, , 

.DLL命令 _发送消息, 整数型, "", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 标识, 整数型, , 
    .参数 消息1, 整数型, , 
    .参数 消息2, 文本型, , 

.DLL命令 _投递消息, 空白型, "", "PostMessageA", , 向指定窗口句柄发送消息
    .参数 h, 空白型, , 
    .参数 m, 空白型, , 
    .参数 p, 空白型, , 
    .参数 p, 空白型, , 

.DLL命令 _取焦点句柄, 整数型, "", "GetFocus", , 获得拥有输入焦点的窗口的句柄(输入框句柄)。如没有窗口拥有输入焦点，则返回零

.DLL命令 _寻找顶级窗口3, 整数型, "", "FindWindowA", , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 _寻找顶级窗口2, 整数型, "user32.dll", "FindWindowA", , FindWindow,寻找窗口列表中第一个符合指定条件的顶级窗口
    .参数 窗口类名, 文本型, , lpClassName，参见相关帮助
    .参数 窗口文本, 整数型, , lpWindowName，参见相关帮助

.DLL命令 _寻找顶级窗口, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数Get WindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 整数型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = Get WindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 重画窗口_, 逻辑型, "user32", "RedrawWindow", , 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形, 矩形类型, , 
    .参数 区域, 整数型, , 
    .参数 旗帜, 整数型, , 

.DLL命令 _窗口取外边框, 逻辑型, "user32.dll", "GetWindowRect", , 获得整个窗口的范围矩形，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
    .参数 句柄, 整数型, , Long，想获得范围矩形的那个窗口的句柄
    .参数 大小, 矩形类型, 传址, RECT，屏幕坐标中随同窗口装载的矩形(左边,顶边,右边,底边)

.DLL命令 _取得窗口信息, 整数型, "user32.dll", "GetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 属性, 整数型, , 

.DLL命令 MoveWindow, 整数型, "user32", "MoveWindow", , 
    .参数 hwnd, 整数型, , 备注1无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 x, 整数型, , 备注2无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 y, 整数型, , 备注3无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 n, 整数型, , 备注4无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 nHeight, 整数型, , 备注5无法读取，请您提供该API名报易BBS中ID号klasp完善。
    .参数 bRepaint, 整数型, , 备注6无法读取，请您提供该API名报易BBS中ID号klasp完善。

.DLL命令 _执行, 整数型, "", "ShellExecuteA", , 
    .参数 hwnd, 整数型, , 指定一个窗口的句柄，有些时候，Windows程序有必要在创建自己的主窗口前显示一个消息框。
    .参数 lpOperation, 文本型, , 指定字串“Open”来打开lpFlie文档；或指定“Print”来打印它。也可设为vbNullString，表示默认为“Open”
    .参数 lpFile, 文本型, , 想用关联的程序打印或打开的一个程序名或文件名
    .参数 lpParameters, 文本型, , 如lpFile是一个可执行文件，则这个字串包含了传递给执行程序的参数。如lpFile引用的是一个文档文件，或者不需要使用参数，则设为vbNullString
    .参数 lpDirectory, 文本型, , 想使用的默认路径完整路径
    .参数 nShowCmd, 整数型, , 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数

.DLL命令 _取鼠标位置, 逻辑型, "user32.dll", "GetCursorPos", , 
    .参数 光标位置, 坐标类型, 传址, 

.DLL命令 _取内容, 整数型, "", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wparam, 整数型, , 
    .参数 lparam, 文本型, , 

.DLL命令 _取坐标句柄, 整数型, "user32.dll", "WindowFromPoint", , 取指定坐标位置所在窗口组件的句柄(返回句柄)
    .参数 X轴光标, 整数型, , 
    .参数 Y轴光标, 整数型, , 

.DLL命令 _控制鼠标, 空白型, "user32", "mouse_event", , 
    .参数 dwFlags, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 
    .参数 cButtons, 整数型, , 
    .参数 dwExtraInfo, 整数型, , 

.DLL命令 _移动鼠标, 空白型, "user32", "SetCursorPos", , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 _创建新进程, 整数型, "", "CreateProcessA", , 
    .参数 lpApplicationName, 整数型, , 要执行的应用程序的名字
    .参数 lpCommandLine, 文本型, , 要执行的命令行
    .参数 lpProcessAttributes, 整数型, , SECURITY_ATTRIBUTES，指定一个SECURITY_ATTRIBUTES结构，或传递零值表示采用不允许继承的默认描述符
    .参数 lpThreadAttributes, 整数型, , SECURITY_ATTRIBUTES，指定一个SECURITY_ATTRIBUTES结构，或传递零值表示采用不允许继承的默认描述符。
    .参数 bInheritHandles, 逻辑型, , TRUE表示允许当前进程中的所有句柄都由新建的子进程继承
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 任何类型，指向一个环境块的指针
    .参数 lpCurrentDriectory, 整数型, , 新进程的当前目录路径
    .参数 lpStartupInfo, STARTUPINFO, 传址, STARTUPINFO，指定一个STARTUPINFO结构，其中包含了创建进程时使用的附加信息
    .参数 lpProcessInformation, PROCESS_INFORMATION, 传址, PROCESS_INFORMATION，该结构用于容纳新进程的进程和线程标识。

.DLL命令 CreatePipe, 整数型, "", "CreatePipe", , 
    .参数 phReadPipe, 整数型, 传址, 
    .参数 phWritePipe, 整数型, 传址, 
    .参数 lpPipeAttributes, SECURITY_ATTRIBUTES, 传址, 
    .参数 nSize, 整数型, , 

.DLL命令 SHFileOperationA, 整数型, "Shell32.dll", "SHFileOperationA", , 
    .参数 ab, SHFILEOPSTRUCT_, , 

.DLL命令 _宽字符到双字节, 空白型, "kernel32.dll", "WideCharToMultiByte", , 
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 字节集, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 _宽字符到双字节1, 整数型, "kernel32.dll", "WideCharToMultiByte", , 
    .参数 代码页, 整数型, , CodePage
    .参数 标志, 整数型, , dwFlags
    .参数 宽字符文本, 字节集, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar
    .参数 双字节文本, 整数型, , lpMultiByteStr
    .参数 双字节文本长度, 整数型, , cchMultiByte
    .参数 默认文本, 整数型, , lpDefaultChar
    .参数 使用默认文本, 逻辑型, , lpUsedDefaultChar

.DLL命令 _取文件长度, 整数型, "kernel32", "GetFileSizeEx", , 
    .参数 hFile, 整数型, , 
    .参数 lpFileSizeHigh, 整数型, 传址, 

.DLL命令 _打开文件, 整数型, "kernel32", "_lopen", , 
    .参数 lpPathName, 文本型, , 
    .参数 iReadWrite, 整数型, , 

.DLL命令 PeekNamedPipe, 整数型, "", "PeekNamedPipe", , 
    .参数 hNamedPipe, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nBufferSize, 整数型, , 
    .参数 lpBytesRead, 整数型, , 
    .参数 lpTotalBytesAvail, 整数型, 传址, 
    .参数 lpBytesLeftThisMessage, 整数型, , 

.DLL命令 _关闭对象, 整数型, "kernel32", "CloseHandle", , 
    .参数 对象句柄, 整数型, , 

.DLL命令 GetDIBits1, 整数型, "", "GetDIBits", , 
    .参数 HDC, 空白型, , 
    .参数 hBitmap, 空白型, , 
    .参数 nStartScan, 空白型, , 
    .参数 nNumScans, 空白型, , 
    .参数 lpBits, 空白型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 空白型, , 

.DLL命令 SetBkColor_, 整数型, "gdi32", "SetBkColor", , 为指定的设备场景设置背景颜色。背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙。也在位图颜色转换期间使用。参考SetBkMode　前一个背景色，CLR_INVALID表示出错
    .参数 hdc, 整数型, , 设备场景的句柄
    .参数 crColor, 整数型, , 新背景颜色的RGB颜色值;  

.DLL命令 GetPixel, 整数型, "", "GetPixel", , 取坐标颜色
    .参数 hdc, 整数型, , 场景句柄
    .参数 X, 整数型, , X坐标
    .参数 Y, 整数型, , Y坐标

.DLL命令 _设置窗口标题, 整数型, "user32", "SetWindowTextA", , 设置窗口的标题文字或控件的内容（在vb里使用：针对vb窗体，应使用caption或text属性）　非零表示成功，零表示失败。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要设置文字的窗口的句柄
    .参数 窗口标题, 文本型, , 要设到hwnd窗口中的文字;

.DLL命令 _取窗口大小, 整数型, "user32", "GetClientRect", , 返回指定窗口客户区矩形的大小 (Long，非零表示成功，零表示失败。)
    .参数 hwnd, 整数型, , Long，欲计算大小的目标窗口
    .参数 lpRect, 矩形类型, , RECT，指定一个矩形，用客户区域的大小载入（以像素为单位）

.DLL命令 _取窗口区域位置, 整数型, "user32.dll", "ClientToScreen", , 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , hwnd，要取出区域坐标的窗口句柄
    .参数 位置变量, 坐标类型, , lpPoint，参见相关帮助

.DLL命令 _句柄是否有效, 整数型, "user32", "IsWindow", , 判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型, , 待检查窗口的句柄

.DLL命令 _窗口是否最小化, 整数型, "", "IsIconic", , 判断窗口是否已最小化 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _窗口是否最大化, 整数型, "", "IsZoomed", , 判断窗口是否已最大化 非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄

.DLL命令 _判断按键状态, 整数型, "", "GetAsyncKeyState", , 判断函数调用时指定虚拟键的状态 (非按住状态返回0) 
    .参数 键代码, 整数型, , 欲测试的虚拟键的键码

.DLL命令 _窗口置焦点, 整数型, "", "SetFocus", , 将输入焦点设到指定的窗口。如有必要，会激活窗口  (返回前一个拥有焦点的窗口的句柄)
    .参数 窗口句柄, 整数型, , 准备接收焦点的窗口的句柄(必须为同一线程)

.DLL命令 _窗口置前台, 整数型, "", "SetForegroundWindow", , 将窗口设为系统的前台窗口。可用于改变用户目前正在操作的应用程序 (非零表示成功，零表示失败)
    .参数 窗口句柄, 整数型, , 带到前台的窗口

.DLL命令 _窗口禁止, 整数型, "user32", "EnableWindow", , 在指定的窗口里允许或禁止所有鼠标及键盘输入(非零表示成功，零表示失败)  也可用于外部按钮解除禁止(或其它一些禁止的控件)
    .参数 hwnd, 整数型, , 窗口或控件的句柄
    .参数 fEnable, 整数型, , 非零允许窗口，零禁止

.DLL命令 _透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", , 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 _回调钩子, 整数型, "", "CallWindowProcA", , 
    .参数 窗口程序程序指针, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 _注册热键, 整数型, "user32.dll", "RegisterHotKey", , 
    .参数 hWnd, 整数型, , 
    .参数 id, 整数型, , 
    .参数 fsModifoers, 整数型, , 
    .参数 vk, 整数型, , 

.DLL命令 _撤消热键钩子, 整数型, "", "UnregisterHotKey", , 
    .参数 hWnd, 整数型, , 
    .参数 HotKeyID, 整数型, , 

.DLL命令 _设置窗口特征, 子程序指针, "", "SetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 特征索引, 整数型, , 
    .参数 新特征, 子程序指针, , 

.DLL命令 _设置窗口信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 SetWindowPos, 空白型, "", "SetWindowPos", , SetWindowPos(hwnd,hWndInsertAfter,x,y,cx,cy,wFlags)
    .参数 hwnd, 整数型, , 欲定位的窗口
    .参数 hWndInsertAfter, 整数型, , 
    .参数 x, 整数型, , 窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示
    .参数 y, 整数型, , 窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示
    .参数 cx, 整数型, , 指定新的窗口宽度
    .参数 cy, 整数型, , 指定新的窗口高度
    .参数 wFlags, 整数型, , 

.DLL命令 _系统声音, 整数型, "", "MessageBeep", , 播放一个系统声音。系统声音的分配方案是在控制面板里决定的 (非零表示成功，零表示失败)
    .参数 wType, 整数型, , 标准响铃 系统星号声 系统惊叹声 系统指针声 系统提问声

.DLL命令 _第一个模块, 整数型, "", "Module32First", , 第一个模块，查找模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块类型, , 

.DLL命令 _下一个模块, 整数型, "kernel32.dll", "Module32Next", , 下一个模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块类型, , 

.DLL命令 _获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 进程权限_, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 进程权限_, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 _置进程权限, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 使能/取消令牌特权
    .参数 令牌句柄, 整数型, , 
    .参数 DisableAllPrivileges, 逻辑型, , 
    .参数 NewState, 进程权限_, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 整数型, , 
    .参数 ReturnLength, 整数型, , 

.DLL命令 _打开令牌对象, 逻辑型, "advapi32.dll", "OpenProcessToken", , 打开过程令牌对象
    .参数 进程句柄, 整数型, , 
    .参数 权限, 整数型, , 
    .参数 令牌句柄, 整数型, 传址, 

.DLL命令 _打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", , 打开过程令牌对象
    .参数 ProcessHandle, 整数型, , 进程句柄
    .参数 DesiredAccess, 整数型, , 权限
    .参数 TokenHandle, 整数型, 传址, 令牌句柄

.DLL命令 _取权限令牌, 整数型, "advapi32.dll", "LookupPrivilegeValueA", , 返回特权名LUID
    .参数 系统服务名, 整数型, , lpSystemName
    .参数 权限名, 文本型, 传址, 
    .参数 权限结构, LuID, 传址, 

.DLL命令 _恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 _取自进程ID, 整数型, "kernel32.dll", "GetCurrentProcessId", , 

.DLL命令 _终止进程, 整数型, "", "TerminateProcess", , 
    .参数 id, 空白型, , 
    .参数 a, 空白型, , 

.DLL命令 _获取线程, 整数型, "kernel32.dll", "GetCurrentProcess", , 

.DLL命令 _打开进程, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 访问级别, 整数型, , 2035711完全访问
    .参数 子进程继承, 整数型, , 0为子进程继承
    .参数 进程ID, 整数型, , 要打开的进程标识

.DLL命令 OpenProcess2, 整数型, "", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 CreateRemoteThread_Hb, 整数型, "kernel32", "CreateRemoteThread", , 在另一进程中建立线索
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, SECURITY_ATTRIBUTES, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 CreateRemoteThread, 整数型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 GetExitCodeThread, 逻辑型, "", "GetExitCodeThread", , 
    .参数 hThread, 空白型, , 
    .参数 lpExitCode, 空白型, 传址, 

.DLL命令 _进程暂停, 空白型, "NTDLL.DLL", "ZwSuspendProcess", , 暂停
    .参数 进程句柄, 空白型, , 

.DLL命令 _进程恢复, 空白型, "NTDLL.DLL", "ZwResumeProcess", , 恢复
    .参数 进程句柄, 空白型, , 

.DLL命令 VirtualQueryEx, 整数型, "", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 info, MEMORY_BASIC_INFORMATION, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 LocalSize, 整数型, "", "LocalSize", , 
    .参数 hMem, 整数型, , 

.DLL命令 _取内存参数, 空白型, "", "GlobalMemoryStatus", , 
    .参数 内存参数, 内存类型, , 

.DLL命令 _写内存, 整数型, "", "RtlMoveMemory", , 
    .参数 dest, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 length, 整数型, , 

.DLL命令 _读内存, 整数型, "", "RtlMoveMemory", , 
    .参数 dest, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 length, 整数型, , 

.DLL命令 _内存读文本, 逻辑型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 文本型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 

.DLL命令 _内存读字节集, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 _内存读整数, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写字节集, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 字节集, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写整数, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 整数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _内存写文本, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 文本型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.DLL命令 _取窗口进程ID, 整数型, "user32.dll", "GetWindowThreadProcessId", , GetWindowThreadProcessId，获取与指定窗口关联在一起的一个线程和进程标识符
    .参数 窗口句柄, 整数型, , hwnd，指定窗口句柄
    .参数 进程标识符, 整数型, 传址, lpdwProcessId，指定一个变量，用于装载拥有那个窗口的一个进程的标识符

.DLL命令 InstallWinIoDriver, 逻辑型, "WinIo.dll", "InstallWinIoDriver", , 安装WinIo驱动(忽略)
    .参数 DriverPath, 文本型, , 
    .参数 Mode, 短整数型, , 

.DLL命令 RemoveWinIoDriver, 逻辑型, "WinIo.dll", "RemoveWinIoDriver", , 卸载WinIo驱动(忽略)

.DLL命令 开始内存映射, 整数型, "WinIo.dll", "MapPhysToLin", , 将物理内存的一部分映射到一个32位程序的线性地址空间。成功返回一个与物理地址相关的线性地址，错误返回NULL
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysSize, 整数型, , 需要映射的字节数
    .参数 PhysMemHandle, 整数型, 传址, 变量指针，如果调用成功，负责接收物理内存句柄。(any)

.DLL命令 解除内存映射, 逻辑型, "WinIo.dll", "UnmapPhysicalMemory", , 解除使用MapPhysToLin映射的一段线性物理内存区域
    .参数 PhysMemHandle, 整数型, , 物理内存句柄(any)
    .参数 LinAddr, 整数型, , MapPhysToLin函数调用返回的线性地址

.DLL命令 读内存双字数据, 逻辑型, "WinIo.dll", "GetPhysLong", , 从指定的物理地址读取一个双字数据。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, 传址, 指向一个双字变量的指针，接收从物理内存中传来的数据。

.DLL命令 写内存双字数据, 逻辑型, "WinIo.dll", "SetPhysLong", , 将一个双字型数据写入指定的物理地址。调用成功，返回非零值。
    .参数 PhysAddr, 整数型, , 指向物理地址的指针
    .参数 PhysVal, 整数型, , 指定待写入物理内存地址出的双字型数据。

.DLL命令 创建事件同步对象, 空白型, "", "CreateEventA", , 
    .参数 lpEventAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 bInitialState, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 打开事件同步对象, 整数型, "", "OpenEventA", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 EnableMenuItem, 整数型, "user32.dll", "EnableMenuItem", , 允许或禁止指定的菜单条目
    .参数 hMenu, 整数型, , 
    .参数 wIDEnableItem, 整数型, , 
    .参数 wEnable, 整数型, , 

.DLL命令 GetSystemMenu, 整数型, "user32", "GetSystemMenu", , 
    .参数 hwnd, 整数型, , 
    .参数 bRevert, 整数型, , 

.DLL命令 OpenIcon, 整数型, "user32", "OpenIcon", , 
    .参数 hwnd, 整数型, , 

.DLL命令 安装钩子_, 整数型, "", "SetWindowsHookExA", , 钩子
    .参数 ihook, 整数型, , 
    .参数 lpfunc, 子程序指针, , 
    .参数 hin, 整数型, , 
    .参数 threadid, 整数型, , 

.DLL命令 GetModuleHandleA, 整数型, "", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 _取模块句柄, 整数型, "", "GetModuleHandleA", , 钩子
    .参数 lpModuleName, 整数型, , 

.DLL命令 卸载钩子_, 整数型, "", "UnhookWindowsHookEx", , 钩子
    .参数 hHook, 整数型, , 

.DLL命令 下一个钩子, 整数型, "", "CallNextHookEx", , 钩子
    .参数 hHook, 整数型, , 
    .参数 icode, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 CreateWindowExA, 整数型, "", "CreateWindowExA", , 
    .参数 dwExStyle, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 lpWindowName, 文本型, , 
    .参数 dwStyle, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 hMenu, 整数型, , 
    .参数 hInstance, 整数型, , 
    .参数 lpParam, 整数型, , 

.DLL命令 RegisterClassExA, 整数型, "", "RegisterClassExA", , 
    .参数 lpwcx, WNDCLASSEX, , 

.DLL命令 GetClassInfoExA, 整数型, "", "GetClassInfoExA", , 
    .参数 hinst, 空白型, , 
    .参数 lpszClass, 文本型, , 
    .参数 lpwcx, WNDCLASSEX, , 

.DLL命令 UnregisterClassA, 逻辑型, "", "UnregisterClassA", , 
    .参数 lpClassName, 文本型, , 
    .参数 hInstance, 整数型, , 

.DLL命令 VirtualProtect, 逻辑型, "", "VirtualProtect", , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flNewProtect, 整数型, , 
    .参数 lpflOldProtect, 整数型, 传址, 

.DLL命令 _取屏幕句柄, 整数型, "user32.dll", "GetDesktopWindow", , 返回屏幕的句柄

.DLL命令 _窗口闪动, 空白型, "user32.dll", "FlashWindow", , 
    .参数 窗口句柄, 整数型, , 
    .参数 闪动, 逻辑型, , 是否闪动窗口

.DLL命令 _取启动参数, 文本型, "kernel32.dll", "GetCommandLineA", , 

.DLL命令 CopyMemoryA, 空白型, "", "RtlMoveMemory", , 钩子
    .参数 Destination, 按键信息_, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 动画窗口, 空白型, "user32", "AnimateWindow", , 
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 dwTime, 整数型, , 动画时间
    .参数 dwFlags, 整数型, , 动画类型，支持累加

.DLL命令 PickIconDlg, 整数型, "Shell32", "#62", , 
    .参数 hWnd, 整数型, , 
    .参数 lpstrFile, 字节集, , 
    .参数 nMaxFile, 整数型, , 
    .参数 lpdwIconIndex, 整数型, 传址, 

.DLL命令 分配内存虚拟页, 整数型, "kernel32.dll", "VirtualAllocEx", , 保留虚拟页
    .参数 目标对象句柄, 整数型, , hProcess
    .参数 分配文本地址, 整数型, , lpAddress
    .参数 分配大小, 整数型, , dwSize
    .参数 分配类型, 整数型, , flAllocationType
    .参数 内存保护标志, 整数型, , flProtect

.DLL命令 远程创建线程, 整数型, "", "CreateRemoteThread", , 
    .参数 目标对象句柄, 整数型, , hProcess
    .参数 线程安全描述字, 整数型, , lpThreadAttributes
    .参数 线程栈大小, 整数型, , dwStackSize
    .参数 指向在远程进程中执行的函数地址, 整数型, , lpStartAddress
    .参数 传入参数, 整数型, , lpParameter
    .参数 创建线程的其它标志, 整数型, , dwCreationFlags
    .参数 线程身份标志, 整数型, , lpThreadId

.DLL命令 运行线程, 空白型, "", "ResumeThread", , 
    .参数 线程句柄, 整数型, , 

.DLL命令 写入内存, 整数型, "", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 关闭进程, 整数型, "kernel32.dll", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 VirtualAllocEx_Hb, 整数型, "kernel32.dll", "VirtualAllocEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 WriteProcessMemory_Hb, 整数型, "kernel32", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 GetWindowLong, 整数型, "user32", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 GlobalMemoryStatus, 空白型, "", "GlobalMemoryStatus", , 
    .参数 内存参数, 内存类型, , 

.DLL命令 _查询内存地址信息, 整数型, "", "VirtualQueryEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 info, 内存信息模块, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 GetVolumeInformation, 整数型, "", "GetVolumeInformationA", , kernel32.dll
    .参数 lpRootPathName, 文本型, , String，欲获取信息的那个卷的根路径
    .参数 lpVolumeNameBuffer, 文本型, , String，用于装载卷名（卷标）的一个字串
    .参数 nVolumeNameSize, 整数型, , Long，lpVolumeNameBuffer字串的长度
    .参数 lpVolumeSerialNumber, 整数型, 传址, Long，用于装载磁盘卷序列号的变量
    .参数 lpMaximumComponentLength, 整数型, 传址, Long，指定一个变量，用于装载文件名每一部分的长度。例如，在“c:\component1\component2.ext”的情况下，它就代表component1或component2名称的长度
    .参数 lpFileSystemFlags, 整数型, 传址, Long，用于装载一个或多个二进制位标志的变量。对这些标志位的解释如下：
    .参数 lpFileSystemNameBuffer, 文本型, , String，指定一个缓冲区，用于装载文件系统的名称（如FAT，NTFS以及其他）
    .参数 nFileSystemNameSize, 整数型, , Long，lpFileSystemNameBuffer字串的长度

.DLL命令 RegisterWindowMessage, 整数型, "", "RegisterWindowMessageA", , user32.dll
    .参数 lpString, 文本型, , 

.DLL命令 SendMessageTimeout, 整数型, "", "SendMessageTimeoutA", , user32.dll 向窗口发送一条消息。如窗口位于不同的线程中，则利用这个函数可以指定一个超时值，以便在另一个进程挂起的时候防止调用进程也永远挂起　成功时返回TRUE，失败时返回FALSE。会设置GetLastError
    .参数 MSG, 整数型, , 消息的标识符
    .参数 hwnd, 整数型, , 要接收消息的一个窗口的句柄
    .参数 wParam, 整数型, , 由消息决定
    .参数 lParam, 整数型, , 由消息决定
    .参数 fuFlags, 整数型, , 下述常数的一个或多个;SMTO_ABORTIFHUNG：如目标进程挂起，则函数立即返回;SMTO_BLOCK：除非函数返回，否则调用线程不能处理消息;SMTO_NORMAL：允许调用线程处理消息，同时保持函数继续执行
    .参数 uTimeout, 整数型, , 超时值，采用毫秒为单位
    .参数 lpdwResult, 整数型, 传址, 用于装载函数结果的一个变量;

.DLL命令 ObjectFromLresult, 整数型, "", "ObjectFromLresult", , OLEACC.DLL
    .参数 lResult, 整数型, , 
    .参数 riid, 字节集, , 
    .参数 wParam, 整数型, , 
    .参数 ppvObject, 对象, , 

.DLL命令 _寻找子窗口3, 整数型, "", "FindWindowExA", , 
    .参数 hWnd1, 整数型, , 
    .参数 hWnd2, 整数型, , 
    .参数 lpsz1, 整数型, , 
    .参数 lpsz2, 整数型, , 

.DLL命令 _装载DLL, 整数型, "", "LoadLibraryA", , 
    .参数 lpLibFileName, 文本型, , 

.DLL命令 _取库函数地址3, 整数型, "", "GetProcAddress", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 整数型, , 

.DLL命令 _安装钩子, 整数型, "", "SetWindowsHookExA", , 钩子
    .参数 ihook, 整数型, , 
    .参数 lpfunc, 整数型, , 
    .参数 hin, 整数型, , 
    .参数 threadid, 整数型, , 

.DLL命令 _投递线程消息, 整数型, "", "PostThreadMessageA", , user32.dll
    .参数 idThread, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 _复制内存_消息, 整数型, "", "RtlMoveMemory", , kernel32.dll
    .参数 目标地址, 消息类型, , 
    .参数 源地址, 整数型, , 
    .参数 复制长度, 整数型, , 

.DLL命令 _获得句柄, 整数型, "", "GetWindow", , 获得一个窗口的句柄，该窗口与某源窗口有特定的关系(返回一个窗口句柄,没有找到或错误返回0)
    .参数 hwnd, 整数型, , 源窗口
    .参数 cmd, 整数型, , 指定结果窗口与源窗口的关系，它们建立在下述常数基础上

.DLL命令 _枚举子窗口, 逻辑型, "", "EnumChildWindows", , 
    .参数 hWndParent, 整数型, , 父窗口句柄
    .参数 lpEnumFunc, 子程序指针, , 回调指针
    .参数 lParam, 整数型, , 

.DLL命令 _枚举任务窗口, 逻辑型, "", "EnumThreadWindows", , 枚举与指定任务相关的窗口
    .参数 dwThreadId, 整数型, , 线程句柄
    .参数 lpfn, 子程序指针, , 回调指针
    .参数 lParam, 整数型, , 

.DLL命令 NtQuerySystemInformation_spi, 整数型, "ntdll", "NtQuerySystemInformation", , 
    .参数 dwInfoType, 整数型, , 
    .参数 lpStructure, SYSTEM_PERFORMANCE_INFORMATION, , 
    .参数 dwSize, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 NtQuerySystemInformation_sti, 整数型, "ntdll", "NtQuerySystemInformation", , 
    .参数 dwInfoType, 整数型, , 
    .参数 lpStructure, SYSTEM_TIME_INFORMATION, , 
    .参数 dwSize, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 CreateDIBSection, 整数型, "", "CreateDIBSection", , 
    .参数 hdc, 整数型, , 
    .参数 pbmi, BITMAPINFO, , 
    .参数 iUsage, 整数型, , 
    .参数 ppvBits, 整数型, , 
    .参数 hSection, 整数型, , 
    .参数 dwOffset, 整数型, , 

.DLL命令 复制内存_复制位图文件头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, 文件头信息_, , 
    .参数 len, 整数型, , 

.DLL命令 复制内存_复制位图信息头到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, BITMAPINFOHEADER, , 
    .参数 len, 整数型, , 

.DLL命令 复制内存_字节集到字节集, 空白型, "", "RtlMoveMemory", , 
    .参数 Dest, 字节型, 传址, 
    .参数 Src, 字节型, 传址, 
    .参数 len, 整数型, , 

.DLL命令 OpenClipboard, 逻辑型, "", "OpenClipboard", 公开, 
    .参数 hWndNewOwner, 空白型, , 

.DLL命令 EmptyClipboard, 逻辑型, "", "EmptyClipboard", 公开, 

.DLL命令 CloseClipboard, 逻辑型, "", "CloseClipboard", 公开, 

.DLL命令 SetClipboardData, 整数型, "", "SetClipboardData", 公开, 
    .参数 uFormat, 空白型, , 
    .参数 hMem, 空白型, , 

.DLL命令 GetClipboardData, 整数型, "", "GetClipboardData", , 返回句柄
    .参数 uFormat, 整数型, , 表示的是要放进剪贴板数据的格式

.DLL命令 _内存写小数, 小数型, "", "WriteProcessMemory", , kernel32.dll
    .参数 hProcess, 整数型, , 
    .参数 pBaseAddress, 整数型, , 内存地址
    .参数 lpBuffer, 小数型, 传址, 数据指针
    .参数 nSize, 整数型, , 长度
    .参数 lpNumberOfBytesWritten, 整数型, , 实际写出长度

.程序集 程序集1, , , 

.程序集变量 ApiHook, Hook操作, , , 
.子程序 _启动子程序, 整数型, , F.Dream QQ: 708280
 ' 系统.信息框 (“1”)
 ' 模拟.模拟按键 (1, , 1)
 ' 窗口.取进程 (1)
 ' 内存.读文本内存 (1, 1)
 ' 文本.字符 (到字节 (“1”))
 ' 字节.寻找字节集 (到字节集 (“1”), 到字节集 (“1”))
 ' 加密.加密QQ密码 (“1”)
 ' 数值.整除 (11, 11)
 ' 编码.Qp编码 (到字节集 (“11”))
 ' 网络.访问网页 (“Http://FenW.cN”)
 ' 图形.窗口内画字 (, , , “11”)
 ' 驱动.启动 ()
 ' 进程.进程枚举 ()
 ' Hook.撤消Hook ()
 ' 图形.后台区域截图 (1638888, 10, 10, 50, 50)
 ' 汇编.置入汇编代码 ()
 ' Xml.导入 (到字节集 (“123”))
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 取特殊目录, 文本型, , 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]

.局部变量 路径, 文本型, , , 
.局部变量 标示结构, 项目标识符列表_, , , 
.局部变量 目录类型, 整数型, , , 

.如果真 (等于 (欲获取目录类型, 99))
    输出调试文本 (“0我的桌面 2我的程序 5我的文档 6我的收藏夹 7我的启动 8我最近的文档 9我的发送到 11我的开始菜单 13我的音乐 14我的视频 16我的桌面 20系统字体 22开始菜单组 23程序组 24启动组 25桌面 31收藏夹 32我的浏览器临时目录 33我的Cookies 34我的历史记录 36Windows安装目录 37系统目录 38文件安装目录 39我的图片 40用户目录 41系统目录 46文档 47管理工具 48我的管理工具 53音乐 54图片 55视频”)
.如果真结束
.如果 (等于 (欲获取目录类型, 1))
    赋值 (目录类型, 34)
.否则
    赋值 (目录类型, 欲获取目录类型)
.如果结束
获取特别文件夹位置_ (0, 目录类型, 标示结构)
赋值 (路径, 取空白文本 (255))
从列表id取路径_ (标示结构.结构大小, 路径)
.如果真 (等于 (路径, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (欲获取目录类型, 1))
    赋值 (路径, 子文本替换 (路径, “History”, “Temp”, , , 真))
.如果真结束
返回 (相加 (路径, “\”))

.子程序 _模块_调用转向, 空白型, , 
.参数 DLL文件名, 文本型, , 
.参数 函数名, 文本型, , 

.局部变量 hbe4htr, 文本型, 静态, , 
.局部变量 ye65ybtry5, 整数型, 静态, , 

.如果真 (等于 (hbe4htr, “”))
    赋值 (hbe4htr, 取特殊目录 (37))
.如果真结束
.如果真 (DLL命令调用转向 (相加 (hbe4htr, DLL文件名), 函数名))
    返回 ()
.如果真结束
信息框 (相加 (“error:Can't Find Function! (”, DLL文件名, “,”, 函数名, “)”), 0, )
结束 ()

.子程序 枚举窗口过程, 逻辑型, , 
.参数 hwnd, 整数型, , 

.如果真 (不等于 (hwnd, 0))
    加入成员 (当前窗口列表, hwnd)
    返回 (真)
.如果真结束
返回 (假)

.子程序 窗口信息回调函数, 空白型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 窗口标题, 文本型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 临时窗口信息, 窗口类型, , , 

.如果真 (窗口.窗口是否可见 (窗口句柄)) ' 是否为可见窗口
    赋值 (窗口标题, 取空白文本 (256))
    赋值 (窗口类名, 取空白文本 (256))
    GetWindowText (窗口句柄, 窗口标题, 255)
    GetClassName (窗口句柄, 窗口类名, 255)
    赋值 (线程ID, _取窗口进程ID (窗口句柄, 进程ID))
    赋值 (临时窗口信息.进程ID, 进程ID)
    赋值 (临时窗口信息.线程ID, 线程ID)
    赋值 (临时窗口信息.窗口句柄, 窗口句柄)
    赋值 (临时窗口信息.窗口类名, 窗口类名)
    赋值 (临时窗口信息.窗口标题, 窗口标题)
    加入成员 (窗口信息, 临时窗口信息)
.如果真结束


.子程序 文件夹单线同步线程, 空白型, , 
文件夹同步清理 (A服务器目录, A本地目录)
文件夹单线同步处理 (A服务器目录, A本地目录)


.子程序 文件夹同步清理, 空白型, , 将本地目录中多余的或不同的文件删除
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲清理的目录

.局部变量 文件名, 文本型, , , 
.局部变量 子目录, 文本型, , , 

赋值 (服务器目录, 相加 (服务器目录, “\”))
赋值 (本地目录, 相加 (本地目录, “\”))
创建目录 (本地目录)
处理事件 ()
赋值 (文件名, 寻找文件 (相加 (本地目录, “*.*”), 39))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (不等于 (取文件尺寸 (相加 (本地目录, 文件名)), 取文件尺寸 (相加 (服务器目录, 文件名))))
        删除文件 (相加 (本地目录, 文件名))
    .如果真结束
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()
赋值 (子目录, 寻找文件 (相加 (本地目录, “*.*”), 16))
.判断循环首 (不等于 (子目录, “”))
    .如果真 (并且 (不等于 (子目录, “.”), 不等于 (子目录, “..”)))
        .如果 (磁盘.检测文件夹是否存在 (相加 (服务器目录, 子目录)))
            文件夹同步清理 (相加 (服务器目录, 子目录), 相加 (本地目录, 子目录))
        .否则
            删除目录 (相加 (本地目录, 子目录))
        .如果结束
        
    .如果真结束
    赋值 (子目录, 寻找文件 (#子目录))
.判断循环尾 ()


.子程序 取路径文件名, 文本型, , 取指定路径中的文件名(返回文件名)
.参数 路径, 文本型, , 完整路径

返回 (取文本右边 (路径, 相减 (取文本长度 (路径), 倒找文本 (路径, “\”, , 假))))


.子程序 文件夹单线同步处理, 空白型, , 将一个目录与另一个目录同步(自动复制本地缺少的文件,替换掉大小不同的文件)
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录

.局部变量 文件名, 文本型, , , 
.局部变量 子目录, 文本型, , , 

赋值 (服务器目录, 相加 (服务器目录, “\”))
创建目录 (本地目录)
赋值 (本地目录, 相加 (本地目录, “\”))
处理事件 ()
赋值 (文件名, 寻找文件 (相加 (服务器目录, “*.*”), 39))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (不等于 (取文件尺寸 (相加 (本地目录, 文件名)), 取文件尺寸 (相加 (服务器目录, 文件名))))
        复制文件 (相加 (服务器目录, 文件名), 相加 (本地目录, 文件名))
    .如果真结束
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()
赋值 (子目录, 寻找文件 (相加 (服务器目录, “*.*”), 16))
.判断循环首 (不等于 (子目录, “”))
    .如果真 (并且 (不等于 (子目录, “.”), 不等于 (子目录, “..”)))
        文件夹单线同步处理 (相加 (服务器目录, 子目录), 相加 (本地目录, 子目录))
    .如果真结束
    赋值 (子目录, 寻找文件 (#子目录))
.判断循环尾 ()


.子程序 MyCreateWindowEx, 整数型, , 类名API拦截
.参数 dwExStyle, 整数型, , 
.参数 lpClassName, 文本型, , 
.参数 lpWindowName, 文本型, , 
.参数 dwStyle, 整数型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 nWidth, 整数型, , 
.参数 nHeight, 整数型, , 
.参数 hWndParent, 整数型, , 
.参数 hMenu, 整数型, , 
.参数 hInstance, 整数型, , 
.参数 lpParam, 整数型, , 

.局部变量 返回值, 整数型, , , 
.局部变量 wc, WNDCLASSEX, , , 

ApiHook.停止Hook () ' 停止拦截API
.如果 (等于 (lpClassName, 变量旧类名))
    赋值 (wc.cbSize, 相乘 (12, 4))
    GetClassInfoExA (hInstance, lpClassName, wc) ' 获取类信息
    赋值 (wc.lpszClassName, 变量新类名) ' 设置类名
    RegisterClassExA (wc) ' 注册类
    赋值 (返回值, CreateWindowExA (dwExStyle, wc.lpszClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)) ' 创建主窗口
    ApiHook.撤消Hook () ' 卸载APIHOOK
.否则
    赋值 (返回值, CreateWindowExA (dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam))
.如果结束
ApiHook.开始Hook () ' 开始拦截API
返回 (返回值)

.子程序 置分辨率, 空白型, , 设置屏幕分辨率(无返回值)
.参数 色深, 短整数型, 可空, 新的色深 可空:不改变原先设定
.参数 屏幕宽度, 短整数型, 可空, 新的屏幕宽度 可空:不改变原先设定
.参数 屏幕高度, 短整数型, 可空, 新的屏幕高度 可空:不改变原先设定
.参数 屏幕刷新率, 短整数型, 可空, 新的屏幕刷新率 可空:不改变原先设定

.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1]) ' 取
.如果真 (等于 (色深, 0))
    赋值 (色深, DEVMODE [53])
.如果真结束
.如果真 (等于 (屏幕宽度, 0))
    赋值 (屏幕宽度, DEVMODE [55])
.如果真结束
.如果真 (等于 (屏幕高度, 0))
    赋值 (屏幕高度, DEVMODE [57])
.如果真结束
.如果真 (等于 (屏幕刷新率, 0))
    赋值 (屏幕刷新率, DEVMODE [61])
.如果真结束
EnumDisplaySettings (0, 0, DEVMODE [1])
赋值 (DEVMODE [22], 92) ' 设置分辨率标志
赋值 (DEVMODE [53], 色深) ' 色深，取值：8,16,24,32
赋值 (DEVMODE [55], 屏幕宽度)
赋值 (DEVMODE [57], 屏幕高度)
赋值 (DEVMODE [61], 屏幕刷新率) ' 一般为60，75，85，100
ChangeDisplaySettings (DEVMODE [1], 4)


.子程序 键盘钩子处理, 整数型, , 锁键盘
.参数 icode, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 按键信息, 按键信息_, , , 

.如果真 (键盘锁定状态)
    返回 (1)
.如果真结束
CopyMemoryA (按键信息, lparam, 28)
.如果真 (等于 (icode, 0))
    .如果真 (或者 (等于 (按键信息.虚拟码, #Esc键), 等于 (按键信息.虚拟码, #Tab键), 等于 (按键信息.虚拟码, #F4键)))
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (按键信息.虚拟码, 44), 等于 (按键信息.虚拟码, 145), 等于 (按键信息.虚拟码, 19))) ' Print键 Scroll键 Pause键
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (按键信息.虚拟码, 91), 等于 (按键信息.虚拟码, 92), 等于 (按键信息.虚拟码, 93))) ' 左右Win键与菜单键
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (按键信息.虚拟码, 160), 等于 (按键信息.虚拟码, 161))) ' 左右Shift键
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (按键信息.虚拟码, 162), 等于 (按键信息.虚拟码, 163))) ' 左右Ctrl键
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (按键信息.虚拟码, 164), 等于 (按键信息.虚拟码, 165))) ' 左右Alt键
        返回 (1)
    .如果真结束
    返回 (0)
.如果真结束
返回 (下一个钩子 (键盘锁定钩子句柄, icode, wparam, lparam))


.子程序 取分辨率, 空白型, , 获取屏幕分辨率(无返回值)
.参数 色深, 短整数型, 参考 可空, 
.参数 屏幕宽度, 短整数型, 参考 可空, 
.参数 屏幕高度, 短整数型, 参考 可空, 
.参数 屏幕刷新率, 短整数型, 参考 可空, 

.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1])
赋值 (色深, DEVMODE [53])
赋值 (屏幕宽度, DEVMODE [55])
赋值 (屏幕高度, DEVMODE [57])
赋值 (屏幕刷新率, DEVMODE [61])


.子程序 取焦点句柄, 整数型, , 取光标焦点处窗口句柄(返回句柄)
.局部变量 焦点窗口句柄, 整数型, , , 
.局部变量 目标线程ID, 整数型, , , 

赋值 (目标线程ID, _取窗口进程ID (_取当前窗口 (), 0))
_连接线程输入 (_取当前线程 (), 目标线程ID, 真)
赋值 (焦点窗口句柄, _取焦点句柄 ())
_连接线程输入 (_取当前线程 (), 目标线程ID, 假)
返回 (焦点窗口句柄)


.子程序 窗口置焦点, 逻辑型, , 将输入焦点设到指定的窗口。如有必要,会激活窗口.不能对最小化窗口设置(成功返回真,失败返回假)
.参数 句柄, 空白型, , 欲置焦点的窗口句柄

.局部变量 焦点窗口句柄, 整数型, , , 
.局部变量 目标线程ID, 整数型, , , 
.局部变量 上次焦点句柄, 整数型, , , 

赋值 (目标线程ID, _取窗口进程ID (句柄, 0))
_连接线程输入 (_取当前线程 (), 目标线程ID, 真)
赋值 (上次焦点句柄, _窗口置焦点 (句柄))
_连接线程输入 (_取当前线程 (), 目标线程ID, 假)
.如果真 (等于 (上次焦点句柄, _取焦点句柄 ()))
    返回 (假)
.如果真结束
返回 (真)


.子程序 鼠标钩子处理, 整数型, , 锁鼠标
.参数 code, 整数型, , 
.参数 鼠标标识, 整数型, , 
.参数 lp, 整数型, , 

.如果真 (鼠标锁定状态)
    返回 (1)
.如果真结束
.如果真 (或者 (等于 (鼠标标识, 513), 等于 (鼠标标识, 514), 等于 (鼠标标识, 515))) ' 鼠标左键按下,鼠标左键放开,鼠标左键双击
    返回 (1)
.如果真结束
.如果真 (或者 (等于 (鼠标标识, 516), 等于 (鼠标标识, 517), 等于 (鼠标标识, 518))) ' 鼠标右键按下,鼠标右键放开,鼠标右键双击
    返回 (1)
.如果真结束
返回 (下一个钩子 (鼠标锁定钩子句柄, code, 鼠标标识, lp))


.子程序 十六文本至长整数, 长整数型, , 
.参数 x, 文本型, , 要转换的十六进制文本

.局部变量 ret, 长整数型, , , 

StrToInt64ExA (相加 (“0x”, x), 1, ret)
返回 (ret)


.子程序 取位图深度, 整数型, , 
.参数 位深, 整数型, , 

.判断开始 (等于 (位深, 1))
    返回 (8)
.判断 (等于 (位深, 4))
    返回 (64)
.判断 (等于 (位深, 8))
    返回 (1024)
.默认
    返回 (0)
.判断结束


.子程序 取执行文件名, 文本型, , 
.局部变量 name, 文本型, , , 
.局部变量 offset, 整数型, , , 

赋值 (name, 文本_取空白文本 (255))
GetModuleFileNameA (0, name, 255)
赋值 (offset, 倒找文本 (name, “\”, , 假))
赋值 (name, 文本_取文本右边 (name, 相减 (文本_取文本长度 (name), offset)))
返回 (name)


.子程序 信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBox (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))


.子程序 枚举窗口句柄, 逻辑型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 待结束进程名, 文本型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程信息, 进程类型, , , 


.如果真 (不等于 (窗口句柄, 0))
    赋值 (待结束进程名, 到文本 (结束进程_进程名称))
    
    API_获得窗口关联进程ID (窗口句柄, 结束进程_进程ID)
    
    赋值 (进程快照, API_取进程快照 (15, 0))
    .如果真 (不等于 (进程快照, 0))
        赋值 (进程信息.size, 296)
        赋值 (进程句柄, API_快照中获取进程列表 (进程快照, 进程信息))
        .判断循环首 (不等于 (进程句柄, 0))
            .如果真 (不等于 (进程信息.id, 0))
                 ' 输出调试文本 (到文本 (到字节集 (进程信息.exefile)))  ' 进程名
                .如果真 (并且 (等于 (结束进程_进程ID, 进程信息.id), 等于 (到小写 (待结束进程名), 到小写 (到文本 (到字节集 (进程信息.exefile))))))
                    API_投递消息 (窗口句柄, 18, 0, 0)
                    跳出循环 ()
                .如果真结束
                
            .如果真结束
            赋值 (进程句柄, API_遍历快照中进程列表 (进程快照, 进程信息))
        .判断循环尾 ()
        API_关闭内核对象 (进程快照)
        
    .如果真结束
    
    
    返回 (真)
.如果真结束

返回 (假)


 ' 使用 ToolHelp32 库枚举进程

 ' ToolHelp32 库函数在 KERNEL32.dll 中，它们都是标准的 API 函数。但是 Windows NT 4.0 不提供这些函。
 ' ToolHelp32 库中有各种各样的函数可以用来枚举系统中的进程、线程以及获取内存和模块信息。其中枚举进程 只需用如下三个的函数：CreateToolhelp32Snapshot()、Process32First()和 Process32Next()。
 ' 使用 ToolHelp32 函数的第一步是用 CreateToolhelp32Snapshot() 函数创建系统信息“快照”。这个函数可以让你选择存储在快照中的信息类型。如果你只是对进程信息感兴趣，那么只要包含 TH32CS_SNAPPROCESS 标志即可。 CreateToolhelp32Snapshot() 函数返回一个 HANDLE，完成调用之后，必须将此 HANDLE 传给 CloseHandle()。
 ' 接下来是调用一次 Process32First 函数，从快照中获取进程列表，然后重复调用 Process32Next，直到函数返回 FALSE 为止。这样将遍历快照中进程列表。这两个函数都带两个参数，它们分别是快照句柄和一个   PROCESSENTRY32 结构。
 ' 调用完 Process32First 或 Process32Next 之后，PROCESSENTRY32 中将包含系统中某个进程的关键信息。其中进程 ID 就存储在此结构的 th32ProcessID。此 ID 可以被传给 OpenProcess() API 以获得该进程的句柄。对应的可执行文件名及其存放路径存放在 szExeFile  结构成员中。在该结构中还可以找到其它一些有用的信息。
 ' 注意：在调用 Process32First() 之前，一定要记住将 PROCESSENTRY32  结构的 dwSize 成员设置成 sizeof(PROCESSENTRY32)。


.子程序 目录选择回调, 整数型, , 
.参数 句柄, 整数型, , 
.参数 消息, 整数型, , 
.参数 ID, 整数型, , 
.参数 数据, 整数型, , 

.局部变量 文件夹, 文本型, , , 

.如果真 (等于 (消息, 1))
    发送消息 (句柄, 1126, 1, 初始文件夹)
.如果真结束
.如果真 (等于 (消息, 2))
    赋值 (文件夹, 取空白文本 (255))
    .如果真 (等于 (取文件夹信息 (ID, 文件夹), 1))
        发送消息 (句柄, 1124, 0, 文件夹)
    .如果真结束
    
.如果真结束
返回 (0)

.子程序 CopyProgressRoutine, 整数型, , 
.参数 TotalFileSize, 双精度小数型, , 
.参数 TotalBytesTransferred, 双精度小数型, , 
.参数 StreamSize, 双精度小数型, , 
.参数 StreamBytesTransferred, 双精度小数型, , 
.参数 dwStreamNumber, 空白型, , 
.参数 dwCallbackReason, 空白型, , 
.参数 hSourceFile, 空白型, , 
.参数 hDestinationFile, 空白型, , 
.参数 lpData, 空白型, , 

赋值 (_进度复制_当前进度, 到文本 (取整 (相乘 (相除 (相乘 (TotalBytesTransferred, 10000), 相乘 (TotalFileSize, 10000)), 100))))
返回 (#PROGRESS_CONTINUE)

.子程序 ReadFile, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 匿名局部变量_3170, 空白型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 

.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag)
.如果真 (不等于 (szFlag, “MissWho”))
    返回 (假)
.如果真结束
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody)
移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 (假)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取文本长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取文本长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.判断结束

 ' 读取页面数据
赋值 (hMemBody, 打开内存文件 ())
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (512))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
.循环判断尾 (不等于 (dwNumber, 0))

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)

移到文件首 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, “MissWho_OK”, szRequest, 读入字节集 (hMemBody, 取文件长度 (hMemBody)))
关闭文件 (hMemBody)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)

 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
.如果真结束
返回 (真)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber, 选择 (等于 (寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 取文本中间 (szServerName, dwNumber, 选择 (等于 (寻找文本 (szServerName, “/”, dwNumber, 假), -1), 取文本长度 (szServerName), 相减 (寻找文本 (szServerName, “/”, dwNumber, 假), dwNumber)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber, -1))
        赋值 (szServerName, 取文本左边 (szServerName, 相减 (dwNumber, 1)))
    .如果真结束
    
.如果真结束
返回 (到小写 (szServerName))

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber, 选择 (等于 (dwNumber, -1), 80, 到数值 (取文本右边 (szServerName, 相减 (取文本长度 (szServerName), dwNumber)))))
返回 (dwNumber)

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 取文本中间_, 文本型, , 获取中间文本,返回中间文本数目.
.参数 待取中间内容, 文本型, , 
.参数 左特征, 文本型, , 左边特征文本
.参数 右特征, 文本型, , 右边特征文本

.局部变量 左特征长, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 返回文本, 文本型, , , 

赋值 (左特征长, 取文本长度 (左特征))
赋值 (a, 寻找文本 (待取中间内容, 左特征, 相加 (a, 1), 假))
.如果 (大于 (a, 0))
    赋值 (b, 寻找文本 (待取中间内容, 右特征, a, 假))
    .如果真 (等于 (b, -1))
        赋值 (b, 取文本长度 (待取中间内容))
    .如果真结束
    赋值 (返回文本, 取文本中间 (待取中间内容, 相加 (a, 左特征长), 相减 (b, a, 左特征长)))
.否则
    返回 (“”)
.如果结束
返回 (返回文本)

.子程序 CreateSystemProcess, 逻辑型, , 
.参数 szProcessName, 文本型, , 

.局部变量 hProcess, 空白型, , , 
.局部变量 hToken, 空白型, , , 
.局部变量 hNewToken, 空白型, , , 
.局部变量 dwPid, 空白型, , , 
.局部变量 pOldDAcl, 整数型, , , 
.局部变量 pNewDAcl, 整数型, , , 
.局部变量 bDAcl, 整数型, , , 
.局部变量 bDefDAcl, 整数型, , , 
.局部变量 dwRet, 空白型, , , 
.局部变量 pSacl, 整数型, , , 
.局部变量 pSidOwner, 空白型, , , 
.局部变量 pSidPrimary, 空白型, , , 
.局部变量 dwAclSize, 空白型, , , 
.局部变量 dwSaclSize, 空白型, , , 
.局部变量 dwSidOwnLen, 空白型, , , 
.局部变量 dwSidPrimLen, 空白型, , , 
.局部变量 dwSDLen, 空白型, , , 
.局部变量 ea, EXPLICIT_ACCESS, , , 
.局部变量 pOrigSd, SECURITY_DESCRIPTOR, , , 
.局部变量 pNewSd, 整数型, , , 
.局部变量 si, STARTUPINFO, , , 
.局部变量 pi, PROCESS_INFORMATION, , , 
.局部变量 bRet, 逻辑型, , , 
.局部变量 memAddrHeap, 整数型, , , 
.局部变量 pDacl_new, 整数型, , , 
.局部变量 pNewDacl_new, 整数型, , , 

 ' CreateSystemProcess(LPTSTR szProcessName)
 ' {
 ' HANDLE hProcess;
 ' HANDLE hToken, hNewToken;
 ' DWORD dwPid;

 ' PACL pOldDAcl = NULL;
 ' PACL pNewDAcl = NULL;
 ' BOOL bDAcl;
 ' BOOL bDefDAcl;
 ' DWORD dwRet;

 ' PACL pSacl = NULL;
 ' PSID pSidOwner = NULL;
 ' PSID pSidPrimary = NULL;
 ' DWORD dwAclSize = 0;
 ' DWORD dwSaclSize = 0;
 ' DWORD dwSidOwnLen = 0;
 ' DWORD dwSidPrimLen = 0;

 ' DWORD dwSDLen;
 ' EXPLICIT_ACCESS ea;
 ' PSECURITY_DESCRIPTOR pOrigSd = NULL;
 ' PSECURITY_DESCRIPTOR pNewSd = NULL;

 ' STARTUPINFO si;
 ' PROCESS_INFORMATION pi;
赋值 (bRet, 真)
SetLastError (0) ' 滤掉 ERROR_MOD_NOT_FOUND 126
赋值 (dwPid, GetProcessId (“WINLOGON.EXE”))
.如果 (等于 (dwPid, 0))
    输出调试文本 (“GetProcessId() failed!\n”)
    赋值 (bRet, 假)
.否则
    赋值 (hProcess, OpenProcess (#PROCESS_QUERY_INFORMATION, 0, dwPid))
    .如果 (等于 (hProcess, 0))
        输出调试文本 (“OpenProcess() = %d\n”, GetLastError ())
        赋值 (bRet, 假)
    .否则
        .如果 (取反 (不等于 (OpenProcessToken (hProcess, 位或 (#READ_CONTROL, #WRITE_DAC), hToken), 0)))
            输出调试文本 (“OpenProcessToken() = %d\n”, GetLastError ())
            赋值 (bRet, 假)
        .否则
             ' ZeroMemory(&ea, sizeof( EXPLICIT_ACCESS));
            BuildExplicitAccessWithName (ea, “Everyone”, #TOKEN_ALL_ACCESS, #GRANT_ACCESS, 0)
            GetKernelObjectSecurity (hToken, #DACL_SECURITY_INFORMATION, pOrigSd, 0, dwSDLen)
            赋值 (dwRet, GetKernelObjectSecurity (hToken, #DACL_SECURITY_INFORMATION, pOrigSd, dwSDLen, dwSDLen))
            .如果 (等于 (dwRet, 0))
                输出调试文本 (“GetKernelObjectSecurity() = %d\n”, GetLastError ())
                赋值 (bRet, 假)
            .否则
                赋值 (dwRet, GetSecurityDescriptorDacl (pOrigSd, bDAcl, pOldDAcl, bDefDAcl))
                .如果 (等于 (dwRet, 0))
                    输出调试文本 (“GetSecurityDescriptorDacl() = %d\n”, GetLastError ())
                    赋值 (bRet, 假)
                .否则
                    赋值 (ea.TRUSTEE.ptstrName, “CURRENT_USER”)
                    赋值 (dwRet, SetEntriesInAcl (1, ea, pDacl_new, pNewDacl_new))
                    LocalFree (pNewDacl_new)
                    .如果 (不等于 (dwRet, #ERROR_SUCCESS))
                        输出调试文本 (“SetEntriesInAcl() = %d\n”, dwRet, GetLastError ())
                        赋值 (bRet, 假)
                    .否则
                        赋值 (dwRet, MakeAbsoluteSD (pOrigSd, pNewSd, dwSDLen, pOldDAcl, dwAclSize, pSacl, dwSaclSize, pSidOwner, dwSidOwnLen, pSidPrimary, dwSidPrimLen))
                        .如果真 (或者 (等于 (dwRet, 0), 等于 (GetLastError (), #ERROR_INSUFFICIENT_BUFFER)))
                             ' 输出调试文本 (“MakeAbsoluteSD”, dwRet, GetLastError ())
                            赋值 (pOldDAcl, HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, dwAclSize))
                            赋值 (pSacl, HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, dwSaclSize))
                            赋值 (pSidOwner, HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, dwSidOwnLen))
                            赋值 (pSidPrimary, HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, dwSidPrimLen))
                            赋值 (pNewSd, HeapAlloc (GetProcessHeap (), #HEAP_ZERO_MEMORY, dwSDLen))
                        .如果真结束
                        赋值 (dwRet, MakeAbsoluteSD (pOrigSd, pNewSd, dwSDLen, pOldDAcl, dwAclSize, pSacl, dwSaclSize, pSidOwner, dwSidOwnLen, pSidPrimary, dwSidPrimLen))
                        .如果 (不等于 (dwRet, 1))
                            输出调试文本 (“MakeAbsoluteSD() = %d\n”, GetLastError ())
                            赋值 (bRet, 假)
                        .否则
                            赋值 (dwRet, SetSecurityDescriptorDacl (pNewSd, bDAcl, pNewDAcl, bDefDAcl))
                            .如果 (不等于 (dwRet, 1))
                                输出调试文本 (“SetSecurityDescriptorDacl() = %d\n”, dwRet, GetLastError ())
                                赋值 (bRet, 假)
                            .否则
                                赋值 (dwRet, SetKernelObjectSecurity (hToken, #DACL_SECURITY_INFORMATION, pNewSd))
                                .如果 (不等于 (dwRet, 1))
                                    输出调试文本 (“SetKernelObjectSecurity() = %d\n”, dwRet, GetLastError ())
                                    赋值 (bRet, 假)
                                .否则
                                    赋值 (dwRet, OpenProcessToken (hProcess, #TOKEN_ALL_ACCESS, hToken))
                                    .如果 (不等于 (dwRet, 1))
                                        输出调试文本 (“OpenProcessToken() = %d\n”, GetLastError ())
                                        赋值 (bRet, 假)
                                    .否则
                                        赋值 (dwRet, DuplicateTokenEx (hToken, #TOKEN_ALL_ACCESS, 0, #SecurityImpersonation, #TokenPrimary, hNewToken))
                                        .如果 (不等于 (dwRet, 1))
                                            输出调试文本 (“DuplicateTokenEx() = %d\n”, GetLastError ())
                                            赋值 (bRet, 假)
                                        .否则
                                             ' ZeroMemory(&si, sizeof(STARTUPINFO));
                                            赋值 (si.cb, 68)
                                            ImpersonateLoggedOnUser (hNewToken)
                                            赋值 (dwRet, CreateProcessAsUser (hNewToken, szProcessName, 0, 0, 0, 0, 0, 0, 0, si, pi)) ' 关键语句以获得的用户身份运行程序
                                            .如果 (不等于 (dwRet, 1))
                                                输出调试文本 (“CreateProcessAsUser() = %d\n”, dwRet, GetLastError ())
                                                赋值 (bRet, 假)
                                            .否则
                                                WaitForSingleObject (pi.hProcess, #INFINITE) ' 等待进程退出
                                            .如果结束
                                            RevertToSelf ()
                                        .如果结束
                                        
                                    .如果结束
                                    
                                .如果结束
                                
                            .如果结束
                            
                        .如果结束
                        
                    .如果结束
                    
                .如果结束
                
            .如果结束
            
        .如果结束
        
    .如果结束
    
.如果结束


 ' .如果真 (pOrigSd)
     ' HeapFree (GetProcessHeap (), 0, pOrigSd)
.如果真结束

.如果真 (不等于 (pNewSd, 0))
    HeapFree (GetProcessHeap (), 0, pNewSd)
.如果真结束

.如果真 (不等于 (pSidPrimary, 0)) ' 释放用过的句柄和内存
    HeapFree (GetProcessHeap (), 0, pSidPrimary)
.如果真结束
.如果真 (不等于 (pSidOwner, 0))
    HeapFree (GetProcessHeap (), 0, pSidOwner)
.如果真结束
.如果真 (不等于 (pSacl, 0))
    HeapFree (GetProcessHeap (), 0, pSacl)
.如果真结束
.如果真 (不等于 (pOldDAcl, 0))
    HeapFree (GetProcessHeap (), 0, pOldDAcl)
.如果真结束
CloseHandle (hToken)
CloseHandle (hNewToken)
CloseHandle (pi.hProcess)
CloseHandle (pi.hThread)
CloseHandle (hProcess)
返回 (bRet)

.子程序 GetProcessId, 整数型, , 进程名取PID
.参数 szProcName, 文本型, , 

.局部变量 Pe, PROCESSENTRY32, , , 
.局部变量 dwPid, 整数型, , , 
.局部变量 dwRet, 整数型, , , 
.局部变量 bFound, 逻辑型, , , 
.局部变量 hSP, 整数型, , , 

赋值 (hSP, CreateToolhelp32Snapshot (#TH32CS_SNAPPROCESS, 0))
.如果真 (不等于 (hSP, 0))
    赋值 (Pe.dwsize, 296)
    赋值 (dwRet, Process32First (hSP, Pe))
    .判断循环首 (不等于 (dwRet, 0))
        .如果真 (等于 (StrCmpNI (szProcName, Pe.szExefile, lstrlen (szProcName)), 0)) ' 比较进程名
            赋值 (dwPid, Pe.th32ProcessID)
            赋值 (bFound, 真)
            跳出循环 ()
        .如果真结束
        赋值 (dwRet, Process32Next (hSP, Pe))
    .判断循环尾 ()
    CloseHandle (hSP)
.如果真结束

.如果真 (等于 (bFound, 真))
    返回 (dwPid)
.如果真结束
返回 (0)

.子程序 禁止拖放, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
.参数 句柄, 空白型, , 

.局部变量 计次, 整数型, , , 

置窗口特征 (句柄, #GWL_WNDPROC, 到整数 (原函数指针))
.计次循环首 (取数组成员数 (保存), 计次)
    .如果真 (等于 (句柄, 保存 [计次], 句柄))
        设置窗口是否接受拖放 (句柄, 0) ' 禁止拖放
        删除成员 (保存, 计次, ) ' 找到后删除
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 拖放回调, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 iMsg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.如果 (等于 (iMsg, #WM_DROPFILES))
    拖放结果 (wParam, hWnd)
    返回 (0)
.否则
    
.如果结束
返回 (执行窗口程序 (原函数指针, hWnd, iMsg, wParam, lParam))

.子程序 拖放结果, 空白型, , 
.参数 hDrop, 整数型, , 
.参数 hWnd, 空白型, , 

.局部变量 文件名子, 文本型, , , 
.局部变量 长度, 整数型, , , 文件名的长度
.局部变量 数目, 整数型, , , 拖放的文件个数
.局部变量 计次变量, 整数型, , , 
.局部变量 匿名局部变量_2222, 空白型, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 找到指针, 子程序指针, , , 

.计次循环首 (取数组成员数 (保存), 计次)
    .如果真 (等于 (hWnd, 保存 [计次], 句柄))
        赋值 (找到指针, 保存 [计次], 指针)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (到整数 (找到指针), 0))
    返回 ()
.如果真结束

赋值 (文件名子, 取空白文本 (#MAX_PATH))
赋值 (数目, 取被拖放文件数 (hDrop, -1, 文件名子, #MAX_PATH))
.变量循环首 (0, 相减 (数目, 1), 1, 计次变量)
    赋值 (长度, 取被拖放文件数 (hDrop, 计次变量, 文件名子, #MAX_PATH))
    赋值 (路径, 文件目录 (文件名子))
    赋值 (文件名, 取文件 (文件名子))
    回调显示 (找到指针, 路径, 文件名, 长度, 数目)
.变量循环尾 ()
结束拖放 (hDrop)

.子程序 取文件, 文本型, , 例: 取文件名("C:\WINDOWS\NOTEPAD.EXE") 结果:notepad.exe
.参数 名称, 文本型, , 

返回 (取文本右边 (名称, 相减 (取文本长度 (名称), 倒找文本 (名称, “\”, , 假))))

.子程序 字符交换, 字节集, , ansi-usc2专用
.参数 字节集, 字节集, , 

.局部变量 i, 空白型, , , 
.局部变量 len, 空白型, , , 
.局部变量 ret, 字节集, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
赋值 (ret, 字节集_取空白字节集 (len))
.变量循环首 (1, len, 2, i)
    赋值 (ret [i], 字节集 [相加 (i, 1)])
    赋值 (ret [相加 (i, 1)], 字节集 [i])
.变量循环尾 ()
返回 (ret)


.子程序 输出字节集, 文本型, , ansi-usc2专用
.参数 原文, 字节集, , 

.局部变量 原文长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 整数型, , , 
.局部变量 新码表, 字节型, , "256,2", 
.局部变量 临时字节, 字节型, , , 
.局部变量 码表, 字节集, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 (“”)
.如果真结束
赋值 (码表, 字节集_文本到字节集 (“0123456789ABCDEF”))
.变量循环首 (0, 255, 1, i)
    赋值 (新码表 [相加 (i, 1)] [1], 码表 [相加 (右移 (i, 4), 1)])
    赋值 (新码表 [相加 (i, 1)] [2], 码表 [相加 (位与 (i, 15), 1)])
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相乘 (原文长度, 2)))
赋值 (j, 1)
.变量循环首 (1, 原文长度, 1, i)
    赋值 (临时字节, 原文 [i])
    赋值 (结果 [j], 新码表 [相加 (临时字节, 1)] [1])
    赋值 (结果 [相加 (j, 1)], 新码表 [相加 (临时字节, 1)] [2])
    赋值 (j, 相加 (j, 2))
.变量循环尾 ()
返回 (文本_字节集到文本 (结果))



.子程序 转到字节集, 字节集, , ansi-usc2专用
.参数 原文, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 空白型, , , 
.局部变量 新码表, 字节型, , "70,70", 
.局部变量 码表, 字节集, , , 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, 字节集_文本到字节集 (“0123456789ABCDEF”))
.变量循环首 (0, 15, 1, i)
    .变量循环首 (0, 15, 1, j)
        赋值 (新码表 [码表] [相加 (i, 1)] [码表] [相加 (j, 1)], 相加 (左移 (i, 4), j))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相除 (长度, 2)))
赋值 (j, 1)
.变量循环首 (1, 长度, 2, i)
    赋值 (结果 [j], 新码表 [原文] [i] [原文] [相加 (i, 1)])
    赋值 (j, 相加 (j, 1))
.变量循环尾 ()
返回 (结果)



.子程序 哈希, 文本型, , 
.参数 x, 字节集, , 
.参数 种类, 整数型, , 
.参数 长度, 整数型, , 

.局部变量 hCryptProv, 整数型, , , 
.局部变量 hKey, 空白型, , , 
.局部变量 hHash, 空白型, , , 
.局部变量 pbBuffer, 字节集, , , 
.局部变量 cbHash, 空白型, , , 
.局部变量 rgbHash, 字节集, , , 
.局部变量 rgbDigits, 字节集, , , 
.局部变量 szMD5, 字节集, , , 
.局部变量 b, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 len, 空白型, , , 

.如果 (等于 (API_CryptAcquireContext (hCryptProv, “”, “”, 1, -268435456), 0))
    .如果真 (等于 (API_CryptAcquireContext (hCryptProv, “”, “”, 1, 0), 0))
        返回 (“”)
    .如果真结束
    
.否则
    .如果 (等于 (API_CryptCreateHash (hCryptProv, 种类, hKey, 0, hHash), 0))
        API_CryptReleaseContext (hCryptProv, 0)
        返回 (“”)
        
    .否则
        赋值 (pbBuffer, x)
        赋值 (len, 字节集_取字节集长度 (x))
        .如果 (等于 (API_CryptHashData (hHash, pbBuffer, len, 0), 0))
            API_CryptDestroyHash (hHash)
            API_CryptReleaseContext (hCryptProv, 0)
            返回 (“”)
            
        .否则
            赋值 (rgbHash, 字节集_取空白字节集 (长度))
            赋值 (cbHash, 长度)
            .如果 (等于 (API_CryptGetHashParam (hHash, 2, rgbHash, cbHash, 0), 0))
                API_CryptDestroyHash (hHash)
                API_CryptReleaseContext (hCryptProv, 0)
                返回 (“”)
                
            .否则
                赋值 (rgbDigits, 字节集_文本到字节集 (“0123456789ABCDEF”))
                赋值 (szMD5, 字节集_取空白字节集 (相乘 (长度, 2)))
                .变量循环首 (0, 相减 (cbHash, 1), 1, i)
                    赋值 (b, rgbHash [相加 (i, 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 1)], rgbDigits [相加 (右移 (b, 4), 1)])
                    赋值 (szMD5 [相加 (相乘 (i, 2), 2)], rgbDigits [相加 (位与 (b, 15), 1)])
                .变量循环尾 ()
                API_CryptDestroyHash (hHash)
                API_CryptReleaseContext (hCryptProv, 0)
                
            .如果结束
            
        .如果结束
        
    .如果结束
    
.如果结束
返回 (文本_字节集到文本 (szMD5))


.子程序 文件目录, 文本型, , 例: 取文件路径("C:\WINDOWS\NOTEPAD.EXE") 结果:"C:\WINDOWS\"
.参数 名称, 文本型, , 

返回 (取文本左边 (名称, 相减 (取文本长度 (名称), 取文本长度 (取文件 (名称)))))

.子程序 激活按钮, 逻辑型, , 
.参数 句柄, 整数型, , 

.如果真 (等于 (是否活动窗口 (句柄), 0))
    激活窗口 (句柄, 真)
.如果真结束
返回 (真)

.子程序 取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))


.子程序 取指针_字节型, 整数型, , 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))


.子程序 取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))


.子程序 取指针_整数型, 整数型, , 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 取指针_子程序指针, 整数型, , 
.参数 x, 子程序指针, 参考, 

返回 (lstrcpyn_子程序子针 (x, x, 0))


.子程序 取指针_长整数型, 整数型, , 
.参数 x, 长整数型, 参考, 

返回 (lstrcpyn_长整数型 (x, x, 0))


.子程序 取指针_双精度小数型, 整数型, , 
.参数 x, 双精度小数型, 参考, 

返回 (lstrcpyn_双精型 (x, x, 0))


.子程序 系统_动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (动态调用子程序_API (#动态调用代码, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))


.子程序 字节集_文本到字节集, 字节集, , 
.参数 文本, 文本型, , 

返回 (指针到字节集 (取指针_文本型 (文本), 文本_取文本长度 (文本)))


.子程序 文本_取文本长度, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrlen (文本))


.子程序 字节集_取字节集左边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 取指针_字节集 (字节集))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取字节集右边, 字节集, , 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 相减 (相加 (取指针_字节集 (字节集), len), 欲取出字节的数目))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 字节集_取字节集中间, 字节集, , 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.判断 (大于 (起始取出位置, len))
    返回 ({  })
.默认
    
.判断结束
.如果真 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出字节的数目, 起始取出位置), 1), len))
    赋值 (欲取出字节的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (address, 相减 (相加 (取指针_字节集 (字节集), 起始取出位置), 1))
返回 (指针到字节集 (address, 欲取出字节的数目))



.子程序 字节集_分割字节集, 整数型, , 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递

.局部变量 temp, 字节集, , , 
.局部变量 位置列表, 整数型, , "0", 
.局部变量 找到位置个数, 整数型, , , 
.局部变量 临时分割表, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 len_x, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (返回的字节集数组)
.如果真 (等于 (待分割字节集, {  }))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的字节集))
    赋值 (用作分割的字节集, { 0 })
.如果真结束
赋值 (找到位置个数, 查找子字节集 (待分割字节集, 用作分割的字节集, 位置列表))
.如果真 (等于 (找到位置个数, 0))
    返回 (0)
.如果真结束
赋值 (len_x, 字节集_取字节集长度 (待分割字节集))
赋值 (len_y, 字节集_取字节集长度 (用作分割的字节集))
.计次循环首 (找到位置个数, i)
    .如果真 (等于 (位置列表 [i], 1))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (i, 1))
        加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 1, 相减 (位置列表 [i], 1)))
        到循环尾 ()
    .如果真结束
    加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 相加 (位置列表 [相减 (i, 1)], len_y), 相减 (位置列表 [i], 相加 (位置列表 [相减 (i, 1)], len_y))))
.计次循环尾 ()
.如果真 (并且 (大于 (找到位置个数, 0), 小于或等于 (相加 (位置列表 [找到位置个数], len_y), len_x)))
    加入成员 (临时分割表, 字节集_取字节集中间 (待分割字节集, 相加 (位置列表 [找到位置个数], len_y), 相加 (相减 (len_x, 相加 (位置列表 [找到位置个数], len_y)), 1)))
.如果真结束
.如果真 (并且 (小于 (要返回的子字节集数目, 取数组成员数 (临时分割表)), 大于 (要返回的子字节集数目, 0)))
    .计次循环首 (要返回的子字节集数目, i)
        加入成员 (返回的字节集数组, 临时分割表 [i])
    .计次循环尾 ()
    返回 (要返回的子字节集数目)
.如果真结束
 ' 复制数组 (返回的字节集数组, 临时分割表)
赋值 (返回的字节集数组, 临时分割表)
返回 (取数组成员数 (返回的字节集数组))

.子程序 查找子字节集, 整数型, , 分割字节集时用
.参数 x, 字节集, , 
.参数 y, 字节集, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 字节集_取字节集长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 寻找字节集 (x, y, j))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 字节集_取字节集长度, 整数型, , 
.参数 字节集, 字节集, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
赋值 (address, 取指针_字节集 (字节集))
RtlMoveMemory_整数 (ret, 相减 (address, 4), 4)
返回 (ret)


.子程序 数值_取十六进制文本, 文本型, , 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 文本_取空白文本 (8))
返回 (“”)
 ' ///////置入代码
 ' push edi
 ' mov eax,dword[ebp+8]
 ' mov edi,dword[ebp-4]
 ' xor ecx,ecx
 ' mov cl ,byte 8
 ' aaa:
 ' push eax
 ' and al,0xf
 ' cmp al,byte 9
 ' ja bbb
 ' add al, 0x30
 ' jmp short ccc
 ' bbb:
 ' add al,55
 ' ccc:
 ' mov byte [edi+ecx-1], al
 ' pop eax
 ' shr eax,4
 ' loop aaa
 ' mov eax,edi
 ' pop edi
 ' leave
 ' retn 4


.子程序 文本_到小写, 文本型, ,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharLower (aaa))


.子程序 字节集_取空白字节集, 字节集, , 支持斩月，但速度不是最快，不过简单，哈～～
.参数 len, 整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)


.子程序 文本_字节集到文本, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 ret, 文本型, , , 
.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (字节集, { 0 }))
返回 (指针到文本 (取指针_字节集 (temp)))

.子程序 文本_取文本中间, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集中间 (temp, 起始取出位置, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_取空白文本, 文本型, , 支持斩月
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
FillMemory (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)


.子程序 文本_取文本右边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集右边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 数值_合并短整数, 短整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 255), 左移 (用作合并的整数2, 8)))


.子程序 数值_合并整数, 整数型, , 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 65535), 左移 (用作合并的整数2, 16)))


.子程序 文本_取文本左边, 文本型, , 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集左边 (temp, 欲取出字符的数目))
返回 (文本_字节集到文本 (ret))


.子程序 文本_删首尾空, 文本型, , 
.参数 文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
赋值 (temp, 到全角 (aaa))
赋值 (temp1, 到全角 (temp))
StrTrim (temp1, “ ”)
返回 (temp1)


.类模块 系统操作, , , 

.程序集变量 lidOldIdle, 双精度小数型, , , 
.程序集变量 liOldSystem, 双精度小数型, , , 
.子程序 取内存信息, 空白型, , 
.参数 内存类型, 内存类型, 参考, 

GlobalMemoryStatus (内存类型)

.子程序 取特殊目录, 文本型, , 取特定的目录(返回所要取的指定目录名 无效返回空)
.参数 欲获取目录类型, 整数型, 可空, 0我的桌面 1临时目录 5我的文档 6我的收藏夹 7我的启动 11我的开始菜单 20系统字体 36Windows安装目录 37系统目录  [99更多]

.局部变量 路径, 文本型, , , 
.局部变量 标示结构, 项目标识符列表_, , , 
.局部变量 目录类型, 整数型, , , 

.如果真 (等于 (欲获取目录类型, 99))
    输出调试文本 (“0我的桌面 2我的程序 5我的文档 6我的收藏夹 7我的启动 8我最近的文档 9我的发送到 11我的开始菜单 13我的音乐 14我的视频 16我的桌面 20系统字体 22开始菜单组 23程序组 24启动组 25桌面 31收藏夹 32我的浏览器临时目录 33我的Cookies 34我的历史记录 36Windows安装目录 37系统目录 38文件安装目录 39我的图片 40用户目录 41系统目录 46文档 47管理工具 48我的管理工具 53音乐 54图片 55视频”)
.如果真结束
.如果 (等于 (欲获取目录类型, 1))
    赋值 (目录类型, 34)
.否则
    赋值 (目录类型, 欲获取目录类型)
.如果结束
获取特别文件夹位置_ (0, 目录类型, 标示结构)
赋值 (路径, 取空白文本 (255))
从列表id取路径_ (标示结构.结构大小, 路径)
.如果真 (等于 (路径, “”))
    返回 (“”)
.如果真结束
.如果真 (等于 (欲获取目录类型, 1))
    赋值 (路径, 子文本替换 (路径, “History”, “Temp”, , , 真))
.如果真结束
返回 (相加 (路径, “\”))

.子程序 取IE版本, 文本型, ,  获得IE的版本
.参数 内部版本号, 文本型, 可空, 获以的内部版本号

.局部变量 变量, 浏览器, , , 

赋值 (变量.cbSize, 20) ' IEVerInfo
_取浏览器 (变量)
赋值 (内部版本号, 到文本 (变量.dwBuildNumber))
返回 (相加 (到文本 (变量.dwMajorVersion), “.”, 到文本 (变量.dwMinorVersion)))


.子程序 取计算机名, 文本型, , 获取计算机名
.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取空白文本 (50))
.如果真 (不等于 (_取计算机名 (返回文本, 取文本长度 (返回文本)), 0))
    返回 (返回文本)
.如果真结束
返回 (“”)

.子程序 取当前用户名, 文本型, , 获取当前系统的用户名
.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取空白文本 (50))
.如果真 (不等于 (_取用户名 (返回文本, 取文本长度 (返回文本)), 0))
    返回 (返回文本)
.如果真结束
返回 (“”)

.子程序 取硬件信息, 文本型, , 取出计算机硬件信息及参数。
.参数 类型, 整数型, 可空, 参数值可以为以下常量：1.#计算机名；2.#主板；3.#CPUID；4.#硬盘；5.#硬盘序列号；6.#声卡；7.#显卡；8.#BIOS；9.#内存；10.#MAC；11.#光驱；12.#操作系统；13.#高速缓存；14.系统插槽。为空为1.#计算机名

.局部变量 VBScript, 对象, , , 
.局部变量 参数, 文本型, , "0", 文本型数组，可在后添加

赋值 (参数, { “计算机名”, “主板”, “CPUID”, “硬盘”, “硬盘序列号”, “声卡”, “显卡”, “BIOS”, “内存”, “MAC”, “光驱”, “操作系统”, “高速缓存”, “系统插槽” })
.判断开始 (是否为空 (类型))
    赋值 (类型, 1)
.默认
    
.判断结束

VBScript.创建 (“ScriptControl”, )
VBScript.写属性 (“Language”, “VBScript”)
VBScript.数值方法 (“ExecuteStatement”, #GetTrait) ' //API内容，常量中
处理事件 ()
返回 (删首尾空 (VBScript.通用方法 (“Run”, “GetTrait”, 参数 [类型]).取文本 ()))

.子程序 取当前IP, 整数型, , 返回IP数
.参数 欲装载的数组, 文本型, 数组, 取出来的IP
.参数 过滤本地地址, 逻辑型, 可空, 过滤127.0.0.1

.局部变量 Ret, 整数型, , , 
.局部变量 Listing, MIB_IPAddrTable, , , 

清除数组 (欲装载的数组)
GetIpAddrTable (Listing, Ret, 1) ' 查询所需内存大小
.如果真 (小于 (Ret, 0)) ' 查询失败返回
    返回 (0)
.如果真结束
GetIpAddrTable (Listing, Ret, 0) ' 取列表
重定义数组 (Listing.mIPInfo, 真, Listing.dEntrys) ' 重定义为IP总数量
.变量循环首 (相减 (Listing.dEntrys, 选择 (过滤本地地址, 1, 0)), 1, -1, Ret)
    加入成员 (欲装载的数组, 编码.数字IP到文本 (Listing.mIPInfo [Ret], dwAddr))
     ' 输出调试文本 (整数IP到文本 (Listing.mIPInfo [Ret].dwAddr) ＋ “ 子网掩码:” ＋ 整数IP到文本 (Listing.mIPInfo [Ret].dwMask))
.变量循环尾 ()
返回 (相减 (Listing.dEntrys, 选择 (过滤本地地址, 1, 0)))

.子程序 取分辨率, 空白型, , 获取屏幕分辨率(无返回值)
.参数 色深, 短整数型, 参考 可空, 
.参数 屏幕宽度, 短整数型, 参考 可空, 
.参数 屏幕高度, 短整数型, 参考 可空, 
.参数 屏幕刷新率, 短整数型, 参考 可空, 

.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1])
赋值 (色深, DEVMODE [53])
赋值 (屏幕宽度, DEVMODE [55])
赋值 (屏幕高度, DEVMODE [57])
赋值 (屏幕刷新率, DEVMODE [61])


.子程序 创建时钟, 整数型, , 返回成功创建时钟的标志
.参数 窗口句柄, 整数型, 可空, 为空则为系统级定时器(通常为空)
.参数 时钟周期, 整数型, , 毫秒级单位 1秒=1000毫秒
.参数 定时器事件处理, 子程序指针, , 定时器触发事件

.局部变量 定时器标志, 整数型, 静态, , 

返回 (_创建定时器 (窗口句柄, 相加 (定时器标志, 1), 时钟周期, 定时器事件处理))


.子程序 销毁时钟, 整数型, , 销毁已经创建的时钟
.参数 窗口句柄, 整数型, 可空, 创建定时器时指定的句柄
.参数 标志, 整数型, , 创建定时器时所返回的标志

返回 (_销毁定时器 (窗口句柄, 标志))


.子程序 键盘锁定, 空白型, , 锁定所有键盘按键(锁定后,键盘无法操作!)
.参数 状态, 逻辑型, 可空, 真:锁全键盘(可空为假)假:锁定功能键与Win键Esc键F4键Tab键Print键Soroll键Pause键

赋值 (键盘锁定钩子句柄, 安装钩子_ (13, &键盘钩子处理, _取模块句柄 (0), 0))
赋值 (键盘锁定状态, 状态)


.子程序 键盘解锁, 空白型, , 键盘解锁(键盘锁定后,用来恢复键盘的使用)
卸载钩子_ (键盘锁定钩子句柄)


.子程序 鼠标锁定, 空白型, , 锁定鼠标键(锁定后,鼠标键无效)
.参数 状态, 逻辑型, 可空, 真:完全锁定鼠标 (可空为假) 假:锁定鼠标左右键

赋值 (鼠标锁定钩子句柄, 安装钩子_ (14, &鼠标钩子处理, _取模块句柄 (0), 0)) ' 载入鼠标钩子
赋值 (鼠标锁定状态, 状态)

.子程序 鼠标解锁, 空白型, , 鼠标键解锁(锁定鼠标键锁定后,用来恢复鼠标的使用)
卸载钩子_ (鼠标锁定钩子句柄)

.子程序 鼠标限制范围, 空白型, , 限制鼠标的活动范围(无返回值)
.参数 临时左边, 整数型, 可空, 可空为0
.参数 临时顶边, 整数型, 可空, 可空为0
.参数 临时宽度, 整数型, 可空, 可空为屏幕宽度
.参数 临时高度, 整数型, 可空, 可空为屏幕高度

.局部变量 临时范围, 矩形类型, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 

取分辨率 (宽, 高)
.如果真 (等于 (临时宽度, 0))
    赋值 (临时宽度, 宽)
.如果真结束
.如果真 (等于 (临时高度, 0))
    赋值 (临时高度, 高)
.如果真结束
赋值 (临时范围.左边, 临时左边)
赋值 (临时范围.顶边, 临时顶边)
赋值 (临时范围.右边, 临时宽度)
赋值 (临时范围.底边, 临时高度)
_限制鼠标 (临时范围)


.子程序 禁止重复运行, 空白型, , 禁止程序重复运行,还原已经运行的程序窗口 | 此功能应加在 __启动窗口_创建完毕 子程序下
.参数 临时句柄, 整数型, 可空, 再次运行_欲还原的窗口的句柄(可空则不还原已经运行的此程序窗口)
.参数 项名, 文本型, 可空, 如果有多个程序用到禁止重复运行功能,建意给每个程序定个不同的项名.任意文本

.局部变量 注册句柄, 整数型, , , 

.如果真 (不等于 (打开事件同步对象 (2031619, 假, 相加 (“F.Api模块”, 项名)), 0))
    赋值 (注册句柄, 取数值注册项 (3, 项名, ))
    .如果真 (窗口.句柄是否有效 (临时句柄))
        OpenIcon (注册句柄) ' 还原窗口
    .如果真结束
    结束 ()
.如果真结束
创建事件同步对象 (0, 假, 假, 相加 (“F.Api模块”, 项名))
写注册项 (3, 项名, 临时句柄)


.子程序 置分辨率, 空白型, , 设置屏幕分辨率(无返回值)
.参数 色深, 短整数型, 可空, 新的色深 可空:不改变原先设定
.参数 屏幕宽度, 短整数型, 可空, 新的屏幕宽度 可空:不改变原先设定
.参数 屏幕高度, 短整数型, 可空, 新的屏幕高度 可空:不改变原先设定
.参数 屏幕刷新率, 短整数型, 可空, 新的屏幕刷新率 可空:不改变原先设定

.局部变量 DEVMODE, 短整数型, , "61", 

EnumDisplaySettings (0, -1, DEVMODE [1]) ' 取
.如果真 (等于 (色深, 0))
    赋值 (色深, DEVMODE [53])
.如果真结束
.如果真 (等于 (屏幕宽度, 0))
    赋值 (屏幕宽度, DEVMODE [55])
.如果真结束
.如果真 (等于 (屏幕高度, 0))
    赋值 (屏幕高度, DEVMODE [57])
.如果真结束
.如果真 (等于 (屏幕刷新率, 0))
    赋值 (屏幕刷新率, DEVMODE [61])
.如果真结束
EnumDisplaySettings (0, 0, DEVMODE [1])
赋值 (DEVMODE [22], 92) ' 设置分辨率标志
赋值 (DEVMODE [53], 色深) ' 色深，取值：8,16,24,32
赋值 (DEVMODE [55], 屏幕宽度)
赋值 (DEVMODE [57], 屏幕高度)
赋值 (DEVMODE [61], 屏幕刷新率) ' 一般为60，75，85，100
ChangeDisplaySettings (DEVMODE [1], 4)


.子程序 创建程序快捷方式, 逻辑型, , 创建程序快捷方式 (成功返回真,失败返回假)
.参数 lnk名称, 文本型, , 快捷方式保存全路径文件名
.参数 目标, 文本型, , 指向的文件全路径文件名
.参数 参数文本, 文本型, 可空, 执行文件的参数
.参数 图标文件, 文本型, 可空, 图标文件的路径  可空:为空时用目标的第一个图标
.参数 运行方式, 整数型, 可空, 1,常规方式，3,最大化，7,最小化
.参数 备注, 文本型, 可空, 快方式的备注信息
.参数 快捷键, 文本型, 可空, 启动快捷方式的快捷键  如“Ctrl+Alt+Y”

.局部变量 工作目录, 文本型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 a, 对象, , , 
.局部变量 b, 对象, , , 
.局部变量 计次, 整数型, , , 

.如果真 (等于 (寻找文本 (lnk名称, “.lnk”, , 真), -1))
    赋值 (lnk名称, 相加 (lnk名称, “.lnk”))
.如果真结束
.如果真 (文件是否存在 (lnk名称))
    删除文件 (lnk名称)
.如果真结束
赋值 (临时文本, 分割文本 (目标, “\”, ))
.如果真 (小于 (取数组下标 (临时文本, ), 2))
    返回 (假)
.如果真结束
.计次循环首 (相减 (取数组下标 (临时文本, ), 1), 计次)
    赋值 (工作目录, 相加 (工作目录, 临时文本 [计次], “\”))
.计次循环尾 ()
.判断开始 (a.创建 (“WshShell”, “wshom.ocx”))
    赋值 (a, a.对象型方法 (“CreateShortcut”, lnk名称))
    .如果真 (a.是否为空 ())
        返回 (假)
    .如果真结束
    .判断开始 (a.写属性 (“TargetPath”, 目标))
        a.写属性 (“WorkingDirectory”, 工作目录)
        a.写属性 (“IconLocation”, 选择 (是否为空 (图标文件), 相加 (目标, “,0”), 图标文件))
        a.写属性 (“WindowStyle”, 运行方式)
        a.写属性 (“Description”, 备注)
        a.写属性 (“Arguments”, 参数文本)
        a.写属性 (“Hotkey”, 快捷键)
        赋值 (a, a.对象型方法 (“Save”, ))
        返回 (真)
    .默认
        
    .判断结束
    
.默认
    
.判断结束
返回 (假)

.子程序 取快捷方式指向, 文本型, , 获取指定快捷方式指向的文件路径
.参数 lnk名称, 文本型, , 快捷方式文件名全路径文件名

.局部变量 局部_快捷方式对象, 对象, , , 

.如果真 (等于 (寻找文本 (lnk名称, “.lnk”, , 真), -1))
    赋值 (lnk名称, 相加 (lnk名称, “.lnk”))
.如果真结束
.如果真 (局部_快捷方式对象.创建 (“WshShell”, “wshom.ocx”))
    赋值 (局部_快捷方式对象, 局部_快捷方式对象.对象型方法 (“CreateShortcut”, lnk名称))
    .如果真 (局部_快捷方式对象.是否为空 ())
        返回 (“”)
    .如果真结束
    返回 (局部_快捷方式对象.读文本属性 (“TargetPath”, ))
.如果真结束
返回 (“”)

.子程序 取进程EProcess, 长整数型, , 0为失败
.参数 pid, 整数型, , 

.局部变量 ret, 空白型, , , 
.局部变量 信息块, 字节集, , , 
.局部变量 retlen, 空白型, , , 
.局部变量 temp, SYSTEM_HANDLE_INFORMATION, , , 
.局部变量 信息块指针偏移, 空白型, , , 
.局部变量 number, 空白型, , , 
.局部变量 结果, 长整数型, , , 

赋值 (retlen, 1)
.循环判断首 ()
    赋值 (信息块, 取空白字节集 (retlen))
    赋值 (ret, ZwQuerySystemInformation (#system_handle_infomation, 信息块, retlen, 0))
    .如果 (等于 (ret, #STATUS_INFO_LENGTH_MISMATCH))
        赋值 (retlen, 相乘 (retlen, 2))
        赋值 (信息块, 取空白字节集 (retlen))
    .否则
        跳出循环 ()
    .如果结束
    
.循环判断尾 (等于 (ret, #STATUS_INFO_LENGTH_MISMATCH))

赋值 (信息块指针偏移, 取指针_字节集 (信息块, 信息块, 0))
RtlMoveMemory3 (number, 信息块指针偏移, 4)
赋值 (信息块指针偏移, 相加 (信息块指针偏移, 4))
.计次循环首 (number, )
    RtlMoveMemory2 (temp, 信息块指针偏移, 16)
    .如果真 (并且 (等于 (pid, temp.ProcessId), 等于 (temp.ObjectTypeNumber, 5)))
        返回 (十六文本至长整数 (取十六进制文本 (temp.Object)))
    .如果真结束
    赋值 (信息块指针偏移, 相加 (信息块指针偏移, 16))
.计次循环尾 ()
返回 (0)


.子程序 执行Cmd_回显, 空白型, , 可以显示CMD执行过程
.参数 命令行, 文本型, , 
.参数 内容, 编辑框, , 这里的参数 必须是一个编辑框,例如 编辑框1 后面不要附带 .内容
.参数 状态监控, 逻辑型, 可空, 98下部分程序不能自动销毁管道，会导致陷入无限等待

.局部变量 安全属性, 安全属性, , , 
.局部变量 进程信息, CMD回显_进程信息, , , 
.局部变量 启动信息, 启动信息, , , 
.局部变量 缓存, 字节集, , , 
.局部变量 输出, 整数型, , , 
.局部变量 输入, 整数型, , , 
.局部变量 实际尺寸, 整数型, , , 
.局部变量 状态码, 整数型, , , 
.局部变量 进程结束, 逻辑型, , , 

赋值 (内容.内容, “”)
赋值 (安全属性.长度, 12)
赋值 (安全属性.权限, 0)
赋值 (安全属性.句柄, -1)
.如果真 (等于 (创建管道 (输出, 输入, 安全属性, 0), 0))
    返回 ()
.如果真结束
赋值 (启动信息.cb, 68)
赋值 (启动信息.dwFlags, 257)
赋值 (启动信息.wShowWindow, 0)
赋值 (启动信息.hStdOutput, 输入)
赋值 (启动信息.hStdError, 输入)
.如果真 (等于 (创建进程 (0, 命令行, 安全属性, 安全属性, -1, 0, 0, 0, 启动信息, 进程信息), 0))
    赋值 (内容.内容, “创建进程失败”)
    返回 ()
.如果真结束
关闭句柄 (输入)
 ' 使用状态检测并不能确保不陷入无限等待，且有可能导致返回信息不完整，建议以线程超时与进程状态结合使用。
.如果 (状态监控)
    .判断循环首 (真)
        获取进程状态 (进程信息.进程号, 状态码)
        输出调试文本 (到文本 (状态码))
        .如果 (等于 (状态码, 259))
            赋值 (缓存, 取空白字节集 (1024))
            读文件 (输出, 缓存, 1023, 实际尺寸, 0)
            内容.加入文本 (到文本 (取字节集左边 (缓存, 实际尺寸)))
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        
    .判断循环尾 ()
.否则
    .判断循环首 (真)
        赋值 (缓存, 取空白字节集 (1024))
        .如果 (不等于 (读文件 (输出, 缓存, 1023, 实际尺寸, 0), 0))
            内容.加入文本 (到文本 (取字节集左边 (缓存, 实际尺寸)))
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        
    .判断循环尾 ()
.如果结束
关闭句柄 (进程信息.线程号)
关闭句柄 (进程信息.进程号)
关闭句柄 (输出)


.子程序 取扩展名打开程序, 文本型, , 
.参数 文件路径, 文本型, , 

.局部变量 缓冲区, 文本型, , , 
.局部变量 目录, 文本型, , , 
.局部变量 文件名, 文本型, , , 

赋值 (文件名, 磁盘.取路径内文件一 (文件路径))
赋值 (目录, 磁盘.取路径内目录二 (文件路径))
赋值 (缓冲区, 取空白文本 (256))
FindExecutable (文件名, 目录, 缓冲区)
返回 (删首尾空 (缓冲区))


.子程序 取CPU频率, 小数型, , 取的频率为 M 兆
.局部变量 TimerLo, 整数型, , , 
.局部变量 TimerHi, 整数型, , , 
.局部变量 PriorityClass, 整数型, , , 
.局部变量 Priority, 整数型, , , 

赋值 (TimerLo, 0)
赋值 (TimerHi, 0)
赋值 (PriorityClass, GetPriorityClass (#GetCurrentProcess)) ' 保存当前进程优先级
赋值 (Priority, GetThreadPriority (#GetCurrentThread)) ' 保存当前线程优先级
SetPriorityClass (#GetCurrentProcess, #REALTIME_PRIORITY_CLASS) ' 设置进程优先级
SetThreadPriority (#GetCurrentThread, #THREAD_PRIORITY_TIME_CRITICAL) ' 设置线程优先级
延时 (10)
置入代码 ({ 83, 15, 49, 137, 69, 252, 137, 85, 248 })
延时 (100)
置入代码 ({ 15, 49, 43, 69, 252, 43, 85, 248, 137, 69, 252, 137, 85, 248, 90 })
SetThreadPriority (#GetCurrentThread, Priority) ' 还原进程优先级
SetPriorityClass (#GetCurrentProcess, PriorityClass) ' 还原进程优先级
返回 (相除 (TimerLo, 相乘 (1000, 100)))

.子程序 启动线程, 整数型, , 
.参数 子程序指针, 子程序指针, , 
.参数 整数参数, 整数型, 可空, 

.局部变量 hThread, 整数型, , , 

赋值 (hThread, CreateThread (0, 0, 子程序指针, 整数参数, 0, 0))
CloseHandle (hThread)
返回 (hThread)

.子程序 设置全局热键, 空白型, , 软件销毁时一定要释放热键!
.参数 程序句柄, 整数型, , 
.参数 程序指针, 子程序指针, , 
.参数 功能键, 整数型, , 只能使用 模块内的键值 例如: #Api_Ctrl #Api_Alt #Api_Shift
.参数 配合键, 整数型, , 可使用系统键
.参数 热键序号, 整数型, , 默认写1

赋值 (_全局热键_preWinProc, API_GetWindowLong (程序句柄, #GWL_WNDPROC))
API_SetWindowLong (程序句柄, #GWL_WNDPROC, 到整数 (程序指针))
API_RegisterHotKey (程序句柄, 热键序号, 功能键, 配合键)

.子程序 释放全局热键, 空白型, , 
.参数 程序句柄, 整数型, , 
.参数 虚拟键, 整数型, , 

API_SetWindowLong (程序句柄, #GWL_WNDPROC, _全局热键_preWinProc)
API_UnregisterHotKey (程序句柄, 虚拟键)

.子程序 取CPU使用率, 整数型, , 
.局部变量 spi, SYSTEM_PERFORMANCE_INFORMATION, , , 
.局部变量 sti, SYSTEM_TIME_INFORMATION, , , 
.局部变量 curIdle, 双精度小数型, , , 
.局部变量 curSystem, 双精度小数型, , , 
.局部变量 lngResult, 双精度小数型, , , 

赋值 (lngResult, NtQuerySystemInformation_sti (#SYSTEM_TIME_INFORMATION, sti, 32, 0))
.如果真 (不等于 (lngResult, 0))
    返回 (-1)
.如果真结束

赋值 (lngResult, NtQuerySystemInformation_spi (#SYSTEM_PERFORMANCE_INFORMATION, spi, 312, 0))
.如果真 (不等于 (lngResult, 0))
    返回 (-1)
.如果真结束

赋值 (curIdle, 相减 (spi.liIdleTime, lidOldIdle))
赋值 (curSystem, 相减 (sti.liKeSystemTime, liOldSystem))

.如果真 (不等于 (curSystem, 0))
    赋值 (lngResult, 相除 (curIdle, curSystem))
.如果真结束

赋值 (lngResult, 相减 (100, 相除 (相乘 (lngResult, 100), 到数值 (读环境变量 (“NUMBER_OF_PROCESSORS”)))))

赋值 (lidOldIdle, spi.liIdleTime)
赋值 (liOldSystem, sti.liKeSystemTime)
返回 (lngResult)
 ' ''''''
 ' 如果怕源码丢掉的话,那么开源吧,我们为你一起保管 ^&^
 ' ''''''

.子程序 调用全局热键, 整数型, , 此函数针对已经调用了设置全局热键后使用!
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

返回 (API_CallWindowProc (_全局热键_preWinProc, hwnd, msg, wParam, lParam))

.子程序 导入注册项, 逻辑型, , 根目录我已经做了常量,在模块内,已经公开了!
.参数 根目录, 整数型, , 
.参数 注册项名, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 long, 整数型, , , 
.局部变量 phkResult, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, TOKEN_PRIVILEGES, , , 
.局部变量 tkpNewButIgnored, TOKEN_PRIVILEGES, , , 

.如果真 (等于 (文件是否存在 (文件名), 假))
    返回 (假)
.如果真结束

赋值 (long, RegOpenKeyExA (根目录, 注册项名, 0, 1, phkResult))
.如果真 (不等于 (long, 0))
    RegCreateKeyA (根目录, 注册项名, phkResult)
.如果真结束

OpenProcessToken (GetCurrentProcess (), 40, hdlTokenHandle)
LookupPrivilegeValue (“”, “SeRestorePrivilege”, tmpLuid)

赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
AdjustTokenPrivileges (hdlTokenHandle, 0, tkp, 24, tkpNewButIgnored, 0)

赋值 (long, RegRestoreKey (phkResult, 文件名, 0))
RegCloseKey (phkResult)
返回 (选择 (不等于 (long, 0), 假, 真))


.子程序 导出注册项, 逻辑型, , 根目录我已经做了常量,在模块内,已经公开了!
.参数 根目录, 整数型, , 
.参数 注册项名, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 long, 整数型, , , 
.局部变量 phkResult, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, TOKEN_PRIVILEGES, , , 
.局部变量 tkpNewButIgnored, TOKEN_PRIVILEGES, , , 

.如果真 (文件是否存在 (文件名))
    返回 (假)
.如果真结束

赋值 (long, RegOpenKeyExA (根目录, 注册项名, 0, 1, phkResult))
.如果真 (不等于 (long, 0))
    返回 (假)
.如果真结束

OpenProcessToken (GetCurrentProcess (), 40, hdlTokenHandle)
LookupPrivilegeValue (“”, “SeBackupPrivilege”, tmpLuid)

赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
AdjustTokenPrivileges (hdlTokenHandle, 0, tkp, 24, tkpNewButIgnored, 0)

赋值 (long, RegSaveKeyA (phkResult, 文件名, 0))
RegCloseKey (phkResult)
返回 (选择 (不等于 (long, 0), 假, 真))


.子程序 取现行整体时间, 文本型, , 取出来的时间是 整体时间 例如 2008-08-08 11:59:59 
.参数 日期格式, 文本型, 可空, 可以设置成 %d-%d-%d 等格式显示,默认为中文格式 %d年%d月%d日 显示.
.参数 时间格式, 文本型, 可空, 可以设置成 %d:%d:%d 等格式显示,默认为中文格式 %d时%d分%d秒 显示.

.局部变量 Time, SYSTEMTIME, , , 
.局部变量 日期, 文本型, , , 
.局部变量 时间, 文本型, , , 
.局部变量 年, 文本型, , , 
.局部变量 月, 文本型, , , 
.局部变量 日, 文本型, , , 
.局部变量 时, 文本型, , , 
.局部变量 分, 文本型, , , 
.局部变量 秒, 文本型, , , 

GetLocalTime (Time)
赋值 (年, 到文本 (Time.wYear))
赋值 (月, 到文本 (Time.wMonth))
.如果真 (小于 (取文本长度 (月), 2))
    赋值 (月, 相加 (“0”, 月))
.如果真结束
赋值 (日, 到文本 (Time.wDay))
.如果真 (小于 (取文本长度 (日), 2))
    赋值 (日, 相加 (“0”, 日))
.如果真结束
.如果 (不等于 (日期格式, “”))
    赋值 (日期, 相加 (年, 日期格式, 月, 日期格式, 日, “ ”))
.否则
    赋值 (日期, 相加 (年, “年”, 月, “月”, 日, “日”))
.如果结束
赋值 (时, 到文本 (Time.wHour))
.如果真 (小于 (取文本长度 (时), 2))
    赋值 (时, 相加 (“0”, 时))
.如果真结束
赋值 (分, 到文本 (Time.wMinute))
.如果真 (小于 (取文本长度 (分), 2))
    赋值 (分, 相加 (“0”, 分))
.如果真结束
赋值 (秒, 到文本 (Time.wSecond))
.如果真 (小于 (取文本长度 (秒), 2))
    赋值 (秒, 相加 (“0”, 秒))
.如果真结束
.如果 (不等于 (时间格式, “”))
    赋值 (时间, 相加 (时, 时间格式, 分, 时间格式, 秒))
.否则
    赋值 (时间, 相加 (时, “时”, 分, “分”, 秒, “秒”))
.如果结束
返回 (相加 (日期, 时间))

.子程序 取现行单个时间, 文本型, , 取出来的时间按照自己设置， 支持参数 年 月 日 时 分 秒
.参数 欲取时间, 文本型, , 支持参数 年 月 日 时 分 秒

.局部变量 Time, SYSTEMTIME, , , 
.局部变量 日期, 文本型, , , 
.局部变量 时间, 文本型, , , 
.局部变量 年, 文本型, , , 
.局部变量 月, 文本型, , , 
.局部变量 日, 文本型, , , 
.局部变量 时, 文本型, , , 
.局部变量 分, 文本型, , , 
.局部变量 秒, 文本型, , , 

GetLocalTime (Time)
赋值 (年, 到文本 (Time.wYear))
赋值 (月, 到文本 (Time.wMonth))
赋值 (日, 到文本 (Time.wDay))
赋值 (时, 到文本 (Time.wHour))
赋值 (分, 到文本 (Time.wMinute))
赋值 (秒, 到文本 (Time.wSecond))
.判断开始 (等于 (欲取时间, “年”))
    返回 (年)
.判断 (等于 (欲取时间, “月”))
    返回 (月)
.判断 (等于 (欲取时间, “日”))
    返回 (日)
.判断 (等于 (欲取时间, “时”))
    返回 (时)
.判断 (等于 (欲取时间, “分”))
    返回 (分)
.判断 (等于 (欲取时间, “秒”))
    返回 (秒)
.默认
    返回 (秒)
.判断结束


.子程序 强行结束进程, 空白型, , 某些普通进程无法结束,此 函数 对平时无法结束的进程!
.参数 进程名称, 文本型, , 

赋值 (结束进程_进程名称, 进程名称)
API_枚举父窗口 (&枚举窗口句柄, 0)

.子程序 特殊延时, 空白型, , 计算为毫秒
.参数 毫秒, 整数型, , 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒

.局部变量 hTimer, 整数型, , , 
.局部变量 int64, LARGE_INTEGER, , , 

赋值 (int64.QuadPart, 相乘 (-10, 1000, 毫秒))
赋值 (hTimer, CreateWaitableTimerA (0, 假, 0))
SetWaitableTimer (hTimer, int64, 0, 0, 0, 假)
.判断循环首 (不等于 (MsgWaitForMultipleObjects (1, hTimer, 假, #INFINITE, #QS_ALLINPUT), #WAIT_OBJECT_0))
    处理事件 ()
.判断循环尾 ()
CloseHandle (hTimer)

.子程序 选择目录, 文本型, , 
.参数 标题, 文本型, 可空, 选择框标题 - 可空
.参数 初始目录, 文本型, 可空, 初始目录 - 可空

.局部变量 浏览信息, 浏览信息, , , 
.局部变量 文件夹, 文本型, , , 

赋值 (文件夹, 取空白文本 (512))
赋值 (初始文件夹, 初始目录)
赋值 (浏览信息.浏览参数, 64) ' 浏览参数在下面的缩略程序块
赋值 (浏览信息.对话框标题, 标题)
赋值 (浏览信息.回调函数, 到整数 (&目录选择回调))
取文件夹信息 (浏览文件夹函数 (浏览信息), 文件夹)
赋值 (初始文件夹, 文件夹)
返回 (文件夹)
未知函数_1203 () ' *** 缩略程序块 ***
 ' 其中，ulFlags(浏览参数) 可设置为以下几种值：需转换为10进制
 ' 注!本人不能保证常量的正确和完整性,请大家自行查阅.
 ' Public Const BIF_BROWSEFORCOMPUTER = &H1000             注释：允许浏览计算机
 ' Public Const BIF_BROWSEFORPRINTER = &H2000              注释：允许浏览打印机文件夹
 ' Public Const BIF_BROWSEINCLUDEFILES = &H4000            注释：允许同时浏览文件（需IE4）
 ' Public Const BIF_DONTGOBELOWDOMAIN = &H2                注释：强制用户停留在网上邻居中
 ' Public Const BIF_EDITBOX = &H10                         注释：可在输入框中直接输入文件夹名（需IE4）
 ' Public Const BIF_RETURNFSANCESTORS = &H8                注释：返回文件系统祖先？
 ' Public Const BIF_RETURNONLYFSDIRS = &H1                 注释：仅允许浏览文件系统
 ' Public Const BIF_STATUSTEXT = &H4                       注释：显示状态栏
 ' Public Const BIF_NEWDIALOGSTYLE = &H40                        注释：使用新界面（仅支持Win2000、WinME）
 ' Public Const BIF_VALIDATE = &H20                        注释：若输入一个非法文件夹名，就返回

.子程序 隐藏鼠标, 空白型, , 隐藏鼠标
.参数 是否隐藏, 逻辑型, , 

Api_隐藏鼠标 (是否隐藏)

.子程序 限制键盘, 空白型, , 
.参数 是否限制, 整数型, , 1为限制 0为不限制

Api_限制键盘 (97, 是否限制, “1”, 0)


.子程序 移动鼠标, 空白型, , 
.参数 水平坐标_X, 整数型, , 
.参数 垂直坐标_Y, 整数型, , 

Api_鼠标坐标设定 (水平坐标_X, 垂直坐标_Y)


.子程序 限制鼠标与键盘, 空白型, , 限制鼠标与键盘操作
.参数 限制类型, 整数型, , 1为开始限制,0为解除限制!

Api_限制鼠标 (限制类型)


.子程序 检测最前, 整数型, , 检测当前屏幕,最前端窗口的句柄!
返回 (Api_检测最前 ())

.子程序 拖放文件, 空白型, , 
.参数 句柄, 空白型, , 
.参数 操作, 逻辑型, 可空, 
.参数 子程序指针, 子程序指针, 可空, 得到结果的子程序

.局部变量 是否找到, 逻辑型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 收到信息, 保存句柄和指针, , , 

.如果 (等于 (操作, 真))
    .计次循环首 (取数组成员数 (保存), 计次)
        .如果真 (等于 (句柄, 保存 [计次], 句柄))
            赋值 (是否找到, 真)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (是否找到)
        返回 ()
    .如果真结束
    赋值 (收到信息.句柄, 句柄)
    赋值 (收到信息.指针, 子程序指针)
    加入成员 (保存, 收到信息)
    设置窗口是否接受拖放 (句柄, 1)
    赋值 (原函数指针, 置窗口特征 (句柄, #GWL_WNDPROC, 到整数 (&拖放回调)))
    
.否则
    禁止拖放 (句柄)
.如果结束


.子程序 读环境变量, 文本型, , 
.参数 环境变量名称, 文本型, , 

.局部变量 size, 整数型, , , 
.局部变量 name, 文本型, , , 

赋值 (size, 2048)
赋值 (name, 文本_取空白文本 (2048))
ExpandEnvironmentStringsA (环境变量名称, name, 2048)
.如果真 (等于 (name, 环境变量名称))
    返回 (“”)
.如果真结束
返回 (name)


.子程序 写环境变量, 逻辑型, , 
.参数 环境变量名称, 文本型, , 
.参数 欲写入内容, 文本型, , 

返回 (SetEnvironmentVariableA (环境变量名称, 欲写入内容))


.子程序 取运行目录, 文本型, , 
.局部变量 path, 文本型, , , 

赋值 (path, 文本_取空白文本 (255))
GetCurrentDirectoryA (255, path)
返回 (path)


.子程序 取执行文件名, 文本型, , 
.局部变量 name, 文本型, , , 
.局部变量 offset, 整数型, , , 

赋值 (name, 文本_取空白文本 (255))
GetModuleFileNameA (0, name, 255)
赋值 (offset, 倒找文本 (name, “\”, , 假))
赋值 (name, 文本_取文本右边 (name, 相减 (文本_取文本长度 (name), offset)))
返回 (name)


.子程序 取命令行, 文本型, , 
返回 (GetCommandLineA ())


.子程序 超级延时, 空白型, , 
.参数 时长, 整数型, , ms

Sleep (时长)


.子程序 动态调用子程序, 整数型, , 
.参数 子程序地址, 整数型, , 
.参数 参数, 整数型, 数组, 
.参数 是否为C调用方式, 逻辑型, 可空, 默认为标准调用方式

返回 (动态调用子程序_API (#动态调用代码, 子程序地址, 参数, 取数组成员数 (参数), 是否为C调用方式))


.子程序 信息框, 整数型, , 
.参数 提示信息, 文本型, , 
.参数 按钮, 整数型, 可空, 
.参数 窗口标题, 文本型, 可空, 

.如果真 (是否为空 (窗口标题))
    赋值 (窗口标题, “信息：”)
.如果真结束
返回 (相减 (MessageBox (GetActiveWindow (), 提示信息, 窗口标题, 按钮), 1))


.子程序 读配置项, 文本型, , 读取指定配置文件中指定项目的文本内容。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, , 参数值指定欲读入配置项在其节中的名称。
.参数 默认文本, 文本型, 可空, 可以被省略。如果指定配置项不存在，将返回此默认文本。如果指定配置项不存在且本参数被省略，将返回空文本。

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 文本_取空白文本 (255))
读配置文本 (节名称, 配置项名称, 默认文本, 返回文本, 255, 配置文件名)
返回 (文本_删首尾空 (返回文本))

.子程序 写配置项, 逻辑型, , 将指定文本内容写入指定配置项中或者删除指定的配置项或节，如果指定配置文件不存在，将会自动创建。成功返回真，失败返回假。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 节名称, 文本型, , 包含欲写入配置项所处节的名称。
.参数 配置项名称, 文本型, 可空, 可以被省略。参数值指定欲写入配置项在其节中的名称。如果参数值被省略，则删除指定节及其下的所有配置项。
.参数 欲写入值, 文本型, 可空, 可以被省略。参数值指定欲写入到指定配置项中的文本。如果参数值被省略，则删除所指定配置项。

.如果真 (是否为空 (配置项名称))
    .如果 (不等于 (删配置文件小节 (节名称, 0, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (是否为空 (欲写入值))
    .如果 (不等于 (删配置文件项 (节名称, 配置项名称, 0, 配置文件名), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果真结束
.如果真 (不等于 (寻找文本 (配置项名称, “=”, , 假), -1))
    返回 (假)
.如果真结束
.如果真 (等于 (寻找文本 (欲写入值, “=”, , 假), 1))
    返回 (假)
.如果真结束
.如果 (不等于 (创建或修改配置文件 (节名称, 配置项名称, 欲写入值, 配置文件名), 0))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 取配置节名, 整数型, , 返回配置文件中所有已有节名的数量。
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀。
.参数 返回的配置节名数组, 文本型, 数组, 返回指定配置文件中所有已有节名的文本数组。

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 

清除数组 (返回的配置节名数组)
赋值 (temp, 字节集_取空白字节集 (32767))
赋值 (len, API_GetPrivateProfileSectionNames (temp, 32767, 配置文件名))
赋值 (temp, 字节集_取字节集左边 (temp, len))
赋值 (count, 字节集_分割字节集 (temp, , , temp1))
.计次循环首 (count, i)
    加入成员 (返回的配置节名数组, 文本_字节集到文本 (temp1 [i]))
.计次循环尾 ()
返回 (count)


.子程序 取配置项名, 整数型, , 
.参数 配置文件名, 文本型, , 
.参数 节名称, 文本型, , 
.参数 返回的配置项名数组, 文本型, 数组, 

.局部变量 temp, 字节集, , , 
.局部变量 temp1, 字节集, , "0", 
.局部变量 len, 空白型, , , 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 xxxx, 文本型, , , 

清除数组 (返回的配置项名数组)
赋值 (temp, 字节集_取空白字节集 (32767))
赋值 (len, API_GetPrivateProfileSection (节名称, temp, 32767, 配置文件名))
赋值 (temp, 字节集_取字节集左边 (temp, len))
赋值 (count, 字节集_分割字节集 (temp, , , temp1))
.计次循环首 (count, i)
    赋值 (xxxx, 文本_字节集到文本 (temp1 [i]))
    赋值 (xxxx, 取文本左边 (xxxx, 相减 (寻找文本 (xxxx, “=”, , 假), 1)))
    加入成员 (返回的配置项名数组, xxxx)
.计次循环尾 ()
返回 (count)


.子程序 取短路径, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 cb, 文本型, , , 
.局部变量 len, 整数型, , , 

赋值 (cb, 文本_取空白文本 (255))
赋值 (len, GetShortPathNameA (文件名, cb, 255))
返回 (文本_取文本左边 (cb, len))

.子程序 运行程序一, 逻辑型, , 以 SYSTEM 身份运行程序
.参数 程序路径, 文本型, , 

返回 (CreateSystemProcess (程序路径))


.子程序 运行程序二, 逻辑型, , 执行文件夹或文件或命令
.参数 欲操作文件名, 文本型, , 欲操作(文件)或(文件夹的名称)或(网址)
.参数 命令行, 文本型, 可空, 执行文件的命令行,没有则设为空
.参数 窗口方式, 整数型, 可空, 可空为0:普通激活方式  1 隐藏窗口 2 最小化窗口

.判断开始 (等于 (窗口方式, 1))
    赋值 (窗口方式, 0)
.判断 (等于 (窗口方式, 2))
    赋值 (窗口方式, 7)
.默认
    赋值 (窗口方式, 1)
.判断结束
.如果 (等于 (_执行 (0, “open”, 欲操作文件名, 命令行, “”, 窗口方式), 2))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 关联后缀, 空白型, , 关联指定后缀名到指定文件 (打开该后缀名文件,该后缀名文件路径将作为参数传递给指定文件)
.参数 程序路径, 文本型, 可空, 关联到程序的路径 可空:取此执行文件的路径
.参数 后缀, 文本型, , 欲关联的后缀名,多个后缀用|分开 (如: asp|htm|html)
.参数 ICO图标路径, 文本型, 可空, 被关联文件的图标 可空为执行文件(程序)图标
.参数 文件类型, 文本型, 可空, 关联文件的说明 被关联文件属性中的文件类型
.参数 关联名, 文本型, 可空, 可空为后缀

.局部变量 所有后缀, 文本型, , "0", 
.局部变量 a, 整数型, , , 

.如果真 (等于 (程序路径, “”))
    赋值 (程序路径, 相加 (取运行目录 (), “\”, 取执行文件名 ()))
.如果真结束
.如果真 (等于 (ICO图标路径, “”))
    赋值 (ICO图标路径, 程序路径)
.如果真结束
.如果真 (等于 (关联名, “”))
    赋值 (关联名, 后缀)
.如果真结束
写注册项 (1, 相加 (关联名, “\”), 文件类型) ' 关联文件说明!
写注册项 (1, 相加 (关联名, “\EditFlags”), 2) ' 别的关联文件也有,估计不能少.
写注册项 (1, 相加 (关联名, “\Shell\Open\Command\”), 相加 (#引号, 程序路径, #引号, “ ”, #引号, “%1”, #引号))
 ' 以关联后缀文件的路径作为执行文件(程序)的命令行
写注册项 (1, 相加 (关联名, “\DefaultIcon\”), 相加 (ICO图标路径, “,0”))
赋值 (所有后缀, 分割文本 (后缀, “|”, ))
.计次循环首 (取数组成员数 (所有后缀), a)
    写注册项 (1, 相加 (“.”, 所有后缀 [a], “\”), 关联名) ' 关联后缀到htxt中
.计次循环尾 ()


.子程序 后缀是否被关联, 整数型, , 判断指定后缀名是否被关联(未关联返回-1 关联文件不存在返回0 已经关联返回1)
.参数 后缀, 文本型, , Exe

.局部变量 路径, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 

.如果真 (等于 (注册项是否存在 (1, 相加 (“.”, 后缀, “\”)), 假))
    返回 (-1)
.如果真结束
赋值 (路径, 取文本注册项 (1, 相加 (取文本注册项 (1, 相加 (“.”, 后缀, “\”), ), “\Shell\Open\Command\”), ))
赋值 (a, 寻找文本 (路径, #引号, , 假))
.如果 (等于 (a, -1))
    赋值 (a, 寻找文本 (路径, “ ”, , 假))
    .如果真 (不等于 (a, -1))
        赋值 (路径, 取文本左边 (路径, 相减 (a, 1)))
    .如果真结束
    
.否则
    赋值 (b, 寻找文本 (路径, #引号, 相加 (a, 1), 假))
    赋值 (路径, 取文本中间 (路径, 相加 (a, 1), 相减 (b, a, 1)))
.如果结束
.如果真 (等于 (文件是否存在 (路径), 假))
    返回 (0)
.如果真结束
返回 (1)




.子程序 系统重启对话框, 空白型, , 
.参数 SystemChangeRestart, 空白型, , 

赋值 (SystemChangeRestart, 4)
SHRestartSystemMB (窗口.取当前窗口句柄 (), 0, SystemChangeRestart)


.子程序 系统运行对话框, 空白型, , 
SHRunDialog (窗口.取当前窗口句柄 (), 0, 0, 0, 0, 0)

.子程序 文件属性对话框, 空白型, , 
.参数 通用对话框, 通用对话框, , 

.局部变量 SEI, SHELLEXECUTEINFO, , , 

.如果真 (通用对话框.打开 ())
    赋值 (SEI.cbSize, 60)
    赋值 (SEI.fMask, 1100)
    赋值 (SEI.hwnd, 窗口.取当前窗口句柄 ())
    赋值 (SEI.lpVerb, “properties”)
    赋值 (SEI.lpFile, 通用对话框.文件名)
    赋值 (SEI.lpParameters, “”)
    赋值 (SEI.lpDirectory, “”)
    赋值 (SEI.nShow, 0)
    赋值 (SEI.hInstApp, 0)
    赋值 (SEI.lpIDList, 0)
    ShellExecuteEX (SEI)
.如果真结束


.子程序 网络映射对话框, 空白型, , 
WNetConnectionDialog (窗口.取当前窗口句柄 (), 1)

.子程序 系统关机对话框, 空白型, , 
SHShutDownDialog (0)

.子程序 IE_属性对话框, 空白型, , 
LaunchInternetControlPanel (窗口.取当前窗口句柄 ())

.子程序 IE_收藏对话框, 空白型, , 
.局部变量 Path, 文本型, , , 

赋值 (Path, 取空白文本 (260))
SHGetSpecialFolderPath (窗口.取当前窗口句柄 (), Path, 6, 0)
DoOrganizeFavDlg (窗口.取当前窗口句柄 (), Path)

.子程序 IE_连接对话框, 空白型, , 
LaunchConnectionDialog (窗口.取当前窗口句柄 ())

.子程序 IE_证书对话框, 空白型, , 
LaunchSiteCertDialog (窗口.取当前窗口句柄 ())

.子程序 IE_字体对话框, 空白型, , 
OpenFontsDialog (窗口.取当前窗口句柄 (), 0)

.子程序 IE_取收藏夹路径, 文本型, , 
.局部变量 Path, 文本型, , , 

赋值 (Path, 文本.取空白文本 (260))
SHGetSpecialFolderPath (窗口.取当前窗口句柄 (), Path, 6, 0)
返回 (Path)


.子程序 取磁盘序号, 整数型, , 取得指定磁盘的序列号(成功返回磁盘的序列号,失败返回0,如果是读卡器或光驱或软驱等没有插入卡或光盘或软盘将会失败)
.参数 盘符, 文本型, , 欲取序列号的磁盘盘符 (如: F:)
.参数 卷标, 文本型, 参考 可空, 用于存放卷名(卷标)的变量
.参数 系统名称, 文本型, 参考 可空, 用于存放文件系统名称的变量 (如FAT,NTFS以及其他)

.局部变量 返回序列号, 整数型, , , 

赋值 (卷标, 取空白文本 (255))
赋值 (系统名称, 取空白文本 (255))
.如果真 (不等于 (GetVolumeInformation (相加 (盘符, “\”), 卷标, 255, 返回序列号, 255, 0, 系统名称, 255), 0))
    返回 (返回序列号)
.如果真结束
返回 (0)

.子程序 取CPU序号, 文本型, , 获取CPU序列号
.局部变量 VBScript, 对象, , , 
.局部变量 CPU号, 文本型, 静态, , 

.如果真 (不等于 (CPU号, “”))
    返回 (CPU号)
.如果真结束
VBScript.创建 (“ScriptControl”, )
VBScript.写属性 (“Language”, “VBScript”)
VBScript.数值方法 (“ExecuteStatement”, #系统_Cpu常量)
赋值 (CPU号, VBScript.通用方法 (“Run”, “Getcpuid”, ).取文本 ())
返回 (CPU号)

.子程序 取操作系统类别_汇编, 整数型, , 返回当前操作系统的版本类别。返回值为以下值之一：0、未知； 1、Win95； 2、Win98； 3、WinME； 4、WinNT； 5、Win2000； 6、WinXP； 7、Win2003； 8、Vista 9.win7
置入代码 ({ 83, 51, 192, 100, 139, 29, 24, 0, 0, 0, 100, 139, 13, 48, 0, 0, 0, 133, 201, 121, 32, 185, 0, 0, 83, 0, 57, 75, 88, 117, 4, 176, 1, 235, 92, 57, 75, 84, 117, 4, 176, 2, 235, 83, 57, 75, 124, 117, 78, 176, 3, 235, 74, 139, 153, 168, 0, 0, 0, 139, 137, 164, 0, 0, 0, 131, 249, 4, 119, 4, 176, 4, 235, 53, 131, 249, 5, 117, 27, 131, 251, 0, 117, 4, 176, 5, 235, 39, 131, 251, 1, 117, 4, 176, 6, 235, 30, 131, 251, 2, 117, 4, 176, 7, 235, 21, 131, 249, 6, 117, 7, 131, 251, 0, 117, 4, 176, 8, 235, 7, 131, 251, 1, 117, 2, 176, 9, 91, 139, 229, 93, 195 })

 ' 置入代码 ({ 83, 51, 192, 100, 139, 29, 24, 0, 0, 0, 100, 139, 13, 48, 0, 0, 0, 133, 201, 121, 32, 185, 0, 0, 83, 0, 57, 75, 88, 117, 4, 176, 1, 235, 83, 57, 75, 84, 117, 4, 176, 2, 235, 74, 57, 75, 124, 117, 69, 176, 3, 235, 65, 139, 153, 168, 0, 0, 0, 139, 137, 164,
 ' 0, 0, 0, 131, 249, 4, 119, 4, 176, 4, 235, 44, 131, 249, 5, 117, 27, 131, 251, 0, 117, 4, 176, 5, 235, 30, 131, 251, 1, 117, 4, 176, 6, 235, 21, 131, 251, 2, 117, 4, 176, 7, 235, 12, 131, 249, 6, 117, 7, 131, 251, 0, 117, 2, 176, 8, 91, 139, 229, 93, 195 })
返回 (0)

.类模块 模拟操作, , , 

.子程序 模拟按键组合键, 空白型, 公开, 向指定窗口句柄的窗口中发送组合按键的消息!
.参数 窗口句柄, 整数型, , 接收消息的窗口句柄
.参数 键代码, 整数型, , 按键的键代码
.参数 功能键码1, 整数型, , 功能键的键代码
.参数 功能键码2, 整数型, 可空, 功能键的键代码(可选)
.参数 功能键码3, 整数型, 可空, 功能键的键代码(可选)

.如果真 (不等于 (功能键码3, 0))
    _投递消息 (窗口句柄, 260, 功能键码3, 0) ' 按下
.如果真结束
.如果真 (不等于 (功能键码2, 0))
    _投递消息 (窗口句柄, 260, 功能键码2, 0) ' 按下
.如果真结束
_投递消息 (窗口句柄, 260, 功能键码1, 0) ' 按下
_投递消息 (窗口句柄, 260, 键代码, 0) ' 按下
.如果真 (不等于 (功能键码3, 0))
    _投递消息 (窗口句柄, 257, 功能键码3, 0) ' 放开
.如果真结束
.如果真 (不等于 (功能键码2, 0))
    _投递消息 (窗口句柄, 257, 功能键码2, 0) ' 放开
.如果真结束
_投递消息 (窗口句柄, 257, 功能键码1, 0) ' 放开
_投递消息 (窗口句柄, 257, 键代码, 0) ' 放开

.子程序 模拟按键, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 消息类型, 整数型, 可空, 256 = 按下 257 = 放开 更多类型,请查阅系统类型大全!
.参数 发送内容, 整数型, , 使用普通键代码 例如 #F键
.参数 附加消息, 整数型, 可空, 

.如果真 (等于 (消息类型, 0))
    赋值 (消息类型, 256)
.如果真结束
API_发送按键 (窗口句柄, 消息类型, 发送内容, 附加消息)


.子程序 发送内容, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 消息类型, 整数型, 可空, 
.参数 发送内容, 整数型, 可空, 
.参数 附加消息, 文本型, , 
.参数 只发一次, 逻辑型, 可空, 

.如果真 (等于 (消息类型, 0))
    赋值 (消息类型, 194)
.如果真结束
.如果真 (等于 (发送内容, 0))
    赋值 (发送内容, 1)
.如果真结束
.如果真 (等于 (只发一次, 真))
    API_发送内容 (窗口句柄, 消息类型, 0, “-1”)
.如果真结束
API_发送内容 (窗口句柄, 消息类型, 发送内容, 附加消息)
.如果真 (等于 (只发一次, 真))
    API_发送内容 (窗口句柄, 消息类型, 0, “0”)
.如果真结束


.子程序 模拟点击, 空白型, 公开, 
.参数 窗口句柄, 整数型, , 
.参数 点击类型, 整数型, 可空, 0.鼠标左键1.鼠标右键，默认为0
.参数 X坐标, 整数型, 可空, 
.参数 Y坐标, 整数型, 可空, 

.如果 (等于 (点击类型, 1))
    API_发送按键 (窗口句柄, 516, 0, 相加 (X坐标, 相乘 (Y坐标, 65536)))
    API_发送按键 (窗口句柄, 517, 1, 相加 (X坐标, 相乘 (Y坐标, 65536)))
.否则
    API_发送按键 (窗口句柄, 513, 0, 相加 (X坐标, 相乘 (Y坐标, 65536)))
    API_发送按键 (窗口句柄, 514, 1, 相加 (X坐标, 相乘 (Y坐标, 65536)))
.如果结束


.子程序 移动鼠标, 整数型, 公开, 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 

.局部变量 返回信息, 整数型, , , 

赋值 (返回信息, SetCursorPos (X, Y))
返回 (返回信息)

.子程序 模拟鼠标, 空白型, 公开, 
.参数 执行类型, 整数型, , 1为移动 2为按下 4为放开 6为按下并且放开
.参数 X, 整数型, 可空, 可以不写
.参数 Y, 整数型, 可空, 可以不写

mouse_event (执行类型, X, Y, 0, 0)
mouse_event (4, X, Y, 0, 0)

.子程序 文本全选, 空白型, 公开, 选定指定文本 必要时会自动激活窗口(无返回值)
.参数 句柄, 整数型, 可空, 文本所在处的窗口句柄   可空为当前窗口焦点处
.参数 是否全选, 逻辑型, 可空, 可空为假:取消全选  真:全选

.如果 (等于 (句柄, 0))
    赋值 (句柄, 取焦点句柄 ())
.否则
    窗口置焦点 (句柄)
.如果结束
.如果 (是否全选)
    _投递消息 (句柄, 177, 0, -1) ' 全选
.否则
    _投递消息 (句柄, 177, 0, 0) ' 取消全选
.如果结束


.子程序 文本复制, 文本型, 公开, 复制指定文本 必要时会自动激活窗口
.参数 句柄, 整数型, 可空, 文本所在处的窗口句柄   可空为当前窗口焦点处

.局部变量 tStr2, 文本型, , , 
.局部变量 tStr1, 文本型, , , 

.如果 (等于 (句柄, 0))
    赋值 (句柄, 取焦点句柄 ())
.否则
    窗口置焦点 (句柄)
.如果结束
赋值 (tStr1, 取剪辑板文本 ())
置剪辑板文本 (“”)
_发送消息A (句柄, 177, 0, -1) ' 全选
_发送消息A (句柄, 769, 0, 0) ' 复制
_发送消息A (句柄, 177, 0, 0) ' 取消全选
赋值 (tStr2, 取剪辑板文本 ())
置剪辑板文本 (tStr1)
返回 (tStr2)


.子程序 文本粘贴, 空白型, 公开, 粘贴指定文本 必要时会自动激活窗口(无返回值)
.参数 句柄, 整数型, 可空, 欲粘贴文本处的窗口句柄  可空为当前窗口焦点处
.参数 文本内容, 文本型, 可空, 欲粘贴的文本内容   可空:清楚内容

.局部变量 tStr1, 文本型, , , 

.如果 (等于 (句柄, 0))
    赋值 (句柄, 取焦点句柄 ())
.否则
    窗口置焦点 (句柄)
.如果结束
赋值 (tStr1, 取剪辑板文本 ())
置剪辑板文本 (文本内容)
_投递消息 (句柄, 177, 0, -1) ' 全选
_投递消息 (句柄, 770, 0, 0) ' 置内容
置剪辑板文本 (tStr1)


.子程序 控件消息, 空白型, 公开, 向指定按钮(控件)发送按钮鼠标单击的消息(无返回值)
.参数 临时按钮句柄, 整数型, , 按钮控件的句柄
.参数 临时状态, 整数型, 可空, 可空:单击  3 #按下 4 #放开

.如果真 (等于 (临时状态, 0))
    _投递消息 (临时按钮句柄, 245, 0, 0)
.如果真结束
.如果真 (等于 (临时状态, #驱动_按下))
    _投递消息 (临时按钮句柄, 513, 0, 0)
.如果真结束
.如果真 (等于 (临时状态, #驱动_放开))
    _投递消息 (临时按钮句柄, 514, 0, 0)
.如果真结束


.子程序 普通按键, 空白型, 公开, 
.参数 键代码, 整数型, , 键代码
.参数 状态, 整数型, 可空,    0=按下   2=#放开

模拟键盘行动_ (键代码, 0, 状态, 0)
 ' 按键   标记(按下  放开)  虚拟码
 ' 通常      0     128
 ' home键区  1     129       33UP  34Down 35End 36Home 45Ins 46Del
 ' 光标区    1     129       37左  38上   39右  40下
 ' win键     1     129       91左  92右
 ' 菜单键    1     129       93
 ' print键   1     129       44
 ' 右CTRL键  1     129       163
 ' 右SHIFT键 1     129       161
 ' 右回车键  1     129       13
 ' Numlock键 1     129       144
 ' /(小键区) 1     129       111
 ' 左ALT键   32    128       164
 ' 右ALT键   33    129       165


.子程序 文本输入, 空白型, 公开, 向指定窗口句柄中窗口中后台输入文本内容,并等待输入完毕后返回,对特殊屏蔽的游戏有效!(无返回值)
.参数 句柄, 整数型, , 接收消息的窗口句柄
.参数 文本, 文本型, , 发送的文本内容
.参数 速度, 字节型, 可空, 默认为3 如出现乱码现象,请将该值设大一点

.局部变量 ub5e6utgv, 字节集, , , 
.局部变量 bhdrthbgfhd, 整数型, , , 

.如果真 (小于 (速度, 1))
    赋值 (速度, 3)
.如果真结束
赋值 (ub5e6utgv, 到字节集 (文本))
.计次循环首 (取字节集长度 (ub5e6utgv), bhdrthbgfhd)
    .如果真 (大于 (ub5e6utgv [bhdrthbgfhd], 128))
        _发送消息A (句柄, 258, ub5e6utgv [bhdrthbgfhd], 0)
    .如果真结束
    _发送消息A (句柄, 258, ub5e6utgv [bhdrthbgfhd], 0)
    .计次循环首 (速度, )
        _发送消息A (句柄, 258, 0, 0)
    .计次循环尾 ()
.计次循环尾 ()

.子程序 按下组件, 空白型, 公开, 向指定按钮(控件)发送按钮鼠标单击的消息(无返回值)
.参数 按钮句柄, 整数型, , 按钮控件的句柄
.参数 状态, 整数型, 可空, 0=单击 1=按下 2=放开

.如果真 (等于 (状态, 0))
    _投递消息 (按钮句柄, 245, 0, 0)
.如果真结束
.如果真 (等于 (状态, 1))
    _投递消息 (按钮句柄, 513, 0, 0)
.如果真结束
.如果真 (等于 (状态, 2))
    _投递消息 (按钮句柄, 514, 0, 0)
.如果真结束


.子程序 按组合键, 空白型, 公开, 执行模拟组合按键(无返回值)
.参数 键码, 整数型, , 键代码
.参数 功能键码1, 整数型, , 功能键代码
.参数 功能键码2, 整数型, 可空, 功能键代码(可选)
.参数 功能键码3, 整数型, 可空, 功能键代码(可选)

.如果真 (不等于 (功能键码3, 0))
    模拟键盘行动_ (功能键码3, 0, 0, 0)
.如果真结束
.如果真 (不等于 (功能键码2, 0))
    模拟键盘行动_ (功能键码2, 0, 0, 0)
.如果真结束
模拟键盘行动_ (功能键码1, 0, 0, 0)
模拟键盘行动_ (键码, 0, 0, 0)
系统.超级延时 (50)
.如果真 (不等于 (功能键码3, 0))
    模拟键盘行动_ (功能键码3, 0, 2, 0)
.如果真结束
.如果真 (不等于 (功能键码2, 0))
    模拟键盘行动_ (功能键码2, 0, 2, 0)
.如果真结束
模拟键盘行动_ (功能键码1, 0, 2, 0)
模拟键盘行动_ (键码, 0, 2, 0)


.类模块 窗口操作, , , 

.程序集变量 dhsbytry, 整数型, , "0", 
.子程序 枚举窗口线程, 整数型, , 枚举所有窗口线程标识符,返回窗口线程标识符数目,失败返回0
.参数 线程数组, 整数型, 可空 数组, 返回的所有窗口线程ID数组

.局部变量 临时句柄, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 上次ID, 整数型, , , 

清除数组 (线程数组)
赋值 (临时句柄, _获得句柄 (_取屏幕句柄 (), 5))
.判断循环首 (不等于 (临时句柄, 0))
    赋值 (线程ID, _取窗口进程ID (临时句柄, 0))
    文本.不重复加入数组 (线程数组, 线程ID)
    赋值 (临时句柄, _获得句柄 (临时句柄, 2))
.判断循环尾 ()
返回 (取数组成员数 (线程数组))

.子程序 取子窗口, 整数型, , 查找指定窗口的子级窗口(返回子窗口句柄)
.参数 父句柄, 整数型, 可空, 指定父窗口句柄  可空:为桌面.找顶级窗口
.参数 子类名, 文本型, 可空, 欲查找的子窗口类名
.参数 子标题, 文本型, 可空, 
.参数 起始句柄, 整数型, 可空, 从该句柄后开始查找, 可空:找第一个符合条件的

返回 (_寻找子窗口2 (父句柄, 起始句柄, 子类名, 子标题))


.子程序 启动鼠标穿透, 空白型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 临时变量, 整数型, , , 

赋值 (临时变量, GetWindowLong (窗口句柄, #GWL_EXSTYLE))
赋值 (临时变量, 位或 (临时变量, #WS_EX_TRANSPARENT))
赋值 (临时变量, 位或 (临时变量, #WS_EX_LAYERED))
SetWindowLong (窗口句柄, #GWL_EXSTYLE, 临时变量)



.子程序 取桌面句柄, 整数型, , 
返回 (GetDesktopWindow ())

.子程序 取最前窗口句柄, 整数型, , 
返回 (取前台窗口_ ())

.子程序 设置窗口关系, 整数型, , 程序使用 GetWindow 函数调用
.参数 窗口句柄, 整数型, , 
.参数 关系设置, 整数型, , 

返回 (取得窗口_ (窗口句柄, 关系设置))

.子程序 设置透明, 逻辑型, , 
.参数 窗口句柄, 整数型, , 
.参数 透明度, 整数型, , 0-255
.参数 颜色值, 整数型, , 
.参数 透明方式, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.局部变量 执行结果, 逻辑型, , , 

API_设置窗口信息 (窗口句柄, -20, 524288)
赋值 (执行结果, API_透明窗口 (窗口句柄, 颜色值, 透明度, 透明方式))
返回 (执行结果)

.子程序 设置棱角, 逻辑型, , 
.参数 窗口句柄, 整数型, , 
.参数 窗口宽度, 整数型, , 
.参数 窗口高度, 整数型, , 
.参数 图形宽度, 整数型, , 
.参数 图形高度, 整数型, , 

.局部变量 圆角矩形区域句柄, 整数型, , , 
.局部变量 Handle, 整数型, , , 
.局部变量 执行结果, 逻辑型, , , 

赋值 (Handle, 窗口句柄)
赋值 (圆角矩形区域句柄, _创建圆角矩形区域 (0, 0, 窗口宽度, 窗口高度, 图形宽度, 图形高度))
SetWindowRgn (Handle, 圆角矩形区域句柄, 真)
赋值 (执行结果, DeleteObject (圆角矩形区域句柄))
返回 (执行结果)

.子程序 取窗口组件ＩＤ, 整数型, , 
.参数 窗口句柄, 整数型, , 

返回 (取窗口控件ID (窗口句柄, -12))

.子程序 取类名, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 返回类名, 文本型, , , 

赋值 (返回类名, 取空白文本 (255))
GetClassName (窗口句柄, 返回类名, 255)
返回 (返回类名)

.子程序 取句柄一, 整数型, , 通过已运行的程序取句柄
.参数 程序名称, 文本型, , 
.参数 程序类名, 文本型, 可空, 指向包含了窗口类名的指针

返回 (取窗体句柄A (程序类名, 程序名称))

.子程序 取句柄二, 整数型, , 通过程序名称和类名取句柄
.参数 程序名称, 文本型, , 
.参数 程序类名, 整数型, 可空, 指向包含了窗口类名的指针；设为零，表示接收任何类

返回 (取窗体句柄 (程序类名, 程序名称))

.子程序 取句柄三, 整数型, , 通过进程,类名或标题关键字来取窗口句柄(返回第一个符合条件的句柄,失败返回-1)
.参数 进程名, 文本型, 可空, 欲取窗口句柄的窗口程序进程名(注意大小写)
.参数 类名, 文本型, 可空, 欲取窗口句柄的窗口类名
.参数 标题, 文本型, 可空, 欲取窗口句柄的窗口标题关键字,模糊匹配

.局部变量 窗口列表, 窗口类型, , "0", 
.局部变量 a, 整数型, , , 

.如果真 (并且 (等于 (进程名, “”), 等于 (类名, “”), 等于 (标题, “”)))
    
    返回 (-1)
.如果真结束
.如果真 (并且 (等于 (进程名, “”), 等于 (标题, “”)))
    赋值 (a, _寻找子窗口 (0, 0, 类名, 0))
    .如果 (等于 (a, 0))
        返回 (-1)
    .否则
        返回 (a)
    .如果结束
    
.如果真结束
.计次循环首 (窗口信息枚举一 (窗口列表), a)
    .如果真 (不等于 (进程名, “”))
        .如果真 (不等于 (进程名, 进程.取进程名 (窗口列表 [a], 进程ID)))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (类名, “”))
        .如果真 (不等于 (窗口列表 [a], 窗口类名, 类名))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (标题, “”))
        .如果真 (等于 (寻找文本 (窗口列表 [a], 窗口标题, 标题, , 假), -1))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    返回 (窗口列表 [a], 窗口句柄)
.计次循环尾 ()
返回 (-1)


.子程序 取句柄四, 整数型, , 通过任务关系的所有窗口与类名标题关键字来判断获取句柄(返回第一个符合条件的句柄,失败返回-1)(至少指定两个条件,以确保准确性)
.参数 进程名, 文本型, 可空, 欲取窗口句柄的窗口程序进程名(注意大小写)
.参数 类名, 文本型, 可空, 欲取窗口句柄的窗口类名
.参数 标题, 文本型, 可空, 欲取窗口句柄的窗口标题关键字,模糊匹配

.局部变量 窗口列表, 整数型, , "0", 
.局部变量 a, 整数型, , , 

.如果真 (并且 (等于 (进程名, “”), 等于 (类名, “”), 等于 (标题, “”)))
    返回 (-1)
.如果真结束
.计次循环首 (窗口枚举二 (窗口列表), a)
    .如果真 (不等于 (进程名, “”))
        .如果真 (不等于 (进程名, 进程.取进程名 (取窗口PID (窗口列表 [a]))))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (类名, “”))
        .如果真 (不等于 (取类名 (窗口列表 [a]), 类名))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (标题, “”))
        .如果真 (等于 (寻找文本 (取标题 (窗口列表 [a]), 标题, , 假), -1))
            到循环尾 ()
        .如果真结束
        
    .如果真结束
    返回 (窗口列表 [a])
.计次循环尾 ()
返回 (-1)


.子程序 取句柄五, 整数型, , 爆力穷举窗口句柄,不得以而为之.(成功返回窗口句柄,失败返回-1)
.参数 窗口标题, 文本型, 可空, 可以是窗口标题的关键字.如果重复上次获取下一个窗口请留空.

.局部变量 Name, 文本型, , , 
.局部变量 保存标题, 文本型, 静态, , 
.局部变量 i, 整数型, 静态, , 

.如果真 (大于或等于 (i, 6000000))
    赋值 (i, 0)
.如果真结束
.如果真 (不等于 (窗口标题, “”))
    赋值 (i, 0)
    赋值 (保存标题, 窗口标题)
.如果真结束
.如果真 (等于 (保存标题, “”))
    返回 (-1)
.如果真结束
赋值 (Name, 取空白文本 (255))
.判断循环首 (小于 (i, 6000000))
    赋值 (i, 相加 (i, 1))
    .如果真 (句柄是否有效 (i))
        GetWindowText (i, Name, 255)
        .如果真 (不等于 (寻找文本 (Name, 保存标题, , 假), -1))
            输出调试文本 (_取父窗口 (i))
            返回 (i)
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()
返回 (-1)


.子程序 窗口信息枚举一, 整数型, , 枚举所有可见窗口的句柄的窗口信息(返回数组数目,失败返回0)
.参数 临时窗口信息, 窗口类型, 数组, 枚举出来的窗口信息数组

_枚举窗口 (&窗口信息回调函数, 0)

赋值 (临时窗口信息, 窗口信息)
清除数组 (窗口信息)
返回 (取数组成员数 (临时窗口信息))


.子程序 窗口信息枚举二, 整数型, , 枚举所有顶级窗口的句柄的窗口信息(返回数组数目,失败返回0)
.参数 临时窗口信息, 窗口类型, 数组, 枚举出来的窗口信息数组
.参数 可见性, 逻辑型, 可空, 默认为真:所有可见窗口  假:所有窗口

.局部变量 临时句柄, 整数型, , , 
.局部变量 窗口信息, 窗口类型, , "0", 
.局部变量 临时信息, 窗口类型, , , 

赋值 (临时句柄, _获得句柄 (_取屏幕句柄 (), 5))
.如果真 (是否为空 (可见性))
    赋值 (可见性, 真)
.如果真结束
.判断循环首 (不等于 (临时句柄, 0))
    .如果真 (或者 (等于 (可见性, 假), 窗口是否可见 (临时句柄))) ' 是否为可见窗口
        赋值 (临时信息.窗口标题, 取空白文本 (256))
        赋值 (临时信息.窗口类名, 取空白文本 (256))
        GetWindowText (临时句柄, 临时信息.窗口标题, 255)
        GetClassName (临时句柄, 临时信息.窗口类名, 255)
        赋值 (临时信息.线程ID, _取窗口进程ID (临时句柄, 临时信息.进程ID))
        赋值 (临时信息.窗口句柄, 临时句柄)
        加入成员 (窗口信息, 临时信息)
    .如果真结束
    赋值 (临时句柄, _获得句柄 (临时句柄, 2))
.判断循环尾 ()
赋值 (临时窗口信息, 窗口信息)
返回 (取数组成员数 (窗口信息))


.子程序 子窗口枚举, 整数型, , 枚举指定窗口的所有子级窗口或控件句柄,支持不可见子窗口或子控件,返回句柄数目,失败返回0
.参数 父窗口句柄, 整数型, 可空, 指定父窗口句柄.如果父窗口为0,则取出所有顶级窗口(含不可见窗口)
.参数 句柄数组, 整数型, 可空 数组, 返回的所有窗口句柄数组

_枚举子窗口 (父窗口句柄, &枚举窗口过程, 0)
赋值 (句柄数组, 当前窗口列表)
清除数组 (当前窗口列表)
返回 (取数组成员数 (句柄数组))


.子程序 任务窗口枚举, 整数型, , 枚举指定窗口线程相关联的窗体句柄,返回窗口句柄数目,失败返回0
.参数 窗口句柄, 整数型, , 
.参数 句柄数组, 整数型, 可空 数组, 返回的所有窗口句柄数组

.局部变量 进程ID, 整数型, , , 

_枚举任务窗口 (_取窗口进程ID (窗口句柄, 进程ID), &枚举窗口过程, 0)
赋值 (句柄数组, 当前窗口列表)
清除数组 (当前窗口列表)
返回 (取数组成员数 (句柄数组))

.子程序 取坐标句柄, 整数型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 

返回 (取指定点处窗口或控件句柄 (X, Y))


.子程序 取鼠标坐标, 坐标类型, , 
.局部变量 返回坐标, 坐标类型, , , 

取鼠标当前点坐标 (返回坐标)
返回 (返回坐标)

.子程序 取标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 长度, 整数型, , , 
.局部变量 名字, 文本型, , , 

赋值 (长度, Api_取窗口标题长度 (窗口句柄))
.如果真 (小于或等于 (长度, 0))
    返回 (“”)
.如果真结束
赋值 (名字, 取空白文本 (长度))
Api_取窗体标题 (窗口句柄, 名字, 相加 (长度, 1))
返回 (名字)

.子程序 窗口更改名称, 空白型, , 
.参数 窗口句柄, 整数型, , 
.参数 窗口名称, 文本型, , 

Api_更改窗体名 (窗口句柄, 窗口名称)

.子程序 改变大小, 整数型, , 返回 0 表示失败! 返回 非0 的数字,表示成功!
.参数 窗口句柄, 整数型, , 欲移动窗口的句柄
.参数 左边位置, 整数型, , 窗口新的左侧位置
.参数 顶边位置, 整数型, , 窗口新的顶部位置
.参数 改变宽度, 整数型, , 窗口的新宽度
.参数 改变高度, 整数型, , 窗口的新高度
.参数 是否重画, 整数型, 可空, 如窗口此时应重画，则设为TRUE（非零）。FALSE（零）则表明应用程序会自己决定是否重画窗口;

返回 (API_改变窗口 (窗口句柄, 左边位置, 顶边位置, 改变宽度, 改变高度, 是否重画))


.子程序 窗口最前, 空白型, , 
.参数 窗口句柄, 整数型, , 

Api_总在最前 (Api_检测最前 (), -2, 0, 0, 0, 0, 3)
Api_总在最前 (窗口句柄, -1, 0, 0, 0, 0, 3)


.子程序 取消最前, 空白型, , 
.参数 窗口句柄, 整数型, , 

Api_总在最前 (窗口句柄, -2, 0, 0, 0, 0, 3)


.子程序 取窗口大小, 矩形类型, , 取得窗口大小
.参数 窗口句柄, 整数型, , 

.局部变量 窗口, 矩形类型, , , 

GetWindowRect (窗口句柄, 窗口)
返回 (窗口)


.子程序 取窗口PID, 整数型, 公开, 
.参数 窗口句柄, 整数型, , 

.局部变量 进程ID, 整数型, , , 

窗口句柄取ID (窗口句柄, 进程ID)
返回 (进程ID)


.子程序 解除禁止, 空白型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 按钮句柄, 整数型, , , 

枚举所有子窗体 (窗口句柄, &激活按钮, 按钮句柄)

.子程序 取子句柄一, 整数型, , 
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, 可空, 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
.参数 欲搜索的类名2, 整数型, 可空, 欲搜索的类名。零表示忽略;

返回 (API_寻找子窗口 (窗口句柄1, 窗口句柄2, 欲搜索的类名1, 欲搜索的类名2))

.子程序 取子句柄二, 整数型, , 
.参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
.参数 窗口句柄2, 整数型, 可空, 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
.参数 欲搜索的类名, 文本型, , 欲搜索的类名。零表示忽略
.参数 欲搜索的标题, 文本型, , 欲搜索的标题

返回 (API_寻找子窗口A (窗口句柄1, 窗口句柄2, 欲搜索的类名, 欲搜索的标题))


.子程序 取进程, 文本型, , 取指定句柄的窗口进程名
.参数 窗口句柄, 整数型, , 

.局部变量 窗口列表, 整数型, , "0", 
.局部变量 进程列表, 进程类型, , "0", 
.局部变量 循环变量, 整数型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 窗口进程ID, 整数型, , , 
.局部变量 窗口线程ID, 整数型, , , 
.局部变量 进程, 进程操作, , , 

窗口枚举一 (窗口列表)
进程.进程枚举 (进程列表)
.计次循环首 (取数组成员数 (窗口列表), 循环变量) ' 从所有窗口句柄中找到窗口进程ID与进程ID相同的
    .如果真 (等于 (窗口列表 [循环变量], 窗口句柄))
        赋值 (窗口线程ID, 取窗口PID (窗口列表 [循环变量]))
         ' 输出调试文本 (窗口进程ID)
        .计次循环首 (取数组成员数 (进程列表), 循环变量) ' 从所有进程中找到指定进程ID
            赋值 (进程ID, 进程列表 [循环变量], id)
             ' 输出调试文本 (进程ID)
            .如果真 (等于 (窗口进程ID, 进程ID))
                返回 (到文本 (进程列表 [循环变量], exefile))
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.计次循环尾 ()
返回 (“”)


.子程序 窗口枚举一, 整数型, , 枚举所有窗口,返回窗口句柄数目,失败返回0
.参数 句柄数组, 整数型, 参考 可空 数组, 返回的所有窗口句柄数组

清除数组 (当前窗口列表)
清除数组 (句柄数组)
_枚举窗口 (&枚举窗口过程, 0)
赋值 (句柄数组, 当前窗口列表)
返回 (取数组成员数 (当前窗口列表))


.子程序 窗口枚举二, 整数型, , 通过窗口任务关系来枚举所有窗口,返回窗口句柄数目,失败返回0
.参数 句柄数组, 整数型, 可空 数组, 返回的所有窗口句柄数组

.局部变量 临时句柄, 整数型, , , 

清除数组 (句柄数组)
赋值 (临时句柄, _获得句柄 (_取屏幕句柄 (), 5))
.判断循环首 (不等于 (临时句柄, 0))
    加入成员 (句柄数组, 临时句柄)
    赋值 (临时句柄, _获得句柄 (临时句柄, 2))
.判断循环尾 ()
返回 (取数组成员数 (句柄数组))


.子程序 窗口枚举三, 整数型, , 爆力穷举窗口句柄,不得以而为之.(成功返回有效窗口句柄的数目,失败返回0)
.参数 窗口句柄, 整数型, 可空 数组, 用于存放窗口句柄的数组变量

.局部变量 i, 整数型, , , 

清除数组 (窗口句柄)
.判断循环首 (小于 (i, 6000000))
    赋值 (i, 相加 (i, 1))
    .如果真 (句柄是否有效 (i))
        加入成员 (窗口句柄, i)
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (窗口句柄))


.子程序 状态控制, 整数型, , 控制窗口状态  成功:非零，失败:零
.参数 临时句柄, 整数型, , 窗口句柄
.参数 设置状态, 整数型, , 0 隐藏取消激活 1 还原激活 2 最小化激活 3 最大化激活 4 还原 6 最小化取消激活 7 最小化 9 还原激活

返回 (_控制窗口状态 (临时句柄, 设置状态))


.子程序 隐藏显示, 逻辑型, , 显示或隐藏指定句柄的窗口
.参数 窗口句柄, 空白型, 可空, 要显示/隐藏的窗口句柄(可空:则显示/隐藏当前窗口)

.如果真 (等于 (窗口句柄, 0))
    赋值 (窗口句柄, _取当前窗口 ())
.如果真结束
.如果 (等于 (_窗口是否可见 (窗口句柄), 0))
    _控制窗口状态 (窗口句柄, 9)
    返回 (真)
.否则
    _控制窗口状态 (窗口句柄, 0)
    返回 (假)
.如果结束


.子程序 窗口是否可见, 逻辑型, , 判断窗口是否可见
.参数 窗口句柄, 整数型, , 

.局部变量 是否可见, 整数型, , , 

赋值 (是否可见, _窗口是否可见 (窗口句柄))
.判断开始 (不等于 (是否可见, 0))
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取当前窗口句柄, 整数型, , 
.局部变量 窗口句柄, 整数型, , , 

赋值 (窗口句柄, _取当前窗口 ())
返回 (窗口句柄)


.子程序 窗口销毁, 空白型, , 将指定窗口销毁(无返回值)
.参数 临时句柄, 整数型, , 欲销毁窗口的句柄

API_投递消息 (临时句柄, 16, 0, 0)


.子程序 窗口移动, 空白型, , 移动指定窗口(无返回值)
.参数 临时句柄, 整数型, , 欲移动窗口的句柄
.参数 窗口新左边, 整数型, 可空, 可空:原左边不变
.参数 窗口新顶边, 整数型, 可空, 可空:原顶边不变
.参数 窗口新宽度, 整数型, 可空, 可空:原宽度不变
.参数 窗口新高度, 整数型, 可空, 可空:原高度不变

.局部变量 位置大小, 矩形类型, , , 

_窗口取外边框 (临时句柄, 位置大小)
.如果真 (是否为空 (窗口新左边))
    赋值 (窗口新左边, 位置大小.左边)
.如果真结束
.如果真 (是否为空 (窗口新顶边))
    赋值 (窗口新顶边, 位置大小.顶边)
.如果真结束
.如果真 (是否为空 (窗口新宽度))
    赋值 (窗口新宽度, 相减 (位置大小.右边, 位置大小.左边))
.如果真结束
.如果真 (是否为空 (窗口新高度))
    赋值 (窗口新高度, 相减 (位置大小.底边, 位置大小.底边))
.如果真结束
MoveWindow (临时句柄, 窗口新左边, 窗口新顶边, 窗口新宽度, 窗口新高度, 1)


.子程序 窗口化, 空白型, , 将指定窗口窗口化.通常用于游戏中
.参数 句柄, 整数型, , 欲窗口化的窗口句柄(通常有这一个参数就可以了,其它可以不设定)
.参数 新宽度, 整数型, 可空, 窗口化后的窗口宽度 可空:800
.参数 新高度, 整数型, 可空, 窗口化后的窗口高度 可空:600
.参数 窗口标题, 文本型, 可空, 窗口化后的窗口标题 可空:不修改原窗口标题(有的游戏修改标题后会自动退出)
.参数 是否带边框, 逻辑型, 可空, 可空:无边框窗口 真:带标题栏(有的游戏屏蔽了边框的修改,可通过其它方法来实现)
.参数 分辨率_宽, 整数型, 可空, 可空:不修改分辨率(有的游戏全屏时修改了其分辨率,需改回去..)
.参数 分辨率_高, 整数型, 可空, 可空:不修改分辨率

.如果真 (是否带边框)
    _设置窗口信息 (句柄, -16, 348913664)
.如果真结束
.如果真 (等于 (是否为空 (窗口标题), 假))
    Api_更改窗体名 (句柄, 窗口标题)
.如果真结束
.如果真 (是否为空 (新宽度))
    赋值 (新宽度, 800)
.如果真结束
.如果真 (是否为空 (新高度))
    赋值 (新高度, 600)
.如果真结束
MoveWindow (句柄, 0, 0, 新宽度, 新高度, 1)
.如果真 (取反 (并且 (是否为空 (分辨率_宽), 是否为空 (分辨率_高))))
    置分辨率 (分辨率_宽, 分辨率_高)
.如果真结束


.子程序 窗口最大化, 空白型, , 将指定窗口最大化(无返回值)
.参数 临时句柄, 整数型, , 欲最大化窗口的句柄

API_投递消息 (临时句柄, 274, 61488, 0)


.子程序 窗口最小化, 空白型, , 将指定窗口最小化(无返回值)
.参数 临时句柄, 整数型, , 欲最小化窗口的句柄

API_投递消息 (临时句柄, 274, 61473, 0)


.子程序 窗口置焦点, 逻辑型, , 将输入焦点设到指定的窗口。如有必要,会激活窗口.不能对最小化窗口设置(成功返回真,失败返回假)
.参数 句柄, 空白型, , 欲置焦点的窗口句柄

.局部变量 焦点窗口句柄, 整数型, , , 
.局部变量 目标线程ID, 整数型, , , 
.局部变量 上次焦点句柄, 整数型, , , 

赋值 (目标线程ID, _取窗口进程ID (句柄, 0))
_连接线程输入 (_取当前线程 (), 目标线程ID, 真)
赋值 (上次焦点句柄, _窗口置焦点 (句柄))
_连接线程输入 (_取当前线程 (), 目标线程ID, 假)
.如果真 (等于 (上次焦点句柄, _取焦点句柄 ()))
    返回 (假)
.如果真结束
返回 (真)


.子程序 窗口置父, 整数型, , 指定一个窗口的新父(返回前一个父窗口的句柄)
.参数 窗口句柄, 整数型, , 子窗口句柄
.参数 新父, 整数型, 可空, 新的父窗口句柄 (可空为 嵌入桌面)

.如果真 (等于 (新父, 0))
    赋值 (新父, _寻找顶级窗口2 (“ProgMan”, 0))
    赋值 (新父, GetWindow (新父, #LWA_ALPHA))
.如果真结束
返回 (_置父窗口 (窗口句柄, 新父)) ' 嵌入桌面


.子程序 句柄是否有效, 逻辑型, , 判断窗口句柄是否有效(返回真,无效返回假)
.参数 窗口句柄, 空白型, , 

.如果 (等于 (_句柄是否有效 (窗口句柄), 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 类名更改, 空白型, , 更改类名(必须在欲更改的类名的程序运行前-执行)(无返回值)
.参数 旧类名, 文本型, , 欲更改的类名
.参数 新类名, 文本型, , 更改后的新类名

.局部变量 ApiHook, Hook操作, , , 

赋值 (变量旧类名, 旧类名)
赋值 (变量新类名, 新类名)
ApiHook.安装Hook (“user32.dll”, “CreateWindowExA”, 到数值 (&MyCreateWindowEx)) ' 安装APIHOOK
ApiHook.开始Hook () ' 开始拦截API
UnregisterClassA (新类名, 0) ' 反注册类


.子程序 窗口特效, 空白型, , hwnd只对Form有效，其他像Picture1都无法产生效果。
.参数 窗口句柄, 整数型, , 窗口句柄
.参数 动画时间, 整数型, , 动画时间
.参数 动画类型, 整数型, , 动画类型，支持累加

动画窗口 (窗口句柄, 动画时间, 动画类型)


.子程序 窗口禁止, 整数型, , 在指定的窗口里允许或禁止所有鼠标及键盘输入(非零表示成功，零表示失败)  也可用于外部按钮解除禁止(或其它一些禁止的控件)
.参数 窗口句柄, 整数型, , 窗口句柄
.参数 是否禁止, 整数型, 可空, 默认为禁止 0=禁止 1=取消禁止

返回 (_窗口禁止 (窗口句柄, 是否禁止))

.子程序 窗口禁止关闭, 逻辑型, , 控制窗口关闭按钮,(允许/禁止)关闭窗口 (成功返回真,失败返回假)
.参数 窗口句柄, 整数型, , 欲禁止或解除禁止的窗口句柄
.参数 禁止关闭, 逻辑型, 可空, 可空为禁止关闭, 假:允许关闭, 真:禁止关闭

.局部变量 系统菜单句柄, 整数型, , , 
.局部变量 矩形, 矩形类型, , , 

赋值 (系统菜单句柄, GetSystemMenu (窗口句柄, 0))
.如果真 (等于 (系统菜单句柄, 0))
    返回 (假)
.如果真结束
.如果 (或者 (是否为空 (禁止关闭), 等于 (禁止关闭, 真)))
    EnableMenuItem (系统菜单句柄, 6, 1025) ' 禁止关闭
.否则
    EnableMenuItem (系统菜单句柄, 6, 1024) ' 允许关闭
.如果结束
.如果真 (取反 (_窗口取外边框 (窗口句柄, 矩形)))
    返回 (假)
.如果真结束
.如果真 (取反 (重画窗口_ (0, 矩形, 0, 位或 (1, 128, 256))))
    返回 (假)
.如果真结束
返回 (真)

.类模块 内存操作, , , 

.程序集变量 地址组, 整数型, , "0", 避免用户忘记释放内存
.程序集变量 自动释放, 逻辑型, , , 
.程序集变量 临时句柄, 整数型, , , 
.程序集变量 临时字节, 字节集, , , 
.程序集变量 临时数组, 整数型, , "0", 
.子程序 搜索内存, 整数型, , 失败返回0
.参数 进程ID, 整数型, , 进程ID
.参数 搜索内容, 字节集, , 欲搜索的内容  其他类型-需自行转换为字节集类型
.参数 结果地址, 整数型, 数组, 用来保存搜索的结果

.局部变量 长度, 整数型, , , 
.局部变量 操作句柄, 整数型, , , 
.局部变量 内存地址, 整数型, , , 
.局部变量 内存块信息, 内存信息模块, , , 
.局部变量 数据缓冲区, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 找到位置, 整数型, , , 

清除数组 (结果地址)
赋值 (长度, 取字节集长度 (搜索内容))
赋值 (操作句柄, _打开进程 (#PROCESS_ALL_ACCESS, 0, 进程ID)) ' 取得操作句柄
赋值 (临时句柄, 进程ID)
赋值 (临时字节, 搜索内容)
.判断循环首 (不等于 (_查询内存地址信息 (操作句柄, 内存地址, 内存块信息, 28), 0)) ' 取得内存块信息
    .如果真 (并且 (等于 (内存块信息.Type, 131072), 不等于 (内存块信息.Protect, 16), 不等于 (内存块信息.Protect, 1), 不等于 (内存块信息.Protect, 128))) ' 判断保护状态
        赋值 (数据缓冲区, 取空白字节集 (内存块信息.rvytsdfy))
        赋值 (a, _内存读字节集 (操作句柄, 内存地址, 数据缓冲区, 内存块信息.rvytsdfy, 0))
        .如果真 (不等于 (a, 0))
            赋值 (找到位置, 寻找字节集 (数据缓冲区, 搜索内容, )) ' 查找是否有要搜索的数据
            .判断循环首 (不等于 (找到位置, -1))
                加入成员 (结果地址, 到数值 (相减 (相加 (内存地址, 找到位置), 1)))
                赋值 (找到位置, 寻找字节集 (数据缓冲区, 搜索内容, 相加 (找到位置, 长度)))
            .判断循环尾 ()
        .如果真结束
        
    .如果真结束
    赋值 (内存地址, 相加 (内存地址, 内存块信息.rvytsdfy)) ' 搜索下一内存块
    处理事件 ()
.判断循环尾 ()
_关闭对象 (操作句柄)
赋值 (临时数组, 结果地址)
返回 (取数组成员数 (结果地址))


.子程序 再次搜索内存, 整数型, , 失败返回0
.参数 结果地址, 整数型, 数组, 用来保存搜索的结果
.参数 搜索的数据, 字节集, , 从上一次搜索结果地址中再次搜索的数据内容

.局部变量 长度, 整数型, , , 
.局部变量 操作句柄, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 内存数据, 字节集, , , 

清除数组 (结果地址)
赋值 (操作句柄, _打开进程 (#PROCESS_ALL_ACCESS, 0, 临时句柄)) ' 取得操作句柄
赋值 (长度, 取字节集长度 (临时字节))
赋值 (内存数据, 取空白字节集 (长度))
.计次循环首 (取数组成员数 (临时数组), i)
    .如果真 (不等于 (_内存读字节集 (操作句柄, 临时数组 [i], 内存数据, 长度, 0), 0))
        .如果真 (等于 (临时字节, 内存数据))
            加入成员 (结果地址, 临时数组 [i])
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
_关闭对象 (操作句柄)
赋值 (临时数组, 结果地址)
返回 (取数组成员数 (结果地址))


.子程序 搜索整数内存, 整数型, , 失败返回0
.参数 结果地址, 整数型, 数组, 用来保存搜索的结果
.参数 搜索的整数, 整数型, , 从上一次搜索结果地址中再次搜索的整数,也可以是模糊搜索 #内存_不变的数值 #内存_变大的数值 #内存_变小的数值 #内存_改变的数值

.局部变量 操作句柄, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时整数, 整数型, , , 
.局部变量 上次数值, 整数型, , , 

清除数组 (结果地址)
赋值 (操作句柄, _打开进程 (#PROCESS_ALL_ACCESS, 0, 临时句柄)) ' 取得操作句柄
赋值 (上次数值, 取字节集数据 (临时字节, #整数型, ))
.判断开始 (等于 (搜索的整数, #内存_不变的数值))
    .计次循环首 (取数组成员数 (临时数组), i)
        .如果真 (大于 (_内存读整数 (操作句柄, 临时数组 [i], 临时整数, 4, 0), 0))
            .如果真 (等于 (上次数值, 临时整数))
                加入成员 (结果地址, 临时数组 [i])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (搜索的整数, #内存_变大的数值))
    .计次循环首 (取数组成员数 (临时数组), i)
        .如果真 (大于 (_内存读整数 (操作句柄, 临时数组 [i], 临时整数, 4, 0), 0))
            .如果真 (小于 (上次数值, 临时整数))
                加入成员 (结果地址, 临时数组 [i])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (搜索的整数, #内存_变小的数值))
    .计次循环首 (取数组成员数 (临时数组), i)
        .如果真 (大于 (_内存读整数 (操作句柄, 临时数组 [i], 临时整数, 4, 0), 0))
            .如果真 (大于 (上次数值, 临时整数))
                加入成员 (结果地址, 临时数组 [i])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (搜索的整数, #内存_改变的数值))
    .计次循环首 (取数组成员数 (临时数组), i)
        .如果真 (大于 (_内存读整数 (操作句柄, 临时数组 [i], 临时整数, 4, 0), 0))
            .如果真 (不等于 (上次数值, 临时整数))
                加入成员 (结果地址, 临时数组 [i])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.默认
    .计次循环首 (取数组成员数 (临时数组), i)
        .如果真 (大于 (_内存读整数 (操作句柄, 临时数组 [i], 临时整数, 4, 0), 0))
            .如果真 (等于 (搜索的整数, 临时整数)) ' 精确再次搜索
                加入成员 (结果地址, 临时数组 [i])
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
.判断结束
_关闭对象 (操作句柄)
赋值 (临时数组, 结果地址)
返回 (取数组成员数 (结果地址))


.子程序 读文本内存, 文本型, , 
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时字节集, 字节集, , , 

 ' --读文本---------------------------------
赋值 (临时字节集, 取空白字节集 (20))
ReadProcessMemory (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID), 内存地址, 临时字节集, 20, 0)
返回 (到文本 (临时字节集))

.子程序 读字节集内存, 字节集, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 长度, 整数型, , 欲读长度

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 

赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID)) ' 取得操作句柄
_内存读字节集 (操作句柄, 地址, 变量, 长度, 0)
CloseHandle (操作句柄)
返回 (变量)


.子程序 读小数内存, 小数型, , 
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 读取大小, 整数型, 可空, 

.局部变量 临时小数, 小数型, , , 

 ' ---读整数----------------------------------
.如果真 (等于 (读取大小, 0))
    赋值 (读取大小, 4)
.如果真结束
读内存小数 (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID), 内存地址, 临时小数, 读取大小, 0)
返回 (临时小数)

.子程序 读整数内存, 整数型, 公开, 
.参数 进程ID, 整数型, , 
.参数 内存地址, 整数型, , 
.参数 读取大小, 整数型, 可空, 

.局部变量 临时整数, 整数型, , , 

.如果真 (等于 (读取大小, 0))
    赋值 (读取大小, 4)
.如果真结束
 ' ---读整数----------------------------------
读内存整数 (OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID), 内存地址, 临时整数, 读取大小, 0)
返回 (临时整数)

.子程序 读字节内存, 字节型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 失败内容, 字节型, 可空, 读内存失败后返回的内容 默认为0

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 1)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (失败内容)
.如果真结束
返回 (取字节集数据 (变量, #字节型, ))


.子程序 读短整数内存, 短整数型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 失败内容, 短整数型, 可空, 读内存失败后返回值的内容 默认为-1

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 2)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (选择 (是否为空 (失败内容), -1, 失败内容))
.如果真结束
返回 (取字节集数据 (变量, #短整数型, ))


.子程序 读长整数内存, 长整数型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 失败内容, 长整数型, 可空, 读内存失败后返回值的内容 默认为-1

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 8)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (选择 (是否为空 (失败内容), -1, 失败内容))
.如果真结束
返回 (取字节集数据 (变量, #长整数型, ))


.子程序 读双精度小数内存, 双精度小数型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 失败内容, 双精度小数型, 可空, 读内存失败后返回值的内容 默认为-1

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 8)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (选择 (是否为空 (失败内容), -1, 失败内容))
.如果真结束
返回 (取字节集数据 (变量, #双精度小数型, ))


.子程序 读日期时间内存, 日期时间型, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址

.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 8)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (到时间 (0))
.如果真结束
返回 (取字节集数据 (变量, #日期时间型, ))


.子程序 读子程序指针内存, 子程序指针, , 
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址

.局部变量 空指针, 子程序指针, , , 
.局部变量 变量, 字节集, , , 保存读取数据的变量
.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 4)
赋值 (变量, 取空白字节集 (长度))
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID)) ' 取得操作句柄
赋值 (a, _内存读字节集 (操作句柄, 地址, 变量, 长度, 0))
_关闭对象 (操作句柄)
.如果真 (等于 (a, 0))
    返回 (空指针)
.如果真结束
返回 (取字节集数据 (变量, #子程序指针型, ))


.子程序 取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn_字节集 (字节集, 字节集, 0))


.子程序 取指针_字节型, 整数型, , 
.参数 字节, 字节型, 参考, 

返回 (lstrcpyn_字节型 (字节, 字节, 0))


.子程序 取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))


.子程序 取指针_整数型, 整数型, , 
.参数 x, 整数型, 参考, 

返回 (lstrcpyn_整数型 (x, x, 0))

.子程序 取指针_子程序指针, 整数型, , 
.参数 x, 子程序指针, 参考, 

返回 (lstrcpyn_子程序子针 (x, x, 0))


.子程序 取指针_长整数型, 整数型, , 
.参数 x, 长整数型, 参考, 

返回 (lstrcpyn_长整数型 (x, x, 0))


.子程序 取指针_双精度小数型, 整数型, , 
.参数 x, 双精度小数型, 参考, 

返回 (lstrcpyn_双精型 (x, x, 0))


.子程序 读物理内存, 字节集, , 失败返回{}，成功返回相应数据
.参数 地址, 长整数型, , 
.参数 长度, 整数型, , <=4096

.局部变量 MEMORY_CHUNKS, 字节集, , , 
.局部变量 ret, 字节集, , , 
.局部变量 retlen, 整数型, , , 

赋值 (ret, 取空白字节集 (长度))
赋值 (MEMORY_CHUNKS, 相加 (取字节集左边 (到字节集 (地址), 4), 到字节集 (取指针_字节集 (ret, ret, 0)), 到字节集 (长度)))
NtSystemDebugControl (#SysDbgReadVirtualMemory, MEMORY_CHUNKS, 12, 0, 0, retlen) ' 12为MEMORY_CHUNKS的长度
.如果真 (小于或等于 (retlen, 0))
    赋值 (ret, {  })
.如果真结束
返回 (ret)


.子程序 写物理内存, 整数型, , 失败返回-1，成功返回0
.参数 地址, 长整数型, , 
.参数 数据, 字节集, , <=4096

.局部变量 MEMORY_CHUNKS, 字节集, , , 
.局部变量 ret, 整数型, , , 
.局部变量 retlen, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (len, 取字节集长度 (数据))
赋值 (MEMORY_CHUNKS, 相加 (取字节集左边 (到字节集 (地址), 4), 到字节集 (取指针_字节集 (数据, 数据, 0)), 到字节集 (len)))
NtSystemDebugControl (#SysDbgWriteVirtualMemory, MEMORY_CHUNKS, 12, 0, 0, retlen) ' 12为MEMORY_CHUNKS的长度
.如果真 (小于或等于 (retlen, 0))
    赋值 (ret, -1)
.如果真结束
返回 (ret)


.子程序 十六文本至长整数, 长整数型, , 
.参数 x, 文本型, , 要转换的十六进制文本

.局部变量 ret, 长整数型, , , 

StrToInt64ExA (相加 (“0x”, x), 1, ret)
返回 (ret)


.子程序 写文本内存, 逻辑型, , 写入文本数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 文本型, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, _内存写文本 (操作句柄, 地址, 变量, 取文本长度 (变量), 0))
CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 写整数内存, 逻辑型, , 写入四字节数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 整数型, , 写入数据
.参数 写入大小, 整数型, 可空, 

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

.如果真 (等于 (写入大小, 0))
    赋值 (写入大小, 4)
.如果真结束
赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, _内存写整数 (操作句柄, 地址, 变量, 写入大小, 0))
CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束



.子程序 写小数内存, 逻辑型, , 写入小数(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 小数型, , 写入数据
.参数 写入大小, 整数型, 可空, 

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 小数型, , , 

.如果真 (等于 (写入大小, 0))
    赋值 (写入大小, 4)
.如果真结束
赋值 (操作句柄, _打开进程 (2035711, 0, 进程ID))
赋值 (a, _内存写小数 (操作句柄, 地址, 变量, 4, 写入大小))
_关闭对象 (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 写字节集内存, 逻辑型, , 写入字节集数据(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 进程ID
.参数 地址, 整数型, , 内存地址
.参数 变量, 字节集, , 写入数据

.局部变量 操作句柄, 整数型, , , 
.局部变量 a, 整数型, , , 

赋值 (操作句柄, OpenProcess (#PROCESS_ALL_ACCESS, 0, 进程ID))
赋值 (a, _内存写字节集 (操作句柄, 地址, 变量, 取字节集长度 (变量), 0))
CloseHandle (操作句柄)
.如果 (等于 (a, 0))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 读游戏内存, 整数型, , 游戏内存专用
.参数 窗口句柄, 整数型, , 游戏窗口句柄
.参数 游戏基址, 文本型, , 欲读取的内存基址(十六进制)
.参数 一次偏移, 文本型, 可空, 没有请留空 (十六进制)
.参数 二次偏移, 文本型, 可空, 没有请留空 (十六进制)
.参数 三次偏移, 文本型, 可空, 没有请留空 (十六进制)
.参数 四次偏移, 文本型, 可空, 没有请留空 (十六进制)

.局部变量 进程ID, 整数型, , , 
.局部变量 数据, 整数型, , , 

赋值 (进程ID, 窗口.取窗口PID (窗口句柄))
赋值 (数据, 读整数内存 (进程ID, 到数值 (编码.十六到十 (游戏基址))))
.如果真 (是否为空 (一次偏移))
    返回 (数据)
.如果真结束
赋值 (数据, 读整数内存 (进程ID, 相加 (数据, 到数值 (编码.十六到十 (一次偏移)))))
.如果真 (是否为空 (二次偏移))
    返回 (数据)
.如果真结束
赋值 (数据, 读整数内存 (进程ID, 相加 (数据, 到数值 (编码.十六到十 (二次偏移)))))
.如果真 (是否为空 (三次偏移))
    返回 (数据)
.如果真结束
赋值 (数据, 读整数内存 (进程ID, 相加 (数据, 到数值 (编码.十六到十 (三次偏移)))))
.如果真 (是否为空 (四次偏移))
    返回 (数据)
.如果真结束
赋值 (数据, 读整数内存 (进程ID, 相加 (数据, 到数值 (编码.十六到十 (四次偏移)))))
返回 (数据)


.子程序 共享_创建内存, 整数型, , 创建指定大小的内存空间,返回内存地址
.参数 大小, 整数型, , 指定大小

.局部变量 lpdata, 整数型, , , 

赋值 (lpdata, LocalAlloc (0, 大小))
共享_增加地址 (lpdata)
返回 (lpdata)

.子程序 共享_写入内存, 整数型, , 返回内存地址
.参数 地址, 整数型, 可空, 指定写入地址,如果为空将自动创建
.参数 数据, 字节集, 参考, 欲写入的字节集数据

.局部变量 lpdata, 整数型, , , 内存指针
.局部变量 length, 整数型, , , 数据长度

赋值 (length, 取字节集长度 (数据))
.如果真 (等于 (length, 0))
    返回 (0)
.如果真结束
赋值 (lpdata, 选择 (等于 (地址, 0), 共享_创建内存 (length), 地址))
_写内存 (lpdata, 数据, length)
返回 (lpdata)

.子程序 共享_读取内存, 字节集, , 读取地址数据！！注意，也可以调用核心库方法 指针到字节集(地址,内存共享.取内存长度(地址)) 来同样取得数据
.参数 地址, 整数型, , 由内存映射返回的地址
.参数 读取位置, 整数型, 可空, 从1开始到结束,如果留空则从首地址开始,超出作用范围将指定0
.参数 长度, 整数型, 可空, 若读取位置+长度超过总数据长度,将自动指定0

.局部变量 数据, 字节集, 静态, , 指定缓冲区,如果缓冲区长度不够或超出将自动匹配,如果包含数据将自动清空
.局部变量 length, 整数型, , , 
.局部变量 offset, 整数型, , , 偏移,位置

赋值 (length, LocalSize (地址))
.如果真 (等于 (length, 0)) ' 无效地址或空数据
    返回 ({  })
.如果真结束
赋值 (长度, 选择 (等于 (长度, 0), 相减 (LocalSize (地址), 读取位置), 长度))
赋值 (数据, 选择 (小于或等于 (长度, 0), 选择 (不等于 (length, 取字节集长度 (数据)), 取空白字节集 (length), {  }), 取空白字节集 (长度)))
赋值 (offset, 选择 (或者 (小于 (读取位置, 0), 大于 (相加 (读取位置, 长度), length)), 0, 读取位置))
_读内存 (数据, 相加 (地址, offset), 长度)
返回 (数据)

.子程序 共享_释放内存, 逻辑型, , 释放内存
.参数 地址, 整数型, , 由内存映射返回的地址

共享_删除地址 (地址)
返回 (等于 (LocalFree (地址), 0))


.子程序 共享_取内存长度, 整数型, , 取指定内存地址的长度
.参数 地址, 整数型, , 内存地址

返回 (LocalSize (地址))


.子程序 共享_自动释放, 空白型, , 在类销毁时是否将自动释放所有已申请的内存地址
.参数 是否自动释放, 逻辑型, , 

赋值 (自动释放, 是否自动释放)


.子程序 共享_全部释放, 空白型, , 忽略自动释放属性,直接释放所有地址
.局部变量 计次, 整数型, , , 

.计次循环首 (取数组成员数 (地址组), 计次)
    共享_释放内存 (地址组 [计次])
.计次循环尾 ()


.子程序 共享_增加地址, 空白型, , 
.参数 地址, 整数型, , 

.局部变量 计次, 整数型, , , 
.局部变量 n, 整数型, , , 

.计次循环首 (取数组成员数 (地址组), 计次)
    .如果真 (不等于 (地址组 [计次], 地址))
        赋值 (n, 相加 (n, 1))
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (n, 取数组成员数 (地址组)))
    加入成员 (地址组, 地址)
.如果真结束


.子程序 共享_删除地址, 空白型, , 
.参数 地址, 整数型, , 

.局部变量 计次, 整数型, , , 

.计次循环首 (取数组成员数 (地址组), 计次)
    .如果真 (等于 (地址组 [计次], 地址))
        赋值 (地址组 [计次], 地址组 [取数组成员数 (地址组)])
        重定义数组 (地址组, 真, 相减 (取数组成员数 (地址组), 1))
    .如果真结束
    
.计次循环尾 ()


.类模块 文本操作, , , 

.子程序 不重复加入数组, 逻辑型, 公开, 不重复加入数组
.参数 数组, 整数型, 数组, 
.参数 成员, 整数型, , 

.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (数组), i)
    .如果真 (等于 (数组 [i], 成员))
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
加入成员 (数组, 成员)
返回 (真)


.子程序 取空白文本, 文本型, 公开, 支持斩月
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, LocalAlloc (64, 相加 (len, 1)))
.如果真 (等于 (address, 0))
    返回 (“”)
.如果真结束
FillMemory (address, len, 32)
赋值 (ret, 指针到文本 (address))
LocalFree (address)
返回 (ret)


.子程序 取文本长度, 整数型, 公开, 
.参数 文本, 文本型, , 

返回 (lstrlen (文本))


.子程序 字符, 文本型, 公开, 
.参数 欲取其字符的字符代码, 字节型, , 

.局部变量 address, 整数型, , , 

赋值 (address, 取指针_字节型 (欲取其字符的字符代码))
返回 (字节集到文本 (指针到字节集 (address, 1)))

.子程序 取代码, 整数型, 公开, 
.参数 欲取字符代码的文本, 文本型, , 
.参数 欲取其代码的字符位置, 整数型, 可空, 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 
.局部变量 ret, 整数型, , , 

赋值 (len, 取文本长度 (欲取字符代码的文本))
.如果真 (是否为空 (欲取其代码的字符位置))
    赋值 (欲取其代码的字符位置, 1)
.如果真结束
.如果真 (或者 (大于 (欲取其代码的字符位置, len), 小于 (欲取其代码的字符位置, 1)))
    返回 (0)
.如果真结束
赋值 (address, 取指针_文本型 (欲取字符代码的文本))
RtlMoveMemory_整数 (ret, 相减 (相加 (address, 欲取其代码的字符位置), 1), 1)
返回 (ret)

.子程序 到大写, 文本型, 公开,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharUpper (aaa))


.子程序 到小写, 文本型, 公开,  
.参数 文本, 文本型, , 

.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
返回 (CharLower (aaa))


.子程序 字节集到文本, 文本型, 公开, 
.参数 字节集, 字节集, , 

.局部变量 ret, 文本型, , , 
.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (字节集, { 0 }))
返回 (指针到文本 (取指针_字节集 (temp)))

.子程序 整数到文本, 文本型, 公开, 动态调用API吧。
.参数 整数, 整数型, , 

.局部变量 ret, 文本型, , , 
.局部变量 address, 空白型, , , 
.局部变量 参数, 整数型, , "3", 

赋值 (ret, 取空白文本 (20))
赋值 (address, GetProcAddress (GetModuleHandle (“user32.dll”), “wsprintfA”))
赋值 (参数 [1], 取指针_文本型 (ret))
赋值 (参数 [2], 取指针_文本型 (“%d”))
赋值 (参数 [3], 整数)
系统_动态调用子程序 (address, 参数, 真)
返回 (ret)


.子程序 删首尾空, 文本型, 公开, 
.参数 文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (aaa, 文本)
赋值 (temp, 处理文本首全角 (aaa))
赋值 (temp1, 处理文本尾全角 (temp))
StrTrim (temp1, “ ”)
返回 (temp1)


.子程序 取汉字笔画, 整数型, 公开, 返回指定单个汉字的笔画数，支持6725个常用汉字。
.参数 汉字, 文本型, , 

.局部变量 汉字位置, 整数型, , , 
.局部变量 结束位置, 整数型, , , 
.局部变量 代码, 字节型, , , 
.局部变量 汉字变量, 文本型, , , 
.局部变量 笔画文本, 文本型, 静态, , 

.如果真 (等于 (笔画文本, “”))
    赋值 (笔画文本, 到文本 (#文字比划))
.如果真结束
赋值 (汉字变量, 取文本左边 (汉字, 2))
赋值 (代码, 取代码 (汉字变量, ))
.如果真 (小于 (代码, 127))
    返回 (0)
.如果真结束
赋值 (汉字位置, 寻找文本 (笔画文本, 汉字变量, , 假))
赋值 (结束位置, 寻找文本 (笔画文本, “,”, 汉字位置, 假))
返回 (到数值 (取文本中间 (笔画文本, 相加 (汉字位置, 2), 相减 (结束位置, 汉字位置, 2))))


.子程序 取出文本中的中文, 文本型, 公开, 取出文本中的中文
.参数 文本, 文本型, , 
.参数 分割号, 文本型, 可空, 用来分割多段中文的符号, 默认为不分割

.局部变量 字节集, 字节集, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 返回内容, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (字节集, 到字节集 (文本))
.计次循环首 (取字节集长度 (字节集), i)
    .如果 (大于 (字节集 [i], 126))
        赋值 (临时字节集, 相加 (临时字节集, 到字节集 (字节集 [i])))
    .否则
        .如果真 (不等于 (临时字节集, {  }))
            赋值 (返回内容, 相加 (返回内容, 到文本 (临时字节集), 分割号))
            赋值 (临时字节集, {  })
        .如果真结束
        
    .如果结束
    
.计次循环尾 ()
返回 (相加 (返回内容, 到文本 (临时字节集)))


.子程序 取文本左边, 文本型, 公开, 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集左边 (temp, 欲取出字符的数目))
返回 (字节集到文本 (ret))


.子程序 取文本右边, 文本型, 公开, 
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集右边 (temp, 欲取出字符的数目))
返回 (字节集到文本 (ret))


.子程序 取文本中间, 文本型, 公开, 
.参数 欲取其部分的文本, 文本型, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 

.局部变量 temp, 字节集, , , 
.局部变量 ret, 字节集, , , 

.如果真 (等于 (欲取其部分的文本, “”))
    返回 (“”)
.如果真结束
赋值 (temp, 字节集_文本到字节集 (欲取其部分的文本))
赋值 (ret, 字节集_取字节集中间 (temp, 起始取出位置, 欲取出字符的数目))
返回 (字节集到文本 (ret))


.子程序 分割文本, 整数型, 公开, 返回实际的组数
.参数 待分割文本, 文本型, , 如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的文本, 文本型, 可空, 可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”
.参数 要返回的子文本数目, 整数型, 可空, 可以被省略。如果被省略，则默认返回所有的子文本
.参数 返回的文本数组, 文本型, 数组, 将指定文本进行分割，分割后的一维文本数组以参考方式传递

.局部变量 临时字节集数组, 字节集, , "0", 
.局部变量 用作分割的字节集, 字节集, , , 
.局部变量 temp, 字节集, , , 
.局部变量 count, 整数型, , , 
.局部变量 i, 整数型, , , 

清除数组 (返回的文本数组)
.如果真 (等于 (待分割文本, “”))
    返回 (0)
.如果真结束
.如果 (是否为空 (用作分割的文本))
    赋值 (用作分割的文本, “,”)
.否则
    .如果真 (等于 (用作分割的文本, “”))
        加入成员 (返回的文本数组, 待分割文本)
        返回 (1)
    .如果真结束
    
.如果结束
赋值 (temp, 字节集_文本到字节集 (待分割文本))
赋值 (用作分割的字节集, 字节集_文本到字节集 (用作分割的文本))
赋值 (count, 字节集_分割字节集 (temp, 用作分割的字节集, 要返回的子文本数目, 临时字节集数组))
.计次循环首 (count, i)
    加入成员 (返回的文本数组, 字节集到文本 (临时字节集数组 [i]))
.计次循环尾 ()
返回 (count)


.子程序 字节型数组到文本, 文本型, 公开, 
.参数 字节型数组, 字节型, 数组, 

.局部变量 len, 整数型, , , 
.局部变量 address, 整数型, , , 

赋值 (len, 取数组成员数 (字节型数组))
.如果真 (小于 (len, 1))
    返回 (“”)
.如果真结束
赋值 (address, 取指针_字节型 (字节型数组 [1]))
返回 (指针到文本 (address))


.子程序 取重复文本, 文本型, 公开, 速度慢，哈哈。
.参数 重复次数, 整数型, , 
.参数 待重复的文本, 文本型, , 

.局部变量 temp, 文本型, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的文本))
.计次循环尾 ()
返回 (temp)


.子程序 文本替换, 文本型, 公开, 将指定文本的某一部分用其它的文本替换，然后返回替换后的结果。
.参数 欲替换其部分的文本, 文本型, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的文本, 文本型, 可空, 可以被省略。如果本参数被省略，则删除文本中的指定部分。

.局部变量 len_x, 整数型, , , 
.局部变量 temp1, 文本型, , , 
.局部变量 temp2, 文本型, , , 

.如果真 (等于 (欲替换其部分的文本, “”))
    返回 (“”)
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (len_x, 取文本长度 (欲替换其部分的文本))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的文本)
.如果真结束
赋值 (temp1, 取文本左边 (欲替换其部分的文本, 相减 (起始替换位置, 1)))
赋值 (temp2, 取文本右边 (欲替换其部分的文本, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的文本, temp2))


.子程序 子文本替换, 文本型, 公开, 返回一个文本，该文本中指定的子文本已被替换成另一子文本，并且替换发生的次数也是被指定的。
.参数 欲被替换的文本, 文本型, , 
.参数 欲被替换的子文本, 文本型, , 
.参数 用作替换的子文本, 文本型, 可空, 可以被省略。如果本参数被省略，默认为空文本。
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。参数值指定被替换子文本的起始搜索位置。如果省略，默认从 1 开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换。
.参数 是否区分大小写, 逻辑型, 可空, 初始值为“真”。为真区分大小写，为假不区分。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 文本型, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (是否为空 (是否区分大小写))
    赋值 (是否区分大小写, 真)
.如果真结束
.如果真 (或者 (等于 (欲被替换的文本, “”), 等于 (欲被替换的子文本, “”)))
    返回 (“”)
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 查找子文本 (欲被替换的文本, 欲被替换的子文本, offset, 进行替换的起始位置, 是否区分大小写))
.如果真 (等于 (count, 0))
    返回 (欲被替换的文本)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的文本)
赋值 (len, 取文本长度 (欲被替换的子文本))
赋值 (偏移, 相减 (取文本长度 (用作替换的子文本), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 文本替换 (ret, offset [i], len, 用作替换的子文本))
    .否则
        赋值 (ret, 文本替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子文本))
    .如果结束
    
.计次循环尾 ()
返回 (ret)



.子程序 查找子文本, 整数型, , 
.参数 x, 文本型, , 
.参数 y, 文本型, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 
.参数 区分大小写, 逻辑型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 取文本长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 寻找文本 (x, y, j, 取反 (区分大小写)))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 处理文本首全角, 文本型, , 改成半角空格，用API再处理，偷懒了。哈～～
.参数 文本, 文本型, , 


返回 (“”)


.子程序 处理文本尾全角, 文本型, , 改成半角空格，用API再处理，偷懒了。哈～～
.参数 文本, 文本型, , 

.局部变量 len, 整数型, , , 

赋值 (len, 取文本长度 (文本))

返回 (“”)


.子程序 删首空, 文本型, 公开, 返回一个文本，其中包含被删除了首部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 ret, 文本型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (ret, 欲删除空格的文本)
赋值 (temp, 处理文本首全角 (ret))

返回 (ret)


.子程序 删尾空, 文本型, 公开, 返回一个文本，其中包含被删除了尾部全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 temp, 文本型, , , 
.局部变量 temp11, 文本型, , , 
.局部变量 len, 整数型, , , 

.如果真 (等于 (欲删除空格的文本, “”))
    返回 (“”)
.如果真结束
赋值 (len, 取文本长度 (欲删除空格的文本))
赋值 (temp11, 欲删除空格的文本)
赋值 (temp, 处理文本尾全角 (temp11))

返回 (temp)


.子程序 删全部空, 文本型, 公开, 返回一个文本，其中包含被删除了所有全角或半角空格的指定文本。
.参数 欲删除空格的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 欲删除空格的文本)
返回 (ret)


.子程序 到全角, 文本型, 公开, 将文本中的半角字母、空格或数字变换为全角，返回变换后的结果文本。
.参数 欲变换的文本, 文本型, , 

.局部变量 ret, 文本型, , , 

 ' 数字范围163开头，176--185
 ' 大写字母，163开头，193--218
 ' 小写字母，163开头，225--250
 ' ///////////以上为全角的，下面是半角的
 ' 数字范围，48--57
 ' 大写字母，65--90
 ' 小写字母，97-122
赋值 (ret, 取空白文本 (相乘 (取文本长度 (欲变换的文本), 2)))
返回 (ret)


.类模块 字节操作, , , 

.子程序 取空白字节集, 字节集, 公开, 支持斩月
.参数 len, 整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)


.子程序 取字节集长度, 整数型, 公开, 
.参数 字节集, 字节集, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 整数型, , , 

.如果真 (等于 (字节集, {  }))
    返回 (0)
.如果真结束
赋值 (address, 取指针_字节集 (字节集))
RtlMoveMemory_整数 (ret, 相减 (address, 4), 4)
返回 (ret)


.子程序 文本到字节集, 字节集, 公开, 
.参数 文本, 文本型, , 

返回 (指针到字节集 (取指针_文本型 (文本), 文本_取文本长度 (文本)))


.子程序 整数到字节集, 字节集, 公开, 
.参数 整数, 整数型, , 

返回 (指针到字节集 (取指针_整数型 (整数), 4))


.子程序 字节型到字节集, 字节集, 公开, 
.参数 字节型, 字节型, , 

.局部变量 temp, 字节集, , , 

赋值 (temp, { 0 })
赋值 (temp [1], 字节型)
返回 (temp)

.子程序 取字节集左边, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 取指针_字节集 (字节集))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 取字节集右边, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.判断 (大于 (欲取出字节的数目, len))
    赋值 (欲取出字节的数目, len)
.默认
    
.判断结束
赋值 (address, 相减 (相加 (取指针_字节集 (字节集), len), 欲取出字节的数目))
返回 (指针到字节集 (address, 欲取出字节的数目))


.子程序 取字节集中间, 字节集, 公开, 
.参数 字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 
.参数 欲取出字节的数目, 整数型, , 

.局部变量 len, 空白型, , , 
.局部变量 address, 空白型, , , 

赋值 (len, 取字节集长度 (字节集))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.判断开始 (小于 (起始取出位置, 1))
    赋值 (起始取出位置, 1)
.判断 (大于 (起始取出位置, len))
    返回 ({  })
.默认
    
.判断结束
.如果真 (小于 (欲取出字节的数目, 1))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (欲取出字节的数目, 起始取出位置), 1), len))
    赋值 (欲取出字节的数目, 相加 (相减 (len, 起始取出位置), 1))
.如果真结束
赋值 (address, 相减 (相加 (取指针_字节集 (字节集), 起始取出位置), 1))
返回 (指针到字节集 (address, 欲取出字节的数目))



.子程序 分割字节集, 整数型, 公开, 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递

.局部变量 temp, 字节集, , , 
.局部变量 位置列表, 整数型, , "0", 
.局部变量 找到位置个数, 整数型, , , 
.局部变量 临时分割表, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 len_x, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (返回的字节集数组)
.如果真 (等于 (待分割字节集, {  }))
    返回 (0)
.如果真结束
.如果真 (是否为空 (用作分割的字节集))
    赋值 (用作分割的字节集, { 0 })
.如果真结束
赋值 (找到位置个数, 查找子字节集 (待分割字节集, 用作分割的字节集, 位置列表))
.如果真 (等于 (找到位置个数, 0))
    返回 (0)
.如果真结束
赋值 (len_x, 取字节集长度 (待分割字节集))
赋值 (len_y, 取字节集长度 (用作分割的字节集))
.计次循环首 (找到位置个数, i)
    .如果真 (等于 (位置列表 [i], 1))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (i, 1))
        加入成员 (临时分割表, 取字节集中间 (待分割字节集, 1, 相减 (位置列表 [i], 1)))
        到循环尾 ()
    .如果真结束
    加入成员 (临时分割表, 取字节集中间 (待分割字节集, 相加 (位置列表 [相减 (i, 1)], len_y), 相减 (位置列表 [i], 相加 (位置列表 [相减 (i, 1)], len_y))))
.计次循环尾 ()
.如果真 (并且 (大于 (找到位置个数, 0), 小于或等于 (相加 (位置列表 [找到位置个数], len_y), len_x)))
    加入成员 (临时分割表, 取字节集中间 (待分割字节集, 相加 (位置列表 [找到位置个数], len_y), 相加 (相减 (len_x, 相加 (位置列表 [找到位置个数], len_y)), 1)))
.如果真结束
.如果真 (并且 (小于 (要返回的子字节集数目, 取数组成员数 (临时分割表)), 大于 (要返回的子字节集数目, 0)))
    .计次循环首 (要返回的子字节集数目, i)
        加入成员 (返回的字节集数组, 临时分割表 [i])
    .计次循环尾 ()
    返回 (要返回的子字节集数目)
.如果真结束
 ' 复制数组 (返回的字节集数组, 临时分割表)
赋值 (返回的字节集数组, 临时分割表)
返回 (取数组成员数 (返回的字节集数组))

.子程序 查找子字节集, 整数型, , 分割字节集时用
.参数 x, 字节集, , 
.参数 y, 字节集, , 
.参数 z, 整数型, 数组, 
.参数 startoffset, 整数型, 可空, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 len_y, 空白型, , , 

清除数组 (z)
赋值 (i, 1)
.如果 (是否为空 (startoffset))
    赋值 (j, 1)
.否则
    赋值 (j, startoffset)
.如果结束
赋值 (len_y, 取字节集长度 (y))
.判断循环首 (不等于 (i, -1))
    赋值 (i, 寻找字节集 (x, y, j))
    .如果真 (不等于 (i, -1))
        加入成员 (z, i)
        赋值 (j, 相加 (i, len_y))
    .如果真结束
    
.判断循环尾 ()
返回 (取数组成员数 (z))


.子程序 取重复字节集, 字节集, 公开, 速度。
.参数 重复次数, 整数型, , 
.参数 待重复的字节集, 字节集, , 

.局部变量 temp, 字节集, , , 

.计次循环首 (重复次数, )
    赋值 (temp, 相加 (temp, 待重复的字节集))
.计次循环尾 ()
返回 (temp)


.子程序 字节集替换, 字节集, 公开, 将指定字节集的某一部分用其它的字节集替换，然后返回替换后的结果。
.参数 欲替换其部分的字节集, 字节集, , 
.参数 起始替换位置, 整数型, , 替换的起始位置，1为首位置，2为第2个位置，如此类推。
.参数 替换长度, 整数型, , 
.参数 用作替换的字节集, 字节集, 可空, 可以被省略。如果本参数被省略，则删除字节集中的指定部分。

.局部变量 len_x, 空白型, , , 
.局部变量 temp1, 字节集, , , 
.局部变量 temp2, 字节集, , , 

.如果真 (等于 (欲替换其部分的字节集, {  }))
    返回 ({  })
.如果真结束
.如果真 (小于 (替换长度, 1))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (len_x, 取字节集长度 (欲替换其部分的字节集))
.如果真 (小于 (起始替换位置, 1))
    赋值 (起始替换位置, 1)
.如果真结束
.如果真 (大于 (起始替换位置, len_x))
    返回 (欲替换其部分的字节集)
.如果真结束
赋值 (temp1, 取字节集左边 (欲替换其部分的字节集, 相减 (起始替换位置, 1)))
赋值 (temp2, 取字节集右边 (欲替换其部分的字节集, 相加 (相减 (len_x, 相加 (起始替换位置, 替换长度)), 1)))
返回 (相加 (temp1, 用作替换的字节集, temp2))


.子程序 子字节集替换, 字节集, 公开, 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的。
.参数 欲被替换的字节集, 字节集, , 
.参数 欲被替换的子字节集, 字节集, , 
.参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集。
.参数 进行替换的起始位置, 空白型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 替换进行的次数, 空白型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。

.局部变量 offset, 整数型, , "0", 
.局部变量 count, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 ret, 字节集, , , 
.局部变量 len, 空白型, , , 
.局部变量 偏移, 空白型, , , 

.如果真 (或者 (等于 (欲被替换的字节集, {  }), 等于 (欲被替换的子字节集, {  })))
    返回 ({  })
.如果真结束
.如果真 (是否为空 (进行替换的起始位置))
    赋值 (进行替换的起始位置, 1)
.如果真结束
赋值 (count, 查找子字节集 (欲被替换的字节集, 欲被替换的子字节集, offset, 进行替换的起始位置))
.如果真 (等于 (count, 0))
    返回 (欲被替换的字节集)
.如果真结束
.如果真 (或者 (是否为空 (替换进行的次数), 大于 (替换进行的次数, count)))
    赋值 (替换进行的次数, count)
.如果真结束
赋值 (ret, 欲被替换的字节集)
赋值 (len, 取字节集长度 (欲被替换的子字节集))
赋值 (偏移, 相减 (取字节集长度 (用作替换的子字节集), len))
.计次循环首 (替换进行的次数, i)
    .如果 (等于 (i, 1))
        赋值 (ret, 字节集替换 (ret, offset [i], len, 用作替换的子字节集))
    .否则
        赋值 (ret, 字节集替换 (ret, 相加 (offset [i], 偏移), len, 用作替换的子字节集))
    .如果结束
    
.计次循环尾 ()
返回 (ret)


.类模块 加密操作, , , 

.子程序 加密文本_Lc4, 文本型, 公开, 
.参数 instr, 文本型, , 
.参数 key, 文本型, , 

.局部变量 临时, 字节集, , , 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 文本型, , , 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (临时, 到字节集 (instr))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (key)))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (key, j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取字节集长度 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
     ' aaa ＝ 进制转换_ (到文本 (位异或 (临时 [x], y)), 10, 16)
    赋值 (aaa, 编码.十到十六 (位异或 (临时 [x], y)))
    赋值 (outstr, 相加 (outstr, 选择 (大于 (取文本长度 (aaa), 1), “”, “0”), aaa, “ ”))
.计次循环尾 ()
返回 (outstr)

.子程序 解密文本_Lc4, 文本型, 公开, 
.参数 instr, 文本型, , 
.参数 key, 文本型, , 

.局部变量 临时, 字节型, , "0", 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 字节型, , "0", 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (instr, 子文本替换 (instr, “ ”, , , , 真))
.变量循环首 (1, 取文本长度 (instr), 2, 计次)
    加入成员 (临时, 到字节 (编码.十六到十 (取文本中间 (instr, 计次, 2))))
.变量循环尾 ()
 ' 临时 ＝ 到字节集 (转换为十进制 (instr, 16))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (key)))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (key, j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取数组成员数 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    加入成员 (outstr, 位异或 (临时 [x], y))
.计次循环尾 ()
返回 (到文本 (outstr))


.子程序 加解密文本_Crc32, 文本型, 公开, 返回16进制CRC32加密
.参数 原文, 字节集, , 要取CRC32数据字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，为真小写。

.局部变量 crcval, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 文本型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 crc, 整数型, , , 
.局部变量 table, 整数型, , "256", 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 (“”)
.如果真结束
.变量循环首 (0, 255, 1, i) ' 用来得到码表
    赋值 (crc, i)
    .变量循环首 (1, 8, 1, )
        .如果 (不等于 (位与 (crc, 1), 0))
            赋值 (crc, 位异或 (位与 (右移 (crc, 1), 2147483647), 3988292384)) ' crc xor EDB88320
        .否则
            赋值 (crc, 位与 (右移 (crc, 1), 2147483647))
        .如果结束
        
    .变量循环尾 ()
    赋值 (table [相加 (i, 1)], crc)
.变量循环尾 ()
赋值 (crcval, 4294967295)
.计次循环首 (长度, i)
    赋值 (位置, 相加 (位异或 (原文 [i], 位与 (crcval, 255)), 1)) ' 查表
    赋值 (crcval, 位异或 (位与 (右移 (crcval, 8), 16777215), table [位置]))
.计次循环尾 ()
赋值 (结果, 数值_取十六进制文本 (位取反 (crcval)))
.如果真 (是否为小写)
    赋值 (结果, 文本_到小写 (结果))
.如果真结束
返回 (结果)


.子程序 加解密字节_Rc4, 字节集, 公开, RC4加解密，与易的输出形式一样，可能和其它加解密程序输出形式不一样，可自行进行相应调整。
.参数 原文, 字节集, , 需要加、解密的字节集
.参数 密码, 文本型, , 输入相应的密码

.局部变量 m, 字节型, , "256", 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 key, 字节集, , , 
.局部变量 密码长度, 整数型, , , 
.局部变量 原文长度, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 x, 整数型, , , 
.局部变量 k, 字节型, , "256", 
.局部变量 temp, 字节型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
赋值 (密码长度, 文本_取文本长度 (密码))
赋值 (结果, 字节集_取空白字节集 (原文长度))
.计次循环首 (256, i)
    赋值 (m [i], 相减 (i, 1))
.计次循环尾 ()
.如果真 (大于 (密码长度, 0))
    赋值 (key, 字节集_文本到字节集 (密码))
    赋值 (j, 1)
    .计次循环首 (256, i)
        赋值 (k [i], key [j])
        赋值 (j, 相加 (j, 1))
        .如果真 (大于 (j, 密码长度))
            赋值 (j, 1)
        .如果真结束
        
    .计次循环尾 ()
    赋值 (j, 0)
    .计次循环首 (256, i)
        赋值 (j, 位与 (相加 (j, m [i], k [i]), 255))
        赋值 (temp, m [i])
        赋值 (m [i], m [相加 (j, 1)])
        赋值 (m [相加 (j, 1)], temp)
    .计次循环尾 ()
.如果真结束
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (原文长度, x)
    赋值 (i, 位与 (相加 (i, 1), 255))
    赋值 (j, 位与 (相加 (j, m [相加 (i, 1)]), 255))
    赋值 (temp, m [相加 (i, 1)])
    赋值 (m [相加 (i, 1)], m [相加 (j, 1)])
    赋值 (m [相加 (j, 1)], temp)
    赋值 (结果 [x], 位异或 (原文 [x], m [相加 (位与 (相加 (m [相加 (i, 1)], m [相加 (j, 1)]), 255), 1)]))
.计次循环尾 ()
返回 (结果)

.子程序 加解密文本_Md5, 文本型, 公开, 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32771, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)

.子程序 加解密文本_Md4, 文本型, 公开, 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32770, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.子程序 加解密文本_Md2, 文本型, 公开, 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为16位, 逻辑型, 可空, 默认为32位的，真为16位
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32769, 16))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为16位)
        赋值 (结果, 文本_取文本中间 (结果, 9, 16))
    .如果真结束
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.子程序 加解密文本_Sha1, 文本型, 公开, 
.参数 原文, 字节集, , 要取数据摘要的字节集
.参数 是否为小写, 逻辑型, 可空, 默认为大写，真为小写

.局部变量 结果, 文本型, , , 

赋值 (结果, 哈希 (原文, 32772, 20))
.如果真 (不等于 (结果, “”))
    .如果真 (是否为小写)
        赋值 (结果, 文本_到小写 (结果))
    .如果真结束
    
.如果真结束
返回 (结果)


.子程序 加密QQ密码, 文本型, 公开, 将QQ密码转换为MD5密码
.参数 密码, 文本型, , 

.局部变量 摘要文本, 文本型, , , 
.局部变量 摘要字节集, 字节集, , , 
.局部变量 a, 整数型, , , 

赋值 (摘要文本, 加密.加解密文本_Md5 (到字节集 (密码)))
赋值 (摘要字节集, 取空白字节集 (16))
.计次循环首 (16, a)
    赋值 (摘要字节集 [a], 到字节 (编码.十六到十 (取文本中间 (摘要文本, 相加 (相乘 (相减 (a, 1), 2), 1), 2))))
.计次循环尾 ()
返回 (编码.Base64编码 (摘要字节集))


.类模块 数值操作, , , 

.子程序 取十六进制文本, 文本型, 公开, 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 文本_取空白文本 (8))
返回 (ret)

.子程序 子程序指针到整数, 整数型, 公开, 
.参数 x, 子程序指针, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

赋值 (address, 取指针_子程序指针 (x))
RtlMoveMemory_整数 (ret, address, 4)
返回 (ret)

.子程序 字节集到整数, 整数型, 公开, 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 取指针_字节集 (字节集))
赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 4))
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 4)
.如果结束
返回 (ret)


.子程序 字节集到短整数, 短整数型, 公开, 
.参数 字节集, 字节集, , 
.参数 位置, 整数型, 可空, 默认为1

.局部变量 ret, 整数型, , , 
.局部变量 address, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (address, 取指针_字节集 (字节集))
赋值 (len, 字节集_取字节集长度 (字节集))
.如果真 (是否为空 (位置))
    赋值 (位置, 1)
.如果真结束
.如果真 (或者 (大于 (位置, len), 小于 (位置, 1)))
    返回 (0)
.如果真结束
.如果 (小于 (相减 (len, 位置), 2))
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 相加 (相减 (len, 位置), 1))
.否则
    RtlMoveMemory_整数 (ret, 相减 (相加 (address, 位置), 1), 2)
.如果结束
返回 (ret)


.子程序 取十进制, 长整数型, 公开, 
.参数 欲转换的文本, 文本型, , 
.参数 进制, 整数型, , 文本的进制：#十六进制,#十进制,#八进制，#二进制

.局部变量 ret, 长整数型, , , 

.如果真 (等于 (进制, #转换_十进制)) ' 不想改汇编了，呵呵，就用API吧。
    StrToInt64Ex (欲转换的文本, 0, ret)
    返回 (ret)
.如果真结束
返回 (0)

.子程序 长整数到整数, 整数型, 公开, 
.参数 x, 长整数型, , 

.局部变量 address, 空白型, , , 
.局部变量 ret, 空白型, , , 

返回 (x)

.子程序 整除, 整数型, 公开, 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 

返回 (相除 (被除数, 除数))


.子程序 合并整数, 整数型, 公开, 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 65535), 左移 (用作合并的整数2, 16)))


.子程序 合并短整数, 短整数型, 公开, 
.参数 用作合并的整数1, 整数型, , 
.参数 用作合并的整数2, 整数型, , 

返回 (位或 (位与 (用作合并的整数1, 255), 左移 (用作合并的整数2, 8)))


.子程序 绝对取整, 整数型, 公开, 
.参数 欲取整的小数, 双精度小数型, , 

返回 (欲取整的小数)


.子程序 取整, 整数型, 公开, 
.参数 欲取整的小数, 双精度小数型, , 

.如果 (大于或等于 (欲取整的小数, 0))
    返回 (欲取整的小数)
.否则
    返回 (相减 (欲取整的小数, 0.5))
.如果结束



.子程序 求反正弦, 双精度小数型, 公开, 
.参数 正弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (小于 (正弦值, -1), 大于 (正弦值, 1)))
    返回 (0)
.如果真结束
返回 (求反正切 (相除 (正弦值, 求平方根 (相减 (1, 相乘 (正弦值, 正弦值))))))

.子程序 求反余弦, 双精度小数型, 公开, 
.参数 余弦值, 双精度小数型, , -1到1，否则返回0

.如果真 (或者 (大于 (余弦值, 1), 小于 (余弦值, -1)))
    返回 (0)
.如果真结束
返回 (相减 (相除 (#pi, 2), 求反正弦 (余弦值)))

.类模块 编码操作, , , 

.子程序 URL解码, 文本型, , 
.参数 URL, 文本型, , 

.局部变量 循环容器, 整数型, , , 
.局部变量 Len, 整数型, , , 
.局部变量 HEX, 文本型, , , 
.局部变量 目标, 文本型, , , 
.局部变量 H, 整数型, , , 
.局部变量 L, 整数型, , , 

赋值 (Len, 取文本长度 (URL))
赋值 (循环容器, 1)
赋值 (HEX, “0123456789ABCDEF”)
.判断循环首 (小于或等于 (循环容器, Len))
    .判断开始 (不等于 (取文本中间 (URL, 循环容器, 1), “%”))
        赋值 (目标, 相加 (目标, 取文本中间 (URL, 循环容器, 1)))
    .默认
        赋值 (循环容器, 相加 (循环容器, 1))
        赋值 (H, 相减 (寻找文本 (HEX, 到大写 (取文本中间 (URL, 循环容器, 1)), , 假), 1))
        赋值 (循环容器, 相加 (循环容器, 1))
        赋值 (L, 相减 (寻找文本 (HEX, 到大写 (取文本中间 (URL, 循环容器, 1)), , 假), 1))
        赋值 (目标, 相加 (目标, 字符 (相加 (相乘 (H, 16), L))))
    .判断结束
    赋值 (循环容器, 相加 (循环容器, 1))
.判断循环尾 ()
返回 (目标)

.子程序 URL编码, 文本型, , 
.参数 URL, 文本型, , 

.局部变量 Len, 整数型, , , 
.局部变量 循环容器, 整数型, , , 
.局部变量 Asc, 整数型, , , 
.局部变量 目标, 文本型, , , 
.局部变量 临时, 文本型, , , 

赋值 (Len, 取文本长度 (URL))
.变量循环首 (1, Len, 1, 循环容器)
    赋值 (Asc, 取代码 (URL, 循环容器))
    赋值 (Asc, 选择 (小于 (Asc, 0), 相加 (256, Asc), Asc))
    .如果 (或者 (小于 (Asc, 42), 等于 (Asc, 43), 并且 (大于 (Asc, 57), 小于 (Asc, 64)), 并且 (大于 (Asc, 90), 小于 (Asc, 95)), 等于 (Asc, 96), 大于 (Asc, 122)))
        赋值 (临时, 取十六进制文本 (Asc))
        赋值 (目标, 相加 (目标, 选择 (小于 (取文本长度 (临时), 2), 相加 (“%0”, 临时), 相加 (“%”, 临时))))
    .否则
        赋值 (目标, 相加 (目标, 字符 (Asc)))
    .如果结束
    
.变量循环尾 ()
返回 (目标)

.子程序 取随机数字, 文本型, , 
置随机数种子 ()
返回 (到文本 (取随机数 (0, 9)))

.子程序 取随机字母, 文本型, , 
.局部变量 临时变量, 整数型, , , 

置随机数种子 ()
赋值 (临时变量, 取随机数 (1, 26))
.判断开始 (等于 (临时变量, 1))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“A”)
    .默认
        返回 (“a”)
    .判断结束
    
.判断 (等于 (临时变量, 2))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“B”)
    .默认
        返回 (“b”)
    .判断结束
    
.判断 (等于 (临时变量, 3))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“C”)
    .默认
        返回 (“c”)
    .判断结束
    
.判断 (等于 (临时变量, 4))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“D”)
    .默认
        返回 (“d”)
    .判断结束
    
.判断 (等于 (临时变量, 5))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“E”)
    .默认
        返回 (“e”)
    .判断结束
    
.判断 (等于 (临时变量, 6))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“F”)
    .默认
        返回 (“f”)
    .判断结束
    
.判断 (等于 (临时变量, 7))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“G”)
    .默认
        返回 (“g”)
    .判断结束
    
.判断 (等于 (临时变量, 8))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“H”)
    .默认
        返回 (“h”)
    .判断结束
    
.判断 (等于 (临时变量, 9))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“I”)
    .默认
        返回 (“i”)
    .判断结束
    
.判断 (等于 (临时变量, 10))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“J”)
    .默认
        返回 (“j”)
    .判断结束
    
.判断 (等于 (临时变量, 11))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“K”)
    .默认
        返回 (“k”)
    .判断结束
    
.判断 (等于 (临时变量, 12))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“L”)
    .默认
        返回 (“l”)
    .判断结束
    
.判断 (等于 (临时变量, 13))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“M”)
    .默认
        返回 (“m”)
    .判断结束
    
.判断 (等于 (临时变量, 14))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“N”)
    .默认
        返回 (“n”)
    .判断结束
    
.判断 (等于 (临时变量, 15))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“O”)
    .默认
        返回 (“o”)
    .判断结束
    
.判断 (等于 (临时变量, 16))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“P”)
    .默认
        返回 (“p”)
    .判断结束
    
.判断 (等于 (临时变量, 17))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“Q”)
    .默认
        返回 (“q”)
    .判断结束
    
.判断 (等于 (临时变量, 18))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“R”)
    .默认
        返回 (“r”)
    .判断结束
    
.判断 (等于 (临时变量, 19))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“S”)
    .默认
        返回 (“s”)
    .判断结束
    
.判断 (等于 (临时变量, 20))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“T”)
    .默认
        返回 (“t”)
    .判断结束
    
.判断 (等于 (临时变量, 21))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“U”)
    .默认
        返回 (“u”)
    .判断结束
    
.判断 (等于 (临时变量, 22))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“V”)
    .默认
        返回 (“v”)
    .判断结束
    
.判断 (等于 (临时变量, 23))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“W”)
    .默认
        返回 (“w”)
    .判断结束
    
.判断 (等于 (临时变量, 24))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“X”)
    .默认
        返回 (“x”)
    .判断结束
    
.判断 (等于 (临时变量, 25))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“Y”)
    .默认
        返回 (“y”)
    .判断结束
    
.判断 (等于 (临时变量, 26))
    .判断开始 (等于 (取随机数 (0, 1), 0))
        返回 (“Z”)
    .默认
        返回 (“z”)
    .判断结束
    
.默认
    返回 (“?”)
.判断结束


.子程序 取随机文本, 文本型, , 
.参数 欲取出长度, 整数型, 可空, 

.局部变量 循环记录, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

.如果真 (等于 (欲取出长度, 0))
    赋值 (欲取出长度, 32)
.如果真结束
.计次循环首 (欲取出长度, 循环记录)
    置随机数种子 ()
    .判断开始 (等于 (取随机数 (0, 1), 0))
        赋值 (临时文本, 相加 (临时文本, 取随机数字 ()))
    .默认
        赋值 (临时文本, 相加 (临时文本, 取随机字母 ()))
    .判断结束
    
.计次循环尾 ()
返回 (临时文本)

.子程序 还原为字节集, 字节集, , 
.参数 原始16进制文本, 文本型, , 

.局部变量 字节集, 字节集, , , 
.局部变量 次数, 整数型, , , 
.局部变量 临时变量, 整数型, , , 

赋值 (字节集, {  })
.变量循环首 (1, 取文本长度 (原始16进制文本), 2, 次数)
    赋值 (临时变量, 取十进制 (取文本中间 (原始16进制文本, 次数, 2), 0))
    赋值 (字节集, 相加 (字节集, 取字节集左边 (到字节集 (临时变量), 1)))
.变量循环尾 ()
返回 (字节集)

.子程序 取十进制, 整数型, , 
.参数 欲转换的值, 文本型, , 
.参数 数值类型, 整数型, 可空, 0，#十六进制；1，#十进制（默认）；2，#八进制；3，#二进制

.局部变量 s, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 c, 文本型, , , 
.局部变量 d, 整数型, , , 

赋值 (欲转换的值, 到小写 (欲转换的值))
.如果真 (是否为空 (数值类型))
    赋值 (数值类型, 1)
.如果真结束
赋值 (s, 0)
.判断开始 (等于 (数值类型, 0))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (或者 (并且 (小于或等于 (取代码 (c, ), 取代码 (“f”, )), 大于或等于 (取代码 (c, ), 取代码 (“a”, ))), 并且 (小于或等于 (取代码 (c, ), 取代码 (“F”, )), 大于或等于 (取代码 (c, ), 取代码 (“A”, )))))
            .如果真 (并且 (大于或等于 (取代码 (c, ), 取代码 (“A”, )), 小于或等于 (取代码 (c, ), 取代码 (“F”, ))))
                赋值 (d, 相加 (相减 (取代码 (c, ), 取代码 (“A”, )), 10))
            .如果真结束
            .如果真 (并且 (大于或等于 (取代码 (c, ), 取代码 (“a”, )), 小于或等于 (取代码 (c, ), 取代码 (“f”, ))))
                赋值 (d, 相加 (相减 (取代码 (c, ), 取代码 (“a”, )), 10))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“9”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (16, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (数值类型, 1))
    赋值 (s, 到数值 (欲转换的值))
.默认
    
.判断结束
.判断开始 (等于 (数值类型, 2))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“7”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (8, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (数值类型, 3))
    赋值 (a, 取文本长度 (欲转换的值))
    .变量循环首 (1, a, 1, b)
        赋值 (c, 取文本中间 (欲转换的值, 相加 (相减 (a, b), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (c, ), 取代码 (“1”, )), 大于或等于 (取代码 (c, ), 取代码 (“0”, ))))
            赋值 (d, 到数值 (c))
        .如果真结束
        赋值 (s, 相加 (s, 相乘 (求次方 (2, 相减 (b, 1)), d)))
    .变量循环尾 ()
.默认
    
.判断结束
返回 (s)

.子程序 字节集到十六进制, 文本型, , 
.参数 初始字节集, 字节集, , 

.局部变量 进制文本, 文本型, , , 
.局部变量 次数, 整数型, , , 
.局部变量 日标值, 整数型, , , 

赋值 (进制文本, “”)
赋值 (日标值, 取字节集长度 (初始字节集))
.变量循环首 (1, 日标值, 1, 次数)
    赋值 (进制文本, 相加 (进制文本, 取十六进制文本 (取字节集数据 (取字节集中间 (初始字节集, 次数, 1), 3, ))))
.变量循环尾 ()
返回 (进制文本)

.子程序 Qp编码, 字节集, , 用于Quoted-Printable编码、URL编码
.参数 原文, 字节集, , 要进行编码的字节集
.参数 编码类型, 逻辑型, 可空, 真为URL，假为QP，默认为QP

.局部变量 原文长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 整数型, , , 
.局部变量 新码表, 字节型, , "256,2", 
.局部变量 临时字节, 字节型, , , 
.局部变量 码表, 字节集, , , 
.局部变量 url, 空白型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (原文长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 })
.如果 (编码类型)
    赋值 (url, 37)
.否则
    赋值 (url, 61)
.如果结束
.变量循环首 (0, 255, 1, i)
    赋值 (新码表 [相加 (i, 1)] [1], 码表 [相加 (右移 (i, 4), 1)])
    赋值 (新码表 [相加 (i, 1)] [2], 码表 [相加 (位与 (i, 15), 1)])
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相乘 (原文长度, 3)))
赋值 (j, 1)
.变量循环首 (1, 原文长度, 1, i)
    赋值 (临时字节, 原文 [i])
    赋值 (结果 [j], url)
    赋值 (结果 [相加 (j, 1)], 新码表 [相加 (临时字节, 1)] [1])
    赋值 (结果 [相加 (j, 2)], 新码表 [相加 (临时字节, 1)] [2])
    赋值 (j, 相加 (j, 3))
.变量循环尾 ()
返回 (结果)



.子程序 Qp解码, 字节集, , 用于Quoted-Printable解码,也可用来解码URL
.参数 原文, 字节集, , 要进行解码的字节集

.局部变量 长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 j, 空白型, , , 
.局部变量 新码表, 字节型, , "70,70", 
.局部变量 码表, 字节集, , , 

赋值 (长度, 字节集_取字节集长度 (原文))
.如果真 (小于 (长度, 1))
    返回 ({  })
.如果真结束
赋值 (码表, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 })
.变量循环首 (0, 15, 1, i)
    .变量循环首 (0, 15, 1, j)
        赋值 (新码表 [码表] [相加 (i, 1)] [码表] [相加 (j, 1)], 相加 (左移 (i, 4), j))
    .变量循环尾 ()
.变量循环尾 ()
赋值 (结果, 字节集_取空白字节集 (相除 (长度, 3)))
赋值 (j, 1)
.变量循环首 (2, 相减 (长度, 1), 3, i)
    赋值 (结果 [j], 新码表 [原文] [i] [原文] [相加 (i, 1)])
    赋值 (j, 相加 (j, 1))
.变量循环尾 ()
返回 (结果)



.子程序 Base64编码, 文本型, , 不需要汇编
.参数 原文, 字节集, , 

.局部变量 余数, 整数型, , , 
.局部变量 三字节数据, 字节型, , "3", 
.局部变量 码表, 字节集, , , 
.局部变量 len_x, 整数型, , , 
.局部变量 len_y, 整数型, , , 
.局部变量 结果, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 k, 整数型, , , 

赋值 (len_x, 字节集_取字节集长度 (原文))
.如果真 (小于 (len_x, 1))
    返回 (“”)
.如果真结束
赋值 (余数, 求余数 (len_x, 3))
.如果真 (大于 (余数, 0))
    赋值 (原文, 相加 (原文, 字节集_取空白字节集 (相减 (3, 余数))))
    赋值 (len_x, 相减 (相加 (len_x, 3), 余数))
.如果真结束
赋值 (len_y, 相除 (相乘 (len_x, 4), 3))
赋值 (结果, 字节集_取空白字节集 (len_y))
赋值 (i, 1)
赋值 (码表, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 })
.变量循环首 (1, len_x, 3, k)
    赋值 (三字节数据 [1], 原文 [k])
    赋值 (三字节数据 [2], 原文 [相加 (k, 1)])
    赋值 (三字节数据 [3], 原文 [相加 (k, 2)])
    赋值 (结果 [i], 码表 [相加 (右移 (三字节数据 [1], 2), 1)])
    赋值 (结果 [相加 (i, 1)], 码表 [相加 (左移 (位与 (三字节数据 [1], 3), 4), 右移 (三字节数据 [2], 4), 1)])
    赋值 (结果 [相加 (i, 2)], 码表 [相加 (左移 (位与 (三字节数据 [2], 15), 2), 右移 (三字节数据 [3], 6), 1)])
    赋值 (结果 [相加 (i, 3)], 码表 [相加 (位与 (三字节数据 [3], 63), 1)])
    赋值 (i, 相加 (i, 4))
.变量循环尾 ()
.判断开始 (等于 (余数, 2))
    赋值 (结果 [len_y], 61)
.判断 (等于 (余数, 1))
    赋值 (结果 [len_y], 61)
    赋值 (结果 [相减 (len_y, 1)], 61)
.默认
    
.判断结束
返回 (到文本 (结果))


.子程序 Base64解码, 字节集, , 不需要汇编
.参数 原文, 字节集, , 

.局部变量 码表, 字节集, , , 
.局部变量 位置码表, 字节型, , "256", 
.局部变量 结果, 字节集, , , 
.局部变量 原文长度, 整数型, , , 
.局部变量 补码, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 四字节数据, 字节型, , "4", 
.局部变量 j, 整数型, , , 

赋值 (原文长度, 字节集_取字节集长度 (原文))
.如果真 (等于 (原文长度, 0))
    返回 ({  })
.如果真结束
赋值 (码表, { 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47 })
.计次循环首 (64, i)
    赋值 (位置码表 [码表] [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (补码, 0)
.判断开始 (等于 (字节集_取字节集右边 (原文, 2), { 61, 61 }))
    赋值 (补码, 2)
.判断 (等于 (字节集_取字节集右边 (原文, 1), { 61 }))
    赋值 (补码, 1)
.默认
    
.判断结束
赋值 (结果, 字节集_取空白字节集 (相乘 (相除 (原文长度, 4), 3)))
赋值 (j, 1)
.变量循环首 (1, 相减 (原文长度, 3), 4, i)
    赋值 (四字节数据 [1], 位置码表 [原文] [i])
    赋值 (四字节数据 [2], 位置码表 [原文] [相加 (i, 1)])
    赋值 (四字节数据 [3], 位置码表 [原文] [相加 (i, 2)])
    赋值 (四字节数据 [4], 位置码表 [原文] [相加 (i, 3)])
    赋值 (结果 [j], 相加 (左移 (四字节数据 [1], 2), 右移 (四字节数据 [2], 4)))
    赋值 (结果 [相加 (j, 1)], 相加 (左移 (四字节数据 [2], 4), 右移 (四字节数据 [3], 2)))
    赋值 (结果 [相加 (j, 2)], 相加 (左移 (四字节数据 [3], 6), 四字节数据 [4]))
    赋值 (j, 相加 (j, 3))
.变量循环尾 ()
.如果真 (大于 (补码, 0))
    赋值 (结果, 字节集_取字节集左边 (结果, 相减 (字节集_取字节集长度 (结果), 补码)))
.如果真结束
返回 (结果)

.子程序 Ansi转Unicode, 字节集, , 
.参数 Ansi文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 

赋值 (len, API_MultiByteToWideChar (936, 0, Ansi文本, -1, {  }, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (936, 0, Ansi文本, -1, Unicode字节集, 相乘 (len, 2))
返回 (Unicode字节集)

.子程序 Unicode转Ansi, 文本型, , 
.参数 Unicode字节集, 字节集, , 

.局部变量 ansi_len, 整数型, , , 单位: Word
.局部变量 unicode_len, 空白型, , , 
.局部变量 ansi, 文本型, , , 

赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (ansi_len, API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, ansi, 0, “”, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (ansi, 文本_取空白文本 (ansi_len))
 ' 输出调试文本 (ansi_len)
API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, ansi, ansi_len, “”, 0)
返回 (ansi)

.子程序 Utf8转unicode, 字节集, , 
.参数 utf8字节集, 字节集, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 ll, 空白型, , , 

赋值 (ll, 字节集_取字节集长度 (utf8字节集))
赋值 (len, API_MultiByteToWideChar_utf8 (65001, 0, utf8字节集, ll, {  }, 0))
 ' 936 表示简体中文代码页; -1 表示以"0"作为文本终止符
 ' 如果要去掉转换后Unicode字节集末尾的{0,0}，则Unicode长度再减去1
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar_utf8 (65001, 0, utf8字节集, ll, Unicode字节集, 相乘 (len, 2))
返回 (Unicode字节集)

.子程序 Unicode转utf8, 字节集, , 
.参数 Unicode字节集, 字节集, , 

.局部变量 utf8_len, 整数型, , , 
.局部变量 unicode_len, 空白型, , , word
.局部变量 uft8, 字节集, , , 

赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (utf8_len, API_WideCharToMultiByte_utf8 (65001, 0, Unicode字节集, unicode_len, uft8, 0, 0, 0))
赋值 (uft8, 字节集_取空白字节集 (utf8_len))
 ' 输出调试文本 (utf8_len)
API_WideCharToMultiByte_utf8 (65001, 0, Unicode字节集, -1, uft8, utf8_len, 0, 0)
返回 (uft8)

.子程序 Ansi转utf8, 字节集, , 
.参数 ansi文本, 文本型, , 

返回 (Unicode转utf8 (Ansi转Unicode (ansi文本)))


.子程序 Utf8转ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 

返回 (Unicode转Ansi (Utf8转unicode (utf8字节集)))


.子程序 Ansi转usc2, 文本型, , usc2也就是unicode be
.参数 文本, 文本型, , 

.局部变量 unicode字节集, 字节集, , , 
.局部变量 len, 空白型, , , 
.局部变量 ret, 字节集, , , 

赋值 (unicode字节集, Ansi转Unicode (文本))
赋值 (len, 字节集_取字节集长度 (unicode字节集))
RtlMoveMemory_整数 (相减 (取指针_字节集 (unicode字节集), 4), 相减 (len, 2), 4)
赋值 (ret, 字符交换 (unicode字节集))
返回 (输出字节集 (ret))


.子程序 Usc2转ansi, 文本型, , usc2也就是unicode be
.参数 usc2文本, 文本型, , 

.局部变量 unicode字节集, 字节集, , , 

赋值 (unicode字节集, 相加 (字符交换 (转到字节集 (字节集_文本到字节集 (usc2文本))), { 0, 0 }))
返回 (Unicode转Ansi (unicode字节集))



.子程序 GBK简体到GBK繁体, 文本型, , 
.参数 简体文本, 文本型, , 

.局部变量 文本长度, 整数型, , , 
.局部变量 繁体文本, 文本型, , , 

赋值 (文本长度, 文本_取文本长度 (简体文本))
赋值 (繁体文本, 文本_取空白文本 (文本长度))
LCMapString (2052, 67108864, 简体文本, 文本长度, 繁体文本, 文本长度)
返回 (繁体文本)

.子程序 GBK繁体到GBK简体, 文本型, , 
.参数 繁体文本, 文本型, , 

.局部变量 文本长度, 整数型, , , 
.局部变量 简体文本, 文本型, , , 

赋值 (文本长度, 文本_取文本长度 (繁体文本))
赋值 (简体文本, 文本_取空白文本 (文本长度))
LCMapString (2052, 33554432, 繁体文本, 文本长度, 简体文本, 文本长度)
返回 (简体文本)

.子程序 BIG5到GBK繁体, 文本型, , 
.参数 待转换文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (len, API_MultiByteToWideChar (950, 0, 待转换文本, -1, {  }, 0))
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (950, 0, 待转换文本, -1, Unicode字节集, 相乘 (len, 2))
 ' ////////////////////
赋值 (unicode_len, 相除 (取字节集长度 (Unicode字节集), 2))
赋值 (len, API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, 结果文本, 0, “”, 0))
赋值 (结果文本, 文本_取空白文本 (len))
API_WideCharToMultiByte (936, 0, Unicode字节集, unicode_len, 结果文本, len, “”, 0)
返回 (结果文本)


.子程序 BIG5到GBK简体, 文本型, , 
.参数 待转换文本, 文本型, , 

返回 (GBK繁体到GBK简体 (BIG5到GBK繁体 (待转换文本)))


.子程序 GBK繁体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 

.局部变量 len, 整数型, , , 单位: Word
.局部变量 Unicode字节集, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 结果文本, 文本型, , , 

赋值 (len, API_MultiByteToWideChar (936, 0, 待转换文本, -1, {  }, 0))
赋值 (Unicode字节集, 字节集_取空白字节集 (相乘 (len, 2)))
API_MultiByteToWideChar (936, 0, 待转换文本, -1, Unicode字节集, 相乘 (len, 2))
 ' ////////////////////
赋值 (unicode_len, 相除 (字节集_取字节集长度 (Unicode字节集), 2))
赋值 (len, API_WideCharToMultiByte (950, 0, Unicode字节集, unicode_len, 结果文本, 0, “”, 0))
赋值 (结果文本, 文本_取空白文本 (len))
API_WideCharToMultiByte (950, 0, Unicode字节集, unicode_len, 结果文本, len, “”, 0)
返回 (结果文本)


.子程序 GBK简体到BIG5, 文本型, , 
.参数 待转换文本, 文本型, , 

返回 (GBK繁体到BIG5 (GBK简体到GBK繁体 (待转换文本)))


.子程序 转换简体到繁体, 文本型, , 将简体中文转换成繁体中文(返回转换后的繁体内容)
.参数 简体文本, 文本型, , 欲转换的文本内容

.局部变量 文本长度, 整数型, , , 
.局部变量 繁体文本, 文本型, , , 

赋值 (文本长度, lstrlen (简体文本))
赋值 (繁体文本, 取空白文本 (文本长度))
LCMapString (2052, 67108864, 简体文本, 文本长度, 繁体文本, 文本长度)
返回 (繁体文本)
 ' 第一个参数Locale在这里代表所处理的文本的编码格式，2052为中文GBK编码。
 ' 第二个参数dwMapFlags代表转换目标类型，67108864为到繁体类型，33554432为到简体类型


.子程序 转换繁体到简体, 文本型, , 将繁体中文转换成简体中文(返回转换后的简体内容)
.参数 繁体文本, 文本型, , 欲转换的文本内容

.局部变量 文本长度, 整数型, , , 
.局部变量 简体文本, 文本型, , , 

赋值 (文本长度, lstrlen (繁体文本))
赋值 (简体文本, 取空白文本 (文本长度))
LCMapString (2052, 33554432, 繁体文本, 文本长度, 简体文本, 文本长度)
返回 (简体文本)


.子程序 转换时间为GMT格式, 文本型, , 将日期时间型数据转换为GMT格式
.参数 待转换时间, 日期时间型, , 

.局部变量 整数容器, 整数型, , , 
.局部变量 GMT时间, 文本型, , , 

赋值 (整数容器, 取星期几 (待转换时间))
.判断开始 (等于 (整数容器, 1))
    赋值 (GMT时间, “Sun, ”)
.判断 (等于 (整数容器, 2))
    赋值 (GMT时间, “Mon, ”)
.判断 (等于 (整数容器, 3))
    赋值 (GMT时间, “Tue, ”)
.判断 (等于 (整数容器, 4))
    赋值 (GMT时间, “Wen, ”)
.判断 (等于 (整数容器, 5))
    赋值 (GMT时间, “Thu, ”)
.判断 (等于 (整数容器, 6))
    赋值 (GMT时间, “Fri, ”)
.判断 (等于 (整数容器, 7))
    赋值 (GMT时间, “Sat, ”)
.默认
    
.判断结束
赋值 (GMT时间, 相加 (GMT时间, 到文本 (取日 (待转换时间)), “-”))
赋值 (整数容器, 取月份 (待转换时间))
.判断开始 (等于 (整数容器, 1))
    赋值 (GMT时间, 相加 (GMT时间, “Jan”, “-”))
.判断 (等于 (整数容器, 2))
    赋值 (GMT时间, 相加 (GMT时间, “Feb”, “-”))
.判断 (等于 (整数容器, 3))
    赋值 (GMT时间, 相加 (GMT时间, “Mar”, “-”))
.判断 (等于 (整数容器, 4))
    赋值 (GMT时间, 相加 (GMT时间, “Apr”, “-”))
.判断 (等于 (整数容器, 5))
    赋值 (GMT时间, 相加 (GMT时间, “Mar”, “-”))
.判断 (等于 (整数容器, 6))
    赋值 (GMT时间, 相加 (GMT时间, “Jun”, “-”))
.判断 (等于 (整数容器, 7))
    赋值 (GMT时间, 相加 (GMT时间, “Jul”, “-”))
.判断 (等于 (整数容器, 8))
    赋值 (GMT时间, 相加 (GMT时间, “Aug”, “-”))
.判断 (等于 (整数容器, 9))
    赋值 (GMT时间, 相加 (GMT时间, “Sep”, “-”))
.判断 (等于 (整数容器, 10))
    赋值 (GMT时间, 相加 (GMT时间, “Oct”, “-”))
.判断 (等于 (整数容器, 11))
    赋值 (GMT时间, 相加 (GMT时间, “Nov”, “-”))
.判断 (等于 (整数容器, 12))
    赋值 (GMT时间, 相加 (GMT时间, “Dec”, “-”))
.默认
    
.判断结束
赋值 (GMT时间, 相加 (GMT时间, 到文本 (取年份 (待转换时间)), “ ”, 到文本 (取小时 (待转换时间)), “:”, 到文本 (取分钟 (待转换时间)), “:”, 到文本 (取秒 (待转换时间)), “ GMT”))
返回 (GMT时间)


.子程序 取键码, 整数型, , 取指定键码的按键名(返回键名,无效返回空文本)
.参数 键名, 文本型, , 欲取键码的键名(键名为按键后显示的内容 比如:A=65,a=97,$=36)

.如果真 (等于 (键名, “ ”))
    返回 (32)
.如果真结束
.如果真 (等于 (键名, “!”))
    返回 (33)
.如果真结束
.如果真 (等于 (键名, #引号))
    返回 (34)
.如果真结束
.如果真 (等于 (键名, “#”))
    返回 (35)
.如果真结束
.如果真 (等于 (键名, “$”))
    返回 (36)
.如果真结束
.如果真 (等于 (键名, “%”))
    返回 (37)
.如果真结束
.如果真 (等于 (键名, “&”))
    返回 (38)
.如果真结束
.如果真 (等于 (键名, “'”))
    返回 (39)
.如果真结束
.如果真 (等于 (键名, “(”))
    返回 (40)
.如果真结束
.如果真 (等于 (键名, “)”))
    返回 (41)
.如果真结束
.如果真 (等于 (键名, “*”))
    返回 (42)
.如果真结束
.如果真 (等于 (键名, “+”))
    返回 (43)
.如果真结束
.如果真 (等于 (键名, “,”))
    返回 (44)
.如果真结束
.如果真 (等于 (键名, “-”))
    返回 (45)
.如果真结束
.如果真 (等于 (键名, “.”))
    返回 (46)
.如果真结束
.如果真 (等于 (键名, “/”))
    返回 (47)
.如果真结束
.如果真 (等于 (键名, “0”))
    返回 (48)
.如果真结束
.如果真 (等于 (键名, “1”))
    返回 (49)
.如果真结束
.如果真 (等于 (键名, “2”))
    返回 (50)
.如果真结束
.如果真 (等于 (键名, “3”))
    返回 (51)
.如果真结束
.如果真 (等于 (键名, “4”))
    返回 (52)
.如果真结束
.如果真 (等于 (键名, “5”))
    返回 (53)
.如果真结束
.如果真 (等于 (键名, “6”))
    返回 (54)
.如果真结束
.如果真 (等于 (键名, “7”))
    返回 (55)
.如果真结束
.如果真 (等于 (键名, “8”))
    返回 (56)
.如果真结束
.如果真 (等于 (键名, “9”))
    返回 (57)
.如果真结束
.如果真 (等于 (键名, “:”))
    返回 (58)
.如果真结束
.如果真 (等于 (键名, “;”))
    返回 (59)
.如果真结束
.如果真 (等于 (键名, “<”))
    返回 (60)
.如果真结束
.如果真 (等于 (键名, “=”))
    返回 (61)
.如果真结束
.如果真 (等于 (键名, “>”))
    返回 (62)
.如果真结束
.如果真 (等于 (键名, “?”))
    返回 (63)
.如果真结束
.如果真 (等于 (键名, “@”))
    返回 (64)
.如果真结束
.如果真 (等于 (键名, “A”))
    返回 (65)
.如果真结束
.如果真 (等于 (键名, “B”))
    返回 (66)
.如果真结束
.如果真 (等于 (键名, “C”))
    返回 (67)
.如果真结束
.如果真 (等于 (键名, “D”))
    返回 (68)
.如果真结束
.如果真 (等于 (键名, “E”))
    返回 (69)
.如果真结束
.如果真 (等于 (键名, “F”))
    返回 (70)
.如果真结束
.如果真 (等于 (键名, “G”))
    返回 (71)
.如果真结束
.如果真 (等于 (键名, “H”))
    返回 (72)
.如果真结束
.如果真 (等于 (键名, “I”))
    返回 (73)
.如果真结束
.如果真 (等于 (键名, “J”))
    返回 (74)
.如果真结束
.如果真 (等于 (键名, “K”))
    返回 (75)
.如果真结束
.如果真 (等于 (键名, “L”))
    返回 (76)
.如果真结束
.如果真 (等于 (键名, “M”))
    返回 (77)
.如果真结束
.如果真 (等于 (键名, “N”))
    返回 (78)
.如果真结束
.如果真 (等于 (键名, “O”))
    返回 (79)
.如果真结束
.如果真 (等于 (键名, “P”))
    返回 (80)
.如果真结束
.如果真 (等于 (键名, “Q”))
    返回 (81)
.如果真结束
.如果真 (等于 (键名, “R”))
    返回 (82)
.如果真结束
.如果真 (等于 (键名, “S”))
    返回 (83)
.如果真结束
.如果真 (等于 (键名, “T”))
    返回 (84)
.如果真结束
.如果真 (等于 (键名, “U”))
    返回 (85)
.如果真结束
.如果真 (等于 (键名, “V”))
    返回 (86)
.如果真结束
.如果真 (等于 (键名, “W”))
    返回 (87)
.如果真结束
.如果真 (等于 (键名, “X”))
    返回 (88)
.如果真结束
.如果真 (等于 (键名, “Y”))
    返回 (89)
.如果真结束
.如果真 (等于 (键名, “Z”))
    返回 (90)
.如果真结束
.如果真 (等于 (键名, “[”))
    返回 (91)
.如果真结束
.如果真 (等于 (键名, “\”))
    返回 (92)
.如果真结束
.如果真 (等于 (键名, “]”))
    返回 (93)
.如果真结束
.如果真 (等于 (键名, “^”))
    返回 (94)
.如果真结束
.如果真 (等于 (键名, “_”))
    返回 (95)
.如果真结束
.如果真 (等于 (键名, “`”))
    返回 (96)
.如果真结束
.如果真 (等于 (键名, “a”))
    返回 (97)
.如果真结束
.如果真 (等于 (键名, “b”))
    返回 (98)
.如果真结束
.如果真 (等于 (键名, “c”))
    返回 (99)
.如果真结束
.如果真 (等于 (键名, “d”))
    返回 (100)
.如果真结束
.如果真 (等于 (键名, “e”))
    返回 (101)
.如果真结束
.如果真 (等于 (键名, “f”))
    返回 (102)
.如果真结束
.如果真 (等于 (键名, “g”))
    返回 (103)
.如果真结束
.如果真 (等于 (键名, “h”))
    返回 (104)
.如果真结束
.如果真 (等于 (键名, “i”))
    返回 (105)
.如果真结束
.如果真 (等于 (键名, “j”))
    返回 (106)
.如果真结束
.如果真 (等于 (键名, “k”))
    返回 (107)
.如果真结束
.如果真 (等于 (键名, “l”))
    返回 (108)
.如果真结束
.如果真 (等于 (键名, “m”))
    返回 (109)
.如果真结束
.如果真 (等于 (键名, “n”))
    返回 (110)
.如果真结束
.如果真 (等于 (键名, “o”))
    返回 (111)
.如果真结束
.如果真 (等于 (键名, “p”))
    返回 (112)
.如果真结束
.如果真 (等于 (键名, “q”))
    返回 (113)
.如果真结束
.如果真 (等于 (键名, “r”))
    返回 (114)
.如果真结束
.如果真 (等于 (键名, “s”))
    返回 (115)
.如果真结束
.如果真 (等于 (键名, “t”))
    返回 (116)
.如果真结束
.如果真 (等于 (键名, “u”))
    返回 (117)
.如果真结束
.如果真 (等于 (键名, “v”))
    返回 (118)
.如果真结束
.如果真 (等于 (键名, “w”))
    返回 (119)
.如果真结束
.如果真 (等于 (键名, “x”))
    返回 (120)
.如果真结束
.如果真 (等于 (键名, “y”))
    返回 (121)
.如果真结束
.如果真 (等于 (键名, “z”))
    返回 (122)
.如果真结束
.如果真 (等于 (键名, “{”))
    返回 (123)
.如果真结束
.如果真 (等于 (键名, “|”))
    返回 (124)
.如果真结束
.如果真 (等于 (键名, “}”))
    返回 (125)
.如果真结束
.如果真 (等于 (键名, “~”))
    返回 (126)
.如果真结束
返回 (0)


.子程序 取键名, 文本型, , 取指定按键名的键码(返回键码,无效返回零)
.参数 键码, 整数型, , 欲取键名的键码(键名为按键后显示的内容 比如:A=65,a=97,$=36)

.如果真 (等于 (键码, 32))
    返回 (“ ”)
.如果真结束
.如果真 (等于 (键码, 33))
    返回 (“!”)
.如果真结束
.如果真 (等于 (键码, 34))
    返回 (#引号)
.如果真结束
.如果真 (等于 (键码, 35))
    返回 (“#”)
.如果真结束
.如果真 (等于 (键码, 36))
    返回 (“$”)
.如果真结束
.如果真 (等于 (键码, 37))
    返回 (“%”)
.如果真结束
.如果真 (等于 (键码, 38))
    返回 (“&”)
.如果真结束
.如果真 (等于 (键码, 39))
    返回 (“'”)
.如果真结束
.如果真 (等于 (键码, 40))
    返回 (“(”)
.如果真结束
.如果真 (等于 (键码, 41))
    返回 (“)”)
.如果真结束
.如果真 (等于 (键码, 42))
    返回 (“*”)
.如果真结束
.如果真 (等于 (键码, 43))
    返回 (“+”)
.如果真结束
.如果真 (等于 (键码, 44))
    返回 (“,”)
.如果真结束
.如果真 (等于 (键码, 45))
    返回 (“-”)
.如果真结束
.如果真 (等于 (键码, 46))
    返回 (“.”)
.如果真结束
.如果真 (等于 (键码, 47))
    返回 (“/”)
.如果真结束
.如果真 (等于 (键码, 48))
    返回 (“0”)
.如果真结束
.如果真 (等于 (键码, 49))
    返回 (“1”)
.如果真结束
.如果真 (等于 (键码, 50))
    返回 (“2”)
.如果真结束
.如果真 (等于 (键码, 51))
    返回 (“3”)
.如果真结束
.如果真 (等于 (键码, 52))
    返回 (“4”)
.如果真结束
.如果真 (等于 (键码, 53))
    返回 (“5”)
.如果真结束
.如果真 (等于 (键码, 54))
    返回 (“6”)
.如果真结束
.如果真 (等于 (键码, 55))
    返回 (“7”)
.如果真结束
.如果真 (等于 (键码, 56))
    返回 (“8”)
.如果真结束
.如果真 (等于 (键码, 57))
    返回 (“9”)
.如果真结束
.如果真 (等于 (键码, 58))
    返回 (“:”)
.如果真结束
.如果真 (等于 (键码, 59))
    返回 (“;”)
.如果真结束
.如果真 (等于 (键码, 60))
    返回 (“<”)
.如果真结束
.如果真 (等于 (键码, 61))
    返回 (“=”)
.如果真结束
.如果真 (等于 (键码, 62))
    返回 (“>”)
.如果真结束
.如果真 (等于 (键码, 63))
    返回 (“?”)
.如果真结束
.如果真 (等于 (键码, 64))
    返回 (“@”)
.如果真结束
.如果真 (等于 (键码, 65))
    返回 (“A”)
.如果真结束
.如果真 (等于 (键码, 66))
    返回 (“B”)
.如果真结束
.如果真 (等于 (键码, 67))
    返回 (“C”)
.如果真结束
.如果真 (等于 (键码, 68))
    返回 (“D”)
.如果真结束
.如果真 (等于 (键码, 69))
    返回 (“E”)
.如果真结束
.如果真 (等于 (键码, 70))
    返回 (“F”)
.如果真结束
.如果真 (等于 (键码, 71))
    返回 (“G”)
.如果真结束
.如果真 (等于 (键码, 72))
    返回 (“H”)
.如果真结束
.如果真 (等于 (键码, 73))
    返回 (“I”)
.如果真结束
.如果真 (等于 (键码, 74))
    返回 (“J”)
.如果真结束
.如果真 (等于 (键码, 75))
    返回 (“K”)
.如果真结束
.如果真 (等于 (键码, 76))
    返回 (“L”)
.如果真结束
.如果真 (等于 (键码, 77))
    返回 (“M”)
.如果真结束
.如果真 (等于 (键码, 78))
    返回 (“N”)
.如果真结束
.如果真 (等于 (键码, 79))
    返回 (“O”)
.如果真结束
.如果真 (等于 (键码, 80))
    返回 (“P”)
.如果真结束
.如果真 (等于 (键码, 81))
    返回 (“Q”)
.如果真结束
.如果真 (等于 (键码, 82))
    返回 (“R”)
.如果真结束
.如果真 (等于 (键码, 83))
    返回 (“S”)
.如果真结束
.如果真 (等于 (键码, 84))
    返回 (“T”)
.如果真结束
.如果真 (等于 (键码, 85))
    返回 (“U”)
.如果真结束
.如果真 (等于 (键码, 86))
    返回 (“V”)
.如果真结束
.如果真 (等于 (键码, 87))
    返回 (“W”)
.如果真结束
.如果真 (等于 (键码, 88))
    返回 (“X”)
.如果真结束
.如果真 (等于 (键码, 89))
    返回 (“Y”)
.如果真结束
.如果真 (等于 (键码, 90))
    返回 (“Z”)
.如果真结束
.如果真 (等于 (键码, 91))
    返回 (“[”)
.如果真结束
.如果真 (等于 (键码, 92))
    返回 (“\”)
.如果真结束
.如果真 (等于 (键码, 93))
    返回 (“]”)
.如果真结束
.如果真 (等于 (键码, 94))
    返回 (“^”)
.如果真结束
.如果真 (等于 (键码, 95))
    返回 (“_”)
.如果真结束
.如果真 (等于 (键码, 96))
    返回 (“`”)
.如果真结束
.如果真 (等于 (键码, 97))
    返回 (“a”)
.如果真结束
.如果真 (等于 (键码, 98))
    返回 (“b”)
.如果真结束
.如果真 (等于 (键码, 99))
    返回 (“c”)
.如果真结束
.如果真 (等于 (键码, 100))
    返回 (“d”)
.如果真结束
.如果真 (等于 (键码, 101))
    返回 (“e”)
.如果真结束
.如果真 (等于 (键码, 102))
    返回 (“f”)
.如果真结束
.如果真 (等于 (键码, 103))
    返回 (“g”)
.如果真结束
.如果真 (等于 (键码, 104))
    返回 (“h”)
.如果真结束
.如果真 (等于 (键码, 105))
    返回 (“i”)
.如果真结束
.如果真 (等于 (键码, 106))
    返回 (“j”)
.如果真结束
.如果真 (等于 (键码, 107))
    返回 (“k”)
.如果真结束
.如果真 (等于 (键码, 108))
    返回 (“l”)
.如果真结束
.如果真 (等于 (键码, 109))
    返回 (“m”)
.如果真结束
.如果真 (等于 (键码, 110))
    返回 (“n”)
.如果真结束
.如果真 (等于 (键码, 111))
    返回 (“o”)
.如果真结束
.如果真 (等于 (键码, 112))
    返回 (“p”)
.如果真结束
.如果真 (等于 (键码, 113))
    返回 (“q”)
.如果真结束
.如果真 (等于 (键码, 114))
    返回 (“r”)
.如果真结束
.如果真 (等于 (键码, 115))
    返回 (“s”)
.如果真结束
.如果真 (等于 (键码, 116))
    返回 (“t”)
.如果真结束
.如果真 (等于 (键码, 117))
    返回 (“u”)
.如果真结束
.如果真 (等于 (键码, 118))
    返回 (“v”)
.如果真结束
.如果真 (等于 (键码, 119))
    返回 (“w”)
.如果真结束
.如果真 (等于 (键码, 120))
    返回 (“x”)
.如果真结束
.如果真 (等于 (键码, 121))
    返回 (“y”)
.如果真结束
.如果真 (等于 (键码, 122))
    返回 (“z”)
.如果真结束
.如果真 (等于 (键码, 123))
    返回 (“{”)
.如果真结束
.如果真 (等于 (键码, 124))
    返回 (“|”)
.如果真结束
.如果真 (等于 (键码, 125))
    返回 (“}”)
.如果真结束
.如果真 (等于 (键码, 126))
    返回 (“~”)
.如果真结束
返回 (“”)


.子程序 取区位码, 文本型, , 例：取区位码 (“吕”)
.参数 汉字, 文本型, , 

.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 ab, 文本型, , , 

.计次循环首 (87, a)
    .计次循环首 (94, b)
        .如果真 (等于 (相加 (字符 (相加 (160, a)), 字符 (相加 (160, b))), 汉字))
            赋值 (ab, 相加 (取文本中间 (到文本 (相加 (a, 100)), 2, 2), 取文本中间 (到文本 (相加 (b, 100)), 2, 2)))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (ab)


.子程序 取机内码, 文本型, , 例：取机内码 (“吕”)
.参数 汉字, 文本型, , 

.局部变量 A, 空白型, , , 
.局部变量 B, 空白型, , , 

返回 (相加 (取十六进制文本 (相加 (取代码 (取文本左边 (汉字, 1), ), 256)), 取十六进制文本 (相加 (取代码 (取文本右边 (汉字, 1), ), 256))))

.子程序 转换任意进制, 文本型, , 可以将从二进制到三十六进制的数值随意进行转换(返回转换后的文本)
.参数 被转换文本, 文本型, , 欲被转换的文本(不可以转换负数以及小数)
.参数 被转换进制, 整数型, , 被转换文本的进制(2-36之间)
.参数 转换的进制, 整数型, , 要转换到的进制(2-36之间)

.局部变量 欲转换文本, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量, 整数型, , , 

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 36), 大于 (转换的进制, 36))) ' 判断两个“进制系数”是否正确
    输出调试文本 (“参数错误-进制只能在2-36之间”)
    返回 (“”)
.如果真结束
赋值 (被转换文本, 到大写 (到半角 (被转换文本))) ' 规范参数
.计次循环首 (取文本长度 (被转换文本), 计次变量)
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, 被转换文本, “不是一个有效的”, 取文本左边 (数值到金额 (被转换进制, 真), 相减 (取文本长度 (数值到金额 (被转换进制, 真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (计次变量, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (临时文本, “”))
    输出调试文本 (临时文本)
    返回 (“”)
.如果真结束
 ' 以上为数据处理代码
.如果真 (等于 (被转换进制, 转换的进制))
    返回 (被转换文本)
.如果真结束
.计次循环首 (取文本长度 (被转换文本), 计次变量) ' 整数转换开始
    赋值 (临时数值, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量, 1), , 真), 1), 求次方 (被转换进制, 相减 (取文本长度 (被转换文本), 计次变量))), 临时数值))
.计次循环尾 ()
.判断循环首 (大于 (临时数值, 相减 (转换的进制, 1)))
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (到数值 (到文本 (求余数 (临时数值, 转换的进制))), 1), 1), 欲转换文本))
    赋值 (临时数值, 取整 (相除 (临时数值, 转换的进制)))
.判断循环尾 ()
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)


.子程序 转换到十进制, 整数型, , 将2,8,16进制文件转换到10进制数值(返回十进制数)
.参数 文本, 文本型, , 2,8,16进制文件
.参数 进制, 整数型, , 2为二进制，8为八进制，16为16进制

.局部变量 i, 整数型, , , 
.局部变量 t, 文本型, , , 
.局部变量 结果, 整数型, , , 

赋值 (t, “0123456789ABCDEF”)
.计次循环首 (取文本长度 (文本), i)
    赋值 (结果, 相减 (相加 (相乘 (结果, 进制), 寻找文本 (t, 取文本中间 (到大写 (文本), i, 1), , 假)), 1))
.计次循环尾 ()
返回 (结果)


.子程序 十六到十, 整数型, , 将十六进制转换成十进制(返回十进制文本)
.参数 十六进制文本, 文本型, , 待转换的十六进制文本

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

.变量循环首 (1, 取文本长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 取文本中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (取文本长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
返回 (结果)

.子程序 十到十六, 文本型, , 将十进制转换成十六进制(返回十六进制文本)
.参数 十进制数, 长整数型, , 待转换的十进制数
.参数 是否不去零, 逻辑型, 可空, 默认为假:去0  真:不去0

.局部变量 余数, 文本型, , "0", 
.局部变量 十六进制文本, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 字母数组, 文本型, , "6", 
.局部变量 字节集, 字节集, , , 

.如果真 (是否不去零)
    赋值 (字节集, 到字节集 (十进制数))
    .计次循环首 (整除 (相加 (取字节集长度 (字节集), 2), 3), 计次)
         ' 输出调试文本 (字节集 [计次])
        赋值 (十六进制文本, 相加 (十六进制文本, MD5演示函数_取十六进制文本 (字节集 [计次])))
    .计次循环尾 ()
    返回 (十六进制文本)
.如果真结束

赋值 (字母数组, { “A”, “B”, “C”, “D”, “E”, “F” })
.循环判断首 ()
    .判断开始 (小于 (求余数 (十进制数, 16), 10))
        加入成员 (余数, 到文本 (求余数 (十进制数, 16)))
    .默认
        加入成员 (余数, 字母数组 [相减 (求余数 (十进制数, 16), 9)])
    .判断结束
    赋值 (十进制数, 相除 (十进制数, 16))
    .如果真 (小于 (十进制数, 16))
        .判断开始 (小于 (十进制数, 10))
            加入成员 (余数, 到文本 (取整 (十进制数)))
        .默认
            加入成员 (余数, 字母数组 [相减 (十进制数, 9)])
        .判断结束
        跳出循环 ()
    .如果真结束
    
.循环判断尾 (真)
.计次循环首 (取数组成员数 (余数), 计次)
    赋值 (十六进制文本, 相加 (十六进制文本, 到文本 (余数 [相加 (相减 (取数组成员数 (余数), 计次), 1)])))
.计次循环尾 ()
.如果真 (等于 (取文本左边 (十六进制文本, 1), “0”))
    赋值 (十六进制文本, 去除首部零 (十六进制文本))
.如果真结束

返回 (十六进制文本)

.子程序 MD5演示函数_取十六进制文本, 文本型, , 这个取十六进制文本没有去0
.参数 数值, 整数型, , 只能是255以内的数

 ' 取出十六进制文本，用易语言的函数会丢掉0，所以重新做了一个
 ' 论坛上monktiger少0的原因可能类似，只有亲自做过才知道啊
返回 (相加 (多项选择 (相加 (右移 (数值, 4), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”), 多项选择 (相加 (位与 (数值, 15), 1), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”)))

.子程序 十到二, 文本型, , 将十进制转换成二进制(返回二进制文本)
.参数 十进制数, 整数型, , 欲转换的十进制

.局部变量 文本, 文本型, , , 
.局部变量 返回文本, 文本型, , , 

.判断循环首 (大于 (十进制数, 0))
    赋值 (文本, 相加 (文本, 字符 (相加 (取代码 (“0”, ), 求余数 (十进制数, 2)))))
    赋值 (十进制数, 相除 (十进制数, 2))
.判断循环尾 ()
.计次循环首 (取文本长度 (文本), 十进制数)
    赋值 (返回文本, 相加 (返回文本, 取文本中间 (文本, 相加 (相减 (取文本长度 (文本), 十进制数), 1), 1)))
.计次循环尾 ()
返回 (返回文本)

.子程序 二到十, 整数型, , 将二进制转换成十进制(返回十进制整数)
.参数 二进制文本, 文本型, , 欲转换的二进制

.局部变量 计次, 整数型, , , 
.局部变量 结果, 整数型, , , 

.计次循环首 (取文本长度 (二进制文本), 计次)
    .判断开始 (小于 (到数值 (取文本中间 (二进制文本, 计次, 1)), 10))
        赋值 (结果, 相加 (结果, 相乘 (到数值 (取文本中间 (二进制文本, 计次, 1)), 求次方 (2, 相减 (取文本长度 (二进制文本), 计次)))))
    .默认
        
    .判断结束
    
.计次循环尾 ()
返回 (结果)

.子程序 十到八, 文本型, , 将十进制转换成八进制(返回八进制文本)
.参数 十进制数, 长整数型, , 欲转换的十进制数

.局部变量 余数, 长整数型, , "0", 
.局部变量 八进制文本, 文本型, , , 
.局部变量 计次, 整数型, , , 

.循环判断首 ()
    加入成员 (余数, 求余数 (十进制数, 8))
    赋值 (十进制数, 相除 (十进制数, 8))
    .如果真 (小于 (十进制数, 8))
        加入成员 (余数, 取整 (十进制数))
        跳出循环 ()
    .如果真结束
    
.循环判断尾 (真)
.计次循环首 (取数组成员数 (余数), 计次)
    赋值 (八进制文本, 相加 (八进制文本, 到文本 (余数 [相加 (相减 (取数组成员数 (余数), 计次), 1)])))
.计次循环尾 ()
.如果真 (等于 (取文本左边 (八进制文本, 1), “0”))
    赋值 (八进制文本, 去除首部零 (八进制文本))
.如果真结束
返回 (八进制文本)

.子程序 去除首部零, 文本型, , 将文本数字前面的0去除!
.参数 文本, 文本型, , 

.局部变量 计次, 整数型, , , 

.计次循环首 (取文本长度 (文本), 计次)
    .如果真 (不等于 (取文本中间 (文本, 计次, 1), “0”))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (取文本右边 (文本, 相加 (相减 (取文本长度 (文本), 计次), 1)))

.子程序 八到十, 整数型, , 将八进制转换成十进制(返回十进制整数)
.参数 八进制文本, 文本型, , 欲转换的八进制文本

.局部变量 计次, 整数型, , , 
.局部变量 结果, 整数型, , , 

.计次循环首 (取文本长度 (八进制文本), 计次)
    赋值 (结果, 相加 (结果, 相乘 (到数值 (取文本中间 (八进制文本, 计次, 1)), 求次方 (8, 相减 (取文本长度 (八进制文本), 计次)))))
.计次循环尾 ()
返回 (结果)


.子程序 数字IP到文本, 文本型, , 
.参数 IP地址, 长整数型, , 

.局部变量 临时变量, 字节集, , , 

.如果真 (大于 (取绝对值 (IP地址), 4294967295))
    返回 (“255.255.255.255”)
.如果真结束
赋值 (临时变量, 到字节集 (IP地址))
返回 (相加 (到文本 (临时变量 [1]), “.”, 到文本 (临时变量 [2]), “.”, 到文本 (临时变量 [3]), “.”, 到文本 (临时变量 [4])))

.子程序 反写文本, 文本型, , 例如: 1234 结果: 4321
.参数 文本内容, 文本型, , 

.局部变量 临时, 文本型, , , 
.局部变量 i, 整数型, , , 

.计次循环首 (取文本长度 (文本内容), i)
    赋值 (临时, 相加 (临时, 取文本中间 (文本内容, 相加 (相减 (取文本长度 (文本内容), i), 1), 1)))
.计次循环尾 ()
返回 (临时)

.子程序 反写地址, 文本型, , 例如: 1234 结果: 3412
.参数 字集, 文本型, , 

.局部变量 临时, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 新临时, 文本型, , , 
.局部变量 aXX, 文本型, , , 

.计次循环首 (取文本长度 (字集), i)
    赋值 (临时, 相加 (临时, 取文本中间 (字集, 相加 (相减 (取文本长度 (字集), i), 1), 1)))
.计次循环尾 ()
.计次循环首 (整除 (取文本长度 (临时), 2), i)
    赋值 (aXX, “”)
    赋值 (aXX, 取文本中间 (临时, 相减 (相乘 (i, 2), 1), 2))
    赋值 (新临时, 相加 (新临时, 取文本右边 (aXX, 1), 取文本左边 (aXX, 1)))
.计次循环尾 ()
返回 (新临时)

.类模块 网络操作, , , 

.子程序 检测网络, 逻辑型, 公开, 检测网络是否连接
.参数 参数一, 空白型, 可空, lpdwFlags
.参数 参数二, 空白型, 可空, dwReserved

返回 (Api_检测网络连接 (参数一, 参数二))


.子程序 访问网页, 字节集, 公开, 
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 单位秒，默认90
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 
.局部变量 lpBody, 字节集, , , 

赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, “MissWho”, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息)
未知函数_244 () ' *** 缩略程序块 ***
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
.如果真 (或者 (是否为空 (超时值), 等于 (超时值, 0)))
    赋值 (超时值, 90)
.如果真结束
赋值 (hThread, CreateThread (0, 0, &ReadFile, hMemFile, 0, 0))

.循环判断首 ()
    赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
     ' 处理事件 ()
.循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258)))
TerminateThread (hThread, 0)
CloseHandle (hThread)
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag, szRequest, lpBody)
关闭文件 (hMemFile)
.如果真 (或者 (不等于 (szFlag, “MissWho_OK”), 等于 (ret, 258)))
    赋值 (lpBody, {  })
.如果真结束
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束
 ' 连续赋值 (字符 (0), szFullAddr, szVerb, szProxyServer, szHeaders, szSendBody, szRequest)
返回 (lpBody)

.子程序 FTP_登陆, 整数型, 公开, 返回0则失败
.参数 服务器地址, 文本型, , 
.参数 服务器端口, 整数型, , 
.参数 用户名, 文本型, , 
.参数 密码, 文本型, , 

.局部变量 nFlag, 整数型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 vbNullString, 文本型, , , 

赋值 (nFlag, 0)
赋值 (hOpen, InternetOpen (#scUserAgent, #INTERNET_OPEN_TYPE_DIRECT, vbNullString, vbNullString, 0))
赋值 (Ftp_hConnection, InternetConnect (hOpen, 服务器地址, 服务器端口, 用户名, 密码, #INTERNET_SERVICE_FTP, nFlag, 0))
返回 (Ftp_hConnection)

.子程序 FTP_断开, 空白型, 公开, 
InternetCloseHandle (Ftp_hConnection)
赋值 (Ftp_hConnection, 0)


.子程序 FTP_上传, 逻辑型, 公开, 
.参数 文件路径, 文本型, , 
.参数 上传目录, 文本型, 可空, 默认可以不用写

.局部变量 bRet, 逻辑型, , , 
.局部变量 szFileLocal, 整数型, , , 
.局部变量 szFileRemote, 整数型, , , 
.局部变量 dwType, 整数型, , , 

赋值 (bRet, FtpPutFile (Ftp_hConnection, 文件路径, 相加 (上传目录, 取文本右边 (文件路径, 相减 (取文本长度 (文件路径), 倒找文本 (文件路径, “\”, , 假)))), dwType, 0))
返回 (bRet)

.子程序 连接宽带_Cmd, 空白型, 公开, 速度超快 系统自身CMD命令
.参数 宽带名称, 文本型, , 
.参数 用户名称, 文本型, , 
.参数 用户密码, 文本型, , 

运行 (相加 (“rasdial ”, 宽带名称, “ ”, 用户名称, “ ”, 用户密码), 真, 1)


.子程序 断开宽带_Cmd, 空白型, 公开, 速度超快 系统自身CMD命令
.参数 宽带名称, 文本型, , 

运行 (相加 (“rasphone -h ”, 宽带名称), 真, 1)

.子程序 设COOKIE, 逻辑型, 公开, 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空清除所有
.参数 COOKIE内容, 文本型, 可空, 为空清除
.参数 有效期, 日期时间型, 可空, 为空不保存

.局部变量 域名, 文本型, , , 
.局部变量 GMT时间, 文本型, , , 
.局部变量 现有COOKIE, 文本型, , , 
.局部变量 整数容器, 整数型, , , 
.局部变量 名称, 文本型, , , 

赋值 (域名, 取域名 (网址))
.如果 (不等于 (COOKIE名称, “”))
    .如果真 (等于 (COOKIE内容, “”))
        赋值 (COOKIE内容, “delete”)
        赋值 (有效期, 指定时间 (1999, 1, 1, 1, 1, 1))
    .如果真结束
    .如果真 (不等于 (有效期, 指定时间 (1899, 12, 30, 0, 0, 0)))
        赋值 (GMT时间, 编码.转换时间为GMT格式 (有效期))
        赋值 (COOKIE内容, 相加 (COOKIE内容, “; expires=”, GMT时间))
    .如果真结束
    赋值 (COOKIE内容, 相加 (COOKIE内容, “; path=/”))
    
    _设置COOKIE (相加 (“http://”, 域名), COOKIE名称, COOKIE内容)
    赋值 (COOKIE内容, 相加 (COOKIE内容, “; domain=”, 文本替换 (域名, 1, 3, )))
    
    返回 (_设置COOKIE (相加 (“http://”, 域名), COOKIE名称, COOKIE内容))
    
.否则
    赋值 (现有COOKIE, 取COOKIE (相加 (“http://”, 域名)))
    
    .如果真 (不等于 (现有COOKIE, “”))
        赋值 (整数容器, 寻找文本 (现有COOKIE, “=”, 1, 真))
        .如果真 (大于 (整数容器, 0))
            赋值 (名称, 取文本左边 (现有COOKIE, 相减 (整数容器, 1)))
            设COOKIE (相加 (“http://”, 域名), 名称)
            设COOKIE (相加 (“http://”, 域名))
        .如果真结束
        
    .如果真结束
    返回 (真)
.如果结束


.子程序 取COOKIE, 文本型, 公开, 
.参数 网址, 文本型, , 
.参数 COOKIE名称, 文本型, 可空, 为空返回全部COOKIE

.局部变量 域名, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 整数容器1, 整数型, , , 
.局部变量 整数容器2, 整数型, , , 

赋值 (域名, 取域名 (网址))
赋值 (读取内容, 取空白文本 (256))
.如果 (_读取COOKIE (相加 (“http://”, 域名), “”, 读取内容, 255))
    .如果真 (不等于 (COOKIE名称, “”))
        赋值 (整数容器1, 寻找文本 (读取内容, COOKIE名称, 1, 真))
        .如果真 (等于 (整数容器1, -1))
            返回 (“”)
        .如果真结束
        赋值 (整数容器2, 寻找文本 (读取内容, “;”, 整数容器1, 真))
        .如果 (大于 (整数容器2, 0))
            赋值 (读取内容, 取文本中间 (读取内容, 相加 (整数容器1, 取文本长度 (COOKIE名称), 1), 相减 (整数容器2, 整数容器1, 取文本长度 (COOKIE名称), 1)))
        .否则
            赋值 (读取内容, 取文本右边 (读取内容, 相减 (取文本长度 (读取内容), 整数容器1, 取文本长度 (COOKIE名称))))
        .如果结束
        
    .如果真结束
    
    返回 (读取内容)
.否则
    返回 (“”)
.如果结束


.子程序 清除COOKIE, 逻辑型, 公开, 
.参数 域名, 文本型, , 

.局部变量 现有COOKIE, 文本型, , , 
.局部变量 上次COOKIE, 文本型, , , 
.局部变量 整数容器, 整数型, , , 
.局部变量 COOKIE名称, 文本型, , , 
.局部变量 COOKIE内容, 文本型, , , 

赋值 (现有COOKIE, 取COOKIE (相加 (“http://”, 域名)))
赋值 (上次COOKIE, 现有COOKIE)
.判断循环首 (不等于 (现有COOKIE, “”))
    赋值 (整数容器, 寻找文本 (现有COOKIE, “=”, 1, 真))
    .如果 (大于 (整数容器, 0))
        赋值 (COOKIE名称, 取文本左边 (现有COOKIE, 相减 (整数容器, 1)))
        赋值 (COOKIE内容, 相加 (“delete; expires=”, 编码.转换时间为GMT格式 (指定时间 (1999, 1, 1, 1, 1, 1)), “; path=/”))
        _设置COOKIE (相加 (“http://”, 域名), COOKIE名称, COOKIE内容)
        赋值 (COOKIE内容, 相加 (COOKIE内容, “; domain=”, 选择 (等于 (到小写 (取文本左边 (域名, 4)), “www.”), 文本替换 (域名, 1, 3, ), 域名)))
        _设置COOKIE (相加 (“http://”, 域名), COOKIE名称, COOKIE内容)
        赋值 (现有COOKIE, 取COOKIE (相加 (“http://”, 域名)))
        .如果真 (等于 (上次COOKIE, 现有COOKIE))
            返回 (假)
        .如果真结束
        赋值 (上次COOKIE, 现有COOKIE)
    .否则
        返回 (真)
    .如果结束
    
.判断循环尾 ()
返回 (真)

.子程序 取网页所有链接, 整数型, 公开, 取网页中所有链接.(成功返回链接数,失败返回-1)
.参数 网址, 文本型, , 欲下载的网页的地址,必须为完整的页面网址
.参数 返回链接, 文本型, 参考 数组, 取出来的网页中的所有链接(图片链接,FLASH链接,网页链接等)

.局部变量 域名, 文本型, , , 
.局部变量 子域名, 文本型, , , 
.局部变量 网页文件, 文本型, , , 
.局部变量 网页文件长, 整数型, , , 
.局部变量 临时变量, 文本型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 临时长, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 所有链接, 文本型, , "0", 

 ' 取域名与网页目录
赋值 (临时变量, 到小写 (网址))
赋值 (临时变量, 子文本替换 (临时变量, “http://”, , , , 真))
赋值 (临时数组, 分割文本 (临时变量, “/”, ))
.如果真 (等于 (取数组成员数 (临时数组), 0))
    返回 (-1)
.如果真结束
赋值 (域名, 相加 (“http://”, 临时数组 [1]))
赋值 (子域名, 域名)
.计次循环首 (取数组成员数 (临时数组), a)
    .如果真 (大于 (a, 1))
        .如果真 (小于 (a, 取数组成员数 (临时数组)))
            赋值 (子域名, 相加 (子域名, 临时数组 [a]))
        .如果真结束
        赋值 (临时变量, 相加 (临时变量, 临时数组 [a]))
    .如果真结束
    .如果真 (小于 (a, 取数组成员数 (临时数组)))
        赋值 (子域名, 相加 (子域名, “/”))
        .如果真 (大于 (a, 1))
            赋值 (临时变量, 相加 (临时变量, “\”))
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
赋值 (网页文件, 读取网页 (网址))
赋值 (网页文件长, 取文本长度 (网页文件))
 ' 输出调试文本 (网页文件)
清除数组 (临时数组)
赋值 (临时数组, 分割文本 (#网页代码关键字, “|”, ))
.计次循环首 (取数组成员数 (临时数组), a)
    赋值 (临时长, 取文本长度 (临时数组 [a]))
    .循环判断首 ()
        .如果真 (大于 (x, 0))
            赋值 (y, 寻找文本 (网页文件, #引号, 相加 (x, 临时长), 真))
            赋值 (临时变量, 取文本中间 (网页文件, 相加 (x, 临时长), 相减 (y, x, 临时长)))
            .判断开始 (等于 (取文本左边 (临时变量, 1), “/”))
                赋值 (临时变量, 相加 (域名, 临时变量))
            .判断 (等于 (取文本左边 (临时变量, 7), “http://”))
                
            .默认
                赋值 (临时变量, 相加 (子域名, 临时变量))
            .判断结束
            加入成员 (所有链接, 临时变量)
             ' 输出调试文本 (临时变量)
        .如果真结束
        赋值 (x, 寻找文本 (网页文件, 临时数组 [a], 相加 (x, 1), 真))
    .循环判断尾 (大于 (x, -1))
.计次循环尾 ()
清除数组 (返回链接)
赋值 (返回链接, 所有链接)
返回 (取数组成员数 (返回链接))


.子程序 读取网页, 文本型, 公开, 读取网页源码(返回文本内容)
.参数 完整网址, 文本型, , 欲访问的网络地址

返回 (取字节集数据 (访问网页 (完整网址), #文本型, ))

.子程序 打开网页, 逻辑型, 公开, 打开指定网址(成功返回真,失败返回假)
.参数 网址, 文本型, , 欲打开的网页地址(如:http://Fen.La)

.如果 (等于 (_执行 (0, “open”, “explorer.exe”, 网址, “”, 1), 2))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 下载文件, 文本型, 公开, 不建议下载太大的文件
.参数 http地址, 文本型, , http网页地址或下载文件的网络地址
.参数 保存路径, 文本型, 可空, 下载文件的保存路径 (可空:不保存到本地文件)
.参数 仅保存, 逻辑型, 可空, 可空为假 返回数据 真:只保存到本地,节约变量

.局部变量 内容, 字节集, , , 

.如果真 (并且 (等于 (仅保存, 假), 等于 (保存路径, “”)))
    返回 (取字节集数据 (访问网页 (http地址), #文本型, ))
.如果真结束
.如果真 (等于 (仅保存, 假))
    赋值 (内容, 访问网页 (http地址))
    .如果真 (文件是否存在 (保存路径))
        删除文件 (保存路径)
    .如果真结束
    写到文件 (保存路径, 内容)
    返回 (取字节集数据 (内容, #文本型, ))
.如果真结束
.如果真 (文件是否存在 (保存路径))
    删除文件 (保存路径)
.如果真结束
写到文件 (保存路径, 访问网页 (http地址))
返回 (“”)


.类模块 图形操作, , , 

.程序集变量 Token, 整数型, , , 
.子程序 屏幕截取位图, 字节集, , 截取的是位图,就是类似 BMP 这样的!
.参数 屏幕宽度, 整数型, , 
.参数 屏幕高度, 整数型, , 
.参数 图片位数, 整数型, 可空, 这里支持 4 8 24 32 默认是24位图!

.局部变量 桌面句柄, 整数型, , , 
.局部变量 源场景, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 位图像素点阵, 字节集, , , 
.局部变量 位图文件头, 文件头信息_, , , 
.局部变量 位图文件头字节集, 字节集, , , 
.局部变量 位图信息, 位图信息_, , , 
.局部变量 位图信息字节集, 字节集, , , 
.局部变量 颜色表, 字节集, , , 
.局部变量 颜色表大小, 整数型, , , 

.判断开始 (等于 (图片位数, 0))
    赋值 (位图信息.位深度, 24)
.默认
    赋值 (位图信息.位深度, 图片位数)
.判断结束
赋值 (位图信息.位图位面数, 1)
赋值 (位图信息.位图宽度, 屏幕宽度)
赋值 (位图信息.位图高度, 屏幕高度)
赋值 (位图信息.位图大小, 相除 (相乘 (位图信息.位图宽度, 位图信息.位图高度, 位图信息.位深度), 8))
赋值 (位图信息.结果大小, 40)
赋值 (位图信息.压缩率, 0)
 ' 调试输出 ()  ' 我晕,这句本身没什么用,不用的话居然第一次截图跟以后的颜色会不同

赋值 (颜色表大小, 取位图深度 (位图信息.位深度))
赋值 (位图像素点阵, 取空白字节集 (位图信息.位图大小))
赋值 (颜色表, 取空白字节集 (颜色表大小))
赋值 (桌面句柄, 取设备场景_ (0))
赋值 (源场景, 创建内存场景_ (桌面句柄))
赋值 (位图句柄, 创建GDI对象_ (源场景, 位图信息, #DIB_PAL_COLORS, 0, 0, 0)) ' 不知是不是这里后面的三个参数导致的这些原因,但不知要如何弄这里的参数
选入设备场景_ (源场景, 位图句柄)
取得颜色表信息 (源场景, 0, 颜色表大小, 颜色表) ' 是不是不能这样取颜色表?虽然能出图了,但颜色好象还是不正常,是这里取出的颜色表有问题?

复制位图_ (源场景, 0, 0, 位图信息.位图宽度, 位图信息.位图高度, 桌面句柄, 0, 位图信息.位图高度, 位图信息.位图宽度, 负 (位图信息.位图高度), 13369376)
复制二进制位图_ (位图句柄, 位图信息.位图大小, 位图像素点阵)

 ' 取位图二进制位_ (源场景, 位图句柄, 0, 位图信息.位图高度, 位图像素点阵 [1], 位图信息, #DIB_PAL_COLORS)

 ' 不知道为什么不能用这个(取位图二进制位_)API,而用(复制位图_)API却不会出错

赋值 (位图信息字节集, 取空白字节集 (位图信息.结果大小))
内存拷贝_ (位图信息字节集, 位图信息, 位图信息.结果大小)
赋值 (位图文件头.文件类型, 19778)
赋值 (位图文件头.偏移量, 相加 (颜色表大小, 54))
赋值 (位图文件头.结果大小, 相加 (54, 位图信息.位图大小))
赋值 (位图文件头字节集, 取空白字节集 (14))
内存拷贝1_ (位图文件头字节集, 位图文件头, 14)
删除对象_ (位图句柄)
删除设备场景_ (源场景)
释放设备场景_ (0, 桌面句柄)
 ' 调试输出 (取启动时间 () － n)
返回 (相加 (位图文件头字节集, 位图信息字节集, 颜色表, 位图像素点阵))


.子程序 转换图像格式, 逻辑型, , 支持bmp、jpg、gif、tiff、png互转。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png
.参数 新图像, 字节集, 参考, 用于保存新图像的变量

.局部变量 Clsid, 字节集, , , 
.局部变量 pStr, 文本型, , , 
.局部变量 nLength, 整数型, , , 
.局部变量 hMem, 整数型, , , 
.局部变量 Stream, 对象, , , 
.局部变量 lpvoid, 整数型, , , 
.局部变量 pStream, 整数型, , , 
.局部变量 bitmap, 整数型, , , 
.局部变量 DataStream, 对象, , , 
.局部变量 hMemDataStream, 整数型, , , 
.局部变量 pDataStream, 整数型, , , 
.局部变量 nStreamSize, 整数型, , , 
.局部变量 bRet, 逻辑型, , , 
.局部变量 GpInput, GdiplusStartupInput, , , 

赋值 (GpInput.GdiplusVersion, 1)
GdiplusStartup (Token, GpInput, 0) ' 启动 GDI+
.判断开始 (等于 (转换格式, 1)) ' bmp
    赋值 (pStr, “{557CF400-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 2)) ' jpg
    赋值 (pStr, “{557CF401-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 3)) ' gif
    赋值 (pStr, “{557CF402-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 4)) ' tiff
    赋值 (pStr, “{557CF405-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 5)) ' png
    赋值 (pStr, “{557CF406-1A04-11D3-9A73-0000F81EF32E}”)
.默认
    
.判断结束
赋值 (Clsid, 取空白字节集 (16))
CLSIDFromString (A2W (pStr), Clsid) ' 获取图像格式对应的Clsid

赋值 (nLength, 取字节集长度 (图像数据))
赋值 (hMem, GlobalAlloc (#GMEM_FIXED, nLength)) ' 申请内存
CreateStreamOnHGlobal (hMem, 真, Stream) ' 创建流对象
赋值 (lpvoid, GlobalLock (hMem)) ' 锁定该区域，获得存放数据的地址
写到内存 (图像数据, lpvoid, nLength) ' 把数据写到流里面
GlobalUnlock (hMem) ' 取消锁定
赋值 (pStream, GetObjectPtr (Stream, Stream, 0)) ' 获得流对象指针
GdipCreateBitmapFromStream (取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1), bitmap) ' 创建位图对象

CreateStreamOnHGlobal (0, 真, DataStream)
赋值 (pStream, GetObjectPtr (DataStream, DataStream, 0))
赋值 (pStream, 取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1))
GdipSaveImageToStream_int (bitmap, pStream, Clsid, 0) ' 这里是图像格式转换的关键。把位图按指定格式保存到数据流里面
GetHGlobalFromStream_int (pStream, hMemDataStream) ' 获得数据流句柄
赋值 (pDataStream, GlobalLock (hMemDataStream)) ' 获得数据指针
赋值 (nStreamSize, GlobalSize (hMemDataStream)) ' 获取数据大小
.如果真 (不等于 (pDataStream, 0))
    赋值 (新图像, 取空白字节集 (nStreamSize))
    CopyMemory (新图像, pDataStream, nStreamSize) ' 复制到字节集里
    赋值 (bRet, 真)
.如果真结束
 ' 别忘记下面释放资源的函数，否则造成内存泄漏
GlobalUnlock (hMemDataStream)
GdipDisposeImage (bitmap)
GlobalFree (hMem)
GdiplusShutdown (Token)
返回 (bRet)

.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 

.局部变量 缓冲区, 字节集, , , 
.局部变量 缓冲区大小, 整数型, , , 

赋值 (缓冲区大小, 相乘 (MultiByteToWideChar (0, 0, 欲转换的文本, -1, {  }, 0), 2))
赋值 (缓冲区, 取空白字节集 (缓冲区大小))
MultiByteToWideChar (0, 0, 欲转换的文本, 取文本长度 (欲转换的文本), 缓冲区, 缓冲区大小)
返回 (缓冲区)

.子程序 后台截图, 字节集, , 后台截图
.参数 窗口句柄, 整数型, , 

.局部变量 矩形区域, 矩形类型, , , 
.局部变量 屏幕设备上下文句柄, 整数型, , , 
.局部变量 内存设备上下文句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 位图, BITMAP, , , 
.局部变量 位图像素点阵, 字节集, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 位图文件头字节集, 字节集, , , 
.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图信息字节集, 字节集, , , 

.如果真 (取反 (IsWindow (窗口句柄)))
    返回 ({  })
.如果真结束
GetWindowRect (窗口句柄, 矩形区域)
赋值 (屏幕设备上下文句柄, GetDC (0))
赋值 (内存设备上下文句柄, CreateCompatibleDC (屏幕设备上下文句柄))
赋值 (位图句柄, CreateCompatibleBitmap (屏幕设备上下文句柄, 相减 (矩形区域.右边, 矩形区域.左边), 相减 (矩形区域.底边, 矩形区域.顶边)))
赋值 (旧位图句柄, SelectObject (内存设备上下文句柄, 位图句柄))
.如果真 (取反 (PrintWindow (窗口句柄, 内存设备上下文句柄, 0)))
    SelectObject (内存设备上下文句柄, 旧位图句柄)
    DeleteObject (位图句柄)
    DeleteDC (内存设备上下文句柄)
    ReleaseDC (0, 屏幕设备上下文句柄)
    返回 ({  })
.如果真结束
GetObjectA (位图句柄, 相加 (相乘 (5, 4), 2, 2), 位图)
赋值 (位图信息.BITMAPINFOHEADER.biSize, 相乘 (4, 11))
GetDIBits_BimapInfo (内存设备上下文句柄, 位图句柄, 0, 0, 0, 位图信息, 0)
赋值 (位图像素点阵, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图信息.BITMAPINFOHEADER.biCompression, 0)
GetDIBitsA (内存设备上下文句柄, 位图句柄, 0, 位图.bmHeight, 位图像素点阵, 位图信息, 0)
 ' 构造位图信息
赋值 (位图信息字节集, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSize))
CopyMemory_BITMAPINFO (位图信息字节集, 位图信息, 位图信息.BITMAPINFOHEADER.biSize)
 ' 构造位图文件头
赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), 位图信息.BITMAPINFOHEADER.biSize))
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图文件头.bfReserved1, 0)
赋值 (位图文件头.bfReserved2, 0)
赋值 (位图文件头字节集, 取空白字节集 (14))
CopyMemory_BITMAPFILEHEADER (位图文件头字节集, 位图文件头, 14)
SelectObject (内存设备上下文句柄, 旧位图句柄)
DeleteObject (位图句柄)
DeleteDC (内存设备上下文句柄)
ReleaseDC (0, 屏幕设备上下文句柄)
返回 (相加 (位图文件头字节集, 位图信息字节集, 位图像素点阵))

.子程序 屏幕截图, 空白型, , 截取屏幕图片到画板内
.参数 画板句柄, 整数型, , 

.局部变量 桌面句柄, 整数型, , , 
.局部变量 源场景, 整数型, , , 
.局部变量 目标场景, 整数型, , , 

赋值 (桌面句柄, GetDesktopWindow ())
赋值 (源场景, GetDC (桌面句柄))
赋值 (目标场景, GetDC (画板句柄))
BitBlt (目标场景, 0, 0, 取屏幕宽度 (), 取屏幕高度 (), 源场景, 0, 0, 13369376)
ReleaseDC (画板句柄, 目标场景)
ReleaseDC (桌面句柄, 源场景)

.子程序 窗口内画字, 逻辑型, , 其实是写字,但是因为是画出来的!
.参数 窗口句柄, 整数型, 可空, 如果在屏幕中写字 可以为空
.参数 x, 整数型, 可空, X
.参数 y, 整数型, 可空, Y
.参数 内容, 文本型, , 内容
.参数 字体颜色, 整数型, 可空, 为空则默认为:#品红
.参数 字体大小, 整数型, 可空, 默认为:12号
.参数 字体名称, 文本型, 可空, 默认为:"宋体"
.参数 是否加粗, 逻辑型, 可空, 
.参数 是否倾斜, 逻辑型, 可空, 
.参数 是否下划线, 逻辑型, 可空, 

.局部变量 hdc, 整数型, , , 
.局部变量 lf, LOGFONT, , , 
.局部变量 hf, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 hbk, 整数型, , , 
.局部变量 htext, 整数型, , , 

赋值 (hdc, 取设备场景_ (窗口句柄))
.如果真 (是否为空 (字体名称))
    赋值 (字体名称, “宋体”)
.如果真结束
.如果真 (是否为空 (字体大小))
    赋值 (字体大小, 12)
.如果真结束
.如果真 (是否为空 (是否加粗))
    赋值 (是否加粗, 假)
.如果真结束
.如果真 (是否为空 (是否倾斜))
    赋值 (是否倾斜, 假)
.如果真结束
.如果真 (是否为空 (是否下划线))
    赋值 (是否下划线, 假)
.如果真结束
.如果真 (是否为空 (字体颜色))
    赋值 (字体颜色, #品红)
.如果真结束

赋值 (lf.高度, 字体大小)
.如果 (等于 (是否加粗, 真))
    赋值 (lf.加粗, 900)
.否则
    赋值 (lf.加粗, 0)
.如果结束
.如果 (等于 (是否倾斜, 真))
    赋值 (lf.斜体, 1)
.否则
    赋值 (lf.斜体, 0)
.如果结束
.如果 (等于 (是否下划线, 真))
    赋值 (lf.下划线, 1)
.否则
    赋值 (lf.下划线, 0)
.如果结束
赋值 (lf.零碎工作组合, 134)
赋值 (lf.字体名称, 字体名称)
赋值 (hf, 使用指定属性创建逻辑字体_ (lf))
赋值 (h, 选入设备场景_ (hdc, hf))
赋值 (hbk, SetBkMode_ (hdc, 1))
赋值 (htext, 设置前景色_ (hdc, 字体颜色))
TextOut_ (hdc, x, y, 内容, 取文本长度 (内容))
SetBkMode_ (hdc, hbk)
设置前景色_ (hdc, htext)
选入设备场景_ (hdc, h)
删除对象_ (hf)
释放设备场景_ (窗口句柄, hdc)
返回 (真)




.子程序 区域截图, 字节集, , 
.参数 图左, 整数型, , 
.参数 图顶, 整数型, , 
.参数 图宽, 整数型, , 
.参数 图高, 整数型, , 

.局部变量 行宽, 整数型, , , 
.局部变量 文件长度, 整数型, , , 
.局部变量 Head, 字节集, , , 
.局部变量 Data, 字节集, , , 
.局部变量 BitmapHead, BITMAPINFOHEADER, , , 
.局部变量 源场景, 整数型, , , 
.局部变量 色深, 整数型, , , 
.局部变量 目标场景, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 原位图句柄, 整数型, , , 

赋值 (源场景, GetDC (0))
赋值 (色深, GetDeviceCaps (源场景, 12))
赋值 (目标场景, CreateCompatibleDC (源场景))
赋值 (位图句柄, CreateCompatibleBitmap (源场景, 图宽, 图高))
赋值 (原位图句柄, SelectObject (目标场景, 位图句柄))
BitBlt (目标场景, 0, 0, 图宽, 图高, 源场景, 图左, 图顶, 13369376) ' #SRCCOPY＝13369376
ReleaseDC (0, 源场景)
SelectObject (目标场景, 原位图句柄)

赋值 (BitmapHead.biSize, 40)
赋值 (BitmapHead.biWidth, 图宽)
赋值 (BitmapHead.biHeight, 图高)
赋值 (BitmapHead.biPlanes, 1)
赋值 (BitmapHead.biBitCount, 色深)
赋值 (行宽, 左移 (右移 (相加 (相乘 (图宽, 色深), 31), 5), 2))
赋值 (Data, 取空白字节集 (相加 (BitmapHead.biSize, 相乘 (行宽, 图高))))
RtlMoveMemory_FromBitmapHead (Data [1], BitmapHead, BitmapHead.biSize)
.如果 (不等于 (GetDIBits (目标场景, 位图句柄, 0, 图高, Data [相加 (BitmapHead.biSize, 1)], Data [1], 0), 0))
    赋值 (文件长度, 相加 (14, 相乘 (行宽, 图高)))
    赋值 (Data, 相加 (到字节集 (“BM”), 到字节集 (文件长度), { 0, 0, 0, 0, 54, 0, 0, 0 }, Data))
.否则
    赋值 (Data, {  })
.如果结束

DeleteObject (位图句柄)
DeleteDC (目标场景)
返回 (Data)


.子程序 后台区域截图, 字节集, , 
.参数 窗口句柄, 整数型, , 
.参数 取出图像左边, 整数型, , 
.参数 取出图像顶边, 整数型, , 
.参数 取出宽度, 整数型, , 
.参数 取出高度, 整数型, , 

返回 (取图片区域 (后台截图 (窗口句柄), 取出图像左边, 取出图像顶边, 取出宽度, 取出高度))

.子程序 取图片区域, 字节集, , 只能是0压缩,并且是8位或8位以上的位图！
.参数 原位图, 字节集, , 
.参数 取出图像左边, 整数型, , 
.参数 取出图像顶边, 整数型, , 
.参数 取出宽度, 整数型, , 
.参数 取出高度, 整数型, , 

.局部变量 图像宽度, 整数型, , , 
.局部变量 图像高度, 整数型, , , 
.局部变量 图像位数, 整数型, , , 
.局部变量 图像压缩, 整数型, , , 
.局部变量 新位图, 字节集, , , 
.局部变量 新位图信息头, BITMAPINFOHEADER, , , 
.局部变量 新位图文件头, 文件头信息_, , , 
.局部变量 文件长度, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 颜色点阵偏移量, 整数型, , , 
.局部变量 点的大小, 整数型, , , 
.局部变量 颜色表, 字节集, , , 
.局部变量 总数据偏移, 整数型, , , 
.局部变量 新行宽, 整数型, , , 
.局部变量 原行宽, 整数型, , , 
.局部变量 时间, 整数型, , , 

赋值 (图像宽度, 取字节集数据 (取字节集中间 (原位图, 19, 4), #整数型, ))
赋值 (图像高度, 取字节集数据 (取字节集中间 (原位图, 23, 4), #整数型, ))
赋值 (图像位数, 取字节集数据 (取字节集中间 (原位图, 29, 2), #短整数型, ))
赋值 (图像压缩, 取字节集数据 (取字节集中间 (原位图, 31, 4), #整数型, ))
.如果真 (不等于 (图像压缩, 0))
    返回 ({  })
.如果真结束
.如果真 (等于 (图像位数, 32))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 4)
.如果真结束
.如果真 (等于 (图像位数, 24))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 3)
.如果真结束
.如果真 (等于 (图像位数, 16))
    赋值 (颜色点阵偏移量, 54)
    赋值 (点的大小, 2)
.如果真结束
.如果真 (等于 (图像位数, 8))
    赋值 (颜色点阵偏移量, 1078)
    赋值 (点的大小, 1)
    赋值 (颜色表, 取字节集中间 (原位图, 55, 1024))
.如果真结束
.如果真 (小于 (图像位数, 8))
    输出调试文本 (“错误！ 图像位深小于8！”)
    返回 ({  })
.如果真结束
.如果真 (或者 (大于 (相加 (取出图像左边, 取出宽度), 图像宽度), 大于 (相加 (取出图像顶边, 取出高度), 图像高度), 小于 (取出图像左边, 0), 小于 (取出图像顶边, 0), 小于或等于 (取出宽度, 0), 小于或等于 (取出高度, 0)))
    输出调试文本 (“参数错误！请检查输入的参数！”)
    返回 ({  })
.如果真结束
赋值 (原行宽, 左移 (右移 (相加 (相乘 (图像宽度, 图像位数), 31), 5), 2))
赋值 (新行宽, 左移 (右移 (相加 (相乘 (取出宽度, 图像位数), 31), 5), 2))
赋值 (文件长度, 相乘 (新行宽, 取出高度))
赋值 (新位图, 取空白字节集 (相加 (文件长度, 54, 取字节集长度 (颜色表))))
赋值 (新位图文件头.文件类型, 19778)
赋值 (新位图文件头.偏移量, 颜色点阵偏移量)
赋值 (新位图文件头.结果大小, 相加 (颜色点阵偏移量, 文件长度))
复制内存_复制位图文件头到字节集 (新位图 [1], 新位图文件头, 14)
赋值 (新位图信息头.biSize, 40)
赋值 (新位图信息头.biWidth, 取出宽度)
赋值 (新位图信息头.biHeight, 取出高度)
赋值 (新位图信息头.biPlanes, 1)
赋值 (新位图信息头.biBitCount, 图像位数)
复制内存_复制位图信息头到字节集 (新位图 [15], 新位图信息头, 40)
.如果真 (等于 (图像位数, 8))
    复制内存_字节集到字节集 (新位图 [55], 颜色表 [1], 1024)
.如果真结束
 ' 高偏移 ＝ 原行宽 × (图像高度 － 取出高度 － 取出图像顶边)
 ' 宽偏移 ＝ 取出图像左边 × 点的大小
赋值 (总数据偏移, 相加 (相乘 (原行宽, 相减 (图像高度, 取出高度, 取出图像顶边)), 相乘 (取出图像左边, 点的大小))) ' 总偏移=高偏移+宽偏移
.计次循环首 (取出高度, i)
    复制内存_字节集到字节集 (新位图 [相加 (相乘 (相减 (i, 1), 新行宽), 颜色点阵偏移量, 1)], 原位图 [相加 (颜色点阵偏移量, 总数据偏移, 相乘 (相减 (i, 1), 原行宽), 1)], 新行宽)
.计次循环尾 ()
返回 (新位图)

.子程序 取颜色值, 整数型, , 
.参数 红色, 整数型, , 数值范围从 0 到 255，表示颜色中的红色成份。
.参数 绿色, 整数型, , 数值范围从 0 到 255，表示颜色中的绿色成份。
.参数 蓝色, 整数型, , 数值范围从 0 到 255，表示颜色中的蓝色成份。

.局部变量 temp, 整数型, , , 
.局部变量 temp1, 整数型, , , 

赋值 (temp, 数值_合并短整数 (位与 (红色, 255), 位与 (绿色, 255)))
赋值 (temp1, 数值_合并整数 (temp, 位与 (蓝色, 255)))
返回 (temp1)


.子程序 选择颜色, 文本型, , 
.参数 取十六进色彩, 逻辑型, 可空, 

.局部变量 cc, ChooseColor, , , 
.局部变量 rtn, 空白型, , , 
.局部变量 颜色标签, 文本型, , , 

赋值 (cc.lStructSize, 36)
赋值 (cc.hwndOwner, 窗口.取当前窗口句柄 ())
赋值 (cc.hInstance, GetWindowWord (窗口.取当前窗口句柄 (), -6))
赋值 (cc.flags, 0)
赋值 (cc.lpCustColors, 取空白文本 (相乘 (16, 4)))
赋值 (rtn, ChooseColor (cc))
.如果真 (不等于 (rtn, 0)) ' 未按取消
    .判断开始 (取十六进色彩)
        返回 (到文本 (cc.rgbResult))
    .默认
        赋值 (颜色标签, 取十六进制文本 (cc.rgbResult))
        赋值 (颜色标签, 相加 (取重复文本 (相减 (6, 取文本长度 (颜色标签)), “0”), 颜色标签))
        返回 (相加 (“#”, 取文本右边 (颜色标签, 2), 取文本中间 (颜色标签, 3, 2), 取文本左边 (颜色标签, 2)))
    .判断结束
    
.如果真结束
返回 (“”)

.子程序 复制图片到剪贴板, 空白型, , 
.参数 图片数据, 字节集, , 
.参数 窗口句柄, 整数型, , 

.局部变量 图片, 对象, , , 
.局部变量 图片句柄, 整数型, , , 


图片.创建图片对象 (图片数据)
赋值 (图片句柄, 图片.读数值属性 (“Handle”, ))

OpenClipboard (窗口句柄)
EmptyClipboard ()
SetClipboardData (2, 图片句柄)
CloseClipboard ()

.子程序 从剪贴板取位图, 字节集, , 
.参数 窗口句柄, 整数型, , 

.局部变量 图片, 位图, , , 
.局部变量 图片句柄, 整数型, , , 


OpenClipboard (窗口句柄)
赋值 (图片句柄, GetClipboardData (2))
CloseClipboard ()
图片.从句柄创建 (图片句柄)
返回 (图片.取位图数据 ())

.类模块 驱动操作, , , 

.子程序 启动, 逻辑型, 公开, 使用Winio前,必须先使用此功能! Usb接口的鼠标或键盘 千万不要使用!
.参数 是否隐藏dll, 逻辑型, 可空, 可空为假:不隐藏  真:隐藏
.参数 版本号, 整数型, 可空, 可空:0默认为带补丁版本 1原始版本

.如果真 (等于 (版本号, 0))
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.dll”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.dll”), #winio1)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.sys”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.sys”), #winio2)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.vxd”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.vxd”), #winio3)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\hknm.sys”)), 假))
        写到文件 (相加 (取运行目录 (), “\hknm.sys”), #winio4)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\hknms.sys”)), 假))
        写到文件 (相加 (取运行目录 (), “\hknms.sys”), #winio5)
    .如果真结束
    
.如果真结束
.如果真 (等于 (版本号, 1))
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.dll”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.dll”), #winio1a)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.sys”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.sys”), #winio2a)
    .如果真结束
    .如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\winio.vxd”)), 假))
        写到文件 (相加 (取运行目录 (), “\winio.vxd”), #winio3)
    .如果真结束
    
.如果真结束
.如果真 (是否隐藏dll)
    置文件属性 (相加 (取运行目录 (), “\winio.dll”), 2)
    置文件属性 (相加 (取运行目录 (), “\winio.sys”), 2)
    置文件属性 (相加 (取运行目录 (), “\winio.vxd”), 2)
    置文件属性 (相加 (取运行目录 (), “\hknm.sys”), 2)
    置文件属性 (相加 (取运行目录 (), “\hknms.sys”), 2)
.如果真结束
返回 (openwinio ())


.子程序 撤消, 空白型, 公开, 关闭窗口前,必须先使用此功能撤消驱动!
.参数 是否清理, 逻辑型, 可空, 默认为假, 真为清理dll文件

closewinio ()
.如果真 (是否清理)
    删除文件 (相加 (取运行目录 (), “\winio.dll”))
    删除文件 (相加 (取运行目录 (), “\winio.sys”))
    删除文件 (相加 (取运行目录 (), “\winio.vxd”))
    删除文件 (相加 (取运行目录 (), “\hknm.sys”))
    删除文件 (相加 (取运行目录 (), “\hknms.sys”))
.如果真结束


.子程序 按键, 空白型, 公开, 模拟按键winio(无返回值)  此功能不会给游戏屏蔽掉,但只能在系统最高权限下运行,独立编译后有效
.参数 键代码, 整数型, , 键代码
.参数 状态, 整数型, 可空, 为空:默认为按键(按下+放开)   3 #按下  4 #放开
.参数 间隔, 整数型, 可空, 可空默认为:50 (毫秒) 按下放开之间的间隔时间 不得小于50

.如果真 (等于 (间隔, 0))
    赋值 (间隔, 50)
.如果真结束
.如果真 (不等于 (状态, #驱动_放开))
    键盘键 (取扫描码 (键代码, 真)) ' 按下
    超级延时 (间隔)
.如果真结束
.如果真 () ' <!!!>

.子程序 组合键, 空白型, 公开, 模拟组合按键winio
.参数 键代码, 整数型, , 
.参数 功能键码, 整数型, , 
.参数 间隔, 整数型, 可空, 可空默认为:50  (毫秒) 按下放开之间的间隔时间 不得小于50

.如果真 (等于 (间隔, 0))
    赋值 (间隔, 50)
.如果真结束
键盘键 (取扫描码 (功能键码, 真)) ' 按下功能键
超级延时 (间隔)
键盘键 (取扫描码 (键代码, 真)) ' 按下普通键
键盘键 (取扫描码 (键代码, 真)) ' 按下普通键
超级延时 (间隔)
键盘键 (取扫描码 (键代码, 假)) ' 释放普通键
超级延时 (间隔)
键盘键 (取扫描码 (功能键码, 假)) ' 释放功能键
超级延时 (间隔)


.子程序 移动鼠标, 空白型, 公开, 模拟鼠标移动winio(无返回值)坐标不精确! 只能在系统最高权限下运行,必须先开启winio
.参数 横坐标偏移距离, 整数型, , 鼠标横坐标偏移距离(最大偏移距离为: 505   即: -505 至 505 之间)
.参数 纵坐标偏移距离, 整数型, , 鼠标纵坐标偏移距离(最大偏移距离为: 505   即: -505 至 505 之间)


.如果 (小于 (横坐标偏移距离, 0))
    鼠标键 (#winio鼠标左移, 整除 (负 (横坐标偏移距离), 2), 0, 0)
.否则
    鼠标键 (#winio鼠标右移, 整除 (横坐标偏移距离, 2), 0, 0)
.如果结束
.如果 (小于 (纵坐标偏移距离, 0))
    鼠标键 (#winio鼠标上移, 0, 整除 (纵坐标偏移距离, 3), 0)
.否则
    鼠标键 (#winio鼠标下移, 0, 整除 (负 (纵坐标偏移距离), 3), 0)
.如果结束



.子程序 操作鼠标, 空白型, 公开, 模拟鼠标按键winio(无返回值) 只能在系统最高权限下运行,必须先开启winio
.参数 键, 整数型, 可空, 可空:为左键  1 #左键   2 #右键   3 #中键
.参数 状态, 整数型, 可空, 可空:为单击  1 #单击   2 #双击   3 #按下  4 #放开

.判断开始 (或者 (等于 (键, 0), 等于 (键, 1)))
    .判断开始 (或者 (等于 (状态, 0), 等于 (状态, #驱动_单击)))
        鼠标键 (#winio左键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_双击))
        鼠标键 (#winio左键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
        超级延时 (_判断鼠标双击间隔 ())
        鼠标键 (#winio左键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_按下))
        鼠标键 (#winio左键按下, 0, 0, 0)
    .判断 (等于 (状态, #驱动_放开))
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .默认
        
    .判断结束
    
.判断 (等于 (键, #驱动_右键))
    .判断开始 (或者 (等于 (状态, 0), 等于 (状态, #驱动_单击)))
        鼠标键 (#winio右键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_双击))
        鼠标键 (#winio右键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
        超级延时 (_判断鼠标双击间隔 ())
        鼠标键 (#winio右键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_按下))
        鼠标键 (#winio右键按下, 0, 0, 0)
    .判断 (等于 (状态, #驱动_放开))
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .默认
        
    .判断结束
    
.判断 (等于 (键, #驱动_中键))
    .判断开始 (或者 (等于 (状态, 0), 等于 (状态, #驱动_单击)))
        鼠标键 (#winio中键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_双击))
        鼠标键 (#winio中键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
        超级延时 (_判断鼠标双击间隔 ())
        鼠标键 (#winio中键按下, 0, 0, 0)
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .判断 (等于 (状态, #驱动_按下))
        鼠标键 (#winio中键按下, 0, 0, 0)
    .判断 (等于 (状态, #驱动_放开))
        鼠标键 (#winio任意键放开, 0, 0, 0)
    .默认
        
    .判断结束
    
.默认
    
.判断结束



.子程序 鼠标键, 空白型, 公开, 
.参数 鼠标动作, 整数型, , 
.参数 X, 整数型, , 
.参数 Y, 整数型, , 
.参数 Z, 整数型, 可空, 保留，0

 ' 左键按下(鼠标动作=9)。X、Y、Z 为0
 ' 右键按下(鼠标动作=10)。X、Y、Z 为0
 ' 中键按下(鼠标动作=12)。X、Y、Z 为0
 ' 任意键放开(鼠标动作=8)。X、Y、Z 为0
 ' ------------------------------------
 ' 鼠标上移(鼠标动作=8)。Y为移动距离，最大为255，最小为1。X、Z 为0
 ' 鼠标下移(鼠标动作=40)。Y为移动距离，最大为1，最小为255。X、Z 为0
 ' 鼠标左移(鼠标动作=24)。X为移动距离，最大为1，最小为255。Y、Z 为0
 ' 鼠标右移(鼠标动作=8)。X为移动距离，最大为255，最小为1。Y、Z 为0
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, 鼠标动作, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, X, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, Y, 1)
 ' ------------------------------------
等待空缓冲 ()
写端口 (100, 211, 1)
等待空缓冲 ()
写端口 (96, Z, 1)


.子程序 键盘键, 空白型, 公开, 
.参数 扫描码, 整数型, , 

等待空缓冲 () ' 等状态寄存器OBF变0
写端口 (100, 210, 1) ' 210（写键盘输出缓冲区），211（写鼠标输出缓冲区）。具体命令请参考《PS/2技术参考》第32页
等待空缓冲 ()
写端口 (96, 扫描码, 1) ' 写参数


.子程序 等待空缓冲, 空白型, , 等待输入缓冲器为空(Wait4IBE)
.局部变量 dwVal, 整数型, , , 

赋值 (dwVal, 0)
.循环判断首 ()
    读端口 (100, dwVal, 1) ' 读状态寄存器
.循环判断尾 (大于 (位与 (dwVal, 2), 0))


.子程序 取扫描码, 整数型, , 详细扫描码，请参考《PS/2技术参考》第52页--第1套扫描码
.参数 键代码, 整数型, , 
.参数 是否通码, 逻辑型, , 真--按下（通码），假--放开（断码）。

.如果 (等于 (是否通码, 真))
    返回 (_键码转换 (键代码, 0))
.否则
    返回 (位或 (_键码转换 (键代码, 0), 128))
.如果结束




.子程序 超级延时, 空白型, , 高精度延时,cpu占用低,窗口不卡死,一次最大可延时几年 (无返回值)
.参数 延时间隔, 整数型, , 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒
.参数 延时单位, 整数型, 可空, 可空:毫秒  0 毫秒  1 微秒  2 秒  3 分  4 小时  5 天

.局部变量 hTimer, 整数型, , , 
.局部变量 int64, LARGE_INTEGER, , , 
.局部变量 计次, 整数型, , , 

.判断开始 (等于 (延时单位, 1))
    赋值 (int64.QuadPart, 相乘 (-10, 延时间隔))
    赋值 (hTimer, CreateWaitableTimerA (0, 假, 0))
    SetWaitableTimer (hTimer, int64, 0, 0, 0, 假)
    .判断循环首 (不等于 (MsgWaitForMultipleObjects (1, hTimer, 假, #INFINITE, #QS_ALLINPUT), #WAIT_OBJECT_0))
        处理事件 ()
    .判断循环尾 ()
    CloseHandle (hTimer)
    返回 ()
.判断 (等于 (延时单位, 0))
    赋值 (延时单位, 1)
.判断 (等于 (延时单位, 2))
    赋值 (延时单位, 1000)
.判断 (等于 (延时单位, 3))
    赋值 (延时单位, 相乘 (1000, 60))
.判断 (等于 (延时单位, 4))
    赋值 (延时单位, 相乘 (1000, 60, 60))
.判断 (等于 (延时单位, 5))
    赋值 (延时单位, 相乘 (1000, 60, 60, 24))
.默认
    
.判断结束
.计次循环首 (延时单位, 计次)
    赋值 (int64.QuadPart, 相乘 (-10, 延时间隔, 1000))
    赋值 (hTimer, CreateWaitableTimerA (0, 假, 0))
    SetWaitableTimer (hTimer, int64, 0, 0, 0, 假)
    .判断循环首 (不等于 (MsgWaitForMultipleObjects (1, hTimer, 假, #INFINITE, #QS_ALLINPUT), #WAIT_OBJECT_0))
        处理事件 ()
    .判断循环尾 ()
    CloseHandle (hTimer)
.计次循环尾 ()


.类模块 进程操作, , , 

.程序集变量 m_hProcess, 整数型, , , 
.子程序 PID取窗口句柄, 整数型, , 
.参数 进程ID, 整数型, , 

.局部变量 参数, 整数型, , , 
.局部变量 进程, 整数型, , , 
.局部变量 窗口信息, 整数型, , "0", 

.计次循环首 (窗口.窗口枚举一 (窗口信息), 参数)
    窗口句柄取ID (窗口信息 [参数], 进程)
    .如果真 (等于 (进程, 进程ID))
        返回 (窗口信息 [参数])
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.子程序 打开进程, 整数型, , 
.参数 进程编号, 整数型, , 

返回 (Api_打开进程 (2035711, 假, 进程编号))

.子程序 隐藏进程, 逻辑型, , 由于采用直接读写物理内存，所以在某些机器上不稳定。
.参数 pid, 整数型, 可空, 空为隐藏本进程，可输入其它进程PID

.局部变量 系统, 系统操作, , , 
.局部变量 内存, 内存操作, , , 
.局部变量 eprocess, 长整数型, , , 
.局部变量 hand, 整数型, , , 
.局部变量 temp, 字节集, , , 
.局部变量 fw_, 长整数型, , , 
.局部变量 bw_, 长整数型, , , 
.局部变量 fw, 字节集, , , 
.局部变量 bw, 字节集, , , 

.如果 (是否为空 (pid))
    赋值 (hand, OpenProcess (2075311, 0, GetCurrentProcessId ()))
    赋值 (eprocess, 系统.取进程EProcess (GetCurrentProcessId ()))
    CloseHandle (hand)
    
.否则
    赋值 (eprocess, 系统.取进程EProcess (pid))
.如果结束
.如果真 (等于 (eprocess, 0))
    返回 (假)
.如果真结束

赋值 (temp, 内存.读物理内存 (相加 (eprocess, 136), 4))
.如果真 (等于 (temp, {  }))
    返回 (假)
.如果真结束
赋值 (fw_, 取字节集数据 (temp, #长整数型, ))
赋值 (fw, temp)

赋值 (temp, 内存.读物理内存 (相加 (eprocess, 140), 4))
.如果真 (等于 (temp, {  }))
    返回 (假)
.如果真结束
赋值 (bw_, 取字节集数据 (temp, #长整数型, ))
赋值 (bw, temp)

.如果真 (等于 (内存.写物理内存 (相加 (fw_, 4), bw), -1))
    返回 (假)
.如果真结束

.如果真 (等于 (内存.写物理内存 (bw_, fw), -1))
    返回 (假)
.如果真结束
返回 (真)


.子程序 提升进程权限一, 逻辑型, , 提升进程到指定权限( #备份  #启动  #关机  #调试)
.参数 目标进程, 整数型, 可空, 为空表示当前线程
.参数 权限类别, 文本型, 可空, 为空:#调试

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, 进程权限_, , , 
.局部变量 tkpNewButIgnored, 进程权限_, , , 
.局部变量 返回值, 逻辑型, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.如果真 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, _获取线程 ())
.如果真结束
.如果真 (是否为空 (权限类别))
    赋值 (权限类别, #权限_调试)
.如果真结束
_打开令牌 (hdlProcessHandle, 40, hdlTokenHandle)
_恢复权限 (“”, 权限类别, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
赋值 (返回值, _获取令牌特权 (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))
CloseHandle (hdlTokenHandle)
返回 (返回值)


.子程序 提升进程权限二, 逻辑型, , 成功返回真，把一个进程的权限提升到调试级权限
.参数 进程ID, 整数型, 可空, 可空为提升当前进程

.局部变量 进程句柄, 整数型, , , 
.局部变量 令牌句柄, 整数型, , , 
.局部变量 进程令牌, LuID, , , 
.局部变量 进程权限, 进程权限_, , , 
.局部变量 返回值, 逻辑型, , , 

.如果真 (是否为空 (进程ID))
    赋值 (进程ID, _取自进程ID ())
.如果真结束
赋值 (进程句柄, _打开进程 (2035711, 0, 进程ID))
_打开令牌对象 (进程句柄, 983551, 令牌句柄)
_取权限令牌 (0, “SeDebugPrivilege”, 进程令牌)
赋值 (进程权限.PrivilegeCount, 1)
赋值 (进程权限.Attributes, 2)
赋值 (进程权限.lowpart, 进程令牌.lowpart)
赋值 (进程权限.highpart, 进程令牌.highpart)
赋值 (返回值, _置进程权限 (令牌句柄, 假, 进程权限, 0, 0, 0))
_关闭对象 (进程句柄)
返回 (返回值)

.子程序 进程枚举, 整数型, , 失败返回0，成功返回进程数量(该命令为高级成员命令)
.参数 进程信息, 进程类型, 参考 可空 数组, 返回的进程信息 数组

.局部变量 信息, 进程类型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

清除数组 (进程信息)
赋值 (进程快照, _创建快照 (15, 0))
.如果真 (等于 (进程快照, 0))
    返回 (0)
.如果真结束
赋值 (信息.size, 1024)
赋值 (进程句柄, _第一个 (进程快照, 信息))
.判断循环首 (不等于 (进程句柄, 0))
    加入成员 (进程信息, 信息)
    赋值 (进程句柄, _下一个 (进程快照, 信息))
.判断循环尾 ()
CloseHandle (进程快照)
返回 (取数组成员数 (进程信息))


.子程序 进程路径, 文本型, , 取指定进程名的程序启动路径(成功返回路径,失败或进程不存在返回空,存在的进程无路径返回"?"号)
.参数 进程名, 文本型, , 程序进程名(注意进程名的大小写!)

.局部变量 进程列表, 进程类型, , , 
.局部变量 进程数, 整数型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 临时, 整数型, , , 
.局部变量 临时路径, 文本型, , , 
.局部变量 临时进程名, 文本型, , , 
.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块类型, , , 

赋值 (进程快照, _创建快照 (15, 0))
.如果真 (等于 (进程快照, 0))
    信息框 (“创建进程快照失败”, 0, )
    返回 (“”)
.如果真结束
赋值 (进程数, 0)
赋值 (进程列表.size, 296)
赋值 (临时, _第一个 (进程快照, 进程列表))
.判断循环首 (不等于 (临时, 0))
    赋值 (进程数, 相加 (进程数, 1))
    
    赋值 (snap, _创建快照 (8, 进程列表.id))
    赋值 (mod.size, 1024)
    _第一个模块 (snap, mod)
    赋值 (临时路径, 取字节集数据 (到字节集 (mod.模块完整路径), 10, ))
    
    .如果真 (不等于 (进程列表.id, 0))
        赋值 (临时进程名, 到文本 (进程列表.exefile))
         ' 输出调试文本 (临时路径)
        .如果真 (等于 (临时进程名, 进程名))
            CloseHandle (进程快照)
            .如果真 (大于 (寻找文本 (临时路径, “?”, , 假), 0))
                返回 (“?”)
            .如果真结束
            返回 (临时路径)
        .如果真结束
        
    .如果真结束
    赋值 (临时, _下一个 (进程快照, 进程列表))
.判断循环尾 ()
返回 (“”)


.子程序 进程取ID, 整数型, 公开, 取指定进程的进程ID(返回第一个进程ID,失败返回空信息)
.参数 进程名, 文本型, , 程序进程名(注意进程名的大小写!)

.局部变量 信息, 进程类型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

赋值 (进程快照, _创建快照 (15, 0))
.如果真 (不等于 (进程快照, 0))
    赋值 (信息.size, 1024)
    赋值 (进程句柄, _第一个 (进程快照, 信息))
    .判断循环首 (不等于 (进程句柄, 0))
        .如果真 (等于 (到文本 (信息.exefile), 进程名))
            跳出循环 ()
        .如果真结束
        赋值 (进程句柄, _下一个 (进程快照, 信息))
    .判断循环尾 ()
    CloseHandle (进程快照)
.如果真结束
.判断开始 (等于 (到文本 (信息.exefile), 进程名))
    返回 (信息.id)
.默认
    返回 (-1)
.判断结束



.子程序 进程ID取模块, 整数型, , 失败为0，成功返回模块数量(该命令为高级成员命令)
.参数 进程ID, 整数型, 可空, 为空 则取当前进程模块
.参数 模块信息数组, 模块类型, 参考 可空 数组, 返回的模块信息 数组

.局部变量 快照句柄, 整数型, , , 
.局部变量 模块信息, 模块类型, , , 
.局部变量 进程句柄, 整数型, , , 

赋值 (快照句柄, _创建快照 (8, 进程ID))
.如果真 (等于 (快照句柄, 0))
    返回 (0)
.如果真结束
赋值 (模块信息.size, 1024)
赋值 (进程句柄, _第一个模块 (快照句柄, 模块信息))
.判断循环首 (不等于 (进程句柄, 0))
    加入成员 (模块信息数组, 模块信息)
    赋值 (进程句柄, _下一个模块 (快照句柄, 模块信息))
.判断循环尾 ()
CloseHandle (快照句柄)
返回 (取数组成员数 (模块信息数组))


.子程序 MyCreateWindowEx, 整数型, , 类名API拦截
.参数 dwExStyle, 整数型, , 
.参数 lpClassName, 文本型, , 
.参数 lpWindowName, 文本型, , 
.参数 dwStyle, 整数型, , 
.参数 x, 整数型, , 
.参数 y, 整数型, , 
.参数 nWidth, 整数型, , 
.参数 nHeight, 整数型, , 
.参数 hWndParent, 整数型, , 
.参数 hMenu, 整数型, , 
.参数 hInstance, 整数型, , 
.参数 lpParam, 整数型, , 

.局部变量 返回值, 整数型, , , 
.局部变量 wc, WNDCLASSEX, , , 
.局部变量 ApiHook, Hook操作, , , 

ApiHook.停止Hook () ' 停止拦截API
.如果 (等于 (lpClassName, 变量旧类名))
    赋值 (wc.cbSize, 相乘 (12, 4))
    GetClassInfoExA (hInstance, lpClassName, wc) ' 获取类信息
    赋值 (wc.lpszClassName, 变量新类名) ' 设置类名
    RegisterClassExA (wc) ' 注册类
    赋值 (返回值, CreateWindowExA (dwExStyle, wc.lpszClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)) ' 创建主窗口
    ApiHook.撤消Hook () ' 卸载APIHOOK
.否则
    赋值 (返回值, CreateWindowExA (dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam))
.如果结束
ApiHook.开始Hook () ' 开始拦截API
返回 (返回值)

.子程序 进程暂停, 空白型, , 将指定进程暂停(无返回值)
.参数 进程ID, 整数型, , 欲被暂停进程的进程ID
.参数 状态, 逻辑型, 可空, 可空为假:恢复进程   真:暂停进程

.局部变量 进程句柄, 整数型, , , 

赋值 (进程句柄, OpenProcess (2035711, 0, 进程ID))
.如果 (状态)
    _进程暂停 (进程句柄)
.否则
    _进程恢复 (进程句柄)
.如果结束
CloseHandle (进程句柄)


.子程序 进程结束, 空白型, , 结束一个进程,可以结束绝大部分进程,不受系统权限限制(无返回值)
.参数 进程名, 文本型, , 窗口程序的进程名

.局部变量 临时窗口列表, 整数型, , "0", 
.局部变量 临时进程列表, 进程类型, , "0", 
.局部变量 循环变量, 整数型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 窗口进程ID, 整数型, , , 
.局部变量 窗口线程ID, 整数型, , , 
.局部变量 窗口操作, 窗口操作, , , 

窗口操作.窗口枚举一 (临时窗口列表)

进程枚举 (临时进程列表)
.计次循环首 (取数组成员数 (临时进程列表), 循环变量) ' 从所有进程中找到指定进程ID
    .如果真 (等于 (到文本 (临时进程列表 [循环变量], exefile), 进程名))
        赋值 (进程ID, 临时进程列表 [循环变量], id)
         ' 输出调试文本 (进程ID)
        .计次循环首 (取数组成员数 (临时窗口列表), 循环变量) ' 从所有窗口句柄中找到窗口进程ID与进程ID相同的
            赋值 (窗口线程ID, _取窗口进程ID (临时窗口列表 [循环变量], 窗口进程ID))
             ' 输出调试文本 (窗口进程ID)
            .如果真 (等于 (窗口进程ID, 进程ID))
                .如果真 (窗口.句柄是否有效 (临时窗口列表 [循环变量])) ' 判断窗口句柄是否为有效
                    _投递消息 (临时窗口列表 [循环变量], 18, 0, 0)
                    _投递消息 (临时窗口列表 [循环变量], 16, 0, 0)
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.计次循环尾 ()


.子程序 进程终止, 逻辑型, , 终止一个进程(成功返回真,失败返回假)
.参数 进程ID, 整数型, , 欲结束的进程名

.如果 (等于 (_终止进程 (OpenProcess (1, 0, 进程ID), 0), 1))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 进程是否存在, 逻辑型, , 判断指定进程是否存在(此判断与进程其它信息无关联)(存在返回真,不存在或失败返回假)
.参数 进程名, 文本型, , 欲检测的进程名

.局部变量 进程信息数组, 进程类型, , "0", 
.局部变量 a, 整数型, , , 
.局部变量 信息数, 整数型, , , 

赋值 (信息数, 进程枚举 (进程信息数组))
.计次循环首 (信息数, a)
    .如果真 (等于 (到文本 (进程信息数组 [a], exefile), 进程名))
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)


.子程序 取命令行参数, 文本型, , 取指定程序的命令行参数,要求取命令行程序权限不低于被取程序的权限(返回命令行参数,无命令行或失败返回空文本)
.参数 进程名或路径, 文本型, , 欲取命令行参数的进程名或完整的程序路径

.局部变量 路径加参数, 文本型, , , 
.局部变量 窗口, 窗口操作, , , 

.如果真 (大于 (寻找文本 (进程名或路径, “\”, , 假), 0))
    赋值 (进程名或路径, 取路径文件名 (进程名或路径))
.如果真结束
赋值 (路径加参数, 进程取路径及命令行参数 (窗口.取窗口PID (进程取句柄 (进程名或路径))))
返回 (取文本右边 (路径加参数, 相减 (取文本长度 (路径加参数), 寻找文本 (路径加参数, 进程名或路径, , 假), 取文本长度 (进程名或路径), 1)))


.子程序 进程取句柄, 长整数型, , 取指定进程启动窗口的句柄(返回第一个符合条件的窗口句柄,失败返回-1)
.参数 进程名, 文本型, , 窗口程序的进程名

.局部变量 临时窗口列表, 整数型, , "0", 
.局部变量 临时进程列表, 进程类型, , "0", 
.局部变量 循环变量, 整数型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 窗口进程ID, 整数型, , , 
.局部变量 窗口线程ID, 整数型, , , 
.局部变量 窗口, 窗口操作, , , 

窗口.窗口枚举一 (临时窗口列表)
进程枚举 (临时进程列表)
.计次循环首 (取数组成员数 (临时进程列表), 循环变量) ' 从所有进程中找到指定进程ID
    .如果真 (等于 (到文本 (临时进程列表 [循环变量], exefile), 进程名))
        赋值 (进程ID, 临时进程列表 [循环变量], id)
         ' 输出调试文本 (进程ID)
        .计次循环首 (取数组成员数 (临时窗口列表), 循环变量) ' 从所有窗口句柄中找到窗口进程ID与进程ID相同的
            赋值 (窗口线程ID, _取窗口进程ID (临时窗口列表 [循环变量], 窗口进程ID))
             ' 输出调试文本 (窗口进程ID)
            .如果真 (等于 (窗口进程ID, 进程ID))
                返回 (临时窗口列表 [循环变量])
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.计次循环尾 ()
返回 (-1)


.子程序 进程取路径及命令行参数, 文本型, , 获取目标进程的映像路径及命令行参数。(失败返回空文本)
.参数 进程ID, 整数型, , 

.局部变量 strBuffer, 文本型, , , 

取进程路径及命令行参数_打开目标进程 (进程ID)
取进程路径及命令行参数_GetProcessImagePathAndCommandLine (strBuffer)
取进程路径及命令行参数_Close ()
返回 (strBuffer)


.子程序 取进程路径及命令行参数_打开目标进程, 逻辑型, , 打开目标进程。成功返回真，失败返回假。备注：若不再操作目标进程，请调用“Close”方法释放资源。 [斩月]
.参数 dwProcessId, 整数型, , 目标进程ID

赋值 (m_hProcess, OpenProcess2 (位或 (#PROCESS_VM_READ, #PROCESS_DUP_HANDLE, #PROCESS_VM_OPERATION, #PROCESS_CREATE_THREAD, #PROCESS_QUERY_INFORMATION), 假, dwProcessId)) ' 打开目标进程
返回 (不等于 (m_hProcess, 0))

.子程序 取进程路径及命令行参数_Close, 逻辑型, , 关闭已打开的句柄，释放资源。成功返回真，失败返回假。 [斩月]
.如果真 (不等于 (m_hProcess, 0))
    .如果真 (CloseHandle (m_hProcess)) ' 关闭进程句柄
        赋值 (m_hProcess, 0)
        返回 (真)
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 取进程路径及命令行参数_SetHandle, 空白型, , 置入进程句柄，可通过本类的实例操作目标进程。 [斩月]
.参数 hProcess, 整数型, , 目标进程ID
.参数 bCloseOldHandle, 逻辑型, 可空, 是否把已打开的句柄释放。建议该参数为真。否则有可能会导致内存泄漏。

.如果真 (bCloseOldHandle)
    CloseHandle (m_hProcess) ' 关于进程句柄
.如果真结束
赋值 (m_hProcess, hProcess)

.子程序 取进程路径及命令行参数_GetSaveHandle, 整数型, , 获取已保存的句柄 [斩月]
返回 (m_hProcess)

.子程序 取进程路径及命令行参数_GetProcessImagePathAndCommandLine, 逻辑型, , 获取目标进程的映像路径及命令行参数。成功返回真，失败返回假。 [斩月]
.参数 lpstrImagePathAndCommandLine, 文本型, 参考, 用于保存目标进程的映像路径及命令行参数的文本型变量

.局部变量 GetCommandLineA_addr, 整数型, , , GetCommandLineA的地址
.局部变量 hRemoteThread, 整数型, , , 远程线程句柄
.局部变量 lptstr, 整数型, , , 远程进程的映像路径及命令行参数的基址
.局部变量 lstrlenA_addr, 整数型, , , lstrlenA的地址
.局部变量 strlen, 整数型, , , 长度

赋值 (GetCommandLineA_addr, GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “GetCommandLineA”)) ' 获取 GetCommandLineA 的地址
赋值 (hRemoteThread, CreateRemoteThread (m_hProcess, 0, 0, GetCommandLineA_addr, 0, 0, 0)) ' 创建远程线程执行 GetCommandLineA 函数，并获取该线程的线程句柄
.如果 (不等于 (hRemoteThread, 0))
    WaitForSingleObject (hRemoteThread, #INFINITE) ' 等待线程结束
    GetExitCodeThread (hRemoteThread, lptstr) ' 获取线程退出代码
    CloseHandle (hRemoteThread) ' 关闭线程句柄
.否则
    返回 (假)
.如果结束
赋值 (lstrlenA_addr, GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “lstrlenA”)) ' 获取 lstrlenA 的地址
赋值 (hRemoteThread, CreateRemoteThread (m_hProcess, 0, 0, lstrlenA_addr, lptstr, 0, 0)) ' 创建远程线程执行 lstrlenA 函数，并获取该线程的线程句柄
.如果 (不等于 (hRemoteThread, 0))
    WaitForSingleObject (hRemoteThread, #INFINITE) ' 等待线程结束
    GetExitCodeThread (hRemoteThread, strlen) ' 获取线程退出代码
    CloseHandle (hRemoteThread) ' 关闭线程句柄
.否则
    返回 (假)
.如果结束
赋值 (lpstrImagePathAndCommandLine, 取空白文本 (strlen)) ' 申请内存空间，用于保存远程进程的映像路径及命令行参数的基址
.如果真 (_内存读文本 (m_hProcess, lptstr, lpstrImagePathAndCommandLine, strlen, 0)) ' 读取远程进程的映像路径及命令行参数
    返回 (真)
.如果真结束
返回 (假)

.子程序 取进程名, 文本型, , 通进进程ID取得该进程文件名
.参数 进程ID, 整数型, , 

.局部变量 快照句柄, 整数型, , , 
.局部变量 模块信息, 模块类型, , , 
.局部变量 文件名, 文本型, , , 

赋值 (快照句柄, _创建快照 (8, 进程ID))
.如果真 (等于 (快照句柄, -1))
    返回 (“”)
.如果真结束
赋值 (模块信息.大小, 1024)
_第一个模块 (快照句柄, 模块信息)
赋值 (文件名, 到文本 (模块信息.模块文件名))
_关闭对象 (快照句柄)
返回 (文件名)

.类模块 Hook操作, , , 

.程序集变量 pFunAddress, 整数型, , , 
.程序集变量 OldProtect, 整数型, , , 
.程序集变量 NewData, 字节集, , , 
.程序集变量 OldData, 字节集, , , 
.程序集变量 HookInfo, 文本型, , , 
.子程序 安装Hook, 逻辑型, 公开, 
.参数 lpLibFileName, 文本型, , 
.参数 lpProcName, 文本型, , 
.参数 lpfn, 整数型, , 

赋值 (pFunAddress, GetProcAddress (GetModuleHandleA (lpLibFileName), lpProcName)) ' 获取API函数地址
.如果真 (等于 (pFunAddress, 0))
    返回 (假)
.如果真结束
VirtualProtect (pFunAddress, 8, #PAGE_EXECUTE_READWRITE, OldProtect) ' 把内存块设置为可读写
赋值 (NewData, 相加 ({ 184 }, 到字节集 (lpfn), { 255, 224 })) ' 生成新机器码数据
赋值 (OldData, 指针到字节集 (pFunAddress, 8)) ' 保存旧机器码数据
赋值 (HookInfo, 相加 (lpLibFileName, “|”, lpProcName))
返回 (真)

.子程序 开始Hook, 空白型, 公开, 
.如果真 (不等于 (pFunAddress, 0))
    写到内存 (NewData, pFunAddress, 8)
.如果真结束


.子程序 停止Hook, 空白型, 公开, 
.如果真 (不等于 (pFunAddress, 0))
    写到内存 (OldData, pFunAddress, 8)
.如果真结束


.子程序 撤消Hook, 空白型, 公开, 
.局部变量 temp, 整数型, , , 

.如果真 (不等于 (pFunAddress, 0))
    写到内存 (OldData, pFunAddress, 8)
    VirtualProtect (pFunAddress, 8, OldProtect, temp)
.如果真结束
连续赋值 (0, pFunAddress, OldProtect)
连续赋值 ({  }, NewData, OldData)
连续赋值 (“”, HookInfo)

.子程序 获得Hook信息, 文本型, 公开, 
返回 (HookInfo)

.类模块 识图操作, , , 

.子程序 截取窗口位图, 字节集, , 截取窗口位图,不受前后台限制,但不可见窗口与最小化窗口无法截取(返回窗口位图数据)
.参数 窗口句柄, 整数型, , 欲截取位图的窗口句柄

.局部变量 矩形区域, 矩形类型, , , 
.局部变量 屏幕设备上下文句柄, 整数型, , , 
.局部变量 内存设备上下文句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 位图, BITMAP, , , 
.局部变量 位图像素点阵, 字节集, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 位图文件头字节集, 字节集, , , 
.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图信息字节集, 字节集, , , 

.如果真 (等于 (_句柄是否有效 (窗口句柄), 0))
    返回 ({  })
.如果真结束
_窗口取外边框 (窗口句柄, 矩形区域)
赋值 (屏幕设备上下文句柄, 取设备场景_ (0))
赋值 (内存设备上下文句柄, CreateCompatibleDC (屏幕设备上下文句柄))
赋值 (位图句柄, CreateCompatibleBitmap (屏幕设备上下文句柄, 相减 (矩形区域.右边, 矩形区域.左边), 相减 (矩形区域.底边, 矩形区域.顶边)))
赋值 (旧位图句柄, 选入设备场景_ (内存设备上下文句柄, 位图句柄))
.如果真 (取反 (PrintWindow (窗口句柄, 内存设备上下文句柄, 0)))
    选入设备场景_ (内存设备上下文句柄, 旧位图句柄)
    删除对象_ (位图句柄)
    删除设备场景_ (内存设备上下文句柄)
    释放设备场景_ (0, 屏幕设备上下文句柄)
    返回 ({  })
.如果真结束
GetObjectA (位图句柄, 相加 (相乘 (5, 4), 2, 2), 位图)
赋值 (位图信息.BITMAPINFOHEADER.biSize, 相乘 (4, 11))
GetDIBits1 (内存设备上下文句柄, 位图句柄, 0, 0, 0, 位图信息, 0)
赋值 (位图像素点阵, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图信息.BITMAPINFOHEADER.biCompression, 0)
GetDIBitsA (内存设备上下文句柄, 位图句柄, 0, 位图.bmHeight, 位图像素点阵, 位图信息, 0)
 ' 构造位图信息
赋值 (位图信息字节集, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSize))
CopyMemory_BITMAPINFO (位图信息字节集, 位图信息, 位图信息.BITMAPINFOHEADER.biSize)
 ' 构造位图文件头
赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), 位图信息.BITMAPINFOHEADER.biSize))
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图文件头.bfReserved1, 0)
赋值 (位图文件头.bfReserved2, 0)
赋值 (位图文件头字节集, 取空白字节集 (14))
CopyMemory_BITMAPFILEHEADER (位图文件头字节集, 位图文件头, 14)
选入设备场景_ (内存设备上下文句柄, 旧位图句柄)
删除对象_ (位图句柄)
删除设备场景_ (内存设备上下文句柄)
释放设备场景_ (0, 屏幕设备上下文句柄)
取字节集长度 (位图文件头字节集)
取字节集长度 (位图信息字节集)
返回 (相加 (位图文件头字节集, 位图信息字节集, 位图像素点阵))


.子程序 寻找图片, 逻辑型, , 在指定范围内寻找图片,返回找到的第一个符合条件的图片坐标(成功返回真,失败返回假) 建议使用识图模块
.参数 窗口句柄, 整数型, , 可空:在屏幕中的指定范围内查找图片 | 有数据:在窗口中的指定范围内查找图片
.参数 图片数据, 字节集, , 欲查找的图片数据 (bmp格式图片数据或快照字节集)
.参数 误差, 整数型, 可空, 可空为0,所允许的颜色误差,用于查找相似图(关键应对于不同显示器所产生的颜色误差)
.参数 坐标x, 整数型, 参考, 返回的坐标x(找到的图片左边) 屏幕坐标或窗口中的坐标
.参数 坐标y, 整数型, 参考, 返回的坐标y(找到的图片顶边) 屏幕坐标或窗口中的坐标

.局部变量 临时字节集, 字节集, , , 
.局部变量 找到位置, 整数型, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 临时坐标, 坐标类型, , , 
.局部变量 窗口大小, 矩形类型, , , 
.局部变量 临时图片字节集, 字节集, , "0", 
.局部变量 图片数据宽, 整数型, , , 
.局部变量 图片数据高, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (坐标x, 0)
赋值 (坐标y, 0)
.如果真 (小于 (取字节集长度 (图片数据), 58))
    返回 (假)
.如果真结束
赋值 (图片数据宽, 相加 (图片数据 [19], 相乘 (图片数据 [20], 256)))
赋值 (图片数据高, 相加 (图片数据 [23], 相乘 (图片数据 [24], 256)))
.如果真 (小于 (图片数据高, 1))
    返回 (假)
.如果真结束
赋值 (图片数据, 取字节集右边 (图片数据, 相减 (取字节集长度 (图片数据), 54)))
.计次循环首 (图片数据高, 计次)
    加入成员 (临时图片字节集, 取字节集中间 (图片数据, 相加 (相减 (相乘 (计次, 图片数据宽, 3), 相乘 (图片数据宽, 3)), 1), 相乘 (图片数据宽, 3)))
.计次循环尾 ()

赋值 (临时字节集, 快照 (0, , )) ' 取屏幕
.如果真 (等于 (取字节集长度 (临时字节集), 0)) ' 如果快照失败 则返回0
    返回 (假)
.如果真结束
赋值 (宽, 相加 (临时字节集 [19], 相乘 (临时字节集 [20], 256)))
赋值 (高, 相加 (临时字节集 [23], 相乘 (临时字节集 [24], 256)))
 ' (宽)
 ' (高)
赋值 (临时字节集, 取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 54)))

赋值 (找到位置, -1)
赋值 (找到位置, 字节集寻找 (临时字节集, 临时图片字节集 [1], 相加 (找到位置, 1), 误差))
.如果真 (等于 (找到位置, -1))
    返回 (假)
.如果真结束
 ' (找到位置)
.如果真 (等于 (找到位置, -1))
    返回 (假)
.如果真结束
赋值 (坐标x, 求余数 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽))
赋值 (坐标y, 相减 (高, 整除 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽)))
返回 (真)


.子程序 寻找颜色数, 整数型, , 在指定范围内寻找与指定颜色相同的数目(成功返回颜色相同的总数目,失败或未找到返回-1) 建议使用识图模块
.参数 窗口句柄, 整数型, 可空, 可空:在屏幕中的指定范围内查找颜色 | 有数据:在窗口中的指定范围内查找颜色
.参数 颜色值, 整数型, , 欲查找的颜色值(10进制颜色)
.参数 左边, 整数型, 可空, 可空为0 查找范围的左边(在窗口中查找,坐标为窗口客户区内坐标)
.参数 顶边, 整数型, 可空, 可空为0 查找范围的顶边
.参数 宽度, 整数型, 可空, 可空为屏幕宽度或窗口中用户区宽度 查找范围的宽度
.参数 高度, 整数型, 可空, 可空为屏幕宽度或窗口中用户区宽度 查找范围的高度

.局部变量 临时字节集, 字节集, , , 
.局部变量 找到位置, 整数型, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 颜色, 字节集, , , 
.局部变量 坐标y, 整数型, , , 
.局部变量 坐标x, 整数型, , , 
.局部变量 颜色数, 整数型, , , 
.局部变量 临时坐标, 坐标类型, , , 
.局部变量 窗口大小, 矩形类型, , , 

.如果 (不等于 (窗口句柄, 0))
    _取窗口区域位置 (窗口句柄, 临时坐标)
    .如果真 (或者 (等于 (宽度, 0), 等于 (高度, 0)))
        _取窗口大小 (窗口句柄, 窗口大小)
        
    .如果真结束
    .如果真 (等于 (宽度, 0))
        赋值 (宽度, 相减 (窗口大小.右边, 左边))
    .如果真结束
    .如果真 (等于 (高度, 0))
        赋值 (高度, 相减 (窗口大小.底边, 顶边))
    .如果真结束
    
.否则
    .如果真 (等于 (宽度, 0))
        赋值 (宽度, 相减 (取屏幕宽度 (), 左边))
    .如果真结束
    .如果真 (等于 (高度, 0))
        赋值 (高度, 相减 (取屏幕高度 (), 顶边))
    .如果真结束
    
.如果结束

赋值 (字节集, 到字节集 (颜色值))

赋值 (临时字节集, 快照 (0, , )) ' 取屏幕
.如果真 (等于 (取字节集长度 (临时字节集), 0)) ' 如果快照失败 则返回0
    返回 (-1)
.如果真结束
赋值 (宽, 相加 (临时字节集 [19], 相乘 (临时字节集 [20], 256)))
赋值 (高, 相加 (临时字节集 [23], 相乘 (临时字节集 [24], 256)))
 ' (宽)
 ' (高)
赋值 (临时字节集, 取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 54)))
赋值 (颜色, { 0, 0, 0 })
赋值 (颜色 [1], 到字节 (到数值 (字节集 [3])))
赋值 (颜色 [2], 到字节 (到数值 (字节集 [2])))
赋值 (颜色 [3], 到字节 (到数值 (字节集 [1])))
赋值 (找到位置, -1)
.判断循环首 (大于 (颜色数, -1))
    .循环判断首 ()
        赋值 (找到位置, 寻找字节集 (临时字节集, 颜色, 相加 (找到位置, 1)))
        .如果真 (等于 (找到位置, -1))
            .如果真 (大于 (颜色数, 0))
                返回 (颜色数)
            .如果真结束
            返回 (-1)
        .如果真结束
        赋值 (坐标x, 求余数 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽))
        赋值 (坐标y, 相减 (高, 整除 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽)))
        
    .循环判断尾 (或者 (小于 (坐标x, 相加 (临时坐标.X, 左边)), 大于 (坐标x, 相加 (临时坐标.X, 左边, 宽度)), 小于 (坐标y, 相加 (临时坐标.Y, 顶边)), 大于 (坐标y, 相加 (临时坐标.Y, 顶边, 高度))))
    赋值 (颜色数, 相加 (颜色数, 1))
.判断循环尾 ()
返回 (颜色数)


.子程序 寻找颜色, 逻辑型, , 在指定范围内寻找颜色,返回找到的第一个符合条件的颜色坐标(成功返回真,失败返回假)
.参数 窗口句柄, 整数型, 可空, 可空:在屏幕中的指定范围内查找颜色 | 有数据:在窗口中的指定范围内查找颜色
.参数 颜色值, 整数型, , 欲查找的颜色值(10进制颜色)
.参数 误差, 整数型, 可空, 可空为0,所允许的颜色误差,用于查找相似色(关键应对于不同显示器所产生的颜色误差)
.参数 坐标x, 整数型, 参考, 返回的坐标x(颜色的位置) 屏幕坐标或窗口中的坐标
.参数 坐标y, 整数型, 参考, 返回的坐标y(颜色的位置) 屏幕坐标或窗口中的坐标
.参数 左边, 整数型, 可空, 可空:为0   查找范围的左边(在窗口中查找,坐标为窗口客户区内坐标)
.参数 顶边, 整数型, 可空, 可空:为0   查找范围的顶边
.参数 宽度, 整数型, 可空, 可空为全屏或整个窗口 查找范围的宽度
.参数 高度, 整数型, 可空, 可空为全屏或整个窗口 查找范围的高度

.局部变量 临时字节集, 字节集, , , 
.局部变量 找到位置, 整数型, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 颜色, 字节集, , , 
.局部变量 临时坐标, 坐标类型, , , 
.局部变量 窗口大小, 矩形类型, , , 

赋值 (坐标x, 0)
赋值 (坐标y, 0)
.如果 (不等于 (窗口句柄, 0))
    _取窗口区域位置 (窗口句柄, 临时坐标)
    .如果真 (或者 (等于 (宽度, 0), 等于 (高度, 0)))
        _取窗口大小 (窗口句柄, 窗口大小)
    .如果真结束
    .如果真 (等于 (宽度, 0))
        赋值 (宽度, 相减 (窗口大小.右边, 左边))
    .如果真结束
    .如果真 (等于 (高度, 0))
        赋值 (高度, 相减 (窗口大小.底边, 顶边))
    .如果真结束
    
.否则
    .如果真 (等于 (宽度, 0))
        赋值 (宽度, 相减 (取屏幕宽度 (), 左边))
    .如果真结束
    .如果真 (等于 (高度, 0))
        赋值 (高度, 相减 (取屏幕高度 (), 顶边))
    .如果真结束
    
.如果结束
赋值 (字节集, 到字节集 (颜色值))
赋值 (临时字节集, 快照 (0, , )) ' 取屏幕
.如果真 (等于 (取字节集长度 (临时字节集), 0)) ' 如果快照失败 则返回0
    返回 (假)
.如果真结束
赋值 (宽, 相加 (临时字节集 [19], 相乘 (临时字节集 [20], 256)))
赋值 (高, 相加 (临时字节集 [23], 相乘 (临时字节集 [24], 256)))
 ' (宽)
 ' (高)
赋值 (临时字节集, 取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 54)))
赋值 (颜色, { 0, 0, 0 })
赋值 (颜色 [1], 到字节 (到数值 (字节集 [3])))
赋值 (颜色 [2], 到字节 (到数值 (字节集 [2])))
赋值 (颜色 [3], 到字节 (到数值 (字节集 [1])))
赋值 (找到位置, -1)
.循环判断首 ()
    赋值 (找到位置, 字节集寻找 (临时字节集, 颜色, 相加 (找到位置, 1), 误差))
    .如果真 (等于 (找到位置, -1))
        返回 (假)
    .如果真结束
     ' (找到位置)
    赋值 (坐标x, 求余数 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽))
    赋值 (坐标y, 相减 (高, 整除 (相加 (相除 (相减 (找到位置, 1), 3), 1), 宽)))
.循环判断尾 (或者 (小于 (坐标x, 相加 (临时坐标.X, 左边)), 大于 (坐标x, 相加 (临时坐标.X, 左边, 宽度)), 小于 (坐标y, 相加 (临时坐标.Y, 顶边)), 大于 (坐标y, 相加 (临时坐标.Y, 顶边, 高度))))
赋值 (坐标x, 相减 (坐标x, 临时坐标.X))
赋值 (坐标y, 相减 (坐标y, 临时坐标.Y))
返回 (真)


.子程序 后台取色, 整数型, , 取后台窗口中指定点颜色(返回10进度颜色值)
.参数 窗口句柄, 整数型, , 欲取坐标点颜色的窗口句柄
.参数 坐标X, 整数型, , 窗口中的横坐标 (以窗口顶点坐标为0)
.参数 坐标Y, 整数型, , 窗口中的纵坐标

.局部变量 图片数据, 字节集, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 字节集, 字节集, , , 

赋值 (图片数据, 截取窗口位图 (窗口句柄))
.如果真 (等于 (取字节集长度 (图片数据), 0))
    返回 (0)
.如果真结束
赋值 (宽, 相加 (图片数据 [19], 相乘 (图片数据 [20], 256)))
赋值 (高, 相加 (图片数据 [23], 相乘 (图片数据 [24], 256)))
 ' (宽)
 ' (高)
 ' (取字节集长度 (图片数据))
 ' (取字节集长度 (图片数据) － (54 ＋ 坐标X ＋ 坐标Y × 宽))
赋值 (字节集, 取字节集中间 (图片数据, 相减 (相加 (相减 (取字节集长度 (图片数据), 54, 相乘 (坐标Y, 宽)), 宽), 坐标X), 3))
 ' 颜色坐标怎么算的,取出来的不对啊.
返回 (取字节集数据 (相加 (到字节集 (字节集 [3]), 到字节集 (字节集 [2]), 到字节集 (字节集 [1])), #整数型, ))


.子程序 后台找色, 坐标类型, , 在指定范围内寻找颜色(返回找到的第一个符合条件的颜色在窗口中的坐标,失败返回空坐标)
.参数 窗口句柄, 整数型, , 欲查找颜色所处的窗口的句柄
.参数 颜色值, 整数型, , 欲查找的颜色值(10进制颜色)
.参数 误差, 整数型, 可空, 可空为0,所允许的颜色误差,用于查找相似色(关键应对于不同显示器所产生的颜色误差)
.参数 范围, 矩形类型, 可空, 查找范围的矩形(可空为整个窗口)

.局部变量 临时字节集, 字节集, , , 
.局部变量 找到位置, 整数型, , , 
.局部变量 宽, 整数型, , , 
.局部变量 高, 整数型, , , 
.局部变量 字节集, 字节集, , , 
.局部变量 颜色, 字节集, , , 
.局部变量 返回坐标, 坐标类型, , , 

赋值 (临时字节集, 截取窗口位图 (窗口句柄))
.如果真 (等于 (取字节集长度 (临时字节集), 0)) ' 如果快照失败 则返回0
    返回 (返回坐标)
.如果真结束
赋值 (宽, 相加 (临时字节集 [19], 相乘 (临时字节集 [20], 256)))
赋值 (高, 相加 (临时字节集 [23], 相乘 (临时字节集 [24], 256)))
.如果真 (是否为空 (范围))
    赋值 (范围.右边, 宽)
    赋值 (范围.底边, 高)
.如果真结束
 ' (宽)
 ' (高)
赋值 (临时字节集, 取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 54)))
赋值 (字节集, 到字节集 (颜色值))
赋值 (颜色, { 0, 0, 0 })
赋值 (颜色 [1], 到字节 (到数值 (字节集 [3])))
赋值 (颜色 [2], 到字节 (到数值 (字节集 [2])))
赋值 (颜色 [3], 到字节 (到数值 (字节集 [1])))
.循环判断首 ()
    赋值 (找到位置, 字节集寻找 (临时字节集, 颜色, 相加 (找到位置, 1), 误差))
    .如果真 (小于 (找到位置, 1))
        赋值 (返回坐标.X, 0)
        赋值 (返回坐标.Y, 0)
        返回 (返回坐标)
    .如果真结束
     ' (找到位置)
    赋值 (返回坐标.X, 求余数 (相除 (相减 (找到位置, 1), 3), 宽)) ' 坐标不对,怎么回事?
    赋值 (返回坐标.Y, 相加 (相减 (高, 整除 (相除 (相减 (找到位置, 1), 3), 宽)), 1))
.循环判断尾 (或者 (小于 (返回坐标.X, 范围.左边), 大于 (返回坐标.X, 相加 (范围.右边, 范围.左边)), 小于 (返回坐标.Y, 范围.顶边), 大于 (返回坐标.Y, 相加 (范围.顶边, 范围.底边))))
返回 (返回坐标)


.子程序 取颜色值, 整数型, , 取窗口中指定点颜色,句柄为空,则取屏幕中点的颜色.(返回10进制颜色值)
.参数 窗口句柄, 整数型, 可空, 窗口句柄(可空:取屏幕中)建意为空! 窗口句柄只能为顶级窗口句柄!
.参数 水平位置, 整数型, , 指定点横坐标 (如果在窗口中,则为窗口内客户区坐标)
.参数 垂直位置, 整数型, , 指定点纵坐标

.局部变量 设备场景句柄, 整数型, , , 
.局部变量 临时颜色值, 整数型, , , 
.局部变量 临时坐标, 坐标类型, , , 

.如果真 (不等于 (窗口句柄, 0))
    _取窗口区域位置 (窗口句柄, 临时坐标)
.如果真结束

赋值 (设备场景句柄, 取设备场景_ (0))
 ' 处理事件 ()
赋值 (临时颜色值, GetPixel (设备场景句柄, 相加 (临时坐标.X, 水平位置), 相加 (临时坐标.Y, 垂直位置)))
释放设备场景_ (0, 设备场景句柄)
返回 (临时颜色值)


.子程序 取颜色RGB, 整数型, , 取指定颜色的RGB单色(返回R色,G色或B色:0-255)
.参数 颜色, 整数型, , 欲取颜色RGB单值的十进制颜色
.参数 RGB类型, 整数型, , 1 取R色  2 取G色  3 取B色

.局部变量 字节集, 字节集, , , 

赋值 (字节集, 到字节集 (颜色))
.如果真 (等于 (RGB类型, 1))
    返回 (字节集 [1])
.如果真结束
.如果真 (等于 (RGB类型, 2))
    返回 (字节集 [2])
.如果真结束
.如果真 (等于 (RGB类型, 3))
    返回 (字节集 [3])
.如果真结束
返回 (0)


.子程序 取颜色差, 整数型, ,  取两个十进制颜色的颜色差值,返回(颜色差值)
.参数 颜色一, 整数型, , 十进制颜色一
.参数 颜色二, 整数型, , 十进制颜色二
.参数 比较方式, 整数型, 可空, 可空为0:取最大色差  1 取R色差(红)  2 取G色差(绿)  3 取B色差(蓝)  4 取总色差(三差之和)

.局部变量 字节集一, 字节集, , , 
.局部变量 字节集二, 字节集, , , 
.局部变量 差值R, 整数型, , , 
.局部变量 差值G, 整数型, , , 
.局部变量 差值B, 整数型, , , 

赋值 (字节集一, 到字节集 (颜色一))
赋值 (字节集二, 到字节集 (颜色二))
赋值 (差值R, 取绝对值 (相减 (字节集一 [1], 字节集二 [1])))
赋值 (差值G, 取绝对值 (相减 (字节集一 [2], 字节集二 [2])))
赋值 (差值B, 取绝对值 (相减 (字节集一 [3], 字节集二 [3])))
.如果真 (等于 (比较方式, 1))
    返回 (差值R)
.如果真结束
.如果真 (等于 (比较方式, 2))
    返回 (差值G)
.如果真结束
.如果真 (等于 (比较方式, 3))
    返回 (差值B)
.如果真结束
.如果真 (等于 (比较方式, 4))
    返回 (相加 (差值R, 差值G, 差值B))
.如果真结束
.判断开始 (大于 (差值R, 差值G))
    返回 (差值R)
.判断 (大于 (差值G, 差值B))
    返回 (差值G)
.默认
    返回 (差值B)
.判断结束


.子程序 取色彩度, 整数型, , 取指定颜色的色彩度(返回色彩度:0-255)
.参数 颜色, 整数型, , 欲取色彩的十进制颜色

.局部变量 字节集, 字节集, , , 
.局部变量 最大, 字节型, , , 
.局部变量 最小, 字节型, , , 

赋值 (字节集, 到字节集 (颜色))
.如果 (大于 (字节集 [1], 字节集 [2]))
    赋值 (最大, 字节集 [1])
    赋值 (最小, 字节集 [2])
.否则
    赋值 (最大, 字节集 [2])
    赋值 (最小, 字节集 [1])
.如果结束
.如果真 (小于 (最大, 字节集 [3]))
    赋值 (最大, 字节集 [3])
.如果真结束
.如果真 (大于 (最小, 字节集 [3]))
    赋值 (最小, 字节集 [3])
.如果真结束
返回 (相减 (最大, 最小))


.子程序 取色亮度, 整数型, , 取指定颜色的亮度(返回亮度:0-255)
.参数 颜色, 整数型, , 欲取亮度的十进制颜色

.局部变量 字节集, 字节集, , , 

赋值 (字节集, 到字节集 (颜色))
返回 (整除 (相加 (字节集 [1], 字节集 [2], 字节集 [3]), 3))


.子程序 字节集寻找, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始寻找位置, 整数型, 可空, 可空为1
.参数 误差值, 整数型, 可空, 寻找字节集的误差值(单个字节所允许的与实际的最大差值)

.局部变量 计次1, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 计次2, 整数型, , , 
.局部变量 总长度, 整数型, , , 

.如果真 (等于 (起始寻找位置, 0))
    赋值 (起始寻找位置, 1)
.如果真结束

赋值 (长度, 取字节集长度 (欲寻找的字节集))
赋值 (总长度, 取字节集长度 (被搜寻的字节集))

.计次循环首 (相加 (相减 (总长度, 长度), 1), 计次1)
    .如果真 (大于 (起始寻找位置, 计次1))
        到循环尾 ()
    .如果真结束
    
    .计次循环首 (长度, 计次2)
        .如果真 (大于 (相减 (相加 (计次1, 计次2), 1), 总长度))
            返回 (-1)
        .如果真结束
        .如果真 (大于 (取绝对值 (相减 (欲寻找的字节集 [计次2], 被搜寻的字节集 [相减 (相加 (计次1, 计次2), 1)])), 误差值))
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (长度, 计次2))
            返回 (计次1)
        .如果真结束
        
    .计次循环尾 ()
    
.计次循环尾 ()
返回 (-1)


.类模块 磁盘操作, , , 

.子程序 移动文件, 整数型, 公开, 
.参数 FromFile, 文本型, , 被移动文件名
.参数 ToFile, 文本型, , 移动到文件名

.局部变量 类型, SHFILEOPSTRUCT_, , , 
.局部变量 长度, 整数型, , , 
.局部变量 地址, 整数型, , , 

赋值 (长度, 取文本长度 (FromFile))
赋值 (类型.wFunc, #FO_MOVE)
赋值 (类型.pFrom, 相加 (到字节集 (FromFile), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (ToFile), { 0, 0 }))
赋值 (类型.fFlags, #FOF_ALLOWUNDO)
返回 (SHFileOperationA (类型))


.子程序 复制文件, 整数型, 公开, 
.参数 FromFile, 文本型, , 被复制文件名
.参数 ToFile, 文本型, , 复制到文件名

.局部变量 类型, SHFILEOPSTRUCT_, , , 
.局部变量 长度, 整数型, , , 
.局部变量 地址, 整数型, , , 

赋值 (长度, 取文本长度 (FromFile))
赋值 (类型.wFunc, #FO_COPY)
赋值 (类型.pFrom, 相加 (到字节集 (FromFile), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (ToFile), { 0, 0 }))
赋值 (类型.fFlags, #FOF_ALLOWUNDO)
返回 (SHFileOperationA (类型))


.子程序 删除文件, 整数型, 公开, 
.参数 FromFile, 文本型, , 欲删除的文件名

.局部变量 类型, SHFILEOPSTRUCT_, , , 
.局部变量 长度, 整数型, , , 
.局部变量 地址, 整数型, , , 

赋值 (长度, 取文本长度 (FromFile))
赋值 (类型.wFunc, #FO_DELETE)
赋值 (类型.pFrom, 相加 (到字节集 (FromFile), { 0, 0 }))
赋值 (类型.fFlags, #FOF_ALLOWUNDO)
返回 (SHFileOperationA (类型))


.子程序 文件改名, 整数型, 公开, 
.参数 FromFile, 文本型, , 文件名或目录名
.参数 ToFile, 文本型, , 新文件名或目录名

.局部变量 类型, SHFILEOPSTRUCT_, , , 
.局部变量 长度, 整数型, , , 
.局部变量 地址, 整数型, , , 

赋值 (长度, 取文本长度 (FromFile))
赋值 (类型.wFunc, #FO_RENAME)
赋值 (类型.pFrom, 相加 (到字节集 (FromFile), { 0, 0 }))
赋值 (类型.pTo, 相加 (到字节集 (ToFile), { 0, 0 }))
赋值 (类型.fFlags, #FOF_ALLOWUNDO)
返回 (SHFileOperationA (类型))


.子程序 取驱动器列表一, 整数型, 公开, 返回驱动器信息
.参数 接受信息的数组, 文本型, 数组, 
.参数 类型, 空白型, 可空, 默认为1,1.硬盘驱动器；2、.光盘驱动器；3、可移动驱动器；4、网络驱动器。

.局部变量 所有盘符, 字节集, , , 
.局部变量 盘符, 字节集, , "0", 
.局部变量 返回值, 整数型, , , 
.局部变量 计次变量, 整数型, , , 
.局部变量 移动盘, 文本型, , "0", 
.局部变量 硬盘, 文本型, , "0", 
.局部变量 光盘, 文本型, , "0", 
.局部变量 其他, 文本型, , "0", 

赋值 (所有盘符, 取空白字节集 (256))
赋值 (返回值, GetLogicalDriveStrings (256, 所有盘符))
赋值 (所有盘符, 取字节集左边 (所有盘符, 返回值))
赋值 (盘符, 分割字节集 (所有盘符, { 0 }, ))
.计次循环首 (取数组成员数 (盘符), 计次变量)
    .判断开始 (等于 (GetDriveTypeA (到文本 (盘符 [计次变量])), 2)) ' 2=移动驱动器
        加入成员 (移动盘, 到文本 (盘符 [计次变量]))
    .判断 (等于 (GetDriveTypeA (到文本 (盘符 [计次变量])), 3)) ' ３＝硬盘
        加入成员 (硬盘, 到文本 (盘符 [计次变量]))
    .判断 (等于 (GetDriveTypeA (到文本 (盘符 [计次变量])), 5)) ' ５＝光盘
        加入成员 (光盘, 到文本 (盘符 [计次变量]))
    .默认
        加入成员 (其他, 到文本 (盘符 [计次变量])) ' 其他
    .判断结束
    
.计次循环尾 ()
.判断开始 (或者 (等于 (类型, 0), 等于 (类型, 1)))
    赋值 (接受信息的数组, 硬盘)
.判断 (等于 (类型, 2))
    赋值 (接受信息的数组, 光盘)
.判断 (等于 (类型, 3))
    赋值 (接受信息的数组, 移动盘)
.默认
    赋值 (接受信息的数组, 其他)
.判断结束

返回 (取数组成员数 (接受信息的数组))

.子程序 取路径内文件一, 文本型, 公开, 分割文本取 例: 取文件名("C:\WINDOWS\NOTEPAD.EXE") 结果:notepad.exe
.参数 名称, 文本型, , 

返回 (取文本右边 (名称, 相减 (取文本长度 (名称), 倒找文本 (名称, “\”, , 假))))

.子程序 取路径内目录一, 文本型, 公开, 分割文本取 例: 取文件路径("C:\WINDOWS\NOTEPAD.EXE") 结果:"C:\WINDOWS\"
.参数 名称, 文本型, , 

返回 (取文本左边 (名称, 相减 (取文本长度 (名称), 取文本长度 (取路径内文件一 (名称)))))

.子程序 复制_2G以上文件, 整数型, 公开, 
.参数 原目录, 文本型, , 
.参数 新目录, 文本型, , 

.局部变量 Ret, 整数型, , , 

赋值 (Ret, CopyFileEx (原目录, 新目录, &CopyProgressRoutine, 0, 0, #COPY_FILE_RESTARTABLE))
返回 (Ret)

.子程序 删除自身, 空白型, 公开, 程序删除自身EXE文件(无返回值)
运行 (相加 (“cmd.exe /c del ”, 取执行文件名 ()), 假, #隐藏窗口)
结束 ()


.子程序 打开文件, 整数型, 公开, 打开一个文件(成功返回文件号,失败返回0)
.参数 文件名称, 文本型, , 欲打开的文件名称
.参数 方式, 整数型, 可空, 可空:默认为读写 详情同系统核心支持库"打开文件"

返回 (_打开文件 (文件名称, 方式))


.子程序 关闭文件, 空白型, 公开, 关闭文件号(无返回值)
.参数 文件号, 整数型, , 欲关闭的文件号

_关闭对象 (文件号)


.子程序 取文件大小, 文本型, 公开, 可以取大于2G文件尺寸(返回文件大小K)
.参数 文件名, 文本型, , 欲取尺寸的文件名称

.局部变量 文件号, 整数型, , , 
.局部变量 尺寸, 长整数型, , , 

赋值 (文件号, _打开文件 (文件名, 0))
_取文件长度 (文件号, 尺寸)
_关闭对象 (文件号)
返回 (到文本 (尺寸))


.子程序 取路径内文件二, 文本型, 公开, API取 例: 取文件名("C:\WINDOWS\NOTEPAD.EXE") 结果:notepad.exe
.参数 带路径文件名, 文本型, , 

.局部变量 filename, 文本型, , , 

赋值 (filename, 文本_取空白文本 (255))
API_GetFileTitle (带路径文件名, filename, 255)
返回 (filename)


.子程序 取路径内目录二, 文本型, 公开, API取 例: 取文件路径("C:\WINDOWS\NOTEPAD.EXE") 结果:"C:\WINDOWS\"
.参数 带路径文件名, 文本型, , 

.局部变量 offset, 空白型, , , 

赋值 (offset, 倒找文本 (带路径文件名, “\”, , 假))
.如果 (等于 (offset, -1))
    返回 (系统.取运行目录 ())
.否则
    返回 (文本_取文本左边 (带路径文件名, offset))
.如果结束


.子程序 搜索文件, 文本型, 公开, 在指定目录下搜索文件,返回第一个符合条件的文件路径
.参数 临时目录, 文本型, , 欲寻找的目录
.参数 文件名, 文本型, , 欲寻找文件名
.参数 显示标签, 标签, , 用来显示搜索路径的标签

.局部变量 临时文件名, 文本型, , , 
.局部变量 临时子目录, 文本型, , , 
.局部变量 临时内容, 文本型, , , 

赋值 (临时目录, 相加 (临时目录, “\”))
处理事件 ()
赋值 (临时文件名, 寻找文件 (相加 (临时目录, “*.*”), 39))
.判断循环首 (不等于 (临时文件名, “”))
    赋值 (显示标签.标题, 相加 (临时目录, 临时文件名))
    .如果真 (等于 (临时文件名, 文件名))
        返回 (相加 (临时目录, 文件名))
    .如果真结束
    赋值 (临时文件名, 寻找文件 ())
.判断循环尾 ()
赋值 (临时子目录, 寻找文件 (相加 (临时目录, “*.*”), 16))
.判断循环首 (不等于 (临时子目录, “”))
    .如果真 (并且 (不等于 (临时子目录, “.”), 不等于 (临时子目录, “..”)))
        赋值 (临时内容, 搜索文件 (相加 (临时目录, 临时子目录), 文件名, 显示标签))
        .如果真 (不等于 (临时内容, “”))
            返回 (临时内容)
        .如果真结束
        
    .如果真结束
    赋值 (临时子目录, 寻找文件 (#子目录))
.判断循环尾 ()
返回 (“”)


.子程序 文件夹同步, 空白型, 公开, 将一个目录与另一个目录同步 - 通过大小来同步文件!
.参数 服务器目录, 文本型, , 参考目录
.参数 本地目录, 文本型, , 欲被同步的目录

赋值 (A服务器目录, 服务器目录)
赋值 (A本地目录, 本地目录)
系统.启动线程 (&文件夹单线同步线程)

.子程序 检测文件夹是否存在, 逻辑型, 公开, 判断指定目录是否存在(存在返回真,不存在返回假)
.参数 目录名, 文本型, , 欲判断的目录

.局部变量 位置, 整数型, , , 
.局部变量 父目录, 文本型, , , 
.局部变量 子目录, 文本型, , , 
.局部变量 找到的目录, 文本型, , , 

赋值 (位置, 倒找文本 (目录名, “\”, , 假))
赋值 (父目录, 取文本左边 (目录名, 位置))
赋值 (子目录, 取文本右边 (目录名, 相减 (取文本长度 (目录名), 位置)))
赋值 (找到的目录, 寻找文件 (相加 (父目录, “*.*”), #子目录))
.判断循环首 (不等于 (找到的目录, “”))
    .如果真 (等于 (找到的目录, 子目录))
        返回 (真)
    .如果真结束
    赋值 (找到的目录, 寻找文件 (#子目录))
.判断循环尾 ()
返回 (假)


.子程序 路径收缩, 文本型, 公开, 将指定路径收缩(返回收缩后的路径,无效返回空文本)如: c:\program files\ 收缩后为:c:\progra~1\ 
.参数 路径, 文本型, , 欲收缩的路径

.局部变量 路径数组, 文本型, , "0", 
.局部变量 新路径, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 计次, 整数型, , , 

赋值 (路径数组, 分割文本 (路径, “\”, ))
赋值 (a, 取数组成员数 (路径数组))
.如果真 (小于 (a, 2))
    返回 (“”)
.如果真结束
.计次循环首 (a, 计次)
    .如果真 (等于 (计次, a))
        赋值 (a, 倒找文本 (路径数组 [计次], “.”, , 假))
        .如果真 (大于 (a, 0))
            赋值 (新路径, 相加 (新路径, 取文本左边 (路径数组 [计次], 相加 (a, 3))))
            跳出循环 ()
        .如果真结束
        
    .如果真结束
    .如果真 (大于 (取文本长度 (路径数组 [计次]), 8))
        赋值 (路径数组 [计次], 相加 (取文本左边 (路径数组 [计次], 6), “~1”))
    .如果真结束
    赋值 (新路径, 相加 (新路径, 路径数组 [计次], “\”))
    
.计次循环尾 ()
返回 (新路径)


.子程序 创建桌面快捷方式, 逻辑型, 公开, 创建桌面快捷方式 
.参数 lnk名称, 文本型, , 快捷方式保存全路径文件名
.参数 目标, 文本型, , 指向的文件全路径文件名
.参数 参数文本, 文本型, 可空, 执行文件的参数
.参数 图标文件, 文本型, 可空, 图标文件的路径  可空:为空时用目标的第一个图标
.参数 运行方式, 整数型, 可空, 1,常规方式，3,最大化，7,最小化
.参数 备注, 文本型, 可空, 快方式的备注信息
.参数 快捷键, 文本型, 可空, 启动快捷方式的快捷键  如“Ctrl+Alt+Y”

.局部变量 工作目录, 文本型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 a, 对象, , , 
.局部变量 b, 对象, , , 
.局部变量 计次, 整数型, , , 

.如果真 (等于 (寻找文本 (lnk名称, “.lnk”, , 真), -1))
    赋值 (lnk名称, 相加 (lnk名称, “.lnk”))
.如果真结束
.如果真 (文件是否存在 (lnk名称))
    删除文件 (lnk名称)
.如果真结束
赋值 (临时文本, 分割文本 (目标, “\”, ))
.如果真 (小于 (取数组下标 (临时文本, ), 2))
    返回 (假)
.如果真结束
.计次循环首 (相减 (取数组下标 (临时文本, ), 1), 计次)
    赋值 (工作目录, 相加 (工作目录, 临时文本 [计次], “\”))
.计次循环尾 ()
.判断开始 (a.创建 (“WshShell”, “wshom.ocx”))
    赋值 (a, a.对象型方法 (“CreateShortcut”, lnk名称))
    .如果真 (a.是否为空 ())
        返回 (假)
    .如果真结束
    .判断开始 (a.写属性 (“TargetPath”, 目标))
        a.写属性 (“WorkingDirectory”, 工作目录)
        a.写属性 (“IconLocation”, 选择 (是否为空 (图标文件), 相加 (目标, “,0”), 图标文件))
        a.写属性 (“WindowStyle”, 运行方式)
        a.写属性 (“Description”, 备注)
        a.写属性 (“Arguments”, 参数文本)
        a.写属性 (“Hotkey”, 快捷键)
        赋值 (a, a.对象型方法 (“Save”, ))
        返回 (真)
    .默认
        
    .判断结束
    
.默认
    
.判断结束
返回 (假)



.子程序 创建网页快捷方式, 逻辑型, 公开, 创建网页快捷方式 
.参数 保存路径, 文本型, , 全路径文件名
.参数 网页地址, 文本型, , URL
.参数 ico图标, 文本型, 可空, 图标路径 可空:默认为网页快捷方式图标
.参数 快捷键, 整数型, 可空, CTRL+ALT+? (A=1601 B=1602 C=1603 ...)

.如果真 (等于 (寻找文本 (保存路径, “.url”, , 假), -1))
    赋值 (保存路径, 相加 (保存路径, “.url”))
.如果真结束
.如果真 (文件是否存在 (保存路径))
    删除文件 (保存路径)
.如果真结束
写配置项 (保存路径, “DEFAULT”, “BASEURL”, 网页地址)
写配置项 (保存路径, “InternetShortcut”, “URL”, 网页地址)
.如果真 (等于 (是否为空 (快捷键), 假))
    写配置项 (保存路径, “InternetShortcut”, “Hotkey”, 到文本 (快捷键))
.如果真结束
.如果真 (等于 (是否为空 (ico图标), 假))
    写配置项 (保存路径, “InternetShortcut”, “IconFile”, ico图标)
.如果真结束
.如果真 (文件是否存在 (保存路径))
    返回 (真)
.如果真结束
返回 (假)


.子程序 文件是否存在, 逻辑型, 公开, 
.参数 欲测试的文件名称, 文本型, , 

返回 (PathFileExistsA (欲测试的文件名称))



.子程序 文件夹是否存在, 逻辑型, 公开, 
.参数 路径, 文本型, , 

返回 (PathIsDirectoryA (路径))


.类模块 汇编操作, , , 

.程序集变量 汇编代码, 字节集, , , 
.子程序 远程申请内存, 整数型, 公开, 默认申请1024字节的内存
.参数 进程信息, 整数型, , 
.参数 申请长度, 整数型, 可空, 

.局部变量 addr, 整数型, , , 

.如果真 (等于 (申请长度, 0))
    赋值 (申请长度, 1024)
.如果真结束
赋值 (addr, VirtualAllocEx_Hb (进程信息, 0, 申请长度, 4096, 4)) ' 申请内存
返回 (addr)

.子程序 远程写入字集, 整数型, 公开, 返回地址
.参数 进程信息, 整数型, , 
.参数 写入字集, 字节集, , 
.参数 写入地址, 整数型, , 

.局部变量 addr, 整数型, , , 
.局部变量 len, 整数型, , , 

赋值 (len, 取字节集长度 (写入字集))
WriteProcessMemory_Hb (进程信息, 写入地址, 写入字集, len, 0)
返回 (addr)

.子程序 运行远程汇编, 空白型, 公开, 
.参数 进程编号, 整数型, , 
.参数 调用函数, 字节集, , 

.局部变量 临时句柄, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 线程首地址, 整数型, , , 

赋值 (线程首地址, 分配内存虚拟页 (进程编号, 0, 4096, 4096, 64))
写入内存 (进程编号, 线程首地址, 调用函数, 4096, 0)
赋值 (临时句柄, 远程创建线程 (进程编号, 0, 0, 线程首地址, 0, 4, 线程ID))
运行线程 (临时句柄)
关闭进程 (临时句柄)

.子程序 置入汇编代码, 空白型, 公开, 
.参数 代码, 字节集, 可空, 

赋值 (汇编代码, 代码)

.子程序 取出汇编代码, 字节集, 公开, 如未执行->运行汇编代码 时，请不进行清空汇编代码
.参数 是否清空, 逻辑型, 可空, 取出时是否进行清空

.局部变量 汇编码, 字节集, , , 

.如果真 (是否为空 (是否清空))
    赋值 (是否清空, 假)
.如果真结束
.如果 (是否清空)
    赋值 (汇编码, 汇编代码)
    赋值 (汇编代码, {  })
.否则
    赋值 (汇编码, 汇编代码)
.如果结束
返回 (汇编码)

.子程序 运行汇编代码, 整数型, 公开, 执行->运行汇编代码 时，将清空汇编代码
.参数 执行代码, 字节集, , 
.参数 参数个数, 整数型, 可空, 
.参数 参数数组, 整数型, 可空 数组, 

.局部变量 首地址, 整数型, , , 
.局部变量 指令长度, 整数型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (指令长度, 取字节集长度 (执行代码))
赋值 (首地址, GlobalAlloc (0, 指令长度))
写到内存 (执行代码, 首地址, )
赋值 (返回值, CallWindowProc_Hb ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 首地址, 参数数组, 参数个数, 假))
GlobalFree (首地址)
返回 (返回值)

.子程序 取指定字节集, 字节集, , 
.参数 指令参数, 整数型, , 

返回 (取字节集左边 (到字节集 (指令参数), 1))

.子程序 ADD_EAX_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 1, 208 }))

.子程序 MOV_EAX_PTR, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 161 }, 到字节集 (常数)))

.子程序 PUSH_参常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 104 }, 到字节集 (常数)))

.子程序 POP_ECX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 89 }))

.子程序 POP_EBP, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 93 }))

.子程序 JMP_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 255, 224 }))

.子程序 CALL_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 255, 208 }))

.子程序 RET_参数数, 空白型, 公开, 
.参数 参数数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 194 }, 取字节集左边 (到字节集 (到整数 (相乘 (1, 4))), 1), { 0 }))

.子程序 MOV_EDX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 208 }))

.子程序 MOV_EBP_ESP, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 236 }))

.子程序 MOV_EAX_PTR_EBP加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 69 }, 取字节集左边 (到字节集 (字节), 1)))

.子程序 ADD_EAX_常数, 空白型, 公开, 加法指令
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 5 }, 到字节集 (常数)))

.子程序 SUB_EAX_常数, 空白型, 公开, 减法指令
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 45 }, 到字节集 (常数)))

.子程序 IMUL_EAX_常数, 空白型, 公开, 乘法指令
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 105, 192 }, 到字节集 (常数)))

.子程序 IDIV_ECX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 247, 249 }))

.子程序 CMP_PTR_常数, 空白型, 公开, 
.参数 地址, 整数型, , 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 131, 61 }, 到字节集 (地址), 取字节集左边 (到字节集 (常数), 1)))

.子程序 SHL_EAX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 193, 224 }, 取字节集左边 (到字节集 (常数), 1)))

.子程序 SHR_EAX_常数, 空白型, 公开, 右移
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 193, 232 }, 取字节集左边 (到字节集 (常数), 1)))

.子程序 PUSHAD, 空白型, 公开, 对应指令PUSHAD
赋值 (汇编代码, 相加 (汇编代码, { 96 }))

.子程序 PUSH_EAX, 空白型, 公开, 对应指令PUSH EAX
赋值 (汇编代码, 相加 (汇编代码, { 80 }))

.子程序 POP_EAX, 空白型, 公开, 对应指令POP EAX
赋值 (汇编代码, 相加 (汇编代码, { 88 }))

.子程序 POPAD, 空白型, 公开, 对应指令POPAD
赋值 (汇编代码, 相加 (汇编代码, { 97 }))

.子程序 PUSH_EBX, 空白型, 公开, 对应指令PUSH_EBX
赋值 (汇编代码, 相加 (汇编代码, { 83 }))

.子程序 PUSH_ECX, 空白型, 公开, 对应指令PUSH_ECX
赋值 (汇编代码, 相加 (汇编代码, { 81 }))

.子程序 PUSH_EDX, 空白型, 公开, 对应指令PUSH_EDX
赋值 (汇编代码, 相加 (汇编代码, { 82 }))

.子程序 PUSH_ESI, 空白型, 公开, 对应指令PUSH_ESI
赋值 (汇编代码, 相加 (汇编代码, { 86 }))

.子程序 PUSH_EDI, 空白型, 公开, 对应指令PUSH_EDI
赋值 (汇编代码, 相加 (汇编代码, { 87 }))

.子程序 PUSH_EBP, 空白型, 公开, 对应指令PUSH_EBP
赋值 (汇编代码, 相加 (汇编代码, { 85 }))

.子程序 PUSH_ESP, 空白型, 公开, 对应指令PUSH_ESP
赋值 (汇编代码, 相加 (汇编代码, { 84 }))

.子程序 PUSH_常数, 空白型, 公开, 对应指令PUSH_常数
赋值 (汇编代码, 相加 (汇编代码, { 106 }))

.子程序 MOV_EAX_常数, 空白型, 公开, MOV_EAX_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 184 }, 到字节集 (参数)))

.子程序 MOV_EBX_常数, 空白型, 公开, MOV_EBX_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 187 }, 到字节集 (参数)))

.子程序 MOV_ECX_常数, 空白型, 公开, MOV_ECX_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 185 }, 到字节集 (参数)))

.子程序 MOV_EDX_常数, 空白型, 公开, MOV_EDX_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 186 }, 到字节集 (参数)))

.子程序 MOV_ESI_常数, 空白型, 公开, MOV_ESI_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 190 }, 到字节集 (参数)))

.子程序 MOV_EDI_常数, 空白型, 公开, MOV_EDI_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 191 }, 到字节集 (参数)))

.子程序 MOV_EBP_常数, 空白型, 公开, MOV_EBP_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 189 }, 到字节集 (参数)))

.子程序 MOV_ESP_常数, 空白型, 公开, MOV_ESP_常数
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 188 }, 到字节集 (参数)))

.子程序 MOV_EAX_PRT, 空白型, 公开, 对应指令MOV EAX []
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 161 }, 到字节集 (参数)))

.子程序 MOV_EBX_PRT, 空白型, 公开, 对应指令MOV EBX []
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 29 }, 到字节集 (参数)))

.子程序 MOV_ECX_PRT, 空白型, 公开, 对应指令MOV ECX []
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 13 }, 到字节集 (参数)))

.子程序 MOV_EDX_PRT, 空白型, 公开, 对应指令MOV EDX []
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 21 }, 到字节集 (参数)))

.子程序 MOV_ESI_PRT, 空白型, 公开, 对应指令MOV ESI,[]
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 53 }, 到字节集 (参数)))

.子程序 MOV_EDI_PRT, 空白型, 公开, 对应指令MOV EDI,[]
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 61 }, 到字节集 (参数)))

.子程序 MOV_EBP_PRT, 空白型, 公开, 对应指令MOV EBP,[]
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 45 }, 到字节集 (参数)))

.子程序 MOV_ESP_PRT, 空白型, 公开, 对应指令MOV ESP,[]
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 37 }, 到字节集 (参数)))

.子程序 MOV_PRT_EAX, 空白型, 公开, 对应指令MOV [],EAX
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 5 }, 到字节集 (参数)))

.子程序 MOV_PRT_EBX, 空白型, 公开, 对应指令MOV [],EBX
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 29 }, 到字节集 (参数)))

.子程序 MOV_PRT_ECX, 空白型, 公开, 对应指令MOV [],ECX
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 13 }, 到字节集 (参数)))

.子程序 MOV_PRT_EDX, 空白型, 公开, 对应指令MOV [],EDX
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 21 }, 到字节集 (参数)))

.子程序 MOV_PRT_ESI, 空白型, 公开, 对应指令MOV [],ESI
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 53 }, 到字节集 (参数)))

.子程序 MOV_PRT_EDI, 空白型, 公开, 对应指令MOV [],EDI
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 61 }, 到字节集 (参数)))

.子程序 MOV_PRT_EBP, 空白型, 公开, 对应指令MOV [],EBP
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 45 }, 到字节集 (参数)))

.子程序 MOV_PRT_ESP, 空白型, 公开, 对应指令MOV [],ESP
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 137, 37 }, 到字节集 (参数)))

.子程序 JMP, 空白型, 公开, 对应指令JMP
.参数 参数, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 233, 92, 199, 191, 255 }, 到字节集 (参数)))

.子程序 CALL_EBX, 空白型, 公开, CALL_EBX
赋值 (汇编代码, 相加 (汇编代码, { 255, 211 }))

.子程序 CALL_, 空白型, , CALL 地址 未成功---------原
.参数 偏移地址, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 232, 92, 199, 191, 255 }, 到字节集 (偏移地址)))

.子程序 CALL, 空白型, 公开, CALL 地址
.参数 偏移地址, 空白型, , 

赋值 (汇编代码, 相加 (汇编代码, { 232 }, 到字节集 (偏移地址)))

.子程序 RET, 空白型, 公开, RET
赋值 (汇编代码, 相加 (汇编代码, { 195 }))

.子程序 ADD_EBX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 3, 216 }))

.子程序 ADD_EBX_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 3, 29 }, 到字节集 (地址)))

.子程序 ADD_EBX_字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 131, 195 }, 取指定字节集 (字节)))

.子程序 ADD_ECX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 129, 193 }, 到字节集 (常数)))

.子程序 ADD_EDX_字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 131, 194 }, 取指定字节集 (字节)))

.子程序 ADD_ESI_常数, 空白型, 公开, 加法指令
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 129, 198 }, 到字节集 (常数)))

.子程序 ADD_ESP_字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 131, 196 }, 取指定字节集 (字节)))

.子程序 AND_EAX_整数, 空白型, 公开, 位与运算
.参数 数值, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 37 }, 到字节集 (数值)))

.子程序 CALL_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 255, 21 }, 到字节集 (地址)))

.子程序 CMP_EAX_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 59, 194 }))

.子程序 CMP_EAX_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 59, 5 }, 到字节集 (地址)))

.子程序 CMP_EAX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 61 }, 到字节集 (常数)))

.子程序 DEC_EAX, 空白型, 公开, 递减1指令
赋值 (汇编代码, 相加 (汇编代码, { 72 }))

.子程序 DEC_EBX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 75 }))

.子程序 DEC_ECX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 73 }))

.子程序 DEC_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 74 }))

.子程序 IDIV_EBX, 空白型, 公开, 除法指令
赋值 (汇编代码, 相加 (汇编代码, { 247, 251 }))

.子程序 IMUL_EAX_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 15, 175, 194 }))

.子程序 IN_AL_DX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 236 }))

.子程序 IN_AL_端口号, 空白型, 公开, 
.参数 端口号, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 228 }, 取指定字节集 (端口号)))

.子程序 IN_AX_DX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 237 }))

.子程序 IN_AX_端口号, 空白型, 公开, 
.参数 端口号, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 229 }, 取指定字节集 (端口号)))

.子程序 INC_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 64 }))

.子程序 INC_ECX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 65 }))

.子程序 INC_EDI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 71 }))

.子程序 INC_ESI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 70 }))

.子程序 INC_PTR, 空白型, 公开, 递增1指令
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 255, 5 }, 到字节集 (地址)))

.子程序 INC_PTR_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 255, 0 }))

.子程序 INC_PTR_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 255, 2 }))

.子程序 JE_整数, 整数型, , 等于则转移指令
赋值 (汇编代码, 相加 (汇编代码, { 15, 132, 0, 0, 0, 0 }))
返回 (0)

.子程序 JE_字节, 整数型, , 等于则转移指令
赋值 (汇编代码, 相加 (汇编代码, { 116, 0 }))
返回 (0)

.子程序 JG_整数, 整数型, , 大于则转移
赋值 (汇编代码, 相加 (汇编代码, { 15, 143, 0, 0, 0, 0 }))
返回 (0)

.子程序 JG_字节, 整数型, , 大于则转移
赋值 (汇编代码, 相加 (汇编代码, { 127, 0 }))
返回 (0)

.子程序 JGE_字节, 整数型, , 大于或等于则转移
赋值 (汇编代码, 相加 (汇编代码, { 125, 0 }))
返回 (0)

.子程序 JL_字节, 整数型, , 小于则转移
赋值 (汇编代码, 相加 (汇编代码, { 124, 0 }))
返回 (0)

.子程序 JLE_字节, 整数型, , 小于或等于则转移
赋值 (汇编代码, 相加 (汇编代码, { 126, 0 }))
返回 (0)

.子程序 JMP_字节, 整数型, , 
赋值 (汇编代码, 相加 (汇编代码, { 235, 0 }))
返回 (0)

.子程序 JNE_字节, 整数型, , 不等于则转移指令
赋值 (汇编代码, 相加 (汇编代码, { 117, 0 }))
返回 (0)

.子程序 LEA_EAX_PTR_EAX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 141, 64 }, 取指定字节集 (字节)))

.子程序 LEA_ECX_PTR_EAX加整数, 空白型, 公开, 
.参数 数值, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 141, 136 }, 到字节集 (数值)))

.子程序 LEA_ECX_PTR_ESI加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 141, 78 }, 取指定字节集 (字节)))

.子程序 LEA_ECX_PTR_ESP加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 141, 76, 36 }, 取指定字节集 (字节)))

.子程序 LEAVE, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 201 }))

.子程序 LOOP, 空白型, , 以ECX计次循环指令,ECX不为零时循环,每次循环ECX递减1
.参数 编号, 整数型, , 



.子程序 LOOPNZ, 空白型, , 不等于则循环,ECX不为零且标志Z=0时循环
.参数 编号, 整数型, , 



.子程序 LOOPZ, 空白型, , 等于则循环,ECX不为零且标志Z=1时循环.
.参数 编号, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 161 }, 到字节集 (编号)))

.子程序 MOV_EAX_EBX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 195 }))

.子程序 MOV_EAX_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 194 }))

.子程序 MOV_EAX_ESI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 198 }))

.子程序 MOV_EAX_PTR_DS整数, 空白型, 公开, 等于MOV_EAX_PTR
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 161 }, 到字节集 (地址)))

.子程序 MOV_EAX_PTR_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 0 }))

.子程序 MOV_EAX_PTR_EAX加整数, 空白型, 公开, 
.参数 数值, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 128 }, 到字节集 (数值)))

.子程序 MOV_EAX_PTR_EAX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 64 }, 取指定字节集 (字节)))

.子程序 MOV_EAX_PTR_EBX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 3 }))

.子程序 MOV_EAX_PTR_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 2 }))

.子程序 MOV_EAX_PTR_EDX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 66 }, 取指定字节集 (字节)))

.子程序 MOV_EAX_PTR_ESP加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 68 }, 取指定字节集 (字节)))

.子程序 MOV_EBX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 216 }))

.子程序 MOV_EBX_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 218 }))

.子程序 MOV_EBX_PTR_EAX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 88 }, 取指定字节集 (字节)))

.子程序 MOV_ECX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 200 }))

.子程序 MOV_ECX_EDI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 207 }))

.子程序 MOV_ECX_ESI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 206 }))

.子程序 MOV_ECX_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 13 }, 到字节集 (地址)))

.子程序 MOV_ECX_PTR_EAX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 72 }, 取指定字节集 (字节)))

.子程序 MOV_ECX_PTR_EBX加整数, 空白型, 公开, 
.参数 数值, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 139 }, 到字节集 (数值)))

.子程序 MOV_ECX_PTR_ECX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 73 }, 取指定字节集 (字节)))

.子程序 MOV_ECX_PTR_EDX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 74 }, 取指定字节集 (字节)))

.子程序 MOV_EDI_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 248 }))

.子程序 MOV_EDX_PTR_ECX加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 81 }, 取指定字节集 (字节)))

.子程序 MOV_EDX_PTR_EDI加整数, 空白型, 公开, 
.参数 数值, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 151 }, 到字节集 (数值)))

.子程序 MOV_EDX_PTR_EDI加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 87 }, 取指定字节集 (字节)))

.子程序 MOV_ESI_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 240 }))

.子程序 MOV_ESI_EBX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 243 }))

.子程序 MOV_ESI_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 53 }, 到字节集 (地址)))

.子程序 MOV_ESI_PTR_EBP加字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 139, 117 }, 取指定字节集 (字节)))

.子程序 MOV_ESP_EBP, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 139, 229 }))

.子程序 MOV_PTR_EAX, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 163 }, 到字节集 (地址)))

.子程序 MOV_PTR_EBX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 137, 3 }))

.子程序 MOV_PTR_ECX加字节_EAX, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 231 }, 取指定字节集 (字节)))

.子程序 MOV_PTR_EDX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 137, 2 }))

.子程序 MOV_PTR_常数, 空白型, 公开, 
.参数 地址, 整数型, , 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 199, 5 }, 到字节集 (地址), 到字节集 (常数)))

.子程序 NOP, 空白型, 公开, 空指令
赋值 (汇编代码, 相加 (汇编代码, { 144 }))

.子程序 NOT_EAX, 空白型, 公开, 取反指令
赋值 (汇编代码, 相加 (汇编代码, { 247, 208 }))

.子程序 OUT_DX_AL, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 238 }))

.子程序 OUT_端口号_AX, 空白型, 公开, 
.参数 端口号, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 231 }, 取指定字节集 (端口号)))

.子程序 POP_EBX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 91 }))

.子程序 POP_EDX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 90 }))

.子程序 POP_ESI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 94 }))

.子程序 PUSH_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 43, 5 }, 到字节集 (地址)))

.子程序 SHL_EBX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 193, 227 }, 取指定字节集 (常数)))

.子程序 SHR_EBX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 193, 235 }, 取指定字节集 (常数)))

.子程序 SUB_EAX_PTR, 空白型, 公开, 
.参数 地址, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 43, 5 }, 到字节集 (地址)))

.子程序 SUB_EBX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 43, 216 }))

.子程序 SUB_EDX_字节, 空白型, 公开, 
.参数 字节, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 131, 234 }, 取指定字节集 (字节)))

.子程序 TEST_EAX_EAX, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 133, 192 }))

.子程序 TEST_EAX_常数, 空白型, 公开, 
.参数 常数, 整数型, , 

赋值 (汇编代码, 相加 (汇编代码, { 169 }, 到字节集 (常数)))

.子程序 XOR_EAX_EBX, 空白型, 公开, 异或运算
赋值 (汇编代码, 相加 (汇编代码, { 51, 195 }))

.子程序 XOR_EDI_EDI, 空白型, 公开, 
赋值 (汇编代码, 相加 (汇编代码, { 51, 255 }))

.类模块 Xml_操作, , , 

.程序集变量 私有_XML对象, 对象, , , 
.子程序 导入, 逻辑型, 公开, 
.参数 参数_XML数据, 字节集, , 

返回 (私有_XML对象.逻辑方法 (“loadXML”, 参数_XML数据))

.子程序 导出, 字节集, 公开, 
返回 (私有_XML对象.读属性 (“xml”, ).取字节集 ())

.子程序 取父节点名, 文本型, 公开, 
.参数 参数_节点路径, 文本型, , 

返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).读对象型属性 (“parentNode”, ).读文本属性 (“baseName”, ))

.子程序 取根节点名, 文本型, 公开, 
返回 (私有_XML对象.读对象型属性 (“documentElement”, ).读文本属性 (“baseName”, ))

.子程序 取子节点名称, 空白型, 公开, 
.参数 参数_节点路径, 文本型, , 
.参数 参数_子节点名称, 文本型, 数组, 

.局部变量 局部_临时整数, 整数型, , , 

赋值 (局部_临时整数, 取子节点数 (参数_节点路径))
重定义数组 (参数_子节点名称, 假, 局部_临时整数)
.计次循环首 (局部_临时整数, 局部_临时整数)
    赋值 (参数_子节点名称 [局部_临时整数], 私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).读对象型属性 (“childNodes”, ).读对象型属性 (“item”, 局部_临时整数).读文本属性 (“nodeName”, ))
.计次循环尾 ()

.子程序 删除节点, 逻辑型, 公开, 
.参数 参数_节点路径, 文本型, , 

返回 (私有_XML对象.逻辑方法 (“removeChild”, 私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径)))

.子程序 添加节点, 逻辑型, 公开, 
.参数 参数_节点路径, 文本型, , 
.参数 参数_节点名称, 文本型, , 
.参数 参数_节点内容, 文本型, , 

返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).对象型方法 (“appendChild”, 私有_XML对象.对象型方法 (“createNode”, 1, 参数_节点名称, “”)).写属性 (“text”, 参数_节点内容))

.子程序 取节点文本, 文本型, 公开, 
.参数 参数_节点路径, 文本型, , 

返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).读属性 (“nodeTypedValue”, ).取文本 ())


.子程序 取节点字节集, 字节集, 公开, 
.参数 参数_节点路径, 文本型, , 

返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).读属性 (“nodeTypedValue”, ).取字节集 ())

.子程序 置节点文本, 逻辑型, 公开, 
.参数 参数_节点路径, 文本型, , 
.参数 参数_节点内容, 文本型, , 

返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).写属性 (“nodeTypedValue”, 参数_节点内容))

.子程序 置节点字节集, 逻辑型, 公开, 
.参数 参数_节点路径, 文本型, , 
.参数 参数_节点内容, 字节集, , 

.局部变量 a, 变体型, , , 

a.赋值 (参数_节点内容, )
返回 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).写属性 (“nodeTypedValue”, a))

.子程序 取子节点数, 整数型, 公开, 
.参数 参数_节点路径, 文本型, , /A/B/C/D

返回 (相减 (私有_XML对象.对象型方法 (“selectSingleNode”, 参数_节点路径).读对象型属性 (“childNodes”, ).读数值属性 (“length”, ), 1))

.类模块 网页操作, , , 

.程序集变量 sdj7fh, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化, 逻辑型, 公开, 提供网页文档或浏览器窗口句柄初始化
.参数 网页文档对象, 对象, 可空, 
.参数 浏览器窗口句柄, 整数型, 可空, 

.如果真 (等于 (是否为空 (网页文档对象), 假))
    赋值 (sdj7fh, 网页文档对象)
    返回 (网页文档对象.是否为空 ())
.如果真结束
.如果真 (等于 (是否为空 (浏览器窗口句柄), 假))
    返回 (取网页文档对象 (浏览器窗口句柄, sdj7fh))
.如果真结束
返回 (假)


.子程序 取网页文档对象, 逻辑型, , 通过浏览器窗口句柄取网页文档
.参数 浏览器窗口句柄, 整数型, , 
.参数 文档对象, 对象, 参考, 返回的网页文档对象，只能提供变量

.局部变量 窗口类名, 文本型, , , 
.局部变量 资源编号, 整数型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 消息值, 整数型, , , 
.局部变量 对象, 对象, , , 
.局部变量 是否IES窗口, 逻辑型, , , 
.局部变量 子窗口句柄, 整数型, , , 

赋值 (窗口类名, 取空白文本 (255)) ' 缓冲区
GetClassName (浏览器窗口句柄, 窗口类名, 255) ' 取窗口类名
.如果真 (不等于 (窗口类名, “Internet Explorer_Server”))
    赋值 (浏览器窗口句柄, 取IES窗口句柄 (浏览器窗口句柄))
    .如果真 (等于 (浏览器窗口句柄, 0))
        返回 (假)
    .如果真结束
    
.如果真结束
赋值 (消息值, RegisterWindowMessage (“WM_HTML_GETOBJECT”))
SendMessageTimeout (浏览器窗口句柄, 消息值, 0, 0, 2, 1000, 资源编号)
_模块_调用转向 (“OLEACC.DLL”, “ObjectFromLresult”)
赋值 (结果, ObjectFromLresult (资源编号, { 32, 197, 111, 98, 30, 164, 207, 17, 167, 49, 0, 160, 201, 8, 38, 55 }, 0, 文档对象))
返回 (等于 (结果, 0))


.子程序 取IES窗口句柄, 整数型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 窗口类名, 文本型, , , 
.局部变量 Hwnd, 空白型, , , 
.局部变量 x, 空白型, , , 

赋值 (Hwnd, _寻找子窗口3 (窗口句柄, 0, 0, 0))
.判断循环首 (大于 (Hwnd, 0))
    赋值 (窗口类名, 取空白文本 (255)) ' 缓冲区
    GetClassName (Hwnd, 窗口类名, 255) ' 取窗口类名
    .如果真 (等于 (窗口类名, “Internet Explorer_Server”))
        返回 (Hwnd)
    .如果真结束
    赋值 (x, 取IES窗口句柄 (Hwnd))
    .如果真 (不等于 (x, 0))
        返回 (x)
    .如果真结束
    赋值 (Hwnd, _寻找子窗口3 (窗口句柄, Hwnd, 0, 0))
.判断循环尾 ()
返回 (0)


.子程序 取网页属性, 文本型, 公开, 取网页文档的属性
.参数 属性类型, 文本型, , 请提供“#网页属性_”开头的常量值

.判断开始 (等于 (属性类型, #网页属性_网页源码))
    返回 (sdj7fh.读对象型属性 (“documentElement”, ).读文本属性 (“outerHTML”, ))
.判断 (等于 (属性类型, #网页属性_网页文本))
    返回 (sdj7fh.读对象型属性 (“documentElement”, ).读文本属性 (“innerText”, ))
.默认
    返回 (sdj7fh.读文本属性 (属性类型, ))
.判断结束
返回 (“”)


.子程序 点击链接, 逻辑型, 公开, 点击网页上特定的超链接
.参数 元素标识, 文本型, , 要点击链接的名称、ID、索引、标题或地址
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引,3.元素标识类型_标题,4.元素标识类型_地址
.参数 完全匹配, 逻辑型, 可空, 是否完全匹配元素标识,默认为假

.局部变量 对象集合, 对象, , , 
.局部变量 临时对象, 对象, , , 
.局部变量 i, 整数型, , , 

赋值 (对象集合, sdj7fh.对象型方法 (“getElementsByTagName”, “a”))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    赋值 (临时对象, 取元素对象 (元素标识, 标识类型))
    .如果 (临时对象.是否为空 ())
        返回 (假)
    .否则
        临时对象.方法 (“click”, )
        返回 (真)
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    赋值 (临时对象, 取元素对象 (元素标识, 标识类型))
    .如果 (临时对象.是否为空 ())
        返回 (假)
    .否则
        临时对象.方法 (“click”, )
        返回 (真)
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (到整数 (元素标识), i))
            临时对象.方法 (“click”, )
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_标题))
    .如果 (完全匹配)
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            .如果真 (等于 (临时对象.读文本属性 (“innerText”, ), 元素标识))
                临时对象.方法 (“click”, )
                返回 (真)
            .如果真结束
            
        .计次循环尾 ()
    .否则
        
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            .如果真 (大于 (寻找文本 (临时对象.读文本属性 (“innerText”, ), 元素标识, , 真), -1))
                临时对象.方法 (“click”, )
                返回 (真)
            .如果真结束
            
        .计次循环尾 ()
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_地址))
    .如果 (完全匹配)
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            .如果真 (等于 (临时对象.读文本属性 (“href”, ), 元素标识))
                临时对象.方法 (“click”, )
                返回 (真)
            .如果真结束
            
        .计次循环尾 ()
    .否则
        
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            .如果真 (大于 (寻找文本 (临时对象.读文本属性 (“href”, ), 元素标识, , 真), -1))
                临时对象.方法 (“click”, )
                返回 (真)
            .如果真结束
            
        .计次循环尾 ()
    .如果结束
    
.默认
    
.判断结束
返回 (假)


.子程序 点击按钮, 逻辑型, 公开, 点击网页上的普通按钮或图片按钮
.参数 元素标识, 文本型, , 要点击按钮的名称、ID、索引、标题
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引,3.元素标识类型_标题,4.元素标识类型_地址
.参数 完全匹配, 逻辑型, 可空, 是否完全匹配元素标识,默认为假

.局部变量 对象集合, 对象, , , 
.局部变量 临时对象, 对象, , , 
.局部变量 i, 整数型, , , 
.局部变量 index, 整数型, , , 
.局部变量 tagType, 文本型, , , 

赋值 (对象集合, sdj7fh.对象型方法 (“getElementsByTagName”, “input”))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    赋值 (临时对象, 取元素对象 (元素标识, 标识类型))
    .如果 (临时对象.是否为空 ())
        返回 (假)
    .否则
        临时对象.方法 (“click”, )
        返回 (真)
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    赋值 (临时对象, 取元素对象 (元素标识, 标识类型))
    .如果 (临时对象.是否为空 ())
        返回 (假)
    .否则
        临时对象.方法 (“click”, )
        返回 (真)
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        赋值 (tagType, 到小写 (临时对象.读文本属性 (“type”, )))
         ' 按钮有3种类型，我们过滤一下：提交按钮(submit)、普通按钮(button)、重设按钮(reset)
         ' 图片按钮有的类型image
        .如果真 (或者 (等于 (tagType, “submit”), 等于 (tagType, “button”), 等于 (tagType, “reset”), 等于 (tagType, “image”)))
            赋值 (index, 相加 (index, 1))
            .如果真 (等于 (到整数 (元素标识), index))
                临时对象.方法 (“click”, )
                返回 (真)
            .如果真结束
            
        .如果真结束
        
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_标题))
    .如果 (完全匹配)
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            赋值 (tagType, 到小写 (临时对象.读文本属性 (“type”, )))
             ' 按钮有3种类型，我们过滤一下：提交按钮(submit)、普通按钮(button)、重设按钮(reset)
             ' 图片按钮有的类型image
            .如果真 (或者 (等于 (tagType, “submit”), 等于 (tagType, “button”), 等于 (tagType, “reset”), 等于 (tagType, “image”)))
                .如果真 (等于 (临时对象.读文本属性 (“value”, ), 元素标识))
                    临时对象.方法 (“click”, )
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .否则
        
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            赋值 (tagType, 到小写 (临时对象.读文本属性 (“type”, )))
             ' 按钮有3种类型，我们过滤一下：提交按钮(submit)、普通按钮(button)、重设按钮(reset)
             ' 图片按钮有的类型image
            .如果真 (或者 (等于 (tagType, “submit”), 等于 (tagType, “button”), 等于 (tagType, “reset”), 等于 (tagType, “image”)))
                .如果真 (大于 (寻找文本 (临时对象.读文本属性 (“value”, ), 元素标识, , 真), -1))
                    临时对象.方法 (“click”, )
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .如果结束
    
.判断 (等于 (标识类型, #元素标识类型_地址))
     ' 只有按钮图片按钮才有图片地址这个属性，所以这里就只要判断图片按钮就够了
    .如果 (完全匹配)
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            赋值 (tagType, 到小写 (临时对象.读文本属性 (“type”, )))
            .如果真 (等于 (tagType, “image”))
                .如果真 (等于 (临时对象.读文本属性 (“src”, ), 元素标识))
                    临时对象.方法 (“click”, )
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .否则
        
        .计次循环首 (对象集合.读数值属性 (“length”, ), i)
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            赋值 (tagType, 到小写 (临时对象.读文本属性 (“type”, )))
            .如果真 (等于 (tagType, “image”))
                .如果真 (大于 (寻找文本 (临时对象.读文本属性 (“src”, ), 元素标识, , 真), -1))
                    临时对象.方法 (“click”, )
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .如果结束
    
.默认
    
.判断结束
返回 (假)


.子程序 填写表单, 逻辑型, 公开, 本方法支持的组件：文本框(Text)、多行文本框(TextArea)、隐藏表单(hidden)、文件域(file)
.参数 元素标识, 文本型, , 元素名称或ID
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID
.参数 填写内容, 文本型, , 

.局部变量 元素对象, 对象, , , 

赋值 (元素对象, 取元素对象 (元素标识, 标识类型))
返回 (元素对象.写属性 (“value”, 填写内容))


.子程序 取表单值, 文本型, 公开, 本方法支持的组件：文本框(Text)、多行文本框(TextArea)、隐藏表单(hidden)、文件域(file)
.参数 元素标识, 文本型, , 元素名称或ID
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID

.局部变量 元素对象, 对象, , , 

赋值 (元素对象, 取元素对象 (元素标识, 标识类型))
返回 (元素对象.读文本属性 (“value”, ))


.子程序 屏蔽信息框, 空白型, 公开, 屏蔽常见的网页信息框、对话框
.局部变量 parentWindow, 对象, , , 

赋值 (parentWindow, sdj7fh.读对象型属性 (“parentWindow”, ))
parentWindow.方法 (“execScript”, “function alert(){return;}”, “JScript”)
parentWindow.方法 (“execScript”, “function confirm(){return;}”, “JScript”)
parentWindow.方法 (“execScript”, “function prompt(){return;}”, “JScript”)
parentWindow.方法 (“execScript”, “function showModalDialog(){return;}”, “JScript”)


.子程序 取所有网页框句柄, 逻辑型, 公开, 取已打开的所有网页窗口句柄
.参数 父句柄, 整数型, , 要取网页窗口的父窗口，要取整个系统的网页窗口请提供0
.参数 欲装载的数组, 整数型, 参考 数组, 返回的句柄数组，只能提供数组型变量

.局部变量 hWnd, 整数型, , , 
.局部变量 窗口类名, 文本型, , , 

赋值 (hWnd, _寻找子窗口3 (父句柄, 0, 0, 0))
.判断循环首 (不等于 (hWnd, 0))
    赋值 (窗口类名, 取空白文本 (255)) ' 缓冲区
    GetClassName (hWnd, 窗口类名, 255) ' 取窗口类名
    .如果真 (等于 (窗口类名, “Internet Explorer_Server”))
        加入成员 (欲装载的数组, hWnd)
    .如果真结束
    取所有网页框句柄 (hWnd, 欲装载的数组)
    赋值 (hWnd, _寻找子窗口3 (父句柄, hWnd, 0, 0))
.判断循环尾 ()
返回 (不等于 (取数组成员数 (欲装载的数组), 0))


.子程序 取选中内容, 文本型, 公开, 取当前网页上选中的内容
.参数 返回类型, 整数型, 可空, 0.文本 1.HTML代码 默认为0

.局部变量 createRan, 对象, , , 

赋值 (createRan, sdj7fh.读对象型属性 (“selection”, ).对象型方法 (“createRange”, ))
.如果真 (createRan.是否为空 ())
    返回 (“”)
.如果真结束
.如果真 (大于 (返回类型, 0))
    返回 (createRan.读文本属性 (“htmlText”, ))
.如果真结束
返回 (createRan.读文本属性 (“Text”, ))


.子程序 替换选中内容, 空白型, 公开, 选中区替换为...
.参数 被替换为, 文本型, , 

sdj7fh.读对象型属性 (“selection”, ).对象型方法 (“createRange”, ).方法 (“pasteHTML”, 被替换为)


.子程序 取单选框元素, 网页单选框类, 公开, 
.参数 单选框名称, 文本型, , 元素名称name

.局部变量 临时对象, 对象, , , 
.局部变量 临时对象类, 网页单选框类, , , 

赋值 (临时对象, sdj7fh.对象型方法 (“getElementsByName”, 单选框名称))
临时对象类.初始化 (临时对象)
返回 (临时对象类)


.子程序 取复选框元素, 网页复选框类, 公开, 
.参数 复选框名称, 文本型, , 元素名称name

.局部变量 临时对象, 对象, , , 
.局部变量 临时对象类, 网页复选框类, , , 

赋值 (临时对象, sdj7fh.对象型方法 (“getElementsByName”, 复选框名称))
临时对象类.初始化 (临时对象)
返回 (临时对象类)


.子程序 取组合框元素, 网页组合框类, 公开, 
.参数 元素标识, 文本型, , 元素名称或ID
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引

.局部变量 临时对象类, 网页组合框类, , , 
.局部变量 对象集合, 对象, , , 
.局部变量 临时对象, 对象, , , 
.局部变量 i, 空白型, , , 

赋值 (元素标识, 到小写 (元素标识))
赋值 (对象集合, sdj7fh.读对象型属性 (“body”, ).读对象型属性 (“all”, ).对象型方法 (“tags”, “select”))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (到小写 (临时对象.读文本属性 (“name”, )), 元素标识))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (到小写 (临时对象.读文本属性 (“id”, )), 元素标识))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        .如果真 (等于 (到整数 (元素标识), i))
            赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束
临时对象类.初始化 (临时对象)
返回 (临时对象类)


.子程序 取元素对象, 对象, 公开, 按标题或ID取网页元素对象
.参数 元素标识, 文本型, , 元素名称或ID
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID

.局部变量 元素对象, 对象, , , 

.如果 (等于 (标识类型, #元素标识类型_ID))
    赋值 (元素对象, sdj7fh.对象型方法 (“getElementsByName”, 元素标识).对象型方法 (“item”, ))
.否则
    赋值 (元素对象, sdj7fh.对象型方法 (“getElementById”, 元素标识))
.如果结束
返回 (元素对象)


.子程序 取元素对象_按坐标, 对象, 公开, 返回指定 x 和 y 坐标的网页元素(elementFromPoint)
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 

返回 (sdj7fh.对象型方法 (“elementFromPoint”, 横向位置, 纵向位置))


.子程序 取元素代码, 文本型, 公开, 返回网页元素里的HTML代码(innerHTML)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取

返回 (元素对象.读文本属性 (“innerHTML”, ))


.子程序 取元素文本, 文本型, 公开, 返回网页元素里的文本(innerText)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取

返回 (元素对象.读文本属性 (“innerText”, ))


.子程序 取元素引用代码, 文本型, 公开, 返回网页元素的引用代码(outerHTML)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取

返回 (元素对象.读文本属性 (“outerHTML”, ))


.子程序 取元素引用文本, 文本型, 公开, 返回网页元素的引用文本(outerText)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取

返回 (元素对象.读文本属性 (“outerText”, ))


.子程序 取框架数量, 整数型, 公开, 取网页内框架(frame)数量
返回 (sdj7fh.读对象型属性 (“frames”, ).读数值属性 (“length”, ))


.子程序 取框架对象, 对象, 公开, 取网页内框架(frame)
.参数 元素标识, 文本型, , 元素名称、ID、索引(1,2,3,..)
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引

.局部变量 frames, 对象, , , 
.局部变量 frame, 对象, , , 
.局部变量 i, 空白型, , , 

赋值 (元素标识, 到小写 (元素标识))
赋值 (frames, sdj7fh.读对象型属性 (“frames”, ))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    .计次循环首 (frames.读数值属性 (“length”, ), i)
        赋值 (frame, frames.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (到小写 (frame.读文本属性 (“name”, )), 元素标识))
            返回 (frame)
        .如果真结束
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    .计次循环首 (frames.读数值属性 (“length”, ), i)
        赋值 (frame, frames.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (到小写 (frame.读文本属性 (“id”, )), 元素标识))
            返回 (frame)
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (frames.读数值属性 (“length”, ), i)
        .如果真 (等于 (到整数 (元素标识), i))
            赋值 (frame, frames.对象型方法 (“item”, 相减 (i, 1)))
            返回 (frame)
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束
frame.清除 ()
返回 (frame)


.子程序 取框架文档, 对象, 公开, 取网页内框架(frame)的文档对象(Document)
.参数 元素标识, 文本型, , 元素名称、ID、索引(1,2,3,..)
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引

.局部变量 sframe, 对象, , , 

赋值 (sframe, 取框架对象 (元素标识, 标识类型))
返回 (sframe.读对象型属性 (“frameElement”, ))


.子程序 网页导航, 空白型, 公开, 跳转到指定网址
.参数 网页地址, 文本型, , 

sdj7fh.读对象型属性 (“parentWindow”, ).方法 (“navigate”, 网页地址)


.子程序 写超文本流, 空白型, 公开, 直接在Webbroswer或外部网页框内写入一个完整的网页
.参数 超文本流, 文本型, , 网页HTML代码，最好包含<html>与</html>

sdj7fh.方法 (“open”, )
sdj7fh.方法 (“write”, 超文本流)
sdj7fh.方法 (“Close”, )


.子程序 执行脚本, 空白型, 公开, 在当前网页上执行指定的脚本命令
.参数 脚本代码, 文本型, , 
.参数 脚本类型, 文本型, 可空, #脚本类型_JavaScript、#脚本类型_VBScript，默认为JavaScript

.如果真 (是否为空 (脚本类型))
    赋值 (脚本类型, #脚本类型_VBScript)
.如果真结束
sdj7fh.读对象型属性 (“parentWindow”, ).方法 (“execScript”, 脚本代码, 脚本类型)


.子程序 执行事件函数, 逻辑型, 公开, 执行某个网页元素相关的脚本方法
.参数 事件元素, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 事件名称, 文本型, , 请使用“#网页事件_”开头的常量，一般是 #网页事件_onclick

.局部变量 事件函数, 变体型, , , 

赋值 (事件函数, 事件元素.读属性 (事件名称, )) ' 读取事件函数
返回 (事件元素.逻辑方法 (“FireEvent”, 事件名称, 事件函数)) ' 执行读取到的这个函数，事件名称一般是“onclick”


.子程序 置元素代码, 逻辑型, 公开, 设置网页元素里的HTML代码(innerHTML)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 待写入值, 文本型, , 

返回 (元素对象.写属性 (“innerHTML”, 待写入值))


.子程序 置元素文本, 逻辑型, 公开, 设置网页元素里的文本(innerText)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 待写入值, 文本型, , 

返回 (元素对象.写属性 (“innerText”, 待写入值))


.子程序 置元素引用代码, 逻辑型, 公开, 设置网页元素的引用代码(outerHTML)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 待写入值, 文本型, , 

返回 (元素对象.写属性 (“outerHTML”, 待写入值))


.子程序 置元素引用文本, 逻辑型, 公开, 设置网页元素的引用文本(outerText)
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 待写入值, 文本型, , 

返回 (元素对象.写属性 (“outerText”, 待写入值))


.子程序 置焦点, 空白型, 公开, 设置网页元素获取焦点
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取

元素对象.方法 (“focus”, )


.子程序 置可视状态, 逻辑型, 公开, 设置网页元素是否可视
.参数 元素对象, 对象, , 网页元素对象，可以通过“取元素对象()”获取
.参数 是否可视, 逻辑型, , 

.局部变量 tagName, 文本型, , , 

赋值 (tagName, 到小写 (元素对象.读文本属性 (“tagName”, )))
.判断开始 (等于 (tagName, “input”))
    .如果 (是否可视)
        返回 (元素对象.写属性 (“type”, “text”))
    .否则
        返回 (元素对象.写属性 (“type”, “hidden”))
    .如果结束
    
.默认
    .如果 (是否可视)
        返回 (元素对象.读对象型属性 (“style”, ).写属性 (“display”, “block”))
    .否则
        返回 (元素对象.读对象型属性 (“style”, ).写属性 (“display”, “none”))
    .如果结束
    
.判断结束
返回 (假)


.子程序 置网页属性, 文本型, 公开, 指定网页文档的属性
.参数 属性类型, 文本型, , 请提供“#网页属性_”开头的常量值
.参数 待写入值, 文本型, , 

返回 (sdj7fh.读文本属性 (属性类型, 待写入值))


.子程序 取表单对象, 对象, 公开, 取网页上的表单对象(Form)
.参数 元素标识, 文本型, , 元素名称、ID、索引(1,2,3,..)
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引

.局部变量 对象集合, 对象, , , 
.局部变量 临时对象, 对象, , , 
.局部变量 i, 整数型, , , 

赋值 (对象集合, sdj7fh.读对象型属性 (“forms”, ))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (临时对象.读文本属性 (“name”, ), 元素标识))
            返回 (临时对象)
        .如果真结束
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (临时对象.读文本属性 (“id”, ), 元素标识))
            返回 (临时对象)
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (i, 到整数 (元素标识)))
            返回 (临时对象)
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束
临时对象.清除 ()
返回 (临时对象)


.子程序 提交表单, 逻辑型, 公开, Form.submit()
.参数 元素标识, 文本型, , 元素名称、ID、索引(1,2,3,..)
.参数 标识类型, 整数型, , 0.元素标识类型_名称,1.元素标识类型_ID,2.元素标识类型_索引

.局部变量 对象集合, 对象, , , 
.局部变量 临时对象, 对象, , , 
.局部变量 i, 整数型, , , 

赋值 (对象集合, sdj7fh.读对象型属性 (“forms”, ))
.判断开始 (等于 (标识类型, #元素标识类型_名称))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (临时对象.读文本属性 (“name”, ), 元素标识))
            临时对象.方法 (“submit”, )
            返回 (真)
            
        .如果真结束
        
    .计次循环尾 ()
    
.判断 (等于 (标识类型, #元素标识类型_ID))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (临时对象.读文本属性 (“id”, ), 元素标识))
            临时对象.方法 (“submit”, )
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
.判断 (等于 (标识类型, #元素标识类型_索引))
    .计次循环首 (对象集合.读数值属性 (“length”, ), i)
        赋值 (临时对象, 对象集合.对象型方法 (“item”, 相减 (i, 1)))
        .如果真 (等于 (i, 到整数 (元素标识)))
            临时对象.方法 (“submit”, )
            返回 (真)
        .如果真结束
        
    .计次循环尾 ()
.默认
    
.判断结束
临时对象.清除 ()
返回 (假)


.子程序 显示弹出窗口, 对象, 公开, 在屏幕上显示弹出窗口(popup.show)，返回弹出窗口对象
.参数 横向位置, 整数型, , 指定弹出窗口( popup )左上角横坐标。单位为像素( px )。 
.参数 纵向位置, 整数型, , 指定弹出窗口( popup )左上角纵坐标。单位为像素( px )。 
.参数 窗口宽度, 整数型, , 指定弹出窗口( popup )宽度。单位为像素( px )。
.参数 窗口高度, 整数型, , 指定弹出窗口( popup )高度。单位为像素( px )。
.参数 窗口内容, 文本型, , 待弹出窗口的内容
.参数 背景颜色, 整数型, 可空, 可选项。指定弹出窗口( popup )背景颜色，默认为白色
.参数 边框粗细, 整数型, 可空, 可选项。指定弹出窗口( popup )边框粗细。默认为1像素( px )。
.参数 边框颜色, 整数型, 可空, 可选项。指定弹出窗口( popup )边框颜色。默认为1浅灰色。
.参数 相对元素, 对象, 可空, 可选项。对象(Element)。指定 iX 和 iY 坐标所相对于的对象。如果忽略此参数，则默认相对于桌面(Desktop)。

.局部变量 oPopup, 对象, , , 
.局部变量 oBody, 对象, , , 

赋值 (oPopup, sdj7fh.读对象型属性 (“parentWindow”, ).对象型方法 (“createPopup”, ))
赋值 (oBody, oPopup.读对象型属性 (“document”, ).读对象型属性 (“body”, ))
.如果真 (是否为空 (背景颜色))
    赋值 (背景颜色, #白色)
.如果真结束
.如果真 (是否为空 (边框粗细))
    赋值 (边框粗细, 1)
.如果真结束
.如果真 (是否为空 (边框颜色))
    赋值 (边框颜色, #浅灰)
.如果真结束
oBody.读对象型属性 (“style”, ).写属性 (“backgroundColor”, 取网页颜色值 (背景颜色))
oBody.读对象型属性 (“style”, ).写属性 (“border”, 相加 (“solid ”, 取网页颜色值 (边框颜色), 到文本 (边框粗细), “px”))
oBody.写属性 (“innerHTML”, 窗口内容)
.如果 (是否为空 (相对元素))
    oPopup.方法 (“show”, 横向位置, 纵向位置, 窗口宽度, 窗口高度)
.否则
    oPopup.方法 (“show”, 横向位置, 纵向位置, 窗口宽度, 窗口高度, 相对元素)
.如果结束
返回 (oPopup)


.子程序 隐藏弹出窗口, 空白型, 公开, popup.hide
.参数 弹出窗口对象, 对象, , 

弹出窗口对象.方法 (“hide”, )


.子程序 取网页颜色值, 文本型, 公开, 将整数型的颜色值转换为网页支持的格式
.参数 待转换颜色值, 整数型, , 

.局部变量 oBin, 字节集, , , 
.局部变量 oColor, 文本型, , , 

赋值 (oBin, 到字节集 (待转换颜色值))
赋值 (oColor, 取文本右边 (相加 (“00”, 取十六进制文本 (oBin [1])), 2))
赋值 (oColor, 相加 (oColor, 取文本右边 (相加 (“00”, 取十六进制文本 (oBin [2])), 2)))
赋值 (oColor, 相加 (oColor, 取文本右边 (相加 (“00”, 取十六进制文本 (oBin [3])), 2)))
返回 (oColor)


.子程序 取元素集合, 对象, 公开, 获取基于指定元素名称的对象集合(getElementsByTagName)
.参数 元素名称, 文本型, , 如：“a”、“table”、“div”、“img”..

返回 (sdj7fh.对象型方法 (“getElementsByTagName”, 元素名称))


.类模块 网页单选框类, , , 

.程序集变量 sdj7dh, 对象, , , 
.子程序 初始化, 空白型, 公开, 
.参数 单选框集合, 对象, , 

赋值 (sdj7dh, 单选框集合)


.子程序 取数量, 整数型, 公开, 返回单选框(radio)的数量
返回 (sdj7dh.读数值属性 (“length”, ))


.子程序 取选中状态, 逻辑型, 公开, 
.参数 单选框索引, 整数型, , 第几个单选框(radio)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj7dh.读对象型属性 (“item”, 相减 (单选框索引, 1)))
返回 (等于 (临时对象.读属性 (“checked”, ).取数值 (), -1))


.子程序 选中, 空白型, 公开, 
.参数 单选框索引, 整数型, , 第几个单选框(radio)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj7dh.读对象型属性 (“item”, 相减 (单选框索引, 1)))
临时对象.写属性 (“checked”, 1)


.子程序 取消选中, 空白型, 公开, 
.参数 单选框索引, 整数型, , 第几个单选框(radio)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj7dh.读对象型属性 (“item”, 相减 (单选框索引, 1)))
临时对象.写属性 (“checked”, 0)


.子程序 取选中值, 文本型, 公开, 
.参数 单选框索引, 整数型, , 第几个单选框(radio)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj7dh.读对象型属性 (“item”, 相减 (单选框索引, 1)))
返回 (临时对象.读文本属性 (“value”, ))


.类模块 网页复选框类, , , 

.程序集变量 sdj8fdcfh, 对象, , , 
.子程序 初始化, 空白型, 公开, 
.参数 单选框集合, 对象, , 

赋值 (sdj8fdcfh, 单选框集合)


.子程序 取数量, 整数型, 公开, 返回复选框(checkbox)的数量
返回 (sdj8fdcfh.读数值属性 (“length”, ))


.子程序 取选中状态, 逻辑型, 公开, 
.参数 复选框索引, 整数型, , 第几个复选框(checkbox)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj8fdcfh.读对象型属性 (“item”, 相减 (复选框索引, 1)))
返回 (等于 (临时对象.读属性 (“checked”, ).取数值 (), -1))


.子程序 选中, 空白型, 公开, 
.参数 复选框索引, 整数型, , 第几个复选框(checkbox)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj8fdcfh.读对象型属性 (“item”, 相减 (复选框索引, 1)))
临时对象.写属性 (“checked”, 1)


.子程序 取消选中, 空白型, 公开, 
.参数 复选框索引, 整数型, , 第几个复选框(checkbox)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj8fdcfh.读对象型属性 (“item”, 相减 (复选框索引, 1)))
临时对象.写属性 (“checked”, 0)


.子程序 取选中值, 文本型, 公开, 
.参数 复选框索引, 整数型, , 第几个复选框(checkbox)。1为第一个,2为第二个…

.局部变量 临时对象, 对象, , , 

赋值 (临时对象, sdj8fdcfh.读对象型属性 (“item”, 相减 (复选框索引, 1)))
返回 (临时对象.读文本属性 (“value”, ))


.类模块 网页组合框类, , , 

.程序集变量 djucgd, 对象, , , 
.程序集变量 dt68jt6, 对象, , , 
.子程序 初始化, 空白型, 公开, 
.参数 组合框对象, 对象, , 

赋值 (djucgd, 组合框对象)
赋值 (dt68jt6, 组合框对象.读对象型属性 (“options”, ))


.子程序 取项目数, 整数型, 公开, 
返回 (dt68jt6.读数值属性 (“length”, ))


.子程序 取项目文本, 文本型, 公开, 
.参数 项目索引, 整数型, , 第几个项目(options)，1为第一项,2为第二个……

.局部变量 mOption, 对象, , , 

赋值 (mOption, dt68jt6.对象型方法 (“item”, 相减 (项目索引, 1)))
返回 (mOption.读文本属性 (“text”, ))


.子程序 置项目文本, 逻辑型, 公开, 
.参数 项目索引, 整数型, , 第几个项目(options)，1为第一项,2为第二个……
.参数 待写入值, 文本型, , 

.局部变量 mOption, 对象, , , 

赋值 (mOption, dt68jt6.对象型方法 (“item”, 相减 (项目索引, 1)))
返回 (mOption.写属性 (“text”, 待写入值))


.子程序 取项目值, 文本型, 公开, 
.参数 项目索引, 整数型, , 第几个项目(options)，1为第一项,2为第二个……

.局部变量 mOption, 对象, , , 

赋值 (mOption, dt68jt6.对象型方法 (“item”, 相减 (项目索引, 1)))
返回 (mOption.读文本属性 (“value”, ))


.子程序 置项目值, 逻辑型, 公开, 
.参数 项目索引, 整数型, , 第几个项目(options)，1为第一项,2为第二个……
.参数 待写入值, 文本型, , 

.局部变量 mOption, 对象, , , 

赋值 (mOption, dt68jt6.对象型方法 (“item”, 相减 (项目索引, 1)))
返回 (mOption.写属性 (“value”, 待写入值))


.子程序 取现行选中项, 整数型, 公开, 取列表框中现行被选中的列表项目(options)的索引，位置值从 0 开始， -1 表示现行没有被选中的列表项
返回 (djucgd.读数值属性 (“selectedIndex”, ))


.子程序 置现行选中项, 逻辑型, 公开, 设置列表框中现行被选中的列表项目(options)的索引，位置值从 0 开始， -1 表示现行没有被选中的列表项
.参数 项目索引, 整数型, , 第几个项目(options)，1为第一项,2为第二个……

返回 (djucgd.写属性 (“selectedIndex”, 相减 (项目索引, 1)))



 ' 不属于任何一个程序集、类模块的函数：
