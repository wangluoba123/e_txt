 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 600
    高度 = 480
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “FreeBasic to NiceBasic(V1.01)         E-mail:cjdn@163.com”
    帮助文件名 = “”



.常量 WS_EX_LAYERED, "524288", , WS_EX_LAYERED = 0x80000


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库





.DLL命令 API_透明窗口, 逻辑型, "", "SetLayeredWindowAttributes", , 成功返回真，否则返回假
    .参数 hwnd, 整数型, , 透明窗体的句柄
    .参数 crKey, 整数型, , 颜色值
    .参数 bAlpha, 字节型, , 透明度，取值范围是[0,255]
    .参数 dwFlags, 整数型, , 透明方式：LWA_ALPHA(2)时，crKey参数无效，bAlpha参数有效 || LWA_COLORKEY(1)时，bAlpha参数有效而窗体中的所有颜色为crKey的地方将变为透明

.DLL命令 API_设置窗口信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 API_发送消息, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 文本型, , 具体取决于消息;

.窗口程序集 窗口程序集1, , , 

.程序集变量 集_文本行, 文本型, , "0", 
.程序集变量 集_中英文, 文本型, , "0", 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 test, 逻辑型, , , 

API_设置窗口信息 (取窗口句柄 (), -20, #WS_EX_LAYERED) ' 简单API实现窗口透明
赋值 (test, API_透明窗口 (取窗口句柄 (), 0, 230, 2))
.如果 (test)
    输出调试文本 (“窗口透明效果成功”)
.否则
    输出调试文本 (“窗口透明效果失败”)
.如果结束

赋值 (集_文本行, 分割文本 (到文本 (读入文件 (相加 (取运行目录 (), “\dict.txt”))), #换行符, ))
FB2NB ()


.子程序 __启动窗口_尺寸被改变, 空白型, , 
赋值 (., 相减 (_启动窗口., 20))
赋值 (., 相减 (_启动窗口., 20))
赋值 (., 相减 (_启动窗口., 300))


.子程序 _编辑框1_内容被改变, 空白型, , 
.如果真 (不等于 (., “”)) ' 容错代码：空不处理
    FB2NB ()
.如果真结束


.子程序 FB2NB, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 正则表达式, 彗星正则表达式类, , , 
.局部变量 私_英文, 文本型, , , 
.局部变量 私_中文, 文本型, , , 
.局部变量 私_总行数, 整数型, , , 
.局部变量 私_关键字数量, 整数型, , , 
.局部变量 待处理文本, 文本型, , , 

赋值 (待处理文本, .)
赋值 (私_总行数, 186.发送信息 (0, 0))
赋值 (私_关键字数量, 取数组成员数 (集_文本行))
.计次循环首 (私_关键字数量, i)
    .如果真 (不等于 (寻找文本 (集_文本行 [i], “|”, , 假), -1)) ' 容错代码：过滤掉没有|的文本行
        赋值 (集_中英文, 分割文本 (集_文本行 [i], “|”, ))
         ' 调试输出 (集_中英文)
        赋值 (私_英文, 集_中英文 [1])
        赋值 (私_中文, 集_中英文 [2])
        正则表达式.创建 (私_英文)
        赋值 (待处理文本, 正则表达式.替换 (待处理文本, 私_中文))
    .如果真结束
    赋值 (., 相加 (“提示：正在进行关键字 ”, 到文本 (i), “ 替换，请稍候。”))
    处理事件 ()
.计次循环尾 ()
赋值 (., 待处理文本)
赋值 (., 相加 (“提示：共有 ”, 到文本 (私_总行数), “ 行源代码，字典关键字 ”, 到文本 (私_关键字数量), “ 个。”))



.子程序 _编辑框1_获得焦点, 空白型, , 
赋值 (., -1)

.子程序 _编辑框2_获得焦点, 空白型, , 
赋值 (., -1)


.子程序 子程序1, 空白型, , 失败的方法
.局部变量 总行数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 首位置, 整数型, , , 
.局部变量 行长度, 整数型, , , 
.局部变量 行内容, 文本型, , , 

赋值 (总行数, 186.发送信息 (0, 0))
.计次循环首 (总行数, i)
    赋值 (首位置, 187.发送信息 (相减 (i, 1), 0)) ' 从0行开始
    赋值 (行长度, 193.发送信息 (首位置, 0)) ' 发送消息取得该行总长度
    .如果真 (等于 (行长度, 0))
        赋值 (行长度, 1)
    .如果真结束
    赋值 (行内容, 取空白文本 (行长度))
    API_发送消息 (取窗口句柄 (), 196, 相减 (i, 1), 行内容)
    输出调试文本 (相加 (“行号:”, 到文本 (相减 (i, 1)), “、行长度：”, 到文本 (行长度), 取空白文本 (8), 行内容))
    
    .计次循环首 (取数组成员数 (集_文本行), i)
         ' 输出调试文本 (集_文本行 [i])
        赋值 (集_中英文, 分割文本 (集_文本行 [i], “|”, ))
         ' 调试输出 (集_中英文)
        赋值 (., 相加 (., 子文本替换 (行内容, 集_中英文 [1], 集_中英文 [2], , , 假), #换行符))
    .计次循环尾 ()
.计次循环尾 ()


.类模块 彗星正则表达式类, , , 

.程序集变量 RegExp, 对象, , , 
.程序集变量 MatchCollection, 对象, , , 
.程序集变量 Match_Count, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
RegExp.清除 ()

.子程序 创建, 逻辑型, 公开, 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
.参数 正则表达式文本, 文本型, , 比如“易语言4\.0(模块|支持库)?”
.参数 忽略大小写, 逻辑型, 可空, 可以被省略。默认值为真。本参数指定这个正则表达式在创建成功后进行匹配、搜索、替换时，是否区分大小写。
.参数 匹配多行, 逻辑型, 可空, 可以被省略。默认值为真。如果本成员值为真，字符“^”不仅匹配目标文本的开头，而且匹配目标文本中换行符（字符(10)，字符(13)或 #换行符）的后面；字符“$”不仅匹配目标文本的结尾，而且匹配目标文本中换行符的前面。否则字符“^”仅仅匹配目标文本的开头，“$”也仅仅匹配目标文本的结尾。

RegExp.清除 ()
RegExp.创建 (“VBScript.RegExp”, )
.如果真 (RegExp.是否为空 ())
    输出调试文本 (“对象创建失败:VBScript.RegExp”)
    返回 (假)
.如果真结束
.如果真 (是否为空 (忽略大小写))
    赋值 (忽略大小写, 真)
.如果真结束
.如果真 (是否为空 (匹配多行))
    赋值 (匹配多行, 真)
.如果真结束
赋值 (Match_Count, 0)
RegExp.写属性 (“IgnoreCase”, 忽略大小写)
RegExp.写属性 (“Multiline”, 匹配多行)
RegExp.写属性 (“Global”, 真)
RegExp.写属性 (“Pattern”, 正则表达式文本)
返回 (真)

.子程序 取文本, 文本型, 公开, 返回以文本形式表示的正则表达式。如果该对象尚未创建，则返回空文本。本命令为高级对象成员命令。
.如果真 (RegExp.是否为空 ())
    返回 (“”)
.如果真结束
返回 (RegExp.读文本属性 (“Pattern”, ))

.子程序 替换, 文本型, 公开, 替换在正则表达式查找中找到的文本。
.参数 欲被替换的文本, 文本型, , 将要进行文本替换的字符串
.参数 用作替换的文本, 文本型, 可空, 用作替换的文本

返回 (RegExp.文本方法 (“Replace”, 欲被替换的文本, 用作替换的文本))

.子程序 搜索全部, 整数型, 公开, 使用指定的正则表达式搜索指定文本中与该表达式匹配的所有子文本。返回匹配结果数量
.参数 欲被搜索的文本, 文本型, , 

赋值 (MatchCollection, RegExp.对象型方法 (“Execute”, 欲被搜索的文本))
赋值 (Match_Count, MatchCollection.读数值属性 (“Count”, ))
返回 (Match_Count)

.子程序 取匹配数量, 整数型, 公开, 
返回 (Match_Count)

.子程序 取匹配文本, 文本型, 公开, 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始

.局部变量 Match, 对象, , , 
.局部变量 Value, 文本型, , , 

赋值 (Match, MatchCollection.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
赋值 (Value, Match.读文本属性 (“Value”, ))
返回 (Value)

.子程序 取子匹配文本, 文本型, 公开, 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始
.参数 子表达式索引, 整数型, , 欲取其值的子表达式。该参数对应与正则表达式中的一个子表达式（以圆括号标记）。索引从1开始。

.局部变量 Match, 对象, , , 
.局部变量 SubMatches, 对象, , , 
.局部变量 Ret, 变体型, , , 

赋值 (Match, MatchCollection.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
赋值 (SubMatches, Match.读对象型属性 (“SubMatches”, ))
赋值 (Ret, SubMatches.读属性 (“Item”, 相减 (子表达式索引, 1)))
返回 (Ret.取文本 ())


 ' 不属于任何一个程序集、类模块的函数：
