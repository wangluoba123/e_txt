 ' 文件类型：Windows模块源码

 ' 程序名称：枫则表达式
 ' 程序描述：　　枫则表达式是一款可扩展的表达式语法分析器，它支持运算符重载或更贴切的说应该是运算符自定义。主要应用于数学表达式的运算。
　　其中枫则表达式最大的亮点在于枫则表达式本身不负责数据的计算，而是由宿主函数进行运算的处理！你可以利用枫则表达式的这个特性，来定义和宿主软件相适应的运算法则，并完成各种表达式的运算。

       作者：流川枫 日期：2008.4.13  历时11天
 ' 程序作者：流川枫
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：日期：2008.4.13
 ' 版本号：2008.0
 ' 创建号：0.0



.图片 动态调用代码, " ' 已保存到：D:\易语言学习\Data\枫则表达式FZ08版模块.e\动态调用代码", , 
.常量 错误信号_法则未定义, "“#错误:运算法则未定义。”", 公开, 
.常量 错误信号_无效的运算符或缺少操作数, "“#错误:无效的运算符或缺少操作数。”", 公开, 
.常量 错误信号_缺少运算符, "“#错误:缺少运算符。”", 公开, 
.常量 错误信号_小数点用法错误, "“#错误:小数点用法错误。”", 公开, 
.常量 错误信号_缺少右括号, "“#错误:缺少右括号。”", 公开, 
.常量 错误信号_多余的右括号, "“#错误:多余的右括号。”", 公开, 
.常量 错误信号_缺少结尾文本操作符, "“#错误:缺少结尾文本操作符。”", 公开, 
.常量 错误信号_多余的文本操作符, "“#错误:多余的结尾文本操作符。”", 公开, 
.常量 , , , 
.常量 声明_运算错误, "“#”", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库




数据类型 运算法则, 公开, 枫则表达式专用的数据类型，用于定义枫则表达式的运算符和相应的宿主函数。
    .成员 子集, 子集数据, , "1", 子集内的每个元素具有相同的优先级，运算法则数组下标越小说明其子集内元素的优先级越高。

数据类型 子集数据, 公开, 
    .成员 运算符, 文本型, , , 在表达式中用来形式的表达功能的符号，最好不要包含数字，大小写等价，空格无效。
    .成员 函数指针, 子程序指针, , , 用来处理运算符对应的功能的宿主函数的指针。（双目运算符的函数有两个文本参数，第一个是被操作数，第二个则是操作数，单目运算符的函数有一个文本参数；返回运算结果的方法是调用模块中的 返回值() 函数，并传递结果。）


.DLL命令 动态调用子程序_API, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 一定要用本人编写的
    .参数 子程序, 子程序指针, , 子程序指针
    .参数 参数, 整数型, 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
    .参数 参数数目, 整数型, , 一定要和参数数组相符，不然会出错
    .参数 是否C调用, 逻辑型, , 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）

.DLL命令 取文本指针_API, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针的变量, 文本型, 传址, 
    .参数 欲取其指针的变量, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 双目, 运算法则, , "0", 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
取标准双目 (双目)
定义法则 (双目, 取标准左单目 ())
输出调试文本 (枫则表达式 (“--2.50 *（３ 8+６２  )”))

.程序集 枫则表达式程序集, , , 作者：流川枫 日期：2008.4.13  历时11天（这几天写写停停，时间主要是花在了维护代码和错误提示机制上。）

.程序集变量 集双目法则, 运算法则, , "0", 
.程序集变量 集左单目法则, 运算法则, , , 
.程序集变量 集右单目法则, 运算法则, , , 
.程序集变量 集表达式, 文本型, , , 
.程序集变量 集指针, 空白型, , , 
.程序集变量 集返回值, 文本型, , , 
.程序集变量 错误信号, 文本型, , , 
.程序集变量 嵌套右单目, 逻辑型, , , 
.程序集变量 函参, 空白型, , "0", 
.程序集变量 前一位置, 空白型, , , 
.子程序 定义法则, 空白型, 公开, 定义枫则表达式的运算符和对应的宿主函数，如果不预先定义法则就无法进行运算。
.参数 双目, 运算法则, 可空 数组, 形式为： 被操作数+双目运算符+操作数  例如： 6*2  将对6和2进行运算并返回结果。（如果不传递参数，则将直接引用内置的标准双目运算法则。）
.参数 左单目, 运算法则, 可空, 形式为： 左单目运算符+被操作数  例如： -8 将对8进行运算并返回结果。（如果不传递参数，则将直接引用内置的标准双目运算法则。）
.参数 右单目, 运算法则, 可空, 形式为： 被操作数+右单目运算符  例如： 8++ 将对8进行运算并返回结果。

.局部变量 _x, 空白型, , , 
.局部变量 _y, 空白型, , , 

.如果 (是否为空 (双目))
    取标准双目 (集双目法则)
.否则
    赋值 (集双目法则, 双目)
.如果结束
.如果 (是否为空 (左单目))
    赋值 (左单目, 取标准左单目 ())
.否则
    赋值 (集左单目法则, 左单目)
.如果结束
赋值 (集右单目法则, 右单目)
.计次循环首 (取数组成员数 (集双目法则), _y)
    .变量循环首 (取数组成员数 (集双目法则 [_y], 子集), 1, -1, _x)
        赋值 (集双目法则 [_y], 子集 [_x], 运算符, 到大写 (子文本替换 (集双目法则 [_y], 子集 [_x], 运算符, “ ”, “”, , , 假)))
        .如果真 (等于 (集双目法则 [_y], 子集 [_x], 运算符, “”))
            删除成员 (集双目法则 [_y], 子集, _x, )
        .如果真结束
        
    .变量循环尾 ()
.计次循环尾 ()
.变量循环首 (取数组成员数 (集左单目法则.子集), 1, -1, _x)
    赋值 (集左单目法则.子集 [_x], 运算符, 到大写 (子文本替换 (集左单目法则.子集 [_x], 运算符, “ ”, “”, , , 假)))
    .如果真 (等于 (集左单目法则.子集 [_x], 运算符, “”))
        删除成员 (集左单目法则.子集, _x, )
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (取数组成员数 (集右单目法则.子集), 1, -1, _x)
    赋值 (集右单目法则.子集 [_x], 运算符, 到大写 (子文本替换 (集右单目法则.子集 [_x], 运算符, “ ”, “”, , , 假)))
    .如果真 (等于 (集右单目法则.子集 [_x], 运算符, “”))
        删除成员 (集右单目法则.子集, _x, )
    .如果真结束
    
.变量循环尾 ()

.子程序 枫则表达式, 文本型, 公开, 运算表达式并返回运算结果，必须要预先定义运算法则才能进行运算。
.参数 表达式, 文本型, , 需要运算的表达式。（注意：表达式中除被文本操作符包裹的文本外，其它地方的空格都将在预处理时被清除。）
.参数 不自动格式化, 逻辑型, 可空, 是否自动对表达式进行格式化，如果有把握保证表达式是标准的，就可以传递真。

.局部变量 结果, 文本型, , , 

.如果真 (等于 (取数组成员数 (集双目法则), 0))
    返回 (#错误信号_法则未定义)
.如果真结束
.如果 (不自动格式化)
    赋值 (集表达式, 表达式)
.否则
    赋值 (集表达式, 格式化表达式 (表达式))
.如果结束
.如果真 (等于 (集表达式, “”))
    返回 (“”)
.如果真结束
赋值 (集指针, 1)
赋值 (错误信号, “”)
赋值 (结果, 分级运算 (取数组成员数 (集双目法则)))
赋值 (前一位置, 集指针)
.如果真 (等于 (错误信号, “”))
    .判断开始 (大于 (集指针, 取文本长度 (集表达式)))
        赋值 (集指针, -1)
        返回 (结果)
    .判断 (等于 (检测括号 (取文本中间 (集表达式, 集指针, 1)), 假))
        取操作数 ()
        .如果真 (等于 (错误信号, “”))
            赋值 (错误信号, #错误信号_缺少运算符)
        .如果真结束
        
    .默认
        
    .判断结束
    
.如果真结束
赋值 (集指针, 前一位置)
返回 (错误信号)

.子程序 分级运算, 文本型, , 
.参数 优先级, 空白型, , 

.局部变量 被操作数, 文本型, , , 
.局部变量 操作数, 文本型, , , 
.局部变量 零食, 空白型, , , 
.局部变量 函数, 空白型, , , 

.如果 (小于 (优先级, 1))
    赋值 (优先级, 1)
    赋值 (被操作数, 取操作数 ())
.否则
    赋值 (被操作数, 分级运算 (相减 (优先级, 1)))
.如果结束
.如果真 (不等于 (错误信号, “”))
    返回 (被操作数)
.如果真结束
.循环判断首 ()
    赋值 (函数, 0)
    .计次循环首 (取数组成员数 (集双目法则 [优先级], 子集), 零食)
        .如果真 (等于 (集双目法则 [优先级], 子集 [零食], 运算符, 取文本中间 (集表达式, 集指针, 取文本长度 (集双目法则 [优先级], 子集 [零食], 运算符))))
            赋值 (函数, 零食)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (大于 (函数, 0))
        赋值 (零食, 集指针)
        赋值 (集指针, 相加 (集指针, 取文本长度 (集双目法则 [优先级], 子集 [函数], 运算符)))
        .如果 (大于 (优先级, 取数组成员数 (集双目法则)))
            赋值 (操作数, 取操作数 ())
        .否则
            赋值 (操作数, 分级运算 (相减 (优先级, 1)))
        .如果结束
        .如果真 (不等于 (错误信号, “”))
            返回 (“”)
        .如果真结束
        重定义数组 (函参, 假, 2)
        赋值 (函参 [1], 取文本指针_API (被操作数, 被操作数, 0))
        赋值 (函参 [2], 取文本指针_API (操作数, 操作数, 0))
        赋值 (前一位置, 零食)
        动态调用子程序_API (#动态调用代码, 集双目法则 [优先级], 子集 [函数], 函数指针, 函参, 2, 假)
        .如果 (等于 (错误信号, “”))
            赋值 (被操作数, 集返回值)
        .否则
            返回 (“”)
        .如果结束
        
    .如果真结束
    
.循环判断尾 (大于 (函数, 0))
返回 (被操作数)

.子程序 取操作数, 文本型, , 
.局部变量 被操作数, 文本型, , , 
.局部变量 零食, 空白型, , , 
.局部变量 长度, 空白型, , , 
.局部变量 标志, 逻辑型, , , 
.局部变量 函数, 空白型, , , 
.局部变量 括号, 文本型, , , 

赋值 (括号, 取文本中间 (集表达式, 集指针, 1))
.如果真 (或者 (等于 (括号, “(”), 等于 (括号, “[”)))
    赋值 (集指针, 相加 (集指针, 1))
    赋值 (被操作数, 分级运算 (取数组成员数 (集双目法则)))
    .如果真 (不等于 (错误信号, “”))
        返回 (“”)
    .如果真结束
    .如果 (等于 (括号, “(”))
        赋值 (括号, “)”)
    .否则
        赋值 (括号, 字符 (相加 (取代码 (括号, ), 2)))
    .如果结束
    .如果真 (不等于 (取文本中间 (集表达式, 集指针, 1), 括号))
        .判断开始 (大于 (集指针, 取文本长度 (集表达式)))
            赋值 (错误信号, #错误信号_缺少右括号)
        .判断 (等于 (检测括号 (取文本中间 (集表达式, 集指针, 1)), 假))
            赋值 (零食, 集指针)
            取操作数 ()
            赋值 (集指针, 零食)
            .如果 (不等于 (错误信号, “”))
                赋值 (错误信号, #错误信号_无效的运算符或缺少操作数)
            .否则
                赋值 (错误信号, #错误信号_缺少运算符)
            .如果结束
            
        .默认
            
        .判断结束
        返回 (“”)
    .如果真结束
    赋值 (集指针, 相加 (集指针, 1))
    .循环判断首 ()
        赋值 (函数, 0)
        .计次循环首 (取数组成员数 (集右单目法则.子集), 零食)
            .如果真 (等于 (集右单目法则.子集 [零食], 运算符, 取文本中间 (集表达式, 集指针, 取文本长度 (集右单目法则.子集 [零食], 运算符))))
                赋值 (函数, 零食)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果 (大于 (函数, 0))
            赋值 (前一位置, 集指针)
            赋值 (集指针, 相加 (集指针, 取文本长度 (集右单目法则.子集 [函数], 运算符)))
            重定义数组 (函参, 假, 1)
            赋值 (函参 [1], 取文本指针_API (被操作数, 被操作数, 0))
            动态调用子程序_API (#动态调用代码, 集右单目法则.子集 [函数], 函数指针, 函参, 1, 假)
            .如果 (等于 (错误信号, “”))
                赋值 (被操作数, 集返回值)
            .否则
                返回 (“”)
            .如果结束
            
        .否则
            跳出循环 ()
        .如果结束
        
    .循环判断尾 (嵌套右单目)
    返回 (被操作数)
.如果真结束
.计次循环首 (取数组成员数 (集左单目法则.子集), 零食)
    .如果真 (等于 (集左单目法则.子集 [零食], 运算符, 取文本中间 (集表达式, 集指针, 取文本长度 (集左单目法则.子集 [零食], 运算符))))
        赋值 (函数, 零食)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果 (大于 (函数, 0))
    赋值 (前一位置, 集指针)
    赋值 (集指针, 相加 (集指针, 取文本长度 (集左单目法则.子集 [函数], 运算符)))
    赋值 (被操作数, 取操作数 ())
    .如果真 (不等于 (错误信号, “”))
        返回 (“”)
    .如果真结束
    重定义数组 (函参, 假, 1)
    赋值 (函参 [1], 取文本指针_API (被操作数, 被操作数, 0))
    动态调用子程序_API (#动态调用代码, 集左单目法则.子集 [函数], 函数指针, 函参, 1, 假)
    .如果 (等于 (错误信号, “”))
        返回 (集返回值)
    .否则
        返回 (“”)
    .如果结束
    
.否则
    .如果 (等于 (取文本中间 (集表达式, 集指针, 1), “{”))
        赋值 (零食, 寻找文本 (集表达式, “}”, 相加 (集指针, 1), 假))
        .如果 (等于 (零食, -1))
            赋值 (错误信号, #错误信号_缺少结尾文本操作符)
            返回 (“”)
        .否则
            赋值 (长度, 相加 (相减 (零食, 集指针), 1))
        .如果结束
        
    .否则
        .循环判断首 ()
            赋值 (零食, 取代码 (取文本中间 (集表达式, 相加 (集指针, 长度), 1), ))
            .判断开始 (并且 (大于 (零食, 47), 小于 (零食, 58)))
                赋值 (长度, 相加 (长度, 1))
            .判断 (等于 (零食, 46))
                赋值 (零食, 取代码 (取文本中间 (集表达式, 相加 (集指针, 长度, 1), 1), ))
                .如果 (并且 (大于 (长度, 0), 等于 (标志, 假), 大于 (零食, 47), 小于 (零食, 58)))
                    赋值 (长度, 相加 (长度, 1))
                    赋值 (标志, 真)
                .否则
                    赋值 (集指针, 相加 (集指针, 长度))
                    赋值 (错误信号, #错误信号_小数点用法错误)
                    返回 (“”)
                .如果结束
                
            .默认
                跳出循环 ()
            .判断结束
            
        .循环判断尾 (大于 (长度, 0))
    .如果结束
    .如果 (大于 (长度, 0))
        赋值 (零食, 集指针)
        赋值 (集指针, 相加 (集指针, 长度))
        赋值 (被操作数, 取文本中间 (集表达式, 零食, 长度))
        .循环判断首 ()
            赋值 (函数, 0)
            .计次循环首 (取数组成员数 (集右单目法则.子集), 零食)
                .如果真 (等于 (集右单目法则.子集 [零食], 运算符, 取文本中间 (集表达式, 集指针, 取文本长度 (集右单目法则.子集 [零食], 运算符))))
                    赋值 (函数, 零食)
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果 (大于 (函数, 0))
                赋值 (前一位置, 集指针)
                赋值 (集指针, 相加 (集指针, 取文本长度 (集右单目法则.子集 [函数], 运算符)))
                重定义数组 (函参, 假, 1)
                赋值 (函参 [1], 取文本指针_API (被操作数, 被操作数, 0))
                动态调用子程序_API (#动态调用代码, 集右单目法则.子集 [函数], 函数指针, 函参, 1, 假)
                .如果 (等于 (错误信号, “”))
                    赋值 (被操作数, 集返回值)
                .否则
                    返回 (“”)
                .如果结束
                
            .否则
                跳出循环 ()
            .如果结束
            
        .循环判断尾 (嵌套右单目)
        返回 (被操作数)
    .否则
        赋值 (错误信号, #错误信号_无效的运算符或缺少操作数)
        返回 (“”)
    .如果结束
    
.如果结束


.子程序 检测括号, 逻辑型, , 
.参数 符号, 文本型, , 

.判断开始 (或者 (等于 (符号, “)”), 等于 (符号, “]”)))
    赋值 (错误信号, #错误信号_多余的右括号)
.判断 (或者 (等于 (符号, “(”), 等于 (符号, “[”), 等于 (符号, “{”)))
    赋值 (错误信号, #错误信号_缺少运算符)
.判断 (等于 (符号, “}”))
    赋值 (错误信号, #错误信号_多余的文本操作符)
.默认
    返回 (假)
.判断结束
返回 (真)

.子程序 返回值, 空白型, 公开, 在宿主函数最后，用来返回运算结果。
.参数 结果, 文本型, , 

赋值 (集返回值, 结果)

.子程序 异常处理, 空白型, 公开, 当宿主函数处理数据时发生异常，就需要调用本函数来提交具体的错误报告，并立即终止运算。
.参数 错误报告, 文本型, , 

赋值 (错误信号, 错误报告)

.子程序 置当前运算位置, 空白型, 公开, 设置当前运算指针的位置，通常是在异常处理的时候使用。
.参数 位置, 空白型, , 

赋值 (集指针, 位置)

.子程序 取当前运算位置, 整数型, 公开, 返回当前表达式的运算位置，当值为0时代表未计算过任何表达式，当值为-1时代表表达式运算正确，否则表示表达式正在运算途中或运算错误。
返回 (集指针)

.子程序 取运算前位置, 整数型, 公开, 返回当前运算符运算前的位置。
返回 (前一位置)

.子程序 取当前表达式, 文本型, 公开, 返回当前的表达式，用于在宿主函数运算异常时，生成具体的错误报告。
返回 (集表达式)

.子程序 右单目嵌套, 空白型, 公开, 设定右单目运算符是否支持多层嵌套，默认为不支持。
.参数 是否支持, 逻辑型, 可空, 

赋值 (嵌套右单目, 是否支持)

.子程序 格式化表达式, 文本型, 公开, 将表达式中除被文本操作符包裹的文本外，其它所有的字符都将过滤掉空格，并到半角、小写（可选）。
.参数 表达式, 文本型, , 需要格式化的表达式。
.参数 大小写转换, 整数型, 可空, 本参数指定大小写的转换方式：0代表到大写，1代表到小写，否则不做大小写处理，默认为0到大写。

.局部变量 零食, 文本型, , , 
.局部变量 指针, 空白型, , , 
.局部变量 起始, 空白型, , , 
.局部变量 位置, 空白型, , , 

赋值 (指针, 1)
.循环判断首 ()
    赋值 (起始, 寻找文本 (表达式, “{”, 指针, 假))
    赋值 (位置, 寻找文本 (表达式, “｛”, 指针, 假))
    .如果真 (并且 (不等于 (位置, -1), 等于 (或者 (小于 (位置, 起始), 等于 (起始, -1)), 真)))
        赋值 (起始, 相加 (位置, 1))
    .如果真结束
    .如果 (不等于 (起始, -1))
        赋值 (零食, 取文本中间 (表达式, 指针, 相减 (起始, 指针)))
        赋值 (零食, 到半角 (子文本替换 (零食, “ ”, “”, , , 假)))
        .判断开始 (等于 (大小写转换, 0))
            赋值 (零食, 到大写 (零食))
        .判断 (等于 (大小写转换, 1))
            赋值 (零食, 到小写 (零食))
        .默认
            
        .判断结束
        赋值 (位置, 相加 (指针, 取文本长度 (零食)))
        赋值 (表达式, 相加 (取文本左边 (表达式, 相减 (指针, 1)), 零食, “{”, 取文本右边 (表达式, 相减 (取文本长度 (表达式), 起始))))
        赋值 (起始, 寻找文本 (表达式, “}”, 位置, 假))
        赋值 (位置, 寻找文本 (表达式, “｝”, 位置, 假))
        .判断开始 (并且 (不等于 (位置, -1), 等于 (或者 (小于 (位置, 起始), 等于 (起始, -1)), 真)))
            赋值 (表达式, 文本替换 (表达式, 位置, 2, “}”))
            赋值 (指针, 相加 (位置, 1))
        .判断 (不等于 (起始, -1))
            赋值 (指针, 相加 (起始, 1))
        .默认
            跳出循环 ()
        .判断结束
        
    .否则
        赋值 (零食, 取文本中间 (表达式, 指针, 相加 (相减 (取文本长度 (表达式), 指针), 1)))
        赋值 (零食, 到半角 (子文本替换 (零食, “ ”, “”, , , 假)))
        .判断开始 (等于 (大小写转换, 0))
            赋值 (零食, 到大写 (零食))
        .判断 (等于 (大小写转换, 1))
            赋值 (零食, 到小写 (零食))
        .默认
            
        .判断结束
        赋值 (表达式, 相加 (取文本左边 (表达式, 相减 (指针, 1)), 零食))
        赋值 (指针, -1)
    .如果结束
    
.循环判断尾 (不等于 (指针, -1))
返回 (表达式)

.子程序 取字数, 整数型, 公开, 返回一段文本中的字数，包括空格。
.参数 文本, 文本型, , 

.局部变量 指针, 空白型, , , 
.局部变量 长度, 空白型, , , 
.局部变量 代码, 空白型, , , 
.局部变量 字数, 空白型, , , 

赋值 (长度, 取文本长度 (文本))
赋值 (指针, 1)
.判断循环首 (小于或等于 (指针, 长度))
    赋值 (代码, 取代码 (取文本中间 (文本, 指针, 1), ))
    .如果 (或者 (小于 (代码, -1), 大于 (代码, 127)))
        赋值 (指针, 相加 (指针, 2))
    .否则
        赋值 (指针, 相加 (指针, 1))
    .如果结束
    赋值 (字数, 相加 (字数, 1))
.判断循环尾 ()
返回 (字数)

.程序集 标准双目库, , , 

.子程序 取标准双目, 空白型, 公开, 默认提供的一套运算法则，可以适用于大多数的软件需要。（标准运算符：“^” 次方，“*” 乘号，“/” 除号，“\” 整除，“%” 求余，“+” 加号。“-” 减号）
.参数 法则, 运算法则, 参考 数组, 

.局部变量 运算法则, 运算法则, , "5", 

重定义数组 (运算法则 [1].子集, 假, 1)
赋值 (运算法则 [1].子集 [1].运算符, “^”)
赋值 (运算法则 [1].子集 [1].函数指针, &次方_)
重定义数组 (运算法则 [2].子集, 假, 2)
赋值 (运算法则 [2].子集 [1].运算符, “*”)
赋值 (运算法则 [2].子集 [1].函数指针, &乘_)
赋值 (运算法则 [2].子集 [2].运算符, “/”)
赋值 (运算法则 [2].子集 [2].函数指针, &除_)
重定义数组 (运算法则 [3].子集, 假, 1)
赋值 (运算法则 [3].子集 [1].运算符, “\”)
赋值 (运算法则 [3].子集 [1].函数指针, &整除_)
重定义数组 (运算法则 [4].子集, 假, 1)
赋值 (运算法则 [4].子集 [1].运算符, “%”)
赋值 (运算法则 [4].子集 [1].函数指针, &求余_)
重定义数组 (运算法则 [5].子集, 假, 2)
赋值 (运算法则 [5].子集 [1].运算符, “+”)
赋值 (运算法则 [5].子集 [1].函数指针, &加_)
赋值 (运算法则 [5].子集 [2].运算符, “-”)
赋值 (运算法则 [5].子集 [2].函数指针, &减_)
赋值 (法则, 运算法则)

.子程序 次方_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:求次方运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (求次方 (到数值 (被操作数), 到整数 (操作数))))
.判断结束


.子程序 整除_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:整除运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:整除运算的除数不能为0。”)
.默认
    返回值 (到文本 (整除 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 求余_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:求余运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:求余运算的除数不能为0。”)
.默认
    返回值 (到文本 (求余数 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 加_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:加法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相加 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 减_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:减法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相减 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 乘_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:乘法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相乘 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 除_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:除法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:除法运算的除数不能为0。”)
.默认
    返回值 (到文本 (相除 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.程序集 标准单目库, , , 

.子程序 取标准左单目, 运算法则, 公开, 默认提供的一套运算法则，可以适用于大多数的软件需要。（标准运算符：“+” 正号，“-” 负号）
.局部变量 运算法则, 运算法则, , , 

重定义数组 (运算法则.子集, 假, 2)
赋值 (运算法则.子集 [1].运算符, “-”)
赋值 (运算法则.子集 [1].函数指针, &负)
赋值 (运算法则.子集 [2].运算符, “+”)
赋值 (运算法则.子集 [2].函数指针, &正)
返回 (运算法则)

.子程序 负, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    异常处理 (“#错误:负运算的被操作数必须为数值。”)
.默认
    返回值 (到文本 (负 (到数值 (被操作数))))
.判断结束


.子程序 正, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    异常处理 (“#错误:正运算的被操作数必须为数值。”)
.默认
    返回值 (被操作数)
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
