 ' 文件类型：Windows模块源码

 ' 程序名称：任务管理模块
 ' 程序描述：1、注册AltTab热键（）注册当前窗口为响应按键事件处理。
2、窗口消毁时用 注销AltTab热键来 注销热键,返回0代表调用失败，
3、可以用低勾子，可通过HOOK调用 "任务切换ALTTAB_HOOK键处理子程序" 来响应事件。
4、置停留模式（）即为松开ALT键后窗口不会消失了。 默认为真，停留模式，假为非停留模式
界面仿:TaskSwitchXP
@备注:
任务管理模块
 ' 程序作者：llafei
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _任务管理
    左边 = 50
    顶边 = 50
    宽度 = 612
    高度 = 380
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 真
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 测试窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.图片 外形图, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\外形图", , 
.图片 按钮_UP_T, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_UP_T", , 
.图片 按钮_UP_Over, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_UP_Over", , 
.图片 按钮_UP_No, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_UP_No", , 
.图片 , , , 
.图片 按钮_DOWN_T, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_DOWN_T", , 
.图片 按钮_DOWN_Over, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_DOWN_Over", , 
.图片 按钮_DOWN_No, " ' 已保存到：D:\易语言学习\Data\任务切换管理.e\按钮_DOWN_No", , 
.图片 , , , 
.常量 GCL_HICON, "-14", , 图标
.常量 GCL_HICONSM, "-34", , 小图标
.常量 WM_GETICON, "127", , #define WM_GETICON                      0x007F
.常量 ICON_SMALL, "0", , #define ICON_SMALL          0
.常量 ICON_BIG, "1", , #define ICON_BIG            1
.常量 , , , 
.常量 SB_HORZ, "0", , 滚动条 横#define SB_HORZ             0
.常量 SB_VERT, "1", , 滚动条 纵 #define SB_VERT             1
.常量 SB_BOTH, "3", , 滚动条 所有#define SB_BOTH             3
.常量 , , , 
.常量 GWL_WNDPROC, "-4", , 
.常量 WM_HOTKEY, "786", , 
.常量 WM_KEYDOWN, "256", , WM_KEYDOWN                      0x0100
.常量 WM_KEYUP, "257", , WM_KEYUP                        0x0101
.常量 WM_SYSKEYDOWN, "260", , WM_SYSKEYDOWN                   0x0104
.常量 WM_SYSKEYUP, "261", , WM_SYSKEYUP                     0x0105
.常量 WM_KEY_EV, "295", , 
.常量 , , , 
.常量 MOD_ALT, "1", , Alt Key
.常量 MOD_CONTROL, "2", , Control(Ctrl) Key
.常量 MOD_SHIFT, "4", , Shift Key
.常量 VK_TAB, "9", , 
.常量 VK_ALT, "12", , VK_MENU VK_MENU           0x12
.常量 VK_MENU, "12", , 
.常量 VK_LMENU, "164", , 
.常量 VK_RMENU, "165", , 
.常量 VK_LALT, "164", , VK_LMENU          0xA4
.常量 VK_RALT, "165", , VK_RMENU          0xA5
.常量 , , , 
.常量 , , , 
.常量 备份, "“SeBackupPrivilege”", 隐藏, 
.常量 启动, "“SeRestorePrivilege”", 隐藏, 
.常量 关机, "“SeShutdownPrivilege”", 隐藏, 
.常量 调试, "“SeDebugPrivilege”", 隐藏, 
.常量 WS_ACTIVECAPTION, "1", 隐藏, 窗口是否窗活  VC #define WS_ACTIVECAPTION    0x0001
.常量 SW_HIDE, "0", 隐藏, #define SW_HIDE             0
.常量 SW_SHOWNORMAL, "1", 隐藏, #define SW_SHOWNORMAL       1
.常量 SW_NORMAL, "1", 隐藏, #define SW_NORMAL           1
.常量 SW_SHOWMINIMIZED, "2", 隐藏, #define SW_SHOWMINIMIZED    2
.常量 SW_SHOWMAXIMIZED, "3", 隐藏, #define SW_SHOWMAXIMIZED    3
.常量 SW_MAXIMIZE, "3", 隐藏, #define SW_MAXIMIZE         3
.常量 SW_SHOWNOACTIVATE, "4", 隐藏, #define SW_SHOWNOACTIVATE   4
.常量 SW_SHOW, "5", 隐藏, #define SW_SHOW             5
.常量 SW_MINIMIZE, "6", 隐藏, #define SW_MINIMIZE         6
.常量 SW_SHOWMINNOACTIVE, "7", 隐藏, #define SW_SHOWMINNOACTIVE  7
.常量 SW_SHOWNA, "8", 隐藏, #define SW_SHOWNA           8
.常量 SW_RESTORE, "9", 隐藏, #define SW_RESTORE          9
.常量 SW_SHOWDEFAULT, "10", 隐藏, #define SW_SHOWDEFAULT      10
.常量 SW_FORCEMINIMIZE, "11", 隐藏, #define SW_FORCEMINIMIZE    11
.常量 SW_MAX, "11", 隐藏, #define SW_MAX              11


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 3 0 扩展功能支持库一



 ' 所需要的模块
 ' 进程管理 E:\娱美\软件\E_F\模块\进程管理.ec


数据类型 BITMAP, , 
    .成员 bmType, 空白型, , , 
    .成员 bmWidth, 空白型, , , 
    .成员 bmHeight, 空白型, , , 
    .成员 bmWidthBytes, 空白型, , , 
    .成员 bmPlanes, 短整数型, , , 
    .成员 bmBitsPixel, 短整数型, , , 
    .成员 bmBits, 空白型, 传址, , 

数据类型 BITMAPINFO, , 
    .成员 BITMAPINFOHEADER, BITMAPINFOHEADER, , , 
    .成员 bmiColors, 空白型, , , RGBQUAD          bmiColors[1]; 

数据类型 BITMAPINFOHEADER, , 
    .成员 biSize, 空白型, , , 
    .成员 biWidth, 空白型, , , 
    .成员 biHeight, 空白型, , , 
    .成员 biPlanes, 短整数型, , , 
    .成员 biBitCount, 短整数型, , , 
    .成员 biCompression, 空白型, , , 
    .成员 biSizeImage, 空白型, , , 
    .成员 biXPelsPerMeter, 空白型, , , 
    .成员 biYPelsPerMeter, 空白型, , , 
    .成员 biClrUsed, 空白型, , , 
    .成员 biClrImportant, 空白型, , , 

数据类型 BITMAPFILEHEADER, , 
    .成员 bfType, 短整数型, , , 
    .成员 bfSize, 空白型, , , 
    .成员 bfReserved1, 短整数型, , , 
    .成员 bfReserved2, 短整数型, , , 
    .成员 bfOffBits, 空白型, , , 

数据类型 RECT, , 
    .成员 left, 整数型, , , 
    .成员 top, 整数型, , , 
    .成员 right, 整数型, , , 
    .成员 bottom, 整数型, , , 

数据类型 HOT_MSG, , 
    .成员 控制键, 短整数型, , , 
    .成员 键值, 短整数型, , , 

数据类型 进程详细信息, 公开, 
    .成员 进程标识符ID, 整数型, , , 即进程号ID
    .成员 进程句柄ID, 整数型, , , 
    .成员 进程名称, 文本型, , , 
    .成员 线程优先权, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 父进程标识符, 整数型, , , 
    .成员 进程模块标识符, 整数型, , , 
    .成员 进程模块全路径, 文本型, , , 
    .成员 进程主窗口句柄, 整数型, , , 
    .成员 进程主窗口标题, 文本型, , , 

数据类型 窗口信息, 公开, 
    .成员 窗口句柄, 整数型, , , 
    .成员 窗口标题, 文本型, , , 
    .成员 所属进程, 整数型, , , 进程标识符
    .成员 所在线程, 整数型, , , 线程标识

数据类型 程序信息, 公开, 
    .成员 程序类型, 文本型, , , 1:聊天,2:浏览器,3:驱动,4:视频,5:编程开发,6:压缩刻录,7:系统工具,8:安全杀毒,9:音乐,10,图形图像,11:翻译,12:文字处理,13:系统程序,14其它
    .成员 键值句柄, 整数型, , ,  键值句柄，于用直接访问注册表
    .成员 程序显示名, 文本型, , , DisplayName
    .成员 程序文件名, 文本型, , , 
    .成员 安装日期, 文本型, , , InstallDate
    .成员 安装路径, 文本型, , , InstallLocation
    .成员 安装源, 文本型, , , InstallSource
    .成员 版本号, 文本型, , , DisplayVersion
    .成员 出版厂商, 文本型, , , Publisher
    .成员 反删除命令, 文本型, , , UninstallString
    .成员 反删除图标路径, 文本型, , , DisplayIcon
    .成员 键映射文件, 文本型, , , 
    .成员 是否映射, 文本型, , , 

数据类型 WINDOWINFO, 公开, 窗口信息
    .成员 cbSize, 整数型, , , 4结构体大小 合 60
    .成员 rcWindow, 未知类型0x4101092B, , , 16窗口结构体
    .成员 rcClient, 未知类型0x4101092B, , , 16
    .成员 dwStyle, 整数型, , , 4
    .成员 dwExStyle, 整数型, , , 4
    .成员 dwWindowStatus, 整数型, , , 4
    .成员 cxWindowBorders, 整数型, , , 4
    .成员 cyWindowBorders, 整数型, , , 4
    .成员 atomWindowType, 短整数型, , , 2短整
    .成员 wCreatorVersion, 短整数型, , , 2短整

数据类型 WINDOWPLACEMENT, 公开, 
    .成员 length, 整数型, , , 4
    .成员 flags, 整数型, , , 4
    .成员 showCmd, 整数型, , , 4
    .成员 ptMinPosition, 未知类型0x4101092C, , , 8
    .成员 ptMaxPosition, 未知类型0x4101092C, , , 8
    .成员 rcNormalPosition, 未知类型0x4101092B, , , 16

.全局变量 全_任务管理窗口是否载入, 逻辑型, , , 
.全局变量 全_任务管理窗口句柄, 整数型, , , 
.全局变量 全_任务管理ALT状态, 整数型, , , 
.全局变量 全_任务管理TAB连按次数, 整数型, , , 
.全局变量 全_现行选取中项, 整数型, , , 
.全局变量 全_销毁子程序, 子程序指针, , , 
.全局变量 全_载入子程序, 子程序指针, , , 
.全局变量 全_载入子程序_参数, 整数型, , , 
.全局变量 全_销毁子程序_参数, 整数型, , , 
.全局变量 全_载入后AltTab事件子程序, 子程序指针, , , 
.全局变量 全_载入后AltTab事件子程序_参数, 整数型, , , 
.全局变量 全_窗口停留模式, 逻辑型, , , 

.DLL命令 API_GetClassLong, 整数型, "", "GetClassLongA", , 取类的句柄,本次用来取图标的了。。。
    .参数 hWnd, 整数型, , 窗口句柄
    .参数 nIndex, 整数型, , 取什么东东。。

.DLL命令 API_SendMessage, 整数型, "", "SendMessageA", , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 API_GetWindowText, 整数型, "", "GetWindowText", , 
    .参数 hWnd, 整数型, , 
    .参数 lpString, 整数型, , 变量数据地址
    .参数 nMaxCount, 整数型, , 

.DLL命令 API_GetWindowDC, 整数型, "", "GetWindowDC", , 
    .参数 hWnd, 整数型, , 

.DLL命令 API_GetObjectA, 整数型, "", "GetObjectA", , 
    .参数 hgdiobj, 空白型, , 
    .参数 cbBuffer, 空白型, , 
    .参数 lpvObject, BITMAP, , 

.DLL命令 API_CreateCompatibleDC, 整数型, "", "CreateCompatibleDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 API_GetDIBits_BimapInfo, 整数型, "", "GetDIBits", , 
    .参数 HDC, 空白型, , 
    .参数 hBitmap, 空白型, , 
    .参数 nStartScan, 空白型, , 
    .参数 nNumScans, 空白型, , 
    .参数 lpBits, 空白型, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 空白型, , 

.DLL命令 API_GetDIBits, 整数型, "", "GetDIBits", , 
    .参数 HDC, 空白型, , 
    .参数 hBitmap, 空白型, , 
    .参数 nStartScan, 空白型, , 
    .参数 nNumScans, 空白型, , 
    .参数 lpBits, 字节集, , 
    .参数 lpBI, BITMAPINFO, , 
    .参数 wUsage, 空白型, , 

.DLL命令 API_CopyMemory_BITMAPINFO, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPINFO, , 
    .参数 Length, 空白型, , 

.DLL命令 API_CopyMemory_BITMAPFILEHEADER, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, BITMAPFILEHEADER, , 
    .参数 Length, 整数型, , 

.DLL命令 API_DeleteDC, 整数型, "", "DeleteDC", , 
    .参数 hdc, 整数型, , 

.DLL命令 API_IsWindow, 逻辑型, "", "IsWindow", , 
    .参数 hWnd, 整数型, , 

.DLL命令 API_SelectObject, 整数型, "", "SelectObject", , 
    .参数 hdc, 整数型, , 
    .参数 hgdiobj, 整数型, , 

.DLL命令 API_PrintWindow, 逻辑型, "", "PrintWindow", , 
    .参数 hwnd, 整数型, , 
    .参数 hdcBlt, 整数型, , 
    .参数 nFlags, 整数型, , 

.DLL命令 API_CreateCompatibleBitmap, 整数型, "", "CreateCompatibleBitmap", , 
    .参数 hdc, 整数型, , 
    .参数 nWidth, 整数型, , 
    .参数 nHeight, 整数型, , 

.DLL命令 API_DeleteObject, 逻辑型, "", "DeleteObject", , 
    .参数 hObject, 整数型, , 

.DLL命令 API_GetDC, 整数型, "", "GetDC", , 
    .参数 hWnd, 整数型, , 

.DLL命令 API_ReleaseDC, 整数型, "", "ReleaseDC", , 
    .参数 hWnd, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 API_EnumWindows, 逻辑型, "", "", , 
    .参数 lpEnumFunc, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 API_IsWindowVisible, 逻辑型, "", "IsWindowVisible", , 
    .参数 hWnd, 整数型, , 

.DLL命令 API_GetWindowTextLengthA, 整数型, "", "GetWindowTextLengthA", , 
    .参数 hWnd, 整数型, , 

.DLL命令 API_GetWindowTextA, 整数型, "", "GetWindowTextA", , 
    .参数 hWnd, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 ImageList_Create, 整数型, "comctl32.dll", "ImageList_Create", , 取文件图标
    .参数 cx, 空白型, , 
    .参数 cy, 空白型, , 
    .参数 flags, 空白型, , 
    .参数 cInitial, 空白型, , 
    .参数 cGrow, 空白型, , 

.DLL命令 ImageList_AddIcon, 整数型, "comctl32.dll", "ImageList_AddIcon", , 取文件图标
    .参数 himl, 空白型, , 
    .参数 hicon, 空白型, , 

.DLL命令 ImageList_SetBkColor, 整数型, "comctl32.dll", "ImageList_SetBkColor", , 取文件图标
    .参数 himl, 整数型, , 
    .参数 clrBk, 整数型, , 

.DLL命令 ImageList_SetImageCount, 整数型, "comctl32.dll", "ImageList_SetImageCount", , 取文件图标
    .参数 himl, 整数型, , 
    .参数 uNewCount, 整数型, , 

.DLL命令 ImageList_ReplaceIcon, 整数型, "comctl32.dll", "ImageList_ReplaceIcon", , 取文件图标
    .参数 himl, 整数型, , 
    .参数 i, 整数型, , 
    .参数 hicon, 整数型, , 

.DLL命令 ImageList_Remove, 整数型, "comctl32.dll", "ImageList_Remove", , 取文件图标
    .参数 himl, 整数型, , 

.DLL命令 ImageList_Destroy, 整数型, "comctl32.dll", "ImageList_Destroy", , 取文件图标
    .参数 himl, 空白型, , 

.DLL命令 API_ShowScrollBar, 整数型, "user32", "ShowScrollBar", , , 显示滚动条
    .参数 hwnd, 整数型, , 
    .参数 wBar, 整数型, , 
    .参数 bShow, 逻辑型, , 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", , 
    .参数 程序指针, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 SetWindowLongA, 子程序指针, "", "SetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 要置的特征, 整数型, , 
    .参数 新特征, 子程序指针, , 仅易语言3.0支持

.DLL命令 API_取图标指针, 整数型, "shell32.dll", "ExtractIconA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 文件名称, 文本型, , 
    .参数 图标索引, 整数型, , 

.DLL命令 API_画图标, 整数型, "user32", "DrawIcon", , 
    .参数 设备场景, 整数型, , 
    .参数 位置x, 整数型, , 
    .参数 位置y, 整数型, , 
    .参数 图标指针, 整数型, , 

.DLL命令 API_取设备场景, 整数型, "user32", "GetDC", , 
    .参数 设备句柄, 整数型, , 

.DLL命令 API_释放设备场景, 空白型, "", "ReleaseDC", , ReleaseDC(hWnd,hDC) 
    .参数 hWnd, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 API_GetWindowLong, 整数型, "user32", "GetWindowLongA", , 热键用
    .参数 窗口句柄, 整数型, , 
    .参数 属性, 整数型, , 

.DLL命令 API_RegisterHotKey, 整数型, "user32", "RegisterHotKey", , 　热键用
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 
    .参数 fsModifiers, 整数型, , 
    .参数 vk, 整数型, , 

.DLL命令 API_SetWindowLong, 整数型, "user32", "SetWindowLongA", , 热键用
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , ;

.DLL命令 API_CopyMemory_HotKey, 整数型, "", "RtlMoveMemory", 公开, 拷贝内存
    .参数 Destination, HOT_MSG, 传址, 
    .参数 Source, 整数型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 API_UnregisterHotKey, 整数型, "user32", "UnregisterHotKey", , 　热键用
    .参数 hwnd, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 API_CallWindowProc, 整数型, "user32", "CallWindowProcA", , 　热键用
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 API_第一个线程, 逻辑型, "Kernel32.dll", "Thread32First", 公开, 下一个线程Thread32First
    .参数 快照句柄, 整数型, , 
    .参数 线程入口结构, 未知类型0x4101092D, 传址, 

.DLL命令 API_下一个线程, 逻辑型, "Kernel32.dll", "Thread32Next", 公开, 下一个线程
    .参数 快照句柄, 整数型, , 
    .参数 线程入口结构, 未知类型0x4101092D, , 

.DLL命令 API_IsWindow, 逻辑型, "", "IsWindow", 公开, 
    .参数 hWnd, 整数型, , 

.DLL命令 API_ShowWindow, 空白型, "", "ShowWindow", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 nCmdShow, 整数型, , 

.DLL命令 API_GetForegroundWindow, 整数型, "", "GetForegroundWindow", 公开, 获取当前窗口句柄SetForegroundWindow

.DLL命令 API_SetForegroundWindow, 空白型, "", "SetForegroundWindow", 公开, 设置为当前活动窗口
    .参数 hwn, 整数型, , 

.DLL命令 API_GetKeyState, 短整数型, "", "GetKeyState", , 
    .参数 nVirtKey, 整数型, , 

.DLL命令 API_GetWindowThreadProcessId, 整数型, "", "GetWindowThreadProcessId", , 
    .参数 hWnd, 整数型, , in
    .参数 lpdwProcessId, 整数型, 传址, out

.DLL命令 API_GetWindowRect, 逻辑型, "", "GetWindowRect", , 
    .参数 hWnd, 整数型, , in
    .参数 lpRect, RECT, 传址, out

.程序集 程序集1, , , 

.程序集变量 集_图标句柄, 整数型, , , 
.程序集变量 集_热键标识, 整数型, , , 
.程序集变量 集_注册热键, 整数型, , , 
.程序集变量 集_热键窗口句柄, 整数型, , , 
.程序集变量 集_原窗口程序, 整数型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (全_窗口停留模式, 真)
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (测试窗口, , 真)


.子程序 弹出任务管理窗口, 空白型, , 
载入 (_任务管理, , 假)

.子程序 取窗口图标, 整数型, , 返回句柄
.参数 参_窗口句柄, 整数型, , 

.局部变量 局_图标指针, 整数型, , , 
.局部变量 局_ICO路径, 文本型, , , 

.如果真 (API_IsWindow (参_窗口句柄))
    赋值 (局_图标指针, API_SendMessage (参_窗口句柄, #WM_GETICON, #ICON_BIG, 0))
    .如果真 (等于 (局_图标指针, 0))
        赋值 (局_图标指针, API_SendMessage (参_窗口句柄, #WM_GETICON, #ICON_SMALL, 0))
        .如果真 (等于 (局_图标指针, 0))
            赋值 (局_图标指针, API_GetClassLong (参_窗口句柄, #GCL_HICON))
            .如果真 (等于 (局_图标指针, 0))
                赋值 (局_图标指针, API_GetClassLong (参_窗口句柄, #GCL_HICONSM))
                 ' .如果真 (等于 (局_图标指针, 0))
                     ' 局_ICO路径 ＝ 获取窗口进程路径 (参_窗口句柄)
                     ' 局_图标指针 ＝ API_取图标指针 (_任务管理.取窗口句柄 (), 局_ICO路径, 0)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
返回 (局_图标指针)



.子程序 取窗口标题_自, 文本型, , 
.参数 参_窗口句柄, 整数型, , 

.局部变量 局_标题, 文本型, , , 
.局部变量 局_结果, 整数型, , , 

赋值 (局_标题, 取空白文本 (255))
赋值 (局_结果, API_GetWindowText (参_窗口句柄, 取变量数据地址 (局_标题), 255))
.如果 (不等于 (局_结果, 0))
    返回 (局_标题)
.否则
    返回 (“”)
.如果结束



.子程序 截取窗口位图, 字节集, , 
.参数 窗口句柄, 整数型, , 

.局部变量 矩形区域, RECT, , , 
.局部变量 屏幕设备上下文句柄, 整数型, , , 
.局部变量 内存设备上下文句柄, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 旧位图句柄, 整数型, , , 
.局部变量 位图, BITMAP, , , 
.局部变量 位图像素点阵, 字节集, , , 
.局部变量 位图文件头, BITMAPFILEHEADER, , , 
.局部变量 位图文件头字节集, 字节集, , , 
.局部变量 位图信息, BITMAPINFO, , , 
.局部变量 位图信息字节集, 字节集, , , 

.如果真 (取反 (API_IsWindow (窗口句柄)))
    返回 ({  })
.如果真结束
API_GetWindowRect (窗口句柄, 矩形区域)
赋值 (屏幕设备上下文句柄, API_GetDC (0))
赋值 (内存设备上下文句柄, API_CreateCompatibleDC (屏幕设备上下文句柄))
赋值 (位图句柄, API_CreateCompatibleBitmap (屏幕设备上下文句柄, 相减 (矩形区域.right, 矩形区域.left), 相减 (矩形区域.bottom, 矩形区域.top)))
赋值 (旧位图句柄, API_SelectObject (内存设备上下文句柄, 位图句柄))
.如果真 (取反 (API_PrintWindow (窗口句柄, 内存设备上下文句柄, 0)))
    API_SelectObject (内存设备上下文句柄, 旧位图句柄)
    API_DeleteObject (位图句柄)
    API_DeleteDC (内存设备上下文句柄)
    API_ReleaseDC (0, 屏幕设备上下文句柄)
    返回 ({  })
.如果真结束
API_GetObjectA (位图句柄, 相加 (相乘 (5, 4), 2, 2), 位图)
赋值 (位图信息.BITMAPINFOHEADER.biSize, 相乘 (4, 11))
API_GetDIBits_BimapInfo (内存设备上下文句柄, 位图句柄, 0, 0, 0, 位图信息, 0)
赋值 (位图像素点阵, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图信息.BITMAPINFOHEADER.biCompression, 0)
API_GetDIBits (内存设备上下文句柄, 位图句柄, 0, 位图.bmHeight, 位图像素点阵, 位图信息, 0)
 ' 构造位图信息
赋值 (位图信息字节集, 取空白字节集 (位图信息.BITMAPINFOHEADER.biSize))
API_CopyMemory_BITMAPINFO (位图信息字节集, 位图信息, 位图信息.BITMAPINFOHEADER.biSize)
 ' 构造位图文件头
赋值 (位图文件头.bfType, 19778)
赋值 (位图文件头.bfOffBits, 相加 (相乘 (2, 4), 相乘 (3, 2), 位图信息.BITMAPINFOHEADER.biSize))
赋值 (位图文件头.bfSize, 相加 (位图文件头.bfOffBits, 位图信息.BITMAPINFOHEADER.biSizeImage))
赋值 (位图文件头.bfReserved1, 0)
赋值 (位图文件头.bfReserved2, 0)
赋值 (位图文件头字节集, 取空白字节集 (14))
API_CopyMemory_BITMAPFILEHEADER (位图文件头字节集, 位图文件头, 14)
API_SelectObject (内存设备上下文句柄, 旧位图句柄)
API_DeleteObject (位图句柄)
API_DeleteDC (内存设备上下文句柄)
API_ReleaseDC (0, 屏幕设备上下文句柄)
返回 (相加 (位图文件头字节集, 位图信息字节集, 位图像素点阵))
 ' 本源码来自易语言资源网(www.5A5X.com)


.子程序 显示图标, 空白型, , 
.参数 图标句柄, 整数型, , 
.参数 参_目标画板, 画板, , 
.参数 参_目标画板1, 画板, , 

.局部变量 局_图标句柄, 整数型, , , 
.局部变量 HDC, 整数型, , , 

赋值 (参_目标画板.宽度, 32)
赋值 (参_目标画板.高度, 32)
赋值 (局_图标句柄, 图标句柄) ' API_取图标指针 (_任务管理.取窗口句柄 (), 图标句柄, 0)
赋值 (参_目标画板.标记, 到文本 (局_图标句柄))
赋值 (集_图标句柄, 局_图标句柄)
赋值 (参_目标画板1.可视, 假)
赋值 (参_目标画板.可视, 真)
参_目标画板.清除 ()
赋值 (HDC, API_取设备场景 (参_目标画板.取窗口句柄 ()))
API_画图标 (HDC, 0, 0, 局_图标句柄)

赋值 (参_目标画板1.左边, 参_目标画板.左边)
赋值 (参_目标画板1.顶边, 参_目标画板.顶边)
赋值 (参_目标画板1.宽度, 参_目标画板.宽度)
赋值 (参_目标画板1.高度, 参_目标画板.高度)

参_目标画板.复制 (参_目标画板1, , , )
赋值 (参_目标画板.可视, 假)
赋值 (参_目标画板1.自动重画, 真)
赋值 (参_目标画板1.可视, 真)
API_释放设备场景 (参_目标画板.取窗口句柄 (), HDC)



.子程序 取整字文本中间, 文本型, , 
.参数 参_文本, 文本型, , 假设开始位置为一个整体的
.参数 参_开始位置, 整数型, , 
.参数 参_取文本长度, 整数型, 可空, 0为取所有长度

.局部变量 i, 整数型, , , 
.局部变量 局_开始位置, 整数型, , , 
.局部变量 局_是否为汉字, 整数型, , , 1为头，0为尾,即结束,-1为半角
.局部变量 局_结束位置, 整数型, , , 
.局部变量 局_前取, 逻辑型, , , 
.局部变量 局_文本长度, 整数型, , , 

赋值 (局_是否为汉字, 0)
.计次循环首 (取文本长度 (参_文本), i)
     ' 输出调试文本 (“i=” ＋ 到文本 (i))
    .如果 (小于 (取代码 (参_文本, i), 0))
        .如果 (等于 (局_是否为汉字, 1))
            赋值 (局_是否为汉字, 0)
        .否则
            赋值 (局_是否为汉字, 1)
        .如果结束
        
    .否则
        赋值 (局_是否为汉字, -1)
    .如果结束
     ' 输出调试文本 (“局_是否为汉字” ＋ 到文本 (局_是否为汉字))
    .判断开始 (等于 (i, 参_开始位置))
        .判断开始 (等于 (局_是否为汉字, 1))
            赋值 (局_开始位置, i)
            赋值 (局_文本长度, 1)
        .判断 (等于 (局_是否为汉字, 0))
            赋值 (局_开始位置, 相减 (i, 1))
            赋值 (局_文本长度, 2)
        .判断 (等于 (局_是否为汉字, -1))
            赋值 (局_开始位置, i)
            赋值 (局_文本长度, 1)
        .默认
            
        .判断结束
         ' 输出调试文本 (“开始位置=” ＋ 到文本 (局_开始位置) ＋ “,局_文本长度” ＋ 到文本 (局_文本长度))
        
    .判断 (大于 (i, 参_开始位置))
        赋值 (局_文本长度, 相加 (局_文本长度, 1))
    .默认
        
    .判断结束
    .如果真 (大于或等于 (局_文本长度, 参_取文本长度))
        .判断开始 (等于 (局_是否为汉字, 1))
            赋值 (局_文本长度, 相减 (参_取文本长度, 1))
            .如果真 (等于 (局_文本长度, 0))
                赋值 (局_文本长度, 2)
            .如果真结束
            
        .判断 (等于 (局_是否为汉字, 0))
            赋值 (局_文本长度, 相减 (相加 (参_取文本长度, 局_文本长度), 参_取文本长度))
        .判断 (等于 (局_是否为汉字, -1))
            赋值 (局_文本长度, 相减 (相加 (参_取文本长度, 局_文本长度), 参_取文本长度))
        .默认
            
        .判断结束
         ' 输出调试文本 (“局_文本长度=” ＋ 到文本 (局_文本长度))
        跳出循环 ()
    .如果真结束
    
    
.计次循环尾 ()
 ' 输出调试文本 (“局_开始位置” ＋ 到文本 (局_开始位置))
 ' 输出调试文本 (“局_文本长度” ＋ 到文本 (局_文本长度))

返回 (取文本中间 (参_文本, 局_开始位置, 局_文本长度))

.子程序 注册AltTab热键, 整数型, 公开, ,在窗口注消息必须用 注销AltTab热键来注销热键,返回0代表调用失败，可以用低勾子，可通过HOOK调用 "任务切换ALTTAB_HOOK键处理子程序" 来响应事件。。
.参数 参_窗口句柄, 整数型, , 
.参数 参_载入子程序, 子程序指针, 可空, 即载入切换管理窗口之前处理的子程序
.参数 参_载入子程序_参数, 整数型, 可空, 整数
.参数 参_销毁子程序, 子程序指针, 可空, 即销毁切换管理窗口之前处理的子程序
.参数 参_销毁子程序_参数, 整数型, 可空, 
.参数 参_载入后AltTab事件子程序, 子程序指针, 可空, 参_载入切换管理窗口后AltTab事件子程序
.参数 参_载入后AltTab事件子程序_参数, 整数型, 可空, 

 ' 集_原窗口程序 ＝ API_GetWindowLong (集_窗口句柄, #GWL_WNDPROC)
赋值 (集_热键标识, 1)
赋值 (集_注册热键, #VK_TAB)
赋值 (集_热键窗口句柄, 参_窗口句柄)
.如果真 (取反 (是否为空 (参_载入子程序)))
    赋值 (全_载入子程序, 参_载入子程序)
    赋值 (全_载入子程序_参数, 参_载入子程序_参数)
    
.如果真结束
.如果真 (取反 (是否为空 (参_销毁子程序)))
    赋值 (全_销毁子程序, 参_销毁子程序)
    赋值 (全_销毁子程序_参数, 参_销毁子程序_参数)
    
.如果真结束
.如果真 (取反 (是否为空 (参_载入后AltTab事件子程序)))
    赋值 (全_载入后AltTab事件子程序, 参_载入后AltTab事件子程序)
    赋值 (全_载入后AltTab事件子程序_参数, 参_载入后AltTab事件子程序_参数)
    
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (集_原窗口程序, API_SetWindowLong (参_窗口句柄, #GWL_WNDPROC, 到整数 (&TAB热键消息处理)))
返回 (API_RegisterHotKey (参_窗口句柄, 集_热键标识, #MOD_ALT, 集_注册热键))
 ' 返回 (API_RegisterHotKey (取窗口句柄 (), 集_热键标识, 0, 集_注册热键))


.子程序 注销AltTab热键, 空白型, 公开, 
API_UnregisterHotKey (集_热键窗口句柄, 集_注册热键)



.子程序 任务切换ALTTAB_HOOK键处理子程序, 空白型, 公开, 注意：只需要对TAB的按下键进行截获并取ALT的状态，通过 全_任务切换ALTTAB_HOOK键处理子程序 子程序指针来调用
处理键响应 ()




.子程序 TAB热键消息处理, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 HOTKey, HOT_MSG, , , 

.如果真 (并且 (等于 (Msg, #WM_HOTKEY), 等于 (wParam, 集_热键标识)))
    API_CopyMemory_HotKey (HOTKey, lParam, 4)
    .如果真 (等于 (HOTKey.键值, 集_注册热键)) ' 且 HOTKey.控制键 ＝ #MOD_CONTROL ＋ #MOD_ALT)
        处理键响应 ()
    .如果真结束
    
.如果真结束
返回 (API_CallWindowProc (集_原窗口程序, hWnd, Msg, wParam, lParam))

.子程序 处理键响应, 空白型, , 
.如果 (并且 (等于 (全_任务管理窗口是否载入, 真), API_IsWindow (全_任务管理窗口句柄)))
    .如果 (等于 (全_任务管理ALT状态, 1))
        赋值 (全_任务管理TAB连按次数, 相加 (全_任务管理TAB连按次数, 1))
    .否则
        赋值 (全_任务管理TAB连按次数, 0)
    .如果结束
    
    .如果真 (大于 (到整数 (全_载入后AltTab事件子程序), 0))
        未知支持库函数_13 (全_载入后AltTab事件子程序, 全_载入后AltTab事件子程序_参数)
    .如果真结束
    _时钟_保持窗口激活_周期事件 ()
    _任务管理.显示下一窗口 ()
    
.否则
    赋值 (全_任务管理TAB连按次数, 相加 (全_任务管理TAB连按次数, 1))
    .如果真 (大于 (到整数 (全_载入子程序), 0))
        未知支持库函数_13 (全_载入子程序, 全_载入子程序_参数)
    .如果真结束
    赋值 (全_任务管理窗口是否载入, 真)
    载入 (_任务管理, , 假)
    ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束


.子程序 置任务窗口停留模式, 空白型, 公开, 设置是否为停留模式。即松开ALT后不会消失窗口
.参数 停留模式, 逻辑型, , 

赋值 (全_窗口停留模式, 停留模式)


.窗口程序集 窗口程序集1, , , 

.程序集变量 集_窗口信息数组, 窗口信息, , "0", 
.程序集变量 集_hImageList, 整数型, , , 
.程序集变量 集_默认窗口, 子程序指针, , , 
.程序集变量 集_UP_计算现行选中项, 小数型, , , 
.程序集变量 集_DOWN_计算现行选中项, 小数型, , , 
.程序集变量 集_列表框纵向位置, 整数型, , , 
.程序集变量 集_列表框鼠标移动了, 逻辑型, , , 
.程序集变量 集_UP_鼠标纵位置, 整数型, , , 
.程序集变量 集_DOWN_鼠标纵位置, 整数型, , , 
.子程序 __任务管理_创建完毕, 空白型, , 
赋值 (., 假)
赋值 (., #外形图)
赋值 (.正常图片, #按钮_UP_T)
赋值 (.点燃图片, #按钮_UP_Over)
赋值 (.按下图片, #按钮_UP_T)
赋值 (.禁止图片, #按钮_UP_No)

赋值 (.正常图片, #按钮_DOWN_T)
赋值 (.点燃图片, #按钮_DOWN_Over)
赋值 (.按下图片, #按钮_DOWN_T)
赋值 (.禁止图片, #按钮_DOWN_No)

取进程窗口信息到数据 ()
.如果 (小于或等于 (取数组成员数 (集_窗口信息数组), 0))
    销毁 ()
.否则
     ' 本源码来自易语言资源网(www.5A5X.com)
    赋值 (., 真)
    赋值 (全_任务管理窗口句柄, 取窗口句柄 ())
    赋值 (全_任务管理TAB连按次数, 0)
    赋值 (全_任务管理ALT状态, 0)
     ' .如果 (大于 (位与 (API_GetKeyState (#VK_ALT), 32768), 0))
         ' 全_任务管理ALT状态 ＝ 1
    .否则
         ' 全_任务管理ALT状态 ＝ 0
    .如果结束
    
    置外形图片 (#外形图, #红色)
    赋值 (集_默认窗口, SetWindowLongA (取窗口句柄 (), -4, &处理))
    显示窗口信息列表 ()
    赋值 (., 真)
    赋值 (全_任务管理窗口是否载入, 真)
    赋值 (全_现行选取中项, 0)
    .如果真 (小于 (全_现行选取中项, 0))
        赋值 (全_现行选取中项, 0)
    .如果真结束
    .如果真 (大于或等于 (全_现行选取中项, 取数组成员数 (集_窗口信息数组)))
        赋值 (全_现行选取中项, 相减 (取数组成员数 (集_窗口信息数组), 1))
    .如果真结束
    赋值 (., 全_现行选取中项)
    全_现行选取中项.保证显示 ()
    API_SetForegroundWindow (取窗口句柄 ())
    赋值 (.底图, 截取窗口位图 (集_窗口信息数组 [相加 (全_现行选取中项, 1)].窗口句柄))
    
.如果结束



.子程序 __任务管理_将被销毁, 空白型, , 
赋值 (全_任务管理TAB连按次数, 0)
赋值 (全_任务管理ALT状态, 0)
赋值 (全_任务管理窗口是否载入, 假)
.如果真 (大于 (到整数 (全_销毁子程序), 0))
    未知支持库函数_13 (全_销毁子程序, 全_销毁子程序_参数)
.如果真结束


.子程序 显示窗口信息, 空白型, , 
.参数 参_数组号, 整数型, , 

.局部变量 局_窗口句柄, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 
.局部变量 局_窗口图标句柄, 整数型, , , 
.局部变量 局_窗口状态, 整数型, , , 
.局部变量 局_窗口状态标题, 文本型, , , 

赋值 (局_窗口句柄, 集_窗口信息数组 [参_数组号], 窗口句柄)
赋值 (局_窗口标题, 集_窗口信息数组 [参_数组号], 窗口标题)
.如果真 (大于 (取文本长度 (局_窗口标题), 60))
    赋值 (局_窗口标题, 相加 (取整字文本中间 (局_窗口标题, 1, 57), “...”))
.如果真结束
赋值 (局_窗口标题, 子文本替换 (局_窗口标题, “$”, “”, , , 真))
赋值 (局_窗口标题, 子文本替换 (局_窗口标题, “~”, “”, , , 真))
赋值 (局_窗口标题, 子文本替换 (局_窗口标题, “%”, “”, , , 真))
赋值 (局_窗口标题, 子文本替换 (局_窗口标题, “^”, “”, , , 真))
赋值 (.内容, 局_窗口标题)
输出调试文本 (局_窗口标题)
赋值 (.内容, 获取窗口进程路径 (局_窗口句柄))
赋值 (.内容, 相加 (到文本 (参_数组号), “/”, 到文本 (取数组成员数 (集_窗口信息数组))))
 ' 本源码来自易语言资源网(www.5A5X.com)
赋值 (局_窗口状态, 取窗口显示状态 (局_窗口句柄))
.判断开始 (或者 (等于 (局_窗口状态, #SW_MINIMIZE), 等于 (局_窗口状态, #SW_SHOWMINIMIZED)))
    赋值 (局_窗口状态标题, “最小化”)
.判断 (等于 (局_窗口状态, #SW_MAXIMIZE))
    赋值 (局_窗口状态标题, “最大化窗口”)
.判断 (等于 (局_窗口状态, #SW_NORMAL))
    赋值 (局_窗口状态标题, “普通窗口”)
.默认
    
.判断结束

赋值 (.内容, 相加 (“窗口状态：”, 局_窗口状态标题)) ' ＋ 到文本 (局_窗口状态)
赋值 (局_窗口图标句柄, 取窗口图标 (局_窗口句柄))
赋值 (., 真)
显示图标 (局_窗口图标句柄, , )

.如果 (小于或等于 (取数组成员数 (集_窗口信息数组), 8))
    赋值 (.可视, 假)
    赋值 (.可视, 假)
.否则
    
    .如果 (等于 (., 0))
        赋值 (.可视, 假)
    .否则
        
        .如果真 (取反 (.可视))
            赋值 (.可视, 真)
        .如果真结束
        
    .如果结束
    
    .如果 (等于 (., 相减 (取数组成员数 (集_窗口信息数组), 1)))
        赋值 (.可视, 假)
    .否则
        .如果真 (取反 (.可视))
            赋值 (.可视, 真)
        .如果真结束
        
    .如果结束
    
    
.如果结束


.子程序 处理, 整数型, , 不要修改该子程序的返回值及参数的类型！
.参数 句柄, 整数型, , 
.参数 消息, 整数型, , 
.参数 参数1, 整数型, , 
.参数 参数2, 整数型, , 

.如果真 (等于 (消息, 131))
    返回 (1)
.如果真结束
返回 (CallWindowProcA (集_默认窗口, 句柄, 消息, 参数1, 参数2))

.子程序 显示窗口信息列表, 空白型, , 
.局部变量 文件名, 文本型, , , 
.局部变量 目录, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 局_图标句柄, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 

全部删除 ()
API_ShowScrollBar (取窗口句柄 (), #SB_BOTH, 假)
ImageList_Destroy (集_hImageList)
赋值 (集_hImageList, ImageList_Create (32, 32, 24, 0, 0)) ' 定义每张图片大小为16*16的图片组,色彩为24位真彩色
4099.发送信息 (1, 集_hImageList) ' 为超级列表框设置图片组
ImageList_SetBkColor (集_hImageList, .)
赋值 (., .)
.计次循环首 (取数组成员数 (集_窗口信息数组), i)
    赋值 (局_图标句柄, 取窗口图标 (集_窗口信息数组 [i], 窗口句柄))
    输出调试文本 (局_图标句柄)
    赋值 (局_窗口标题, 取文本左边 (集_窗口信息数组 [i], 窗口标题, 20))
    .插入表项 (集_窗口信息数组 [i], 窗口标题, ImageList_AddIcon (集_hImageList, 局_图标句柄), , , )
.计次循环尾 ()




.子程序 取进程窗口信息到数据, 整数型, , 
.局部变量 局_窗口字节集, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 局_窗口信息, 窗口信息, , , 
.局部变量 局_窗口数量, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 
.局部变量 局_窗口PID, 整数型, , , 
.局部变量 ii, 整数型, , , 
.局部变量 局_窗口T_ID, 整数型, , , 
.局部变量 WindowRect, RECT, , , 

赋值 (局_窗口数量, 获取顶级窗口句柄集 (局_窗口字节集))
清除数组 (集_窗口信息数组)
.计次循环首 (相除 (取字节集长度 (局_窗口字节集), 4), i)
    赋值 (局_窗口信息.窗口句柄, 取字节集数据 (局_窗口字节集, #整数型, 相加 (相乘 (相减 (i, 1), 4), 1)))
    赋值 (局_窗口信息.窗口标题, 未知支持库函数_76 (局_窗口信息.窗口句柄))
    输出调试文本 (局_窗口信息.窗口标题)
    赋值 (局_窗口标题, 到小写 (局_窗口信息.窗口标题))
     ' 局_窗口T_ID ＝ API_GetWindowThreadProcessId (局_窗口信息.窗口句柄, 局_窗口PID)
     ' 局_窗口信息.所在线程 ＝ 局_窗口T_ID
     ' 局_窗口信息.所属进程 ＝ 局_窗口PID
    
    输出调试文本 (相加 (局_窗口信息.窗口标题, “局_窗口PID=”, 到文本 (局_窗口PID)))
    .如果真 (并且 (不等于 (局_窗口标题, 到小写 (“Program Manager”)), 不等于 (局_窗口标题, “”), 不等于 (局_窗口标题, 到小写 (“WinIme”))))
        .如果真 (API_GetWindowRect (局_窗口信息.窗口句柄, WindowRect))
            输出调试文本 (相加 (“WindowRect.TOP=”, 到文本 (WindowRect.top)))
            输出调试文本 (相加 (“WindowRect.left=”, 到文本 (WindowRect.left)))
            输出调试文本 (相加 (“WindowRect.right=”, 到文本 (WindowRect.right)))
            输出调试文本 (相加 (“WindowRect.bottom=”, 到文本 (WindowRect.bottom)))
            .如果真 (并且 (大于 (取绝对值 (相减 (WindowRect.top, WindowRect.bottom)), 10), 大于 (取绝对值 (相减 (WindowRect.left, WindowRect.right)), 10)))
                加入成员 (集_窗口信息数组, 局_窗口信息)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()
 ' 排序了。。

 ' ' 冒泡法排序了。。
 ' .计次循环首 (取数组成员数 (集_窗口信息数组), i)
     ' .计次循环首 (取数组成员数 (集_窗口信息数组), ii)
        
         ' .如果真 (小于或等于 (到数值 (集_窗口信息数组 [i], 所在线程), 到数值 (集_窗口信息数组 [ii], 所在线程))) ' 以升序
             ' .如果 (等于 (到数值 (集_窗口信息数组 [i], 所在线程), 到数值 (集_窗口信息数组 [ii], 所在线程)))
                 ' .如果真 (大于 (集_窗口信息数组 [i], 窗口句柄, 到数值 (集_窗口信息数组 [ii], 窗口句柄)))
                     ' 局_窗口信息 ＝ 集_窗口信息数组 [i]
                     ' 集_窗口信息数组 [i] ＝ 集_窗口信息数组 [ii]
                     ' 集_窗口信息数组 [ii] ＝ 局_窗口信息
                .如果真结束
                
            .否则
                 ' 局_窗口信息 ＝ 集_窗口信息数组 [i]
                 ' 集_窗口信息数组 [i] ＝ 集_窗口信息数组 [ii]
                 ' 集_窗口信息数组 [ii] ＝ 局_窗口信息
            .如果结束
            
        .如果真结束
        
     ' .计次循环尾 ()
 ' .计次循环尾 ()

 ' 排序了
返回 (相除 (取字节集长度 (局_窗口字节集), 4))




.子程序 _按钮1_被单击, 空白型, , 
.局部变量 wb, 文本型, , , 
.局部变量 wb1, 文本型, , , 
.局部变量 wb2, 文本型, , , 
.局部变量 wb3, 文本型, , , 
.局部变量 wb4, 文本型, , , 

赋值 (wb, 取整字文本中间 (“我222你的们3345”, 2, 1))
赋值 (wb1, 取整字文本中间 (“我222你的们3345”, 6, 8))
赋值 (wb2, 取整字文本中间 (“我222你的们3345”, 1, 1))
赋值 (wb3, 取整字文本中间 (“我222你的们3345”, 3, 3))
赋值 (wb4, 取整字文本中间 (“我222你的们3345”, 2, 5))

输出调试文本 (相加 (wb, “,(2,1)长度=”, 到文本 (取文本长度 (wb))))
输出调试文本 (相加 (wb1, “,(6,8)长度=”, 到文本 (取文本长度 (wb1))))
输出调试文本 (相加 (wb2, “,(1,1)长度=”, 到文本 (取文本长度 (wb2))))
输出调试文本 (相加 (wb3, “,(3,3)长度=”, 到文本 (取文本长度 (wb3))))
输出调试文本 (相加 (wb4, “,(2,5)长度=”, 到文本 (取文本长度 (wb4))))

.子程序 _图形按钮_up_被单击, 空白型, , 


.子程序 _图形按钮_down_被单击, 空白型, , 


.子程序 _图形按钮_up_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 局_位置移动量, 整数型, , , 
.局部变量 局_现行选中项, 整数型, , , 

 ' 局_位置移动量 ＝ 取数组成员数 (集_窗口信息数组) × 纵向位置 ÷ 32
输出调试文本 (“怎么这里也鼠标动了。”)
.如果 (或者 (小于或等于 (纵向位置, 2), 大于 (纵向位置, 30)))
    赋值 (集_UP_计算现行选中项, .)
.否则
    .如果真 (大于或等于 (取绝对值 (相减 (集_UP_鼠标纵位置, 纵向位置)), 1))
        输出调试文本 (“怎么不对？”)
        赋值 (集_UP_鼠标纵位置, 纵向位置)
        赋值 (集_UP_计算现行选中项, 相减 (集_UP_计算现行选中项, 1))
        赋值 (全_现行选取中项, 到整数 (集_UP_计算现行选中项))
        .如果真 (小于或等于 (全_现行选取中项, 0))
            赋值 (全_现行选取中项, 0)
        .如果真结束
        赋值 (., 全_现行选取中项)
        全_现行选取中项.保证显示 ()
        
    .如果真结束
    
.如果结束



.子程序 _图形按钮_down_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 局_位置移动量, 整数型, , , 
.局部变量 局_现行选中项, 整数型, , , 

 ' 局_位置移动量 ＝ 取数组成员数 (集_窗口信息数组) × 纵向位置 ÷ 32
输出调试文本 (纵向位置)
.如果 (或者 (小于或等于 (纵向位置, 2), 大于 (纵向位置, 30)))
    赋值 (集_DOWN_计算现行选中项, .)
    输出调试文本 (相加 (“集_DOWN_计算现行选中项=”, 到文本 (集_DOWN_计算现行选中项)))
.否则
    .如果真 (大于或等于 (取绝对值 (相减 (集_DOWN_鼠标纵位置, 纵向位置)), 1))
        赋值 (集_DOWN_鼠标纵位置, 纵向位置)
        赋值 (集_DOWN_计算现行选中项, 相加 (集_DOWN_计算现行选中项, 1))
        赋值 (全_现行选取中项, 到整数 (集_DOWN_计算现行选中项))
        
        .如果真 (大于或等于 (全_现行选取中项, 相减 (取数组成员数 (集_窗口信息数组), 1)))
            赋值 (全_现行选取中项, 相减 (取数组成员数 (集_窗口信息数组), 1))
        .如果真结束
        赋值 (., 全_现行选取中项)
        全_现行选取中项.保证显示 ()
        
    .如果真结束
    
.如果结束




.子程序 _图形按钮_up_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 



.子程序 _图形按钮_down_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 





.子程序 _超级列表框1_表项跟踪, 空白型, , 
.参数 表项索引, 整数型, , 

.如果真 (等于 (集_列表框鼠标移动了, 真))
    .如果真 (大于或等于 (表项索引, 0))
        .如果真 (不等于 (全_现行选取中项, 表项索引))
            赋值 (., 表项索引)
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 _时钟_取窗口位图_周期事件, 空白型, , 
.如果真 (不等于 (全_现行选取中项, 到整数 (.标记)))
    赋值 (.标记, 到文本 (全_现行选取中项))
     ' 显示窗口信息 (集_现行选取中项 ＋ 1)
    赋值 (.底图, 截取窗口位图 (集_窗口信息数组 [相加 (全_现行选取中项, 1)].窗口句柄))
.如果真结束


.子程序 _超级列表框1_当前表项被改变, 空白型, , 
赋值 (全_现行选取中项, .)
显示窗口信息 (相加 (全_现行选取中项, 1))


.子程序 _超级列表框1_左键单击表项, 空白型, , 
任务管理_激活显示窗口 ()


.子程序 _超级列表框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

输出调试文本 (相加 (“按下某键=”, 到文本 (键代码)))
.判断开始 (等于 (键代码, 37))
    销毁 ()
.判断 (或者 (等于 (键代码, 13), 等于 (键代码, 39), 等于 (键代码, 32)))
    任务管理_激活显示窗口 ()
.判断 (等于 (键代码, 18))
    赋值 (全_任务管理ALT状态, 1)
.判断 (等于 (键代码, 38))
    .如果真 (等于 (., 0))
        赋值 (., 相减 (取数组成员数 (集_窗口信息数组), 1))
        .保证显示 (.)
        返回 (假)
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.判断 (等于 (键代码, 40))
    .如果真 (等于 (., 相减 (取数组成员数 (集_窗口信息数组), 1)))
        赋值 (., 0)
        .保证显示 (.)
        返回 (假)
    .如果真结束
    
.默认
    
.判断结束




.子程序 _超级列表框1_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

输出调试文本 (相加 (“松开某键=”, 到文本 (键代码)))
.判断开始 (等于 (键代码, 18))
    .如果 (不等于 (全_窗口停留模式, 真))
        任务管理_激活显示窗口 ()
        
    .否则
        赋值 (全_任务管理ALT状态, 0)
        .如果真 (大于或等于 (全_任务管理TAB连按次数, 2))
            赋值 (全_任务管理TAB连按次数, 0)
            任务管理_激活显示窗口 ()
        .如果真结束
        赋值 (全_任务管理TAB连按次数, 0)
        
    .如果结束
    
.默认
    
.判断结束


.子程序 _超级列表框1_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 


赋值 (集_列表框纵向位置, 纵向位置)


.子程序 __任务管理_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

输出调试文本 (“鼠标动了。”)

.子程序 _时钟_列表框鼠标移动_周期事件, 空白型, , 
.如果 (大于或等于 (取绝对值 (相减 (集_列表框纵向位置, 到整数 (.标记))), 5))
    赋值 (.标记, 到文本 (集_列表框纵向位置))
    赋值 (集_列表框鼠标移动了, 真)
.否则
    赋值 (集_列表框鼠标移动了, 假)
.如果结束


.子程序 激活显示并显示窗口, 空白型, , 
.参数 参_窗口句柄, 空白型, , 

.局部变量 局_窗口状态, 整数型, , , 

.如果真 (API_IsWindow (参_窗口句柄))
    赋值 (局_窗口状态, 取窗口显示状态 (参_窗口句柄))
    输出调试文本 (相加 (“局_窗口状态=”, 到文本 (局_窗口状态)))
    .如果 (或者 (等于 (局_窗口状态, #SW_MINIMIZE), 等于 (局_窗口状态, #SW_SHOWMINIMIZED)))
        API_ShowWindow (参_窗口句柄, #SW_SHOWNOACTIVATE)
    .否则
        API_ShowWindow (参_窗口句柄, #SW_SHOWNA)
    .如果结束
    API_SetForegroundWindow (参_窗口句柄)
    销毁 ()
.如果真结束




.子程序 显示下一窗口, 空白型, , 
.局部变量 局_选中项i, 整数型, , , 

赋值 (局_选中项i, 相加 (., 1))
.如果真 (大于 (局_选中项i, 相减 (取数组成员数 (集_窗口信息数组), 1)))
    赋值 (局_选中项i, 0)
.如果真结束
输出调试文本 (相加 (“显示一下窗口”, 到文本 (局_选中项i)))
赋值 (., 局_选中项i)
局_选中项i.保证显示 ()
赋值 (.时钟周期, 0)
赋值 (.时钟周期, 200)


.子程序 任务管理_到下一窗口信息, 空白型, , 
.局部变量 局_选中项i, 整数型, , , 

.如果真 (全_任务管理窗口是否载入)
    显示下一窗口 ()
.如果真结束


.子程序 任务管理_激活显示窗口, 空白型, , 
.局部变量 局_现行选中项I, 整数型, , , 

.如果真 (全_任务管理窗口是否载入)
    赋值 (局_现行选中项I, 相加 (., 1))
    .如果真 (小于或等于 (局_现行选中项I, 0))
        赋值 (局_现行选中项I, 1)
    .如果真结束
    .如果真 (大于 (局_现行选中项I, 取数组成员数 (集_窗口信息数组)))
        赋值 (局_现行选中项I, 取数组成员数 (集_窗口信息数组))
    .如果真结束
    激活显示并显示窗口 (集_窗口信息数组 [局_现行选中项I], 窗口句柄)
    
.如果真结束


.子程序 __任务管理_被取消激活, 空白型, , 
销毁 ()


.子程序 _时钟_保持窗口激活_周期事件, 空白型, , 
.如果真 (不等于 (API_GetForegroundWindow (), _任务管理.取窗口句柄 ()))
    API_SetForegroundWindow (_任务管理.取窗口句柄 ())
.如果真结束


.子程序 _时钟_检测ALT是否弹起_周期事件, 空白型, , 
.如果真 (不等于 (全_窗口停留模式, 真))
    .如果真 (并且 (小于或等于 (位与 (API_GetKeyState (#VK_LALT), 32768), 0), 小于或等于 (位与 (API_GetKeyState (#VK_RALT), 32768), 0)))
        销毁 ()
    .如果真结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束


.子程序 _透明标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 



.类模块 安装程序管理, , , 

.子程序 初始化, 空白型, , 默认为0为默认不枚举操作系统补丁，1为枚举所有
.参数 列表范围, 整数型, 可空, 



.子程序 取已安装程序数量, 整数型, , 


.子程序 取已知已安装程序信息组, 空白型, , 取已知已案装程序信息列表,包括已知程序键值映射文件等
.参数 软件信息组, 程序信息, 数组, 装载软件信息类型



.子程序 取已知已安装程序信息_路径, 逻辑型, , 并反回软件安装等信息 安装软件信息,需要提供软件路径名称。与AppInfo库中对应
.参数 软件路径, 文本型, , INT
.参数 软件信息, 程序信息, , OUT 装载软件信息类型



.子程序 取已知程序信息, 逻辑型, , 并反回软件安装等信息 安装软件信息,需要提供软件名称。与AppInfo库中对应
.参数 软件名称, 文本型, , 
.参数 软件信息, 程序信息, , 装载软件信息类型



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 获取进程序列表, 空白型, , 进程标识符/进程名称/线程优先权/线程数/父进程标识符/进程模块标识符/模块路径/
.参数 进程详细信息数组, 进程详细信息, 数组, 装载进程详细信息的结构体。
.参数 是否获取窗口标题, 逻辑型, 可空, 如果不获取主窗口标题，则子程序 执行效率高。默认值为 假 ，不获取标题



.子程序 取模块路径, 文本型, , 通过进程ID取模块路径
.参数 processid, 整数型, , 



.子程序 提升进程权限, 逻辑型, , 
.参数 目标进程, 整数型, 可空, 
.参数 权限类别, 文本型, 可空, 



.子程序 获取当前进程路径, 文本型, , 


.子程序 获取顶级窗口句柄集, 整数型, , 获取顶级窗口句柄及所属进程标识符,返回窗口数
.参数 窗口句柄字节集, 字节集, , 窗口句柄字节集，4字节为一句柄，4*窗口句柄个数



.子程序 未用_进程ID获取窗口信息, 空白型, , 通过线程枚举获取主窗口句柄标题,=====================================
.参数 进程标示符, 整数型, , 
.参数 传_窗口信息, 窗口信息, , 返回窗口信息结构体



.子程序 按窗口句柄取进程信息, 进程详细信息, , 返回进程ID；进程名；进程全路径名
.参数 参_窗口句柄, 整数型, , 



.子程序 取进程主窗口标题进程线程, 整数型, , 根据进程标识符和主窗口句柄集,取得进程标识对应的主窗口信息，,返回窗口句柄
.参数 进程标识符, 整数型, , 传入进程标识
.参数 顶级窗口句柄_集, 字节集, , 传入窗口句柄集
.参数 传_窗口信息, 窗口信息, , 用来装载窗口信息的结构体



.子程序 获取任务栏窗口句柄集, 字节集, ,  获取任务窗口句柄集，4字节为一句柄值。调用"枚主任务窗口过程函数"过程


.子程序 判断程序是否已启动, 逻辑型, , '判断程序是否启动，输出详细进程信息，不包括 进程主窗口句柄 和 进程主窗口标题
.参数 参_程序路径, 文本型, , 
.参数 参_进程详细信息, 进程详细信息, 可空, 



.子程序 取窗口状态, 整数型, , 通过句柄，返回 0、非激活状态 1、激活状态
.参数 参_数窗口句柄, 整数型, , 
.参数 参_WINDOWINFO, WINDOWINFO, 可空, 



.子程序 进程ID获取主窗口信息, 整数型, , 返回窗口句柄,参_进程标识符  参_传窗口信息
.参数 参_进程标识符, 整数型, , 
.参数 参_传窗口信息, 窗口信息, 可空, 



.子程序 取窗口显示状态, 整数型, , 通过句柄，返回 最小化最大化状态
.参数 参_数窗口句柄, 整数型, , 
.参数 参_WINDOWPLACEMENT, WINDOWPLACEMENT, 可空, 输出窗口性性



.子程序 判断程序标识符是否有效, 逻辑型, , '参_进程标识符
.参数 参_进程标识符, 整数型, , 



.子程序 获取窗口进程路径, 文本型, , 
.参数 参_窗口句柄, 整数型, , 



.窗口程序集 窗口程序集2, , , 

.子程序 _测试窗口_创建完毕, 空白型, , 
置任务窗口停留模式 (真)
输出调试文本 (注册AltTab热键 (取窗口句柄 ()))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _测试窗口_将被销毁, 空白型, , 
注销AltTab热键 ()


 ' 不属于任何一个程序集、类模块的函数：
