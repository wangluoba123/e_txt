 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.wodesoft.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.常量 进度条2, "1001", , 
.常量 进度条1, "1004", , 
.常量 进度条3, "1008", , 
.常量 进度条4, "1010", , 
.常量 标签1, "1011", , 
.常量 标签2, "1012", , 
.常量 按钮1, "1013", , 
.常量 按钮2, "1014", , 
.常量 超级列表框1, "1101", , 
.常量 菜单1, "10001", , 
.常量 菜单2, "10002", , 
.常量 菜单3, "10003", , 
.常量 菜单4, "10004", , 
.常量 取CPU温度, "“Function GetCPUTemp()
GetCPUTemp="0"
Set mCPU = GetObject("WINMGMTS:{impersonationLevel=impersonate}!root\wmi").ExecQuery("SELECT   CurrentTemperature   From   MSAcpi_ThermalZoneTemperature")
          For Each u In mCPU
                  s = s & u.CurrentTemperature
          Next
            
          Set mCPU = Nothing
            
          GetCPUTemp = (s - 2732) / 10
            
End Function”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一




数据类型 MIB_IFROW, , 
    .成员 wszName, 字节集, , , 
    .成员 dwIndex, 整数型, , , 编号
    .成员 dwType, 整数型, , , 界面类型
    .成员 dwMtu, 整数型, , , 最大传输单元
    .成员 dwSpeed, 整数型, , , 界面速度
    .成员 dwPhysAddrLen, 整数型, , , 物理地址部分有效长度
    .成员 bPhysAddr, 字节集, , , 物理地址
    .成员 dwAdminStatus, 整数型, , , 管理状态
    .成员 dwOperStatus, 整数型, , , 操作状态
    .成员 dwLastChange, 整数型, , , 操作状态最近更新时间
    .成员 dwInOctets, 整数型, , , 总共收到(字节)
    .成员 dwInUcastPkts, 整数型, , , 总共收到(unicast包)
    .成员 dwInNUcastPkts, 整数型, , , 总共收到(non-unicast包)
    .成员 dwInDiscards, 整数型, , , 丢弃包总数（收到）
    .成员 dwInErrors, 整数型, , , 出错包总数（收到）
    .成员 dwInUnknownProtos, 整数型, , , 其它包总数（收到）
    .成员 dwOutOctets, 整数型, , , 总共发送(字节)
    .成员 dwOutUcastPkts, 整数型, , , 总共发送(unicast包)
    .成员 dwOutNUcastPkts, 整数型, , , 总共发送(non-unicast包)
    .成员 dwOutDiscards, 整数型, , , 丢弃包总数（发送）
    .成员 dwOutErrors, 整数型, , , 出错包总数（发送）
    .成员 dwOutQLen, 整数型, , , 发送队列长度
    .成员 dwDescrLen, 整数型, , , 界面描述部分有效长度
    .成员 bDescr, 字节集, , , 界面描述

数据类型 TRAYDATA, , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 Reserved1, 整数型, , , 
    .成员 Reserved2, 整数型, , , 
    .成员 hIcon, 整数型, , , 

数据类型 IconDirEntry, , 
    .成员 bWidth, 字节型, , , 
    .成员 bHeight, 字节型, , , 
    .成员 bColorCount, 字节型, , , 
    .成员 bReserved, 字节型, , , 
    .成员 wPlanes, 短整数型, , , 
    .成员 wBitCount, 短整数型, , , 
    .成员 dwBytesInRes, 整数型, , , 
    .成员 dwImageOffset, 整数型, , , 

数据类型 NotifyIconData, , 
    .成员 cbSize, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uFlags, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 szTip, 字节型, , "128", 
    .成员 dwState, 整数型, , , 
    .成员 dwStateMask, 整数型, , , 
    .成员 szInfo, 字节型, , "256", 
    .成员 uTimeoutAndVersion, 整数型, , , 
    .成员 szInfoTitle, 字节型, , "64", 
    .成员 dwInfoFlags, 整数型, , , 

数据类型 TBBUTTONINFO2, , 工具栏信息;
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型, , , TBIF_
    .成员 idCommand, 整数型, , , 按钮ID
    .成员 iImage, 整数型, , , 图片索引
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 cx, 短整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pszText, 整数型, , , 
    .成员 cchText, 整数型, , , 

数据类型 TBBUTTON, , 工具栏按钮
    .成员 iBitmap, 整数型, , , 按钮位图索引
    .成员 idCommand, 整数型, , , 按钮命令ID
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 dwData, 整数型, , , 应用程序定义的数据
    .成员 iString, 整数型, , , 按钮帮助文本字符串索引

数据类型 内存映射数据9X, , 
    .成员 映射文件号, 整数型, , , 
    .成员 指针, 整数型, , , 

数据类型 托盘信息, , 
    .成员 托盘图标句柄, 整数型, , , 
    .成员 托盘事件, 子程序指针, , , 

数据类型 系统PERFORMACE数据, , 312
    .成员 liIdleTime, 长整数型, , , 
    .成员 剩余, 整数型, , "76", 

数据类型 系统信息_, , 
    .成员 dwOemID, 整数型, , , dwOemID
    .成员 页大小, 整数型, , , dwPageSize
    .成员 最小量住址, 整数型, , , lpMinimumApplicationAddress
    .成员 最大量住址, 整数型, , , lpMaximumApplicationAddress
    .成员 活跃的处理器假, 整数型, , , dwActiveProcessorMask
    .成员 处理器数量, 整数型, , , dwNumberOrfProcessors
    .成员 处理器类型, 整数型, , , dwProcessorType
    .成员 配置粒状, 整数型, , , dwAllocationGranularity
    .成员 处理器水平, 短整数型, , , wProcessorLevel
    .成员 处理器校订, 短整数型, , , wProcessorRevision

数据类型 系统时间数据, , 32
    .成员 liKeBootTime, 长整数型, , , liKeBootTime
    .成员 系统时间, 长整数型, , , liKeSystemTime
    .成员 时区偏量, 长整数型, , , liExpTimeZoneBias
    .成员 时区ID, 整数型, , , uCurrentTimeZoneId
    .成员 dwReserved, 整数型, , , dwReserved

数据类型 IP_ADDRESS_STRING, , 
    .成员 IpAddr, 字节型, , "16", 

数据类型 IP_MASK_STRING, , 
    .成员 IpMask, 字节型, , "16", 

数据类型 IP_ADDR_STRING, , 
    .成员 dwNext, 整数型, , , 
    .成员 IpAddress, IP_ADDRESS_STRING, , , 
    .成员 IpMask, IP_MASK_STRING, , , 
    .成员 dwContext, 整数型, , , 

数据类型 IP_ADAPTER_INFO, , 
    .成员 dwNext, 整数型, , , 
    .成员 ComboIndex, 整数型, , , reserved
    .成员 sAdapterName, 字节型, , "260", 
    .成员 sDescription, 字节型, , "132", 
    .成员 dwAddressLength, 整数型, , , 
    .成员 sIPAddress, 字节型, , "8", 
    .成员 dwIndex, 整数型, , , 
    .成员 uType, 整数型, , , 
    .成员 uDhcpEnabled, 整数型, , , 
    .成员 CurrentIpAddress, 整数型, , , 
    .成员 IpAddressList, IP_ADDR_STRING, , , 
    .成员 GatewayList, IP_ADDR_STRING, , , 
    .成员 DhcpServer, IP_ADDR_STRING, , , 
    .成员 bHaveWins, 整数型, , , 
    .成员 PrimaryWinsServer, IP_ADDR_STRING, , , 
    .成员 SecondaryWinsServer, IP_ADDR_STRING, , , 
    .成员 LeaseObtained, 日期时间型, , , 
    .成员 LeaseExpires, 日期时间型, , , 

数据类型 内存状态_, , MEMORYSTATUS
    .成员 结构长度, 整数型, , , dwLength
    .成员 实际存储器百分比, 整数型, , , dwMemoryLoad
    .成员 总物理内存, 整数型, , , dwTotalPhys
    .成员 可用内存, 整数型, , , dwAvailPhys
    .成员 总页文件, 整数型, , , dwTotalPageFile
    .成员 可用页文件, 整数型, , , dwAvailPageFile
    .成员 总虚拟内存, 整数型, , , dwTotalVirtual
    .成员 可用虚拟内存, 整数型, , , dwAvailVirtual

数据类型 LVCOLUMN, , 
    .成员 mask, 整数型, , , 
    .成员 fmt, 整数型, , , 对齐方式
    .成员 CX, 整数型, , , 列宽度
    .成员 pszText, 文本型, 传址, , 列标题
    .成员 cchTextMax, 整数型, , , 缓冲区长度
    .成员 iSubItem, 整数型, , , 列索引
    .成员 iImage, 整数型, , , 列图标
    .成员 iOrder, 整数型, , , 

数据类型 LVITEM, , 
    .成员 mask, 整数型, , , 掩码
    .成员 iItem, 整数型, , , 项目
    .成员 iSubItem, 整数型, , , 子项目
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 项目文本长度
    .成员 iImage, 整数型, , , 图片索引
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIndent, 整数型, , , 缩进

数据类型 PROCESSENTRY32, , 
    .成员 dwSize, 整数型, , , 
    .成员 cntUsage, 整数型, , , 
    .成员 th32ProcessID, 整数型, , , 
    .成员 th32DefaultHeapID, 整数型, , , 
    .成员 th32ModuleID, 整数型, , , 
    .成员 cntThreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcPriClassBase, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 szExeFile, 字节型, , "256", 如果写成文本型,此处将会被放置一个指针,很显然会出错.

数据类型 OSVERSIONINFO, , 版本信息;
    .成员 dwOSVersionInfoSize, 整数型, , , 
    .成员 dwMajorVersion, 整数型, , , 
    .成员 dwMinorVersion, 整数型, , , 
    .成员 dwBuildNumber, 整数型, , , 
    .成员 dwPlatformId, 整数型, , , 
    .成员 szCSDVersion, 文本型, , "128", 

数据类型 ENUM_SERVICE_STATUS_PROCESS, , 
    .成员 lpServiceName, 文本型, , , 
    .成员 lpDisplayName, 文本型, , , 
    .成员 dwServiceType, 整数型, , , SERVICE_STATUS_PROCESS
    .成员 dwCurrentState, 整数型, , , 
    .成员 dwControlsAccepted, 整数型, , , 
    .成员 dwWin32ExitCode, 整数型, , , 
    .成员 dwServiceSpecificExitCode, 整数型, , , 
    .成员 dwCheckPoint, 整数型, , , 
    .成员 dwWaitHint, 整数型, , , 
    .成员 dwProcessId, 整数型, , , 
    .成员 dwServiceFlags, 整数型, , , 

数据类型 POINTAPI, , 
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 

数据类型 RECT, , 
    .成员 左, 整数型, , , 
    .成员 顶, 整数型, , , 
    .成员 右, 整数型, , , 
    .成员 底, 整数型, , , 

数据类型 系统时间, , 系统时间;
    .成员 年, 短整数型, , , 
    .成员 月, 短整数型, , , 
    .成员 星期, 短整数型, , , 
    .成员 天, 短整数型, , , 
    .成员 时, 短整数型, , , 
    .成员 分, 短整数型, , , 
    .成员 秒, 短整数型, , , 
    .成员 毫秒, 短整数型, , , 

数据类型 FILETIME, , 
    .成员 dwLowDateTime, 整数型, , , 
    .成员 dwHighDateTime, 整数型, , , 

数据类型 模块信息, , 
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 hmodule, 整数型, , , 
    .成员 szname, 字节型, , "256", 
    .成员 szpath, 字节型, , "256", 

.全局变量 托盘信息, 托盘信息, , , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevFunC, 子程序指针, , 
    .参数 hWnd, 整数型, , 
    .参数 uMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 
    .参数 lpModuleName, 整数型, , 

.DLL命令 InitCommonControls, 空白型, "comctl32.dll", "InitCommonControls", , 

.DLL命令 LoadIcon, 整数型, "user32.dll", "LoadIconA", 公开, 从指定的模块或应用程序实例中载入一个图标。其中，LoadIconBynum是LoadIcon函数的类型安全声明　执行成功则返回已载入的图标的句柄；零表示失败。会设置GetLastError
    .参数 实例句柄, 整数型, , 
    .参数 图标标识, 整数型, , 

.DLL命令 DialogBoxParam, 整数型, "", "DialogBoxParamA", , 
    .参数 hInstance, 整数型, , 
    .参数 lpName, 整数型, , 
    .参数 hWndParent, 整数型, , 
    .参数 lpDialogFunc, 子程序指针, , 
    .参数 dwInitParam, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32.dll", "SendMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 EndDialog, 整数型, "", "EndDialog", , 
    .参数 hwnd, 整数型, , 
    .参数 nResult, 整数型, , 

.DLL命令 GetDlgItem, 整数型, "", "GetDlgItem", , 
    .参数 hwnd, 整数型, , 
    .参数 Idc, 整数型, , 

.DLL命令 SetWindowText, 整数型, "user32", "SetWindowTextA", , ,
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 GetDlgItemText, 整数型, "user32.dll", "GetDlgItemTextA", , 
    .参数 hDlg, 整数型, , 
    .参数 nIDDlgItem, 整数型, , 
    .参数 text, 文本型, , 
    .参数 l, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 GetIfTable, 整数型, "iphlpapi", "GetIfTable", , 
    .参数 信息表, 字节集, 传址, 
    .参数 信息表尺寸, 整数型, 传址, 
    .参数 内参数, 整数型, , 

.DLL命令 TrackPopupMenu, 整数型, "user32.dll", "TrackPopupMenu", , 在屏幕的任意地方显示一个弹出式菜单
    .参数 菜单句柄, 整数型, , 弹出式菜单的句柄
    .参数 标志, 整数型, , 位置标志和鼠标追踪标志的组合，见下表
    .参数 横坐标, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 纵坐标, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 保留参数, 整数型, , 未使用，设为零
    .参数 窗口句柄, 整数型, , 用于接收弹出式菜单命令的窗口的句柄。应该使用窗体的窗口句柄――窗体中有一个菜单能象弹出式菜单那样接收相同的命令ID集
    .参数 矩形结构, 空白型, , 用屏幕坐标定义的一个矩形，如用户在这个矩形的范围内单击，则弹出式菜单不会关闭。如单击弹出式菜单之外的任何一个地方，则会关闭菜单。可以设为NULL

.DLL命令 SetMenu, 整数型, "user32", "SetMenu", , 设置窗口菜单  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 窗口的句柄
    .参数 hMenu, 整数型, , 窗口的新菜单的句柄;

.DLL命令 GetMenu, 整数型, "user32", "GetMenu", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 GetSubMenu, 整数型, "user32", "GetSubMenu", , 
    .参数 菜单句柄, 整数型, , 
    .参数 位置, 整数型, , 

.DLL命令 LocalSize, 整数型, "", "LocalSize", , 
    .参数 参数一, NotifyIconData, 传址, 

.DLL命令 lstrcpyn_复制, 整数型, "", "lstrcpyn", , 
    .参数 lpString1, 字节型, 数组, 
    .参数 lpString2, 文本型, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 Shell_NotifyIcon, 整数型, "shell32.dll", "Shell_NotifyIconA", , 
    .参数 dwMessage, 整数型, , 
    .参数 lpData, NotifyIconData, , 

.DLL命令 RtlMoveMemory_TBBUTTON, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, TBBUTTON, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 lstrcpyn_整数型, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 整数型, 传址, 
    .参数 数据2, 整数型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 RtlMoveMemory_TRAYDATA, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, TRAYDATA, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 FindWindow, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = GetWindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 FindWindowEx, 整数型, "user32", "FindWindowExA", , 在窗口列表中寻找与指定条件相符的第一个子窗口　找到的窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口句柄1, 整数型, , 在其中查找子的父窗口。如设为零，表示使用桌面窗口（通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）
    .参数 窗口句柄2, 整数型, , 从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。如设为零，表示从第一个子窗口开始搜索
    .参数 欲搜索的类名1, 文本型, , 欲搜索的类名。零表示忽略
    .参数 欲搜索的类名2, 文本型, , 欲搜索的类名。零表示忽略;

.DLL命令 RtlMoveMemory_Icon, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, IconDirEntry, , 
    .参数 Source, 字节集, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 CreateIconFromResource, 整数型, "", "CreateIconFromResource", , 
    .参数 presbits, 字节集, , 
    .参数 dwResSize, 整数型, , 
    .参数 fIcon, 逻辑型, , 
    .参数 dwVer, 整数型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", , 
    .参数 hwnd, 整数型, , 
    .参数 lpdwProcessId, 整数型, 传址, 

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 CloseHandle, 空白型, "", "CloseHandle", , 
    .参数 ProcessHandle, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 CreateFileMapping, 整数型, "kernel32.dll", "CreateFileMappingA", , 创建一个新的文件映射对象
    .参数 hFile, 整数型, , 
    .参数 lpFileMappigAttributes, 整数型, , 
    .参数 flProtect, 整数型, , 
    .参数 dwMaximumSizeHigh, 整数型, , 
    .参数 dwMaximumSizeLow, 整数型, , 
    .参数 lpName, 整数型, , 

.DLL命令 MapViewOfFile, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序的地址空间
    .参数 hFileMappingObject, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 dwFileOffsetHigh, 整数型, , 
    .参数 dwFileOffsetLow, 整数型, , 
    .参数 dwNumberOfBytesToMap, 整数型, , 

.DLL命令 VirtualFreeEx, 整数型, "kernel32.dll", "VirtualFreeEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 

.DLL命令 UnmapViewOfFile, 整数型, "kernel32.dll", "UnmapViewOfFile", , 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
    .参数 lpBaseAddress, 整数型, , 

.DLL命令 CallWindowProc_整数, 整数型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, 数组, 
    .参数 参数数目, 整数型, , 
    .参数 是否C调用, 逻辑型, , 

.DLL命令 ShowWindow, 整数型, "user32", "ShowWindow", , 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 nCmdShow, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;SW_HIDE：隐藏窗口，活动状态给令一个窗口;SW_MINIMIZE：最小化窗口，活动状态给令一个窗口;SW_RESTORE：用原来的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOW：用当前的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOWMAXIMIZED：最大化窗口，并将其激活;SW_SHOWMINIMIZED：最小化窗口，并将其激活;SW_SHOWMINNOACTIVE：最小化一个窗口，同时不改变活动窗口;SW_SHOWNA：用当前的大小和位置显示一个窗口，不改变活动窗口;SW_SHOWNOACTIVATE：用最近的大小和位置显示一个窗口，同时不改变活动窗口;SW_SHOWNORMAL：与SW_RESTORE相同;

.DLL命令 SetForegroundWindow, 整数型, "user32", "SetForegroundWindow", , 
    .参数 hwnd, 整数型, , 

.DLL命令 SetTimer, 整数型, "user32.dll", "SetTimer", , 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent
    .参数 时钟周期, 整数型, , uElapse
    .参数 回调函数地址, 子程序指针, , lpTimerFunc

.DLL命令 KillTimer, 整数型, "user32.dll", "KillTimer", , 
    .参数 窗口句柄, 整数型, , hwnd
    .参数 事件标识符, 整数型, , nIDEvent

.DLL命令 NtQuerySystemInformation_系统PERFORMACE, 整数型, "ntdll.dll", "NtQuerySystemInformation", , 
    .参数 systeminformationclass, 整数型, , 
    .参数 systeminformation, 系统PERFORMACE数据, , 
    .参数 systeminformationlength, 整数型, , 
    .参数 returnlength, 整数型, , 

.DLL命令 取CPU系统信息, 整数型, "", "GetSystemInfo", , GetSystemInfo
    .参数 lpSystemInfo, 系统信息_, , 

.DLL命令 NtQuerySystemInformation_系统时间, 整数型, "ntdll.dll", "NtQuerySystemInformation", , 
    .参数 systeminformationclass, 整数型, , 
    .参数 systeminformation, 系统时间数据, , 
    .参数 systeminformationlength, 整数型, , 
    .参数 returnlength, 整数型, , 

.DLL命令 GetAdaptersInfo, 整数型, "IPHLPAPI.DLL", "GetAdaptersInfo", , 
    .参数 pAdapterInfo, 字节集, 传址, 
    .参数 pOutBufLen, 整数型, 传址, 

.DLL命令 RtlMoveMemory_IP_ADAPTER_INFO, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标, IP_ADAPTER_INFO, 传址, any
    .参数 缓冲区, 字节集, , any
    .参数 尺寸, 整数型, , 

.DLL命令 GlobalMemoryStatus, 整数型, "kernel32", "GlobalMemoryStatus", , 
    .参数 缓冲区结构, 内存状态_, , lpBuffer

.DLL命令 lstrcpyn_LVCOLUMN, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, LVCOLUMN, 传址, 
    .参数 源, LVCOLUMN, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 lstrcpyn_LVITEM, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, LVITEM, 传址, 
    .参数 源, LVITEM, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 dwFlags, 整数型, , 
    .参数 th32ProcessID, 整数型, , 

.DLL命令 Process32First, 整数型, "", "Process32First", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 timeKillEvent, 整数型, "winmm.dll", "timeKillEvent", , 
    .参数 uID, 整数型, , 

.DLL命令 timeSetEvent, 整数型, "winmm.dll", "timeSetEvent", , 
    .参数 uDelay, 整数型, , 
    .参数 uResolution, 整数型, , 
    .参数 lpFunction, 子程序指针, , 
    .参数 dwUser, 整数型, , 
    .参数 uFlags, 整数型, , 

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）  复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;

.DLL命令 API_取Window和DOS版本扩展, 整数型, "", "GetVersionExA", , 在一个OSVERSIONINFO结构中载入与平台和操作系统有关的版本信息  非零表示成功，零表示失败
    .参数 版本, OSVERSIONINFO, , OSVERSIONINFO，用于装载版本信息的结构。在正式调用函数之前，必须先将这个结构的dwOSVersionInfoSize字段设为结构的大小（148）;

.DLL命令 API_OpenSCManager, 整数型, "advapi32.dll", "OpenSCManagerA", , 连接服务控件管理器
    .参数 lpMachineName, 整数型, , 
    .参数 lpDatabaseName, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 

.DLL命令 API_EnumServicesStatusEx, 整数型, "ADVAPI32.DLL", "EnumServicesStatusExA", , 
    .参数 hSCManager, 整数型, , 
    .参数 InfoLevel, 整数型, , 
    .参数 dwServiceType, 整数型, , 
    .参数 dwServiceState, 整数型, , 
    .参数 lpServices, 字节集, 传址, 
    .参数 cbBufSize, 整数型, , 
    .参数 pcbBytesNeeded, 整数型, 传址, 
    .参数 lpServicesReturned, 整数型, 传址, 
    .参数 lpResumeHandle, 整数型, , 
    .参数 pszGroupName, 整数型, , 

.DLL命令 RtlMoveMemory_ENUM_SERVICE_STATUS_PROCESS, 整数型, "", "RtlMoveMemory", , 
    .参数 Destination, ENUM_SERVICE_STATUS_PROCESS, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 TextOut, 整数型, "gdi32", "TextOutA", , 
    .参数 hdc, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 nCount, 整数型, , 

.DLL命令 StrokePath, 整数型, "gdi32", "StrokePath", , 
    .参数 hdc, 整数型, , 

.DLL命令 SetBkMode, 整数型, "gdi32", "SetBkMode", , 
    .参数 hdc, 整数型, , 
    .参数 nBkMode, 整数型, , 

.DLL命令 GetWindowDC, 整数型, "user32", "GetWindowDC", , 获取窗口全部设备场景
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;  

.DLL命令 GetDateFormat, 整数型, "kernel32.dll", "GetDateFormatA", , 针对指定的“当地”格式，对一个系统日期进行格式化  格式化过后的字串的长度。零表示出错，会将GetLastError设置为下述值之一：ERROR_INSUFFICIENT_BUFFER，ERROR_INVALID_FLAGS，ERROR_INVALID_PARAMETER
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数――即使它们已由用户取代。用DATE_SHORTDATE 或 DATE_LONGDATE选择不同的日期格式
    .参数 日期结构, 系统时间, 传址, lpDate，包含了一个系统日期的结构
    .参数 格式化, 文本型, 传址, lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。否则包含一个日期格式字串。对d,dd,ddd,dddd,m,mm,mmm,mmmm,y,yy,yyyy这样的代码，它们的用法与在vb格式命令中的用法是相同的。注意用gg指定一个“纪元”
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 GetTimeForma, 整数型, "kernel32.dll", "GetTimeFormatA", , 针对指定的“当地”格式，对一个系统时间进行格式化。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数――即使它们已由用户取代。
    .参数 时间结构, 系统时间, 传址, lpDate，SYSTEMTIME，用于包容系统时间的一个结构
    .参数 格式化, 文本型, 传址, lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。否则包含一个时间格式字串。对h,hh,hhh,hhhh,m,mm,s,ss这样的代码来说，它们的用法与在vb格式命令中的用法是相同的。t和tt用于指定一个时间段标志（A或AM，P或PM）
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 GetProcessTimes, 整数型, "kernel32", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpCreationTime, FILETIME, 传址, 
    .参数 lpExitTime, FILETIME, 传址, 
    .参数 lpKernelTime, FILETIME, 传址, 
    .参数 lpUserTime, FILETIME, 传址, 

.DLL命令 FileTimeToLocalFileTime, 整数型, "kernel32", "", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpLocalFileTime, FILETIME, 传址, 

.DLL命令 FileTimeToSystemTime, 整数型, "kernel32", "", , 
    .参数 lpFileTime, FILETIME, 传址, 
    .参数 lpSystemTime, 系统时间, 传址, 

.DLL命令 PostQuitMessage, 空白型, "user32", "PostQuitMessage", , 
    .参数 nExitCode, 整数型, , 

.DLL命令 Module32First, 整数型, "", "Module32First", , 
    .参数 hsnap, 整数型, , 
    .参数 mod, 模块信息, , 

.DLL命令 RtlAdjustPrivilege, 整数型, "ntdll.dll", "", , 
    .参数 se_, 整数型, , 
    .参数 true_, 逻辑型, , 
    .参数 hprocess, 整数型, , 
    .参数 ret, 整数型, 传址, 

.DLL命令 MessageBox, 整数型, "user32", "MessageBoxA", , 建立消息框窗体
    .参数 hwnd, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 lpCaption, 文本型, , 
    .参数 wType, 整数型, , 

.程序集 启动程序集, , , 

.程序集变量 图标句柄, 整数型, , , 
.程序集变量 主hwnd, 整数型, , , 
.程序集变量 主菜单句柄, 整数型, , , 
.程序集变量 托盘操作, 托盘操作类, , , 
.程序集变量 liOldIdleTime, 双精度小数型, , , 
.程序集变量 系统时间, 双精度小数型, , , 
.程序集变量 类型, 整数型, , , 
.程序集变量 进度条hdc, 整数型, , "4", 
.程序集变量 时钟ID, 整数型, , "2", 
.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
.局部变量 实例句柄, 整数型, , , 

 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

InitCommonControls ()
赋值 (实例句柄, GetModuleHandle (0))
赋值 (图标句柄, LoadIcon (实例句柄, 129))
提升权限 ()
DialogBoxParam (实例句柄, 1000, 0, &消息处理, 0)
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 消息处理, 整数型, , 
.参数 hwnd, 整数型, , 
.参数 msg, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 参数, 整数型, , "1", 
.局部变量 标题, 文本型, , , 

.如果真 (等于 (msg, 272))
    窗口_创建完毕 (hwnd)
    返回 (1)
.如果真结束
.如果真 (等于 (msg, 273))
    .如果真 (等于 (wparam, #按钮1))
        赋值 (类型, 1)
        DialogBoxParam (GetModuleHandle (0), 1100, 0, &消息处理, 0)
    .如果真结束
    .如果真 (等于 (wparam, #按钮2))
        赋值 (类型, 0)
        DialogBoxParam (GetModuleHandle (0), 1100, 0, &消息处理, 0)
    .如果真结束
    .如果真 (等于 (wparam, #菜单1))
        SendMessage (hwnd, 273, #按钮1, 0)
    .如果真结束
    .如果真 (等于 (wparam, #菜单2))
        SendMessage (hwnd, 273, #按钮2, 0)
    .如果真结束
    .如果真 (等于 (wparam, #菜单3))
        MessageBox (0, “作者:为你芯冻,QQ:514543271”, “欢迎使用”, 0)
    .如果真结束
    .如果真 (等于 (wparam, #菜单4))
        KillTimer (hwnd, 100)
        KillTimer (hwnd, 200)
        托盘操作.销毁托盘图标 ()
        EndDialog (hwnd, 0)
        PostQuitMessage (0)
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.如果真结束
.如果真 (等于 (msg, 2000))
    .如果真 (或者 (等于 (lparam, 514), 等于 (lparam, 517), 等于 (lparam, 515)))
        赋值 (参数 [1], lparam)
        CallWindowProc_整数 ({ 85, 139, 236, 86, 139, 117, 16, 141, 78, 255, 133, 201, 124, 21, 139, 69, 12, 141, 4, 136, 65, 139, 16, 137, 85, 16, 255, 117, 16, 131, 232, 4, 73, 117, 242, 255, 85, 8, 137, 69, 12, 139, 69, 20, 133, 192, 116, 13, 141, 4, 181, 0, 0, 0, 0, 137, 69, 16, 3, 101, 16, 139, 69, 12, 94, 93, 194, 16, 0 }, 托盘信息.托盘事件, 参数, 1, 假)
    .如果真结束
    
.如果真结束
.如果真 (等于 (msg, 5))
    .如果真 (等于 (hwnd, 主hwnd))
        .如果真 (并且 (等于 (wparam, 1), 等于 (lparam, 0)))
            ShowWindow (hwnd, 0)
            KillTimer (hwnd, 100)
            KillTimer (hwnd, 200)
        .如果真结束
        .如果真 (并且 (等于 (wparam, 0), 等于 (lparam, 7733637)))
            ShowWindow (hwnd, 4)
            SetForegroundWindow (hwnd)
            SetTimer (hwnd, 100, 1000, &时钟1_时钟周期)
            SetTimer (hwnd, 200, 1000, &时钟2_时钟周期)
        .如果真结束
        
    .如果真结束
    
.如果真结束
.如果真 (等于 (msg, 16))
    .判断开始 (不等于 (hwnd, 主hwnd))
        赋值 (标题, 取空白文本 (255))
        GetWindowText (hwnd, 标题, 256)
        .如果真 (等于 (标题, “进程列表”))
            timeKillEvent (时钟ID [1])
        .如果真结束
        .如果真 (等于 (标题, “服务列表”))
            timeKillEvent (时钟ID [2])
        .如果真结束
        EndDialog (hwnd, 0)
    .默认
        SendMessage (hwnd, 5, 1, 0)
    .判断结束
    返回 (1)
.如果真结束
返回 (0)

.子程序 窗口_创建完毕, 空白型, , 
.参数 hwnd, 整数型, , 

.局部变量 流量记录, MIB_IFROW, , "0", 
.局部变量 时间信息, 系统时间数据, , , 
.局部变量 SysPerfInfo, 系统PERFORMACE数据, , , 

SendMessage (hwnd, 128, 0, 图标句柄)
SendMessage (hwnd, 128, 1, 图标句柄)
SetWindowLong (hwnd, -8, 1028)
.判断开始 (等于 (主hwnd, 0))
    NtQuerySystemInformation_系统时间 (3, 时间信息, 32, 0)
    NtQuerySystemInformation_系统PERFORMACE (2, SysPerfInfo, 312, 0)
    赋值 (liOldIdleTime, SysPerfInfo.liIdleTime)
    赋值 (系统时间, 时间信息.系统时间)
    赋值 (主hwnd, hwnd)
    赋值 (主菜单句柄, GetMenu (hwnd))
    赋值 (主菜单句柄, GetSubMenu (主菜单句柄, 0))
    SetMenu (hwnd, 0)
    SendMessage (GetDlgItem (主hwnd, #进度条1), 1033, 1, #红色)
    SendMessage (GetDlgItem (主hwnd, #进度条3), 1033, 1, #品红)
    SendMessage (GetDlgItem (主hwnd, #进度条4), 1033, 1, #天蓝)
    SendMessage (GetDlgItem (主hwnd, #进度条2), 1033, 1, #墨绿)
    赋值 (进度条hdc [1], GetWindowDC (GetDlgItem (主hwnd, #进度条1)))
    SetBkMode (进度条hdc [1], 1)
    赋值 (进度条hdc [2], GetWindowDC (GetDlgItem (主hwnd, #进度条2)))
    SetBkMode (进度条hdc [2], 1)
    赋值 (进度条hdc [3], GetWindowDC (GetDlgItem (主hwnd, #进度条3)))
    SetBkMode (进度条hdc [3], 1)
    赋值 (进度条hdc [4], GetWindowDC (GetDlgItem (主hwnd, #进度条4)))
    SetBkMode (进度条hdc [4], 1)
    托盘操作.创建托盘图标 (hwnd, , “系统信息监测工具”, &托盘事件)
    SetTimer (hwnd, 100, 1000, &时钟1_时钟周期)
    SetTimer (hwnd, 200, 1000, &时钟2_时钟周期)
.默认
    .如果真 (等于 (类型, 1))
        SetWindowText (hwnd, “进程列表”)
        SendMessage (GetDlgItem (hwnd, #超级列表框1), 4238, 1, 0)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 0, “进程名”, 143)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 1, “进程ID”)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 2, “进程创建时间”, 120)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 3, “进程路径”, 275)
        时钟3_时钟周期 (0, 0, GetDlgItem (hwnd, #超级列表框1), 0, 0)
        赋值 (时钟ID [1], timeSetEvent (5000, 0, &时钟3_时钟周期, GetDlgItem (hwnd, #超级列表框1), 1))
    .如果真结束
    .如果真 (等于 (类型, 0))
        SetWindowText (hwnd, “服务列表”)
        SendMessage (GetDlgItem (hwnd, #超级列表框1), 4238, 1, 0)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 0, “服务名”, 177)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 1, “描述”, 200)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 2, “状态”, 60)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 3, “启动类型”, 80)
        超级列表框插入列 (GetDlgItem (hwnd, #超级列表框1), 4, “登录为”, 70)
        枚举服务 (GetDlgItem (hwnd, #超级列表框1))
        赋值 (时钟ID [2], timeSetEvent (20000, 0, &时钟4_时钟周期, GetDlgItem (hwnd, #超级列表框1), 1))
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.判断结束


.子程序 时钟4_时钟周期, 空白型, , 
.参数 id, 整数型, , 
.参数 msg, 整数型, , 
.参数 user, 整数型, , 

枚举服务 (user)

.子程序 时钟3_时钟周期, 空白型, , 
.参数 id, 整数型, , 
.参数 msg, 整数型, , 
.参数 user, 整数型, , 
.参数 dw1, 整数型, , 
.参数 dw2, 整数型, , 

.局部变量 进程名, 文本型, , "0", 
.局部变量 进程路径, 文本型, , "0", 
.局部变量 进程ID, 整数型, , "0", 
.局部变量 表项索引, 整数型, , , 
.局部变量 次数, 整数型, , , 

超级列表框全部删除 (user)
枚举进程 (进程ID, 进程名, 进程路径)
.计次循环首 (取数组成员数 (进程ID), 次数)
    赋值 (表项索引, 超级列表框插入项 (user, , 进程名 [次数]))
    超级列表框置标题 (user, 表项索引, 1, 到文本 (进程ID [次数]))
    超级列表框置标题 (user, 表项索引, 2, 取得进程创建时间 (进程ID [次数]))
    超级列表框置标题 (user, 表项索引, 3, 进程路径 [次数])
.计次循环尾 ()

.子程序 超级列表框插入列, 整数型, , 
.参数 句柄, 整数型, , 
.参数 插入位置, 整数型, 可空, 可以被省略。指定新列插入时的位置索引，索引值从 0 开始。如果提供 -1 ，则插入到尾部。如果本参数被省略，默认值为 -1 。
.参数 标题, 文本型, 可空, 可以被省略。本参数指定报表列的标题文本。如果被省略，默认值为空文本。
.参数 列宽, 整数型, 可空, 可以被省略。本参数指定报表列的宽度，单位为像素。如果被省略，默认值为 50 。
.参数 对齐方式, 整数型, 可空, 可以被省略。参数可以为以下常量之一： 0：#左对齐； 1：#中间对齐； 2：#右对齐。如果本参数被省略，默认值为“#左对齐”。
.参数 图片索引, 整数型, 可空, 可以被省略。图片索引用于指定“表头图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。
.参数 图片是否居右, 逻辑型, 可空, 可以被省略。指定图片是否显示在右边，如果本参数被省略，默认值为假。

.局部变量 单一列, LVCOLUMN, , , 
.局部变量 项目地址, 整数型, , , 

.如果真 (或者 (是否为空 (插入位置), 等于 (插入位置, -1)))
    赋值 (插入位置, 超级列表框取列数 (句柄))
.如果真结束
赋值 (单一列.mask, 6)
赋值 (单一列.pszText, 标题)
.判断开始 (是否为空 (列宽))
    赋值 (单一列.CX, 50)
.默认
    赋值 (单一列.CX, 列宽)
.判断结束
.判断开始 (或者 (是否为空 (对齐方式), 等于 (对齐方式, #左对齐)))
    赋值 (单一列.fmt, 0)
.判断 (等于 (对齐方式, #右对齐))
    赋值 (单一列.fmt, 1)
.判断 (等于 (对齐方式, #中间对齐))
    赋值 (单一列.fmt, 2)
.默认
    
.判断结束
.判断开始 (是否为空 (图片索引))
    赋值 (单一列.iImage, -1)
.默认
    赋值 (单一列.iImage, 图片索引)
.判断结束
.如果真 (图片是否居右)
    赋值 (单一列.fmt, 位或 (单一列.fmt, 4096))
.如果真结束
赋值 (项目地址, lstrcpyn_LVCOLUMN (单一列, 单一列, 0))
返回 (SendMessage (句柄, 4123, 插入位置, 项目地址))

.子程序 超级列表框插入项, 整数型, , 
.参数 句柄, 整数型, , 
.参数 插入位置, 整数型, 可空, 可以被省略。指定新表项插入时的位置索引，索引值从 0 开始。如果提供 -1 ，则插入到列表框的尾部。如果本参数被省略，默认值为 -1 。
.参数 标题, 文本型, 可空, 可以被省略。本参数指定表项的标题文本。如果被省略，默认值为空文本。
.参数 图片索引, 整数型, 可空, 可以被省略。图片索引用于指定“图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。
.参数 状态图片索引, 整数型, 可空, 可以被省略。状态图片索引用于指定“状态图片组”属性中的某张图片。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。
.参数 缩进数目, 整数型, 可空, 可以被省略。“缩进数目”仅在报表型列表框才有效，用作指定显示时在表项首部增加的空白数。如果本参数被省略，默认值为 0 。
.参数 表项数值, 整数型, 可空, 可以被省略。该数值与指定表项相关联。如果本参数被省略，默认值为 0 。

.局部变量 单一项目, LVITEM, , , 
.局部变量 项目地址, 整数型, , , 

.如果真 (是否为空 (图片索引))
    赋值 (图片索引, -1)
.如果真结束
.如果真 (是否为空 (状态图片索引))
    赋值 (状态图片索引, -1)
.如果真结束
.判断开始 (或者 (是否为空 (插入位置), 等于 (插入位置, -1)))
    赋值 (单一项目.iItem, 超级列表框取项数 (句柄))
.默认
    赋值 (单一项目.iItem, 插入位置)
.判断结束
赋值 (单一项目.mask, 相加 (4103, 8))
赋值 (单一项目.pszText, 标题)
赋值 (单一项目.iImage, 图片索引)
赋值 (单一项目.state, 相乘 (相加 (状态图片索引, 1), 4096))
赋值 (单一项目.stateMask, -4096)
赋值 (单一项目.iIndent, 缩进数目)
赋值 (单一项目.lParam, 表项数值)
赋值 (项目地址, lstrcpyn_LVITEM (单一项目, 单一项目, 0))
返回 (SendMessage (句柄, 4103, 0, 项目地址))

.子程序 超级列表框置标题, 空白型, , 设置指定表项或子项的标题。
.参数 句柄, 整数型, , 
.参数 表项索引, 整数型, , 用于指定列表框中的某一项目，索引值从 0 开始。
.参数 列索引, 整数型, 可空, 可以被省略。用作指定报表型列表框中项目所处的列，索引值从 0 开始，如果当前列表框类型不是报表型列表框，提供 0 值即可。如果本参数被省略，默认值为 0 。
.参数 标题, 文本型, 可空, 可以被省略。本参数指定表项或子项的标题文本。如果被省略，默认值为空文本。

.局部变量 单一项目, LVITEM, , , 
.局部变量 项目地址, 整数型, , , 

赋值 (单一项目.iItem, 表项索引)
赋值 (单一项目.iSubItem, 列索引)
赋值 (单一项目.mask, 1)
赋值 (单一项目.pszText, 标题)
赋值 (项目地址, lstrcpyn_LVITEM (单一项目, 单一项目, 0))
SendMessage (句柄, 4102, 0, 项目地址)

.子程序 超级列表框取列数, 整数型, , 
.参数 句柄, 整数型, , 

.局部变量 表头句柄, 整数型, , , 
.局部变量 目标句柄, 整数型, , , 

赋值 (表头句柄, SendMessage (目标句柄, 4127, 0, 0))
返回 (SendMessage (表头句柄, 4608, 0, 0))

.子程序 超级列表框取项数, 整数型, , 
.参数 句柄, 整数型, , 

返回 (SendMessage (句柄, 4100, 0, 0))

.子程序 超级列表框全部删除, 空白型, , 
.参数 句柄, 整数型, , 

SendMessage (句柄, 4105, 0, 0)

.子程序 时钟2_时钟周期, 空白型, , 
.局部变量 脚本组件, 脚本组件, 静态, , 

脚本组件.执行代码 (#取CPU温度)
SetWindowText (GetDlgItem (主hwnd, #标签1), 相加 (“CPU温度:”, 脚本组件.运行 (“GetCPUTemp”), “°”))
SetWindowText (GetDlgItem (主hwnd, #标签2), 相加 (“本机IP:”, GetIP ()))

.子程序 时钟1_时钟周期, 空白型, , 
.局部变量 CPU使用度, 整数型, , , 
.局部变量 内存使用度, 整数型, , , 
.局部变量 范围, RECT, , , 
.局部变量 文本位置, POINTAPI, , , 

赋值 (CPU使用度, 取CPU使用度 ())
SendMessage (GetDlgItem (主hwnd, #进度条1), 1026, CPU使用度, 0)
赋值 (范围.左, 50)
赋值 (范围.右, 100)
赋值 (范围.底, 9)
赋值 (文本位置, 文本居中 (相加 (到文本 (CPU使用度), “%”), 12, 范围))
添加文本 (进度条hdc [1], 相加 (到文本 (CPU使用度), “%”), 文本位置.横向位置, 文本位置.纵向位置)
取流量记录 ()
赋值 (内存使用度, 取内存使用度 ())
SendMessage (GetDlgItem (主hwnd, #进度条2), 1026, 内存使用度, 0)
赋值 (范围.左, 50)
赋值 (范围.右, 100)
赋值 (范围.底, 9)
赋值 (文本位置, 文本居中 (相加 (到文本 (内存使用度), “%”), 12, 范围))
添加文本 (进度条hdc [2], 相加 (到文本 (内存使用度), “%”), 文本位置.横向位置, 文本位置.纵向位置)

.子程序 添加文本, 逻辑型, , 
.参数 hdc, 整数型, , 
.参数 文本, 文本型, , 
.参数 左边, 整数型, , 
.参数 顶边, 整数型, , 

.局部变量 返回值, 整数型, , , 

赋值 (返回值, TextOut (hdc, 左边, 顶边, 文本, 取文本长度 (文本)))
StrokePath (hdc)
返回 (等于 (返回值, 1))

.子程序 文本居中, POINTAPI, , 
.参数 文本, 文本型, , 
.参数 文字大小, 整数型, , 
.参数 范围, RECT, , 

.局部变量 文本长度, 双精度小数型, , , 
.局部变量 总宽度, 双精度小数型, , , 
.局部变量 总高度, 双精度小数型, , , 
.局部变量 范围宽度, 整数型, , , 
.局部变量 范围高度, 整数型, , , 
.局部变量 返回坐标, POINTAPI, , , 

赋值 (文本长度, 相除 (取文本长度 (文本), 2))
赋值 (总宽度, 相乘 (文本长度, 文字大小))
赋值 (总高度, 文字大小)
赋值 (范围宽度, 相减 (范围.右, 范围.左))
赋值 (范围高度, 相减 (范围.底, 范围.顶))
赋值 (返回坐标.横向位置, 相除 (相减 (范围宽度, 总宽度), 2))
赋值 (返回坐标.纵向位置, 相除 (相减 (范围高度, 总高度), 2))
赋值 (返回坐标.横向位置, 相加 (返回坐标.横向位置, 范围.左))
赋值 (返回坐标.纵向位置, 相加 (返回坐标.纵向位置, 范围.顶))
返回 (返回坐标)

.子程序 取内存使用度, 整数型, , 
.局部变量 内存状态, 内存状态_, , , 

GlobalMemoryStatus (内存状态)
返回 (内存状态.实际存储器百分比)

.子程序 托盘事件, 空白型, , 
.参数 事件类型, 整数型, , 

.如果真 (等于 (事件类型, 515))
    SendMessage (主hwnd, 5, 0, 7733637)
.如果真结束
.如果真 (等于 (事件类型, 517))
    TrackPopupMenu (主菜单句柄, 0, 取鼠标水平位置 (), 取鼠标垂直位置 (), 0, 主hwnd, 0)
.如果真结束
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 取流量记录, 空白型, , 
.局部变量 信息记录, MIB_IFROW, 静态, "0", 
.局部变量 成员数, 整数型, , , 
.局部变量 信息集, 字节集, , , 
.局部变量 缓冲区尺寸, 整数型, , , 
.局部变量 起始位, 整数型, , , 
.局部变量 整数容器, 整数型, , , 
.局部变量 发送速率, 整数型, , , 
.局部变量 接收速率, 整数型, , , 
.局部变量 原接收总计, 整数型, 静态, , 
.局部变量 原发送总计, 整数型, 静态, , 
.局部变量 接收, 文本型, , , 
.局部变量 发送, 文本型, , , 
.局部变量 范围, RECT, , , 
.局部变量 文本位置, POINTAPI, , , 

GetIfTable ({ 0 }, 缓冲区尺寸, 0)
.如果真 (小于或等于 (缓冲区尺寸, 0))
    返回 ()
.如果真结束
赋值 (信息集, 取空白字节集 (缓冲区尺寸))
.如果真 (不等于 (GetIfTable (信息集, 缓冲区尺寸, 1), 0))
    返回 ()
.如果真结束
赋值 (成员数, 取字节集数据 (取字节集左边 (信息集, 4), #整数型, ))
赋值 (信息集, 取字节集右边 (信息集, 相减 (缓冲区尺寸, 4)))
重定义数组 (信息记录, 假, 成员数)
.计次循环首 (成员数, 整数容器)
    赋值 (起始位, 相乘 (相减 (整数容器, 1), 860))
    赋值 (信息记录 [整数容器], dwInOctets, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 553), 4), #整数型, ))
    赋值 (信息记录 [整数容器], dwOutOctets, 取字节集数据 (取字节集中间 (信息集, 相加 (起始位, 577), 4), #整数型, ))
.计次循环尾 ()
.如果真 (等于 (原接收总计, 0))
    赋值 (原接收总计, 信息记录 [取数组成员数 (信息记录)].dwInOctets)
.如果真结束
赋值 (接收速率, 相减 (信息记录 [取数组成员数 (信息记录)].dwInOctets, 原接收总计))
赋值 (接收, 数值到格式文本 (相除 (接收速率, 1024), 2, 假))
赋值 (原接收总计, 信息记录 [取数组成员数 (信息记录)].dwInOctets)
SendMessage (GetDlgItem (主hwnd, #进度条3), 1026, 到整数 (接收), 0)
赋值 (范围.左, 50)
赋值 (范围.右, 100)
赋值 (范围.底, 9)
赋值 (文本位置, 文本居中 (相加 (接收, “%”), 12, 范围))
添加文本 (进度条hdc [3], 相加 (接收, “%”), 文本位置.横向位置, 文本位置.纵向位置)
.如果真 (等于 (原发送总计, 0))
    赋值 (原发送总计, 信息记录 [取数组成员数 (信息记录)].dwOutOctets)
.如果真结束
赋值 (发送速率, 相减 (信息记录 [取数组成员数 (信息记录)].dwOutOctets, 原发送总计))
赋值 (发送, 数值到格式文本 (相除 (发送速率, 1024), 2, 假))
赋值 (原发送总计, 信息记录 [取数组成员数 (信息记录)].dwOutOctets)
SendMessage (GetDlgItem (主hwnd, #进度条4), 1026, 到整数 (发送), 0)
赋值 (范围.左, 50)
赋值 (范围.右, 100)
赋值 (范围.底, 9)
赋值 (文本位置, 文本居中 (相加 (发送, “%”), 12, 范围))
添加文本 (进度条hdc [4], 相加 (发送, “%”), 文本位置.横向位置, 文本位置.纵向位置)

.子程序 取CPU使用度, 整数型, , 
.局部变量 时间信息, 系统时间数据, , , 
.局部变量 SysPerfInfo, 系统PERFORMACE数据, , , 
.局部变量 dbIdleTime, 双精度小数型, , , 
.局部变量 dbSystemTime, 双精度小数型, , , 
.局部变量 CPU信息, 系统信息_, , , 

取CPU系统信息 (CPU信息)
NtQuerySystemInformation_系统时间 (3, 时间信息, 32, 0)
NtQuerySystemInformation_系统PERFORMACE (2, SysPerfInfo, 312, 0)
赋值 (dbIdleTime, 相减 (数据换算 (SysPerfInfo.liIdleTime), 数据换算 (liOldIdleTime)))
赋值 (dbSystemTime, 相减 (数据换算 (时间信息.系统时间), 数据换算 (系统时间)))
赋值 (liOldIdleTime, SysPerfInfo.liIdleTime)
赋值 (系统时间, 时间信息.系统时间)
赋值 (dbIdleTime, 相除 (dbIdleTime, dbSystemTime))
赋值 (dbIdleTime, 相减 (100, 相除 (相乘 (dbIdleTime, 100), CPU信息.处理器数量)))
返回 (到整数 (dbIdleTime))

.子程序 数据换算, 双精度小数型, , 
.参数 x, 长整数型, , 

.局部变量 h, 整数型, , , 
.局部变量 l, 整数型, , , 
.局部变量 k, 文本型, , , 

赋值 (k, 取十六进制文本 (x))
赋值 (k, 相加 (取重复文本 (相减 (16, 取文本长度 (k)), “0”), k))
赋值 (h, 十六进制文本到整数 (取文本左边 (k, 8)))
赋值 (l, 十六进制文本到整数 (取文本右边 (k, 8)))
返回 (相加 (相乘 (h, 4294967296), l))

.子程序 十六进制文本到整数, 整数型, , 
.参数 欲转换十六进制文本, 文本型, , 长度不得大于八位，也不得有非法字符，否则返回-1

.局部变量 大写文本, 文本型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 代码, 整数型, , , 
.局部变量 n, 整数型, , , 

赋值 (文本长度, 取文本长度 (欲转换十六进制文本))
.如果真 (大于 (文本长度, 8))
    返回 (-1)
.如果真结束
赋值 (大写文本, 到大写 (欲转换十六进制文本))
赋值 (n, 0)
.计次循环首 (文本长度, 循环次数)
    赋值 (代码, 取代码 (大写文本, 相加 (相减 (文本长度, 循环次数), 1)))
    .如果 (并且 (大于或等于 (代码, 65), 小于或等于 (代码, 70)))
        赋值 (n, 相加 (n, 相乘 (相减 (代码, 55), 求次方 (16, 相减 (循环次数, 1)))))
    .否则
        .如果 (并且 (大于或等于 (代码, 48), 小于或等于 (代码, 57)))
            赋值 (n, 相加 (n, 相乘 (相减 (代码, 48), 求次方 (16, 相减 (循环次数, 1)))))
        .否则
            返回 (-1)
        .如果结束
        
    .如果结束
    
.计次循环尾 ()
返回 (n)

.子程序 GetIP, 文本型, , 
.局部变量 error, 整数型, , , 
.局部变量 AdapterInfo, IP_ADAPTER_INFO, , , 
.局部变量 AdapterInfoSize, 整数型, , , 
.局部变量 AdapterInfoBuffer, 字节集, , , 
.局部变量 result, 文本型, , , 

赋值 (error, GetAdaptersInfo ({  }, AdapterInfoSize))
.如果真 (等于 (error, 111))
    赋值 (AdapterInfoBuffer, 取空白字节集 (AdapterInfoSize))
    赋值 (error, GetAdaptersInfo (AdapterInfoBuffer, AdapterInfoSize))
    .如果真 (等于 (error, 0))
        RtlMoveMemory_IP_ADAPTER_INFO (AdapterInfo, AdapterInfoBuffer, AdapterInfoSize)
        赋值 (result, 到文本 (AdapterInfo.IpAddressList.IpAddress.IpAddr))
    .如果真结束
    
.如果真结束
返回 (result)

.子程序 枚举进程, 空白型, , 
.参数 进程ID, 整数型, 数组, 
.参数 进程列表, 文本型, 数组, 
.参数 进程路径, 文本型, 数组, 

.局部变量 hSnapShot, 整数型, , , 
.局部变量 End, 整数型, , , 
.局部变量 buffer, PROCESSENTRY32, , , 
.局部变量 pid, 整数型, , , 

清除数组 (进程列表)
清除数组 (进程ID)
清除数组 (进程路径)
赋值 (pid, -1)
赋值 (hSnapShot, CreateToolhelp32Snapshot (2, 0))
赋值 (buffer.dwSize, 296)
赋值 (End, Process32First (hSnapShot, buffer))
.判断循环首 (不等于 (End, 0))
    赋值 (pid, buffer.th32ProcessID)
    加入成员 (进程列表, 到小写 (到文本 (buffer.szExeFile)))
    加入成员 (进程路径, 取模块路径 (pid))
    加入成员 (进程ID, pid)
    赋值 (End, Process32Next (hSnapShot, buffer))
.判断循环尾 ()
CloseHandle (hSnapShot)

.子程序 枚举服务, 空白型, , 
.参数 句柄, 整数型, , 

.局部变量 版本信息, OSVERSIONINFO, , , 
.局部变量 Status, 字节集, , , 
.局部变量 StatusSize, 整数型, , , 
.局部变量 服务数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 Service, ENUM_SERVICE_STATUS_PROCESS, , , 
.局部变量 表项索引, 整数型, , , 
.局部变量 SC句柄, 整数型, , , 

赋值 (版本信息.dwOSVersionInfoSize, 148)
.如果 (不等于 (API_取Window和DOS版本扩展 (版本信息), 0))
    .如果 (小于或等于 (版本信息.dwMajorVersion, 4))
        信息框 (“您的系统不是Windows 2000/XP”, 48, )
        结束 ()
    .否则
        ' 本源码来自易语言资源网(www.wodesoft.com)
    .如果结束
    
.否则
    信息框 (“取系统版本失败”, 48, )
    结束 ()
.如果结束
赋值 (SC句柄, API_OpenSCManager (0, 0, 4))
.如果真 (等于 (SC句柄, 0))
    信息框 (“查看服务失败。。可能权限不够”, 16, )
    结束 ()
.如果真结束
API_EnumServicesStatusEx (SC句柄, 0, 48, 3, Status, 0, StatusSize, 服务数, 0, 0)
赋值 (Status, 取空白字节集 (StatusSize))
.如果真 (等于 (API_EnumServicesStatusEx (SC句柄, 0, 48, 3, Status, StatusSize, StatusSize, 服务数, 0, 0), 0))
    信息框 (“查看服务失败”, 48, )
    结束 ()
.如果真结束
.计次循环首 (服务数, i)
    RtlMoveMemory_ENUM_SERVICE_STATUS_PROCESS (Service, 取字节集中间 (Status, 相减 (相乘 (i, 44), 43), 44), 44)
    赋值 (表项索引, 超级列表框插入项 (句柄, , Service.lpDisplayName))
    超级列表框置标题 (句柄, 表项索引, 1, 取文本注册项 (4, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Description”), ))
    .判断开始 (等于 (取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\ObjectName”), ), “LocalSystem”))
        超级列表框置标题 (句柄, 表项索引, 4, “本地系统”)
    .判断 (等于 (取文本注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\ObjectName”), ), “NT AUTHORITY\LocalService”))
        超级列表框置标题 (句柄, 表项索引, 4, “本地服务”)
    .默认
        超级列表框置标题 (句柄, 表项索引, 4, “网络服务”)
    .判断结束
    超级列表框置标题 (句柄, 表项索引, 2, 状态 (Service.dwCurrentState))
    .判断开始 (等于 (取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Start”), ), 2))
        超级列表框置标题 (句柄, 表项索引, 3, “自动”)
    .判断 (等于 (取数值注册项 (#本地机器, 相加 (“SYSTEM\CurrentControlSet\Services\”, Service.lpServiceName, “\Start”), ), 3))
        超级列表框置标题 (句柄, 表项索引, 3, “手动”)
    .默认
        超级列表框置标题 (句柄, 表项索引, 3, “已禁用”)
    .判断结束
    
.计次循环尾 ()

.子程序 状态, 文本型, , 
.参数 N, 整数型, , 

.如果真 (并且 (大于或等于 (N, 1), 小于或等于 (N, 7)))
    返回 (多项选择 (N, “已停止”, “准备开始”, “准备停止”, “正在运行”, “准备继续”, “准备暂停”, “已暂停”))
.如果真结束
返回 (相加 (“未知状态：”, 到文本 (N)))

.子程序 取得进程创建时间, 文本型, , 
.参数 参_进程PID, 整数型, , 

.局部变量 局_进程句柄, 整数型, , , 
.局部变量 ft, FILETIME, , , 
.局部变量 ft1, FILETIME, , , 
.局部变量 st, 系统时间, , , 

赋值 (局_进程句柄, OpenProcess (相加 (16, 1024), 假, 参_进程PID)) ' 进程ID得到进程句柄
GetProcessTimes (局_进程句柄, ft, ft1, ft1, ft1) ' 获取进程创建时间
CloseHandle (局_进程句柄) ' 关闭进程句柄
FileTimeToLocalFileTime (ft, ft) ' UTC时间转换为本地时间
FileTimeToSystemTime (ft, st) ' 由本地时间转换为系统时间
 ' SYSTEMTIME转换成DATE ()用这个可以转换为易语言的日期时间型
返回 (格式化时间 (st))

.子程序 格式化时间, 文本型, , 
.参数 参_时间, 系统时间, , 

.局部变量 时间1, 文本型, , , 
.局部变量 时间2, 文本型, , , 
.局部变量 局_返回时间, 文本型, , , 

赋值 (时间1, 取空白文本 (1024))
GetDateFormat (0, 0, 参_时间, “yyyy-MM-dd ”, 时间1, 取文本长度 (时间1))
赋值 (时间2, 取空白文本 (1024))
GetTimeForma (0, 0, 参_时间, “HH:mm:ss”, 时间2, 取文本长度 (时间2))
赋值 (局_返回时间, 相加 (时间1, 时间2))
返回 (局_返回时间)

.子程序 取模块路径, 文本型, , 
.参数 processid, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块信息, , , 

赋值 (snap, CreateToolhelp32Snapshot (8, processid))
.如果真 (等于 (snap, -1))
    返回 (“”)
.如果真结束
赋值 (mod.size, 1024)
Module32First (snap, mod)
返回 (取字节集数据 (到字节集 (mod.szpath), 10, ))

.子程序 提升权限, 空白型, , 
RtlAdjustPrivilege (20, 真, 0, 0)

.类模块 托盘操作类, , , 

.程序集变量 结构, NotifyIconData, , , 
.程序集变量 自身图标ID, 整数型, , , 
.程序集变量 托盘句柄, 整数型, , , 
.程序集变量 进程句柄, 整数型, , , 
.程序集变量 外部指针, 整数型, , , 
.程序集变量 外部指针2, 整数型, , , 
.程序集变量 数据地址, 整数型, , , 
.程序集变量 外部按钮信息, TBBUTTONINFO2, , , 
.程序集变量 单一按钮, TBBUTTON, , , 
.程序集变量 外部操作, 外部控件操作类, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (自身图标ID, -1)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁托盘图标 ()

.子程序 创建托盘图标, 逻辑型, , 
.参数 窗口句柄, 整数型, , 
.参数 图标, 字节集, 可空, 默认为该窗口图标
.参数 提示文本, 文本型, 可空, 
.参数 托盘事件, 子程序指针, 可空, 用一个子程序来接受托盘事件内容,该子程序需要一个整形参数

.如果真 (等于 (自身图标ID, -1))
    赋值 (托盘句柄, 取托盘区句柄 ())
    赋值 (托盘信息.托盘事件, 托盘事件)
    赋值 (结构.cbSize, LocalSize (结构))
    赋值 (结构.hwnd, 窗口句柄)
    赋值 (托盘信息.托盘图标句柄, SendMessage (窗口句柄, 127, 0, 0))
    赋值 (结构.hIcon, SendMessage (窗口句柄, 127, 0, 0))
    赋值 (结构.uID, 1)
    赋值 (结构.uFlags, 位或 (4, 2, 1))
    赋值 (结构.uCallbackMessage, 2000) ' 2000为自定义消息，你可以用1024+1或以上、65565以下的任何值
    lstrcpyn_复制 (结构.szTip, 提示文本, 相加 (取文本长度 (提示文本), 1)) ' 把文本写入字符数组
    Shell_NotifyIcon (0, 结构)
    .如果真 (等于 (是否为空 (图标), 假))
        更改托盘图标 (图标)
    .如果真结束
    赋值 (自身图标ID, 取托盘图标ID (0))
    返回 (真)
.如果真结束
返回 (假)

.子程序 销毁托盘图标, 逻辑型, , 当类销毁时自动调用该方法
.如果真 (不等于 (自身图标ID, -1))
    Shell_NotifyIcon (2, 结构)
    赋值 (自身图标ID, -1)
    返回 (真)
.如果真结束
返回 (假)

.子程序 弹出托盘气泡框, 空白型, , 
.参数 气泡内容, 文本型, , 
.参数 气泡标题, 文本型, , 
.参数 气泡图标, 整数型, , 0.无图标,1.信息图标,2.警告图标,3.错误图标

赋值 (结构.uFlags, 16) ' 气泡提示
lstrcpyn_复制 (结构.szInfo, 气泡内容, 相加 (取文本长度 (气泡内容), 1))
lstrcpyn_复制 (结构.szInfoTitle, 气泡标题, 相加 (取文本长度 (气泡标题), 1))
赋值 (结构.dwInfoFlags, 气泡图标) ' 信息图标
Shell_NotifyIcon (1, 结构)
赋值 (结构.uFlags, 0)
Shell_NotifyIcon (1, 结构)

.子程序 取托盘图标索引, 整数型, , 
.参数 图标ID, 整数型, , 

.局部变量 图标数, 整数型, , , 
.局部变量 次数, 整数型, , , 

赋值 (图标数, 取托盘图标数 ())
.计次循环首 (图标数, 次数)
    .如果真 (等于 (图标ID, 取托盘图标ID (相减 (次数, 1))))
        返回 (相减 (次数, 1))
    .如果真结束
    
.计次循环尾 ()
返回 (-1)

.子程序 取自身图标ID, 整数型, , 
返回 (自身图标ID)

.子程序 取托盘图标数, 整数型, , 取托盘图标总数
返回 (SendMessage (托盘句柄, 1048, 0, 0))

.子程序 取托盘图标ID, 整数型, , 
.参数 图标索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 大小, 整数型, , , 
.局部变量 数据, 字节集, , , 

赋值 (进程句柄, 外部操作.打开进程 (托盘句柄))
赋值 (外部指针, 外部操作.分配外部指针 (进程句柄, 18))
SendMessage (托盘句柄, 1047, 图标索引, 外部指针)
赋值 (数据, 外部操作.读外部指针数据 (进程句柄, 外部指针, 18))
RtlMoveMemory_TBBUTTON (单一按钮, 数据, 18)
外部操作.销毁外部指针 (进程句柄, 外部指针)
外部操作.结束操作 (进程句柄)
返回 (单一按钮.idCommand)

.子程序 取托盘提示文本, 文本型, ,  
.参数 图标索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 长度, 整数型, , , 
.局部变量 标题, 文本型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 ID, 整数型, , , 

赋值 (ID, 取托盘图标ID (图标索引))
赋值 (长度, SendMessage (托盘句柄, 1069, ID, 0))
赋值 (进程句柄, 外部操作.打开进程 (托盘句柄))
赋值 (外部指针, 外部操作.分配外部指针 (进程句柄, 长度))
.如果 (不等于 (SendMessage (托盘句柄, 1069, ID, 外部指针), -1))
    赋值 (数据, 外部操作.读外部指针数据 (进程句柄, 外部指针, 长度))
    外部操作.销毁外部指针 (进程句柄, 外部指针)
    外部操作.结束操作 (进程句柄)
    返回 (到文本 (数据))
.否则
    外部操作.销毁外部指针 (进程句柄, 外部指针)
    外部操作.结束操作 (进程句柄)
    返回 (“”)
.如果结束


.子程序 置托盘提示文本, 逻辑型, , 
.参数 提示文本, 文本型, 可空, 默认为空文本。

.局部变量 图标索引, 整数型, , , 
.局部变量 数据, 整数型, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 结构大小, 整数型, , , 

.如果真 (是否为空 (提示文本))
    赋值 (提示文本, “”)
.如果真结束
赋值 (图标索引, 取托盘图标索引 (自身图标ID))
赋值 (进程句柄, 外部操作.打开进程 (托盘句柄))
赋值 (外部指针, 外部操作.分配外部指针 (进程句柄, 32))
赋值 (外部指针2, 外部操作.分配外部指针 (进程句柄, 相加 (取文本长度 (提示文本), 1)))
赋值 (外部按钮信息.cbSize, 32)
赋值 (外部按钮信息.dwMask, 2147483650)
赋值 (外部按钮信息.pszText, 外部指针2)
赋值 (数据地址, lstrcpyn_整数型 (外部按钮信息.cbSize, 外部按钮信息.cbSize, 0))
赋值 (数据, lstrcpyn_文本型 (提示文本, 提示文本, 相加 (取文本长度 (提示文本), 1)))
外部操作.写进程内存 (进程句柄, 外部指针, 数据地址, 32)
外部操作.写进程内存 (进程句柄, 外部指针2, 数据, 相加 (取文本长度 (提示文本), 1))
赋值 (数据地址, lstrcpyn_整数型 (外部按钮信息.pszText, 外部按钮信息.pszText, 0))
外部操作.写进程内存 (进程句柄, 相加 (外部指针, 24), 数据地址, 32)
赋值 (返回值, SendMessage (托盘句柄, 1090, 图标索引, 外部指针))
外部操作.销毁外部指针 (进程句柄, 外部指针)
外部操作.销毁外部指针 (进程句柄, 外部指针2)
外部操作.结束操作 (进程句柄)
返回 (不等于 (返回值, 0))

.子程序 取托盘图标句柄, 整数型, , 
.参数 图标索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 地址, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 TRAYDATA, TRAYDATA, , , 

赋值 (进程句柄, 外部操作.打开进程 (托盘句柄))
赋值 (外部指针, 外部操作.分配外部指针 (进程句柄, 18))
SendMessage (托盘句柄, 1047, 图标索引, 外部指针)
赋值 (数据, 外部操作.读外部指针数据 (进程句柄, 外部指针, 18))
RtlMoveMemory_TBBUTTON (单一按钮, 数据, 18)
赋值 (数据, 外部操作.读外部指针数据 (进程句柄, 单一按钮.dwData, 24))
RtlMoveMemory_TRAYDATA (TRAYDATA, 数据, 24)
外部操作.销毁外部指针 (进程句柄, 外部指针)
外部操作.结束操作 (进程句柄)
返回 (TRAYDATA.hIcon)

.子程序 取托盘区句柄, 整数型, , 非0表示返回句柄，0表示失败。
.局部变量 系统句柄, 整数型, , , SysPager
.局部变量 句柄, 整数型, , , 
.局部变量 托盘hwnd, 整数型, , , 

赋值 (句柄, FindWindow (“Shell_TrayWnd”, 字符 (0)))
赋值 (句柄, FindWindowEx (句柄, 0, “TrayNotifyWnd”, 字符 (0)))
赋值 (系统句柄, FindWindowEx (句柄, 0, “SysPager”, 字符 (0)))
.如果真 (不等于 (系统句柄, 0))
    赋值 (句柄, 系统句柄)
.如果真结束
赋值 (托盘hwnd, FindWindowEx (句柄, 0, “ToolbarWindow32”, 字符 (0)))
.如果真 (等于 (托盘hwnd, 0))
    赋值 (托盘hwnd, 句柄)
.如果真结束
返回 (托盘hwnd)

.子程序 更改托盘图标, 空白型, , 
.参数 图标, 字节集, , 

.局部变量 图标句柄, 整数型, , , 

赋值 (图标句柄, 取内存图标句柄 (图标, 8))
赋值 (托盘信息.托盘图标句柄, 图标句柄)
赋值 (结构.hIcon, 图标句柄)
Shell_NotifyIcon (1, 结构)

.子程序 取内存图标句柄, 整数型, , 从标准ico文件数据中返回图标句柄。参考了 凌晨孤星 的代码，并自行修改了一下。
.参数 图标数据, 字节集, , 
.参数 载入规格, 整数型, 可空, 1、16×16；2、32×32；3、48×48；4、64×64；5、72×72；6、96×96；7、128×128；8、256×256.，默认为2。

.局部变量 IconDirEntry, IconDirEntry, , , 
.局部变量 图标个数, 整数型, , , 
.局部变量 计次, 整数型, , , 

.如果真 (或者 (是否为空 (载入规格), 小于 (载入规格, 1), 大于 (载入规格, 8)))
    赋值 (载入规格, 2)
.如果真结束
赋值 (图标个数, 取字节集数据 (取字节集中间 (图标数据, 5, 2), #整数型, ))
.计次循环首 (图标个数, 计次)
    RtlMoveMemory_Icon (IconDirEntry, 取字节集中间 (图标数据, 相加 (6, 相乘 (相减 (计次, 1), 16), 1), 16), 16)
    .如果真 (或者 (等于 (IconDirEntry.bWidth, 多项选择 (载入规格, 16, 32, 48, 64, 72, 96, 128, 256)), 等于 (图标个数, 计次)))
        返回 (CreateIconFromResource (取字节集中间 (图标数据, 相加 (IconDirEntry.dwImageOffset, 1), IconDirEntry.dwBytesInRes), IconDirEntry.dwBytesInRes, 真, 196608))
    .如果真结束
    
.计次循环尾 ()
返回 (0)

.类模块 外部控件操作类, , , 

.程序集变量 映射文件, 内存映射数据9X, , "0", 
.程序集变量 系统类别, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (系统类别, 取操作系统类别 ())

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 打开进程, 整数型, , 成功就返回进程句柄
.参数 对象句柄, 整数型, , 

.局部变量 进程句柄, 整数型, , , 
.局部变量 dwProcessID, 整数型, , , 

GetWindowThreadProcessId (对象句柄, dwProcessID) ' 获取与指定窗口关联在一起的一个线程和进程标识符
赋值 (进程句柄, OpenProcess (2035711, 假, dwProcessID)) ' 打开一个现有进程的句柄 ' 位或 (#STANDARD_RIGHTS_REQUIRED, #SYNCHRONIZE, 4095)
 ' .如果 (等于 (系统类别, 3))
     ' lpListItemRemote ＝ VirtualAllocEx (进程句柄, 0, 数据长度, #MEM_COMMIT, #PAGE_READWRITE)  ' 在目标进程中分配内存空间。
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' ' 如果真 (SendMessage (对象句柄, 消息号, 索引号, lpListItemRemote) ＝ 0)如果真 ()
     ' ' 返回 (0)
     ' ' VirtualFreeEx (进程句柄, lpListItemRemote, 0, #MEM_RELEASE)  ' 在目标进程中释放内存空间。
     ' ' CloseHandle (进程句柄)  ' 关闭一个内核对象。
     ' ' 返回 (真)
.否则
    
     ' 映射文件 ＝ CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 数据长度, 0)  ' 创建一个新的文件映射对象
     ' lpListItemRemote ＝ MapViewOfFile (映射文件, #FILE_MAP_ALL_ACCESS, 0, 0, 0)  ' 将一个文件映射对象映射到当前应用程序的地址空间
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' .如果真 ()

.子程序 写进程内存, 逻辑型, , 
.参数 进程句柄, 整数型, , 
.参数 数据指针, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 

返回 (不等于 (WriteProcessMemory (进程句柄, 数据指针, 数据地址, 数据长度, 0), 0)) ' 写进程内存

.子程序 结束操作, 空白型, , 
.参数 进程句柄, 整数型, , 

.如果真 (不等于 (进程句柄, 0))
    CloseHandle (进程句柄) ' 关闭一个内核对象。
    清除数组 (映射文件)
    赋值 (进程句柄, 0)
.如果真结束


.子程序 读外部指针数据, 字节集, , 
.参数 进程句柄, 整数型, , 
.参数 外部程序指针, 整数型, , 
.参数 读取数据大小, 整数型, , 

.局部变量 szBuf, 字节集, , , 

赋值 (szBuf, 取空白字节集 (读取数据大小))
ReadProcessMemory (进程句柄, 外部程序指针, szBuf, 读取数据大小, 0)
返回 (szBuf)

.子程序 分配外部指针, 整数型, , 
.参数 进程句柄, 整数型, , 
.参数 数据长度, 整数型, , 分配的数据长度

.局部变量 TEMP, 内存映射数据9X, , , 

.判断开始 (等于 (系统类别, 3))
    返回 (VirtualAllocEx (进程句柄, 0, 数据长度, 4096, 4))
.默认
    赋值 (TEMP.映射文件号, CreateFileMapping (-1, 0, 4, 0, 数据长度, 0)) ' 创建一个新的文件映射对象
    赋值 (TEMP.指针, MapViewOfFile (TEMP.映射文件号, 983071, 0, 0, 0)) ' 将一个文件映射对象映射到当前应用程序的地址空间
    重定义数组 (映射文件, 真, 相加 (取数组成员数 (映射文件), 1))
    赋值 (映射文件 [取数组成员数 (映射文件)], TEMP)
    返回 (TEMP.指针)
.判断结束


.子程序 销毁外部指针, 空白型, , 
.参数 进程句柄, 整数型, , 
.参数 外部指针, 整数型, , 

.局部变量 成员数, 整数型, , , 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (系统类别, 3))
    VirtualFreeEx (进程句柄, 外部指针, 0, 32768) ' 在目标进程中释放内存空间。
.默认
    赋值 (成员数, 取数组成员数 (映射文件))
    .变量循环首 (1, 成员数, 1, I)
        .如果真 (等于 (映射文件 [I], 指针, 外部指针))
            UnmapViewOfFile (外部指针) ' 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
            CloseHandle (映射文件 [I], 映射文件号)
            删除成员 (映射文件, I, )
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
.判断结束


.类模块 脚本组件, , , 

.程序集变量 脚本对象, 对象, , , 
.程序集变量 错误信息, 错误信息, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
脚本对象.创建 (“ScriptControl”, )
脚本对象.写属性 (“Language”, “vbs”)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
错误信息.清除 ()
脚本对象.清除 ()

.子程序 属性_语言, 整数型, , 返回以下值：0.JScript；1.VBScript；-1.语言为空。当类的语言属性未指定时，默认为1，VBScript。
.参数 新语言属性, 整数型, 可空, 可供选择的属性值：0. JScript   1. VBScript

.如果真 (等于 (是否为空 (新语言属性), 假))
    .判断开始 (等于 (新语言属性, 0))
        脚本对象.写属性 (“Language”, “vbs”)
    .默认
        脚本对象.写属性 (“Language”, “JScript”)
    .判断结束
    
.如果真结束
.判断开始 (等于 (脚本对象.读文本属性 (“Language”, ), “vbs”))
    返回 (1)
.判断 (等于 (脚本对象.读文本属性 (“Language”, ), “JScript”))
    返回 (0)
.默认
    返回 (-1)
.判断结束


.子程序 属性_错误信息, 错误信息, , 
错误信息.初始化 (脚本对象.读对象型属性 (“Error”, ))
返回 (错误信息)

.子程序 属性_超时, 整数型, , 设置或返回时间（毫秒），此时间后用户可选择中止脚本代码的执行或允许代码继续执行。
.参数 新超时属性值, 整数型, 可空, 当为-1时，使脚本引擎的执行无超时

.如果真 (等于 (是否为空 (新超时属性值), 假))
    脚本对象.写属性 (“Timeout”, 新超时属性值)
.如果真结束
返回 (脚本对象.读数值属性 (“Timeout”, ))

.子程序 属性_状态, 整数型, , 
.参数 新状态值, 整数型, 可空, 参数值为以下值之一： 0、Initialized； 1、Connected

.如果真 (等于 (是否为空 (新状态值), 假))
    脚本对象.写属性 (“State”, 新状态值)
.如果真结束
返回 (脚本对象.读数值属性 (“State”, ))

.子程序 属性_是否使用图形界面, 逻辑型, , 
.参数 新是否使用图形界面属性, 逻辑型, 可空, 

.如果真 (等于 (是否为空 (新是否使用图形界面属性), 假))
    脚本对象.写属性 (“AllowUI”, 新是否使用图形界面属性)
.如果真结束
返回 (脚本对象.读逻辑属性 (“AllowUI”, ))

.子程序 属性_图形界面父窗口句柄, 整数型, , 
.参数 新父窗口句柄, 整数型, 可空, 

.如果真 (等于 (是否为空 (新父窗口句柄), 假))
    脚本对象.写属性 (“SitehWnd”, 新父窗口句柄)
.如果真结束
返回 (脚本对象.读数值属性 (“SitehWnd”, ))

.子程序 添加代码, 空白型, , 
.参数 代码文本, 文本型, , 

脚本对象.数值方法 (“AddCode”, 代码文本)

.子程序 运行, 文本型, , 在添加的代码中运行指定的过程，如有返回值返回相应文本，否则返回空文本。
.参数 过程或函数名, 文本型, , 
.参数 参数, 文本型, 可空 数组, 最多支持30个参数

.局部变量 I, 整数型, , , 

赋值 (I, 取数组下标 (参数, ))
.判断开始 (等于 (I, 0))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名).取文本 ())
.判断 (等于 (I, 1))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1]).取文本 ())
.判断 (等于 (I, 2))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2]).取文本 ())
.判断 (等于 (I, 3))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3]).取文本 ())
.判断 (等于 (I, 4))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4]).取文本 ())
.判断 (等于 (I, 5))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5]).取文本 ())
.判断 (等于 (I, 6))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6]).取文本 ())
.判断 (等于 (I, 7))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7]).取文本 ())
.判断 (等于 (I, 8))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8]).取文本 ())
.判断 (等于 (I, 9))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9]).取文本 ())
.判断 (等于 (I, 10))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10]).取文本 ())
.判断 (等于 (I, 11))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11]).取文本 ())
.判断 (等于 (I, 12))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12]).取文本 ())
.判断 (等于 (I, 13))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13]).取文本 ())
.判断 (等于 (I, 14))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14]).取文本 ())
.判断 (等于 (I, 15))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15]).取文本 ())
.判断 (等于 (I, 16))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16]).取文本 ())
.判断 (等于 (I, 17))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17]).取文本 ())
.判断 (等于 (I, 18))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18]).取文本 ())
.判断 (等于 (I, 19))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19]).取文本 ())
.判断 (等于 (I, 20))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20]).取文本 ())
.判断 (等于 (I, 21))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21]).取文本 ())
.判断 (等于 (I, 22))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22]).取文本 ())
.判断 (等于 (I, 23))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23]).取文本 ())
.判断 (等于 (I, 24))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24]).取文本 ())
.判断 (等于 (I, 25))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25]).取文本 ())
.判断 (等于 (I, 26))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25], 参数 [26]).取文本 ())
.判断 (等于 (I, 27))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25], 参数 [26], 参数 [27]).取文本 ())
.判断 (等于 (I, 28))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25], 参数 [26], 参数 [27], 参数 [28]).取文本 ())
.判断 (等于 (I, 29))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25], 参数 [26], 参数 [27], 参数 [28], 参数 [29]).取文本 ())
.判断 (等于 (I, 30))
    返回 (脚本对象.通用方法 (“Run”, 过程或函数名, 参数 [1], 参数 [2], 参数 [3], 参数 [4], 参数 [5], 参数 [6], 参数 [7], 参数 [8], 参数 [9], 参数 [10], 参数 [11], 参数 [12], 参数 [13], 参数 [14], 参数 [15], 参数 [16], 参数 [17], 参数 [18], 参数 [19], 参数 [20], 参数 [21], 参数 [22], 参数 [23], 参数 [24], 参数 [25], 参数 [26], 参数 [27], 参数 [28], 参数 [29], 参数 [30]).取文本 ())
.默认
    返回 (“”)
.判断结束


.子程序 执行代码, 逻辑型, , 执行指定的代码文本。返回真为执行正常，返回假为出错，错误信息可以从“错误信息”属性中取得。
.参数 脚本代码, 文本型, , 

脚本对象.数值方法 (“ExecuteStatement”, 脚本代码)
返回 (等于 (脚本对象.取错误 (), “”))

.子程序 计算表达式, 文本型, , 计算表达式并返回结果。
.参数 表达式, 文本型, , 

返回 (脚本对象.文本方法 (“Eval”, 表达式))


.子程序 清除, 空白型, , 
脚本对象.数值方法 (“Reset”, )

.类模块 错误信息, , , 

.程序集变量 对象, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除 ()
对象.清除 ()

.子程序 初始化, 空白型, , 
.参数 错误对象, 对象, , 

赋值 (对象, 错误对象)

.子程序 错误代码, 整数型, , 
返回 (对象.读数值属性 (“Number”, ))

.子程序 错误源, 文本型, , 
返回 (对象.读文本属性 (“Source”, ))

.子程序 错误描述, 文本型, , 
返回 (对象.读文本属性 (“Description”, ))

.子程序 错误代码行文本, 文本型, , 
返回 (对象.读文本属性 (“Text”, ))

.子程序 错误代码行位置, 整数型, , 
返回 (对象.读数值属性 (“Line”, ))

.子程序 错误代码列位置, 整数型, , 
返回 (对象.读数值属性 (“Column”, ))

.子程序 清除, 空白型, , 清除错误对象
对象.数值方法 (“Clear”, )

.子程序 错误查阅帮助文件名, 文本型, , 
返回 (对象.读文本属性 (“HelpFile”, ))

.子程序 错误查阅帮助文件上下文ID, 整数型, , 
返回 (对象.读数值属性 (“HelpContext”, ))



 ' 不属于任何一个程序集、类模块的函数：
