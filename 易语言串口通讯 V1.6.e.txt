 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 522
    高度 = 498
    鼠标指针 = { 0,0,0,0 }
    标记 = “50,50,522,504”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\易语言串口通讯 V1.6.e\_启动窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言串口通讯 V1.6”
    帮助文件名 = “”

窗口 进制转换窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 274
    高度 = 350
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “进制转换 - 进制范围为：2-36”
    帮助文件名 = “”

窗口 ASCII窗口
    左边 = 50
    顶边 = 50
    宽度 = 602
    高度 = 472
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 已保存到：D:\易语言学习\Data\易语言串口通讯 V1.6.e\ASCII窗口_底图
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 窗口图片, " ' 已保存到：D:\易语言学习\Data\易语言串口通讯 V1.6.e\窗口图片", , main256.gif


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库





.窗口程序集 窗口程序集1, , , 

.程序集变量 起始时间, 整数型, , , 
.程序集变量 数据时间, 整数型, , "4", 
.程序集变量 信号时间, 整数型, , "36", 
.程序集变量 数据次数, 整数型, , , 
.程序集变量 信号次数, 整数型, , , 
.程序集变量 信号顺序, 整数型, , "36", 
.程序集变量 发送时间, 整数型, , , 
.程序集变量 发送, 字节集, , , 
.程序集变量 计数器, 整数型, , , 
.程序集变量 文本发送计次, 整数型, , , 
.子程序 _图形按钮_退出程序_被单击, 空白型, , 
停止 () ' 结束程序之前最好将所有串口都停止
停止 () ' 结束程序之前最好将所有串口都停止
结束 () ' 结束整个程序

.子程序 进制转换, 文本型, 公开, 可以将从二进制到三十六进制的数值随意进行转换，不可以转换负数以及小数。
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 
.参数 转换的进制, 整数型, , 

.局部变量 欲转换文本, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量, 整数型, , , 

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 36), 大于 (转换的进制, 36))) ' 判断两个“进制系数”是否正确
    返回 (“参数错误-进制只能在2-36之间”)
.如果真结束
赋值 (被转换文本, 到大写 (到半角 (被转换文本))) ' 规范参数
.计次循环首 (取文本长度 (被转换文本), 计次变量)
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, 被转换文本, “不是一个有效的”, 取文本左边 (数值到金额 (被转换进制, 真), 相减 (取文本长度 (数值到金额 (被转换进制, 真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (计次变量, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (临时文本, “”))
    返回 (临时文本)
.如果真结束
 ' 以上为数据处理代码
.如果真 (等于 (被转换进制, 转换的进制))
    返回 (被转换文本)
.如果真结束
.计次循环首 (取文本长度 (被转换文本), 计次变量) ' 整数转换开始
    赋值 (临时数值, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量, 1), , 真), 1), 求次方 (被转换进制, 相减 (取文本长度 (被转换文本), 计次变量))), 临时数值))
.计次循环尾 ()
.判断循环首 (大于 (临时数值, 相减 (转换的进制, 1)))
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (到数值 (到文本 (求余数 (临时数值, 转换的进制))), 1), 1), 欲转换文本))
    赋值 (临时数值, 取整 (相除 (临时数值, 转换的进制)))
.判断循环尾 ()
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)

.子程序 _选择框_Break_被单击, 空白型, , 
.如果 (等于 (., 真))
    2.信号操作 (3)
.否则
    1.信号操作 (3)
.如果结束


.子程序 _选择框_Dtr_被单击, 空白型, , 
.如果 (等于 (., 真))
    2.信号操作 (1)
.否则
    1.信号操作 (1)
.如果结束


.子程序 _选择框_Rts_被单击, 空白型, , 
.如果 (等于 (., 真))
    2.信号操作 (2)
.否则
    1.信号操作 (2)
.如果结束


.子程序 _选择框1_被单击, 空白型, , 开启自动发送的状态,相当于一个按钮,使用时钟进行控制
.如果 (等于 (., 真))
    赋值 (., 真)
    赋值 (., 0)
    赋值 (., “时钟已开启”)
    发送预处理 ()
    .如果真 (等于 (启动 (), 假))
        信息框 (“发送启动失败”, 0, )
        赋值 (., 假)
        返回 ()
    .如果真结束
    赋值 (., 到数值 (.))
    
.否则
    赋值 (., 1)
    赋值 (., 0)
    赋值 (., “时钟已停止”)
    赋值 (., 假)
.如果结束


.子程序 发送预处理, 空白型, , 发送前需要重新读一下发送的设置状态
停止 () ' 每次更改串口状态,都需要停止后再重新设置才能生效
赋值 (., 到数值 (.取项目文本 (.)))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3, 4))
赋值 (., 多项选择 (相加 (., 1), 6, 7, 8))
赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3))

.如果 (等于 (., 0))
    赋值 (., 假)
.否则
    赋值 (., 真)
.如果结束


.子程序 接收预处理, 空白型, , 
停止 ()
.如果 (等于 (., 真))
    赋值 (., .)
    赋值 (., 到数值 (.取项目文本 (.)))
    赋值 (., 多项选择 (相加 (., 1), 1, 2, 3, 4))
    赋值 (., 多项选择 (相加 (., 1), 6, 7, 8))
    赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))
    赋值 (., 多项选择 (相加 (., 1), 1, 2, 3))
    
    .如果 (等于 (., 0))
        赋值 (., 假)
    .否则
        赋值 (., 真)
    .如果结束
    
.否则
    
.如果结束


.子程序 _组合框_发送法_列表项被选择, 空白型, , 
.如果 (等于 (., 0))
    赋值 (., 真)
    赋值 (., 真)
    赋值 (., “时钟已开启”)
    发送预处理 ()
    赋值 (., 到数值 (.))
.否则
    赋值 (., 假)
    赋值 (., “时钟已停止”)
    赋值 (., 0)
    赋值 (., 假)
.如果结束


.子程序 _串口_接收_收到信号, 空白型, , 
.参数 信号类型, 整数型, , 

.局部变量 循环容器, 整数型, , , 

赋值 (., 真)
赋值 (信号次数, 相加 (信号次数, 1))
.如果真 (小于 (信号次数, 36))
    赋值 (信号时间 [信号次数], 相减 (取启动时间 (), 起始时间))
.如果真结束

.计次循环首 (24, 循环容器)
    .如果真 (等于 (信号顺序 [循环容器], 0))
        赋值 (信号顺序 [循环容器], 信号类型)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (信号类型, 2))
    赋值 (., .)
    赋值 (., .)
.如果真结束

赋值 (., 相加 (., 到文本 (信号类型)))
刷新显示 ()
赋值 (., 相加 (., 到文本 (信号类型)))
刷新显示 ()
赋值 (., 假)

.子程序 _串口_接收_数据到达, 空白型, , 
.参数 数据字节值, 整数型, , 

.局部变量 循环容器, 整数型, , , 

赋值 (., 真)
处理事件 ()
赋值 (数据次数, 相加 (数据次数, 1))
.如果真 (小于或等于 (数据次数, 4))
    赋值 (数据时间 [数据次数], 相减 (取启动时间 (), 起始时间))
.如果真结束

.计次循环首 (18, 循环容器)
    .如果真 (等于 (信号顺序 [循环容器], 0))
        赋值 (信号顺序 [循环容器], 10)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.如果真 (等于 (., 真)) ' 如果是显示一列直下的形式,就需要计数及加回车
    赋值 (计数器, 相加 (计数器, 1)) ' 程序集变量增加一位
.如果真结束

.判断开始 (等于 (., 真)) ' 如果需显示10进制时
    相加 (选择 (等于 (., 真), 相加 (到文本 (计数器), “RX:  ”), “”), 到文本 (数据字节值), 选择 (等于 (., 真), #换行符, 选择 (等于 (., 真), 选择 (等于 (删全部空 (.), “”), “ ”, .), “”))).加入文本 ()
.判断 (等于 (., 真)) ' 如果需显示16进制时
    相加 (选择 (等于 (., 真), 相加 (到文本 (计数器), “RX:  ”), “”), 进制转换 (到文本 (数据字节值), 10, 16), 选择 (等于 (., 真), #换行符, 选择 (等于 (., 真), 选择 (等于 (删全部空 (.), “”), “ ”, .), “”))).加入文本 ()
.判断 (等于 (., 真)) ' 如果需显示ASCII码时
    相加 (选择 (等于 (., 真), 相加 (到文本 (计数器), “RX:  ”), “”), 字符 (数据字节值), 选择 (等于 (., 真), #换行符, 选择 (等于 (., 真), 选择 (等于 (删全部空 (.), “”), “ ”, .), “”))).加入文本 ()
.默认
    
.判断结束
 ' 选择 (选择框_间隔符.选中 ＝ 真, “”, )
 ' 选择 (选择框_间隔符.选中 ＝ 真, 选择 (删全部空 (编辑框_间隔符.内容) ＝ “”, “ ”, 编辑框_间隔符.内容), “”)
 ' 信息框 (字符 (到数值 (编辑框1.内容)), 0, )
赋值 (., 到文本 (数据字节值))
赋值 (., 进制转换 (到文本 (数据字节值), 10, 16))
赋值 (., 取文本右边 (相加 (“00000000”, 进制转换 (到文本 (数据字节值), 10, 2)), 8))

根据二进制显示信号色 ()
处理事件 ()
赋值 (., 假)


.子程序 根据二进制显示信号色, 空白型, , 
.如果 (等于 (取文本中间 (., 1, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 2, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 3, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 4, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 5, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 6, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 7, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (., 8, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束


.子程序 _时钟1_周期事件, 空白型, , 
.如果 (等于 (., #红色))
    赋值 (., #蓝色)
.否则
    赋值 (., #红色)
.如果结束

.如果真 (或者 (等于 (删全部空 (.), “0”), 等于 (删全部空 (.), “00”)))
    .如果真 (等于 ({ .发送数据 (0 }), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        赋值 (., 0)
        返回 ()
    .如果真结束
    
.如果真结束

.判断开始 (等于 (., 1)) ' 发送16进制时进行以下操作
    .如果真 (等于 (字符 (到数值 (进制转换 (., 16, 10))).发送数据 (), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        赋值 (., 0)
        返回 ()
    .如果真结束
    
.判断 (等于 (., 0)) ' 发送10进制时进行以下操作
    .如果真 (等于 (字符 (到数值 (.)).发送数据 (), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        赋值 (., 0)
        返回 ()
    .如果真结束
    
.判断 (等于 (., 2)) ' 发送ASCII码时进行以下操作
    .如果真 (等于 (.发送数据 (.), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        赋值 (., 0)
        返回 ()
    .如果真结束
    
.默认
    
.判断结束


.子程序 _编辑框_周期_内容被改变, 空白型, , 改变发送时钟周期
.如果真 (等于 (., 真))
    赋值 (., 到数值 (.))
.如果真结束


.子程序 _按钮1_被单击, 空白型, , 
信息框 (., 0, )

赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))


.子程序 发送数据1, 空白型, , 备用
.局部变量 数据文本, 文本型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 数据, 字节型, , , 
.局部变量 发送容器, 字节集, , , 

赋值 (., “”)
赋值 (., “”)
数组清零 (数据时间)
数组清零 (信号时间)
数组清零 (信号顺序)
赋值 (数据次数, 0)
赋值 (信号次数, 0)
赋值 (数据文本, .)
赋值 (起始时间, 取启动时间 ())
.计次循环首 (相除 (取文本长度 (数据文本), 4), 循环次数)
    赋值 (数据, 到数值 (取文本中间 (数据文本, 相加 (1, 相乘 (相减 (循环次数, 1), 4)), 3)))
    赋值 (发送容器, 相加 (发送容器, 到字节集 (数据)))
.计次循环尾 ()
发送容器.发送数据 () ' 以数组的方式发送,也是个好办法
赋值 (发送时间, 相减 (取启动时间 (), 起始时间))
赋值 (发送, 发送容器)
赋值 (发送容器, {  })
赋值 (数据, 0)


.子程序 _编辑框_手动自动发送_内容被改变, 空白型, , 
.判断开始 (等于 (., 0)) ' 发送10进制时进行以下操作
    赋值 (., .)
    赋值 (., 进制转换 (., 10, 16))
    赋值 (., 取文本右边 (相加 (“00000000”, 进制转换 (., 10, 2)), 8))
    
.判断 (等于 (., 1)) ' 发送16进制时进行以下操作
    赋值 (., .)
    赋值 (., 进制转换 (., 16, 10))
    赋值 (., 取文本右边 (相加 (“00000000”, 进制转换 (., 10, 2)), 8))
    
.默认
    
.判断结束
改变发送信号颜色 (.)


.子程序 改变发送信号颜色, 空白型, , 改变发送区的8个信号颜色
.参数 二进制文本, 文本型, , 

.如果 (等于 (取文本中间 (二进制文本, 1, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 2, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 3, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 4, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 5, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 6, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 7, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束

.如果 (等于 (取文本中间 (二进制文本, 8, 1), “1”))
    赋值 (., #红色)
.否则
    赋值 (., #蓝色)
.如果结束



.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 计次, 整数型, , , 

赋值 (_启动窗口., #窗口图片) ' 启动时直接将图片资源中的底图读出显示!
_编辑框_手动自动发送_内容被改变 ()
287.移动 (153, 224, 259) ' 将隐藏的一个编辑框位置固定好,以后改变窗口界面,需要改这个地方!
_启动窗口.置外形图片 (#窗口图片, #白色) ' 启动时直接将图片资源中的底图读出做为窗口外形处理!
 ' 端口_接收.启动 ()  ' 发送
 ' 图片框2.可视 ＝ 真  ' 发送

.子程序 _图形按钮_显示文本_被单击, 空白型, , 
.如果 (等于 (., 假))
    赋值 (., 真)
.否则
    赋值 (., 假)
.如果结束


.子程序 _图形按钮_打开文本_被单击, 空白型, , 
赋值 (., 真)

打开并读入文件 ()


.子程序 _图形按钮_手动发送_被单击, 空白型, , 
赋值 (., 假)
赋值 (., 1)
赋值 (., 0)
赋值 (., “时钟已停止”)
赋值 (., 假)

赋值 (., 真)
发送预处理 ()
.如果真 (等于 (启动 (), 假))
    信息框 (“发送启动失败,请查看本电脑是否有此端口!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束

.如果真 (或者 (等于 (删全部空 (.), “0”), 等于 (删全部空 (.), “00”)))
    { .发送数据 (0 })
    停止 ()
    赋值 (., 假)
    返回 ()
.如果真结束

.判断开始 (等于 (., 1)) ' 发送16进制时进行以下操作
    .如果真 (等于 (字符 (到数值 (进制转换 (., 16, 10))).发送数据 (), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        返回 ()
    .如果真结束
    
.判断 (等于 (., 0)) ' 发送10进制时进行以下操作
    .如果真 (等于 (字符 (到数值 (.)).发送数据 (), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        返回 ()
    .如果真结束
    
.判断 (等于 (., 2)) ' 发送ASCII码时进行以下操作
    .如果真 (等于 (.发送数据 (.), 假))
        信息框 (“发送数据失败!”, 0, )
        赋值 (., 假)
        返回 ()
    .如果真结束
    
.默认
    
.判断结束


停止 ()
赋值 (., 假)

.子程序 _图形按钮_使用说明_被单击, 空白型, , 说明在编程中的要点,这可是精华哦!
赋值 (., 真)
赋值 (., “”)
相加 (“    本程序实现了对计算机串口进行操作,并进一步可以实现两台电脑之间的通讯,及控制IC卡机,单片机等,是工业控制人士的必备工具.”, #换行符, #换行符).加入文本 ()
相加 (“    发送16进制数据相当于直接发送10进制数据，比如发送16进制数据（10 1A 20 H）的易语言代码为：”, #换行符, “    端口1.发送数据（{16,26,32}）”, #换行符, #换行符).加入文本 ()
相加 (“    如果接收到的是ASCII码用以下代码就能看到数据：”, #换行符, “    字符（字符代码）”, #换行符, #换行符).加入文本 ()

相加 (“    发送0的方法是:端口_发送.发送数据 ({ 0 }).”, #换行符, #换行符).加入文本 ()
相加 (“    发送文本是指十六进制文本的发送.”, #换行符, #换行符).加入文本 ()

相加 (“    本程序由易语言编写,易语言网址为:http://www.dywt.com.cn”, #换行符).加入文本 ()
相加 (“    易语言公司授权正版用户可以任意使用本程序.”, #换行符).加入文本 ()

.子程序 _图形按钮_发送文本_被单击, 空白型, , 是以时钟的方式发送的,但大家也可以考虑使用数组方式
.局部变量 计次, 整数型, , , 

.如果真 (等于 (., 假))
    赋值 (., 真)
    返回 ()
.如果真结束

.如果真 (等于 (删全部空 (.), “”))
    打开并读入文件 ()
    返回 ()
.如果真结束

赋值 (., 真)
发送预处理 ()
.如果真 (等于 (启动 (), 假))
    信息框 (“发送启动失败!!!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束
处理事件 ()

赋值 (文本发送计次, 1)
赋值 (., 10)
置等待鼠标 ()

.子程序 打开并读入文件, 空白型, , 读入16进制文本到编辑框中
.局部变量 文件号, 整数型, , , 

赋值 (., “请输入欲打开的文本文件名：”)
赋值 (., 0)
赋值 (., “文本文件(*.TXT,*.INI)|*.TXT;*.INI|所有文件(*.*)|*.*”)
赋值 (., 取运行目录 ())
.如果真 (等于 (打开 (), 真))
    赋值 (文件号, 打开文件 (., #读入, ))
    .如果 (不等于 (文件号, 0))
        赋值 (., 读入文本 (文件号, ))
        关闭文件 (文件号)
    .否则
        信息框 (“打开文件失败！”, #错误图标, “错误”)
    .如果结束
    
.如果真结束


.子程序 _图形按钮_进制转换_被单击, 空白型, , 
载入 (进制转换窗口, , 假)


.子程序 _图形按钮_保存_被单击, 空白型, , 
.局部变量 文件号, 整数型, , , 

赋值 (., “请输入欲保存到的文本文件名：”)
赋值 (., 1)
赋值 (., “文本文件(*.TXT,*.INI)|*.TXT;*.INI|所有文件(*.*)|*.*”)
赋值 (., 取运行目录 ())
赋值 (., “.TXT”)
.如果真 (等于 (打开 (), 假))
    返回 ()
.如果真结束
赋值 (文件号, 打开文件 (., #重写, ))
.如果真 (不等于 (文件号, 0))
    .如果 (等于 (写出文本 (文件号, .), 真))
        关闭文件 (文件号)
        返回 ()
    .否则
        关闭文件 (文件号)
    .如果结束
    
.如果真结束
信息框 (“保存文件失败！”, #错误图标, “错误”)

.子程序 _图形按钮_清空_被单击, 空白型, , 
赋值 (., “”)
赋值 (计数器, 0)

.子程序 _图形按钮2_被单击, 空白型, , 
弹出菜单 (相加 (_启动窗口., 14), 相加 (_启动窗口., 43))

.如果真 (等于 (., 真))
    返回 ()
.如果真结束
.如果真 (等于 (启动 (), 假))
    信息框 (“接收启动失败”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束
赋值 (., 真)


.子程序 _图形按钮2_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (., 真))
    赋值 (., 假)
    停止 ()
.如果真结束


.子程序 __启动窗口_首次激活, 空白型, , 
.局部变量 计次, 整数型, , , 

赋值 (., 真)
赋值 (., 真)


.子程序 _时钟2_周期事件, 空白型, , 
赋值 (., 假)
赋值 (., 假) ' 发送
赋值 (., 0)


.子程序 _按发送设置刷新_被选择, 空白型, , 按发送串口的设置类型配置接收串口
赋值 (., 真)
赋值 (., 假)
停止 ()
赋值 (., .)
赋值 (., 到数值 (.取项目文本 (.)))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3, 4))
赋值 (., 多项选择 (相加 (., 1), 6, 7, 8))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3))
赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))

.如果 (等于 (., 0))
    赋值 (., 假)
.否则
    赋值 (., 真)
.如果结束

.如果真 (等于 (启动 (), 假))
    信息框 (“接收失败,请查看此电脑的设备管理器!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束
赋值 (., 真)

.如果真 (等于 (., .))
    赋值 (., 真)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 1))
    赋值 (., 真)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 2))
    赋值 (., 真)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 6))
    赋值 (., 真)
    赋值 (., 假)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 7))
    赋值 (., 假)
    赋值 (., 真)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 8))
    赋值 (., 假)
    赋值 (., 假)
    赋值 (., 真)
.如果真结束

赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)

.如果真 (等于 (., 0))
    赋值 (., 真)
.如果真结束
.如果真 (等于 (., 1))
    赋值 (., 真)
.如果真结束
.如果真 (等于 (., 2))
    赋值 (., 真)
.如果真结束
.如果真 (等于 (., 3))
    赋值 (., 真)
.如果真结束
.如果真 (等于 (., 4))
    赋值 (., 真)
.如果真结束

.如果真 (等于 (., 1))
    赋值 (., 真)
    赋值 (., 假)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 2))
    赋值 (., 假)
    赋值 (., 真)
    赋值 (., 假)
.如果真结束

.如果真 (等于 (., 3))
    赋值 (., 假)
    赋值 (., 假)
    赋值 (., 真)
.如果真结束


.子程序 _与发送不同设置_被选择, 空白型, , 
赋值 (., 假)
赋值 (., 真)
停止 ()
赋值 (., .)
赋值 (., 到数值 (.取项目文本 (.)))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3, 4))
赋值 (., 多项选择 (相加 (., 1), 6, 7, 8))
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3))
赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))

.如果 (等于 (., 0))
    赋值 (., 假)
.否则
    赋值 (., 真)
.如果结束

.如果真 (等于 (启动 (), 假))
    信息框 (“接收启动失败,请查看此电脑的设备管理器!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束
赋值 (., 真)


.子程序 _使用发送波特率_被选择, 空白型, , 接收串口的设置与发送串口的一致
停止 ()
赋值 (., 真)
赋值 (., 假)
赋值 (., 到数值 (.取项目文本 (.)))
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _自定义波特率_被选择, 空白型, , 
.局部变量 波特率变量, 整数型, , , 

停止 ()
赋值 (., 假)
赋值 (., 真)
输入框 (“请输入新的波特率”, “自定义波特率”, 到文本 (到数值 (.取项目文本 (.))), 波特率变量, #输入整数)
赋值 (., 波特率变量)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _接收端口号COM1_被选择, 空白型, , 
停止 () ' 发送
停止 ()
赋值 (., 真)
赋值 (., 假)
赋值 (., 1)
赋值 (., 2) ' 发送
赋值 (., 1) ' 发送
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _接收端口号COM2_被选择, 空白型, , 
停止 ()
停止 ()
赋值 (., 假)
赋值 (., 真)
赋值 (., 2)
赋值 (., 1)
赋值 (., 0)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _数据位6位_被选择, 空白型, , 
停止 ()
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 6)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _数据位7位_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 7)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _数据位8位_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 8)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _无校验_被选择, 空白型, , 
停止 ()
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 0)
赋值 (., 假)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _奇校验_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 1)
赋值 (., 真)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _偶校验_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 2)
赋值 (., 真)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _标志校验_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 3)
赋值 (., 真)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _空白校验_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 4)
赋值 (., 真)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _停止位1位_被选择, 空白型, , 
停止 ()
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 1)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _停止位15位_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 2)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 _停止位2位_被选择, 空白型, , 
停止 ()
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 3)
检查是否设置相等 ()
启动 ()
赋值 (., 真)


.子程序 检查是否设置相等, 空白型, , 
.局部变量 是否相等, 逻辑型, , , 

赋值 (是否相等, 真)

.如果真 (不等于 (., .))
    赋值 (是否相等, 假)
.如果真结束
.如果真 (不等于 (., .))
    赋值 (是否相等, 假)
.如果真结束
.如果真 (不等于 (., .))
    赋值 (是否相等, 假)
.如果真结束
.如果真 (不等于 (., .))
    赋值 (是否相等, 假)
.如果真结束

.如果 (等于 (是否相等, 真))
    赋值 (., 真)
    赋值 (., 假)
.否则
    赋值 (., 真)
    赋值 (., 假)
.如果结束


.子程序 _显示端口状态_被选择, 空白型, , 
信息框 (相加 (“端口_发送.波特率:”, 到文本 (.), #换行符, “端口_接收.波特率:”, 到文本 (.), #换行符, “端口_发送.端口号:”, 到文本 (.), #换行符, “端口_接收.端口号:”, 到文本 (.), #换行符, “端口_发送.数据位数:”, 到文本 (.), #换行符, “端口_接收.数据位数:”, 到文本 (.), #换行符, “端口_发送.奇偶校验方案:”, 到文本 (.), #换行符, “端口_接收.奇偶校验方案:”, 到文本 (.), #换行符, “端口_发送.停止位数:”, 到文本 (.), #换行符, “端口_接收.停止位数:”, 到文本 (.), #换行符), 0, )


.子程序 _图片框2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

停止 ()
赋值 (., 假)


.子程序 _组合框_波特率_列表项被选择, 空白型, , 
停止 ()
赋值 (., 到数值 (.取项目文本 (.)))
检查是否设置相等 ()

.子程序 _组合框_端口号_列表项被选择, 空白型, , 
停止 ()
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3, 4))
检查是否设置相等 ()

.子程序 _组合框_数据位_列表项被选择, 空白型, , 
停止 ()
赋值 (., 多项选择 (相加 (., 1), 6, 7, 8))
检查是否设置相等 ()

.子程序 _组合框_校验_列表项被选择, 空白型, , 
停止 ()
赋值 (., 多项选择 (相加 (., 1), 0, 1, 2, 3, 4))

.如果 (等于 (., 0))
    赋值 (., 假)
.否则
    赋值 (., 真)
.如果结束
检查是否设置相等 ()

.子程序 _组合框_停止位_列表项被选择, 空白型, , 
停止 ()
赋值 (., 多项选择 (相加 (., 1), 1, 2, 3))
检查是否设置相等 ()

.子程序 _单选框_单列_被单击, 空白型, , 
#换行符.加入文本 ()


.子程序 _单选框_串列_被单击, 空白型, , 
 ' 编辑框_连续接收.加入文本 (#换行符)


.子程序 _组合框_编码_列表项被选择, 空白型, , 
_编辑框_手动自动发送_内容被改变 ()


.子程序 _图形按钮_发送文本_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (., 假))
    赋值 (., 真)
    返回 ()
.如果真结束

.如果真 (等于 (删全部空 (.), “”))
    打开并读入文件 ()
    返回 ()
.如果真结束

赋值 (., 真)
发送预处理 ()
.如果真 (等于 (启动 (), 假))
    信息框 (“发送启动失败!!!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束
处理事件 ()
.如果真 (等于 (.发送数据 (.), 假))
    信息框 (“发送文本数据失败!!!”, 0, )
    赋值 (., 假)
    返回 ()
.如果真结束

停止 ()
赋值 (., 假)


.子程序 _时钟3_周期事件, 空白型, , 
.如果真 (小于 (相除 (取文本长度 (.), 2), 文本发送计次))
    赋值 (., 0)
    停止 ()
    恢复鼠标 ()
    赋值 (., 假)
    输出调试文本 (到文本 (文本发送计次))
.如果真结束
输出调试文本 (到文本 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2)))
改变发送信号颜色 (取文本右边 (相加 (“00000000”, 进制转换 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2), 16, 2)), 8))
.如果 (或者 (等于 (删全部空 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2)), “00”), 等于 (到数值 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2)), 0))) ' 如果为零的时候要特殊处理!
    { .发送数据 (0 }) ' 发送0时必须使用这样的转换为字节集的方式
.否则
    字符 (到数值 (进制转换 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2), 16, 10))).发送数据 ()
.如果结束
输出调试文本 (字符 (到数值 (进制转换 (取文本中间 (., 相减 (相乘 (文本发送计次, 2), 1), 2), 16, 10))))
赋值 (文本发送计次, 相加 (文本发送计次, 1))



.子程序 _标签8_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 真)
赋值 (., 假)


.子程序 _标签7_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 假)
赋值 (., 真)


.子程序 _标签2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 真)
赋值 (., 假)
赋值 (., 假)


.子程序 _标签3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 假)
赋值 (., 真)
赋值 (., 假)


.子程序 _标签4_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (., 假)
赋值 (., 假)
赋值 (., 真)


.窗口程序集 窗口程序集2, , , 

.子程序 _开始转换按钮_被单击, 空白型, , 
.如果真 (或者 (小于 (到数值 (.), 2), 大于 (到数值 (.), 36)))
    信息框 (“进制范围为：2-36”, 0, )
    获取焦点 ()
    返回 ()
.如果真结束

.如果真 (或者 (小于 (到数值 (.), 2), 大于 (到数值 (.), 36)))
    信息框 (“进制范围为：2-36”, 0, )
    获取焦点 ()
    返回 ()
.如果真结束

赋值 (., 进制转换 (., 到数值 (.), 到数值 (.)))


.子程序 _开始转换按钮1_被单击, 空白型, , 
.局部变量 计次, 整数型, , , 

.计次循环首 (256, 计次)
    相加 (取文本右边 (相加 (“   ”, 到文本 (相减 (计次, 1))), 3), “ = ”, 取文本右边 (相加 (“0”, 到文本 (进制转换 (到文本 (相减 (计次, 1)), 10, 16))), 2), “H”, “ = ”, 取文本右边 (相加 (“00000000”, 到文本 (进制转换 (到文本 (相减 (计次, 1)), 10, 2))), 8), #换行符).加入文本 ()
.计次循环尾 ()


.子程序 _进制转换窗口_创建完毕, 空白型, , 
_开始转换按钮1_被单击 ()


.子程序 _开始转换按钮2_被单击, 空白型, , 
载入 (ASCII窗口, , 假)


.窗口程序集 窗口程序集3, , , 

.子程序 _关闭按钮_被单击, 空白型, , 
销毁 ()



 ' 不属于任何一个程序集、类模块的函数：
