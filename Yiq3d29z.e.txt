 ' 文件类型：Windows模块源码

 ' 程序名称：进程管理
 ' 程序描述：yuMedia用
 ' 程序作者：llafei
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 测试窗口
    左边 = 50
    顶边 = 50
    宽度 = 324
    高度 = 176
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 备份, "“SeBackupPrivilege”", 公开, 
.常量 启动, "“SeRestorePrivilege”", 公开, 
.常量 关机, "“SeShutdownPrivilege”", 公开, 
.常量 调试, "“SeDebugPrivilege”", 公开, 
.常量 , , , 
.常量 HKEY_LOCAL_MACHINE, "2147483650", , &H80000002
.常量 HKEY_CLASSES_ROOT, "2147483648", , &H80000000
.常量 HKEY_CURRENT_USER, "2147483649", , &H80000001
.常量 HKEY_USERS, "2147483651", , &H80000003
.常量 HKEY_CURRENT_CONFIG, "2147483653", , &H80000005
.常量 HKEY_DYN_DATA, "2147483654", , &H80000006
.常量 , , , 
.常量 TH32CS_SNAPALL, "15", , TH32CS_SNAPHEAPLIST Or TH32CS_SNAPPROCESS Or TH32CS_SNAPTHREAD Or TH32CS_SNAPMODULE
.常量 , , , 
.常量 GWL_STYLE, "-16", , 窗口信息
.常量 WS_EX_TOOLWINDOW, "128", , 0x00000080L 长整16,即扩展工具栏方式
.常量 WS_EX_APPWINDOW, "262144", , 0x00040000L 
.常量 GW_OWNER, "4", , 拥有者
.常量 , , , 
.常量 WS_ACTIVECAPTION, "1", 公开, 窗口是否窗活  VC #define WS_ACTIVECAPTION    0x0001
.常量 , , , 
.常量 PROCESS_VM_READ, "16", , 0x0010
.常量 , , , 
.常量 SW_HIDE, "0", 公开, #define SW_HIDE             0
.常量 SW_SHOWNORMAL, "1", 公开, #define SW_SHOWNORMAL       1
.常量 SW_NORMAL, "1", 公开, #define SW_NORMAL           1
.常量 SW_SHOWMINIMIZED, "2", 公开, #define SW_SHOWMINIMIZED    2
.常量 SW_SHOWMAXIMIZED, "3", 公开, #define SW_SHOWMAXIMIZED    3
.常量 SW_MAXIMIZE, "3", 公开, #define SW_MAXIMIZE         3
.常量 SW_SHOWNOACTIVATE, "4", 公开, #define SW_SHOWNOACTIVATE   4
.常量 SW_SHOW, "5", 公开, #define SW_SHOW             5
.常量 SW_MINIMIZE, "6", 公开, #define SW_MINIMIZE         6
.常量 SW_SHOWMINNOACTIVE, "7", 公开, #define SW_SHOWMINNOACTIVE  7
.常量 SW_SHOWNA, "8", 公开, #define SW_SHOWNA           8
.常量 SW_RESTORE, "9", 公开, #define SW_RESTORE          9
.常量 SW_SHOWDEFAULT, "10", 公开, #define SW_SHOWDEFAULT      10
.常量 SW_FORCEMINIMIZE, "11", 公开, #define SW_FORCEMINIMIZE    11
.常量 SW_MAX, "11", 公开, #define SW_MAX              11
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库
 ' eDB 46E94341933A462383A4DE26B146322C 2 3 数据库操作支持库




数据类型 进程详细信息, 公开, 
    .成员 进程标识符ID, 整数型, , , 即进程号ID
    .成员 进程句柄ID, 整数型, , , 
    .成员 进程名称, 文本型, , , 
    .成员 线程优先权, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 父进程标识符, 整数型, , , 
    .成员 进程模块标识符, 整数型, , , 
    .成员 进程模块全路径, 文本型, , , 
    .成员 进程主窗口句柄, 整数型, , , 
    .成员 进程主窗口标题, 文本型, , , 

数据类型 PROCESSENTRY32, , 进程信息结构体
    .成员 dwSize, 整数型, , , 结构的大小
    .成员 cntUsage, 整数型, , , 此进程的引用计数,已经很久没有使用，总是为零
    .成员 th32ProcessID, 整数型, , , 进程标识符
    .成员 th32DefaultHeapID, 整数型, , , 进程默认堆ID,已经很久没有使用，总是为零
    .成员 th32ModuleID, 整数型, , , 进程模块ID,已经很久没有使用，总是为零
    .成员 cntThreads, 整数型, , , 此进程开启的线程计数
    .成员 th32ParentProcessID, 整数型, , , 父进程的ID
    .成员 pcPriClassBase, 整数型, , , 线程优先权
    .成员 dwFlags, 整数型, , , 没有使用，总是为零
    .成员 szExeFile, 字节型, , "256", （一个数组）进程全名(可执行文件名称地址）

数据类型 LuID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 TOKEN_PRIVILEGES, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 模块信息, , 
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 hmodule, 整数型, , , 
    .成员 szname, 字节型, , "256", 
    .成员 szpath, 字节型, , "256", 

数据类型 线程入口结构, , 
    .成员 返回大小, 整数型, , , 注意！请先初始化！
    .成员 保留, 整数型, , , 请传0
    .成员 线程标示符, 整数型, , , 
    .成员 所属进程标示符, 整数型, , , 
    .成员 进程优先级, 整数型, , , 
    .成员 保留, 整数型, , , 
    .成员 保留, 整数型, , , 

数据类型 窗口信息, 公开, 
    .成员 窗口句柄, 整数型, , , 
    .成员 窗口标题, 文本型, , , 
    .成员 所属进程, 整数型, , , 进程标识符
    .成员 所在线程, 整数型, , , 线程标识

数据类型 程序信息, 公开, 
    .成员 程序类型, 文本型, , , 1:聊天,2:浏览器,3:驱动,4:视频,5:编程开发,6:压缩刻录,7:系统工具,8:安全杀毒,9:音乐,10,图形图像,11:翻译,12:文字处理,13:系统程序,14其它
    .成员 键值句柄, 整数型, , ,  键值句柄，于用直接访问注册表
    .成员 程序显示名, 文本型, , , DisplayName
    .成员 程序文件名, 文本型, , , 
    .成员 安装日期, 文本型, , , InstallDate
    .成员 安装路径, 文本型, , , InstallLocation
    .成员 安装源, 文本型, , , InstallSource
    .成员 版本号, 文本型, , , DisplayVersion
    .成员 出版厂商, 文本型, , , Publisher
    .成员 反删除命令, 文本型, , , UninstallString
    .成员 反删除图标路径, 文本型, , , DisplayIcon
    .成员 键映射文件, 文本型, , , 
    .成员 是否映射, 文本型, , , 

数据类型 AppInfo记录, , 
    .成员 AppName, 文本型, , , 应用名称
    .成员 fileName, 文本型, , , 文件名
    .成员 Publisher, 文本型, , , 出版商
    .成员 nameKeyWord, 文本型, , , 关键字
    .成员 type, 文本型, , , 类型
    .成员 InfFileName, 文本型, , , 映射配置文件名(默认的)

数据类型 WINDOWINFO, 公开, 窗口信息
    .成员 cbSize, 整数型, , , 4结构体大小 合 60
    .成员 rcWindow, RECT, , , 16窗口结构体
    .成员 rcClient, RECT, , , 16
    .成员 dwStyle, 整数型, , , 4
    .成员 dwExStyle, 整数型, , , 4
    .成员 dwWindowStatus, 整数型, , , 4
    .成员 cxWindowBorders, 整数型, , , 4
    .成员 cyWindowBorders, 整数型, , , 4
    .成员 atomWindowType, 短整数型, , , 2短整
    .成员 wCreatorVersion, 短整数型, , , 2短整

数据类型 RECT, , 窗口结构体
    .成员 left, 整数型, , , 
    .成员 top, 整数型, , , 
    .成员 right, 整数型, , , 
    .成员 bottom, 整数型, , , 

数据类型 WINDOWPLACEMENT, 公开, 
    .成员 length, 整数型, , , 4
    .成员 flags, 整数型, , , 4
    .成员 showCmd, 整数型, , , 4
    .成员 ptMinPosition, POINT, , , 8
    .成员 ptMaxPosition, POINT, , , 8
    .成员 rcNormalPosition, RECT, , , 16

数据类型 POINT, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 


.DLL命令 API_Module32First, 整数型, "", "Module32First", , 
    .参数 hsnap, 整数型, , 
    .参数 mod, 模块信息, , 

.DLL命令 API_ExtractIconA, 整数型, "shell32.dll", "ExtractIconA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 文件名称, 文本型, , 
    .参数 图标索引, 整数型, , 

.DLL命令 API_OpenProcess, 整数型, "", "OpenProcess", , 用来打开一个已存在的进程对象,并返回进程的句柄ID
    .参数 dwDesiredAccess, 整数型, , 指定这个句柄要求的访问方法,PROCESS_CREATE_THREAD 2（允许远程创建线程）；PROCESS_VM_OPERATION 8 （允许远程VM操作）；PROCESS_VM_WRITE 32 （允许远程VM写）；2035711 完全访问
    .参数 bInheritHandle, 整数型, , 如句柄能够由子进程继承，则为TRUE，0   PROCESS_QUERY_INFORMATION =&H400  PROCESS_VM_READ      =&H10
    .参数 dwProcessId, 整数型, , 要打开那个进程的进程标识符

.DLL命令 API_GetCurrentProcess, 整数型, "kernel32.dll", "GetCurrentProcess", , 

.DLL命令 API_打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 API_恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 API_获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 API_创建进程快照, 整数型, "", "CreateToolhelp32Snapshot", , 创建进程快照
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 API_第一个进程, 整数型, "", "Process32First", , 第一个进程
    .参数 hSnapShot, 整数型, , 进程快照句柄
    .参数 uProcess, PROCESSENTRY32, , 用来装载进程信息结构体

.DLL命令 API_下一个进程, 整数型, "", "Process32Next", , 下一个进程
    .参数 hSnapShot, 整数型, , 
    .参数 uProcess, PROCESSENTRY32, , 

.DLL命令 API_获取模块全路径名, 整数型, "Psapi.dll", "GetModuleFileNameExA", , 获取进程模块全路径名
    .参数 hProcess, 整数型, , 进程句柄
    .参数 hModule, 整数型, , 0
    .参数 lpFilename, 文本型, , 装载文件名的变量
    .参数 nSize, 整数型, , 文件名长度

.DLL命令 API_第一个线程, 逻辑型, "Kernel32.dll", "Thread32First", 公开, 下一个线程Thread32First
    .参数 快照句柄, 整数型, , 
    .参数 线程入口结构, 线程入口结构, 传址, 

.DLL命令 API_下一个线程, 逻辑型, "Kernel32.dll", "Thread32Next", 公开, 下一个线程
    .参数 快照句柄, 整数型, , 
    .参数 线程入口结构, 线程入口结构, , 

.DLL命令 API_枚举任务窗口, 整数型, "user32.dll", "EnumThreadWindows", , 枚举与指定任务(进程标识符)相关的窗口　非零表示成功，零表示失败
    .参数 线程标识符, 整数型, , 某线程的标识符，它的窗口将被枚举
    .参数 函数指针, 子程序指针, , 指向一个函数的指针，要求为每个子窗口都调用这个函数。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32d.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的
  

.DLL命令 API_取父窗口, 整数型, "user32.dll", "GetParent", , 判断指定窗口的父窗口　父窗口的句柄。如窗口没有父，或遇到错误，则返回零。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲测试的窗口的句柄


.DLL命令 API_关闭句柄, 整数型, "", "CloseHandle", , 关闭一个内核对象,如其中包括文件、文件映射、进程、线程、安全和同步对象建立后关闭
    .参数 hObject, 整数型, , 对象句柄

.DLL命令 API_获取窗口的进程标识符, 整数型, "", "GetWindowThreadProcessId", , 获取窗口的进程/线程ID,返回线程ID，将进程ID存入参数hProcessID进程标识符
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 hProcessID, 整数型, 传址, 存入返回进程ID，进程标识符

.DLL命令 API_取当前活动的窗口句柄, 整数型, "", "GetForegroundWindow", , 获取当前活动窗口

.DLL命令 API_GetActiveWindow, 整数型, "", "GetActiveWindow", , 

.DLL命令 API_EnumWindows, 空白型, "", "EnumWindows", , 枚举所有屏幕上的顶层窗口 枚举顶级窗口
    .参数 lpEnumFunc, 子程序指针, , 回调函数指针
    .参数 lPararm, 整数型, , 回调函数的应用程序定义值

.DLL命令 API_获取窗口标题, 整数型, "", "GetWindowTextA", , 通过HWND获取窗口标题
    .参数 hwnd, 整数型, , 窗口句柄ID
    .参数 lpString, 文本型, 传址, 装载标题的变量（指针）
    .参数 nMaxCount, 整数型, , 可保存在缓冲区内的字符的最大个数

.DLL命令 API_获取窗口标题长度, 整数型, "", "GetWindowTextLengthA", , 
    .参数 hwnd, 空白型, , 

.DLL命令 API_IsWindowVisible, 逻辑型, "", "IsWindowVisible", , 获取窗口是否显示
    .参数 hwnd, 整数型, , 窗口句柄ID

.DLL命令 API_GetWindowLong, 整数型, "", "GetWindowLongA", , 获取窗口信息结构
    .参数 hwnd, 整数型, , 窗口句柄
    .参数 lParam, 整数型, , 

.DLL命令 API_GetWindow, 整数型, "", "GetWindow", , 回与指定窗口有特定关系（如Z序或所有者）的窗口句柄
    .参数 hwnd, 整数型, , :窗口句柄,要获得的窗口句柄是依据nCmd参数值相对于这个窗口的句柄
    .参数 lParam, 整数型, , 说明指定窗口与要获得句柄的窗口之间的关系

.DLL命令 API_RegOpenKey, 整数型, "", "RegOpenKeyA", , 打开一个注册表项，返回是否成功（逻辑）,装载此项/键的句柄到Result，请用RegCloseKey()关闭注册表项
    .参数 hKey, 整数型, , 已打开键的句柄
    .参数 lpSubKey, 文本型, 传址, 子键名称：列：“SOFTWARE\Microsoft\Windows\CurrentVersion\Run”
    .参数 Result, 整数型, 传址, 装载此项的句柄（值）

.DLL命令 API_RegCloseKey, 整数型, "", "RegCloseKey", , 关闭注册表项
    .参数 hKey, 整数型, , 关闭的项句柄

.DLL命令 API_RegEnumValue, 整数型, "", "RegEnumValueA", , 枚举注册表项的值,返回值Long，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , Long，一个已打开项的句柄，或者指定一个标准项名
    .参数 dwIndex, 整数型, , Long，欲获取值的索引。注意第一个值的索引编号为零
    .参数 lpName, 文本型, 传址, String，用于装载位于指定索引处值名的一个缓冲区，传址
    .参数 cN, 整数型, 传址, Long，用于装载lpValueName缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量
    .参数 what, 整数型, , Long，未用；设为零 
    .参数 lpType, 整数型, 传址, Long，用于装载值的类型代码的变量
    .参数 lpDate, 字节集, 传址, Byte，用于装载值数据的一个缓冲区
    .参数 DcN, 整数型, 传址, Long，用于装载lpData缓冲区长度的一个变量。一旦返回，它会设为实际载入缓冲区的字符数量

.DLL命令 API_RegEnumKey, 整数型, "", "RegEnumKeyA", , 注册表_枚举返回值Long，零（ERROR_SUCCESS）表示成功。其他任何值都代表一个错误代码
    .参数 hKey, 整数型, , Long，一个已打开项的句柄，或者指定一个标准项名
    .参数 dwIndex, 整数型, , Long，欲获取的子项的索引。第一个子项的索引编号为零
    .参数 lpName, 文本型, 传址, String，用于装载指定索引处项名的一个缓冲区
    .参数 cbName, 整数型, , lpName缓冲区的长度

.DLL命令 API_GetWindowInfo, 逻辑型, "", "GetWindowInfo", , 
    .参数 hwnd, 整数型, , 
    .参数 pwi, WINDOWINFO, , '结构体

.DLL命令 API_IsWindow, 逻辑型, "", "IsWindow", 公开, 
    .参数 hWnd, 整数型, , 

.DLL命令 API_GetWindowPlacement, 空白型, "", "GetWindowPlacement", , 获窗口状态
    .参数 hWnd, 整数型, , 
    .参数 lpwndpl, WINDOWPLACEMENT, 传址, 

.DLL命令 API_ShowWindow, 空白型, "", "ShowWindow", 公开, 
    .参数 hWnd, 整数型, , 
    .参数 nCmdShow, 整数型, , 

.DLL命令 API_IsProcessInJob, 整数型, "", "IsProcessInJob", , 该IsProcessInJob函数确定进程是否在指定的工作运行。
    .参数 ProcessHandle, 整数型, , 
    .参数 JobHandle, 整数型, , 
    .参数 Result, 逻辑型, , 

.DLL命令 API_GetForegroundWindow, 整数型, "", "GetForegroundWindow", 公开, 获取当前窗口句柄SetForegroundWindow

.DLL命令 API_SetForegroundWindow, 空白型, "", "SetForegroundWindow", 公开, 设置为当前活动窗口
    .参数 hwn, 整数型, , 

.程序集 程序集1, , , 

.程序集变量 窗口句柄, 整数型, , , 用来装载[枚举窗口过程]中的窗口句柄
.程序集变量 窗口标题, 文本型, , , 用来装载[枚举窗口过程]中的窗口标题
.程序集变量 线程数量, 整数型, , , 用来装载[枚举窗口过程]中的线程数量，暂不用
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

提升进程权限 ()
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 进程详细信息, 进程详细信息, , "0", 


 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (测试窗口, , 真)
 ' 获取进程序列表 (进程详细信息, )
 ' 输出调试文本 (获取当前进程路径 ())


.子程序 获取进程序列表, 空白型, , 进程标识符/进程名称/线程优先权/线程数/父进程标识符/进程模块标识符/模块路径/
.参数 进程详细信息数组, 进程详细信息, 数组, 装载进程详细信息的结构体。
.参数 是否获取窗口标题, 逻辑型, 可空, 如果不获取主窗口标题，则子程序 执行效率高。默认值为 假 ，不获取标题

.局部变量 进程详细信息, 进程详细信息, , , 
.局部变量 aa, 整数型, , , 调式用。
.局部变量 进程快照, 整数型, , , 
.局部变量 进程信息, PROCESSENTRY32, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 模块文件名, 文本型, , , 
.局部变量 pid, 整数型, , , 
.局部变量 取路径结果, 整数型, , , 
.局部变量 局_窗口信息, 窗口信息, , , 
.局部变量 顶级窗口句柄_集, 字节集, , , 
.局部变量 进程句柄_集, 字节集, , , 
.局部变量 顶级窗口句柄_数, 整数型, , , 
.局部变量 主窗口句柄, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 局_线程标识, 整数型, , , 
.局部变量 局_窗口句柄, 整数型, , , 
.局部变量 局_进程标识符, 整数型, , , 

赋值 (aa, 取启动时间 ())

清除数组 (进程详细信息数组)
.如果真 (是否获取窗口标题)
    赋值 (顶级窗口句柄_数, 获取顶级窗口句柄集 (顶级窗口句柄_集))
     ' .计次循环首 (顶级窗口句柄_数, i)
         ' 主窗口句柄 ＝ 取字节集数据 (顶级窗口句柄_集, #整数型, (i － 1) × 4 ＋ 1)
         ' 局_窗口标题 ＝ 取空白文本 (256)
         ' API_获取窗口标题 (主窗口句柄, 局_窗口标题, 256)
         ' ' 调试输出 (局_窗口标题)
         ' 局_线程标识 ＝ API_获取窗口的进程标识符 (主窗口句柄, 局_进程标识符)
         ' 输出调试文本 (“i=” ＋ 到文本 (i) ＋ “      主窗口句柄=” ＋ 到文本 (主窗口句柄) ＋ “局_进程标识符=” ＋ 到文本 (局_进程标识符) ＋ “       进程标题=” ＋ 局_窗口标题)
        
        
     ' .计次循环尾 ()
     ' 调试输出 (顶级窗口句柄_集)
.如果真结束
赋值 (进程快照, API_创建进程快照 (15, 0)) ' 15即所有信息，
.如果真 (等于 (进程快照, 0))
    返回 ()
.如果真结束
赋值 (进程信息.dwSize, 296) ' 初始化结构体大小
赋值 (进程句柄, API_第一个进程 (进程快照, 进程信息))

.判断循环首 (不等于 (进程句柄, 0))
    处理事件 ()
    赋值 (模块文件名, 取空白文本 (1024))
    赋值 (pid, API_OpenProcess (1040, 0, 进程信息.th32ProcessID)) ' PROCESS_QUERY_INFORMATION（查询信息） =&H400  PROCESS_VM_READ（读VM内存）      =&H10
    赋值 (取路径结果, API_获取模块全路径名 (pid, 0, 模块文件名, 1024))
     ' 输出调试文本 (模块文件名)
     ' 窗口句柄 ＝ 0  ' 程序集变量
     ' 窗口标题 ＝ “”  ' 程序集变量
     ' 输出调试文本 (“进程句柄th32ProcessID=” ＋ 到文本 (进程信息.th32ProcessID))
     ' 输出调试文本 (模块文件名)
    赋值 (主窗口句柄, 0)
    赋值 (局_窗口标题, “”)
    .如果真 (不等于 (进程信息.th32ProcessID, 0))
        .如果真 (是否获取窗口标题) ' 判断是否进行取窗口标题
            赋值 (主窗口句柄, 取进程主窗口标题进程线程 (进程信息.th32ProcessID, 顶级窗口句柄_集, 局_窗口信息))
             ' 输出调试文本 (“主窗口句柄” ＋ 到文本 (主窗口句柄))
            .如果真 (不等于 (主窗口句柄, 0))
                赋值 (进程详细信息.进程主窗口句柄, 局_窗口信息.窗口句柄)
                赋值 (进程详细信息.进程主窗口标题, 局_窗口信息.窗口标题)
                 ' 输出调试文本 (“进识=” ＋ 到文本 (进程信息.th32ProcessID) ＋ “ 主窗口句柄=” ＋ 到文本 (主窗口句柄) ＋ “       进程标题=” ＋ 进程详细信息.进程主窗口标题)
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (不等于 (寻找文本 (模块文件名, “\??\”, , 真), -1))
        赋值 (模块文件名, 取文本右边 (模块文件名, 相减 (取文本长度 (模块文件名), 4)))
    .如果真结束
    赋值 (进程详细信息.进程模块全路径, 到文本 (删首尾空 (模块文件名)))
    
    赋值 (进程详细信息.线程优先权, 进程信息.pcPriClassBase)
    赋值 (进程详细信息.线程数, 进程信息.cntThreads)
     ' 进程详细信息.线程数 ＝ 线程数量
    赋值 (进程详细信息.父进程标识符, 进程信息.th32ParentProcessID)
    赋值 (进程详细信息.进程模块标识符, 进程信息.th32ModuleID)
    赋值 (进程详细信息.进程标识符ID, 进程信息.th32ProcessID)
    赋值 (进程详细信息.进程名称, 到文本 (进程信息.szExeFile))
    
     ' 输出调试文本 (到文本 (进程详细信息.进程主窗口句柄) ＋ 进程详细信息.进程主窗口标题 ＋ 到文本 (进程信息.szExeFile) ＋ “  =  ” ＋ 进程详细信息.进程模块全路径 ＋ “线程数量：” ＋ 到文本 (线程数量) ＋ “==” ＋ 到文本 (进程信息.cntThreads))
    
    加入成员 (进程详细信息数组, 进程详细信息)
    
    赋值 (进程句柄, API_下一个进程 (进程快照, 进程信息))
.判断循环尾 ()
API_关闭句柄 (进程快照)
 ' ===========================================
输出调试文本 (相加 (“取进程列表时间花了：”, 到文本 (相减 (取启动时间 (), aa))))


.子程序 取进程主窗口标题进程线程, 整数型, 公开, 根据进程标识符和主窗口句柄集,取得进程标识对应的主窗口信息，,返回窗口句柄
.参数 进程标识符, 整数型, , 传入进程标识
.参数 顶级窗口句柄_集, 字节集, , 传入窗口句柄集
.参数 传_窗口信息, 窗口信息, , 用来装载窗口信息的结构体

.局部变量 句柄数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 局_进程标识符, 整数型, , , 
.局部变量 局_线程标识, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 
.局部变量 局_窗口句柄, 整数型, , , 
.局部变量 局_窗口标题长度, 整数型, , , 
.局部变量 临_窗口句柄, 整数型, , , 
.局部变量 临_线程标识, 整数型, , , 

 ' 输出调试文本 (进程标识符)
.如果真 (不等于 (进程标识符, 0))
    赋值 (句柄数, 相除 (取字节集长度 (顶级窗口句柄_集), 4))
    .如果真 (大于 (句柄数, 0))
        赋值 (局_窗口句柄, 0)
        .计次循环首 (句柄数, i)
            赋值 (临_窗口句柄, 取字节集数据 (顶级窗口句柄_集, #整数型, 相加 (相乘 (相减 (i, 1), 4), 1)))
            赋值 (临_线程标识, API_获取窗口的进程标识符 (临_窗口句柄, 局_进程标识符))
            .如果真 (等于 (进程标识符, 局_进程标识符))
                .如果 (等于 (局_窗口句柄, 0))
                    赋值 (局_窗口句柄, 临_窗口句柄)
                    赋值 (局_线程标识, 临_线程标识)
                .否则
                    .如果真 (小于 (临_窗口句柄, 局_窗口句柄))
                        赋值 (局_窗口句柄, 临_窗口句柄)
                        赋值 (局_线程标识, 临_线程标识)
                    .如果真结束
                    
                .如果结束
                 ' 本源码来自易语言资源网(www.5A5X.com)
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (不等于 (局_窗口句柄, 0))
            赋值 (局_窗口标题长度, 256) ' API_获取窗口标题长度 (局_窗口句柄)
            赋值 (局_窗口标题, 取空白文本 (255))
            .如果真 (不等于 (API_获取窗口标题 (局_窗口句柄, 局_窗口标题, 局_窗口标题长度), 0))
                赋值 (传_窗口信息.窗口标题, 局_窗口标题)
                赋值 (传_窗口信息.窗口句柄, 局_窗口句柄)
                赋值 (传_窗口信息.所属进程, 进程标识符)
                赋值 (传_窗口信息.所在线程, 局_线程标识)
                 ' 输出调试文本 (“i=” ＋ 到文本 (i) ＋ “  局_窗口句柄=” ＋ 到文本 (局_窗口句柄) ＋ “ 进程标识符=” ＋ 到文本 (进程标识符) ＋ “  局_窗口标题=” ＋ 局_窗口标题)
                返回 (局_窗口句柄)
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束
返回 (0)
 ' 一个整数值，四个字节


.子程序 进程ID获取主窗口信息, 整数型, 公开, 返回窗口句柄,参_进程标识符  参_传窗口信息
.参数 参_进程标识符, 整数型, , 
.参数 参_传窗口信息, 窗口信息, 可空, 

.局部变量 局_主窗口字节集, 字节集, , , 
.局部变量 局_传窗口信息, 窗口信息, , , 

 ' 获取顶级窗口句柄集 (局_主窗口字节集)
取进程主窗口标题进程线程 (参_进程标识符, 局_主窗口字节集, 局_传窗口信息)
.如果真 (取反 (是否为空 (参_传窗口信息)))
    赋值 (参_传窗口信息, 局_传窗口信息)
.如果真结束
返回 (参_传窗口信息.窗口句柄)

.子程序 未用_进程ID获取窗口信息, 空白型, , 通过线程枚举获取主窗口句柄标题,=====================================
.参数 进程标示符, 整数型, , 
.参数 传_窗口信息, 窗口信息, , 返回窗口信息结构体

.局部变量 线程入口结构, 线程入口结构, , , 
.局部变量 快照句柄, 整数型, , , 
.局部变量 临时布尔变量, 逻辑型, , , 
.局部变量 内存_窗口信息, 字节集, , , 
.局部变量 内存_窗口信息地址, 整数型, , , 
.局部变量 M_窗口句柄, 整数型, , , 

赋值 (线程数量, 0)
赋值 (快照句柄, API_创建进程快照 (4, 0))
赋值 (线程入口结构.返回大小, 28)
.如果真 (不等于 (快照句柄, 0))
    赋值 (临时布尔变量, API_第一个线程 (快照句柄, 线程入口结构))
    .判断循环首 (临时布尔变量)
        .如果真 (等于 (线程入口结构.所属进程标示符, 进程标示符))
             ' 线程数量 ＝ 线程数量 ＋ 1
            赋值 (内存_窗口信息, 取空白字节集 (260)) ' 4+256
            赋值 (内存_窗口信息地址, 取变量数据地址 (内存_窗口信息))
             ' 输出调试文本 (“枚举开始........”)
            
            API_枚举任务窗口 (线程入口结构.线程标示符, &过程函数_枚举主窗口, 内存_窗口信息地址)
            赋值 (M_窗口句柄, 取字节集数据 (内存_窗口信息, #整数型, 1))
            
            .如果真 (不等于 (M_窗口句柄, 0))
                赋值 (传_窗口信息.窗口句柄, M_窗口句柄) ' 一个整数值，四个字节
                赋值 (传_窗口信息.窗口标题, 到文本 (取字节集中间 (内存_窗口信息, 5, 256)))
            .如果真结束
            
        .如果真结束
        赋值 (临时布尔变量, API_下一个线程 (快照句柄, 线程入口结构))
    .判断循环尾 ()
    
.如果真结束

API_关闭句柄 (快照句柄)



.子程序 过程函数_枚举主窗口, 逻辑型, , 
.参数 hwnd, 整数型, , 
.参数 lParam, 整数型, , 传入内存地址

.局部变量 句柄集, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 局_标题, 文本型, , , 
.局部变量 局_字节集, 字节集, , , 
.局部变量 句柄数, 整数型, , , 
.局部变量 数据结构字节集, 字节集, , , 
.局部变量 句柄集长度, 整数型, , , 
.局部变量 窗口句柄地址, 整数型, , , 

 ' 输出调试文本 (hwnd)
.如果真 (不等于 (hwnd, 0))
    赋值 (数据结构字节集, 指针到字节集 (lParam, 12))
    赋值 (句柄集长度, 取字节集数据 (数据结构字节集, #整数型, 5))
    赋值 (句柄集, 指针到字节集 (取字节集数据 (数据结构字节集, #整数型, 1), 句柄集长度))
    赋值 (句柄数, 相除 (取字节集长度 (句柄集), 4))
    赋值 (窗口句柄地址, 取字节集数据 (数据结构字节集, #整数型, 9))
     ' 调试输出 (句柄集)
    .如果真 (大于 (句柄数, 0))
        .计次循环首 (句柄数, i)
            .如果真 (等于 (hwnd, 取字节集数据 (句柄集, #整数型, 相加 (相乘 (相减 (i, 1), 4), 1))))
                写到内存 (hwnd, 窗口句柄地址, 4)
                输出调试文本 (“”)
                输出调试文本 (相加 (“I=”, 到文本 (i), “    枚举主窗口过程函数_窗口句柄地址=”, 到文本 (hwnd)))
                 ' 调试输出 (hwnd)
                返回 (假)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.如果真结束
返回 (真)






.子程序 暂未用_枚举窗口过程函数, 逻辑型, , 
.参数 hwnd, 整数型, , 
.参数 lParam, 整数型, , 传入内存地址

.局部变量 进程信息, 整数型, , , 
.局部变量 窗口数据, 字节集, , , 4+255 = 259
.局部变量 局_窗口标题, 文本型, , , 255
.局部变量 局_窗口句柄, 整数型, , , 4

.如果真 (不等于 (hwnd, 0))
    .如果真 (不等于 (API_取父窗口 (hwnd), 0))
        赋值 (局_窗口句柄, API_取父窗口 (hwnd))
        赋值 (局_窗口标题, 取空白文本 (255))
        API_获取窗口标题 (局_窗口句柄, 局_窗口标题, 255)
        赋值 (窗口数据, 取空白字节集 (259))
        赋值 (窗口数据, 相加 (到字节集 (局_窗口句柄), 到字节集 (局_窗口标题)))
        输出调试文本 (相加 (“线程：”, 到文本 (局_窗口标题), 到文本 (局_窗口句柄), “数据地址=”, 到文本 (lParam)))
        写到内存 (窗口数据, lParam, 259)
         ' 窗口标题 ＝ 删首尾空 (窗口标题)
    .如果真结束
    返回 (真)
.如果真结束
返回 (假)

.子程序 取模块路径, 文本型, 公开, 通过进程ID取模块路径
.参数 processid, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块信息, , , 

赋值 (snap, API_创建进程快照 (8, processid))
.如果真 (等于 (snap, -1))
    返回 (“”)
.如果真结束
赋值 (mod.size, 1024)
API_Module32First (snap, mod)
API_关闭句柄 (snap)
返回 (取字节集数据 (到字节集 (mod.szpath), 10, ))


.子程序 提升进程权限, 逻辑型, , 
.参数 目标进程, 整数型, 可空, 
.参数 权限类别, 文本型, 可空, 

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, TOKEN_PRIVILEGES, , , 
.局部变量 tkpNewButIgnored, TOKEN_PRIVILEGES, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.如果真 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, API_GetCurrentProcess ())
.如果真结束
.如果真 (是否为空 (权限类别))
    赋值 (权限类别, #调试)
.如果真结束
API_打开令牌 (hdlProcessHandle, 40, hdlTokenHandle)
API_恢复权限 (“”, 权限类别, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
返回 (API_获取令牌特权 (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))



.子程序 获取当前进程路径, 文本型, 公开, 
.局部变量 hWnd, 整数型, , , 
.局部变量 hThreadID, 整数型, , , 线程ID
.局部变量 hProcessID, 整数型, , , 进程ID
.局部变量 路径, 文本型, , , 

赋值 (hWnd, API_取当前活动的窗口句柄 ()) ' 获得当前激活的窗口句柄
 ' hWnd ＝ GetActiveWindow ()  ' 只能获得位于同一进程中的激活的窗口句柄
输出调试文本 (hWnd)
赋值 (hThreadID, API_获取窗口的进程标识符 (hWnd, hProcessID))
输出调试文本 (相加 (“当前进程ID：  ”, 到文本 (hProcessID)))
赋值 (路径, 取模块路径 (hProcessID))
.如果 (不等于 (寻找文本 (路径, “\??\”, , 真), -1))
    赋值 (路径, 取文本右边 (路径, 相减 (取文本长度 (路径), 4)))
.否则
    
.如果结束
输出调试文本 (相加 (“当前进程：活动窗口句柄”, 到文本 (hWnd), “  ”, 路径))
返回 (路径)



.子程序 获取窗口进程路径, 文本型, 公开, 
.参数 参_窗口句柄, 整数型, , 

.局部变量 hWnd, 整数型, , , 
.局部变量 hThreadID, 整数型, , , 线程ID
.局部变量 hProcessID, 整数型, , , 进程ID
.局部变量 路径, 文本型, , , 

赋值 (hWnd, 参_窗口句柄) ' API_取当前活动的窗口句柄 ()  ' 获得当前激活的窗口句柄
 ' hWnd ＝ GetActiveWindow ()  ' 只能获得位于同一进程中的激活的窗口句柄
输出调试文本 (hWnd)
赋值 (hThreadID, API_获取窗口的进程标识符 (hWnd, hProcessID))
输出调试文本 (相加 (“当前进程ID：  ”, 到文本 (hProcessID)))
赋值 (路径, 取模块路径 (hProcessID))
.如果 (不等于 (寻找文本 (路径, “\??\”, , 真), -1))
    赋值 (路径, 取文本右边 (路径, 相减 (取文本长度 (路径), 4)))
.否则
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束

输出调试文本 (相加 (“当前进程：活动窗口句柄”, 到文本 (hWnd), “  ”, 路径))
返回 (路径)


.子程序 获取顶级窗口句柄集, 整数型, 公开, 获取顶级窗口句柄及所属进程标识符,返回窗口数
.参数 窗口句柄字节集, 字节集, , 窗口句柄字节集，4字节为一句柄，4*窗口句柄个数

.局部变量 数据结构集, 字节集, , , 4 成员数，4数据地址,通过地址集来获得数据
.局部变量 p, 整数型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 字节集地址, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 窗口信息字节集, 字节集, , , 
.局部变量 标题, 文本型, , , 

输出调试文本 (“获取顶级窗口标题集”)

赋值 (数据结构集, 取空白字节集 (8)) ' 初始化
赋值 (p, 取变量数据地址 (数据结构集))

API_EnumWindows (&获取顶级窗口句柄集_过程函数_枚举窗口, p)

赋值 (成员数, 取字节集数据 (数据结构集, #整数型, 1))
赋值 (字节集地址, 取字节集数据 (数据结构集, #整数型, 5))

 ' 输出调试文本 (“数据结构集”)
 ' 调试输出 (数据结构集)

赋值 (窗口句柄字节集, 指针到字节集 (字节集地址, 相乘 (成员数, 4)))
释放内存 (字节集地址)
返回 (成员数)



.子程序 获取顶级窗口句柄集_过程函数_枚举窗口, 逻辑型, , ..........
.参数 hwnd, 整数型, , 窗口句柄
.参数 lParam, 整数型, , 应用程序定义值

.局部变量 Mp, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 
.局部变量 数据结构集, 字节集, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 信息数据集, 字节集, , , 
.局部变量 数据地址, 整数型, , , 

.如果真 (不等于 (hwnd, 0))
    .如果真 (API_IsWindowVisible (hwnd)) ' ( 且 API_GetWindow (hwnd, #GW_OWNER) ＝ 0)  ' 是否可见窗口,是否有拥有者
         ' 通过地址获取结构
        赋值 (数据结构集, 指针到字节集 (lParam, 8)) ' 4 成员数，+4数据地址
        赋值 (成员数, 取字节集数据 (数据结构集, #整数型, 1))
        赋值 (数据地址, 取字节集数据 (数据结构集, #整数型, 5))
        
        .如果 (大于 (成员数, 0))
            赋值 (信息数据集, 相加 (指针到字节集 (数据地址, 相乘 (成员数, 4)), 到字节集 (hwnd)))
        .否则
            赋值 (信息数据集, 到字节集 (hwnd))
        .如果结束
        
         ' 新数据写入申请内存
        赋值 (成员数, 相加 (成员数, 1))
        .如果真 (不等于 (数据地址, 0))
            释放内存 (数据地址)
        .如果真结束
        赋值 (Mp, 申请内存 (相乘 (成员数, 4), 真)) ' 成员数＋１＊  4 = 4（窗口句柄）
        写到内存 (信息数据集, Mp, 相乘 (成员数, 4))
        
         ' 更新数据结构
        赋值 (数据结构集, 相加 (到字节集 (成员数), 到字节集 (Mp)))
        写到内存 (数据结构集, lParam, 8)
        
    .如果真结束
    
.如果真结束
返回 (真)


.子程序 按进程名获取窗口信息, 窗口信息, , 按进程名获取"窗口信息",返回结构体"窗口信息"
.参数 进程名称, 文本型, , 进程名称

.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 进程信息, PROCESSENTRY32, , , 
.局部变量 窗口信息, 窗口信息, , , 

赋值 (进程快照, API_创建进程快照 (15, 0))
.如果真 (不等于 (进程快照, 0))
    赋值 (进程信息.dwSize, 296)
    赋值 (进程句柄, API_第一个进程 (进程快照, 进程信息))
    .判断循环首 (不等于 (进程句柄, 0))
        .如果真 (不等于 (寻找文本 (到文本 (进程信息.szExeFile), 进程名称, , 真), -1))
            赋值 (窗口句柄, 0)
            赋值 (窗口标题, “”)
            未用_进程ID获取窗口信息 (进程信息.th32ProcessID)
            赋值 (窗口信息.窗口句柄, 窗口句柄)
            赋值 (窗口信息.窗口标题, 窗口标题)
            跳出循环 ()
        .如果真结束
        赋值 (进程句柄, API_下一个进程 (进程快照, 进程信息))
    .判断循环尾 ()
    API_关闭句柄 (进程快照)
.如果真结束
返回 (窗口信息)



.子程序 按窗口句柄取进程信息, 进程详细信息, 公开, 返回进程ID；进程名；进程全路径名
.参数 参_窗口句柄, 整数型, , 

.局部变量 进程号ID, 整数型, , , 
.局部变量 进程信息1, 进程详细信息, , , 
.局部变量 进程文件名, 文本型, , , 
.局部变量 结果, 整数型, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 进程信息, PROCESSENTRY32, , , 
.局部变量 pid, 整数型, , , 
.局部变量 局_窗口标题, 文本型, , , 

.如果真 (不等于 (API_获取窗口的进程标识符 (参_窗口句柄, 进程号ID), 0))
    赋值 (进程信息1.进程标识符ID, 进程号ID)
    赋值 (进程文件名, 取空白文本 (1024))
    赋值 (pid, API_OpenProcess (1040, 0, 进程号ID)) ' 进程句柄ID
    赋值 (结果, API_获取模块全路径名 (pid, 0, 进程文件名, 1024))
    .如果真 (不等于 (结果, 0))
        赋值 (进程信息1.进程模块全路径, 到文本 (删首尾空 (进程文件名)))
         ' 进程信息1.进程名 ＝ 取文件名 (进程信息1.进程全路径名)
    .如果真结束
    赋值 (进程信息1.进程句柄ID, pid)
    赋值 (进程信息1.进程标识符ID, 进程号ID)
    赋值 (进程快照, API_创建进程快照 (15, 0))
    .如果真 (不等于 (进程快照, 0))
        赋值 (进程信息.dwSize, 296)
        赋值 (进程句柄, API_第一个进程 (进程快照, 进程信息))
        ' 本源码来自易语言资源网(www.5A5X.com)
        .判断循环首 (不等于 (进程句柄, 0))
            .如果真 (等于 (进程信息.th32ProcessID, 进程号ID))
                赋值 (进程信息1.进程名称, 到文本 (进程信息.szExeFile))
                赋值 (进程信息1.线程数, 进程信息.cntThreads)
                赋值 (进程信息1.线程优先权, 进程信息.pcPriClassBase)
                赋值 (进程信息1.父进程标识符, 进程信息.th32ParentProcessID)
                赋值 (进程信息1.进程主窗口句柄, 参_窗口句柄)
                赋值 (局_窗口标题, 取空白文本 (1024))
                API_获取窗口标题 (参_窗口句柄, 局_窗口标题, 1024)
                赋值 (进程信息1.进程主窗口标题, 删首尾空 (局_窗口标题))
                赋值 (进程信息1.进程模块标识符, 进程信息.th32ModuleID)
                跳出循环 ()
            .如果真结束
            赋值 (进程句柄, API_下一个进程 (进程快照, 进程信息))
        .判断循环尾 ()
        API_关闭句柄 (进程快照)
    .如果真结束
    API_关闭句柄 (pid)
.如果真结束
返回 (进程信息1)





.子程序 获取任务栏窗口句柄集_过程函数_枚举栏任务窗口, 逻辑型, , 被：“获取任务栏窗口句柄集”API_EnumWindows 调用
.参数 hwnd, 整数型, , 
.参数 lParam, 整数型, , 

.局部变量 szTitle, 文本型, , , 
.局部变量 lStyle, 整数型, , , 
.局部变量 数据长度, 整数型, , , 
.局部变量 数据地址, 整数型, , , 
.局部变量 信息数据集, 字节集, , , 
.局部变量 数据结构集, 字节集, , , 
.局部变量 Mp, 整数型, , , 

赋值 (szTitle, 取空白文本 (1024))
赋值 (lStyle, API_GetWindowLong (hwnd, #GWL_STYLE))
.如果真 (并且 (API_IsWindowVisible (hwnd), 等于 (位与 (lStyle, #WS_EX_TOOLWINDOW), 0), 等于 (API_GetWindow (hwnd, #GW_OWNER), 0)))
     ' EX_T ＝ 取十六进制文本 (#WS_EX_TOOLWINDOW)
    .如果 (不等于 (API_获取窗口标题 (hwnd, szTitle, 1024), 0))
        赋值 (数据结构集, 指针到字节集 (lParam, 8)) ' 4 成员数，+4数据地址
        赋值 (数据长度, 取字节集数据 (数据结构集, #整数型, 1))
        赋值 (数据地址, 取字节集数据 (数据结构集, #整数型, 5))
        .如果 (大于 (数据长度, 0))
            赋值 (信息数据集, 相加 (指针到字节集 (数据地址, 数据长度), 到字节集 (hwnd)))
        .否则
            赋值 (信息数据集, 到字节集 (hwnd))
        .如果结束
        
         ' 新数据写入申请内存
        赋值 (数据长度, 相加 (数据长度, 4))
        .如果真 (不等于 (数据地址, 0))
            释放内存 (数据地址)
        .如果真结束
        赋值 (Mp, 申请内存 (数据长度, 真)) ' 数据长度+  4 = 4（窗口句柄）
        写到内存 (信息数据集, Mp, 数据长度)
        调试输出 (信息数据集)
         ' 更新数据结构
        赋值 (数据结构集, 相加 (到字节集 (数据长度), 到字节集 (Mp)))
        写到内存 (数据结构集, lParam, 8)
         ' 输出调试文本 (到文本 (位或 (G_lStyle, #WS_EX_APPWINDOW) ＝ 0) ＋ EX_T ＋ 到文本 (G_lStyle) ＋ “=” ＋ G_szTitle)
        
    .否则
        
    .如果结束
    
.如果真结束
返回 (真)



.子程序 获取任务栏窗口句柄集, 字节集, ,  获取任务窗口句柄集，4字节为一句柄值。调用"枚主任务窗口过程函数"过程
.局部变量 字节集, 字节集, , , 
.局部变量 结构字节集, 字节集, , , 长度 4 + 字节集地址 4
.局部变量 字节集结构地址, 整数型, , , 
.局部变量 字节集长度, 整数型, , , 
.局部变量 字节集地址, 整数型, , , 

赋值 (结构字节集, 取空白字节集 (8)) ' 长度 4 + 字节集地址 4
赋值 (字节集地址, 0)
赋值 (字节集结构地址, 取变量数据地址 (结构字节集))
API_EnumWindows (&获取任务栏窗口句柄集_过程函数_枚举栏任务窗口, 字节集结构地址)
.如果真 (不等于 (字节集结构地址, 0))
    赋值 (字节集长度, 取字节集数据 (结构字节集, #整数型, 1))
    .如果真 (大于 (字节集长度, 0))
        赋值 (字节集地址, 取字节集数据 (结构字节集, #整数型, 5))
        赋值 (字节集, 指针到字节集 (字节集地址, 字节集长度))
    .如果真结束
    
.如果真结束
.如果真 (不等于 (字节集地址, 0))
    释放内存 (字节集地址)
.如果真结束
返回 (字节集)



.子程序 判断程序是否已启动, 逻辑型, 公开, '判断程序是否启动，输出详细进程信息，不包括 进程主窗口句柄 和 进程主窗口标题
.参数 参_程序路径, 文本型, , 
.参数 参_进程详细信息, 进程详细信息, 可空, 

.局部变量 局_进程详细资料, 进程详细信息, , "0", 
.局部变量 i, 整数型, , , 

获取进程序列表 (局_进程详细资料)
.计次循环首 (取数组成员数 (局_进程详细资料), i)
    .如果真 (等于 (到小写 (参_程序路径), 到小写 (局_进程详细资料 [i], 进程模块全路径)))
        赋值 (参_进程详细信息, 局_进程详细资料 [i])
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)



.子程序 取窗口状态, 整数型, 公开, 通过句柄，返回 0、非激活状态 1、激活状态
.参数 参_数窗口句柄, 整数型, , 
.参数 参_WINDOWINFO, WINDOWINFO, 可空, 

.局部变量 局_WINDOWINFO, WINDOWINFO, , , 

赋值 (局_WINDOWINFO.cbSize, 60)
.如果真 (API_IsWindow (参_数窗口句柄))
    API_GetWindowInfo (参_数窗口句柄, 局_WINDOWINFO)
    .如果真 (取反 (是否为空 (参_WINDOWINFO)))
        赋值 (参_WINDOWINFO, 局_WINDOWINFO)
    .如果真结束
    返回 (局_WINDOWINFO.dwWindowStatus)
.如果真结束
返回 (0)


.子程序 取窗口显示状态, 整数型, 公开, 通过句柄，返回 最小化最大化状态
.参数 参_数窗口句柄, 整数型, , 
.参数 参_WINDOWPLACEMENT, WINDOWPLACEMENT, 可空, 输出窗口性性

.局部变量 局_WINDOWPLACEMENT, WINDOWPLACEMENT, , , 

赋值 (参_WINDOWPLACEMENT.length, 48)
.如果真 (API_IsWindow (参_数窗口句柄))
    API_GetWindowPlacement (参_数窗口句柄, 局_WINDOWPLACEMENT)
    .如果真 (取反 (是否为空 (参_WINDOWPLACEMENT)))
        赋值 (参_WINDOWPLACEMENT, 局_WINDOWPLACEMENT)
    .如果真结束
     ' 返回 (局_WINDOWPLACEMENT.ptMinPosition)
.如果真结束
返回 (局_WINDOWPLACEMENT.showCmd)


.子程序 置窗口状态, 空白型, , API_ShowWindow (局_窗口句柄, #SW_SHOWMAXIMIZED)
.参数 参_窗口句柄, 空白型, , 

API_ShowWindow (参_窗口句柄, #SW_SHOWMAXIMIZED)


.子程序 判断程序标识符是否有效, 逻辑型, 公开, '参_进程标识符
.参数 参_进程标识符, 整数型, , 

.局部变量 局_参数, 逻辑型, , , PROCESS_VM_READ
.局部变量 局_PID, 整数型, , , 

.如果 (大于 (参_进程标识符, 0))
    赋值 (局_PID, API_OpenProcess (#PROCESS_VM_READ, 0, 参_进程标识符))
    输出调试文本 (局_PID)
    .如果 (大于 (局_PID, 0))
        API_关闭句柄 (局_PID)
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.否则
    返回 (假)
.如果结束


.窗口程序集 窗口程序集1, , , 

.程序集变量 进程详细信息, 进程详细信息, , "0", 
.子程序 _按钮1_被单击, 空白型, , 
输出调试文本 (取窗口状态 (取窗口句柄 ()))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _按钮2_被单击, 空白型, , 
.局部变量 局_进程信息, 进程详细信息, , , 

判断程序是否已启动 (“c:\windows\explorer.exe”, 局_进程信息)
输出调试文本 (局_进程信息.进程标识符ID)
输出调试文本 (判断程序标识符是否有效 (局_进程信息.进程标识符ID))
输出调试文本 (相加 (“取窗口显示状态=”, 到文本 (取窗口显示状态 (取窗口句柄 ()))))

.子程序 _测试窗口_创建完毕, 空白型, , 


.类模块 安装程序管理, , , 

.程序集变量 集_已安装程序数量, 整数型, , , 
.程序集变量 集_程序数量, 整数型, , , 
.程序集变量 集_安装列表信息组, 程序信息, , "0", 
.程序集变量 集_列表范围, 整数型, , , 
.程序集变量 集_已知程序信息组, AppInfo记录, , "0", 
.程序集变量 集_已知已安装程序信息组, 程序信息, , "0", 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_列表范围, 0)


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭 ()



.子程序 初始化, 空白型, 公开, 默认为0为默认不枚举操作系统补丁，1为枚举所有
.参数 列表范围, 整数型, 可空, 

.如果真 (取反 (是否为空 (列表范围)))
    赋值 (集_列表范围, 列表范围)
.如果真结束
枚举安装列表到数组 ()
读AppInfo到数组 ()
取已知已安装程序信息组 (集_已知已安装程序信息组)
 ' 打开AppInfo是否成功 ＝ 打开 (取运行目录 () ＋ “\data\AppInfo.edb”, “AppInfo”, , , , , )

.子程序 更新, 空白型, , 默认0为不枚举操作系统补丁，1为枚举所有
.参数 列表范围, 整数型, 可空, 

.如果真 (取反 (是否为空 (列表范围)))
    赋值 (集_列表范围, 列表范围)
.如果真结束
枚举安装列表到数组 ()
读AppInfo到数组 ()
取已知已安装程序信息组 (集_已知已安装程序信息组)
 ' 打开AppInfo是否成功 ＝ 打开 (取运行目录 () ＋ “\data\AppInfo.edb”, “AppInfo”, , , , , )
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 读AppInfo到数组, 空白型, , 
.局部变量 局_软件信息, AppInfo记录, , , 
.局部变量 i, 整数型, , , 

清除数组 (集_已知程序信息组)
.如果真 (打开 (相加 (取运行目录 (), “\data\AppInfo.edb”), “AppInfo”, , , , , ))
    到首记录 ()
    .计次循环首 (取记录数 (), i)
        赋值 (局_软件信息.type, 读 (“type”))
        赋值 (局_软件信息.AppName, 读 (“AppName”))
        赋值 (局_软件信息.fileName, 读 (“fileName”))
        赋值 (局_软件信息.Publisher, 读 (“Publisher”))
        赋值 (局_软件信息.nameKeyWord, 读 (“nameKeyWord”))
        赋值 (局_软件信息.InfFileName, 读 (“InfFileName”))
        加入成员 (集_已知程序信息组, 局_软件信息)
    .计次循环尾 ()
    关闭 ()
.如果真结束


.子程序 取已安装程序数量, 整数型, 公开, 
返回 (集_程序数量)



.子程序 取已知已安装程序信息组, 空白型, 公开, 取已知已案装程序信息列表,包括已知程序键值映射文件等
.参数 软件信息组, 程序信息, 数组, 装载软件信息类型

.局部变量 软件名称, 文本型, , , 
.局部变量 名称关键字, 文本型, , , 
.局部变量 名称关键字组, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 程序显示名, 文本型, , , 
.局部变量 是否找到, 逻辑型, , , 
.局部变量 ii, 整数型, , , 
.局部变量 软件信息, 程序信息, , , 
.局部变量 iii, 整数型, , , 

输出调试文本 (“”)
输出调试文本 (“子程序_取已知已安装程序信息组===============”)
.如果 (小于或等于 (取数组成员数 (集_已知已安装程序信息组), 0))
    .如果真 (大于 (取数组成员数 (集_已知程序信息组), 0))
        .计次循环首 (取数组成员数 (集_已知程序信息组), iii)
            赋值 (软件名称, 集_已知程序信息组 [iii], AppName) ' 读 (“AppName”)
            赋值 (名称关键字, 集_已知程序信息组 [iii], nameKeyWord) ' 读 (“nameKeyWord”)
            .如果真 (不等于 (名称关键字, “”))
                赋值 (名称关键字组, 分割文本 (名称关键字, “|”, ))
                .如果真 (大于 (取数组成员数 (名称关键字组), 0))
                    .如果真 (大于 (取数组成员数 (集_安装列表信息组), 0))
                        .计次循环首 (取数组成员数 (集_安装列表信息组), i)
                            赋值 (程序显示名, 集_安装列表信息组 [i], 程序显示名)
                             ' 输出调试文本 (“取已知已安装程序信息_程序显示名=” ＋ 程序显示名)
                             ' 输出调试文本 (名称关键字组 [1])
                            赋值 (是否找到, 假)
                            .计次循环首 (取数组成员数 (名称关键字组), ii)
                                .如果真 (不等于 (寻找文本 (程序显示名, 名称关键字组 [ii], , 真), -1))
                                    赋值 (是否找到, 真)
                                    跳出循环 ()
                                .如果真结束
                                 ' 本源码来自易语言资源网(www.5A5X.com)
                            .计次循环尾 ()
                            .如果真 (等于 (是否找到, 真))
                                赋值 (软件信息, 集_安装列表信息组 [i])
                                赋值 (软件信息.程序文件名, 集_已知程序信息组 [iii], fileName) ' 读(“fileName”)
                                赋值 (软件信息.键映射文件, 集_已知程序信息组 [iii], InfFileName) ' 读 (“InfFileName”)
                                输出调试文本 (相加 (“已安装=”, 软件信息.程序文件名, “ 软件名称=”, 软件信息.程序显示名))
                                加入成员 (软件信息组, 软件信息)
                                 ' 跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    赋值 (集_已知已安装程序信息组, 软件信息组)
.否则
    清除数组 (软件信息组)
    赋值 (软件信息组, 集_已知已安装程序信息组)
.如果结束





.子程序 取已知已安装程序信息_路径, 逻辑型, 公开, 并反回软件安装等信息 安装软件信息,需要提供软件路径名称。与AppInfo库中对应
.参数 软件路径, 文本型, , INT
.参数 软件信息, 程序信息, , OUT 装载软件信息类型

.局部变量 i, 整数型, , , 

.计次循环首 (取数组成员数 (集_已知已安装程序信息组), i)
    .如果真 (等于 (到小写 (软件路径), 到小写 (相加 (集_已知已安装程序信息组 [i], 安装路径, “\”, 集_已知已安装程序信息组 [i], 程序文件名))))
        赋值 (软件信息, 集_已知已安装程序信息组 [i])
        返回 (真)
    .如果真结束
    
.计次循环尾 ()
返回 (假)


.子程序 取已知程序信息, 逻辑型, 公开, 并反回软件安装等信息 安装软件信息,需要提供软件名称。与AppInfo库中对应
.参数 软件名称, 文本型, , 
.参数 软件信息, 程序信息, , 装载软件信息类型

.局部变量 名称关键字, 文本型, , , 
.局部变量 名称关键字组, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 程序显示名, 文本型, , , 
.局部变量 ii, 整数型, , , 
.局部变量 是否找到, 逻辑型, , , 
.局部变量 返回值, 逻辑型, , , 
.局部变量 iii, 整数型, , , 

赋值 (返回值, 假)
.如果真 (大于 (取数组成员数 (集_已知程序信息组), 0))
    .计次循环首 (取数组成员数 (集_已知程序信息组), iii)
        .如果 (等于 (到小写 (集_已知程序信息组 [iii], nameKeyWord), 到小写 (软件名称))) ' 查找 (读 (“nameKeyWord”)
            赋值 (名称关键字, 集_已知程序信息组 [iii], nameKeyWord) ' 读 (“nameKeyWord”)
            .如果真 (不等于 (名称关键字, “”))
                赋值 (名称关键字组, 分割文本 (名称关键字, “|”, ))
                .如果真 (大于 (取数组成员数 (名称关键字组), 0))
                    .如果真 (大于 (取数组成员数 (集_安装列表信息组), 0))
                        .计次循环首 (取数组成员数 (集_安装列表信息组), i)
                            赋值 (程序显示名, 集_安装列表信息组 [i], 程序显示名)
                            赋值 (是否找到, 假)
                            .计次循环首 (取数组成员数 (名称关键字组), ii)
                                .如果真 (不等于 (寻找文本 (程序显示名, 名称关键字组 [ii], , 真), -1))
                                    赋值 (是否找到, 真)
                                    跳出循环 ()
                                .如果真结束
                                
                            .计次循环尾 ()
                            .如果真 (等于 (是否找到, 真))
                                赋值 (软件信息, 集_安装列表信息组 [i])
                                赋值 (软件信息.程序文件名, 集_已知程序信息组 [iii], fileName) ' 读 (“fileName”)
                                赋值 (软件信息.键映射文件, 集_已知程序信息组 [iii], InfFileName) ' 读 (“InfFileName”)
                                跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
        .否则
            
        .如果结束
        
    .计次循环尾 ()
    
    
    
.如果真结束

返回 (是否找到)


.子程序 枚举安装列表到数组, 空白型, , 
.局部变量 枚举成功, 整数型, , , 
.局部变量 打开是否成功, 整数型, , , 
.局部变量 键句柄, 整数型, , , 
.局部变量 索引值, 整数型, , , 
.局部变量 项名, 文本型, , , 
.局部变量 键值数据, 字节集, , , 
.局部变量 键值数据文本, 文本型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 值_键值数据长度, 整数型, , , 
.局部变量 测试时间, 整数型, , , 
.局部变量 列表信息, 程序信息, , , 
.局部变量 值_项值, 整数型, , , 
.局部变量 枚举值成功, 整数型, , , 
.局部变量 值_项名长度, 整数型, , , 
.局部变量 值_项名, 文本型, , , 
.局部变量 值_索引值, 整数型, , , 
.局部变量 i, 整数型, , , 

数组清零 (集_安装列表信息组)
赋值 (打开是否成功, API_RegOpenKey (#HKEY_LOCAL_MACHINE, “SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall”, 键句柄))
.如果真 (不等于 (打开是否成功, 0))
    返回 ()
.如果真结束

赋值 (索引值, 0)
赋值 (值_键值数据长度, 255)
赋值 (值_项名长度, 255)
赋值 (测试时间, 取启动时间 ())
.循环判断首 ()
    赋值 (项名, 取空白文本 (255))
    赋值 (枚举成功, API_RegEnumKey (键句柄, 索引值, 项名, 取文本长度 (项名)))
     ' OK (项名)
    枚举信息并加入到列表 (项名)
    赋值 (索引值, 相加 (索引值, 1))
.循环判断尾 (等于 (枚举成功, 0))
API_RegCloseKey (键句柄)
输出调试文本 (到文本 (相减 (取启动时间 (), 测试时间)))
.计次循环首 (取数组成员数 (集_安装列表信息组), i)
    输出调试文本 (集_安装列表信息组 [i], 程序显示名)
.计次循环尾 ()
返回 ()


.子程序 枚举信息并加入到列表, 空白型, , SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
.参数 项名, 文本型, , 

.局部变量 表项值, 整数型, , , 
.局部变量 枚举数据, 整数型, , , 
.局部变量 项名长度, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 键值数据, 字节集, , , 
.局部变量 键值数据长度, 整数型, , , 
.局部变量 键值数据文本, 文本型, , , 
.局部变量 索引值, 整数型, , , 
.局部变量 项目全名, 文本型, , , 
.局部变量 列表信息, 程序信息, , , 
.局部变量 是否为安全补丁, 整数型, , , 

 ' 输出调试文本 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\” ＋ 项名)
赋值 (项目全名, 相加 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\”, 项名))
.如果真 (并且 (等于 (到大写 (取文本左边 (项名, 2)), “KB”), 等于 (集_列表范围, 0))) ' 是否为补丁项
    返回 ()
.如果真结束
赋值 (枚举数据, API_RegOpenKey (#HKEY_LOCAL_MACHINE, 项目全名, 表项值))
.如果真 (不等于 (枚举数据, 0))
    返回 ()
.如果真结束
赋值 (是否为安全补丁, 0)
赋值 (索引值, 0)
.循环判断首 ()
    赋值 (项名, 取空白文本 (255))
    赋值 (项名长度, 255)
    赋值 (键值数据, 取空白字节集 (255))
    赋值 (键值数据长度, 255)
    赋值 (枚举数据, API_RegEnumValue (表项值, 索引值, 项名, 项名长度, 0, 类型, 键值数据, 键值数据长度))
    赋值 (键值数据文本, 到文本 (键值数据))
    .如果真 (并且 (等于 (枚举数据, 0), 等于 (类型, 1))) ' 类型1为文本型
        .判断开始 (等于 (到小写 (项名), 到小写 (“ParentKeyName”)))
            .如果真 (等于 (到小写 (到文本 (键值数据)), 到小写 (“OperatingSystem”)))
                赋值 (列表信息.程序类型, “系统程序”)
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .判断 (等于 (到小写 (项名), 到小写 (“DisplayName”)))
            赋值 (列表信息.程序显示名, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“InstallDate”)))
            赋值 (列表信息.安装日期, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“InstallLocation”)))
            赋值 (列表信息.安装路径, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“InstallSource”)))
            赋值 (列表信息.安装源, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“DisplayIcon”)))
            赋值 (列表信息.反删除图标路径, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“DisplayVersion”)))
            赋值 (列表信息.版本号, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“Publisher”)))
            赋值 (列表信息.出版厂商, 到文本 (键值数据))
        .判断 (等于 (到小写 (项名), 到小写 (“UninstallString”)))
            赋值 (列表信息.反删除命令, 到文本 (键值数据))
        .默认
            
        .判断结束
        .如果 (并且 (等于 (集_列表范围, 1), 等于 (列表信息.程序显示名, “”)))
            
        .否则
            
        .如果结束
        
        
         ' 输出调试文本 (键值数据文本)
    .如果真结束
     ' 如果真 (枚举数据 ＝ 0 且 类型 ＝ 4)  ' SystemComponent
    赋值 (索引值, 相加 (索引值, 1))
.循环判断尾 (等于 (枚举数据, 0))
.如果真 (不等于 (到文本 (列表信息.程序显示名), “”))
    .判断开始 (等于 (集_列表范围, 0)) ' 0为默认不进行所有程序列表，只一般应用程序列表，补丁等不在其内
        .如果真 (或者 (不等于 (列表信息.程序类型, “系统程序”), 不等于 (寻找文本 (列表信息.程序显示名, “Windows Media Player”, , 真), -1))) ' 进行是否为系统程序(Windows Media Play除外)
            加入成员 (集_安装列表信息组, 列表信息)
             ' 输出调试文本 (列表信息.程序显示名)
        .如果真结束
        
    .默认
        加入成员 (集_安装列表信息组, 列表信息)
    .判断结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束
API_RegCloseKey (表项值)



 ' 不属于任何一个程序集、类模块的函数：
