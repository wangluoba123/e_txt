 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 IMAGE_BITMAP, "0", 隐藏, 位图
.常量 IMAGE_ICON, "1", 隐藏, 图标
.常量 IMAGE_CURSOR, "2", 隐藏, 指针
.常量 LR_LOADFROMFILE, "16", 隐藏, 
.常量 HKEY_CLASSES_ROOT, "-2147483648", 隐藏, 
.常量 HKEY_CURRENT_USER, "-2147483647", 隐藏, 
.常量 HKEY_LOCAL_MACHINE, "-2147483646", 隐藏, 
.常量 HKEY_USERS, "-2147483645", 隐藏, 
.常量 HKEY_PERFORMANCE_DATA, "-2147483644", 隐藏, 
.常量 HKEY_CURRENT_CONFIG, "-2147483643", 隐藏, 
.常量 HKEY_DYN_DATA, "-2147483642", 隐藏, 
.常量 编辑文档, "1", 隐藏, 
.常量 浏览文件夹, "2", 隐藏, 
.常量 寻找文件, "3", 隐藏, 
.常量 打开文件, "4", 隐藏, 
.常量 打印文档, "5", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库



 ' 所需要的模块
 ' ZCL_核库函数1.01 d:\My Documents\gdb\整理版\ZCL_核库函数1.01.ec


数据类型 TOKEN_PRIVILEGES, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 LuID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 POINTAPI, 公开, 坐标
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 SYSTEMTIME, 公开, 
    .成员 wYear, 短整数型, , , 
    .成员 wMonth, 短整数型, , , 
    .成员 wDayOfWeek, 短整数型, , , 
    .成员 wDay, 短整数型, , , 
    .成员 wHour, 短整数型, , , 
    .成员 wMinute, 短整数型, , , 
    .成员 wSecond, 短整数型, , , 
    .成员 wMilliseconds, 短整数型, , , 

数据类型 RECT, 公开, 
    .成员 左, 整数型, , , 
    .成员 顶, 整数型, , , 
    .成员 右, 整数型, , , 
    .成员 底, 整数型, , , 

数据类型 MSG, 公开, 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 进程结构, 公开, 
    .成员 结构长度, 整数型, , , 296字节
    .成员 引用计数, 整数型, , , 
    .成员 进程ID, 整数型, , , 
    .成员 默认堆ID, 整数型, , , 
    .成员 模块ID, 整数型, , , 
    .成员 线程数, 整数型, , , 
    .成员 父进程ID, 整数型, , , 
    .成员 线程优先级, 整数型, , , 
    .成员 保留, 整数型, , , 
    .成员 进程名, 字节型, , "256", 

数据类型 模块_字体信息, 公开, 
    .成员 字体名称, 文本型, , , 
    .成员 字体大小, 整数型, , , 
    .成员 字体颜色, 整数型, , , 
    .成员 字体类型, 整数型, , , 
    .成员 是否斜体, 整数型, , , 1为真,0为假
    .成员 是否下划线, 整数型, , , 1为真,0为假

数据类型 函数参数, , 
    .成员 参数1, 整数型, , , 
    .成员 参数2, 文本型, , , 

数据类型 启动信息数据, , 
    .成员 cb, 空白型, , , a结构长度
    .成员 lpReserved, 文本型, , , 保留
    .成员 lpDesktop, 空白型, , , 保留
    .成员 lpTitle, 文本型, , , 如果为控制台进程则为显示的标题
    .成员 dwX, 空白型, , , 窗口位置
    .成员 dwY, 空白型, , , 窗口位置
    .成员 dwXSize, 空白型, , , 窗口大小
    .成员 dwYSize, 空白型, , , 窗口大小
    .成员 dwXCountChars, 空白型, , , 控制台窗口字符号宽度
    .成员 dwYCountChars, 空白型, , , 控制台窗口字符号高度
    .成员 dwFillAttribute, 空白型, , , 控制台窗口填充模式
    .成员 dwFlags, 空白型, , , 创建标记
    .成员 wShowWindow, 空白型, , , 窗口显示标记如同ShowWindow中的标记
    .成员 cbReserved2, 空白型, , , 
    .成员 lpReserved2, 空白型, , , 
    .成员 hStdInput, 空白型, , , 错误输出句柄//气我
    .成员 hStdOutput, 空白型, , , 标准输入句柄
    .成员 hStdError, 空白型, , , 标准输出句柄

数据类型 进程返回数据, , 
    .成员 hProcess, 空白型, , , 进程句柄
    .成员 hThread, 空白型, , , 进程的主线程句柄  
    .成员 dwProcessId, 空白型, , , 进程ID
    .成员 dwThreadId, 空白型, , , 进程的主线程ID


.DLL命令 OpenProcessToken, 整数型, "advapi32.dll", "OpenProcessToken", , 打开进程令牌
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 LookupPrivilegeValueA, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 恢复权限
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 AdjustTokenPrivileges, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 获取令牌特权
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 GetModuleFileName, 整数型, "", "GetModuleFileNameA", 公开, 
    .参数 hModule, 整数型, , 
    .参数 lpFileName, 文本型, , 
    .参数 nSize, 整数型, , 

.DLL命令 _取整型指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 整数型, 传址, 
    .参数 源指针, 整数型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取短整型指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 短整数型, 传址, 
    .参数 源指针, 短整数型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取字节指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 字节型, 传址, 
    .参数 源指针, 字节型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取双精度指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 字节型, 传址, 
    .参数 源指针, 字节型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取子程序指针, 整数型, "", "lstrcpyn", 公开, 返回整型子程序
    .参数 目的指针, 子程序指针, , 
    .参数 源指针, 子程序指针, , 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取字节集指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 字节集, 传址, 
    .参数 源指针, 字节集, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _取文本指针, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 文本型, 传址, 
    .参数 源指针, 文本型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 lstrcpy, 整数型, "", "lstrcpy", 公开, _复制文本
    .参数 目的指针, 文本型, 传址, 
    .参数 源指针, 字节集, 传址, 

.DLL命令 GetCommandLine, 文本型, "", "GetCommandLineA", 公开, 

.DLL命令 HeapAlloc, 整数型, "", "HeapAlloc", 公开, 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GetProcessHeap, 整数型, "", "GetProcessHeap", 公开, 

.DLL命令 HeapFree, 逻辑型, "", "HeapFree", 公开, 
    .参数 hHeap, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMem, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", 公开, 读内存指针整型内容
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "", "GetCurrentProcess", 公开, API_取当前进程句柄

.DLL命令 MoveMemory, 整数型, "", "RtlMoveMemory", 公开, API_复制内存
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 StrToInt64Ex, 整数型, "shlwapi.dll", "StrToInt64ExA", 公开, 进制文本转整数_64-bit integer
    .参数 pszString, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 piRet, 整数型, 传址, 

.DLL命令 GetComputerName, 整数型, "kernel32.dll", "GetComputerNameA", 公开, 取计算机名_TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 GetUserName, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 MessageBox, 整数型, "user32.dll", "MessageBoxA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 lpText, 文本型, , 
    .参数 lpCaption, 文本型, , 
    .参数 wType, 整数型, , 

.DLL命令 ShellExecuteA, 空白型, "", "ShellExecuteA", 公开, 
    .参数 窗口句柄, 整数型, , 父窗口句柄,可为0
    .参数 操作方式, 文本型, , "open" 或者 "print"
    .参数 链接地址, 文本型, , "Http://www.163.com"，"mailto:sst95@21cn.com",文件合路径
    .参数 命令行参数, 文本型, , 
    .参数 完整路径, 文本型, , 
    .参数 窗口显示方式, 整数型, , 

.DLL命令 GetCursorPos, 整数型, "user32", "GetCursorPos", 公开, 取鼠标位置_
    .参数 位置, POINTAPI, , 

.DLL命令 GetOpenFileName, 整数型, "comdlg32.dll", "GetOpenFileNameA", 公开, 打开多文件对话框
    .参数 OpenFile, 未知类型0x4101020E, , 

.DLL命令 GetSaveFileName, 整数型, "comdlg32.dll", "GetSaveFileNameA", 公开, 打开保存对话框
    .参数 OpenFile, 未知类型0x4101020E, , 

.DLL命令 LoadImage, 整数型, "user32.dll", "LoadImageA", 公开, 载入一个位图、图标或指针
    .参数 实例句柄, 整数型, , hInst,要从其中载入图象的DLL或应用程序模块或实例句柄
    .参数 图象标志符, 文本型, , lpsz,欲载入图象的名字
    .参数 图象类型, 整数型, , un1,指定了欲载入的图象类型
    .参数 图象宽度, 整数型, , n1,要求的图象宽度
    .参数 图象高度, 整数型, , n2,要求的图象高度
    .参数 常数组合, 整数型, , un2,常数的任意组合

.DLL命令 GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", 公开, 获取一个应用程序或动态链接库的模块句柄　如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 整数型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;  

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", 公开, 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 CreateFont, 整数型, "gdi32", "CreateFontA", 公开, 用指定的属性创建一种逻辑字体　执行成功则返回逻辑字体的句柄，零表示失败。会设置GetLastError
    .参数 nHeight, 整数型, , IfHeight
    .参数 nWidth, 整数型, , IfWidth
    .参数 nEscapement, 整数型, , IfEscapement
    .参数 nOrientation, 整数型, , IfOrientation
    .参数 fnWeight, 整数型, , IfWeight
    .参数 fdwItalic, 整数型, , IfItalic
    .参数 fdwUnderline, 整数型, , IfUnderline
    .参数 fdwStrikeOut, 整数型, , IfStrikeOut
    .参数 fdwCharSet, 整数型, , IfCharSet
    .参数 OutputPrecision, 整数型, , IfOutputPrecision
    .参数 ClipPrecision, 整数型, , IfClipPrecision
    .参数 Quality, 整数型, , IfQuality
    .参数 PitchAndFamily, 整数型, , IfPitchAndFamily
    .参数 lpszFace, 文本型, , IfFaceName;  

.DLL命令 DeleteObject, 整数型, "gdi32", "DeleteObject", 公开, 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放　非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 一个GDI对象的句柄;  

.DLL命令 FillMemory, 空白型, "kernel32.dll", "RtlFillMemory", 公开, 填充内存_
    .参数 目的内存, 整数型, , Destination
    .参数 长度, 整数型, , Length
    .参数 填充内容, 整数型, , Fill

.DLL命令 lstrlen, 整数型, "kernel32.dll", "lstrlenA", 公开, 取文本内容长度_
    .参数 文本, 文本型, , Ptr

.DLL命令 StrTrim, 整数型, "shlwapi.dll", "StrTrimA", 公开, 替换首尾文本
    .参数 psz, 文本型, , 
    .参数 pszTrimChars, 文本型, , 

.DLL命令 CharLower, 文本型, "", "CharLowerA", 公开, 到小写_
    .参数 str, 文本型, , 

.DLL命令 CharUpper, 文本型, "", "CharUpperA", 公开, 到大写_
    .参数 str, 文本型, , 

.DLL命令 GetCurrentDirectory, 整数型, "", "GetCurrentDirectoryA", 公开, 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 GetLastError, 整数型, "", "GetLastError", 公开, 取系统最后错误代码

.DLL命令 GetWindowRect, 空白型, "", "GetWindowRect", 公开, 取窗口非客户区范围_
    .参数 hwnd, 整数型, , 
    .参数 rect, RECT, , 

.DLL命令 GetDesktopWindow, 整数型, "", "GetDesktopWindow", 公开, 

.DLL命令 RegCloseKey, 整数型, "", "RegCloseKey", 公开, 关闭注册项
    .参数 hkey, 整数型, , 

.DLL命令 RegQueryValueExA, 整数型, "", "RegQueryValueExA", 公开, 取注册表项
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 
    .参数 lpReserved, 整数型, , 
    .参数 lpType, 整数型, 传址, 
    .参数 lpData, 文本型, 传址, 
    .参数 lpcbData, 整数型, 传址, 

.DLL命令 RegOpenKeyExA, 整数型, "", "RegOpenKeyExA", 公开, 打开注册表项
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 
    .参数 ulOptions, 整数型, , 
    .参数 samDesired, 整数型, , 
    .参数 phkResult, 整数型, 传址, 

.DLL命令 RegSetValueExA, 整数型, "", "RegSetValueExA", 公开, 写注册表项
    .参数 hKey, 整数型, , 
    .参数 lpValueName, 文本型, , 
    .参数 Reserved, 整数型, , 
    .参数 dwType, 整数型, , 
    .参数 lpData, 文本型, 传址, 
    .参数 cbData, 整数型, , 

.DLL命令 RegDeleteKeyA, 整数型, "", "RegDeleteKeyA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 lpSubKey, 文本型, , 

.DLL命令 RegDeleteValueA, 整数型, "", "RegDeleteValueA", 公开, 
    .参数 hKey, 整数型, , 
    .参数 lpValueKey, 文本型, , 

.DLL命令 RegCreateKeyA, 整数型, "", "RegCreateKeyA", 公开, 
    .参数 hKey, 整数型, , 一个打开项的句柄，或者一个标准项名
    .参数 lpSubKey, 文本型, , 欲创建的新子项的名字
    .参数 phkResult, 整数型, 传址, 

.DLL命令 Sleep, 整数型, "kernel32.dll", "Sleep", 公开, 
    .参数 延时时间, 整数型, , 毫秒

.DLL命令 GetInputState, 整数型, "user32", "GetInputState", 公开, 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", 公开, 根据加载DLL模块返回的句柄，取模块内部函数的指针地址
    .参数 hModule, 整数型, , 为HMODULE结构，是所调用DLL模块的句柄
    .参数 lpProcName, 文本型, , 为LPCSTR结构，是函数名称

.DLL命令 LoadLibrary, 整数型, "", "LoadLibraryA", 公开, 加载一个DLL，返回模块句柄
    .参数 name, 文本型, , 

.DLL命令 FreeLibrary, 整数型, "", "FreeLibrary", 公开, 释放一个DLL
    .参数 hddl, 整数型, , 

.DLL命令 WriteProcessMemory_Bin, 整数型, "kernel32", "WriteProcessMemory", 公开, 在指定进程中写内存
    .参数 hProcess, 整数型, , 使用函数 OpenProcess() 返回。
    .参数 起始写入地址, 整数型, , 
    .参数 要写入的内容, 字节集, , 本参数的类型也能是“字节”型。
    .参数 写入长度, 整数型, , 写入的数据长度。
    .参数 实际写入长度, 整数型, , 实际写入的数据长度，为0则忽略。

.DLL命令 WaitForSingleObject, 整数型, "kernel32", "WaitForSingleObject", 公开, 监测一个对象
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 CloseHandle, 整数型, "kernel32.dll", "CloseHandle", 公开, 
    .参数 对象句柄, 整数型, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "kernel32.dll", "CreateToolhelp32Snapshot", 公开, 创建系统快照TH32CS_INHERIT=2147483648  TH32CS_SNAPALL=位或(1,2,4,8)
    .参数 快照标志, 整数型, , 进程＝15，线程=4，DLL＝8，堆=1
    .参数 参数, 整数型, , TH32CS_SNAPHEAPLIST=1 TH32CS_SNAPPROCESS=2 TH32CS_SNAPTHREAD=4 TH32CS_SNAPMODULE=8

.DLL命令 Process32Next, 逻辑型, "kernel32.dll", "Process32Next", 公开, 下个进程结构
    .参数 快照句柄, 整数型, , 
    .参数 进程结构, 进程结构, 传址, 

.DLL命令 Process32First, 逻辑型, "kernel32.dll", "Process32First", 公开, 取进程快照第一个进程信息返回内存指针
    .参数 快照句柄, 整数型, , 
    .参数 进程结构, 进程结构, 传址, 

.DLL命令 OpenProcess, 整数型, "kernel32", "OpenProcess", 公开, 将句柄返回给过程对象
    .参数 操作方式, 整数型, , 操作方式，PROCESS_CREATE_THREAD（允许远程创建线程）；PROCESS_VM_OPERATION （允许远程VM操作）；PROCESS_VM_WRITE（允许远程VM写）；2035711 完全访问。
    .参数 bInheritHandle, 整数型, , 
    .参数 进程ID, 整数型, , 使用一个变量装载进程ID。

.DLL命令 PostThreadMessageA, 整数型, "user32.dll", "PostThreadMessageA", 公开, 发送线程消息_
    .参数 线程ID, 整数型, , 
    .参数 消息标识, 整数型, , 
    .参数 消息1, 整数型, , 
    .参数 消息2, 整数型, , 

.DLL命令 打开进程, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 进程对象, 整数型, , 
    .参数 继承句柄, 逻辑型, , 
    .参数 进程标识符, 整数型, , 

.DLL命令 创建虚拟内存页, 整数型, "kernel32.dll", "VirtualAllocEx", , 
    .参数 进程句柄, 整数型, , 
    .参数 首地址, 整数型, , 
    .参数 大小, 整数型, , 
    .参数 分配类型, 整数型, , 
    .参数 保护类型, 整数型, , 

.DLL命令 写远程内存, 逻辑型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 句柄, 整数型, , 
    .参数 基地址, 整数型, , 
    .参数 缓存, 字节集, , 
    .参数 子程序指针, 整数型, , 
    .参数 大小, 整数型, , 

.DLL命令 读远程内存, 逻辑型, "kernel32.dll", "ReadProcessMemory", , 
    .参数 句柄, 整数型, , 
    .参数 起始地址, 整数型, , 
    .参数 读入地址, 整数型, , 
    .参数 读入大小, 整数型, , 
    .参数 实际大小, 整数型, , 

.DLL命令 获取模块句柄, 整数型, "kernel32.dll", "GetModuleHandleA", , 
    .参数 模块名, 文本型, , 

.DLL命令 获取进程地址, 整数型, "kernel32.dll", "GetProcAddress", , 
    .参数 模块句柄, 整数型, , 
    .参数 函数名, 文本型, , 

.DLL命令 创建远程线程, 整数型, "kernel32.dll", "CreateRemoteThread", , 
    .参数 进程句柄, 整数型, , 
    .参数 安全属性, 整数型, , 
    .参数 堆栈大小, 整数型, , 
    .参数 函数地址, 整数型, , 
    .参数 函数参数, 整数型, , 
    .参数 运行方式, 整数型, , 
    .参数 线程标识, 整数型, 传址, 

.DLL命令 等待远程线程结束, 整数型, "kernel32.dll", "WaitForSingleObject", , 
    .参数 线程, 整数型, , 
    .参数 参数1, 整数型, , 

.DLL命令 释放虚拟内存, 空白型, "kernel32.dll", "VirtualFreeEx", , 
    .参数 句柄, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 

.DLL命令 取返回句柄, 整数型, "kernel32.dll", "GetExitCodeThread", , 
    .参数 线程句柄, 整数型, , 
    .参数 句柄, 整数型, 传址, 

.DLL命令 关闭句柄, 整数型, "kernel32.dll", "CloseHandle", , 
    .参数 句柄, 整数型, , 

.DLL命令 装载动态链接库, 整数型, "kernel32.dll", "LoadLibraryA", , 
    .参数 动态链接库名称, 文本型, , 

.DLL命令 释放连接库, 整数型, "kernel32.dll", "FreeLibrary", , 
    .参数 句柄, 整数型, , 

.DLL命令 取最后错误, 文本型, "kernel32.dll", "GetLastError", , 

.DLL命令 拷贝内存, 空白型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目的, 整数型, , 
    .参数 源, 整数型, , 
    .参数 大小, 整数型, , 

.DLL命令 分配文本内存, 整数型, "activeds.dll", "AllocADsStr", , 
    .参数 文本, 文本型, , 

.DLL命令 分配内存, 整数型, "activeds.dll", "AllocADsMem", , AllocADsMem
    .参数 分配内存大小, 整数型, , cb

.DLL命令 FindWindow_, 整数型, "user32", "FindWindowA", , 寻找窗口列表中第一个符合指定条件的顶级窗口（在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）　找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError
    .参数 窗口类名, 文本型, , 指向包含了窗口类名的空中止（C语言）字串的指针；或设为零，表示接收任何类
    .参数 窗口文本, 文本型, , 指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为零，表示接收任何窗口标题  示例Dim hw&, cnt&Dim rttitle As  * 256hw& = FindWindow("ThunderRT5Main", vbNullString) ' ThunderRTMain under VB4cnt = GetWindowText(hw&, rttitle, 255)MsgBox Left, 0, "RTMain title";

.DLL命令 取进程线程标识符, 整数型, "user32.dll", "GetWindowThreadProcessId", , 
    .参数 窗口句柄, 整数型, , 
    .参数 进程标识符, 整数型, 传址, 一定要传地址

.DLL命令 创建进程_, 逻辑型, "kernel32", "CreateProcessA", , 
    .参数 lpApplicationName, 整数型, , 执行程序文件名
    .参数 lpCommandLinew, 文本型, , 参数行
    .参数 lpProcessAttributes, 整数型, , 进程安全参数
    .参数 lpThreadAttributes, 整数型, , 线程安全参数
    .参数 bInheritHandles, 整数型, , 继承标记
    .参数 dwCreationFlags, 整数型, , 创建标记
    .参数 lpEnvironment, 整数型, , 环境变量
    .参数 lpCurrentDirectory, 整数型, , 运行该子进程的初始目录
    .参数 lpStartupInfo, 启动信息数据, , 创建该子进程的相关参数
    .参数 lpProcessInformation, 进程返回数据, , 创建后用于被创建子进程的信息  

.DLL命令 获取启动信息, 整数型, "kernel32", "GetStartupInfoA", , 
    .参数 启动信息, 启动信息数据, 传址, 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
开始注入 ()
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 开始注入, 空白型, , 
.局部变量 进程信息数组, 进程结构, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 pid, 整数型, , , 
.局部变量 DLL路径, 文本型, , , 
.局部变量 函数名, 文本型, , , 
.局部变量 临时字节, 字节集, , , 
.局部变量 进程标识, 整数型, , , 
.局部变量 线程标识, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 
.局部变量 模块句柄, 整数型, , , 
.局部变量 函数地址, 整数型, , "2", 
.局部变量 内存地址, 整数型, , "6", 
.局部变量 线程句柄, 整数型, , , 
.局部变量 参数, 函数参数, , , 
.局部变量 参数字节集, 字节集, , , 
.局部变量 窗口句柄, 整数型, , , 
.局部变量 启动信息数据, 启动信息数据, , , 
.局部变量 进程返回数据, 进程返回数据, , , 
.局部变量 创建进程返回, 逻辑型, , , 

赋值 (窗口句柄, FindWindow_ (“Shell_TrayWnd”, “”))
赋值 (线程标识, 取进程线程标识符 (窗口句柄, pid))
.如果真 (等于 (线程标识, 0))
    结束 ()
.如果真结束
 ' pid ＝ 进程返回数据.dwProcessId
.如果真 (等于 (pid, 0))
    结束 ()
.如果真结束
赋值 (DLL路径, 相加 (环境_取运行目录 (), “test.dll”))
赋值 (函数名, “rserver”)
.如果 (提升权限 ()) ' 设置当前进程最高权限
    赋值 (进程句柄, 打开进程 (2035711, 假, pid))
    .如果真 (等于 (进程句柄, 0))
        结束 ()
    .如果真结束
    赋值 (模块句柄, GetModuleHandle (文本_取指针 (“kernel32.dll”))) ' 获取系统API模块句柄
    赋值 (函数地址 [1], GetProcAddress (模块句柄, “LoadLibraryA”)) ' 获取加载模块的函数地址
    赋值 (函数地址 [2], GetProcAddress (模块句柄, “GetProcAddress”)) ' 获取取函数地址的函数地址
    .如果真 (或者 (等于 (函数地址 [1], 0), 等于 (函数地址 [2], 0)))
        返回 ()
    .如果真结束
    
    赋值 (内存地址 [1], 创建虚拟内存页 (进程句柄, 0, 12, 4096, 64)) ' 分配远程内存，存放API函数地址
    写远程内存 (进程句柄, 内存地址 [1], 整数_到字节集 (函数地址 [1]), 4, 0) ' 存入API函数地址
    
    赋值 (内存地址 [2], 相加 (内存地址 [1], 4))
    写远程内存 (进程句柄, 内存地址 [2], 整数_到字节集 (函数地址 [2]), 4, 0) ' 存入API函数地址
    
    
    赋值 (临时字节, 相加 (文本_到字节集 (DLL路径), { 0, 0, 0 })) ' DLL文件路径
    
    赋值 (内存地址 [3], 创建虚拟内存页 (进程句柄, 0, 字节集_取长度 (临时字节), 4096, 64)) ' 分配远程内存，存放DLL路径
    写远程内存 (进程句柄, 内存地址 [3], 临时字节, 字节集_取长度 (临时字节), 0) ' 存入DLL路径
    
    赋值 (临时字节, 相加 (文本_到字节集 (函数名), { 0, 0, 0 })) ' 调用dll中的函数名
    赋值 (内存地址 [4], 创建虚拟内存页 (进程句柄, 0, 字节集_取长度 (临时字节), 4096, 64)) ' 分配远程内存，存放dll中的函数名
    写远程内存 (进程句柄, 内存地址 [4], 临时字节, 字节集_取长度 (临时字节), 0) ' 存入DLL函数名
    
    赋值 (参数.参数1, pid)
    赋值 (参数.参数2, 相加 (环境_取运行目录 (), “,2008”))
    赋值 (参数字节集, 相加 (文本_到字节集 (参数.参数2), { 0, 0, 0 })) ' 转换成字节集
    赋值 (内存地址 [6], 创建虚拟内存页 (进程句柄, 0, 字节集_取长度 (参数字节集), 4096, 64)) ' 分配内存
    写远程内存 (进程句柄, 内存地址 [6], 参数字节集, 字节集_取长度 (参数字节集), 0) ' 写入内存
    
     ' 下面的一个 临时字节集说明
     ' push [dll路径地址]            说明:把路径进栈以便API函数加载此DLL 。对应字节集:{104} ＋ 内存地址 [3]
     ' call [加载模块的函数地址]     说明:调用API加载模块的函数加载DLL。对应字节集:{255, 21} ＋ 内存地址 [1]
     ' push [DLL函数名地址]          说明:把函数名进栈以便API函数计算此函数在DLL中的地址。对应字节集:{104} ＋ 内存地址 [4]
     ' push eax                      说明:把计算得到DLL句柄进栈以便后面取函数地址。对应字节集:{80, 255, 21}中的{80}
     ' call [API取函数函数地址]      说明:调用API取函数地址。对应字节集:{80, 255, 21}中的{255, 21}
     ' push [参数2地址]              说明:把DLL参数1进栈。对应字节集:{104}+内存地址 [7] 注意:如果参数为一般数值类的话直接进栈数值
     ' push [参数1地址]              说明:把DLL参数2进栈。对应字节集:{104}+内存地址 [6]
     ' call eax                      说明：调用DLL函数。。对应字节集:{255, 208, 195}中的{255, 208}
     ' ret                           说明：返回 子程序返回。对应字节集:{255, 208, 195}中的{195}
    赋值 (临时字节, 相加 ({ 104 }, 整数_到字节集 (内存地址 [3]), { 255, 21 }, 整数_到字节集 (内存地址 [1]), { 104 }, 整数_到字节集 (内存地址 [4]), { 80, 255, 21 }, 整数_到字节集 (内存地址 [2]), { 104 }, 整数_到字节集 (内存地址 [6]), { 104 }, 整数_到字节集 (参数.参数1), { 255, 208, 195 }))
    赋值 (内存地址 [5], 创建虚拟内存页 (进程句柄, 0, 字节集_取长度 (临时字节), 4096, 64)) ' 分配远程内存，存放汇编代码
    写远程内存 (进程句柄, 内存地址 [5], 临时字节, 字节集_取长度 (临时字节), 0) ' 存入汇编代码
    
     ' 输出调试文本 (取十六进制文本 (临时字节))
    赋值 (线程句柄, 创建远程线程 (进程句柄, 0, 0, 内存地址 [5], 0, 0, 0)) ' 调用DLL函数
    .如果真 (等于 (线程句柄, 0))
        返回 ()
    .如果真结束
    等待远程线程结束 (线程句柄, -1)
    释放虚拟内存 (进程句柄, 内存地址 [1], 0, 32768)
    释放虚拟内存 (进程句柄, 内存地址 [2], 0, 32768)
    释放虚拟内存 (进程句柄, 内存地址 [3], 0, 32768)
    释放虚拟内存 (进程句柄, 内存地址 [4], 0, 32768)
    释放虚拟内存 (进程句柄, 内存地址 [5], 0, 32768)
    关闭句柄 (线程句柄)
    关闭句柄 (进程句柄)
.否则
    
.如果结束


.子程序 提升权限, 逻辑型, , 
.参数 权限类别, 文本型, 可空, 默认为 #调试 “SeDebugPrivilege”

.局部变量 Token, 整数型, , , 
.局部变量 tkp, TOKEN_PRIVILEGES, , , 
.局部变量 tkpNewButIgnored, TOKEN_PRIVILEGES, , , 
.局部变量 lpLuid, LuID, , , 

.如果真 (等于 (权限类别, “”))
    赋值 (权限类别, “SeDebugPrivilege”)
.如果真结束
OpenProcessToken (GetCurrentProcess (), 40, Token)
LookupPrivilegeValueA (“”, 权限类别, lpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, lpLuid.lowpart)
赋值 (tkp.highpart, lpLuid.highpart)
赋值 (tkp.Attributes, 2)
AdjustTokenPrivileges (Token, 0, tkp, 16, tkpNewButIgnored, 16)
.如果 (不等于 (tkpNewButIgnored.PrivilegeCount, 1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 枚举进程, 整数型, , 失败返回0，成功返回进程数量
.参数 进程信息, 进程结构, 参考 可空 数组, 进程信息 数组

.局部变量 信息, 进程结构, , , 
.局部变量 进程快照, 整数型, , , 
.局部变量 进程句柄, 逻辑型, , , 

赋值 (进程快照, CreateToolhelp32Snapshot (15, 0))
.如果真 (等于 (进程快照, 0))
    返回 (0)
.如果真结束
赋值 (信息.结构长度, 1024)
赋值 (进程句柄, Process32First (进程快照, 信息))
.判断循环首 (不等于 (进程句柄, 假))
    加入成员 (进程信息, 信息)
    赋值 (进程句柄, Process32Next (进程快照, 信息))
.判断循环尾 ()
返回 (取数组成员数 (进程信息))

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 环境_取执行文件名, 文本型, , 


.子程序 环境_取运行目录, 文本型, , 


.子程序 环境_取命令行, 文本型, , 包含了执行文件的全路径名


.子程序 字节集_取空白, 字节集, , 
.参数 长度, 整数型, , 



.子程序 字节集_取长度, 整数型, , 
.参数 字节集参数, 字节集, , 



.子程序 字节集_取左边, 字节集, , 返回一个字节集，其中包含指定字节集中从左边算起指定数量的字节
.参数 欲取其部分的字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_取右边, 字节集, , 返回一个字节集，其中包含指定字节集中从右边算起指定数量的字节
.参数 欲取其部分的字节集, 字节集, , 
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_取中间, 字节集, , 返回一个字节集，其中包含指定字节集中从指定位置算起指定数量的字节
.参数 欲取其部分的字节集, 字节集, , 
.参数 起始取出位置, 整数型, , 1为首位置，2为第2个位置，如此类推。
.参数 欲取出字节的数目, 整数型, , 



.子程序 字节集_到十进制文本显示, 文本型, , 将字节集中每一位字节按十进制文本以“,”分隔方式显示，便于查看字节集内容
.参数 欲文本显示的字节集, 字节集, , 



.子程序 字节集_到文本, 文本型, , 从字节集数据中返回一个以字节0结束的文本,
.参数 要转换的字节集, 字节集, , 



.子程序 字节集_寻找, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 



.子程序 字节集_分割, 整数型, , 返回实际的数组成员数
.参数 待分割字节集, 字节集, , 如果参数值是一个长度为零的字节集，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的字节集, 字节集, 可空, 可以被省略。用于标识子字节集边界。本参数如果被省略，则默认使用字节 0 作为分隔符。
.参数 要返回的子字节集数目, 整数型, 可空, 可以被省略。如果被省略或小于等于0，则默认返回所有的子字节集。
.参数 返回的字节集数组, 字节集, 参考 数组, 将指定字节集进行分割，分割后的一维字节集数组以参考方式传递



.子程序 字节集_子替换, 字节集, , 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的
.参数 欲被替换的字节集, 字节集, , 
.参数 欲被替换的子字节集, 字节集, , 
.参数 用作替换的子字节集, 字节集, 可空, 可以被省略。如果省略本参数，则默认为空字节集
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 替换进行的次数, 整数型, 可空, 可以被省略。对子字节集进行替换的次数。如果省略，默认进行所有可能的替换。



.子程序 字节集_取指针, 整数型, , 
.参数 欲取指针的字节集, 字节集, , 



.子程序 数值_求次方, 双精度小数型, , 
.参数 欲求次方数值, 双精度小数型, , 
.参数 次方数, 整数型, , 



.子程序 数值_十进制文本到整数, 整数型, , 文本到整数
.参数 文本, 文本型, , 



.子程序 数值_十六进制文本到整数, 长整数型, , 64Bit位整数
.参数 十六进制文本, 文本型, , 前面不能为十六进制标志"0x"



.子程序 数值_求余, 整数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 



.子程序 数值_整除, 整数型, , 
.参数 被除数, 双精度小数型, , 
.参数 除数, 双精度小数型, , 



.子程序 数值_取低字, 整数型, , LOWORD
.参数 参数, 整数型, , 



.子程序 数值_取高字, 整数型, , HIWORD
.参数 参数, 整数型, , 



.子程序 字节数组_到文本, 文本型, , 将一个字节数组转换为文本
.参数 参数, 字节型, 数组, 



.子程序 字节_取指针, 整数型, , 
.参数 欲取指针的字节, 字节型, 参考, 



.子程序 整型_取指针, 整数型, , 
.参数 欲取指针的整数, 整数型, 参考, 



.子程序 系统_取计算机名, 文本型, , 


.子程序 系统_取用户名, 文本型, , 


.子程序 系统_信息框, 整数型, , 
.参数 信息框内容, 文本型, , 
.参数 信息框样式, 整数型, 可空, 
.参数 信息框标题, 文本型, 可空, 



.子程序 系统_执行, 空白型, ,  查找与指定文件关联在一起的程序的文件名
.参数 父窗口句柄, 整数型, 可空, 
.参数 打开方式, 整数型, 可空, 为下常量值　1:#编辑文档,2:#浏览文件夹,3:#寻找文件,4:#打开文件,可以运行可执行程序,5:#打印文档，默认为4
.参数 要执行的文件或链接, 文本型, , 
.参数 命令行参数, 文本型, 可空, 当参数1为可执行文件时,这里可以填命令行参数
.参数 文件全路径, 文本型, 可空, 
.参数 窗口显示方式, 整数型, 可空, 0为隐藏,1普通激活



.子程序 系统_取鼠标X位置, 整数型, , 


.子程序 系统_取鼠标Y位置, 整数型, , 


.子程序 系统_取启动时间, 整数型, , 


.子程序 系统_多文件对话框, 文本型, , 如果为打开文件对话框，多选文件时，返回文件路径以“;”(半角分号)分隔。失败或取消返回空文本。
.参数 窗口句柄, 整数型, 可空, 调用处窗口句柄
.参数 窗口标题, 文本型, 可空, 对话框窗口标题
.参数 过滤器, 文本型, 可空, 格式：“MP3文件(*.mp3)|*.mp3|媒体文件(*.mpg)|*.mpg”
.参数 初始路径, 文本型, 可空, 如果本参数被省略，默认从“我的文档”开始。否则，请给出盘符，如“d:”
.参数 窗口风格, 整数型, 可空, 如果本参数被省略，默认为 0 。位置值从 0 开始。从0－11之间，可以设置多种窗口风格。0.工具栏、只读选择框－未选中；1.工具栏、只读选择框－选中；2.工具栏；3.工具栏、只读选择框－未选中，帮助按钮；4.工具栏、只读选择框－选中，帮助按钮；5.工具栏，帮助按钮；6.普通风格、只读选择框－未选中；7.普通风格、只读选择框－选中；8.普通风格；9.普通风格、只读选择框－未选中，帮助按钮；10.普通风格、只读选择框－选中，帮助按钮；11.普通风格、帮助按钮。
.参数 对话框类型, 整数型, 可空, 如果本参数被省略，默认为0,0为打开文件，1为保存文件



.子程序 系统_取颜色值, 整数型, , RGB 替代核心库中的 取颜色值(r,g,b)命令
.参数 R, 字节型, , 
.参数 G, 字节型, , 
.参数 B, 字节型, , 



.子程序 系统_载入指定位图, 整数型, , 载入指定BMP图片文件,返回位图句柄
.参数 位图名称, 文本型, , 



.子程序 系统_设置字体, 空白型, , 给指定的窗口设置字体
.参数 参窗口句柄, 整数型, , 
.参数 参字体名, 文本型, , 
.参数 参字号大小, 整数型, 可空, 



.子程序 文本_取空白, 文本型, , 
.参数 长度, 整数型, , 



.子程序 文本_取长度, 整数型, , 取文本型数据的长度，不包含结束0
.参数 文本数据, 文本型, , 参数值指定欲检查其长度的文本数据



.子程序 文本_取左边, 文本型, , 返回一个文本，其中包含指定文本中从左边算起指定数量的字符
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_取右边, 文本型, , 返回一个文本，其中包含指定文本中从右边算起指定数量的字符
.参数 欲取其部分的文本, 文本型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_取中间, 文本型, , 返回一个文本，其中包含指定文本中从右边算起指定数量的字符
.参数 欲取其部分的文本, 文本型, , 返回一个文本，其中包含指定文本中从指定位置算起指定数量的字符
.参数 起始取出位置, 整数型, , 
.参数 欲取出字符的数目, 整数型, , 



.子程序 文本_寻找, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为 1
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分



.子程序 文本_子替换, 文本型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1
.参数 欲被替换的文本, 文本型, , 
.参数 欲被替换的子文本, 文本型, , 
.参数 用作替换的子文本, 文本型, 可空, 可以被省略。如果本参数被省略，默认为空文本
.参数 起始搜寻位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为 1
.参数 替换进行的次数, 整数型, 可空, 可以被省略。参数值指定对子文本进行替换的次数。如果省略，默认进行所有可能的替换
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分



.子程序 文本_分割, 整数型, , 返回实际的组数
.参数 待分割文本, 文本型, , 如果参数值是一个长度为零的文本，则返回一个空数组，即没有任何成员的数组
.参数 用作分割的文本, 文本型, 可空, 可以被省略。参数值用于标识子文本边界。如果被省略，则默认使用半角逗号字符作为分隔符。如果是一个长度为零的文本，则返回的数组仅包含一个成员，即完整的“待分割文本”
.参数 要返回的子文本数目, 整数型, 可空, 可以被省略。如果被省略，则默认返回所有的子文本
.参数 返回的文本数组, 文本型, 参考 数组, 将指定文本进行分割，分割后的一维字节集数组以参考方式传递



.子程序 文本_删首尾空, 文本型, , 
.参数 文本, 文本型, , 



.子程序 文本_到小写, 文本型, , 
.参数 欲转换文本, 文本型, , 



.子程序 文本_到大写, 文本型, , 
.参数 欲转换文本, 文本型, , 



.子程序 文本_到字节集, 字节集, , 
.参数 欲转换文本, 文本型, , 



.子程序 文本_取指针, 整数型, , 
.参数 欲取指针的文本, 文本型, , 



.子程序 磁盘_取当前目录, 文本型, , 


.子程序 系统_取屏幕宽度, 整数型, , 


.子程序 系统_取屏幕高度, 整数型, , 


.子程序 字节集_到整数, 整数型, , 
.参数 参数字节集, 字节集, , 



.子程序 字节集_到短整数, 整数型, , 
.参数 参数字节集, 字节集, , 



.子程序 字节集_倒找, 整数型, , 返回一字节集在另一字节集中最先出现的位置，位置值从 1 开始。如果未找到，返回 -1
.参数 被搜寻的字节集, 字节集, , 
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 



.子程序 文本_倒找, 整数型, , 返回一个整数值，指定一文本在另一文本中最先出现的位置，位置值从 1 开始。如果未找到，返回-1
.参数 被搜寻的文本, 文本型, , 
.参数 欲寻找的文本, 文本型, , 
.参数 起始搜寻位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为 1
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分



.子程序 系统_取现行时间, 文本型, , 


.子程序 字节集_替换, 字节集, , 返回一个字节集，该字节集中指定的子字节集已被替换成另一子字节集，并且替换发生的次数也是被指定的
.参数 欲被替换的字节集, 字节集, , 
.参数 进行替换的起始位置, 整数型, 可空, 可以被省略。被替换子字节集的起始搜索位置。如果省略，默认从1开始。
.参数 进行替换长度, 整数型, , 
.参数 用作替换的子字节集, 字节集, 可空, 如果本参数被省略，则删除字节集中的指定部分



.子程序 系统_取文本注册项, 文本型, , 在 Windows 注册表中返回指定的文本类型注册表项值。如欲读取注册项默认值，请在项目名后加“\”号，如“test\”
.参数 根目录, 整数型, 可空, 1、#根类； 2、#现行设置； 3、#现行用户； 4、#本地机器； 5、#所有用户,默认为3,#现行用户
.参数 全路径注册项名, 文本型, , 
.参数 默认文本, 文本型, 可空, 如果指定的注册表项不存在，将返回此默认文本。如果指定的注册表项不存在且本参数被省略，将返回一个长度为 0 的空文本。



.子程序 系统_写文本注册项, 逻辑型, , 
.参数 根目录, 整数型, 可空, 1、#根类； 2、#现行设置； 3、#现行用户； 4、#本地机器； 5、#所有用户,默认为3,#现行用户
.参数 全路径注册项名, 文本型, , 
.参数 欲写入文本, 文本型, 可空, 如果指定的注册表项不存在，将返回此默认文本。如果指定的注册表项不存在且本参数被省略，将返回一个长度为 0 的空文本。
.参数 类型, 整数型, 可空, 默认为1(REG_SZ 字符串),2(REG_EXPAND_SZ 可扩充字符串值),7(REG_MULTI_SZ 多字符串值)



.子程序 系统_取配置节名, 整数型, , 返回所有已有节名的文本的数目
.参数 配置文件名, 文本型, , 定配置文件的名称，通常以.ini作为文件名后缀
.参数 配置节名组, 文本型, 参考 数组, 收参考方式返回配置文件中所有已有节名的文本数组



.子程序 系统_读配置项, 文本型, , 读取指定配置文件中指定项目的文本内容
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, , 参数值指定欲读入配置项在其节中的名称。
.参数 默认文本, 文本型, 可空, 可以被省略。如果指定配置项不存在，将返回此默认文本。如果指定配置项不存在且本参数被省略，将返回空文本。



.子程序 系统_写配置项, 逻辑型, , 
.参数 配置文件名, 文本型, , 指定配置文件的名称，通常以.ini作为文件名后缀,如果没有指定完整路径名，则windows会在windows目录查找文件。如果文件没有找到，则函数会创建它
.参数 节名称, 文本型, , 包含欲读入配置项所处节的名称。
.参数 配置项名称, 文本型, 可空, 可以被省略。参数值指定欲写入配置项在其节中的名称。如果参数值被省略，则删除指定节及其下的所有配置项
.参数 欲写入值, 文本型, 可空, 可以被省略。参数值指定欲写入到指定配置项中的文本。如果参数值被省略，则删除所指定配置项



.子程序 系统_处理事件, 空白型, , 


.子程序 系统_延时, 空白型, , 
.参数 延时时间, 整数型, , 毫秒



.子程序 系统_取错误文本, 文本型, , 
.参数 错误码, 整数型, 可空, 为空是取最后错误文本,不为空是按错误码返错误文本



.子程序 文本_字符, 文本型, , 
.参数 字节, 字节型, , 



.子程序 系统_动态调用, 整数型, , 
.参数 函数地址, 整数型, , 
.参数 参数, 整数型, 参考 可空 数组, 为整数数组，参数1为成员1…类推；文本型和字节集型（自定义结构）为指针
.参数 call方式, 逻辑型, 可空, 真为cdecl调用方式，假为stdcall调用方式（即标准WINAPI方式）,默认为假



.子程序 整数_到文本, 文本型, , 
.参数 欲转换为文本的数值, 整数型, , 



.子程序 系统_申请内存, 整数型, , 成功返回内存指针，错误返为0,即空指针,释放由该函数申请的内存，必须用“系统_释放内存（）”来释放
.参数 内存大小, 整数型, , 



.子程序 系统_释放内存, 整数型, , 释放由"系统_释放内存（）"成功返回内存指针的的内存
.参数 内存指针, 整数型, , 该内存指针为“系统_申请内存（）”成功返回的指针



.子程序 系统_浏览文件夹, 文本型, , 成功返回文件夹名，失败返回空文本
.参数 父窗口句柄, 整数型, 可空, 
.参数 显示标题, 文本型, 可空, 
.参数 同时显示文件, 逻辑型, 可空, 值为假,只显示文件夹，默认为假,为真时同时显示文件和文件夹



.子程序 整数_到字节集, 字节集, , 
.参数 欲转换为字节集的整数, 整数型, , 



.子程序 系统_取操作系统类别, 整数型, , 0、未知； 1、Windows 32S； 2、Windows 9X (包含Win95、Win98、WinME等)； 3、Windows NT (包含WinNT、Win2000、WinXP等),错误返回-1,


.子程序 系统_颜色选择框, 整数型, , 返回颜色值
.参数 父窗口句柄, 整数型, , 



.子程序 系统_字体选择框, 整数型, , 
.参数 父窗口句柄, 整数型, , 
.参数 返回结果, 模块_字体信息, 参考, 接收返回的字体信息



.子程序 系统_子程序指针, 整数型, , 返回一个E子程序指针的指针
.参数 子程序指针, 子程序指针, , 



.子程序 环境_读环境变量, 文本型, , 返回文本，它关连于一个操作系统环境变量。成功时返回所取得的值，失败则返回空文本
.参数 环境变量名称, 文本型, , 



.子程序 环境_写环境变量, 逻辑型, , 返回文本，它关连于一个操作系统环境变量。成功时返回所取得的值，失败则返回空文本
.参数 环境变量名称, 文本型, , 
.参数 环境变量内容, 文本型, 可空, 默认为“”，如果为空，则为清除该环境变量




 ' 不属于任何一个程序集、类模块的函数：
