 ' 文件类型：Windows模块源码

 ' 程序名称：HTTP访问模块 路过已错过 第三次修正 完美终结版
 ' 程序描述：替代HTTP读文件()函数用。

----------------------------
首先声明!
因联系不到原作者[金眼睛],本次修改未经作者的同意,但本着出于免费开源,造福易友的目的,不妥的地方,还请作者海涵.

原本的调用方法,在数据读取期间,会造成CPU使用率100.
通过一些方法解决满负载后,窗口消息也无法得到响应,在多线程中也有冲突.
在此终结版中,解决了这3个问题.

让CPU使用率降低,也能让窗口响应消息.

修改:路过已错过
QQ:43581066
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 386
    高度 = 207
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “HTTP访问改造的进度文件下载”
    帮助文件名 = “”



.常量 INTERNET_OPEN_TYPE_DIRECT, "1", , 
.常量 INTERNET_OPEN_TYPE_PROXY, "3", , 
.常量 , , , 
.常量 INTERNET_SERVICE_HTTP, "3", , 
.常量 , , , 
.常量 WAIT_TIMEOUT, "258", , 超时
.常量 , , , 
.常量 CP_UTF8, "65001", , 
.常量 CP_UTF7, "65000", , 
.常量 CP_ACP, "0", , 
.常量 CP_MACCP, "2", , 
.常量 CP_OEMCP, "1", , 
.常量 CP_THREAD_ACP, "3", , 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库




数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 POINTAPI, , 公开
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置


.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "", , 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 PeekMessage, 整数型, "user32", "PeekMessageA", , 从线索消息队列中返回一条消息--等待延时　
    .参数 lpMsg, MSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 stat, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "", , 
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 文本型, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 GetExitCodeThread, 整数型, "kernel32", "GetExitCodeThread", , 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 API_MultiByteToWideChar, 整数型, "kernel32.dll", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 0
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , -1
    .参数 lpWideCharStr, 字节集, 传址, 
    .参数 cchWideChar, 整数型, , 

.DLL命令 HttpQueryInfoA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 文本型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 InternetSetCookieA, 逻辑型, "WinINet.dll", "", , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszCookieName, 文本型, , 
    .参数 lpszCookieData, 文本型, , 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", , 
    .参数 子程序指针, 子程序指针, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 CreateThread, 整数型, "", "", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 CloseHandle, 逻辑型, "", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 HttpQueryInfoA_, 整数型, "Wininet.dll", "HttpQueryInfoA", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 整数型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, 传址, 

.DLL命令 API_WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 0
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , -1
    .参数 lpMultiByteStr, 文本型, 传址, 
    .参数 cchMultiByte, 整数型, , 
    .参数 默认文本, 整数型, , 0
    .参数 使用默认文本, 整数型, , 0

.DLL命令 TerminateThread, 逻辑型, "", "", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 bWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.程序集 程序集1, , , 

.程序集变量 dwByteToRead, 整数型, , , 
.程序集变量 dwBytes, 整数型, , , 
.程序集变量 start, 整数型, , , 
.程序集变量 end, 整数型, , , 
.程序集变量 time, 整数型, , , 
.程序集变量 匿名程序集变量_737, 空白型, , , 
.程序集变量 保留参数, 整数型, , , 
.程序集变量 hThread, 整数型, , , 
.程序集变量 匿名程序集变量_797, 空白型, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 文件号, 整数型, , , 
.局部变量 FLV地址, 文本型, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

载入 (窗口1, , 假)
 ' FLV地址 ＝ 取视频下载地址 (“http://static.youku.com/v1.0.0360/v/swf/qplayer.swf?VideoIDS=XNTU1OTc4OTI=&embedid=-&showAd=0”)
 ' 输出调试文本 (FLV地址)
 ' 文件号 ＝ 打开文件 (取运行目录 () ＋ “\xia.flv”, #重写, )
 ' 写出字节集 (文件号, 访问网页 (FLV地址))
 ' 关闭文件 (文件号)

.子程序 取视频下载地址, 文本型, , 
.参数 待获取URL, 文本型, , 

.局部变量 FLV地址, 文本型, , , 
.局部变量 返回文本, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (待获取URL, 子文本替换 (待获取URL, “=”, “%3D”, , , 真))
赋值 (待获取URL, 子文本替换 (待获取URL, “&”, “%26”, , , 真))
赋值 (待获取URL, 子文本替换 (待获取URL, “:”, “%3A”, , , 真))
赋值 (待获取URL, 子文本替换 (待获取URL, “/”, “%2F”, , , 真))
赋值 (返回文本, Unicode转Ansi (Ansi转Unicode (到文本 (访问网页 (相加 (“http://www.flvxz.com/getFlv.php?url=”, 待获取URL)))), 936))
返回 (取文本中间_ (返回文本, 相加 (“href=”, #引号), 相加 (#引号, “ onclick”)))

.子程序 取文本中间_, 文本型, , 获取中间文本,返回中间文本数目.
.参数 待取中间内容, 文本型, , 
.参数 左特征, 文本型, , 左边特征文本
.参数 右特征, 文本型, , 右边特征文本

.局部变量 左特征长, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 返回文本, 文本型, , , 

赋值 (左特征长, 取文本长度 (左特征))
赋值 (a, 寻找文本 (待取中间内容, 左特征, 相加 (a, 1), 真))
输出调试文本 (a)
.如果 (大于 (a, 0))
    赋值 (b, 寻找文本 (待取中间内容, 右特征, a, 真))
    输出调试文本 (b)
    .如果真 (等于 (b, -1))
        赋值 (b, 取文本长度 (待取中间内容))
    .如果真结束
    赋值 (返回文本, 取文本中间 (待取中间内容, 相加 (a, 左特征长), 相减 (b, a, 左特征长)))
.否则
    返回 (“”)
.如果结束
返回 (返回文本)

.子程序 Ansi转Unicode, 字节集, , 
.参数 Ansi, 文本型, , 
.参数 原始编码, 整数型, 可空, 

.局部变量 Unicode, 字节集, , , 
.局部变量 长度, 整数型, , , 

.如果真 (是否为空 (原始编码))
    赋值 (原始编码, #CP_UTF8)
.如果真结束
赋值 (长度, API_MultiByteToWideChar (0, 0, Ansi, -1, {  }, 0))
赋值 (Unicode, 取空白字节集 (相乘 (长度, 2)))
API_MultiByteToWideChar (原始编码, 0, Ansi, -1, Unicode, 长度)
返回 (Unicode)

.子程序 Unicode转Ansi, 文本型, , 
.参数 Unicode, 字节集, , 
.参数 目标编码, 整数型, 可空, 

.局部变量 Ansi, 文本型, , , 
.局部变量 长度, 整数型, , , 

.如果真 (是否为空 (目标编码))
    赋值 (目标编码, 0)
.如果真结束
赋值 (长度, API_WideCharToMultiByte (0, 0, Unicode, -1, “”, 0, 0, 0))
赋值 (Ansi, 取空白文本 (相乘 (长度, 2)))
API_WideCharToMultiByte (目标编码, 0, Unicode, -1, Ansi, 相乘 (长度, 2), 0, 0)
返回 (Ansi)

.子程序 访问网页, 字节集, , 
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 单位秒，默认90
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 
.局部变量 lpBody, 字节集, , , 

赋值 (完整网址, 全文本替换 (完整网址, “\”, “/”))
赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, “MissWho”, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息)
未知函数_244 () ' *** 缩略程序块 ***
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
.如果真 (或者 (是否为空 (超时值), 等于 (超时值, 0)))
    赋值 (超时值, 90)
.如果真结束
赋值 (hThread, CreateThread (0, 0, &ReadFile, hMemFile, 0, 0))
.循环判断首 ()
    赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
    处理事件 ()
.循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258)))
TerminateThread (hThread, 0)
CloseHandle (hThread)
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag, szRequest, lpBody)
关闭文件 (hMemFile)
.如果真 (或者 (不等于 (szFlag, “MissWho_OK”), 等于 (ret, 258)))
    赋值 (lpBody, {  })
.如果真结束
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束
 ' 连续赋值 (字符 (0), szFullAddr, szVerb, szProxyServer, szHeaders, szSendBody, szRequest)
返回 (lpBody)

.子程序 ReadFile, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 匿名局部变量_452, 空白型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 

.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag)
.如果真 (不等于 (szFlag, “MissWho”))
    返回 (假)
.如果真结束
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody)
移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 (假)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取文本长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取文本长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.判断结束

 ' 读取页面数据
赋值 (hMemBody, 打开内存文件 ())
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (512))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
.循环判断尾 (不等于 (dwNumber, 0))

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)

移到文件首 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, “MissWho_OK”, szRequest, 读入字节集 (hMemBody, 取文件长度 (hMemBody)))
关闭文件 (hMemBody)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)

 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
.如果真结束
返回 (真)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber, 选择 (等于 (寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 取文本中间 (szServerName, dwNumber, 选择 (等于 (寻找文本 (szServerName, “/”, dwNumber, 假), -1), 取文本长度 (szServerName), 相减 (寻找文本 (szServerName, “/”, dwNumber, 假), dwNumber)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber, -1))
        赋值 (szServerName, 取文本左边 (szServerName, 相减 (dwNumber, 1)))
    .如果真结束
    
.如果真结束
返回 (到小写 (szServerName))

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber, 选择 (等于 (dwNumber, -1), 80, 到数值 (取文本右边 (szServerName, 相减 (取文本长度 (szServerName), dwNumber)))))
返回 (dwNumber)

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 进度下载文件, 空白型, , 
.参数 完整网址, 文本型, , 
.参数 写出文件路径, 文本型, , 
.参数 进度显示, 子程序指针, , 回调函数，参数一为目前总字节数；参数二为下载字节数；参数三为现行下载时间
.参数 接收文件大小, 整数型, 可空, 默认为10240字节
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 ret, 整数型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 

.如果真 (是否为空 (接收文件大小))
    赋值 (接收文件大小, 10240)
.如果真结束
赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息, 写出文件路径, 接收文件大小)
未知函数_244 () ' *** 缩略程序块 ***
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
赋值 (hThread, CreateThread (0, 0, &下载文件ReadFile, hMemFile, 0, 0))

.循环判断首 ()
     ' ret ＝ MsgWaitForMultipleObjects (1, hThread, 假, 超时值 × 1000, 1215)
     ' 输出调试文本 (超时值)
    CallWindowProcA (进度显示, dwByteToRead, dwBytes, time, 保留参数) ' 回调下载进度
    等待延时 (10)
.循环判断尾 (等于 (取线程返回值_ (hThread), 259)) ' 线程未结束
CallWindowProcA (进度显示, dwByteToRead, dwBytes, time, 保留参数) ' 回调下载进度
TerminateThread (hThread, 0)
CloseHandle (hThread)

移到文件首 (hMemFile)
读入数据 (hMemFile, szRequest) ' lpBody为下载的字节集 直接写出文件
关闭文件 (hMemFile)
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束

 ' 连续赋值 (字符 (0), szFullAddr, szVerb, szProxyServer, szHeaders, szSendBody, szRequest)


.子程序 等待延时, 空白型, , 
.参数 ms, 整数型, , 

.局部变量 time, 整数型, , , 
.局部变量 消息, MSG, , , 

赋值 (time, 相加 (取启动时间 (), ms))
.循环判断首 ()
    .如果 (等于 (PeekMessage (消息, 0, 0, 0, 0), 0))
        延时 (1)
    .否则
        处理事件 ()
    .如果结束
    
.循环判断尾 (小于 (取启动时间 (), time))

.子程序 取线程返回值_, 整数型, , 使用前请保证线程已经运行完毕，如线程尚未中断将返回STILL_ACTIVE(值为259)。子程序返回值为其他数据类型将返回指针。
.参数 线程句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

GetExitCodeThread (线程句柄, 返回值)
返回 (返回值)

.子程序 下载文件ReadFile, 空白型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 写出文件路径, 文本型, , , 
.局部变量 接收文件大小, 整数型, , , 
.局部变量 匿名局部变量_621, 空白型, , , 
.局部变量 匿名局部变量_663, 空白型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 
.局部变量 dwSizeOfRq, 整数型, , , 
.局部变量 匿名局部变量_706, 空白型, , , 


.如果真 (等于 (hMemFile, 0))
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody, 写出文件路径, 接收文件大小)

移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
     ' szHeaders ＝ szHeaders ＋ “Referer: http://” ＋ 取域名 (szFullAddr) ＋ #换行符
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取文本长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取文本长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.判断结束

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)
 ' 输出调试文本 (szRequest)

 ' 取服务器回传协议头  可以获取重定向数据
 ' szRequest ＝ 取空白文本 (1024)
 ' HttpQueryInfoA (hRequest, 22 ＋ 2147483648, szRequest, 1024, 0)
 ' 输出调试文本 (szRequest)

赋值 (dwSizeOfRq, 4)
.如果 (等于 (HttpQueryInfoA_ (hRequest, 536870917, dwByteToRead, dwSizeOfRq, 0), 0)) ' 下载文件总大小
    赋值 (dwByteToRead, 0) ' 如果 下载文件总大小=0  返回下载失败
    
     ' 关闭句柄
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.否则
    
.如果结束

 ' 读取页面数据
.如果真 (等于 (接收文件大小, 0))
    赋值 (接收文件大小, 10240)
.如果真结束
赋值 (start, 取启动时间 ())

赋值 (hMemBody, 打开文件 (写出文件路径, #重写, ))
移到文件首 (hMemBody)
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (接收文件大小))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
    赋值 (dwBytes, 相加 (dwBytes, dwNumber)) ' 已下载数
     ' 进度回调
    赋值 (end, 取启动时间 ())
    赋值 (time, 相减 (end, start))
    .如果真 (等于 (time, 0))
        赋值 (time, 10)
    .如果真结束
    
.循环判断尾 (不等于 (dwNumber, 0))

关闭文件 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, szRequest)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)

 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
.如果真结束
TerminateThread (hThread, 0)
CloseHandle (hThread)


.子程序 全文本替换, 文本型, , 
.参数 具体文本, 文本型, , 
.参数 要替换的文本, 文本型, , 
.参数 被替换的文本, 文本型, , 

.局部变量 a, 文本型, , , 
.局部变量 b, 整数型, , , 

赋值 (a, 具体文本)
.判断循环首 (大于 (寻找文本 (a, 要替换的文本, b, 真), -1))
    赋值 (b, 寻找文本 (a, 要替换的文本, b, 真))
    赋值 (a, 文本替换 (a, b, 取文本长度 (要替换的文本), 被替换的文本))
    赋值 (b, 相加 (b, 取文本长度 (被替换的文本)))
.判断循环尾 ()
返回 (a)

.类模块 彗星正则表达式类, , , 

.程序集变量 RegExp, 对象, , , 
.程序集变量 MatchCollection, 对象, , , 
.程序集变量 Match_Count, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
RegExp.清除 ()

.子程序 创建, 逻辑型, , 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
.参数 正则表达式文本, 文本型, , 比如“易语言4\.0(模块|支持库)?”
.参数 忽略大小写, 逻辑型, 可空, 可以被省略。默认值为真。本参数指定这个正则表达式在创建成功后进行匹配、搜索、替换时，是否区分大小写。
.参数 匹配多行, 逻辑型, 可空, 可以被省略。默认值为真。如果本成员值为真，字符“^”不仅匹配目标文本的开头，而且匹配目标文本中换行符（字符(10)，字符(13)或 #换行符）的后面；字符“$”不仅匹配目标文本的结尾，而且匹配目标文本中换行符的前面。否则字符“^”仅仅匹配目标文本的开头，“$”也仅仅匹配目标文本的结尾。

RegExp.清除 ()
RegExp.创建 (“VBScript.RegExp”, )
.如果真 (RegExp.是否为空 ())
    输出调试文本 (“对象创建失败:VBScript.RegExp”)
    返回 (假)
.如果真结束
.如果真 (是否为空 (忽略大小写))
    赋值 (忽略大小写, 真)
.如果真结束
.如果真 (是否为空 (匹配多行))
    赋值 (匹配多行, 真)
.如果真结束
赋值 (Match_Count, 0)
RegExp.写属性 (“IgnoreCase”, 忽略大小写)
RegExp.写属性 (“Multiline”, 匹配多行)
RegExp.写属性 (“Global”, 真)
RegExp.写属性 (“Pattern”, 正则表达式文本)
返回 (真)

.子程序 取文本, 文本型, , 返回以文本形式表示的正则表达式。如果该对象尚未创建，则返回空文本。本命令为高级对象成员命令。
.如果真 (RegExp.是否为空 ())
    返回 (“”)
.如果真结束
返回 (RegExp.读文本属性 (“Pattern”, ))

.子程序 替换, 文本型, , 替换在正则表达式查找中找到的文本。
.参数 欲被替换的文本, 文本型, , 将要进行文本替换的字符串
.参数 用作替换的文本, 文本型, 可空, 用作替换的文本

返回 (RegExp.文本方法 (“Replace”, 欲被替换的文本, 用作替换的文本))

.子程序 搜索全部, 整数型, , 使用指定的正则表达式搜索指定文本中与该表达式匹配的所有子文本。返回匹配结果数量
.参数 欲被搜索的文本, 文本型, , 

赋值 (MatchCollection, RegExp.对象型方法 (“Execute”, 欲被搜索的文本))
赋值 (Match_Count, MatchCollection.读数值属性 (“Count”, ))
返回 (Match_Count)

.子程序 取匹配数量, 整数型, , 
返回 (Match_Count)

.子程序 取匹配文本, 文本型, , 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始

.局部变量 Match, 对象, , , 
.局部变量 Value, 文本型, , , 

赋值 (Match, MatchCollection.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
赋值 (Value, Match.读文本属性 (“Value”, ))
返回 (Value)

.子程序 取子匹配文本, 文本型, , 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始
.参数 子表达式索引, 整数型, , 欲取其值的子表达式。该参数对应与正则表达式中的一个子表达式（以圆括号标记）。索引从1开始。

.局部变量 Match, 对象, , , 
.局部变量 SubMatches, 对象, , , 
.局部变量 Ret, 变体型, , , 

赋值 (Match, MatchCollection.读对象型属性 (“Item”, 相减 (匹配索引, 1)))
赋值 (SubMatches, Match.读对象型属性 (“SubMatches”, ))
赋值 (Ret, SubMatches.读属性 (“Item”, 相减 (子表达式索引, 1)))
返回 (Ret.取文本 ())

.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
进度下载文件 (“http://down.orsoon.com/%C3%BD%CC%E5%B9%A4%BE%DF/%C3%BD%CC%E5%B2%A5%B7%C5/0602/mplayer_full.rar”, 相加 (取运行目录 (), “\mplayer_full.rar”), &下载进度显示, , , , , , , , )

.子程序 下载进度显示, 空白型, , 
.参数 总大小, 整数型, , 
.参数 目前下载, 整数型, , 
.参数 目前时间, 整数型, , 
.参数 保留参数, 整数型, , 

.局部变量 下载速度, 双精度小数型, , , 
.局部变量 剩余时间, 双精度小数型, , , 
.局部变量 状态文本, 文本型, , , 

赋值 (状态文本, 相加 (“文件大小:”, 到文本 (四舍五入 (相除 (总大小, 1024), 2)), “KB”, #换行符))
赋值 (状态文本, 相加 (状态文本, “已下载:”, 到文本 (四舍五入 (相除 (目前下载, 1024), 2)), “KB”, #换行符))
赋值 (状态文本, 相加 (状态文本, “所用时间:”, 到文本 (整除 (目前时间, 1000)), “秒”, #换行符))
赋值 (下载速度, 四舍五入 (相除 (相乘 (目前下载, 1000), 1024, 目前时间), 2))
赋值 (状态文本, 相加 (状态文本, “下载速度:”, 到文本 (下载速度), “KB/s”, #换行符))
.如果真 (大于 (下载速度, 0))
    赋值 (剩余时间, 到整数 (相除 (相减 (总大小, 目前下载), 1024, 下载速度)))
    赋值 (状态文本, 相加 (状态文本, “剩余时间:”, 到文本 (整除 (剩余时间, 3600)), “时”, 到文本 (求余数 (整除 (剩余时间, 60), 60)), “分”, 到文本 (求余数 (剩余时间, 60)), “秒”))
    
.如果真结束
赋值 (., 状态文本)

赋值 (., 相乘 (相除 (目前下载, 总大小), 100))
 ' 输出调试文本 (“总大小:” ＋ 到文本 (总大小) ＋ “  目前下载:” ＋ 到文本 (目前下载) ＋ “  目前时间:” ＋ 到文本 (目前时间))

.子程序 _窗口1_将被销毁, 空白型, , 
结束 ()


 ' 不属于任何一个程序集、类模块的函数：
