 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.wodesoft.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.wodesoft.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.wodesoft.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 316
    高度 = 232
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “FLV视频嗅探器”
    帮助文件名 = “”



.常量 INTERNET_OPTION_PROXY, "38", 公开, Internet常量代理服务器
.常量 INTERNET_OPTION_PROXY_PASSWORD, "44", 公开, Internet常量代理服务器密码
.常量 INTERNET_OPTION_PROXY_USERNAME, "43", 公开, Internet常量代理服务器用户名
.常量 INTERNET_OPTION_SETTINGS_CHANGED, "39", 公开, Internet常量IE设置改变
.常量 INTERNET_OPEN_TYPE_DIRECT, "1", 公开, Internet打开类型-直连
.常量 INTERNET_OPEN_TYPE_PRECONFIG, "2", 公开, Internet打开类型-??
.常量 INTERNET_OPEN_TYPE_PROXY, "3", 公开, Internet打开类型-代理
.常量 , , , 
.常量 LB_FINDSTRING, "399", , 
.常量 , , , 
.常量 application, "“function FindProxyForURL(url,host){
if(host == "localhost" || host == "127.0.0.1")
	{
		return "DIRECT";
	}
	var private_re = /^http:\/\/((lisbon)|(0\.0\.0\.0)|(127\.\d+\.\d+\.\d+)|(10\.\d+\.\d+\.\d+)|(172\.(1[6789]|2[0-9]|3[01])\.\d+\.\d+)|(169\.254\.\d+\.\d+)|(192\.168\.\d+\.\d+)|(22[3-9]\.\d+\.\d+\.\d+)|(2[3-5][0-9]\.\d+\.\d+\.\d+))+/ig
   var dg = /(dog.xnimg.cn)|(dog.rrimg.com)/ig;
		if(url.match(dg) || url.match(private_re) || url.substring(0,7) != "http://")
		{
			return "DIRECT";
		}
   var pattern = /[^\/&]+(\.flv|\.mp4|\.f4v)+(\?|$)/ig;
	var yp0 = /\/get_video\?\w+/ig;
   var yp1 = /\/videoplayback\?\w+/ig;
	if(url.match(pattern))
	{
		return "PROXY localhost:8080";
	}
	else if(url.match(yp0) || url.match(yp1))
	{
		return "PROXY localhost:8080";
	}
	else
	{
		return "DIRECT";
	}
}”", , 
.常量 , , , 
.常量 , , , 
.常量 INTERNET_SERVICE_HTTP, "3", , 
.常量 , , , 
.常量 WAIT_TIMEOUT, "258", , 超时
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 POINTAPI, , 公开
    .成员 横向位置, 整数型, , , x，横向位置
    .成员 纵向位置, 整数型, , , y，纵向位置

数据类型 INTERNET_PROXY_INFO, 公开, 代理服务器信息
    .成员 dwAccessType, 整数型, , , 
    .成员 lpszProxy, 文本型, , , 
    .成员 lpszProxyBypass, 文本型, , , 


.DLL命令 InternetSetOptionProxy, 逻辑型, "Wininet.dll", "InternetSetOptionA", 公开, 设置IE属性
    .参数 hInternet, 整数型, , 
    .参数 dwOption, 整数型, , 
    .参数 lpBuffer, INTERNET_PROXY_INFO, , 
    .参数 dwBufferLength, 整数型, , 

.DLL命令 InternetSetOptionChangeD, 逻辑型, "Wininet.dll", "InternetSetOptionA", 公开, 改变IE
    .参数 hInternet, 整数型, , 
    .参数 dwOption, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 dwBufferLength, 整数型, , 

.DLL命令 发送消息_, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， 
    SendMessageByString是该函数的“类型安全”声明形式　由具体的消息决定
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 文本型, , 具体取决于消息


.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "", , 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 PeekMessage, 整数型, "user32", "PeekMessageA", , 从线索消息队列中返回一条消息--等待延时　
    .参数 lpMsg, MSG, 传址, 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 stat, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "", , 
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 文本型, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 GetExitCodeThread, 整数型, "kernel32", "GetExitCodeThread", , 
    .参数 hThread, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 文本型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 InternetSetCookieA, 逻辑型, "WinINet.dll", "", , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszCookieName, 文本型, , 
    .参数 lpszCookieData, 文本型, , 

.DLL命令 CallWindowProcA, 整数型, "", "CallWindowProcA", , 
    .参数 子程序指针, 子程序指针, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 
    .参数 参数3, 整数型, , 
    .参数 参数4, 整数型, , 

.DLL命令 CreateThread, 整数型, "", "", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 HttpQueryInfoA_, 整数型, "Wininet.dll", "HttpQueryInfoA", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 整数型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, 传址, 

.DLL命令 TerminateThread, 逻辑型, "", "", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 bWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 CloseHandle, 逻辑型, "", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 SHGetSpecialFolderPath, 空白型, "", "SHGetSpecialFolderPathA", , 特定目录
    .参数 a, 空白型, , 
    .参数 b, 文本型, , 
    .参数 c, 空白型, , 
    .参数 d, 空白型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 客户数据, 文本型, , "0", 
.程序集变量 客户组, 客户, , "0", 
.程序集变量 路径, 文本型, , , 
.子程序 _代理服务器_客户进入, 空白型, , 
.局部变量 新客户, 客户, , , 
.局部变量 客户已有数, 整数型, , , 
.局部变量 i, 整数型, , , 

 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

赋值 (客户已有数, 取数组成员数 (客户数据))

.如果 (等于 (客户已有数, 0))
    加入成员 (客户数据, 取回客户 ())
    复制窗口组件 (新客户)
    赋值 (新客户., 取回客户 ())
    加入成员 (客户组, 新客户)
.否则
     ' 本源码来自易语言资源网(www.wodesoft.com)
.如果结束
.计次循环首 (客户已有数, i)
    .如果真 (并且 (不等于 (客户数据 [i], 取回客户 ()), 等于 (客户已有数, i)))
        加入成员 (客户数据, 取回客户 ())
        复制窗口组件 (新客户)
        赋值 (新客户., 取回客户 ())
        加入成员 (客户组, 新客户)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


.子程序 _代理客户端_数据到达, 空白型, , 
.局部变量 当前客户, 客户, , , 
.局部变量 ip, 文本型, , , 
.局部变量 数据, 字节集, , , 

赋值 (当前客户, 取事件组件 ())
赋值 (数据, 当前客户.取回数据 ())
 ' 输出调试文本 (到文本 (数据))
赋值 (ip, 当前客户.)
ip.发送数据 (数据, )
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 _代理服务器_数据到达, 空白型, , 
.局部变量 数据, 文本型, , , 
.局部变量 标识, 整数型, , , 
.局部变量 临时数据, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 ip, 文本型, , , 
.局部变量 port, 文本型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 代理服务器数据, 字节集, , , 
.局部变量 超时值, 整数型, , , 
.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 客户数据数, 整数型, , , 
.局部变量 FLV地址, 文本型, , , 
.局部变量 hwnd, 整数型, , , 
.局部变量 Re, 整数型, , , 

赋值 (客户数据数, 取数组成员数 (客户数据))
 ' 输出调试文本 (客户数据数)
.计次循环首 (客户数据数, i)
    .如果真 (等于 (客户数据 [i], 取回客户 ()))
        赋值 (数据, 到文本 (取回数据 ()))
        
        
        赋值 (标识, 寻找文本 (数据, “GET ”, , 真))
        赋值 (FLV地址, 取文本中间 (数据, 相加 (标识, 4), 相减 (寻找文本 (数据, “FLV”, , 真), 标识, 1)))
        赋值 (hwnd, 取窗口句柄 ())
        赋值 (Re, 发送消息_ (hwnd, #LB_FINDSTRING, 0, FLV地址))
        .如果真 (等于 (Re, -1))
            FLV地址.加入项目 ()
            输出调试文本 (FLV地址)
        .如果真结束
        
        
        
        赋值 (标识, 寻找文本 (数据, “Host: ”, , 假))
        赋值 (临时数据, 取文本中间 (数据, 相加 (标识, 6), 相减 (寻找文本 (数据, #换行符, 标识, 假), 标识, 6)))
        
        赋值 (标识, 寻找文本 (临时数据, “:”, , 假))
        .如果 (等于 (标识, -1))
            赋值 (ip, 临时数据)
            赋值 (port, “80”)
        .否则
            赋值 (port, 取文本右边 (临时数据, 相减 (取文本长度 (临时数据), 标识)))
            赋值 (ip, 取文本左边 (临时数据, 相减 (取文本长度 (临时数据), 取文本长度 (port), 1)))
        .如果结束
         ' 本源码来自易语言资源网(www.wodesoft.com)
        
        赋值 (代理服务器数据, 取回数据 ())
        赋值 (hMemFile, 打开内存文件 ())
        写出数据 (hMemFile, i, ip, port, 代理服务器数据)
        
         ' 防止客户端连接时 程序假死
        赋值 (超时值, 90)
        赋值 (hThread, CreateThread (0, 0, &代理服务器发送数据, hMemFile, 0, 0))
        
        .循环判断首 ()
            赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
            处理事件 ()
        .循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258)))
        TerminateThread (hThread, 0)
        CloseHandle (hThread)
        关闭文件 (hMemFile)
        跳出循环 ()
        
    .如果真结束
    
.计次循环尾 ()


.子程序 代理服务器发送数据, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 客户组位置, 整数型, , , 
.局部变量 ip, 文本型, , , 
.局部变量 port, 文本型, , , 
.局部变量 代理服务器数据, 字节集, , , 
.局部变量 客户标识, 文本型, , , 
.局部变量 新客户, 客户, , , 


.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, 客户组位置, ip, port, 代理服务器数据)


.如果 (等于 (客户组.连接 ( [客户组位置], ip, 到整数 (port)), 真))
    客户组.发送数据 ( [客户组位置], 代理服务器数据)
    返回 (真)
.否则
    
.如果结束
返回 (假)


.子程序 取网站IP, 文本型, , 
.参数 数据, 文本型, , 

.局部变量 标示, 整数型, , , 
.局部变量 临时数据, 文本型, , , 

赋值 (标示, 寻找文本 (数据, “Host: ”, , 假))
赋值 (临时数据, 取文本中间 (数据, 相加 (标示, 6), 相减 (寻找文本 (数据, #换行符, 标示, 假), 标示, 6)))
返回 (临时数据)

.子程序 _代理服务器_客户离开, 空白型, , 


.子程序 _代理客户端_连接断开, 空白型, , 


.子程序 设置IE代理, 文本型, , ||置IE的代理服务器地址
.参数 代理IP, 文本型, 可空, 如果为空则为取消代理服务器,如果所有协议全用一个地址，请填写一个服务器地址||分开格式为ftp=10.72.88.22:12;gopher=10.72.88.23:1;http=10.72.88.21:6;https=10.72.88.8:5;socks=10.72.88.28:10
.参数 不使用代理地址列表, 文本型, 可空, 请用;分开如127.0.0.1;192.168.0.1

.局部变量 代理信息, INTERNET_PROXY_INFO, , , 

 ' HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyEnable   设置代理开关
 ' HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyOverride 不通过代理列表
 ' HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer   代理服务器地址
.如果 (是否为空 (代理IP))
     ' --取消代理-----开始------注册表--------------------
    赋值 (代理信息.dwAccessType, #INTERNET_OPEN_TYPE_DIRECT) ' 设置为直连模式
    连续赋值 (“”, 代理信息.lpszProxy, 代理信息.lpszProxyBypass)
    .如果真 (等于 (注册项是否存在 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer”), 假))
        写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer”, “”)
    .如果真结束
    .如果真 (等于 (写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyEnable”, 0), 假))
        返回 (“取消IE代理：写注册表代理开关失败”)
    .如果真结束
     ' --取消代理-----结束------注册表--------------------
.否则
     ' --设置代理-----开始------注册表--------------------
    赋值 (代理信息.dwAccessType, #INTERNET_OPEN_TYPE_PROXY) ' 设置为代理模式
    连续赋值 (代理IP, 代理信息.lpszProxy, 代理信息.lpszProxyBypass)
    .如果真 (等于 (写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer”, 代理信息.lpszProxy), 假))
        返回 (“设置IE代理：写注册表代理地址失败”)
    .如果真结束
    .如果真 (等于 (写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyOverride”, 相加 (不使用代理地址列表, “;<local>”)), 假))
        返回 (“设置IE代理：写注册表不使用代理地址列表失败”)
    .如果真结束
    .如果真 (等于 (写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyEnable”, 1), 假))
        返回 (“设置IE代理：写注册表代理开关失败”)
    .如果真结束
     ' --设置代理-----结束-------注册表-------------------
.如果结束
 ' --设置代理-----开始-------IE更新-------------------
.如果真 (等于 (InternetSetOptionProxy (0, #INTERNET_OPTION_PROXY, 代理信息, 12), 假))
    返回 (“设置IE代理：写IE信息失败”)
.如果真结束
.如果真 (等于 (InternetSetOptionChangeD (0, #INTERNET_OPTION_SETTINGS_CHANGED, 0, 0), 假))
    返回 (“设置IE代理：改变IE信息失败”)
.如果真结束
 ' --设置代理-----结束-------IE更新-------------------
返回 (“设置IE代理成功”)

.子程序 选择可用端口, 空白型, , 
.局部变量 端口, 整数型, , , 
.局部变量 结果, 逻辑型, , , 

赋值 (端口, 8080)
.循环判断首 ()
    赋值 (结果, 测试服务端口 (到整数 (端口)))
    .判断开始 (等于 (结果, 真))
        赋值 (., 端口)
    .判断 (等于 (结果, 假))
        赋值 (端口, 相加 (端口, 1))
    .默认
        
    .判断结束
    
.循环判断尾 (等于 (结果, 假))
输出调试文本 (相加 (“服务端端口：”, 到文本 (端口)))

.子程序 测试服务端口, 逻辑型, , 
.参数 端口, 整数型, , 

.局部变量 hMemFile, 整数型, , , 
.局部变量 返回逻辑, 逻辑型, , , 
.局部变量 超时值, 整数型, , , 
.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 

赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, 端口)

 ' 防止客户端连接时 程序假死
赋值 (超时值, 30)
赋值 (hThread, CreateThread (0, 0, &测试服务端口线程, hMemFile, 0, 0))

.循环判断首 ()
    赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
    处理事件 ()
.循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258)))
TerminateThread (hThread, 0)
CloseHandle (hThread)
移到文件首 (hMemFile)
读入数据 (hMemFile, 返回逻辑)
关闭文件 (hMemFile)
.如果 (等于 (返回逻辑, 真))
    返回 (真)
.否则
    
.如果结束
返回 (假)

.子程序 测试服务端口线程, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 端口, 整数型, , , 


.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, 端口)
 ' 本源码来自易语言资源网(www.wodesoft.com)
.如果 (等于 (“127.0.0.1”.连接 (端口), 真))
    移到文件首 (hMemFile)
    写出数据 (hMemFile, 真)
    返回 (真)
.否则
    
.如果结束
写出数据 (hMemFile, 假)
返回 (假)


.子程序 __启动窗口_可否被关闭, 逻辑型, , 
写自动配置脚本 ()
结束 ()

.子程序 _开始_被单击, 空白型, , 
.局部变量 配置文件, 文本型, , , 
.局部变量 文件号, 整数型, , , 

选择可用端口 ()
赋值 (配置文件, 子文本替换 (#application, “8080”, 到文本 (.), , , 真))
.如果 (等于 (文件是否存在 (相加 (取运行目录 (), “\application.pac”)), 假))
    赋值 (文件号, 打开文件 (相加 (取运行目录 (), “\application.pac”), #重写, ))
    写出文本 (文件号, 配置文件)
    关闭文件 (文件号)
.否则
    
.如果结束


写自动配置脚本 (相加 (“file://”, 取运行目录 (), “\application.pac”))
 ' 设置IE代理 (“127.0.0.1:” ＋ 到文本 (代理服务器.端口), “127.0.0.1”)
赋值 (., 真)
赋值 (., 假)
赋值 (_启动窗口., 相加 (“IE FLV视频嗅探器”, “  运行中”))

.子程序 _停止_被单击, 空白型, , 
写自动配置脚本 ()
 ' 设置IE代理 ()
赋值 (., 假)
赋值 (., 真)
赋值 (_启动窗口., 相加 (“IE FLV视频嗅探器”, “  已停止”))

.子程序 写自动配置脚本, 文本型, , 
.参数 自动配置脚本路径, 文本型, 可空, 空为取消自动配置脚本


.如果 (是否为空 (自动配置脚本路径))
    .如果 (等于 (注册项是否存在 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL”), 真))
        .如果真 (等于 (删除注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL”), 假))
            返回 (“取消自动配置脚本：写注册表失败”)
        .如果真结束
        
    .否则
        
    .如果结束
    
.否则
    .如果 (等于 (注册项是否存在 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL”), 假))
        .如果真 (等于 (写注册项 (#现行用户, “Software\Microsoft\Windows\CurrentVersion\Internet Settings\AutoConfigURL”, 自动配置脚本路径), 假))
            返回 (“写自动配置脚本：写注册表失败”)
        .如果真结束
        
    .否则
        
    .如果结束
    
.如果结束
.如果真 (等于 (InternetSetOptionChangeD (0, #INTERNET_OPTION_SETTINGS_CHANGED, 0, 0), 假))
    返回 (“写自动配置脚本信息失败”)
.如果真结束
返回 (“写自动配置脚本信息成功”)

.子程序 __启动窗口_创建完毕, 空白型, , 
写自动配置脚本 ()
赋值 (路径, 取空白文本 (255))
SHGetSpecialFolderPath (0, 路径, 38, 0) ' 获取IE路径


.子程序 _列表框1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 下载文件名, 文本型, , , 
.局部变量 下载地址, 文本型, , , 


.如果真 (不等于 (., -1))
     ' 运行 (路径 ＋ “\Internet Explorer\iexplore.exe ” ＋ 列表框1.取项目文本 (列表框1.现行选中项), 假, 4)
    赋值 (下载地址, .取项目文本 (.))
    赋值 (下载文件名, 取文本右边 (下载地址, 相减 (取文本长度 (下载地址), 倒找文本 (下载地址, “/”, , 假))))
     ' 输出调试文本 (下载文件名)
    赋值 (., “”)
    赋值 (., 0)
    
    进度下载文件 (下载地址, 相加 (取运行目录 (), “\”, 下载文件名), &下载进度显示, , , , , , , , )
.如果真结束
' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 下载进度显示, 空白型, , 
.参数 总大小, 整数型, , 
.参数 目前下载, 整数型, , 
.参数 目前时间, 整数型, , 
.参数 保留参数, 整数型, , 

.局部变量 下载速度, 双精度小数型, , , 
.局部变量 剩余时间, 双精度小数型, , , 
.局部变量 状态文本, 文本型, , , 

赋值 (状态文本, 相加 (“文件大小:”, 到文本 (四舍五入 (相除 (总大小, 1024), 2)), “KB”, #换行符))
赋值 (状态文本, 相加 (状态文本, “已下载:”, 到文本 (四舍五入 (相除 (目前下载, 1024), 2)), “KB”, #换行符))
赋值 (状态文本, 相加 (状态文本, “所用时间:”, 到文本 (整除 (目前时间, 1000)), “秒”, #换行符))
赋值 (下载速度, 四舍五入 (相除 (相乘 (目前下载, 1000), 1024, 目前时间), 2))
赋值 (状态文本, 相加 (状态文本, “下载速度:”, 到文本 (下载速度), “KB/s”, #换行符))
.如果真 (大于 (下载速度, 0))
    赋值 (剩余时间, 到整数 (相除 (相减 (总大小, 目前下载), 1024, 下载速度)))
    赋值 (状态文本, 相加 (状态文本, “剩余时间:”, 到文本 (整除 (剩余时间, 3600)), “时”, 到文本 (求余数 (整除 (剩余时间, 60), 60)), “分”, 到文本 (求余数 (剩余时间, 60)), “秒”))
    
.如果真结束
赋值 (., 状态文本)

赋值 (., 相乘 (相除 (目前下载, 总大小), 100))
 ' 输出调试文本 (“总大小:” ＋ 到文本 (总大小) ＋ “  目前下载:” ＋ 到文本 (目前下载) ＋ “  目前时间:” ＋ 到文本 (目前时间))

.程序集 下载程序集, , , 

.程序集变量 dwByteToRead, 整数型, , , 
.程序集变量 dwBytes, 整数型, , , 
.程序集变量 start, 整数型, , , 
.程序集变量 end, 整数型, , , 
.程序集变量 time, 整数型, , , 
.程序集变量 匿名程序集变量_470, 空白型, , , 
.程序集变量 保留参数, 整数型, , , 
.程序集变量 hThread, 整数型, , , 
.程序集变量 匿名程序集变量_473, 空白型, , , 
.子程序 访问网页, 字节集, 公开, 
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 超时值, 整数型, 可空, 单位秒，默认90
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 
.局部变量 lpBody, 字节集, , , 

赋值 (完整网址, 全文本替换 (完整网址, “\”, “/”))
赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, “MissWho”, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息)
未知函数_244 () ' *** 缩略程序块 ***
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
.如果真 (或者 (是否为空 (超时值), 等于 (超时值, 0)))
    赋值 (超时值, 90)
.如果真结束
赋值 (hThread, CreateThread (0, 0, &ReadFile, hMemFile, 0, 0))
.循环判断首 ()
    赋值 (ret, MsgWaitForMultipleObjects (1, hThread, 假, 相乘 (超时值, 1000), 1215))
    处理事件 ()
.循环判断尾 (并且 (不等于 (ret, 0), 不等于 (ret, 258)))
TerminateThread (hThread, 0)
CloseHandle (hThread)
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag, szRequest, lpBody)
关闭文件 (hMemFile)
.如果真 (或者 (不等于 (szFlag, “MissWho_OK”), 等于 (ret, 258)))
    赋值 (lpBody, {  })
.如果真结束
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束
 ' 连续赋值 (字符 (0), szFullAddr, szVerb, szProxyServer, szHeaders, szSendBody, szRequest)
返回 (lpBody)

.子程序 ReadFile, 逻辑型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 匿名局部变量_515, 空白型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 

.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag)
.如果真 (不等于 (szFlag, “MissWho”))
    返回 (假)
.如果真结束
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody)
移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 (假)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取文本长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取文本长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    返回 (假)
.判断结束

 ' 读取页面数据
赋值 (hMemBody, 打开内存文件 ())
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (512))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
.循环判断尾 (不等于 (dwNumber, 0))

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)

移到文件首 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, “MissWho_OK”, szRequest, 读入字节集 (hMemBody, 取文件长度 (hMemBody)))
关闭文件 (hMemBody)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)

 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
.如果真结束
返回 (真)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber, 选择 (等于 (寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 取文本中间 (szServerName, dwNumber, 选择 (等于 (寻找文本 (szServerName, “/”, dwNumber, 假), -1), 取文本长度 (szServerName), 相减 (寻找文本 (szServerName, “/”, dwNumber, 假), dwNumber)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber, -1))
        赋值 (szServerName, 取文本左边 (szServerName, 相减 (dwNumber, 1)))
    .如果真结束
    
.如果真结束
返回 (到小写 (szServerName))

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber, 寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber, 选择 (等于 (dwNumber, -1), 80, 到数值 (取文本右边 (szServerName, 相减 (取文本长度 (szServerName), dwNumber)))))
返回 (dwNumber)

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 进度下载文件, 空白型, 公开, 
.参数 完整网址, 文本型, , 
.参数 写出文件路径, 文本型, , 
.参数 进度显示, 子程序指针, , 回调函数，参数一为目前总字节数；参数二为下载字节数；参数三为现行下载时间
.参数 接收文件大小, 整数型, 可空, 默认为10240字节
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 ret, 整数型, , , 
.局部变量 hMemFile, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 

连续赋值 (0, dwByteToRead, dwBytes, time, 保留参数)
.如果真 (是否为空 (接收文件大小))
    赋值 (接收文件大小, 10240)
.如果真结束
赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息, 写出文件路径, 接收文件大小)
未知函数_244 () ' *** 缩略程序块 ***
 ' szFullAddr ＝ 完整网址
 ' szVerb ＝ 访问方式
 ' szProxyServer ＝ 代理地址
 ' szHeaders ＝ 附加协议头
 ' szSendBody ＝ 提交信息
 ' lpBody ＝ {  }
赋值 (hThread, CreateThread (0, 0, &下载文件ReadFile, hMemFile, 0, 0))
 ' 本源码来自易语言资源网(www.wodesoft.com)
.循环判断首 ()
     ' ret ＝ MsgWaitForMultipleObjects (1, hThread, 假, 超时值 × 1000, 1215)
     ' 输出调试文本 (超时值)
    CallWindowProcA (进度显示, dwByteToRead, dwBytes, time, 保留参数) ' 回调下载进度
    等待延时 (10)
.循环判断尾 (等于 (取线程返回值_ (hThread), 259)) ' 线程未结束
CallWindowProcA (进度显示, dwByteToRead, dwBytes, time, 保留参数) ' 回调下载进度
TerminateThread (hThread, 0)
CloseHandle (hThread)

移到文件首 (hMemFile)
读入数据 (hMemFile, szRequest) ' lpBody为下载的字节集 直接写出文件
关闭文件 (hMemFile)
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束

 ' 连续赋值 (字符 (0), szFullAddr, szVerb, szProxyServer, szHeaders, szSendBody, szRequest)


.子程序 等待延时, 空白型, , 
.参数 ms, 整数型, , 

.局部变量 time, 整数型, , , 
.局部变量 消息, MSG, , , 

赋值 (time, 相加 (取启动时间 (), ms))
.循环判断首 ()
    .如果 (等于 (PeekMessage (消息, 0, 0, 0, 0), 0))
        延时 (1)
    .否则
        处理事件 ()
    .如果结束
    
.循环判断尾 (小于 (取启动时间 (), time))

.子程序 取线程返回值_, 整数型, , 使用前请保证线程已经运行完毕，如线程尚未中断将返回STILL_ACTIVE(值为259)。子程序返回值为其他数据类型将返回指针。
.参数 线程句柄, 整数型, , 

.局部变量 返回值, 整数型, , , 

GetExitCodeThread (线程句柄, 返回值)
返回 (返回值)

.子程序 下载文件ReadFile, 空白型, , 
.参数 hMemFile, 整数型, , 

.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 文本型, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 hMemBody, 整数型, , , 
.局部变量 写出文件路径, 文本型, , , 
.局部变量 接收文件大小, 整数型, , , 
.局部变量 匿名局部变量_569, 空白型, , , 
.局部变量 匿名局部变量_570, 空白型, , , 
.局部变量 hOpen, 整数型, , , 
.局部变量 hConnect, 整数型, , , 
.局部变量 hRequest, 整数型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 dwNumber, 整数型, , , 
.局部变量 dwSizeOfRq, 整数型, , , 
.局部变量 匿名局部变量_580, 空白型, , , 


.如果真 (等于 (hMemFile, 0))
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody, 写出文件路径, 接收文件大小)
' 本源码来自易语言资源网(www.wodesoft.com)
移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
     ' szHeaders ＝ szHeaders ＋ “Referer: http://” ＋ 取域名 (szFullAddr) ＋ #换行符
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 字符 (0), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (不等于 (szSendBody, “”))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取文本长度 (szSendBody)), #换行符))
    .如果真结束
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取文本长度 (szSendBody))
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.判断结束

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)
 ' 输出调试文本 (szRequest)

 ' 取服务器回传协议头  可以获取重定向数据
 ' szRequest ＝ 取空白文本 (1024)
 ' HttpQueryInfoA (hRequest, 22 ＋ 2147483648, szRequest, 1024, 0)
 ' 输出调试文本 (szRequest)

赋值 (dwSizeOfRq, 4)
.如果 (等于 (HttpQueryInfoA_ (hRequest, 536870917, dwByteToRead, dwSizeOfRq, 0), 0)) ' 下载文件总大小
    赋值 (dwByteToRead, 0) ' 如果 下载文件总大小=0  返回下载失败
    
     ' 关闭句柄
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    TerminateThread (hThread, 0)
    CloseHandle (hThread)
    
.否则
    
.如果结束

 ' 读取页面数据
.如果真 (等于 (接收文件大小, 0))
    赋值 (接收文件大小, 10240)
.如果真结束
赋值 (start, 取启动时间 ())

赋值 (hMemBody, 打开文件 (写出文件路径, #重写, ))
移到文件首 (hMemBody)
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (接收文件大小))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
    赋值 (dwBytes, 相加 (dwBytes, dwNumber)) ' 已下载数
     ' 进度回调
    赋值 (end, 取启动时间 ())
    赋值 (time, 相减 (end, start))
    .如果真 (等于 (time, 0))
        赋值 (time, 10)
    .如果真结束
    
.循环判断尾 (不等于 (dwNumber, 0))

关闭文件 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, szRequest)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)

 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
.如果真结束
TerminateThread (hThread, 0)
CloseHandle (hThread)


.子程序 全文本替换, 文本型, , 
.参数 具体文本, 文本型, , 
.参数 要替换的文本, 文本型, , 
.参数 被替换的文本, 文本型, , 

.局部变量 a, 文本型, , , 
.局部变量 b, 整数型, , , 

赋值 (a, 具体文本)
.判断循环首 (大于 (寻找文本 (a, 要替换的文本, b, 真), -1))
    赋值 (b, 寻找文本 (a, 要替换的文本, b, 真))
    赋值 (a, 文本替换 (a, b, 取文本长度 (要替换的文本), 被替换的文本))
    赋值 (b, 相加 (b, 取文本长度 (被替换的文本)))
.判断循环尾 ()
返回 (a)


 ' 不属于任何一个程序集、类模块的函数：
