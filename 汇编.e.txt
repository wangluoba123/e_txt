 ' 文件类型：Windows模块源码

 ' 程序名称：汇编模块
 ' 程序描述：汇编模块
@备注:
汇编模块
 ' 程序作者：神话工厂
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 EAX, "0", 公开, 
.常量 ECX, "1", 公开, 
.常量 EDX, "2", 公开, 
.常量 EBX, "3", 公开, 
.常量 ESP, "4", 公开, 
.常量 EBP, "5", 公开, 
.常量 ESI, "6", 公开, 
.常量 EDI, "7", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库





.程序集 程序集1, , , 

.程序集变量 代码, 字节集, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.子程序 MOV_寄存器_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时字符, 文本型, , , 
.局部变量 临时数值, 整数型, , , 

赋值 (临时字符, “8BC0”)
赋值 (临时数值, 相加 (判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2)))
赋值 (相加 (未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (临时字符), 临时数值)))))
 ' 输出调试文本 (到文本 (转换十到十六 (文本到十进制数 (临时字符) ＋ 临时数值)))
 ' 输出调试文本 (查看字节集 (代码))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 MOV_寄存器_常数, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 整数型, , , 

赋值 (临时数值, 判断寄存器 (寄存器))
赋值 (临时文本, 相加 (取十六进制文本 (相加 (未知函数_67175381 (“b8”), 临时数值)), 未知函数_67175383 (常数)))
 ' 输出调试文本 (取十六进制文本 (文本到十进制数 (“b8”) ＋ 临时数值) ＋ “,” ＋ 数值到机器码 (常数))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 MOV_寄存器_PTR, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时参数, 字节集, , , 

.如果 (等于 (寄存器, 0))
    赋值 (临时参数, 未知函数_67175380 (“a1”))
.否则
    赋值 (临时参数, 未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (“8b05”), 判断寄存器 (寄存器, 1)))))
.如果结束
赋值 (相加 (临时参数, 未知函数_67175380 (未知函数_67175383 (内存地址))))
 ' 输出调试文本 (字节集文本查看 (代码))

.子程序 MOV_PTR_寄存器, 空白型, , 
.参数 内存地址, 整数型, , 
.参数 寄存器, 整数型, , 

.局部变量 临时参数, 字节集, , , 

.如果 (等于 (寄存器, 0))
    赋值 (临时参数, 未知函数_67175380 (“a3”))
.否则
    赋值 (临时参数, 未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (“8905”), 判断寄存器 (寄存器, 1)))))
.如果结束
赋值 (相加 (临时参数, 未知函数_67175380 (未知函数_67175383 (内存地址))))


.子程序 MOV_寄存器_PTR_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时字符, 文本型, , , 
.局部变量 临时数值, 整数型, , , 

赋值 (临时字符, “8B00”)
赋值 (临时数值, 相加 (判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2)))
赋值 (相加 (未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (临时字符), 临时数值)))))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 MOV_寄存器_PTR_寄存器_ADD, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 
.参数 偏移, 整数型, , 

.局部变量 临时字符, 文本型, , , 
.局部变量 临时数值, 整数型, , , 
.局部变量 位数, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

.如果 (并且 (大于或等于 (偏移, -128), 小于或等于 (偏移, 127)))
    赋值 (临时字符, “8B40”)
    赋值 (位数, 2)
.否则
    赋值 (临时字符, “8B80”)
    赋值 (位数, 8)
.如果结束
赋值 (临时数值, 相加 (判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2)))
赋值 (临时文本, 未知函数_67175383 (偏移, 位数))
 ' 输出调试文本 (取十六进制文本 (文本到十进制数 (临时字符) ＋ 临时数值) ＋ 临时文本)
赋值 (相加 (未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (临时字符), 临时数值))), 未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 MOV_寄存器_PTR_ADD_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 偏移, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时字符, 文本型, , , 
.局部变量 临时数值, 整数型, , , 
.局部变量 位数, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

.如果 (并且 (大于或等于 (偏移, -128), 小于或等于 (偏移, 127)))
    赋值 (临时字符, “8940”)
    赋值 (位数, 2)
.否则
    赋值 (临时字符, “8980”)
    赋值 (位数, 8)
.如果结束
赋值 (临时数值, 相加 (判断寄存器 (寄存器1), 判断寄存器 (寄存器2, 1)))
赋值 (临时文本, 未知函数_67175383 (偏移, 位数))
 ' 输出调试文本 (取十六进制文本 (文本到十进制数 (临时字符) ＋ 临时数值) ＋ 临时文本)
赋值 (相加 (未知函数_67175380 (取十六进制文本 (相加 (未知函数_67175381 (临时字符), 临时数值))), 未知函数_67175380 (临时文本)))


.子程序 PUSH_寄存器, 空白型, , 
.参数 寄存器, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 整数型, , , 

赋值 (临时文本, “50”)
赋值 (临时数值, 相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器)))
赋值 (临时文本, 取十六进制文本 (临时数值))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 PUSH_常数, 空白型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “6a”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “68”)
    赋值 (位数, 8)
.如果结束
 ' 临时文本 ＝ 临时文本 ＋ 数值到机器码 (常数, 位数)
赋值 (相加 (未知函数_67175380 (临时文本), 未知函数_67175380 (未知函数_67175383 (常数, 位数))))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 PUSH_PTR, 空白型, , 
.参数 内存地址, 整数型, , 

赋值 (相加 (未知函数_67175380 (相加 (“FF35”, 未知函数_67175383 (内存地址)))))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 POP_寄存器, 空白型, , 
.参数 寄存器, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 整数型, , , 
.局部变量 临时寄存器, 文本型, , , 

赋值 (临时文本, “58”)
赋值 (临时数值, 相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器)))
赋值 (临时文本, 取十六进制文本 (临时数值))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 CALL_PTR, 空白型, , 
.参数 常数, 整数型, , 

赋值 (相加 (未知函数_67175380 (相加 (“FF15”, 未知函数_67175383 (常数)))))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 CALL_PTR_寄存器, 空白型, , 
.参数 寄存器, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“FF10”), 判断寄存器 (寄存器))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 CALL_PTR_寄存器_ADD, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 偏移, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (偏移, -128), 小于或等于 (偏移, 127)))
    赋值 (临时文本, “FF50”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “FF90”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (偏移, 位数)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 CALL_寄存器, 空白型, , 
.参数 寄存器, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“FFD0”), 判断寄存器 (寄存器))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 ADD_寄存器_PTR, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“0305”), 判断寄存器 (寄存器, 1))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (内存地址)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 ADD_寄存器_常数, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “83C0”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “81C0”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器))))
.如果真 ()

.子程序 ADD_寄存器_PTR_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“0300”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 ADD_寄存器_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“03C0”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 LEA_寄存器_PTR_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“8D00”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))




.子程序 LEA_寄存器_PTR_寄存器_ADD, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “8D40”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “8D80”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (常数, 位数)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))



.子程序 LEA_寄存器_PTR, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“8D05”), 判断寄存器 (寄存器, 1))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (内存地址)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))



.子程序 CMP_寄存器_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“3BC0”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 CMP_寄存器_PTR_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“3B00”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 CMP_寄存器_PTR, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“3B05”), 判断寄存器 (寄存器, 1))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (内存地址)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 SUB_寄存器_常数, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “83E8”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “81E8”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器))))
.如果真 ()

.子程序 SUB_寄存器_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“2BC0”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 SUB_寄存器_PTR_寄存器, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“2B00”), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 SUB_寄存器_PTR, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 内存地址, 整数型, , 

.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (“2B05”), 判断寄存器 (寄存器, 1))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (内存地址)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 CMP_寄存器_PTR_寄存器_ADD, 空白型, , 
.参数 寄存器1, 整数型, , 
.参数 寄存器2, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “3B40”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “3B80”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器1, 1), 判断寄存器 (寄存器2))))
赋值 (临时文本, 相加 (临时文本, 未知函数_67175383 (常数, 位数)))
赋值 (相加 (未知函数_67175380 (临时文本)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 CMP_寄存器_常数, 空白型, , 
.参数 寄存器, 整数型, , 
.参数 常数, 整数型, , 

.局部变量 临时文本, 文本型, , , 
.局部变量 位数, 整数型, , , 

.如果 (并且 (大于或等于 (常数, -128), 小于或等于 (常数, 127)))
    赋值 (临时文本, “83F8”)
    赋值 (位数, 2)
.否则
    赋值 (临时文本, “81F8”)
    赋值 (位数, 8)
.如果结束
赋值 (临时文本, 取十六进制文本 (相加 (未知函数_67175381 (临时文本), 判断寄存器 (寄存器))))
.如果真 ()

.子程序 RET, 空白型, , 
赋值 (相加 (未知函数_67175380 (“C3”)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 RET_常数, 空白型, , 常数 = 0-39321
.参数 常数, 整数型, , 0-39321

.如果真 (并且 (大于或等于 (常数, 0), 小于或等于 (常数, 39321)))
    赋值 (相加 (未知函数_67175380 (未知函数_67175383 (常数, 4))))
.如果真结束
 ' 输出调试文本 (查看字节集 (代码))

.子程序 判断寄存器, 整数型, , 
.参数 寄存器, 整数型, , 
.参数 次方, 整数型, 可空, 默认次方=0

返回 (相乘 (寄存器, 求次方 (8, 次方)))

.子程序 汇编_置代码, 空白型, , 
赋值 ({  })
 ' 输出调试文本 (查看字节集 (代码))


.子程序 汇编_取代码, 字节集, , 
返回 ()


.子程序 PUSHAD, 空白型, , 
赋值 (相加 (未知函数_67175380 (“60”)))
 ' 输出调试文本 (查看字节集 (代码))


.子程序 POPAD, 空白型, , 
赋值 (相加 (未知函数_67175380 (“61”)))
 ' 输出调试文本 (查看字节集 (代码))

.子程序 文本到字节集, 字节集, , 默认16进制文本,忽略大小写
.参数 文本, 文本型, , 
.参数 文本类型, 整数型, 可空, 10=10进制，16=16进制....，默认16进制

.局部变量 临时文本, 文本型, , , 
.局部变量 序号, 整数型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 临时字符, 整数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 字节集, 字节集, , , 

.如果真 (是否为空 (文本类型))
    赋值 (文本类型, 16)
.如果真结束
赋值 (临时文本, 文本)
赋值 (文本长度, 取文本长度 (临时文本))
.判断开始 (等于 (文本类型, 10))
    赋值 (临时文本, 子文本替换 (临时文本, “{”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “}”, , , , 真))
    赋值 (临时数组, 分割文本 (临时文本, “,”, ))
    赋值 (文本长度, 取数组成员数 (临时数组))
    .计次循环首 (文本长度, 序号)
        赋值 (临时字符, 到数值 (临时数组 [序号]))
        赋值 (字节集, 相加 (字节集, 取字节集左边 (到字节集 (临时字符), 1)))
    .计次循环尾 ()
.判断 (等于 (文本类型, 16))
    赋值 (临时文本, 子文本替换 (临时文本, “{”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “}”, , , , 真))
    赋值 (临时文本, 子文本替换 (临时文本, “,”, , , , 真))
    赋值 (文本长度, 取文本长度 (临时文本))
    .变量循环首 (1, 文本长度, 2, 序号)
        赋值 (临时字符, 文本到十进制数 (取文本中间 (临时文本, 序号, 2), 16))
        赋值 (字节集, 相加 (字节集, 取字节集左边 (到字节集 (临时字符), 1)))
    .变量循环尾 ()
.默认
    
.判断结束
返回 (字节集)


.子程序 文本到十进制数, 整数型, , 忽略大小写
.参数 原始文本, 文本型, , 
.参数 类型, 整数型, 可空, 2=2进制，8=8进制，10=10进制,16=16进制,默认16进制

.局部变量 结果, 整数型, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 临时字符, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 序号, 整数型, , , 
.局部变量 临时数值, 整数型, , , 

.如果真 (是否为空 (类型))
    赋值 (类型, 16)
.如果真结束
赋值 (临时文本, 原始文本)
.判断开始 (等于 (类型, 2))
    赋值 (文本长度, 取文本长度 (临时文本))
    .变量循环首 (1, 文本长度, 1, 序号)
        赋值 (临时字符, 取文本中间 (临时文本, 相加 (相减 (文本长度, 序号), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (临时字符, ), 取代码 (“1”, )), 大于或等于 (取代码 (临时字符, ), 取代码 (“0”, ))))
            赋值 (临时数值, 到数值 (临时字符))
        .如果真结束
        赋值 (结果, 相加 (结果, 相乘 (求次方 (2, 相减 (序号, 1)), 临时数值)))
    .变量循环尾 ()
.判断 (等于 (类型, 8))
    赋值 (文本长度, 取文本长度 (临时文本))
    .变量循环首 (1, 文本长度, 1, 序号)
        赋值 (临时字符, 取文本中间 (临时文本, 相加 (相减 (文本长度, 序号), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (临时字符, ), 取代码 (“7”, )), 大于或等于 (取代码 (临时字符, ), 取代码 (“0”, ))))
            赋值 (临时数值, 到数值 (临时字符))
        .如果真结束
        赋值 (结果, 相加 (结果, 相乘 (求次方 (8, 相减 (序号, 1)), 临时数值)))
    .变量循环尾 ()
.判断 (等于 (类型, 10))
    赋值 (结果, 到数值 (临时文本))
.判断 (等于 (类型, 16))
    赋值 (文本长度, 取文本长度 (临时文本))
    .变量循环首 (1, 文本长度, 1, 序号)
        赋值 (临时字符, 取文本中间 (临时文本, 相加 (相减 (文本长度, 序号), 1), 1))
        .判断开始 (并且 (小于或等于 (取代码 (临时字符, ), 取代码 (“F”, )), 大于或等于 (取代码 (临时字符, ), 取代码 (“A”, ))))
            赋值 (临时数值, 相加 (相减 (取代码 (临时字符, ), 取代码 (“A”, )), 10))
        .判断 (并且 (小于或等于 (取代码 (临时字符, ), 取代码 (“f”, )), 大于或等于 (取代码 (临时字符, ), 取代码 (“a”, ))))
            赋值 (临时数值, 相加 (相减 (取代码 (临时字符, ), 取代码 (“a”, )), 10))
        .判断 (并且 (小于或等于 (取代码 (临时字符, ), 取代码 (“9”, )), 大于或等于 (取代码 (临时字符, ), 取代码 (“0”, ))))
            赋值 (临时数值, 到数值 (临时字符))
        .默认
            
        .判断结束
        赋值 (结果, 相加 (结果, 相乘 (求次方 (16, 相减 (序号, 1)), 临时数值)))
    .变量循环尾 ()
.默认
    
.判断结束
返回 (结果)


.子程序 数值到机器码, 文本型, , 默认为8位
.参数 数值, 整数型, , 
.参数 位数, 整数型, 可空, 默认为8位

.局部变量 临时文本, 文本型, , , 
.局部变量 结果, 文本型, , , 
.局部变量 序号, 整数型, , , 
.局部变量 长度, 整数型, , , 

.如果真 (是否为空 (位数))
    赋值 (位数, 8)
.如果真结束
赋值 (临时文本, 取文本右边 (相加 (“00000000”, 取十六进制文本 (数值)), 位数))
赋值 (长度, 取文本长度 (临时文本))
.变量循环首 (1, 相除 (长度, 2), 1, 序号)
    赋值 (结果, 相加 (结果, 取文本中间 (临时文本, 相减 (长度, 相乘 (相减 (序号, 1), 2), 1), 2)))
.变量循环尾 ()
返回 (结果)



 ' 不属于任何一个程序集、类模块的函数：
