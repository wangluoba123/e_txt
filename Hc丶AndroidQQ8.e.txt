 ' 文件类型：未知类型

 ' 程序名称：红尘丶AndroidQQ协议
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.图片 gzip, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\gzip", , gzip.dll
.图片 libeay32, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\libeay32", , libeay32.dll
.图片 zlibwapi, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\zlibwapi", , zlibwapi.dll
.图片 , , , 
.图片 LocList, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\LocList", , 地区代码表
.图片 通讯录语音, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\通讯录语音", , 
.图片 , , , 
.图片 同城, " ' 已保存到：D:\易语言学习\Data\Hc丶AndroidQQ8.e\同城", , 
.常量 头部函数, "“var mingwen, mima, bbbb, jiami1, jiami2, ms = {},
ceshi;
var ceOrientationEvent = {
alpha: null,
beta: null,
gamma: null
}
var event = {
pageX: 190,
pageY: 296
}
var screen = {
availHeight: 1050,
availLeft: 0,
availTop: 0,
availWidth: 1920,
colorDepth: 24,
height: 1080,
orientation: ScreenOrientation = {
    angle: 0,
    type: "landscape-primary",
    onchange: null
},
pixelDepth: 24,
width: 1920
}
var document = {
getElementById: getElementById,
addEventListener: addListener,
mozHidden: undefined,
referrer: "",
all: false,
charset: "UTF-8",
characterSet: "UTF-8",
cookie: "ptcz=",
documentElement: {
    clientWidth: 360,
    clientHeight: 360
},
body: {
    appendChild: appendChild
},
createElement: div,
location: {
    href: "https://ssl.captcha.qq.com/cap_union_new_show"
}
}
var navigator = {
userAgent: "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.26 Safari/537.36 Core/1.63.5221.400 QQBrowser/10.0.1125.400",
platform: "Win32",
plugins: {
    length: 3,
    "Shockwave Flash": {
        description: "Shockwave Flash 27.9 r0",
        name: "Chromium PDF Plugin",
        description: "Portable Document Format"
    }
},
languages: ["zh-CN", "zh"],
cookieEnabled: true
}
var window = {
location: {
    host: {
        replace: replace
    }
},
host: {
    replace: replace
},
postMessage: postMessage,
addEventListener: addListener,
document: document,
event: event,
"Array": Array,
innerWidth: 360,
innerHeight: 360,
navigator: navigator,
BJ_REPORT: 1,
setTimeout: setTimeout,
TDC: {}
}
var BJ_REPORT = {
report: setTimeout
};

function getElementById(a) {

}

function replace(a, b) {

}

function appendChild(a) {
//ceshi=this;
}

function div(name) {
if ("iframe" == name) {
    return {
        style: [],
        addEventListener: addListener,
        contentWindow: window
    }
}
return {};
}

function getArray(a) {
return [a];
}

function setTimeout(a, b) {
var begtime = 0,
endtime = new Date().getTime() + b;
while (begtime < endtime) {
    begtime = new Date().getTime();
}
return a;
}

function sTimeout(b) {
var begtime = 0,
endtime = new Date().getTime() + b;
while (begtime < endtime) {
    begtime = new Date().getTime();
}
}

function addListener(a, b, c) {

ms[a] = b;
if (a == "deviceorientation") {

    b(ceOrientationEvent);

}
if (a == "message") {
    //b({data:{"message":{"val":"1450712798:1526699243251","type":"set"}}})
}

}

function postMessage(a, b) {
return 0;
}
"object" != typeof JSON && (JSON = {}),

function() {
"use strict";

function f(t) {
    return t < 10 ? "0" + t: t
}

function quote(t) {
    return escapable.lastIndex = 0,
    escapable.test(t) ? '"' + t.replace(escapable,

    function(t) {
        var e = meta[t];
        return "string" == typeof e ? e: "\\u" + ("0000" + t.charCodeAt(0).toString(16)).slice( - 4)
    }) + '"': '"' + t + '"'
}

function str(t, e) {
    var n, r, o, i, a, f = gap,
    u = e[t];
    switch (u && "object" == typeof u && "function" == typeof u.toJSON && (u = u.toJSON(t)), "function" == typeof rep && (u = rep.call(e, t, u)), typeof u) {
    case "string":
        return quote(u);
    case "number":
        return isFinite(u) ? String(u) : "null";
    case "boolean":
    case "null":
        return String(u);
    case "object":
        if (!u) return "null";
        if (gap += indent, a = [], "[object Array]" === Object.prototype.toString.apply(u)) {
            for (i = u.length, n = 0; n < i; n += 1) a[n] = str(n, u) || "null";
            return o = 0 === a.length ? "[]": gap ? "[\n" + gap + a.join(",\n" + gap) + "\n" + f + "]": "[" + a.join(",") + "]",
            gap = f,
            o
        }
        if (rep && "object" == typeof rep) for (i = rep.length, n = 0; n < i; n += 1)"string" == typeof rep[n] && (r = rep[n], o = str(r, u), o && a.push(quote(r) + (gap ? ": ": ":") + o));
        else for (r in u) Object.prototype.hasOwnProperty.call(u, r) && (o = str(r, u), o && a.push(quote(r) + (gap ? ": ": ":") + o));
        return o = 0 === a.length ? "{}": gap ? "{\n" + gap + a.join(",\n" + gap) + "\n" + f + "}": "{" + a.join(",") + "}",
        gap = f,
        o
    }
}
"function" != typeof Date.prototype.toJSON && (Date.prototype.toJSON = function() {
    return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z": null
},
String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
    return this.valueOf()
});
var cx, escapable, gap, indent, meta, rep;
"function" != typeof JSON.stringify && (escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
    "\b": "\\b",
    "\t": "\\t",
    "\n": "\\n",
    "\f": "\\f",
    "\r": "\\r",
    '"': '\\"',
    "\\": "\\\\"
},
JSON.stringify = function(t, e, n) {
    var r;
    if (gap = "", indent = "", "number" == typeof n) for (r = 0; r < n; r += 1) indent += " ";
    else "string" == typeof n && (indent = n);
    if (rep = e, e && "function" != typeof e && ("object" != typeof e || "number" != typeof e.length)) throw new Error("JSON.stringify");
    return str("", {
        "": t
    })
}),
"function" != typeof JSON.parse && (cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, JSON.parse = function(text, reviver) {
    function walk(t, e) {
        var n, r, o = t[e];
        if (o && "object" == typeof o) for (n in o) Object.prototype.hasOwnProperty.call(o, n) && (r = walk(o, n), void 0 !== r ? o[n] = r: delete o[n]);
        return reviver.call(t, e, o)
    }
    var j;
    if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx,

    function(t) {
        return "\\u" + ("0000" + t.charCodeAt(0).toString(16)).slice( - 4)
    })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"),
    "function" == typeof reviver ? walk({
        "": j
    },
    "") : j;
    throw new SyntaxError("JSON.parse")
})
} ();
/*/
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
/*/”", , 
.常量 尾部函数, "“/*/
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
         -------------------------------------------------Split head--------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------
/*/
function get(tokenid,e) {
var up,
bt = 1,
mt = 0,
o = 0,
x = 0,
y = 0,
mouse = e;

up = getMouserup(e);


var token = JSON.stringify({
    "message": {
        "val": tokenid+":"+ +new Date(),
        "type": "set"
    }
});
window.TDC.setData({
    "ft": "qf_7P_n_H",
    "coordinate": [10, 64, 0.5],
    "clientType": "2",
    trycnt: ++bt,
    refreshcnt: mt,
    slideValue: e,
    dragobj: o
});

for (var i = 0; i < mouse.length; i++) {
    sTimeout(mouse[i][2]);
    ms.mousemove({
        pageX: mouse[i][0] + x,
        pageY: mouse[i][1] + y
    });
    x = x + mouse[i][0];
    y = y + mouse[i][1]
}

ms.mouseup(up);
ms.message(token);
return window.TDC.getData(!0);
}
function getMouserup(a){
	var x=0,y=0,t=0;
	for(var i=0;i<a.length;i++){
		x+=a[i][0];
		y+=a[i][1];
		t+=a[i][2];
	}
	return {pageX:x,pageY:y,t:t};
}
function getEks(){
	return window.TDC.getInfo().info;
}”", , 
.常量 tokenid, "“var navigator=[];var screen=[];var window=[];var document=[];var ie_activex='ie_activex';GetTokenid=function(){var _0x31cex51=[];_0x31cex51['push'](navigator['userAgent']);_0x31cex51['push'](navigator['language']);_0x31cex51['push'](screen['colorDepth']);if(this['screen_resolution']){var _0x31cex52=this['getScreenResolution']();if(typeof _0x31cex52!=='undefined'){_0x31cex51['push'](_0x31cex52['join']('x'))}};_0x31cex51['push'](new Date()['getTimezoneOffset']());_0x31cex51['push'](this['hasSessionStorage']());_0x31cex51['push'](this['hasLocalStorage']());_0x31cex51['push'](!!window['indexedDB']);if(document['body']){_0x31cex51['push'](typeof(document['body']['addBehavior']))}else{_0x31cex51['push'](typeof undefined)};_0x31cex51['push'](typeof(window['openDatabase']));_0x31cex51['push'](navigator['cpuClass']);_0x31cex51['push'](navigator['platform']);_0x31cex51['push'](navigator['doNotTrack']);_0x31cex51['push'](this['getPluginsString']());if(this['canvas']&&this['isCanvasSupported']()){_0x31cex51['push'](this['getCanvasFingerprint']())};_0x31cex51['push'](this['getRandom']());if(this['hasher']){return this['hasher'](_0x31cex51['join']('###'),31).toString();}else{return this['murmurhash3_32_gc'](_0x31cex51['join']('###'),31).toString();}}
murmurhash3_32_gc=function(_0x31cex38,_0x31cex53){var _0x31cex54,_0x31cex55,_0x31cex56,_0x31cex57,_0x31cex58,_0x31cex59,_0x31cex5a,_0x31cex3a;_0x31cex54=_0x31cex38['length']&3;_0x31cex55=_0x31cex38['length']-_0x31cex54;_0x31cex56=_0x31cex53;_0x31cex58=0xcc9e2d51;_0x31cex59=0x1b873593;_0x31cex3a=0;while(_0x31cex3a<_0x31cex55){_0x31cex5a=((_0x31cex38['charCodeAt'](_0x31cex3a)&0xff))|((_0x31cex38['charCodeAt'](++_0x31cex3a)&0xff)<<8)|((_0x31cex38['charCodeAt'](++_0x31cex3a)&0xff)<<16)|((_0x31cex38['charCodeAt'](++_0x31cex3a)&0xff)<<24);++_0x31cex3a;_0x31cex5a=((((_0x31cex5a&0xffff)*_0x31cex58)+((((_0x31cex5a>>>16)*_0x31cex58)&0xffff)<<16)))&0xffffffff;_0x31cex5a=(_0x31cex5a<<15)|(_0x31cex5a>>>17);_0x31cex5a=((((_0x31cex5a&0xffff)*_0x31cex59)+((((_0x31cex5a>>>16)*_0x31cex59)&0xffff)<<16)))&0xffffffff;_0x31cex56^=_0x31cex5a;_0x31cex56=(_0x31cex56<<13)|(_0x31cex56>>>19);_0x31cex57=((((_0x31cex56&0xffff)*5)+((((_0x31cex56>>>16)*5)&0xffff)<<16)))&0xffffffff;_0x31cex56=(((_0x31cex57&0xffff)+0x6b64)+((((_0x31cex57>>>16)+0xe654)&0xffff)<<16))};_0x31cex5a=0;switch(_0x31cex54){case 3:_0x31cex5a^=(_0x31cex38['charCodeAt'](_0x31cex3a+2)&0xff)<<16;case 2:_0x31cex5a^=(_0x31cex38['charCodeAt'](_0x31cex3a+1)&0xff)<<8;case 1:_0x31cex5a^=(_0x31cex38['charCodeAt'](_0x31cex3a)&0xff);_0x31cex5a=(((_0x31cex5a&0xffff)*_0x31cex58)+((((_0x31cex5a>>>16)*_0x31cex58)&0xffff)<<16))&0xffffffff;_0x31cex5a=(_0x31cex5a<<15)|(_0x31cex5a>>>17);_0x31cex5a=(((_0x31cex5a&0xffff)*_0x31cex59)+((((_0x31cex5a>>>16)*_0x31cex59)&0xffff)<<16))&0xffffffff;_0x31cex56^=_0x31cex5a};_0x31cex56^=_0x31cex38['length'];_0x31cex56^=_0x31cex56>>>16;_0x31cex56=(((_0x31cex56&0xffff)*0x85ebca6b)+((((_0x31cex56>>>16)*0x85ebca6b)&0xffff)<<16))&0xffffffff;_0x31cex56^=_0x31cex56>>>13;_0x31cex56=((((_0x31cex56&0xffff)*0xc2b2ae35)+((((_0x31cex56>>>16)*0xc2b2ae35)&0xffff)<<16)))&0xffffffff;_0x31cex56^=_0x31cex56>>>16;return _0x31cex56>>>0}
hasLocalStorage=function(){try{return!!window['localStorage']}catch(e){return true}}
hasSessionStorage=function(){try{return!!window['sessionStorage']}catch(e){return true}}
isCanvasSupported:function(){var _0x31cex5b=document['createElement']('canvas');return!!(_0x31cex5b['getContext']&&_0x31cex5b['getContext']('2d'))}
isIE=function(){if(navigator['appName']==='Microsoft Internet Explorer'){return true}else{if(navigator['appName']==='Netscape'&&/Trident/['test'](navigator['userAgent'])){return true}};return false}
getPluginsString=function(){if(this['isIE']()&&ie_activex){return this['getIEPluginsString']()}else{return this['getRegularPluginsString']()}}
getRegularPluginsString=function(){return this['map'](navigator['plugins'],function(_0x31cexb){var _0x31cex5c=this['map'](_0x31cexb,function(_0x31cex5d){return[_0x31cex5d['type'],_0x31cex5d['suffixes']]['join']('~')})['join'](',');return[_0x31cexb['name'],_0x31cexb['description'],_0x31cex5c]['join']('::')},this)['join'](';')}
getIEPluginsString:function(){if(window['ActiveXObject']){var _0x31cex5e=['ShockwaveFlash.ShockwaveFlash','AcroPDF.PDF','PDF.PdfCtrl','QuickTime.QuickTime','rmocx.RealPlayer G2 Control','rmocx.RealPlayer G2 Control.1','RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)','RealVideo.RealVideo(tm) ActiveX Control (32-bit)','RealPlayer','SWCtl.SWCtl','WMPlayer.OCX','AgControl.AgControl','Skype.Detection'];return this['map'](_0x31cex5e,function(_0x31cex5f){try{new ActiveXObject(_0x31cex5f);return _0x31cex5f}catch(e){return null}})['join'](';')}else{return''}}
getScreenResolution:function(){var _0x31cex52;if(this['screen_orientation']){_0x31cex52=(screen['height']>screen['width'])?[screen['height'],screen['width']]:[screen['width'],screen['height']]}else{_0x31cex52=[screen['height'],screen['width']]};return _0x31cex52}
getCanvasFingerprint:function(){var _0x31cex60=document['createElement']('canvas');var _0x31cex61=_0x31cex60['getContext']('2d');var _0x31cex62='aq';_0x31cex61['textBaseline']='top';_0x31cex61['font']='14px \'Arial\'';_0x31cex61['textBaseline']='alphabetic';_0x31cex61['fillStyle']='#f60';_0x31cex61['fillRect'](125,1,62,20);_0x31cex61['fillStyle']='#069';_0x31cex61['fillText'](_0x31cex62,2,15);_0x31cex61['fillStyle']='rgba(102, 204, 0, 0.7)';_0x31cex61['fillText'](_0x31cex62,4,17);return _0x31cex60['toDataURL']()}
getRandom=function(){var _0x31cex63=+new Date();return _0x31cex63}
this['map']=function(_0x31cex4b,_0x31cex4c,_0x31cex4d){var _0x31cex4e=[];if(_0x31cex4b==null){return _0x31cex4e};if(_0x31cex4a&&_0x31cex4b['map']===_0x31cex4a){return _0x31cex4b['map'](_0x31cex4c,_0x31cex4d)};this['each'](_0x31cex4b,function(_0x31cex3e,_0x31cex4f,_0x31cex50){_0x31cex4e[_0x31cex4e['length']]=_0x31cex4c['call'](_0x31cex4d,_0x31cex3e,_0x31cex4f,_0x31cex50)});return _0x31cex4e};”", , 
.常量 cdata, "“function t(n,t){var r=(65535&n)+(65535&t),u=(n>>16)+(t>>16)+(r>>16);return u<<16|65535&r}
function r(n,t){return n<<t|n>>>32-t}
function u(n,u,e,o,c,f){return t(r(t(t(u,n),t(o,f)),c),e)}
function e(n,t,r,e,o,c,f){return u(t&r|~t&e,n,t,o,c,f)}
function o(n,t,r,e,o,c,f){return u(t&e|r&~e,n,t,o,c,f)}
function c(n,t,r,e,o,c,f){return u(t^r^e,n,t,o,c,f)}
function f(n,t,r,e,o,c,f){return u(r^(t|~e),n,t,o,c,f)}
function i(n,r){n[r>>5]|=128<<r%32,n[(r+64>>>9<<4)+14]=r;var u,i,a,h,g,l=1732584193,d=-271733879,v=-1732584194,C=271733878;for(u=0;u<n.length;u+=16)i=l,a=d,h=v,g=C,l=e(l,d,v,C,n[u],7,-680876936),C=e(C,l,d,v,n[u+1],12,-389564586),v=e(v,C,l,d,n[u+2],17,606105819),d=e(d,v,C,l,n[u+3],22,-1044525330),l=e(l,d,v,C,n[u+4],7,-176418897),C=e(C,l,d,v,n[u+5],12,1200080426),v=e(v,C,l,d,n[u+6],17,-1473231341),d=e(d,v,C,l,n[u+7],22,-45705983),l=e(l,d,v,C,n[u+8],7,1770035416),C=e(C,l,d,v,n[u+9],12,-1958414417),v=e(v,C,l,d,n[u+10],17,-42063),d=e(d,v,C,l,n[u+11],22,-1990404162),l=e(l,d,v,C,n[u+12],7,1804603682),C=e(C,l,d,v,n[u+13],12,-40341101),v=e(v,C,l,d,n[u+14],17,-1502002290),d=e(d,v,C,l,n[u+15],22,1236535329),l=o(l,d,v,C,n[u+1],5,-165796510),C=o(C,l,d,v,n[u+6],9,-1069501632),v=o(v,C,l,d,n[u+11],14,643717713),d=o(d,v,C,l,n[u],20,-373897302),l=o(l,d,v,C,n[u+5],5,-701558691),C=o(C,l,d,v,n[u+10],9,38016083),v=o(v,C,l,d,n[u+15],14,-660478335),d=o(d,v,C,l,n[u+4],20,-405537848),l=o(l,d,v,C,n[u+9],5,568446438),C=o(C,l,d,v,n[u+14],9,-1019803690),v=o(v,C,l,d,n[u+3],14,-187363961),d=o(d,v,C,l,n[u+8],20,1163531501),l=o(l,d,v,C,n[u+13],5,-1444681467),C=o(C,l,d,v,n[u+2],9,-51403784),v=o(v,C,l,d,n[u+7],14,1735328473),d=o(d,v,C,l,n[u+12],20,-1926607734),l=c(l,d,v,C,n[u+5],4,-378558),C=c(C,l,d,v,n[u+8],11,-2022574463),v=c(v,C,l,d,n[u+11],16,1839030562),d=c(d,v,C,l,n[u+14],23,-35309556),l=c(l,d,v,C,n[u+1],4,-1530992060),C=c(C,l,d,v,n[u+4],11,1272893353),v=c(v,C,l,d,n[u+7],16,-155497632),d=c(d,v,C,l,n[u+10],23,-1094730640),l=c(l,d,v,C,n[u+13],4,681279174),C=c(C,l,d,v,n[u],11,-358537222),v=c(v,C,l,d,n[u+3],16,-722521979),d=c(d,v,C,l,n[u+6],23,76029189),l=c(l,d,v,C,n[u+9],4,-640364487),C=c(C,l,d,v,n[u+12],11,-421815835),v=c(v,C,l,d,n[u+15],16,530742520),d=c(d,v,C,l,n[u+2],23,-995338651),l=f(l,d,v,C,n[u],6,-198630844),C=f(C,l,d,v,n[u+7],10,1126891415),v=f(v,C,l,d,n[u+14],15,-1416354905),d=f(d,v,C,l,n[u+5],21,-57434055),l=f(l,d,v,C,n[u+12],6,1700485571),C=f(C,l,d,v,n[u+3],10,-1894986606),v=f(v,C,l,d,n[u+10],15,-1051523),d=f(d,v,C,l,n[u+1],21,-2054922799),l=f(l,d,v,C,n[u+8],6,1873313359),C=f(C,l,d,v,n[u+15],10,-30611744),v=f(v,C,l,d,n[u+6],15,-1560198380),d=f(d,v,C,l,n[u+13],21,1309151649),l=f(l,d,v,C,n[u+4],6,-145523070),C=f(C,l,d,v,n[u+11],10,-1120210379),v=f(v,C,l,d,n[u+2],15,718787259),d=f(d,v,C,l,n[u+9],21,-343485551),l=t(l,i),d=t(d,a),v=t(v,h),C=t(C,g);return[l,d,v,C]}
function a(n){var t,r="";for(t=0;t<32*n.length;t+=8)r+=String.fromCharCode(n[t>>5]>>>t%32&255);return r}
function h(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;for(t=0;t<8*n.length;t+=8)r[t>>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}
function g(n){return a(i(h(n),8*n.length))}
function l(n,t){var r,u,e=h(n),o=[],c=[];for(o[15]=c[15]=void 0,e.length>16&&(e=i(e,8*n.length)),r=0;r<16;r+=1)o[r]=909522486^e[r],c[r]=1549556828^e[r];return u=i(o.concat(h(t)),512+8*t.length),a(i(c.concat(u),640))}
function d(n){var t,r,u="0123456789abcdef",e="";for(r=0;r<n.length;r+=1)t=n.charCodeAt(r),e+=u.charAt(t>>>4&15)+u.charAt(15&t);return e}
function v(n){return unescape(encodeURIComponent(n))}
function C(n){return g(v(n))}
function A(n){return d(C(n))}
function m(n,t){return l(v(n),v(t))}
function s(n,t){return d(m(n,t))}
function md5(n,t,r){return t?r?m(t,n):s(t,n):r?C(n):A(n)}
function cdata(y){if("string"==typeof y&&""!=y){var r=0;y=y.replace(/&quot;/g,'"'),y=y.replace(/&apos;/g,"'");var n;try{n=eval('('+y+')')}catch(e){};if("object"==typeof n&&"string"==typeof n.randstr&&("string"==typeof n.M||"number"==typeof n.M)&&"string"==typeof n.ans){n.ans=n.ans.toLowerCase(),n.M=parseInt(n.M);for(var s=0;s<n.M&&s<1e3;s++){var i=n.randstr+s,c=md5(i);if(n.ans==c.toLowerCase()){r=s;return r;}}}}};
function rnd() {
return Math.floor(1e6 * Math.random())
};
function random() {
return + new Date();
};”", , 
.常量 , , , 
.常量 tk, "“function tk(str) {
    var hash = 5381;
    for (var i = 0, len = str.length; i < len; ++i)
        hash += (hash << 5) + str.charAt(i).charCodeAt();
    return hash & 2147483647
}”", , 
.常量 , , , 
.常量 , , , 
.常量 Logining, "0", 公开, 正在登录
.常量 LoginCaptcha, "1", 公开, 需要验证
.常量 LoginSuccess, "2", 公开, 登录成功
.常量 LoginFail, "3", 公开, 登录失败
.常量 , , , 
.常量 , , , 
.常量 常量1, "“”", , 
.常量 JS格式化, "“function ysjs(str){return jsmin("",str,2)}
String.prototype.has=function(c){return this.indexOf(c)>-1;};function jsmin(comment,input,level){if(input===undefined){input=comment;comment='';level=2;}else if(level===undefined||level<1||level>3){level=2;}if(comment.length>0){comment+='\n';}var a='',b='',EOF=-1,LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',DIGITS='0123456789',ALNUM=LETTERS+DIGITS+'_$\\',theLookahead=EOF;function isAlphanum(c){return c!=EOF&&(ALNUM.has(c)||c.charCodeAt(0)>126);}function get(){var c=theLookahead;if(get.i==get.l){return EOF;}theLookahead=EOF;if(c==EOF){c=input.charAt(get.i);++get.i;}if(c>=' '||c=='\n'){return c;}if(c=='\r'){return'\n';}return' ';}get.i=0;get.l=input.length;function peek(){theLookahead=get();return theLookahead;}function next(){var c=get();if(c=='/'){switch(peek()){case'/':for(;;){c=get();if(c<='\n'){return c;}}break;case'*':get();for(;;){switch(get()){case'*':if(peek()=='/'){get();return' ';}break;case EOF:throw'Error: Unterminated comment.';}}break;default:return c;}}return c;}function action(d){var r=[];if(d==1){r.push(a);}if(d<3){a=b;if(a=='\''||a=='"'){for(;;){r.push(a);a=get();if(a==b){break;}if(a<='\n'){throw'Error: unterminated string literal: '+a;}if(a=='\\'){r.push(a);a=get();}}}}b=next();if(b=='/'&&'(,=:[!&|'.has(a)){r.push(a);r.push(b);for(;;){a=get();if(a=='/'){break;}else if(a=='\\'){r.push(a);a=get();}else if(a<='\n'){throw'Error: unterminated Regular Expression literal';}r.push(a);}b=next();}return r.join('');}function m(){var r=[];a='\n';r.push(action(3));while(a!=EOF){switch(a){case' ':if(isAlphanum(b)){r.push(action(1));}else{r.push(action(2));}break;case'\n':switch(b){case'{':case'[':case'(':case'+':case'-':r.push(action(1));break;case' ':r.push(action(3));break;default:if(isAlphanum(b)){r.push(action(1));}else{if(level==1&&b!='\n'){r.push(action(1));}else{r.push(action(2));}}}break;default:switch(b){case' ':if(isAlphanum(a)){r.push(action(1));break;}r.push(action(3));break;case'\n':if(level==1&&a!='\n'){r.push(action(1));}else{switch(a){case'}':case']':case')':case'+':case'-':case'"':case'\'':if(level==3){r.push(action(3));}else{r.push(action(1));}break;default:if(isAlphanum(a)){r.push(action(1));}else{r.push(action(3));}}}break;default:r.push(action(1));break;}}}return r.join('');}jsmin.oldSize=input.length;ret=m(input);jsmin.newSize=ret.length;return comment+ret;}

function js_beautify(js_source_text,options){var input,output,token_text,last_type,last_text,last_last_text,last_word,flags,flag_store,indent_string;var whitespace,wordchar,punct,parser_pos,line_starters,digits;var prefix,token_type,do_block_just_closed;var wanted_newline,just_added_newline,n_newlines;var preindent_string='';options=options?options:{};var opt_brace_style;if(options.space_after_anon_function!==undefined&&options.jslint_happy===undefined){options.jslint_happy=options.space_after_anon_function}if(options.braces_on_own_line!==undefined){opt_brace_style=options.braces_on_own_line?"expand":"collapse"}opt_brace_style=options.brace_style?options.brace_style:(opt_brace_style?opt_brace_style:"collapse");var opt_indent_size=options.indent_size?options.indent_size:4,opt_indent_char=options.indent_char?options.indent_char:' ',opt_preserve_newlines=typeof options.preserve_newlines==='undefined'?true:options.preserve_newlines,opt_break_chained_methods=typeof options.break_chained_methods==='undefined'?false:options.break_chained_methods,opt_max_preserve_newlines=typeof options.max_preserve_newlines==='undefined'?false:options.max_preserve_newlines,opt_jslint_happy=options.jslint_happy==='undefined'?false:options.jslint_happy,opt_keep_array_indentation=typeof options.keep_array_indentation==='undefined'?false:options.keep_array_indentation,opt_space_before_conditional=typeof options.space_before_conditional==='undefined'?true:options.space_before_conditional,opt_unescape_strings=typeof options.unescape_strings==='undefined'?false:options.unescape_strings;just_added_newline=false;var input_length=js_source_text.length;function trim_output(eat_newlines){eat_newlines=typeof eat_newlines==='undefined'?false:eat_newlines;while(output.length&&(output[output.length-1]===' '||output[output.length-1]===indent_string||output[output.length-1]===preindent_string||(eat_newlines&&(output[output.length-1]==='\n'||output[output.length-1]==='\r')))){output.pop()}}function trim(s){return s.replace(/^\s\s*|\s\s*$/,'')}function split_newlines(s){s=s.replace(/\x0d/g,'');var out=[],idx=s.indexOf("\n");while(idx!==-1){out.push(s.substring(0,idx));s=s.substring(idx+1);idx=s.indexOf("\n")}if(s.length){out.push(s)}return out}function force_newline(){var old_keep_array_indentation=opt_keep_array_indentation;opt_keep_array_indentation=false;print_newline();opt_keep_array_indentation=old_keep_array_indentation}function print_newline(ignore_repeated,reset_statement_flags){flags.eat_next_space=false;if(opt_keep_array_indentation&&is_array(flags.mode)){return}ignore_repeated=typeof ignore_repeated==='undefined'?true:ignore_repeated;reset_statement_flags=typeof reset_statement_flags==='undefined'?true:reset_statement_flags;if(reset_statement_flags){flags.if_line=false;flags.chain_extra_indentation=0}trim_output();if(!output.length){return}if(output[output.length-1]!=="\n"||!ignore_repeated){just_added_newline=true;output.push("\n")}if(preindent_string){output.push(preindent_string)}for(var i=0;i<flags.indentation_level+flags.chain_extra_indentation;i+=1){output.push(indent_string)}if(flags.var_line&&flags.var_line_reindented){output.push(indent_string)}}function print_single_space(){if(last_type==='TK_COMMENT'){return print_newline()}if(flags.eat_next_space){flags.eat_next_space=false;return}var last_output=' ';if(output.length){last_output=output[output.length-1]}if(last_output!==' '&&last_output!=='\n'&&last_output!==indent_string){output.push(' ')}}function print_token(){just_added_newline=false;flags.eat_next_space=false;output.push(token_text)}function indent(){flags.indentation_level+=1}function remove_indent(){if(output.length&&output[output.length-1]===indent_string){output.pop()}}function set_mode(mode){if(flags){flag_store.push(flags)}flags={previous_mode:flags?flags.mode:'BLOCK',mode:mode,var_line:false,var_line_tainted:false,var_line_reindented:false,in_html_comment:false,if_line:false,chain_extra_indentation:0,in_case_statement:false,in_case:false,case_body:false,eat_next_space:false,indentation_level:(flags?flags.indentation_level+((flags.var_line&&flags.var_line_reindented)?1:0):0),ternary_depth:0}}function is_array(mode){return mode==='[EXPRESSION]'||mode==='[INDENTED-EXPRESSION]'}function is_expression(mode){return in_array(mode,['[EXPRESSION]','(EXPRESSION)','(FOR-EXPRESSION)','(COND-EXPRESSION)'])}function restore_mode(){do_block_just_closed=flags.mode==='DO_BLOCK';if(flag_store.length>0){var mode=flags.mode;flags=flag_store.pop();flags.previous_mode=mode}}function all_lines_start_with(lines,c){for(var i=0;i<lines.length;i++){var line=trim(lines[i]);if(line.charAt(0)!==c){return false}}return true}function is_special_word(word){return in_array(word,['case','return','do','if','throw','else'])}function in_array(what,arr){for(var i=0;i<arr.length;i+=1){if(arr[i]===what){return true}}return false}function look_up(exclude){var local_pos=parser_pos;var c=input.charAt(local_pos);while(in_array(c,whitespace)&&c!==exclude){local_pos++;if(local_pos>=input_length){return 0}c=input.charAt(local_pos)}return c}function get_next_token(){var i;var resulting_string;n_newlines=0;if(parser_pos>=input_length){return['','TK_EOF']}wanted_newline=false;var c=input.charAt(parser_pos);parser_pos+=1;var keep_whitespace=opt_keep_array_indentation&&is_array(flags.mode);if(keep_whitespace){var whitespace_count=0;while(in_array(c,whitespace)){if(c==="\n"){trim_output();output.push("\n");just_added_newline=true;whitespace_count=0}else{if(c==='\t'){whitespace_count+=4}else if(c==='\r'){}else{whitespace_count+=1}}if(parser_pos>=input_length){return['','TK_EOF']}c=input.charAt(parser_pos);parser_pos+=1}if(just_added_newline){for(i=0;i<whitespace_count;i++){output.push(' ')}}}else{while(in_array(c,whitespace)){if(c==="\n"){n_newlines+=((opt_max_preserve_newlines)?(n_newlines<=opt_max_preserve_newlines)?1:0:1)}if(parser_pos>=input_length){return['','TK_EOF']}c=input.charAt(parser_pos);parser_pos+=1}if(opt_preserve_newlines){if(n_newlines>1){for(i=0;i<n_newlines;i+=1){print_newline(i===0);just_added_newline=true}}}wanted_newline=n_newlines>0}if(in_array(c,wordchar)){if(parser_pos<input_length){while(in_array(input.charAt(parser_pos),wordchar)){c+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos===input_length){break}}}if(parser_pos!==input_length&&c.match(/^[0-9]+[Ee]$/)&&(input.charAt(parser_pos)==='-'||input.charAt(parser_pos)==='+')){var sign=input.charAt(parser_pos);parser_pos+=1;var t=get_next_token();c+=sign+t[0];return[c,'TK_WORD']}if(c==='in'){return[c,'TK_OPERATOR']}if(wanted_newline&&last_type!=='TK_OPERATOR'&&last_type!=='TK_EQUALS'&&!flags.if_line&&(opt_preserve_newlines||last_text!=='var')){print_newline()}return[c,'TK_WORD']}if(c==='('||c==='['){return[c,'TK_START_EXPR']}if(c===')'||c===']'){return[c,'TK_END_EXPR']}if(c==='{'){return[c,'TK_START_BLOCK']}if(c==='}'){return[c,'TK_END_BLOCK']}if(c===';'){return[c,'TK_SEMICOLON']}if(c==='/'){var comment='';var inline_comment=true;if(input.charAt(parser_pos)==='*'){parser_pos+=1;if(parser_pos<input_length){while(parser_pos<input_length&&!(input.charAt(parser_pos)==='*'&&input.charAt(parser_pos+1)&&input.charAt(parser_pos+1)==='/')){c=input.charAt(parser_pos);comment+=c;if(c==="\n"||c==="\r"){inline_comment=false}parser_pos+=1;if(parser_pos>=input_length){break}}}parser_pos+=2;if(inline_comment&&n_newlines===0){return['/*'+comment+'*/','TK_INLINE_COMMENT']}else{return['/*'+comment+'*/','TK_BLOCK_COMMENT']}}if(input.charAt(parser_pos)==='/'){comment=c;while(input.charAt(parser_pos)!=='\r'&&input.charAt(parser_pos)!=='\n'){comment+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos>=input_length){break}}if(wanted_newline){print_newline()}return[comment,'TK_COMMENT']}}if(c==="'"||c==='"'||(c==='/'&&((last_type==='TK_WORD'&&is_special_word(last_text))||(last_text===')'&&in_array(flags.previous_mode,['(COND-EXPRESSION)','(FOR-EXPRESSION)']))||(last_type==='TK_COMMA'||last_type==='TK_COMMENT'||last_type==='TK_START_EXPR'||last_type==='TK_START_BLOCK'||last_type==='TK_END_BLOCK'||last_type==='TK_OPERATOR'||last_type==='TK_EQUALS'||last_type==='TK_EOF'||last_type==='TK_SEMICOLON')))){var sep=c;var esc=false;var esc1=0;var esc2=0;resulting_string=c;if(parser_pos<input_length){if(sep==='/'){var in_char_class=false;while(esc||in_char_class||input.charAt(parser_pos)!==sep){resulting_string+=input.charAt(parser_pos);if(!esc){esc=input.charAt(parser_pos)==='\\';if(input.charAt(parser_pos)==='['){in_char_class=true}else if(input.charAt(parser_pos)===']'){in_char_class=false}}else{esc=false}parser_pos+=1;if(parser_pos>=input_length){return[resulting_string,'TK_STRING']}}}else{while(esc||input.charAt(parser_pos)!==sep){resulting_string+=input.charAt(parser_pos);if(esc1&&esc1>=esc2){esc1=parseInt(resulting_string.substr(-esc2),16);if(esc1&&esc1>=0x20&&esc1<=0x7e){esc1=String.fromCharCode(esc1);resulting_string=resulting_string.substr(0,resulting_string.length-esc2-2)+(((esc1===sep)||(esc1==='\\'))?'\\':'')+esc1}esc1=0}if(esc1){esc1++}else if(!esc){esc=input.charAt(parser_pos)==='\\'}else{esc=false;if(opt_unescape_strings){if(input.charAt(parser_pos)==='x'){esc1++;esc2=2}else if(input.charAt(parser_pos)==='u'){esc1++;esc2=4}}}parser_pos+=1;if(parser_pos>=input_length){return[resulting_string,'TK_STRING']}}}}parser_pos+=1;resulting_string+=sep;if(sep==='/'){while(parser_pos<input_length&&in_array(input.charAt(parser_pos),wordchar)){resulting_string+=input.charAt(parser_pos);parser_pos+=1}}return[resulting_string,'TK_STRING']}if(c==='#'){if(output.length===0&&input.charAt(parser_pos)==='!'){resulting_string=c;while(parser_pos<input_length&&c!=='\n'){c=input.charAt(parser_pos);resulting_string+=c;parser_pos+=1}output.push(trim(resulting_string)+'\n');print_newline();return get_next_token()}var sharp='#';if(parser_pos<input_length&&in_array(input.charAt(parser_pos),digits)){do{c=input.charAt(parser_pos);sharp+=c;parser_pos+=1}while(parser_pos<input_length&&c!=='#'&&c!=='=');if(c==='#'){}else if(input.charAt(parser_pos)==='['&&input.charAt(parser_pos+1)===']'){sharp+='[]';parser_pos+=2}else if(input.charAt(parser_pos)==='{'&&input.charAt(parser_pos+1)==='}'){sharp+='{}';parser_pos+=2}return[sharp,'TK_WORD']}}if(c==='<'&&input.substring(parser_pos-1,parser_pos+3)==='<!--'){parser_pos+=3;c='<!--';while(input.charAt(parser_pos)!=='\n'&&parser_pos<input_length){c+=input.charAt(parser_pos);parser_pos++}flags.in_html_comment=true;return[c,'TK_COMMENT']}if(c==='-'&&flags.in_html_comment&&input.substring(parser_pos-1,parser_pos+2)==='-->'){flags.in_html_comment=false;parser_pos+=2;if(wanted_newline){print_newline()}return['-->','TK_COMMENT']}if(c==='.'){return[c,'TK_DOT']}if(in_array(c,punct)){while(parser_pos<input_length&&in_array(c+input.charAt(parser_pos),punct)){c+=input.charAt(parser_pos);parser_pos+=1;if(parser_pos>=input_length){break}}if(c===','){return[c,'TK_COMMA']}else if(c==='='){return[c,'TK_EQUALS']}else{return[c,'TK_OPERATOR']}}return[c,'TK_UNKNOWN']}indent_string='';while(opt_indent_size>0){indent_string+=opt_indent_char;opt_indent_size-=1}while(js_source_text&&(js_source_text.charAt(0)===' '||js_source_text.charAt(0)==='\t')){preindent_string+=js_source_text.charAt(0);js_source_text=js_source_text.substring(1)}input=js_source_text;last_word='';last_type='TK_START_EXPR';last_text='';last_last_text='';output=[];do_block_just_closed=false;whitespace="\n\r\t ".split('');wordchar='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$'.split('');digits='0123456789'.split('');punct='+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! !! , : ? ^ ^= |= ::';punct+=' <%= <% %> <?= <? ?>';punct=punct.split(' ');line_starters='continue,try,throw,return,var,if,switch,case,default,for,while,break,function'.split(',');flag_store=[];set_mode('BLOCK');parser_pos=0;while(true){var t=get_next_token();token_text=t[0];token_type=t[1];if(token_type==='TK_EOF'){break}switch(token_type){case'TK_START_EXPR':if(token_text==='['){if(last_type==='TK_WORD'||last_text===')'){if(in_array(last_text,line_starters)){print_single_space()}set_mode('(EXPRESSION)');print_token();break}if(flags.mode==='[EXPRESSION]'||flags.mode==='[INDENTED-EXPRESSION]'){if(last_last_text===']'&&last_text===','){if(flags.mode==='[EXPRESSION]'){flags.mode='[INDENTED-EXPRESSION]';if(!opt_keep_array_indentation){indent()}}set_mode('[EXPRESSION]');if(!opt_keep_array_indentation){print_newline()}}else if(last_text==='['){if(flags.mode==='[EXPRESSION]'){flags.mode='[INDENTED-EXPRESSION]';if(!opt_keep_array_indentation){indent()}}set_mode('[EXPRESSION]');if(!opt_keep_array_indentation){print_newline()}}else{set_mode('[EXPRESSION]')}}else{set_mode('[EXPRESSION]')}}else{if(last_word==='for'){set_mode('(FOR-EXPRESSION)')}else if(in_array(last_word,['if','while'])){set_mode('(COND-EXPRESSION)')}else{set_mode('(EXPRESSION)')}}if(last_text===';'||last_type==='TK_START_BLOCK'){print_newline()}else if(last_type==='TK_END_EXPR'||last_type==='TK_START_EXPR'||last_type==='TK_END_BLOCK'||last_text==='.'){if(wanted_newline){print_newline()}}else if(last_type!=='TK_WORD'&&last_type!=='TK_OPERATOR'){print_single_space()}else if(last_word==='function'||last_word==='typeof'){if(opt_jslint_happy){print_single_space()}}else if(in_array(last_text,line_starters)||last_text==='catch'){if(opt_space_before_conditional){print_single_space()}}print_token();break;case'TK_DOT':if(is_special_word(last_text)){print_single_space()}else if(last_text===')'){if(opt_break_chained_methods||wanted_newline){flags.chain_extra_indentation=1;print_newline(true,false)}}print_token();break;case'TK_END_EXPR':if(token_text===']'){if(opt_keep_array_indentation){if(last_text==='}'){remove_indent();print_token();restore_mode();break}}else{if(flags.mode==='[INDENTED-EXPRESSION]'){if(last_text===']'){restore_mode();print_newline();print_token();break}}}}restore_mode();print_token();break;case'TK_START_BLOCK':if(last_word==='do'){set_mode('DO_BLOCK')}else{set_mode('BLOCK')}if(opt_brace_style==="expand"||opt_brace_style==="expand-strict"){var empty_braces=false;if(opt_brace_style==="expand-strict"){empty_braces=(look_up()==='}');if(!empty_braces){print_newline(true)}}else{if(last_type!=='TK_OPERATOR'){if(last_text==='='||(is_special_word(last_text)&&last_text!=='else')){print_single_space()}else{print_newline(true)}}}print_token();if(!empty_braces){indent()}}else{if(last_type!=='TK_OPERATOR'&&last_type!=='TK_START_EXPR'){if(last_type==='TK_START_BLOCK'){print_newline()}else{print_single_space()}}else{if(is_array(flags.previous_mode)&&last_text===','){if(last_last_text==='}'){print_single_space()}else{print_newline()}}}indent();print_token()}break;case'TK_END_BLOCK':restore_mode();if(opt_brace_style==="expand"||opt_brace_style==="expand-strict"){if(last_text!=='{'){print_newline()}print_token()}else{if(last_type==='TK_START_BLOCK'){if(just_added_newline){remove_indent()}else{trim_output()}}else{if(is_array(flags.mode)&&opt_keep_array_indentation){opt_keep_array_indentation=false;print_newline();opt_keep_array_indentation=true}else{print_newline()}}print_token()}break;case'TK_WORD':if(do_block_just_closed){print_single_space();print_token();print_single_space();do_block_just_closed=false;break}prefix='NONE';if(token_text==='function'){if(flags.var_line&&last_type!=='TK_EQUALS'){flags.var_line_reindented=true}if((just_added_newline||last_text===';')&&last_text!=='{'&&last_type!=='TK_BLOCK_COMMENT'&&last_type!=='TK_COMMENT'){n_newlines=just_added_newline?n_newlines:0;if(!opt_preserve_newlines){n_newlines=1}for(var i=0;i<2-n_newlines;i++){print_newline(false)}}if(last_type==='TK_WORD'){if(last_text==='get'||last_text==='set'||last_text==='new'||last_text==='return'){print_single_space()}else{print_newline()}}else if(last_type==='TK_OPERATOR'||last_text==='='){print_single_space()}else if(is_expression(flags.mode)){}else{print_newline()}print_token();last_word=token_text;break}if(token_text==='case'||(token_text==='default'&&flags.in_case_statement)){print_newline();if(flags.case_body){flags.indentation_level--;flags.case_body=false;remove_indent()}print_token();flags.in_case=true;flags.in_case_statement=true;break}if(last_type==='TK_END_BLOCK'){if(!in_array(token_text.toLowerCase(),['else','catch','finally'])){prefix='NEWLINE'}else{if(opt_brace_style==="expand"||opt_brace_style==="end-expand"||opt_brace_style==="expand-strict"){prefix='NEWLINE'}else{prefix='SPACE';print_single_space()}}}else if(last_type==='TK_SEMICOLON'&&(flags.mode==='BLOCK'||flags.mode==='DO_BLOCK')){prefix='NEWLINE'}else if(last_type==='TK_SEMICOLON'&&is_expression(flags.mode)){prefix='SPACE'}else if(last_type==='TK_STRING'){prefix='NEWLINE'}else if(last_type==='TK_WORD'){if(last_text==='else'){trim_output(true)}prefix='SPACE'}else if(last_type==='TK_START_BLOCK'){prefix='NEWLINE'}else if(last_type==='TK_END_EXPR'){print_single_space();prefix='NEWLINE'}if(in_array(token_text,line_starters)&&last_text!==')'){if(last_text==='else'){prefix='SPACE'}else{prefix='NEWLINE'}}if(flags.if_line&&last_type==='TK_END_EXPR'){flags.if_line=false}if(in_array(token_text.toLowerCase(),['else','catch','finally'])){if(last_type!=='TK_END_BLOCK'||opt_brace_style==="expand"||opt_brace_style==="end-expand"||opt_brace_style==="expand-strict"){print_newline()}else{trim_output(true);print_single_space()}}else if(prefix==='NEWLINE'){if(is_special_word(last_text)){print_single_space()}else if(last_type!=='TK_END_EXPR'){if((last_type!=='TK_START_EXPR'||token_text!=='var')&&last_text!==':'){if(token_text==='if'&&last_word==='else'&&last_text!=='{'){print_single_space()}else{flags.var_line=false;flags.var_line_reindented=false;print_newline()}}}else if(in_array(token_text,line_starters)&&last_text!==')'){flags.var_line=false;flags.var_line_reindented=false;print_newline()}}else if(is_array(flags.mode)&&last_text===','&&last_last_text==='}'){print_newline()}else if(prefix==='SPACE'){print_single_space()}print_token();last_word=token_text;if(token_text==='var'){flags.var_line=true;flags.var_line_reindented=false;flags.var_line_tainted=false}if(token_text==='if'){flags.if_line=true}if(token_text==='else'){flags.if_line=false}break;case'TK_SEMICOLON':print_token();flags.var_line=false;flags.var_line_reindented=false;if(flags.mode==='OBJECT'){flags.mode='BLOCK'}break;case'TK_STRING':if(last_type==='TK_END_EXPR'&&in_array(flags.previous_mode,['(COND-EXPRESSION)','(FOR-EXPRESSION)'])){print_single_space()}else if(last_type==='TK_COMMENT'||last_type==='TK_STRING'||last_type==='TK_START_BLOCK'||last_type==='TK_END_BLOCK'||last_type==='TK_SEMICOLON'){print_newline()}else if(last_type==='TK_WORD'){print_single_space()}else{if(opt_preserve_newlines&&wanted_newline&&flags.mode!=='OBJECT'){print_newline();output.push(indent_string)}}print_token();break;case'TK_EQUALS':if(flags.var_line){flags.var_line_tainted=true}print_single_space();print_token();print_single_space();break;case'TK_COMMA':if(flags.var_line){if(is_expression(flags.mode)||last_type==='TK_END_BLOCK'){flags.var_line_tainted=false}if(flags.var_line_tainted){print_token();flags.var_line_reindented=true;flags.var_line_tainted=false;print_newline();break}else{flags.var_line_tainted=false}print_token();print_single_space();break}if(last_type==='TK_COMMENT'){print_newline()}if(last_type==='TK_END_BLOCK'&&flags.mode!=="(EXPRESSION)"){print_token();if(flags.mode==='OBJECT'&&last_text==='}'){print_newline()}else{print_single_space()}}else{if(flags.mode==='OBJECT'){print_token();print_newline()}else{print_token();print_single_space()}}break;case'TK_OPERATOR':var space_before=true;var space_after=true;if(is_special_word(last_text)){print_single_space();print_token();break}if(token_text==='*'&&last_type==='TK_DOT'&&!last_last_text.match(/^\d+$/)){print_token();break}if(token_text===':'&&flags.in_case){flags.case_body=true;indent();print_token();print_newline();flags.in_case=false;break}if(token_text==='::'){print_token();break}if(in_array(token_text,['--','++','!'])||(in_array(token_text,['-','+'])&&(in_array(last_type,['TK_START_BLOCK','TK_START_EXPR','TK_EQUALS','TK_OPERATOR'])||in_array(last_text,line_starters)||last_text==','))){space_before=false;space_after=false;if(last_text===';'&&is_expression(flags.mode)){space_before=true}if(last_type==='TK_WORD'&&in_array(last_text,line_starters)){space_before=true}if(flags.mode==='BLOCK'&&(last_text==='{'||last_text===';')){print_newline()}}else if(token_text===':'){if(flags.ternary_depth===0){if(flags.mode==='BLOCK'){flags.mode='OBJECT'}space_before=false}else{flags.ternary_depth-=1}}else if(token_text==='?'){flags.ternary_depth+=1}if(space_before){print_single_space()}print_token();if(space_after){print_single_space()}break;case'TK_BLOCK_COMMENT':var lines=split_newlines(token_text);var j;if(all_lines_start_with(lines.slice(1),'*')){print_newline();output.push(lines[0]);for(j=1;j<lines.length;j++){print_newline();output.push(' ');output.push(trim(lines[j]))}}else{if(lines.length>1){print_newline()}else{if(last_type==='TK_END_BLOCK'){print_newline()}else{print_single_space()}}for(j=0;j<lines.length;j++){output.push(lines[j]);output.push("\n")}}if(look_up('\n')!=='\n'){print_newline()}break;case'TK_INLINE_COMMENT':print_single_space();print_token();if(is_expression(flags.mode)){print_single_space()}else{force_newline()}break;case'TK_COMMENT':if(last_text===','&&!wanted_newline){trim_output(true)}if(last_type!=='TK_COMMENT'){if(wanted_newline){print_newline()}else{print_single_space()}}print_token();print_newline();break;case'TK_UNKNOWN':print_token();break}last_last_text=last_text;last_type=token_type;last_text=token_text}var sweet_code=preindent_string+output.join('').replace(/[\r\n ]+$/,'');return sweet_code}if(typeof exports!=="undefined"){exports.js_beautify=js_beautify}”", 隐藏, ysjs(code)、js_beautify(code)
.常量 SW_SHOWDEFAULT, "10", 隐藏, 按默认状态显示
.常量 SEE_MASK_FLAG_DDEWAIT, "256", 隐藏, 0x00000100
.常量 json2, "“//  json2.js
//  2016-10-28
if (typeof JSON !== "object") {
    JSON = {};
}

(function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        return n < 10
            ? "0" + n
            : n;
    }

    function this_value() {
        return this.valueOf();
    }

    if (typeof Date.prototype.toJSON !== "function") {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + "-" +
                        f(this.getUTCMonth() + 1) + "-" +
                        f(this.getUTCDate()) + "T" +
                        f(this.getUTCHours()) + ":" +
                        f(this.getUTCMinutes()) + ":" +
                        f(this.getUTCSeconds()) + "Z"
                : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }

    var gap;
    var indent;
    var meta;
    var rep;


    function quote(string) {

        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string)
            ? "\"" + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === "string"
                    ? c
                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\""
            : "\"" + string + "\"";
    }


    function str(key, holder) {
        var i;
        var k;
        var v;
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];

        if (value && typeof value === "object" &&
                typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }

        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }

       switch (typeof value) {
        case "string":
            return quote(value);

        case "number":
            return isFinite(value)
                ? String(value)
                : "null";
        case "boolean":
        case "null":
            return String(value);
        case "object":
            if (!value) {
                return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }
                v = partial.length === 0
                    ? "[]"
                    : gap
                        ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                        : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }
            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            }
            v = partial.length === 0
                ? "{}"
                : gap
                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                    : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }
    if (typeof JSON.stringify !== "function") {
        meta = {    // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }
            } else if (typeof space === "string") {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" &&
                    (typeof replacer !== "object" ||
                    typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }
            return str("", {"": value});
        };
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" +
                            ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (
                rx_one.test(
                    text
                        .replace(rx_two, "@")
                        .replace(rx_three, "]")
                        .replace(rx_four, "")
                )
            ) {
                j = eval("(" + text + ")");
                return (typeof reviver === "function")
                    ? walk({"": j}, "")
                    : j;
            }
            throw new SyntaxError("JSON.parse");
        };
    }
}());”", 隐藏, JSON官方JavaScript脚本
.常量 U码, "“function to16on(str){
    var a = [],i = 0;
    for (; 
    i < str.length ;
    ) a[i] = ("00" + str.charCodeAt(i ++).toString(16)).slice(-4);
    return "\\u" + a.join("\\u");
}
function to16un(str) {
    return unescape(str.replace(/\\/g, "%"));
}
function to10on(str){
    var a = [], i = 0;
    for (; 
    i < str.length ;
    ) a[i] = str.charCodeAt(i ++);
    return "&#" + a.join(";&#") + ";";
}
function to10un(str){
    return str.replace(/&#(x)?([^&]{1,5});?/g, function (a, b, c) {
        return String.fromCharCode(parseInt(c,b?16:10));
    });
}”", 隐藏, U码转换，分别包含to16和to10
.常量 ProtoUint, "0", 隐藏, 
.常量 ProtoString, "2", 隐藏, 
.常量 ProtoBytes, "2", 隐藏, 
.常量 ProtoObject, "2", 隐藏, 
.常量 ProtoFixed64, "1", 隐藏, 
.常量 ProtoFixed32, "5", 隐藏, 
.常量 ERROR_WINHTTP_TIMEOUT, "12002", 隐藏, 连接服务器超时
.常量 ERROR_WINHTTP_CANNOT_CONNECT, "12029", 隐藏, 连接服务器失败
.常量 ERROR_WINHTTP_CONNECTION_ERROR, "12030", 隐藏, 解析失败
.常量 WINHTTP_ADDREQ_FLAG_ADD, "536870912", 隐藏, 添加一个协议头，如果协议头已存在则被新值替换，与WINHTTP_ADDREQ_FLAG_REPLACE标志一起使用。
.常量 WINHTTP_ADDREQ_FLAG_ADD_IF_NEW, "268435456", 隐藏, 只有不存在的时候才添加
.常量 WINHTTP_ADDREQ_FLAG_COALESCE, "1073741824", 隐藏, 合并相同的名称
.常量 WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA, "1073741824", 隐藏, 合并相同的名称使用逗号
.常量 WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON, "16777216", 隐藏, 合并相投的名称使用分号
.常量 WINHTTP_ADDREQ_FLAG_REPLACE, "2147483648", 隐藏, 替换或者删除一个协议头，如果值为空则删除，否则被替换。
.常量 WINHTTP_OPTION_CALLBACK, "1", 隐藏, 回调函数指针
.常量 WINHTTP_OPTION_RESOLVE_TIMEOUT, "2", 隐藏, 解析DNS超时
.常量 WINHTTP_OPTION_CONNECT_TIMEOUT, "3", 隐藏, 连接超时
.常量 WINHTTP_OPTION_CONNECT_RETRIES, "4", 隐藏, 连接次数
.常量 WINHTTP_OPTION_SEND_TIMEOUT, "5", 隐藏, 发送超时
.常量 WINHTTP_OPTION_RECEIVE_TIMEOUT, "6", 隐藏, 接收超时
.常量 WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT, "7", 隐藏, 接受数据头的超时值
.常量 WINHTTP_OPTION_HANDLE_TYPE, "9", 隐藏, 设置句柄属性类型
.常量 WINHTTP_OPTION_READ_BUFFER_SIZE, "12", 隐藏, 接受缓冲长度
.常量 WINHTTP_OPTION_WRITE_BUFFER_SIZE, "13", 隐藏, 发送缓冲长度
.常量 WINHTTP_OPTION_PARENT_HANDLE, "21", 隐藏, #define WINHTTP_OPTION_PARENT_HANDLE                21
.常量 WINHTTP_OPTION_EXTENDED_ERROR, "24", 隐藏, #define WINHTTP_OPTION_EXTENDED_ERROR                24
.常量 WINHTTP_OPTION_SECURITY_FLAGS, "31", 隐藏, 忽略证书错误 #define WINHTTP_OPTION_SECURITY_FLAGS                31
.常量 WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT, "32", 隐藏, #define WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT                32
.常量 WINHTTP_OPTION_URL, "34", 隐藏, #define WINHTTP_OPTION_URL                34
.常量 WINHTTP_OPTION_SECURITY_KEY_BITNESS, "36", 隐藏, #define WINHTTP_OPTION_SECURITY_KEY_BITNESS                36
.常量 WINHTTP_OPTION_PROXY, "38", 隐藏, #define WINHTTP_OPTION_PROXY                38
.常量 WINHTTP_OPTION_USER_AGENT, "41", 隐藏, #define WINHTTP_OPTION_USER_AGENT                41
.常量 WINHTTP_OPTION_CONTEXT_VALUE, "45", 隐藏, #define WINHTTP_OPTION_CONTEXT_VALUE                45
.常量 WINHTTP_OPTION_CLIENT_CERT_CONTEXT, "47", 隐藏, #define WINHTTP_OPTION_CLIENT_CERT_CONTEXT                47
.常量 WINHTTP_OPTION_REQUEST_PRIORITY, "58", 隐藏, #define WINHTTP_OPTION_REQUEST_PRIORITY                58
.常量 WINHTTP_OPTION_HTTP_VERSION, "59", 隐藏, #define WINHTTP_OPTION_HTTP_VERSION                59
.常量 WINHTTP_OPTION_DISABLE_FEATURE, "63", 隐藏, 禁用此功能  #define WINHTTP_OPTION_DISABLE_FEATURE                63
.常量 WINHTTP_OPTION_CODEPAGE, "68", 隐藏, #define WINHTTP_OPTION_CODEPAGE                68
.常量 WINHTTP_OPTION_MAX_CONNS_PER_SERVER, "73", 隐藏, #define WINHTTP_OPTION_MAX_CONNS_PER_SERVER                73
.常量 WINHTTP_OPTION_MAX_CONNS_PER, "1", 隐藏, #define WINHTTP_OPTION_MAX_CONNS_PER                1
.常量 WINHTTP_OPTION_AUTOLOGON_POLICY, "77", 隐藏, #define WINHTTP_OPTION_AUTOLOGON_POLICY                77
.常量 WINHTTP_OPTION_SERVER_CERT_CONTEXT, "78", 隐藏, #define WINHTTP_OPTION_SERVER_CERT_CONTEXT                78
.常量 WINHTTP_OPTION_ENABLE_FEATURE, "79", 隐藏, 启用此功能  #define WINHTTP_OPTION_ENABLE_FEATURE                79
.常量 WINHTTP_OPTION_WORKER_THREAD_COUNT, "80", 隐藏, #define WINHTTP_OPTION_WORKER_THREAD_COUNT                80
.常量 WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT, "81", 隐藏, #define WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT                81
.常量 WINHTTP_OPTION_PASSPORT_COBRANDING_URL, "82", 隐藏, #define WINHTTP_OPTION_PASSPORT_COBRANDING_URL                82
.常量 WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH, "83", 隐藏, #define WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH                83
.常量 WINHTTP_OPTION_SECURE_PROTOCOLS, "84", 隐藏, #define WINHTTP_OPTION_SECURE_PROTOCOLS                84
.常量 WINHTTP_OPTION_ENABLETRACING, "85", 隐藏, #define WINHTTP_OPTION_ENABLETRACING                85
.常量 WINHTTP_OPTION_PASSPORT_SIGN_OUT, "86", 隐藏, #define WINHTTP_OPTION_PASSPORT_SIGN_OUT                86
.常量 WINHTTP_OPTION_PASSPORT_RETURN_URL, "87", 隐藏, #define WINHTTP_OPTION_PASSPORT_RETURN_URL                87
.常量 WINHTTP_OPTION_REDIRECT_POLICY, "88", 隐藏, 重定向属性
.常量 WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS, "89", 隐藏, #define WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS                89
.常量 WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE, "90", 隐藏, #define WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE                90
.常量 WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE, "91", 隐藏, #define WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE                91
.常量 WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE, "92", 隐藏, #define WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE                92
.常量 WINHTTP_OPTION_CONNECTION_INFO, "93", 隐藏, #define WINHTTP_OPTION_CONNECTION_INFO                93
.常量 WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST, "94", 隐藏, #define WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST                94
.常量 WINHTTP_OPTION_SPN, "96", 隐藏, #define WINHTTP_OPTION_SPN                96
.常量 WINHTTP_OPTION_GLOBAL_PROXY_CREDS, "97", 隐藏, #define WINHTTP_OPTION_GLOBAL_PROXY_CREDS                97
.常量 WINHTTP_OPTION_GLOBAL_SERVER_CREDS, "98", 隐藏, #define WINHTTP_OPTION_GLOBAL_SERVER_CREDS                98
.常量 WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT, "99", 隐藏, #define WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT                99
.常量 WINHTTP_OPTION_REJECT_USERPWD_IN_URL, "100", 隐藏, #define WINHTTP_OPTION_REJECT_USERPWD_IN_URL                100
.常量 WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS, "101", 隐藏, #define WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS                101
.常量 WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE, "103", 隐藏, #define WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE                103
.常量 WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE, "104", 隐藏, #define WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE                104
.常量 WINHTTP_OPTION_SERVER_SPN_USED, "106", 隐藏, #define WINHTTP_OPTION_SERVER_SPN_USED                106
.常量 WINHTTP_OPTION_PROXY_SPN_USED, "107", 隐藏, #define WINHTTP_OPTION_PROXY_SPN_USED                107
.常量 WINHTTP_OPTION_SERVER_CBT, "108", 隐藏, #define WINHTTP_OPTION_SERVER_CBT                108
.常量 WINHTTP_OPTION_USERNAME, "4096", 隐藏, #define WINHTTP_OPTION_USERNAME                0x1000
.常量 WINHTTP_OPTION_PASSWORD, "4097", 隐藏, #define WINHTTP_OPTION_PASSWORD                0x1001
.常量 WINHTTP_OPTION_PROXY_USERNAME, "4098", 隐藏, #define WINHTTP_OPTION_PROXY_USERNAME                0x1002
.常量 WINHTTP_OPTION_PROXY_PASSWORD, "4099", 隐藏, #define WINHTTP_OPTION_PROXY_PASSWORD                0x1003
.常量 WINHTTP_OPTION_REDIRECT_POLICY_NEVER, "0", 隐藏, 禁止重定向
.常量 WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP, "1", 隐藏, 禁止HTTPS到HTTP的定向
.常量 WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS, "2", 隐藏, 允许重定向
.常量 WINHTTP_DISABLE_COOKIES, "1", 隐藏, 自动设置COOKIES
.常量 WINHTTP_DISABLE_REDIRECTS, "2", 隐藏, 重定向
.常量 WINHTTP_AUTH_TARGET_SERVER, "0", 隐藏, 验证目标：网站服务器。
.常量 WINHTTP_AUTH_TARGET_PROXY, "1", 隐藏, 验证目标：代理服务器。
.常量 WINHTTP_AUTH_SCHEME_BASIC, "1", 隐藏, 基本认证方式(BASE64加密)。
.常量 WINHTTP_AUTH_SCHEME_NTLM, "2", 隐藏, NTLM认证方式。
.常量 WINHTTP_AUTH_SCHEME_PASSPORT, "4", 隐藏, PASSPORT认证方式。
.常量 WINHTTP_AUTH_SCHEME_DIGEST, "8", 隐藏, DIGEST认证方式。
.常量 WINHTTP_AUTH_SCHEME_NEGOTIATE, "16", 隐藏, NTLM和Kerberos之间的认证方式。
.常量 WINHTTP_QUERY_MIME_VERSION, "0", 隐藏, #define WINHTTP_QUERY_MIME_VERSION         0
.常量 WINHTTP_QUERY_CONTENT_TYPE, "1", 隐藏, 内容类型
.常量 WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING, "2", 隐藏, #define WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING         2
.常量 WINHTTP_QUERY_CONTENT_ID, "3", 隐藏, #define WINHTTP_QUERY_CONTENT_ID         3
.常量 WINHTTP_QUERY_CONTENT_DESCRIPTION, "4", 隐藏, #define WINHTTP_QUERY_CONTENT_DESCRIPTION         4
.常量 WINHTTP_QUERY_CONTENT_LENGTH, "5", 隐藏, 数据长度
.常量 WINHTTP_QUERY_CONTENT_LANGUAGE, "6", 隐藏, 语言
.常量 WINHTTP_QUERY_ALLOW, "7", 隐藏, #define WINHTTP_QUERY_ALLOW         7
.常量 WINHTTP_QUERY_PUBLIC, "8", 隐藏, #define WINHTTP_QUERY_PUBLIC         8
.常量 WINHTTP_QUERY_DATE, "9", 隐藏, 服务器时间
.常量 WINHTTP_QUERY_EXPIRES, "10", 隐藏, 缓存失效时间
.常量 WINHTTP_QUERY_LAST_MODIFIED, "11", 隐藏, 服务器上文件的最后修改时间
.常量 WINHTTP_QUERY_MESSAGE_ID, "12", 隐藏, #define WINHTTP_QUERY_MESSAGE_ID         12
.常量 WINHTTP_QUERY_URI, "13", 隐藏, #define WINHTTP_QUERY_URI         13
.常量 WINHTTP_QUERY_DERIVED_FROM, "14", 隐藏, #define WINHTTP_QUERY_DERIVED_FROM         14
.常量 WINHTTP_QUERY_COST, "15", 隐藏, #define WINHTTP_QUERY_COST         15
.常量 WINHTTP_QUERY_LINK, "16", 隐藏, #define WINHTTP_QUERY_LINK         16
.常量 WINHTTP_QUERY_PRAGMA, "17", 隐藏, #define WINHTTP_QUERY_PRAGMA         17
.常量 WINHTTP_QUERY_VERSION, "18", 隐藏, HTTP协议版本
.常量 WINHTTP_QUERY_STATUS_CODE, "19", 隐藏, HTTP状态码
.常量 WINHTTP_QUERY_STATUS_TEXT, "20", 隐藏, HTTP状态文本 Found
.常量 WINHTTP_QUERY_RAW_HEADERS, "21", 隐藏, HTTP/1.1 302 Found
.常量 WINHTTP_QUERY_RAW_HEADERS_CRLF, "22", 隐藏, 全部协议头信息
.常量 WINHTTP_QUERY_CONNECTION, "23", 隐藏, 连接状态  keep-alive
.常量 WINHTTP_QUERY_ACCEPT, "24", 隐藏, accept
.常量 WINHTTP_QUERY_ACCEPT_CHARSET, "25", 隐藏, #define WINHTTP_QUERY_ACCEPT_CHARSET         25
.常量 WINHTTP_QUERY_ACCEPT_ENCODING, "26", 隐藏, #define WINHTTP_QUERY_ACCEPT_ENCODING         26
.常量 WINHTTP_QUERY_ACCEPT_LANGUAGE, "27", 隐藏, #define WINHTTP_QUERY_ACCEPT_LANGUAGE         27
.常量 WINHTTP_QUERY_AUTHORIZATION, "28", 隐藏, #define WINHTTP_QUERY_AUTHORIZATION         28
.常量 WINHTTP_QUERY_CONTENT_ENCODING, "29", 隐藏, #define WINHTTP_QUERY_CONTENT_ENCODING         29
.常量 WINHTTP_QUERY_FORWARDED, "30", 隐藏, #define WINHTTP_QUERY_FORWARDED         30
.常量 WINHTTP_QUERY_FROM, "31", 隐藏, #define WINHTTP_QUERY_FROM         31
.常量 WINHTTP_QUERY_IF_MODIFIED_SINCE, "32", 隐藏, #define WINHTTP_QUERY_IF_MODIFIED_SINCE         32
.常量 WINHTTP_QUERY_LOCATION, "33", 隐藏, 重定向地址
.常量 WINHTTP_QUERY_ORIG_URI, "34", 隐藏, #define WINHTTP_QUERY_ORIG_URI         34
.常量 WINHTTP_QUERY_REFERER, "35", 隐藏, #define WINHTTP_QUERY_REFERER         35
.常量 WINHTTP_QUERY_RETRY_AFTER, "36", 隐藏, #define WINHTTP_QUERY_RETRY_AFTER         36
.常量 WINHTTP_QUERY_SERVER, "37", 隐藏, #define WINHTTP_QUERY_SERVER         37
.常量 WINHTTP_QUERY_TITLE, "38", 隐藏, #define WINHTTP_QUERY_TITLE         38
.常量 WINHTTP_QUERY_USER_AGENT, "39", 隐藏, #define WINHTTP_QUERY_USER_AGENT         39
.常量 WINHTTP_QUERY_WWW_AUTHENTICATE, "40", 隐藏, #define WINHTTP_QUERY_WWW_AUTHENTICATE         40
.常量 WINHTTP_QUERY_PROXY_AUTHENTICATE, "41", 隐藏, #define WINHTTP_QUERY_PROXY_AUTHENTICATE         41
.常量 WINHTTP_QUERY_ACCEPT_RANGES, "42", 隐藏, #define WINHTTP_QUERY_ACCEPT_RANGES         42
.常量 WINHTTP_QUERY_SET_COOKIE, "43", 隐藏, Set-Cookie
.常量 WINHTTP_QUERY_COOKIE, "44", 隐藏, Cookie
.常量 WINHTTP_QUERY_REQUEST_METHOD, "45", 隐藏, #define WINHTTP_QUERY_REQUEST_METHOD         45
.常量 WINHTTP_QUERY_REFRESH, "46", 隐藏, #define WINHTTP_QUERY_REFRESH         46
.常量 WINHTTP_QUERY_CONTENT_DISPOSITION, "47", 隐藏, #define WINHTTP_QUERY_CONTENT_DISPOSITION         47
.常量 ERROR_INTERNET_TIMEOUT, "12002", 隐藏, 请求超时。
.常量 ERROR_INTERNET_NAME_NOT_RESOLVED, "12007", 隐藏, 服务器名称不可能得到解决。
.常量 ERROR_INTERNET_CANNOT_CONNECT, "12029", 隐藏, 尝试连接到服务器失败
.常量 ERROR_INTERNET_CONNECTION_RESET, "12031", 隐藏, 与服务器的连接被重置。
.常量 HTTP_ADDREQ_FLAG_ADD, "536870912", 隐藏, 添加一个协议头，如果协议头已存在则被新值替换，与WINHTTP_ADDREQ_FLAG_REPLACE标志一起使用。
.常量 HTTP_ADDREQ_FLAG_ADD_IF_NEW, "268435456", 隐藏, 只有不存在的时候才添加
.常量 HTTP_ADDREQ_FLAG_COALESCE, "1073741824", 隐藏, 合并相同的名称
.常量 HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA, "1073741824", 隐藏, 合并相同的名称使用逗号
.常量 HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON, "16777216", 隐藏, 合并相投的名称使用分号
.常量 HTTP_ADDREQ_FLAG_REPLACE, "2147483648", 隐藏, 替换或者删除一个协议头，如果值为空则删除，否则被替换。


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 2 0 数据操作支持库一
 ' eCalc 306AA9E31B5940399723021A0D782077 2 3 数值计算支持库
 ' sock A6B983789F624b2cBDFD7D671249C097 2 0 网络通讯支持库
 ' internet 707ca37322474f6ca841f0e224f4b620 2 0 互联网支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库



 ' 所需要的模块
 ' zlib C:\Users\873318669\Desktop\QQ项目\AndroidQQ模块封装项目\zlib.ec
 ' 红尘丶自用 C:\Users\873318669\Desktop\QQ项目\AndroidQQ模块封装项目\红尘丶协议自用1.35.ec
 ' 鱼刺类_HTTP C:\Users\873318669\Desktop\QQ项目\AndroidQQ模块封装项目\鱼刺类_Http.ec


数据类型 JceMap, 公开, 
    .成员 key_type, 字节型, , , 
    .成员 key, 字节集, , , 
    .成员 val_type, 字节型, , , 
    .成员 val, 字节集, , , 

数据类型 URL_COMPONENTS, 公开, 
    .成员 dwStructSize, 整数型, , , 本结构长度，注：60
    .成员 lpszScheme, 整数型, , , 协议类型
    .成员 dwSchemeLength, 整数型, , , 协议类型缓冲区长度
    .成员 nScheme, 整数型, , , 链接类型，1=http，2=https。（INTERNET_SCHEME_HTTP=1，INTERNET_SCHEME_HTTPS=2）
    .成员 lpszHostName, 整数型, , , 主机域名(Host)
    .成员 dwHostNameLength, 整数型, , , 主机域名缓冲区长度
    .成员 nPort, 整数型, , , 端口
    .成员 lpszUserName, 整数型, , , 帐号
    .成员 dwUserNameLength, 整数型, , , 帐号缓冲区长度
    .成员 lpszPassword, 整数型, , , 密码
    .成员 dwPasswordLength, 整数型, , , 密码缓冲区长度
    .成员 lpszUrlPath, 整数型, , , 路径(页面地址)
    .成员 dwUrlPathLength, 整数型, , , 路径缓冲区长度
    .成员 lpszExtraInfo, 整数型, , , 额外信息，比如“?”或“#”之后的参数字符串。
    .成员 dwExtraInfoLength, 整数型, , , 额外信息长度

数据类型 精易_进程信息列表, 公开, 
    .成员 dwSize, 整数型, , , 1
    .成员 cntUsage, 整数型, , , 2
    .成员 进程ID, 整数型, , , 3
    .成员 th32DefaultHeapID, 整数型, , , 4
    .成员 th32ModuleID, 整数型, , , 5
    .成员 cntThreads, 整数型, , , 6
    .成员 th32ParentProcessID, 整数型, , , 7
    .成员 pcPriClassBase, 整数型, , , 8
    .成员 dwFlags, 整数型, , , 9
    .成员 进程名称, 字节型, , "256", 10

数据类型 精易_进程结构, 公开, 
    .成员 进程句柄, 整数型, , , hProcess
    .成员 线程句柄, 整数型, , , hThread
    .成员 进程标识符, 整数型, , , dwProcessId
    .成员 线程标识符, 整数型, , , dwThreadId

数据类型 StartupInfo, 公开, 
    .成员 cbSize, 整数型, , , 
    .成员 lpReserved, 整数型, , , 
    .成员 lpDesktop, 整数型, , , 
    .成员 lpTitle, 整数型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 长整数型, , , 
    .成员 cbReserved2, 长整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 精易_时间, 公开, , SYSTEMTIME
    .成员 年, 短整数型, , , wYear
    .成员 月, 短整数型, , , wMonth
    .成员 星期, 短整数型, , , 
    .成员 日, 短整数型, , , wDay
    .成员 时, 短整数型, , , wHour
    .成员 分, 短整数型, , , wMinute
    .成员 秒, 短整数型, , , wSecond
    .成员 毫, 短整数型, , , wMilliseconds

数据类型 ProtobufField, 公开, 
    .成员 type, 整数型, , , 
    .成员 id, 整数型, , , 
    .成员 value, 字节集, , , 

数据类型 ECDH_struct, , 
    .成员 CliPubkey, 字节集, , , 
    .成员 CliPrivKey, 字节集, , , 
    .成员 Sharekey, 字节集, , , 

数据类型 qq_information, , 
    .成员 Account, 文本型, , , qq
    .成员 QQ, 长整数型, , , qq 10
    .成员 user, 字节集, , , qq_hex
    .成员 caption, 字节集, , , qq_utf-8
    .成员 pass, 文本型, , , 
    .成员 md5, 字节集, , , 
    .成员 md52, 字节集, , , 
    .成员 time, 字节集, , , 
    .成员 key, 字节集, , , 
    .成员 nick, 文本型, , , 
    .成员 Token002C, 字节集, , , 
    .成员 Token004C, 字节集, , , A2
    .成员 TGTKey, 字节集, , , 
    .成员 shareKey, 字节集, , , 
    .成员 pub_key, 字节集, , , 
    .成员 Privkey, 字节集, , , 
    .成员 stweb, 文本型, , , 
    .成员 skey, 字节集, , , 
    .成员 vkey, 字节集, , , 
    .成员 sid, 字节集, , , 
    .成员 sessionKey, 字节集, , , 
    .成员 Superkey, 文本型, , , 
    .成员 ssoSeq_, 字节集, , , 
    .成员 匿名成员3600, 空白型, , , 
    .成员 loginState, 整数型, , , 登陆是否验证成功
    .成员 VieryToken1, 字节集, , , 验证码token
    .成员 VieryToken2, 字节集, , , 验证码token
    .成员 Viery, 字节集, , , 验证码
    .成员 Capcd, 文本型, , , 
    .成员 匿名成员3606, 空白型, , , 
    .成员 G_tk, 文本型, , , 
    .成员 cookie, 文本型, , , 
    .成员 UA, 文本型, , , 
    .成员 ExChangekey, 字节集, , , 

数据类型 Device_information, , 
    .成员 Imei, 文本型, , , 
    .成员 Guid, 字节集, , , 
    .成员 Mac, 字节集, , , 
    .成员 ver, 字节集, , , apk版本
    .成员 appId, 整数型, , , 
    .成员 appId2, 整数型, , , 
    .成员 os_type, 文本型, , , 系统类型
    .成员 os_version, 文本型, , , 系统版本
    .成员 deviceModel, 文本型, , , 手机型号

数据类型 Hk, 公开, 
    .成员 QQCapcd, 文本型, , , 
    .成员 Uid, 文本型, , , 
    .成员 Sess, 文本型, , , 
    .成员 Sid, 文本型, , , 
    .成员 Vsig, 文本型, , , 
    .成员 Websig, 文本型, , , 
    .成员 CreateIframeStart, 文本型, , , 
    .成员 Collectdata, 文本型, , , 
    .成员 Cdata, 文本型, , , 
    .成员 Y, 文本型, , , 
    .成员 X, 文本型, , , 
    .成员 Referer, 文本型, , , 
    .成员 CdnPic, 文本型, , "2", 
    .成员 Img, 字节集, , "2", 
    .成员 slideValue, 文本型, , , 
    .成员 Data, 文本型, , , 
    .成员 Eks, 文本型, , , 
    .成员 Aes, 逻辑型, , , 
    .成员 RandStr, 文本型, , , 
    .成员 Ticket, 文本型, , , 

数据类型 轨迹型, , 
    .成员 data, 文本型, , , 
    .成员 eks, 文本型, , , 

数据类型 FriendListInfo, 公开, QQ好友
    .成员 QQNumber, 长整数型, , , 好友QQ
    .成员 QQRemarks, 文本型, , , 备注
    .成员 QQNick, 文本型, , , 好友昵称
    .成员 OnlineType, 文本型, , , 在线状态

数据类型 TroopListInfo, 公开, QQ群
    .成员 GroupID, 长整数型, , , 
    .成员 GroupCode, 长整数型, , , 
    .成员 GroupName, 文本型, , , 

数据类型 TroopMemberInfo, 公开, QQ群成员
    .成员 MemberQQ, 长整数型, , , 
    .成员 MemberAge, 整数型, , , 
    .成员 MemberGender, 整数型, , , 0 = 男性  1 = 女性   255 = 未设置
    .成员 MemberNick, 文本型, , , 

数据类型 RespCondSearchdata, , 按条件查找陌生人
    .成员 PageNum, 整数型, , , 
    .成员 KeyWord, 文本型, , , 关键词
    .成员 Gender, 整数型, , , 性别：0 = 不限  1 = 男   2 = 女
    .成员 AgeStart, 整数型, , , 起始年龄
    .成员 AgeEnd, 整数型, , , 结束年龄
    .成员 Occupation, 整数型, , , 职业
    .成员 LocationStateCode, 整数型, , , 所在地|省级代码
    .成员 LocationCityCode, 整数型, , , 所在地|市级代码
    .成员 LocationRegionCode, 整数型, , , 所在地|县级代码
    .成员 HometownStateCode, 整数型, , , 故乡|省级代码
    .成员 HometownCityCode, 整数型, , , 故乡|市级代码
    .成员 HometownRegionCode, 整数型, , , 故乡|县级代码

数据类型 RespCondSearchInfo, 公开, 
    .成员 QQNumber, 长整数型, , , 
    .成员 QQNick, 文本型, , , 
    .成员 Age, 整数型, , , 
    .成员 Gender, 整数型, , , 

数据类型 RespNearbyPeople, 公开, 
    .成员 Tinyid, 文本型, , , 
    .成员 QQNumber, 文本型, , , QQ号码
    .成员 Description, 文本型, , , 距离
    .成员 Nick, 文本型, , , 昵称
    .成员 Gender, 文本型, , , 性别
    .成员 Age, 文本型, , , 年龄
    .成员 HeadUrl, 文本型, , , 头像链接
    .成员 BoolOnline, 文本型, , , 是否在线

数据类型 SummaryCard_ReqSearch, 公开, 
    .成员 Nick, 文本型, , , 
    .成员 Gender, 整数型, , , 
    .成员 Age, 整数型, , , 
    .成员 Province, 文本型, , , 
    .成员 Country, 文本型, , , 
    .成员 City, 文本型, , , 


.DLL命令 CoInitialize, 空白型, "ole32.dll", "CoInitialize", 公开, 加载COM
    .参数 pvReserved, 整数型, , 值为0

.DLL命令 CoUninitialize, 空白型, "ole32.dll", "CoUninitialize", 公开, 卸载COM

.DLL命令 InternetOpenA, 整数型, "wininet.dll", "InternetOpenA", 公开, Internet激活
    .参数 句柄名称, 文本型, 传址, 
    .参数 连接类型, 整数型, , 1直接连接;3代理连接
    .参数 代理地址, 文本型, 传址, 
    .参数 代理掩码, 文本型, 传址, 
    .参数 dwFlags, 整数型, , 0

.DLL命令 InternetCloseHandle, 逻辑型, "wininet.dll", "InternetCloseHandle", 公开, Internet关闭句柄
    .参数 句柄, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "wininet.dll", "InternetConnectA", 公开, Internet建立连接
    .参数 Internet句柄, 整数型, , 
    .参数 域名, 文本型, 传址, 
    .参数 服务器端口, 整数型, , 80HTTP;21FTP;
    .参数 用户名, 文本型, 传址, 空
    .参数 用户口令, 文本型, 传址, 空
    .参数 服务类型, 整数型, , 1FTP;3HTTP
    .参数 dwFlags, 整数型, , 0http;134217728被动FTP模式
    .参数 dwContext, 整数型, , 0

.DLL命令 HttpOpenRequestA, 整数型, "wininet.dll", "HttpOpenRequestA", 公开, Http创建请求
    .参数 Internet连接句柄, 整数型, , 由Internet建立连接返回
    .参数 访问方式, 文本型, 传址, "GET" or "POST"为空默认GET
    .参数 页面路径, 文本型, 传址, 简短路径,不带域名
    .参数 协议版本, 文本型, 传址, 为空默认HTTP/1.1
    .参数 引用页, 文本型, 传址, 可为空
    .参数 识别类型, 文本型, 传址, 可为空
    .参数 dwFlags, 整数型, , 2147483648更新下载
    .参数 dwContext, 整数型, , 0

.DLL命令 HttpSendRequestA, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, Http发送请求
    .参数 HTTP请求句柄, 整数型, , 
    .参数 附加协议头, 文本型, 传址, 
    .参数 附加协议头长度, 整数型, , 
    .参数 提交信息, 文本型, 传址, 
    .参数 提交信息长度, 整数型, , 

.DLL命令 HttpSendRequestA_字节集, 逻辑型, "wininet.dll", "HttpSendRequestA", 公开, Http发送请求
    .参数 HTTP请求句柄, 整数型, , 
    .参数 附加协议头, 文本型, 传址, 
    .参数 附加协议头长度, 整数型, , 
    .参数 提交信息, 字节集, 传址, 
    .参数 提交信息长度, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "wininet.dll", "InternetReadFile", 公开, Internet读文件
    .参数 HTTP请求句柄, 整数型, , 
    .参数 sBuffer, 字节集, 传址, 
    .参数 lNumBytesToRead, 整数型, , 
    .参数 lNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "wininet.dll", "HttpQueryInfoA", 公开, HTTP查询信息
    .参数 Internet请求句柄, 整数型, , 
    .参数 待查信息, 整数型, , 22返回所有信息;43SET_COOKIE;+2147483648返回文本
    .参数 返回容器, 文本型, 传址, 
    .参数 返回容器长度, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 WinHttpCheckPlatform, 逻辑型, "Winhttp.dll", "WinHttpCheckPlatform", 公开, BOOL WinHttpCheckPlatform(void);

.DLL命令 WinHttpCrackUrl, 逻辑型, "Winhttp.dll", "WinHttpCrackUrl", 公开, 
    .参数 pwszUrl, 字节集, , 
    .参数 dwUrlLength, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpUrlComponents, URL_COMPONENTS, , 

.DLL命令 WinHttpOpen, 整数型, "Winhttp.dll", "WinHttpOpen", 公开, HINTERNET WINAPI WinHttpOpen
    .参数 pwszUserAgent, 整数型, , __in_opt  LPCWSTR pwszUserAgent
    .参数 dwAccessType, 整数型, , __in      DWORD dwAccessType
    .参数 pwszProxyName, 字节集, , __in      LPCWSTR pwszProxyName
    .参数 pwszProxyBypass, 整数型, , __in      LPCWSTR pwszProxyBypass
    .参数 dwFlags, 整数型, , __in      DWORD dwFlags

.DLL命令 WinHttpConnect, 整数型, "Winhttp.dll", "WinHttpConnect", 公开, HINTERNET WINAPI WinHttpConnect
    .参数 hSession, 整数型, , __in        HINTERNET hSession
    .参数 pswzServerName, 字节集, , __in        LPCWSTR pswzServerName
    .参数 nServerPort, 整数型, , __in        INTERNET_PORT nServerPort
    .参数 dwReserved, 整数型, , __reserved  DWORD dwReserved

.DLL命令 WinHttpOpenRequest, 整数型, "Winhttp.dll", "WinHttpOpenRequest", 公开, HINTERNET WINAPI WinHttpOpenRequest
    .参数 hConnect, 整数型, , __in  HINTERNET hConnect
    .参数 pwszVerb, 字节集, , __in  LPCWSTR pwszVerb
    .参数 pwszObjectName, 字节集, , __in  LPCWSTR pwszObjectName
    .参数 pwszVersion, 整数型, , __in  LPCWSTR pwszVersion
    .参数 pwszReferrer, 整数型, , __in  LPCWSTR pwszReferrer
    .参数 ppwszAcceptTypes, 整数型, , __in  LPCWSTR *ppwszAcceptTypes
    .参数 dwFlags, 整数型, , __in  DWORD dwFlags

.DLL命令 WinHttpSetTimeouts, 逻辑型, "Winhttp.dll", "WinHttpSetTimeouts", 公开, BOOL WINAPI WinHttpSetTimeouts
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwResolveTimeout, 整数型, , __in  int dwResolveTimeout
    .参数 dwConnectTimeout, 整数型, , __in  int dwConnectTimeout
    .参数 dwSendTimeout, 整数型, , __in  int dwSendTimeout
    .参数 dwReceiveTimeout, 整数型, , __in  int dwReceiveTimeout

.DLL命令 WinHttpCloseHandle, 逻辑型, "Winhttp.dll", "WinHttpCloseHandle", 公开, BOOL WINAPI WinHttpCloseHandle
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet

.DLL命令 WinHttpSetOption, 逻辑型, "Winhttp.dll", "WinHttpSetOption", 公开, BOOL WINAPI WinHttpSetOption
    .参数 hInternet, 整数型, , __in  HINTERNET hInternet
    .参数 dwOption, 整数型, , __in  DWORD dwOption
    .参数 lpBuffer, 整数型, 传址, __in  LPVOID lpBuffer
    .参数 dwBufferLength, 整数型, , __in  DWORD dwBufferLength

.DLL命令 WinHttpAddRequestHeaders, 逻辑型, "Winhttp.dll", "WinHttpAddRequestHeaders", 公开, BOOL WINAPI WinHttpAddRequestHeaders
    .参数 hRequest, 整数型, , __in  HINTERNET hRequest
    .参数 pwszHeaders, 字节集, , __in  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in  DWORD dwHeadersLength
    .参数 dwModifiers, 整数型, , __in  DWORD dwModifiers

.DLL命令 WinHttpSendRequest, 逻辑型, "Winhttp.dll", "WinHttpSendRequest", 公开, BOOL WINAPI WinHttpSendRequest
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 pwszHeaders, 整数型, , __in_opt  LPCWSTR pwszHeaders
    .参数 dwHeadersLength, 整数型, , __in      DWORD dwHeadersLength
    .参数 lpOptional, 字节集, , __in_opt  LPVOID lpOptional
    .参数 dwOptionalLength, 整数型, , __in      DWORD dwOptionalLength
    .参数 dwTotalLength, 整数型, , __in      DWORD dwTotalLength
    .参数 dwContext, 整数型, , __in      DWORD_PTR dwContext

.DLL命令 WinHttpReceiveResponse, 逻辑型, "Winhttp.dll", "WinHttpReceiveResponse", 公开, BOOL WINAPI WinHttpReceiveResponse
    .参数 hRequest, 整数型, , __in        HINTERNET hRequest
    .参数 lpReserved, 整数型, , __reserved  LPVOID lpReserved

.DLL命令 WinHttpQueryDataAvailable, 逻辑型, "Winhttp.dll", "WinHttpQueryDataAvailable", 公开, 查询是否有可读数据
    .参数 hRequest, 整数型, , 请求句柄
    .参数 lpdwNumberOfBytesAvailable, 整数型, 传址, 可读数据长度

.DLL命令 WinHttpReadData, 逻辑型, "Winhttp.dll", "WinHttpReadData", 公开, BOOL WINAPI WinHttpReadData
    .参数 hRequest, 整数型, , __in   HINTERNET hRequest
    .参数 lpBuffer, 字节集, , __out  LPVOID lpBuffer
    .参数 dwNumberOfBytesToRead, 整数型, , __in   DWORD dwNumberOfBytesToRead
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, __out  LPDWORD lpdwNumberOfBytesRead

.DLL命令 WinHttpQueryHeaders, 逻辑型, "Winhttp.dll", "WinHttpQueryHeaders", 公开, BOOL WINAPI WinHttpQueryHeaders
    .参数 hRequest, 整数型, , __in      HINTERNET hRequest
    .参数 dwInfoLevel, 整数型, , __in      DWORD dwInfoLevel
    .参数 pwszName, 整数型, , __in_opt  LPCWSTR pwszName
    .参数 lpBuffer, 字节集, , __out     LPVOID lpBuffer
    .参数 lpdwBufferLength, 整数型, 传址, __inout   LPDWORD lpdwBufferLength
    .参数 lpdwIndex, 整数型, 传址, __inout   LPDWORD lpdwIndex

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开, kernel32.dll 将通配符映像为多字节 _Unicode转Utf8
    .参数 CodePage, 整数型, , 1
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 取自进程ID

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", 公开, 创建进程快照
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 Process32First, 整数型, "", "Process32First", 公开, 取第一个进程
    .参数 h, 整数型, , 
    .参数 p, 精易_进程信息列表, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", 公开, 取下一个进程
    .参数 h, 整数型, , 
    .参数 p, 精易_进程信息列表, , 

.DLL命令 CloseHandle, 逻辑型, "kernel32", "CloseHandle", 公开, 
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 FindWindowExA_文本, 整数型, "user32", "FindWindowExA", 公开, 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口, 整数型, , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 IsWindow, 整数型, "user32", "IsWindow", 公开, 窗口_句柄是否有效  判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型, , 

.DLL命令 IsWindowVisible, 逻辑型, "", "IsWindowVisible", 公开, 窗口_是否可见  判断窗口是否可见  返回真为可见，否则为不可见
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, 线程_取ID
    .参数 hwnd, 整数型, , 指定窗口句柄
    .参数 进程标识符, 整数型, 传址, 用于装载进程ID的变量

.DLL命令 GetWindowTextLength, 整数型, "user32", "GetWindowTextLengthA", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 GetWindowTextA, 整数型, "", "GetWindowTextA", 公开, 窗口_取标题
    .参数 hwnd, 整数型, , 
    .参数 标题名, 文本型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 SetWindowTextA, 逻辑型, "user32", "SetWindowTextA", 公开, 窗口_置标题
    .参数 hwnd, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 窗口_取类名 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, 传址, 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 CreateProcessA, 整数型, "kernel32.dll", "CreateProcessA", 公开, 
    .参数 lpApplicationName, 文本型, , 
    .参数 lpCommandLine, 文本型, , 
    .参数 lpProcessAttributes, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 bInheritHandles, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 
    .参数 lpCurrentDriectory, 文本型, , 
    .参数 lpStartupInfo, StartupInfo, , 
    .参数 lpProcessInformation, 精易_进程结构, , 

.DLL命令 TerminateProcess, 整数型, "", "TerminateProcess", 公开, _进程终止
    .参数 进程ID, 整数型, , 
    .参数 a, 整数型, , 

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 打开进程
    .参数 进程对象, 整数型, , 
    .参数 继承句柄, 整数型, , 
    .参数 进程标识符, 整数型, , 

.DLL命令 SendMessageA_文本, 整数型, "user32", "SendMessageA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 消息号, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 文本型, , 具体取决于消息

.DLL命令 GetDateFormatA, 整数型, "kernel32.dll", "GetDateFormatA", 公开, 针对指定的“当地”格式，对一个系统日期进行格式化  格式化过后的字串的长度。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数――即使它们已由用户取代。
    .参数 日期结构, 未知类型0x4101045A, , lpDate，包含了一个系统日期的结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。否则包含一个日期格式字串。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 GetTimeFormatA, 整数型, "kernel32.dll", "GetTimeFormatA", 公开, _系统置时间进行格式化 针对指定的“当地”格式，对一个系统时间进行格式化。
    .参数 地方ID, 整数型, , Locale，用于决定格式的地方ID。lpFormat参数中指定的任何信息（倘若不是NULL）都优先于特定于地方的信息
    .参数 标志, 整数型, , dwFlags，如指定了lpFormat，那么该参数应该为零。否则，可设为LOCALE_NOUSEROVERRIDE，强制使用系统地方参数
    .参数 时间结构, 未知类型0x4101045A, , lpDate，SYSTEMTIME，用于包容系统时间的一个结构
    .参数 格式化, 文本型, , lpFormat，String，可设为NULL，使用特定于不同地方的值（用vbNullString传递一个NULL）。
    .参数 缓冲区文本, 文本型, , lpDateStr，指定一个缓冲区，用于容纳格式化过后的字串。注意事先对字串进行初始化
    .参数 缓冲区文本长度, 整数型, , cchDate，缓冲区的长度。如为零，表示函数会返回需要缓冲区的大小;

.DLL命令 VariantTimeToSystemTime_Date, 整数型, "oleaut32.dll", "VariantTimeToSystemTime", 公开, 
    .参数 vtime, 日期时间型, , 
    .参数 lpSystemTime, 未知类型0x4101045A, , 

.DLL命令 PathIsDirectoryA, 整数型, "shlwapi.dll", "PathIsDirectoryA", 公开, 目录是否存在
    .参数 lpszPath, 文本型, , 

.DLL命令 GetLocalTime, 整数型, "kernel32", "GetLocalTime", 公开, ,
    .参数 系统时间格式, 精易_时间, 传址, 

.DLL命令 GetAdaptersInfo, 整数型, "IPHlpApi", "GetAdaptersInfo", 公开, 
    .参数 IpAdapterInfo, 整数型, , 
    .参数 pOutBufLen, 整数型, 传址, 

.DLL命令 CopyMemory_ip_adapter_info, 整数型, "kernel32", "RtlMoveMemory", 公开, 
    .参数 Destination, 未知类型0x4101045B, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 GlobalAlloc, 整数型, "kernel32", "GlobalAlloc", 公开, 在堆中分配内存
    .参数 wFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", 公开, 释放全局内存块
    .参数 hMem, 整数型, , 

.DLL命令 RasDialA, 整数型, "rasapi32.dll", "RasDialA", 公开, _ADSL拨号
    .参数 lprasdialextensions, 整数型, , 拔号参数
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lprasdialparamsa, 未知类型0x4101045C, , 拔号参数
    .参数 dwNotifierType, 整数型, , 消息通知方式
    .参数 lpvNotifier, 整数型, , 消息处理回调子程序
    .参数 lphrasconn, 整数型, 传址, 返回的成功连接的连接句柄

.DLL命令 RasHangUpA, 整数型, "rasapi32.dll", "RasHangUpA", 公开, RasApi32.DLL挂断当前拔号连接 0表示成功
    .参数 hRasConn, 整数型, , 连接句柄

.DLL命令 GlobalSize_取连接信息用结构, 整数型, "", "GlobalSize", 公开, kernel32.dll取结构尺寸
    .参数 结构, 未知类型0x4101045D, 传址, 

.DLL命令 RasEnumEntries, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开, rasapi32.dll 取连接信息结构,连接名称,数量等等
    .参数 lpStrNull, 整数型, , 保留字段,必须为NIL
    .参数 lpszphonebook, 整数型, , 电话本名称,在Win9X下无作用
    .参数 lprasetryname, 未知类型0x4101045D, 传址 数组, RASENTRYNAME类型数组的指针
    .参数 lpcb, 整数型, 传址, 接收拨号连接名称的缓冲区的大小
    .参数 lpcentries, 整数型, 传址, 实际获得的拨号连接名称的数目

.DLL命令 InternetGetConnectedStateEx, 整数型, "wininet.dll", "InternetGetConnectedStateEx", 公开, _取连接状态 wininet.dll
    .参数 lpdwFlags, 整数型, 传址, 
    .参数 lpszConnectionName, 文本型, 传址, 
    .参数 dwNameLen, 整数型, , 
    .参数 dwReserved, 整数型, , 

.DLL命令 RasSetEntryPropertiesA, 整数型, "rasapi32.dll", "RasSetEntryPropertiesA", 公开, _创建新拨号连接 rasapi32.dll 0=建立成功,其他为失败
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpRasEntry, 未知类型0x4101045E, , 
    .参数 dwEntryInfoSize, 整数型, , 
    .参数 lpbDeviceInfo, 整数型, , 
    .参数 wDeviceInfoSize, 整数型, , 

.DLL命令 RasSetCredentialsA, 整数型, "rasapi32.dll", "RasSetCredentialsA", 公开, _设置拨号连接 rasapi32.dll
    .参数 lpszPhonebook, 整数型, , 电话本名称,0
    .参数 lpszEntry, 文本型, , 连接名称
    .参数 lpCredentials, 未知类型0x4101045F, , 
    .参数 fClearCredentials, 整数型, , 

.DLL命令 SHGetSpecialFolderPath, 逻辑型, "", "SHGetSpecialFolderPathA", 公开, 取系统目录
    .参数 hwndOwner, 整数型, , 
    .参数 lpszPath, 文本型, , 
    .参数 nFolder, 整数型, , 
    .参数 fCreate, 逻辑型, , 

.DLL命令 RtlMoveMemory_字节型, 空白型, "", "RtlMoveMemory", 公开, 复制内存数据_MIB_IPFORWARDROW参数
    .参数 Destination, 字节型, 数组, 目标地址
    .参数 Source, 字节型, 数组, 要复制的数据MIB_IPFORWARDROW
    .参数 Length, 整数型, , 长度

.DLL命令 RasGetEntryDialParams, 整数型, "rasapi32.dll", "RasGetEntryDialParamsA", 公开, 
    .参数 lpszPhoneBook, 文本型, 传址, 
    .参数 lpDialParams, 未知类型0x4101045C, 传址, 未知类型：TRasDialParams。
    .参数 lpfPassword, 逻辑型, 传址, 

.DLL命令 GlobalSize_RASENTRY, 整数型, "kernel32.dll", "GlobalSize", 公开, 取结构尺寸
    .参数 结构, 未知类型0x41010460, 传址, 

.DLL命令 GetPrivateProfileInt, 整数型, "kernel32", "GetPrivateProfileIntA", 公开, 读配置项数值
    .参数 小节名, 字节集, , 
    .参数 项目名, 文本型, , 
    .参数 默认返回值, 整数型, , 
    .参数 文件名, 文本型, ,   

.DLL命令 RasEnumEntrie, 整数型, "rasapi32.dll", "RasEnumEntriesA", 公开, 
    .参数 reserved, 整数型, , 
    .参数 lpszPhoneBook, 整数型, , 
    .参数 entrynamesArray, 未知类型0x4101045D, 传址, 未知类型：LPRasEntryNameA。
    .参数 lpcb, 整数型, 传址, 
    .参数 lpcEntries, 整数型, 传址, 

.DLL命令 LsaFreeMemory, 整数型, "ADVAPI32.DLL", "LsaFreeMemory", 公开, 
    .参数 Buffer, 字节集, 传址, 

.DLL命令 LsaOpenPolicy, 整数型, "ADVAPI32.DLL", "LsaOpenPolicy", 公开, 
    .参数 SystemName, 整数型, , 未知类型：PLSA_UNICODE_STRING。
    .参数 ObjectAttributes, 未知类型0x41010461, , 未知类型：PLSA_OBJECT_ATTRIBUTES。
    .参数 DesiredAccess, 整数型, , 
    .参数 PolicyHandle, 整数型, 传址, 未知类型：PLongWord。

.DLL命令 LsaRetrievePrivateData, 整数型, "ADVAPI32.DLL", "LsaRetrievePrivateData", 公开, 
    .参数 LSA_HANDLE, 整数型, , 
    .参数 KeyName, 未知类型0x41010462, , 未知类型：PLSA_UNICODE_STRING。
    .参数 PrivateData, 整数型, 传址, 未知类型：PLSA_UNICODE_STRING。

.DLL命令 LsaClose, 整数型, "ADVAPI32.DLL", "LsaClose", 公开, 
    .参数 ObjectHandle, 整数型, , 

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 LookupAccountName, 整数型, "advapi32.dll", "LookupAccountNameA", 公开, 把帐户名转为SID　
    .参数 lpSystemName, 文本型, 传址, 
    .参数 lpAccountName, 文本型, , 
    .参数 Sid, 字节集, 传址, 
    .参数 cbSid, 整数型, 传址, 
    .参数 ReferencedDomainName, 文本型, , 
    .参数 cbReferencedDomainName, 整数型, 传址, 
    .参数 peUse, 整数型, 传址, 

.DLL命令 IsValidSid, 整数型, "advapi32.dll", "IsValidSid", 公开, 使SID有效　
    .参数 pSid, 整数型, , 

.DLL命令 ConvertSidToStringSid, 整数型, "ADVAPI32.DLL", "ConvertSidToStringSidW", 公开, 　
    .参数 Sid, 字节集, 传址, 
    .参数 StringSid, 整数型, 传址, 

.DLL命令 lstrlen, 整数型, "kernel32", "lstrlenW", 公开, 取字节长度　
    .参数 lpString, 整数型, , 

.DLL命令 RtlMoveMemory_整数型2, 空白型, "kernel32", "RtlMoveMemory", 公开, 公开
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32.dll", "lstrcpyn", 公开, 字节集
    .参数 欲取其指针, 字节集, 传址, 
    .参数 欲取其指针, 字节集, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 SetWindowLongA, 整数型, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 整数型, , 新样式

.DLL命令 SetWindowLongA1, 子程序指针, "", "SetWindowLongA", 公开, 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 hwnd, 整数型, , 句柄
    .参数 nIndex, 整数型, , -16=样式，-20=扩展样式
    .参数 dwNewLong, 子程序指针, , 新样式

.DLL命令 RegisterWindowMessageA, 整数型, "user32", "RegisterWindowMessageA", 公开, _获取消息编号  获取分配给一个字串标识符的消息编号　&C000 到 &FFFF之间的一个消息编号。零意味着出错
    .参数 消息名称, 文本型, , 注册消息的名字;  

.DLL命令 lstrcpynA_字节集, 整数型, "kernel32", "lstrcpynA", 公开, 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 SendMessageA_整数, 整数型, "user32", "SendMessageA", 公开, 
    .参数 hwnd, 整数型, , 
    .参数 消息号, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息

.DLL命令 ReadProcessMemory_字节集, 逻辑型, "", "ReadProcessMemory", 公开, 内存读字节集
    .参数 hProcess, 整数型, , 
    .参数 内存地址, 整数型, , 
    .参数 数据指针, 字节集, 传址, 
    .参数 数据长度, 整数型, , 
    .参数 读取的长度, 整数型, 传址, 

.DLL命令 WriteProcessMemory_字节集, 逻辑型, "kernel32.dll", "WriteProcessMemory", 公开, 
    .参数 hProcess, 整数型, , 
    .参数 内存地址, 整数型, , 
    .参数 数据指针, 字节集, , 
    .参数 数据长度, 整数型, , 
    .参数 实际写出长度, 整数型, , 

.DLL命令 CallWindowProcA, 整数型, "user32.dll", "CallWindowProcA", 公开, 
    .参数 窗口程序指针, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 _取错误代码, 整数型, "", "GetLastError", 公开, 该函数返回调用线程最近的错误代码值，错误代码以单线程为基础来维护的，多线程不重写各自的错误代码值。

.DLL命令 CoInitialize, 整数型, "ole32", "CoInitialize", 公开, COM初始化套间
    .参数 pvReserved, 整数型, , 值为0

.DLL命令 CoUninitialize, 空白型, "ole32", "CoUninitialize", 公开, COM卸载

.DLL命令 EC_KEY_new_by_curve_name, 整数型, "libeay32.dll", "@EC_KEY_new_by_curve_name", , 
    .参数 nid, 整数型, , 

.DLL命令 EC_KEY_get0_group, 整数型, "libeay32", "@EC_KEY_get0_group", , 
    .参数 key, 整数型, , 

.DLL命令 EC_POINT_new, 整数型, "libeay32", "@EC_POINT_new", , 
    .参数 group, 整数型, , 

.DLL命令 EC_KEY_generate_key, 整数型, "libeay32", "@EC_KEY_generate_key", , 
    .参数 key, 整数型, , 

.DLL命令 EC_POINT_point2oct, 整数型, "libeay32", "@EC_POINT_point2oct", , 
    .参数 group, 整数型, , 
    .参数 p, 整数型, , 
    .参数 from, 整数型, , 
    .参数 buf, 字节集, , 
    .参数 len, 整数型, , 
    .参数 ctx, 整数型, , 

.DLL命令 EC_KEY_get0_public_key, 整数型, "libeay32", "@EC_KEY_get0_public_key", , 
    .参数 key, 整数型, , 

.DLL命令 EC_POINT_oct2point, 整数型, "libeay32", "@EC_POINT_oct2point", , 
    .参数 group, 整数型, , 
    .参数 p, 整数型, , 
    .参数 buf, 字节集, , 
    .参数 len, 整数型, , 
    .参数 ctx, 整数型, , 

.DLL命令 ECDH_compute_key, 整数型, "libeay32", "@ECDH_compute_key", , 
    .参数 pOut, 字节集, , 
    .参数 outLen, 整数型, , 
    .参数 pub_key, 整数型, , 
    .参数 ecdh, 整数型, , 
    .参数 ecdh_kdf, 子程序指针, , 

.DLL命令 EC_KEY_free, 空白型, "libeay32", "@EC_KEY_free", , 
    .参数 key, 整数型, , 

.DLL命令 EC_GROUP_free, 空白型, "libeay32", "@EC_GROUP_free", , 
    .参数 group, 整数型, , 

.DLL命令 EC_KEY_get0_private_key, 整数型, "libeay32", "@EC_KEY_get0_private_key", , 
    .参数 ec_key, 整数型, , 

.DLL命令 BN_bn2mpi, 整数型, "libeay32", "@BN_bn2mpi", , 
    .参数 c_priv_key_BN, 整数型, , 
    .参数 vBuf, 字节集, , 

.DLL命令 BN_mpi2bn, 整数型, "libeay32", "@BN_mpi2bn", , 
    .参数 vBuf, 字节集, , 
    .参数 bufLen, 整数型, , 
    .参数 ret, 整数型, , 

.DLL命令 EC_KEY_set_private_key, 整数型, "libeay32", "@EC_KEY_set_private_key", , 
    .参数 ec_key, 整数型, , 
    .参数 prikeyBN, 整数型, , 

.DLL命令 BN_free, 空白型, "libeay32", "@BN_free", , 
    .参数 prikeyBN, 整数型, , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
载入 (假)
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 inflate_Decompress, 字节集, , 
.参数 bin, 字节集, , 



.类模块 _Pack, , , 

.子程序 Empty, 空白型, , 清除


.子程序 GetAll, 字节集, , 取全部数据


.子程序 Len, 整数型, , 取长度


.子程序 SetBin, 空白型, , 置字节集
.参数 t, 字节集, , 



.子程序 SetByte, 空白型, , 置字节
.参数 b, 字节型, , 



.子程序 SetData, 空白型, , 置类数据
.参数 bin, 字节集, , 



.子程序 SetHex, 空白型, , 置文本十六进制格式
.参数 t, 文本型, , 



.子程序 SetInt, 空白型, , 置整数
.参数 int, 整数型, , 



.子程序 SetShort, 空白型, , 置短整数
.参数 short, 短整数型, , 



.子程序 SetLong, 空白型, , 
.参数 long, 长整数型, , 



.子程序 SetUint, 空白型, , 
.参数 uint, 整数型, , 



.子程序 SetStr, 空白型, , 
.参数 t, 文本型, , 



.子程序 SetToken, 空白型, , 置令牌
.参数 t, 字节集, , 



.子程序 setUTF_8, 空白型, , 
.参数 v, 文本型, , 



.类模块 _Unpack, , , 

.子程序 GetAll, 字节集, , 取所有数据
.参数 忽略03, 逻辑型, 可空, 



.子程序 GetAll_Hex, 文本型, , 取所有数据,十六进制展示


.子程序 GetBin, 字节集, , 取字节集
.参数 len, 整数型, , 



.子程序 GetByte, 字节型, , 取字节


.子程序 GetInt, 整数型, , 取整数


.子程序 GetLong, 长整数型, , 


.子程序 GetShort, 短整数型, , 取短整数


.子程序 GetToken, 字节集, , 取令牌


.子程序 GetUTF_8, 文本型, , 


.子程序 Len, 整数型, , 取长度


.子程序 SetData, 空白型, , 置数据
.参数 b, 字节集, , 



.子程序 SetData_Hex, 空白型, , 置数据_十六进制文本
.参数 hex, 文本型, , 十六进制文本



.类模块 QQTEA, , , 

.子程序 解密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本



.子程序 加密, 字节集, , 
.参数 加密内容, 字节集, , 带空格十六进制文本
.参数 密钥, 字节集, , 带空格十六进制文本



.类模块 JceOutputStream, , , 

.子程序 clear, 空白型, , 


.子程序 toByteArray, 字节集, , 


.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 



.子程序 WriteObj, 空白型, , 
.参数 p_type, 字节型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 



.子程序 WriteByte, 空白型, , 
.参数 p_val, 字节型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteShort, 空白型, , 
.参数 p_val, 短整数型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteInt, 空白型, , 
.参数 p_val, 整数型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteLong, 空白型, , 
.参数 p_val, 长整数型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteByteString, 空白型, , 十六进制字节
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteStringByte, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 



.子程序 WriteJceStruct, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 



.子程序 WriteSimpleList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 



.子程序 WriteList, 空白型, , 
.参数 p_val, 字节集, , 
.参数 p_tag, 整数型, , 



.子程序 WriteMap, 空白型, , 
.参数 p_key, JceMap, 数组, 
.参数 p_tag, 长整数型, , 



.子程序 putHex, 空白型, , 
.参数 hex, 文本型, , 



.子程序 WriteStringByte_2, 空白型, , 
.参数 p_val, 文本型, , 
.参数 p_tag, 整数型, , 



.类模块 JceInputStream, , , 

.子程序 wrap, 空白型, , 
.参数 bin, 字节集, , 



.子程序 ReadByte, 字节型, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadShort, 短整数型, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadInt, 整数型, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadLong, 长整数型, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadString, 文本型, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadSimpleList, 字节集, , 
.参数 p_tag, 整数型, , tag



.子程序 ReadList, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 ret_arr, 文本型, 数组, 



.子程序 ReadType, 字节型, , 


.子程序 ReadToTag, 字节型, , 返回type -1没找到
.参数 p_tag, 整数型, , 



.子程序 skipToEnd, 空白型, , 


.子程序 ReadMap, 空白型, , 
.参数 p_tag, 整数型, , tag
.参数 p_val, JceMap, 数组, 



.子程序 getAll, 字节集, , 返回剩余


.类模块 正则表达式类, , , 

.子程序 创建, 逻辑型, , 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
.参数 正则表达式文本, 文本型, , 比如“易语言4\.0(模块|支持库)?”
.参数 被搜索的文本, 文本型, , 
.参数 是否区分大小写, 逻辑型, 可空, 可以留空,默认为假,不区分大小写; 真为区分大小写;本参数指定这个正则表达式在创建成功后进行匹配、搜索、替换时，是否区分大小写;
.参数 是否匹配多行, 逻辑型, 可空, 可以留空,默认为真,允许匹配多行; 如果本成员值为真，字符“^”不仅匹配目标文本的开头，而且匹配目标文本中换行符（字符(10)，字符(13)或 #换行符）的后面；字符“$”不仅匹配目标文本的结尾，而且匹配目标文本中换行符的前面。否则字符“^”仅仅匹配目标文本的开头，“$”也仅仅匹配目标文本的结尾。
.参数 是否全局匹配, 逻辑型, 可空, 可以留空，默认为真，全局匹配
.参数 自动替换引号, 逻辑型, 可空, 可空。默认为不替换。说明：正则表达式文本为【formhash" value="7b4aa6c5】，这里面的引号处理起来很麻烦，直接把此参数设置为真，把"换成 #引号 再传进来就可以了，如：【formhash#引号 value=#引号7b4aa6c5】



.子程序 查看, 空白型, ,  


.子程序 取正则文本, 文本型, , 返回以文本形式表示的正则表达式。如果该对象尚未创建，则返回空文本。本命令为高级对象成员命令


.子程序 替换, 文本型, , 替换在正则表达式查找中找到的文本
.参数 用作替换的文本, 文本型, 可空, 用作替换的文本



.子程序 取匹配数量, 整数型, , 取出该正则匹配到的数量


.子程序 取匹配文本, 文本型, , 取出该正则匹配到的文本
.参数 匹配索引, 整数型, , 索引值从1开始
.参数 起始位置, 整数型, 参考 可空, 可以被省略，提供参数数据时只能提供变量。该命令调用成功后，本参数存放取得的子文本在整个被搜索文本中的起始位置



.子程序 取子匹配文本, 文本型, , 取出该正则的子表达式匹配到的文本
.参数 匹配索引, 整数型, , 索引值从1开始
.参数 子表达式索引, 整数型, , 欲取其值的子表达式,该参数对应与正则表达式中的一个子表达式以圆括号"( )"为标记,索引从1开始
.参数 起始位置, 整数型, 参考 可空, 可以被省略，提供参数数据时只能提供变量。该命令调用成功后，本参数存放取得的子文本在整个被搜索文本中的起始位置



.子程序 取子匹配数量, 整数型, , 取出该正则的子表达式匹配到的数量


.类模块 类_json, , , 

.子程序 解析, 逻辑型, , 
.参数 数据文本, 文本型, , json的文本数据



.子程序 取数据文本, 文本型, , 


.子程序 置属性, 空白型, , 
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 属性解析为json对象,数组



.子程序 置属性对象, 空白型, , 属性解析为json对象,数组
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 文本型, , 



.子程序 置属性数值, 空白型, , 
.参数 名字, 文本型, , 支持a.b.c[0]
.参数 值, 双精度小数型, , 



.子程序 取属性数值, 双精度小数型, , 
.参数 名字, 文本型, , 支持a.b.c[0]



.子程序 取属性对象, 文本型, , 返回对象文本
.参数 名字, 文本型, , 支持a.b.c[0]



.子程序 取通用属性, 文本型, , 对于数字键名或者非正常变量字符（比如有空格），必须使用 aa[x]的方式。
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b,键名为数值时a.b模式无效，必须使用a[20]模式。
.参数 为对象, 逻辑型, 可空, 为真解析属性为 数值,json{},不然有转义"\"



.子程序 取属性, 类_json, , 
.参数 名字, 文本型, , 支持a.b.c[0]或者[0].a.b



.子程序 成员数, 整数型, , 
.参数 名字, 文本型, 可空, 支持a.b.c,根目录为空



.子程序 加成员, 空白型, , 
.参数 成员值, 文本型, , 对象
.参数 名字, 文本型, 可空, 支持a.b.c
.参数 为对象, 逻辑型, 可空, 数值,json节点



.子程序 取成员, 类_json, , 
.参数 索引, 整数型, , 
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点



.子程序 取成员文本, 文本型, , 
.参数 索引, 整数型, , 支持a.b.c
.参数 名字, 文本型, 可空, 支持a.b.c,为空是根节点
.参数 为对象, 逻辑型, 可空, 对象为真,否则返回obj,数值,json节点



.子程序 置成员, 空白型, , 
.参数 索引, 整数型, , 支持a.b.c
.参数 成员值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 数值,json节点



.子程序 删成员, 空白型, , 
.参数 索引, 整数型, , 支持a.b.c



.子程序 删属性, 空白型, , 
.参数 名字, 文本型, , 



.子程序 置类型, 空白型, , 
.参数 值, 整数型, , 0空,4对象,5数组



.子程序 赋值, 空白型, , 
.参数 值, 文本型, , 
.参数 为对象, 逻辑型, 可空, 数值,json节点



.子程序 属性是否存在, 逻辑型, , 
.参数 名字, 文本型, , 支持a.b.c



.子程序 取所有属性名, 整数型, , 注意：对于数字键名或者非正常变量字符（比如有空格），必须使用 aa[x]的方式。
.参数 属性名数组, 文本型, 参考 数组, 
.参数 名字, 文本型, 可空, a.b,空为根节点,键名为数值时a.b模式无效，必须使用a[20]模式。



.子程序 取类型, 整数型, , 空=0，数=2，对象=4，数组=5，文本=6
.参数 名字, 文本型, 可空, 



.子程序 清除, 空白型, , 


.类模块 类_日志输出, , , 

.子程序 文件路径, 文本型, , 获取与设置日志输出文件目录，请在【输出文件】日志前设置目录。
.参数 参_目录, 文本型, 可空, 默认会在程序运行目录下生成(Log+年月)格式的目录
.参数 参_文件名, 文本型, 可空, 



.子程序 输出文件, 逻辑型, , 输出内容到文件到
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_信息框, 逻辑型, 可空, 默认不提示



.子程序 输出控制台, 逻辑型, , 输入日志内容到控制台
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_标题, 文本型, 可空, 控制台标题，默认 程序日志
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件



.子程序 输出易调试, 空白型, , 只在调试模式下有效
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件



.子程序 输出调试器, 空白型, , 输出到 调试器，编译模式下有效，可用DbgView 查看
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件



.子程序 输出编辑框, 空白型, , 输出日志内容到编辑框
.参数 参_编辑框句柄, 整数型, , 
.参数 参_内容, 文本型, , 
.参数 参_级别, 整数型, 可空, 默认为【信息】，或如下级别值：0=信息，1=警告，2=错误，3=调试
.参数 参_写到文件, 逻辑型, 可空, 默认不出日志文件



.子程序 目录_是否存在, 逻辑型, , 输入一个目录名,判断此目录是否存在
.参数 欲判断的目录名, 文本型, , 传入的目录名不会被改变



.子程序 目录_创建, 逻辑型, , 创建多级目录，成功返回真，失败返回假。如果指定目录存在也会返回真，不覆盖目录内容。
.参数 目录路径, 文本型, , 



.类模块 ADSL拨号, , , 

.子程序 _取本机IP, 整数型, , 返回IP的个数，如2:本地IP和外网IP
.参数 IP数组, 文本型, 数组, 用于装载IP的文本数组



.子程序 取外网IP, 文本型, , 获取本机的外网IP


.子程序 重拨, 文本型, , 重拨成功返回外网IP，失败返回空文本
.参数 连接名称, 文本型, 可空, 可空,默认为 宽带连接  已建立的拨号连接的名称
.参数 用户名, 文本型, , 用于拨号的用户名
.参数 密码, 文本型, , 用于拨号的密码



.子程序 拨号, 整数型, , 通过拨号建立网络连接，成功返回连接句柄，失败返回0
.参数 连接名称, 文本型, , 已建立的拨号连接的名称,一般为 宽带连接
.参数 用户名, 文本型, , 用于拨号的用户名
.参数 密码, 文本型, , 用于拨号的密码



.子程序 断开, 逻辑型, , 断开当前拨号网络连接


.子程序 重拨_cmd, 空白型, , 宽带重拨，cmd方式
.参数 宽带名称, 文本型, 可空, 可空。默认为“宽带连接”
.参数 用户名称, 文本型, , 
.参数 用户密码, 文本型, , 



.子程序 拨号_cmd, 空白型, , CMD方式拨号
.参数 宽带名称, 文本型, 可空, 可空。默认为“宽带连接”
.参数 用户名称, 文本型, , 
.参数 用户密码, 文本型, , 



.子程序 断开_cmd, 逻辑型, , 断开宽带连接，cmd方式。
.参数 连接名称, 文本型, 可空, 可空,默认为“宽带连接”。已建立的拨号连接的名称



.子程序 取连接名称, 文本型, , 利用索引取出电脑中拨号的连接名称，成功返回连接名称，失败返回空文本
.参数 连接索引, 整数型, , 欲取名称的连接索引
.参数 所有名称数组, 文本型, 参考 可空 数组, 存放所有连接名称的文本数组



.子程序 取连接数量, 整数型, , 取系统中已经建立的连接数量


.子程序 取连接状态, 逻辑型, , 判断指定的连接是否已连接，如果已连接返回真，否则返回假;
.参数 连接名称, 文本型, , 欲判断的连接名称



.子程序 连接是否存在, 逻辑型, , 如果指定的连接名称存在返回真，否则返回假;
.参数 连接名称, 文本型, , 欲判断的连接名称



.子程序 断开所有连接, 空白型, , 


.子程序 创建新拨号连接, 逻辑型, , 建立一个ADS拨号连接，成功反回真，失败返回假;
.参数 连接名称, 文本型, , 拨号连接的名称,可自定义,如"我的ADSL连接"
.参数 用户名, 文本型, 可空, 用于拨号的用户名
.参数 密码, 文本型, 可空, 用于拨号的密码
.参数 拨号类型, 整数型, 可空, 可空,默认为1  1=PPPoE虚拟拨号  2=电话拨号



.子程序 设置拨号连接, 逻辑型, , 设置已经存在的连接的用户名或密码
.参数 连接名称, 文本型, , 已建立的拨号连接的名称
.参数 用户名, 文本型, , 用于拨号的用户名,留空将不写入连接中
.参数 密码, 文本型, 可空, 用于拨号的密码



.子程序 删除拨号连接, 空白型, , 
.参数 连接名称, 文本型, , 



.子程序 取宽带用户名密码, 逻辑型, , 成功返回真，失败返回假  注：只有ADSL拨号上网的才能取
.参数 连接名称, 文本型, 可空, 请提供一个文本变量,用于存放 连接名称
.参数 宽带用户名, 文本型, 可空, 请提供一个文本变量,用于存放 宽带用户名
.参数 宽带密码, 文本型, 可空, 请提供一个文本变量,用于存放 宽带密码



.子程序 系统_取宽带用户名密码, 逻辑型, , 成功返回真,失败返回假  注：只有ADSL拨号上网的才能取
.参数 连接名称, 文本型, 可空, 请提供一个文本变量,用于存放 连接名称
.参数 宽带用户名, 文本型, 可空, 请提供一个文本变量,用于存放 宽带用户名
.参数 宽带密码, 文本型, 可空, 请提供一个文本变量,用于存放 宽带密码



.子程序 取指针地址_字节集型, 整数型, , 
.参数 欲取地址的数据, 字节集, 参考, 



.类模块 类_脚本组件, , , 

.子程序 执行, 逻辑型, , 执行指定的代码文本。返回真为执行正常，返回假为出错，错误信息可以从“错误信息”属性中取得。
.参数 脚本代码, 文本型, , 



.子程序 计算表达式, 文本型, , 计算表达式并返回结果。
.参数 表达式, 文本型, , 



.子程序 清除, 空白型, , 


.子程序 取脚本对象, 对象, , 


.子程序 运行, 文本型, , 在添加的代码中运行指定的过程，如有返回值返回相应文本，否则返回空文本。
.参数 过程或函数名, 文本型, , 
.参数 参数1, 文本型, 可空, 
.参数 参数2, 文本型, 可空, 
.参数 参数3, 文本型, 可空, 
.参数 参数4, 文本型, 可空, 
.参数 参数5, 文本型, 可空, 
.参数 参数6, 文本型, 可空, 



.子程序 属性_语言, 文本型, , 设置或返回正在使用的脚本语言名称。
.参数 新语言属性, 整数型, 可空, 默认为为 JScript   0. JScript   1. VBScript



.子程序 属性_超时, 整数型, , 设置或返回时间（毫秒），此时间后用户可选择中止脚本代码的执行或允许代码继续执行。
.参数 新超时属性值, 整数型, 可空, 默认为-1，执行无超时



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 Utf8, 字节集, , 



.子程序 编码_Ansi到Utf8, 字节集, , 
.参数 ansi, 文本型, , 



.子程序 进制_十六到十, 整数型, , 将16进制文件转换到10进制数值(返回十进制数)
.参数 文本, 文本型, , 



.子程序 Flip, 字节集, , 反转字节集
.参数 bin, 字节集, 参考, 



.子程序 Bin2Int, 整数型, , 到整数
.参数 四字节, 字节集, , 



.子程序 Int2Bin, 字节集, , 
.参数 int, 整数型, , 



.子程序 Long2Bin, 字节集, , 
.参数 Long, 长整数型, , 



.子程序 ToIP, 文本型, , 到IP
.参数 四字节, 字节集, , 四字节



.子程序 Bin2Long, 长整数型, , 
.参数 bin, 字节集, , 



.子程序 Bin2HexTo, 文本型, , 字节集到十六
.参数 字节集, 字节集, 参考, 



.子程序 Hex2Bin2, 字节集, , 十六到字节集
.参数 文本, 文本型, 参考, 



.子程序 Hex2Bin, 字节集, , 嵌ASM
.参数 原文, 文本型, , 



.子程序 GetRandomBin, 字节集, , 
.参数 len, 整数型, , 



.子程序 HashMD5, 文本型, , 返回十六
.参数 字节集, 字节集, , 



.子程序 HashMD5_, 字节集, , 返回字节集
.参数 字节集, 字节集, , 



.子程序 PictureProcessing, 字节集, , 图片置参
.参数 字节集, 字节集, , 



.子程序 字节集到十六进制文本, 文本型, , 返回字节集的十六进制文本,可能有最大长度的限制
.参数 输入字节集, 字节集, 参考, 



.子程序 十六进制文本到字节集, 字节集, , 嵌ASM
.参数 原文, 文本型, , 



.子程序 TimeStamp, 长整数型, , GetUnixTime
.参数 精确到毫秒, 逻辑型, 可空, 默认为假 精确到秒10位数 精确到毫秒13位数



.子程序 format_ip, 文本型, , 
.参数 bin, 字节集, , 



.子程序 文本_取随机范围数字, 文本型, , 如1-100之间的双数或单数或单双一起！
.参数 起始数, 整数型, , 如：1
.参数 结束数, 整数型, , 如：1000
.参数 单双选择, 整数型, 可空, 1为单，2为双,否则为取单双



.子程序 汇编_取随机数, 整数型, , 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
.参数 欲取随机数的最小值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
.参数 欲取随机数的最大值, 整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为无限。



.子程序 文本_取随机字符, 文本型, , A-Z、a-z、0-9 中取出随机指定数量的字符
.参数 要取出的字符数, 整数型, , 



.子程序 文本_取随机汉字, 文本型, , 取常用的随机汉字
.参数 个数, 整数型, , 要取出多少个汉字！
.参数 汉字或全拼, 整数型, 可空, 0为汉字，否则为全拼音！



.子程序 文本_取随机字母, 文本型, , 取随机26个字母！
.参数 要取的字符数, 整数型, , 要取字符个数；
.参数 字母类型, 整数型, 可空, 可空：默认为小写字母；0=小写字母；1=大写字母；2=大小写字母混合；



.子程序 文本_取随机数字, 文本型, , 汇编_取随机数字，可选单或双！
.参数 字符数, 整数型, , 要取字符个数
.参数 单双选择, 整数型, 可空, 0为单双，1为单，其他数值为双；默认单双一起



.子程序 文本_取左边, 文本型, , 从文本的左边按 欲寻找的文本 开始寻找
.参数 被查找的文本, 文本型, , 被查找的文本
.参数 欲寻找的文本, 文本型, , 欲寻找的文本
.参数 起始寻找位置, 整数型, 可空, 欲寻找的文本的起始寻找位置
.参数 是否不区分大小写, 逻辑型, 可空, 默认为假区分大小写



.子程序 文本_取右边, 文本型, , 从文本的右边按 欲寻找的文本 开始寻找, 取行右边 (“1234567890”, “5”, 1, 真)
.参数 被查找的文本, 文本型, , 被查找的文本
.参数 欲寻找的文本, 文本型, , 欲寻找的文本
.参数 起始寻找位置, 整数型, 可空, 可以被省略。位置值从 1 开始。如果本参数被省略，默认为从被搜寻文本的尾部开始。
.参数 是否不区分大小写, 逻辑型, 可空, 默认为假,区分大小写



.子程序 文本_取中间_批量, 整数型, , 比如：欲取全文本为<12345>,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”
.参数 源文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面标识文本, 文本型, , 3的前面为“2”
.参数 后面标识文本, 文本型, , 3的后面为“4”
.参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
.参数 是否区分大小写, 逻辑型, 可空, 是否区分大小写
.参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要;如取出的文本大于50的不要;留空为不限制
.参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
.参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
.参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出? 默认为假，不取出！
.参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出? 默认为假，不取出！
.参数 起始搜寻位置, 整数型, 可空, 注明：位置值从 1 开始。如果本参数被省略，默认为 1 。



.子程序 文本_取出中间文本, 文本型, , 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
.参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
.参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。



.子程序 线程_初始化COM库, 空白型, , 有时执行线程的时候，会自动关闭，此时，可以在多线程的程序里创建COM对象前先初始化，一个线程只能调用一次


.子程序 线程_取消COM库, 空白型, , 取消COM库的初始化，如果你在线程头部加入了 线程_初始化COM库 请在尾部加入此命令


.子程序 网页_访问_对象, 字节集, , 使用WinHttp对象的方式访问网页
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, "POST"专用
.参数 提交Cookies, 文本型, 参考 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 返回状态代码, 整数型, 参考 可空, 网页返回的状态代码，例如：200；302；404等
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 字节集提交, 字节集, 可空, 提交字节集数据
.参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
.参数 超时, 整数型, 可空, 秒|默认为15秒,-1为无限等待
.参数 代理用户名, 文本型, 可空, 用户名
.参数 代理密码, 文本型, 可空, 密码
.参数 代理标识, 整数型, 可空, 代理标识，默认为1，0为路由器
.参数 对象继承, 对象, 可空, 此处可自行提供对象，不再主动创建
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新



.子程序 网页_访问, 字节集, , 使用WinInet的方式访问网页
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, POST专用
.参数 提交Cookies, 文本型, 参考 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 字节集提交, 字节集, 可空, 提交字节集数据
.参数 代理地址, 文本型, 可空, 代理地址，格式为:ip:port,例如:8.8.8.8:88
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新



.子程序 网页_访问S, 文本型, , 源码由[洫蜘蛛]提供,使用WinHttp的方式访问网页,如果返回是“?”请查询返回协议头是否有“Content-Encoding: gzip“表示gzip压缩过网页，可用 网页_GZIP解压()命令解压，如果返回是乱码，则返回原始文本，请自行转换编码，失败返回空文本，请取出状态文本。
.参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
.参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD
.参数 提交信息, 文本型, 可空, POST专用
.参数 提交Cookies, 文本型, 可空, 本参数传递变量时会自动回传返回的Cookie
.参数 返回Cookies, 文本型, 参考 可空, 返回的Cookie
.参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
.参数 返回协议头, 文本型, 参考 可空, 返回的协议头
.参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
.参数 网站登录用户名, 文本型, 可空, 自动登录网页用户名 如路由器
.参数 网站登录密码, 文本型, 可空, 
.参数 代理地址, 文本型, 可空, 代理地址，格式为 8.8.8.8:88
.参数 代理帐号, 文本型, 可空, 
.参数 代理密码, 文本型, 可空, 
.参数 超时时间, 整数型, 可空, 可以被省略，单位：秒，默认30秒，如果提供大于0的数值，则修改操作超时时间。
.参数 返回重定向, 文本型, 参考 可空, 可以被省略，提供参数时只能提供文本型变量，用于当发生重定向时取回页面重定向的地址。
.参数 返回状态文本, 文本型, 参考 可空, 
.参数 返回原始数据, 字节集, 参考 可空, 可以被省略，返回原始网页编码
.参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新



.子程序 编码_BASE64编码, 文本型, , BASE64编码处理；成功返回编码后的文本；
.参数 待编码数据, 字节集, , 待编码字节集



.子程序 网页_Cookie合并更新, 文本型, , 返回更新后的Cookie
.参数 旧Cookie, 文本型, 参考, 
.参数 新Cookie, 文本型, , 



.子程序 网页_取域名, 文本型, , 通过“/”或者“.”来获取网址中的域名，默认使用“/”方式
.参数 网址, 文本型, , 
.参数 去除二级域名, 逻辑型, 可空, 
.参数 不过滤端口, 逻辑型, 可空, 
.参数 后缀点数量, 整数型, 可空, 不留空表示通过“.”的方式取域名 。如：.com后缀点数量为1 ,.com.cn后缀点数量为2



.子程序 网页_取外网IP, 文本型, , 取本机的外网IP
.参数 所在省市, 文本型, 可空, 可空。请提供一个文本变量，用于存放您所在的省市



.子程序 网页_取端口, 整数型, , 取出网站服务器的默认端口
.参数 网址, 文本型, , 



.子程序 网页_取页面地址, 文本型, , 
.参数 网址, 文本型, , 



.子程序 编码_Ansi到Unicode, 字节集, , 将Ansi码转换为Unicode码；成功返回转换后的字节集；
.参数 Ansi, 文本型, , 欲转换的Ansi文本
.参数 非标准Unicode编码, 逻辑型, 可空, 默认为假，为标准Unicode编码



.子程序 编码_Unicode到Ansi, 文本型, , 将Unicode码转换为Ansi码；成功返回转换后的文本；
.参数 Unicode, 字节集, , 欲转换的Unicode字节集



.子程序 文本_去重复文本, 文本型, , 
.参数 原文本, 文本型, , 
.参数 分割符, 文本型, , 



.子程序 编码_Ansi到Utf8, 字节集, , 如果在保存到的文件中发现结尾有NUL字符，可以使用编码_Ansi到Utf8_对象或编码_Ansi到Utf8_无BOM文件命令替代
.参数 ansi文本, 文本型, , 



.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 



.子程序 编码_Unicode到Utf8, 字节集, , 
.参数 Unicode字节集, 字节集, , 



.子程序 编码_URL解码, 文本型, , 
.参数 URL, 文本型, , 
.参数 是否UTF8, 逻辑型, 可空, 先将文本串解码为文本,再从UTF8转成GBK编码



.子程序 编码_URL编码, 文本型, , 
.参数 欲编码的文本, 文本型, , 
.参数 不编码字母数字, 逻辑型, 可空, 不需要编码【字母数字.-】可以把此参数设置为真
.参数 是否UTF8, 逻辑型, 可空, 先把文本转换成UTF8编码,再编码成URL



.子程序 编码_utf8到gb2312, 文本型, , 
.参数 欲转换的源码, 文本型, , 



.子程序 编码_gb2312到utf8, 文本型, , 
.参数 欲转换的源码, 文本型, , 



.子程序 进制_十到十六, 文本型, , 十进制到十六进制（支持负数）,源码作者：QQ418995189
.参数 十进制长整数, 长整数型, , 不支持无符号长整数型，易BUG，超过15位长整数型，不能直接使用，必须 用 到长整数()转换
.参数 是否在前端补零, 逻辑型, 可空, 如果为真，则自动在前面补0，补足位数。如果为假，则不补零；默认为假



.子程序 进制_十六到十, 长整数型, , 十六进制到十进制（已优化算法）,源码作者：QQ418995189
.参数 十六进制文本, 文本型, , 字母不区分大小写



.子程序 进程_名取句柄, 整数型, , 通过进程名取对应的窗口句柄；成功返回窗口句柄，失败返回0，返回-1表示找到进程。
.参数 进程名, 文本型, , 要取窗口句柄的进程名；



.子程序 进程_取自进程ID, 整数型, , 取自身的进程ID，成功返回进程ID；失败返回0


.子程序 进程_ID取进程名, 文本型, , 通过进程ID取得该进程执行文件名，也就是进程名;
.参数 参数_进程ID, 整数型, , 该进程的ID;



.子程序 进程_ID取窗口句柄, 整数型, , 通过进程ID取得该进程的窗口句柄,超时则返回零
.参数 进程ID, 整数型, , 该进程的ID;
.参数 窗口标题, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 窗口类名, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 超时, 整数型, 可空, 为空则无限循环



.子程序 进程_名取ID, 整数型, , 通过进程名取进程ID；失败返回0 
.参数 进程名, 文本型, , 取要进程ID的进程名
.参数 是否区分大小写, 逻辑型, 可空, 默认为不区分,真=区分



.子程序 窗口_句柄取进程ID, 整数型, , 返回进程ID；
.参数 窗口句柄, 整数型, , 



.子程序 窗口_取标题, 文本型, , 
.参数 窗口句柄, 整数型, , 



.子程序 窗口_置标题, 逻辑型, , 改指定窗口句柄的窗口标题(非"0"表示成功,返回"0"表示失败)
.参数 窗口句柄, 整数型, , 欲更改窗口标题的句柄
.参数 新标题, 文本型, , 欲改成的新标题



.子程序 窗口_取类名, 文本型, , 取指定窗口句柄的窗口类名(返回窗口类名,失败返回空文本)
.参数 窗口句柄, 整数型, , 欲取类名的窗口句柄



.子程序 进程_创建, 整数型, , 创建一个程序进程(成功返回进程ID,失败返回0)
.参数 程序路径, 文本型, , 欲创建进程的执行路径
.参数 命令行, 文本型, 可空, 附加上程序路径后的命令行参数
.参数 运行目录, 文本型, 可空, 通常留空,特殊情况下使用
.参数 进程结构, 精易_进程结构, 参考 可空, 接收进程结构信息的变量,如果不为空，产品的句柄用CloseHandle函数释放



.子程序 进程_结束, 逻辑型, , 结束指定进程。成功返回真，失败返回假。本命令为初级命令
.参数 进程ID, 整数型, 可空, 欲结束的进程ID,如果为空将结束自己



.子程序 时间_格式化, 文本型, , 格式化指定日期与时间，失败返回空文本
.参数 参_欲格式化时间, 日期时间型, , 
.参数 参_日期格式, 文本型, 可空, 可以为空，格式：yyyy [年]，M [月],d [日],dddd [星期]，如;yyyy/M/d dddd(年/月/日 星期几)
.参数 参_时间格式, 文本型, 可空, 可以为空，格式：tt [上午或下午],h [小时],m [分钟], s [秒] 。如;hh:mm:ss(小时:分钟:秒),tt hh:mm:ss(上午或下午 小时:分钟:秒)
.参数 参_是否为24小时制, 逻辑型, 可空, 



.子程序 时间_北京转格林威治, 长整数型, , 将【北京标准时间】转换成【格林威治的标准时间】，13位的时间戳可用“时间_取现行时间戳（）”获得
.参数 欲转换的时间, 日期时间型, 可空, 如果为空则取当前时间，如: 1970-01-01 08:00:00 或 2009年2月9日12时36分36秒



.子程序 时间_格林威治转北京, 日期时间型, , 将【格林威治的标准时间】转换成【北京标准时间】,源码修改至官方用户
.参数 要转换的格林威治时间, 长整数型, , 要转换的格林威治时间



.子程序 时间_取现行时间戳, 文本型, , 生成一个13位或者10位的现行时间戳，默认生成13位时间戳。13位：1325252169718，10位：1325252169
.参数 是否取十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回



.子程序 时间_时间戳转文本, 文本型, , 把一个13位的时间戳，如：1325252169718 转成 2011-12-30 21:36:09
.参数 时间戳, 文本型, , 



.子程序 时间_取制式, 整数型, , 取当前系统时间制式，返回值；0表示12小时制，1表示24小时制


.子程序 时间_到时间戳, 文本型, , 把指定日期时间转换为10位或13位时间戳,默认生成13位时间戳。13位：1325252169718，10位：1325252169
.参数 参_时间, 日期时间型, 可空, 可为空，默认为现行时间
.参数 参_十位时间戳, 逻辑型, 可空, 本参数为真时，将生成10位时间戳返回
.参数 参_是否取满10位, 逻辑型, 可空, 如果参数为真，则保证一定取出至少10位，如果不足10位，在前面补0. 如果为假，则直接取出



.子程序 IMEI算法, 文本型, , 


.子程序 Guid算法, 字节集, , 


.子程序 进程通信_接收端_初始化, 空白型, , 监听前必需调用此子程序，只需使用一次，停止监听前不能再使用此子程序，否则会出错。
.参数 参数_窗口句柄, 整数型, , 当前窗口句柄，可用 取窗口句柄() 得到。



.子程序 进程通信_接收端_开始监听, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_标志文本, 文本型, , 可以为任意文本(不能为空文本)，但是不要和系统中已有的冲突。设置不同的标志文本，可绑定不同的子程序。
.参数 参数_回调函数, 子程序指针, 可空, 接收到信息后要触发的子程序，不可多个标志文本绑定同个子程序，不需要可不填。



.子程序 进程通信_接收端_关闭监听, 空白型, , 关闭某监听，要恢复请直接开始(不用重新初始化)。
.参数 参数_标志文本, 文本型, , 



.子程序 进程通信_接收端_停止监听, 空白型, , 关闭所有监听，要恢复请重新初始化。


.子程序 进程通信_接收端_取出数据, 字节集, , 回调函数或其它子程序可用此子程序取出接收到的数据。
.参数 参数_标识文本, 文本型, , 接收端监听时设置的文本。



.子程序 进程通信_接收端_清除数据, 空白型, , 清除某监听得到的数据(其它数据不变)，释放该数据所占的内存。
.参数 参数_标志文本, 文本型, , 



.子程序 进程通信_接收端_清空数据, 空白型, , 清空所有监听得到的所有数据，释放内存。


.子程序 进程通信_发送端_发送数据, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_窗口句柄, 整数型, , 接收端的窗口句柄。
.参数 参数_标志文本, 文本型, , 接收端监听时设置的文本。
.参数 参数_欲发送的数据, 字节集, , 要发送的数据。



.子程序 编码_ansi到usc2, 文本型, , 将ansi转变成usc2  如 123 转换后为 %u0031%u0032%u0033 失败返回空文本
.参数 欲转换的文本, 文本型, , 
.参数 是否不转换括号, 逻辑型, 可空, 可空。默认为假，转换。 真 = 不转换 { }[ ]( ) 等括号，注意；不处理全角字符串
.参数 是否不转换符号, 逻辑型, 可空, 可空。默认为假，转换。 真 = 不转换:," 等符号
.参数 分割符, 文本型, 可空, 可空。默认为：%u  如填：%u,返回的数据如:%u0031%u0032%u0033，填\u，返回的数据如:\u0031\u0032\u0033



.子程序 编码_U编码转换, 文本型, , 默认转换类型为to16un
.参数 要转的文本, 文本型, , 
.参数 转换类型, 文本型, 可空, to16on to16un to10on to10un



.子程序 protobufLongInt, 字节集, , 
.参数 v, 长整数型, , 
.参数 mark, 整数型, 可空, 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufBigNum, 字节集, , 
.参数 v, 未知类型0x4000A, , 
.参数 mark, 整数型, 可空, 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufInt, 字节集, , 
.参数 v, 整数型, , 
.参数 mark, 整数型, 可空, 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufFloat32, 字节集, , 
.参数 v, 小数型, , 
.参数 mark, 整数型, 可空, 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufFloat64, 字节集, , 
.参数 v, 双精度小数型, , 
.参数 mark, 整数型, 可空, 
.参数 isId, 逻辑型, 可空, 



.子程序 字节集到十六进制, 文本型, , 
.参数 chars, 字节集, , 
.参数 splite_char, 文本型, 可空, 



.子程序 十六进制到字节集, 字节集, , 
.参数 str, 文本型, , 
.参数 sp_len, 整数型, 可空, 
.参数 result, 逻辑型, 参考 可空, 



.子程序 protobufString, 字节集, , 
.参数 v, 文本型, , 
.参数 mark, 整数型, , 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufBytes, 字节集, , 
.参数 v, 字节集, , 
.参数 mark, 整数型, , 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufObject, 字节集, , 
.参数 v, 字节集, , 
.参数 mark, 整数型, , 
.参数 isId, 逻辑型, 可空, 



.子程序 protobufUnpack, 逻辑型, , 解包protobuf数据，返回字段数组
.参数 message, 字节集, , protobuf数据
.参数 recv_var, ProtobufField, 参考 数组, 用于接收返回
.参数 输出错误, 逻辑型, 可空, 



.子程序 protobufGetFieldByIds, 逻辑型, , 
.参数 fields, ProtobufField, 参考 数组, protobuf字段数据
.参数 ids, 文本型, , 
.参数 recv_var, ProtobufField, 参考, 用于接收返回
.参数 输出错误, 逻辑型, 可空, 



.子程序 protobufGetFieldById, 逻辑型, , 根据字段id从protobufUnpack返回的数组获取字段
.参数 fields, ProtobufField, 参考 数组, protobuf字段数据
.参数 id, 整数型, , 
.参数 recv_var, ProtobufField, 参考, 用于接收返回
.参数 index, 整数型, 可空, 从指定索引开始



.子程序 protobufGetIndexById, 整数型, , 根据字段id从protobufUnpack返回的数组获取字段所在数据的索引,失败返回-1
.参数 fields, ProtobufField, 参考 数组, 
.参数 id, 整数型, , 
.参数 index, 整数型, 可空, 



.子程序 protobufGetBigNum, 逻辑型, , 将字段作为大数返回
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 value, 未知类型0x4000A, 参考, 



.子程序 protobufGetFloat32, 逻辑型, , 
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 小数型, 参考, 



.子程序 protobufGetFloat64, 逻辑型, , 
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 双精度小数型, 参考, 



.子程序 protobufGetInt, 逻辑型, , 将字段作为整数型返回，所有整数型一律看作为无符号型
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 整数型, 参考, 



.子程序 protobufGetLongInt, 逻辑型, , 将字段作为长整数型返回，所有整数型一律看作为无符号型
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 长整数型, 参考, 



.子程序 protobufGetString, 逻辑型, , 将字段作为字符串型返回
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 文本型, 参考, 



.子程序 protobufGetObject, 逻辑型, , 将字段作为对象型返回，可用protobufUnpack再次解包
.参数 fields, ProtobufField, 参考 数组, 
.参数 index, 整数型, , 
.参数 recv_var, 字节集, 参考, 



.子程序 protobufGetBytes, 逻辑型, , 将字段作为字节集类型返回
.参数 field, ProtobufField, , 
.参数 recv_var, 字节集, 参考, 



.子程序 protobufPrint, 文本型, , 返回调试文本
.参数 field, ProtobufField, , 
.参数 pre, 文本型, 可空, 
.参数 var, 文本型, 可空, 



.子程序 protobufPrintAll, 文本型, , 返回调试文本
.参数 bytes, 字节集, , 
.参数 pre, 文本型, 可空, 



.子程序 protobufGetIntByField, 长整数型, , 将字段作为整数型返回，所有整数型一律看作为无符号型
.参数 field, ProtobufField, 参考, 
.参数 result, 逻辑型, 参考 可空, 



.子程序 protobufGetStringByField, 文本型, , 
.参数 field, ProtobufField, 参考, 
.参数 result, 逻辑型, 参考 可空, 



.子程序 protobufGetBytesByField, 字节集, , 
.参数 field, ProtobufField, 参考, 
.参数 result, 逻辑型, 参考 可空, 



.类模块 WinHttpW, , , WinHttpApi (v2.7) By:Bints

.子程序 _hSession, 整数型, , 取/设内部会话句柄
.参数 Session, 整数型, 可空, 留空=获取 非空=设置



.子程序 _hConnect, 整数型, , 取/设内部连接句柄
.参数 Connect, 整数型, 可空, 留空=获取 非空=设置



.子程序 _hRequest, 整数型, , 取/设内部请求句柄
.参数 Request, 整数型, 可空, 留空=获取 非空=设置



.子程序 Auto, 空白型, , 设置自动补全模式 此模式开启后会自动帮你补全必要的协议头（目前只包括Content-Type,Accept,Accept-Language,Cache-Control） （设置后一直有效） （必须在Open前使用）
.参数 IsAuto, 逻辑型, 可空, 留空为真 真=开启自动协议头补全 假=关闭自动协议头补全



.子程序 AutoCookies, 空白型, , 设置Cookies自动管理模式 （设置后一直有效） （必须在Open前使用）
.参数 Index, 整数型, 可空, 留空=1 0=Winhttp内部自动处理Cookies(完全和Winhttpr5.1一样的特性)  1=类内部自动合并更新Cookies(此模式下可以配合独有方法Cookies CookieAdd CookieSet CookieDel 来取/设/添加/设置/删除)  2=缓存到本地(支持IES控件继承 注意:模式2不兼容多线程)



.子程序 Rest, 空白型, , 重置(初始化)WinHttp 释放所有数据 包括之前所有设置和Cookies
.参数 User_Agent, 文本型, 可空, 自定义用户浏览器协议头信息 User_Agent 留空则使用默认的浏览器信息



.子程序 Open, 逻辑型, , 打开一个HTTP连接
.参数 Method, 文本型, 可空, 例：POST、GET、HEAD 默认为:GET。
.参数 Url, 文本型, , 例：http://www.nixsw.com/。



.子程序 Send, 逻辑型, , 发送HTTP请求。成功返回真，失败返回假(可通过 _取错误代码() 获得失败原因 #ERROR_WINHTTP_)。 （文本提交方式） （必须在Open后使用）
.参数 Data, 文本型, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）
.参数 SendRetryCount, 整数型, 可空, 默认=0 执行Send或Recv失败后 自动重试最大次数 0=关闭Send失败重试



.子程序 SendBin, 逻辑型, , 发送HTTP请求。成功返回真，失败返回假(可通过 _取错误代码() 获得失败原因 #ERROR_WINHTTP_)。 （字节集提交方式） （必须在Open后使用）
.参数 Data, 字节集, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）
.参数 SendRetryCount, 整数型, 可空, 默认=0 执行Send或Recv失败后 自动重试最大次数 0=关闭Send失败重试



.子程序 GetResponseBody, 字节集, , 取返回字节集 （必须在Send后使用）


.子程序 GetResponseText, 文本型, , 取返回文本 （必须在Send后使用）


.子程序 GetResponseTextUtf8ToAnsi, 文本型, , 取返回文本 （自动Utf8转Ansi） （必须在Send后使用）


.子程序 GetStatus, 整数型, , 取状态码 （必须在Send后使用）


.子程序 GetStatusText, 文本型, , 取状态文本 （必须在Send后使用）


.子程序 GetAllResponseHeaders, 文本型, , 取得所有HTTP返回协议头 （必须在Send后使用）


.子程序 GetResponseHeader, 文本型, , 取得HTTP返回协议头 （必须在Send后使用）
.参数 Header, 文本型, , 协议头



.子程序 GetAllResponseCookies, 文本型, , 取得HTTP返回协议头中所有COOKIES （必须在Send后使用）


.子程序 GetResponseCookie, 文本型, , 取得HTTP返回协议头中指定Cookie键的值 （必须在Send后使用）
.参数 Name, 文本型, , Cookie键名



.子程序 GetResponseLocation, 文本型, , 取得HTTP返回协议头中的302重定向地址 （必须在Send后使用）
.参数 是否自动补全Url, 逻辑型, 可空, 智能判断并补全url (协议头+域名+端口+路径)



.子程序 SetTimeouts, 逻辑型, , 指定超时设置 （设置后一直有效） （要想本次访问就生效 请在Open前调用）
.参数 ResolveTimeout, 整数型, 可空, 解析超时，单位毫秒 留空=10000(10秒)
.参数 ConnectTimeout, 整数型, 可空, 连接超时，单位毫秒 留空=15000(15秒)
.参数 SendTimeout, 整数型, 可空, 发送超时，单位毫秒 留空=120000(120秒/2分钟)
.参数 ReceiveTimeout, 整数型, 可空, 接收超时，单位毫秒 留空=300000(300秒/5分钟) （注意：经测试 接收超时也会影响到POST上传超时）



.子程序 SetProxy, 逻辑型, , 设置或取消代理 （设置后一直有效）
.参数 Proxy, 文本型, 可空, 空=取消代理  HTTP代理="http=127.0.0.1:8080"  HTTPS代理=“127.0.0.1:8080”
.参数 User, 文本型, 可空, 代理帐号
.参数 Pass, 文本型, 可空, 代理密码



.子程序 SetCredentials, 逻辑型, , 指定身份验证凭据 （设置后一直有效） （必须在Open后使用）
.参数 UserName, 文本型, , 用户名
.参数 Password, 文本型, , 密码
.参数 AuthTargets, 整数型, 可空, 认证目标：留空=0  0=设置登录帐号密码 1=设置代理帐号密码  常量：#WINHTTP_AUTH_TARGET_
.参数 AuthScheme, 整数型, 可空, 认证方式：留空=1  常量：#WINHTTP_AUTH_SCHEME_



.子程序 SetOption, 逻辑型, , 设置WinHttp属性选项
.参数 Type, 整数型, 可空, 0=会话句柄 1=连接句柄 2=请求句柄
.参数 Option, 整数型, , 属性标志
.参数 ValueBuffer, 整数型, , 属性指针
.参数 BufferLength, 整数型, , 属性长度  整数型=4



.子程序 SetRedirect, 空白型, , 是否允许自动重定向 （设置后一直有效）
.参数 IsRedirect, 逻辑型, 可空, 真=允许 假=禁止 留空为真



.子程序 SetRequestHeader, 逻辑型, , 添加或替换HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称
.参数 Value, 文本型, , 协议头值 空文本为删除此协议头
.参数 Modifiers, 整数型, 可空, 标志 常量：#WINHTTP_ADDREQ_FLAG_



.子程序 DelRequestHeader, 逻辑型, , 删除HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称



.子程序 SetCookie, 逻辑型, , 快速设置Cookie信息 （AutoCookies模式0下 必须在Open后使用）
.参数 Cookie, 文本型, , 



.子程序 SetUserAgent, 逻辑型, , 快速设置User-Agent浏览器信息 （必须在Open后使用）
.参数 UserAgentValue, 文本型, 可空, 留空为：Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2) 



.子程序 SetReferer, 逻辑型, , 快速设置Referer来路信息 （必须在Open后使用）
.参数 RefererValue, 文本型, 可空, 留空为：本次访问的Url 



.子程序 SetAccept, 逻辑型, , 快速设置Accept信息 （必须在Open后使用）
.参数 AcceptValue, 文本型, 可空, 留空为：*/* 



.子程序 SetAcceptLanguage, 逻辑型, , 快速设置SetAccept-Language信息 （必须在Open后使用）
.参数 AcceptLanguageValue, 文本型, 可空, 留空为：zh-cn 



.子程序 SetContentType, 逻辑型, , 快速设置Content-Type信息 （必须在Open后使用）
.参数 ContentTypeValue, 文本型, 可空, 留空为：application/x-www-form-urlencoded 



.子程序 SetXMLHttpRequest, 逻辑型, , 快速设置x-requested-with 为 XMLHttpRequest （必须在Open后使用）


.子程序 SetFakeIP, 逻辑型, , 快速设置多重伪造IP协议头（包括：X-Forwarded-For,CLIENT_IP,VIA,REMOTE_ADDR） （必须在Open后使用）
.参数 FakeIP, 文本型, , 要告知服务器的伪造IP地址。例如：123.123.123.123 



.子程序 Cookies, 文本型, , 取/设内部Cookies （AutoCookies模式1下有效）
.参数 NewCookies, 文本型, 可空, 留空为取 空文本为清除 有数据为赋值



.子程序 CookieGet, 文本型, , 获取内部Cookies中的某个Cookie （AutoCookies模式1下有效）
.参数 Name, 文本型, , Cookie名称
.参数 是否附带名称, 逻辑型, 可空, 是否把Cookie名称附带上返回



.子程序 CookieAdd, 逻辑型, , 添加或替换Cookie到内部Cookies （AutoCookies模式1下有效）
.参数 Cookie, 文本型, , 单个或多个Cookie （例如：abc=123 或是 abc=123; def=456;g=nima）



.子程序 CookieDel, 逻辑型, , 删除内部Cookies中的Cookie （AutoCookies模式1下有效）
.参数 Cookie, 文本型, , 单个或多个Cookie或Cookie名称 （例如：abc 或是 abc=123 或是 或是 abc; def;g 或是 abc=123; def=456;g=nima;id）



.类模块 WinInet, , , WinInet (v4.0) By:Bints

.子程序 _hSession, 整数型, , 取/设内部会话句柄
.参数 Session, 整数型, 可空, 留空=获取 非空=设置



.子程序 _hConnect, 整数型, , 取/设内部连接句柄
.参数 Connect, 整数型, 可空, 留空=获取 非空=设置



.子程序 _hRequest, 整数型, , 取/设内部请求句柄
.参数 Request, 整数型, 可空, 留空=获取 非空=设置



.子程序 Auto, 空白型, , 设置自动补全模式 此模式开启后会自动帮你补全必要的协议头（目前只包括Content-Type,Accept,Accept-Language） （设置后一直有效） （必须在Open前使用）
.参数 IsAuto, 逻辑型, 可空, 留空为真 真=开启自动协议头补全 假=关闭自动协议头补全



.子程序 AutoCookies, 空白型, , 设置Cookies自动管理模式 （设置后一直有效） （必须在Open前使用）
.参数 Index, 整数型, 可空, 留空=1  1=类内部自动合并更新Cookies(此模式下可以配合独有方法Cookies CookieAdd CookieSet CookieDel 来取/设/添加/设置/删除)  2=缓存到本地(支持IES控件继承 注意:模式2不兼容多线程)



.子程序 Rest, 空白型, , 重置(初始化)WinHttp 释放所有数据 包括之前所有设置和Cookies
.参数 User_Agent, 文本型, 可空, 自定义用户浏览器协议头信息 User_Agent 留空则使用默认的浏览器信息



.子程序 Open, 逻辑型, , 打开一个HTTP连接
.参数 Method, 文本型, 可空, 例：POST、GET、HEAD 默认为:GET。
.参数 Url, 文本型, , 例：http://www.nixsw.com/。



.子程序 Send, 逻辑型, , 发送HTTP请求。成功返回真，失败返回假(可通过 _取错误代码() 获得失败原因 #ERROR_INTERNET_)。 （文本提交方式） （必须在Open后使用）
.参数 Data, 文本型, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）
.参数 SendRetryCount, 整数型, 可空, 默认=0 执行Send失败后 自动重试最大次数 0=关闭Send失败重试



.子程序 SendBin, 逻辑型, , 发送HTTP请求。成功返回真，失败返回假(可通过 _取错误代码() 获得失败原因 #ERROR_INTERNET_)。 （字节集提交方式） （必须在Open后使用）
.参数 Data, 字节集, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）
.参数 SendRetryCount, 整数型, 可空, 默认=0 执行Send失败后 自动重试最大次数 0=关闭Send失败重试



.子程序 GetResponseBody, 字节集, , 取返回字节集 （必须在Send后使用）


.子程序 GetResponseText, 文本型, , 取返回文本 （必须在Send后使用）


.子程序 GetResponseTextUtf8ToAnsi, 文本型, , 取返回文本 （自动Utf8转Ansi） （必须在Send后使用）


.子程序 GetStatus, 整数型, , 取状态码 （必须在Send后使用）


.子程序 GetStatusText, 文本型, , 取状态文本 （必须在Send后使用）


.子程序 GetAllResponseHeaders, 文本型, , 取得所有HTTP返回协议头 （必须在Send后使用）


.子程序 GetResponseHeader, 文本型, , 取得HTTP返回协议头 （必须在Send后使用）
.参数 Header, 文本型, , 协议头



.子程序 GetAllResponseCookies, 文本型, , 取得HTTP返回协议头中所有COOKIES （必须在Send后使用）


.子程序 GetResponseCookie, 文本型, , 取得HTTP返回协议头中指定Cookie键的值 （必须在Send后使用）
.参数 Name, 文本型, , Cookie键名



.子程序 GetResponseLocation, 文本型, , 取得HTTP返回协议头中的302重定向地址 （必须在Send后使用）
.参数 是否自动补全Url, 逻辑型, 可空, 智能判断并补全url (协议头+域名+端口+路径)



.子程序 SetTimeouts, 逻辑型, , 指定超时设置 （设置后一直有效） （要想本次访问就生效 请在Open前调用）
.参数 ConnectTimeout, 整数型, 可空, 连接超时，单位毫秒 留空=15000(15秒)
.参数 SendTimeout, 整数型, 可空, 发送超时，单位毫秒 留空=120000(120秒/2分钟)
.参数 ReceiveTimeout, 整数型, 可空, 接收超时，单位毫秒 留空=300000(300秒/5分钟)



.子程序 SetProxy, 逻辑型, , 设置或取消代理 （设置后一直有效）
.参数 Proxy, 文本型, 可空, 空=取消代理  HTTP代理="http=127.0.0.1:8080"  HTTPS代理=“127.0.0.1:8080”
.参数 User, 文本型, 可空, 代理帐号
.参数 Pass, 文本型, 可空, 代理密码



.子程序 SetCredentials, 逻辑型, , 指定身份验证凭据 （设置后一直有效） （必须在Open后使用）
.参数 UserName, 文本型, , 用户名
.参数 Password, 文本型, , 密码



.子程序 SetOption, 逻辑型, , 设置WinHttp属性选项
.参数 Type, 整数型, 可空, 0=会话句柄 1=连接句柄 2=请求句柄
.参数 Option, 整数型, , 属性标志
.参数 ValueBuffer, 整数型, , 属性指针
.参数 BufferLength, 整数型, , 属性长度  整数型=4



.子程序 SetRedirect, 空白型, , 是否允许自动重定向 （设置后一直有效） （必须在Open前使用）
.参数 IsRedirect, 逻辑型, 可空, 真=允许 假=禁止 留空为真



.子程序 SetIgnoreError, 空白型, , 是否自动忽略错误/证书错误 （设置后一直有效）
.参数 IsIgnoreError, 逻辑型, 可空, 留空=真 是否自动忽略错误/证书错误 真=自动忽略 假=不忽略



.子程序 SetGzipDecode, 空白型, , 自动Gzip解压开关（设置后一直有效）
.参数 IsGzipDecode, 逻辑型, 可空, 真=开启自动Gzip解压 假=关闭自动Gzip解压 留空=真



.子程序 SetRequestHeader, 逻辑型, , 添加或替换HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称
.参数 Value, 文本型, , 协议头值 空文本为删除此协议头
.参数 Modifiers, 整数型, 可空, 标志 常量：#HTTP_ADDREQ_FLAG_



.子程序 DelRequestHeader, 逻辑型, , 删除HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称



.子程序 SetCookie, 逻辑型, , 快速设置Cookie信息 
.参数 Cookie, 文本型, , 



.子程序 SetUserAgent, 逻辑型, , 快速设置User-Agent浏览器信息 （必须在Open后使用）
.参数 UserAgentValue, 文本型, 可空, 留空为：Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2) 



.子程序 SetReferer, 逻辑型, , 快速设置Referer来路信息 （必须在Open后使用）
.参数 RefererValue, 文本型, 可空, 留空为：本次访问的Url 



.子程序 SetAccept, 逻辑型, , 快速设置Accept信息 （必须在Open后使用）
.参数 AcceptValue, 文本型, 可空, 留空为：*/* 



.子程序 SetAcceptLanguage, 逻辑型, , 快速设置SetAccept-Language信息 （必须在Open后使用）
.参数 AcceptLanguageValue, 文本型, 可空, 留空为：zh-cn 



.子程序 SetContentType, 逻辑型, , 快速设置Content-Type信息 （必须在Open后使用）
.参数 ContentTypeValue, 文本型, 可空, 留空为：application/x-www-form-urlencoded 



.子程序 SetXMLHttpRequest, 逻辑型, , 快速设置x-requested-with 为 XMLHttpRequest （必须在Open后使用）


.子程序 SetFakeIP, 逻辑型, , 快速设置多重伪造IP协议头（包括：X-Forwarded-For,CLIENT_IP,VIA,REMOTE_ADDR） （必须在Open后使用）
.参数 FakeIP, 文本型, , 要告知服务器的伪造IP地址。例如：123.123.123.123



.子程序 Cookies, 文本型, , 取/设内部Cookies （必须在AutoCookies模式1下使用）
.参数 NewCookies, 文本型, 可空, 留空为取 空文本为清除 有数据为赋值



.子程序 CookieGet, 文本型, , 获取内部Cookies中的某个Cookie （必须在AutoCookies模式1下使用）
.参数 Name, 文本型, , Cookie名称
.参数 是否附带名称, 逻辑型, 可空, 是否把Cookie名称附带上返回



.子程序 CookieAdd, 逻辑型, , 添加或替换Cookie到内部Cookies （必须在AutoCookies模式1下使用）
.参数 Cookie, 文本型, , 单个或多个Cookie （例如：abc=123 或是 abc=123; def=456;g=nima）



.子程序 CookieDel, 逻辑型, , 删除内部Cookies中的Cookie （必须在AutoCookies模式1下使用）
.参数 Cookie, 文本型, , 单个或多个Cookie或Cookie名称 （例如：abc 或是 abc=123 或是 或是 abc; def;g 或是 abc=123; def=456;g=nima;id）



.类模块 WinHttpR, , , WinHttpRequest (v4.3) By:Bints

.子程序 _Object, 对象, , 取/设内部对象
.参数 NewObject, 对象, 可空, 



.子程序 GetLastError, 文本型, , 取上一次错误文本


.子程序 Auto, 空白型, , 设置自动补全模式 此模式开启后会自动帮你补全必要的协议头（目前只包括Content-Type,Accept,Accept-Language,Cache-Control） （设置后一直有效） （必须在Open前使用）
.参数 IsAuto, 逻辑型, 可空, 留空为真 真=开启自动协议头补全 假=关闭自动协议头补全



.子程序 AutoCookies, 空白型, , 设置Cookies自动管理模式 （设置后一直有效） （必须在Open前使用）
.参数 Index, 整数型, 可空, 留空=1 0=Winhttp内部自动处理Cookies(完全和Winhttpr5.1一样的特性)  1=类内部自动合并更新Cookies(此模式下可以配合独有方法Cookies CookieAdd CookieSet CookieDel 来取/设/添加/设置/删除)  2=缓存到本地(支持IES控件继承 注意:模式2不兼容多线程)



.子程序 Rest, 空白型, , 重置(初始化)WinHttp 释放所有数据 包括之前所有设置和Cookies


.子程序 Open, 空白型, , 打开一个HTTP连接
.参数 Method, 文本型, 可空, 例：POST、GET、HEAD 默认为:GET。
.参数 Url, 文本型, , 例：http://www.nixsw.com/。
.参数 Async, 逻辑型, 可空, 是否异步 默认为:假=同步模式 （注意：如果为异步 则不支持AutoCookies模式1和模式2 只能用模式0）



.子程序 SendBin, 空白型, , 发送HTTP请求 （字节集提交方式） （必须在Open后使用）
.参数 Data, 字节集, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）



.子程序 Send, 空白型, , 发送HTTP请求 （必须在Open后使用）
.参数 Data, 文本型, 可空, 提交数据，可以被省略
.参数 NopNullCookieName, 逻辑型, 可空, 默认=假 自动更新Cookies时忽略掉Cookie键值为空的Cookie （必须在'非AutoCookies模式0'下使用）



.子程序 WaitForResponse, 逻辑型, , 等待异步发送完成 （以秒为单位） （必须在Send后使用）
.参数 Timeout, 整数型, 可空, 超时，单位秒



.子程序 Abort, 空白型, , 中止正在进行的异步操作 （必须在Send后使用）


.子程序 GetResponseBody, 字节集, , 取返回字节集 （必须在Send后使用）


.子程序 GetResponseText, 文本型, , 取返回文本 （必须在Send后使用）


.子程序 GetResponseText2, 文本型, , 取返回文本（有时会自动转码） （必须在Send后使用）


.子程序 GetResponseTextUtf8ToAnsi, 文本型, , 取返回文本 （自动Utf8转Ansi） （必须在Send后使用）


.子程序 GetResponseStream, 变体型, , 取返回字节流 （必须在Send后使用）


.子程序 GetStatus, 整数型, , 取状态码 （必须在Send后使用）


.子程序 GetStatusText, 文本型, , 取状态文本 （必须在Send后使用）


.子程序 GetAllResponseHeaders, 文本型, , 取得所有HTTP返回协议头 （必须在Send后使用）


.子程序 GetResponseHeader, 文本型, , 取得HTTP返回协议头 （必须在Send后使用）
.参数 Header, 文本型, , 协议头



.子程序 GetAllResponseCookies, 文本型, , 取得HTTP返回协议头中所有COOKIES （必须在Send后使用）


.子程序 GetResponseCookie, 文本型, , 取得HTTP返回协议头中指定Cookie键的值 （必须在Send后使用）
.参数 Name, 文本型, , Cookie键名



.子程序 GetResponseLocation, 文本型, , 取得HTTP返回协议头中的302重定向地址 （必须在Send后使用）
.参数 是否自动补全Url, 逻辑型, 可空, 智能判断并补全url (协议头+域名+端口+路径)



.子程序 SetTimeouts, 空白型, , 指定超时设置 （设置后一直有效） （要想本次访问就生效 请在Open前调用）
.参数 ResolveTimeout, 整数型, 可空, 解析超时，单位毫秒 留空=10000(10秒)
.参数 ConnectTimeout, 整数型, 可空, 连接超时，单位毫秒 留空=15000(15秒)
.参数 SendTimeout, 整数型, 可空, 发送超时，单位毫秒 留空=120000(2分钟)
.参数 ReceiveTimeout, 整数型, 可空, 接收超时，单位毫秒 留空=300000(5分钟)



.子程序 SetProxy, 空白型, , 设置或取消代理 （设置后一直有效）
.参数 Proxy, 文本型, 可空, 空=取消代理  例如：127.0.0.1:8080
.参数 User, 文本型, 可空, 代理帐号
.参数 Pass, 文本型, 可空, 代理密码



.子程序 SetCredentials, 空白型, , 指定身份验证凭据 （设置后一直有效） （必须在Open后使用）
.参数 UserName, 文本型, , 用户名
.参数 Password, 文本型, , 密码
.参数 AuthTargets, 整数型, 可空, 认证目标：留空=0  0=设置登录帐号密码 1=设置代理帐号密码  



.子程序 SetClientCertificate, 空白型, , 指定一个客户端证书
.参数 ClientCertificate, 文本型, , 



.子程序 SetAutoLogonPolicy, 空白型, , 指定是否应自动发送凭据
.参数 AutoLogonPolicy, 整数型, , #AutoLogonPolicy



.子程序 SetOption, 变体型, , 读取或者设置属性 (设置后一直有效)
.参数 Option, 整数型, , 属性类型,#WinHttpRequestOption
.参数 Value_I, 整数型, 可空, 属性值(四选一),此参数为空则为读，否则为设置
.参数 Value_T, 文本型, 可空, 属性值(四选一),此参数为空则为读，否则为设置
.参数 Value_B, 字节集, 可空, 属性值(四选一),此参数为空则为读，否则为设置
.参数 Value, 变体型, 可空, 属性值(四选一),此参数为空则为读，否则为设置



.子程序 SetRedirect, 空白型, , 是否允许自动重定向 （设置后一直有效）
.参数 IsRedirect, 逻辑型, 可空, 真=允许 假=禁止 留空为真



.子程序 SetIgnoreError, 空白型, , 是否自动忽略错误/证书错误 （设置后一直有效）
.参数 IsIgnoreError, 逻辑型, 可空, 留空=真 是否自动忽略错误/证书错误 真=自动忽略 假=不忽略



.子程序 SetRequestHeader, 空白型, , 添加或替换HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称
.参数 Value, 文本型, , 协议头值 空文本为删除此协议头



.子程序 DelRequestHeader, 空白型, , 删除HTTP协议头 （本次访问有效） （必须在Open后使用）
.参数 Header, 文本型, , 协议头名称



.子程序 SetCookie, 空白型, , 快速设置Cookie信息 （AutoCookies模式0下 必须在Open后使用）
.参数 Cookie, 文本型, , 



.子程序 SetUserAgent, 空白型, , 快速设置User-Agent浏览器信息 （必须在Open后使用）
.参数 UserAgentValue, 文本型, 可空, 留空为：Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2) 



.子程序 SetReferer, 空白型, , 快速设置Referer来路信息 （必须在Open后使用）
.参数 RefererValue, 文本型, 可空, 留空为：本次访问的Url 



.子程序 SetAccept, 空白型, , 快速设置Accept信息 （必须在Open后使用）
.参数 AcceptValue, 文本型, 可空, 留空为：*/* 



.子程序 SetAcceptLanguage, 空白型, , 快速设置SetAccept-Language信息 （必须在Open后使用）
.参数 AcceptLanguageValue, 文本型, 可空, 留空为：zh-cn 



.子程序 SetContentType, 空白型, , 快速设置Content-Type信息 （必须在Open后使用）
.参数 ContentTypeValue, 文本型, 可空, 留空为：application/x-www-form-urlencoded 



.子程序 SetXMLHttpRequest, 空白型, , 快速设置x-requested-with 为 XMLHttpRequest （必须在Open后使用）


.子程序 SetFakeIP, 空白型, , 快速设置多重伪造IP协议头（包括：X-Forwarded-For,CLIENT_IP,VIA,REMOTE_ADDR） （必须在Open后使用）
.参数 FakeIP, 文本型, , 要告知服务器的伪造IP地址。例如：123.123.123.123 



.子程序 Cookies, 文本型, , 取/设内部Cookies （必须在AutoCookies模式1下使用）
.参数 NewCookies, 文本型, 可空, 留空为取 空文本为清除 有数据为赋值



.子程序 CookieGet, 文本型, , 获取内部Cookies中的某个Cookie （必须在AutoCookies模式1下使用）
.参数 Name, 文本型, , Cookie名称
.参数 是否附带名称, 逻辑型, 可空, 是否把Cookie名称附带上返回



.子程序 CookieAdd, 逻辑型, , 添加或替换Cookie到内部Cookies （必须在AutoCookies模式1下使用）
.参数 Cookie, 文本型, , 单个或多个Cookie （例如：abc=123 或是 abc=123; def=456;g=nima）



.子程序 CookieDel, 逻辑型, , 删除内部Cookies中的Cookie （必须在AutoCookies模式1下使用）
.参数 Cookie, 文本型, , 单个或多个Cookie或Cookie名称 （例如：abc 或是 abc=123 或是 或是 abc; def;g 或是 abc=123; def=456;g=nima;id）



.类模块 正则表达式, , , By:彗星正则表达式

.子程序 创建, 逻辑型, , 根据指定的正则表达式文本创建一个正则表达式对象。本对象中的原有内容将被释放
.参数 正则表达式文本, 文本型, , 比如“易语言4\.0(模块|支持库)?”
.参数 忽略大小写, 逻辑型, 可空, 可以被省略。默认值为真。本参数指定这个正则表达式在创建成功后进行匹配、搜索、替换时，是否区分大小写。
.参数 匹配多行, 逻辑型, 可空, 可以被省略。默认值为真。如果本成员值为真，字符“^”不仅匹配目标文本的开头，而且匹配目标文本中换行符（字符(10)，字符(13)或 #换行符）的后面；字符“$”不仅匹配目标文本的结尾，而且匹配目标文本中换行符的前面。否则字符“^”仅仅匹配目标文本的开头，“$”也仅仅匹配目标文本的结尾。
.参数 全局匹配, 逻辑型, 可空, 



.子程序 取文本, 文本型, , 返回以文本形式表示的正则表达式。如果该对象尚未创建，则返回空文本。本命令为高级对象成员命令。


.子程序 替换, 文本型, , 替换在正则表达式查找中找到的文本。
.参数 欲被替换的文本, 文本型, , 将要进行文本替换的字符串
.参数 用作替换的文本, 文本型, 可空, 用作替换的文本



.子程序 搜索全部, 整数型, , 使用指定的正则表达式搜索指定文本中与该表达式匹配的所有子文本。返回匹配结果数量
.参数 欲被搜索的文本, 文本型, , 



.子程序 取匹配数量, 整数型, , 


.子程序 取匹配文本, 文本型, , 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始



.子程序 取子匹配文本, 文本型, , 
.参数 匹配索引, 整数型, , 第几个匹配文本，索引值从1开始
.参数 子表达式索引, 整数型, , 欲取其值的子表达式。该参数对应与正则表达式中的一个子表达式（以圆括号标记）。索引从1开始。



.子程序 取子表达式个数, 整数型, , 


.类模块 JScript, , , JScript

.子程序 GetError, 文本型, , 取错误代码


.子程序 GetObject, 对象, , 取对象


.子程序 AddCode, 整数型, , 添加代码
.参数 代码, 文本型, , 



.子程序 ExecuteStatement, 整数型, , 执行指定的语句。
.参数 语句, 文本型, , 



.子程序 Reset, 整数型, , 重置和释放所有已经添加的代码和对象。


.子程序 Run, 变体型, , 运行指定过程并返回结果。
.参数 过程名, 文本型, , 
.参数 参数1, 变体型, 可空, 
.参数 参数2, 变体型, 可空, 
.参数 参数3, 变体型, 可空, 
.参数 参数4, 变体型, 可空, 
.参数 参数5, 变体型, 可空, 



.子程序 Eval, 变体型, , 计算表达式并返回结果。（可直接.取文本（）取回数据。）
.参数 表达式, 文本型, , 



.子程序 Rand, 文本型, , 取随机数 random() 返回介于 0 和 1 之间的伪随机数


.子程序 GetTime, 文本型, , 取时间戳 gettime()


.子程序 GetTimeAdd, 文本型, , 取时间戳带偏移 gettime()+int
.参数 偏移数, 整数型, 可空, 



.子程序 Escape, 文本型, , URL编码 escape() （不进行编码的类型包括：字母 数字 @ * / +）
.参数 URLCode, 文本型, , 待编码的字符串文本



.子程序 UnEscape, 文本型, , URL解码 unescape()
.参数 URLCode, 文本型, , 待解码的字符串文本



.子程序 EnCodeURI, 文本型, , URL编码 encodeURI() （不进行编码的类型包括：字母 数字 ! @ # $ & * ( ) = : / ; ? + '）
.参数 URLCode, 文本型, , 待编码的字符串文本



.子程序 DeCodeURL, 文本型, , URL解码 decodeURI()
.参数 URLCode, 文本型, , 待解码的字符串文本



.子程序 EnCodeURIComponent, 文本型, , URL编码 encodeURIComponent() （不进行编码的类型包括：字母 数字 ! * ( ) '）
.参数 URLCode, 文本型, , 待编码的字符串文本



.子程序 DeCodeURIComponent, 文本型, , URL解码 decodeURIComponent()
.参数 URLCode, 文本型, , 待解码的字符串文本



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 URLEncode, 文本型, , Url编码
.参数 StrDate, 文本型, , 



.子程序 URLDecode, 文本型, , Url解码
.参数 StrDate, 文本型, , 



.子程序 URLEncodeUtf8, 文本型, , Url编码 Utf8
.参数 StrDate, 文本型, , 



.子程序 URLDecodeUtf8, 文本型, , Url解码 Utf8
.参数 StrDate, 文本型, , 



.子程序 UnicodeToAnsi, 文本型, , Unicode宽文本 转 Ansi文本
.参数 参数_Unicode数据, 字节集, , 
.参数 参数_代码页, 整数型, 可空, 默认为：936(简体中文)
.参数 返回_结果字符长度, 整数型, 参考 可空, 



.子程序 AnsiToUnicode, 字节集, , Ansi文本 转 Unicode宽文本(字节集)
.参数 参数_Ansi文本, 文本型, , 
.参数 参数_代码页, 整数型, 可空, 默认为：936(简体中文)
.参数 返回_宽字符长度, 整数型, 参考 可空, 



.子程序 UnicodeToUtf8, 字节集, , Unicode宽文本 转 Utf8文本(字节集)
.参数 参数_Unicode数据, 字节集, , 



.子程序 Utf8ToUnicode, 字节集, , Utf8文本(字节集) 转 Unicode宽文本(字节集)
.参数 参数_Utf8数据, 字节集, , 
.参数 返回_宽字符长度, 整数型, 参考 可空, 



.子程序 AnsiToUtf8, 字节集, , Ansi文本 转 Utf8文本(字节集)
.参数 参数_Ansi文本, 文本型, , 
.参数 参数_代码页, 整数型, 可空, 默认为：936(简体中文)



.子程序 Utf8ToAnsi, 文本型, , Utf8文本 转 Ansi文本
.参数 参数_Utf8数据, 字节集, , 
.参数 参数_代码页, 整数型, 可空, 默认为：936(简体中文)



.子程序 AnsiToUtf8Str, 文本型, , Ansi文本 转 Utf8文本
.参数 参数_Ansi文本, 文本型, , 
.参数 参数_代码页, 整数型, 可空, 默认为：936(简体中文)



.子程序 文本_取左边, 文本型, , 根据提供的分割特征 取回特征左边的文本
.参数 原文本, 文本型, , 
.参数 分割特征, 文本型, , 
.参数 返回时保留特征, 逻辑型, 可空, 默认 假  返回的结果保留分割特征符。
.参数 特征不存在返回原文本, 逻辑型, 可空, 默认 假  假=如果倒找文本找不到特征直接返回空。真=找不到特征直接返回原文本。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_取右边, 文本型, , 根据提供的分割特征 取回特征左边的文本
.参数 原文本, 文本型, , 
.参数 分割特征, 文本型, , 
.参数 返回时保留特征, 逻辑型, 可空, 默认 假  返回的结果保留分割特征符。
.参数 特征不存在返回原文本, 逻辑型, 可空, 默认 假  假=如果倒找文本找不到特征直接返回空。真=找不到特征直接返回原文本。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_取中间, 文本型, , 根据提供的 左边文本 和 右边文本 来 截取文本
.参数 原文本, 文本型, , 
.参数 左边特征, 文本型, , 
.参数 右边特征, 文本型, , 
.参数 开始位置, 整数型, 可空, 可指定开始寻找的位置，为空则不指定
.参数 返回时包含特征, 逻辑型, 可空, 默认 假
.参数 特征不存在返回原文本, 逻辑型, 可空, 默认 假  假=如果倒找文本找不到特征直接返回空。真=找不到特征直接返回原文本。
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_取中间数组, 整数型, , 提供两个文本参数 左边 右边 取回两个文本中间的结果文本的数组
.参数 源文件, 文本型, , 
.参数 左参数, 文本型, , 
.参数 右参数, 文本型, , 
.参数 结果数组, 文本型, 可空 数组, 
.参数 中间不含, 文本型, 可空, 
.参数 是否不区分大小写, 逻辑型, 可空, 初始值为“假”。为真不区分大小写，为假区分。



.子程序 文本_删除指定, 文本型, , 去除指定的文本
.参数 原文本, 文本型, , 
.参数 要去除的文本, 文本型, , 
.参数 指定去除次数, 整数型, 可空, 
.参数 是否区分大小写, 逻辑型, 可空, 留空=真



.子程序 文本_取随机字符数字串, 文本型, , 取大小写字母与数字的随机文本串
.参数 长度, 整数型, , 随机文本串长度
.参数 是否同字, 逻辑型, 可空, 



.子程序 文本_取随机字符串, 文本型, , 取小写字母的随机文本串 如果需要 请自己 到大写
.参数 长度, 整数型, , 随机文本串长度
.参数 是否同字, 逻辑型, 可空, 



.子程序 文本_取随机数字串, 文本型, , 返回 0-9的数字串
.参数 位数, 整数型, , 
.参数 是否同, 逻辑型, 可空, 



.子程序 文本_取随机汉字串, 文本型, , 取随机汉字文本串
.参数 长度, 整数型, , 随机文本串长度
.参数 是否同字, 逻辑型, 可空, 



.子程序 文本_删首尾换行符, 文本型, , 
.参数 文本数据, 文本型, , 



.子程序 文本_取拼音, 文本型, , 获取能识别的汉字的拼音
.参数 要取的文本, 文本型, , 
.参数 是否用空格隔开, 逻辑型, 可空, 
.参数 是否过滤无法识别的, 逻辑型, 可空, 



.子程序 文本_取特定类型, 文本型, , 取出特定的中文、英文、数字、标点符号，
.参数 文本参数, 文本型, , 
.参数 保留中文, 逻辑型, , 
.参数 保留英文, 逻辑型, , 
.参数 保留数字, 逻辑型, , 
.参数 保留标点, 逻辑型, , 



.子程序 GZIP_模块释放, 空白型, , 调用压缩或解压函数前，必须确保程序目录或系统目录下有gzip.dll模块。如果没有，请先调用此函数释放
.参数 模块目录, 整数型, 可空, 0.程序目录 1.系统目录



.子程序 GZIP_压缩, 字节集, , 调用函数前，必须确保程序目录或系统目录下有gzip.dll模块。如果没有，请先调用 GZIP_模块释放()
.参数 inData, 字节集, , 



.子程序 GZIP_解压, 字节集, , 调用函数前，必须确保程序目录或系统目录下有gzip.dll模块。如果没有，请先调用 GZIP_模块释放()
.参数 inData, 字节集, , 



.子程序 Base64Encode, 字节集, , Base64编码
.参数 待编码数据, 字节集, , 



.子程序 Base64Decode, 字节集, , Base64解码
.参数 待解码数据, 字节集, , 



.子程序 GetTime10, 文本型, , 取现行时间戳文本 （10位 不带毫秒） （自制函数 比调用JScript对象效率要快的多）
.参数 GMT, 逻辑型, 可空, 



.子程序 GetTime, 文本型, , 取现行时间戳文本 （13位 带毫秒） （自制函数 比调用JScript对象效率要快的多）
.参数 GMT, 逻辑型, 可空, 



.类模块 AndroidQQ, , , 

.程序集变量 Tcp, 未知类型0x50002, , , 
.程序集变量 Keep, 逻辑型, , , 
.程序集变量 m_bin, 字节集, , , 
.程序集变量 qq, 未知类型0x41010B28, , , 
.程序集变量 Device, 未知类型0x41010B29, , , 
.程序集变量 Tea, 未知类型0x49010B2A, , , 
.程序集变量 Tlv, 未知类型0x49010B2B, , , 
.程序集变量 IsToken_Login, 逻辑型, , , 是否令牌登录
.程序集变量 last_error, 文本型, , , 
.程序集变量 好友消息回调指针, 子程序指针, , , 
.程序集变量 好友列表回调指针, 子程序指针, , , 
.程序集变量 Q群列表回调指针, 子程序指针, , , 
.程序集变量 QQ群成员列表回调指针, 子程序指针, , , 
.程序集变量 获取加好友设置回调指针, 子程序指针, , , 
.程序集变量 按条件查找陌生人回调指针, 子程序指针, , , 
.程序集变量 FriendListS, 未知类型0x41010B2C, , "0", 
.程序集变量 TroopListS, 未知类型0x41010B2D, , "0", 
.程序集变量 TroopMemberListS, 未知类型0x41010B2E, , "0", 
.程序集变量 NearByPeopleS, 未知类型0x41010B2F, , "0", 
.程序集变量 类标识, 整数型, , , 
.程序集变量 RespCondSearchdata, 未知类型0x41010B30, , , 
.程序集变量 RespCondSearchInfoS, 未知类型0x41010B31, , "0", 
.程序集变量 匿名程序集变量_1892, 空白型, , , 
.程序集变量 局_FeedsId, 文本型, , , 
.程序集变量 局_评论结果, 逻辑型, , , 
.程序集变量 局_评论失败原因, 文本型, , , 
.程序集变量 局_关注结果, 逻辑型, , , 
.程序集变量 局_SmsBin, 文本型, , , 
.程序集变量 匿名程序集变量_1898, 空白型, , , 
.程序集变量 局_查询Tinyid结果, 文本型, , , 
.程序集变量 类获取好友自定义参数, 整数型, , , 
.程序集变量 类获取群自定义参数, 整数型, , , 
.程序集变量 匿名程序集变量_1902, 空白型, , , 
.程序集变量 局_好友消息_图片_目标, 长整数型, , , 
.程序集变量 局_上传图片, 字节集, , , 
.程序集变量 局_上传图片_ID, 字节集, , , 
.程序集变量 离线文件指针, 子程序指针, , , 
.程序集变量 局_上传类型, 整数型, , , 
.程序集变量 匿名程序集变量_1908, 空白型, , , 
.程序集变量 局_当前微信号, 文本型, , , 
.程序集变量 局_图片是否上传完毕, 逻辑型, , , 
.程序集变量 局_好友群发是否完毕, 逻辑型, , , 
.程序集变量 局_QQ群消息_图片_目标, 长整数型, , , 
.程序集变量 局_群成员消息_图片_目标QQ, 长整数型, , , 
.程序集变量 局_群成员消息_图片_目标群Code, 长整数型, , , 
.程序集变量 局_是否群成员消息, 逻辑型, , , 
.程序集变量 匿名程序集变量_1916, 空白型, , , 
.程序集变量 局_手机查询结果逻辑, 逻辑型, , , 
.程序集变量 局_手机查询结果数据, 未知类型0x41010B32, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 GenECDHKey, 未知类型0x41010B33, , 
.局部变量 tmpKey, 字节集, 静态, , 
.局部变量 rrr, 字节型, , "40", 
.局部变量 ec_key, 整数型, , , 
.局部变量 key, 整数型, , , 
.局部变量 ec_point2, 整数型, , , 
.局部变量 vSharekey, 字节集, , , 
.局部变量 ret, 整数型, , , 
.局部变量 ec_group, 整数型, , , 
.局部变量 ec_point, 整数型, , , 
.局部变量 len, 整数型, , , 
.局部变量 kdf, 子程序指针, , , 
.局部变量 pubkey, 字节集, , , 公钥
.局部变量 sharekey, 文本型, , , 密钥
.局部变量 c_priv_key_BN, 整数型, , , 
.局部变量 v29, 字节集, , , 
.局部变量 cli_priv_key, 字节集, , , 
.局部变量 ECDH_struct, 未知类型0x41010B33, , , 
.局部变量 tk, 字节集, , , 

赋值 (tk, 未知函数_67177270 (“04928d8850673088b343264e0c6bacb8496d697799f37211deb25bb73906cb089fea9639b4e0260498b51a992d50813da8”))
赋值 (ec_key, 未知函数_167840564 (711))
.如果真 (不等于 (ec_key, 0))
    赋值 (key, 未知函数_167840565 (ec_key))
    赋值 (ec_point2, 未知函数_167840567 (ec_key))
    赋值 (c_priv_key_BN, 未知函数_167840570 (ec_key))
    .如果真 (不等于 (ec_point2, 0))
        赋值 (ec_group, 未知函数_167840568 (ec_key))
        赋值 (tmpKey, 取空白字节集 (40))
        赋值 (ret, 未知函数_167840569 (ec_group, ec_point2, 2, tmpKey, 67, 0))
        .如果 (大于 (ret, 0))
            赋值 (v29, 取空白字节集 (255))
            赋值 (len, 未知函数_167840571 (c_priv_key_BN, v29))
            赋值 (cli_priv_key, 取字节集左边 (v29, len))
            赋值 (ECDH_struct., cli_priv_key)
             ' 输出调试文本 (“客户端私钥:” ＋ 字节集到十六进制文本 (cli_priv_key))
             ' pubkey ＝ 取空白字节集 (25)
            赋值 (pubkey, 取字节集左边 (tmpKey, 25))
             ' 输出调试文本 (“客户端公钥” ＋ 字节集到十六进制文本 (pubkey))
            赋值 (ECDH_struct., pubkey)
             ' ’Array.Copy(tmpKey, pubkey, 25)
            赋值 (ec_group, 未知函数_167840568 (ec_key))
            
            赋值 (ec_point, 未知函数_167840572 (ec_group))
            
            赋值 (ret, 未知函数_167840573 (ec_group, ec_point, tk, 取字节集长度 (tk), 0))
            
            .如果 (大于 (ret, 0))
                赋值 (tmpKey, 取空白字节集 (40))
                
                赋值 (len, 未知函数_167840574 (tmpKey, 512, ec_point, ec_key, kdf))
                
                .如果 (大于 (len, 0))
                    赋值 (vSharekey, 取字节集左边 (tmpKey, len))
                     ' ’调试输出 (字节集到十六进制文本 (vSharekey))
                    赋值 (sharekey, 未知支持库函数_2 (vSharekey))
                    赋值 (ECDH_struct., 未知函数_67177270 (sharekey))
                     ' 调试输出 (“共享密钥:” ＋ sharekey)
                    未知函数_167840575 (ec_key)
                .否则
                    
                .如果结束
                
            .否则
                
            .如果结束
            
        .否则
            
        .如果结束
         ' EC_GROUP_free (ec_group)
    .如果真结束
    
.如果真结束
返回 (ECDH_struct)

.子程序 GenECDHKeyEx, 字节集, , 
.参数 peerRawPublicKey, 字节集, , 
.参数 c_pub_key, 字节集, , 
.参数 c_pri_key, 字节集, , 

.局部变量 prikeyBN, 整数型, , , 
.局部变量 ec_key, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 ecGroup, 整数型, , , 
.局部变量 bigNum, 整数型, , , 
.局部变量 ree, 整数型, , , 
.局部变量 v33, 整数型, , , 
.局部变量 sharekey, 字节集, , , 
.局部变量 result, 文本型, , , 
.局部变量 kdf, 子程序指针, , , 
.局部变量 pubkey, 字节集, , , 

赋值 (pubkey, c_pub_key)
赋值 (ec_key, 未知函数_167840564 (711))
赋值 (prikeyBN, 未知函数_167840579 (c_pri_key, 取字节集长度 (c_pri_key), 0))
赋值 (ret, 未知函数_167840580 (ec_key, prikeyBN)) ' //设置客户端客户端私钥
未知函数_167840581 (prikeyBN)

赋值 (ecGroup, 未知函数_167840568 (ec_key))
赋值 (bigNum, 未知函数_167840572 (ecGroup))
赋值 (ree, 未知函数_167840573 (ecGroup, bigNum, peerRawPublicKey, 取字节集长度 (peerRawPublicKey), 0)) ' //使用服务器返回的解密

赋值 (v33, 未知函数_167840574 (pubkey, 24, bigNum, ec_key, kdf))

赋值 (sharekey, 取空白字节集 (v33))
赋值 (sharekey, 取字节集左边 (pubkey, v33))
赋值 (result, 未知支持库函数_2 (sharekey))
 ' 调试输出 (“共享密钥:” ＋ result)

未知函数_167840575 (ec_key)
返回 (未知函数_67177270 (result))

.子程序 Socks5_握手, 字节集, , 默认匿名连接
返回 ({ 5, 1, 0 })

.子程序 Socks5_连接指定, 字节集, , 
.参数 Ip, 文本型, , 
.参数 Port, 整数型, , 
.参数 是否为域名, 逻辑型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 iputf8, 字节集, , , 
.局部变量 IpA, 文本型, , "0", 
.局部变量 IpHex, 文本型, , , 
.局部变量 Hex, 文本型, , , 
.局部变量 i, 整数型, , , 

赋值 (iputf8, 未知函数_67177287 (Ip))
赋值 (iputf8, 取字节集左边 (iputf8, 相减 (取字节集长度 (iputf8), 1)))

赋值 (IpA, 分割文本 (Ip, “.”, ))
.计次循环首 (取数组成员数 (IpA), i)
    赋值 (Hex, 未知函数_67177293 (到长整数 (IpA [i])))
    .如果真 (等于 (取文本长度 (Hex), 1))
        赋值 (Hex, 相加 (“0”, Hex))
    .如果真结束
    赋值 (IpHex, 相加 (IpHex, Hex))
.计次循环尾 ()

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“05”)
pack.未知函数_67177289 (“01”)
pack.未知函数_67177289 (“00”)
.如果 (是否为域名)
    pack.未知函数_67177289 (“03”) ' 域名
    pack.未知函数_67177290 (取字节集长度 (iputf8))
    pack.未知函数_67177291 (iputf8)
.否则
    pack.未知函数_67177289 (“01”) ' ip
    pack.未知函数_67177289 (IpHex)
.如果结束
pack.未知函数_67177292 (Port)
赋值 (Bin, pack.未知函数_67177294 ())
返回 (Bin)

.子程序 Tcp_Keep, 空白型, , 
.局部变量 Bin, 字节集, , , 
.局部变量 Suc, 逻辑型, , , 
.局部变量 wait, 整数型, , , 
.局部变量 len, 整数型, , , 
.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 req, 未知类型0x49010B46, , , 

赋值 (wait, 5000)
.判断循环首 (等于 (Keep, 真))
    赋值 (Bin, Tcp.未知支持库函数_10 (wait, Suc))
    .如果真 (Suc)
        赋值 (m_bin, 相加 (m_bin, Bin))
        unPack.未知函数_67177296 (m_bin)
        
        .判断循环首 (大于或等于 (unPack.未知函数_67177297 (), 4))
            赋值 (len, unPack.未知函数_67177298 ())
            .如果 (小于或等于 (len, 相加 (unPack.未知函数_67177297 (), 4)))
                赋值 (Bin, unPack.未知函数_67177299 (相减 (len, 4)))
                Fun_Recv (Bin)
                赋值 (m_bin, unPack.未知函数_67177300 ())
                unPack.未知函数_67177296 (m_bin)
            .否则
                req.未知函数_67177288 ()
                req.未知函数_67177301 (len)
                req.未知函数_67177291 (unPack.未知函数_67177300 ())
                unPack.未知函数_67177296 (req.未知函数_67177294 ())
                跳出循环 ()
            .如果结束
            处理事件 ()
        .判断循环尾 ()
    .如果真结束
    处理事件 ()
.判断循环尾 ()

.子程序 Fun_Send, 字节集, , 发送数据包至服务器
.参数 bin, 字节集, , 
.参数 wait, 整数型, 可空, 

.局部变量 suc, 逻辑型, , , 

Tcp.未知支持库函数_11 (bin, 3000)
赋值 (qq., 未知函数_67177302 (相加 (未知函数_67177303 (qq.), 1)))
.如果真 (是否为空 (wait))
    返回 ({  })
.如果真结束
赋值 (bin, Tcp.未知支持库函数_10 (wait, suc))
.如果真 (等于 (suc, 假))
    赋值 (bin, {  })
.如果真结束
返回 (bin)

.子程序 Fun_Recv, 空白型, , 
.参数 Data, 字节集, , 

.局部变量 bin, 字节集, , , 
.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 len, 整数型, , , 
.局部变量 serviceCmd, 文本型, , , 
.局部变量 head_len, 整数型, , , 
.局部变量 body_bin, 字节集, , , 
.局部变量 suc, 逻辑型, , , 
.局部变量 bin_len, 整数型, , , 
.局部变量 计次, 整数型, , , 

unPack.未知函数_67177296 (Data)
赋值 (bin_len, unPack.未知函数_67177298 ())
.如果真 (不等于 (寻找字节集 (Data, qq., ), -1))
    .判断循环首 (小于 (取字节集长度 (Data), bin_len))
        赋值 (Data, 相加 (Data, Tcp.未知支持库函数_10 (3000, suc)))
        调试输出 (“循环接收”)
    .判断循环尾 ()
.如果真结束
赋值 (bin, Un_pack (Data))
赋值 (bin, Tea.未知函数_67177305 (bin, qq.))
 ' ---------------------------------------
赋值 (len, 取字节集长度 (bin))
unPack.未知函数_67177296 (bin)

赋值 (head_len, unPack.未知函数_67177298 ())
赋值 (bin, unPack.未知函数_67177299 (相减 (head_len, 4)))
赋值 (body_bin, unPack.未知函数_67177300 ())

unPack.未知函数_67177296 (bin)
unPack.未知函数_67177298 ()
.判断开始 (等于 (unPack.未知函数_67177299 (4), { 0, 0, 0, 0 }))
    unPack.未知函数_67177299 (4)
.默认
    unPack.未知函数_67177299 (相减 (unPack.未知函数_67177298 (), 4))
.判断结束

赋值 (serviceCmd, 到文本 (unPack.未知函数_67177299 (相减 (unPack.未知函数_67177298 (), 4))))
调试输出 (serviceCmd)
.判断开始 (等于 (serviceCmd, “wtlogin.login”))
    Un_Pack_Login (body_bin)
.判断 (等于 (serviceCmd, “StatSvc.register”))
    .如果真 (IsToken_Login)
        赋值 (qq.)

.子程序 Un_pack, 字节集, , 
.参数 bin, 字节集, , 
.参数 bool, 逻辑型, 可空, 

.局部变量 pos1, 整数型, , , 

赋值 (pos1, 寻找字节集 (bin, qq., ))
赋值 (bin, 取字节集右边 (bin, 相加 (相减 (取字节集长度 (bin), pos1, 取字节集长度 (qq.)), 1)))
.如果真 (bool)
    赋值 (pos1, 寻找字节集 (bin, qq., ))
    赋值 (bin, 取字节集右边 (bin, 相加 (相减 (取字节集长度 (bin), pos1, 取字节集长度 (qq.)), 1)))
.如果真结束
返回 (bin)

.子程序 Un_Pack_Login, 逻辑型, , 
.参数 bin, 字节集, , 

.局部变量 len, 整数型, , , 
.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 URL, 文本型, , , 

赋值 (bin, Un_Pack_Login_Pc (bin))
.如果真 (等于 (取字节集长度 (bin), 0))
    返回 (假)
.如果真结束
unPack.未知函数_67177296 (bin)
unPack.未知函数_67177311 ()
unPack.未知函数_67177312 ()
unPack.未知函数_67177298 ()
赋值 (len, unPack.未知函数_67177311 ())
赋值 (bin, unPack.未知函数_67177299 (len))

赋值 (bin, Tea.未知函数_67177305 (bin, qq.))
Un_Tlv (bin)
赋值 (qq., qq.)


调试输出 (“sessionKey”, 未知函数_67177313 (qq.))
调试输出 (“skey”, 到文本 (qq.))
调试输出 (“stweb”, 删全部空 (qq.))
调试输出 (“Superkey”, 到文本 (qq.))
赋值 (qq., 2)
返回 (真)

.子程序 Un_Tlv, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 tlv_count, 整数型, , , 
.局部变量 tlv_cmd, 字节集, , , 
.局部变量 tlv_len, 整数型, , , 

unPack.未知函数_67177296 (bin)
赋值 (tlv_count, unPack.未知函数_67177311 ())
.计次循环首 (tlv_count, )
    赋值 (tlv_cmd, unPack.未知函数_67177299 (2))
    赋值 (tlv_len, unPack.未知函数_67177311 ())
    tlv_get (删尾空 (未知函数_67177306 (tlv_cmd)), unPack.未知函数_67177299 (tlv_len))
.计次循环尾 ()

.子程序 tlv_get, 空白型, , 
.参数 tlv_cmd, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 len, 整数型, , , 
.局部变量 face, 短整数型, , , 
.局部变量 age, 字节型, , , 
.局部变量 gander, 字节型, , , 
.局部变量 i, 整数型, , , 
.局部变量 Capcd, 文本型, , , 

unPack.未知函数_67177296 (bin)
 ' 调试输出 (tlv_cmd, 取字节集长度 (bin), 字节集到十六进制文本 (bin))
.判断开始 (等于 (tlv_cmd, “01 0A”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 03”))
    赋值 (qq., 删全部空 (未知函数_67177313 (bin)))
.判断 (等于 (tlv_cmd, “01 6A”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 1A”))
    赋值 (face, unPack.未知函数_67177311 ())
    赋值 (age, unPack.未知函数_67177312 ())
    赋值 (gander, unPack.未知函数_67177312 ())
    赋值 (len, unPack.未知函数_67177312 ())
    赋值 (qq., 未知函数_67177319 (相加 (unPack.未知函数_67177299 (len), { 0 })))
    输出调试文本 (相加 (“昵称：”, qq., “ face：”, 到文本 (face), “ age：”, 到文本 (age), “ gander：”, 到文本 (gander)))
.判断 (等于 (tlv_cmd, “01 20”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 36”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “03 05”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 43”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 64”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 92”))
    赋值 (Capcd, 未知函数_67177319 (bin))
     ' 调试输出 (Capcd)
    赋值 (Capcd, 未知函数_67177320 (Capcd, “&cap_cd=”, “&clientype”))
    赋值 (qq., Capcd)
.判断 (等于 (tlv_cmd, “01 05”))
    赋值 (len, unPack.未知函数_67177311 ())
    赋值 (qq., unPack.未知函数_67177299 (len))
    赋值 (len, unPack.未知函数_67177311 ())
    赋值 (qq., unPack.未知函数_67177299 (len))
.判断 (等于 (tlv_cmd, “01 04”))
    赋值 (qq., bin)
.判断 (等于 (tlv_cmd, “01 6D”))
    赋值 (qq., 删全部空 (未知函数_67177319 (bin)))
.默认
    
.判断结束


.子程序 Un_Pack_Login_Pc, 字节集, , 
.参数 bin, 字节集, , 

.局部变量 unPack, 未知类型0x49010B4F, , , 
.局部变量 len, 整数型, , , 
.局部变量 result, 整数型, , , 
.局部变量 Publickey, 字节集, , , 
.局部变量 Sharekey2, 字节集, , , 
.局部变量 Ecdh, 未知类型0x41010B33, , , 

unPack.未知函数_67177296 (bin)
赋值 (len, unPack.未知函数_67177298 ())
赋值 (bin, unPack.未知函数_67177300 ())


unPack.未知函数_67177296 (bin)
unPack.未知函数_67177312 ()
赋值 (len, unPack.未知函数_67177311 ())
unPack.未知函数_67177299 (10)
unPack.未知函数_67177299 (2)
赋值 (result, unPack.未知函数_67177312 ())

赋值 (bin, unPack.未知函数_67177299 (相减 (len, 1)))
赋值 (bin, Tea.未知函数_67177305 (bin, qq.))

.如果真 (等于 (IsToken_Login, 假))
    unPack.未知函数_67177296 (bin)
    赋值 (len, unPack.未知函数_67177311 ())
    赋值 (Publickey, unPack.未知函数_67177299 (len))
    赋值 (Sharekey2, GenECDHKeyEx (Publickey, qq., qq.))
    赋值 (bin, unPack.未知函数_67177300 ())
    赋值 (bin, Tea.未知函数_67177305 (bin, Sharekey2))
.如果真结束

.判断开始 (不等于 (result, 0))
    .判断开始 (等于 (result, 2)) ' 需要验证码
        Un_Pack_VieryImage (bin)
        赋值 (last_error, “需要验证码”)
        赋值 (qq., 1)
        返回 ({  })
    .默认
        
    .判断结束
    
    Un_Pack_ErrMsg (bin)
    赋值 (bin, {  })
    赋值 (qq., 3)
.默认
    
.判断结束
返回 (bin)

.子程序 Un_Pack_ErrMsg, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 title, 文本型, , , 
.局部变量 message, 文本型, , , 
.局部变量 type, 整数型, , , 
.局部变量 unPack, 未知类型0x49010B4F, , , 

unPack.未知函数_67177296 (bin)
unPack.未知函数_67177311 ()
unPack.未知函数_67177312 ()
unPack.未知函数_67177298 ()
unPack.未知函数_67177311 ()
赋值 (type, unPack.未知函数_67177298 ())
赋值 (title, 未知函数_67177319 (相加 (unPack.未知函数_67177299 (unPack.未知函数_67177311 ()), { 0 })))
赋值 (message, 未知函数_67177319 (相加 (unPack.未知函数_67177299 (unPack.未知函数_67177311 ()), { 0 })))
赋值 (last_error, 相加 (title, “:”, message))
调试输出 (“Un_Pack_ErrMsg”, last_error)

.子程序 Un_Pack_VieryImage, 空白型, , 
.参数 bin, 字节集, , 

.局部变量 unpack, 未知类型0x49010B4F, , , 
.局部变量 i, 字节型, , , 

unpack.未知函数_67177296 (bin)
unpack.未知函数_67177299 (3)
Un_Tlv (unpack.未知函数_67177300 ())

.子程序 MakeLoginHead, 字节集, , 
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 
.参数 Type, 整数型, , 0 = 普通登录   1 = 验证码登录

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (qq.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177289 (“01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04”)
pack.未知函数_67177301 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67177334 (ServiceCmd)
pack.未知函数_67177289 (“00 00 00 08”)
pack.未知函数_67177291 (未知函数_67177335 (4))
pack.未知函数_67177301 (相加 (取文本长度 (Device.), 4))
pack.未知函数_67177334 (Device.)
pack.未知函数_67177289 (“00 00 00 04”)
pack.未知函数_67177292 (相加 (取字节集长度 (Device.), 2))
pack.未知函数_67177291 (Device.)
pack.未知函数_67177289 (“00 00 00 04”)
赋值 (bin_head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67177291 (bin_head)
赋值 (bin_head, pack.未知函数_67177294 ())

 ' ----------------------------------------------------------上面为头部

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“1F 41 08 10 00 01”)
pack.未知函数_67177291 (qq.)
.如果 (等于 (Type, 0))
    pack.未知函数_67177289 (“03 87 00 00 00 00 02 00 00 00 00 00 00 00 00 01 01”)
.否则
    pack.未知函数_67177289 (“03 07 00 00 00 00 02 00 00 00 00 00 00 00 00 01 01”)
.如果结束

pack.未知函数_67177291 (未知函数_67177335 (16))
pack.未知函数_67177289 (“01 02 00 19”)
pack.未知函数_67177291 (qq.)
pack.未知函数_67177291 (DATA)
pack.未知函数_67177289 (“03”)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“02”)
pack.未知函数_67177292 (相加 (取字节集长度 (bin), 3))
pack.未知函数_67177291 (bin)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (bin_head)
pack.未知函数_67177301 (相加 (取字节集长度 (bin), 4))
pack.未知函数_67177291 (bin)
赋值 (bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (bin)

.子程序 MakePackHeadNoToken, 字节集, , 组功能包头无Token
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (qq.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177289 (“01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04”)
pack.未知函数_67177301 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67177334 (ServiceCmd)
pack.未知函数_67177289 (“00 00 00 08”)
pack.未知函数_67177291 (未知函数_67177335 (4))
pack.未知函数_67177289 (“00 00 00 04 00 00 00 04 00 02”)
赋值 (bin_head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67177291 (bin_head)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (bin)
pack.未知函数_67177301 (相加 (取字节集长度 (DATA), 4))
pack.未知函数_67177291 (DATA)
赋值 (bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (bin)

.子程序 MakePackHead, 字节集, , 组功能包头
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (qq.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177289 (“01 00 00 00 00 00 00 00 00 00 00 00”)
pack.未知函数_67177301 (相加 (取字节集长度 (qq.), 4))
pack.未知函数_67177291 (qq.)
pack.未知函数_67177301 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67177334 (ServiceCmd)
pack.未知函数_67177289 (“00 00 00 08”)
pack.未知函数_67177291 (未知函数_67177335 (4))
pack.未知函数_67177301 (相加 (取文本长度 (Device.), 4))
pack.未知函数_67177334 (Device.)
pack.未知函数_67177289 (“00 00 00 04”)
pack.未知函数_67177292 (相加 (取字节集长度 (Device.), 2))
pack.未知函数_67177291 (Device.)
赋值 (bin_head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67177291 (bin_head)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (bin)
pack.未知函数_67177301 (相加 (取字节集长度 (DATA), 4))
pack.未知函数_67177291 (DATA)
赋值 (bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (bin)

.子程序 MakePackHeadBin, 字节集, , 
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67177334 (ServiceCmd)
pack.未知函数_67177289 (“00 00 00 08”)
pack.未知函数_67177291 (未知函数_67177335 (4))
pack.未知函数_67177289 (“00 00 00 04”)
赋值 (bin_head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67177291 (bin_head)
pack.未知函数_67177301 (相加 (取字节集长度 (DATA), 4))
pack.未知函数_67177291 (DATA)
赋值 (bin, pack.未知函数_67177294 ())
.如果真 (等于 (ServiceCmd, “OidbSvc.0x829_1”))
    调试输出 (未知函数_67177306 (bin))
.如果真结束
返回 (bin)

.子程序 MakeLoginHead_ExChange, 字节集, , 
.参数 DATA, 字节集, , 
.参数 ServiceCmd, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 bin_head, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (qq.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177301 (Device.)
pack.未知函数_67177289 (“01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04”)
pack.未知函数_67177301 (相加 (取文本长度 (ServiceCmd), 4))
pack.未知函数_67177334 (ServiceCmd)
pack.未知函数_67177289 (“00 00 00 08”)
pack.未知函数_67177291 (未知函数_67177335 (4))
pack.未知函数_67177289 (“00 00 00 04 00 00 00 04 00 02”)
赋值 (bin_head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin_head), 4))
pack.未知函数_67177291 (bin_head)
赋值 (bin_head, pack.未知函数_67177294 ())

 ' ----------------------------------------------------------上面为头部

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“1F 41 08 10 00 01”)
pack.未知函数_67177291 (qq.)
pack.未知函数_67177289 (“03 07 00 00 00 00 02 00 00 00 00 00 00 00 00 01 01”)
pack.未知函数_67177291 (未知函数_67177335 (16))
pack.未知函数_67177289 (“01 02 00 19”)
pack.未知函数_67177291 (qq.)
pack.未知函数_67177291 (DATA)
pack.未知函数_67177289 (“03”)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“02”)
pack.未知函数_67177292 (相加 (取字节集长度 (bin), 3))
pack.未知函数_67177291 (bin)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (bin_head)
pack.未知函数_67177301 (相加 (取字节集长度 (bin), 4))
pack.未知函数_67177291 (bin)
赋值 (bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), 取空白字节集 (16)))
返回 (bin)

.子程序 Pack, 字节集, , 组包头
.参数 DATA, 字节集, , 
.参数 Type, 整数型, , 1 = 登录使用     2 = 上线（带002C）

.局部变量 bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 


pack.未知函数_67177288 ()
.判断开始 (等于 (Type, 1))
    pack.未知函数_67177289 (“00 00 00 0A 02 00 00 00 04”)
.判断 (等于 (Type, 2))
    pack.未知函数_67177289 (“00 00 00 0A 01”)
    pack.未知函数_67177301 (相加 (取字节集长度 (qq.), 4))
    pack.未知函数_67177291 (qq.)
.默认
    pack.未知函数_67177289 (“00 00 00 0B 01”)
    pack.未知函数_67177291 (qq.)
.判断结束

pack.未知函数_67177289 (“00 00 00”)
pack.未知函数_67177292 (相加 (取字节集长度 (qq.), 4))
pack.未知函数_67177291 (qq.)
pack.未知函数_67177291 (DATA)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177301 (相加 (取字节集长度 (bin), 4))
pack.未知函数_67177291 (bin)
赋值 (bin, pack.未知函数_67177294 ())

 ' 调试输出 (“Pack:======”, 字节集到十六进制文本 (bin))
返回 (bin)

.子程序 Pack_Login, 字节集, , 组登录包
.局部变量 bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

置随机数种子 ()

赋值 (qq., 未知函数_67177335 (16))
赋值 (qq., 未知函数_67177342 (取字节集左边 (到字节集 (未知函数_67177343 ()), 4)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 09”)
pack.未知函数_67177292 (23) ' Tlv数量
pack.未知函数_67177291 (Tlv.未知函数_67177344 (qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177345 (qq., qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177346 (qq., qq., qq., qq., Device., qq., Device., qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177347 ())
pack.未知函数_67177291 (Tlv.未知函数_67177371 (Device.))
pack.未知函数_67177291 (Tlv.未知函数_67177348 ())
pack.未知函数_67177291 (Tlv.未知函数_67177349 ())
pack.未知函数_67177291 (Tlv.未知函数_67177350 (qq., Tlv.未知函数_67177351 (Device.), Tlv.未知函数_67177352 (), Tlv.未知函数_67177353 (Device.), Tlv.未知函数_67177354 ()))
pack.未知函数_67177291 (Tlv.未知函数_67177355 (Device.))
pack.未知函数_67177291 (Tlv.未知函数_67177356 ())
pack.未知函数_67177291 (Tlv.未知函数_67177357 (qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177358 ())
pack.未知函数_67177291 (Tlv.未知函数_67177359 ())
pack.未知函数_67177291 (Tlv.未知函数_67177360 ())
pack.未知函数_67177291 (Tlv.未知函数_67177361 ())
pack.未知函数_67177291 (Tlv.未知函数_67177362 ())
pack.未知函数_67177291 (Tlv.未知函数_67177363 ())
pack.未知函数_67177291 (Tlv.未知函数_67177364 (1)) ' 验证码类型
pack.未知函数_67177291 (Tlv.未知函数_67177365 (未知函数_67177366 (取随机数 (5, 9), 2)))
pack.未知函数_67177291 (Tlv.未知函数_67177367 ())
pack.未知函数_67177291 (Tlv.未知函数_67177368 ())
pack.未知函数_67177291 (Tlv.未知函数_67177369 ())
pack.未知函数_67177291 (Tlv.未知函数_67177370 ())
赋值 (bin, MakeLoginHead (Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.), “wtlogin.login”, 0))

返回 (Pack (bin, 1))

.子程序 Pack_VieryImage, 字节集, , 提交验证码
.参数 code, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 02”)
pack.未知函数_67177289 (“00 04”)
pack.未知函数_67177291 (Tlv.未知函数_67177377 (code, qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177359 ())
pack.未知函数_67177291 (Tlv.未知函数_67177376 (qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177347 ())
赋值 (bin, MakeLoginHead (Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.), “wtlogin.login”, 1))
返回 (Pack (bin, 1))

.子程序 Pack_VieryImage_Ticket, 字节集, , 提交验证码
.参数 Ticket, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 02”)
pack.未知函数_67177289 (“00 04”)
pack.未知函数_67177291 (Tlv.未知函数_67177378 (Ticket))
pack.未知函数_67177291 (Tlv.未知函数_67177359 ())
pack.未知函数_67177291 (Tlv.未知函数_67177376 (qq.))
pack.未知函数_67177291 (Tlv.未知函数_67177347 ())
赋值 (bin, MakeLoginHead (Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.), “wtlogin.login”, 0))
返回 (Pack (bin, 1))

.子程序 Pack_PushService_SvcReqRegister, 字节集, , 
.参数 Type, 整数型, , 1 = 上线  2 = 下线

.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177381 (qq., 0)
.判断开始 (等于 (Type, 1))
    Out.未知函数_67177382 (7, 1)
.判断 (等于 (Type, 2))
    Out.未知函数_67177382 (0, 1)
.默认
    
.判断结束

Out.未知函数_67177382 (0, 2)
Out.未知函数_67177383 (“”, 3)

.判断开始 (等于 (Type, 1))
    Out.未知函数_67177382 (11, 4)
.判断 (等于 (Type, 2))
    Out.未知函数_67177382 (21, 4)
.默认
    
.判断结束

Out.未知函数_67177382 (0, 5)
Out.未知函数_67177382 (0, 6)
Out.未知函数_67177382 (0, 7)
Out.未知函数_67177382 (0, 8)
Out.未知函数_67177382 (0, 9)
Out.未知函数_67177382 (1, 10)
Out.未知函数_67177382 (19, 11)
Out.未知函数_67177382 (1, 12)
Out.未知函数_67177383 (“”, 13)
Out.未知函数_67177382 (0, 14)
Out.未知函数_67177384 (Device., 16)
Out.未知函数_67177382 (2052, 17)
Out.未知函数_67177382 (0, 18)
Out.未知函数_67177383 (“vivo X20”, 19)
Out.未知函数_67177383 (“vivo X20”, 20)
Out.未知函数_67177383 (“4.4.2”, 21)
Out.未知函数_67177382 (1, 22)
Out.未知函数_67177382 (1, 23)
Out.未知函数_67177382 (0, 24)
Out.未知函数_67177382 (0, 26)
Out.未知函数_67177382 (0, 27)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 4C 56 0B 50 75 73 68 53 65 72 76 69 63 65 66 0E 53 76 63 52 65 71 52 65 67 69 73 74 65 72 7D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())
返回 (Pack (MakePackHead (Bin, “StatSvc.register”), 2))

.子程序 Pack_QzoneNewService_getUndealCount, 字节集, , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin2, 字节集, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177381 (141965365, 0)
Out.未知函数_67177381 (1000027, 1)
Out.未知函数_67177381 (qq., 2)
Out.未知函数_67177383 (“V1_AND_SQ_7.5.8_818_YYB_D”, 3)
Out.未知函数_67177383 (“QzoneNewService.getUndealCount”, 4)
Out.未知函数_67177383 (“screen_width=720&screen_height=1280&i=357748010142217&imsi=460071422116923&mac=14:DD:A9:E7:FC:04&m=GT-I9508&o=4.4.2&a=19&sc=1&sd=0&p=720*1280&f=samsung&mm=1514&cf=1953&cc=2&aid=14dda9e7fc044067&sharpP=1&n=wifi”, 5)
赋值 (Bin, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“”)
pack.未知函数_67177289 (“02”)
pack.未知函数_67177291 (qq.)
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“6A 00 40 1D 00 0C 28 00 01 00 01 1D 00 00 01 00 0B 7A 0C 1C 2C 3D 00 00 06 00 00 00 00 00 00 0B 8D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin2))
pack.未知函数_67177291 (Bin2)
pack.未知函数_67177289 (“9D 00 01”)
pack.未知函数_67177289 (“01 CF”)
pack.未知函数_67177289 (“08 00 03 06 0D 63 6F 6E 66 5F 69 6E 66 6F 5F 72 65 71 18 00 01 06 22 51 4D 46 5F 50 52 4F 54 4F 43 41 4C 2E 6D 6F 62 69 6C 65 5F 67 65 74 5F 63 6F 6E 66 69 67 5F 72 65 71 1D 00 01 01 37 0A 02 00 0F 42 5B 10 66 27 00 00 01 29 48 35 55 72 6C 3D 39 36 34 37 35 26 48 6F 6D 65 70 61 67 65 42 61 72 3D 32 30 37 35 34 26 4C 69 76 65 53 65 74 74 69 6E 67 3D 32 37 37 34 37 26 4D 69 6E 69 56 69 64 65 6F 3D 32 31 31 35 32 26 50 41 53 3D 31 30 35 31 30 37 30 32 30 33 26 50 68 6F 74 6F 41 6C 62 75 6D 3D 33 33 35 31 30 26 50 68 6F 74 6F 4E 6F 47 72 6F 75 70 3D 34 32 30 39 32 34 33 39 37 33 26 50 53 4C 3D 32 35 37 38 38 37 34 38 30 30 26 50 55 3D 32 35 30 32 39 26 51 5A 56 69 64 65 6F 3D 37 36 33 35 39 26 51 53 3D 32 36 34 35 35 26 51 7A 55 72 6C 43 61 63 68 65 3D 33 33 32 31 36 26 52 53 3D 32 38 38 38 32 26 53 75 62 41 70 70 43 66 67 56 65 72 3D 31 35 32 34 35 36 30 30 31 34 26 54 72 69 6D 56 69 64 65 6F 3D 31 37 36 36 39 26 56 69 64 65 6F 53 76 72 4C 69 73 74 3D 31 34 35 30 39 38 32 37 36 37 26 57 53 4C 3D 33 34 38 37 35 37 36 34 36 33 26 57 53 3D 33 35 38 37 36 26 57 6E 73 54 6D 3D 31 35 32 34 35 37 32 37 35 38 0B 06 0B 62 75 73 69 43 6F 6D 70 43 74 6C 18 00 01 06 1B 51 4D 46 5F 50 52 4F 54 4F 43 41 4C 2E 51 6D 66 42 75 73 69 43 6F 6E 74 72 6F 6C 1D 00 00 08 0A 0C 11 00 BB 20 01 0B 06 0F 77 6E 73 5F 73 64 6B 5F 76 65 72 73 69 6F 6E 18 00 01 06 05 69 6E 74 33 32 1D 00 00 02 00 01”)
pack.未知函数_67177289 (“AC BC”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2D 00 00 00 1D 53 51 51 7A 6F 6E 65 53 76 63 2E 67 65 74 55 6E 64 65 61 6C 43 6F 75 6E 74 00 00 00 08 78 0C 45 86 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbGetMsg, 字节集, , 获取消息
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Time, 长整数型, , , 

置随机数种子 ()
赋值 (Time, 未知函数_67177391 (取现行时间 ()))
pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (Time, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (2076863306, 2079863306), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1685541334, 1686541334), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (3603531080, 3604531080), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (20, 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (3, 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (1, 6, 真))
pack.未知函数_67177291 (未知函数_67177388 (1, 7, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 9, 真))
pack.未知函数_67177291 (未知函数_67177390 (“”, 12, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2, Bin3))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 23 00 00 00 17 4D 65 73 73 61 67 65 53 76 63 2E 50 62 47 65 74 4D 73 67 00 00 00 08 FC 12 70 43”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_PbMessageSvc_PbMsgReadedReport, 字节集, , 置消息已读
.参数 MsgHead, 字节集, , 
.参数 TargetQQ, 长整数型, , 
.参数 Time, 长整数型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Head, 字节集, , , 
.局部变量 Bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgHead, 1, 真))
赋值 (Head, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 2, 真))
赋值 (Bin, 相加 (Head, pack.未知函数_67177294 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 32 00 00 00 22 50 62 4D 65 73 73 61 67 65 53 76 63 2E 50 62 4D 73 67 52 65 61 64 65 64 52 65 70 6F 72 74 00 00 00 08 E5 6F 53 7C 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ProfileService_Pb_ReqSystemMsgNew_Friend, 字节集, , 获取新的好友请求
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (20, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (到长整数 (相加 (到文本 (未知函数_67177391 (取现行时间 ())), “000000”)), 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1000, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 5, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 7, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 6, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 9, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 10, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2, Bin3))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 3C 00 00 00 2C 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 50 62 2E 52 65 71 53 79 73 74 65 6D 4D 73 67 4E 65 77 2E 46 72 69 65 6E 64 00 00 00 08 68 FF BC FA 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ProfileService_Pb_ReqSystemMsgAction_Friend, 字节集, , 处理好友请求(默认自动同意)
.参数 TargetQQ, 长整数型, , 目标QQ

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (到长整数 (相加 (到文本 (未知函数_67177391 (取现行时间 ())), “000000”)), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (2020, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 7, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“42 0F 08 02 98 03 00 A2 03 00 B2 03 04 08 00 10 00”)
赋值 (Bin2, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2))



pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 3F 00 00 00 2F 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 50 62 2E 52 65 71 53 79 73 74 65 6D 4D 73 67 41 63 74 69 6F 6E 2E 46 72 69 65 6E 64 00 00 00 08 68 FF BC FA 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbSendMsg_ForFriend, 字节集, , 发送好友消息
.参数 TargetQQ, 长整数型, , 
.参数 TextMsg, 文本型, , 
.参数 加随机表情, 逻辑型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Bin4, 字节集, , , 
.局部变量 Bin5, 字节集, , , 
.局部变量 Bin6, 字节集, , , 
.局部变量 Bin7, 字节集, , , 
.局部变量 MsgUtf8, 字节集, , , 

置随机数种子 ()
赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (TextMsg)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 3, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1, 15), 1, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 2, 真))
.如果 (加随机表情)
    赋值 (Bin3, 相加 (pack.未知函数_67177294 (), Bin7))
.否则
    赋值 (Bin3, pack.未知函数_67177294 ())
.如果结束

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 3, 真))
赋值 (Bin3, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1526, 9526), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1683918889, 2183918889), 5, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (742312559, 942312559), 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1164957179, 1864957179), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (397689865, 697689865), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1472990434, 3472990434), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1564148446, 1964148446), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (110, 12, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin5, 6, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 8, 真))
赋值 (Bin6, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2, Bin3, Bin4, Bin5, Bin6))


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 24 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 B0 91 97 97”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_GetFriendListReq, 字节集, , 获取好友列表
.参数 Index, 整数型, , 
.参数 Num, 整数型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177382 (3, 0)
Out.未知函数_67177382 (1, 1)
Out.未知函数_67177381 (qq., 2)
Out.未知函数_67177382 (Index, 3)
Out.未知函数_67177382 (Num, 4)
Out.未知函数_67177382 (0, 5)
Out.未知函数_67177382 (1, 6)
Out.未知函数_67177382 (0, 7)
Out.未知函数_67177382 (0, 8)
Out.未知函数_67177382 (0, 9)
Out.未知函数_67177382 (1, 10)
Out.未知函数_67177382 (4, 11)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 02 46 4C 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 33 C2 C9 E9 56 29 6D 71 71 2E 49 4D 53 65 72 76 69 63 65 2E 46 72 69 65 6E 64 4C 69 73 74 53 65 72 76 69 63 65 53 65 72 76 61 6E 74 4F 62 6A 66 10 47 65 74 46 72 69 65 6E 64 4C 69 73 74 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 53 00 00 0D CE 20 02 91 E8 20 02 91 E8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 21 66 72 69 65 6E 64 6C 69 73 74 2E 67 65 74 46 72 69 65 6E 64 47 72 6F 75 70 4C 69 73 74 00 00 00 08 53 DD D2 7A 00 00 00 04 00 00 00 04 00 02”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 2))

.子程序 Pack_Friendlist_GetTroopListReqV2, 字节集, , 获取Q群列表
.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177382 (0, 1)
Out.未知函数_67177382 (1, 4)
Out.未知函数_67177382 (7, 5)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 11 47 65 74 54 72 6F 6F 70 4C 69 73 74 52 65 71 56 32 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 0E EE 39 56 56 29 6D 71 71 2E 49 4D 53 65 72 76 69 63 65 2E 46 72 69 65 6E 64 4C 69 73 74 53 65 72 76 69 63 65 53 65 72 76 61 6E 74 4F 62 6A 66 11 47 65 74 54 72 6F 6F 70 4C 69 73 74 52 65 71 56 32 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, MakePackHead (pack.未知函数_67177294 (), “friendlist.GetTroopListReqV2”))
返回 (Pack (Bin, 2))

.子程序 Pack_MessageSvc_PbSendMsg_ForGroup, 字节集, , 群消息
.参数 TargetGroupID, 长整数型, , 
.参数 MsgText, 文本型, , 
.参数 添加随机表情, 逻辑型, , 

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Bin4, 字节集, , , 
.局部变量 Bin5, 字节集, , , 
.局部变量 Bin6, 字节集, , , 
.局部变量 Bin7, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (MsgText)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))
pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetGroupID, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 2, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1, 15), 1, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 2, 真))
.如果 (添加随机表情)
    赋值 (Bin3, 相加 (pack.未知函数_67177294 (), Bin7))
.否则
    赋值 (Bin3, pack.未知函数_67177294 ())
.如果结束

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 3, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1526, 9526), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1683918889, 2183918889), 5, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (742312559, 942312559), 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1164957179, 1864957179), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (397689865, 697689865), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1472990434, 3472990434), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1564148446, 1964148446), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (110, 12, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin5, 6, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 8, 真))
赋值 (Bin6, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2, Bin3, Bin4, Bin5, Bin6))


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 24 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 B0 91 97 97”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbSendMsg_ForGroupMember, 字节集, , 群成员文本消息
.参数 TargetGroupCode, 长整数型, , 
.参数 TargetQQ, 长整数型, , 
.参数 MsgText, 文本型, , 

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Bin4, 字节集, , , 
.局部变量 Bin5, 字节集, , , 
.局部变量 Bin6, 字节集, , , 
.局部变量 Bin7, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (MsgText)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))
pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetGroupCode, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 2, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 3, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1, 15), 1, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin7, 2, 真))
赋值 (Bin7, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 2, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 3, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1526, 9526), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1683918889, 2183918889), 5, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (742312559, 942312559), 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1164957179, 1864957179), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (397689865, 697689865), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1472990434, 3472990434), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1564148446, 1964148446), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (110, 12, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin5, 6, 真))
赋值 (Bin5, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 8, 真))
赋值 (Bin6, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin1, Bin2, Bin3, Bin4, Bin5, Bin6))


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 24 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 B0 91 97 97”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_oidb_0x758, 字节集, , 
.参数 目标进入群号, 长整数型, , 
.参数 目标来自群号, 长整数型, 数组, 
.参数 目标QQ账号, 长整数型, 数组, 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 Bin4, 字节集, , , 
.局部变量 MainBin, 字节集, , , 
.局部变量 i, 整数型, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (1880, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 2, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (目标进入群号, 1, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

.计次循环首 (取数组成员数 (目标来自群号), i)
    pack.未知函数_67177288 ()
    pack.未知函数_67177291 (未知函数_67177388 (目标QQ账号 [i], 1, 真))
    pack.未知函数_67177291 (未知函数_67177388 (目标来自群号 [i], 2, 真))
    赋值 (Bin3, pack.未知函数_67177294 ())
    
    pack.未知函数_67177288 ()
    pack.未知函数_67177291 (未知函数_67177389 (Bin3, 2, 真))
    赋值 (MainBin, 相加 (MainBin, pack.未知函数_67177294 ()))
.计次循环尾 ()

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 ({  }, 3, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin2, MainBin, Bin4))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 4, 真))
赋值 (Bin, 相加 (Bin1, pack.未知函数_67177294 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 37 2E 35”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 26 00 00 00 16 4F 69 64 62 53 76 63 2E 6F 69 64 62 5F 30 78 37 35 38 00 00 00 08 DF D0 4D F7 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0x8dd, 字节集, , 获取附近人
.参数 Lng, 长整数型, , 精度
.参数 Lat, 长整数型, , 纬度
.参数 Gender, 整数型, , 性别（0=全部  1=男  2=女）
.参数 Time, 整数型, , 时间
.参数 AgeFrom, 整数型, , 年龄低
.参数 AgeTo, 整数型, , 年龄高

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 GpsBin, 字节集, , , 
.局部变量 DataBin, 字节集, , , 
.局部变量 Bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (Lng, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (Lat, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 3, 真))
赋值 (GpsBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (GpsBin, 1, 真))
赋值 (GpsBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (GpsBin, 3, 真))
赋值 (GpsBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 8, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (Gender, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (AgeTo, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (AgeFrom, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 7, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177392 (0, 9, 真))
赋值 (DataBin, pack.未知函数_67177294 ())
赋值 (Bin, {  })

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (DataBin, 4, 真))
赋值 (DataBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (GpsBin)
pack.未知函数_67177291 (DataBin)
pack.未知函数_67177291 (未知函数_67177392 (0, 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 4, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2269, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 31 2E 35”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 21 00 00 00 11 4F 69 64 62 53 76 63 2E 30 78 38 64 64 00 00 00 08 A0 72 09 82 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_Friendlist_getTroopMemberList, 字节集, , 获取群成员列表
.参数 GroupID, 长整数型, , 
.参数 GroupCode, 长整数型, , 
.参数 MemberInt, 长整数型, , 

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177381 (GroupID, 1)
Out.未知函数_67177381 (MemberInt, 2)
Out.未知函数_67177381 (GroupCode, 3)
Out.未知函数_67177382 (2, 4)
Out.未知函数_67177382 (1, 5)
Out.未知函数_67177382 (0, 6)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 04 47 54 4D 4C 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 0D 52 83 76 56 29 6D 71 71 2E 49 4D 53 65 72 76 69 63 65 2E 46 72 69 65 6E 64 4C 69 73 74 53 65 72 76 69 63 65 53 65 72 76 61 6E 74 4F 62 6A 66 15 47 65 74 54 72 6F 6F 70 4D 65 6D 62 65 72 4C 69 73 74 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 31 00 00 00 21 66 72 69 65 6E 64 6C 69 73 74 2E 67 65 74 54 72 6F 6F 70 4D 65 6D 62 65 72 4C 69 73 74 00 00 00 08 19 41 1B 26 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_mqq_IMService_FriendListServiceServantObj_GetUserAddFriendSettingReq, 字节集, , 获取加好友设置
.参数 TargetQQ, 长整数型, , 目标QQ
.参数 From, 整数型, , 添加渠道

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177381 (TargetQQ, 1)
Out.未知函数_67177382 (From, 2)
Out.未知函数_67177382 (0, 3)
Out.未知函数_67177382 (1, 5)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 02 46 53 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 2C 27 36 AB 56 29 6D 71 71 2E 49 4D 53 65 72 76 69 63 65 2E 46 72 69 65 6E 64 4C 69 73 74 53 65 72 76 69 63 65 53 65 72 76 61 6E 74 4F 62 6A 66 1A 47 65 74 55 73 65 72 41 64 64 46 72 69 65 6E 64 53 65 74 74 69 6E 67 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 36 00 00 00 26 66 72 69 65 6E 64 6C 69 73 74 2E 67 65 74 55 73 65 72 41 64 64 46 72 69 65 6E 64 53 65 74 74 69 6E 67 00 00 00 08 35 76 8B D3 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_mqq_IMService_FriendListServiceServantObj_AddFriendReq, 字节集, , 添加QQ好友
.参数 TargetQQ, 长整数型, , 
.参数 AddType, 整数型, , 
.参数 AddFrom, 整数型, , 
.参数 AddMsg, 文本型, , 

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177381 (TargetQQ, 1)
Out.未知函数_67177382 (AddType, 2)
Out.未知函数_67177382 (1, 3)
Out.未知函数_67177382 (0, 4)
Out.未知函数_67177382 (22, 5)
Out.未知函数_67177383 (AddMsg, 6)
Out.未知函数_67177382 (0, 7)
Out.未知函数_67177382 (1, 8)
Out.未知函数_67177382 (AddFrom, 10)
Out.未知函数_67177382 (2, 11)
Out.未知函数_67177382 (0, 15)
Out.未知函数_67177382 (0, 18)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 02 41 46 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 2C 27 36 AE 56 29 6D 71 71 2E 49 4D 53 65 72 76 69 63 65 2E 46 72 69 65 6E 64 4C 69 73 74 53 65 72 76 69 63 65 53 65 72 76 61 6E 74 4F 62 6A 66 0C 41 64 64 46 72 69 65 6E 64 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 28 00 00 00 18 66 72 69 65 6E 64 6C 69 73 74 2E 61 64 64 46 72 69 65 6E 64 00 00 00 08 35 76 8B D3 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_SummaryCard_ReqCondSearch, 字节集, , 条件查找人
.参数 PageNum, 整数型, , 
.参数 KeyWord, 文本型, , 关键词
.参数 Gender, 整数型, , 性别：0 = 不限  1 = 男   2 = 女
.参数 AgeStart, 整数型, , 起始年龄
.参数 AgeEnd, 整数型, , 结束年龄
.参数 Occupation, 整数型, , 职业
.参数 LocationStateCode, 整数型, , 所在地|省级代码
.参数 LocationCityCode, 整数型, , 所在地|市级代码
.参数 LocationRegionCode, 整数型, , 所在地|县级代码
.参数 HometownStateCode, 整数型, , 故乡|省级代码
.参数 HometownCityCode, 整数型, , 故乡|市级代码
.参数 HometownRegionCode, 整数型, , 故乡|县级代码

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 LocationBin, 字节集, , , 
.局部变量 HometownBin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 31”) ' 中国
.如果 (大于或等于 (LocationStateCode, 10)) ' 所在地|省级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (LocationStateCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (LocationStateCode))
.如果结束

.如果 (大于或等于 (LocationCityCode, 10)) ' 所在地|市级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (LocationCityCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (LocationCityCode))
.如果结束

.如果 (大于或等于 (LocationRegionCode, 10)) ' 所在地|县级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (LocationRegionCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (LocationRegionCode))
.如果结束
赋值 (LocationBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 31”) ' 中国
.如果 (大于或等于 (HometownStateCode, 10)) ' 所在地|省级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (HometownStateCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (HometownStateCode))
.如果结束

.如果 (大于或等于 (HometownCityCode, 10)) ' 所在地|市级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (HometownCityCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (HometownCityCode))
.如果结束

.如果 (大于或等于 (HometownRegionCode, 10)) ' 所在地|县级
    pack.未知函数_67177289 (“00 00”)
.否则
    pack.未知函数_67177289 (“00 00 00”)
.如果结束

.如果 (等于 (HometownRegionCode, 0))
    pack.未知函数_67177289 (“00”)
.否则
    pack.未知函数_67177334 (到文本 (HometownRegionCode))
.如果结束
赋值 (HometownBin, pack.未知函数_67177294 ())

Out.未知函数_67177380 ()
Out.未知函数_67177382 (PageNum, 0)
.如果 (大于 (PageNum, 0))
    Out.未知函数_67177382 (1, 1)
.否则
    Out.未知函数_67177382 (0, 1)
.如果结束
Out.未知函数_67177382 (1, 2)
Out.未知函数_67177383 (删首尾空 (KeyWord), 3)
Out.未知函数_67177382 (Gender, 4)
Out.未知函数_67177384 (LocationBin, 5)
Out.未知函数_67177382 (255, 6)
Out.未知函数_67177384 (HometownBin, 7)
Out.未知函数_67177382 (0, 8)
Out.未知函数_67177382 (Occupation, 9)
Out.未知函数_67177382 (AgeStart, 10)
Out.未知函数_67177382 (AgeEnd, 11)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 02 06 07 52 65 71 48 65 61 64 1D 00 00 04 0A 00 02 0B 06 0D 52 65 71 43 6F 6E 64 53 65 61 72 63 68 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 29 B7 3E B9 56 15 53 75 6D 6D 61 72 79 43 61 72 64 53 65 72 76 61 6E 74 4F 62 6A 66 0D 52 65 71 43 6F 6E 64 53 65 61 72 63 68 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2D 00 00 00 1D 53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 71 43 6F 6E 64 53 65 61 72 63 68 00 00 00 08 6E E2 1E 2C 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_KQQ_ProfileService_ProfileServantObj_GroupMngReq, 字节集, , 添加QQ群
.参数 添加群号码, 长整数型, , 
.参数 添加附加信息, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 MsgUtf8, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (添加附加信息))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177301 (添加群号码)
pack.未知函数_67177301 (qq.)
pack.未知函数_67177290 (取字节集长度 (MsgUtf8))
pack.未知函数_67177291 (MsgUtf8)
赋值 (Bin, pack.未知函数_67177294 ())

Out.未知函数_67177380 ()
Out.未知函数_67177382 (1, 0)
Out.未知函数_67177381 (qq., 1)
Out.未知函数_67177384 (Bin, 2)
Out.未知函数_67177382 (0, 3)
Out.未知函数_67177383 (“”, 4)
Out.未知函数_67177382 (0, 5)
Out.未知函数_67177382 (3, 6)
Out.未知函数_67177382 (31, 7)
Out.未知函数_67177382 (0, 8)
Out.未知函数_67177382 (0, 9)
Out.未知函数_67177382 (0, 10)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 0B 47 72 6F 75 70 4D 6E 67 52 65 71 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 6A 17 01 3C 56 24 4B 51 51 2E 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 50 72 6F 66 69 6C 65 53 65 72 76 61 6E 74 4F 62 6A 66 0B 47 72 6F 75 70 4D 6E 67 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2A 00 00 00 1E 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 47 72 6F 75 70 4D 6E 67 52 65 71 00 00 00 08 D7 36 FB CB”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MQUpdateSvc_com_qq_kandian_web_JsOidbProxy_oidb_0x978_0, 字节集, , QQ看点关注
.参数 TargetQQ, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 MainText, 文本型, , , 
.局部变量 MainUtf8, 字节集, , , 

赋值 (MainText, 相加 (“{/body/:{/uint64_uin/:”, 到文本 (qq.), “,/msg_req_follow_para/:{/rpt_follow_operation_info/:[{/uint64_dst_uin/:”, 删首尾空 (TargetQQ), “,/uint32_op_account_type/:2}],/op_type/:1}}}”))

赋值 (MainText, 子文本替换 (MainText, “/”, #引号, , , 真))

赋值 (MainUtf8, 未知函数_67177287 (MainText))
赋值 (MainUtf8, 取字节集左边 (MainUtf8, 相减 (取字节集长度 (MainUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (MainUtf8, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 4B 00 00 00 3B 4D 51 55 70 64 61 74 65 53 76 63 5F 63 6F 6D 5F 71 71 5F 6B 61 6E 64 69 61 6E 2E 77 65 62 2E 4A 73 4F 69 64 62 50 72 6F 78 79 2E 6F 69 64 62 5F 30 78 39 37 38 5F 30 00 00 00 08 5A 92 FB 88 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0x83e_0, 字节集, , 发布看点
.参数 Msg, 文本型, , 

.局部变量 MsgUtf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (Msg)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 6, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 17, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 23, 真))
赋值 (Bin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 11, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 13, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

赋值 (Bin1, 相加 (Bin2, Bin3, Bin1))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 11, 真))
赋值 (Bin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (4, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (1008217, 2, 真))
赋值 (Bin2, 相加 (pack.未知函数_67177294 (), Bin1))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 10, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (5, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 9, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (未知函数_67177389 ({  }, 32, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 4, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2110, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 37 2E 38”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 21 00 00 00 11 4F 69 64 62 53 76 63 2E 30 78 38 33 65 00 00 00 08 EB DF DC DF 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0xada_0, 字节集, , 附近动态评论回复
.参数 TargetQQ, 长整数型, , 
.参数 Msg, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Token4C, 文本型, , , 
.局部变量 Token4CUtf8, 字节集, , , 
.局部变量 MsgUtf8, 字节集, , , 

赋值 (Token4C, 删全部空 (未知函数_67177306 (qq.)))
赋值 (Token4CUtf8, 未知函数_67177287 (Token4C))
赋值 (Token4CUtf8, 取字节集左边 (Token4CUtf8, 相减 (取字节集长度 (Token4CUtf8), 1)))
 ' Msg ＝ 文本_取随机汉字 (5, 0)
赋值 (MsgUtf8, 未知函数_67177287 (Msg))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 1, 真))
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 2, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 6, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (4, 1, 真))
pack.未知函数_67177291 (未知函数_67177389 (到字节集 (“pic_5376260_1537571183000”), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 5, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (未知函数_67177392 (0, 7, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 8, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 6, 真))
赋值 (Bin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (Token4CUtf8, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 4, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 37 2E 38”), 5, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (未知函数_67177388 (778, 7, 真))
pack.未知函数_67177291 (未知函数_67177389 (qq., 9, 真))
pack.未知函数_67177291 (未知函数_67177389 (到字节集 (qq.), 10, 真))
pack.未知函数_67177291 (未知函数_67177388 (1, 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (857, 12, 真))
pack.未知函数_67177291 (未知函数_67177388 (2, 13, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 4, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2778, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 2, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 37 2E 38”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 23 00 00 00 13 4F 69 64 62 53 76 63 2E 30 78 61 64 61 5F 30 00 00 00 08 DC A1 1B 43 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_StorySvc_add_feed_comment, 字节集, , 微视回复评论
.参数 TargetQQ, 文本型, , 
.参数 Massage, 文本型, , 

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Utf8QQ, 字节集, , , 
.局部变量 Utf8Msg, 字节集, , , 
.局部变量 a, 文本型, , , 
.局部变量 b, 文本型, , , 
.局部变量 ID, 文本型, , , 

赋值 (TargetQQ, 相加 (“0_”, TargetQQ))
赋值 (Utf8QQ, 未知函数_67177287 (TargetQQ))
赋值 (Utf8QQ, 取字节集左边 (Utf8QQ, 相减 (取字节集长度 (Utf8QQ), 1)))
 ' Utf8Msg ＝ 编码_Ansi到Utf8 (Massage)
 ' Utf8Msg ＝ 取字节集左边 (Utf8Msg, 取字节集长度 (Utf8Msg) － 1)
赋值 (Utf8Msg, 未知函数_67177385 (Massage))
 ' 置随机数种子 ()
 ' a ＝ 到文本 (取随机数 (1, 9))
 ' b ＝ 到文本 (取随机数 (1, 27))
 ' .如果真 (小于 (到整数 (a), 10))
     ' a ＝ “0” ＋ a
.如果真结束
 ' .如果真 (小于 (到整数 (b), 10))
     ' b ＝ “0” ＋ b
.如果真结束
赋值 (a, 未知函数_67177320 (到文本 (取现行时间 ()), “年”, “月”))
赋值 (b, 未知函数_67177320 (到文本 (取现行时间 ()), “月”, “日”))
赋值 (b, 到文本 (相减 (到整数 (b), 1)))
.如果真 (小于 (到整数 (a), 10))
    赋值 (a, 相加 (“0”, a))
.如果真结束
.如果真 (小于 (到整数 (b), 10))
    赋值 (b, 相加 (“0”, b))
.如果真结束
赋值 (ID, 相加 (“FEED-0-3175232728-2019”, a, b))


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (到字节集 (ID), 1, 真))
pack.未知函数_67177291 (未知函数_67177389 (Utf8QQ, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (Utf8Msg, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (到长整数 (未知函数_67177393 ()), 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 8, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2D 00 00 00 1D 53 74 6F 72 79 53 76 63 2E 61 64 64 5F 66 65 65 64 5F 63 6F 6D 6D 65 6E 74 00 00 00 08 A2 C0 92 CF 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MQUpdateSvc_com_qq_buluo_web_follow_user, 字节集, , 附近人关注
.参数 TargetQQ, 文本型, , 

.局部变量 Text, 文本型, , , 
.局部变量 TextUtf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 

赋值 (Text, 相加 (“{/client_ver/:/7.7.8/,/from/:/2/,/targetuin/:/”, 删首尾空 (TargetQQ), “/,/operation/:/1/,/sourceid/:3076,/sub_sourceid/:1}”))
赋值 (Text, 子文本替换 (Text, “/”, #引号, , , 真))

赋值 (TextUtf8, 未知函数_67177287 (Text))
赋值 (TextUtf8, 取字节集左边 (TextUtf8, 相减 (取字节集长度 (TextUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (TextUtf8, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 3C 00 00 00 2C 4D 51 55 70 64 61 74 65 53 76 63 5F 63 6F 6D 5F 71 71 5F 62 75 6C 75 6F 2E 77 65 62 2E 66 6F 6C 6C 6F 77 5F 75 73 65 72 00 00 00 08 77 5A 0A D1 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0x83e_备用, 字节集, , 看点@  
.参数 TargetQQ, 长整数型, 数组, 
.参数 Msg, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 PicUrl, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (Msg)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))
赋值 (PicUrl, 未知函数_67177287 (“http://qqpublic.qpic.cn/qq_public/0/0-3179040407-5ACF419AEC4747AE5EB30924819ED5CB/0”))
赋值 (PicUrl, 取字节集左边 (PicUrl, 相减 (取字节集长度 (PicUrl), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 DA E4 E2 F5 D9 96 E6 C5 9B 01”)
pack.未知函数_67177289 (“10 BE F4 E8 A8 25”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 11, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin, Bin1))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“EF BC 9A”), 13, 真))
赋值 (Bin, 相加 (Bin, pack.未知函数_67177294 ()))

赋值 (Bin1, {  })
.计次循环首 (取数组成员数 (TargetQQ), i)
    赋值 (Bin2, {  })
    pack.未知函数_67177288 ()
    pack.未知函数_67177291 (未知函数_67177392 (0, 1, 真))
    pack.未知函数_67177291 (未知函数_67177388 (TargetQQ [i], 2, 真))
    pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
    pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 4, 真))
    pack.未知函数_67177291 (未知函数_67177392 (1, 5, 真))
    pack.未知函数_67177291 (未知函数_67177392 (1, 6, 真))
    赋值 (Bin2, pack.未知函数_67177294 ())
    
    pack.未知函数_67177288 ()
    pack.未知函数_67177291 (未知函数_67177389 (Bin2, 1, 真))
    赋值 (Bin1, 相加 (Bin1, pack.未知函数_67177294 ()))
.计次循环尾 ()
pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177289 (“10 DA E4 E2 F5 D9 96 E6 C5 9B 01”)
pack.未知函数_67177289 (“18 04”)
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 22, 真))
赋值 (Bin, 相加 (Bin, pack.未知函数_67177294 ()))

连续赋值 ({  }, Bin1, Bin2)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicUrl, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 6, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 11, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (2, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177289 (“6A 5A 03 23 E5 8D 81 E6 9C 88 E5 8D 81 E6 97 A5 E5 8D 96 E8 90 8C E6 97 A5 EF BC 8C E7 9C 8B E7 9C 8B E8 B0 81 E7 9A 84 E8 87 AA E6 8B 8D E6 9C 80 E5 8F AF E7 88 B1 EF BC 81 20 E4 B8 8D E7 88 B1 E5 8D 96 E8 90 8C E7 9A 84 E5 87 91 E4 B8 AA E6 95 B0 E5 98 BB E5 98 BB E5 98 BB”)
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 23, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Bin, Bin1))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 11, 真))
赋值 (Bin, pack.未知函数_67177294 ())

连续赋值 ({  }, Bin1, Bin2)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (4, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (1008682, 2, 真))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 10, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (4, 2, 真))
pack.未知函数_67177289 (“18 DA E4 E2 F5 D9 96 E6 C5 9B 01”)
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177392 (7, 11, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 4, 真))
赋值 (Bin, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2110, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 38 2E 32”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 21 00 00 00 11 4F 69 64 62 53 76 63 2E 30 78 38 33 65 00 00 00 08 95 8F A6 C1 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0x83e_主页, 字节集, , 看点@  
.参数 TargetQQ, 长整数型, , 
.参数 Msg, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin3, 字节集, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 PicUrl, 字节集, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (Msg)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))
赋值 (PicUrl, 未知函数_67177287 (“http://thirdqq.qlogo.cn/g?b=oidb&k=Bo9F0ndpHpFnDJE0JQqqxA&t=1531047313&s=140”))
赋值 (PicUrl, 取字节集左边 (PicUrl, 相减 (取字节集长度 (PicUrl), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 11, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 13, 真))
赋值 (Bin, 相加 (Bin, pack.未知函数_67177294 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 6, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 1, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“EF BC 9A”), 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 6, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 1, 真))
赋值 (Bin2, 相加 (Bin2, pack.未知函数_67177294 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 17, 真))
赋值 (Bin2, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2799897120, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“E6 AC A3 E5 84 BF”), 3, 真)) ' 欣儿
pack.未知函数_67177291 (未知函数_67177389 (PicUrl, 4, 真))
pack.未知函数_67177291 (未知函数_67177389 ({  }, 5, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin3, 23, 真))
赋值 (Bin3, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (6, 3, 真))
pack.未知函数_67177291 (Bin2)
pack.未知函数_67177291 (Bin3)
赋值 (Bin2, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 23, 真))
赋值 (Bin, 相加 (Bin, pack.未知函数_67177294 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 11, 真))
赋值 (Bin, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (25, 1, 真))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 10, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (5, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (1, 9, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177389 ({  }, 32, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 4, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (2110, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“61 6E 64 72 6F 69 64 20 37 2E 38 2E 32”), 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 21 00 00 00 11 4F 69 64 62 53 76 63 2E 30 78 38 33 65 00 00 00 08 7F CD 33 BE 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_account_RequestBindMobileV2, 字节集, , 绑定通讯录获取短信
.参数 AreaCode, 文本型, , 手机区号
.参数 PhoneNumber, 文本型, , 手机号码

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 Bin, 字节集, , , 

Out.未知函数_67177380 ()
Out.未知函数_67177383 (删首尾空 (AreaCode), 0)
Out.未知函数_67177383 (删首尾空 (PhoneNumber), 1)
Out.未知函数_67177382 (0, 2)
Out.未知函数_67177382 (0, 3)
Out.未知函数_67177382 (1, 4)
Out.未知函数_67177382 (0, 5)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 02 06 13 52 65 71 75 65 73 74 42 69 6E 64 4D 6F 62 69 6C 65 56 32 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“06 0D 52 65 71 75 65 73 74 48 65 61 64 65 72 1D 00 00 13 0A 00 64 10 23 2C 3C 46 00 5C 66 00 76 00 86 00 9C AC 0B”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 4C 56 0D 41 63 63 6F 75 6E 74 53 65 72 76 65 72 66 11 41 63 63 6F 75 6E 74 53 65 72 76 65 72 46 75 6E 63 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2F 00 00 00 1F 61 63 63 6F 75 6E 74 2E 52 65 71 75 65 73 74 42 69 6E 64 4D 6F 62 69 6C 65 56 32 00 00 00 08 05 76 C9 19 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_account_RequestVerifyBindingSmscode, 字节集, , 绑定通讯录提交验证并绑定
.参数 CodeText, 文本型, , 
.参数 SmsBinText, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 SmsBin, 字节集, , , 

赋值 (SmsBin, 未知函数_67177287 (删首尾空 (SmsBinText)))
赋值 (SmsBin, 取字节集左边 (SmsBin, 相减 (取字节集长度 (SmsBin), 1)))

Out.未知函数_67177380 ()
Out.未知函数_67177383 (删首尾空 (CodeText), 0)
Out.未知函数_67177384 (SmsBin, 1)
Out.未知函数_67177382 (0, 2)
Out.未知函数_67177382 (1, 3)
Out.未知函数_67177382 (0, 4)
赋值 (Bin, 相加 (未知函数_67177385 (“0A”), Out.未知函数_67177386 (), 未知函数_67177385 (“0B”)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 02 06 0D 52 65 71 75 65 73 74 48 65 61 64 65 72 1D 00 00 13 0A 00 64 10 10 2C 3C 46 00 5C 66 00 76 00 86 00 9C AC 0B 06 14 52 65 71 75 65 73 74 56 65 72 69 66 79 53 6D 73 63 6F 64 65 1D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 4C 56 0D 41 63 63 6F 75 6E 74 53 65 72 76 65 72 66 11 41 63 63 6F 75 6E 74 53 65 72 76 65 72 46 75 6E 63 7D 00”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 37 00 00 00 27 61 63 63 6F 75 6E 74 2E 52 65 71 75 65 73 74 56 65 72 69 66 79 42 69 6E 64 69 6E 67 53 6D 73 63 6F 64 65 00 00 00 08 05 76 C9 19 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MQUpdateSvc_com_qq_nearby_web_NearbySvr_set_face_score, 字节集, , 颜值评分
.参数 Tinyid, 文本型, , 
.参数 Sign, 文本型, , 

.局部变量 Text, 文本型, , , 
.局部变量 TextUtf8, 字节集, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

赋值 (Text, 相加 (“{/target_tinyid/:/”, 删首尾空 (Tinyid), “/,/face_score/:1000,/from/:0,/platform/:1,/version/:/7.8.8.3790/,/source/:2,/video_mark/:0,/sign/:/”, 删首尾空 (Sign), “/,/imei/:/865166024372545/,/gender/:0,/skey/:/”, 到文本 (qq.), “/,/cost_gold/:1}”))
赋值 (Text, 子文本替换 (Text, “/”, #引号, , , 真))
赋值 (TextUtf8, 未知函数_67177287 (删首尾空 (Text)))
赋值 (TextUtf8, 取字节集左边 (TextUtf8, 相减 (取字节集长度 (TextUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (TextUtf8, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 4A 00 00 00 3A 4D 51 55 70 64 61 74 65 53 76 63 5F 63 6F 6D 5F 71 71 5F 6E 65 61 72 62 79 2E 77 65 62 2E 4E 65 61 72 62 79 53 76 72 2E 73 65 74 5F 66 61 63 65 5F 73 63 6F 72 65 00 00 00 08 85 3E C4 24 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_SummaryCard_ReqSummaryCard_Tinyid, 字节集, , Tinyid查资料
.参数 Tinyid, 长整数型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 PbBin, 字节集, , , 

Out.未知函数_67177380 ()
pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (3, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (4, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (6, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (8, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (9, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (11, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (4294967295, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (13, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 32 2E 33 37 35 30”), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (3750, 14, 真))
赋值 (PbBin, 相加 (未知函数_67177385 (“28 00 00 00 23 00 00 00 00”), pack.未知函数_67177294 (), 未知函数_67177385 (“29”)))
Out.未知函数_67177384 (PbBin, 0)

赋值 (PbBin, Out.未知函数_67177386 ())

Out.未知函数_67177380 ()
Out.未知函数_67177382 (0, 0)
Out.未知函数_67177382 (41, 1)
Out.未知函数_67177382 (0, 2)
Out.未知函数_67177382 (0, 3)
Out.未知函数_67177382 (0, 4)
Out.未知函数_67177382 (0, 5)
Out.未知函数_67177384 ({ 0 }, 6)
Out.未知函数_67177383 (“”, 7)
Out.未知函数_67177381 (38916, 8)
Out.未知函数_67177381 (10004, 9)
Out.未知函数_67177384 ({ 0 }, 10)
Out.未知函数_67177384 (未知函数_67177385 (“00 00 00 53 10 03 2C 3C 4C 56 11 51 51 53 65 72 76 69 63 65 2E 47 61 6D 65 53 76 63 66 0F 52 65 71 4C 61 73 74 47 61 6D 65 49 6E 66 6F 7D 00 00 1D 08 00 01 06 0F 52 65 71 4C 61 73 74 47 61 6D 65 49 6E 66 6F 1D 00 00 05 0A 00 01 1C 0B 8C 98 0C A8 0C”), 11)
赋值 (Bin, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“E9 00 09”)
pack.未知函数_67177291 (PbBin)
赋值 (Bin, pack.未知函数_67177294 ())

Out.未知函数_67177380 ()
Out.未知函数_67177381 (Tinyid, 15)
Out.未知函数_67177382 (0, 16)
Out.未知函数_67177382 (0, 18)
Out.未知函数_67177382 (1, 20)
Out.未知函数_67177382 (1, 21)
Out.未知函数_67177382 (0, 22)
赋值 (PbBin, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“0A”)
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (PbBin)
pack.未知函数_67177289 (“0B”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 02 06 0E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 1D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“06 07 52 65 71 48 65 61 64 1D 00 00 04 0A 00 02 0B”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 73 D3 54 D4 56 15 53 75 6D 6D 61 72 79 43 61 72 64 53 65 72 76 61 6E 74 4F 62 6A 66 0E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 7D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2E 00 00 00 1E 53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 71 53 75 6D 6D 61 72 79 43 61 72 64 00 00 00 08 FB 7D 66 4A 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_StreamSvr_UploadStreamMsg, 字节集, , 发送语音
.参数 Time, 长整数型, , 
.参数 TargetQQ, 长整数型, , 
.参数 Voicedata, 字节集, , 
.参数 Num, 整数型, , 
.参数 IsEnd, 逻辑型, , 分包是否完毕

.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Head, 字节集, , , 
.局部变量 End, 字节集, , , 
.局部变量 VoiceBin, 字节集, , , 
.局部变量 i, 空白型, , , 

置随机数种子 ()

Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177381 (TargetQQ, 1)
Out.未知函数_67177381 (Time, 2)
Out.未知函数_67177382 (1, 3)
Out.未知函数_67177382 (0, 4)
.如果 (等于 (IsEnd, 假))
    Out.未知函数_67177382 (0, 5)
.否则
    Out.未知函数_67177382 (1, 5)
.如果结束
Out.未知函数_67177382 (0, 6)
Out.未知函数_67177382 (0, 7)
Out.未知函数_67177382 (0, 8)
Out.未知函数_67177383 (“”, 9)
Out.未知函数_67177382 (0, 10)
Out.未知函数_67177382 (取随机数 (17011, 22460), 11)
Out.未知函数_67177381 (取随机数 (447033818, 2009457618), 12)
Out.未知函数_67177382 (2, 13)
Out.未知函数_67177382 (1, 14)
Out.未知函数_67177382 (3, 15)
Out.未知函数_67177382 (0, 16)
.如果真 (等于 (Num, 1))
    Out.未知函数_67177384 (未知函数_67177385 (“08 00 12 05 08 00 80 01 00”), 17)
.如果真结束
赋值 (Bin, Out.未知函数_67177386 ())


Out.未知函数_67177380 ()
Out.未知函数_67177394 (Bin, 2)
赋值 (Bin, Out.未知函数_67177386 ())



Out.未知函数_67177380 ()
Out.未知函数_67177382 (10, 0)
Out.未知函数_67177381 (相加 (38029891, Num), 1)
赋值 (Head, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Head)
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())
 ' ------------------------------------------------- 上面1丶2部分


Out.未知函数_67177380 ()
Out.未知函数_67177382 (Num, 1)
Out.未知函数_67177384 (Voicedata, 2)
赋值 (Head, Out.未知函数_67177386 ())

Out.未知函数_67177380 ()
Out.未知函数_67177394 (Head, 3)
赋值 (Head, Out.未知函数_67177386 ())
 ' ------------------------------------------------- 上面3部分

Out.未知函数_67177380 ()
Out.未知函数_67177382 (Num, 4)
赋值 (End, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (Head)
pack.未知函数_67177291 (End)
赋值 (Bin, pack.未知函数_67177294 ())

Out.未知函数_67177380 ()
Out.未知函数_67177394 (Bin, 0)
赋值 (Bin, Out.未知函数_67177386 ())


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 11 43 53 55 70 6C 6F 61 64 53 74 72 65 61 6D 4D 73 67 1D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 5E 1A A7 40 56 09 53 74 72 65 61 6D 53 76 72 66 17 47 65 74 43 53 55 70 6C 6F 61 64 53 74 72 65 61 6D 4D 73 67 42 75 66 7D 00 01”)
pack.未知函数_67177292 (取字节集长度 (Bin))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 2D 00 00 00 1D 53 74 72 65 61 6D 53 76 72 2E 55 70 6C 6F 61 64 53 74 72 65 61 6D 4D 73 67 00 00 00 08 77 75 D7 59 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_LongConn_OffPicUp, 字节集, , 好友图片_上传图片请求参
.参数 TargetQQ, 长整数型, , 目标好友QQ账号
.参数 Image, 字节集, , 图片

.局部变量 PicMd5, 字节集, , , 
.局部变量 PicMd5Utf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 

赋值 (局_上传图片, Image)
赋值 (PicMd5, 未知函数_67177395 (Image))
赋值 (PicMd5Utf8, 未知函数_67177287 (相加 (删全部空 (未知函数_67177306 (PicMd5)), “.jpg”)))
赋值 (PicMd5Utf8, 取字节集左边 (PicMd5Utf8, 相减 (取字节集长度 (PicMd5Utf8), 1)))


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 5, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5Utf8, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (5, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (9, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 10, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 12, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (960, 14, 真))
pack.未知函数_67177291 (未知函数_67177392 (1182, 15, 真))
pack.未知函数_67177291 (未知函数_67177388 (1003, 16, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 38 2E 38 2E 39 34 32”), 17, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 21, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 22, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177392 (3, 10, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 25 00 00 00 15 4C 6F 6E 67 43 6F 6E 6E 2E 4F 66 66 50 69 63 55 70 00 00 00 08 92 01 A1 98 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_PicUp_DataUp_Friend, 字节集, , 上传图片
.参数 Image, 字节集, , 
.参数 ImageSig, 字节集, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 PicMd5, 字节集, , , 
.局部变量 BinHead, 字节集, , , 

赋值 (PicMd5, 未知函数_67177395 (Image))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 01 12”)
pack.未知函数_67177290 (取字节集长度 (qq.))
pack.未知函数_67177291 (qq.)
pack.未知函数_67177289 (“1A”)
pack.未知函数_67177289 (“0C”)
pack.未知函数_67177289 (“50 69 63 55 70 2E 44 61 74 61 55 70”) ' PicUp.DataUp
pack.未知函数_67177291 (未知函数_67177388 (21209, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (537059547, 6, 真))
pack.未知函数_67177291 (未知函数_67177388 (4096, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 8, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“0A”)
pack.未知函数_67177290 (取字节集长度 (BinHead))
pack.未知函数_67177291 (BinHead)
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 4, 真))
pack.未知函数_67177291 (未知函数_67177389 (ImageSig, 6, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 8, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 9, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“28”)
pack.未知函数_67177301 (相加 (取字节集长度 (BinHead), 取字节集长度 (Bin)))
pack.未知函数_67177301 (取字节集长度 (Image))
pack.未知函数_67177291 (BinHead)
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (Image)
pack.未知函数_67177289 (“29”)
赋值 (Bin, pack.未知函数_67177294 ())
返回 (Bin)

.子程序 Pack_PicUp_DataUp_Group, 字节集, 公开, 上传图片
.参数 Image, 字节集, , 
.参数 ImageSig, 字节集, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 PicMd5, 字节集, , , 
.局部变量 BinHead, 字节集, , , 

赋值 (PicMd5, 未知函数_67177395 (Image))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 01 12”)
pack.未知函数_67177290 (取字节集长度 (qq.))
pack.未知函数_67177291 (qq.)
pack.未知函数_67177289 (“1A”)
pack.未知函数_67177289 (“0C”)
pack.未知函数_67177289 (“50 69 63 55 70 2E 44 61 74 61 55 70”) ' PicUp.DataUp
pack.未知函数_67177291 (未知函数_67177388 (80164, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (537060809, 6, 真))
pack.未知函数_67177291 (未知函数_67177388 (4096, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 8, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“0A”)
pack.未知函数_67177290 (取字节集长度 (BinHead))
pack.未知函数_67177291 (BinHead)
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 4, 真))
pack.未知函数_67177291 (未知函数_67177389 (ImageSig, 6, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 8, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 9, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“28”)
pack.未知函数_67177301 (相加 (取字节集长度 (BinHead), 取字节集长度 (Bin)))
pack.未知函数_67177301 (取字节集长度 (Image))
pack.未知函数_67177291 (BinHead)
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (Image)
pack.未知函数_67177289 (“29”)
赋值 (Bin, pack.未知函数_67177294 ())
返回 (Bin)

.子程序 Pack_HttpConn_0x6ff_501, 字节集, , 上传图片前奏(含QQ头像上传)
.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (16, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (3, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (5, 7, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 1281, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 26 00 00 00 16 48 74 74 70 43 6F 6E 6E 2E 30 78 36 66 66 5F 35 30 31 00 00 00 08 DB DA BA 62 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ImgStore_GroupPicUp, 字节集, , ImgStore_GroupPicUp
.参数 QQ群号, 长整数型, , 
.参数 Image, 字节集, , 

.局部变量 Bin, 字节集, , , 
.局部变量 PicMd5, 字节集, , , 
.局部变量 PicMd5Utf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

置随机数种子 ()
赋值 (PicMd5, 未知函数_67177395 (Image))
赋值 (PicMd5Utf8, 未知函数_67177287 (相加 (删全部空 (未知函数_67177306 (PicMd5)), “.jpg”)))
赋值 (PicMd5Utf8, 取字节集左边 (PicMd5Utf8, 相减 (取字节集长度 (PicMd5Utf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (QQ群号, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 5, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5Utf8, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (5, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (9, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 9, 真))
pack.未知函数_67177291 (未知函数_67177392 (1200, 10, 真))
pack.未知函数_67177291 (未知函数_67177392 (1484, 11, 真))
pack.未知函数_67177291 (未知函数_67177392 (1000, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“37 2E 39 2E 38 2E 39 39 39”), 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (1007, 15, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 19, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 3, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (3, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 2, 真))
pack.未知函数_67177291 (Bin)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 27 00 00 00 17 49 6D 67 53 74 6F 72 65 2E 47 72 6F 75 70 50 69 63 55 70 00 00 00 08 4E 4E 6F 39 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))


.子程序 Pack_PicUp_DataUp, 字节集, , 上传图片
.参数 Pic, 字节集, , 
.参数 PicToken, 字节集, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Binhead, 字节集, , , 
.局部变量 Bindata, 字节集, , , 
.局部变量 BinEnd, 字节集, , , 
.局部变量 PicMd5, 字节集, , , 

 ' Pic ＝ 取字节集左边 (Pic, 取字节集长度 (Pic) － 2) ＋ Hex2Bin (“FF D9”) ＋ Guid算法 ()  ' 图片加随机
赋值 (PicMd5, 未知函数_67177395 (Pic))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177389 (qq., 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“50 69 63 55 70 2E 44 61 74 61 55 70”), 3, 真))
.判断开始 (等于 (局_上传类型, 1))
    pack.未知函数_67177291 (未知函数_67177388 (28628, 4, 真))
.判断 (等于 (局_上传类型, 2))
    pack.未知函数_67177291 (未知函数_67177388 (28752, 4, 真))
.默认
    
.判断结束
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (537057080, 6, 真)) ' appid
pack.未知函数_67177291 (未知函数_67177388 (4096, 7, 真))
.判断开始 (等于 (局_上传类型, 1))
    pack.未知函数_67177291 (未知函数_67177392 (5, 8, 真))
.判断 (等于 (局_上传类型, 2))
    pack.未知函数_67177291 (未知函数_67177392 (3, 8, 真))
.默认
    
.判断结束
赋值 (Binhead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Binhead, 1, 真))
赋值 (Binhead, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Pic), 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Pic), 4, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicToken, 6, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 8, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 9, 真))
赋值 (Bindata, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bindata, 2, 真))
赋值 (Bindata, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“00”), 3, 真))
赋值 (BinEnd, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (Binhead, Bindata, BinEnd))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“28”)
pack.未知函数_67177301 (取字节集长度 (Bin))
pack.未知函数_67177301 (取字节集长度 (Pic))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (Pic)
pack.未知函数_67177289 (“29”)
赋值 (Bin, pack.未知函数_67177294 ())
返回 (Bin)

.子程序 Pack_MessageSvc_PbSendMsg_FeiendPic, 字节集, , 好友图片消息
.参数 TargetQQ, 长整数型, , 
.参数 Image, 字节集, , 
.参数 PicID, 字节集, , 

.局部变量 PicMd5, 字节集, , , 
.局部变量 PicMd5Utf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 MainBin1, 字节集, , , 
.局部变量 MainBin2, 字节集, , , 
.局部变量 BinEnd, 字节集, , , 
.局部变量 BinHead, 字节集, , , 

置随机数种子 ()
赋值 (PicMd5, 未知函数_67177395 (Image))
赋值 (PicMd5Utf8, 未知函数_67177287 (相加 (删全部空 (未知函数_67177306 (PicMd5)), “.jpg”)))
赋值 (PicMd5Utf8, 取字节集左边 (PicMd5Utf8, 相减 (取字节集长度 (PicMd5Utf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (PicMd5Utf8, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicID, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (1003, 5, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (1182, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (960, 9, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicID, 10, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (3, 16, 真))
pack.未知函数_67177291 (未知函数_67177388 (37019, 24, 真))
pack.未知函数_67177291 (未知函数_67177388 (82158, 25, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 4, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 2, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 15, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 31, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 36, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 19, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 17, 真))
pack.未知函数_67177291 (MainBin2)
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 37, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 2, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (MainBin1)
pack.未知函数_67177291 (MainBin2)
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 1, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 3, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (548001252, 558001252), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (2072252810, 2172252810), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (5452144407, 5552144407), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinEnd, 6, 真))
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (21106, 22106), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (856841150, 866841150), 5, 真))
pack.未知函数_67177291 (BinEnd)
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 1, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinHead, 1, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinHead, 1, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (21106, 22106), 3, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 2, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (BinHead, MainBin2, MainBin1, BinEnd, 未知函数_67177385 (“40 01”)))
调试输出 (未知函数_67177306 (Bin))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 28 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 92 01 A1 98 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbSendMsg_GroupPic, 字节集, , QQ群图片消息
.参数 GroupNumber, 长整数型, , 
.参数 Image, 字节集, , 

.局部变量 PicMd5, 字节集, , , 
.局部变量 PicMd5Utf8, 字节集, , , 
.局部变量 BinOne, 字节集, , , 
.局部变量 BinTwo, 字节集, , , 
.局部变量 BinThree, 字节集, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 

置随机数种子 ()
赋值 (PicMd5, 未知函数_67177395 (Image))
赋值 (PicMd5Utf8, 未知函数_67177287 (相加 (删全部空 (未知函数_67177306 (PicMd5)), “.jpg”)))
赋值 (PicMd5Utf8, 取字节集左边 (PicMd5Utf8, 相减 (取字节集长度 (PicMd5Utf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (GroupNumber, 1, 真))
赋值 (BinOne, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinOne, 2, 真))
赋值 (BinOne, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinOne, 1, 真))
赋值 (BinOne, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (BinTwo, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinTwo, 2, 真))
赋值 (BinTwo, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (PicMd5Utf8, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 7, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1709412205, 1863131831), 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (80, 9, 真))
pack.未知函数_67177291 (未知函数_67177392 (66, 10, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177287 (未知函数_67177366 (16, 2)), 11, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 12, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 13, 真))
赋值 (BinThree, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinThree, 8, 真))
赋值 (BinThree, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinThree, 2, 真))
赋值 (BinThree, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinThree, 1, 真))
赋值 (BinThree, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinThree, 3, 真))
赋值 (BinThree, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (BinOne)
pack.未知函数_67177291 (BinTwo)
pack.未知函数_67177291 (BinThree)
pack.未知函数_67177289 (“88 01 03 A0 01 E8 07 B0 01 90 03 B8 01 90 03 C0 01 65 C8 01 88 D8 01 D0 01 00 E8 01 00 F0 01 00 12 0E AA 02 0B 88 01 00 9A 01 05 78 00 90 01 01”)
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (16556, 96556), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1059881052, 1259881052), 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 8, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 28 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 84 86 95 B0 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbSendMsg_GroupMember, 字节集, , 群成员图片消息
.参数 GroupCode, 长整数型, , 
.参数 TargetQQ, 长整数型, , 
.参数 Image, 字节集, , 
.参数 PicID, 字节集, , 

.局部变量 PicMd5, 字节集, , , 
.局部变量 PicMd5Utf8, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 MainBin1, 字节集, , , 
.局部变量 MainBin2, 字节集, , , 
.局部变量 BinEnd, 字节集, , , 
.局部变量 BinHead, 字节集, , , 

置随机数种子 ()
赋值 (PicMd5, 未知函数_67177395 (Image))
赋值 (PicMd5Utf8, 未知函数_67177287 (相加 (删全部空 (未知函数_67177306 (PicMd5)), “.jpg”)))
赋值 (PicMd5Utf8, 取字节集左边 (PicMd5Utf8, 相减 (取字节集长度 (PicMd5Utf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (PicMd5Utf8, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (取字节集长度 (Image), 2, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicID, 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (1003, 5, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicMd5, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (1060, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (850, 9, 真))
pack.未知函数_67177291 (未知函数_67177389 (PicID, 10, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (3, 16, 真))
pack.未知函数_67177291 (未知函数_67177388 (24621, 24, 真))
pack.未知函数_67177291 (未知函数_67177388 (58935, 25, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 4, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 2, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 15, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 31, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 36, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 19, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 17, 真))
pack.未知函数_67177291 (MainBin2)
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 37, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 2, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (MainBin1)
pack.未知函数_67177291 (MainBin2)
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 1, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin1, 3, 真))
赋值 (MainBin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (548001252, 558001252), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (2072252810, 2172252810), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (5452144407, 5552144407), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (未知函数_67177391 (取现行时间 ()), 13, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 14, 真))
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinEnd, 6, 真))
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (21106, 22106), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (856841150, 866841150), 5, 真))
pack.未知函数_67177291 (BinEnd)
赋值 (BinEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (GroupCode, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 2, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinHead, 3, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (BinHead, 1, 真))
赋值 (BinHead, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (21106, 22106), 3, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MainBin2, 2, 真))
赋值 (MainBin2, pack.未知函数_67177294 ())

赋值 (Bin, 相加 (BinHead, MainBin2, MainBin1, BinEnd, 未知函数_67177385 (“40 01”)))
调试输出 (未知函数_67177306 (Bin))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 28 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 92 01 A1 98 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OidbSvc_0x829_1, 字节集, , 通讯录加好友
.参数 验证信息, 文本型, , 文本长度限制为96
.参数 手机号码, 文本型, 数组, 限制每三十个一轮

.局部变量 Bin, 字节集, , , 
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 i, 空白型, , , 
.局部变量 添加信息, 字节集, , , 
.局部变量 BinLen, 字节型, , , 
.局部变量 BinHead, 字节型, , , 

赋值 (添加信息, 未知函数_67177287 (删首尾空 (验证信息)))
赋值 (添加信息, 取字节集左边 (添加信息, 相减 (取字节集长度 (添加信息), 1)))
pack.未知函数_67177288 ()

.判断开始 (并且 (等于 (取数组成员数 (手机号码), 1), 不等于 (手机号码 [1], “”)))
    pack.未知函数_67177289 (“1A 0E 2B 38 36”)
    pack.未知函数_67177334 (手机号码 [1])
.默认
    .计次循环首 (取数组成员数 (手机号码), i)
        pack.未知函数_67177289 (“1A 0E 2B 38 36”)
        pack.未知函数_67177334 (手机号码 [i])
    .计次循环尾 ()
    
.判断结束
pack.未知函数_67177289 (“22”)
pack.未知函数_67177290 (取字节集长度 (添加信息))
pack.未知函数_67177291 (添加信息)
pack.未知函数_67177289 (“28 87 18 30 01”)
赋值 (Bin, pack.未知函数_67177294 ())

.如果 (大于 (取字节集长度 (Bin), 128))
    赋值 (BinLen, 取整 (相除 (取字节集长度 (Bin), 128)))
    赋值 (BinHead, 相加 (相减 (取字节集长度 (Bin), 相乘 (128, BinLen)), 128))
.否则
    赋值 (BinLen, 取字节集长度 (Bin))
.如果结束


pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 A9 10 10 01 22”)

.如果真 (大于 (取字节集长度 (Bin), 128))
    pack.未知函数_67177290 (BinHead)
.如果真结束
pack.未知函数_67177290 (BinLen)
pack.未知函数_67177291 (Bin)
调试输出 (未知函数_67177306 (pack.未知函数_67177294 ()))
赋值 (Bin, Tea.未知函数_67177336 (MakePackHeadBin (pack.未知函数_67177294 (), “OidbSvc.0x829_1”), qq.))
返回 (Pack (Bin, 3))

.子程序 Pack_OfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_UPLOAD_V3_1700, 字节集, , 离线文件
.参数 TargetQQ, 长整数型, , 
.参数 SHA, 文本型, , 
.参数 Size, 长整数型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 FileName, 字节集, , , 

置随机数种子 ()
赋值 (FileName, 未知函数_67177287 (相加 (到文本 (取随机数 (1000, 9999)), “.jpg”)))
赋值 (FileName, 取字节集左边 (FileName, 相减 (取字节集长度 (FileName), 1)))


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 10, 真))
pack.未知函数_67177291 (未知函数_67177388 (TargetQQ, 20, 真))
pack.未知函数_67177291 (未知函数_67177388 (1, 30, 真))
pack.未知函数_67177291 (未知函数_67177389 (FileName, 40, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (“00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00”), 50, 真))
pack.未知函数_67177291 (未知函数_67177389 (未知函数_67177385 (删全部空 (SHA)), 60, 真))
pack.未知函数_67177291 (未知函数_67177389 (FileName, 70, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 80, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 90, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 19, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (1700, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (8, 2, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177388 (3, 101, 真))
pack.未知函数_67177291 (未知函数_67177388 (104, 102, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 4D 00 00 00 3D 4F 66 66 6C 69 6E 65 46 69 6C 6C 65 48 61 6E 64 6C 65 53 76 72 2E 70 62 5F 66 74 6E 5F 43 4D 44 5F 52 45 51 5F 41 50 50 4C 59 5F 55 50 4C 4F 41 44 5F 56 33 2D 31 37 30 30 00 00 00 08 C3 D3 F2 BE 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_OfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_DOWNLOAD_1200, 字节集, , 离线文件取下载地址
.参数 FileID, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 FileIDUtf8, 字节集, , , 

赋值 (FileIDUtf8, 未知函数_67177287 (删首尾空 (FileID)))
赋值 (FileIDUtf8, 取字节集左边 (FileIDUtf8, 相减 (取字节集长度 (FileIDUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (qq., 10, 真))
pack.未知函数_67177291 (未知函数_67177389 (FileIDUtf8, 20, 真))
pack.未知函数_67177291 (未知函数_67177388 (2, 30, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 14, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (1200, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (11, 2, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177289 (“A8 06 03 B0 06 68 FA E9 30 04 C0 85 2C 01”)
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 4C 00 00 00 3C 4F 66 66 6C 69 6E 65 46 69 6C 6C 65 48 61 6E 64 6C 65 53 76 72 2E 70 62 5F 66 74 6E 5F 43 4D 44 5F 52 45 51 5F 41 50 50 4C 59 5F 44 4F 57 4E 4C 4F 41 44 2D 31 32 30 30 00 00 00 08 92 62 F5 72 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ProfileService_SetUserInfoReq_Nick, 字节集, , ProfileService.SetUserInfoReq  修改昵称
.参数 QQNick, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 bin, 字节集, , , 
.局部变量 MainBin, 字节集, , , 
.局部变量 Out, 未知类型0x49010BA3, , , 
.局部变量 Nick, 字节集, , , 

赋值 (Nick, 未知函数_67177287 (删首尾空 (QQNick)))
赋值 (Nick, 取字节集左边 (Nick, 相减 (取字节集长度 (Nick), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“4E 22”)
pack.未知函数_67177292 (取字节集长度 (Nick))
pack.未知函数_67177291 (Nick)
赋值 (MainBin, pack.未知函数_67177294 ())


Out.未知函数_67177380 ()
Out.未知函数_67177381 (qq., 0)
Out.未知函数_67177382 (1, 1)
Out.未知函数_67177384 (MainBin, 2)
赋值 (bin, Out.未知函数_67177386 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“0A”)
pack.未知函数_67177291 (bin)
pack.未知函数_67177289 (“0B”)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“08 00 01 06 03 72 65 71 1D 00”)
pack.未知函数_67177292 (取字节集长度 (bin))
pack.未知函数_67177291 (bin)
赋值 (bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“10 03 2C 3C 42 4A 0F DD 71 56 0E 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 66 0E 53 65 74 55 73 65 72 49 6E 66 6F 52 65 71 7D 00”)
pack.未知函数_67177292 (取字节集长度 (bin))
pack.未知函数_67177291 (bin)
pack.未知函数_67177289 (“8C 98 0C A8 0C”)
赋值 (bin, MakePackHeadNoToken (pack.未知函数_67177294 (), “ProfileService.SetUserInfoReq”))

返回 (Pack (bin, 2))

.子程序 Pack_UploadAddressBookV2, 字节集, , 批量匹配通讯录(可免绑定通讯录)
.参数 手机号码, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Phone, 字节集, , , 

赋值 (Phone, 未知函数_67177287 (删首尾空 (手机号码)))
赋值 (Phone, 取字节集左边 (Phone, 相减 (取字节集长度 (Phone), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 36 00 00 00 26 61 63 63 6F 75 6E 74 2E 52 65 71 75 65 73 74 55 70 6C 6F 61 64 41 64 64 72 65 73 73 42 6F 6F 6B 56 32 00 00 00 08 86 CD CF F3 00 00 00 04 00 00 00 C4 10 03 2C 3C 4C 56 0D 41 63 63 6F 75 6E 74 53 65 72 76 65 72 66 11 41 63 63 6F 75 6E 74 53 65 72 76 65 72 46 75 6E 63 7D 00 01 00 8F 08 00 02 06 1A 52 65 71 75 65 73 74 55 70 6C 6F 61 64 41 64 64 72 65 73 73 42 6F 6F 6B 56 32 1D 00 00 46 0A 03 00 00 00 00 FF FF FF FF 16 21 37 35 38 37 34 38 32 31 30 31 34 32 32 31 37 7C 31 34 3A 44 44 3A 41 39 3A 45 37 3A 46 43 3A 30 34 2D 00 0C 39 00 01 0A 06 0B”)
pack.未知函数_67177291 (Phone)
pack.未知函数_67177289 (“16 01 39 0B 0B 06 0D 52 65 71 75 65 73 74 48 65 61 64 65 72 1D 00 00 13 0A 00 64 10 1F 2C 3C 46 00 5C 66 00 76 00 86 00 9C AC 0B 8C 98 0C A8 0C”)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_MessageSvc_PbSendMsg_ForNearBy, 字节集, , 附近人消息
.参数 目标QQ, 长整数型, , 
.参数 ChatSig, 字节集, , 
.参数 消息内容, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin1, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 Bin4, 字节集, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 MsgBin, 字节集, , , 
.局部变量 MsgEnd, 字节集, , , 
.局部变量 Time, 长整数型, , , 

赋值 (MsgUtf8, 未知函数_67177287 (删首尾空 (消息内容)))
赋值 (MsgUtf8, 取字节集左边 (MsgUtf8, 相减 (取字节集长度 (MsgUtf8), 1)))
赋值 (Time, 到长整数 (未知函数_67177391 (取现行时间 ())))


pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgUtf8, 1, 真))
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgBin, 1, 真))
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgBin, 2, 真))
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (0, 15, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 31, 真))
pack.未知函数_67177291 (未知函数_67177388 (0, 41, 真))
赋值 (MsgEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgEnd, 19, 真))
赋值 (MsgEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (0, 17, 真))
pack.未知函数_67177291 (MsgEnd)
赋值 (MsgEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgEnd, 37, 真))
赋值 (MsgEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgEnd, 2, 真))
赋值 (MsgEnd, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (MsgBin)
pack.未知函数_67177291 (MsgEnd)
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgBin, 1, 真))
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (MsgBin, 3, 真))
赋值 (MsgBin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (目标QQ, 1, 真))
pack.未知函数_67177291 (未知函数_67177389 (ChatSig, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 13, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin1, 1, 真))
赋值 (Bin1, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 3, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin2, 2, 真))
赋值 (Bin2, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177388 (Time, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (212786698, 272786698), 5, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (212786698, 272786698), 9, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (212786698, 272786698), 11, 真))
pack.未知函数_67177291 (未知函数_67177388 (Time, 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 14, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin4, 6, 真))
赋值 (Bin4, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (Bin1)
pack.未知函数_67177291 (Bin2)
pack.未知函数_67177291 (MsgBin)
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (31942, 37942), 4, 真))
pack.未知函数_67177291 (未知函数_67177388 (取随机数 (1195919685, 1295919685), 5, 真))
pack.未知函数_67177291 (Bin4)
pack.未知函数_67177291 (未知函数_67177392 (0, 8, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 28 00 00 00 18 4D 65 73 73 61 67 65 53 76 63 2E 50 62 53 65 6E 64 4D 73 67 00 00 00 08 7D 5F 08 01 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_SummaryCard_ReqSearch, 字节集, , 查找目标
.参数 手机号码, 文本型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 PhoneUtf8, 字节集, , , 

赋值 (PhoneUtf8, 未知函数_67177287 (删首尾空 (手机号码)))
赋值 (PhoneUtf8, 取字节集左边 (PhoneUtf8, 相减 (取字节集长度 (PhoneUtf8), 1)))

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 25 00 00 00 19 53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 71 53 65 61 72 63 68 00 00 00 08 15 AE 8F AC 00 00 00 AE 10 03 2C 3C 42 27 CC A9 A0 56 15 53 75 6D 6D 61 72 79 43 61 72 64 53 65 72 76 61 6E 74 4F 62 6A 66 09 52 65 71 53 65 61 72 63 68 7D 00 00 76 08 00 02 06 07 52 65 71 48 65 61 64 1D 00 00 04 0A 00 01 0B 06 09 52 65 71 53 65 61 72 63 68 1D 00 00 53 0A 06 0B”)
pack.未知函数_67177291 (PhoneUtf8)
pack.未知函数_67177289 (“16 03 2B 38 36 20 03 39 00 01 0D 00 00 36 28 00 00 00 1D 00 00 00 0F 08 01 10 FF FF FF FF 0F 28 80 E8 92 26 60 02 6A 09 35 2E 35 2E 30 2E 34 36 34 70 D0 03 08 00 22 0B”)
pack.未知函数_67177291 (PhoneUtf8)
pack.未知函数_67177289 (“29 0B 8C 98 0C A8 0C”)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ProfileService_Pb_ReqSystemMsgNew_Group, 字节集, , 取QQ群邀请信息
.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Time, 长整数型, , , 

赋值 (Time, 未知函数_67177391 (取现行时间 ()))

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (1, 1, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 2, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 7, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 9, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 11, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 12, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 13, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 14, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 6, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (20, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (到长整数 (相加 (到文本 (相加 (Time, 3076)), “000000”)), 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (到长整数 (相加 (到文本 (Time), “580658”)), 3, 真))
pack.未知函数_67177291 (未知函数_67177388 (1000, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (3, 5, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177392 (0, 8, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 9, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 10, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 3B 00 00 00 2B 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 50 62 2E 52 65 71 53 79 73 74 65 6D 4D 73 67 4E 65 77 2E 47 72 6F 75 70 00 00 00 08 ED 01 37 A0 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 Pack_ProfileService_Pb_ReqSystemMsgAction_Group, 字节集, , 通过群邀请
.参数 TimeId, 长整数型, , 
.参数 GroupNumber, 长整数型, , 

.局部变量 pack, 未知类型0x49010B46, , , 
.局部变量 Bin, 字节集, , , 

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (11, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (GroupNumber, 2, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177389 (Bin, 8, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177291 (未知函数_67177392 (2, 1, 真))
pack.未知函数_67177291 (未知函数_67177388 (TimeId, 2, 真))
pack.未知函数_67177291 (未知函数_67177388 (qq., 3, 真))
pack.未知函数_67177291 (未知函数_67177392 (1, 4, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 5, 真))
pack.未知函数_67177291 (未知函数_67177392 (0, 6, 真))
pack.未知函数_67177291 (未知函数_67177392 (2, 7, 真))
pack.未知函数_67177291 (Bin)
pack.未知函数_67177291 (未知函数_67177388 (1000, 9, 真))
赋值 (Bin, pack.未知函数_67177294 ())

pack.未知函数_67177288 ()
pack.未知函数_67177289 (“00 00 00 3E 00 00 00 2E 50 72 6F 66 69 6C 65 53 65 72 76 69 63 65 2E 50 62 2E 52 65 71 53 79 73 74 65 6D 4D 73 67 41 63 74 69 6F 6E 2E 47 72 6F 75 70 00 00 00 08 ED 01 37 A0 00 00 00 04”)
pack.未知函数_67177301 (相加 (取字节集长度 (Bin), 4))
pack.未知函数_67177291 (Bin)
赋值 (Bin, Tea.未知函数_67177336 (pack.未知函数_67177294 (), qq.))
返回 (Pack (Bin, 5))

.子程序 QQ_初始化, 空白型, , 
.参数 QQ账号, 文本型, , 
.参数 QQ密码, 文本型, , 
.参数 Imei, 文本型, , 
.参数 Guid, 字节集, , 

.局部变量 luin, 长整数型, , , 
.局部变量 iuin, 整数型, , , 
.局部变量 a, 长整数型, , , 
.局部变量 ecdh, 未知类型0x41010B33, , , 

.如果真 (取反 (文件是否存在 (相加 (取运行目录 (), “\libeay32.dll”))))
    写到文件 (相加 (取运行目录 (), “\libeay32.dll”))

.子程序 QQ_连接服务器, 逻辑型, , 连接服务器
.参数 代理IP, 文本型, 可空, 留空则启用本地IP连接
.参数 代理端口, 整数型, 可空, 

.局部变量 Bin, 字节集, , , 
.局部变量 Suc, 逻辑型, , , 
.局部变量 i, 整数型, , , 

Tcp.未知支持库函数_9 ()
.如果 (是否为空 (代理IP)) ' 本地IP连接
    返回 (Tcp.未知支持库函数_8 (转换为IP地址 (“msfwifi.3g.qq.com”), 8080))
.否则
    .如果 (Tcp.未知支持库函数_8 (代理IP, 代理端口)) ' 代理方式连接
        Tcp.未知支持库函数_11 (Socks5_握手 (), 3000)
        .计次循环首 (2, i)
            赋值 (Bin, Tcp.未知支持库函数_10 (3000, Suc))
            .如果真 (Suc)
                跳出循环 ()
            .如果真结束
            延时 (10)
        .计次循环尾 ()
        .如果 (Suc)
            .如果 (等于 (Bin, { 5, 0 })) ' 允许匿名方式代理
                赋值 (Bin, {  })
                .如果 (Tcp.未知支持库函数_11 (Socks5_连接指定 (“msfwifi.3g.qq.com”, 8080, 真), 3000))
                    .计次循环首 (2, i)
                        赋值 (Bin, Tcp.未知支持库函数_10 (3000, Suc))
                        .如果真 (Suc)
                            跳出循环 ()
                        .如果真结束
                        延时 (10)
                    .计次循环尾 ()
                    .如果 (Suc)
                        .如果 (等于 (取字节集长度 (Bin), 10))
                            返回 (真)
                        .否则
                            返回 (假)
                        .如果结束
                        
                    .否则
                        返回 (假)
                    .如果结束
                    
                .否则
                    返回 (假)
                .如果结束
                
            .否则
                返回 (假)
            .如果结束
            
        .否则
            返回 (假)
        .如果结束
        
    .否则
        返回 (假)
    .如果结束
    
.如果结束


.子程序 QQ_登录, 整数型, , 
.参数 QQ账号, 文本型, , 
.参数 QQ密码, 文本型, , 
.参数 A2, 文本型, 可空, 普通登录时留空
.参数 A4, 文本型, 可空, 普通登录时留空
.参数 Sessionkey, 文本型, 可空, 普通登录时留空
.参数 Imei, 文本型, , 传空则自动生成
.参数 Guid, 文本型, , 传空则自动生成
.参数 IsLoginUserToken, 逻辑型, , 是否使用令牌登录

.局部变量 GUID_, 字节集, , , 
.局部变量 bin, 字节集, , , 

.如果真 (等于 (Imei, “”))
    赋值 (Imei, 未知函数_67177396 ())
.如果真结束
.如果 (小于或等于 (取文本长度 (Guid), 0))
    赋值 (GUID_, 未知函数_67177397 ())
.否则
    赋值 (GUID_, 未知函数_67177385 (Guid))
.如果结束

QQ_初始化 (删首尾空 (QQ账号), 删首尾空 (QQ密码), 删首尾空 (Imei), GUID_)
赋值 (qq., 0)
.如果 (等于 (IsLoginUserToken, 假))
    赋值 (IsToken_Login, 假)
.否则
    赋值 (IsToken_Login, 真)
    QQ_加载令牌数据 (删首尾空 (A2), 删首尾空 (A4), 删首尾空 (Sessionkey))
.如果结束

.判断开始 (等于 (IsLoginUserToken, 假))
    赋值 (bin, Pack_Login ())
.默认
    赋值 (bin, Pack_PushService_SvcReqRegister (1))
.判断结束

赋值 (bin, Fun_Send (bin, 3000))
.如果真 (等于 (bin, {  }))
    赋值 (last_error, “登录返回空”)
    返回 (qq.)
.如果真结束
Fun_Recv (bin)
返回 (qq.)

.子程序 QQ_取回令牌数据, 空白型, , 
.参数 A2_, 文本型, 参考, 
.参数 A4_, 文本型, 参考, 
.参数 Key_, 文本型, 参考, 

赋值 (A2_, 删全部空 (未知函数_67177306 (qq.)))
赋值 (A4_, 删全部空 (未知函数_67177306 (qq.)))
赋值 (Key_, 删全部空 (未知函数_67177306 (qq.)))

.子程序 QQ_加载令牌数据, 空白型, , 
.参数 A2, 文本型, , 
.参数 A4, 文本型, , 
.参数 Key, 文本型, , 

赋值 (qq., 未知函数_67177270 (删全部空 (A2)))
赋值 (qq., 未知函数_67177270 (删全部空 (A4)))
赋值 (qq., 未知函数_67177270 (删全部空 (Key)))
赋值 (qq., qq.)

.子程序 QQ_取Capcd, 文本型, , 
返回 (qq.)

.子程序 QQ_提交验证码, 整数型, , 四字母类型
.参数 code, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_VieryImage (删首尾空 (code)), 3000))
Fun_Recv (bin)
返回 (qq.)

.子程序 QQ_提交验证码_Ticket, 整数型, , 滑块类型
.参数 code, 文本型, , 

.局部变量 bin, 字节集, , , 

赋值 (bin, Fun_Send (Pack_VieryImage_Ticket (删首尾空 (code)), 3000))
Fun_Recv (bin)
返回 (qq.)

.子程序 QQ_取字母验证码图片, 字节集, , 
返回 (qq.)

.子程序 QQ_取登录失败信息, 文本型, , 
返回 (last_error)

.子程序 QQ_取登录QQ昵称, 文本型, , 
返回 (qq.)

.子程序 QQ_取Skey, 文本型, , 
返回 (到文本 (qq.))

.子程序 QQ_置Skey, 空白型, , 
.参数 Skey, 文本型, , 

赋值 (qq., 到字节集 (删首尾空 (Skey)))

.子程序 QQ_上线, 逻辑型, , 
.局部变量 Bin, 字节集, , , 

赋值 (Bin, Fun_Send (Pack_PushService_SvcReqRegister (1), 3000))
Fun_Recv (Bin)
.如果 ()

.子程序 QQ_下线, 逻辑型, , 
.局部变量 Bin, 字节集, , , 

Fun_Send (Pack_PushService_SvcReqRegister (2))
.如果 ()

.子程序 QQ_空间动态刷新, 空白型, , 可用于保持心跳在线(45秒一次)
Fun_Send (Pack_QzoneNewService_getUndealCount ())

.子程序 QQ_置Tcp状态, 空白型, , 可重置Tcp接收状态
.参数 保持接收, 逻辑型, , 

赋值 (Keep, 保持接收)

.子程序 QQ_取Tcp状态, 逻辑型, , 可取回当前Tcp接收状态
返回 (Keep)

.子程序 QQ_接收好友消息回调, 空白型, , 可绑定好友消息接收
.参数 子程序指针, 子程序指针, , 
.参数 标识, 整数型, 可空, 

赋值 (好友消息回调指针, 子程序指针)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束


.子程序 QQ_置消息已读, 空白型, , 
.参数 MsgHead, 字节集, , 
.参数 TargetQQ, 长整数型, , 
.参数 Time, 长整数型, , 

Fun_Send (Pack_PbMessageSvc_PbMsgReadedReport (MsgHead, TargetQQ, Time))

.子程序 QQ_获取新好友请求, 空白型, , 
Fun_Send (Pack_ProfileService_Pb_ReqSystemMsgNew_Friend ())

.子程序 QQ_PbGetMsg, 空白型, , 
Fun_Send (Pack_MessageSvc_PbGetMsg ())

.子程序 QQ_自动通过好友请求, 空白型, , 
.参数 目标QQ, 文本型, , 

Fun_Send (Pack_ProfileService_Pb_ReqSystemMsgAction_Friend (到长整数 (删首尾空 (目标QQ))))

.子程序 QQ_自动通过Q群邀请, 空白型, , 
.参数 TimeId, 长整数型, , 
.参数 GroupNumber, 长整数型, , 

Fun_Send (Pack_ProfileService_Pb_ReqSystemMsgAction_Group (TimeId, GroupNumber))

.子程序 QQ_发送好友文本消息, 空白型, , 
.参数 好友QQ号码, 文本型, , 
.参数 文本消息内容, 文本型, , 
.参数 添加随机表情, 逻辑型, , 

.如果真 (并且 (不等于 (好友QQ号码, “”), 不等于 (文本消息内容, “”)))
    Fun_Send (Pack_MessageSvc_PbSendMsg_ForFriend (到长整数 (好友QQ号码), 文本消息内容, 添加随机表情))
.如果真结束


.子程序 QQ_发送好友语音消息, 空白型, , 
.参数 TargetQQ, 长整数型, , 
.参数 Voicedata, 字节集, , 

.局部变量 Time, 长整数型, , , 
.局部变量 MainData, 字节集, , , 
.局部变量 data, 字节集, , , 
.局部变量 data数组, 字节集, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 IsEnd, 逻辑型, , , 

清除数组 (data数组)
赋值 (Time, 未知函数_67177391 (取现行时间 ()))

赋值 (MainData, Voicedata)
.循环判断首 ()
    赋值 (data, {  })
    .如果真 (小于或等于 (取字节集长度 (MainData), 2400))
        赋值 (data, MainData)
        加入成员 (data数组, data)
        跳出循环 ()
    .如果真结束
    
    赋值 (data, 取字节集左边 (MainData, 2400))
    赋值 (MainData, 取字节集右边 (MainData, 相减 (取字节集长度 (MainData), 2400)))
    .如果真 (大于 (取字节集长度 (MainData), 0))
        加入成员 (data数组, data)
    .如果真结束
    
.循环判断尾 (大于 (取字节集长度 (MainData), 0))

.计次循环首 (取数组成员数 (data数组), i)
    .如果 (大于或等于 (i, 取数组成员数 (data数组)))
        赋值 (IsEnd, 真)
    .否则
        赋值 (IsEnd, 假)
    .如果结束
    Fun_Send (Pack_StreamSvr_UploadStreamMsg (Time, TargetQQ, data数组 [i], i, IsEnd))
.计次循环尾 ()

.子程序 QQ_发送Q群文本消息, 空白型, , 
.参数 群ID, 长整数型, , 
.参数 消息内容, 文本型, , 
.参数 添加随机表情, 逻辑型, , 

.如果真 (并且 (大于 (群ID, 0), 不等于 (消息内容, “”)))
     ' Fun_Send (Pack_MessageSvc_PbSendMsg_ForGroup (群ID, 消息内容, 添加随机表情))
 ' .如果真结束


.子程序 QQ_获取好友列表, 空白型, , 
.参数 回调子程序, 子程序指针, , 
.参数 标识, 整数型, 可空, 
.参数 获取好友自定义参数, 整数型, 可空, 

清除数组 (FriendListS)
赋值 (好友列表回调指针, 回调子程序)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束

.如果 (大于 (获取好友自定义参数, 0))
    赋值 (类获取好友自定义参数, 获取好友自定义参数)
.否则
    赋值 (类获取好友自定义参数, 0)
.如果结束

Fun_Send (Pack_GetFriendListReq (0, 20))

.子程序 QQ_取回所有好友, 空白型, , 
.参数 FriendListInfo, 未知类型0x41010B2C, 参考 数组, 

赋值 (FriendListInfo, FriendListS)

.子程序 QQ_取QQ头像图片, 字节集, , 
.参数 TargetQQ, 文本型, , 

.局部变量 Url, 文本型, , , 
.局部变量 Pic, 字节集, , , 

赋值 (Url, 相加 (“http://q.qlogo.cn/headimg_dl?bs=qq&spec=160&dst_uin=”, TargetQQ))
赋值 (Pic, 未知支持库函数_7 (Url))
返回 (Pic)

.子程序 QQ_获取Q群列表, 空白型, , 
.参数 回调子程序, 子程序指针, , 
.参数 标识, 整数型, , 
.参数 获取群自定义参数, 整数型, , 

清除数组 (TroopListS)
赋值 (Q群列表回调指针, 回调子程序)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束

.如果 (大于 (获取群自定义参数, 0))
    赋值 (类获取群自定义参数, 获取群自定义参数)
.否则
    赋值 (类获取群自定义参数, 0)
.如果结束

Fun_Send (Pack_Friendlist_GetTroopListReqV2 ())

.子程序 QQ_取回所有群, 空白型, , 
.参数 TroopListInfo, 未知类型0x41010B2D, 参考 数组, 

赋值 (TroopListInfo, TroopListS)

.子程序 QQ_获取QQ群成员, 空白型, , 
.参数 GroupID, 长整数型, , 
.参数 GroupCode, 长整数型, , 
.参数 回调子程序, 子程序指针, , 
.参数 标识, 整数型, , 

清除数组 (TroopMemberListS)
赋值 (QQ群成员列表回调指针, 回调子程序)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束
Fun_Send (Pack_Friendlist_getTroopMemberList (GroupID, GroupCode, 0))

.子程序 QQ_取回所有群成员, 空白型, , 
.参数 TroopMemberInfo, 未知类型0x41010B2E, 参考 数组, 

赋值 (TroopMemberInfo, TroopMemberListS)

.子程序 QQ_邀请其它群成员进群, 空白型, , 
.参数 欲进入的群号码, 长整数型, , 
.参数 欲邀请的群号码, 长整数型, 数组, 
.参数 欲邀请的QQ成员号码, 长整数型, 数组, 

Fun_Send (Pack_OidbSvc_oidb_0x758 (欲进入的群号码, 欲邀请的群号码, 欲邀请的QQ成员号码))

.子程序 QQ_获取加好友设置, 空白型, , 
.参数 目标QQ, 长整数型, , 
.参数 添加渠道, 整数型, , 
.参数 回调子程序, 子程序指针, , 
.参数 标识, 整数型, , 

赋值 (获取加好友设置回调指针, 回调子程序)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束
Fun_Send (Pack_mqq_IMService_FriendListServiceServantObj_GetUserAddFriendSettingReq (目标QQ, 添加渠道))

.子程序 QQ_添加QQ好友, 空白型, , 
.参数 目标QQ, 长整数型, , 
.参数 添加类型, 整数型, , 
.参数 添加渠道, 整数型, , 
.参数 添加信息, 文本型, , 

Fun_Send (Pack_mqq_IMService_FriendListServiceServantObj_AddFriendReq (目标QQ, 添加类型, 添加渠道, 添加信息))

.子程序 QQ_添加QQ群, 空白型, , 
.参数 添加群号码, 长整数型, , 
.参数 添加附加信息, 文本型, , 

Fun_Send (Pack_KQQ_ProfileService_ProfileServantObj_GroupMngReq (添加群号码, 删首尾空 (添加附加信息)))

.子程序 QQ_按条件查找陌生人, 空白型, , 
.参数 KeyWord, 文本型, , 关键词
.参数 Gender, 整数型, , 性别：0 = 不限  1 = 男   2 = 女
.参数 AgeStart, 整数型, , 起始年龄
.参数 AgeEnd, 整数型, , 结束年龄
.参数 Occupation, 整数型, , 职业：0=不限|1=计算机/互联网/通信|2=生产/工艺/制造|3=医药/护理/制药|4=金融/银行/投资/保险|5=商业/服务业/个体经营|6=文化/广告/传媒|7=娱乐/艺术/表演|8=律师/法务|9=教育/培训|10=公务员/行政/事业单位|11=模特|12=空姐|13=学生|14=其它
.参数 LocationStateCode, 整数型, , 所在地|省级代码
.参数 LocationCityCode, 整数型, , 所在地|市级代码
.参数 LocationRegionCode, 整数型, , 所在地|县级代码
.参数 HometownStateCode, 整数型, , 故乡|省级代码
.参数 HometownCityCode, 整数型, , 故乡|市级代码
.参数 HometownRegionCode, 整数型, , 故乡|县级代码
.参数 回调子程序, 子程序指针, , 
.参数 标识, 整数型, , 

赋值 (RespCondSearchdata., KeyWord)
赋值 (RespCondSearchdata., Gender)
赋值 (RespCondSearchdata., AgeStart)
赋值 (RespCondSearchdata., AgeEnd)
赋值 (RespCondSearchdata., Occupation)
赋值 (RespCondSearchdata., LocationStateCode)
赋值 (RespCondSearchdata., LocationCityCode)
赋值 (RespCondSearchdata., LocationRegionCode)
赋值 (RespCondSearchdata., HometownStateCode)
赋值 (RespCondSearchdata., HometownCityCode)
赋值 (RespCondSearchdata., HometownRegionCode)
清除数组 (RespCondSearchInfoS)
.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束
赋值 (按条件查找陌生人回调指针, 回调子程序)
Fun_Send (Pack_SummaryCard_ReqCondSearch (0, KeyWord, Gender, AgeStart, AgeEnd, Occupation, LocationStateCode, LocationCityCode, LocationRegionCode, HometownStateCode, HometownCityCode, HometownRegionCode))

.子程序 QQ_取回所有按条件查找陌生人结果, 空白型, , 
.参数 RespCondSearchInfo, 未知类型0x41010B31, 参考 数组, 

赋值 (RespCondSearchInfo, RespCondSearchInfoS)

.子程序 QQ_生成地区代码文件, 空白型, , 生成地区代码文件至程序运行目录下
写到文件 (相加 (取运行目录 (), “\地区代码表.xml”))

.子程序 QQ_获取附近的人_Tcp, 空白型, , 
.参数 Lng, 长整数型, , 精度
.参数 Lat, 长整数型, , 纬度
.参数 Gender, 整数型, , 性别（0=全部  1=男  2=女）
.参数 Time, 整数型, , 时间
.参数 AgeFrom, 整数型, , 年龄低
.参数 AgeTo, 整数型, , 年龄高

Fun_Send (Pack_OidbSvc_0x8dd (Lng, Lat, Gender, Time, AgeFrom, AgeTo))

.子程序 QQ_QQ看点_关注, 空白型, , 
.参数 目标QQ, 文本型, , 

Fun_Send (Pack_MQUpdateSvc_com_qq_kandian_web_JsOidbProxy_oidb_0x978_0 (删首尾空 (目标QQ)))

.子程序 QQ_QQ看点_发布, 空白型, , 
.参数 文本内容, 文本型, , 

Fun_Send (Pack_OidbSvc_0x83e_0 (删首尾空 (文本内容)))

.子程序 QQ_QQ看点_多人推送, 空白型, , 
.参数 目标QQ数组, 长整数型, , 
.参数 文本内容, 文本型, , 

Fun_Send (Pack_OidbSvc_0x83e_主页 (目标QQ数组, 删首尾空 (文本内容)))

.子程序 QQ_附近动态_评论回复, 空白型, , 
.参数 目标QQ, 文本型, , 
.参数 Msg, 文本型, , 

Fun_Send (Pack_OidbSvc_0xada_0 (到长整数 (目标QQ), Msg))

.子程序 QQ_微视_评论回复, 空白型, , 
.参数 目标QQ, 文本型, , 
.参数 评论内容, 文本型, , 

赋值 (局_评论结果, 假)
赋值 (局_评论失败原因, “”)
Fun_Send (Pack_StorySvc_add_feed_comment (删首尾空 (目标QQ), 删首尾空 (评论内容)))

.子程序 QQ_微视_取回评论结果, 逻辑型, , 
.参数 Err, 文本型, , 

.如果 (局_评论结果)
    赋值 (Err, “”)
.否则
    赋值 (Err, 局_评论失败原因)
.如果结束
返回 (局_评论结果)

.子程序 QQ_附近人_关注, 空白型, , 
.参数 目标QQ, 文本型, , 

赋值 (局_关注结果, 假)
Fun_Send (Pack_MQUpdateSvc_com_qq_buluo_web_follow_user (删首尾空 (目标QQ)))

.子程序 QQ_附近人_取回关注结果, 逻辑型, , 
返回 (局_关注结果)

.子程序 QQ_绑定通讯录_获取短信, 空白型, , 
.参数 手机区号, 文本型, , 
.参数 手机号码, 文本型, , 

赋值 (局_SmsBin, “”)
Fun_Send (Pack_account_RequestBindMobileV2 (手机区号, 手机号码))

.子程序 QQ_绑定通讯录_取回SmsBin, 文本型, , 
返回 (局_SmsBin)

.子程序 QQ_绑定通讯录_提交验证码, 空白型, , 
.参数 CodeText, 文本型, , 
.参数 SmsBinText, 文本型, , 

Fun_Send (Pack_account_RequestVerifyBindingSmscode (CodeText, SmsBinText))

.子程序 QQ_颜值评分, 空白型, , 
.参数 Tinyid, 文本型, , 
.参数 Sign, 文本型, , 

Fun_Send (Pack_MQUpdateSvc_com_qq_nearby_web_NearbySvr_set_face_score (Tinyid, Sign))

.子程序 QQ_获取颜值评分列表, 空白型, , 
.局部变量 Url, 文本型, , , 
.局部变量 POST, 文本型, , , 
.局部变量 Cookies, 文本型, , , 
.局部变量 Return, 文本型, , , 

赋值 (Url, “https://nearby.qq.com/cgi-bin/nearby/web/card/get_score_page_info”)
赋值 (Cookies, 相加 (“uin=o”, 到文本 (qq.), “; skey=”, 到文本 (qq.)))
赋值 (POST, “enum_type=1&latitude=39916805&longitude=116410261&portal=1&client_type=2&list_size=10&gender=0&age_lower=0&age_upper=0&index=1&client_version=7.8.8.3790&bkn=1835722509”)
赋值 (Return, 未知函数_67177414 (到文本 (未知函数_67177415 (Url, 1, POST, Cookies)), 真))
调试输出 (Return)

.子程序 QQ_查名片_Tinyid, 空白型, , 
.参数 Tinyid, 长整数型, , 

赋值 (局_查询Tinyid结果, “”)
Fun_Send (Pack_SummaryCard_ReqSummaryCard_Tinyid (Tinyid))

.子程序 QQ_获取附近人, 逻辑型, , 
.参数 Lat, 文本型, , 
.参数 Lng, 文本型, , 
.参数 Gender, 文本型, , 性别 0=全部 1=男 2=女
.参数 Time, 文本型, , 时间 30=30分钟  60=1小时  240=4小时  480=全部
.参数 AgeUp, 文本型, , 
.参数 AgeLow, 文本型, , 
.参数 ReturnQQNumber, 逻辑型, 参考, 是否查询Q号
.参数 回调指针, 子程序指针, 可空, 
.参数 标识, 整数型, 可空, 

.局部变量 Http, 未知类型0x49010BC8, , , 
.局部变量 Url, 文本型, , , 
.局部变量 Return, 文本型, , , 
.局部变量 POST, 文本型, , , 
.局部变量 Cookies, 文本型, , , 
.局部变量 Json, 未知类型0x49010BC9, , , 
.局部变量 Result, 整数型, , , 
.局部变量 NearbyPeopledata, 文本型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 RespNearby, 未知类型0x41010B2F, , , 
.局部变量 Str_cookie, 文本型, , , 
.局部变量 IsEnd, 文本型, , , 

清除数组 (NearByPeopleS)
赋值 (Str_cookie, “”)

.如果 (大于 (标识, 0))
    赋值 (类标识, 标识)
.否则
    赋值 (类标识, 0)
.如果结束

.循环判断首 ()
    赋值 (Url, “https://nearby.qq.com/cgi-bin/nearby/nbpage/nb_people”)
    
    赋值 (Cookies, 相加 (“uin=o”, 删首尾空 (到文本 (qq.)), “; skey=”, 删首尾空 (到文本 (qq.)), “; _supWebp=1”))
    
    赋值 (POST, 相加 (“{/str_cookie/:/”, 删首尾空 (Str_cookie), “/,/msg_lbs_info/:{/msg_location/:{/int32_latitude/:”, 删首尾空 (Lat), “,/int32_longitude/:”, 删首尾空 (Lng), “,/int32_coordinate/:0}},/msg_filter/:{/uint32_gender/:”, 删首尾空 (Gender), “,/uint32_time_interval/:”, 删首尾空 (Time), “,/uint32_age_up/:”, 删首尾空 (AgeUp), “,/uint32_age_low/:”, 删首尾空 (AgeLow), “,/uint32_profession/:0,/uint32_interest/:0,/msg_hometown/:{/uint32_country/:0,/uint32_province/:0,/uint32_city/:0},/uint32_constellation/:0},/bkn/:”, 删首尾空 (Get_tk (到文本 (qq.))), “}”))
    
    
    赋值 (POST, 子文本替换 (POST, “/”, #引号, , , 真))
    调试输出 (POST)
    
    Http.未知函数_67177418 (Cookies)
    Http.未知函数_67177419 (“POST”, Url)
    Http.未知函数_67177420 (“application/json”)
    Http.未知函数_67177421 (“Mozilla/5.0 (Linux; Android 5.1.1; sm-g610f Build/LYZ28N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Safari/537.36 V1_AND_SQ_7.8.8_942_YYB_D QQ/7.8.8.3790 NetType/WIFI WebP/0.4.1 Pixel/900 StatusBarHeight/39”)
    Http.未知函数_67177422 (POST)
    赋值 (Return, Http.未知函数_67177423 ())
    调试输出 (Return)
    .如果真 (取反 (Json.未知函数_67177424 (Return)))
        返回 (假)
    .如果真结束
    
    赋值 (Result, Json.未知函数_67177425 (“ec”))
    .如果真 (不等于 (Result, 0))
        赋值 (IsEnd, “1”)
    .如果真结束
    
    赋值 (Str_cookie, Json.未知函数_67177426 (“result.str_cookie”))
    .如果真 (等于 (取文本左边 (Str_cookie, 1), #引号))
        赋值 (Str_cookie, 未知函数_67177320 (Str_cookie, #引号, #引号))
    .如果真结束
    赋值 (IsEnd, Json.未知函数_67177426 (“result.uint32_is_end”))
    
    赋值 (计次, Json.未知函数_67177427 (“result.rpt_nearby_people”))
    .如果真 (小于或等于 (计次, 0))
        跳出循环 ()
    .如果真结束
    .计次循环首 (计次, i)
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].uint64_tinyid”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].str_nick”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].uint32_gender”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].uint32_age”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].str_description”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].str_headurl”)))
        赋值 (RespNearby., Json.未知函数_67177426 (相加 (“result.rpt_nearby_people[”, 到文本 (相减 (i, 1)), “].bool_online”)))
        .如果 (ReturnQQNumber)
            QQ_查名片_Tinyid (到长整数 (RespNearby.))
            延时 (100)
            .计次循环首 (20, )
                .如果 (不等于 (局_查询Tinyid结果, “”))
                    赋值 (RespNearby., 局_查询Tinyid结果)
                    跳出循环 ()
                .否则
                    延时 (100)
                .如果结束
                
            .计次循环尾 ()
             ' 调试输出 (RespNearby.Tinyid, RespNearby.QQNumber, RespNearby.Nick, RespNearby.Gender, RespNearby.Age, RespNearby.Description, RespNearby.HeadUrl, RespNearby.BoolOnline)
        .否则
             ' 调试输出 (RespNearby.Tinyid, RespNearby.Nick, RespNearby.Gender, RespNearby.Age, RespNearby.Description, RespNearby.HeadUrl, RespNearby.BoolOnline)
        .如果结束
        
         ' 调试输出 (RespNearby.Tinyid, RespNearby.QQNumber, RespNearby.Nick, RespNearby.Gender, RespNearby.Age, RespNearby.Description, RespNearby.HeadUrl, RespNearby.BoolOnline)
        加入成员 (NearByPeopleS, RespNearby)
    .计次循环尾 ()
.循环判断尾 (不等于 (到整数 (IsEnd), 1))
调用子程序 (回调指针, , , 类标识)
返回 (真)

.子程序 QQ_取回所有附近人列表结果, 空白型, , 
.参数 NearByPeople, 未知类型0x41010B2F, 参考 数组, 

赋值 (NearByPeople, NearByPeopleS)

.子程序 QQ_发送离线文件, 空白型, , 
.参数 TargetQQ, 长整数型, , 
.参数 SHA, 文本型, , 
.参数 Size, 长整数型, , 
.参数 回调指针, 子程序指针, , 
.参数 标识, 整数型, , 

赋值 (离线文件指针, 回调指针)
赋值 (类标识, 标识)
Fun_Send (Pack_OfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_UPLOAD_V3_1700 (TargetQQ, SHA, Size))

.子程序 QQ_好友消息_图片消息, 空白型, , 
.参数 TargetQQ, 长整数型, , 目标好友QQ账号
.参数 Image, 字节集, , 图片

赋值 (局_是否群成员消息, 假)
赋值 (局_上传图片, Image)
赋值 (局_好友消息_图片_目标, TargetQQ)
赋值 (局_图片是否上传完毕, 假)
Fun_Send (Pack_LongConn_OffPicUp (TargetQQ, Image))

.子程序 QQ_QQ群消息_图片消息, 空白型, , 
.参数 TargetQQ, 长整数型, , 目标QQ群账号
.参数 Image, 字节集, , 图片

赋值 (局_上传图片, Image)
赋值 (局_QQ群消息_图片_目标, TargetQQ)
赋值 (局_图片是否上传完毕, 假)
Fun_Send (Pack_ImgStore_GroupPicUp (TargetQQ, Image))

.子程序 QQ_群成员消息_图片消息, 空白型, , 
.参数 GroupCode, 长整数型, , 群Code
.参数 TargetQQ, 长整数型, , 目标好友QQ账号
.参数 Image, 字节集, , 图片

赋值 (局_是否群成员消息, 真)
赋值 (局_上传图片, Image)
赋值 (局_群成员消息_图片_目标QQ, TargetQQ)
赋值 (局_群成员消息_图片_目标群Code, GroupCode)
赋值 (局_图片是否上传完毕, 假)
Fun_Send (Pack_LongConn_OffPicUp (TargetQQ, Image))

.子程序 QQ_QQ群成员消息_文本消息, 空白型, , 
.参数 TargetGroupCode, 长整数型, , 
.参数 TargetQQ, 长整数型, , 
.参数 MsgText, 文本型, , 

 ' Fun_Send (Pack_MessageSvc_PbSendMsg_ForGroupMember (TargetGroupCode, TargetQQ, MsgText))

.子程序 QQ_通讯录加好友, 空白型, , 
.参数 手机号码, 文本型, 数组, 限制每三十个一轮
.参数 验证信息, 文本型, , 

Fun_Send (Pack_OidbSvc_0x829_1 (删首尾空 (验证信息), 手机号码))

.子程序 QQ_查询手机绑定状态, 空白型, , 
.参数 手机号码, 文本型, , 

赋值 (局_手机查询结果逻辑, 假)
连续赋值 (0, 局_手机查询结果数据., 局_手机查询结果数据.)
连续赋值 (“”, 局_手机查询结果数据., 局_手机查询结果数据., 局_手机查询结果数据., 局_手机查询结果数据.)
Fun_Send (Pack_SummaryCard_ReqSearch (手机号码))

.子程序 QQ_取回手机绑定状态, 逻辑型, , 
.参数 查询结果, 未知类型0x41010B32, 参考, 

赋值 (查询结果, 局_手机查询结果数据)
返回 (局_手机查询结果逻辑)

.子程序 QQ_修改昵称, 空白型, , 
.参数 欲修改QQ昵称, 文本型, , 

Fun_Send (Pack_ProfileService_SetUserInfoReq_Nick (删首尾空 (欲修改QQ昵称)))

.子程序 QQ_修改QQ头像, 空白型, , 
.参数 头像图片, 字节集, , 建议jpg格式(未做分包发送，不建议图片过大)
.参数 代理ip, 文本型, , 
.参数 代理端口, 整数型, , 

赋值 (局_上传图片, 头像图片)
赋值 (局_上传类型, 1)
Fun_Send (Pack_HttpConn_0x6ff_501 ())

.子程序 上传图片到服务器, 逻辑型, , 
.参数 上传服务器地址, 文本型, , 
.参数 上传服务器端口, 整数型, , 
.参数 Pic, 字节集, , 
.参数 PicToken, 字节集, , 
.参数 代理ip, 文本型, 可空, 
.参数 代理端口, 整数型, 可空, 
.参数 代理账号, 文本型, 可空, 
.参数 代理密码, 文本型, 可空, 

.局部变量 Suc, 逻辑型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 UpRev, 字节集, , , 
.局部变量 UpPicServer, 未知类型0x50002, , , 

UpPicServer.未知支持库函数_9 ()
.如果 (等于 (代理ip, “”))
    .如果 (UpPicServer.未知支持库函数_8 (上传服务器地址, 上传服务器端口)) ' 非代理模式
        UpPicServer.未知支持库函数_11 (Pack_PicUp_DataUp (Pic, PicToken), 3000)
        赋值 (UpRev, UpPicServer.未知支持库函数_10 (3000, Suc))
         ' 调试输出 (Bin2HexTo (UpRev))
        .如果真 (取反 (Suc))
            返回 (假)
        .如果真结束
        .如果真 (小于或等于 (取字节集长度 (UpRev), 0))
            返回 (假)
        .如果真结束
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.否则
    .如果 (UpPicServer.未知支持库函数_8 (删首尾空 (代理ip), 代理端口)) ' Socks5代理模式
        UpPicServer.未知支持库函数_11 (Socks5_握手 (), 3000)
        赋值 (Bin, UpPicServer.未知支持库函数_10 (3000, Suc))
        .如果 (大于 (取字节集长度 (Bin), 0))
            赋值 (Bin, {  })
            .如果 (UpPicServer.未知支持库函数_11 (Socks5_连接指定 (上传服务器地址, 上传服务器端口, 假), 3000))
                赋值 (Bin, UpPicServer.未知支持库函数_10 (3000, Suc))
                .如果 (大于 (取字节集长度 (Bin), 0))
                    UpPicServer.未知支持库函数_11 (Pack_PicUp_DataUp (Pic, PicToken), 3000)
                    赋值 (UpRev, UpPicServer.未知支持库函数_10 (3000, Suc))
                    .如果真 (取反 (Suc))
                        返回 (假)
                    .如果真结束
                    .如果真 (小于或等于 (取字节集长度 (UpRev), 0))
                        返回 (假)
                    .如果真结束
                    
                    返回 (真)
                .否则
                    返回 (假)
                .如果结束
                
                返回 (真)
            .否则
                返回 (假)
            .如果结束
            
        .否则
            返回 (假)
        .如果结束
        
    .否则
        返回 (假)
    .如果结束
    
.如果结束


.子程序 QQ_附近人消息, 空白型, , 
.参数 目标QQ, 长整数型, , 
.参数 ChatSig, 字节集, , 
.参数 消息内容, 文本型, , 

Fun_Send (Pack_MessageSvc_PbSendMsg_ForNearBy (目标QQ, ChatSig, 消息内容))

.子程序 QQ_获取QQ群邀请信息, 空白型, , 
Fun_Send (Pack_ProfileService_Pb_ReqSystemMsgNew_Group ())

.子程序 Get_tk, 文本型, , gtk算法
.参数 Skey, 文本型, , 

.局部变量 脚本, 未知类型0x49010BE2, , , 

脚本.未知函数_67177443 ()

.子程序 Read_HttpConn_0x6ff_501, 空白型, , 
.参数 Rev, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 PicToken, 字节集, , , 
.局部变量 PicSig, 字节集, , , 
.局部变量 UpPicIp, 文本型, , , 
.局部变量 UpPicPort, 整数型, , , 
.局部变量 Server, 字节集, , , 
.局部变量 上传结果, 逻辑型, , , 
.局部变量 上传计次, 整数型, , , 

Unpack.未知函数_67177296 (Rev)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

.如果真 (未知函数_67177447 (Bin, Arr))
    .如果真 (大于 (取数组成员数 (Arr), 0))
        赋值 (Bin, Arr [1].)
        清除数组 (Arr)
    .如果真结束
    .如果真 (未知函数_67177447 (Bin, Arr))
        .如果真 (大于 (取数组成员数 (Arr), 0))
            赋值 (PicToken, Arr [1].)
            赋值 (PicSig, Arr [2].)
            调试输出 (到文本 (PicSig), 未知函数_67177306 (PicToken))
            赋值 (Bin, Arr [3].)
            清除数组 (Arr)
            .如果真 (未知函数_67177447 (Bin, Arr))
                .计次循环首 (取数组成员数 (Arr), i)
                    .如果真 (等于 (Arr [i], , 2))
                        赋值 (Bin, Arr [i], )
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                清除数组 (Arr)
                .如果真 (未知函数_67177447 (Bin, Arr))
                    赋值 (Server, Arr [2].)
                    赋值 (UpPicIp, 未知函数_67177448 (Server))
                    未知函数_67177449 (Arr, 3, UpPicPort)
                    调试输出 (UpPicIp, UpPicPort)
                     ' 上传计次 ＝ 0
                     ' 
                     ' 上传结果 ＝ 上传图片到服务器 (UpPicIp, UpPicPort, 局_上传图片, PicToken, 局_代理IP, 局_代理端口, “UserName”, “UserPass”)
                     ' 上传计次 ＝ 上传计次 ＋ 1
                     ' .如果真 (大于或等于 (上传计次, 3))
                         ' 跳出循环 ()
                    .如果真结束
                    
                     ' 循环判断尾 (上传结果 ＝ 假)
                    赋值 (上传结果, 上传图片到服务器 (UpPicIp, UpPicPort, 局_上传图片, PicToken))
                    调试输出 (“上传结果：”, 上传结果)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 ReadMessageSvc_PushNotify, 空白型, , 
.参数 Recvdata, 字节集, , 

.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Type, 整数型, , , 

Unpack.未知函数_67177296 (Recvdata)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177454 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))
Unpack.未知函数_67177296 (Bin)
Unpack.未知函数_67177299 (58)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177458 (0)
in.未知函数_67177454 (1)
in.未知函数_67177455 (2)
in.未知函数_67177455 (3)
in.未知函数_67177456 (4)
赋值 (Type, in.未知函数_67177454 (5))

.判断开始 (等于 (Type, 166)) ' 好友消息
    QQ_PbGetMsg ()
.判断 (等于 (Type, 187)) ' 好友请求
    QQ_获取新好友请求 ()
.判断 (等于 (Type, 188))
    调试输出 (未知函数_67177306 (Bin))
.判断 (等于 (Type, 87)) ' QQ群邀请
    QQ_获取QQ群邀请信息 ()
.默认
    调试输出 (Type)
.判断结束


.子程序 ReadFriendPbMsg, 空白型, , 
.参数 Recvdata, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 Bin, 字节集, , , 
.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 MsgId, 长整数型, , , 
.局部变量 MsgBin, 字节集, , , 
.局部变量 InfoBin, 字节集, , , 
.局部变量 FromQQ, 长整数型, , , 
.局部变量 RecvQQ, 长整数型, , , 
.局部变量 FromTime, 长整数型, , , 
.局部变量 FromType, 整数型, , , 
.局部变量 MsgType, 整数型, , , 
.局部变量 MsgText, 文本型, , , 
.局部变量 MsgUtf8, 字节集, , , 
.局部变量 表情序号, 整数型, , , 
.局部变量 MsgReadHead, 字节集, , , 

Unpack.未知函数_67177296 (Recvdata)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Recvdata, Unpack.未知函数_67177299 (Len))
.如果真 (未知函数_67177447 (Recvdata, t_arr, 真))
    .计次循环首 (取数组成员数 (t_arr), i)
        .如果真 (并且 (等于 (t_arr [i], , 3), 等于 (t_arr [i], , 2)))
            赋值 (MsgReadHead, t_arr [i], )
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 5), 等于 (t_arr [i], , 2)))
            赋值 (Bin, t_arr [i], )
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (小于或等于 (取字节集长度 (Bin), 0))
        返回 ()
    .如果真结束
    .如果真 (未知函数_67177447 (Bin, t_arr, 真))
        .计次循环首 (取数组成员数 (t_arr), i)
            .如果真 (并且 (等于 (t_arr [i], , 4), 等于 (t_arr [i], , 2)))
                赋值 (Bin, t_arr [i], )
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (小于或等于 (取字节集长度 (Bin), 0))
            返回 ()
        .如果真结束
        .如果真 (未知函数_67177447 (Bin, t_arr, 真))
            .计次循环首 (取数组成员数 (t_arr), i)
                .如果真 (并且 (等于 (t_arr [i], , 1), 等于 (t_arr [i], , 2)))
                    赋值 (InfoBin, t_arr [i], )
                .如果真结束
                .如果真 (并且 (等于 (t_arr [i], , 3), 等于 (t_arr [i], , 2)))
                    赋值 (MsgBin, t_arr [i], )
                .如果真结束
                .如果真 (并且 (大于 (取字节集长度 (InfoBin), 0), 大于 (取字节集长度 (MsgBin), 0)))
                    跳出循环 ()
                .如果真结束
                
            .计次循环尾 ()
            .如果真 (未知函数_67177447 (InfoBin, t_arr, 真))
                未知函数_67177459 (t_arr, 1, FromQQ) ' 接收QQ
                未知函数_67177459 (t_arr, 2, RecvQQ) ' 发送QQ
                未知函数_67177449 (t_arr, 3, MsgType) ' 消息类型
                未知函数_67177449 (t_arr, 4, FromType) ' 消息类型
                未知函数_67177459 (t_arr, 6, FromTime) ' 消息时间
                未知函数_67177459 (t_arr, 7, MsgId) ' 消息ID
                
                QQ_置消息已读 (MsgReadHead, FromQQ, FromTime)
                
                .如果真 (未知函数_67177447 (MsgBin, t_arr, 真))
                    .计次循环首 (取数组成员数 (t_arr), i)
                        
                        .如果真 (并且 (等于 (t_arr [i], , 1), 等于 (t_arr [i], , 2)))
                            赋值 (MsgBin, t_arr [i], )
                            跳出循环 ()
                        .如果真结束
                        
                    .计次循环尾 ()
                    .如果真 (未知函数_67177447 (MsgBin, t_arr, 真))
                        .计次循环首 (取数组成员数 (t_arr), i)
                            .如果真 (并且 (等于 (t_arr [i], , 2), 等于 (t_arr [i], , 2)))
                                赋值 (MsgBin, t_arr [i], )
                                跳出循环 ()
                            .如果真结束
                            
                        .计次循环尾 ()
                        .如果真 (未知函数_67177447 (MsgBin, t_arr, 真))
                            .计次循环首 (取数组成员数 (t_arr), i)
                                .如果真 (并且 (等于 (t_arr [i], , 1), 等于 (t_arr [i], , 2)))
                                    赋值 (MsgBin, t_arr [i], )
                                    跳出循环 ()
                                .如果真结束
                                
                            .计次循环尾 ()
                            .如果真 (未知函数_67177447 (MsgBin, t_arr, 真))
                                .如果真 (大于或等于 (取数组成员数 (t_arr), 1))
                                    .判断开始 (等于 (t_arr [1]., 1)) ' 文本消息
                                        赋值 (MsgText, 未知函数_67177319 (t_arr [1].))
                                        赋值 (MsgUtf8, 到字节集 (MsgText))
                                        调用子程序 (好友消息回调指针, , , FromQQ, RecvQQ, 1, FromTime, 取变量数据地址 (MsgUtf8), 取字节集长度 (MsgUtf8), 类标识)
                                    .判断 (等于 (t_arr [1]., 2)) ' 表情消息
                                        .如果真 (未知函数_67177447 (t_arr [1]., t_arr, 真))
                                            未知函数_67177449 (t_arr, 1, 表情序号)
                                             ' 调试输出 (表情序号)
                                        .如果真结束
                                        赋值 (MsgText, “对方给您发送了一条表情消息”)
                                        赋值 (MsgUtf8, 到字节集 (MsgText))
                                        调用子程序 (好友消息回调指针, , , FromQQ, RecvQQ, 1, FromTime, 取变量数据地址 (MsgUtf8), 取字节集长度 (MsgUtf8), 类标识)
                                    .判断 (等于 (t_arr [1]., 4)) ' 图片消息
                                        赋值 (MsgText, “对方给您发送了一条图片消息”)
                                        赋值 (MsgUtf8, 到字节集 (MsgText))
                                         ' 调用子程序 (好友消息回调指针, , , FromQQ, RecvQQ, 1, FromTime, 取变量数据地址 (MsgUtf8), 取字节集长度 (MsgUtf8), 类标识)
                                    .判断 (等于 (t_arr [1]., 53)) ' 窗口抖动
                                        赋值 (MsgText, “对方给您发送了一个窗口抖动”)
                                        赋值 (MsgUtf8, 到字节集 (MsgText))
                                        调用子程序 (好友消息回调指针, , , FromQQ, RecvQQ, 1, FromTime, 取变量数据地址 (MsgUtf8), 取字节集长度 (MsgUtf8), 类标识)
                                    .默认
                                        
                                    .判断结束
                                    
                                    
                                .如果真结束
                                
                                
                                
                                
                            .如果真结束
                            
                        .如果真结束
                        
                    .如果真结束
                    
                .如果真结束
                
            .如果真结束
            
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 ReadReqSystemMsgNewFriend, 空白型, , 读取好友请求列表
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 BinList, 字节集, , , 
.局部变量 QQTarget, 长整数型, , , 
.局部变量 TextArr, 未知类型0x41010BE6, , "0", 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, Arr, 真)
.计次循环首 (取数组成员数 (Arr), i)
    .如果真 (等于 (Arr [i], , 101))
        赋值 (BinList, Arr [i], )
    .如果真结束
    
.计次循环尾 ()
清除数组 (Arr)
未知函数_67177447 (BinList, Arr, 真)
.计次循环首 (取数组成员数 (Arr), i)
    赋值 (BinList, Arr [i], )
.计次循环尾 ()

清除数组 (Arr)
未知函数_67177447 (BinList, Arr, 真)
.计次循环首 (取数组成员数 (Arr), i)
    赋值 (BinList, 相加 (未知函数_67177385 (“08”), Arr [i], ))
    未知函数_67177447 (BinList, TextArr, 真)
    未知函数_67177459 (TextArr, 1, QQTarget)
    清除数组 (TextArr)
     ' 添加日志 (“账号 [” ＋ 到文本 (qq.QQ) ＋ “] 收到来自QQ [” ＋ 到文本 (QQTarget) ＋ “] 的加好友请求!将自动通过该请求!”)
    QQ_自动通过好友请求 (到文本 (QQTarget))
.计次循环尾 ()
清除数组 (Arr)

.子程序 QQ_置当前微信号, 空白型, , 
.参数 微信号, 文本型, , 

赋值 (局_当前微信号, 删首尾空 (微信号))

.子程序 QQ_取图片是否上传完毕, 逻辑型, , 
返回 (局_图片是否上传完毕)

.子程序 QQ_取好友群发是否完毕, 逻辑型, , 
返回 (局_好友群发是否完毕)

.子程序 QQ_置好友群发状态, 空白型, , 
.参数 是否完毕, 逻辑型, , 

赋值 (局_好友群发是否完毕, 是否完毕)

.子程序 QQ_获取指定QQ空间说说列表, 空白型, , 
.局部变量 Url, 文本型, , , 
.局部变量 Return, 文本型, , , 
.局部变量 Cookie, 文本型, , , 
.局部变量 qzonetoken, 文本型, , , 
.局部变量 Http, 未知类型0x49010BC8, , , 

赋值 (Url, 相加 (“https://h5.qzone.qq.com/mqzone/profile?starttime=”, 未知函数_67177393 (), “&hostuin=1067877848”))

赋值 (Cookie, “p_uin=o1067877848; p_skey=Q7PE7OFXziRlfhwsFUVgqz9OkZaG*zYzZscqFIwWg3M_; uin=o1067877848; skey=MhkTzsENOB”)

Http.未知函数_67177419 (“GET”, Url)
Http.未知函数_67177418 (Cookie)
Http.未知函数_67177422 ()
赋值 (Return, Http.未知函数_67177423 ())

赋值 (qzonetoken, 未知函数_67177320 (Return, “window.g_qzonetoken = (function(){ try{return”, “;} catch(e)”))
赋值 (qzonetoken, 未知函数_67177320 (qzonetoken, #引号, #引号))
调试输出 (qzonetoken)

赋值 (Url, 相加 (“https://mobile.qzone.qq.com/list?qzonetoken=”, qzonetoken, “&g_tk=396533970&format=json&list_type=shuoshuo&action=0&res_uin=625999902&count=10”))

Http.未知函数_67177419 (“GET”, Url)
Http.未知函数_67177418 (Cookie)
Http.未知函数_67177422 ()
赋值 (Return, Http.未知函数_67177423 ())
调试输出 (Return)

.子程序 QQ_匹配通讯录手机号, 空白型, , 
.参数 手机号码, 文本型, , 

Fun_Send (Pack_UploadAddressBookV2 (手机号码))

.子程序 ReadFriendList, 空白型, , 
.参数 Revbin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 t_jce_key, 文本型, , , 
.局部变量 t_type, 整数型, , , 
.局部变量 t_arr, 文本型, , "0", 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 匿名局部变量_2654, 空白型, , , 
.局部变量 QQNumber, 长整数型, , , 
.局部变量 QQNick, 文本型, , , 
.局部变量 QQRemarks, 文本型, , , 
.局部变量 FriendNum, 整数型, , , 
.局部变量 FriendInfo, 未知类型0x41010B2C, , , 
.局部变量 GetFriendIndex, 整数型, , , 
.局部变量 GetFriendCount, 整数型, , , 
.局部变量 OnlineType, 文本型, , , 

Unpack.未知函数_67177296 (Revbin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
.如果真 (等于 (取字节集左边 (Bin, 2), 未知函数_67177385 (“78 DA”)))
    赋值 (Bin, 未知函数_67177462 (Bin))
.如果真结束

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177458 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

in.未知函数_67177453 (Bin)
in.未知函数_67177463 (0, t_jce)
.如果真 (大于或等于 (取数组成员数 (t_jce), 1))
    赋值 (t_jce_key, 未知函数_67177319 (t_jce [1].))
    .如果真 (等于 (t_jce_key, “FLRESP”))
        赋值 (Bin, 未知函数_67177385 (未知函数_67177319 (t_jce [1].)))
        
        in.未知函数_67177453 (Bin)
        in.未知函数_67177457 (0)
        in.未知函数_67177454 (0)
        in.未知函数_67177454 (1)
        in.未知函数_67177458 (2)
        赋值 (GetFriendIndex, in.未知函数_67177454 (3))
        赋值 (GetFriendCount, in.未知函数_67177454 (4))
        赋值 (FriendNum, in.未知函数_67177454 (5))
        in.未知函数_67177454 (6)
        赋值 (t_type, in.未知函数_67177464 ())
        
        .如果真 (等于 (t_type, 9))
            赋值 (t_count, in.未知函数_67177465 (0))
            .计次循环首 (t_count, i)
                in.未知函数_67177457 (0)
                赋值 (QQNumber, in.未知函数_67177458 (0))
                in.未知函数_67177454 (1)
                in.未知函数_67177454 (2)
                赋值 (QQRemarks, in.未知函数_67177455 (3))
                in.未知函数_67177454 (4)
                in.未知函数_67177454 (5)
                in.未知函数_67177454 (6)
                in.未知函数_67177454 (7)
                in.未知函数_67177454 (8)
                in.未知函数_67177454 (9)
                in.未知函数_67177454 (10)
                in.未知函数_67177454 (11)
                in.未知函数_67177455 (12)
                in.未知函数_67177454 (13)
                赋值 (QQNick, in.未知函数_67177455 (14))
                in.未知函数_67177454 (15)
                in.未知函数_67177456 (16)
                in.未知函数_67177456 (17)
                in.未知函数_67177454 (18)
                赋值 (t_type, in.未知函数_67177464 ())
                .如果真 (等于 (t_type, 10))
                    in.未知函数_67177466 (19, t_arr)
                    in.未知函数_67177467 ()
                .如果真结束
                in.未知函数_67177454 (20)
                in.未知函数_67177456 (21)
                in.未知函数_67177454 (22)
                in.未知函数_67177454 (23)
                in.未知函数_67177454 (24)
                in.未知函数_67177454 (25)
                in.未知函数_67177454 (26)
                赋值 (OnlineType, in.未知函数_67177455 (27))
                .如果真 (等于 (OnlineType, “”))
                    赋值 (OnlineType, “离线”)
                .如果真结束
                赋值 (FriendInfo., QQNumber)
                赋值 (FriendInfo., QQNick)
                赋值 (FriendInfo., QQRemarks)
                赋值 (FriendInfo., OnlineType)
                .如果真 (等于 (FriendInfo., “”))
                    赋值 (FriendInfo., “空昵称”)
                .如果真结束
                .如果真 (等于 (FriendInfo., “”))
                    赋值 (FriendInfo., “空备注”)
                .如果真结束
                .如果真 (等于 (FriendInfo., “”))
                    赋值 (FriendInfo., “离线”)
                .如果真结束
                .如果真 (不等于 (QQNumber, 到长整数 (“66600000”)))
                    加入成员 (FriendListS, FriendInfo)
                .如果真结束
                in.未知函数_67177467 ()
            .计次循环尾 ()
            .判断开始 (小于 (相加 (GetFriendIndex, GetFriendCount), FriendNum))
                Fun_Send (Pack_GetFriendListReq (相加 (GetFriendIndex, GetFriendCount), 20))
            .默认
                调用子程序 (好友列表回调指针, , , 类标识, 类获取好友自定义参数)
            .判断结束
            
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 ReadTroopList, 空白型, , 
.参数 Revbin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 t_type, 整数型, , , 
.局部变量 t_jce_key, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 GroupNum, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 GroupInfo, 未知类型0x41010B2D, , , 

Unpack.未知函数_67177296 (Revbin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
.如果真 (等于 (取字节集左边 (Bin, 2), 未知函数_67177385 (“78 DA”)))
    赋值 (Bin, 未知函数_67177462 (Bin))
.如果真结束

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177458 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

in.未知函数_67177453 (Bin)
in.未知函数_67177463 (0, t_jce)
.如果真 (大于或等于 (取数组成员数 (t_jce), 1))
    赋值 (t_jce_key, 未知函数_67177319 (t_jce [1].))
    .如果真 (等于 (t_jce_key, “GetTroopListRespV2”))
        赋值 (Bin, 未知函数_67177385 (未知函数_67177319 (t_jce [1].)))
    .如果真结束
    
.如果真结束
in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177458 (0)
赋值 (GroupNum, in.未知函数_67177454 (1))
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177456 (4)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 9))
    赋值 (t_count, in.未知函数_67177465 (0))
    .计次循环首 (t_count, i)
        in.未知函数_67177457 (0)
        赋值 (GroupInfo., in.未知函数_67177458 (0))
        赋值 (GroupInfo., in.未知函数_67177458 (1))
        in.未知函数_67177454 (2)
        in.未知函数_67177454 (3)
        赋值 (GroupInfo., in.未知函数_67177455 (4))
        in.未知函数_67177467 ()
        加入成员 (TroopListS, GroupInfo)
         ' 调试输出 (GroupInfo.GroupID, GroupInfo.GroupName)
    .计次循环尾 ()
    调用子程序 (Q群列表回调指针, , , 类标识, 类获取群自定义参数)
.如果真结束


.子程序 ReadTroopMemberList, 空白型, , 
.参数 Revbin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 t_type, 整数型, , , 
.局部变量 t_jce_key, 文本型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 MemberInfo, 未知类型0x41010B2E, , , 
.局部变量 i, 整数型, , , 
.局部变量 GroupID, 长整数型, , , 
.局部变量 GroupCode, 长整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 Type, 字节集, , , 
.局部变量 Member, 长整数型, , , 

Unpack.未知函数_67177296 (Revbin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

.如果真 (等于 (取字节集左边 (Bin, 2), 未知函数_67177385 (“78 DA”)))
    赋值 (Bin, 未知函数_67177462 (Bin))
.如果真结束
赋值 (位置, 相加 (寻找字节集 (Bin, 未知函数_67177385 (“47 54 4D 4C 52 45 53 50”), ), 7))

赋值 (Bin, 取字节集右边 (Bin, 相减 (取字节集长度 (Bin), 位置)))
Unpack.未知函数_67177296 (Bin)
赋值 (Type, Unpack.未知函数_67177299 (3))

.如果 (等于 (Type, 未知函数_67177385 (“1D 00 01”)))
    赋值 (Len, Unpack.未知函数_67177311 ())
    赋值 (Bin, Unpack.未知函数_67177299 (Len))
.否则
    赋值 (Len, Unpack.未知函数_67177298 ())
    赋值 (Bin, Unpack.未知函数_67177299 (Len))
.如果结束

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177458 (0)
赋值 (GroupID, in.未知函数_67177458 (1))
赋值 (GroupCode, in.未知函数_67177458 (2))
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 9))
    赋值 (t_count, in.未知函数_67177465 (0))
    .计次循环首 (t_count, i)
        in.未知函数_67177457 (0)
        赋值 (MemberInfo., in.未知函数_67177458 (0))
        in.未知函数_67177454 (1)
        赋值 (MemberInfo., in.未知函数_67177454 (2))
        赋值 (MemberInfo., in.未知函数_67177454 (3))
        赋值 (MemberInfo., in.未知函数_67177455 (4))
        in.未知函数_67177467 ()
        加入成员 (TroopMemberListS, MemberInfo)
    .计次循环尾 ()
    赋值 (Member, in.未知函数_67177458 (4))
    .如果 (大于 (Member, 0))
        Fun_Send (Pack_Friendlist_getTroopMemberList (GroupID, GroupCode, Member))
    .否则
        调用子程序 (QQ群成员列表回调指针, , , 类标识)
    .如果结束
    
.如果真结束


.子程序 ReadgetUserAddFriendSetting, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 t_jce_key, 文本型, , , 
.局部变量 t_type, 整数型, , , 
.局部变量 TargetQQ, 长整数型, , , 
.局部变量 AddType, 整数型, , , 0 = 允许任何人  1 = 需要验证信息   3 = 需要正确回答问题  4 = 需要回答问题并由我确认
.局部变量 Type, 整数型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 AddQuestion1, 文本型, , , 
.局部变量 AddQuestion2, 文本型, , , 
.局部变量 AddQuestion3, 文本型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177458 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

in.未知函数_67177453 (Bin)
in.未知函数_67177463 (0, t_jce)
.如果真 (大于或等于 (取数组成员数 (t_jce), 1))
    赋值 (t_jce_key, 未知函数_67177319 (t_jce [1].))
    .如果真 (等于 (t_jce_key, “FSRESP”))
        赋值 (Bin, 未知函数_67177385 (未知函数_67177319 (t_jce [1].)))
        in.未知函数_67177453 (Bin)
        in.未知函数_67177457 (0)
        in.未知函数_67177458 (0)
        赋值 (TargetQQ, in.未知函数_67177458 (1))
        赋值 (AddType, in.未知函数_67177454 (2))
        赋值 (Type, in.未知函数_67177464 ())
        .如果真 (或者 (等于 (AddType, 3), 等于 (AddType, 4)))
            .如果真 (等于 (Type, 9))
                赋值 (t_count, in.未知函数_67177465 (0))
                .计次循环首 (t_count, i)
                    .如果真 (等于 (i, 1))
                        赋值 (AddQuestion1, in.未知函数_67177455 (0))
                    .如果真结束
                    .如果真 (等于 (i, 2))
                        赋值 (AddQuestion2, in.未知函数_67177455 (0))
                    .如果真结束
                    .如果真 (等于 (i, 3))
                        赋值 (AddQuestion3, in.未知函数_67177455 (0))
                    .如果真结束
                    
                .计次循环尾 ()
                
            .如果真结束
            
        .如果真结束
        调用子程序 (获取加好友设置回调指针, , , TargetQQ, AddType, AddQuestion1, AddQuestion2, AddQuestion3)
    .如果真结束
    
.如果真结束



.子程序 ReadSummaryCard_ReqCondSearch, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 t_jce_key, 文本型, , , 
.局部变量 t_type, 整数型, , , 
.局部变量 位置, 整数型, , , 
.局部变量 t_count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 IsGetEnd, 整数型, , , 
.局部变量 PageNum, 整数型, , , 
.局部变量 Info, 未知类型0x41010B31, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177458 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

赋值 (位置, 相加 (寻找字节集 (Bin, 未知函数_67177385 (“53 75 6D 6D 61 72 79 43 61 72 64 2E 52 65 73 70 43 6F 6E 64 53 65 61 72 63 68”), ), 28))
赋值 (Bin, 取字节集右边 (Bin, 相减 (取字节集长度 (Bin), 位置)))
Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177454 (0)
赋值 (PageNum, in.未知函数_67177454 (1))
赋值 (IsGetEnd, in.未知函数_67177454 (2))
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 9))
    赋值 (t_count, in.未知函数_67177465 (0))
    .计次循环首 (t_count, i)
        in.未知函数_67177457 (0)
        赋值 (Info., in.未知函数_67177458 (0))
        赋值 (Info., in.未知函数_67177455 (1))
        in.未知函数_67177456 (2)
        赋值 (Info., in.未知函数_67177454 (3))
        赋值 (Info., in.未知函数_67177454 (4))
        in.未知函数_67177467 ()
        加入成员 (RespCondSearchInfoS, Info)
         ' 调试输出 (Info.QQNick)
    .计次循环尾 ()
    .如果 (等于 (IsGetEnd, 1))
        Fun_Send (Pack_SummaryCard_ReqCondSearch (相加 (PageNum, 1), RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., RespCondSearchdata.))
    .否则
        调用子程序 (按条件查找陌生人回调指针, , , RespCondSearchdata., RespCondSearchdata., RespCondSearchdata., 类标识)
    .如果结束
    
.如果真结束


.子程序 ReadTest, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Bin, 字节集, , , 
.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 FeedsId, 长整数型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
未知函数_67177447 (Bin, t_arr, 真)
赋值 (Bin, {  })
.计次循环首 (取数组成员数 (t_arr), i)
    .如果真 (并且 (等于 (t_arr [i], , 4), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (取字节集长度 (Bin), 0))
    未知函数_67177447 (Bin, t_arr, 真)
    赋值 (Bin, {  })
    未知函数_67177459 (t_arr, 3, FeedsId)
    调试输出 (“FeedsId：”, FeedsId)
    赋值 (局_FeedsId, 到文本 (FeedsId))
.如果真结束


.子程序 Test_取回FeedsId, 文本型, , 
返回 (局_FeedsId)

.子程序 ReadFeedComment, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Len, 整数型, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 Err, 文本型, , , 
.局部变量 i, 整数型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
调试输出 (未知函数_67177306 (Bin))
.如果 (小于 (取字节集长度 (Bin), 15))
    赋值 (局_评论结果, 真)
.否则
    赋值 (局_评论结果, 假)
    未知函数_67177447 (Bin, t_arr, 真)
    .如果真 (大于或等于 (取数组成员数 (t_arr), 1))
        赋值 (Bin, t_arr [1].)
        调试输出 (未知函数_67177306 (Bin))
        未知函数_67177447 (Bin, t_arr, 真)
        .计次循环首 (取数组成员数 (t_arr), i)
            .如果真 (等于 (t_arr [i], , 2))
                赋值 (Bin, t_arr [i], )
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        赋值 (Err, 未知函数_67177319 (Bin))
        调试输出 (Err)
        赋值 (局_评论失败原因, Err)
    .如果真结束
    
.如果结束



.子程序 ReadMQUpdateSvcFollowUser, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 Js, 未知类型0x49010BC9, , , 
.局部变量 jstext, 文本型, , , 
.局部变量 retcode, 文本型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
    .如果真 (等于 (t_arr [i], , 4))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
赋值 (jstext, 未知函数_67177319 (Bin))
调试输出 (jstext)
Js.未知函数_67177424 (jstext)
赋值 (retcode, Js.未知函数_67177485 (“retcode”))
.如果 (等于 (retcode, “0”))
    赋值 (局_关注结果, 真)
.否则
    赋值 (局_关注结果, 假)
.如果结束


.子程序 ReadaccountRequestBindMobileV2, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 SmsBin, 字节集, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177454 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))
赋值 (Len, 相加 (寻找字节集 (Bin, 未知函数_67177385 (“52 65 73 70 6F 6E 65 42 69 6E 64 4D 6F 62 69 6C 65 56 32”), ), 20))

赋值 (Bin, 取字节集右边 (Bin, 相减 (取字节集长度 (Bin), Len)))

Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
赋值 (SmsBin, in.未知函数_67177456 (0))
赋值 (局_SmsBin, 未知函数_67177319 (SmsBin))
调试输出 (局_SmsBin)

.子程序 ReadMQUpdateSvc_com_qq_nearbySetFaceScore, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())

赋值 (Bin, Unpack.未知函数_67177299 (Len))
未知函数_67177447 (Bin, t_arr)
.计次循环首 (取数组成员数 (t_arr), i)
    .如果真 (等于 (t_arr [i], , 4))
        赋值 (Bin, t_arr [i], )
        调试输出 (未知函数_67177319 (Bin))
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


.子程序 ReadOidbSvc_Ox8dd, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

.如果真 (等于 (取字节集左边 (Bin, 2), 未知函数_67177385 (“78 DA”)))
    赋值 (Bin, 未知函数_67177462 (Bin))
.如果真结束
置剪辑板文本 (未知函数_67177306 (Bin))

.子程序 ReadSummaryCardReqSummaryCard, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 QQNumber, 长整数型, , , 
.局部变量 Gender, 整数型, , , 
.局部变量 Nick, 文本型, , , 
.局部变量 Age, 整数型, , , 
.局部变量 t_type, 整数型, , , 
.局部变量 t_arr, 文本型, , "0", 
.局部变量 t_str, 文本型, , , 
.局部变量 t_jce, 未知类型0x41010BF5, , "0", 
.局部变量 ChatSig, 字节集, , , 
.局部变量 匿名局部变量_2774, 空白型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
.如果真 (等于 (取字节集左边 (Bin, 2), 未知函数_67177385 (“78 DA”)))
    赋值 (Bin, 未知函数_67177462 (Bin))
.如果真结束

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177458 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))
赋值 (Bin, 取字节集右边 (Bin, 相减 (取字节集长度 (Bin), 120)))
Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177454 (0)
赋值 (Gender, in.未知函数_67177454 (1)) ' 1= 女  2 = 男
赋值 (Age, in.未知函数_67177454 (2))
赋值 (Nick, in.未知函数_67177455 (3))
in.未知函数_67177455 (4)
in.未知函数_67177454 (5)
in.未知函数_67177455 (6)
in.未知函数_67177455 (7)
in.未知函数_67177455 (8)
in.未知函数_67177455 (9)
in.未知函数_67177455 (10)
in.未知函数_67177455 (11)
in.未知函数_67177455 (12)
in.未知函数_67177454 (13)
in.未知函数_67177455 (14)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177467 ()
.如果真结束
in.未知函数_67177454 (16)
in.未知函数_67177454 (17)
in.未知函数_67177454 (18)
in.未知函数_67177455 (19)
in.未知函数_67177455 (20)
in.未知函数_67177455 (21)
in.未知函数_67177454 (22)
赋值 (QQNumber, in.未知函数_67177458 (23))
赋值 (局_查询Tinyid结果, 到文本 (QQNumber))
调试输出 (局_查询Tinyid结果)
in.未知函数_67177454 (24)
in.未知函数_67177454 (25)
in.未知函数_67177466 (26, t_arr)
in.未知函数_67177456 (27)
in.未知函数_67177455 (28)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177463 (29, t_jce)
.如果真结束
in.未知函数_67177467 ()
in.未知函数_67177455 (30)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177454 (0)
    in.未知函数_67177454 (1)
    in.未知函数_67177454 (2)
    in.未知函数_67177454 (3)
.如果真结束
in.未知函数_67177467 ()
in.未知函数_67177456 (32)
in.未知函数_67177458 (33)
in.未知函数_67177456 (34)
in.未知函数_67177454 (35)
in.未知函数_67177454 (36)
赋值 (t_str, in.未知函数_67177455 (37))
in.未知函数_67177454 (38)
in.未知函数_67177454 (39)
in.未知函数_67177454 (40)
in.未知函数_67177456 (41)
 ' ----------------------------
in.未知函数_67177455 (42)
in.未知函数_67177455 (43)
赋值 (t_type, in.未知函数_67177465 (0))
.如果真 (等于 (t_type, 12))
    in.未知函数_67177463 (44, t_jce)
.如果真结束
in.未知函数_67177467 ()
in.未知函数_67177454 (45)
in.未知函数_67177466 (46, t_arr)
in.未知函数_67177455 (47)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177456 (0)
    in.未知函数_67177454 (1)
    in.未知函数_67177454 (2)
    in.未知函数_67177455 (3)
    in.未知函数_67177455 (4) ' ......
.如果真结束
in.未知函数_67177467 ()
in.未知函数_67177458 (49)
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177454 (0) ' ......
.如果真结束
in.未知函数_67177467 ()
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177454 (0) ' ......
.如果真结束
in.未知函数_67177467 ()
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177454 (0) ' ......
.如果真结束
in.未知函数_67177467 ()
赋值 (t_type, in.未知函数_67177464 ())
.如果真 (等于 (t_type, 10))
    in.未知函数_67177454 (0) ' ......
.如果真结束
in.未知函数_67177467 ()
赋值 (ChatSig, in.未知函数_67177456 (54))
调试输出 (未知函数_67177306 (ChatSig))

.子程序 ReadLongConn_OffPicUp, 空白型, , 
.参数 BodyBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 PicSig, 字节集, , , 
.局部变量 PicId, 字节集, , , 
.局部变量 PicTcp, 未知类型0x50002, , , 
.局部变量 Suc, 逻辑型, , , 


Unpack.未知函数_67177296 (BodyBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
    .如果真 (并且 (等于 (arr [i], , 2), 等于 (arr [i], , 2)))
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
    .如果真 (并且 (等于 (arr [i], , 9), 等于 (arr [i], , 2)))
        赋值 (PicSig, arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (arr [i], , 10), 等于 (arr [i], , 2)))
        赋值 (PicId, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
调试输出 (“好友图片请求返回结果：”, 未知函数_67177306 (PicSig), 未知函数_67177319 (PicId))
.如果 (小于 (取字节集长度 (PicSig), 128)) ' 小于则无需重复上传
    Fun_Send (Pack_MessageSvc_PbSendMsg_FeiendPic (局_好友消息_图片_目标, 局_上传图片, PicId))
    赋值 (局_图片是否上传完毕, 真)
.否则
    .如果 (取反 (PicTcp.未知支持库函数_8 (“183.3.225.58”, 8080)))
        调试输出 (“连接上传图片服务器失败。”)
    .否则
        .如果 (PicTcp.未知支持库函数_11 (Pack_PicUp_DataUp_Friend (局_上传图片, PicSig), 3000))
            赋值 (Bin, PicTcp.未知支持库函数_10 (3000, Suc))
            .如果 (Suc)
                调试输出 (“上传图片返回：”, 未知函数_67177306 (Bin))
                PicTcp.未知支持库函数_9 ()
                Fun_Send (Pack_MessageSvc_PbSendMsg_FeiendPic (局_好友消息_图片_目标, 局_上传图片, PicId))
                赋值 (局_图片是否上传完毕, 真)
            .否则
                调试输出 (“上传图片未接收到返回包”)
            .如果结束
            
        .否则
            调试输出 (“发送图片上传包失败”)
        .如果结束
        
    .如果结束
    
.如果结束


.子程序 ReadLongConn_OffPicUp_GroupMember, 空白型, , 
.参数 BodyBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 PicSig, 字节集, , , 
.局部变量 PicId, 字节集, , , 
.局部变量 PicTcp, 未知类型0x50002, , , 
.局部变量 Suc, 逻辑型, , , 


Unpack.未知函数_67177296 (BodyBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
    .如果真 (并且 (等于 (arr [i], , 2), 等于 (arr [i], , 2)))
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
    .如果真 (并且 (等于 (arr [i], , 9), 等于 (arr [i], , 2)))
        赋值 (PicSig, arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (arr [i], , 10), 等于 (arr [i], , 2)))
        赋值 (PicId, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
调试输出 (“好友图片请求返回结果：”, 未知函数_67177306 (PicSig), 未知函数_67177319 (PicId))
.如果 (小于 (取字节集长度 (PicSig), 128)) ' 小于则无需重复上传
    Fun_Send (Pack_MessageSvc_PbSendMsg_GroupMember (局_群成员消息_图片_目标群Code, 局_群成员消息_图片_目标QQ, 局_上传图片, PicId))
    赋值 (局_图片是否上传完毕, 真)
.否则
    .如果 (取反 (PicTcp.未知支持库函数_8 (“183.3.225.58”, 8080)))
        调试输出 (“连接上传图片服务器失败。”)
    .否则
        .如果 (PicTcp.未知支持库函数_11 (Pack_PicUp_DataUp_Friend (局_上传图片, PicSig), 3000))
            赋值 (Bin, PicTcp.未知支持库函数_10 (3000, Suc))
            .如果 (Suc)
                调试输出 (“上传图片返回：”, 未知函数_67177306 (Bin))
                PicTcp.未知支持库函数_9 ()
                Fun_Send (Pack_MessageSvc_PbSendMsg_GroupMember (局_群成员消息_图片_目标群Code, 局_群成员消息_图片_目标QQ, 局_上传图片, PicId))
                赋值 (局_图片是否上传完毕, 真)
            .否则
                调试输出 (“上传图片未接收到返回包”)
            .如果结束
            
        .否则
            调试输出 (“发送图片上传包失败”)
        .如果结束
        
    .如果结束
    
.如果结束


.子程序 ReadOfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_UPLOAD_V3_1700, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 FileID, 文本型, , , 

Unpack.未知函数_67177296 (RevBin)
调试输出 (未知函数_67177306 (RevBin))
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 19), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)
未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 90), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)
赋值 (FileID, 未知函数_67177319 (Bin))
调试输出 (“FileID：”, FileID)
Fun_Send (Pack_OfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_DOWNLOAD_1200 (FileID))

.子程序 ReadOfflineFilleHandleSvr_pb_ftn_CMD_REQ_APPLY_DOWNLOAD_1200, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 Bin2, 字节集, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 IP, 字节集, , , 
.局部变量 IP数组, 字节集, , "0", 
.局部变量 返回IP, 文本型, , , 
.局部变量 UrlUtf8, 字节集, , , 
.局部变量 URL, 文本型, , , 
.局部变量 域名, 文本型, , , 
.局部变量 未命名参, 文本型, , , 
.局部变量 FileID, 文本型, , , 
.局部变量 FileName, 文本型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 14), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)
未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 30), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 40), 等于 (t_arr [i], , 2)))
        赋值 (Bin2, t_arr [i], )
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)
未知函数_67177447 (Bin, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
    .如果真 (并且 (等于 (t_arr [i], , 20), 等于 (t_arr [i], , 2)))
        赋值 (IP, t_arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 50), 等于 (t_arr [i], , 2)))
        赋值 (UrlUtf8, t_arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 60), 等于 (t_arr [i], , 2)))
        加入成员 (IP数组, t_arr [i], )
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 90), 等于 (t_arr [i], , 2)))
        赋值 (域名, 未知函数_67177319 (t_arr [i], ))
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 70), 等于 (t_arr [i], , 2)))
        赋值 (未命名参, 未知函数_67177319 (t_arr [i], ))
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)
赋值 (URL, 相加 (未知函数_67177319 (IP), 未知函数_67177319 (UrlUtf8)))
 ' 调试输出 (URL)
.计次循环首 (取数组成员数 (IP数组), i)
    赋值 (返回IP, 相加 (返回IP, “|”, 未知函数_67177319 (IP数组 [i])))
.计次循环尾 ()
未知函数_67177447 (Bin2, t_arr, 真)
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 6), 等于 (t_arr [i], , 2)))
        赋值 (FileID, 未知函数_67177319 (t_arr [i], ))
    .如果真结束
    .如果真 (并且 (等于 (t_arr [i], , 7), 等于 (t_arr [i], , 2)))
        赋值 (FileName, 未知函数_67177319 (t_arr [i], ))
    .如果真结束
    
.计次循环尾 ()
清除数组 (t_arr)

调用子程序 (离线文件指针, , , URL, 返回IP, 未命名参, 域名, FileID, FileName, 类标识)

.子程序 Read_ImgStore_GroupPicUp, 空白型, , 
.参数 RevBin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 Bin, 字节集, , , 
.局部变量 位置, 长整数型, , , 
.局部变量 arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 空白型, , , 
.局部变量 PicSig, 字节集, , , 
.局部变量 PicId, 字节集, , , 
.局部变量 PicTcp, 未知类型0x50002, , , 
.局部变量 Suc, 逻辑型, , , 
.局部变量 匿名局部变量_2829, 空白型, , , 

Unpack.未知函数_67177296 (RevBin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, arr)
.如果真 (大于或等于 (取数组成员数 (arr), 2))
    赋值 (Bin, arr [3].)
    清除数组 (arr)
.如果真结束
未知函数_67177447 (Bin, arr)

.计次循环首 (取数组成员数 (arr), i)
    .如果真 (等于 (arr [i], , 8))
        赋值 (PicSig, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

调试输出 (“QQ群图片请求返回结果：”, 未知函数_67177306 (PicSig))
.如果 (小于 (取字节集长度 (PicSig), 128)) ' 小于则无需重复上传
    Fun_Send (Pack_MessageSvc_PbSendMsg_GroupPic (局_QQ群消息_图片_目标, 局_上传图片))
    赋值 (局_图片是否上传完毕, 真)
.否则
    .如果 (取反 (PicTcp.未知支持库函数_8 (“183.3.225.58”, 8080)))
        调试输出 (“连接上传图片服务器失败。”)
    .否则
        .如果 (PicTcp.未知支持库函数_11 (Pack_PicUp_DataUp_Group (局_上传图片, PicSig), 3000))
            赋值 (Bin, PicTcp.未知支持库函数_10 (3000, Suc))
            .如果 (Suc)
                调试输出 (“上传图片返回：”, 未知函数_67177306 (Bin))
                PicTcp.未知支持库函数_9 ()
                Fun_Send (Pack_MessageSvc_PbSendMsg_GroupPic (局_QQ群消息_图片_目标, 局_上传图片))
                赋值 (局_图片是否上传完毕, 真)
            .否则
                调试输出 (“上传图片未接收到返回包”)
            .如果结束
            
        .否则
            调试输出 (“发送图片上传包失败”)
        .如果结束
        
    .如果结束
    
.如果结束


.子程序 Readaccount_RequestUploadAddressBookV2, 空白型, , 
.参数 Bin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 Count, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 PhoneNumber, 文本型, , , 
.局部变量 arr, 文本型, , "0", 
.局部变量 Nick, 文本型, , , 

Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177454 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

Unpack.未知函数_67177296 (Bin)
Unpack.未知函数_67177299 (4)
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (2)
赋值 (Len, Unpack.未知函数_67177311 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177312 ()
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (3)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177458 (0)
in.未知函数_67177456 (1)
in.未知函数_67177466 (2, arr)
in.未知函数_67177464 ()
赋值 (Count, in.未知函数_67177465 (0))
in.未知函数_67177457 (0)
in.未知函数_67177457 (0)
in.未知函数_67177454 (1)
赋值 (Nick, in.未知函数_67177455 (2))
调试输出 (Nick)

.子程序 ReadSummaryCard_ReqSearch, 空白型, , 
.参数 Bin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 in, 未知类型0x49010BEC, , , 
.局部变量 arr, 文本型, , "0", 
.局部变量 Count, 整数型, , , 
.局部变量 BinLen, 整数型, , , 
.局部变量 t_arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 SummaryCard, 未知类型0x41010B32, , , 

Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177454 (1)
in.未知函数_67177454 (2)
in.未知函数_67177454 (3)
in.未知函数_67177454 (4)
in.未知函数_67177455 (5)
in.未知函数_67177455 (6)
赋值 (Bin, in.未知函数_67177456 (7))

Unpack.未知函数_67177296 (Bin)
Unpack.未知函数_67177299 (4)
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (4)
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (2)
赋值 (Len, Unpack.未知函数_67177311 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177312 ()
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (4)
赋值 (Len, Unpack.未知函数_67177312 ())
Unpack.未知函数_67177299 (Len)
Unpack.未知函数_67177299 (2)
赋值 (Len, Unpack.未知函数_67177311 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

in.未知函数_67177453 (Bin)
in.未知函数_67177457 (0)
in.未知函数_67177466 (0, arr)
in.未知函数_67177456 (1)
in.未知函数_67177464 ()
赋值 (Count, in.未知函数_67177465 (0))
.计次循环首 (Count, )
    赋值 (Bin, in.未知函数_67177456 (0))
    in.未知函数_67177454 (1)
    in.未知函数_67177467 ()
.计次循环尾 ()
Unpack.未知函数_67177296 (Bin)
Unpack.未知函数_67177312 ()
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (BinLen, Unpack.未知函数_67177298 ())
Unpack.未知函数_67177299 (Len)
赋值 (Bin, Unpack.未知函数_67177299 (BinLen))
未知函数_67177447 (Bin, t_arr, 真)
赋值 (Bin, {  })
.计次循环首 (取数组成员数 (t_arr), i)
     ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
    .如果真 (并且 (等于 (t_arr [i], , 5), 等于 (t_arr [i], , 2)))
        赋值 (Bin, t_arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果 (等于 (Bin, {  }))
    赋值 (局_手机查询结果逻辑, 假)
.否则
    赋值 (局_手机查询结果逻辑, 真)
    未知函数_67177447 (Bin, t_arr, 真)
    .计次循环首 (取数组成员数 (t_arr), i)
         ' 调试输出 (t_arr [i].id, t_arr [i].type, Bin2HexTo (t_arr [i].value))
        .如果真 (并且 (等于 (t_arr [i], , 4), 等于 (t_arr [i], , 2)))
            赋值 (SummaryCard., 未知函数_67177319 (t_arr [i], ))
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 5), 等于 (t_arr [i], , 0)))
            赋值 (SummaryCard., 未知函数_67177486 (删全部空 (未知函数_67177306 (t_arr [i], ))))
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 6), 等于 (t_arr [i], , 0)))
            赋值 (SummaryCard., 未知函数_67177486 (删全部空 (未知函数_67177306 (t_arr [i], ))))
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 19), 等于 (t_arr [i], , 2)))
            赋值 (SummaryCard., 未知函数_67177319 (t_arr [i], ))
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 20), 等于 (t_arr [i], , 2)))
            赋值 (SummaryCard., 未知函数_67177319 (t_arr [i], ))
        .如果真结束
        .如果真 (并且 (等于 (t_arr [i], , 21), 等于 (t_arr [i], , 2)))
            赋值 (SummaryCard., 未知函数_67177319 (t_arr [i], ))
        .如果真结束
        
    .计次循环尾 ()
    赋值 (局_手机查询结果数据, SummaryCard)
     ' 调试输出 (局_手机查询结果数据.Nick, 局_手机查询结果数据.Age, 局_手机查询结果数据.Gender, 局_手机查询结果数据.Country, 局_手机查询结果数据.Province, 局_手机查询结果数据.City)
.如果结束


.子程序 ReadProfileService_Pb_ReqSystemMsgNew_Group, 空白型, , 
.参数 Bin, 字节集, , 

.局部变量 Unpack, 未知类型0x49010B4F, , , 
.局部变量 Len, 整数型, , , 
.局部变量 arr, 未知类型0x41010BE6, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 Time, 长整数型, , , 
.局部变量 GroupID, 长整数型, , , 

Unpack.未知函数_67177296 (Bin)
赋值 (Len, Unpack.未知函数_67177298 ())
赋值 (Bin, Unpack.未知函数_67177299 (Len))

未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
     ' 调试输出 (arr [i].id, arr [i].type, Bin2HexTo (arr [i].value))
    .如果真 (并且 (等于 (arr [i], , 10), 等于 (arr [i], , 2)))
        未知函数_67177459 (arr, 3, Time)
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
     ' 调试输出 (arr [i].id, arr [i].type, Bin2HexTo (arr [i].value))
    .如果真 (并且 (等于 (arr [i], , 50), 等于 (arr [i], , 2)))
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
     ' 调试输出 (arr [i].id, arr [i].type, Bin2HexTo (arr [i].value))
    .如果真 (并且 (等于 (arr [i], , 9), 等于 (arr [i], , 2)))
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
.计次循环首 (取数组成员数 (arr), i)
     ' 调试输出 (arr [i].id, arr [i].type, Bin2HexTo (arr [i].value))
    .如果真 (并且 (等于 (arr [i], , 4), 等于 (arr [i], , 2)))
        赋值 (Bin, arr [i], )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
清除数组 (arr)
未知函数_67177447 (Bin, arr, 真)
未知函数_67177459 (arr, 2, GroupID)
调试输出 (Time, GroupID)
QQ_自动通过Q群邀请 (Time, GroupID)

.类模块 Tlv_, , , 

.程序集变量 QQTEA, 未知类型0x49010C71, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 tlv_pack, 字节集, , 
.参数 cmd, 文本型, , 
.参数 bin, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (cmd)
pack.未知函数_67177589 (取字节集长度 (bin))
pack.未知函数_67177590 (bin)
返回 (pack.未知函数_67177591 ())

.子程序 tlv002, 字节集, , 验证码
.参数 Code, 文本型, , 
.参数 CodeToken, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00”)
pack.未知函数_67177589 (取文本长度 (Code))
pack.未知函数_67177592 (Code)
pack.未知函数_67177589 (取字节集长度 (CodeToken))
pack.未知函数_67177590 (CodeToken)
返回 (tlv_pack (“00 02”, pack.未知函数_67177591 ()))

.子程序 tlv104, 字节集, , 验证码
.参数 CodeToken1, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (CodeToken1)
返回 (tlv_pack (“01 04”, pack.未知函数_67177591 ()))

.子程序 tlv018, 字节集, , 
.参数 User, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 01 00 00 06 00 00 00 00 10 00 00 00 00”)
pack.未知函数_67177590 (User)
pack.未知函数_67177588 (“00 00 00 00”)
返回 (tlv_pack (“00 18”, pack.未知函数_67177591 ()))

.子程序 tlv001, 字节集, , 
.参数 User, 字节集, , 
.参数 Time, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 01”)
pack.未知函数_67177590 (未知函数_67177593 (4)) ' 34 2D 94 D1
pack.未知函数_67177590 (User)
pack.未知函数_67177590 (Time)
pack.未知函数_67177588 (“00 00 00 00 00 00”)
返回 (tlv_pack (“00 01”, pack.未知函数_67177591 ()))

.子程序 tlv106, 字节集, , 
.参数 User, 字节集, , 
.参数 Md5pass, 字节集, , 
.参数 Md52pass, 字节集, , 
.参数 _TGTKey, 字节集, , 
.参数 Guid_, 字节集, , 
.参数 Time, 字节集, , 
.参数 AppId, 整数型, , 
.参数 Caption, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177588 (“00 04”)
pack.未知函数_67177590 (未知函数_67177593 (4))
pack.未知函数_67177588 (“00 00 00 05 00 00 00 10 00 00 00 00 00 00 00 00”)
pack.未知函数_67177590 (User)
pack.未知函数_67177590 (Time)
pack.未知函数_67177588 (“00 00 00 00 01”)
pack.未知函数_67177590 (Md5pass)
pack.未知函数_67177590 (_TGTKey)
pack.未知函数_67177588 (“00 00 00 00 01”)
pack.未知函数_67177590 (Guid_)
pack.未知函数_67177594 (AppId)
pack.未知函数_67177588 (“00 00 00 01”)
pack.未知函数_67177589 (取字节集长度 (Caption))
pack.未知函数_67177590 (Caption)
pack.未知函数_67177588 (“00 00”)
返回 (tlv_pack (“01 06”, QQTEA.未知函数_67177595 (pack.未知函数_67177591 (), Md52pass)))

.子程序 tlv116, 字节集, , 验证码共用
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 F7 FF 7C 00 01 04 00 01 5F 5E 10 E2”)
返回 (tlv_pack (“01 16”, pack.未知函数_67177591 ()))

.子程序 tlv107, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 00 00 01”)
返回 (tlv_pack (“01 07”, pack.未知函数_67177591 ()))

.子程序 tlv100, 字节集, , 
.参数 Appid, 整数型, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 01 00 00 00 05 00 00 00 10”)
pack.未知函数_67177594 (Appid)
pack.未知函数_67177588 (“00 00 00 00 02 1E 10 E0”)
返回 (tlv_pack (“01 00”, pack.未知函数_67177591 ()))

.子程序 tlv142, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 14”)
pack.未知函数_67177588 (“63 6F 6D 2E 74 65 6E 63 65 6E 74 2E 6D 6F 62 69 6C 65 71 71”) ' com.tencent.mobileqq
返回 (tlv_pack (“01 42”, pack.未知函数_67177591 ()))

.子程序 tlv144, 字节集, , 
.参数 TGTKey, 字节集, , 
.参数 tlv109, 字节集, , 
.参数 tlv124, 字节集, , 
.参数 tlv128, 字节集, , 
.参数 tlv16E, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177589 (4)
pack.未知函数_67177590 (tlv109)
pack.未知函数_67177590 (tlv124)
pack.未知函数_67177590 (tlv128)
pack.未知函数_67177590 (tlv16E)
返回 (tlv_pack (“01 44”, QQTEA.未知函数_67177595 (pack.未知函数_67177591 (), TGTKey)))

.子程序 tlv109, 字节集, , 
.参数 IMEI, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (IMEI)
返回 (tlv_pack (“01 09”, pack.未知函数_67177591 ()))

.子程序 tlv124, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 07”)
pack.未知函数_67177588 (“61 6E 64 72 6F 69 64”) ' android
pack.未知函数_67177588 (“00 05”)
pack.未知函数_67177588 (“35 2E 31 2E 31”) ' 5.1.1
pack.未知函数_67177588 (“00 02”)
pack.未知函数_67177588 (“00 10”)
pack.未知函数_67177588 (“43 68 69 6E 61 20 4D 6F 62 69 6C 65 20 47 53 4D”) ' China Mobile GSM
pack.未知函数_67177588 (“00 00 00 04”)
pack.未知函数_67177588 (“77 69 66 69”) ' wifi
返回 (tlv_pack (“01 24”, pack.未知函数_67177591 ()))

.子程序 tlv128, 字节集, , 
.参数 GUID, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 01 01 00 11 00 00 00”)
pack.未知函数_67177588 (“00 08”)
pack.未知函数_67177588 (“76 69 76 6F 20 58 32 30”) ' vivo X20
pack.未知函数_67177588 (“00 10”)
pack.未知函数_67177590 (GUID)
pack.未知函数_67177588 (“00 05”)
pack.未知函数_67177588 (“76 69 76 6F 20”) ' vivo
返回 (tlv_pack (“01 28”, pack.未知函数_67177591 ()))

.子程序 tlv16E, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“76 69 76 6F 20 58 32 30”) ' vivo X20
返回 (tlv_pack (“01 6E”, pack.未知函数_67177591 ()))

.子程序 tlv145, 字节集, , 
.参数 Guid, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (Guid)
返回 (tlv_pack (“01 45”, pack.未知函数_67177591 ()))

.子程序 tlv147, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 10”)
pack.未知函数_67177588 (“00 05”)
pack.未知函数_67177588 (“37 2E 39 2E 30”) ' 7.9.0
pack.未知函数_67177588 (“00 10”)
pack.未知函数_67177588 (“A6 B7 45 BF 24 A2 C2 77 52 77 16 F6 F3 6E B6 8D”) ' APPSIG
返回 (tlv_pack (“01 47”, pack.未知函数_67177591 ()))

.子程序 tlv154, 字节集, , 
.参数 SsoSeq, 字节集, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (SsoSeq)
返回 (tlv_pack (“01 54”, pack.未知函数_67177591 ()))

.子程序 tlv141, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 01”)
pack.未知函数_67177588 (“00 10”)
pack.未知函数_67177588 (“43 68 69 6E 61 20 4D 6F 62 69 6C 65 20 47 53 4D”) ' China Mobile GSM
pack.未知函数_67177588 (“00 02”)
pack.未知函数_67177588 (“00 04”)
pack.未知函数_67177588 (“77 69 66 69”) ' wifi
返回 (tlv_pack (“01 41”, pack.未知函数_67177591 ()))

.子程序 tlv008, 字节集, , 验证码共用
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 00 08 04 00 00”)
返回 (tlv_pack (“00 08”, pack.未知函数_67177591 ()))

.子程序 tlv511, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 0D 01 00 0A 74 65 6E 70 61 79 2E 63 6F 6D 01 00 11 6F 70 65 6E 6D 6F 62 69 6C 65 2E 71 71 2E 63 6F 6D 01 00 0A 71 75 6E 2E 71 71 2E 63 6F 6D 01 00 0B 67 61 6D 65 2E 71 71 2E 63 6F 6D 01 00 0B 64 6F 63 73 2E 71 71 2E 63 6F 6D 01 00 0C 71 71 77 65 62 2E 71 71 2E 63 6F 6D 01 00 09 74 69 2E 71 71 2E 63 6F 6D 01 00 0D 6F 66 66 69 63 65 2E 71 71 2E 63 6F 6D 01 00 0E 63 6F 6E 6E 65 63 74 2E 71 71 2E 63 6F 6D 01 00 0B 6D 61 69 6C 2E 71 71 2E 63 6F 6D 01 00 09 71 7A 6F 6E 65 2E 63 6F 6D 01 00 0C 71 7A 6F 6E 65 2E 71 71 2E 63 6F 6D 01 00 0A 6D 6D 61 2E 71 71 2E 63 6F 6D”)
返回 (tlv_pack (“05 11”, pack.未知函数_67177591 ()))

.子程序 tlv187, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (未知函数_67177596 ())
返回 (tlv_pack (“01 87”, pack.未知函数_67177591 ()))

.子程序 tlv188, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (未知函数_67177596 ())
返回 (tlv_pack (“01 88”, pack.未知函数_67177591 ()))

.子程序 tlv194, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177590 (未知函数_67177596 ())
返回 (tlv_pack (“01 94”, pack.未知函数_67177591 ()))

.子程序 tlv191, 字节集, , 
.参数 CodeType, 整数型, , 0 = 四字母   1 = 滑块

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
.判断开始 (等于 (CodeType, 1))
    pack.未知函数_67177588 (“82”)
.默认
    pack.未知函数_67177588 (“01”)
.判断结束
返回 (tlv_pack (“01 91”, pack.未知函数_67177591 ()))

.子程序 tlv193, 字节集, , 验证码
.参数 Ticket, 文本型, , 

.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177592 (Ticket)
返回 (tlv_pack (“01 93”, pack.未知函数_67177591 ()))

.子程序 tlv202, 字节集, , WIFI环境时启用
.参数 WiFiName, 文本型, , 

.局部变量 pack, 未知类型0x49010C72, , , 
.局部变量 WiFi, 字节集, , , 

赋值 (WiFi, 未知函数_67177597 (WiFiName))
赋值 (WiFi, 相加 (未知函数_67177598 (“22”), 取字节集左边 (WiFi, 相减 (取字节集长度 (WiFi), 1)), 未知函数_67177598 (“22”)))

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 10”)
pack.未知函数_67177590 (未知函数_67177593 (16)) ' 86 EE 6E D9 F9 99 88 9A 7E F3 52 19 82 55 DD DB   WIFI网卡地址
pack.未知函数_67177589 (取字节集长度 (WiFi))
pack.未知函数_67177590 (WiFi)
返回 (tlv_pack (“02 02”, pack.未知函数_67177591 ()))

.子程序 tlv177, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“01”)
pack.未知函数_67177588 (“5B E1 7C 73”) ' //build_time  2018-11-6 19:35:15   更新或APP创建时间
pack.未知函数_67177588 (“00 0A”)
pack.未知函数_67177588 (“36 2E 30 2E 30 2E 32 33 34 32”) ' //build_version   6.0.0.2342
返回 (tlv_pack (“01 77”, pack.未知函数_67177591 ()))

.子程序 tlv516, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 00”)
返回 (tlv_pack (“05 16”, pack.未知函数_67177591 ()))

.子程序 tlv521, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 00 00 00 00 00”)
返回 (tlv_pack (“05 21”, pack.未知函数_67177591 ()))

.子程序 tlv525, 字节集, , 
.局部变量 pack, 未知类型0x49010C72, , , 

pack.未知函数_67177587 ()
pack.未知函数_67177588 (“00 01 05 22 00 02 01 00”)
返回 (tlv_pack (“05 25”, pack.未知函数_67177591 ()))

.窗口程序集 窗口程序集_窗口1, , , 

.类模块 MobileQQHk, , , 

.程序集变量 Http, 未知类型0x49010DB2, , , 
.程序集变量 Hk, 未知类型0x41010DB3, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 Hk_初始化, 空白型, , 
.参数 ProxyIp, 文本型, , 

.如果真 (取反 (文件是否存在 (相加 (取运行目录 (), “\gzip.dll”))))
    写到文件 (相加 (取运行目录 (), “\gzip.dll”))

.子程序 Hk_置Uid, 空白型, , 
.参数 QQUser, 文本型, , 

赋值 (Hk., 删首尾空 (QQUser))

.子程序 Hk_置Capcd, 空白型, , 
.参数 QQCapcd, 文本型, , 

赋值 (Hk., 删首尾空 (QQCapcd))

.子程序 Hk_获取验证码, 逻辑型, , 
.局部变量 Url, 文本型, , , 
.局部变量 ReturnText, 文本型, , , 
.局部变量 匿名局部变量_3430, 空白型, , , 
.局部变量 js, 未知类型0x49010DC9, , , 
.局部变量 state, 文本型, , , 
.局部变量 Zz, 未知类型0x49010DCA, , , 
.局部变量 脚本, 未知类型0x49010DCB, , , 

赋值 (Url, 相加 (“https://ssl.captcha.qq.com/cap_union_prehandle?aid=16&captype=&protocol=https&clientype=1&disturblevel=&apptype=2&noheader=1&color=&showtype=&fb=1&theme=&lang=2052&ua=TW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMS4xOyB2aXZvIHkzMWEgQnVpbGQvTFlaMjhOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvMzkuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYgVjFfQU5EX1NRXzcuOS43Xzk5NF9ZWUJfRCBRUS83LjkuNy4zOTIwIE5ldFR5cGUvV0lGSSBXZWJQLzAuNC4xIFBpeGVsLzkwMCBTdGF0dXNCYXJIZWlnaHQvNTE=&cap_cd=”, Hk., “&uid=”, Hk., “&wxLang=&subsid=1&callback=_aq_460302&sess=”))


Http.未知函数_67177932 (“GET”, Url)
Http.未知函数_67177933 (“*/*”)
Http.未知函数_67177941 (相加 (“https://ssl.captcha.qq.com/template/wireless_mqq_captcha.html?style=simple&aid=16&uin=”, Hk., “&cap_cd=”, Hk., “&clientype=1&apptype=2”))
Http.未知函数_67177940 (“Mozilla/5.0 (Linux; Android 5.1.1; vivo y31a Build/LYZ28N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 V1_AND_SQ_7.9.7_994_YYB_D QQ/7.9.7.3920 NetType/WIFI WebP/0.4.1 Pixel/900 StatusBarHeight/51”)
Http.未知函数_67177934 ()

赋值 (ReturnText, Http.未知函数_67177935 ())
 ' 调试输出 (ReturnText)
.如果真 (等于 (ReturnText, “”))
    返回 (假)
.如果真结束

赋值 (ReturnText, 未知函数_67177936 (ReturnText, “(”, “)”))

.如果真 (取反 (js.未知函数_67177937 (ReturnText)))
    返回 (假)
.如果真结束

赋值 (state, js.未知函数_67177938 (“state”))
.如果 (不等于 (state, “1”))
    返回 (假)
.否则
    赋值 (Hk., js.未知函数_67177938 (“sess”))
    赋值 (Hk., js.未知函数_67177938 (“sid”))
    赋值 (Hk., 未知函数_67177939 ())
     ' 调试输出 (Hk.Sess, Hk.Sid)
    赋值 (ReturnText, “”)
    赋值 (Hk., “”)
    
    赋值 (Url, 相加 (“https://ssl.captcha.qq.com/cap_union_new_show?aid=16&captype=&protocol=https&clientype=1&disturblevel=&apptype=2&noheader=1&color=&showtype=&fb=1&theme=&lang=2052&ua=TW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMS4xOyB2aXZvIHkzMWEgQnVpbGQvTFlaMjhOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvMzkuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYgVjFfQU5EX1NRXzcuOS43Xzk5NF9ZWUJfRCBRUS83LjkuNy4zOTIwIE5ldFR5cGUvV0lGSSBXZWJQLzAuNC4xIFBpeGVsLzkwMCBTdGF0dXNCYXJIZWlnaHQvNTE=&subsid=2&sess=”, Hk., “&fwidth=0&sid=”, Hk., “&forcestyle=undefined&wxLang=&tcScale=1&uid=”, Hk., “&cap_cd=”, Hk., “&rnd=67604&TCapIframeLoadTime=285&prehandleLoadTime=67&createIframeStart=”, Hk.))
    
    
    赋值 (Hk., Url)
    
    
    Http.未知函数_67177932 (“GET”, Url)
    Http.未知函数_67177933 (“text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8”)
    Http.未知函数_67177941 (相加 (“https://ssl.captcha.qq.com/template/wireless_mqq_captcha.html?style=simple&aid=16&uin=”, Hk., “&cap_cd=”, Hk., “&clientype=1&apptype=2”))
    Http.未知函数_67177940 (“Mozilla/5.0 (Linux; Android 5.1.1; vivo y31a Build/LYZ28N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 V1_AND_SQ_7.9.7_994_YYB_D QQ/7.9.7.3920 NetType/WIFI WebP/0.4.1 Pixel/900 StatusBarHeight/51”)
    Http.未知函数_67177934 ()
    
    赋值 (ReturnText, Http.未知函数_67177935 ())
    
    .如果真 (等于 (ReturnText, “”))
        返回 (假)
    .如果真结束
    
    赋值 (Hk., 未知函数_67177936 (ReturnText, 相加 (“,spt:”, #引号), 相加 (#引号, “,curenv”)))
    赋值 (Hk., 未知函数_67177936 (ReturnText, 相加 (“collectdata:”, #引号), 相加 (#引号, “,asig:”)))
    赋值 (Hk., 未知函数_67177936 (ReturnText, 相加 (“,vsig:”, #引号), 相加 (#引号, “,dst:”)))
    赋值 (Hk., 未知函数_67177936 (ReturnText, 相加 (“,websig:”, #引号), 相加 (#引号, “,collectdata”)))
    赋值 (Hk. [1], 未知函数_67177936 (ReturnText, 相加 (“,cdnPic1:”, #引号), 相加 (#引号, “,cdnPic2”)))
    赋值 (Hk. [2], 子文本替换 (Hk. [1], “hycdn_1”, “hycdn_2”, , , 真))
    
     ' 调试输出 (“坐标Y”, Hk.Y)
     ' 调试输出 (“Collectdata”, Hk.Collectdata)
     ' 调试输出 (“Vsig”, Hk.Vsig)
     ' 调试输出 (“Websig”, Hk.Websig)
     ' 调试输出 (“CdnPic”, Hk.CdnPic)
    
     ' Zz.创建 (#引号 ＋ “({.*?})” ＋ #引号, ReturnText, , , , )
     ' 脚本.执行 (#cdata)
     ' Hk.Cdata ＝ 脚本.运行 (“cdata”, Zz.取子匹配文本 (1, 1, ), , , , , )
    
    赋值 (Url, 相加 (Hk. [1], “?aid=16&captype=&protocol=https&clientype=1&disturblevel=&apptype=2&noheader=1&color=&showtype=&fb=1&theme=&lang=2052&ua=TW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMS4xOyB2aXZvIHkzMWEgQnVpbGQvTFlaMjhOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvMzkuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYgVjFfQU5EX1NRXzcuOS43Xzk5NF9ZWUJfRCBRUS83LjkuNy4zOTIwIE5ldFR5cGUvV0lGSSBXZWJQLzAuNC4xIFBpeGVsLzkwMCBTdGF0dXNCYXJIZWlnaHQvNTE=&subsid=3&sess=”, Hk., “&fwidth=0&sid=”, Hk., “&forcestyle=undefined&wxLang=&tcScale=1&uid=”, Hk., “&cap_cd=”, Hk., “&rnd=67604&TCapIframeLoadTime=285&prehandleLoadTime=67&createIframeStart=”, Hk., “&rand=28033287&websig=”, Hk., “&vsig=”, Hk., “&img_index=1”))
    
    Http.未知函数_67177932 (“GET”, Url)
    Http.未知函数_67177933 (“image/webp,*/*;q=0.8”)
    Http.未知函数_67177941 (Hk.)
    Http.未知函数_67177940 (“Mozilla/5.0 (Linux; Android 5.1.1; vivo y31a Build/LYZ28N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 V1_AND_SQ_7.9.7_994_YYB_D QQ/7.9.7.3920 NetType/WIFI WebP/0.4.1 Pixel/900 StatusBarHeight/51”)
    Http.未知函数_67177934 ()
    
    赋值 (Hk. [1], Http.未知函数_67177942 ())
    
    
    赋值 (Hk., 到文本 (计算坐标_ (到位图 (Hk. [1]))))
     ' 调试输出 (Hk.X, Hk.Y)
    .如果 (大于 (到整数 (Hk.), 0))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果结束


.子程序 Hk_提交验证, 逻辑型, , 
.局部变量 轨迹, 未知类型0x41010DD8, , , 
.局部变量 POST, 文本型, , , 
.局部变量 js, 未知类型0x49010DC9, , , 
.局部变量 Url, 文本型, , , 
.局部变量 ReturnText, 文本型, , , 
.局部变量 state, 文本型, , , 

赋值 (Hk., 真)

赋值 (Hk., 自动生成滑动轨迹_ (到整数 (Hk.), 0, 0))
赋值 (轨迹, 加密轨迹 (Hk., Hk., Hk.))
赋值 (Hk., 轨迹.)
赋值 (Hk., 轨迹.)
 ' 调试输出 (Hk.Data)
赋值 (Url, “https://ssl.captcha.qq.com/cap_union_new_verify”)

赋值 (POST, 相加 (“aid=16&captype=&protocol=https&clientype=1&disturblevel=&apptype=2&noheader=1&color=&showtype=&fb=1&theme=&lang=2052&ua=TW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDUuMS4xOyB2aXZvIHkzMWEgQnVpbGQvTFlaMjhOKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvMzkuMC4wLjAgTW9iaWxlIFNhZmFyaS81MzcuMzYgVjFfQU5EX1NRXzcuOS43Xzk5NF9ZWUJfRCBRUS83LjkuNy4zOTIwIE5ldFR5cGUvV0lGSSBXZWJQLzAuNC4xIFBpeGVsLzkwMCBTdGF0dXNCYXJIZWlnaHQvNTE%3D&subsid=2&sess=”, Hk., “&fwidth=0&sid=”, Hk., “&forcestyle=undefined&wxLang=&tcScale=1&uid=”, Hk., “&cap_cd=”, Hk., “&rnd=67604&TCapIframeLoadTime=285&prehandleLoadTime=67&createIframeStart=”, Hk., “&ans=”, Hk., “%2C”, Hk., “%3B&vsig=”, Hk., “&cdata=0&websig=”, Hk., “&subcapclass=15&”, Hk., “=”, Hk., “&fpinfo=&eks=&tlg=1&vlg=0_0_0”))

Http.未知函数_67177932 (“POST”, Url)
Http.未知函数_67177933 (“application/json”)
Http.未知函数_67177941 (Hk.)
Http.未知函数_67177945 (“application/x-www-form-urlencoded”)
Http.未知函数_67177940 (“Mozilla/5.0 (Linux; Android 5.1.1; vivo y31a Build/LYZ28N) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 V1_AND_SQ_7.9.7_994_YYB_D QQ/7.9.7.3920 NetType/WIFI WebP/0.4.1 Pixel/900 StatusBarHeight/51”)
Http.未知函数_67177946 (“uin=; login_key_set_failed=AlreadyLogout”)
Http.未知函数_67177934 (POST)


赋值 (ReturnText, Http.未知函数_67177935 ())
调试输出 (ReturnText)
.如果真 (等于 (ReturnText, “”))
    返回 (假)
.如果真结束
.如果真 (取反 (js.未知函数_67177937 (ReturnText)))
    返回 (假)
.如果真结束
赋值 (state, js.未知函数_67177938 (“errorCode”))
.如果 (不等于 (state, “0”))
    返回 (假)
.否则
    赋值 (Hk., js.未知函数_67177938 (“randstr”))
    赋值 (Hk., js.未知函数_67177938 (“ticket”))
    返回 (真)
.如果结束


.子程序 计算坐标_, 整数型, , 
.参数 图片, 字节集, , 

.局部变量 Y, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 上次颜色, 整数型, , , 
.局部变量 颜色, 整数型, , , 
.局部变量 次数, 整数型, , , 
.局部变量 最终X, 整数型, , , 
.局部变量 最大次数, 整数型, , , 
.局部变量 上次X, 整数型, , , 
.局部变量 差值, 整数型, , , 
.局部变量 上次最终X, 整数型, , , 
.局部变量 XX, 整数型, , , 
.局部变量 位图, 位图, , , 
.局部变量 跳出, 逻辑型, , , 



位图.载入数据 (图片)

.计次循环首 (位图.取高度 (), Y)
    
    .计次循环首 (位图.取宽度 (), X)
        
        赋值 (颜色, 位图.取某点颜色 (相减 (X, 1), 相减 (Y, 1)))
        
        
        .如果真 (大于 (取差异度 (到字节集 (颜色), 到字节集 (上次颜色)), 50))
            赋值 (差值, 相减 (X, 1, 上次X))
            .如果真 (并且 (大于 (差值, 80), 小于 (差值, 100)))
                赋值 (最终X, 上次X)
                .判断开始 (等于 (最终X, 上次最终X))
                    赋值 (次数, 相加 (次数, 1))
                    .如果真 (小于 (最大次数, 次数))
                        赋值 (最大次数, 次数)
                        赋值 (XX, 最终X)
                        
                         ' .如果真 (大于 (最大次数, 5))
                             ' 跳出 ＝ 真
                             ' 跳出循环 ()
                        .如果真结束
                        
                    .如果真结束
                    
                .默认
                    赋值 (次数, 0)
                .判断结束
                赋值 (上次最终X, 最终X)
            .如果真结束
            
            赋值 (上次X, 相减 (X, 1))
        .如果真结束
        
        
        赋值 (上次颜色, 颜色)
    .计次循环尾 ()
    
    .如果真 (跳出)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


返回 (相减 (XX, 25))

.子程序 取差异度, 双精度小数型, , 
.参数 颜色1, 字节集, , 
.参数 颜色2, 字节集, , 

.局部变量 y1, 双精度小数型, , , 
.局部变量 u1, 双精度小数型, , , 
.局部变量 v1, 双精度小数型, , , 
.局部变量 y2, 双精度小数型, , , 
.局部变量 u2, 双精度小数型, , , 
.局部变量 v2, 双精度小数型, , , 

赋值 (y1, 相加 (相乘 (0.299, 颜色1 [1]), 相乘 (0.587, 颜色1 [2]), 相乘 (0.114, 颜色1 [3])))
赋值 (u1, 相加 (相减 (相乘 (-0.14713, 颜色1 [1]), 相乘 (0.28886, 颜色1 [2])), 相乘 (0.436, 颜色1 [3])))
赋值 (v1, 相减 (相乘 (0.615, 颜色1 [1]), 相乘 (0.51498, 颜色1 [2]), 相乘 (0.10001, 颜色1 [3])))
赋值 (y2, 相加 (相乘 (0.299, 颜色2 [1]), 相乘 (0.587, 颜色2 [2]), 相乘 (0.114, 颜色2 [3])))
赋值 (u2, 相加 (相减 (相乘 (-0.14713, 颜色2 [1]), 相乘 (0.28886, 颜色2 [2])), 相乘 (0.436, 颜色2 [3])))
赋值 (v2, 相减 (相乘 (0.615, 颜色2 [1]), 相乘 (0.51498, 颜色2 [2]), 相乘 (0.10001, 颜色2 [3])))
返回 (求平方根 (相加 (相乘 (相减 (y1, y2), 相减 (y1, y2)), 相乘 (相减 (u1, u2), 相减 (u1, u2)), 相乘 (相减 (v1, v2), 相减 (v1, v2)))))

.子程序 到位图, 字节集, , 
.参数 图片数据, 字节集, 参考, 

.局部变量 图片, 对象, , , 
.局部变量 图, 字节集, , , 

未知函数_167841246 (0)
赋值 (图, 图片数据)

.如果真 (或者 (不等于 (取字节集左边 (图, 2), { 66, 77 }), 大于 (取字节集数据 (图, #短整数型, 29), 8)))
    图片.创建图片对象 (图)
    赋值 (图, 图片.取回图片 ())
    图片.清除 ()
.如果真结束
未知函数_167841247 ()
返回 (图)

.子程序 自动生成滑动轨迹_, 文本型, , 
.参数 X坐标, 整数型, , 
.参数 UpX, 整数型, 参考 可空, 
.参数 UpY, 整数型, 参考 可空, 

.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 匿名局部变量_3472, 空白型, , , 
.局部变量 Max, 整数型, , , 
.局部变量 Norm, 整数型, , , 
.局部变量 proba, 整数型, , , 
.局部变量 Time, 整数型, , , 
.局部变量 Final, 整数型, , , 
.局部变量 Number, 整数型, , , 
.局部变量 StartTime, 整数型, , , 
.局部变量 匿名局部变量_3480, 空白型, , , 
.局部变量 轨迹, 文本型, , , 
.局部变量 tail, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 X_, 整数型, , "0", 
.局部变量 X_Max, 整数型, , , 
.局部变量 Z, 整数型, , , 
.局部变量 C, 整数型, , , 
.局部变量 cc, 整数型, , , 
.局部变量 X_Max_, 整数型, , , 
.局部变量 xx, 整数型, , , 
.局部变量 ii, 整数型, , , 
.局部变量 X_1, 通用型, , "0", 
.局部变量 B, 整数型, , , 
.局部变量 _X, 整数型, , "0", 


 ' Final ＝ 到整数 (X坐标 － 50)

 ' Final ＝ 到整数 (X坐标 ÷ 1.65)
 ' Final ＝ 到整数 (X坐标 ÷ 1.39)
 ' Final ＝ 到整数 (X坐标 ÷ 1.46)
赋值 (Final, 到整数 (相除 (X坐标, 2.66)))

赋值 (Number, 取随机数 (45, 60))
 ' 调试输出 (Final)

赋值 (Max, 相除 (Final, Number))




 ' .计次循环首 (Number, i)
    
     ' 加入成员 (X_, 1)
 ' .计次循环尾 ()

赋值 (Number, 相除 (Final, 2))



.判断循环首 (真)
    赋值 (cc, 相加 (cc, 1))
    
    .判断开始 (等于 (cc, 1))
        
         ' 置随机数种子 (cc)
        加入成员 (X_, 1)
        
        加入成员 (_X, 1)
        
    .默认
        
        加入成员 (X_, 取随机数 (X_ [相减 (cc, 1)], 相加 (X_ [相减 (cc, 1)], 多项选择 (到整数 (未知函数_67177952 (1, 20, )), -1, 0, 0, 3, 2, 1, 1, 3, 1, 2, -1, -1, -1, 0, 0, 1, 1, 3, 1, 2))))
         ' 加入成员 (_X, 取随机数 (_X [cc － 1], _X [cc － 1] ＋ 多项选择 (到整数 (文本_取随机范围数字 (1, 10, )), 0, 0, 0, 0, 0, 0, 0, 1, -1, 1)))
        加入成员 (_X, 取随机数 (_X [相减 (cc, 1)], 相加 (_X [相减 (cc, 1)], 多项选择 (到整数 (未知函数_67177952 (1, 20, )), -1, 0, 0, 1, 1, 1, 1, 0, 1, 2, -1, 0, 0, 1, 1, 1, 1, 0, 1, 2))))
        
         ' 调试输出 (X_ [cc － 1], X_ [cc － 1] ＋ 取随机数 (0, 2))
    .判断结束
    
    .如果真 (大于或等于 (X_Max_, Final))
        跳出循环 ()
    .如果真结束
    
    赋值 (X_Max_, 相加 (X_Max_, X_ [cc], _X [cc]))
    
    
    
.判断循环尾 ()

赋值 (i, 相乘 (取数组成员数 (X_), 2))

.计次循环首 (i, ii)
    
    赋值 (y, 多项选择 (取随机数 (1, 13), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1))
    赋值 (t, 取随机数 (16, 17))
    
    
    .判断开始 (等于 (i, ii))
        赋值 (tail, “”)
    .默认
        赋值 (tail, “,”)
    .判断结束
    
    .判断开始 (大于 (ii, 取数组成员数 (X_)))
        赋值 (B, 相加 (B, 1))
        .如果真 (小于或等于 (_X [相加 (相减 (取数组成员数 (_X), B), 1)], 2))
            赋值 (t, 取随机数 (80, 300))
        .如果真结束
        
        赋值 (轨迹, 相加 (轨迹, “[”, 到文本 (_X [相加 (相减 (取数组成员数 (_X), B), 1)]), “,”, 到文本 (y), “,”, 到文本 (t), “]”, tail))
        赋值 (UpX, 相加 (UpX, _X [相加 (相减 (取数组成员数 (_X), B), 1)]))
    .默认
        
        赋值 (轨迹, 相加 (轨迹, “[”, 到文本 (X_ [ii]), “,”, 到文本 (y), “,”, 到文本 (t), “]”, tail))
        赋值 (UpX, 相加 (UpX, X_ [ii]))
    .判断结束
    
    
    赋值 (Time, 相加 (Time, t))
    
    赋值 (UpY, 相加 (UpY, y))
    
.计次循环尾 ()

 ' 调试输出 (轨迹)
 ' 调试输出 (UpX)
返回 (轨迹)

.子程序 加密轨迹, 未知类型0x41010DD8, , 
.参数 轨迹, 文本型, , 
.参数 cdata, 文本型, , 
.参数 Aes, 逻辑型, , 

.局部变量 脚本文件, 文本型, , , 
.局部变量 Js, 未知类型0x49010DCB, , , 
.局部变量 tokenid, 文本型, , , 
.局部变量 slideValue, 文本型, , , 
.局部变量 URL, 文本型, , , 
.局部变量 数据eks, 文本型, , , 
.局部变量 Text, 文本型, , , 
.局部变量 数据, 未知类型0x41010DD8, , , 

Js.未知函数_67177953 ()

.子程序 取回参数, 未知类型0x41010DB3, , 
返回 (Hk)


 ' 不属于任何一个程序集、类模块的函数：
