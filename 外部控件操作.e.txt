 ' 文件类型：Windows模块源码

 ' 程序名称：外部控件操作类
 ' 程序描述：
 ' 程序作者：kyozy
 ' 邮政编码：644000
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：75602718@qq.com
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 TBIF_COMMAND, "32", , 
.常量 TBIF_IMAGE, "1", , 
.常量 TBIF_LPARAM, "16", , 
.常量 TBIF_SIZE, "64", , 
.常量 TBIF_STATE, "4", , 
.常量 TBIF_STYLE, "8", , 
.常量 TBIF_BYINDEX, "2147483648", , 
.常量 TBIF_TEXT, "2", , 
.常量 , , , 
.常量 TBSTATE_CHECKED, "1", , 选中
.常量 TBSTATE_ENABLED, "4", , 禁止
.常量 TBSTATE_HIDDEN, "8", , 隐藏
.常量 TBSTATE_INDETERMINATE, "16", , 变灰
.常量 TBSTATE_PRESSED, "2", , 按下
.常量 , , , 
.常量 TBSTYLE_BUTTON, "0", , 标准按钮
.常量 TBSTYLE_CHECK, "2", , 多选按钮
.常量 TBSTYLE_CHECKGROUP, "6", , 单选按钮
.常量 TBSTYLE_DROPDOWN, "8", , 下拉按钮
.常量 TBSTYLE_GROUP, "4", , 
.常量 TBSTYLE_SEP, "1", , 分割条
.常量 , , , 
.常量 TB_INSERTBUTTON, "1045", , 插入按钮
.常量 TB_BUTTONCOUNT, "1048", , 取按钮数
.常量 TB_GETBUTTONINFOA, "1089", , 取按钮信息
.常量 TB_SETBUTTONINFOA, "1090", , 置按钮信息
.常量 TB_SETSTATE, "1041", , 设置按钮状态
.常量 TB_COMMANDTOINDEX, "1049", , 从按钮ID取按钮索引
.常量 TB_GETBUTTON, "1047", , 取按钮TBBUTTON
.常量 TB_GETSTATE, "1042", , 取按钮状态
.常量 TB_DELETEBUTTON, "1046", , 删除按钮
.常量 TB_GETBUTTONTEXTA, "1069", , 取工具条按钮标题
.常量 TB_SETBUTTONSIZE, "1055", , 设置按钮尺寸
.常量 TB_SETBUTTONWIDTH, "1083", , 置按钮最大最小宽度
.常量 TB_GETITEMRECT, "1053", , 取按钮矩形
.常量 TB_GETDISABLEDIMAGELIST, "1079", , 取禁止图片组
.常量 TB_GETHOTIMAGELIST, "1077", , 取热点图片组
.常量 TB_GETIMAGELIST, "1073", , 取图片组
.常量 TB_SETDISABLEDIMAGELIST, "1078", , 置禁止图片组
.常量 TB_SETHOTIMAGELIST, "1076", , 置热点图片组
.常量 TB_SETIMAGELIST, "1072", , 置图片组
.常量 TB_ISBUTTONCHECKED, "1034", , 是否选中
.常量 TB_ISBUTTONENABLED, "1033", , 是否有效
.常量 TB_ISBUTTONHIDDEN, "1036", , 是否隐藏
.常量 TB_ISBUTTONINDETERMINATE, "1037", , 是否变灰
.常量 TB_ISBUTTONPRESSED, "1035", , 是否按下
.常量 TB_SETMAXTEXTROWS, "1084", , 置标题为提示文本
.常量 TB_GETBUTTONSIZE, "1082", , 取TBBUTTON结构大小
.常量 TB_GETBITMAP, "1068", , 取图片索引
.常量 TB_AUTOSIZE, "1057", , 自动大小
.常量 , , , 
.常量 GWL_STYLE, "-16", , 窗口样式
.常量 CCS_BOTTOM, "3", , 底部对齐（状态栏却省值）
.常量 CCS_TOP, "1", , 顶部对齐(工具栏却省值)
.常量 CCS_NOMOVEY, "2", , 可以水平移动和改变大小（如指定了CCS_NORESIZE则无效）
.常量 CCS_NORESIZE, "4", , 禁止改变大小
.常量 CCS_NOPARENTALIGN, "8", , 禁止自动移动到父窗口的顶部或底部
.常量 TBSTYLE_FLAT, "2048", , 平面工具条
.常量 , , , 
.常量 位置_顶边, "0", 公开, 
.常量 位置_底边, "1", 公开, 
.常量 位置_自由, "2", 公开, 
.常量 图片组_通常, "0", 公开, 
.常量 图片组_热点, "1", 公开, 
.常量 图片组_禁止, "2", 公开, 
.常量 CCS_NODIVIDER, "64", , 不在控件顶部画高亮线
.常量 TBSTYLE_WRAPABLE, "512", , 工具栏按钮可换行
.常量 MEM_RELEASE, "32768", , 
.常量 MEM_COMMIT, "4096", , 
.常量 PAGE_READWRITE, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 
.常量 , , , 
.常量 , , , 
.常量 STANDARD_RIGHTS_REQUIRED, "983040", , 
.常量 SYNCHRONIZE, "1048576", , 
.常量 PROCESS_ALL_ACCESS, "2035711", , 
.常量 PROCESS_CREATE_PROCESS, "128", , 
.常量 PROCESS_CREATE_THREAD, "2", , 
.常量 PROCESS_DUP_HANDLE, "64", , 
.常量 PROCESS_HEAP_ENTRY_BUSY, "4", , 
.常量 PROCESS_HEAP_ENTRY_DDESHARE, "32", , 
.常量 PROCESS_HEAP_ENTRY_MOVEABLE, "16", , 
.常量 PROCESS_HEAP_REGION, "1", , 
.常量 PROCESS_HEAP_UNCOMMITTED_RANGE, "2", , 
.常量 PROCESS_QUERY_INFORMATION, "1024", , 
.常量 PROCESS_SET_INFORMATION, "512", , 
.常量 PROCESS_SET_QUOTA, "256", , 
.常量 PROCESS_SET_SESSIONID, "4", , 
.常量 PROCESS_TERMINATE, "1", , 
.常量 PROCESS_VM_OPERATION, "8", , 
.常量 PROCESS_VM_READ, "16", , 
.常量 PROCESS_VM_WRITE, "32", , 
.常量 PROCESS_XP_HEADER_CACHE, "131072", , 
.常量 , , , 
.常量 , , , 
.常量 TV_FIRST, "4352", , 
.常量 TVM_CREATEDRAGIMAGE, "4370", , 创建RAG图象
.常量 TVM_DELETEITEM, "4353", , 删除项目
.常量 TVM_EDITLABELA, "4366", , 编辑标签A
.常量 TVM_ENDEDITLABELNOW, "4374", , 结束编辑新标签
.常量 TVM_ENSUREVISIBLE, "4372", , 保证显示
.常量 TVM_EXPAND, "4354", , 扩展
.常量 TVM_GETBKCOLOR, "4383", , 取背景颜色
.常量 TVM_GETCOUNT, "4357", , 取数量
.常量 TVM_GETEDITCONTROL, "4367", , 取编辑控制器
.常量 TVM_GETIMAGELIST, "4360", , 取列表图片，返回图象的句柄
.常量 TVM_GETINDENT, "4358", , 取缩进？
.常量 TVM_GETINSERTMARKCOLOR, "4390", , 取插入标志色
.常量 TVM_GETISEARCHSTRINGA, "4375", , 取搜索文本A
.常量 TVM_GETITEMA, "4364", , 取项目A，要用结构
.常量 TVM_GETITEMHEIGHT, "4380", , 取项目的距离（行距）
.常量 TVM_GETITEMRECT, "4356", , 
.常量 TVM_GETITEMSTATE, "4391", , 取项目状态
.常量 TVM_GETLINECOLOR, "4393", , 取连线颜色
.常量 TVM_GETNEXTITEM, "4362", , 取下一项目？
.常量 TVM_GETSCROLLTIME, "4386", , 取卷项目？
.常量 TVM_GETTEXTCOLOR, "4384", , 取文本颜色
.常量 TVM_GETTOOLTIPS, "4377", , 取工具提示
.常量 TVM_GETVISIBLECOUNT, "4368", , 取可视数量
.常量 TVM_GETUNICODEFORMAT, "8198", , 取UNICODE格式
.常量 TVM_HITTEST, "4369", , 点击
.常量 , , , 
.常量 TVM_INSERTITEMA, "4352", , 插入项目A
.常量 TVM_MAPACCIDTOHTREEITEM, "4394", , 
.常量 TVM_MAPHTREEITEMTOACCID, "4395", , 
.常量 TVM_SELECTITEM, "4363", , 选择项目
.常量 TVM_SETBKCOLOR, "4381", , 置背景色
.常量 TVM_SETIMAGELIST, "4361", , 设置图象列表
.常量 TVM_SETINDENT, "4359", , 设置缩进
.常量 TVM_SETINSERTMARK, "4378", , 设置插入标志
.常量 TVM_SETINSERTMARKCOLOR, "4389", , 置插入标志色
.常量 TVM_SETITEMA, "4365", , 设置项目A
.常量 TVM_SETITEMHEIGHT, "4379", , 置项目的距离（行距）
.常量 TVM_SETLINECOLOR, "4392", , 置连线颜色
.常量 TVM_SETSCROLLTIME, "4385", , 设置滚动条跳跃时的数量
.常量 TVM_SETTEXTCOLOR, "4382", , 设置文本颜色
.常量 TVM_SETTOOLTIPS, "4376", , 设置工具提示
.常量 TVM_SETUNICODEFORMAT, "8197", , 设置UNICODE格式
.常量 TVM_SORTCHILDREN, "4371", , 分类―子
.常量 TVM_SORTCHILDRENCB, "4373", , 分类―子―CB
.常量 , , , 
.常量 , , , 以下是宽字符方式的树形框操作，易语言不能使用================
.常量 TVM_EDITLABELW, "4417", , 编辑标签W
.常量 TVM_GETISEARCHSTRINGW, "4416", , 取搜索文本W
.常量 TVM_GETITEMW, "4414", , 取项目M，要用结构？
.常量 TVM_INSERTITEMW, "4402", , 插入项目W
.常量 TVM_SETITEMW, "4415", , 设置项目W
.常量 , , , 以上是宽字符方式的树形框操作，易语言不能使用================
.常量 , , , 
.常量 , , , 以下是枚举项目用的常量=============================
.常量 TVGN_CARET, "9", , 当前的项目
.常量 TVGN_CHILD, "4", , 第一个子项目
.常量 TVGN_DROPHILITE, "8", , 拖放的项目
.常量 TVGN_FIRSTVISIBLE, "5", , 第一个可视的
.常量 TVGN_LASTVISIBLE, "10", , 最后可视的
.常量 TVGN_NEXT, "1", , 下一条
.常量 TVGN_NEXTVISIBLE, "6", , 下一条可视的
.常量 TVGN_PARENT, "3", , 父
.常量 TVGN_PREVIOUS, "2", , 返回上一级
.常量 TVGN_PREVIOUSVISIBLE, "7", , 返回上一级可视的
.常量 TVGN_ROOT, "0", , 根
.常量 , , , 以上是枚举项目用的常量=============================
.常量 , , , 以下是取项目信息用的常量=============================
.常量 TVIF_CHILDREN, "64", , 是否有子
.常量 TVIF_DI_SETITEM, "4096", , 置项目
.常量 TVIF_HANDLE, "16", , 句柄
.常量 TVIF_IMAGE, "2", , 图象
.常量 TVIF_INTEGRAL, "128", , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。
.常量 TVIF_PARAM, "4", , 项目数值
.常量 TVIF_SELECTEDIMAGE, "32", , 选择图象
.常量 TVIF_STATE, "8", , 状态
.常量 TVIF_TEXT, "1", , 文本
.常量 TVIF_ALL, "39", , 全部,文本+图象+选择图象+项目数值 1+2+4+32=39
.常量 , , , 以上是取项目信息用的常量=============================
.常量 , , , 以下是取项目状态常量=============================
.常量 TVIS_BOLD, "16", , 加粗
.常量 TVIS_CUT, "4", , 
.常量 TVIS_DROPHILITED, "8", , 拖放目标
.常量 TVIS_EXPANDED, "32", , 扩展
.常量 TVIS_EXPANDEDONCE, "64", , 曾经扩展过一次
.常量 TVIS_EXPANDPARTIAL, "128", , 对项目部份扩展
.常量 TVIS_OVERLAYMASK, "3840", , 
.常量 TVIS_STATEIMAGEMASK, "61440", , Private Const TVIS_STATEIMAGEMASK As Long = &HF000&
.常量 TVIS_SELECTED, "2", , 选择
.常量 TVIS_SELECTEDA, "8192", , 选中
.常量 TVIS_NOSELECTEDA, "4096", , 没有选中
.常量 , , , 以上是取项目状态常量=============================
.常量 , , , 
.常量 , , , 以下是项目扩展常量=============================
.常量 TVE_COLLAPSE, "1", , 收缩
.常量 TVE_EXPAND, "2", , 扩展
.常量 , , , 以上是项目扩展常量=============================
.常量 , , , 以下是项目插入常量=============================
.常量 TVI_FIRST, "4294901761", , 在列表首部加入
.常量 TVI_LAST, "4294901762", , 在列表尾部插入
.常量 TVI_ROOT, "4294901760", , 在根部插入
.常量 TVI_SORT, "4294901763", , 插入项目时按字母顺序排列
.常量 , , , 以上是项目插入常量=============================
.常量 , , , 以下是公开的项目加入方式常量=============================
.常量 树形框插入项目_在根部插入, "1", 公开, 
.常量 树形框插入项目_在列表首部插入, "2", 公开, 
.常量 树形框插入项目_在列表尾部插入, "3", 公开, 
.常量 树形框插入项目_按字母顺序排列插入, "4", 公开, 
.常量 , , , 以上是公开的项目加入方式常量=============================
.常量 TVS_HASBUTTONS, "1", , 使用加减框
.常量 TVS_HASLINES, "2", , 使用连线
.常量 TVS_LINESATROOT, "4", , 使用根部线
.常量 TVS_EDITLABELS, "8", , 允许编辑
.常量 TVS_DISABLEDRAGDROP, "16", , 禁止拖动
.常量 TVS_SHOWSELALWAYS, "32", , 始终显示选择项
.常量 TVS_RTLREADING, "64", , 右对齐？
.常量 TVS_NOTOOLTIPS, "128", , 不使用工具提示
.常量 TVS_CHECKBOXES, "256", , 使用复选框
.常量 TVS_TRACKSELECT, "512", , 使用热点跟踪
.常量 TVS_SINGLEEXPAND, "1024", , 单击打开树
.常量 TVS_INFOTIP, "2048", , 支持发送 TVN_GETINFOTIP 消息获得提示标签信息
.常量 TVS_FULLROWSELECT, "4096", , 整行选择，此风格不能与TVS_HASLINES同时使用
.常量 TVS_NOSCROLL, "8192", , 不使用滚动条
.常量 TVS_NONEVENHEIGHT, "16384", , 和 TVM_SETITEMHEIGHT 消息共同预设一个项目的高度
.常量 TVS_NOHSCROLL, "32768", , 禁止水平滚动条
.常量 , , , 
.常量 WM_SETREDRAW, "11", , 重画设置
.常量 , , , 
.常量 , , , 
.常量 LVM_FIRST, "4096", , 
.常量 LVM_GETEXTENDEDLISTVIEWSTYLE, "", , LVM_FIRST + 55
.常量 LVM_SETEXTENDEDLISTVIEWSTYLE, "", , LVM_FIRST + 54
.常量 LVM_GETITEMCOUNT, "", , LVM_FIRST + 4
.常量 LVM_GETITEMTEXTA, "", , LVM_FIRST + 45
.常量 LVM_INSERTCOLUMNA, "", , LVM_FIRST + 27
.常量 LVM_INSERTITEMA, "", , LVM_FIRST + 7
.常量 LVM_SETITEM, "", , LVM_FIRST + 6
.常量 LVM_DELETEITEM, "", , LVM_FIRST + 8
.常量 LVM_DELETEALLITEMS, "", , #LVM_FIRST ＋ 9
.常量 LVM_DELETECOLUMN, "", , LVM_FIRST + 28
.常量 LVM_GETBKCOLOR, "", , LVM_FIRST + 0
.常量 LVM_SETINFOTIP, "", , LVM_FIRST + 173
.常量 LVCF_TEXT, "4", , 
.常量 LVCF_WIDTH, "2", , 
.常量 LVCF_FMT, "1", , 
.常量 LVIF_TEXT, "1", , 
.常量 LVIF_PARAM, "4", , 
.常量 LVIF_STATE, "8", , 
.常量 LVIS_SELECTED, "2", , 
.常量 LV_SETITEMSTATE, "4139", , 
.常量 LVS_EX_FULLROWSELECT, "32", , 整行选择
.常量 LVS_EX_HEADERDRAGDROP, "16", , LVS_REPORT时可以利用drag-and-drop重新排序
.常量 LVS_EX_TRACKSELECT, "8", , 当鼠标指到某一项时便自动选择该项
.常量 LVS_EX_CHECKBOXES, "4", , 带检查框
.常量 LVS_EX_SUBITEMIMAGES, "2", , 允许在子项中显示image
.常量 LVS_EX_GRIDLINES, "1", , 网格
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 6 扩展界面支持库一




数据类型 TBBUTTONINFO, , 工具栏信息;
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型, , , TBIF_
    .成员 idCommand, 整数型, , , 按钮ID
    .成员 iImage, 整数型, , , 图片索引
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 cx, 短整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pszText, 文本型, 传址, , 
    .成员 cchText, 整数型, , , 

数据类型 TBBUTTONINFO2, , 工具栏信息;
    .成员 cbSize, 整数型, , , 32
    .成员 dwMask, 整数型, , , TBIF_
    .成员 idCommand, 整数型, , , 按钮ID
    .成员 iImage, 整数型, , , 图片索引
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 cx, 短整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pszText, 整数型, , , 
    .成员 cchText, 整数型, , , 

数据类型 TBBUTTON, , 工具栏按钮
    .成员 iBitmap, 整数型, , , 按钮位图索引
    .成员 idCommand, 整数型, , , 按钮命令ID
    .成员 fsState, 字节型, , , TBSTATE_
    .成员 fsStyle, 字节型, , , TBSTYLE_
    .成员 dwData, 整数型, , , 应用程序定义的数据
    .成员 iString, 整数型, , , 按钮帮助文本字符串索引

数据类型 RECT, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 内存映射数据9X, , 
    .成员 映射文件号, 整数型, , , 
    .成员 指针, 整数型, , , 

数据类型 树型框结构, 公开, 
    .成员 项目文本, 文本型, , , 
    .成员 图片索引, 整数型, , , 
    .成员 选中图片索引, 整数型, , , 
    .成员 项目数值, 整数型, , , 
    .成员 加粗扩展, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展
    .成员 缩进层次, 整数型, , , 

数据类型 TVITEMEX, , 
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVITEMEX2, , 
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVINSERTSTRUCT, , 
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 文本型, 传址, , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 TVINSERTSTRUCT2, , 
    .成员 hParent, 整数型, , , 父
    .成员 hInsertAfter, 整数型, , , 插入标志
    .成员 mask, 整数型, , , 掩码
    .成员 hItem, 整数型, , , 项目句柄
    .成员 state, 整数型, , , 状态
    .成员 stateMask, 整数型, , , 状态掩码
    .成员 pszText, 整数型, , , 项目文本
    .成员 cchTextMax, 整数型, , , 最长文本（系统最大允许260个字符）
    .成员 iImage, 整数型, , , 图象
    .成员 iSelectedImage, 整数型, , , 选择图象
    .成员 cChildren, 逻辑型, , , 是否有子
    .成员 lParam, 整数型, , , 项目数值
    .成员 iIntegral, 整数型, , , 项目的画面高度。 这一个画面高度在标准项目画面高度的增量。

数据类型 项目数据, 公开, 
    .成员 项目文本, 文本型, , , 项目文本
    .成员 图片索引, 整数型, , , 图象
    .成员 选中图片索引, 整数型, , , 选择图象
    .成员 项目数值, 整数型, , , 项目数值

数据类型 树型框结构A, , 
    .成员 文本, 字节集, , , 
    .成员 图片索引, 整数型, , , 
    .成员 选中图片索引, 整数型, , , 
    .成员 项目数值, 整数型, , , 
    .成员 加粗扩展, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展
    .成员 缩进层次, 整数型, , , 

数据类型 LVCOLUMN, , 用于定义列表控制的一个表列
    .成员 mask, 整数型, , , 结构成员有效性屏蔽位
    .成员 fmt, 整数型, , , 表列对齐方式。fmt可以取如下值：LVCFMT_CENTER 表列居中对齐，LVCFMT_LEFT 表列左对齐
    .成员 cx, 整数型, , , 表列的象素宽度
    .成员 pszText, 整数型, , , LPTSTR表列的表头名
    .成员 cchTextMax, 整数型, , , 表列名的文本长度
    .成员 iSubItem, 整数型, , , 与表列关联的子表项索引号

数据类型 LVITEM, , 用于定义列表控制的一个表项
    .成员 mask, 整数型, , , 结构成员屏蔽位
    .成员 iItem, 整数型, , , 表项索引号
    .成员 iSubItem, 整数型, , , 子表项索引号
    .成员 state, 整数型, , , 表项状态
    .成员 stateMask, 整数型, , , 状态有效性屏蔽位
    .成员 pszText, 整数型, , , LPTSTR表项名文本
    .成员 cchTextMax, 整数型, , , 表项名最大长度
    .成员 iImage, 整数型, , , 表项图标的索引号
    .成员 lParam, 整数型, , , LPARAM与表项相关的32位数

数据类型 LVSETINFOTIP, , 
    .成员 cbSize, 整数型, , , LVSETINFOTIP结构大小
    .成员 dwFlags, 整数型, , , 0
    .成员 pszText, 文本型, , , 文本
    .成员 iItem, 整数型, , , 行号
    .成员 iSubItem, 整数型, , , 列号


.DLL命令 发送消息_API, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, 整数型, , 具体取决于消息;

.DLL命令 发送消息_TBBUTTON, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, TBBUTTON, , 具体取决于消息;

.DLL命令 发送消息_TBBUTTONINFO, 整数型, "user32", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 要接收消息的那个窗口的句柄
    .参数 信息值, 整数型, , 消息的标识符
    .参数 参数一, 整数型, , 具体取决于消息
    .参数 参数二, TBBUTTONINFO, , 具体取决于消息;

.DLL命令 取窗口类名_API, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名  以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 缓冲区, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 缓冲区长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 取数据地址_TBBUTTONINFO, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTONINFO, 传址, 
    .参数 数据2, TBBUTTONINFO, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_TBBUTTONINFO2, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTONINFO2, 传址, 
    .参数 数据2, TBBUTTONINFO2, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_TBBUTTON, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, TBBUTTON, 传址, 
    .参数 数据2, TBBUTTON, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_文本, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 文本型, 传址, 
    .参数 数据2, 文本型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_矩形, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, RECT, 传址, 
    .参数 数据2, RECT, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_整数, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 整数型, 传址, 
    .参数 数据2, 整数型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 取数据地址_字节, 整数型, "kernel32", "lstrcpynA", , 
    .参数 数据1, 字节型, 传址, 
    .参数 数据2, 字节型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 拷贝内存_TBBUTTON, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, TBBUTTON, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 拷贝内存_矩形, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, RECT, 传址, 
    .参数 源数据, 字节集, , 
    .参数 尺寸, 整数型, , 

.DLL命令 拷贝内存_整数, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 目标内容, 整数型, 传址, 
    .参数 源数据, TBBUTTON, , 
    .参数 尺寸, 整数型, , 

.DLL命令 取窗口风格_API, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 置窗口风格_API, 整数型, "user32", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 信息值, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 新窗口信息, 整数型, , 由nIndex指定的窗口信息的新值;

.DLL命令 重画窗口_API, 整数型, "user32", "InvalidateRect", , 这个函数屏蔽一个窗口客户区的全部或部分区域。这会导致窗口在事件期间部分重画  非零表示成功，零表示失败
    .参数 窗口句柄, 整数型, , 待屏蔽窗口的句柄
    .参数 屏蔽矩形, 整数型, , RECT，用于描述待屏蔽矩形部分的一个矩形结构。可用InvalidateRectBynum函数，同时将lpRect设为零（Long数据类型），从而屏蔽（或禁用）整个窗口
    .参数 重画前删除, 整数型, , TRUE（非零）导致指定的区域在重画前先删除;

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", , 
    .参数 hwnd, 整数型, , 
    .参数 lpdwProcessId, 整数型, 传址, 

.DLL命令 OpenProcess, 整数型, "kernel32.dll", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "kernel32.dll", "VirtualAllocEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 VirtualFreeEx, 整数型, "kernel32.dll", "VirtualFreeEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 

.DLL命令 WriteProcessMemory2, 整数型, "", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32.dll", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 CloseHandle, 整数型, "kernel32.dll", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 CreateFileMapping, 整数型, "kernel32.dll", "CreateFileMappingA", , 创建一个新的文件映射对象
    .参数 hFile, 整数型, , 
    .参数 lpFileMappigAttributes, 整数型, , 
    .参数 flProtect, 整数型, , 
    .参数 dwMaximumSizeHigh, 整数型, , 
    .参数 dwMaximumSizeLow, 整数型, , 
    .参数 lpName, 整数型, , 

.DLL命令 MapViewOfFile, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序的地址空间
    .参数 hFileMappingObject, 整数型, , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 dwFileOffsetHigh, 整数型, , 
    .参数 dwFileOffsetLow, 整数型, , 
    .参数 dwNumberOfBytesToMap, 整数型, , 

.DLL命令 UnmapViewOfFile, 整数型, "kernel32.dll", "UnmapViewOfFile", , 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
    .参数 lpBaseAddress, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 取窗口类名称, 整数型, "user32", "GetClassNameA", , 
    .参数 hwnd, 整数型, , 
    .参数 lpClassName, 文本型, , 
    .参数 nMaxCount, 整数型, , 

.DLL命令 取数据地址, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 树型框结构, 传址, 
    .参数 源, 树型框结构, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取数据地址2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 字节型, 传址, 
    .参数 源, 字节型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取数据地址3, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, 文本型, 传址, 
    .参数 源, 文本型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVITEMEX, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVITEMEX, 传址, 
    .参数 源, TVITEMEX, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVINSERTSTRUCT, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVINSERTSTRUCT, 传址, 
    .参数 源, TVINSERTSTRUCT, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVITEMEX2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVITEMEX2, 传址, 
    .参数 源, TVITEMEX2, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 取变量地址_TVINSERTSTRUCT2, 整数型, "kernel32.dll", "lstrcpyn", , 
    .参数 目标, TVINSERTSTRUCT2, 传址, 
    .参数 源, TVINSERTSTRUCT2, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 设置窗口信息, 整数型, "user32.dll", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 取窗口信息, 整数型, "user32.dll", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 发送消息1, 整数型, "user32.dll", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 类型为通用型，请在调试时调整其类型

.DLL命令 拷贝内存, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 目标地址, 整数型, , Any
    .参数 源地址, 整数型, , Any
    .参数 数据长度, 整数型, , 

.DLL命令 SendMessage, 整数型, "", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 SendMessage1, 整数型, "", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, LVSETINFOTIP, 传址, 

.DLL命令 SendMessage_Address, 整数型, "", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, 传址, 

.DLL命令 WriteProcessMemory_LVITEM, 整数型, "", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, LVITEM, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 WriteProcessMemory_COLUMN, 整数型, "", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, LVCOLUMN, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 GetThreadLocale, 整数型, "", "GetThreadLocale", , 

.程序集 接口程序集, , , 

.程序集变量 超级列表框, 超级列表框操作类, , , 
.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
超级列表框._初始化类 (1967558)

输出调试文本 (超级列表框.置选中项 (1))


.类模块 工具栏操作类, , , ToolbarWindow32

.程序集变量 集_工具栏句柄, 整数型, , , 
.程序集变量 集_按钮ID, 整数型, , , 
.程序集变量 集_外部控件, 逻辑型, , , 
.程序集变量 集_按钮信息, TBBUTTONINFO, , , 
.程序集变量 集_外部按钮信息, TBBUTTONINFO2, , , 
.程序集变量 集_单一按钮, TBBUTTON, , , 
.程序集变量 集_数据地址, 整数型, , , 
.程序集变量 集_外部指针, 整数型, , , 
.程序集变量 集_外部指针2, 整数型, , , 
.程序集变量 集_进程句柄, 整数型, , , 
.程序集变量 集_外部操作, 外部控件操作类, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_按钮ID, 22313)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化类, 逻辑型, 公开, 
.参数 参数_工具栏句柄, 整数型, , 
.参数 参数_是否外部控件, 逻辑型, 可空, 

.局部变量 局部_类名, 文本型, , , 

赋值 (局部_类名, 取空白文本 (256))
取窗口类名_API (参数_工具栏句柄, 局部_类名, 256)
.如果真 (等于 (删首尾空 (到大写 (局部_类名)), “TOOLBARWINDOW32”))
    .如果 (等于 (参数_是否外部控件, 真))
        赋值 (集_外部控件, 真)
    .否则
        赋值 (集_外部控件, 假)
    .如果结束
    赋值 (集_工具栏句柄, 参数_工具栏句柄)
    返回 (真)
.如果真结束
返回 (假)


.子程序 取按钮数, 整数型, , 取工具栏按钮总数
返回 (发送消息_API (集_工具栏句柄, #TB_BUTTONCOUNT, 0, 0))


.子程序 取按钮ID, 整数型, , 根据按钮索引取按钮的idCommand
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 局部_大小, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 18))
    发送消息_API (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_外部指针)
    赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 18))
    拷贝内存_TBBUTTON (集_单一按钮, 局部_数据, 18)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (集_单一按钮.idCommand)
.否则
    发送消息_TBBUTTON (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_单一按钮)
    返回 (集_单一按钮.idCommand)
    
.如果结束


.子程序 加入状态, 空白型, , 将指定状态值加入到按钮的存在状态中。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_按钮状态, 整数型, 可空, 可以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。默认值为0。

.局部变量 局部_状态, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

赋值 (局部_状态, 发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))
.如果 (等于 (参数_按钮状态, #禁止))
    .如果真 (不等于 (位与 (局部_状态, #禁止), 0))
        赋值 (局部_状态, 位异或 (局部_状态, 参数_按钮状态))
    .如果真结束
    
.否则
    赋值 (局部_状态, 位或 (局部_状态, 参数_按钮状态))
.如果结束
发送消息_API (集_工具栏句柄, #TB_SETSTATE, 取按钮ID (参数_按钮索引), 局部_状态)



.子程序 去除状态, 空白型, , 从按钮的存在状态中去除指定状态值。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_按钮状态, 整数型, 可空, 可以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。默认值为0。

.局部变量 局部_状态, 整数型, , , 

赋值 (局部_状态, 发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))
.如果 (等于 (参数_按钮状态, #禁止))
    .如果真 (等于 (位与 (局部_状态, #禁止), 0))
        赋值 (局部_状态, 位或 (局部_状态, 参数_按钮状态))
    .如果真结束
    
.否则
    .如果真 (不等于 (位与 (局部_状态, 参数_按钮状态), 0))
        赋值 (局部_状态, 位异或 (局部_状态, 参数_按钮状态))
    .如果真结束
    
.如果结束
发送消息_API (集_工具栏句柄, #TB_SETSTATE, 取按钮ID (参数_按钮索引), 局部_状态)


.子程序 取状态, 整数型, , 取回指定按钮的状态，状态值为 0 或者以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 可以用“位与”命令来判断指定的状态值是否被置位，如：“如果真 (位与 (工具条1.取状态 (0)，#禁止) = #禁止)”语句即可判断工具条1的第一个按钮是否已被禁止。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

返回 (发送消息_API (集_工具栏句柄, #TB_GETSTATE, 取按钮ID (参数_按钮索引), 0))


.子程序 判断状态, 逻辑型, , 判断按钮是否有某状态。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_状态类型, 整数型, , 只能为下列常量的其中一个。 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。

.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_状态类型, 1))
    赋值 (局部_类型, #TB_ISBUTTONCHECKED)
.判断 (等于 (参数_状态类型, 2))
    赋值 (局部_类型, #TB_ISBUTTONPRESSED)
.判断 (等于 (参数_状态类型, 4))
    赋值 (局部_类型, #TB_ISBUTTONENABLED)
.判断 (等于 (参数_状态类型, 8))
    赋值 (局部_类型, #TB_ISBUTTONHIDDEN)
.判断 (等于 (参数_状态类型, 16))
    赋值 (局部_类型, #TB_ISBUTTONINDETERMINATE)
.默认
    
.判断结束
赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, 局部_类型, 取按钮ID (参数_按钮索引), 0))
.如果真 (等于 (参数_状态类型, 8))
    返回 (等于 (局部_返回值, 0))
.如果真结束
返回 (不等于 (局部_返回值, 0))

.子程序 删除按钮, 空白型, , 删除工具栏上的一个按钮
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

发送消息_API (集_工具栏句柄, #TB_DELETEBUTTON, 参数_按钮索引, 0)


.子程序 取标题, 文本型, ,  取回指定按钮的标题文本。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_标题, 文本型, , , 
.局部变量 局部_数据, 字节集, , , 
.局部变量 局部_ID, 整数型, , , 

赋值 (局部_ID, 取按钮ID (参数_按钮索引))
.如果 (集_外部控件)
    赋值 (局部_长度, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 0))
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 局部_长度))
    .如果 (不等于 (发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 集_外部指针), -1))
        赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 局部_长度))
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (到文本 (局部_数据))
    .否则
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (“”)
    .如果结束
    
.否则
    赋值 (局部_长度, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 0))
    赋值 (局部_标题, 取空白文本 (局部_长度))
    赋值 (集_数据地址, 取数据地址_文本 (局部_标题, 局部_标题, 0))
    .如果 (不等于 (发送消息_API (集_工具栏句柄, #TB_GETBUTTONTEXTA, 局部_ID, 集_数据地址), -1))
        返回 (局部_标题)
    .否则
        返回 (“”)
    .如果结束
    
.如果结束


.子程序 置标题, 逻辑型, , 设置指定按钮的标题文本。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_标题, 文本型, 可空, 默认为空文本。

.局部变量 局部_数据, 整数型, , , 
.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_结构大小, 整数型, , , 

.如果真 (是否为空 (参数_标题))
    赋值 (参数_标题, “”)
.如果真结束
.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部指针2, 集_外部操作.分配外部指针 (集_进程句柄, 相加 (取文本长度 (参数_标题), 1)))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_TEXT, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.pszText, 集_外部指针2)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    赋值 (局部_数据, 取数据地址_文本 (参数_标题, 参数_标题, 相加 (取文本长度 (参数_标题), 1)))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针2, 局部_数据, 相加 (取文本长度 (参数_标题), 1))
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.pszText, 集_外部按钮信息.pszText, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 24), 集_数据地址, 32)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针2)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_TEXT, #TBIF_BYINDEX))
    赋值 (集_按钮信息.pszText, 参数_标题)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
    
.如果结束


.子程序 取类型, 整数型, , 取回指定按钮的类型，返回值为以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

发送消息_TBBUTTON (集_工具栏句柄, #TB_GETBUTTON, 参数_按钮索引, 集_单一按钮)
.判断开始 (并且 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_CHECK), #TBSTYLE_CHECK), 等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_GROUP), 0)))
    返回 (1)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_CHECKGROUP), #TBSTYLE_CHECKGROUP))
    返回 (2)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_DROPDOWN), #TBSTYLE_DROPDOWN))
    返回 (3)
.判断 (等于 (位与 (集_单一按钮.fsStyle, #TBSTYLE_SEP), #TBSTYLE_SEP))
    返回 (4)
.默认
    返回 (0)
.判断结束


.子程序 置类型, 逻辑型, , 设置按钮类型。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_类型, 整数型, , 可以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。

.局部变量 局部_类型, 整数型, , , 
.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_数据, 整数型, , , 


.判断开始 (等于 (参数_类型, 0))
    赋值 (局部_类型, #TBSTYLE_BUTTON)
.判断 (等于 (参数_类型, 1))
    赋值 (局部_类型, #TBSTYLE_CHECK)
.判断 (等于 (参数_类型, 2))
    赋值 (局部_类型, #TBSTYLE_CHECKGROUP)
.判断 (等于 (参数_类型, 3))
    赋值 (局部_类型, #TBSTYLE_DROPDOWN)
.判断 (等于 (参数_类型, 4))
    赋值 (局部_类型, #TBSTYLE_SEP)
.默认
    
.判断结束
.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_STYLE, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.fsStyle, 局部_类型)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    赋值 (集_数据地址, 取数据地址_字节 (集_外部按钮信息.fsStyle, 集_外部按钮信息.fsStyle, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 17), 集_数据地址, 1)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_STYLE, #TBIF_BYINDEX))
    赋值 (集_按钮信息.fsStyle, 局部_类型)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
    
.如果结束


.子程序 取图片, 整数型, , 取回指定按钮的图片索引，图片索引指向图片组属性中的某一图片，从 0 开始，-1 表示本按钮无图片标志。如果按钮是一个分割条则返回其宽度。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。

返回 (发送消息_API (集_工具栏句柄, #TB_GETBITMAP, 取按钮ID (参数_按钮索引), 0))

.子程序 置图片, 逻辑型, , 设置指定按钮的图片索引，图片索引指向图片组属性中的某一图片，从 0 开始，-1 表示本按钮无图片标志。如果按钮是一个分割条则设置其宽度。
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_图片索引, 整数型, , 索引从0开始。-1表示无图片。如按钮为分割条则此参数为分割条宽度。

.局部变量 局部_返回值, 整数型, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 32))
    赋值 (集_外部按钮信息.cbSize, 32)
    赋值 (集_外部按钮信息.dwMask, 相加 (#TBIF_IMAGE, #TBIF_BYINDEX))
    赋值 (集_外部按钮信息.iImage, 参数_图片索引)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.cbSize, 集_外部按钮信息.cbSize, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 32)
    赋值 (集_数据地址, 取数据地址_整数 (集_外部按钮信息.iImage, 集_外部按钮信息.iImage, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 12), 集_数据地址, 4)
    赋值 (局部_返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_外部指针))
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    返回 (不等于 (局部_返回值, 0))
.否则
    赋值 (集_按钮信息.cbSize, 32)
    赋值 (集_按钮信息.dwMask, 相加 (#TBIF_IMAGE, #TBIF_BYINDEX))
    赋值 (集_按钮信息.iImage, 参数_图片索引)
    返回 (不等于 (发送消息_TBBUTTONINFO (集_工具栏句柄, #TB_SETBUTTONINFOA, 参数_按钮索引, 集_按钮信息), 0))
    
.如果结束


.子程序 取按钮大小, 空白型, , 取得按钮的宽度和高度。
.参数 参数_宽度, 整数型, 参考 可空, 
.参数 参数_高度, 整数型, 参考 可空, 

.局部变量 局部_大小, 整数型, , , 

赋值 (局部_大小, 发送消息_API (集_工具栏句柄, #TB_GETBUTTONSIZE, 0, 0))
赋值 (参数_宽度, 求余数 (局部_大小, 65536))
赋值 (参数_高度, 整除 (局部_大小, 65536))

.子程序 置按钮大小, 逻辑型, , 设置按钮的宽度和高度。
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

.局部变量 返回值, 整数型, , , 

赋值 (返回值, 发送消息_API (集_工具栏句柄, #TB_SETBUTTONSIZE, 0, 相加 (参数_宽度, 相乘 (参数_高度, 65536))))
发送消息_API (集_工具栏句柄, #TB_AUTOSIZE, 0, 0)
返回 (不等于 (返回值, 0))

.子程序 取按钮矩形, 空白型, , 取按钮在工具条里的矩形位置。，
.参数 参数_按钮索引, 整数型, , 索引从0开始。0 为按钮一，1 为按钮二，如此类推。
.参数 参数_左上横, 整数型, 参考 可空, 左边
.参数 参数_左上纵, 整数型, 参考 可空, 顶边
.参数 参数_右下横, 整数型, 参考 可空, 右边
.参数 参数_右下纵, 整数型, 参考 可空, 底边

.局部变量 局部_矩形, RECT, , , 
.局部变量 局部_数据, 字节集, , , 

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 16))
    赋值 (集_数据地址, 取数据地址_矩形 (局部_矩形, 局部_矩形, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 16)
    发送消息_API (集_工具栏句柄, #TB_GETITEMRECT, 参数_按钮索引, 集_外部指针)
    赋值 (局部_数据, 集_外部操作.读外部指针数据 (集_进程句柄, 集_外部指针, 16))
    拷贝内存_矩形 (局部_矩形, 局部_数据, 16)
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
.否则
    赋值 (集_数据地址, 取数据地址_矩形 (局部_矩形, 局部_矩形, 0))
    发送消息_API (集_工具栏句柄, #TB_GETITEMRECT, 参数_按钮索引, 集_数据地址)
.如果结束
赋值 (参数_左上横, 局部_矩形.左边)
赋值 (参数_左上纵, 局部_矩形.顶边)
赋值 (参数_右下横, 局部_矩形.右边)
赋值 (参数_右下纵, 局部_矩形.底边)

.子程序 置标题为提示文本, 空白型, , 使标题不可见，标题成为提示文本
发送消息_API (集_工具栏句柄, #TB_SETMAXTEXTROWS, 0, 0)
发送消息_API (集_工具栏句柄, #TB_AUTOSIZE, 0, 0)

.子程序 插入按钮, 整数型, , 将指定按钮插入到工具条中，返回插入后该按钮所处的位置。失败返回-1。
.参数 参数_插入位置, 整数型, 可空, 指定新按钮插入的位置索引，0 为栏目一，1 为栏目二，如此类推。如果提供 -1 ，则插入到工具条的尾部。如果本参数被省略，默认值为 -1 。
.参数 参数_类型, 整数型, 可空, 按钮的类型可以为以下常量值之一： 0: #普通按钮； 1: #多选按钮； 2: #单选按钮； 3: #下拉按钮； 4: #分隔条。 如果本参数被省略，默认值为“#普通按钮”。
.参数 参数_图片索引, 整数型, 可空, 图片索引用于指定图片组属性中的某张图片，该图片将被显示在按钮表面。索引值从 0 开始，-1 表示无图片。如果本参数被省略，默认值为 -1 。如果按钮是一个分割条则设置其宽度。
.参数 参数_标题, 文本型, 可空, 本参数指定显示在按钮下的标题文本。如果被省略，默认值为空文本。
.参数 参数_按钮状态, 整数型, 可空, 本参数指定按钮的存在状态。状态值为 0 或者以下常量值任意组合(相加)： 1: #选中； 2: #按下； 4: #禁止； 8: #隐藏； 16: #变灰。 其中“选中”状态在类型为多选按钮或单选按钮时有效，“按下”状态在类型为普通按钮时有效。如果本参数被省略，默认值为 0 。

.局部变量 局部_类型, 整数型, , , 
.局部变量 局部_状态, 整数型, , , 


.如果真 (是否为空 (参数_插入位置))
    赋值 (参数_插入位置, -1)
.如果真结束
.如果真 (是否为空 (参数_图片索引))
    赋值 (参数_图片索引, -1)
.如果真结束

.判断开始 (等于 (参数_类型, 0))
    赋值 (局部_类型, #TBSTYLE_BUTTON)
.判断 (等于 (参数_类型, 1))
    赋值 (局部_类型, #TBSTYLE_CHECK)
.判断 (等于 (参数_类型, 2))
    赋值 (局部_类型, #TBSTYLE_CHECKGROUP)
.判断 (等于 (参数_类型, 3))
    赋值 (局部_类型, #TBSTYLE_DROPDOWN)
.判断 (等于 (参数_类型, 4))
    赋值 (局部_类型, #TBSTYLE_SEP)
.默认
    
.判断结束

.如果 (等于 (参数_按钮状态, 0))
    赋值 (局部_状态, 4)
.否则
    .如果 (等于 (位与 (参数_按钮状态, 4), 4))
        赋值 (局部_状态, 位异或 (参数_按钮状态, 4))
    .否则
        赋值 (局部_状态, 位或 (参数_按钮状态, 4))
    .如果结束
    
.如果结束

.如果 (集_外部控件)
    赋值 (集_进程句柄, 集_外部操作.打开进程 (集_工具栏句柄))
    赋值 (集_外部指针, 集_外部操作.分配外部指针 (集_进程句柄, 18))
    赋值 (集_单一按钮.fsStyle, 局部_类型)
    赋值 (集_单一按钮.iBitmap, 参数_图片索引)
    赋值 (集_单一按钮.fsState, 局部_状态)
    赋值 (集_单一按钮.idCommand, 集_按钮ID)
    赋值 (集_按钮ID, 相加 (集_按钮ID, 1))
    赋值 (集_数据地址, 取数据地址_整数 (集_单一按钮.iBitmap, 集_单一按钮.iBitmap, 0))
    集_外部操作.写进程内存 (集_进程句柄, 集_外部指针, 集_数据地址, 4)
    赋值 (集_数据地址, 取数据地址_整数 (集_单一按钮.idCommand, 集_单一按钮.idCommand, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 4), 集_数据地址, 4)
    赋值 (集_数据地址, 取数据地址_字节 (集_单一按钮.fsState, 集_单一按钮.fsState, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 8), 集_数据地址, 1)
    赋值 (集_数据地址, 取数据地址_字节 (集_单一按钮.fsStyle, 集_单一按钮.fsStyle, 0))
    集_外部操作.写进程内存 (集_进程句柄, 相加 (集_外部指针, 9), 集_数据地址, 1)
    .如果真 (等于 (发送消息_API (集_工具栏句柄, #TB_INSERTBUTTON, 参数_插入位置, 集_外部指针), 0))
        集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
        集_外部操作.结束操作 (集_进程句柄)
        返回 (-1)
    .如果真结束
    集_外部操作.销毁外部指针 (集_进程句柄, 集_外部指针)
    集_外部操作.结束操作 (集_进程句柄)
    
.否则
    赋值 (集_单一按钮.fsStyle, 局部_类型)
    赋值 (集_单一按钮.iBitmap, 参数_图片索引)
    赋值 (集_单一按钮.fsState, 局部_状态)
    赋值 (集_单一按钮.idCommand, 集_按钮ID)
    赋值 (集_按钮ID, 相加 (集_按钮ID, 1))
    .如果真 (等于 (发送消息_TBBUTTON (集_工具栏句柄, #TB_INSERTBUTTON, 参数_插入位置, 集_单一按钮), 0))
        返回 (-1)
    .如果真结束
    
.如果结束
置标题 (参数_插入位置, 参数_标题)
返回 (选择 (等于 (参数_插入位置, -1), 相减 (取按钮数 (), 1), 参数_插入位置))


.子程序 取图片组句柄, 整数型, , 返回图片组句柄。
.参数 参数_图片组类型, 整数型, 可空, 0.#图片组_通常，1.#图片组_热点，2.图片组_禁止。默认为0.#图片组_通常

.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_图片组类型, #图片组_热点))
    赋值 (局部_类型, #TB_GETHOTIMAGELIST)
.判断 (等于 (参数_图片组类型, #图片组_禁止))
    赋值 (局部_类型, #TB_GETDISABLEDIMAGELIST)
.默认
    赋值 (局部_类型, #TB_GETIMAGELIST)
.判断结束
返回 (发送消息_API (集_工具栏句柄, 局部_类型, 0, 0))

.子程序 置图片组句柄, 整数型, , 返回之前的图片组句柄。
.参数 参数_图片组句柄, 整数型, , 
.参数 参数_图片组类型, 整数型, 可空, 0.#图片组_通常，1.#图片组_热点，2.图片组_禁止。默认为0.#图片组_通常

.局部变量 局部_类型, 整数型, , , 

.判断开始 (等于 (参数_图片组类型, #图片组_热点))
    赋值 (局部_类型, #TB_SETHOTIMAGELIST)
.判断 (等于 (参数_图片组类型, #图片组_禁止))
    赋值 (局部_类型, #TB_SETDISABLEDIMAGELIST)
.默认
    赋值 (局部_类型, #TB_SETIMAGELIST)
.判断结束
返回 (发送消息_API (集_工具栏句柄, 局部_类型, 0, 参数_图片组句柄))

.子程序 属性_位置, 整数型, , 如果未提供参数则为取位置，提供了参数则为置位置。#位置_ 开头常量
.参数 参数_位置, 整数型, 可空, 0.#位置_顶边，1.#位置_底边，2.#位置_自由

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_位置))
    .判断开始 (并且 (等于 (位与 (局部_风格, #CCS_TOP), #CCS_TOP), 等于 (位与 (局部_风格, #CCS_NOMOVEY), 0)))
        返回 (#位置_顶边)
    .判断 (等于 (位与 (局部_风格, #CCS_BOTTOM), #CCS_BOTTOM))
        返回 (#位置_底边)
    .判断 (并且 (等于 (位与 (局部_风格, #CCS_TOP), 0), 等于 (位与 (局部_风格, #CCS_NOPARENTALIGN), #CCS_NOPARENTALIGN)))
        返回 (#位置_自由)
    .默认
        返回 (-1)
    .判断结束
    
.否则
    .如果真 (等于 (位与 (局部_风格, #CCS_TOP), #CCS_TOP))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_TOP))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NOMOVEY), #CCS_NOMOVEY))
        赋值 (局部_风格, 位异或 (局部_风格, 2))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NORESIZE), #CCS_NORESIZE))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_NORESIZE))
    .如果真结束
    .如果真 (等于 (位与 (局部_风格, #CCS_NOPARENTALIGN), #CCS_NOPARENTALIGN))
        赋值 (局部_风格, 位异或 (局部_风格, #CCS_NOPARENTALIGN))
    .如果真结束
    
    .判断开始 (等于 (参数_位置, 0))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_TOP))
    .判断 (等于 (参数_位置, 1))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_BOTTOM))
    .判断 (等于 (参数_位置, 2))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_NOPARENTALIGN, #CCS_NORESIZE, #CCS_NOMOVEY))
    .默认
        
    .判断结束
    返回 (置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格))
.如果结束


.子程序 属性_平面, 逻辑型, , 如果未提供参数则为返回是否平面，提供了参数则为置是否平面。
.参数 参数_平面, 逻辑型, 可空, 真为平面按钮，假为突起按钮。

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_平面))
    返回 (选择 (等于 (位与 (局部_风格, #TBSTYLE_FLAT), #TBSTYLE_FLAT), 真, 假))
.否则
    .判断开始 (等于 (参数_平面, 真))
        赋值 (局部_风格, 位或 (局部_风格, #TBSTYLE_FLAT))
    .默认
        .如果真 (等于 (位与 (局部_风格, #TBSTYLE_FLAT), #TBSTYLE_FLAT))
            赋值 (局部_风格, 位异或 (局部_风格, #TBSTYLE_FLAT))
        .如果真结束
        
    .判断结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束





.子程序 属性_上边线, 逻辑型, , 如果未提供参数则为返回是否上边线，提供了参数则为置是否上边线
.参数 参数_上边线, 逻辑型, 可空, 真为显示上边线，假为不显示

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_上边线))
    返回 (选择 (等于 (位与 (局部_风格, #CCS_NODIVIDER), #CCS_NODIVIDER), 真, 假))
.否则
    .判断开始 (等于 (参数_上边线, 假))
        赋值 (局部_风格, 位或 (局部_风格, #CCS_NODIVIDER))
    .默认
        .如果真 (等于 (位与 (局部_风格, #CCS_NODIVIDER), #CCS_NODIVIDER))
            赋值 (局部_风格, 位异或 (局部_风格, #CCS_NODIVIDER))
        .如果真结束
        
    .判断结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束


.子程序 属性_允许多行, 逻辑型, , 如果未提供参数则为返回是否允许多行，提供了参数则为置是否允许多行
.参数 参数_允许多行, 逻辑型, 可空, 真为允许多行，假为不允许。

.局部变量 局部_风格, 整数型, , , 

赋值 (局部_风格, 取窗口风格_API (集_工具栏句柄, #GWL_STYLE))
.如果 (是否为空 (参数_允许多行))
    返回 (选择 (等于 (位与 (局部_风格, #TBSTYLE_WRAPABLE), #TBSTYLE_WRAPABLE), 真, 假))
.否则
    .如果 (等于 (参数_允许多行, 假))
        .如果真 (等于 (位与 (局部_风格, #TBSTYLE_WRAPABLE), #TBSTYLE_WRAPABLE))
            赋值 (局部_风格, 位异或 (局部_风格, #TBSTYLE_WRAPABLE))
        .如果真结束
        
    .否则
        赋值 (局部_风格, 位或 (局部_风格, #TBSTYLE_WRAPABLE))
    .如果结束
    置窗口风格_API (集_工具栏句柄, #GWL_STYLE, 局部_风格)
    重画窗口_API (集_工具栏句柄, 0, 1)
    返回 (真)
.如果结束


.类模块 外部控件操作类, , , 

.程序集变量 映射文件, 内存映射数据9X, , "0", 
.程序集变量 系统类别, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (系统类别, 取操作系统类别 ())


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 打开进程, 整数型, 公开, 成功就返回进程句柄
.参数 对象句柄, 整数型, , 

.局部变量 进程句柄, 整数型, , , 
.局部变量 dwProcessID, 整数型, , , 

GetWindowThreadProcessId (对象句柄, dwProcessID) ' 获取与指定窗口关联在一起的一个线程和进程标识符
赋值 (进程句柄, OpenProcess (#PROCESS_ALL_ACCESS, 假, dwProcessID)) ' 打开一个现有进程的句柄 ' 位或 (#STANDARD_RIGHTS_REQUIRED, #SYNCHRONIZE, 4095)
 ' .如果 (等于 (系统类别, 3))
     ' lpListItemRemote ＝ VirtualAllocEx (进程句柄, 0, 数据长度, #MEM_COMMIT, #PAGE_READWRITE)  ' 在目标进程中分配内存空间。
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' ' 如果真 (SendMessage (对象句柄, 消息号, 索引号, lpListItemRemote) ＝ 0)如果真 ()
     ' ' 返回 (0)
     ' ' VirtualFreeEx (进程句柄, lpListItemRemote, 0, #MEM_RELEASE)  ' 在目标进程中释放内存空间。
     ' ' CloseHandle (进程句柄)  ' 关闭一个内核对象。
     ' ' 返回 (真)
.否则
    
     ' 映射文件 ＝ CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 数据长度, 0)  ' 创建一个新的文件映射对象
     ' lpListItemRemote ＝ MapViewOfFile (映射文件, #FILE_MAP_ALL_ACCESS, 0, 0, 0)  ' 将一个文件映射对象映射到当前应用程序的地址空间
     ' 如果真 (WriteProcessMemory (进程句柄, lpListItemRemote, 数据地址, 数据长度, 0) ＝ 0)  ' 写进程内存如果真 ()
     ' 返回 (0)
     ' .如果真 (等于 (SendMessage (#LV_SETITEMSTATE, , ), 0))
         ' ' 返回 (假)
    .如果真结束
     ' ' UnmapViewOfFile (lpListItemRemote)  ' 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
     ' ' CloseHandle (映射文件)  ' 关闭一个内核对象。
.如果结束

返回 (进程句柄)

.子程序 写进程内存, 逻辑型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 数据指针, 整数型, , 
.参数 数据地址, 整数型, , 
.参数 数据长度, 整数型, , 

返回 (不等于 (WriteProcessMemory (进程句柄, 数据指针, 数据地址, 数据长度, 0), 0)) ' 写进程内存

.子程序 结束操作, 空白型, 公开, 
.参数 进程句柄, 整数型, , 

.如果真 (不等于 (进程句柄, 0))
    CloseHandle (进程句柄) ' 关闭一个内核对象。
    清除数组 (映射文件)
    赋值 (进程句柄, 0)
.如果真结束


.子程序 读外部指针数据, 字节集, 公开, 
.参数 进程句柄, 整数型, , 
.参数 外部程序指针, 整数型, , 
.参数 读取数据大小, 整数型, , 

.局部变量 szBuf, 字节集, , , 

赋值 (szBuf, 取空白字节集 (读取数据大小))
ReadProcessMemory (进程句柄, 外部程序指针, szBuf, 读取数据大小, 0)
返回 (szBuf)


.子程序 分配外部指针, 整数型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 数据长度, 整数型, , 分配的数据长度

.局部变量 TEMP, 内存映射数据9X, , , 

.判断开始 (等于 (系统类别, 3))
    返回 (VirtualAllocEx (进程句柄, 0, 数据长度, #MEM_COMMIT, #PAGE_READWRITE))
.默认
    赋值 (TEMP.映射文件号, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 数据长度, 0)) ' 创建一个新的文件映射对象
    赋值 (TEMP.指针, MapViewOfFile (TEMP.映射文件号, #FILE_MAP_ALL_ACCESS, 0, 0, 0)) ' 将一个文件映射对象映射到当前应用程序的地址空间
    重定义数组 (映射文件, 真, 相加 (取数组成员数 (映射文件), 1))
    赋值 (映射文件 [取数组成员数 (映射文件)], TEMP)
    返回 (TEMP.指针)
.判断结束


.子程序 销毁外部指针, 空白型, 公开, 
.参数 进程句柄, 整数型, , 
.参数 外部指针, 整数型, , 

.局部变量 成员数, 整数型, , , 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (系统类别, 3))
    VirtualFreeEx (进程句柄, 外部指针, 0, #MEM_RELEASE) ' 在目标进程中释放内存空间。
.默认
    赋值 (成员数, 取数组成员数 (映射文件))
    .变量循环首 (1, 成员数, 1, I)
        .如果真 (等于 (映射文件 [I], 指针, 外部指针))
            UnmapViewOfFile (外部指针) ' 在当前应用程序的内存地址空间解除对一个文件映射对象的映射
            CloseHandle (映射文件 [I], 映射文件号)
            删除成员 (映射文件, I, )
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
.判断结束


.类模块 树型框操作基类, , , 

.程序集变量 集_句柄组, 整数型, , "0", 
.程序集变量 集_单一项目, TVITEMEX, , , 
.程序集变量 集_单一外部项目, TVITEMEX2, , , 
.程序集变量 集_外部进程句柄, 整数型, , , 
.程序集变量 集_外部数据地址1, 整数型, , , 
.程序集变量 集_外部数据地址2, 整数型, , , 
.程序集变量 集_项目地址, 整数型, , , 
.程序集变量 集_树型框句柄, 整数型, , , 
.程序集变量 外部控件操作, 外部控件操作类, , , 
.程序集变量 集_外部控件, 逻辑型, , , 
.程序集变量 集_自动更新, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_单一项目.cchTextMax, 260)
赋值 (集_单一外部项目.cchTextMax, 260)
赋值 (集_自动更新, 真)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除数组 (集_句柄组)

.子程序 _初始化类A, 逻辑型, , 
.参数 目标树形框句柄, 整数型, , 

.判断开始 (等于 (到大写 (取类名 (目标树形框句柄)), “SYSTREEVIEW32”))
    赋值 (集_树型框句柄, 目标树形框句柄)
    遍历句柄 ()
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取类名, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 缓冲区, 文本型, , , 

赋值 (缓冲区, 取空白文本 (256))
取窗口类名称 (窗口句柄, 缓冲区, 256)
返回 (删首尾空 (缓冲区))

.子程序 更新数据1, 空白型, , 
遍历句柄 ()

.子程序 取数值变量地址, 整数型, , 
.参数 数值变量, 字节型, 参考, 

返回 (取数据地址2 (数值变量, 数值变量, 0))

.子程序 数据_取项目数, 整数型, 公开, 返回树型框中所有项目的数目。
返回 (发送消息1 (集_树型框句柄, #TVM_GETCOUNT, 0, 0))

.子程序 数据_取缩进层次, 整数型, 公开, 返回指定项目所处缩进层次，层次值从1开始。如果未找到指定项目，返回 0 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 层次, 空白型, , , 
.局部变量 父项目, 空白型, , , 


.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (0)
.默认
    赋值 (层次, 1)
    赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 集_句柄组 [相加 (项目索引, 1)]))
    .判断循环首 (不等于 (父项目, 0))
        赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 父项目))
        赋值 (层次, 相加 (层次, 1))
    .判断循环尾 ()
    返回 (层次)
.判断结束


.子程序 数据_取项目文本, 文本型, 公开, 返回指定项目的文本。如果该项目不存在，将返回空文本。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 缓冲区, 文本型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (“”)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 260))
        赋值 (集_单一外部项目.pszText, 集_外部数据地址2)
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_TEXT)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (缓冲区, 到文本 (外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址2, 260)))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (缓冲区)
    .默认
        赋值 (集_单一项目.pszText, 取空白文本 (260))
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_TEXT)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (删首尾空 (集_单一项目.pszText))
    .判断结束
    
.判断结束


.子程序 数据_取图片, 整数型, 公开, 返回指定项目的图片索引。如果该项目不存在，将返回 -1 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (-1)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_IMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.iImage)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_IMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.iImage)
    .判断结束
    
.判断结束


.子程序 数据_取选中图片, 整数型, 公开, 返回指定项目被选中后的图片索引。如果该项目不存在，将返回 -1 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (-1)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.iSelectedImage)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.iSelectedImage)
    .判断结束
    
.判断结束


.子程序 数据_取项目数值, 整数型, 公开, 返回与指定项目相关联的数值。如果该项目不存在，将返回 0 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (0)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_PARAM)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.lParam)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_PARAM)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.lParam)
    .判断结束
    
.判断结束


.子程序 数据_置图片, 逻辑型, 公开, 设置在指定项目首部所显示图片的索引。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

 ' 参数<1>的名称为“项目索引”，类型为“整数型（int）”。0 为项目一，1 为项目二，如此类推。
 ' 参数<2>的名称为“图片索引”，类型为“整数型（int）”。图片索引用于指定图片组属性中的某张图片，从 0 开始。
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_IMAGE)
        赋值 (集_单一外部项目.iImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_IMAGE)
        赋值 (集_单一项目.iImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
        
    .判断结束
    
    
.判断结束


.子程序 数据_置选中图片, 逻辑型, 公开, 设置指定项目被选中后所显示图片的索引。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 图片索引, 整数型, , 图片索引用于指定图片组属性中的某张图片，从 0 开始。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_单一外部项目.iSelectedImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_SELECTEDIMAGE)
        赋值 (集_单一项目.iSelectedImage, 图片索引)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
        
    .判断结束
    
    
.判断结束


.子程序 数据_置项目数值, 逻辑型, 公开, 设置与指定项目相关联的数值。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 欲置入的项目数值, 整数型, 可空, 可以被省略。该数值与指定项目相关联。如果本参数被省略，默认值为 0 。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_PARAM)
        赋值 (集_单一外部项目.lParam, 欲置入的项目数值)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_PARAM)
        赋值 (集_单一项目.lParam, 欲置入的项目数值)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.默认
    返回 (假)
.判断结束


.子程序 数据_置项目文本, 逻辑型, 公开, 设置指定项目的文本。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 欲置入的项目文本, 文本型, , 
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 相加 (取文本长度 (欲置入的项目文本), 1)))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_TEXT)
        赋值 (集_单一外部项目.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        赋值 (当前项目, 取数据地址3 (欲置入的项目文本, 欲置入的项目文本, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (欲置入的项目文本), 1))
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
         ' 写到内存 (TEMP, 集_项目地址, 40)
        返回 (不等于 (当前项目, 0))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_TEXT)
        赋值 (集_单一项目.pszText, 欲置入的项目文本)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.默认
    返回 (假)
.判断结束


.子程序 动作_保证显示, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_ENSUREVISIBLE, 0, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 状态_扩展, 空白型, 公开, 将指打开指定项目的下属分枝。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_EXPAND, #TVE_EXPAND, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 状态_收缩, 空白型, 公开, 缩回指定项目的下属分枝。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    发送消息1 (集_树型框句柄, #TVM_EXPAND, #TVE_COLLAPSE, 集_句柄组 [相加 (项目索引, 1)])
.如果真结束


.子程序 数据_加入项目_API方式加入, 整数型, 公开, 将单个或一批项目加入到树型框中，如果仅加入一个项目，成功返回加入后该项目所处的位置，失败返回 -1 。如果成批加入项目，成功返回 0 ，失败返回 -1 。成批加入项目可以用作一次性快速加入大量项目到树型框中。
.参数 父项目索引, 整数型, 可空, 可以被省略。指定欲加入项目所处的父项目，0 为项目一，1 为项目二，如此类推。如果没有父项目（即欲加入项目为顶层项目），请提供值 -1 。如果本参数被省略，默认值为 -1 。
.参数 项目数据1, 项目数据, 可空, 用于只加入一个项目，如欲批量加入，请留空
.参数 项目数据2, 项目数据, 可空 数组, 用于批量加入项目
.参数 加入方式, 整数型, 可空, 可以被省略。默认为 #树形框插入项目_在列表尾部插入
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。
.参数 是否使用高速插入, 逻辑型, 可空, 可以被省略。当使用高速插入时，最高可提速5倍。默认为真高速加入。

.局部变量 成员数, 整数型, , , 
.局部变量 计次, 空白型, , , 
.局部变量 数据地址, 整数型, , , 
.局部变量 插入项目, TVINSERTSTRUCT, , , 
.局部变量 插入项目2, TVINSERTSTRUCT2, , , 
.局部变量 当前项目, 整数型, , , 
.局部变量 空白数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (等于 (是否为空 (父项目索引), 假), 小于或等于 (相加 (父项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (父项目索引, 0)))
    连续赋值 (集_句柄组 [相加 (父项目索引, 1)], 插入项目.hParent, 插入项目2.hParent)
.如果真结束
.如果真 (或者 (是否为空 (加入方式), 大于 (加入方式, 4), 小于 (加入方式, 1)))
    赋值 (加入方式, #树形框插入项目_在列表尾部插入)
.如果真结束
.判断开始 (等于 (是否为空 (项目数据1), 假))
    .判断开始 (集_外部控件)
        赋值 (插入项目2.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目2.iImage, 项目数据1.图片索引)
        赋值 (插入项目2.iSelectedImage, 项目数据1.选中图片索引)
        赋值 (插入项目2.lParam, 项目数据1.项目数值)
        赋值 (插入项目2.mask, #TVIF_ALL)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 52))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 相加 (取文本长度 (项目数据1.项目文本), 1)))
        赋值 (插入项目2.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVINSERTSTRUCT2 (插入项目2, 插入项目2, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
        赋值 (当前项目, 取数据地址3 (项目数据1.项目文本, 项目数据1.项目文本, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据1.项目文本), 1))
        赋值 (当前项目, 发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (当前项目)
    .默认
        赋值 (插入项目.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目.pszText, 项目数据1.项目文本)
        赋值 (插入项目.iImage, 项目数据1.图片索引)
        赋值 (插入项目.iSelectedImage, 项目数据1.选中图片索引)
        赋值 (插入项目.lParam, 项目数据1.项目数值)
        赋值 (插入项目.mask, #TVIF_ALL)
        赋值 (数据地址, 取变量地址_TVINSERTSTRUCT (插入项目, 插入项目, 0))
        返回 (发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址))
    .判断结束
    
.判断 (等于 (是否为空 (项目数据2), 假))
    .如果真 (或者 (是否为空 (是否使用高速插入), 是否使用高速插入))
        发送消息1 (集_树型框句柄, #WM_SETREDRAW, 0, 0)
    .如果真结束
    赋值 (成员数, 取数组成员数 (项目数据2))
    .判断开始 (集_外部控件)
        赋值 (空白数据, 取空白字节集 (260))
        赋值 (插入项目2.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目2.mask, #TVIF_ALL)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 52))
        赋值 (集_外部数据地址2, 外部控件操作.分配外部指针 (集_外部进程句柄, 260))
        赋值 (插入项目2.pszText, 集_外部数据地址2)
        赋值 (集_项目地址, 取变量地址_TVINSERTSTRUCT2 (插入项目2, 插入项目2, 0))
        .判断开始 (等于 (加入方式, 2))
            赋值 (计次, 成员数)
            .判断循环首 (大于 (计次, 0))
                 ' 插入项目.pszText ＝ 项目数据2 [I].项目文本
                赋值 (插入项目2.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目2.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目2.lParam, 项目数据2 [计次], 项目数值)
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
                赋值 (当前项目, 取数据地址3 (项目数据2 [计次], 项目文本, 项目数据2 [计次], 项目文本, 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据2 [计次], 项目文本), 1))
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1)
                赋值 (当前项目, 取数据地址2 (空白数据 [1], 空白数据 [1], 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 260)
                赋值 (计次, 相减 (计次, 1))
            .判断循环尾 ()
        .默认
            .判断循环首 (小于 (计次, 成员数))
                赋值 (计次, 相加 (计次, 1))
                赋值 (插入项目2.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目2.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目2.lParam, 项目数据2 [计次], 项目数值)
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 52)
                赋值 (当前项目, 取数据地址3 (项目数据2 [计次], 项目文本, 项目数据2 [计次], 项目文本, 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 相加 (取文本长度 (项目数据2 [计次], 项目文本), 1))
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 集_外部数据地址1)
                赋值 (当前项目, 取数据地址2 (空白数据 [1], 空白数据 [1], 0))
                外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址2, 当前项目, 260)
            .判断循环尾 ()
            
        .判断结束
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址2)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        
    .默认
        赋值 (插入项目.hInsertAfter, 多项选择 (加入方式, #TVI_ROOT, #TVI_FIRST, #TVI_LAST, #TVI_SORT))
        赋值 (插入项目.mask, #TVIF_ALL)
        赋值 (数据地址, 取变量地址_TVINSERTSTRUCT (插入项目, 插入项目, 0))
        .判断开始 (等于 (加入方式, 2))
            赋值 (计次, 成员数)
            .判断循环首 (大于 (计次, 0))
                赋值 (插入项目.pszText, 项目数据2 [计次], 项目文本)
                赋值 (插入项目.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目.lParam, 项目数据2 [计次], 项目数值)
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址)
                赋值 (计次, 相减 (计次, 1))
            .判断循环尾 ()
        .默认
            .判断循环首 (小于 (计次, 成员数))
                赋值 (计次, 相加 (计次, 1))
                赋值 (插入项目.pszText, 项目数据2 [计次], 项目文本)
                赋值 (插入项目.iImage, 项目数据2 [计次], 图片索引)
                赋值 (插入项目.iSelectedImage, 项目数据2 [计次], 选中图片索引)
                赋值 (插入项目.lParam, 项目数据2 [计次], 项目数值)
                发送消息1 (集_树型框句柄, #TVM_INSERTITEMA, 0, 数据地址)
            .判断循环尾 ()
        .判断结束
        
        
    .判断结束
    .如果真 (或者 (是否为空 (是否使用高速插入), 是否使用高速插入))
        发送消息1 (集_树型框句柄, #WM_SETREDRAW, 1, 0)
    .如果真结束
    返回 (0)
.默认
    返回 (-1)
.判断结束


.子程序 数据_删除项目, 逻辑型, 公开, 删除树型框中的指定项目。成功返回真，失败返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.如果真结束
返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_DELETEITEM, 0, 集_句柄组 [相加 (项目索引, 1)]), 0))

.子程序 数据_清空, 空白型, 公开, 删除树型框中的所有项目。
发送消息1 (集_树型框句柄, #WM_SETREDRAW, 0, 0)
发送消息1 (集_树型框句柄, #TVM_DELETEITEM, 0, 0)
发送消息1 (集_树型框句柄, #WM_SETREDRAW, 1, 0)


.子程序 数据_取父项目, 整数型, 公开, 返回指定项目的父项目索引。如果该项目为顶层项目，将返回 -1 。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 计次1, 整数型, , , 
.局部变量 计次2, 整数型, , , 
.局部变量 父项目, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (计次2, 取数组成员数 (集_句柄组))
.如果真 (或者 (大于 (相加 (项目索引, 1), 计次2), 小于 (项目索引, 0)))
    返回 (-1)
.如果真结束
赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 集_句柄组 [相加 (项目索引, 1)]))
.判断开始 (等于 (父项目, 0))
    返回 (-1)
.默认
    .判断循环首 (小于 (计次1, 计次2))
        赋值 (计次1, 相加 (计次1, 1))
        .如果真 (等于 (集_句柄组 [计次1], 父项目))
            返回 (相减 (计次1, 1))
        .如果真结束
        
    .判断循环尾 ()
.判断结束
返回 (-1)

.子程序 状态_是否有子项目, 逻辑型, 公开, 如果指定项目存在子项目，返回真，否则返回假。如果本命令返回真，意味着指定项目的下一项即为此项目的第一个子项目。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 成员数, 整数型, , , 
.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_CHILDREN)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (集_单一外部项目.cChildren)
    .默认
        
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_CHILDREN)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (集_单一项目.cChildren)
        
    .判断结束
    
.判断结束


.子程序 状态_是否已扩展, 逻辑型, 公开, 如果树型框中的指定项目具有子项目并已扩展显示，返回真，否则返回假。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 成员数, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (成员数, 取数组成员数 (集_句柄组))
.如果真 (或者 (大于或等于 (相加 (项目索引, 1), 成员数), 小于 (项目索引, 0)))
     ' 如果索引超出范围，或索引是最后一个项目
    返回 (假)
.如果真结束
赋值 (成员数, 发送消息1 (集_树型框句柄, #TVM_GETITEMSTATE, 集_句柄组 [相加 (项目索引, 1)], 0))
返回 (等于 (位与 (成员数, #TVIS_EXPANDED), #TVIS_EXPANDED))


.子程序 样式_背景色_置, 空白型, 公开, 
.参数 背景颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETBKCOLOR, 0, 背景颜色)

.子程序 样式_背景色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETBKCOLOR, 0, 0))

.子程序 样式_项目间隔_置, 空白型, 公开, 
.参数 间隔距离, 整数型, 可空, 默认为16

.如果真 (是否为空 (间隔距离))
    赋值 (间隔距离, 16)
.如果真结束
发送消息1 (集_树型框句柄, #TVM_SETITEMHEIGHT, 间隔距离, 0)

.子程序 样式_项目间隔_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETITEMHEIGHT, 0, 0))

.子程序 样式_文本颜色_置, 空白型, 公开, 
.参数 文本颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETTEXTCOLOR, 0, 文本颜色)

.子程序 样式_文本颜色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETTEXTCOLOR, 0, 0))

.子程序 样式_连线颜色_置, 空白型, 公开, 
.参数 连线颜色, 整数型, , 

发送消息1 (集_树型框句柄, #TVM_SETLINECOLOR, 0, 连线颜色)

.子程序 样式_连线颜色_取, 整数型, 公开, 
返回 (发送消息1 (集_树型框句柄, #TVM_GETLINECOLOR, 0, 0))


.子程序 样式_使用复选框, 空白型, 公开, 
.如果真 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_CHECKBOXES), #TVS_CHECKBOXES))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_CHECKBOXES))
.如果真结束


.子程序 样式_使用热点跟踪, 空白型, 公开, 
.如果真 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_TRACKSELECT), #TVS_TRACKSELECT))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_TRACKSELECT))
.如果真结束



.子程序 样式_禁止滚动条, 逻辑型, 公开, 返回禁止的状态
.参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

.判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL), 或者 (禁止, 是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL))
    返回 (真)
.判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL), 取反 (禁止), 取反 (是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL))
    返回 (假)
.默认
    返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOSCROLL), #TVS_NOSCROLL))
.判断结束



.子程序 样式_禁止水平滚动条, 逻辑型, 公开, 返回禁止的状态
.参数 禁止, 逻辑型, 可空, 真为禁止，假为解除禁止。默认为真

.判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL), 或者 (禁止, 是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL))
    返回 (真)
.判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL), 取反 (禁止), 取反 (是否为空 (禁止))))
    设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL))
    返回 (假)
.默认
    返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_NOHSCROLL), #TVS_NOHSCROLL))
.判断结束



.子程序 样式_使用整行选择, 逻辑型, 公开, 要使用本功能，就不能使用显示连线。
.参数 是否使用, 逻辑型, 可空, 真为使用，假为不使用。默认为真。

.判断开始 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_HASLINES), #TVS_HASLINES))
    .判断开始 (并且 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT), 或者 (是否使用, 是否为空 (是否使用))))
        设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT))
        返回 (真)
    .判断 (并且 (等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT), 取反 (是否使用), 取反 (是否为空 (是否使用))))
        设置窗口信息 (集_树型框句柄, #GWL_STYLE, 位异或 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT))
        返回 (假)
    .默认
        返回 (不等于 (位与 (取窗口信息 (集_树型框句柄, #GWL_STYLE), #TVS_FULLROWSELECT), #TVS_FULLROWSELECT))
    .判断结束
    
.默认
    暂停 ()
    返回 (假)
.判断结束


.子程序 状态_是否选中, 逻辑型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        写到内存 (数据, 集_项目地址, 40)
        返回 (等于 (位与 (集_单一外部项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        返回 (等于 (位与 (集_单一项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
    .判断结束
    
.判断结束


.子程序 状态_选中项目, 逻辑型, 公开, 操作成功返回真
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否选中, 逻辑型, 可空, 可以被省略。设置项目的选中状态，默认为真。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 (假)
.默认
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, 相加 (#TVIF_STATE, #TVIF_HANDLE))
        .判断开始 (或者 (是否选中, 是否为空 (是否选中)))
            赋值 (集_单一外部项目.state, #TVIS_SELECTEDA)
        .默认
            赋值 (集_单一外部项目.state, #TVIS_NOSELECTEDA)
        .判断结束
        赋值 (集_单一外部项目.stateMask, #TVIS_STATEIMAGEMASK)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
        返回 (真)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, 相加 (#TVIF_STATE, #TVIF_HANDLE))
        .判断开始 (或者 (是否选中, 是否为空 (是否选中)))
            赋值 (集_单一项目.state, #TVIS_SELECTEDA)
        .默认
            赋值 (集_单一项目.state, #TVIS_NOSELECTEDA)
        .判断结束
        赋值 (集_单一项目.stateMask, #TVIS_STATEIMAGEMASK)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        返回 (不等于 (发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址), 0))
    .判断结束
    
.判断结束


.子程序 状态_加粗, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_单一外部项目.state, #TVIS_BOLD)
        赋值 (集_单一外部项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_单一项目.state, #TVIS_BOLD)
        赋值 (集_单一项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址)
    .判断结束
    
.如果真结束


.子程序 状态_取消加粗, 空白型, 公开, 将指定项目的标题取消加粗显示。
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前项目, 整数型, , , 
.局部变量 当前状态, 整数型, , , 0、普通，1、加粗，2、扩展，3、加粗+扩展

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.如果真 (并且 (小于或等于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 大于或等于 (项目索引, 0)))
    .判断开始 (集_外部控件)
        赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
        赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一外部项目.mask, #TVIF_STATE)
        赋值 (集_单一外部项目.state, 位取反 (#TVIS_BOLD))
        赋值 (集_单一外部项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_外部数据地址1)
        外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
        外部控件操作.结束操作 (集_外部进程句柄)
    .默认
        赋值 (集_单一项目.hItem, 集_句柄组 [相加 (项目索引, 1)])
        赋值 (集_单一项目.mask, #TVIF_STATE)
        赋值 (集_单一项目.state, 位取反 (#TVIS_BOLD))
        赋值 (集_单一项目.stateMask, #TVIS_BOLD)
        赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
        发送消息1 (集_树型框句柄, #TVM_SETITEMA, 0, 集_项目地址)
        
    .判断结束
    
    
    
.如果真结束


.子程序 数据_现行选中项_置, 空白型, 公开, 
.参数 项目索引, 整数型, , 0 为项目一，1 为项目二，如此类推。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
.判断开始 (或者 (大于 (相加 (项目索引, 1), 取数组成员数 (集_句柄组)), 小于 (项目索引, 0)))
    返回 ()
.默认
    发送消息1 (集_树型框句柄, #TVM_SELECTITEM, #TVGN_CARET, 集_句柄组 [相加 (项目索引, 1)])
.判断结束


.子程序 数据_取可显示数量, 整数型, 公开, 取当前在树形框的用户区中大约可以显示的项目数量
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

 ' TVM_GETVISIBLECOUNT
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
返回 (发送消息1 (集_树型框句柄, #TVM_GETVISIBLECOUNT, 0, 0))

.子程序 数据_取第一项索引, 整数型, 公开, 取在当前树形框中显示的第一条项目的索引。失败返回-1
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 目标句柄, 空白型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 

 ' TVM_GETVISIBLECOUNT
.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (目标句柄, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_FIRSTVISIBLE, 0))
赋值 (成员数, 取数组成员数 (集_句柄组))
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    .如果真 (等于 (目标句柄, 集_句柄组 [计次]))
        返回 (相减 (计次, 1))
    .如果真结束
    
.判断循环尾 ()
返回 (-1)

.子程序 数据_现行选中项_取, 整数型, 公开, 
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 当前句柄, 整数型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
赋值 (当前句柄, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_CARET, 0)) ' 先取第一个根
.如果真 (不等于 (当前句柄, 0))
    赋值 (成员数, 取数组成员数 (集_句柄组))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        .如果真 (等于 (集_句柄组 [计次], 当前句柄))
            返回 (相减 (计次, 1))
        .如果真结束
        
    .判断循环尾 ()
.如果真结束
返回 (-1)

.子程序 数据_取全部选中项, 变体型, 公开, 返回选中项索引数组
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为“置自动更新状态”方法所设置的状态。

.局部变量 选中项索引, 变体型, , , 
.局部变量 选中项索引A, 整数型, , "0", 
.局部变量 成员数, 整数型, , , 
.局部变量 成员数2, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 数据, 字节集, , , 

.如果真 (或者 (并且 (是否为空 (是否自动更新数据), 集_自动更新), 等于 (是否自动更新数据, 真)))
    遍历句柄 ()
.如果真结束
选中项索引.置类型 (#变体类型.数值型数组)
赋值 (成员数, 取数组成员数 (集_句柄组))
.判断开始 (集_外部控件)
    赋值 (集_单一外部项目.mask, #TVIF_STATE)
    赋值 (集_项目地址, 取变量地址_TVITEMEX2 (集_单一外部项目, 集_单一外部项目, 0))
    赋值 (集_外部进程句柄, 外部控件操作.打开进程 (集_树型框句柄))
    赋值 (集_外部数据地址1, 外部控件操作.分配外部指针 (集_外部进程句柄, 40))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        赋值 (集_单一外部项目.hItem, 集_句柄组 [计次])
        外部控件操作.写进程内存 (集_外部进程句柄, 集_外部数据地址1, 集_项目地址, 40)
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_外部数据地址1)
        赋值 (数据, 外部控件操作.读外部指针数据 (集_外部进程句柄, 集_外部数据地址1, 40))
        写到内存 (数据, 集_项目地址, 40)
        .如果真 (等于 (位与 (集_单一外部项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
            赋值 (成员数2, 相加 (取数组成员数 (选中项索引A), 1))
            重定义数组 (选中项索引A, 真, 成员数2)
            赋值 (选中项索引A [成员数2], 计次)
             ' 加入成员 (选中项索引A, I)
        .如果真结束
        
    .判断循环尾 ()
    外部控件操作.销毁外部指针 (集_外部进程句柄, 集_外部数据地址1)
    外部控件操作.结束操作 (集_外部进程句柄)
.默认
    赋值 (集_单一项目.mask, #TVIF_STATE)
    赋值 (集_项目地址, 取变量地址_TVITEMEX (集_单一项目, 集_单一项目, 0))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        赋值 (集_单一项目.hItem, 集_句柄组 [计次])
        发送消息1 (集_树型框句柄, #TVM_GETITEMA, 0, 集_项目地址)
        .如果真 (等于 (位与 (集_单一项目.state, #TVIS_SELECTEDA), #TVIS_SELECTEDA))
            赋值 (成员数2, 相加 (取数组成员数 (选中项索引A), 1))
            重定义数组 (选中项索引A, 真, 成员数2)
            赋值 (选中项索引A [成员数2], 计次)
             ' 加入成员 (选中项索引A, I)
        .如果真结束
        
    .判断循环尾 ()
    
.判断结束
选中项索引.赋值 (选中项索引A, )
返回 (选中项索引)

.子程序 遍历句柄, 空白型, , 
.局部变量 父项目, 空白型, , , 
.局部变量 子项目, 整数型, , , 
.局部变量 数值, 整数型, , , 
.局部变量 完成, 逻辑型, , , 
.局部变量 计次, 整数型, , , 

 ' 清除数组 (集_句柄组)
重定义数组 (集_句柄组, 假, 数据_取项目数 ())
赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_ROOT, 0)) ' 先取第一个根
.判断循环首 (不等于 (子项目, 0))
    赋值 (计次, 相加 (计次, 1))
    赋值 (集_句柄组 [计次], 子项目)
    赋值 (数值, 子项目)
    赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_CHILD, 子项目)) ' 取第一个子
    .如果真 (等于 (子项目, 0)) ' 取子取不到，就取兄弟
        赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_NEXT, 数值)) ' 取子的兄弟
         ' 找到了兄弟就直接到循环尾，否则进入下面的循环找父项目
        .判断循环首 (等于 (子项目, 0))
            赋值 (父项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_PARENT, 数值)) ' 退回上一级
            .如果真 (等于 (父项目, 0))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
            赋值 (数值, 父项目)
            赋值 (子项目, 发送消息1 (集_树型框句柄, #TVM_GETNEXTITEM, #TVGN_NEXT, 父项目)) ' 取父的兄弟
        .判断循环尾 ()
    .如果真结束
    .如果真 (完成)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()

.子程序 _置外部操作, 空白型, , 如果是外部控件，就要用这个方法初始化
赋值 (集_外部控件, 真)

.子程序 _销毁外部操作, 空白型, , 如果不再需要对外部控件进行初始化，可用这个销毁
赋值 (集_外部控件, 假)


.子程序 快速查找, 整数型, , 
.参数 欲查找句柄, 整数型, , 

.局部变量 计次1, 整数型, , , 
.局部变量 计次2, 整数型, , , 

赋值 (计次1, 1)
赋值 (计次2, 取数组成员数 (集_句柄组))
.判断循环首 (小于 (计次1, 计次2)) ' 循环直至左右指针相遇
    .如果真 (等于 (集_句柄组 [计次1], 欲查找句柄))
        返回 (计次1)
    .如果真结束
    .如果真 (等于 (集_句柄组 [计次2], 欲查找句柄))
        返回 (计次2)
    .如果真结束
    .判断开始 (小于 (计次1, 计次2))
        赋值 (计次1, 相加 (计次1, 1))
        赋值 (计次2, 相减 (计次2, 1))
    .默认
        返回 (0)
    .判断结束
    
.判断循环尾 ()
返回 (0)


.子程序 置自动更新状态, 空白型, 公开, 本方法决定了各个其它方法中“是否自动更新数据”参数的默认值。默认状态下，如果不使用本方法进行操作，“是否自动更新数据”参数的默认值将自动设置为真。
.参数 自动更新, 逻辑型, , 

赋值 (集_自动更新, 自动更新)

.子程序 查询自动更新状态, 逻辑型, 公开, 
返回 (集_自动更新)


.类模块 树型框操作类, 树型框操作基类, , 

.程序集变量 类_树型框1, 树型框, , , 
.程序集变量 类_树型框的数据, 树型框结构, , "0", 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除数组 (类_树型框的数据)


.子程序 _初始化类, 空白型, 公开, 
.参数 树型框, 树型框, , 

赋值 (类_树型框1, 树型框)
数据_读树形框 (树型框., 类_树型框的数据)
_初始化类A (树型框.取窗口句柄 ())


.子程序 _更新数据, 空白型, 公开, 当某些操作没有使用自动更新时，可在这里以手动方式进行数据更新
数据_读树形框 (类_树型框1., 类_树型框的数据)

.子程序 数据_加入项目_字节集方式加入, 整数型, 公开, 将单个或一批项目加入到树型框中，如果仅加入一个项目，成功返回加入后该项目所处的位置，失败返回 -1 。如果成批加入项目，成功返回 0 ，失败返回 -1 。成批加入项目可以用作一次性快速加入大量项目到树型框中。注意，加入数据后，树形框的句柄将会改变。
.参数 父项目索引, 整数型, 可空, 可以被省略。指定欲加入项目所处的父项目，0 为项目一，1 为项目二，如此类推。如果没有父项目（即欲加入项目为顶层项目），请提供值 -1 。如果本参数被省略，默认值为 -1 。
.参数 项目文本, 文本型, 数组, 如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 图片索引, 整数型, 可空 数组, 可以被省略。图片索引用于指定图片组属性中的某张图片，从 0 开始。如果本参数被省略，所有被加入项目的图片索引都默认为 0 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 选中图片索引, 整数型, 可空 数组, 可以被省略。选中图片索引用于指定项目被选中后所显示的图片，-1 表示与图片索引一致。如果本参数被省略，所有被加入项目的选中图片索引都默认为 -1 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 项目数值, 整数型, 可空 数组, 可以被省略。指定与本项目相关联的数值。如果本参数被省略，所有被加入项目的项目数值都默认为 0 。如果欲只加入一个项目，请提供一个成员的数组数据。
.参数 是否自动更新数据, 逻辑型, 可空, 可以被省略。选择是否自动进行数据更新。当为真时，每次读取数据时都会对数据进行刷新，可能会因此而减慢速度。默认值为真。

.局部变量 当前项目, 整数型, , , 
.局部变量 结构, 树型框结构, , "0", 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 缩进层次, 整数型, , , 

.如果真 (或者 (是否为空 (是否自动更新数据), 等于 (是否自动更新数据, 真)))
    数据_读树形框 (类_树型框1., 类_树型框的数据)
.如果真结束
.判断开始 (或者 (是否为空 (父项目索引), 等于 (父项目索引, -1)))
    赋值 (缩进层次, 1)
.判断 (等于 (取数组成员数 (类_树型框的数据), 0))
    赋值 (父项目索引, -1)
    赋值 (缩进层次, 1)
.判断 (大于 (父项目索引, 取数组成员数 (类_树型框的数据)))
    赋值 (父项目索引, 相减 (取数组成员数 (类_树型框的数据), 1))
    赋值 (缩进层次, 相加 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 1))
.默认
    赋值 (缩进层次, 相加 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 1))
.判断结束
赋值 (成员数, 取数组成员数 (项目文本))
重定义数组 (结构, 假, 成员数)
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    赋值 (结构 [计次], 项目文本, 项目文本 [计次])
    赋值 (结构 [计次], 缩进层次, 缩进层次)
    .如果真 (小于或等于 (计次, 取数组成员数 (图片索引)))
        赋值 (结构 [计次], 图片索引, 图片索引 [计次])
    .如果真结束
    .判断开始 (小于或等于 (计次, 取数组成员数 (选中图片索引)))
        赋值 (结构 [计次], 选中图片索引, 选择 (等于 (选中图片索引 [计次], -1), 结构 [计次], 图片索引, 选中图片索引 [计次]))
    .默认
        赋值 (结构 [计次], 选中图片索引, 结构 [计次], 图片索引)
    .判断结束
    .如果真 (小于或等于 (计次, 取数组成员数 (项目数值)))
        赋值 (结构 [计次], 项目数值, 项目数值 [计次])
    .如果真结束
    
.判断循环尾 ()
.判断开始 (或者 (是否为空 (父项目索引), 等于 (父项目索引, -1)))
    赋值 (成员数, 相减 (取数组成员数 (类_树型框的数据), 1))
    加入成员 (类_树型框的数据, 结构)
.默认
    赋值 (成员数, 取数组成员数 (类_树型框的数据))
    赋值 (计次, 相加 (父项目索引, 2))
    .判断循环首 (小于 (计次, 成员数))
        赋值 (计次, 相加 (计次, 1))
        .如果真 (大于或等于 (类_树型框的数据 [相加 (父项目索引, 1)].缩进层次, 类_树型框的数据 [计次], 缩进层次))
             ' 父项目的下一项目与父项目同级，或下一项目是父项目的上一层
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    插入成员 (类_树型框的数据, 计次, 结构)
    赋值 (成员数, 相减 (计次, 1))
.判断结束
赋值 (类_树型框1., 生成数据 ())
赋值 (类_树型框1., 当前项目)
类_树型框1.保证显示 (类_树型框1.)
_初始化类A (类_树型框1.取窗口句柄 ())
返回 (成员数)


.子程序 数据_清空, 空白型, 公开, 删除树型框中的所有项目。
数据_清空 ()

.子程序 生成数据, 字节集, , 
.局部变量 数据, 字节集, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 数据地址, 整数型, , , 
.局部变量 文件号, 整数型, , , 

赋值 (文件号, 打开内存文件 ())
赋值 (成员数, 取数组成员数 (类_树型框的数据))
.判断循环首 (小于 (计次, 成员数))
    赋值 (计次, 相加 (计次, 1))
    赋值 (数据地址, 取数据地址 (类_树型框的数据 [计次], 类_树型框的数据 [计次], 0))
    写出文本 (文件号, 类_树型框的数据 [计次], 项目文本)
     ' 写出字节集 (文件号, )
    写出字节集 (文件号, 相加 ({ 0 }, 指针到字节集 (相加 (数据地址, 4), 20)))
.判断循环尾 ()
移到文件首 (文件号)
赋值 (数据, 读入字节集 (文件号, 取文件长度 (文件号)))
关闭文件 (文件号)
返回 (数据)

.子程序 数据_读树形框, 空白型, 公开, 
.参数 项目数据, 字节集, , 
.参数 树型框结构数据, 树型框结构, 参考 数组, 

.局部变量 文件号, 整数型, , , 
.局部变量 结构, 树型框结构, , , 
.局部变量 数据首地址, 整数型, , , 

清除数组 (树型框结构数据)
赋值 (文件号, 打开内存文件 ())
写出字节集 (文件号, 项目数据)
移到文件首 (文件号)
.判断循环首 (等于 (是否在文件尾 (文件号, ), 假))
    赋值 (结构.项目文本, 读入文本 (文件号, ))
    移动读写位置 (文件号, #现行位置, 1)
    赋值 (数据首地址, 取数值变量地址 (结构.图片索引))
    写到内存 (读入字节集 (文件号, 20), 数据首地址, 20)
    加入成员 (树型框结构数据, 结构)
.判断循环尾 ()
关闭文件 (文件号)

.类模块 树型框句柄操作类, 树型框操作基类, , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 _初始化类, 逻辑型, 公开, 成功返回真
.参数 树型框句柄, 整数型, , 
.参数 是否为外部进程的树形框, 逻辑型, 可空, 可以被省略。当为真时，可对这个外部进程一树形框进行操作。默认为假。

.如果真 (是否为外部进程的树形框)
    _置外部操作 ()
.如果真结束
返回 (_初始化类A (树型框句柄))


.子程序 _更新数据, 空白型, 公开, 当某些操作没有使用自动更新时，可在这里以手动方式进行数据更新
更新数据1 ()

.子程序 _取消外部操作, 空白型, 公开, 当要取消对外部树形框的操作，而转向使用内部树形框时，可使用此方法。
_销毁外部操作 ()

.子程序 _使用外部操作, 空白型, 公开, 当要取消对内部树形框的操作，而转向使用外部树形框时，可使用此方法。
_置外部操作 ()


.类模块 超级列表框操作类, , , 

.程序集变量 集_超级列表框句柄, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 _初始化类, 空白型, 公开, 
.参数 超级列表框句柄, 整数型, , 

赋值 (超级列表框句柄, 集_超级列表框句柄)


.子程序 取选中项, 整数型, 公开, 取其它程序中超级列表框的现行选中项，成功返回项目索引，从0开始
返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 12), -1, 1))

.子程序 取行数, 整数型, 公开, 取其它程序中超级列表框的行数，成功返回行数，失败返回0
返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 4), 0, 0))

.子程序 删除行, 整数型, 公开, 删除超级列表框中的一行，失败返回0
.参数 行号, 整数型, 可空, 整数型，从0开始；可空，默认为0

返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 8), 行号, 0))

.子程序 删除所有行, 整数型, 公开, 删除超级列表框中的所有行，失败返回0
返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 9), 0, 0))

.子程序 删除列, 整数型, 公开, 删除超级列表框中的一列，适用于"报表列表框类型"，失败返回0
.参数 列号, 整数型, 可空, 整数型，从0开始，可空，默认为0

返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 28), 列号, 0))

.子程序 取背景色, 整数型, 公开, 取超级列表框的背景颜色，成功返回背景颜色，失败返回0
返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 0), 0, 0))

.子程序 设置风格, 整数型, 公开, 
.参数 风格, 整数型, , 1、显示网格，2、允许在子项中显示image，4、带检查框，8、当鼠标指到某一项时便自动选择该项，32、整行选择

.局部变量 s, 整数型, , , 

.如果真 (或者 (等于 (风格, 1), 等于 (风格, 2), 等于 (风格, 4), 等于 (风格, 8), 等于 (风格, 32)))
    赋值 (s, SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 55), 0, 0))
    赋值 (s, 位或 (s, 风格))
.如果真结束
返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 54), 0, s))

.子程序 设置提示文本, 整数型, 公开, 
.参数 行号, 整数型, 可空, 整数型，从0开始；可空，默认为0

返回 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 173), 0, 0))

.子程序 置选中项, 逻辑型, 公开, 
.参数 索引号, 整数型, , 

.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpListItemRemote, 整数型, , , 
.局部变量 lvItemLocal, LVITEM, , , 
.局部变量 tmp1, 整数型, , , 

赋值 (lvItemLocal.iItem, 索引号)
赋值 (lvItemLocal.iSubItem, 0)
赋值 (lvItemLocal.mask, #LVIF_STATE)
赋值 (lvItemLocal.state, #LVIS_SELECTED)
赋值 (lvItemLocal.stateMask, #LVIS_SELECTED)
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpListItemRemote, VirtualAllocEx (hProcess, 0, 36, #MEM_COMMIT, #PAGE_READWRITE))
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, #LV_SETITEMSTATE, 索引号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    VirtualFreeEx (hProcess, lpListItemRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    返回 (真)
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 36, 0))
    赋值 (lpListItemRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, #LV_SETITEMSTATE, 索引号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    UnmapViewOfFile (lpListItemRemote)
    CloseHandle (tmp1)
    返回 (真)
.如果结束


.子程序 取行文本, 文本型, 公开, 取其它程序中超级列表框中的文本，失败返回":("
.参数 行号, 整数型, 可空, 整数型，从0开始；可空，默认为0
.参数 列号, 整数型, 可空, 整数型，从0开始，适用于"报表列表框类型"；可空，默认为0

.局部变量 szBuf, 字节集, , , 
.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpTextRemote, 整数型, , , 
.局部变量 lpListItemRemote, 整数型, , , 
.局部变量 lvItemLocal, LVITEM, , , 
.局部变量 tmp1, 整数型, , , 
.局部变量 tmp2, 整数型, , , 

赋值 (szBuf, 取空白字节集 (255))
赋值 (lvItemLocal.iItem, 行号)
赋值 (lvItemLocal.iSubItem, 列号)
赋值 (lvItemLocal.mask, #LVCF_TEXT)
赋值 (lvItemLocal.cchTextMax, 255)
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpTextRemote, VirtualAllocEx (hProcess, 0, 255, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lpListItemRemote, VirtualAllocEx (hProcess, 0, 36, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (“:(”)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 45), 行号, lpListItemRemote), 0))
        返回 (“:(”)
    .如果真结束
    .如果真 (等于 (ReadProcessMemory (hProcess, lpTextRemote, szBuf, 255, 0), 0))
        返回 (“:(”)
    .如果真结束
    VirtualFreeEx (hProcess, lpListItemRemote, 0, #MEM_RELEASE)
    VirtualFreeEx (hProcess, lpTextRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    返回 (取字节集数据 (szBuf, #文本型))
    
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 36, 0))
    赋值 (tmp2, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 255, 0))
    赋值 (lpListItemRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lpTextRemote, MapViewOfFile (tmp2, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (“:(”)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 45), 行号, lpListItemRemote), 0))
        返回 (“:(”)
    .如果真结束
    .如果真 (等于 (ReadProcessMemory (hProcess, lpTextRemote, szBuf, 255, 0), 0))
        返回 (“:(”)
    .如果真结束
    UnmapViewOfFile (lpListItemRemote)
    UnmapViewOfFile (lpTextRemote)
    CloseHandle (tmp1)
    CloseHandle (tmp2)
    返回 (取字节集数据 (szBuf, #文本型))
.如果结束


.子程序 取行位置, 文本型, 公开, 成功返回的文本格式---"x,y"
.参数 行号, 整数型, 可空, 

.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpPOINTAPIRemote, 整数型, , , 
.局部变量 tmp1, 整数型, , , 
.局部变量 tmp2, 整数型, , , 
.局部变量 POINTAPI, 字节集, , , 

赋值 (POINTAPI, 取空白字节集 (8))
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpPOINTAPIRemote, VirtualAllocEx (hProcess, 0, 8, #MEM_COMMIT, #PAGE_READWRITE))
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 16), 行号, lpPOINTAPIRemote), 0))
        返回 (“”)
    .如果真结束
    .如果真 (等于 (ReadProcessMemory (hProcess, lpPOINTAPIRemote, POINTAPI, 8, 0), 0))
        返回 (“”)
    .如果真结束
    VirtualFreeEx (hProcess, lpPOINTAPIRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    赋值 (tmp1, 取字节集数据 (取字节集左边 (POINTAPI, 4), #整数型))
    赋值 (tmp2, 取字节集数据 (取字节集右边 (POINTAPI, 4), #整数型))
    返回 (相加 (到文本 (tmp1), “,”, 到文本 (tmp2)))
    
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 8, 0))
    赋值 (lpPOINTAPIRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 16), 行号, lpPOINTAPIRemote), 0))
        返回 (“”)
    .如果真结束
    .如果真 (等于 (ReadProcessMemory (hProcess, lpPOINTAPIRemote, POINTAPI, 8, 0), 0))
        返回 (“”)
    .如果真结束
    UnmapViewOfFile (lpPOINTAPIRemote)
    CloseHandle (tmp1)
    赋值 (tmp1, 取字节集数据 (取字节集左边 (POINTAPI, 4), #整数型))
    赋值 (tmp2, 取字节集数据 (取字节集右边 (POINTAPI, 4), #整数型))
    返回 (相加 (到文本 (tmp1), “,”, 到文本 (tmp2)))
.如果结束


.子程序 插入列, 逻辑型, 公开, 在其它程序中的超级列表框插入一列，适用于"报表列表框类型"，成功返回真，失败返回假
.参数 插入位置, 整数型, 可空, 整数型，从0开始；可空，默认为0
.参数 标题文本, 文本型, 可空, 文本型，可空
.参数 标题文本对齐方式, 整数型, 可空, 整数型，0---表列左对齐，1---表列右对齐，2表列居中对齐；可空，默认为0
.参数 插入的列宽度, 整数型, 可空, 整数型，从0开始；可空，默认为100

.局部变量 COLUMN, LVCOLUMN, , , 
.局部变量 项目文本长度, 整数型, , , 
.局部变量 项目文本_bin, 字节集, , , 
.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpTextRemote, 整数型, , , 
.局部变量 lpListItemRemote, 整数型, , , 
.局部变量 tmp1, 整数型, , , 
.局部变量 tmp2, 整数型, , , 

赋值 (项目文本_bin, 到字节集 (标题文本))
赋值 (项目文本长度, 取字节集长度 (项目文本_bin))
赋值 (COLUMN.mask, 位或 (#LVCF_TEXT, #LVCF_WIDTH, #LVCF_FMT))
.如果真 (等于 (插入的列宽度, 0))
    赋值 (插入的列宽度, 100)
.如果真结束
.判断开始 (等于 (标题文本对齐方式, 0))
    赋值 (COLUMN.fmt, 0)
.判断 (等于 (标题文本对齐方式, 1))
    赋值 (COLUMN.fmt, 1)
.判断 (等于 (标题文本对齐方式, 2))
    赋值 (COLUMN.fmt, 2)
.默认
    
.判断结束
赋值 (COLUMN.iSubItem, 插入位置)
赋值 (COLUMN.cx, 插入的列宽度)
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpTextRemote, VirtualAllocEx (hProcess, 0, 项目文本长度, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lpListItemRemote, VirtualAllocEx (hProcess, 0, 24, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (COLUMN.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, 项目文本_bin, 项目文本长度, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory_COLUMN (hProcess, lpListItemRemote, COLUMN, 24, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 27), 插入位置, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    VirtualFreeEx (hProcess, lpTextRemote, 0, #MEM_RELEASE)
    VirtualFreeEx (hProcess, lpListItemRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    返回 (真)
    
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 24, 0))
    赋值 (tmp2, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 项目文本长度, 0))
    赋值 (lpListItemRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lpTextRemote, MapViewOfFile (tmp2, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (COLUMN.pszText, lpTextRemote)
    
    .如果真 (等于 (WriteProcessMemory_COLUMN (hProcess, lpListItemRemote, COLUMN, 24, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, 项目文本_bin, 项目文本长度, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 27), 插入位置, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    UnmapViewOfFile (lpListItemRemote)
    UnmapViewOfFile (lpTextRemote)
    CloseHandle (tmp1)
    CloseHandle (tmp2)
    返回 (真)
.如果结束


.子程序 插入行, 逻辑型, 公开, 适用于"报表列表框类型"，成功返回真，失败返回假
.参数 行号, 整数型, 可空, 整数型，从0开始；可空，默认为0
.参数 行首文本, 文本型, 可空, 文本型，要插入的行首文本；可空，默认为“ ”
.参数 标题数值, 整数型, 可空, 整数型型，要插入的与标题关联的数值

.局部变量 szBuf, 字节集, , , 
.局部变量 szBufLen, 整数型, , , 
.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpTextRemote, 整数型, , , 
.局部变量 lpListItemRemote, 整数型, , , 
.局部变量 lvItemLocal, LVITEM, , , 
.局部变量 tmp1, 整数型, , , 
.局部变量 tmp2, 整数型, , , 

.如果 (等于 (行首文本, “”))
    赋值 (szBuf, 取空白字节集 (1))
.否则
    赋值 (szBuf, 到字节集 (行首文本))
.如果结束
赋值 (szBufLen, 取字节集长度 (szBuf))
赋值 (lvItemLocal.mask, 位或 (#LVIF_TEXT, #LVIF_PARAM))
赋值 (lvItemLocal.lParam, 标题数值)
赋值 (lvItemLocal.iItem, 行号)
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpTextRemote, VirtualAllocEx (hProcess, 0, szBufLen, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lpListItemRemote, VirtualAllocEx (hProcess, 0, 36, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, szBuf, szBufLen, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 7), 行号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    VirtualFreeEx (hProcess, lpListItemRemote, 0, #MEM_RELEASE)
    VirtualFreeEx (hProcess, lpTextRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    返回 (真)
    
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 36, 0))
    赋值 (tmp2, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, szBufLen, 0))
    赋值 (lpListItemRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lpTextRemote, MapViewOfFile (tmp2, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, szBuf, szBufLen, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 7), 行号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    UnmapViewOfFile (lpListItemRemote)
    UnmapViewOfFile (lpTextRemote)
    CloseHandle (tmp1)
    CloseHandle (tmp2)
    返回 (真)
.如果结束


.子程序 置行文本, 逻辑型, 公开, 适用于"报表列表框类型"，成功返回真，失败返回假
.参数 行号, 整数型, 可空, 整数型，从0开始；可空，默认为0
.参数 列号, 整数型, 可空, 整数型，从0开始；可空，默认为0
.参数 行文本, 文本型, , 文本型，要置入的文本

.局部变量 szBuf, 字节集, , , 
.局部变量 szBufLen, 整数型, , , 
.局部变量 dwProcessID, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 lpTextRemote, 整数型, , , 
.局部变量 lpListItemRemote, 整数型, , , 
.局部变量 lvItemLocal, LVITEM, , , 
.局部变量 tmp1, 整数型, , , 
.局部变量 tmp2, 整数型, , , 

赋值 (szBuf, 到字节集 (行文本))
赋值 (szBufLen, 取字节集长度 (szBuf))
赋值 (lvItemLocal.mask, #LVIF_TEXT)
赋值 (lvItemLocal.iItem, 行号)
赋值 (lvItemLocal.iSubItem, 列号)
GetWindowThreadProcessId (集_超级列表框句柄, dwProcessID)
赋值 (hProcess, OpenProcess (位或 (983040, 1048576, 4095), 假, dwProcessID))
.如果 (等于 (取操作系统类别 (), 3))
    赋值 (lpTextRemote, VirtualAllocEx (hProcess, 0, szBufLen, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lpListItemRemote, VirtualAllocEx (hProcess, 0, 36, #MEM_COMMIT, #PAGE_READWRITE))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, szBuf, szBufLen, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 6), 行号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    VirtualFreeEx (hProcess, lpListItemRemote, 0, #MEM_RELEASE)
    VirtualFreeEx (hProcess, lpTextRemote, 0, #MEM_RELEASE)
    CloseHandle (hProcess)
    返回 (真)
    
.否则
    
    赋值 (tmp1, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, 36, 0))
    赋值 (tmp2, CreateFileMapping (-1, 0, #PAGE_READWRITE, 0, szBufLen, 0))
    赋值 (lpListItemRemote, MapViewOfFile (tmp1, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lpTextRemote, MapViewOfFile (tmp2, #FILE_MAP_ALL_ACCESS, 0, 0, 0))
    赋值 (lvItemLocal.pszText, lpTextRemote)
    .如果真 (等于 (WriteProcessMemory2 (hProcess, lpTextRemote, szBuf, szBufLen, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (WriteProcessMemory_LVITEM (hProcess, lpListItemRemote, lvItemLocal, 36, 0), 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (SendMessage (集_超级列表框句柄, 相加 (#LVM_FIRST, 6), 行号, lpListItemRemote), 0))
        返回 (假)
    .如果真结束
    UnmapViewOfFile (lpListItemRemote)
    UnmapViewOfFile (lpTextRemote)
    CloseHandle (tmp1)
    CloseHandle (tmp2)
    返回 (真)
.如果结束



 ' 不属于任何一个程序集、类模块的函数：
