 ' 文件类型：Windows窗口程序

 ' 程序名称：古木五子棋人机对战
 ' 程序描述：
 ' 程序作者：曾劲松
 ' 邮政编码：430077
 ' 联系地址：湖北，武汉，武昌
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：goomoo.net@tom.com
 ' 主页地址：http://goomoo.uuoo.com
 ' 版权声明：http://goomoo.yeah.net
 ' 版本号：1.23
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 521
    高度 = 579
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口关于
    左边 = 50
    顶边 = 50
    宽度 = 284
    高度 = 184
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假

窗口 窗口购买源码
    左边 = 50
    顶边 = 50
    宽度 = 640
    高度 = 535
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口调试
    左边 = 50
    顶边 = 50
    宽度 = 386
    高度 = 555
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口协议
    左边 = 50
    顶边 = 50
    宽度 = 434
    高度 = 296
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口_五子棋及其规则简介
    左边 = 50
    顶边 = 50
    宽度 = 600
    高度 = 460
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 窗口_五子棋术语介绍
    左边 = 50
    顶边 = 50
    宽度 = 640
    高度 = 460
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 格宽度, "32", , 
.常量 点半径, "3", , 
.常量 黑棋, "-1", , 
.常量 白棋, "1", , 
.常量 , , , 
.常量 轮到您下, "“现在轮到您下棋了。”", , 
.常量 电脑在思考, "“计算机正在思考中……”", , 
.常量 正在自动下棋, "“正在自动下棋。”", , 
.常量 自动下棋结束, "“自动下棋结束。”", , 
.图片 黑棋图, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\黑棋图", , 
.图片 白棋图, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\白棋图", , 
.常量 程序标题, "“古木五子棋人机对战”", , 
.常量 程序版本, "“1.25”", , 
.常量 购买源码, "“购买古木五子棋人机对战程序源码”", , 
.常量 黑棋胜, "“黑棋胜！！”", , 
.常量 白棋胜, "“白棋胜！！”", , 
.常量 你赢, "“你赢了，不错啊！！”", , 
.常量 电脑赢, "“计算机赢了，你还要努力呀！！”", , 
.常量 和棋, "“棋局结束，和棋。”", , 
.常量 总步数, "“总步数：”", , 
.常量 提示查看规则, "“要了解五子棋规则，请点击菜单 [帮助>五子棋及其规则简介] 。”", , 
.常量 五子棋规则, "“五子棋规则：”", , 
.常量 三三禁手提示, "“黑方双活三禁手。”", , 
.常量 四四禁手提示, "“黑方四四禁手。”", , 
.常量 长连禁手提示, "“黑方长连禁手。”", , 
.常量 , , , 
.常量 三三禁手, "1", , 
.常量 四四禁手, "2", , 
.常量 长连禁手, "3", , 
.常量 , , , 
.常量 活四活四, "1", , 
.常量 活四死四, "2", , 
.常量 活四活三, "3", , 
.常量 死四死四, "4", , 
.常量 单活四, "5", , 
.常量 禁手五, "6", , 
.常量 死四活三, "7", , 
.常量 跳活四活三, "8", , 
.常量 跳死四活三, "9", , 
.常量 活三活三, "10", , 
.常量 , , , 
.常量 无限大, "800000", , 当连成5子时返回无限大值
.常量 活四活四分, "750000", , 8192 8184(单跳) 8176(双跳)
.常量 活四死四分, "700000", , 6144 6140 6136 6132
.常量 活四活三分, "650000", , 4608 4600 4592
.常量 死四死四分, "600000", , 4096 4092 4088
.常量 单活四分, "550000", , 4096
.常量 跳活四活三分, "500000", , 
.常量 死四活三分, "450000", , 2560 2552(跳三) 2556(跳四) 2548(跳三跳四)
.常量 跳死四活三分, "400000", , 
.常量 活三活三分, "350000", , 1024 1016(单跳活三) 1008(双跳活三)
.常量 , , , 
.图片 底图, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\底图", , 
.常量 边界扩展宽度, "1", , 
.常量 得分基数, "8", , 
.常量 空基数, "8", , 
.常量 单死除数, "2", , 如果有一边被堵死了，则将该项的得分除以此常数
.常量 , , , 
.常量 防守指数, "1", , 
.常量 进攻指数, "3", , 
.常量 冒进指数, "5", , 
.图片 购买信息, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\购买信息", , 为防止修改，已被加密
.图片 协议, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\协议", , 
.图片 五子棋简介, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\五子棋简介", , 
.图片 五子棋术语介绍, " ' 已保存到：D:\易语言学习\Data\goomFive1.25.e\五子棋术语介绍", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 7 系统核心支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 1 0 数据操作支持库一




数据类型 矩形, , 
    .成员 左, 整数型, , , 
    .成员 上, 整数型, , , 
    .成员 右, 整数型, , , 
    .成员 下, 整数型, , , 

数据类型 棋步, , 
    .成员 横, 整数型, , , 1-15
    .成员 纵, 整数型, , , 1-15
    .成员 棋类型, 整数型, , , #黑棋，#白棋

数据类型 棋步和得分, , 
    .成员 棋步, 棋步, , , 
    .成员 得分, 整数型, , , 

数据类型 单向棋形, , 落子后在某一方向上的棋形
    .成员 棋类型, 空白型, , , #黑棋 或 #白棋
    .成员 棋个数, 空白型, , , 
    .成员 空个数, 空白型, , , 
    .成员 左堵, 逻辑型, , , 
    .成员 右堵, 逻辑型, , , 
    .成员 得分, 空白型, , , 
    .成员 对方是否有禁手, 逻辑型, , , 

数据类型 棋形和得分, , 综合棋形和得分
    .成员 综合棋形, 空白型, , , 综合棋形
    .成员 综合得分, 空白型, , , 综合得分

.全局变量 全运行目录, 文本型, , , 
.全局变量 匿名全局变量_331, 空白型, , , 
.全局变量 全光标横, 整数型, , , 0-15,鼠标光标在棋盘上的横向位置
.全局变量 全光标纵, 整数型, , , 0-15,鼠标光标在棋盘上的纵向位置
.全局变量 全棋形数组, 整数型, , "0", 存储棋形状态的二维数组，0为无棋，-1为黑，1为白
.全局变量 全边界矩形, 矩形, , , 存储当前棋盘棋子所涉及到的范围
.全局变量 全上次棋步, 棋步, , , 上一次的下棋信息
.全局变量 全已结束, 逻辑型, , , 游戏是否已结束
.全局变量 全棋子, 整数型, , , #黑棋，#白棋，0
.全局变量 全电脑在思考, 逻辑型, , , 
.全局变量 全计时, 整数型, , , 
.全局变量 全历史图片, 字节集, , "0", 保存棋盘上的棋子下的图片用于悔棋之用
.全局变量 全历史棋步, 棋步, , "0", 保存曾经下过的棋步，用于悔棋和最后编号
.全局变量 匿名全局变量_225, 空白型, , , 
.全局变量 全赢线始横, 空白型, , , 
.全局变量 全赢线始纵, 空白型, , , 
.全局变量 全赢线终横, 空白型, , , 
.全局变量 全赢线终纵, 空白型, , , 
.全局变量 匿名全局变量_235, 空白型, , , 
.全局变量 进攻指数, 双精度小数型, , , 因为黑棋先下，调整此值可以切换进攻和防守指数
.全局变量 匿名全局变量_368, 空白型, , , 
.全局变量 全调试最高比和, 双精度小数型, , , 用于调试，保存最高比之和而求平均值
.全局变量 全调试最高比个数, 整数型, , , 用于调试，求平均值
.全局变量 全高分比, 双精度小数型, , , 
.全局变量 匿名全局变量_482, 空白型, , , 
.全局变量 全递归深度, 整数型, , , 
.全局变量 匿名全局变量_506, 空白型, , , 
.全局变量 全正在自动下棋, 逻辑型, , , 

.窗口程序集 启动窗口程序集, , , 

.子程序 落子, 空白型, , 将棋子落在虚拟的棋盘上
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 

赋值 (参棋形数组 [参棋步].横 [参棋步].纵, 参棋步.棋类型)

.子程序 计算单向棋形和得分, 单向棋形, , 计算棋步在棋盘上的某一方向上的得分
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 
.参数 左, 空白型, , 确定计分的方向,(1,0-横)(0,1-纵)(1,1-右斜)(-1,1-左斜)
.参数 顶, 空白型, , 

.局部变量 i, 空白型, , , i,j,k循环变量
.局部变量 j, 空白型, , , 
.局部变量 k, 空白型, , , 
.局部变量 计数, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 xa, 空白型, , , xa,ya 临时坐标
.局部变量 ya, 空白型, , , 
.局部变量 棋个数, 空白型, , , 
.局部变量 空个数, 空白型, , , 
.局部变量 左堵, 逻辑型, , , 
.局部变量 右堵, 逻辑型, , , 
.局部变量 得分, 长整数型, , , 
.局部变量 跳出, 逻辑型, , , 判断是否为中断的形式跳出循环
.局部变量 单向棋形, 单向棋形, , , 
.局部变量 对方棋步, 棋步, , , 
.局部变量 对方是否有禁手, 逻辑型, , , 

赋值 (左堵, 假)
赋值 (右堵, 假)
赋值 (棋个数, 1)
赋值 (空个数, 0)
赋值 (计数, 0)
赋值 (对方是否有禁手, 假)
赋值 (对方棋步.棋类型, 负 (参棋步.棋类型))
.计次循环首 (4, i)
    赋值 (跳出, 真)
    赋值 (计数, 相加 (计数, 1))
    赋值 (x, 相减 (参棋步.横, 相乘 (i, 左)))
    赋值 (y, 相减 (参棋步.纵, 相乘 (i, 顶)))
    .如果真 (或者 (小于 (x, 1), 小于 (y, 1), 大于 (x, 15), 大于 (y, 15)))
        赋值 (左堵, 真)
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (参棋形数组 [x] [y], 参棋步.棋类型))
        赋值 (棋个数, 相加 (棋个数, 1))
    .如果真结束
    .如果真 (等于 (参棋形数组 [x] [y], 负 (参棋步.棋类型)))
        赋值 (左堵, 真)
        跳出循环 ()
    .如果真结束
    如果当前棋子为空，则判断下一个棋子
    .如果真 (等于 (参棋形数组 [x] [y], 0))
        赋值 (对方棋步.横, x)
        赋值 (对方棋步.纵, y)
        .如果真 (不等于 (禁手判断 (参棋形数组, 对方棋步), 0))
            赋值 (对方是否有禁手, 真)
        .如果真结束
        赋值 (xa, 相减 (x, 左))
        赋值 (ya, 相减 (y, 顶))
        .如果真 (或者 (小于 (xa, 1), 小于 (ya, 1), 大于 (xa, 15), 大于 (ya, 15)))
            赋值 (左堵, 假)
            跳出循环 ()
        .如果真结束
        如果下一个棋子也为空，则 左堵 为假
        .如果真 (等于 (参棋形数组 [xa] [ya], 0))
            赋值 (左堵, 假)
            跳出循环 ()
        .如果真结束
        如果下一个棋子与棋步的类型相同，则将空数加一
        .如果真 (等于 (参棋形数组 [xa] [ya], 参棋步.棋类型))
            赋值 (空个数, 相加 (空个数, 1))
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 负 (参棋步.棋类型)))
            赋值 (左堵, 假)
            跳出循环 ()
        .如果真结束
        
    .如果真结束
    赋值 (跳出, 假)
.计次循环尾 ()
如果正常退出循环，还要判断最左边一子
.如果 (等于 (跳出, 假))
    赋值 (xa, 相减 (x, 左))
    赋值 (ya, 相减 (y, 顶))
    .如果 (或者 (小于 (xa, 1), 小于 (ya, 1), 大于 (xa, 15), 大于 (ya, 15)))
        赋值 (左堵, 真)
    .否则
        .如果真 (等于 (参棋形数组 [xa] [ya], 0))
            赋值 (左堵, 假)
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 负 (参棋步.棋类型)))
            赋值 (左堵, 真)
        .如果真结束
        
    .如果结束
    
.否则
    赋值 (计数, 相减 (计数, 1))
.如果结束

/////////////////////往另一个方向计算//////////////////////////////////////////////////////
.计次循环首 (相减 (4, 计数), i)
    赋值 (跳出, 真)
    赋值 (x, 相加 (参棋步.横, 相乘 (i, 左)))
    赋值 (y, 相加 (参棋步.纵, 相乘 (i, 顶)))
    .如果真 (或者 (小于 (x, 1), 小于 (y, 1), 大于 (x, 15), 大于 (y, 15)))
        赋值 (右堵, 真)
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (参棋形数组 [x] [y], 参棋步.棋类型))
        赋值 (棋个数, 相加 (棋个数, 1))
    .如果真结束
    .如果真 (等于 (参棋形数组 [x] [y], 负 (参棋步.棋类型)))
        赋值 (右堵, 真)
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (参棋形数组 [x] [y], 0))
        赋值 (对方棋步.横, x)
        赋值 (对方棋步.纵, y)
        .如果真 (不等于 (禁手判断 (参棋形数组, 对方棋步), 0))
            赋值 (对方是否有禁手, 真)
        .如果真结束
        赋值 (xa, 相加 (x, 左))
        赋值 (ya, 相加 (y, 顶))
        .如果真 (或者 (小于 (xa, 1), 大于 (xa, 15), 小于 (ya, 1), 大于 (ya, 15)))
            赋值 (右堵, 假)
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 0))
            赋值 (右堵, 假)
            跳出循环 ()
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 参棋步.棋类型))
            赋值 (空个数, 相加 (空个数, 1))
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 负 (参棋步.棋类型)))
            赋值 (右堵, 假)
            跳出循环 ()
        .如果真结束
        
    .如果真结束
    赋值 (跳出, 假)
.计次循环尾 ()
.如果真 (等于 (跳出, 假))
    赋值 (xa, 相加 (x, 左))
     ' 赋值 (ya, 相加 (y, 顶))
    .如果 (或者 (小于 (xa, 1), 大于 (xa, 15), 小于 (ya, 1), 大于 (ya, 15)))
        赋值 (右堵, 真)
    .否则
        .如果真 (等于 (参棋形数组 [xa] [ya], 0))
            赋值 (右堵, 假)
        .如果真结束
        .如果真 (等于 (参棋形数组 [xa] [ya], 负 (参棋步.棋类型)))
            赋值 (右堵, 真)
        .如果真结束
        
    .如果结束
    
.如果真结束

.如果真 (对方是否有禁手)
    赋值 (棋个数, 相加 (棋个数, 1))
    赋值 (空个数, 相减 (空个数, 1))
.如果真结束

赋值 (得分, 求次方 (#得分基数, 棋个数))
.如果真 (不等于 (空个数, 0))
    赋值 (得分, 相减 (得分, 求次方 (#空基数, 空个数)))
.如果真结束
.如果真 (或者 (左堵, 右堵))
    赋值 (得分, 相除 (得分, 2))
.如果真结束
.如果真 (并且 (左堵, 右堵))
    赋值 (得分, 1)
.如果真结束

输出调试信息 (“得分：” ＋ 到文本 (得分))
.如果真 (等于 (棋个数, 5))
    赋值 (得分)

.子程序 计算综合棋形和得分, 棋形和得分, , 
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 

.局部变量 单向棋形数组, 单向棋形, , "4", 
.局部变量 排序后的单向棋形数组, 单向棋形, , "4", 
.局部变量 棋形和得分, 棋形和得分, , , 
.局部变量 单向棋形一, 单向棋形, , , 
.局部变量 单向棋形二, 单向棋形, , , 

赋值 (单向棋形数组 [1], 计算单向棋形和得分 (参棋形数组, 参棋步, 1, 0))
赋值 (单向棋形数组 [2], 计算单向棋形和得分 (参棋形数组, 参棋步, 0, 1))
赋值 (单向棋形数组 [3], 计算单向棋形和得分 (参棋形数组, 参棋步, 1, 1))
赋值 (单向棋形数组 [4], 计算单向棋形和得分 (参棋形数组, 参棋步, -1, 1))
排序单向棋形数组 (单向棋形数组, 排序后的单向棋形数组)
赋值 (单向棋形一, 排序后的单向棋形数组 [1])
赋值 (单向棋形二, 排序后的单向棋形数组 [2])
输出调试信息 (“单向棋形一的得分：” ＋ 到文本 (单向棋形一.得分))
输出调试信息 (“单向棋形二的得分：” ＋ 到文本 (单向棋形二.得分))
.如果真 (并且 (等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 等于 (单向棋形一.棋个数, 4), 等于 (单向棋形二.棋个数, 4), 等于 (单向棋形二.左堵, 假), 等于 (单向棋形二.右堵, 假)))
    赋值 (棋形和得分.综合棋形, #活四活四)
    赋值 (棋形和得分.综合得分, #活四活四分)
    返回 (棋形和得分)
.如果真结束
.如果真 (并且 (等于 (单向棋形一.棋个数, 4), 等于 (单向棋形二.棋个数, 4)))
    .如果真 (并且 (等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 或者 (等于 (单向棋形二.左堵, 真), 等于 (单向棋形二.右堵, 真))))
        赋值 (棋形和得分.综合棋形, #活四死四)
        赋值 (棋形和得分.综合得分, #活四死四分)
        返回 (棋形和得分)
    .如果真结束
    
.如果真结束
.如果真 (并且 (等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 等于 (单向棋形一.棋个数, 4), 等于 (单向棋形一.空个数, 0), 等于 (单向棋形二.左堵, 假), 等于 (单向棋形二.右堵, 假), 等于 (单向棋形二.棋个数, 3), 小于 (单向棋形二.空个数, 2)))
    赋值 (棋形和得分.综合棋形, #活四活三)
    赋值 (棋形和得分.综合得分, #活四活三分)
    返回 (棋形和得分)
.如果真结束
.如果真 (并且 (等于 (单向棋形一.棋个数, 4), 等于 (单向棋形二.棋个数, 4)))
    .如果真 (并且 (或者 (等于 (单向棋形一.左堵, 真), 等于 (单向棋形一.右堵, 真)), 或者 (等于 (单向棋形二.左堵, 真), 等于 (单向棋形二.右堵, 真))))
        赋值 (棋形和得分.综合棋形, #死四死四)
        赋值 (棋形和得分.综合得分, #死四死四分)
        返回 (棋形和得分)
    .如果真结束
    
.如果真结束
.如果真 (并且 (等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 等于 (单向棋形一.棋个数, 4), 等于 (单向棋形一.空个数, 0)))
    赋值 (棋形和得分.综合棋形, #单活四)
    赋值 (棋形和得分.综合得分, #单活四分)
    返回 (棋形和得分)
.如果真结束

.如果真 (并且 (等于 (单向棋形一.棋个数, 4), 等于 (单向棋形一.空个数, 0), 等于 (单向棋形二.棋个数, 3), 小于 (单向棋形二.空个数, 2)))
    .如果真 (并且 (等于 (单向棋形二.左堵, 假), 等于 (单向棋形二.右堵, 假)))
        赋值 (棋形和得分.综合棋形, #死四活三)
        赋值 (棋形和得分.综合得分, #死四活三分)
        返回 (棋形和得分)
    .如果真结束
    
.如果真结束
.如果真 (并且 (等于 (单向棋形一.棋个数, 3), 等于 (单向棋形二.棋个数, 3), 等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 等于 (单向棋形二.左堵, 假), 等于 (单向棋形二.右堵, 假), 小于 (单向棋形一.空个数, 2), 小于 (单向棋形二.空个数, 2)))
    赋值 (棋形和得分.综合棋形, #活三活三)
    赋值 (棋形和得分.综合得分, #活三活三分)
    返回 (棋形和得分)
.如果真结束

.如果真 (并且 (等于 (单向棋形一.棋个数, 4), 不等于 (单向棋形一.空个数, 0), 等于 (单向棋形一.左堵, 假), 等于 (单向棋形一.右堵, 假), 等于 (单向棋形二.棋个数, 3), 等于 (单向棋形二.左堵, 假), 等于 (单向棋形二.右堵, 假), 小于 (单向棋形二.空个数, 2)))
    赋值 (棋形和得分.综合棋形, #跳活四活三)
    赋值 (棋形和得分.综合得分, #跳活四活三分)
    返回 (棋形和得分)
.如果真结束
.如果真 (并且 (等于 (单向棋形一.棋个数, 4), 不等于 (单向棋形一.空个数, 0), 等于 (单向棋形二.棋个数, 3), 小于 (单向棋形二.空个数, 2)))
    .如果真 (或者 (单向棋形一.左堵, 单向棋形二.右堵))
        赋值 (棋形和得分.综合棋形, #跳死四活三)
        赋值 (棋形和得分.综合得分, #跳死四活三分)
        返回 (棋形和得分)
    .如果真结束
    
.如果真结束
其他情况只计算得分
赋值 (棋形和得分.综合棋形, 0)
赋值 (棋形和得分.综合得分, 相加 (单向棋形一.得分, 单向棋形二.得分))
返回 (棋形和得分)


.子程序 排序单向棋形数组, 空白型, , 根据得分进行排序，得分最高的排在前面
.参数 参入单向棋形数组, 单向棋形, 数组, 
.参数 参出单向棋形数组, 单向棋形, 数组, 

.局部变量 i, 空白型, , , 
.局部变量 最高得分, 空白型, , , 
.局部变量 标志, 空白型, , , 
.局部变量 j, 空白型, , , 

.计次循环首 (4, i)
    赋值 (最高得分, -1)
    赋值 (标志, -1)
.计次循环尾 ()
.计次循环首 (4, i)
    赋值 (最高得分, -1)
    赋值 (标志, 0)
    .计次循环首 (取数组成员数 (参入单向棋形数组), j)
        .如果真 (小于 (最高得分, 参入单向棋形数组 [j], 得分))
            赋值 (最高得分, 参入单向棋形数组 [j], 得分)
            输出调试信息 (“最高得分：” ＋ 到文本 (最高得分))
            赋值 (标志, j)
        .如果真结束
        
    .计次循环尾 ()
    加入成员 (参出单向棋形数组, 参入单向棋形数组 [标志])
    赋值 (参出单向棋形数组 [i], 参入单向棋形数组 [标志])
    删除成员 (参入单向棋形数组, 标志, )
.计次循环尾 ()

.子程序 计算当前最佳落子位置, 棋步和得分, , 计算当前棋盘上一步内的最佳落子位子，返回该位置的棋步和得分
.参数 参棋形数组, 空白型, 数组, 
.参数 参边界矩形, 矩形, , 
.参数 参棋类型, 空白型, , 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 边界矩形, 矩形, , , 
.局部变量 棋步, 棋步, , , 
.局部变量 得分, 空白型, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 返回棋步和得分, 棋步和得分, , , 
.局部变量 己方棋步和得分数组, 棋步和得分, , "0", 
.局部变量 己方最高得分棋步数组, 棋步和得分, , "0", 
.局部变量 对方棋步和得分数组, 棋步和得分, , "0", 
.局部变量 对方最高得分棋步数组, 棋步和得分, , "0", 
.局部变量 相交最高得分棋步数组, 棋步和得分, , "0", 
.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 己方最高分, 空白型, , , 
.局部变量 对方最高分, 空白型, , , 
.局部变量 项数, 空白型, , , 
.局部变量 待下步索引, 空白型, , , 

连续赋值 ()

.子程序 计算当前最重要棋步, 棋步和得分, , 如果没有找到，则得分为0
.参数 参棋形数组, 空白型, 数组, 
.参数 边界矩形, 矩形, , 
.参数 参棋类型, 空白型, , 

.局部变量 棋步, 棋步, , , 
.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 综合棋形, 空白型, , , 

首先判断双方是否有能获胜的位置
.变量循环首 (.左, .右, 1, )
    .变量循环首 (.上, .下, 1, )
        处理事件 ()
        .如果真 (不等于 ( [ [0]]))
            到循环尾 ()
        .如果真结束
        
        赋值 (.横, )
        赋值 (.纵, )
        赋值 (.棋类型, )
        .如果真 (不等于 (禁手判断 (参棋形数组, 棋步), 0))
            到循环尾 ()
        .如果真结束
        .如果真 (不等于 (判断胜负 (), 0))
            赋值 (.棋步, )
            赋值 (.得分)

.子程序 递归计算最佳落子位置, 棋步, , 
.参数 参棋形数组, 空白型, 数组, 
.参数 参边界矩形, 矩形, , 
.参数 参棋类型, 空白型, , 

.局部变量 返回棋步, 棋步, , , 将要返回的棋步
.局部变量 棋步, 棋步, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 棋步和得分数组, 棋步和得分, , "0", 存储棋步和得分数组，以得到最高分的棋步
.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 边界矩形, 矩形, , , 
.局部变量 临时边界矩形, 矩形, , , 
.局部变量 棋形数组, 空白型, , "0", 
.局部变量 最高分棋步索引, 空白型, , , 
.局部变量 最低分棋步索引, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 得分, 空白型, , , 
.局部变量 最高得分, 空白型, , , 
.局部变量 最低得分, 空白型, , , 

赋值 (最高得分)

.子程序 递归计算得分, 整数型, , 递归计算某一棋位多次交互落子之后的综合得分
.参数 参棋形数组, 空白型, 数组, 
.参数 参边界矩形, 矩形, , 
.参数 参棋类型, 空白型, , #黑棋 或 #白棋
.参数 参递归深度, 空白型, , 

.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 得分, 空白型, , , 
.局部变量 本次得分, 空白型, , , 

.如果真 (小于或等于 (参递归深度, 0))
    返回 (0)
.如果真结束
.如果 (等于 (参递归深度, 1))
    赋值 (棋步和得分, 计算当前最佳落子位置 (参棋形数组, 参边界矩形, 参棋类型))
    赋值 (得分, 相乘 (棋步和得分.得分, 参棋类型))
    输出调试信息 (“递归深度为1的得分：” ＋ 到文本 (得分))
    返回 (得分)
.否则
    赋值 (棋步和得分, 计算当前最佳落子位置 (参棋形数组, 参边界矩形, 参棋类型))
    .如果真 ()

.子程序 延展边界, 空白型, , 
.参数 参边界, 矩形, , 
.参数 参延展宽度, 空白型, 可空, 可空，默认为1

.如果真 (是否为空 (参延展宽度))
    赋值 (参延展宽度, 1)
.如果真结束
赋值 (参边界.左, 相减 (参边界.左, 参延展宽度))
赋值 (参边界.上, 相减 (参边界.上, 参延展宽度))
赋值 (参边界.右, 相加 (参边界.右, 参延展宽度))
赋值 (参边界.下, 相加 (参边界.下, 参延展宽度))
赋值 (参边界.左, 选择 (小于 (参边界.左, 1), 1, 参边界.左))
赋值 (参边界.上, 选择 (小于 (参边界.上, 1), 1, 参边界.上))
赋值 (参边界.右, 选择 (大于 (参边界.右, 15), 15, 参边界.右))
赋值 (参边界.下, 选择 (大于 (参边界.下, 15), 15, 参边界.下))

.子程序 修改边界, 空白型, , 
.参数 参边界, 矩形, , 
.参数 参横, 空白型, , 棋步的横纵坐标
.参数 参纵, 空白型, , 

赋值 (参边界.左, 选择 (小于 (参横, 参边界.左), 参横, 参边界.左))
赋值 (参边界.右, 选择 (大于 (参横, 参边界.右), 参横, 参边界.右))
赋值 (参边界.上, 选择 (小于 (参纵, 参边界.上), 参纵, 参边界.上))
赋值 (参边界.下, 选择 (大于 (参纵, 参边界.下), 参纵, 参边界.下))

.子程序 禁手判断, 整数型, , 0:非禁手
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 

.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 综合棋形, 空白型, , , 

.如果真 (等于 (.选中, 假))
    返回 (0)
.如果真结束
.如果真 (等于 (参棋步.棋类型, #白棋))
    返回 (0)
.如果真结束
赋值 (综合棋形和得分, 计算综合棋形和得分 (参棋形数组, 参棋步))
赋值 (综合棋形, 综合棋形和得分.综合棋形)
输出调试信息 (“综合棋形：” ＋ 到文本 (综合棋形和得分.综合棋形))
.如果真 (等于 (综合棋形, #活三活三))
    返回 (#三三禁手)
.如果真结束
.如果真 (或者 (等于 (综合棋形, #活四活四), 等于 (综合棋形, #活四死四), 等于 (综合棋形, #死四死四)))
    返回 (#四四禁手)
.如果真结束
.如果真 (是否为长连 (参棋形数组, 参棋步))
    返回 (#长连禁手)
.如果真结束
返回 (0)

.子程序 是否为长连, 逻辑型, , 
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 

.局部变量 单向棋形, 单向棋形, , "4", 
.局部变量 棋个数, 空白型, , , 
.局部变量 i, 空白型, , , 

赋值 (单向棋形 [1], 计算长连棋形 (参棋形数组, 参棋步, 1, 0))
赋值 (单向棋形 [2], 计算长连棋形 (参棋形数组, 参棋步, 0, 1))
赋值 (单向棋形 [3], 计算长连棋形 (参棋形数组, 参棋步, 1, 1))
赋值 (单向棋形 [4], 计算长连棋形 (参棋形数组, 参棋步, -1, 1))
赋值 (棋个数, 单向棋形 [1].棋个数)
.计次循环首 (3, i)
    .如果真 (小于 (棋个数, 单向棋形 [相加 (i, 1)].棋个数))
        赋值 (棋个数, 单向棋形 [相加 (i, 1)].棋个数)
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (棋个数, 5))
    返回 (真)
.如果真结束
返回 (假)

.子程序 计算长连棋形, 单向棋形, , 
.参数 参棋形数组, 空白型, 数组, 
.参数 参棋步, 棋步, , 
.参数 左, 空白型, , 
.参数 顶, 空白型, , 

.局部变量 单向棋形, 单向棋形, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 i, 空白型, , , 

赋值 (单向棋形.棋类型, 参棋步.棋类型)
赋值 (单向棋形.左堵, 假)
赋值 (单向棋形.右堵, 假)
赋值 (单向棋形.棋个数, 1)
赋值 (单向棋形.空个数, 0)
.计次循环首 (5, i)
    赋值 (x, 相减 (参棋步.横, 相乘 (i, 左)))
    赋值 (y, 相减 (参棋步.纵, 相乘 (i, 顶)))
    .如果真 (或者 (小于 (x, 1), 大于 (x, 15), 小于 (y, 1), 大于 (y, 15)))
        赋值 (单向棋形.左堵, 真)
        跳出循环 ()
    .如果真结束
    .如果 (等于 (参棋形数组 [x] [y], 参棋步.棋类型))
        赋值 (单向棋形.棋个数, 相加 (单向棋形.棋个数, 1))
    .否则
        跳出循环 ()
    .如果结束
    
.计次循环尾 ()
.计次循环首 (5, i)
    赋值 (x, 相加 (参棋步.横, 相乘 (i, 左)))
    赋值 (y, 相加 (参棋步.纵, 相乘 (i, 顶)))
    .如果真 (或者 (小于 (x, 1), 大于 (x, 15), 小于 (y, 1), 大于 (y, 15)))
        赋值 (单向棋形.右堵, 真)
        跳出循环 ()
    .如果真结束
    .如果 (等于 (参棋形数组 [x] [y], 参棋步.棋类型))
        赋值 (单向棋形.棋个数, 相加 (单向棋形.棋个数, 1))
    .否则
        跳出循环 ()
    .如果结束
    
.计次循环尾 ()
返回 (单向棋形)

.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (_启动窗口.标题, 相加 (#程序标题, “--”, #程序版本))
赋值 (.宽度, .宽度)
赋值 (.高度, .高度)
赋值 (.画板背景色, .画板背景色)
画棋盘 (画板棋盘)
新游戏 ()
画棋盘 ()

赋值 (全运行目录, 取运行目录 ())
连续赋值 (全运行目录, .初始目录, .初始目录, .初始目录)
.如果真 (是否为调试版 ())
    赋值 (.可视, 真)
.如果真结束


.子程序 新游戏, 空白型, , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 

置随机数种子 ()
.清除 ()
.如果真 (.选中)
    赋值 (.底图, #底图)
    赋值 (.底图, #底图)
.如果真结束

画棋盘 ()
画棋盘 ()
移动鼠标外形框 (8, 8)
赋值 (.可视, 真)
赋值 (.可视, 假)

赋值 (.标题, #轮到您下)
赋值 (.标题, 相加 (#总步数, “0”))
赋值 (.标题, “0秒”)
赋值 (.时钟周期, 1000)

赋值 (全计时, 0)
赋值 (全已结束, 假)
赋值 (全电脑在思考, 假)
赋值 (全正在自动下棋, 假)
赋值 (#黑棋)
重定义数组 (全棋形数组, 假, 15, 15)
重定义数组 (全历史棋步, 假, 0)
重定义数组 (全历史图片, 假, 0)
清盘 ()
连续赋值 (-1, 全边界矩形.左, 全边界矩形.顶, 全边界矩形.右, 全边界矩形.下)
赋值 (进攻指数, #防守指数)
.如果真 (.选中)
    赋值 (进攻指数, #防守指数)
.如果真结束
.如果真 (.选中)
    赋值 (进攻指数, #进攻指数)
.如果真结束
.如果真 (.选中)
    赋值 (进攻指数, #冒进指数)
.如果真结束
全人机对战 ＝ 选择 (人机对战.选中, 真, 假)

赋值 (全边界矩形.左, 16)
赋值 (全边界矩形.下, -1)
赋值 (全边界矩形.上, 16)
赋值 (全边界矩形.右, -1)
赋值 (全递归深度, 1)

.如果真 (是否已创建 (窗口调试))
    赋值 (窗口调试..内容, “”)
    输出调试信息 (相加 (“单死除数：”, 到文本 (#单死除数)))
    输出调试信息 (相加 (“进攻指数：”, 到文本 (进攻指数)))
    赋值 (窗口调试..位置, 相乘 (进攻指数, 100))
    赋值 (窗口调试..标题, 到文本 (进攻指数))
    连续赋值 (0, 全调试最高比和, 全调试最高比个数, 全高分比)
    窗口调试.清除 (., , , , )
.如果真结束


.子程序 画棋盘, 空白型, , 
.参数 某画板, 画板, , 

.局部变量 i, 空白型, , , 

画棋格
赋值 (某画板.刷子类型, 0)
赋值 (某画板.画笔粗细, 1)
赋值 (某画板.画笔颜色, #黑色)
.计次循环首 (15, i)
    某画板.画直线 (#格宽度, 相乘 (#格宽度, i), 相乘 (#格宽度, 15), 相乘 (#格宽度, i))
    某画板.画直线 (相乘 (#格宽度, i), #格宽度, 相乘 (#格宽度, i), 相乘 (#格宽度, 15))
.计次循环尾 ()
画粗边框
赋值 (某画板.画笔粗细, 3)
某画板.画矩形 (相减 (#格宽度, 8), 相减 (#格宽度, 8), 相加 (相乘 (#格宽度, 15), 7), 相加 (相乘 (#格宽度, 15), 7))
画点
画小点 (某画板, 8, 8)
画小点 (某画板, 4, 4)
画小点 (某画板, 4, 12)
画小点 (某画板, 12, 4)
画小点 (某画板, 12, 12)

.子程序 画小点, 空白型, , 
.参数 某画板, 画板, , 
.参数 x, 空白型, , 1-15
.参数 y, 空白型, , 1-15

赋值 (某画板.刷子类型, 1)
赋值 (某画板.刷子颜色, #黑色)
某画板.画椭圆 (相减 (相乘 (#格宽度, x), #点半径), 相减 (相乘 (#格宽度, y), #点半径), 相加 (相乘 (#格宽度, x), #点半径), 相加 (相乘 (#格宽度, y), #点半径))

.子程序 画胜利线, 空白型, , 
.参数 首横, 空白型, , 
.参数 首纵, 空白型, , 
.参数 尾横, 空白型, , 
.参数 尾纵, 空白型, , 

赋值 (.画笔粗细, 5)
赋值 (.画笔颜色, #红色)
相乘 (首横, #格宽度).画直线 (相乘 (首纵, #格宽度), 相乘 (尾横, #格宽度), 相乘 (尾纵, #格宽度))

.子程序 画棋子_改棋形_改边界_判断胜负, 空白型, , 
.参数 参棋步, 棋步, , 

画棋子 (参棋步)
移动上次棋子外形框 (参棋步.横, 参棋步.纵)
赋值 (.可视, 真)

赋值 (全上次棋步.横, 参棋步.横)
赋值 (全上次棋步.纵, 参棋步.纵)
赋值 (全上次棋步.棋类型, 参棋步.棋类型)
修改棋形数组的相关数据
赋值 (全棋形数组 [参棋步].横 [参棋步].纵, 参棋步.棋类型)
修改边界矩形，以便于判断和计算
修改边界 (全边界矩形, 参棋步.横, 参棋步.纵)
判断胜负
.如果真 (等于 (判断胜负 (全棋形数组, 参棋步), #黑棋))
    画胜利线 (全赢线始横, 全赢线始纵, 全赢线终横, 全赢线终纵)
    .如果 (.选中)
        赋值 (.标题, #你赢)
        信息框 (#你赢, 0, #程序标题)
    .否则
        赋值 (.标题, #黑棋胜)
        信息框 (#黑棋胜, 0, #程序标题)
    .如果结束
    赋值 (全已结束, 真)
.如果真结束
.如果真 (等于 (判断胜负 (全棋形数组, 参棋步), #白棋))
    画胜利线 (全赢线始横, 全赢线始纵, 全赢线终横, 全赢线终纵)
    .如果 (.选中)
        赋值 (.标题, #电脑赢)
        信息框 (#电脑赢, 0, #程序标题)
    .否则
        赋值 (.标题, #白棋胜)
        信息框 (#白棋胜, 0, #程序标题)
    .如果结束
    赋值 (全已结束, 真)
.如果真结束

.如果真 (全已结束)
    赋值 (.时钟周期, 0)
    画棋子序号 ()
    返回 ()
.如果真结束
赋值 (全棋子, 负 (全棋子))


.子程序 _画板棋盘_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 

赋值 (x, 四舍五入 (相除 (横向位置, #格宽度), ))
赋值 (y, 四舍五入 (相除 (纵向位置, #格宽度), ))
输出调试文本 (到文本 (x) ＋ “,” ＋ 到文本 (y))
移动鼠标外形框 (x, y)
赋值 (.标题, 相加 (“当前位置：”, 到文本 (x), “,”, 到文本 (y)))

.子程序 移动鼠标外形框, 空白型, , 
.参数 x, 空白型, , 0-15
.参数 y, 空白型, , 0-15

.如果真 (或者 (等于 (x, 0), 等于 (y, 0), 等于 (x, 16), 等于 (y, 16)))
    返回 ()
.如果真结束
赋值 (.左边, 相减 (相加 (.左边, 相乘 (x, #格宽度)), 4))
赋值 (.顶边, 相减 (相加 (.顶边, 相乘 (y, #格宽度)), 4))
赋值 (全光标横, x)
赋值 (全光标纵, y)

.子程序 移动上次棋子外形框, 空白型, , 
.参数 x, 空白型, , 
.参数 y, 空白型, , 

.局部变量 _x, 空白型, , , 
.局部变量 _y, 空白型, , , 

赋值 (_x, 相减 (相加 (.左边, 相乘 (x, #格宽度)), 7))
赋值 (_y, 相减 (相加 (.顶边, 相乘 (y, #格宽度)), 7))
_x.移动 (_y, , )

.子程序 _画板棋盘_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 棋步, 棋步, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 r, 空白型, , , 

如果已经结束了
.如果真 (或者 (全已结束, 全正在自动下棋))
    返回 ()
.如果真结束
如果电脑在思考
.如果真 (并且 (.选中, 全电脑在思考))
    返回 ()
.如果真结束
如果已经有棋了
.如果真 (或者 (等于 (全棋形数组 [全光标横] [全光标纵], #黑棋), 等于 (全棋形数组 [全光标横] [全光标纵], #白棋)))
    返回 ()
.如果真结束
棋形数组 [光标横] [光标纵] ＝ 棋子
赋值 (棋步.横, 全光标横)
赋值 (棋步.纵, 全光标纵)
赋值 (棋步.棋类型, 全棋子)
赋值 (r, 禁手判断 (全棋形数组, 棋步))
.如果真 (等于 (r, #三三禁手))
    赋值 (.标题, 相加 (#五子棋规则, #三三禁手提示))
    信息框 (相加 (#五子棋规则, #三三禁手提示, #换行符, #换行符, #提示查看规则), 0, #程序标题)
    返回 ()
.如果真结束
.如果真 (等于 (r, #四四禁手))
    赋值 (.标题, 相加 (#五子棋规则, #四四禁手提示))
    信息框 (相加 (#五子棋规则, #四四禁手提示, #换行符, #换行符, #提示查看规则), 0, #程序标题)
    返回 ()
.如果真结束
.如果真 (等于 (r, #长连禁手))
    赋值 (.标题, 相加 (#五子棋规则, #长连禁手提示))
    信息框 (相加 (#五子棋规则, #长连禁手提示, #换行符, #换行符, #提示查看规则), 0, #程序标题)
    返回 ()
.如果真结束
赋值 (综合棋形和得分, 计算综合棋形和得分 (全棋形数组, 棋步))
输出调试信息 (“该点综合得分：” ＋ 到文本 (综合棋形和得分.综合得分))
输出调试信息 (“该点综合棋形：” ＋ 到文本 (综合棋形和得分.综合棋形))

画棋子_改棋形_改边界_判断胜负 (棋步)
.如果真 (并且 (等于 (全已结束, 假), .选中))
    置等待鼠标 ()
    赋值 (全电脑在思考, 真)
    赋值 (.标题, #电脑在思考)
    .如果真 (.选中)
        .如果 (小于 (取数组成员数 (全历史棋步), 14))
            赋值 (棋步和得分, 计算当前最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
            赋值 (棋步, 棋步和得分.棋步)
        .否则
            赋值 (棋步, 递归计算最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
        .如果结束
        
    .如果真结束
    .如果真 (.选中)
        赋值 (棋步和得分, 计算当前最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
        赋值 (棋步, 棋步和得分.棋步)
    .如果真结束
    .如果真 (.选中)
        赋值 (棋步, 递归计算最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
    .如果真结束
    画棋子_改棋形_改边界_判断胜负 (棋步)
    恢复鼠标 ()
    赋值 (全电脑在思考, 假)
    赋值 (.标题, #轮到您下)
.如果真结束


.子程序 判断胜负, 整数型, , 
.参数 参棋形数组, 整数型, 数组, 
.参数 参棋步, 棋步, , 

.局部变量 单向棋形得分数组, 单向棋形, , "4", 
.局部变量 排序后的单向棋形数组, 单向棋形, , "4", 
.局部变量 i, 空白型, , , 

赋值 (单向棋形得分数组 [1], 计算单向棋形和得分 (1, 0))
赋值 (单向棋形得分数组 [2], 计算单向棋形和得分 (0, 1))
赋值 (单向棋形得分数组 [3], 计算单向棋形和得分 (1, 1))
赋值 (单向棋形得分数组 [4], 计算单向棋形和得分 (-1, 1))
排序单向棋形数组 (单向棋形得分数组, 排序后的单向棋形数组)
数组排序 (棋形和得分数组, )
.如果真 (并且 (等于 (排序后的单向棋形数组 [1].棋个数, 5), 等于 (排序后的单向棋形数组 [1].空个数, 0), 等于 (排序后的单向棋形数组 [1].对方是否有禁手, 假)))
    返回 (参棋步.棋类型)
.如果真结束
返回 (0)

.子程序 _外形框鼠标定位_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

_画板棋盘_鼠标左键被放开 (相减 (.左边, .左边), 相减 (.顶边, .顶边), 功能键状态)

.子程序 _新局_被选择, 空白型, , 
新游戏 ()

.子程序 计算并落子, 空白型, , 
.参数 参棋形数组, 整数型, 数组, 
.参数 参边界矩形, 矩形, , 

.局部变量 黑棋步和得分数组, 棋步和得分, , "0", 
.局部变量 白棋步和得分数组, 棋步和得分, , "0", 
.局部变量 相交棋步和得分数组, 棋步和得分, , "0", 
.局部变量 黑最高分, 双精度小数型, , , 
.局部变量 白最高分, 双精度小数型, , , 
.局部变量 待下棋步, 棋步, , , 
.局部变量 随机步索引, 整数型, , , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 项数, 整数型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 

赋值 (全电脑在思考, 真)
赋值 (.标题, #电脑在思考)
.如果真 (计算最高分位置 (参棋形数组, 参边界矩形, #白棋, 白棋步和得分数组))
    赋值 (全电脑在思考, 假)
    赋值 (.标题, #轮到您下)
    返回 ()
.如果真结束
.如果真 (计算最高分位置 (参棋形数组, 参边界矩形, #黑棋, 黑棋步和得分数组))
    赋值 (全电脑在思考, 假)
    赋值 (.标题, #轮到您下)
    返回 ()
.如果真结束

赋值 (白最高分, 白棋步和得分数组 [1].得分)
赋值 (黑最高分, 黑棋步和得分数组 [1].得分)
求黑棋和白棋最高得分的相交棋步
.计次循环首 (取数组成员数 (白棋步和得分数组), i)
    .计次循环首 (取数组成员数 (黑棋步和得分数组), j)
        .如果真 (并且 (等于 (白棋步和得分数组 [i], 棋步.横, 黑棋步和得分数组 [j], 棋步.横), 等于 (白棋步和得分数组 [i], 棋步.纵, 黑棋步和得分数组 [j], 棋步.纵)))
            加入成员 (相交棋步和得分数组, 白棋步和得分数组 [i])
        .如果真结束
        
    .计次循环尾 ()
.计次循环尾 ()

.如果真 (窗口调试.可视)
    输出调试信息 (“===============================”)
    输出调试信息 (“白棋最高分棋步和得分数组：”)
    .计次循环首 (取数组成员数 (白棋步和得分数组), i)
        输出调试信息 (相加 (到文本 (白棋步和得分数组 [i], 棋步.横), “,”, 到文本 (白棋步和得分数组 [i], 棋步.纵), “,”, 到文本 (白棋步和得分数组 [i], 得分)))
    .计次循环尾 ()
    输出调试信息 (“黑棋最高分棋步和得分数组：”)
    .计次循环首 (取数组成员数 (黑棋步和得分数组), i)
        输出调试信息 (相加 (到文本 (黑棋步和得分数组 [i], 棋步.横), “,”, 到文本 (黑棋步和得分数组 [i], 棋步.纵), “,”, 到文本 (黑棋步和得分数组 [i], 得分)))
    .计次循环尾 ()
    输出调试信息 (“相交棋步和得分数组：”)
    .计次循环首 (取数组成员数 (相交棋步和得分数组), i)
        输出调试信息 (相加 (到文本 (相交棋步和得分数组 [i], 棋步.横), “,”, 到文本 (相交棋步和得分数组 [i], 棋步.纵), “,”, 到文本 (相交棋步和得分数组 [i], 得分)))
    .计次循环尾 ()
    输出调试信息 (“--------------------”)
    赋值 (x, 相乘 (全调试最高比个数, 7))
    赋值 (y, 相减 (100, 四舍五入 (相乘 (10), )))
    窗口调试.画直线 (., x, y, 相加 (x, 7), 相减 (100, 四舍五入 (相除 (相乘 (黑最高分, 10), 白最高分), )))
    赋值 (相除 (黑最高分, 白最高分))
    输出调试信息 (相加 (“黑白棋最高分比：”, 到文本 ()))
    赋值 (全调试最高比和, 相加 (全调试最高比和, ))
    赋值 (全调试最高比个数, 相加 (全调试最高比个数, 1))
    输出调试信息 (相加 (“最高分比平均值：”, 到文本 (相除 (全调试最高比和, 全调试最高比个数))))
.如果真结束

如果有相交的部分，则下到相交的部分
赋值 (项数, 取数组成员数 (相交棋步和得分数组))
.如果真 (大于或等于 (取数组成员数 (相交棋步和得分数组), 1))
    .如果 (小于 (项数, 3))
        赋值 (随机步索引, 求最小距离棋步 (相交棋步和得分数组))
    .否则
        赋值 (随机步索引, 取随机数 (1, 项数))
    .如果结束
    赋值 (随机步索引, 求最小距离棋步 (相交棋步和得分数组))
    赋值 (待下棋步, 相交棋步和得分数组 [随机步索引], 棋步)
    画棋子_改棋形_改边界_判断胜负 (待下棋步)
    赋值 (全电脑在思考, 假)
    赋值 (.标题, #轮到您下)
    返回 ()
.如果真结束

如果白棋（电脑方）得分高，则随便下子
.如果真 (大于或等于 (相乘 (白最高分, 进攻指数), 黑最高分))
    赋值 (项数, 取数组成员数 (白棋步和得分数组))
    .如果 (小于 (项数, 3))
        赋值 (随机步索引, 求最小距离棋步 (白棋步和得分数组))
    .否则
        在棋步数组的中间随机取值
        赋值 (随机步索引, 相减 (相加 (取整 (相除 (项数, 2)), 取随机数 (1, 相加 (取整 (相除 (项数, 2)), 1))), 1))
        .如果真 (等于 (随机步索引, 1))
            赋值 (随机步索引, 2)
        .如果真结束
        .如果真 (等于 (随机步索引, 项数))
            赋值 (随机步索引, 相减 (项数, 1))
        .如果真结束
        
    .如果结束
    赋值 (随机步索引, 求最小距离棋步 (白棋步和得分数组))
    赋值 (待下棋步, 白棋步和得分数组 [随机步索引], 棋步)
    画棋子_改棋形_改边界_判断胜负 (待下棋步)
    赋值 (全电脑在思考, 假)
    赋值 (.标题, #轮到您下)
    返回 ()
.如果真结束

否则下到黑棋的地方
赋值 (项数, 取数组成员数 (黑棋步和得分数组))
.如果 (小于 (项数, 3))
    赋值 (随机步索引, 求最小距离棋步 (黑棋步和得分数组))
.否则
    在棋步数组的中间随机取值
    赋值 (随机步索引, 相减 (相加 (取整 (相除 (项数, 2)), 取随机数 (1, 相加 (取整 (相除 (项数, 2)), 1))), 1))
    .如果真 (等于 (随机步索引, 1))
        赋值 (随机步索引, 2)
    .如果真结束
    .如果真 (等于 (随机步索引, 项数))
        赋值 (随机步索引, 相减 (项数, 1))
    .如果真结束
    
.如果结束
赋值 (随机步索引, 求最小距离棋步 (黑棋步和得分数组))
赋值 (待下棋步, 黑棋步和得分数组 [随机步索引], 棋步)
赋值 (待下棋步.棋类型, #白棋)
赋值 (全电脑在思考, 假)
赋值 (.标题, #轮到您下)
画棋子_改棋形_改边界_判断胜负 (待下棋步)
返回 ()


.子程序 求最小距离棋步, 整数型, , 返回离盘心距离最近的棋步的索引
.参数 某棋步和得分数组, 棋步和得分, 数组, 

.局部变量 标志, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 最小距离, 整数型, , , 
.局部变量 距离, 空白型, , , 
.局部变量 最小距离棋步索引数组, 整数型, , "0", 有可能几个棋步索引相同

赋值 (最小距离, 10000)
.计次循环首 (取数组成员数 (某棋步和得分数组), i)
    赋值 (距离, 相加 (求次方 (相减 (某棋步和得分数组 [i], 棋步.横, 8), 2), 求次方 (相减 (某棋步和得分数组 [i], 棋步.纵, 8), 2)))
    .如果真 (小于 (距离, 最小距离))
        赋值 (最小距离, 距离)
        赋值 (标志, i)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (某棋步和得分数组), i)
    赋值 (距离, 相加 (求次方 (相减 (某棋步和得分数组 [i], 棋步.横, 8), 2), 求次方 (相减 (某棋步和得分数组 [i], 棋步.纵, 8), 2)))
    .如果真 (等于 (距离, 最小距离))
        加入成员 (最小距离棋步索引数组, i)
    .如果真结束
    
.计次循环尾 ()
返回 (最小距离棋步索引数组 [取随机数 (1, 取数组成员数 (最小距离棋步索引数组))])

.子程序 计算最高分位置, 逻辑型, , 如果下一步就赢棋，返回真；否则返回假
.参数 参棋形数组, 整数型, 数组, 
.参数 参边界矩形, 矩形, , 
.参数 参棋子类型, 整数型, , #黑棋或#白棋
.参数 参棋步和得分数组, 棋步和得分, 数组, 用以返回能够获得最高分的落子的位置的数组，用于　计算并落子（）　子程序中

.局部变量 边界矩形, 矩形, , , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 k, 空白型, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 棋步和得分数组, 棋步和得分, , "0", 
.局部变量 综合棋形和得分, 棋形和得分, , , 
.局部变量 棋步, 棋步, , , 
.局部变量 横, 空白型, , , 
.局部变量 纵, 空白型, , , 
.局部变量 得分, 整数型, , , 当前棋位的总得分
.局部变量 临时棋形数组, 整数型, , "0", 仅用于判断胜负中不影响原棋形数组
.局部变量 最高分, 整数型, , , 
.局部变量 临时数值, 空白型, , , 
.局部变量 得分数组, 整数型, , "0", 

赋值 (最高分, 0)
赋值 (边界矩形, 参边界矩形)
延展边界 (边界矩形, #边界扩展宽度)

逐一计算边界矩形内每一个棋位的得分
.变量循环首 (边界矩形.左, 边界矩形.右, 1, i)
    .变量循环首 (边界矩形.上, 边界矩形.下, 1, j)
        赋值 (棋步.横, i)
        赋值 (棋步.纵, j)
        赋值 (棋步.棋类型, 参棋子类型)
        如果已经落子了，则计算下一个棋位
        .如果真 (不等于 (参棋形数组 [棋步].横 [棋步].纵, 0))
            到循环尾 ()
        .如果真结束
        
        复制数组 (临时棋形数组, 参棋形数组)
        赋值 (临时棋形数组 [棋步].横 [棋步].纵, 棋步.棋类型)
        .如果真 (等于 (判断胜负 (临时棋形数组, 棋步), 棋步.棋类型))
            如果下一步必胜，则直接落子
            赋值 (棋步.棋类型, #白棋)
            画棋子_改棋形_改边界_判断胜负 (棋步)
            返回 (真)
        .如果真结束
        
        得分 ＝ 计算综合得分 (参棋形数组, 棋步)
        赋值 (综合棋形和得分, 计算综合棋形和得分 (参棋形数组, 棋步))
        赋值 (得分, 综合棋形和得分.综合得分)
        赋值 (最高分, 选择 (大于 (得分, 最高分), 得分, 最高分))
        赋值 (棋步和得分.棋步, 棋步)
        赋值 (棋步和得分.得分, 得分)
        加入成员 (棋步和得分数组, 棋步和得分)
        
        .如果真 (窗口调试.可视)
            .如果 (等于 (棋步和得分.棋步.棋类型, #黑棋))
                输出调试信息 (相加 (“黑棋：”, 到文本 (棋步.横), “,”, 到文本 (棋步.纵), “,”, 到文本 (得分)))
            .否则
                输出调试信息 (相加 (“白棋：”, 到文本 (棋步.横), “,”, 到文本 (棋步.纵), “,”, 到文本 (得分)))
            .如果结束
            
        .如果真结束
        
    .变量循环尾 ()
.变量循环尾 ()
挑出得分最高的棋位，并填充入将返回的数组中
.计次循环首 (取数组成员数 (棋步和得分数组), i)
    .如果真 (或者 (等于 (棋步和得分数组 [i], 得分, 最高分), 大于 (棋步和得分数组 [i], 得分, 9000)))
        加入成员 (参棋步和得分数组, 棋步和得分数组 [i])
    .如果真结束
    
.计次循环尾 ()
返回 (假)

.子程序 _人机对战_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (.选中, 取反 (.选中))

.子程序 _人人对战_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (.选中, 取反 (.选中))

.子程序 _显示底图_被选择, 空白型, , 
.局部变量 历史棋步, 棋步, , "0", 

赋值 (.选中, 取反 (.选中))
.如果 (.选中)
    赋值 (.底图, #底图)
    赋值 (.底图, #底图)
.否则
    赋值 (.底图, {  })
    赋值 (.底图, {  })
.如果结束
复制数组 (历史棋步, 全历史棋步)
重定义数组 (全历史棋步, 假, 0)
重定义数组 (全历史图片, 假, 0)
画棋盘 ()
画棋盘 ()
清盘 ()
画已下棋子 (历史棋步)

.子程序 清盘, 空白型, , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 

.计次循环首 (15, i)
    .计次循环首 (15, j)
        赋值 (全棋形数组 [i] [j], 0)
    .计次循环尾 ()
.计次循环尾 ()

.子程序 画已下棋子, 空白型, , 
.参数 参历史棋步, 棋步, 数组, 

.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 棋步, 棋步, , , 
.局部变量 步数, 空白型, , , 

赋值 (步数, 取数组成员数 (参历史棋步))
.计次循环首 (步数, i)
    画棋子_改棋形_改边界_判断胜负 (参历史棋步 [i])
.计次循环尾 ()
返回 ()

.子程序 画棋子, 空白型, , 仅仅在棋盘的指定位置画棋子
.参数 参棋步, 棋步, , 

.局部变量 图片号, 空白型, , , 
.局部变量 历史步数, 空白型, , , 

.如果真 (等于 (参棋步.棋类型, 0))
    返回 ()
.如果真结束
.如果真 (等于 (参棋步.棋类型, #黑棋))
    赋值 (图片号, 载入图片 (#黑棋图))
.如果真结束
.如果真 (等于 (参棋步.棋类型, #白棋))
    赋值 (图片号, 载入图片 (#白棋图))
.如果真结束
.画图片 (相减 (相乘 (.横, #格宽度), 16), 相减 (相乘 (.纵, #格宽度), 16), , , )
卸载图片 ()

加入成员 (全历史棋步, 参棋步)
赋值 (历史步数, 取数组成员数 (全历史棋步))
赋值 (.标题, 相加 (#总步数, 到文本 (历史步数)))
相减 (相乘 (参棋步.横, #格宽度), 16).复制 (相减 (相乘 (参棋步.纵, #格宽度), 16), #格宽度, #格宽度, , , , )
加入成员 (全历史图片, .取图片 ())

.如果真 (并且 (等于 (历史步数, 100), .选中))
    赋值 (全已结束, 真)
    赋值 (.标题, #和棋)
    信息框 (#和棋, 0, #程序标题)
.如果真结束


.子程序 画棋子序号, 空白型, , 
.参数 某画板, 画板, , 

.局部变量 i, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 

赋值 (某画板.字体.字体大小, 18)
.计次循环首 (取数组成员数 (全历史棋步), i)
    .如果真 (假)
        .如果真 (等于 (全历史棋步 [i], 棋类型, #黑棋))
            赋值 (某画板.文本颜色, #白色)
        .如果真结束
        .如果真 (等于 (全历史棋步 [i], 棋类型, #白棋))
            赋值 (某画板.文本颜色, #黑色)
        .如果真结束
        
    .如果真结束
    赋值 (x, 相减 (相乘 (全历史棋步 [i], 横, #格宽度), 12))
    赋值 (y, 相减 (相乘 (全历史棋步 [i], 纵, #格宽度), 13))
    .如果真 (小于 (i, 10))
        赋值 (x, 相加 (x, 6))
    .如果真结束
    某画板.定位写出 (x, y, 到文本 (i))
.计次循环尾 ()

.子程序 悔棋, 空白型, , 
.参数 步数, 空白型, , 悔几步

.局部变量 历史步数, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 横, 空白型, , , 
.局部变量 纵, 空白型, , , 
.局部变量 图片号, 空白型, , , 
.局部变量 项索引, 空白型, , , 

.如果真 (小于或等于 (步数, 0))
    返回 ()
.如果真结束

赋值 (历史步数, 取数组成员数 (全历史棋步))
.如果真 (大于或等于 (步数, 历史步数))
    返回 ()
.如果真结束

.计次循环首 (步数, i)
    赋值 (项索引, 相加 (相减 (历史步数, i), 1))
    赋值 (横, 全历史棋步 [项索引], 横)
    赋值 (纵, 全历史棋步 [项索引], 纵)
    画棋子背景图片
    赋值 (全棋形数组 [横] [纵], 0)
    赋值 (图片号, 载入图片 (全历史图片 [项索引]))
    图片号.画图片 (相减 (相乘 (横, #格宽度), 16), 相减 (相乘 (纵, #格宽度), 16), , , )
    卸载图片 (图片号)
.计次循环尾 ()

移动外形框上次棋位
赋值 (历史步数, 相减 (历史步数, 步数))
赋值 (.标题, 相加 (#总步数, 到文本 (历史步数)))
重定义数组 (全历史图片, 真, 历史步数)
重定义数组 (全历史棋步, 真, 历史步数)
相减 (相乘 (全历史棋步 [历史步数], 横, #格宽度), 7).移动 (相减 (相乘 (全历史棋步 [历史步数], 纵, #格宽度), 7), , )
赋值 (全棋子, 负 (全历史棋步 [历史步数], 棋类型))
赋值 (全已结束, 假)


.子程序 _关于古木五子棋人机对战_被选择, 空白型, , 
载入 (窗口关于, _启动窗口, 真)

.子程序 _防守型_被选择, 空白型, , 
赋值 (进攻指数, #防守指数)
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _进攻型_被选择, 空白型, , 
赋值 (进攻指数, #进攻指数)
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (.选中, 假)

.子程序 _冒进型_被选择, 空白型, , 
赋值 (进攻指数, #冒进指数)
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 真)

.子程序 _悔棋一步_被选择, 空白型, , 
.局部变量 步数, 空白型, , , 

.如果真 (或者 (全电脑在思考, 全正在自动下棋))
    返回 ()
.如果真结束
.如果 (.选中)
    赋值 (步数, 取数组成员数 (全历史棋步))
    .如果 (等于 (求余数 (步数, 2), 0))
        悔棋 (2)
    .否则
        悔棋 (1)
    .如果结束
    返回 ()
.否则
    悔棋 (1)
.如果结束


.子程序 _显示棋序数字_被选择, 空白型, , 
.局部变量 历史棋步, 棋步, , "0", 
.局部变量 棋步, 棋步, , , 

.如果真 (全已结束)
    返回 ()
.如果真结束
赋值 (.选中, 取反 (.选中))
.如果 (.选中)
    画棋子序号 ()
.否则
    复制数组 (历史棋步, 全历史棋步)
    重定义数组 (全历史棋步, 假, 0)
    重定义数组 (全历史图片, 假, 0)
    清盘 ()
    画已下棋子 (历史棋步)
.如果结束


.子程序 _保存当前棋局为图片_被选择, 空白型, , 
.如果真 (打开 ())
    写到文件 (.文件名, .取图片 ())
.如果真结束


.子程序 _打印棋局_被选择, 空白型, , 
.局部变量 图片号, 空白型, , , 

.开始打印 ()
赋值 (图片号, 载入图片 (.取图片 ()))
图片号.画图片 (150, 150, 512, 512, )
卸载图片 (图片号)
结束打印 ()

.子程序 _退出_被选择, 空白型, , 
结束 ()

.子程序 _保存_被选择, 空白型, , 
.局部变量 文件号, 空白型, , , 
.局部变量 i, 空白型, , , 

.如果真 (打开 ())
    赋值 (文件号, 打开文件 (.文件名, #重写, #禁止写))
    .计次循环首 (取数组成员数 (全历史棋步), i)
        写出数据 (文件号, 全历史棋步 [i], 横)
        写出数据 (文件号, 全历史棋步 [i], 纵)
        写出数据 (文件号, 全历史棋步 [i], 棋类型)
    .计次循环尾 ()
    关闭文件 (文件号)
.如果真结束


.子程序 _载入_被选择, 空白型, , 
.局部变量 文件号, 空白型, , , 
.局部变量 某棋步, 棋步, , , 

.如果真 (打开 ())
    新游戏 ()
    赋值 (文件号, 打开文件 (.文件名, #读入, #禁止写))
    .判断循环首 (取反 (是否在文件尾 (文件号, )))
        读入数据 (文件号, 某棋步.横)
        读入数据 (文件号, 某棋步.纵)
        读入数据 (文件号, 某棋步.棋类型)
        画棋子_改棋形_改边界_判断胜负 (某棋步)
    .判断循环尾 ()
    关闭文件 (文件号)
    
.如果真结束


.子程序 _购买本程序源代码_被选择, 空白型, , 
载入 (窗口购买源码, _启动窗口, 假)

.子程序 _购买本程序源代码一_被选择, 空白型, , 
载入 (窗口购买源码, _启动窗口, 假)

.子程序 __启动窗口_将被销毁, 空白型, , 
.如果真 (是否已创建 (窗口调试))
    窗口调试.销毁 ()
.如果真结束


.子程序 __启动窗口_首次激活, 空白型, , 
载入 (窗口调试, , 假)
新游戏 ()

.子程序 _显示调试窗口_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (窗口调试.可视, .选中)
_启动窗口.获取焦点 ()

.子程序 _时钟_周期事件, 空白型, , 
.如果真 (全已结束)
    赋值 (.时钟周期, 0)
.如果真结束
赋值 (全计时, 相加 (全计时, 1))
赋值 (.标题, 相加 (到文本 (全计时), “秒”))


.子程序 __启动窗口_位置被改变, 空白型, , 
赋值 (窗口调试.左边, 相减 (_启动窗口.左边, 窗口调试.宽度))
赋值 (窗口调试.顶边, _启动窗口.顶边)

.子程序 _使用专业规则_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))

.子程序 _使用快速算法_被选择, 空白型, , 
赋值 (.选中, 真)
赋值 (.选中, 假)
赋值 (.选中, 假)

.子程序 _使用深度算法_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 真)
赋值 (.选中, 假)

.子程序 _自动切换_被选择, 空白型, , 
赋值 (.选中, 假)
赋值 (.选中, 假)
赋值 (.选中, 真)


.子程序 _自动下棋_被选择, 空白型, , 
.局部变量 i, 空白型, , , 
.局部变量 步数, 文本型, , , 
.局部变量 棋步和得分, 棋步和得分, , , 
.局部变量 棋步, 棋步, , , 

.如果真 (等于 (取数组成员数 (全历史棋步), 0))
    信息框 (“请先至少下一步棋子。”, 0, #程序标题)
    返回 ()
.如果真结束
.如果真 (取反 (输入框 (“请指定要自动下棋的步数：”, #程序标题, “10”, 步数, #输入整数)))
    返回 ()
.如果真结束
置等待鼠标 ()
赋值 (全正在自动下棋, 真)
.计次循环首 (到数值 (步数), i)
    处理事件 ()
    赋值 (.标题, #正在自动下棋)
    .如果真 (全已结束)
        跳出循环 ()
    .如果真结束
    .如果 (.选中)
        赋值 (棋步和得分, 计算当前最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
        赋值 (棋步, 棋步和得分.棋步)
    .否则
        赋值 (棋步, 递归计算最佳落子位置 (全棋形数组, 全边界矩形, 全棋子))
    .如果结束
    画棋子_改棋形_改边界_判断胜负 (棋步)
    分段延时 (2000)
.计次循环尾 ()
恢复鼠标 ()
赋值 (全正在自动下棋, 假)
赋值 (.标题, #自动下棋结束)

.子程序 分段延时, 空白型, , 
.参数 参时长, 空白型, , 

.局部变量 段数, 空白型, , , 

赋值 (段数, 相除 (参时长, 50))
.计次循环首 (段数, )
    处理事件 ()
    延时 (50)
.计次循环尾 ()

.子程序 _五子棋及其规则简介_被选择, 空白型, , 
载入 (窗口_五子棋及其规则简介, _启动窗口, 假)

.子程序 _五子棋术语介绍_被选择, 空白型, , 
载入 (窗口_五子棋术语介绍, _启动窗口, 假)

.窗口程序集 窗口程序集_关于, , , 

.子程序 _窗口关于_创建完毕, 空白型, , 
赋值 (窗口关于.标题, 相加 (“关于 ”, #程序标题))
赋值 (.内容, 相加 (#程序标题, “--”, #程序版本, #换行符, “作者：曾劲松（古木，goomoo）”, #换行符, “2004-8-28”, #换行符, “本程序采用自创的边界矩形算法、独特的权重计分法，使得电脑下子速度极快。强烈推荐试用！”, #换行符, “本程序使用易语言开发！”))

.窗口程序集 窗口程序集_购买源代码, , , 

.子程序 _窗口购买源码_创建完毕, 空白型, , 
.局部变量 数据, 字节集, , , 

赋值 (.标题, 相加 (#程序标题, “--”, #购买源码))
赋值 (数据, 未知支持库函数_4 (#购买信息, “goomoo.uuoo.com”, ))
赋值 (.内容, 到文本 (数据))

.子程序 _按钮打印_被单击, 空白型, , 
.局部变量 图片号, 整数型, , , 

赋值 (图片号, 载入图片 (快照 (窗口购买源码.取窗口句柄 (), , )))
_启动窗口.开始打印 (., , , , )

_启动窗口.打印机.写出 (到文本 (#购买信息))
_启动窗口.画图片 (., 图片号, 50, 50, , , )
_启动窗口.结束打印 (.)
卸载图片 (图片号)

.子程序 _按钮查看协议_被单击, 空白型, , 
载入 (窗口协议, _启动窗口, 真)

.窗口程序集 窗口程序集_调试窗口, , , 

.子程序 _窗口调试_创建完毕, 空白型, , 
赋值 (.左边, 相减 (_启动窗口.左边, .宽度))
赋值 (.顶边, _启动窗口.顶边)
赋值 (.高度, _启动窗口.高度)
赋值 (.标题, 相加 (#程序标题, “--调试窗口”))
编辑框调试输出.移动 (0, 0, 调试窗口.取用户区宽度 (), 调试窗口.取用户区高度 ())

赋值 (.标题, 到文本 (进攻指数))

.子程序 _窗口调试_尺寸被改变, 空白型, , 
赋值 (.宽度, 窗口调试.取用户区宽度 ())
赋值 (.宽度, .宽度)
赋值 (.左边, 相减 (.宽度, .宽度, 10))
赋值 (.宽度, .宽度)
赋值 (.高度, 相减 (窗口调试.取用户区高度 (), .顶边))
赋值 (.左边, 相减 (.宽度, .宽度, 1))

.子程序 _编辑框调试输出_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #Del键))
    赋值 (.内容, “”)
.如果真结束


.子程序 _窗口调试_可否被关闭, 逻辑型, , 
赋值 (.可视, 假)
赋值 (_启动窗口..选中, 假)
返回 (假)

.子程序 输出调试信息, 空白型, , 
.参数 信息, 文本型, , 

.如果真 (等于 (窗口调试.可视, 假))
    返回 ()
.如果真结束
赋值 (.内容, 相加 (.内容, 信息, #换行符))
赋值 (.起始选择位置, 相减 (取文本长度 (.内容), 1))
赋值 (.被选择字符数, 1)

.子程序 _滑块条_位置被改变, 空白型, , 
赋值 (进攻指数, 相除 (.位置, 100))
赋值 (.标题, 到文本 (进攻指数))

.子程序 _编辑框调试输出_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.内容, “”)

.窗口程序集 窗口程序集1, , , 

.子程序 _窗口协议_创建完毕, 空白型, , 
赋值 (窗口协议.标题, 相加 (#程序标题, “--源代码购买协议”))
赋值 (.内容, 相加 (#换行符, 到文本 (#协议)))

.子程序 _按钮确定_被单击, 空白型, , 
窗口协议.销毁 ()

.窗口程序集 窗口程序集2, , , 

.子程序 _窗口_五子棋及其规则简介_创建完毕, 空白型, , 
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())
赋值 (.内容, 到文本 (#五子棋简介))
赋值 (.标题, 相加 (#程序标题, “-五子棋及其规则简介”))

.子程序 _窗口_五子棋及其规则简介_尺寸被改变, 空白型, , 
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())

.窗口程序集 窗口程序集3, , , 

.子程序 _窗口_五子棋术语介绍_创建完毕, 空白型, , 
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())
赋值 (.内容, 到文本 (#五子棋术语介绍))
赋值 (.标题, 相加 (#程序标题, “-五子棋术语介绍”))

.子程序 _窗口_五子棋术语介绍_尺寸被改变, 空白型, , 
0.移动 (0, 取用户区宽度 (), 取用户区高度 ())



 ' 不属于任何一个程序集、类模块的函数：
