 ' 文件类型：Windows模块源码

 ' 程序名称：文件读写&文件映射模块
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 OF_READ, "0", , 以只读方式打开文件
.常量 OF_SHARE_COMPAT, "0", , 文件可由多个应用程序打开多次
.常量 OF_WRITE, "1", , 文件以只写模式打开
.常量 OF_READWRITE, "2", , 以可读、可写的方式打开文件
.常量 OPEN_ALWAYS, "4", , 
.常量 匿名常量_109, "8", , 
.常量 OF_SHARE_EXCLUSIVE, "16", , 其他任何一个程序都不能再打开这个文件
.常量 OF_SHARE_DENY_WRITE, "32", , 其他程序可以读文件，但不能写文件
.常量 OF_SHARE_DENY_READ, "48", , 禁止其他程序读写文件内容
.常量 OF_SHARE_DENY_NONE, "64", , 可打开文件，以便由其他程序读写
.常量 OF_PARSE, "256", , 填写lpReOpenBuff结构的内容，但不执行其他任何操作
.常量 OF_DELETE, "512", , 删除指定的文件
.常量 , , , 
.常量 OF_CREATE, "4096", , 创建指定的文件。如已经存在，则将其缩减为零长度
.常量 OF_PROMPT, "8192", , 如文件不存在，则显示一个消息框，在其中列出重试和取消按钮
.常量 OF_EXIST, "16384", , 通过尝试打开文件的做法，判断一个文件是否存在。如文件存在，则将其关闭。
.常量 OF_REOPEN, "32768", , 打开lpReOpenBuff结构内指定的文件，而不是用lpFileName参数
.常量 FORMAT_MESSAGE_FROM_SYSTEM, "4096", , 
.常量 FORMAT_MESSAGE_ARGUMENT_ARRAY, "8192", , 
.常量 GENERIC_READ, "2147483648", , ""
.常量 GENERIC_WRITE, "1073741824", , ""
.常量 FILE_SHARE_READ, "1", , ""
.常量 FILE_SHARE_WRITE, "2", , ""
.常量 OPEN_EXISTING, "3", , 
.常量 FILE_ATTRIBUTE_NORMAL, "128", , ""
.常量 CREATE_ALWAYS, "2", , 
.常量 FILE_CURRENT, "1", , 
.常量 FILE_BEGIN, "0", , 
.常量 FILE_END, "2", , 
.常量 FILE_FLAG_DELETE_ON_CLOSE, "67108864", , ""
.常量 PAGE_READONLY, "2", , ""
.常量 PAGE_READWRITE, "4", , ""
.常量 PAGE_WRITECOPY, "8", , ""
.常量 FILE_MAP_WRITE, "2", , 
.常量 FILE_MAP_READ, "4", , 
.常量 FILE_MAP_ALL_ACCESS, "983071", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 1 0 数据操作支持库一




数据类型 SECURITY_ATTRIBUTES, , 
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 MEMORY_BASIC_INFORMATION, , ""
    .成员 BaseAddress, 整数型, , , 
    .成员 AllocationBase, 整数型, , , 
    .成员 AllocationProtect, 整数型, , , 
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 lType, 整数型, , , 


.DLL命令 WriteFile, 逻辑型, "kernel32.dll", "WriteFile", , （非零）表示成功，否则返回零。
    .参数 文件句柄, 整数型, , hFile，一个文件的句柄
    .参数 数据缓冲区, 字节集, 传址, lpBuffer，要写入的一个数据缓冲区
    .参数 欲写入字节数量, 整数型, , nNumberOfBytesToWrite，要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 实际写入字节数量, 整数型, 传址, lpNumberOfBytesWritten，实际写入文件的字节数量
    .参数 特殊结构, 整数型, , lpOverlapped，倘若在指定FILE_FLAG_OVERLAPPED的前提下打开文件，这个参数就必须引用一个特殊的结构。那个结构定义了一次异步写操作。否则，该参数应置为空（将声明变为ByVal As Long，并传递零值）

.DLL命令 CloseHandle, 整数型, "kernel32", "CloseHandle", , 
    .参数 对象句柄, 整数型, , 

.DLL命令 GetFileSize, 整数型, "kernel32.dll", "GetFileSize", , 
    .参数 文件号, 整数型, , hFile
    .参数 文件尺寸, 整数型, 传址, lpFileSize

.DLL命令 GetLastError, 整数型, "kernel32", "GetLastError", , 

.DLL命令 FormatMessage, 整数型, "kernel32.dll", "FormatMessageA", , 
    .参数 dwFlags, 整数型, , 
    .参数 lpSource, 整数型, , Any
    .参数 消息ID, 整数型, , 
    .参数 语言ID, 整数型, , 现在系统不支持了，置0
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区大小, 整数型, , 
    .参数 Arguments, 整数型, , 

.DLL命令 ReadFile, 整数型, "kernel32", "ReadFile", , ""
    .参数 hFile, 整数型, , 文件的句柄
    .参数 lpBuffer, 字节集, 传址, 用于保存读入数据的一个缓冲区
    .参数 nNumberOfBytesToRead, 整数型, , 要读入的字符数
    .参数 lpNumberOfBytesRead, 整数型, 传址, 从文件中实际读入的字符数
    .参数 lpOverlapped, 整数型, , 如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须用这个参数引用一个特殊的结构。那个结构定义了一次异步读取操作。否则，应将这个参数设为NULL（将函数声明成ByVal As Long，并传递零值）

.DLL命令 CreateFile, 整数型, "kernel32.dll", "CreateFileA", , ""
    .参数 lpFileName, 文本型, , ""
    .参数 dwDesiredAccess, 整数型, , ""
    .参数 dwShareMode, 整数型, , ""
    .参数 lpSecurityAttributes, 整数型, , ""
    .参数 dwCreationDisposition, 整数型, , ""
    .参数 dwFlagsAndAttributes, 整数型, , ""
    .参数 hTemplateFile, 整数型, , ""

.DLL命令 SetFilePointer, 整数型, "kernel32.dll", "SetFilePointer", , ""
    .参数 hFile, 整数型, , ""
    .参数 lDistanceToMove, 整数型, , ""
    .参数 lpDistanceToMoveHigh, 整数型, 传址, ""
    .参数 dwMoveMethod, 整数型, , ""

.DLL命令 LockFile, 整数型, "kernel32", "LockFile", , ""
    .参数 hFile, 整数型, , ""
    .参数 dwFileOffsetLow, 整数型, , ""
    .参数 dwFileOffsetHigh, 整数型, , ""
    .参数 nNumberOfBytesToLockLow, 整数型, , ""
    .参数 nNumberOfBytesToLockHigh, 整数型, , ""

.DLL命令 UnlockFile, 整数型, "kernel32", "UnlockFile", , ""
    .参数 hFile, 整数型, , ""
    .参数 dwFileOffsetLow, 整数型, , ""
    .参数 dwFileOffsetHigh, 整数型, , ""
    .参数 nNumberOfBytesToUnlockLow, 整数型, , ""
    .参数 nNumberOfBytesToUnlockHigh, 整数型, , ""

.DLL命令 FlushFileBuffers, 逻辑型, "kernel32", "FlushFileBuffers", , 
    .参数 hFile, 整数型, , ""

.DLL命令 FlushViewOfFile, 整数型, "kernel32", "FlushViewOfFile", , 将写入文件映射缓冲区的所有数据都刷新到磁盘
    .参数 lpBaseAddress, 空白型, , 包含了刷新基本地址的一个Long值（参考注解）
    .参数 dwNumberOfBytesToFlush, 空白型, , 欲刷新的字节数

.DLL命令 取文件路径目录_, 逻辑型, "shlwapi.dll", "PathRemoveFileSpecA", , 如："c:\windows\boot.ini"返回"c:\windows"
    .参数 路径文本, 文本型, , pszPath

.DLL命令 CreateFileMapping1, 整数型, "kernel32", "CreateFileMappingA", , 创建文件映射对象。成功就返回文件映射对象句柄
    .参数 hFile, 整数型, , 欲在其中创建映射的一个已经打开的磁盘文件句柄
    .参数 lpFileMappigAttributes, 整数型, , 通常用0表示使用默认安全对象
    .参数 flProtect, 整数型, , 打开映射的方式（用API常数表示的读/写或其它）
    .参数 dwMaximumSizeHigh, 整数型, , 表示文件映射的最大长度的高32位。通常均设为0表示磁盘文件的实际长度
    .参数 dwMaximumSizeLow, 整数型, , 表示文件映射的最大长度的低32位。通常均设为0表示磁盘文件的实际长度
    .参数 lpName, 文本型, , 指定文件映射对象的名称

.DLL命令 CreateFileMapping2, 整数型, "kernel32", "CreateFileMappingA", , 创建文件映射对象。成功就返回文件映射对象句柄
    .参数 hFile, 整数型, , 欲在其中创建映射的一个已经打开的磁盘文件句柄
    .参数 lpFileMappigAttributes, 整数型, , 通常用0表示使用默认安全对象
    .参数 flProtect, 整数型, , 打开映射的方式（用API常数表示的读/写或其它）
    .参数 dwMaximumSizeHigh, 整数型, , 表示文件映射的最大长度的高32位。通常均设为0表示磁盘文件的实际长度
    .参数 dwMaximumSizeLow, 整数型, , 表示文件映射的最大长度的低32位。通常均设为0表示磁盘文件的实际长度
    .参数 lpName, 整数型, , 指定文件映射对象的名称

.DLL命令 MapViewOfFile, 整数型, "kernel32.dll", "MapViewOfFile", , 将一个文件映射对象映射到当前应用程序空间。成功就返回文件映射在内存中的起始地址
    .参数 hFileMappingObject, 整数型, , 文件映射对象的句柄
    .参数 dwDesiredAccess, 整数型, , 用API常数表示的对文件映射的访问方式
    .参数 dwFileOffsetHigh, 整数型, , 表示文件中的映射起点的高32位。通常均设为0表示从文件的起始处开始映射
    .参数 dwFileOffsetLow, 整数型, , 表示文件中的映射起点的低32位。通常均设为0表示从文件的起始处开始映射
    .参数 dwNumberOfBytesToMap, 整数型, , 要映射的字节数，通常设为0表示映射整个文件映射对象。

.DLL命令 UnmapViewOfFile, 整数型, "kernel32.dll", "UnmapViewOfFile", , 解除当前应用程序中的一个文件映射对象的映射地址空间。非零表示成功，零表示失败
    .参数 lpBaseAddress, 整数型, , 要解除映射的文件映射起始地址。

.DLL命令 GlobalLock, 整数型, "kernel32.dll", "GlobalLock", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalHandle, 整数型, "kernel32.dll", "GlobalHandle", , 
    .参数 wMem, 整数型, , 

.DLL命令 OpenFileMapping, 整数型, "kernel32.dll", "OpenFileMappingA", , 打开一个现成的文件映射对象
    .参数 dwDesiredAccess, 整数型, , 用API常数表示的对文件映射的访问方式
    .参数 bInheritHandle, 整数型, , 返回值对与子进程的继承属性，常设为False；
    .参数 lpName, 文本型, , 指定要打开的文件映射对象名称

.DLL命令 GlobalSize, 整数型, "kernel32.dll", "GlobalSize", , 
    .参数 hMem, 整数型, , 

.DLL命令 CopyMemory, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 字节集, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_s, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 文本型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_x, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 小数型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_sj, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 双精度小数型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_d, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 短整数型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_z, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 整数型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_c, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 长整数型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 CopyMemory_r, 整数型, "kernel32.dll", "RtlMoveMemory", , 
    .参数 ptr, 整数型, , 
    .参数 struct, 日期时间型, 传址, 
    .参数 cb, 整数型, , 

.DLL命令 MoveMemory, 整数型, "kernel32.dll", "RtlMoveMemory", , ""
    .参数 ptr, 整数型, , 
    .参数 struct, 整数型, , 
    .参数 cb, 整数型, , 

.DLL命令 VirtualQuery, 整数型, "kernel32.dll", "VirtualQuery", , ""
    .参数 lpAddress, 整数型, , "类型为通用型，请在调试时调整其类型"
    .参数 lpBuffer, MEMORY_BASIC_INFORMATION, 传址, ""
    .参数 dwLength, 整数型, , ""

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
子程序1 ()

.子程序 子程序1, 空白型, , 
.局部变量 文件读写, 文件读写, , , 
.局部变量 错误文本, 文本型, , , 
.局部变量 AA, 整数型, , , 
.局部变量 空白字节, 字节集, , , 
.局部变量 I, 整数型, , , 
.局部变量 空文件的尺寸, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 文件映射, 文件映射, , , 
.局部变量 文件映射2, 文件映射, , , 
.局部变量 匿名局部变量_855, 空白型, , , 

 ' 文件号 ＝ 打开文件 (“E:\复件 Linux安装.iso”, #读写, #无限制)
 ' 文件号 ＝ 打开文件 (“E:\新建文本文档.txt”, #读写, #无限制)
 ' I ＝ 取启动时间 ()
 ' 输出调试文本 (移动读写位置 (文件号, #文件尾, 1))
 ' 输出调试文本 (删除数据 (文件号, 1))
 ' 输出调试文本 (取启动时间 () － I)
 ' 关闭文件 (文件号)
 ' ' 文件号 ＝ 打开文件 (“F:\系统公用文件夹\桌面\123456789A.aa”, #改读, #无限制)
 ' ' 移动读写位置 (文件号, , 1 × 1024 × 1024)
 ' ' AA ＝ 取启动时间 ()
 ' ' 插入字节集 (文件号, 到字节集 (“ABCD”))
 ' ' 输出调试文本 (“插入时间:” ＋ 到文本 ((取启动时间 () － AA) ÷ 1000) ＋ “秒”)
 ' ' 关闭文件 (文件号)

 ' 输出调试文本 (文件映射2.初始化_从内存创建 (123, “中国”))
 ' 输出调试文本 (文件映射.初始化_从映射对象名创建 (“中国”, #读入))
 ' 文件映射2.写入文本 (“大有吴涛易语言软件开发公司”)
 ' 输出调试文本 (文件映射.寻找字节集 (到字节集 (“易”)))
 ' 输出调试文本 (文件映射.读出文本 ())
 ' 输出调试文本 (文件映射2.取文件映射尺寸 ())
 ' 输出调试文本 (文件映射.取文件映射尺寸 ())
 ' 文件映射.关闭 ()
 ' 文件映射2.关闭 ()
 ' 返回 ()

 ' 文件读写.打开文件 (“E:\复件 Linux安装.iso”, #读写, #无限制)
 ' 文件读写.打开文件 (“F:\系统公用文件夹\桌面\AAAAA.txt”, #读写, #无限制)
 ' 文件读写.打开文件 (“F:\系统公用文件夹\桌面\123456789.aa”, #重写, #无限制)
 ' 输出调试文本 (文件读写.取文件长度 ())
输出调试文本 (文件映射.初始化_从文件创建 (“F:\系统公用文件夹\桌面\AAAAA.txt”, #读写, #无限制, , “易语言”))
 ' 输出调试文本 (取文件尺寸 (“E:\复件 Linux安装.iso”))

 ' 输出调试文本 (文件映射.初始化_从文件创建 (“E:\复件 Linux安装.iso”, #读写, #无限制, , “易语言”))


 ' 文件映射2.初始化_从映射对象创建 (“易语言”, #读入)
赋值 (I, 取启动时间 ())
 ' 输出调试文本 (文件映射.插入字节 (10))
 ' 1296006456
 ' 1500999671
 ' 输出调试文本 (文件映射.删除数据 (1))

 ' 文件映射.移动读写位置 (, 5)
 ' 输出调试文本 (文件映射.寻找字节集 (到字节集 (“语言”), , ), “------OK------”)
 ' 文件映射.移动读写位置 (文件映射.寻找字节集 (到字节集 (“易”), 文件映射.取文件尺寸 (), 真))
 ' 输出调试文本 (文件映射.寻找字节集 (到字节集 (“易”), , 真), “------OK------”)
 ' 文件映射.移动读写位置 (, 12)
 ' 输出调试文本 (文件映射.寻找字节集 (到字节集 (“AB”), , 真))
 ' 输出调试文本 (文件映射.寻找字节集 (到字节集 (“AB”), 文件映射.取文件尺寸 (), 真))
输出调试文本 (相减 (取启动时间 (), I))
 ' 文件映射.移动读写位置 (, 218591707)  ' 语言
 ' 文件映射.移动读写位置 (727248309)
 ' 输出调试文本 (文件映射.取读写位置 ())
 ' 文件映射.移到首位置 ()
 ' 输出调试文本 (文件映射.读出字节 ())
文件映射.关闭 ()
输出调试文本 (未知支持库函数_2 (读入文件 (“F:\系统公用文件夹\桌面\AAAAA.txt”)))
 ' 文件读写.关闭文件 ()
 ' 输出调试文本 (取字节集数据 (读入文件 (“F:\系统公用文件夹\桌面\AAAAA.txt”), #字节型, ))
 ' 输出调试文本 (取文件尺寸 (“E:\复件 Linux安装.iso”))
返回 ()
 ' 文件读写.生成空文件 (“F:\系统公用文件夹\桌面\123456789.aa”, 5 × 1024 × 1024)
 ' 文件读写.关闭文件 ()
 ' 返回 ()
 ' 输出调试文本 (文件读写.生成重复字节文件 (“F:\系统公用文件夹\桌面\123456789.aa”, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }, 5242880, #无限制))
 ' 输出调试文本 (文件读写.取文件长度 ())
 ' 输出调试文本 (文件读写.移到文件尾 ())
 ' 输出调试文本 (文件读写.取读写位置 ())

 ' ' 输出调试文本 (文件读写.写出字节集 (到字节集 (“123456789”)))
 ' 文件读写.移动读写位置 (, 1 × 1024 × 1024)
 ' ' 输出调试文本 (文件读写.移到文件尾 ())
 ' ' 输出调试文本 (文件读写.写出字节集 (到字节集 (“123456789”)))
 ' AA ＝ 取启动时间 ()
 ' 输出调试文本 (文件读写.取读写位置 ())
 ' 文件读写.插入字节集 (到字节集 (“ABCD”))
 ' 输出调试文本 (文件读写.取读写位置 ())
 ' 输出调试文本 (“插入时间:” ＋ 到文本 ((取启动时间 () － AA) ÷ 1000) ＋ “秒”)
 ' 输出调试文本 (文件读写.移到文件首 ())
 ' ' 输出调试文本 (文件读写.移动读写位置 (, 3))
 ' ' 输出调试文本 (到文本 (文件读写.读入字节集 ()))
 ' ' 输出调试文本 (文件读写.清除文件缓冲区 ())
 ' ' 输出调试文本 (文件读写.读入文本 ())
 ' ' 输出调试文本 (文件读写.移到文件首 ())
 ' ' 输出调试文本 (文件读写.读入一行 ())
 ' 文件读写.取文件长度 ()
文件读写.关闭文件 ()



 ' 删除文件 (“F:\系统公用文件夹\桌面\123456789.aa”)
 ' AA ＝ 取启动时间 ()
 ' 输出调试文本 (文件读写.生成空文件 (“F:\系统公用文件夹\桌面\123456789.aa”, 500 × 1024 × 1024))
 ' 文件读写.关闭文件 ()
 ' 输出调试文本 ((取启动时间 () － AA) ÷ 1000)

.类模块 文件读写, , , 

.程序集变量 集_文件号, 整数型, , , 
.程序集变量 集_文件名称, 文本型, , , 
.程序集变量 集_打开方式, 整数型, , , 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.程序集变量 集_共享方式, 整数型, , , 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。
.程序集变量 集_是否自动删除, 逻辑型, , , 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。
.程序集变量 集_缓冲区10M, 字节集, , , 
.程序集变量 匿名程序集变量_521, 空白型, , , 
.程序集变量 集_文件映射号, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
GetLastError ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
清除文件缓冲区 ()
CloseHandle (集_文件号)


.子程序 打开文件, 逻辑型, , 如果文件已用同一个类打开将会失败。
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#写出：写出数据到指定文件，如果该文件不存在则失败； 3、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败； 4、#重写：写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据； 5、#改写：写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开； 6、#改读：从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开。
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。
.参数 是否自动删除, 逻辑型, 可空, 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。

.局部变量 打开方式1, 整数型, , , 
.局部变量 共享方式1, 整数型, , , 
.局部变量 打开方式2, 整数型, , , 

 ' 调用格式： 〈整数型〉 打开文件 （文本型 欲打开的文件名称，［整数型 打开方式］，［整数型 共享方式］） - 系统核心支持库->文件读写
 ' 英文名称：open
 ' 打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 0。本命令为初级命令。
 ' 参数<1>的名称为“欲打开的文件名称”，类型为“文本型（text）”。
 ' 参数<2>的名称为“打开方式”，类型为“整数型（int）”，可以被省略。参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：' 1、#读入：；
 ' 2、#写出：；
 ' 3、#读写：；
 ' 4、#重写：；
 ' 5、#改写：；
 ' 6、#改读：。

 ' 参数<3>的名称为“共享方式”，类型为“整数型（int）”，可以被省略。参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一：
 ' 1、#无限制：允许其它进程任意读写此文件；
 ' 2、#禁止读：禁止其它进程读此文件；
 ' 3、#禁止写：禁止其它进程写此文件；
 ' 4、#禁止读写：禁止其它进程读写此文件。

.如果真 (是否为空 (打开方式))
    赋值 (打开方式, #读写)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.如果真 (不等于 (集_文件号, 0))
    返回 (假)
.如果真结束
.判断开始 (等于 (打开方式, #读入)) ' 从指定文件读入数据，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_READ) ' #OF_READ
    赋值 (打开方式2, #PAGE_READONLY) ' 以只读方式打开映射
.判断 (等于 (打开方式, #写出)) ' 写出数据到指定文件，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_WRITE) ' #OF_WRITE
    赋值 (打开方式2, #PAGE_WRITECOPY) ' 为写操作留下备份
.判断 (等于 (打开方式, #读写)) ' 从文件中读入数据或者写出数据到文件，如果该文件不存在则失败
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_READWRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.判断 (等于 (打开方式, #重写)) ' 写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_CREATE ＋ #OF_WRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.判断 (等于 (打开方式, #改写)) ' 写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, #GENERIC_WRITE) ' #OPEN_ALWAYS
    赋值 (打开方式2, #PAGE_WRITECOPY) ' 为写操作留下备份
.判断 (等于 (打开方式, #改读)) ' 从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OPEN_ALWAYS ＋ #OF_READWRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.默认
    
.判断结束
.判断开始 (等于 (共享方式, #无限制))
    赋值 (共享方式1, 相加 (#FILE_SHARE_WRITE, #FILE_SHARE_READ))
.判断 (等于 (共享方式, #禁止读))
    赋值 (共享方式1, #FILE_SHARE_WRITE)
.判断 (等于 (共享方式, #禁止写))
    赋值 (共享方式1, #FILE_SHARE_READ)
.判断 (等于 (共享方式, #禁止读写))
    赋值 (共享方式1, 0)
.默认
    
.判断结束
 ' 文件号 ＝ OpenFile (欲打开的文件名称, 文件结构信息, 打开方式1)
.判断开始 (是否自动删除)
     ' 赋值 (集_文件号, CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), 相加 (#FILE_ATTRIBUTE_NORMAL, #FILE_FLAG_DELETE_ON_CLOSE), 0))
 ' .默认
     ' 赋值 (集_文件号, CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), #FILE_ATTRIBUTE_NORMAL, 0))
 ' .判断结束
赋值 (集_文件名称, 欲打开的文件名称)
赋值 (集_打开方式, 打开方式)
赋值 (集_共享方式, 共享方式)
赋值 (集_是否自动删除, 是否自动删除)
.如果真 (等于 (集_文件号, -1))
    返回 (假)
.如果真结束
 ' 集_文件映射号 ＝ CreateFileMapping (集_文件号, 0, 打开方式2, 0, 0, 0)
 ' 输出调试文本 (GetLastError ())
 ' flProtect Long，下述常数之一：
 ' PAGE_READONLY 以只读方式打开映射
 ' PAGE_READWRITE 以可读、可写方式打开映射
 ' PAGE_WRITECOPY 为写操作留下备份
 ' 可组合使用下述一个或多个常数
 ' SEC_COMMIT 为文件映射一个小节中的所有页分配内存
 ' SEC_IMAGE 文件是个可执行文件
 ' SEC_RESERVE 为没有分配实际内存的一个小节保留虚拟内存空间


返回 (不等于 (集_文件号, -1))


.子程序 生成空文件, 长整数型, , 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 空文件的尺寸, 长整数型, 可空, 默认为0
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 I, 长整数型, , , 
.局部变量 空白字节, 字节集, , , 
.局部变量 是否成功, 整数型, , , 

 ' 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：
.如果真 (或者 (小于 (空文件的尺寸, 0), 不等于 (集_文件号, 0)))
    返回 (-1)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.判断开始 (等于 (打开文件 (欲生成的文件名称, #重写, 共享方式), 假))
    返回 (-1)
.判断 (等于 (空文件的尺寸, 0))
    返回 (0)
.判断 (小于或等于 (空文件的尺寸, 2097152)) ' 2* 1024 × 1024) 2M
    写出字节集 (取空白字节集 (空文件的尺寸))
.默认
    赋值 (空白字节, 取空白字节集 (2097152))
    赋值 (I, 整除 (空文件的尺寸, 2097152))
    .计次循环首 (I, )
        写出字节集 (空白字节)
    .计次循环尾 ()
    赋值 (I, 相减 (空文件的尺寸, 相乘 (I, 2097152)))
    .如果真 (不等于 (I, 0))
        写出字节集 (取空白字节集 (I))
    .如果真结束
    
.判断结束
移到文件首 ()
返回 (取文件长度 ())

.子程序 生成重复字节文件, 长整数型, , 生成并打开一个空文件。生成空文件后将会将读写指针置为文件首。如果生成空文件成功，将返回生成新文件的实际尺寸。如果生成新文件失败将返回-1。
.参数 欲生成的文件名称, 文本型, , 
.参数 欲重复的字节集数据, 字节集, 可空, 默认为{0}
.参数 重复的次数, 整数型, 可空, 默认为1次
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。

.局部变量 I, 整数型, , , 
.局部变量 J, 整数型, , , 
.局部变量 两M缓冲区, 字节集, , , 

 ' 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：
.如果真 (或者 (不等于 (集_文件号, 0), 小于 (重复的次数, 0)))
    返回 (-1)
.如果真结束
.如果真 (是否为空 (欲重复的字节集数据))
    赋值 (欲重复的字节集数据, { 0 })
.如果真结束
.如果真 (是否为空 (重复的次数))
    赋值 (重复的次数, 1)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
.判断开始 (等于 (打开文件 (欲生成的文件名称, #重写, 共享方式), 假))
    返回 (-1)
.默认
    赋值 (I, 相乘 (取字节集长度 (欲重复的字节集数据), 重复的次数))
    .判断开始 (小于或等于 (I, 2097152)) ' 2 * 1024 × 1024)
        写出字节集 (取重复字节集 (重复的次数, 欲重复的字节集数据))
    .默认
        赋值 (I, 整除 (2097152, 取字节集长度 (欲重复的字节集数据)))
        赋值 (两M缓冲区, 取重复字节集 (I, 欲重复的字节集数据))
        赋值 (J, 整除 (重复的次数, I))
        .计次循环首 (J, )
            写出字节集 (两M缓冲区)
        .计次循环尾 ()
        赋值 (J, 相减 (重复的次数, 相乘 (I, J)))
        .如果真 (不等于 (J, 0))
            写出字节集 (取重复字节集 (J, 欲重复的字节集数据))
        .如果真结束
        
    .判断结束
    
.判断结束
移到文件首 ()
返回 (取文件长度 ())

.子程序 移到文件首, 逻辑型, , 
返回 (移动读写位置 (0))

.子程序 移到文件尾, 逻辑型, , 
返回 (移动读写位置 (#文件尾, 0))

.子程序 移动读写位置, 逻辑型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。
.参数 移动距离, 整数型, , 

 ' 移动读写位置 （整数型 欲进行操作的文件号，［整数型 起始移动位置］，整数型 移动距离）
.如果真 (或者 (是否为空 (起始移动位置), 大于 (起始移动位置, #现行位置), 小于或等于 (起始移动位置, 0)))
    赋值 (起始移动位置, #文件首)
.如果真结束
.判断开始 (等于 (SetFilePointer (集_文件号, 移动距离, 0, 多项选择 (起始移动位置, #FILE_BEGIN, #FILE_END, #FILE_CURRENT)), -1))
    返回 (假)
.默认
    返回 (真)
.判断结束
 ' FILE_BEGIN lOffset将新位置设为从文件起始处开始算的起的一个偏移
 ' FILE_CURRENT lOffset将新位置设为从当前位置开始计算的一个偏移
 ' FILE_END


.子程序 取读写位置, 整数型, , 
返回 (SetFilePointer (集_文件号, 0, 0, #FILE_CURRENT))


.子程序 关闭文件, 空白型, , 
清除文件缓冲区 ()
CloseHandle (集_文件号)
赋值 (集_文件号, 0)

.子程序 取文件长度, 长整数型, , 
.局部变量 高32位文件尺寸, 整数型, , , 
.局部变量 文件长度, 整数型, , , 

赋值 (文件长度, GetFileSize (集_文件号, 高32位文件尺寸))
返回 (取字节集数据 (相加 (到字节集 (文件长度), 到字节集 (高32位文件尺寸)), #长整数型, ))


.子程序 写出字节集, 逻辑型, , 写出一段或数段字节集数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。
.参数 欲写出的字节集数据, 字节集, , 

.局部变量 实际写入字节数量, 整数型, , , 
.局部变量 写入字节数量, 整数型, , , 

赋值 (写入字节数量, 取字节集长度 (欲写出的字节集数据))
.判断开始 (等于 (WriteFile (集_文件号, 欲写出的字节集数据, 写入字节数量, 实际写入字节数量, 0), 假))
    返回 (假)
.默认
    返回 (取反 (等于 (实际写入字节数量, 0)))
.判断结束


.子程序 是否在文件尾, 逻辑型, , 
返回 (等于 (取读写位置 (), 取文件长度 ()))

.子程序 取错误信息, 空白型, , 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 

.局部变量 Bytes, 整数型, , , 

赋值 (错误号, GetLastError ())
.如果真 (不等于 (错误号, 0))
    赋值 (错误文本, 取空白文本 (129))
    赋值 (Bytes, FormatMessage (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_ARGUMENT_ARRAY), 0, 错误号, 0, 错误文本, 128, 0))
    .判断开始 (大于 (Bytes, 2))
        赋值 (错误文本, 取文本左边 (错误文本, 相减 (Bytes, 2)))
    .默认
        赋值 (错误文本, “”)
    .判断结束
    
.如果真结束


.子程序 读入字节集, 字节集, 公开, 
.参数 欲读入数据的长度, 整数型, 可空, 如果为空则读入 当前读写位置 到 文件尾 之间的全部字节集

.局部变量 缓冲区, 字节集, , , 
.局部变量 实际读入的字符数, 整数型, , , 

 ' 读入字节集 （整数型 欲读入数据的文件号，整数型 欲读入数据的长度）
.如果真 (或者 (是否为空 (欲读入数据的长度), 等于 (欲读入数据的长度, 0)))
    赋值 (欲读入数据的长度, 相减 (取文件长度 (), 取读写位置 ()))
.如果真结束
赋值 (缓冲区, 取空白字节集 (欲读入数据的长度))
 ' Long，非零表示成功，零表示失败。
 ' 会设置GetLastError。
 ' 如启动的是一次异步读操作，则函数会返回零值，并将ERROR_IO_PENDING设置成GetLastError的结果。
 ' 如结果不是零值，但读入的字节数小于nNumberOfBytesToRead参数指定的值，表明早已抵达了文件的结尾
ReadFile (集_文件号, 缓冲区, 欲读入数据的长度, 实际读入的字符数, 0)
.判断开始 (等于 (欲读入数据的长度, 实际读入的字符数))
    返回 (缓冲区)
.默认
    返回 (取字节集左边 (缓冲区, 实际读入的字符数))
.判断结束


.子程序 读入2M字节集, 字节集, , 
.局部变量 实际读入的字符数, 整数型, , , 

 ' 读入字节集 （整数型 欲读入数据的文件号，整数型 欲读入数据的长度）
 ' Long，非零表示成功，零表示失败。
 ' 会设置GetLastError。
 ' 如启动的是一次异步读操作，则函数会返回零值，并将ERROR_IO_PENDING设置成GetLastError的结果。
 ' 如结果不是零值，但读入的字节数小于nNumberOfBytesToRead参数指定的值，表明早已抵达了文件的结尾
ReadFile (集_文件号, 集_缓冲区10M, 2097152, 实际读入的字符数, 0)
.判断开始 (等于 (实际读入的字符数, 2097152))
    返回 (集_缓冲区10M)
.默认
    返回 (取字节集左边 (集_缓冲区10M, 实际读入的字符数))
.判断结束


.子程序 清除文件缓冲区, 逻辑型, , 
返回 (FlushFileBuffers (集_文件号))


.子程序 读入文本, 文本型, , 从文件中当前读写位置读取并返回一段文本数据，实际读入长度（即返回文本的尺寸）可能会小于欲读入长度。如果该数据中存在字节 0 或 26（文本结束标志），将仅返回该字节之前的数据。
.参数 欲读入文本数据的长度, 整数型, 可空, 如果本参数被省略，默认读入文件中的所有文本数据。

 ' 〈文本型〉 读入文本 （整数型 欲读入文本数据的文件号，［整数型 欲读入文本数据的长度］）
返回 (取字节集数据 (读入字节集 (欲读入文本数据的长度), #文本型, ))


.子程序 写出文本, 逻辑型, , 写出文本数据到文件中当前读写位置处。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 欲写出的文本, 文本型, , 

 ' 调用格式： 〈逻辑型〉 写出文本 （整数型 欲写出文本的文件号，通用型 欲写出的文本，... ） - 系统核心支持库->文件读写
 ' 英文名称：WriteText
 ' 本命令用作写出一段或数段文本数据到文件中当前读写位置处。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出文本的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的文本”，类型为“通用型（all）”。参数值如果不为文本类型数据，将自动进行转换，如果无法转换（即数据类型为字节集、子程序指针、库或用户自定义数据类型），则不写出此数据。
返回 (写出字节集 (到字节集 (欲写出的文本)))


.子程序 写文本行, 逻辑型, , 写出文本数据到文件中当前读写位置处。每行的尾部将被自动加上回车及换行符。如果当前读写位置处有数据，数据将被覆盖。成功返回真，失败返回假。
.参数 欲写出的文本, 文本型, , 

 ' 调用格式： 〈逻辑型〉 写出文本 （整数型 欲写出文本的文件号，通用型 欲写出的文本，... ） - 系统核心支持库->文件读写
 ' 英文名称：WriteText
 ' 本命令用作写出一段或数段文本数据到文件中当前读写位置处。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出文本的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的文本”，类型为“通用型（all）”。参数值如果不为文本类型数据，将自动进行转换，如果无法转换（即数据类型为字节集、子程序指针、库或用户自定义数据类型），则不写出此数据。
返回 (写出字节集 (到字节集 (相加 (欲写出的文本, #换行符))))

.子程序 读入一行, 文本型, , 
.局部变量 读出数据, 字节集, , , 
.局部变量 返回数据, 文本型, , , 

 ' 调用格式： 〈文本型〉 读入一行 （整数型 欲读入文本数据的文件号） - 系统核心支持库->文件读写
 ' 英文名称：ReadLine
 ' 本命令用作从文件中当前读写位置读取并返回一行文本数据，行末的回车及换行符将被抛弃。如果读入失败，将返回一个空文本并且自动将当前文件读写位置移到文件尾部。本命令为初级命令。
 ' 参数<1>的名称为“欲读入文本数据的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
.判断循环首 (等于 (是否在文件尾 (), 假))
    赋值 (读出数据, 读入字节集 (1))
    .判断开始 (或者 (等于 (读出数据 [1], 10), 等于 (读出数据 [1], 13), 等于 (读出数据 [1], 26)))
        返回 (返回数据)
    .默认
        赋值 (返回数据, 相加 (返回数据, 字符 (读出数据 [1])))
    .判断结束
    
.判断循环尾 ()
返回 (返回数据)


.子程序 插入字节集, 逻辑型, 公开, 
.参数 欲写出的字节集数据, 字节集, , 

.局部变量 文件读写, 文件读写, , , 
.局部变量 当前读写位置, 整数型, , , 
.局部变量 当前读写位置2, 整数型, , , 
.局部变量 临时文件名, 文本型, , , 
.局部变量 I, 整数型, , , 
.局部变量 字节集, 字节集, , , 

 ' ' 调用格式： 〈逻辑型〉 插入字节集 （整数型 欲写出数据的文件号，字节集 欲写出的字节集数据，... ） - 系统核心支持库->文件读写
 ' 英文名称：InsBin
 ' 本命令用作插入一段或数段字节集数据到文件中当前读写位置处。该文件被打开时必须给予可写权限。成功返回真，失败返回假。本命令为初级命令。命令参数表中最后一个参数可以被重复添加。
 ' 参数<1>的名称为“欲写出数据的文件号”，类型为“整数型（int）”。该文件号由“打开文件”命令所返回。
 ' 参数<2>的名称为“欲写出的字节集数据”，类型为“字节集（bin）”。
.判断开始 (等于 (欲写出的字节集数据, {  }))
    返回 (真)
.默认
    .如果真 (等于 (取字节集长度 (集_缓冲区10M), 0))
        赋值 (集_缓冲区10M, 取空白字节集 (10485760))
    .如果真结束
    赋值 (当前读写位置, 取读写位置 ())
    赋值 (临时文件名, 集_文件名称)
    取文件路径目录_ (临时文件名)
    .如果真 (不等于 (取文本右边 (临时文件名, 1), “\”))
        赋值 (临时文件名, 相加 (临时文件名, “\”))
    .如果真结束
    赋值 (临时文件名, 取临时文件名 (临时文件名))
    .如果真 (文件读写.打开文件 (临时文件名, #重写, #无限制, ))
        移到文件首 ()
        .判断开始 (大于 (当前读写位置, 10485760)) ' 当前读写位置>10M
            赋值 (I, 整除 (当前读写位置, 10485760))
            .计次循环首 (I, )
                赋值 (字节集, 读入2M字节集 ())
                .如果真 (等于 (文件读写.写出字节集 (字节集), 假))
                    文件读写.关闭文件 ()
                    删除文件 (临时文件名)
                    返回 (假)
                .如果真结束
                
            .计次循环尾 ()
            赋值 (I, 相减 (当前读写位置, 相乘 (I, 10485760)))
            .如果真 (不等于 (I, 0))
                赋值 (字节集, 读入字节集 (I))
                .如果真 (等于 (文件读写.写出字节集 (字节集), 假))
                    文件读写.关闭文件 ()
                    删除文件 (临时文件名)
                    返回 (假)
                .如果真结束
                
            .如果真结束
            
        .默认
            赋值 (字节集, 读入字节集 (当前读写位置))
            .如果真 (等于 (文件读写.写出字节集 (字节集), 假))
                文件读写.关闭文件 ()
                删除文件 (临时文件名)
                返回 (假)
            .如果真结束
            
        .判断结束
        .如果真 (等于 (文件读写.写出字节集 (欲写出的字节集数据), 假))
            文件读写.关闭文件 ()
            删除文件 (临时文件名)
            返回 (假)
        .如果真结束
        赋值 (当前读写位置2, 文件读写.取读写位置 ())
        赋值 (I, 整除 (相减 (取文件长度 (), 当前读写位置), 10485760))
        .计次循环首 (I, )
            赋值 (字节集, 读入2M字节集 ())
            .如果真 (等于 (文件读写.写出字节集 (字节集), 假))
                文件读写.关闭文件 ()
                删除文件 (临时文件名)
                返回 (假)
            .如果真结束
            
        .计次循环尾 ()
        赋值 (I, 相减 (取文件长度 (), 当前读写位置, 相乘 (I, 10485760)))
        .如果真 (不等于 (I, 0))
            赋值 (字节集, 读入字节集 (I))
            .如果真 (等于 (文件读写.写出字节集 (字节集), 假))
                文件读写.关闭文件 ()
                删除文件 (临时文件名)
                返回 (假)
            .如果真结束
            
        .如果真结束
        文件读写.关闭文件 ()
        关闭文件 ()
        删除文件 (集_文件名称)
        文件更名 (临时文件名, 集_文件名称)
        .如果真 (等于 (集_打开方式, #重写))
            赋值 (集_打开方式, #改读)
        .如果真结束
        .如果真 (打开文件 (集_文件名称, 集_打开方式, 集_共享方式, 集_是否自动删除))
            移动读写位置 (当前读写位置2)
             ' 输出调试文本 (取文件长度 ())
            返回 (真)
        .如果真结束
        
    .如果真结束
    
.判断结束
返回 (假)

.子程序 取文件号, 整数型, 公开, 
返回 (集_文件号)


.类模块 文件映射, , , 

.程序集变量 集_映射对象句柄, 整数型, , , 
.程序集变量 集_起始地址, 整数型, , , 
.程序集变量 集_当前位置, 长整数型, , , 
.程序集变量 集_文件尺寸, 长整数型, , , 
.程序集变量 集_文件号, 整数型, , , 
.程序集变量 集_文件映射对象名_是否为空, 逻辑型, , , 
.程序集变量 集_文件映射对象名, 文本型, , , 
.程序集变量 集_打开方式, 整数型, , , 
.程序集变量 集_文件打开方式, 整数型, , , 
.程序集变量 集_共享方式, 整数型, , , 
.程序集变量 集_是否自动删除, 逻辑型, , , 
.程序集变量 集_文件名, 文本型, , , 
.程序集变量 集_中止查找, 逻辑型, , , 
.程序集变量 集_查找进度, 小数型, , , 
.程序集变量 集_正在查找, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (集_文件映射对象名_是否为空, 真)
GetLastError ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭 ()

.子程序 取映射对象名, 文本型, , 
返回 (集_文件映射对象名)


.子程序 打开文件, 整数型, , 
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, , 
.参数 共享方式, 整数型, , 
.参数 是否自动删除, 逻辑型, , 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。

.局部变量 打开方式1, 整数型, , , 
.局部变量 共享方式1, 整数型, , , 
.局部变量 打开方式2, 整数型, , , 
.局部变量 文件号, 整数型, , , 

 ' 调用格式： 〈整数型〉 打开文件 （文本型 欲打开的文件名称，［整数型 打开方式］，［整数型 共享方式］） - 系统核心支持库->文件读写
 ' 英文名称：open
 ' 打开一个普通文件，以对文件进行输入或输出。成功返回被打开文件的文件号，失败返回 0。本命令为初级命令。
 ' 参数<1>的名称为“欲打开的文件名称”，类型为“文本型（text）”。
 ' 参数<2>的名称为“打开方式”，类型为“整数型（int）”，可以被省略。参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一：' 1、#读入：；
 ' 2、#写出：；
 ' 3、#读写：；
 ' 4、#重写：；
 ' 5、#改写：；
 ' 6、#改读：。

 ' 参数<3>的名称为“共享方式”，类型为“整数型（int）”，可以被省略。参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一：
 ' 1、#无限制：允许其它进程任意读写此文件；
 ' 2、#禁止读：禁止其它进程读此文件；
 ' 3、#禁止写：禁止其它进程写此文件；
 ' 4、#禁止读写：禁止其它进程读写此文件。

 ' .如果真 (是否为空 (打开方式))
     ' 打开方式 ＝ #读写
.如果真结束
 ' .如果真 (是否为空 (共享方式))
     ' 共享方式 ＝ #无限制
.如果真结束
 ' .如果真 (不等于 (集_文件号, 0))
     ' 返回 (假)
.如果真结束
.判断开始 (等于 (打开方式, #读入)) ' 从指定文件读入数据，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_READ) ' #OF_READ
    赋值 (打开方式2, #PAGE_READONLY) ' 以只读方式打开映射
.判断 (等于 (打开方式, #写出)) ' 写出数据到指定文件，如果该文件不存在则失败
    赋值 (打开方式1, #GENERIC_WRITE) ' #OF_WRITE
    赋值 (打开方式2, #PAGE_WRITECOPY) ' 为写操作留下备份
.判断 (等于 (打开方式, #读写)) ' 从文件中读入数据或者写出数据到文件，如果该文件不存在则失败
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_READWRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.判断 (等于 (打开方式, #重写)) ' 写出数据到指定文件。如果该文件不存在则先创建一个新文件，如果已经存在就先清除其中的所有数据
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OF_CREATE ＋ #OF_WRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.判断 (等于 (打开方式, #改写)) ' 写出数据到指定文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, #GENERIC_WRITE) ' #OPEN_ALWAYS
    赋值 (打开方式2, #PAGE_WRITECOPY) ' 为写操作留下备份
.判断 (等于 (打开方式, #改读)) ' 从文件中读入数据或者写出数据到文件。如果该文件不存在则创建一个新文件，如果已经存在就直接打开
    赋值 (打开方式1, 相加 (#GENERIC_READ, #GENERIC_WRITE)) ' #OPEN_ALWAYS ＋ #OF_READWRITE
    赋值 (打开方式2, #PAGE_READWRITE) ' 以可读、可写方式打开映射
.默认
    返回 (-1)
.判断结束
.判断开始 (等于 (共享方式, #无限制))
    赋值 (共享方式1, 相加 (#FILE_SHARE_WRITE, #FILE_SHARE_READ))
.判断 (等于 (共享方式, #禁止读))
    赋值 (共享方式1, #FILE_SHARE_WRITE)
.判断 (等于 (共享方式, #禁止写))
    赋值 (共享方式1, #FILE_SHARE_READ)
.判断 (等于 (共享方式, #禁止读写))
    赋值 (共享方式1, 0)
.默认
    返回 (-1)
.判断结束
 ' 文件号 ＝ OpenFile (欲打开的文件名称, 文件结构信息, 打开方式1)
.判断开始 (是否自动删除)
    赋值 (文件号, CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), 相加 (#FILE_ATTRIBUTE_NORMAL, #FILE_FLAG_DELETE_ON_CLOSE), 0))
.默认
    赋值 (文件号, CreateFile (欲打开的文件名称, 打开方式1, 共享方式1, 0, 选择 (等于 (打开方式, #重写), #CREATE_ALWAYS, 选择 (小于 (打开方式, 4), #OPEN_EXISTING, #OPEN_ALWAYS)), #FILE_ATTRIBUTE_NORMAL, 0))
.判断结束
 ' 集_文件名称 ＝ 欲打开的文件名称
 ' 集_打开方式 ＝ 打开方式
 ' 集_共享方式 ＝ 共享方式
 ' 集_是否自动删除 ＝ 是否自动删除
 ' .如果真 (等于 (集_文件号, -1))
     ' 返回 (文件号)
.如果真结束
返回 (文件号)
 ' 集_文件映射号 ＝ CreateFileMapping (集_文件号, 0, 打开方式2, 0, 0, 0)
 ' 输出调试文本 (GetLastError ())
 ' flProtect Long，下述常数之一：
 ' PAGE_READONLY 以只读方式打开映射
 ' PAGE_READWRITE 以可读、可写方式打开映射
 ' PAGE_WRITECOPY 为写操作留下备份
 ' 可组合使用下述一个或多个常数
 ' SEC_COMMIT 为文件映射一个小节中的所有页分配内存
 ' SEC_IMAGE 文件是个可执行文件
 ' SEC_RESERVE 为没有分配实际内存的一个小节保留虚拟内存空间




.子程序 初始化_从文件创建, 逻辑型, , 如果文件不存在或文件为空将失败
.参数 欲打开的文件名称, 文本型, , 
.参数 打开方式, 整数型, 可空, 参数值说明对文件的操作方式，如果省略本参数，默认为“#读写”。方式值可以为以下常量之一： 1、#读入：从指定文件读入数据，如果该文件不存在则失败； 2、#读写：从文件中读入数据或者写出数据到文件，如果该文件不存在则失败；
.参数 共享方式, 整数型, 可空, 参数值指定限制其它进程操作此文件的方式。如果省略本参数，默认为“#无限制”。方式值可以为以下常量之一： 1、#无限制：允许其它进程任意读写此文件； 2、#禁止读：禁止其它进程读此文件； 3、#禁止写：禁止其它进程写此文件； 4、#禁止读写：禁止其它进程读写此文件。
.参数 是否自动删除, 逻辑型, 可空, 如果为真，则当文件关闭时将自动删除文件。本参数特别适用于临时文件。默认为假。
.参数 文件映射对象名, 文本型, 可空, 

.局部变量 映射对象句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 
.局部变量 打开方式1, 整数型, , , 
.局部变量 文件尺寸, 整数型, , , 
.局部变量 文件尺寸2, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 MEMORY_BASIC_INFORMATION, MEMORY_BASIC_INFORMATION, , , 
.局部变量 文件打开方式, 整数型, , , 

.如果真 (是否为空 (打开方式))
    赋值 (打开方式, #读写)
.如果真结束
.如果真 (是否为空 (共享方式))
    赋值 (共享方式, #无限制)
.如果真结束
 ' .如果真 (不等于 (集_文件号, 0))
     ' 返回 (假)
.如果真结束
.如果真 (取反 (或者 (等于 (打开方式, #读入), 等于 (打开方式, #读写)))) ' 从指定文件读入数据，如果该文件不存在则失败
    返回 (假)
.如果真结束
.如果真 (或者 (等于 (取文件尺寸 (欲打开的文件名称), 0), 等于 (取文件尺寸 (欲打开的文件名称), -1)))
    返回 (假)
.如果真结束
赋值 (文件号, 打开文件 (欲打开的文件名称, 打开方式, 共享方式, 是否自动删除))
.如果真 (等于 (文件号, -1))
    返回 (假)
.如果真结束
赋值 (文件打开方式, 打开方式)
.判断开始 (等于 (打开方式, #读入))
    赋值 (打开方式1, #PAGE_READONLY)
.默认
    赋值 (打开方式1, #PAGE_READWRITE)
.判断结束
.判断开始 (是否为空 (文件映射对象名))
    赋值 (映射对象句柄, CreateFileMapping2 (文件号, 0, 打开方式1, 0, 0, 0))
.默认
    赋值 (映射对象句柄, CreateFileMapping1 (文件号, 0, 打开方式1, 0, 0, 文件映射对象名))
.判断结束
.判断开始 (等于 (映射对象句柄, 0))
    CloseHandle (文件号)
    返回 (假)
.默认
    .判断开始 (等于 (打开方式, #读入))
        赋值 (打开方式1, #FILE_MAP_READ)
    .默认
        赋值 (打开方式1, #FILE_MAP_WRITE)
    .判断结束
    赋值 (起始地址, MapViewOfFile (映射对象句柄, 打开方式1, 0, 0, 0))
     ' 信息框 (GetLastError (), 0, )
    .如果真 (等于 (起始地址, 0))
        CloseHandle (映射对象句柄)
        CloseHandle (文件号)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_映射对象句柄, 0))
        .如果真 (等于 (关闭 (), 假))
            UnmapViewOfFile (起始地址)
            CloseHandle (映射对象句柄)
            CloseHandle (文件号)
            返回 (假)
        .如果真结束
        
    .如果真结束
    赋值 (集_映射对象句柄, 映射对象句柄)
    赋值 (集_起始地址, 起始地址)
     ' VirtualQuery (起始地址, MEMORY_BASIC_INFORMATION, 28)
    赋值 (文件尺寸, GetFileSize (文件号, 文件尺寸2))
    赋值 (集_当前位置, 0)
    赋值 (集_文件尺寸, 取字节集数据 (相加 (到字节集 (文件尺寸), 到字节集 (文件尺寸2)), #长整数型, ))
    赋值 (集_文件映射对象名_是否为空, 是否为空 (文件映射对象名))
    赋值 (集_文件映射对象名, 文件映射对象名)
    赋值 (集_打开方式, 打开方式)
    赋值 (集_文件打开方式, 文件打开方式)
    赋值 (集_共享方式, 共享方式)
    赋值 (集_是否自动删除, 是否自动删除)
    赋值 (集_文件号, 文件号)
    赋值 (集_文件名, 欲打开的文件名称)
    返回 (真)
.判断结束


.子程序 初始化_从内存创建, 逻辑型, , 
.参数 映射尺寸, 长整数型, , 
.参数 文件映射对象名, 文本型, 可空, 

.局部变量 映射对象句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 
.局部变量 文件尺寸, 整数型, , , 
.局部变量 MEMORY_BASIC_INFORMATION, MEMORY_BASIC_INFORMATION, , , 

.如果真 (小于或等于 (映射尺寸, 0))
    返回 (假)
.如果真结束
.判断开始 (是否为空 (文件映射对象名))
    赋值 (映射对象句柄, CreateFileMapping2 (-1, 0, #PAGE_READWRITE, 取字节集数据 (到字节集 (映射尺寸), #整数型, 5), 取字节集数据 (到字节集 (映射尺寸), #整数型, 1), 0))
.默认
    赋值 (映射对象句柄, CreateFileMapping1 (-1, 0, #PAGE_READWRITE, 取字节集数据 (到字节集 (映射尺寸), #整数型, 5), 取字节集数据 (到字节集 (映射尺寸), #整数型, 1), 文件映射对象名))
.判断结束
.判断开始 (等于 (映射对象句柄, 0))
    返回 (假)
.默认
    赋值 (起始地址, MapViewOfFile (映射对象句柄, #FILE_MAP_WRITE, 0, 0, 0))
    .如果真 (等于 (起始地址, 0))
        CloseHandle (映射对象句柄)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_映射对象句柄, 0))
        .如果真 (等于 (关闭 (), 假))
            UnmapViewOfFile (起始地址)
            CloseHandle (映射对象句柄)
            返回 (假)
        .如果真结束
        
    .如果真结束
    赋值 (集_映射对象句柄, 映射对象句柄)
    赋值 (集_起始地址, 起始地址)
    赋值 (集_文件号, -1)
    赋值 (文件尺寸, 映射尺寸)
    赋值 (集_文件尺寸, 文件尺寸)
    赋值 (集_文件映射对象名_是否为空, 是否为空 (文件映射对象名))
    赋值 (集_文件映射对象名, 文件映射对象名)
    返回 (真)
.判断结束


.子程序 从文件号创建, 逻辑型, , 
.参数 文件号, 整数型, , 
.参数 文件映射对象名, 文本型, 可空, 
.参数 映射尺寸, 长整数型, , 

.局部变量 映射对象句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 
.局部变量 文件尺寸, 整数型, , , 
.局部变量 文件尺寸2, 整数型, , , 
.局部变量 MEMORY_BASIC_INFORMATION, MEMORY_BASIC_INFORMATION, , , 
.局部变量 A, 文本型, , , 

.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.判断开始 (是否为空 (文件映射对象名))
    赋值 (映射对象句柄, CreateFileMapping2 (文件号, 0, #PAGE_READWRITE, 取字节集数据 (到字节集 (映射尺寸), #整数型, 5), 取字节集数据 (到字节集 (映射尺寸), #整数型, 1), 0))
.默认
    赋值 (映射对象句柄, CreateFileMapping1 (文件号, 0, #PAGE_READWRITE, 取字节集数据 (到字节集 (映射尺寸), #整数型, 5), 取字节集数据 (到字节集 (映射尺寸), #整数型, 1), 文件映射对象名))
.判断结束
.判断开始 (等于 (映射对象句柄, 0))
    返回 (假)
.默认
     ' 起始地址 ＝ MapViewOfFile (映射对象句柄, #FILE_MAP_ALL_ACCESS, 0, 0, 0)
    赋值 (起始地址, MapViewOfFile (映射对象句柄, #FILE_MAP_WRITE, 0, 0, 0))
    取错误信息 (文件尺寸, A)
     ' 输出调试文本 (文件尺寸, A)
    .如果真 (等于 (文件尺寸, 8))
        .如果真 (不等于 (集_映射对象句柄, 0))
            .判断开始 (等于 (关闭对象 (), 假))
                UnmapViewOfFile (起始地址)
                CloseHandle (映射对象句柄)
                返回 (假)
            .默认
                赋值 (集_映射对象句柄, 0)
            .判断结束
            
        .如果真结束
        赋值 (起始地址, MapViewOfFile (映射对象句柄, #FILE_MAP_WRITE, 0, 0, 0))
    .如果真结束
    .如果真 (等于 (起始地址, 0))
        CloseHandle (映射对象句柄)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_映射对象句柄, 0))
        .如果真 (等于 (关闭对象 (), 假))
            UnmapViewOfFile (起始地址)
            CloseHandle (映射对象句柄)
            返回 (假)
        .如果真结束
        
    .如果真结束
    赋值 (集_映射对象句柄, 映射对象句柄)
    赋值 (集_起始地址, 起始地址)
    赋值 (文件尺寸, 映射尺寸)
    赋值 (集_文件尺寸, 文件尺寸)
    返回 (真)
.判断结束


.子程序 初始化_从映射对象名创建, 逻辑型, , 最好是读入,读写可能不行!
.参数 文件映射对象名, 文本型, , 
.参数 打开方式, 整数型, , 1、#读入：以只读方式打开映射； 2、#读写：以可读、可写方式打开映射；

.局部变量 映射对象句柄, 整数型, , , 
.局部变量 起始地址, 整数型, , , 
.局部变量 打开方式1, 整数型, , , 
.局部变量 MEMORY_BASIC_INFORMATION, MEMORY_BASIC_INFORMATION, , , 

.如果真 (并且 (不等于 (打开方式, #读入), 不等于 (打开方式, #读写)))
    返回 (假)
.如果真结束
.判断开始 (等于 (打开方式, #读入))
    赋值 (打开方式1, #PAGE_READWRITE) ' #PAGE_READONLY
.默认
    赋值 (打开方式1, #PAGE_READWRITE)
.判断结束
 ' .判断开始 (是否为空 (文件映射对象名))
     ' 映射对象句柄 ＝ CreateFileMapping2 (文件号, 0, 打开方式1, 0, 0, 0)
.默认
     ' 映射对象句柄 ＝ CreateFileMapping1 (文件号, 0, 2, 0, 0, 文件映射对象名)
.判断结束
赋值 (映射对象句柄, OpenFileMapping (打开方式1, 0, 文件映射对象名))
.判断开始 (等于 (映射对象句柄, 0))
    返回 (假)
.默认
    .判断开始 (等于 (打开方式, #读入))
        赋值 (打开方式1, #FILE_MAP_READ)
    .默认
        赋值 (打开方式1, #FILE_MAP_WRITE)
    .判断结束
    赋值 (起始地址, MapViewOfFile (映射对象句柄, 打开方式1, 0, 0, 0))
    .如果真 (等于 (起始地址, 0))
        CloseHandle (映射对象句柄)
        返回 (假)
    .如果真结束
    .如果真 (不等于 (集_映射对象句柄, 0))
        .如果真 (等于 (关闭 (), 假))
            UnmapViewOfFile (起始地址)
            CloseHandle (映射对象句柄)
            返回 (假)
        .如果真结束
        
    .如果真结束
    VirtualQuery (起始地址, MEMORY_BASIC_INFORMATION, 28)
    赋值 (集_映射对象句柄, 映射对象句柄)
    赋值 (集_起始地址, 起始地址)
    赋值 (集_当前位置, 0)
    赋值 (集_文件尺寸, MEMORY_BASIC_INFORMATION.RegionSize)
    赋值 (集_文件映射对象名_是否为空, 假)
    赋值 (集_文件映射对象名, 文件映射对象名)
    赋值 (集_打开方式, 打开方式)
    返回 (真)
.判断结束


.子程序 关闭, 逻辑型, , 
.判断开始 (等于 (集_正在查找, 真))
    返回 (假)
.判断 (不等于 (UnmapViewOfFile (集_起始地址), 0))
    CloseHandle (集_映射对象句柄)
    连续赋值 (0, 集_起始地址, 集_映射对象句柄, 集_当前位置, 集_文件尺寸, 集_打开方式, 集_文件打开方式, 集_共享方式)
    赋值 (集_文件映射对象名_是否为空, 真)
    赋值 (集_文件映射对象名, “”)
    赋值 (集_是否自动删除, 假)
    .如果真 (不等于 (集_文件号, 0))
        CloseHandle (集_文件号)
        赋值 (集_文件号, 0)
        赋值 (集_文件名, “”)
    .如果真结束
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 关闭对象, 逻辑型, , 
.判断开始 (不等于 (UnmapViewOfFile (集_起始地址), 0))
    CloseHandle (集_映射对象句柄)
    赋值 (集_起始地址, 0)
    赋值 (集_当前位置, 0)
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取首地址, 整数型, , 
.如果真 (等于 (集_起始地址, 0))
    返回 (-1)
.如果真结束
返回 (集_起始地址)


.子程序 取读写位置, 长整数型, , 
.如果真 (等于 (集_起始地址, 0))
    返回 (-1)
.如果真结束
返回 (集_当前位置)


.子程序 移动读写位置, 逻辑型, , 
.参数 移动距离, 长整数型, , 
.参数 起始移动位置, 整数型, 可空, 参数值指定从文件中开始移动的位置。可以为以下常量之一：1、#文件首； 2、#文件尾； 3、#现行位置。如果本参数被省略，默认值为“#文件首”。

.如果真 (等于 (集_起始地址, 0))
    返回 (假)
.如果真结束
.如果真 (是否为空 (起始移动位置))
    赋值 (起始移动位置, #文件首)
.如果真结束
.判断开始 (或者 (小于 (起始移动位置, 1), 大于 (起始移动位置, 3)))
    返回 (假)
.判断 (等于 (起始移动位置, #文件首))
    .如果真 (大于 (移动距离, 集_文件尺寸))
        返回 (假)
    .如果真结束
    .如果真 (小于 (移动距离, 0))
        返回 (假)
    .如果真结束
    赋值 (集_当前位置, 移动距离)
.判断 (等于 (起始移动位置, #文件尾))
    .如果真 (大于 (相加 (集_文件尺寸, 移动距离), 集_文件尺寸))
        返回 (假)
    .如果真结束
    .如果真 (小于 (相加 (集_文件尺寸, 移动距离), 0))
        返回 (假)
    .如果真结束
    赋值 (集_当前位置, 相加 (集_文件尺寸, 移动距离))
.判断 (等于 (起始移动位置, #现行位置))
    .如果真 (大于 (相加 (集_当前位置, 移动距离), 集_文件尺寸))
        返回 (假)
    .如果真结束
    .如果真 (小于 (相加 (集_当前位置, 移动距离), 0))
        返回 (假)
    .如果真结束
    赋值 (集_当前位置, 相加 (集_当前位置, 移动距离))
.默认
    
.判断结束
返回 (假)


.子程序 移到首位置, 空白型, , 
赋值 (集_当前位置, 0)


.子程序 移到尾位置, 空白型, , 
.如果真 (等于 (集_起始地址, 0))
    返回 ()
.如果真结束
赋值 (集_当前位置, 集_文件尺寸)


.子程序 读出字节集, 字节集, , 
.参数 欲读取长度, 整数型, , 

.局部变量 Temp, 字节集, , , 

.如果真 (或者 (小于 (欲读取长度, 0), 等于 (集_起始地址, 0)))
    返回 ({  })
.如果真结束
.如果真 (大于 (相加 (集_当前位置, 欲读取长度), 集_文件尺寸))
    赋值 (欲读取长度, 相减 (集_文件尺寸, 集_当前位置))
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 欲读取长度))
赋值 (集_当前位置, 相加 (集_当前位置, 欲读取长度))
返回 (Temp)

.子程序 读出文本, 文本型, , 读出一个以零字符结束的文本串
.局部变量 返回值, 文本型, , , 

.如果真 (或者 (等于 (集_当前位置, 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (“”)
.如果真结束
赋值 (返回值, 指针到文本 (相加 (集_起始地址, 集_当前位置)))
赋值 (集_当前位置, 相加 (集_当前位置, 取文本长度 (返回值), 1))
.如果真 (大于 (集_当前位置, 集_文件尺寸))
    赋值 (集_当前位置, 集_文件尺寸)
.如果真结束
返回 (返回值)


.子程序 读出字节, 字节型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (等于 (集_当前位置, 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 1))
赋值 (集_当前位置, 相加 (集_当前位置, 1))
返回 (Temp [1])


.子程序 读出短整数, 短整数型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 2), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 2))
赋值 (集_当前位置, 相加 (集_当前位置, 2))
返回 (取字节集数据 (Temp, #短整数型, ))

.子程序 读出整数, 整数型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 4))
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (取字节集数据 (Temp, #整数型, ))


.子程序 读出长整数, 长整数型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 8))
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (取字节集数据 (Temp, #长整数型, ))

.子程序 读出小数, 小数型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 4))
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (取字节集数据 (Temp, #小数型, ))

.子程序 读出双精度小数, 双精度小数型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (0)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 8))
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (取字节集数据 (Temp, #双精度小数型, ))

.子程序 读出逻辑值, 逻辑型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 4))
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (取字节集数据 (Temp, #逻辑型, ))

.子程序 读出日期时间型, 日期时间型, , 
.局部变量 Temp, 字节集, , , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (取字节集数据 ({  }, #日期时间型, ))
.如果真结束
赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 集_当前位置), 8))
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (取字节集数据 (Temp, #日期时间型, ))

.子程序 写入字节集, 逻辑型, , 
.参数 欲写入字节集, 字节集, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 取字节集长度 (欲写入字节集)), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory (相加 (集_起始地址, 集_当前位置), 欲写入字节集, 取字节集长度 (欲写入字节集))
赋值 (集_当前位置, 相加 (集_当前位置, 取字节集长度 (欲写入字节集)))
返回 (真)

.子程序 写入文本, 逻辑型, , 
.参数 欲写入文本, 文本型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 取文本长度 (欲写入文本), 1), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_s (相加 (集_起始地址, 集_当前位置), 欲写入文本, 取文本长度 (欲写入文本))
CopyMemory (相加 (集_起始地址, 集_当前位置, 取文本长度 (欲写入文本)), { 0 }, 1)
赋值 (集_当前位置, 相加 (集_当前位置, 取文本长度 (欲写入文本), 1))
返回 (真)

.子程序 写入小数, 逻辑型, , 
.参数 欲写入小数, 小数型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_x (相加 (集_起始地址, 集_当前位置), 欲写入小数, 4)
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (真)

.子程序 写入双精度小数, 逻辑型, , 
.参数 欲写入双精度小数, 双精度小数型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_sj (相加 (集_起始地址, 集_当前位置), 欲写入双精度小数, 8)
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (真)

.子程序 写入字节, 逻辑型, , 
.参数 欲写入字节, 字节型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 1), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory (相加 (集_起始地址, 集_当前位置), 到字节集 (欲写入字节), 1)
赋值 (集_当前位置, 相加 (集_当前位置, 1))
返回 (真)

.子程序 写入短整数, 逻辑型, , 
.参数 欲写入短整数, 短整数型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 2), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_d (相加 (集_起始地址, 集_当前位置), 欲写入短整数, 2)
赋值 (集_当前位置, 相加 (集_当前位置, 2))
返回 (真)

.子程序 写入整数, 逻辑型, , 
.参数 欲写入整数, 整数型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_z (相加 (集_起始地址, 集_当前位置), 欲写入整数, 4)
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (真)

.子程序 写入长整数, 逻辑型, , 
.参数 欲写入长整数, 长整数型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_c (相加 (集_起始地址, 集_当前位置), 欲写入长整数, 8)
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (真)

.子程序 写入日期时间, 逻辑型, , 
.参数 欲写入值, 日期时间型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 8), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_r (相加 (集_起始地址, 集_当前位置), 欲写入值, 8)
赋值 (集_当前位置, 相加 (集_当前位置, 8))
返回 (真)

.子程序 写入逻辑, 逻辑型, , 
.参数 欲写入值, 逻辑型, , 

.如果真 (或者 (大于 (相加 (集_当前位置, 4), 集_文件尺寸), 等于 (集_起始地址, 0)))
    返回 (假)
.如果真结束
CopyMemory_z (相加 (集_起始地址, 集_当前位置), 到整数 (欲写入值), 4)
赋值 (集_当前位置, 相加 (集_当前位置, 4))
返回 (真)

.子程序 取错误信息, 空白型, , 
.参数 错误号, 整数型, 参考 可空, 
.参数 错误文本, 文本型, 参考 可空, 

.局部变量 Bytes, 整数型, , , 

赋值 (错误号, GetLastError ())
.如果真 (不等于 (错误号, 0))
    赋值 (错误文本, 取空白文本 (129))
    赋值 (Bytes, FormatMessage (位或 (#FORMAT_MESSAGE_FROM_SYSTEM, #FORMAT_MESSAGE_ARGUMENT_ARRAY), 0, 错误号, 0, 错误文本, 128, 0))
    .判断开始 (大于 (Bytes, 2))
        赋值 (错误文本, 取文本左边 (错误文本, 相减 (Bytes, 2)))
    .默认
        赋值 (错误文本, “”)
    .判断结束
    
.如果真结束


.子程序 插入字节集, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入字节集, 字节集, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 取字节集长度 (欲插入字节集))
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory (相加 (集_起始地址, 集_当前位置), 欲插入字节集, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入文本, 逻辑型, , 插入以字符（0）为结尾的文本。因而在插入数据后，插入的尺寸会比实际插入的文本大1字节。“插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入文本, 文本型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 相加 (取文本长度 (欲插入文本), 1))
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_s (相加 (集_起始地址, 集_当前位置), 欲插入文本, 取文本长度 (欲插入文本))
CopyMemory (相加 (集_起始地址, 集_当前位置, 取文本长度 (欲插入文本)), { 0 }, 1)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入小数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入小数, 小数型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 4)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_x (相加 (集_起始地址, 集_当前位置), 欲插入小数, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入双精度小数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入双精度小数, 双精度小数型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 8)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_sj (相加 (集_起始地址, 集_当前位置), 欲插入双精度小数, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入字节, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入字节, 字节型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 1)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory (相加 (集_起始地址, 集_当前位置), 到字节集 (欲插入字节), 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入短整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入短整数, 短整数型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 2)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_d (相加 (集_起始地址, 集_当前位置), 欲插入短整数, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入整数, 整数型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 4)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_d (相加 (集_起始地址, 集_当前位置), 欲插入整数, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入长整数, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入长整数, 长整数型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 8)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_d (相加 (集_起始地址, 集_当前位置), 欲插入长整数, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入日期时间, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入值, 日期时间型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 8)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_r (相加 (集_起始地址, 集_当前位置), 欲插入值, 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)

.子程序 插入逻辑, 逻辑型, , “插入XX”类方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲插入值, 逻辑型, , 

.局部变量 插入长度, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0)))
    返回 (假)
.如果真结束
赋值 (插入长度, 4)
.判断开始 (集_文件映射对象名_是否为空)
    .如果真 (等于 (从文件号创建 (集_文件号, , 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.默认
    .如果真 (等于 (从文件号创建 (集_文件号, 集_文件映射对象名, 相加 (集_文件尺寸, 插入长度)), 假))
        返回 (假)
    .如果真结束
    
.判断结束
MoveMemory (相加 (集_起始地址, 集_当前位置, 插入长度), 相加 (集_起始地址, 集_当前位置), 相减 (集_文件尺寸, 集_当前位置))
CopyMemory_z (相加 (集_起始地址, 集_当前位置), 到整数 (欲插入值), 插入长度)
赋值 (集_当前位置, 相加 (集_当前位置, 插入长度))
返回 (真)


.子程序 取文件映射尺寸, 长整数型, , 如果是用“初始化_从映射对象创建”来初始化类，得到的尺寸会有可能比真实文件尺寸稍大（4096的倍数）
返回 (集_文件尺寸)

.子程序 寻找字节集, 整数型, , 寻找成功就返回指定寻找数据的起始位置，位置值从 0 开始。如果未找到或寻找失败，返回 -1。
.参数 欲寻找的字节集, 字节集, , 
.参数 起始搜寻位置, 整数型, 可空, 0为首位置，1为第2个位置，如此类推，如果被省略，则“寻找字节集”命令默认从当前读写位置开始。如果为负数，则从当前读写位置减“起始搜寻位置”的位置开始搜寻
.参数 是否倒找字节集, 逻辑型, 可空, 如果为真则从尾部向首方向搜寻，如果被省略，则默认为假
.参数 是否处理事件, 逻辑型, 可空, 如果为真则可使用“中止寻找字节集”方法中止正在进行中的寻找，及可使用“取寻找字节集进度”方法取得当前查找的进度，代价是会减慢查找速度。如果为假，则这两个方法都不可用，默认为假。

.局部变量 数据长度, 整数型, , , 
.局部变量 Temp, 字节集, , , 
.局部变量 数据块长度, 整数型, , , 
.局部变量 I, 空白型, , , 
.局部变量 J, 空白型, , , 


.如果真 (集_正在查找)
    返回 (-1)
.如果真结束
赋值 (集_正在查找, 真)
赋值 (集_中止查找, 假)
赋值 (集_查找进度, 0)
赋值 (数据长度, 取字节集长度 (欲寻找的字节集))
赋值 (数据块长度, 相乘 (1024, 1024)) ' 设定搜索的数据块大小为1MB
.如果真 (小于 (数据块长度, 数据长度))
    赋值 (数据块长度, 相乘 (数据长度, 2))
.如果真结束
.如果真 (或者 (等于 (集_起始地址, 0), 等于 (集_文件尺寸, 0), 等于 (数据长度, 0)))
    赋值 (集_正在查找, 假)
    赋值 (集_中止查找, 假)
    返回 (-1)
.如果真结束
.如果真 (是否为空 (起始搜寻位置))
    赋值 (起始搜寻位置, 集_当前位置)
.如果真结束

.判断开始 (等于 (是否倒找字节集, 假))
    .判断开始 (小于 (起始搜寻位置, 0))
        赋值 (I, 相加 (集_当前位置, 起始搜寻位置))
        .判断开始 (小于 (I, 0))
            赋值 (起始搜寻位置, 0)
        .默认
            赋值 (J, 相加 (负 (起始搜寻位置), 1))
            赋值 (起始搜寻位置, I)
        .判断结束
        
    .判断 (等于 (起始搜寻位置, 集_文件尺寸))
        赋值 (集_正在查找, 假)
        赋值 (集_中止查找, 假)
        返回 (-1)
    .默认
        
    .判断结束
    .如果真 (大于 (起始搜寻位置, 集_文件尺寸))
        赋值 (集_正在查找, 假)
        赋值 (集_中止查找, 假)
        返回 (-1)
    .如果真结束
    .如果真 (大于 (相加 (起始搜寻位置, 数据块长度), 集_文件尺寸))
        赋值 (数据块长度, 相减 (集_文件尺寸, 起始搜寻位置))
    .如果真结束
    赋值 (J, 起始搜寻位置)
    赋值 (Temp, 指针到字节集 (相加 (集_起始地址, 起始搜寻位置), 数据块长度))
    赋值 (I, 寻找字节集 (Temp, 欲寻找的字节集, ))
    .判断开始 (不等于 (I, -1))
        赋值 (集_正在查找, 假)
        赋值 (集_查找进度, 100)
        赋值 (集_中止查找, 假)
        返回 (相减 (相加 (起始搜寻位置, I), 1))
    .默认
        .判断循环首 (等于 (I, -1))
            赋值 (起始搜寻位置, 相加 (起始搜寻位置, 数据块长度))
            .如果真 (大于 (相加 (起始搜寻位置, 数据块长度, 数据长度), 集_文件尺寸))
                赋值 (数据块长度, 相减 (集_文件尺寸, 起始搜寻位置, 数据长度))
            .如果真结束
            赋值 (Temp, 指针到字节集 (相减 (相加 (集_起始地址, 起始搜寻位置), 数据长度), 相加 (数据块长度, 数据长度)))
            赋值 (I, 寻找字节集 (Temp, 欲寻找的字节集, ))
            .如果真 (是否处理事件)
                赋值 (集_查找进度, 相除 (相乘 (相加 (起始搜寻位置, 数据块长度), 100), 集_文件尺寸))
                .如果真 (集_中止查找)
                    跳出循环 ()
                .如果真结束
                处理事件 ()
            .如果真结束
            .判断开始 (不等于 (I, -1))
                赋值 (J, 相减 (相加 (J, 数据块长度), 数据长度))
                .判断开始 (小于 (I, 起始搜寻位置))
                    赋值 (I, 相减 (相加 (J, I), 1))
                    赋值 (集_正在查找, 假)
                    赋值 (集_查找进度, 100)
                    赋值 (集_中止查找, 假)
                    返回 (I)
                .默认
                    赋值 (I, 相减 (相加 (相减 (起始搜寻位置, 数据长度), I), 1)) ' J ＋ I － 1
                    赋值 (集_正在查找, 假)
                    赋值 (集_查找进度, 100)
                    赋值 (集_中止查找, 假)
                    返回 (I)
                .判断结束
                
            .判断 (等于 (相加 (起始搜寻位置, 数据块长度, 数据长度), 集_文件尺寸))
                跳出循环 ()
            .默认
                赋值 (J, 相加 (J, 数据块长度)) ' － 数据长度
            .判断结束
            
        .判断循环尾 ()
        赋值 (集_正在查找, 假)
        赋值 (集_查找进度, 100)
        赋值 (集_中止查找, 假)
        返回 (-1)
    .判断结束
    
.默认
    .如果真 (小于 (起始搜寻位置, 0))
         ' 起始搜寻位置 ＝ 集_当前位置 ＋ 起始搜寻位置
        赋值 (I, 相减 (集_当前位置, 起始搜寻位置))
        .判断开始 (小于 (I, 0))
            赋值 (起始搜寻位置, 0)
        .默认
            赋值 (J, 相加 (负 (起始搜寻位置), 1))
            赋值 (起始搜寻位置, I)
        .判断结束
        
    .如果真结束
    .如果真 (大于 (起始搜寻位置, 集_文件尺寸))
        赋值 (集_正在查找, 假)
        赋值 (集_中止查找, 假)
        返回 (-1)
    .如果真结束
    .如果真 (小于 (相减 (起始搜寻位置, 数据块长度), 0))
        赋值 (数据块长度, 起始搜寻位置)
    .如果真结束
    赋值 (Temp, 指针到字节集 (相减 (相加 (集_起始地址, 起始搜寻位置), 数据块长度), 数据块长度))
    赋值 (I, 寻找字节集 (Temp, 欲寻找的字节集, ))
    .判断开始 (不等于 (I, -1))
        赋值 (I, 相减 (相加 (相减 (起始搜寻位置, 数据块长度), I), 1))
        赋值 (集_正在查找, 假)
        赋值 (集_查找进度, 100)
        赋值 (集_中止查找, 假)
        返回 (I)
    .默认
        .判断循环首 (等于 (I, -1))
            赋值 (起始搜寻位置, 相减 (起始搜寻位置, 数据块长度)) ' ＋ 数据长度
            .如果真 (小于 (相减 (起始搜寻位置, 数据块长度), 0))
                赋值 (起始搜寻位置, 数据块长度)
                 ' 数据块长度 ＝ 起始搜寻位置 ＋ 数据长度
            .如果真结束
            赋值 (Temp, 指针到字节集 (相减 (相加 (集_起始地址, 起始搜寻位置), 数据块长度), 相加 (数据块长度, 数据长度)))
            赋值 (I, 寻找字节集 (Temp, 欲寻找的字节集, ))
            .如果真 (是否处理事件)
                赋值 (集_查找进度, 相除 (相乘 (相加 (相减 (集_文件尺寸, 起始搜寻位置), 数据块长度), 100), 集_文件尺寸))
                 ' (起始搜寻位置 ＋ 数据块长度) × 100 ÷ 集_文件尺寸
                .如果真 (集_中止查找)
                    跳出循环 ()
                .如果真结束
                处理事件 ()
            .如果真结束
            .判断开始 (不等于 (I, -1))
                赋值 (I, 相减 (相加 (相减 (起始搜寻位置, 数据块长度), I), 1))
                赋值 (集_正在查找, 假)
                赋值 (集_查找进度, 100)
                赋值 (集_中止查找, 假)
                返回 (I)
            .判断 (等于 (相减 (起始搜寻位置, 数据块长度), 0))
                跳出循环 ()
            .默认
                
            .判断结束
            
        .判断循环尾 ()
        赋值 (集_正在查找, 假)
        赋值 (集_查找进度, 100)
        赋值 (集_中止查找, 假)
        返回 (-1)
    .判断结束
    
.判断结束


.子程序 中止寻找字节集, 逻辑型, , 需要将“寻找字节集”方法的第四个参数设为真时，本方法才可用。
.判断开始 (集_正在查找)
    赋值 (集_中止查找, 真)
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 取寻找字节集进度, 小数型, , 需要将“寻找字节集”方法的第四个参数设为真时，本方法才可用。返回当前寻找进度的百分比。
返回 (集_查找进度)

.子程序 删除数据, 逻辑型, , 本方法必须使用“初始化_从文件创建”初始化类才能使用。
.参数 欲删除数据的长度, 整数型, , 

.局部变量 文件号, 整数型, , , 

.如果真 (或者 (等于 (集_起始地址, 0), 小于或等于 (集_文件号, 0), 等于 (集_打开方式, #读入), 小于或等于 (欲删除数据的长度, 0)))
    返回 (假)
.如果真结束
MoveMemory (相加 (集_起始地址, 集_当前位置), 相加 (集_起始地址, 集_当前位置, 欲删除数据的长度), 相减 (集_文件尺寸, 集_当前位置, 欲删除数据的长度))
关闭对象 ()
CloseHandle (集_文件号)
赋值 (文件号, 打开文件 (集_文件名, 集_文件打开方式, 集_共享方式))
.如果真 (等于 (文件号, 0))
    .判断开始 (集_文件映射对象名_是否为空)
        初始化_从文件创建 (集_文件名, 集_文件打开方式, 集_共享方式, 集_是否自动删除, )
    .默认
        初始化_从文件创建 (集_文件名, 集_文件打开方式, 集_共享方式, 集_是否自动删除, 集_文件映射对象名)
    .判断结束
    返回 (假)
.如果真结束
移动读写位置 (文件号, #文件尾, 负 (欲删除数据的长度))
删除数据 (文件号, 欲删除数据的长度)
关闭文件 (文件号)
赋值 (集_映射对象句柄, 0)
.判断开始 (集_文件映射对象名_是否为空)
    返回 (初始化_从文件创建 (集_文件名, 集_文件打开方式, 集_共享方式, 集_是否自动删除, ))
.默认
    返回 (初始化_从文件创建 (集_文件名, 集_文件打开方式, 集_共享方式, 集_是否自动删除, 集_文件映射对象名))
.判断结束


.子程序 取文件映射对象名, 文本型, , 
.判断开始 (集_文件映射对象名_是否为空)
    返回 (“”)
.默认
    返回 (集_文件映射对象名)
.判断结束



 ' 不属于任何一个程序集、类模块的函数：
