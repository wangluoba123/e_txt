 ' 文件类型：Windows模块源码

 ' 程序名称：进程通讯
 ' 程序描述：进程通讯
@备注:
进程通讯
 ' 程序作者：WUJUEZHE
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库





.DLL命令 SetWindowLong, 整数型, "", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 RegisterWindowMessage, 整数型, "user32", "RegisterWindowMessageA", , 获取分配给一个字串标识符的消息编号　&C000 到 &FFFF之间的一个消息编号。零意味着出错
    .参数 lpString, 文本型, , 注册消息的名字;  

.DLL命令 GetCurrentProcessId, 整数型, "kernel32", "GetCurrentProcessId", , 

.DLL命令 IsWindow, 逻辑型, "user32", "IsWindow", , 
    .参数 句柄, 整数型, , 

.DLL命令 lstrcpyn, 整数型, "kernel32", "lstrcpynA", , 
    .参数 lpString1, 字节集, 传址, 
    .参数 lpString2, 字节集, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 
    .参数 hwnd, 整数型, , 
    .参数 wMsg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 OpenProcess2, 整数型, "", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 ReadProcessMemory, 整数型, "", "ReadProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "", "WriteProcessMemory", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 

.DLL命令 CloseHandle, 整数型, "", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 字节集, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, , 
    .参数 参数, 整数型, , 
    .参数 参数, 整数型, , 

.DLL命令 CallWindowProc2, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 _打开事件同步对象, 整数型, "", "OpenEventA", , 程序_禁示重复运行
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 lpName, 文本型, , 

.程序集 程序集1, , , 

.程序集变量 程序集_oldlong, 整数型, , , 
.程序集变量 程序集_标识文本数组, 文本型, , "0", 
.程序集变量 程序集_消息编号数组, 整数型, , "0", 
.程序集变量 程序集_数据数组, 字节集, , "0", 
.程序集变量 程序集_指针数组, 子程序指针, , "0", 
.程序集变量 程序集_窗口句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 进程通信_接收端_初始化, 空白型, , 监听前必需调用此子程序，只需使用一次，停止监听前不能再使用此子程序，否则会出错。
.参数 参数_窗口句柄, 整数型, , 当前窗口句柄，可用 取窗口句柄() 得到。

赋值 (程序集_窗口句柄, 参数_窗口句柄)
赋值 (程序集_oldlong, 未知函数_167837914 (参数_窗口句柄, -4, 到整数 (&进程通信_接收端_读数据)))

.子程序 进程通信_接收端_开始监听, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_标志文本, 文本型, , 可以为任意文本(不能为空文本)，但是不要和系统中已有的冲突。设置不同的标志文本，可绑定不同的子程序。
.参数 参数_回调函数, 子程序指针, 可空, 接收到信息后要触发的子程序，不可多个标志文本绑定同个子程序，不需要可不填。

.局部变量 局部_计次, 整数型, , , 

.如果真 (等于 (参数_标志文本, “”))
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (程序集_标识文本数组), 局部_计次)
    .如果真 (等于 (程序集_标识文本数组 [局部_计次], 参数_标志文本))
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
加入成员 (程序集_消息编号数组, 未知函数_167837915 (参数_标志文本))
加入成员 (程序集_标识文本数组, 参数_标志文本)
.如果真 (等于 (程序集_消息编号数组 [取数组成员数 (程序集_消息编号数组)], 0))
    删除成员 (程序集_标识文本数组, 取数组成员数 (程序集_标识文本数组), )
    删除成员 (程序集_消息编号数组, 取数组成员数 (程序集_消息编号数组), )
    返回 (假)
.如果真结束
.计次循环首 (相减 (取数组成员数 (程序集_消息编号数组), 1), 局部_计次)
    .如果真 (等于 (程序集_消息编号数组 [局部_计次], 程序集_消息编号数组 [取数组成员数 (程序集_消息编号数组)]))
        删除成员 (程序集_标识文本数组, 取数组成员数 (程序集_标识文本数组), )
        删除成员 (程序集_消息编号数组, 取数组成员数 (程序集_消息编号数组), )
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
.计次循环首 (取数组成员数 (程序集_指针数组), 局部_计次)
    .如果真 (等于 (程序集_指针数组 [局部_计次], 参数_回调函数))
        删除成员 (程序集_标识文本数组, 取数组成员数 (程序集_标识文本数组), )
        删除成员 (程序集_消息编号数组, 取数组成员数 (程序集_消息编号数组), )
        返回 (假)
    .如果真结束
    
.计次循环尾 ()
加入成员 (程序集_指针数组, 参数_回调函数)
加入成员 (程序集_数据数组, 到字节集 (“”))
返回 (真)

.子程序 进程通信_接收端_关闭监听, 空白型, , 关闭某监听，要恢复请直接开始(不用重新初始化)。
.参数 参数_标志文本, 文本型, , 

.局部变量 局部_计次, 整数型, , , 

.计次循环首 (取数组成员数 (程序集_标识文本数组), 局部_计次)
    .如果真 (等于 (程序集_标识文本数组 [局部_计次], 参数_标志文本))
        删除成员 (程序集_消息编号数组, 局部_计次, )
        删除成员 (程序集_标识文本数组, 局部_计次, )
        删除成员 (程序集_数据数组, 局部_计次, )
        删除成员 (程序集_指针数组, 局部_计次, )
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 进程通信_接收端_停止监听, 空白型, , 关闭所有监听，要恢复请重新初始化。
未知函数_167837914 (程序集_窗口句柄, -4, 程序集_oldlong)
清除数组 (程序集_标识文本数组)
清除数组 (程序集_消息编号数组)
清除数组 (程序集_数据数组)
清除数组 (程序集_指针数组)

.子程序 进程通信_接收端_取出数据, 字节集, , 回调函数或其它子程序可用此子程序取出接收到的数据。
.参数 参数_标识文本, 文本型, , 接收端监听时设置的文本。

.局部变量 局部_计次, 整数型, , , 

.计次循环首 (取数组成员数 (程序集_标识文本数组), 局部_计次)
    .如果真 (等于 (程序集_标识文本数组 [局部_计次], 参数_标识文本))
        返回 (程序集_数据数组 [局部_计次])
    .如果真结束
    
.计次循环尾 ()
返回 ({  })

.子程序 进程通信_接收端_清除数据, 空白型, , 清除某监听得到的数据(其它数据不变)，释放该数据所占的内存。
.参数 参数_标志文本, 文本型, , 

.局部变量 局部_计次, 整数型, , , 

.计次循环首 (取数组成员数 (程序集_标识文本数组), 局部_计次)
    .如果真 (等于 (程序集_标识文本数组 [局部_计次], 参数_标志文本))
        赋值 (程序集_数据数组 [局部_计次], {  })
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

.子程序 进程通信_接收端_清空数据, 空白型, , 清空所有监听得到的所有数据，释放内存。
重定义数组 (程序集_数据数组, 假, 取数组成员数 (程序集_数据数组))

.子程序 进程通信_发送端_发送数据, 逻辑型, , 成功返回真，失败返回假。
.参数 参数_窗口句柄, 整数型, , 接收端的窗口句柄。
.参数 参数_标志文本, 文本型, , 接收端监听时设置的文本。
.参数 参数_欲发送的数据, 字节集, , 要发送的数据。

.局部变量 局部_消息文本, 字节集, , , 
.局部变量 局部_标识, 字节集, , , 
.局部变量 局部_PID, 文本型, 静态, , 
.局部变量 局部_msg, 整数型, , , 
.局部变量 局部_PIDlen, 文本型, , , 

赋值 (局部_msg, 未知函数_167837915 (参数_标志文本))
.如果真 (或者 (等于 (局部_PID, “”), 等于 (局部_PID, “0”)))
    赋值 (局部_PID, 到文本 (未知函数_167837916 ()))
.如果真结束
.如果真 (未知函数_167837917 (参数_窗口句柄))
    赋值 (局部_标识, { 1 })
    赋值 (局部_消息文本, 到字节集 (相加 (到文本 (未知函数_167837919 (局部_标识, 局部_标识, 0)), “$”, 到文本 (取字节集长度 (参数_欲发送的数据)), “&”, 到文本 (未知函数_167837919 (参数_欲发送的数据, 参数_欲发送的数据, 0)))))
    赋值 (局部_PIDlen, 到文本 (取文本长度 (局部_PID)))
    未知函数_167837918 (参数_窗口句柄, 局部_msg, 到整数 (相加 (局部_PIDlen, 局部_PID, 到文本 (取字节集长度 (局部_消息文本)))), 未知函数_167837919 (局部_消息文本, 局部_消息文本, 0))
    .如果真 (等于 (局部_标识, { 2 }))
        返回 (真)
    .如果真结束
    返回 (假)
.如果真结束
返回 (假)

.子程序 进程通信_接收端_读数据, 整数型, , 
.参数 参数_窗口句柄, 整数型, , 
.参数 参数_消息号, 整数型, , 
.参数 参数_参数1, 整数型, , 
.参数 参数_参数2, 整数型, , 

.局部变量 局部_消息文本, 文本型, , , 
.局部变量 局部_标识地址, 整数型, , , 
.局部变量 局部_len, 整数型, , , 
.局部变量 局部_drlen, 整数型, , , 
.局部变量 局部_hProcess, 整数型, , , 
.局部变量 局部_lpBuffer, 字节集, , , 
.局部变量 局部_计次, 整数型, , , 

.计次循环首 (取数组成员数 (程序集_消息编号数组), 局部_计次)
    .如果真 (等于 (程序集_消息编号数组 [局部_计次], 参数_消息号))
        赋值 (局部_消息文本, 到文本 (参数_参数1))
        赋值 (局部_len, 到整数 (取文本左边 (局部_消息文本, 1)))
        赋值 (局部_消息文本, 取文本右边 (局部_消息文本, 相减 (取文本长度 (局部_消息文本), 1)))
        赋值 (局部_hProcess, 未知函数_167837925 (2035711, 0, 到整数 (取文本左边 (局部_消息文本, 局部_len))))
        赋值 (局部_drlen, 到整数 (取文本右边 (局部_消息文本, 相减 (取文本长度 (局部_消息文本), 局部_len))))
        赋值 (局部_lpBuffer, 取空白字节集 (局部_drlen))
        未知函数_167837920 (局部_hProcess, 参数_参数2, 局部_lpBuffer, 局部_drlen, 0)
        赋值 (局部_消息文本, 到文本 (局部_lpBuffer))
        赋值 (局部_标识地址, 到整数 (取文本左边 (局部_消息文本, 相减 (寻找文本 (局部_消息文本, “$”, , 假), 1))))
        未知函数_167837924 (局部_hProcess, 局部_标识地址, { 2 }, 1, 0)
        赋值 (局部_消息文本, 取文本右边 (局部_消息文本, 相减 (取文本长度 (局部_消息文本), 寻找文本 (局部_消息文本, “$”, , 假))))
        赋值 (局部_drlen, 到整数 (取文本左边 (局部_消息文本, 相减 (寻找文本 (局部_消息文本, “&”, , 假), 1))))
        赋值 (局部_len, 到整数 (取文本右边 (局部_消息文本, 相减 (取文本长度 (局部_消息文本), 寻找文本 (局部_消息文本, “&”, , 假)))))
        赋值 (局部_lpBuffer, 取空白字节集 (局部_drlen))
        未知函数_167837920 (局部_hProcess, 局部_len, 局部_lpBuffer, 局部_drlen, 0)
        赋值 (程序集_数据数组 [局部_计次], 局部_lpBuffer)
        未知函数_167837921 (局部_hProcess)
        .如果真 (不等于 (到整数 (程序集_指针数组 [局部_计次]), 0))
            未知函数_167837922 ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }, 程序集_指针数组 [局部_计次], 0, 0, 0)
        .如果真结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (未知函数_167837923 (程序集_oldlong, 参数_窗口句柄, 参数_消息号, 参数_参数1, 参数_参数2))

.子程序 设置为默认浏览器, 空白型, , 如：自己做了个浏览器，可以用这句设置成默认的；第一个参数为空，第二个参数为1的时候，取消默认浏览器，设置前请先看说明
.参数 文件名绝对路径, 文本型, 可空, 可空:如果留空将设置本程序为默认浏览器;浏览器的可执行文件路径；
.参数 类型, 整数型, 可空, 可空:默认为0,0=设置指定或本程序为默认浏览器,1=设置IE为默认浏览器;

.如果 (等于 (类型, 0))
    .如果 (等于 (是否为空 (文件名绝对路径), 真))
        写注册项 (1, “htmlfile\shell\”, “e”)
        写注册项 (1, “htmlfile\shell\e\command\”, 相加 (取运行目录 (), “\”, 取执行文件名 (), “ ”, “%1”))
        写注册项 (1, “HTTP\shell\”, “e”)
        写注册项 (1, “HTTP\shell\e\command\”, 相加 (取运行目录 (), “\”, 取执行文件名 (), “ ”, “%1”))
        写注册项 (1, “https\shell\”, “e”)
        写注册项 (1, “https\shell\e\command\”, 相加 (取运行目录 (), “\”, 取执行文件名 (), “ ”, “%1”))
        写注册项 (1, “InternetShortcut\shell\”, “e”)
        写注册项 (1, “InternetShortcut\shell\e\command\”, 相加 (取运行目录 (), “\”, 取执行文件名 (), “ ”, “%1”))
        写注册项 (1, “mhtmlfile\shell\”, “e”)
        写注册项 (1, “mhtmlfile\shell\e\command\”, 相加 (取运行目录 (), “\”, 取执行文件名 (), “ ”, “%1”))
        
    .否则
        写注册项 (1, “htmlfile\shell\”, “e”)
        写注册项 (1, “htmlfile\shell\e\command\”, 相加 (文件名绝对路径, “ ”, “%1”))
        写注册项 (1, “HTTP\shell\”, “e”)
        写注册项 (1, “HTTP\shell\e\command\”, 相加 (文件名绝对路径, “ ”, “%1”))
        写注册项 (1, “https\shell\”, “e”)
        写注册项 (1, “https\shell\e\command\”, 相加 (文件名绝对路径, “ ”, “%1”))
        写注册项 (1, “InternetShortcut\shell\”, “e”)
        写注册项 (1, “InternetShortcut\shell\e\command\”, 相加 (文件名绝对路径, “ ”, “%1”))
        写注册项 (1, “mhtmlfile\shell\”, “e”)
        写注册项 (1, “mhtmlfile\shell\e\command\”, 相加 (文件名绝对路径, “ ”, “%1”))
    .如果结束
    
.否则
    写注册项 (1, “htmlfile\shell\”, “open”)
    写注册项 (1, “HTTP\shell\”, “open”)
    写注册项 (1, “https\shell\”, “open”)
    写注册项 (1, “InternetShortcut\shell\”, “open”)
    写注册项 (1, “mhtmlfile\shell\”, “open”)
.如果结束


.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。



 ' 不属于任何一个程序集、类模块的函数：
