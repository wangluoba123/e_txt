 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口1
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 284
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 SIO_OK, "0", , 串口操作成功
.常量 SIO_BADPORT, "-1", , 串口无效
.常量 SIO_OUTCONTROL, "-2", , 串口号超出范围
.常量 SIO_NODATA, "-4", , 串口读_无数据
.常量 SIO_OPENFAIL, "-5", , 串口被占用
.常量 SIO_RTS_BY_HW, "-6", , 串口不能设置硬件流控制
.常量 SIO_BADPARM, "-7", , 参数错误
.常量 SIO_WIN32FAIL, "-8", , 函数失败
.常量 SIO_BOARDNOTSUPPORT, "-9", , 串口不支持此函数
.常量 SIO_ABORT_WRITE, "-11", , 串口没懂啥意思
.常量 SIO_WRITETIMEOUT, "-12", , 串口写超时
.常量 , , , 
.常量 , , , 打开串口的 模式参数 开始
.常量 MODE_BIT_5, "0", , 字节中站第0，1位' 数据位
.常量 MODE_BIT_6, "1", , 
.常量 MODE_BIT_7, "2", , 
.常量 MODE_BIT_8, "3", , 
.常量 , , , 
.常量 MODE_STOP_1, "0", , 字节中站第2位‘ 停止位
.常量 MODE_STOP_2, "4", , 
.常量 , , , 
.常量 MODE_P_NONE, "0", , 字节中占第3，4，5位 ’奇偶位 无
.常量 MODE_P_EVEN, "24", , 0x18
.常量 MODE_P_ODD, "8", , 0x8
.常量 MODE_P_MARK, "40", , 0x28
.常量 MODE_P_SPC, "56", , 0x38
.常量 , , , 打开串口的 模式参数 结束
.常量 , , , 
.常量 , , , 打开串口 波特率参数
.常量 MODE_B50, "0", ,  波特率 50
.常量 MODE_B75, "1", , 
.常量 MODE_B110, "2", , 
.常量 MODE_B134, "3", , 
.常量 MODE_B150, "4", , 
.常量 MODE_B300, "5", , 
.常量 MODE_B600, "6", , 
.常量 MODE_B1200, "7", , 
.常量 MODE_B1800, "8", , 
.常量 MODE_B2400, "9", , 
.常量 MODE_B4800, "10", , 
.常量 MODE_B7200, "11", , 
.常量 MODE_B9600, "12", , 
.常量 MODE_B19200, "13", , 
.常量 MODE_B38400, "14", , 
.常量 MODE_B57600, "15", , 
.常量 MODE_B115200, "16", , 
.常量 MODE_B230400, "17", , 
.常量 MODE_B460800, "18", , 
.常量 MODE_B921600, "19", ,  波特率 921600
.常量 , , , 
.常量 , , , 
.常量 MODE_CTS_ON, "1", , 字节第0位 0 OFF 1 ON
.常量 MODE_CTS_OFF, "0", , Tx hardware flow control (CTS)
.常量 MODE_RTS_ON, "2", , 字节第1位 0 OFF 1 ON
.常量 MODE_RTS_OFF, "0", , Rx hardware flow control (RTS)
.常量 MODE_Tx_ON, "4", , 字节第2位 0 OFF 1 ON
.常量 MODE_Tx_OFF, "0", , Tx software flow control (Xon/Xoff)
.常量 MODE_Rx_ON, "8", , 字节第3位 0 OFF 1 ON
.常量 MODE_Rx_OFF, "0", , Rx software flow control (Xon/Xoff)
.常量 flush_input_buffer, "0", , 
.常量 flush_output_buffer, "1", , 
.常量 flush_input_and_output_buffer, "2", , 
.常量 , , , 
.常量 DTR_ON, "1", , 
.常量 DTR_OFF, "0", , 
.常量 RTS_ON, "1", , 
.常量 RTS_OFF, "0", , 
.常量 , , , 
.常量 DTR_RTS_ON, "3", , 
.常量 DTR_RTS_OFF, "0", , 
.常量 DTR_ON_RTS_OFF, "1", , 
.常量 DTR_OFF_RTS_ON, "2", , 
.常量 SIO_OK, "0", 隐藏, 串口操作成功
.常量 SIO_BADPORT, "-1", 隐藏, 串口无效
.常量 SIO_OUTCONTROL, "-2", 隐藏, 串口号超出范围
.常量 SIO_NODATA, "-4", 隐藏, 串口读_无数据
.常量 SIO_OPENFAIL, "-5", 隐藏, 串口被占用
.常量 SIO_RTS_BY_HW, "-6", 隐藏, 串口不能设置硬件流控制
.常量 SIO_BADPARM, "-7", 隐藏, 参数错误
.常量 SIO_WIN32FAIL, "-8", 隐藏, 函数失败
.常量 SIO_BOARDNOTSUPPORT, "-9", 隐藏, 串口不支持此函数
.常量 SIO_ABORT_WRITE, "-11", 隐藏, 串口写入被锁定，用户放弃写入
.常量 SIO_WRITETIMEOUT, "-12", 隐藏, 串口写超时
.常量 MODE_BIT_5, "0", 隐藏, 字节中占第0，1位 数据位
.常量 MODE_BIT_6, "1", 隐藏, 
.常量 MODE_BIT_7, "2", 隐藏, 
.常量 MODE_BIT_8, "3", 隐藏, 
.常量 MODE_STOP_1, "0", 隐藏, 字节中站第2位‘ 停止位
.常量 MODE_STOP_2, "4", 隐藏, 
.常量 MODE_P_NONE, "0", 隐藏, 字节中占第3，4，5位 ’奇偶位 无
.常量 MODE_P_EVEN, "24", 隐藏, 0x18
.常量 MODE_P_ODD, "8", 隐藏, 0x8
.常量 MODE_P_MARK, "40", 隐藏, 0x28
.常量 MODE_P_SPC, "56", 隐藏, 0x38
.常量 MODE_B50, "0", 隐藏,  波特率 50
.常量 MODE_B75, "1", 隐藏, 
.常量 MODE_B110, "2", 隐藏, 
.常量 MODE_B134, "3", 隐藏, 
.常量 MODE_B150, "4", 隐藏, 
.常量 MODE_B300, "5", 隐藏, 
.常量 MODE_B600, "6", 隐藏, 
.常量 MODE_B1200, "7", 隐藏, 
.常量 MODE_B1800, "8", 隐藏, 
.常量 MODE_B2400, "9", 隐藏, 
.常量 MODE_B4800, "10", 隐藏, 
.常量 MODE_B7200, "11", 隐藏, 
.常量 MODE_B9600, "12", 隐藏, 
.常量 MODE_B19200, "13", 隐藏, 
.常量 MODE_B38400, "14", 隐藏, 
.常量 MODE_B57600, "15", 隐藏, 
.常量 MODE_B115200, "16", 隐藏, 
.常量 MODE_B230400, "17", 隐藏, 
.常量 MODE_B460800, "18", 隐藏, 
.常量 MODE_B921600, "19", 隐藏,  波特率 921600
.常量 MODE_CTS_ON, "1", 隐藏, 字节第0位 0 OFF 1 ON
.常量 MODE_CTS_OFF, "0", 隐藏, Tx hardware flow control (CTS)
.常量 MODE_RTS_ON, "2", 隐藏, 字节第1位 0 OFF 1 ON
.常量 MODE_RTS_OFF, "0", 隐藏, Rx hardware flow control (RTS)
.常量 MODE_Tx_ON, "4", 隐藏, 字节第2位 0 OFF 1 ON
.常量 MODE_Tx_OFF, "0", 隐藏, Tx software flow control (Xon/Xoff)
.常量 MODE_Rx_ON, "8", 隐藏, 字节第3位 0 OFF 1 ON
.常量 MODE_Rx_OFF, "0", 隐藏, Rx software flow control (Xon/Xoff)
.常量 flush_input_buffer, "0", 隐藏, 
.常量 flush_output_buffer, "1", 隐藏, 
.常量 flush_input_and_output_buffer, "2", 隐藏, 
.常量 DTR_ON, "1", 隐藏, 
.常量 DTR_OFF, "0", 隐藏, 
.常量 RTS_ON, "1", 隐藏, 
.常量 RTS_OFF, "0", 隐藏, 
.常量 DTR_RTS_ON, "3", 隐藏, 
.常量 DTR_RTS_OFF, "0", 隐藏, 
.常量 DTR_ON_RTS_OFF, "1", 隐藏, 
.常量 DTR_OFF_RTS_ON, "2", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库



 ' 所需要的模块
 ' PComm模块 C:\Documents and Settings\Administrator\桌面\HD3000(pcomm)\pcomm\PComm模块\pcomm模块.ec



.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
载入 (窗口1, , 假)
返回 (0) ' 可以根据您的需要返回任意数值

.窗口程序集 窗口程序集1, , , 

.子程序 _窗口1_创建完毕, 空白型, , 
.局部变量 i, 空白型, , , 

.计次循环首 (16, i)
    .如果真 (等于 (初始化串口 (i), 0))
        串口发送数据 (i, 1, 1)
    .如果真结束
    
.计次循环尾 ()

.子程序 初始化串口, 整数型, , 
.参数 i, 空白型, , 

.如果 (等于 (打开串口 (i), 0)) ' 打开串口
    相加 (“ 打开串口”, 到文本 (i), “成功！”, #换行符).加入文本 ()
.否则
    相加 (“ 打开串口”, 到文本 (i), “失败！”, #换行符).加入文本 ()
    返回 (-1)
.如果结束

.如果 (等于 (设置串口 (i, #MODE_B19200, 到字节 (相加 (#MODE_BIT_8, #MODE_STOP_1, #MODE_P_NONE))), 0))
     ' 设置串口波特率为 19200，数据位8，停止位1，无奇偶校验
    相加 (“ 设置串口”, 到文本 (i), “成功！”, #换行符).加入文本 ()
.否则
    相加 (“ 设置串口”, 到文本 (i), “失败！”, #换行符).加入文本 ()
    返回 (-1)
.如果结束

.如果 (等于 (设置数据到达事件 (i, &缓冲数据到达事件), 0)) ' 设置串口数据到达事件
    相加 (“ 设置数据到达事件”, 到文本 (i), “成功！”, #换行符).加入文本 ()
.否则
    相加 (“ 设置数据到达事件”, 到文本 (i), “失败！”, #换行符).加入文本 ()
    返回 (-1)
.如果结束

.如果 (等于 (设置发送完毕事件 (i, &数据发送完毕事件), 0)) ' 设置串口数据发送完毕事件
    相加 (“ 设置发送完毕事件”, 到文本 (i), “成功！”, #换行符).加入文本 ()
.否则
    相加 (“ 设置发送完毕事件”, 到文本 (i), “失败！”, #换行符).加入文本 ()
    返回 (-1)
.如果结束

.如果 (等于 (设置收到终止字符事件 (i, &收到终止符事件, 到字节 (24)), 0)) ' 设置串口收到终止字符事件
    相加 (“ 设置收到终止字符事件”, 到文本 (i), “成功！”, #换行符, #换行符).加入文本 ()
.否则
    相加 (“ 设置收到终止字符事件”, 到文本 (i), “失败！”, #换行符, #换行符).加入文本 ()
    返回 (-1)
.如果结束
返回 (0)

.子程序 串口发送数据, 空白型, , 
.参数 串口号, 空白型, , 
.参数 地址, 空白型, , 
.参数 类型, 空白型, , 

.局部变量 文本, 文本型, , , 
.局部变量 i, 空白型, , , 

赋值 (文本, 相加 (“A5”, 到任意进制 (到文本 (地址), 10, 16), “09C0”, 到任意进制 (到文本 (类型), 10, 16), “00070024”))
.如果真 (大于 (写出字符串 (串口号, 文本, 取文本长度 (文本)), 0))
    清空缓存区 (串口号, 1)
.如果真结束


.子程序 数据发送完毕事件, 空白型, , 
.参数 串口号, 空白型, , 

输出调试文本 (相加 (“串口”, 到文本 (串口号), “发送数据完毕！”))

.子程序 缓冲数据到达事件, 空白型, , 
.参数 串口号, 空白型, , 

.局部变量 a, 文本型, , , 

.如果真 (大于 (读入字符串 (串口号, a, 255), 0))
    删全部空 (a).加入文本 ()
    .如果真 (等于 (取文本右边 (., 4), “0024”))
        数据处理 (串口号, .)
        赋值 (., “”)
        清空缓存区 (串口号, 0)
    .如果真结束
    
.如果真结束


.子程序 收到终止符事件, 空白型, , 
.参数 串口号, 空白型, , 

输出调试文本 (相加 (“串口”, 到文本 (串口号), “已收到终止字符！”))

.子程序 数据处理, 空白型, , 
.参数 串口号, 空白型, , 
.参数 数据, 文本型, , 

.局部变量 地址, 整数型, , , 

.如果真 (等于 (取文本右边 (数据, 4), “0024”))
    赋值 (地址, 到整数 (到任意进制 (取文本中间 (数据, 3, 2), 16, 10)))
    .判断开始 (小于 (地址, 26))
        串口发送数据 (串口号, 相加 (地址, 1), 1)
    .判断 (等于 (地址, 26))
        串口发送数据 (串口号, 1, 1)
    .默认
        
    .判断结束
    
.如果真结束


.子程序 _窗口1_将被销毁, 空白型, , 
关闭串口 (1)
关闭串口 (2)
释放DLL ()

.子程序 到任意进制, 文本型, , 可以将从二进制到三十六进制的数值随意进行转换(返回转换后的文本)
.参数 被转换文本, 文本型, , 欲被转换的文本(不可以转换负数以及小数)
.参数 被转换进制, 整数型, , 被转换文本的进制(2-36之间)
.参数 转换的进制, 整数型, , 要转换到的进制(2-36之间)

.局部变量 欲转换文本, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量, 整数型, , , 

.如果真 (或者 (小于 (被转换进制, 2), 小于 (转换的进制, 2), 大于 (被转换进制, 36), 大于 (转换的进制, 36))) ' 判断两个“进制系数”是否正确
    输出调试文本 (“参数错误-进制只能在2-36之间”)
    返回 (“”)
.如果真结束
赋值 (被转换文本, 到大写 (到半角 (被转换文本))) ' 规范参数
.计次循环首 (取文本长度 (被转换文本), 计次变量)
    赋值 (临时文本, 取文本中间 (被转换文本, 计次变量, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 被转换进制), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, 被转换文本, “不是一个有效的”, 取文本左边 (数值到金额 (被转换进制, 真), 相减 (取文本长度 (数值到金额 (被转换进制, 真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
    .如果真 (等于 (计次变量, 取文本长度 (被转换文本)))
        赋值 (临时文本, “”)
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (临时文本, “”))
    输出调试文本 (临时文本)
    返回 (“”)
.如果真结束
 ' 以上为数据处理代码
.如果真 (等于 (被转换进制, 转换的进制))
    返回 (被转换文本)
.如果真结束
.计次循环首 (取文本长度 (被转换文本), 计次变量) ' 整数转换开始
    赋值 (临时数值, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量, 1), , 真), 1), 求次方 (被转换进制, 相减 (取文本长度 (被转换文本), 计次变量))), 临时数值))
.计次循环尾 ()
.判断循环首 (大于 (临时数值, 相减 (转换的进制, 1)))
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (到数值 (到文本 (求余数 (临时数值, 转换的进制))), 1), 1), 欲转换文本))
    赋值 (临时数值, 取整 (相除 (临时数值, 转换的进制)))
.判断循环尾 ()
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
.如果真 (等于 (取文本长度 (欲转换文本), 1))
    返回 (相加 (“0”, 欲转换文本))
.如果真结束
返回 (欲转换文本)

.子程序 _按钮1_被单击, 空白型, , 


.子程序 _按钮2_被单击, 空白型, , 


.子程序 _按钮3_被单击, 空白型, , 


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 打开串口, 整数型, , =0 成功，<0 失败
.参数 串口号, 整数型, , 



.子程序 关闭串口, 整数型, , =0 成功，<0 失败
.参数 串口号, 整数型, , 



.子程序 设置数据到达事件, 整数型, , =0成功，<0失败，到达一个字符就触发事件
.参数 串口号, 整数型, , 
.参数 到达事件, 子程序指针, , '子程序包含一个整数参数，传递串口号



.子程序 设置串口, 整数型, , =0 成功，<0 失败
.参数 串口号, 整数型, , 
.参数 波特率, 整数型, , 
.参数 模式, 字节型, , 



.子程序 释放DLL, 空白型, , >0成功


.子程序 设置端口流控制, 整数型, , 
.参数 串口号, 整数型, , 
.参数 模式, 整数型, , 



.子程序 设置端口DTR开关, 整数型, , 
.参数 串口号, 整数型, , 
.参数 DTR开关, 整数型, , 



.子程序 设置端口RTS开关, 整数型, , 
.参数 串口号, 整数型, , 
.参数 RTS开关, 整数型, , 



.子程序 设置端口波特率, 整数型, , 
.参数 串口号, 整数型, , 
.参数 波特率, 整数型, , 



.子程序 设置端口DTR_RTS开关, 整数型, , 
.参数 串口号, 整数型, , 
.参数 模式, 整数型, , 



.子程序 读入一个字符, 整数型, , 返回0―255为字符，<0为无字符，单字节
.参数 串口号, 整数型, , 



.子程序 读入字符串, 整数型, , >0 字符长度  =0无字符
.参数 串口号, 整数型, , 
.参数 字符缓存, 文本型, 参考, 
.参数 缓存大小, 整数型, , 255



.子程序 设置读入超时, 整数型, , 
.参数 串口号, 整数型, , 
.参数 最大超时, 整数型, , 毫秒
.参数 时间间隔, 整数型, 可空, 一般默认为0



.子程序 取读入超时, 整数型, , 
.参数 串口号, 整数型, , 
.参数 最大超时, 整数型, 参考, 单位：MS
.参数 时间间隔, 整数型, 参考 可空, 单位：MS，默认为0



.子程序 取端口是否可读, 整数型, , =0可读,=-1不可读
.参数 串口号, 整数型, , 



.子程序 读入一串字符, 整数型, , 
.参数 串口号, 整数型, , 
.参数 字符缓存, 文本型, 参考, 
.参数 缓存大小, 整数型, , 255
.参数 term, 整数型, , 



.子程序 写出一个字符, 整数型, , >=0写出成功,<0失败
.参数 串口号, 整数型, , 
.参数 字符, 字节型, , 



.子程序 写出字符串, 整数型, , >=0 写出长度,<0失败
.参数 串口号, 整数型, , 
.参数 写出文本, 文本型, , 
.参数 文本长度, 整数型, , 



.子程序 取写出超时, 整数型, , 
.参数 串口号, 整数型, , 
.参数 超时值, 整数型, 参考 数组, 单位：MS，默认为0



.子程序 取端口是否可写, 整数型, , =0可写,=-1不可写
.参数 串口号, 整数型, , 



.子程序 写出一串字符, 整数型, , 
.参数 串口号, 整数型, , 
.参数 写出文本, 文本型, , 
.参数 文本长度, 整数型, , 
.参数 tick, 整数型, , 1tick=55ms



.子程序 写出一串字符_ex, 整数型, , 
.参数 串口号, 整数型, , 
.参数 写出文本, 文本型, , 
.参数 文本长度, 整数型, , 
.参数 时间间隔, 整数型, , 单位：ms



.子程序 取端口状态, 整数型, , >= 0 line status Get line status, such as CTS, DSR, DCD, RI
.参数 串口号, 整数型, , 
.参数 状态, 整数型, 参考, bit 0 - S_CTS  bit 1 - S_DSR bit 2 - S_RI  bit 3 - S_CD



.子程序 取输入缓冲区数据长度, 整数型, , 返回数据长度
.参数 串口号, 整数型, , 



.子程序 取输出缓冲区数据长度, 整数型, , 返回数据长度
.参数 串口号, 整数型, , 



.子程序 取发送失败原因, 整数型, , >=0 |=0 CTS is low|=1 XOFF char received
.参数 串口号, 整数型, , 



.子程序 取端口波特率, 整数型, , 返回该端口波特率
.参数 串口号, 整数型, , 



.子程序 取端口模式, 整数型, , 返回模式整数，和设置端口 模式参数意义一样
.参数 串口号, 整数型, , 



.子程序 取端口流控状态, 整数型, , 与设置端口流控模式参数意义一样
.参数 串口号, 整数型, , 



.子程序 取端口错误号, 整数型, , =0 无错误 |=1 奇偶检验错 |=2 帧错误 |=3 超时 |=4超帧错
.参数 串口号, 整数型, , 



.子程序 设置收到终止字符事件, 整数型, , 
.参数 串口号, 整数型, , 
.参数 字符串事件, 子程序指针, , 
.参数 终止符, 字节型, , 



.子程序 设置流状态被改变事件, 整数型, , 
.参数 串口号, 整数型, , 
.参数 被改变事件, 子程序指针, , '子程序包含一个整数参数，传递串口号



.子程序 设置收到BERAK信号事件, 整数型, , 
.参数 串口号, 整数型, , 
.参数 BREAK信号事件, 子程序指针, , '子程序包含一个整数参数，传递串口号



.子程序 设置发送完毕事件, 整数型, , 输出缓冲区为空时触发此事件，=0成功，<0失败。
.参数 串口号, 整数型, , 
.参数 发送完毕事件, 子程序指针, , '子程序包含一个整数参数，传递串口号



.子程序 发送BREAK信号, 整数型, , 
.参数 串口号, 整数型, , 
.参数 信号时长, 整数型, , 1= 1/18 2 second



.子程序 发送BREAK信号_ex, 整数型, , 
.参数 串口号, 整数型, , 
.参数 信号时长, 整数型, , 毫秒



.子程序 浏览缓存数据, 整数型, , =0无数据,>0缓冲区的数据长度，不取数据仅浏览(适用于微机多串口通信版)
.参数 串口号, 整数型, , 
.参数 缓冲文本, 文本型, 参考, 取空白文本（255）



.子程序 清空缓存区, 整数型, , =0清除成功，<0失败
.参数 串口号, 整数型, , 
.参数 缓存, 整数型, , 0:input buffer,1:output buffer,2:input & output buffer



.子程序 设置发送数据尺寸, 整数型, , 
.参数 串口号, 整数型, , 
.参数 数据尺寸, 整数型, , 0~255



.子程序 设置Xon, 整数型, , 
.参数 串口号, 整数型, , 



.子程序 设置Xoff, 整数型, , 
.参数 串口号, 整数型, , 



.子程序 文件_ASCII发送, 整数型, , 使用ASCII协议传送文件。
.参数 串口号, 整数型, , 
.参数 文件名, 文本型, , 要发送的文件名
.参数 回调函数, 子程序指针, , 指明传输的相关状态
.参数 取消键, 整数型, , 自定义取消快捷键代码



.子程序 文件_ASCII接收, 整数型, , 
.参数 串口号, 整数型, , 
.参数 文件名, 文本型, , 要接收的文件名
.参数 回调函数, 子程序指针, , 指明传输的相关状态
.参数 取消键, 整数型, , 自定义取消快捷键代码
.参数 超时值, 整数型, , 单位：秒




 ' 不属于任何一个程序集、类模块的函数：
