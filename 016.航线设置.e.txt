 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 航线设置
 ' 程序描述：　　美丽的莱茵河畔,每边都分布着5个城市,两边的城市都是唯一对应的友好城市,现需要在友好城市开通航线以加强往来.但因为莱茵河常年大雾,如果开设的航线发生交叉现象就有可能出现碰船的现象.现在要求近可能多地开通航线并且使航线不能相交!求出最多能开通的航线数和城市？

 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！


 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 302
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 航线设置”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.程序集变量 友好城市数组, 整数型, , "5,4", 存放所有友好城市代码
.程序集变量 友好城市对数, 整数型, , , 存放所有友好城市对数
.程序集变量 最大航线条数, 整数型, , , 存放最大的航线条数
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：求最大不下降序列
 ' 问题：航线设置
 ' 问题描述：
 ' 　　美丽的莱茵河畔,每边都分布着5个城市,两边的城市都是唯一对应的友好城市,现需要在友好城市开通航线以加强往来.
 ' 但因为莱茵河常年大雾,如果开设的航线发生交叉现象就有可能出现碰船的现象.现在要求近可能多地开通航线并且使航线不能相交!
 ' 求出最多能开通的航线数和城市？
 ' 问题分析：
 ' 用一个数组来存放对应的友好城市的代码和友好城市的对数,然后在规划时先从倒数第二个城市开始，找出可以设置的航线条数和下一条航线开始的城市，如果正在规划的城市的航线数大于已知的航线条数，则存储这个航线条数和城市的代码，这样一直找下去，把最多的航线数都找出来，最后把最多的航线数和对应的友好城市显示出来。
 ' 此问题可以演化成求最大不下降序列来完成
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
.局部变量 循环变量1, 整数型, , , 
.局部变量 循环变量2, 整数型, , , 
.局部变量 本城市航线条数, 整数型, , , 存放当前城市的般线条数
.局部变量 下条航线城市, 整数型, , , 存放当前城市的下条般线到达的城市代码
.局部变量 城市代码, 整数型, , , 存放城市代码

 ' 将程序集变量置０
赋值 (最大航线条数, 0)
赋值 (友好城市对数, 0)
.变量循环首 (1, 5, 1, 循环变量1)
    赋值 (友好城市数组 [循环变量1] [1], 0)
    赋值 (友好城市数组 [循环变量1] [2], 0)
    赋值 (友好城市数组 [循环变量1] [3], 0)
    赋值 (友好城市数组 [循环变量1] [4], 0)
.变量循环尾 ()
 ' 以下为初始化代码
 ' 设置友好城市对数为５
赋值 (友好城市对数, 5)
 ' 将最大航线条数置０
赋值 (最大航线条数, 0)
 ' 设置友好城市代码
.变量循环首 (1, 取数组下标 (友好城市数组, ), 1, 循环变量1)
     ' 设置两个对应友好城市的代码
    赋值 (友好城市数组 [循环变量1] [1], 相乘 (循环变量1, 2))
    赋值 (友好城市数组 [循环变量1] [2], 相加 (相乘 (循环变量1, 2), 1))
     ' 表示可以设置的航线条数
    赋值 (友好城市数组 [循环变量1] [3], 1)
     ' 表示后继，即下一条航线从哪里开始设置，为0表示不能设置下一条航线
    赋值 (友好城市数组 [循环变量1] [4], 0)
.变量循环尾 ()

 ' 从倒数第二个城市开始规划
.变量循环首 (相减 (友好城市对数, 1), 1, -1, 循环变量1)
     ' “本城市航线条数”表示本城市后面可以设置的航线数，“下条航线城市”表示下条航线从哪个城市开始
    赋值 (本城市航线条数, 0)
    赋值 (下条航线城市, 0)
    .变量循环首 (相加 (循环变量1, 1), 友好城市对数, 1, 循环变量2)
         ' 如果本城市“循环变量１”的终点小于后面城市的终点（即不相交），并且此城市后面可以设置的航线数大于“本城市航线条数”
        .如果真 (大于 (友好城市数组 [循环变量1] [2], 本城市航线条数))
             ' 如果上面条件成立，那么“本城市航线条数”等于城市“循环变量2”的可以设置航线数
            赋值 (本城市航线条数, 友好城市数组 [循环变量2] [3])
             ' 如果上面条件成立，“下条航线城市”等于可以设置下条航线的城市代码
            赋值 (下条航线城市, 循环变量2)
             ' 如果本城市后面总共可以设置的航线数>0
        .如果真结束
        .如果真 (大于 (本城市航线条数, 0))
             ' 如果本城市后面总共可以设置的航线数>0，则本城市可以设置的航线数在下个城市可以设置航线数的基础上加1
            赋值 (友好城市数组 [循环变量2] [3], 相加 (本城市航线条数, 1))
             ' 如果本城市后面总共可以设置的航线数>0，则“友好城市[循环变量２][４]”等于本城市后续城市的代码
            赋值 (友好城市数组 [循环变量2] [4], 下条航线城市)
        .如果真结束
        
    .变量循环尾 ()
.变量循环尾 ()
 ' “最大航线条数”为可以设置最大航线数，假设初值为第一个城市可以设置的航线数
赋值 (最大航线条数, 友好城市数组 [1] [3])
 ' “城市代码”为城市代码，初值为第一个城市
赋值 (城市代码, 1)
 ' 找出可以设置航线的最大值，赋值给“最大航线条数”，同时“城市代码”记下哪个可以设置最大航线数的城市代码
.变量循环首 (2, 友好城市对数, 1, 循环变量1)
    .如果真 (大于 (友好城市数组 [循环变量1] [3], 最大航线条数))
        赋值 (最大航线条数, 友好城市数组 [循环变量1] [3])
        赋值 (城市代码, 循环变量1)
    .如果真结束
    
.变量循环尾 ()
 ' 显示结果，因为有可能有多种方案，所以只要哪个城市可以设置的航线数等于最大值“最大航线条数”就显示结果
.变量循环首 (1, 友好城市对数, 1, 循环变量2)
    .如果真 (等于 (友好城市数组 [循环变量2] [3], 最大航线条数))
        显示结果 (循环变量2)
    .如果真结束
    
.变量循环尾 ()

.子程序 显示结果, 空白型, , 将结果显示出来
.参数 城市值, 整数型, , 

相加 (“最多可设置的航线数是: ”, 到文本 (最大航线条数)).滚动写行 ()
.循环判断首 ()
     ' 输出可以设置航线的友好城市代码
    相加 (“友好城市代码：　”, 到文本 (友好城市数组 [城市值] [1]), “,”, 到文本 (友好城市数组 [城市值] [2])).滚动写行 ()
    赋值 (城市值, 友好城市数组 [城市值] [4])
.循环判断尾 (等于 (城市值, 0))



 ' 不属于任何一个程序集、类模块的函数：
