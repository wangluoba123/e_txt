 ' 文件类型：Windows模块源码

 ' 程序名称：智汉汇编
 ' 程序描述：利用易语言的智能化代码自动提示、完成以及内置输入法，使用此模块，输出汇编代码（注意并不是用易语言直接执行汇编，只是输出代码），方便大家编写汇编，然后怎么编译，就看大家的汇编语言编译器了（本模块以MASM格式为核心）
@备注:
智汉汇编，用易语言输出汇编代码！
 ' 程序作者：智圆行方
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：版权所有，侵权必究！
 ' 版本号：1.0
 ' 创建号：1.0



.常量 指令集_DOS默认, "“.386”", 公开, 
.常量 指令集_186, "“.186”", 公开, 
.常量 指令集_286, "“.286”", 公开, 
.常量 指令集_Win32默认, "“.386”", 公开, 
.常量 指令集_Win32增强, "“.386p”", 公开, 
.常量 指令集_Win32超集, "“.486”", 公开, 
.常量 指令集_Win32超集增强, "“.486p”", 公开, 
.常量 指令集_奔腾专用, "“.586”", 公开, 
.常量 指令集_奔腾增强, "“.586p”", 公开, 
.常量 数据段_变量, "“.DATA”", 公开, 
.常量 数据段_未初始化变量, "“.DATA?”", 公开, 
.常量 数据段_常量, "“.CONST”", 公开, 
.常量 数据类型_字节, "“Byte”", 公开, 
.常量 数据类型_字, "“word”", 公开, 
.常量 数据类型_双字, "“dword”", 公开, 
.常量 数据类型_三字, "“fword”", 公开, 
.常量 数据类型_四字, "“qword”", 公开, 
.常量 数据类型_十字节BCD码, "“tbyte”", 公开, 
.常量 数据类型_有符号字节, "“sbyte”", 公开, 
.常量 数据类型_有符号字, "“sword”", 公开, 
.常量 数据类型_有符号双字, "“sdword”", 公开, 
.常量 数据类型_单精度浮点数, "“Real4”", 公开, 
.常量 数据类型_双精度浮点数, "“Real8”", 公开, 
.常量 数据类型_10字节浮点数, "“Real10”", 公开, 
.常量 指令_全局变量地址, "“offset ”", 公开, 
.常量 指令_文本开始, "“CTXT('”", 公开, 请务必引用"Macro.asm"文件
.常量 指令_文本结束, "“')”", 公开, 紧跟 #指令_文本开始 使用，中间为一段字符串
.常量 指令_变量地址, "“addr ”", 公开, 仅用于 invoke 中
.常量 指令_或, "“ or ”", 公开, 
.常量 指令_与, "“ and ”", 公开, 
.常量 指令_类型转换, "“ ptr ”", 公开, 格式：类型 + #指令_类型转换 + 变量名
.常量 指令_变量尺寸, "“sizeof ”", 公开, 
.常量 指令_变量数量, "“lengthof ”", 公开, 
.常量 可视区域_私有, "“PRIVATE”", 公开, 
.常量 可视区域_公开, "“PUBLIC”", 公开, 
.常量 可视区域_导出, "“EXPORT”", 公开, 用于DLL将函数导出，使其它程序使用
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 6 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库
 ' internet 707ca37322474f6ca841f0e224f4b620 1 1 互联网支持库




数据类型 类型_数据结构, 公开, 
    .成员 结构名称, 文本型, , , 
    .成员 字段名, 文本型, , "1", 
    .成员 字段类型, 文本型, , "1", 
    .成员 字段值, 文本型, , "1", 


.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 a, 汇编代码, , , 
.局部变量 c, 文本型, , "4", 
.局部变量 d, 类型_数据结构, , "1", 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
a.模式定义 (#指令集_Win32默认, 假, )
a.引用汇编库链接 ({ “windows.inc”, “kernel32.inc”, “user32.inc”, “macro.asm” })
a.引用汇编库 ({ “user32.lib”, “kernel32.lib” })
a.函数声明 (“MessageBoxA”, { “ins”, “a” }, { #数据类型_字, #数据类型_双字 })
a.插入数据段 (#数据段_未初始化变量, { “xhx”, “abc” }, { #数据类型_字, #数据类型_双字 }, , )
赋值 (d [1].结构名称, “WNDCLASS”)
加入成员 (d [1].字段类型, #数据类型_字)
加入成员 (d [1].字段名, “No.”)
加入成员 (d [1].字段值, “123”)
加入成员 (d [1].字段类型, #数据类型_字)
加入成员 (d [1].字段名, “name”)
加入成员 (d [1].字段值, “xhx”)
a.插入数据段 (#数据段_变量, { “xhx”, “abc” }, { #数据类型_字, #数据类型_双字 }, { “me” }, d)
a.插入代码段 (“START”)
赋值 (c [1], “0”)
赋值 (c [2], 相加 (#指令_文本开始, “Hello,World!”, #指令_文本结束))
赋值 (c [3], 相加 (#指令_文本开始, “信息：”, #指令_文本结束))
赋值 (c [4], “MB_OK”)
a.赋值 (“abc”, “xhx”)
a.调用函数 (“MessageBox”, c)
a.完成主标号 ()
a.插入标号 (“a”)
a.加入子程序 (“xhx”, #可视区域_公开, { “name”, “sex” }, { #数据类型_字节, #数据类型_字节 })
a.子程序结束 (“xhx”)
a.完成标号 (“a”)
a.加入注释 (假, “ad”)
 ' a.插入局部变量 ({ “xhxa”, “abca” }, { 20, 5 }, { “x”, “a” })
调试输出 (a.合成代码 (“D:\a.asm”))


.类模块 汇编代码, , , 请务必注意每个方法间的冲突，必须按照规定顺序书写！

.程序集变量 模式, 文本型, , , 
.程序集变量 段, 文本型, , , 
.程序集变量 主标号, 文本型, , , 
.子程序 模式定义, 空白型, , 
.参数 指令集, 文本型, , 详见常量表
.参数 是否使用MMX指令, 逻辑型, , 真为使用，假为取消
.参数 程序工作模式, 文本型, 可空, 提供程序工作模式――.Model 内存模式[,语言模式][,其他模式]，如果为空，设为默认Win32程序的最佳值

赋值 (模式, 相加 (“;欢迎使用 智汉汇编 易语言模块！――By：智圆行方”, #换行符))
.如果 (是否使用MMX指令)
    赋值 (模式, 相加 (模式, 指令集, #换行符, “.MMX”))
.否则
    赋值 (模式, 相加 (模式, 指令集))
.如果结束
.如果 (等于 (程序工作模式, “”))
    赋值 (模式, 相加 (模式, #换行符, “.Model Flat, StdCall”))
.否则
    赋值 (模式, 相加 (模式, #换行符, 程序工作模式))
.如果结束
赋值 (模式, 相加 (模式, #换行符, “Option Casemap :None”, #换行符, “;――――――――――――――”))
调试输出 (模式)

.子程序 引用汇编库链接, 空白型, , *.inc等
.参数 库连接文件名, 文本型, 数组, 可用<>符号括起来，以免与其他混用。*.inc等 （例如：windows.inc，说是“等”的原因――还可以是macro.asm）若有多个，请依次将文件名置入每个数组中

.局部变量 次数, 整数型, , , 

.计次循环首 (取数组成员数 (库连接文件名), 次数)
    赋值 (模式, 相加 (模式, #换行符, “Include ”, 库连接文件名 [次数]))
.计次循环尾 ()
赋值 (模式, 相加 (模式, #换行符, “;――――――――――――――”))
调试输出 (模式)

.子程序 引用汇编库, 空白型, , *.lib等
.参数 库连接文件名, 文本型, 数组, 可用<>符号括起来，以免与其他混用。*.lib等 （例如：user32.lib，说是“等”的原因――预防万一）若有多个，请依次将文件名置入每个数组中

.局部变量 次数, 整数型, , , 

.计次循环首 (取数组成员数 (库连接文件名), 次数)
    赋值 (模式, 相加 (模式, #换行符, “IncludeLib ”, 库连接文件名 [次数]))
.计次循环尾 ()
赋值 (模式, 相加 (模式, #换行符, “;――――――――――――――”))
调试输出 (模式)

.子程序 插入数据段, 空白型, , .DATA、.DATA?和.CONST
.参数 数据段类型, 文本型, , 详见常量表
.参数 名称, 文本型, 数组, 如有多个，请依次填写
.参数 数据类型, 文本型, 数组, 变量或常量类型，详见常量表，会有特殊格式，请自行填写！如有多个，请依次填写
.参数 值, 文本型, 可空 数组, 如果数据段为“.DATA?”，也就是#数据段_未初始化变量，则不能提供此参数！可包含“dup”重复操作，字符串变量的引号应自己填写上！如有多个，请依次填写
.参数 数据结构, 类型_数据结构, 可空 数组, ???  STRUCT，若无可空，可多个。

.局部变量 次数, 整数型, , "2", 

赋值 (段, 相加 (段, #换行符, 数据段类型, #换行符))
.计次循环首 (取数组成员数 (名称), 次数 [1])
    .如果 (小于 (取数组成员数 (值), 次数 [1]))
        赋值 (段, 相加 (段, 名称 [次数] [1], “    ”, 数据类型 [次数] [1], “    ”, “?”, #换行符))
    .否则
        赋值 (段, 相加 (段, 名称 [次数] [1], “    ”, 数据类型 [次数] [1], “    ”, 值 [次数] [1], #换行符))
    .如果结束
    
.计次循环尾 ()
赋值 (段, 相加 (段, #换行符, “;――――――――――――――”))
.计次循环首 (取数组成员数 (数据结构), 次数 [1])
    赋值 (段, 相加 (段, #换行符, 数据结构 [次数] [1], 结构名称, “  STRUCT”, #换行符))
    .计次循环首 (取数组成员数 (数据结构 [次数] [1], 字段名), 次数 [2])
        赋值 (段, 相加 (段, 数据结构 [次数] [1], 字段名 [次数] [2], “    ”, 数据结构 [次数] [1], 字段类型 [次数] [2], “    ”, 数据结构 [次数] [1], 字段值 [次数] [2], #换行符))
    .计次循环尾 ()
    赋值 (段, 相加 (段, 数据结构 [次数] [1], 结构名称, “    ends”, #换行符))
.计次循环尾 ()
调试输出 (段)

.子程序 插入局部变量, 空白型, , Local，必须在过程的子程序(PROC)中定义！
.参数 名称, 文本型, 数组, 如有多个，请依次填写
.参数 重复数量, 整数型, 可空 数组, 相当数据段的dup，如有多个，请依次填写
.参数 类型, 文本型, 数组, 变量类型，详见常量表，会有特殊格式，请自行填写！如有多个，请依次填写

.局部变量 次数, 整数型, , , 

 ' Local abc[1024]:byte,xhx[256]:word
.计次循环首 (取数组成员数 (名称), 次数)
    .如果 (等于 (次数, 2))
        .如果 (小于 (取数组成员数 (重复数量), 次数))
            赋值 (段, 相加 (段, “, ”, 名称 [次数], “ :”, 类型 [次数]))
        .否则
            赋值 (段, 相加 (段, “, ”, 名称 [次数], “[”, 到文本 (重复数量 [次数]), “] :”, 类型 [次数]))
        .如果结束
        
    .否则
        .如果 (小于 (取数组成员数 (重复数量), 次数))
            赋值 (段, 相加 (段, #换行符, “LOCAL ”, 名称 [次数], “ :”, 类型 [次数]))
        .否则
            赋值 (段, 相加 (段, #换行符, “LOCAL ”, 名称 [次数], “[”, 到文本 (重复数量 [次数]), “] :”, 类型 [次数]))
        .如果结束
        
    .如果结束
    
.计次循环尾 ()
赋值 (段, 相加 (段, #换行符, “;――――――――――――――”))
调试输出 (段)

.子程序 插入代码段, 空白型, , .CODE
.参数 主标号名, 文本型, , 

赋值 (主标号, 主标号名)
赋值 (段, 相加 (段, #换行符, “.CODE”, #换行符, 主标号名, “:”))
调试输出 (段)

.子程序 完成主标号, 空白型, , End START
赋值 (段, 相加 (段, #换行符, “END ”, 主标号, #换行符, “;――――――――――――――”))
调试输出 (段)

.子程序 插入标号, 空白型, , 请置于代码段中
.参数 标号名, 文本型, , 

赋值 (段, 相加 (段, #换行符, 标号名, “:”))
调试输出 (段)

.子程序 完成标号, 空白型, , End ???
.参数 标号名, 文本型, , 

赋值 (段, 相加 (段, #换行符, “END ”, 标号名, #换行符, “;――――――――――――――”))
调试输出 (段)

.子程序 加入注释, 空白型, , 
.参数 是否换行, 逻辑型, , 
.参数 注释文本, 文本型, , 请勿加入换行符

.如果 (是否换行)
    赋值 (段, 相加 (段, #换行符, “;”, 注释文本))
.否则
    赋值 (段, 相加 (段, “  ;”, 注释文本))
.如果结束


.子程序 合成代码, 文本型, , 将汇编代码返回
.参数 保存文件名, 文本型, 可空, 可以省略，如果提供，则自动保存到目录

.如果真 (不等于 (保存文件名, “”))
    写到文件 (保存文件名, 到字节集 (相加 (模式, #换行符, #换行符, 段)))
.如果真结束
返回 (相加 (模式, #换行符, #换行符, 段))

.子程序 调用函数, 空白型, , invoke 函数名[,参数1][,参数2]
.参数 函数名, 文本型, , 已经声明的函数名称。例如：MessageBox已在windows.inc中声明
.参数 参数, 文本型, 可空 数组, 请提供数组，若无参数，可空，可引用一些指令（详见常量表）

.局部变量 次数, 整数型, , , 

赋值 (段, 相加 (段, #换行符, “invoke ”, 函数名))
.计次循环首 (取数组成员数 (参数), 次数)
    赋值 (段, 相加 (段, “,”, 参数 [次数]))
.计次循环尾 ()
调试输出 (段)

.子程序 函数声明, 空白型, , ??? PROTO ??:XX,??:XX
.参数 函数名, 文本型, , 
.参数 参数名, 文本型, 可空 数组, 可无参数，可多参数，数组数量应与“参数类型”数量对应
.参数 参数类型, 文本型, 可空 数组, 参数有几个，参数类型必须有几个。详见常量表

.局部变量 次数, 整数型, , , 

赋值 (模式, 相加 (模式, #换行符, 函数名, “ PROTO ”))
.计次循环首 (取数组成员数 (参数名), 次数)
    .如果 (等于 (次数, 1))
        赋值 (模式, 相加 (模式, 参数名 [次数], “:”, 参数类型 [次数]))
    .否则
        赋值 (模式, 相加 (模式, “,”, 参数名 [次数], “:”, 参数类型 [次数]))
    .如果结束
    
.计次循环尾 ()
调试输出 (模式)

.子程序 赋值, 空白型, , mov
.参数 被赋值寄存器或变量, 文本型, , 可添加指令
.参数 用作赋值的变量或数据, 文本型, , 可添加指令

赋值 (段, 相加 (段, #换行符, “mov ”, 被赋值寄存器或变量, “,”, 用作赋值的变量或数据))
调试输出 (段)

.子程序 加入子程序, 空白型, , proc
.参数 名称, 文本型, , 
.参数 可视区域, 文本型, , 详见常量表
.参数 参数, 文本型, 可空 数组, 
.参数 参数类型, 文本型, 可空 数组, 

.局部变量 次数, 整数型, , , 

赋值 (段, 相加 (段, #换行符, 名称, “ proc ”, 可视区域, “ ”))
.计次循环首 (取数组成员数 (参数), 次数)
    .如果 (等于 (次数, 1))
        赋值 (段, 相加 (段, 参数 [次数], “:”, 参数类型 [次数]))
    .否则
        赋值 (段, 相加 (段, “,”, 参数 [次数], “:”, 参数类型 [次数]))
    .如果结束
    
.计次循环尾 ()
调试输出 (段)

.子程序 子程序结束, 空白型, , endp
.参数 子程序名, 文本型, , 

赋值 (段, 相加 (段, #换行符, “ret”, #换行符, 子程序名, “    endp”))
赋值 (段, 相加 (段, #换行符, “;――――――――――――――”))
调试输出 (段)

.子程序 如果, 空白型, , .if，判断后执行的代码为此方法后的代码，直到有.else、.elseif、.Endif
.参数 条件表达式, 文本型, , 

赋值 (段, 相加 (段, #换行符, “.if ”, 条件表达式))

.子程序 否则如果, 空白型, , .elseif，判断后执行的代码为此方法后的代码，直到有.else、.Endif
.参数 条件表达式, 文本型, , 

赋值 (段, 相加 (段, #换行符, “.elseif ”, 条件表达式))

.子程序 否则, 空白型, 公开, .else，判断后执行的代码为此方法后的代码，直到有.Endif
赋值 (段, 相加 (段, #换行符, “.else ”))

.子程序 结束如果, 空白型, , .endif
赋值 (段, 相加 (段, #换行符, “.endif ”))

.子程序 判断循环首, 空白型, , .while
.参数 条件表达式, 文本型, , 

赋值 (段, 相加 (段, #换行符, “.while ”, 条件表达式))

.子程序 判断循环尾, 空白型, , .endw
赋值 (段, 相加 (段, #换行符, “.endw”))

.子程序 循环判断首, 空白型, , .repeat
赋值 (段, 相加 (段, #换行符, “.repeat”))

.子程序 循环判断尾, 空白型, , .until
.参数 条件表达式, 文本型, , 

赋值 (段, 相加 (段, #换行符, “.until ”, 条件表达式))

.子程序 跳出循环, 空白型, , .break
赋值 (段, 相加 (段, #换行符, “.break”))

.子程序 到循环尾, 空白型, , .continue
赋值 (段, 相加 (段, #换行符, “.continue”))

.子程序 执行其它命令, 空白型, 公开, 
.参数 全部语句, 文本型, , 包括指令、操作数、符号等，整条语句都要写入
.参数 说明, 文本型, 可空, 为了帮助我们完善程序

赋值 (段, 相加 (段, #换行符, 全部语句))
.如果真 (不等于 (说明, “”))
    如果 (未知支持库函数_0 (“SMTP.126.com”, , “xuhongxu96”, “”, ))
    .如果真 (不等于 (未知支持库函数_5 (“汇编新语句”, 相加 (全部语句, #换行符, “说明：”, 说明), “xuhongxu96@gmail.com”, , , “xuhongxu96@126.com”, ), “”))
        调试输出 (“发送失败”)
    .如果真结束
    
    调试输出 (“链接发送失败”)
    
.如果真结束


.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (模式, “”)
赋值 (段, “”)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用



 ' 不属于任何一个程序集、类模块的函数：
