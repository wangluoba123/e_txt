 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 535
    高度 = 372
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 Access_连接文本, "“Provider=Microsoft.Jet.OLEDB.4.0;Password=%Password;Data Source=%Source;Persist Security Info=false”", , 
.常量 SQLServer_连接文本, "“Driver=SQL Server;Server=%Server;Database=%Database;UID=%UID;PWD=%PWD”", , 
.常量 SQLServer_连接文本1, "“Provider=SQLOLEDB;server=%Server;database=%Database;uid=%UID;pwd=%PWD”", , 
.常量 MYSQL_连接文本, "“Driver=MySQL ODBC 5.1 Driver;SERVER=%Server;UID=%UID;PWD=%PWD;DATABASE=%Database;PORT=%PORT”", , 
.常量 Firebird_连接文本, "“Driver=Firebird/InterBase(r) driver;Uid=SYSDBA;Pwd=masterkey;DbName=%Server%Database;default character set %zjj”", , 
.常量 , , , 
.常量 AD_GUID, "72", 公开, , adGUID；
.常量 AD_变体型, "12", 公开, , adVariant；
.常量 AD_变长宽字符串, "202", 公开, , adVarWChar；
.常量 AD_变长字符串, "200", 公开, , adVarChar；
.常量 AD_变长字节集, "204", 公开, , adVarBinary；
.常量 AD_超长宽字符串, "203", 公开, , adLongVarWChar；
.常量 AD_超长字符串, "201", 公开, , adLongVarChar；
.常量 AD_超长字节集, "205", 公开, , adLongVarBinary；
.常量 AD_错误型, "10", 公开, , adError；
.常量 AD_短整数型, "2", 公开, , adSmallInt；
.常量 AD_对象型, "9", 公开, , adIDispatch；
.常量 AD_货币型, "6", 公开, , adCurrency；
.常量 AD_空, "0", 公开, , adEmpty；
.常量 AD_宽文本, "8", 公开, , adBSTR；
.常量 AD_宽字符型, "130", 公开, , adWChar；
.常量 AD_逻辑型, "11", 公开, , adBoolean；
.常量 AD_日期型, "7", 公开, , adDate；
.常量 AD_十进位数值型, "14", 公开, , adDecimal；
.常量 AD_数值型, "131", 公开, , adNumeric；
.常量 AD_双数度小数型, "5", 公开, , adDouble；
.常量 AD_未知接口, "13", 公开, , adIUnknown；
.常量 AD_文件时间, "64", 公开, , adFileTime；
.常量 AD_无符号短整数型, "18", 公开, , adUnsignedSmallInt；
.常量 AD_无符号长整数型, "21", 公开, , adUnsignedBigInt；
.常量 AD_无符号整数型, "19", 公开, , adUnsignedInt；
.常量 AD_无符号字节型, "17", 公开, , adUnsignedTinyInt；
.常量 AD_小数型, "4", 公开, , adSingle；
.常量 AD_长整数型, "20", 公开, , adBigInt；
.常量 AD_整数型, "3", 公开, , adInteger；
.常量 AD_自定义型, "132", 公开, , adUserDefined；
.常量 AD_字符型, "129", 公开, , adChar；
.常量 AD_字节集, "128", 公开, , adBinary；
.常量 AD_字节型, "16", 公开, , adTinyInt；
.常量 adChapter, "136", 公开, , adChapter；
.常量 adDBDate, "133", 公开, , adDBDate；
.常量 adDBTime, "134", 公开, , adDBTime；
.常量 adDBTimeStamp, "135", 公开, , adDBTimeStamp；
.常量 adPropVariant, "138", 公开, , adPropVariant；
.常量 adVarNumeric, "139", 公开, , adVarNumeric。


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 2 8 高级表格支持库




数据类型 ADODB字段信息, 公开, 
    .成员 字段名, 文本型, , , 
    .成员 字段类型, 整数型, , , “AD_**”开头的
    .成员 最大长度, 整数型, , , 

数据类型 ADODB字段信息_SQL, 公开, 
    .成员 字段名, 文本型, , , 
    .成员 字段类型, 文本型, , , 请使用SQL的字段类型


.DLL命令 CoInitialize, 整数型, "Ole32.dll", "", , 
    .参数 pvReserved, 整数型, , 

.DLL命令 CoUninitialize, 空白型, "Ole32.dll", "", , 

.类模块 ADODB数据库类, , , 

.程序集变量 cata, 对象, , , 
.程序集变量 connet, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

CoInitialize (0)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
CoUninitialize ()

.子程序 取记录集对象, 对象, 公开, 
返回 (cata)

.子程序 取连接对象本身, 对象, 公开, 
返回 (connet)

.子程序 连接, 逻辑型, 公开, 
.参数 连接文本, 文本型, , 

connet.创建 (“ADODB.Connection”, )
connet.方法 (“Open”, 连接文本)
.如果 (是否已连接 ())
    cata.创建 (“ADOX.Catalog”, )
    cata.写属性 (“ActiveConnection”, connet)
    返回 (真)
.否则
    返回 (假)
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 连接Access数据库, 逻辑型, 公开, 
.参数 数据库路径, 文本型, , 
.参数 密码, 文本型, 可空, 

.局部变量 连接文本, 文本型, , , 

赋值 (连接文本, #Access_连接文本)
赋值 (连接文本, 子文本替换 (连接文本, “%Source”, 数据库路径, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%Password”, 密码, , , 真))
返回 (连接 (连接文本))

.子程序 连接SqlServer数据库, 逻辑型, 公开, 
.参数 服务器名, 文本型, , 
.参数 数据库名, 文本型, , 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 

.局部变量 连接文本, 文本型, , , 

赋值 (连接文本, #SQLServer_连接文本)
赋值 (连接文本, 子文本替换 (连接文本, “%Server”, 服务器名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%Database”, 数据库名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%UID”, 用户名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%PWD”, 密码, , , 真))
返回 (连接 (连接文本))


.子程序 连接Firebird数据库, 逻辑型, 公开, ADODB.Connection.Open
.参数 服务器名, 文本型, 可空, 本参数提供 Firebird 服务器名。
.参数 数据库名, 文本型, , 
.参数 用户名, 文本型, 可空, 默认为 SYSDBA
.参数 密码, 文本型, 可空, 默认为 masterkey
.参数 字节集, 文本型, , 必须与数据库字节类型相同.

.局部变量 连接文本, 文本型, , , 

赋值 (连接文本, #Firebird_连接文本)
.如果 (不等于 (服务器名, “”))
    赋值 (连接文本, 子文本替换 (连接文本, “%Server”, 相加 (服务器名, “:”), , , 真))
.否则
    赋值 (连接文本, 子文本替换 (连接文本, “%Server”, “”, , , 真))
.如果结束


赋值 (连接文本, 子文本替换 (连接文本, “%Database”, 数据库名, , , 真))
.如果 (等于 (用户名, “”))
    赋值 (连接文本, 子文本替换 (连接文本, “%UID”, “SYSDBA”, , , 真))
.否则
    赋值 (连接文本, 子文本替换 (连接文本, “%UID”, 用户名, , , 真))
.如果结束

.如果 (等于 (密码, “”))
    赋值 (连接文本, 子文本替换 (连接文本, “%PWD”, “masterkey”, , , 真))
.否则
    赋值 (连接文本, 子文本替换 (连接文本, “%PWD”, 密码, , , 真))
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)
赋值 (连接文本, 子文本替换 (连接文本, “%zjj”, 字节集, , , 真))
输出调试文本 (连接文本)
返回 (连接 (连接文本))

.子程序 连接MYSQL数据库, 逻辑型, 公开, ADODB.Connection.Open
.参数 服务器名, 文本型, , 本参数提供 MYSQL 服务器名。
.参数 数据库名, 文本型, , 
.参数 用户名, 文本型, , 
.参数 密码, 文本型, , 
.参数 端口, 文本型, , 

.局部变量 连接文本, 文本型, , , 

赋值 (连接文本, #MYSQL_连接文本)
赋值 (连接文本, 子文本替换 (连接文本, “%Server”, 服务器名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%Database”, 数据库名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%UID”, 用户名, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%PWD”, 密码, , , 真))
赋值 (连接文本, 子文本替换 (连接文本, “%PORT”, 端口, , , 真))
输出调试文本 (连接文本)
返回 (连接 (连接文本))

.子程序 关闭, 空白型, 公开, 
connet.方法 (“Close”, )
connet.清除 ()
cata.方法 (“Close”, )
cata.清除 ()

.子程序 新建数据表, 逻辑型, , 使用ADOX建表，方便，快捷，可能出错，I don't know why
.参数 数据表名, 文本型, , 
.参数 字段结构, ADODB字段信息, 数组, 

.局部变量 Table, 对象, , , 
.局部变量 Column, 对象, , "0", 
.局部变量 i, 空白型, , , 

重定义数组 (Column, 假, 取数组成员数 (字段结构))
Table.创建 (“ADOX.Table”, )
Table.写属性 (“Name”, 数据表名)
.计次循环首 (取数组成员数 (字段结构), i)
    Column.创建 ( [i], “ADOX.Column”, )
    Column.写属性 ( [i], “ParentCatalog”, cata)
    Column.写属性 ( [i], “Name”, 字段结构 [i], 字段名)
    Column.写属性 ( [i], “Type”, 字段结构 [i], 字段类型)
    Column.写属性 ( [i], “DefinedSize”, 字段结构 [i], 最大长度)
    Column.读对象型属性 ( [i], “Properties”, ).对象型方法 (“Index”, “AutoIncrement”).写属性 (“Value”, 假)
    Table.读对象型属性 (“Columns”, ).方法 (“Append”, Column [i], 字段结构 [i], 字段类型, 字段结构 [i], 最大长度)
.计次循环尾 ()
cata.读对象型属性 (“Tables”, ).方法 (“Append”, )
返回 (等于 (cata.取错误 (), “”))

.子程序 新建数据表_SQL方式, 逻辑型, , 使用SQL语句新建数据表，方便，快捷，成功率高，I don't know why
.参数 表名, 文本型, , 
.参数 字段结构, ADODB字段信息_SQL, 数组, 

.局部变量 SQL, 文本型, , , 
.局部变量 i, 空白型, , , 

赋值 (SQL, 相加 (“CREATE TABLE ”, 表名, “(”))
.计次循环首 (取数组成员数 (字段结构), i)
    赋值 (SQL, 相加 (SQL, 字段结构 [i], 字段名, “ ”, 字段结构 [i], 字段类型))
    .如果 (不等于 (i, 取数组成员数 (字段结构)))
        赋值 (SQL, 相加 (SQL, “,”))
    .否则
        赋值 (SQL, 相加 (SQL, “)”))
    .如果结束
    
.计次循环尾 ()
connet.方法 (“Execute”, SQL, 0, 0)
返回 (等于 (connet.取错误 (), “”))

.子程序 执行SQL1, 对象, 公开, 返回记录集对象
.参数 SQL, 文本型, , 

.局部变量 对象, 对象, , , 

返回 (connet.对象型方法 (“Execute”, SQL, 0, 0))
 ' 返回 (对象)


.子程序 执行SQL2, 逻辑型, 公开, ADODB.Connection.Execute
.参数 SQL语句, 文本型, , 本参数提供要执行的SQL语句。有关SQL语句的具体内容请参看SQL的专业手册。

.局部变量 RecordsAffected, 整数型, , , 

赋值 (RecordsAffected, 0)
cata.方法 (“Close”, )
cata.清除 ()
赋值 (cata, connet.对象型方法 (“Execute”, SQL语句, RecordsAffected))
返回 (等于 (connet.取错误 (), “”))

.子程序 是否已连接, 逻辑型, 公开, 
返回 (等于 (connet.读数值属性 (“State”, ), 1))

.子程序 开始事务, 逻辑型, , 
connet.方法 (“BeginTrans”, )
返回 (等于 (connet.取错误 (), “”))

.子程序 提交事务, 逻辑型, , 
connet.方法 (“CommitTrans”, )
返回 (等于 (connet.取错误 (), “”))

.子程序 回滚事务, 逻辑型, , 
connet.方法 (“RollbackTrans”, )
返回 (等于 (connet.取错误 (), “”))

.子程序 取ADODB版本, 文本型, 公开, ADODB.Connection.Version
返回 (connet.读文本属性 (“Version”, ))


.类模块 ADODB记录集类, , , 

.程序集变量 Recordset, 对象, , , 
.程序集变量 字段数, 整数型, , , 
.程序集变量 Fields, 对象, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

CoInitialize (0)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
CoUninitialize ()

.子程序 打开, 逻辑型, 公开, 
.参数 连接语句, 文本型, , 可以是数据表名，也可以是SQL语句
.参数 数据库, ADODB数据库类, , 
.参数 是否SQL, 逻辑型, 可空, 如果为真，则把第一个参数当做SQL语句来处理，否则当做数据表名
.参数 排序, 文本型, 可空, 格式：字段名 desc/asc
.参数 不重复字段, 文本型, 可空, 格式：字段名,字段名,字段...(如果是Access数据库，不重复字段一定要在返回字段中存在。)

.局部变量 SQL, 文本型, , , 
.局部变量 ActiveConnection, 变体型, , , 

关闭 ()
.如果 (是否SQL)
    赋值 (SQL, 连接语句)
.否则
    .如果 (等于 (不重复字段, “”))
        赋值 (SQL, 相加 (“SELECT * FROM ”, 连接语句))
    .否则
        赋值 (SQL, 相加 (“SELECT distinct ”, 不重复字段, “ FROM ”, 连接语句))
    .如果结束
    
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果真 (不等于 (排序, “”))
    赋值 (SQL, 相加 (SQL, “ order by ”, 排序))
.如果真结束

ActiveConnection.赋值 (数据库.取连接对象本身 (), )
Recordset.创建 (“ADODB.Recordset”, )
置游标位置 (3)
Recordset.方法 (“Open”, SQL, ActiveConnection, 1, 3)
赋值 (Fields, Recordset.读对象型属性 (“Fields”, ))
赋值 (字段数, Fields.读数值属性 (“Count”, ))
返回 (是否已打开 ())

.子程序 关闭, 空白型, 公开, 
Fields.清除 ()
Recordset.方法 (“Close”, )
Recordset.清除 ()
赋值 (字段数, 0)

.子程序 是否已打开, 逻辑型, 公开, 
返回 (等于 (Recordset.读数值属性 (“State”, ), 1))

.子程序 记录数量, 整数型, 公开, 注：对以下数据库无效---Mysql数据库
返回 (Recordset.读数值属性 (“RecordCount”, ))

.子程序 添加记录, 逻辑型, 公开, 
Recordset.方法 (“AddNew”, )
返回 (等于 (Recordset.取错误 (), “”))

.子程序 删除记录, 逻辑型, 公开, 
.参数 删除类型, 整数型, 可空, 默认为当前记录

.如果真 (是否为空 (删除类型))
    赋值 (删除类型, 1)
.如果真结束
Recordset.方法 (“Delete”, 删除类型)
返回 (等于 (Recordset.取错误 (), “”))

.子程序 读字段名记录, 变体型, 公开, 
.参数 字段名, 文本型, , 

.局部变量 对象, 对象, , , 

赋值 (对象, Fields.读对象型属性 (“Item”, 字段名))
返回 (对象.读属性 (“Value”, ))

.子程序 读字段序号记录, 变体型, 公开, 
.参数 字段序号, 整数型, , 

.局部变量 对象, 对象, , , 

赋值 (对象, Fields.读对象型属性 (“Item”, 字段序号))
返回 (对象.读属性 (“Value”, ))

.子程序 写字段名记录, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 记录, 变体型, , 

.局部变量 对象, 对象, , , 
.局部变量 返回值, 逻辑型, , , 

 ' Fields ＝ Recordset.对象型方法 (“Fields”, )
赋值 (对象, Fields.读对象型属性 (“Item”, 字段名))
赋值 (返回值, 对象.写属性 (“Value”, 记录))
返回 (返回值)

.子程序 写字段序号记录, 逻辑型, 公开, 
.参数 字段序号, 整数型, , 
.参数 记录, 变体型, , 

.局部变量 对象, 对象, , , 
.局部变量 返回值, 逻辑型, , , 

 ' Fields ＝ Recordset.对象型方法 (“Fields”, )
赋值 (对象, Fields.读对象型属性 (“Item”, 字段序号))
赋值 (返回值, 对象.写属性 (“Value”, 记录))
返回 (返回值)

.子程序 跳到记录, 逻辑型, 公开, 
.参数 距离, 整数型, , 注意默认位置从0开始。
.参数 起始位置, 整数型, 可空, 默认为0~

Recordset.方法 (“Move”, 距离, 起始位置)
返回 (等于 (Recordset.取错误 (), “”))

.子程序 下一条, 逻辑型, 公开, 
Recordset.方法 (“MoveNext”, )
返回 (等于 (Recordset.取错误 (), “”))

.子程序 上一条, 逻辑型, 公开, 
Recordset.方法 (“MovePrevious”, )
返回 (等于 (Recordset.取错误 (), “”))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 到首记录, 逻辑型, 公开, 
Recordset.方法 (“MoveFirst”, )
返回 (等于 (Recordset.取错误 (), “”))

.子程序 到尾记录, 逻辑型, 公开, 
Recordset.方法 (“MoveLasr”, )
返回 (等于 (Recordset.取错误 (), “”))

.子程序 首记录前, 逻辑型, 公开, 在首记录前，返回真
返回 (Recordset.读逻辑属性 (“BOF”, ))

.子程序 尾记录后, 逻辑型, 公开, 在尾记录后，返回真
返回 (Recordset.读逻辑属性 (“EOF”, ))

.子程序 更新, 逻辑型, 公开, 对记录进行任何操作后务必调用本方法
Recordset.方法 (“Update”, )
输出调试文本 (相加 (“错误”, 到文本 (Recordset.取错误 ())))
返回 (等于 (Recordset.取错误 (), “”))

.子程序 撤销, 逻辑型, 公开, 
Recordset.方法 (“CancelUpdate”, )
返回 (等于 (Recordset.取错误 (), “”))


.子程序 批量更新, 逻辑型, 公开, 
Recordset.方法 (“UpdateBatch”, 3)
返回 (等于 (Recordset.取错误 (), “”))


.子程序 批量撤销, 逻辑型, 公开, 
Recordset.方法 (“CancelBatch”, 3)
返回 (等于 (Recordset.取错误 (), “”))

.子程序 取字段名, 整数型, 公开, ADODB.Recordset.Fields.Item.Name
.参数 字段名, 文本型, 参考 数组, 

.局部变量 记录, 对象, , , 
.局部变量 序号, 整数型, , , 

.计次循环首 (字段数, 序号)
    赋值 (记录, Fields.读对象型属性 (“Item”, 相减 (序号, 1)))
    加入成员 (字段名, 记录.读文本属性 (“Name”, ))
.计次循环尾 ()
返回 (字段数)


.子程序 取字段类型, 文本型, 公开, 字段和位置只需填写一个即可。
.参数 字段名, 文本型, 可空, 字段的位置索引,从1开始
.参数 位置, 整数型, 可空, 

.局部变量 Fields_Item对象, 对象, , , 

.如果 (不等于 (字段名, “”))
    赋值 (Fields_Item对象, Recordset.读对象型属性 (“Fields”, ).读对象型属性 (“Item”, 字段名))
.否则
    赋值 (Fields_Item对象, Recordset.读对象型属性 (“Fields”, ).读对象型属性 (“Item”, 相减 (位置, 1)))
.如果结束
返回 (取类型名 (Fields_Item对象.读数值属性 (“Type”, )))


.子程序 取类型名, 文本型, , 
.参数 类型, 空白型, , 

.局部变量 类型名, 文本型, , , 

.判断开始 (等于 (类型, 20))
    赋值 (类型名, “超长整数(BigInt)”)
.判断 (等于 (类型, 128))
    赋值 (类型名, “二进制(BINARY)”)
.判断 (等于 (类型, 11))
    赋值 (类型名, “逻辑型(Boolean)”)
.判断 (等于 (类型, 8))
    赋值 (类型名, “宽文本(BSTR)”)
.判断 (等于 (类型, 129))
    赋值 (类型名, “字符型(Char)”)
.判断 (等于 (类型, 6))
    赋值 (类型名, “货币型(Currency)”)
.判断 (等于 (类型, 7))
    赋值 (类型名, “日期型(Date)”)
.判断 (等于 (类型, 133))
    赋值 (类型名, “数据库日期型(DBDate)”)
.判断 (等于 (类型, 134))
    赋值 (类型名, “时间型(DBTime)”)
.判断 (等于 (类型, 135))
    赋值 (类型名, “时间戳(TimeStamp)”)
.判断 (等于 (类型, 14))
    赋值 (类型名, “数值型(Decimal)”)
    
.判断 (等于 (类型, 5))
    赋值 (类型名, “双精度(Double)”)
    
.判断 (等于 (类型, 0))
    赋值 (类型名, “空白型(Empty)”)
    
.判断 (等于 (类型, 10))
    赋值 (类型名, “错误码(Error)”)
.判断 (等于 (类型, 72))
    赋值 (类型名, “标识型(GUID)”)
.判断 (等于 (类型, 9))
    赋值 (类型名, “IDispatch”)
.判断 (等于 (类型, 3))
    赋值 (类型名, “整数型(Integer)”)
    
.判断 (等于 (类型, 13))
    赋值 (类型名, “IUnknown”)
    
.判断 (等于 (类型, 205))
    赋值 (类型名, “超变长二进制(LongVarBinary)”)
    
.判断 (等于 (类型, 201))
    赋值 (类型名, “超变长文本(LongVarChar)”)
    
.判断 (等于 (类型, 203))
    赋值 (类型名, “超变长宽文本(LongVarWChar)”)
    
.判断 (等于 (类型, 131))
    赋值 (类型名, “数字型(Numeric)”)
    
.判断 (等于 (类型, 4))
    赋值 (类型名, “单精度(Single)”)
    
.判断 (等于 (类型, 2))
    赋值 (类型名, “短整数(SmallInt)”)
    
.判断 (等于 (类型, 16))
    赋值 (类型名, “有符号字节(TinyInt)”)
    
.判断 (等于 (类型, 21))
    赋值 (类型名, “无符号超长整数(UnsignedBigInt)”)
    
.判断 (等于 (类型, 19))
    赋值 (类型名, “无符号整数(UnsignedInt)”)
    
.判断 (等于 (类型, 18))
    赋值 (类型名, “无符号短整数(UnsignedSmallIn)”)
    
.判断 (等于 (类型, 17))
    赋值 (类型名, “字节型(UnsignedTinyInt)”)
    
.判断 (等于 (类型, 132))
    赋值 (类型名, “自定义型(UserDefined)”)
    
.判断 (等于 (类型, 204))
    赋值 (类型名, “变长二进制(VarBinary)”)
    
.判断 (等于 (类型, 200))
    赋值 (类型名, “变长文本(VarChar)”)
    
.判断 (等于 (类型, 12))
    赋值 (类型名, “变体型(Variant)”)
    
.判断 (等于 (类型, 202))
    赋值 (类型名, “变长宽文本(VarWChar)”)
    
.判断 (等于 (类型, 130))
    赋值 (类型名, “宽文本(WChar)”)
    
.默认
    赋值 (类型名, 相加 (“未知类型(代号:”, 到文本 (类型), “)”))
.判断结束
返回 (类型名)

.子程序 取每页记录数, 整数型, 公开, 取出每页共有的记录数
返回 (到整数 (Recordset.读数值属性 (“PageSize”, )))

.子程序 置每页记录数, 逻辑型, 公开, 设置每页共有的记录数
.参数 pagesize, 整数型, , 

返回 (Recordset.写属性 (“PageSize”, pagesize))


.子程序 取总页数, 整数型, 公开, 
.局部变量 pageCount, 整数型, 静态, , 

返回 (Recordset.读数值属性 (“PageCount”, ))


.子程序 取当前页号, 整数型, 公开, 
返回 (到整数 (Recordset.读数值属性 (“AbsolutePage”, )))


.子程序 置当前页, 逻辑型, 公开, 跳到指定页号。
.参数 AbsolutePage, 整数型, , 

返回 (Recordset.写属性 (“AbsolutePage”, AbsolutePage))


.子程序 过滤, 逻辑型, 公开, 过滤出满足条件的记录，返回一个逻辑型值，如果过滤成功返回真，否则返回假。注意：在不使用过滤的时候，一定要再次调用本函数并将过滤条件指定为""
.参数 条件, 文本型, , 如字段中有空格,必须用[]引住,必须使用的操作符为：<、>、<=、>=、<>、= 或 LIKE,多个条件可用and 或 or连接

.局部变量 变体型, 变体型, , , 

变体型.赋值 (条件, )
返回 (Recordset.写属性 (“filter”, 变体型))


.子程序 取字段定义长度, 整数型, 公开, ADODB.Recordset.Fields.Item.DefinedSize
.参数 字段名, 文本型, , 

.局部变量 记录, 对象, , , 

赋值 (记录, Fields.读对象型属性 (“Item”, 字段名))
返回 (记录.读数值属性 (“DefinedSize”, ))


.子程序 取字段数, 整数型, 公开, 
返回 (Fields.读数值属性 (“Count”, ))


.子程序 写字节集, 逻辑型, 公开, 
.参数 字段名, 文本型, , 
.参数 内容, 字节集, , 

.局部变量 对象, 对象, , , 
.局部变量 返回值, 逻辑型, , , 
.局部变量 记录, 变体型, , , 

赋值 (Fields, Recordset.对象型方法 (“Fields”, ))
赋值 (对象, Fields.读对象型属性 (“Item”, 字段名))
记录.赋值 (内容, )
赋值 (返回值, 对象.写属性 (“Value”, 记录))
返回 (返回值)


.子程序 置游标位置, 空白型, 公开, CursorLocation,1.NONE ; 2.SERVER ;3. CLIENT   对于电子表格 别设置为3,要不读的数就有.00的存在了
.参数 欲写入属性值, 整数型, , 类型为“整数型”，参数值为以下值之一： 1、adUseNone； 2、adUseServer； 3、adUseClient； 3、adUseClientBatch。

Recordset.写属性 (“CursorLocation”, 欲写入属性值)


.窗口程序集 窗口程序集1, , , 

.程序集变量 数据库连接, ADODB数据库类, , , 
.程序集变量 www, 文本型, , "0", 
.程序集变量 记录集, ADODB记录集类, , , 
.程序集变量 分页记录集, ADODB记录集类, , , 
.子程序 _连接MYSQL_被单击, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

记录集.关闭 ()
分页记录集.关闭 ()
数据库连接.关闭 ()
.如果 (数据库连接.连接MYSQL数据库 (“127.0.0.1”, “test”, “root”, “123456”, “3306”))
    输出调试文本 (“数据库连接成功!”)
    赋值 (_启动窗口., “已经接MYSQL数据库：TEST”)
    _显示记录_被单击 ()
.否则
    输出调试文本 (“数据库连接失败!”)
    返回 ()
.如果结束


.子程序 _连接Firebird_被单击, 空白型, , 
数据库连接.关闭 ()
记录集.关闭 ()
分页记录集.关闭 ()
.如果 (数据库连接.连接Firebird数据库 (相加 (取运行目录 (), “\TEST.fdb”), , , “GBK”))
    赋值 (_启动窗口., “已经接Firebird数据库：TEST.fdb”)
    输出调试文本 (“数据库连接成功!”)
    _显示记录_被单击 ()
.否则
    输出调试文本 (“数据库连接失败!”)
    返回 ()
.如果结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _连接access_被单击, 空白型, , 
记录集.关闭 ()
分页记录集.关闭 ()
数据库连接.关闭 ()
.如果 (数据库连接.连接Access数据库 (相加 (取运行目录 (), “\TEST.mdb”)))
    输出调试文本 (“数据库连接成功!”)
    赋值 (_启动窗口., “已经接Access数据库：TEST.MDB”)
    _显示记录_被单击 ()
.否则
    输出调试文本 (“数据库连接失败!”)
    返回 ()
.如果结束


.子程序 _连接Sqlserver_被单击, 空白型, , 
记录集.关闭 ()
分页记录集.关闭 ()
数据库连接.关闭 ()
 ' 本源码来自易语言资源网(www.5A5X.com)
.如果 (数据库连接.连接SqlServer数据库 (“blog.ksdly.cn,7973”, “TEST”, “sa”, “admin”))
    输出调试文本 (“数据库连接成功!”)
    赋值 (_启动窗口., “已经接MSSQL数据库：TEST”)
    _显示记录_被单击 ()
.否则
    输出调试文本 (“数据库连接失败!”)
    返回 ()
.如果结束



.子程序 _添加_被单击, 空白型, , 
.局部变量 照片数组, 字节集, , "0", 

数据库连接.开始事务 ()
.如果 (记录集.打开 (“TEST”, 数据库连接, 假))
    输出调试文本 (“打开表成功！”)
.否则
    输出调试文本 (“打开表失败！”)
    记录集.关闭 ()
    返回 ()
.如果结束
清除数组 (照片数组)
加入成员 (照片数组, 公共_文件到字节集 (.内容))

.如果真 (等于 (公共_添加数据到记录集 (记录集, “XM,RQ”, 相加 (.内容, “,”, 到文本 (.今天)), “ZP”, 照片数组), 假))
    信息框 (“添加数据到记录集出错，请检查！”, 0, )
    数据库连接.回滚事务 ()
    返回 ()
.如果真结束


.如果 (记录集.更新 ())
    输出调试文本 (“更新数据成功！”)
    数据库连接.提交事务 ()
    _显示记录_被单击 ()
    记录集.关闭 ()
.否则
    输出调试文本 (“更新数据失败！”)
    数据库连接.回滚事务 ()
    记录集.关闭 ()
.如果结束


.子程序 _修改_被单击, 空白型, , 
.局部变量 变体内容, 变体型, , , 
.局部变量 照片数组, 字节集, , "0", 

数据库连接.开始事务 ()
.如果真 (等于 (记录集.打开 (“TEST”, 数据库连接, 假), 假))
    记录集.关闭 ()
    信息框 (“表打开失败”, 0, )
    返回 ()
.如果真结束

加入成员 (照片数组, 公共_文件到字节集 (.内容))
.如果真 (等于 (公共_修改记录集数据 (记录集, 相加 (“ID=”, 未知支持库函数_3 ().未知支持库函数_10 (0)), “XM,RQ”, 相加 (.内容, “,”, 到文本 (.今天)), “ZP”, 照片数组), 假))
    信息框 (“添加数据到记录集出错，请检查！”, 0, )
    数据库连接.回滚事务 ()
    返回 ()
.如果真结束

.如果 (记录集.更新 ())
    输出调试文本 (“更新数据成功！”)
    数据库连接.提交事务 ()
    _显示记录_被单击 ()
    记录集.关闭 ()
.否则
    输出调试文本 (“更新数据失败！”)
    数据库连接.回滚事务 ()
    记录集.关闭 ()
.如果结束


.子程序 _分页_被单击, 空白型, , 
.如果真 (分页记录集.是否已打开 ())
    分页记录集.关闭 ()
.如果真结束

.如果真 (等于 (分页记录集.打开 (“TEST”, 数据库连接, 假), 假))
    分页记录集.关闭 ()
    信息框 (“表打开失败”, 0, )
    返回 ()
.如果真结束

分页记录集.置每页记录数 (到数值 (.内容))
输出调试文本 (相加 (“当前页号：”, 到文本 (分页记录集.取当前页号 ())))
显示分页数据 (1)

 ' 第一个参数指定返回的第一行在所有数据中的位置，从0开始（注意不是1），第二个参数指定最多返回行
 ' 数。例如：
 ' select * from table LIMIT 5,10; #返回第6-15行数据
 ' select * from table LIMIT 5; #返回前5行
 ' select * from table LIMIT 0,5; #返回前5行


 ' ROWS 10 TO 20



.子程序 _删除_被单击, 空白型, , 
.如果真 (等于 (记录集.打开 (“TEST”, 数据库连接, 假), 假))
    记录集.关闭 ()
    信息框 (“表打开失败”, 0, )
    返回 ()
.如果真结束

公共_删除记录集数据 (记录集, 相加 (“ID=”, 未知支持库函数_3 ().未知支持库函数_10 (0)))

.如果 (记录集.更新 ())
    输出调试文本 (“更新数据成功！”)
    数据库连接.提交事务 ()
    _显示记录_被单击 ()
    记录集.关闭 ()
.否则
    输出调试文本 (“更新数据失败！”)
    数据库连接.回滚事务 ()
    记录集.关闭 ()
.如果结束


.子程序 __启动窗口_创建完毕, 空白型, , 


.子程序 初始化高级表格, 空白型, , 
.局部变量 I1, 整数型, , , 
.局部变量 字段名, 文本型, , "0", 
.局部变量 字段名文本, 文本型, , , 

赋值 (., 0)
赋值 (., 假)
.如果真 (等于 (记录集.打开 (“TEST”, 数据库连接, 假), 假))
    记录集.关闭 ()
    信息框 (“表打开失败”, 0, )
    返回 ()
.如果真结束

记录集.取字段名 (字段名)

.计次循环首 (取数组成员数 (字段名), I1)
    输出调试文本 (记录集.取字段类型 (I1))
    .如果真 (不等于 (记录集.取字段类型 (I1), “超变长二进制(LongVarBinary)”))
        .如果 (等于 (字段名文本, “”))
            赋值 (字段名文本, 字段名 [I1])
        .否则
            赋值 (字段名文本, 相加 (字段名文本, “,”, 字段名 [I1]))
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
公共_高级表格初始化 (1, 24, 字段名文本, { 40, 90, 110 }, , 真)
记录集.关闭 ()

.子程序 _按钮1_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (.内容, .文件名)
.如果真结束


.子程序 _显示记录_被单击, 空白型, , 
.局部变量 N, 整数型, , , 

未知支持库函数_57 ()
初始化高级表格 ()
赋值 (N, 1)
.如果 (记录集.打开 (“TEST”, 数据库连接, 假))
    输出调试文本 (“打开表成功！”)
.否则
    输出调试文本 (“打开表失败！”)
    记录集.关闭 ()
    返回 ()
.如果结束
记录集.到首记录 ()
.判断循环首 (不等于 (记录集.读字段名记录 (“ID”).取文本 (), “”))
    .未知支持库函数_38 ()
    N.未知支持库函数_9 (0, #, 记录集.读字段名记录 (“ID”).取文本 ())
    N.未知支持库函数_9 (1, #, 记录集.读字段名记录 (“XM”).取文本 ())
    N.未知支持库函数_9 (2, #, 到文本 (取日期 (记录集.读字段名记录 (“RQ”).取日期 ())))
    赋值 (N, 相加 (N, 1))
    记录集.下一条 ()
.判断循环尾 ()
记录集.关闭 ()

.子程序 _测试_被单击, 空白型, , 
分页记录集.置当前页 (2)
输出调试文本 (相加 (“取记录数：”, 到文本 (分页记录集.记录数量 ())))
输出调试文本 (相加 (“取每页记录数：”, 到文本 (分页记录集.取每页记录数 ())))
输出调试文本 (相加 (“当前页号：”, 到文本 (分页记录集.取当前页号 ())))
输出调试文本 (相加 (“取总页数：”, 到文本 (分页记录集.取总页数 ())))
分页记录集.跳到记录 (2)
输出调试文本 (分页记录集.读字段名记录 (“XM”).取文本 ())


.子程序 _高级表格1_被单击, 空白型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 

.如果 (记录集.打开 (“TEST”, 数据库连接, 假))
    输出调试文本 (“打开表成功！”)
.否则
    输出调试文本 (“打开表失败！”)
    记录集.关闭 ()
    返回 ()
.如果结束
记录集.过滤 (相加 (“ID=”, 未知支持库函数_3 ().未知支持库函数_10 (0)))
记录集.到首记录 ()
输出调试文本 (记录集.读字段名记录 (“ID”).取文本 ())
赋值 (.内容, 记录集.读字段名记录 (“XM”).取文本 ())
赋值 (.今天, 记录集.读字段名记录 (“RQ”).取日期 ())
赋值 (.图片, 记录集.读字段名记录 (“ZP”).取字节集 ())
赋值 (.标题, 相加 (“字段名：”, 0.未知支持库函数_10 (未知支持库函数_4 ()), #换行符, “字段类型：”, #换行符, 记录集.取字段类型 (0.未知支持库函数_10 (未知支持库函数_4 ())), #换行符, “字段长度：”, 到文本 (记录集.取字段定义长度 (0.未知支持库函数_10 (未知支持库函数_4 ())))))
记录集.关闭 ()

.子程序 显示分页数据, 空白型, , 
.参数 页号, 整数型, , 

.局部变量 I1, 整数型, , , 

未知支持库函数_57 ()
初始化高级表格 ()
 ' 输出调试文本 (分页记录集.取总页数 ())
分页记录集.到首记录 ()
分页记录集.置当前页 (页号)
赋值 (.标题, 相加 (到文本 (分页记录集.取当前页号 ()), “/”, 到文本 (分页记录集.取总页数 ())))
.计次循环首 (分页记录集.取每页记录数 (), I1)
    .如果真 (等于 (分页记录集.读字段名记录 (“ID”).取文本 (), “”))
        跳出循环 ()
    .如果真结束
    .未知支持库函数_38 ()
    I1.未知支持库函数_9 (0, #, 分页记录集.读字段名记录 (“ID”).取文本 ())
    I1.未知支持库函数_9 (1, #, 分页记录集.读字段名记录 (“XM”).取文本 ())
    I1.未知支持库函数_9 (2, #, 到文本 (取日期 (分页记录集.读字段名记录 (“RQ”).取日期 ())))
    分页记录集.下一条 ()
.计次循环尾 ()
分页记录集.置当前页 (页号) ' 这里添加这句是因为显示完成记录后，记录指针实际已经在此页的下一页了。用这句让他回到实际所在页。


.子程序 _上一页_被单击, 空白型, , 
.如果真 (大于 (分页记录集.取当前页号 (), 1))
    显示分页数据 (相减 (分页记录集.取当前页号 (), 1))
.如果真结束


.子程序 _下一页_被单击, 空白型, , 
.如果真 (小于 (分页记录集.取当前页号 (), 分页记录集.取总页数 ()))
    显示分页数据 (相加 (分页记录集.取当前页号 (), 1))
.如果真结束


.程序集 公共_程序集, , , 

.子程序 公共_高级表格初始化, 空白型, , 
.参数 高级表格参数, 未知类型0x20001, , 
.参数 行数, 整数型, 可空, 
.参数 行高, 整数型, 可空, 
.参数 列标题, 文本型, , 
.参数 列宽, 整数型, 数组, 
.参数 列类型, 整数型, 可空 数组, 
.参数 是否斑马线, 逻辑型, 可空, 

.局部变量 列标题组, 文本型, , "0", 
.局部变量 列数, 空白型, , , 
.局部变量 i, 空白型, , , 

 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (列标题组, 分割文本 (列标题, “,”, ))
.如果 (等于 (行数, 0))
    赋值 (高级表格参数., 1)
.否则
    赋值 (高级表格参数., 行数)
.如果结束

赋值 (列数, 取数组成员数 (列标题组))
赋值 (高级表格参数., 列数)
.如果 (等于 (行高, 0))
    赋值 (高级表格参数., 20)
.否则
    赋值 (高级表格参数., 行高)
.如果结束
赋值 (高级表格参数., #浅灰)
 ' 本源码来自易语言资源网(www.5A5X.com)
.计次循环首 (列数, i)
    高级表格参数.未知支持库函数_9 (0, 相减 (i, 1), 1, 列标题组 [i])
    高级表格参数.未知支持库函数_32 (相减 (i, 1), 列宽 [i])
    .如果真 (等于 (是否为空 (列类型), 假))
        高级表格参数.未知支持库函数_30 (相减 (i, 1), 选择 (是否为空 (列类型), 1, 列类型 [i]))
    .如果真结束
    
.计次循环尾 ()
' 本源码来自易语言资源网(www.5A5X.com)
高级表格参数.未知支持库函数_25 (0, 0, 相减 (高级表格参数., 1), 相减 (高级表格参数., 1), #)
高级表格参数.未知支持库函数_22 (0, 0, 相减 (高级表格参数., 1), 相减 (高级表格参数., 1), #蓝色)
高级表格参数.未知支持库函数_20 (0, 0, 0, 相减 (高级表格参数., 1), 1)
.如果真 (等于 (是否为空 (是否斑马线), 假))
    高级表格参数.未知支持库函数_14 (#, #白色, #银白)
.如果真结束


.子程序 公共_文件到字节集, 字节集, , 
.参数 文件位置, 文本型, , 

返回 (读入字节集 (打开文件 (文件位置, , ), 取文件尺寸 (文件位置)))


.子程序 公共_添加数据到记录集, 逻辑型, , 添加数据库资料到数据库
.参数 参数_记录集, ADODB记录集类, , 
.参数 参数_字段名, 文本型, 可空, 
.参数 参数_字段内容, 文本型, 可空, 
.参数 参数_字节集数据字段名, 文本型, 可空, 数据库字段中，数据类型为字节集的字段名称
.参数 参数_字节集数据, 字节集, 可空 数组, 存放需写入字节集数据数组

.局部变量 I1, 整数型, , , 
.局部变量 局部_字段名, 文本型, , "0", 
.局部变量 局部_变体字段内容, 变体型, , , 
.局部变量 发生错误, 逻辑型, , , 
.局部变量 局部_字段内容, 文本型, , "0", 

赋值 (发生错误, 假)
.如果真 (不等于 (参数_字段名, “”))
    赋值 (局部_字段名, 分割文本 (参数_字段名, “,”, ))
    赋值 (局部_字段内容, 分割文本 (参数_字段内容, “,”, ))
    参数_记录集.添加记录 ()
    .计次循环首 (取数组成员数 (局部_字段名), I1)
        局部_变体字段内容.赋值 (局部_字段内容 [I1], )
        .如果真 (等于 (参数_记录集.写字段名记录 (局部_字段名 [I1], 局部_变体字段内容), 假))
            输出调试文本 (相加 (局部_字段名 [I1], “---”, 局部_字段内容 [I1]))
            赋值 (发生错误, 真)
        .如果真结束
        局部_变体字段内容.清除 ()
    .计次循环尾 ()
.如果真结束

.如果真 (不等于 (参数_字节集数据字段名, “”))
    清除数组 (局部_字段名)
    赋值 (局部_字段名, 分割文本 (参数_字节集数据字段名, “,”, ))
    输出调试文本 (相加 (“字节集数据一共有：”, 到文本 (取数组成员数 (局部_字段名))))
    .计次循环首 (取数组成员数 (局部_字段名), I1)
        局部_变体字段内容.赋值 (参数_字节集数据 [I1], )
        .如果真 (等于 (参数_记录集.写字段名记录 (局部_字段名 [I1], 局部_变体字段内容), 假))
            输出调试文本 (相加 (局部_字段名 [I1], “---”, 局部_字段内容 [I1]))
            赋值 (发生错误, 真)
        .如果真结束
        局部_变体字段内容.清除 ()
    .计次循环尾 ()
    
.如果真结束
输出调试文本 (相加 (“KK”, “---”, 参数_记录集.读字段名记录 (“XM”).取文本 ()))
输出调试文本 (相加 (“RQ”, “---”, 参数_记录集.读字段名记录 (“RQ”).取文本 ()))
返回 (取反 (发生错误))


.子程序 公共_修改记录集数据, 逻辑型, , 
.参数 参数_记录集, ADODB记录集类, , 
.参数 参数_条件, 文本型, , 格式:SNAME='陈军1
.参数 参数_字段名, 文本型, 可空, 
.参数 参数_字段内容, 文本型, 可空, 
.参数 参数_字节集数据字段名, 文本型, 可空, 数据库字段中，数据类型为字节集的字段名称
.参数 参数_字节集数据, 字节集, 可空 数组, 存放需写入字节集数据数组

.局部变量 I1, 整数型, , , 
.局部变量 局部_字段名, 文本型, , "0", 
.局部变量 局部_变体字段内容, 变体型, , , 
.局部变量 发生错误, 逻辑型, , , 
.局部变量 局部_字段内容, 文本型, , "0", 

赋值 (发生错误, 假)
参数_记录集.过滤 (参数_条件)
输出调试文本 (相加 (“剩下的记录：”, 到文本 (参数_记录集.记录数量 ())))
.如果真 (不等于 (参数_字段名, “”))
    赋值 (局部_字段名, 分割文本 (参数_字段名, “,”, ))
    赋值 (局部_字段内容, 分割文本 (参数_字段内容, “,”, ))
    .计次循环首 (取数组成员数 (局部_字段名), I1)
        局部_变体字段内容.赋值 (局部_字段内容 [I1], )
        .如果真 (等于 (参数_记录集.写字段名记录 (局部_字段名 [I1], 局部_变体字段内容), 假))
            输出调试文本 (相加 (局部_字段名 [I1], “---”, 局部_字段内容 [I1]))
            赋值 (发生错误, 真)
        .如果真结束
        局部_变体字段内容.清除 ()
    .计次循环尾 ()
    
.如果真结束

.如果真 (不等于 (参数_字节集数据字段名, “”))
    清除数组 (局部_字段名)
    赋值 (局部_字段名, 分割文本 (参数_字节集数据字段名, “,”, ))
    输出调试文本 (相加 (“字节集数据一共有：”, 到文本 (取数组成员数 (局部_字段名))))
    .计次循环首 (取数组成员数 (局部_字段名), I1)
        局部_变体字段内容.赋值 (参数_字节集数据 [I1], )
        .如果真 (等于 (参数_记录集.写字段名记录 (局部_字段名 [I1], 局部_变体字段内容), 假))
            输出调试文本 (相加 (局部_字段名 [I1], “---”, 局部_字段内容 [I1]))
            赋值 (发生错误, 真)
        .如果真结束
        局部_变体字段内容.清除 ()
    .计次循环尾 ()
    
.如果真结束
输出调试文本 (发生错误)
返回 (取反 (发生错误))


 ' 变体内容.赋值 (“779”, )
 ' 局部_记录集.写字段名记录 (“SN”, 变体内容)
 ' 变体内容.清除 ()
 ' .如果真 (“陈军更改”.赋值 ())
     ' 输出调试文本 (“ok”)
.如果真结束
 ' .如果真 (“SNAME”.未知函数_67175525 ())
     ' 输出调试文本 (“ok”)
.如果真结束
 ' 变体内容.清除 ()
 ' 变体内容.赋值 (“2012/7/03”, )
 ' 局部_记录集.写字段名记录 (“BIRTH”, 变体内容)


.子程序 公共_删除记录集数据, 空白型, , 
.参数 参数_记录集, ADODB记录集类, , 
.参数 参数_条件, 文本型, , 

参数_记录集.过滤 (参数_条件)
参数_记录集.删除记录 ()



 ' 不属于任何一个程序集、类模块的函数：
