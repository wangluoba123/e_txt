 ' 文件类型：未知类型

 ' 程序名称：雷电操作模块[ming修改]
 ' 程序描述：
 ' 程序作者：ming7
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 PROCESS_VM_READ, "16", , 
.常量 PROCESS_VM_OPERATION, "8", , 
.常量 PROCESS_CREATE_THREAD, "2", , 
.常量 PROCESS_QUERY_INFORMATION, "1024", , 
.常量 PROCESS_DUP_HANDLE, "64", , 
.常量 INFINITE, "-1", , 
.常量 , , , 
.常量 常量1, "“application-label:'”", , 
.常量 常量2, "“package: name='”", , 
.常量 常量3, "“launchable-activity: name='”", , 
.常量 , , , 
.常量 制表符, "“	”", , 
.常量 状态_大括号, "1", , 这个状态的结束条件为遇到下一个右大括号
.常量 状态_方括号, "2", , 这个状态的结束条件为遇到下一个右方括号
.常量 状态_对象名_获取, "3", , 这个状态的结束条件为遇到引号结束，
.常量 状态_对象值_等待冒号, "4", , 这个状态知道遇到
.常量 状态_对象值_准备获取, "5", , 这个状态的结束标志遇到引号对或者遇到方括号、大括号结束。
.常量 状态_对象值_获取文本, "6", , 这个状态只有在遇到引号时才能结束。
.常量 状态_对象值_获取其他, "7", , 这个状态的结束条件为遇到引号跳到#对象名_获取，遇到{创建#大括号，遇到[创建#方括号，而遇到}或]则根据是否为上一层...
.常量 状态_数据值_准备获取, "8", , 
.常量 状态_数据值_获取文本, "9", , 
.常量 状态_数据值_获取其他, "10", , 
.常量 , , , 
.常量 逗号状态_括号内_允许插入结束_拒绝逗号, "0", 公开, 产生：[ {               括号内 允许：插入、结束 拒绝：逗号
.常量 逗号状态_括号外_允许逗号结束_拒绝插入_等同于成员后, "1", 公开, 等同于成员后；产生：] } 括号外 允许：逗号、结束 拒绝：插入
.常量 逗号状态_成员后_允许逗号结束_拒绝插入, "1", 公开, 产生：1 "a" true ] }    成员后 允许：逗号、结束 拒绝：插入
.常量 逗号状态_逗号后_允许插入_拒绝逗号结束, "2", 公开, 产生：,                 逗号后 允许：插入  拒绝：逗号、结束 
.常量 , , , 
.常量 类型_数值, "1", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型
.常量 类型_文本, "2", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型
.常量 类型_逻辑, "3", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型
.常量 类型_对象, "4", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型
.常量 类型_数组, "5", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型
.常量 类型_未知, "0", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型  数据格式不对，不能识别类型
.常量 类型_空, "6", 公开, 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。6=空，0=未知类型  由于没有值，或者值为null
.常量 易代码模板, "“.版本 2

.局部变量 json, 类_JSON
.局部变量 %s, 文本型

%s ＝ json.取通用属性 (“%s”)
”", , 
.常量 易代码模板_简易, "“json.取通用属性 (“%s”)”", , 
.常量 易代码模板_简易_对象组, "“json.成员数 (“%s”)”", , 
.常量 , , , 
.常量 字符码_引号, "34", 公开, "
.常量 字符码_左大括号, "123", 公开, {
.常量 字符码_右大括号, "125", 公开, }
.常量 字符码_左方括号, "91", 公开, [
.常量 字符码_右方括号, "93", 公开, ]
.常量 字符码_制表符, "9", 公开, Tab
.常量 字符码_空格, "32", 公开,  
.常量 字符码_回车, "13", 公开, \r
.常量 字符码_换行, "10", 公开, \n
.常量 字符码_换页, "12", 公开, \f
.常量 字符码_冒号, "58", 公开, :
.常量 字符码_逗号, "44", 公开, ,
.常量 字符码_反斜杆, "92", 公开, \
.常量 字符码_斜杆, "47", 公开, /
.常量 字符码_退格, "8", 公开, 退格键
.常量 字符码_小写u, "117", 公开, u
.常量 字符码_负号, "45", 公开, -
.常量 字符码_数字0, "47", 公开, 0
.常量 字符码_数字9, "58", 公开, 9
.常量 字符码_字母e, "69", 公开, e
.常量 字符码_字母E大写, "101", 公开, E
.常量 字符码_点, "46", 公开, .
.图片 图片1, " ' 已保存到：D:\易语言学习\Data\雷电模拟器操作模块.e\图片1", , 
.图片 图片2, " ' 已保存到：D:\易语言学习\Data\雷电模拟器操作模块.e\图片2", , 
.图片 图片3, " ' 已保存到：D:\易语言学习\Data\雷电模拟器操作模块.e\图片3", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 3 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 1 特殊功能支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 1 应用接口支持库
 ' commobj {A068799B-7551-46b9-8CA8-EEF8357AFEA4} 2 0 通用对象支持库




数据类型 SECURITY_ATTRIBUTES, , 系统_取DOS执行结果
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 STARTUPINFO_短整数, , 
    .成员 cb, 整数型, , , 
    .成员 lpReserved, 文本型, , , 
    .成员 lpDesktop, 文本型, , , 
    .成员 lpTitle, 文本型, , , 
    .成员 dwX, 整数型, , , 
    .成员 dwY, 整数型, , , 
    .成员 dwXSize, 整数型, , , 
    .成员 dwYSize, 整数型, , , 
    .成员 dwXCountChars, 整数型, , , 
    .成员 dwYCountChars, 整数型, , , 
    .成员 dwFillAttribute, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 wShowWindow, 短整数型, , , 
    .成员 cbReserved2, 短整数型, , , 
    .成员 lpReserved2, 整数型, , , 
    .成员 hStdInput, 整数型, , , 
    .成员 hStdOutput, 整数型, , , 
    .成员 hStdError, 整数型, , , 

数据类型 MSG, , 
    .成员 hwnd, 整数型, , , 
    .成员 message, 整数型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 pt, 坐标型x, , , 

数据类型 坐标型x, 公开, 
    .成员 横, 整数型, , , 横X
    .成员 纵, 整数型, , , 纵Y

数据类型 进程结构, 公开, 
    .成员 进程句柄, 整数型, , , hProcess
    .成员 线程句柄, 整数型, , , hThread
    .成员 进程标识符, 整数型, , , dwProcessId
    .成员 线程标识符, 整数型, , , dwThreadId

数据类型 进程信息列表, 公开, 
    .成员 dwSize, 整数型, , , 1
    .成员 cntUsage, 整数型, , , 2
    .成员 进程ID, 整数型, , , 3
    .成员 th32DefaultHeapID, 整数型, , , 4
    .成员 th32ModuleID, 整数型, , , 5
    .成员 cntThreads, 整数型, , , 6
    .成员 th32ParentProcessID, 整数型, , , 7
    .成员 pcPriClassBase, 整数型, , , 8
    .成员 dwFlags, 整数型, , , 9
    .成员 进程名称, 字节型, , "256", 10

数据类型 矩形x, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 模块信息, 公开, 进程模块信息
    .成员 size, 整数型, , , 1
    .成员 mid, 整数型, , , 2
    .成员 pid, 整数型, , , 3
    .成员 gusage, 整数型, , , 4
    .成员 pusage, 整数型, , , 5
    .成员 base, 整数型, , , 6
    .成员 大小, 整数型, , , 7
    .成员 模块句柄, 整数型, , , 8
    .成员 模块文件名, 字节型, , "256", 
    .成员 模块完整路径, 字节型, , "256", 

数据类型 PROCESS_BASIC_INFORMATION, 公开, 
    .成员 ExitStatus, 整数型, , , 
    .成员 PebBaseAddress, 整数型, , , 
    .成员 AffinityMask, 整数型, , , 
    .成员 BasePriority, 整数型, , , 
    .成员 UniqueProcessId, 整数型, , , 
    .成员 InheritedFromUniqueProcessId, 整数型, , , 

数据类型 MEMORY_BASIC_INFORMATION, , 
    .成员 BaseAddress, 整数型, , , 
    .成员 byscsd, 整数型, , , 应用程序可用的最小地址
    .成员 AllocattionProtect, 整数型, , , 应用程序可用的最大地址
    .成员 RegionSize, 整数型, , , 
    .成员 State, 整数型, , , 
    .成员 Protect, 整数型, , , 
    .成员 Type, 整数型, , , 

数据类型 程序延时, , 
    .成员 成员_时间, 长整数型, , , 占用8个字节

数据类型 JSON节点, 公开, 节点中项目属性根据不同时刻可能有未获取完毕的情况,请参照每个属性相应说明
    .成员 名称, 文本型, , , 成员名称获取完全结束后确定
    .成员 值, 文本型, , , 成员值获取完全结束后确定  ,对象和数组的成员数需要等到与其配对的结束符“]”或“}”后此处才能有值
    .成员 层次, 整数型, , , 层次从1开始,成员的名称或者值首个字符出现时确定
    .成员 类型, 整数型, , , 1=数值型，2=文本型，3=逻辑型，4=对象型，5=数组型。0=未知类型，6=空,文本\对象\数组 在值首次出现时确定,其他类型在值获取结束后确定
    .成员 成员类型, 字节型, , , 4=对象型,5=数组型,0=顶级项目,其他值表明程序出错,记录父项目的类型    在成员的名称或者值首个字符出现时确定

.全局变量 雷电安装路径, 文本型, , , 
.全局变量 雷电adb端口, 文本型, , "9999", 
.全局变量 新属性格式, 逻辑型, , , 

.DLL命令 CloseHandle, 逻辑型, "kernel32", "CloseHandle", 公开, 关闭一个内核对象。其中包括文件、文件映射、进程、线程、安全和同步对象等。涉及文件处理时，这个函数通常与vb的close命令相似。应尽可能的使用close，因为它支持vb的差错控制。注意这个函数使用的文件句柄与vb的文件编号是完全不同的  非零表示成功，零表示失败。会设置GetLastError
    .参数 对象句柄, 整数型, , 欲关闭的一个对象的句柄;

.DLL命令 CreateProcess_短整数, 整数型, "", "CreateProcessA", , 
    .参数 lpApplicationName, 整数型, , 
    .参数 lpCommandLine, 文本型, , 
    .参数 lpProcessAttributes, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 bInheritHandles, 逻辑型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpEnvironment, 整数型, , 
    .参数 lpCurrentDriectory, 整数型, , 
    .参数 lpStartupInfo, STARTUPINFO_短整数, 传址, 
    .参数 lpProcessInformation, 进程结构, 传址, 

.DLL命令 CreatePipe, 整数型, "", "CreatePipe", , 创建一个匿名管道，并从中得到读写管道的句柄。
    .参数 phReadPipe, 整数型, 传址, 返回一个可用于读管道数据的文件句柄
    .参数 phWritePipe, 整数型, 传址, 返回一个可用于写管道数据的文件句柄
    .参数 lpPipeAttributes, SECURITY_ATTRIBUTES, 传址, 传入一个SECURITY_ATTRIBUTES结构的指针，该结构用于决定该函数返回的句柄是否可被子进程继承。如果传NULL，则返回的句柄是不可继承的
    .参数 nSize, 整数型, , 管道的缓冲区大小。但是这仅仅只是一个理想值，系统根据这个值创建大小相近的缓冲区。如果传入0 ，那么系统将使用一个默认的缓冲区大小

.DLL命令 PeekNamedPipe, 整数型, "", "PeekNamedPipe", , 预览一个管道中的数据，或取得与管道中的数据有关的信息。
    .参数 hNamedPipe, 整数型, , 指定一个管道的句柄。这并不一定是某个命名管道的句柄――匿名管道同样适用
    .参数 lpBuffer, 整数型, , 指定要装载数据的一个缓冲区的头一个字符。可以为零
    .参数 nBufferSize, 整数型, , lpBuffer缓冲区长度
    .参数 lpBytesRead, 整数型, , 保存装载到缓冲区的字符数量
    .参数 lpTotalBytesAvail, 整数型, 传址, 保存管道中可用的字符数量
    .参数 lpBytesLeftThisMessage, 整数型, , 保存这次读操作后仍然保留在消息中的字符数。只能为那些基于消息的命名管道设置

.DLL命令 ReadFile, 整数型, "", "ReadFile", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 nNumberOfBytesToRead, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 
    .参数 lpOverlapped, 整数型, , 

.DLL命令 GetExitCodeProcess, 整数型, "", "GetExitCodeProcess", , 
    .参数 hProcess, 整数型, , 
    .参数 lpExitCode, 整数型, 传址, 

.DLL命令 PeekMessage, 逻辑型, "user32", "PeekMessageA", , 系统_处理事件1
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 
    .参数 wRemoveMsg, 整数型, , 

.DLL命令 TranslateMessage, 逻辑型, "user32.dll", "TranslateMessage", , 系统_处理事件1
    .参数 消息结构, MSG, , lpMsg

.DLL命令 DispatchMessage, 整数型, "user32.dll", "DispatchMessageA", , 系统_处理事件1
    .参数 消息结构, MSG, , lpMsg

.DLL命令 IsWindowVisible, 逻辑型, "", "IsWindowVisible", 公开, 窗口_是否可见  判断窗口是否可见  返回真为可见，否则为不可见
    .参数 hwnd, 整数型, , 要测试的那个窗口的句柄

.DLL命令 IsWindow, 整数型, "user32", "IsWindow", 公开, 窗口_句柄是否有效  判断一个窗口句柄是否有效(非零表示成功，零表示失败)
    .参数 hwnd, 整数型, , 

.DLL命令 IsHungAppWindow, 逻辑型, "User32.dll", "IsHungAppWindow", , 
    .参数 HWND, 整数型, , 

.DLL命令 GetWindowRect, 整数型, "user32.dll", "GetWindowRect", , 取窗口位置和大小
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, 矩形x, , 

.DLL命令 _移动窗口, 整数型, "user32.dll", "MoveWindow", , 
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 逻辑型, , bRepaint，如窗口此时应重画，则设为真

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", 公开, 创建进程快照
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", 公开, 取下一个进程
    .参数 h, 整数型, , 
    .参数 p, 进程信息列表, , 

.DLL命令 GetSystemDirectoryA, 整数型, "kernel32", "GetSystemDirectoryA", 公开, 目录_取system32目录  成功返回system32目录的全路径
    .参数 缓冲区, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 Module32First, 整数型, "", "Module32First", 公开, 第一个模块，查找模块
    .参数 快照句柄, 整数型, , 
    .参数 模块信息, 模块信息, , 

.DLL命令 GetCurrentProcess, 整数型, "", "GetCurrentProcess", , 

.DLL命令 GetCurrentProcessId, 整数型, "kernel32.dll", "GetCurrentProcessId", 公开, 取自进程ID

.DLL命令 TerminateProcess, 整数型, "", "TerminateProcess", 公开, _进程终止
    .参数 进程ID, 整数型, , 
    .参数 a, 整数型, , 

.DLL命令 OpenProcess, 整数型, "", "OpenProcess", 公开, 打开进程
    .参数 进程对象, 整数型, , 
    .参数 继承句柄, 整数型, , 
    .参数 进程标识符, 整数型, , 

.DLL命令 OpenProcess_API, 整数型, "", "OpenProcess", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 GetWindowTextLength, 整数型, "user32", "GetWindowTextLengthA", 公开, 
    .参数 hwnd, 整数型, , 

.DLL命令 GetWindowTextA, 整数型, "", "GetWindowTextA", 公开, 窗口_取标题
    .参数 hwnd, 整数型, , 
    .参数 标题名, 文本型, 传址, 
    .参数 长度, 整数型, , 

.DLL命令 GetAncestor, 整数型, "", "GetAncestor", 公开, 取出指定窗口的最顶级父窗口
    .参数 hwnd, 整数型, , 子窗口句柄
    .参数 gaFlags, 整数型, , 

.DLL命令 GetParent, 整数型, "", "GetParent", 公开, 取父句柄
    .参数 hwnd, 整数型, , 

.DLL命令 GetFileVersionInfoSize, 整数型, "version.dll", "GetFileVersionInfoSizeA", , 
    .参数 文件路径, 文本型, , 
    .参数 保留, 整数型, , 

.DLL命令 GetFileVersionInfo, 逻辑型, "version.dll", "GetFileVersionInfoA", , 
    .参数 文件路径, 文本型, , 
    .参数 保留, 整数型, , 
    .参数 缓冲区长度, 整数型, , 通过GetFileVersionInfoSize获取的长度
    .参数 数据, 字节集, 传址, 

.DLL命令 VerQueryValue, 逻辑型, "version.dll", "VerQueryValueA", , 
    .参数 pBlock, 字节集, 传址, 
    .参数 lpSubBlock, 文本型, , 
    .参数 lplpBuffer, 整数型, 传址, 
    .参数 puLen, 整数型, 传址, 

.DLL命令 FindWindowExA_文本, 整数型, "user32", "FindWindowExA", 公开, 
    .参数 父窗口句柄, 整数型, , 
    .参数 子窗口, 整数型, , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 GetWindowThreadProcessId, 整数型, "user32.dll", "GetWindowThreadProcessId", 公开, 线程_取ID
    .参数 hwnd, 整数型, , 指定窗口句柄
    .参数 进程标识符, 整数型, 传址, 用于装载进程ID的变量

.DLL命令 GetClassNameA, 整数型, "user32.dll", "GetClassNameA", 公开, 窗口_取类名 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 文本, 文本型, 传址, 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 文本长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 CreateRemoteThread, 整数型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 GetExitCodeThread, 逻辑型, "", "GetExitCodeThread", , 
    .参数 hThread, 空白型, , 
    .参数 lpExitCode, 空白型, 传址, 

.DLL命令 GetModuleHandleA, 整数型, "", "", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 GetProcAddress, 整数型, "", "", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 ReadProcessMemory, 逻辑型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 文本型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 

.DLL命令 WaitForSingleObject, 整数型, "", "", , 
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 _取指针_文本型, 整数型, "", "lstrcpyn", 公开, 
    .参数 目的指针, 文本型, 传址, 
    .参数 源指针, 文本型, 传址, 
    .参数 复制长度, 整数型, , 0

.DLL命令 _动态调用子程序1, 逻辑型, "", "CallWindowProcA", , 
    .参数 动态调用代码, 字节集, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, 数组, 
    .参数 参数数目, 整数型, , 
    .参数 是否C调用, 逻辑型, , 

.DLL命令 SetProcessWorkingSetSize, 整数型, "", "SetProcessWorkingSetSize", , 
    .参数 hProcess, 空白型, , 
    .参数 dwMinimumWorkingSetSize, 空白型, , 
    .参数 dwMaximumWorkingSetSize, 空白型, , 

.DLL命令 GetShortPathNameA, 整数型, "kernel32", "GetShortPathNameA", 公开, 取短文件名
    .参数 lpszLongPath, 文本型, 传址, 
    .参数 lpszShortPath, 文本型, 传址, 
    .参数 cchBuffer, 整数型, , 

.DLL命令 GetLongPathNameA, 整数型, "kernel32.dll", "GetLongPathNameA", 公开, 取长文件名
    .参数 lpszShortPath, 文本型, 传址, 
    .参数 lpszLongPath, 文本型, 传址, 
    .参数 cchBuffer, 整数型, , 

.DLL命令 MoveMemory, 空白型, "Kernel32", "RtlMoveMemory", , 
    .参数 dest, 字节型, 传址 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 lstrcpy, 整数型, "Kernel32", "lstrcpyA", , 
    .参数 lpString1, 文本型, , 
    .参数 lpString2, 整数型, , 

.DLL命令 GetInputState, 整数型, "user32", "GetInputState", 公开, 用法,如果真(我的处理事件()≠0),处理事件()    比系统自带的"处理事件"比3倍以上

.DLL命令 CreateWaitableTimerA, 整数型, "", "CreateWaitableTimerA", 公开, 程序延时
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 SetWaitableTimer, 整数型, "", "SetWaitableTimer", 公开, 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, 程序延时, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "MsgWaitForMultipleObjects", 公开, 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 MultiByteToWideChar_字节集, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开, kernel32.dll 将通配符映像为多字节 _Unicode转Utf8
    .参数 CodePage, 整数型, , 1
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpDefaultChar, 整数型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 CoInitialize, 空白型, "ole32.dll", "CoInitialize", 公开, 加载COM
    .参数 pvReserved, 整数型, , 值为0

.DLL命令 CoUninitialize, 空白型, "ole32.dll", "CoUninitialize", 公开, 卸载COM

.DLL命令 GetUserNameA, 整数型, "advapi32.dll", "GetUserNameA", 公开, 取出当前的用户名,TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同用户名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回用户名的实际长度载入

.DLL命令 SHGetSpecialFolderPath, 逻辑型, "", "SHGetSpecialFolderPathA", 公开, 取系统目录
    .参数 hwndOwner, 整数型, , 
    .参数 lpszPath, 文本型, , 
    .参数 nFolder, 整数型, , 
    .参数 fCreate, 逻辑型, , 

.DLL命令 GetWindowsDirectoryA, 整数型, "kernel32.dll", "GetWindowsDirectoryA", 公开, 目录_取Windows目录  成功返回Windows目录的全路径
    .参数 缓冲区, 文本型, , 
    .参数 尺寸, 整数型, , 

.DLL命令 GetTempPathA, 整数型, "kernel32.dll", "GetTempPathA", 公开, 取临时目录
    .参数 目录长度, 整数型, , 
    .参数 临时目录, 文本型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", 公开, 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 W2A_, 整数型, "kernel32.dll", "WideCharToMultiByte", 公开, 
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 UNICODE文本, 字节集, , UNICODE
    .参数 长度, 整数型, , 
    .参数 ASCI文本, 文本型, , ASCI
    .参数 长度, 整数型, , 
    .参数 pDefaultChar, 整数型, , 0
    .参数 pDefaultCharUsed, 逻辑型, 传址, 0

.DLL命令 A2W_, 整数型, "kernel32.dll", "MultiByteToWideChar", , , 将多媒体字符串映像为通配字符串
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 字节集, , ASCI
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , UNICODE
    .参数 宽字符文本长度, 整数型, , 

.程序集 系统应用, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
.局部变量 ld, 雷电ld操作, , , 
.局部变量 adb, 雷电adb操作, , , 
.局部变量 dnc, 雷电dnconsole操作, , , 

 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
 ' 回显例子 ()
调试输出 (相加 (“当前模拟器路径：”, 取安装目录 ()), 文件_到长文件名 (雷电安装路径))
调试输出 (相加 (“当前模拟器版本：”, 文件_取文件版本号 (相加 (雷电安装路径, “\dnplayer.exe”))))

.子程序 回显例子, 空白型, , 取DOS返回 即时回显子程序例子。返回逻辑值,真:停止,假:继续
取DOS返回 (“ping 127.0.0.1 -t”, 10000, &回显子程序)

.子程序 回显子程序, 逻辑型, , 取DOS返回 即时回显子程序例子。返回逻辑值,真:停止,假:继续
.参数 即时文本, 文本型, , 

输出调试文本 (即时文本)
返回 (假) ' 这里如果返回真，则停止该DOS进程

.子程序 取DOS返回, 文本型, , 如果没有设置超时时间，该命令会一直等待到命令执行完毕后才会返回.
.参数 命令行文本, 文本型, , 
.参数 超时时间, 整数型, 可空, 设置等待超时时间(单位毫秒。默认为0)，如果超时且无返回值，强制结束命令。如果一直有返回值，例如ping命令，则不会被超时影响，需要结束的话，可以利用即时回显来控制。
.参数 即时回显, 子程序指针, 可空, 即时回显信息回调子程序。子程序要有一个文本型参数，用来接收回显文本，子程序返回逻辑值,真:停止,假:继续

.局部变量 SECURITY_ATTRIBUTES, SECURITY_ATTRIBUTES, , , 
.局部变量 STARTUPINFO, STARTUPINFO_短整数, , , 
.局部变量 PROCESS_INFORMATION, 进程结构, , , 
.局部变量 hWrite, 整数型, , , 
.局部变量 hRead, 整数型, , , 
.局部变量 txt, 字节集, , , 
.局部变量 Length, 整数型, , , 
.局部变量 ExitCode, 整数型, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 开始时间, 整数型, , , 
.局部变量 进程信息, 未知类型0x30009, , , 
.局部变量 临时, 文本型, , , 
.局部变量 参数, 整数型, , "1", 

赋值 (开始时间, 取启动时间 ())
赋值 (SECURITY_ATTRIBUTES.nLength, 12)
赋值 (SECURITY_ATTRIBUTES.lpSecurityDescriptor, 0)
赋值 (SECURITY_ATTRIBUTES.bInheritHandle, 1)
CreatePipe (hRead, hWrite, SECURITY_ATTRIBUTES, 0) ' 创建一个匿名管道
赋值 (STARTUPINFO.cb, 68)
赋值 (STARTUPINFO.dwFlags, 位或 (1, 256))
赋值 (STARTUPINFO.wShowWindow, 0)
赋值 (STARTUPINFO.hStdOutput, hWrite)
赋值 (STARTUPINFO.hStdError, hWrite)
CreateProcess_短整数 (0, 相加 (“cmd.exe /c ”, 命令行文本), 0, 0, 真, 0, 0, 0, STARTUPINFO, PROCESS_INFORMATION) ' 创建一个新进程，并且设置读写管道，创建成功后，进程会自动再创建一个写管道端口
CloseHandle (hWrite) ' 因为我们开始已经创建了一个写管道端口，现在进程创键时又自动创键了一个写管道端口，所以应关闭多余的管道写端口
.判断循环首 (不等于 (Length, -1)) ' 制造一个无限循环
    PeekNamedPipe (hRead, 0, 0, 0, Length, 0) ' 查看管道中是否有数据
    .如果 (不等于 (Length, 0))
        赋值 (txt, 取空白字节集 (1024))
        ReadFile (hRead, txt, 1023, Length, 0) ' 从管道中读取数据
        赋值 (临时, 取字节集数据 (txt, #文本型, ))
        .如果真 (等于 (是否为空 (即时回显), 假))
            赋值 (参数 [1], _取指针_文本型 (临时, 临时, 0))
            .如果真 (_动态调用子程序1 (#图片1, 即时回显, 参数, 1, 假))
                CloseHandle (hRead)
                跳出循环 ()
            .如果真结束
            
        .如果真结束
        赋值 (返回值, 相加 (返回值, 临时))
    .否则
        GetExitCodeProcess (PROCESS_INFORMATION.进程句柄, ExitCode) ' 查看指定进程是否已结束
        .如果真 (不等于 (ExitCode, 259)) ' 因为会有程序退出来了，但管道中还有数据的情况，所以必须在管道中没有数据的情况下判断程序是否已结束，这时才能中止循环！
            CloseHandle (hRead)
            跳出循环 ()
        .如果真结束
        
    .如果结束
    .如果真 (并且 (大于 (超时时间, 0), 大于或等于 (相减 (取启动时间 (), 开始时间), 超时时间))) ' 进行超时判断
        .如果 (等于 (进程信息., 0))
            进程_命令行取进程信息 (命令行文本, 进程信息)
        .否则
            结束进程 (进程信息.) ' 结束进程并关闭管道
            CloseHandle (hRead)
            跳出循环 ()
        .如果结束
        
    .如果真结束
    _处理事件 ()
.判断循环尾 ()
返回 (返回值)

.子程序 进程_命令行取进程信息, 逻辑型, , 
.参数 命令行, 文本型, , 
.参数 进程信息, 未知类型0x30009, 参考, 

.局部变量 ipacl, CImagePathAndCommandLine, , , 
.局部变量 strBuffer, 文本型, , , 
.局部变量 ProcessInfo, 未知类型0x30009, , "0", 
.局部变量 n, 整数型, , , 
.局部变量 成功, 逻辑型, , , 

赋值 (ProcessInfo, 未知支持库函数_10 ())
.计次循环首 (取数组成员数 (ProcessInfo), n)
    .如果真 (ipacl.OpenProcess (ProcessInfo [n], ))
        ipacl.GetProcessImagePathAndCommandLine (strBuffer)
        ipacl.Close ()
        赋值 (strBuffer, 子文本替换 (strBuffer, “  ”, “ ”, , , 真))
        .如果 (等于 (文本比较 (命令行, strBuffer, 假), 0))
            赋值 (进程信息, ProcessInfo [n])
            赋值 (成功, 真)
            跳出循环 ()
        .否则
            赋值 (成功, 假)
        .如果结束
        
    .如果真结束
    
.计次循环尾 ()
返回 (成功)


.子程序 文件枚举, 整数型, , 枚举某个目录下的指定类型文件；成功返回文件数量；
.参数 欲寻找的目录, 文本型, , 文件目录
.参数 欲寻找的文件名, 文本型, , 如果寻找全部文件可以填入*.*，或*.txt只找txt文件
.参数 文件数组, 文本型, 参考 可空 数组, 用于装载文件数组的变量；把寻找到的文件都放在这个数组里，并返回；
.参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；

.局部变量 局_文件名, 文本型, , , 
.局部变量 局_目录, 文本型, , , 

清除数组 (文件数组)
赋值 (局_目录, 欲寻找的目录)
.如果真 (不等于 (取文本右边 (局_目录, 1), “\”))
    赋值 (局_目录, 相加 (局_目录, “\”))
.如果真结束
赋值 (局_文件名, 寻找文件 (相加 (局_目录, 欲寻找的文件名), ))
.判断循环首 (不等于 (局_文件名, “”))
    .如果 (是否带路径)
        加入成员 (文件数组, 相加 (局_目录, 局_文件名))
    .否则
        加入成员 (文件数组, 局_文件名)
    .如果结束
    _处理事件1 ()
    赋值 (局_文件名, 寻找文件 ())
.判断循环尾 ()
返回 (取数组成员数 (文件数组))

.子程序 窗口_是否未响应, 逻辑型, , 未响应返回真，正常返回假。如果对绑定句柄来使用，可以判断模拟器是否成功卡死
.参数 句柄, 整数型, , 

返回 (IsHungAppWindow (句柄))

.子程序 窗口_是否可见, 逻辑型, , 返回真为可见，否则为不可见。如果对绑定句柄来使用，可以判断模拟器是否成功启动
.参数 窗口句柄, 整数型, , 窗口句柄

返回 (IsWindowVisible (窗口句柄))

.子程序 窗口_取标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 局_缓冲区, 文本型, , , 
.局部变量 局_缓冲大小, 空白型, , , 

赋值 (局_缓冲大小, 相加 (GetWindowTextLength (窗口句柄), 1))
赋值 (局_缓冲区, 取空白文本 (局_缓冲大小))
GetWindowTextA (窗口句柄, 局_缓冲区, 局_缓冲大小)
返回 (局_缓冲区)

.子程序 窗口_句柄取进程ID, 整数型, , 返回进程ID；
.参数 窗口句柄, 整数型, , 

.局部变量 进程ID, 整数型, 静态, , 用于装载进程ID的变量

GetWindowThreadProcessId (窗口句柄, 进程ID)
返回 (进程ID)

.子程序 窗口_取祖句柄, 整数型, , 取一个窗口的顶级句柄，如果提供的句柄已是顶级句柄，将直接返回。
.参数 窗口句柄, 整数型, , 欲取祖窗口句柄的子窗口句柄

返回 (GetAncestor (窗口句柄, 3))

.子程序 窗口_取父句柄, 整数型, , 判断一个窗口是否有父窗口，如有直接返回该窗口的像窗口句柄，否则返回0
.参数 窗口句柄, 整数型, , 欲取父窗口的窗口句柄

返回 (GetParent (窗口句柄))

.子程序 窗口_取类名, 文本型, , 取指定窗口句柄的窗口类名(返回窗口类名,失败返回空文本)
.参数 窗口句柄, 整数型, , 欲取类名的窗口句柄

.局部变量 类名, 文本型, , , 

赋值 (类名, 取空白文本 (50))
GetClassNameA (窗口句柄, 类名, 50)
返回 (类名)

.子程序 句柄_是否有效, 逻辑型, , 有效返回真；不存在返回假。如果对绑定句柄来使用，可以判断模拟器是否异常闪退
.参数 窗口句柄, 整数型, , 

返回 (不等于 (IsWindow (窗口句柄), 0))

.子程序 窗口自动排列, 空白型, , 自动将多个窗口，整齐的排列好。
.参数 窗口句柄, 整数型, 数组, 需要自动排列的窗口句柄数组
.参数 左边间距, 整数型, , 窗口左边与左边之间的距离；如果为0，则为窗口宽度；如果为-1，则根据屏幕大小自动计算；
.参数 顶边间距, 整数型, , 窗口顶边与顶边之间的距离；如果为0，则为窗口高度；如果为-1，则根据屏幕大小自动计算；
.参数 每行数量, 整数型, , 每行几个窗口
.参数 对齐方式, 整数型, , 1.左上角；2.右上角；3.左下角；4.右下角；5.局中
.参数 新宽度, 整数型, 可空, 为0或省略时，不修改宽度
.参数 新高度, 整数型, 可空, 为0或省略时，不修改高度

.局部变量 总数, 整数型, , , 
.局部变量 行数, 整数型, , , 
.局部变量 余数, 整数型, , , 
.局部变量 矩形, 矩形x, , , 
.局部变量 临时矩形, 矩形x, , , 
.局部变量 屏宽, 整数型, , , 
.局部变量 屏高, 整数型, , , 
.局部变量 索引, 整数型, , , 
.局部变量 次数1, 整数型, , , 
.局部变量 次数2, 整数型, , , 

赋值 (总数, 取数组成员数 (窗口句柄))
.如果真 (大于 (每行数量, 总数))
    调试输出 (相加 (“每行数量 ”, 到文本 (每行数量), “ 大于 窗口数量 ”, 到文本 (总数)))
    返回 ()
.如果真结束
GetWindowRect (窗口句柄 [1], 矩形)
赋值 (矩形.宽度, 相减 (矩形.宽度, 矩形.左边))
赋值 (矩形.高度, 相减 (矩形.高度, 矩形.顶边))
.如果真 (大于 (新宽度, 0))
    赋值 (矩形.宽度, 新宽度)
.如果真结束
.如果真 (大于 (新高度, 0))
    赋值 (矩形.高度, 新高度)
.如果真结束

赋值 (屏宽, 取屏幕宽度 ())
赋值 (屏高, 相减 (取屏幕高度 (), 40))
赋值 (行数, 相除 (总数, 每行数量))
赋值 (余数, 求余数 (总数, 每行数量))
.如果真 (大于 (余数, 0))
    赋值 (行数, 相加 (行数, 1))
.如果真结束

 ' 间距处理
.如果真 (等于 (顶边间距, 0))
    赋值 (顶边间距, 矩形.高度)
.如果真结束
.如果真 (等于 (左边间距, 0))
    赋值 (左边间距, 矩形.宽度)
.如果真结束
.如果真 (等于 (顶边间距, -1))
    赋值 (顶边间距, 相除 (相减 (屏高, 矩形.高度), 相减 (行数, 1)))
.如果真结束
.如果真 (等于 (左边间距, -1))
    赋值 (左边间距, 相除 (相减 (屏宽, 矩形.宽度), 相减 (每行数量, 1)))
.如果真结束

 ' 计算总矩形.宽度高
赋值 (临时矩形.宽度, 相加 (矩形.宽度, 相乘 (左边间距, 相减 (每行数量, 1))))
.如果真 (大于 (临时矩形.宽度, 屏宽))
    调试输出 (“自动排列宽度超出屏幕。”)
.如果真结束
赋值 (临时矩形.高度, 相加 (矩形.高度, 相乘 (顶边间距, 相减 (行数, 1))))
.如果真 (大于 (临时矩形.高度, 屏高))
    调试输出 (“自动排列高度超出屏幕。”)
.如果真结束

 ' 计算并排列窗口位置
赋值 (索引, 1)
.计次循环首 (行数, 次数1)
    .如果真 (并且 (大于 (余数, 0), 等于 (次数1, 行数)))
        赋值 (每行数量, 余数)
    .如果真结束
    .如果真 (等于 (对齐方式, 1)) ' 左上角
        赋值 (临时矩形.左边, 0)
        赋值 (临时矩形.顶边, 相乘 (相减 (次数1, 1), 顶边间距))
    .如果真结束
    .如果真 (等于 (对齐方式, 2)) ' 右上角
        赋值 (临时矩形.左边, 相减 (屏宽, 矩形.宽度))
        赋值 (临时矩形.顶边, 相乘 (相减 (次数1, 1), 顶边间距))
    .如果真结束
    .如果真 (等于 (对齐方式, 3)) ' 左下角
        赋值 (临时矩形.顶边, 相减 (屏高, 矩形.高度, 相乘 (相减 (次数1, 1), 顶边间距)))
        赋值 (临时矩形.左边, 0)
    .如果真结束
    .如果真 (等于 (对齐方式, 4)) ' 右下角
        赋值 (临时矩形.顶边, 相减 (屏高, 矩形.高度, 相乘 (相减 (次数1, 1), 顶边间距)))
        赋值 (临时矩形.左边, 相减 (屏宽, 矩形.宽度))
    .如果真结束
    .如果真 (等于 (对齐方式, 5)) ' 居中
        赋值 (临时矩形.左边, 相减 (相除 (屏宽, 2), 相除 (相加 (矩形.宽度, 相乘 (左边间距, 相减 (每行数量, 1))), 2)))
        赋值 (临时矩形.顶边, 相加 (相除 (相减 (屏高, 临时矩形.高度), 2), 相乘 (相减 (次数1, 1), 顶边间距)))
    .如果真结束
    .计次循环首 (每行数量, 次数2)
        _移动窗口 (窗口句柄 [索引], 临时矩形.左边, 临时矩形.顶边, 矩形.宽度, 矩形.高度, 真)
        赋值 (索引, 相加 (索引, 1))
        .如果真 (等于 (对齐方式, 1)) ' 左上角
            赋值 (临时矩形.左边, 相加 (临时矩形.左边, 左边间距))
        .如果真结束
        .如果真 (等于 (对齐方式, 2)) ' 右上角
            赋值 (临时矩形.左边, 相减 (临时矩形.左边, 左边间距))
        .如果真结束
        .如果真 (等于 (对齐方式, 3)) ' 左下角
            赋值 (临时矩形.左边, 相加 (临时矩形.左边, 左边间距))
        .如果真结束
        .如果真 (等于 (对齐方式, 4)) ' 右下角
            赋值 (临时矩形.左边, 相减 (临时矩形.左边, 左边间距))
        .如果真结束
        .如果真 (等于 (对齐方式, 5)) ' 居中
            赋值 (临时矩形.左边, 相加 (临时矩形.左边, 左边间距))
        .如果真结束
        处理事件 ()
    .计次循环尾 ()
    赋值 (临时矩形.顶边, 相加 (临时矩形.顶边, 顶边间距))
.计次循环尾 ()

.子程序 文本_取随机范围数字, 文本型, , 如1-100之间的双数或单数或单双一起！
.参数 起始数, 长整数型, , 如：1
.参数 结束数, 长整数型, , 如：1000
.参数 单双选择, 整数型, 可空, 1为单，2为双,否则为取单双

.局部变量 临时整数, 长整数型, , , 

赋值 (临时整数, 汇编_取随机数 (起始数, 结束数))
.判断开始 (等于 (单双选择, 1))
    .如果真 (等于 (求余数 (临时整数, 2), 0))
        .判断开始 (等于 (临时整数, 结束数))
            赋值 (临时整数, 相减 (临时整数, 1))
        .默认
            赋值 (临时整数, 相加 (临时整数, 1))
        .判断结束
        
    .如果真结束
    返回 (到文本 (临时整数))
.判断 (等于 (单双选择, 2))
    .如果真 (等于 (求余数 (临时整数, 2), 1))
        .判断开始 (等于 (临时整数, 结束数))
            赋值 (临时整数, 相减 (临时整数, 1))
        .默认
            赋值 (临时整数, 相加 (临时整数, 1))
        .判断结束
        
    .如果真结束
    返回 (到文本 (临时整数))
.默认
    返回 (到文本 (临时整数))
.判断结束


.子程序 进程_ID取进程名, 文本型, , 通过进程ID取得该进程执行文件名，也就是进程名;
.参数 参数_进程ID, 整数型, , 该进程的ID;

.局部变量 hProcessSnap, 整数型, , , 
.局部变量 bool, 整数型, , , 
.局部变量 pe32, 进程信息列表, , , 
.局部变量 name, 文本型, , , 

赋值 (hProcessSnap, CreateToolhelp32Snapshot (2, 0)) ' #TH32CS_SNAPPROCESS
赋值 (pe32.dwSize, 296)
赋值 (bool, Process32Next (hProcessSnap, pe32))
.判断循环首 (等于 (bool, 1))
    .如果真 (等于 (pe32.进程ID, 参数_进程ID))
        赋值 (name, 到文本 (pe32.进程名称))
        跳出循环 ()
    .如果真结束
    赋值 (bool, Process32Next (hProcessSnap, pe32))
.判断循环尾 ()
CloseHandle (hProcessSnap)
返回 (name)

.子程序 进程_ID取窗口句柄, 整数型, , 通过进程ID取得该进程的窗口句柄,超时则返回零
.参数 进程ID, 整数型, , 该进程的ID;
.参数 窗口标题, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 窗口类名, 文本型, 可空, 模糊参数 如果为空,忽略此参数
.参数 超时, 空白型, 可空, 为空则无限循环

.局部变量 局_超时时间, 空白型, , , 
.局部变量 局_开始时间, 空白型, , , 
.局部变量 局_窗口句柄, 空白型, , , 
.局部变量 局_进程ID, 空白型, , , 
.局部变量 局_标题, 文本型, , , 
.局部变量 局_类名, 文本型, , , 

赋值 (局_开始时间, 取启动时间 ())
赋值 (局_超时时间, 选择 (或者 (是否为空 (超时), 等于 (超时, -1)), 31536000, 超时))
.判断循环首 (小于 (相减 (取启动时间 (), 局_开始时间), 局_超时时间))
    赋值 (局_窗口句柄, FindWindowExA_文本 (0, 局_窗口句柄, 字符 (0), 字符 (0)))
    .如果真 (等于 (IsWindow (局_窗口句柄), 1))
        .如果真 (IsWindowVisible (局_窗口句柄))
            赋值 (局_进程ID, 窗口_句柄取进程ID (局_窗口句柄))
            .如果真 (等于 (局_进程ID, 进程ID))
                赋值 (局_标题, 窗口_取标题 (局_窗口句柄))
                赋值 (局_类名, 窗口_取类名 (局_窗口句柄))
                .如果真 (不等于 (寻找文本 (局_标题, 窗口标题, , 假), -1))
                    返回 (局_窗口句柄)
                .如果真结束
                .如果真 (不等于 (寻找文本 (局_类名, 窗口类名, , 假), -1))
                    返回 (局_窗口句柄)
                .如果真结束
                .如果真 (或者 (是否为空 (窗口标题), 是否为空 (窗口类名)))
                    返回 (局_窗口句柄)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    处理事件 ()
.判断循环尾 ()
返回 (0)

.子程序 取程序路径, 文本型, , 取指定进程的程序路径，成功返回程序路径，失败或进程不存在返回空文本
.参数 进程ID, 整数型, , 

.局部变量 快照句柄, 整数型, , , 
.局部变量 模块信息, 模块信息, , , 
.局部变量 路径, 文本型, , , 

赋值 (快照句柄, CreateToolhelp32Snapshot (8, 进程ID))
.判断开始 (等于 (进程ID, 4))
    CloseHandle (快照句柄)
    返回 (取system32目录 ())
.判断 (等于 (快照句柄, -1))
    返回 (“”)
.默认
    
.判断结束
赋值 (模块信息.size, 1024)
Module32First (快照句柄, 模块信息)
赋值 (路径, 到文本 (模块信息.模块完整路径))
.判断开始 (等于 (取文本左边 (路径, 11), “\SystemRoot”))
    赋值 (路径, 相加 (读环境变量 (“SystemRoot”), 子文本替换 (路径, “\SystemRoot”, “”, , 1, 假)))
.判断 (等于 (取文本左边 (路径, 4), “\??\”))
    赋值 (路径, 子文本替换 (路径, “\??\”, “”, , 1, 假))
.默认
    
.判断结束
CloseHandle (快照句柄)
返回 (路径)

.子程序 取端口进程, 整数型, , 返回占用指定端口的进程ID。成功返回端口号，失败返回0。注：当ADB端口被占用时，可以用这个查看被占用的进程ID（adb默认端口是5037）
.参数 端口号, 整数型, , 

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取DOS返回 (相加 (“netstat -ano | findstr ”, #引号, “5037”, #引号)))
赋值 (返回文本, 删首尾空 (取文本之间 (返回文本, “LISTENING”, #换行符)))
返回 (到整数 (返回文本))

.子程序 取随机MAC, 文本型, , 
.参数 连字符, 文本型, , “”空文本，返回“02F53EC3A0B9”格式的文本；“:”返回“02:F5:3E:C3:A0:B9”格式的文本；“-”返回“02-F5-3E-C3-A0-B9”

.局部变量 地址, 文本型, , "0", 
.局部变量 偶数地址, 文本型, , "0", 
.局部变量 MAC, 文本型, , , 

赋值 (地址, { “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F” })
赋值 (偶数地址, { “0”, “2”, “4”, “6”, “8”, “A”, “C”, “E” }) ' 第二位必须是偶数
置随机数种子 ()
赋值 (MAC, 相加 (地址 [取随机数 (1, 16)], 偶数地址 [取随机数 (1, 8)], 连字符, 地址 [取随机数 (1, 16)], 地址 [取随机数 (1, 16)], 连字符, 地址 [取随机数 (1, 16)], 地址 [取随机数 (1, 16)], 连字符, 地址 [取随机数 (1, 16)], 地址 [取随机数 (1, 16)], 连字符, 地址 [取随机数 (1, 16)], 地址 [取随机数 (1, 16)], 连字符, 地址 [取随机数 (1, 16)], 地址 [取随机数 (1, 16)]))
返回 (MAC)

.子程序 文件_取文件版本号, 文本型, , 
.参数 FullFileName, 文本型, , 
.参数 错误信息, 文本型, 参考 可空, 

.局部变量 size, 整数型, , , 
.局部变量 文件版本字节集, 字节集, , , 
.局部变量 lVerPointer, 整数型, , , 
.局部变量 返回长度, 整数型, , , 
.局部变量 匿名局部变量_131, 空白型, , , 
.局部变量 bytebuffer, 字节型, , "261", 
.局部变量 HexNumber, 整数型, , , 
.局部变量 Lang_Charset_String, 文本型, , , 
.局部变量 临时_文本, 文本型, , , 
.局部变量 rc, 整数型, , , 
.局部变量 文件版本, 文本型, , , 

赋值 (size, GetFileVersionInfoSize (FullFileName, 0))
.如果真 (小于或等于 (size, 0))
    赋值 (错误信息, “GetFileVersionInfoSize（获取信息长度）失败”)
    返回 (“”)
.如果真结束
赋值 (文件版本字节集, 取空白字节集 (size))

.如果真 (等于 (GetFileVersionInfo (FullFileName, 0, size, 文件版本字节集), 假))
    赋值 (错误信息, “GetFileVersionInfo（获取信息）失败”)
    返回 (“”)
.如果真结束

.如果真 (等于 (VerQueryValue (文件版本字节集, “\VarFileInfo\Translation”, lVerPointer, 返回长度), 假))
    赋值 (错误信息, “VerQueryValue（查询Version）失败”)
    返回 (“”)
.如果真结束
MoveMemory (bytebuffer, lVerPointer, 返回长度)
赋值 (HexNumber, 相加 (bytebuffer [3], 相乘 (bytebuffer [4], 256), 相乘 (bytebuffer [1], 65536), 相乘 (bytebuffer [2], 16777216)))
赋值 (rc, 到长整数 (相加 (bytebuffer [1], 相乘 (bytebuffer [2], 256))))
赋值 (Lang_Charset_String, 取十六进制文本 (HexNumber))

.判断循环首 (小于 (取文本长度 (Lang_Charset_String), 8))
    赋值 (Lang_Charset_String, 相加 (“0”, Lang_Charset_String))
.判断循环尾 ()

赋值 (临时_文本, 取空白文本 (261))
赋值 (临时_文本, 相加 (“\StringFileInfo\”, Lang_Charset_String, “\FileVersion”))
.如果 (VerQueryValue (文件版本字节集, 临时_文本, lVerPointer, 返回长度))
    赋值 (文件版本, 取空白文本 (返回长度))
    lstrcpy (文件版本, lVerPointer)
.否则
    赋值 (文件版本, “”)
.如果结束

返回 (文件版本)


.子程序 文件_到短文件名, 文本型, , 返回短文件名
.参数 文件名, 文本型, , 

.局部变量 局_短路径, 文本型, , , 

赋值 (局_短路径, 取空白文本 (255))
GetShortPathNameA (文件名, 局_短路径, 取文本长度 (文件名))
.如果真 (不等于 (删首尾空 (局_短路径), “”))
    返回 (局_短路径)
.如果真结束
返回 (文件名)

.子程序 文件_到长文件名, 文本型, , 返回长文件名
.参数 文件名, 文本型, , 

.局部变量 局_长路径, 文本型, , , 
.局部变量 局_长度, 整数型, , , 

赋值 (局_长度, GetLongPathNameA (文件名, 局_长路径, 0))
赋值 (局_长路径, 取空白文本 (局_长度))
GetLongPathNameA (文件名, 局_长路径, 局_长度)
.如果真 (不等于 (删首尾空 (局_长路径), “”))
    返回 (局_长路径)
.如果真结束
返回 (文件名)

.子程序 进程_关闭, 逻辑型, , 关闭已经打开的操作句柄
.参数 进程句柄, 整数型, , 进程句柄,线程句柄

返回 (CloseHandle (进程句柄))

.子程序 取安装目录, 文本型, , 从注册表中取出雷电模拟器安装目录。如果版本参数留空，先取2.xxx，失败再取1.xxx。
.参数 版本, 整数型, 可空, 0 = 自动获取，先取2.xxx，失败再取1.xxx。 1 = 获取1.xxx 版本路径。 2 = 获取2.xxx 版本路径。

.局部变量 路径1, 文本型, , , 
.局部变量 路径2, 文本型, , , 

赋值 (路径1, 取文本注册项 (3, “Software\ChangZhi\dnplayer\InstallDir”, ))
赋值 (路径2, 取文本注册项 (3, “Software\ChangZhi2\dnplayer\InstallDir”, ))
.如果真 (等于 (版本, 1))
    赋值 (雷电安装路径, 路径1)
    返回 (雷电安装路径)
.如果真结束
.如果真 (等于 (版本, 2))
    赋值 (雷电安装路径, 路径2)
    返回 (雷电安装路径)
.如果真结束
.如果 (等于 (路径2, “”))
    赋值 (雷电安装路径, 路径1)
.否则
    赋值 (雷电安装路径, 路径2)
.如果结束
.如果 (文件是否存在 (相加 (雷电安装路径, “\dnplayer.exe”)))
    赋值 (雷电安装路径, 文件_到短文件名 (雷电安装路径))
    返回 (雷电安装路径)
.否则
    返回 (“”)
.如果结束


.子程序 置安装目录, 逻辑型, , 如果取安装目录失败，可以用这个命令指定雷电模拟器的安装目录。
.参数 安装目录, 文本型, , 

.如果真 (不等于 (取文本右边 (安装目录, 1), “\”))
    赋值 (安装目录, 相加 (安装目录, “\”))
.如果真结束
.如果 (文件是否存在 (相加 (安装目录, “DNCONS~1.EXE”)))
    赋值 (雷电安装路径, 文件_到短文件名 (安装目录))
    返回 (真)
.否则
    调试输出 (“置安装目录失败，请检查目录是否正确！”, 安装目录)
    赋值 (雷电安装路径, “”)
    返回 (假)
.如果结束


.子程序 读apk信息, 空白型, , 取出安卓apk安装包中的基础信息
.参数 apk文件, 文本型, , 
.参数 应用名, 文本型, 参考, 
.参数 包名, 文本型, 参考, 
.参数 类名, 文本型, 参考, 
.参数 图标文件, 文本型, 参考, 这里取出的是apk中的路径，可以自行解压提取图标文件

.局部变量 str, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (apk文件, 文件_到短文件名 (apk文件))
赋值 (str, 编码_Utf8到Ansi (到字节集 (取DOS返回 (相加 (雷电安装路径, “aapt dump badging ”, apk文件)))))
.如果 (等于 (寻找文本 (str, “application-label-zh_CN:'”, , 假), -1)) ' 优先取中文名
    赋值 (应用名, 取文本之间 (str, “application-label:'”, “'”))
.否则
    赋值 (应用名, 取文本之间 (str, “application-label-zh_CN:'”, “'”))
.如果结束
赋值 (包名, 取文本之间 (str, “package: name='”, “'”))
赋值 (类名, 取文本之间 (str, “launchable-activity: name='”, “'”))
赋值 (图标文件, 取文本之间 (str, “ icon='”, “'”))


.子程序 取雷电共享目录, 文本型, , 取出雷电模拟器的共享目录，失败返回空文本。
.参数 索引, 整数型, , 模拟器索引，从0开始
.参数 目录类型, 整数型, 可空, 要修改的目录，默认是1，即Pictures目录，如果不理解，请保持默认。1.Pictures；2.Applications；3.Misc

.局部变量 配置文件, 文本型, , , 
.局部变量 文本内容, 文本型, , , 
.局部变量 局_JSON, 类_json_, , , 
.局部变量 属性名, 文本型, , "0", 

赋值 (配置文件, 相加 (目录_取特定目录 (8), “ChangZhi2\config\leidian”, 到文本 (索引), “.config”))
.如果真 (等于 (文件是否存在 (配置文件), 假))
    返回 (“”)
.如果真结束
赋值 (文本内容, 编码_Utf8到Ansi (读入文件 (配置文件)))
赋值 (文本内容, 子文本替换 (文本内容, “.”, “_”, , , 真))
.如果真 (不等于 (局_JSON.解析文本 (文本内容, 真, 真), 0))
    返回 (“”)
.如果真结束
.如果真 (或者 (是否为空 (目录类型), 小于 (目录类型, 1), 大于 (目录类型, 3)))
    赋值 (目录类型, 1)
.如果真结束
.如果真 (等于 (目录类型, 1))
    返回 (局_JSON.取项目值 (“statusSettings_sharedPictures”))
.如果真结束
.如果真 (等于 (目录类型, 2))
    返回 (局_JSON.取项目值 (“statusSettings_sharedApplications”))
.如果真结束
.如果真 (等于 (目录类型, 3))
    返回 (局_JSON.取项目值 (“statusSettings_sharedMisc”))
.如果真结束
返回 (“”)

.子程序 置雷电共享目录, 逻辑型, , 设置雷电模拟器的共享目录，重启后生效。
.参数 索引, 整数型, , 模拟器索引，从0开始
.参数 新的目录, 文本型, , 要设置的新目录。
.参数 目录类型, 整数型, 可空, 要修改的目录，默认是1，即Pictures目录，如果不理解，请保持默认。1.Pictures；2.Applications；3.Misc

.局部变量 配置文件, 文本型, , , 
.局部变量 文本内容, 文本型, , , 
.局部变量 局_JSON, 类_json_, , , 
.局部变量 属性名, 文本型, , , 
.局部变量 格式化, 类_格式化JSON, , , 

赋值 (配置文件, 相加 (目录_取特定目录 (8), “ChangZhi2\config\leidian”, 到文本 (索引), “.config”))
赋值 (新的目录, 子文本替换 (新的目录, “\”, “/”, , , 真))
.如果真 (等于 (文件是否存在 (配置文件), 假))
    返回 (假)
.如果真结束
赋值 (文本内容, 编码_Utf8到Ansi (读入文件 (配置文件)))
赋值 (文本内容, 子文本替换 (文本内容, “.”, “_”, , , 真))
.如果真 (不等于 (局_JSON.解析文本 (文本内容, 真, 真), 0))
    返回 (假)
.如果真结束
.如果真 (或者 (是否为空 (目录类型), 小于 (目录类型, 1), 大于 (目录类型, 3)))
    赋值 (目录类型, 1)
.如果真结束
.如果真 (等于 (目录类型, 1))
    赋值 (属性名, “statusSettings_sharedPictures”)
.如果真结束
.如果真 (等于 (目录类型, 2))
    赋值 (属性名, “statusSettings_sharedApplications”)
.如果真结束
.如果真 (等于 (目录类型, 3))
    赋值 (属性名, “statusSettings_sharedMisc”)
.如果真结束
.如果真 (等于 (局_JSON.取项目值 (属性名), “”)) ' 项目如果不存在，则创建一个
    局_JSON.插入成员项目 (0, , 属性名)
.如果真结束

 ' 修改目录
局_JSON.置项目值 (属性名, , 新的目录)

局_JSON.取项目数据文本 (文本内容)
赋值 (文本内容, 子文本替换 (文本内容, “_”, “.”, , , 真))
格式化.加入文本 (文本内容)
赋值 (文本内容, 格式化.取结果文本 ())
返回 (写到文件 (配置文件, 编码_Ansi到Utf8 (文本内容))) ' 写出文件，收工！


.类模块 雷电adb操作, , , 

.程序集变量 连接方式, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (雷电安装路径, 取安装目录 ())


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 初始化, 逻辑型, , 分析当前模拟器的adb连接方式，不是必须执行，但建议脚本中至少执行一次。成功返回真，失败返回假。  ！不再需要初始化！
.参数 路径, 文本型, , 雷电模拟器的安装路径，例如：“E:\模拟器\dnplayer2\”
.参数 强制初始化, 逻辑型, 可空, 真=如果ADB端口被占用，强制结束目标进程，继续初始化。假=忽略端口占用。默认假。可空。

.局部变量 返回文本, 文本型, , , 
.局部变量 进程名, 文本型, , , 
.局部变量 进程ID, 整数型, , , 
.局部变量 连接类型, 文本型, , , 
.局部变量 是否循环, 逻辑型, , , 
.局部变量 结果, 逻辑型, , , 

赋值 (雷电安装路径, 路径)
.如果真 (等于 (文件是否存在 (相加 (雷电安装路径, “adb.exe”)), 假))
    调试输出 (“路径错误，初始化失败！”, 路径)
    返回 (假)
.如果真结束

.循环判断首 ()
    赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe devices”)))
    .如果 (不等于 (寻找文本 (返回文本, “adb.exe nodaemon server”, , 假), -1)) ' adb启动失败
        取DOS返回 (相加 (雷电安装路径, “adb.exe kill-server”))
        赋值 (进程ID, 取端口进程 (5037))
        .如果真 (大于 (进程ID, 0))
            赋值 (进程名, 进程_ID取进程名 (进程ID))
            .如果 (等于 (强制初始化, 真))
                结束进程 (进程ID)
                赋值 (是否循环, 真)
                调试输出 (“结束ADB冲突”, 相加 (“进程：”, 进程名), 进程ID)
            .否则
                赋值 (是否循环, 假)
                调试输出 (“发现ADB冲突”, 相加 (“进程：”, 进程名), 进程ID)
            .如果结束
            
        .如果真结束
        
    .否则
        .如果真 (不等于 (寻找文本 (返回文本, “127.0.0.1”, , 假), -1))
            赋值 (连接类型, “127.0.0.1”)
            赋值 (连接方式, 0)
        .如果真结束
        .如果真 (大于或等于 (寻找文本 (返回文本, “emulator-”, , 假), 0))
            赋值 (连接类型, “emulator”)
            赋值 (连接方式, 1)
        .如果真结束
        
        .如果 (等于 (连接类型, “”))
            调试输出 (“初始化失败！”, “请先启动模拟器。”)
            赋值 (结果, 假)
        .否则
            调试输出 (“初始化成功！”, 相加 (“连接方式：”, 连接类型))
            赋值 (结果, 真)
        .如果结束
        赋值 (是否循环, 假)
    .如果结束
    
.循环判断尾 (等于 (是否循环, 真))
返回 (结果)


.子程序 重启adb服务, 空白型, , 谨慎使用，可能会导致adb异常！
.局部变量 进程ID, 整数型, , , 
.局部变量 进程名, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “adb.exe kill-server”))
.循环判断首 ()
    赋值 (进程ID, 取端口进程 (5037))
    赋值 (进程名, 进程_ID取进程名 (进程ID))
    .如果 (大于 (进程ID, 0))
        结束进程 (进程ID)
    .否则
        跳出循环 ()
    .如果结束
    
.循环判断尾 (并且 (大于 (进程ID, 0), 不等于 (进程名, “”)))
取DOS返回 (相加 (雷电安装路径, “adb.exe start-server”))

.子程序 取连接端口, 文本型, , 模拟器启动后，可以取出连接端口。模拟器未启动，或者失败返回空文本；成功返回端口文本，例如：“-s 127.0.0.1:5555 ”、“-s emulator-5554 ”
.参数 索引, 整数型, , 模拟器索引（index），从0开始，第一个是0，第二个是1，以此类推。

.局部变量 返回文本, 文本型, , , 
.局部变量 端口文本, 文本型, , , 
.局部变量 端口号, 整数型, , , 
.局部变量 连接状态, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (雷电adb端口 [相加 (索引, 1)], “”))
    赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe devices”)))
    赋值 (端口号, 相加 (5554, 相乘 (索引, 2)))
    .如果真 (不等于 (寻找文本 (返回文本, 到文本 (端口号), , 假), -1))
        赋值 (连接状态, 子文本替换 (子文本替换 (取文本之间 (返回文本, 到文本 (端口号), #换行符), “ ”, , , , 真), 字符 (#Tab键), , , , 真))
        .如果真 (等于 (连接状态, “device”))
            赋值 (端口文本, 相加 (“-s emulator-”, 到文本 (端口号), “ ”))
            赋值 (雷电adb端口 [相加 (索引, 1)], 端口文本)
            返回 (端口文本)
        .如果真结束
        
    .如果真结束
    赋值 (端口号, 相加 (5555, 相乘 (索引, 2)))
    .如果真 (不等于 (寻找文本 (返回文本, 到文本 (端口号), , 假), -1))
        赋值 (连接状态, 子文本替换 (子文本替换 (取文本之间 (返回文本, 到文本 (端口号), #换行符), “ ”, , , , 真), 字符 (#Tab键), , , , 真))
        .如果真 (等于 (连接状态, “device”))
            赋值 (端口文本, 相加 (“-s 127.0.0.1:”, 到文本 (端口号), “ ”))
            赋值 (雷电adb端口 [相加 (索引, 1)], 端口文本)
            返回 (端口文本)
        .如果真结束
        
    .如果真结束
    调试输出 (“获取adb端口失败，模拟器未运行，或adb异常。”, 相加 (“索引：”, 到文本 (索引)))
    返回 (“”)
.否则
    返回 (雷电adb端口 [相加 (索引, 1)])
.如果结束


.子程序 安装应用, 空白型, , 将电脑中的apk安装到模拟器。因雷电附带的adb版本较低，文件名不能包含中文。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , apk安装包的完整路径，比如：C:\Users\Administrator\Documents\test.apk
.参数 保留应用数据, 逻辑型, 可空, 为真时，重新安装应用，且保留应用数据；默认为假，即全新安装。

.局部变量 返回文本, 文本型, , , 
.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (保留应用数据)
    赋值 (参数, “-r ”)
.如果真结束
赋值 (文件名, 文件_到短文件名 (文件名))
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “install ”, 参数, #引号, 文件名, #引号)))
调试输出 (相加 (“安装应用：”, 文件名), 返回文本)

.子程序 安装系统应用, 空白型, , 将电脑中的apk安装为模拟器的系统应用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , apk安装包的完整路径，比如：C:\Users\Administrator\Documents\test.apk

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (文件名, 文件_到短文件名 (文件名))
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “push ”, #引号, 文件名, #引号, “ /system/app”)))
调试输出 (相加 (“安装应用：”, 文件名), 返回文本)

.子程序 安装应用_内部, 空白型, , 安装模拟器内部的apk
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , apk安装包的完整路径，比如： /data/local/tmp/test.apk
.参数 是否重装, 逻辑型, 可空, 为真时，重新安装应用，且保留应用数据；默认为假，即全新安装。

.局部变量 返回, 文本型, , , 
.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (是否重装, 真))
    赋值 (参数, “-r ”)
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm install ”, 参数, #引号, 文件名, #引号)))

.子程序 查看文件内容, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件路径, 文本型, , 如：/data/data/com.kimi.ggplay.qjmutw/shared_prefs/com.kimi.ggplay.qjmutw.xml

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (相加 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell cat ”, #引号, 文件路径, #引号)), “ exit”))

.子程序 发送文本, 空白型, , 向窗口输入指定文本内容 不支持中文
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文本内容, 文本型, , 要发送的字符，不支持中文。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell input text ”, #引号, 文本内容, #引号))

.子程序 关闭应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell am force-stop ”, 包名)))

.子程序 禁用应用, 空白型, , 只有系统应用才可以用，第三方应用不行
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 禁用, 逻辑型, , 假为不禁用，真为禁用

.局部变量 返回, 文本型, , , 
.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (禁用, 真))
    赋值 (参数, “ enable ”)
.否则
    赋值 (参数, “ disable ”)
.如果结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm”, 参数, 包名)))

.子程序 枚举包名, 文本型, , 枚举所有的已经安装的应用的包名，如果设置了过滤器返回过滤后的内容
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤器, 整数型, 可空, 留空或者为0，枚举所有包名；1，显示每个包的文件位置；2，只显示禁用的应用的包名；3，只显示可用的应用的包名；4，只显示系统应用的包名；5，只显示第三方应用的包名；6，查看应用的安装者。

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (过滤器, 0))
    赋值 (参数, “”)
.如果真结束
.如果真 (等于 (过滤器, 1))
    赋值 (参数, “ -f”)
.如果真结束
.如果真 (等于 (过滤器, 2))
    赋值 (参数, “ -d”)
.如果真结束
.如果真 (等于 (过滤器, 3))
    赋值 (参数, “ -e”)
.如果真结束
.如果真 (等于 (过滤器, 4))
    赋值 (参数, “ -s”)
.如果真结束
.如果真 (等于 (过滤器, 5))
    赋值 (参数, “ -3”)
.如果真结束
.如果真 (等于 (过滤器, 6))
    赋值 (参数, “ -i”)
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm list packages”, 参数)))

.子程序 枚举目录文件, 文本型, , 返回指定路径中包含的子目录和文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 路径, 文本型, , 如：/data/data/

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell ls ”, #引号, 路径, #引号)))

.子程序 批量安装应用, 空白型, , 指定一个目录，批量安装目录中的所有apk应用包
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 安装包目录, 文本型, , 电脑中存放apk的目录

.局部变量 分割, 文本型, , "0", 
.局部变量 总数, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (总数, 文件枚举 (安装包目录, “*.apk”, 分割, 真))
.计次循环首 (总数, i)
    调试输出 (相加 (到文本 (i), “/”, 到文本 (总数)), “ 正在安装文件”, 分割 [i])
    安装应用 (索引, 分割 [i])
.计次循环尾 ()

.子程序 启动应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , app的包名
.参数 类名, 文本型, , app的类名

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

 ' 返回桌面可以这样： 启动应用 (索引, “com.android.launcher”, “com.android.launcher2.Launcher”)
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell am start -n ”, 包名, “/”, 类名)))
调试输出 (返回文本)

.子程序 清除应用缓存, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm clear ”, 包名)))
调试输出 (返回文本)

.子程序 取apk路径, 文本型, , 取指定包名的apk路径
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm list instrumentation ”, 包名)))

.子程序 取IMEI, 文本型, , 返回手机IMEI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.imei”)), #换行符, “”, , , 真))

.子程序 取IMSI, 文本型, , 返回手机IMSI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.imsi”)), #换行符, “”, , , 真))

.子程序 取MAC, 文本型, , 返回手机网卡MAC地址
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

 ' 返回 (子文本替换 (取DOS返回 (雷电安装路径 ＋ “adb.exe ” ＋ 取连接端口 (索引) ＋ “shell getprop dhcp.eth0.mac”), #换行符, “”, , , 真))
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell cat /sys/class/net/eth0/address”)), #换行符, “”, , , 真))


.子程序 取IP, 文本型, , 返回手机IP和子网掩码，返回格式“192.168.0.100,255.255.255.0”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop dhcp.eth0.ipaddress”, #引号)), #换行符, “”, , , 真))


.子程序 取子网掩码, 文本型, , 返回模拟器网关
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop dhcp.eth0.mask”, #引号)), #换行符, “”, , , 真))

.子程序 取网关, 文本型, , 返回模拟器网关
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop dhcp.eth0.gateway”, #引号)), #换行符, “”, , , 真))

.子程序 取DNS, 文本型, , 返回手机DNS1和DNS2，格式：“DNS1,DNS2”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 文本1, 文本型, , , 
.局部变量 文本2, 文本型, , , 
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (文本1, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop dhcp.eth0.dns1”)))
赋值 (文本2, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop dhcp.eth0.dns2”)))
赋值 (返回文本, 相加 (文本1, “,”, 文本2))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 取SIM序号, 文本型, , 返回手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.simserial”)), #换行符, “”, , , 真))

.子程序 取安卓ID, 文本型, , 返回设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.androidid”)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell settings get secure android_id”)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 1))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.phone.androidid”)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取进程ID, 整数型, , 存在返回进程ID 否则 返回0
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 如：com.kimi.ggplay.qjmutw

.局部变量 返回文本, 文本型, , , 
.局部变量 分割, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 单分, 文本型, , "0", 
.局部变量 s, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell ps”)))
.如果 (等于 (寻找文本 (返回文本, 包名, 1, 假), -1))
    返回 (0)
.否则
    赋值 (分割, 分割文本 (返回文本, #换行符, ))
    .计次循环首 (取数组成员数 (分割), i)
        .如果真 (大于 (寻找文本 (分割 [i], 包名, 1, 假), 0))
            赋值 (单分, 分割文本 (分割 [i], “ ”, ))
            .计次循环首 (取数组成员数 (单分), s)
                .如果真 (大于 (到整数 (单分 [s]), 0))
                    返回 (到整数 (单分 [s]))
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
.如果结束
返回 (0)

.子程序 取进程列表, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell ps”)))

.子程序 取手机厂商, 文本型, , 返回手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.product.manufacturer”)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.manufacturer”)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 1))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.product.manufacturer”)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取手机型号, 文本型, , 返回手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.product.model”)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.model”)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 1))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.product.model”)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取手机号码, 文本型, , 返回手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.number”)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.linenum”)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 1))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.number”)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop phone.linenum”)), #换行符, “”, , , 真))

.子程序 删除文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell rm ”, #引号, 模拟器文件路径, #引号))

.子程序 删除文件夹, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell rm -r ”, #引号, 模拟器文件路径, #引号)))
调试输出 (返回)

.子程序 上传文件, 空白型, , 将电脑中的文件，上传到模拟器中
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 本机路径, 文本型, , 如："c:111.txt"
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “push ”, #引号, 文件_到短文件名 (本机路径), #引号, “ ”, #引号, 模拟器文件路径, #引号)))
调试输出 (返回)

.子程序 鼠标拖动, 空白型, , 模拟鼠标从第一点按下，拖动到第二点，再放开。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x1, 整数型, , 第一点x坐标
.参数 y1, 整数型, , 第一点y坐标
.参数 x2, 整数型, , 第二点x坐标
.参数 y2, 整数型, , 第二点y坐标
.参数 时间, 整数型, , 鼠标拖动的时间（单位毫秒）

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell input swipe ”, 到文本 (x1), “ ”, 到文本 (y1), “ ”, 到文本 (x2), “ ”, 到文本 (y2), “ ”, 到文本 (时间)), , )

.子程序 鼠标点击, 空白型, , 模拟鼠标点击
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x, 整数型, , 
.参数 y, 整数型, , 


.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell input tap ”, 到文本 (x), “ ”, 到文本 (y)))

.子程序 按键点击, 空白型, , 模拟按键点击。例如：按键点击 (0,“KEYCODE_HOME”)，也可以：按键点击 (0,“3”)，两种方式都是按下HOME键
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 键值, 文本型, , 这里是安卓中的键值，不同于易语言的键代码，详情请参考：http://bbs.ldmnq.com/forum.php?mod=viewthread&tid=10061

按键点击 (0, “KEYCODE_HOME”)
按键点击 (0, “3”)
.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell input keyevent ”, 键值))

.子程序 下载文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....
.参数 本机路径, 文本型, , 如："c:111.txt"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “pull ”, #引号, 模拟器文件路径, #引号, “ ”, #引号, 本机路径, #引号))

.子程序 卸载应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 是否保留数据, 逻辑型, 可空, 为真则不删除程序运行所产生的数据和缓存目录(如软件的数据库文件)；为假或者留空，则全部删除。

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (是否保留数据, 真))
    赋值 (参数, “-k ”)
.如果真结束
取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “uninstall ”, 参数, 包名))

.子程序 隐藏应用, 空白型, , 被隐藏应用在应用管理中变得不可见，桌面图标也会消失。此命令雷电无效，雷电用户可以考虑 禁止应用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 隐藏, 逻辑型, , 假为显示，真为隐藏

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (隐藏, 真))
    赋值 (参数, “ hide ”)
.否则
    赋值 (参数, “ unhide ”)
.如果结束
取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell pm”, 参数, 包名))

.子程序 置IMEI, 文本型, , 设置手机IMEI信息。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMEI, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.imei ”, IMEI)))

.子程序 置IMSI, 文本型, , 设置手机IMSI信息。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMSI, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.imsi ”, IMSI)))

.子程序 置MAC_无效, 文本型, , 设置手机网卡MAC地址。成功返回空文本，失败返回错误信息。MAC地址暂时无法动态修改。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 MAC, 文本型, , “auto”为随机MAC

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (MAC, “auto”))
    赋值 (MAC, 取随机MAC (“:”))
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop dhcp.eth0.mac ”, MAC)))

.子程序 置IP, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IP地址, 文本型, , 例如：“192.168.0.180”
.参数 子网掩码, 文本型, , 例如：“255.255.255.0”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell ifconfig eth0 ”, IP地址, “ netmask ”, 子网掩码)))

.子程序 置网关, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网关IP, 文本型, , 例如：“192.168.0.1”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell route add default gw ”, 网关IP, “ dev eth0”)))

.子程序 置DNS, 空白型, , 设置手机网卡DNS
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DNS1, 文本型, , 例如：“8.8.8.8”
.参数 DNS2, 文本型, , 例如：“8.8.8.8”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop dhcp.eth0.dns1 ”, DNS1))
取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop dhcp.eth0.dns2 ”, DNS2))

.子程序 置SIM序号, 空白型, , 设置手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 SIM序号, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.simserial ”, SIM序号))

.子程序 置安卓ID, 空白型, , 设置设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 安卓ID, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.androidid ”, 安卓ID)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell settings put secure android_id ”, 安卓ID)) ' 旧属性格式
.如果结束


.子程序 置手机厂商, 空白型, , 设置手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机厂商, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop ro.product.manufacturer ”, #引号, 手机厂商, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.manufacturer ”, #引号, 手机厂商, #引号)) ' 旧属性格式
.如果结束


.子程序 置手机型号, 空白型, , 设置手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机型号, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop ro.product.model ”, #引号, 手机型号, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.model ”, #引号, 手机型号, #引号)) ' 旧属性格式
.如果结束


.子程序 置手机号码, 空白型, , 设置手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机号码, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.number ”, 手机号码)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell setprop phone.linenum ”, 手机号码)) ' 旧属性格式
.如果结束


.子程序 终止进程, 逻辑型, , 结束模拟器中的进程
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 进程ID, 整数型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (小于或等于 (进程ID, 0))
    返回 (假)
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell kill ”, 到文本 (进程ID))))
.如果真 (大于 (寻找文本 (返回文本, “device not found”, 1, 假), 0)) ' 设备不存在
    返回 (假)
.如果真结束
.如果真 (大于 (寻找文本 (返回文本, “NO”, 1, 假), 0)) ' 没有这个进程
    返回 (假)
.如果真结束
返回 (真)

.子程序 重启安卓, 空白型, , 重启之后，需要重新初始化，才能继续试用adb命令。重启后，窗口句柄不变，大漠插件甚至无需重新绑定，都可以正常工作。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “reboot”))

.子程序 进入目录, 空白型, , 其实就是命令行中的“cd”，相当于易语言中的“改变目录()”，不过这里进入的目录是模拟器中的目录。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 路径, 文本型, , 模拟器中的目录路径，例如： "/data/local/tmp"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “cd ”, #引号, 路径, #引号))

.子程序 复制文件, 空白型, , 模拟器内部的文件复制
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被复制的文件名, 文本型, , 模拟器中的路径
.参数 复制到的文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “cp ”, #引号, 被复制的文件名, #引号, “ ”, #引号, 复制到的文件名, #引号))

.子程序 移动文件, 空白型, , 同一个目录下的移动，可以当成重命名来用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被移动的文件, 文本型, , 模拟器中的路径
.参数 移动到的位置, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “mv ”, #引号, 被移动的文件, #引号, “ ”, #引号, 移动到的位置, #引号))

.子程序 修改权限, 空白型, , 为文件或目录赋权限
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 权限, 文本型, , 常用的文件权限有：444、600、644、666、700、744、755、777
.参数 文件名, 文本型, , 被修改权限的文件或者目录

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “chmod ”, 权限, “ ”, #引号, 文件名, #引号))

.子程序 写入文件, 空白型, , 如果文件不存在创建并写入
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 要写入的内容, 文本型, , 
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “echo ”, #引号, 要写入的内容, #引号, “ ”, #引号, 文件名, #引号))

.子程序 创建文件, 空白型, , 创建一个空文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “touch ”, #引号, 文件名, #引号))

.子程序 创建目录, 空白型, , 创建一个空目录
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 目录名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “mkdir ”, #引号, 目录名, #引号))

.子程序 取安卓版本, 文本型, , 返回当前的安卓系统版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell getprop ro.build.version.release”)))

.子程序 取分辨率, 文本型, , 返回当前的屏幕分辨率，格式为：1280x720
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell wm size”)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical size: ”, “”, , , 真))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 置分辨率, 空白型, , 这里只是修改分辨率，模拟器的窗口大小，并不会改变。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 分辨率, 文本型, , 格式为“1280x720”；恢复原来的分辨率，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell wm size ”, 分辨率))

.子程序 取DPI, 文本型, , 返回当前的屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell wm density”)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical density: ”, “”, , , 真))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 置DPI, 空白型, , 设置屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DPI, 文本型, , 如果要恢复原来的DPI，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell wm size ”, DPI))

.子程序 应用是否启动, 逻辑型, , 判断引用是否已经启动，已启动返回真，否则返回假
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

 ' 此命令是通过查看内存的方式来进行判断
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell dumpsys meminfo ”, 包名)))
.如果 (等于 (寻找文本 (返回文本, “No process found for”, , 假), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 取服务端口, 整数型, , 返回当前adb服务端口（默认是5037）。成功返回端口号，失败返回0。
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe nodaemon server”)))
赋值 (返回文本, 取文本之间 (返回文本, “tcp:”, “'”))
返回 (到整数 (返回文本))

.子程序 修改服务端口, 逻辑型, , 修改adb服务端口（默认是5037）。注：修改后需要重新初始化，才能继续使用adb
.参数 端口号, 整数型, , 1-65535 之间任意数字，最好取大一点的数字，避免冲突

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (并且 (大于或等于 (端口号, 1), 小于或等于 (端口号, 65535)))
    返回 (写环境变量 (“ANDROID_ADB_SERVER_PORT”, 到文本 (端口号)))
.否则
    返回 (假)
.如果结束


.子程序 读任务栈, 文本型, , 读出模拟器中的任务栈信息（activity）。 根据 过滤类型 取值不同，可以返回不同的信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤类型, 整数型, , 0 = 全部activity信息，也就是“adb.exe shell dumpsys activity”所返回的内容。1 = 运行中的任务栈（Running activities）。2 = 顶栈任务栈（mFocusedActivity）。

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell dumpsys activity”), 5000))
.如果真 (等于 (过滤类型, 1))
    赋值 (返回文本, 取文本之间 (返回文本, “Running activities (most recent first):”, “mResumedActivity:”))
    赋值 (返回文本, 删首尾空 (返回文本))
.如果真结束
.如果真 (等于 (过滤类型, 2))
    赋值 (返回文本, 相加 (“mFocusedActivity: ”, 取文本之间 (返回文本, “mFocusedActivity: ”, #换行符)))
.如果真结束
返回 (返回文本)


.子程序 查看内存占用, 文本型, , 返回应用的详细内存占用信息，如果应用未启动，则返回“No process found for: 包名”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 安卓APP的包名。雷电桌面的包名为“com.android.launcher”

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “shell dumpsys meminfo ”, 包名), 5000))
返回 (返回文本)

.子程序 是否已连接, 文本型, , 判断adb与模拟器的连接状态。device：设备正常连接；offline：连接出现异常，设备无响应；unknown：没有连接设备
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “ get-state”), 5000))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 浏览网页, 文本型, , 判断adb与模拟器的连接状态。device：设备正常连接；offline：连接出现异常，设备无响应；unknown：没有连接设备
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网址, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “adb.exe ”, 取连接端口 (索引), “ shell am start -a android.intent.action.VIEW -d ”, 网址), 5000))
返回 (返回文本)

.子程序 应用是否已安装, 逻辑型, , 
.参数 索引, 整数型, , 
.参数 包名, 文本型, , 

.局部变量 包名组, 字节集, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 过滤参数, 整数型, , , 
.局部变量 返回值, 逻辑型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (包名组, 分割字节集 (到字节集 (枚举包名 (索引)), { 13, 13, 10 }, ))
赋值 (包名, 相加 (“package:”, 包名))
赋值 (返回值, 假)
.计次循环首 (取数组成员数 (包名组), 计次)
    .如果真 (等于 (包名组 [计次], 到字节集 (包名)))
        赋值 (返回值, 真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (返回值)


.类模块 雷电dnconsole操作, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (雷电安装路径, 取安装目录 ())


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 启动模拟器, 空白型, , 
.参数 索引, 整数型, , 模拟器索引，第一个模拟器是0，第二个模拟器是1，以此类推
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe launch --index ”, 到文本 (索引)), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE launch --index ”, 到文本 (索引)), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe launch --index ”, 到文本 (索引)), 真, 1)
.如果真结束
赋值 (雷电adb端口 [相加 (索引, 1)], “”)

.子程序 关闭模拟器, 空白型, , 
.参数 索引, 整数型, , 模拟器索引，第一个模拟器是0，第二个模拟器是1，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE quit --index ”, 到文本 (索引)))
赋值 (雷电adb端口 [相加 (索引, 1)], “”)

.子程序 关闭所有模拟器, 空白型, , 
.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE quitall”))
数组清零 (雷电adb端口)

.子程序 修改配置, 空白型, , 修改模拟器的各种信息，如分辨率、CPU、内存、各种手机信息等等。修改后，重启模拟器生效，可以在启动模拟器之前修改
.参数 索引, 整数型, 可空, 需要修改的模拟器编号  默认是0
.参数 分辨率_宽, 文本型, 可空, 设置分辨率宽度。宽、高、DPI 3个参数都填，才能修改，其中任意一项留空，则不修改
.参数 分辨率_高, 文本型, 可空, 设置分辨率高度。宽、高、DPI 3个参数都填，才能修改，其中任意一项留空，则不修改
.参数 DPI, 文本型, 可空, 设置分辨率DPI。宽、高、DPI 3个参数都填，才能修改，其中任意一项留空，则不修改
.参数 CPU, 文本型, 可空, 设置CPU大小 <1 | 2 | 3 | 4>。如留空，则不修改
.参数 内存, 文本型, 可空, 设置内存大小 <256 | 512 | 768 | 1024 | 1536 | 2048 | 4096 | 8192>。如留空，则不修改
.参数 手机型号, 文本型, 可空, 设置手机型号。如留空，则不修改
.参数 手机号码, 文本型, 可空, 设置手机号码。如留空，则不修改
.参数 手机厂商, 文本型, 可空, 设置手机厂商。如留空，则不修改
.参数 IMEI, 文本型, 可空, 设置手机imei，auto：随机生成。如留空，则不修改
.参数 IMSI, 文本型, 可空, 设置手机imsi，auto：随机生成。如留空，则不修改
.参数 SIM序号, 文本型, 可空, 设置手机SIM卡的序列号，auto：随机生成。如留空，则不修改
.参数 自动旋转, 文本型, 可空, 设置模拟器开启自动旋转。 0：自动旋转，1：不自动旋转，如留空，则不修改
.参数 固定窗口大小, 文本型, 可空, 设置锁定模拟器窗口大小。 0：窗口大小可以调整；1：锁定窗口大小，不可手动调整。如留空，则不修改
.参数 安卓ID, 文本型, 可空, 设置安卓ID（androidid）。auto：随机生成。如留空，则不修改。
.参数 MAC, 文本型, 可空, 设置网卡MAC地址。auto：随机生成。如留空，则不修改。

.局部变量 命令文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (小于 (索引, 0))
    赋值 (索引, 0)
.如果真结束
赋值 (命令文本, 相加 (雷电安装路径, “DNCONS~1.EXE”, “ modify --index ”, 到文本 (索引)))
.如果真 (并且 (不等于 (分辨率_宽, “”), 不等于 (分辨率_高, “”), 不等于 (DPI, “”)))
    赋值 (命令文本, 相加 (命令文本, “ --resolution ”, 分辨率_宽, “,”, 分辨率_高, “,”, DPI))
.如果真结束
.如果真 (不等于 (CPU, “”))
    赋值 (命令文本, 相加 (命令文本, “ --cpu ”, CPU))
.如果真结束
.如果真 (不等于 (内存, “”))
    赋值 (命令文本, 相加 (命令文本, “ --memory ”, 内存))
.如果真结束
.如果真 (不等于 (手机厂商, “”))
    赋值 (命令文本, 相加 (命令文本, “ --manufacturer ”, #引号, 手机厂商, #引号))
.如果真结束
.如果真 (不等于 (手机型号, “”))
    赋值 (命令文本, 相加 (命令文本, “ --model ”, #引号, 手机型号, #引号))
.如果真结束
.如果真 (不等于 (手机号码, “”))
    赋值 (命令文本, 相加 (命令文本, “ --pnumber ”, 手机号码))
.如果真结束
.如果真 (不等于 (IMEI, “”))
    赋值 (命令文本, 相加 (命令文本, “ --imei ”, IMEI))
.如果真结束
.如果真 (不等于 (IMSI, “”))
    赋值 (命令文本, 相加 (命令文本, “ --imsi ”, IMSI))
.如果真结束
.如果真 (不等于 (SIM序号, “”))
    赋值 (命令文本, 相加 (命令文本, “ --simserial ”, SIM序号))
.如果真结束
.如果真 (不等于 (安卓ID, “”))
    赋值 (命令文本, 相加 (命令文本, “ --androidid ”, 安卓ID))
.如果真结束
.如果真 (不等于 (MAC, “”))
    赋值 (命令文本, 相加 (命令文本, “ --mac ”, MAC))
.如果真结束
.如果真 (不等于 (自动旋转, “”))
    赋值 (命令文本, 相加 (命令文本, “ --autorotate ”, 自动旋转))
.如果真结束
.如果真 (不等于 (固定窗口大小, “”))
    赋值 (命令文本, 相加 (命令文本, “ --lockwindow ”, 固定窗口大小))
.如果真结束
取DOS返回 (命令文本)

.子程序 克隆模拟器, 空白型, , 复制一个模拟器
.参数 新名称, 文本型, , 新的模拟器标题。
.参数 源名称, 文本型, , 待克隆的模拟器标题。
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe copy --name ”, 新名称, “ --from ”, 源名称), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE copy --name ”, 新名称, “ --from ”, 源名称), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe copy --name ”, 新名称, “ --from ”, 源名称), 真, 1)
.如果真结束


.子程序 删除模拟器, 空白型, , 删除一个模拟器
.参数 索引, 整数型, , 需要删除的模拟器编号：第一个是0，第二个是1，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE remove --index ”, 到文本 (索引)))

.子程序 新建模拟器, 空白型, , 新建一个模拟器，可以指定新模拟器的名称
.参数 新名称, 文本型, 可空, 新的模拟器窗口标题。留空则按照雷电默认规则自动命名。

.局部变量 命令文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (命令文本, 相加 (雷电安装路径, “DNCONS~1.EXE add”))
.如果真 (不等于 (新名称, “”))
    赋值 (命令文本, 相加 (命令文本, “ --name ”, 新名称))
.如果真结束
取DOS返回 (命令文本)


.子程序 启动应用, 空白型, , 
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE runapp --index ”, 到文本 (索引), “ --packagename ”, 包名)))

.子程序 关闭应用, 空白型, , 
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE killapp --index ”, 到文本 (索引), “ --packagename ”, 包名)))

.子程序 修改定位, 空白型, , 需要1.6以上的模拟器版本
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 经度, 文本型, , 
.参数 纬度, 文本型, , 

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE locate --index ”, 到文本 (索引), “ --LLI ”, 经度, “,”, 纬度)))

.子程序 安装应用, 空白型, , 
.参数 索引, 整数型, 可空, 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 APK路径, 文本型, 可空, APK文件完整路径，当APK路径有数据时，忽略包名中的内容。
.参数 包名, 文本型, 可空, 安卓应用包名，当APK路径为空时，可自动从雷电游戏中心下载指定的包名应用并安装。(2.0.46及以上版本支持)

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (APK路径, “”))
    赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE installapp --index ”, 到文本 (索引), “ --packagename ”, #引号, 包名, #引号)))
.否则
    赋值 (APK路径, 文件_到短文件名 (APK路径))
    赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE installapp --index ”, 到文本 (索引), “ --filename ”, #引号, APK路径, #引号)))
.如果结束




.子程序 卸载应用, 空白型, , 
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 包名, 文本型, , APP包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE uninstallapp --index ”, 到文本 (索引), “ --packagename ”, 包名)))

.子程序 setprop, 空白型, , 此命令需要雷电模拟器1.7.0.10以上版本支持。
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 方法, 文本型, , key
.参数 参数, 文本型, , value

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, 方法, #引号, “ --value ”, #引号, 参数, #引号))

.子程序 getprop, 文本型, , 此命令需要雷电模拟器1.7.0.10以上版本支持。
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 方法, 文本型, , 

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, 方法, #引号)))

.子程序 adb, 文本型, , 通过DNCONS~1.EXE内置adb命令操作模拟器，免除多开时获取模拟器端口的烦恼，只需要指定模拟器索引即可。此命令需要1.8.6以上版本支持，无需执行adb初始化。
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 命令文本, 文本型, , adb的命令文本，例如："shell pm list packages"

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, 命令文本, #引号)))


.子程序 取全部标题, 整数型, , 返回模拟器总数，参数二存放一个文本型数组变量，记录全部模拟器的标题
.参数 标题组, 文本型, 参考 可空 数组, 存放标题的文本型数组变量

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE list”)))
清除数组 (标题组)
赋值 (标题组, 分割文本 (返回文本, #换行符, ))
返回 (取数组成员数 (标题组))

.子程序 取模拟器信息, 文本型, , 根据条件取出特定的模拟器信息，失败返回空文本。可以根据索引取标题，根据绑定句柄取进程ID，等等任意组合。如果有多个结果（例如标题、是否进入android），只返回第一个。需要模拟器版本2.0.31以上。
.参数 条件, 文本型, , 内容取决于 条件类型 的值
.参数 条件类型, 整数型, , 指定 条件 的类型。1=索引，2=标题，3=顶层窗口句柄，4=绑定窗口句柄，5=是否进入android，6=进程PID，7=VBox进程PID
.参数 结果类型, 整数型, , 指定返回值的类型。1=索引，2=标题，3=顶层窗口句柄，4=绑定窗口句柄，5=是否进入android，6=进程PID，7=VBox进程PID，0=全部信息，用“,”分割

.局部变量 全组, 文本型, , "0", 
.局部变量 分组, 文本型, , "0", 
.局部变量 数量, 整数型, , , 
.局部变量 计次, 整数型, , , 
.局部变量 结果, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (数量, 取全部模拟器 (全组))
.计次循环首 (数量, 计次)
    赋值 (分组, 分割文本 (全组 [计次], “,”, ))
    .如果真 (等于 (条件, 分组 [条件类型]))
        .如果 (等于 (结果类型, 0))
            赋值 (结果, 全组 [计次])
        .否则
            赋值 (结果, 分组 [结果类型])
        .如果结束
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (结果)

.子程序 取运行中模拟器, 整数型, , 返回当前正在运行中的所有模拟器标题，每个模拟器一行
.参数 标题组, 文本型, 参考 可空 数组, 存放标题的文本型数组变量

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE runninglist”)))
清除数组 (标题组)
赋值 (标题组, 分割文本 (返回文本, #换行符, ))
返回 (取数组成员数 (标题组))


.子程序 判断运行状态, 逻辑型, , 返回模拟器的运行状况。运行中返回真，否则返回假。
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 判断方式, 字节型, 可空, 提供两种判断方式。默认是0，通过早期的isrunning来判断，支持所有版本；1，通过list2来进行判断，需要2.0.31版本以上支持

.局部变量 文本, 文本型, , , 
.局部变量 数量, 文本型, , "0", 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (判断方式, 0))
    赋值 (文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE isrunning --index ”, 到文本 (索引))))
    .如果 (等于 (文本, “running”))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.否则
    赋值 (文本, 取模拟器信息 (到文本 (索引), 1, 3))
    .如果 (并且 (不等于 (文本, “0”), 不等于 (文本, “”)))
        返回 (真)
    .否则
        返回 (假)
    .如果结束
    
.如果结束



.子程序 降低CPU, 空白型, , 降低模拟器的CPU占用（需1.8.0.5以上版本支持）
.参数 索引, 整数型, , 模拟器的索引，第一个是0，第二个是1，以此类推...
.参数 数值, 整数型, , 取值范围0-99  取值为0 表示关闭CPU优化. 这个值越大表示降低CPU效果越好

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (或者 (小于 (数值, 0), 大于 (数值, 99)))
    调试输出 (“降低CPU失败，数值范围必须在0-99之间。”)
    返回 ()
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE downcpu --index ”, 到文本 (索引), “ --rate ”, 到文本 (数值)))

.子程序 取IMEI, 文本型, , 返回手机IMEI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.imei”, #引号)))

.子程序 取IMSI, 文本型, , 返回手机IMSI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop --index ”, 到文本 (索引), “ --key ”, #引号, “phone.imsi”, #引号)), #换行符, “”, , , 真))

.子程序 取MAC, 文本型, , 返回手机网卡MAC地址
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
 ' 返回 (子文本替换 (取DOS返回 (雷电安装路径 ＋ “DNCONS~1.EXE getprop --index ” ＋ 到文本 (索引) ＋ “ --key ” ＋ #引号 ＋ “dhcp.eth0.mac” ＋ #引号), #换行符, “”, , , 真))
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb --index ”, 到文本 (索引), “ --command ”, #引号, “shell cat /sys/class/net/eth0/address”, #引号)), #换行符, “”, , , 真))

.子程序 取IP, 文本型, , 返回手机IP和子网掩码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 
.局部变量 ip, 文本型, , , 
.局部变量 mask, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, adb (索引, “shell ifconfig eth0”))
赋值 (ip, 取文本之间 (返回文本, “ ip ”, “ ”))
赋值 (mask, 取文本之间 (返回文本, “ mask ”, “ ”))
.如果 (或者 (等于 (ip, “”), 等于 (mask, “”)))
    返回 (“”)
.否则
    返回 (相加 (ip, “,”, mask))
.如果结束


.子程序 取网关, 文本型, , 返回模拟器网关
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “dhcp.eth0.gateway”, #引号)), #换行符, “”, , , 真))


.子程序 取DNS, 文本型, , 返回手机DNS1和DNS2，格式：“DNS1,DNS2”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 文本1, 文本型, , , 
.局部变量 文本2, 文本型, , , 
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (文本1, getprop (索引, “dhcp.eth0.dns1”))
赋值 (文本2, getprop (索引, “dhcp.eth0.dns2”))
赋值 (返回文本, 相加 (文本1, “,”, 文本2))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 取SIM序号, 文本型, , 返回手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.simserial”, #引号)), #换行符, “”, , , 真))

.子程序 取手机厂商, 文本型, , 返回手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.manufacturer”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.manufacturer”, #引号)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 2))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.manufacturer”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取手机型号, 文本型, , 返回手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.model”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.model”, #引号)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 2))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.model”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取手机号码, 文本型, , 返回手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.number”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.linenum”, #引号)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 2))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.number”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)

.子程序 取安卓ID, 文本型, , 返回设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.androidid”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
.否则
    赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell settings get secure android_id”, #引号)), #换行符, “”, , , 真)) ' 旧属性格式
    .如果 (小于或等于 (取文本长度 (返回文本), 2))
        赋值 (返回文本, 子文本替换 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.androidid”, #引号)), #换行符, “”, , , 真)) ' 新属性格式
        赋值 (新属性格式, 真)
    .否则
        赋值 (新属性格式, 假)
    .如果结束
    
.如果结束
返回 (返回文本)


.子程序 取分辨率, 文本型, , 返回当前的屏幕分辨率，格式为：1280x720
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell wm size”, #引号)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical size: ”, “”, , , 真))
返回 (返回文本)

.子程序 取DPI, 文本型, , 返回当前的屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell wm density”, #引号)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical density: ”, “”, , , 真))
返回 (返回文本)

.子程序 置IMEI, 空白型, , 动态设置手机IMEI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMEI, 文本型, , "auto"为随机生成

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.imei”, #引号, “ --value ”, #引号, IMEI, #引号))

.子程序 置IMSI, 空白型, , 动态设置手机IMSI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMSI, 文本型, , "auto"为随机生成

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.imsi”, #引号, “ --value ”, #引号, IMSI, #引号))

.子程序 置MAC_无效, 空白型, , 动态设置手机网卡MAC地址。MAC地址暂时无法动态修改。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 MAC, 文本型, , "auto"为随机生成(注意：auto必须是小写英文)

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (MAC, “auto”))
    赋值 (MAC, 取随机MAC (“:”))
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “dhcp.eth0.mac”, #引号, “ --value ”, #引号, MAC, #引号))

.子程序 置IP, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IP地址, 文本型, , 例如：“192.168.0.180”
.参数 子网掩码, 文本型, , 例如：“255.255.255.0”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (adb (索引, 相加 (“shell ifconfig eth0 ”, IP地址, “ netmask ”, 子网掩码)))

.子程序 置网关, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网关IP地址, 文本型, , 例如：“192.168.0.1”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (adb (索引, 相加 (“shell route add default gw ”, 网关IP地址, “ dev eth0”)))

.子程序 置DNS, 空白型, , 设置手机网卡DNS
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DNS1, 文本型, , 例如：“8.8.8.8”
.参数 DNS2, 文本型, , 例如：“8.8.8.8”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
setprop (索引, “dhcp.eth0.dns1”, DNS1)
setprop (索引, “dhcp.eth0.dns2”, DNS2)

.子程序 置SIM序号, 空白型, , 动态设置手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 SIM序号, 文本型, , "auto"为随机生成

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.simserial”, #引号, “ --value ”, #引号, SIM序号, #引号))

.子程序 置安卓ID, 空白型, , 动态设置设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 安卓ID, 文本型, , "auto"为随机生成

.局部变量 临时数字, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (安卓ID, “auto”))
    置随机数种子 ()
    赋值 (安卓ID, 进制_十到十六 (_取随机数 (64)))
.如果真结束
.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.androidid”, #引号, “ --value ”, #引号, 安卓ID, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell settings put secure android_id ”, 安卓ID, #引号)) ' 旧属性格式
.如果结束


.子程序 置手机厂商, 空白型, , 动态设置手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机厂商, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.manufacturer”, #引号, “ --value ”, #引号, 手机厂商, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.manufacturer”, #引号, “ --value ”, #引号, 手机厂商, #引号)) ' 旧属性格式
.如果结束


.子程序 置手机型号, 空白型, , 动态设置手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机型号, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.product.model”, #引号, “ --value ”, #引号, 手机型号, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.model”, #引号, “ --value ”, #引号, 手机型号, #引号)) ' 旧属性格式
.如果结束


.子程序 置手机号码, 空白型, , 动态设置手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机号码, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (新属性格式, 真))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.number”, #引号, “ --value ”, #引号, 手机号码, #引号)) ' 新属性格式
.否则
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE setprop  --index ”, 到文本 (索引), “ --key ”, #引号, “phone.linenum”, #引号, “ --value ”, #引号, 手机号码, #引号)) ' 旧属性格式
.如果结束


.子程序 置分辨率, 空白型, , 动态修改分辨率，模拟器的窗口大小，并不会改变。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 分辨率, 文本型, , 格式为“1280x720”；恢复原来的分辨率，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell wm size ”, 分辨率, #引号))

.子程序 置DPI, 空白型, , 动态设置屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DPI, 文本型, , 如果要恢复原来的DPI，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell wm size ”, DPI, #引号))


.子程序 查看文件内容, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , 如：/data/data/com.kimi.ggplay.qjmutw/shared_prefs/com.kimi.ggplay.qjmutw.xml

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell cat ”, 文件名, #引号)))

.子程序 发送文本, 空白型, , 向窗口输入指定文本内容 支持中文，需要模拟器2.0.42以上支持，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文本内容, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
运行 (相加 (雷电安装路径, “dnconsole.exe action --index ”, 到文本 (索引), “ --key call.input --value ”, #引号, 文本内容, #引号), 假, 1)


.子程序 禁用应用, 空白型, , 只有系统应用才可以用，第三方应用不行
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 禁用, 逻辑型, , 假为启用，真为禁用

.局部变量 返回, 文本型, , , 
.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (等于 (禁用, 真))
    赋值 (参数, “ enable ”)
.否则
    赋值 (参数, “ disable ”)
.如果结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell pm”, 参数, 包名, #引号))

.子程序 枚举包名, 文本型, , 枚举所有的已经安装的应用的包名，如果设置了过滤器返回过滤后的内容
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤器, 整数型, 可空, 留空或者为0，枚举所有包名；1，显示每个包的文件位置；2，只显示禁用的应用的包名；3，只显示可用的应用的包名；4，只显示系统应用的包名；5，只显示第三方应用的包名；6，查看应用的安装者。

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (过滤器, 0))
    赋值 (参数, “”)
.如果真结束
.如果真 (等于 (过滤器, 1))
    赋值 (参数, “ -f”)
.如果真结束
.如果真 (等于 (过滤器, 2))
    赋值 (参数, “ -d”)
.如果真结束
.如果真 (等于 (过滤器, 3))
    赋值 (参数, “ -e”)
.如果真结束
.如果真 (等于 (过滤器, 4))
    赋值 (参数, “ -s”)
.如果真结束
.如果真 (等于 (过滤器, 5))
    赋值 (参数, “ -3”)
.如果真结束
.如果真 (等于 (过滤器, 6))
    赋值 (参数, “ -i”)
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell pm list packages”, 参数, #引号)))

.子程序 枚举目录文件, 文本型, , 返回指定模拟器路径中包含的子目录和文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器路径, 文本型, , 如：/data/data/

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell ls ”, 模拟器路径, #引号)))

.子程序 批量安装应用, 空白型, , 指定一个目录，批量安装目录中的所有apk应用包
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 安装包目录, 文本型, , 电脑中存放apk的目录

.局部变量 分割, 文本型, , "0", 
.局部变量 总数, 整数型, , , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (总数, 文件枚举 (安装包目录, “*.apk”, 分割, 真))
.计次循环首 (总数, i)
    调试输出 (相加 (到文本 (i), “/”, 到文本 (总数)), “ 正在安装文件”, 分割 [i])
    安装应用 (索引, 分割 [i])
.计次循环尾 ()

.子程序 清除应用缓存, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell pm clear ”, 包名, #引号)))

.子程序 取apk路径, 文本型, , 取指定包名的apk路径
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell pm list instrumentation ”, 包名, #引号)))

.子程序 取进程ID, 整数型, , 存在返回进程ID 否则 返回0
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 如：com.kimi.ggplay.qjmutw

.局部变量 返回文本, 文本型, , , 
.局部变量 分割, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 单分, 文本型, , "0", 
.局部变量 s, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell ps”, #引号)))
.如果 (等于 (寻找文本 (返回文本, 包名, 1, 假), -1))
    返回 (0)
.否则
    赋值 (分割, 分割文本 (返回文本, #换行符, ))
    .计次循环首 (取数组成员数 (分割), i)
        .如果真 (大于 (寻找文本 (分割 [i], 包名, 1, 假), 0))
            赋值 (单分, 分割文本 (分割 [i], “ ”, ))
            .计次循环首 (取数组成员数 (单分), s)
                .如果真 (大于 (到整数 (单分 [s]), 0))
                    返回 (到整数 (单分 [s]))
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
.如果结束
返回 (0)

.子程序 取进程列表, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell ps”, #引号)))

.子程序 删除文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell rm ”, 模拟器文件路径, #引号))

.子程序 删除文件夹, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell rm -r ”, 模拟器文件路径, #引号)))
调试输出 (返回)

.子程序 上传文件, 文本型, 公开, 将电脑中的文件，上传到模拟器中
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 本机路径, 文本型, , 如："c:111.txt"
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “push ”, 本机路径, “ ”, 模拟器文件路径, #引号)))
返回 (返回)

.子程序 鼠标拖动, 空白型, , 模拟鼠标从第一点拖动到第二点
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x1, 整数型, , 第一点x坐标
.参数 y1, 整数型, , 第一点y坐标
.参数 x2, 整数型, , 第二点x坐标
.参数 y2, 整数型, , 第二点y坐标
.参数 时间, 整数型, , 鼠标拖动的时间（单位毫秒）

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell input swipe ”, 到文本 (x1), “ ”, 到文本 (y1), “ ”, 到文本 (x2), “ ”, 到文本 (y2), “ ”, 到文本 (时间), #引号))

.子程序 鼠标点击, 空白型, , 模拟鼠标点击
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x, 整数型, , 
.参数 y, 整数型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell input tap ”, 到文本 (x), “ ”, 到文本 (y), #引号))

.子程序 按键点击, 空白型, , 模拟按键点击。例如：按键点击 (路径,0,“KEYCODE_HOME”)，也可以：按键点击 (路径,0,“3”)，两种方式都是按下HOME键
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 键值, 文本型, , 这里是安卓中的键值，不同于易语言的键代码，详情请参考：http://bbs.ldmnq.com/forum.php?mod=viewthread&tid=10061

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell input keyevent ”, 键值, #引号))

.子程序 下载文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....
.参数 本机路径, 文本型, , 如："c:\111.txt"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “pull ”, 模拟器文件路径, “ ”, 本机路径, #引号))

.子程序 终止进程, 逻辑型, , 结束模拟器中的进程
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 进程ID, 整数型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (小于或等于 (进程ID, 0))
    返回 (假)
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell kill ”, 到文本 (进程ID), #引号)))
.如果真 (大于 (寻找文本 (返回文本, “device not found”, 1, 假), 0)) ' 设备不存在
    返回 (假)
.如果真结束
.如果真 (大于 (寻找文本 (返回文本, “NO”, 1, 假), 0)) ' 没有这个进程
    返回 (假)
.如果真结束
返回 (真)

.子程序 重启安卓, 空白型, , 重启之后，需要重新初始化，才能继续试用adb命令。重启后，窗口句柄不变，大漠插件甚至无需重新绑定，都可以正常工作。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “reboot”, #引号))

.子程序 进入目录, 空白型, , 其实就是命令行中的“cd”，相当于易语言中的“改变目录()”，不过这里进入的目录是模拟器中的目录。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器目录, 文本型, , 模拟器中的目录路径，例如： "/data/local/tmp"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “cd ”, 模拟器目录, #引号))

.子程序 复制文件, 空白型, , 模拟器内部的文件复制
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被复制的文件名, 文本型, , 模拟器中的路径
.参数 复制到的文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “cp ”, 被复制的文件名, “ ”, 复制到的文件名, #引号))

.子程序 移动文件, 空白型, , 同一个目录下的移动，可以当成重命名来用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被移动的文件, 文本型, , 模拟器中的路径
.参数 移动到的位置, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “mv ”, 被移动的文件, “ ”, 移动到的位置, #引号))

.子程序 修改权限, 空白型, , 为文件或目录赋权限
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 权限, 整数型, , 常用的文件权限有：444、600、644、666、700、744、755、777
.参数 文件名, 文本型, , 被修改权限的文件或者目录

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “chmod ”, 到文本 (权限), “ ”, 文件名, #引号))

.子程序 写入文件, 空白型, , 如果文件不存在创建并写入
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 要写入的内容, 文本型, , 
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “echo ”, 要写入的内容, “ ”, 文件名, #引号))

.子程序 创建文件, 空白型, , 创建一个空文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “touch ”, 文件名, #引号))

.子程序 创建目录, 空白型, , 创建一个空目录
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 目录名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “mkdir ”, 目录名, #引号))

.子程序 取安卓版本, 文本型, , 返回当前的安卓系统版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE getprop  --index ”, 到文本 (索引), “ --key ”, #引号, “ro.build.version.release”, #引号)))

.子程序 应用是否启动, 逻辑型, , 判断引用是否已经启动，已启动返回真，否则返回假
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
 ' 此命令是通过查看内存的方式来进行判断
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell dumpsys meminfo ”, 包名, #引号)))
.如果 (近似等于 (返回文本, “No process found for”))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 读任务栈, 文本型, , 读出模拟器中的任务栈信息（activity）。 根据 过滤类型 取值不同，可以返回不同的信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤类型, 整数型, , 0 = 全部activity信息，也就是“adb shell dumpsys activity”所返回的内容。1 = 运行中的任务栈（Running activities）。2 = 顶栈任务栈（mFocusedActivity）。

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell dumpsys activity”, #引号), 10000)) ' 10秒超时
.如果真 (等于 (过滤类型, 1))
    赋值 (返回文本, 取文本之间 (返回文本, “Running activities (most recent first):”, “mResumedActivity:”))
    赋值 (返回文本, 删首尾空 (返回文本))
.如果真结束
.如果真 (等于 (过滤类型, 2))
    赋值 (返回文本, 相加 (“mFocusedActivity: ”, 取文本之间 (返回文本, “mFocusedActivity: ”, #换行符)))
.如果真结束
返回 (返回文本)

.子程序 查看内存占用, 文本型, , 返回应用的详细内存占用信息，如果应用未启动，则返回“No process found for: 包名”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 安卓APP的包名。雷电桌面的包名为“com.android.launcher”

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE adb  --index ”, 到文本 (索引), “ --command ”, #引号, “shell dumpsys meminfo ”, 包名, #引号)))
返回 (返回文本)

.子程序 重启模拟器, 空白型, , 重启雷电模拟器。此命令需要2.0.31以上的模拟器版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe reboot --index ”, 到文本 (索引)), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE reboot --index ”, 到文本 (索引)), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe reboot --index ”, 到文本 (索引)), 真, 1)
.如果真结束
赋值 (雷电adb端口 [相加 (索引, 1)], “”)

.子程序 取全部模拟器, 整数型, , 返回模拟器总数，参数二存放一个文本型数组变量，记录全部模拟器的 索引、标题、顶层窗口句柄、绑定窗口句柄、是否进入android、进程PID、VBox进程PID。此命令需要2.0.31以上的模拟器版本
.参数 详细信息, 文本型, 参考 可空 数组, 存放数据的文本型数组变量

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE list2”), ))
.如果 (不等于 (寻找文本 (返回文本, “dnplayer Command Line Management Interface”, , 假), -1))
    调试输出 (“当前模拟器不支持 list2 命令，请到雷电官网更新模拟器！”)
    清除数组 (详细信息)
.否则
    赋值 (详细信息, 分割文本 (返回文本, #换行符, ))
.如果结束
返回 (取数组成员数 (详细信息))

.子程序 修改标题, 空白型, , 修改模拟器标题。此命令需要2.0.33以上的模拟器版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 新标题, 文本型, , 新的模拟器标题

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE rename --index ”, 到文本 (索引), “ --title ”, 新标题))

.子程序 备份模拟器, 空白型, , 修改模拟器标题。此命令需要2.0.33以上的模拟器版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 备份路径, 文本型, , 备份文件的保存路径
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。默认为：0。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe backup --index ”, 到文本 (索引), “ --file ”, 备份路径), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE backup --index ”, 到文本 (索引), “ --file ”, 备份路径), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe backup --index ”, 到文本 (索引), “ --file ”, 备份路径), 真, 1)
.如果真结束



.子程序 还原模拟器, 空白型, , 修改模拟器标题。此命令需要2.0.33以上的模拟器版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 备份路径, 文本型, , 备份文件的保存路径
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。默认为：0。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe rename --restore ”, 到文本 (索引), “ --file ”, 备份路径), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE rename --restore ”, 到文本 (索引), “ --file ”, 备份路径), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe rename --restore ”, 到文本 (索引), “ --file ”, 备份路径), 真, 1)
.如果真结束


.子程序 动作_重启模拟器, 空白型, , 重启雷电模拟器，并自动运行应用。此命令需要2.0.35以上的模拟器版本，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 启动后要运行的应用包名, 文本型, 可空, 例如：“com.android.settings”。如果留空，则不自动运行应用。
.参数 超时时间, 整数型, 可空, 大于0，为超时等待时间，单位毫秒；为0时，立即返回；-1，一直等到完成后返回。默认为：0。

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果真 (等于 (启动后要运行的应用包名, “”))
    赋值 (启动后要运行的应用包名, “null”)
.如果真结束
.如果真 (等于 (超时时间, 0))
    运行 (相加 (雷电安装路径, “dnconsole.exe action --index ”, 到文本 (索引), “ --key call.reboot --value ”, 启动后要运行的应用包名), 假, 1)
.如果真结束
.如果真 (大于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.reboot --value ”, 启动后要运行的应用包名), 超时时间)
.如果真结束
.如果真 (小于 (超时时间, 0))
    取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.reboot --value ”, 启动后要运行的应用包名))
.如果真结束


.子程序 动作_执行按键, 空白型, , 执行模拟器按键动作，目前只支持5个按键动作。此命令需要2.0.35以上的模拟器版本，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 按键值, 整数型, , 参数为1-5。1=back；2=home；3=menu；4=volumeup；5=volumedown。

.局部变量 按键文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
.如果 (或者 (小于 (按键值, 1), 大于 (按键值, 5)))
    调试输出 (“按键值错误！”)
    返回 ()
.否则
    .如果真 (等于 (按键值, 1))
        赋值 (按键文本, “back”)
    .如果真结束
    .如果真 (等于 (按键值, 2))
        赋值 (按键文本, “home”)
    .如果真结束
    .如果真 (等于 (按键值, 3))
        赋值 (按键文本, “menu”)
    .如果真结束
    .如果真 (等于 (按键值, 4))
        赋值 (按键文本, “volumeup”)
    .如果真结束
    .如果真 (等于 (按键值, 5))
        赋值 (按键文本, “volumedown”)
    .如果真结束
    
.如果结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.keyboard --value ”, 按键文本))


.子程序 动作_修改定位, 空白型, , 修改GPS定位的位置。此命令需要2.0.35以上的模拟器版本，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 位置经纬度, 文本型, , 格式为：“经度,纬度”。例如：“12.3,45.6”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.locate --value ”, 位置经纬度))


.子程序 动作_摇一摇, 空白型, , 模拟器发出一阵颤抖,别人不知道它有多爽。此命令需要2.0.35以上的模拟器版本，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.shake --value null”))

.子程序 是否已连接, 文本型, , 判断adb与模拟器的连接状态。device：设备正常连接；offline：连接出现异常，设备无响应；unknown：没有连接设备
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, adb (索引, “get-state”))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 浏览网页, 文本型, , 判断adb与模拟器的连接状态。device：设备正常连接；offline：连接出现异常，设备无响应；unknown：没有连接设备
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网址, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
赋值 (返回文本, adb (索引, 相加 (“shell am start -a android.intent.action.VIEW -d ”, 网址)))
返回 (返回文本)

.子程序 动作_输入文字, 空白型, , 支持中文，2.0.42以上支持，action命令的扩展
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文字, 文本型, , 要输入的文字

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “DNCONS~1.EXE action --index ”, 到文本 (索引), “ --key call.input --value ”, #引号, 文字, #引号))


.类模块 CImagePathAndCommandLine, , , 

.程序集变量 m_hProcess, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 OpenProcess, 逻辑型, , 打开目标进程。成功返回真，失败返回假。备注：若不再操作目标进程，请调用“Close”方法释放资源。
.参数 dwProcessId, 整数型, , 目标进程ID

赋值 (m_hProcess, OpenProcess_API (位或 (#PROCESS_VM_READ, #PROCESS_DUP_HANDLE, #PROCESS_VM_OPERATION, #PROCESS_CREATE_THREAD, #PROCESS_QUERY_INFORMATION), 假, dwProcessId)) ' 打开目标进程
返回 (不等于 (m_hProcess, 0))

.子程序 Close, 逻辑型, , 关闭已打开的句柄，释放资源。成功返回真，失败返回假。
.如果真 (不等于 (m_hProcess, 0))
    .如果真 (CloseHandle (m_hProcess)) ' 关闭进程句柄
        赋值 (m_hProcess, 0)
        返回 (真)
    .如果真结束
    
.如果真结束
返回 (假)

.子程序 SetHandle, 空白型, , 置入进程句柄，可通过本类的实例操作目标进程。
.参数 hProcess, 整数型, , 目标进程ID
.参数 bCloseOldHandle, 逻辑型, 可空, 是否把已打开的句柄释放。建议该参数为真。否则有可能会导致内存泄漏。

.如果真 (bCloseOldHandle)
    CloseHandle (m_hProcess) ' 关闭进程句柄
.如果真结束
赋值 (m_hProcess, hProcess)

.子程序 GetSaveHandle, 整数型, , 获取已保存的句柄
返回 (m_hProcess)

.子程序 GetProcessImagePathAndCommandLine, 逻辑型, , 获取目标进程的映像路径及命令行参数。成功返回真，失败返回假。
.参数 lpstrImagePathAndCommandLine, 文本型, 参考, 用于保存目标进程的映像路径及命令行参数的文本型变量

.局部变量 GetCommandLineA_addr, 整数型, , , GetCommandLineA的地址
.局部变量 hRemoteThread, 整数型, , , 远程线程句柄
.局部变量 lptstr, 整数型, , , 远程进程的映像路径及命令行参数的基址
.局部变量 lstrlenA_addr, 整数型, , , lstrlenA的地址
.局部变量 strlen, 整数型, , , 长度

赋值 (GetCommandLineA_addr, GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “GetCommandLineA”)) ' 获取 GetCommandLineA 的地址
赋值 (hRemoteThread, CreateRemoteThread (m_hProcess, 0, 0, GetCommandLineA_addr, 0, 0, 0)) ' 创建远程线程执行 GetCommandLineA 函数，并获取该线程的线程句柄
.如果 (不等于 (hRemoteThread, 0))
    WaitForSingleObject (hRemoteThread, #INFINITE) ' 等待线程结束
    GetExitCodeThread (hRemoteThread, lptstr) ' 获取线程退出代码
    CloseHandle (hRemoteThread) ' 关闭线程句柄
.否则
    返回 (假)
.如果结束
赋值 (lstrlenA_addr, GetProcAddress (GetModuleHandleA (“Kernel32.dll”), “lstrlenA”)) ' 获取 lstrlenA 的地址
赋值 (hRemoteThread, CreateRemoteThread (m_hProcess, 0, 0, lstrlenA_addr, lptstr, 0, 0)) ' 创建远程线程执行 lstrlenA 函数，并获取该线程的线程句柄
.如果 (不等于 (hRemoteThread, 0))
    WaitForSingleObject (hRemoteThread, #INFINITE) ' 等待线程结束
    GetExitCodeThread (hRemoteThread, strlen) ' 获取线程退出代码
    CloseHandle (hRemoteThread) ' 关闭线程句柄
.否则
    返回 (假)
.如果结束
赋值 (lpstrImagePathAndCommandLine, 取空白文本 (strlen)) ' 申请内存空间，用于保存远程进程的映像路径及命令行参数的基址
.如果真 (ReadProcessMemory (m_hProcess, lptstr, lpstrImagePathAndCommandLine, strlen, 0)) ' 读取远程进程的映像路径及命令行参数
    返回 (真)
.如果真结束
返回 (假)

.类模块 雷电ld操作, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (雷电安装路径, 取安装目录 ())


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 查看文件内容, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件路径, 文本型, , 如：/data/data/com.kimi.ggplay.qjmutw/shared_prefs/com.kimi.ggplay.qjmutw.xml

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (相加 (取DOS返回 (相加 (雷电安装路径, “ld -s ”, 到文本 (索引), “ cat ”, #引号, 文件路径, #引号)), “ exit”))

.子程序 发送文本, 空白型, , 向窗口输入指定文本内容 不支持中文
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文本内容, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ input text ”, #引号, 文本内容, #引号))

.子程序 关闭应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ am force-stop ”, 包名)))

.子程序 禁用应用, 空白型, , 只有系统应用才可以用，第三方应用不行
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 禁用, 逻辑型, , 假为不禁用，真为禁用

.局部变量 返回, 文本型, , , 
.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (禁用, 真))
    赋值 (参数, “ enable ”)
.否则
    赋值 (参数, “ disable ”)
.如果结束
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm”, 参数, 包名)))

.子程序 枚举包名, 文本型, , 枚举所有的已经安装的应用的包名，如果设置了过滤器返回过滤后的内容
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤器, 整数型, 可空, 留空或者为0，枚举所有包名；1，显示每个包的文件位置；2，只显示禁用的应用的包名；3，只显示可用的应用的包名；4，只显示系统应用的包名；5，只显示第三方应用的包名；6，查看应用的安装者。

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (过滤器, 0))
    赋值 (参数, “”)
.如果真结束
.如果真 (等于 (过滤器, 1))
    赋值 (参数, “ -f”)
.如果真结束
.如果真 (等于 (过滤器, 2))
    赋值 (参数, “ -d”)
.如果真结束
.如果真 (等于 (过滤器, 3))
    赋值 (参数, “ -e”)
.如果真结束
.如果真 (等于 (过滤器, 4))
    赋值 (参数, “ -s”)
.如果真结束
.如果真 (等于 (过滤器, 5))
    赋值 (参数, “ -3”)
.如果真结束
.如果真 (等于 (过滤器, 6))
    赋值 (参数, “ -i”)
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm list packages”, 参数)))

.子程序 枚举目录文件, 文本型, , 返回指定路径中包含的子目录和文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 待枚举的目录, 文本型, , 模拟器中的目录，如：/data/data/

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ ls ”, #引号, 待枚举的目录, #引号)))

.子程序 启动应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , app的包名
.参数 类名, 文本型, , app的类名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

 ' 返回桌面可以这样： 启动应用 (索引, “com.android.launcher”, “com.android.launcher2.Launcher”)
赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ am start -n ”, 包名, “/”, 类名)))
调试输出 (返回)

.子程序 清除应用缓存, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm clear ”, 包名)))
调试输出 (返回)

.子程序 取apk路径, 文本型, , 取指定包名的apk路径
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm list instrumentation ”, 包名)))

.子程序 取IMEI, 文本型, , 返回手机IMEI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop phone.imei”)), #换行符, “”, , , 真))

.子程序 取IMSI, 文本型, , 返回手机IMSI信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop phone.imsi”)), #换行符, “”, , , 真))

.子程序 取MAC, 文本型, , 返回手机网卡MAC地址
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ cat /sys/class/net/eth0/address”)), #换行符, “”, , , 真))

.子程序 取IP, 文本型, , 成功返回手机IP和子网掩码，失败返回空文本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ ifconfig eth0”)))
赋值 (返回文本, 取文本之间 (返回文本, “eth0: ”, “ flags ”))
返回 (返回文本)


.子程序 取网关, 文本型, , 返回模拟器网关
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop dhcp.eth0.gateway”)))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 取DNS, 文本型, , 返回手机DNS1和DNS2，格式：“DNS1,DNS2”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 文本1, 文本型, , , 
.局部变量 文本2, 文本型, , , 
.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (文本1, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop dhcp.eth0.dns1”)))
赋值 (文本2, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop dhcp.eth0.dns2”)))
赋值 (返回文本, 相加 (文本1, “,”, 文本2))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 取SIM序号, 文本型, , 返回手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop phone.simserial”)), #换行符, “”, , , 真))

.子程序 取安卓ID, 文本型, , 返回设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop phone.androidid”)), #换行符, “”, , , 真))

.子程序 取进程ID, 整数型, , 存在返回进程ID 否则 返回0
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 如：com.kimi.ggplay.qjmutw

.局部变量 返回文本, 文本型, , , 
.局部变量 分割, 文本型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 单分, 文本型, , "0", 
.局部变量 s, 整数型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ ps”)))
.如果 (等于 (寻找文本 (返回文本, 包名, 1, 假), -1))
    返回 (0)
.否则
    赋值 (分割, 分割文本 (返回文本, #换行符, ))
    .计次循环首 (取数组成员数 (分割), i)
        .如果真 (大于 (寻找文本 (分割 [i], 包名, 1, 假), 0))
            赋值 (单分, 分割文本 (分割 [i], “ ”, ))
            .计次循环首 (取数组成员数 (单分), s)
                .如果真 (大于 (到整数 (单分 [s]), 0))
                    返回 (到整数 (单分 [s]))
                .如果真结束
                
            .计次循环尾 ()
        .如果真结束
        
    .计次循环尾 ()
.如果结束
返回 (0)

.子程序 取进程列表, 文本型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ ps”)))

.子程序 取手机厂商, 文本型, , 返回手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop ro.product.manufacturer”)), #换行符, “”, , , 真))

.子程序 取手机型号, 文本型, , 返回手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop ro.product.model”)), #换行符, “”, , , 真))

.子程序 取手机号码, 文本型, , 返回手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (子文本替换 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop phone.number”)), #换行符, “”, , , 真))

.子程序 删除文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ rm ”, #引号, 模拟器文件路径, #引号))

.子程序 删除文件夹, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ rm -r ”, #引号, 模拟器文件路径, #引号)))
调试输出 (返回)

.子程序 鼠标拖动, 空白型, , 模拟鼠标从第一点按下，拖动到第二点，再放开。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x1, 整数型, , 第一点x坐标
.参数 y1, 整数型, , 第一点y坐标
.参数 x2, 整数型, , 第二点x坐标
.参数 y2, 整数型, , 第二点y坐标
.参数 时间, 整数型, , 鼠标拖动的时间（单位毫秒）

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ input swipe ”, 到文本 (x1), “ ”, 到文本 (y1), “ ”, 到文本 (x2), “ ”, 到文本 (y2), “ ”, 到文本 (时间)), , )

.子程序 鼠标点击, 空白型, , 模拟鼠标点击
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 x, 整数型, , 
.参数 y, 整数型, , 


.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束
取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ input tap ”, 到文本 (x), “ ”, 到文本 (y)))

.子程序 按键点击, 空白型, , 模拟按键点击。例如：按键点击 (0,“KEYCODE_HOME”)，也可以：按键点击 (0,“3”)，两种方式都是按下HOME键
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 键值, 文本型, , 这里是安卓中的键值，不同于易语言的键代码，详情请参考：http://bbs.ldmnq.com/forum.php?mod=viewthread&tid=10061

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ input keyevent ”, 键值))

.子程序 卸载应用, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 是否保留数据, 逻辑型, 可空, 为真则不删除程序运行所产生的数据和缓存目录(如软件的数据库文件)；为假或者留空，则全部删除。

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (是否保留数据, 真))
    赋值 (参数, “-k ”)
.如果真结束
取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm uninstall ”, 参数, 包名))

.子程序 隐藏应用, 空白型, , 被隐藏应用在应用管理中变得不可见，桌面图标也会消失。此命令雷电无效，雷电用户可以考虑 禁止应用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 应用程序的包名
.参数 隐藏, 逻辑型, , 假为显示，真为隐藏

.局部变量 参数, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果 (等于 (隐藏, 真))
    赋值 (参数, “ hide ”)
.否则
    赋值 (参数, “ unhide ”)
.如果结束
取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pm”, 参数, 包名))

.子程序 置IMEI, 文本型, , 设置手机IMEI信息。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMEI, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.imei ”, IMEI)))

.子程序 置IMSI, 文本型, , 设置手机IMSI信息。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IMSI, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.imsi ”, IMSI)))

.子程序 置MAC_无效, 文本型, , 设置手机网卡MAC地址。成功返回空文本，失败返回错误信息。MAC地址暂时无法动态修改。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 MAC, 文本型, , “auto”为随机MAC

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (等于 (MAC, “auto”))
    赋值 (MAC, 取随机MAC (“:”))
.如果真结束
返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop dhcp.eth0.mac ”, MAC)))

.子程序 置IP, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 IP地址, 文本型, , 例如：“192.168.0.180”
.参数 子网掩码, 文本型, , 例如：“255.255.255.0”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ ifconfig eth0 ”, IP地址, “ netmask ”, 子网掩码)))

.子程序 置网关, 文本型, , 设置手机网卡IP地址和子网掩码。成功返回空文本，失败返回错误信息。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网关IP地址, 文本型, , 例如：“192.168.0.1”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ route add default gw ”, 网关IP地址, “ dev eth0”)))

.子程序 置DNS, 空白型, , 设置手机网卡DNS
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DNS1, 文本型, , 例如：“8.8.8.8”
.参数 DNS2, 文本型, , 例如：“8.8.8.8”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop dhcp.eth0.dns1 ”, DNS1))
取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop dhcp.eth0.dns2 ”, DNS2))

.子程序 置SIM序号, 空白型, , 设置手机SIM序号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 SIM序号, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.simserial ”, SIM序号))

.子程序 置安卓ID, 空白型, , 设置设备安卓ID android
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 安卓ID, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.androidid ”, 安卓ID))

.子程序 置手机厂商, 空白型, , 设置手机厂商
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机厂商, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.manufacturer ”, #引号, 手机厂商, #引号))

.子程序 置手机型号, 空白型, , 设置手机型号
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机型号, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.model ”, #引号, 手机型号, #引号))

.子程序 置手机号码, 空白型, , 设置手机号码
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 手机号码, 文本型, , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ setprop phone.linenum ”, 手机号码))

.子程序 终止进程, 逻辑型, , 结束模拟器中的进程
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 进程ID, 整数型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

.如果真 (小于或等于 (进程ID, 0))
    返回 (假)
.如果真结束
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ kill ”, 到文本 (进程ID))))
.如果真 (大于 (寻找文本 (返回文本, “device not found”, 1, 假), 0)) ' 设备不存在
    返回 (假)
.如果真结束
.如果真 (大于 (寻找文本 (返回文本, “NO”, 1, 假), 0)) ' 没有这个进程
    返回 (假)
.如果真结束
返回 (真)

.子程序 重启模拟器, 空白型, , 重启之后，需要重新初始化，才能继续试用adb命令。重启后，窗口句柄不变，大漠插件甚至无需重新绑定，都可以正常工作。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ reboot”))

.子程序 进入目录, 空白型, , 其实就是命令行中的“cd”，相当于易语言中的“改变目录()”，不过这里进入的目录是模拟器中的目录。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 路径, 文本型, , 模拟器中的目录路径，例如： "/data/local/tmp"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ cd ”, #引号, 路径, #引号))

.子程序 上传文件, 空白型, , 将电脑中的文件，上传到模拟器中
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 本机路径, 文本型, , 如："c:111.txt"
.参数 模拟器文件路径, 文本型, , 如：/data/data/....

.局部变量 返回, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ push ”, #引号, 本机路径, #引号, “ ”, #引号, 模拟器文件路径, #引号)))
调试输出 (返回)

.子程序 下载文件, 空白型, , 
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 模拟器文件路径, 文本型, , 如：/data/data/....
.参数 本机路径, 文本型, , 如："c:111.txt"

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ pull ”, #引号, 模拟器文件路径, #引号, “ ”, #引号, 本机路径, #引号))

.子程序 复制文件, 空白型, , 模拟器内部的文件复制
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被复制的文件名, 文本型, , 模拟器中的路径
.参数 复制到的文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ cp ”, #引号, 被复制的文件名, #引号, “ ”, #引号, 复制到的文件名, #引号))

.子程序 移动文件, 空白型, , 同一个目录下的移动，可以当成重命名来用
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 被移动的文件, 文本型, , 模拟器中的路径
.参数 移动到的位置, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ mv ”, #引号, 被移动的文件, #引号, “ ”, #引号, 移动到的位置, #引号))

.子程序 修改权限, 空白型, , 为文件或目录赋权限
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 权限, 文本型, , 常用的文件权限有：444、600、644、666、700、744、755、777
.参数 文件名, 文本型, , 被修改权限的文件或者目录

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ chmod ”, 权限, “ ”, #引号, 文件名, #引号))

.子程序 写入文件, 空白型, , 如果文件不存在创建并写入
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 要写入的内容, 文本型, , 
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ echo ”, #引号, 要写入的内容, #引号, “ ”, #引号, 文件名, #引号))

.子程序 创建文件, 空白型, , 创建一个空文件
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 文件名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ touch ”, #引号, 文件名, #引号))

.子程序 创建目录, 空白型, , 创建一个空目录
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 目录名, 文本型, , 模拟器中的路径

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ mkdir ”, #引号, 目录名, #引号))

.子程序 取安卓版本, 文本型, , 返回当前的安卓系统版本
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

返回 (取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ getprop ro.build.version.release”)))

.子程序 取分辨率, 文本型, , 返回当前的屏幕分辨率，格式为：1280x720
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ wm size”)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical size: ”, “”, , , 真))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 置分辨率, 空白型, , 这里只是修改分辨率，模拟器的窗口大小，并不会改变。
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 分辨率, 文本型, , 格式为“1280x720”；恢复原来的分辨率，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ wm size ”, 分辨率))

.子程序 取DPI, 文本型, , 返回当前的屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ wm density”)))
赋值 (返回文本, 子文本替换 (返回文本, “Physical density: ”, “”, , , 真))
赋值 (返回文本, 子文本替换 (返回文本, #换行符, “”, , , 真))
返回 (返回文本)

.子程序 置DPI, 空白型, , 设置屏幕DPI
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 DPI, 文本型, , 如果要恢复原来的DPI，用“reset”

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ wm size ”, DPI))

.子程序 应用是否启动, 逻辑型, , 判断引用是否已经启动，已启动返回真，否则返回假
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

 ' 此命令是通过查看内存的方式来进行判断
赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ dumpsys meminfo ”, 包名)))
.如果 (等于 (寻找文本 (返回文本, “No process found for”, , 假), -1))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 读任务栈, 文本型, , 读出模拟器中的任务栈信息（activity）。 根据 过滤类型 取值不同，可以返回不同的信息
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 过滤类型, 整数型, , 0 = 全部activity信息，也就是“adb  dumpsys activity”所返回的内容。1 = 运行中的任务栈（Running activities）。2 = 顶栈任务栈（mFocusedActivity）。

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ dumpsys activity”), 5000))
.如果真 (等于 (过滤类型, 1))
    赋值 (返回文本, 取文本之间 (返回文本, “Running activities (most recent first):”, “mResumedActivity:”))
    赋值 (返回文本, 删首尾空 (返回文本))
.如果真结束
.如果真 (等于 (过滤类型, 2))
    赋值 (返回文本, 相加 (“mFocusedActivity: ”, 取文本之间 (返回文本, “mFocusedActivity: ”, #换行符)))
.如果真结束
返回 (返回文本)


.子程序 查看内存占用, 文本型, , 返回应用的详细内存占用信息，如果应用未启动，则返回“No process found for: 包名”
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 包名, 文本型, , 安卓APP的包名。雷电桌面的包名为“com.android.launcher”

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ dumpsys meminfo ”, 包名), 5000))
返回 (返回文本)

.子程序 浏览网页, 文本型, , 判断adb与模拟器的连接状态。device：设备正常连接；offline：连接出现异常，设备无响应；unknown：没有连接设备
.参数 索引, 整数型, , 模拟器索引（index）。第一模拟器为0，第二个为1，第三个为2，以此类推
.参数 网址, 文本型, , 

.局部变量 返回文本, 文本型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (返回文本, 取DOS返回 (相加 (雷电安装路径, “ld.exe -s ”, 到文本 (索引), “ am start -a android.intent.action.VIEW -d ”, 网址), 5000))
返回 (返回文本)

.子程序 应用是否已安装, 逻辑型, , 
.参数 索引, 整数型, , 
.参数 包名, 文本型, , 

.局部变量 包名组, 字节集, , "0", 
.局部变量 计次, 整数型, , , 
.局部变量 过滤参数, 整数型, , , 
.局部变量 返回值, 逻辑型, , , 

.如果真 (等于 (雷电安装路径, “”))
    赋值 (雷电安装路径, 取安装目录 ())
.如果真结束

赋值 (包名组, 分割字节集 (到字节集 (枚举包名 (索引)), { 13, 13, 10 }, ))
赋值 (包名, 相加 (“package:”, 包名))
赋值 (返回值, 假)
.计次循环首 (取数组成员数 (包名组), 计次)
    .如果真 (等于 (包名组 [计次], 到字节集 (包名)))
        赋值 (返回值, 真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (返回值)


.类模块 类_json_, , , 

.程序集变量 集_节点组, JSON节点, , "0", 添加节点前必先赋值
.程序集变量 集_节点索引组, 整数型, , "0", 每次增加节点应当在这里记录，每次一个节点结束应该删除最后一个成员
.程序集变量 集_分析状态组, 字节型, , "0", 无成员时为主线分析状态,成员值=1为“{”状态，2为“[”状态，3为取名称状态，4为
.程序集变量 集_数组判断_上个节点数, 整数型, , , 用在数组中方括号状态空节点时加以判断
.程序集变量 集_数组成员数统计, 整数型, , "0", 
.程序集变量 集_对象成员数统计, 整数型, , "0", 
.程序集变量 集_当前层次, 整数型, , , 层次从1开始
.程序集变量 集_文本转义状态, 逻辑型, , , 用于判断文本转义状态下结束符的有效性
.程序集变量 集_当前文本, 未知类型0x40001, , , 主要是对象名和对象值的分次获取
.程序集变量 集_无引号对象名, 逻辑型, , , 对象名无引号状态获取,只在大括号内有效
.程序集变量 集_严格模式, 逻辑型, , , 如果启用严格模式下一但有错误直接算失败,
.程序集变量 集_代码长度, 整数型, , , 记录代码总长度，严格模式
.程序集变量 集_出错位置, 整数型, , , 严格模式
.程序集变量 集_错误代码, 整数型, , , 严格模式
.程序集变量 集_错误说明, 文本型, , , 严格模式
.程序集变量 集_逗号状态, 字节型, , , 严格模式下，大括号的每个成员间需要逗号隔开。
.程序集变量 集_允许顶级命名, 逻辑型, , , 
.程序集变量 集_行号, 整数型, , , 行号从0开始
.程序集变量 集_列号, 整数型, , , 列号从0开始
.子程序 取类中总项目数, 整数型, , 返回当前json文本对应的所有子子孙孙项目数，失败返回0
返回 (取数组成员数 (集_节点组))

.子程序 取类中所有节点, 整数型, , 取出全部的节点，成功返回节点数，失败返回0
.参数 返回节点组, JSON节点, 参考 数组, 提供一个 节点 数组变量来接收所有节点

赋值 (返回节点组, 集_节点组)
返回 (取数组成员数 (返回节点组))

.子程序 取类中所有节点_交换变量, 整数型, , 快速取出全部的节点，成功返回节点数，失败返回0  使用本方法必须成对出现，必须在返回前再次调用本方法，否则将出错
.参数 返回节点组, JSON节点, 参考 数组, 提供一个 节点 数组变量来接收所有节点 本方法成对出现，必须在返回前再次调用本方法，否则将出错

.局部变量 p, 整数型, , , 

 ' 下面三句代码等同于支持库的 交换变量()
赋值 (p, 指针到整数 (取变量地址 (返回节点组)))
写到内存 (指针到整数 (取变量地址 (集_节点组)), 取变量地址 (返回节点组), )
写到内存 (p, 取变量地址 (集_节点组), )
返回 (取数组成员数 (返回节点组))

.子程序 取项目节点, JSON节点, , 取出一个节点
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量，则从此变量返回对应的节点位置

.局部变量 空节点, JSON节点, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (大于 (返回节点ID, 0))
    赋值 (空节点, 集_节点组 [返回节点ID])
.如果真结束
返回 (空节点)

.子程序 取子项目数, 整数型, , 取对象或者数组的成员数
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量，则从此变量返回对应的节点位置

.局部变量 类型, 整数型, , , 
.局部变量 值, 文本型, , , 
.局部变量 成员数, 整数型, , , 
.局部变量 起始层次, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (并且 (大于 (返回节点ID, 0), 或者 (等于 (集_节点组 [返回节点ID], 类型, #类型_数组), 等于 (集_节点组 [返回节点ID], 类型, #类型_对象))))
    赋值 (值, 集_节点组 [返回节点ID], 值)
    .如果真 (不等于 (成员数, 0)) ' 没有成员时
        赋值 (成员数, 到整数 (取文本中间 (值, 3, 相减 (取文本长度 (值), 4))))
        返回 (成员数)
    .如果真结束
    
.如果真结束
.如果 (等于 (返回节点ID, 0))
    赋值 (起始层次, 1)
.否则
    赋值 (起始层次, 相加 (集_节点组 [返回节点ID], 层次, 1))
.如果结束
.变量循环首 (相加 (返回节点ID, 1), 取数组成员数 (集_节点组), 1, i)
    .判断开始 (大于 (集_节点组 [i], 层次, 起始层次))
         ' 子层次
    .判断 (等于 (集_节点组 [i], 层次, 起始层次))
        赋值 (成员数, 相加 (成员数, 1)) ' 兄弟层次
    .默认
        跳出循环 () ' 父层次，直接结束循环
    .判断结束
    
.变量循环尾 ()
返回 (成员数)

.子程序 取子孙项目数, 整数型, , 返回所有成员(包含子对象中、孙对象中)的数量
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 位置填0取最顶层(通常无效),1为第一个节点可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量,则从此处返回节点位置，出错返回0

.局部变量 类型, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 起始层次, 整数型, 静态, , 
.局部变量 sum, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0)) ' 提供的参数不正确
    .如果 (或者 (等于 (取类中总项目数 (), 0), 是否为空 (节点ID))) ' 没有节点说明未解析  有表达式说明表达式错误
        返回 (0)
    .否则
        返回 (相减 (取类中总项目数 (), 1)) ' 没有表达式,说明为了取根部节点
    .如果结束
    
.如果真结束
赋值 (类型, 集_节点组 [返回节点ID], 类型)
.如果真 (并且 (不等于 (类型, #类型_对象), 不等于 (类型, #类型_数组))) ' 非数组或对象
    返回 (0)
.如果真结束
赋值 (起始层次, 集_节点组 [返回节点ID], 层次)
.变量循环首 (相加 (返回节点ID, 1), 取数组成员数 (集_节点组), 1, i)
    .如果真 (小于或等于 (集_节点组 [i], 层次, 起始层次)) ' 大于说明到了自己父级位置,等于说明到了当前节点兄弟位置
        跳出循环 ()
    .如果真结束
    赋值 (sum, 相加 (sum, 1)) ' 当前层次小于其实层次,说明是起始层次的子级层次
.变量循环尾 ()
返回 (sum)

.子程序 取项目所有节点, 整数型, , 取出一个对象或者数组自身和所包含的所有子节点,成功返回所取出节点的数量,失败返回0
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回节点组, JSON节点, 参考 数组, 提供一个节点数组型变量,接收返回值
.参数 包含父节点, 逻辑型, 可空, 真包含表达式指向位置那个节点,假不包含,默认真

.局部变量 所有成员数量, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 偏移, 短整数型, , , 

.如果真 (是否为空 (包含父节点))
    赋值 (包含父节点, 真)
.如果真结束
赋值 (节点ID, _选择节点ID (表达式, 节点ID))
.如果 (等于 (节点ID, 0))
    清除数组 (返回节点组)
    返回 (0)
.否则
    赋值 (偏移, 选择 (包含父节点, -1, 0)) ' 包含父节点偏移为-1,否则不偏移
    赋值 (所有成员数量, 相加 (取子孙项目数 (节点ID, ), 选择 (包含父节点, 1, 0))) ' 包含父节点节点数为所有成员数+1,否则不+1
    重定义数组 (返回节点组, 假, 所有成员数量)
    .计次循环首 (所有成员数量, i)
        赋值 (返回节点组 [i], 集_节点组 [相加 (节点ID, i, 偏移)])
    .计次循环尾 ()
    返回 (所有成员数量)
.如果结束


.子程序 取项目所有节点_交换变量, 整数型, , 快速取出节点，成功返回节点数，失败返回0  使用本方法必须成对出现，必须在返回前再次调用本方法，否则将出错
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 要交换节点组, JSON节点, 参考 数组, 提供一个节点数组型变量,接收返回值，这里建议提供一个空数组,该数组原来的数据可能会被破坏
.参数 包含父节点, 逻辑型, 可空, 真包含表达式指向位置那个节点,假不包含,默认真

.局部变量 所有成员数量, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 偏移, 短整数型, , , 

.如果真 (是否为空 (包含父节点))
    赋值 (包含父节点, 真)
.如果真结束
赋值 (节点ID, _选择节点ID (表达式, 节点ID))
.如果 (等于 (节点ID, 0))
    清除数组 (要交换节点组)
    返回 (0)
.否则
    赋值 (偏移, 选择 (包含父节点, -1, 0)) ' 包含父节点偏移为-1,否则不偏移
    赋值 (所有成员数量, 相加 (取子孙项目数 (节点ID, ), 选择 (包含父节点, 1, 0))) ' 包含父节点节点数为所有成员数+1,否则不+1
    .如果真 (小于 (取数组下标 (要交换节点组, ), 所有成员数量))
        重定义数组 (要交换节点组, 真, 所有成员数量)
    .如果真结束
    .计次循环首 (所有成员数量, i)
        赋值 (要交换节点组 [i], 层次, 集_节点组 [相加 (节点ID, i, 偏移)].层次)
        ??? () ' <!!!>
    .计次循环尾 ()
    返回 (所有成员数量)
.如果结束


.子程序 取错误信息, 整数型, , 如果有错误返回错误代码，无错误返回0,一旦出错将拒绝再次加入文本,必须初始化才可以再次使用
.参数 错误说明, 文本型, 参考 可空, 提供一个文本变量以返回错误说明
.参数 出错位置, 整数型, 参考 可空, 如果提供了一个整数型变量则返回文本出错的位置,位置从1开始
.参数 出错行号, 整数型, 参考 可空, 如果提供了一个整数型变量则返回文本出错的行号,行号从0开始
.参数 出错列号, 整数型, 参考 可空, 如果提供了一个整数型变量则返回文本出错的列号,列号从0开始

赋值 (出错位置, 集_出错位置)
赋值 (错误说明, 集_错误说明)
赋值 (出错行号, 集_行号)
赋值 (出错列号, 集_列号)
返回 (集_错误代码)

.子程序 取项目值, 文本型, , 成功返回该表达式指向的值，失败返回空文本并且 参数3“返回类型”会返回 #类型_未知类型 参数4“返回节点位置” 会返回0
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回类型, 整数型, 参考 可空, 提供一个参数返回表达式对应的类型，为 #类型_  开头常量 1=数值，2=文本，3=逻辑，4=对象，5=数组。0=未知类型，-1=空
.参数 解析转义, 逻辑型, 可空, 默认不解析即原样输出，文本型解析转义符号如\r\n解析为#换行符\u4F60\u597D解析为你好；逻辑型转到小写输出；空类型解析成小写null,数组对象解析为成员数;未知类型仍然原样输出
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量，那么此处可返回表达式对应的节点位置,用于提供表达式时指引对应的节点位置

.局部变量 返回值, 文本型, , , 
.局部变量 文本长度, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0)) ' 表达式参数和节点位置参数均无效
    返回 (“”)
.如果真结束
赋值 (返回类型, 集_节点组 [返回节点ID], 类型)
赋值 (返回值, 集_节点组 [返回节点ID], 值)
.判断开始 (等于 (解析转义, 假))
     ' 不解析转义，原样输出
.判断 (等于 (返回类型, #类型_文本))
    文本_转义解析 (返回值, 返回值)
.判断 (等于 (返回类型, #类型_逻辑))
    赋值 (返回值, 到小写 (返回值))
.判断 (或者 (等于 (返回类型, #类型_对象), 等于 (返回类型, #类型_数组)))
    赋值 (文本长度, 取文本长度 (返回值))
    赋值 (返回值, 取文本中间 (返回值, 3, 相减 (文本长度, 4)))
.默认
    
.判断结束
返回 (返回值)

.子程序 置项目值, 逻辑型, , 为一个项目赋值，类型不能为 对象、数组，类型成功返回真，失败返回假
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 项目新值, 文本型, , 属性值,注意如果表达式索引为对象或数组,则原对象下所有成员均会被释放,如果要整体改变一个对象建议调用 置属性代码()
.参数 类型, 整数型, 可空, 0=自动,1=数值型，2=文本型，3=逻辑型,(默认自动识别,优先使用表达式索引节点原来的类型),建议不要自行设置类型,以免被其他程序解析成 未知类型
.参数 文本转义方式, 整数型, 可空, 只在文本型时有效。1=基础转义(转义：#反斜杠、#换行符、#引号、#制表符),2=转义汉字，4=转义斜杠(即http://这种)，可以将这些常量值相加以生成参数值，默认1基础转义
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回对应的节点位置

.局部变量 无空文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 删除成员数, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0)) ' 节点未找到
    返回 (假)
.如果真结束
.如果真 (大于 (类型, 3)) ' 纠正参数
    赋值 (类型, 0)
.如果真结束
.如果真 (是否为空 (文本转义方式)) ' 纠正参数
    赋值 (文本转义方式, 1)
.如果真结束
.变量循环首 (相加 (返回节点ID, 1), 取数组成员数 (集_节点组), 1, i)
    .如果真 (小于或等于 (集_节点组 [i], 层次, 集_节点组 [返回节点ID], 层次))
        跳出循环 ()
    .如果真结束
    赋值 (删除成员数, 相加 (删除成员数, 1))
.变量循环尾 ()
删除成员 (集_节点组, 相加 (返回节点ID, 1), 删除成员数) ' 释放节点下属成员
.判断开始 (不等于 (类型, 0)) ' 手动类型，不理会
    赋值 (集_节点组 [返回节点ID], 类型, 类型)
.判断 (等于 (集_节点组 [返回节点ID], 类型, #类型_文本)) ' 原本为文本型，直接按文本型处理
    
.默认
    赋值 (无空文本, 到小写 (删全部空 (项目新值)))
    .判断开始 (是否为数值文本 (无空文本))
        赋值 (集_节点组 [返回节点ID], 类型, #类型_数值)
    .判断 (或者 (等于 (无空文本, “true”), 等于 (无空文本, “false”)))
        赋值 (集_节点组 [返回节点ID], 类型, #类型_逻辑)
    .默认
        赋值 (集_节点组 [返回节点ID], 类型, #类型_文本)
    .判断结束
    
.判断结束
.如果真 (并且 (等于 (集_节点组 [返回节点ID], 类型, #类型_文本), 大于 (文本转义方式, 0)))
    文本_转义 (项目新值, 无空文本, 等于 (位与 (文本转义方式, 2), 2), 等于 (位与 (文本转义方式, 4), 4))
.如果真结束
赋值 (集_节点组 [返回节点ID], 值, 无空文本)
返回 (真)

.子程序 置项目名称, 逻辑型, , 修改一个项目的名称，成功返回真，失败返回假
.参数 表达式, 文本型, 可空, 本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 项目新名称, 文本型, , 如果项目为数组成员须提供数字文本如12或者提供[12]这类文本,而项目为对象成员可提供任意文本，如果值不合法会造成重命名失败。
.参数 文本转义方式, 整数型, 可空, 只在对象成员名称时有效。1=基础转义(转义：#反斜杠、#换行符、#引号、#制表符),2=转义汉字，4=转义斜杠(即http://这种)，可以将这些常量值相加以生成参数值，默认1基础转义
.参数 返回新节点ID, 整数型, 参考 可空, 如果是数组成员在改变名称的情况下节点位置也会改变,此参数用于接收新的节点位置

.局部变量 新成员序号, 整数型, , , 
.局部变量 原成员序号, 整数型, , , 
.局部变量 原项目子孙数量, 整数型, , , 
.局部变量 父项目子孙数量, 整数型, , , 
.局部变量 父项目子数量, 整数型, , , 
.局部变量 父项目结束位置, 整数型, , , 
.局部变量 原项目结束位置, 整数型, , , 第二次分支使用
.局部变量 新项目位置, 整数型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 备份节点组, JSON节点, , "0", 
.局部变量 空节点, JSON节点, , , 
.局部变量 补充节点组, JSON节点, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 父项目位置, 整数型, , , 
.局部变量 i2, 整数型, , , 
.局部变量 成员序号偏移, 整数型, , , 
.局部变量 原节点层次, 整数型, , , 

赋值 (返回新节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回新节点ID, 0))
    返回 (假)
.如果真结束
.如果真 (不等于 (集_节点组 [返回新节点ID], 成员类型, #类型_数组)) ' 对象成员/非数组成员
    .如果 (或者 (是否为空 (文本转义方式), 不等于 (文本转义方式, 0)))
        文本_转义 (项目新名称, 集_节点组 [返回新节点ID], 名称, 等于 (位与 (文本转义方式, 2), 2), 等于 (位与 (文本转义方式, 4), 4)) ' 直接内部为其赋值
    .否则
        赋值 (集_节点组 [返回新节点ID], 名称, 项目新名称)
    .如果结束
    返回 (真)
.如果真结束
赋值 (新成员序号, 取绝对值 (到整数 (项目新名称))) ' 假设为直接整数
.如果真 (并且 (不等于 (项目新名称, “0”), 不等于 (到文本 (新成员序号), 项目新名称))) ' 非直接整数
    赋值 (文本, 取文本中间 (项目新名称, 2, 相减 (取文本长度 (项目新名称), 2)))
    赋值 (新成员序号, 取绝对值 (到整数 (文本))) ' 假设为数组索引
    .如果真 (并且 (不等于 (文本, “0”), 不等于 (到文本 (新成员序号), 文本))) ' 非成员索引
        返回 (假)
    .如果真结束
     ' 到了这里后面说明给值合法
.如果真结束
赋值 (原成员序号, 到整数 (取文本中间 (集_节点组 [返回新节点ID], 名称, 2, 相减 (取文本长度 (集_节点组 [返回新节点ID], 名称), 2))))
赋值 (原节点层次, 集_节点组 [返回新节点ID], 层次)
.判断开始 (等于 (原成员序号, 新成员序号)) ' 与原名一致
     ' 不理会
.默认
     ' 下面一大堆乱七八糟的代码只是为了加快数组顺序调换及数组插入
    赋值 (集_节点组 [返回新节点ID], 名称, 相加 (“[”, 到文本 (新成员序号), “]”))
    赋值 (父项目位置, 取父项目ID (返回新节点ID))
    赋值 (父项目子孙数量, 取子孙项目数 (父项目位置))
    赋值 (父项目子数量, 取子项目数 (父项目位置))
    赋值 (父项目结束位置, 相加 (父项目位置, 父项目子孙数量))
    赋值 (原项目子孙数量, 相减 (取项目所有节点_交换变量 (返回新节点ID, 备份节点组, 真), 1)) ' 将原来的节点备份   -1是因为这个数量保护了项目本身
    .判断开始 (大于 (新成员序号, 原成员序号))
        .变量循环首 (相加 (返回新节点ID, 原项目子孙数量, 1), 父项目结束位置, 1, i) ' 从原项目子孙结束后+1处(即下一个成员)开始循环直到父项目子孙成员完毕
            .如果真 (等于 (集_节点组 [i], 层次, 原节点层次))
                赋值 (集_节点组 [i], 名称, 相加 (“[”, 到文本 (相加 (原成员序号, 成员序号偏移)), “]”))
                赋值 (成员序号偏移, 相加 (成员序号偏移, 1))
            .如果真结束
            ??? () ' <!!!> 将原项目后的节点与原项目处节点位置的节点交换
            赋值 (i2, 相加 (i2, 1))
        .变量循环尾 () ' 这个循环完成了后面的节点往前面移动,并赋予新的索引号
        赋值 (空节点.值, “null”)
        赋值 (空节点.类型, #类型_空)
        赋值 (空节点.成员类型, #类型_数组)
        赋值 (空节点.层次, 原节点层次)
        .变量循环首 (父项目子数量, 新成员序号, 1, i) ' 如果成员数量不够将产生循环
            赋值 (空节点.名称, 相加 (“[”, 到文本 (相减 (i, 1)), “]”)) ' 索引值为第N个节点-1
            加入成员 (补充节点组, 空节点)
        .变量循环尾 ()
        .如果真 (大于 (取数组成员数 (补充节点组), 0))
            插入成员 (集_节点组, 相加 (相减 (父项目结束位置, 相加 (原项目子孙数量, 1)), 1), 补充节点组) ' 父项目结束位置-拿走的原项目及子孙(+1)总共的空间处+1处开始插新项目
            赋值 (集_节点组 [父项目位置], 值, 相加 (“[ ”, 到文本 (相加 (父项目子数量, 取数组成员数 (补充节点组))), “ ]”)) ' 插入了空成员,修改父项目成员数表示
        .如果真结束
         ' 以上代码完成了空数组补齐
        赋值 (父项目结束位置, 相加 (父项目结束位置, 取数组成员数 (补充节点组))) ' 前面插入了一个数组,那么父项目结束位置变成了原来的位置+数组长度
        赋值 (返回新节点ID, 相加 (相减 (父项目结束位置, 相加 (原项目子孙数量, 1)), 1)) ' (新节点的上一个节点 =新的父项目节点位置 - 原项目总数量)+1=新节点位置
    .默认
        赋值 (新项目位置, 取子项目ID (父项目位置, 新成员序号))
        赋值 (原项目结束位置, 相加 (返回新节点ID, 原项目子孙数量)) ' 这个值比较大
        赋值 (i2, 相加 (原项目子孙数量, 1))
        .变量循环首 (原项目结束位置, 相加 (新项目位置, i2), -1, i) ' 从原项目结束处 逆循环 到 新项目位置留下原项目占用空间处
            .如果真 (等于 (集_节点组 [相减 (i, i2)].层次, 原节点层次))
                赋值 (集_节点组 [相减 (i, i2)].名称, 相加 (“[”, 到文本 (相减 (原成员序号, 成员序号偏移)), “]”))
                赋值 (成员序号偏移, 相加 (成员序号偏移, 1))
            .如果真结束
            ??? () ' <!!!> 将原项目后的节点与原项目+原项目占用空间总大小位置处节节点交换
        .变量循环尾 () ' 这个循环完成了后面的节点往前面移动,并赋予新的索引号
         ' 原成员序号 > 新成员序号
        赋值 (返回新节点ID, 新项目位置)
        赋值 (父项目结束位置, 相加 (返回新节点ID, 原项目子孙数量)) ' 这个父项目结束位置现在用于记录当前项目结束位置  i2在这里记录原项目占用空间
    .判断结束
    赋值 (i2, 0) ' 初始化i2
    .变量循环首 (返回新节点ID, 父项目结束位置, 1, i) ' 从空项目补齐后面开始到 新的父项目结束位置
        赋值 (i2, 相加 (i2, 1))
        ??? () ' <!!!>
    .变量循环尾 () ' 这个循环完成了
.判断结束
返回 (真)

.子程序 取项目ID, 整数型, , 以表达式取出节点位置，失败返回0
.参数 表达式, 文本型, , 支持a.b.c[0]或者[0].a.b，特殊说明：顶级节点无论是否有名称固定使用空表达式
.参数 指定开始ID, 整数型, 可空, 从1开始,该参数用于指定节点的查找位置,旨在出现同名的表达式的节点时也能够顺利找到需要的节点
.参数 快速匹配, 逻辑型, 可空, 只在指定了开始位置时有效，若本参数为真，那么指定位置对应的父节点已完成匹配,不再去做检查其父节点以提高速度,默认为假。

.局部变量 记录, 整数型, , , 
.局部变量 节点数, 整数型, , , 
.局部变量 表达式组, 文本型, , "0", 
.局部变量 表达式层数, 整数型, , , 
.局部变量 当前表达式层次, 整数型, , , 
.局部变量 当前节点层次, 整数型, , , 
.局部变量 匹配层数, 整数型, , , 

赋值 (节点数, 取数组成员数 (集_节点组))
.判断开始 (或者 (等于 (节点数, 0), 大于 (指定开始ID, 节点数))) ' 开始位置大于节点数,或者没有节点直接返回0
    返回 (0)
.判断 (并且 (小于 (指定开始ID, 2), 等于 (表达式, “”))) ' 开始位置为1且表达式为空,说明去顶级节点
    返回 (1)
.默认
    
.判断结束
赋值 (表达式组, 分割文本 (子文本替换 (表达式, “[”, “.[”, , , 真), “.”, )) ' 先去掉数组前面的. 再统一加上,这句代码不可少.
.如果真 (等于 (取文本右边 (表达式, 1), “.”))
    加入成员 (表达式组, “”) ' 以点结尾的易语言会少分割一个成员，这里自动补上
.如果真结束
赋值 (表达式层数, 取数组成员数 (表达式组))
.如果真 (并且 (大于 (表达式层数, 1), 等于 (表达式组 [1], “”), 等于 (取文本左边 (表达式组 [2], 1), “[”))) ' 以下代码用于过滤首层即为数组的情况，分割时会多一个空的成员
    删除成员 (表达式组, 1, 1)
    赋值 (表达式层数, 相减 (表达式层数, 1))
.如果真结束
.如果真 (等于 (表达式层数, 0)) ' 表达式为空的情况
    赋值 (表达式层数, 1)
    加入成员 (表达式组, “”)
.如果真结束
.如果真 (等于 (取文本右边 (表达式, 1), “.”)) ' 有个.说明要取无名称成员的属性
     ' 表达式层数 ＝ 表达式层数 ＋ 1
     ' 加入成员 (表达式组, “”)
.如果真结束
赋值 (当前表达式层次, 1)
.判断开始 (或者 (小于 (指定开始ID, 2), 等于 (快速匹配, 假))) ' 开始位置=0说明默认参数1,等于1时,记录不能减少1,否则将变成从零开始了.
    赋值 (记录, 1)
.默认
    赋值 (当前节点层次, 相减 (集_节点组 [指定开始ID], 层次, 2)) ' 过滤掉首层，即第一项固定“json”项目
    赋值 (匹配层数, 当前表达式层次)
    赋值 (当前表达式层次, 相加 (当前表达式层次, 1))
    赋值 (记录, 相减 (指定开始ID, 1)) ' 这里-1主要是由于下面开始时记录会先发生+1,平衡处理
.判断结束
.判断循环首 (真) ' 这里请允许死循环，去掉勾选：【工具】-【系统配置】-【编译】-【编译时是否检查死循环代码】
    赋值 (记录, 相加 (记录, 1)) ' 也就是循环从2开始
    .如果真 (大于 (记录, 节点数))
        跳出循环 ()
    .如果真结束
    赋值 (当前节点层次, 相减 (集_节点组 [记录], 层次, 1)) ' 过滤掉首层，即第一项固定“json”项目
     ' 调试输出 (“搜索到JSON的二级顶级目录”, 记录)
    .如果真 (小于 (当前节点层次, 1))
        .如果真 (并且 (等于 (表达式组 [1], “”), 等于 (表达式层数, 1), 大于或等于 (记录, 指定开始ID)))
            返回 (记录)
        .如果真结束
        到循环尾 ()
    .如果真结束
    .判断开始 (小于 (当前表达式层次, 当前节点层次)) ' 进入表达式层次的下一层的子项目内：这一层未匹配，下一层不去理会
        
    .判断 (大于 (当前表达式层次, 当前节点层次)) ' 进入当前表达式层次的上一层或几层，那么这一层和上一层匹配作废
        赋值 (当前表达式层次, 当前节点层次) ' 从节点所带出的层次开始重新匹配
        赋值 (记录, 相减 (记录, 1)) ' 　本次重新匹配
    .判断 (等于 (集_节点组 [记录], 名称, 表达式组 [当前表达式层次]))
        .如果 (等于 (当前表达式层次, 表达式层数)) ' 完成所有匹配
            .如果真 (大于或等于 (记录, 指定开始ID))
                返回 (记录)
            .如果真结束
            调试输出 (“表达式到节点位置() 检索到指定开始位置之前的匹配项目,位置:”, 记录)
        .否则
            赋值 (匹配层数, 当前表达式层次)
            赋值 (当前表达式层次, 相加 (当前表达式层次, 1))
        .如果结束
        
    .默认
        
    .判断结束
    
.判断循环尾 ()
返回 (0)


.子程序 取父项目ID, 整数型, , 取出父节点的位置，成功返回父节点位置，失败返回0
.参数 表达式, 文本型, 可空, 本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 取父层数, 整数型, 可空, 注意不要超出所有父节点，如a.b，最多只能到获取2层父节点，如果超出则失败。本参数默认为1，本参数为零时返回当前表达式节点位置
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回表达式对应的节点位置，这个位置并父节点位置

.局部变量 i, 整数型, , , 
.局部变量 当前层次, 整数型, , , 

.如果真 (是否为空 (取父层数))
    赋值 (取父层数, 1)
.如果真结束
赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.判断开始 (等于 (取父层数, 0)) ' 父层次等于0
    返回 (返回节点ID)
.判断 (小于 (返回节点ID, 2)) ' 第一个节点或者表达式参数错误均返回0
    返回 (0)
.默认
    赋值 (当前层次, 集_节点组 [返回节点ID], 层次)
    .变量循环首 (返回节点ID, 1, -1, i)
        .如果真 (小于 (集_节点组 [i], 层次, 当前层次))
            赋值 (取父层数, 相减 (取父层数, 1)) ' 下一次少取一个层次
            .如果真 (等于 (取父层数, 0))
                返回 (i)
            .如果真结束
            赋值 (当前层次, 集_节点组 [i], 层次)
        .如果真结束
        
    .变量循环尾 ()
    返回 (0) ' 循环完全结束了,说明失败
.判断结束


.子程序 取子项目ID, 整数型, , 取出父节点的位置，成功返回父节点位置，失败返回0
.参数 表达式, 文本型, 可空, 本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 子项目索引, 整数型, , 该值从0开始,如果超出最大子项目,则失败.
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回表达式对应的节点位置，这个位置并父节点位置

.局部变量 i, 整数型, , , 
.局部变量 当前层次, 整数型, , , 
.局部变量 起始层次, 整数型, , , 
.局部变量 当前索引, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.判断开始 (或者 (等于 (返回节点ID, 0), 小于 (节点ID, 0))) ' <0 负数,参数错误
    返回 (0)
.默认
    赋值 (起始层次, 相加 (集_节点组 [返回节点ID], 层次, 1))
    .变量循环首 (相加 (返回节点ID, 1), 取数组成员数 (集_节点组), 1, i)
        .判断开始 (大于 (集_节点组 [i], 层次, 起始层次))
             ' 子层次
        .判断 (等于 (集_节点组 [i], 层次, 起始层次))
            .如果真 (等于 (子项目索引, 当前索引))
                返回 (i)
            .如果真结束
            赋值 (当前索引, 相加 (当前索引, 1)) ' 兄弟层次
        .默认
            跳出循环 () ' 父层次，直接结束循环
        .判断结束
        
    .变量循环尾 ()
    返回 (0) ' 循环完全结束了,说明失败
.判断结束


.子程序 取项目兄弟排行, 整数型, , 成功返回该项目先对父项目的成员下标,从0开始,失败返回-1
.参数 表达式, 文本型, 可空, 本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回表达式对应的节点位置，这个位置并父节点位置

.局部变量 兄弟排行, 整数型, , , 
.局部变量 开始层次, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0))
    返回 (选择 (等于 (表达式, “”), -1, 0))
.如果真结束
赋值 (开始层次, 集_节点组 [返回节点ID], 层次)
.变量循环首 (相减 (返回节点ID, 1), 1, -1, i)
    .判断开始 (等于 (集_节点组 [i], 层次, 开始层次))
        赋值 (兄弟排行, 相加 (兄弟排行, 1))
    .判断 (小于 (集_节点组 [i], 层次, 开始层次)) ' 父层次了.
        跳出循环 ()
    .默认
        
    .判断结束
    
.变量循环尾 ()
返回 (兄弟排行)

.子程序 取项目数据文本, 整数型, , 成功取出的节点数,失败返回0
.参数 表达式, 文本型, 可空, 可提供表达式，如果不提供表达式则取出所有数据文本,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 返回文本, 文本型, , 提供一个变量接收返回文本
.参数 返回类型, 整数型, 参考 可空, 如果提供了变量则返回该数据文本的类型
.参数 是否格式化, 逻辑型, 可空, 默认不格式化
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回对应的节点位置

.局部变量 快速文本, 未知类型0x40001, , , 
.局部变量 i, 整数型, , , 
.局部变量 起始层次, 整数型, , , 
.局部变量 父子状态栈, 字节型, , "0", 
.局部变量 当前堆栈层数, 整数型, , , 
.局部变量 当前缩进数量, 整数型, , , 
.局部变量 已有成员, 逻辑型, , , 
.局部变量 回收堆栈截止, 整数型, , , 
.局部变量 i2, 整数型, , , 
.局部变量 取出节点数, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0))
    返回 (0)
.如果真结束
赋值 (起始层次, 集_节点组 [返回节点ID], 层次)
赋值 (当前堆栈层数, 起始层次)
.变量循环首 (返回节点ID, 取数组成员数 (集_节点组), 1, i) ' 这个循环用于
    .如果真 (并且 (小于或等于 (集_节点组 [i], 层次, 起始层次), 不等于 (i, 返回节点ID))) ' 大于说明到了自己父级位置,等于说明到了起始节点兄弟位置
        跳出循环 ()
    .如果真结束
    .如果真 (小于 (集_节点组 [i], 层次, 当前堆栈层数)) ' 父子状态堆栈回收
        赋值 (回收堆栈截止, 相加 (相减 (取数组成员数 (父子状态栈), 相减 (当前堆栈层数, 集_节点组 [i], 层次)), 1))
        .变量循环首 (取数组成员数 (父子状态栈), 回收堆栈截止, -1, i2) ' 父子状态栈回收
            赋值 (当前缩进数量, 相减 (当前缩进数量, 1))
            快速文本.未知支持库函数_27 (相加 (选择 (是否格式化, 相加 (#换行符, 取重复文本 (当前缩进数量, #制表符)), “”), 多项选择 (相减 (父子状态栈 [i2], 3), “}”, “]”)))
        .变量循环尾 ()
         ' 当前堆栈层数 ＝ 集_节点组 [i].层次    '保险起见用下面那种避免节点信息有误导致崩溃
        赋值 (当前堆栈层数, 相加 (起始层次, 当前缩进数量))
         ' 删除成员 (父子状态栈, 取数组成员数 (父子状态栈) － 回收堆栈数 ＋ 1, 回收堆栈数)
        删除成员 (父子状态栈, 回收堆栈截止, 相加 (相减 (取数组成员数 (父子状态栈), 回收堆栈截止), 1))
        赋值 (已有成员, 真) ' 有括号后，说明已有成员，意味着首个成员前需打逗号
    .如果真结束
    .如果真 (已有成员)
        快速文本.未知支持库函数_27 (相加 (“,”, 选择 (是否格式化, #换行符, “”)))
    .如果真结束
    .如果真 (是否格式化)
        快速文本.未知支持库函数_27 (取重复文本 (当前缩进数量, #制表符))
    .如果真结束
    .如果真 (等于 (集_节点组 [i], 成员类型, #类型_对象)) ' 对象的成员需要附带成员名
        快速文本.未知支持库函数_27 (相加 (#引号, 集_节点组 [i], 名称, #引号, “:”, 选择 (是否格式化, #制表符, “”)))
    .如果真结束
    .如果 (或者 (等于 (集_节点组 [i], 类型, #类型_对象), 等于 (集_节点组 [i], 类型, #类型_数组)))
         ' .如果真 (是否格式化)
             ' 快速文本.添加 (#换行符 ＋ 取重复文本 (当前缩进数量, #制表符))
        .如果真结束
        赋值 (当前缩进数量, 相加 (当前缩进数量, 1))
        赋值 (当前堆栈层数, 相加 (当前堆栈层数, 1))
        加入成员 (父子状态栈, 集_节点组 [i], 类型)
        .如果 (并且 (是否格式化, 等于 (集_节点组 [i], 成员类型, #类型_对象))) ' 第一个字符不为空则说明已有字符了，必须换行
            快速文本.未知支持库函数_27 (相加 (#换行符, 取重复文本 (相减 (当前缩进数量, 1), #制表符), 选择 (等于 (集_节点组 [i], 类型, #类型_对象), “{”, “[”))) ' 除了第一个以为其他都要换行
        .否则
            快速文本.未知支持库函数_27 (选择 (等于 (集_节点组 [i], 类型, #类型_对象), “{”, “[”))
        .如果结束
        快速文本.未知支持库函数_27 (选择 (是否格式化, #换行符, “”))
        赋值 (已有成员, 假)
    .否则
        .判断开始 (或者 (等于 (集_节点组 [i], 类型, #类型_文本), 等于 (集_节点组 [i], 类型, #类型_未知))) ' 文本型的值需要用括号包起来，其他类型则不需要
            快速文本.未知支持库函数_27 (相加 (#引号, 集_节点组 [i], 值, #引号))
        .判断 (等于 (集_节点组 [i], 类型, #类型_空)) ' 无论是正确的空类型还是错误的空类型均转换到小写的null形式
            快速文本.未知支持库函数_27 (“null”)
        .判断 (等于 (集_节点组 [i], 类型, #类型_逻辑)) ' 逻辑型一律转换到小写形式
            快速文本.未知支持库函数_27 (到小写 (集_节点组 [i], 值))
        .默认
            快速文本.未知支持库函数_27 (集_节点组 [i], 值)
        .判断结束
        赋值 (已有成员, 真)
    .如果结束
    赋值 (取出节点数, 相加 (取出节点数, 1))
.变量循环尾 ()
.变量循环首 (取数组成员数 (父子状态栈), 1, -1, i2) ' 父子状态堆栈回收
    赋值 (当前缩进数量, 相减 (当前缩进数量, 1))
    快速文本.未知支持库函数_27 (相加 (选择 (是否格式化, 相加 (#换行符, 取重复文本 (当前缩进数量, #制表符)), “”), 多项选择 (相减 (父子状态栈 [i2], 3), “}”, “]”)))
.变量循环尾 ()
.如果真 (等于 (取出节点数, 1))
    快速文本.未知支持库函数_27 (#换行符) ' 当只有一个成员是则在尾部添加一个换行符,以免数值或者逻辑型空类型不能被及时解析.
.如果真结束
赋值 (返回文本, 快速文本.未知支持库函数_24 ())
返回 (取出节点数)

.子程序 插入成员项目, 整数型, , 成功返回项目ID,失败返回0，插入一个空类型节点,请根据返回的位置再调用 置项目数据（）或 值项目值() \ 置项目数据文本()
.参数 父项目表达式, 文本型, 可空, 可提供表达式，如果不提供表达式则取出所有数据文本,两个参数选填一个,节点位置优先
.参数 父项目ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先。如果要插入第一级节点记得这里一定要填0
.参数 子项目下标, 整数型, 可空, 默认该项目下最后成员后面
.参数 项目名称, 文本型, 可空, 默认空名称。如果插入再数组下会自动根据自动命名。

.局部变量 项目的位置, 整数型, , , 
.局部变量 项目子项数, 整数型, , , 
.局部变量 项目子孙数, 整数型, , , 
.局部变量 实际子项目下标, 整数型, , , 
.局部变量 实际子项目名称, 文本型, , , 
.局部变量 补齐节点, JSON节点, , , 
.局部变量 补齐节点组, JSON节点, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 插入位置, 整数型, , , 

赋值 (项目的位置, _选择节点ID (父项目表达式, 父项目ID))
.如果真 (并且 (等于 (项目的位置, 0), 是否为空 (父项目ID))) ' 项目位置为0且是因为表达式错误引起
    返回 (0)
.如果真结束
.如果真 (并且 (不等于 (项目的位置, 0), 不等于 (集_节点组 [项目的位置], 类型, #类型_对象), 不等于 (集_节点组 [项目的位置], 类型, #类型_数组)))
    返回 (0)
.如果真结束
赋值 (项目子项数, 取子项目数 (项目的位置))
赋值 (项目子孙数, 取子孙项目数 (项目的位置))
.如果 (是否为空 (子项目下标))
    .判断开始 (是否为空 (项目名称))
        赋值 (实际子项目下标, 项目子项数) ' 下标从0开始,所以这里不应该再+1了
    .默认
        赋值 (实际子项目下标, 成员名到下标 (项目名称))
        .如果真 (等于 (实际子项目下标, -1))
            赋值 (实际子项目下标, 项目子项数) ' 索引不对设为插入到最后面
        .如果真结束
        
    .判断结束
    
.否则
    赋值 (实际子项目下标, 子项目下标) ' 没有索引,插到最后面
.如果结束
.如果 (等于 (项目的位置, 0))
    赋值 (补齐节点.层次, 1)
.否则
    赋值 (补齐节点.层次, 相加 (集_节点组 [项目的位置], 层次, 1))
.如果结束
赋值 (补齐节点.类型, #类型_空)
赋值 (补齐节点.值, “null”)
.如果 (或者 (等于 (项目的位置, 0), 等于 (集_节点组 [项目的位置], 类型, #类型_对象))) ' 区分对象还是数组成员
    赋值 (补齐节点.成员类型, #类型_对象)
    赋值 (实际子项目名称, 项目名称)
.否则
    赋值 (实际子项目名称, 相加 (“[”, 到文本 (实际子项目下标), “]”))
    赋值 (补齐节点.成员类型, #类型_数组)
    .变量循环首 (项目子项数, 相减 (实际子项目下标, 1), 1, i) ' 为数组插入时,自动补齐不够的成员
        赋值 (补齐节点.名称, 相加 (“[”, 到文本 (i), “]”))
        加入成员 (补齐节点组, 补齐节点)
    .变量循环尾 ()
    插入成员 (集_节点组, 相加 (项目的位置, 项目子孙数, 1), 补齐节点组)
    赋值 (项目子孙数, 相加 (项目子孙数, 取数组成员数 (补齐节点组)))
.如果结束
赋值 (补齐节点.名称, 实际子项目名称)
.如果 (小于 (实际子项目下标, 项目子项数)) ' 下标还没有数量大,插在项目中间
    赋值 (插入位置, 取子项目ID (项目的位置, 实际子项目下标, ))
    .如果真 (并且 (不等于 (项目的位置, 0), 等于 (集_节点组 [项目的位置], 类型, #类型_数组)))
        .变量循环首 (插入位置, 相加 (项目的位置, 项目子孙数), 1, i) ' 数组节点在中间插入后需要纠正后面原有节点的索引值
            .判断开始 (大于 (集_节点组 [i], 层次, 补齐节点.层次))
                 ' 孙项目不用理会
            .判断 (等于 (集_节点组 [i], 层次, 补齐节点.层次))
                赋值 (实际子项目下标, 相加 (实际子项目下标, 1))
                赋值 (集_节点组 [i], 名称, 相加 (“[”, 到文本 (实际子项目下标), “]”))
            .默认
                跳出循环 ()
            .判断结束
            
        .变量循环尾 ()
    .如果真结束
    
.否则
    赋值 (插入位置, 相加 (项目的位置, 项目子孙数, 1)) ' 插入到最后面
.如果结束
插入成员 (集_节点组, 插入位置, 补齐节点)
.判断开始 (或者 (小于 (实际子项目下标, 项目子项数), 等于 (项目的位置, 0)))
    
.判断 (等于 (集_节点组 [项目的位置], 类型, #类型_数组))
    赋值 (集_节点组 [项目的位置], 值, 相加 (“[ ”, 到文本 (相加 (实际子项目下标, 1)), “ ]”))
.默认
    赋值 (集_节点组 [项目的位置], 值, 相加 (“{ ”, 到文本 (相加 (实际子项目下标, 1)), “ }”))
.判断结束
返回 (插入位置)

.子程序 删除项目, 逻辑型, , 删除json中的某个节点及其子孙节点，成功返回真失败返回假。
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先

.局部变量 子孙成员数, 整数型, , , 
.局部变量 父节点, 整数型, , , 
.局部变量 原始名称, 文本型, , , 
.局部变量 对应层次, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 数组序号, 整数型, , , 
.局部变量 兄弟项目数, 整数型, , , 

赋值 (子孙成员数, 取子孙项目数 (表达式, 节点ID, 节点ID))
.如果真 (等于 (节点ID, 0))
    返回 (假)
.如果真结束
赋值 (父节点, 取父项目ID (节点ID, 1, ))
赋值 (原始名称, 集_节点组 [节点ID], 名称)
.如果 (等于 (父节点, 0)) ' 本身即顶级节点
    返回 (真)
.否则
    赋值 (兄弟项目数, 取子项目数 (父节点)) ' 更新成员数
    .如果 (等于 (集_节点组 [父节点], 类型, #类型_数组))
        赋值 (集_节点组 [父节点], 值, 相加 (“[ ”, 到文本 (相减 (兄弟项目数, 1)), “ ]”))
    .否则
        赋值 (集_节点组 [父节点], 值, 相加 (“{ ”, 到文本 (相减 (兄弟项目数, 1)), “ }”))
    .如果结束
    
.如果结束
删除成员 (集_节点组, 节点ID, 相加 (子孙成员数, 1)) ' 子孙成员数加上本身1个节点
.如果真 (等于 (集_节点组 [父节点], 类型, #类型_数组)) ' 删除了数组型的成员节点需要更新该节点后面的兄弟节点名称
    赋值 (对应层次, 相加 (集_节点组 [父节点], 层次, 1)) ' 父层次+1=原来层次
    赋值 (数组序号, 到整数 (取文本中间 (原始名称, 2, 相减 (取文本长度 (原始名称), 2)))) ' 数组序号即将前面后后面的一个字节都去掉即可得出,如[8] --> 8
    .变量循环首 (节点ID, 取数组成员数 (集_节点组), 1, i) ' 删除了原来成员后原来的节点位置成了下一个节点的位置
        .判断开始 (大于 (集_节点组 [i], 层次, 对应层次))
             ' 子级节点,不理会
        .判断 (等于 (集_节点组 [i], 层次, 对应层次))
            赋值 (集_节点组 [i], 名称, 相加 (“[”, 到文本 (数组序号), “]”))
            赋值 (数组序号, 相加 (数组序号, 1)) ' 兄节点
        .默认
            跳出循环 () ' 父级节点
        .判断结束
        
    .变量循环尾 ()
.如果真结束
返回 (真)

.子程序 置项目数据文本, 逻辑型, , 为一个项目赋值json代码，可以为所有类型，成功返回真，失败返回假
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 数据文本, 文本型, , 严格的JSON代码文本，可提供三种代码格式:“"对象成员名":对象值(这种方式可以是任意类型)” 、  “{...对象成员...}” 、 “[...数组成员...]”
.参数 是否更改属性名, 逻辑型, 可空, 默认假，如果填写真，且数据文本解析后成员类型为“对象成员”，则尝试改名，节点位置成员类型为“数组成员时”有名称要求，详见“置项目名称”方法，改名失败不会返回假。
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回对应的节点位置

.局部变量 无空文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 删除成员数, 整数型, , , 
.局部变量 json, 类_json_, , , 
.局部变量 错误代码, 整数型, , , 

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0)) ' 节点未找到
    返回 (假)
.如果真结束
赋值 (错误代码, json.解析文本 (数据文本, 真, 真))
.如果真 (不等于 (错误代码, 0))
    返回 (假)
.如果真结束
json.强制结束解析 ()
返回 (置项目数据 (返回节点ID, json, 是否更改属性名))

.子程序 置项目数据, 逻辑型, , 为项目赋值入另外一个“类_JSON_”的对象，可以为任意类型，成功返回真，失败返回假
.参数 表达式, 文本型, 可空, 支持a.b.c[0]或者[0].a.b,本参数不能为空,不能为最顶级的JSON对象赋值,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点位置或者表达式,两个参数选填一个,节点位置优先
.参数 JSON对象, 类_json_, , 从这个参数提供的“类_JSON_”类对象中复制节点数据到 本对象中，所提供的对象请注意完全正确解析，这里不再对所提供了对象进行错误检查。
.参数 是否更改属性名, 逻辑型, 可空, 默认假，如果填写真，且成员类型为“对象成员”，则尝试改名，节点位置成员类型为“数组成员时”有名称要求，详见“置项目名称”方法，改名失败不会返回假。
.参数 返回节点ID, 整数型, 参考 可空, 如果提供了变量则从本参数处返回对应的节点位置

.局部变量 新节点组, JSON节点, , "0", 
.局部变量 新节点数, 整数型, , , 
.局部变量 原节点数, 整数型, , , 
.局部变量 补充节点组, JSON节点, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 新名称, 文本型, , , 
.局部变量 层次差异, 整数型, , , 该值=原节点首层次-新节点首层次。        逆运算：新节点实际层次=新节点数据层次+该值

赋值 (返回节点ID, _选择节点ID (表达式, 节点ID))
.如果真 (等于 (返回节点ID, 0)) ' 节点未找到
    返回 (假)
.如果真结束
.如果真 (等于 (JSON对象.取类中总项目数 (), 0)) ' 提供的对象没有节点
    返回 (假)
.如果真结束
赋值 (新节点数, JSON对象.取项目所有节点 (1, 新节点组, 真))
赋值 (原节点数, 相加 (取子孙项目数 (返回节点ID, ), 1))
.如果 (大于 (新节点数, 原节点数))
    重定义数组 (补充节点组, 假, 相减 (新节点数, 原节点数)) ' 原来的节点成员过少，这里补上
    插入成员 (集_节点组, 相加 (返回节点ID, 原节点数), 补充节点组)
.否则
    删除成员 (集_节点组, 相加 (返回节点ID, 新节点数), 相减 (原节点数, 新节点数)) ' 原来的节点成员太多，删除
.如果结束
.如果 (并且 (是否更改属性名, 等于 (新节点组 [1].成员类型, #类型_对象))) ' 查看是否需要改名,如有需要则先备份名称
    赋值 (新名称, 新节点组 [1].名称)
.否则
    赋值 (是否更改属性名, 假)
.如果结束
赋值 (新节点组 [1].名称, 集_节点组 [返回节点ID], 名称) ' 先假设不改名,为新名称赋予原名
赋值 (新节点组 [1].成员类型, 集_节点组 [返回节点ID], 成员类型) ' 顶级节点成员类型需要继承原来的成员类型
赋值 (层次差异, 相减 (集_节点组 [返回节点ID], 层次, 新节点组 [1].层次))
.计次循环首 (新节点数, i) ' 新节点有多少就循环多少次
    赋值 (新节点组 [i], 层次, 相加 (新节点组 [i], 层次, 层次差异))
    ??? () ' <!!!> 变量一交换   i从1开始,所以返回节点位置+i后还有-1
.计次循环尾 ()
.如果真 (是否更改属性名) ' 如需改名调用本方法
    置项目名称 (返回节点ID, 新名称, 0, 返回节点ID) ' 由于新新项目名本身即节点中的值，所以无需转义
.如果真结束
返回 (真)

.子程序 取项目数据, 整数型, , 成功返回对象的节点数的节点数,失败返回0
.参数 表达式, 文本型, 可空, 可提供表达式，如果不提供表达式则取出所有数据文本,两个参数选填一个,节点位置优先
.参数 节点ID, 整数型, 可空, 可以直接指定节点ID或者表达式,两个参数选填一个,节点位置优先
.参数 返回JSON对象, 类_json_, , 提供一个变量接收返回的“类_JSON_”类型的对象，如果失败这个变量将被初始化

.局部变量 节点组, JSON节点, , "0", 
.局部变量 节点数, 整数型, , , 
.局部变量 层次差异, 整数型, , , 该值=1(默认顶级节点参差) - 顶级节点层次。  逆运算：节点实际层次=节点层次+本变量值
.局部变量 i, 整数型, , , 

赋值 (节点数, 取项目所有节点 (表达式, 节点ID, 节点组, 真))
.如果 (等于 (节点数, 0))
    返回 (0)
.否则
    赋值 (层次差异, 相减 (1, 节点组 [1].层次))
    .计次循环首 (节点数, i)
        赋值 (节点组 [i], 层次, 相加 (节点组 [i], 层次, 层次差异))
    .计次循环尾 ()
    返回JSON对象.初始化 ()
    返回JSON对象.取类中所有节点_交换变量 (节点组) ' 让这个对象内部的节点与取出的节点进行交换
.如果结束
返回 (节点数)

.子程序 生成表达式, 文本型, , 提供一个节点ID,返回与其对应的表达式
.参数 节点ID, 整数型, , 

.局部变量 返回文本, 文本型, , , 
.局部变量 父节点, 整数型, , , 
.局部变量 是否加点, 逻辑型, , , 
.局部变量 老爷子节点, 整数型, , , 

.如果真 (或者 (小于 (取数组成员数 (集_节点组), 节点ID), 小于 (节点ID, 2))) ' 第一个节点或者节点值过大
    返回 (“”)
.如果真结束
赋值 (父节点, 取父项目ID (节点ID, , ))
.如果真 (不等于 (父节点, 0))
    .循环判断首 ()
        赋值 (老爷子节点, 取父项目ID (父节点, , ))
        赋值 (是否加点, 并且 (不等于 (父节点, 0), 等于 (集_节点组 [父节点], 类型, #类型_对象), 不等于 (老爷子节点, 0)))
         ' 父节点 存在     且  父节点类型为对象      且   老爷子节点  存在
        .如果 (并且 (假, 等于 (集_节点组 [节点ID], 名称, “”))) ' 空名称自动放入“.”
            赋值 (返回文本, 相加 (选择 (是否加点, “.”, “”), #制表符, 返回文本))
        .否则
            赋值 (返回文本, 相加 (选择 (是否加点, “.”, “”), 集_节点组 [节点ID], 名称, 返回文本))
        .如果结束
        
        赋值 (节点ID, 父节点) ' 当前变父节点
        赋值 (父节点, 老爷子节点) ' 父节点变老爷子节点
    .循环判断尾 (不等于 (老爷子节点, 0))
.如果真结束
返回 (返回文本)

.子程序 解析文本, 整数型, , 成功返回0，失败返回出错位置，调用此方法每次解析前会自动初始化
.参数 欲解析的文本, 文本型, , json的文本数据
.参数 严格模式, 逻辑型, 可空, 非严格模式下忽略一切错误。这里可以设置是否启用严格模式，如果为空则采用上一次设置，严格模式初始化后自动关闭
.参数 允许顶级JSON命名, 逻辑型, 可空, 默认假,JSON标准是不允许的,但某种情况下我们需要某个对象或者文本节点无损解析对象名,请设置为真,示例 "一级"{"二级":"2"}，该选项初始化后自动关闭

返回 (解析字节集 (到字节集 (欲解析的文本), 严格模式, 允许顶级JSON命名))

.子程序 解析字节集, 整数型, , 主要应对磁盘中读入的文件无需再转换文本型，提高效率 成功返回真，失败返回假，调用此方法每次解析前会自动初始化
.参数 欲解析的字节集, 字节集, , json的字节集数据
.参数 严格模式, 逻辑型, 可空, 非严格模式下忽略一切错误。这里可以设置是否启用严格模式，如果为空则采用上一次设置，严格模式初始化后自动关闭
.参数 允许顶级JSON命名, 逻辑型, 可空, 默认假,JSON标准是不允许的,但某种情况下我们需要某个对象或者文本节点无损解析对象名,请设置为真,示例 "一级"{"二级":"2"}，该选项初始化后自动关闭

初始化 ()
赋值 (集_严格模式, 严格模式)
加入字节集 (欲解析的字节集, , 允许顶级JSON命名)
强制结束解析 ()
返回 (集_错误代码)

.子程序 加入字节集, 整数型, , 成功返回0,出错返回错误代码，一旦出错必须重新初始化才可以再次使用。
.参数 json字节集, 字节集, , 
.参数 严格模式, 逻辑型, 可空, 非严格模式下忽略一切错误。这里可以设置是否启用严格模式，如果为空则采用上一次设置，严格模式初始化后自动关闭
.参数 允许顶级JSON命名, 逻辑型, 可空, 默认同上一次设置,仅在0节点时有效,,JSON标准是不允许的,但某种情况下我们需要某个对象或者文本节点无损解析对象名,请设置为真,示例 "一级"{"二级":"2"}，该选项初始化后自动关闭

.局部变量 长度, 整数型, , , 
.局部变量 记录, 整数型, , , 
.局部变量 字符码, 字节型, , , 
.局部变量 成员数, 整数型, , , 

.如果真 (等于 (取数组成员数 (集_节点组), 0))
    赋值 (集_允许顶级命名, 允许顶级JSON命名)
.如果真结束
.如果真 (等于 (是否为空 (严格模式), 假))
    赋值 (集_严格模式, 严格模式)
.如果真结束
赋值 (长度, 取字节集长度 (json字节集))
.判断循环首 (小于 (记录, 长度))
    赋值 (记录, 相加 (记录, 1))
    赋值 (字符码, json字节集 [记录])
    .判断开始 (不等于 (集_出错位置, 0)) ' 出错了，直接返回
        强制结束解析 ()
        返回 (集_错误代码)
    .判断 (等于 (字符码, #字符码_换行)) ' \n换行符出现时行号+1,列号清零
        赋值 (集_行号, 相加 (集_行号, 1))
        赋值 (集_列号, 0) ' 准确来说\n换行符不表示清零列号,但通常来说\n 换行都是与\r 回车符(列号到最前面)一起出现的,则这里一起清零算了
    .判断 (等于 (字符码, #字符码_回车)) ' 回车不再理会,一个完整的换行由 回车\r 和 换行\n 组成
        
    .默认
        赋值 (集_列号, 相加 (集_列号, 1))
    .判断结束
     ' 调试输出 (字符 (字符码))
    赋值 (集_代码长度, 相加 (集_代码长度, 1)) ' 记录代码长度，主要作用于确定出错位置
    赋值 (成员数, 取数组成员数 (集_分析状态组)) ' 有改进空间'
    .判断开始 (并且 (不等于 (成员数, 0), 不等于 (集_分析状态组 [成员数], 0)))
        .判断开始 (等于 (集_分析状态组 [成员数], #状态_大括号)) ' 大括号
            _大括号 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_方括号)) ' 方括号
            _方括号 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_获取其他)) ' 引号
            _对象值_获取其他 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_对象名_获取))
            _对象名_获取 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_等待冒号))
            _对象值_等待冒号 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_准备获取))
            _对象值_准备获取 (字符码)
        .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_获取文本))
            _对象值_获取文本 (字符码)
        .默认
             ' 这个分支为无效
        .判断结束
        
    .判断 (大于 (取数组成员数 (集_节点组), 0))
        .如果真 (并且 (不等于 (字符码, #字符码_空格), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行))) ' 对象结束后运行空字符
            赋值 (集_错误代码, 1)
            赋值 (集_出错位置, 集_代码长度)
            赋值 (集_错误说明, 未知支持库函数_84 (“JSON代码已经完毕，所有对象括号已匹配完毕，若要重新解析请先初始化。%s调用方法:加入json字节集()”, #换行符))
            返回 (集_错误代码)
        .如果真结束
        
    .判断 (或者 (等于 (字符码, #字符码_左大括号), 等于 (字符码, #字符码_左方括号))) ' 只能从大括号{对象开头或者从数组方括号[开头
        赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
        重定义数组 (集_节点组, 假, 1)
        重定义数组 (集_节点索引组, 假, 1)
        赋值 (集_当前层次, 1)
        赋值 (集_节点索引组 [1], 1)
        赋值 (集_节点组 [1].类型, 选择 (等于 (字符码, #字符码_左大括号), #类型_对象, #类型_数组)) ' 赋予类型与层次
        赋值 (集_节点组 [1].层次, 1)
        赋值 (集_当前层次, 相加 (集_当前层次, 1))
        加入成员 (集_分析状态组, 选择 (等于 (字符码, #字符码_左大括号), #状态_大括号, #状态_方括号))
        加入成员 (集_节点索引组, 相加 (成员数, 1))
    .判断 (并且 (集_允许顶级命名, 等于 (字符码, #字符码_引号)))
        赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
        加入成员 (集_分析状态组, #状态_大括号) ' 这里加入分析状态是十分不科学的,因为这里并不能确定父节点就是一个对象,或者说根本就没有父节点,这样便导致了不再能被
        赋值 (集_当前层次, 1)
        _加入节点 (#状态_对象名_获取)
    .判断 (等于 (集_严格模式, 假)) ' 在非严格模式下，全部忽略
        
    .判断 (并且 (不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_空格))) ' 严格模式下这些符号不允许
        赋值 (集_错误代码, 2)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“JSON代码起始文本应该以大括号%s{%s或者方括号%s[%s开头%s调用方法:加入json字节集()”, #左引号, #右引号, #左引号, #右引号, #换行符))
        返回 (集_错误代码)
    .默认
        
    .判断结束
    
.判断循环尾 ()
.如果真 (不等于 (集_错误代码, 0))
    强制结束解析 ()
.如果真结束
返回 (集_错误代码)


.子程序 加入文本, 整数型, , 正常解析返回0，严格模式下出错返回错误代码可以分批加入解析，再大数据也不卡机！
.参数 json文本, 文本型, , 
.参数 严格模式, 逻辑型, 可空, 非严格模式下忽略一切错误。这里可以设置是否启用严格模式，如果为空则采用上一次设置，严格模式初始化后自动关闭
.参数 允许顶级JSON命名, 逻辑型, 可空, 默认同上一次设置,仅在0节点时有效,JSON标准是不允许的,但某种情况下我们需要某个对象或者文本节点无损解析对象名,请设置为真,示例 "一级"{"二级":"2"}，该选项初始化后自动关闭

.如果真 (等于 (是否为空 (严格模式), 假))
    赋值 (集_严格模式, 严格模式)
.如果真结束
 ' 返回 (加入字节集 (到字节集 (json文本), , 允许顶级JSON命名))

.子程序 是否解析完毕, 逻辑型, , 已完毕返回真,未完毕返回假,,判断原理:所有值是都完全配对 且 具有节点
.判断开始 (等于 (取数组成员数 (集_节点组), 0)) ' 没有节点,直接返回假
    返回 (假)
.判断 (等于 (取数组成员数 (集_分析状态组), 0)) ' 分析状态全部完毕
    返回 (真)
.默认
    返回 (并且 (等于 (取数组成员数 (集_分析状态组), 1), 集_允许顶级命名, 等于 (集_节点组 [1].成员类型, #类型_对象))) ' 允许顶级节点命名 且 顶级节点确实已命名(顶级节点被认定非独立节点而是对象子节点)
.判断结束


.子程序 强制结束解析, 逻辑型, , 强制结束解析,以刷新对象或数组的类型和实际成员数,自动补齐缺少的配对符号.
.局部变量 成员数, 整数型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 节点数, 整数型, , , 
.局部变量 剩余成员, 整数型, , , 
.局部变量 严格模式, 逻辑型, , , 

赋值 (节点数, 取数组成员数 (集_节点组))
.如果真 (等于 (节点数, 0))
    返回 (假)
.如果真结束
赋值 (严格模式, 集_严格模式)
赋值 (集_严格模式, 假)
赋值 (成员数, 取数组成员数 (集_分析状态组)) ' 有改进空间'
.判断开始 (并且 (集_允许顶级命名, 等于 (集_节点组 [1].成员类型, #类型_对象)))
    赋值 (剩余成员, 1)
    赋值 (循环次数, 相减 (成员数, 1))
.默认
    赋值 (剩余成员, 0)
    赋值 (循环次数, 成员数)
.判断结束
.计次循环首 (循环次数, )
    .判断开始 (小于或等于 (成员数, 剩余成员))
        跳出循环 () ' 确保不被多释放
    .判断 (等于 (集_分析状态组 [成员数], #状态_大括号)) ' 大括号
        _大括号 (#字符码_右大括号)
    .判断 (等于 (集_分析状态组 [成员数], #状态_方括号)) ' 方括号
        _方括号 (#字符码_右方括号)
    .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_获取其他)) ' 获取其他类型值时,遇到回车或者换行则认为断开点
        _对象值_获取其他 (#字符码_回车)
    .判断 (等于 (集_分析状态组 [成员数], #状态_对象名_获取)) ' 获取对象名
        .如果真 (集_文本转义状态) ' 转义状态时结尾为其输出一个\
            _对象名_获取 (#字符码_反斜杆)
        .如果真结束
        _对象名_获取 (#字符码_引号) ' 结束对象名获取
    .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_等待冒号))
        _对象值_等待冒号 (#字符码_冒号)
    .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_准备获取))
        _对象值_准备获取 (#字符码_回车)
    .判断 (等于 (集_分析状态组 [成员数], #状态_对象值_获取文本))
        .如果真 (集_文本转义状态) ' 转义状态时结尾为其输出一个\
            _对象值_获取文本 (#字符码_反斜杆)
        .如果真结束
        _对象值_获取文本 (#字符码_引号) ' 结束对象名获取
    .默认
         ' 这个分支为无效
    .判断结束
    赋值 (成员数, 取数组成员数 (集_分析状态组)) ' 有改进空间'
.计次循环尾 ()
赋值 (集_严格模式, 严格模式)
返回 (大于 (循环次数, 0))

.子程序 初始化, 空白型, , 初始化json解析类，在需要再次解析新的json语句时调用
赋值 (集_文本转义状态, 假)
赋值 (集_数组判断_上个节点数, 0)
清除数组 (集_节点组)
清除数组 (集_分析状态组)
清除数组 (集_数组成员数统计)
清除数组 (集_数组成员数统计)
清除数组 (集_对象成员数统计)
集_当前文本.未知支持库函数_26 ()
赋值 (集_严格模式, 假)
赋值 (集_代码长度, 0)
赋值 (集_出错位置, 0)
赋值 (集_错误说明, “”)
赋值 (集_错误代码, 0)
赋值 (集_允许顶级命名, 假)
赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
赋值 (集_行号, 0)
赋值 (集_列号, 0)

.子程序 _初始化, 空白型, , 下面的代码为内部方法,主要是处理json数据 为 节点数组 


.子程序 _销毁, 空白型, , 


.子程序 _选择节点ID, 整数型, , 从表达式或者从提供的位置中选择一个最合理的节点位置,默认节点位置优先,失败返回0,本方法为内部方法,不公开
.参数 表达式, 文本型, , 支持a.b.c[0]或者[0].a.b
.参数 节点ID, 整数型, , 直接指定一个位置,如果该位置无效时则考虑查找采用表达式,如果两个参数均无效,则返回0

.如果 (或者 (小于 (节点ID, 1), 大于 (节点ID, 取数组成员数 (集_节点组))))
    返回 (取项目ID (表达式, , )) ' 节点位置参数无效,则通过表达式查找{      表达式查找不到同样会返回0       }
.否则
    返回 (节点ID)
.如果结束


.子程序 _大括号, 空白型, , 这个状态是说明是刚获取到“{”字符，也就是对象的表层
.参数 字符码, 字节型, , 

.局部变量 节点索引, 整数型, , , 

.判断开始 (等于 (字符码, #字符码_引号))
    .如果真 (并且 (等于 (集_严格模式, 真), 等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)))
        赋值 (集_错误代码, 11)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“对象间的成员需要以逗号%s,%s隔开。%s调用方法:大括号()”, #左引号, #引号, #右引号, #换行符))
        返回 ()
    .如果真结束
    赋值 (集_无引号对象名, 假)
    _加入节点 (#状态_对象名_获取)
.判断 (或者 (等于 (字符码, #字符码_右大括号), 等于 (字符码, #字符码_右方括号)))
    .如果真 (并且 (集_严格模式, 等于 (字符码, #字符码_右方括号))) ' 严格模式下大括号结束符为右方括号,不允许
        赋值 (集_错误代码, 12)
        赋值 (集_错误说明, 未知支持库函数_84 (“对象结束符无法匹配，不应该为：],而应该为：}%s调用方法:大括号()”, #换行符))
        赋值 (集_出错位置, 集_代码长度) ' 严格模式下不允许未知类型
        返回 ()
    .如果真结束
    .判断开始 (不等于 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束))
        
    .判断 (集_严格模式)
        赋值 (集_错误代码, 15)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“对象结束时发现多给了逗号：%s,%s，或者是成员未命名与赋值。%s调用方法:大括号()”, #左引号, #右引号, #换行符))
        返回 ()
    .默认
        _加入节点 (#状态_对象名_获取) ' 非严格模式下允许不带引号
        赋值 (集_无引号对象名, 真)
        _对象名_获取 (#字符码_逗号) ' 获取一个空名成员
    .判断结束
    赋值 (节点索引, _取当前节点索引 ())
    .判断开始 (等于 (节点索引, 0))
        返回 () ' 出错了
    .判断 (大于或等于 (取数组成员数 (集_对象成员数统计), 集_当前层次))
        赋值 (集_节点组 [节点索引], 值, 相加 (“{ ”, 到文本 (集_对象成员数统计 [集_当前层次]), “ }”))
        赋值 (集_对象成员数统计 [集_当前层次], 0)
    .默认
        赋值 (集_节点组 [节点索引], 值, “{ 0 }”)
    .判断结束
     ' .如果真 (等于 (集_节点组 [节点索引], 名称, “”))
         ' .如果 (大于或等于 (取数组成员数 (集_数组成员数统计), 集_当前层次))
             ' 节点组 [节点索引].名称 ＝ “[” ＋ 到文本 (数组成员数统计 [当前层次] － 1) ＋ “]”
        .否则
             ' 节点组 [节点索引].名称 ＝ “[0]”
        .如果结束
        
    .如果真结束
    赋值 (集_当前层次, 相减 (集_当前层次, 1))
    删除成员 (集_分析状态组, 取数组成员数 (集_分析状态组), 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    赋值 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)
.判断 (并且 (集_严格模式, 等于 (字符码, #字符码_逗号)))
    .如果真 (不等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入))
        赋值 (集_错误代码, 13)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“对象%s{ }%s内定义了成员但该成员没有给定名称,或者是多给了逗号%s,%s%s调用方法:大括号()”, #左引号, #右引号, #左引号, #右引号, #换行符))
        返回 ()
    .如果真结束
    赋值 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束)
.判断 (等于 (集_严格模式, 假))
    .如果真 (并且 (不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_空格)))
        .如果 (并且 (等于 (字符码, #字符码_逗号), 等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)))
            赋值 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束)
        .否则
            _加入节点 (#状态_对象名_获取) ' 非严格模式下允许不带引号
            赋值 (集_无引号对象名, 不等于 (字符码, #字符码_逗号))
            _对象名_获取 (字符码)
        .如果结束
        
    .如果真结束
    
.判断 (并且 (不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_空格))) ' 严格模式下其他字符不允许
    赋值 (集_错误代码, 14)
    赋值 (集_出错位置, 集_代码长度)
    赋值 (集_错误说明, 未知支持库函数_84 (“对象大括号内%s{ }%s后面仅仅可以出现空字符或者引号%s%s%s%s调用方法:大括号()”, #左引号, #右引号, #左引号, #引号, #右引号, #换行符))
    返回 ()
.默认
     ' 获取到大括号后只能是等到引号才行，
.判断结束


.子程序 _对象名_获取, 空白型, , 这个状态说明正在获取对象名称
.参数 字符码, 字节型, , 

.判断开始 (并且 (集_无引号对象名, 或者 (等于 (字符码, #字符码_逗号), 等于 (字符码, #字符码_右大括号), 等于 (字符码, #字符码_右方括号)))) ' 无引号状态下,遇到逗号直接连值都不用管了
    .如果真 (等于 (字符码, #字符码_右方括号)) ' 无引号对象名是在非严格模式下成员名没有使用引号的标识,也就是说非严格模式下大括号{的结束符用成了],这里给它纠正
        赋值 (字符码, #字符码_右大括号)
    .如果真结束
    赋值 (集_节点组 [取数组成员数 (集_节点组)].名称, 集_当前文本.未知支持库函数_24 ())
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_准备获取)
    _对象值_准备获取 (字符码)
.判断 (并且 (集_严格模式, 或者 (等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_制表符))))
    赋值 (集_错误代码, 21)
    赋值 (集_错误说明, 未知支持库函数_84 (“成员名中不允许出现换行、回车、制表符(请用 \r \n \t 代替)%s调用方法:对象名_获取()”, #换行符))
    赋值 (集_出错位置, 集_代码长度)
    返回 ()
.判断 (或者 (等于 (字符码, #字符码_引号), 等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车), 并且 (集_无引号对象名, 等于 (字符码, #字符码_冒号)))) ' 除非引号出现，否则直接忽略
    赋值 (集_节点组 [取数组成员数 (集_节点组)].名称, 集_当前文本.未知支持库函数_24 ())
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_等待冒号)
.判断 (等于 (字符码, #字符码_制表符)) ' 按照json的规定文本中是不允许制表符的，否则有些程序可能不认，为了安全起见自动转义
    集_当前文本.未知支持库函数_27 (“\t”)
.判断 (并且 (不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行))) ' 忽略回车
    集_当前文本.未知支持库函数_27 (字符 (字符码))
.默认
    
.判断结束


.子程序 _对象值_等待冒号, 空白型, , 这个状态说明在对象值冒号出现前，未出现冒号则一直忽略
.参数 字符码, 字节型, , 

.判断开始 (等于 (字符码, #字符码_冒号))
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_准备获取)
.判断 (等于 (集_严格模式, 假))
    .如果真 (并且 (不等于 (字符码, #字符码_空格), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行))) ' 非严格模式下没有冒号照样继续
        赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_准备获取)
        _对象值_准备获取 (字符码)
    .如果真结束
    
.判断 (并且 (不等于 (字符码, #字符码_空格), 不等于 (字符码, #字符码_制表符), 不等于 (字符码, #字符码_回车), 不等于 (字符码, #字符码_换行))) ' 非严格模式下出现不该有的字符，可以认定为失败。
    赋值 (集_错误代码, 31)
    赋值 (集_错误说明, 未知支持库函数_84 (“成员值前缺少冒号%s:%s，成员名后只允许出现冒号。%s调用方法:对象值_等待冒号()”, #左引号, #右引号, #换行符))
    赋值 (集_出错位置, 集_代码长度)
    返回 ()
.默认
    
.判断结束


.子程序 _方括号, 空白型, , 这个状态是说明刚刚获取到“[”字符，也就是对象数组的表层
.参数 字符码, 字节型, , 

.局部变量 节点索引, 整数型, , , 
.局部变量 类型, 整数型, , , 
.局部变量 节点数量, 整数型, , , 

.判断开始 (等于 (字符码, #字符码_左大括号))
    赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
    _加入节点 (#状态_大括号)
.判断 (或者 (等于 (字符码, #字符码_右方括号), 等于 (字符码, #字符码_右大括号)))
    .如果真 (并且 (集_严格模式, 等于 (字符码, #字符码_右大括号)))
        赋值 (集_错误代码, 41)
        赋值 (集_错误说明, 未知支持库函数_84 (“数组结束符无法匹配，不应该为：},而应该为：]%s调用方法:方括号()”, #换行符))
        赋值 (集_出错位置, 集_代码长度) ' 严格模式下不允许未知类型
        返回 ()
    .如果真结束
    .判断开始 (不等于 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束)) ' 如果右方括号之前是一个逗号，但并为出现成员名，这里自动补齐一个空成员。
        
    .判断 (集_严格模式)
        赋值 (集_错误代码, 44)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“数组结束时发现多给了逗号：%s,%s，或者是成员未赋值，注意：不允许成员值全空(空类型请赋予%snull%s)。%s调用方法:方括号()”, #左引号, #右引号, #左引号, #右引号, #换行符))
        返回 ()
    .默认
        _加入节点 (#状态_对象值_准备获取)
        _对象值_准备获取 (字符码)
    .判断结束
    赋值 (节点索引, _取当前节点索引 ())
    .如果 (大于或等于 (取数组成员数 (集_数组成员数统计), 相加 (集_当前层次, 1)))
        赋值 (集_节点组 [节点索引], 值, 相加 (“[ ”, 到文本 (集_数组成员数统计 [相加 (集_当前层次, 1)]), “ ]”))
        赋值 (集_数组成员数统计 [相加 (集_当前层次, 1)], 0)
    .否则
        赋值 (集_节点组 [节点索引], 值, “[ 0 ]”)
    .如果结束
    赋值 (集_当前层次, 相减 (集_当前层次, 1))
    删除成员 (集_分析状态组, 取数组成员数 (集_分析状态组), 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    赋值 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)
.判断 (等于 (字符码, #字符码_逗号))
    .判断开始 (并且 (集_严格模式, 不等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入))) ' 逗号后面不允许再次出现逗号
        赋值 (集_错误代码, 43)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“获取对象值时发现成员结束符%s, %s，不允许成员值全空(空类型请赋予%snull%s)%s调用方法:方括号()”, #左引号, #右引号, #左引号, #右引号, #换行符))
        返回 ()
    .判断 (等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)) ' 成员后现在来个逗号，记录逗号状态即可
        赋值 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束)
    .默认
        _加入节点 (#状态_对象值_准备获取) ' 非成员后来个逗号，准备获取其值
        _对象值_准备获取 (字符码)
    .判断结束
     ' 集_逗号状态 ＝ #逗号状态_逗号后_允许插入_拒绝逗号结束
     ' 节点数量 ＝ 取数组成员数 (集_节点组)
     ' 调试输出 (“方括号后逗号”, 类型)
.判断 (或者 (等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_制表符), 等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行)))
     ' 获取到方括号后这些无意义码不用理会
.判断 (并且 (集_严格模式, 等于 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入))) ' 这里为除了逗号空格外的字符，前面有个判断：字符码 ＝ #字符码_逗号  字符码 ＝ #字符码_空格 或 字符码 ＝ #字符码_制表符 或 字符码 ＝ #字符码_回车 或 字符码 ＝ #字符码_换行
     ' 注意：   #逗号状态_括号外_允许逗号结束_拒绝插入_等同于成员后
    赋值 (集_错误代码, 42)
    赋值 (集_出错位置, 集_代码长度)
    赋值 (集_错误说明, 未知支持库函数_84 (“数组成员间缺少逗号分隔%s调用方法:方括号()”, #换行符))
    返回 ()
.默认
    _加入节点 (#状态_对象值_准备获取)
    _对象值_准备获取 (字符码)
.判断结束


.子程序 _对象值_准备获取, 空白型, , 准备获取对象的的类型或者值,右方括号断开
.参数 字符码, 字节型, , 

.判断开始 (等于 (字符码, #字符码_左大括号))
    赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
    集_当前文本.未知支持库函数_26 ()
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_大括号)
    赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_对象)
    赋值 (集_当前层次, 相加 (集_当前层次, 1))
.判断 (等于 (字符码, #字符码_左方括号))
    赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
    集_当前文本.未知支持库函数_26 ()
    赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_数组)
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_方括号)
    赋值 (集_当前层次, 相加 (集_当前层次, 1))
     ' 加入节点 (#状态_方括号)
.判断 (或者 (等于 (字符码, #字符码_逗号), 等于 (字符码, #字符码_右大括号), 等于 (字符码, #字符码_右方括号))) ' 终止符
    .如果真 (并且 (集_严格模式, 等于 (集_逗号状态, #逗号状态_逗号后_允许插入_拒绝逗号结束))) ' 严格模式下不允许无值的空类型
        赋值 (集_错误代码, 51)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“获取对象值时发现成员结束符%s%s%s，不允许成员值全空(空类型请赋予%snull%s)%s调用方法:对象值_准备获取()”, #左引号, 字符 (字符码), #右引号, #左引号, #右引号, #换行符))
        返回 ()
    .如果真结束
    赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_空)
    赋值 (集_节点组 [取数组成员数 (集_节点组)].值, “”)
    删除成员 (集_分析状态组, 取数组成员数 (集_分析状态组), 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    .如果真 (等于 (字符码, #字符码_右大括号))
        _大括号 (字符码)
    .如果真结束
    赋值 (集_逗号状态, 选择 (等于 (字符码, #字符码_逗号), #逗号状态_逗号后_允许插入_拒绝逗号结束, #逗号状态_成员后_允许逗号结束_拒绝插入))
.判断 (或者 (等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_制表符))) ' 在没有值出现前，这些字符会被忽略
     ' 这里对空格放行，上一层已然过滤
.判断 (等于 (字符码, #字符码_引号))
    赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
    集_当前文本.未知支持库函数_26 ()
    赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_文本)
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_获取文本)
.默认
    赋值 (集_逗号状态, #逗号状态_括号内_允许插入结束_拒绝逗号)
    集_当前文本.未知支持库函数_26 ()
    集_当前文本.未知支持库函数_27 (字符 (字符码))
    赋值 (集_分析状态组 [取数组成员数 (集_分析状态组)], #状态_对象值_获取其他)
.判断结束


.子程序 _对象值_获取其他, 空白型, , 处理其他，这些值遇到逗号或回车便会断开
.参数 字符码, 字节型, , 

.局部变量 文本, 文本型, , , 
.局部变量 状态组成员数, 整数型, , , 

.判断开始 (或者 (等于 (字符码, #字符码_逗号), 等于 (字符码, #字符码_右大括号), 等于 (字符码, #字符码_右方括号), 等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车))) ' 终止符
    赋值 (文本, 集_当前文本.未知支持库函数_24 ())
    .如果 (是否为数值文本 (文本))
        赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_数值)
    .否则
        赋值 (文本, 选择 (集_严格模式, 文本, 到小写 (文本))) ' 严格模式下区分大小写
        .判断开始 (或者 (等于 (文本, “false”), 等于 (文本, “true”)))
            赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_逻辑)
        .判断 (或者 (等于 (文本, “null”), 并且 (等于 (集_严格模式, 假), 等于 (文本, “”))))
            赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_空)
        .判断 (集_严格模式)
            赋值 (集_错误代码, 61)
            赋值 (集_节点组 [取数组成员数 (集_节点组)].类型, #类型_未知)
            赋值 (集_错误说明, 未知支持库函数_84 (“成员值类型无法确定，可能缺少引号或者大小写错误，(注意：逻辑型\空null类型只接受小写)，错误值：%s%s调用方法:对象值_获取其他()”, 文本, #换行符))
            赋值 (集_出错位置, 集_代码长度) ' 严格模式下不允许未知类型
            返回 ()
        .默认
            
        .判断结束
        
    .如果结束
    赋值 (集_节点组 [取数组成员数 (集_节点组)].值, 文本)
    赋值 (状态组成员数, 取数组成员数 (集_分析状态组))
    .判断开始 (或者 (并且 (不等于 (字符码, #字符码_右大括号), 不等于 (字符码, #字符码_右方括号)), 小于 (状态组成员数, 2)))
        
    .判断 (不等于 (多项选择 (集_分析状态组 [相减 (状态组成员数, 1)], #字符码_右大括号, #字符码_右方括号), 字符码)) ' 检查收尾结束符是否配对
         ' 无成员时为主线分析状态,成员值=1为“{”状态，2为“[”状态，3为取名称状态，4为
        .如果 (集_严格模式)
            赋值 (集_错误代码, 62)
            赋值 (集_错误说明, 未知支持库函数_84 (“%s结束符无法匹配，不应该为：%s,而应该为：%s%s调用方法:对象值_获取其他()”, 选择 (等于 (字符码, #字符码_右大括号), “数组”, “对象”), 字符 (字符码), 选择 (等于 (字符码, #字符码_右大括号), “]”, “}”), #换行符))
            赋值 (集_出错位置, 集_代码长度) ' 严格模式下不允许未知类型
            返回 ()
        .否则
            赋值 (字符码, 选择 (等于 (字符码, #字符码_右大括号), #字符码_右方括号, #字符码_右大括号)) ' 交换回来
        .如果结束
        
    .默认
        
    .判断结束
    删除成员 (集_分析状态组, 状态组成员数, 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    .判断开始 (等于 (字符码, #字符码_右大括号))
        _大括号 (字符码)
    .判断 (等于 (字符码, #字符码_右方括号))
        _方括号 (字符码)
    .默认
        
    .判断结束
    赋值 (集_逗号状态, 选择 (等于 (字符码, #字符码_逗号), #逗号状态_逗号后_允许插入_拒绝逗号结束, #逗号状态_成员后_允许逗号结束_拒绝插入))
.判断 (或者 (等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_制表符))) ' 空格什么的忽略
    
.默认
    集_当前文本.未知支持库函数_27 (字符 (字符码))
.判断结束


.子程序 _对象值_获取文本, 空白型, , 处理文本值，遇到回车忽略，遇到引号结束
.参数 字符码, 字节型, , 

.判断开始 (并且 (等于 (字符码, #字符码_引号), 等于 (集_文本转义状态, 假))) ' 终止符
    赋值 (集_节点组 [取数组成员数 (集_节点组)].值, 集_当前文本.未知支持库函数_24 ())
    删除成员 (集_分析状态组, 取数组成员数 (集_分析状态组), 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    赋值 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)
.判断 (并且 (集_严格模式, 或者 (等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_制表符)))) ' 值得注意的是严格模式下，文本中保护制表符是不允许的，需要转义成\t
    赋值 (集_错误代码, 71)
    赋值 (集_出错位置, 集_代码长度)
    赋值 (集_错误说明, 未知支持库函数_84 (“文本中不允许包含回车、换行、制表符，应分别用\r \n \t 代替%s调用方法:对象值_获取文本()”, #换行符))
    返回 ()
.判断 (或者 (等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车))) ' 非严格模式下可以被换行回车强迫中断
    赋值 (集_节点组 [取数组成员数 (集_节点组)].值, 集_当前文本.未知支持库函数_24 ())
    删除成员 (集_分析状态组, 取数组成员数 (集_分析状态组), 1)
    删除成员 (集_节点索引组, 取数组成员数 (集_节点索引组), 1)
    赋值 (集_逗号状态, #逗号状态_成员后_允许逗号结束_拒绝插入)
.判断 (或者 (等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_回车))) ' (\r\n)什么的直接忽略
    
.判断 (等于 (字符码, #字符码_制表符)) ' 按照json的规定文本中是不允许制表符的，否则有些程序可能不认，为了安全起见自动转义
    集_当前文本.未知支持库函数_27 (“\t”)
.默认
    集_当前文本.未知支持库函数_27 (字符 (字符码))
    .判断开始 (等于 (字符码, #字符码_反斜杆)) ' 转义字符：\
        赋值 (集_文本转义状态, 取反 (集_文本转义状态))
    .判断 (集_文本转义状态) ' 在转义状态下，遇到任意一个字符转义状态都将转为假
        赋值 (集_文本转义状态, 假)
    .默认
        
    .判断结束
    
.判断结束


.子程序 _取当前节点索引, 整数型, , 用于__取出当前结束符对应的节点
.局部变量 成员数, 整数型, , , 
.局部变量 返回值, 整数型, , , 

赋值 (成员数, 取数组成员数 (集_节点索引组))
.如果真 (等于 (成员数, 0)) ' 出现这个情况通常是由于在首个节点存在命名条件下且顶级节点已经结束时出现了结束符“}”或者“]”
    .如果真 (集_严格模式)
        赋值 (集_错误代码, 81)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“JSON顶级节点命名模式下,对象匹配结束后不应该出现字符:%s}%s%s调用方法:取当前节点索引()”, #左引号, #右引号, #换行符))
    .如果真结束
    返回 (0)
.如果真结束
赋值 (返回值, 集_节点索引组 [成员数])
.如果真 (大于 (返回值, 取数组成员数 (集_节点组)))
    .如果真 (集_严格模式)
        赋值 (集_错误代码, 82)
        赋值 (集_出错位置, 集_代码长度)
        赋值 (集_错误说明, 未知支持库函数_84 (“严重错误！因为%s集_节点索引组[]%s数组所记录的的结束符对应的节点超出了类中节点的最大值。%s可能原因：调用了%s取全部节点_交换变量()%s方法或其他交互变量的方法后没有再次调用该方法进行还原交换的变量所致。 %s调用方法:取当前节点索引()”, #左引号, #右引号, #换行符, #左引号, #右引号, #换行符))
    .如果真结束
    赋值 (返回值, 0)
.如果真结束
返回 (返回值)

.子程序 _加入节点, 空白型, , 每当增加成员或者对象、对象数组时调用此方法
.参数 要改变的状态, 整数型, , 

.局部变量 节点, JSON节点, , , 
.局部变量 当前状态, 整数型, , , 

 ' 在加入节点之前，为本身的类型赋值
赋值 (当前状态, 集_分析状态组 [取数组成员数 (集_分析状态组)])
加入成员 (集_分析状态组, 要改变的状态)
.判断开始 (并且 (等于 (要改变的状态, #状态_对象值_准备获取), 等于 (当前状态, #状态_方括号)))
     ' 当前层次 ＝ 当前层次 ＋ 1
    .如果真 (小于 (取数组成员数 (集_数组成员数统计), 相加 (集_当前层次, 1)))
        重定义数组 (集_数组成员数统计, 真, 相加 (集_当前层次, 1))
    .如果真结束
    赋值 (集_数组成员数统计 [相加 (集_当前层次, 1)], 相加 (集_数组成员数统计 [相加 (集_当前层次, 1)], 1))
    
    赋值 (节点.名称, 相加 (“[”, 到文本 (相减 (集_数组成员数统计 [相加 (集_当前层次, 1)], 1)), “]”))
    赋值 (节点.成员类型, #类型_数组)
     ' 节点.类型 ＝ #类型_数组
     ' 调试输出 (“当前层次：”, 当前层次, “当前状态：” ＋ 当前状态, “将转为：” ＋ 要改变的状态, “成员数：” ＋ 到文本 (数组成员数统计 [当前层次]))
.判断 (等于 (要改变的状态, #状态_大括号))
    赋值 (节点.类型, #类型_对象)
    赋值 (节点.层次, 集_当前层次) ' 对象的层次这里先给指定,待对象结束时则不再为其赋值
    赋值 (集_当前层次, 相加 (集_当前层次, 1))
    赋值 (节点.值, “{ 0 }”)
    .如果真 (等于 (当前状态, #状态_方括号))
        赋值 (节点.成员类型, #类型_数组)
        .如果真 (小于 (取数组成员数 (集_数组成员数统计), 集_当前层次))
            重定义数组 (集_数组成员数统计, 真, 集_当前层次)
        .如果真结束
        赋值 (集_数组成员数统计 [集_当前层次], 相加 (集_数组成员数统计 [集_当前层次], 1))
         ' 调试输出 (“当前层次：”, 当前层次, “当前状态：” ＋ 当前状态, “将转为：” ＋ 要改变的状态, “成员数：” ＋ 到文本 (数组成员数统计 [当前层次]))
        赋值 (节点.名称, 相加 (“[”, 到文本 (相减 (集_数组成员数统计 [集_当前层次], 1)), “]”))
    .如果真结束
    
    
.判断 (等于 (要改变的状态, #状态_方括号))
    赋值 (节点.类型, #类型_数组)
    赋值 (集_当前层次, 相加 (集_当前层次, 1))
    赋值 (节点.值, “[ 0 ]”)
.判断 (并且 (等于 (要改变的状态, #状态_对象名_获取), 等于 (当前状态, #状态_大括号)))
    .如果真 (小于 (取数组成员数 (集_对象成员数统计), 集_当前层次))
        重定义数组 (集_对象成员数统计, 真, 集_当前层次)
    .如果真结束
    赋值 (集_对象成员数统计 [集_当前层次], 相加 (集_对象成员数统计 [集_当前层次], 1))
    赋值 (节点.成员类型, #类型_对象)
     ' 调试输出 (“当前层次：”, 当前层次, “当前状态：” ＋ 当前状态, “将转为：” ＋ 要改变的状态, “成员数：” ＋ 到文本 (对象成员统计 [当前层次]))
.默认
    
.判断结束
.如果真 (等于 (节点.层次, 0))
    赋值 (节点.层次, 集_当前层次)
.如果真结束
集_当前文本.未知支持库函数_26 ()
加入成员 (集_节点组, 节点)
加入成员 (集_节点索引组, 取数组成员数 (集_节点组))

.程序集 杂项, , , 

.子程序 _处理事件, 空白型, , 比普通的处理事件速度要快3倍左右；
.如果真 (不等于 (GetInputState (), 0))
    处理事件 ()
.如果真结束


.子程序 _处理事件1, 空白型, , 暂时转让控制权，以便让 Windows 操作系统有机会处理其它的如用户键盘或鼠标输入等事件。直到操作系统处理并发送完程序队列中的所有事件后，命令才会返回。
.局部变量 CurrMsg, MSG, , , 

.判断循环首 (PeekMessage (CurrMsg, 0, 0, 0, 1)) ' #PM_REMOVE=1接收消息并从队列里除掉。
    TranslateMessage (CurrMsg)
    DispatchMessage (CurrMsg) ' 分发消息
.判断循环尾 ()

.子程序 _延时, 逻辑型, , 不占用cpu，窗口不卡死，不影响其它代码执行
.参数 延时间隔, 整数型, 可空, 1000毫秒 = 1秒  留空为无限等待
.参数 延时单位, 整数型, 可空, 默认为毫秒  0=毫秒  1=秒  2=分钟  3=小时

.局部变量 局_时间句柄, 整数型, , , 
.局部变量 局_时间, 程序延时, , , 

.判断开始 (并且 (等于 (延时单位, 0), 是否为空 (延时间隔)))
    赋值 (延时间隔, 相乘 (5000, 60, 60))
    赋值 (延时单位, 相乘 (5000, 60, 60))
.判断 (等于 (延时单位, 0))
    赋值 (延时单位, 1)
.判断 (等于 (延时单位, 1))
    赋值 (延时单位, 1000)
.判断 (等于 (延时单位, 2))
    赋值 (延时单位, 相乘 (1000, 60))
.判断 (等于 (延时单位, 3))
    赋值 (延时单位, 相乘 (1000, 60, 60))
.默认
    
.判断结束
赋值 (局_时间.成员_时间, 相乘 (-10, 延时间隔, 1000, 延时单位))
赋值 (局_时间句柄, CreateWaitableTimerA (0, 假, 0))
SetWaitableTimer (局_时间句柄, 局_时间, 0, 0, 0, 假)
.判断循环首 (不等于 (MsgWaitForMultipleObjects (1, 局_时间句柄, 假, -1, 255), 0))
    处理事件 ()
.判断循环尾 ()
CloseHandle (局_时间句柄)
返回 (真)

.子程序 _Dec2Hex, 文本型, , 10 转 16 进制（自动补零）
.参数 _dwValue, 整数型, , 

.局部变量 l_szHex, 文本型, , , 
.局部变量 l_dwLen, 整数型, , , 
.局部变量 l_szRet, 文本型, , , 

赋值 (l_szHex, 取十六进制文本 (_dwValue))
赋值 (l_dwLen, 取文本长度 (l_szHex))
赋值 (l_dwLen, 选择 (小于 (l_dwLen, 8), 相减 (8, l_dwLen), 0))
赋值 (l_szRet, 相加 (取重复文本 (l_dwLen, “0”), l_szHex))
返回 (l_szRet)

.子程序 系统_取用户名, 文本型, , 获取当前系统的用户名
.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, 取空白文本 (50))
.如果真 (不等于 (GetUserNameA (返回文本, 取文本长度 (返回文本)), 0))
    返回 (返回文本)
.如果真结束
返回 (“”)

.子程序 目录_取特定目录, 文本型, , 例子：目录_取特定目录 (#我的文档) 或 目录_取特定目录 (1) 等。本命令返回指定的Windows系统特定目录，所返回目录名以“\”符号结束，如失败返回空文本。本命令为初级命令。
.参数 类型, 空白型, 可空, 留空为桌面； 1: #我的文档;  2: #我的收藏夹;  3: #系统桌面;  4: #系统字体;  5: #开始菜单组;  6: #程序菜单组;  7: #启动菜单组;  8: #程序数据目录;  9: #Windows安装目录;  10: #Windows系统目录;  11: #临时文件目录;  12:系统缓存目录

.局部变量 临时文本, 文本型, , , 
.局部变量 blOK, 逻辑型, , , 
.局部变量 常数, 整数型, , , 
.局部变量 文本指针, 整数型, , , 

赋值 (临时文本, 取空白文本 (260))
.如果真 (等于 (类型, 0))
    赋值 (类型, 3)
.如果真结束
.判断开始 (并且 (大于或等于 (类型, 1), 小于或等于 (类型, 8)))
    赋值 (常数, 多项选择 (类型, 5, 6, 16, 20, 11, 2, 7, 26))
    .如果真 (SHGetSpecialFolderPath (0, 临时文本, 常数, 假))
        赋值 (blOK, 真)
    .如果真结束
    
.判断 (等于 (类型, 9))
    赋值 (blOK, 大于 (GetWindowsDirectoryA (临时文本, 260), 0))
.判断 (等于 (类型, 10))
    赋值 (blOK, 大于 (GetSystemDirectoryA (临时文本, 260), 0))
.判断 (等于 (类型, 11))
    赋值 (blOK, 大于 (GetTempPathA (260, 临时文本), 0))
.判断 (等于 (类型, 12))
    .如果真 (SHGetSpecialFolderPath (0, 临时文本, 32, 假))
        赋值 (blOK, 真)
    .如果真结束
    
.默认
    
.判断结束
.如果真 (blOK)
    .如果真 (不等于 (取文本右边 (临时文本, 1), “\”))
        赋值 (临时文本, 相加 (临时文本, “\”))
    .如果真结束
    返回 (临时文本)
.如果真结束
返回 (“”)

.子程序 _取随机数, 长整数型, , 生成一个指定长度的随机数，使用之前，需要先 置随机数种子
.参数 数值长度, 整数型, , 

.局部变量 临时数字, 整数型, , , 
.局部变量 随机数文本, 文本型, , , 

.判断循环首 (小于 (取文本长度 (随机数文本), 数值长度))
    赋值 (临时数字, 取随机数 (0, 9))
    赋值 (随机数文本, 相加 (随机数文本, 到文本 (临时数字)))
.判断循环尾 ()
返回 (到长整数 (随机数文本))


.子程序 汇编_取随机数, 整数型, , 返回一个指定范围内的随机数值。在使用本命令取一系列的随机数之前，应该先使用“置随机数种子”命令为随机数生成器初始化一个种子值。本命令为初级命令。
.参数 欲取随机数的最小值, 长整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为 0。
.参数 欲取随机数的最大值, 长整数型, 可空, 参数必须大于或等于零。本参数如果被省略，默认为无限。

置入代码 ({ 81, 82, 15, 49, 105, 192, 253, 67, 3, 0, 5, 195, 158, 38, 0, 193, 232, 16, 37, 255, 127, 0, 0, 139, 77, 16, 133, 201, 117, 5, 185, 255, 255, 255, 127, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 139, 229, 93, 194, 16, 0 })
 ' PUSH EBP
 ' MOV EBP, ESP
 ' PUSH ECX
 ' PUSH EDX
 ' RDTSC
 ' IMUL EAX, EAX, 343FDh
 ' ADD EAX, 269EC3h
 ' SHR EAX, 10h
 ' AND EAX, 7FFFh
 ' MOV ECX, DWORD PTR SS:[EBP+10h]
 ' TEST ECX, ECX
 ' JNZ SHORT Jump
 ' MOV ECX, 7FFFFFFFh
 ' @Jump:
 ' SUB ECX, DWORD PTR SS:[EBP+8h]
 ' INC ECX
 ' XOR EDX, EDX
 ' DIV ECX
 ' ADD EDX, DWORD PTR SS:[EBP+8h]
 ' MOV EAX, EDX
 ' POP EDX
 ' POP ECX
 ' MOV ESP, EBP
 ' POP EBP
 ' RETN 10h
返回 (0)

.子程序 _十进制, 文本型, , 
.参数 十进制整数, 整数型, , 

.局部变量 ret, 文本型, , , 

赋值 (ret, 取空白文本 (8))
置入代码 ({ 139, 69, 8, 87, 139, 125, 252, 49, 201, 177, 8, 80, 36, 15, 60, 9, 119, 4, 4, 48, 235, 2, 4, 55, 136, 68, 15, 255, 88, 193, 232, 4, 226, 233, 95 })
 ' mov eax,dword[ebp+0x8]
 ' push edi
 ' mov edi,dword[ebp-4]
 ' xor ecx,ecx
 ' mov cl ,byte 8
 ' a:
 ' push eax
 ' and al,0xf
 ' cmp al,byte 9
 ' ja b
 ' add al, 48 ;数字
 ' jmp short c
 ' b:
 ' add al,55 ;字母
 ' c:
 ' mov byte [edi+ecx-1], al
 ' pop eax
 ' shr eax,4 ;右移4位 相当于除以16
 ' loop a
 ' pop edi
返回 (ret)

.子程序 内存优化, 空白型, , 
.参数 PID, 整数型, , 进程ID，如果优化自进程，请填“-1”

.局部变量 A, 整数型, , , 

.如果 (等于 (PID, -1))
    赋值 (A, GetCurrentProcess ())
.否则
    赋值 (A, OpenProcess (2035711, 0, PID))
.如果结束
SetProcessWorkingSetSize (A, -1, -1)

.子程序 进制_十到十六, 文本型, , 十进制到十六进制（支持负数）,源码作者：QQ418995189
.参数 十进制长整数, 长整数型, , 不支持无符号长整数型，易BUG，超过15位长整数型，不能直接使用，必须 用 到长整数()转换

.局部变量 局部_低32位, 整数型, , , ebp-0x8
.局部变量 局部_高32位, 整数型, , , ebp-0xc
.局部变量 局部_结果, 文本型, , , ebp-0x4

置入代码 ({ 139, 69, 8, 137, 69, 248, 139, 69, 12, 137, 69, 244 })
 ' mov eax,[ebp+0x08]
 ' mov [ebp-0x08],eax
 ' mov eax,[ebp+0x0c]
 ' mov [ebp-0x0c],eax
赋值 (局部_结果, _十进制 (局部_低32位))
.如果真 (不等于 (局部_高32位, 0))
    赋值 (局部_结果, 相加 (_十进制 (局部_高32位), 局部_结果))
.如果真结束
返回 (局部_结果)

.子程序 进制_十六到十, 长整数型, , 十六进制到十进制（已优化算法）,源码作者：QQ418995189
.参数 十六进制文本, 文本型, , 字母不区分大小写

.局部变量 局部_十六进制, 字节集, , , ebp-0x4
.局部变量 局部_循环变量, 整数型, , , ebp-0x8
.局部变量 局部_十六进制数, 整数型, , , ebp-0xc
.局部变量 局部_高32位, 整数型, , , ebp-0x10
.局部变量 局部_高次方数, 整数型, , , ebp-0x14
.局部变量 局部_低32位, 整数型, , , ebp-0x18
.局部变量 局部_低次方数, 整数型, , , ebp-0x1c
.局部变量 局部_结果, 长整数型, , , ebp-0x20 ebp-0x24

赋值 (局部_十六进制, 相加 (取重复字节集 (16, { 48 }), 到字节集 (十六进制文本)))
赋值 (局部_十六进制, 取字节集右边 (局部_十六进制, 16))
.变量循环首 (取字节集长度 (局部_十六进制), 1, -1, 局部_循环变量)
    .判断开始 (大于或等于 (局部_十六进制 [局部_循环变量], 97)) ' 十六进制 [计次] ≤ 102
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 87)) ' 小写
    .判断 (大于或等于 (局部_十六进制 [局部_循环变量], 65)) ' 十六进制 [计次] ≤ 70
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 55)) ' 大写
    .默认
        赋值 (局部_十六进制数, 相减 (局部_十六进制 [局部_循环变量], 48)) ' 数字
    .判断结束
    .如果 (小于或等于 (局部_循环变量, 8))
        赋值 (局部_高32位, 相加 (局部_高32位, 相乘 (局部_十六进制数, 求次方 (16, 局部_高次方数))))
        赋值 (局部_高次方数, 相加 (局部_高次方数, 1))
    .否则
        赋值 (局部_低32位, 相加 (局部_低32位, 相乘 (局部_十六进制数, 求次方 (16, 局部_低次方数))))
        赋值 (局部_低次方数, 相加 (局部_低次方数, 1))
    .如果结束
    
.变量循环尾 ()
置入代码 ({ 139, 69, 232, 137, 69, 220, 139, 69, 240, 137, 69, 224 })
 ' label 低次方数 at ebp-0x1c
 ' label 高32位 at ebp-0x10
 ' label 低32位 at ebp-0x18
 ' label 结果高32位 at ebp-0x20
 ' label 结果低32位 at ebp-0x24

 ' mov eax,[低32位]
 ' mov [结果低32位],eax
 ' mov eax,[高32位]
 ' mov [结果高32位],eax
返回 (局部_结果)

.子程序 取文本之间, 文本型, , 比如：欲取全文本为“12345”,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”，
.参数 欲取全文本, 文本型, , 比如：欲取全文本为 12345
.参数 前面文本, 文本型, , 3的前面为“2”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 后面文本, 文本型, , 3的后面为“4”，引号直接用 #引号，如："<font color=#引号red#引号>"
.参数 起始搜寻位置, 整数型, 可空, 可空,这里是指搜寻 参数二 前面文本 的开始位置
.参数 是否不区分大小写, 逻辑型, 可空, 为真不区分大小写，为假区分。

.局部变量 局_前面文本位置, 整数型, , , 
.局部变量 局_后面文本位置, 整数型, , , 
.局部变量 局_前面文本, 文本型, , , 
.局部变量 局_后面文本, 文本型, , , 

赋值 (局_前面文本, 子文本替换 (前面文本, “#引号”, #引号, , , 真))
赋值 (局_后面文本, 子文本替换 (后面文本, “#引号”, #引号, , , 真))
赋值 (局_前面文本位置, 寻找文本 (欲取全文本, 局_前面文本, 起始搜寻位置, 是否不区分大小写))
.如果真 (不等于 (局_前面文本位置, -1))
    赋值 (局_前面文本位置, 相加 (局_前面文本位置, 取文本长度 (局_前面文本)))
.如果真结束
赋值 (局_后面文本位置, 寻找文本 (欲取全文本, 局_后面文本, 局_前面文本位置, 是否不区分大小写))
.如果真 (或者 (等于 (局_前面文本位置, -1), 等于 (局_后面文本位置, -1)))
    返回 (“”)
.如果真结束
返回 (取文本中间 (欲取全文本, 局_前面文本位置, 相减 (局_后面文本位置, 局_前面文本位置)))

.子程序 取system32目录, 文本型, , 如：C:\WINDOWS\system32\
.局部变量 局_文本, 文本型, , , 

赋值 (局_文本, 取空白文本 (255))
GetSystemDirectoryA (局_文本, 255)
.如果真 (不等于 (取文本右边 (局_文本, 1), “\”))
    赋值 (局_文本, 相加 (局_文本, “\”))
.如果真结束
返回 (局_文本)

.子程序 结束进程, 逻辑型, , 结束指定进程。成功返回真，失败返回假。本命令为初级命令
.参数 进程ID, 整数型, 可空, 欲结束的进程ID,如果为空将结束自己

.如果真 (是否为空 (进程ID))
    赋值 (进程ID, 取自进程ID ())
.如果真结束
返回 (等于 (TerminateProcess (OpenProcess (1, 0, 进程ID), 0), 1))

.子程序 取自进程ID, 整数型, , 取自身的进程ID，成功返回进程ID；失败返回0
返回 (GetCurrentProcessId ())

.子程序 编码_Utf8到Ansi, 文本型, , 
.参数 utf8字节集, 字节集, , 

.局部变量 ll, 空白型, , , 
.局部变量 Length, 空白型, , , 
.局部变量 Unicode, 字节集, , , 
.局部变量 unicode_len, 空白型, , , 
.局部变量 ansi_len, 整数型, , , 
.局部变量 ansi, 字节集, , , 

.如果真 (等于 (utf8字节集, {  }))
    返回 (“”)
.如果真结束
赋值 (ll, 取字节集长度 (utf8字节集))
赋值 (Length, MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, {  }, 0))
赋值 (Unicode, 取空白字节集 (相乘 (Length, 2)))
MultiByteToWideChar_字节集 (65001, 0, utf8字节集, ll, Unicode, 相乘 (Length, 2))

赋值 (unicode_len, 相除 (取字节集长度 (Unicode), 2))
赋值 (ansi_len, WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, 0, 0, 假))
赋值 (ansi, 取空白字节集 (ansi_len))
WideCharToMultiByte (936, 0, Unicode, unicode_len, ansi, ansi_len, 0, 假)
返回 (取字节集数据 (ansi, #文本型, ))

.子程序 编码_Ansi到Utf8, 字节集, , 
.参数 ansi文本, 文本型, , 

.局部变量 局_临时, 字节集, , , 

赋值 (局_临时, 编码_Ansi到Unicode (ansi文本))
返回 (编码_Unicode到Utf8 (局_临时))

.子程序 编码_Ansi到Unicode, 字节集, , 将Ansi码转换为Unicode码；成功返回转换后的字节集；
.参数 Ansi, 文本型, , 欲转换的Ansi文本
.参数 非标准Unicode编码, 逻辑型, 可空, 默认为假，为标准Unicode编码

.局部变量 数据2, 字节集, , , 
.局部变量 长度, 整数型, , , 

.如果真 (等于 (Ansi, “”))
    返回 ({  })
.如果真结束
赋值 (长度, MultiByteToWideChar (936, 0, Ansi, -1, {  }, 0))
赋值 (数据2, 取空白字节集 (相乘 (长度, 2)))
MultiByteToWideChar (936, 0, Ansi, -1, 数据2, 相乘 (长度, 2))
.如果真 (非标准Unicode编码)
    赋值 (数据2, 取字节集左边 (数据2, 相减 (取字节集长度 (数据2), 2)))
.如果真结束
返回 (数据2)

.子程序 编码_Unicode到Utf8, 字节集, 公开, 
.参数 Unicode字节集, 字节集, , 

.局部变量 utf8_len, 整数型, , , 
.局部变量 unicode_len, 空白型, , , word
.局部变量 uft8, 字节集, , , 

赋值 (unicode_len, 相除 (取字节集长度 (Unicode字节集), 2))
赋值 (utf8_len, WideCharToMultiByte (65001, 0, Unicode字节集, unicode_len, uft8, 0, 0, 假))
赋值 (uft8, 取空白字节集 (utf8_len))
WideCharToMultiByte (65001, 0, Unicode字节集, -1, uft8, utf8_len, 0, 假)
返回 (uft8)

.子程序 文本_格式化_快速, 文本型, , 使用了通用对象支持库 的快速文本对象
.参数 未格式化的json文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 未格式化字节集, 字节集, , , 
.局部变量 快速文本, 未知类型0x40001, , , 
.局部变量 记录, 整数型, , , 
.局部变量 字符码, 字节型, , , 
.局部变量 引号状态, 逻辑型, , , 
.局部变量 缩进量, 整数型, , , 根据当前层次决定
.局部变量 上个字符码, 字节型, , , 
.局部变量 上上个字符码, 字节型, , , 
.局部变量 字符, 文本型, , , 
.局部变量 转义状态, 逻辑型, , , 

赋值 (未格式化字节集, 到字节集 (未格式化的json文本))
赋值 (长度, 取字节集长度 (未格式化字节集))
快速文本.未知支持库函数_73 (相乘 (长度, 2))
.判断循环首 (小于 (记录, 长度))
    赋值 (记录, 相加 (记录, 1))
    赋值 (字符码, 未格式化字节集 [记录])
    赋值 (字符, 字符 (字符码))
    .判断开始 (并且 (等于 (字符码, #字符码_引号), 等于 (转义状态, 假)))
        赋值 (引号状态, 取反 (引号状态))
    .判断 (引号状态)
        .判断开始 (等于 (字符码, #字符码_反斜杆))
            赋值 (转义状态, 取反 (转义状态))
        .判断 (转义状态)
            赋值 (转义状态, 假)
        .判断 (等于 (字符码, #字符码_制表符)) ' 制表符自动纠正为\t
            赋值 (字符, “\t”)
        .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行))) ' 直接忽略
            赋值 (引号状态, 假)
            到循环尾 ()
        .默认
            
        .判断结束
         ' 引号状态下，下面的符号均当真文本来处理
    .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行)))
        到循环尾 ()
    .判断 (等于 (字符码, #字符码_左大括号))
        赋值 (上个字符码, 取代码 (快速文本.未知支持库函数_24 (快速文本.未知支持库函数_23 (), 1), ))
        赋值 (上上个字符码, 取代码 (快速文本.未知支持库函数_24 (相减 (快速文本.未知支持库函数_23 (), 1), 1), ))
        .如果 (或者 (等于 (上个字符码, 0), 并且 (或者 (等于 (上个字符码, #字符码_制表符), 等于 (上个字符码, #字符码_回车)), 不等于 (上上个字符码, #字符码_冒号))))
            赋值 (缩进量, 相加 (缩进量, 1))
            赋值 (字符, 相加 (“{”, 换行及缩进 (缩进量)))
        .否则
            赋值 (字符, 相加 (换行及缩进 (缩进量), “{”))
            赋值 (缩进量, 相加 (缩进量, 1))
            赋值 (字符, 相加 (字符, 换行及缩进 (缩进量)))
        .如果结束
        
    .判断 (等于 (字符码, #字符码_右大括号))
        赋值 (缩进量, 相减 (缩进量, 1))
        赋值 (字符, 相加 (换行及缩进 (缩进量), “}”))
    .判断 (等于 (字符码, #字符码_左方括号))
        赋值 (上个字符码, 取代码 (快速文本.未知支持库函数_24 (快速文本.未知支持库函数_23 (), 1), ))
        赋值 (上上个字符码, 取代码 (快速文本.未知支持库函数_24 (相减 (快速文本.未知支持库函数_23 (), 1), 1), ))
        .如果 (或者 (等于 (上个字符码, 0), 并且 (或者 (等于 (上个字符码, #字符码_制表符), 等于 (上个字符码, #字符码_换行)), 不等于 (上上个字符码, #字符码_冒号))))
            赋值 (缩进量, 相加 (缩进量, 1))
            赋值 (字符, 相加 (“[”, 换行及缩进 (缩进量)))
        .否则
            赋值 (字符, 相加 (换行及缩进 (缩进量), “[”))
            赋值 (缩进量, 相加 (缩进量, 1))
            赋值 (字符, 相加 (字符, 换行及缩进 (缩进量)))
        .如果结束
        
    .判断 (等于 (字符码, #字符码_右方括号))
        赋值 (缩进量, 相减 (缩进量, 1))
        赋值 (字符, 相加 (换行及缩进 (缩进量), “]”))
    .判断 (等于 (字符码, #字符码_冒号))
        赋值 (字符, 相加 (“:”, #制表符))
    .判断 (等于 (字符码, #字符码_逗号))
        赋值 (字符, 相加 (“,”, 换行及缩进 (缩进量)))
    .判断 (或者 (等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_制表符))) ' 回车结尾
        到循环尾 ()
    .默认
        
    .判断结束
    快速文本.未知支持库函数_27 (字符)
.判断循环尾 ()
返回 (快速文本.未知支持库函数_24 ())


.子程序 文本_反格式化_快速, 文本型, , 
.参数 已格式化的json文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 已格式化字节集, 字节集, , , 
.局部变量 快速文本, 未知类型0x40001, , , 
.局部变量 记录, 整数型, , , 
.局部变量 字符码, 字节型, , , 
.局部变量 引号状态, 逻辑型, , , 
.局部变量 缩进量, 整数型, , , 根据当前层次决定
.局部变量 上个字符码, 字节型, , , 
.局部变量 上上个字符码, 字节型, , , 
.局部变量 字符, 文本型, , , 
.局部变量 转义状态, 逻辑型, , , 

赋值 (已格式化字节集, 到字节集 (已格式化的json文本))
赋值 (长度, 取字节集长度 (已格式化字节集))
快速文本.未知支持库函数_73 (相乘 (长度, 2))
.判断循环首 (小于 (记录, 长度))
    赋值 (记录, 相加 (记录, 1))
    赋值 (字符码, 已格式化字节集 [记录])
    赋值 (字符, 字符 (字符码))
    .判断开始 (并且 (等于 (字符码, #字符码_引号), 等于 (转义状态, 假)))
        赋值 (引号状态, 取反 (引号状态))
    .判断 (引号状态)
        .判断开始 (等于 (字符码, #字符码_反斜杆))
            赋值 (转义状态, 取反 (转义状态))
        .判断 (转义状态)
            赋值 (转义状态, 假)
        .判断 (等于 (字符码, #字符码_制表符)) ' 制表符自动纠正为\t
            赋值 (字符, “\t”)
        .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行))) ' 直接忽略
            赋值 (引号状态, 假)
            到循环尾 ()
        .默认
            
        .判断结束
         ' 引号状态下，下面的符号均当真文本来处理
    .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_制表符), 等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_换页)))
        到循环尾 ()
    .默认
        赋值 (字符, 字符 (字符码))
    .判断结束
    快速文本.未知支持库函数_27 (字符)
.判断循环尾 ()
返回 (快速文本.未知支持库函数_24 ())


.子程序 换行及缩进, 文本型, , 
.参数 缩进数量, 整数型, , 

.局部变量 返回文本, 文本型, , , 

赋值 (返回文本, #换行符)
.计次循环首 (缩进数量, )
    赋值 (返回文本, 相加 (返回文本, #制表符))
.计次循环尾 ()
返回 (返回文本)

.子程序 文本_转义解析, 空白型, , 把\\解析出\    \r\n解析出#换行符    \"解析出#引号 ,修复:提升安全性
.参数 已转义的文本, 文本型, , 把\转义成\\,#换行符转义成\r\n,其他暂时直接忽略把制表符写出\t,要注意是8进制d码、16进制u码、x码未解析
.参数 返回文本, 文本型, 参考, 提供一个变量从此处返回,该由此处返回文本,提高效率

.局部变量 字节集, 字节集, , , 
.局部变量 解析文本偏移指针, 整数型, , , 
.局部变量 解析文本指针, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 转义状态, 逻辑型, , , 
.局部变量 循环次数, 整数型, , , 
.局部变量 当前字节, 字节型, , , 
.局部变量 转码汉字, 字节集, , , 这两个变量用于\u码转换
.局部变量 asci汉字, 文本型, , , 
.局部变量 u转义状态, 字节型, , , 
.局部变量 找到位置, 字节型, , , 
.局部变量 十进制数, 字节型, , , 
.局部变量 完全转换, 逻辑型, , , 判断字符是否完全转换完成

赋值 (字节集, 到字节集 (已转义的文本))
赋值 (asci汉字, 取空白文本 (2))
赋值 (转码汉字, 取空白字节集 (4)) ' 后面两个零是为了确保安全,unicode终止符
赋值 (循环次数, 取字节集长度 (字节集))
赋值 (解析文本指针, 申请内存 (相加 (循环次数, 1), 假))
赋值 (解析文本偏移指针, 解析文本指针)
.判断循环首 (真) ' 这里请允许死循环，去掉勾选：【工具】-【系统配置】-【编译】-【编译时是否检查死循环代码】
    赋值 (i, 相加 (i, 1))
    .如果真 (大于 (i, 循环次数))
        跳出循环 ()
    .如果真结束
    赋值 (当前字节, 字节集 [i])
    .判断开始 (等于 (转义状态, 假))
        .如果 (等于 (当前字节, 92))
            赋值 (转义状态, 真)
        .否则
            写到内存 (当前字节, 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .如果结束
        
    .默认
        .判断开始 (大于 (u转义状态, 0))
             ' 调试输出 (字符 (当前字节))
            赋值 (找到位置, 相减 (寻找文本 (“0123456789ABCDEF”, 字符 (当前字节), , 真), 1))
            .如果真 (等于 (找到位置, 254)) ' 没有在码表中找到  字节型中-1=255  再减去1则等于254
                赋值 (i, 相减 (i, u转义状态)) ' 回到\u后面
                赋值 (u转义状态, 0)
                赋值 (转义状态, 假)
                写到内存 (“\u”, 解析文本偏移指针, )
                赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 2))
                到循环尾 ()
            .如果真结束
            .判断开始 (等于 (u转义状态, 1))
                赋值 (十进制数, 相乘 (找到位置, 16))
            .判断 (等于 (u转义状态, 2))
                赋值 (十进制数, 相加 (十进制数, 找到位置))
                赋值 (转码汉字 [2], 十进制数)
            .判断 (等于 (u转义状态, 3))
                赋值 (十进制数, 相乘 (找到位置, 16))
            .默认
                赋值 (十进制数, 相加 (十进制数, 找到位置)) ' 第四个字符
                赋值 (转码汉字 [1], 十进制数)
                W2A_ (0, 0, 转码汉字, 1, asci汉字, 2, 0, 完全转换)
                写到内存 (asci汉字, 解析文本偏移指针, )
                赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 2))
                赋值 (u转义状态, 0)
                赋值 (转义状态, 假)
                到循环尾 () ' 阻止下面那句 u转义状态 ＝ u转义状态 ＋ 1 执行
            .判断结束
            赋值 (u转义状态, 相加 (u转义状态, 1))
            到循环尾 () ' 阻止循环后面那句 转义状态 ＝ 假
        .判断 (等于 (当前字节, #字符码_小写u))
            赋值 (u转义状态, 1)
            到循环尾 () ' 阻止循环后面那句 转义状态 ＝ 假
        .判断 (等于 (当前字节, 114)) ' 114=r
            写到内存 (字符 (#字符码_回车), 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .判断 (等于 (当前字节, 110)) ' 110=n
            写到内存 (字符 (#字符码_换行), 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .判断 (等于 (当前字节, 116)) ' \t
            写到内存 (#制表符, 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .判断 (等于 (当前字节, 98)) ' \b
            写到内存 (字符 (8), 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .判断 (等于 (当前字节, 102)) ' \f
            写到内存 (字符 (#字符码_换页), 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .判断 (或者 (等于 (当前字节, #字符码_斜杆), 等于 (当前字节, #字符码_反斜杆), 等于 (当前字节, #字符码_引号)))
            写到内存 (当前字节, 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 1))
        .默认
            写到内存 (相加 (“\”, 字符 (当前字节)), 解析文本偏移指针, )
             ' 写到内存 (当前字节, 解析文本偏移指针, )
            赋值 (解析文本偏移指针, 相加 (解析文本偏移指针, 2))
        .判断结束
        赋值 (转义状态, 假)
    .判断结束
    
.判断循环尾 ()
写到内存 ({ 0 }, 解析文本偏移指针, )
释放内存 (取变量数据地址 (返回文本)) ' 释放原先内存
写到内存 (解析文本指针, 取变量地址 (返回文本), )


.子程序 文本_转义, 空白型, , 把\转义成\\,#换行符转义成\r\n#引号转义成\",转义字符按标准一律使用小写,,修复:提升安全性
.参数 原文本, 文本型, , 把\转义成\\,#换行符转义成\r\n 把字表副转换成\t 把"转义成\"
.参数 返回文本, 文本型, , 提供一个变量从此处返回文本
.参数 转义汉字, 逻辑型, 可空, 默认不转义汉字等双字节字符
.参数 转义斜杠, 逻辑型, 可空, 斜杠即/，使用场景如：“http://”,默认不转义此斜杠

.局部变量 字节集, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 记录, 整数型, , , 
.局部变量 当前字节, 字节型, , , 
.局部变量 返回文本指针, 整数型, , , 
.局部变量 返回文本偏移指针, 整数型, , , 
.局部变量 汉字尾字节, 逻辑型, , , 
.局部变量 转码汉字, 字节集, , , 这两个变量用于\u码转换
.局部变量 unicode汉字, 字节集, , , 
.局部变量 十六进制表组, 文本型, , "0", 
.局部变量 记录2, 整数型, , , 

赋值 (字节集, 到字节集 (原文本))
赋值 (长度, 取字节集长度 (字节集))
赋值 (返回文本指针, 申请内存 (相加 (相乘 (长度, 3), 1), 假))
.如果真 (等于 (返回文本指针, 0))
    赋值 (返回文本, “”)
    调试输出 (“文本_转义() 申请内存失败”)
    返回 ()
.如果真结束
赋值 (返回文本偏移指针, 返回文本指针)
.如果真 (转义汉字)
    赋值 (unicode汉字, 取空白字节集 (4)) ' 后面两个字节0是为了确保安全,到此强制结束
    赋值 (转码汉字, 取空白字节集 (3)) ' 后面1字节为了确保安全,到此强制结束
    赋值 (十六进制表组, { “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F” })
.如果真结束
.计次循环首 (长度, 记录)
    赋值 (当前字节, 字节集 [记录])
    .判断开始 (并且 (大于 (当前字节, 127), 转义汉字))
        .如果 (汉字尾字节)
            赋值 (转码汉字 [2], 当前字节)
            A2W_ (0, 0, 转码汉字, 2, unicode汉字, 1)
            写到内存 (“\u”, 返回文本偏移指针, )
            赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
             ' 返回文本指针 ＋ 返回文本长度.添加 (“\u”)
            .变量循环首 (2, 1, -1, 记录2) ' 编码是从后面1字节开始的
                 ' 返回文本指针 ＋ 返回文本长度.添加 ()  ' 转换为十六进制文本
                写到内存 (相加 (十六进制表组 [相加 (整除 (unicode汉字 [记录2], 16), 1)], 十六进制表组 [相加 (求余数 (unicode汉字 [记录2], 16), 1)]), 返回文本偏移指针, )
                赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
            .变量循环尾 ()
        .否则
            赋值 (转码汉字 [1], 当前字节)
        .如果结束
        赋值 (汉字尾字节, 取反 (汉字尾字节))
    .判断 (等于 (当前字节, #字符码_退格))
        写到内存 (“\b”, 返回文本偏移指针, 2)
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (并且 (等于 (当前字节, #字符码_斜杆), 转义斜杠))
        写到内存 (“\/”, 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_反斜杆))
        写到内存 (“\\”, 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_回车))
        写到内存 (“\r”, 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_换行))
        写到内存 (“\n”, 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_换页))
        写到内存 (“\f”, 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_引号))
        写到内存 (相加 (“\”, #引号), 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .判断 (等于 (当前字节, #字符码_制表符))
        写到内存 (“\t”, 返回文本偏移指针, 2)
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 2))
    .默认
        写到内存 (字符 (当前字节), 返回文本偏移指针, )
        赋值 (返回文本偏移指针, 相加 (返回文本偏移指针, 1))
    .判断结束
     ' 特殊符号似乎没必要转义
     ' .判断开始 (或者 (并且 (小于 (当前字节, 48)), 并且 (大于 (当前字节, 57), 小于 (当前字节, 65)), 并且 (大于 (当前字节, 90), 小于 (当前字节, 97)), 并且 (大于 (当前字节, 122), 小于 (当前字节, 128))))
         ' ' 当前字节 ＜ 48                     在数字 0 之前的特殊符号
         ' ' 当前字节 ＞ 57 且 当前字节 ＜ 65   在9之后A之前间的特殊符号
         ' ' 当前字节 ＞ 90 且 当前字节 ＜ 97   在Z之后a之前间的特殊符号
         ' ' 当前字节 ＞ 122 且 当前字节 ＜ 128 在z之后中文之前特殊符号
         ' 返回文本.添加 (“\” ＋ 字符 (当前字节))
    .默认
        
    .判断结束
    
.计次循环尾 ()
写到内存 ({ 0 }, 返回文本偏移指针, 1) ' 写个文本结束符
释放内存 (取变量数据地址 (返回文本))
写到内存 (返回文本指针, 取变量地址 (返回文本), ) ' 虽然申请了内存，但这里无需释放，因为指针给了空文本变量，编译器会自行释放

.子程序 是否为数值文本, 逻辑型, , 是数值返回真，不是返回假
.参数 数值文本, 文本型, , 

.局部变量 bin, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 小数出现, 逻辑型, , , 
.局部变量 e出现, 逻辑型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 循环, 逻辑型, , , 

赋值 (bin, 到字节集 (数值文本))
赋值 (长度, 取字节集长度 (bin))
.如果真 (或者 (并且 (大于 (长度, 0), 等于 (bin [1], 45)), 并且 (大于 (bin [1], 47), 小于 (bin [1], 58))))
    赋值 (循环, 大于 (长度, 0)) ' 实现死循环
    赋值 (i, 1)
    .判断循环首 (循环)
        赋值 (i, 相加 (i, 1)) ' 等于从2开始
        .判断开始 (大于 (i, 长度))
            返回 (真)
        .判断 (并且 (大于 (bin [i], 47), 小于 (bin [i], 58))) ' 数字范围
            
        .判断 (或者 (等于 (bin [i], 69), 等于 (bin [i], 101))) ' 字符E 和 e 判断科学计数法数值
            .判断开始 (或者 (e出现, 小于 (相减 (长度, 2), i), 并且 (不等于 (bin [相加 (i, 1)], 43), 不等于 (bin [相加 (i, 1)], 45)))) ' 字符+ 和 -
                 ' 如数字:6.666666666666667e+93
                 ' 如数字:6.666666666666667e-93
                 ' e已经出现过了   e后面不足两位数(应该带+或-让后是至少1位数字)
                返回 (假)
            .默认
                赋值 (i, 相加 (i, 1))
                赋值 (e出现, 真)
                赋值 (小数出现, 真)
            .判断结束
            
        .判断 (不等于 (bin [i], 46)) ' 不等于小数点
            返回 (假)
        .判断 (或者 (小数出现, 等于 (长度, i))) ' 这里说明就是小数点了，已有小数点
            返回 (假)
        .默认
            赋值 (小数出现, 真)
        .判断结束
        
    .判断循环尾 ()
.如果真结束
返回 (假)

.子程序 取父表达式, 文本型, , 如表达式a[1].c的父表达式返回a[1]
.参数 表达式, 文本型, , 如a[1].c
.参数 取父层数, 整数型, 可空, 默认为1，如表达式a[1]的父表达式返回a，在取2层则返回a

.局部变量 点位置, 整数型, , , 
.局部变量 括号位置, 整数型, , , 
.局部变量 标点位置, 整数型, , , 
.局部变量 文本, 文本型, , , 

.如果真 (等于 (表达式, “”))
    返回 (“”)
.如果真结束
.如果真 (是否为空 (取父层数))
    赋值 (取父层数, 1)
.如果真结束
.如果真 (等于 (取父层数, 0)) ' 取0级，无效直接返回
    返回 (表达式)
.如果真结束
赋值 (文本, 表达式)
.变量循环首 (取父层数, 1, -1, 取父层数)
    赋值 (点位置, 倒找文本 (文本, “.”, , 假))
    赋值 (括号位置, 倒找文本 (文本, “[”, , 假))
    赋值 (标点位置, 选择 (大于 (括号位置, 相加 (点位置, 1)), 括号位置, 点位置))
    .如果真 (等于 (标点位置, -1)) ' 点位置等于-1
        返回 (“”)
    .如果真结束
    赋值 (文本, 取文本左边 (文本, 相减 (标点位置, 1)))
.变量循环尾 ()
返回 (文本)

.子程序 成员名到下标, 整数型, , 成功返回下标号,失败返回-1
.参数 成员名, 文本型, , 

.局部变量 新成员序号, 整数型, , , 
.局部变量 文本, 文本型, , , 

赋值 (新成员序号, 取绝对值 (到整数 (成员名))) ' 假设为直接整数
.如果真 (并且 (不等于 (成员名, “0”), 不等于 (到文本 (新成员序号), 成员名))) ' 非直接整数
    赋值 (文本, 取文本中间 (成员名, 2, 相减 (取文本长度 (成员名), 2)))
    赋值 (新成员序号, 取绝对值 (到整数 (文本))) ' 假设为数组索引
    .如果真 (并且 (不等于 (文本, “0”), 不等于 (到文本 (新成员序号), 文本))) ' 非成员索引
        返回 (-1)
    .如果真结束
    
.如果真结束
返回 (新成员序号)


.类模块 类_格式化JSON, , , 

.程序集变量 集_快速文本, 未知类型0x40001, , , 
.程序集变量 集_引号状态, 逻辑型, , , 
.程序集变量 集_缩进量, 整数型, , , 根据当前层次决定
.程序集变量 集_上个字符码, 字节型, , , 
.程序集变量 集_上上个字符码, 字节型, , , 
.程序集变量 集_转义状态, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取结果文本, 文本型, , 取回结果并初始化
.局部变量 文本, 文本型, , , 

赋值 (文本, 集_快速文本.未知支持库函数_24 ())
集_快速文本.未知支持库函数_26 ()
返回 (文本)

.子程序 加入文本, 空白型, , 使用了通用对象支持库 的快速文本对象
.参数 未格式化的json文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 未格式化字节集, 字节集, , , 
.局部变量 记录, 整数型, , , 
.局部变量 字符, 文本型, , , 
.局部变量 字符码, 字节型, , , 

赋值 (未格式化字节集, 到字节集 (未格式化的json文本))
赋值 (长度, 取字节集长度 (未格式化字节集))
集_快速文本.未知支持库函数_73 (相乘 (长度, 2))
.判断循环首 (小于 (记录, 长度))
    赋值 (记录, 相加 (记录, 1))
    赋值 (字符码, 未格式化字节集 [记录])
    赋值 (字符, 字符 (字符码))
    .判断开始 (并且 (等于 (字符码, #字符码_引号), 等于 (集_转义状态, 假)))
        赋值 (集_引号状态, 取反 (集_引号状态))
    .判断 (集_引号状态)
        .判断开始 (等于 (字符码, #字符码_反斜杆))
            赋值 (集_转义状态, 取反 (集_转义状态))
        .判断 (集_转义状态)
            赋值 (集_转义状态, 假)
        .判断 (等于 (字符码, #字符码_制表符)) ' 制表符自动纠正为\t
            赋值 (字符, “\t”)
        .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行))) ' 直接忽略
            赋值 (集_引号状态, 假)
            到循环尾 ()
        .默认
            
        .判断结束
         ' 引号状态下，下面的符号均当真文本来处理
    .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行)))
        到循环尾 ()
    .判断 (等于 (字符码, #字符码_左大括号))
        赋值 (集_上个字符码, 取代码 (集_快速文本.未知支持库函数_24 (集_快速文本.未知支持库函数_23 (), 1), ))
        赋值 (集_上上个字符码, 取代码 (集_快速文本.未知支持库函数_24 (相减 (集_快速文本.未知支持库函数_23 (), 1), 1), ))
        .如果 (或者 (等于 (集_上个字符码, 0), 并且 (或者 (等于 (集_上个字符码, #字符码_制表符), 等于 (集_上个字符码, #字符码_回车)), 不等于 (集_上上个字符码, #字符码_冒号))))
            赋值 (集_缩进量, 相加 (集_缩进量, 1))
            赋值 (字符, 相加 (“{”, 换行及缩进 (集_缩进量)))
        .否则
            赋值 (字符, 相加 (换行及缩进 (集_缩进量), “{”))
            赋值 (集_缩进量, 相加 (集_缩进量, 1))
            赋值 (字符, 相加 (字符, 换行及缩进 (集_缩进量)))
        .如果结束
        
    .判断 (等于 (字符码, #字符码_右大括号))
        赋值 (集_缩进量, 相减 (集_缩进量, 1))
        赋值 (字符, 相加 (换行及缩进 (集_缩进量), “}”))
    .判断 (等于 (字符码, #字符码_左方括号))
        赋值 (集_上个字符码, 取代码 (集_快速文本.未知支持库函数_24 (集_快速文本.未知支持库函数_23 (), 1), ))
        赋值 (集_上上个字符码, 取代码 (集_快速文本.未知支持库函数_24 (相减 (集_快速文本.未知支持库函数_23 (), 1), 1), ))
        .如果 (或者 (等于 (集_上个字符码, 0), 并且 (或者 (等于 (集_上个字符码, #字符码_制表符), 等于 (集_上个字符码, #字符码_换行)), 不等于 (集_上上个字符码, #字符码_冒号))))
            赋值 (集_缩进量, 相加 (集_缩进量, 1))
            赋值 (字符, 相加 (“[”, 换行及缩进 (集_缩进量)))
        .否则
            赋值 (字符, 相加 (换行及缩进 (集_缩进量), “[”))
            赋值 (集_缩进量, 相加 (集_缩进量, 1))
            赋值 (字符, 相加 (字符, 换行及缩进 (集_缩进量)))
        .如果结束
        
    .判断 (等于 (字符码, #字符码_右方括号))
        赋值 (集_缩进量, 相减 (集_缩进量, 1))
        赋值 (字符, 相加 (换行及缩进 (集_缩进量), “]”))
    .判断 (等于 (字符码, #字符码_冒号))
        赋值 (字符, 相加 (“:”, #制表符))
    .判断 (等于 (字符码, #字符码_逗号))
        赋值 (字符, 相加 (“,”, 换行及缩进 (集_缩进量)))
    .判断 (或者 (等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_制表符))) ' 回车结尾
        到循环尾 ()
    .默认
        
    .判断结束
    集_快速文本.未知支持库函数_27 (字符)
.判断循环尾 ()


.类模块 类_反格式化JSON, , , 

.程序集变量 字符, 文本型, , , 
.程序集变量 字符码, 字节型, , , 
.程序集变量 集_引号状态, 逻辑型, , , 
.程序集变量 集_转义状态, 逻辑型, , , 
.程序集变量 集_快速文本, 未知类型0x40001, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 加入文本, 空白型, , 加入一段文本
.参数 已格式化的json文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 已格式化字节集, 字节集, , , 
.局部变量 记录, 整数型, , , 

赋值 (已格式化字节集, 到字节集 (已格式化的json文本))
赋值 (长度, 取字节集长度 (已格式化字节集))
集_快速文本.未知支持库函数_73 (相乘 (长度, 2))
.判断循环首 (小于 (记录, 长度))
    赋值 (记录, 相加 (记录, 1))
    赋值 (字符码, 已格式化字节集 [记录])
    赋值 (字符, 字符 (字符码))
    .判断开始 (并且 (等于 (字符码, #字符码_引号), 等于 (集_转义状态, 假)))
        赋值 (集_引号状态, 取反 (集_引号状态))
    .判断 (集_引号状态)
        .判断开始 (等于 (字符码, #字符码_反斜杆))
            赋值 (集_转义状态, 取反 (集_转义状态))
        .判断 (集_转义状态)
            赋值 (集_转义状态, 假)
        .判断 (等于 (字符码, #字符码_制表符)) ' 制表符自动纠正为\t
            赋值 (字符, “\t”)
        .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行))) ' 直接忽略
            赋值 (集_引号状态, 假)
            到循环尾 ()
        .默认
            
        .判断结束
         ' 引号状态下，下面的符号均当真文本来处理
    .判断 (或者 (等于 (字符码, #字符码_回车), 等于 (字符码, #字符码_换行), 等于 (字符码, #字符码_制表符), 等于 (字符码, #字符码_空格), 等于 (字符码, #字符码_换页)))
        到循环尾 ()
    .默认
        赋值 (字符, 字符 (字符码))
    .判断结束
    集_快速文本.未知支持库函数_27 (字符)
.判断循环尾 ()

.子程序 取结果文本, 文本型, , 取回结果并初始化
.局部变量 文本, 文本型, , , 

赋值 (文本, 集_快速文本.未知支持库函数_24 ())
集_快速文本.未知支持库函数_26 ()
返回 (文本)


 ' 不属于任何一个程序集、类模块的函数：
