 ' 文件类型：Windows窗口程序

 ' 程序名称：极速搜索
 ' 程序描述：4月赛题:快速查找包含指定内容的文件
 ' 程序作者：fay3927
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 353
    高度 = 411
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “极速搜索-作者天谴邪恶 论坛ID:fay3927”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库




数据类型 ID, , 
    .成员 lowpart, 整数型, , , 低位
    .成员 highpart, 整数型, , , 高位

数据类型 关键路段, 公开, CRITICAL_SECTION
    .成员 DebugInfo, 整数型, , , 调试信息
    .成员 LockCount, 整数型, , , 锁定统计
    .成员 RecursionCount, 整数型, , , 
    .成员 OwningThread, 整数型, , , 
    .成员 LockSemaphore, 整数型, , , 
    .成员 SpinCount, 整数型, , , 

数据类型 令牌特权, , TOKEN_PRIVILEGES,From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

.全局变量 选中目录, 文本型, , , 
.全局变量 许可证1, 关键路段, , , 
.全局变量 线程数, 空白型, , , 
.全局变量 开关, 逻辑型, , , 
.全局变量 停止开关, 逻辑型, , , 

.DLL命令 进程伪句柄_, 整数型, "", "GetCurrentProcess", 公开, 获取当前进程的一个伪句柄  一般是-1

.DLL命令 置线程优先级_, 整数型, "", "SetThreadPriority", , SetThreadPriority_
    .参数 线程句柄, 整数型, , hThread
    .参数 优先权, 整数型, , nPriority

.DLL命令 启动线程, 整数型, "kernel32", "CreateThread", , 启动线程 CreateThread
    .参数 lpThreadAttributes, 整数型, , 线程的安全属性，缺省为0
    .参数 dwStackSize, 整数型, , 线程的堆栈大小，为0时与进程相同
    .参数 lpStartAddress, 子程序指针, , 线程函数的起始地址
    .参数 lpParameter, 整数型, , 传递线程的上下文,可以传递一个整数型参数。
    .参数 dwCreationFlags, 整数型, , 0：创建线程后立即启动，相反的是标志位CREATE_SUSPENDED 4，这样您需要稍后显示地让该线程运行（可设为－1）
    .参数 lpThreadId, 整数型, 传址, 内核给新生成的线程分配的线程ID

.DLL命令 关闭句柄_, 整数型, "kernel32", "CloseHandle", 公开, 关闭句柄
    .参数 hObject, 整数型, , 句柄

.DLL命令 退出许可区, 空白型, "kernel32", "LeaveCriticalSection", , 退出许可区 LeaveCriticalSection
    .参数 lpCriticalSection, 关键路段, 传址, lpCriticalSection

.DLL命令 删除许可证, 空白型, "kernel32", "DeleteCriticalSection", , 删除许可证 DeleteCriticalSection
    .参数 lpCriticalSection, 关键路段, 传址, lpCriticalSection

.DLL命令 创建许可证, 空白型, "kernel32", "InitializeCriticalSection", , 创建许可证 InitializeCriticalSection
    .参数 lpCriticalSection, 关键路段, 传址, lpCriticalSection

.DLL命令 进入许可区, 空白型, "kernel32", "EnterCriticalSection", , 进入许可区 EnterCriticalSection
    .参数 lpCriticalSection, 关键路段, 传址, lpCriticalSection

.DLL命令 获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, 令牌特权, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 令牌特权, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, ID, 传址, 

.DLL命令 打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 线程伪句柄_, 整数型, "", "GetCurrentThread", 公开, 获取当前线程的一个伪句柄  一般是-2

.DLL命令 置进程优先级_, 逻辑型, "", "SetPriorityClass", , 设置进程优先级别SetPriorityClass
    .参数 进程句柄, 整数型, , 进程句柄hProcess
    .参数 级别, 整数型, , 级别dwPriorityClass

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行
载入 (_启动窗口, , 假)

返回 (0) ' 可以根据您的需要返回任意数值

.窗口程序集 窗口程序集1, , , 

.程序集变量 文件名, 文本型, , "0", 
.程序集变量 欲搜寻文本, 字节集, , , 
.程序集变量 单线内存, 整数型, , , 
.程序集变量 最大线程数, 整数型, , , 
.程序集变量 sz, 字节集, , "0", 
.子程序 __启动窗口_创建完毕, 空白型, , 易语言论坛-4月赛题:快速查找包含指定内容的文件-参赛作者:fay3927
 ' 影响搜索的几个因素，CPU,内存，线程，易语言本身，系统运行中的程序等。
 ' 还要考虑到程序的稳定，压力测试，多操作系统等，其实这小东西蛮复杂的：）
 ' 测试中还是有点小问题，易语言本身小问题也有点小关系，因为曾经被易语言的正则库搞得头破血流：）
 ' 用了文件大小筛选居然比不用还要慢1倍，我晕迷。。。所以删除这个选项

 ' 搜索速度绝对是有点快的哦：）

 ' 编译后的程序比调试中运行要快30%，原因不详。。。。

 ' 在此向易语言论坛高手和前辈们致敬！没有你们没有易语言的现在！
进程权限提升_ ()
进程优先级_ (256)
赋值 (许可证1, 许可证创建_ ())
0.置文本 (“  请先选择需要查找的目录，进行相应设置后点击查找按钮。”) ' 下面还有很多友情提示：）
赋值 (.禁止, 假)
赋值 (.禁止, 真)

.子程序 _文本查找框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

0.置文本 (“  在此输入你希望查找的内容，比如 易语言”)

.子程序 _进制查找框_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

0.置文本 (“  在此输入你希望查找的内容的16进制，比如 D2D7D3EFD1D4”)

.子程序 _单选框_文本_被单击, 空白型, , 
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (.背景颜色, #白色)
赋值 (.背景颜色, #银白)
0.置文本 (“  请在查找内容-文本之后输入你需要查找的内容”)

.子程序 _单选框_16进制_被单击, 空白型, , 
赋值 (.禁止, 真)
赋值 (.禁止, 假)
赋值 (.背景颜色, #银白)
赋值 (.背景颜色, #白色)
0.置文本 (“  请在查找内容-16进制之后输入你需要查找的内容”)

.子程序 _选择框_含子目录_被单击, 空白型, , 
0.置文本 (“  选中，搜索包括子目录下文件。警告！文件多的情况下非常慢！”)

.子程序 _按钮_查找_被单击, 空白型, , 
初始设置 ()
.如果 (.选中)
    查找2 ()
.否则
    查找1 ()
.如果结束

赋值 (.禁止, 真)
赋值 (.禁止, 假)

.子程序 查找1, 空白型, , 
.局部变量 计时, 整数型, , , 
.局部变量 计数, 整数型, , , 
.局部变量 临时变量, 整数型, , , 

赋值 (文件名 [1], 寻找文件 (相加 (选中目录, “*.*”), 32))
赋值 (计时, 取启动时间 ())
 ' 搜索部分，实现智能多线程！
.如果真 (不等于 (文件名 [1], “”))
    searchfile (1)
    赋值 (线程数, 0)
.如果真结束
.判断循环首 (等于 (开关, 假))
    .如果真 (等于 (线程数, 0))
        .计次循环首 (最大线程数, 计数) ' 鸡就是在这里生蛋滴，不生就没有蛋滴
            赋值 (文件名 [计数], 寻找文件 (32))
            .如果真 (等于 (文件名 [计数], “”))
                赋值 (开关, 真)
                到循环尾 ()
            .如果真结束
            启动线程2_ (&searchfile, 计数, 1) ' 句柄已经关闭了
            赋值 (临时变量, 相加 (临时变量, 1))
            处理事件 ()
        .计次循环尾 ()
    .如果真结束
    
    .判断循环首 (小于 (线程数, 临时变量))
        延时 (10)
        处理事件 ()
    .判断循环尾 ()
    赋值 (线程数, 0)
    赋值 (临时变量, 0)
    .如果真 (停止开关)
        赋值 (停止开关, 假)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (计时, 相减 (取启动时间 (), 计时))
赋值 (计数, 取表项数 ())
鸣叫 ()
0.置文本 (相加 (“  搜索完毕，总耗时”, 到文本 (计时), “毫秒。找到文件总数”, 到文本 (计数)))


.子程序 查找2, 空白型, , 这个还可以改进改进
.局部变量 计时, 整数型, , , 
.局部变量 计数器, 整数型, , , 
.局部变量 队列, 栈, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件夹名称, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 文件数目, 整数型, , , 
.局部变量 计数, 整数型, , , 
.局部变量 过渡数组, 文本型, , "0", 
.局部变量 小开关, 逻辑型, , , 
.局部变量 小小开关, 逻辑型, , , 

 ' 把初始目录加到队列
队列.压入 (选中目录)
赋值 (计时, 取启动时间 ())
.判断循环首 (大于 (队列.计数 (), 0))
     ' 路径 ＝ 队列.Pop0 ()' 弹出队列最前一个元素作为目录,对该目录进行文件夹枚举和文件枚举[为同层搜索]
    赋值 (路径, 队列.弹出N ()) ' 弹出栈最后一个元素为目录,逆序搜索..
    赋值 (路径, 选择 (不等于 (取文本右边 (路径, 1), “\”), 相加 (路径, “\”), 路径))
    赋值 (文件夹名称, 寻找文件 (相加 (路径, “*.*”), #子目录))
    .判断循环首 (不等于 (文件夹名称, “”))
        .如果真 (并且 (不等于 (文件夹名称, “.”), 不等于 (文件夹名称, “..”)))
             ' 如果在当前目录下找到了文件夹,则把该文件夹压入到队列,等待扫描该文件夹的下一级目录和文件名
            队列.压入 (相加 (路径, 文件夹名称))
        .如果真结束
        赋值 (文件夹名称, 寻找文件 (#子目录))
    .判断循环尾 ()
    处理事件 ()
     ' 寻找当前目录的所有文件
    赋值 (文件名, 寻找文件 (相加 (路径, “*.*”), ))
    .判断循环首 (不等于 (文件名, “”))
        .如果 (小于 (计数器, 最大线程数))
            赋值 (计数器, 相加 (计数器, 1))
            赋值 (文件名 [计数器], 相加 (路径, 文件名))
             ' 加入成员 (文件名, 路径 ＋ 文件名1)
        .否则
            赋值 (小开关, 真)
            .计次循环首 (最大线程数, 计数)
                启动线程2_ (&searchfile, 计数, 1)
                处理事件 ()
            .计次循环尾 ()
            赋值 (小小开关, 真)
        .如果结束
        
        .判断循环首 (并且 (小于 (线程数, 最大线程数), 等于 (小开关, 真))) ' 绕啊绕啊绕，逻辑问题 -_-! 可能睡个舒服觉，可以写的更好一点，最近头疼
            延时 (10)
            处理事件 ()
        .判断循环尾 ()
        赋值 (线程数, 0)
        .如果真 (小小开关) ' 我讨厌逻辑问题，我又不喜欢用笔写，脑袋想逻辑想的，哎，还是西瓜吃了舒服!
            数组清零 (文件名)
            赋值 (计数器, 1)
            赋值 (文件名 [计数器], 相加 (路径, 文件名))
            赋值 (小小开关, 假)
        .如果真结束
        赋值 (小开关, 假)
        赋值 (文件数目, 相加 (文件数目, 1))
        _启动窗口.置文本 (., 1, 到文本 (文件数目))
        赋值 (文件名, 寻找文件 ())
        .如果真 (停止开关)
            跳出循环 ()
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (停止开关)
        赋值 (停止开关, 假)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
赋值 (线程数, 0)
.计次循环首 (计数器, 计数)
    启动线程2_ (&searchfile, 计数, 1)
    处理事件 ()
.计次循环尾 ()
.判断循环首 (小于 (线程数, 计数器))
    延时 (10)
    处理事件 ()
.判断循环尾 ()
赋值 (计数器, 0)
赋值 (线程数, 0)
赋值 (计时, 相减 (取启动时间 (), 计时))
赋值 (计数, 取表项数 ())
鸣叫 ()
0.置文本 (相加 (“  搜索完毕，总耗时”, 到文本 (计时), “毫秒。找到文件总数”, 到文本 (计数)))


.子程序 searchfile, 空白型, , 
.参数 i1, 空白型, , 

.局部变量 number, 空白型, , , 
.局部变量 零食, 文本型, , , 

赋值 (零食, 文件名 [i1])
 ' sz ＝ 取空白字节集 (单线内存)
.如果 (大于 (寻找文本 (零食, “\”, , 假), 0))
    赋值 (number, 打开文件 (零食, 1, 1))
.否则
    赋值 (number, 打开文件 (相加 (选中目录, 零食), 1, 1))
.如果结束
 ' 输出调试文本 (零食)
.判断循环首 (等于 (是否在文件尾 (number, ), 假))
    赋值 (sz [i1], 读入字节集 (number, 单线内存))
    .如果真 (大于 (寻找字节集 (sz [i1], 欲搜寻文本, ), 0))
        .插入表项 (子文本替换 (零食, 选中目录, “”, , , 假), , , , )
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
关闭文件 (number)
许可区进入1_ (许可证1)
赋值 (线程数, 相加 (线程数, 1))
许可区退出_ (许可证1)

.子程序 初始设置, 空白型, , 
.局部变量 计数, 整数型, , , 

赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (线程数, 0)
赋值 (单线内存, 多项选择 (相加 (.现行选中项, 1), 262144, 524288, 1048576, 相乘 (1048576, 2), 相乘 (1048576, 10), 1024))
赋值 (最大线程数, 多项选择 (相加 (.现行选中项, 1), 1, 2, 5, 10, 20))
赋值 (开关, 假)
.如果 (.选中)
    赋值 (欲搜寻文本, 到字节集 (.内容))
.否则
    赋值 (欲搜寻文本, 十六进制到字节集 (.内容))
.如果结束
重定义数组 (sz, 假, 最大线程数)
.计次循环首 (最大线程数, 计数)
    赋值 (sz [计数], 取空白字节集 (单线内存))
.计次循环尾 ()
重定义数组 (文件名, 假, 最大线程数)
全部删除 ()

.子程序 _按钮_停止_被单击, 空白型, , 
赋值 (停止开关, 真)

.子程序 _默认方式打开_被选择, 空白型, , 
.如果真 (不等于 (., -1))
    未知支持库函数_6 (相加 (选中目录, .取标题 (., )), , )
.如果真结束


.子程序 _超级列表框_结果列表_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()


.子程序 _浏览所在文件夹_被选择, 空白型, , 
.局部变量 零食, 文本型, , , 

.如果真 (不等于 (., -1))
    .如果 (大于 (寻找文本 (.取标题 (., ), “\”, , 假), 0))
        赋值 (零食, 相加 (选中目录, 取文本左边 (.取标题 (., ), 倒找文本 (.取标题 (., ), “\”, , 假))))
        未知支持库函数_6 (2, 零食, , )
    .否则
        未知支持库函数_6 (2, 选中目录, , )
    .如果结束
    
.如果真结束


.子程序 _默认编辑器打开_被选择, 空白型, , 
.如果真 (不等于 (., -1))
    未知支持库函数_6 (1, 相加 (选中目录, .取标题 (., )), , )
.如果真结束



.子程序 _超级列表框_结果列表_左键单击表项, 空白型, , 
0.置文本 (.取标题 (., ))

.子程序 _按钮_目录_被单击, 空白型, , 
赋值 (选中目录, 未知支持库函数_2 (“Please choose a catalogue”, ))
.如果真 (不等于 (选中目录, “”))
    赋值 (.内容, 选中目录)
.如果真结束
.如果真 (不等于 (取文本右边 (选中目录, 1), “\”))
    赋值 (选中目录, 相加 (选中目录, “\”))
.如果真结束
0.置文本 (选中目录)


.程序集 子程序集, , , 

.子程序 进制转换_, 文本型, , 
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 
.参数 转换的进制, 整数型, , 

.局部变量 计次变量, 空白型, , , 
.局部变量 临时数值, 空白型, , , 
.局部变量 欲转换文本, 文本型, , , 

.如果真 (等于 (被转换进制, 转换的进制))
    返回 (被转换文本)
.如果真结束
.计次循环首 (取文本长度 (被转换文本), 计次变量) ' 整数转换开始
    赋值 (临时数值, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (被转换文本, 计次变量, 1), , 真), 1), 求次方 (被转换进制, 相减 (取文本长度 (被转换文本), 计次变量))), 临时数值))
.计次循环尾 ()
.判断循环首 (大于 (临时数值, 相减 (转换的进制, 1)))
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (到数值 (到文本 (求余数 (临时数值, 转换的进制))), 1), 1), 欲转换文本))
    赋值 (临时数值, 取整 (相除 (临时数值, 转换的进制)))
.判断循环尾 ()
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)


.子程序 十六进制到字节集, 字节集, , 
.参数 十六进制文本, 文本型, , 

.局部变量 字节集, 字节集, , , 
.局部变量 i, 空白型, , , 
.局部变量 临时变量, 空白型, , , 

赋值 (字节集, 取空白字节集 (相除 (取文本长度 (十六进制文本), 2)))
.计次循环首 (相除 (取文本长度 (十六进制文本), 2), i)
    赋值 (字节集 [i], 到整数 (进制转换_ (取文本中间 (十六进制文本, 相加 (相乘 (相减 (i, 1), 2), 1), 2), 16, 10)))
.计次循环尾 ()
返回 (字节集)

.子程序 枚举文件1, 空白型, , 
.参数 目录, 文本型, , 

.局部变量 队列, 栈, , , 
.局部变量 路径, 文本型, , , 
.局部变量 文件夹名称, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 文件数目, 整数型, , , 

 ' 把初始目录加到队列
队列.压入 (目录)
.判断循环首 (大于 (队列.计数 (), 0))
     ' 路径 ＝ 队列.Pop0 ()' 弹出队列最前一个元素作为目录,对该目录进行文件夹枚举和文件枚举[为同层搜索]
    赋值 (路径, 队列.弹出N ()) ' 弹出栈最后一个元素为目录,逆序搜索..
    赋值 (路径, 选择 (不等于 (取文本右边 (路径, 1), “\”), 相加 (路径, “\”), 路径))
    赋值 (文件夹名称, 寻找文件 (相加 (路径, “*.*”), #子目录))
    .判断循环首 (不等于 (文件夹名称, “”))
        .如果真 (并且 (不等于 (文件夹名称, “.”), 不等于 (文件夹名称, “..”)))
             ' 如果在当前目录下找到了文件夹,则把该文件夹压入到队列,等待扫描该文件夹的下一级目录和文件名
            队列.压入 (相加 (路径, 文件夹名称))
        .如果真结束
        赋值 (文件夹名称, 寻找文件 (#子目录))
    .判断循环尾 ()
    处理事件 ()
     ' 寻找当前目录的所有文件
    赋值 (文件名, 寻找文件 (相加 (路径, “*.*”), ))
    .判断循环首 (不等于 (文件名, “”))
        _启动窗口.插入表项 (., , 相加 (路径, 文件名), , , , )
        赋值 (文件数目, 相加 (文件数目, 1))
        _启动窗口.置文本 (., 1, 到文本 (文件数目))
        赋值 (文件名, 寻找文件 ())
    .判断循环尾 ()
    
.判断循环尾 ()


.子程序 进程权限提升_, 逻辑型, , 提升进程权限默认调试级别
.参数 目标进程, 整数型, 可空, 

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, ID, , , 
.局部变量 tkp, 令牌特权, , , 
.局部变量 tkpNewButIgnored, 令牌特权, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.如果真 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, 进程伪句柄_ ())
.如果真结束
打开令牌 (hdlProcessHandle, 40, hdlTokenHandle)
恢复权限 (“”, “SeDebugPrivilege”, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
返回 (获取令牌特权 (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))

.子程序 进程优先级_, 逻辑型, , 设置进程优先级
.参数 优先级别, 整数型, 可空, 32标准，64低，128高，256实时（默认级别）

.如果 (等于 (优先级别, 0))
    返回 (置进程优先级_ (进程伪句柄_ (), 256))
.否则
    返回 (置进程优先级_ (进程伪句柄_ (), 优先级别))
.如果结束


.子程序 许可证创建_, 关键路段, , 
.局部变量 CRITICAL_SECTION, 关键路段, , , 

创建许可证 (CRITICAL_SECTION)
返回 (CRITICAL_SECTION)

.子程序 许可证删除_, 空白型, , 
.参数 CRITICAL_SECTION, 关键路段, , 

删除许可证 (CRITICAL_SECTION)

.子程序 许可区进入1_, 空白型, , 
.参数 CRITICAL_SECTION, 关键路段, , 

进入许可区 (CRITICAL_SECTION)

.子程序 许可区退出_, 空白型, , 
.参数 CRITICAL_SECTION, 关键路段, , 

退出许可区 (CRITICAL_SECTION)

.子程序 启动线程_, 整数型, , 返回线程句柄 记得调用closehadle_关闭句柄
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 不立即执行, 逻辑型, 可空, 是否立即执行 不立即执行的话记得调用 运行线程()
.参数 线程优先级, 整数型, 可空, 2,1,0,-1,-2,15,-15 数字越大优先级越高 建议为1

.局部变量 hThread, 空白型, , , 

赋值 (hThread, 启动线程 (0, 0, 欲执行的子程序, 参数数据, 选择 (不立即执行, 4, 0), 0))
.如果真 (不等于 (线程优先级, 0))
    置线程优先级_ (hThread, 线程优先级)
.如果真结束
返回 (hThread)

.子程序 启动线程2_, 空白型, 公开, 已关闭句柄，不能进行挂起，恢复等操作
.参数 欲执行的子程序, 子程序指针, , 
.参数 参数数据, 整数型, 可空, 
.参数 线程优先级, 整数型, 可空, 2,1,0,-1,-2,15,-15 数字越大优先级越高 建议为1

.局部变量 hThread, 空白型, , , 

赋值 (hThread, 启动线程 (0, 0, 欲执行的子程序, 参数数据, 0, 0))
.如果真 (不等于 (线程优先级, 0))
    置线程优先级_ (hThread, 线程优先级)
.如果真结束
 ' 等待对象 (hThread)
关闭句柄_ (hThread)

.类模块 栈, , , TxtStack

.程序集变量 Stack, 文本型, , "0", 
.子程序 压入, 空白型, 公开, 
.参数 txt, 文本型, , 

加入成员 (Stack, txt)

.子程序 弹出N, 文本型, 公开, 
.局部变量 txt, 文本型, , , 
.局部变量 iCount, 空白型, , , 

赋值 (iCount, 计数 ())
.如果真 (不等于 (iCount, 0))
    赋值 (txt, Stack [iCount])
    删除成员 (Stack, iCount, )
.如果真结束
返回 (txt)

.子程序 弹出0, 文本型, 公开, 
.局部变量 txt, 文本型, , , 

.如果真 (不等于 (计数 (), 0))
    赋值 (txt, Stack [1])
    删除成员 (Stack, 1, )
.如果真结束
返回 (txt)


.子程序 计数, 整数型, 公开, 
返回 (取数组成员数 (Stack))


 ' 不属于任何一个程序集、类模块的函数：
