 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 659
    高度 = 469
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “DAM2Plus网络锁易语言例程”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库





.DLL命令 NetConnect, 整数型, "NetDog.dll", "NETCONNECT", , 0 连接服务器成功；> 0 失败，并返回错误号
    .参数 nPort, 整数型, , 端口 默认为6135
    .参数 nHost, 文本型, , IP地址或者服务器名

.DLL命令 NetDisconnect, 整数型, "NetDog.dll", "NETDISCONNECT", , 0 断开服务器成功；> 0 失败，并返回错误号

.DLL命令 DogFind, 整数型, "NetDog.dll", "DOGFIND", , 0 找到 DAM2+ 网络锁；> 0 失败，未找到，系统中未连接指定应用程序ID的 DAM2+ 网络锁
    .参数 nAppID, 整数型, , 应用程序标识

.DLL命令 DogOpen, 整数型, "NetDog.dll", "DOGOPEN", , 0 打开加密锁成功；> 0 失败，并返回错误码
    .参数 nAgent, 整数型, , 代理号
    .参数 nClient, 整数型, , 客户号
    .参数 nGroup, 整数型, , 分组号
    .参数 nSerial, 整数型, , 序列号

.DLL命令 DogClose, 整数型, "NetDog.dll", "DOGCLOSE", , 0 关闭加密锁成功；> 0 失败，并返回错误码

.DLL命令 DogCheck, 整数型, "NetDog.dll", "DOGCHECK", , 0 密码正确；> 0 失败，并返回错误码
    .参数 nPassword, 整数型, , 加密锁密码

.DLL命令 DogUID, 整数型, "NetDog.dll", "DOGUID", , 0 成功 并将ID存在Uid中；> 0 失败，并返回错误码
    .参数 Uid, 文本型, 传址, 加密锁唯一ID

.DLL命令 DogReadBuffer, 整数型, "NetDog.dll", "DOGREADBUFFER", , 0 读取成功 并将数据存在pBuffer中；> 0 失败，并返回错误码
    .参数 nStart, 整数型, , 存储区开始地址
    .参数 nLength, 整数型, , 要读取的存储区长度
    .参数 pBuffer, 文本型, 传址, 读取的结果

.DLL命令 DogWriteBuffer, 整数型, "NetDog.dll", "DOGWRITEBUFFER", , 0 写入成功；> 0 失败，可使用DogLastError来获取错误码
    .参数 nStart, 整数型, , 存储区开始地址
    .参数 nLength, 整数型, , 要读取的存储区长度
    .参数 pBuffer, 文本型, , 将要写的数据

.窗口程序集 窗口程序集1, , , 

.程序集变量 程序集_错误信息, 文本型, , "14", 
.程序集变量 程序集_应用程序ID, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\NetDog.dll”)), 假))
    信息框 (“请将DLL文件放置在源文件目录下！”, #错误图标, )
    销毁 ()
.如果真结束
赋值 (程序集_错误信息 [1], “操作成功”)
赋值 (程序集_错误信息 [2], “连接服务器失败”)
赋值 (程序集_错误信息 [3], “没有找到指定的网络锁”)
赋值 (程序集_错误信息 [4], “打开锁失败”)
赋值 (程序集_错误信息 [5], “权限不够”)
赋值 (程序集_错误信息 [6], “无法获取GUID”)
赋值 (程序集_错误信息 [7], “检查密码出错”)
赋值 (程序集_错误信息 [8], “读数据出错”)
赋值 (程序集_错误信息 [9], “写数据出错”)
赋值 (程序集_错误信息 [10], “错误指令”)
赋值 (程序集_错误信息 [11], “参数超出范围”)
赋值 (程序集_错误信息 [12], “断开网络失败”)
赋值 (程序集_错误信息 [13], “用户数已达上限”)
赋值 (程序集_错误信息 [14], “未知错误”)

.子程序 _按钮_连接服务器_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

 ' NetConnect 第一个参数为端口号，默认为6135，第二次参数为服务器IP地址或服务器名
赋值 (局部_返回值, NetConnect (到数值 (.), .))
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “连接服务器成功！”), )
    赋值 (., 真)
    连续赋值 (假, ., .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long NetConnect(long nPort,char nHost)；
 ' 参数1:整数型,端口 默认为6135
 ' 参数2:文本型,IP地址或者服务器名
 ' 该函数必须与NetDisconnect成对使用。

.子程序 _按钮_断开服务器_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_返回值, NetDisconnect ())
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “断开服务器成功！”), )
    赋值 (., 真)
    连续赋值 (真, ., ., ., ., ., ., ., .)
    赋值 (., 假)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long NetDisconnect()；
 ' 该函数用来断开与服务器的连接，加密锁在断开服务器后必须重新连接服务器之后才可以进行进一步的操作。
 ' 该函数必须与NetConnect成对使用

.子程序 _按钮_查找加密狗_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

 ' DogFind的第一个参数是"应用程序标识"
 ' 首先在管理工具中修改你的"应用程序标识",初始是8个F,即FFFFFFFF,
 ' 这里的"应用程序标识"是十六进制的,因此要转换成十进制.
赋值 (局部_返回值, DogFind (十六进制转换十进制 (.)))
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “查找加密狗成功！”), )
    连续赋值 (假, .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogFind(long nAppID)；
 ' 查找系统中指定应用程序标识的DAM2+网络加密锁，如果失败，则该系统未连接该NDAM2+网络加密锁。
 ' 参数1:整数型,十进制数值, "应用程序标识"在设号工具中设置,并与第一个参数等同。
 ' 应用程序标识在管理工具工具中设置。


.子程序 _按钮_打开加密狗_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_返回值, DogOpen (十六进制转换十进制 (.), 十六进制转换十进制 (.), 十六进制转换十进制 (.), 十六进制转换十进制 (.)))
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “打开加密狗成功！”), )
    连续赋值 (假, ., ., .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogOpen(long nAgent,long nClient,long nGroup,long nSerial)；
 ' 在找到加密锁后，可通过加密锁的 nAgent ，nClient ，nGroup ，nSerial 4个参数打开加密锁，只有在正确打开加密锁后才可以进行读写等操作。
 ' 参数1:整数型,代理号 参看 加密锁开发口令
 ' 参数2:整数型,客户号 参看 加密锁开发口令
 ' 参数3:整数型,分组号 可以在 设号工具 中设置 默认为 "FFFF"
 ' 参数4:整数型,序列号 可以在 设号工具 中设置 默认为 "FFFF"
 ' 该函数必须与DogClose成对使用。


.子程序 _按钮_关闭加密狗_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_返回值, DogClose ())
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “关闭加密狗成功！”), )
    连续赋值 (真, ., ., ., ., ., .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogClose()；
 ' 该函数用来关闭加密锁，加密锁在关闭后必须重新打开之后才可以进行进一步的操作。
 ' 该函数必须与DogOpen成对使用。

.子程序 _按钮_验证密码_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_返回值, DogCheck (十六进制转换十进制 (.)))
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “验证密码成功！”), )
    连续赋值 (假, ., ., .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogCheck(long nPassword)；
 ' 该函数用来验证加密狗的密码。
 ' 参数1:整数型,用户密码（通过设号工具事先进行设置） 默认值为 FFFFFFFF

.子程序 _按钮_获取ID_被单击, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 
.局部变量 局部_ID, 文本型, , , 

赋值 (局部_ID, 取空白文本 (255))
赋值 (局部_返回值, DogUID (局部_ID))
.判断开始 (等于 (局部_返回值, 0))
    赋值 (., “”)
    赋值 (., 局部_ID)
    0.插入项目 (相加 (子程序_取时间 (), “获取ID成功！”), )
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogUID(char * Uid)；
 ' 该函数用来获取加密锁的硬件ID，每个加密锁对应一个唯一的ID。
 ' 参数1:[out]文本型,用来存储硬件ID，使用前要先分配存储区域的数据区

.子程序 _按钮_读取_被单击, 空白型, , 
.局部变量 局部_开始位置, 整数型, , , 
.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_结果, 文本型, , , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_开始位置, 到数值 (.))
赋值 (局部_长度, 到数值 (.))
赋值 (局部_结果, 取空白文本 (局部_长度))
.如果真 (或者 (小于或等于 (局部_长度, 0), 大于 (局部_长度, 32)))
    信息框 (“长度参数错误，请看下面帮助，避免读取错误！”, #警告图标, )
    返回 ()
.如果真结束
赋值 (局部_返回值, DogReadBuffer (局部_开始位置, 局部_长度, 局部_结果))
.判断开始 (等于 (局部_返回值, 0))
    信息框 (“读取成功！”, #信息图标, )
    0.插入项目 (相加 (子程序_取时间 (), “读取成功！”), )
    赋值 (., “”)
    赋值 (., 局部_结果)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogReadBuffer(int nStart,int nLength, char * pBuffer)；
 ' 该函数用来读取指定区域内的数据区。使用前要提前分配对象大小的数据区用来存储数据
 ' 参数1:[in]整数型,存储区开始地址         开始位置的范围为0~2047
 ' 参数2:[in]整数型,要读取的存储区长度     长度的范围为1~32
 ' 参数3:[out]文本型,读取的结果
 ' 如果 长度 + 开始位置 超过了 2048 的话，执行函数时会出错

.子程序 _按钮_写入_被单击, 空白型, , 
.局部变量 局部_开始位置, 整数型, , , 
.局部变量 局部_长度, 整数型, , , 
.局部变量 局部_内容, 文本型, , , 
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (., “”))
    信息框 (“内容不可为空！”, #警告图标, )
    返回 ()
.如果真结束
赋值 (局部_开始位置, 到数值 (.))
赋值 (局部_内容, .)
赋值 (局部_长度, 取文本长度 (局部_内容))
赋值 (局部_返回值, DogWriteBuffer (局部_开始位置, 局部_长度, 局部_内容))
.判断开始 (等于 (局部_返回值, 0))
    信息框 (“写入成功！”, #信息图标, )
    0.插入项目 (相加 (子程序_取时间 (), “写入成功！”), )
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束
 ' 功能说明：long DogWriteBuffer(int nStart,int nLength, char * pBuffer)；
 ' 该函数用来读取指定区域内的数据区。使用前要提前分配对象大小的数据区用来存储数据
 ' 参数1:[in]整数型,存储区开始地址         开始位置的范围为0~2047
 ' 参数2:[in]整数型,要写入的存储区长度     该参数为写入内容的长度，最大为32
 ' 参数3:[in]文本型,要写的内容             写入内容不可为空
 ' 如果 长度 + 开始位置 超过了 2048 的话，执行函数时会出错


.子程序 子程序_置错误信息, 空白型, , 
.参数 参数_返回值, 整数型, , 

.判断开始 (并且 (小于或等于 (相加 (参数_返回值, 1), 14), 大于或等于 (相加 (参数_返回值, 1), 1)))
    0.插入项目 (相加 (子程序_取时间 (), 程序集_错误信息 [相加 (参数_返回值, 1)], “ 错误码： ”, 到文本 (参数_返回值)), )
.默认
    0.插入项目 (相加 (子程序_取时间 (), “取错误信息失败！”), )
.判断结束


.子程序 十六进制转换十进制, 长整数型, , 
.参数 参数_原数, 文本型, , 

.局部变量 局部_计次, 整数型, , , 
.局部变量 局部_结果, 长整数型, , , 

.计次循环首 (取文本长度 (参数_原数), 局部_计次)
    .判断开始 (并且 (大于或等于 (取代码 (取文本中间 (参数_原数, 局部_计次, 1), ), 48), 小于或等于 (取代码 (取文本中间 (参数_原数, 局部_计次, 1), ), 57)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (到数值 (取文本中间 (参数_原数, 局部_计次, 1)), 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断 (或者 (等于 (取文本中间 (参数_原数, 局部_计次, 1), “a”), 等于 (取文本中间 (参数_原数, 局部_计次, 1), “A”)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (10, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断 (或者 (等于 (取文本中间 (参数_原数, 局部_计次, 1), “b”), 等于 (取文本中间 (参数_原数, 局部_计次, 1), “B”)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (11, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断 (或者 (等于 (取文本中间 (参数_原数, 局部_计次, 1), “c”), 等于 (取文本中间 (参数_原数, 局部_计次, 1), “C”)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (12, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断 (或者 (等于 (取文本中间 (参数_原数, 局部_计次, 1), “d”), 等于 (取文本中间 (参数_原数, 局部_计次, 1), “D”)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (13, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断 (或者 (等于 (取文本中间 (参数_原数, 局部_计次, 1), “e”), 等于 (取文本中间 (参数_原数, 局部_计次, 1), “E”)))
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (14, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .默认
        赋值 (局部_结果, 相加 (局部_结果, 相乘 (15, 求次方 (16, 相减 (取文本长度 (参数_原数), 局部_计次)))))
    .判断结束
    
.计次循环尾 ()
返回 (局部_结果)

.子程序 __启动窗口_将被销毁, 空白型, , 
.局部变量 局部_返回值, 整数型, , , 

赋值 (局部_返回值, DogClose ())
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “关闭加密狗成功！”), )
    连续赋值 (真, ., ., .)
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束

赋值 (局部_返回值, NetDisconnect ())
.判断开始 (等于 (局部_返回值, 0))
    0.插入项目 (相加 (子程序_取时间 (), “断开服务器成功！”), )
.默认
    子程序_置错误信息 (局部_返回值)
.判断结束


.子程序 子程序_取时间, 文本型, , 
.局部变量 局部_时, 文本型, , , 
.局部变量 局部_分, 文本型, , , 
.局部变量 局部_秒, 文本型, , , 

赋值 (局部_时, 到文本 (取时间部分 (取现行时间 (), 6)))
赋值 (局部_分, 到文本 (取时间部分 (取现行时间 (), 7)))
赋值 (局部_秒, 到文本 (取时间部分 (取现行时间 (), 8)))
返回 (相加 (取重复文本 (相减 (2, 取文本长度 (局部_时)), “0”), 局部_时, “:”, 取重复文本 (相减 (2, 取文本长度 (局部_分)), “0”), 局部_分, “:”, 取重复文本 (相减 (2, 取文本长度 (局部_秒)), “0”), 局部_秒, “ ”))

.子程序 _编辑框_代理号_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _编辑框_应用程序标识_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _编辑框_客户号_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _编辑框_分组号_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _编辑框_序列号_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _编辑框_用户密码_获得焦点, 空白型, , 
赋值 (., 取文本长度 (.))

.子程序 _按钮_长度_被单击, 空白型, , 
信息框 (相加 (“写入文本长度为： ”, 到文本 (取文本长度 (.))), #信息图标, )


 ' 不属于任何一个程序集、类模块的函数：
