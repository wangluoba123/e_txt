 ' 文件类型：Windows窗口程序

 ' 程序名称：易语言经典算法 - 全排列问题(递推法)
 ' 程序描述：　　输入整数N，输出1……N的全部不同排列的总数，当N<=6。
 ' 程序作者：大有吴涛易语言软件公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 400
    高度 = 280
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “易语言经典算法 - 全排列问题(递推法)”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 0 扩展界面支持库三





.窗口程序集 启动窗口程序集, , , 

.程序集变量 存储数组, 整数型, , "0", 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' 使用算法：递推法
 ' 问题：全排列问题
 ' 问题描述：
 ' 输入整数N,输出1……N的全部不同排列的总数，当N<=6时，还要输出全部排列。
 ' 问题分析：
 ' 定义一个数组存储所有数，按从后向前的顺序依次两两改变数组的存储，变换数的排列方法。然后输出。
 ' 备注：

.子程序 _计算图形按钮_被单击, 空白型, , 
赋值 (.内容, “”)
主子程序 ()

.子程序 排列子程序, 整数型, , 
.参数 排列数总数, 整数型, , 

.局部变量 开始数下标, 整数型, , , 标记本次排列的开始
.局部变量 临时变量, 整数型, , , 用于存储交换变量
.局部变量 交换数下标1, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标2, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标3, 整数型, , , 交换数在数组的位置
.局部变量 交换数下标4, 整数型, , , 交换数在数组的位置

赋值 (开始数下标, 排列数总数) ' 从数组存储的最后一位数开始向前比较
.判断循环首 (并且 (大于或等于 (开始数下标, 1), 大于或等于 (存储数组 [开始数下标], 存储数组 [相加 (开始数下标, 1)]))) ' 找出本次排列开始的位置，第一次从最后一位开始
    赋值 (开始数下标, 相减 (开始数下标, 1))
    
.判断循环尾 ()

.如果真 (小于 (开始数下标, 1)) ' 已经全排列完毕，结束
    返回 (0)
.如果真结束
赋值 (交换数下标1, 相加 (开始数下标, 1)) ' 从下一个数开始交换
赋值 (交换数下标2, 相加 (开始数下标, 1))
 ' 找到要交换的两个数
.判断循环首 (并且 (小于或等于 (交换数下标2, 排列数总数), 小于 (存储数组 [开始数下标], 存储数组 [交换数下标2])))
    赋值 (交换数下标1, 交换数下标2)
    赋值 (交换数下标2, 相加 (交换数下标2, 1))
.判断循环尾 ()
 ' 交换数值
赋值 (临时变量, 存储数组 [开始数下标])
赋值 (存储数组 [开始数下标], 存储数组 [交换数下标1])
赋值 (存储数组 [交换数下标1], 临时变量)
赋值 (交换数下标3, 相加 (开始数下标, 1))
赋值 (交换数下标4, 排列数总数)
.判断循环首 (小于 (交换数下标3, 交换数下标4))
    赋值 (临时变量, 存储数组 [交换数下标3])
    赋值 (存储数组 [交换数下标3], 存储数组 [交换数下标4])
    赋值 (存储数组 [交换数下标4], 临时变量)
    赋值 (交换数下标3, 相加 (交换数下标3, 1))
    赋值 (交换数下标4, 相减 (交换数下标4, 1))
.判断循环尾 ()
返回 (1)

.子程序 主子程序, 空白型, , 
.局部变量 局部计次变量, 整数型, , , 
.局部变量 循环控制变量, 整数型, , , 
.局部变量 输入值, 整数型, , , 要排列数的个数
.局部变量 得到的结果数, 长整数型, , , 累积得到的结果

赋值 (输入值, 到数值 (.内容)) ' 获取一个总数
.如果真 (大于 (输入值, 10))
    .如果真 (不等于 (信息框 (“您输入的数值过大，处理数据时程序将会有一段时间无响应，是否继续？”, 相加 (#是否钮, #询问图标), “请问：”), #是钮))
         ' 如果不想等待很长时间则返回
        赋值 (.内容, “4”)
        返回 ()
    .如果真结束
    
.如果真结束
 ' 根据输入的个数，给数组付值
重定义数组 (存储数组, 假, 相加 (输入值, 1))
.变量循环首 (1, 输入值, 1, 局部计次变量)
    赋值 (存储数组 [局部计次变量], 局部计次变量)
.变量循环尾 ()
赋值 (循环控制变量, 1)
赋值 (得到的结果数, 0) ' 得到的结果总数
.判断循环首 (大于 (循环控制变量, 0))
    .如果真 (小于或等于 (输入值, 6)) ' 如小于6显示全部可能组合
        .变量循环首 (1, 输入值, 1, 局部计次变量)
            相加 (到文本 (存储数组 [局部计次变量]), “,”).加入文本 ()
        .变量循环尾 ()
        #换行符.加入文本 ()
    .如果真结束
    赋值 (得到的结果数, 相加 (得到的结果数, 1)) ' 累积得到的结果数
    赋值 (循环控制变量, 排列子程序 (输入值)) ' 返回0，则全排列完毕
.判断循环尾 ()
相加 (#换行符, “共有”, 到文本 (得到的结果数), “排列方法”).加入文本 ()



 ' 不属于任何一个程序集、类模块的函数：
