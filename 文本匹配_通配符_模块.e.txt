 ' 文件类型：Windows模块源码

 ' 程序名称：文本匹配_通配符_模块
 ' 程序描述：zhe001 制作 2008/6/30
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 250
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库





.DLL命令 寻找文本I_, 整数型, "shell32.dll", "StrStrIA", , 
    .参数 被寻找文本, 文本型, , lpFirst
    .参数 欲寻找文本, 文本型, , lpSrch

.DLL命令 寻找文本_, 整数型, "", "StrStrA", , 
    .参数 被寻找文本, 文本型, , lpSource
    .参数 欲寻找文本, 文本型, , lpLast

.DLL命令 指针到文本A, 文本型, "", "SetHandleCount", , 公开, 数据地址
    .参数 指针数据, 整数型, , 

.DLL命令 CharNextA, 整数型, "", "", , 
    .参数 a, 文本型, , 

.DLL命令 取文本指针A, 整数型, "", "SetHandleCount", , 公开, 数据地址
    .参数 文本内容, 文本型, , 

.窗口程序集 窗口程序集1, , , 

.子程序 _启动子程序, 整数型, , 
 ' 载入 (启动窗口, , 真)
返回 (0)

.子程序 通配符_预设通配文本, 逻辑型, , 
.参数 通配符文本, 文本型, , 
.参数 匿名参数_680, 文本型, 数组, 

.局部变量 a, 空白型, , , 
.局部变量 b, 空白型, , , 
.局部变量 i, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 

.如果真 (等于 (通配符文本, “”))
    返回 (假)
.如果真结束
清除数组 (匿名参数_680)
赋值 (a, 寻找文本A (通配符文本, “*”, 假))
赋值 (b, 寻找文本A (通配符文本, “?”, 假))
.如果真 (并且 (等于 (a, 0), 等于 (b, 0)))
    加入成员 (匿名参数_680, 通配符文本)
    返回 (真)
.如果真结束
赋值 (i, 取文本指针A (通配符文本))
.判断循环首 (真)
    .如果 (并且 (大于 (a, b), 不等于 (b, 0)))
        赋值 (x, b)
        赋值 (y, 63)
    .否则
        .如果 (不等于 (a, 0))
            赋值 (x, a)
            赋值 (y, 42)
        .否则
            赋值 (x, b)
            赋值 (y, 63)
        .如果结束
        
    .如果结束
    .如果 (不等于 (x, 0))
        置数值_1 (x, 0)
        .如果真 (不等于 (读数值_1 (i), 0))
            加入成员 (匿名参数_680, 指针到文本A (i))
        .如果真结束
        置数值_1 (x, y)
        加入成员 (匿名参数_680, 指针到文本A (取整数栈地址A (y)))
        赋值 (i, 相加 (x, 1))
    .否则
        跳出循环 ()
    .如果结束
    赋值 (a, 寻找文本A (指针到文本A (i), “*”, 假))
    赋值 (b, 寻找文本A (指针到文本A (i), “?”, 假))
.判断循环尾 ()
.如果真 (不等于 (读数值_1 (i), 0))
    加入成员 (匿名参数_680, 指针到文本A (i))
.如果真结束
返回 (真)

.子程序 通配符_通配文本预设, 文本型, 公开, 返回游离文本数据
.参数 通配符文本, 文本型, , 

.局部变量 存放游离数据, 文本型, , "0", 

.如果真 (通配符_预设通配文本 (通配符文本, 存放游离数据))
    置文本组栈数据 (存放游离数据, 取数组默认栈数据 ())
    置入代码 ({ 201, 194, 4, 0 })
.如果真结束
返回 (“”)

.子程序 通配符_通配文本清除, 空白型, , 
.参数 游离文本数据, 文本型, , 

.局部变量 游离数据, 文本型, , "0", 
.局部变量 i, 空白型, , , 

赋值 (i, 置文本栈数据 (游离文本数据, 0))
.如果 (并且 (不等于 (i, 0), 等于 (读数值_1 (i), 1)))
    清除数组 (游离数据)
    置文本组栈数据 (游离数据, i)
.否则
    置文本栈数据 (游离文本数据, i)
.如果结束


.子程序 通配符_是否匹配文本, 逻辑型, , *代表任意字符串，?代表一个任意字符
.参数 欲匹配文本, 文本型, , 通配符文本或游离文本数据
.参数 被搜寻文本, 文本型, , 
.参数 匹配大小写, 逻辑型, 可空, 

.局部变量 通配文本, 文本型, , "0", 
.局部变量 i, 空白型, , , 
.局部变量 a, 空白型, , , 
.局部变量 命中位置, 空白型, , , 
.局部变量 出现位置, 空白型, , , 
.局部变量 返回结果, 逻辑型, , , 
.局部变量 计次, 空白型, , , 
.局部变量 a1, 空白型, , , 
.局部变量 a2, 空白型, , , 
.局部变量 a3, 空白型, , , 
.局部变量 成员数, 空白型, , , 
.局部变量 c, 空白型, , , 
.局部变量 上次文本, 空白型, , , 

.如果 (等于 (读数值_4 (取文本指针A (欲匹配文本)), 1))
    清除数组 (通配文本)
    置文本组栈数据 (通配文本, 取文本指针A (欲匹配文本))
.否则
    .如果真 (等于 (通配符_预设通配文本 (欲匹配文本, 通配文本), 假))
        返回 (假)
    .如果真结束
    
.如果结束
赋值 (成员数, 取数组成员数 (通配文本))
.如果真 (不等于 (成员数, 0))
    赋值 (命中位置, 取文本指针A (被搜寻文本))
    .计次循环首 (成员数, i)
        赋值 (a2, 读数值_1 (取文本指针A (通配文本 [i])))
        .如果 (不等于 (相减 (i, 1), 0))
            赋值 (a1, 读数值_1 (取文本指针A (通配文本 [相减 (i, 1)])))
        .否则
            赋值 (a1, 0)
        .如果结束
        .如果 (大于 (相加 (i, 1), 成员数))
            赋值 (a3, 0)
        .否则
            赋值 (a3, 读数值_1 (取文本指针A (通配文本 [相加 (i, 1)])))
        .如果结束
        .判断开始 (等于 (a2, 42))
            赋值 (c, 1)
            赋值 (计次, 0)
            赋值 (返回结果, 真)
        .判断 (等于 (a2, 63))
            赋值 (计次, 相加 (计次, 1))
            .如果 (并且 (等于 (a3, 0), 不等于 (a1, 42)))
                .如果 (并且 (大于 (取文本长度 (指针到文本A (命中位置)), 计次), 不等于 (c, 1)))
                    .如果 (等于 (上次文本, 0))
                        赋值 (返回结果, 假)
                    .否则
                        赋值 (i, 取文本长度 (指针到文本A (上次文本)))
                        赋值 (a, 取文本长度 (指针到文本A (命中位置)))
                        .判断循环首 (不等于 (a, -1))
                            赋值 (a, 倒找文本 (指针到文本A (命中位置), 指针到文本A (上次文本), a, 匹配大小写))
                            .如果真 (并且 (不等于 (a, -1), 小于 (相减 (取文本长度 (指针到文本A (命中位置)), a, i), 计次)))
                                跳出循环 ()
                            .如果真结束
                            
                        .判断循环尾 ()
                        .如果 (不等于 (a, -1))
                            赋值 (返回结果, 真)
                        .否则
                            赋值 (返回结果, 假)
                        .如果结束
                        
                    .如果结束
                    
                .否则
                    赋值 (返回结果, 真)
                .如果结束
                
            .否则
                赋值 (返回结果, 真)
            .如果结束
            
        .默认
            赋值 (a, 取文本指针A (被搜寻文本))
            赋值 (上次文本, 取文本指针A (通配文本 [i]))
            .判断循环首 (真)
                赋值 (出现位置, 寻找文本A (指针到文本A (a), 通配文本 [i], 匹配大小写))
                .判断开始 (等于 (出现位置, 0))
                    赋值 (返回结果, 假)
                    跳出循环 ()
                .判断 (大于或等于 (出现位置, 命中位置))
                    .如果 (等于 (a1, 42))
                        赋值 (命中位置, 相加 (出现位置, 取文本长度 (通配文本 [i])))
                        赋值 (返回结果, 真)
                    .否则
                        .如果 (等于 (a1, 63))
                            .如果 (或者 (等于 (出现位置, 相加 (命中位置, 计次)), 等于 (c, 1)))
                                赋值 (命中位置, 相加 (出现位置, 取文本长度 (通配文本 [i])))
                                赋值 (返回结果, 真)
                            .否则
                                赋值 (返回结果, 假)
                            .如果结束
                            
                        .否则
                            赋值 (命中位置, 相加 (出现位置, 取文本长度 (通配文本 [i])))
                            .如果 (等于 (a3, 0))
                                .如果 (并且 (等于 (a, 出现位置), 等于 (0, 读数值_1 (命中位置))))
                                    赋值 (返回结果, 真)
                                .否则
                                    赋值 (返回结果, 假)
                                .如果结束
                                
                            .否则
                                赋值 (返回结果, 真)
                            .如果结束
                            
                        .如果结束
                        
                    .如果结束
                    赋值 (c, 0)
                    .如果 (等于 (a3, 0))
                        .如果 (不等于 (读数值_1 (命中位置), 0))
                            赋值 (返回结果, 假)
                        .否则
                            跳出循环 ()
                        .如果结束
                        
                    .否则
                        跳出循环 ()
                    .如果结束
                    
                .默认
                    赋值 (返回结果, 假)
                .判断结束
                赋值 (a, 相加 (出现位置, 取文本长度 (通配文本 [i])))
                赋值 (计次, 0)
            .判断循环尾 ()
        .判断结束
        .如果真 (等于 (返回结果, 假))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.如果真结束
.如果真 (等于 (读数值_4 (取文本指针A (欲匹配文本)), 1))
    置文本组栈数据 (通配文本, 取数组默认栈数据 ())
.如果真结束
返回 (返回结果)

.子程序 寻找文本A, 整数型, , 
.参数 被搜寻文本, 文本型, , 
.参数 欲寻找文本, 文本型, , 
.参数 匹配大小写, 逻辑型, , 

.如果 (匹配大小写)
    返回 (寻找文本_ (被搜寻文本, 欲寻找文本))
.否则
    返回 (寻找文本I_ (被搜寻文本, 欲寻找文本))
.如果结束


.子程序 取整数组栈数据, 整数型, , 整数组变量栈地址数值
.参数 整数组, 整数型, 数组, 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 88 }, { 199, 64, 1 }, { 139, 0, 139, 255 }, { 255, 224 }))
返回 (0)

.子程序 置整数组栈数据, 整数型, , 整数组变量栈地址数值
.参数 整数组, 整数型, 数组, 
.参数 栈数据, 整数型, , 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 90 }, { 199, 64, 1 }, { 139, 2, 143, 2 }, { 255, 224 }))
返回 (0)

.子程序 取文本组栈数据, 整数型, , 整数组变量栈地址数值
.参数 文本组, 文本型, 数组, 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 88 }, { 199, 64, 1 }, { 139, 0, 139, 255 }, { 255, 224 }))
返回 (0)

.子程序 置文本组栈数据, 整数型, , 整数组变量栈地址数值
.参数 文本组, 文本型, 数组, 
.参数 栈数据, 整数型, , 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 90 }, { 199, 64, 1 }, { 139, 2, 143, 2 }, { 255, 224 }))
返回 (0)

.子程序 取数组默认栈数据, 整数型, , 
.局部变量 i, 空白型, , "0", 

清除数组 (i)
取整数组栈数据 (i)
置入代码 (相加 ({ 139, 208 }, { 201, 88, 141, 64, 251, 198, 0 }, { 184 }, { 137, 80, 1 }, { 255, 224 }))
返回 (0)

.子程序 置数值_1, 空白型, , 到字节;EDX EAX
.参数 数据地址, 整数型, , 
.参数 数值, 整数型, , 

置入代码 ({ 201, 88, 141, 64, 251, 199, 0, 88, 90, 136, 16, 198, 64, 4, 144, 255, 224 })

.子程序 读数值_1, 整数型, , 到字节;EDX EAX
.参数 数据地址, 整数型, , 

置入代码 ({ 201, 88, 141, 64, 251, 199, 0, 90, 51, 192, 138, 198, 64, 4, 2, 255, 224 })
 ' 返回 (0)

.子程序 读数值_4, 整数型, , 到整数;EAX
.参数 数据地址, 整数型, , 

置入代码 ({ 201, 88, 141, 64, 251, 199, 0, 90, 51, 192, 139, 198, 64, 4, 2, 255, 224 })
返回 (0)


.子程序 取文本栈数据, 整数型, , 变量
.参数 文本变量, 文本型, 参考, 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 88 }, { 199, 64, 1 }, { 139, 0, 139, 255 }, { 255, 224 }))
返回 (0)

.子程序 置文本栈数据, 整数型, , 变量edx,eax/返回旧值
.参数 文本变量, 文本型, 参考, 
.参数 栈数据, 整数型, , 

置入代码 (相加 ({ 201, 88, 141, 64, 251, 198, 0 }, { 90 }, { 199, 64, 1 }, { 139, 2, 143, 2 }, { 255, 224 }))
返回 (0)

.子程序 取整数栈地址A, 整数型, , 
.参数 数据地址, 字节型, 参考, 变量

置入代码 ({ 201, 88, 141, 64, 251, 198, 0, 88, 199, 64, 1, 235, 2, 0, 0, 255, 224 })
返回 (0)


 ' 不属于任何一个程序集、类模块的函数：
