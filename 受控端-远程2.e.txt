 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 0
    顶边 = 70
    宽度 = 354
    高度 = 229
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 0
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “远程桌面 - 受控端 - 王军 制作”
    帮助文件名 = “”



.图片 GIF快照模块, " ' 已保存到：D:\易语言学习\Data\受控端-远程2.e\GIF快照模块", , GIF快照.EC
.常量 GMEM_FIXED, "0", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 1 1 应用接口支持库
 ' Exmlrpc A36CFD538657479eBD7C0D287BBB3D95 1 2 远程服务支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 1 0 数据操作支持库一
 ' eCompress 7B68736E818E41c5A28B0AE4D43C128C 1 1 压缩解压支持库




数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 


.DLL命令 移动光标, 逻辑型, "", "SetCursorPos", , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 模拟鼠标, 空白型, "", "mouse_event", , 
    .参数 dwFlags, 空白型, , 
    .参数 dx, 空白型, , 
    .参数 dy, 空白型, , 
    .参数 cButtons, 空白型, , 
    .参数 dwExtraInfo, 空白型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 MultiByteToWideChar, 整数型, "", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus.dll", "GdipLoadImageFromFile", , 
    .参数 filename, 字节集, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus.dll", "GdipSaveImageToFile", , 
    .参数 image, 空白型, , 
    .参数 filename, 字节集, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus.dll", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 对象, 传址, 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 对象, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GlobalLock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalSize, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 逻辑型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", , 
    .参数 uFlags, 空白型, , 
    .参数 dwBytes, 空白型, , 

.DLL命令 GetObjectPtr, 整数型, "", "lstrcpyn", , 
    .参数 lpString1, 对象, 传址, 
    .参数 lpString2, 对象, 传址, 
    .参数 iMaxLength, 整数型, , 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 空白型, 传址, 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", , 
    .参数 hMem, 空白型, , 

.DLL命令 CreateStreamOnHGlobal_int, 整数型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 空白型, , 
    .参数 fDeleteOnRelease, 逻辑型, , 
    .参数 ppstm, 空白型, 传址, 

.DLL命令 GdipSaveImageToStream_int, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 空白型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 GetHGlobalFromStream_int, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 空白型, , 未知类型：ISTREAM。
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipSaveImageToStream, 整数型, "gdiplus.dll", "GdipSaveImageToStream", , 
    .参数 image, 空白型, , 
    .参数 stream, 对象, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 空白型, , 

.DLL命令 CopyMemory, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.窗口程序集 窗口程序集_服务端, , , 

.程序集变量 服务端, 未知类型0x30001, , , 
.程序集变量 Token, 整数型, , , 
.程序集变量 ImageFormat, 整数型, , , 
.程序集变量 集_客户句柄, 整数型, , , 
.程序集变量 集_宽度, 整数型, , , 
.程序集变量 集_高度, 整数型, , , 
.程序集变量 集_时钟毫秒, 整数型, , , 
.程序集变量 集_格式, 整数型, , , 
.程序集变量 集_品质, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 GpInput, GdiplusStartupInput, , , 

赋值 (GpInput.GdiplusVersion, 1)
GdiplusStartup (Token, GpInput, 0) ' 启动 GDI+
赋值 (ImageFormat, 5)
_按钮1_被单击 ()
赋值 (集_宽度, 取屏幕宽度 ())
赋值 (集_高度, 取屏幕高度 ())
赋值 (集_格式, 2) ' JPG格式
赋值 (集_品质, 100)
赋值 (.内容, 到文本 (集_品质))

.子程序 _按钮1_被单击, 空白型, , 
.如果真 (等于 (服务端.未知支持库函数_3 (5, 20), 假))
    赋值 (.标题, “设置服务器失败!”)
    返回 ()
.如果真结束

.如果 (服务端.未知支持库函数_1 (到数值 (.内容), &服务器数据处理, 假)) ' 真 = 并行处理,假 = 串行处理
    加入消息内容 (相加 (“已启动服务端:”, 转换为IP地址 (取主机名 ()), “,端口号”, .内容))
    加入消息内容 (“已准备好,等待客户机连接...”)
.否则
    加入消息内容 (“启动错误”)
.如果结束


.子程序 服务器数据处理, 空白型, , 
.参数 请求信息地址, 整数型, , 

.局部变量 字节集数据, 字节集, , , 
.局部变量 头部标识, 文本型, , , 
.局部变量 分开内容, 文本型, , "0", 
.局部变量 客户IP地址, 文本型, , , 
.局部变量 客户代码, 文本型, , , 
.局部变量 真正字节集数据, 字节集, , , 
.局部变量 键值, 整数型, , , 
.局部变量 功能键值, 整数型, , , 

赋值 (.内容, 到文本 (请求信息地址))
.判断开始 (等于 (服务端.未知支持库函数_27 (请求信息地址), 0))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    ”, “有客户连接”))
    赋值 (集_品质, 100)
    赋值 (集_宽度, 取整 (相除 (相乘 (取屏幕宽度 (), 到数值 (到文本 (集_品质))), 100)))
    赋值 (集_高度, 取整 (相除 (相乘 (取屏幕高度 (), 到数值 (到文本 (集_品质))), 100)))
    赋值 (.内容, 到文本 (集_品质))
    
    .如果真 (等于 (服务端.未知支持库函数_8 (请求信息地址, 集_客户句柄), 真))
        赋值 (.内容, 到文本 (集_客户句柄))
        .如果真 (服务端.未知支持库函数_9 (集_客户句柄, 客户IP地址))
            赋值 (.内容, 客户IP地址)
            .如果 (等于 (转换为主机名 (客户IP地址), “localhost”))
                赋值 (.内容, 取主机名 ())
            .否则
                赋值 (.内容, 转换为主机名 (客户IP地址))
            .如果结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (服务端.未知支持库函数_7 (集_客户句柄, 到字节集 (“握手”)), 假))
        赋值 (.标题, “发送数据失败!”)
    .如果真结束
    返回 ()
.判断 (等于 (服务端.未知支持库函数_27 (请求信息地址), 1))
    加入消息内容 (相加 (“消息：”, “有客户主动或意外断开与服务端的连接”))
    赋值 (.时钟周期, 0)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    赋值 (.内容, “”)
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    ”, “连接已断开”))
    返回 ()
.判断 (等于 (服务端.未知支持库函数_27 (请求信息地址), 2))
    加入消息内容 (相加 (“消息：”, “客户端发送字节流到服务器”))
.判断 (等于 (服务端.未知支持库函数_27 (请求信息地址), -1))
    加入消息内容 (相加 (“消息：”, “异常出错”))
.默认
    
.判断结束

.如果 (等于 (服务端.未知支持库函数_5 (请求信息地址, 客户代码, 字节集数据), 假))
    加入消息内容 (相加 (“消息：”, “取字节集错误!”, 到文本 (取字节集长度 (字节集数据)), 到文本 (字节集数据)))
.否则
    加入消息内容 (相加 (“消息：”, “取到字节集!”, 到文本 (取字节集长度 (字节集数据)), 到文本 (字节集数据)))
.如果结束

赋值 (头部标识, 到文本 (取字节集左边 (字节集数据, 4)))
赋值 (.标题, 到文本 (字节集数据))
加入消息内容 (相加 (“头部标识 = ”, 头部标识))
赋值 (真正字节集数据, 取字节集右边 (字节集数据, 相减 (取字节集长度 (字节集数据), 4)))

.判断开始 (或者 (等于 (头部标识, “比例”), 等于 (头部标识, “品质”))) ' 传过来抓屏幕的比例
    赋值 (集_品质, 到数值 (到文本 (真正字节集数据)))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    ”, “品质”, 到文本 (集_品质)))
    赋值 (集_宽度, 取整 (相除 (相乘 (取屏幕宽度 (), 到数值 (到文本 (集_品质))), 100)))
    赋值 (集_高度, 取整 (相除 (相乘 (取屏幕高度 (), 到数值 (到文本 (集_品质))), 100)))
    赋值 (.内容, 到文本 (集_品质))
.判断 (等于 (头部标识, “名称”)) ' 传过来主控端的主机名
    赋值 (.内容, 到文本 (真正字节集数据))
.判断 (等于 (头部标识, “毫秒”)) ' 传过来抓屏幕间隔时间
    赋值 (集_时钟毫秒, 到数值 (到文本 (真正字节集数据)))
    赋值 (.时钟周期, 到数值 (到文本 (真正字节集数据)))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    ”, “毫秒”, 到文本 (真正字节集数据)))
.判断 (等于 (到大写 (头部标识), “JPG”)) ' 传过来是用JPG方式传图
    赋值 (.选中, 真)
    赋值 (.选中, 假)
.判断 (等于 (到大写 (头部标识), “GIF”)) ' 传过来是用GIF方式传图
    赋值 (.选中, 假)
    赋值 (.选中, 真)
.判断 (等于 (头部标识, “远控”))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    ”, “远控”, 到文本 (真正字节集数据)))
    赋值 (.时钟周期, 到数值 (到文本 (真正字节集数据)))
     ' ==========================================================左按,左放,右按,右放,鼠移,放键,输字
.判断 (等于 (头部标识, “鼠移”))
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    赋值 (.标题, 相加 (到文本 (取现行时间 ()), “    左边:”, 到文本 (到数值 (分开内容 [1])), “    顶边:”, 到文本 (到数值 (分开内容 [2]))))
    移动光标 (到数值 (分开内容 [1]), 到数值 (分开内容 [2]))
    返回 ()
     ' 模拟鼠标点击 (到数值 (分开内容 [1]) × 取屏幕宽度 (), 到数值 (分开内容 [2]) × 取屏幕高度 (), 到数值 (分开内容 [2]))
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “左按”))
    模拟鼠标 (2, 0, 0, 0, 0) ' 是=鼠标左键被按下
    赋值 (.标题, “鼠标左键被按下”)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “左放”))
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    未知支持库函数_2 (到数值 (分开内容 [1]), 到数值 (分开内容 [2]), #.)
    赋值 (.标题, “鼠标左键被放开”)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “双击”))
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    未知支持库函数_2 (到数值 (分开内容 [1]), 到数值 (分开内容 [2]), #.)
    赋值 (.标题, “鼠标左键被双击”)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “右按”))
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    未知支持库函数_2 (到数值 (分开内容 [1]), 到数值 (分开内容 [2]), #.)
    赋值 (.标题, “鼠标右键被按下”)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “右放”))
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    未知支持库函数_2 (到数值 (分开内容 [1]), 到数值 (分开内容 [2]), #.)
    赋值 (.标题, “鼠标右键被放开”)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “放键”))
    赋值 (.标题, “放开某键”)
    赋值 (分开内容, 分割文本 (到文本 (真正字节集数据), “,”, ))
    .如果 (或者 (等于 (到数值 (分开内容 [2]), 16), 等于 (到数值 (分开内容 [2]), 17), 等于 (到数值 (分开内容 [2]), 18)))
        赋值 (键值, 到数值 (删首尾空 (分开内容 [1])))
        赋值 (功能键值, 到数值 (删首尾空 (分开内容 [2])))
        .如果 (不等于 (到数值 (分开内容 [1]), 0))
            未知支持库函数_1 (功能键值, 键值, ) ' 要做试验是否可行
            处理事件 ()
             ' 编辑框1.加入文本 (“功能键 ” ＋ 分开内容 [2] ＋ “ 键值 ” ＋ 分开内容 [1] ＋ #换行符)
            返回 ()
        .否则
            未知支持库函数_1 (功能键值, , ) ' 要做试验是否可行
            处理事件 ()
             ' 编辑框1.加入文本 (“功能键 ” ＋ 分开内容 [2] ＋ #换行符)
            返回 ()
        .如果结束
        
    .否则
        赋值 (键值, 到数值 (删首尾空 (分开内容 [1])))
        .如果真 (不等于 (键值, 0))
             ' 输出调试文本 (到数值 (删首尾空 (文本数组 [1])))
            未知支持库函数_1 (键值, , )
            处理事件 ()
             ' 编辑框1.加入文本 (“ 键值 ” ＋ 分开内容 [1] ＋ #换行符)
            返回 ()
        .如果真结束
        
    .如果结束
    返回 ()
    
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.判断 (等于 (头部标识, “输字”))
    置剪辑板文本 (取字节集数据 (真正字节集数据, #文本型, ))
    未知支持库函数_1 (#Ctrl键, #V键, )
     ' 编辑框1.加入文本 (文本 ＋ #换行符)
    返回 ()
    _时钟1_周期事件 ()
    赋值 (.时钟周期, 0)
    赋值 (.时钟周期, 集_时钟毫秒)
.默认
    
.判断结束


.子程序 加入消息内容, 空白型, , 
.参数 新文本, 文本型, , 

.如果真 (大于或等于 (取文本长度 (.内容), 30000))
    赋值 (.内容, “”)
.如果真结束
赋值 (.内容, 相加 (新文本, #换行符, .内容))

.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 屏幕快照, 字节集, , , 
.局部变量 压缩字集, 字节集, , , JPG或GIF
.局部变量 压缩字集ZIP, 未知类型0x50001, , , 

赋值 (屏幕快照, 快照 (集_宽度, 集_高度))
.判断开始 (等于 (.选中, 真))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    快照长度:”, 到文本 (取字节集长度 (屏幕快照))))
    .如果真 (等于 (转换图像格式 (屏幕快照, 2, 压缩字集), 假))
        加入消息内容 (“转换不成功!”)
    .如果真结束
    
.判断 (等于 (.选中, 真))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    快照长度:”, 到文本 (取字节集长度 (屏幕快照))))
    .如果真 (等于 (转换图像格式 (屏幕快照, 3, 压缩字集), 假))
        加入消息内容 (“转换不成功!”)
    .如果真结束
    
.判断 (等于 (.选中, 真))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    快照长度:”, 到文本 (取字节集长度 (屏幕快照))))
    写到文件 (“TEMP.BMP”, 屏幕快照)
    赋值 (压缩字集, 未知支持库函数_0 (屏幕快照))
.判断 (等于 (.选中, 真))
    加入消息内容 (相加 (到文本 (取现行时间 ()), “    快照长度:”, 到文本 (取字节集长度 (屏幕快照))))
    压缩字集ZIP.未知支持库函数_1 (屏幕快照, “TEMP.ZIP”, “TEMP.BMP”)
    赋值 (压缩字集, 读入文件 (“TEMP.ZIP”))
.默认
    
.判断结束
赋值 (.内容, 到文本 (取字节集长度 (压缩字集)))

.如果真 (等于 (服务端.未知支持库函数_7 (集_客户句柄, 相加 (到字节集 (“图像”), 压缩字集)), 假))
    加入消息内容 (“发送图像不成功!”)
.如果真结束

加入消息内容 (相加 (到文本 (取现行时间 ()), “    发送长度:”, 到文本 (取字节集长度 (压缩字集))))


.子程序 转换图像格式, 逻辑型, , 支持bmp、jpg、gif、tiff、png互转。
.参数 图像数据, 字节集, , 被转换的图像数据
.参数 转换格式, 整数型, , 转换后的图片格式。1、bmp；2、jpg；3、gif；4、tiff；5、png
.参数 新图像, 字节集, 参考, 用于保存新图像的变量

.局部变量 Clsid, 字节集, , , 
.局部变量 pStr, 文本型, , , 
.局部变量 nLength, 整数型, , , 
.局部变量 hMem, 整数型, , , 
.局部变量 Stream, 对象, , , 
.局部变量 lpvoid, 整数型, , , 
.局部变量 pStream, 整数型, , , 
.局部变量 bitmap, 整数型, , , 
.局部变量 DataStream, 对象, , , 
.局部变量 hMemDataStream, 整数型, , , 
.局部变量 pDataStream, 整数型, , , 
.局部变量 nStreamSize, 整数型, , , 
.局部变量 bRet, 逻辑型, , , 

.判断开始 (等于 (转换格式, 1)) ' bmp
    赋值 (pStr, “{557CF400-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 2)) ' jpg
    赋值 (pStr, “{557CF401-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 3)) ' gif
    赋值 (pStr, “{557CF402-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 4)) ' tiff
    赋值 (pStr, “{557CF405-1A04-11D3-9A73-0000F81EF32E}”)
.判断 (等于 (转换格式, 5)) ' png
    赋值 (pStr, “{557CF406-1A04-11D3-9A73-0000F81EF32E}”)
.默认
    
.判断结束
赋值 (Clsid, 取空白字节集 (16))
CLSIDFromString (A2W (pStr), Clsid) ' 获取图像格式对应的Clsid

赋值 (nLength, 取字节集长度 (图像数据))
赋值 (hMem, GlobalAlloc (#GMEM_FIXED, nLength)) ' 申请内存
CreateStreamOnHGlobal (hMem, 真, Stream) ' 创建流对象
赋值 (lpvoid, GlobalLock (hMem)) ' 锁定该区域，获得存放数据的地址
写到内存 (图像数据, lpvoid, nLength) ' 把数据写到流里面
GlobalUnlock (hMem) ' 取消锁定
赋值 (pStream, GetObjectPtr (Stream, Stream, 0)) ' 获得流对象指针
GdipCreateBitmapFromStream (取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1), bitmap) ' 创建位图对象

CreateStreamOnHGlobal (0, 真, DataStream)
赋值 (pStream, GetObjectPtr (DataStream, DataStream, 0))
赋值 (pStream, 取字节集数据 (指针到字节集 (pStream, 4), #整数型, 1))
GdipSaveImageToStream_int (bitmap, pStream, Clsid, 0) ' 这里是图像格式转换的关键。把位图按指定格式保存到数据流里面
GetHGlobalFromStream_int (pStream, hMemDataStream) ' 获得数据流句柄
赋值 (pDataStream, GlobalLock (hMemDataStream)) ' 获得数据指针
赋值 (nStreamSize, GlobalSize (hMemDataStream)) ' 获取数据大小
.如果真 (不等于 (pDataStream, 0))
    赋值 (新图像, 取空白字节集 (nStreamSize))
    CopyMemory (新图像, pDataStream, nStreamSize) ' 复制到字节集里
    赋值 (bRet, 真)
.如果真结束
 ' 别忘记下面释放资源的函数，否则造成内存泄漏
GlobalUnlock (hMemDataStream)
GdipDisposeImage (bitmap)
GlobalFree (hMem)
返回 (bRet)

.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 欲转换的文本, 文本型, , 

.局部变量 缓冲区, 字节集, , , 
.局部变量 缓冲区大小, 整数型, , , 

赋值 (缓冲区大小, 相乘 (MultiByteToWideChar (0, 0, 欲转换的文本, -1, {  }, 0), 2))
赋值 (缓冲区, 取空白字节集 (缓冲区大小))
MultiByteToWideChar (0, 0, 欲转换的文本, 取文本长度 (欲转换的文本), 缓冲区, 缓冲区大小)
返回 (缓冲区)

.子程序 __启动窗口_将被销毁, 空白型, , 
赋值 (.时钟周期, 0)
服务端.未知支持库函数_2 ()
赋值 (_启动窗口., “服务关闭”)


.子程序 _按钮2_被单击, 空白型, , 
.如果 (等于 (服务端.未知支持库函数_7 (集_客户句柄, 到字节集 (“消息|你的电脑已被黑!”)), 真)) ' 第一个参数只能是数值型变量
    加入消息内容 (“成功:发送消息成功!”)
.否则
    加入消息内容 (“失败:发送消息失败!”)
.如果结束


.子程序 _单选框_JPG_被单击, 空白型, , 
.如果 (等于 (服务端.未知支持库函数_7 (集_客户句柄, 到字节集 (“JPG”)), 真)) ' 第一个参数只能是数值型变量
    加入消息内容 (“成功:发送消息成功!”)
.否则
    加入消息内容 (“失败:发送消息失败!”)
.如果结束


.子程序 _单选框_GIF_被单击, 空白型, , 
.如果 (等于 (服务端.未知支持库函数_7 (集_客户句柄, 到字节集 (“GIF”)), 真)) ' 第一个参数只能是数值型变量
    加入消息内容 (“成功:发送消息成功!”)
.否则
    加入消息内容 (“失败:发送消息失败!”)
.如果结束



 ' 不属于任何一个程序集、类模块的函数：
