 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 窗口
    左边 = 50
    顶边 = 50
    宽度 = 550
    高度 = 503
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 AF_INET, "2", 公开, 
.常量 SOCK_STREAM, "1", 公开, 
.常量 IPPROTO_TCP, "6", 公开, 
.常量 WSA_FLAG_OVERLAPPED, "1", 公开, 
.常量 SOMAXCONN, "2147483647", 公开, 
.常量 WSA_IO_PENDING, "997", 公开, 
.常量 SOCKET_ERROR, "-1", 公开, 
.常量 WSA_WAIT_TIMEOUT, "258", 公开, 
.常量 INVALID_SOCKET, "0", 公开, 
.常量 TF_DISCONNECT, "1", 公开, 
.常量 TF_REUSE_SOCKET, "2", 公开, 
.常量 SOL_SOCKET, "65535", 公开, 
.常量 SO_UPDATE_CONNECT_CONTEXT, "28688", 公开, 
.常量 SO_UPDATE_ACCEPT_CONTEXT, "28683", 公开, 
.常量 , , , 
.常量 , , , 
.常量 PF_INET, "2", , TCP/IP协议族
.常量 SOCK_DGRAM, "2", , 数据报套接字类型(UDP)
.常量 IPPROTO_UDP, "17", , 
.常量 , , , 
.常量 FD_ACCEPT, "8", , 客户进入
.常量 FD_CLOSE, "32", , 连接关闭
.常量 FD_READ, "1", , 数据到达
.常量 FD_WRITE, "2", , 发送数据
.常量 , , , 
.常量 必须的标准权限, "1", , 
.常量 进程_终止, "983040", , 
.常量 , , , 
.常量 数据包头, "“!@#~”", , 
.常量 给我断开, "“010000”", , 
.常量 聊天信息, "“000001”", , 聊天标识
.常量 上线信息, "“100000”", , 
.常量 全部客户, "“100001”", , 
.常量 要求打洞, "“100002”", , 
.常量 准备打洞, "“100003”", , 
.常量 开始打洞, "“100004”", , 
.常量 打洞成功, "“100005”", , 
.常量 , , , 
.常量 SC_MANAGER_ENUMERATE_SERVICE, "4", , 
.常量 SERVICE_WIN32, "48", , 
.常量 SIZEOF_SERVICE_STATUS, "36", , 
.常量 SERVICE_STOPPED, "1", , 
.常量 SERVICE_START_PENDING, "2", , 
.常量 SERVICE_STOP_PENDING, "3", , 
.常量 SERVICE_RUNNING, "4", , 
.常量 SERVICE_CONTINUE_PENDING, "5", , 
.常量 SERVICE_PAUSE_PENDING, "6", , 
.常量 SERVICE_PAUSED, "7", , 
.常量 SERVICE_ACCEPT_STOP, "1", , 
.常量 SERVICE_ACCEPT_PAUSE_CONTINUE, "2", , 
.常量 SERVICE_ACCEPT_SHUTDOWN, "4", , 
.常量 SERVICE_WIN32_OWN_PROCESS, "16", , 
.常量 SERVICE_WIN32_SHARE_PROCESS, "32", , 
.常量 SERVICE_KERNEL_DRIVER, "1", , 
.常量 SERVICE_FILE_SYSTEM_DRIVER, "2", , 
.常量 SERVICE_INTERACTIVE_PROCESS, "256", , 
.常量 SERVICE_ACTIVE, "1", , 
.常量 SERVICE_INACTIVE, "2", , 
.常量 SERVICE_STATE_ALL, "3", , 
.常量 , , , 
.常量 SO_ACCEPTCONN, "2", 公开, 
.常量 SO_BROADCAST, "32", 公开, 
.常量 SO_CONDITIONAL_ACCEPT, "12290", 公开, 
.常量 SO_CONFIRM_NAME, "40963", 公开, 
.常量 SO_CONNDATA, "28672", 公开, 
.常量 SO_CONNDATALEN, "28676", 公开, 
.常量 SO_CONNECT_TIME, "28684", 公开, 
.常量 SO_CONNOPT, "28673", 公开, 
.常量 SO_CONNOPTLEN, "28677", 公开, 
.常量 SO_DEBUG, "1", 公开, 
.常量 SO_DEREGISTER_NAME, "40961", 公开, 
.常量 SO_DISCDATA, "28674", 公开, 
.常量 SO_DISCDATALEN, "28678", 公开, 
.常量 SO_DISCOPT, "28675", 公开, 
.常量 SO_DISCOPTLEN, "28679", 公开, 
.常量 SO_DONTLINGER, "128", 公开, “(u_int)(SO_LINGER)”
.常量 SO_DONTROUTE, "16", 公开, 
.常量 SO_ERROR, "4103", 公开, 
.常量 SO_EXCLUSIVEADDRUSE, "4", 公开, 
.常量 SO_GETLOCALZONES, "40966", 公开, 
.常量 SO_GETMYZONE, "40964", 公开, 
.常量 SO_GETNETINFO, "40967", 公开, 
.常量 SO_GETZONELIST, "40965", 公开, 
.常量 SO_GROUP_ID, "8193", 公开, 
.常量 SO_GROUP_PRIORITY, "8194", 公开, 
.常量 SO_KEEPALIVE, "8", 公开, 
.常量 SO_LINGER, "128", 公开, 
.常量 SO_LINKINFO, "7", 公开, 
.常量 SO_LOOKUP_MYZONE, "40964", 公开, 
.常量 SO_LOOKUP_NAME, "40962", 公开, 
.常量 SO_LOOKUP_NETDEF_ON_ADAPTER, "40967", 公开, 
.常量 SO_LOOKUP_ZONES, "40965", 公开, 
.常量 SO_LOOKUP_ZONES_ON_ADAPTER, "40966", 公开, 
.常量 SO_MAX_MSG_SIZE, "8195", 公开, 
.常量 SO_MAXDG, "28681", 公开, 
.常量 SO_MAXPATHDG, "28682", 公开, 
.常量 SO_OOBINLINE, "256", 公开, 
.常量 SO_OPENTYPE, "28680", 公开, 
.常量 SO_PAP_GET_SERVER_STATUS, "40968", 公开, 
.常量 SO_PAP_PRIME_READ, "40969", 公开, 
.常量 SO_PAP_SET_SERVER_STATUS, "40967", 公开, 
.常量 SO_PROTOCOL_INFOA, "8196", 公开, 
.常量 SO_PROTOCOL_INFOW, "8197", 公开, 
.常量 SO_RCVBUF, "4098", 公开, 
.常量 SO_RCVLOWAT, "4100", 公开, 
.常量 SO_RCVTIMEO, "4102", 公开, 
.常量 SO_REGISTER_NAME, "40960", 公开, 
.常量 SO_REMOVE_NAME, "40961", 公开, 
.常量 SO_REUSEADDR, "4", 公开, 
.常量 SO_SNDBUF, "4097", 公开, 
.常量 SO_SNDLOWAT, "4099", 公开, 
.常量 SO_SNDTIMEO, "4101", 公开, 
.常量 SO_SYNCHRONOUS_ALERT, "16", 公开, 
.常量 SO_SYNCHRONOUS_NONALERT, "32", 公开, 
.常量 SO_TYPE, "4104", 公开, 
.常量 SO_USELOOPBACK, "64", 公开, 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 空闲, , LingerType
    .成员 开关选项, 短整数型, , , l_onoff
    .成员 空闲时间, 短整数型, , , l_linger

数据类型 套接字地址, , sockaddr
    .成员 常量, 短整数型, , , sin_family
    .成员 端口, 短整数型, , , sin_port
    .成员 地址, 整数型, , , sin_addr
    .成员 地址范围, 字节型, , "8", sin_zero

数据类型 进程信息2, , 
    .成员 类型大小, 整数型, , , 296
    .成员 引用次数, 整数型, , , 
    .成员 进程标识, 整数型, , , 
    .成员 默认堆标识, 整数型, , , 只能被此类API使用
    .成员 模块标识, 整数型, , , 同上
    .成员 线程数, 整数型, , , 
    .成员 父进程标识, 整数型, , , 
    .成员 基类优先级, 整数型, , , 由该进程创建的线程的基优先级
    .成员 标识, 整数型, , , 系统保留保留，不用
    .成员 执行文件名, 字节型, , "256", 如果写成文本型,此处将会被放置一个指针,很显然会出错.

数据类型 模块信息, , 
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 hmodule, 整数型, , , 
    .成员 szname, 字节型, , "256", 
    .成员 szpath, 字节型, , "256", 

数据类型 POINTAPI, , 点结构
    .成员 横向位置, 整数型, , , 
    .成员 纵向位置, 整数型, , , 

数据类型 MSG, , 
    .成员 message, 整数型, , , 
    .成员 paramL, 整数型, , , 
    .成员 paramH, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 匿名成员15339, 空白型, , , 
    .成员 wParam, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 pt, POINTAPI, , , 

数据类型 fd_set, , 
    .成员 fd_count, 整数型, , , 
    .成员 fd_array, 整数型, , , 

数据类型 进程返回数据, , 
    .成员 hProcess, 空白型, , , 进程句柄
    .成员 hThread, 空白型, , , 进程的主线程句柄  
    .成员 dwProcessId, 空白型, , , 进程ID
    .成员 dwThreadId, 空白型, , , 进程的主线程ID

数据类型 启动信息数据, , 
    .成员 cb, 空白型, , , a结构长度
    .成员 lpReserved, 文本型, , , 保留
    .成员 lpDesktop, 空白型, , , 保留
    .成员 lpTitle, 文本型, , , 如果为控制台进程则为显示的标题
    .成员 dwX, 空白型, , , 窗口位置
    .成员 dwY, 空白型, , , 窗口位置
    .成员 dwXSize, 空白型, , , 窗口大小
    .成员 dwYSize, 空白型, , , 窗口大小
    .成员 dwXCountChars, 空白型, , , 控制台窗口字符号宽度
    .成员 dwYCountChars, 空白型, , , 控制台窗口字符号高度
    .成员 dwFillAttribute, 空白型, , , 控制台窗口填充模式
    .成员 dwFlags, 空白型, , , 创建标记
    .成员 wShowWindow, 空白型, , , 窗口显示标记如同ShowWindow中的标记
    .成员 cbReserved2, 空白型, , , 
    .成员 lpReserved2, 空白型, , , 
    .成员 hStdInput, 空白型, , , 错误输出句柄//气我
    .成员 hStdOutput, 空白型, , , 标准输入句柄
    .成员 hStdError, 空白型, , , 标准输出句柄

数据类型 安全性结构, , SECURITY_ATTRIBUTES
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 逻辑型, , , 
    .成员 bInheritHandle, 逻辑型, , , 

数据类型 枚举服务状态_, , ENUM_SERVICE_STATUS
    .成员 服务名称, 整数型, , , lpServiceName
    .成员 显示名称, 整数型, , , lpDisplayName
    .成员 服务类型, 整数型, , , dwServiceType
    .成员 当前状态, 整数型, , , dwCurrentState
    .成员 允许控制, 整数型, , , dwControlsAccepted
    .成员 退出代码, 整数型, , , dwWin32ExitCode
    .成员 服务特别退出代码, 整数型, , , dwServiceSpecificExitCode
    .成员 检查点, 整数型, , , dwCheckPoint
    .成员 提示等待, 整数型, , , dwWaitHint

数据类型 WSADataType, , 
    .成员 wVersion, 短整数型, , , Windows Sockets 版本信息。
    .成员 wHighVersion, 短整数型, , , 通过加载库文件得到的最高的支持Winsock 的版本，它通常和wVersion值相同。
    .成员 szDescription, 文本型, , "257", 长度257，Windows Sockets 执行时的详细描述
    .成员 szSystemStatus, 文本型, , "129", 长度129，包含了相关的状态和配置的信息
    .成员 iMaxSockets, 短整数型, , , 表示同时打开的socket最大数，为0表示没有限制。
    .成员 iMaxUdpDg, 短整数型, , , 表示同时打开的数据报最大数，为0表示没有限制。
    .成员 lpVendorInfo, 整数型, , , 厂商指定信息预留

数据类型 打洞连接类型, , 
    .成员 句柄, 空白型, , , 
    .成员 地址, 文本型, , , 
    .成员 标识, 空白型, , , 
    .成员 打洞次数, 空白型, , , 

数据类型 客户的连接数据类型, , 
    .成员 IP, 文本型, , , 
    .成员 端口, 空白型, , , 
    .成员 被连接的句柄, 空白型, , , 
    .成员 套接字, 空白型, , , 

.全局变量 StartupData, WSADataType, , , 
.全局变量 匿名全局变量_15930, 空白型, , , 
.全局变量 本打洞标示, 整数型, , , 
.全局变量 匿名全局变量_15934, 空白型, , , 
.全局变量 已连接的, 打洞连接类型, , "0", 
.全局变量 未连接的, 打洞连接类型, , "0", 
.全局变量 匿名全局变量_16062, 空白型, , , 

.DLL命令 EnumWindows, 整数型, "user32.dll", "EnumWindows", , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）　非零表示成功，零表示失败
    .参数 函数指针, 子程序指针, , 指向为每个子窗口都调用的一个函数的指针。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的;  

.DLL命令 GetWindowThreadProcessId, 整数型, "user32", "GetWindowThreadProcessId", ,  ;    获取与指定窗口关联在一起的一个进程和线程标识符　拥有窗口的线程的标识符
    .参数 hwnd, 整数型, , 指定一个变量，用于装载拥有那个窗口的一个进程的标识符
    .参数 lpdwProcessId, 整数型, 传址, 指定窗口句柄;

.DLL命令 IsWindowVisible, 整数型, "user32", "IsWindowVisible", , 判断窗口是否可见　如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄;  

.DLL命令 GetClassName, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 缓冲区, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 缓冲区长度, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;  

.DLL命令 创建帮助快照, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 标识, 整数型, , 
    .参数 进程标识, 整数型, , 指定进程标识. 此参数用于指出当前进程，可为零. 当TH32CS_SNAPHEAPLIST或TH32CS_SNAPMODULE的值被指定时使用此参数. 否则，给予忽略。

.DLL命令 首进程信息, 整数型, "", "Process32First", , 
    .参数 快照句柄, 整数型, , 
    .参数 进程信息, 进程信息2, , 

.DLL命令 关闭内核对象, 空白型, "", "CloseHandle", , 
    .参数 欲关闭对象句柄, 整数型, , 

.DLL命令 打开进程, 整数型, "", "OpenProcess", , 从一个进程的标识（ID）返回一个可用于指定操作的句柄，要用“关闭对句柄”
    .参数 访问方式, 整数型, , 参看常量 “进程_”
    .参数 是否继承, 逻辑型, , 
    .参数 进程标识, 整数型, , ID

.DLL命令 关闭句柄, 逻辑型, "kernel32", "CloseHandle", , 
    .参数 对象句柄, 整数型, , 

.DLL命令 获取模块文件名, 整数型, "psapi.dll", "GetModuleFileNameExA", , 
    .参数 进程句柄, 整数型, , 
    .参数 模块句柄, 整数型, , 
    .参数 文件名称, 文本型, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 获取WIN目录, 整数型, "kernel32.dll", "GetWindowsDirectoryA", , 
    .参数 缓冲区, 文本型, 传址, 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 后进程信息, 整数型, "", "Process32Next", , 
    .参数 快照句柄, 整数型, , 
    .参数 进程信息, 进程信息2, , 

.DLL命令 socket, 整数型, "ws2_32.dll", "socket", , 创建套接字
    .参数 af, 整数型, , 使用的通信协议的协议族
    .参数 type, 整数型, , 流套接字类型
    .参数 protocol, 整数型, , 使用的通信协议

.DLL命令 closesocket, 整数型, "ws2_32.dll", "closesocket", , 销毁套接字
    .参数 s, 整数型, , 套接字描述符

.DLL命令 select, 整数型, "ws2_32.dll", "select", , 检查套接字状态
    .参数 nfds, 整数型, , 
    .参数 readfds, fd_set, 传址, 读
    .参数 writefds, fd_set, 传址, 写
    .参数 exceptfds, fd_set, 传址, 错误
    .参数 timeout, 整数型, 传址, 超时

.DLL命令 Connect, 整数型, "ws2_32.dll", "connect", , 连接到服务器(TCP)
    .参数 s, 整数型, , 套接字描述符
    .参数 addr, 套接字地址, 传址, 地址信息
    .参数 namelen, 整数型, , 地址信息长度

.DLL命令 Send, 整数型, "ws2_32.dll", "send", , 发送数据(TCP，当这次发送数据未发送完时返回剩余字节数)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 字节集, 传址, 欲发送的数据
    .参数 buflen, 整数型, , 欲发送数据长度
    .参数 flags, 整数型, , 0

.DLL命令 recv, 整数型, "ws2_32.dll", "recv", , 接收数据(TCP，当数据这次未接收完时返回剩余字节数)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 字节集, 传址, 数据(提供变量)
    .参数 buflen, 整数型, , 数据长度
    .参数 flags, 整数型, , 0

.DLL命令 bind, 整数型, "ws2_32.dll", "bind", , 绑定一个地址和端口
    .参数 s, 整数型, , 套接字描述符
    .参数 name, 套接字地址, 传址, 地址信息
    .参数 namelen, 整数型, , 地址信息长度(长度16)

.DLL命令 WSAStartup, 整数型, "ws2_32.dll", "WSAStartup", , 初始化WnSocket服务
    .参数 wVR, 整数型, , socket版本
    .参数 lpWSAD, WSADataType, 传址, 服务信息

.DLL命令 WSACleanup, 整数型, "ws2_32.dll", "WSACleanup", , 卸载Winsocket服务

.DLL命令 htons, 整数型, "ws2_32.dll", "htons", , 转换为network 排列方式的数目
    .参数 hostshort, 整数型, , 端口号

.DLL命令 整数转换点数, 整数型, "ws2_32.dll", "inet_ntoa", , 将整数格式IP地址转换为点数格式（返回值是内存地址指针）
    .参数 inn, 整数型, , 欲转换整数格式IP地址

.DLL命令 inet_addr, 整数型, "ws2_32.dll", "inet_addr", , 点数格式转换为整数格式IP地址
    .参数 cp, 文本型, , 欲被转换的IP地址

.DLL命令 listen, 整数型, "ws2_32.dll", "listen", , 
    .参数 s, 整数型, , 套接字描述符
    .参数 backlog, 整数型, , 最多容纳客户请求数

.DLL命令 获取远端信息, 整数型, "ws2_32.dll", "getpeername", , 获取远端信息（已连接对方IP和端口）。成功返回0
    .参数 s, 整数型, , 句柄
    .参数 name, 套接字地址, 传址, 地址信息
    .参数 namelen, 整数型, 传址, name长度,Sockaddr_in长度为16

.DLL命令 accept, 整数型, "ws2_32.dll", "accept", , 等待用户进入并接受连接
    .参数 s, 整数型, , 套接字描述符
    .参数 addr, 套接字地址, 传址, 地址信息
    .参数 addrlen, 整数型, 传址, 地址信息长度（长度为16）

.DLL命令 转换为端口号, 整数型, "ws2_32.dll", "ntohs", , 转换为端口号 ntohs
    .参数 十六位网络端口, 整数型, , 欲转换值

.DLL命令 sendto, 整数型, "ws2_32.dll", "sendto", , 发送数据(UDP)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 文本型, 传址, 数据
    .参数 len, 整数型, , 数据长度
    .参数 flags, 整数型, , 0
    .参数 to, 套接字地址, 传址, 目标地址信息
    .参数 tolen, 整数型, , 地址信息长度

.DLL命令 recvfrom, 整数型, "ws2_32.dll", "recvfrom", , 接收数据(UDP)
    .参数 s, 整数型, , 套接字描述符
    .参数 buf, 文本型, 传址, 数据(提供变量)
    .参数 len, 整数型, , 数据长度
    .参数 flags, 整数型, , 0
    .参数 from, 套接字地址, 传址, 来源地址信息(提供变量)
    .参数 fromlen, 整数型, 传址, 地址信息长度(提供变量)

.DLL命令 创建进程_, 逻辑型, "kernel32", "CreateProcessA", , 
    .参数 lpApplicationName, 整数型, , 执行程序文件名
    .参数 lpCommandLinew, 文本型, , 参数行
    .参数 lpProcessAttributes, 整数型, , 进程安全参数
    .参数 lpThreadAttributes, 整数型, , 线程安全参数
    .参数 bInheritHandles, 逻辑型, , 继承标记
    .参数 dwCreationFlags, 整数型, , 创建标记
    .参数 lpEnvironment, 整数型, , 环境变量
    .参数 lpCurrentDirectory, 整数型, , 运行该子进程的初始目录
    .参数 lpStartupInfo, 启动信息数据, , 创建该子进程的相关参数
    .参数 lpProcessInformation, 进程返回数据, , 创建后用于被创建子进程的信息  

.DLL命令 创建匿名管道, 整数型, "", "CreatePipe", , 
    .参数 读入端口, 整数型, 传址, 
    .参数 写入端口, 整数型, 传址, 
    .参数 管道属性, 安全性结构, 传址, 
    .参数 管道大小, 整数型, , 

.DLL命令 write, 空白型, "kernel32.dll", "WriteFile", , 
    .参数 hFile, 空白型, , 一个文件的句柄
    .参数 lpBuffer, 字节集, 传址, 要写入的一个数据缓冲区
    .参数 nNumberOfBytesToWrite, 空白型, , 要写入数据的字节数量。如写入零字节，表示什么都不写入，但会更新文件的“上一次修改时间”。针对位于远程系统的命名管道，限制在65535个字节以内
    .参数 lpNumberOfBytesWritten, 空白型, 传址, 实际写入文件的字节数量
    .参数 lpOverlapped, 空白型, , 倘若在指定FILE_FLAG_OVERLAPPED的前提下打开文件，这个参数就必须引用一个特殊的结构。那个结构定义了一次异步写操作。否则，该参数应置为空（将声明变为ByVal As Long，并传递零值）

.DLL命令 获取启动信息, 整数型, "kernel32", "GetStartupInfoA", , 
    .参数 启动信息, 启动信息数据, 传址, 

.DLL命令 read, 整数型, "kernel32", "ReadFile", , 
    .参数 文件句柄, 整数型, , 
    .参数 数据缓冲区, 字节集, 传址, 通用
    .参数 字符数, 整数型, , 
    .参数 实际读入字符数, 整数型, 传址, 
    .参数 异步过程, 整数型, , 

.DLL命令 GetLogicalDriveStringsA, 整数型, "kernel32", "GetLogicalDriveStringsA", , $(b)
    .参数 缓冲器长度, 整数型, , 
    .参数 缓冲区, 字节集, , 

.DLL命令 创建线程_, 整数型, "", "CreateThread", 公开, 句柄
    .参数 安全, 整数型, , 
    .参数 栈大小, 整数型, , 
    .参数 子程序, 子程序指针, , 
    .参数 参数, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 线程ID, 整数型, 传址, 

.DLL命令 结束一个进程, 逻辑型, "kernel32", "TerminateProcess", 公开, 句柄
    .参数 hProcess, 整数型, , 
    .参数 uExitCode, 整数型, , 

.DLL命令 创建快照, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 falg, 整数型, , 
    .参数 id, 整数型, , 

.DLL命令 打开SC管理服务_, 整数型, "advapi32.dll", "OpenSCManagerA", , 
    .参数 机器名称, 文本型, , lpMachineName
    .参数 数据库名, 整数型, , lpDatabaseName
    .参数 数据库, 整数型, , dwDesiredAccess

.DLL命令 枚举SC管理器服务列表_, 整数型, "advapi32.dll", "EnumServicesStatusA", , 
    .参数 SC管理者句柄, 整数型, , hSCManager
    .参数 服务类型, 整数型, , dwServiceType
    .参数 服务状态, 整数型, , dwServiceState
    .参数 服务, 整数型, , any，lpServices
    .参数 缓冲区大小, 整数型, , cbBufSize
    .参数 需求字节数, 整数型, 传址, pcbBytesNeeded
    .参数 返回服务名, 整数型, 传址, lpServicesReturned
    .参数 返回句柄, 整数型, , lpResumeHandle

.DLL命令 枚举SC管理器服务列表1_, 整数型, "advapi32.dll", "EnumServicesStatusA", , 
    .参数 SC管理者句柄, 整数型, , hSCManager
    .参数 服务类型, 整数型, , dwServiceType
    .参数 服务状态, 整数型, , dwServiceState
    .参数 服务, 字节集, 传址, lpServices,any
    .参数 缓冲区大小, 整数型, , cbBufSize
    .参数 需求字节数, 整数型, 传址, pcbBytesNeeded
    .参数 返回服务名, 整数型, 传址, lpServicesReturned
    .参数 返回句柄, 整数型, 传址, lpResumeHandle

.DLL命令 关闭SC服务管理句柄_, 整数型, "advapi32.dll", "CloseServiceHandle", , 
    .参数 SC对象句柄, 整数型, , 

.DLL命令 复制字符串_, 整数型, "kernel32.dll", "lstrcpyA", , lstrcpyA
    .参数 文本1, 字节型, 传址, RetVal
    .参数 文本2, 整数型, , Ptr

.DLL命令 取文本内容长度_, 整数型, "kernel32.dll", "lstrlenA", , lstrlenA
    .参数 文本, 整数型, , Ptr

.DLL命令 取字节长度_, 整数型, "kernel32.dll", "lstrlenW", , 
    .参数 待取参数, 整数型, , any

.DLL命令 双字节到宽字符_, 整数型, "SHLWAPI", "#217", , SHUnicodeToAnsi
    .参数 双字节文本, 字节集, 传址, lpMultiBVytestyr
    .参数 宽字符文本, 文本型, , lpWideCharStr
    .参数 宽字符文本长度, 整数型, , cchWideChar

.DLL命令 GetComputerName, 整数型, "kernel32.dll", "GetComputerNameA", 公开, 取计算机名_TRUE（非零）表示成功，否则返回零。
    .参数 字串缓冲区, 文本型, , lpBuffer，随同计算机名载入的字串缓冲区
    .参数 缓冲区长度, 整数型, 传址, nSize，缓冲区的长度。这个变量随同返回计算机名的实际长度载入

.DLL命令 GetMessage, 整数型, "user32", "GetMessageA", , 从线索消息队列中返回一条消息　
    .参数 lpMsg, MSG, , 
    .参数 hwnd, 整数型, , 
    .参数 wMsgFilterMin, 整数型, , 
    .参数 wMsgFilterMax, 整数型, , 

.DLL命令 TranslateMessage, 整数型, "user32", "TranslateMessage", , 转换虚拟关键字消息　
    .参数 lpMsg, MSG, , 

.DLL命令 DispatchMessage, 整数型, "user32", "DispatchMessageA", , 向窗口发送消息　
    .参数 lpMsg, MSG, , 

.DLL命令 LocalAlloc, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 WSASocket, 整数型, "Ws2_32.dll", "WSASocketA", 公开, 
    .参数 af, 整数型, , 
    .参数 type, 整数型, , 
    .参数 protocol, 整数型, , 
    .参数 lpProtocolInfo, 整数型, , 
    .参数 g, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 setsockopt, 整数型, "ws2_32.dll", "setsockopt", 公开, 
    .参数 s, 整数型, , 
    .参数 level, 整数型, , 
    .参数 optname, 整数型, , #SO_
    .参数 optval, 整数型, , 
    .参数 optlen, 整数型, , 

.DLL命令 getsockopt, 整数型, "ws2_32.dll", "getsockopt", , 
    .参数 s, 整数型, , s：一个标识套接口的描述字。
    .参数 level, 整数型, , level：选项定义的层次。支持的层次仅有SOL_SOCKET和IPPROTO_TCP。
    .参数 optname, 整数型, , optname：需获取的套接口选项。 
    .参数 optval, 整数型, , optval：指针，指向存放所获得选项值的缓冲区。
    .参数 optlen, 整数型, , optlen：指针，指向optval缓冲区的长度值。

.DLL命令 shutdown, 整数型, "ws2_32.dll", "", 公开, 
    .参数 s, 整数型, , 
    .参数 how, 整数型, , 

.DLL命令 设置一个套接字选项, 整数型, "ws2_32.dll", "setsockopt", , setsockopt 设置一个套接字选项
    .参数 网络通讯标识符, 整数型, , s     网络通讯标识符   描述标识一个套接字。  
    .参数 级别, 整数型, , level 级别             在该选项定义（例如水平，SOL_SOCKET）。 
    .参数 操作名称, 整数型, , optname 操作名称         套接字选项的值被设置（例如，SO_BROADCAST）。该optname参数必须是一个套接字选项定义在指定的水平，或行为是不确定的
    .参数 操作结构, 整数型, , optval 操作结构    指针在其中所请求的选项的值是指定的缓冲区
    .参数 操作结构长度, 整数型, , optlen 操作结构长度     大小，指出以字节的缓冲区，由optval参数

.DLL命令 取最后错误, 整数型, "ws2_32.dll", "WSAGetLastError", , WSAGetLastError 取最后错误_

.DLL命令 TransmitFile, 逻辑型, "Mswsock.dll", "", 公开, 
    .参数 hSocket, 整数型, , 
    .参数 hFile, 整数型, , 
    .参数 nNumberOfBytesToWrite, 整数型, , 
    .参数 nNumberOfBytesPerSend, 整数型, , 
    .参数 lpOverlapped, 整数型, , 
    .参数 lpTransmitBuffers, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 API_取指针长度, 整数型, "", "lstrlen", , 
    .参数 lpString, 整数型, , 指向一个字符串的指针

.DLL命令 获取本地接口信息, 整数型, "ws2_32.dll", "getsockname", , getsockname 获取本地接口的地址信息（IP和端口）。成功返回0
    .参数 句柄, 整数型, , s
    .参数 地址信息, 套接字地址, 传址, name
    .参数 长度, 整数型, 传址, namelen  name长度,Sockaddr_in长度为16

.DLL命令 DLL命令1, 空白型, "", "", , 

.窗口程序集 公共程序集, , , 

.子程序 _启动子程序, 整数型, , 
套接字初始化子程序 ()
载入 (窗口, , 真)
返回 (0)

.子程序 套接字初始化子程序, 空白型, , 
.如果 (等于 (WSAStartup (合并整数 (2, 2), StartupData), 0))
    输出调试文本 (“初始化成功”)
.否则
    输出调试文本 (“初始化失败”)
.如果结束


.子程序 _主窗口_将被销毁, 空白型, , 
WSACleanup ()

.子程序 释放句柄, 逻辑型, 公开, 释放
.参数 句柄, 整数型, , 句柄

.局部变量 记次, 整数型, , , 

.如果真 (等于 (closesocket (句柄), #SOCKET_ERROR))
    返回 (假)
.如果真结束

.计次循环首 (窗口.取项目数 (.), 记次)
    .如果真 (等于 (窗口.取项目数值 (., 相减 (记次, 1)), 句柄))
        窗口.删除项目 (., 相减 (记次, 1))
        返回 (真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()


.计次循环首 (窗口.取项目数 (.), 记次)
    .如果真 (等于 (窗口.取项目数值 (., 相减 (记次, 1)), 句柄))
        窗口.删除项目 (., 相减 (记次, 1))
        返回 (真)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()

返回 (真)

.子程序 数据包分解, 字节集, , 
.参数 等分解的数据, 字节集, , 
.参数 命令, 文本型, 参考 可空, 
.参数 包长, 整数型, 参考 可空, 

.局部变量 临时数据, 字节集, , , 

赋值 (临时数据, 取字节集右边 (等分解的数据, 相减 (取字节集长度 (等分解的数据), 14)))
赋值 (包长, 到整数 (取字节集中间 (等分解的数据, 5, 4)))
赋值 (命令, 到文本 (取字节集中间 (等分解的数据, 9, 6)))
返回 (临时数据)

.子程序 取服务器端口, 整数型, 公开, 
.参数 服务句柄, 空白型, , 

.局部变量 本地地址信息, 套接字地址, , , 

赋值 (本地地址信息.常量, 2)
获取本地接口信息 (服务句柄, 本地地址信息, 16)
返回 (转换为端口号 (本地地址信息.地址))

.子程序 取服务器IP, 文本型, , 
.参数 服务句柄, 空白型, , 

.局部变量 地址信息, 套接字地址, , , 

赋值 (地址信息.常量, 2)
获取本地接口信息 (服务句柄, 地址信息, 16)
返回 (指针到文本 (整数转换点数 (地址信息.地址)))

.子程序 取客户端口, 整数型, 公开, 取客户端口,成功返回客户端口，失败返回-1。
.参数 客户端句柄, 整数型, , 通过“监听（）”得到的客户端句柄。

.局部变量 长度, 整数型, , , 
.局部变量 对方地址信息, 套接字地址, , , 

赋值 (对方地址信息.常量, 2)
获取远端信息 (客户端句柄, 对方地址信息, 16)
返回 (转换为端口号 (对方地址信息.端口))

.子程序 取客户IP, 文本型, 公开, 取客户端IP,成功返回客户端IP，失败返回空字符串。
.参数 客户端句柄, 整数型, , 通过“监听（）”得到的客户端句柄。

.局部变量 对方地址信息, 套接字地址, , , 

赋值 (对方地址信息.常量, 2)
获取远端信息 (客户端句柄, 对方地址信息, 16)
返回 (指针到文本 (整数转换点数 (对方地址信息.地址)))

.子程序 套接字发送字节集, 逻辑型, , 
.参数 句柄, 空白型, , 
.参数 命令标识, 文本型, , 
.参数 命令内容, 字节集, , 

.局部变量 包长, 整数型, , , 
.局部变量 将要发送的数据, 字节集, , , 
.局部变量 剩余发送字节数, 整数型, , , 

赋值 (包长, 相加 (取字节集长度 (命令内容), 14))
赋值 (将要发送的数据, 相加 (到字节集 (#数据包头), 到字节集 (包长), 到字节集 (命令标识), 命令内容))
赋值 (剩余发送字节数, Send (句柄, 将要发送的数据, 取字节集长度 (将要发送的数据), 0))
返回 (真)

.子程序 创建套接字, 整数型, , 
.局部变量 重用, 空白型, , , 
.局部变量 套接字, 空白型, , , 

赋值 (套接字, socket (#PF_INET, #SOCK_STREAM, #IPPROTO_TCP))
.如果真 (等于 (套接字, -1))
    窗口.加入文本 (., 相加 (“创建套接字失败”, #换行符))
    返回 (0)
.如果真结束
赋值 (重用, 1)
.如果真 (不等于 (设置一个套接字选项 (套接字, #SOL_SOCKET, #SO_REUSEADDR, 取变量地址 (重用), 4), 0))
    窗口.加入文本 (., 相加 (“套接字重用失败”, #换行符))
    返回 (0)
.如果真结束
返回 (套接字)

.子程序 检查连接状态, 整数型, 公开, 命令出错返回-1，连接已断开返回0，连接正常返回1。
.参数 客户端句柄, 整数型, , 通过“监听（）”得到的客户端句柄。

.局部变量 返回值, 整数型, , , 
.局部变量 udtRead_fds, fd_set, , , 被检查读错误的套接字
.局部变量 udtWrite_fds, fd_set, , , 被检查写错误的套接字
.局部变量 udtError_fds, fd_set, , , 被检查意外错误的套接字(如网线断开等)
.局部变量 lngSocketCount, 整数型, , , 被检查的索引

赋值 (udtRead_fds.fd_array, 客户端句柄)
赋值 (udtWrite_fds.fd_array, 客户端句柄)
赋值 (udtError_fds.fd_array, 客户端句柄)
赋值 (udtRead_fds.fd_count, 1)
赋值 (udtWrite_fds.fd_count, 1)
赋值 (udtError_fds.fd_count, 1)
赋值 (返回值, select (0, udtRead_fds, udtWrite_fds, udtError_fds, 0))
.如果真 (等于 (返回值, #SOCKET_ERROR))
    输出调试文本 (“服务器类检查连接状态时出错”)
    返回 (-1)
.如果真结束
 ' .如果真 (大于 (返回值, 0))
     ' .如果真 (大于 (udtWrite_fds.fd_count, 0))
         ' 输出调试文本 (“写出错”)
    .如果真结束
     ' .如果真 (大于 (udtRead_fds.fd_count, 0))
         ' 输出调试文本 (udtRead_fds.fd_count)
         ' 输出调试文本 (“读出错”)
         ' 返回 (0)
    .如果真结束
     ' .如果真 (大于 (udtError_fds.fd_count, 0))
         ' 输出调试文本 (“出错”)
    .如果真结束
    
.如果真结束
返回 (1)

.窗口程序集 窗口程序集, , , 

.子程序 _按钮1_被单击, 空白型, , 
.如果 (套接字发送字节集 (到整数 (.内容), #聊天信息, 到字节集 (.内容)))
     ' 状态编辑框.加入文本 (“发送成功” ＋ #换行符)
.否则
    相加 (“发送失败”, #换行符).加入文本 ()
.如果结束


.子程序 _按钮3_被单击, 空白型, , 
.如果 (连接 (.内容, 到整数 (.内容), 到整数 (.内容)))
    赋值 (.内容, .内容)
    窗口.加入文本 (., 相加 (“连接: ”, .内容, “:”, .内容, “ 成功”, #换行符))
.否则
    窗口.加入文本 (., 相加 (“连接: ”, .内容, “:”, .内容, “ 失败”, #换行符))
.如果结束


.子程序 _按钮4_被单击, 空白型, , 
.如果 (服务端监听 (到整数 (.内容)))
    窗口.加入文本 (., 相加 (“监听成功 端口: ”, .内容, #换行符))
.否则
    窗口.加入文本 (., 相加 (“监听失败 端口: ”, .内容, #换行符))
.如果结束


.子程序 _按钮5_被单击, 空白型, , 
相加 (“套接字”, .内容, “的端口 = ”, 到文本 (取客户端口 (到整数 (.内容))), #换行符).加入文本 ()

.子程序 _按钮6_被单击, 空白型, , 
释放句柄 (到整数 (.内容))

.程序集 服务端程序集, , , 

.子程序 服务端监听, 逻辑型, , 
.参数 端口, 空白型, , 

.局部变量 套接字, 空白型, , , 
.局部变量 变量, 整数型, , , 
.局部变量 地址信息, 套接字地址, , , 
.局部变量 整数IP地址, 整数型, , , 
.局部变量 返回值, 整数型, , , 
.局部变量 线程ID, 整数型, , , 

赋值 (套接字, 创建套接字 ())
.如果真 (小于 (套接字, 1)) ' 窗口.状态编辑框.加入文本 (“创建套接字失败” ＋ #换行符)
    释放句柄 (套接字)
    返回 (假)
.如果真结束
赋值 (地址信息.端口, htons (端口)) ' 开始绑定端口：
赋值 (地址信息.常量, #PF_INET)
赋值 (整数IP地址, inet_addr (“0.0.0.0”))
.如果真 (等于 (整数IP地址, -1))
    窗口.加入文本 (., 相加 (“整数IP地址出错”, #换行符))
    释放句柄 (套接字)
    返回 (假)
.如果真结束
.如果真 (等于 (整数IP地址, -1))
    释放句柄 (套接字)
    返回 (假)
.如果真结束
赋值 (地址信息.地址, 整数IP地址)
赋值 (变量, bind (套接字, 地址信息, 16))
.如果 (不等于 (变量, -1))
     ' 窗口1.状态编辑框.加入文本 (“绑定端口成功” ＋ #换行符)
.否则
    窗口.加入文本 (., 相加 (“绑定失败”, #换行符))
    释放句柄 (套接字)
    返回 (假)
.如果结束
 ' 开始监听端口
赋值 (返回值, listen (套接字, 1)) ' 一次进入一个客户端
.如果 (不等于 (返回值, -1))
     ' 窗口1.状态编辑框.加入文本 (“监听成功: ” ＋ 到文本 (端口) ＋ #换行符)
.否则
    窗口.加入文本 (., 相加 (“监听失败: ”, 到文本 (端口), #换行符))
    释放句柄 (套接字)
    返回 (假)
.如果结束
 ' 创建客户进入线程，开始准许客户端进入
创建线程_ (0, 0, &服务_等待客户进入, 套接字, 0, 线程ID)
窗口.加入项目 (., 相加 (到文本 (套接字), “  听 ”, 到文本 (端口)), 套接字) ' A服务端 B客户端
赋值 (窗口..内容, 到文本 (套接字))
返回 (真)

.子程序 服务_等待客户进入, 空白型, , '客入进入也在这里了
.参数 套接字, 整数型, , 

.局部变量 地址信息, 套接字地址, , , 
.局部变量 得的客户Socket句柄, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 IP地址, 文本型, , , 
.局部变量 返回值, 整数型, , , 

.如果真 (等于 (检查连接状态 (套接字), -1))
    返回 ()
.如果真结束
赋值 (得的客户Socket句柄, accept (套接字, 地址信息, 16))
.如果真 (大于 (得的客户Socket句柄, 0))
    赋值 (返回值, 获取远端信息 (得的客户Socket句柄, 地址信息, 16))
    .如果真 (不等于 (返回值, 0))
        窗口.加入文本 (., “出错”)
        服务_等待客户进入 (套接字)
        返回 ()
    .如果真结束
    赋值 (IP地址, 指针到文本 (整数转换点数 (地址信息.地址)))
    窗口.加入文本 (., 相加 (“客户上线。”, IP地址, “:”, 到文本 (转换为端口号 (地址信息.端口)), “ 句柄:”, 到文本 (得的客户Socket句柄), #换行符))
    窗口.加入项目 (., 相加 (到文本 (套接字), “  ”, IP地址, “:”, 到文本 (转换为端口号 (地址信息.端口)), “  ”, 到文本 (得的客户Socket句柄)), 得的客户Socket句柄) ' 套接字 客户地址 客户句柄
    套接字发送字节集 (得的客户Socket句柄, #聊天信息, 到字节集 (相加 (“你已上线,地址 = ”, IP地址, “:”, 到文本 (转换为端口号 (地址信息.端口)))))
    创建线程_ (0, 0, &服务_等待数据到达, 得的客户Socket句柄, 0, 线程ID) ' 把句柄传递给线程 那么 这个线程取回的数据始终是这个客户的
.如果真结束
.如果真 (小于 (得的客户Socket句柄, 0))
    
.如果真结束
服务_等待客户进入 (套接字)

.子程序 服务_等待数据到达, 空白型, , 
.参数 当前客户socket句柄, 空白型, , 

.局部变量 接收字节数, 整数型, , , 
.局部变量 线程ID, 整数型, , , 
.局部变量 临时变量, 字节集, , , 
.局部变量 包长, 整数型, , , 
.局部变量 命令, 文本型, , , 
.局部变量 实际收到数据, 字节集, , , 
.局部变量 记次, 空白型, , , 

赋值 (临时变量, 取空白字节集 (10240))
赋值 (接收字节数, recv (当前客户socket句柄, 临时变量, 10240, 0))
.判断开始 (大于 (接收字节数, 0)) ' 有数据进入
    赋值 (实际收到数据, 数据包分解 (临时变量, 命令, 包长))
    赋值 (临时变量, 取字节集左边 (临时变量, 接收字节数)) ' 如果不加这句  收到的数据长度始终为 20480
    服务_数据处理 (临时变量, 当前客户socket句柄)
    服务_等待数据到达 (当前客户socket句柄)
.判断 (小于或等于 (接收字节数, 0)) ' -1 主动断开    0 主动断开
    窗口.加入文本 (., 相加 (“客户”, 到文本 (当前客户socket句柄), “已经断开了。”, #换行符))
    释放句柄 (当前客户socket句柄)
    .计次循环首 (窗口.取项目数 (.), 记次)
        .如果真 (等于 (窗口.取项目数值 (., 相减 (记次, 1)), 当前客户socket句柄))
            窗口.删除项目 (., 相减 (记次, 1))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    
.默认
    
.判断结束


.子程序 服务_数据处理, 空白型, , 
.参数 到达的数据, 字节集, , 
.参数 客户句柄, 整数型, , 

.局部变量 封包头, 文本型, , , 
.局部变量 命令, 文本型, , , 
.局部变量 包长, 整数型, , , 
.局部变量 实际数据, 字节集, , , 

赋值 (窗口..内容, 到文本 (客户句柄))
赋值 (封包头, 到文本 (取字节集左边 (到达的数据, 4)))
.如果真 (不等于 (封包头, #数据包头))
    窗口.加入文本 (., 相加 (“服务,收到:错误包头:”, 到文本 (到达的数据), #换行符))
    输出调试文本 (“非法请求”)
    返回 ()
.如果真结束

赋值 (实际数据, 数据包分解 (到达的数据, 命令, 包长))
.判断开始 (等于 (命令, #聊天信息)) ' 聊天信息标识
    窗口.加入文本 (., 相加 (“聊天信息 - 服务: ”, 到文本 (客户句柄), #换行符))
    窗口.加入文本 (., 相加 (到文本 (实际数据), #换行符))
.默认
    
.判断结束


.程序集 客户端程序集, , , 

.子程序 连接, 逻辑型, , 1成功,2失败 3套接字销毁被释放
.参数 主机IP, 文本型, , 
.参数 连接端口, 整数型, , 
.参数 本地端口, 整数型, , 

.局部变量 套接字, 整数型, , , 
.局部变量 地址信息, 套接字地址, , , 
.局部变量 变量, 整数型, , , 

赋值 (套接字, 创建套接字 ())
.如果真 (等于 (套接字, 0)) ' 窗口.状态编辑框.加入文本 (“创建套接字失败” ＋ #换行符)
    释放句柄 (套接字)
    返回 (假)
.如果真结束

赋值 (地址信息.端口, htons (本地端口)) ' 绑定端口：
赋值 (地址信息.常量, #PF_INET)
赋值 (地址信息.地址, inet_addr (“0.0.0.0”))
赋值 (变量, bind (套接字, 地址信息, 16))
.如果真 (等于 (变量, -1))
     ' 窗口.状态编辑框.加入文本 (“客户端绑定本地端口失败,套接字被销毁” ＋ #换行符)
    释放句柄 (套接字)
    返回 (假)
.如果真结束

赋值 (地址信息.端口, htons (连接端口))
赋值 (地址信息.常量, #PF_INET)
赋值 (变量, inet_addr (主机IP))
.如果真 (等于 (变量, -1))
    窗口.加入文本 (., 相加 (“客户端连接整数IP地址出错”, #换行符))
    释放句柄 (套接字)
    返回 (假)
.如果真结束
赋值 (地址信息.地址, 变量)
.如果真 (等于 (Connect (套接字, 地址信息, 16), -1))
    释放句柄 (套接字)
    返回 (假)
.如果真结束
创建线程_ (0, 0, &客户_等待数据到达, 套接字, 0, 0)
窗口.加入项目 (., 相加 (到文本 (套接字), “  本 ”, 到文本 (本地端口), “ 远 ”, 到文本 (主机IP), “:”, 到文本 (连接端口)), 套接字) ' A服务端 B客户端
赋值 (窗口..内容, 到文本 (套接字))
返回 (真)

.子程序 客户_等待数据到达, 空白型, , 
.参数 套接字, 空白型, , 

.局部变量 临时变量, 字节集, , , 
.局部变量 接收字节数, 整数型, , , 

赋值 (临时变量, 取空白字节集 (20480))
赋值 (接收字节数, recv (套接字, 临时变量, 20480, 0))
.判断开始 (大于 (接收字节数, 0)) ' 有数据进入
    客户_数据处理 (临时变量, 套接字)
    客户_等待数据到达 (套接字)
.判断 (小于或等于 (接收字节数, 0)) ' -1 主动断开    0 主动断开
    窗口.加入文本 (., 相加 (“服务器”, 到文本 (套接字), “已经断开了。”, #换行符))
.默认
    
.判断结束


.子程序 客户_数据处理, 空白型, , 
.参数 到达的数据, 字节集, , 
.参数 套接字, 空白型, , 

.局部变量 实际数据, 字节集, , , 
.局部变量 封包头, 文本型, , , 
.局部变量 命令, 文本型, , , 
.局部变量 包长, 整数型, , , 

赋值 (窗口..内容, 到文本 (套接字))
赋值 (封包头, 到文本 (取字节集左边 (到达的数据, 4)))
.如果真 (不等于 (封包头, #数据包头))
    窗口.加入文本 (., 相加 (“客户,收到:错误包头:”, 到文本 (到达的数据), #换行符))
    输出调试文本 (“非法请求”)
    返回 ()
.如果真结束

赋值 (实际数据, 数据包分解 (到达的数据, 命令, 包长))
.判断开始 (等于 (命令, #聊天信息)) ' 聊天信息标识
    窗口.加入文本 (., 相加 (“聊天信息 - 客户: ”, 到文本 (套接字), #换行符))
    窗口.加入文本 (., 相加 (到文本 (实际数据), #换行符))
.默认
    
.判断结束


.子程序 服务端断开处理, 空白型, , 



 ' 不属于任何一个程序集、类模块的函数：
