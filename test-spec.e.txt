 ' 文件类型：Linux控制台程序

 ' 程序名称：特殊功能支持库测试程序
 ' 程序描述：本测试程序测试到了特殊功能支持库中的所有基本功能点。
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 2 1 特殊功能支持库





.程序集 程序集1, , , 

.程序集变量 m_int, 整数型, , , 
.程序集变量 m_int2, 整数型, , , 
.程序集变量 m_bin, 字节集, , , 
.程序集变量 m_bin2, 字节集, , , 
.程序集变量 m_p, 整数型, , , 
.程序集变量 m_str, 文本型, , , 
.程序集变量 m_bool, 逻辑型, , , 
.程序集变量 m_b, 字节型, , , 
.程序集变量 m_double, 双精度小数型, , , 
.程序集变量 m_float, 小数型, , , 
.程序集变量 m_i64, 长整数型, , , 
.程序集变量 m_array, 文本型, , "0", 
.子程序 _启动子程序, 整数型, , 本子程序在程序启动后最先执行

测试_调用子程序 ()
测试_取文本 ()
测试_其它 ()
测试_内部测试 ()


返回 (0) ' 可以根据您的需要返回任意数值

.子程序 子程序1, 逻辑型, , 
输出文本行 (“子程序1 被调用 -------------------- ”)
返回 (真)


.子程序 测试_取文本, 空白型, , 
.局部变量 s1, 文本型, , , 
.局部变量 s2, 文本型, , , 
.局部变量 s3, 文本型, , , 
.局部变量 bin, 字节集, , , 
.局部变量 a, 文本型, , "2", 
.局部变量 半角双引号替换符, 文本型, , , 
.局部变量 全角左引号替换符, 文本型, , , 
.局部变量 全角右引号替换符, 文本型, , , 
.局部变量 文本替换符前缀, 文本型, , , 
.局部变量 匿名局部变量_229, 空白型, , , 
.局部变量 文本数组, 文本型, , "0", 
.局部变量 整数数组, 整数型, , "0", 
.局部变量 字节集数组, 字节集, , "2", 
.局部变量 逻辑数组, 逻辑型, , "0", 

开始测试 (“取文本”)

赋值 (s1, 相加 (“<a href=”, #引号, “www.dywt.com.cn”, #引号, “>”, #左引号, “易语言”, #右引号, “</a>诞生于”, 到文本 (2000), “年秋。”))
赋值 (s2, 取文本 (“<a href=`www.dywt.com.cn`>~%s~</a>诞生于%d年秋。”, “易语言”, 2000))
调试输出 (s2)
测试 (“取文本”, 等于 (s1, s2))

赋值 (s1, 相加 (#左引号, “易语言”, #右引号))
赋值 (s2, 取文本 (“~易语言~”, ))
赋值 (s3, 取文本 (“%T”, “易语言”))
测试 (“取文本”, 等于 (s1, s2))
测试 (“取文本”, 等于 (s1, s3))

赋值 (s1, 相加 (#引号, “eyuyan”, #引号))
测试 (“取文本”, 等于 (s1, 取文本 (“`eyuyan`”, )))
测试 (“取文本”, 等于 (s1, 取文本 (“%t”, “eyuyan”)))

赋值 (bin, { 1, 2, 3 })
赋值 (s1, “字节集:3{1,2,3}”)
测试 (“取文本，转换字节集数据到文本”, 等于 (s1, 取文本 (bin, )))

赋值 (a [1], “123”)
赋值 (a [2], “abc”)
 ' 以下三种方式均得到相同的文本，请体会其用法
赋值 (s1, 相加 (“数组:2{”, #左引号, “123”, #右引号, “,”, #左引号, “abc”, #右引号, “}”))
赋值 (s2, 取文本 (“数组:2{~123~,~abc~}”, ))
赋值 (s3, 取文本 (“数组:2{%T,%T}”, “123”, “abc”))
调试输出 (s1, s2, s3)
测试 (“取文本，转换数组数据到文本”, 等于 (s1, 取文本 (a, )))
测试 (“取文本，转换数组数据到文本”, 等于 (s1, s2))
测试 (“取文本，转换数组数据到文本”, 等于 (s1, s3))

赋值 (s1, 相加 (“select * from ”, “表名”, “ ”, #换行符, “ where name=”, #引号, “姓名”, #引号, “ and age>”, 到文本 (18)))
赋值 (s2, 取文本 (“select * from %s %n where name=%t and age>%d”, “表名”, “姓名”, 18)) ' 注意 %n 表示换行符，不使用后面的参数
测试 (“取文本，使用 %n （表示换行符）”, 等于 (s1, s2))
输出文本行 (s2)
赋值 (s1, 相加 (“换行前”, #换行符, #换行符, “换行后”))
赋值 (s2, 取文本 (“换行前%N换行后”, )) ' 注意 %N 表示两个换行符，不使用后面的参数
测试 (“取文本，使用 %N （表示两个换行符）”, 等于 (s1, s2))
输出文本行 (s2)

加入成员 (“a”)
加入成员 (“b”)
加入成员 (123)
赋值 ( [1], { 6, 6, 6 })
赋值 ( [2], { 8, 8 })
加入成员 (真)

赋值 (s1, “a b, 123, 字节集:3{6,6,6} 字节集:2{8,8}, 结束, 886, 真”)
赋值 (s2, 取文本 (“%s %s, %s, %s %s, %s, %s, %s”, 文本数组, 整数数组, 字节集数组, “结束”, 886, 逻辑数组)) ' 对数组成员进行匹配与替换
测试 (“取文本，参数为数组”, 等于 (s1, s2))
赋值 (s1, “ab%s”)
赋值 (s2, 取文本 (“%s%s%s”, 文本数组))
测试 (“取文本，文本替换符多于参数，多余的文本替换符被原样保留”, 等于 (s1, s2))
赋值 (s1, “a”)
赋值 (s2, 取文本 (“%s”, 文本数组, 逻辑数组, 123))
测试 (“取文本，参数多于文本替换符，多余参数被忽略”, 等于 (s1, s2))


 ' 以下测试 取文本_属性读取() 取文本_属性设置()
 ' ---------------------------------------------------------------------------------------------------------------
取文本_属性读取 (全角右引号替换符, 文本替换符前缀) ' 读取原有设置，参数均可省略
取文本_属性读取 (半角双引号替换符, 全角左引号替换符, , )
测试 (“取文本_属性读取”, 等于 (半角双引号替换符, “`”))
测试 (“取文本_属性读取”, 等于 (全角左引号替换符, “~”))
测试 (“取文本_属性读取”, 等于 (全角右引号替换符, “~”))
测试 (“取文本_属性读取”, 等于 (文本替换符前缀, “%”))

取文本_属性设置 (“{”, “}”, ) ' 修改属性设置，参数均可省略
取文本_属性读取 (半角双引号替换符, , , )
测试 (“取文本_属性设置，被省略的参数，保存原值不变”, 等于 (半角双引号替换符, “`”))
取文本_属性设置 (“^”, , , “\”)

取文本_属性读取 (半角双引号替换符, 全角左引号替换符, 全角右引号替换符, 文本替换符前缀)
测试 (“取文本_属性读取”, 等于 (半角双引号替换符, “^”))
测试 (“取文本_属性读取”, 等于 (全角左引号替换符, “{”))
测试 (“取文本_属性读取”, 等于 (全角右引号替换符, “}”))
测试 (“取文本_属性读取”, 等于 (文本替换符前缀, “\”))

 ' ! 以下使用自定义的替换符和前缀
赋值 (s1, 相加 (“select * from ”, “表名”, “ ”, #换行符, “ where name=”, #引号, “姓名”, #引号, “ and age>”, 到文本 (18)))
赋值 (s2, 取文本 (“select * from \s \n where name=\t and age>\d”, “表名”, “姓名”, 18)) ' 注意 %n 表示换行符，不使用后面的参数
测试 (“取文本，使用自定义的替换符和前缀”, 等于 (s1, s2))
赋值 (s1, 相加 (#左引号, “易语言”, #右引号, “的官方网站是”, #换行符, #引号, “www.dywt.com.cn”, #引号, “。”))
赋值 (s2, 取文本 (“{易语言}的官方网站是\n^www.dywt.com.cn^。”, ))
测试 (“取文本，使用自定义的替换符和前缀”, 等于 (s1, s2))
输出文本行 (s2)
 ' ---------------------------------------------------------------------------------------------------------------



结束测试 ()


.子程序 测试_其它, 空白型, , 
开始测试 (“其它”)

赋值 (m_int, 0)
赋值 (m_p, 取变量地址 (m_int))
测试 (“取变量地址”, 不等于 (m_p, 0))
写到内存 (8, m_p, 4) ' 通过直接写内存的方式修改变量内容，下同
测试 (等于 (m_int, 8))

赋值 (m_bin, {  })
赋值 (m_p, 取变量数据地址 (m_bin))
测试 (“取变量数据地址”, 等于 (m_p, 0)) ' 空文本或空字节集的数据地址为0
赋值 (m_bin, { 1, 2, 3 })
赋值 (m_p, 取变量数据地址 (m_bin))
测试 (“取变量数据地址”, 不等于 (m_p, 0))
写到内存 ({ 0, 1 }, m_p, ) ' 千万注意不要写内存越界（可使用“写到内存”的第三个参数予以限制）
测试 (“”, 等于 (m_bin, { 0, 1, 3 }))

赋值 (m_p, 取子程序地址 (&子程序1))
测试 (“取子程序地址”, 不等于 (m_p, 0))

赋值 (m_p, 申请内存 (10000, ))
测试 (“申请内存”, 不等于 (m_p, 0))
赋值 (m_bin, 相加 (到字节集 (“78887878 乱七八糟一堆数据 77 8d78df78888777f”), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }))
写到内存 (m_bin, m_p, 1000)
赋值 (m_bin2, 指针到字节集 (m_p, 取字节集长度 (m_bin)))
测试 (“”, 等于 (m_bin, m_bin2))
释放内存 (m_p)
赋值 (m_p, 0)

赋值 (m_bin, { 1, 2, 3, 4, 5, 6, 7, 8 })
赋值 (m_array, { “aaa”, “bbb”, “ccc” })
调试输出 (123, “易语言, eyuyan”, m_bin, m_array) ' 建议查看一下输出格式

验证 (123)
验证 (假) ' <--- 故意验证失败，调试运行时程序将暂停于此行代码，按F5继续执行。

赋值 (m_str, 取空白文本 (260)) ' 文本长度至少应为MAX_PATH，以确保不会写内存越界
赋值 (m_p, 取变量数据地址 (m_str))
调用易系统功能 (1006, 1, 取变量数据地址 (m_str)) ' 取易语言开发或运行目录。1006：NAS_GET_PATH
调试输出 (相加 (“易语言开发或运行目录：”, m_str))

结束测试 ()



赋值 (m_str, “模拟运行错误提示框，这是错误文本（其实并没有发生错误^_^）”)
 ' 调用易系统功能 (2027, 取变量数据地址 (m_str), )  ' 显示错误提示对话框，并强制结束程序。2027：NRS_RUNTIME_ERR


.子程序 测试_调用子程序, 空白型, , 
开始测试 (“调用子程序”)
测试 (“调用 子程序1”, 调用子程序 (&子程序1, , m_bool, ))
测试 (“子程序1 返回值”, 等于 (m_bool, 真))
测试 (“调用 子程序2”, 调用子程序 (&子程序2, , , 1, 真))
测试 (“调用 子程序3”, 调用子程序 (&子程序3, , m_double, 到字节 (220), “eyuyan”, 到短整数 (32760), 到小数 (100.123), 123456789, 到长整数 (1234567890123), 100.123456, 真, 假, 取现行时间 ()))
测试 (“子程序3 返回值”, 比较浮点数 (m_double, 123.456))
结束测试 ()



.子程序 子程序2, 空白型, , 
.参数 a, 整数型, , 
.参数 b, 逻辑型, , 

输出文本行 (“子程序2 被调用 -------------------- ”)
测试 (等于 (a, 1))
测试 (等于 (b, 真))


.子程序 子程序3, 双精度小数型, , 
.参数 b, 字节型, , 
.参数 text, 文本型, , 
.参数 short, 短整数型, , 
.参数 float, 小数型, , 
.参数 int, 整数型, , 
.参数 int64, 长整数型, , 
.参数 double, 双精度小数型, , 
.参数 bool, 逻辑型, , 
.参数 bool2, 逻辑型, , 
.参数 date, 日期时间型, , 

输出文本行 (“子程序3 被调用 -------------------- ”)
输出文本行 (“以下逐一验证各参数是否都已被正确地传入 ”)
测试 (“参数1”, 等于 (b, 220))
测试 (“参数2”, 等于 (text, “eyuyan”))
测试 (“参数3”, 等于 (short, 32760))
测试 (“参数4”, 比较浮点数 (float, 100.123))
测试 (“参数5”, 等于 (int, 123456789))
测试 (“参数6”, 等于 (int64, 1234567890123))
测试 (“参数7”, 比较浮点数 (double, 100.123456))
测试 (“参数8”, bool)
测试 (“参数9”, 等于 (bool2, 假))
测试 (“参数10”, 小于 (取时间间隔 (date, 取现行时间 (), #秒), 3))
返回 (123.456) ' <--- 此返回值也可以被调用者接收

.子程序 比较浮点数, 逻辑型, , 比较两个浮点数是否相等。注意浮点数是有一定计算误差的。
.参数 a, 双精度小数型, , 
.参数 b, 双精度小数型, , 

返回 (小于 (取绝对值 (相减 (a, b)), 1e-005)) ' 间隔数不能太小


.子程序 测试_内部测试, 空白型, , 
.局部变量 a, 双精度小数型, , , 
.局部变量 b, 双精度小数型, , , 

开始测试 (“内部测试”)

测试 (“比较浮点数”, 比较浮点数 (0.5, 相除 (1, 2)))
测试 (“比较浮点数”, 等于 (比较浮点数 (1.1, 1.2), 假))

结束测试 ()


.程序集 测试框架程序集, , , 

.程序集变量 测试总数, 整数型, , , 内部维护，外界勿修改
.程序集变量 失败次数, 整数型, , , 内部维护，外界勿修改
.程序集变量 本次测试对象, 文本型, , , 内部维护，外界勿修改
.子程序 测试, 空白型, 公开, 检查测试结果是否为真，为真则输出测试成功，否则输出测试失败.
.参数 测试内容, 文本型, 可空, 对本次被测试项的基本描述
.参数 测试结果, 逻辑型, , 

.如果真 (是否为空 (测试内容))
    赋值 (测试内容, “”)
.如果真结束

赋值 (测试总数, 相加 (测试总数, 1))

.如果 (测试结果)
    .如果真 (不等于 (测试内容, “”))
        输出文本行 (相加 (“测试成功：”, 测试内容))
    .如果真结束
    
.否则
    输出文本行 (相加 (取重复文本 (9, “x”), “ 测试失败：”, 测试内容))
    赋值 (失败次数, 相加 (失败次数, 1))
    标准输出 (#标准输出设备, 字符 (7)) ' 鸣叫，警示用户。“鸣叫”命令不支持linux!
    暂停 () ' 用于定位测试失败代码行，请按F8。(编译后此行无效!)
.如果结束


.子程序 输出文本, 空白型, , 
.参数 文本, 文本型, , 

标准输出 (文本)
输出调试文本 (文本) ' 没法不换行！

.子程序 输出文本行, 空白型, , 
.参数 文本, 文本型, 可空, 

.如果真 (是否为空 (文本))
    赋值 (文本, “”)
.如果真结束

 ' 输出文本 (文本 ＋ #换行符)
输出调试文本 (文本)
标准输出 (相加 (文本, #换行符))


.子程序 开始测试, 空白型, 公开, 
.参数 测试对象, 文本型, , 对本次测试分类的基本描述
.参数 前缀文本, 文本型, 可空, 
.参数 后缀文本, 文本型, 可空, 

.如果真 (是否为空 (前缀文本))
    赋值 (前缀文本, 相加 (取重复文本 (9, “-”), “ 开始测试”, #左引号))
.如果真结束
.如果真 (是否为空 (后缀文本))
    赋值 (后缀文本, 相加 (#右引号, 取重复文本 (30, “-”)))
.如果真结束

输出文本行 (相加 (前缀文本, 测试对象, 后缀文本))

赋值 (本次测试对象, 测试对象)
赋值 (测试总数, 0)
赋值 (失败次数, 0)


.子程序 结束测试, 空白型, 公开, 
.参数 测试对象, 文本型, 可空, 
.参数 前缀文本, 文本型, 可空, 
.参数 后缀文本, 文本型, 可空, 

.如果真 (是否为空 (测试对象))
    赋值 (测试对象, 本次测试对象)
.如果真结束
.如果真 (是否为空 (前缀文本))
    赋值 (前缀文本, 相加 (取重复文本 (9, “=”), “ 结束测试”, #左引号))
.如果真结束
.如果真 (是否为空 (后缀文本))
    赋值 (后缀文本, 相加 (#右引号, 取重复文本 (30, “=”)))
.如果真结束

输出文本行 (相加 (前缀文本, 测试对象, 后缀文本))
输出文本行 (“测试结果：”)

输出文本行 (相加 (“测试总数：”, 到文本 (测试总数), “，”, 选择 (等于 (失败次数, 0), “全部成功！”, 相加 (“失败次数：”, 到文本 (失败次数), “。”))))
输出文本行 ()
赋值 (测试总数, 0)
赋值 (失败次数, 0)



 ' 不属于任何一个程序集、类模块的函数：
