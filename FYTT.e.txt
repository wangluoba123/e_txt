 ' 文件类型：Windows窗口程序

 ' 程序名称：枫叶听听
 ' 程序描述：枫叶听听
@备注:
枫叶听听
 ' 程序作者：塔那修斯
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 主窗口
    左边 = 50
    顶边 = 50
    宽度 = 460
    高度 = 329
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 假
    位置 = 0
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 真
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 列表窗
    左边 = 50
    顶边 = 50
    宽度 = 242
    高度 = 319
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 3
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “列表”
    帮助文件名 = “”

窗口 歌词窗
    左边 = 50
    顶边 = 50
    宽度 = 281
    高度 = 332
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 3
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “歌词”
    帮助文件名 = “”

窗口 均衡器窗
    左边 = 50
    顶边 = 50
    宽度 = 252
    高度 = 151
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “均衡器”
    帮助文件名 = “”

窗口 歌词搜索窗口
    左边 = 50
    顶边 = 50
    宽度 = 395
    高度 = 146
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “手动搜索”
    帮助文件名 = “”

窗口 排序窗
    左边 = 50
    顶边 = 50
    宽度 = 237
    高度 = 54
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “正在排序……”
    帮助文件名 = “”

窗口 扫描歌曲窗口
    左边 = 50
    顶边 = 50
    宽度 = 450
    高度 = 313
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “扫描歌曲（可以直接拖动文件夹到此窗口）”
    帮助文件名 = “”

窗口 歌词调整窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 111
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “二元线性调整”
    帮助文件名 = “”

窗口 设置窗口
    左边 = 50
    顶边 = 50
    宽度 = 520
    高度 = 332
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “设置”
    帮助文件名 = “”

窗口 菜单窗口
    左边 = 50
    顶边 = 50
    宽度 = 171
    高度 = 289
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 假
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”

窗口 文件属性窗口
    左边 = 50
    顶边 = 50
    宽度 = 746
    高度 = 341
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “文件属性”
    帮助文件名 = “”

窗口 偏移修正窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 217
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “偏移修正”
    帮助文件名 = “”

窗口 精确查找窗口
    左边 = 50
    顶边 = 50
    宽度 = 380
    高度 = 317
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 3
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “精确查找”
    帮助文件名 = “”

窗口 字体选择窗口
    左边 = 50
    顶边 = 50
    宽度 = 494
    高度 = 288
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “字体选择”
    帮助文件名 = “”



.声音 添加, " ' 已保存到：D:\易语言学习\Data\FYTT.e\添加", , 
.图片 Play, " ' 已保存到：D:\易语言学习\Data\FYTT.e\Play", , 
.图片 Pause, " ' 已保存到：D:\易语言学习\Data\FYTT.e\Pause", , 
.图片 Bar1, " ' 已保存到：D:\易语言学习\Data\FYTT.e\Bar1", , 
.图片 Bar2, " ' 已保存到：D:\易语言学习\Data\FYTT.e\Bar2", , 
.图片 鼠标_手形1, " ' 已保存到：D:\易语言学习\Data\FYTT.e\鼠标_手形1", , 
.图片 鼠标_手形2, " ' 已保存到：D:\易语言学习\Data\FYTT.e\鼠标_手形2", , 
.图片 键名键码对照表, " ' 已保存到：D:\易语言学习\Data\FYTT.e\键名键码对照表", , 
.图片 JPG文件头, " ' 已保存到：D:\易语言学习\Data\FYTT.e\JPG文件头", , 
.图片 检查框_单选, " ' 已保存到：D:\易语言学习\Data\FYTT.e\检查框_单选", , 
.图片 检查框_多选, " ' 已保存到：D:\易语言学习\Data\FYTT.e\检查框_多选", , 
.图片 关于图片, " ' 已保存到：D:\易语言学习\Data\FYTT.e\关于图片", , 
.常量 文件名_去扩展名, "1", , 
.常量 文件名_含扩展名, "2", , 
.常量 文件名_扩展名, "3", , 
.常量 文件名_仅目录, "4", , 
.常量 文件名_上级目录, "5", , 
.常量 , , , 
.常量 接收标志, "“<FYTT-RESERVELABEL>R@#%TR43w45ERTW34241re2te56ERYETw344134w345#$W%ER”", , 
.常量 BASS_3DALG_DEFAULT, "0", 公开, 
.常量 BASS_3DALG_FULL, "2", 公开, 
.常量 BASS_3DALG_LIGHT, "3", 公开, 
.常量 BASS_3DALG_OFF, "1", 公开, 
.常量 BASS_3DMODE_NORMAL, "0", 公开, normal 3D processing
.常量 BASS_3DMODE_OFF, "2", 公开, no 3D processing
.常量 BASS_3DMODE_RELATIVE, "1", 公开, position is relative to the listener
.常量 BASS_ACTIVE_PAUSED, "3", 公开, 
.常量 BASS_ACTIVE_PLAYING, "1", 公开, 
.常量 BASS_ACTIVE_STALLED, "2", 公开, 
.常量 BASS_ACTIVE_STOPPED, "0", 公开, 
.常量 BASS_ATTRIB_EAXMIX, "4", 公开, 
.常量 BASS_ATTRIB_FREQ, "1", 公开, 
.常量 BASS_ATTRIB_MUSIC_AMPLIFY, "256", 公开, &H100
.常量 BASS_ATTRIB_MUSIC_BPM, "259", 公开, &H103
.常量 BASS_ATTRIB_MUSIC_PANSEP, "257", 公开, &H101
.常量 BASS_ATTRIB_MUSIC_PSCALER, "258", 公开, &H102
.常量 BASS_ATTRIB_MUSIC_SPEED, "260", 公开, &H104
.常量 BASS_ATTRIB_MUSIC_VOL_CHAN, "512", 公开, &H200  + channel #
.常量 BASS_ATTRIB_MUSIC_VOL_GLOBAL, "261", 公开, &H105
.常量 BASS_ATTRIB_MUSIC_VOL_INST, "768", 公开, &H300  + instrument #
.常量 BASS_ATTRIB_PAN, "3", 公开, 
.常量 BASS_ATTRIB_VOL, "2", 公开, 
.常量 BASS_CONFIG_3DALGORITHM, "10", 公开, 
.常量 BASS_CONFIG_BUFFER, "0", 公开, 
.常量 BASS_CONFIG_CURVE_PAN, "8", 公开, 
.常量 BASS_CONFIG_CURVE_VOL, "7", 公开, 
.常量 BASS_CONFIG_FLOATDSP, "9", 公开, 
.常量 BASS_CONFIG_GVOL_MUSIC, "6", 公开, 
.常量 BASS_CONFIG_GVOL_SAMPLE, "4", 公开, 
.常量 BASS_CONFIG_GVOL_STREAM, "5", 公开, 
.常量 BASS_CONFIG_MIDI_DEFFONT, "66563", , 
.常量 BASS_CONFIG_MUSIC_VIRTUAL, "22", 公开, 
.常量 BASS_CONFIG_NET_AGENT, "16", 公开, 
.常量 BASS_CONFIG_NET_BUFFER, "12", 公开, 
.常量 BASS_CONFIG_NET_PASSIVE, "18", 公开, 
.常量 BASS_CONFIG_NET_PLAYLIST, "21", 公开, 
.常量 BASS_CONFIG_NET_PREBUF, "15", 公开, 
.常量 BASS_CONFIG_NET_PROXY, "17", 公开, 
.常量 BASS_CONFIG_NET_TIMEOUT, "11", 公开, 
.常量 BASS_CONFIG_PAUSE_NOPLAY, "13", 公开, 
.常量 BASS_CONFIG_REC_BUFFER, "19", 公开, 
.常量 BASS_CONFIG_UPDATEPERIOD, "1", 公开, 
.常量 BASS_CONFIG_UPDATETHREADS, "24", 公开, 
.常量 BASS_CONFIG_VERIFY, "23", 公开, 
.常量 BASS_CTYPE_MUSIC_IT, "131076", 公开, &H20004
.常量 BASS_CTYPE_MUSIC_MO3, "256", 公开, &H100  MO3 flag
.常量 BASS_CTYPE_MUSIC_MOD, "131072", 公开, &H20000
.常量 BASS_CTYPE_MUSIC_MTM, "131073", 公开, &H20001
.常量 BASS_CTYPE_MUSIC_S3M, "131074", 公开, &H20002
.常量 BASS_CTYPE_MUSIC_XM, "131075", 公开, &H20003
.常量 BASS_CTYPE_RECORD, "2", 公开, 
.常量 BASS_CTYPE_SAMPLE, "1", 公开, 
.常量 BASS_CTYPE_STREAM, "65536", 公开, &H10000
.常量 BASS_CTYPE_STREAM_AIFF, "65542", 公开, &H10006
.常量 BASS_CTYPE_STREAM_MP1, "65539", 公开, &H10003
.常量 BASS_CTYPE_STREAM_MP2, "65540", 公开, &H10004
.常量 BASS_CTYPE_STREAM_MP3, "65541", 公开, &H10005
.常量 BASS_CTYPE_STREAM_OGG, "65538", 公开, &H10002
.常量 BASS_CTYPE_STREAM_WAV, "262144", 公开, &H40000  WAVE flag, LOWORD=codec
.常量 BASS_CTYPE_STREAM_WAV_FLOAT, "327683", 公开, &H50003
.常量 BASS_CTYPE_STREAM_WAV_PCM, "327681", 公开, &H50001
.常量 BASS_DATA_AVAILABLE, "0", 公开, query how much data is buffered
.常量 BASS_DATA_FFT_INDIVIDUAL, "16", 公开, &H10  FFT flag: FFT for each channel, else all combined
.常量 BASS_DATA_FFT_NOWINDOW, "32", 公开, &H20  FFT flag: no Hanning window
.常量 BASS_DATA_FFT1024, "-2147483646", 公开, &H80000002  1024 FFT
.常量 BASS_DATA_FFT2048, "-2147483645", 公开, &H80000003  2048 FFT
.常量 BASS_DATA_FFT256, "-2147483648", 公开, &H80000000  256 sample FFT
.常量 BASS_DATA_FFT4096, "-2147483644", 公开, &H80000004  4096 FFT
.常量 BASS_DATA_FFT512, "-2147483647", 公开, &H80000001  512 FFT
.常量 BASS_DATA_FFT8192, "-2147483643", 公开, &H80000005  8192 FFT
.常量 BASS_DATA_FLOAT, "1073741824", 公开, &H40000000  flag: return floating-point sample data
.常量 BASS_DEVICE_3D, "4", 公开, enable 3D functionality
.常量 BASS_DEVICE_8BITS, "1", 公开, use 8 bit resolution, else 16 bit
.常量 BASS_DEVICE_CPSPEAKERS, "1024", 公开, detect speakers via Windows control panel
.常量 BASS_DEVICE_DEFAULT, "2", 公开, 
.常量 BASS_DEVICE_ENABLED, "1", 公开, 
.常量 BASS_DEVICE_INIT, "4", 公开, 
.常量 BASS_DEVICE_LATENCY, "256", 公开, calculate device latency (BASS_INFO struct)
.常量 BASS_DEVICE_MONO, "2", 公开, use mono, else stereo
.常量 BASS_DEVICE_NOSPEAKER, "4096", 公开, ignore speaker arrangement
.常量 BASS_DEVICE_SPEAKERS, "2048", 公开, force enabling of speaker assignment
.常量 BASS_DX8_PHASE_180, "4", 公开, 
.常量 BASS_DX8_PHASE_90, "3", 公开, 
.常量 BASS_DX8_PHASE_NEG_180, "0", 公开, 
.常量 BASS_DX8_PHASE_NEG_90, "1", 公开, 
.常量 BASS_DX8_PHASE_ZERO, "2", 公开, 
.常量 BASS_ERROR_ALREADY, "14", 公开, already initialized/paused/whatever
.常量 BASS_ERROR_BUFLOST, "4", 公开, the sample buffer was lost
.常量 BASS_ERROR_CODEC, "44", 公开, codec is not available/supported
.常量 BASS_ERROR_CREATE, "33", 公开, couldn't create the file
.常量 BASS_ERROR_DECODE, "38", 公开, the channel is a "decoding channel"
.常量 BASS_ERROR_DEVICE, "23", 公开, illegal device number
.常量 BASS_ERROR_DRIVER, "3", 公开, can't find a free sound driver
.常量 BASS_ERROR_DX, "39", 公开, a sufficient DirectX version is not installed
.常量 BASS_ERROR_EMPTY, "31", 公开, the MOD music has no sequence data
.常量 BASS_ERROR_ENDED, "45", 公开, the channel/file has ended
.常量 BASS_ERROR_FILEFORM, "41", 公开, unsupported file format
.常量 BASS_ERROR_FILEOPEN, "2", 公开, can't open the file
.常量 BASS_ERROR_FORMAT, "6", 公开, unsupported sample format
.常量 BASS_ERROR_FREQ, "25", 公开, illegal sample rate
.常量 BASS_ERROR_HANDLE, "5", 公开, invalid handle
.常量 BASS_ERROR_ILLPARAM, "20", 公开, an illegal parameter was specified
.常量 BASS_ERROR_ILLTYPE, "19", 公开, an illegal type was specified
.常量 BASS_ERROR_INIT, "8", 公开, BASS_Init has not been successfully called
.常量 BASS_ERROR_MEM, "1", 公开, memory error
.常量 BASS_ERROR_NO3D, "21", 公开, no 3D support
.常量 BASS_ERROR_NOCHAN, "18", 公开, can't get a free channel
.常量 BASS_ERROR_NOEAX, "22", 公开, no EAX support
.常量 BASS_ERROR_NOFX, "34", 公开, effects are not available
.常量 BASS_ERROR_NOHW, "29", 公开, no hardware voices available
.常量 BASS_ERROR_NONET, "32", 公开, no internet connection could be opened
.常量 BASS_ERROR_NOPLAY, "24", 公开, not playing
.常量 BASS_ERROR_NOTAVAIL, "37", 公开, requested data is not available
.常量 BASS_ERROR_NOTFILE, "27", 公开, the stream is not a file stream
.常量 BASS_ERROR_POSITION, "7", 公开, invalid position
.常量 BASS_ERROR_SPEAKER, "42", 公开, unavailable speaker
.常量 BASS_ERROR_START, "9", 公开, BASS_Start has not been successfully called
.常量 BASS_ERROR_TIMEOUT, "40", 公开, connection timedout
.常量 BASS_ERROR_UNKNOWN, "-1", 公开, some other mystery problem
.常量 BASS_ERROR_VERSION, "43", 公开, invalid BASS version (used by add-ons)
.常量 BASS_FILEDATA_END, "0", 公开, end & close the file
.常量 BASS_FILEPOS_BUFFER, "5", 公开, 
.常量 BASS_FILEPOS_CONNECTED, "4", 公开, 
.常量 BASS_FILEPOS_CURRENT, "0", 公开, 
.常量 BASS_FILEPOS_DECODE, "0", 公开, BASS_FILEPOS_CURRENT
.常量 BASS_FILEPOS_DOWNLOAD, "1", 公开, 
.常量 BASS_FILEPOS_END, "2", 公开, 
.常量 BASS_FILEPOS_START, "3", 公开, 
.常量 BASS_FX_DX8_CHORUS, "0", 公开, 
.常量 BASS_FX_DX8_COMPRESSOR, "1", 公开, 
.常量 BASS_FX_DX8_DISTORTION, "2", 公开, 
.常量 BASS_FX_DX8_ECHO, "3", 公开, 
.常量 BASS_FX_DX8_FLANGER, "4", 公开, 
.常量 BASS_FX_DX8_GARGLE, "5", 公开, 
.常量 BASS_FX_DX8_I3DL2REVERB, "6", 公开, 
.常量 BASS_FX_DX8_PARAMEQ, "7", 公开, 
.常量 BASS_FX_DX8_REVERB, "8", 公开, 
.常量 BASS_INPUT_OFF, "65536", 公开, &H10000
.常量 BASS_INPUT_ON, "131072", 公开, &H20000
.常量 BASS_INPUT_TYPE_ANALOG, "167772160", 公开, &HA000000
.常量 BASS_INPUT_TYPE_AUX, "150994944", 公开, &H9000000
.常量 BASS_INPUT_TYPE_CD, "83886080", 公开, &H5000000
.常量 BASS_INPUT_TYPE_DIGITAL, "16777216", 公开, &H1000000
.常量 BASS_INPUT_TYPE_LINE, "33554432", 公开, &H2000000
.常量 BASS_INPUT_TYPE_MASK, "-16777216", 公开, &HFF000000
.常量 BASS_INPUT_TYPE_MIC, "50331648", 公开, &H3000000
.常量 BASS_INPUT_TYPE_PHONE, "100663296", 公开, &H6000000
.常量 BASS_INPUT_TYPE_SPEAKER, "117440512", 公开, &H7000000
.常量 BASS_INPUT_TYPE_SYNTH, "67108864", 公开, &H4000000
.常量 BASS_INPUT_TYPE_UNDEF, "0", 公开, &H0
.常量 BASS_INPUT_TYPE_WAVE, "134217728", 公开, &H8000000
.常量 BASS_MP3_SETPOS, "131072", 公开, BASS_STREAM_PRESCAN
.常量 BASS_MUSIC_3D, "8", 公开, BASS_SAMPLE_3D
.常量 BASS_MUSIC_AUTOFREE, "262144", 公开, BASS_STREAM_AUTOFREE
.常量 BASS_MUSIC_CALCLEN, "131072", 公开, BASS_MUSIC_PRESCAN
.常量 BASS_MUSIC_DECODE, "2097152", 公开, BASS_STREAM_DECODE
.常量 BASS_MUSIC_FLOAT, "256", 公开, BASS_SAMPLE_FLOAT
.常量 BASS_MUSIC_FT2MOD, "8192", 公开, &H2000  play .MOD as FastTracker 2 does
.常量 BASS_MUSIC_FX, "128", 公开, BASS_SAMPLE_FX
.常量 BASS_MUSIC_LOOP, "4", 公开, BASS_SAMPLE_LOOP
.常量 BASS_MUSIC_MONO, "2", 公开, BASS_SAMPLE_MONO
.常量 BASS_MUSIC_NONINTER, "65536", 公开, &H10000  non-interpolated sample mixing
.常量 BASS_MUSIC_NOSAMPLE, "1048576", 公开, &H100000  don't load the samples
.常量 BASS_MUSIC_POSRESET, "32768", 公开, stop all notes when moving position
.常量 BASS_MUSIC_POSRESETEX, "4194304", 公开, &H400000  stop all notes and reset bmp/etc when moving position
.常量 BASS_MUSIC_PRESCAN, "131072", 公开, BASS_STREAM_PRESCAN  calculate playback length
.常量 BASS_MUSIC_PT1MOD, "16384", 公开, &H4000  play .MOD as ProTracker 1 does
.常量 BASS_MUSIC_RAMP, "512", 公开, &H200  normal ramping
.常量 BASS_MUSIC_RAMPS, "1024", 公开, &H400  sensitive ramping
.常量 BASS_MUSIC_SINCINTER, "8388608", 公开, &H800000  sinc interpolated sample mixing
.常量 BASS_MUSIC_STOPBACK, "524288", 公开, &H80000  stop the music on a backwards jump effect
.常量 BASS_MUSIC_SURROUND, "2048", 公开, &H800  surround sound
.常量 BASS_MUSIC_SURROUND2, "4096", 公开, &H1000  surround sound (mode 2)
.常量 BASS_OBJECT_DS, "1", 公开, DirectSound
.常量 BASS_OBJECT_DS3DL, "2", 公开, IDirectSound3DListener
.常量 BASS_OK, "0", 公开, all is OK
.常量 BASS_POS_BYTE, "0", 公开, byte position
.常量 BASS_POS_MUSIC_ORDER, "1", 公开, order.row position, MAKELONG(order,row)
.常量 BASS_RECORD_PAUSE, "32768", 公开, start recording paused
.常量 BASS_SAMPLE_3D, "8", 公开, 3D functionality
.常量 BASS_SAMPLE_8BITS, "1", 公开, 8 bit
.常量 BASS_SAMPLE_FLOAT, "256", 公开, 32-bit floating-point
.常量 BASS_SAMPLE_FX, "128", 公开, old implementation of DX8 effects
.常量 BASS_SAMPLE_LOOP, "4", 公开, looped
.常量 BASS_SAMPLE_MONO, "2", 公开, mono
.常量 BASS_SAMPLE_MUTEMAX, "32", 公开, mute at max distance (3D only)
.常量 BASS_SAMPLE_OVER_DIST, "196608", 公开, &H30000  override furthest from listener (3D only)
.常量 BASS_SAMPLE_OVER_POS, "131072", 公开, &H20000  override longest playing
.常量 BASS_SAMPLE_OVER_VOL, "65536", 公开, &H10000  override lowest volume
.常量 BASS_SAMPLE_SOFTWARE, "16", 公开, not using hardware mixing
.常量 BASS_SAMPLE_VAM, "64", 公开, DX7 voice allocation & management
.常量 BASS_SPEAKER_CENLFE, "50331648", 公开, &H3000000  center & LFE speakers (5.1)
.常量 BASS_SPEAKER_CENTER, "318767104", 公开, BASS_SPEAKER_CENLFE Or BASS_SPEAKER_LEFT
.常量 BASS_SPEAKER_FRONT, "16777216", 公开, &H1000000  front speakers
.常量 BASS_SPEAKER_FRONTLEFT, "285212672", 公开, BASS_SPEAKER_FRONT Or BASS_SPEAKER_LEFT
.常量 BASS_SPEAKER_FRONTRIGHT, "553648128", 公开, BASS_SPEAKER_FRONT Or BASS_SPEAKER_RIGHT
.常量 BASS_SPEAKER_LEFT, "268435456", 公开, &H10000000  modifier: left
.常量 BASS_SPEAKER_LFE, "587202560", 公开, BASS_SPEAKER_CENLFE Or BASS_SPEAKER_RIGHT
.常量 BASS_SPEAKER_REAR, "33554432", 公开, &H2000000  rear/side speakers
.常量 BASS_SPEAKER_REAR2, "67108864", 公开, &H4000000  rear center speakers (7.1)
.常量 BASS_SPEAKER_REAR2LEFT, "335544320", 公开, BASS_SPEAKER_REAR2 Or BASS_SPEAKER_LEFT
.常量 BASS_SPEAKER_REAR2RIGHT, "603979776", 公开, BASS_SPEAKER_REAR2 Or BASS_SPEAKER_RIGHT
.常量 BASS_SPEAKER_REARLEFT, "301989888", 公开, BASS_SPEAKER_REAR Or BASS_SPEAKER_LEFT
.常量 BASS_SPEAKER_REARRIGHT, "570425344", 公开, BASS_SPEAKER_REAR Or BASS_SPEAKER_RIGHT
.常量 BASS_SPEAKER_RIGHT, "536870912", 公开, &H20000000  modifier: right
.常量 BASS_STREAM_AUTOFREE, "262144", 公开, &H40000  automatically free the stream when it stop/ends
.常量 BASS_STREAM_BLOCK, "1048576", 公开, &H100000  download/play internet file stream in small blocks
.常量 BASS_STREAM_DECODE, "2097152", 公开, &H200000  don't play the stream, only decode (BASS_ChannelGetData)
.常量 BASS_STREAM_PRESCAN, "131072", 公开, &H20000  enable pin-point seeking/length (MP3/MP2/MP1)
.常量 BASS_STREAM_RESTRATE, "524288", 公开, &H80000  restrict the download rate of internet file streams
.常量 BASS_STREAM_STATUS, "8388608", 公开, &H800000  give server status info (HTTP/ICY tags) in DOWNLOADPROC
.常量 BASS_STREAMPROC_END, "-2147483648", 公开, &H80000000  end of user stream flag
.常量 BASS_SYNC_DOWNLOAD, "7", 公开, 
.常量 BASS_SYNC_END, "2", 公开, 
.常量 BASS_SYNC_FREE, "8", 公开, 
.常量 BASS_SYNC_META, "4", 公开, 
.常量 BASS_SYNC_MIXTIME, "1073741824", 公开, &H40000000  FLAG: sync at mixtime, else at playtime
.常量 BASS_SYNC_MUSICFX, "3", 公开, 
.常量 BASS_SYNC_MUSICINST, "1", 公开, 
.常量 BASS_SYNC_MUSICPOS, "10", 公开, 
.常量 BASS_SYNC_OGG_CHANGE, "12", 公开, 
.常量 BASS_SYNC_ONETIME, "-2147483648", 公开, &H80000000  FLAG: sync only once, else continuously
.常量 BASS_SYNC_POS, "0", 公开, 
.常量 BASS_SYNC_SETPOS, "11", 公开, 
.常量 BASS_SYNC_SLIDE, "5", 公开, 
.常量 BASS_SYNC_STALL, "6", 公开, 
.常量 BASS_TAG_HTTP, "3", 公开, HTTP headers : series of null-terminated ANSI strings
.常量 BASS_TAG_ICY, "4", 公开, ICY headers : series of null-terminated ANSI strings
.常量 BASS_TAG_ID3, "0", 公开, ID3v1 tags : 128 byte block
.常量 BASS_TAG_ID3V2, "1", 公开, ID3v2 tags : variable length block
.常量 BASS_TAG_LYRICS3, "10", 公开, Lyric3v2 tag : ASCII string
.常量 BASS_TAG_META, "5", 公开, ICY metadata : ANSI string
.常量 BASS_TAG_MUSIC_INST, "65792", 公开, &H10100  + instrument #, MOD instrument name : ANSI string
.常量 BASS_TAG_MUSIC_MESSAGE, "65537", 公开, &H10001  MOD message : ANSI string
.常量 BASS_TAG_MUSIC_NAME, "65536", 公开, &H10000  MOD music name : ANSI string
.常量 BASS_TAG_MUSIC_SAMPLE, "66304", 公开, &H10300  + sample #, MOD sample name : ANSI string
.常量 BASS_TAG_OGG, "2", 公开, OGG comments : series of null-terminated UTF-8 strings
.常量 BASS_TAG_RIFF_INFO, "256", 公开, &H100  RIFF/WAVE tags : series of null-terminated ANSI strings
.常量 BASS_TAG_VENDOR, "9", 公开, OGG encoder : UTF-8 string
.常量 BASS_UNICODE, "-2147483648", 公开, &H80000000
.常量 BASS_VAM_HARDWARE, "1", 公开, 
.常量 BASS_VAM_SOFTWARE, "2", 公开, 
.常量 BASS_VAM_TERM_DIST, "8", 公开, 
.常量 BASS_VAM_TERM_PRIO, "16", 公开, 
.常量 BASS_VAM_TERM_TIME, "4", 公开, 
.常量 BASSFALSE, "0", 公开, Use this instead of VB Booleans
.常量 BASSTRUE, "1", 公开, Use this instead of VB Booleans
.常量 BASSVERSION, "516", 公开, &H204  API version
.常量 BASSVERSIONTEXT, "“2.4”", 公开, 
.常量 DSCAPS_CERTIFIED, "64", 公开, device driver has been certified by Microsoft
.常量 DSCAPS_CONTINUOUSRATE, "16", 公开, supports all sample rates between min/maxrate
.常量 DSCAPS_EMULDRIVER, "32", 公开, device does NOT have hardware DirectSound support
.常量 DSCAPS_SECONDARY16BIT, "2048", 公开, 16 bit
.常量 DSCAPS_SECONDARY8BIT, "1024", 公开, 8 bit
.常量 DSCAPS_SECONDARYMONO, "256", 公开, mono
.常量 DSCAPS_SECONDARYSTEREO, "512", 公开, stereo
.常量 DSCCAPS_CERTIFIED, "64", 公开, DSCAPS_CERTIFIED  device driver has been certified by Microsoft
.常量 DSCCAPS_EMULDRIVER, "32", 公开, DSCAPS_EMULDRIVER  device does NOT have hardware DirectSound recording support
.常量 EAX_ENVIRONMENT_ALLEY, "14", 公开, 
.常量 EAX_ENVIRONMENT_ARENA, "9", 公开, 
.常量 EAX_ENVIRONMENT_AUDITORIUM, "6", 公开, 
.常量 EAX_ENVIRONMENT_BATHROOM, "3", 公开, 
.常量 EAX_ENVIRONMENT_CARPETEDHALLWAY, "11", 公开, 
.常量 EAX_ENVIRONMENT_CAVE, "8", 公开, 
.常量 EAX_ENVIRONMENT_CITY, "16", 公开, 
.常量 EAX_ENVIRONMENT_CONCERTHALL, "7", 公开, 
.常量 EAX_ENVIRONMENT_COUNT, "26", 公开, total number of environments
.常量 EAX_ENVIRONMENT_DIZZY, "24", 公开, 
.常量 EAX_ENVIRONMENT_DRUGGED, "23", 公开, 
.常量 EAX_ENVIRONMENT_FOREST, "15", 公开, 
.常量 EAX_ENVIRONMENT_GENERIC, "0", 公开, 
.常量 EAX_ENVIRONMENT_HALLWAY, "12", 公开, 
.常量 EAX_ENVIRONMENT_HANGAR, "10", 公开, 
.常量 EAX_ENVIRONMENT_LIVINGROOM, "4", 公开, 
.常量 EAX_ENVIRONMENT_MOUNTAINS, "17", 公开, 
.常量 EAX_ENVIRONMENT_PADDEDCELL, "1", 公开, 
.常量 EAX_ENVIRONMENT_PARKINGLOT, "20", 公开, 
.常量 EAX_ENVIRONMENT_PLAIN, "19", 公开, 
.常量 EAX_ENVIRONMENT_PSYCHOTIC, "25", 公开, 
.常量 EAX_ENVIRONMENT_QUARRY, "18", 公开, 
.常量 EAX_ENVIRONMENT_ROOM, "2", 公开, 
.常量 EAX_ENVIRONMENT_SEWERPIPE, "21", 公开, 
.常量 EAX_ENVIRONMENT_STONECORRIDOR, "13", 公开, 
.常量 EAX_ENVIRONMENT_STONEROOM, "5", 公开, 
.常量 EAX_ENVIRONMENT_UNDERWATER, "22", 公开, 
.常量 STREAMFILE_BUFFER, "1", 公开, 
.常量 STREAMFILE_BUFFERPUSH, "2", 公开, 
.常量 STREAMFILE_NOBUFFER, "0", 公开, 
.常量 STREAMPROC_DUMMY, "0", 公开, "dummy" stream
.常量 STREAMPROC_PUSH, "-1", 公开, push stream
.常量 WAVE_FORMAT_1M08, "1", 公开, &H1  11.025 kHz, Mono,   8-bit
.常量 WAVE_FORMAT_1M16, "4", 公开, &H4  11.025 kHz, Mono,   16-bit
.常量 WAVE_FORMAT_1S08, "2", 公开, &H2  11.025 kHz, Stereo, 8-bit
.常量 WAVE_FORMAT_1S16, "8", 公开, &H8  11.025 kHz, Stereo, 16-bit
.常量 WAVE_FORMAT_2M08, "16", 公开, &H10  22.05  kHz, Mono,   8-bit
.常量 WAVE_FORMAT_2M16, "64", 公开, &H40  22.05  kHz, Mono,   16-bit
.常量 WAVE_FORMAT_2S08, "32", 公开, &H20  22.05  kHz, Stereo, 8-bit
.常量 WAVE_FORMAT_2S16, "128", 公开, &H80  22.05  kHz, Stereo, 16-bit
.常量 WAVE_FORMAT_4M08, "256", 公开, &H100  44.1   kHz, Mono,   8-bit
.常量 WAVE_FORMAT_4M16, "1024", 公开, &H400  44.1   kHz, Mono,   16-bit
.常量 WAVE_FORMAT_4S08, "512", 公开, &H200  44.1   kHz, Stereo, 8-bit
.常量 WAVE_FORMAT_4S16, "2048", 公开, &H800  44.1   kHz, Stereo, 16-bit
.常量 鼠标移动, "1", , 
.常量 鼠标左键按下, "2", , 
.常量 鼠标左键放开, "4", , 
.常量 鼠标右键按下, "8", , 
.常量 鼠标右键放开, "16", , 
.常量 鼠标中键按下, "32", , 
.常量 鼠标中键放开, "64", , 
.常量 鼠标滑轮滚动, "128", , 
.常量 绝对鼠标位置, "32768", , 
.常量 GCL_STYLE, "-26", , 
.常量 CS_DROPSHADOW, "-149815296", , 
.常量 INTERNET_OPEN_TYPE_DIRECT, "1", , 
.常量 INTERNET_OPEN_TYPE_PROXY, "3", , 
.常量 INTERNET_SERVICE_HTTP, "3", , 
.常量 WAIT_TIMEOUT, "258", , 超时
.常量 , , , 
.常量 OFN_ALLOWMULTISELECT, "512", , 
.常量 OFN_CREATEPROMPT, "8192", , 
.常量 OFN_ENABLEHOOK, "32", , 
.常量 OFN_ENABLESIZING, "8388608", , 
.常量 OFN_EXPLORER, "524288", , 
.常量 OFN_FILEMUSTEXIST, "4096", , 
.常量 OFN_HIDEREADONLY, "4", , 
.常量 OFN_NOCHANGEDIR, "8", , 
.常量 OFN_OVERWRITEPROMPT, "2", , 
.常量 OFN_PATHMUSTEXIST, "2048", , 
.常量 , , , 
.常量 , , , 
.常量 最小宽度, "252", , 
.常量 最小高度, "151", , 
.常量 , , , 
.常量 Tip1, "“欢迎使用枫叶听听，现在，点这里添加音乐”", , 
.常量 Tip2, "“提示：按下组合键Alt+P也可以执行“播放/暂停”操作”", , 
.常量 Tip3_1, "“窗口不见了？”", , 
.常量 Tip3_2, "“点击这里重新显示，或者试试按下组合键Win+A，或者在这里点右键，看看主菜单”", , 
.常量 Tip4, "“试试点这里，也可以弹出主菜单”", , 
.常量 Tip5, "“主菜单里可以进行一些常规操作，还有程序选项”", , 
.常量 Tip6, "“按下组合键Alt+L可以锁定/解锁桌面歌词”", , 
.常量 Tip7, "“试着在拖动前按下Ctrl键，可以直接调整歌词偏移”", , 
.常量 Tip8, "“调整完了？却发现歌词还不准？点右键，试试“二元线性调整””", , 
.常量 Tip9, "“从Windows资源管理器中直接拖动到这里试试，或者……单击列表框上方的“+”按钮”", , 
.常量 Tip10, "“一个一个添加太麻烦？试试“扫描目录”功能”", , 
.常量 Tip11, "“试着按下组合键Alt+右 和 Alt+左，它们分别是下一首和上一首的快捷键”", , 
.常量 Tip12, "“想更快找到想要的歌？按下Ctrl+F，试试快速定位功能”", , 
.常量 Tip13, "“快速定位：输入歌曲全名，或者是汉语拼音首字母，按↑↓方向键可以在不同搜索结果中切换”", , 
.常量 Tip14, "“找到想要的歌曲了？下次确认的时候，试着按住Shift，体验一下全新的“播放预约”功能”", , 
.常量 Tip15, "“已经添加到预约了，等这首歌播放完了，你就能听到预约的歌了，或者直接按“下一首”也可以</br>你还可以继续搜索，再次添加预约</br>要退出快速定位，按下Esc键</br></br>预约的歌曲在哪里？在列表中按下鼠标右键，最后一个菜单“查看预约””", , 
.常量 Tip16, "“想要后台搜歌？按下Alt+F”", , 
.常量 Tip17, "“按住Shift键双击列表，或者按Shift+回车，也可以预约”", , 
.常量 Tip18, "“后台搜索：即使界面隐藏了，依然可以按Alt+F随时调出查找功能”", , 
.常量 软件提示个数, "18", , 
.常量 , , , 
.常量 均衡器_古典, "“2|1.5|1.5|1|1|0.5|0|-0.5|-1|-1”", , 
.常量 均衡器_流行, "“1.5|1|0|-0.5|-1|-1|-0.5|0|1|1.5”", , 
.常量 均衡器_爵士, "“1|0.1|0|-0.5|-0.5|0.5|1.5|2.5|2|1.5”", , 
.常量 均衡器_摇滚, "“-1|0|1|2|-0.5|-0.5|0|0|1|1.5”", , 
.常量 均衡器_柔和, "“0.5|0|0|0.5|1|0.5|-0.5|-1|-1|-1”", , 
.常量 均衡器_重低音, "“2|3|3|-1|-0.5|0|0|0|0|0”", , 
.常量 均衡器_消除低音, "“-5|-5|-3|-2|-2|0|0|0|0|0”", , 
.常量 均衡器_弱化高音, "“0|0|0|0|0|-1|-3|-5|-5|-4”", , 
.常量 , , , 
.常量 , , , 
.常量 , , , 
.常量 程序名, "“枫叶听听”", , 
.常量 放大倍数, "3", , 
.常量 底色, "15983050", , 
.常量 加深底色, "15585453", , 
.常量 默认过滤器, "“所有支持的格式|*.mp3;*.mp2;*.mp1;*.wav;*.wma;*.mid;*.midi|基本波形格式(*.mp3;*.mp2;*.mp1;*.wav;*.wma)|*.mp3;*.mp2;*.mp1;*.wav;*.wma|软件合成器(*.mid;*.midi)|*.mid;*.midi|所有文件(*.*)|*.*”", , 
.常量 配置文件名, "“\MSet.ini”", , 
.常量 主窗口宽度, "252", , 
.常量 主窗口高度, "151", , 
.常量 歌词颜色_一般, "6316128", , 
.常量 歌词颜色_高亮, "1325458", , 
.常量 提示文本_二元线性调整, "“传统的歌词调整，只是单纯调整整体偏移，即让每一句都推迟或提早一段时间</br>而“二元线性调整”能处理较为复杂的歌词时间错位问题</br>当用户准确定位了2行歌词，程序就能通过拉伸时间长度来精确计算出其他行的正确时间</br></br>Tips：在选择定位点时，尽量让二者离得远一些，以减小误差”", , 
.常量 默认热键, "“1604076|701039|801037|908013|1104070|-200186|-300222|104080|504037|604039|-1900113|-2000114|-2100115|-2200116|-1700121|1304083|1808065|201188|301190|1401186|1501222|-100032”", , 
.常量 提示文本_常规, "“下次运行时自动继续此次播放\下次自动播放时记住上次的位置（仅当“继续上次播放”选中时才有效\在任务栏以滚动的形式显示歌曲信息\当试图打开一个新文件，却未能成功时，可以使现在的音乐不被打断\仅当最小化隐藏时显示托盘图标，当点击图标，显示窗口后，托盘图标将消失\换了一首歌后，在托盘提示框中显示歌曲信息（要求托盘图标可见）\仅当窗口最小化或隐藏时才显示托盘气球（“换歌后显示托盘气球”必须选中）\点击“上一首”按钮时，将退回到刚刚切掉的歌曲，而不是列表中的上一个”", , 
.常量 , , , 
.常量 提示文本_歌词_目录类, "“对于目录，支持两个参数：%localdir%和%rundir%，分别代表歌曲文件所在目录，和程序的运行目录”", , 
.常量 提示文本_歌词_文件名类, "“对于文件名，支持所有音乐标签。如“(标题)”、“(专辑)”</br>
有三个字段：(文件名)、(扩展名)、(上级目录名)</br>
注意，“(文件名)”不包含扩展名，若要完整表示文件全名，请用“(文件名).(扩展名)”", , 
.常量 提示文本_滑块条, "“拖动调整该颜色的浓度”", , 
.常量 提示文本_杂项_显示标题1, "“支持下列字段（即所有音乐标签）：</br>
(标题) (艺术家) (专辑) (年份)</br>
(流派) (备注) (编号) (歌词)”", , 
.常量 提示文本_杂项_显示标题2, "“列表标题只支持3个字段：(标题) (艺术家) (专辑)</br>
新设置将在关闭设置窗口后生效”", , 
.常量 提示文本_杂项_显示标题, "“对于“托盘气球文本”和“窗口标题”，支持全部8个音乐标签</br></br>
而“列表标题”受数据库的限制，只能用前3个最常用标签：(标题)、(艺术家)、(专辑)”", , 
.常量 , , , 
.常量 关于文本, "“『枫叶听听』是一款集音乐播放、标签读写、歌词显示于一身的媒体播放器
本程序源码已经公开，你可以拿走需要的部分，但是你不能直接把这份代码修改成商业软件

　　　　　　　　　　　――――塔那修斯 于2011.1.13”", , 
.常量 , , , 
.常量 频谱柱衰减速度, "0.012", , 
.常量 频谱柱衰减加速度, "0.008", , 
.常量 频谱波峰衰减速度, "0.0008", , 
.常量 频谱波峰衰减加速度, "0.0012", , 
.常量 信息框自动返回, "32000", 隐藏, 高级信息框常量
.常量 打开文件对话框, "0", 隐藏, 高级对话框常量
.常量 保存文件对话框, "1", 隐藏, 高级对话框常量
.常量 Skin_QQ2009, "1", 隐藏, 
.常量 Skin_dzArt_Blax, "2", 隐藏, 
.常量 Skin_dzArt_NewLuna, "3", 隐藏, 
.常量 Skin_QQ粉红, "4", 隐藏, 
.常量 Skin_MSN, "5", 隐藏, 
.常量 Skin_Black, "6", 隐藏, 
.常量 百度歌曲API, "“http://box.zhangmen.baidu.com/x?op=12&count=1&title=”", , 
.常量 百度歌词API, "“http://box.zhangmen.baidu.com/bdlrc/”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' const 9DEDA17547CF40e085B7C8919B1800AF 1 6 常量支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 2 0 扩展界面支持库二
 ' TrayIcon {86AB1D8A-7995-4D86-AE5F-18710759228B} 2 0 托盘图标支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' edroptarget {9DA96BF9CEBD45c5BFCF94CBE61671F5} 2 0 拖放支持库
 ' shellEx DA19AC3ADD2F4121AAD84AC5FBCAFC71 3 0 扩展功能支持库一
 ' iext5 {E5000198-4471-40e2-92BC-D0BA075BDBB2} 2 0 扩展界面支持库五
 ' shell 52F260023059454187AF826A3C07AF2A 3 0 操作系统界面功能支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 2 0 正则表达式支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' NBWaveEffect {164182FF-34BB-4c10-AFC5-AE631D61F35E} 1 0 NB水波特效支持库



 ' 所需要的模块
 ' EC_易语言高级扩展对话框 C:\Users\Administrator\Desktop\EC_易语言高级对话框1.43.ec
 ' 超级列表框功能扩展2.2 C:\Users\Administrator\Desktop\超级列表框功能扩展2.2.ec
 ' EasySkin换肤模块 D:\Program files\易语言 5.1\ecom\EasySkin.ec
 ' 禁止多次运行程序 F:\Documents and Settings\Administrator\桌面\模块_禁止多次运行.ec


数据类型 矩形_, , RECT
    .成员 左边, 整数型, , , left
    .成员 顶边, 整数型, , , top
    .成员 右边, 整数型, , , right
    .成员 底边, 整数型, , , bottom

数据类型 横向吸附线, , 
    .成员 纵坐标, 整数型, , , 线的纵坐标
    .成员 横坐标1, 整数型, , , 左横坐标
    .成员 横坐标2, 整数型, , , 右横坐标

数据类型 纵向吸附线, , 
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标1, 整数型, , , 
    .成员 纵坐标2, 整数型, , , 

数据类型 吸附点, , 包含了与目标窗口的距离，属于即时变量
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标, 整数型, , , 
    .成员 距离, 整数型, , , X^2+Y^2
    .成员 距离X, 整数型, , , 
    .成员 距离Y, 整数型, , , 

数据类型 横向有距吸附线, , 包含了与目标窗口的距离，属于即时变量
    .成员 吸附线, 横向吸附线, , , 
    .成员 原纵向位置, 整数型, , , 右边、底边吸附时，用于计算的纵位置需要减去一个窗口高度，这个是减去以前的（原来的），用于吸附点的判定
    .成员 距离, 整数型, , , 
    .成员 靠近的窗口号, 整数型, , , 用于整体拖动时，判断是哪个窗口吸上了这条线，用于删除线时的判断
    .成员 匿名成员19773, 空白型, , , 

数据类型 纵向有距吸附线, , 包含了与目标窗口的距离，属于即时变量
    .成员 吸附线, 纵向吸附线, , , 
    .成员 原横向位置, 整数型, , , 同上
    .成员 距离, 整数型, , , 
    .成员 靠近的窗口号, 整数型, , , 
    .成员 匿名成员19775, 空白型, , , 

数据类型 整体拖动, , 
    .成员 启用, 逻辑型, , , 
    .成员 横向偏移, 整数型, , , 与主窗口之间的横向偏移
    .成员 纵向偏移, 整数型, , , 与主窗口之间的纵向偏移

数据类型 播放器设置, , 
    .成员 提示过, 文本型, , , 
    .成员 匿名成员20471, 空白型, , , 
    .成员 引擎号, 整数型, , , 0 Bass 1 MCI
    .成员 过滤器, 文本型, , , “打开”对话框文件类型过滤器
    .成员 吸附临界值, 整数型, , , 
    .成员 使用BASS播放MID, 逻辑型, , , 
    .成员 音色库路径, 文本型, , , 
    .成员 MP3标签读取顺序, 文本型, , , 3个项：ID3V1 ID3V2 APE 以“|”区分，在前面的优先读取，支持大小写互换
    .成员 循环模式, 整数型, , , 1、单曲 2、顺序 3、随机
    .成员 音量, 整数型, , , 
    .成员 开启历史记录, 逻辑型, , , 
    .成员 历史记录数量, 整数型, , , 
    .成员 热键, 文本型, , , 以“|”分割
    .成员 继续上次播放, 逻辑型, , , 
    .成员 记住上次位置, 逻辑型, , , 
    .成员 任务栏滚动信息, 逻辑型, , , 
    .成员 快进快退长度, 整数型, , , 秒
    .成员 换歌气球提示, 逻辑型, , , 
    .成员 仅隐藏时显示气球, 逻辑型, , , 
    .成员 仅隐藏时显示托盘图标, 逻辑型, , , 
    .成员 保证当前播放, 逻辑型, , , 
    .成员 最小化时隐藏, 逻辑型, , , 
    .成员 关闭按钮退出, 逻辑型, , , 
    .成员 透明度, 整数型, , , 
    .成员 回声强度, 整数型, , , 0-100
    .成员 回声时间, 整数型, , , 100-3000
    .成员 匿名成员27076, 空白型, , , 
    .成员 标签显示方案_列表, 文本型, , , 
    .成员 标签显示方案_托盘气球, 文本型, , , 
    .成员 标签显示方案_窗口标题, 文本型, , , 
    .成员 匿名成员28468, 空白型, , , 
    .成员 MP3标签类型, 整数型, , , 
    .成员 ID3V2编码类型, 整数型, , , 0 1 2 是表项号 非编码号
    .成员 匿名成员27074, 空白型, , , 
    .成员 匿名成员28350, 空白型, , , 
    .成员 匿名成员27075, 空白型, , , 
    .成员 均衡器1, 小数型, , , 
    .成员 均衡器2, 小数型, , , 
    .成员 均衡器3, 小数型, , , 
    .成员 均衡器4, 小数型, , , 
    .成员 均衡器5, 小数型, , , 
    .成员 均衡器6, 小数型, , , 
    .成员 均衡器7, 小数型, , , 
    .成员 均衡器8, 小数型, , , 
    .成员 均衡器9, 小数型, , , 
    .成员 均衡器10, 小数型, , , 
    .成员 变速值, 整数型, , , 
    .成员 匿名成员20858, 空白型, , , 
    .成员 视觉效果类型, 整数型, , , 0 频谱 1 波形
    .成员 频谱_显示粗状, 逻辑型, , , 
    .成员 频谱_颜色上_颜色值, 整数型, , , 
    .成员 频谱_颜色上_浓度, 整数型, , , 
    .成员 频谱_颜色下_颜色值, 整数型, , , 
    .成员 频谱_颜色下_浓度, 整数型, , , 
    .成员 波形_是否淡出, 逻辑型, , , 
    .成员 波形_颜色值, 整数型, , , 
    .成员 波形_颜色浓度, 整数型, , , 
    .成员 波形_画笔粗细, 整数型, , , 
    .成员 匿名成员24556, 空白型, , , 
    .成员 主窗口_左边, 整数型, , , 
    .成员 主窗口_顶边, 整数型, , , 
    .成员 匿名成员9556, 空白型, , , 
    .成员 列表窗_显示, 逻辑型, , , 
    .成员 列表窗_左边, 整数型, , , 
    .成员 列表窗_顶边, 整数型, , , 
    .成员 列表窗_宽度, 整数型, , , 
    .成员 列表窗_高度, 整数型, , , 
    .成员 匿名成员29278, 空白型, , , 
    .成员 列表_字体名称, 文本型, , , 
    .成员 列表_字体大小, 整数型, , , 
    .成员 列表_字体颜色, 整数型, , , 
    .成员 列表_字体风格, 整数型, , , 
    .成员 列表_字体角度, 整数型, , , 
    .成员 匿名成员29384, 空白型, , , 
    .成员 歌词窗_显示, 逻辑型, , , 
    .成员 歌词窗_左边, 整数型, , , 
    .成员 歌词窗_顶边, 整数型, , , 
    .成员 歌词窗_宽度, 整数型, , , 
    .成员 歌词窗_高度, 整数型, , , 
    .成员 歌词窗_字体名称, 文本型, , , 
    .成员 歌词窗_字体大小, 整数型, , , 
    .成员 歌词窗_字体风格, 整数型, , , 0普通 1加粗 2倾斜 3加粗倾斜
    .成员 歌词窗_开启淡化, 逻辑型, , , 
    .成员 歌词窗_淡化区比例, 整数型, , , 歌词窗上下边淡化高度，实际计算时取倒数
    .成员 歌词窗_非激活颜色, 整数型, , , 
    .成员 歌词窗_激活颜色, 整数型, , , 
    .成员 匿名成员21281, 空白型, , , 
    .成员 匿名成员21282, 空白型, , , 
    .成员 桌面歌词_显示, 逻辑型, , , 
    .成员 桌面歌词_背景颜色, 整数型, , , 
    .成员 桌面歌词_背景透明度, 整数型, , , 
    .成员 桌面歌词_纵向偏移_绘制, 整数型, , , 
    .成员 桌面歌词_纵向偏移_窗体, 整数型, , , 
    .成员 桌面歌词_文本透明度, 整数型, , , 
    .成员 桌面歌词_字体大小, 整数型, , , 
    .成员 桌面歌词_字体名称, 文本型, , , 
    .成员 桌面歌词_字体风格, 整数型, , , 
    .成员 桌面歌词_颜色1, 整数型, , , 
    .成员 桌面歌词_颜色浓度1, 整数型, , , 
    .成员 桌面歌词_颜色2, 整数型, , , 
    .成员 桌面歌词_颜色浓度2, 整数型, , , 
    .成员 桌面歌词_颜色3, 整数型, , , 
    .成员 桌面歌词_颜色浓度3, 整数型, , , 
    .成员 桌面歌词_颜色4, 整数型, , , 
    .成员 桌面歌词_颜色浓度4, 整数型, , , 
    .成员 桌面歌词_背景高度修正, 整数型, , , 
    .成员 桌面歌词_窗口左边, 整数型, , , 
    .成员 桌面歌词_窗口顶边, 整数型, , , 
    .成员 桌面歌词_窗口宽度, 整数型, , , 
    .成员 桌面歌词_卡拉OK模式, 逻辑型, , , 
    .成员 桌面歌词_锁定, 逻辑型, , , 
    .成员 桌面歌词_锁定热键, 整数型, , , 
    .成员 桌面歌词_刷新减慢, 整数型, , , 每隔多少此值 刷新一次
    .成员 桌面歌词_测量文本高度, 逻辑型, , , 
    .成员 匿名成员21009, 空白型, , , 
    .成员 均衡器窗_显示, 逻辑型, , , 
    .成员 均衡器窗_左边, 整数型, , , 
    .成员 均衡器窗_顶边, 整数型, , , 
    .成员 匿名成员19895, 空白型, , , 
    .成员 歌词_扫描路径, 文本型, , , 以“#换行符”区分，识别大小写的%rundir%，%localdir%
    .成员 歌词_扫描文件名, 文本型, , , 支持半角括号里的任何子标签名，和(文件名)、(扩展名)、(上级目录名)''''''''''''''
    .成员 歌词_保存路径, 文本型, , , 同上
    .成员 歌词_保存文件名, 文本型, , , 同上'''''''''''''''''''
    .成员 歌词_优先网站, 整数型, , , 
    .成员 匿名成员19908, 逻辑型, , , 

数据类型 BASS_3DVECTOR, , 
    .成员 X, 小数型, , , +=right, -=left
    .成员 Y, 小数型, , , +=up, -=down
    .成员 z, 小数型, , , +=front, -=behind

数据类型 BASS_CHANNELINFO, , 
    .成员 freq, 整数型, , , default playback rate
    .成员 chans, 整数型, , , channels
    .成员 flags, 整数型, , , BASS_SAMPLE/STREAM/MUSIC/SPEAKER flags
    .成员 ctype, 整数型, , , type of channel
    .成员 origres, 整数型, , , original resolution
    .成员 plugin, 整数型, , , plugin
    .成员 sample, 整数型, , , sample
    .成员 filename, 整数型, , , filename

数据类型 BASS_DEVICEINFO, , 
    .成员 name, 文本型, , , description
    .成员 driver, 文本型, , , driver
    .成员 flags, 整数型, , , 

数据类型 BASS_DX8_CHORUS, , 
    .成员 fWetDryMix, 小数型, , , 
    .成员 fDepth, 小数型, , , 
    .成员 fFeedback, 小数型, , , 
    .成员 fFrequency, 小数型, , , 
    .成员 lWaveform, 整数型, , , 0=triangle, 1=sine
    .成员 fDelay, 小数型, , , 
    .成员 lPhase, 整数型, , , BASS_DX8_PHASE_xxx

数据类型 BASS_DX8_COMPRESSOR, , 
    .成员 fGain, 小数型, , , 
    .成员 fAttack, 小数型, , , 
    .成员 fRelease, 小数型, , , 
    .成员 fThreshold, 小数型, , , 
    .成员 fRatio, 小数型, , , 
    .成员 fPredelay, 小数型, , , 

数据类型 BASS_DX8_DISTORTION, , 
    .成员 fGain, 小数型, , , 
    .成员 fEdge, 小数型, , , 
    .成员 fPostEQCenterFrequency, 小数型, , , 
    .成员 fPostEQBandwidth, 小数型, , , 
    .成员 fPreLowpassCutoff, 小数型, , , 

数据类型 BASS_DX8_ECHO, , 
    .成员 fWetDryMix, 小数型, , , 
    .成员 fFeedback, 小数型, , , 
    .成员 fLeftDelay, 小数型, , , 
    .成员 fRightDelay, 小数型, , , 
    .成员 lPanDelay, 逻辑型, , , 

数据类型 BASS_DX8_FLANGER, , 
    .成员 fWetDryMix, 小数型, , , 
    .成员 fDepth, 小数型, , , 
    .成员 fFeedback, 小数型, , , 
    .成员 fFrequency, 小数型, , , 
    .成员 lWaveform, 整数型, , , 0=triangle, 1=sine
    .成员 fDelay, 小数型, , , 
    .成员 lPhase, 整数型, , , BASS_DX8_PHASE_xxx

数据类型 BASS_DX8_GARGLE, , 
    .成员 dwRateHz, 整数型, , , Rate of modulation in hz
    .成员 dwWaveShape, 整数型, , , 0=triangle, 1=square

数据类型 BASS_DX8_I3DL2REVERB, , 
    .成员 lRoom, 整数型, , , [-10000, 0]      default: -1000 mB
    .成员 lRoomHF, 整数型, , , [-10000, 0]      default: 0 mB
    .成员 flRoomRolloffFactor, 小数型, , , [0.0, 10.0]      default: 0.0
    .成员 flDecayTime, 小数型, , , [0.1, 20.0]      default: 1.49s
    .成员 flDecayHFRatio, 小数型, , , [0.1, 2.0]       default: 0.83
    .成员 lReflections, 整数型, , , [-10000, 1000]   default: -2602 mB
    .成员 flReflectionsDelay, 小数型, , , [0.0, 0.3]       default: 0.007 s
    .成员 lReverb, 整数型, , , [-10000, 2000]   default: 200 mB
    .成员 flReverbDelay, 小数型, , , [0.0, 0.1]       default: 0.011 s
    .成员 flDiffusion, 小数型, , , [0.0, 100.0]     default: 100.0 %
    .成员 flDensity, 小数型, , , [0.0, 100.0]     default: 100.0 %
    .成员 flHFReference, 小数型, , , [20.0, 20000.0]  default: 5000.0 Hz

数据类型 BASS_DX8_PARAMEQ, , 
    .成员 fCenter, 小数型, , , 
    .成员 fBandwidth, 小数型, , , 
    .成员 fGain, 小数型, , , 

数据类型 BASS_DX8_REVERB, , 
    .成员 fInGain, 小数型, , , [-96.0,0.0]            default: 0.0 dB
    .成员 fReverbMix, 小数型, , , [-96.0,0.0]            default: 0.0 db
    .成员 fReverbTime, 小数型, , , [0.001,3000.0]         default: 1000.0 ms
    .成员 fHighFreqRTRatio, 小数型, , , [0.001,0.999]          default: 0.001

数据类型 BASS_FILEPROCS, , 
    .成员 close, 整数型, , , FILECLOSEPROC
    .成员 length, 整数型, , , FILELENPROC
    .成员 read, 整数型, , , FILEREADPROC
    .成员 seek, 整数型, , , FILESEEKPROC

数据类型 BASS_INFO, , 
    .成员 flags, 整数型, , , device capabilities (DSCAPS_xxx flags)
    .成员 hwsize, 整数型, , , size of total device hardware memory
    .成员 hwfree, 整数型, , , size of free device hardware memory
    .成员 freesam, 整数型, , , number of free sample slots in the hardware
    .成员 free3d, 整数型, , , number of free 3D sample slots in the hardware
    .成员 minrate, 整数型, , , min sample rate supported by the hardware
    .成员 maxrate, 整数型, , , max sample rate supported by the hardware
    .成员 eax, 逻辑型, , , device supports EAX? (always BASSFALSE if BASS_DEVICE_3D was not used)
    .成员 minbuf, 整数型, , , recommended minimum buffer length in ms (requires BASS_DEVICE_LATENCY)
    .成员 dsver, 整数型, , , DirectSound version
    .成员 latency, 整数型, , , delay (in ms) before start of playback (requires BASS_DEVICE_LATENCY)
    .成员 initflags, 整数型, , , BASS_Init "flags" parameter
    .成员 speakers, 整数型, , , number of speakers available
    .成员 freq, 整数型, , , current output rate (OSX only)

数据类型 BASS_PLUGINFORM, , 
    .成员 ctype, 整数型, , , channel type
    .成员 name, 文本型, , , format description
    .成员 exts, 文本型, , , file extension filter (*.ext1;*.ext2;etc...)

数据类型 BASS_PLUGININFO, , 
    .成员 version, 整数型, , , version (same form as BASS_GetVersion)
    .成员 formatc, 整数型, , , number of formats
    .成员 formats, 整数型, , , the array of formats

数据类型 BASS_RECORDINFO, , 
    .成员 flags, 整数型, , , device capabilities (DSCCAPS_xxx flags)
    .成员 formats, 整数型, , , supported standard formats (WAVE_FORMAT_xxx flags)
    .成员 inputs, 整数型, , , number of inputs
    .成员 singlein, 逻辑型, , , BASSTRUE = only 1 input can be set at a time
    .成员 freq, 整数型, , , current input rate (Vista/OSX only)

数据类型 BASS_SAMPLE, , 
    .成员 freq, 整数型, , , default playback rate
    .成员 volume, 小数型, , , default volume (0-100)
    .成员 pan, 小数型, , , default pan (-100=left, 0=middle, 100=right)
    .成员 flags, 整数型, , , BASS_SAMPLE_xxx flags
    .成员 length, 整数型, , , length (in samples, not bytes)
    .成员 max, 整数型, , , maximum simultaneous playbacks
    .成员 origres, 整数型, , , original resolution
    .成员 chans, 整数型, , , number of channels
    .成员 mingap, 整数型, , , minimum gap (ms) between creating channels
    .成员 mode3d, 整数型, , , BASS_3DMODE_xxx mode
    .成员 mindist, 小数型, , , minimum distance
    .成员 MAXDIST, 小数型, , , maximum distance
    .成员 iangle, 整数型, , , angle of inside projection cone
    .成员 oangle, 整数型, , , angle of outside projection cone
    .成员 outvol, 小数型, , , delta-volume outside the projection cone
    .成员 vam, 整数型, , , voice allocation/management flags (BASS_VAM_xxx)
    .成员 priority, 整数型, , , priority (0=lowest, &Hffffffff=highest)

数据类型 GUID, 公开, used with BASS_Init - use VarPtr(guid) in clsid parameter
    .成员 Data1, 整数型, , , 
    .成员 Data2, 短整数型, , , 
    .成员 Data3, 短整数型, , , 
    .成员 Data4, 字节型, , "8", 

数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 1
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 Gdip矩形I, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 右边, 整数型, , , 
    .成员 底边, 整数型, , , 

数据类型 PAINTSTRUCT, , 
    .成员 hdc, 整数型, , , 
    .成员 fErase, 整数型, , , 
    .成员 rcPaint, Gdip矩形I, , , 
    .成员 fRestore, 整数型, , , 
    .成员 fIncUpdate, 整数型, , , 
    .成员 rgbReserved, 字节型, , "32", 

数据类型 Gdip点, , 
    .成员 x, 小数型, , , 横坐标
    .成员 y, 小数型, , , 纵坐标

数据类型 Gdip点I, , 
    .成员 x, 整数型, , , 横坐标
    .成员 y, 整数型, , , 纵坐标

数据类型 Gdip矩形2, , 
    .成员 左边, 小数型, , , 
    .成员 顶边, 小数型, , , 
    .成员 宽度, 小数型, , , 
    .成员 高度, 小数型, , , 

数据类型 Gdip矩形2I, , 
    .成员 左边, 整数型, , , 
    .成员 顶边, 整数型, , , 
    .成员 宽度, 整数型, , , 
    .成员 高度, 整数型, , , 

数据类型 TAG_GENERAL, , 
    .成员 TITLE, 文本型, , , 
    .成员 ARTIST, 文本型, , , 
    .成员 ALBUM, 文本型, , , 

数据类型 歌词行, , 
    .成员 时间, 小数型, , , 秒
    .成员 歌词文本, 文本型, , , 

数据类型 坐标, , 
    .成员 X, 整数型, , , 
    .成员 Y, 整数型, , , 

数据类型 鼠标信息, , 用于鼠标钩子回调函数
    .成员 POINT, 坐标, , , 
    .成员 mouseData, 整数型, , , 
    .成员 flags, 整数型, , , 
    .成员 time, 整数型, , , 
    .成员 dwExtraInfo, 整数型, , , 

数据类型 歌曲信息, , 用于排序
    .成员 Title, 文本型, , , 
    .成员 Artist, 文本型, , , 
    .成员 Album, 文本型, , , 
    .成员 Filepath, 文本型, , , 
    .成员 Time, 文本型, , , 
    .成员 ShowedTitle, 文本型, , , 列表框显示的标题

数据类型 历史记录, , 
    .成员 全路径, 文本型, , , 
    .成员 项号, 整数型, , , 
    .成员 项号准确否, 逻辑型, , , 排序过，需要重新定位项号

数据类型 预约记录, , 
    .成员 全路径, 文本型, , , 
    .成员 项号, 整数型, , , 
    .成员 显示的标题, 文本型, , , 
    .成员 项号准确否, 逻辑型, , , 排序过，需要重新定位项号

数据类型 热键标识, , 
    .成员 标识号, 整数型, , , 
    .成员 命令, 整数型, , , 

数据类型 快捷键, , 
    .成员 功能键, 整数型, , , 
    .成员 键代码, 整数型, , , 
    .成员 命令, 整数型, , , 

数据类型 按键信息, , 
    .成员 代码, 整数型, , , 
    .成员 名称, 文本型, , , 

数据类型 空歌词行, , 
    .成员 行号, 整数型, , , 
    .成员 行数, 整数型, , , 

数据类型 颜色方案, 公开, 
    .成员 控件_背景渐变填充色上, 状态颜色, , , 
    .成员 控件_背景渐变填充色下, 状态颜色, , , 
    .成员 控件_背景色, 整数型, , , 
    .成员 控件_前景色, 整数型, , , 
    .成员 控件_标志颜色, 整数型, , , 单选框 选择框,滑块条
    .成员 窗口_边框色, 整数型, , , 
    .成员 标题栏_前景色, 整数型, , , 
    .成员 标题栏_背景渐变填充色上, 状态颜色, , , 
    .成员 标题栏_背景渐变填充色下, 状态颜色, , , 

数据类型 状态颜色, 公开, 
    .成员 默认, 整数型, , , 
    .成员 点燃, 整数型, , , 
    .成员 选中, 整数型, , , 
    .成员 禁止, 整数型, , , 

数据类型 打开文件名_, , OPENFILENAME
    .成员 结构大小, 整数型, , , 
    .成员 窗口句柄, 整数型, , , 
    .成员 实例句柄, 整数型, , , 
    .成员 过滤器, 字节集, , , 
    .成员 自定义过滤器, 字节集, , , 
    .成员 自定义过滤器最大长度, 整数型, , , 
    .成员 过滤器索引, 整数型, , , 
    .成员 文件名, 字节集, , , 
    .成员 文件名最大长度, 整数型, , , 
    .成员 文件标题, 字节集, , , 
    .成员 文件标题最大长度, 整数型, , , 
    .成员 初始目录, 文本型, , , 
    .成员 标题, 文本型, , , 
    .成员 标记, 整数型, , , 
    .成员 文件偏移量, 短整数型, , , 
    .成员 文件扩展名, 短整数型, , , 
    .成员 默认扩展名, 文本型, , , 
    .成员 自定义数据, 整数型, , , 
    .成员 回调函数地址, 整数型, , , 
    .成员 模板名, 文本型, , , 

数据类型 修改标签任务, , 
    .成员 文件名, 文本型, , , 
    .成员 Tag, 音乐文件标签, , , 
    .成员 MP3写入类型, MP3写入类型, , , 

数据类型 MP3V2标签, , 
    .成员 Title, 文本型, , , 
    .成员 Artist, 文本型, , , 
    .成员 Album, 文本型, , , 
    .成员 Year, 文本型, , , 
    .成员 Comment, 文本型, , , 
    .成员 TrackNumber, 文本型, , , 
    .成员 ContenttType, 文本型, , , 流派
    .成员 OriginalArtist, 文本型, , , 原创者
    .成员 Composer, 文本型, , , 作曲家
    .成员 Lyric, 文本型, , , 歌词UnsychronizedLyric
    .成员 URL, 文本型, , , 
    .成员 Copyright, 文本型, , , 版权Copyright message 

数据类型 WMA标签, , 
    .成员 Title, 文本型, , , 
    .成员 Artist, 文本型, , , 
    .成员 Copyright, 文本型, , , 
    .成员 Description, 文本型, , , 
    .成员 Album, 文本型, , , 
    .成员 Year, 文本型, , , 
    .成员 TrackNumber, 文本型, , , 
    .成员 Track, 文本型, , , 
    .成员 EncodedBy, 文本型, , , 
    .成员 Genre, 文本型, , , 
    .成员 Lyrics, 文本型, , , 
    .成员 URL, 文本型, , , 
    .成员 UserWebURL, 文本型, , , 
    .成员 Version, 文本型, , , 

数据类型 MP3V1标签, , 
    .成员 Title, 文本型, , , 
    .成员 Artist, 文本型, , , 
    .成员 Album, 文本型, , , 
    .成员 Year, 文本型, , , 
    .成员 ContenttType, 文本型, , , 
    .成员 TrackNumber, 文本型, , , 
    .成员 Comment, 文本型, , , 

数据类型 通用标签, , APE OGG
    .成员 名称, 文本型, , , 
    .成员 内容, 文本型, , , 

数据类型 音乐文件标签, , 在本程序中通用
    .成员 Title, 文本型, , , 
    .成员 Artist, 文本型, , , 
    .成员 Album, 文本型, , , 
    .成员 Year, 文本型, , , 
    .成员 ContenttType, 文本型, , , 
    .成员 Comment, 文本型, , , 
    .成员 TrackNumber, 文本型, , , 
    .成员 Lyric, 文本型, , , 

数据类型 MP3写入类型, , 
    .成员 标签类型, 整数型, , , 1+2+4
    .成员 V2编码号, 整数型, , , 0:无编码 1:UTF16 3:UTF8
    .成员 需要修改图片, 逻辑型, , , 
    .成员 图片, 字节集, , , 

数据类型 BASS插件信息, , 
    .成员 文件名, 文本型, , , 
    .成员 提供支持, 文本型, , , 

.全局变量 播放控制1, 播放控制类_MCI, , , 
.全局变量 播放控制2, 播放控制类_BASS, , , 
.全局变量 播放器设置, 播放器设置, , , 
.全局变量 token, 整数型, , , GDI+引擎
.全局变量 窗口顺序, 整数型, , "4", 
.全局变量 正在使用BASS引擎, 逻辑型, , , 
.全局变量 歌词内容, 字节集, , , 
.全局变量 歌词窗准许刷新, 逻辑型, , , 此变量身兼二职，第二个作用是让自动播放不弹出托盘气球
.全局变量 流派, 文本型, , "0", 
.全局变量 支持的扩展名, 文本型, , , 
.全局变量 已加载的插件, BASS插件信息, , "0", 

.DLL命令 GetShortPathName, 整数型, "kernel32", "GetShortPathNameA", , 
    .参数 lpszLongPath, 文本型, , 原文件名
    .参数 lpszShortPath, 文本型, 传址, 短文件名
    .参数 cchBuffer, 整数型, , 缓冲区长度

.DLL命令 mciGetErrorString, 整数型, "winmm.dll", "mciGetErrorStringA", , 
    .参数 error, 整数型, , 
    .参数 szBuffer, 文本型, 传址, 
    .参数 dwLength, 整数型, , 

.DLL命令 mciSendString, 整数型, "winmm.dll", "mciSendStringA", , 
    .参数 lpstrCommand, 文本型, , 命令
    .参数 lpstrReturnString, 文本型, 传址, 缓冲文本
    .参数 uReturnLength, 整数型, , 缓冲文本长度
    .参数 hwndCallback, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "User32.dll", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 取窗口位置, 空白型, "user32.dll", "GetWindowRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 区域, 矩形_, 传址, 接受数据

.DLL命令 GetWindowLong, 整数型, "User32.dll", "GetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "User32.dll", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 BitBlt, 整数型, "gdi32.dll", "BitBlt", 公开, 
    .参数 目标设备场景句柄, 整数型, , 
    .参数 置入横坐标, 整数型, , 对目标DC中目标矩形左上角x位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 置入纵坐标, 整数型, , 对目标DC中目标矩形左上角y位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 
    .参数 源设备场景句柄, 整数型, , 
    .参数 取出横坐标, 整数型, , 对源DC中目标矩形左上角x位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 取出纵坐标, 整数型, , 对源DC中目标矩形左上角y位置进行描述的那个点。用目标DC的逻辑坐标表示
    .参数 光栅运算, 整数型, , 详见常量表！光栅运算_*

.DLL命令 GetDC, 整数型, "user32.dll", "GetDC", 公开, 获取指定窗口的设备场景。返回指定窗口的设备场景句柄，出错则为0
    .参数 窗口句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC

.DLL命令 DeleteDC, 整数型, "gdi32.dll", "DeleteDC", 公开, 删除专用设备场景或信息场景，释放所有相关窗口资源。不要将它用于 取设备场景句柄_DLL 函数取回的设备场景
    .参数 设备场景句柄, 整数型, , 

.DLL命令 ReleaseDC, 整数型, "user32.dll", "ReleaseDC", 公开, 释放由调用 取设备场景句柄_DLL 函数获取的指定设备场景。返回执行成功为1，否则为0
    .参数 窗口句柄, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 设备场景句柄, 整数型, , 要释放的设备场景句柄

.DLL命令 CreateCompatibleDC, 整数型, "gdi32.dll", "CreateCompatibleDC", 公开, 创建一个与特定设备场景一致的内存设备场景。返回新设备场景句柄，若出错则为零
    .参数 设备场景句柄, 整数型, , 

.DLL命令 CreateCompatibleBitmap, 整数型, "Gdi32.dll", "CreateCompatibleBitmap", 公开, 
    .参数 hdc, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 SelectObject, 整数型, "gdi32.dll", "SelectObject", 公开, 每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。返回与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。
    .参数 设备场景句柄, 整数型, , 
    .参数 对象句柄, 整数型, , 

.DLL命令 DeleteObject, 整数型, "gdi32.dll", "DeleteObject", 公开, 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放。返回值非零表示成功，零表示失败
    .参数 对象句柄, 整数型, , 

.DLL命令 BASS_Apply3D, 空白型, "bass.dll", "BASS_Apply3D", 公开, 公开

.DLL命令 BASS_ChannelBytes2Seconds, 双精度小数型, "bass.dll", "BASS_ChannelBytes2Seconds", 公开, 
    .参数 handle, 整数型, , 
    .参数 pos, 长整数型, , 

.DLL命令 BASS_ChannelFlags, 整数型, "bass.dll", "BASS_ChannelFlags", 公开, 
    .参数 handle, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 mask, 整数型, , 

.DLL命令 BASS_ChannelGet3DAttributes, 逻辑型, "bass.dll", "BASS_ChannelGet3DAttributes", 公开, 
    .参数 handle, 整数型, , 
    .参数 mode, 整数型, 传址, 
    .参数 min, 小数型, 传址, 
    .参数 max, 小数型, 传址, 
    .参数 iangle, 整数型, 传址, 
    .参数 oangle, 整数型, 传址, 
    .参数 outvol, 小数型, 传址, 

.DLL命令 BASS_ChannelGet3DPosition, 逻辑型, "bass.dll", "BASS_ChannelGet3DPosition", 公开, 
    .参数 handle, 整数型, , 
    .参数 pos, 整数型, 传址, 
    .参数 orient, 整数型, 传址, 
    .参数 vel, 整数型, 传址, 

.DLL命令 BASS_ChannelGetAttribute, 逻辑型, "bass.dll", "BASS_ChannelGetAttribute", 公开, 
    .参数 handle, 整数型, , 
    .参数 attrib, 整数型, , 
    .参数 value, 小数型, 传址, 

.DLL命令 BASS_ChannelGetData, 整数型, "bass.dll", "BASS_ChannelGetData", 公开, 获取通道数据
    .参数 handle, 整数型, , 
    .参数 buffer, 小数型, 数组, 
    .参数 length, 整数型, , 

.DLL命令 BASS_ChannelGetDevice, 整数型, "bass.dll", "BASS_ChannelGetDevice", 公开, 公开
    .参数 handle, 整数型, , 

.DLL命令 BASS_ChannelGetInfo, 逻辑型, "bass.dll", "BASS_ChannelGetInfo", 公开, 获取通道信息
    .参数 handle, 整数型, , 
    .参数 info, BASS_CHANNELINFO, 传址, 

.DLL命令 BASS_ChannelGetLength, 长整数型, "bass.dll", "BASS_ChannelGetLength", 公开, 获取长度
    .参数 handle, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 BASS_ChannelGetLevel, 整数型, "bass.dll", "BASS_ChannelGetLevel", 公开, 获取音量
    .参数 handle, 整数型, , 

.DLL命令 BASS_ChannelGetPosition, 长整数型, "bass.dll", "BASS_ChannelGetPosition", 公开, 获取位置
    .参数 handle, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 BASS_ChannelGetTags, 文本型, "bass.dll", "BASS_ChannelGetTags", 公开, 获取Tag
    .参数 handle, 整数型, , 
    .参数 tags, 整数型, , 

.DLL命令 BASS_ChannelIsActive, 整数型, "bass.dll", "BASS_ChannelIsActive", 公开, 获取状态
    .参数 handle, 整数型, , 

.DLL命令 BASS_ChannelIsSliding, 逻辑型, "bass.dll", "BASS_ChannelIsSliding", 公开, 
    .参数 handle, 整数型, , 
    .参数 attrib, 整数型, , 

.DLL命令 BASS_ChannelLock, 逻辑型, "bass.dll", "BASS_ChannelLock", 公开, 锁定通道
    .参数 handle, 整数型, , 
    .参数 lock, 逻辑型, , 

.DLL命令 BASS_ChannelPause, 逻辑型, "bass.dll", "BASS_ChannelPause", 公开, 暂停
    .参数 handle, 整数型, , 

.DLL命令 BASS_ChannelPlay, 逻辑型, "bass.dll", "BASS_ChannelPlay", 公开, 播放
    .参数 handle, 整数型, , 
    .参数 restart, 逻辑型, , 

.DLL命令 BASS_ChannelRemoveDSP, 逻辑型, "bass.dll", "BASS_ChannelRemoveDSP", 公开, 移除DSP
    .参数 handle, 整数型, , 
    .参数 dsp, 整数型, , 

.DLL命令 BASS_ChannelRemoveFX, 逻辑型, "bass.dll", "BASS_ChannelRemoveFX", 公开, 移除FX效果
    .参数 handle, 整数型, , 
    .参数 fx, 整数型, , 

.DLL命令 BASS_ChannelRemoveLink, 逻辑型, "bass.dll", "BASS_ChannelRemoveLink", 公开, 移除两个MOD的连接
    .参数 handle, 整数型, , 
    .参数 chan, 整数型, , 

.DLL命令 BASS_ChannelRemoveSync, 逻辑型, "bass.dll", "BASS_ChannelRemoveSync", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 sync, 整数型, , 

.DLL命令 BASS_ChannelSeconds2Bytes, 长整数型, "bass.dll", "BASS_ChannelSeconds2Bytes", 公开, 转换秒到字节
    .参数 handle, 整数型, , 
    .参数 pos, 双精度小数型, , 

.DLL命令 BASS_ChannelSet3DAttributes, 逻辑型, "bass.dll", "BASS_ChannelSet3DAttributes", 公开, 
    .参数 handle, 整数型, , 
    .参数 mode, 整数型, , 
    .参数 min, 小数型, , 
    .参数 max, 小数型, , 
    .参数 iangle, 整数型, , 
    .参数 oangle, 整数型, , 
    .参数 outvol, 小数型, , 

.DLL命令 BASS_ChannelSet3DPosition, 逻辑型, "bass.dll", "BASS_ChannelSet3DPosition", 公开, 
    .参数 handle, 整数型, , 
    .参数 pos, BASS_3DVECTOR, 传址, 
    .参数 orient, BASS_3DVECTOR, 传址, 
    .参数 vel, BASS_3DVECTOR, 传址, 

.DLL命令 BASS_ChannelSetAttribute, 逻辑型, "bass.dll", "BASS_ChannelSetAttribute", 公开, 设置通道属性
    .参数 handle, 整数型, , 
    .参数 attrib, 整数型, , 
    .参数 value, 小数型, , 

.DLL命令 BASS_ChannelSetDevice, 逻辑型, "bass.dll", "BASS_ChannelSetDevice", 公开, 设置通道设备
    .参数 handle, 整数型, , 
    .参数 device, 整数型, , 

.DLL命令 BASS_ChannelSetDSP, 整数型, "bass.dll", "BASS_ChannelSetDSP", 公开, 设置通道DSP
    .参数 handle, 整数型, , 
    .参数 proc, 整数型, , DSPPROC
    .参数 user, 整数型, , 
    .参数 priority, 整数型, , 

.DLL命令 BASS_ChannelSetFX, 整数型, "bass.dll", "BASS_ChannelSetFX", 公开, 设置通道FX效果
    .参数 handle, 整数型, , 
    .参数 type_, 整数型, , 
    .参数 priority, 整数型, , 

.DLL命令 BASS_ChannelSetLink, 逻辑型, "bass.dll", "BASS_ChannelSetLink", 公开, 设置连接两通道
    .参数 handle, 整数型, , 
    .参数 chan, 整数型, , 

.DLL命令 BASS_ChannelSetPosition, 逻辑型, "bass.dll", "BASS_ChannelSetPosition", 公开, 设置播放点
    .参数 handle, 整数型, , 
    .参数 pos, 长整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 BASS_ChannelSetSync, 整数型, "bass.dll", "BASS_ChannelSetSync", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 type, 整数型, , 
    .参数 param, 长整数型, , 
    .参数 proc, 子程序指针, , SYNCPROC
    .参数 user, 整数型, , 

.DLL命令 BASS_ChannelSlideAttribute, 逻辑型, "bass.dll", "BASS_ChannelSlideAttribute", 公开, 更新通道属性
    .参数 handle, 整数型, , 
    .参数 attrib, 整数型, , 
    .参数 value, 小数型, , 
    .参数 time, 整数型, , 

.DLL命令 BASS_ChannelStop, 逻辑型, "bass.dll", "BASS_ChannelStop", 公开, 停止
    .参数 handle, 整数型, , 

.DLL命令 BASS_ChannelUpdate, 逻辑型, "bass.dll", "BASS_ChannelUpdate", 公开, 更新
    .参数 handle, 整数型, , 
    .参数 length, 整数型, , 

.DLL命令 BASS_ErrorGetCode, 整数型, "bass.dll", "BASS_ErrorGetCode", 公开, 公开

.DLL命令 BASS_Free, 逻辑型, "bass.dll", "BASS_Free", 公开, 释放Bass

.DLL命令 BASS_FXGetParameters_DX8_PARAMEQ, 逻辑型, "bass.dll", "BASS_FXGetParameters", 公开, 获取效果器参数
    .参数 handle, 整数型, , 
    .参数 par, BASS_DX8_PARAMEQ, 传址, 

.DLL命令 BASS_FXReset, 逻辑型, "bass.dll", "BASS_FXReset", 公开, 重置效果器
    .参数 handle, 整数型, , 

.DLL命令 BASS_FXSetParameters_DX8_PARAMEQ, 逻辑型, "bass.dll", "BASS_FXSetParameters", 公开, 设置效果参数
    .参数 handle, 整数型, , 
    .参数 par, BASS_DX8_PARAMEQ, , 

.DLL命令 BASS_Get3DFactors, 逻辑型, "bass.dll", "BASS_Get3DFactors", 公开, 公开
    .参数 distf, 小数型, 传址, 
    .参数 rollf, 小数型, 传址, 
    .参数 doppf, 小数型, 传址, 

.DLL命令 BASS_Get3DPosition, 逻辑型, "bass.dll", "BASS_Get3DPosition", 公开, 公开
    .参数 pos, BASS_3DVECTOR, 传址, 
    .参数 vel, BASS_3DVECTOR, 传址, 
    .参数 front, BASS_3DVECTOR, 传址, 
    .参数 top, BASS_3DVECTOR, 传址, 

.DLL命令 BASS_GetConfig, 整数型, "bass.dll", "BASS_GetConfig", 公开, 获取配置
    .参数 option, 整数型, , 

.DLL命令 BASS_GetConfigPtr, 整数型, "bass.dll", "BASS_GetConfigPtr", 公开, 获取配置指针
    .参数 option, 整数型, , 

.DLL命令 BASS_GetCPU, 小数型, "bass.dll", "BASS_GetCPU", 公开, CPU使用率

.DLL命令 BASS_GetDevice, 整数型, "bass.dll", "BASS_GetDevice", 公开, 公开

.DLL命令 BASS_GetDeviceInfo, 逻辑型, "bass.dll", "BASS_GetDeviceInfo", 公开, 获取设备信息
    .参数 device, 整数型, , 
    .参数 info, BASS_DEVICEINFO, 传址, BASS_DEVICEINFO

.DLL命令 BASS_GetDSoundObject, 整数型, "bass.dll", "BASS_GetDSoundObject", 公开, 公开
    .参数 object, 整数型, , 

.DLL命令 BASS_GetEAXParameters, 逻辑型, "bass.dll", "BASS_GetEAXParameters", 公开, 获取EAX参数
    .参数 env, 整数型, 传址, 
    .参数 vol, 小数型, 传址, 
    .参数 decay, 小数型, 传址, 
    .参数 damp, 小数型, 传址, 

.DLL命令 BASS_GetInfo, 逻辑型, "bass.dll", "BASS_GetInfo", 公开, 获取信息
    .参数 info, BASS_INFO, 传址, BASS_INFO

.DLL命令 BASS_GetVersion, 整数型, "bass.dll", "BASS_GetVersion", 公开, 公开

.DLL命令 BASS_GetVolume, 小数型, "bass.dll", "BASS_GetVolume", 公开, 获取音量

.DLL命令 BASS_Init, 逻辑型, "bass.dll", "BASS_Init", 公开, 初始化
    .参数 device, 整数型, , 设备，-1:默认
    .参数 freq, 整数型, , 采样:44100
    .参数 flags, 整数型, , 
    .参数 win, 整数型, , 窗口句柄
    .参数 clsid, 整数型, , 

.DLL命令 BASS_MusicFree, 逻辑型, "bass.dll", "BASS_MusicFree", 公开, 释放MOD
    .参数 handle, 整数型, , 

.DLL命令 BASS_MusicLoad, 整数型, "bass.dll", "BASS_MusicLoad", 公开, 加载MOD
    .参数 mem, 逻辑型, , 
    .参数 file, 文本型, , Filename (mem = FALSE) or a memory location (mem = TRUE).
    .参数 offset, 长整数型, , 
    .参数 length, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 freq, 整数型, , 

.DLL命令 BASS_Pause, 逻辑型, "bass.dll", "BASS_Pause", 公开, 暂停

.DLL命令 BASS_PluginFree, 逻辑型, "bass.dll", "BASS_PluginFree", 公开, 释放插件
    .参数 handle, 整数型, , 

.DLL命令 BASS_PluginGetInfo, 整数型, "bass.dll", "BASS_PluginGetInfo", 公开, 获取插件信息, BASS_PLUGININFO
    .参数 handle, 整数型, , 

.DLL命令 BASS_PluginLoad, 整数型, "bass.dll", "BASS_PluginLoad", 公开, 加载插件
    .参数 filename, 文本型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_RecordFree, 逻辑型, "bass.dll", "BASS_RecordFree", 公开, 释放录音

.DLL命令 BASS_RecordGetDevice, 整数型, "bass.dll", "BASS_RecordGetDevice", 公开, 获取录音设备

.DLL命令 BASS_RecordGetDeviceInfo, 逻辑型, "bass.dll", "BASS_RecordGetDeviceInfo", 公开, 获取录音设备信息
    .参数 device, 整数型, , 
    .参数 info, BASS_DEVICEINFO, 传址, BASS_DEVICEINFO

.DLL命令 BASS_RecordGetInfo, 逻辑型, "bass.dll", "BASS_RecordGetInfo", 公开, 获取录音信息
    .参数 info, BASS_RECORDINFO, 传址, BASS_RECORDINFO

.DLL命令 BASS_RecordGetInput, 整数型, "bass.dll", "BASS_RecordGetInput", 公开, 获取录音输入设备
    .参数 input, 整数型, , 
    .参数 volume, 小数型, 传址, 

.DLL命令 BASS_RecordGetInputName, 文本型, "bass.dll", "BASS_RecordGetInputName", 公开, 获取录音输入名称
    .参数 input, 整数型, , 

.DLL命令 BASS_RecordInit, 逻辑型, "bass.dll", "BASS_RecordInit", 公开, 初始化录音
    .参数 device, 整数型, , 

.DLL命令 BASS_RecordSetDevice, 逻辑型, "bass.dll", "BASS_RecordSetDevice", 公开, 设置录音设备
    .参数 device, 整数型, , 

.DLL命令 BASS_RecordSetInput, 逻辑型, "bass.dll", "BASS_RecordSetInput", 公开, 设置录音输入设备
    .参数 input, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 volume, 小数型, , 

.DLL命令 BASS_RecordStart, 整数型, "bass.dll", "BASS_RecordStart", 公开, 开始录音
    .参数 freq, 整数型, , 
    .参数 chans, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 proc, 子程序指针, , RECORDPROC
    .参数 user, 整数型, , 

.DLL命令 BASS_SampleCreate, 整数型, "bass.dll", "BASS_SampleCreate", 公开, 新建样本
    .参数 length, 整数型, , 
    .参数 freq, 整数型, , 
    .参数 chans, 整数型, , 
    .参数 max, 整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_SampleFree, 逻辑型, "bass.dll", "BASS_SampleFree", 公开, 释放样本
    .参数 handle, 整数型, , 

.DLL命令 BASS_SampleGetChannel, 整数型, "bass.dll", "BASS_SampleGetChannel", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 onlynew, 逻辑型, , 

.DLL命令 BASS_SampleGetChannels, 整数型, "bass.dll", "BASS_SampleGetChannels", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 CHANNELS, 整数型, 数组, 

.DLL命令 BASS_SampleGetData, 逻辑型, "bass.dll", "BASS_SampleGetData", 公开, 获取样本数据
    .参数 handle, 整数型, , 
    .参数 buffer, 字节集, , The buffer must be big enough to receive the sample's data, the size of which can be retrieved via BASS_SampleGetInfo.

.DLL命令 BASS_SampleGetInfo, 逻辑型, "bass.dll", "BASS_SampleGetInfo", 公开, 获取样本信息
    .参数 handle, 整数型, , 
    .参数 info, BASS_SAMPLE, 传址, BASS_SAMPLE

.DLL命令 BASS_SampleLoad, 整数型, "bass.dll", "BASS_SampleLoad", 公开, 公开
    .参数 mem, 逻辑型, , 
    .参数 file, 文本型, , 
    .参数 offset, 长整数型, , 
    .参数 length, 整数型, , 
    .参数 max, 整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_SampleSetData, 逻辑型, "bass.dll", "BASS_SampleSetData", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 buffer, 字节集, , The required length and format of the data can be retrieved via BASS_SampleGetInfo.

.DLL命令 BASS_SampleSetInfo, 逻辑型, "bass.dll", "BASS_SampleSetInfo", 公开, 设置样本信息
    .参数 handle, 整数型, , 
    .参数 info, BASS_SAMPLE, 传址, BASS_SAMPLE

.DLL命令 BASS_SampleStop, 逻辑型, "bass.dll", "BASS_SampleStop", 公开, 公开
    .参数 handle, 整数型, , 

.DLL命令 BASS_Set3DFactors, 逻辑型, "bass.dll", "BASS_Set3DFactors", 公开, 公开
    .参数 distf, 小数型, , 
    .参数 rollf, 小数型, , 
    .参数 doppf, 小数型, , 

.DLL命令 BASS_Set3DPosition, 逻辑型, "bass.dll", "BASS_Set3DPosition", 公开, 设置3D点
    .参数 pos, BASS_3DVECTOR, 传址, 
    .参数 vel, BASS_3DVECTOR, 传址, 
    .参数 front, BASS_3DVECTOR, 传址, 
    .参数 top, BASS_3DVECTOR, 传址, 

.DLL命令 BASS_SetConfig, 逻辑型, "bass.dll", "BASS_SetConfig", 公开, 设置配置
    .参数 opt, 整数型, , 
    .参数 value, 整数型, , 

.DLL命令 BASS_SetConfigPtr, 逻辑型, "bass.dll", "BASS_SetConfigPtr", 公开, 公开
    .参数 opt, 整数型, , 
    .参数 value, 文本型, , 

.DLL命令 BASS_SetDevice, 逻辑型, "bass.dll", "BASS_SetDevice", 公开, 设置设备
    .参数 device, 整数型, , 

.DLL命令 BASS_SetEAXParameters, 逻辑型, "bass.dll", "BASS_SetEAXParameters", 公开, 设置EAX参数
    .参数 env, 整数型, , 
    .参数 vol, 小数型, , 
    .参数 decay, 小数型, , 
    .参数 damp, 小数型, , 

.DLL命令 BASS_SetVolume, 逻辑型, "bass.dll", "BASS_SetVolume", 公开, 设置音量
    .参数 volume, 小数型, , 

.DLL命令 BASS_Start, 逻辑型, "bass.dll", "BASS_Start", 公开, 开始

.DLL命令 BASS_Stop, 逻辑型, "bass.dll", "BASS_Stop", 公开, 公开

.DLL命令 BASS_StreamCreate, 整数型, "bass.dll", "BASS_StreamCreate", 公开, 新建流
    .参数 freq, 整数型, , 
    .参数 chans, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 proc, 整数型, , STREAMPROC
    .参数 user, 整数型, , 

.DLL命令 BASS_StreamCreateFile, 整数型, "bass.dll", "BASS_StreamCreateFile", 公开, 新建文件流
    .参数 mem, 逻辑型, , 
    .参数 file, 文本型, , 
    .参数 offset, 长整数型, , 
    .参数 length, 长整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_StreamCreateFile2, 整数型, "bass.dll", "BASS_StreamCreateFile", 公开, 新建文件流
    .参数 mem, 逻辑型, , 
    .参数 file, 整数型, , 
    .参数 offset, 长整数型, , 
    .参数 length, 长整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_StreamCreateFile3, 整数型, "bass.dll", "BASS_StreamCreateFile", 公开, 新建文件流
    .参数 mem, 逻辑型, , 
    .参数 file, 字节集, , 
    .参数 offset, 长整数型, , 
    .参数 length, 长整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 BASS_StreamCreateFileUser, 整数型, "bass.dll", "BASS_StreamCreateFileUser", 公开, 新建文件流，使用回调函数
    .参数 system, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 procs, 子程序指针, , BASS_FILEPROCS
    .参数 user, 整数型, , 

.DLL命令 BASS_StreamCreateURL, 整数型, "bass.dll", "BASS_StreamCreateURL", 公开, 新建URL流
    .参数 url, 文本型, , 
    .参数 offset, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 proc, 子程序指针, , DOWNLOADPROC
    .参数 user, 整数型, , 

.DLL命令 BASS_StreamFree, 逻辑型, "bass.dll", "BASS_StreamFree", 公开, 释放流
    .参数 handle, 整数型, , 

.DLL命令 BASS_StreamGetFilePosition, 长整数型, "bass.dll", "BASS_StreamGetFilePosition", 公开, 获取流播放点
    .参数 handle, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 BASS_StreamPutData, 整数型, "bass.dll", "BASS_StreamPutData", 公开, 
    .参数 handle, 整数型, , 
    .参数 buffer, 整数型, , 
    .参数 length, 整数型, , 

.DLL命令 BASS_StreamPutFileData, 整数型, "bass.dll", "BASS_StreamPutFileData", 公开, 公开
    .参数 handle, 整数型, , 
    .参数 buffer, 整数型, , 
    .参数 length, 整数型, , 

.DLL命令 BASS_Update, 逻辑型, "bass.dll", "BASS_Update", 公开, 更新
    .参数 legnth, 整数型, , 

.DLL命令 取错误信息_, 整数型, "kernel32", "GetLastError", , 

.DLL命令 合并区域_, 整数型, "gdi32.dll", "CombineRgn", , 
    .参数 新区域句柄, 整数型, , hDestRgn，包含组合结果的区域句柄
    .参数 源区域1, 整数型, , hSrcRgn1，源区域1
    .参数 源区域2, 整数型, , hSrcRgn2，源区域2
    .参数 组合方式, 整数型, , nCombineMode，组合方式

.DLL命令 取窗口矩形_, 整数型, "user32", "GetWindowRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 矩形区域, Gdip矩形I, 传址, 

.DLL命令 GlobalAlloc, 整数型, "", "GlobalAlloc", , 
    .参数 wFlags, 整数型, , 
    .参数 dwBytes, 整数型, , 

.DLL命令 GlobalSize, 整数型, "", "GlobalSize", , 
    .参数 hMem, 空白型, , 

.DLL命令 GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream", , 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GlobalLock, 整数型, "", "GlobalLock", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "", "GlobalUnlock", , 
    .参数 hMem, 整数型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 GdipAlloc, 整数型, "gdiplus", "GdipAlloc", , 
    .参数 size, 整数型, , 

.DLL命令 GdipFree, 空白型, "gdiplus", "GdipFree", , 
    .参数 ptr, 整数型, , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 代码页, 整数型, , cp_开头常量
    .参数 标志, 整数型, , 512
    .参数 宽字符文本, 字节集, , 字节集
    .参数 宽字符文本长度, 整数型, , 
    .参数 双字节文本, 文本型, , 字节集
    .参数 双字节文本长度, 整数型, , 
    .参数 默认文本, 整数型, , 
    .参数 使用默认文本, 整数型, , 逻辑

.DLL命令 MultiByteToWideChar, 整数型, "kernel32", "MultiByteToWideChar", , 将多媒体字符串映像为通配字符串
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 文本型, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 整数型, "Ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 GlobalFree, 整数型, "", "GlobalFree", , 
    .参数 hMem, 整数型, , 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 GdipDeletePen, 整数型, "GdiPlus.dll", "GdipDeletePen", , 
    .参数 pen, 整数型, , 

.DLL命令 GdipCreatePen1, 整数型, "gdiplus", "GdipCreatePen1", , 
    .参数 color, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 GdipSetPenWidth, 整数型, "gdiplus", "GdipSetPenWidth", , 
    .参数 pen, 整数型, , 
    .参数 Width, 小数型, , 

.DLL命令 GdipCreateFontFamilyFromName, 整数型, "GdiPlus.dll", "GdipCreateFontFamilyFromName", , 
    .参数 name, 字节集, , 
    .参数 fontCollection, 整数型, , 
    .参数 FontFamily, 整数型, 传址, 

.DLL命令 GdipDeleteFontFamily, 整数型, "GdiPlus.dll", "GdipDeleteFontFamily", , 
    .参数 FontFamily, 整数型, , 

.DLL命令 GdipCreateRegionRect, 整数型, "gdiplus", "GdipCreateRegionRect", , 
    .参数 rect, Gdip矩形I, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipDeleteBrush, 整数型, "GdiPlus.dll", "GdipDeleteBrush", , 
    .参数 brush, 整数型, , 

.DLL命令 GdipCreateSolidFill, 整数型, "GdiPlus.dll", "GdipCreateSolidFill", , 
    .参数 color, 整数型, , 
    .参数 brush, 整数型, 传址, 

.DLL命令 GdipDeleteRegion, 整数型, "gdiplus", "GdipDeleteRegion", , 
    .参数 region, 整数型, , 

.DLL命令 GdipCreateRegion, 整数型, "gdiplus", "GdipCreateRegion", , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionHrgn, 整数型, "gdiplus", "GdipCreateRegionHrgn", , 
    .参数 hRgn, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipDeleteFont, 整数型, "gdiplus", "GdipDeleteFont", , 
    .参数 curFont, 整数型, , 

.DLL命令 GdipCreateFont, 整数型, "gdiplus", "GdipCreateFont", , 
    .参数 fontFamily, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 style, 整数型, , 
    .参数 unit, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 SetWindowLongA, 整数型, "", "SetWindowLongA", , 
    .参数 窗口句柄, 空白型, , 
    .参数 信息值, 空白型, , 
    .参数 新值, 空白型, , 

.DLL命令 呼叫窗口函数地址_, 整数型, "user32.dll", "CallWindowProcA", , 
    .参数 前一窗口函数地址, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息值, 整数型, , 
    .参数 附加参数1, 整数型, , 
    .参数 附加参数2, 整数型, , 

.DLL命令 取设备场景_, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 窗口的句柄, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 创建设备位图_, 整数型, "gdi32", "CreateCompatibleBitmap", , 
    .参数 设备场景句柄, 整数型, , 
    .参数 宽度, 整数型, , 
    .参数 高度, 整数型, , 

.DLL命令 创建内存场景_, 整数型, "Gdi32", "CreateCompatibleDC", , 
    .参数 设备场景句柄, 整数型, , 

.DLL命令 SetBkColor, 整数型, "gdi32.dll", "SetBkColor", , 
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 RGB颜色值, 整数型, , crColor，新背景颜色的RGB颜色值

.DLL命令 GdipCreateFromHDC, 整数型, "GdiPlus.dll", "GdipCreateFromHDC", , 
    .参数 hdc, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 设置背景模式_, 整数型, "gdi32", "SetBkMode", , SetBkMode，Long，前一个背景模式的值
    .参数 设备场景句柄, 整数型, , hdc，设备场景的句柄
    .参数 方式, 整数型, , nBkMode，下述常数之一：OPAQUE用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙TRANSPARENT透明处理，即不作上述填充

.DLL命令 选入设备场景_, 整数型, "gdi32.dll", "SelectObject", , SelectObject
    .参数 场景句柄, 整数型, , hdc
    .参数 对象句柄, 整数型, , hobject

.DLL命令 GdipGraphicsClear, 整数型, "gdiplus", "GdipGraphicsClear", , 
    .参数 graphics, 整数型, , 
    .参数 lColor, 整数型, , 

.DLL命令 GdipDrawLine, 整数型, "gdiplus", "GdipDrawLine", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 

.DLL命令 GdipDrawLineI, 整数型, "gdiplus", "GdipDrawLineI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 

.DLL命令 BeginPaint, 整数型, "user32", "BeginPaint", , 准备一个画图窗　
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 EndPaint, 整数型, "user32", "EndPaint", , 在指定窗口中标记图画结尾标志　
    .参数 hwnd, 整数型, , 
    .参数 lpPaint, PAINTSTRUCT, , 

.DLL命令 复制场景位图_, 整数型, "gdi32.dll", "BitBlt", , 
    .参数 目标设备场景, 整数型, , hDestDC,目标设备场景
    .参数 目标横坐标, 整数型, , x,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 目标纵坐标, 整数型, , y,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 传输图像宽度, 整数型, , nWidth,欲传输图象的宽度
    .参数 传输图像高度, 整数型, , nHeight,欲传输图象的高度
    .参数 源设备场景, 整数型, , hSrcDC,源设备场景。如光栅运算未指定源，则应设为0
    .参数 源横坐标, 整数型, , xSrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 源纵坐标, 整数型, , ySrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 光栅运算方式, 整数型, , dwRop,传输过程要执行的光栅运算

.DLL命令 GdipDrawLines, 整数型, "gdiplus", "GdipDrawLines", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawLinesI, 整数型, "gdiplus", "GdipDrawLinesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawArc, 整数型, "gdiplus", "GdipDrawArc", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawArcI, 整数型, "gdiplus", "GdipDrawArcI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawBezier, 整数型, "gdiplus", "GdipDrawBezier", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 
    .参数 x3, 小数型, , 
    .参数 y3, 小数型, , 
    .参数 x4, 小数型, , 
    .参数 y4, 小数型, , 

.DLL命令 GdipDrawBezierI, 整数型, "gdiplus", "GdipDrawBezierI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 GdipDrawBeziers, 整数型, "gdiplus", "GdipDrawBeziers", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawBeziersI, 整数型, "gdiplus", "GdipDrawBeziersI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectangle, 整数型, "GdiPlus.dll", "GdipDrawRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 width, 小数型, , 
    .参数 height, 小数型, , 

.DLL命令 GdipDrawRectangleI, 整数型, "GdiPlus.dll", "GdipDrawRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 GdipDrawRectangles, 整数型, "gdiplus", "GdipDrawRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, Gdip矩形2, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectanglesI, 整数型, "gdiplus", "GdipDrawRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, Gdip矩形2I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawEllipse, 整数型, "gdiplus", "GdipDrawEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipDrawEllipseI, 整数型, "gdiplus", "GdipDrawEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipDrawPie, 整数型, "gdiplus", "GdipDrawPie", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPieI, 整数型, "gdiplus", "GdipDrawPieI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPolygon, 整数型, "gdiplus", "GdipDrawPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawPolygonI, 整数型, "gdiplus", "GdipDrawPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawCurve, 整数型, "gdiplus", "GdipDrawCurve", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawCurveI, 整数型, "gdiplus", "GdipDrawCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawCurve2, 整数型, "gdiplus", "GdipDrawCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve2I, 整数型, "gdiplus", "GdipDrawCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawClosedCurve2, 整数型, "gdiplus", "GdipDrawClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawClosedCurve2I, 整数型, "gdiplus", "GdipDrawClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipFillRectangle, 整数型, "gdiplus", "GdipFillRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillRectangleI, 整数型, "gdiplus", "GdipFillRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillRectangles, 整数型, "gdiplus", "GdipFillRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, Gdip矩形2, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillRectanglesI, 整数型, "gdiplus", "GdipFillRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, Gdip矩形2I, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillPolygon, 整数型, "gdiplus", "GdipFillPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillPolygonI, 整数型, "gdiplus", "GdipFillPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillEllipse, 整数型, "gdiplus", "GdipFillEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillEllipseI, 整数型, "gdiplus", "GdipFillEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillPie, 整数型, "gdiplus", "GdipFillPie", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillPieI, 整数型, "gdiplus", "GdipFillPieI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillClosedCurve2, 整数型, "gdiplus", "GdipFillClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, Gdip点, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillClosedCurve2I, 整数型, "gdiplus", "GdipFillClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, Gdip点I, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipDrawString, 整数型, "gdiplus", "GdipDrawString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, Gdip矩形2, , 
    .参数 StringFormat, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 lstrlenw, 整数型, "kernel32.dll", "lstrlenW", , 取宽文本长度
    .参数 dqcs, 字节集, , 文本指针

.DLL命令 GdipDrawImage, 整数型, "gdiplus", "GdipDrawImage", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 

.DLL命令 GdipDrawImageRect, 整数型, "gdiplus", "GdipDrawImageRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 删除设备场景_, 整数型, "gdi32.dll", "DeleteDC", , 
    .参数 设备场景句柄, 整数型, , hdc，将要删除的设备场景

.DLL命令 删除对象_, 整数型, "gdi32.dll", "DeleteObject", , DeleteObject
    .参数 对象句柄, 整数型, , hObject,一个GDI对象的句柄

.DLL命令 GdipCreateLineBrushFromRect, 整数型, "gdiplus", "GdipCreateLineBrushFromRect", , 
    .参数 rect, Gdip矩形2, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 Mode, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateHatchBrush, 整数型, "gdiplus", "GdipCreateHatchBrush", , 
    .参数 style, 整数型, , 
    .参数 forecolr, 整数型, , 
    .参数 backcolr, 整数型, , 
    .参数 Brush, 整数型, 传址, 

.DLL命令 GdipDeleteGraphics, 整数型, "GdiPlus.dll", "GdipDeleteGraphics", , 
    .参数 graphics, 整数型, , 

.DLL命令 释放设备场景_, 整数型, "user32", "ReleaseDC", , ReleaseDC
    .参数 窗口句柄, 整数型, , hwnd，要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc，要释放的设备场景句柄

.DLL命令 移动窗口_, 整数型, "user32.dll", "MoveWindow", , 
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 复制内存_指针到鼠标信息, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 鼠标信息, , 
    .参数 Source, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 CallNextHookEx, 整数型, "", "CallNextHookEx", , 
    .参数 hHook, 整数型, , 
    .参数 icode, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 UnhookWindowsHookEx, 整数型, "", "UnhookWindowsHookEx", , 
    .参数 hHook, 整数型, , 

.DLL命令 GetModuleHandleA, 整数型, "", "GetModuleHandleA", , 
    .参数 lpModuleName, 整数型, , 

.DLL命令 SetWindowsHookExA, 整数型, "", "SetWindowsHookExA", , 
    .参数 ihook, 整数型, , 
    .参数 lpfunc, 子程序指针, , 
    .参数 hin, 整数型, , 
    .参数 threadid, 整数型, , 

.DLL命令 设置窗口透明, 空白型, "", "SetLayeredWindowAttributes", , 
    .参数 窗口句柄, 整数型, , 
    .参数 透明颜色, 整数型, , 
    .参数 透明度, 整数型, , 
    .参数 方式, 整数型, , 1为颜色透明 2为透明度设置

.DLL命令 设置窗口标题_, 整数型, "user32.dll", "SetWindowTextA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 

.DLL命令 发送消息, 整数型, "", "SendMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 信息值, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 投递消息, 整数型, "", "PostMessageA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 信息值, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 取窗口标题长度, 整数型, "User32.dll", "GetWindowTextLengthA", , 
    .参数 句柄, 整数型, , 

.DLL命令 给出窗口标题, 整数型, "User32.dll", "GetWindowTextA", , 窗体标题
    .参数 窗口句柄, 整数型, , 
    .参数 lpString, 文本型, , 
    .参数 cch, 整数型, , 

.DLL命令 GdipMeasureString, 整数型, "GdiPlus.dll", "GdipMeasureString", 公开, 
    .参数 graphics, 整数型, , 
    .参数 string, 字节集, , 
    .参数 length, 整数型, , 
    .参数 font, 整数型, , 
    .参数 layoutRect, Gdip矩形2, , 
    .参数 stringFormat, 整数型, , 
    .参数 boundingBox, Gdip矩形2, , 
    .参数 codepointsFitted, 整数型, 传址, 
    .参数 linesFilled, 整数型, 传址, 

.DLL命令 GdipCreateStringFormat, 整数型, "gdiplus", "GdipCreateStringFormat", , 
    .参数 formatAttributes, 整数型, , 
    .参数 language, 短整数型, , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 SetProcessWorkingSetSize, 整数型, "", "", , 
    .参数 HANDLE, 整数型, , 
    .参数 dwMinimumWorkingSetSize, 整数型, , 
    .参数 dwMaximumWorkingSetSize, 整数型, , 

.DLL命令 SetClassLong, 整数型, "user32", "SetClassLongA", , , 为窗口类设置一个Long变量条目  由nIndex指定的的类信息的前一个值。零表示出错。会设置GetLastError
    .参数 hwnd, 整数型, , 欲为其设置类信息的那个窗口的句柄
    .参数 nIndex, 整数型, , 参考GetClassLong函数的nIndex参数说明
    .参数 dwNewLong, 整数型, , 类信息的新值，具体取决于nIndex;

.DLL命令 GetClassLong, 整数型, "user32", "GetClassLongA", , , 取得窗口类的一个Long变量条目  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 要为其获得类信息的窗口的句柄
    .参数 值, 整数型, , 欲取得的信息，可能是下述任何一个常数：（正数表示一个字节偏移，用于取得在额外字节中为这个类分配的类信息）;GCL_CBCLSEXTRA：这个类结构中分配的额外字节数;GCL_CBWNDEXTRA：窗口结构里为这个类中每个窗口分配的额外字节数;GCL_HBRBACKGROUND：描绘这个类每个窗口的背景时，使用的默认刷子的句柄;GCL_HCURSOR：指向这个类窗口默认光标的句柄;GCL_HICON：这个类中窗口默认图标的句柄;GCL_HICONSM：这个类的小图标;GCL_HMODULE：这个类的模块的句柄;GCL_MENUNAME：为类菜单取得名称或资源 ID;GCL_STYLE：这个类的样式;GCL_WNDPROC：取得类窗口函数（该类窗口的默认窗口函数）的地址;

.DLL命令 设置窗口可见, 空白型, "", "ShowWindow", , 
    .参数 窗口句柄, 整数型, , 
    .参数 可见, 整数型, , 

.DLL命令 API_模拟鼠标_, 空白型, "user32.dll", "mouse_event", , , mouse_event,模拟一次鼠标事件
    .参数 标志组合, 整数型, , dwFlags，一系列标志的组合
    .参数 水平方向, 整数型, , dx，参见相关帮助
    .参数 垂直方向, 整数型, , dy，参见相关帮助
    .参数 数据信息, 整数型, , dwData
    .参数 扩展数据信息, 整数型, , dwExtraInfo，通常未用的一个值

.DLL命令 InternetOpenA, 整数型, "WinINet.dll", "", , 
    .参数 lpszAgent, 文本型, , 
    .参数 dwAccessType, 整数型, , 
    .参数 lpszProxyName, 文本型, , 
    .参数 lpszProxyBypass, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 InternetCloseHandle, 逻辑型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 

.DLL命令 InternetWriteFile, 整数型, "WinINet.dll", "", , 
    .参数 hFile, 整数型, , 
    .参数 sBuffer, 字节集, , 
    .参数 lNumberOfBytesToRead, 整数型, , 
    .参数 lNumberOfBytesRead, 整数型, , 

.DLL命令 InternetConnectA, 整数型, "WinINet.dll", "", , 
    .参数 hInternet, 整数型, , 
    .参数 lpszServerName, 文本型, , 
    .参数 nServerPort, 整数型, , 
    .参数 lpszUserName, 文本型, , 
    .参数 lpszPassword, 文本型, , 
    .参数 dwService, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpOpenRequestA, 整数型, "WinINet.dll", "", , 
    .参数 hConnect, 整数型, , 
    .参数 lpszVerb, 文本型, , 
    .参数 lpszObjectName, 文本型, , 
    .参数 lpszVersion, 文本型, , 
    .参数 lpszReferer, 文本型, , 
    .参数 lplpszAcceptTypes, 文本型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 HttpSendRequestA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 lpszHeaders, 文本型, , 
    .参数 dwHeadersLength, 整数型, , 
    .参数 lpOptional, 字节集, , 
    .参数 dwOptionalLength, 整数型, , 

.DLL命令 HttpAddRequestHeadersA, 整数型, "WinINet.dll", "", , 
    .参数 hHttpRequest, 整数型, , 
    .参数 sHeaders, 文本型, , 
    .参数 lHeadersLength, 整数型, , 
    .参数 lModifiers, 整数型, , 

.DLL命令 HttpEndRequestA, 整数型, "WinINet.dll", "", , 
    .参数 hHttpRequest, 整数型, , 
    .参数 lpBuffersOut, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 dwContext, 整数型, , 

.DLL命令 InternetReadFile, 逻辑型, "WinINet.dll", "", , 
    .参数 hFile, 整数型, , 
    .参数 lpBuffer, 字节集, 传址, 
    .参数 dwNumberOfBytesToRead, 整数型, , 
    .参数 lpdwNumberOfBytesRead, 整数型, 传址, 

.DLL命令 HttpQueryInfoA, 逻辑型, "WinINet.dll", "", , 
    .参数 hRequest, 整数型, , 
    .参数 dwInfoLevel, 整数型, , 
    .参数 lpvBuffer, 文本型, 传址, 
    .参数 lpdwBufferLength, 整数型, 传址, 
    .参数 lpdwIndex, 整数型, , 

.DLL命令 InternetSetCookieA, 逻辑型, "WinINet.dll", "", , 
    .参数 lpszUrl, 文本型, , 
    .参数 lpszCookieName, 文本型, , 
    .参数 lpszCookieData, 文本型, , 

.DLL命令 CreateThread, 整数型, "", "", , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 CloseHandle, 逻辑型, "", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 TerminateThread, 逻辑型, "", "", , 
    .参数 hThread, 整数型, , 
    .参数 dwExitCode, 整数型, , 

.DLL命令 MsgWaitForMultipleObjects, 整数型, "", "", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 bWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 GetLogicalDriveStrings, 整数型, "kernel32", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, , 

.DLL命令 GetDriveType, 整数型, "kernel32", "GetDriveTypeA", , 
    .参数 nDrive, 文本型, , 

.DLL命令 复制内存_矩形到指针, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, 整数型, , 
    .参数 源地址, 矩形_, , 
    .参数 长度, 整数型, , 

.DLL命令 FindWindow, 整数型, "user32.dll", "FindWindowA", , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 复制内存_指针到矩形, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, 矩形_, , 
    .参数 源地址, 整数型, , 
    .参数 长度, 整数型, , 

.DLL命令 GetSystemMenu, 整数型, "user32", "GetSystemMenu", , 取得指定窗口的系统菜单的句柄。
    .参数 hWnd, 整数型, , 窗口的句柄
    .参数 bRevert, 逻辑型, , 如设为TRUE，表示接收原始的系统菜单;

.DLL命令 AppendMenuA, 整数型, "user32", "AppendMenuA", , 在指定的菜单里添加一个菜单项  非零表示成功，零表示失败。会设置GetLastError
    .参数 hMenu, 整数型, , 菜单句柄
    .参数 uFlags, 整数型, , 参考ModifyMenu函数中的菜单常数标志定义表，其中列出了允许使用的所有常数
    .参数 uIDNewItem, 整数型, , 指定菜单条目的新命令ID。如果在wFlags参数中指定了MF_POPUP字段，那么这应该是指向一个弹出式菜单的句柄
    .参数 lpNewItem, 文本型, , （相应的vb声明见注解），如果在wFlags参数中指定了MF_STRING标志，这就代表在菜单中设置的字串。如设置了MF_BITMAP标志，这就代表一个Long型变量，其中包含了一个位图句柄。如设置了MF_OWNERDRAW，这个值就会包括在DRAWITEMSTRUCT和MEASUREITEMSTRUCT结构中，在条目需要重画的时候由windows发送出去;

.DLL命令 CreatePopupMenu, 整数型, "user32", "CreatePopupMenu", , 

.DLL命令 俘获鼠标, 空白型, "", "SetCapture", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 释放鼠标, 空白型, "", "ReleaseCapture", , 

.DLL命令 复制内存_BASS_PLUGININFO, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, BASS_PLUGININFO, , 
    .参数 源地址, 整数型, , 
    .参数 长度, 整数型, , 

.DLL命令 复制内存_BASS_PLUGINFORM, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, BASS_PLUGINFORM, , 
    .参数 源地址, 整数型, , 
    .参数 长度, 整数型, , 

.DLL命令 取实例句柄_, 整数型, "", "GetModuleHandleA", , 
    .参数 程序名, 文本型, , 

.DLL命令 取打开文件名_, 逻辑型, "comdlg32.dll", "GetOpenFileNameA", , 
    .参数 打开文件结构, 打开文件名_, 传址, 

.DLL命令 取保存文件名_, 逻辑型, "comdlg32.dll", "GetSaveFileNameA", , 
    .参数 保存文件结构, 打开文件名_, , 

.DLL命令 BASS_FXSetParameters_DX8_REVERB, 逻辑型, "bass.dll", "BASS_FXSetParameters", 公开, 设置回声参数
    .参数 handle, 整数型, , 
    .参数 par, BASS_DX8_REVERB, , 

.DLL命令 BASS_FXGetParameters_DX8_REVERB, 逻辑型, "bass.dll", "BASS_FXGetParameters", 公开, 获取回声参数
    .参数 handle, 整数型, , 
    .参数 par, BASS_DX8_REVERB, 传址, 

.DLL命令 闪烁显示指定窗口_, 整数型, "user32.dll", "FlashWindow", , FlashWindow,闪烁显示指定窗口
    .参数 窗口句柄, 整数型, , hwnd，要闪烁显示的窗口的句柄
    .参数 状态, 整数型, , bInvert，参见相关帮助

.DLL命令 FindWindowEx, 整数型, "", "FindWindowExA", , 
    .参数 窗口句柄1, 整数型, , 
    .参数 窗口句柄2, 整数型, , 
    .参数 lpsz1, 文本型, , 
    .参数 lpsz2, 文本型, , 

.DLL命令 GetClassName, 整数型, "user32", "GetClassNameA", , 为指定的窗口取得类名　以字节数表示的类名长度；排除最后的空中止字符。零表示出错。会设置GetLastError
    .参数 hwnd, 整数型, , 欲获得类名的那个窗口的句柄
    .参数 lpClassName, 文本型, , 随同类名载入的缓冲区。预先至少必须分配nMaxCount+1个字符
    .参数 nMaxCount, 整数型, , 由lpClassName提供的缓冲区长度;

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 hwnd, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 lpString, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 cch, 整数型, , lp缓冲区的长度;  

.DLL命令 WideCharToMultiByte1, 整数型, "kernel32", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cbMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 MultiByteToWideChar1, 整数型, "kernel32", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 取进程ID, 空白型, "", "GetWindowThreadProcessId", , 
    .参数 窗口句柄, 整数型, , 
    .参数 进程ID, 整数型, 传址, 

.DLL命令 打开进程, 整数型, "", "OpenProcess", , 
    .参数 访问权限标志, 整数型, , 
    .参数 继承标志, 逻辑型, , 
    .参数 进程ID, 整数型, , 

.DLL命令 关闭进程, 整数型, "", "CloseHandle", , 
    .参数 进程句柄, 整数型, , 

.DLL命令 结束进程, 整数型, "kernel32.dll", "TerminateProcess", , 
    .参数 进程句柄, 整数型, , 
    .参数 退出代码, 整数型, , 

.DLL命令 发送消息_矩形, 整数型, "", "SendMessageA", , 用于获取超级列表框的表项矩形
    .参数 窗口句柄, 整数型, , 
    .参数 信息值, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 矩形_, , 

.DLL命令 CreateRoundRectRgn, 整数型, "", "", , 
    .参数 nLeftRect, 整数型, , 
    .参数 nTopRect, 整数型, , 
    .参数 nRightRect, 整数型, , 
    .参数 nBottomRect, 整数型, , 
    .参数 nWidthEllipse, 整数型, , 
    .参数 nHeightEllipse, 整数型, , 

.DLL命令 SetWindowRgn, 整数型, "User32", "SetWindowRgn", , 
    .参数 hWnd, 整数型, , 将被设定窗口区域的某一窗口的柄。
    .参数 hRgn, 整数型, , 窗口区域的句柄。 函数将窗户的窗户区域设定为这一个区域。
    .参数 bRedraw, 逻辑型, , 叙述系统是否在设定窗户区域之后重划窗口。 如果 bRedraw 是真实的，系统这么做; 另外，它不。

.程序集 MCI指令集, , , 

.子程序 打开媒体_, 整数型, , 
.参数 文件名, 文本型, , 
.参数 别名, 文本型, , 

.局部变量 短文件名, 文本型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
赋值 (短文件名, 取空白文本 (取文本长度 (文件名))) ' 缓冲区长度，应小与等于原文件名
GetShortPathName (文件名, 短文件名, 取文本长度 (短文件名)) ' 转换成短文件名
返回 (mciSendString (相加 (“open ”, 短文件名, “ Alias ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 置媒体时间格式_, 整数型, , 修改为毫秒
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“set ”, 别名, “ time format ms”), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 播放媒体_, 整数型, , 
.参数 别名, 文本型, , 
.参数 起始时间, 整数型, 可空, 若省略，则从当前

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
.如果 (是否为空 (起始时间))
    返回 (mciSendString (相加 (“play ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))
.否则
    返回 (mciSendString (相加 (“play ”, 别名, “ from ”, 到文本 (起始时间)), 缓冲文本, 取文本长度 (缓冲文本), 0))
.如果结束


.子程序 暂停播放_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“pause ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 继续播放_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“resume ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 停止播放_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“stop ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 关闭媒体_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“close ”, 别名), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 取当前播放位置_, 整数型, , 失败返回错误代码的相反数
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 
.局部变量 执行结果, 整数型, , , 

赋值 (缓冲文本, 取空白文本 (128))
赋值 (执行结果, mciSendString (相加 (“status ”, 别名, “ position”), 缓冲文本, 取文本长度 (缓冲文本), 0))
.如果真 (等于 (执行结果, 0))
    返回 (到数值 (缓冲文本))
.如果真结束
返回 (负 (执行结果))

.子程序 取媒体长度_, 整数型, , 失败返回错误代码的相反数
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 
.局部变量 执行结果, 整数型, , , 

赋值 (缓冲文本, 取空白文本 (255))
赋值 (执行结果, mciSendString (相加 (“status ”, 别名, “ length”), 缓冲文本, 取文本长度 (缓冲文本), 0))
.如果真 (等于 (执行结果, 0))
    返回 (到数值 (缓冲文本))
.如果真结束
返回 (负 (执行结果))

.子程序 置当前播放位置_, 整数型, , 
.参数 别名, 文本型, , 
.参数 播放位置, 整数型, , 毫秒

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“seek ”, 别名, “ to ”, 到文本 (播放位置)), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 取音量_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
mciSendString (相加 (“status ”, 别名, “ volume”), 缓冲文本, 取文本长度 (缓冲文本), 0)
返回 (到数值 (缓冲文本))

.子程序 置音量_, 整数型, , 
.参数 别名, 文本型, , 
.参数 音量值, 整数型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“setaudio ”, 别名, “ volume to ”, 到文本 (音量值)), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 取媒体状态_, 整数型, , 0:未知,-1:stopped,-2:playing,-3:paused,其他值:错误信息
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 
.局部变量 执行结果, 整数型, , , 

赋值 (缓冲文本, 取空白文本 (128))
赋值 (执行结果, mciSendString (相加 (“status ”, 别名, “ mode”), 缓冲文本, 取文本长度 (缓冲文本), 0))
.如果真 (大于 (执行结果, 0)) ' 出错了
    返回 (执行结果)
.如果真结束
赋值 (缓冲文本, 到小写 (缓冲文本))
.判断开始 (等于 (缓冲文本, “stopped”))
    返回 (-1)
.判断 (等于 (缓冲文本, “playing”))
    返回 (-2)
.判断 (等于 (缓冲文本, “paused”))
    返回 (-3)
.默认
    返回 (0)
.判断结束


.子程序 置视频窗口_, 整数型, , 
.参数 别名, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“put ”, 别名, “ windos handle ”, 到文本 (窗口句柄)), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 置播放速度_, 整数型, , 
.参数 别名, 文本型, , 
.参数 播放速度, 整数型, , 1～2000

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
返回 (mciSendString (相加 (“set ”, 别名, “ speed ”, 到文本 (播放速度)), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 取播放速度_, 整数型, , 
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
mciSendString (相加 (“Status ”, 别名, “ speed”), 缓冲文本, 取文本长度 (缓冲文本), 0)
返回 (到整数 (删首尾空 (缓冲文本)))

.子程序 置声道音量大小_, 整数型, , 
.参数 别名, 文本型, , 
.参数 声道类型, 整数型, , 1、左声道  2、右声道
.参数 音量大小, 整数型, , 0-1000之间的整数

.局部变量 声道名称, 文本型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (缓冲文本, 取空白文本 (128))
.判断开始 (等于 (声道类型, 1))
    赋值 (声道名称, “left”)
.判断 (等于 (声道类型, 2))
    赋值 (声道名称, “right”)
.默认
    
.判断结束

返回 (mciSendString (相加 (“setaudio ”, 别名, “ ”, 声道名称, “ volume to ”, 到文本 (音量大小)), 缓冲文本, 取文本长度 (缓冲文本), 0))

.子程序 取声道音量大小_, 整数型, , 失败返回-1
.参数 别名, 文本型, , 
.参数 声道类型, 整数型, , 1、左声道  2、右声道

.局部变量 声道名称, 文本型, , , 
.局部变量 音量大小, 文本型, , , 
.局部变量 返回值, 整数型, , , 

.判断开始 (等于 (声道类型, 1))
    赋值 (声道名称, “left”)
.判断 (等于 (声道类型, 2))
    赋值 (声道名称, “right”)
.默认
    
.判断结束
赋值 (音量大小, 取空白文本 (128))
赋值 (返回值, mciSendString (相加 (“Status ”, 别名, “ ”, 声道名称, “ volume”), 音量大小, 取文本长度 (音量大小), 0))
.如果 (不等于 (返回值, 0))
    返回 (-1)
.否则
    返回 (到数值 (音量大小))
.如果结束


.子程序 是否已就绪_, 逻辑型, , 调用 打开媒体 方法后，可使用此方法获取设备的状态
.参数 别名, 文本型, , 

.局部变量 状态, 文本型, , , 

赋值 (状态, 取空白文本 (128))
mciSendString (相加 (“Status ”, 别名, “ ready”), 状态, 取文本长度 (状态), 0)
.如果 (等于 (到小写 (状态), “true”))
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 取比特率_, 整数型, , 失败返回错误代码的相反数
.参数 别名, 文本型, , 

.局部变量 缓冲文本, 文本型, , , 
.局部变量 执行结果, 整数型, , , 

赋值 (缓冲文本, 取空白文本 (128))
赋值 (执行结果, mciSendString (相加 (“Status ”, 别名, “ bytespersec”), 缓冲文本, 取文本长度 (缓冲文本), 0))
.如果真 (不等于 (执行结果, 0))
    返回 (负 (执行结果))
.如果真结束
返回 (到数值 (缓冲文本))

.类模块 播放控制类_MCI, , , 这个控制类相当于一个播放控件，在任一时刻至多只能播放一个文件，在这里对MCI指令进行了集合，做了一些过程优化和意外预防

.程序集变量 媒体别名, 文本型, , , 
.程序集变量 正在播放项, 文本型, , , 值为文件全路径
.程序集变量 状态, 逻辑型, , , 假：未打开，真：已打开
.程序集变量 上次错误信息, 文本型, , , 
.程序集变量 手动暂停, 逻辑型, , , 用于曲目结束判断
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
置随机数种子 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
关闭 ()

.子程序 取错误原因, 文本型, , 
返回 (上次错误信息)

.子程序 取当前播放文件名, 文本型, , 
返回 (正在播放项)

.子程序 打开, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 预防打开失败, 逻辑型, 可空, 
.参数 自动开始播放, 逻辑型, 可空, 

.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 
.局部变量 之前的媒体别名, 文本型, , , 

赋值 (之前的媒体别名, 媒体别名) ' 先留着标记，等下打开成功了再关，或打开失败了，再把值重新赋回去
.如果真 (是否为空 (预防打开失败)) ' 默认关闭“预防打开失败”
    赋值 (预防打开失败, 假)
.如果真结束
.如果真 (等于 (预防打开失败, 假)) ' 不开启，则关闭当前
    关闭媒体_ (媒体别名)
    赋值 (手动暂停, 真)
    赋值 (状态, 假)
    赋值 (正在播放项, “”)
.如果真结束
赋值 (媒体别名, 到文本 (取随机数 ())) ' 随机取值以防重复
赋值 (执行结果, 打开媒体_ (文件名, 媒体别名))
.如果真 (不等于 (执行结果, 0)) ' 打开失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    .如果 (预防打开失败)
        赋值 (媒体别名, 之前的媒体别名) ' 重新置回原来的
    .否则
        赋值 (媒体别名, “”) ' 打开失败，就没有播放项了，别名置为空
    .如果结束
    返回 (假)
.如果真结束
 ' 以下代码只有在打开成功后才会执行
赋值 (状态, 真)
赋值 (正在播放项, 文件名)
.如果真 (预防打开失败)
    关闭媒体_ (之前的媒体别名) ' 打开成功了，关闭之前的
.如果真结束
置媒体时间格式_ (媒体别名) ' mid文件默认用采样作为长度标志，在这里需要修改成毫秒
.如果真 (是否为空 (自动开始播放))
    赋值 (自动开始播放, 假) ' 默认不自动播放
.如果真结束
.如果真 (自动开始播放)
    播放媒体_ (媒体别名)
    赋值 (手动暂停, 假)
.如果真结束
返回 (真)

.子程序 播放, 逻辑型, , 
.参数 起始时间, 整数型, 可空, 

.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (手动暂停, 假)
.如果 (是否为空 (起始时间))
    赋值 (执行结果, 播放媒体_ (媒体别名))
.否则
    赋值 (执行结果, 播放媒体_ (媒体别名, 起始时间))
.如果结束

.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 暂停, 逻辑型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (手动暂停, 真)
赋值 (执行结果, 暂停播放_ (媒体别名))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 继续, 逻辑型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (手动暂停, 假)
赋值 (执行结果, 继续播放_ (媒体别名))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 停止, 逻辑型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (手动暂停, 真)
赋值 (执行结果, 停止播放_ (媒体别名))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 关闭, 逻辑型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (手动暂停, 真) ' 很诡异，播放完成后就自动关闭？
赋值 (执行结果, 关闭媒体_ (媒体别名))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    赋值 (媒体别名, “”)
    赋值 (状态, 假)
    赋值 (正在播放项, “”)
    返回 (真)
.如果结束


.子程序 取当前播放位置, 整数型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (执行结果, 取当前播放位置_ (媒体别名))
.如果 (小于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (负 (执行结果), 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (0)
.否则
    返回 (执行结果)
.如果结束


.子程序 取媒体长度, 整数型, , 
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (执行结果, 取媒体长度_ (媒体别名))
.如果 (小于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (负 (执行结果), 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (0)
.否则
    返回 (执行结果)
.如果结束


.子程序 置当前播放位置, 逻辑型, , 
.参数 播放位置, 整数型, , 毫秒

.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 
.局部变量 之前状态, 整数型, , , 置位置前的媒体状态

赋值 (之前状态, 取媒体状态_ (媒体别名))
赋值 (执行结果, 置当前播放位置_ (媒体别名, 播放位置))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    .如果真 (等于 (之前状态, -2)) ' 之前就是playing
        播放媒体_ (媒体别名)
    .如果真结束
    返回 (真)
.如果结束


.子程序 置音量, 逻辑型, , 
.参数 音量值, 整数型, , 

.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (执行结果, 置音量_ (媒体别名, 音量值))
.如果 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 取媒体状态, 整数型, , 0:未知,-1:stopped,-2:playing,-3:paused,其他值:错误信息
.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (执行结果, 取媒体状态_ (媒体别名))
.如果真 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
.如果真结束
返回 (执行结果)

.子程序 取别名, 文本型, , 
返回 (媒体别名)

.子程序 置播放速度, 整数型, , 
.参数 速度, 小数型, , 

.局部变量 执行结果, 整数型, , , 
.局部变量 缓冲文本, 文本型, , , 

赋值 (执行结果, 置播放速度_ (媒体别名, 相乘 (速度, 1000)))
.如果真 (不等于 (执行结果, 0)) ' 失败
    赋值 (缓冲文本, 取空白文本 (255))
    mciGetErrorString (执行结果, 缓冲文本, 取文本长度 (缓冲文本))
    赋值 (上次错误信息, 缓冲文本)
.如果真结束
返回 (执行结果)

.子程序 取手动暂停状态, 逻辑型, , 
返回 (手动暂停)

.子程序 取平均比特率, 小数型, , 
返回 (相除 (相乘 (相除 (取文件尺寸 (正在播放项), 相除 (取媒体长度 (), 1000)), 8), 1000))


.程序集 窗口吸附命令集, , , 

.程序集变量 临界值, 整数型, , , 指定当两个窗口相距多少象素时黏在一起
.程序集变量 横向吸附线, 横向吸附线, , "0", 
.程序集变量 纵向吸附线, 纵向吸附线, , "0", 
.程序集变量 旧过程号, 整数型, , "0", SetWindowLong命令的返回值
.程序集变量 窗口句柄, 整数型, , "0", 记录窗口句柄
.程序集变量 有主窗口, 逻辑型, , , 
.程序集变量 吸附的窗口号, 文本型, , "4", 按位分割，比如23表示与2、3号窗口吸附
.程序集变量 需要整体拖动的窗口, 整体拖动, , "4", 
.程序集变量 正在整体拖动, 逻辑型, , , 在整体拖动时，作标记，防止整体移动时，窗口边缘“带”到别的窗口，然后直接拖走了
.程序集变量 正在拉伸, 逻辑型, , , 正在改变窗口大小
.程序集变量 窗口吸附线有效, 逻辑型, , "4", 
.程序集变量 已经开始, 逻辑型, , , 已经开始吸附
.程序集变量 鼠标偏差X, 整数型, , , 拖动时，鼠标水平位置 减去 窗口左边
.程序集变量 鼠标偏差Y, 整数型, , , 同上
.程序集变量 左边固定, 逻辑型, , , 拉伸时 左边是不动的
.程序集变量 顶边固定, 逻辑型, , , 
.程序集变量 右边固定, 逻辑型, , , 
.程序集变量 底边固定, 逻辑型, , , 
.程序集变量 正在移动窗口, 逻辑型, , , “移动窗口”命令正在执行，设立此变量是为了防止“移动”和“算吸附窗口”冲突
.子程序 设置临界值, 空白型, , 
.参数 临界值_, 整数型, , 

赋值 (临界值, 临界值_)

.子程序 开始吸附, 空白型, , 
.参数 有主窗口_, 逻辑型, , 
.参数 窗口句柄1, 整数型, , 
.参数 窗口句柄2, 整数型, , 
.参数 窗口句柄3, 整数型, , 
.参数 窗口句柄4, 整数型, , 

.局部变量 屏幕边缘吸附线_横向, 横向吸附线, , , 
.局部变量 屏幕边缘吸附线_纵向, 纵向吸附线, , , 

赋值 (有主窗口, 有主窗口_)

加入成员 (窗口句柄, 窗口句柄1)
加入成员 (窗口句柄, 窗口句柄2)
加入成员 (窗口句柄, 窗口句柄3)
加入成员 (窗口句柄, 窗口句柄4)


重定义数组 (横向吸附线, 假, 8)
重定义数组 (纵向吸附线, 假, 8)
重新读取吸附线 (0) ' 读出所有窗口的吸附线

 ' 加入屏幕边缘
赋值 (屏幕边缘吸附线_横向.纵坐标, 0)
赋值 (屏幕边缘吸附线_横向.横坐标1, 0)
赋值 (屏幕边缘吸附线_横向.横坐标2, 取屏幕宽度 ())
加入成员 (横向吸附线, 屏幕边缘吸附线_横向)
赋值 (屏幕边缘吸附线_横向.纵坐标, 取屏幕高度 ())
加入成员 (横向吸附线, 屏幕边缘吸附线_横向)

赋值 (屏幕边缘吸附线_纵向.横坐标, 0)
赋值 (屏幕边缘吸附线_纵向.纵坐标1, 0)
赋值 (屏幕边缘吸附线_纵向.纵坐标2, 取屏幕高度 ())
加入成员 (纵向吸附线, 屏幕边缘吸附线_纵向)
赋值 (屏幕边缘吸附线_纵向.横坐标, 取屏幕宽度 ())
加入成员 (纵向吸附线, 屏幕边缘吸附线_纵向)


加入成员 (旧过程号, SetWindowLong (窗口句柄1, -4, 到数值 (&消息处理子程序))) ' 截获窗口消息
加入成员 (旧过程号, SetWindowLong (窗口句柄2, -4, 到数值 (&消息处理子程序)))
加入成员 (旧过程号, SetWindowLong (窗口句柄3, -4, 到数值 (&消息处理子程序)))
加入成员 (旧过程号, SetWindowLong (窗口句柄4, -4, 到数值 (&消息处理子程序)))

赋值 (已经开始, 真)

.子程序 重新读取吸附线, 空白型, , 
.参数 窗口号, 整数型, , 0～3，0表示所有

.局部变量 窗口位置, 矩形_, , , 

.如果真 (或者 (等于 (窗口号, 0), 等于 (窗口号, 1)))
    取窗口位置 (窗口句柄 [1], 窗口位置) ' 取出窗口位置
    赋值 (横向吸附线 [1].纵坐标, 窗口位置.顶边) ' 加入顶边
    赋值 (横向吸附线 [1].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [1].横坐标2, 窗口位置.右边)
    赋值 (横向吸附线 [2].纵坐标, 窗口位置.底边) ' 加入底边
    赋值 (横向吸附线 [2].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [2].横坐标2, 窗口位置.右边)
    
    赋值 (纵向吸附线 [1].横坐标, 窗口位置.左边) ' 加入左边
    赋值 (纵向吸附线 [1].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [1].纵坐标2, 窗口位置.底边)
    赋值 (纵向吸附线 [2].横坐标, 窗口位置.右边) ' 加入右边
    赋值 (纵向吸附线 [2].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [2].纵坐标2, 窗口位置.底边)
.如果真结束
.如果真 (或者 (等于 (窗口号, 0), 等于 (窗口号, 2)))
    取窗口位置 (窗口句柄 [2], 窗口位置)
    赋值 (横向吸附线 [3].纵坐标, 窗口位置.顶边)
    赋值 (横向吸附线 [3].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [3].横坐标2, 窗口位置.右边)
    赋值 (横向吸附线 [4].纵坐标, 窗口位置.底边)
    赋值 (横向吸附线 [4].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [4].横坐标2, 窗口位置.右边)
    
    赋值 (纵向吸附线 [3].横坐标, 窗口位置.左边)
    赋值 (纵向吸附线 [3].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [3].纵坐标2, 窗口位置.底边)
    赋值 (纵向吸附线 [4].横坐标, 窗口位置.右边)
    赋值 (纵向吸附线 [4].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [4].纵坐标2, 窗口位置.底边)
    
.如果真结束
.如果真 (或者 (等于 (窗口号, 0), 等于 (窗口号, 3)))
    取窗口位置 (窗口句柄 [3], 窗口位置)
    赋值 (横向吸附线 [5].纵坐标, 窗口位置.顶边)
    赋值 (横向吸附线 [5].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [5].横坐标2, 窗口位置.右边)
    赋值 (横向吸附线 [6].纵坐标, 窗口位置.底边)
    赋值 (横向吸附线 [6].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [6].横坐标2, 窗口位置.右边)
    
    赋值 (纵向吸附线 [5].横坐标, 窗口位置.左边)
    赋值 (纵向吸附线 [5].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [5].纵坐标2, 窗口位置.底边)
    赋值 (纵向吸附线 [6].横坐标, 窗口位置.右边)
    赋值 (纵向吸附线 [6].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [6].纵坐标2, 窗口位置.底边)
    
.如果真结束
.如果真 (或者 (等于 (窗口号, 0), 等于 (窗口号, 4)))
    取窗口位置 (窗口句柄 [4], 窗口位置)
    赋值 (横向吸附线 [7].纵坐标, 窗口位置.顶边)
    赋值 (横向吸附线 [7].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [7].横坐标2, 窗口位置.右边)
    赋值 (横向吸附线 [8].纵坐标, 窗口位置.底边)
    赋值 (横向吸附线 [8].横坐标1, 窗口位置.左边)
    赋值 (横向吸附线 [8].横坐标2, 窗口位置.右边)
    
    赋值 (纵向吸附线 [7].横坐标, 窗口位置.左边)
    赋值 (纵向吸附线 [7].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [7].纵坐标2, 窗口位置.底边)
    赋值 (纵向吸附线 [8].横坐标, 窗口位置.右边)
    赋值 (纵向吸附线 [8].纵坐标1, 窗口位置.顶边)
    赋值 (纵向吸附线 [8].纵坐标2, 窗口位置.底边)
.如果真结束


.子程序 消息处理子程序, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 IParam, 整数型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    .如果真 (等于 (窗口句柄 [X], hWnd))
        窗口事件处理 (X, Msg, wParam, IParam)
        返回 (CallWindowProc (旧过程号 [X], hWnd, Msg, wParam, IParam))
    .如果真结束
    
.变量循环尾 ()
返回 (0)

.子程序 窗口事件处理, 空白型, , 
.参数 窗口号, 整数型, , 1～4
.参数 消息号, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 需要修改指向的变量

.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 匹配的横向吸附线, 横向有距吸附线, , "0", 当前位置匹配的所有吸附线
.局部变量 匹配的纵向吸附线, 纵向有距吸附线, , "0", 
.局部变量 X, 整数型, , , 循环变量
.局部变量 Y, 整数型, , , 循环变量
.局部变量 Z, 整数型, , , 
.局部变量 窗口宽度, 整数型, , , 
.局部变量 窗口高度, 整数型, , , 
.局部变量 临时_横向吸附线, 横向有距吸附线, , , 用于计算中的处理
.局部变量 临时_纵向吸附线, 纵向有距吸附线, , , 
.局部变量 吸附点集, 吸附点, , "0", 
.局部变量 临时_吸附点, 吸附点, , , 
.局部变量 点_距离最小值, 整数型, , , 
.局部变量 点_距离最小编号, 整数型, , , 
.局部变量 横线_距离最小值, 整数型, , , 
.局部变量 横线_距离最小编号, 整数型, , , 
.局部变量 纵线_距离最小值, 整数型, , , 
.局部变量 纵线_距离最小编号, 整数型, , , 
.局部变量 要判断的横边, 整数型, , , （仅拉伸时用）0没有 1顶 2底
.局部变量 要判断的纵边, 整数型, , , 0没有 1左 2右
.局部变量 横边纵坐标, 整数型, , , 仅拉伸时用
.局部变量 纵边横坐标, 整数型, , , 
.局部变量 数组已删除数量, 整数型, , , 
.局部变量 临时_靠近的窗口号, 整数型, , , 

.如果真 (等于 (窗口号, 2))
    延时 (0)
.如果真结束
.如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设置为不活动
    返回 ()
.如果真结束
.判断开始 (等于 (消息号, #)) ' 正在移动
    复制内存_指针到矩形 (窗口位置, 参数二, 16)
    .如果真 (或者 (等于 (窗口位置.左边, -32000), 等于 (窗口位置.顶边, -32000))) ' 最小化
        返回 ()
    .如果真结束
    赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边)) ' 算出窗口尺寸
    赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
    
    赋值 (窗口位置.左边, 相减 (取鼠标水平位置 (), 鼠标偏差X))
    赋值 (窗口位置.顶边, 相减 (取鼠标垂直位置 (), 鼠标偏差Y))
    
    赋值 (窗口位置.右边, 相加 (窗口位置.左边, 窗口宽度))
    赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 窗口高度))
    
    
    .变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
        .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
            到循环尾 ()
        .如果真结束
        .如果真 (小于或等于 (X, 8))
            .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                到循环尾 ()
            .如果真结束
            .如果真 (并且 (需要整体拖动的窗口 [整除 (相加 (X, 1), 2)].启用, 等于 (窗口号, 1))) ' 正在拖动主窗口，且，这个窗口是要一起拖动的！已经与主窗口连接在一起，不能算进去
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断顶边
            .如果真 (并且 (大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                赋值 (临时_横向吸附线.吸附线, 横向吸附线 [X])
                赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标)))
                赋值 (临时_横向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的横向吸附线, 临时_横向吸附线) ' 加入数组
                
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断底边
            .如果真 (并且 (大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值))))
                赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 窗口高度)) ' 因为是底边，所以要减去一个高度
                赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标)))
                赋值 (临时_横向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (等于 (窗口号, 1)) ' 正在移动主窗口，则需要判断其吸住的窗口的位置
            .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, Y)
                .如果真 (等于 (需要整体拖动的窗口 [Y], 启用, 假))
                    到循环尾 ()
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断顶边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                        
                        赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 需要整体拖动的窗口 [Y], 纵向偏移))
                        赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                        赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                        赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                        赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 临时_横向吸附线.吸附线.纵坐标)))
                        赋值 (临时_横向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                    .如果真结束
                    
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断底边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                        
                        赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6))) ' 因为是底边，所以要减去一个高度
                        赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                        赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                        赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                        赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 临时_横向吸附线.吸附线.纵坐标)))
                        赋值 (临时_横向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                    .如果真结束
                    
                .如果真结束
                
            .变量循环尾 ()
        .如果真结束
        
    .变量循环尾 ()
    .变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
        .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
            到循环尾 ()
        .如果真结束
        .如果真 (小于或等于 (X, 8))
            .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                到循环尾 ()
            .如果真结束
            .如果真 (并且 (需要整体拖动的窗口 [整除 (相加 (X, 1), 2)].启用, 等于 (窗口号, 1))) ' 正在拖动主窗口，且，这个窗口是要一起拖动的！
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标)), 临界值))
            .如果真 (并且 (大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                赋值 (临时_纵向吸附线.吸附线, 纵向吸附线 [X])
                赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标)))
                赋值 (临时_纵向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标)), 临界值))
            .如果真 (并且 (大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值))))
                赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 窗口宽度))
                赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标)))
                赋值 (临时_纵向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (等于 (窗口号, 1)) ' 正在移动主窗口，则需要判断其吸住的窗口的位置
            .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, Y)
                .如果真 (等于 (需要整体拖动的窗口 [Y], 启用, 假))
                    到循环尾 ()
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 纵向吸附线 [X], 横坐标)), 临界值)) ' 判断左边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                        
                        赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 需要整体拖动的窗口 [Y], 横向偏移))
                        赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                        赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 临时_纵向吸附线.吸附线.横坐标)))
                        赋值 (临时_纵向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                    .如果真结束
                    
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 纵向吸附线 [X], 横坐标)), 临界值)) ' 判断右边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                        
                        赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5))) ' 因为是底边，所以要减去一个高度
                        赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                        赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 临时_纵向吸附线.吸附线.横坐标)))
                        赋值 (临时_纵向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                    .如果真结束
                    
                .如果真结束
                
            .变量循环尾 ()
            
        .如果真结束
        
        
        
    .变量循环尾 ()
    
    
    .如果真 (并且 (不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 横纵都可以吸附
        .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
            .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, Y)
                .如果真 (并且 (大于或等于 (匹配的横向吸附线 [X], 原纵向位置, 匹配的纵向吸附线 [Y], 吸附线.纵坐标1), 小于或等于 (匹配的横向吸附线 [X], 原纵向位置, 匹配的纵向吸附线 [Y], 吸附线.纵坐标2), 大于或等于 (匹配的纵向吸附线 [Y], 原横向位置, 匹配的横向吸附线 [X], 吸附线.横坐标1), 小于或等于 (匹配的纵向吸附线 [Y], 原横向位置, 匹配的横向吸附线 [X], 吸附线.横坐标2))) ' 线必须原来是交叉的
                    赋值 (临时_吸附点.纵坐标, 匹配的横向吸附线 [X], 吸附线.纵坐标)
                    赋值 (临时_吸附点.横坐标, 匹配的纵向吸附线 [Y], 吸附线.横坐标)
                    赋值 (临时_吸附点.距离X, 取绝对值 (相减 (临时_吸附点.横坐标, 窗口位置.左边)))
                    赋值 (临时_吸附点.距离Y, 取绝对值 (相减 (临时_吸附点.纵坐标, 窗口位置.顶边)))
                    赋值 (临时_吸附点.距离, 相加 (相乘 (临时_吸附点.距离X, 临时_吸附点.距离X), 相乘 (临时_吸附点.距离Y, 临时_吸附点.距离Y)))
                    加入成员 (吸附点集, 临时_吸附点) ' 统计每一个吸附点
                    
                .如果真结束
                
            .变量循环尾 ()
        .变量循环尾 ()
        
    .如果真结束
    
    
    
     ' ========全部去掉“临界值”再算一次，因为单独的线吸附是不需要有临界值的，而吸附点在上面已经算过了=======
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
        赋值 (临时_靠近的窗口号, 匹配的横向吸附线 [相减 (X, 数组已删除数量)].靠近的窗口号)
        .如果真 (或者 (大于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标1, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.右边, 相加 (窗口位置.左边, 需要整体拖动的窗口 [临时_靠近的窗口号], 横向偏移, 取窗口位置_特定值 (临时_靠近的窗口号, 5)))), 小于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标2, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.左边, 相加 (窗口位置.左边, 需要整体拖动的窗口 [临时_靠近的窗口号], 横向偏移))))) ' 再一看，超出了！（注意，“靠近的窗口”不是本窗口，只有一种情况，那就是在整体拖动！）
            删除成员 (匹配的横向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, X)
        赋值 (临时_靠近的窗口号, 匹配的纵向吸附线 [相减 (X, 数组已删除数量)].靠近的窗口号)
        .如果真 (或者 (大于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标1, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.底边, 相加 (窗口位置.顶边, 需要整体拖动的窗口 [临时_靠近的窗口号], 纵向偏移, 取窗口位置_特定值 (临时_靠近的窗口号, 6)))), 小于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标2, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.顶边, 相加 (窗口位置.顶边, 需要整体拖动的窗口 [临时_靠近的窗口号], 纵向偏移))))) ' 再一看，超出了！
            删除成员 (匹配的纵向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    
    
    
    .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0)) ' 有横向吸附线
        赋值 (横线_距离最小值, 匹配的横向吸附线 [1].距离)
        赋值 (横线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的横向吸附线), 1, X)
            .如果真 (小于 (匹配的横向吸附线 [X], 距离, 横线_距离最小值)) ' 发现更靠近的线
                赋值 (横线_距离最小值, 匹配的横向吸附线 [X], 距离)
                赋值 (横线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0)) ' 有纵向吸附线
        赋值 (纵线_距离最小值, 匹配的纵向吸附线 [1].距离)
        赋值 (纵线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的纵向吸附线), 1, X)
            .如果真 (小于 (匹配的纵向吸附线 [X], 距离, 纵线_距离最小值)) ' 发现更靠近的线
                赋值 (纵线_距离最小值, 匹配的纵向吸附线 [X], 距离)
                赋值 (纵线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
        
    .如果真结束
    
    
    .如果真 (不等于 (取数组成员数 (吸附点集), 0)) ' 有吸附点
        赋值 (点_距离最小值, 吸附点集 [1].距离)
        赋值 (点_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (吸附点集), 1, X)
            .如果真 (小于 (吸附点集 [X], 距离, 点_距离最小值)) ' 发现有更靠近的点
                赋值 (点_距离最小值, 吸附点集 [X], 距离)
                赋值 (点_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    
    .如果 (并且 (不等于 (取数组成员数 (吸附点集), 0), 不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 有点又有双线
        
        .如果 (并且 (小于 (吸附点集 [点_距离最小编号], 距离X, 匹配的纵向吸附线 [纵线_距离最小编号], 距离), 小于 (吸附点集 [点_距离最小编号], 距离Y, 匹配的横向吸附线 [横线_距离最小编号], 距离))) ' 看谁近
            赋值 (窗口位置.左边, 吸附点集 [点_距离最小编号], 横坐标)
            赋值 (窗口位置.顶边, 吸附点集 [点_距离最小编号], 纵坐标)
            
        .否则
            赋值 (窗口位置.左边, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
            赋值 (窗口位置.顶边, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
            
        .如果结束
        
        
        
    .否则
         ' 没有双线和点抢位置了
         ' 注意必须先线后点
        
        .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0))
            赋值 (窗口位置.左边, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0))
            赋值 (窗口位置.顶边, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
        .如果真结束
        
        .如果真 (不等于 (取数组成员数 (吸附点集), 0))
            赋值 (窗口位置.左边, 吸附点集 [点_距离最小编号], 横坐标)
            赋值 (窗口位置.顶边, 吸附点集 [点_距离最小编号], 纵坐标)
            
        .如果真结束
        
    .如果结束
    
    赋值 (窗口位置.右边, 相加 (窗口位置.左边, 窗口宽度))
    赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 窗口高度))
    
    复制内存_矩形到指针 (参数二, 窗口位置, 16)
    
    
.判断 (等于 (消息号, #))
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假))
        返回 ()
    .如果真结束
    .如果 (不等于 (窗口号, 1))
        重新读取吸附线 (窗口号)
        算出吸附窗口号 (窗口号)
    .否则
        
        取窗口位置 (窗口句柄 [1], 窗口位置)
        .如果真 (或者 (等于 (窗口位置.左边, -32000), 等于 (窗口位置.顶边, -32000), 不等于 (相减 (窗口位置.右边, 窗口位置.左边), #主窗口宽度), 不等于 (相减 (窗口位置.底边, 窗口位置.顶边), #主窗口高度))) ' 最小化，或者是，没有任务栏，缩到左下角，尺寸改变
            返回 ()
        .如果真结束
        .如果真 (有主窗口) ' 需要带动其他窗口
            .如果 (等于 (取随机数 (0, 1), 0)) ' 随机选择移动顺序，防止序号在后的窗口老是“慢半拍”
                .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, X)
                    .如果真 (需要整体拖动的窗口 [X], 启用) ' 该窗口需要整体拖动
                        移动窗口 (X, 相加 (窗口位置.左边, 需要整体拖动的窗口 [X], 横向偏移), , 相加 (窗口位置.顶边, 需要整体拖动的窗口 [X], 纵向偏移), ) ' “移动窗口”命令仅在这里用到
                    .如果真结束
                    
                .变量循环尾 ()
                
            .否则
                .变量循环首 (取数组成员数 (需要整体拖动的窗口), 2, -1, X)
                    .如果真 (需要整体拖动的窗口 [X], 启用) ' 该窗口需要整体拖动
                        移动窗口 (X, 相加 (窗口位置.左边, 需要整体拖动的窗口 [X], 横向偏移), , 相加 (窗口位置.顶边, 需要整体拖动的窗口 [X], 纵向偏移), ) ' “移动窗口”命令仅在这里用到
                    .如果真结束
                    
                .变量循环尾 ()
                
            .如果结束
            
        .如果真结束
        
    .如果结束
    
.判断 (等于 (消息号, 161)) ' 非客户区左键按下
    重新读取吸附线_屏幕边缘 ()
    .判断开始 (等于 (参数一, 2))
        取窗口位置 (窗口句柄 [窗口号], 窗口位置)
        赋值 (鼠标偏差X, 相减 (取鼠标水平位置 (), 窗口位置.左边))
        赋值 (鼠标偏差Y, 相减 (取鼠标垂直位置 (), 窗口位置.顶边))
    .判断 (并且 (大于或等于 (参数一, 10), 小于或等于 (参数一, 17)))
        赋值 (左边固定, 并且 (不等于 (参数一, 10), 不等于 (参数一, 13), 不等于 (参数一, 16)))
        赋值 (顶边固定, 并且 (不等于 (参数一, 12), 不等于 (参数一, 13), 不等于 (参数一, 14)))
        赋值 (右边固定, 并且 (不等于 (参数一, 11), 不等于 (参数一, 14), 不等于 (参数一, 17)))
        赋值 (底边固定, 并且 (不等于 (参数一, 15), 不等于 (参数一, 16), 不等于 (参数一, 17)))
    .默认
        
    .判断结束
    
.判断 (等于 (消息号, 160)) ' 非客户区鼠标移动……就当作是鼠标放开消息吧
     ' 如果真 (窗口号 ＝ 1)
     ' .如果真 (正在整体拖动)
         ' 正在移动主窗口 ＝ 假
    .如果真结束
     ' 正在拉伸 ＝ 假
    
    
    
.判断 (等于 (消息号, 162))
    
.判断 (等于 (消息号, #))
    重新读取吸附线 (0) ' 改变尺寸
    算出吸附窗口号 (窗口号)
    
.判断 (等于 (消息号, #))
     ' =======粘住尺寸较简单，不用考虑主窗口，因为一般来说主窗口是不能改变大小的======
    复制内存_指针到矩形 (窗口位置, 参数二, 16)
    赋值 (要判断的纵边, 0)
    .如果真 (等于 (左边固定, 假))
        赋值 (要判断的纵边, 1)
        .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), #最小宽度))
            赋值 (窗口位置.左边, 相减 (窗口位置.右边, #最小宽度))
        .如果真结束
        
        赋值 (纵边横坐标, 窗口位置.左边)
    .如果真结束
    .如果真 (等于 (右边固定, 假))
        赋值 (要判断的纵边, 2)
        .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), #最小宽度))
            赋值 (窗口位置.右边, 相加 (窗口位置.左边, #最小宽度))
        .如果真结束
        
        赋值 (纵边横坐标, 窗口位置.右边)
    .如果真结束
    
    赋值 (要判断的横边, 0)
    .如果真 (等于 (顶边固定, 假))
        赋值 (要判断的横边, 1)
        .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), #最小高度))
            赋值 (窗口位置.顶边, 相减 (窗口位置.底边, #最小高度))
        .如果真结束
        赋值 (横边纵坐标, 窗口位置.顶边)
    .如果真结束
    .如果真 (等于 (底边固定, 假))
        赋值 (要判断的横边, 2)
        .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), #最小高度))
            赋值 (窗口位置.底边, 相加 (窗口位置.顶边, #最小高度))
        .如果真结束
        赋值 (横边纵坐标, 窗口位置.底边)
    .如果真结束
    
    
    
    
    .如果真 (不等于 (要判断的横边, 0)) ' 有横边（上边或下边）在拉伸
        .变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
            .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
                到循环尾 ()
            .如果真结束
            .如果真 (小于或等于 (X, 8))
                .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            .如果真 (小于或等于 (取绝对值 (相减 (横向吸附线 [X], 纵坐标, 横边纵坐标)), 临界值))
                .如果真 (并且 (小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值)), 大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值))))
                    赋值 (临时_横向吸附线.吸附线, 横向吸附线 [X])
                    赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (横向吸附线 [X], 纵坐标, 横边纵坐标)))
                     ' 可以没有“原位置”，因为添加的时候都是原样复制，不会有变动
                     ' 也可以没有“靠近的窗口号”，因为本来就是这个窗口
                    加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
    .如果真结束
    .如果真 (不等于 (要判断的纵边, 0)) ' 有纵边（左边或右边）在拉伸
        .变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
            .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
                到循环尾 ()
            .如果真结束
            .如果真 (小于或等于 (X, 8))
                .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            .如果真 (小于或等于 (取绝对值 (相减 (纵向吸附线 [X], 横坐标, 纵边横坐标)), 临界值))
                .如果真 (并且 (小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值)), 大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值))))
                    赋值 (临时_纵向吸附线.吸附线, 纵向吸附线 [X])
                    赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (纵向吸附线 [X], 横坐标, 纵边横坐标)))
                     ' 可以没有“原位置”，因为添加的时候都是原样复制，不会有变动
                     ' 也可以没有“靠近的窗口号”，因为本来就是这个窗口
                    加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (并且 (不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 有可能有吸附点
        .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
            .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, Y)
                .如果真 (并且 (大于或等于 (匹配的横向吸附线 [X], 吸附线.纵坐标, 匹配的纵向吸附线 [Y], 吸附线.纵坐标1), 小于或等于 (匹配的横向吸附线 [X], 吸附线.纵坐标, 匹配的纵向吸附线 [Y], 吸附线.纵坐标2), 大于或等于 (匹配的纵向吸附线 [Y], 吸附线.横坐标, 匹配的横向吸附线 [X], 吸附线.横坐标1), 小于或等于 (匹配的纵向吸附线 [Y], 吸附线.横坐标, 匹配的横向吸附线 [X], 吸附线.横坐标2))) ' 线必须原来是交叉的
                    赋值 (临时_吸附点.横坐标, 匹配的纵向吸附线 [Y], 吸附线.横坐标)
                    赋值 (临时_吸附点.纵坐标, 匹配的横向吸附线 [X], 吸附线.纵坐标)
                    赋值 (临时_吸附点.距离X, 取绝对值 (相减 (临时_吸附点.横坐标, 纵边横坐标)))
                    赋值 (临时_吸附点.距离Y, 取绝对值 (相减 (临时_吸附点.纵坐标, 横边纵坐标)))
                    
                    
                    赋值 (临时_吸附点.距离, 相加 (相乘 (临时_吸附点.距离X, 临时_吸附点.距离X), 相乘 (临时_吸附点.距离Y, 临时_吸附点.距离Y)))
                    加入成员 (吸附点集, 临时_吸附点) ' 统计每个吸附点
                .如果真结束
                
            .变量循环尾 ()
            
        .变量循环尾 ()
    .如果真结束
    
     ' ========全部去掉“临界值”再算一次，因为单独的线吸附是不需要有临界值的，而吸附点在上面已经算过了=======
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
        .如果真 (或者 (大于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标1, 窗口位置.右边), 小于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标2, 窗口位置.左边))) ' 再一看，超出了！
            删除成员 (匹配的横向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, X)
        .如果真 (或者 (大于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标1, 窗口位置.底边), 小于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标2, 窗口位置.顶边))) ' 再一看，超出了！
            删除成员 (匹配的纵向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    
    
    .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0)) ' 有横向吸附线
        赋值 (横线_距离最小值, 匹配的横向吸附线 [1].距离)
        赋值 (横线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的横向吸附线), 1, X)
            .如果真 (小于 (匹配的横向吸附线 [X], 距离, 横线_距离最小值)) ' 发现更靠近的线
                赋值 (横线_距离最小值, 匹配的横向吸附线 [X], 距离)
                赋值 (横线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0)) ' 有纵向吸附线
        赋值 (纵线_距离最小值, 匹配的纵向吸附线 [1].距离)
        赋值 (纵线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的纵向吸附线), 1, X)
            .如果真 (小于 (匹配的纵向吸附线 [X], 距离, 纵线_距离最小值)) ' 发现更靠近的线
                赋值 (纵线_距离最小值, 匹配的纵向吸附线 [X], 距离)
                赋值 (纵线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (吸附点集), 0)) ' 有吸附点
        赋值 (点_距离最小值, 吸附点集 [1].距离)
        赋值 (点_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (吸附点集), 1, X)
            .如果真 (小于 (吸附点集 [X], 距离, 点_距离最小值)) ' 发现有更靠近的点
                赋值 (点_距离最小值, 吸附点集 [X], 距离)
                赋值 (点_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    
    
    .如果 (并且 (不等于 (取数组成员数 (吸附点集), 0), 不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 若有点，又有双线
        
        .如果 (并且 (小于 (吸附点集 [点_距离最小编号], 距离X, 匹配的纵向吸附线 [纵线_距离最小编号], 距离), 小于 (吸附点集 [点_距离最小编号], 距离Y, 匹配的横向吸附线 [横线_距离最小编号], 距离))) ' 看哪个更靠近
            赋值 (横边纵坐标, 吸附点集 [点_距离最小编号], 纵坐标)
            赋值 (纵边横坐标, 吸附点集 [点_距离最小编号], 横坐标)
            
        .否则
            赋值 (横边纵坐标, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
            赋值 (纵边横坐标, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果结束
        
    .否则
         ' 没有双线和点抢位置了
         ' 注意必须先线后点
        .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0))
            赋值 (纵边横坐标, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0))
            赋值 (横边纵坐标, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (吸附点集), 0))
            赋值 (横边纵坐标, 吸附点集 [点_距离最小编号], 纵坐标)
            赋值 (纵边横坐标, 吸附点集 [点_距离最小编号], 横坐标)
        .如果真结束
        
    .如果结束
    
    
     ' =========根据情况改写窗口位置========
    .判断开始 (等于 (要判断的横边, 1)) ' 顶边在拉伸
        赋值 (窗口位置.顶边, 横边纵坐标)
        
    .判断 (等于 (要判断的横边, 2)) ' 底边在拉伸
        赋值 (窗口位置.底边, 横边纵坐标)
        
    .默认
        
    .判断结束
    
    .判断开始 (等于 (要判断的纵边, 1)) ' 左边在拉伸
        赋值 (窗口位置.左边, 纵边横坐标)
        
    .判断 (等于 (要判断的纵边, 2)) ' 右边在拉伸
        赋值 (窗口位置.右边, 纵边横坐标)
        
    .默认
        
    .判断结束
    
    
    复制内存_矩形到指针 (参数二, 窗口位置, 16)
    
    
.默认
    
.判断结束


.子程序 重新读取吸附线_屏幕边缘, 空白型, , 
.局部变量 屏幕矩形, 矩形_, , , 去掉任务栏
.局部变量 任务栏矩形, 矩形_, , , 

取窗口位置 (FindWindow (“Shell_TrayWnd”, “”), 任务栏矩形)
赋值 (屏幕矩形.左边, 0)
赋值 (屏幕矩形.顶边, 0)
赋值 (屏幕矩形.右边, 取屏幕宽度 ())
赋值 (屏幕矩形.底边, 取屏幕高度 ())
.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0), 小于 (任务栏矩形.右边, 任务栏矩形.底边))) ' 任务栏在左边
    赋值 (屏幕矩形.左边, 任务栏矩形.右边)
.如果真结束

.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0), 大于 (任务栏矩形.右边, 任务栏矩形.底边))) ' 任务栏在顶部
    赋值 (屏幕矩形.顶边, 任务栏矩形.底边)
.如果真结束

.如果真 (并且 (大于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0))) ' 任务栏在下面
    赋值 (屏幕矩形.底边, 任务栏矩形.顶边)
.如果真结束

.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 大于 (任务栏矩形.左边, 0))) ' 任务栏在右边
    赋值 (屏幕矩形.右边, 任务栏矩形.左边)
.如果真结束



赋值 (横向吸附线 [9].纵坐标, 屏幕矩形.顶边)
赋值 (横向吸附线 [9].横坐标1, 屏幕矩形.左边)
赋值 (横向吸附线 [9].横坐标2, 屏幕矩形.右边)
赋值 (横向吸附线 [10].纵坐标, 屏幕矩形.底边)
赋值 (横向吸附线 [10].横坐标1, 屏幕矩形.左边)
赋值 (横向吸附线 [10].横坐标2, 屏幕矩形.右边)

赋值 (纵向吸附线 [9].横坐标, 屏幕矩形.左边)
赋值 (纵向吸附线 [9].纵坐标1, 屏幕矩形.顶边)
赋值 (纵向吸附线 [9].纵坐标2, 屏幕矩形.底边)
赋值 (纵向吸附线 [10].横坐标, 屏幕矩形.右边)
赋值 (纵向吸附线 [10].纵坐标1, 屏幕矩形.顶边)
赋值 (纵向吸附线 [10].纵坐标2, 屏幕矩形.底边)


.子程序 主窗口左键放开事件_, 空白型, , 
.如果真 (正在整体拖动)
    赋值 (正在整体拖动, 假)
.如果真结束
重新读取吸附线 (0)
算出吸附窗口号 (1)
算出吸附窗口号 (2)
算出吸附窗口号 (3)
算出吸附窗口号 (4)

.子程序 算出吸附窗口号, 空白型, , 算出指定窗口与哪个窗口粘在了一起
.参数 窗口号, 整数型, , 

.局部变量 吸附了窗口_, 逻辑型, , "3", 
.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 X, 整数型, , , 
.局部变量 临时_文本位置, 整数型, , , 不吸附任何窗口时，需要从原来吸附的窗口的<所吸附的窗口>中删除该窗口号，所以需要文本定位变量

.如果真 (或者 (正在整体拖动, 正在移动窗口))
    返回 ()
.如果真结束
重定义数组 (吸附了窗口_, 假, 4)
取窗口位置 (窗口句柄 [窗口号], 窗口位置)
.变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
    .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设定该窗口的吸附线无效
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标), 0)) ' 判断顶边（要求完全匹配）
        .如果真 (并且 (大于或等于 (窗口位置.右边, 横向吸附线 [X], 横坐标1), 小于或等于 (窗口位置.左边, 横向吸附线 [X], 横坐标2))) ' 横坐标也在范围内
            .如果真 (小于或等于 (X, 8)) ' X>8说明是屏幕边缘，只有X≤8时吸附的才是窗口
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真) ' 根据X的值可以算出这条线属于哪个窗口（每个窗口固定2条线）
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1)) ' 发现目标窗口的吸附标记中没有本窗口
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号))) ' 添加！
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标), 0)) ' 判断底边
        .如果真 (并且 (大于或等于 (窗口位置.右边, 横向吸附线 [X], 横坐标1), 小于或等于 (窗口位置.左边, 横向吸附线 [X], 横坐标2)))
            .如果真 (小于或等于 (X, 8))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
    .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1))))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设定该窗口的吸附线无效
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标), 0))
        .如果真 (并且 (大于或等于 (窗口位置.底边, 纵向吸附线 [X], 纵坐标1), 小于或等于 (窗口位置.顶边, 纵向吸附线 [X], 纵坐标2))) ' 纵坐标也在范围内
            .如果真 (小于或等于 (X, 8))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标), 0))
        .如果真 (并且 (大于或等于 (窗口位置.底边, 纵向吸附线 [X], 纵坐标1), 小于或等于 (窗口位置.顶边, 纵向吸附线 [X], 纵坐标2)))
            .如果真 (小于或等于 (X, 8))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
赋值 (吸附的窗口号 [窗口号], 相加 (选择 (吸附了窗口_ [1], “1”, “”), 选择 (吸附了窗口_ [2], “2”, “”), 选择 (吸附了窗口_ [3], “3”, “”), 选择 (吸附了窗口_ [4], “4”, “”))) ' 赋值


.变量循环首 (1, 取数组成员数 (吸附的窗口号), 1, X)
    .如果真 (等于 (X, 窗口号)) ' 是本窗口
        到循环尾 () ' 不处理
    .如果真结束
    .如果真 (等于 (吸附了窗口_ [X], 假)) ' 没有吸附这个窗口了
        赋值 (临时_文本位置, 寻找文本 (吸附的窗口号 [X], 到文本 (窗口号), , 假))
        .如果真 (不等于 (临时_文本位置, -1)) ' 目标窗口还有标记
            赋值 (吸附的窗口号 [X], 相加 (取文本左边 (吸附的窗口号 [X], 相减 (临时_文本位置, 1)), 取文本右边 (吸附的窗口号 [X], 相减 (取文本长度 (吸附的窗口号 [X]), 临时_文本位置)))) ' 删除目标窗口的吸附标记
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()

算出需要整体拖动的窗口号 ()

.子程序 移动窗口, 空白型, , 
.参数 窗口号, 整数型, , 
.参数 左边, 整数型, 可空, 省略即为不动
.参数 右边, 整数型, 可空, 
.参数 顶边, 整数型, 可空, 
.参数 底边, 整数型, 可空, 

.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 窗口宽度, 整数型, , , 
.局部变量 窗口高度, 整数型, , , 

赋值 (正在移动窗口, 真)
取窗口位置 (窗口句柄 [窗口号], 窗口位置) ' 先取出
赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边))
赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
.如果真 (等于 (是否为空 (左边), 假)) ' 输入了值
    赋值 (窗口位置.左边, 左边)
.如果真结束
.如果真 (等于 (是否为空 (右边), 假))
    赋值 (窗口位置.右边, 右边)
    赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边))
.如果真结束
.如果真 (等于 (是否为空 (顶边), 假))
    赋值 (窗口位置.顶边, 顶边)
.如果真结束
.如果真 (等于 (是否为空 (底边), 假))
    赋值 (窗口位置.底边, 底边)
    赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
.如果真结束
移动窗口_ (窗口句柄 [窗口号], 窗口位置.左边, 窗口位置.顶边, 窗口宽度, 窗口高度, 1)
赋值 (正在移动窗口, 假)

.子程序 算出需要整体拖动的窗口号, 空白型, , 整体拖动：即当主窗口拖动时跟着移动的窗口
.局部变量 窗口需要整体拖动, 逻辑型, , "4", 指定某个窗口是否被主窗口直接或简介吸附（实际上也用作了用来指定窗口是否被遍历过的数组）（注：第一个变量无意义，因为是主窗口本身）
.局部变量 X, 整数型, , , 

递归_深度计算吸附 (1, 窗口需要整体拖动) ' 一层一层，一层一层……计算
.变量循环首 (2, 4, 1, X) ' X代表窗口号
    .如果 (窗口需要整体拖动 [X])
        赋值 (需要整体拖动的窗口 [X], 启用, 真) ' 记录与主窗口之间的相对位置
        赋值 (需要整体拖动的窗口 [X], 横向偏移, 相减 (取窗口位置_特定值 (X, 1), 取窗口位置_特定值 (1, 1)))
        赋值 (需要整体拖动的窗口 [X], 纵向偏移, 相减 (取窗口位置_特定值 (X, 3), 取窗口位置_特定值 (1, 3)))
    .否则
        赋值 (需要整体拖动的窗口 [X], 启用, 假)
    .如果结束
    
.变量循环尾 ()

.子程序 取窗口位置_特定值, 整数型, , 
.参数 窗口号, 整数型, , 
.参数 值, 整数型, , 1左 2右 3顶 4底 5宽 6高

.局部变量 窗口位置, 矩形_, , , 

取窗口位置 (窗口句柄 [窗口号], 窗口位置)
返回 (多项选择 (值, 窗口位置.左边, 窗口位置.右边, 窗口位置.顶边, 窗口位置.底边, 相减 (窗口位置.右边, 窗口位置.左边), 相减 (窗口位置.底边, 窗口位置.顶边)))

.子程序 递归_深度计算吸附, 空白型, , 
.参数 当前窗口号, 整数型, , 这一层所调查的窗口
.参数 , 逻辑型, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 下一层的窗口号, 整数型, , , 
.局部变量 要计算的窗口号, 文本型, , , 这一层调查的窗口所吸附的窗口

赋值 (要计算的窗口号, 吸附的窗口号 [当前窗口号]) ' 读出这一层的窗口吸附了哪些
.变量循环首 (1, 取文本长度 (要计算的窗口号), 1, X)
    赋值 (下一层的窗口号, 到数值 (取文本中间 (要计算的窗口号, X, 1))) ' 取出第X位
    
    .如果真 (并且 (不等于 (下一层的窗口号, 当前窗口号), 不等于 (下一层的窗口号, 1), 窗口吸附线有效 [下一层的窗口号])) ' 不是当前窗口（不能自己算自己）……理论上不会发生的 且 不是主窗口（这个会发生），窗口设为活动才计算
        .如果真 (等于 ( [下一层的窗口号], 假)) ' 还没调查过
            赋值 ( [下一层的窗口号], 真) ' 设置为真
            递归_深度计算吸附 (下一层的窗口号, ) ' 继续，下一层！
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()

.子程序 设置窗口活动性, 空白型, , 指定该窗口的吸附线是否有效
.参数 窗口号, 整数型, , 
.参数 活动性, 逻辑型, , 

赋值 (窗口吸附线有效 [窗口号], 活动性)
算出吸附窗口号 (1) ' 把隐藏的窗口从整体拖动列表里删除，或者把重新显示的窗口重新添加到列表
算出吸附窗口号 (2)
算出吸附窗口号 (3)
算出吸附窗口号 (4)

.子程序 是否已经开始吸附, 逻辑型, , 
返回 (已经开始)

.子程序 主窗口左键按下事件_, 空白型, , 
.如果真 (不等于 (吸附的窗口号 [1], “”))
    赋值 (正在整体拖动, 真)
.如果真结束
重新读取吸附线_屏幕边缘 ()

.子程序 重新钩上, 空白型, , 
.参数 窗口号, 整数型, , 0表示全部

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (旧过程号), 1, X)
    .如果真 (或者 (等于 (窗口号, X), 等于 (窗口号, 0)))
        SetWindowLong (窗口句柄 [窗口号], -4, 旧过程号 [窗口号])
        赋值 (旧过程号 [窗口号], SetWindowLong (窗口句柄 [窗口号], -4, 到数值 (&消息处理子程序)))
    .如果真结束
    
.变量循环尾 ()

.程序集 控制程序集, , , 绝大多数控制指令和功能性函数都在这

.程序集变量 媒体长度, 小数型, , , 一次取出，为了减少资源占用
.程序集变量 回调函数句柄, 整数型, , , 
.程序集变量 歌词_当前, 歌词行, , "0", 
.程序集变量 歌词_行号, 整数型, , , 指定播放到哪一行了
.程序集变量 歌词_偏移值, 小数型, , , 
.程序集变量 目的标签句柄, 整数型, , , 
.程序集变量 等待网络搜索, 逻辑型, , , 正在等待网络歌词的搜索结果
.程序集变量 歌词窗需要刷新, 逻辑型, , , 属于即时变量
.程序集变量 桌面歌词需要刷新, 逻辑型, , , 同上
.程序集变量 卡拉OK模式被改变, 逻辑型, , , 同上
.程序集变量 句首时间需要刷新, 逻辑型, , , 同上，属于即时变量，当调整歌词（非二元调整），需要重新读取桌面歌词这一句的句首时间
.程序集变量 正在播放项, 整数型, , , 值为“超级列表框”项目号，从0开始
.程序集变量 正在退出程序, 逻辑型, , , 
.程序集变量 歌词_排除行, 文本型, , "0", 歌词内包含的歌手、歌曲标题等信息，在保存时需要重新加上
.程序集变量 历史记录, 历史记录, , "0", 播放的历史记录，全路径
.程序集变量 记录_序号, 整数型, , , 值为“历史记录”数组的下标
.程序集变量 热键标识组, 热键标识, , "0", 
.程序集变量 快捷键组, 快捷键, , "0", 
.程序集变量 静音了, 逻辑型, , , 
.程序集变量 预约列表, 预约记录, , "0", 
.程序集变量 修改标签任务, 修改标签任务, , "0", 有些标签不能在播放时修改，需要等这首结束了才行
.程序集变量 正在等待桌面歌词, 逻辑型, , , 
.程序集变量 TAG信息, 音乐文件标签, , , 当前播放项的音乐标签
.程序集变量 显示的Title, 文本型, , , 有时Tag信息的Title成员是空值，此变量的值就是文件名
.程序集变量 t, 整数型, , , 
.程序集变量 缓冲变量_托盘提示文本, 文本型, , , 
.子程序 _启动子程序, 整数型, , 
.如果真 (等于 (是否为调试版 (), 假))
    .如果真 (模块_程序是否已运行 (“FYTT1.0”))
        通知已启动进程 () ' 通知已经运行的进程
        结束 ()
    .如果真结束
    
.如果真结束


置随机数种子 ()

读入配置 ()

赋值 (窗口顺序, { 4, 3, 2, 1 }) ' 预定义窗口层次

载入 (主窗口, , 假)
载入 (列表窗, , 假)
载入 (歌词窗, , 假)
载入 (均衡器窗, , 假)

载入 (菜单窗口, , 假)

设置临界值 (播放器设置.吸附临界值)
开始吸附 (真, 主窗口.取窗口句柄 (), 列表窗.取窗口句柄 (), 歌词窗.取窗口句柄 (), 均衡器窗.取窗口句柄 ()) ' 吸附效果
 ' 设置窗口活动性 (1, 真)
 ' 设置窗口活动性 (2, 真)
 ' 设置窗口活动性 (3, 真)
 ' 设置窗口活动性 (4, 假)

应用配置 ()


赋值 (正在播放项, -1)

赋值 (主窗口., 真) ' 显示窗口
主窗口.刷新显示 ()
.如果真 (播放器设置.列表窗_显示)
    赋值 (列表窗., 真)
    刷新按钮_列表窗 (真) ' 主窗口上方按钮更改为按下
.如果真结束
.如果真 (播放器设置.歌词窗_显示)
    赋值 (歌词窗., 真)
    刷新按钮_歌词窗 (真)
.如果真结束
.如果真 (播放器设置.均衡器窗_显示)
    赋值 (均衡器窗., 真)
    刷新按钮_均衡器窗 (真)
.如果真结束
.如果真 (播放器设置.桌面歌词_显示)
    运行桌面歌词 ()
.如果真结束
主窗口.获取焦点 ()

.如果 (等于 (播放器设置.引擎号, 0))
    BASS_Init (-1, 44100, 0, 0, 0) ' 初始化Bass解码器
    搜索插件 ()
.否则
    MCI初始化 ()
.如果结束

.如果真 (等于 (处理附带命令行 (), 假)) ' 没有命令行，则继续上次
    自动播放 ()
.如果真结束
列表窗.允许重画 (.)

释放物理内存 ()

返回 (0)

.子程序 处理附带命令行, 逻辑型, , 返回真表示有命令行，假表示没有
.局部变量 命令行, 文本型, , "0", 

取命令行 (命令行)
.如果真 (等于 (取数组成员数 (命令行), 0))
    返回 (假)
.如果真结束
主控制集_打开媒体 (连接文本数组 (命令行, #换行符), #换行符, 真, , 真, 真)
歌词实时显示 (假, , 假)
赋值 (歌词窗准许刷新, 真)

返回 (真)

.子程序 通知已启动进程, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 命令行, 文本型, , "0", 

.变量循环首 (1, 8000, 1, X)
    .如果真 (等于 (取窗口标题 (X), #接收标志))
        取命令行 (命令行)
        设置窗口标题_ (X, 连接文本数组 (命令行, #换行符))
        发送消息 (X, 32885, -1, 0)
        返回 ()
    .如果真结束
    
.变量循环尾 ()

.子程序 自动播放, 空白型, , 
.局部变量 项号, 整数型, , , 
.局部变量 有播放, 逻辑型, , , 

赋值 (有播放, 假)
.如果 (播放器设置.继续上次播放)
    赋值 (项号, 到数值 (读配置项 (相加 (取运行目录 (), #配置文件名), “标准”, “播放项”, “-1”)))
    .如果 (不等于 (项号, -1))
        .如果 (主控制集_打开媒体 (列表窗.取文本 (., 相加 (项号, 1), 4), #换行符, 假, 项号, 真, 假))
            .如果 (播放器设置.记住上次位置)
                媒体_置位置 (到数值 (读配置项 (相加 (取运行目录 (), #配置文件名), “标准”, “播放进度”, “0”))) ' 跳转
                媒体_播放 (假)
            .否则
                媒体_播放 (真)
            .如果结束
            刷新按钮图片 ()
            列表窗.保证显示 (., 项号)
            赋值 (有播放, 真)
        .否则
            赋值 (有播放, 假)
        .如果结束
        
    .否则
        赋值 (有播放, 假)
    .如果结束
    
    歌词实时显示 (假, , 假)
    赋值 (歌词窗准许刷新, 真)
    
.否则
    赋值 (有播放, 假)
.如果结束
.如果真 (等于 (有播放, 假))
    滚动显示任务栏文本 (#程序名) ' 没有自动播放，则写上程序名
.如果真结束
 ' 信息框 (“zdbf”, 0, )
赋值 (歌词窗准许刷新, 真)

.子程序 读入数据库, 空白型, , 
.参数 仅刷新, 逻辑型, 可空, 默认假

.局部变量 X, 整数型, , , 
.局部变量 当前项目号, 整数型, , , 
.局部变量 字段, 字段信息, , , 
.局部变量 字段表, 字段信息, , "0", 
.局部变量 临时_Tag信息, 音乐文件标签, , , 

.如果真 (是否为空 (仅刷新))
    赋值 (仅刷新, 假)
.如果真结束
.如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\Playlist.edb”)), 假))
    赋值 (字段.名称, “TITLE”)
    赋值 (字段.类型, #文本型)
    赋值 (字段.最大文本长度, 128)
    加入成员 (字段表, 字段)
    
    赋值 (字段.名称, “ARTIST”)
    赋值 (字段.类型, #文本型)
    赋值 (字段.最大文本长度, 128)
    加入成员 (字段表, 字段)
    
    赋值 (字段.名称, “ALBUM”)
    赋值 (字段.类型, #文本型)
    赋值 (字段.最大文本长度, 128)
    加入成员 (字段表, 字段)
    
    赋值 (字段.名称, “FILEPATH”)
    赋值 (字段.类型, #文本型)
    赋值 (字段.最大文本长度, 270)
    加入成员 (字段表, 字段)
    
    赋值 (字段.名称, “TIME”)
    赋值 (字段.类型, #文本型)
    赋值 (字段.最大文本长度, 7)
    加入成员 (字段表, 字段)
    
    
    创建 (相加 (取运行目录 (), “\Playlist.edb”), 字段表)
.如果真结束

赋值 (列表窗..数据库文件名, 相加 (取运行目录 (), “\Playlist.edb”))
列表窗.禁止重画 (.)
赋值 (t, 取启动时间 ())
.变量循环首 (1, 列表窗.取行数 (.), 1, X)
    赋值 (临时_Tag信息.Title, 列表窗.取文本 (., X, 1))
    赋值 (临时_Tag信息.Artist, 列表窗.取文本 (., X, 2))
    赋值 (临时_Tag信息.Album, 列表窗.取文本 (., X, 3))
    .如果 (仅刷新)
        列表窗.置标题 (., 相减 (X, 1), 0, 生成标题 (播放器设置.标签显示方案_列表, 临时_Tag信息, 列表窗.取文本 (., X, 4), 真))
        
    .否则
        赋值 (当前项目号, 列表窗.插入表项 (., , 生成标题 (播放器设置.标签显示方案_列表, 临时_Tag信息, 列表窗.取文本 (., X, 4), 真), , , , ))
        列表窗.置标题 (., 当前项目号, 1, 列表窗.取文本 (., X, 5))
        
    .如果结束
    
.变量循环尾 ()
列表窗.允许重画 (.)

输出调试文本 (相加 (“读数据库”, 到文本 (相减 (取启动时间 (), t))))
 ' 信息框 (“sjk”, 0, )

.子程序 运行桌面歌词, 逻辑型, , 
.如果真 (正在等待桌面歌词)
    返回 (假)
.如果真结束
赋值 (正在等待桌面歌词, 真)
.如果真 (等于 (目的标签句柄, 0))
    返回 (运行 (相加 (取运行目录 (), “\DesktopLrc.exe ”, 到文本 (主窗口.取窗口句柄 (.))), 假, ))
.如果真结束
返回 (真)

.子程序 关闭桌面歌词, 逻辑型, , 
.如果真 (正在等待桌面歌词)
    返回 (假)
.如果真结束
赋值 (正在等待桌面歌词, 真)
向桌面歌词发送消息 (“E”)
返回 (真)

.子程序 取控件标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 窗口标题长度, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (窗口标题长度, 取窗口标题长度 (窗口句柄))
赋值 (返回值, 取空白文本 (窗口标题长度))
给出窗口标题 (窗口句柄, 返回值, 相加 (窗口标题长度, 1))
返回 (返回值)

.子程序 收到消息, 空白型, , 
.参数 数据文本, 文本型, , 

.局部变量 设置标识符, 文本型, , , 
.局部变量 内容文本, 文本型, , , 
.局部变量 分割的文本, 文本型, , "0", 

.判断开始 (等于 (取文本左边 (数据文本, 1), “H”)) ' H=Handle句柄。相当于收到桌面歌词启动完毕的消息
    赋值 (目的标签句柄, 到数值 (取文本右边 (数据文本, 相减 (取文本长度 (数据文本), 1))))
    
    刷新按钮_桌面歌词 (真)
    赋值 (正在等待桌面歌词, 假)
    赋值 (播放器设置.桌面歌词_显示, 真)
    
    应用配置_桌面歌词 (0)
    
    向桌面歌词发送消息 (“S桌面歌词0.0000”)
    
    
    
.判断 (等于 (取文本左边 (数据文本, 1), “E”)) ' 结束
    赋值 (分割的文本, 分割文本 (取文本右边 (数据文本, 相减 (取文本长度 (数据文本), 1)), “,”, ))
    .如果真 (大于或等于 (取数组成员数 (分割的文本), 3))
        赋值 (播放器设置.桌面歌词_窗口左边, 到数值 (分割的文本 [1]))
        赋值 (播放器设置.桌面歌词_窗口顶边, 到数值 (分割的文本 [2]))
        赋值 (播放器设置.桌面歌词_窗口宽度, 到数值 (分割的文本 [3]))
    .如果真结束
    赋值 (目的标签句柄, 0)
    赋值 (正在等待桌面歌词, 假)
    刷新按钮_桌面歌词 (假)
    .如果 (正在退出程序) ' 关闭程序时的返回消息
        写出配置 ()
        结束自身进程 ()
    .否则
        赋值 (播放器设置.桌面歌词_显示, 假)
    .如果结束
    
.判断 (等于 (取文本左边 (数据文本, 1), “C”)) ' C=Change，改变
    赋值 (设置标识符, 取文本中间 (数据文本, 2, 5))
    赋值 (内容文本, 取文本右边 (数据文本, 相减 (取文本长度 (数据文本), 6)))
    .判断开始 (等于 (设置标识符, “ftsze”))
        赋值 (播放器设置.桌面歌词_字体大小, 到数值 (内容文本))
        .如果真 (是否已创建 (设置窗口))
            刷新字体显示_桌面歌词选项 ()
        .如果真结束
        
    .判断 (等于 (设置标识符, “islck”))
        赋值 (播放器设置.桌面歌词_锁定, 等于 (内容文本, “1”))
    .默认
        
    .判断结束
    
.默认
    
.判断结束


.子程序 向桌面歌词发送消息, 空白型, , 
.参数 消息文本, 文本型, , 
.参数 等待返回, 逻辑型, 可空, 默认真

.如果真 (是否为空 (等待返回))
    赋值 (等待返回, 真)
.如果真结束
.如果真 (等于 (播放器设置.桌面歌词_显示, 假))
    返回 ()
.如果真结束
设置窗口标题_ (目的标签句柄, 消息文本)
.如果 (等待返回)
    发送消息 (目的标签句柄, 32885, 0, 0)
.否则
    投递消息 (目的标签句柄, 32885, 0, 0)
.如果结束


.子程序 搜索插件, 空白型, , 以支持更多的格式
.局部变量 目录, 文本型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 加载号, 整数型, , , 
.局部变量 插件信息, BASS_PLUGININFO, , , 
.局部变量 支持类型信息, BASS_PLUGINFORM, , , 
.局部变量 扩展名, 文本型, , , 
.局部变量 子过滤器, 文本型, , , 
.局部变量 X, 整数型, , , 
.局部变量 临时_BASS插件信息, BASS插件信息, , , 

赋值 (目录, 相加 (取运行目录 (), “\Plugins\”))
赋值 (文件名, 寻找文件 (相加 (目录, “bass*.dll”), ))

赋值 (扩展名, “*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aif”)
赋值 (子过滤器, “基本(*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aif)|*.mp3;*.mp2;*.mp1;*.ogg;*.wav;*.aif|”)
.判断循环首 (不等于 (文件名, “”))
    .如果真 (等于 (位与 (取文件属性 (相加 (目录, 文件名)), #隐藏文件), 0)) ' 不是被隐藏（禁用）的插件
        赋值 (加载号, BASS_PluginLoad (相加 (目录, 文件名), 0))
        .如果真 (不等于 (加载号, 0))
            复制内存_BASS_PLUGININFO (插件信息, BASS_PluginGetInfo (加载号), 12)
            .变量循环首 (1, 插件信息.formatc, 1, X) ' 取支持的类型数
                复制内存_BASS_PLUGINFORM (支持类型信息, 相加 (插件信息.formats, 相乘 (12, 相减 (X, 1))), 12) ' 再次把指针转换成结构
                 ' 添加过滤器
                赋值 (扩展名, 相加 (扩展名, 支持类型信息.exts, “;”))
                赋值 (子过滤器, 相加 (子过滤器, 支持类型信息.name, “(”, 支持类型信息.exts, “)|”, 支持类型信息.exts, “|”))
                 ' 添加插件信息
                赋值 (临时_BASS插件信息.文件名, 文件名)
                赋值 (临时_BASS插件信息.提供支持, 相加 (临时_BASS插件信息.提供支持, 支持类型信息.name, “(”, 支持类型信息.exts, “)”, 选择 (不等于 (X, 插件信息.formatc), “/”, “”))) ' 最后一个不加斜杠，其他加斜杠以分割
            .变量循环尾 ()
            加入成员 (已加载的插件, 临时_BASS插件信息)
            赋值 (临时_BASS插件信息.提供支持, “”) ' 清空
        .如果真结束
        
    .如果真结束
    
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()

赋值 (扩展名, 取文本左边 (扩展名, 相减 (取文本长度 (扩展名), 1)))
赋值 (子过滤器, 相加 (子过滤器, “所有文件(*.*)|*.*”))
赋值 (播放器设置.过滤器, 相加 (“所有支持的类型|”, 扩展名, “|”, 子过滤器))
赋值 (支持的扩展名, 扩展名)

.如果真 (播放器设置.使用BASS播放MID)
    BASS_SetConfigPtr (#BASS_CONFIG_MIDI_DEFFONT, 子文本替换 (播放器设置.音色库路径, “%rundir%”, 取运行目录 (), , , 假))
    
.如果真结束


.子程序 MCI初始化, 空白型, , 
赋值 (播放器设置.过滤器, #默认过滤器)
赋值 (支持的扩展名, “*.mp3;*.mp2;*.mp1;*.wav;*.wma;*.mid;*.midi”)

.子程序 退出程序, 空白型, , 

菜单窗口_直接隐藏 ()

终止搜索 ()

.如果真 (等于 (媒体_取状态 (), 1))
    媒体_暂停 ()
.如果真结束

赋值 (主窗口.., 假)


赋值 (播放器设置.主窗口_左边, 主窗口.)
赋值 (播放器设置.主窗口_顶边, 主窗口.)

赋值 (播放器设置.列表窗_显示, 列表窗.)
赋值 (播放器设置.列表窗_左边, 列表窗.)
赋值 (播放器设置.列表窗_顶边, 列表窗.)
赋值 (播放器设置.列表窗_宽度, 列表窗.)
赋值 (播放器设置.列表窗_高度, 列表窗.)

赋值 (播放器设置.歌词窗_显示, 歌词窗.)
赋值 (播放器设置.歌词窗_左边, 歌词窗.)
赋值 (播放器设置.歌词窗_顶边, 歌词窗.)
赋值 (播放器设置.歌词窗_宽度, 歌词窗.)
赋值 (播放器设置.歌词窗_高度, 歌词窗.)

赋值 (播放器设置.均衡器窗_显示, 均衡器窗.)
赋值 (播放器设置.均衡器窗_左边, 均衡器窗.)
赋值 (播放器设置.均衡器窗_顶边, 均衡器窗.)

.如果真 (是否已创建 (主窗口)) ' 呃……保险一点
    赋值 (主窗口., 假)
.如果真结束

赋值 (列表窗., 假)
赋值 (歌词窗., 假)
赋值 (均衡器窗., 假)

处理修改标签任务 ()
取消行列色 ()

Gdip引擎卸载 ()
.如果 (播放器设置.桌面歌词_显示)
    赋值 (正在退出程序, 真)
    关闭桌面歌词 () ' 若打开桌面歌词，先等待关闭
    延时 (3000) ' 等待时间3秒
    写出配置 () ' 若超时还未返回，则直接退出
    .如果真 (等于 (播放器设置.引擎号, 0))
        BASS_Free ()
    .如果真结束
    
.否则
    写出配置 () ' 没打开，直接关闭
    .如果真 (等于 (播放器设置.引擎号, 0))
        BASS_Free ()
    .如果真结束
    
    
.如果结束
结束自身进程 ()

.子程序 结束自身进程, 空白型, , XP底下，结束()命令老出错
.局部变量 当前进程ID, 整数型, , , 
.局部变量 进程句柄, 整数型, , , 

取进程ID (主窗口.取窗口句柄 (), 当前进程ID)
赋值 (进程句柄, 打开进程 (1, 假, 当前进程ID))
结束进程 (进程句柄, 0)
关闭进程 (进程句柄)
结束 ()


.子程序 读入配置, 空白型, , 
.局部变量 运行目录, 文本型, , , 

赋值 (运行目录, 取运行目录 ())

赋值 (播放器设置.提示过, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “提示过”, “”))

赋值 (播放器设置.引擎号, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “引擎号”, “0”)))
赋值 (播放器设置.吸附临界值, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “吸附临界值”, “20”)))
赋值 (播放器设置.音色库路径, 读配置项 (相加 (运行目录, #配置文件名), “MIDI选项”, “音色库路径”, “%rundir%\Plugins\ChoriumRevA.SF2”))
赋值 (播放器设置.使用BASS播放MID, 等于 (读配置项 (相加 (运行目录, #配置文件名), “MIDI选项”, “使用BASS播放MID”, “1”), “1”))
赋值 (播放器设置.循环模式, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “循环模式”, “2”)))
赋值 (播放器设置.变速值, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “变速值”, “30”)))
赋值 (播放器设置.音量, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “音量”, “60”)))
赋值 (播放器设置.历史记录数量, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “历史记录数量”, “50”)))
赋值 (播放器设置.开启历史记录, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “开启历史记录”, “1”), “1”))
赋值 (播放器设置.热键, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “热键”, #默认热键))
赋值 (播放器设置.继续上次播放, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “继续上次播放”, “1”), “1”))
赋值 (播放器设置.记住上次位置, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “记住上次位置”, “1”), “1”))
赋值 (播放器设置.快进快退长度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “快进快退长度”, “10”)))
赋值 (播放器设置.换歌气球提示, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “换歌气球提示”, “1”), “1”))
赋值 (播放器设置.仅隐藏时显示气球, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “仅隐藏时显示气球”, “1”), “1”))
赋值 (播放器设置.任务栏滚动信息, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “任务栏滚动信息”, “1”), “1”))
赋值 (播放器设置.仅隐藏时显示托盘图标, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “仅隐藏时显示托盘图标”, “0”), “1”))
赋值 (播放器设置.保证当前播放, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “保证当前播放”, “1”), “1”))
赋值 (播放器设置.最小化时隐藏, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “最小化时隐藏”, “1”), “1”))
赋值 (播放器设置.关闭按钮退出, 等于 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “关闭按钮退出”, “1”), “1”))
赋值 (播放器设置.透明度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “透明度”, “0”)))
赋值 (播放器设置.歌词_扫描路径, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词扫描路径”, “%localdir%”))
赋值 (播放器设置.歌词_扫描文件名, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词扫描文件名”, “(文件名).lrc”))
赋值 (播放器设置.歌词_保存路径, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词保存路径”, “%localdir%”))
赋值 (播放器设置.歌词_保存文件名, 读配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词保存文件名”, “(文件名).lrc”))

赋值 (播放器设置.回声强度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “回声强度”, “0”)))
赋值 (播放器设置.回声时间, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “标准”, “回声时间”, “500”)))

赋值 (播放器设置.MP3标签读取顺序, 读配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “读取顺序”, “ID3V2->APE->ID3V1”))
赋值 (播放器设置.MP3标签类型, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “标签类型”, “6”)))
赋值 (播放器设置.ID3V2编码类型, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “ID3V2编码”, “0”)))

赋值 (播放器设置.标签显示方案_列表, 读配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “列表”, “(标题) - (艺术家)”))
赋值 (播放器设置.标签显示方案_托盘气球, 读配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “托盘气球”, “(标题) - (艺术家) - (专辑)”))
赋值 (播放器设置.标签显示方案_窗口标题, 读配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “窗口标题”, “(标题) - (艺术家) - (专辑)”))


赋值 (播放器设置.主窗口_左边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “主窗口”, “左边”, “-32000”)))
赋值 (播放器设置.主窗口_顶边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “主窗口”, “顶边”, “-32000”)))

赋值 (播放器设置.列表窗_显示, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “显示”, “1”)), 1))
赋值 (播放器设置.列表窗_左边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “左边”, “-32000”)))
赋值 (播放器设置.列表窗_顶边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “顶边”, “-32000”)))
赋值 (播放器设置.列表窗_宽度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “宽度”, 到文本 (列表窗.))))
赋值 (播放器设置.列表窗_高度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “高度”, 到文本 (列表窗.))))

赋值 (播放器设置.列表_字体名称, 读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体名称”, “宋体”))
赋值 (播放器设置.列表_字体大小, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体大小”, “9”)))
赋值 (播放器设置.列表_字体颜色, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体颜色”, 到文本 (#黑色))))
赋值 (播放器设置.列表_字体风格, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体风格”, “0”)))
赋值 (播放器设置.列表_字体角度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体角度”, “0”)))


赋值 (播放器设置.歌词窗_显示, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “显示”, “1”)), 1))
赋值 (播放器设置.歌词窗_左边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “左边”, “-32000”)))
赋值 (播放器设置.歌词窗_顶边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “顶边”, “-32000”)))
赋值 (播放器设置.歌词窗_宽度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “宽度”, 到文本 (主窗口.))))
赋值 (播放器设置.歌词窗_高度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “高度”, 到文本 (相加 (播放器设置.列表窗_高度, 主窗口.)))))
赋值 (播放器设置.歌词窗_字体名称, 读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体名称”, “宋体”))
赋值 (播放器设置.歌词窗_字体大小, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体大小”, “18”)))
赋值 (播放器设置.歌词窗_字体风格, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体风格”, “0”)))
赋值 (播放器设置.歌词窗_开启淡化, 等于 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “开启淡化”, “1”), “1”))
赋值 (播放器设置.歌词窗_淡化区比例, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “淡化区比例”, “5”)))
赋值 (播放器设置.歌词窗_非激活颜色, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “非激活颜色”, 到文本 (#歌词颜色_一般))))
赋值 (播放器设置.歌词窗_激活颜色, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “激活颜色”, 到文本 (#歌词颜色_高亮))))

赋值 (播放器设置.均衡器窗_显示, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “显示”, “1”)), 1))
赋值 (播放器设置.均衡器窗_左边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “左边”, “-32000”)))
赋值 (播放器设置.均衡器窗_顶边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “顶边”, “-32000”)))


赋值 (播放器设置.均衡器1, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “1”, “0”)))
赋值 (播放器设置.均衡器2, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “2”, “0”)))
赋值 (播放器设置.均衡器3, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “3”, “0”)))
赋值 (播放器设置.均衡器4, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “4”, “0”)))
赋值 (播放器设置.均衡器5, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “5”, “0”)))
赋值 (播放器设置.均衡器6, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “6”, “0”)))
赋值 (播放器设置.均衡器7, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “7”, “0”)))
赋值 (播放器设置.均衡器8, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “8”, “0”)))
赋值 (播放器设置.均衡器9, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “9”, “0”)))
赋值 (播放器设置.均衡器10, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “均衡器”, “10”, “0”)))

赋值 (播放器设置.视觉效果类型, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “类型”, “0”)))
赋值 (播放器设置.频谱_显示粗状, 等于 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “显示粗频谱”, “1”), “1”))
赋值 (播放器设置.频谱_颜色上_颜色值, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱上面颜色值”, 到文本 (#绿色))))
赋值 (播放器设置.频谱_颜色上_浓度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱上面颜色浓度”, 到文本 (255))))
赋值 (播放器设置.频谱_颜色下_颜色值, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱下面颜色值”, 到文本 (#橙黄))))
赋值 (播放器设置.频谱_颜色下_浓度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱下面颜色浓度”, 到文本 (255))))
赋值 (播放器设置.波形_是否淡出, 等于 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形淡出”, “1”), “1”))
赋值 (播放器设置.波形_颜色值, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形颜色值”, 到文本 (#橙黄))))
赋值 (播放器设置.波形_颜色浓度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形颜色浓度”, “255”)))
赋值 (播放器设置.波形_画笔粗细, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形粗细”, “2”)))


赋值 (播放器设置.桌面歌词_显示, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “显示”, “1”)), 1))
赋值 (播放器设置.桌面歌词_颜色1, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色1”, 到文本 (#绿色))))
赋值 (播放器设置.桌面歌词_颜色2, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色2”, 到文本 (#白色))))
赋值 (播放器设置.桌面歌词_颜色3, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色3”, 到文本 (#橙黄))))
赋值 (播放器设置.桌面歌词_颜色4, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色4”, 到文本 (#白色))))

赋值 (播放器设置.桌面歌词_颜色浓度1, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度1”, 到文本 (220))))
赋值 (播放器设置.桌面歌词_颜色浓度2, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度2”, 到文本 (150))))
赋值 (播放器设置.桌面歌词_颜色浓度3, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度3”, 到文本 (220))))
赋值 (播放器设置.桌面歌词_颜色浓度4, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度4”, 到文本 (150))))

赋值 (播放器设置.桌面歌词_字体大小, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体大小”, “33”)))
赋值 (播放器设置.桌面歌词_字体风格, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体风格”, “1”)))
赋值 (播放器设置.桌面歌词_字体名称, 读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体名称”, “黑体”))
赋值 (播放器设置.桌面歌词_背景颜色, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景颜色”, “-1”)))
赋值 (播放器设置.桌面歌词_背景透明度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景透明度”, “160”)))
赋值 (播放器设置.桌面歌词_文本透明度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本透明度”, “230”)))
赋值 (播放器设置.桌面歌词_背景高度修正, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景高度修正”, “0”)))
赋值 (播放器设置.桌面歌词_纵向偏移_绘制, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本纵向位置修正_绘制法”, “0”)))
赋值 (播放器设置.桌面歌词_纵向偏移_窗体, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本纵向位置修正_移动法”, “0”)))
赋值 (播放器设置.桌面歌词_窗口左边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口左边”, “0”)))
赋值 (播放器设置.桌面歌词_窗口顶边, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口顶边”, “0”)))
赋值 (播放器设置.桌面歌词_窗口宽度, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口宽度”, 到文本 (取屏幕宽度 ()))))
赋值 (播放器设置.桌面歌词_卡拉OK模式, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “卡拉OK模式”, “1”)), 1))
赋值 (播放器设置.桌面歌词_锁定, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “锁定”, “0”)), 1))
 ' 播放器设置.桌面歌词_锁定热键 ＝ 到数值 (读配置项 (运行目录 ＋ #配置文件名, “桌面歌词”, “锁定热键”, 到文本 ((#Ctrl键状态 ＋ #Alt键状态) × 1000 ＋ #M键)))
赋值 (播放器设置.桌面歌词_刷新减慢, 到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “刷新减慢”, “3”)))
赋值 (播放器设置.桌面歌词_测量文本高度, 等于 (到数值 (读配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “测量文本高度”, “0”)), 1))


 ' 播放器设置.歌词搜索_去除括号 ＝ 读配置项 (运行目录 ＋ #配置文件名, “歌词搜索”, “去除括号”, “1”) ＝ “1”
 ' 播放器设置.歌词搜索_去除开头数字 ＝ 读配置项 (运行目录 ＋ #配置文件名, “歌词搜索”, “去除开头数字”, “1”) ＝ “1”
 ' 播放器设置.歌词搜索_识别横杠 ＝ 读配置项 (运行目录 ＋ #配置文件名, “歌词搜索”, “识别横杠”, “1”) ＝ “1”
赋值 (播放器设置.歌词_优先网站, 到数值 (等于 (读配置项 (相加 (运行目录, #配置文件名), “歌词搜索”, “优先网站”, “0”), “1”)))





.子程序 写出配置, 空白型, , 
.局部变量 运行目录, 文本型, , , 

赋值 (运行目录, 取运行目录 ())

写配置项 (相加 (运行目录, #配置文件名), “标准”, “提示过”, 播放器设置.提示过)


 ' 写配置项 (运行目录 ＋ #配置文件名, “标准”, “引擎号”, 选择 (播放器设置.使用BASS引擎, "0", "1)")
写配置项 (相加 (运行目录, #配置文件名), “标准”, “吸附临界值”, 到文本 (播放器设置.吸附临界值))
写配置项 (相加 (运行目录, #配置文件名), “MIDI选项”, “音色库路径”, 播放器设置.音色库路径)
 ' 写配置项 (运行目录 ＋ #配置文件名, “MIDI选项”, “使用BASS播放MID”, 选择 (播放器设置.使用BASS播放MID, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “循环模式”, 到文本 (播放器设置.循环模式))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “变速值”, 到文本 (播放器设置.变速值))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “音量”, 到文本 (播放器设置.音量))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “历史记录数量”, 到文本 (播放器设置.历史记录数量))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “开启历史记录”, 选择 (播放器设置.开启历史记录, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “热键”, 播放器设置.热键)
写配置项 (相加 (运行目录, #配置文件名), “标准”, “继续上次播放”, 选择 (播放器设置.继续上次播放, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “记住上次位置”, 选择 (播放器设置.记住上次位置, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “播放项”, 到文本 (正在播放项))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “播放进度”, 数值到格式文本 (媒体_取位置 (), 3, 假))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “快进快退长度”, 到文本 (播放器设置.快进快退长度))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “换歌气球提示”, 选择 (播放器设置.换歌气球提示, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “仅隐藏时显示气球”, 选择 (播放器设置.仅隐藏时显示气球, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “任务栏滚动信息”, 选择 (播放器设置.任务栏滚动信息, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “仅隐藏时显示托盘图标”, 选择 (播放器设置.仅隐藏时显示托盘图标, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “保证当前播放”, 选择 (播放器设置.保证当前播放, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “最小化时隐藏”, 选择 (播放器设置.最小化时隐藏, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “关闭按钮退出”, 选择 (播放器设置.关闭按钮退出, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “透明度”, 到文本 (播放器设置.透明度))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词扫描路径”, 播放器设置.歌词_扫描路径)
写配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词扫描文件名”, 播放器设置.歌词_扫描文件名)
写配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词保存路径”, 播放器设置.歌词_保存路径)
写配置项 (相加 (运行目录, #配置文件名), “标准”, “歌词保存文件名”, 播放器设置.歌词_保存文件名)
写配置项 (相加 (运行目录, #配置文件名), “标准”, “回声强度”, 到文本 (播放器设置.回声强度))
写配置项 (相加 (运行目录, #配置文件名), “标准”, “回声时间”, 到文本 (播放器设置.回声时间))

写配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “读取顺序”, 播放器设置.MP3标签读取顺序)
写配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “标签类型”, 到文本 (播放器设置.MP3标签类型))
写配置项 (相加 (运行目录, #配置文件名), “MP3标签”, “ID3V2编码”, 到文本 (播放器设置.ID3V2编码类型))

写配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “列表”, 播放器设置.标签显示方案_列表)
写配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “托盘气球”, 播放器设置.标签显示方案_托盘气球)
写配置项 (相加 (运行目录, #配置文件名), “标签显示方案”, “窗口标题”, 播放器设置.标签显示方案_窗口标题)


写配置项 (相加 (运行目录, #配置文件名), “主窗口”, “左边”, 到文本 (播放器设置.主窗口_左边))
写配置项 (相加 (运行目录, #配置文件名), “主窗口”, “顶边”, 到文本 (播放器设置.主窗口_顶边))

写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “显示”, 选择 (播放器设置.列表窗_显示, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “左边”, 到文本 (播放器设置.列表窗_左边))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “顶边”, 到文本 (播放器设置.列表窗_顶边))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “宽度”, 到文本 (播放器设置.列表窗_宽度))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “高度”, 到文本 (播放器设置.列表窗_高度))

写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体名称”, 播放器设置.列表_字体名称)
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体大小”, 到文本 (播放器设置.列表_字体大小))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体颜色”, 到文本 (播放器设置.列表_字体颜色))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体风格”, 到文本 (播放器设置.列表_字体风格))
写配置项 (相加 (运行目录, #配置文件名), “列表窗”, “字体角度”, 到文本 (播放器设置.列表_字体角度))


写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “显示”, 选择 (播放器设置.歌词窗_显示, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “左边”, 到文本 (播放器设置.歌词窗_左边))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “顶边”, 到文本 (播放器设置.歌词窗_顶边))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “宽度”, 到文本 (播放器设置.歌词窗_宽度))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “高度”, 到文本 (播放器设置.歌词窗_高度))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体名称”, 播放器设置.歌词窗_字体名称)
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体大小”, 到文本 (播放器设置.歌词窗_字体大小))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “字体风格”, 到文本 (播放器设置.歌词窗_字体风格))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “开启淡化”, 选择 (播放器设置.歌词窗_开启淡化, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “淡化区比例”, 到文本 (播放器设置.歌词窗_淡化区比例))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “非激活颜色”, 到文本 (播放器设置.歌词窗_非激活颜色))
写配置项 (相加 (运行目录, #配置文件名), “歌词窗”, “激活颜色”, 到文本 (播放器设置.歌词窗_激活颜色))


写配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “显示”, 选择 (播放器设置.均衡器窗_显示, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “左边”, 到文本 (播放器设置.均衡器窗_左边))
写配置项 (相加 (运行目录, #配置文件名), “均衡器窗”, “顶边”, 到文本 (播放器设置.均衡器窗_顶边))


写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “1”, 数值到格式文本 (播放器设置.均衡器1, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “2”, 数值到格式文本 (播放器设置.均衡器2, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “3”, 数值到格式文本 (播放器设置.均衡器3, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “4”, 数值到格式文本 (播放器设置.均衡器4, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “5”, 数值到格式文本 (播放器设置.均衡器5, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “6”, 数值到格式文本 (播放器设置.均衡器6, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “7”, 数值到格式文本 (播放器设置.均衡器7, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “8”, 数值到格式文本 (播放器设置.均衡器8, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “9”, 数值到格式文本 (播放器设置.均衡器9, 2, 假))
写配置项 (相加 (运行目录, #配置文件名), “均衡器”, “10”, 数值到格式文本 (播放器设置.均衡器10, 2, 假))

写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “类型”, 到文本 (播放器设置.视觉效果类型))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “显示粗频谱”, 选择 (播放器设置.频谱_显示粗状, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱上面颜色值”, 到文本 (播放器设置.频谱_颜色上_颜色值))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱上面颜色浓度”, 到文本 (播放器设置.频谱_颜色上_浓度))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱下面颜色值”, 到文本 (播放器设置.频谱_颜色下_颜色值))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “频谱下面颜色浓度”, 到文本 (播放器设置.频谱_颜色下_浓度))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形淡出”, 选择 (播放器设置.波形_是否淡出, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形颜色值”, 到文本 (播放器设置.波形_颜色值))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形颜色浓度”, 到文本 (播放器设置.波形_颜色浓度))
写配置项 (相加 (运行目录, #配置文件名), “视觉效果”, “波形粗细”, 到文本 (播放器设置.波形_画笔粗细))


写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “显示”, 选择 (播放器设置.桌面歌词_显示, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色1”, 到文本 (播放器设置.桌面歌词_颜色1))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色2”, 到文本 (播放器设置.桌面歌词_颜色2))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色3”, 到文本 (播放器设置.桌面歌词_颜色3))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色4”, 到文本 (播放器设置.桌面歌词_颜色4))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度1”, 到文本 (播放器设置.桌面歌词_颜色浓度1))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度2”, 到文本 (播放器设置.桌面歌词_颜色浓度2))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度3”, 到文本 (播放器设置.桌面歌词_颜色浓度3))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “颜色浓度4”, 到文本 (播放器设置.桌面歌词_颜色浓度4))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体大小”, 到文本 (播放器设置.桌面歌词_字体大小))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体风格”, 到文本 (播放器设置.桌面歌词_字体风格))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “字体名称”, 到文本 (播放器设置.桌面歌词_字体名称))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景颜色”, 到文本 (播放器设置.桌面歌词_背景颜色))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景透明度”, 到文本 (播放器设置.桌面歌词_背景透明度))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本透明度”, 到文本 (播放器设置.桌面歌词_文本透明度))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “背景高度修正”, 到文本 (播放器设置.桌面歌词_背景高度修正))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本纵向位置修正_绘制法”, 到文本 (播放器设置.桌面歌词_纵向偏移_绘制))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “文本纵向位置修正_移动法”, 到文本 (播放器设置.桌面歌词_纵向偏移_窗体))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口左边”, 到文本 (播放器设置.桌面歌词_窗口左边))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口顶边”, 到文本 (播放器设置.桌面歌词_窗口顶边))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “窗口宽度”, 到文本 (播放器设置.桌面歌词_窗口宽度))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “卡拉OK模式”, 选择 (播放器设置.桌面歌词_卡拉OK模式, “1”, “0”))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “锁定”, 选择 (播放器设置.桌面歌词_锁定, “1”, “0”))
 ' 写配置项 (运行目录 ＋ #配置文件名, “桌面歌词”, “锁定热键”, 到文本 (播放器设置.桌面歌词_锁定热键))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “刷新减慢”, 到文本 (播放器设置.桌面歌词_刷新减慢))
写配置项 (相加 (运行目录, #配置文件名), “桌面歌词”, “测量文本高度”, 选择 (播放器设置.桌面歌词_测量文本高度, “1”, “0”))

.子程序 应用配置, 空白型, , 要求在载入主窗口后执行
应用配置_过滤器 ()
应用配置_主窗口位置 ()
应用配置_列表窗位置 ()
应用配置_歌词窗位置 ()
应用配置_均衡器窗位置 ()
应用配置_均衡器_变速_回声 ()
应用配置_音量 ()
应用配置_循环模式 ()
应用配置_快捷键 ()
应用配置_托盘图标 (真)
应用配置_透明度 ()
应用配置_列表字体 ()


.子程序 依次显示窗口, 空白型, , 
.参数 当前窗口号, 整数型, , 1～4
.参数 置顶显示, 逻辑型, 可空, 

.局部变量 临时数组, 整数型, , "4", 
.局部变量 X, 整数型, , , 
.局部变量 已删除, 整数型, , , 

.如果真 (是否为空 (置顶显示))
    赋值 (置顶显示, 假)
.如果真结束
赋值 (临时数组, 窗口顺序)
赋值 (已删除, 0)
.变量循环首 (1, 4, 1, X)
    .如果 (等于 (临时数组 [相减 (X, 已删除)], 当前窗口号))
        删除成员 (临时数组, 相减 (X, 已删除), 1) ' 先删除，不置顶
        赋值 (已删除, 相加 (已删除, 1))
    .否则
        .判断开始 (等于 (临时数组 [相减 (X, 已删除)], 1))
            .如果真 (是否已创建 (主窗口))
                .如果真 (主窗口.)
                    .如果 (置顶显示)
                        主窗口.调整层次 (3)
                        主窗口.调整层次 (4)
                    .否则
                        主窗口.调整层次 ()
                    .如果结束
                    
                .如果真结束
                
            .如果真结束
            
        .判断 (等于 (临时数组 [相减 (X, 已删除)], 2))
            .如果真 (是否已创建 (列表窗))
                .如果真 (列表窗.)
                    .如果 (置顶显示)
                        列表窗.调整层次 (3)
                        列表窗.调整层次 (4)
                    .否则
                        列表窗.调整层次 ()
                    .如果结束
                    
                .如果真结束
                
            .如果真结束
            
        .判断 (等于 (临时数组 [相减 (X, 已删除)], 3))
            .如果真 (是否已创建 (歌词窗))
                .如果真 (歌词窗.)
                    .如果 (置顶显示)
                        歌词窗.调整层次 (3)
                        歌词窗.调整层次 (4)
                    .否则
                        歌词窗.调整层次 ()
                    .如果结束
                    
                .如果真结束
                
            .如果真结束
            
        .判断 (等于 (临时数组 [相减 (X, 已删除)], 4))
            .如果真 (是否已创建 (均衡器窗))
                .如果真 (均衡器窗.)
                    .如果 (置顶显示)
                        均衡器窗.调整层次 (3)
                        均衡器窗.调整层次 (4)
                    .否则
                        均衡器窗.调整层次 ()
                    .如果结束
                    
                .如果真结束
                
            .如果真结束
            
        .默认
            
        .判断结束
        
    .如果结束
    
.变量循环尾 ()
.判断开始 (等于 (当前窗口号, 1))
    .如果真 (是否已创建 (主窗口))
        .如果真 (主窗口.)
            .如果 (置顶显示)
                主窗口.调整层次 (3)
                主窗口.调整层次 (4)
            .否则
                主窗口.调整层次 ()
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (当前窗口号, 2))
    .如果真 (是否已创建 (列表窗))
        .如果真 (列表窗.)
            .如果 (置顶显示)
                列表窗.调整层次 (3)
                列表窗.调整层次 (4)
            .否则
                列表窗.调整层次 ()
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (当前窗口号, 3))
    .如果真 (是否已创建 (歌词窗))
        .如果真 (歌词窗.)
            .如果 (置顶显示)
                歌词窗.调整层次 (3)
                歌词窗.调整层次 (4)
            .否则
                歌词窗.调整层次 ()
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.判断 (等于 (当前窗口号, 4))
    .如果真 (是否已创建 (均衡器窗))
        .如果真 (均衡器窗.)
            .如果 (置顶显示)
                均衡器窗.调整层次 (3)
                均衡器窗.调整层次 (4)
            .否则
                均衡器窗.调整层次 ()
            .如果结束
            
        .如果真结束
        
    .如果真结束
    
.默认
    
.判断结束
加入成员 (临时数组, 当前窗口号) ' 当前窗口加入到最高层
赋值 (窗口顺序, 临时数组)

.子程序 主控制集_打开媒体, 逻辑型, , 最基本的函数
.参数 文件名, 文本型, , 
.参数 分隔符, 文本型, , 
.参数 添加到列表, 逻辑型, 可空, 若此变量为假，则必须提供“项号”
.参数 项号, 整数型, 可空, 
.参数 添加历史记录, 逻辑型, 可空, 默认真
.参数 自动开始播放, 逻辑型, 可空, 默认真

.局部变量 文件名数组, 文本型, , "0", 
.局部变量 歌曲信息, 文本型, , "0", 
.局部变量 是MID文件, 逻辑型, , , MID文件需要切换引擎……好烦
.局部变量 文件扩展名, 文本型, , , 
.局部变量 要使用Bass引擎, 逻辑型, , , 
.局部变量 钩子未成功安装, 逻辑型, , , 
.局部变量 通道信息, BASS_CHANNELINFO, , , 

.如果真 (是否为空 (添加到列表))
    赋值 (添加到列表, 真)
.如果真结束
赋值 (文件名数组, 分割文本 (文件名, 分隔符, ))
.如果真 (大于 (取数组成员数 (文件名数组), 0))
    .如果真 (是否为空 (自动开始播放))
        赋值 (自动开始播放, 真)
    .如果真结束
    赋值 (文件扩展名, 到大写 (取文件名 (文件名数组 [1], #文件名_扩展名)))
    赋值 (是MID文件, 或者 (等于 (文件扩展名, “MID”), 等于 (文件扩展名, “MIDI”)))
    .如果 (等于 (播放器设置.引擎号, 0)) ' Bass引擎
        .如果 (并且 (是MID文件, 等于 (播放器设置.使用BASS播放MID, 假))) ' 需要用MCI引擎
            赋值 (要使用Bass引擎, 假)
        .否则
            赋值 (要使用Bass引擎, 真)
        .如果结束
        .判断开始 (并且 (正在使用BASS引擎, 要使用Bass引擎)) ' 前后都是Bass，正常情况
            
            .如果真 (等于 (播放控制2.打开 (文件名数组 [1], 播放器设置.保证当前播放, 假), 假))
                .如果真 (添加到列表)
                    列表框加入文件 (文件名数组) ' 即使打开失败，也要加入列表！
                .如果真结束
                弹出托盘气球 (“打开失败”, 文件名数组 [1], 3, 10)
                
                .如果真 (等于 (播放器设置.保证当前播放, 假)) ' 不保证，即没文件在播放了
                    置播放项为空 ()
                .如果真结束
                
                返回 (假)
            .如果真结束
            应用均衡器 (0)
            应用回声 ()
            赋值 (媒体长度, 播放控制2.取媒体长度 ())
            .如果真 (等于 (播放控制2.置完毕通知 (&回调函数_播放完毕), 假)) ' 当播放结束时通知程序
                赋值 (钩子未成功安装, 真)
            .如果真结束
            
        .判断 (并且 (等于 (正在使用BASS引擎, 假), 等于 (要使用Bass引擎, 假))) ' 前后都是MCI，也正常
            
            .如果真 (等于 (播放控制1.打开 (文件名数组 [1], 播放器设置.保证当前播放, 假), 假))
                .如果真 (添加到列表)
                    列表框加入文件 (文件名数组) ' 即使打开失败，也要加入列表！
                .如果真结束
                弹出托盘气球 (“打开失败”, 文件名数组 [1], 3, 10)
                .如果真 (等于 (播放器设置.保证当前播放, 假)) ' 不保证，即没文件在播放了
                    置播放项为空 ()
                .如果真结束
                
                返回 (假)
            .如果真结束
            赋值 (媒体长度, 相除 (播放控制1.取媒体长度 (), 1000))
            
        .判断 (并且 (正在使用BASS引擎, 等于 (要使用Bass引擎, 假))) ' 从Bass切换到MCI
            
            .如果真 (等于 (播放控制1.打开 (文件名数组 [1], 假, 假), 假))
                .如果真 (添加到列表)
                    列表框加入文件 (文件名数组) ' 即使打开失败，也要加入列表！
                .如果真结束
                弹出托盘气球 (“打开失败”, 文件名数组 [1], 3, 10)
                .如果真 (等于 (播放器设置.保证当前播放, 假)) ' 不需要保证播放
                    播放控制2.关闭 ()
                    置播放项为空 ()
                .如果真结束
                返回 (假)
            .如果真结束
            .如果真 (不等于 (正在播放项, -1))
                播放控制2.关闭 ()
            .如果真结束
            赋值 (媒体长度, 相除 (播放控制1.取媒体长度 (), 1000))
            
        .判断 (并且 (等于 (正在使用BASS引擎, 假), 要使用Bass引擎)) ' 从MCI切换到Bass……我要疯了
            
            .如果真 (等于 (播放控制2.打开 (文件名数组 [1], 假, 假), 假))
                .如果真 (添加到列表)
                    列表框加入文件 (文件名数组) ' 即使打开失败，也要加入列表！
                .如果真结束
                弹出托盘气球 (“打开失败”, 文件名数组 [1], 3, 10)
                .如果真 (等于 (播放器设置.保证当前播放, 假)) ' 不需要保证播放
                    播放控制1.关闭 ()
                    置播放项为空 ()
                .如果真结束
                返回 (假)
            .如果真结束
            .如果真 (不等于 (正在播放项, -1))
                播放控制1.关闭 ()
            .如果真结束
            应用均衡器 (0)
            应用回声 ()
            赋值 (媒体长度, 播放控制2.取媒体长度 ())
            .如果真 (等于 (播放控制2.置完毕通知 (&回调函数_播放完毕), 假)) ' 当播放结束时通知程序
                赋值 (钩子未成功安装, 真)
            .如果真结束
            
            
        .默认
            
        .判断结束
        赋值 (正在使用BASS引擎, 要使用Bass引擎)
        
    .否则
        .如果真 (等于 (播放控制1.打开 (文件名数组 [1], 播放器设置.保证当前播放, 假), 假))
            .如果真 (添加到列表)
                列表框加入文件 (文件名数组) ' 即使打开失败，也要加入列表！
            .如果真结束
            弹出托盘气球 (“打开失败”, 文件名数组 [1], 3, 10)
            .如果真 (等于 (播放器设置.保证当前播放, 假)) ' 不保证，即没文件在播放了
                置播放项为空 ()
            .如果真结束
            
            返回 (假)
        .如果真结束
        赋值 (媒体长度, 相除 (播放控制1.取媒体长度 (), 1000))
        赋值 (正在使用BASS引擎, 假)
    .如果结束
    
    视觉效果需要重画 ()
    
    刷新均衡器条状态 ()
    
    应用音量 ()
    应用变速 ()
    
    .如果真 (自动开始播放) ' 移到这边，因为有时候先播放会出现声音突然很大，然后再变小的情况
        媒体_播放 (真)
    .如果真结束
    
    刷新按钮图片 ()
    
    置列表项图标 (正在播放项, -1) ' 去除“正在播放”标志
    
    
     ' 如果 (添加到列表 ＝ 假)  ' 列表里有！
     ' TAG信息.Title ＝ 列表窗.数据源.取文本 (项号 ＋ 1, 1)
     ' TAG信息.Artist ＝ 列表窗.数据源.取文本 (项号 ＋ 1, 2)
     ' TAG信息.Album ＝ 列表窗.数据源.取文本 (项号 ＋ 1, 3)
    
    
    读取标签 (文件名数组 [1], TAG信息)
    赋值 (显示的Title, 选择 (等于 (删首尾空 (TAG信息.Title), “”), 取文件名 (文件名数组 [1], #文件名_去扩展名), TAG信息.Title))
    
    
    载入歌词 (文件名数组 [1])
    
    加入成员 (歌曲信息, 相加 (“标题：”, 显示的Title))
    加入成员 (歌曲信息, 相加 (“艺术家：”, 选择 (等于 (删首尾空 (TAG信息.Artist), “”), “未知”, TAG信息.Artist)))
    加入成员 (歌曲信息, 相加 (“专辑：”, 选择 (等于 (删首尾空 (TAG信息.Album), “”), “未知”, TAG信息.Album)))
    加入成员 (歌曲信息, 相加 (“总时间：”, 格式化时间 (媒体长度)))
    
    
    加入成员 (歌曲信息, 相加 (“比特率：”, 到文本 (四舍五入 (媒体_取比特率 (), )), “Kbps”))
    
    .如果真 (正在使用BASS引擎)
        赋值 (通道信息, 播放控制2.取通道信息 ()) ' 此命令会导致问题……!!!!!!!!
        加入成员 (歌曲信息, 相加 (“采样率：”, 到文本 (通道信息.freq)))
        加入成员 (歌曲信息, 选择 (等于 (通道信息.chans, 1), “声道：单声道”, 选择 (等于 (通道信息.chans, 2), “声道：立体声”, 相加 (“声道数：”, 到文本 (通道信息.chans)))))
        
    .如果真结束
    
    
    置歌曲信息 (歌曲信息)
    
    .如果 (添加到列表)
        赋值 (正在播放项, 列表窗.取表项数 (.)) ' 因为要添加，所以之前一定不在列表里
        列表框加入文件 (文件名数组)
    .否则
        赋值 (正在播放项, 项号)
    .如果结束
    
    
    
    
    
    .如果真 (播放器设置.开启历史记录) ' 首先得开启
        .如果真 (是否为空 (添加历史记录))
            赋值 (添加历史记录, 真)
        .如果真结束
        .如果真 (添加历史记录)
            历史记录_添加记录 (文件名数组 [1], 正在播放项)
        .如果真结束
        
    .如果真结束
    
    
    
    置列表项图标 (正在播放项, 0) ' 标上“正在播放”标志
    
    .如果真 (播放器设置.桌面歌词_显示)
        向桌面歌词发送消息 (“R”)
    .如果真结束
    
    .如果真 (并且 (播放器设置.换歌气球提示, 或者 (等于 (播放器设置.仅隐藏时显示气球, 假), 等于 (主窗口., 2))))
        .如果 (钩子未成功安装)
            弹出托盘气球 (“正在播放，但播放完毕的钩子未成功安装”, , 2, 10, 真)
        .否则
            弹出托盘气球 (10, 假)
        .如果结束
        
    .如果真结束
    
    
     ' (取运行目录 () ＋ “\12.ini”, “t”, “t”, 到文本 (取启动时间 () － t))
    
    赋值 (缓冲变量_托盘提示文本, 相加 (生成标题 (播放器设置.标签显示方案_窗口标题, TAG信息, 文件名数组 [1]), “ - ”, #程序名))
    CreateThread (0, 0, &线程_置托盘提示文本, 0, 0, 0)
     ' 写配置项 (取运行目录 () ＋ “\12.ini”, “t”, “t2”, 到文本 (取启动时间 () － t))
    滚动显示任务栏文本 (缓冲变量_托盘提示文本, 真)
     ' 写配置项 (取运行目录 () ＋ “\12.ini”, “t”, “xs”, 到文本 (主窗口.托盘图标1.显示))
     ' 写配置项 (取运行目录 () ＋ “\12.ini”, “t”, “t3”, 到文本 (取启动时间 () － t))
    
    处理修改标签任务 ()
    
    返回 (真)
    
.如果真结束
返回 (假)

.子程序 线程_置托盘提示文本, 空白型, , 托盘图标有时有问题，会卡住一秒多
赋值 (主窗口.., 缓冲变量_托盘提示文本)


.子程序 置列表项图标, 空白型, , 
.参数 项号, 整数型, , 从0开始
.参数 图标索引, 整数型, 可空, 若为空则自动判断

.如果真 (是否为空 (图标索引))
    赋值 (图标索引, 选择 (等于 (项号, 正在播放项), 0, -1)) ' 判断是否是正在播放项
.如果真结束
列表窗.置图片 (., 项号, 0, 图标索引)

.子程序 载入歌词, 空白型, , 此函数较为高层，包含网络搜索
.参数 文件名, 文本型, , 

.局部变量 歌词路径, 文本型, , , 

赋值 (等待网络搜索, 假)
终止搜索 ()
置状态文本 (“”)
赋值 (歌词路径, 寻找本地歌词 (文件名)) ' 寻找本地歌词
.如果 (不等于 (歌词路径, “”)) ' 有本地歌词文件
    打开LRC (读入文件 (歌词路径))
    歌词实时显示 (假, 假, 真, 真)
.否则
    重定义数组 (歌词_当前, 假, 0) ' 搜索前先清空
    搜索网络歌词 (显示的Title, TAG信息.Artist, 播放器设置.歌词_优先网站)
    赋值 (等待网络搜索, 真)
.如果结束


.子程序 网络歌词返回, 空白型, , 
.如果真 (等待网络搜索) ' 只有在等待状态时才响应
    赋值 (等待网络搜索, 假)
    打开LRC (歌词内容)
    歌词实时显示 (假, 假, 真, 真)
    保存网络歌词 ()
    置状态文本 (“”)
     ' 歌词内容 ＝ {  }
.如果真结束


.子程序 保存网络歌词, 空白型, , 
写到文件 (取对应的歌词路径 (), 歌词内容)

.子程序 取对应的歌词路径, 文本型, , 
.参数 歌曲路径, 文本型, 可空, 

.局部变量 保存的歌词路径, 文本型, , , 

.如果真 (是否为空 (歌曲路径)) ' 默认为正在播放项
    赋值 (歌曲路径, 列表窗.取文本 (., 相加 (正在播放项, 1), 4))
.如果真结束

 ' 若没斜杠，则加上
赋值 (保存的歌词路径, 选择 (或者 (等于 (取文本右边 (播放器设置.歌词_保存路径, 1), “\”), 等于 (取文本右边 (播放器设置.歌词_保存路径, 1), “/”)), 播放器设置.歌词_保存路径, 相加 (播放器设置.歌词_保存路径, “\”)))
 ' 加上文件名


赋值 (保存的歌词路径, 子文本替换 (保存的歌词路径, “%rundir%”, 取运行目录 (), , , 真))
赋值 (保存的歌词路径, 子文本替换 (保存的歌词路径, “%localdir%”, 取文件名 (歌曲路径, #文件名_仅目录), , , 真))


赋值 (保存的歌词路径, 相加 (保存的歌词路径, 替换文件名 (生成标题 (播放器设置.歌词_保存文件名, TAG信息, 歌曲路径), 歌曲路径)))

返回 (保存的歌词路径)

.子程序 网络歌词状态刷新, 空白型, , 
.参数 状态值, 整数型, , 
.参数 参数二, 整数型, , 

.判断开始 (等于 (状态值, 1))
    置状态文本 (相加 (“正在搜索”, 选择 (等于 (参数二, 1), “百度”, “5ilrc”), “：”, 取正在搜索全名 ()))
.判断 (等于 (状态值, 2))
    置状态文本 (相加 (“正在从”, 选择 (等于 (参数二, 1), “百度”, “5ilrc”), “获取列表”))
.判断 (等于 (状态值, 3))
    置状态文本 (“正在读取歌词文件”)
.判断 (等于 (状态值, 4))
    置状态文本 (“”)
.判断 (等于 (状态值, 5))
    置状态文本 (相加 (“歌词不存在或网络错误，”, 取正在搜索全名 ()))
    赋值 (等待网络搜索, 假)
.判断 (等于 (状态值, 6))
    置状态文本 (“歌词未找到，正尝试单独以歌名搜索。”)
.默认
    
.判断结束


.子程序 寻找本地歌词, 文本型, , 此函数较为底层
.参数 文件名, 文本型, , 

.局部变量 目录数组, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 运行目录, 文本型, , , 
.局部变量 所在目录, 文本型, , , 
.局部变量 文件名_去除后缀, 文本型, , , 
.局部变量 结果路径, 文本型, , , 
.局部变量 文件名数组, 文本型, , "0", 

赋值 (所在目录, 取文本左边 (文件名, 相减 (倒找文本 (文件名, “\”, , 假), 1)))
赋值 (运行目录, 取运行目录 ())
赋值 (目录数组, 分割文本 (播放器设置.歌词_扫描路径, #换行符, ))
赋值 (文件名数组, 分割文本 (播放器设置.歌词_扫描文件名, #换行符, ))
.变量循环首 (1, 取数组成员数 (目录数组), 1, X)
    赋值 (目录数组 [X], 子文本替换 (目录数组 [X], “%rundir%”, 运行目录, , , 假))
    赋值 (目录数组 [X], 子文本替换 (目录数组 [X], “%localdir%”, 所在目录, , , 假))
    .如果真 (并且 (不等于 (取文本右边 (目录数组 [X], 1), “\”), 不等于 (取文本右边 (目录数组 [X], 1), “/”)))
        赋值 (目录数组 [X], 相加 (目录数组 [X], “\”))
    .如果真结束
    
    .变量循环首 (1, 取数组成员数 (文件名数组), 1, Y)
        赋值 (结果路径, 相加 (目录数组 [X], 替换文件名 (生成标题 (文件名数组 [Y], TAG信息, 文件名), 文件名)))
        .如果真 (文件是否存在 (结果路径))
            返回 (结果路径)
        .如果真结束
        
    .变量循环尾 ()
    
.变量循环尾 ()
返回 (“”)

.子程序 替换文件名, 文本型, , 把(文件名)(扩展名)(上级目录名)替换成真正值
.参数 方案文本, 文本型, , 
.参数 文件名, 文本型, , 

.局部变量 返回值, 文本型, , , 

赋值 (返回值, 方案文本)
赋值 (返回值, 子文本替换 (返回值, “(文件名)”, 取文件名 (文件名, #文件名_去扩展名), , , 真))
赋值 (返回值, 子文本替换 (返回值, “(扩展名)”, 取文件名 (文件名, #文件名_扩展名), , , 真))
赋值 (返回值, 子文本替换 (返回值, “(上级目录名)”, 取文件名 (文件名, #文件名_上级目录), , , 真))
返回 (返回值)

.子程序 列表框加入文件, 空白型, , 
.参数 文件名数组, 文本型, 数组, 

.局部变量 TAG信息_临时, 音乐文件标签, , , 
.局部变量 索引_列表框, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 当前项目号, 整数型, , , 
.局部变量 分割过的路径, 文本型, , "0", 
.局部变量 播放控制2_临时, 播放控制类_BASS, , , 用于取时间
.局部变量 播放控制1_临时, 播放控制类_MCI, , , 
.局部变量 扩展名, 文本型, , , 
.局部变量 引擎号, 整数型, , , 

列表窗.禁止重画 (.)
.变量循环首 (1, 取数组成员数 (文件名数组), 1, X)
    读取标签 (文件名数组 [X], TAG信息_临时)
    赋值 (索引_列表框, 列表窗.插入表项 (., , 生成标题 (播放器设置.标签显示方案_列表, TAG信息_临时, 文件名数组 [X]), , , , ))
     ' 列表窗.超级列表框1.置标题 (索引_列表框, 1, ID3信息_临时.ARTIST)
     ' 列表窗.超级列表框1.置标题 (索引_列表框, 2, ID3信息_临时.ALBUM)
    
    .如果 (等于 (播放器设置.引擎号, 0)) ' 是BASS引擎
        .如果 (等于 (播放器设置.使用BASS播放MID, 假)) ' 不用Bass播放MID
            赋值 (扩展名, 到大写 (取文件名 (文件名数组 [X], #文件名_扩展名)))
            .如果 (或者 (等于 (扩展名, “MID”), 等于 (扩展名, “MIDI”))) ' 刚好是MID
                赋值 (引擎号, 1) ' 用MCI吧
            .否则
                赋值 (引擎号, 0)
            .如果结束
            
        .否则
            赋值 (引擎号, 0)
        .如果结束
        
    .否则
        赋值 (引擎号, 1)
    .如果结束
    
    
    
    
    
     ' ==================加入数据库==========================
    赋值 (当前项目号, 相加 (列表窗.取行数 (.), 1))
    列表窗.插入行 (., 当前项目号, 1)
    列表窗.置文本 (., 当前项目号, 1, TAG信息_临时.Title)
    列表窗.置文本 (., 当前项目号, 2, TAG信息_临时.Artist)
    
    列表窗.置文本 (., 当前项目号, 3, TAG信息_临时.Album)
    列表窗.置文本 (., 当前项目号, 4, 文件名数组 [X])
    
    .如果 (等于 (引擎号, 0))
        播放控制2_临时.打开 (文件名数组 [X], 假, 假, 假)
        列表窗.置文本 (., 当前项目号, 5, 格式化时间 (取整 (播放控制2_临时.取媒体长度 ())))
        列表窗.置标题 (., 索引_列表框, 1, 格式化时间 (播放控制2_临时.取媒体长度 ()))
    .否则
        播放控制1_临时.打开 (文件名数组 [X], 假, 假)
        列表窗.置文本 (., 当前项目号, 5, 格式化时间 (取整 (相除 (播放控制1_临时.取媒体长度 (), 1000))))
        列表窗.置标题 (., 索引_列表框, 1, 格式化时间 (相除 (播放控制1_临时.取媒体长度 (), 1000)))
    .如果结束
    
.变量循环尾 ()
列表窗.允许重画 (.)

.子程序 取文件名, 文本型, , 取全路径中的特定部分
.参数 文件名, 文本型, , 
.参数 类型, 整数型, , 1、不包含扩展名的文件名  2、包含扩展名的文件名 3、扩展名 4、路径（不含斜杠）

.局部变量 文件名_去目录, 文本型, , , 
.局部变量 文件名_去后缀, 文本型, , , 

.判断开始 (等于 (类型, 1))
    赋值 (文件名_去目录, 取文本右边 (文件名, 相减 (取文本长度 (文件名), 倒找文本 (文件名, “\”, , 真))))
    赋值 (文件名_去后缀, 取文本左边 (文件名_去目录, 相减 (倒找文本 (文件名_去目录, “.”, , 真), 1)))
    返回 (文件名_去后缀)
.判断 (等于 (类型, 2))
    赋值 (文件名_去目录, 取文本右边 (文件名, 相减 (取文本长度 (文件名), 倒找文本 (文件名, “\”, , 真))))
    返回 (文件名_去目录)
.判断 (等于 (类型, 3))
    返回 (取文本右边 (文件名, 相减 (取文本长度 (文件名), 倒找文本 (文件名, “.”, , 假))))
.判断 (等于 (类型, 4))
    返回 (取文本左边 (文件名, 相减 (倒找文本 (文件名, “\”, , 真), 1)))
.判断 (等于 (类型, 5))
    返回 (取文件名 (取文件名 (文件名, #文件名_仅目录), #文件名_含扩展名)) ' 先去掉单独的文件名，再去掉目录
.默认
    
.判断结束


返回 (“”)

.子程序 换歌, 空白型, , 会添加历史记录，会考虑预约列表
.参数 项号, 整数型, 可空, 若省略，则随机播放

.如果 (等于 (取数组成员数 (预约列表), 0)) ' 没有预约
    .如果 (是否为空 (项号))
        赋值 (项号, 取随机数 (0, 相减 (列表窗.取表项数 (.), 1)))
    .否则
        .如果真 (或者 (小于 (项号, 0), 大于 (项号, 相减 (列表窗.取表项数 (.), 1)))) ' 无效，超出范围
            赋值 (项号, 0)
        .如果真结束
        
    .如果结束
    
.否则
    赋值 (项号, 预约_取出并播放 (0, 假)) ' 统一给下面处理
    
.如果结束


赋值 (主窗口..标题, 列表窗.取文本 (., 相加 (项号, 1), 4))
发送消息 (主窗口.取窗口句柄 (.), 32885, -1, 项号)
 ' 主控制集_打开媒体 (列表窗.数据源.取文本 (项号 ＋ 1, 4), “;”, 假, 项号)

.子程序 取窗口标题, 文本型, , 
.参数 窗口句柄, 整数型, , 

.局部变量 窗口标题长度, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (窗口标题长度, 取窗口标题长度 (窗口句柄))
赋值 (返回值, 取空白文本 (窗口标题长度))
给出窗口标题 (窗口句柄, 返回值, 相加 (窗口标题长度, 1))
返回 (返回值)

.子程序 回调函数_播放完毕, 空白型, , 
.参数 handle, 整数型, , 
.参数 channel, 整数型, , 
.参数 data, 整数型, , 
.参数 user, 整数型, , 

.局部变量 置过种子, 逻辑型, 静态, , 

.如果真 (并且 (等于 (置过种子, 假), 不等于 (handle, 0))) ' 因为在MCI引擎下，主线程也会调用此函数（时钟_判断结束），所以handle不为0才是真正的回调函数
    置随机数种子 ()
    赋值 (置过种子, 真)
.如果真结束
 ' ====================此函数由回调函数调用，所以不属于程序主线程，需要单独置随机数========================

.判断开始 (等于 (播放器设置.循环模式, 1))
    播放控制2.播放 (真)
    赋值 (歌词_行号, 0) ' 歌词调回去
    歌词实时显示 (真, 真, )
    _歌词窗_按下某键 (#Esc键, 0)
    
.默认
    下一首 ()
.判断结束


.子程序 主控制集_取媒体长度, 小数型, , 减少调用底层函数的次数
返回 (媒体长度)

.子程序 刷新主窗口信息区, 空白型, , 信息区用来显示时间、歌曲信息


.子程序 打开LRC, 逻辑型, , 打开完会备份到“歌词内容”变量
.参数 文件内容, 字节集, , 

.局部变量 分行内容, 文本型, , "0", 
.局部变量 行内信息, 文本型, , "0", 包含时间和文本
.局部变量 X, 整数型, , , 用于循环不同行
.局部变量 Y, 整数型, , , 用于循环行内信息
.局部变量 歌词_临时, 歌词行, , "0", 
.局部变量 行首标志, 文本型, , , 
.局部变量 文本内容, 文本型, , , 转换成文本了
.局部变量 匿名局部变量_19809, 空白型, , , 

赋值 (歌词内容, 文件内容) ' 备份

赋值 (文本内容, 歌词换行处理 (文件内容))

重定义数组 (歌词_当前, 假, 0)
重定义数组 (歌词_排除行, 假, 0)
赋值 (歌词_偏移值, 0)
.如果真 (等于 (文本内容, “”))
    置状态文本 (相加 (TAG信息.Title, “-”, TAG信息.Artist)) ' 无歌词状态
    返回 (假)
.如果真结束
赋值 (分行内容, 分割文本 (文本内容, #换行符, ))
.如果真 (等于 (取数组成员数 (分行内容), 0))
    置状态文本 (相加 (TAG信息.Title, “-”, TAG信息.Artist))
    返回 (假)
.如果真结束

.变量循环首 (1, 取数组成员数 (分行内容), 1, X)
    赋值 (分行内容 [X], 相加 (分行内容 [X], “ ”)) ' 防止最后一个中括号读不出
    赋值 (行首标志, 到小写 (取文本左边 (分行内容 [X], 4)))
    .如果真 (或者 (等于 (行首标志, “[ar:”), 等于 (行首标志, “[ti:”), 等于 (行首标志, “[al:”), 等于 (行首标志, “[by:”))) ' 忽略信息
        加入成员 (歌词_排除行, 分行内容 [X])
        到循环尾 ()
    .如果真结束
    赋值 (行首标志, 到小写 (取文本左边 (分行内容 [X], 8)))
    .如果真 (等于 (行首标志, “[offset:”)) ' 偏移值
        赋值 (歌词_偏移值, 相除 (负 (到数值 (取文本中间 (分行内容 [X], 9, 相减 (取文本长度 (分行内容 [X]), 9)))), 1000))
        到循环尾 ()
    .如果真结束
    赋值 (行内信息, 分割文本 (分行内容 [X], “]”, ))
    
    .如果真 (大于或等于 (取数组成员数 (行内信息), 2))
        赋值 (行内信息 [取数组成员数 (行内信息)], 取文本左边 (行内信息 [取数组成员数 (行内信息)], 相减 (取文本长度 (行内信息 [取数组成员数 (行内信息)]), 1))) ' 删除右边的空格
        重定义数组 (歌词_临时, 假, 相减 (取数组成员数 (行内信息), 1))
        .变量循环首 (1, 相减 (取数组成员数 (行内信息), 1), 1, Y)
            赋值 (歌词_临时 [Y], 歌词文本, 删首尾空 (行内信息 [取数组成员数 (行内信息)])) ' 最右边的为歌词
        .变量循环尾 ()
        .变量循环首 (1, 相减 (取数组成员数 (行内信息), 1), 1, Y)
            赋值 (歌词_临时 [Y], 时间, 分析时间 (取文本右边 (行内信息 [Y], 相减 (取文本长度 (行内信息 [Y]), 1)))) ' 其余的为时间
        .变量循环尾 ()
        .变量循环首 (1, 取数组成员数 (歌词_临时), 1, Y)
            加入成员 (歌词_当前, 歌词_临时 [Y])
        .变量循环尾 ()
    .如果真结束
    
.变量循环尾 ()
冒泡排序 (歌词_当前, 歌词_当前)
赋值 (歌词_行号, 0)





返回 (真)

.子程序 分析时间, 小数型, , 
.参数 时间文本, 文本型, , 

.局部变量 数组, 文本型, , "0", 
.局部变量 数组0, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 临时时间1, 小数型, , , 
.局部变量 小数后, 整数型, , , 

赋值 (数组, 分割文本 (时间文本, “.”, ))
.判断开始 (等于 (取数组成员数 (数组), 1))
    赋值 (数组0, 分割文本 (数组 [1], “:”, ))
    赋值 (临时时间1, 0)
    .判断开始 (等于 (取数组成员数 (数组0), 1))
        赋值 (临时时间1, 到数值 (数组0 [1]))
    .判断 (等于 (取数组成员数 (数组0), 2))
        赋值 (临时时间1, 相加 (相乘 (到数值 (数组0 [1]), 60), 到数值 (数组0 [2])))
    .判断 (等于 (取数组成员数 (数组0), 3))
        赋值 (临时时间1, 相加 (相乘 (到数值 (数组0 [1]), 3600), 相乘 (到数值 (数组0 [2]), 60), 到数值 (数组0 [3])))
    .默认
        
    .判断结束
    返回 (临时时间1)
.判断 (等于 (取数组成员数 (数组), 2))
    赋值 (数组0, 分割文本 (数组 [1], “:”, ))
    赋值 (临时时间1, 0)
    .判断开始 (等于 (取数组成员数 (数组0), 1))
        赋值 (临时时间1, 到数值 (数组0 [1]))
    .判断 (等于 (取数组成员数 (数组0), 2))
        赋值 (临时时间1, 相加 (相乘 (到数值 (数组0 [1]), 60), 到数值 (数组0 [2])))
    .判断 (等于 (取数组成员数 (数组0), 3))
        赋值 (临时时间1, 相加 (相乘 (到数值 (数组0 [1]), 3600), 相乘 (到数值 (数组0 [2]), 60), 到数值 (数组0 [3])))
    .默认
        
    .判断结束
    赋值 (小数后, 到数值 (数组 [2]))
    .判断开始 (等于 (取文本长度 (数组 [2]), 1))
        赋值 (临时时间1, 相加 (临时时间1, 相除 (小数后, 10)))
    .判断 (等于 (取文本长度 (数组 [2]), 2))
        赋值 (临时时间1, 相加 (临时时间1, 相除 (小数后, 100)))
    .判断 (等于 (取文本长度 (数组 [2]), 3))
        赋值 (临时时间1, 相加 (临时时间1, 相除 (小数后, 1000)))
    .默认
        
    .判断结束
    返回 (临时时间1)
.默认
    返回 (-1)
.判断结束


.子程序 冒泡排序, 空白型, , 
.参数 原数组, 歌词行, 数组, 
.参数 结果数组, 歌词行, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 总数, 整数型, , , 此变量不会因为删除原数组成员而减少！
.局部变量 最小序号, 整数型, , , 
.局部变量 原数组_备份, 歌词行, , "0", 
.局部变量 歌词行_临时, 歌词行, , , 


复制数组 (原数组_备份, 原数组)
赋值 (总数, 取数组成员数 (原数组_备份))
重定义数组 (结果数组, 假, 0)
.变量循环首 (1, 总数, 1, ) ' 此循环不需要变量！
     ' 寻找最小时间
    赋值 (最小序号, 1)
    .变量循环首 (2, 取数组成员数 (原数组_备份), 1, X)
        .如果真 (小于 (原数组_备份 [X], 时间, 原数组_备份 [最小序号], 时间))
            赋值 (最小序号, X)
        .如果真结束
        
    .变量循环尾 ()
     ' 移动至目标数组
    赋值 (歌词行_临时.时间, 原数组_备份 [最小序号], 时间)
    赋值 (歌词行_临时.歌词文本, 原数组_备份 [最小序号], 歌词文本)
    加入成员 (结果数组, 歌词行_临时)
    删除成员 (原数组_备份, 最小序号, 1)
.变量循环尾 ()

.子程序 取歌词行, 逻辑型, , 取若干行歌词以供显示
.参数 歌词行, 文本型, 参考 数组, 
.参数 框架高度, 整数型, , 用来计算需要返回多少行歌词
.参数 中心行号, 整数型, , 

.局部变量 显示行数, 整数型, , , 由于上下对称，此变量仅表示一侧的行数
.局部变量 X, 整数型, , , 

.如果真 (真) ' 原来是（行号>0 且 行号<总行数），后来发现即使超出也必须显示
    赋值 (显示行数, 相加 (相除 (框架高度, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1)), 2), 1)) ' 乘1.1是为了留行间距
    重定义数组 (歌词行, 假, 0)
    .变量循环首 (相减 (中心行号, 显示行数), 相减 (中心行号, 1), 1, X)
        .如果 (并且 (大于或等于 (X, 1), 小于或等于 (X, 取数组成员数 (歌词_当前))))
            加入成员 (歌词行, 歌词_当前 [X], 歌词文本)
        .否则
            加入成员 (歌词行, “”) ' 超出范围设为空
        .如果结束
        
    .变量循环尾 ()
    .如果 (并且 (大于或等于 (中心行号, 1), 小于或等于 (中心行号, 取数组成员数 (歌词_当前))))
        加入成员 (歌词行, 歌词_当前 [中心行号], 歌词文本)
    .否则
        加入成员 (歌词行, “”) ' 没有一行被选中，则中心文本为空
    .如果结束
    
    .变量循环首 (相加 (中心行号, 1), 相加 (中心行号, 显示行数), 1, X)
        .如果 (并且 (大于或等于 (X, 1), 小于或等于 (X, 取数组成员数 (歌词_当前))))
            加入成员 (歌词行, 歌词_当前 [X], 歌词文本)
        .否则
            加入成员 (歌词行, “”)
        .如果结束
        
    .变量循环尾 ()
    返回 (真)
.如果真结束
返回 (假)

.子程序 取歌词时间, 小数型, , 取出指定行歌词的时间（包含偏移）
.参数 行号, 整数型, , 

.如果真 (等于 (取数组成员数 (歌词_当前), 0))
    返回 (0)
.如果真结束
.判断开始 (小于或等于 (行号, 0))
    返回 (0)
.判断 (并且 (大于或等于 (行号, 1), 小于或等于 (行号, 取数组成员数 (歌词_当前))))
    返回 (相减 (歌词_当前 [行号], 时间, 歌词_偏移值))
.默认
    返回 (相减 (歌词_当前 [取数组成员数 (歌词_当前)].时间, 歌词_偏移值)) ' 超出范围，返回最后一个时间
.判断结束


.子程序 同步歌词, 整数型, , 
.参数 时间, 小数型, , 
.参数 往前找, 逻辑型, 可空, 若时间往前跳转，则必须选中
.参数 给定的起始行, 整数型, 可空, 若为空，则从当前行开始，若不空，则不改变全局变量
.参数 这句长度, 小数型, 参考 可空, 备用，先不用

.局部变量 X, 整数型, , , 
.局部变量 不修改, 逻辑型, , , 
.局部变量 起始行, 整数型, , , 

.如果真 (是否为空 (往前找))
    赋值 (往前找, 假)
.如果真结束
.如果 (等于 (是否为空 (给定的起始行), 假))
    赋值 (不修改, 真)
    赋值 (起始行, 给定的起始行)
.否则
    赋值 (起始行, 歌词_行号)
.如果结束
.如果真 (小于 (起始行, 0))
    赋值 (起始行, 0)
.如果真结束
.如果真 (大于 (起始行, 取数组成员数 (歌词_当前)))
    赋值 (起始行, 取数组成员数 (歌词_当前))
.如果真结束
赋值 (时间, 相减 (时间, 歌词_偏移值))
.如果 (等于 (往前找, 假))
    .如果真 (等于 (起始行, 取数组成员数 (歌词_当前))) ' 已经到末尾
        .如果 (不修改)
            返回 (起始行)
        .否则
            返回 (0)
        .如果结束
        
    .如果真结束
    .变量循环首 (相加 (起始行, 1), 取数组成员数 (歌词_当前), 1, X)
        .如果真 (大于或等于 (时间, 歌词_当前 [X], 时间)) ' 到了下一句的时间
            .如果 (等于 (X, 取数组成员数 (歌词_当前))) ' 即将判断的是最后一句，它没有下一句了
                .如果 (不修改)
                    返回 (X)
                .否则
                    赋值 (歌词_行号, X)
                    返回 (0)
                .如果结束
                
            .否则
                .如果真 (小于 (时间, 歌词_当前 [相加 (X, 1)].时间)) ' 不是最后一句，需要判断下下句
                    .如果 (不修改)
                        返回 (X)
                    .否则
                        赋值 (歌词_行号, X)
                        返回 (0)
                    .如果结束
                    
                .如果真结束
                
            .如果结束
            
        .如果真结束
        
    .变量循环尾 ()
.否则
    .如果真 (等于 (起始行, 1)) ' 是第一行
         ' 返回 ()
    .如果真结束
    .变量循环首 (起始行, 1, -1, X) ' 注意是从当前行开始循环
        .如果真 (小于 (时间, 歌词_当前 [X], 时间)) ' 若给定的时间在之前
            .如果 (等于 (X, 1)) ' 已经找到开头了
                .如果 (不修改)
                    返回 (0)
                .否则
                    赋值 (歌词_行号, 0) ' 没有行被选中
                    返回 (0)
                .如果结束
                
            .否则
                .如果真 (大于或等于 (时间, 歌词_当前 [相减 (X, 1)].时间)) ' 在上一句的时间之后
                    .如果 (不修改)
                        返回 (相减 (X, 1))
                    .否则
                        赋值 (歌词_行号, 相减 (X, 1)) ' 指定为上一句
                        返回 (0)
                    .如果结束
                    
                .如果真结束
                
            .如果结束
            
        .如果真结束
        
    .变量循环尾 ()
.如果结束
 ' ======没找到=========
.如果 (不修改)
    返回 (给定的起始行) ' 返回给定值
.否则
    返回 (0)
.如果结束


.子程序 歌词实时显示, 空白型, , 根据播放进度实时显示歌词
.参数 文字慢慢滚动, 逻辑型, 可空, （这个变量为真为假都测试通过，没发现什么BUG，但是程序里只用到真，也许以后会增加一个选项来确定是否启用）
.参数 向前找, 逻辑型, 可空, 
.参数 强制刷新, 逻辑型, 可空, 
.参数 坐标清空, 逻辑型, 可空, 
.参数 文字纵坐标, 整数型, 可空, 若给定，则直接将“当前纵向坐标”赋予此值

.局部变量 歌词行号_偏移过, 整数型, 静态, , 因为歌词窗的渐变特效，需要把时间往前挪一点
.局部变量 歌词行号_上次, 整数型, 静态, , 
.局部变量 当前纵向坐标, 小数型, 静态, , 
.局部变量 目的纵向坐标, 整数型, 静态, , 
.局部变量 移动速度, 小数型, , , 
.局部变量 行号, 整数型, 静态, , 
.局部变量 偏移值, 整数型, 静态, , 
.局部变量 上次整型坐标, 整数型, 静态, , 记录上次“当前纵向坐标”
.局部变量 换行完成度, 小数型, 静态, , 
.局部变量 换行完成度_上次, 小数型, 静态, , 有时候坐标没变但是换行了。

.如果真 (是否为空 (文字慢慢滚动))
    赋值 (文字慢慢滚动, 真)
.如果真结束
.如果真 (是否为空 (向前找))
    赋值 (向前找, 假)
.如果真结束
.如果真 (是否为空 (强制刷新))
    赋值 (强制刷新, 假)
.如果真结束
.如果真 (歌词窗需要刷新) ' 改变尺寸，必须刷新
    赋值 (歌词窗需要刷新, 假)
    赋值 (强制刷新, 真)
.如果真结束
.如果真 (是否为空 (坐标清空))
    赋值 (坐标清空, 假)
.如果真结束
.如果真 (坐标清空)
    连续赋值 (0, 歌词行号_偏移过, 歌词行号_上次, 当前纵向坐标, 目的纵向坐标, 行号, 偏移值, 上次整型坐标, 换行完成度)
.如果真结束
.如果真 (等于 (是否为空 (文字纵坐标), 假))
    赋值 (当前纵向坐标, 文字纵坐标)
.如果真结束
.如果真 (不等于 (歌词窗..时钟周期, 0)) ' 正在拖动调整
    返回 ()
.如果真结束

.如果真 (等于 (取数组成员数 (歌词_当前), 0)) ' 没有歌词
    显示状态文本 (强制刷新) ' 显示状态文本
    返回 ()
.如果真结束
赋值 (歌词行号_上次, 歌词行号_偏移过)
赋值 (歌词行号_偏移过, 同步歌词 (相加 (媒体_取位置 (), 选择 (文字慢慢滚动, 0.4, 0)), 向前找, 歌词行号_偏移过))

.如果真 (文字慢慢滚动)
    赋值 (换行完成度_上次, 换行完成度)
    .如果真 (并且 (不等于 (歌词行号_上次, 歌词行号_偏移过), 等于 (相减 (歌词行号_偏移过, 歌词行号_上次), 1))) ' 有改变，且必须是自然地改变，而不是一次多行
        赋值 (换行完成度, 1)
    .如果真结束
    
.如果真结束
.如果真 (强制刷新)
    .如果 (文字慢慢滚动)
        刷新歌词 (行号, 歌词行号_偏移过, 偏移值, 换行完成度) ' 直接在当前位置刷新
        赋值 (上次整型坐标, 取整 (当前纵向坐标))
    .否则
        刷新歌词 (歌词行号_偏移过, 歌词行号_偏移过, 0)
        .如果真 (是否为空 (文字纵坐标)) ' 若给定了纵坐标，则按纵坐标的赋值
            赋值 (当前纵向坐标, 相乘 (歌词行号_偏移过, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))))
        .如果真结束
        赋值 (目的纵向坐标, 相乘 (歌词行号_偏移过, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))))
        
    .如果结束
    返回 ()
.如果真结束

.如果 (并且 (大于或等于 (换行完成度, 1), 小于 (换行完成度, 7)))
    赋值 (换行完成度, 相加 (换行完成度, 0.2)) ' 慢慢换行
.否则
    赋值 (换行完成度, 0) ' 停止换行
.如果结束
 ' 主窗口.标签1.标题 ＝ 到文本 (换行完成度)
.如果真 (不等于 (歌词行号_上次, 歌词行号_偏移过)) ' 行号有变
    .如果 (文字慢慢滚动)
        赋值 (目的纵向坐标, 相乘 (歌词行号_偏移过, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1)))) ' 设定目的坐标
        
        
    .否则
        刷新歌词 (歌词行号_偏移过, 歌词行号_偏移过, 7, 0) ' 直接跳转
        .如果真 (是否为空 (文字纵坐标)) ' 若给定了纵坐标，则按纵坐标的赋值
            赋值 (当前纵向坐标, 相减 (相乘 (歌词行号_偏移过, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 相除 (取整 (相乘 (播放器设置.桌面歌词_字体大小, 1.1)), 12))) ' 为了使调整进度后显得平滑，所以当前坐标减少了一些，看起来有滚动效果
        .如果真结束
        赋值 (目的纵向坐标, 相乘 (歌词行号_偏移过, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1)))) ' 修改滚动目标
    .如果结束
    
.如果真结束
.如果真 (等于 (文字慢慢滚动, 假))
    返回 ()
.如果真结束
 ' ===============以下都是滚动效果=============
.如果真 (大于 (取绝对值 (相减 (当前纵向坐标, 目的纵向坐标)), 0.0004)) ' 还没移动到（由于是小数和整数比较，用求差的办法比较可靠）
    赋值 (移动速度, 计算滚动速度 (相减 (目的纵向坐标, 当前纵向坐标)))
    赋值 (当前纵向坐标, 相加 (当前纵向坐标, 移动速度))
    .如果 (大于 (移动速度, 0))
        .如果真 (大于 (当前纵向坐标, 目的纵向坐标)) ' 移过头了
            赋值 (当前纵向坐标, 目的纵向坐标)
        .如果真结束
        
    .否则
        .如果真 (小于 (当前纵向坐标, 目的纵向坐标)) ' 移过头了
            赋值 (当前纵向坐标, 目的纵向坐标)
        .如果真结束
        
    .如果结束
    
    坐标到行号 (当前纵向坐标, 行号, 偏移值)
    .如果真 (或者 (不等于 (上次整型坐标, 取整 (当前纵向坐标)), 不等于 (取整 (换行完成度), 取整 (换行完成度_上次)))) ' 坐标有变动
        刷新歌词 (行号, 歌词行号_偏移过, 偏移值, 换行完成度)
        赋值 (上次整型坐标, 取整 (当前纵向坐标))
    .如果真结束
    
.如果真结束


.子程序 计算滚动速度, 小数型, , 用于歌词滚动效果
.参数 距离差值, 整数型, , 

.局部变量 行高, 整数型, , , 
.局部变量 行数, 小数型, , , 
.局部变量 速度, 小数型, , , 
.局部变量 符号, 整数型, , , 

赋值 (符号, 取符号 (距离差值))
赋值 (行高, 相乘 (播放器设置.歌词窗_字体大小, 1.1))
赋值 (行数, 取绝对值 (相除 (距离差值, 行高)))
.如果 (大于 (行数, 2)) ' 超过一行，要快点
    赋值 (速度, 相除 (相乘 (求次方 (相除 (行数, 2), 2), 2, 行高), 80))
.否则
    赋值 (速度, 相除 (行高, 80))
.如果结束
赋值 (速度, 相除 (相乘 (求次方 (相除 (行数, 2), 2), 2, 行高), 80))
.如果真 (小于 (速度, 0.007))
    赋值 (速度, 0.007)
.如果真结束
返回 (相乘 (速度, 符号))

.子程序 坐标到行号, 空白型, , 把“纵向坐标”转换成行号和偏移值
.参数 纵向坐标, 整数型, , 
.参数 行号, 整数型, 参考, 
.参数 偏移值, 整数型, 参考, 

赋值 (行号, 整除 (相加 (纵向坐标, 7), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))))
赋值 (偏移值, 相减 (-1, 求余数 (相加 (纵向坐标, 7), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 1))

.子程序 行号到坐标, 整数型, , 
.参数 行号, 整数型, , 
.参数 偏移值, 整数型, , 

返回 (相减 (相乘 (行号, 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 7, 偏移值, 2))

.子程序 刷新桌面歌词, 空白型, , 
.参数 调整进度模式, 逻辑型, 可空, 用于调整进度时，因为调整进度会一下跳很多行

.局部变量 之前的行号, 整数型, , , 用于判断是否有换行
.局部变量 换行完成度, 小数型, 静态, , 
.局部变量 句首时间, 小数型, 静态, , 
.局部变量 计数器, 整数型, 静态, , 用于减慢刷新次数

.如果真 (等于 (播放器设置.桌面歌词_显示, 假))
    .如果真 (桌面歌词需要刷新)
        赋值 (桌面歌词需要刷新, 假)
    .如果真结束
    返回 ()
.如果真结束
.如果真 (是否为空 (调整进度模式))
    赋值 (调整进度模式, 假)
.如果真结束
赋值 (之前的行号, 歌词_行号)
同步歌词 (媒体_取位置 (), 假)
同步歌词 (媒体_取位置 (), 真)
.如果 (播放器设置.桌面歌词_卡拉OK模式)
    .如果真 (或者 (调整进度模式, 卡拉OK模式被改变, 句首时间需要刷新))
        赋值 (句首时间, 取指定行歌词时间 (歌词_行号)) ' 切换过行，需要直接读取
    .如果真结束
    .如果 (并且 (大于或等于 (歌词_行号, 1), 小于或等于 (歌词_行号, 取数组成员数 (歌词_当前))))
        .如果 (或者 (等于 (之前的行号, 歌词_行号), 调整进度模式)) ' 切换过行，需要直接刷新
            赋值 (换行完成度, 相除 (相减 (媒体_取位置 (), 句首时间), 相减 (取指定行歌词时间 (相加 (歌词_行号, 1)), 取指定行歌词时间 (歌词_行号))))
            .如果真 (大于 (换行完成度, 1))
                赋值 (换行完成度, 1)
            .如果真结束
            .如果真 (小于 (换行完成度, 0)) ' 有时候歌词有问题，某句时间会是负数，这时需要修复
                赋值 (换行完成度, 0)
            .如果真结束
            赋值 (计数器, 相加 (计数器, 1))
            .如果真 (调整进度模式)
                赋值 (计数器, 100) ' 直接刷新
            .如果真结束
            .如果真 (或者 (大于或等于 (计数器, 播放器设置.桌面歌词_刷新减慢), 桌面歌词需要刷新)) ' 需要直接刷新
                赋值 (计数器, 0)
                向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), 歌词_当前 [歌词_行号], 歌词文本, 数值到格式文本 (换行完成度, 4, 假)), 假)
            .如果真结束
            
        .否则
            向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), 歌词_当前 [歌词_行号], 歌词文本, “0.0000”), 假)
            赋值 (句首时间, 取指定行歌词时间 (歌词_行号))
            赋值 (计数器, 0)
        .如果结束
        
    .否则
        .如果 (不等于 (取状态文本 (), “”))
            向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), 取状态文本 (), “0.0000”), 假)
        .否则
            向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), “桌面歌词”, “0.0000”), 假)
        .如果结束
        
    .如果结束
    
.否则
    .如果 (并且 (大于或等于 (歌词_行号, 1), 小于或等于 (歌词_行号, 取数组成员数 (歌词_当前))))
        向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), 歌词_当前 [歌词_行号], 歌词文本, “0.0000”), 假)
    .否则
        .如果 (不等于 (取状态文本 (), “”))
            向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), 取状态文本 (), “0.0000”), 假)
        .否则
            向桌面歌词发送消息 (相加 (选择 (桌面歌词需要刷新, “s”, “S”), “桌面歌词”, “0.0000”), 假)
        .如果结束
        
    .如果结束
    
.如果结束
.如果真 (桌面歌词需要刷新)
    赋值 (桌面歌词需要刷新, 假)
.如果真结束
.如果真 (卡拉OK模式被改变)
    赋值 (卡拉OK模式被改变, 假)
.如果真结束
.如果真 (句首时间需要刷新)
    赋值 (句首时间需要刷新, 假)
.如果真结束


.子程序 消息_歌词窗尺寸改变, 空白型, , 要求“歌词实时显示”函数强制刷新
赋值 (歌词窗需要刷新, 真)

.子程序 修改整体偏移值, 小数型, , 
.参数 值, 小数型, , 

赋值 (歌词_偏移值, 相加 (歌词_偏移值, 值))
赋值 (句首时间需要刷新, 真)
返回 (歌词_偏移值)

.子程序 修改单句偏移值, 空白型, , 
.参数 行号, 整数型, , 
.参数 值, 小数型, , 

.如果真 (并且 (大于或等于 (行号, 1), 小于或等于 (行号, 取数组成员数 (歌词_当前))))
    赋值 (歌词_当前 [行号], 时间, 相加 (歌词_当前 [行号], 时间, 值))
.如果真结束


.子程序 跳到指定行, 空白型, , 根据所给歌词的行号来跳转
.参数 行号, 整数型, , 

.局部变量 要跳转的位置, 小数型, , , 

.判断开始 (小于或等于 (行号, 0))
    媒体_置位置 (0) ' 跳到开始
.判断 (并且 (大于或等于 (行号, 1), 小于或等于 (行号, 取数组成员数 (歌词_当前))))
    赋值 (要跳转的位置, 相加 (歌词_当前 [行号], 时间, 歌词_偏移值))
    .如果真 (小于 (要跳转的位置, 0))
        赋值 (要跳转的位置, 0)
    .如果真结束
    媒体_置位置 (要跳转的位置)
.判断 (大于 (行号, 取数组成员数 (歌词_当前)))
    媒体_置位置 (相加 (歌词_当前 [取数组成员数 (歌词_当前)].时间, 歌词_偏移值)) ' 跳到末尾
.默认
    
.判断结束


.子程序 取歌词总行数, 整数型, , 取数组成员数（歌词_当前）
返回 (取数组成员数 (歌词_当前))

.子程序 取指定行歌词时间, 小数型, , 
.参数 行号, 整数型, , 
.参数 包含偏移, 逻辑型, 可空, 默认是

.如果真 (是否为空 (包含偏移))
    赋值 (包含偏移, 真)
.如果真结束
.判断开始 (小于或等于 (行号, 0))
    返回 (0)
.判断 (大于 (行号, 取数组成员数 (歌词_当前)))
    返回 (主控制集_取媒体长度 ()) ' 超过，直接跳到末尾
.默认
    返回 (相加 (歌词_当前 [行号], 时间, 选择 (包含偏移, 歌词_偏移值, 0)))
.判断结束


.子程序 取当前歌词行号, 整数型, , 歌词_行号
返回 (歌词_行号)

.子程序 应用均衡器, 空白型, , 移动滑块时调用
.参数 序号, 整数型, , 1～10，0代表所有

.如果真 (或者 (等于 (序号, 1), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器1, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (1, 31, 30, 播放器设置.均衡器1)
    
.如果真结束
.如果真 (或者 (等于 (序号, 2), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器2, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (2, 62, 30, 播放器设置.均衡器2)
    
.如果真结束
.如果真 (或者 (等于 (序号, 3), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器3, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (3, 125, 30, 播放器设置.均衡器3)
    
.如果真结束
.如果真 (或者 (等于 (序号, 4), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器4, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (4, 250, 30, 播放器设置.均衡器4)
    
.如果真结束
.如果真 (或者 (等于 (序号, 5), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器5, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (5, 500, 30, 播放器设置.均衡器5)
    
.如果真结束
.如果真 (或者 (等于 (序号, 6), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器6, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (6, 1000, 30, 播放器设置.均衡器6)
    
.如果真结束
.如果真 (或者 (等于 (序号, 7), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器7, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (7, 2000, 30, 播放器设置.均衡器7)
    
.如果真结束
.如果真 (或者 (等于 (序号, 8), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器8, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (8, 4000, 30, 播放器设置.均衡器8)
    
.如果真结束
.如果真 (或者 (等于 (序号, 9), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器9, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (9, 8000, 30, 播放器设置.均衡器9)
    
.如果真结束
.如果真 (或者 (等于 (序号, 10), 等于 (序号, 0)))
    赋值 (播放器设置.均衡器10, 相乘 (相除 (相减 (相除 (均衡器窗..最大位置, 2), 均衡器窗..位置), 相除 (均衡器窗..最大位置, 2)), 15))
    播放控制2.置均衡器 (10, 16000, 30, 播放器设置.均衡器10)
    
.如果真结束


.子程序 应用变速, 空白型, , 
.局部变量 滑块值, 整数型, , , 
.局部变量 倍速, 小数型, , , 
.局部变量 运算值, 小数型, , , 

赋值 (播放器设置.变速值, 均衡器窗..位置)
赋值 (滑块值, 相减 (均衡器窗..位置, 相除 (均衡器窗..最大位置, 2)))
赋值 (倍速, 相乘 (取符号 (滑块值), 相加 (相除 (取绝对值 (滑块值), 10), 1)))
赋值 (均衡器窗..标题, 选择 (等于 (倍速, 0), “原速”, 相加 (到文本 (倍速), “倍速”)))
赋值 (运算值, 选择 (等于 (倍速, 0), 1, 选择 (大于 (倍速, 0), 倍速, 相除 (-1, 倍速))))
.如果 (正在使用BASS引擎)
    播放控制2.置播放速度 (运算值)
.否则
    播放控制1.置播放速度 (运算值)
.如果结束


.子程序 应用回声, 空白型, , 
.局部变量 回声信息, BASS_DX8_REVERB, , , 

赋值 (播放器设置.回声强度, 均衡器窗..位置)
赋值 (播放器设置.回声时间, 均衡器窗..位置)

赋值 (均衡器窗..标题, 相加 (“回声”, 数值到格式文本 (相除 (播放器设置.回声时间, 1000), 2, 假), “秒”))

赋值 (回声信息.fReverbMix, 相减 (相乘 (求次方 (相除 (播放器设置.回声强度, 100), 0.1), 96), 96))
赋值 (回声信息.fReverbTime, 播放器设置.回声时间)
赋值 (回声信息.fHighFreqRTRatio, 0.001)
播放控制2.置回声信息 (回声信息)

.子程序 应用音量, 空白型, , 
.如果 (正在使用BASS引擎)
    播放控制2.置音量 (选择 (静音了, 0, 求次方 (相除 (播放器设置.音量, 主窗口..宽度), 2)))
.否则
    播放控制1.置音量 (选择 (静音了, 0, 相乘 (求次方 (相除 (播放器设置.音量, 主窗口..宽度), 2), 1000)))
.如果结束


.子程序 格式化时间, 文本型, , 返回"MM:SS"格式
.参数 时间, 小数型, , 秒

.局部变量 时间_整型, 整数型, , , 
.局部变量 分, 文本型, , , 
.局部变量 秒, 文本型, , , 

赋值 (时间_整型, 取整 (时间))
.如果真 (小于 (时间_整型, 0))
    赋值 (时间_整型, 0)
.如果真结束
赋值 (分, 到文本 (整除 (时间_整型, 60)))
赋值 (秒, 到文本 (求余数 (时间_整型, 60)))
.如果真 (小于 (取文本长度 (分), 2))
    赋值 (分, 相加 (“0”, 分))
.如果真结束
.如果真 (小于 (取文本长度 (秒), 2))
    赋值 (秒, 相加 (“0”, 秒))
.如果真结束
返回 (相加 (分, “:”, 秒))

.子程序 置网络等待状态, 空白型, , 
.参数 状态值, 逻辑型, , 

赋值 (等待网络搜索, 状态值)

.子程序 清空歌词, 空白型, , 
重定义数组 (歌词_当前, 假, 0)
赋值 (歌词_行号, 0)

.子程序 取当前TAG, 音乐文件标签, , 
.参数 取真实值, 逻辑型, 可空, 默认真，若此参数为假，则当Title为空时，将传回文件名

.局部变量 Tag, 音乐文件标签, , , 

赋值 (Tag, TAG信息)
.如果真 (等于 (取真实值, 假))
    赋值 (Tag.Title, 显示的Title)
.如果真结束
返回 (Tag)

.子程序 保存当前歌词, 空白型, , 
.参数 文件名, 文本型, 可空, 

.局部变量 X, 整数型, , , 
.局部变量 要写出的文本, 文本型, , , 

.如果真 (等于 (取数组成员数 (歌词_当前), 0))
    返回 ()
.如果真结束
.如果真 (是否为空 (文件名))
    赋值 (文件名, 取对应的歌词路径 ())
.如果真结束
赋值 (要写出的文本, 取当前歌词全文 ())
写到文件 (文件名, 到字节集 (要写出的文本))

.子程序 取当前歌词全文, 文本型, , 
.局部变量 要写出的文本, 文本型, , , 
.局部变量 X, 整数型, , , 

赋值 (要写出的文本, 相加 (“[offset:”, 到文本 (负 (取整 (相乘 (歌词_偏移值, 1000)))), “]”, #换行符))
.变量循环首 (1, 取数组成员数 (歌词_排除行), 1, X)
    赋值 (要写出的文本, 相加 (要写出的文本, 歌词_排除行 [X], #换行符))
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (歌词_当前), 1, X)
    赋值 (要写出的文本, 相加 (要写出的文本, 格式化时间_到LRC格式 (歌词_当前 [X], 时间, 真), 歌词_当前 [X], 歌词文本, #换行符))
.变量循环尾 ()
赋值 (要写出的文本, 取文本左边 (要写出的文本, 相减 (取文本长度 (要写出的文本), 2))) ' 除去最后一个换行符
返回 (要写出的文本)

.子程序 格式化时间_到LRC格式, 文本型, , 
.参数 时间, 小数型, , 
.参数 加中括号, 逻辑型, , 

.局部变量 分, 整数型, , , 
.局部变量 秒, 整数型, , , 
.局部变量 毫秒, 整数型, , , 
.局部变量 时间_毫秒, 整数型, , , 以毫秒为单位
.局部变量 匿名局部变量_10584, 空白型, , , 
.局部变量 分_文本型, 文本型, , , 
.局部变量 秒_文本型, 文本型, , , 
.局部变量 毫秒_文本型, 文本型, , , 

赋值 (时间_毫秒, 取整 (相乘 (时间, 1000)))
赋值 (毫秒, 求余数 (时间_毫秒, 1000))
赋值 (时间_毫秒, 整除 (时间_毫秒, 1000)) ' 整除，变成秒
赋值 (秒, 求余数 (时间_毫秒, 60))
赋值 (时间_毫秒, 整除 (时间_毫秒, 60)) ' 再整除，变成分钟
赋值 (分, 时间_毫秒)

赋值 (分_文本型, 到文本 (分))
.如果真 (等于 (取文本长度 (分_文本型), 1))
    赋值 (分_文本型, 相加 (“0”, 分_文本型))
.如果真结束
赋值 (秒_文本型, 到文本 (秒))
.如果真 (等于 (取文本长度 (秒_文本型), 1))
    赋值 (秒_文本型, 相加 (“0”, 秒_文本型))
.如果真结束
赋值 (毫秒, 整除 (毫秒, 10)) ' 毫秒范围是0～999，但是只需写出前两位
赋值 (毫秒_文本型, 到文本 (毫秒))
.如果真 (等于 (取文本长度 (毫秒_文本型), 1))
    赋值 (毫秒_文本型, 相加 (“0”, 毫秒_文本型))
.如果真结束
返回 (相加 (“[”, 分_文本型, “:”, 秒_文本型, “.”, 毫秒_文本型, “]”))

.子程序 列表框排序, 空白型, , 选择排序法
.参数 排序依据, 整数型, , 1Title 2Artist 3Album 5时间 0随机打乱 7显示的标题
.参数 倒序, 逻辑型, , 

.局部变量 X, 整数型, , , 
.局部变量 最值所在行号, 整数型, , , 
.局部变量 歌曲信息, 歌曲信息, , , 
.局部变量 总数, 整数型, , , 
.局部变量 计数器, 整数型, 静态, , 

列表窗.禁止重画 (.)

连续赋值 (真, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止)

标记打乱_历史记录和预约 ()
赋值 (总数, 列表窗.取行数 (.))
载入 (排序窗, 列表窗, 假)

.如果真 (不等于 (排序依据, 0))
    数据库_找出之后的最值 (0, 排序依据, 假, 1) ' 初始化
.如果真结束

.变量循环首 (1, 总数, 1, X)
    .如果 (等于 (排序依据, 0)) ' 随机打乱
        赋值 (最值所在行号, 取随机数 (1, 总数))
    .否则
        赋值 (最值所在行号, 数据库_找出之后的最值 (X, 排序依据, 倒序, 0))
    .如果结束
     ' 输出调试文本 (到文本 (最值所在行号))
    .如果真 (不等于 (X, 最值所在行号)) ' 发现更大或者更小，需要交换
         ' ==========若是正在播放项，则需要更改============
        .如果 (等于 (正在播放项, 相减 (X, 1)))
            列表窗.置图片 (., 正在播放项, 0, -1)
            赋值 (正在播放项, 相减 (最值所在行号, 1))
            列表窗.置图片 (., 正在播放项, 0, 0)
        .否则
            .如果真 (等于 (正在播放项, 相减 (最值所在行号, 1)))
                列表窗.置图片 (., 正在播放项, 0, -1)
                赋值 (正在播放项, 相减 (X, 1))
                列表窗.置图片 (., 正在播放项, 0, 0)
            .如果真结束
            
        .如果结束
        
        赋值 (歌曲信息.Title, 列表窗.取文本 (., X, 1))
        赋值 (歌曲信息.Artist, 列表窗.取文本 (., X, 2))
        赋值 (歌曲信息.Album, 列表窗.取文本 (., X, 3))
        赋值 (歌曲信息.Filepath, 列表窗.取文本 (., X, 4))
        赋值 (歌曲信息.Time, 列表窗.取文本 (., X, 5))
        赋值 (歌曲信息.ShowedTitle, 列表窗.取标题 (., 相减 (X, 1), 0))
        
        列表窗.置标题 (., 相减 (X, 1), 0, 列表窗.取标题 (., 相减 (最值所在行号, 1), 0))
        列表窗.置标题 (., 相减 (X, 1), 1, 列表窗.取标题 (., 相减 (最值所在行号, 1), 1))
        
        列表窗.置文本 (., X, 1, 列表窗.取文本 (., 最值所在行号, 1))
        列表窗.置文本 (., X, 2, 列表窗.取文本 (., 最值所在行号, 2))
        列表窗.置文本 (., X, 3, 列表窗.取文本 (., 最值所在行号, 3))
        列表窗.置文本 (., X, 4, 列表窗.取文本 (., 最值所在行号, 4))
        列表窗.置文本 (., X, 5, 列表窗.取文本 (., 最值所在行号, 5))
        
        
        列表窗.置标题 (., 相减 (最值所在行号, 1), 0, 歌曲信息.ShowedTitle)
        列表窗.置标题 (., 相减 (最值所在行号, 1), 1, 歌曲信息.Time)
        列表窗.置文本 (., 最值所在行号, 1, 歌曲信息.Title)
        列表窗.置文本 (., 最值所在行号, 2, 歌曲信息.Artist)
        列表窗.置文本 (., 最值所在行号, 3, 歌曲信息.Album)
        列表窗.置文本 (., 最值所在行号, 4, 歌曲信息.Filepath)
        列表窗.置文本 (., 最值所在行号, 5, 歌曲信息.Time)
        
        
        
        
    .如果真结束
    .如果 (等于 (排序窗., 假))
         ' 刷新_排序窗 (到文本 (X) ＋ “/” ＋ 到文本 (总数))
        
        赋值 (计数器, 相加 (计数器, 1))
        .如果真 (等于 (计数器, 20))
            赋值 (计数器, 0)
            赋值 (排序窗..标题, 相加 (到文本 (X), “/”, 到文本 (总数)))
            处理事件 ()
        .如果真结束
        
        
    .否则
        排序窗.销毁 ()
        跳出循环 ()
    .如果结束
    
.变量循环尾 ()
.如果真 (是否已创建 (排序窗))
    排序窗.销毁 ()
.如果真结束

连续赋值 (假, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止)
列表窗.允许重画 (.)


.子程序 数据库_找出之后的最值, 整数型, , 若返回值为原行号，则说明这就是要找的最值
.参数 行号, 整数型, , 包含这行，从1开始
.参数 排序依据, 整数型, , 1Title 2Artist 3Album 5时间
.参数 倒序, 逻辑型, , 
.参数 命令号, 整数型, , 0：正常查找 1：重新读取 2：缓存清空，若此参数不为0，则第1、3个参数都可忽视。要执行正常查找之前必须使用“重新读取”命令

.局部变量 最值所在行号, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 文本_最值, 文本型, , , 
.局部变量 文本_临时, 文本型, , , 
.局部变量 缓存数据, 文本型, 静态, "0", 用于减少数据库读取次数
.局部变量 原有数据个数, 整数型, , , 
.局部变量 数据库行数, 整数型, , , 
.局部变量 临时交换变量, 文本型, , , 

.判断开始 (等于 (命令号, 0))
    赋值 (最值所在行号, 行号)
    赋值 (文本_最值, 缓存数据 [行号])
    .变量循环首 (相加 (行号, 1), 取数组成员数 (缓存数据), 1, X)
        赋值 (文本_临时, 缓存数据 [X])
        .如果 (倒序)
            .如果真 (大于 (文本_临时, 文本_最值)) ' 倒叙即找最大
                赋值 (文本_最值, 文本_临时)
                赋值 (最值所在行号, X)
            .如果真结束
            
        .否则
            .如果真 (小于 (文本_临时, 文本_最值))
                赋值 (文本_最值, 文本_临时)
                赋值 (最值所在行号, X)
            .如果真结束
            
        .如果结束
        
    .变量循环尾 ()
    .如果真 (不等于 (行号, 最值所在行号))
        赋值 (临时交换变量, 缓存数据 [最值所在行号])
        赋值 (缓存数据 [最值所在行号], 缓存数据 [行号])
        赋值 (缓存数据 [行号], 临时交换变量)
    .如果真结束
    
    返回 (最值所在行号)
.判断 (等于 (命令号, 1)) ' 重新读取
     ' =====因为加入、删除成员的效率比直接修改要来的低，所以不用=====
    赋值 (原有数据个数, 取数组成员数 (缓存数据))
    赋值 (数据库行数, 列表窗.取行数 (.))
    .如果真 (大于或等于 (原有数据个数, 1)) ' 原来有数据
        .变量循环首 (1, 选择 (大于 (原有数据个数, 数据库行数), 数据库行数, 原有数据个数), 1, X) ' 选择小的
            .如果 (等于 (排序依据, 7)) ' 先修改
                赋值 (缓存数据 [X], 列表窗.取标题 (., 相减 (X, 1), 0)) ' 取显示的标题
            .否则
                赋值 (缓存数据 [X], 列表窗.取文本 (., X, 排序依据))
            .如果结束
            
        .变量循环尾 ()
    .如果真结束
    .如果 (大于 (原有数据个数, 数据库行数))
        删除成员 (缓存数据, 相加 (数据库行数, 1), 相减 (原有数据个数, 数据库行数)) ' 原来多，所以要删除
    .否则
        .变量循环首 (相加 (原有数据个数, 1), 数据库行数, 1, X)
            .如果 (等于 (排序依据, 7)) ' 现在多，要补上
                加入成员 (缓存数据, 列表窗.取标题 (., 相减 (X, 1), 0))
            .否则
                加入成员 (缓存数据, 列表窗.取文本 (., X, 排序依据))
            .如果结束
            
        .变量循环尾 ()
    .如果结束
    
.判断 (等于 (命令号, 2)) ' 清空，一般不用
    重定义数组 (缓存数据, 假, 0)
.默认
    
.判断结束
返回 (-1) ' 返回一个无意义的值，意思意思

.子程序 数据库_取指定文本, 文本型, , 从数据库中取出指定信息
.参数 行号, 整数型, , 从1开始
.参数 信息类型, 整数型, , 1Title 2Artist 3Album

返回 (列表窗.取文本 (., 行号, 信息类型))

.子程序 数据库_取歌曲时间, 整数型, , 从数据库中取出指定歌曲的时间
.参数 行号, 整数型, , 从1开始

返回 (到数值 (列表窗.取文本 (., 行号, 5)))

.子程序 扫描并添加文件, 空白型, , 
.参数 路径, 文本型, , 
.参数 类型数组, 文本型, 可空 数组, "*.xxx"
.参数 需要中止, 逻辑型, 可空, 即关闭“扫描歌曲窗口”，就停止

连续赋值 (真, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止)
.如果真 (是否已创建 (扫描歌曲窗口))
    赋值 (扫描歌曲窗口..禁止, 真)
.如果真结束
.如果真 (是否为空 (类型数组))
    赋值 (类型数组, 分割文本 (支持的扩展名, “;”, ))
.如果真结束
.如果真 (是否为空 (需要中止))
    赋值 (需要中止, 真)
.如果真结束
查找文件_ (路径, 类型数组, 需要中止)
连续赋值 (假, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止, 列表窗..禁止)
.如果真 (是否已创建 (扫描歌曲窗口))
    .如果真 (扫描歌曲窗口.)
        扫描歌曲窗口.销毁 () ' 准备关闭了
    .如果真结束
    
.如果真结束



.子程序 查找文件_, 空白型, , 
.参数 路径, 文本型, , 
.参数 类型数组, 文本型, 参考 数组, 
.参数 需要中止, 逻辑型, 参考, 

.局部变量 文件名, 文本型, , , 
.局部变量 文件名数组, 文本型, , "0", 
.局部变量 现在的启动时间, 整数型, 静态, , 
.局部变量 上次记录的时间, 整数型, 静态, , 
.局部变量 X, 整数型, , , 

.如果真 (需要中止)
    .如果真 (扫描歌曲窗口.)
        返回 ()
    .如果真结束
    
.如果真结束

.如果真 (不等于 (取文本右边 (路径, 1), “\”))
    赋值 (路径, 相加 (路径, “\”))
.如果真结束
.变量循环首 (1, 取数组成员数 (类型数组), 1, X)
     ' =================开始搜文件===================
    赋值 (文件名, 寻找文件 (相加 (路径, 类型数组 [X]), ))
    .判断循环首 (不等于 (文件名, “”))
         ' .如果真 (未知函数_67185598 (文件名, 类型数组))
            赋值 (现在的启动时间, 取启动时间 ())
            .如果真 (大于 (相减 (现在的启动时间, 上次记录的时间), 1000))
                .如果真 (需要中止)
                    赋值 (上次记录的时间, 现在的启动时间)
                    赋值 (扫描歌曲窗口., 相加 (“扫描歌曲―”, 路径, 文件名))
                .如果真结束
                
            .如果真结束
            
            加入成员 (文件名数组, 相加 (路径, 文件名))
            .如果真 (大于或等于 (取数组成员数 (文件名数组), 20))
                列表框加入文件 (文件名数组)
                重定义数组 (文件名数组, 假, 0)
            .如果真结束
            
            .如果真 (需要中止)
                .如果真 (扫描歌曲窗口.)
                    跳出循环 () ' 用户中断
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        处理事件 () ' 防卡
        赋值 (文件名, 寻找文件 ())
    .判断循环尾 ()
.变量循环尾 ()
.如果真 (不等于 (取数组成员数 (文件名数组), 0)) ' 数组里还有
    列表框加入文件 (文件名数组)
.如果真结束


赋值 (文件名, 寻找文件 (相加 (路径, “*.*”), 16))
 ' =====================搜子目录========================
.判断循环首 (不等于 (文件名, “”))
    .如果真 (并且 (不等于 (文件名, “.”), 不等于 (文件名, “..”)))
        查找文件_ (相加 (路径, 文件名), 类型数组, 需要中止) ' 进入继续查找
    .如果真结束
    处理事件 ()
    赋值 (文件名, 寻找文件 (16))
.判断循环尾 ()

.子程序 列表框_删除选中, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 选中项数组, 整数型, , "0", 

赋值 (选中项数组, 列表窗.取被选择表项 (.))
.如果真 (等于 (取数组成员数 (选中项数组), 0))
    返回 ()
.如果真结束
.变量循环首 (1, 取数组成员数 (选中项数组), 1, X)
    列表窗.删除表项 (., 相减 (选中项数组 [X], 相减 (X, 1))) ' 减去X-1是因为删掉一个以后，后面项的编号会提前
    列表窗.删除行 (., 相加 (相减 (选中项数组 [X], 相减 (X, 1)), 1), 1)
    .如果真 (小于 (相减 (选中项数组 [X], 相减 (X, 1)), 正在播放项)) ' 在“正在播放”之前
        赋值 (正在播放项, 相减 (正在播放项, 1)) ' 移动
    .如果真结束
    
.变量循环尾 ()
标记打乱_历史记录和预约 (选中项数组 [1])

.子程序 列表框_删除全部, 空白型, , 
列表窗.全部删除 (.)
列表窗.删除行 (., 1, 列表窗.取行数 (.))
赋值 (正在播放项, -1)
标记打乱_历史记录和预约 ()

.子程序 列表框_删除不存在项, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 已删除数量, 整数型, , , 
.局部变量 已经标记打乱, 逻辑型, , , 

赋值 (已删除数量, 0)
赋值 (已经标记打乱, 假)
.变量循环首 (1, 列表窗.取行数 (.), 1, X)
    .如果真 (等于 (文件是否存在 (列表窗.取文本 (., X, 4)), 假))
        列表窗.删除表项 (., 相减 (X, 1, 已删除数量))
        列表窗.删除行 (., 相减 (X, 已删除数量), 1)
        
        .如果真 (等于 (已经标记打乱, 假))
            标记打乱_历史记录和预约 (相减 (X, 1, 已删除数量))
            赋值 (已经标记打乱, 真)
        .如果真结束
        
        赋值 (已删除数量, 相加 (已删除数量, 1))
        .如果真 (小于 (相减 (X, 1), 正在播放项)) ' 在“正在播放”之前
            赋值 (正在播放项, 相减 (正在播放项, 1)) ' 移动
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()


.子程序 列表框_删除重复, 空白型, , 
.局部变量 已存在的文件数组, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 当前文件名, 文本型, , , 
.局部变量 已删除数量, 整数型, , , 
.局部变量 已经标记打乱, 逻辑型, , , 

赋值 (已经标记打乱, 假)
.变量循环首 (1, 列表窗.取行数 (.), 1, X)
    赋值 (当前文件名, 列表窗.取文本 (., 相减 (X, 已删除数量), 4))
    .变量循环首 (1, 取数组成员数 (已存在的文件数组), 1, Y)
        .如果真 (等于 (到大写 (已存在的文件数组 [Y]), 到大写 (当前文件名)))
            列表窗.删除表项 (., 相减 (X, 1, 已删除数量))
            列表窗.删除行 (., 相减 (X, 已删除数量), 1)
            
            .如果真 (等于 (已经标记打乱, 假))
                标记打乱_历史记录和预约 (相减 (X, 1, 已删除数量))
                赋值 (已经标记打乱, 真)
            .如果真结束
            
            赋值 (已删除数量, 相加 (已删除数量, 1))
            .如果真 (小于 (相减 (X, 1), 正在播放项)) ' 在“正在播放”之前
                赋值 (正在播放项, 相减 (正在播放项, 1)) ' 移动
            .如果真结束
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (等于 (Y, 相加 (取数组成员数 (已存在的文件数组), 1))) ' 没有删除，即没重复
        加入成员 (已存在的文件数组, 当前文件名) ' 加入
    .如果真结束
    
.变量循环尾 ()


.子程序 释放物理内存, 空白型, , 慎用
SetProcessWorkingSetSize (-1, -1, -1)

.子程序 计算_二元线性调整, 空白型, , 
.参数 定位点1, 小数型, , 
.参数 歌词行1, 整数型, , 
.参数 定位点2, 小数型, , 
.参数 歌词行2, 整数型, , 

.局部变量 原行时间1, 小数型, , , 原来的“歌词行”对应的时间
.局部变量 原行时间2, 小数型, , , 
.局部变量 压缩比率, 小数型, , , 
.局部变量 X, 整数型, , , 

赋值 (原行时间1, 取歌词时间 (歌词行1))
赋值 (原行时间2, 取歌词时间 (歌词行2))
赋值 (压缩比率, 相除 (相减 (定位点2, 定位点1), 相减 (原行时间2, 原行时间1)))
输出调试文本 (到文本 (压缩比率))
.变量循环首 (1, 取数组成员数 (歌词_当前), 1, X)
    赋值 (歌词_当前 [X], 时间, 相减 (歌词_当前 [X], 时间, 歌词_偏移值))
    赋值 (歌词_当前 [X], 时间, 相加 (相乘 (相减 (歌词_当前 [X], 时间, 原行时间1), 压缩比率), 定位点1))
.变量循环尾 ()
赋值 (歌词_偏移值, 0)
同步歌词 (媒体_取位置 (), , , ) ' 先刷新整体时间
歌词实时显示 (假, , 真, 真, ) ' 再用“不慢慢滚动”来让函数读取整体时间（有“慢慢滚动”属性时，函数不会读整体时间）

.子程序 取匹配字条, 文本型, , 未完（用作英文首字母查询）
.参数 文本, 文本型, , 

.局部变量 分割的文本, 文本型, , "0", 
.局部变量 匹配字条, 文本型, , "0", 
.局部变量 单个字条, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 Z, 整数型, , , 
.局部变量 复制的数组, 文本型, , "0", 

赋值 (分割的文本, 分割文本 (到半角 (文本), “ ”, ))
重定义数组 (匹配字条, 假, 1)
.变量循环首 (1, 取数组成员数 (分割的文本), 1, X)
    赋值 (单个字条, 分割文本 (取文本拼音 (分割的文本 [X]), #换行符, ))
    .判断开始 (大于 (取数组成员数 (单个字条), 1))
        复制数组 (复制的数组, 匹配字条)
        .变量循环首 (1, 取数组成员数 (匹配字条), 1, Y)
            赋值 (匹配字条 [Y], 相加 (匹配字条 [Y], 单个字条 [1])) ' 先加入第一个
        .变量循环尾 ()
        .变量循环首 (2, 取数组成员数 (单个字条), 1, Y)
            .变量循环首 (1, 取数组成员数 (复制的数组), 1, Z)
                加入成员 (匹配字条, 相加 (复制的数组 [Z], 单个字条 [Y])) ' 复制，顺带加入
            .变量循环尾 ()
        .变量循环尾 ()
        
    .判断 (等于 (取数组成员数 (单个字条), 1))
        .变量循环首 (1, 取数组成员数 (匹配字条), 1, Y)
            赋值 (匹配字条 [Y], 相加 (匹配字条 [Y], 单个字条 [1]))
        .变量循环尾 ()
        
    .默认
         ' 有可能是空文本
        
    .判断结束
    
.变量循环尾 ()


.子程序 取文本拼音, 文本型, , 可以与英文、数字共存，若有多个拼音，则以“#换行符”分割
.参数 文本, 文本型, , 

.局部变量 拼音数组, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 返回值, 文本型, , , 

重定义数组 (拼音数组, 假, 1)
赋值 (X, 1)
.判断循环首 (小于或等于 (X, 取文本长度 (文本)))
    .如果 (或者 (小于 (取代码 (文本, X), 0), 大于 (取代码 (文本, X), 128))) ' 若为真，表明是汉字
        加入拼音数组 (取文本中间 (文本, X, 2), 拼音数组)
        赋值 (X, 相加 (X, 1)) ' 汉字占用两个字节
    .否则
        .变量循环首 (1, 取数组成员数 (拼音数组), 1, Y)
            赋值 (拼音数组 [Y], 相加 (拼音数组 [Y], 取文本中间 (文本, X, 1)))
        .变量循环尾 ()
    .如果结束
    赋值 (X, 相加 (X, 1))
.判断循环尾 ()


.变量循环首 (1, 取数组成员数 (拼音数组), 1, X)
    赋值 (返回值, 相加 (返回值, 拼音数组 [X], #换行符))
.变量循环尾 ()
赋值 (返回值, 取文本左边 (返回值, 相减 (取文本长度 (返回值), 2)))
返回 (返回值)

.子程序 加入拼音数组, 空白型, , 把单字的拼音首字母加入给定的数组，必要时会扩充数组
.参数 单字, 文本型, , 
.参数 数组, 文本型, 参考 数组, 该数组包含了一串文本的拼音首字母，而该函数只是在末尾添加

.局部变量 发音数, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 原发音数组, 文本型, , "0", 

.如果真 (不等于 (取文本长度 (单字), 2))
    返回 ()
.如果真结束
赋值 (发音数, 取发音数目 (单字))
.如果 (大于 (发音数, 1)) ' 该字是多音字
    复制数组 (原发音数组, 数组) ' 备份，以供扩充
    .变量循环首 (1, 取数组成员数 (数组), 1, X)
        赋值 (数组 [X], 相加 (数组 [X], 取文本左边 (取拼音 (单字, 1), 1))) ' 先加入第一个发音
    .变量循环尾 ()
    .变量循环首 (1, 相减 (发音数, 1), 1, X)
        .变量循环首 (1, 取数组成员数 (原发音数组), 1, Y)
            加入成员 (数组, 相加 (原发音数组 [Y], 取文本左边 (取拼音 (单字, 相加 (X, 1)), 1))) ' 扩充原数组，顺带加上该字发音
        .变量循环尾 ()
    .变量循环尾 ()
.否则
    .变量循环首 (1, 取数组成员数 (数组), 1, X)
        赋值 (数组 [X], 相加 (数组 [X], 取文本左边 (取拼音 (单字, 1), 1)))
    .变量循环尾 ()
    
.如果结束


.子程序 历史记录_添加记录, 空白型, , 
.参数 全路径, 文本型, , 
.参数 项号, 整数型, , 

.局部变量 临时_历史记录, 历史记录, , , 

.判断开始 (大于 (记录_序号, 2)) ' 正在回顾历史记录，且在最近第二个之前，那么需要删除
    删除成员 (历史记录, 1, 相减 (记录_序号, 2))
    赋值 (历史记录 [1].全路径, 全路径)
    赋值 (历史记录 [1].项号, 项号)
    赋值 (历史记录 [1].项号准确否, 真)
.判断 (等于 (记录_序号, 2)) ' 刚好在最近的第二个记录，那么只要改第一个就可以
    赋值 (历史记录 [1].全路径, 全路径)
    赋值 (历史记录 [1].项号, 项号)
    赋值 (历史记录 [1].项号准确否, 真)
.默认
    赋值 (临时_历史记录.全路径, 全路径)
    赋值 (临时_历史记录.项号, 项号)
    赋值 (临时_历史记录.项号准确否, 真)
    插入成员 (历史记录, 1, 临时_历史记录)
.判断结束
赋值 (记录_序号, 1)
.如果真 (大于或等于 (播放器设置.历史记录数量, 1)) ' 其他值视为不限制个数
    .如果真 (大于 (取数组成员数 (历史记录), 播放器设置.历史记录数量)) ' 若太多，则删除很久以前的
        删除成员 (历史记录, 相加 (播放器设置.历史记录数量, 1), 相减 (取数组成员数 (历史记录), 播放器设置.历史记录数量))
    .如果真结束
    
.如果真结束


.子程序 历史记录_回顾, 整数型, , 往以前的移动，返回项号
.参数 全路径, 文本型, 参考, 接收变量

.如果 (小于或等于 (相加 (记录_序号, 1), 取数组成员数 (历史记录)))
    赋值 (记录_序号, 相加 (记录_序号, 1))
.否则
    返回 (-1) ' 若没记录，返回-1
.如果结束
.如果真 (等于 (历史记录 [记录_序号], 项号准确否, 假)) ' 不准确
    赋值 (历史记录 [记录_序号], 项号, 定位项号 (历史记录 [记录_序号], 全路径)) ' 重新定位
    赋值 (历史记录 [记录_序号], 项号准确否, 真)
.如果真结束
赋值 (全路径, 历史记录 [记录_序号], 全路径)
返回 (历史记录 [记录_序号], 项号)

.子程序 历史记录_退回, 整数型, , 往现在的移动，返回项号
.参数 全路径, 文本型, 参考, 接收变量

.如果 (大于或等于 (相减 (记录_序号, 1), 1))
    赋值 (记录_序号, 相减 (记录_序号, 1))
.否则
    返回 (-1) ' 若没记录，返回-1
.如果结束
.如果真 (等于 (历史记录 [记录_序号], 项号准确否, 假)) ' 不准确
    赋值 (历史记录 [记录_序号], 项号, 定位项号 (历史记录 [记录_序号], 全路径)) ' 重新定位
    赋值 (历史记录 [记录_序号], 项号准确否, 真)
.如果真结束
赋值 (全路径, 历史记录 [记录_序号], 全路径)
返回 (历史记录 [记录_序号], 项号)

.子程序 定位项号, 整数型, , 根据文件全路径来定位项号（项号从0开始）
.参数 全路径, 文本型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 列表窗.取行数 (.), 1, X)
    .如果真 (等于 (列表窗.取文本 (., X, 4), 全路径))
        返回 (相减 (X, 1))
    .如果真结束
    
.变量循环尾 ()
返回 (-1)

.子程序 标记打乱_历史记录和预约, 空白型, , 排序或删除后需要调用
.参数 初始行号, 整数型, 可空, 指定从哪行以后（包含此行）需要标记，默认全部

.局部变量 X, 整数型, , , 

.如果真 (是否为空 (初始行号))
    赋值 (初始行号, 0)
.如果真结束
.变量循环首 (1, 取数组成员数 (历史记录), 1, X)
    .如果真 (大于或等于 (历史记录 [X], 项号, 初始行号))
        赋值 (历史记录 [X], 项号准确否, 假)
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (预约列表), 1, X)
    .如果真 (大于或等于 (预约列表 [X], 项号, 初始行号))
        赋值 (预约列表 [X], 项号准确否, 假)
    .如果真结束
    
.变量循环尾 ()

.子程序 上一首, 空白型, , 
.局部变量 项号, 整数型, , , 
.局部变量 全路径, 文本型, , , 

.如果真 (等于 (列表窗.取行数 (.), 0))
    返回 ()
.如果真结束
.如果 (播放器设置.开启历史记录)
    赋值 (项号, 历史记录_回顾 (全路径))
    .如果真 (不等于 (项号, -1))
        主控制集_打开媒体 (全路径, #换行符, 假, 项号, 假)
        消息_歌词窗尺寸改变 ()
    .如果真结束
    
.否则
    换歌 (相减 (正在播放项, 1))
    消息_歌词窗尺寸改变 ()
.如果结束


.子程序 下一首, 空白型, , 
.局部变量 项号, 整数型, , , 
.局部变量 全路径, 文本型, , , 

.如果真 (等于 (列表窗.取行数 (.), 0))
    媒体_关闭 ()
    返回 ()
.如果真结束
赋值 (项号, 历史记录_退回 (全路径))
.如果 (播放器设置.开启历史记录)
    .如果 (不等于 (项号, -1))
        主控制集_打开媒体 (全路径, #换行符, 假, 项号, 假)
    .否则
        .如果 (等于 (播放器设置.循环模式, 3)) ' 没有下一首了
            换歌 () ' 随机
        .否则
            换歌 (相加 (正在播放项, 1)) ' 下一个
        .如果结束
        
    .如果结束
    
.否则
    换歌 (相加 (正在播放项, 1))
.如果结束
消息_歌词窗尺寸改变 ()



.子程序 快退, 空白型, , 
.局部变量 媒体状态, 整数型, , , 

.如果真 (小于或等于 (播放器设置.快进快退长度, 0)) ' 纠错
    赋值 (播放器设置.快进快退长度, 10)
.如果真结束
赋值 (媒体状态, 媒体_取状态 ())
.如果真 (或者 (等于 (媒体状态, 1), 等于 (媒体状态, 3)))
    媒体_置位置 (相减 (媒体_取位置 (), 播放器设置.快进快退长度))
    歌词实时显示 (真)
.如果真结束


.子程序 快进, 空白型, , 
.局部变量 媒体状态, 整数型, , , 

.如果真 (小于或等于 (播放器设置.快进快退长度, 0)) ' 纠错
    赋值 (播放器设置.快进快退长度, 10)
.如果真结束
赋值 (媒体状态, 媒体_取状态 ())
.如果真 (或者 (等于 (媒体状态, 1), 等于 (媒体状态, 3)))
    媒体_置位置 (相加 (媒体_取位置 (), 播放器设置.快进快退长度))
.如果真结束


.子程序 应用配置_快捷键, 空白型, , 
.局部变量 分割的文本, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 临时_热键, 热键标识, , , 
.局部变量 类型, 逻辑型, , , 真为热键
.局部变量 临时_快捷键, 快捷键, , , 

.变量循环首 (1, 取数组成员数 (热键标识组), 1, X)
    未知支持库函数_11 (主窗口.取窗口句柄 (), 热键标识组 [X], 标识号)
.变量循环尾 ()


重定义数组 (热键标识组, 假, 0)
重定义数组 (快捷键组, 假, 0)
赋值 (播放器设置.桌面歌词_锁定热键, 0)
赋值 (分割的文本, 分割文本 (播放器设置.热键, “|”, ))
.如果真 (大于或等于 (取数组成员数 (分割的文本), 1))
    .变量循环首 (1, 取数组成员数 (分割的文本), 1, X)
        .如果真 (等于 (整除 (到数值 (分割的文本 [X]), 100000), 16)) ' 是锁定桌面歌词的热键
            赋值 (播放器设置.桌面歌词_锁定热键, 求余数 (取绝对值 (到数值 (分割的文本 [X])), 100000)) ' 直接由该程序处理
            到循环尾 ()
        .如果真结束
        
        
        
        .如果 (大于 (到数值 (分割的文本 [X]), 0))
            赋值 (类型, 真)
        .否则
            赋值 (类型, 假)
            赋值 (分割的文本 [X], 到文本 (负 (到数值 (分割的文本 [X])))) ' 去掉负号
        .如果结束
        
        .如果 (类型)
            赋值 (临时_热键.标识号, 未知支持库函数_10 (主窗口.取窗口句柄 (), 主窗口.取窗口句柄 (.), 整除 (求余数 (到数值 (分割的文本 [X]), 100000), 1000), 求余数 (到数值 (分割的文本 [X]), 100000, 1000)))
            .如果真 (不等于 (临时_热键.标识号, 0)) ' 注册成功，加入数组
                赋值 (临时_热键.命令, 整除 (到数值 (分割的文本 [X]), 100000))
                加入成员 (热键标识组, 临时_热键)
            .如果真结束
            
        .否则
            赋值 (临时_快捷键.命令, 整除 (到数值 (分割的文本 [X]), 100000))
            赋值 (临时_快捷键.功能键, 整除 (求余数 (到数值 (分割的文本 [X]), 100000), 1000))
            赋值 (临时_快捷键.键代码, 求余数 (到数值 (分割的文本 [X]), 100000, 1000))
            加入成员 (快捷键组, 临时_快捷键)
        .如果结束
        
    .变量循环尾 ()
.如果真结束
应用配置_桌面歌词 (19) ' 发送热键

.子程序 回调函数_热键事件, 空白型, , 
.参数 标识号, 整数型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (热键标识组), 1, X)
    .如果真 (等于 (热键标识组 [X], 标识号, 标识号))
        执行命令 (热键标识组 [X], 命令)
    .如果真结束
    
.变量循环尾 ()

.子程序 回调函数_快捷键事件, 逻辑型, , 若有快捷键，则返回真
.参数 功能键, 整数型, , 
.参数 键代码, 整数型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (快捷键组), 1, X)
    .如果真 (并且 (等于 (快捷键组 [X], 功能键, 功能键), 等于 (快捷键组 [X], 键代码, 键代码)))
        执行命令 (快捷键组 [X], 命令)
        返回 (真)
    .如果真结束
    
.变量循环尾 ()
返回 (假)

.子程序 设置静音, 空白型, , 
.参数 静音, 逻辑型, 可空, 默认改变当前状态

.如果 (是否为空 (静音))
    赋值 (静音了, 取反 (静音了))
.否则
    赋值 (静音了, 静音)
.如果结束
应用音量 ()

.子程序 改变音量, 整数型, , 
.参数 改变值, 整数型, , 

赋值 (播放器设置.音量, 相加 (播放器设置.音量, 改变值))
.如果真 (小于 (播放器设置.音量, 0))
    赋值 (播放器设置.音量, 0)
.如果真结束
.如果真 (大于 (播放器设置.音量, 64))
    赋值 (播放器设置.音量, 64)
.如果真结束
应用音量 ()
刷新音量条 (播放器设置.音量)
返回 (播放器设置.音量)

.子程序 打开对话框选择文件, 逻辑型, , 返回真表示用户选择了文件，假表示选择了取消
.局部变量 高级对话框, 新通用对话框类, 静态, , 
.局部变量 正在打开, 逻辑型, 静态, , 
.局部变量 打开了, 逻辑型, , , 
.局部变量 文件名, 文本型, , , 

.如果真 (正在打开)
    返回 (假)
.如果真结束
赋值 (正在打开, 真)
高级对话框.文件对话框初始化 (播放器设置.过滤器, , , , , , , , , 真)
.如果 (高级对话框.打开 (0, 0, 文件名, “选择要打开的文件”, 0))
    主控制集_打开媒体 (文件名, #换行符)
    赋值 (打开了, 真)
.否则
    赋值 (打开了, 假)
.如果结束
赋值 (正在打开, 假)
返回 (打开了)

.子程序 连接文本数组, 文本型, , 
.参数 数组, 文本型, 数组, 
.参数 分隔符, 文本型, , 

.局部变量 X, 整数型, , , 
.局部变量 返回值, 文本型, , , 

.变量循环首 (1, 取数组成员数 (数组), 1, X)
    赋值 (返回值, 相加 (返回值, 数组 [X], 分隔符))
.变量循环尾 ()
赋值 (返回值, 取文本左边 (返回值, 相减 (取文本长度 (返回值), 取文本长度 (分隔符))))
返回 (返回值)

.子程序 弹出托盘气球, 空白型, , 
.参数 气球标题, 文本型, 可空, 默认为“正在播放”
.参数 气球文本, 文本型, 可空, 默认为当前歌曲信息
.参数 图标类型, 整数型, 可空, 0、无图标；1、信息图标；2、警告图标；3、错误图标，默认为1
.参数 自动关闭延时, 整数型, 可空, 
.参数 必须显示, 逻辑型, 可空, 忽略未初始化完毕

.如果真 (是否为空 (必须显示))
    赋值 (必须显示, 假)
.如果真结束
.如果真 (并且 (等于 (歌词窗准许刷新, 假), 等于 (必须显示, 假))) ' 用此变量来判断是否载入完毕，因为一般来说启动自动播放是不需要弹出气球的
    返回 ()
.如果真结束
.如果真 (是否为空 (气球文本))
    赋值 (气球文本, 生成标题 (播放器设置.标签显示方案_托盘气球, TAG信息, 列表窗.取文本 (., 相加 (正在播放项, 1), 4)))
.如果真结束
.如果真 (是否为空 (气球标题))
    赋值 (气球标题, “正在播放”)
.如果真结束
.如果真 (是否为空 (图标类型))
    赋值 (图标类型, 1)
.如果真结束
.如果真 (是否为空 (自动关闭延时))
    赋值 (自动关闭延时, 0)
.如果真结束
主窗口.未知支持库函数_20 (., 气球标题, 气球文本, 图标类型, 自动关闭延时)


.子程序 执行命令, 空白型, , 用于热键/快捷键
.参数 命令号, 整数型, , 

.判断开始 (等于 (命令号, 1)) ' 播放/暂停
    .如果真 (等于 (主窗口..禁止, 假)) ' 要求可操作
        播放暂停 ()
    .如果真结束
    
.判断 (等于 (命令号, 2)) ' 快退
    快退 ()
.判断 (等于 (命令号, 3)) ' 快进
    快进 ()
.判断 (等于 (命令号, 4)) ' 停止（关闭）
    _按钮_停止_被单击 ()
.判断 (等于 (命令号, 5)) ' 上一首
    上一首 ()
.判断 (等于 (命令号, 6)) ' 下一首
    下一首 ()
.判断 (等于 (命令号, 7)) ' 加大音量
    改变音量 (4)
.判断 (等于 (命令号, 8)) ' 减小音量
    改变音量 (-4)
.判断 (等于 (命令号, 9)) ' 静音
    设置静音 ()
.判断 (等于 (命令号, 10)) ' 打开对话框选择文件
    打开对话框选择文件 ()
.判断 (等于 (命令号, 11)) ' 快速定位
    开启快速查找 ()
.判断 (等于 (命令号, 12)) ' 精确查找
    _精确查找_被选择 ()
.判断 (等于 (命令号, 13)) ' 手动搜索
    _手动搜索_被选择 ()
.判断 (等于 (命令号, 14)) ' 减速
    .如果真 (大于 (均衡器窗..位置, 均衡器窗..最小位置))
        赋值 (均衡器窗..位置, 相减 (均衡器窗..位置, 1))
        应用变速 ()
        
    .如果真结束
    
.判断 (等于 (命令号, 15)) ' 加速
    .如果真 (小于 (均衡器窗..位置, 均衡器窗..最大位置))
        赋值 (均衡器窗..位置, 相加 (均衡器窗..位置, 1))
        应用变速 ()
        
    .如果真结束
     ' 15是桌面歌词锁定，不在此处理
.判断 (等于 (命令号, 17)) ' 显示设置窗
    载入 (设置窗口, 主窗口, 假)
.判断 (等于 (命令号, 18)) ' 显隐主窗口
    显示隐藏指定窗口 (1)
.判断 (等于 (命令号, 19)) ' 显隐列表窗
    显示隐藏指定窗口 (2)
.判断 (等于 (命令号, 20)) ' 显隐歌词窗
    显示隐藏指定窗口 (3)
.判断 (等于 (命令号, 21)) ' 显隐均衡器窗
    显示隐藏指定窗口 (4)
.判断 (等于 (命令号, 22)) ' 显隐桌面歌词
    显示隐藏指定窗口 (5)
.默认
    
.判断结束


.子程序 显示隐藏指定窗口, 空白型, , 
.参数 窗口号, 整数型, , 1、主 2列表 3歌词 4均衡器 5桌面歌词
.参数 状态, 逻辑型, 可空, 默认取反

.判断开始 (等于 (窗口号, 1))
    .如果真 (是否为空 (状态))
        赋值 (状态, 取反 (主窗口.))
    .如果真结束
    .如果 (状态) ' 为真表示显示
        显示主窗口 ()
    .否则
        赋值 (主窗口., 2)
    .如果结束
    
.判断 (等于 (窗口号, 2))
    .如果 (是否为空 (状态))
        显示隐藏列表窗 ()
    .否则
        显示隐藏列表窗 (状态)
    .如果结束
    
    
.判断 (等于 (窗口号, 3))
    .如果 (是否为空 (状态))
        显示隐藏歌词窗 ()
    .否则
        显示隐藏歌词窗 (状态)
    .如果结束
    
    
.判断 (等于 (窗口号, 4))
    .如果 (是否为空 (状态))
        显示隐藏均衡器窗 ()
    .否则
        显示隐藏均衡器窗 (状态)
    .如果结束
    
    
.判断 (等于 (窗口号, 5))
    .如果 (是否为空 (状态))
        显示隐藏桌面歌词 ()
    .否则
        显示隐藏桌面歌词 (状态)
    .如果结束
    
    
    
.默认
    
.判断结束



.子程序 显示隐藏桌面歌词, 逻辑型, , 若正在等待桌面歌词返回，则返回假
.参数 状态, 逻辑型, 可空, 

.如果真 (是否为空 (状态))
    赋值 (状态, 取反 (播放器设置.桌面歌词_显示))
.如果真结束
.如果 (等于 (播放器设置.桌面歌词_显示, 假))
    .如果真 (等于 (状态, 真))
        返回 (运行桌面歌词 ())
    .如果真结束
    
.否则
    .如果真 (等于 (状态, 假))
        返回 (关闭桌面歌词 ())
    .如果真结束
    
.如果结束
返回 (假)

.子程序 显示隐藏均衡器窗, 空白型, , 
.参数 状态, 逻辑型, 可空, 

.如果真 (是否为空 (状态))
    赋值 (状态, 取反 (均衡器窗.))
.如果真结束
赋值 (均衡器窗., 状态)
.如果真 (主窗口.)
    赋值 (均衡器窗., 均衡器窗.)
.如果真结束
刷新按钮_均衡器窗 (均衡器窗.)


.子程序 显示隐藏歌词窗, 空白型, , 
.参数 状态, 逻辑型, 可空, 

.如果真 (是否为空 (状态))
    赋值 (状态, 取反 (歌词窗.))
.如果真结束
赋值 (歌词窗., 状态)
.如果真 (主窗口.)
    赋值 (歌词窗., 歌词窗.)
.如果真结束
刷新按钮_歌词窗 (歌词窗.)


.子程序 显示隐藏列表窗, 空白型, , 
.参数 状态, 逻辑型, 可空, 

.如果真 (是否为空 (状态))
    赋值 (状态, 取反 (列表窗.))
.如果真结束
赋值 (列表窗., 状态)
.如果真 (主窗口.)
    赋值 (列表窗., 列表窗.)
.如果真结束
刷新按钮_列表窗 (列表窗.)


.子程序 滚动显示任务栏文本, 空白型, , 
.参数 要显示的文本, 文本型, 可空, 默认不修改
.参数 重置滚动位置, 逻辑型, 可空, 默认假

.局部变量 原文本, 文本型, 静态, , 
.局部变量 处理后的文本, 文本型, , , 
.局部变量 字符代码0, 整数型, , , 
.局部变量 字符代码1, 整数型, , , 
.局部变量 字符代码2, 整数型, , , 
.局部变量 汉字, 逻辑型, , , 
.局部变量 待处理文本, 文本型, , , 
.局部变量 文本滚动位置, 整数型, 静态, , 

.如果真 (等于 (是否为空 (要显示的文本), 假))
    赋值 (原文本, 要显示的文本)
.如果真结束
.如果真 (是否为空 (重置滚动位置))
    赋值 (重置滚动位置, 假)
.如果真结束
.如果真 (重置滚动位置)
    赋值 (文本滚动位置, 0)
    赋值 (主窗口..时钟周期, 0)
    赋值 (主窗口..时钟周期, 到数值 (主窗口..标记))
.如果真结束
.如果 (并且 (等于 (媒体_取状态 (), 1), 播放器设置.任务栏滚动信息))
    赋值 (待处理文本, 相加 (“　”, 原文本, “　　”))
    赋值 (字符代码0, 取代码 (取文本中间 (待处理文本, 相加 (文本滚动位置, 1), 1), ))
    赋值 (字符代码1, 取代码 (取文本中间 (待处理文本, 相加 (文本滚动位置, 2), 1), ))
    .如果 (或者 (大于 (字符代码0, 128), 小于 (字符代码0, 0)))
        .如果 (或者 (大于 (字符代码1, 128), 小于 (字符代码1, 0)))
            赋值 (汉字, 真)
        .否则
            赋值 (汉字, 假)
        .如果结束
        
    .否则
        赋值 (汉字, 假)
    .如果结束
    
    .如果 (汉字)
        .如果 (小于 (相加 (文本滚动位置, 2), 取文本长度 (待处理文本)))
            赋值 (文本滚动位置, 相加 (文本滚动位置, 2))
        .否则
            赋值 (文本滚动位置, 0)
        .如果结束
        
    .否则
        .如果 (小于 (相加 (文本滚动位置, 1), 取文本长度 (待处理文本)))
            赋值 (文本滚动位置, 相加 (文本滚动位置, 1))
        .否则
            赋值 (文本滚动位置, 0)
        .如果结束
        
    .如果结束
    赋值 (主窗口., 相加 (取文本右边 (待处理文本, 相减 (取文本长度 (待处理文本), 文本滚动位置)), 取文本左边 (待处理文本, 文本滚动位置)))
.否则
    赋值 (文本滚动位置, 0)
    赋值 (主窗口., 原文本)
.如果结束


.子程序 置播放项为空, 空白型, , 打开失败 或关闭时调用
.局部变量 空数组, 文本型, , "0", 

置列表项图标 (正在播放项, -1)
赋值 (正在播放项, -1)
置歌曲信息 (空数组)
赋值 (等待网络搜索, 假)
终止搜索 ()
重定义数组 (歌词_当前, 假, 0)
赋值 (歌词_行号, 0)
滚动显示任务栏文本 (#程序名)
置状态文本 (“”)
消息_歌词窗尺寸改变 ()

.子程序 设定窗口透明度, 空白型, , 
.参数 句柄, 整数型, , 
.参数 透明度, 整数型, , 

.如果 (不等于 (透明度, 0))
    SetWindowLong (句柄, -20, 位或 (GetWindowLong (句柄, -20), 524288)) ' 开启透明属性
    设置窗口透明 (句柄, 0, 相减 (255, 透明度), 2)
.否则
    SetWindowLong (句柄, -20, 位与 (GetWindowLong (句柄, -20), 位取反 (524288))) ' 关闭透明属性
    设置窗口透明 (句柄, 0, 相减 (255, 透明度), 2)
    
.如果结束


.子程序 显示主菜单, 空白型, , 
.参数 在托盘区, 逻辑型, , 

.局部变量 顶边, 整数型, , , 
.局部变量 左边, 整数型, , , 

.如果真 (等于 (是否已创建 (菜单窗口), 假))
    载入 (菜单窗口, , 假)
.如果真结束
.如果 (在托盘区)
    赋值 (左边, 取鼠标水平位置 ())
    赋值 (顶边, 取鼠标垂直位置 ())
    .如果真 (大于 (相加 (顶边, 菜单窗口.), 取屏幕高度 ()))
        赋值 (顶边, 相减 (取鼠标垂直位置 (), 菜单窗口.))
    .如果真结束
    .如果真 (大于 (相加 (左边, 菜单窗口.), 取屏幕宽度 ()))
        赋值 (左边, 相减 (取鼠标水平位置 (), 菜单窗口.))
    .如果真结束
    菜单窗口.移动 (左边, 顶边, , )
.否则
    菜单窗口.移动 (相加 (主窗口., 2), 相加 (主窗口., 18), , )
.如果结束
菜单窗口_显示 ()
.如果真 (等于 (在托盘区, 假))
    .如果真 (等于 (取提示状态 (5), 假))
        主窗口.未知支持库函数_26 (., 相加 (菜单窗口., 菜单窗口..左边, 相除 (菜单窗口..宽度, 2)), 相加 (菜单窗口., 菜单窗口..顶边, 相除 (菜单窗口..高度, 2)), #Tip5, -1, 真)
    .如果真结束
    
.如果真结束


.子程序 生成标题, 文本型, , 自动填充歌曲信息显示方案，若返回空文本
.参数 方案文本, 文本型, , 比如“(标题)-(艺术家)”
.参数 音乐文件标签, 音乐文件标签, , 
.参数 文件名, 文本型, 可空, 当所有要读取的标签都为空时，默认为无标签，此时会直接返回文件名
.参数 精简模式, 逻辑型, 可空, 仅仅用前三个标签，默认假

.局部变量 Tag, 音乐文件标签, , , 
.局部变量 返回值, 文本型, , , 
.局部变量 有标签, 逻辑型, , "8", 先是代表方案中有此标签（值为真），后判断空标签时，再一个个赋予假（此变量用法很诡异）
.局部变量 标签名数组, 文本型, 静态, "0", 
.局部变量 X, 整数型, , , 

.如果真 (是否为空 (精简模式))
    赋值 (精简模式, 假)
.如果真结束
.如果真 (等于 (取数组成员数 (标签名数组), 0))
    赋值 (标签名数组, { “(标题)”, “(艺术家)”, “(专辑)”, “(年份)”, “(流派)”, “(备注)”, “(编号)”, “(歌词)” })
.如果真结束
.变量循环首 (1, 选择 (精简模式, 3, 8), 1, X)
    .如果真 (不等于 (寻找文本 (到半角 (方案文本), 标签名数组 [X], , 假), -1))
        赋值 (有标签 [X], 真)
    .如果真结束
    
.变量循环尾 ()
.如果真 (并且 (等于 (有标签 [1], 假), 等于 (有标签 [2], 假), 等于 (有标签 [3], 假), 等于 (有标签 [4], 假), 等于 (有标签 [5], 假), 等于 (有标签 [6], 假), 等于 (有标签 [7], 假), 等于 (有标签 [8], 假))) ' 全没有
    返回 (方案文本) ' 全没有还替换啥？
.如果真结束

赋值 (Tag, 音乐文件标签)
.如果真 (等于 (Tag.Title, “”))
    赋值 (Tag.Title, “(未知Title)”)
    赋值 (有标签 [1], 假)
.如果真结束
.如果真 (等于 (Tag.Artist, “”))
    赋值 (Tag.Artist, “(未知Artist)”)
    赋值 (有标签 [2], 假)
.如果真结束
.如果真 (等于 (Tag.Album, “”))
    赋值 (Tag.Album, “(未知Album)”)
    赋值 (有标签 [3], 假)
.如果真结束
.如果真 (等于 (精简模式, 假))
    .如果真 (等于 (Tag.Year, “”))
        赋值 (Tag.Year, “(未知Year)”)
        赋值 (有标签 [4], 假)
    .如果真结束
    .如果真 (等于 (Tag.ContenttType, “”))
        赋值 (Tag.ContenttType, “(未知Genre)”)
        赋值 (有标签 [5], 假)
    .如果真结束
    .如果真 (等于 (Tag.Comment, “”))
        赋值 (Tag.Comment, “(未知Comment)”)
        赋值 (有标签 [6], 假)
    .如果真结束
    .如果真 (等于 (Tag.TrackNumber, “”))
        赋值 (Tag.TrackNumber, “(未知Number)”)
        赋值 (有标签 [7], 假)
    .如果真结束
    .如果真 (等于 (Tag.Lyric, “”))
        赋值 (Tag.Lyric, “(未知Lyric)”)
        赋值 (有标签 [8], 假)
    .如果真结束
    
.如果真结束

.如果真 (并且 (等于 (有标签 [1], 假), 等于 (有标签 [2], 假), 等于 (有标签 [3], 假), 等于 (有标签 [4], 假), 等于 (有标签 [5], 假), 等于 (有标签 [6], 假), 等于 (有标签 [7], 假), 等于 (有标签 [8], 假))) ' 全没有，这回是有要求，但是确实没有
    .如果真 (等于 (是否为空 (文件名), 假))
        返回 (取文件名 (文件名, #文件名_去扩展名)) ' 直接给文件名
    .如果真结束
    
.如果真结束

赋值 (返回值, 方案文本)
 ' 先替换成不容易巧合的文本段
赋值 (返回值, 子文本替换 (返回值, “(标题)”, “(%%Title%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（标题)”, “(%%Title%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “(标题）”, “(%%Title%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（标题）”, “(%%Title%%)”, , , 真))

赋值 (返回值, 子文本替换 (返回值, “(艺术家)”, “(%%Artist%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（艺术家)”, “(%%Artist%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “(艺术家）”, “(%%Artist%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（艺术家）”, “(%%Artist%%)”, , , 真))

赋值 (返回值, 子文本替换 (返回值, “(专辑)”, “(%%Album%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（专辑)”, “(%%Album%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “(专辑）”, “(%%Album%%)”, , , 真))
赋值 (返回值, 子文本替换 (返回值, “（专辑）”, “(%%Album%%)”, , , 真))

.如果真 (等于 (精简模式, 假))
    
    赋值 (返回值, 子文本替换 (返回值, “(年份)”, “(%%Year%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（年份)”, “(%%Year%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(年份）”, “(%%Year%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（年份）”, “(%%Year%%)”, , , 真))
    
    赋值 (返回值, 子文本替换 (返回值, “(流派)”, “(%%ContenttType%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（流派)”, “(%%ContenttType%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(流派）”, “(%%ContenttType%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（流派）”, “(%%ContenttType%%)”, , , 真))
    
    赋值 (返回值, 子文本替换 (返回值, “(备注)”, “(%%Comment%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（备注)”, “(%%Comment%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(备注）”, “(%%Comment%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（备注）”, “(%%Comment%%)”, , , 真))
    
    赋值 (返回值, 子文本替换 (返回值, “(编号)”, “(%%TrackNumber%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（编号)”, “(%%TrackNumber%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(编号）”, “(%%TrackNumber%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（编号）”, “(%%TrackNumber%%)”, , , 真))
    
    赋值 (返回值, 子文本替换 (返回值, “(歌词)”, “(%%Lyric%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（歌词)”, “(%%Lyric%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(歌词）”, “(%%Lyric%%)”, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “（歌词）”, “(%%Lyric%%)”, , , 真))
    
    
    
.如果真结束
赋值 (返回值, 子文本替换 (返回值, “(%%Title%%)”, Tag.Title, , , 真))
赋值 (返回值, 子文本替换 (返回值, “(%%Artist%%)”, Tag.Artist, , , 真))
赋值 (返回值, 子文本替换 (返回值, “(%%Album%%)”, Tag.Album, , , 真))
.如果真 (等于 (精简模式, 假))
    赋值 (返回值, 子文本替换 (返回值, “(%%Year%%)”, Tag.Year, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(%%ContenttType%%)”, Tag.ContenttType, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(%%Comment%%)”, Tag.Comment, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(%%TrackNumber%%)”, Tag.TrackNumber, , , 真))
    赋值 (返回值, 子文本替换 (返回值, “(%%Lyric%%)”, Tag.Lyric, , , 真))
    
.如果真结束

返回 (返回值)

.子程序 预约_添加, 空白型, , 
.参数 项号, 整数型, , 从0开始
.参数 播放提示音, 逻辑型, 可空, 默认真

.局部变量 临时_预约记录, 预约记录, , , 

.如果真 (是否为空 (播放提示音))
    赋值 (播放提示音, 真)
.如果真结束
.如果真 (播放提示音)
    播放音乐 (#添加, )
.如果真结束
赋值 (临时_预约记录.项号, 项号)
赋值 (临时_预约记录.全路径, 列表窗.取文本 (., 相加 (项号, 1), 4))
赋值 (临时_预约记录.显示的标题, 列表窗.取标题 (., 项号, 0))
赋值 (临时_预约记录.项号准确否, 真)
加入成员 (预约列表, 临时_预约记录)

列表窗.插入表项 (., , 临时_预约记录.显示的标题, , , , )
列表窗.置列宽 (., 0, 列表窗.取用户区宽度 (.)) ' 刷新显示，因为列表框的有无可能会改变

.子程序 预约_删除, 空白型, , 
.参数 预约号, 整数型, 数组, 从0开始（为了方便列表框调用）

.局部变量 已删除数量, 整数型, , , 
.局部变量 X, 整数型, , , 

.如果真 (等于 (取数组成员数 (预约号), 0))
    返回 ()
.如果真结束
.变量循环首 (1, 取数组成员数 (预约号), 1, X)
    删除成员 (预约列表, 相加 (相减 (预约号 [X], 已删除数量), 1), 1)
    列表窗.删除表项 (., 相减 (预约号 [X], 已删除数量))
    赋值 (已删除数量, 相加 (已删除数量, 1))
.变量循环尾 ()
列表窗.置列宽 (., 0, 列表窗.取用户区宽度 (.)) ' 刷新显示，因为列表框的有无可能会改变

.子程序 预约_置顶, 空白型, , 
.参数 预约号, 整数型, , 从0开始

.局部变量 临时_预约记录, 预约记录, , , 
.局部变量 临时_列表文本, 文本型, , , 

.如果真 (等于 (预约号, 0)) ' 已经在第一个
    返回 ()
.如果真结束
赋值 (临时_预约记录, 预约列表 [相加 (预约号, 1)])
删除成员 (预约列表, 相加 (预约号, 1), 1)
插入成员 (预约列表, 1, 临时_预约记录)

赋值 (临时_列表文本, 列表窗.取标题 (., 预约号, ))
列表窗.删除表项 (., 预约号)
列表窗.插入表项 (., 0, 临时_列表文本, , , , )

.子程序 取预约项号, 整数型, , 取出某个预约号的列表框项号，必要时会查找，返回的项号从0开始
.参数 预约号, 整数型, , 从0开始

.如果 (并且 (大于或等于 (预约号, 0), 小于或等于 (预约号, 相减 (取数组成员数 (预约列表), 1))))
    .如果 (预约列表 [相加 (预约号, 1)].项号准确否)
        返回 (预约列表 [相加 (预约号, 1)].项号) ' 没打乱过
    .否则
        返回 (定位项号 (预约列表 [相加 (预约号, 1)].全路径)) ' 打乱过，需要重新找
    .如果结束
    
.否则
    返回 (-1)
.如果结束


.子程序 预约_取出并播放, 整数型, , 取出的自动删除，返回项号
.参数 预约号, 整数型, , 从0开始
.参数 播放, 逻辑型, 可空, 

.局部变量 项号, 整数型, , , 
.局部变量 数组, 整数型, , "1", 用于删除命令
.局部变量 全路径, 空白型, , , 

.如果真 (是否为空 (播放))
    赋值 (播放, 假)
.如果真结束
.如果真 (并且 (大于或等于 (预约号, 0), 小于或等于 (预约号, 相减 (取数组成员数 (预约列表), 1))))
    赋值 (项号, 取预约项号 (预约号))
    .如果真 (播放)
        主控制集_打开媒体 (预约列表 [相加 (预约号, 1)].全路径, “;”, 假, 项号)
    .如果真结束
    赋值 (数组 [1], 预约号)
    预约_删除 (数组)
    返回 (项号)
.如果真结束
返回 (-1)

.子程序 取驱动器列表, 文本型, , 返回值形式为：“C;D;E”
.参数 列表数组, 文本型, 参考 可空 数组, 
.参数 驱动器类型, 整数型, , 0所有 2可移动 3固定 4网络 5光盘 6内存磁盘

.局部变量 字节集, 字节集, , , 
.局部变量 文本长度, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 临时_驱动器, 文本型, , , 
.局部变量 返回值, 文本型, , , 

.如果真 (等于 (是否为空 (列表数组), 假))
    清除数组 (列表数组)
.如果真结束
赋值 (文本长度, GetLogicalDriveStrings (0, 字节集))
.如果真 (等于 (文本长度, 0))
    返回 (“”)
.如果真结束
赋值 (字节集, 取空白字节集 (文本长度))
.如果真 (等于 (GetLogicalDriveStrings (文本长度, 字节集), 0))
    返回 (“”)
.如果真结束
.变量循环首 (1, 相减 (文本长度, 2), 4, X)
    赋值 (临时_驱动器, 到文本 (取字节集中间 (字节集, X, 3)))
    .如果真 (或者 (等于 (驱动器类型, GetDriveType (临时_驱动器)), 等于 (驱动器类型, 0)))
        .如果真 (等于 (是否为空 (列表数组), 假))
            加入成员 (列表数组, 临时_驱动器)
        .如果真结束
        赋值 (返回值, 相加 (返回值, 取文本左边 (临时_驱动器, 1), “;”))
    .如果真结束
    
.变量循环尾 ()
赋值 (返回值, 取文本左边 (返回值, 相减 (取文本长度 (返回值), 1)))
返回 (返回值)

.子程序 歌词换行处理, 文本型, , 有些不规范的歌词，以(13)或(10)换行
.参数 内容, 字节集, , 

.局部变量 内容_临时, 字节集, , , 

赋值 (内容_临时, 内容)
赋值 (内容_临时, 子字节集替换 (内容_临时, 到字节集 (#换行符), { 0, 0, 0, 1, 2, 6 }, , )) ' 先去掉所有正常的换行符
赋值 (内容_临时, 子字节集替换 (内容_临时, { 10 }, { 0, 0, 0, 1, 2, 6 }, , ))
赋值 (内容_临时, 子字节集替换 (内容_临时, { 13 }, { 0, 0, 0, 1, 2, 6 }, , ))
赋值 (内容_临时, 子字节集替换 (内容_临时, { 0, 0, 0, 1, 2, 6 }, 到字节集 (#换行符), , ))
返回 (到文本 (内容_临时))

.子程序 自动处理换行问题, 空白型, , 万恶的百度，下载的歌词很头疼
.局部变量 原文本, 文本型, , , 
.局部变量 原歌词, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 已经在空文本区, 逻辑型, , , 
.局部变量 空文本行数, 整数型, , , 
.局部变量 空歌词行, 空歌词行, , "0", 
.局部变量 临时_空歌词行, 空歌词行, , , 
.局部变量 空歌词行2, 空歌词行, , "0", 
.局部变量 此次最终行号, 整数型, , , 
.局部变量 目的文本, 文本型, , , 
.局部变量 行首标志, 文本型, , , 
.局部变量 需要修正, 逻辑型, , , 
.局部变量 空文本总行数, 整数型, , , 

赋值 (原文本, 歌词换行处理 (歌词内容))
赋值 (原歌词, 分割文本 (原文本, #换行符, ))

.变量循环首 (1, 取数组成员数 (原歌词), 1, X)
    赋值 (行首标志, 取文本左边 (原歌词 [X], 4))
    
    .如果真 (或者 (等于 (行首标志, “[ar:”), 等于 (行首标志, “[ti:”), 等于 (行首标志, “[al:”), 等于 (行首标志, “[by:”), 等于 (行首标志, “[off”))) ' 忽略信息
        到循环尾 ()
    .如果真结束
    
    .如果 (等于 (取文本右边 (原歌词 [X], 1), “]”))
        赋值 (空文本行数, 相加 (空文本行数, 1))
    .否则
        .如果真 (大于 (空文本行数, 0))
            赋值 (临时_空歌词行.行号, 相减 (X, 空文本行数))
            赋值 (临时_空歌词行.行数, 空文本行数)
            加入成员 (空歌词行, 临时_空歌词行)
            赋值 (空文本总行数, 相加 (空文本总行数, 空文本行数))
            赋值 (空文本行数, 0)
            
        .如果真结束
        
    .如果结束
    
.变量循环尾 ()
.如果真 (小于 (空文本总行数, 6)) ' 才不到6行空文本，默认为没问题
    返回 ()
.如果真结束
赋值 (需要修正, 假)
.变量循环首 (1, 相减 (取数组成员数 (空歌词行), 1), 1, X)
    .如果真 (或者 (等于 (相加 (空歌词行 [X], 行号, 2), 空歌词行 [相加 (X, 1)].行号), 等于 (相加 (空歌词行 [X], 行号, 3), 空歌词行 [相加 (X, 1)].行号), 等于 (相加 (空歌词行 [X], 行号, 4), 空歌词行 [相加 (X, 1)].行号), 等于 (相加 (空歌词行 [X], 行号, 5), 空歌词行 [相加 (X, 1)].行号), 等于 (相加 (空歌词行 [X], 行号, 6), 空歌词行 [相加 (X, 1)].行号))) ' 一般来说每行歌词顶多6个时间标签
        赋值 (需要修正, 真)
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
.如果真 (等于 (需要修正, 假))
    返回 ()
.如果真结束
.变量循环首 (1, 相减 (取数组成员数 (空歌词行), 1), 1, X)
    .如果真 (等于 (空歌词行 [X], 行数, 相乘 (2, 空歌词行 [相加 (X, 1)].行数))) ' 若这行刚刚好是下行的两倍多，则视为这行前一半是真的空文本
        
        赋值 (临时_空歌词行.行号, 空歌词行 [X], 行号)
        赋值 (临时_空歌词行.行数, 相减 (空歌词行 [X], 行数, 空歌词行 [相加 (X, 1)].行数, 1))
        
        加入成员 (空歌词行2, 临时_空歌词行)
        
        赋值 (空歌词行 [X], 行号, 相减 (相加 (空歌词行 [X], 行号, 空歌词行 [X], 行数), 空歌词行 [相加 (X, 1)].行数))
        赋值 (空歌词行 [X], 行数, 空歌词行 [相加 (X, 1)].行数)
        
        
        
    .如果真结束
    加入成员 (空歌词行2, 空歌词行 [X])
.变量循环尾 ()

.变量循环首 (1, 取数组成员数 (空歌词行2), 1, X)
    赋值 (此次最终行号, 相减 (相加 (空歌词行2 [X], 行号, 空歌词行2 [X], 行数), 1))
    .变量循环首 (空歌词行2 [X], 行号, 此次最终行号, 1, Y)
        赋值 (原歌词 [相加 (此次最终行号, 1)], 相加 (原歌词 [Y], 原歌词 [相加 (此次最终行号, 1)]))
        赋值 (原歌词 [Y], “”)
        
    .变量循环尾 ()
    
    
    
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (原歌词), 1, X)
    .如果真 (不等于 (原歌词 [X], “”))
        赋值 (目的文本, 相加 (目的文本, 原歌词 [X], #换行符))
    .如果真结束
    
.变量循环尾 ()
赋值 (目的文本, 取文本左边 (目的文本, 相减 (取文本长度 (目的文本), 2)))
赋值 (歌词内容, 到字节集 (目的文本))


.子程序 取提示状态, 逻辑型, , 取回提示状态，若这项没提示过，会自动置为已提示
.参数 序号, 整数型, , 从1开始
.参数 不赋值, 逻辑型, 可空, 仅取状态，默认假

.局部变量 X, 整数型, , , 
.局部变量 差值, 整数型, , , 
.局部变量 值, 整数型, , , 

.如果真 (是否为空 (不赋值))
    赋值 (不赋值, 假)
.如果真结束
.如果真 (大于 (取文本长度 (播放器设置.提示过), #软件提示个数))
    赋值 (播放器设置.提示过, 取文本左边 (播放器设置.提示过, #软件提示个数)) ' 超过的截断
.如果真结束
.如果真 (小于 (取文本长度 (播放器设置.提示过), #软件提示个数))
    赋值 (差值, 相减 (#软件提示个数, 取文本长度 (播放器设置.提示过)))
    .计次循环首 (差值, )
        赋值 (播放器设置.提示过, 相加 (播放器设置.提示过, “0”)) ' 不足的补0
    .计次循环尾 ()
.如果真结束
.如果真 (或者 (小于 (序号, 1), 大于 (序号, #软件提示个数)))
    返回 (假)
.如果真结束
赋值 (值, 到数值 (取文本中间 (播放器设置.提示过, 序号, 1)))
.如果 (不等于 (值, 1))
    .如果真 (等于 (不赋值, 假))
        赋值 (播放器设置.提示过, 文本替换 (播放器设置.提示过, 序号, 1, “1”))
    .如果真结束
    
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 播放暂停, 空白型, , 
.如果 (等于 (媒体_取状态 (), 1)) ' 正在播放
    媒体_暂停 ()
.否则
    媒体_播放 (假)
.如果结束
刷新按钮图片 ()


.子程序 置视觉效果类型, 空白型, , 
.参数 类型, 整数型, 可空, 空表示下一个

.如果真 (是否为空 (类型))
    赋值 (类型, 相减 (1, 播放器设置.视觉效果类型))
.如果真结束
.如果真 (等于 (类型, 播放器设置.视觉效果类型))
    返回 ()
.如果真结束
.如果真 (或者 (大于 (类型, 1), 小于 (类型, 0)))
    赋值 (类型, 0)
.如果真结束

赋值 (播放器设置.视觉效果类型, 类型)
视觉效果需要重画 ()

.子程序 桌面歌词需要刷新, 空白型, , 当更改设置时调用
赋值 (桌面歌词需要刷新, 真)

.子程序 卡拉OK模式被改变, 空白型, , 
赋值 (卡拉OK模式被改变, 真)

.子程序 复制选择的文件, 空白型, , 
.局部变量 被选择表项, 整数型, , "0", 
.局部变量 被选择文件, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 目的路径, 文本型, , , 
.局部变量 预览的标题, 文本型, , , 
.局部变量 内存文件号, 整数型, , , 

赋值 (被选择表项, 列表窗.取被选择表项 (.))
.如果真 (等于 (取数组成员数 (被选择表项), 0))
    返回 ()
.如果真结束
赋值 (预览的标题, “要复制”)
.变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
    加入成员 (被选择文件, 列表窗.取文本 (., 相加 (被选择表项 [X], 1), 4))
    .如果真 (小于或等于 (X, 6)) ' 预览前5个
        赋值 (预览的标题, 相加 (预览的标题, #左引号, 取文件名 (被选择文件 [X], #文件名_含扩展名), #右引号, “、”))
    .如果真结束
    
.变量循环尾 ()
赋值 (预览的标题, 取文本左边 (预览的标题, 相减 (取文本长度 (预览的标题), 2))) ' 去除最后一个顿号
.如果 (大于 (取数组成员数 (被选择表项), 6)) ' 文件太多，没显示完整
    赋值 (预览的标题, 相加 (预览的标题, “等”, 到文本 (取数组成员数 (被选择表项)), “个文件”))
.否则
    赋值 (预览的标题, 相加 (预览的标题, “这”, 到文本 (取数组成员数 (被选择表项)), “个文件”))
.如果结束
赋值 (预览的标题, 相加 (预览的标题, “到哪个目录？”))
赋值 (目的路径, 高级浏览文件夹 (预览的标题, “”, 假, 真, 真))
.如果真 (不等于 (目的路径, “”))
    赋值 (内存文件号, 打开内存文件 ())
    写出数据 (内存文件号, 目的路径)
    写出数据 (内存文件号, 取数组成员数 (被选择文件))
    .变量循环首 (1, 取数组成员数 (被选择文件), 1, X)
        写出数据 (内存文件号, 被选择文件 [X])
    .变量循环尾 ()
    CreateThread (0, 0, &线程_进度复制文件, 内存文件号, 0, 0)
.如果真结束


.子程序 线程_进度复制文件, 空白型, , 
.参数 内存文件号, 整数型, , 传输数据的内存文件号

.局部变量 被选择文件, 文本型, , "0", 
.局部变量 目的路径, 文本型, , , 
.局部变量 文件数, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

移到文件首 (内存文件号)
读入数据 (内存文件号, 目的路径)
读入数据 (内存文件号, 文件数)
.变量循环首 (1, 文件数, 1, X)
    读入数据 (内存文件号, 临时文本)
    加入成员 (被选择文件, 临时文本)
.变量循环尾 ()
关闭文件 (内存文件号)
未知支持库函数_4 (目的路径, 被选择文件)

.子程序 更新列表项, 空白型, , 会自动重写数据库
.参数 项目号, 整数型, 数组, 从0开始
.参数 新标题, 文本型, 可空 数组, 若为空，则自动读取，若不为空，则数组成员数必须与“项目号”相等

.局部变量 X, 整数型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 歌曲信息, 音乐文件标签, , , 

.变量循环首 (1, 取数组成员数 (项目号), 1, X)
    赋值 (文件名, 列表窗.取文本 (., 相加 (项目号 [X], 1), 4))
    .如果 (是否为空 (新标题))
        读取标签 (文件名, 歌曲信息)
        列表窗.置标题 (., 项目号 [X], 0, 生成标题 (播放器设置.标签显示方案_列表, 歌曲信息, 文件名))
    .否则
        列表窗.置标题 (., 项目号 [X], 0, 新标题 [X])
    .如果结束
    
    列表窗.置文本 (., 相加 (项目号 [X], 1), 1, 歌曲信息.Title)
    列表窗.置文本 (., 相加 (项目号 [X], 1), 2, 歌曲信息.Artist)
    列表窗.置文本 (., 相加 (项目号 [X], 1), 3, 歌曲信息.Album)
.变量循环尾 ()


.子程序 置修改标签任务, 空白型, , 
.参数 文件名, 文本型, , 
.参数 Tag, 音乐文件标签, , 
.参数 MP3写入类型, MP3写入类型, , 

.局部变量 临时_修改标签任务, 修改标签任务, , , 

赋值 (临时_修改标签任务.文件名, 文件名)
赋值 (临时_修改标签任务.Tag, Tag)
赋值 (临时_修改标签任务.MP3写入类型, MP3写入类型)
加入成员 (修改标签任务, 临时_修改标签任务)

.子程序 处理修改标签任务, 空白型, , 
.如果真 (不等于 (取数组成员数 (修改标签任务), 0))
    CreateThread (0, 0, &线程_处理修改标签任务, 0, 0, 0)
.如果真结束


.子程序 线程_处理修改标签任务, 空白型, , 
.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (修改标签任务), 1, X)
    写入标签 (修改标签任务 [X], 文件名, 修改标签任务 [X], Tag, 假, 假, 修改标签任务 [X], MP3写入类型)
.变量循环尾 ()
重定义数组 (修改标签任务, 假, 0) ' 修改完了就清除

.子程序 取正在播放项, 整数型, , 
返回 (正在播放项)

.子程序 猜测标签, 逻辑型, , 匹配返回真，不匹配返回假
.参数 文件名, 文本型, , 
.参数 猜测方案, 文本型, , 比如“(标题)-(歌手)”
.参数 标签, 音乐文件标签, 参考, 
.参数 修改标记, 逻辑型, 参考 数组, 

.局部变量 路径数组, 文本型, , "0", 
.局部变量 方案数组, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 分隔符, 文本型, 静态, "0", “筛选分割字符”返回值
.局部变量 被分割内容, 文本型, 静态, "0", 同上
.局部变量 分隔符位置, 整数型, , , 用于保存搜寻到的分隔符的位置
.局部变量 分隔符上次位置, 整数型, , , 保存上次的分隔符位置，注意有加长度
.局部变量 临时_路径, 文本型, , , 指向子方案对应的子路径

赋值 (文件名, 子文本替换 (文件名, “/”, “\”, , , 真))
赋值 (路径数组, 分割文本 (文件名, “\”, ))
赋值 (方案数组, 分割文本 (猜测方案, “\”, ))
.如果真 (小于 (取数组成员数 (路径数组), 取数组成员数 (方案数组))) ' 路径不够分
    返回 (假)
.如果真结束
.变量循环首 (取数组成员数 (方案数组), 1, -1, X)
    赋值 (临时_路径, 路径数组 [相减 (取数组成员数 (路径数组), 相减 (取数组成员数 (方案数组), X))]) ' “临时_路径”指向这个子方案对应的子路径
    .如果真 (等于 (筛选分割字符 (方案数组 [X], 分隔符, 被分割内容), 假)) ' 算出这个方案中，有几个子标签
        返回 (假) ' 方案有误，报错！
    .如果真结束
    .如果 (等于 (取数组成员数 (分隔符), 0)) ' 这段只有一个内容
        匹配单个子标签 (标签, 被分割内容 [1], 临时_路径, 修改标记)
        
    .否则
        .变量循环首 (1, 取数组成员数 (分隔符), 1, Y)
            .如果真 (等于 (Y, 1)) ' 每次都要重定义“分隔符位置”
                赋值 (分隔符位置, 0)
                赋值 (分隔符上次位置, 1)
            .如果真结束
            赋值 (分隔符位置, 寻找文本 (临时_路径, 分隔符 [Y], 相加 (分隔符位置, 1), 假))
            .如果真 (等于 (分隔符位置, -1)) ' 一旦没找到，后果很严重！！
                返回 (假) ' 声明：不匹配！
            .如果真结束
            匹配单个子标签 (标签, 被分割内容 [Y], 取文本中间 (临时_路径, 分隔符上次位置, 相减 (分隔符位置, 分隔符上次位置)), 修改标记)
            赋值 (分隔符上次位置, 相加 (分隔符位置, 取文本长度 (分隔符 [Y])))
            .如果真 (等于 (Y, 取数组成员数 (分隔符)))
                 ' 最后一个要补上，比如“(标题)-(歌手)-(专辑)”中的第二个“-”，处理时应同时加入“歌手”和“专辑”
                匹配单个子标签 (标签, 被分割内容 [相加 (Y, 1)], 取文本中间 (临时_路径, 分隔符上次位置, 相加 (相减 (取文本长度 (临时_路径), 分隔符上次位置), 1)), 修改标记)
                
            .如果真结束
            
        .变量循环尾 ()
        
    .如果结束
    
.变量循环尾 ()
返回 (真)

.子程序 筛选分割字符, 逻辑型, , 以半角括号分界，如“(标题)-(歌手)”将被分割成3块："标题" "-" "歌手"
.参数 部分方案文本, 文本型, , 
.参数 分隔符, 文本型, 参考 数组, 
.参数 被分割内容, 文本型, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 左括号位置, 整数型, , , 记录上一个左括号的位置（从1开始）
.局部变量 匿名局部变量_23622, 空白型, , , 
.局部变量 右括号位置, 整数型, , , 
.局部变量 左括号个数, 整数型, , , 
.局部变量 现在在括号内, 逻辑型, , , 

重定义数组 (分隔符, 假, 0)
重定义数组 (被分割内容, 假, 0)
.如果真 (或者 (不等于 (取文本左边 (部分方案文本, 1), “(”), 不等于 (取文本右边 (部分方案文本, 1), “)”))) ' 不符合标准
    返回 (假)
.如果真结束
.变量循环首 (1, 取文本长度 (部分方案文本), 1, X)
    .判断开始 (等于 (取文本中间 (部分方案文本, X, 1), “(”))
        赋值 (左括号个数, 相加 (左括号个数, 1))
    .判断 (等于 (取文本中间 (部分方案文本, X, 1), “)”))
        赋值 (左括号个数, 相减 (左括号个数, 1))
    .默认
        
    .判断结束
    .如果 (大于 (左括号个数, 0))
        .如果真 (等于 (现在在括号内, 假))
            赋值 (现在在括号内, 真)
            赋值 (左括号位置, X) ' 记录下每个左括号的位置
            .如果真 (不等于 (X, 1)) ' 首位置的左括号不计，如“(标题)-(歌手)”这样
                加入成员 (分隔符, 取文本中间 (部分方案文本, 相加 (右括号位置, 1), 相减 (X, 右括号位置, 1))) ' 加入上个右括号到现在的内容，作为分隔符
            .如果真结束
            
        .如果真结束
        
    .否则
        .如果真 (现在在括号内)
            赋值 (现在在括号内, 假)
            赋值 (右括号位置, X) ' 记录下每个右括号的位置
            加入成员 (被分割内容, 取文本中间 (部分方案文本, 相加 (左括号位置, 1), 相减 (X, 左括号位置, 1))) ' 加入上个右括号到现在的内容，作为分隔符
            
            
        .如果真结束
        
    .如果结束
    
.变量循环尾 ()
.如果 (不等于 (取数组成员数 (分隔符), 相减 (取数组成员数 (被分割内容), 1)))
    返回 (假) ' 格式有错，很严重，通知调用函数报错！！（只会在套用多层括号，却没有两边对齐的情况下发生，会导致数组越界）
.否则
    返回 (真)
.如果结束


.子程序 匹配单个子标签, 空白型, , 进行标签替换
.参数 标签, 音乐文件标签, 参考, 
.参数 子标签名, 文本型, , 
.参数 内容, 文本型, , 
.参数 修改标记, 逻辑型, 参考 数组, 

.判断开始 (等于 (子标签名, “标题”))
    赋值 (修改标记 [1], 真)
    赋值 (标签.Title, 内容)
.判断 (等于 (子标签名, “艺术家”))
    赋值 (修改标记 [2], 真)
    赋值 (标签.Artist, 内容)
.判断 (等于 (子标签名, “专辑”))
    赋值 (修改标记 [3], 真)
    赋值 (标签.Album, 内容)
.判断 (等于 (子标签名, “年份”))
    赋值 (修改标记 [4], 真)
    赋值 (标签.Year, 内容)
.判断 (等于 (子标签名, “流派”))
    赋值 (修改标记 [5], 真)
    赋值 (标签.ContenttType, 内容)
.判断 (等于 (子标签名, “备注”))
    赋值 (修改标记 [6], 真)
    赋值 (标签.Comment, 内容)
.判断 (等于 (子标签名, “编号”))
    赋值 (修改标记 [7], 真)
    赋值 (标签.TrackNumber, 内容)
.判断 (等于 (子标签名, “歌词”))
    赋值 (修改标记 [8], 真)
    赋值 (标签.Lyric, 内容)
.默认
    
.判断结束


.子程序 句首时间需要刷新, 空白型, , 
赋值 (句首时间需要刷新, 真)

.子程序 主窗口置顶, 空白型, , 
赋值 (主窗口., 真)
赋值 (主窗口., 假)
主窗口.调整层次 (1)
闪烁显示指定窗口_ (主窗口.取窗口句柄 (), 1)


.子程序 取用户文件夹位置, 文本型, , 
.参数 字段名, 文本型, , 

.局部变量 返回值, 文本型, , , 


赋值 (返回值, 取文本注册项 (#现行用户, 相加 (“Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\”, 字段名), ))
.如果真 (或者 (等于 (取文本右边 (返回值, 1), “\”), 等于 (取文本右边 (返回值, 1), “/”)))
    赋值 (返回值, 取文本左边 (返回值, 相减 (取文本长度 (返回值), 1)))
.如果真结束
返回 (返回值)

.窗口程序集 主窗口程序集, , , 

.程序集变量 左边_正常位置, 整数型, , , 用于记录非最小化状态的窗口位置
.程序集变量 顶边_正常位置, 整数型, , , 
.程序集变量 调整的时间, 小数型, , , 主窗口拖动调整、歌词窗拖动调整时的瞬时时间
.程序集变量 匿名程序集变量_10604, 空白型, , , 
.子程序 _主窗口_创建完毕, 空白型, , 
.局部变量 横向差, 整数型, , , 宽度-用户区宽度
.局部变量 纵向差, 整数型, , , 高度-用户区高度

赋值 (.标题, #接收标志)

赋值 (主窗口., #底色)
赋值 (主窗口., .底图) ' 若不额外定义底图，从最小化恢复时会出现瞬间黑色
赋值 (.画板背景色, #底色)
 ' 应用皮肤 (主窗口.取窗口句柄 (), 1)
 ' 横向差 ＝ 主窗口.宽度 － 主窗口.取用户区宽度 ()
 ' 纵向差 ＝ 主窗口.高度 － 主窗口.取用户区高度 ()
主窗口.移动 (#主窗口宽度, #主窗口高度)

主窗口.置外形图片 (., #品红)

连续赋值 (0, .边框, .边框, .边框, .边框) ' 去除原有边框（加边框便于设计时识别）
0.移动 (0, , )
0.移动 (145, , )
0.移动 (21, , )
250.移动 (21, , )

.未知支持库函数_24 ()

赋值 (.画板背景色, #底色)
赋值 (.底图, 未知支持库函数_31 (#Bar1, 0, #底色))
赋值 (.底图, 未知支持库函数_31 (#Bar1, 1, #底色))
赋值 (.画板背景色, #底色)
赋值 (.底图, 未知支持库函数_31 (#Bar2, 0, #底色))
赋值 (.底图, 未知支持库函数_31 (#Bar2, 1, #底色))


刷新进度条 (0, 真)
 ' 刷新音量条 (画板_音量条.宽度)

主窗口.取窗口句柄 ().未知支持库函数_0 ()

添加提示_主窗口 ()

刷新按钮图片 ()
初始化主窗口显示 ()

.如果真 (或者 (不等于 (播放器设置.引擎号, 0), 等于 (播放器设置.使用BASS播放MID, 假)))
    赋值 (.时钟周期, 120) ' 只要有可能用到MCI，都要设时钟
.如果真结束


.子程序 添加提示_主窗口, 空白型, , 
 ' 添加提示 (图形按钮_主菜单.取窗口句柄 (), “主菜单”, 假, 假)
 ' 添加提示 (图形按钮_歌词窗.取窗口句柄 (), “歌词”, 假, 假)
 ' 添加提示 (图形按钮_列表窗.取窗口句柄 (), “列表”, 真, 假)
 ' 添加提示 (图形按钮_均衡器窗.取窗口句柄 (), “均衡器”, 真, 假)
 ' 添加提示 (图形按钮_桌面歌词.取窗口句柄 (), “桌面歌词”, 真, 假)
 ' 添加提示 (按钮_最小化.取窗口句柄 (), “最小化”, 假, 假)
 ' 添加提示 (按钮_关闭.取窗口句柄 (), “关闭”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “音量”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “音量”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “进度条”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “进度条”, 假, 假)

未知支持库函数_0 (取窗口句柄 (), “上一首”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “下一首（切歌）”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “打开”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “关闭”, 假, 假)




.子程序 _主窗口_被显示, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (1, 真)
.如果真结束
.如果真 (是否已创建 (设置窗口))
    赋值 (设置窗口., 真)
.如果真结束


.子程序 _主窗口_被隐藏, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (1, 假)
.如果真结束
.如果真 (是否已创建 (设置窗口))
    赋值 (设置窗口., 假)
.如果真结束


.子程序 _主窗口_获得焦点, 空白型, , 
依次显示窗口 (1)

.子程序 _按钮_打开_被单击, 空白型, , 
.如果真 (打开对话框选择文件 ())
    .如果真 (等于 (取提示状态 (9), 假))
        主窗口.未知支持库函数_26 (., 相加 (主窗口., 主窗口..左边, 相除 (主窗口..宽度, 2)), 相加 (主窗口., 主窗口..顶边, 相除 (主窗口..高度, 2)), #Tip9, -1, 真)
    .如果真结束
    
.如果真结束


.子程序 刷新按钮图片, 空白型, , 确定是暂停还是播放
.局部变量 状态, 整数型, , , 

赋值 (状态, 媒体_取状态 ())
.判断开始 (或者 (等于 (状态, 3), 等于 (状态, 0)))
    赋值 (.正常图片, 未知支持库函数_31 (#Play, 0, #品红))
    赋值 (.点燃图片, 未知支持库函数_31 (#Play, 1, #品红))
    赋值 (.按下图片, 未知支持库函数_31 (#Play, 2, #品红))
    赋值 (.禁止图片, 未知支持库函数_31 (#Play, 3, #品红))
    
    未知支持库函数_0 (取窗口句柄 (), “播放”, 假, 假)
    .如果 (等于 (状态, 0)) ' 未打开
        赋值 (.禁止, 真)
    .否则
        赋值 (.禁止, 假)
    .如果结束
    
.默认
    赋值 (.正常图片, 未知支持库函数_31 (#Pause, 0, #品红))
    赋值 (.点燃图片, 未知支持库函数_31 (#Pause, 1, #品红))
    赋值 (.按下图片, 未知支持库函数_31 (#Pause, 2, #品红))
    赋值 (.禁止图片, 未知支持库函数_31 (#Pause, 3, #品红))
    未知支持库函数_0 (取窗口句柄 (), “暂停”, 假, 假)
    赋值 (.禁止, 假)
.判断结束
刷新菜单按钮 ()

.子程序 _按钮_播放暂停_被单击, 空白型, , 
播放暂停 ()
.如果真 (等于 (取提示状态 (2), 假))
    相加 (主窗口., .左边, 相除 (.宽度, 2)).未知支持库函数_26 (相加 (主窗口., .顶边, 相除 (.高度, 2)), #Tip2, -1, 真)
.如果真结束


.子程序 _时钟_刷新_周期事件, 空白型, , 

.如果真 (等于 (是否已创建 (歌词窗), 假)) ' 一方面防止下面代码出错，另一方面等待全部加载完毕后再刷新
    返回 ()
.如果真结束
.如果真 (等于 (主窗口., 假))
    返回 ()
.如果真结束
清空时间区 (并且 (等于 (播放器设置.视觉效果类型, 1), 播放器设置.波形_是否淡出, 正在使用BASS引擎)) ' 必须是波形，而且还要开启淡出效果，才能淡出
.如果 (正在使用BASS引擎) ' MCI没有频谱
    .如果 (等于 (播放器设置.视觉效果类型, 0))
        刷新频谱 ()
    .否则
        刷新波形 ()
    .如果结束
    
.否则
    清空视觉效果 ()
.如果结束
.如果 (或者 (不等于 (.时钟周期, 0), 并且 (不等于 (歌词窗..时钟周期, 0), 等于 (取Ctrl键状态 (), 假)))) ' 其他两个在调整
    刷新时间 (格式化时间 (调整的时间))
.否则
    刷新时间 (格式化时间 (媒体_取位置 ()))
.如果结束

滚动显示歌曲信息 ()

刷新显示_主窗口 ()

.子程序 置_调整的时间, 空白型, , 
.参数 时间值, 小数型, , 

赋值 (调整的时间, 时间值)

.子程序 _主窗口_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #Esc键)) ' Esc键取消调整
    .如果真 (不等于 (.时钟周期, 0))
        赋值 (.时钟周期, 0)
    .如果真结束
    .如果真 (不等于 (.时钟周期, 0))
        赋值 (.时钟周期, 0)
    .如果真结束
    
.判断 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _时钟_进度条显示_周期事件, 空白型, , 刷新进度条（以下子程序皆为进度条控制）
.如果真 (不等于 (.时钟周期, 0)) ' 正在调整进度时不刷新
    返回 ()
.如果真结束
.如果 (等于 (媒体_取状态 (), 0)) ' 未打开文件
    赋值 (.可视, 假) ' 不显示滑块
    刷新进度条 (0) ' 进度条位置归零
    返回 ()
.否则
    赋值 (.可视, 真)
    .如果 (正在使用BASS引擎)
        刷新进度条 (相除 (相乘 (.宽度, 播放控制2.取媒体位置 ()), 主控制集_取媒体长度 ()))
    .否则
        刷新进度条 (相除 (相乘 (.宽度, 相除 (播放控制1.取当前播放位置 (), 1000)), 主控制集_取媒体长度 ()))
    .如果结束
    
.如果结束




.子程序 刷新进度条, 空白型, , 刷新进度条中的蓝色区域
.参数 相对位置, 整数型, , 
.参数 强制刷新, 逻辑型, 可空, 即时与上次位置一样也刷新

.局部变量 上次位置, 整数型, 静态, , 防止重复刷新

.如果真 (是否为空 (强制刷新))
    赋值 (强制刷新, 假)
.如果真结束
.如果真 (并且 (等于 (上次位置, 相对位置), 取反 (强制刷新)))
    返回 ()
.如果真结束
赋值 (.左边, 相减 (相加 (.左边, 相对位置), 相除 (.宽度, 2))) ' 移动滑块
0.复制 (0, 相对位置, .高度, , 0, 相除 (相减 (.高度, .高度), 2), ) ' 给“已播放”区域染色
相对位置.复制 (0, 相减 (.宽度, 相对位置), .高度, , 相对位置, 相除 (相减 (.高度, .高度), 2), ) ' 给“未播放”区域染色
置_调整的时间 (相乘 (相除 (相对位置, .宽度), 主控制集_取媒体长度 ()))

赋值 (上次位置, 相对位置)

.子程序 _图形按钮_进度滑块_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (媒体_取状态 (), 0)) ' 未打开
    返回 ()
.如果真结束
进入进度调节状态 ()

.子程序 _画板_进度条_鼠标左键被按下, 逻辑型, , 在进度条空白处处按下也可以调节
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (媒体_取状态 (), 0)) ' 未打开
    返回 ()
.如果真结束
刷新进度条 (横向位置)
进入进度调节状态 ()
返回 (假)

.子程序 _图形按钮_进度滑块_鼠标左键被放开, 逻辑型, , 用户放开滑块，调节播放进度
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 之前的进度, 小数型, , , 
.局部变量 跳转后进度, 小数型, , , 

.如果真 (等于 (.时钟周期, 0)) ' 已经按Esc取消了 或本来就没有调整
    返回 ()
.如果真结束
赋值 (.时钟周期, 0) ' 松开左键即停止调整
赋值 (之前的进度, 媒体_取位置 ())
赋值 (跳转后进度, 相除 (相乘 (主控制集_取媒体长度 (), 算出横向位置_进度调整 ()), .宽度))
媒体_置位置 (跳转后进度) ' 跳转
.如果 (小于 (跳转后进度, 之前的进度)) ' 调到前面了
    歌词实时显示 (真, 真)
.否则
    歌词实时显示 (真, 假)
.如果结束
刷新桌面歌词 (真)

.子程序 进入进度调节状态, 空白型, , 
.如果真 (不等于 (.时钟周期, 0))
    赋值 (.时钟周期, 0)
.如果真结束
赋值 (.标记, 到文本 (相加 (主窗口., 相除 (相减 (主窗口., 主窗口.取用户区宽度 ()), 2), .左边))) ' 重新算出横坐标差
赋值 (.时钟周期, 10)

.子程序 _时钟_进度调整_周期事件, 空白型, , 
刷新进度条 (算出横向位置_进度调整 ()) ' 实时移动滑块

.子程序 算出横向位置_进度调整, 整数型, , 到此（进度条控制）
.局部变量 相对位置, 整数型, , , 

赋值 (相对位置, 相减 (取鼠标水平位置 (), 到数值 (.标记))) ' 需要读出横坐标差
.如果真 (小于 (相对位置, 0))
    赋值 (相对位置, 0)
.如果真结束
.如果真 (大于 (相对位置, .宽度))
    赋值 (相对位置, .宽度)
.如果真结束
返回 (相对位置)

.子程序 _画板_音量条_鼠标左键被按下, 逻辑型, , （以下子程序皆为音量控制）
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

刷新音量条 (横向位置)
进入音量调节状态 ()
返回 (假)

.子程序 _图形按钮_音量滑块_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

进入音量调节状态 ()

.子程序 进入音量调节状态, 空白型, , 
.如果真 (不等于 (.时钟周期, 0))
    赋值 (.时钟周期, 0)
.如果真结束
赋值 (.标记, 到文本 (相加 (主窗口., 相除 (相减 (主窗口., 主窗口.取用户区宽度 ()), 2), .左边))) ' 重新算出横坐标差
赋值 (.时钟周期, 10)

.子程序 刷新音量条, 空白型, , 
.参数 相对位置, 整数型, , 

赋值 (.左边, 相减 (相加 (.左边, 相对位置), 相除 (.宽度, 2)))
0.复制 (0, 相对位置, .高度, , 0, 相除 (相减 (.高度, .高度), 2), )
相对位置.复制 (0, 相减 (.宽度, 相对位置), .高度, , 相对位置, 相除 (相减 (.高度, .高度), 2), )
未知支持库函数_0 (取窗口句柄 (), 相加 (“音量：”, 到文本 (相对位置), “/”, 到文本 (.宽度)), 假, 假)
未知支持库函数_0 (取窗口句柄 (), 相加 (“音量：”, 到文本 (相对位置), “/”, 到文本 (.宽度)), 假, 假)


.子程序 _时钟_音量调整_周期事件, 空白型, , 
.局部变量 相对位置, 整数型, 静态, , 

赋值 (相对位置, 算出横向位置_音量调整 ()) ' 实时移动滑块
刷新音量条 (相对位置)
赋值 (播放器设置.音量, 相对位置)
应用音量 ()

.子程序 算出横向位置_音量调整, 整数型, , 
.局部变量 相对位置, 整数型, , , 

赋值 (相对位置, 相减 (取鼠标水平位置 (), 到数值 (.标记))) ' 需要读出横坐标差
.如果真 (小于 (相对位置, 0))
    赋值 (相对位置, 0)
.如果真结束
.如果真 (大于 (相对位置, .宽度))
    赋值 (相对位置, .宽度)
.如果真结束
返回 (相对位置)

.子程序 _图形按钮_音量滑块_鼠标左键被放开, 逻辑型, , 到此（音量控制）
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (.时钟周期, 0)) ' 已经按Esc取消了
    返回 ()
.如果真结束
_时钟_音量调整_周期事件 () ' 放开时再算一次
赋值 (.时钟周期, 0)

.子程序 _按钮_停止_被单击, 空白型, , 
.如果真 (不等于 (媒体_取状态 (), 0))
    媒体_关闭 ()
    刷新按钮图片 ()
.如果真结束


.子程序 _主窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (小于或等于 (纵向位置, 20)) ' 在标题栏上
    主窗口左键按下事件_ ()
    发送信息 (161, 2, 0)
    主窗口左键放开事件_ ()
.如果真结束


.子程序 _主窗口_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口左键放开事件_ ()

.子程序 _主窗口_位置被改变, 空白型, , 
.局部变量 有最小化, 逻辑型, 静态, , 

.如果 (有最小化) ' 仅检测到状态改变才触发事件
    .如果真 (等于 (主窗口., 0))
        主窗口.移动 (左边_正常位置, 顶边_正常位置, , ) ' 防止最小化时调整分辨率后窗口分离
        赋值 (有最小化, 假)
        应用配置_托盘图标 () ' 刷新托盘图标
        .如果真 (列表窗.)
            赋值 (列表窗., 真)
        .如果真结束
        .如果真 (歌词窗.)
            赋值 (歌词窗., 真)
            消息_歌词窗尺寸改变 () ' 强制刷新
        .如果真结束
        .如果真 (均衡器窗.)
            赋值 (均衡器窗., 真)
        .如果真结束
        列表窗_恢复属性 () ' 在后台查找时调出主窗口，需要恢复其属性
        
        
        .如果真 (等于 (取提示状态 (4), 假))
            相加 (主窗口., 17).未知支持库函数_26 (相加 (主窗口., 9), #Tip4, -1, 真)
        .如果真结束
        
        
        
    .如果真结束
    
.否则
    .如果真 (等于 (主窗口., 2))
        赋值 (有最小化, 真)
        赋值 (列表窗., 假)
        赋值 (歌词窗., 假)
        赋值 (均衡器窗., 假)
        .如果真 (播放器设置.最小化时隐藏)
            赋值 (主窗口., 假)
        .如果真结束
        应用配置_托盘图标 () ' 刷新托盘图标
        释放物理内存 ()
        .如果 (等于 (取提示状态 (3), 假))
            #Tip3_1.未知支持库函数_20 (#Tip3_2, 1, 20000)
             ' 气球提示框1.弹出提示框 (主窗口.左边 ＋ 按钮_播放暂停.左边 ＋ 按钮_播放暂停.宽度 ÷ 2, 主窗口.顶边 ＋ 按钮_播放暂停.顶边 ＋ 按钮_播放暂停.高度 ÷ 2, #Tip2, -1, 真)
        .否则
            .如果真 (取提示状态 (12, 真)) ' 已经提示过“Ctrl+F”
                .如果真 (等于 (取提示状态 (16), 假))
                    “提示”.未知支持库函数_20 (#Tip16, 1, 20000)
                .如果真结束
                
                
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.如果结束
.如果真 (不等于 (主窗口., 2)) ' 不是最小化状态，记录下位置
    赋值 (左边_正常位置, .)
    赋值 (顶边_正常位置, .)
.如果真结束


.子程序 _托盘图标1_托盘图标被单击, 空白型, , 
.如果 (等于 (主窗口., 2))
    显示主窗口 ()
.否则
    主窗口置顶 ()
.如果结束


.子程序 显示主窗口, 空白型, , 
.如果真 (菜单窗口.)
    菜单窗口_直接隐藏 ()
    赋值 (菜单窗口., 假)
.如果真结束

赋值 (主窗口., 真)
赋值 (主窗口., 0)
.如果真 (是否已创建 (歌词搜索窗口))
    赋值 (歌词搜索窗口., 假)
.如果真结束
.如果真 (是否已创建 (精确查找窗口))
    赋值 (精确查找窗口., 假)
.如果真结束


.子程序 _拖放对象1_得到文件, 空白型, , 
.参数 接收到的文件路径, 文本型, , 

主控制集_打开媒体 (接收到的文件路径, #换行符)

.子程序 _标签1_反馈事件, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.判断开始 (等于 (参数一, -1)) ' 原来调试时-1是打开文件的信号
    主控制集_打开媒体 (取窗口标题 (取窗口句柄 ()), “;”, 假, 参数二)
.判断 (等于 (参数一, 4)) ' 网络歌词成功返回
    网络歌词返回 ()
    网络歌词状态刷新 (参数一, 参数二)
.判断 (等于 (参数一, 0))
    收到消息 (取控件标题 (取窗口句柄 ())) ' 来自桌面歌词的消息
.默认
    网络歌词状态刷新 (参数一, 参数二) ' 其他值都被视为网络歌词的消息
.判断结束


.子程序 刷新按钮_列表窗, 空白型, , 
.参数 按下, 逻辑型, , 

.如果 (按下)
    赋值 (.标记, 文本替换 (.标记, 1, 1, “2”))
.否则
    赋值 (.标记, 文本替换 (.标记, 1, 1, “0”))
.如果结束
主窗口_刷新框架 ()

.子程序 刷新按钮_歌词窗, 空白型, , 
.参数 按下, 逻辑型, , 

.如果 (按下)
    赋值 (.标记, 文本替换 (.标记, 2, 1, “2”))
.否则
    赋值 (.标记, 文本替换 (.标记, 2, 1, “0”))
.如果结束
主窗口_刷新框架 ()

.子程序 刷新按钮_均衡器窗, 空白型, , 
.参数 按下, 逻辑型, , 

.如果 (按下)
    赋值 (.标记, 文本替换 (.标记, 3, 1, “2”))
.否则
    赋值 (.标记, 文本替换 (.标记, 3, 1, “0”))
.如果结束
主窗口_刷新框架 ()

.子程序 刷新按钮_桌面歌词, 空白型, , 
.参数 按下, 逻辑型, , 

.如果 (按下)
    赋值 (.标记, 文本替换 (.标记, 4, 1, “2”))
.否则
    赋值 (.标记, 文本替换 (.标记, 4, 1, “0”))
.如果结束
主窗口_刷新框架 ()

.子程序 _画板_信息_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果 (小于或等于 (纵向位置, 12))
    滚动显示歌曲信息 (真)
.否则
    置视觉效果类型 ()
    .如果真 (是否已创建 (设置窗口))
        设置窗口.置状态图片 (., 0, 选择 (等于 (播放器设置.视觉效果类型, 0), 1, 0))
        设置窗口.置状态图片 (., 1, 选择 (等于 (播放器设置.视觉效果类型, 1), 1, 0))
        
    .如果真结束
    
.如果结束


.子程序 _画板_信息_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (大于 (纵向位置, 12))
     ' 切换视觉效果详细参数
    .如果 (等于 (播放器设置.视觉效果类型, 0)) ' 频谱柱
        赋值 (播放器设置.频谱_显示粗状, 取反 (播放器设置.频谱_显示粗状))
    .否则
        赋值 (播放器设置.波形_是否淡出, 取反 (播放器设置.波形_是否淡出))
    .如果结束
    .如果真 (是否已创建 (设置窗口))
        设置窗口.置状态图片 (., 0, 选择 (播放器设置.频谱_显示粗状, 1, 0))
        设置窗口.置状态图片 (., 1, 选择 (播放器设置.波形_是否淡出, 1, 0))
        
    .如果真结束
    视觉效果需要重画 ()
.如果真结束


.子程序 _时钟_判断结束_周期事件, 空白型, , MCI没有回调事件，所以要用时钟
.如果真 (等于 (媒体_取状态 (), 0)) ' 没打开
    返回 ()
.如果真结束
.如果真 (等于 (正在使用BASS引擎, 假))
    .如果真 (或者 (等于 (媒体_取状态 (), 3), 等于 (媒体_取状态 (), 4))) ' 停了
        .如果真 (等于 (播放控制1.取手动暂停状态 (), 假)) ' 且不是手动
            回调函数_播放完毕 (0, 0, 0, 0)
        .如果真结束
        
    .如果真结束
    
.如果真结束


.子程序 _按钮_前_被单击, 空白型, , 
上一首 ()
.如果真 (等于 (取提示状态 (11), 假))
    主窗口.未知支持库函数_26 (., 相加 (主窗口., 主窗口..左边, 相除 (主窗口..宽度, 2)), 相加 (主窗口., 主窗口..顶边, 相除 (主窗口..高度, 2)), #Tip11, -1, 真)
.如果真结束


.子程序 _按钮_后_被单击, 空白型, , 
下一首 ()
.如果真 (等于 (取提示状态 (11), 假))
    主窗口.未知支持库函数_26 (., 相加 (主窗口., 主窗口..左边, 相除 (主窗口..宽度, 2)), 相加 (主窗口., 主窗口..顶边, 相除 (主窗口..高度, 2)), #Tip11, -1, 真)
.如果真结束


.子程序 _标签_热键_反馈事件, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 

.局部变量 命令行, 文本型, , , 

.判断开始 (等于 (参数一, -1)) ' 多次运行的进程发送来的消息
    赋值 (命令行, 取窗口标题 (取窗口句柄 ()))
    赋值 (.标题, #接收标志) ' 重新置回
    .如果 (不等于 (命令行, “”)) ' 带命令行，不显示窗口
        主控制集_打开媒体 (命令行, #换行符, 真, , 真, 真) ' 执行打开命令
        
    .否则
        .如果 (等于 (主窗口., 2))
            显示主窗口 () ' 最小化状态，则显示
        .否则
            主窗口置顶 () ' 正常状态，置顶
        .如果结束
        
    .如果结束
    
    
    
    
.默认
    回调函数_热键事件 (参数一)
    
.判断结束


.子程序 _菜单_选项_被选择, 空白型, , 
载入 (设置窗口, 主窗口, 假)

.子程序 _托盘图标1_托盘图标被右击, 空白型, , 
显示主菜单 (真)

.子程序 _时钟_任务栏信息_周期事件, 空白型, , 
滚动显示任务栏文本 ()

.子程序 _时钟_启动提示_周期事件, 空白型, , 
赋值 (.时钟周期, 0)
.如果真 (等于 (取提示状态 (1), 假))
    主窗口.未知支持库函数_26 (., 相加 (主窗口., 主窗口..左边, 相除 (主窗口..宽度, 2)), 相加 (主窗口., 主窗口..顶边, 相除 (主窗口..高度, 2)), #Tip1, -1, 真)
.如果真结束


.子程序 主窗口_刷新框架, 空白型, , 
.局部变量 上次是否激活, 逻辑型, 静态, , 
.局部变量 是否激活, 逻辑型, , , 
.局部变量 图片纵向坐标2, 整数型, , , 若激活，则为0（上面图片），不激活，为14（下面图片）
.局部变量 图片横向坐标, 整数型, , , 指画到“框架顶部”画板时，目标画板的位置
.局部变量 七个按钮状态, 文本型, 静态, , 
.局部变量 按钮强制刷新, 逻辑型, , , 因为刷新了框架本身
.局部变量 临时_状态, 整数型, , , 
.局部变量 X, 整数型, , , 

赋值 (是否激活, 等于 (主窗口., “A”))
.如果真 (不等于 (是否激活, 上次是否激活))
    赋值 (上次是否激活, 是否激活)
    .如果 (是否激活)
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        
    .否则
        
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        .复制 (.左边, .顶边, .宽度, .高度, , 0, 0, )
        
    .如果结束
    赋值 (按钮强制刷新, 真)
.如果真结束
.如果真 (或者 (不等于 (七个按钮状态, .标记), 按钮强制刷新))
    赋值 (七个按钮状态, .标记)
    赋值 (图片纵向坐标2, 选择 (是否激活, 0, 14))
    .变量循环首 (0, 4, 1, X)
        赋值 (临时_状态, 到数值 (取文本中间 (七个按钮状态, 相加 (X, 1), 1)))
        赋值 (图片横向坐标, 多项选择 (相加 (X, 1), 147, 128, 109, 90, 8))
        .判断开始 (等于 (临时_状态, 0))
            相乘 (18, 相加 (相乘 (X, 3), 0)).复制 (图片纵向坐标2, 18, 14, , 图片横向坐标, 2, )
        .判断 (等于 (临时_状态, 1))
            相乘 (18, 相加 (相乘 (X, 3), 1)).复制 (图片纵向坐标2, 18, 14, , 图片横向坐标, 2, )
        .判断 (等于 (临时_状态, 2))
            相乘 (18, 相加 (相乘 (X, 3), 2)).复制 (图片纵向坐标2, 18, 14, , 图片横向坐标, 2, )
        .默认
            
        .判断结束
        
        
    .变量循环尾 ()
    
    
    赋值 (临时_状态, 到数值 (取文本中间 (七个按钮状态, 6, 1)))
    
    相加 (相乘 (42, 4), 相乘 (27, 选择 (是否激活, 临时_状态, 3))).复制 (0, 27, 14, , 167, 1, )
    
    
    赋值 (临时_状态, 到数值 (取文本中间 (七个按钮状态, 7, 1)))
    
    相乘 (42, 选择 (是否激活, 临时_状态, 3)).复制 (0, 42, 14, , 196, 1, )
    
.如果真结束


.子程序 _主窗口_被激活, 空白型, , 
赋值 (主窗口., “A”) ' 做标记，在刷新框架时用
主窗口_刷新框架 ()

.子程序 _主窗口_被取消激活, 空白型, , 
.如果真 (等于 (.标记, “I”)) ' 点击按钮显示子窗口的过程中，不刷新
    返回 ()
.如果真结束
赋值 (主窗口., “”)
主窗口_刷新框架 ()

.子程序 _画板_框架_顶部_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 X, 整数型, , , 
.局部变量 Y, 整数型, , , 

.变量循环首 (1, 7, 1, X)
    .如果真 (鼠标是否在按钮上 (X, 横向位置, 纵向位置))
        .如果真 (等于 (取文本中间 (.标记, X, 1), “0”))
            赋值 (.标记, 文本替换 (.标记, X, 1, “1”)) ' 高亮显示
        .如果真结束
        .变量循环首 (1, 7, 1, Y)
            .如果真 (等于 (X, Y))
                到循环尾 ()
            .如果真结束
            .如果真 (等于 (取文本中间 (.标记, Y, 1), “1”))
                赋值 (.标记, 文本替换 (.标记, Y, 1, “0”)) ' 去除其他按钮的高亮
                
            .如果真结束
            
        .变量循环尾 ()
        主窗口_刷新框架 ()
        赋值 (.时钟周期, 30) ' 当鼠标直接移出去时，需要去除高亮
        返回 ()
    .如果真结束
    
    
.变量循环尾 ()
.变量循环首 (1, 7, 1, Y) ' 没有任何一个按钮高亮
    .如果真 (等于 (取文本中间 (.标记, Y, 1), “1”))
        赋值 (.标记, 文本替换 (.标记, Y, 1, “0”)) ' 去除所有按钮的高亮
        主窗口_刷新框架 ()
    .如果真结束
    
.变量循环尾 ()


.子程序 _画板_框架_顶部_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 X, 整数型, , , 
.局部变量 鼠标在按钮上, 逻辑型, , , 

.变量循环首 (1, 7, 1, X)
    .如果真 (鼠标是否在按钮上 (X, 横向位置, 纵向位置))
        .如果 (不等于 (取文本中间 (.标记, X, 1), “2”))
            .判断开始 (并且 (大于或等于 (X, 1), 小于或等于 (X, 3)))
                赋值 (.标记, “I”)
                显示隐藏指定窗口 (相加 (X, 1), 真)
                主窗口.获取焦点 ()
                赋值 (.标记, “”)
            .判断 (等于 (X, 4))
                赋值 (.标记, “I”)
                .如果真 (等于 (显示隐藏桌面歌词 (), 假)) ' 还在等待桌面歌词返回
                    赋值 (.标记, “”)
                    返回 ()
                .如果真结束
                主窗口.获取焦点 ()
                赋值 (.标记, “”)
                
            .判断 (大于或等于 (X, 5)) ' 控制按钮需要松开
                俘获鼠标 (取窗口句柄 ())
            .默认
                
            .判断结束
            赋值 (.标记, 文本替换 (.标记, X, 1, “2”)) ' 标记为按下
            主窗口_刷新框架 ()
            
        .否则
            .判断开始 (并且 (大于或等于 (X, 1), 小于或等于 (X, 3)))
                显示隐藏指定窗口 (相加 (X, 1), 假)
            .判断 (等于 (X, 4))
                .如果真 (等于 (显示隐藏桌面歌词 (), 假)) ' 还在等待桌面歌词返回
                    返回 ()
                .如果真结束
                
            .默认
                
            .判断结束
            
            赋值 (.标记, 文本替换 (.标记, X, 1, “1”)) ' 标记为松开
            主窗口_刷新框架 ()
            
        .如果结束
        
        返回 ()
    .如果真结束
    
    
.变量循环尾 ()
主窗口.发送信息 (161, 2, 0)
主窗口左键放开事件_ ()

.子程序 鼠标是否在按钮上, 逻辑型, , 
.参数 按钮号, 整数型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 匿名参数_24947, 空白型, , 

.局部变量 鼠标在按钮上, 逻辑型, , , 
.局部变量 横向坐标数组, 整数型, 静态, "0", 

.如果真 (等于 (取数组成员数 (横向坐标数组), 0))
    赋值 (横向坐标数组, { 147, 128, 109, 90, 8 })
.如果真结束

.判断开始 (小于或等于 (按钮号, 5))
    赋值 (鼠标在按钮上, 并且 (大于或等于 (横向位置, 横向坐标数组 [按钮号]), 小于或等于 (横向位置, 相加 (横向坐标数组 [按钮号], 18)), 大于或等于 (纵向位置, 2), 小于或等于 (纵向位置, 16)))
.判断 (等于 (按钮号, 6))
    赋值 (鼠标在按钮上, 并且 (大于或等于 (横向位置, 167), 小于或等于 (横向位置, 相加 (167, 27)), 大于或等于 (纵向位置, 1), 小于或等于 (纵向位置, 15))) ' 最小化按钮
.判断 (等于 (按钮号, 7))
    赋值 (鼠标在按钮上, 并且 (大于或等于 (横向位置, 196), 小于或等于 (横向位置, 相加 (196, 42)), 大于或等于 (纵向位置, 1), 小于或等于 (纵向位置, 15))) ' 关闭按钮
.默认
    返回 (假)
.判断结束
返回 (鼠标在按钮上)

.子程序 _时钟_去除高亮_周期事件, 空白型, , 当鼠标移到标题栏外时需要取消按钮的高亮
.局部变量 X, 整数型, , , 

.如果真 (或者 (小于 (取鼠标水平位置 (), 相加 (主窗口., .左边)), 大于 (取鼠标水平位置 (), 相加 (主窗口., .左边, .宽度)), 小于 (取鼠标垂直位置 (), 相加 (主窗口., .顶边)), 大于 (取鼠标垂直位置 (), 相加 (主窗口., .顶边, .高度))))
     ' 移出去了
    赋值 (.时钟周期, 0)
    .变量循环首 (1, 7, 1, X)
        .如果真 (等于 (取文本中间 (.标记, X, 1), “1”)) ' 还是高亮
            赋值 (.标记, 文本替换 (.标记, X, 1, “0”)) ' 去除标记
        .如果真结束
        
    .变量循环尾 ()
    主窗口_刷新框架 ()
.如果真结束


.子程序 _画板_框架_顶部_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (并且 (大于或等于 (横向位置, 8), 小于或等于 (横向位置, 相加 (8, 27)), 大于或等于 (纵向位置, 2), 小于或等于 (纵向位置, 16))) ' 主菜单按钮
    显示主菜单 (假)
    
    赋值 (.标记, 文本替换 (.标记, 5, 1, “1”)) ' 去除标记
    主窗口_刷新框架 ()
    
.判断 (并且 (大于或等于 (横向位置, 167), 小于或等于 (横向位置, 相加 (167, 27)), 大于或等于 (纵向位置, 1), 小于或等于 (纵向位置, 15))) ' 最小化按钮
     ' 执行命令
    赋值 (主窗口., 2)
    
    赋值 (.标记, 文本替换 (.标记, 6, 1, “1”)) ' 去除标记
    主窗口_刷新框架 ()
.判断 (并且 (大于或等于 (横向位置, 196), 小于或等于 (横向位置, 相加 (196, 42)), 大于或等于 (纵向位置, 1), 小于或等于 (纵向位置, 15))) ' 关闭按钮
     ' 执行命令
    .如果 (播放器设置.关闭按钮退出)
        退出程序 ()
    .否则
        赋值 (主窗口., 2)
        赋值 (主窗口., 假) ' 必须手动隐藏
        应用配置_托盘图标 ()
    .如果结束
    
    
    
    赋值 (.标记, 文本替换 (.标记, 7, 1, “1”)) ' 去除标记
    主窗口_刷新框架 ()
.默认
    
    
    
    赋值 (.标记, 文本替换 (.标记, 5, 3, “000”)) ' 去除标记
    
    主窗口_刷新框架 ()
.判断结束
释放鼠标 ()


.子程序 _气球提示框1_提示框即将弹出, 逻辑型, , 
.参数 窗口组件句柄, 整数型, , 
.参数 手柄横向坐标, 整数型, 参考, 
.参数 手柄纵向坐标, 整数型, 参考, 
.参数 提示文本, 文本型, 参考, 

.局部变量 X, 整数型, , , 

.判断开始 (等于 (窗口组件句柄, 取窗口句柄 ()))
    .变量循环首 (1, 7, 1, X)
        .如果真 (鼠标是否在按钮上 (X, 手柄横向坐标, 手柄纵向坐标))
            赋值 (提示文本, 多项选择 (X, “列表”, “歌词”, “均衡器”, “桌面歌词”, “主菜单”, “最小化”, “关闭”))
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    
.默认
    
.判断结束


.子程序 _主窗口_可否被关闭, 逻辑型, , 
退出程序 ()


.子程序 _主窗口_尺寸被改变, 空白型, , 
 ' 主窗口圆角化 ()

.子程序 主窗口圆角化, 空白型, , 
.局部变量 hRgn, 整数型, , , 

赋值 (hRgn, CreateRoundRectRgn (0, 0, 相加 (主窗口., 1), 相加 (主窗口., 1), 8, 9))
SetWindowRgn (主窗口.取窗口句柄 (), hRgn, 真)
DeleteObject (hRgn)


.程序集 应用配置程序集, , , 

.子程序 应用配置_过滤器, 空白型, , 


.子程序 应用配置_主窗口位置, 空白型, , 
.如果 (或者 (等于 (播放器设置.主窗口_左边, -32000), 等于 (播放器设置.主窗口_顶边, -32000))) ' 因最小化出错，或初始值
    主窗口.移动 (相除 (相减 (取屏幕宽度 (), 相乘 (主窗口., 2)), 2), 相除 (相减 (取屏幕高度 (), 主窗口., 列表窗.), 2), , ) ' 重新居中
.否则
    主窗口.移动 (播放器设置.主窗口_左边, 播放器设置.主窗口_顶边, , )
.如果结束


.子程序 应用配置_列表窗位置, 空白型, , 
.如果 (或者 (等于 (播放器设置.列表窗_左边, -32000), 等于 (播放器设置.列表窗_顶边, -32000))) ' 因最小化出错，或初始值
    列表窗.移动 (主窗口., 相加 (主窗口., 主窗口.), #主窗口宽度, #主窗口高度)
.否则
    列表窗.移动 (播放器设置.列表窗_左边, 播放器设置.列表窗_顶边, 播放器设置.列表窗_宽度, 播放器设置.列表窗_高度)
.如果结束


.子程序 应用配置_歌词窗位置, 空白型, , 
.如果 (或者 (等于 (播放器设置.歌词窗_左边, -32000), 等于 (播放器设置.歌词窗_顶边, -32000))) ' 因最小化出错，或初始值
    歌词窗.移动 (相加 (主窗口., 主窗口.), 主窗口., #主窗口宽度, #主窗口高度)
.否则
    歌词窗.移动 (播放器设置.歌词窗_左边, 播放器设置.歌词窗_顶边, 播放器设置.歌词窗_宽度, 播放器设置.歌词窗_高度)
.如果结束


.子程序 应用配置_均衡器窗位置, 空白型, , 
.如果 (或者 (等于 (播放器设置.均衡器窗_左边, -32000), 等于 (播放器设置.均衡器窗_顶边, -32000))) ' 因最小化出错，或初始值
    均衡器窗.移动 (相加 (主窗口., #主窗口宽度), 相加 (主窗口., #主窗口高度), , )
.否则
    均衡器窗.移动 (播放器设置.均衡器窗_左边, 播放器设置.均衡器窗_顶边, , )
.如果结束


.子程序 应用配置_循环模式, 空白型, , 
.判断开始 (等于 (播放器设置.循环模式, 1))
    赋值 (列表窗..选中, 真)
    赋值 (列表窗..选中, 假)
    赋值 (列表窗..选中, 假)
.判断 (等于 (播放器设置.循环模式, 3))
    赋值 (列表窗..选中, 假)
    赋值 (列表窗..选中, 假)
    赋值 (列表窗..选中, 真)
    
.默认
    赋值 (播放器设置.循环模式, 2) ' 其他值，默认为“顺序播放”
    赋值 (列表窗..选中, 假)
    赋值 (列表窗..选中, 真)
    赋值 (列表窗..选中, 假)
.判断结束


.子程序 应用配置_均衡器_变速_回声, 空白型, , 
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器1), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器2), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器3), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器4), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器5), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器6), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器7), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器8), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器9), 15), 30), 均衡器窗..最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (播放器设置.均衡器10), 15), 30), 均衡器窗..最大位置))
应用均衡器 (0)

赋值 (均衡器窗..位置, 播放器设置.变速值)
应用变速 ()

赋值 (均衡器窗..位置, 播放器设置.回声强度)
赋值 (均衡器窗..位置, 播放器设置.回声时间)
应用回声 ()

.子程序 应用配置_音量, 空白型, , 
刷新音量条 (播放器设置.音量)
应用音量 ()

.子程序 应用配置_桌面歌词, 空白型, , 
.参数 项号, 整数型, , 从1开始 0代表全部

.局部变量 发送的文本, 文本型, , , 

.如果真 (等于 (播放器设置.桌面歌词_显示, 假))
    返回 ()
.如果真结束
.如果真 (或者 (等于 (项号, 1), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ccolr1”, 到文本 (播放器设置.桌面歌词_颜色1), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 2), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ccolr2”, 到文本 (播放器设置.桌面歌词_颜色2), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 3), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ccolr3”, 到文本 (播放器设置.桌面歌词_颜色3), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 4), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ccolr4”, 到文本 (播放器设置.桌面歌词_颜色4), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 5), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctran1”, 到文本 (播放器设置.桌面歌词_颜色浓度1), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 6), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctran2”, 到文本 (播放器设置.桌面歌词_颜色浓度2), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 7), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctran3”, 到文本 (播放器设置.桌面歌词_颜色浓度3), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 8), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctran4”, 到文本 (播放器设置.桌面歌词_颜色浓度4), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 9), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cftsze”, 到文本 (播放器设置.桌面歌词_字体大小), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 10), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cftstl”, 到文本 (播放器设置.桌面歌词_字体风格), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 11), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cftnme”, 播放器设置.桌面歌词_字体名称, #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 12), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cbkclr”, 到文本 (播放器设置.桌面歌词_背景颜色), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 13), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctranb”, 到文本 (播放器设置.桌面歌词_背景透明度), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 14), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Ctranw”, 到文本 (播放器设置.桌面歌词_文本透明度), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 15), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Chghfx”, 到文本 (播放器设置.桌面歌词_背景高度修正), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 16), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cdrwfx”, 到文本 (播放器设置.桌面歌词_纵向偏移_绘制), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 17), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cmovfx”, 到文本 (播放器设置.桌面歌词_纵向偏移_窗体), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 18), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cislck”, 选择 (播放器设置.桌面歌词_锁定, “1”, “0”), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 19), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Clckey”, 到文本 (播放器设置.桌面歌词_锁定热键), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 20), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cpixel”, 到文本 (播放器设置.吸附临界值), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 21), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “Cismes”, 选择 (播放器设置.桌面歌词_测量文本高度, “1”, “0”), #换行符))
.如果真结束
.如果真 (或者 (等于 (项号, 22), 等于 (项号, 0)))
    赋值 (发送的文本, 相加 (发送的文本, “M”, 到文本 (播放器设置.桌面歌词_窗口左边), “,”, 到文本 (播放器设置.桌面歌词_窗口顶边), “,”, 到文本 (播放器设置.桌面歌词_窗口宽度), #换行符))
.如果真结束


赋值 (发送的文本, 取文本左边 (发送的文本, 相减 (取文本长度 (发送的文本), 2)))
向桌面歌词发送消息 (发送的文本)

.子程序 应用配置_托盘图标, 空白型, , 
.参数 在初始化, 逻辑型, 可空, 默认假（初始化时窗口不可见，但是需要以可见的方式处理）

.如果真 (是否为空 (在初始化))
    赋值 (在初始化, 假)
.如果真结束
.如果 (或者 (并且 (等于 (主窗口., 假), 等于 (在初始化, 假)), 等于 (播放器设置.仅隐藏时显示托盘图标, 假)))
    赋值 (主窗口.., 真)
.否则
    赋值 (主窗口.., 假)
.如果结束


.子程序 应用配置_透明度, 空白型, , 
设定窗口透明度 (主窗口.取窗口句柄 (), 播放器设置.透明度)
设定窗口透明度 (列表窗.取窗口句柄 (), 播放器设置.透明度)
设定窗口透明度 (歌词窗.取窗口句柄 (), 播放器设置.透明度)
设定窗口透明度 (均衡器窗.取窗口句柄 (), 播放器设置.透明度)


.子程序 应用配置_列表字体, 空白型, , 
.局部变量 图片组, 字节集, , , 

赋值 (列表窗...字体名称, 播放器设置.列表_字体名称)
赋值 (列表窗...字体大小, 播放器设置.列表_字体大小)
赋值 (列表窗.., 播放器设置.列表_字体颜色)
赋值 (列表窗...加粗, 不等于 (位与 (播放器设置.列表_字体风格, 1), 0))
赋值 (列表窗...倾斜, 不等于 (位与 (播放器设置.列表_字体风格, 2), 0))
赋值 (列表窗...下划线, 不等于 (位与 (播放器设置.列表_字体风格, 4), 0))
赋值 (列表窗...删除线, 不等于 (位与 (播放器设置.列表_字体风格, 8), 0))
赋值 (列表窗...角度, 相乘 (播放器设置.列表_字体角度, 10))

赋值 (主窗口..字体, 列表窗..)

列表窗.置列宽 (., 1, 相加 (主窗口.取宽度 (., “00:00”), 16)) ' 加16是给滚动条留位置
列表窗.置列宽 (., 0, 取绝对值 (相减 (列表窗.取用户区宽度 (.), 列表窗.取列宽 (., 1))))

 ' 更新列表框图片大小
赋值 (列表窗..画板背景色, #底色)
赋值 (列表窗..字体, 列表窗..)
赋值 (列表窗..高度, 列表窗.取高度 (., “测试文本”))
赋值 (图片组, 未知支持库函数_30 (列表窗..宽度, 列表窗..高度))
列表窗.清除 (., , , , )
列表窗.复制 (., 0, 0, 12, 12, 列表窗., 0, 相除 (相减 (列表窗..高度, 列表窗..高度), 2), ) ' 拷贝第一个图片
未知支持库函数_24 (图片组, 列表窗.取图片 (., , ), )
列表窗.清除 (., , , , )
列表窗.复制 (., 12, 0, 12, 12, 列表窗., 0, 相除 (相减 (列表窗..高度, 列表窗..高度), 2), ) ' 拷贝第二个图片
未知支持库函数_24 (图片组, 列表窗.取图片 (., , ), )
赋值 (列表窗.., 图片组)

赋值 (列表窗.., 列表窗..)

.窗口程序集 列表窗程序集, , , 

.程序集变量 可见_预设, 逻辑型, , , 当本窗口“打开”时，此属性恒为真，即使最小化到托盘
.程序集变量 找到的项号, 整数型, , , 从0开始
.程序集变量 查找前隐藏, 逻辑型, , , 有时需要在后台调用“快速定位”
.程序集变量 查找前位置, Gdip矩形2I, , , 记录，用于查找完毕后恢复
.程序集变量 查找前选中项, 整数型, , , 
.子程序 _列表窗_创建完毕, 空白型, , 
赋值 (列表窗., #底色)
应用皮肤 (列表窗.取窗口句柄 (), 1)
 ' 限制窗口尺寸 (列表窗.取窗口句柄 (), 主窗口.宽度, 主窗口.高度, 9999, 9999)
置背景交替色 (列表窗, , #白色, #底色, 真)
0.置列宽 (取绝对值 (相减 (.倾斜, 1.取列宽 (), 2.取列宽 (), 7)))
列表窗.取窗口句柄 ().未知支持库函数_0 ()
_列表窗_尺寸被改变 ()
添加提示_列表窗 ()
赋值 (找到的项号, -1)
读入数据库 () ' 必须在应用皮肤后读入

.子程序 添加提示_列表窗, 空白型, , 
未知支持库函数_0 (取窗口句柄 (), “添加”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “删除”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “查找”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “循环模式”, 假, 假)
未知支持库函数_0 (取窗口句柄 (), “排序”, 假, 假)

.子程序 _列表窗_可否被关闭, 逻辑型, , 
.如果真 (查找前隐藏) ' 正在进行查找，并且之前还是隐藏的
    取消快速定位 ()
    返回 (假)
.如果真结束
赋值 (列表窗., 假)
赋值 (可见_预设, 假)
刷新按钮_列表窗 (假)
返回 (假)

.子程序 _列表窗_被显示, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (2, 真)
.如果真结束
赋值 (可见_预设, 真)

.如果真 (是否已创建 (扫描歌曲窗口))
    赋值 (扫描歌曲窗口., 真)
.如果真结束
.如果真 (是否已创建 (文件属性窗口))
     ' 如果真 (文件属性窗口.可见_预设)
    赋值 (文件属性窗口., 真)
    
.如果真结束
.如果真 (是否已创建 (精确查找窗口))
    赋值 (精确查找窗口., 真)
.如果真结束

置背景交替色 (列表窗, , #白色, #底色, 真)
重新钩上 (2) ' 后台查找有时会脱钩

.子程序 _列表窗_被隐藏, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (2, 假)
.如果真结束
 ' 可见_预设 ＝ 假
.如果真 (是否已创建 (扫描歌曲窗口))
    赋值 (扫描歌曲窗口., 假)
.如果真结束
.如果真 (是否已创建 (文件属性窗口))
    赋值 (文件属性窗口., 假)
.如果真结束
.如果真 (是否已创建 (精确查找窗口))
    赋值 (精确查找窗口., 假)
.如果真结束


.子程序 _列表窗_获得焦点, 空白型, , 
依次显示窗口 (2)

.子程序 _列表窗_尺寸被改变, 空白型, , 
.局部变量 顶部预留, 整数型, 静态, , 
.局部变量 底部预留, 整数型, 静态, , 

赋值 (顶部预留, 选择 (.可视, .高度, 0))
赋值 (底部预留, 选择 (.字体大小, 120, 0))
0.移动 (相加 (24, 顶部预留), 取用户区宽度 (), 相减 (取用户区高度 (), 24, 顶部预留, 底部预留))
0.移动 (24, 取用户区宽度 (), )
0.移动 (相减 (取用户区高度 (), 120), 取用户区宽度 (), 120)


0.置列宽 (取绝对值 (相减 (取用户区宽度 (), 1.取列宽 ())))
0.置列宽 (取用户区宽度 ())

.子程序 _超级列表框1_表项被激活, 空白型, , 
.局部变量 选中项数组, 整数型, , "0", 

赋值 (选中项数组, 取被选择表项 ())
.如果真 (大于或等于 (取数组成员数 (选中项数组), 1))
    主控制集_打开媒体 (相加 (选中项数组 [1], 1).取文本 (4), “;”, 假, 选中项数组 [1])
     ' 超级列表框1.置图片 (选中项数组 [1], 0, 0)
     ' 超级列表框1.置图片 (选中项数组 [1] ＋ 1, 0, -1)
    .如果真 (查找前隐藏) ' 后台调出查找，直接选择也视为查找完毕
        取消快速定位 ()
    .如果真结束
    
    
    .如果 (等于 (取提示状态 (12), 假))
        主窗口.未知支持库函数_26 (., 取鼠标水平位置 (), 取鼠标垂直位置 (), #Tip12, -1, 真)
    .否则
        .如果真 (播放器设置.桌面歌词_显示)
            .如果真 (等于 (取提示状态 (6), 假))
                主窗口.未知支持库函数_26 (., 相加 (播放器设置.桌面歌词_窗口左边, 相除 (播放器设置.桌面歌词_窗口宽度, 2)), 相加 (播放器设置.桌面歌词_窗口左边, 相除 (相乘 (播放器设置.桌面歌词_字体大小, 2), 3)), #Tip6, -1, 真)
            .如果真结束
            
        .如果真结束
        
    .如果结束
    
.如果真结束


.子程序 _拖放对象1_得到文件, 空白型, , 
.参数 接收到的文件路径, 文本型, , 

列表框_得到路径 (接收到的文件路径)

.子程序 _拖放对象1_得到文本, 空白型, , 
.参数 接收到的文本, 文本型, , 

列表框_得到路径 (接收到的文本)

.子程序 列表框_得到路径, 空白型, , 
.参数 路径, 文本型, , 

.局部变量 文件属性, 整数型, , , 
.局部变量 文本数组, 文本型, , "0", 
.局部变量 文件数组, 文本型, , "0", 
.局部变量 X, 整数型, , , 

赋值 (文本数组, 分割文本 (路径, #换行符, ))
.变量循环首 (1, 取数组成员数 (文本数组), 1, X)
    赋值 (文件属性, 取文件属性 (文本数组 [X]))
    .如果 (并且 (不等于 (位与 (文件属性, 16), 0), 不等于 (文件属性, -1))) ' 是目录
        扫描并添加文件 (文本数组 [X], , 假) ' 扫描
    .否则
        加入成员 (文件数组, 文本数组 [X])
    .如果结束
    
.变量循环尾 ()
.如果真 (不等于 (取数组成员数 (文件数组), 0))
    列表框加入文件 (文件数组)
.如果真结束


.子程序 _单曲循环_被选择, 空白型, , ====循环模式===
赋值 (播放器设置.循环模式, 1)
应用配置_循环模式 ()

.子程序 _顺序播放_被选择, 空白型, , 
赋值 (播放器设置.循环模式, 2)
应用配置_循环模式 ()


.子程序 _随机播放_被选择, 空白型, , ====循环模式===
赋值 (播放器设置.循环模式, 3)
应用配置_循环模式 ()


.子程序 _按显示的标题_被选择, 空白型, , 
.局部变量 倒序, 逻辑型, 静态, , 

列表框排序 (7, 倒序)
赋值 (倒序, 取反 (倒序))

.子程序 _按标题_被选择, 空白型, , ===排序===
.局部变量 倒序, 逻辑型, 静态, , 

列表框排序 (1, 倒序)
赋值 (倒序, 取反 (倒序))

.子程序 _按时间_被选择, 空白型, , 
.局部变量 倒序, 逻辑型, 静态, , 

列表框排序 (5, 倒序)
赋值 (倒序, 取反 (倒序))

.子程序 _按歌手_被选择, 空白型, , 
.局部变量 倒序, 逻辑型, 静态, , 

列表框排序 (2, 倒序)
赋值 (倒序, 取反 (倒序))

.子程序 _按专辑_被选择, 空白型, , 
.局部变量 倒序, 逻辑型, 静态, , 

列表框排序 (3, 倒序)
赋值 (倒序, 取反 (倒序))

.子程序 _随机打乱_被选择, 空白型, , ===排序===
列表框排序 (0, 假)

.子程序 _扫描目录_被选择, 空白型, , 
载入 (扫描歌曲窗口, 列表窗, 假)

.子程序 _选中的文件_被选择, 空白型, , ===删除项目===
列表框_删除选中 ()

.子程序 _不存在的文件_被选择, 空白型, , 
列表框_删除不存在项 ()

.子程序 _重复的文件_被选择, 空白型, , 
列表框_删除重复 ()

.子程序 _全部删除_被选择, 空白型, , ===删除项目===
列表框_删除全部 ()

.子程序 _超级列表框1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (并且 (等于 (键代码, #空格键), 等于 (功能键状态, 0))) ' 空格：跳转到正在播放项
    .如果真 (不等于 (取正在播放项 (), -1))
        取正在播放项 ().保证显示 ()
    .如果真结束
    
.判断 (等于 (键代码, #Del键))
    .如果真 (并且 (等于 (列表窗..禁止, 假), 等于 (列表窗..禁止, 假)))
        列表框_删除选中 ()
    .如果真结束
    
.判断 (并且 (等于 (键代码, #F键), 等于 (功能键状态, 1))) ' Ctrl+F：快速查找
    开启快速查找 ()
.判断 (并且 (等于 (键代码, #回车键), 等于 (功能键状态, 2))) ' Shift+回车：添加预约
    添加到预约 ()
    返回 (假)
.判断 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _图形按钮_添加_被单击, 空白型, , ===工具条===
赋值 (.正常图片, .点燃图片)
弹出菜单 (相加 (列表窗., .左边, 2), 相加 (列表窗., .顶边, 46))
赋值 (.正常图片, .禁止图片)

.子程序 _图形按钮_删除_被单击, 空白型, , 
赋值 (.正常图片, .点燃图片)
弹出菜单 (相加 (列表窗., .左边, 2), 相加 (列表窗., .顶边, 46))
赋值 (.正常图片, .禁止图片)

.子程序 _图形按钮_查找_被单击, 空白型, , 
赋值 (.正常图片, .点燃图片)
弹出菜单 (相加 (列表窗., .左边, 2), 相加 (列表窗., .顶边, 46))
赋值 (.正常图片, .禁止图片)

.子程序 _图形按钮_模式_被单击, 空白型, , 
赋值 (.正常图片, .点燃图片)
弹出菜单 (相加 (列表窗., .左边, 2), 相加 (列表窗., .顶边, 46))
赋值 (.正常图片, .禁止图片)

.子程序 _图形按钮_排序_被单击, 空白型, , ===工具条===
赋值 (.正常图片, .点燃图片)
弹出菜单 (相加 (列表窗., .左边, 2), 相加 (列表窗., .顶边, 46))
赋值 (.正常图片, .禁止图片)

.子程序 _添加文件_被选择, 空白型, , 
.局部变量 高级对话框, 新通用对话框类, , , 
.局部变量 文件名, 文本型, , , 

高级对话框.文件对话框初始化 (播放器设置.过滤器, , , , , , , , , 真)

.如果真 (高级对话框.打开 (0, 0, 文件名, “选择要打开的文件”, 0))
    列表框加入文件 (分割文本 (文件名, #换行符, ))
    
    .如果真 (等于 (取提示状态 (10), 假))
        主窗口.未知支持库函数_26 (., 取鼠标水平位置 (), 取鼠标垂直位置 (), #Tip10, -1, 真)
    .如果真结束
    
.如果真结束


.子程序 _编辑框_快速查找_内容被改变, 空白型, , 
.如果真 (等于 (快速定位 (.内容, -1, 真, 真), 假))
    鸣叫 ()
.如果真结束


.子程序 快速定位, 逻辑型, , 
.参数 关键字, 文本型, , 
.参数 初始行号, 整数型, 可空, 从0开始，若为空则从上次找到的行继续，注意：该函数将不查找“初始行号”本身
.参数 往后找, 逻辑型, , 
.参数 必须清除标记, 逻辑型, 可空, 

.局部变量 X, 整数型, , , 
.局部变量 列表项_显示标题, 文本型, , , 

.如果真 (是否为空 (初始行号))
    赋值 (初始行号, 找到的项号)
.如果真结束
.变量循环首 (相加 (初始行号, 选择 (往后找, 1, -1)), 选择 (往后找, 相减 (取表项数 (), 1), 0), 选择 (往后找, 1, -1), X) ' 根据不同的查找方向来确定不同的参数
    赋值 (列表项_显示标题, 删全部空 (列表窗.取标题 (., X, 0)))
    .如果真 (或者 (不等于 (寻找文本 (取文本拼音 (列表项_显示标题), 关键字, , 真), -1), 不等于 (寻找文本 (列表项_显示标题, 关键字, , 真), -1)))
        X.保证显示 ()
        置列表项图标 (找到的项号) ' 清除原来的标记
        赋值 (找到的项号, X)
        置列表项图标 (找到的项号, 1) ' 做标记
        返回 (真)
    .如果真结束
    
.变量循环尾 ()
.如果真 (必须清除标记) ' 没找到，清除
    置列表项图标 (找到的项号)
    赋值 (找到的项号, -1)
.如果真结束
返回 (假)

.子程序 列表框_清除选择, 空白型, , 取消选择所有已选中的项
.局部变量 X, 整数型, , , 
.局部变量 被选择表项, 整数型, , "0", 

赋值 (被选择表项, 取被选择表项 ())
.变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
    被选择表项.取消表项选择 ( [X])
.变量循环尾 ()

.子程序 _编辑框_快速查找_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #下光标键)) ' 下一个匹配项
    快速定位 (.内容, , 真)
    返回 (假)
.判断 (等于 (键代码, #上光标键)) ' 上一个匹配项
    快速定位 (.内容, , 假)
    返回 (假)
.判断 (并且 (等于 (键代码, #回车键), 等于 (功能键状态, 0)))
    .如果 (不等于 (找到的项号, -1))
        主控制集_打开媒体 (相加 (找到的项号, 1).取文本 (4), #换行符, 假, 找到的项号)
        列表框_清除选择 ()
        找到的项号.选择表项 () ' 确认播放后，选中该项
        赋值 (找到的项号, -1)
        赋值 (.可视, 假)
        _列表窗_尺寸被改变 ()
        .如果真 (查找前隐藏)
            赋值 (列表窗., 假)
            列表窗_恢复属性 ()
        .如果真结束
        
        
        .如果真 (等于 (取提示状态 (14), 假))
            主窗口.未知支持库函数_26 (., 相加 (列表窗., 列表窗..左边, 相除 (列表窗..宽度, 2)), 相加 (列表窗., 列表窗..顶边, 相除 (列表窗..高度, 2), 20), #Tip14, -1, 真)
        .如果真结束
        
        
        返回 (假) ' 敲下回车键即为播放，“找到”标志将被“播放”标志取代，所以可不必清空
    .否则
        
        主窗口.未知支持库函数_26 (., 相加 (列表窗., 列表窗..左边, 相除 (列表窗..宽度, 2)), 相加 (列表窗., 列表窗..顶边, 相除 (列表窗..高度, 2), 20), “没有找到匹配的歌曲，看看是不是输入有错”, -1, 真)
        
    .如果结束
    
.判断 (并且 (等于 (键代码, #回车键), 等于 (功能键状态, 2))) ' 添加预约
    .如果真 (不等于 (找到的项号, -1))
        预约_添加 (找到的项号)
        赋值 (.被选择字符数, -1) ' 全选
        
        
        .如果真 (等于 (取提示状态 (15), 假))
            主窗口.未知支持库函数_26 (., 相加 (列表窗., 列表窗..左边, 相除 (列表窗..宽度, 2)), 相加 (列表窗., 列表窗..顶边, 相除 (列表窗..高度, 2), 20), #Tip15, -1, 真)
        .如果真结束
        
        
        
        
        返回 (假)
    .如果真结束
    
.判断 (等于 (键代码, #Esc键))
    取消快速定位 ()
    返回 (假)
 ' .判断 (回调函数_快捷键事件 (功能键状态, 键代码))
     ' 返回 (假)
.默认
    
.判断结束


.子程序 取消快速定位, 空白型, , 
.如果真 (不等于 (找到的项号, -1))
    置列表项图标 (找到的项号)
    赋值 (找到的项号, -1)
.如果真结束

赋值 (.可视, 假)
_列表窗_尺寸被改变 ()
.如果真 (查找前隐藏)
    赋值 (列表窗., 假)
    列表窗_恢复属性 ()
    赋值 (., 查找前选中项)
    查找前选中项.保证显示 ()
.如果真结束


.子程序 _快速查找_被选择, 空白型, , 
开启快速查找 ()

.子程序 开启快速查找, 空白型, , 
.如果真 (.可视)
    返回 ()
.如果真结束
赋值 (查找前隐藏, 取反 (列表窗.))
.如果真 (等于 (列表窗., 假))
    赋值 (列表窗., 真)
    赋值 (列表窗., 真)
    赋值 (查找前位置.左边, 列表窗.)
    赋值 (查找前位置.顶边, 列表窗.)
    赋值 (查找前位置.宽度, 列表窗.)
    赋值 (查找前位置.高度, 列表窗.)
    
.如果真结束
赋值 (查找前选中项, .)
赋值 (找到的项号, -1)
赋值 (.内容, “”)
赋值 (.可视, 真)
_列表窗_尺寸被改变 ()
获取焦点 ()


.如果 (等于 (取提示状态 (13), 假))
    主窗口.未知支持库函数_26 (., 相加 (列表窗., 列表窗..左边, 相除 (列表窗..宽度, 2)), 相加 (列表窗., 列表窗..顶边, 相除 (列表窗..高度, 2), 20), #Tip13, -1, 真)
.否则
    .如果真 (查找前隐藏)
        .如果真 (等于 (取提示状态 (18), 假))
            主窗口.未知支持库函数_26 (., 相加 (列表窗., 列表窗..左边, 相除 (列表窗..宽度, 2)), 相加 (列表窗., 列表窗..顶边, 相除 (列表窗..高度, 2), 20), #Tip18, -1, 真)
        .如果真结束
        
    .如果真结束
    
    
.如果结束



.子程序 _精确查找_被选择, 空白型, , 
.如果真 (等于 (是否已创建 (精确查找窗口), 假))
    载入 (精确查找窗口, 列表窗, 假)
.如果真结束


.子程序 添加到预约, 空白型, , 把现在选中的添加到预约
.局部变量 被选择表项, 整数型, , "0", 
.局部变量 X, 整数型, , , 

赋值 (被选择表项, 取被选择表项 ())
.如果真 (等于 (取数组成员数 (被选择表项), 0))
    返回 ()
.如果真结束

.变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
    预约_添加 (被选择表项 [X], 等于 (X, 1)) ' 只有第一个才播放提示音
.变量循环尾 ()


.子程序 列表窗_恢复属性, 空白型, , 
.如果真 (查找前隐藏)
    赋值 (列表窗., 假)
    赋值 (查找前隐藏, 假)
    列表窗.移动 (查找前位置.左边, 查找前位置.顶边, 查找前位置.宽度, 查找前位置.高度)
.如果真结束


.子程序 _超级列表框1_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 


API_模拟鼠标_ (#鼠标左键按下, 0, 0, 0, 0)
API_模拟鼠标_ (#鼠标左键放开, 0, 0, 0, 0)



.子程序 _超级列表框1_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.禁止, 不等于 (取已选择表项数 (), 1))
赋值 (.禁止, 小于 (取已选择表项数 (), 1))
赋值 (.禁止, .禁止)
弹出菜单 ()

.子程序 _查看预约_被选择, 空白型, , 
赋值 (.选中, 取反 (.选中))
赋值 (.字体大小, .选中)
_列表窗_尺寸被改变 ()

.子程序 _添加到预约_被选择, 空白型, , 
添加到预约 ()
.如果真 (等于 (取提示状态 (17), 假))
    主窗口.未知支持库函数_26 (., 取鼠标水平位置 (), 取鼠标垂直位置 (), #Tip17, -1, 真)
.如果真结束


.子程序 _超级列表框2_鼠标右键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

API_模拟鼠标_ (#鼠标左键按下, 0, 0, 0, 0)
API_模拟鼠标_ (#鼠标左键放开, 0, 0, 0, 0)

.子程序 _超级列表框2_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

弹出菜单 ()

.子程序 _超级列表框2_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (并且 (等于 (键代码, #空格键), 等于 (功能键状态, 0))) ' 空格：选中
    
.判断 (等于 (键代码, #Del键))
    预约_删除 (取被选择表项 ())
.判断 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _预约删除_被选择, 空白型, , 
预约_删除 (取被选择表项 ())

.子程序 _预约置顶_被选择, 空白型, , 
.局部变量 被选择表项, 整数型, , "0", 

赋值 (被选择表项, 取被选择表项 ())
.如果真 (大于或等于 (取数组成员数 (被选择表项), 1))
    预约_置顶 (被选择表项 [1])
.如果真结束


.子程序 _超级列表框1_被双击, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (功能键状态, 2)) ' Shift+双击
    _添加到预约_被选择 ()
    返回 (假)
.如果真结束


.子程序 _超级列表框2_表项被激活, 空白型, , 
.局部变量 被选择表项, 整数型, , "0", 

赋值 (被选择表项, 取被选择表项 ())
.如果真 (大于或等于 (取数组成员数 (被选择表项), 1))
    预约_取出并播放 (被选择表项 [1])
.如果真结束


.子程序 _文件属性_被选择, 空白型, , 
.局部变量 被选择表项, 整数型, , "0", 
.局部变量 被选择文本, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 扩展名, 文本型, , , 

赋值 (被选择表项, 取被选择表项 ())
.如果真 (等于 (取数组成员数 (被选择表项), 0))
    返回 ()
.如果真结束

.如果真 (等于 (是否已创建 (文件属性窗口), 假))
    载入 (文件属性窗口, 列表窗, 假)
.如果真结束

.如果 (等于 (取数组成员数 (被选择表项), 1))
    加入成员 (被选择文本, 相加 (被选择表项 [1], 1).取文本 (4))
    文件属性窗口_进入单文件状态 (被选择文本 [1], 被选择表项 [1])
    
.否则
    
    重定义数组 (被选择文本, 假, 取数组成员数 (被选择表项))
    .变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
        赋值 (被选择文本 [X], 相加 (被选择表项 [X], 1).取文本 (4))
    .变量循环尾 ()
    文件属性窗口_进入多文件状态 (被选择文本, 被选择表项)
.如果结束


.子程序 _打开目录_被选择, 空白型, , 
.局部变量 被选择表项, 整数型, , "0", 

赋值 (被选择表项, 取被选择表项 ())
.如果真 (等于 (取数组成员数 (被选择表项), 0))
    返回 ()
.如果真结束
运行 (相加 (“explorer.exe /e,/select, ”, 相加 (被选择表项 [1], 1).取文本 (4)), 假, )


.子程序 _复制到_被选择, 空白型, , 
复制选择的文件 ()

.子程序 _重新读取信息_被选择, 空白型, , 
更新列表项 (取被选择表项 ())

.子程序 _列表窗_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

 ' 列表窗.超级列表框1.允许重画 ()

.窗口程序集 歌词窗程序集, , , 

.程序集变量 可见_预设, 逻辑型, , , 
.程序集变量 鼠标纵坐标_拖动前, 整数型, , , 拖动歌词点下鼠标时的坐标
.程序集变量 文字纵坐标_拖动前, 整数型, , , 歌词窗的文字纵坐标
.程序集变量 高亮行号_拖动后, 整数型, , , 实时记录下拖动中的高亮行号，以供放开时跳转用
.程序集变量 中心行号_拖动后, 整数型, , , 
.程序集变量 偏移值_拖动后, 整数型, , , 
.程序集变量 文字纵坐标_拖动后, 整数型, , , 拖动完毕后，需要将该变量告诉“歌词实时刷新”函数
.程序集变量 钩子句柄, 整数型, , , 用于拖放歌词时，监控鼠标松开
.程序集变量 拖动前按住了Ctrl, 逻辑型, , , 
.程序集变量 二元线性调整状态, 逻辑型, , , 
.程序集变量 调整前时间, 整数型, , , 取启动时间() 获得，防止按下和放开间隔太短
.程序集变量 旧过程号, 整数型, , , 
.子程序 _歌词窗_创建完毕, 空白型, , 
应用皮肤 (歌词窗.取窗口句柄 (), 1)
赋值 (.画板背景色, #底色)
 ' 限制窗口尺寸 (歌词窗.取窗口句柄 (), 主窗口.宽度, 主窗口.高度, 9999, 9999)
初始化歌词窗显示 ()
切换鼠标指针 (1)
.如果真 (或者 (不等于 (播放器设置.引擎号, 0), 等于 (播放器设置.使用BASS播放MID, 假))) ' 只有纯Bass模式下，均衡器才是默认打开的
    刷新均衡器条状态 ()
.如果真结束

歌词窗.取窗口句柄 ().未知支持库函数_0 ()
赋值 (旧过程号, SetWindowLong (取窗口句柄 (), -4, 到数值 (&消息处理子程序_歌词画板)))

.子程序 消息处理子程序_歌词画板, 整数型, , 用于重画
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 IParam, 整数型, , 

.如果真 (或者 (等于 (Msg, 20), 等于 (Msg, 133))) ' 需要重画
    消息_歌词窗尺寸改变 ()
.如果真结束
返回 (CallWindowProc (旧过程号, hWnd, Msg, wParam, IParam))

.子程序 切换鼠标指针, 空白型, , 
.参数 类型, 整数型, , 1,2

赋值 (.鼠标指针, 相加 ({ 255, 255, 255, 255 }, 选择 (等于 (类型, 1), #鼠标_手形1, #鼠标_手形2)))


.子程序 _歌词窗_尺寸被改变, 空白型, , 
0.移动 (0, 歌词窗.取用户区宽度 (), 歌词窗.取用户区高度 ())
更新框架尺寸 ()
消息_歌词窗尺寸改变 ()


.子程序 _歌词窗_可否被关闭, 逻辑型, , 
赋值 (歌词窗., 假)
赋值 (可见_预设, 假)
刷新按钮_歌词窗 (假) ' 主窗口上方按钮更改为放开
返回 (假)

.子程序 _歌词窗_被显示, 空白型, , 

.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (3, 真)
.如果真结束
赋值 (可见_预设, 真)
消息_歌词窗尺寸改变 () ' 要求刷新

.如果真 (是否已创建 (歌词搜索窗口))
     ' 如果真 (歌词搜索窗口.可见_预设)
    赋值 (歌词搜索窗口., 真)
    
.如果真结束
.如果真 (是否已创建 (歌词调整窗口))
    赋值 (歌词调整窗口., 真)
.如果真结束


.子程序 _歌词窗_被隐藏, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (3, 假)
.如果真结束
.如果真 (是否已创建 (歌词搜索窗口))
     ' 如果真 (歌词搜索窗口.可见_预设)
    赋值 (歌词搜索窗口., 假)
    
.如果真结束
.如果真 (是否已创建 (歌词调整窗口))
    赋值 (歌词调整窗口., 假)
.如果真结束



.子程序 _歌词窗_获得焦点, 空白型, , 
依次显示窗口 (3)

.子程序 _拖放对象1_得到文件, 空白型, , 
.参数 接收到的文件路径, 文本型, , 

.局部变量 文件名数组, 文本型, , "0", 

赋值 (文件名数组, 分割文本 (接收到的文件路径, #换行符, ))
.如果真 (大于或等于 (取数组成员数 (文件名数组), 1))
    打开LRC (读入文件 (文件名数组 [1]))
.如果真结束


.子程序 _时钟_歌词显示_周期事件, 空白型, , 
歌词实时显示 ()
刷新桌面歌词 ()

.子程序 _歌词窗_滚轮被滚动, 逻辑型, , 
.参数 滚动距离, 整数型, , 
.参数 功能键状态, 整数型, , 

手动调整整体偏移 (滚动距离)

.子程序 手动调整整体偏移, 空白型, , 
.参数 值, 整数型, , 仅为1或者-1

.局部变量 当前偏移, 小数型, , , 

赋值 (当前偏移, 修改整体偏移值 (相除 (值, 2)))
歌词实时显示 (真, 真, , )
歌词实时显示 (真, 假, , )
赋值 (歌词窗., 相加 (“歌词（”, 多项选择 (相加 (取符号 (当前偏移), 2), “提前”, “不变”, “延迟”), 选择 (不等于 (当前偏移, 0), 相加 (数值到格式文本 (取绝对值 (当前偏移), 1, 假), “秒”), “”), “）”))
赋值 (.时钟周期, 0) ' 延时关闭提示
赋值 (.时钟周期, 800)


.子程序 _时钟_延迟提示_周期事件, 空白型, , 
赋值 (.时钟周期, 0)
赋值 (歌词窗., “歌词”)

.子程序 _画板_多行歌词_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (取歌词总行数 (), 0)) ' 没有歌词
    返回 ()
.如果真结束
.如果真 (不等于 (.时钟周期, 0))
    赋值 (.时钟周期, 0)
.如果真结束
.如果真 (不等于 (钩子句柄, 0))
    返回 ()
.如果真结束
 ' 图形按钮1.移动 (横向位置 － 10, 纵向位置 － 10, , )
 ' 图形按钮1.可视 ＝ 真

赋值 (调整前时间, 取启动时间 ())

赋值 (拖动前按住了Ctrl, 不等于 (位与 (功能键状态, #Ctrl键), 0))
赋值 (鼠标纵坐标_拖动前, 取鼠标垂直位置 ()) ' 记录下鼠标位置
赋值 (文字纵坐标_拖动前, 行号到坐标 (取当前中心行号 (), 取当前偏移值 ())) ' 转换并记录
 ' 钩子句柄 ＝ SetWindowsHookExA (#WH_MOUSE_LL, &消息处理子程序_鼠标, GetModuleHandleA (0), 0)  ' 安装钩子，监听鼠标
俘获鼠标 (取窗口句柄 ())
切换鼠标指针 (2) ' 切换到手形鼠标“抓住”姿势
赋值 (.时钟周期, 10)
返回 (假)

.子程序 消息处理子程序_鼠标, 整数型, , 
.参数 icode, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 info, 鼠标信息, , , 

复制内存_指针到鼠标信息 (info, lparam, 20)
.如果真 (等于 (wparam, 514)) ' 松开鼠标左键
    UnhookWindowsHookEx (钩子句柄) ' 卸载钩子
    赋值 (钩子句柄, 0)
    歌词停止调整 ()
.如果真结束
返回 (CallNextHookEx (钩子句柄, icode, wparam, lparam))

.子程序 _画板_多行歌词_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

释放鼠标 ()
歌词停止调整 ()

.子程序 歌词停止调整, 空白型, , 
.局部变量 媒体位置, 小数型, , , 

切换鼠标指针 (1) ' 换回原来鼠标
.如果真 (等于 (.时钟周期, 0)) ' 已经停了
    返回 ()
.如果真结束

 ' .如果真 (不等于 (钩子句柄, 0))
     ' UnhookWindowsHookEx (钩子句柄)  ' 卸载钩子
     ' 钩子句柄 ＝ 0
.如果真结束

.如果真 (小于 (相减 (取启动时间 (), 调整前时间), 60)) ' 间隔太短，不算数
    赋值 (.时钟周期, 0)
    返回 ()
.如果真结束

歌词实时显示 (行号到坐标 (中心行号_拖动后, 偏移值_拖动后))
 ' 时钟_调整.时钟周期 ＝ 0
赋值 (媒体位置, 媒体_取位置 ())
同步歌词 (媒体位置, 假)
同步歌词 (媒体位置, 真)

.如果真 (或者 (等于 (取当前歌词行号 (), 高亮行号_拖动后), 等于 (取歌词总行数 (), 0))) ' 没改变行号，或者没歌词了
    .如果真 (等于 (二元线性调整状态, 假)) ' 二元调整下，即使是同一行也可以
        消息_歌词窗尺寸改变 ()
        赋值 (.时钟周期, 0)
        返回 ()
        
    .如果真结束
    
.如果真结束

.如果 (并且 (等于 (拖动前按住了Ctrl, 假), 等于 (二元线性调整状态, 假))) ' 没按Ctrl键，且不在“二元调整”状态，这时需要跳转播放
    跳到指定行 (高亮行号_拖动后)
    赋值 (.时钟周期, 0)
    .如果 (大于 (高亮行号_拖动后, 取当前高亮行号 ())) ' 拖动到后面了
        歌词实时显示 (真, 假, , )
    .否则
        歌词实时显示 (真, 真, , )
    .如果结束
    刷新桌面歌词 (真)
    
    
    .如果真 (等于 (取提示状态 (7), 假))
        主窗口.未知支持库函数_26 (., 取鼠标水平位置 (), 取鼠标垂直位置 (), #Tip7, -1, 真)
    .如果真结束
    
    
    
     ' 消息_歌词窗尺寸改变 ()  ' 强制刷新（图形按钮会留下印记）
.否则
    .如果真 (小于 (高亮行号_拖动后, 1))
        赋值 (高亮行号_拖动后, 1)
    .如果真结束
    .如果真 (大于 (高亮行号_拖动后, 取歌词总行数 ()))
        赋值 (高亮行号_拖动后, 取歌词总行数 ())
    .如果真结束
    
    
    .如果 (二元线性调整状态)
        赋值 (.时钟周期, 0)
        回调函数_歌词行返回 (高亮行号_拖动后)
    .否则
        修改整体偏移值 (相减 (媒体位置, 取指定行歌词时间 (高亮行号_拖动后))) ' 按住Ctrl键修改偏移
         ' ===============由于往前和往后调整实际上不是相同的动作，因为时钟是在不断往后走的，所以二者不一样==============
        .如果 (小于 (取当前歌词行号 (), 高亮行号_拖动后))
            歌词实时显示 (假, 假, 真, , 行号到坐标 (中心行号_拖动后, 偏移值_拖动后)) ' 把拖动到的坐标赋给函数
            赋值 (.时钟周期, 0)
        .否则
            歌词实时显示 (假, 真, 真, , 行号到坐标 (中心行号_拖动后, 偏移值_拖动后)) ' （搞回前面了）
            赋值 (.时钟周期, 0)
            歌词实时显示 (真, 真, 假, , ) ' 需要手动调用，来“向前找”
            消息_歌词窗尺寸改变 () ' 又因为“向前找”，需要再次刷新
        .如果结束
        
        
        .如果真 (等于 (取提示状态 (8), 假))
            主窗口.未知支持库函数_26 (., 取鼠标水平位置 (), 取鼠标垂直位置 (), #Tip8, -1, 真)
        .如果真结束
        
        
    .如果结束
    
    
.如果结束


.子程序 _时钟_调整_周期事件, 空白型, , 
赋值 (文字纵坐标_拖动后, 相加 (相减 (鼠标纵坐标_拖动前, 取鼠标垂直位置 ()), 文字纵坐标_拖动前))
坐标到行号 (文字纵坐标_拖动后, 中心行号_拖动后, 偏移值_拖动后)
赋值 (高亮行号_拖动后, 相减 (相加 (中心行号_拖动后, 取当前高亮行号 ()), 取当前中心行号 ())) ' 根据中心行号和差值算出高亮行号

.如果真 (小于 (高亮行号_拖动后, 0)) ' 若高亮行号超出范围
    赋值 (偏移值_拖动后, 0)
    赋值 (高亮行号_拖动后, -1) ' ……这个有点奇怪
    赋值 (中心行号_拖动后, 相减 (相加 (高亮行号_拖动后, 取当前中心行号 ()), 取当前高亮行号 ())) ' 那么中心行号也要修改
    
.如果真结束
.如果真 (大于 (高亮行号_拖动后, 取歌词总行数 ()))
    赋值 (高亮行号_拖动后, 相加 (取歌词总行数 (), 1)) ' ……这个更奇怪
    赋值 (中心行号_拖动后, 相减 (相加 (高亮行号_拖动后, 取当前中心行号 ()), 取当前高亮行号 ()))
    赋值 (偏移值_拖动后, 0)
.如果真结束


刷新歌词 (中心行号_拖动后, 高亮行号_拖动后, 偏移值_拖动后, 0, 假)
置_调整的时间 (取歌词时间 (高亮行号_拖动后))

.子程序 _歌词窗_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (等于 (键代码, #Esc键))
    赋值 (.时钟周期, 0)
    歌词实时显示 (真)
    .如果真 (不等于 (钩子句柄, 0))
        UnhookWindowsHookEx (钩子句柄)
        赋值 (钩子句柄, 0)
    .如果真结束
    
.判断 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _画板_多行歌词_鼠标右键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果 (等于 (取歌词总行数 (), 0))
    连续赋值 (真, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止)
.否则
    连续赋值 (假, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止)
.如果结束
弹出菜单 ()

.子程序 _手动搜索_被选择, 空白型, , 
.如果真 (等于 (是否已创建 (歌词搜索窗口), 假))
    载入 (歌词搜索窗口, 歌词窗, 假)
.如果真结束
歌词搜索窗口_填充编辑框 ()
歌词搜索窗口_刷新设置 ()

赋值 (歌词搜索窗口., 真)
 ' 歌词搜索窗口.可见_预设 ＝ 真

.子程序 _当前句提前半秒_被选择, 空白型, , 
修改单句偏移值 (取当前歌词行号 (), -0.5)

.子程序 _当前句延迟半秒_被选择, 空白型, , 
修改单句偏移值 (取当前歌词行号 (), 0.5)

.子程序 _整体提前半秒_被选择, 空白型, , 
手动调整整体偏移 (-1)


.子程序 _整体延迟半秒_被选择, 空白型, , 
手动调整整体偏移 (1)

.子程序 _保存歌词修改_被选择, 空白型, , 
保存当前歌词 ()

.子程序 取Ctrl键状态, 逻辑型, , 
返回 (拖动前按住了Ctrl)

.子程序 _二元线性调整_被选择, 空白型, , 
载入 (歌词调整窗口, 歌词窗, 假)

.子程序 置二元调整状态, 空白型, , 
.参数 状态值, 逻辑型, , 

赋值 (二元线性调整状态, 状态值)

.子程序 _时钟_延迟刷新_周期事件, 空白型, , 很迫不得已设的一个Timer，因为自动播放时，歌词刷新工作是在窗口显示完毕前完成的
赋值 (.时钟周期, 0)
歌词实时显示 (真)

.子程序 _自动处理换行问题_被选择, 空白型, , 功能已经移动到下载程序集里了，此菜单隐藏
自动处理换行问题 ()
打开LRC (歌词内容)

.类模块 播放控制类_BASS, , , 

.程序集变量 流通道, 整数型, , , 
.程序集变量 默认速度, 小数型, , , 
.程序集变量 均衡器效果句柄, 整数型, , "10", 
.程序集变量 回调函数句柄, 整数型, , , 
.程序集变量 回声效果句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
移除均衡器 ()
移除通知 ()
.如果真 (不等于 (流通道, 0))
    BASS_StreamFree (流通道)
    BASS_MusicFree (流通道)
    赋值 (流通道, 0)
.如果真结束


.子程序 打开, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 预防打开失败, 逻辑型, 可空, 
.参数 自动开始播放, 逻辑型, 可空, 
.参数 需要用均衡器, 逻辑型, 可空, 默认真

.局部变量 之前的流通道, 整数型, , , 
.局部变量 正在播放项, 文本型, , , 

赋值 (之前的流通道, 流通道) ' 先留着标记，等下打开成功了再关，或打开失败了，再把值重新赋回去
.如果真 (是否为空 (预防打开失败)) ' 默认关闭“预防打开失败”
    赋值 (预防打开失败, 假)
.如果真结束
.如果真 (等于 (预防打开失败, 假)) ' 不开启，则关闭当前
    移除均衡器 ()
    移除通知 ()
    
    BASS_StreamFree (流通道)
    BASS_MusicFree (流通道)
    
    赋值 (默认速度, 0)
    赋值 (正在播放项, “”)
    重定义数组 (均衡器效果句柄, 假, 10) ' 重置均衡器句柄
.如果真结束

赋值 (流通道, BASS_StreamCreateFile (假, 文件名, 0, 0, 0)) ' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.如果真 (等于 (流通道, 0))
    赋值 (流通道, BASS_MusicLoad (假, 文件名, 0, 0, 0, 0)) ' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
.如果真结束
.如果真 (等于 (流通道, 0)) ' 打开失败
    .如果真 (预防打开失败)
        赋值 (流通道, 之前的流通道) ' 重新置回原来的
    .如果真结束
    返回 (假)
.如果真结束
 ' 以下代码只有在打开成功后才会执行
 ' 状态 ＝ 真
赋值 (正在播放项, 文件名)
.如果真 (预防打开失败)
    
    移除均衡器 (之前的流通道)
    移除通知 (之前的流通道)
    
    
    BASS_StreamFree (之前的流通道) ' 打开成功了，关闭之前的
    BASS_MusicFree (之前的流通道)
.如果真结束

.如果真 (是否为空 (需要用均衡器))
    赋值 (需要用均衡器, 真)
.如果真结束
.如果真 (需要用均衡器)
    设置均衡器 ()
.如果真结束
赋值 (默认速度, 取播放速度 ()) ' 刷新“默认速度”

.如果真 (是否为空 (自动开始播放))
    赋值 (自动开始播放, 假) ' 默认不自动播放
.如果真结束
.如果真 (自动开始播放)
    BASS_ChannelPlay (流通道, 假)
.如果真结束
返回 (真)


.子程序 设置均衡器, 空白型, , 
.局部变量 回声信息, BASS_DX8_REVERB, , , 
.局部变量 X, 整数型, , , 

.如果真 (等于 (流通道, 0))
    返回 ()
.如果真结束
.变量循环首 (1, 10, 1, X) ' 打开均衡器通道
    赋值 (均衡器效果句柄 [X], BASS_ChannelSetFX (流通道, #BASS_FX_DX8_PARAMEQ, 1))
    
.变量循环尾 ()
赋值 (回声效果句柄, BASS_ChannelSetFX (流通道, #BASS_FX_DX8_REVERB, 1))
赋值 (回声信息, 取回声信息 ())
赋值 (回声信息.fReverbMix, -96)
置回声信息 (回声信息)

.子程序 移除均衡器, 空白型, , 
.参数 流通道_, 整数型, 可空, 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 10, 1, X) ' 关闭均衡器通道
    BASS_ChannelRemoveFX (选择 (是否为空 (流通道_), 流通道, 流通道_), 均衡器效果句柄 [X])
    赋值 (均衡器效果句柄 [X], 0)
.变量循环尾 ()
BASS_ChannelRemoveFX (选择 (是否为空 (流通道_), 流通道, 流通道_), 回声效果句柄)
赋值 (回声效果句柄, 0)

.子程序 播放, 逻辑型, , 
.参数 重新开始, 逻辑型, , 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelPlay (流通道, 重新开始))

.子程序 暂停, 逻辑型, , 
.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelPause (流通道))

.子程序 停止, 逻辑型, , 
.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelStop (流通道))

.子程序 关闭, 空白型, , 
.如果真 (不等于 (流通道, 0))
    移除均衡器 ()
    移除通知 ()
    
    BASS_StreamFree (流通道)
    BASS_MusicFree (流通道)
    赋值 (流通道, 0)
.如果真结束


.子程序 取流通道, 整数型, , 
返回 (流通道)

.子程序 取频谱数据, 空白型, , 
.参数 接收数组, 小数型, 参考 数组, 

.如果真 (等于 (流通道, 0))
    返回 ()
.如果真结束
BASS_ChannelGetData (流通道, 接收数组, #BASS_DATA_FFT512)


.子程序 取媒体长度, 小数型, , 秒
.局部变量 Length, 整数型, , , 
.局部变量 Time, 小数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
赋值 (Length, BASS_ChannelGetLength (流通道, 0))
赋值 (Time, BASS_ChannelBytes2Seconds (流通道, Length)) ' 把Bytes转换成Seconds

返回 (Time)

.子程序 取媒体位置, 小数型, , 秒
.局部变量 Position, 整数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
赋值 (Position, BASS_ChannelGetPosition (流通道, 0))
返回 (BASS_ChannelBytes2Seconds (流通道, Position))

.子程序 置媒体位置, 逻辑型, , 
.参数 媒体位置, 小数型, , 时间：秒

.局部变量 Position, 整数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
赋值 (Position, BASS_ChannelSeconds2Bytes (流通道, 媒体位置))
返回 (BASS_ChannelSetPosition (流通道, Position, 0))

.子程序 取音量, 小数型, , 
.局部变量 音量, 小数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
BASS_ChannelGetAttribute (流通道, #BASS_ATTRIB_VOL, 音量)
返回 (音量)

.子程序 置音量, 逻辑型, , 
.参数 音量, 小数型, , 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelSetAttribute (流通道, #BASS_ATTRIB_VOL, 音量))


.子程序 取媒体状态, 整数型, , 0:未打开，1:播放，2:失控，3:暂停
.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
返回 (BASS_ChannelIsActive (流通道))

.子程序 置播放速度, 逻辑型, , 
.参数 播放速度, 小数型, , 1为原速

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelSlideAttribute (流通道, #BASS_ATTRIB_FREQ, 相乘 (播放速度, 默认速度), 0))

.子程序 取播放速度, 小数型, , 
.局部变量 播放速度, 小数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
BASS_ChannelGetAttribute (流通道, #BASS_ATTRIB_FREQ, 播放速度)
返回 (播放速度)

.子程序 置均衡器, 逻辑型, , 
.参数 通道, 整数型, , 1～10
.参数 中心频率, 整数型, , 
.参数 频率宽度, 整数型, , 
.参数 值, 整数型, , -15～15

.局部变量 parameq, BASS_DX8_PARAMEQ, , , 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
赋值 (parameq.fBandwidth, 频率宽度)
赋值 (parameq.fCenter, 中心频率)
赋值 (parameq.fGain, 值)
返回 (BASS_FXSetParameters_DX8_PARAMEQ (均衡器效果句柄 [通道], parameq))

.子程序 取均衡器, BASS_DX8_PARAMEQ, , 
.参数 通道, 整数型, , 1～10

.局部变量 parameq, BASS_DX8_PARAMEQ, , , 

.如果真 (等于 (流通道, 0))
    返回 (parameq)
.如果真结束
BASS_FXGetParameters_DX8_PARAMEQ (通道, parameq)
返回 (parameq)

.子程序 置完毕通知, 逻辑型, , 
.参数 回调函数指针, 子程序指针, , 
.参数 尝试次数, 整数型, 可空, 默认5次

.局部变量 X, 整数型, , , 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
.如果真 (是否为空 (尝试次数))
    赋值 (尝试次数, 5)
.如果真结束
.循环判断首 ()
    赋值 (X, 相加 (X, 1))
    .如果真 (大于 (X, 尝试次数))
        返回 (假)
    .如果真结束
    赋值 (回调函数句柄, BASS_ChannelSetSync (流通道, #BASS_SYNC_END, 0, 回调函数指针, 0))
.循环判断尾 (等于 (回调函数句柄, 0))
返回 (真)




.子程序 移除通知, 逻辑型, , 
.参数 流通道_, 整数型, 可空, 

.如果真 (等于 (流通道, 0))
    返回 (假)
.如果真结束
.如果真 (等于 (回调函数句柄, 0))
    返回 (假)
.如果真结束
返回 (BASS_ChannelRemoveSync (选择 (是否为空 (流通道_), 流通道, 流通道_), 回调函数句柄))

.子程序 取通道信息, BASS_CHANNELINFO, 公开, 
.局部变量 通道信息, BASS_CHANNELINFO, , , 

.如果真 (等于 (流通道, 0))
    返回 (通道信息)
.如果真结束
BASS_ChannelGetInfo (流通道, 通道信息)
返回 (通道信息)

.子程序 取波形数据, 整数型, , 
.参数 接收数组, 小数型, 参考 数组, 
.参数 数据个数, 整数型, , 

.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
返回 (BASS_ChannelGetData (流通道, 接收数组, 位或 (#BASS_DATA_FLOAT, 相乘 (数据个数, 4)))) ' 4是小数型的尺寸

.子程序 置回声信息, 空白型, , 
.参数 回声信息, BASS_DX8_REVERB, , 

.如果真 (等于 (流通道, 0))
    返回 ()
.如果真结束
BASS_FXSetParameters_DX8_REVERB (回声效果句柄, 回声信息)

.子程序 取回声信息, BASS_DX8_REVERB, , 
.局部变量 回声信息, BASS_DX8_REVERB, , , 

.如果真 (等于 (流通道, 0))
    返回 (回声信息)
.如果真结束
BASS_FXGetParameters_DX8_REVERB (回声效果句柄, 回声信息)
返回 (回声信息)

.子程序 取平均比特率, 小数型, , 
.如果真 (等于 (流通道, 0))
    返回 (0)
.如果真结束
返回 (相除 (相减 (BASS_StreamGetFilePosition (流通道, #BASS_FILEPOS_END), BASS_StreamGetFilePosition (流通道, #BASS_FILEPOS_START)), 相加 (相乘 (125, 取媒体长度 ()), 0.5)))


.窗口程序集 均衡器窗程序集, , , 

.程序集变量 可见_预设, 逻辑型, , , 
.程序集变量 旧过程号, 整数型, , , 
.程序集变量 系统菜单, 整数型, , , 
.程序集变量 子菜单1, 整数型, , , 
.程序集变量 匿名程序集变量_19507, 空白型, , , 
.子程序 _均衡器窗_被显示, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (4, 真)
.如果真结束
赋值 (可见_预设, 真)

.子程序 _均衡器窗_被隐藏, 空白型, , 
.如果真 (是否已经开始吸附 ())
    设置窗口活动性 (4, 假)
.如果真结束


.子程序 _均衡器窗_可否被关闭, 逻辑型, , 
赋值 (均衡器窗., 假)
赋值 (可见_预设, 假)
刷新按钮_均衡器窗 (假) ' 主窗口上方按钮更改为放开
返回 (假)

.子程序 _均衡器窗_获得焦点, 空白型, , 
依次显示窗口 (4)

.子程序 _均衡器窗_创建完毕, 空白型, , 
应用皮肤 (均衡器窗.取窗口句柄 (), 1)
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

赋值 (.画板背景色, #底色)
相加 (0, 2).定位写出 (0, “31”)
相加 (相乘 (22, 1), 2).定位写出 (0, “62”)
相乘 (22, 2).定位写出 (0, “125”)
相乘 (22, 3).定位写出 (0, “250”)
相乘 (22, 4).定位写出 (0, “500”)
相加 (相乘 (22, 5), 2).定位写出 (0, “1k”)
相加 (相乘 (22, 6), 2).定位写出 (0, “2k”)
相加 (相乘 (22, 7), 2).定位写出 (0, “4k”)
相加 (相乘 (22, 8), 2).定位写出 (0, “8k”)
相乘 (22, 9).定位写出 (0, “16k”)

赋值 (系统菜单, GetSystemMenu (取窗口句柄 (), 假))
AppendMenuA (系统菜单, #, 0, “”)
AppendMenuA (系统菜单, #, 1, “重置均衡器”)
AppendMenuA (系统菜单, #, 2, “”)
AppendMenuA (系统菜单, #, 3, “加大当前效果”)
AppendMenuA (系统菜单, #, 4, “减小当前效果”)
赋值 (子菜单1, CreatePopupMenu ())


AppendMenuA (系统菜单, #, 子菜单1, “预设”)
AppendMenuA (子菜单1, #, 11, “古典”)
AppendMenuA (子菜单1, #, 12, “流行”)
AppendMenuA (子菜单1, #, 13, “爵士”)
AppendMenuA (子菜单1, #, 14, “摇滚”)
AppendMenuA (子菜单1, #, 15, “柔和”)
AppendMenuA (子菜单1, #, 16, “重低音”)
AppendMenuA (子菜单1, #, 17, “消除低音”)
AppendMenuA (子菜单1, #, 18, “弱化高音”)
赋值 (旧过程号, SetWindowLong (均衡器窗.取窗口句柄 (), -4, 到数值 (&消息处理子程序_均衡器窗)))



.子程序 刷新均衡器条状态, 空白型, , 
连续赋值 (取反 (正在使用BASS引擎), .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止, .禁止) ' MCI不支持均衡器和回声


.子程序 _滑块条1_位置被改变, 空白型, , 
应用均衡器 (1)

.子程序 _滑块条2_位置被改变, 空白型, , 
应用均衡器 (2)

.子程序 _滑块条3_位置被改变, 空白型, , 
应用均衡器 (3)

.子程序 _滑块条4_位置被改变, 空白型, , 
应用均衡器 (4)

.子程序 _滑块条5_位置被改变, 空白型, , 
应用均衡器 (5)

.子程序 _滑块条6_位置被改变, 空白型, , 
应用均衡器 (6)

.子程序 _滑块条7_位置被改变, 空白型, , 
应用均衡器 (7)

.子程序 _滑块条8_位置被改变, 空白型, , 
应用均衡器 (8)

.子程序 _滑块条9_位置被改变, 空白型, , 
应用均衡器 (9)

.子程序 _滑块条10_位置被改变, 空白型, , 
应用均衡器 (10)

.子程序 _滑块条_变速_位置被改变, 空白型, , 
应用变速 ()

.子程序 消息处理子程序_均衡器窗, 空白型, , 
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 IParam, 整数型, , 

.判断开始 (等于 (Msg, #)) ' 系统命令
    .判断开始 (等于 (wParam, 1))
        重置均衡器 ()
        应用均衡器 (0)
        
    .判断 (等于 (wParam, 3))
        调整均衡器效果 (2)
    .判断 (等于 (wParam, 4))
        调整均衡器效果 (0.5)
    .判断 (等于 (wParam, 11))
        应用预设均衡器 (#均衡器_古典)
    .判断 (等于 (wParam, 12))
        应用预设均衡器 (#均衡器_流行)
    .判断 (等于 (wParam, 13))
        应用预设均衡器 (#均衡器_爵士)
    .判断 (等于 (wParam, 14))
        应用预设均衡器 (#均衡器_摇滚)
    .判断 (等于 (wParam, 15))
        应用预设均衡器 (#均衡器_柔和)
    .判断 (等于 (wParam, 16))
        应用预设均衡器 (#均衡器_重低音)
    .判断 (等于 (wParam, 17))
        应用预设均衡器 (#均衡器_消除低音)
    .判断 (等于 (wParam, 18))
        应用预设均衡器 (#均衡器_弱化高音)
    .默认
        
    .判断结束
    
.默认
    
.判断结束

CallWindowProc (旧过程号, hWnd, Msg, wParam, IParam)

.子程序 重置均衡器, 空白型, , 
连续赋值 (相除 (.最大位置, 2), .位置, .位置, .位置, .位置, .位置, .位置, .位置, .位置, .位置, .位置)
应用均衡器 (0)

.子程序 调整均衡器效果, 空白型, , 可选择放大或缩小
.参数 值, 小数型, , 1为不变，比如2是放大一倍，0.5是减小一半

.局部变量 超出范围, 逻辑型, , , 
.局部变量 可调最小值, 小数型, , , 指定幅度最大的滑块最多可以调多少倍
.局部变量 可调值, 小数型, , , 

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 可调值)

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

赋值 (超出范围, 或者 (超出范围, 大于 (取绝对值 (相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)), 相除 (.最大位置, 2))))
赋值 (可调值, 相除 (.最大位置, 2, 取绝对值 (相减 (.位置, 相除 (.最大位置, 2)))))
赋值 (可调最小值, 选择 (小于 (可调值, 可调最小值), 可调值, 可调最小值))

.如果真 (超出范围)
    赋值 (值, 可调最小值)
.如果真结束
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))
赋值 (.位置, 相加 (相除 (.最大位置, 2), 相乘 (相减 (.位置, 相除 (.最大位置, 2)), 值)))

应用均衡器 (0)

.子程序 应用预设均衡器, 空白型, , 将预设方案载入
.参数 预设值, 文本型, , 以“|”区分，共10个值

.局部变量 分割数组, 文本型, , "0", 

赋值 (分割数组, 分割文本 (预设值, “|”, ))
.如果真 (小于 (取数组成员数 (分割数组), 10))
    返回 ()
.如果真结束
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [1])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [2])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [3])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [4])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [5])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [6])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [7])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [8])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [9])), 15), 30), .最大位置))
赋值 (均衡器窗..位置, 相乘 (相除 (相加 (负 (到数值 (分割数组 [10])), 15), 30), .最大位置))
应用均衡器 (0)

.子程序 _滑块条_回声强度_位置被改变, 空白型, , 
应用回声 ()

.子程序 _滑块条_回声时间_位置被改变, 空白型, , 
应用回声 ()

.子程序 _滑块条1_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条2_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条3_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条4_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条5_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条6_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条7_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条8_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条9_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条10_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条_变速_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条_回声强度_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _滑块条_回声时间_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _按钮_标准均衡器_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _按钮_其他混音_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.判断开始 (回调函数_快捷键事件 (功能键状态, 键代码))
    返回 (假)
.默认
    
.判断结束


.子程序 _按钮_标准均衡器_被单击, 空白型, , 
赋值 (.可视, 真)
赋值 (.可视, 假)
赋值 (.禁止, 真)
赋值 (.禁止, 假)

.子程序 _按钮_其他混音_被单击, 空白型, , 
赋值 (.可视, 假)
赋值 (.可视, 真)
赋值 (.禁止, 假)
赋值 (.禁止, 真)


.类模块 高级对话框, , , 作者：小飞侠 本命令参考了lihaidomain的源码，在此表示感谢！(同时需要感谢binbinbin的整理！)

.子程序 初始化, 空白型, , 初始化设置高级对话框组件的基本参数
.参数 对话框类型, 整数型, , 0.#打开文件对话框(默认)  1.#保存文件对话框
.参数 对话框标题, 文本型, 可空, 对话框窗口标题，如为空则显示默认文本；
.参数 过滤器, 文本型, 可空, 例如：“MP3文件（*.mp3）|*.mp3|mpg文件（*.mpg）|*.mpg”，如为空值则默认显示所有文件；
.参数 初始过滤器, 整数型, 可空, 指定初始的过滤器，0为第一个过滤器。默认值为0；
.参数 初始目录, 文本型, 可空, 对话框创建后，自动跳转到的目录。如不指定，则一般情况下默认路径为从“我的文档”开始；
.参数 默认文件名, 文本型, 可空, 对话框创建后，默认显示的文件名名称，多用于[保存文件对话框]，如自行指定，请不需要指定扩展名，扩展名将以当前使用的过滤器为准；
.参数 创建时提示, 逻辑型, 可空, 当类型为打开文件对话框时，如果用户指定了一个不存在的文件名称，是否提示用户即将创建它。默认值为真。
.参数 文件必须存在, 逻辑型, 可空, 当类型为打开文件对话框时，是否允许用户指定一个不存在的文件。默认值为真。
.参数 文件覆盖提示, 逻辑型, 可空, 当类型为保存文件对话框时，如果用户指定了一个已经存在的文件，是否询问用户确定覆盖此文件。默认值为真。
.参数 目录必须存在, 逻辑型, 可空, 是否允许用户指定一个不存在的目录。默认值为真。
.参数 是否支持多选, 逻辑型, 可空, 是否允许当前对话框同时打开多个文件。默认值为假。



.子程序 打开, 逻辑型, , 打开当前类型的对话框(通过[初始化]命令进行设置)，返回一个逻辑值。如果为真，表示用户已通过该对话框输入了有效数据，否则表示用户取消了该对话框，且没有输入任何有效数据。


.子程序 文件名, 文本型, , 返回被打开或关闭的文件名。如为多选状态，文件路径以";"分隔。


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 高级信息框, 整数型, , 作者：小飞侠 本信息框支持总在最前和自动关闭特性。当信息框仅具备确认钮且指定显示时间参数时，无论是否操作均返回#确认钮，其它返回值与易语言信息框通用。
.参数 提示信息, 文本型, , 提示信息只能为文本。如果提示信息为文本且包含多行，可在各行之间用回车符 (即“字符 (13)”)、换行符 (即“字符 (10)”) 或回车换行符的组合 (即：“字符 (13) + 字符 (10)”) 来分隔。
.参数 按钮类型, 整数型, 可空, 第一组（描述对话框中显示按钮的类型与数目）：0、#确认钮 1、#确认取消钮 2、#放弃重试忽略钮 3、#取消是否钮 4、#是否钮 5、#重试取消钮；第二组（描述图标的样式）：16、#错误图标 32、#询问图标 48、#警告图标 64、#信息图标；默认为#确认钮
.参数 窗口标题, 文本型, 可空, 信息框的标题文本，默认显示“信息：”。
.参数 显示时间, 整数型, 可空, 指定信息框的显示时间，单位为毫秒(1秒=1000毫秒)，默认一直显示。



.子程序 高级浏览文件夹, 文本型, , 打开高级浏览文件夹对话框并返回当前用户选择的文件夹或文件名。如果用户取消操作或选择错误，将返回空值。
.参数 窗口标题, 文本型, 可空, 指定当对话框创建后，显示的标题文字。
.参数 初始目录, 文本型, 可空, 指定当对话框创建后，自动跳转到的目录。
.参数 是否显示文件, 逻辑型, 可空, 默认为假
.参数 是否显示地址栏, 逻辑型, 可空, 默认为真
.参数 是否使用新样式, 逻辑型, 可空, 默认为真



.子程序 高级颜色选择器, 整数型, , 打开高级颜色选择器对话框并返回用户所选择的颜色值，如颜色选择器被取消将返回参数[默认颜色]。
.参数 默认颜色, 整数型, 可空, 颜色选择对话框中的初始颜色，如果为空，默认为黑色
.参数 自定义颜色, 整数型, 可空 数组, 设置颜色窗口下部的16个自定义颜色，如果为空，则不设置



.程序集 窗体显示程序集_主窗口, , , 

.程序集变量 hWnd, 整数型, , , 
.程序集变量 hdc, 整数型, , , 
.程序集变量 mdc, 整数型, , , 
.程序集变量 rect, Gdip矩形I, , , 显示区（画板）
.程序集变量 视觉效果区, Gdip矩形I, , , 视觉效果显示区域
.程序集变量 时间区, Gdip矩形I, , , 时间显示区
.程序集变量 信息区, Gdip矩形I, , , 信息显示区（上方）
.程序集变量 bmp, 整数型, , , 
.程序集变量 obmp, 整数型, , , 
.程序集变量 Gdip, 整数型, , , 
.程序集变量 刷子_柱子, 整数型, , , 
.程序集变量 刷子_波峰, 整数型, , , 
.程序集变量 刷子_显示区底色, 整数型, , , 
.程序集变量 刷子_透明底色, 整数型, , , 用于波形淡出效果
.程序集变量 匿名程序集变量_20879, 空白型, , , 
.程序集变量 字体_信息, 整数型, , , 
.程序集变量 字体族_宋体, 整数型, , , 
.程序集变量 刷子_信息文本, 整数型, , , 
.程序集变量 刷子_信息底色, 整数型, , , 
.程序集变量 字体_时间, 整数型, , , 
.程序集变量 画笔_波形, 整数型, , , 
.程序集变量 文本格式, 整数型, , , 具有“不换行”属性
.程序集变量 歌曲信息, 文本型, , "0", 歌曲信息，在主窗口顶端滚动显示
.程序集变量 视觉效果需要重画, 逻辑型, , , 
.程序集变量 时间区频谱最大高度, 整数型, , , 
.程序集变量 匿名程序集变量_20949, 空白型, , , 
.程序集变量 常量_信息区高度, 整数型, , , 
.程序集变量 常量_信息区宽度, 整数型, , , 
.程序集变量 常量_总画板高度, 整数型, , , 
.程序集变量 常量_总画板宽度, 整数型, , , 
.程序集变量 常量_时间区宽度, 整数型, , , 
.程序集变量 常量_时间区高度, 整数型, , , 
.子程序 Gdip引擎装载, 逻辑型, , 装载GDI+引擎，每个程序中只要装载一次就可以了，如果已经装载过就不需要再装载一遍了
.局部变量 StartupInput, GdiplusStartupInput, , , 

.如果真 (不等于 (token, 0))
    返回 (假)
.如果真结束
赋值 (StartupInput.GdiplusVersion, 1)
返回 (等于 (GdiplusStartup (token, StartupInput, 0), 0))

.子程序 Gdip引擎卸载, 空白型, , 卸载GDI+引擎，如果还需要调用GDI+可以不卸载
.如果真 (不等于 (token, 0))
    GdiplusShutdown (token)
    赋值 (token, 0)
.如果真结束


.子程序 填充矩形I, 空白型, , GdipFillRectangleI
.参数 刷子_, 整数型, , 
.参数 矩形, Gdip矩形I, , 

GdipFillRectangleI (Gdip, 刷子_, 矩形.左边, 矩形.顶边, 相减 (矩形.右边, 矩形.左边), 相减 (矩形.底边, 矩形.顶边))

.子程序 画文本, 空白型, , 
.参数 文本, 文本型, , 
.参数 字体_, 整数型, , 
.参数 刷子, 整数型, , 
.参数 文本区域, Gdip矩形2, , 

.局部变量 宽字符, 字节集, , , 

赋值 (宽字符, A2W (文本))
GdipDrawString (Gdip, 宽字符, lstrlenw (宽字符), 字体_, 文本区域, 文本格式, 刷子)

.子程序 初始化主窗口显示, 空白型, , 
.局部变量 渐变刷子矩形, Gdip矩形2, , , 

Gdip引擎装载 ()

赋值 (hWnd, 主窗口.取窗口句柄 (.))
赋值 (hdc, 取设备场景_ (hWnd))
赋值 (mdc, 创建内存场景_ (hdc)) ' 建立后台场景
取窗口矩形_ (hWnd, rect)
赋值 (bmp, 创建设备位图_ (hdc, 相加 (相减 (rect.右边, rect.左边), 1), 相加 (相减 (rect.底边, rect.顶边), 1)))
赋值 (obmp, 选入设备场景_ (mdc, bmp))
设置背景模式_ (mdc, 1)
GdipCreateFromHDC (mdc, Gdip)

GdipGraphicsClear (Gdip, RGB转ARGB (#加深底色))


赋值 (视觉效果区.左边, rect.左边)
赋值 (视觉效果区.顶边, rect.顶边)
赋值 (视觉效果区.右边, rect.右边)
赋值 (视觉效果区.底边, rect.底边)

GdipCreateSolidFill (RGB转ARGB (#加深底色), 刷子_显示区底色)
GdipCreateSolidFill (RGB转ARGB (#加深底色, 90), 刷子_透明底色)

重设颜色_视觉效果 ()


赋值 (时间区频谱最大高度, 23)

赋值 (时间区.左边, 相加 (rect.左边, 152))
赋值 (时间区.顶边, rect.顶边)
赋值 (时间区.右边, rect.右边)
赋值 (时间区.底边, 相减 (rect.底边, 时间区频谱最大高度))

赋值 (信息区.左边, rect.左边)
赋值 (信息区.顶边, rect.顶边)
赋值 (信息区.右边, rect.右边)
赋值 (信息区.底边, 相加 (rect.顶边, 12))

GdipCreateFontFamilyFromName (A2W (“宋体”), 0, 字体族_宋体)
GdipCreateFont (字体族_宋体, 12, 0, 0, 字体_信息)
GdipCreateSolidFill (RGB转ARGB (#黑色), 刷子_信息文本)
赋值 (渐变刷子矩形.左边, 0)
赋值 (渐变刷子矩形.顶边, 0)
赋值 (渐变刷子矩形.宽度, 相减 (信息区.右边, 信息区.左边))
赋值 (渐变刷子矩形.高度, 相减 (信息区.底边, 信息区.顶边))
GdipCreateSolidFill (RGB转ARGB (#蓝色, 40), 刷子_信息底色)



GdipCreateFont (字体族_宋体, 22, 0, 0, 字体_时间)


GdipCreateStringFormat (4096, 0, 文本格式) ' 不换行

清空视觉效果 ()

.子程序 重设颜色_视觉效果, 空白型, , 更改颜色时调用
.局部变量 渐变刷子矩形, Gdip矩形2, , , 

.如果真 (不等于 (画笔_波形, 0))
    GdipDeletePen (画笔_波形)
.如果真结束
.如果真 (不等于 (刷子_柱子, 0))
    GdipDeleteBrush (刷子_柱子)
.如果真结束
.如果真 (不等于 (刷子_波峰, 0))
    GdipDeleteBrush (刷子_波峰)
.如果真结束


GdipCreatePen1 (RGB转ARGB (播放器设置.波形_颜色值, 播放器设置.波形_颜色浓度), 播放器设置.波形_画笔粗细, 0, 画笔_波形)

赋值 (渐变刷子矩形.左边, 0)
赋值 (渐变刷子矩形.顶边, 0)
赋值 (渐变刷子矩形.宽度, 相减 (rect.右边, rect.左边))
赋值 (渐变刷子矩形.高度, 相减 (rect.底边, rect.顶边))
GdipCreateLineBrushFromRect (渐变刷子矩形, RGB转ARGB (播放器设置.频谱_颜色上_颜色值, 播放器设置.频谱_颜色上_浓度), RGB转ARGB (播放器设置.频谱_颜色下_颜色值, 播放器设置.频谱_颜色下_浓度), 1, 0, 刷子_柱子)
GdipCreateSolidFill (RGB转ARGB (#灰色, 170), 刷子_波峰)
视觉效果需要重画 ()

.子程序 全部取绝对值, 空白型, , 
.参数 数组, 小数型, 参考 数组, 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (数组), 1, X)
    .如果真 (小于 (数组 [X], 0)) ' 是正数就不用了
        赋值 (数组 [X], 负 (数组 [X]))
    .如果真结束
    
.变量循环尾 ()

.子程序 RGB转ARGB, 整数型, , 
.参数 参数_RGB, 整数型, , 
.参数 参数_透明度, 字节型, 可空, 默认为255，不透明。

.局部变量 Color, 字节集, , , 
.局部变量 temp, 字节型, , , 

.如果真 (是否为空 (参数_透明度))
    赋值 (参数_透明度, 255)
.如果真结束
赋值 (Color, 到字节集 (参数_RGB))
赋值 (temp, Color [1])
赋值 (Color [1], Color [3])
赋值 (Color [3], temp)
赋值 (Color [4], 参数_透明度)
 ' 参数_RGB ＝ 位或 (Color [3] ＋ Color [2] × 256 ＋ Color [1] × 65536, 左移 (参数_透明度, 24))  ' 转换成GDI+的颜色值
返回 (取字节集数据 (Color, #整数型, ))

.子程序 均值微缩, 空白型, , 
.参数 频谱信息, 小数型, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 结果数组, 小数型, , "0", 
.局部变量 当前均值, 小数型, , , 

.变量循环首 (1, 取数组成员数 (频谱信息), 1, X)
    赋值 (当前均值, 相加 (当前均值, 频谱信息 [X]))
    .如果真 (等于 (求余数 (X, 3), 0))
        赋值 (当前均值, 相除 (当前均值, 3))
        加入成员 (结果数组, 当前均值)
        赋值 (当前均值, 0)
    .如果真结束
    
.变量循环尾 ()
赋值 (频谱信息, 结果数组)

.子程序 往中靠拢, 空白型, , 
.参数 数组, 小数型, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 平均值, 小数型, , , 

.变量循环首 (1, 取数组成员数 (数组), 1, X)
    赋值 (数组 [X], 求平方根 (数组 [X]))
.变量循环尾 ()

.子程序 清空视觉效果, 空白型, , 
.参数 淡出, 逻辑型, 可空, 默认否

.局部变量 通用矩形, Gdip矩形I, , , 

.如果真 (是否为空 (淡出))
    赋值 (淡出, 假)
.如果真结束
赋值 (通用矩形.左边, 0)
赋值 (通用矩形.顶边, 0)
赋值 (通用矩形.右边, 相减 (视觉效果区.右边, 视觉效果区.左边))
赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边))

填充矩形I (选择 (淡出, 刷子_透明底色, 刷子_显示区底色), 通用矩形)

赋值 (通用矩形.左边, 相减 (时间区.左边, rect.左边))
赋值 (通用矩形.顶边, 相减 (时间区.底边, rect.顶边))
赋值 (通用矩形.右边, 相减 (时间区.右边, rect.左边))
赋值 (通用矩形.底边, 相减 (rect.底边, rect.顶边))

填充矩形I (选择 (淡出, 刷子_透明底色, 刷子_显示区底色), 通用矩形)


.子程序 刷新频谱, 空白型, , 
.局部变量 频谱信息, 小数型, , "512", 
.局部变量 X, 整数型, , , 
.局部变量 柱高度_显示, 小数型, 静态, "200", 实际显示的高度
.局部变量 柱高度_衰减速度, 小数型, 静态, "200", 
.局部变量 波峰高度_显示, 小数型, 静态, "200", 显示的波峰高度
.局部变量 波峰高度_衰减速度, 小数型, 静态, "200", 
.局部变量 要刷新的高度_柱, 整数型, , , 根据计算和对比，最终需要显示的高度
.局部变量 要刷新的高度_峰, 整数型, , , 
.局部变量 通用矩形, Gdip矩形I, , , 
.局部变量 媒体状态, 整数型, , , 
.局部变量 不取频谱信息, 逻辑型, , , 仅仅重绘
.局部变量 上次柱高度, 整数型, , , 
.局部变量 上次波峰高度, 整数型, , , 


赋值 (媒体状态, 播放控制2.取媒体状态 ())
.如果真 (等于 (媒体状态, 3)) ' 暂停
    赋值 (不取频谱信息, 真)
.如果真结束
.如果真 (或者 (等于 (媒体状态, 0), 等于 (媒体状态, 2))) ' 停止/未打开
    清空视觉效果 ()
    返回 ()
.如果真结束



.如果 (取反 (不取频谱信息))
    播放控制2.取频谱数据 (频谱信息)
    重定义数组 (频谱信息, 真, 200) ' 裁剪数组
    全部取绝对值 (频谱信息)
    .如果真 (播放器设置.频谱_显示粗状)
        均值微缩 (频谱信息) ' 只显示一小部分，所以每隔几个取平均值
        
    .如果真结束
    往中靠拢 (频谱信息) ' 防止有些频谱柱过高
    
.否则
    .如果 (播放器设置.频谱_显示粗状)
        重定义数组 (频谱信息, 真, 相除 (200, 3))
    .否则
        重定义数组 (频谱信息, 真, 200)
    .如果结束
    
.如果结束

清空信息区 ()
.如果真 (视觉效果需要重画)
    清空视觉效果 ()
    .变量循环首 (1, 取数组成员数 (波峰高度_显示), 1, X)
        赋值 (柱高度_显示 [X], -1)
        赋值 (波峰高度_显示 [X], -1)
    .变量循环尾 ()
    
.如果真结束
.变量循环首 (1, 取数组成员数 (频谱信息), 1, X)
     ' 预设本次循环所需的矩形
    .如果 (播放器设置.频谱_显示粗状)
        赋值 (通用矩形.左边, 相乘 (相减 (X, 1), 3))
        赋值 (通用矩形.右边, 相加 (相乘 (相减 (X, 1), 3), 2))
    .否则
        赋值 (通用矩形.左边, 相减 (X, 1))
        赋值 (通用矩形.右边, 相加 (相减 (X, 1), 1))
        
    .如果结束
    
    赋值 (上次柱高度, 相乘 (柱高度_显示 [X], 相减 (视觉效果区.底边, 视觉效果区.顶边), #放大倍数)) ' 备份
    赋值 (上次波峰高度, 相加 (相乘 (波峰高度_显示 [X], 相减 (视觉效果区.底边, 视觉效果区.顶边), #放大倍数), 1))
    
    
    
    .如果真 (取反 (不取频谱信息))
         ' 此分支计算衰减效果
        赋值 (柱高度_衰减速度 [X], 相加 (柱高度_衰减速度 [X], 相除 (#频谱柱衰减加速度, #放大倍数))) ' 加速度
        赋值 (波峰高度_衰减速度 [X], 相加 (波峰高度_衰减速度 [X], 相除 (#频谱波峰衰减加速度, #放大倍数)))
        赋值 (波峰高度_显示 [X], 相减 (波峰高度_显示 [X], 波峰高度_衰减速度 [X])) ' 衰减
        赋值 (柱高度_显示 [X], 相减 (柱高度_显示 [X], 柱高度_衰减速度 [X]))
        .如果真 (小于 (柱高度_显示 [X], 0))
            赋值 (柱高度_显示 [X], 0)
        .如果真结束
        .如果真 (小于 (波峰高度_显示 [X], 0))
            赋值 (波峰高度_显示 [X], 0)
        .如果真结束
        .如果真 (大于 (频谱信息 [X], 柱高度_显示 [X])) ' 若此次柱子高于上次
            赋值 (柱高度_显示 [X], 频谱信息 [X]) ' “冲”上去
            赋值 (柱高度_衰减速度 [X], 相除 (#频谱柱衰减速度, #放大倍数)) ' 复位衰减速度
        .如果真结束
        .如果真 (大于 (柱高度_显示 [X], 波峰高度_显示 [X]))
            赋值 (波峰高度_显示 [X], 柱高度_显示 [X])
            赋值 (波峰高度_衰减速度 [X], 相除 (#频谱波峰衰减速度, #放大倍数))
            
        .如果真结束
        
    .如果真结束
    
     ' 更新实际显示高度
    赋值 (要刷新的高度_柱, 相乘 (柱高度_显示 [X], 相减 (视觉效果区.底边, 视觉效果区.顶边), #放大倍数))
    赋值 (要刷新的高度_峰, 相加 (相乘 (波峰高度_显示 [X], 相减 (视觉效果区.底边, 视觉效果区.顶边), #放大倍数), 1)) ' 加1是为了与柱子保持距离
    
    
     ' 先擦除上次波峰
    .如果真 (不等于 (上次波峰高度, 要刷新的高度_峰))
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 上次波峰高度, 选择 (播放器设置.频谱_显示粗状, 2, 1))) ' 粗频谱则显示厚波峰
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 上次波峰高度))
        填充矩形I (刷子_显示区底色, 通用矩形)
        
    .如果真结束
    
    
    
     ' 刷新频谱柱
    .判断开始 (大于 (要刷新的高度_柱, 上次柱高度))
         ' 比上次高，仅刷新高出的那部分
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_柱))
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 上次柱高度))
        填充矩形I (刷子_柱子, 通用矩形)
    .判断 (小于 (要刷新的高度_柱, 上次柱高度))
         ' 比上次低，擦除多余的部分
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 上次柱高度))
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_柱))
        填充矩形I (刷子_显示区底色, 通用矩形)
        
    .默认
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_柱)) ' 相等的话也要赋值，因为下面的重新填充需要执行
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_柱))
    .判断结束
    
    
    
    .如果真 (并且 (大于 (通用矩形.右边, 相减 (时间区.左边, rect.左边)), 大于或等于 (要刷新的高度_柱, 时间区频谱最大高度))) ' 画到了时间区，则超过的那部分必须重画
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_柱))
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 时间区频谱最大高度))
        填充矩形I (刷子_柱子, 通用矩形)
        
    .如果真结束
    .如果真 (小于 (通用矩形.顶边, 相减 (信息区.底边, rect.顶边))) ' 画到了信息区，也要重画
        赋值 (通用矩形.底边, 相减 (信息区.底边, rect.顶边))
         ' 输出调试文本 (通用矩形.底边)
        填充矩形I (刷子_柱子, 通用矩形)
        
    .如果真结束
    
    
    
    
     ' 显示波峰
    .如果真 (或者 (不等于 (上次波峰高度, 要刷新的高度_峰), 并且 (大于 (通用矩形.右边, 相减 (时间区.左边, rect.左边)), 大于或等于 (要刷新的高度_峰, 时间区频谱最大高度)), 小于 (相减 (rect.底边, rect.顶边, 要刷新的高度_峰), 相减 (信息区.底边, rect.顶边)))) ' 画到了时间区或信息区，必须刷新
        赋值 (通用矩形.顶边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_峰, 选择 (播放器设置.频谱_显示粗状, 2, 1)))
        赋值 (通用矩形.底边, 相减 (视觉效果区.底边, 视觉效果区.顶边, 要刷新的高度_峰))
        填充矩形I (刷子_波峰, 通用矩形)
        
    .如果真结束
    
    
    
.变量循环尾 ()
.如果真 (视觉效果需要重画)
    赋值 (视觉效果需要重画, 假)
.如果真结束


.子程序 刷新波形, 空白型, , 
.局部变量 波形信息, 小数型, 静态, "1024", 
.局部变量 X, 整数型, , , 
.局部变量 通用矩形, Gdip矩形I, , , 
.局部变量 媒体状态, 整数型, , , 
.局部变量 不取解码信息, 逻辑型, , , 仅仅重绘


赋值 (媒体状态, 播放控制2.取媒体状态 ())
.如果真 (等于 (媒体状态, 3)) ' 暂停
    赋值 (不取解码信息, 真)
.如果真结束
.如果真 (或者 (等于 (媒体状态, 0), 等于 (媒体状态, 2))) ' 停止/未打开
    清空视觉效果 ()
    清空时间区 () ' 这里需要额外加一个，因为当停止/未打开时不会显示波形，若不直接清空，会造成信息区右方颜色加深
    返回 ()
.如果真结束



.如果真 (取反 (不取解码信息))
    播放控制2.取波形数据 (波形信息, 1024)
.如果真结束
.如果真 (视觉效果需要重画)
    清空视觉效果 ()
    数组清零 (波形信息)
.如果真结束

清空信息区 ()
清空视觉效果 (播放器设置.波形_是否淡出)


.变量循环首 (1, 72, 1, X)
    赋值 (通用矩形.左边, 相乘 (相减 (X, 1), 3))
    赋值 (通用矩形.右边, 相乘 (X, 3))
    GdipDrawLineI (Gdip, 画笔_波形, 相乘 (相减 (X, 1), 3), 相加 (相除 (相乘 (波形信息 [相乘 (X, 13)], 相减 (rect.底边, rect.顶边)), 2.2), 相除 (相减 (rect.底边, rect.顶边), 2), 6), 相乘 (X, 3), 相加 (相除 (相乘 (波形信息 [相乘 (相加 (X, 1), 13)], 相减 (rect.底边, rect.顶边)), 2.2), 相除 (相减 (rect.底边, rect.顶边), 2), 6))
.变量循环尾 ()

.如果真 (视觉效果需要重画)
    赋值 (视觉效果需要重画, 假)
.如果真结束


.子程序 滚动显示歌曲信息, 空白型, , 此函数会自动计数，只需放在时钟里调用
.参数 重置项号, 逻辑型, 可空, 
.参数 显示下一项, 逻辑型, 可空, 当鼠标左击显示区时调用

.局部变量 项号, 整数型, 静态, , 
.局部变量 完成度, 小数型, 静态, , 0～11滑入，11～60稳定，60～71滑出
.局部变量 实际值, 整数型, 静态, , 可以不静态

.如果真 (是否为空 (重置项号))
    赋值 (重置项号, 假)
.如果真结束
.如果真 (是否为空 (显示下一项))
    赋值 (显示下一项, 假)
.如果真结束
.如果真 (重置项号)
    赋值 (项号, 1)
    赋值 (完成度, 0)
.如果真结束
.如果 (大于或等于 (取数组成员数 (歌曲信息), 1)) ' 至少一个
    .如果真 (显示下一项) ' 当单击了显示区时，直接跳到下一项
        .如果真 (大于 (完成度, 11)) ' 当前项已经完全滑入，显示下一项
            赋值 (项号, 相加 (项号, 1))
            .如果真 (大于 (项号, 取数组成员数 (歌曲信息)))
                赋值 (项号, 1)
            .如果真结束
            
        .如果真结束
        赋值 (完成度, 11)
        刷新信息区 (歌曲信息 [项号], 0)
        返回 ()
    .如果真结束
    赋值 (完成度, 相加 (完成度, 0.5))
    .如果真 (大于或等于 (完成度, 71))
        赋值 (完成度, 0)
        赋值 (项号, 相加 (项号, 1))
    .如果真结束
    .如果真 (大于 (项号, 取数组成员数 (歌曲信息)))
        赋值 (项号, 1)
    .如果真结束
    .判断开始 (小于或等于 (完成度, 11))
        赋值 (实际值, 相减 (取整 (完成度), 11))
    .判断 (并且 (大于 (完成度, 11), 小于 (完成度, 60)))
        赋值 (实际值, 0)
    .默认
        赋值 (实际值, 相减 (取整 (完成度), 60))
    .判断结束
    刷新信息区 (歌曲信息 [项号], 实际值)
.否则
    刷新信息区 (“”, 0) ' 若一个也没有，只好清空
.如果结束



.子程序 刷新信息区, 空白型, , 
.参数 要显示的信息, 文本型, , 
.参数 显示位置, 整数型, , 

.局部变量 文本矩形, Gdip矩形2, , , 
.局部变量 文本矩形I, Gdip矩形I, , , 

.如果真 (并且 (小于 (显示位置, 12), 大于 (显示位置, -12)))
    赋值 (文本矩形I.左边, 0)
    赋值 (文本矩形I.顶边, 0)
    赋值 (文本矩形I.右边, 相减 (信息区.右边, 信息区.左边))
    赋值 (文本矩形I.底边, 相减 (信息区.底边, 信息区.顶边))
    填充矩形I (刷子_信息底色, 文本矩形I)
    赋值 (文本矩形.左边, 0)
    赋值 (文本矩形.顶边, 显示位置)
    赋值 (文本矩形.宽度, 相乘 (12, 相加 (相除 (取文本长度 (要显示的信息), 2), 1)))
    
    赋值 (文本矩形.高度, 相减 (信息区.底边, 信息区.顶边, 显示位置))
    画文本 (要显示的信息, 字体_信息, 刷子_信息文本, 文本矩形)
    
.如果真结束


.子程序 刷新时间, 空白型, , 
.参数 时间, 文本型, , 

.局部变量 文本矩形, Gdip矩形2, , , 



赋值 (文本矩形.左边, 相减 (时间区.左边, rect.左边))
赋值 (文本矩形.顶边, 相加 (相减 (时间区.顶边, rect.顶边), 12))
赋值 (文本矩形.宽度, 相减 (时间区.右边, 时间区.左边))
赋值 (文本矩形.高度, 相减 (时间区.底边, 时间区.顶边))
画文本 (时间, 字体_时间, 刷子_信息文本, 文本矩形)


.子程序 清空信息区, 空白型, , 
.局部变量 通用矩形, Gdip矩形I, , , 


赋值 (通用矩形.左边, 相减 (信息区.左边, rect.左边))
赋值 (通用矩形.顶边, 相减 (信息区.顶边, rect.顶边))
赋值 (通用矩形.右边, 相减 (信息区.右边, rect.左边))
赋值 (通用矩形.底边, 相减 (信息区.底边, rect.顶边))

填充矩形I (刷子_显示区底色, 通用矩形)


.子程序 清空时间区, 空白型, , 
.参数 淡出, 逻辑型, 可空, 默认否

.局部变量 通用矩形, Gdip矩形I, , , 

.如果真 (是否为空 (淡出))
    赋值 (淡出, 假)
.如果真结束
赋值 (通用矩形.左边, 相减 (时间区.左边, rect.左边))
赋值 (通用矩形.顶边, 相减 (时间区.顶边, rect.顶边))
赋值 (通用矩形.右边, 相减 (时间区.右边, rect.左边))
赋值 (通用矩形.底边, 相减 (时间区.底边, rect.顶边))
填充矩形I (选择 (淡出, 刷子_透明底色, 刷子_显示区底色), 通用矩形)


.子程序 刷新显示_主窗口, 空白型, , 
复制场景位图_ (hdc, 0, 0, 相减 (rect.右边, rect.左边), 相减 (rect.底边, rect.顶边), mdc, 0, 0, 13369376) ' 刷新

.子程序 置歌曲信息, 空白型, , 
.参数 信息, 文本型, 数组, 

赋值 (歌曲信息, 信息)
滚动显示歌曲信息 (真) ' 更新了信息，要重新计数

.子程序 视觉效果需要重画, 空白型, , 停止过，或者换歌，或者切换视觉效果，则需要重画
赋值 (视觉效果需要重画, 真)

.程序集 窗体显示程序集_歌词窗, , , 

.程序集变量 hWnd, 整数型, , , 
.程序集变量 hdc, 整数型, , , 
.程序集变量 mdc, 整数型, , , 
.程序集变量 rect, Gdip矩形I, , , 
.程序集变量 bmp, 整数型, , , 
.程序集变量 obmp, 整数型, , , 
.程序集变量 Gdip, 整数型, , , 
.程序集变量 文本刷子_主体, 整数型, , , 
.程序集变量 覆盖刷子_上面, 整数型, , , 用于淡入
.程序集变量 覆盖刷子_下面, 整数型, , , 用于淡出
.程序集变量 歌词底色刷子, 整数型, , , 
.程序集变量 字体族, 整数型, , , 
.程序集变量 歌词字体, 整数型, , , 
.程序集变量 文本刷子_渐变, 整数型, , "7", 用于换行时的渐变色
.程序集变量 状态文本, 文本型, , , 
.程序集变量 中心行号_记录变量, 整数型, , , “刷新歌词”函数变量的备份
.程序集变量 偏移值_记录变量, 整数型, , , “刷新歌词”函数变量的备份
.程序集变量 高亮行号_记录变量, 整数型, , , “刷新歌词”函数变量的备份
.程序集变量 文本格式, 整数型, , , 
.子程序 初始化歌词窗显示, 空白型, , 
.局部变量 渐变刷子矩形, Gdip矩形I, , , 
.局部变量 X, 整数型, , , 

Gdip引擎装载 ()
赋值 (hWnd, 歌词窗.取窗口句柄 (.))
赋值 (hdc, 取设备场景_ (hWnd))
赋值 (mdc, 创建内存场景_ (hdc)) ' 建立后台场景
取窗口矩形_ (hWnd, rect)
赋值 (bmp, 创建设备位图_ (hdc, 相加 (相减 (rect.右边, rect.左边), 1), 相加 (相减 (rect.底边, rect.顶边), 1)))
赋值 (obmp, 选入设备场景_ (mdc, bmp))
设置背景模式_ (mdc, 1)
GdipCreateFromHDC (mdc, Gdip)



GdipCreateSolidFill (RGB转ARGB (#底色), 歌词底色刷子)


重设颜色_歌词窗 ()
重建字体 ()

GdipCreateStringFormat (16384, 0, 文本格式)




 ' 复制场景位图_ (hdc, 0, 0, rect.右边 － rect.左边, rect.底边 － rect.顶边, mdc, 0, 0, 13369376)

.子程序 重设颜色_歌词窗, 空白型, , 
.局部变量 X, 整数型, , , 

.如果真 (不等于 (文本刷子_主体, 0))
    GdipDeleteBrush (文本刷子_主体)
    赋值 (文本刷子_主体, 0)
.如果真结束
GdipCreateSolidFill (RGB转ARGB (播放器设置.歌词窗_非激活颜色), 文本刷子_主体)
.变量循环首 (1, 7, 1, X)
    .如果真 (不等于 (文本刷子_渐变 [X], 0))
        GdipDeleteBrush (文本刷子_渐变 [X])
        赋值 (文本刷子_渐变 [X], 0)
    .如果真结束
    GdipCreateSolidFill (RGB转ARGB (取过渡色 (播放器设置.歌词窗_激活颜色, 播放器设置.歌词窗_非激活颜色, 求次方 (相除 (X, 7), 2))), 文本刷子_渐变 [X])
.变量循环尾 ()


.子程序 重建字体, 空白型, , 更改设置时调用
.如果真 (不等于 (字体族, 0))
    GdipDeleteFontFamily (字体族)
    赋值 (字体族, 0)
.如果真结束
.如果真 (不等于 (歌词字体, 0))
    GdipDeleteFont (歌词字体)
    赋值 (歌词字体, 0)
.如果真结束

GdipCreateFontFamilyFromName (A2W (播放器设置.歌词窗_字体名称), 0, 字体族)
GdipCreateFont (字体族, 播放器设置.歌词窗_字体大小, 播放器设置.歌词窗_字体风格, 2, 歌词字体)


.子程序 取过渡色, 整数型, , 
.参数 颜色1, 整数型, , 
.参数 颜色2, 整数型, , 
.参数 混合比例, 小数型, , 0～1，0表示全为颜色1

.局部变量 红1, 整数型, , , 
.局部变量 绿1, 整数型, , , 
.局部变量 蓝1, 整数型, , , 
.局部变量 红2, 整数型, , , 
.局部变量 绿2, 整数型, , , 
.局部变量 蓝2, 整数型, , , 

赋值 (红1, 求余数 (颜色1, 256))
赋值 (颜色1, 整除 (颜色1, 256))
赋值 (绿1, 求余数 (颜色1, 256))
赋值 (颜色1, 整除 (颜色1, 256))
赋值 (蓝1, 颜色1)

赋值 (红2, 求余数 (颜色2, 256))
赋值 (颜色2, 整除 (颜色2, 256))
赋值 (绿2, 求余数 (颜色2, 256))
赋值 (颜色2, 整除 (颜色2, 256))
赋值 (蓝2, 颜色2)

返回 (取颜色值 (相加 (相乘 (混合比例, 红2), 相乘 (相减 (1, 混合比例), 红1)), 相加 (相乘 (混合比例, 绿2), 相乘 (相减 (1, 混合比例), 绿1)), 相加 (相乘 (混合比例, 蓝2), 相乘 (相减 (1, 混合比例), 蓝1))))

.子程序 更新框架尺寸, 空白型, , 
.局部变量 渐变刷子矩形, Gdip矩形2, , , 

取窗口矩形_ (hWnd, rect)

GdipDeleteBrush (覆盖刷子_上面)
GdipDeleteBrush (覆盖刷子_下面)

GdipDeleteGraphics (Gdip)
 ' 选入设备场景_ (mdc, obmp)
删除对象_ (bmp)
 ' 释放设备场景_ (hWnd, mdc)
 ' 删除设备场景_ (hdc)

 ' hdc ＝ 取设备场景_ (hWnd)
 ' mdc ＝ 创建内存场景_ (hdc)  ' 建立后台场景
取窗口矩形_ (hWnd, rect)
赋值 (bmp, 创建设备位图_ (hdc, 相加 (相减 (rect.右边, rect.左边), 1), 相加 (相减 (rect.底边, rect.顶边), 1)))
赋值 (obmp, 选入设备场景_ (mdc, bmp))
设置背景模式_ (mdc, 1)
GdipCreateFromHDC (mdc, Gdip)



赋值 (渐变刷子矩形.左边, 0)
赋值 (渐变刷子矩形.顶边, 0)
赋值 (渐变刷子矩形.宽度, 相减 (rect.右边, rect.左边))
赋值 (渐变刷子矩形.高度, 相除 (歌词窗..高度, 播放器设置.歌词窗_淡化区比例))
GdipCreateLineBrushFromRect (渐变刷子矩形, RGB转ARGB (#底色), RGB转ARGB (#底色, 0), 1, 0, 覆盖刷子_上面)

赋值 (渐变刷子矩形.左边, 0)
赋值 (渐变刷子矩形.顶边, 相减 (歌词窗..高度, 相除 (歌词窗..高度, 播放器设置.歌词窗_淡化区比例)))
赋值 (渐变刷子矩形.宽度, 相减 (rect.右边, rect.左边))
赋值 (渐变刷子矩形.高度, 相除 (歌词窗..高度, 播放器设置.歌词窗_淡化区比例))
GdipCreateLineBrushFromRect (渐变刷子矩形, RGB转ARGB (#底色, 0), RGB转ARGB (#底色), 1, 0, 覆盖刷子_下面)



.子程序 刷新歌词, 空白型, , 根据给定的行号和（整体）偏移值来显示（多行）歌词，该函数与“显示状态文本”，不能同时用……太可怕了，这个函数快绕晕了
.参数 中心行号, 整数型, , 
.参数 高亮行号, 整数型, , 与中心行号不同的是，“当前行号”指的是高亮显示 或者是正在转向高亮的行号（因为有提前，所以不一定是正在播放）
.参数 偏移值, 整数型, , -7～6
.参数 换行完成度, 整数型, 可空, 1～7 空表示不变
.参数 记录行号与偏移, 逻辑型, 可空, 用于鼠标拖动调整

.局部变量 覆盖矩形, Gdip矩形I, , , 
.局部变量 背景矩形, Gdip矩形I, , , 
.局部变量 偏移, 小数型, 静态, , 
.局部变量 歌词行, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 半侧行数, 整数型, , , 
.局部变量 换行完成度_, 整数型, , , 
.局部变量 颜色索引1, 整数型, , , 
.局部变量 颜色索引2, 整数型, , , 

.如果真 (等于 (歌词窗., 假))
    返回 ()
.如果真结束
.如果真 (是否为空 (记录行号与偏移))
    赋值 (记录行号与偏移, 真)
.如果真结束
.如果真 (记录行号与偏移)
    赋值 (中心行号_记录变量, 中心行号) ' 记录下具体位置，拖动时需要
    赋值 (偏移值_记录变量, 偏移值)
    赋值 (高亮行号_记录变量, 高亮行号)
.如果真结束

赋值 (背景矩形.左边, 0)
赋值 (背景矩形.顶边, 0)
赋值 (背景矩形.右边, 相减 (rect.右边, rect.左边))
赋值 (背景矩形.底边, 相减 (rect.底边, rect.顶边))
填充矩形I_ (歌词底色刷子, 背景矩形)

.如果真 (等于 (是否为空 (换行完成度), 假))
    赋值 (换行完成度_, 换行完成度)
.如果真结束
.如果 (等于 (换行完成度_, 0)) ' 完成，或者没换行
    赋值 (颜色索引1, 0) ' 常色
    赋值 (颜色索引2, 1)
.否则
    赋值 (颜色索引1, 换行完成度_)
    赋值 (颜色索引2, 相减 (8, 换行完成度_))
    
    
.如果结束
.如果真 (取歌词行 (歌词行, 歌词窗..高度, 中心行号))
    赋值 (半侧行数, 相除 (相减 (取数组成员数 (歌词行), 1), 2))
    .变量循环首 (1, 半侧行数, 1, X)
        .判断开始 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数)))
            显示单行歌词 (歌词行 [X], 相加 (相乘 (负 (相加 (相减 (半侧行数, X), 1)), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 颜色索引1)
        .判断 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数, 1)))
            显示单行歌词 (歌词行 [X], 相加 (相乘 (负 (相加 (相减 (半侧行数, X), 1)), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 颜色索引2)
        .默认
            显示单行歌词 (歌词行 [X], 相加 (相乘 (负 (相加 (相减 (半侧行数, X), 1)), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 0)
        .判断结束
        
    .变量循环尾 ()
    .判断开始 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数)))
        显示单行歌词 (歌词行 [相加 (半侧行数, 1)], 偏移值, 颜色索引1)
    .判断 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数, 1)))
        显示单行歌词 (歌词行 [相加 (半侧行数, 1)], 偏移值, 颜色索引2)
    .默认
        显示单行歌词 (歌词行 [相加 (半侧行数, 1)], 偏移值, 0)
    .判断结束
    
    
    .变量循环首 (相加 (半侧行数, 2), 相加 (相乘 (半侧行数, 2), 1), 1, X)
        .判断开始 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数)))
            显示单行歌词 (歌词行 [X], 相加 (相乘 (相减 (X, 半侧行数, 1), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 颜色索引1)
        .判断 (等于 (X, 相加 (相减 (高亮行号, 中心行号), 半侧行数, 1)))
            显示单行歌词 (歌词行 [X], 相加 (相乘 (相减 (X, 半侧行数, 1), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 颜色索引2)
        .默认
            显示单行歌词 (歌词行 [X], 相加 (相乘 (相减 (X, 半侧行数, 1), 取整 (相乘 (播放器设置.歌词窗_字体大小, 1.1))), 偏移值), 0)
        .判断结束
        
    .变量循环尾 ()
.如果真结束

.如果真 (播放器设置.歌词窗_开启淡化)
    赋值 (覆盖矩形.左边, 0)
    赋值 (覆盖矩形.右边, 歌词窗..宽度)
    赋值 (覆盖矩形.顶边, 0)
    赋值 (覆盖矩形.底边, 相除 (歌词窗..高度, 播放器设置.歌词窗_淡化区比例))
    填充矩形I_ (覆盖刷子_上面, 覆盖矩形)
    
    赋值 (覆盖矩形.左边, 0)
    赋值 (覆盖矩形.右边, 歌词窗..宽度)
    赋值 (覆盖矩形.顶边, 相加 (相减 (歌词窗..高度, 相除 (歌词窗..高度, 播放器设置.歌词窗_淡化区比例)), 1))
    赋值 (覆盖矩形.底边, 歌词窗..高度)
    填充矩形I_ (覆盖刷子_下面, 覆盖矩形)
    
.如果真结束


刷新显示_歌词窗 ()


.子程序 显示单行歌词, 空白型, , 
.参数 文本, 文本型, , 
.参数 纵向偏移, 整数型, , 0代表中线，正数在下，负数在上
.参数 颜色索引, 整数型, , 

.局部变量 文本矩形, Gdip矩形2, , , 
.局部变量 宽字符, 字节集, , , 

赋值 (宽字符, A2W (文本))
GdipMeasureString (Gdip, 宽字符, lstrlenw (宽字符), 歌词字体, 文本矩形, 0, 文本矩形, 0, 0) ' 测量文本矩形

赋值 (文本矩形.左边, 相除 (相减 (歌词窗..宽度, 文本矩形.宽度), 2))
赋值 (文本矩形.顶边, 相加 (相除 (相减 (歌词窗..高度, 文本矩形.高度), 2), 纵向偏移))

.如果 (不等于 (颜色索引, 0))
    画文本_ (文本, 歌词字体, 文本刷子_渐变 [颜色索引], 文本矩形)
.否则
    画文本_ (文本, 歌词字体, 文本刷子_主体, 文本矩形)
.如果结束
 ' 歌词窗.标题 ＝ 到文本 (到数值 (歌词窗.标题) ＋ 1)

.子程序 填充矩形I_, 空白型, , GdipFillRectangleI
.参数 刷子_, 整数型, , 
.参数 矩形, Gdip矩形I, , 

GdipFillRectangleI (Gdip, 刷子_, 矩形.左边, 矩形.顶边, 相减 (矩形.右边, 矩形.左边), 相减 (矩形.底边, 矩形.顶边))

.子程序 画文本_, 空白型, , 
.参数 文本, 文本型, , 
.参数 字体_, 整数型, , 
.参数 刷子, 整数型, , 
.参数 文本区域, Gdip矩形2, , 

.局部变量 宽字符, 字节集, , , 

赋值 (宽字符, A2W (文本))
GdipDrawString (Gdip, 宽字符, lstrlenw (宽字符), 字体_, 文本区域, 文本格式, 刷子)


.子程序 A2W, 字节集, , 将Ansi转成Unicode
.参数 参数_Ansi文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (长度, 相乘 (MultiByteToWideChar (0, 0, 参数_Ansi文本, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (0, 0, 参数_Ansi文本, 取文本长度 (参数_Ansi文本), 返回值, 长度)
返回 (返回值)

.子程序 刷新显示_歌词窗, 空白型, , 
.如果真 (歌词窗准许刷新)
    复制场景位图_ (hdc, 0, 0, 相减 (rect.右边, rect.左边), 相减 (rect.底边, rect.顶边), mdc, 0, 0, 13369376)
.如果真结束


.子程序 显示状态文本, 空白型, , 该函数与“刷新歌词”，不能同时用
.参数 强制刷新, 逻辑型, 可空, 

.局部变量 背景矩形, Gdip矩形I, , , 
.局部变量 上次状态文本, 文本型, 静态, , 


.如果真 (是否为空 (强制刷新))
    赋值 (强制刷新, 假)
.如果真结束
.如果真 (或者 (强制刷新, 不等于 (上次状态文本, 状态文本)))
    赋值 (上次状态文本, 状态文本)
    赋值 (背景矩形.左边, 0)
    赋值 (背景矩形.顶边, 0)
    赋值 (背景矩形.右边, 相减 (rect.右边, rect.左边))
    赋值 (背景矩形.底边, 相减 (rect.底边, rect.顶边))
    填充矩形I_ (歌词底色刷子, 背景矩形)
    
    显示单行歌词 (状态文本, 0, 0)
    
    刷新显示_歌词窗 ()
    
.如果真结束


.子程序 置状态文本, 空白型, , 
.参数 文本, 文本型, , 

赋值 (状态文本, 文本)

.子程序 取状态文本, 文本型, , 
返回 (状态文本)

.子程序 取当前中心行号, 整数型, , 
返回 (中心行号_记录变量)

.子程序 取当前偏移值, 整数型, , 
返回 (偏移值_记录变量)

.子程序 取当前高亮行号, 整数型, , 
返回 (高亮行号_记录变量)

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 置行列颜色, 空白型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 窗口, 窗口, , 超级列表框所在窗口名称
.参数 超级列表框, 超级列表框, , 超级列表框名称
.参数 表项行号, 整数型, , 表项行号，0表示第一行
.参数 表项列号, 整数型, , 表项列号，0表示第一列
.参数 文本颜色, 整数型, , 文本前景颜色
.参数 背景颜色, 整数型, 可空, 文本背景颜色



.子程序 置背景交替色, 空白型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 窗口, 窗口, , 超级列表框所在窗口名称
.参数 超级列表框, 超级列表框, , 超级列表框名称
.参数 颜色一, 整数型, 可空, 交替色1
.参数 颜色二, 整数型, 可空, 交替色2
.参数 是否交替色, 逻辑型, 可空, 假取消交替色，默认为假



.子程序 置背景图片, 空白型, , 方圆软件工作室－林炳崇（近在眼前）出品
.参数 窗口, 窗口, , 
.参数 超级列表框, 超级列表框, , 超级列表框名称
.参数 图片路径, 文本型, , 背景图片全路径文件名



.子程序 取消行列色, 空白型, , 方圆软件工作室－林炳崇（近在眼前）出品


.程序集 网络歌词搜索, , , 

.程序集变量 歌名_, 文本型, , , 
.程序集变量 歌手_, 文本型, , , 
.程序集变量 TAG, TAG_GENERAL, , , 
.程序集变量 线程句柄, 整数型, , , 
.程序集变量 优先网站编号, 整数型, , , 
.子程序 下载歌词_5ilrc, 逻辑型, , 
.参数 歌名, 文本型, , 
.参数 歌手, 文本型, , 
.参数 去除歌手名, 逻辑型, , 

.局部变量 临时文本1, 文本型, , , 
.局部变量 d, 文本型, , "0", 
.局部变量 d1, 文本型, , "0", 
.局部变量 d3, 文本型, , "0", 
.局部变量 d4, 文本型, , "0", 
.局部变量 文本, 文本型, , "0", 
.局部变量 文本1, 文本型, , "0", 
.局部变量 文本2, 文本型, , "0", 
.局部变量 d5, 文本型, , "0", 
.局部变量 临时文本, 文本型, , , 
.局部变量 匿名局部变量_8839, 空白型, , , 
.局部变量 歌名1, 文本型, , , 
.局部变量 结果列表, 文本型, , "0", 
.局部变量 X, 整数型, , , 

.如果 (去除歌手名)
    发送消息 (主窗口.取窗口句柄 (.), 32885, 6, 0)
.否则
    发送消息 (主窗口.取窗口句柄 (.), 32885, 1, 0)
.如果结束

.判断开始 (不等于 (歌手_, “”))
    赋值 (临时文本, 到文本 (访问网页 (“http://www.5ilrc.com/souge1.asp”, “POST”, , , , , 到字节集 (相加 (“gm=”, 歌名, “&gs=”, 歌手)), )))
.默认
    赋值 (临时文本, 到文本 (访问网页 (“http://www.5ilrc.com/souge1.asp”, “POST”, , , , , 到字节集 (相加 (“gm=”, 歌名)), )))
.判断结束
赋值 (歌名1, 歌名_)

赋值 (文本, 分割文本 (临时文本, “                                  </TR>”, )) ' 分割代码，取处地址

发送消息 (主窗口.取窗口句柄 (.), 32885, 2, 0)

.判断开始 (大于 (取数组成员数 (文本), 1))
    赋值 (文本1, 分割文本 (文本 [2], 相加 (“   <a href=”, #引号), )) ' 同上
    .判断开始 (大于 (取数组成员数 (文本1), 1))
        赋值 (文本2, 分割文本 (文本1 [2], #引号, )) ' 同上
        赋值 (临时文本, 到文本 (访问网页 (相加 (“http://www.5ilrc.com”, 文本2 [1]))))
        
        发送消息 (主窗口.取窗口句柄 (.), 32885, 3, 0)
        
        赋值 (d, 分割文本 (临时文本, “id_gc”, )) ' 取出歌词id
        .如果 (大于 (取数组成员数 (d), 1))
            赋值 (d1, 分割文本 (d [2], #引号, ))
            赋值 (临时文本1, 到文本 (访问网页 (“http://www.5ilrc.com/downlrc.asp”, “POST”, , , , , 到字节集 (相加 (“id_gc=”, d1 [3])), )))
        .否则
            发送消息 (主窗口.取窗口句柄 (.), 32885, 5, 0)
        .如果结束
        重定义数组 (d, 假, 0)
    .默认
        
        赋值 (歌词内容, 到字节集 (临时文本1))
        发送消息 (主窗口.取窗口句柄 (.), 32885, 4, 0)
        返回 (真)
    .判断结束
    
    赋值 (歌词内容, 到字节集 (临时文本1))
    发送消息 (主窗口.取窗口句柄 (.), 32885, 4, 0)
    返回 (真)
.默认
    返回 (假)
.判断结束


.子程序 下载歌词_百度, 逻辑型, , 
.参数 歌名, 文本型, , 
.参数 歌手, 文本型, , 
.参数 去除歌手名, 逻辑型, , 

.局部变量 结果列表, 文本型, , "0", 
.局部变量 X, 整数型, , , 

.如果 (去除歌手名)
    发送消息 (主窗口.取窗口句柄 (.), 32885, 6, 1)
.否则
    发送消息 (主窗口.取窗口句柄 (.), 32885, 1, 1)
.如果结束

 ' 结果列表 ＝ 分割文本 (百度取地址 (歌名, 歌手), “*&^%”, )
百度取地址 (歌名, 歌手, , 结果列表)
.变量循环首 (1, 取数组成员数 (结果列表), 1, X)
    .如果真 (等于 (到大写 (取文本右边 (结果列表 [X], 4)), “.LRC”))
        
        发送消息 (主窗口.取窗口句柄 (.), 32885, 3, 1)
        赋值 (歌词内容, 访问网页 (结果列表 [X]))
        自动处理换行问题 ()
        .如果真 (不等于 (歌词内容, {  }))
            发送消息 (主窗口.取窗口句柄 (.), 32885, 4, 1)
            
            返回 (真)
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
返回 (假)


.子程序 百度取地址, 空白型, , 此函数代码转至 思娇屠虎 QQ:84651849
.参数 歌曲名, 文本型, , 
.参数 歌手名, 文本型, 可空, 
.参数 歌曲地址数组, 文本型, 可空 数组, 
.参数 歌词地址数组, 文本型, 可空 数组, 

.局部变量 临时文本, 文本型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 正则, 未知类型0xA0001, , , 
.局部变量 结果, 未知类型0xA0002, , "0", 
.局部变量 X, 整数型, , , 

清除数组 (歌曲地址数组)
清除数组 (歌词地址数组)

赋值 (临时文本, 到文本 (访问网页 (相加 (#百度歌曲API, 歌曲名, “$$”, 歌手名, “$$$$”))))
正则.未知支持库函数_3 (“<encode>(.*?)</encode>.*?<decode>(.*?)</decode>.*?<type>(.*?)</type>.*?<lrcid>(.*?)</lrcid>”, 假)
赋值 (结果, 正则.未知支持库函数_16 (临时文本))
.计次循环首 (取数组成员数 (结果), X)
    赋值 (文本, 结果.未知支持库函数_12 ( [X], 临时文本, 1, ))
    赋值 (文本, 取文本左边 (文本, 倒找文本 (文本, “/”, , 假)))
    .如果真 (等于 (是否为空 (歌曲地址数组), 假))
        加入成员 (歌曲地址数组, 相加 (文本, 结果.未知支持库函数_12 ( [X], 临时文本, 2, ))) ' 歌曲地址
    .如果真结束
    
     ' 文本 ＝ 结果 [X].取子匹配文本 (临时文本, 3, )
     ' .如果真 (等于 (文本, “1”))
         ' 文本 ＝ “MP3”
    .如果真结束
     ' .如果真 (等于 (文本, “2”))
         ' 文本 ＝ “RM”
    .如果真结束
     ' .如果真 (等于 (文本, “3”))
         ' 文本 ＝ “WMA”
    .如果真结束
     ' 加入成员 (歌曲类型, 文本)  ' 歌曲类型
    
    赋值 (文本, 结果.未知支持库函数_12 ( [X], 临时文本, 4, ))
    .如果真 (大于 (取文本长度 (文本), 2))
        赋值 (文本, 相加 (#百度歌词API, 取文本左边 (文本, 相减 (取文本长度 (文本), 2)), “/”, 文本, “.lrc”))
        .如果真 (等于 (是否为空 (歌词地址数组), 假))
            加入成员 (歌词地址数组, 文本) ' 歌词地址
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()

.子程序 网络搜索控制, 空白型, , 
.如果 (等于 (优先网站编号, 0))
    .如果真 (等于 (搜索控制_百度 (), 假))
        .如果真 (等于 (搜索控制_5ilrc (), 假))
            发送消息 (主窗口.取窗口句柄 (.), 32885, 5, 0)
        .如果真结束
        
    .如果真结束
    
.否则
    .如果真 (等于 (搜索控制_5ilrc (), 假))
        .如果真 (等于 (搜索控制_百度 (), 假))
            发送消息 (主窗口.取窗口句柄 (.), 32885, 5, 0)
        .如果真结束
        
    .如果真结束
    
.如果结束






.子程序 搜索控制_百度, 逻辑型, , 
.局部变量 歌名_临时, 文本型, , , 
.局部变量 歌手_临时, 文本型, , , 

赋值 (歌名_临时, 子文本替换 (歌名_, “ ”, “%20”, , , 真)) ' 在网页中，半角空格需要用"%20"来替换
赋值 (歌手_临时, 子文本替换 (歌手_, “ ”, “%20”, , , 真))


.如果 (等于 (下载歌词_百度 (歌名_临时, 歌手_临时, 假), 假)) ' 没找到
    返回 (假)
     ' 百度这个好像不支持空歌手名
    .如果 (不等于 (歌手_临时, “”))
        赋值 (歌手_临时, “”) ' 清空歌手信息再次搜索
        返回 (下载歌词_百度 (歌名_临时, 歌手_临时, 真))
    .否则
        返回 (假)
    .如果结束
    
.否则
    返回 (真)
.如果结束


.子程序 搜索控制_5ilrc, 逻辑型, , 
.局部变量 歌名_临时, 文本型, , , 
.局部变量 歌手_临时, 文本型, , , 

赋值 (歌名_临时, 子文本替换 (歌名_, “ ”, “%20”, , , 真)) ' 在网页中，半角空格需要用"%20"来替换
赋值 (歌手_临时, 子文本替换 (歌手_, “ ”, “%20”, , , 真))

.如果 (等于 (下载歌词_5ilrc (歌名_临时, 歌手_临时, 假), 假)) ' 没找到
    .如果 (不等于 (歌手_临时, “”))
        赋值 (歌手_临时, “”) ' 清空歌手信息再次搜索
        返回 (下载歌词_5ilrc (歌名_临时, 歌手_临时, 真))
    .否则
        返回 (假)
    .如果结束
    
.否则
    返回 (真)
.如果结束


.子程序 搜索网络歌词, 空白型, , 作为调用接口
.参数 要找的歌名, 文本型, , 
.参数 要找的歌手, 文本型, , 
.参数 优先网站编号_, 整数型, , 

.如果真 (等于 (优先网站编号_, 2)) ' 2：不自动搜索
    返回 ()
.如果真结束
赋值 (优先网站编号, 优先网站编号_)
终止搜索 ()


 ' ''歌词搜索时的文本处理功能已全部删去
 ' .如果 (播放器设置.)
     ' .如果真 (或者 (大于 (播放器设置., 1), 小于 (播放器设置., 0)))
         ' 播放器设置.横杠识别样式 ＝ 0
    .如果真结束
     ' TAG ＝ 智能处理歌名 (要找的歌名, 要找的歌手, 2 － 播放器设置.横杠识别样式)  ' 由于在做这个函数的时候出了点小小的偏差，可以这么理解，“横杠识别样式”0代表Title-Artist,则2-0=2，1代表Artist-Title，则2-1=1
.否则
     ' TAG.TITLE ＝ 要找的歌名
     ' TAG.ARTIST ＝ 要找的歌手
.如果结束
 ' .如果真 (播放器设置.)
     ' TAG.TITLE ＝ 去除括号 (TAG.TITLE)
     ' TAG.ARTIST ＝ 去除括号 (TAG.ARTIST)
.如果真结束
 ' .如果真 (播放器设置.)
     ' TAG.TITLE ＝ 去除开头编号 (TAG.TITLE)
.如果真结束

赋值 (TAG.TITLE, 要找的歌名)
赋值 (TAG.ARTIST, 要找的歌手)



赋值 (歌名_, TAG.TITLE)
赋值 (歌手_, TAG.ARTIST)

赋值 (线程句柄, CreateThread (0, 0, &网络搜索控制, 0, 0, 0))

.子程序 终止搜索, 空白型, , 
.如果真 (不等于 (线程句柄, 0))
    TerminateThread (线程句柄, 0)
    CloseHandle (线程句柄)
    赋值 (线程句柄, 0)
    关闭打开的句柄 ()
.如果真结束


.子程序 智能处理歌名, TAG_GENERAL, , 带横杠的格式，返回值不包含ALBUM（专辑）---------已不用
.参数 歌名, 文本型, , 
.参数 歌手, 文本型, , 
.参数 格式号, 整数型, , 1、歌手-歌名 2、歌名-歌手

.局部变量 分割的文本, 文本型, , "0", 
.局部变量 返回值, TAG_GENERAL, , , 
.局部变量 X, 整数型, , , 

.如果真 (等于 (删首尾空 (歌名), “”))
    赋值 (返回值.ARTIST, 歌手)
    赋值 (返回值.TITLE, 歌名)
    返回 (返回值) ' 连歌名都没有
.如果真结束
.如果 (等于 (删首尾空 (歌手), “”)) ' 没有歌手信息，八成是以横杠的形式存在歌名里
    赋值 (分割的文本, 分割文本 (歌名, “-”, ))
    .如果真 (小于或等于 (取数组成员数 (分割的文本), 1)) ' 只有一个数组？！
        赋值 (分割的文本, 分割文本 (歌名, “―”, )) ' 再分！用全角！
    .如果真结束
    
    .如果 (大于或等于 (取数组成员数 (分割的文本), 2)) ' 分开了
        赋值 (返回值.ARTIST, 删首尾空 (分割的文本 [格式号])) ' 很懒惰的用法
        赋值 (返回值.TITLE, 删首尾空 (分割的文本 [相减 (3, 格式号)]))
    .否则
        赋值 (返回值.TITLE, 歌名) ' 歌名没分开，歌手又没有……
        赋值 (返回值.ARTIST, 歌手)
    .如果结束
    
    
.否则
    赋值 (分割的文本, 分割文本 (歌名, “-”, ))
    .如果真 (小于或等于 (取数组成员数 (分割的文本), 1))
        赋值 (分割的文本, 分割文本 (歌名, “―”, ))
    .如果真结束
    .如果 (大于或等于 (取数组成员数 (分割的文本), 2)) ' TITLE里有横杠，然后又有ARTIST……
        赋值 (返回值.ARTIST, 删首尾空 (歌手))
        赋值 (返回值.TITLE, 删首尾空 (分割的文本 [相减 (3, 格式号)]))
    .否则
        赋值 (返回值.TITLE, 歌名) ' 这个正常！
        赋值 (返回值.ARTIST, 删首尾空 (歌手))
    .如果结束
    
.如果结束
 ' .变量循环首 (1, 取文本长度 (返回值.TITLE), 1, X)
     ' .如果真 (并且 (小于或等于 (取代码 (返回值.TITLE, X), 127), 大于或等于 (取代码 (返回值.TITLE, X), 0), 不等于 (取代码 (返回值.TITLE, X), 32))) ' 是半角，但不是空格（等于是有英文、数字）
         ' 返回 (返回值)  ' 下一步去除空格的不处理了！
    .如果真结束
    
 ' .变量循环尾 ()
 ' 分割的文本 ＝ 分割文本 (返回值.TITLE, “ ”, )
 ' .如果真 (大于或等于 (取数组成员数 (分割的文本), 1)) ' 起码得有个保障
     ' 返回值.TITLE ＝ 分割的文本 [1]
.如果真结束
返回 (返回值)

.子程序 去除括号, 文本型, , ----------------------------------------------已不用
.参数 文本, 文本型, , 

.局部变量 左括号数量, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (文本, 子文本替换 (文本, “（”, “(”, , , 真)) ' 转全角为半角
赋值 (文本, 子文本替换 (文本, “）”, “)”, , , 真))
.变量循环首 (1, 取文本长度 (文本), 1, X)
    .如果真 (等于 (取文本中间 (文本, X, 1), “(”))
        赋值 (左括号数量, 相加 (左括号数量, 1))
    .如果真结束
    .如果真 (小于或等于 (左括号数量, 0))
        赋值 (返回值, 相加 (返回值, 取文本中间 (文本, X, 1))) ' 呃……堆栈算法？
    .如果真结束
    .如果真 (等于 (取文本中间 (文本, X, 1), “)”))
        赋值 (左括号数量, 相减 (左括号数量, 1))
    .如果真结束
    
.变量循环尾 ()
返回 (返回值)

.子程序 去除开头编号, 文本型, , ------------------------------------------已不用
.参数 歌名, 文本型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取文本长度 (歌名), 1, X)
    .如果真 (并且 (或者 (小于 (取代码 (歌名, X), 取代码 (“0”, )), 大于 (取代码 (歌名, X), 取代码 (“9”, ))), 不等于 (取文本中间 (歌名, X, 1), “.”))) ' 直到不是数字也不是点
        返回 (取文本右边 (歌名, 相加 (相减 (取文本长度 (歌名), X), 1))) ' 截掉左边
    .如果真结束
    
.变量循环尾 ()
返回 (歌名) ' 全是数字和点……我也没办法

.子程序 取正在搜索全名, 文本型, , 
返回 (相加 (TAG.TITLE, 选择 (不等于 (TAG.ARTIST, “”), 相加 (“―”, TAG.ARTIST), “”)))

.窗口程序集 窗口_歌词搜索窗口, , , 

.子程序 _按钮_搜索_被单击, 空白型, , 
置网络等待状态 (真)
清空歌词 ()
 ' 播放器设置.歌词搜索_去除括号 ＝ 选择列表框1.是否被选中 (0)
 ' 播放器设置.歌词搜索_去除开头数字 ＝ 选择列表框1.是否被选中 (1)
 ' 播放器设置.歌词搜索_识别横杠 ＝ 选择列表框1.是否被选中 (2)
 ' 播放器设置.歌词搜索_优先网站 ＝ 选择 (选择列表框2.是否被选中 (1), 1, 0)
搜索网络歌词 (.内容, .内容, 选择 (等于 (1.取当前状态图片 (), 1), 1, 0))

歌词搜索窗口.销毁 ()

.子程序 _按钮_取消_被单击, 空白型, , 
歌词搜索窗口.销毁 ()

.子程序 _歌词搜索窗口_创建完毕, 空白型, , 
应用皮肤 (歌词搜索窗口.取窗口句柄 (), 1)

加入易语言标签 ()
加入易语言标签 ()

赋值 (., #检查框_单选)
歌词搜索窗口_刷新设置 ()
 ' 信息框 (“显示”, 0, )
.如果真 (等于 (主窗口., 假)) ' 是后台打开
    赋值 (歌词搜索窗口., 真)
.如果真结束


.子程序 歌词搜索窗口_刷新设置, 空白型, , 
.如果真 (或者 (大于 (播放器设置.歌词_优先网站, 1), 小于 (播放器设置.歌词_优先网站, 0)))
    赋值 (播放器设置.歌词_优先网站, 0)
.如果真结束
播放器设置.置状态图片 (.歌词_优先网站, 1)
相减 (1, 播放器设置.歌词_优先网站).置状态图片 (0)

.子程序 歌词搜索窗口_填充编辑框, 空白型, , 
.局部变量 Tag, 音乐文件标签, , , 

赋值 (Tag, 取当前TAG ())
赋值 (.内容, Tag.Title)
赋值 (.内容, Tag.Artist)


.子程序 _编辑框_歌名_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _按钮_搜索_被单击 ()
.如果真结束


.子程序 _编辑框_歌手_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _按钮_搜索_被单击 ()
.如果真结束


.子程序 _超级列表框1_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.局部变量 X, 整数型, , , 

.如果 (等于 (检查框状态, 0))
    表项索引.置状态图片 (1)
.否则
    .变量循环首 (0, 相减 (取表项数 (), 1), 1, X) ' 取消选中其他表项
        .如果真 (不等于 (X, 表项索引))
            X.置状态图片 (0)
        .如果真结束
        
    .变量循环尾 ()
.如果结束


.窗口程序集 窗口_排序窗, , , 

.程序集变量 关闭, 逻辑型, , , 
.子程序 _排序窗_创建完毕, 空白型, , 
应用皮肤 (排序窗.取窗口句柄 (), 1)
加入易语言标签 ()
赋值 (关闭, 假)

.子程序 刷新_排序窗, 空白型, , 
.参数 进度文本, 文本型, , 

.局部变量 counter, 整数型, 静态, , 

.如果真 (等于 (是否已创建 (), 假))
    返回 ()
.如果真结束
赋值 (counter, 相加 (counter, 1))
.如果真 (等于 (counter, 50))
    赋值 (counter, 0)
     ' 处理事件 ()
.如果真结束


.子程序 _排序窗_可否被关闭, 逻辑型, , 
赋值 (关闭, 真)
返回 (假)

.窗口程序集 窗口_扫描歌曲, , , 

.程序集变量 格式数组, 逻辑型, , "16", 
.程序集变量 准备关闭, 逻辑型, , , 用来缓存时间差，防止出错
.子程序 _扫描歌曲窗口_创建完毕, 空白型, , 
.局部变量 驱动器, 文本型, , , 

应用皮肤 (扫描歌曲窗口.取窗口句柄 (), 1)
加入易语言标签 ()


赋值 (., #检查框_多选)
_按钮_常见_被单击 ()
扫描歌曲窗口.取窗口句柄 ().未知支持库函数_0 ()

扫描歌曲窗口_添加过滤器 ()

0.置项目文本 (相加 (0.取项目文本 (), “ - ”, 取用户文件夹位置 (“My Music”)))
赋值 (驱动器, 取驱动器列表 (3))
1.置项目文本 (相加 (1.取项目文本 (), “ - ”, 选择 (不等于 (驱动器, “”), 驱动器, “(没有找到)”)))
赋值 (驱动器, 取驱动器列表 (2))
2.置项目文本 (相加 (2.取项目文本 (), “ - ”, 选择 (不等于 (驱动器, “”), 驱动器, “(没有找到)”)))

.子程序 扫描歌曲窗口_添加过滤器, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 过滤器数组, 文本型, , "0", 
.局部变量 过滤器个数, 整数型, , , 
.局部变量 表项号, 整数型, , , 
.局部变量 匿名局部变量_29886, 空白型, , , 
.局部变量 已添加扩展名, 文本型, , "0", 
.局部变量 匿名局部变量_29897, 空白型, , , 
.局部变量 组内扩展名, 文本型, , "0", 
.局部变量 Y, 整数型, , , 
.局部变量 Z, 整数型, , , 

全部删除 ()
赋值 (过滤器数组, 分割文本 (播放器设置.过滤器, “|”, ))
赋值 (过滤器个数, 取数组成员数 (过滤器数组))
.变量循环首 (1, 过滤器个数, 1, X)
    .如果真 (等于 (求余数 (X, 2), 0)) ' 选择过滤器中扩展名的一栏
        .如果真 (并且 (不等于 (X, 2), 不等于 (X, 过滤器个数))) ' “所有支持的类型”和“所有文件”不要
            赋值 (组内扩展名, 分割文本 (过滤器数组 [X], “;”, )) ' 提取每种类型的多个扩展名
            .变量循环首 (1, 取数组成员数 (组内扩展名), 1, Y)
                
                .变量循环首 (1, 取数组成员数 (已添加扩展名), 1, Z)
                    .如果真 (等于 (文本比较 (已添加扩展名 [Z], 组内扩展名 [Y], 假), 0)) ' 已经存在
                        跳出循环 ()
                    .如果真结束
                    
                .变量循环尾 ()
                .如果真 (等于 (Z, 相加 (取数组成员数 (已添加扩展名), 1))) ' 原来不存在，则添加
                    加入成员 (已添加扩展名, 组内扩展名 [Y])
                .如果真结束
                
            .变量循环尾 ()
            
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (已添加扩展名), 1, X)
    赋值 (表项号, .插入表项 (已添加扩展名 [X], , , , ))
    表项号.置状态图片 (1)
.变量循环尾 ()


.子程序 _组合框_目标选择_列表项被选择, 空白型, , 
.如果 (等于 (.现行选中项, 相减 (取项目数 (), 1))) ' 只有自定义目标时路径框才可用
    赋值 (.禁止, 假)
.否则
    赋值 (.禁止, 真)
.如果结束


.子程序 _拖放对象1_得到文本, 空白型, , 
.参数 接收到的文本, 文本型, , 

.局部变量 文件属性, 整数型, , , 

赋值 (文件属性, 取文件属性 (接收到的文本))
.如果 (并且 (不等于 (位与 (文件属性, 16), 0), 不等于 (文件属性, -1))) ' 提供的是目录
    赋值 (.内容, 接收到的文本)
    赋值 (.现行选中项, 2)
    赋值 (.禁止, 假)
.否则
    鸣叫 ()
.如果结束


.子程序 _拖放对象1_得到文件, 空白型, , 
.参数 接收到的文件路径, 文本型, , 

.局部变量 文件属性, 整数型, , , 

赋值 (文件属性, 取文件属性 (接收到的文件路径))
.如果 (并且 (不等于 (位与 (文件属性, 16), 0), 不等于 (文件属性, -1))) ' 提供的是目录
    赋值 (.内容, 接收到的文件路径)
    赋值 (.现行选中项, 2)
    赋值 (.禁止, 假)
.否则
    鸣叫 ()
.如果结束


.子程序 _超级列表框1_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

赋值 (格式数组 [相加 (表项索引, 1)], 等于 (检查框状态, 1))

.子程序 _按钮_全部_被单击, 空白型, , 
.局部变量 X, 整数型, , , 

.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    X.置状态图片 (1)
.变量循环尾 ()

.子程序 _按钮_常见_被单击, 空白型, , 
.局部变量 X, 整数型, , , 

.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    .如果 (或者 (不等于 (寻找文本 (X.取标题 (0), “mp3”, , 真), -1), 不等于 (寻找文本 (X.取标题 (0), “wma”, , 真), -1), 不等于 (寻找文本 (X.取标题 (0), “ogg”, , 真), -1), 不等于 (寻找文本 (X.取标题 (0), “mid”, , 真), -1), 不等于 (寻找文本 (X.取标题 (0), “aac”, , 真), -1)))
        X.置状态图片 (1)
    .否则
        X.置状态图片 (0)
    .如果结束
    
.变量循环尾 ()


.子程序 _按钮_两种_被单击, 空白型, , 
.局部变量 X, 整数型, , , 

.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    .如果 (或者 (不等于 (寻找文本 (X.取标题 (0), “mp3”, , 真), -1), 不等于 (寻找文本 (X.取标题 (0), “wma”, , 真), -1)))
        X.置状态图片 (1)
    .否则
        X.置状态图片 (0)
    .如果结束
    
.变量循环尾 ()




.子程序 _按钮_扫描_被单击, 空白型, , 
.局部变量 类型数组, 文本型, , "0", 
.局部变量 类型数组_单个, 文本型, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 列表项文本, 文本型, , , 
.局部变量 Y, 整数型, , , 
.局部变量 驱动器列表, 文本型, , "0", 

赋值 (准备关闭, 假)
赋值 (.禁止, 真)
.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    .如果真 (等于 (X.取当前状态图片 (), 1))
        赋值 (列表项文本, X.取标题 (0))
         ' 扩展名文本 ＝ 取文本右边 (列表项文本, 取文本长度 (列表项文本) － 寻找文本 (列表项文本, “(”, , 假))  ' 取出括号内的文本
         ' 扩展名文本 ＝ 取文本左边 (扩展名文本, 取文本长度 (扩展名文本) － 1)  ' 去掉右括号
         ' 类型数组_单个 ＝ 分割文本 (扩展名文本, “;”, )
         ' 
         ' 加入成员 (类型数组, 类型数组_单个 [Y])
         ' 变量循环尾 ()
        加入成员 (类型数组, 列表项文本)
    .如果真结束
    
.变量循环尾 ()
.如果真 (等于 (取数组成员数 (类型数组), 0))
    信息框 (“请至少选择一种类型！”, #警告图标, “出错”)
    赋值 (扫描歌曲窗口..禁止, 假)
    返回 ()
.如果真结束

.判断开始 (等于 (.现行选中项, 3))
    扫描并添加文件 (.内容, 类型数组)
.判断 (等于 (.现行选中项, 2)) ' 可移动磁盘
    取驱动器列表 (驱动器列表, 2)
    .如果真 (等于 (取数组成员数 (驱动器列表), 0))
        信息框 (“没有检测到可移动磁盘！”, #警告图标, “出错”)
        赋值 (扫描歌曲窗口..禁止, 假)
        返回 ()
    .如果真结束
    .变量循环首 (1, 取数组成员数 (驱动器列表), 1, X)
        扫描并添加文件 (驱动器列表 [X], 类型数组)
    .变量循环尾 ()
.判断 (等于 (.现行选中项, 1)) ' 硬盘
    取驱动器列表 (驱动器列表, 3)
    .如果真 (等于 (取数组成员数 (驱动器列表), 0))
        信息框 (“没有检测到本地磁盘！”, #警告图标, “出错”)
        赋值 (扫描歌曲窗口..禁止, 假)
        返回 ()
    .如果真结束
    .变量循环首 (1, 取数组成员数 (驱动器列表), 1, X)
        扫描并添加文件 (驱动器列表 [X], 类型数组)
    .变量循环尾 ()
.判断 (等于 (.现行选中项, 0)) ' “我的音乐”
    扫描并添加文件 (取用户文件夹位置 (“My Music”), 类型数组)
.默认
    
.判断结束
设置窗口标题_ (扫描歌曲窗口.取窗口句柄 (), “扫描歌曲―完成”)
赋值 (扫描歌曲窗口..禁止, 假)

.子程序 _按钮_关闭_被单击, 空白型, , 
.如果 (扫描歌曲窗口..禁止) ' 正在扫描
    赋值 (扫描歌曲窗口., 假) ' 先不关
    赋值 (准备关闭, 真)
.否则
    销毁 ()
.如果结束


.子程序 _扫描歌曲窗口_可否被关闭, 逻辑型, , 
.如果真 (扫描歌曲窗口..禁止) ' 正在扫描
    赋值 (准备关闭, 真)
    返回 (假)
.如果真结束


.子程序 _按钮_浏览_被单击, 空白型, , 
.局部变量 选择的目录, 文本型, , , 

赋值 (选择的目录, 高级浏览文件夹 (“请选择要扫描的目录”, 取当前目录 (), 假, 真, 真))
.如果真 (不等于 (选择的目录, “”))
    改变目录 (选择的目录)
    赋值 (.内容, 选择的目录)
    赋值 (.禁止, 假)
    赋值 (.现行选中项, 相减 (取项目数 (), 1))
.如果真结束


.窗口程序集 窗口_歌词调整, , , 

.程序集变量 定位点1, 小数型, , , 秒
.程序集变量 定位点2, 小数型, , , 
.程序集变量 歌词行1, 整数型, , , 行号
.程序集变量 歌词行2, 整数型, , , 
.程序集变量 当前定位点, 整数型, , , 
.子程序 _歌词调整窗口_创建完毕, 空白型, , 
应用皮肤 (歌词调整窗口.取窗口句柄 (), 1)
加入易语言标签 ()
加入易语言标签 ()
赋值 (.文本颜色, #蓝色)
赋值 (当前定位点, 1)

.子程序 _按钮1_被单击, 空白型, , 
赋值 (.禁止, 真)
.如果 (等于 (当前定位点, 1)) ' 定位点1还没选
    赋值 (定位点1, 媒体_取位置 ())
    赋值 (.标题, 相加 (“第一个定位点：”, 数值到格式文本 (定位点1, 1, 假), “秒”, #换行符, “请在”, #左引号, “歌词”, #右引号, “窗口中，将歌词到拖动正确的行”))
    置二元调整状态 (真)
.否则
    赋值 (定位点2, 媒体_取位置 ())
    赋值 (.标题, 相加 (“第二个定位点：”, 数值到格式文本 (定位点2, 1, 假), “秒”, #换行符, “请在”, #左引号, “歌词”, #右引号, “窗口中，将歌词到拖动正确的行”))
    置二元调整状态 (真)
.如果结束


.子程序 回调函数_歌词行返回, 空白型, , 
.参数 行号, 整数型, , 

.如果 (等于 (当前定位点, 1))
    赋值 (歌词行1, 行号)
    赋值 (当前定位点, 2)
    赋值 (.标题, “请适时按下按钮，记录下第二个定位点”)
    赋值 (.禁止, 假)
    置二元调整状态 (假)
.否则
    赋值 (歌词行2, 行号)
    赋值 (.标题, “正在计算……”)
    置二元调整状态 (假)
    计算_二元线性调整 (定位点1, 歌词行1, 定位点2, 歌词行2)
    赋值 (.标题, “调整完毕”)
.如果结束


.子程序 _按钮2_被单击, 空白型, , 
置二元调整状态 (假)
销毁 ()

.子程序 _标签2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

 ' 取鼠标水平位置 ().未知支持库函数_26 (取鼠标垂直位置 (), 相加 (“<font size=14>”, #提示文本_二元线性调整, “</font>”), -1, )

.程序集 音乐标签管理, , , 支持ID3(V1、V2)，WMA，APE，OGG标签的读写

.程序集变量 WMA_HEAD, 字节集, , , 
.程序集变量 WMA_STANDTAG, 字节集, , , 
.程序集变量 WMA_EXTAG, 字节集, , , 
.程序集变量 WMA_Flag, 文本型, , "11", 用于区分不同的扩展标签
.程序集变量 MP3_子标签标志, 文本型, , "0", 
.程序集变量 APE标签头, 字节集, , , 
.子程序 刷新流派信息, 空白型, , 初始化
.如果真 (等于 (取数组成员数 (流派), 0))
    赋值 (流派, { “Blues”, “Classic Rock”, “Country”, “Dance”, “Disco”, “Funk”, “Grunge”, “Hip-Hop”, “Jazz”, “Metal”, “New Age”, “Oldies”, “Other”, “Pop”, “R&B”, “Rap”, “Reggae”, “Rock”, “Techno”, “Industrial”, “Alternative”, “Ska”, “Death Metal”, “Pranks”, “Soundtrack”, “Euro-Techno”, “Ambient”, “Trip Hop”, “Vocal”, “Jazz+Funk”, “Fusion”, “Trance”, “Classical”, “Instrumental”, “Acid”, “House”, “Game”, “Sound Clip”, “Gospel”, “Noise”, “Alt. Rock”, “Bass”, “Soul”, “Punk”, “Space”, “Meditative”, “Instrumental Pop”, “Instrumental Rock”, “Ethnic”, “Gothic”, “Darkwave”, “Techno-Industrial”, “Electronic”, “Pop-Folk”, “Eurodance”, “Dream”, “Southern Rock”, “Comedy”, “Cult”, “Gangsta Rap”, “Top 40”, “Christian Rap”, “Pop/Punk”, “Jungle”, “Native American”, “Cabaret”, “New Wave”, “Phychedelic”, “Rave”, “Showtunes”, “Trailer”, “Lo-Fi”, “Tribal”, “Acid Punk”, “Acid Jazz”, “Polka”, “Retro”, “Musical”, “Rock & Roll”, “Hard Rock”, “Folk”, “Folk/Rock”, “National Folk”, “Swing”, “Fast-Fusion”, “Bebob”, “Latin”, “Revival”, “Celtic”, “Blue Grass”, “Avantegarde”, “Gothic Rock”, “Progressive Rock”, “Psychedelic Rock”, “Symphonic Rock”, “Slow Rock”, “Big Band”, “Chorus”, “Easy Listening”, “Acoustic”, “Humour”, “Speech”, “Chanson”, “Opera”, “Chamber Music”, “Sonata”, “Symphony”, “Booty Bass”, “Primus”, “Porn Groove”, “Satire”, “Slow Jam”, “Club”, “Tango”, “Samba”, “Folklore”, “Ballad”, “power Ballad”, “Rhythmic Soul”, “Freestyle”, “Duet”, “Punk Rock”, “Drum Solo”, “A Capella”, “Euro-House”, “Dance Hall”, “Goa”, “Drum & Bass”, “Club-House”, “Hardcore”, “Terror”, “indie”, “Brit Pop”, “Negerpunk”, “Polsk Punk”, “Beat”, “Christian Gangsta Rap”, “Heavy Metal”, “Black Metal”, “Crossover”, “Comteporary Christian”, “Christian Rock”, “Merengue”, “Salsa”, “Trash Metal”, “Anime”, “JPop”, “Synth Pop” })
.如果真结束


.子程序 取流派, 文本型, , 
.参数 流派编号, 整数型, , 

刷新流派信息 ()
.如果 (或者 (小于 (流派编号, 0), 大于 (流派编号, 相减 (取数组成员数 (流派), 1))))
    返回 (“”)
.否则
    返回 (流派 [相加 (流派编号, 1)])
.如果结束


.子程序 匹配流派, 字节型, , 给流派名称，返回编号，用于ID3V1
.参数 流派文本, 文本型, , 

.局部变量 X, 整数型, , , 

刷新流派信息 ()
.变量循环首 (1, 取数组成员数 (流派), 1, X)
    .如果真 (等于 (文本比较 (流派 [X], 流派文本, 假), 0))
        返回 (到字节 (相减 (X, 1)))
    .如果真结束
    
.变量循环尾 ()
返回 (到字节 (255))

.子程序 W2A_RemoveHead, 文本型, , 包含头部识别
.参数 Unicode, 字节集, , 

.局部变量 新长度, 整数型, , , 
.局部变量 原长度, 整数型, , , 
.局部变量 文本, 文本型, , , 

.如果真 (等于 (取字节集左边 (Unicode, 2), { 255, 254 }))
    赋值 (Unicode, 取字节集右边 (Unicode, 相减 (取字节集长度 (Unicode), 2)))
.如果真结束
赋值 (原长度, 相除 (取字节集长度 (Unicode), 2))
赋值 (新长度, WideCharToMultiByte (936, 0, Unicode, 原长度, 文本, 0, 0, 0))
赋值 (文本, 取空白文本 (新长度))
WideCharToMultiByte (936, 0, Unicode, 原长度, 文本, 新长度, 0, 0)
返回 (文本)

.子程序 A2W_AddHead, 字节集, , 包含头部添加
.参数 参数_Ansi文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (长度, 相乘 (MultiByteToWideChar (0, 0, 参数_Ansi文本, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (0, 0, 参数_Ansi文本, 取文本长度 (参数_Ansi文本), 返回值, 长度)
.如果真 (不等于 (取字节集左边 (返回值, 2), { 255, 254 }))
    赋值 (返回值, 相加 ({ 255, 254 }, 返回值))
.如果真结束
返回 (返回值)

.子程序 Unicode转Ansi, 文本型, , 
.参数 Unicode, 字节集, , 

.局部变量 新长度, 整数型, , , 
.局部变量 原长度, 整数型, , , 
.局部变量 文本, 文本型, , , 

.如果真 (等于 (取字节集左边 (Unicode, 2), { 255, 254 }))
     ' Unicode ＝ 取字节集右边 (Unicode, 取字节集长度 (Unicode) － 2)
.如果真结束
赋值 (原长度, 相减 (相除 (取字节集长度 (Unicode), 2), 1))
赋值 (新长度, WideCharToMultiByte (936, 0, Unicode, 原长度, 文本, 0, 0, 0))
赋值 (文本, 取空白文本 (新长度))
WideCharToMultiByte (936, 0, Unicode, 原长度, 文本, 新长度, 0, 0)
返回 (文本)

.子程序 UTF8转UNICODE, 字节集, , 
.参数 欲转换的字节集, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 Unicode字节集, 字节集, , , 

赋值 (长度, MultiByteToWideChar1 (65001, 0, 到文本 (欲转换的字节集), -1, {  }, 0))
赋值 (Unicode字节集, 取空白字节集 (相乘 (长度, 2)))
MultiByteToWideChar1 (65001, 0, 到文本 (欲转换的字节集), -1, Unicode字节集, 长度)
返回 (Unicode字节集)

.子程序 UNICODE转UTF8, 字节集, , 
.参数 欲转换的字节集, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 UTF8, 字节集, , , 

赋值 (长度, WideCharToMultiByte1 (65001, 0, 欲转换的字节集, -1, {  }, 0, 字符 (0), 假))
赋值 (UTF8, 取空白字节集 (相减 (长度, 1)))
WideCharToMultiByte1 (65001, 0, 欲转换的字节集, -1, UTF8, 长度, 字符 (0), 假)
返回 (UTF8)

.子程序 编码_从文本, 字节集, , 
.参数 文本, 文本型, , 
.参数 编码类型, 整数型, , 0 ISO 1 UTF-16 3 UFT-8

.局部变量 结果, 字节集, , , 

.判断开始 (等于 (编码类型, 0))
    赋值 (结果, 到字节集 (文本))
    返回 (结果)
.判断 (等于 (编码类型, 1))
    赋值 (结果, A2W_AddHead (文本))
    返回 (结果)
.判断 (等于 (编码类型, 3))
    赋值 (结果, UNICODE转UTF8 (A2W (文本)))
    返回 (结果)
.默认
    
.判断结束
返回 (到字节集 (文本))


.子程序 编码_到文本, 文本型, , 
.参数 文本, 字节集, , 
.参数 编码类型, 整数型, , 0 ISO 1 UTF-16 3 UFT-8

.局部变量 文本_备份, 字节集, , , 
.局部变量 X, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (文本_备份, 文本)
.判断开始 (等于 (编码类型, 0))
    返回 (到文本 (文本_备份))
.判断 (等于 (编码类型, 1))
    .判断开始 (等于 (取字节集左边 (文本_备份, 2), { 255, 254 }))
        .变量循环首 (3, 取字节集长度 (文本_备份), 1, X)
            .如果真 (并且 (等于 (求余数 (X, 2), 0), 小于 (文本_备份 [相减 (X, 1)], 255)))
                赋值 (返回值, 相加 (返回值, Unicode转Ansi (到字节集 (位或 (文本_备份 [相减 (X, 1)], 左移 (文本_备份 [X], 8))))))
            .如果真结束
            
        .变量循环尾 ()
    .判断 (等于 (取字节集左边 (文本_备份, 2), { 254, 255 }))
        .变量循环首 (3, 取字节集长度 (文本_备份), 1, X)
            .如果真 (并且 (等于 (求余数 (X, 2), 0), 小于 (文本_备份 [X], 255)))
                赋值 (返回值, 相加 (返回值, Unicode转Ansi (到字节集 (位或 (文本_备份 [X], 左移 (文本_备份 [相减 (X, 1)], 8))))))
            .如果真结束
            
        .变量循环尾 ()
    .默认
        
    .判断结束
    返回 (返回值)
    
    
    
    返回 (W2A_RemoveHead (文本_备份))
.判断 (等于 (编码类型, 3))
    返回 (Unicode转Ansi (UTF8转UNICODE (文本_备份)))
.默认
    
.判断结束
返回 (到文本 (文本))

.子程序 无符号整数到字节集, 字节集, , 
.参数 整数, 长整数型, , 
.参数 返回字节数, 整数型, , 

返回 (取字节集左边 (到字节集 (整数), 返回字节数))

.子程序 字节集反转, 字节集, , 
.参数 字节集, 字节集, , 

.局部变量 备份, 字节集, , , 
.局部变量 X, 整数型, , , 
.局部变量 临时字节, 字节型, , , 
.局部变量 长度, 整数型, , , 

赋值 (备份, 字节集)
赋值 (长度, 取字节集长度 (备份))
.变量循环首 (1, 相除 (长度, 2), 1, X)
    赋值 (临时字节, 备份 [X])
    赋值 (备份 [X], 备份 [相减 (相加 (长度, 1), X)])
    赋值 (备份 [相减 (相加 (长度, 1), X)], 临时字节)
.变量循环尾 ()
返回 (备份)

.子程序 读取ID3V1标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 接收参数, 音乐文件标签, 参考 可空, 

.局部变量 临时字节集, 字节集, , , 
.局部变量 文件号, 整数型, , , 

赋值 (文件号, 打开文件 (文件名, #读入, #无限制))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束


移动读写位置 (文件号, #文件尾, -128)
.如果真 (不等于 (读入字节集 (文件号, 3), { 84, 65, 71 })) ' TAG，有标签的标志
    关闭文件 (文件号)
    赋值 (文件号, 0)
    返回 (假)
.如果真结束
赋值 (接收参数.Title, 删首尾空 (到文本 (读入字节集 (文件号, 30))))
赋值 (接收参数.Artist, 删首尾空 (到文本 (读入字节集 (文件号, 30))))
赋值 (接收参数.Album, 删首尾空 (到文本 (读入字节集 (文件号, 30))))
赋值 (接收参数.Year, 删首尾空 (到文本 (读入字节集 (文件号, 4))))
赋值 (临时字节集, 读入字节集 (文件号, 30))
赋值 (接收参数.ContenttType, 取流派 (取字节集数据 (读入字节集 (文件号, 1), #字节型, )))
.如果 (等于 (取字节集中间 (临时字节集, 29, 1), { 0 }))
    赋值 (接收参数.Comment, 删首尾空 (到文本 (取字节集中间 (临时字节集, 1, 29))))
    赋值 (接收参数.TrackNumber, 到文本 (取字节集数据 (取字节集右边 (临时字节集, 1), #字节型, )))
.否则
    赋值 (接收参数.Comment, 删首尾空 (到文本 (临时字节集)))
    赋值 (接收参数.TrackNumber, “”)
.如果结束
赋值 (接收参数.Lyric, “”) ' V1没有歌词
关闭文件 (文件号)
赋值 (文件号, 0)
返回 (真)


.子程序 写入ID3V1标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 清空原有标签, 逻辑型, , 
.参数 忽略空标签, 逻辑型, , 若为真，则留空表示不修改，若为假，则删除此标签

.局部变量 文件号, 整数型, , , 
.局部变量 新标签, 字节集, , , 
.局部变量 Tag, 音乐文件标签, , , 

.如果真 (等于 (清空原有标签, 假))
    读取ID3V1标签 (文件名, Tag) ' 先读取原来的
.如果真结束

赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束

.如果真 (或者 (不等于 (标签.Title, “”), 取反 (忽略空标签))) ' 只要新标签不空，或者即使空了，却又不忽略（允许）空标签，则写入
    赋值 (Tag.Title, 标签.Title)
.如果真结束
.如果真 (或者 (不等于 (标签.Artist, “”), 取反 (忽略空标签)))
    赋值 (Tag.Artist, 标签.Artist)
.如果真结束
.如果真 (或者 (不等于 (标签.Album, “”), 取反 (忽略空标签)))
    赋值 (Tag.Album, 标签.Album)
.如果真结束
.如果真 (或者 (不等于 (标签.Year, “”), 取反 (忽略空标签)))
    赋值 (Tag.Year, 标签.Year)
.如果真结束
.如果真 (或者 (不等于 (标签.ContenttType, “”), 取反 (忽略空标签)))
    赋值 (Tag.ContenttType, 标签.ContenttType)
.如果真结束
.如果真 (或者 (不等于 (标签.Comment, “”), 取反 (忽略空标签)))
    赋值 (Tag.Comment, 标签.Comment)
.如果真结束
.如果真 (或者 (不等于 (标签.TrackNumber, “”), 取反 (忽略空标签)))
    赋值 (Tag.TrackNumber, 标签.TrackNumber)
.如果真结束
.如果真 (或者 (不等于 (标签.Lyric, “”), 取反 (忽略空标签)))
    赋值 (Tag.Lyric, 标签.Lyric) ' 其实这句可以不用
.如果真结束



赋值 (新标签, 相加 (到字节集 (“TAG”), 补足子标签 (Tag.Title, 30), 补足子标签 (Tag.Artist, 30), 补足子标签 (Tag.Album, 30), 补足子标签 (Tag.Year, 4), 补足子标签 (Tag.Comment, 29), 到字节集 (到字节 (到数值 (Tag.TrackNumber))), 到字节集 (匹配流派 (Tag.ContenttType))))


移动读写位置 (文件号, #文件尾, -128)
.如果 (等于 (读入字节集 (文件号, 3), 到字节集 (“TAG”))) ' 已经存在
    移动读写位置 (文件号, #现行位置, -3) ' 移回去覆盖
.否则
    移到文件尾 (文件号) ' 移到末尾
.如果结束

写出字节集 (文件号, 新标签)

关闭文件 (文件号)
赋值 (文件号, 0)
返回 (真)

.子程序 补足子标签, 字节集, , ID3V1写入时用
.参数 文本, 文本型, , 
.参数 长度, 整数型, , 

.局部变量 返回值, 字节集, , , 

赋值 (返回值, 到字节集 (文本))
.判断开始 (大于 (取字节集长度 (返回值), 长度))
    赋值 (返回值, 取字节集左边 (返回值, 长度))
.判断 (小于 (取字节集长度 (返回值), 长度))
    赋值 (返回值, 相加 (返回值, 取空白字节集 (相减 (长度, 取字节集长度 (返回值)))))
.默认
    
.判断结束
返回 (返回值)

.子程序 读取ID3V2标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 接收参数, 音乐文件标签, 参考 可空, 
.参数 图片接收参数, 字节集, 参考 可空, 用于接收V2图片

.局部变量 文件号, 整数型, , , 
.局部变量 编码类型, 字节型, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 子标签头_转换前, 字节集, , , 
.局部变量 子标签头, 文本型, , , 
.局部变量 子标签大小, 整数型, , , 
.局部变量 读写位置_备份, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 子标签大小数据, 字节集, , , 
.局部变量 全部标签数据, 字节集, , , 
.局部变量 首标签位置, 整数型, , , 
.局部变量 子标签位置, 整数型, , "0", 
.局部变量 临时_位置, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 

.如果真 (不等于 (到大写 (取文本右边 (文件名, 4)), “.MP3”))
    返回 (假)
.如果真结束
赋值 (文件号, 打开文件 (文件名, #读入, #无限制))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束

.如果真 (等于 (取数组成员数 (MP3_子标签标志), 0))
    赋值 (MP3_子标签标志, { “TIT2”, “TPE1”, “TALB”, “TYER”, “TCON”, “COMM”, “TRCK”, “USLT”, “APIC” })
.如果真结束

移到文件首 (文件号)
.如果真 (不等于 (读入字节集 (文件号, 4), { 73, 68, 51, 3 })) ' ID3开头标志
    关闭文件 (文件号)
    赋值 (文件号, 0)
    返回 (假)
.如果真结束
移动读写位置 (文件号, #现行位置, 2)

赋值 (子标签大小数据, 读入字节集 (文件号, 4))
.如果 (等于 (取字节集长度 (子标签大小数据), 4))
    赋值 (标签大小, 相加 (相乘 (位与 (子标签大小数据 [1], 127), 求次方 (128, 3)), 相乘 (位与 (子标签大小数据 [2], 127), 求次方 (128, 2)), 相乘 (位与 (子标签大小数据 [3], 127), 求次方 (128, 1)), 位与 (子标签大小数据 [4], 127)))
.否则
     ' 标签大小信息出错
    关闭文件 (文件号)
    赋值 (文件号, 0)
    返回 (假)
    
.如果结束

 ' ''屏蔽掉的程序块是用来排除头部无用数据的

 ' 全部标签数据 ＝ 读入字节集 (文件号, 标签大小)
 ' 移动读写位置 (文件号, #现行位置, －标签大小)

 ' .变量循环首 (1, 取数组成员数 (MP3_子标签标志), 1, X)
     ' 临时_位置 ＝ 寻找字节集 (全部标签数据, 到字节集 (MP3_子标签标志 [X]), )
     ' .如果真 (不等于 (临时_位置, -1)) ' 找到了
         ' 加入成员 (子标签位置, 临时_位置)
    .如果真结束
    
 ' .变量循环尾 ()
 ' 首标签位置 ＝ 取数组最小值 (子标签位置)
 ' 移动读写位置 (文件号, #文件首, 9 ＋ 首标签位置)

.判断循环首 (小于 (取读写位置 (文件号), 相加 (10, 标签大小)))
    赋值 (读写位置_备份, 取读写位置 (文件号)) ' 备份的是子标签头的位置
    
    赋值 (子标签头_转换前, 读入字节集 (文件号, 4))
    赋值 (子标签头, 到文本 (子标签头_转换前))
    赋值 (子标签大小, 取字节集数据 (字节集反转 (读入字节集 (文件号, 4)), #整数型, ))
     ' 循环判断
    .变量循环首 (1, 取数组成员数 (MP3_子标签标志), 1, X)
        .如果真 (等于 (MP3_子标签标志 [X], 子标签头))
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果 (小于或等于 (X, 取数组成员数 (MP3_子标签标志))) ' 利用变量循环的特点进行判断
         ' 能识别的子标签
        移动读写位置 (文件号, #现行位置, 2) ' 移过10字节子标签头的最后两个字节
        赋值 (编码类型, 取字节集数据 (读入字节集 (文件号, 1), #字节型, )) ' 读入文本标签的编码类型
        赋值 (临时字节集, 读入字节集 (文件号, 相减 (子标签大小, 1)))
        .判断开始 (等于 (X, 1)) ' 歌曲标题
            赋值 (接收参数.Title, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 2)) ' 歌手
            赋值 (接收参数.Artist, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 3)) ' 专辑名
            赋值 (接收参数.Album, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 4)) ' 年份
            赋值 (接收参数.Year, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 5)) ' 流派
            赋值 (接收参数.ContenttType, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 6)) ' 备注
            赋值 (接收参数.Comment, 编码_到文本 (取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 寻找字节集 (临时字节集, { 0 }, ))), 编码类型))
        .判断 (等于 (X, 7)) ' 编号
            赋值 (接收参数.TrackNumber, 编码_到文本 (临时字节集, 编码类型))
        .判断 (等于 (X, 8)) ' 歌词
            赋值 (接收参数.Lyric, 编码_到文本 (取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 寻找字节集 (临时字节集, { 0 }, ))), 编码类型))
        .判断 (等于 (X, 9)) ' 专辑图
            .如果真 (等于 (是否为空 (图片接收参数), 假))
                赋值 (图片接收参数, 处理专辑图片_V2 (临时字节集))
            .如果真结束
            
        .默认
            
        .判断结束
        
    .否则
         ' 不能识别的子标签，跳过
        移动读写位置 (文件号, #现行位置, 相加 (2, 子标签大小)) ' 2是最后两个字节（Flag，直接忽略）
    .如果结束
    
    .如果真 (小于 (取读写位置 (文件号), 相加 (读写位置_备份, 10))) ' 文件混乱造成移动指针出错，中断读取（至少该有子标签头所占的10个字节，有等号，即空子标签也不行）。另外，V2子标签头必须是文本（暂时定为允许空标签、允许空子标签头）
        关闭文件 (文件号)
        赋值 (文件号, 0)
        返回 (真)
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
赋值 (文件号, 0)
返回 (真)


.子程序 写入ID3V2标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 清空原有标签, 逻辑型, 可空, 默认假
.参数 忽略空标签, 逻辑型, , 若为真，则留空表示不修改，若为假，则删除此标签
.参数 图片, 字节集, 可空, 仅对V2有效，若留空则不修改
.参数 编码类型, 字节型, , 0 ISO 1 UTF-16 3 UFT-8
.参数 匿名参数_27757, 空白型, , 

.局部变量 文件号, 整数型, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 额外子标签, 字节集, , , 用于保存非本函数能涉及的子标签
.局部变量 缓冲内容, 字节集, , , 临时保存下一步追加到“额外子标签”变量里的数据
.局部变量 子标签头, 文本型, , , 例如“TIT2”
.局部变量 子标签头_转换前, 字节集, , , “子标签头”变量转换前的内容
.局部变量 子标签大小, 整数型, , , ID3V2标准中的大小（仅文本）
.局部变量 子标签大小数据, 字节集, , , “标签大小”的原数据
.局部变量 最后完整子标签, 整数型, , , 用于记录最后一个完好的、可识别的子标签，当读取中断时，用作删除原有标签的依据，此变量值为最后完整子标签末尾位置的((下一个位置))！
.局部变量 X, 整数型, , , 
.局部变量 子标签全内容, 字节集, , , 4字节头部 + 4字节大小 + 2字节Flag + 文本内容
.局部变量 子标签文本, 文本型, , , 仅 文本内容
.局部变量 新标签, 字节集, , , 用于写入的新标签（全部信息）
.局部变量 编码后的文本, 字节集, , , 单个子标签的文本内容，进行了编码处理，不包括一字节的编码类型，若是备注或歌词，则已包含开头4字节的语言信息
.局部变量 读写位置_备份, 整数型, , , 循环中用于位置判断（纠错）
.局部变量 全部标签数据, 字节集, , , 
.局部变量 临时_位置, 整数型, , , 
.局部变量 子标签位置, 整数型, , "0", 
.局部变量 首标签位置, 整数型, , , 

.如果真 (是否为空 (清空原有标签))
    赋值 (清空原有标签, 假)
.如果真结束
赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移到文件首 (文件号)

.如果真 (等于 (取数组成员数 (MP3_子标签标志), 0))
    赋值 (MP3_子标签标志, { “TIT2”, “TPE1”, “TALB”, “TYER”, “TCON”, “COMM”, “TRCK”, “USLT”, “APIC” })
.如果真结束

.如果真 (等于 (读入字节集 (文件号, 4), { 73, 68, 51, 3 })) ' ID3开头标志
     ' 原来有标签
    移动读写位置 (文件号, #现行位置, 2)
    赋值 (子标签大小数据, 读入字节集 (文件号, 4))
    .如果 (等于 (取字节集长度 (子标签大小数据), 4))
        赋值 (标签大小, 相加 (相乘 (位与 (子标签大小数据 [1], 127), 求次方 (128, 3)), 相乘 (位与 (子标签大小数据 [2], 127), 求次方 (128, 2)), 相乘 (位与 (子标签大小数据 [3], 127), 求次方 (128, 1)), 位与 (子标签大小数据 [4], 127)))
    .否则
        赋值 (标签大小, 0)
    .如果结束
    
    
     ' 全部标签数据 ＝ 读入字节集 (文件号, 标签大小)
     ' 移动读写位置 (文件号, #现行位置, －标签大小)
    
     ' .变量循环首 (1, 取数组成员数 (MP3_子标签标志), 1, X) ' 扫描第一个需要的子标签位置，有些文件头部之后会有一些奇怪的数据
         ' 临时_位置 ＝ 寻找字节集 (全部标签数据, 到字节集 (MP3_子标签标志 [X]), )
         ' .如果真 (不等于 (临时_位置, -1)) ' 找到了
             ' 加入成员 (子标签位置, 临时_位置)
        .如果真结束
        
     ' .变量循环尾 ()
     ' 首标签位置 ＝ 取数组最小值 (子标签位置)
     ' 移动读写位置 (文件号, #文件首, 9 ＋ 首标签位置)
    
    
    赋值 (最后完整子标签, 10) ' 初始化
    .判断循环首 (小于 (取读写位置 (文件号), 相加 (10, 标签大小))) ' 遍历原有子标签，并备份
        赋值 (子标签头_转换前, 读入字节集 (文件号, 4))
        赋值 (子标签头, 到文本 (子标签头_转换前))
        
        赋值 (子标签大小, 取字节集数据 (字节集反转 (读入字节集 (文件号, 4)), #整数型, ))
         ' 循环判断
        .变量循环首 (1, 取数组成员数 (MP3_子标签标志), 1, X)
            赋值 (子标签文本, 多项选择 (X, 标签.Title, 标签.Artist, 标签.Album, 标签.Year, 标签.ContenttType, 标签.Comment, 标签.TrackNumber, 标签.Lyric, “此处是专辑图，专辑图不用管什么留空不留空，所以在下面的判断条件里只需让‘且’左半边语句判断，即右半边置为真，此处设为非空文本的目的就在于此”))
            .如果真 (并且 (等于 (MP3_子标签标志 [X], 子标签头), 或者 (不等于 (子标签文本, “”), 等于 (忽略空标签, 假)))) ' 若发现是在修改范围内的，并且该标签不留空（可以这么理解：若标签头不等（不在修改范围内，需要备份） or (留空 and 忽略)（又留空，又忽略空标签，则不修改（备份）），则((不))跳出循环，则(X>数组成员数)（备份））
                跳出循环 ()
            .如果真结束
            
        .变量循环尾 ()
        赋值 (读写位置_备份, 取读写位置 (文件号)) ' 这里备份的是“子标签大小”4个字节后的位置
        .如果 (或者 (大于 (X, 取数组成员数 (MP3_子标签标志)), 并且 (等于 (X, 取数组成员数 (MP3_子标签标志)), 是否为空 (图片)))) ' 利用变量循环的特点进行判断
             ' 超过能识别的子标签头范围，或者是专辑图片，但又要求不修改图片时，需要备份
            移动读写位置 (文件号, #现行位置, -8) ' 移回子标签头
            赋值 (缓冲内容, 读入字节集 (文件号, 相加 (子标签大小, 10))) ' 先写入缓存
            
        .否则
             ' 能识别的子标签，直接跳过
            赋值 (读写位置_备份, 取读写位置 (文件号))
            移动读写位置 (文件号, #现行位置, 相加 (2, 子标签大小)) ' 2是最后两个字节（Flag，直接忽略）
            
        .如果结束
        
        .如果 (小于 (取读写位置 (文件号), 相加 (读写位置_备份, 2)))
             ' 文件混乱造成移动指针出错，中断读取，剩下的子标签不管了（空子标签也会引起中断），另外，非文本型的子标签头也认为是出错（暂时定为允许空标签、允许非文本子标签头）
            跳出循环 ()
        .否则
            .如果真 (小于或等于 (取读写位置 (文件号), 相加 (标签大小, 10))) ' 确认子标签末尾没有越过整个标签
                赋值 (额外子标签, 相加 (额外子标签, 缓冲内容)) ' 确定子标签是完好的，从缓存添加
                赋值 (最后完整子标签, 取读写位置 (文件号)) ' 刷新位置
                
            .如果真结束
            
        .如果结束
        
    .判断循环尾 ()
    
    
    
    移到文件首 (文件号)
    删除数据 (文件号, 最后完整子标签) ' 删除原有标签
    
.如果真结束
.如果真 (清空原有标签)
    赋值 (额外子标签, {  })
.如果真结束


赋值 (新标签, { 73, 68, 51, 3, 0, 0, 0, 0, 0, 0 })
.变量循环首 (1, 取数组成员数 (MP3_子标签标志), 1, X)
    赋值 (子标签文本, 多项选择 (X, 标签.Title, 标签.Artist, 标签.Album, 标签.Year, 标签.ContenttType, 标签.Comment, 标签.TrackNumber, 标签.Lyric, “图片写入尚未完成”))
    .如果真 (等于 (X, 取数组成员数 (MP3_子标签标志)))
         ' 专辑图片，特殊处理
        .如果真 (等于 (是否为空 (图片), 假))
            .如果真 (不等于 (图片, {  }))
                赋值 (编码后的文本, 生成V2图片标签 (图片))
                赋值 (子标签大小, 取字节集长度 (编码后的文本))
                赋值 (新标签, 相加 (新标签, 到字节集 (MP3_子标签标志 [X]), 字节集反转 (到字节集 (子标签大小)), { 0, 0 }, 编码后的文本))
                
            .如果真结束
            
        .如果真结束
        
        到循环尾 () ' 不按照普通流程处理
    .如果真结束
    .如果真 (等于 (子标签文本, “”))
        到循环尾 ()
    .如果真结束
    .如果 (或者 (等于 (X, 6), 等于 (X, 8)))
        赋值 (编码后的文本, 相加 (到字节集 (编码类型), { 99, 104, 105, 0 }, 编码_从文本 (子标签文本, 编码类型))) ' 这4个字节是“chi”，即中文
    .否则
        赋值 (编码后的文本, 相加 (到字节集 (编码类型), 编码_从文本 (子标签文本, 编码类型)))
    .如果结束
    
    赋值 (子标签大小, 取字节集长度 (编码后的文本))
    赋值 (新标签, 相加 (新标签, 到字节集 (MP3_子标签标志 [X]), 字节集反转 (到字节集 (子标签大小)), { 0, 0 }, 编码后的文本))
.变量循环尾 ()
赋值 (新标签, 相加 (新标签, 额外子标签)) ' 追加原有标签

赋值 (标签大小, 相减 (取字节集长度 (新标签), 10))

赋值 (子标签大小数据, { 0, 0, 0, 0 })
赋值 (子标签大小数据 [4], 求余数 (标签大小, 128))
赋值 (标签大小, 整除 (标签大小, 128))
赋值 (子标签大小数据 [3], 求余数 (标签大小, 128))
赋值 (标签大小, 整除 (标签大小, 128))
赋值 (子标签大小数据 [2], 求余数 (标签大小, 128))
赋值 (标签大小, 整除 (标签大小, 128))
赋值 (子标签大小数据 [1], 求余数 (标签大小, 128))

赋值 (新标签, 字节集替换 (新标签, 7, 4, 子标签大小数据)) ' 更新整个标签大小


移到文件首 (文件号)
插入字节集 (文件号, 新标签) ' 在首部写入新标签
关闭文件 (文件号)
赋值 (文件号, 0)

返回 (真)

.子程序 处理专辑图片_V2, 字节集, , 处理ID3V2中的专辑图片，返回真正图片字节集
.参数 子标签内容, 字节集, , 

.局部变量 位置指针, 整数型, , , 
.局部变量 图片类型, 文本型, , , 
.局部变量 头部标志, 字节集, , , 

赋值 (位置指针, 寻找字节集 (子标签内容, { 105, 109, 97, 103, 101, 47 }, 位置指针)) ' “image/”
赋值 (图片类型, 到大写 (到文本 (取字节集中间 (子标签内容, 相加 (位置指针, 6), 3))))
返回 (提取图片 (子标签内容, 图片类型))

.子程序 生成V2图片标签, 字节集, , 
.参数 图片, 字节集, , 

.局部变量 类型, 文本型, , , 
.局部变量 附加值, 字节集, , , 

赋值 (类型, 判断图片类型 (图片))
.如果真 (等于 (类型, “”)) ' 理论上说不会在这里判断
    返回 ({  })
.如果真结束
赋值 (附加值, { 0, 105, 109, 97, 103, 101, 47 }) ' '\0'+{image/}
赋值 (附加值, 相加 (附加值, 到字节集 (到小写 (类型))))
赋值 (附加值, 相加 (附加值, { 0, 3, 0 }))
返回 (相加 (附加值, 图片))

.子程序 判断图片类型, 文本型, , 支持JPEG BMP GIF，返回扩展名
.参数 图片, 字节集, 参考, 

.判断开始 (等于 (取字节集左边 (图片, 取字节集长度 (#JPG文件头)), #JPG文件头)) ' JPG
    返回 (“JPEG”)
.判断 (等于 (取字节集左边 (图片, 2), 到字节集 (“BM”)))
    返回 (“BMP”)
.判断 (等于 (取字节集左边 (图片, 3), 到字节集 (“GIF”)))
    返回 (“GIF”)
.判断 (等于 (取字节集左边 (图片, 4), { 137, 80, 78, 71 })) ' PNG
    返回 (“”)
     ' 返回 (“PNG”)
.默认
    返回 (“”)
.判断结束




.子程序 初始化WMA信息, 空白型, , 
.局部变量 已经初始化, 逻辑型, 静态, , 

.如果真 (已经初始化)
    返回 ()
.如果真结束
赋值 (已经初始化, 真)
赋值 (WMA_HEAD, { 48, 38, 178, 117, 142, 102, 207, 17, 166, 217, 0, 170, 0, 98, 206, 108 })
赋值 (WMA_STANDTAG, { 51, 38, 178, 117, 142, 102, 207, 17, 166, 217, 0, 170, 0, 98, 206, 108 })
赋值 (WMA_EXTAG, { 64, 164, 208, 210, 7, 227, 210, 17, 151, 240, 0, 160, 201, 94, 168, 80 })
赋值 (WMA_Flag [1], “WM/AlbumTitle”)
赋值 (WMA_Flag [2], “WM/EncodedBy”)
赋值 (WMA_Flag [3], “WM/Genre”)
赋值 (WMA_Flag [4], “WM/Lyrics”)
赋值 (WMA_Flag [5], “WM/Track”)
赋值 (WMA_Flag [6], “WM/Year”)
赋值 (WMA_Flag [7], “WM/URL”)
赋值 (WMA_Flag [8], “WM/UserWebURL”)
赋值 (WMA_Flag [9], “WMFSDKVersion”)
赋值 (WMA_Flag [10], “WM/TrackNumber”)
赋值 (WMA_Flag [11], “WM/Picture”)

.子程序 读取WMA标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 接收参数1, 音乐文件标签, 参考 可空, 
.参数 接收参数2, WMA标签, 参考 可空, 
.参数 图片, 字节集, 参考 可空, 

.局部变量 文件号, 整数型, , , 
.局部变量 Head, 字节集, , , 文件头
.局部变量 Size, 长整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 Tagsize, 短整数型, , "5", 5个正常标签的大小
.局部变量 Temps, 字节集, , , 临时存储变量
.局部变量 Temps_Texted, 文本型, , , 转成Ansi的临时变量
.局部变量 ExNo, 短整数型, , , 扩展标签数
.局部变量 Exsize, 短整数型, , , 扩展标签数量
.局部变量 Reserve, 短整数型, , , 
.局部变量 ExValueSize, 整数型, , , 扩展标签长度
.局部变量 PictureSize, 整数型, , , 
.局部变量 TrackNo, 整数型, , , 音轨号
.局部变量 ExValue, 字节集, , , 
.局部变量 WholeSize, 整数型, , , 标签区的总长度
.局部变量 读写位置_备份, 整数型, , , 
.局部变量 Tag, WMA标签, , , 
.局部变量 图片格式, 文本型, , , 

.如果真 (不等于 (到大写 (取文本右边 (文件名, 4)), “.WMA”))
    返回 (假)
.如果真结束
 ' 初始化工作
初始化WMA信息 ()

赋值 (文件号, 打开文件 (文件名, 1, 1))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移到文件首 (文件号)
赋值 (Head, 读入字节集 (文件号, 16))
.如果真 (不等于 (Head, WMA_HEAD))
    关闭文件 (文件号)
    返回 (假)
.如果真结束
赋值 (Size, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
赋值 (WholeSize, Size)
移动读写位置 (文件号, #文件首, 30)
.判断循环首 (小于 (取读写位置 (文件号), WholeSize))
    赋值 (Head, 读入字节集 (文件号, 16))
    赋值 (Size, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
    .判断开始 (等于 (Head, WMA_STANDTAG))
        .变量循环首 (1, 5, 1, X)
            赋值 (Tagsize [X], 取字节集数据 (读入字节集 (文件号, 2), #短整数型, ))
        .变量循环尾 ()
        .变量循环首 (1, 5, 1, X)
            .如果真 (大于 (Tagsize [X], 0))
                赋值 (Temps, 读入字节集 (文件号, Tagsize [X]))
                .判断开始 (等于 (X, 1))
                    赋值 (Tag.Title, Unicode转Ansi (Temps))
                .判断 (等于 (X, 2))
                    赋值 (Tag.Artist, Unicode转Ansi (Temps))
                .判断 (等于 (X, 3))
                    赋值 (Tag.Copyright, Unicode转Ansi (Temps))
                .判断 (等于 (X, 4))
                    赋值 (Tag.Description, Unicode转Ansi (Temps))
                .默认
                    
                .判断结束
                
            .如果真结束
            
        .变量循环尾 ()
    .判断 (等于 (Head, WMA_EXTAG))
        赋值 (ExNo, 取字节集数据 (读入字节集 (文件号, 2), #短整数型, ))
        .变量循环首 (1, ExNo, 1, X)
            赋值 (Exsize, 取字节集数据 (读入字节集 (文件号, 2), #短整数型, ))
            赋值 (Temps, 读入字节集 (文件号, Exsize))
            赋值 (Temps_Texted, Unicode转Ansi (Temps))
            赋值 (Reserve, 取字节集数据 (读入字节集 (文件号, 2), #短整数型, ))
            赋值 (ExValueSize, 取字节集数据 (读入字节集 (文件号, 2), #整数型, )) ' 整数型，没有错，因为易语言没有[无符号]整数，有时图片60多K，用短整数会出现负数，哎
            
            
            .如果 (等于 (Reserve, 3))
                赋值 (TrackNo, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
                .判断开始 (等于 (Temps_Texted, WMA_Flag [10]))
                    赋值 (Tag.TrackNumber, 到文本 (TrackNo))
                .判断 (等于 (Temps_Texted, WMA_Flag [5]))
                    赋值 (Tag.Track, 到文本 (TrackNo))
                .默认
                    
                .判断结束
                
            .否则
                
                .如果真 (大于 (ExValueSize, 0))
                    赋值 (ExValue, 读入字节集 (文件号, ExValueSize))
                    .判断开始 (等于 (Temps_Texted, WMA_Flag [1]))
                        赋值 (Tag.Album, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [2]))
                        赋值 (Tag.EncodedBy, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [3]))
                        赋值 (Tag.Genre, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [4]))
                        赋值 (Tag.Lyrics, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [5]))
                        赋值 (Tag.Track, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [6]))
                        赋值 (Tag.Year, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [7]))
                        赋值 (Tag.URL, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [8]))
                        赋值 (Tag.UserWebURL, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [9]))
                        赋值 (Tag.Version, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [10]))
                        赋值 (Tag.TrackNumber, Unicode转Ansi (ExValue))
                    .判断 (等于 (Temps_Texted, WMA_Flag [11]))
                        .如果真 (等于 (是否为空 (图片), 假))
                            赋值 (图片, 处理专辑图片_WMA (ExValue))
                        .如果真结束
                        
                        
                    .默认
                        
                    .判断结束
                    
                .如果真结束
                
            .如果结束
            
            
            
            
            
        .变量循环尾 ()
        
        
    .默认
        
        赋值 (读写位置_备份, 取读写位置 (文件号))
        移动读写位置 (文件号, #现行位置, 相减 (Size, 24))
        
        .如果真 (小于或等于 (取读写位置 (文件号), 读写位置_备份))
            关闭文件 (文件号)
            返回 (真)
        .如果真结束
        
    .判断结束
    
    
.判断循环尾 ()
关闭文件 (文件号)

.如果真 (等于 (是否为空 (接收参数2), 假))
    赋值 (接收参数2, Tag)
.如果真结束
.如果真 (等于 (是否为空 (接收参数1), 假))
    赋值 (接收参数1.Title, Tag.Title)
    赋值 (接收参数1.Artist, Tag.Artist)
    赋值 (接收参数1.Album, Tag.Album)
    赋值 (接收参数1.Year, Tag.Year)
    赋值 (接收参数1.ContenttType, Tag.Genre)
    赋值 (接收参数1.Comment, Tag.Description)
    赋值 (接收参数1.TrackNumber, Tag.TrackNumber) ' ''''''''''
    赋值 (接收参数1.Lyric, Tag.Lyrics)
.如果真结束


返回 (真)

.子程序 写入WMA标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 清空原有标签, 逻辑型, 可空, 默认假
.参数 忽略空标签, 逻辑型, , 若为真，则留空表示不修改，若为假，则删除此标签
.参数 图片, 字节集, 可空, 空表示不修改
.参数 匿名参数_27874, 空白型, , 

.局部变量 文件号, 整数型, , , 
.局部变量 写入的图片, 字节集, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 Tag, WMA标签, , , 
.局部变量 标签大小, 长整数型, , , 
.局部变量 新标签帧_基本, 字节集, , , 
.局部变量 新标签帧_扩展, 字节集, , , 
.局部变量 基本标签, 字节集, , "5", 
.局部变量 扩展标签文本, 文本型, , , 
.局部变量 扩展标签数, 短整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 子标签头, 字节集, , , 
.局部变量 子标签大小, 长整数型, , , 
.局部变量 读写位置_备份, 整数型, , , 
.局部变量 原有标签帧, 字节集, , , 

初始化WMA信息 ()
.如果真 (是否为空 (清空原有标签))
    赋值 (清空原有标签, 假)
.如果真结束
.如果真 (等于 (清空原有标签, 假))
    .如果 (是否为空 (图片))
        读取WMA标签 (文件名, , Tag, 写入的图片) ' 留空，不改图片，则读取原来的
    .否则
        读取WMA标签 (文件名, , Tag) ' 有给图片，写新的，不读取原来的
        赋值 (写入的图片, 图片)
    .如果结束
    
.如果真结束


赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移到文件首 (文件号)
.如果真 (不等于 (读入字节集 (文件号, 16), WMA_HEAD))
    关闭文件 (文件号)
    返回 (假)
.如果真结束


 ' 替换子标签
.如果真 (或者 (不等于 (标签.Title, “”), 取反 (忽略空标签))) ' 只要新标签不空，或者即使空了，却又不忽略（允许）空标签，则写入
    赋值 (Tag.Title, 标签.Title)
.如果真结束
.如果真 (或者 (不等于 (标签.Artist, “”), 取反 (忽略空标签)))
    赋值 (Tag.Artist, 标签.Artist)
.如果真结束
.如果真 (或者 (不等于 (标签.Album, “”), 取反 (忽略空标签)))
    赋值 (Tag.Album, 标签.Album)
.如果真结束
.如果真 (或者 (不等于 (标签.Year, “”), 取反 (忽略空标签)))
    赋值 (Tag.Year, 标签.Year)
.如果真结束
.如果真 (或者 (不等于 (标签.ContenttType, “”), 取反 (忽略空标签)))
    赋值 (Tag.Genre, 标签.ContenttType)
.如果真结束
.如果真 (或者 (不等于 (标签.Comment, “”), 取反 (忽略空标签)))
    赋值 (Tag.Description, 标签.Comment)
.如果真结束
.如果真 (或者 (不等于 (标签.TrackNumber, “”), 取反 (忽略空标签)))
    赋值 (Tag.Track, 标签.TrackNumber)
.如果真结束
.如果真 (或者 (不等于 (标签.Lyric, “”), 取反 (忽略空标签)))
    赋值 (Tag.Lyrics, 标签.Lyric)
.如果真结束
 ' 准备新标签
赋值 (基本标签 [1], 选择 (不等于 (Tag.Title, “”), A2W (Tag.Title), {  }))
赋值 (基本标签 [2], 选择 (不等于 (Tag.Artist, “”), A2W (Tag.Artist), {  }))
赋值 (基本标签 [3], 选择 (不等于 (Tag.Copyright, “”), A2W (Tag.Copyright), {  }))
赋值 (基本标签 [4], 选择 (不等于 (Tag.Description, “”), A2W (Tag.Description), {  }))
赋值 (基本标签 [5], {  })

 ' 基本标签
赋值 (新标签帧_基本, 相加 (WMA_STANDTAG, 取空白字节集 (8)))
.变量循环首 (1, 取数组成员数 (基本标签), 1, X)
    赋值 (新标签帧_基本, 相加 (新标签帧_基本, 到字节集 (到短整数 (取字节集长度 (基本标签 [X])))))
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (基本标签), 1, X)
    赋值 (新标签帧_基本, 相加 (新标签帧_基本, 基本标签 [X]))
.变量循环尾 ()
赋值 (新标签帧_基本, 字节集替换 (新标签帧_基本, 相加 (取字节集长度 (WMA_STANDTAG), 1), 8, 到字节集 (到长整数 (取字节集长度 (新标签帧_基本)))))


 ' 扩展标签
赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, WMA_EXTAG))
赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 取空白字节集 (10))) ' 前8个是整个扩展标签大小，后2个是子标签数量（先留空）
.变量循环首 (1, 相减 (取数组成员数 (WMA_Flag), 1), 1, X) ' 留一个图片特殊处理
    赋值 (扩展标签文本, 多项选择 (X, Tag.Album, Tag.EncodedBy, Tag.Genre, Tag.Lyrics, Tag.Track, Tag.Year, Tag.URL, Tag.UserWebURL, Tag.Version, Tag.TrackNumber))
    .如果真 (等于 (扩展标签文本, “”))
        到循环尾 ()
    .如果真结束
    
    赋值 (临时字节集, A2W (WMA_Flag [X])) ' 写入子标签头
    赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 到字节集 (到短整数 (取字节集长度 (临时字节集)))))
    赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 临时字节集))
    
    赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, { 0, 0 })) ' 标志区
    
    赋值 (临时字节集, A2W (扩展标签文本)) ' 写入标签文本
    赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 到字节集 (到短整数 (取字节集长度 (临时字节集)))))
    赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 临时字节集))
    
    赋值 (扩展标签数, 相加 (扩展标签数, 1))
.变量循环尾 ()
.如果真 (不等于 (写入的图片, {  }))
     ' 先计算整个图片标签的大小
    赋值 (临时字节集, A2W (相加 (“image/”, 到小写 (判断图片类型 (写入的图片)))))
    赋值 (子标签大小, 相加 (取字节集长度 (写入的图片), 取字节集长度 (临时字节集), 7))
    .如果真 (小于或等于 (子标签大小, 65535)) ' 图片大小必须在范围内，否则将破坏整个文件
        赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 到字节集 (到短整数 (取字节集长度 (A2W (WMA_Flag [11])))))) ' 写入子标签头部
        赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, A2W (WMA_Flag [11])))
        
        赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, { 1, 0 })) ' 标志区（图片的值是1）
        
        
        赋值 (新标签帧_扩展, 相加 (新标签帧_扩展, 到字节集 (无符号整数到字节集 (子标签大小, 2)), { 0 }, 到字节集 (到整数 (取字节集长度 (写入的图片))), 临时字节集, { 0, 0 }, 写入的图片)) ' 写入图片数据
        赋值 (扩展标签数, 相加 (扩展标签数, 1))
        
    .如果真结束
    
.如果真结束

赋值 (新标签帧_扩展, 字节集替换 (新标签帧_扩展, 相加 (取字节集长度 (WMA_EXTAG), 1), 8, 到字节集 (到长整数 (取字节集长度 (新标签帧_扩展))))) ' 写入标签大小
赋值 (新标签帧_扩展, 字节集替换 (新标签帧_扩展, 相加 (取字节集长度 (WMA_EXTAG), 8, 1), 2, 到字节集 (扩展标签数))) ' 写入子标签数
 ' 准备新标签完毕


 ' 开始读取和备份原有标签
赋值 (标签大小, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
移动读写位置 (文件号, #文件首, 30)

.判断循环首 (小于 (取读写位置 (文件号), 标签大小))
    赋值 (读写位置_备份, 取读写位置 (文件号))
    赋值 (子标签头, 读入字节集 (文件号, 16))
    赋值 (子标签大小, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
    .如果 (并且 (不等于 (子标签头, WMA_STANDTAG), 不等于 (子标签头, WMA_EXTAG))) ' 不是能读取的标签帧
        移动读写位置 (文件号, #现行位置, -24) ' 移动回标签帧头
        赋值 (原有标签帧, 相加 (原有标签帧, 读入字节集 (文件号, 子标签大小))) ' 备份额外标签
    .否则
        移动读写位置 (文件号, #现行位置, 相减 (子标签大小, 24))
    .如果结束
    
    .如果真 (小于 (取读写位置 (文件号), 相加 (读写位置_备份, 24))) ' 出错了，不管了
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
 ' 备份完毕

 ' 开始写
移动读写位置 (文件号, #文件首, 30)
删除数据 (文件号, 相减 (标签大小, 30)) ' 删除原标签
移动读写位置 (文件号, #文件首, 30)
插入字节集 (文件号, 新标签帧_基本, 新标签帧_扩展, 原有标签帧) ' 依次插入

移动读写位置 (文件号, #文件首, 16)
写出数据 (文件号, 到长整数 (相加 (30, 取字节集长度 (新标签帧_基本), 取字节集长度 (新标签帧_扩展), 取字节集长度 (原有标签帧)))) ' 写出大小

关闭文件 (文件号)
返回 (真)




 ' .如果 (等于 (假))
     ' StandardTagOffset ＝ 30 ＋ 16  ' 若原来没有则定义在最前面
     ' 移动读写位置 (文件号, #文件首, 30)
     ' 插入字节集 (文件号, WMA_STANDTAG)
     ' Size ＝ 0
    
.否则
     ' 移动读写位置 (文件号, #文件首, StandardTagOffset)
     ' Size ＝ 取字节集数据 (读入字节集 (文件号, 8), #长整数型, )
     ' 移动读写位置 (文件号, #文件首, StandardTagOffset)
     ' 删除数据 (文件号, Size － 16)  ' 删除原有标签帧
.如果结束




 ' ' 准备基本帧
 ' 移动读写位置 (文件号, #文件首, StandardTagOffset)
 ' StandardTag [1] ＝ 选择 (Tag.Title ≠ “”, A2W (Tag.Title), {  })
 ' StandardTag [2] ＝ 选择 (Tag.Artist ≠ “”, A2W (Tag.Artist), {  })
 ' StandardTag [3] ＝ 选择 (Tag.Copyright ≠ “”, A2W (Tag.Copyright), {  })
 ' StandardTag [4] ＝ 选择 (Tag.Description ≠ “”, A2W (Tag.Description), {  })
 ' StandardTag [5] ＝ {  }

 ' FrameSize ＝ 10 ＋ 24
 ' .变量循环首 (1, 5, 1, X)
     ' TagSize [X] ＝ 取字节集长度 (StandardTag [X])
     ' FrameSize ＝ FrameSize ＋ TagSize [X]
 ' .变量循环尾 ()

 ' ' 写入基本帧
 ' 插入字节集 (文件号, 到字节集 (FrameSize))  ' 填充帧大小数据

 ' .变量循环首 (1, 5, 1, X)
     ' 插入字节集 (文件号, 到字节集 (TagSize [X]))
 ' .变量循环尾 ()

 ' 插入字节集 (文件号, A2W (Tag.Title))
 ' 插入字节集 (文件号, A2W (Tag.Artist))
 ' 插入字节集 (文件号, A2W (Tag.Copyright))
 ' 插入字节集 (文件号, A2W (Tag.Description))
 ' ' 第五个未知用途
 ' .如果真 (大于 ())
     ' ExTagOffset ＝ ExTagOffset ＋ FrameSize － Size
.如果真结束
 ' 改变量 ＝ 改变量 ＋ FrameSize － Size



 ' .如果 (等于 (假))
     ' ExTagOffset ＝ 30 ＋ 16  ' 若原来没有则定义在最前面
     ' 移动读写位置 (文件号, #文件首, 30)
     ' 插入字节集 (文件号, WMA_EXTAG)
     ' Size ＝ 0
    
.否则
     ' 移动读写位置 (文件号, #文件首, ExTagOffset)
     ' Size ＝ 取字节集数据 (读入字节集 (文件号, 8), #长整数型, )
     ' 移动读写位置 (文件号, #文件首, ExTagOffset)
     ' 删除数据 (文件号, Size － 16)  ' 删除原有标签帧
.如果结束


 ' 移动读写位置 (文件号, #文件首, ExTagOffset)
 ' 插入字节集 (文件号, 取空白字节集 (8))  ' 预填充帧大小数据
 ' 插入字节集 (文件号, 取空白字节集 (2))  ' 预填充ExNo
 ' .变量循环首 (1, 10, 1, X)
     ' Text_Now ＝ 多项选择 (X, Tag.Album, Tag.EncodedBy, Tag.Genre, Tag.Lyrics, Tag.Track, Tag.Year, Tag.URL, Tag.UserWebURL, Tag.Version, Tag.TrackNumber)
     ' .如果真 (等于 (“”))
         ' 到循环尾 ()
    .如果真结束
    
     ' ExSize ＝ 取字节集长度 (A2W (WMA_Flag [X]))
     ' 插入字节集 (文件号, 到字节集 (ExSize))
     ' 插入字节集 (文件号, A2W (WMA_Flag [X]))
    
     ' 插入字节集 (文件号, 到字节集 (到短整数 (0)))  ' Reserve
     ' ExValueSize ＝ 取字节集长度 (A2W (Text_Now))
     ' 插入字节集 (文件号, 到字节集 (ExValueSize))
     ' 插入字节集 (文件号, A2W (Text_Now))
     ' ExNo ＝ ExNo ＋ 1
 ' .变量循环尾 ()
 ' .如果真 (等于 (是否为空 (图片), 假)) ' 要写图片
     ' .如果真 (不等于 (图片, {  }))
         ' ExSize ＝ 取字节集长度 (A2W (WMA_Flag [11]))
         ' 插入字节集 (文件号, 到字节集 (ExSize))
         ' 插入字节集 (文件号, A2W (WMA_Flag [11]))
         ' 插入字节集 (文件号, 到字节集 (到短整数 (1)))
         ' 图片头数据 ＝ A2W (“image/” ＋ 到小写 (判断图片类型 (图片))) ＋ { 0, 0 }
        
         ' ExValueSize ＝ 取字节集长度 (图片头数据 ＋ 图片)
         ' 插入字节集 (文件号, 到字节集 (ExValueSize))
         ' 插入字节集 (文件号, { 0 })
         ' 插入字节集 (文件号, 到字节集 (取字节集长度 (图片)))
         ' 插入字节集 (文件号, 图片头数据)
         ' 插入字节集 (文件号, 图片)
         ' ExNo ＝ ExNo ＋ 1
    .如果真结束
    
.如果真结束



 ' Offset_FrameEnd ＝ 取读写位置 (文件号)  ' 已经写到标签末尾，备份位置
 ' FrameSize ＝ Offset_FrameEnd － ExTagOffset ＋ 16
 ' 移动读写位置 (文件号, #文件首, ExTagOffset)  ' 移动到帧首
 ' 写出字节集 (文件号, 到字节集 (FrameSize))
 ' 写出字节集 (文件号, 到字节集 (ExNo))
 ' ' 移动读写位置 (文件号, #文件首, Offset_FrameEnd)  ' 移动回帧末尾


 ' 改变量 ＝ 改变量 ＋ FrameSize － Size
 ' 移动读写位置 (文件号, #文件首, 16)  ' 写入新的 标签总大小
 ' 写出字节集 (文件号, 到字节集 (到长整数 (WholeSize ＋ 改变量)))

 ' 关闭文件 (文件号)
 ' 返回 (真)

.子程序 处理专辑图片_WMA, 字节集, , 
.参数 子标签内容, 字节集, , 去除帧头的数据，等同与其他标签的文本

.局部变量 图片大小, 整数型, , , 
.局部变量 格式数据, 字节集, , , 
.局部变量 格式文本, 文本型, , , 
.局部变量 图片类型, 文本型, , , 

赋值 (图片大小, 取字节集数据 (子标签内容, #整数型, 2))
赋值 (格式数据, 取字节集中间 (子标签内容, 6, 22))
.计次循环首 (取字节集长度 (格式数据), ) ' 删尾空
    .如果 (等于 (取字节集右边 (格式数据, 1), { 0 }))
        赋值 (格式数据, 取字节集左边 (格式数据, 相减 (取字节集长度 (格式数据), 1)))
    .否则
        跳出循环 ()
    .如果结束
    
.计次循环尾 ()
赋值 (格式数据, 相加 (格式数据, { 0, 0, 0 }))
赋值 (格式文本, Unicode转Ansi (格式数据))
赋值 (图片类型, 到大写 (取文本右边 (格式文本, 相减 (取文本长度 (格式文本), 寻找文本 (格式文本, “image/”, , 真), 5))))
返回 (提取图片 (子标签内容, 图片类型))

.子程序 提取图片, 字节集, , 处理并提取标签帧里的图片，图片必须在末尾（ID3V2 和 WMA 用）
.参数 数据, 字节集, , 
.参数 图片类型, 文本型, , 等同于后缀名

.局部变量 头部标志, 字节集, , , 
.局部变量 位置指针, 整数型, , , 

赋值 (图片类型, 到大写 (图片类型))

.判断开始 (或者 (等于 (图片类型, “JPG”), 等于 (图片类型, “JPE”), 等于 (图片类型, “JPEG”)))
    赋值 (头部标志, #JPG文件头)
.判断 (等于 (图片类型, “BMP”))
    赋值 (头部标志, 到字节集 (“BM”))
.默认
    赋值 (头部标志, 到字节集 (图片类型))
    
.判断结束
赋值 (位置指针, 寻找字节集 (数据, 头部标志, ))
返回 (取字节集右边 (数据, 相加 (相减 (取字节集长度 (数据), 位置指针), 1)))


.子程序 初始化APE标签, 空白型, , 
.局部变量 已经初始化, 逻辑型, 静态, , 

.如果真 (已经初始化)
    返回 ()
.如果真结束
赋值 (已经初始化, 真)
赋值 (APE标签头, { 65, 80, 69, 84, 65, 71, 69, 88, 208, 7, 0, 0 })

.子程序 读取APE标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 接收参数1, 音乐文件标签, 参考 可空, 
.参数 接收参数2, 通用标签, 参考 可空 数组, 

.局部变量 文件号, 整数型, , , 
.局部变量 临时变量, 字节集, , , 
.局部变量 标签长度, 整数型, , , 
.局部变量 子标签个数, 整数型, , , 
.局部变量 临时子标签, 通用标签, , , 
.局部变量 子标签大小, 长整数型, , , 
.局部变量 存在ID3V1, 逻辑型, , , 
.局部变量 APE标签, 通用标签, , "0", 
.局部变量 Tag, 音乐文件标签, , , 

初始化APE标签 ()
赋值 (文件号, 打开文件 (文件名, #读入, #无限制))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束

移动读写位置 (文件号, #文件尾, -128)
赋值 (存在ID3V1, 等于 (读入字节集 (文件号, 3), 到字节集 (“TAG”)))


移动读写位置 (文件号, #文件尾, 相减 (-32, 选择 (存在ID3V1, 128, 0)))
赋值 (临时变量, 读入字节集 (文件号, 12))

.如果真 (不等于 (取字节集左边 (临时变量, 8), 取字节集左边 (APE标签头, 8)))
    关闭文件 (文件号)
    返回 (假)
.如果真结束

读入数据 (文件号, 标签长度)
读入数据 (文件号, 子标签个数)


移动读写位置 (文件号, #文件尾, 相减 (相加 (相减 (-32, 标签长度), 32), 选择 (存在ID3V1, 128, 0)))

 ' 先读出一组子标签
.判断循环首 (小于 (取读写位置 (文件号), 相减 (取文件长度 (文件号), 32, 选择 (存在ID3V1, 128, 0))))
    读入数据 (文件号, 子标签大小)
    赋值 (临时子标签.名称, 读入文本 (文件号, ))
    移动读写位置 (文件号, #现行位置, 1) ' 需要跨过文本结束符"\0"
    赋值 (临时子标签.内容, Unicode转Ansi (UTF8转UNICODE (读入字节集 (文件号, 子标签大小))))
    加入成员 (APE标签, 临时子标签)
.判断循环尾 ()

 ' 再筛选出需要的
筛选通用标签 (APE标签, Tag.Title, Tag.Artist, Tag.Album, Tag.Year, Tag.ContenttType, Tag.Comment, Tag.TrackNumber, Tag.Lyric)

.如果真 (等于 (是否为空 (接收参数1), 假))
    赋值 (接收参数1, Tag)
.如果真结束
.如果真 (等于 (是否为空 (接收参数2), 假))
    赋值 (接收参数2, APE标签)
.如果真结束


返回 (真)

.子程序 写入APE标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 清空原有标签, 逻辑型, 可空, 默认假
.参数 忽略空标签, 逻辑型, , 若为真，则留空表示不修改，若为假，则删除此标签
.参数 匿名参数_26368, 空白型, , 

.局部变量 原标签, 通用标签, , "0", 
.局部变量 文件号, 整数型, , , 
.局部变量 临时变量, 字节集, , , 
.局部变量 标签长度, 整数型, , , 
.局部变量 子标签全内容, 字节集, , , 
.局部变量 X, 整数型, , , 
.局部变量 临时_UTF8文本, 字节集, , , 
.局部变量 存在ID3V1, 逻辑型, , , 
.局部变量 APE标签, 通用标签, , "0", 

初始化APE标签 ()
.如果真 (是否为空 (清空原有标签))
    赋值 (清空原有标签, 假)
.如果真结束
.如果真 (等于 (清空原有标签, 假))
    读取APE标签 (文件名, , APE标签) ' 先读出一些额外子标签
.如果真结束

赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束

赋值 (子标签全内容, 相加 (APE标签头, 取空白字节集 (4), 到字节集 (到整数 (取数组成员数 (标签))), { 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0 }))

修改通用标签 (APE标签, “TITLE”, 标签.Title, 取反 (忽略空标签))
修改通用标签 (APE标签, “ARTIST”, 标签.Artist, 取反 (忽略空标签))
修改通用标签 (APE标签, “ALBUM”, 标签.Album, 取反 (忽略空标签))
修改通用标签 (APE标签, “YEAR”, 标签.Year, 取反 (忽略空标签))
修改通用标签 (APE标签, “GENRE”, 标签.ContenttType, 取反 (忽略空标签))
修改通用标签 (APE标签, “COMMENT”, 标签.Comment, 取反 (忽略空标签))
修改通用标签 (APE标签, “TRACK”, 标签.TrackNumber, 取反 (忽略空标签))
修改通用标签 (APE标签, “LYRIC”, 标签.Lyric, 取反 (忽略空标签))

.变量循环首 (1, 取数组成员数 (APE标签), 1, X)
    .如果真 (等于 (APE标签 [X], 内容, “”))
        到循环尾 ()
    .如果真结束
    赋值 (临时_UTF8文本, UNICODE转UTF8 (A2W (APE标签 [X], 内容)))
    赋值 (子标签全内容, 相加 (子标签全内容, 到字节集 (到长整数 (取字节集长度 (临时_UTF8文本)))))
    赋值 (子标签全内容, 相加 (子标签全内容, 到字节集 (APE标签 [X], 名称), { 0 }))
    赋值 (子标签全内容, 相加 (子标签全内容, 临时_UTF8文本))
.变量循环尾 ()
赋值 (标签长度, 取字节集长度 (子标签全内容))
赋值 (子标签全内容, 字节集替换 (子标签全内容, 13, 4, 到字节集 (标签长度)))
赋值 (子标签全内容, 相加 (子标签全内容, APE标签头, 到字节集 (标签长度), 到字节集 (到整数 (取数组成员数 (APE标签))), { 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0 }))

移动读写位置 (文件号, #文件尾, -128)
赋值 (存在ID3V1, 等于 (读入字节集 (文件号, 3), 到字节集 (“TAG”)))

移动读写位置 (文件号, #文件尾, 相减 (-32, 选择 (存在ID3V1, 128, 0)))
赋值 (临时变量, 读入字节集 (文件号, 12))
.如果真 (等于 (取字节集左边 (临时变量, 8), 取字节集左边 (APE标签头, 8))) ' 原来存在标签
    读入数据 (文件号, 标签长度)
    移动读写位置 (文件号, #文件尾, 相减 (-32, 标签长度, 选择 (存在ID3V1, 128, 0)))
    删除数据 (文件号, 相加 (32, 标签长度)) ' 删除原有标签
.如果真结束

移动读写位置 (文件号, #文件尾, 负 (选择 (存在ID3V1, 128, 0)))

插入字节集 (文件号, 子标签全内容)
关闭文件 (文件号)
返回 (真)

.子程序 筛选通用标签, 空白型, , 筛选出需要的子标签
.参数 标签, 通用标签, 数组, 
.参数 Title, 文本型, 参考 可空, 
.参数 Artist, 文本型, 参考 可空, 
.参数 Album, 文本型, 参考 可空, 
.参数 Year, 文本型, 参考 可空, 
.参数 Genre, 文本型, 参考 可空, 
.参数 Comment, 文本型, 参考 可空, 
.参数 Track, 文本型, 参考 可空, 
.参数 Lyric, 文本型, 参考 可空, 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (标签), 1, X)
    .判断开始 (等于 (文本比较 (标签 [X], 名称, “Title”, 假), 0))
        .如果真 (等于 (是否为空 (Title), 假))
            赋值 (Title, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Artist”, 假), 0))
        .如果真 (等于 (是否为空 (Artist), 假))
            赋值 (Artist, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Album”, 假), 0))
        .如果真 (等于 (是否为空 (Album), 假))
            赋值 (Album, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Year”, 假), 0))
        .如果真 (等于 (是否为空 (Year), 假))
            赋值 (Year, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Genre”, 假), 0))
        .如果真 (等于 (是否为空 (Genre), 假))
            赋值 (Genre, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Comment”, 假), 0))
        .如果真 (等于 (是否为空 (Comment), 假))
            赋值 (Comment, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Track”, 假), 0))
        .如果真 (等于 (是否为空 (Track), 假))
            赋值 (Track, 标签 [X], 内容)
        .如果真结束
        
    .判断 (等于 (文本比较 (标签 [X], 名称, “Lyric”, 假), 0))
        .如果真 (等于 (是否为空 (Lyric), 假))
            赋值 (Lyric, 标签 [X], 内容)
        .如果真结束
        
    .默认
        
    .判断结束
    
.变量循环尾 ()

.子程序 修改通用标签, 空白型, , 为一组标签修改一个子标签。若存在，则修改，不存在，则添加
.参数 标签, 通用标签, 数组, 
.参数 新子标签名称, 文本型, , 
.参数 新子标签内容, 文本型, , 
.参数 允许空内容, 逻辑型, 可空, 默认假。当“新子标签内容”为空文本时，此变量若为真，则会自动从原标签中删除，若为假，则不变动

.局部变量 X, 整数型, , , 
.局部变量 临时_通用标签, 通用标签, , , 

.如果真 (是否为空 (允许空内容))
    赋值 (允许空内容, 假)
.如果真结束
.如果真 (并且 (等于 (允许空内容, 假), 等于 (新子标签内容, “”)))
    返回 ()
.如果真结束
.变量循环首 (1, 取数组成员数 (标签), 1, X)
    .如果真 (等于 (文本比较 (标签 [X], 名称, 新子标签名称, 假), 0))
        .如果 (不等于 (新子标签内容, “”)) ' 为空则删除
            赋值 (标签 [X], 内容, 新子标签内容)
        .否则
            删除成员 (标签, X, 1)
        .如果结束
        返回 ()
    .如果真结束
    
.变量循环尾 ()
.如果真 (不等于 (新子标签内容, “”))
    赋值 (临时_通用标签.名称, 新子标签名称)
    赋值 (临时_通用标签.内容, 新子标签内容)
    加入成员 (标签, 临时_通用标签)
    
.如果真结束


.子程序 读取OGG标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 接收参数1, 音乐文件标签, 参考 可空, 
.参数 接收参数2, 通用标签, 参考 可空 数组, 

.局部变量 文件号, 整数型, , , 
.局部变量 填充区长度, 字节型, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 X, 整数型, , , 
.局部变量 终止位置, 整数型, , , 
.局部变量 子标签数量, 整数型, , , 
.局部变量 子标签大小, 整数型, , , 
.局部变量 子标签数据, 字节集, , , 
.局部变量 临时标签, 通用标签, , , 
.局部变量 等号位置, 整数型, , , 
.局部变量 临时字节, 字节型, , , 
.局部变量 大小数据读取完毕, 逻辑型, , , 
.局部变量 广告区大小, 整数型, , , 
.局部变量 OGG标签, 通用标签, , "0", 
.局部变量 Tag, 音乐文件标签, , , 

赋值 (文件号, 打开文件 (文件名, #读入, #无限制))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移动读写位置 (文件号, #文件首, 84)
读入数据 (文件号, 填充区长度)

.变量循环首 (1, 填充区长度, 1, X)
    赋值 (临时字节, 取字节集数据 (读入字节集 (文件号, 1), #字节型, ))
    .如果真 (等于 (大小数据读取完毕, 假))
        赋值 (标签大小, 相加 (标签大小, 临时字节))
    .如果真结束
    .如果真 (不等于 (临时字节, 255))
        赋值 (大小数据读取完毕, 真)
    .如果真结束
    
.变量循环尾 ()
赋值 (终止位置, 相减 (相加 (取读写位置 (文件号), 标签大小), 1))
.如果真 (不等于 (读入字节集 (文件号, 7), { 3, 118, 111, 114, 98, 105, 115 })) ' '\3'+"vorbis"
    关闭文件 (文件号)
    赋值 (文件号, 0)
    返回 (假)
.如果真结束
读入数据 (文件号, 广告区大小)
移动读写位置 (文件号, #现行位置, 广告区大小) ' 直接忽略广告
读入数据 (文件号, 子标签数量)

.判断循环首 (小于 (取读写位置 (文件号), 终止位置))
    读入数据 (文件号, 子标签大小)
    赋值 (子标签数据, 读入字节集 (文件号, 子标签大小))
    赋值 (等号位置, 寻找字节集 (子标签数据, 到字节集 (“=”), ))
    赋值 (临时标签.名称, Unicode转Ansi (UTF8转UNICODE (取字节集左边 (子标签数据, 相减 (等号位置, 1)))))
    赋值 (临时标签.内容, Unicode转Ansi (UTF8转UNICODE (取字节集右边 (子标签数据, 相减 (取字节集长度 (子标签数据), 等号位置)))))
    
    加入成员 (OGG标签, 临时标签)
    
    .如果真 (大于或等于 (取数组成员数 (临时标签), 子标签数量))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
赋值 (文件号, 0)

筛选通用标签 (OGG标签, Tag.Title, Tag.Artist, Tag.Album, Tag.Year, Tag.ContenttType, Tag.Comment, Tag.TrackNumber, Tag.Lyric)
.如果真 (等于 (是否为空 (接收参数1), 假))
    赋值 (接收参数1, Tag)
.如果真结束
.如果真 (等于 (是否为空 (接收参数2), 假))
    赋值 (接收参数2, OGG标签)
.如果真结束

返回 (真)

.子程序 写入OGG标签, 逻辑型, , 此函数（写入）中的CRC计算部分参考易语言论坛网友liangyz70的代码
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 清空原有标签, 逻辑型, 可空, 默认假
.参数 忽略空标签, 逻辑型, , 
.参数 广告信息, 文本型, 可空, 

.局部变量 文件号, 整数型, , , 
.局部变量 头部额外数据, 字节集, , , 头部80字节
.局部变量 新标签, 字节集, , , 
.局部变量 X, 整数型, , , 
.局部变量 子标签文本, 字节集, , , 类似于"xxx=xxx"，转换成UTF8
.局部变量 原标签大小, 整数型, , , 
.局部变量 原大小_的尺寸, 字节型, , , 指定变量“原标签大小”在文件中的数据占多少字节
.局部变量 分割位置, 整数型, , , “分割位置”左边是真正的标签大小数据，右边是拿来计算CRC的字节数组：从标签末尾起，读取指定长度的数据进行计算
.局部变量 校验长度集, 字节集, , , 上面说的用来计算CRC的数据
.局部变量 校验数据, 字节集, , , 同样，用来计算CRC的数据，是“头部额外数据”的最后22字节，加4个0，再加“新标签大小_的数据”
.局部变量 临时字节, 字节型, , , 
.局部变量 原头部大小, 整数型, , , 从((文件))开头到标签末尾的长度，需要在重新写入时删除
.局部变量 新标签大小, 整数型, , , 
.局部变量 新标签大小_的数据, 字节集, , , 新标签的大小转换成的字节集，包含“多余数据”
.局部变量 CRC, 整数型, , , 4字节的CRC区
.局部变量 广告信息数据, 字节集, , , 
.局部变量 OGG标签, 通用标签, , "0", 

.如果真 (是否为空 (清空原有标签))
    赋值 (清空原有标签, 假)
.如果真结束
.如果真 (等于 (清空原有标签, 假))
    读取OGG标签 (文件名, , OGG标签)
.如果真结束


赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移到文件首 (文件号)
.如果真 (不等于 (读入字节集 (文件号, 4), 到字节集 (“OggS”)))
    关闭文件 (文件号)
    赋值 (文件号, 0)
    返回 (假)
.如果真结束
移到文件首 (文件号)
赋值 (头部额外数据, 读入字节集 (文件号, 80)) ' 备份头部数据




 ' 准备新标签

修改通用标签 (OGG标签, “TITLE”, 标签.Title, 取反 (忽略空标签))
修改通用标签 (OGG标签, “ARTIST”, 标签.Artist, 取反 (忽略空标签))
修改通用标签 (OGG标签, “ALBUM”, 标签.Album, 取反 (忽略空标签))
修改通用标签 (OGG标签, “YEAR”, 标签.Year, 取反 (忽略空标签))
修改通用标签 (OGG标签, “GENRE”, 标签.ContenttType, 取反 (忽略空标签))
修改通用标签 (OGG标签, “COMMENT”, 标签.Comment, 取反 (忽略空标签))
修改通用标签 (OGG标签, “TRACK”, 标签.TrackNumber, 取反 (忽略空标签))
修改通用标签 (OGG标签, “LYRIC”, 标签.Lyric, 取反 (忽略空标签))




.如果真 (是否为空 (广告信息))
    赋值 (广告信息, “”)
.如果真结束
赋值 (广告信息数据, UNICODE转UTF8 (A2W (广告信息)))
赋值 (新标签, 相加 ({ 3, 118, 111, 114, 98, 105, 115 }, 到字节集 (取字节集长度 (广告信息数据)), 广告信息数据))
赋值 (新标签, 相加 (新标签, 到字节集 (到整数 (取数组成员数 (OGG标签)))))
.变量循环首 (1, 取数组成员数 (OGG标签), 1, X)
    赋值 (子标签文本, UNICODE转UTF8 (A2W (相加 (OGG标签 [X], 名称, “=”, OGG标签 [X], 内容))))
    .如果真 (等于 (取字节集右边 (子标签文本, 1), { 0 }))
        赋值 (子标签文本, 取字节集左边 (子标签文本, 相减 (取字节集长度 (子标签文本), 1)))
    .如果真结束
    赋值 (新标签, 相加 (新标签, 到字节集 (取字节集长度 (子标签文本)), 子标签文本))
.变量循环尾 ()
赋值 (新标签, 相加 (新标签, { 1 }))

移动读写位置 (文件号, #现行位置, 4) ' 跳过4字节的CRC区
读入数据 (文件号, 原大小_的尺寸) ' 读入“标签大小”区的长度
.变量循环首 (1, 原大小_的尺寸, 1, X)
    读入数据 (文件号, 临时字节) ' 逐字节读入
    .如果 (等于 (分割位置, 0)) ' “分割位置”等于0表示还没碰到
        赋值 (原标签大小, 相加 (原标签大小, 临时字节)) ' 在分割位置左边，累加到大小
    .否则
        赋值 (校验长度集, 相加 (校验长度集, 到字节集 (临时字节))) ' 在分割位置右边，堆积到“校验长度集”
    .如果结束
    .如果真 (小于 (临时字节, 255)) ' 遇到非FF数据
        .如果真 (等于 (分割位置, 0))
            赋值 (分割位置, X) ' 定义“分割位置”
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()

移动读写位置 (文件号, #现行位置, 原标签大小) ' 现在读写位置在“原大小数据”的末尾，移动一个大小的距离，跳转到标签末尾
赋值 (原头部大小, 取读写位置 (文件号))

 ' 生成“标签大小”数据区
赋值 (新标签大小, 取字节集长度 (新标签))
.判断循环首 (大于或等于 (新标签大小, 255)) ' 一直减，直到小于255，同时添加FF
    赋值 (新标签大小, 相减 (新标签大小, 255))
    赋值 (新标签大小_的数据, 相加 (新标签大小_的数据, { 255 }))
.判断循环尾 ()
赋值 (新标签大小_的数据, 相加 (新标签大小_的数据, 到字节集 (到字节 (新标签大小)))) ' 最后一个非FF的字节
赋值 (新标签大小_的数据, 相加 (新标签大小_的数据, 校验长度集)) ' 加上校验长度集
赋值 (新标签大小_的数据, 相加 (到字节集 (到字节 (取字节集长度 (新标签大小_的数据))), 新标签大小_的数据)) ' 加上自身大小

 ' 生成CRC
赋值 (校验数据, 相加 (取字节集右边 (头部额外数据, 22), 取空白字节集 (4), 新标签大小_的数据))

赋值 (CRC, 0)
赋值 (CRC, 计算CRC (CRC, 校验数据))
赋值 (CRC, 计算CRC (CRC, 新标签))
.变量循环首 (1, 取字节集长度 (校验长度集), 1, X)
    .如果真 (大于 (校验长度集 [X], 0))
        赋值 (CRC, 计算CRC (CRC, 读入字节集 (文件号, 校验长度集 [X]))) ' 额…………
    .如果真结束
    
.变量循环尾 ()

赋值 (新标签, 相加 (头部额外数据, 到字节集 (到整数 (CRC)), 新标签大小_的数据, 新标签)) ' 整理数据
移到文件首 (文件号)
删除数据 (文件号, 原头部大小)
移到文件首 (文件号)
插入字节集 (文件号, 新标签) ' 一次性写入

关闭文件 (文件号)
赋值 (文件号, 0)
返回 (真)

.子程序 计算CRC, 整数型, , 转载至 liangyz70
.参数 CRC, 整数型, , 
.参数 data, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 CRC表, 整数型, 静态, "0", 

.如果真 (等于 (取数组成员数 (CRC表), 0))
    赋值 (CRC表, { 0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371, 1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, 2552477408, 2632100695, 2443283854, 2506133561, 2334638140, 2414271883, 2191915858, 2254759653, 3190512472, 3135915759, 3081330742, 3009969537, 2905550212, 2850959411, 2762807018, 2691435357, 3560074640, 3505614887, 3719321342, 3648080713, 3342211916, 3287746299, 3467911202, 3396681109, 4063920168, 4143685023, 4223187782, 4286162673, 3779000052, 3858754371, 3904687514, 3967668269, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633, 1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, 2896545431, 2825181984, 2770861561, 2716262478, 3215044683, 3143675388, 3055782693, 3001194130, 2326604591, 2389456536, 2200899649, 2280525302, 2578013683, 2640855108, 2418763421, 2498394922, 3769900519, 3832873040, 3912640137, 3992402750, 4088425275, 4151408268, 4197601365, 4277358050, 3334271071, 3263032808, 3476998961, 3422541446, 3585640067, 3514407732, 3694837229, 3640369242, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652, 1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, 4046411278, 4126034873, 4172115296, 4234965207, 3794477266, 3874110821, 3953728444, 4016571915, 3609705398, 3555108353, 3735388376, 3664026991, 3290680682, 3236090077, 3449943556, 3378572211, 3174993278, 3120533705, 3032266256, 2961025959, 2923101090, 2868635157, 2813903052, 2742672763, 2604032198, 2683796849, 2461293480, 2524268063, 2284983834, 2364738477, 2175806836, 2238787779, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480, 1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, 3316196985, 3244833742, 3425377559, 3370778784, 3601682597, 3530312978, 3744426955, 3689838204, 3819031489, 3881883254, 3928223919, 4007849240, 4037393693, 4100235434, 4180117107, 4259748804, 2310601993, 2373574846, 2151335527, 2231098320, 2596047829, 2659030626, 2470359227, 2550115596, 2947551409, 2876312838, 2788305887, 2733848168, 3165939309, 3094707162, 3040238851, 2985771188 })
    
.如果真结束

赋值 (长度, 取字节集长度 (data))
.计次循环首 (长度, i)
    赋值 (CRC, 位异或 (左移 (CRC, 8), CRC表 [相加 (位异或 (位与 (右移 (CRC, 24), 255), 到整数 (data [i])), 1)]))
.计次循环尾 ()
返回 (CRC)

.子程序 顺序读取MP3标签, 音乐文件标签, , 包含顺序识别和优先整合
.参数 文件名, 文本型, , 
.参数 读取顺序, 文本型, 可空, 默认为“播放器设置.MP3标签读取顺序”
.参数 图片, 字节集, 参考 可空, 

.局部变量 MP3顺序数组, 文本型, , "0", 
.局部变量 MP3已读取标签, 音乐文件标签, , "0", 
.局部变量 X, 整数型, , , 
.局部变量 返回值, 音乐文件标签, , , 

.如果真 (是否为空 (读取顺序))
    赋值 (读取顺序, 播放器设置.MP3标签读取顺序)
.如果真结束
赋值 (MP3顺序数组, 分割文本 (读取顺序, “->”, ))
.变量循环首 (1, 取数组成员数 (MP3顺序数组), 1, X)
    .判断开始 (等于 (到大写 (MP3顺序数组 [X]), “ID3V1”))
        .如果真 (读取ID3V1标签 (文件名, 返回值))
            加入成员 (MP3已读取标签, 返回值)
        .如果真结束
        
    .判断 (等于 (到大写 (MP3顺序数组 [X]), “ID3V2”))
        .如果 (是否为空 (图片))
            .如果真 (读取ID3V2标签 (文件名, 返回值))
                加入成员 (MP3已读取标签, 返回值)
            .如果真结束
            
        .否则
            .如果真 (读取ID3V2标签 (文件名, 返回值, 图片))
                加入成员 (MP3已读取标签, 返回值)
            .如果真结束
            
        .如果结束
        
    .判断 (等于 (到大写 (MP3顺序数组 [X]), “APE”))
        .如果真 (读取APE标签 (文件名, 返回值))
            加入成员 (MP3已读取标签, 返回值)
        .如果真结束
        
    .默认
        
    .判断结束
    
    
.变量循环尾 ()
赋值 (返回值, 整合MP3标签 (MP3已读取标签)) ' 进行优先选取
返回 (返回值)

.子程序 删除MP3标签, 逻辑型, , 
.参数 文件名, 文本型, , 
.参数 标签类型, 整数型, , 1+2+4 V1 V2 APE

.局部变量 文件号, 整数型, , , 
.局部变量 标签大小数据, 字节集, , , 用于V2
.局部变量 标签大小, 整数型, , , 用于V2和APE
.局部变量 存在ID3V1, 逻辑型, , , 

赋值 (文件号, 打开文件 (文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果真 (不等于 (位与 (标签类型, 1), 0))
    移动读写位置 (文件号, #文件尾, -128)
    .如果真 (等于 (读入字节集 (文件号, 3), 到字节集 (“TAG”)))
        移动读写位置 (文件号, #现行位置, -3)
        删除数据 (文件号, 128)
    .如果真结束
    
.如果真结束
.如果真 (不等于 (位与 (标签类型, 2), 0))
    移到文件首 (文件号)
    .如果真 (等于 (读入字节集 (文件号, 4), { 73, 68, 51, 3 }))
        移动读写位置 (文件号, #现行位置, 2)
        赋值 (标签大小数据, 读入字节集 (文件号, 4))
        
        赋值 (标签大小, 相加 (相乘 (位与 (标签大小数据 [1], 127), 求次方 (128, 3)), 相乘 (位与 (标签大小数据 [2], 127), 求次方 (128, 2)), 相乘 (位与 (标签大小数据 [3], 127), 求次方 (128, 1)), 位与 (标签大小数据 [4], 127)))
        移到文件首 (文件号)
        删除数据 (文件号, 相加 (标签大小, 10))
    .如果真结束
    
.如果真结束
.如果真 (不等于 (位与 (标签类型, 4), 0))
    移动读写位置 (文件号, #文件尾, -128)
    赋值 (存在ID3V1, 等于 (读入字节集 (文件号, 3), 到字节集 (“TAG”)))
    移动读写位置 (文件号, #文件尾, 相减 (-32, 选择 (存在ID3V1, 128, 0)))
    .如果真 (等于 (读入字节集 (文件号, 8), 取字节集左边 (APE标签头, 8)))
        移动读写位置 (文件号, #现行位置, 4)
        读入数据 (文件号, 标签大小)
        移动读写位置 (文件号, #文件尾, 相减 (-32, 标签大小, 选择 (存在ID3V1, 128, 0)))
        删除数据 (文件号, 相加 (32, 标签大小)) ' 删除原有标签
    .如果真结束
    
.如果真结束

关闭文件 (文件号)
返回 (真)

.子程序 读取标签, 逻辑型, , 包含扩展名识别，作为接口，((返回值为真仅仅表示扩展名支持！！))
.参数 文件名, 文本型, , 
.参数 接收参数, 音乐文件标签, 参考, 
.参数 图片, 字节集, 参考 可空, 用于接收V2图片

.局部变量 扩展名, 文本型, , , 
.局部变量 Tag, 音乐文件标签, , , 

赋值 (扩展名, 到大写 (取文件名 (文件名, #文件名_扩展名)))
.判断开始 (等于 (扩展名, “MP3”))
    .如果 (是否为空 (图片))
        赋值 (Tag, 顺序读取MP3标签 (文件名))
    .否则
        赋值 (Tag, 顺序读取MP3标签 (文件名, , 图片))
    .如果结束
    
.判断 (等于 (扩展名, “WMA”))
    .如果 (是否为空 (图片))
        读取WMA标签 (文件名, Tag)
    .否则
        读取WMA标签 (文件名, Tag, , 图片)
    .如果结束
    
.判断 (或者 (等于 (扩展名, “APE”), 等于 (扩展名, “AAC”), 等于 (扩展名, “WAV”)))
    读取APE标签 (文件名, Tag)
.判断 (或者 (等于 (扩展名, “OGG”), 等于 (扩展名, “OGA”)))
    读取OGG标签 (文件名, Tag)
.默认
    
    赋值 (接收参数, Tag)
    返回 (假)
.判断结束
赋值 (接收参数, Tag)
返回 (真)

.子程序 写入标签, 逻辑型, , 包含扩展名识别，作为接口
.参数 文件名, 文本型, , 
.参数 标签, 音乐文件标签, , 
.参数 忽略空标签, 逻辑型, , 当批量写入时用
.参数 清空原有标签, 逻辑型, 可空, 默认假
.参数 MP3写入类型, MP3写入类型, 可空, 若文件格式为MP3，则该参数不可空

.局部变量 结果, 逻辑型, , , 
.局部变量 扩展名, 文本型, , , 

.如果真 (是否为空 (清空原有标签))
    赋值 (清空原有标签, 假)
.如果真结束
赋值 (扩展名, 到大写 (取文件名 (文件名, #文件名_扩展名)))

.判断开始 (等于 (扩展名, “MP3”))
    .如果真 (是否为空 (MP3写入类型))
        返回 (假)
    .如果真结束
    .如果 (不等于 (位与 (MP3写入类型.标签类型, 1), 0))
        赋值 (结果, 写入ID3V1标签 (文件名, 标签, 清空原有标签, 忽略空标签))
    .否则
        赋值 (结果, 删除MP3标签 (文件名, 1))
    .如果结束
    
    .如果 (不等于 (位与 (MP3写入类型.标签类型, 2), 0))
        .如果 (MP3写入类型.需要修改图片)
            赋值 (结果, 并且 (结果, 写入ID3V2标签 (文件名, 标签, 清空原有标签, 忽略空标签, MP3写入类型.图片, MP3写入类型.V2编码号)))
        .否则
            赋值 (结果, 并且 (结果, 写入ID3V2标签 (文件名, 标签, 清空原有标签, 忽略空标签, , MP3写入类型.V2编码号)))
        .如果结束
        
    .否则
        赋值 (结果, 并且 (结果, 删除MP3标签 (文件名, 2)))
    .如果结束
    
    .如果 (不等于 (位与 (MP3写入类型.标签类型, 4), 0))
        赋值 (结果, 并且 (结果, 写入APE标签 (文件名, 标签, 清空原有标签, 忽略空标签)))
    .否则
        赋值 (结果, 并且 (结果, 删除MP3标签 (文件名, 4)))
    .如果结束
    
    
.判断 (等于 (扩展名, “WMA”))
    .如果 (MP3写入类型.需要修改图片)
        赋值 (结果, 写入WMA标签 (文件名, 标签, 清空原有标签, 忽略空标签, MP3写入类型.图片))
    .否则
        赋值 (结果, 写入WMA标签 (文件名, 标签, 清空原有标签, 忽略空标签))
    .如果结束
    
.判断 (或者 (等于 (扩展名, “APE”), 等于 (扩展名, “AAC”), 等于 (扩展名, “WAV”)))
    赋值 (结果, 写入APE标签 (文件名, 标签, 清空原有标签, 忽略空标签))
.判断 (或者 (等于 (扩展名, “OGG”), 等于 (扩展名, “OGA”)))
    赋值 (结果, 写入OGG标签 (文件名, 标签, 清空原有标签, 忽略空标签))
.默认
    
    赋值 (结果, 假)
.判断结束
返回 (结果)

.子程序 整合MP3标签, 音乐文件标签, , 当读取了MP3文件的不同标签后，用此函数进行优先选取
.参数 标签数组, 音乐文件标签, 数组, 靠前的优先

.局部变量 X, 整数型, , , 
.局部变量 返回值, 音乐文件标签, , , 

.如果真 (等于 (取数组成员数 (标签数组), 0))
    返回 (返回值) ' 返回空值
.如果真结束
.变量循环首 (1, 取数组成员数 (标签数组), 1, X)
    .如果真 (等于 (返回值.Title, “”))
        赋值 (返回值.Title, 标签数组 [X], Title)
    .如果真结束
    .如果真 (等于 (返回值.Artist, “”))
        赋值 (返回值.Artist, 标签数组 [X], Artist)
    .如果真结束
    .如果真 (等于 (返回值.Album, “”))
        赋值 (返回值.Album, 标签数组 [X], Album)
    .如果真结束
    .如果真 (等于 (返回值.Year, “”))
        赋值 (返回值.Year, 标签数组 [X], Year)
    .如果真结束
    .如果真 (等于 (返回值.ContenttType, “”))
        赋值 (返回值.ContenttType, 标签数组 [X], ContenttType)
    .如果真结束
    .如果真 (等于 (返回值.Comment, “”))
        赋值 (返回值.Comment, 标签数组 [X], Comment)
    .如果真结束
    .如果真 (等于 (返回值.TrackNumber, “”))
        赋值 (返回值.TrackNumber, 标签数组 [X], TrackNumber)
    .如果真结束
    .如果真 (等于 (返回值.Lyric, “”))
        赋值 (返回值.Lyric, 标签数组 [X], Lyric)
    .如果真结束
    
.变量循环尾 ()
返回 (返回值)

.程序集 引擎管理程序集, , , 

.子程序 媒体_取状态, 整数型, , 0:未打开，1:播放，2:失控（仅Bass），3:暂停，4:停止（仅MCI）
.局部变量 状态值, 整数型, , , 

.如果 (正在使用BASS引擎)
    返回 (播放控制2.取媒体状态 ())
.否则
    赋值 (状态值, 相加 (负 (播放控制1.取媒体状态 ()), 1))
    .如果真 (或者 (小于 (状态值, 1), 大于 (状态值, 4))) ' 错误信息
        赋值 (状态值, 1) ' 视为未打开
    .如果真结束
    返回 (多项选择 (状态值, 0, 4, 1, 3))
.如果结束


.子程序 媒体_取位置, 小数型, , 秒
.如果 (正在使用BASS引擎)
    返回 (播放控制2.取媒体位置 ())
.否则
    返回 (相除 (播放控制1.取当前播放位置 (), 1000))
.如果结束


.子程序 媒体_置位置, 空白型, , 
.参数 新位置, 小数型, , 

.如果真 (小于 (新位置, 0))
    赋值 (新位置, 0)
.如果真结束
.如果 (正在使用BASS引擎)
    播放控制2.置媒体位置 (新位置)
.否则
    播放控制1.置当前播放位置 (相乘 (新位置, 1000))
.如果结束


.子程序 媒体_关闭, 空白型, , 
.如果 (正在使用BASS引擎)
    播放控制2.关闭 ()
.否则
    播放控制1.关闭 ()
.如果结束
置播放项为空 ()
处理修改标签任务 ()


.子程序 媒体_暂停, 空白型, , 
.如果 (正在使用BASS引擎)
    播放控制2.暂停 ()
.否则
    播放控制1.暂停 ()
.如果结束


.子程序 媒体_播放, 空白型, , 
.参数 重新开始, 逻辑型, , 

.如果 (正在使用BASS引擎)
    播放控制2.播放 (重新开始)
.否则
    .如果 (重新开始)
        播放控制1.播放 (0)
    .否则
        播放控制1.播放 ()
    .如果结束
    
.如果结束


.子程序 媒体_取比特率, 小数型, , 
.如果 (正在使用BASS引擎)
    返回 (播放控制2.取平均比特率 ())
.否则
    返回 (播放控制1.取平均比特率 ())
.如果结束



.窗口程序集 窗口_设置窗口, , , 

.程序集变量 提示文本组_常规, 文本型, , "0", 
.程序集变量 快捷键框选中项, 整数型, , , 
.程序集变量 水波特效, 未知类型0xC0001, , , 
.程序集变量 t, 整数型, , , 
.程序集变量 匿名程序集变量_29874, 空白型, , , 
.子程序 _设置窗口_创建完毕, 空白型, , 
赋值 (t, 取启动时间 ())

连续赋值 (96, .左边, .左边, .左边, .左边, .左边, .左边, .左边, .左边)
连续赋值 (12, .顶边, .顶边, .顶边, .顶边, .顶边, .顶边, .顶边, .顶边)

切换页 (1, 真)


应用皮肤 (设置窗口.取窗口句柄 (), 1)
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()

连续赋值 (#底色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色, .画板背景色)

赋值 (., #检查框_多选)
赋值 (., #检查框_多选)

赋值 (., 真)
赋值 (., 真)

赋值 (., #检查框_单选)
赋值 (., #检查框_多选)

赋值 (., 未知支持库函数_25 (#检查框_多选, #检查框_单选))
赋值 (., 真)

.未知支持库函数_24 ()
.未知支持库函数_24 ()
.未知支持库函数_24 ()

刷新画板_视觉效果_提示 () ' 只需刷新一次

赋值 (提示文本组_常规, 分割文本 (#提示文本_常规, “\”, ))

输出调试文本 (相加 (“载入”, 到文本 (相减 (取启动时间 (), t))))
设置窗口_刷新设置 ()
设置窗口_初始化水波 ()
赋值 (.内容, #关于文本)

.子程序 设置窗口_初始化水波, 空白型, , 
.局部变量 图片对象, 对象, , , 

图片对象.创建图片对象 (#关于图片)
水波特效.未知支持库函数_2 (取窗口句柄 (), 图片对象.读数值属性 (“Handle”, ), 25, 1)
图片对象.清除 ()
水波特效.未知支持库函数_6 (1, 5, 3, 150)


.子程序 设置窗口_刷新设置, 空白型, , 
赋值 (t, 取启动时间 ())

赋值 (.内容, 到文本 (播放器设置.吸附临界值))
赋值 (.内容, 到文本 (播放器设置.历史记录数量))
赋值 (.内容, 到文本 (播放器设置.快进快退长度))

0.置状态图片 (选择 (播放器设置.继续上次播放, 1, 0))
1.置状态图片 (选择 (播放器设置.记住上次位置, 1, 0))
2.置状态图片 (选择 (播放器设置.任务栏滚动信息, 1, 0))
3.置状态图片 (选择 (播放器设置.保证当前播放, 1, 0))

0.置状态图片 (选择 (播放器设置.仅隐藏时显示托盘图标, 1, 0))
1.置状态图片 (选择 (播放器设置.换歌气球提示, 1, 0))
2.置状态图片 (选择 (播放器设置.仅隐藏时显示气球, 1, 0))
3.置状态图片 (选择 (播放器设置.开启历史记录, 1, 0))


赋值 (.现行选中项, 选择 (播放器设置.最小化时隐藏, 0, 1))
赋值 (.现行选中项, 选择 (播放器设置.关闭按钮退出, 0, 1))

设置窗_读取快捷键 ()
_超级列表框_快捷键_左键单击表项 () ' 初始化按钮状态

赋值 (.内容, 播放器设置.歌词_保存路径)
赋值 (.内容, 播放器设置.歌词_保存文件名)

赋值 (.内容, 播放器设置.歌词_扫描路径)
赋值 (.内容, 播放器设置.歌词_扫描文件名)
赋值 (.现行选中项, 播放器设置.歌词_优先网站)


刷新字体显示_窗口歌词选项 ()


刷新字体显示_桌面歌词选项 ()



刷新画板_激活颜色 ()
刷新画板_非激活颜色 ()

刷新画板_滚动1 ()
刷新画板_滚动2 ()
刷新画板_滚动3 ()
刷新画板_滚动4 ()
刷新画板_桌面背景 ()


赋值 (.位置, 播放器设置.桌面歌词_颜色浓度1)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度2)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度3)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度4)
赋值 (.位置, 播放器设置.桌面歌词_文本透明度)
赋值 (.位置, 播放器设置.桌面歌词_背景透明度)
刷新按钮_卡拉OK模式 ()

赋值 (.内容, 到文本 (播放器设置.桌面歌词_刷新减慢))

0.置状态图片 (选择 (等于 (播放器设置.视觉效果类型, 0), 1, 0))
1.置状态图片 (选择 (等于 (播放器设置.视觉效果类型, 1), 1, 0))

0.置状态图片 (选择 (播放器设置.频谱_显示粗状, 1, 0))
1.置状态图片 (选择 (播放器设置.波形_是否淡出, 1, 0))


赋值 (.内容, 到文本 (播放器设置.波形_画笔粗细))

刷新画板_视觉效果_频谱上方 ()
刷新画板_视觉效果_频谱下方 ()
刷新画板_视觉效果_波形 ()

赋值 (.位置, 播放器设置.频谱_颜色上_浓度)
赋值 (.位置, 播放器设置.频谱_颜色下_浓度)
赋值 (.位置, 播放器设置.波形_颜色浓度)

赋值 (.内容, 播放器设置.标签显示方案_列表)
赋值 (.标记, 播放器设置.标签显示方案_列表)

赋值 (.内容, 播放器设置.标签显示方案_托盘气球)
赋值 (.内容, 播放器设置.标签显示方案_窗口标题)

刷新字体显示_列表 ()

赋值 (.内容, 播放器设置.MP3标签读取顺序)

0.置状态图片 (选择 (等于 (播放器设置.引擎号, 0), 3, 2))
1.置状态图片 (选择 (等于 (播放器设置.引擎号, 1), 3, 2))
2.置状态图片 (选择 (播放器设置.使用BASS播放MID, 1, 0))

设置窗_读取插件信息 ()
赋值 (.内容, 播放器设置.音色库路径)

输出调试文本 (相加 (“刷新”, 到文本 (相减 (取启动时间 (), t))))


.子程序 _设置窗口_可否被关闭, 逻辑型, , 
.局部变量 按钮值, 整数型, , , 

.如果真 (不等于 (.标记, .内容)) ' 有修改
    读入数据库 (真)
.如果真结束
.如果真 (等于 (.下划线, “1”)) ' 已修改
    写配置项 (相加 (取运行目录 (), #配置文件名), “标准”, “引擎号”, 选择 (等于 (0.取当前状态图片 (), 3), “0”, “1”)) ' 第一个“BASS”是选中的，就给0，否则给1
    写配置项 (相加 (取运行目录 (), #配置文件名), “MIDI选项”, “使用BASS播放MID”, 选择 (等于 (2.取当前状态图片 (), 1), “1”, “0”))
.如果真结束
.如果真 (等于 (.禁止, 假)) ' 还没保存
    赋值 (按钮值, 信息框 (“你更改了快捷键，是否要应用？”, 相加 (#询问图标, #取消是否钮), “询问”))
    .判断开始 (等于 (按钮值, #是钮))
        _按钮_应用快捷键_被单击 () ' 点是：保存
    .判断 (等于 (按钮值, #否钮)) ' 否：不保存
        
    .判断 (等于 (按钮值, #取消钮)) ' 取消：不关闭窗口
        返回 (假)
    .默认
        
    .判断结束
    
    
.如果真结束


.子程序 _按钮_常规_被单击, 空白型, , ======切换选项卡=======
切换页 (1)

.子程序 _按钮_快捷键_被单击, 空白型, , 
切换页 (2)

.子程序 _按钮_歌词_被单击, 空白型, , 
切换页 (3)

.子程序 _按钮_歌词显示_被单击, 空白型, , 
切换页 (4)

.子程序 _按钮_视觉效果_被单击, 空白型, , 
切换页 (5)

.子程序 _按钮_其他杂项_被单击, 空白型, , 
切换页 (6)


.子程序 _按钮_引擎管理_被单击, 空白型, , 
切换页 (7)

.子程序 _按钮_关于_被单击, 空白型, , ======切换选项卡=======
切换页 (8)

.子程序 切换页, 空白型, , 切换各个设置选项卡
.参数 号, 整数型, , 
.参数 强制换, 逻辑型, 可空, 

.局部变量 上次, 整数型, 静态, , 

.如果真 (是否为空 (强制换))
    赋值 (强制换, 假)
.如果真结束
.如果真 (并且 (等于 (上次, 号), 等于 (强制换, 假)))
    返回 ()
.如果真结束
赋值 (上次, 号)
连续赋值 (假, .可视, .可视, .可视, .可视, .可视, .可视, .可视, .可视)
.判断开始 (等于 (号, 1))
    赋值 (.可视, 真)
.判断 (等于 (号, 2))
    赋值 (.可视, 真)
.判断 (等于 (号, 3))
    赋值 (.可视, 真)
.判断 (等于 (号, 4))
    赋值 (.可视, 真)
.判断 (等于 (号, 5))
    赋值 (.可视, 真)
.判断 (等于 (号, 6))
    赋值 (.可视, 真)
.判断 (等于 (号, 7))
    赋值 (.可视, 真)
.判断 (等于 (号, 8))
    赋值 (.可视, 真)
.默认
    
.判断结束


.子程序 _编辑框_临界值_内容被改变, 空白型, , 
赋值 (播放器设置.吸附临界值, 到数值 (.内容))
设置临界值 (播放器设置.吸附临界值)
应用配置_桌面歌词 (20)

.子程序 _编辑框_历史记录数量_内容被改变, 空白型, , 
赋值 (播放器设置.历史记录数量, 到数值 (.内容))

.子程序 _编辑框_键组合_按下某键, 逻辑型, , ===========快捷键=============
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 Ctrl键按下, 逻辑型, , , 
.局部变量 Shift键按下, 逻辑型, , , 
.局部变量 Alt键按下, 逻辑型, , , 
.局部变量 Win键按下, 逻辑型, , , 

赋值 (Ctrl键按下, 不等于 (位与 (功能键状态, 1), 0))
赋值 (Shift键按下, 不等于 (位与 (功能键状态, 2), 0))
赋值 (Alt键按下, 不等于 (位与 (功能键状态, 4), 0))
赋值 (Win键按下, 不等于 (位与 (功能键状态, 8), 0))
.判断开始 (等于 (键代码, #Ctrl键))
    赋值 (Ctrl键按下, 真)
.判断 (等于 (键代码, #Shift键))
    赋值 (Shift键按下, 真)
.判断 (等于 (键代码, #Alt键))
    赋值 (Alt键按下, 真)
.判断 (或者 (等于 (键代码, 91), 等于 (键代码, 92)))
    赋值 (Win键按下, 真)
.默认
    置快捷键组状态 (Ctrl键按下, Shift键按下, Alt键按下, Win键按下, 键代码, ) ' 有键代码
    返回 ()
.判断结束
置快捷键组状态 (Ctrl键按下, Shift键按下, Alt键按下, Win键按下, 0, 2) ' 没有键代码



.子程序 置快捷键组状态, 空白型, , 用于“编辑框_键组合”，同时刷新显示
.参数 Ctrl键按下, 逻辑型, 可空, 
.参数 Shift键按下, 逻辑型, 可空, 
.参数 Alt键按下, 逻辑型, 可空, 
.参数 Win键按下, 逻辑型, 可空, 
.参数 键代码, 整数型, 可空, 空表示清空
.参数 强行修改功能键, 整数型, 可空, 0：只允许修改功能键为真 1：在没有主按键时允许修改为假 2：有主按键后也可以修改为假 默认0

.局部变量 Ctrl键按下_, 逻辑型, 静态, , 
.局部变量 Shift键按下_, 逻辑型, 静态, , 
.局部变量 Alt键按下_, 逻辑型, 静态, , 
.局部变量 Win键按下_, 逻辑型, 静态, , 
.局部变量 键代码_, 整数型, 静态, , 

.如果真 (是否为空 (强行修改功能键))
    赋值 (强行修改功能键, 0)
.如果真结束

.如果真 (等于 (是否为空 (Ctrl键按下), 假))
    .如果 (Ctrl键按下)
        赋值 (Ctrl键按下_, 真)
    .否则
        .如果真 (或者 (等于 (强行修改功能键, 2), 并且 (等于 (强行修改功能键, 1), 等于 (键代码_, 0))))
            赋值 (Ctrl键按下_, 假)
        .如果真结束
        
    .如果结束
    
.如果真结束
.如果真 (等于 (是否为空 (Shift键按下), 假))
    .如果真 (等于 (是否为空 (Shift键按下), 假))
        .如果 (Shift键按下)
            赋值 (Shift键按下_, 真)
        .否则
            .如果真 (或者 (等于 (强行修改功能键, 2), 并且 (等于 (强行修改功能键, 1), 等于 (键代码_, 0))))
                赋值 (Shift键按下_, 假)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.如果真结束
.如果真 (等于 (是否为空 (Alt键按下), 假))
    .如果真 (等于 (是否为空 (Alt键按下), 假))
        .如果 (Alt键按下)
            赋值 (Alt键按下_, 真)
        .否则
            .如果真 (或者 (等于 (强行修改功能键, 2), 并且 (等于 (强行修改功能键, 1), 等于 (键代码_, 0))))
                赋值 (Alt键按下_, 假)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.如果真结束
.如果真 (等于 (是否为空 (Win键按下), 假))
    .如果真 (等于 (是否为空 (Win键按下), 假))
        .如果 (Win键按下)
            赋值 (Win键按下_, 真)
        .否则
            .如果真 (或者 (等于 (强行修改功能键, 2), 并且 (等于 (强行修改功能键, 1), 等于 (键代码_, 0))))
                赋值 (Win键按下_, 假)
            .如果真结束
            
        .如果结束
        
    .如果真结束
    
.如果真结束
.如果真 (等于 (是否为空 (键代码), 假))
    赋值 (键代码_, 键代码)
    
.如果真结束


赋值 (.内容, 相加 (选择 (Ctrl键按下_, “Ctrl+”, “”), 选择 (Shift键按下_, “Shift+”, “”), 选择 (Alt键按下_, “Alt+”, “”), 选择 (Win键按下_, “Win+”, “”), 选择 (不等于 (键代码_, 0), 取键名 (键代码_), “”)))

赋值 (.标记, 到文本 (相加 (相乘 (相加 (选择 (Ctrl键按下_, 1, 0), 选择 (Shift键按下_, 2, 0), 选择 (Alt键按下_, 4, 0), 选择 (Win键按下_, 8, 0)), 1000), 键代码_)))

.子程序 _编辑框_键组合_放开某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #Ctrl键))
    置快捷键组状态 (假, , , , , 1)
.如果真结束
.如果真 (等于 (键代码, #Shift键))
    置快捷键组状态 (假, , , , 1)
.如果真结束
.如果真 (等于 (键代码, #Alt键))
    置快捷键组状态 (假, , , 1)
.如果真结束
.如果真 (或者 (等于 (键代码, 91), 等于 (键代码, 92)))
    置快捷键组状态 (假, , 1)
.如果真结束
返回 (假)

.子程序 _超级列表框_快捷键_左键单击表项, 空白型, , 
.如果 (等于 (., -1))
    赋值 (.标题, “添加”)
    赋值 (.标记, “0”)
    赋值 (.内容, “”)
    赋值 (.标记, “”) ' 用此编辑框的“标记”属性来记录按键代码
     ' 组合框_快捷键类型.现行选中项 ＝ 0
     ' 组合框_快捷键动作.现行选中项 ＝ 0
    赋值 (.禁止, 真)
    
.否则
    赋值 (.内容, .取标题 (., 0))
    赋值 (.标记, 到文本 (求余数 (取绝对值 (.取表项数值 (.)), 100000)))
    赋值 (.现行选中项, 选择 (大于 (.取表项数值 (.), 0), 0, 1))
    赋值 (.现行选中项, 相减 (整除 (取绝对值 (.取表项数值 (.)), 100000), 1))
    赋值 (.标题, “修改”)
    赋值 (.标记, “1”)
    赋值 (.禁止, 假)
.如果结束


.子程序 _按钮_添加修改快捷键_被单击, 空白型, , 
.局部变量 现行表项, 整数型, , , 

.如果真 (等于 (到数值 (.标记), 0))
    鸣叫 ()
    返回 ()
.如果真结束
.判断开始 (等于 (.标记, “0”)) ' 0表示添加
    快捷键框添加修改项 (相乘 (相加 (相乘 (相加 (.现行选中项, 1), 100000), 到数值 (.标记)), 选择 (等于 (.现行选中项, 0), 1, -1)))
.默认
    快捷键框添加修改项 (., 相乘 (相加 (相乘 (相加 (.现行选中项, 1), 100000), 到数值 (.标记)), 选择 (等于 (.现行选中项, 0), 1, -1)))
    赋值 (., -1) ' 修改完就不选中了
    _超级列表框_快捷键_左键单击表项 ()
.判断结束
赋值 (.禁止, 假)

.子程序 快捷键框添加修改项, 整数型, , 用于添加/修改时，修改表项
.参数 项号, 整数型, 可空, 从0开始，为空则添加
.参数 全部代码, 整数型, , 

.局部变量 快捷键, 文本型, 静态, , 
.局部变量 类型, 文本型, 静态, , 
.局部变量 动作, 文本型, 静态, , 

.如果 (是否为空 (项号))
    转换代码到键组信息 (全部代码, 快捷键, 类型, 动作)
    赋值 (项号, .插入表项 (快捷键, , , , 全部代码))
    项号.置标题 (1, 类型)
    项号.置标题 (2, 动作)
    
.否则
    转换代码到键组信息 (全部代码, 快捷键, 类型, 动作)
    项号.置表项数值 (全部代码)
    项号.置标题 (0, 快捷键)
    项号.置标题 (1, 类型)
    项号.置标题 (2, 动作)
    
.如果结束
返回 (项号)

.子程序 转换代码到键组信息, 空白型, , 转换
.参数 代码, 整数型, , 
.参数 快捷键, 文本型, 参考, 
.参数 类型, 文本型, 参考, 
.参数 动作, 文本型, 参考, 

.局部变量 功能键, 整数型, , , 

.如果 (小于 (代码, 0)) ' 非全局键用负数表示
    赋值 (代码, 负 (代码))
    赋值 (类型, “局部”)
.否则
    赋值 (类型, “全局”)
.如果结束
赋值 (动作, 相减 (整除 (代码, 100000), 1).取项目文本 ())
赋值 (功能键, 整除 (求余数 (代码, 100000), 1000))
赋值 (快捷键, 相加 (选择 (不等于 (位与 (功能键, 1), 0), “Ctrl+”, “”), 选择 (不等于 (位与 (功能键, 2), 0), “Shift+”, “”), 选择 (不等于 (位与 (功能键, 4), 0), “Alt+”, “”), 选择 (不等于 (位与 (功能键, 8), 0), “Win+”, “”), 取键名 (求余数 (代码, 100000, 1000))))


.子程序 取键名, 文本型, , 
.参数 键代码, 整数型, , 

.局部变量 X, 整数型, , , 
.局部变量 对照表组, 按键信息, 静态, "0", 
.局部变量 临时_按键信息, 按键信息, , , 
.局部变量 分割的文本, 文本型, , "0", 
.局部变量 行内分割, 文本型, , "0", 

.如果真 (等于 (取数组成员数 (对照表组), 0)) ' 未初始化
    赋值 (分割的文本, 分割文本 (到文本 (#键名键码对照表), #换行符, ))
    .变量循环首 (1, 取数组成员数 (分割的文本), 1, X)
        赋值 (行内分割, 分割文本 (分割的文本 [X], “|”, 2))
        .如果真 (等于 (取数组成员数 (行内分割), 2))
            赋值 (临时_按键信息.代码, 到数值 (行内分割 [1]))
            赋值 (临时_按键信息.名称, 行内分割 [2])
            加入成员 (对照表组, 临时_按键信息)
        .如果真结束
        
    .变量循环尾 ()
    
.如果真结束
.变量循环首 (1, 取数组成员数 (对照表组), 1, X)
    .如果真 (等于 (对照表组 [X], 代码, 键代码))
        返回 (对照表组 [X], 名称)
    .如果真结束
    
.变量循环尾 ()
返回 (相加 (“(”, 到文本 (键代码), “)”)) ' 未能识别

.子程序 设置窗_读取快捷键, 空白型, , 
.局部变量 分割的文本, 文本型, , "0", 
.局部变量 X, 整数型, , , 

禁止重画 ()
全部删除 ()
赋值 (分割的文本, 分割文本 (播放器设置.热键, “|”, ))
.如果真 (大于或等于 (取数组成员数 (分割的文本), 1))
    .变量循环首 (1, 取数组成员数 (分割的文本), 1, X)
        快捷键框添加修改项 (到数值 (分割的文本 [X]))
    .变量循环尾 ()
.如果真结束
允许重画 ()

.子程序 _按钮_应用快捷键_被单击, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 临时文本, 文本型, , , 

赋值 (临时文本, “”)
.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    赋值 (临时文本, 相加 (临时文本, 到文本 (X.取表项数值 ()), “|”))
.变量循环尾 ()
赋值 (播放器设置.热键, 取文本左边 (临时文本, 相减 (取文本长度 (临时文本), 1)))
应用配置_快捷键 ()
赋值 (.禁止, 真)

.子程序 _按钮_删除快捷键_被单击, 空白型, , ===========快捷键=============
.局部变量 备份_选中项, 整数型, , , 

赋值 (备份_选中项, .)
.删除表项 (.)
赋值 (., 备份_选中项)
_超级列表框_快捷键_左键单击表项 ()
赋值 (.禁止, 假)

.子程序 _超级列表框_快捷键_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #Del键))
    _按钮_删除快捷键_被单击 ()
.如果真结束


.子程序 _编辑框_快进快退长度_内容被改变, 空白型, , 
赋值 (播放器设置.快进快退长度, 到数值 (.内容))

.子程序 _组合框_最小化_列表项被选择, 空白型, , 
赋值 (播放器设置.最小化时隐藏, 等于 (.现行选中项, 0))

.子程序 _组合框_关闭按钮_列表项被选择, 空白型, , 
赋值 (播放器设置.关闭按钮退出, 等于 (.现行选中项, 0))

.子程序 _按钮_歌词_浏览扫描目录_被单击, 空白型, , 
.局部变量 返回路径, 文本型, , , 

赋值 (返回路径, 高级浏览文件夹 (“选择歌词扫描路径”, “”, 假, 真, 真))
.如果真 (不等于 (返回路径, “”))
    赋值 (.内容, 相加 (.内容, #换行符, 子文本替换 (返回路径, 取运行目录 (), “%rundir%”, , , 假)))
.如果真结束
_编辑框_歌词_扫描目录_内容被改变 ()

.子程序 _按钮_歌词_浏览保存目录_被单击, 空白型, , 
.局部变量 返回路径, 文本型, , , 

赋值 (返回路径, 高级浏览文件夹 (“选择歌词保存路径”, “”, 假, 真, 真))
.如果真 (不等于 (返回路径, “”))
    赋值 (.内容, 子文本替换 (返回路径, 取运行目录 (), “%rundir%”, , , 假))
.如果真结束
_编辑框_歌词_保存目录_内容被改变 ()

.子程序 _编辑框_歌词_扫描目录_内容被改变, 空白型, , 
 ' 去除末端换行符
赋值 (播放器设置.歌词_扫描路径, 选择 (等于 (取文本右边 (.内容, 2), #换行符), 取文本左边 (.内容, 相减 (取文本长度 (.内容), 2)), .内容))

.子程序 _编辑框_歌词_保存目录_内容被改变, 空白型, , 
赋值 (播放器设置.歌词_保存路径, .内容)


.子程序 _编辑框_歌词_保存文件名_内容被改变, 空白型, , 
赋值 (播放器设置.歌词_保存文件名, .内容)


.子程序 _编辑框_歌词_扫描文件名_内容被改变, 空白型, , 
 ' 去除末端换行符
赋值 (播放器设置.歌词_扫描文件名, 选择 (等于 (取文本右边 (.内容, 2), #换行符), 取文本左边 (.内容, 相减 (取文本长度 (.内容), 2)), .内容))

.子程序 _按钮_歌词显示_窗口字体_被单击, 空白型, , 
.如果真 (打开字体选择窗口 (设置窗口, 播放器设置.歌词窗_字体名称, 播放器设置.歌词窗_字体大小, , 播放器设置.歌词窗_字体风格, , , , , , ))
    重建字体 ()
    消息_歌词窗尺寸改变 ()
    刷新字体显示_窗口歌词选项 ()
.如果真结束


.子程序 _按钮_歌词显示_桌面字体_被单击, 空白型, , 
.如果真 (打开字体选择窗口 (设置窗口, 播放器设置.桌面歌词_字体名称, 播放器设置.桌面歌词_字体大小, , 播放器设置.桌面歌词_字体风格, , , , , , 假))
    应用配置_桌面歌词 (9)
    应用配置_桌面歌词 (10)
    应用配置_桌面歌词 (11)
    桌面歌词需要刷新 ()
    刷新字体显示_桌面歌词选项 ()
    
.如果真结束


.子程序 刷新字体显示_窗口歌词选项, 空白型, , 
赋值 (.标题, 相加 (播放器设置.歌词窗_字体名称, “，”, 到文本 (播放器设置.歌词窗_字体大小), 选择 (不等于 (位与 (播放器设置.歌词窗_字体风格, 1), 0), “，加粗”, “”), 选择 (不等于 (位与 (播放器设置.歌词窗_字体风格, 2), 0), “，倾斜”, “”), 选择 (不等于 (位与 (播放器设置.歌词窗_字体风格, 4), 0), “，下划线”, “”), 选择 (不等于 (位与 (播放器设置.歌词窗_字体风格, 8), 0), “，删除线”, “”)))

.子程序 刷新字体显示_桌面歌词选项, 空白型, , 

赋值 (.标题, 相加 (播放器设置.桌面歌词_字体名称, “，”, 到文本 (播放器设置.桌面歌词_字体大小), 选择 (不等于 (位与 (播放器设置.桌面歌词_字体风格, 1), 0), “，加粗”, “”), 选择 (不等于 (位与 (播放器设置.桌面歌词_字体风格, 2), 0), “，倾斜”, “”), 选择 (不等于 (位与 (播放器设置.桌面歌词_字体风格, 4), 0), “，下划线”, “”), 选择 (不等于 (位与 (播放器设置.桌面歌词_字体风格, 8), 0), “，删除线”, “”)))


.子程序 刷新画板_激活颜色, 空白型, , 
赋值 (.刷子颜色, 播放器设置.歌词窗_激活颜色)
.清除 ()
4.定位写出 (0, “激活文字”)
56.画矩形 (2, 66, 12)

.子程序 刷新画板_非激活颜色, 空白型, , 
赋值 (.刷子颜色, 播放器设置.歌词窗_非激活颜色)
.清除 ()
4.定位写出 (0, “一般文字”)
56.画矩形 (2, 66, 12)

.子程序 _画板_歌词显示_窗口激活颜色_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.歌词窗_激活颜色, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.歌词窗_激活颜色))
    返回 ()
.如果真结束
赋值 (播放器设置.歌词窗_激活颜色, 颜色)
重设颜色_歌词窗 ()
消息_歌词窗尺寸改变 ()
刷新画板_激活颜色 ()

.子程序 _画板_歌词显示_窗口非激活颜色_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.歌词窗_非激活颜色, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.歌词窗_非激活颜色))
    返回 ()
.如果真结束
赋值 (播放器设置.歌词窗_非激活颜色, 颜色)
重设颜色_歌词窗 ()
消息_歌词窗尺寸改变 ()
刷新画板_非激活颜色 ()


.子程序 刷新画板_滚动1, 空白型, , 
赋值 (.刷子颜色, 播放器设置.桌面歌词_颜色1)
.清除 ()
8.定位写出 (0, “未经过”)
52.画矩形 (2, 62, 12)

.子程序 刷新画板_滚动2, 空白型, , 
赋值 (.刷子颜色, 播放器设置.桌面歌词_颜色2)
.清除 ()
8.定位写出 (0, “未经过”)
52.画矩形 (2, 62, 12)

.子程序 刷新画板_滚动3, 空白型, , 
赋值 (.刷子颜色, 播放器设置.桌面歌词_颜色3)
.清除 ()
8.定位写出 (0, “已经过”)
52.画矩形 (2, 62, 12)

.子程序 刷新画板_滚动4, 空白型, , 
赋值 (.刷子颜色, 播放器设置.桌面歌词_颜色4)
.清除 ()
8.定位写出 (0, “已经过”)
52.画矩形 (2, 62, 12)

.子程序 _画板_歌词显示_滚动1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.桌面歌词_颜色1, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.桌面歌词_颜色1))
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_颜色1, 颜色)
应用配置_桌面歌词 (1)
桌面歌词需要刷新 ()
刷新画板_滚动1 ()

.子程序 _画板_歌词显示_滚动2_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.桌面歌词_颜色2, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.桌面歌词_颜色2))
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_颜色2, 颜色)
应用配置_桌面歌词 (2)
桌面歌词需要刷新 ()
刷新画板_滚动2 ()

.子程序 _画板_歌词显示_滚动3_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.桌面歌词_颜色3, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.桌面歌词_颜色3))
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_颜色3, 颜色)
应用配置_桌面歌词 (3)
桌面歌词需要刷新 ()
刷新画板_滚动3 ()

.子程序 _画板_歌词显示_滚动4_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.桌面歌词_颜色4, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.桌面歌词_颜色4))
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_颜色4, 颜色)
应用配置_桌面歌词 (4)
桌面歌词需要刷新 ()
刷新画板_滚动4 ()

.子程序 刷新画板_桌面背景, 空白型, , 
赋值 (.刷子颜色, 播放器设置.桌面歌词_背景颜色)
.清除 ()
.如果 (不等于 (播放器设置.桌面歌词_背景颜色, -1))
    8.定位写出 (0, “背景色”)
    52.画矩形 (2, 62, 12)
.否则
    4.定位写出 (0, “背景色”)
    44.定位写出 (0, “默认”)
.如果结束


.子程序 _画板_歌词显示_桌面背景_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

 ' -1为“默认底色”
赋值 (颜色, 高级颜色选择器 (播放器设置.桌面歌词_背景颜色, { -1, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.桌面歌词_背景颜色))
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_背景颜色, 颜色)
应用配置_桌面歌词 (12)
刷新画板_桌面背景 ()
向桌面歌词发送消息 (“TSBK”) ' Temporary Show Background 暂时显示背景供预览

.子程序 _滑块条_歌词显示1_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色浓度1, .位置)
应用配置_桌面歌词 (5)
桌面歌词需要刷新 ()

.子程序 _滑块条_歌词显示2_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色浓度2, .位置)
应用配置_桌面歌词 (6)
桌面歌词需要刷新 ()

.子程序 _滑块条_歌词显示3_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色浓度3, .位置)
应用配置_桌面歌词 (7)
桌面歌词需要刷新 ()

.子程序 _滑块条_歌词显示4_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色浓度4, .位置)
应用配置_桌面歌词 (8)
桌面歌词需要刷新 ()

.子程序 _滑块条_歌词显示5_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_文本透明度, .位置)
应用配置_桌面歌词 (14)
桌面歌词需要刷新 ()

.子程序 _滑块条_歌词显示6_位置被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_背景透明度, .位置)
应用配置_桌面歌词 (13)
向桌面歌词发送消息 (“TSBK”) ' Temporary Show Background 暂时显示背景供预览


.子程序 刷新按钮_卡拉OK模式, 空白型, , 
赋值 (.标题, 选择 (播放器设置.桌面歌词_卡拉OK模式, “卡拉OK模式已开启”, “卡拉OK模式已关闭”))

.子程序 _按钮_歌词显示_卡拉OK模式_被单击, 空白型, , 
赋值 (播放器设置.桌面歌词_卡拉OK模式, 取反 (播放器设置.桌面歌词_卡拉OK模式))
.如果真 (播放器设置.桌面歌词_卡拉OK模式)
    卡拉OK模式被改变 ()
.如果真结束
刷新按钮_卡拉OK模式 ()

.子程序 _编辑框_刷新间隔_内容被改变, 空白型, , 
赋值 (播放器设置.桌面歌词_刷新减慢, 到数值 (.内容))

.子程序 _按钮_歌词显示_配色方案_被单击, 空白型, , 
弹出菜单 (相加 (设置窗口., .左边, .左边, .左边, 4), 相加 (设置窗口., .顶边, .顶边, .顶边, 48))

.子程序 应用配置_配色方案, 空白型, , 每次载入预设方案后需要调用
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度1)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度2)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度3)
赋值 (.位置, 播放器设置.桌面歌词_颜色浓度4)
刷新画板_滚动1 ()
刷新画板_滚动2 ()
刷新画板_滚动3 ()
刷新画板_滚动4 ()
应用配置_桌面歌词 (1)
应用配置_桌面歌词 (2)
应用配置_桌面歌词 (3)
应用配置_桌面歌词 (4)
应用配置_桌面歌词 (5)
应用配置_桌面歌词 (6)
应用配置_桌面歌词 (7)
应用配置_桌面歌词 (8)
桌面歌词需要刷新 ()

.子程序 _方案1_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, #绿色)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, #橙黄)
赋值 (播放器设置.桌面歌词_颜色4, #白色)
赋值 (播放器设置.桌面歌词_颜色浓度1, 220)
赋值 (播放器设置.桌面歌词_颜色浓度2, 150)
赋值 (播放器设置.桌面歌词_颜色浓度3, 220)
赋值 (播放器设置.桌面歌词_颜色浓度4, 150)
应用配置_配色方案 ()

.子程序 _方案2_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, 16744448)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, #黄色)
赋值 (播放器设置.桌面歌词_颜色4, #白色)
赋值 (播放器设置.桌面歌词_颜色浓度1, 220)
赋值 (播放器设置.桌面歌词_颜色浓度2, 150)
赋值 (播放器设置.桌面歌词_颜色浓度3, 187)
赋值 (播放器设置.桌面歌词_颜色浓度4, 164)
应用配置_配色方案 ()

.子程序 _方案3_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, #红色)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, 16711808)
赋值 (播放器设置.桌面歌词_颜色4, #白色)
赋值 (播放器设置.桌面歌词_颜色浓度1, 187)
赋值 (播放器设置.桌面歌词_颜色浓度2, 120)
赋值 (播放器设置.桌面歌词_颜色浓度3, 198)
赋值 (播放器设置.桌面歌词_颜色浓度4, 142)
应用配置_配色方案 ()

.子程序 _方案4_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, #黄色)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, #绿色)
赋值 (播放器设置.桌面歌词_颜色4, #白色)
赋值 (播放器设置.桌面歌词_颜色浓度1, 220)
赋值 (播放器设置.桌面歌词_颜色浓度2, 125)
赋值 (播放器设置.桌面歌词_颜色浓度3, 181)
赋值 (播放器设置.桌面歌词_颜色浓度4, 170)
应用配置_配色方案 ()

.子程序 _方案5_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, 14618718)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, 12615935)
赋值 (播放器设置.桌面歌词_颜色4, #白色)
赋值 (播放器设置.桌面歌词_颜色浓度1, 215)
赋值 (播放器设置.桌面歌词_颜色浓度2, 125)
赋值 (播放器设置.桌面歌词_颜色浓度3, 255)
赋值 (播放器设置.桌面歌词_颜色浓度4, 147)
应用配置_配色方案 ()

.子程序 _方案6_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, 16776992)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, 3487231)
赋值 (播放器设置.桌面歌词_颜色4, 13092607)
赋值 (播放器设置.桌面歌词_颜色浓度1, 215)
赋值 (播放器设置.桌面歌词_颜色浓度2, 164)
赋值 (播放器设置.桌面歌词_颜色浓度3, 255)
赋值 (播放器设置.桌面歌词_颜色浓度4, 142)
应用配置_配色方案 ()

.子程序 _方案7_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, 8421504)
赋值 (播放器设置.桌面歌词_颜色2, #白色)
赋值 (播放器设置.桌面歌词_颜色3, 15234048)
赋值 (播放器设置.桌面歌词_颜色4, 16764108)
赋值 (播放器设置.桌面歌词_颜色浓度1, 130)
赋值 (播放器设置.桌面歌词_颜色浓度2, 204)
赋值 (播放器设置.桌面歌词_颜色浓度3, 198)
赋值 (播放器设置.桌面歌词_颜色浓度4, 142)
应用配置_配色方案 ()

.子程序 _方案8_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, 9671679)
赋值 (播放器设置.桌面歌词_颜色2, 4737279)
赋值 (播放器设置.桌面歌词_颜色3, #白色)
赋值 (播放器设置.桌面歌词_颜色4, 65535)
赋值 (播放器设置.桌面歌词_颜色浓度1, 147)
赋值 (播放器设置.桌面歌词_颜色浓度2, 210)
赋值 (播放器设置.桌面歌词_颜色浓度3, 170)
赋值 (播放器设置.桌面歌词_颜色浓度4, 210)
应用配置_配色方案 ()

.子程序 _方案9_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, #白色)
赋值 (播放器设置.桌面歌词_颜色2, #黑色)
赋值 (播放器设置.桌面歌词_颜色3, #白色)
赋值 (播放器设置.桌面歌词_颜色4, #浅灰)
赋值 (播放器设置.桌面歌词_颜色浓度1, 136)
赋值 (播放器设置.桌面歌词_颜色浓度2, 200)
赋值 (播放器设置.桌面歌词_颜色浓度3, 220)
赋值 (播放器设置.桌面歌词_颜色浓度4, 136)
应用配置_配色方案 ()

.子程序 _方案10_被选择, 空白型, , 
赋值 (播放器设置.桌面歌词_颜色1, #白色)
赋值 (播放器设置.桌面歌词_颜色2, 8453888)
赋值 (播放器设置.桌面歌词_颜色3, 327554)
赋值 (播放器设置.桌面歌词_颜色4, 4259584)
赋值 (播放器设置.桌面歌词_颜色浓度1, 221)
赋值 (播放器设置.桌面歌词_颜色浓度2, 181)
赋值 (播放器设置.桌面歌词_颜色浓度3, 215)
赋值 (播放器设置.桌面歌词_颜色浓度4, 136)
应用配置_配色方案 ()


.子程序 _按钮_歌词显示_偏移修正_被单击, 空白型, , 
载入 (偏移修正窗口, 设置窗口, 假)

.子程序 刷新画板_视觉效果_频谱上方, 空白型, , 
赋值 (.刷子颜色, 播放器设置.频谱_颜色上_颜色值)
.清除 ()
18.定位写出 (0, “频谱上方颜色”)
98.画矩形 (2, 108, 12)


.子程序 刷新画板_视觉效果_频谱下方, 空白型, , 
赋值 (.刷子颜色, 播放器设置.频谱_颜色下_颜色值)
.清除 ()
18.定位写出 (0, “频谱下方颜色”)
98.画矩形 (2, 108, 12)

.子程序 刷新画板_视觉效果_波形, 空白型, , 
赋值 (.刷子颜色, 播放器设置.波形_颜色值)
.清除 ()
24.定位写出 (0, “波形颜色”)
98.画矩形 (2, 108, 12)

.子程序 刷新画板_视觉效果_提示, 空白型, , 
赋值 (.文本颜色, #红色)
2.定位写出 (2, “提示：”)
2.定位写出 (16, “XP用户建议将颜色浓度保持在最大，不要开启透明合成”)

.子程序 _画板_视觉效果_频谱上方_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.频谱_颜色上_颜色值, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.频谱_颜色上_颜色值))
    返回 ()
.如果真结束
赋值 (播放器设置.频谱_颜色上_颜色值, 颜色)
重设颜色_视觉效果 ()
刷新画板_视觉效果_频谱上方 ()

.子程序 _画板_视觉效果_频谱下方_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.频谱_颜色下_颜色值, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.频谱_颜色下_颜色值))
    返回 ()
.如果真结束
赋值 (播放器设置.频谱_颜色下_颜色值, 颜色)
重设颜色_视觉效果 ()
刷新画板_视觉效果_频谱下方 ()

.子程序 _滑块条_视觉效果_频谱上方_位置被改变, 空白型, , 
赋值 (播放器设置.频谱_颜色上_浓度, .位置)
重设颜色_视觉效果 ()

.子程序 _滑块条_视觉效果_频谱下方_位置被改变, 空白型, , 
赋值 (播放器设置.频谱_颜色下_浓度, .位置)
重设颜色_视觉效果 ()

.子程序 _画板_视觉效果_波形_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 颜色, 整数型, , , 

赋值 (颜色, 高级颜色选择器 (播放器设置.波形_颜色值, { #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色, #白色 }))
.如果真 (等于 (颜色, 播放器设置.波形_颜色值))
    返回 ()
.如果真结束
赋值 (播放器设置.波形_颜色值, 颜色)
重设颜色_视觉效果 ()
刷新画板_视觉效果_波形 ()

.子程序 _滑块条_视觉效果_波形_位置被改变, 空白型, , 
赋值 (播放器设置.波形_颜色浓度, .位置)
重设颜色_视觉效果 ()


.子程序 _编辑框_视觉效果_波形粗细_内容被改变, 空白型, , 
赋值 (播放器设置.波形_画笔粗细, 到数值 (.内容))
重设颜色_视觉效果 ()

.子程序 _组合框_杂项_气球文本_编辑内容被改变, 空白型, , 
赋值 (播放器设置.标签显示方案_托盘气球, .内容)

.子程序 _组合框_杂项_窗口标题_编辑内容被改变, 空白型, , 
赋值 (播放器设置.标签显示方案_窗口标题, .内容)
赋值 (主窗口.., 生成标题 (播放器设置.标签显示方案_窗口标题, 取当前TAG ()))
滚动显示任务栏文本 (主窗口.., 真)


.子程序 _组合框_杂项_列表标题_编辑内容被改变, 空白型, , 
赋值 (播放器设置.标签显示方案_列表, .内容)

.子程序 _组合框_杂项_列表标题_列表项被选择, 空白型, , 
_组合框_杂项_列表标题_编辑内容被改变 ()

.子程序 _组合框_杂项_气球文本_列表项被选择, 空白型, , 
_组合框_杂项_气球文本_编辑内容被改变 ()

.子程序 _组合框_杂项_窗口标题_列表项被选择, 空白型, , 
_组合框_杂项_窗口标题_编辑内容被改变 ()


.子程序 _气球提示框1_提示框即将弹出, 逻辑型, , 
.参数 窗口组件句柄, 整数型, , 
.参数 手柄横向坐标, 整数型, 参考, 
.参数 手柄纵向坐标, 整数型, 参考, 
.参数 提示文本, 文本型, 参考, 

.局部变量 X, 整数型, , , 
.局部变量 表项矩形, 矩形_, , , 

.判断开始 (等于 (窗口组件句柄, 取窗口句柄 ()))
    .变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
        赋值 (表项矩形, 取表项矩形 (窗口组件句柄, X))
        .如果真 (并且 (大于 (手柄横向坐标, 表项矩形.左边), 小于 (手柄横向坐标, 表项矩形.右边), 大于 (手柄纵向坐标, 表项矩形.顶边), 小于 (手柄纵向坐标, 表项矩形.底边)))
            赋值 (提示文本, 提示文本组_常规 [相加 (X, 1)])
        .如果真结束
        
    .变量循环尾 ()
.判断 (等于 (窗口组件句柄, 取窗口句柄 ()))
    .变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
        赋值 (表项矩形, 取表项矩形 (窗口组件句柄, X))
        .如果真 (并且 (大于 (手柄横向坐标, 表项矩形.左边), 小于 (手柄横向坐标, 表项矩形.右边), 大于 (手柄纵向坐标, 表项矩形.顶边), 小于 (手柄纵向坐标, 表项矩形.底边)))
            赋值 (提示文本, 提示文本组_常规 [相加 (X, 5)])
        .如果真结束
        
    .变量循环尾 ()
.判断 (或者 (等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ())))
    赋值 (提示文本, 子文本替换 (#提示文本_歌词_目录类, #换行符, “”, , , 真))
.判断 (或者 (等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ())))
    赋值 (提示文本, 子文本替换 (#提示文本_歌词_文件名类, #换行符, “”, , , 真))
.判断 (或者 (等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ())))
    赋值 (提示文本, 子文本替换 (#提示文本_杂项_显示标题1, #换行符, “”, , , 真))
.判断 (等于 (窗口组件句柄, 取窗口句柄 ()))
    赋值 (提示文本, 子文本替换 (#提示文本_杂项_显示标题2, #换行符, “”, , , 真))
.判断 (或者 (等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ()), 等于 (窗口组件句柄, 取窗口句柄 ())))
    赋值 (提示文本, #提示文本_滑块条)
.默认
    
.判断结束


.子程序 取表项矩形, 矩形_, , 
.参数 超级列表框句柄, 整数型, , 
.参数 项号, 整数型, , 

.局部变量 矩形, 矩形_, , , 

发送消息_矩形 (超级列表框句柄, #, 项号, 矩形)
返回 (矩形)

.子程序 _标签_歌词_提示_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

取鼠标水平位置 ().未知支持库函数_26 (取鼠标垂直位置 (), 子文本替换 (相加 (#提示文本_歌词_目录类, “</br></br>”, #提示文本_歌词_文件名类), #换行符, “”, , , 真), -1, )

.子程序 _标签_杂项_提示_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

取鼠标水平位置 ().未知支持库函数_26 (取鼠标垂直位置 (), 子文本替换 (#提示文本_杂项_显示标题, #换行符, “”, , , 真), -1, )


.子程序 _按钮_杂项_列表字体_被单击, 空白型, , 
.如果真 (打开字体选择窗口 (设置窗口, 播放器设置.列表_字体名称, 播放器设置.列表_字体大小, 播放器设置.列表_字体颜色, 播放器设置.列表_字体风格, , , , , 播放器设置.列表_字体角度))
    应用配置_列表字体 ()
    刷新字体显示_列表 ()
.如果真结束


.子程序 刷新字体显示_列表, 空白型, , 
.局部变量 文本高度, 整数型, , , 

赋值 (.标题, 相加 (播放器设置.列表_字体名称, “，”, 到文本 (播放器设置.列表_字体大小), 选择 (不等于 (位与 (播放器设置.列表_字体风格, 1), 0), “，加粗”, “”), 选择 (不等于 (位与 (播放器设置.列表_字体风格, 2), 0), “，倾斜”, “”), 选择 (不等于 (位与 (播放器设置.列表_字体风格, 4), 0), “，下划线”, “”), 选择 (不等于 (位与 (播放器设置.列表_字体风格, 8), 0), “，删除线”, “”), 选择 (不等于 (播放器设置.列表_字体角度, 0), 选择 (大于 (播放器设置.列表_字体角度, 0), 相加 (“，逆时针旋转”, 到文本 (播放器设置.列表_字体角度), “度”), 相加 (“，顺时针旋转”, 到文本 (负 (播放器设置.列表_字体角度)), “度”)), “”)))
赋值 (.文本颜色, 播放器设置.列表_字体颜色)

.子程序 _超级列表框_视觉效果_类型_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.局部变量 X, 整数型, , , 

.如果 (等于 (检查框状态, 0))
    表项索引.置状态图片 (1)
.否则
    .变量循环首 (0, 相减 (取表项数 (), 1), 1, X) ' 取消选中其他表项
        .如果真 (不等于 (X, 表项索引))
            X.置状态图片 (0)
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (不等于 (表项索引, 播放器设置.视觉效果类型))
        赋值 (播放器设置.视觉效果类型, 表项索引)
        视觉效果需要重画 ()
    .如果真结束
    
.如果结束


.子程序 _超级列表框_视觉效果_参数_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.判断开始 (等于 (表项索引, 0)) ' 频谱
    赋值 (播放器设置.频谱_显示粗状, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 1)) ' 波形
    赋值 (播放器设置.波形_是否淡出, 等于 (检查框状态, 1))
.默认
    
.判断结束

.如果真 (等于 (播放器设置.视觉效果类型, 表项索引))
    视觉效果需要重画 ()
.如果真结束


.子程序 _组合框_杂项_MP3标签读取顺序_编辑内容被改变, 空白型, , 
赋值 (播放器设置.MP3标签读取顺序, .内容)

.子程序 _组合框_杂项_MP3标签读取顺序_列表项被选择, 空白型, , 
_组合框_杂项_MP3标签读取顺序_编辑内容被改变 ()

.子程序 _组合框_杂项_MP3标签读取顺序_字符输入, 整数型, , 
.参数 字符代码, 整数型, , 

.如果真 (并且 (大于或等于 (字符代码, 取代码 (“a”, )), 小于或等于 (字符代码, 取代码 (“z”, ))))
    返回 (相减 (字符代码, 32)) ' 转换到大写
.如果真结束


.子程序 _超级列表框_引擎管理_选择_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.判断开始 (小于或等于 (表项索引, 1)) ' 前两个：单选框
    .如果 (等于 (检查框状态, 0)) ' 即将从第四张图片：单选已按下，切换到第一张（此事件为：点击已按下选框）
        表项索引.置状态图片 (3) ' 保持不变
    .否则
         ' 否则。让它((自动))变成第三张：单选已按下（此事件为：点击未按下选框）
        相减 (1, 表项索引).置状态图片 (2) ' 把另一个置为未选（这里只有2个单选框，偷懒一点）
    .如果结束
    
.判断 (等于 (表项索引, 2)) ' 第三个：多选框
    .如果真 (等于 (检查框状态, 2)) ' 即将从第二张图片：多选已按下，切换到第三张（此事件为：点击已按下选框）
        表项索引.置状态图片 (0) ' 重新置回未选中状态
    .如果真结束
    
.默认
    
.判断结束
赋值 (.下划线, “1”) ' 标记为已修改，在关闭时写入

.子程序 设置窗_读取插件信息, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 当前表项, 整数型, , , 
.局部变量 目录, 文本型, , , 
.局部变量 文件名, 文本型, , , 

禁止重画 ()
全部删除 ()
.变量循环首 (1, 取数组成员数 (已加载的插件), 1, X)
    赋值 (当前表项, .插入表项 (已加载的插件 [X], 文件名, , , , ))
    当前表项.置标题 (1, 已加载的插件 [X], 提供支持)
    当前表项.置表项数值 (1) ' 1：已启用
.变量循环尾 ()
赋值 (目录, 相加 (取运行目录 (), “\Plugins\”))
赋值 (文件名, 寻找文件 (相加 (目录, “bass*.dll”), ))
.判断循环首 (不等于 (文件名, “”))
    .如果真 (不等于 (位与 (取文件属性 (相加 (目录, 文件名)), #隐藏文件), 0)) ' 是被隐藏（禁用）的插件
        赋值 (当前表项, .插入表项 (文件名, , , , ))
        当前表项.置标题 (1, “已禁用”)
        当前表项.置表项数值 (0) ' 0：已禁用
    .如果真结束
    赋值 (文件名, 寻找文件 ())
.判断循环尾 ()
允许重画 ()

.子程序 _超级列表框_引擎管理_插件_左键单击表项, 空白型, , 
连续赋值 (等于 (取已选择表项数 (), 0), .禁止, .禁止)

.子程序 _按钮_引擎管理_启用插件_被单击, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 被选择表项, 整数型, , "0", 
.局部变量 文件名, 文本型, , , 

赋值 (被选择表项, 取被选择表项 ())
.变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
    .如果真 (等于 (被选择表项.取表项数值 ( [X]), 0)) ' 是被禁用的
        赋值 (文件名, 相加 (取运行目录 (), “\Plugins\”, 被选择表项.取标题 ( [X], 0)))
        .如果 (置文件属性 (文件名, 位与 (取文件属性 (文件名), 位取反 (#隐藏文件)))) ' 取消隐藏属性
            被选择表项.置表项数值 ( [X], 1) ' 作标记
            被选择表项.置标题 ( [X], 1, “已启用，此插件将在重启后生效”)
        .否则
            被选择表项.置标题 ( [X], 1, “启用失败，请手动取消其隐藏属性”)
            
        .如果结束
        
    .如果真结束
    
.变量循环尾 ()

.子程序 _按钮_引擎管理_禁用插件_被单击, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 被选择表项, 整数型, , "0", 
.局部变量 文件名, 文本型, , , 

赋值 (被选择表项, 取被选择表项 ())
.变量循环首 (1, 取数组成员数 (被选择表项), 1, X)
    .如果真 (等于 (被选择表项.取表项数值 ( [X]), 1)) ' 是已启用的
        赋值 (文件名, 相加 (取运行目录 (), “\Plugins\”, 被选择表项.取标题 ( [X], 0)))
        .如果 (置文件属性 (文件名, 位或 (取文件属性 (文件名), #隐藏文件))) ' 添加隐藏属性
            被选择表项.置表项数值 ( [X], 0) ' 作标记
            被选择表项.置标题 ( [X], 1, “此插件将在重启后禁用”)
        .否则
            被选择表项.置标题 ( [X], 1, “禁用失败，请手动设置隐藏属性”)
            
        .如果结束
        
    .如果真结束
    
.变量循环尾 ()


.子程序 _按钮_引擎管理_浏览_被单击, 空白型, , 
.局部变量 对话框, 新通用对话框类, , , 
.局部变量 文件名, 文本型, , , 

对话框.文件对话框初始化 (“音色库文件（*.SF2)|*.SF2|所有文件|*.*”)
对话框.打开 (设置窗口.取窗口句柄 (), 0, 文件名, “选择音色库路径”, 0)
赋值 (文件名, 子文本替换 (文件名, 取运行目录 (), “%rundir%”, , , 假))
赋值 (.内容, 文件名)
_编辑框_引擎管理_音色库_内容被改变 ()

.子程序 _编辑框_引擎管理_音色库_内容被改变, 空白型, , 
赋值 (播放器设置.音色库路径, .内容)

.子程序 _超级列表框_常规1_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.判断开始 (等于 (表项索引, 0))
    赋值 (播放器设置.继续上次播放, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 1))
    赋值 (播放器设置.记住上次位置, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 2))
    赋值 (播放器设置.任务栏滚动信息, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 3))
    赋值 (播放器设置.保证当前播放, 等于 (检查框状态, 1))
.默认
    
.判断结束


.子程序 _超级列表框_常规2_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.判断开始 (等于 (表项索引, 0))
    赋值 (播放器设置.仅隐藏时显示托盘图标, 等于 (检查框状态, 1))
    应用配置_托盘图标 ()
.判断 (等于 (表项索引, 1))
    赋值 (播放器设置.换歌气球提示, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 2))
    赋值 (播放器设置.仅隐藏时显示气球, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 3))
    赋值 (播放器设置.开启历史记录, 等于 (检查框状态, 1))
.默认
    
.判断结束


.子程序 _设置窗口_将被销毁, 空白型, , 
水波特效.未知支持库函数_3 ()

.子程序 _画板_关于_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

俘获鼠标 (取窗口句柄 ())
水波特效.未知支持库函数_5 (横向位置, 纵向位置, 取随机数 (2, 4), 取随机数 (200, 700))
赋值 (.标记, “1”)

.子程序 _画板_关于_鼠标位置被移动, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (.标记, “1”))
    水波特效.未知支持库函数_5 (横向位置, 纵向位置, 取随机数 (2, 4), 取随机数 (200, 700))
.如果真结束


.子程序 _画板_关于_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

释放鼠标 ()
赋值 (.标记, “”)

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 应用皮肤, 空白型, , 
.参数 窗口句柄, 整数型, , 
.参数 Skin样式, 整数型, , 参考常量 #Skin_***
.参数 颜色方案, 颜色方案, 可空, 



.子程序 加入易语言标签, 空白型, , 由于易语言的标签较为特殊,无法按常规方式进行换肤,故留此接口; 如果不使用此方法,则标签仅作替换背景颜色处理!另注意:此方法必须在调用 "应用皮肤" 后再进行
.参数 易语言标签, 标签, , 



.子程序 取当前颜色方案, 颜色方案, , 


.子程序 加入选择列表框, 空白型, , 
.参数 选择列表框_, 选择列表框, , 



.窗口程序集 窗口_菜单, , , 

.程序集变量 OldProc, 整数型, , , 
.程序集变量 菜单透明度, 整数型, , , 
.程序集变量 下次不淡出, 逻辑型, , , 
.程序集变量 钩子句柄, 整数型, , , 
.程序集变量 页号, 整数型, , , 
.子程序 _菜单窗口_创建完毕, 空白型, , 
菜单窗口.移动 (取鼠标水平位置 (), 取鼠标垂直位置 (), , )
SetWindowLong (菜单窗口.取窗口句柄 (), -20, 524288)
设置窗口透明 (菜单窗口.取窗口句柄 (), 0, 0, 2)
赋值 (.位置, 播放器设置.透明度)
加入易语言标签 ()

赋值 (OldProc, SetWindowLong (菜单窗口.取窗口句柄 (), -4, 到数值 (&子类化处理_菜单)))


.子程序 子类化处理_菜单, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 IParam, 整数型, , 

.判断开始 (等于 (Msg, 161)) ' 非客户区左键按下
    主窗口.调整层次 (1)
    .如果真 (或者 (等于 (wParam, 12), 等于 (wParam, 13), 等于 (wParam, 14), 等于 (wParam, 15)))
        返回 (1)
    .如果真结束
    .如果真 (或者 (等于 (wParam, 10), 等于 (wParam, 11), 等于 (wParam, 16), 等于 (wParam, 17)))
        返回 (1)
    .如果真结束
    
.默认
    
.判断结束
.判断开始 (等于 (Msg, #))
    .如果真 (等于 (wParam, 0))
        .如果 (下次不淡出)
            赋值 (下次不淡出, 假)
            
        .否则
            菜单窗口_隐藏 ()
        .如果结束
        
    .如果真结束
    
.默认
    
.判断结束

返回 (CallWindowProc (OldProc, hWnd, Msg, wParam, IParam))

.子程序 鼠标处理_菜单, 整数型, , 
.参数 icode, 整数型, , 
.参数 wparam, 整数型, , 
.参数 lparam, 整数型, , 

.局部变量 info, 鼠标信息, , , 

复制内存_指针到鼠标信息 (info, lparam, 20)
.如果真 (或者 (等于 (wparam, 513), 等于 (wparam, 514), 等于 (wparam, 516), 等于 (wparam, 517))) ' 鼠标按键操作
    .如果 (或者 (小于 (info.POINT.X, 菜单窗口.), 大于 (info.POINT.X, 相加 (菜单窗口., 菜单窗口.)), 小于 (info.POINT.Y, 菜单窗口.), 大于 (info.POINT.Y, 相加 (菜单窗口., 菜单窗口.))))
        菜单窗口_隐藏 ()
    .否则
        主窗口.调整层次 (1) ' 除了主窗口，其他都会显示，所以要补偿一下
    .如果结束
    
.如果真结束
返回 (CallNextHookEx (钩子句柄, icode, wparam, lparam))

.子程序 菜单窗口_显示, 空白型, , 外部接口函数
赋值 (.标题, 选择 (等于 (主窗口., 2), “还原”, “最小化”))
赋值 (.标记, 选择 (等于 (主窗口., 2), “0”, “2”))

刷新菜单按钮 ()
.如果真 (等于 (是否为调试版 (), 假))
    赋值 (钩子句柄, SetWindowsHookExA (#, &鼠标处理_菜单, GetModuleHandleA (0), 0))
.如果真结束


赋值 (菜单透明度, 0)
赋值 (.时钟周期, 0)
赋值 (.时钟周期, 10)
赋值 (菜单窗口., 真)
菜单窗口.获取焦点 ()

.子程序 菜单窗口_隐藏, 空白型, , 外部接口函数
赋值 (.时钟周期, 0)
赋值 (.时钟周期, 10)
.如果真 (不等于 (钩子句柄, 0))
    UnhookWindowsHookEx (钩子句柄)
    赋值 (钩子句柄, 0)
.如果真结束


.子程序 菜单窗口_直接隐藏, 空白型, , 外部接口函数（相比于上面的那个，这个没有淡出动画）
赋值 (下次不淡出, 真)
赋值 (菜单窗口., 假)
赋值 (.时钟周期, 0)
赋值 (.时钟周期, 0)
.如果真 (不等于 (钩子句柄, 0))
    UnhookWindowsHookEx (钩子句柄)
    赋值 (钩子句柄, 0)
.如果真结束


.子程序 _时钟_显示_周期事件, 空白型, , 淡入淡出
赋值 (菜单透明度, 相加 (菜单透明度, 30))
设置窗口透明 (菜单窗口.取窗口句柄 (), 0, 菜单透明度, 2)
.如果真 (大于或等于 (菜单透明度, 200))
    赋值 (.时钟周期, 0)
.如果真结束


.子程序 _时钟_隐藏_周期事件, 空白型, , 淡入淡出
赋值 (菜单透明度, 相减 (菜单透明度, 30))
.如果真 (小于或等于 (菜单透明度, 0))
    赋值 (菜单透明度, 0)
    赋值 (.时钟周期, 0)
    赋值 (菜单窗口., 假)
.如果真结束
设置窗口透明 (菜单窗口.取窗口句柄 (), 0, 菜单透明度, 2)

.子程序 _滑块条_透明度_位置被改变, 空白型, , 透明度
赋值 (播放器设置.透明度, .位置)
应用配置_透明度 ()

.子程序 _按钮_音量加大_被单击, 空白型, , 音量++
改变音量 (4)

.子程序 _按钮_音量减小_被单击, 空白型, , 音量--
改变音量 (-4)

.子程序 _按钮_选项_被单击, 空白型, , 程序选项
菜单窗口_直接隐藏 ()
.如果真 (等于 (是否已创建 (设置窗口), 假))
    载入 (设置窗口, 主窗口, 假)
.如果真结束


.子程序 _按钮_退出_被单击, 空白型, , 退出
菜单窗口_直接隐藏 ()
退出程序 ()

.子程序 _按钮_最小化_被单击, 空白型, , 最小化/恢复
菜单窗口_直接隐藏 ()
.如果 (等于 (.标记, “0”))
    显示主窗口 ()
.否则
    赋值 (主窗口., 2)
.如果结束


.子程序 _时钟_调整音量_周期事件, 空白型, , 
改变音量 (到数值 (.标记))

.子程序 _按钮_音量加大_鼠标左键被按下, 逻辑型, , 音量
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)
赋值 (.标记, “4”)
赋值 (.时钟周期, 100)

.子程序 _按钮_音量加大_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.时钟周期, 0)

.子程序 _按钮_音量减小_鼠标左键被按下, 逻辑型, , 音量
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)
赋值 (.标记, “-4”)
赋值 (.时钟周期, 100)


.子程序 _按钮_音量减小_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

赋值 (.时钟周期, 0)

.子程序 _按钮_播放暂停_被单击, 空白型, , 播放/暂停
播放暂停 ()

.子程序 _按钮_上一首_被单击, 空白型, , 
上一首 ()

.子程序 _按钮_下一首_被单击, 空白型, , 
下一首 ()

.子程序 _按钮_打开_被单击, 空白型, , 
打开对话框选择文件 ()

.子程序 _菜单窗口_可否被关闭, 逻辑型, , 
返回 (假)

.子程序 刷新菜单按钮, 空白型, , 刷新“播放/暂停”按钮
.如果真 (等于 (是否已创建 (菜单窗口), 假))
    返回 ()
.如果真结束


赋值 (.标题, 选择 (等于 (媒体_取状态 (), 1), “暂停”, “播放”))
赋值 (.标记, 选择 (等于 (媒体_取状态 (), 1), “0”, “1”))

赋值 (.禁止, 等于 (媒体_取状态 (), 0))



.子程序 _按钮_打开_鼠标左键被按下, 逻辑型, , 以下函数可以忽视
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_上一首_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_下一首_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_选项_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_最小化_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _标签1_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_重排窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)


.子程序 _菜单窗口_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _滑块条_透明度_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

主窗口.调整层次 (1)

.子程序 _按钮_重排窗口_被单击, 空白型, , 
菜单窗口_直接隐藏 ()
显示隐藏指定窗口 (2, 真)
列表窗.移动 (主窗口., 相加 (主窗口., 主窗口.), #主窗口宽度, #主窗口高度)
显示隐藏指定窗口 (3, 真)
歌词窗.移动 (相加 (主窗口., 主窗口.), 主窗口., #主窗口宽度, #主窗口高度)
显示隐藏指定窗口 (4, 真)
均衡器窗.移动 (相加 (主窗口., #主窗口宽度), 相加 (主窗口., #主窗口高度), , )


.程序集 HTTP程序集, , , 从一个模块里复制的

.程序集变量 hOpen, 整数型, , , 
.程序集变量 hConnect, 整数型, , , 
.程序集变量 hRequest, 整数型, , , 
.程序集变量 hMemFile, 整数型, , , 
.程序集变量 hMemBody, 整数型, , , 
.程序集变量 dwNumber, 整数型, , , 
.程序集变量 匿名程序集变量_17931, 空白型, , , 
.子程序 访问网页, 字节集, , 
.参数 完整网址, 文本型, , 
.参数 访问方式, 文本型, 可空, "GET" or "POST",为空默认"GET"
.参数 代理地址, 文本型, 可空, 
.参数 用户名, 文本型, 可空, 
.参数 密码, 文本型, 可空, 
.参数 附加协议头, 文本型, 可空, 
.参数 提交信息, 字节集, 可空, "POST"专用
.参数 返回状态文本, 文本型, 参考 可空, 在Send之后可以获取状态文本

.局部变量 hThread, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szRequest, 文本型, , , 
.局部变量 lpBody, 字节集, , , 

赋值 (hMemFile, 打开内存文件 ())
写出数据 (hMemFile, “MissWho”, 完整网址, 访问方式, 代理地址, 用户名, 密码, 附加协议头, 提交信息)
ReadFile ()
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag, szRequest, lpBody)
关闭文件 (hMemFile)
赋值 (hMemFile, 0)
.如果真 (或者 (不等于 (szFlag, “MissWho_OK”), 等于 (ret, 258)))
    赋值 (lpBody, {  })
.如果真结束
.如果真 (等于 (是否为空 (返回状态文本), 假))
    赋值 (返回状态文本, szRequest)
.如果真结束
返回 (lpBody)

.子程序 ReadFile, 逻辑型, , 
.局部变量 szFlag, 文本型, , , 
.局部变量 szFullAddr, 文本型, , , 
.局部变量 szVerb, 文本型, , , "GET" or "POST",为空默认"GET"
.局部变量 szProxyServer, 文本型, , , 
.局部变量 szUserName, 文本型, , , 
.局部变量 szPassword, 文本型, , , 
.局部变量 szHeaders, 文本型, , , 
.局部变量 szSendBody, 字节集, , , "POST"专用
.局部变量 szRequest, 文本型, , , 
.局部变量 匿名局部变量_17741, 空白型, , , 
.局部变量 szDomain, 文本型, , , 
.局部变量 szPageAddr, 文本型, , , 
.局部变量 bUseProxy, 逻辑型, , , 
.局部变量 lpBuffer, 字节集, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 文件内容, 字节集, , , 

.如果真 (等于 (hMemFile, 0))
    返回 (假)
.如果真结束
移到文件首 (hMemFile)
读入数据 (hMemFile, szFlag)
.如果真 (不等于 (szFlag, “MissWho”))
    返回 (假)
.如果真结束
读入数据 (hMemFile, szFullAddr, szVerb, szProxyServer, szUserName, szPassword, szHeaders, szSendBody)
移到文件首 (hMemFile)
删除数据 (hMemFile, 取文件长度 (hMemFile))
赋值 (szDomain, 取域名 (szFullAddr))
赋值 (szPageAddr, 取页面地址 (szFullAddr))
赋值 (bUseProxy, 不等于 (删全部空 (szProxyServer), “”))

 ' 建立基础连接
赋值 (hOpen, InternetOpenA (“Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)”, 选择 (bUseProxy, 3, 1), 选择 (bUseProxy, 相加 (“http=”, szProxyServer), 字符 (0)), 字符 (0), 0))
.如果真 (等于 (hOpen, 0))
    返回 (假)
.如果真结束
赋值 (hConnect, InternetConnectA (hOpen, szDomain, 取端口 (szFullAddr), 选择 (不等于 (删全部空 (szUserName), “”), szUserName, 字符 (0)), 选择 (不等于 (删全部空 (szPassword), “”), szPassword, 字符 (0)), #INTERNET_SERVICE_HTTP, 0, 0))
.如果真 (等于 (hConnect, 0))
    InternetCloseHandle (hOpen)
    赋值 (hOpen, 0)
    返回 (假)
.如果真结束
赋值 (hRequest, HttpOpenRequestA (hConnect, szVerb, szPageAddr, “HTTP/1.1”, 字符 (0), 字符 (0), 2147483648, 0))
.如果真 (等于 (hRequest, 0))
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    赋值 (hConnect, 0)
    赋值 (hOpen, 0)
    返回 (假)
.如果真结束

 ' 补充协议头
.如果真 (等于 (寻找文本 (szHeaders, “Accept: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*”, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Referer: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Referer: ”, szFullAddr, #换行符))
.如果真结束
.如果真 (等于 (寻找文本 (szHeaders, “Accept-Language: ”, 1, 真), -1))
    赋值 (szHeaders, 相加 (szHeaders, “Accept-Language: zh-cn”, #换行符))
.如果真结束

 ' 附带信息发送请求
.判断开始 (或者 (等于 (szVerb, “”), 等于 (到大写 (szVerb), “GET”)))
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), 到字节集 (字符 (0)), 0)
.判断 (等于 (到大写 (szVerb), “POST”))
    .如果真 (大于 (取字节集长度 (szSendBody), 0))
        .如果真 (等于 (寻找文本 (szHeaders, “Content-Type: ”, 1, 真), -1))
            赋值 (szHeaders, 相加 (szHeaders, “Content-Type: application/x-www-form-urlencoded”, #换行符))
        .如果真结束
        赋值 (szHeaders, 相加 (szHeaders, “Content-Length: ”, 到文本 (取字节集长度 (szSendBody)), #换行符))
    .如果真结束
    
    HttpSendRequestA (hRequest, szHeaders, 取文本长度 (szHeaders), szSendBody, 取字节集长度 (szSendBody))
    
.默认
    InternetCloseHandle (hRequest)
    InternetCloseHandle (hConnect)
    InternetCloseHandle (hOpen)
    赋值 (hRequest, 0)
    赋值 (hConnect, 0)
    赋值 (hOpen, 0)
    返回 (假)
.判断结束



 ' 读取页面数据
赋值 (hMemBody, 打开内存文件 ())
.循环判断首 ()
    赋值 (lpBuffer, 取空白字节集 (512))
    InternetReadFile (hRequest, lpBuffer, 取字节集长度 (lpBuffer), dwNumber)
     ' 避免文件过大造成的字节集相加降低效率，这里使用内存文件操作。
    写出字节集 (hMemBody, 取字节集左边 (lpBuffer, dwNumber))
     ' lpBody ＝ lpBody ＋ 取字节集左边 (lpBuffer, dwNumber)
.循环判断尾 (不等于 (dwNumber, 0))

 ' 取服务器回传协议头
赋值 (szRequest, 取空白文本 (1024))
HttpQueryInfoA (hRequest, 22, szRequest, 1024, 0)

移到文件首 (hMemBody)
移到文件首 (hMemFile)
写出数据 (hMemFile, “MissWho_OK”, szRequest, 读入字节集 (hMemBody, 取文件长度 (hMemBody)))
关闭文件 (hMemBody)
赋值 (hMemBody, 0)

 ' 关闭句柄
InternetCloseHandle (hRequest)
InternetCloseHandle (hConnect)
InternetCloseHandle (hOpen)
赋值 (hRequest, 0)
赋值 (hConnect, 0)
赋值 (hOpen, 0)
 ' 设置COOKIE
.如果真 (大于 (寻找文本 (szRequest, “Set-Cookie: ”, 1, 真), 0))
    赋值 (dwNumber, 打开内存文件 ())
    写出文本 (dwNumber, szRequest)
    移到文件首 (dwNumber)
    .判断循环首 (等于 (是否在文件尾 (dwNumber, 假), 假))
        赋值 (szPageAddr, 读入一行 (dwNumber))
        .如果真 (大于 (寻找文本 (szPageAddr, “Set-Cookie: ”, 1, 真), 0))
            赋值 (szPageAddr, 文本替换 (szPageAddr, 1, 12, ))
            赋值 (hRequest, 寻找文本 (szPageAddr, “=”, 1, 真))
            InternetSetCookieA (相加 (“http://”, szDomain), 取文本左边 (szPageAddr, 相减 (hRequest, 1)), 取文本右边 (szPageAddr, 相减 (取文本长度 (szPageAddr), hRequest)))
        .如果真结束
        
    .判断循环尾 ()
    关闭文件 (dwNumber)
    赋值 (dwNumber, 0)
.如果真结束
返回 (真)

.子程序 取域名, 文本型, , 
.参数 网址, 文本型, , 
.参数 不过滤端口, 逻辑型, 可空, 

.局部变量 dwNumber_, 整数型, , , 
.局部变量 dwLast, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 网址)
赋值 (dwNumber_, 选择 (等于 (寻找文本 (szServerName, “http://”, , 假), -1), 1, 相加 (寻找文本 (szServerName, “http://”, , 假), 7)))
赋值 (szServerName, 取文本中间 (szServerName, dwNumber_, 选择 (等于 (寻找文本 (szServerName, “/”, dwNumber_, 假), -1), 取文本长度 (szServerName), 相减 (寻找文本 (szServerName, “/”, dwNumber_, 假), dwNumber_)))) ' 这段代码是过滤掉前http://和后/
.如果真 (取反 (不过滤端口))
    赋值 (dwNumber_, 寻找文本 (szServerName, “:”, , 假))
    .如果真 (不等于 (dwNumber_, -1))
        赋值 (szServerName, 取文本左边 (szServerName, 相减 (dwNumber_, 1)))
    .如果真结束
    
.如果真结束
返回 (到小写 (szServerName))

.子程序 取端口, 整数型, , 
.参数 网址, 文本型, , 

.局部变量 dwNumber_, 整数型, , , 
.局部变量 szServerName, 文本型, , , 

赋值 (szServerName, 取域名 (网址, 真))
赋值 (dwNumber_, 寻找文本 (szServerName, “:”, , 假))
赋值 (dwNumber_, 选择 (等于 (dwNumber_, -1), 80, 到数值 (取文本右边 (szServerName, 相减 (取文本长度 (szServerName), dwNumber_)))))
返回 (dwNumber_)

.子程序 取页面地址, 文本型, , 
.参数 网址, 文本型, , 

.局部变量 页面地址, 文本型, , , 
.局部变量 符号位置, 整数型, , , 
.局部变量 域名, 文本型, , , 

赋值 (域名, 取域名 (网址))
赋值 (符号位置, 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真))
赋值 (页面地址, 选择 (等于 (符号位置, -1), “/”, 取文本右边 (网址, 相加 (相减 (取文本长度 (网址), 符号位置), 1))))
返回 (页面地址)

.子程序 关闭打开的句柄, 空白型, , 
.如果真 (不等于 (hRequest, 0))
    赋值 (hRequest, 0)
.如果真结束
.如果真 (不等于 (hConnect, 0))
    赋值 (hConnect, 0)
.如果真结束
.如果真 (不等于 (hOpen, 0))
    赋值 (hOpen, 0)
.如果真结束
.如果真 (不等于 (hMemFile, 0))
    关闭文件 (hMemFile)
    赋值 (hMemFile, 0)
.如果真结束
.如果真 (不等于 (hMemBody, 0))
    关闭文件 (hMemBody)
    赋值 (hMemBody, 0)
.如果真结束
.如果真 (不等于 (dwNumber, 0))
    关闭文件 (dwNumber)
    赋值 (dwNumber, 0)
.如果真结束


.窗口程序集 窗口_文件属性, , , 

.程序集变量 修改的项, 整数型, , , 仅单文件状态时用，记录这个文件在列表中的位置，从0开始，用作修改后直接刷新列表
.程序集变量 多文件状态, 逻辑型, , , 
.程序集变量 多文件猜测方案, 文本型, , , 
.程序集变量 列表项数组, 整数型, , "0", 多文件时用
.程序集变量 文件名数组, 文本型, , "0", 同上
.程序集变量 准备关闭, 逻辑型, , , 多文件修改时，为了缓冲关闭操作而设立的变量
.程序集变量 多文件修改进行中, 逻辑型, , , 
.程序集变量 改过图片, 逻辑型, , , 
.程序集变量 扩展名, 文本型, , , 仅单文件状态时有效
.程序集变量 支持专辑图片, 逻辑型, , , 同上
.程序集变量 匿名程序集变量_28005, 空白型, , , 
.子程序 _编辑框_备注_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_编号_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_歌词_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_标题_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_艺术家_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_年份_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _编辑框_专辑_内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _组合框_流派_编辑内容被改变, 空白型, , 
赋值 (.禁止, 假)


.子程序 _组合框_流派_列表项被选择, 空白型, , 
赋值 (.禁止, 假)


.子程序 _选择框_重写_被单击, 空白型, , 
赋值 (.禁止, 假)

.子程序 _组合框_V2编码方式_列表项被选择, 空白型, , 
赋值 (.禁止, 假)


.子程序 _按钮_关闭_被单击, 空白型, , 
赋值 (列表窗..禁止, 假)
赋值 (列表窗..禁止, 假)
.如果 (多文件修改进行中)
    赋值 (准备关闭, 真)
.否则
    文件属性窗口.销毁 ()
.如果结束


.子程序 _按钮_猜测标签_被单击, 空白型, , 
弹出菜单 (相加 (文件属性窗口., .左边, .左边, 4), 相加 (文件属性窗口., .顶边, .顶边, 46))

.子程序 开始猜测标签, 空白型, , 猜测标签，并自动填充当前窗口，仅单文件状态有效，对多文件会自动设置预猜测方案
.参数 猜测方案, 文本型, , 

.局部变量 标签, 音乐文件标签, , , 
.局部变量 修改标记, 逻辑型, , "12", 

.如果真 (多文件状态)
    赋值 (多文件猜测方案, 猜测方案)
    赋值 (.内容, “(多个文件)(已应用猜测标签)”)
    赋值 (.禁止, 假)
    返回 ()
.如果真结束

.如果真 (等于 (猜测标签 (.内容, 猜测方案, 标签, 修改标记), 假))
    鸣叫 ()
    返回 ()
.如果真结束



.如果真 (修改标记 [1])
    赋值 (.内容, 标签.Title)
.如果真结束
.如果真 (修改标记 [2])
    赋值 (.内容, 标签.Artist)
.如果真结束
.如果真 (修改标记 [3])
    赋值 (.内容, 标签.Album)
.如果真结束
.如果真 (修改标记 [4])
    赋值 (.内容, 标签.Year)
.如果真结束
.如果真 (修改标记 [5])
    赋值 (.内容, 标签.ContenttType)
.如果真结束
.如果真 (修改标记 [6])
    赋值 (.内容, 标签.Comment)
.如果真结束
.如果真 (修改标记 [7])
    赋值 (.内容, 标签.TrackNumber)
.如果真结束
.如果真 (修改标记 [8])
    赋值 (.内容, 标签.Lyric)
.如果真结束


.子程序 _方案1_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案2_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案3_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案4_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案5_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案6_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案7_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案8_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _方案9_被选择, 空白型, , 
开始猜测标签 (.标题)

.子程序 _自定义_被选择, 空白型, , 
.局部变量 方案文本, 文本型, 静态, , 

.如果真 (输入框 (相加 (“音乐标签的属性名，如”, #左引号, “标题”, #右引号, “加上一对括号后即可识别”, #换行符, “比如”, #左引号, “(标题)-(艺术家)”, #右引号, “能以横杠区分二者”), “输入方案文本”, 方案文本, 方案文本, ))
    赋值 (方案文本, 子文本替换 (方案文本, “（”, “(”, , , 真))
    赋值 (方案文本, 子文本替换 (方案文本, “）”, “)”, , , 真))
    
    开始猜测标签 (方案文本)
.如果真结束


.子程序 _文件属性窗口_可否被关闭, 逻辑型, , 
赋值 (列表窗..禁止, 假)
赋值 (列表窗..禁止, 假)
.如果真 (多文件修改进行中)
    赋值 (准备关闭, 真)
    返回 (假)
.如果真结束


.子程序 _按钮_载入图片_被单击, 空白型, , 
.局部变量 对话框, 新通用对话框类, , , 
.局部变量 文件名, 文本型, , , 


对话框.文件对话框初始化 (“图片文件（*.BMP;*.JPG;*.JPEG;*.GIF）|*.BMP;*.JPG;*.JPEG;*.GIF|所有文件|*.*”)
.如果真 (对话框.打开 (文件属性窗口.取窗口句柄 (), 0, 文件名, “选择新的专辑图片”, 0))
    .如果真 (大于 (取文件尺寸 (文件名), 相乘 (62, 1024))) ' 只能写入小于62KB的图片
        .如果真 (等于 (扩展名, “WMA”))
            信息框 (“WMA文件的专辑图片大小不能超过62KB。”, #警告图标, “出错”)
            返回 ()
        .如果真结束
        .如果真 (多文件状态)
            文件属性窗口_更新图片提示 ()
        .如果真结束
        
    .如果真结束
    
    .如果 (文件属性窗口_显示图片 (读入文件 (文件名)))
        赋值 (改过图片, 真)
        赋值 (.禁止, 假)
        
    .否则
        信息框 (“不支持的图片格式，请选择BMP、JPG、GIF格式图片”, #警告图标, “出错”)
    .如果结束
    
.如果真结束


.子程序 _按钮_保存图片_被单击, 空白型, , 
.局部变量 对话框, 新通用对话框类, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 图片扩展名, 文本型, , , 

赋值 (图片扩展名, 判断图片类型 (.底图))
对话框.文件对话框初始化 (相加 (图片扩展名, “|*.”, 图片扩展名, “|所有文件|*.*”), , , 图片扩展名)
.如果真 (对话框.打开 (0, 1, 文件名, “保存现有图片到”, 0))
    写到文件 (文件名, .底图)
.如果真结束


.子程序 _按钮_删除图片_被单击, 空白型, , 
赋值 (.底图, {  })
赋值 (改过图片, 真)
赋值 (.禁止, 假)

.子程序 _文件属性窗口_创建完毕, 空白型, , 
.局部变量 X, 整数型, , , 

刷新流派信息 ()

赋值 (.画板背景色, #底色)
 ' 画板_专辑图片.边框 ＝ 0

.变量循环首 (1, 取数组成员数 (流派), 1, X)
    流派.加入项目 ( [X], )
.变量循环尾 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
 ' 加入易语言标签 (标签4)
 ' 加入易语言标签 (标签5)
加入易语言标签 ()
加入易语言标签 ()
 ' 加入易语言标签 (标签8)
加入易语言标签 ()
 ' 加入易语言标签 (标签10)
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()


赋值 (., #检查框_多选)
赋值 (., #检查框_单选)

 ' 加入选择列表框 (选择列表框_MP3标签类型)
 ' 加入选择列表框 (选择列表框_V2编码)
0.置状态图片 (取符号 (位与 (播放器设置.MP3标签类型, 1)))
1.置状态图片 (取符号 (位与 (播放器设置.MP3标签类型, 2)))
2.置状态图片 (取符号 (位与 (播放器设置.MP3标签类型, 4)))

播放器设置.置状态图片 (.ID3V2编码类型, 1)


赋值 (.字体.字体名称, “宋体”)
赋值 (.画板背景色, #底色)
赋值 (.刷子颜色, #加深底色)
赋值 (.画笔颜色, #加深底色)

.子程序 文件属性窗口_读取歌曲信息, 逻辑型, , 
.局部变量 Tag, 音乐文件标签, , , 
.局部变量 图片, 字节集, , , 

.如果真 (等于 (读取标签 (.内容, Tag, 图片), 假))
    返回 (假)
.如果真结束

赋值 (.内容, Tag.Title)
赋值 (.内容, Tag.Artist)
赋值 (.内容, Tag.Album)
赋值 (.内容, Tag.Year)
赋值 (.内容, Tag.ContenttType)
赋值 (.内容, Tag.Comment)
赋值 (.内容, Tag.TrackNumber)
赋值 (.内容, Tag.Lyric)
.如果真 (支持专辑图片)
    文件属性窗口_显示图片 (图片)
.如果真结束

赋值 (.禁止, 真)
返回 (真)

.子程序 文件属性窗口_进入单文件状态, 空白型, , 进入单文件状态，会置窗口为可见
.参数 文件名, 文本型, , 
.参数 对应的项, 整数型, , 

.局部变量 Tag, 音乐文件标签, , , 

赋值 (多文件状态, 假)
赋值 (.内容, 文件名)
赋值 (文件属性窗口., “文件属性”)

文件属性窗口_设置边栏 ()



.如果真 (等于 (文件属性窗口_读取歌曲信息 (), 假))
    信息框 (相加 (“目前不支持读写(.”, 到大写 (取文件名 (文件名, #文件名_扩展名)), “)类型文件的标签信息”), #警告图标, “文件属性”)
    文件属性窗口.销毁 ()
    返回 ()
.如果真结束
赋值 (修改的项, 对应的项)
赋值 (.禁止, 假)
赋值 (.禁止, 真)
赋值 (改过图片, 假)

赋值 (列表窗..禁止, 真)
赋值 (列表窗..禁止, 真) ' 防止序号被打乱


赋值 (文件属性窗口., 真)
赋值 (准备关闭, 假)

.子程序 文件属性窗口_进入多文件状态, 空白型, , 进入多文件状态，会置窗口为可见
.参数 文件名数组_, 文本型, 数组, 
.参数 列表项数组_, 整数型, 数组, 

赋值 (多文件状态, 真)
赋值 (.内容, “(多个文件)”)
赋值 (文件属性窗口., 相加 (到文本 (取数组成员数 (文件名数组_)), “个文件的属性”))
赋值 (文件名数组, 文件名数组_)
赋值 (列表项数组, 列表项数组_)

赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)
赋值 (.内容, “”)


赋值 (.底图, {  })
.清除 ()
文件属性窗口_设置边栏 ()


赋值 (.禁止, 真)
赋值 (.禁止, 真)
赋值 (改过图片, 假)

赋值 (列表窗..禁止, 真)
赋值 (列表窗..禁止, 真) ' 防止序号被打乱

赋值 (文件属性窗口., 真)
赋值 (准备关闭, 假)

.子程序 _按钮_读取_被单击, 空白型, , 
文件属性窗口_读取歌曲信息 ()

.子程序 _按钮_保存_被单击, 空白型, , 
.如果 (多文件状态)
    文件属性窗口_写出歌曲信息_多个 ()
.否则
    文件属性窗口_写出歌曲信息_单个 ()
.如果结束


.子程序 取MP3写入类型, MP3写入类型, , 从列表框中获得
.参数 不传图片, 逻辑型, 可空, 默认假。更改设置时调用，减少字节集传输开销

.局部变量 X, 整数型, , , 
.局部变量 返回值, MP3写入类型, , , 

.如果真 (是否为空 (不传图片))
    赋值 (不传图片, 假)
.如果真结束
.变量循环首 (0, 相减 (取表项数 (), 1), 1, X)
    .如果真 (等于 (X.取当前状态图片 (), 1))
        赋值 (返回值.V2编码号, 多项选择 (相加 (X, 1), 0, 1, 3))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

赋值 (返回值.标签类型, 相加 (相乘 (0.取当前状态图片 (), 1), 相乘 (1.取当前状态图片 (), 2), 相乘 (2.取当前状态图片 (), 4)))
赋值 (返回值.需要修改图片, 改过图片)
.如果真 (等于 (不传图片, 假))
    赋值 (返回值.图片, .底图)
.如果真结束
返回 (返回值)

.子程序 文件属性窗口_写出歌曲信息_单个, 空白型, , 
.局部变量 Tag, 音乐文件标签, , , 
.局部变量 MP3写入类型, MP3写入类型, , , 


赋值 (Tag.Title, .内容)
赋值 (Tag.Artist, .内容)
赋值 (Tag.Album, .内容)
赋值 (Tag.Year, .内容)
赋值 (Tag.ContenttType, .内容)
赋值 (Tag.Comment, .内容)
赋值 (Tag.TrackNumber, .内容)
赋值 (Tag.Lyric, .内容)
赋值 (MP3写入类型, 取MP3写入类型 ())
.如果真 (并且 (等于 (MP3写入类型.标签类型, 0), 等于 (到大写 (取文件名 (.内容, #文件名_扩展名)), “MP3”))) ' 没有选中一个标签
    信息框 (“对于MP3标签，请至少选一种标签类型”, #警告图标, “出错”)
    返回 ()
.如果真结束

.如果 (等于 (文本比较 (列表窗.取文本 (., 相加 (取正在播放项 (), 1), 4), .内容, 假), 0)) ' 是正在播放项
    置修改标签任务 (.内容, Tag, 取MP3写入类型 ())
.否则
    .如果真 (等于 (写入标签 (.内容, Tag, 假, 假, MP3写入类型), 假))
        信息框 (“写出标签失败！拒绝访问。”, #警告图标, “出错”)
        返回 ()
    .如果真结束
    
    
.如果结束



列表窗.置标题 (., 修改的项, 0, 生成标题 (播放器设置.标签显示方案_列表, Tag, .内容))
列表窗.置文本 (., 相加 (修改的项, 1), 1, Tag.Title)
列表窗.置文本 (., 相加 (修改的项, 1), 2, Tag.Artist)
列表窗.置文本 (., 相加 (修改的项, 1), 3, Tag.Album)


赋值 (.禁止, 真)

.子程序 文件属性窗口_写出歌曲信息_多个, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 Tag, 音乐文件标签, , , 从编辑框里读出来的、有可能有空文本的标签
.局部变量 修改标记, 逻辑型, , "8", 
.局部变量 MP3写入类型, MP3写入类型, , , 
.局部变量 临时_TAG信息, 音乐文件标签, , , 写入标签后，从数据库里读取的、是真正的标签，用于更新列表


赋值 (多文件修改进行中, 真)
赋值 (.禁止, 真)

赋值 (MP3写入类型, 取MP3写入类型 ())
.如果真 (等于 (MP3写入类型.标签类型, 0)) ' 没有选中一个标签
    信息框 (“对于MP3标签，请至少选一种标签类型”, #警告图标, “出错”)
    返回 ()
.如果真结束

.变量循环首 (1, 取数组成员数 (文件名数组), 1, X)
    赋值 (Tag.Title, .内容)
    赋值 (Tag.Artist, .内容)
    赋值 (Tag.Album, .内容)
    赋值 (Tag.Year, .内容)
    赋值 (Tag.ContenttType, .内容)
    赋值 (Tag.Comment, .内容)
    赋值 (Tag.TrackNumber, .内容)
    赋值 (Tag.Lyric, .内容)
    
    猜测标签 (文件名数组 [X], 多文件猜测方案, Tag, 修改标记)
    
    .如果 (等于 (文本比较 (列表窗.取文本 (., 相加 (取正在播放项 (), 1), 4), 文件名数组 [X], 假), 0)) ' 是正在播放项
        
        置修改标签任务 (文件名数组 [X], Tag, MP3写入类型)
        .如果真 (不等于 (Tag.Title, “”))
            列表窗.置文本 (., 相加 (列表项数组 [X], 1), 1, Tag.Title)
        .如果真结束
        .如果真 (不等于 (Tag.Artist, “”))
            列表窗.置文本 (., 相加 (列表项数组 [X], 1), 2, Tag.Artist)
        .如果真结束
        .如果真 (不等于 (Tag.Album, “”))
            列表窗.置文本 (., 相加 (列表项数组 [X], 1), 3, Tag.Album)
        .如果真结束
        
        赋值 (临时_TAG信息.Title, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 1))
        赋值 (临时_TAG信息.Artist, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 2))
        赋值 (临时_TAG信息.Album, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 3))
        列表窗.置标题 (., 列表项数组 [X], 0, 生成标题 (播放器设置.标签显示方案_列表, 临时_TAG信息, 文件名数组 [X]))
        
        
        
    .否则
        
        .如果真 (写入标签 (文件名数组 [X], Tag, 真, 假, MP3写入类型))
            .如果真 (不等于 (Tag.Title, “”))
                列表窗.置文本 (., 相加 (列表项数组 [X], 1), 1, Tag.Title)
            .如果真结束
            .如果真 (不等于 (Tag.Artist, “”))
                列表窗.置文本 (., 相加 (列表项数组 [X], 1), 2, Tag.Artist)
            .如果真结束
            .如果真 (不等于 (Tag.Album, “”))
                列表窗.置文本 (., 相加 (列表项数组 [X], 1), 3, Tag.Album)
            .如果真结束
            
            赋值 (临时_TAG信息.Title, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 1))
            赋值 (临时_TAG信息.Artist, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 2))
            赋值 (临时_TAG信息.Album, 列表窗.取文本 (., 相加 (列表项数组 [X], 1), 3))
            列表窗.置标题 (., 列表项数组 [X], 0, 生成标题 (播放器设置.标签显示方案_列表, 临时_TAG信息, 文件名数组 [X]))
            
            
        .如果真结束
        
    .如果结束
    
    
    
    
    
    .如果 (是否已创建 (文件属性窗口))
        赋值 (文件属性窗口., 相加 (“正在修改(”, 到文本 (X), “/”, 到文本 (取数组成员数 (文件名数组)), “)”))
    .否则
        跳出循环 ()
    .如果结束
    处理事件 ()
    
    .如果真 (准备关闭)
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
赋值 (多文件修改进行中, 假)
.如果真 (准备关闭)
    文件属性窗口.销毁 ()
.如果真结束
赋值 (文件属性窗口., 相加 (“已完成修改”, 到文本 (取数组成员数 (文件名数组)), “个文件的信息”))

.子程序 文件属性窗口_显示图片, 逻辑型, , 参数一是图片数据，此函数将判断图片并自动显示
.参数 图片, 字节集, , 

.局部变量 类型, 文本型, , , 
.局部变量 图片号, 整数型, , , 

赋值 (类型, 判断图片类型 (图片))
.如果真 (等于 (类型, “”))
    赋值 (.底图, {  })
    返回 (假)
.如果真结束
赋值 (.字体.字体大小, 9)
赋值 (.文本颜色, #灰色)
赋值 (.底图, 图片)
4.定位写出 (4, 相加 (“图片格式：”, 类型))

赋值 (图片号, 载入图片 (图片))
.如果真 (不等于 (图片号, 0))
    100.定位写出 (4, 相加 (“尺寸：”, 到文本 (图片号.取图片宽度 ()), “×”, 到文本 (图片号.取图片高度 ())))
    卸载图片 (图片号)
.如果真结束
文件属性窗口_更新图片提示 ()
返回 (真)

.子程序 文件属性窗口_设置边栏, 空白型, , 若为MP3/WMA格式，则允许专辑图片读写，否则禁用，另外也决定MP3选项是否可用
赋值 (扩展名, 到大写 (取文件名 (.内容, #文件名_扩展名)))
赋值 (支持专辑图片, 或者 (等于 (扩展名, “MP3”), 等于 (扩展名, “WMA”), 多文件状态)) ' 是MP3/WMA文件，或者读写多个文件时，可用图片
连续赋值 (取反 (支持专辑图片), .禁止, .禁止, .禁止, .禁止)
连续赋值 (并且 (不等于 (扩展名, “MP3”), 等于 (多文件状态, 假)), .禁止, .字体名称, .字体名称)
.如果真 (等于 (支持专辑图片, 假))
    赋值 (.字体.字体大小, 9)
    赋值 (.文本颜色, #灰色)
    4.定位写出 (4, “目前仅支持MP3和WMA格式的专辑图片读写”)
.如果真结束


.子程序 文件属性窗口_更新图片提示, 空白型, , 给予用户关于图片的警示
.局部变量 写出的文本1, 文本型, , , 
.局部变量 写出的文本2, 文本型, , , 
.局部变量 匿名局部变量_27179, 空白型, , , 
.局部变量 文本宽度1, 整数型, , , 
.局部变量 文本宽度2, 整数型, , , 
.局部变量 匿名局部变量_27174, 空白型, , , 
.局部变量 文本高度1, 整数型, , , 
.局部变量 文本高度2, 整数型, , , 
.局部变量 匿名局部变量_27172, 空白型, , , 
.局部变量 最大的宽度, 整数型, , , MAX(文本宽度1,文本宽度2)
.局部变量 有警告, 逻辑型, , , 


.判断开始 (并且 (等于 (1.取当前状态图片 (), 0), 或者 (等于 (扩展名, “MP3”), 多文件状态))) ' 不写V2
    赋值 (有警告, 真)
    赋值 (写出的文本1, “你选择了不写入ID3V2标签”)
    赋值 (写出的文本2, “则MP3文件的图片不会被保存”)
    
.判断 (并且 (等于 (0.取当前状态图片 (), 0), 或者 (等于 (扩展名, “MP3”), 多文件状态))) ' 写UTF编码
    赋值 (有警告, 真)
    赋值 (写出的文本1, “你选择了UTF类编码”)
    赋值 (写出的文本2, “Windows可能无法正确显示图片”)
    
.默认
    赋值 (写出的文本1, “测试，为了清空成功”)
    赋值 (写出的文本2, “清空画板需要测量文本高度，这是测试文本！”)
.判断结束


赋值 (.字体.字体大小, 12)
赋值 (.文本颜色, #红色)



赋值 (文本宽度1, 写出的文本1.取宽度 ())
赋值 (文本高度1, 写出的文本1.取高度 ())
赋值 (文本宽度2, 写出的文本2.取宽度 ())
赋值 (文本高度2, 写出的文本2.取高度 ())

赋值 (最大的宽度, 选择 (大于 (文本宽度1, 文本宽度2), 文本宽度1, 文本宽度2))
.清除 (相除 (相减 (.画板高度, 相加 (文本高度1, 文本高度2)), 2), , 相加 (文本高度1, 文本高度2))
.如果真 (并且 (有警告, 不等于 (.底图, {  }))) ' 要求有图片时才给予提示
    相除 (相减 (.画板宽度, 最大的宽度), 2).画矩形 (相除 (相减 (.画板高度, 相加 (文本高度1, 文本高度2)), 2), 相除 (相加 (.画板宽度, 最大的宽度), 2), 相除 (相加 (.画板高度, 文本高度1, 文本高度2), 2))
    相除 (相减 (.画板宽度, 最大的宽度), 2).定位写出 (相除 (相减 (.画板高度, 文本高度1, 文本高度2), 2), 写出的文本1)
    相除 (相减 (.画板宽度, 最大的宽度), 2).定位写出 (相除 (相加 (相减 (.画板高度, 文本高度1), 文本高度2), 2), 写出的文本2)
    
.如果真结束

赋值 (写出的文本1, “你选择了超过62KB的图片”)
赋值 (写出的文本2, “所以其中的WMA格式文件将没有专辑图片”)

赋值 (.字体.字体大小, 9)
赋值 (.文本颜色, #红色)

赋值 (文本宽度1, 写出的文本1.取宽度 ())
赋值 (文本高度1, 写出的文本1.取高度 ())
赋值 (文本宽度2, 写出的文本2.取宽度 ())
赋值 (文本高度2, 写出的文本2.取高度 ())
赋值 (最大的宽度, 选择 (大于 (文本宽度1, 文本宽度2), 文本宽度1, 文本宽度2))


.如果真 (多文件状态)
    .如果真 (大于 (取字节集长度 (.底图), 相乘 (62, 1024)))
        .清除 (160, , 相加 (文本高度1, 文本高度2))
        相除 (相减 (.画板宽度, 最大的宽度), 2).画矩形 (160, 相除 (相加 (.画板宽度, 最大的宽度), 2), 相加 (160, 文本高度1, 文本高度2))
        
        相除 (相减 (.画板宽度, 最大的宽度), 2).定位写出 (160, 写出的文本1)
        相除 (相减 (.画板宽度, 最大的宽度), 2).定位写出 (相加 (160, 文本高度1), 写出的文本2)
        
    .如果真结束
    
.如果真结束




.子程序 _超级列表框_MP3标签类型_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

赋值 (播放器设置.MP3标签类型, 相加 (相乘 (0.取当前状态图片 (), 1), 相乘 (1.取当前状态图片 (), 2), 相乘 (2.取当前状态图片 (), 4)))
文件属性窗口_更新图片提示 ()
赋值 (.禁止, 假)


.子程序 _超级列表框_V2编码_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.局部变量 X, 整数型, , , 

.如果 (等于 (检查框状态, 0))
    表项索引.置状态图片 (1)
.否则
    .变量循环首 (0, 相减 (取表项数 (), 1), 1, X) ' 取消选中其他表项
        .如果真 (不等于 (X, 表项索引))
            X.置状态图片 (0)
        .如果真结束
        
    .变量循环尾 ()
    赋值 (播放器设置.ID3V2编码类型, 表项索引)
    赋值 (.禁止, 假)
    文件属性窗口_更新图片提示 ()
    
.如果结束



.窗口程序集 窗口_偏移修正, , , 

.子程序 _偏移修正窗口_创建完毕, 空白型, , 
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()


偏移修正窗口_刷新配置 ()

.子程序 偏移修正窗口_刷新配置, 空白型, , 
赋值 (.内容, 到文本 (播放器设置.桌面歌词_纵向偏移_绘制))
赋值 (.内容, 到文本 (播放器设置.桌面歌词_纵向偏移_窗体))
赋值 (.内容, 到文本 (播放器设置.桌面歌词_背景高度修正))
刷新按钮_测量文本高度 ()

.子程序 刷新按钮_测量文本高度, 空白型, , 
赋值 (.标题, 选择 (播放器设置.桌面歌词_测量文本高度, “测量文本高度已开启”, “测量文本高度已关闭”))

.子程序 _编辑框_绘制修正_内容被改变, 空白型, , 
.如果真 (等于 (偏移修正窗口., 假)) ' 还在初始化的时候改变了内容，不算
    返回 ()
.如果真结束
赋值 (播放器设置.桌面歌词_纵向偏移_绘制, 到数值 (.内容))
应用配置_桌面歌词 (16)
桌面歌词需要刷新 ()
向桌面歌词发送消息 (“TSBK”)

.子程序 _编辑框_移动修正_内容被改变, 空白型, , 
.如果真 (等于 (偏移修正窗口., 假)) ' 还在初始化的时候改变了内容，不算
    返回 ()
.如果真结束

赋值 (播放器设置.桌面歌词_纵向偏移_窗体, 到数值 (.内容))
应用配置_桌面歌词 (17)
向桌面歌词发送消息 (“TSBK”)

.子程序 _编辑框_背景高度补偿_内容被改变, 空白型, , 
.如果真 (等于 (偏移修正窗口., 假)) ' 还在初始化的时候改变了内容，不算
    返回 ()
.如果真结束

赋值 (播放器设置.桌面歌词_背景高度修正, 到数值 (.内容))
应用配置_桌面歌词 (15)
向桌面歌词发送消息 (“TSBK”)

.子程序 _按钮_测量文本高度_被单击, 空白型, , 
赋值 (播放器设置.桌面歌词_测量文本高度, 取反 (播放器设置.桌面歌词_测量文本高度))
刷新按钮_测量文本高度 ()
应用配置_桌面歌词 (21)
桌面歌词需要刷新 ()

.类模块 新通用对话框类, , , 此类代码转至易论坛

.程序集变量 目录必须存在1, 整数型, , , 
.程序集变量 创建时提示1, 整数型, , , 
.程序集变量 文件必须存在1, 整数型, , , 
.程序集变量 文件覆盖提示1, 整数型, , , 
.程序集变量 不改变目录1, 整数型, , , 
.程序集变量 是否多选1, 整数型, , , 
.程序集变量 打开文件, 打开文件名_, , , 
.程序集变量 文件记录, 字节集, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (创建时提示1, #OFN_CREATEPROMPT)
赋值 (文件必须存在1, #OFN_FILEMUSTEXIST)
赋值 (文件覆盖提示1, #OFN_OVERWRITEPROMPT)
赋值 (目录必须存在1, #OFN_PATHMUSTEXIST)
赋值 (不改变目录1, 0)
赋值 (是否多选1, 0)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 文件对话框初始化, 空白型, 公开, 
.参数 过滤器, 文本型, 可空, 成对使用，例如：“MP3文件（*.mp3）|*.mp3|mpg文件（*.mpg）|*.mpg”
.参数 初始过滤器, 整数型, 可空, 指定初始的过滤器，0为第一个过滤器。默认值为0。
.参数 初始目录, 文本型, 可空, 指定当打开对话框时所自动跳转到的目录。如不指定，则一般情况下默认路径为从“我的文档”开始。
.参数 默认文件后缀, 文本型, 可空, 指定当用户没有输入文件的后缀名称（扩展名）时所自动使用的文件后缀名称
.参数 创建时提示, 逻辑型, 可空, 当类型为打开文件对话框时，如果用户指定了一个不存在的文件名称，是否提示用户即将创建它。默认值为真。
.参数 文件必须存在, 逻辑型, 可空, 当类型为打开文件对话框时，是否允许用户指定一个不存在的文件。默认值为真。
.参数 文件覆盖提示, 逻辑型, 可空, 当类型为保存文件对话框时，如果用户指定了一个已经存在的文件，是否询问用户确定覆盖此文件。默认值为真。
.参数 目录必须存在, 逻辑型, 可空, 是否允许用户指定一个不存在的目录。默认值为真。
.参数 不改变目录, 逻辑型, 可空, 在对话框关闭后是否自动返回到进入对话框时的文件目录。默认值为假。
.参数 是否多选, 逻辑型, 可空, 是否需要使用文件多选。默认值为假。

赋值 (打开文件.实例句柄, 取实例句柄_ (取执行文件名 ()))

赋值 (打开文件.过滤器, 相加 (子字节集替换 (到字节集 (删全部空 (过滤器)), { 124 }, { 0 }, , ), { 0 }, { 0 }))

赋值 (打开文件.过滤器索引, 选择 (小于或等于 (初始过滤器, 0), 1, 相加 (初始过滤器, 1)))

赋值 (打开文件.初始目录, 初始目录)

赋值 (打开文件.默认扩展名, 默认文件后缀)

.如果真 (等于 (是否为空 (创建时提示), 假))
    赋值 (创建时提示1, 选择 (文件必须存在, #OFN_CREATEPROMPT, 0))
     ' //当类型为打开文件对话框时，如果用户指定了一个不存在的文件名称，是否提示用户即将创建它。默认值为假。
.如果真结束

.如果真 (等于 (是否为空 (文件必须存在), 假))
    赋值 (文件必须存在1, 选择 (文件必须存在, #OFN_FILEMUSTEXIST, 0))
     ' //当类型为打开文件对话框时，是否允许用户指定一个不存在的文件。默认值为真。
    
.如果真结束

.如果真 (等于 (是否为空 (文件覆盖提示), 假))
    赋值 (文件覆盖提示1, 选择 (文件覆盖提示, #OFN_OVERWRITEPROMPT, 0))
     ' //当类型为保存文件对话框时，如果用户指定了一个已经存在的文件，是否询问用户确定覆盖此文件。默认值为真。
    
.如果真结束
.如果真 (等于 (是否为空 (目录必须存在), 假))
    赋值 (目录必须存在1, 选择 (目录必须存在, #OFN_PATHMUSTEXIST, 0))
     ' //是否允许用户指定一个不存在的目录。默认值为真。
    
.如果真结束
.如果真 (等于 (是否为空 (不改变目录), 假))
    赋值 (不改变目录1, 选择 (不改变目录, #OFN_NOCHANGEDIR, 0))
     ' //在对话框关闭后是否自动返回到进入对话框时的文件目录。默认值为假。
    
.如果真结束
.如果真 (等于 (是否为空 (是否多选), 假))
    赋值 (是否多选1, 选择 (是否多选, #OFN_ALLOWMULTISELECT, 0))
     ' //是否需要使用文件多选。默认值为假。
    
.如果真结束


.子程序 打开, 逻辑型, 公开, 多选文件,返回文件路径以"#换行符"分隔。打开失败或取消返回空文本
.参数 窗口句柄, 整数型, 可空, 
.参数 类型, 整数型, , 0. 打开文件；1. 保存文件
.参数 文件名, 文本型, 参考, 
.参数 对话框标题, 文本型, 可空, 对话框窗口标题
.参数 对话框样式, 整数型, 可空, 0为大框，1为小框。

.局部变量 是否成功, 逻辑型, , , 
.局部变量 temp, 字节集, , , 
.局部变量 文件名数组, 文本型, , "0", 
.局部变量 N, 整数型, , , 
.局部变量 所选文件, 文本型, , , 

赋值 (打开文件.标题, 对话框标题)
连续赋值 ({  }, 打开文件.文件名, 打开文件.文件标题, temp, 文件记录)
赋值 (打开文件.窗口句柄, 窗口句柄)

.如果真 (等于 (不改变目录1, 0))
    
    赋值 (文件记录, {  })
.如果真结束
.判断开始 (不等于 (文件名, “”))
    赋值 (temp, 到字节集 (文件名))
    
    赋值 (temp, 子字节集替换 (temp, { 59 }, { 0 }, , ))
    
.默认
    赋值 (temp, 文件记录)
    
.判断结束
赋值 (打开文件.文件名, 相加 (temp, 取空白字节集 (相加 (相减 (选择 (不等于 (是否多选1, 0), 65536, 256), 取字节集长度 (temp)), 1))))

赋值 (打开文件.文件名最大长度, 取字节集长度 (打开文件.文件名))

赋值 (打开文件.结构大小, 76)

.判断开始 (等于 (类型, 0)) ' 打开文件,
    赋值 (打开文件.标记, 位或 (#OFN_HIDEREADONLY, #OFN_EXPLORER, #OFN_ENABLESIZING, 创建时提示1, 文件必须存在1, 文件覆盖提示1, 目录必须存在1, 不改变目录1, 是否多选1))
    
    .如果真 (不等于 (对话框样式, 0))
        赋值 (打开文件.标记, 位或 (打开文件.标记, #OFN_ENABLEHOOK))
        
    .如果真结束
    赋值 (是否成功, 取打开文件名_ (打开文件))
    
.判断 (等于 (类型, 1)) ' 保存文件
    赋值 (打开文件.标记, 位或 (#OFN_EXPLORER, #OFN_ENABLESIZING, 文件覆盖提示1, 目录必须存在1, 不改变目录1, 是否多选1))
    
    赋值 (是否成功, 取保存文件名_ (打开文件))
    
.默认
    
.判断结束

.如果真 (是否成功)
     ' 文件名 ＝ 删首尾空 (取字节集数据 (打开文件.文件名, #文本型, ))
    
    赋值 (文件记录, 打开文件.文件名)
    
    赋值 (temp, 打开文件.文件名)
    
    赋值 (temp, 取字节集左边 (temp, 相减 (寻找字节集 (temp, { 0, 0 }, ), 1)))
    
    
     ' 调试输出 (到文本 (打开文件.文件名))
    .判断开始 (并且 (不等于 (寻找字节集 (temp, { 0 }, ), -1), 等于 (是否多选1, #OFN_ALLOWMULTISELECT)))
        
        赋值 (文件名数组, 分割文本 (到文本 (子字节集替换 (temp, { 0 }, { 124 }, , )), “|”, ))
        
        .如果真 (不等于 (取文本右边 (文件名数组 [1], 1), “\”))
            
            赋值 (文件名数组 [1], 相加 (文件名数组 [1], “\”))
            
        .如果真结束
        .计次循环首 (相减 (取数组成员数 (文件名数组), 1), N)
            
            .判断开始 (不等于 (相减 (取数组成员数 (文件名数组), 1), N))
                
                赋值 (所选文件, 相加 (所选文件, 文件名数组 [1], 文件名数组 [相加 (N, 1)], #换行符))
                
            .默认
                赋值 (所选文件, 相加 (所选文件, 文件名数组 [1], 文件名数组 [相加 (N, 1)]))
                
            .判断结束
            处理事件 ()
            
        .计次循环尾 ()
        赋值 (文件名, 所选文件)
    .默认
        赋值 (文件名, 取字节集数据 (temp, #文本型, ))
        
    .判断结束
    
.如果真结束
连续赋值 ({  }, 打开文件.文件名, 打开文件.文件标题, temp, 文件记录)
赋值 (所选文件, “”)
清除数组 (文件名数组)
 ' 连续赋值 (0, 打开文件.文件名最大长度, 打开文件.文件标题最大长度)

返回 (是否成功)

.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 模块_程序是否已运行, 逻辑型, , 真表示已经运行，假表示还未运行
.参数 标志文本, 文本型, , 可以是任何文本，但是最好要长一点以保证和系统中已有其他事件对象的名称不相冲突。



.窗口程序集 窗口_精确查找, , , 

.子程序 _按钮_列出结果_被单击, 空白型, , 
.局部变量 X, 整数型, , , 
.局部变量 Title, 文本型, , , 
.局部变量 Artist, 文本型, , , 
.局部变量 Album, 文本型, , , 
.局部变量 表项号, 整数型, , , 

全部删除 ()
.变量循环首 (1, 列表窗.取行数 (.), 1, X)
    赋值 (Title, 列表窗.取文本 (., X, 1))
    .如果真 (等于 (判断文本是否匹配 (Title, .内容, .选中, .选中), 假))
        到循环尾 ()
    .如果真结束
    赋值 (Artist, 列表窗.取文本 (., X, 2))
    .如果真 (等于 (判断文本是否匹配 (Artist, .内容, .选中, .选中), 假))
        到循环尾 ()
    .如果真结束
    赋值 (Album, 列表窗.取文本 (., X, 3))
    .如果真 (等于 (判断文本是否匹配 (Album, .内容, .选中, .选中), 假))
        到循环尾 ()
    .如果真结束
    
    
    赋值 (表项号, .插入表项 (列表窗.取标题 (., 相减 (X, 1), 0), , , , ))
    表项号.置标题 (1, 列表窗.取标题 (., 相减 (X, 1), 1))
    
.变量循环尾 ()

.子程序 判断文本是否匹配, 逻辑型, , 
.参数 大文本, 文本型, , 
.参数 小文本, 文本型, , 
.参数 全字匹配, 逻辑型, , 若此参数为假，则“大文本”应包含“小文本”
.参数 区分大小写, 逻辑型, , 

.如果 (全字匹配)
    .如果 (区分大小写)
        .如果真 (不等于 (文本比较 (大文本, 小文本, 真), 0))
            返回 (假)
        .如果真结束
        
    .否则
        .如果真 (不等于 (文本比较 (大文本, 小文本, 假), 0))
            返回 (假)
        .如果真结束
        
    .如果结束
    
.否则
    .如果 (区分大小写)
        .如果真 (等于 (寻找文本 (大文本, 小文本, , 假), -1))
            返回 (假)
        .如果真结束
        
    .否则
        .如果真 (等于 (寻找文本 (大文本, 小文本, , 真), -1))
            返回 (假)
        .如果真结束
        
    .如果结束
    
.如果结束
返回 (真)

.子程序 _按钮_关闭_被单击, 空白型, , 
精确查找窗口.销毁 ()


.子程序 _精确查找窗口_创建完毕, 空白型, , 
加入易语言标签 ()
加入易语言标签 ()
加入易语言标签 ()
.如果真 (等于 (主窗口., 假)) ' 是后台打开
    赋值 (精确查找窗口., 真)
.如果真结束


.窗口程序集 窗口_字体选择, , , 

.程序集变量 确认了, 逻辑型, , , 当用户选择了字体并按“确认”按钮后，此变量值为真
.程序集变量 字体名称_, 文本型, , , 
.程序集变量 字体大小_, 整数型, , , 
.程序集变量 字体颜色_, 整数型, , , 
.程序集变量 加粗_, 逻辑型, , , 
.程序集变量 倾斜_, 逻辑型, , , 
.程序集变量 下划线_, 逻辑型, , , 
.程序集变量 删除线_, 逻辑型, , , 
.程序集变量 旋转角度_, 整数型, , , 
.程序集变量 禁用颜色, 逻辑型, , , 
.程序集变量 禁用旋转, 逻辑型, , , 
.程序集变量 允许竖向_, 逻辑型, , , 
.子程序 打开字体选择窗口, 逻辑型, , 作为调用接口
.参数 父窗口, 窗口, 参考 可空, 
.参数 字体名称, 文本型, 参考 可空, 
.参数 字体大小, 整数型, 参考 可空, 
.参数 字体颜色, 整数型, 参考 可空, 
.参数 风格, 整数型, 参考 可空, 此参数与下面4个参数是等价的，在初始化时，若两者都给，则以下面4个为准
.参数 加粗, 逻辑型, 参考 可空, 
.参数 倾斜, 逻辑型, 参考 可空, 
.参数 下划线, 逻辑型, 参考 可空, 
.参数 删除线, 逻辑型, 参考 可空, 
.参数 旋转角度, 整数型, 参考 可空, 
.参数 允许竖向, 逻辑型, 可空, 默认真

赋值 (确认了, 假)
 ' 初始化值
.如果真 (等于 (是否为空 (字体名称), 假))
    赋值 (字体名称_, 字体名称)
.如果真结束
.如果真 (等于 (是否为空 (字体大小), 假))
    赋值 (字体大小_, 字体大小)
.如果真结束
.如果 (等于 (是否为空 (字体颜色), 假))
    赋值 (字体颜色_, 字体颜色)
    赋值 (禁用颜色, 假)
.否则
    赋值 (禁用颜色, 真)
    赋值 (字体颜色_, #黑色)
.如果结束
.如果真 (等于 (是否为空 (风格), 假))
    赋值 (加粗_, 不等于 (位与 (风格, 1), 0))
    赋值 (倾斜_, 不等于 (位与 (风格, 2), 0))
    赋值 (下划线_, 不等于 (位与 (风格, 4), 0))
    赋值 (删除线_, 不等于 (位与 (风格, 8), 0))
.如果真结束
.如果真 (等于 (是否为空 (加粗), 假))
    赋值 (加粗_, 加粗)
.如果真结束
.如果真 (等于 (是否为空 (倾斜), 假))
    赋值 (倾斜_, 倾斜)
.如果真结束
.如果真 (等于 (是否为空 (下划线), 假))
    赋值 (下划线_, 下划线)
.如果真结束
.如果真 (等于 (是否为空 (删除线), 假))
    赋值 (删除线_, 删除线)
.如果真结束
.如果 (等于 (是否为空 (旋转角度), 假))
    赋值 (旋转角度_, 旋转角度)
    赋值 (禁用旋转, 假)
.否则
    赋值 (禁用旋转, 真)
    赋值 (旋转角度_, 0)
.如果结束

.如果真 (是否为空 (允许竖向))
    赋值 (允许竖向, 真)
.如果真结束
赋值 (允许竖向_, 允许竖向)

 ' 载入窗口
.如果 (是否为空 (父窗口))
    载入 (字体选择窗口, , 真)
.否则
    载入 (字体选择窗口, 父窗口, 真)
.如果结束

 ' 传回值
.如果真 (确认了)
    .如果真 (等于 (是否为空 (字体名称), 假))
        赋值 (字体名称, 字体名称_)
    .如果真结束
    .如果真 (等于 (是否为空 (字体大小), 假))
        赋值 (字体大小, 字体大小_)
    .如果真结束
    .如果真 (等于 (是否为空 (字体颜色), 假))
        赋值 (字体颜色, 字体颜色_)
    .如果真结束
    .如果真 (等于 (是否为空 (风格), 假))
        赋值 (风格, 相加 (选择 (加粗_, 1, 0), 选择 (倾斜_, 2, 0), 选择 (下划线_, 4, 0), 选择 (删除线_, 8, 0)))
    .如果真结束
    .如果真 (等于 (是否为空 (加粗), 假))
        赋值 (加粗, 加粗_)
    .如果真结束
    .如果真 (等于 (是否为空 (倾斜), 假))
        赋值 (倾斜, 倾斜_)
    .如果真结束
    .如果真 (等于 (是否为空 (下划线), 假))
        赋值 (下划线, 下划线_)
    .如果真结束
    .如果真 (等于 (是否为空 (删除线), 假))
        赋值 (删除线, 删除线_)
    .如果真结束
    .如果真 (等于 (是否为空 (旋转角度), 假))
        赋值 (旋转角度, 旋转角度_)
    .如果真结束
    
.如果真结束
返回 (确认了)

.子程序 _字体选择窗口_创建完毕, 空白型, , 
.局部变量 字体列表, 文本型, , "0", 
.局部变量 X, 整数型, , , 

加入易语言标签 ()
加入易语言标签 ()

赋值 (字体列表, 未知支持库函数_28 ())
清空 ()
.变量循环首 (1, 取数组成员数 (字体列表), 1, X)
    .如果真 (并且 (等于 (取文本左边 (字体列表 [X], 1), “@”), 等于 (允许竖向_, 假)))
        到循环尾 ()
    .如果真结束
    字体列表.加入项目 ( [X], )
    .如果真 (等于 (字体列表 [X], 字体名称_))
        赋值 (.现行选中项, 相减 (X, 1))
    .如果真结束
    
.变量循环尾 ()
赋值 (.内容, 字体名称_)

.变量循环首 (0, 相减 (取项目数 (), 1), 1, X)
    .如果真 (等于 (到文本 (字体大小_), X.取项目文本 ()))
        赋值 (.现行选中项, X)
    .如果真结束
    
.变量循环尾 ()

赋值 (.内容, 到文本 (字体大小_))

赋值 (., #检查框_多选)
0.置状态图片 (选择 (加粗_, 1, 0))
1.置状态图片 (选择 (倾斜_, 1, 0))
2.置状态图片 (选择 (下划线_, 1, 0))
3.置状态图片 (选择 (删除线_, 1, 0))

赋值 (.颜色, 字体颜色_)
赋值 (.内容, 到文本 (旋转角度_))
.如果真 (禁用颜色)
    赋值 (.禁止, 真)
.如果真结束
.如果真 (禁用旋转)
    赋值 (.禁止, 真)
.如果真结束
.如果真 (并且 (禁用颜色, 禁用旋转))
    赋值 (.禁止, 真)
.如果真结束

赋值 (.刷子颜色, #底色)
字体选择窗口_预览 ()

.子程序 _按钮_确定_被单击, 空白型, , 
赋值 (确认了, 真)
字体选择窗口.销毁 ()

.子程序 _按钮_取消_被单击, 空白型, , 
字体选择窗口.销毁 ()

.子程序 _组合框_字体名称_编辑内容被改变, 空白型, , 
赋值 (字体名称_, .内容)
字体选择窗口_预览 ()

.子程序 _组合框_字体名称_列表项被选择, 空白型, , 
_组合框_字体名称_编辑内容被改变 ()

.子程序 _组合框_字体大小_编辑内容被改变, 空白型, , 
赋值 (字体大小_, 到数值 (.内容))
字体选择窗口_预览 ()

.子程序 _组合框_字体大小_列表项被选择, 空白型, , 
_组合框_字体大小_编辑内容被改变 ()

.子程序 _超级列表框_字体风格_检查框状态被改变, 空白型, , 
.参数 表项索引, 整数型, , 
.参数 检查框状态, 整数型, , 

.判断开始 (等于 (表项索引, 0))
    赋值 (加粗_, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 1))
    赋值 (倾斜_, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 2))
    赋值 (下划线_, 等于 (检查框状态, 1))
.判断 (等于 (表项索引, 3))
    赋值 (删除线_, 等于 (检查框状态, 1))
.默认
    
.判断结束
字体选择窗口_预览 ()

.子程序 _颜色选择器1_颜色被改变, 空白型, , 
赋值 (字体颜色_, .颜色)
字体选择窗口_预览 ()

.子程序 _编辑框_旋转角度_内容被改变, 空白型, , 
.如果真 (大于 (到数值 (.内容), 180))
    赋值 (.内容, “180”)
.如果真结束
.如果真 (小于 (到数值 (.内容), -179))
    赋值 (.内容, “-179”)
.如果真结束
赋值 (旋转角度_, 到数值 (.内容))
字体选择窗口_预览 ()

.子程序 字体选择窗口_预览, 空白型, , 
.局部变量 预览文本, 文本型, , , 
.局部变量 文本宽度, 整数型, , , 
.局部变量 文本高度, 整数型, , , 

赋值 (.字体.字体名称, 字体名称_)
赋值 (.字体.字体大小, 字体大小_)
赋值 (.文本颜色, 字体颜色_)
赋值 (.字体.加粗, 加粗_)
赋值 (.字体.倾斜, 倾斜_)
赋值 (.字体.下划线, 下划线_)
赋值 (.字体.删除线, 删除线_)
赋值 (.字体.角度, 相乘 (旋转角度_, 10))

赋值 (预览文本, “字体预览/Font Preview”)
赋值 (文本宽度, 预览文本.取宽度 ())
赋值 (文本高度, 预览文本.取高度 ())

.清除 ()
相除 (相减 (.画板宽度, 文本宽度), 2).画矩形 (相除 (相减 (.画板高度, 文本高度), 2), 相除 (相加 (.画板宽度, 文本宽度), 2), 相除 (相加 (.画板高度, 文本高度), 2))
相除 (相减 (.画板宽度, 文本宽度), 2).定位写出 (相除 (相减 (.画板高度, 文本高度), 2), 预览文本)




 ' 不属于任何一个程序集、类模块的函数：
