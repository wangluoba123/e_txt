 ' 文件类型：Windows窗口程序

 ' 程序名称：API助手
 ' 程序描述：能够自动在程序中加入指定DLL命令声明的向导程序
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 671
    高度 = 572
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = 15590368 '  0xEDE3E0
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “API助手 V2.0版”
    帮助文件名 = “”



.图片 模板程序, " ' 已保存到：D:\易语言学习\Data\API助手.e\模板程序", , 
.图片 记录信息, " ' 已保存到：D:\易语言学习\Data\API助手.e\记录信息", , 
.图片 , , , 
.图片 dll文本, " ' 已保存到：D:\易语言学习\Data\API助手.e\dll文本", , 
.图片 自定义数据文本, " ' 已保存到：D:\易语言学习\Data\API助手.e\自定义数据文本", , 
.常量 子程序定义表头背景, "15003110", , 
.常量 , , , 
.常量 中文名称, "1", , 
.常量 英文名称, "2", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' ewizard F4252F5EB88342579B4E216FC410E5D7 1 0 易向导支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一
 ' shell 52F260023059454187AF826A3C07AF2A 1 0 操作系统界面功能支持库
 ' iext3 {B6F7542F-B8FE-46a8-9605-98856A687097} 2 6 扩展界面支持库三
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 1 3 高级表格支持库




数据类型 DLL命令类型, , 
    .成员 名称, 文本型, , , 
    .成员 返回值类型, 文本型, , , 
    .成员 备注, 文本型, , , 
    .成员 DLL库文件名, 文本型, , , 
    .成员 DLL对应命令名称, 文本型, , , 
    .成员 参数名称, 文本型, , "1", 
    .成员 参数类型, 文本型, , "1", 
    .成员 是否传址, 逻辑型, , "1", 
    .成员 是否数组, 逻辑型, , "1", 
    .成员 参数备注, 文本型, , "1", 

数据类型 自定义数据类型, , 
    .成员 名称, 文本型, , , 
    .成员 是否公开, 逻辑型, , , 
    .成员 备注, 文本型, , , 
    .成员 成员名称, 文本型, , "1", 
    .成员 成员类型, 文本型, , "1", 
    .成员 是否传址, 逻辑型, , "1", 
    .成员 成员数组, 文本型, , "1", 
    .成员 成员备注, 文本型, , "1", 

.全局变量 全局_自定义数据名称组, 文本型, , "0", 单个dll中的数据
.全局变量 全局_自定义数据组, 自定义数据类型, , "0", 
.全局变量 全局_自定义数据文本组, 文本型, , "0", 

.窗口程序集 窗口程序集1, , , 

.程序集变量 程序集_API信息, 文本型, , "0", 
.程序集变量 程序集_搜索内容是否API, 逻辑型, , , 
.程序集变量 程序集_显示类, 显示类, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
赋值 (.字体.字体大小, 10)
赋值 (程序集_API信息, 分割文本 (到文本 (#记录信息), #换行符, ))
赋值 (.初始目录, 未知支持库函数_7 (#))
子程序_填充树 ()
.如果真 (打开例程库 ())
    读例程列表 ()
.如果真结束
子程序_填充索引 ()

.子程序 _按钮_关闭程序_被单击, 空白型, , 
销毁 ()

.子程序 _按钮_搜索_被单击, 空白型, , 
.局部变量 项目数, 空白型, , , 

.判断开始 (等于 (.现行选中项, 0))
    赋值 (程序集_搜索内容是否API, 真)
    清空 ()
     ' 搜索下一个 (假)
    子程序_搜索API ()
.默认
    赋值 (程序集_搜索内容是否API, 假)
    清空 ()
    到首记录 ()
    .判断循环首 (查找 (不等于 (寻找文本 (读字段 (1, ), .内容, , 真), -1)))
        读字段 (1, ).加入项目 (取记录号 ())
        跳过 ()
    .判断循环尾 ()
.判断结束


.子程序 _选择夹_选用区_子夹被改变, 空白型, , 
.局部变量 API名, 文本型, , "0", 
.局部变量 例程记录号, 整数型, , "0", 
.局部变量 数据数组, 文本型, , "0", 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (., 0))
    赋值 (.标题, “导入(&Z)”)
    .如果真 (等于 (.现行选中项, -1))
        赋值 (.现行选中项, 0)
    .如果真结束
    连续赋值 (假, .禁止, .禁止)
.默认
    赋值 (.标题, “打开例程(&O)”)
     ' .如果真 (等于 (.现行选中项, -1))
         ' 选择列表框_选用例程.现行选中项 ＝ 0
    .如果真结束
    清空 ()
    .计次循环首 (取项目数 (), I)
        赋值 (数据数组, 分割文本 (程序集_API信息 [相减 (I, 1).取项目数值 ()], , ))
        .如果真 (大于或等于 (取数组成员数 (数据数组), 3))
            加入成员 (API名, 数据数组 [1])
        .如果真结束
        
    .计次循环尾 ()
    匹配例程 (API名, 例程记录号)
    .计次循环首 (取数组成员数 (例程记录号), I)
        跳到 (例程记录号 [I])
        读字段 (1, ).加入项目 (例程记录号 [I])
    .计次循环尾 ()
    连续赋值 (真, .禁止, .禁止)
.判断结束


.子程序 _按钮_全部选择_被单击, 空白型, , 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (., 0))
    .计次循环首 (取项目数 (), I)
        相减 (I, 1).选中项目 ()
    .计次循环尾 ()
.默认
    .计次循环首 (取项目数 (), I)
        相减 (I, 1).选中项目 ()
    .计次循环尾 ()
.判断结束


.子程序 _按钮_全部放弃_被单击, 空白型, , 
.局部变量 I, 整数型, , , 

.判断开始 (等于 (., 0))
    .计次循环首 (取项目数 (), I)
        相减 (I, 1).选中项目 (假)
    .计次循环尾 ()
.默认
    .计次循环首 (取项目数 (), I)
        相减 (I, 1).选中项目 (假)
    .计次循环尾 ()
.判断结束


.子程序 _按钮_从选用框删除_被单击, 空白型, , 
.局部变量 当前项目, 空白型, , , 

赋值 (当前项目, .现行选中项)
当前项目.删除项目 ()
.判断开始 (大于 (当前项目, 相减 (取项目数 (), 1)))
    赋值 (.现行选中项, 相减 (取项目数 (), 1))
.默认
    赋值 (.现行选中项, 当前项目)
.判断结束


.子程序 _按钮_清空选用框_被单击, 空白型, , 
清空 ()

.子程序 _树型框_API目录_即将扩展, 逻辑型, , 
.参数 项目索引, 整数型, , 

项目索引.置图片 (2)
项目索引.置选中图片 (2)

.子程序 _树型框_API目录_即将收缩, 逻辑型, , 
.参数 项目索引, 整数型, , 

项目索引.置图片 (0)
项目索引.置选中图片 (0)

.子程序 _列表框_例程列表_列表项被选择, 空白型, , 
跳到 (.取项目数值 (.现行选中项))
0.置文本 (“API例程：”)
0.置宽度 (相加 (0.取文本 ().取宽度 (), 5))
1.置文本 (.取项目文本 (.现行选中项))

.子程序 _列表框_例程列表_双击选择, 空白型, , 
跳到 (.取项目数值 (.现行选中项))
赋值 (.文件名, 读字段 (1, ))
.判断开始 (打开 ())
    .判断开始 (写到文件 (.文件名, 读字段 (3, )))
        .判断开始 (文件是否存在 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”)))
            未知支持库函数_6 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”), .文件名, )
        .默认
            未知支持库函数_6 (.文件名, , )
        .判断结束
        
    .默认
        信息框 (“文件无法写出！”, #警告图标, )
    .判断结束
    
.默认
    信息框 (“文件无法写出！”, #警告图标, )
.判断结束


.子程序 _按钮_导入_被单击, 空白型, , 
.判断开始 (等于 (., 0))
    子程序_导入易代码 ()
.默认
    子程序_打开例程 ()
.判断结束


.子程序 _列表框_搜索结果_列表项被选择, 空白型, , 
.局部变量 局部_DLL命令类型, DLL命令类型, , , 
.局部变量 局部_DLL命令文本, 文本型, , , 
.局部变量 局部_记次变量, 整数型, , , 

.如果真 (等于 (程序集_搜索内容是否API, 假))
    跳到 (.取项目数值 (.现行选中项))
.如果真结束
0.置文本 (选择 (程序集_搜索内容是否API, “API：”, “API例程：”))
0.置宽度 (相加 (0.取文本 ().取宽度 (), 5))
1.置文本 (.取项目文本 (.现行选中项))

 ' //////////////////////////以下处理高级表格/////////////////////////
赋值 (.底图, .取图片 ())
赋值 (.可视, 真)
.如果真 (不等于 (取文本右边 (.取项目文本 (.现行选中项), 2), “.e”)) ' 如果不是例程
    子程序_分析DLL文本 (程序集_API信息 [.取项目数值 (.现行选中项)], , 局部_DLL命令类型, 局部_DLL命令文本)
    程序集_显示类.显示单个DLL命令 (局部_DLL命令类型)
    赋值 (.内容, 局部_DLL命令文本)
    .计次循环首 (取数组成员数 (全局_自定义数据文本组), 局部_记次变量)
        赋值 (.内容, 相加 (.内容, #换行符, #换行符, 全局_自定义数据文本组 [局部_记次变量]))
    .计次循环尾 ()
    获取焦点 ()
.如果真结束
赋值 (.可视, 假)

.子程序 _列表框_搜索结果_双击选择, 空白型, , 
.局部变量 I1, 整数型, , , 
.局部变量 I2, 整数型, , , 
.局部变量 新项目, 文本型, , , 
.局部变量 找到项目, 逻辑型, , , 
.局部变量 临时数组, 文本型, , "0", 

.判断开始 (程序集_搜索内容是否API)
    赋值 (., 0)
    _选择夹_选用区_子夹被改变 ()
    赋值 (I1, .取项目数值 (.现行选中项))
    .如果真 (等于 (I1, 0))
        返回 ()
    .如果真结束
    赋值 (临时数组, 分割文本 (程序集_API信息 [I1], , ))
    .如果真 (大于或等于 (取数组成员数 (临时数组), 3))
        赋值 (新项目, 相加 (临时数组 [1], “ / ”, 临时数组 [3]))
        .计次循环首 (取项目数 (), I2)
            .如果真 (等于 (相减 (I2, 1).取项目文本 (), 新项目))
                赋值 (找到项目, 真)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .如果真 (取反 (找到项目))
            新项目.加入项目 ().置项目数值 (I1)
        .如果真结束
        
    .如果真结束
    
.默认
    跳到 (.取项目数值 (.现行选中项))
    赋值 (.文件名, 读字段 (1, ))
    .判断开始 (打开 ())
        .判断开始 (写到文件 (.文件名, 读字段 (3, )))
            .判断开始 (文件是否存在 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”)))
                未知支持库函数_6 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”), .文件名, )
            .默认
                未知支持库函数_6 (.文件名, , )
            .判断结束
            
        .默认
            信息框 (“文件无法写出！”, #警告图标, )
        .判断结束
        
    .默认
        信息框 (“文件无法写出！”, #警告图标, )
    .判断结束
    
.判断结束


.子程序 _树型框_API目录_双击项目, 空白型, , 
.局部变量 I1, 整数型, , , 
.局部变量 I2, 整数型, , , 
.局部变量 新项目, 文本型, , , 
.局部变量 找到项目, 逻辑型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 是否数据类型, 逻辑型, , , 

赋值 (., 0)
_选择夹_选用区_子夹被改变 ()
赋值 (I1, .取项目数值 (.最大化按钮))
.如果真 (等于 (I1, 0))
    返回 ()
.如果真结束
赋值 (是否数据类型, 等于 (.取父项目 (.最大化按钮).取项目文本 (), “数据类型”))
赋值 (临时数组, 分割文本 (程序集_API信息 [I1], , ))
.如果真 (大于或等于 (取数组成员数 (临时数组), 3))
    .判断开始 (等于 (是否数据类型, 假))
        赋值 (新项目, 相加 (临时数组 [1], “ / ”, 临时数组 [3]))
    .默认
        赋值 (新项目, 相加 (“数据类型：”, .取项目文本 (.最大化按钮))) ' 临时数组 [3]
    .判断结束
    .计次循环首 (取项目数 (), I2)
        .如果真 (等于 (相减 (I2, 1).取项目文本 (), 新项目))
            赋值 (找到项目, 真)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (取反 (找到项目))
        新项目.加入项目 (I1)
    .如果真结束
    
.如果真结束


.子程序 _树型框_API目录_项目被选择, 空白型, , 
.参数 选择方式, 整数型, , 

.局部变量 局部_DLL命令类型, DLL命令类型, , , 
.局部变量 局部_DLL命令文本, 文本型, , , 
.局部变量 局部_自定义数据类型, 自定义数据类型, , , 
.局部变量 局部_自定义数据文本, 文本型, , , 
.局部变量 局部_记次变量, 整数型, , , 

.判断开始 (等于 (.取父项目 (.最大化按钮).取项目文本 (), “数据类型”))
    0.置文本 (“数据类型：”)
.默认
    0.置文本 (“API：”)
.判断结束
0.置宽度 (相加 (0.取文本 ().取宽度 (), 5))
1.置文本 (.取项目文本 (.最大化按钮))

 ' //////////////////////////以下处理高级表格/////////////////////////
.如果真 (等于 (.取项目数值 (.最大化按钮), 0)) ' 非DLL，分类
    赋值 (.内容, “”)
    赋值 (., 1)
    赋值 (., 1)
    0.未知支持库函数_9 (0, #, “”)
    0.未知支持库函数_24 (0, 0, 0, #白色)
    获取焦点 ()
    返回 ()
.如果真结束
赋值 (.底图, .取图片 ())
赋值 (.可视, 真)

.如果 (不等于 (.取父项目 (.最大化按钮).取项目文本 (), “数据类型”))
    子程序_分析DLL文本 (程序集_API信息 [.取项目数值 (.最大化按钮)], , 局部_DLL命令类型, 局部_DLL命令文本)
    程序集_显示类.显示单个DLL命令 (局部_DLL命令类型)
    赋值 (.内容, 局部_DLL命令文本)
    .计次循环首 (取数组成员数 (全局_自定义数据文本组), 局部_记次变量)
        赋值 (.内容, 相加 (.内容, #换行符, #换行符, 全局_自定义数据文本组 [局部_记次变量]))
    .计次循环尾 ()
    
.否则
    子程序_分析自定义数据文本 (.取项目文本 (.最大化按钮), 局部_自定义数据类型, 局部_自定义数据文本)
    程序集_显示类.显示单个自定义数据类型 (局部_自定义数据类型)
    赋值 (.内容, 局部_自定义数据文本)
.如果结束
赋值 (.可视, 假)
获取焦点 ()

.子程序 _选择列表框_选用API_列表项被选择, 空白型, , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 局部_DLL命令类型, DLL命令类型, , , 
.局部变量 局部_DLL命令文本, 文本型, , , 
.局部变量 局部_自定义数据类型, 自定义数据类型, , , 
.局部变量 局部_自定义数据文本, 文本型, , , 
.局部变量 局部_临时文本数组, 文本型, , "0", 
.局部变量 局部_记次变量, 整数型, , , 

1.置文本 ()
赋值 (局部_临时文本, .取项目文本 (.现行选中项))
.如果 (不等于 (取文本左边 (局部_临时文本, 10), “数据类型：”))
    赋值 (局部_临时文本数组, 分割文本 (.取项目文本 (.现行选中项), “/”, ))
    子程序_分析DLL文本 (删首尾空 (局部_临时文本数组 [2]), 局部_DLL命令类型, 局部_DLL命令文本)
    程序集_显示类.显示单个DLL命令 (局部_DLL命令类型)
    赋值 (.内容, 局部_DLL命令文本)
    .计次循环首 (取数组成员数 (全局_自定义数据文本组), 局部_记次变量)
        赋值 (.内容, 相加 (.内容, #换行符, #换行符, 全局_自定义数据文本组 [局部_记次变量]))
    .计次循环尾 ()
    
.否则
    子程序_分析自定义数据文本 (取文本右边 (.取项目文本 (.现行选中项), 相减 (取文本长度 (.取项目文本 (.现行选中项)), 10)), 局部_自定义数据类型, 局部_自定义数据文本)
    程序集_显示类.显示单个自定义数据类型 (局部_自定义数据类型)
    赋值 (.内容, 局部_自定义数据文本)
.如果结束
获取焦点 ()

.子程序 _选择列表框_选用例程_列表项被选择, 空白型, , 
1.置文本 ()

.子程序 _单选框_中文索引_被单击, 空白型, , 
子程序_填充索引 ()

.子程序 _单选框_英文索引_被单击, 空白型, , 
子程序_填充索引 ()

.子程序 _编辑框_索引_内容被改变, 空白型, , 
.选择 (.内容)
.如果真 (大于或等于 (.现行选中项, 0))
    _列表框_索引_列表项被选择 ()
.如果真结束
获取焦点 ()

.子程序 _列表框_索引_列表项被选择, 空白型, , 
.局部变量 局部_DLL命令类型, DLL命令类型, , , 
.局部变量 局部_DLL命令文本, 文本型, , , 
.局部变量 局部_记次变量, 整数型, , , 

0.置文本 (“API：”)
0.置宽度 (相加 (0.取文本 ().取宽度 (), 5))
1.置文本 (.取项目文本 (.现行选中项))

 ' //////////////////////////以下处理高级表格/////////////////////////
赋值 (.底图, .取图片 ())
赋值 (.可视, 真)

子程序_分析DLL文本 (程序集_API信息 [.取项目数值 (.现行选中项)], , 局部_DLL命令类型, 局部_DLL命令文本)
程序集_显示类.显示单个DLL命令 (局部_DLL命令类型)
赋值 (.内容, 局部_DLL命令文本)
.计次循环首 (取数组成员数 (全局_自定义数据文本组), 局部_记次变量)
    赋值 (.内容, 相加 (.内容, #换行符, #换行符, 全局_自定义数据文本组 [局部_记次变量]))
.计次循环尾 ()
获取焦点 ()
赋值 (.可视, 假)

.子程序 _编辑框_索引_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _列表框_索引_双击选择 ()
.如果真结束


.子程序 _列表框_索引_双击选择, 空白型, , 
.局部变量 I1, 整数型, , , 
.局部变量 新项目, 文本型, , , 
.局部变量 找到项目, 逻辑型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 I2, 整数型, , , 

赋值 (., 0)
_选择夹_选用区_子夹被改变 ()
赋值 (I1, .取项目数值 (.现行选中项))
.如果真 (小于或等于 (I1, 0))
    返回 ()
.如果真结束
赋值 (临时数组, 分割文本 (程序集_API信息 [I1], , ))
.如果真 (大于或等于 (取数组成员数 (临时数组), 3))
    赋值 (新项目, 相加 (临时数组 [1], “ / ”, 临时数组 [3]))
    .计次循环首 (取项目数 (), I2)
        .如果真 (等于 (相减 (I2, 1).取项目文本 (), 新项目))
            赋值 (找到项目, 真)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (取反 (找到项目))
        新项目.加入项目 ().置项目数值 (I1)
    .如果真结束
    
.如果真结束


.子程序 _编辑框_搜索内容_按下某键, 逻辑型, , 
.参数 键代码, 整数型, , 
.参数 功能键状态, 整数型, , 

.如果真 (等于 (键代码, #回车键))
    _按钮_搜索_被单击 ()
.如果真结束


.子程序 _单选框_中文树形框_被单击, 空白型, , 
子程序_填充树 ()

.子程序 _单选框_英文树形框_被单击, 空白型, , 
子程序_填充树 ()

.子程序 _组合框_搜索类型_列表项被选择, 空白型, , 
.判断开始 (等于 (.现行选中项, 0))
    赋值 (.禁止, 假)
.默认
    赋值 (.禁止, 真)
.判断结束


.子程序 _组合框_搜索API显示_列表项被选择, 空白型, , 
.局部变量 I, 整数型, , , 
.局部变量 项目值, 整数型, , "0", 
.局部变量 项目数据, 文本型, , "0", 
.局部变量 当前项目, 整数型, , , 

.如果真 (并且 (大于 (取项目数 (), 0), 程序集_搜索内容是否API))
    赋值 (当前项目, .取项目数值 (.现行选中项))
    .计次循环首 (取项目数 (), I)
        加入成员 (项目值, 相减 (I, 1).取项目数值 ())
    .计次循环尾 ()
    清空 ()
    .计次循环首 (取数组成员数 (项目值), I)
        赋值 (项目数据, 分割文本 (程序集_API信息 [项目值] [I], , ))
        .如果真 (大于或等于 (取数组成员数 (项目数据), 3))
            .判断开始 (等于 (.现行选中项, 0))
                项目数据.加入项目 ( [3], 项目值 [I])
            .默认
                项目数据.加入项目 ( [1], 项目值 [I])
            .判断结束
            
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (大于 (当前项目, 0))
        .计次循环首 (取项目数 (), I)
            .如果真 (等于 (相减 (I, 1).取项目数值 (), 当前项目))
                赋值 (.现行选中项, 相减 (I, 1))
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
.如果真结束


.子程序 _选择列表框_选用例程_双击选择, 空白型, , 
.如果真 (等于 (信息框 (相加 (“是否要打开例程”, #左引号, .取项目文本 (.现行选中项), #右引号, “？”), 相加 (#询问图标, #是否钮), “是否要打开例程”), #是钮))
    跳到 (.取项目数值 (.现行选中项))
    赋值 (.文件名, 读字段 (1, ))
    .判断开始 (打开 ())
        .判断开始 (写到文件 (.文件名, 读字段 (3, )))
            .判断开始 (文件是否存在 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”)))
                未知支持库函数_6 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”), .文件名, )
            .默认
                未知支持库函数_6 (.文件名, , )
            .判断结束
            
        .默认
            信息框 (“文件无法写出！”, #警告图标, )
        .判断结束
        
    .默认
        信息框 (“文件无法写出！”, #警告图标, )
    .判断结束
    
.如果真结束


.子程序 __启动窗口_尺寸被改变, 空白型, , 
.局部变量 局部_临时数值, 整数型, , , 

赋值 (., 相减 (_启动窗口.取用户区宽度 (), ., 相乘 (8, 3)))
赋值 (.宽度, .)
赋值 (.高度, 相减 (_启动窗口.取用户区高度 (), ., 相乘 (8, 3), .))

赋值 (.宽度, 相减 (取用户区宽度 (), .宽度, 相乘 (8, 3)))
赋值 (.宽度, .宽度)
连续赋值 (相减 (相加 (., .), .宽度, 8), .左边, .左边, .左边, .左边, .左边, .左边)
赋值 (.左边, 相减 (相加 (., .), .宽度, 6))

赋值 (局部_临时数值, 相减 (.宽度, 16, 8))
赋值 (., 相除 (局部_临时数值, 2))
赋值 (., 相减 (.高度, 16, 8))
相加 (., ., 4).移动 (., 相除 (局部_临时数值, 2), .)

.移动 (., ., 相加 (., ., 8), .)

赋值 (., 相减 (_启动窗口.取用户区高度 (), ., 12))
赋值 (.高度, 相减 (., 62))
连续赋值 (相加 (.顶边, .高度, 8), .顶边, .顶边)
赋值 (.高度, 相减 (., 40))
赋值 (.高度, 相减 (., 83))
赋值 (.高度, 相减 (., 90))

.移动 (., ., ., .)
.移动 (., ., ., .)

.子程序 _单选框_代码形式_被单击, 空白型, , 
赋值 (., 真)
赋值 (.可视, 假)

.子程序 _单选框_文本形式_被单击, 空白型, , 
赋值 (., 假)
赋值 (.可视, 真)

.子程序 _高级表格1_光标位置改变, 空白型, , 
.局部变量 局部_高级表格数据, 文本型, , , 
.局部变量 局部_自定义数据类型, 自定义数据类型, , , 
.局部变量 局部_自定义数据文本, 文本型, , , 

.如果真 (或者 (小于 (未知支持库函数_3 (), 0), 等于 (.取父项目 (.最大化按钮), -1)))
    返回 ()
.如果真结束
赋值 (.底图, .取图片 ())
赋值 (.可视, 真)

赋值 (局部_高级表格数据, 未知支持库函数_3 ().未知支持库函数_10 (1))
.如果真 (等于 (6.未知支持库函数_10 (1), “类型”))
    .判断开始 (并且 (大于 (未知支持库函数_3 (), 6), 等于 (子程序_是否默认参数类型 (局部_高级表格数据), 假)))
        子程序_分析自定义数据文本 (局部_高级表格数据, 局部_自定义数据类型, 局部_自定义数据文本)
        程序集_显示类.显示单个自定义数据类型 (局部_自定义数据类型)
        
    .默认
        赋值 (., 1)
        赋值 (., 1)
        0.未知支持库函数_9 (0, #, “”)
        0.未知支持库函数_24 (0, 0, 0, #白色)
    .判断结束
    
.如果真结束
赋值 (.可视, 假)

.程序集 程序集_例程读取, , , 

.程序集变量 API例程是否打开, 逻辑型, , , 
.子程序 打开例程库, 逻辑型, , 
.局部变量 a, 整数型, , , 

赋值 (API例程是否打开, 打开 (“API例程.edb”, “API例程”, 真, #禁止读写, , , ))
.如果真 (等于 (取反 (API例程是否打开), 真))
    信息框 (“API例程数据库无法打开,请编译到wizard文件夹中使用！”, 0, )
.如果真结束
返回 (API例程是否打开)

.子程序 读例程列表, 空白型, , 
.参数 参数_列表框, 列表框, , 

.局部变量 I, 整数型, , , 
.局部变量 行数, 整数型, , , 

到首记录 ()
赋值 (行数, 取记录数 ())
.计次循环首 (行数, I)
    跳到 (I)
    参数_列表框.加入项目 (读字段 (1, ), I)
.计次循环尾 ()


.子程序 匹配例程, 空白型, , 
.参数 参数_API名, 文本型, 数组, 
.参数 参数_例程记录号, 整数型, 参考 数组, 

.局部变量 I1, 整数型, , , 
.局部变量 I2, 整数型, , , 
.局部变量 记录号, 整数型, , , 
.局部变量 找到项目, 逻辑型, , , 

清除数组 (参数_例程记录号)
.计次循环首 (取数组成员数 (参数_API名), I2)
    到首记录 ()
    .判断循环首 (查找 (不等于 (寻找文本 (读字段 (2, ), 相加 (参数_API名 [I2], “/”), , 真), -1)))
        赋值 (记录号, 取记录号 ())
        .计次循环首 (取数组成员数 (参数_例程记录号), I1)
            .如果真 (等于 (参数_例程记录号 [I1], 记录号))
                赋值 (找到项目, 真)
                跳出循环 ()
            .如果真结束
            
        .计次循环尾 ()
        .判断开始 (找到项目)
            赋值 (找到项目, 假)
        .默认
            加入成员 (参数_例程记录号, 记录号)
        .判断结束
        跳过 ()
    .判断循环尾 ()
    
.计次循环尾 ()

.子程序 子程序1AA, 空白型, , 
.局部变量 I, 整数型, , , 
.局部变量 内容, 文本型, , , 
.局部变量 内容2, 字节集, , , 

到首记录 ()
.计次循环首 (取记录数 (), I)
    跳到 (I)
    赋值 (内容, 读字段 (1, ))
     ' .如果真 (不等于 (取文本右边 (内容, 1), “/”))
         ' 写字段 (2, , 内容 ＋ “/”)
    .如果真结束
    
    赋值 (内容2, 读字段 (3, ))
    .如果真 (等于 (内容2, {  }))
        输出调试文本 (内容)
    .如果真结束
    
    
.计次循环尾 ()


.类模块 显示类, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取文本宽度高度, 空白型, , 
.参数 参数_文本, 文本型, , 
.参数 参数_宽度, 整数型, 参考, 
.参数 参数_高度, 整数型, 参考, 

赋值 (参数_宽度, _启动窗口.取宽度 (., 参数_文本))
赋值 (参数_高度, _启动窗口.取高度 (., 参数_文本))

.子程序 置单元格宽度高度, 空白型, , 
.参数 参数_高级表格, 未知类型0x60001, , 
.参数 参数_文本, 文本型, , 
.参数 参数_表格行号, 整数型, , 从0开始
.参数 参数_表格列号, 整数型, , 从0开始

.局部变量 临时宽度, 整数型, , , 
.局部变量 临时高度, 整数型, , , 

取文本宽度高度 (参数_文本, 临时宽度, 临时高度)
.如果真 (大于 (临时高度, 参数_高级表格.未知支持库函数_43 (参数_表格行号)))
    参数_高级表格.未知支持库函数_31 (参数_表格行号, 临时高度)
.如果真结束
.如果真 (大于 (临时宽度, 参数_高级表格.未知支持库函数_44 (参数_表格列号)))
    参数_高级表格.未知支持库函数_32 (参数_表格列号, 临时宽度)
.如果真结束


.子程序 置单元格数据, 空白型, , 
.参数 参数_高级表格, 未知类型0x60001, , 
.参数 参数_表格行号, 整数型, , 从0开始,-1表示加入到最后
.参数 参数_表格列号, 整数型, , 从0开始
.参数 参数_文本, 文本型, , 
.参数 参数_合并起始列号, 整数型, 可空, 
.参数 参数_合并结束列号, 整数型, 可空, 
.参数 参数_文本颜色值, 整数型, 可空, 
.参数 参数_背景颜色值, 整数型, 可空, 

.局部变量 单元格行号, 整数型, , , 

 ' 参数_高级表格.置字体名 (参数_表格行号, 参数_表格列号, , , _启动窗口.画板_代码形式.字体.字体名称)
 ' 参数_高级表格.置字体尺寸 (参数_表格行号, 参数_表格列号, , , _启动窗口.画板_代码形式.字体.字体大小)
赋值 (单元格行号, 选择 (等于 (参数_表格行号, -1), 相减 (参数_高级表格., 1), 参数_表格行号))
参数_高级表格.未知支持库函数_9 (单元格行号, 参数_表格列号, #, 参数_文本)
置单元格宽度高度 (参数_高级表格, 参数_文本, 单元格行号, 参数_表格列号)
.如果真 (等于 (是否为空 (参数_合并起始列号), 假))
    参数_高级表格.未知支持库函数_58 (单元格行号, 参数_合并起始列号, , 参数_合并结束列号)
.如果真结束
.如果真 (等于 (是否为空 (参数_文本颜色值), 假))
    参数_高级表格.未知支持库函数_22 (单元格行号, 参数_表格列号, , , 参数_文本颜色值)
.如果真结束
.如果真 (等于 (是否为空 (参数_背景颜色值), 假))
    参数_高级表格.未知支持库函数_24 (单元格行号, 参数_表格列号, , , 参数_背景颜色值)
.如果真结束


.子程序 取高级表格行总高, 整数型, , 
.参数 参数_高级表格, 未知类型0x60001, , 

.局部变量 记次变量, 整数型, , , 
.局部变量 临时总高度, 整数型, , , 

.计次循环首 (参数_高级表格., 记次变量)
    赋值 (临时总高度, 相加 (临时总高度, 参数_高级表格.未知支持库函数_43 (相减 (记次变量, 1)), 2))
.计次循环尾 ()
返回 (临时总高度)

.子程序 取高级表格列总宽, 整数型, , 
.参数 参数_高级表格, 未知类型0x60001, , 

.局部变量 记次变量, 整数型, , , 
.局部变量 临时总宽度, 整数型, , , 

.计次循环首 (参数_高级表格., 记次变量)
    赋值 (临时总宽度, 相加 (临时总宽度, 参数_高级表格.未知支持库函数_44 (相减 (记次变量, 1)), 2))
.计次循环尾 ()
返回 (临时总宽度)

.子程序 初始化表格, 空白型, , 
.参数 参数_高级表格, 未知类型0x60001, , 
.参数 参数_列数, 整数型, , 

.局部变量 记次变量, 整数型, , , 

赋值 (参数_高级表格., 1)
赋值 (参数_高级表格., 参数_列数)
.计次循环首 (参数_列数, 记次变量)
    参数_高级表格.未知支持库函数_59 (0, 相减 (记次变量, 1))
.计次循环尾 ()
参数_高级表格.未知支持库函数_25 (0, 0, , 相减 (参数_列数, 1), #)

.子程序 显示单个自定义数据类型, 空白型, , 
.参数 参数_高级表格, 未知类型0x60001, , 
.参数 参数_自定义数据类型组, 自定义数据类型, , 

.局部变量 记次变量1, 整数型, , , 
.局部变量 记次变量2, 整数型, , , 
.局部变量 临时列宽, 整数型, , , 

初始化表格 (参数_高级表格, 5)
置单元格数据 (参数_高级表格, -1, 0, “数据类型名”, , , , #子程序定义表头背景)
置单元格数据 (参数_高级表格, -1, 1, “公开”, , , , #子程序定义表头背景)
置单元格数据 (参数_高级表格, -1, 2, “备注”, 2, 4, , #子程序定义表头背景)

.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, 参数_自定义数据类型组.名称, , , #藏青, )
    置单元格数据 (参数_高级表格, -1, 2, 参数_自定义数据类型组.备注, 2, 4, #墨绿, )
.如果真结束

.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真)) ' 成员表头
    置单元格数据 (参数_高级表格, -1, 0, “成员名”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 1, “类型”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 2, “传址”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 3, “数组”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 4, “备注”, , , , #子程序定义表头背景)
    
     ' 加入自定义类型参数
    .计次循环首 (取数组成员数 (参数_自定义数据类型组.成员名称), 记次变量2)
        .如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
            置单元格数据 (参数_高级表格, -1, 0, 参数_自定义数据类型组.成员名称 [记次变量2])
            置单元格数据 (参数_高级表格, -1, 1, 参数_自定义数据类型组.成员类型 [记次变量2], , , #蓝色, )
            置单元格数据 (参数_高级表格, -1, 2, 选择 (等于 (参数_自定义数据类型组.是否传址 [记次变量2], 真), “√”, “”), , , #红褐, )
            置单元格数据 (参数_高级表格, -1, 3, 参数_自定义数据类型组.成员数组 [记次变量2], , , #红褐, )
            置单元格数据 (参数_高级表格, -1, 4, 参数_自定义数据类型组.成员备注 [记次变量2], , , #墨绿, )
        .如果真结束
        
    .计次循环尾 ()
    参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.)
    参数_高级表格.未知支持库函数_58 (相减 (参数_高级表格., 1), 0, , 3)
.如果真结束

参数_高级表格.未知支持库函数_36 (相减 (参数_高级表格., 1))
 ' ////////////////设置“公开”、“类型”、“传址”、“数组”４列的列宽
 ' 参数_高级表格.置列宽 (2, _启动窗口.画板1.取宽度 (“公开”) × 2)
赋值 (临时列宽, 参数_高级表格.未知支持库函数_44 (2))
 ' 参数_高级表格.置列宽 (3, _启动窗口.画板1.取宽度 (“类型”) × 2)
参数_高级表格.未知支持库函数_32 (2, 相乘 (_启动窗口.取宽度 (., “传址”), 2))
参数_高级表格.未知支持库函数_32 (3, 相乘 (_启动窗口.取宽度 (., “数组”), 2))
.如果真 (大于或等于 (相减 (临时列宽, 参数_高级表格.未知支持库函数_44 (2)), 参数_高级表格.未知支持库函数_44 (2)))
    赋值 (临时列宽, 相减 (临时列宽, 参数_高级表格.未知支持库函数_44 (2)))
.如果真结束

参数_高级表格.未知支持库函数_32 (4, 临时列宽)
参数_高级表格.未知支持库函数_1 (0, 0, 0, 4)

.子程序 显示单个DLL命令, 空白型, , 
.参数 参数_高级表格, 未知类型0x60001, , 
.参数 参数_DLL类型, DLL命令类型, , 

.局部变量 记次变量1, 整数型, , , 
.局部变量 记次变量2, 整数型, , , 
.局部变量 临时列宽, 整数型, , , 

初始化表格 (参数_高级表格, 5)
置单元格数据 (参数_高级表格, -1, 0, “DLL命令名”, , , , #子程序定义表头背景)
置单元格数据 (参数_高级表格, -1, 1, “返回值类型”, , , , #子程序定义表头背景)
置单元格数据 (参数_高级表格, -1, 2, “公开”, , , , #子程序定义表头背景)
置单元格数据 (参数_高级表格, -1, 3, “备注”, 3, 4, , #子程序定义表头背景)

.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, 参数_DLL类型.名称, , , #藏青, )
    置单元格数据 (参数_高级表格, -1, 1, 参数_DLL类型.返回值类型, , , #蓝色, )
    置单元格数据 (参数_高级表格, -1, 3, 参数_DLL类型.备注, 3, 4, #墨绿, )
.如果真结束
.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, “Dll库文件名：”, 0, 4, , #子程序定义表头背景)
.如果真结束
.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, 参数_DLL类型.DLL库文件名, 0, 4, #红褐, )
.如果真结束
.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, “在Dll库中对应命令名：”, 0, 4, , #子程序定义表头背景)
.如果真结束
.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
    置单元格数据 (参数_高级表格, -1, 0, 参数_DLL类型.DLL对应命令名称, 0, 4, #红褐, )
.如果真结束

.如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真)) ' 参数表头
    置单元格数据 (参数_高级表格, -1, 0, “参数名”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 1, “类型”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 2, “传址”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 3, “数组”, , , , #子程序定义表头背景)
    置单元格数据 (参数_高级表格, -1, 4, “备注”, , , , #子程序定义表头背景)
    
     ' 加入DLL参数
    .计次循环首 (取数组成员数 (参数_DLL类型.参数名称), 记次变量2)
        .如果真 (等于 (参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.), 真))
            置单元格数据 (参数_高级表格, -1, 0, 参数_DLL类型.参数名称 [记次变量2])
            置单元格数据 (参数_高级表格, -1, 1, 参数_DLL类型.参数类型 [记次变量2], , , #蓝色, )
            置单元格数据 (参数_高级表格, -1, 2, 选择 (等于 (参数_DLL类型.是否传址 [记次变量2], 真), “√”, “”), , , #红褐, )
            置单元格数据 (参数_高级表格, -1, 3, 选择 (等于 (参数_DLL类型.是否数组 [记次变量2], 真), “√”, “”), , , #红褐, )
            置单元格数据 (参数_高级表格, -1, 4, 参数_DLL类型.参数备注 [记次变量2], , , #墨绿, )
        .如果真结束
        
    .计次循环尾 ()
    
    参数_高级表格.未知支持库函数_38 (“”, 参数_高级表格.)
    参数_高级表格.未知支持库函数_58 (相减 (参数_高级表格., 1), 0, , 4)
.如果真结束


参数_高级表格.未知支持库函数_36 (相减 (参数_高级表格., 1))
 ' ////////////////设置“公开”、“传址”、“数组”３列的列宽
赋值 (临时列宽, 参数_高级表格.未知支持库函数_44 (3))
参数_高级表格.未知支持库函数_32 (2, 相乘 (_启动窗口.取宽度 (., “公开”), 2))
参数_高级表格.未知支持库函数_32 (3, 相乘 (_启动窗口.取宽度 (., “数组”), 2))
.如果真 (大于或等于 (相减 (临时列宽, 参数_高级表格.未知支持库函数_44 (3)), 参数_高级表格.未知支持库函数_44 (3)))
    赋值 (临时列宽, 相减 (临时列宽, 参数_高级表格.未知支持库函数_44 (3)))
.如果真结束

参数_高级表格.未知支持库函数_32 (4, 临时列宽)
参数_高级表格.未知支持库函数_1 (0, 0, 0, 4)

.程序集 自定义程序集, , , 

.子程序 子程序_打开例程, 空白型, , 
.局部变量 I, 整数型, , , 
.局部变量 I2, 整数型, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 保存路径, 文本型, , , 
.局部变量 第一文件名, 文本型, , , 
.局部变量 数据, 字节集, , , 

.计次循环首 (_启动窗口.取项目数 (.), I)
    .如果真 (_启动窗口.是否被选中 (., 相减 (I, 1)))
        赋值 (I, -1)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (I, -1))
    赋值 (保存路径, 未知支持库函数_2 (“请指定一个例程保存路径：”, ))
    .如果真 (不等于 (保存路径, “”))
        .如果真 (不等于 (取文本右边 (保存路径, 1), “\”))
            赋值 (保存路径, 相加 (保存路径, “\”))
        .如果真结束
        .计次循环首 (_启动窗口.取项目数 (.), I)
            .如果真 (_启动窗口.是否被选中 (., 相减 (I, 1)))
                赋值 (文件名, _启动窗口.取项目文本 (., 相减 (I, 1)))
                跳到 (_启动窗口.取项目数值 (., 相减 (I, 1)))
                输出调试文本 (_启动窗口.取项目数值 (., 相减 (I, 1)))
                赋值 (数据, 读字段 (3, ))
                .判断开始 (文件是否存在 (相加 (保存路径, 文件名)))
                    赋值 (I2, 1)
                    赋值 (文件名, 子文本替换 (文件名, “.e”, , , , 假))
                    .判断循环首 (等于 (文件是否存在 (相加 (保存路径, 文件名, 到文本 (I2), “.e”)), 真))
                        赋值 (I2, 相加 (I2, 1))
                    .判断循环尾 ()
                    写到文件 (相加 (保存路径, 文件名, 到文本 (I2), “.e”), 数据)
                    赋值 (文件名, 相加 (文件名, 到文本 (I2), “.e”))
                .默认
                    写到文件 (相加 (保存路径, 文件名), 数据)
                .判断结束
                .如果真 (等于 (第一文件名, “”))
                    赋值 (第一文件名, 相加 (保存路径, 文件名))
                .如果真结束
                
            .如果真结束
            
        .计次循环尾 ()
        .判断开始 (文件是否存在 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”)))
            未知支持库函数_6 (相加 (子文本替换 (取运行目录 (), “wizard”, , , , 真), “e.exe”), 第一文件名, )
        .默认
            未知支持库函数_6 (第一文件名, , )
        .判断结束
        
    .如果真结束
    
.如果真结束


.子程序 子程序_导入易代码, 空白型, , 
.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 
.局部变量 数组1, 文本型, , "0", 

.计次循环首 (_启动窗口.取项目数 (.), 变量1)
    .如果真 (_启动窗口.是否被选中 (., 相减 (变量1, 1)))
        赋值 (数组1, 分割文本 (_启动窗口. [_启动窗口.取项目数值 (., 相减 (变量1, 1))], , ))
        检查 (大于或等于 (取数组成员数 (数组1), 3))
        .判断开始 (等于 (寻找文本 (_启动窗口.取项目文本 (., 相减 (变量1, 1)), “数据类型：”, , 假), -1))
            未知支持库函数_5 (#., 删首尾空 (数组1 [3]), #., “$”)
            .计次循环首 (相减 (取数组成员数 (数组1), 3), 变量2)
                未知支持库函数_5 (#., 删首尾空 (数组1 [相加 (变量2, 3)]), #., “$”)
            .计次循环尾 ()
        .默认
            未知支持库函数_5 (#., 删首尾空 (子文本替换 (_启动窗口.取项目文本 (., 相减 (变量1, 1)), “数据类型：”, , , , 真)), #., “$”)
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()

未知支持库函数_4 (“a”)
未知支持库函数_4 (“b”)
未知支持库函数_13 (#模板程序, 假)
_启动窗口.销毁 ()

.子程序 子程序_搜索API, 空白型, , 
.局部变量 起始搜索行, 整数型, , , 
.局部变量 I, 整数型, , , 
.局部变量 数组1, 文本型, , "0", 

.计次循环首 (取数组成员数 (_启动窗口.), I)
    .如果真 (不等于 (寻找文本 (_启动窗口. [I], _启动窗口..内容, , 真), -1))
        赋值 (数组1, 分割文本 (_启动窗口. [I], , ))
        .如果真 (大于或等于 (取数组成员数 (数组1), 3))
            .判断开始 (等于 (_启动窗口..现行选中项, 0))
                _启动窗口.加入项目 (., 数组1 [3], I)
            .默认
                _启动窗口.加入项目 (., 数组1 [1], I)
            .判断结束
            
        .如果真结束
        
    .如果真结束
    
.计次循环尾 ()

.子程序 子程序_填充树, 空白型, , 
.局部变量 局部_文本组, 文本型, , "0", 
.局部变量 局部_行数据, 文本型, , "0", 
.局部变量 局部_组下标, 整数型, , , 
.局部变量 局部_树集, 字节集, , , 
.局部变量 局部_分类, 文本型, , , 
.局部变量 局部_上次分类, 文本型, , , 
.局部变量 局部_分类图片索引, 整数型, , , 
.局部变量 局部_图片索引, 整数型, , , 
.局部变量 局部_函数名, 文本型, , , 
.局部变量 局部_结构集, 字节集, , , 
.局部变量 局部_结构组, 文本型, , "0", 
.局部变量 局部_计次, 整数型, , , 
.局部变量 局部_函数文件号, 整数型, , , 
.局部变量 局部_结构文件号, 整数型, , , 
.局部变量 局部_项目位置, 整数型, , , 

赋值 (局部_项目位置, _启动窗口..最大化按钮)
赋值 (局部_文本组, 分割文本 (到文本 (#记录信息), #换行符, )) ' 分割文件
 ' 初始化变量
赋值 (局部_组下标, 1)
赋值 (局部_分类图片索引, 0)
赋值 (局部_图片索引, 1)
赋值 (局部_函数文件号, 打开内存文件 ())
赋值 (局部_结构文件号, 打开内存文件 ())
.判断循环首 (小于或等于 (局部_组下标, 取数组成员数 (局部_文本组))) ' 循环处理每行文本
    赋值 (局部_行数据, 分割文本 (局部_文本组 [局部_组下标], , ))
    .如果真 (并且 (不等于 (局部_文本组 [局部_组下标], “”), 大于或等于 (取数组成员数 (局部_行数据), 3)))
        赋值 (局部_分类, 局部_行数据 [2])
         ' 取API所属类别
        .判断开始 (大于 (取数组成员数 (局部_行数据), 3)) ' 判断是否存在结构,
            赋值 (局部_函数名, 选择 (_启动窗口..选中, 局部_行数据 [3], 局部_行数据 [1])) ' 取API函数名
            赋值 (局部_结构组, 局部_行数据)
            删除成员 (局部_结构组, 1, 3) ' 清除非结构类型的数据
             ' 分割自定义数据类型
            .计次循环首 (取数组成员数 (局部_结构组), 局部_计次)
                移到文件首 (局部_结构文件号)
                赋值 (局部_结构集, 读入字节集 (局部_结构文件号, 取文件长度 (局部_结构文件号)))
                .如果真 (等于 (寻找字节集 (局部_结构集, 相加 (到字节集 (局部_结构组 [局部_计次]), { 0 }), ), -1)) ' 没有加入过该结构
                    移到文件尾 (局部_结构文件号)
                    写出字节集 (局部_结构文件号, 相加 (到字节集 (局部_结构组 [局部_计次]), { 0 }, 到字节集 (局部_图片索引), 到字节集 (局部_图片索引), 到字节集 (局部_组下标), 到字节集 (0), 到字节集 (2)))
                .如果真结束
                
            .计次循环尾 ()
        .默认
            赋值 (局部_函数名, 选择 (_启动窗口..选中, 局部_行数据 [3], 局部_行数据 [1])) ' 取API函数名
        .判断结束
        .判断开始 (不等于 (局部_分类, 局部_上次分类))
            写出字节集 (局部_函数文件号, 相加 (到字节集 (局部_分类), { 0 }, 到字节集 (局部_分类图片索引), 到字节集 (局部_分类图片索引), { 0, 0, 0, 0 }, 到字节集 (0), 到字节集 (1)))
            写出字节集 (局部_函数文件号, 相加 (到字节集 (局部_函数名), { 0 }, 到字节集 (局部_图片索引), 到字节集 (局部_图片索引), 到字节集 (局部_组下标), 到字节集 (0), 到字节集 (2)))
        .默认
            写出字节集 (局部_函数文件号, 相加 (到字节集 (局部_函数名), { 0 }, 到字节集 (局部_图片索引), 到字节集 (局部_图片索引), 到字节集 (局部_组下标), 到字节集 (0), 到字节集 (2)))
        .判断结束
         ' -------------------以上三句作用为形成树型框结构字节集并写到内存文件。
        赋值 (局部_上次分类, 局部_分类)
    .如果真结束
    赋值 (局部_组下标, 相加 (局部_组下标, 1))
.判断循环尾 ()
移到文件首 (局部_函数文件号)
移到文件首 (局部_结构文件号)
赋值 (局部_树集, 读入字节集 (局部_函数文件号, 取文件长度 (局部_函数文件号)))
赋值 (局部_结构集, 读入字节集 (局部_结构文件号, 取文件长度 (局部_结构文件号)))
赋值 (_启动窗口..图标, 相加 (局部_树集, 到字节集 (“数据类型”), { 0 }, 到字节集 (局部_分类图片索引), 到字节集 (局部_分类图片索引), 到字节集 (0), 到字节集 (0), 到字节集 (1), 局部_结构集))
.判断开始 (大于 (局部_项目位置, 0))
    赋值 (_启动窗口..最大化按钮, 局部_项目位置)
    _启动窗口.保证显示 (., 局部_项目位置)
.默认
    赋值 (_启动窗口..最大化按钮, 1)
    _启动窗口.保证显示 (., 1)
.判断结束
_启动窗口.获取焦点 (.)

 ' 全部关闭 ()

.子程序 子程序_填充索引, 空白型, , 
.局部变量 I, 整数型, , , 
.局部变量 临时数组, 文本型, , "0", 
.局部变量 项目值, 整数型, , , 

赋值 (项目值, _启动窗口.取项目数值 (., _启动窗口..现行选中项))
_启动窗口.清空 (.)
.计次循环首 (取数组成员数 (_启动窗口.), I)
    赋值 (临时数组, 分割文本 (_启动窗口. [I], , ))
    .如果真 (大于或等于 (取数组成员数 (临时数组), 3))
        .判断开始 (等于 (_启动窗口..选中, 真))
            _启动窗口.加入项目 (., 临时数组 [3], I)
        .默认
            _启动窗口.加入项目 (., 临时数组 [1], I)
        .判断结束
        
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (项目值, 0))
    .计次循环首 (取数组成员数 (_启动窗口.), I)
        .如果真 (等于 (_启动窗口.取项目数值 (., 相减 (I, 1)), 项目值))
            赋值 (_启动窗口..现行选中项, 相减 (I, 1))
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
.如果真结束


.子程序 子程序_分析DLL文本, 空白型, , 定位DLL文本中的DLL，加入到DLL命令类型
.参数 参数_API信息, 文本型, 可空, 与下一参数必须有一个不空
.参数 参数_DLL中文名称, 文本型, 可空, 
.参数 参数_DLL命令类型, DLL命令类型, 参考, 
.参数 参数_DLL命令文本, 文本型, 参考, 

.局部变量 局部_临时数组1, 文本型, , "0", 
.局部变量 局部_临时数组2, 文本型, , "0", 
.局部变量 局部_DLL文本, 文本型, , , 
.局部变量 局部_DLL中文名称, 文本型, , , 
.局部变量 局部_寻找位置1, 整数型, , , 
.局部变量 局部_寻找位置2, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 局部_记次变量, 整数型, , , 
.局部变量 局部_是否重复, 逻辑型, , , 
.局部变量 局部_自定义数据类型, 自定义数据类型, , , 
.局部变量 局部_自定义数据文本, 文本型, , , 

赋值 (局部_DLL文本, 取字节集数据 (#dll文本, #文本型, ))
.判断开始 (等于 (是否为空 (参数_API信息), 假))
    赋值 (局部_临时数组1, 分割文本 (参数_API信息, “,”, ))
    赋值 (局部_DLL中文名称, 局部_临时数组1 [3])
.默认
    赋值 (局部_DLL中文名称, 参数_DLL中文名称)
.判断结束
赋值 (局部_寻找位置1, 寻找文本 (局部_DLL文本, 相加 (“.DLL命令 ”, 局部_DLL中文名称), , 假))
.如果真 (不等于 (局部_寻找位置1, -1))
    赋值 (局部_寻找位置2, 寻找文本 (局部_DLL文本, “.DLL命令 ”, 相加 (局部_寻找位置1, 1), 假))
    .如果真 (等于 (局部_寻找位置2, -1))
        赋值 (局部_寻找位置2, 取字节集长度 (#dll文本))
    .如果真结束
    赋值 (局部_临时文本, 取文本中间 (局部_DLL文本, 局部_寻找位置1, 相减 (局部_寻找位置2, 局部_寻找位置1)))
    赋值 (参数_DLL命令文本, 相加 (“.版本2”, #换行符))
    赋值 (参数_DLL命令文本, 相加 (参数_DLL命令文本, #换行符, 局部_临时文本))
    赋值 (局部_临时数组1, 分割文本 (局部_临时文本, #换行符, ))
    .如果真 (小于 (取数组成员数 (局部_临时数组1), 6))
        重定义数组 (局部_临时数组1, 真, 6)
    .如果真结束
    
    赋值 (局部_临时数组2, 分割文本 (局部_临时数组1 [1], “,”, ))
    赋值 (参数_DLL命令类型.名称, 局部_DLL中文名称)
    赋值 (参数_DLL命令类型.返回值类型, 删首尾空 (局部_临时数组2 [2]))
    赋值 (参数_DLL命令类型.备注, 删首尾空 (局部_临时数组2 [6]))
    .如果真 (大于 (取数组成员数 (局部_临时数组2), 6))
        .计次循环首 (相减 (取数组成员数 (局部_临时数组2), 6), 局部_记次变量)
            赋值 (参数_DLL命令类型.备注, 相加 (参数_DLL命令类型.备注, “,”, 删首尾空 (局部_临时数组2 [相加 (局部_记次变量, 6)])))
        .计次循环尾 ()
    .如果真结束
    赋值 (参数_DLL命令类型.DLL库文件名, 删首尾空 (局部_临时数组2 [3]))
    .如果真 (不等于 (参数_DLL命令类型.DLL库文件名, “”))
        赋值 (参数_DLL命令类型.DLL库文件名, 取文本中间 (参数_DLL命令类型.DLL库文件名, 2, 相减 (取文本长度 (参数_DLL命令类型.DLL库文件名), 2)))
    .如果真结束
    赋值 (参数_DLL命令类型.DLL对应命令名称, 删首尾空 (局部_临时数组2 [4]))
    .如果真 (不等于 (参数_DLL命令类型.DLL对应命令名称, “”))
        赋值 (参数_DLL命令类型.DLL对应命令名称, 取文本中间 (参数_DLL命令类型.DLL对应命令名称, 2, 相减 (取文本长度 (参数_DLL命令类型.DLL对应命令名称), 2)))
    .如果真结束
    
    重定义数组 (参数_DLL命令类型.参数名称, 假, 0)
    重定义数组 (参数_DLL命令类型.参数类型, 假, 0)
    重定义数组 (参数_DLL命令类型.是否传址, 假, 0)
    重定义数组 (参数_DLL命令类型.是否数组, 假, 0)
    重定义数组 (参数_DLL命令类型.参数备注, 假, 0)
    重定义数组 (全局_自定义数据名称组, 假, 0)
    重定义数组 (全局_自定义数据组, 假, 0)
    重定义数组 (全局_自定义数据文本组, 假, 0)
    .计次循环首 (相减 (取数组成员数 (局部_临时数组1), 1), 局部_记次变量)
        赋值 (局部_临时文本, 删首尾空 (局部_临时数组1 [相加 (局部_记次变量, 1)]))
        .如果真 (等于 (取文本左边 (局部_临时文本, 6), “.参数 ”))
            赋值 (局部_临时文本, 取文本右边 (局部_临时文本, 相减 (取文本长度 (局部_临时文本), 6)))
            赋值 (局部_临时数组2, 分割文本 (局部_临时文本, “,”, ))
            .如果真 (小于 (取数组成员数 (局部_临时数组2), 4))
                重定义数组 (局部_临时数组2, 真, 4)
            .如果真结束
            加入成员 (参数_DLL命令类型.参数名称, 删首尾空 (局部_临时数组2 [1]))
            加入成员 (参数_DLL命令类型.参数类型, 删首尾空 (局部_临时数组2 [2]))
            .如果真 (等于 (子程序_是否默认参数类型 (删首尾空 (局部_临时数组2 [2])), 假))
                赋值 (局部_是否重复, 假)
                .计次循环首 (取数组成员数 (全局_自定义数据名称组), 局部_记次变量)
                    .如果真 (等于 (全局_自定义数据名称组 [局部_记次变量], 删首尾空 (局部_临时数组2 [2])))
                        赋值 (局部_是否重复, 真)
                        跳出循环 ()
                    .如果真结束
                    
                .计次循环尾 ()
                .如果真 (等于 (局部_是否重复, 假))
                    加入成员 (全局_自定义数据名称组, 参数_DLL命令类型.参数类型)
                    子程序_分析自定义数据文本 (删首尾空 (局部_临时数组2 [2]), 局部_自定义数据类型, 局部_自定义数据文本)
                    加入成员 (全局_自定义数据组, 局部_自定义数据类型)
                    加入成员 (全局_自定义数据文本组, 局部_自定义数据文本)
                .如果真结束
                
            .如果真结束
            加入成员 (参数_DLL命令类型.是否传址, 选择 (不等于 (寻找文本 (局部_临时数组2 [3], “传址”, , 假), -1), 真, 假))
            加入成员 (参数_DLL命令类型.是否数组, 选择 (不等于 (寻找文本 (局部_临时数组2 [3], “数组”, , 假), -1), 真, 假))
            赋值 (局部_临时文本, 删首尾空 (局部_临时数组2 [4]))
            .如果真 (大于 (取数组成员数 (局部_临时数组2), 4))
                .计次循环首 (相减 (取数组成员数 (局部_临时数组2), 4), 局部_记次变量)
                    赋值 (局部_临时文本, 相加 (局部_临时文本, “,”, 删首尾空 (局部_临时数组2 [相加 (局部_记次变量, 4)])))
                .计次循环尾 ()
            .如果真结束
            加入成员 (参数_DLL命令类型.参数备注, 局部_临时文本)
        .如果真结束
        
    .计次循环尾 ()
.如果真结束


.子程序 子程序_分析自定义数据文本, 空白型, , 定位自定义数据文本中的内容，加入到自定义数据类型
.参数 参数_数据类型名称, 文本型, , 
.参数 参数_自定义数据类型, 自定义数据类型, 参考 可空, 
.参数 参数_自定义数据文本, 文本型, 参考, 

.局部变量 局部_临时数组1, 文本型, , "0", 
.局部变量 局部_临时数组2, 文本型, , "0", 
.局部变量 局部_数据类型文本, 文本型, , , 
.局部变量 局部_寻找位置1, 整数型, , , 
.局部变量 局部_寻找位置2, 整数型, , , 
.局部变量 局部_临时文本, 文本型, , , 
.局部变量 局部_记次变量, 整数型, , , 

赋值 (局部_数据类型文本, 取字节集数据 (#自定义数据文本, #文本型, ))
赋值 (局部_临时数组1, 分割文本 (参数_数据类型名称, “,”, ))
赋值 (局部_寻找位置1, 寻找文本 (局部_数据类型文本, 相加 (“.数据类型 ”, 参数_数据类型名称), , 假))
.如果真 (不等于 (局部_寻找位置1, -1))
    赋值 (局部_寻找位置2, 寻找文本 (局部_数据类型文本, “.数据类型 ”, 相加 (局部_寻找位置1, 1), 假))
    .如果真 (等于 (局部_寻找位置2, -1))
        赋值 (局部_寻找位置2, 取字节集长度 (#自定义数据文本))
    .如果真结束
    赋值 (局部_临时文本, 取文本中间 (局部_数据类型文本, 局部_寻找位置1, 相减 (局部_寻找位置2, 局部_寻找位置1)))
    赋值 (参数_自定义数据文本, 相加 (“.版本2”, #换行符))
    赋值 (参数_自定义数据文本, 相加 (参数_自定义数据文本, #换行符, 局部_临时文本))
    赋值 (局部_临时数组1, 分割文本 (局部_临时文本, #换行符, ))
    .如果真 (小于 (取数组成员数 (局部_临时数组1), 3))
        重定义数组 (局部_临时数组1, 真, 3)
    .如果真结束
    
    赋值 (局部_临时数组2, 分割文本 (局部_临时数组1 [1], “,”, ))
    .如果真 (等于 (取文本左边 (参数_数据类型名称, 10), “.数据类型 ”))
        赋值 (参数_数据类型名称, 取文本右边 (参数_数据类型名称, 相减 (取文本长度 (参数_数据类型名称), 10)))
    .如果真结束
    赋值 (参数_自定义数据类型.名称, 参数_数据类型名称)
    赋值 (参数_自定义数据类型.备注, 删首尾空 (局部_临时数组2 [3]))
    .如果真 (大于 (取数组成员数 (局部_临时数组2), 3))
        .计次循环首 (相减 (取数组成员数 (局部_临时数组2), 3), 局部_记次变量)
            赋值 (参数_自定义数据类型.备注, 相加 (参数_自定义数据类型.备注, “,”, 删首尾空 (局部_临时数组2 [相加 (局部_记次变量, 3)])))
        .计次循环尾 ()
    .如果真结束
    
    重定义数组 (参数_自定义数据类型.成员名称, 假, 0)
    重定义数组 (参数_自定义数据类型.成员类型, 假, 0)
    重定义数组 (参数_自定义数据类型.是否传址, 假, 0)
    重定义数组 (参数_自定义数据类型.成员数组, 假, 0)
    重定义数组 (参数_自定义数据类型.成员备注, 假, 0)
    
    .计次循环首 (相减 (取数组成员数 (局部_临时数组1), 1), 局部_记次变量)
        赋值 (局部_临时文本, 删首尾空 (局部_临时数组1 [相加 (局部_记次变量, 1)]))
        .如果真 (等于 (取文本左边 (局部_临时文本, 6), “.成员 ”))
            赋值 (局部_临时文本, 取文本右边 (局部_临时文本, 相减 (取文本长度 (局部_临时文本), 6)))
            赋值 (局部_临时数组2, 分割文本 (局部_临时文本, “,”, ))
            .如果真 (小于 (取数组成员数 (局部_临时数组2), 5))
                重定义数组 (局部_临时数组2, 真, 5)
            .如果真结束
            加入成员 (参数_自定义数据类型.成员名称, 删首尾空 (局部_临时数组2 [1]))
            加入成员 (参数_自定义数据类型.成员类型, 删首尾空 (局部_临时数组2 [2]))
            加入成员 (参数_自定义数据类型.是否传址, 选择 (不等于 (寻找文本 (局部_临时数组2 [3], “传址”, , 假), -1), 真, 假))
            赋值 (局部_临时数组2 [4], 删首尾空 (局部_临时数组2 [4]))
            .如果真 (大于 (取文本长度 (局部_临时数组2 [4]), 0))
                赋值 (局部_临时数组2 [4], 取文本中间 (局部_临时数组2 [4], 2, 相减 (取文本长度 (局部_临时数组2 [4]), 2)))
            .如果真结束
            加入成员 (参数_自定义数据类型.成员数组, 局部_临时数组2 [4])
            
            赋值 (局部_临时文本, 删首尾空 (局部_临时数组2 [5]))
            .如果真 (大于 (取数组成员数 (局部_临时数组2), 5))
                .计次循环首 (相减 (取数组成员数 (局部_临时数组2), 5), 局部_记次变量)
                    赋值 (局部_临时文本, 相加 (局部_临时文本, “,”, 删首尾空 (局部_临时数组2 [相加 (局部_记次变量, 5)])))
                .计次循环尾 ()
            .如果真结束
            加入成员 (参数_自定义数据类型.成员备注, 局部_临时文本)
        .如果真结束
        
    .计次循环尾 ()
.如果真结束


.子程序 子程序_是否默认参数类型, 逻辑型, , 真表示是，假表示不是
.参数 参数_类型名称, 文本型, , 

.如果真 (或者 (等于 (参数_类型名称, “”), 等于 (参数_类型名称, “逻辑型”), 等于 (参数_类型名称, “字节型”), 等于 (参数_类型名称, “短整数型”), 等于 (参数_类型名称, “整数型”), 等于 (参数_类型名称, “长整数型”), 等于 (参数_类型名称, “双精度小数”), 等于 (参数_类型名称, “小数型”), 等于 (参数_类型名称, “文本型”), 等于 (参数_类型名称, “字节集”), 等于 (参数_类型名称, “日期时间型”), 等于 (参数_类型名称, “子程序指针”), 等于 (参数_类型名称, “备注型”)))
    返回 (真)
.如果真结束
返回 (假)


 ' 不属于任何一个程序集、类模块的函数：
