 ' 文件类型：Windows模块源码

 ' 程序名称：Gdiplus类2.0
 ' 程序描述：用于图形绘制
@备注:
WindowsXP需要带上GDI+1.1的DLL，
Windows7系统自带，所以可以直接使用。
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：2.0
 ' 创建号：0.0



.常量 混合模式_替换, "0", 公开, CompositingModeSourceOver
.常量 混合模式_复制, "1", 公开, CompositingModeSourceCopy
.常量 , , , 
.常量 混合品质_无效, "-1", 公开, CompositingQualityInvalid
.常量 混合品质_默认, "0", 公开, CompositingQualityDefault
.常量 混合品质_最佳性能, "1", 公开, CompositingQualityHighSpeed
.常量 混合品质_最佳质量, "2", 公开, CompositingQualityHighQuality
.常量 混合品质_伽玛校正, "3", 公开, CompositingQualityGammaCorrected
.常量 混合品质_假定线性, "4", 公开, CompositingQualityAssumeLinear
.常量 , , , 
.常量 平滑模式_无效, "-1", 公开, SmoothingModeInvalid
.常量 平滑模式_默认, "0", 公开, SmoothingModeDefault
.常量 平滑模式_最佳性能, "1", 公开, SmoothingModeHighSpeed
.常量 平滑模式_最佳质量, "2", 公开, SmoothingModeHighQuality
.常量 平滑模式_不抗锯齿, "3", 公开, SmoothingModeNone
.常量 平滑模式_抗锯齿, "4", 公开, SmoothingModeAntiAlias
.常量 , , , 
.常量 文本渲染模式_系统默认, "0", 公开, TextRenderingHintSystemDefault
.常量 文本渲染模式_符号位图和hinting技术, "1", 公开, TextRenderingHintSingleBitPerPixelGridFit
.常量 文本渲染模式_符号位图, "2", 公开, TextRenderingHintSingleBitPerPixel
.常量 文本渲染模式_抗锯齿和hinting技术, "3", 公开, TextRenderingHintAntiAliasGridFit
.常量 文本渲染模式_抗锯齿, "4", 公开, TextRenderingHintAntiAlias
.常量 文本渲染模式_ClearType文本和hinting技术, "5", 公开, TextRenderingHintClearTypeGridFit
.常量 , , , 
.常量 算法模式_无效, "-1", 公开, InterpolationModeInvalid
.常量 算法模式_默认, "0", 公开, InterpolationModeDefault
.常量 算法模式_低质量, "1", 公开, InterpolationModeLowQuality
.常量 算法模式_高质量, "2", 公开, InterpolationModeHighQuality
.常量 算法模式_双线性, "3", 公开, InterpolationModeBilinear
.常量 算法模式_双三次, "4", 公开, InterpolationModeBicubic
.常量 算法模式_邻近, "5", 公开, InterpolationModeNearestNeighbor
.常量 算法模式_高质量双线性, "6", 公开, InterpolationModeHighQualityBilinear
.常量 算法模式_高质量双三次, "7", 公开, InterpolationModeHighQualityBicubic
.常量 , , , 
.常量 像素偏移模式_无效, "-1", 公开, PixelOffsetModeInvalid
.常量 像素偏移模式_默认, "0", 公开, PixelOffsetModeDefault
.常量 像素偏移模式_高性能, "1", 公开, PixelOffsetModeHighSpeed
.常量 像素偏移模式_高质量, "2", 公开, PixelOffsetModeHighQuality
.常量 像素偏移模式_不偏移, "3", 公开, PixelOffsetModeNone
.常量 像素偏移模式_一半, "4", 公开, PixelOffsetModeHalf
.常量 , , , 
.常量 单位_世界坐标, "0", 公开, UnitWorld
.常量 单位_显示器, "1", 公开, UnitDisplay
.常量 单位_像素, "2", 公开, UnitPixel
.常量 单位_点, "3", 公开, UnitPoint
.常量 单位_英寸, "4", 公开, UnitInch
.常量 单位_文档, "5", 公开, UnitDocument。1/300英寸
.常量 单位_毫米, "6", 公开, UnitMillimeter。
.常量 , , , 
.常量 坐标空间_世界, "0", 公开, CoordinateSpaceWorld
.常量 坐标空间_页, "1", 公开, CoordinateSpacePage
.常量 坐标空间_设备, "2", 公开, CoordinateSpaceDevice
.常量 , , , 
.常量 字体风格_普通, "0", 公开, 
.常量 字体风格_加粗, "1", 公开, 
.常量 字体风格_倾斜, "2", 公开, 
.常量 字体风格_加粗倾斜, "3", 公开, 
.常量 字体风格_下划线, "4", 公开, 
.常量 字体风格_删除线, "8", 公开, 
.常量 , , , 
.常量 填充模式_交替, "0", 公开, Alternate 指定交替填充模式。  
.常量 填充模式_环绕, "1", 公开, Winding 指定环绕填充模式。  
.常量 , , , 
.常量 合并模式_替代, "0", 公开, Replace 一个剪辑区域被另一个剪辑区域替代。
.常量 合并模式_交集, "1", 公开, Intersect 通过采用两个剪辑区域的交集组合两个剪辑区域。
.常量 合并模式_并集, "2", 公开, Union 通过采用两个剪辑区域的联合组合两个剪辑区域。
.常量 合并模式_并集减交集, "3", 公开, Xor 两者的并集减去两者的交集。通过只采纳单独由其中一个区域（而非两个区域一起）包括的范围来组合两个剪辑区域。
.常量 合并模式_排除新区域, "4", 公开, Exclude 指定由从现有区域移除的新区域的结果替代现有区域。换言之，从现有区域中排除新区域。
.常量 合并模式_排除旧区域, "5", 公开, Complement 指定由从新区域移除的现有区域的结果替代现有区域。换言之，从新区域中排除现有区域。
.常量 , , , 
.常量 颜色调整类型_默认, "0", 公开, ColorAdjustTypeDefault。适应用各类型
.常量 颜色调整类型_位图, "1", 公开, ColorAdjustTypeBitmap。用于位图
.常量 颜色调整类型_画刷, "2", 公开, ColorAdjustTypeBrush。用于图元文件中的画刷
.常量 颜色调整类型_画笔, "3", 公开, ColorAdjustTypePen。用于图元文件中的画笔
.常量 颜色调整类型_文本, "4", 公开, ColorAdjustTypeText。用于图元文件中的文本的画刷
.常量 颜色调整类型_总数, "5", 公开, ColorAdjustTypeCount，内部使用
.常量 颜色调整类型_通用, "6", 公开, ColorAdjustTypeAny，保留，不使用
.常量 , , , 
.常量 输出通道_C, "0", 公开, ColorChannelFlagsC
.常量 输出通道_M, "1", 公开, ColorChannelFlagsM
.常量 输出通道_Y, "2", 公开, ColorChannelFlagsY
.常量 输出通道_K, "3", 公开, ColorChannelFlagsK
.常量 输出通道_Last, "4", 公开, ColorChannelFlagsLast
.常量 , , , 
.常量 调色板标志_含透明色, "1", 公开, PaletteFlagsHasAlpha
.常量 调色板标志_灰度, "2", 公开, PaletteFlagsGrayScale
.常量 调色板标志_半色, "4", 公开, PaletteFlagsHalftone
.常量 , , , 
.常量 矩阵顺序_预先计算, "0", 公开, Prepend 在旧操作前应用新操作。 
.常量 矩阵顺序_追加, "1", 公开, Append 在旧操作后应用新操作。 
.常量 , , , 
.常量 颜色矩阵标志_默认, "0", 公开, ColorMatrixFlagsDefault。所有的颜色值（包括灰度）是由相同的颜色调整矩阵调整的指定
.常量 颜色矩阵标志_忽略灰度, "1", 公开, ColorMatrixFlagsSkipGrays。不对灰度进行调整
.常量 颜色矩阵标志_分别, "2", 公开, ColorMatrixFlagsAltGray。颜色是一个矩阵，灰度是另一个矩阵。
.常量 , , , 
.常量 GMEM_ZEROINIT, "64", , 新分配的内存块全部初始化成零
.常量 GMEM_MOVEABLE, "2", , 分配一个可移动内存块
.常量 , , , 
.常量 图像格式_内存BMP, "“{B96B3CAA-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatMemoryBMP
.常量 图像格式_BMP, "“{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatBMP
.常量 图像格式_JPEG, "“{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatJPEG
.常量 图像格式_GIF, "“{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatGIF
.常量 图像格式_EMF, "“{B96B3CAC-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatEMF
.常量 图像格式_WMF, "“{B96B3CAD-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatWMF
.常量 图像格式_TIFF, "“{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatTIFF
.常量 图像格式_PNG, "“{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatPNG
.常量 图像格式_ICO, "“{B96B3CB5-0728-11D3-9D7B-0000F81EF32E}”", 公开, ImageFormatIcon
.常量 , , , 
.常量 图像类型_未知, "0", 公开, ImageTypeUnknown
.常量 图像类型_位图, "1", 公开, ImageTypeBitmap
.常量 图像类型_图元文件, "2", 公开, ImageTypeMetafile
.常量 , , , 
.常量 图像属性_无, "0", 公开, ImageFlagsNone
.常量 图像属性_可缩放, "1", 公开, ImageFlagsScalable
.常量 图像属性_含透明, "2", 公开, ImageFlagsHasAlpha
.常量 图像属性_含半透明, "4", 公开, ImageFlagsHasTranslucent
.常量 图像属性_可部分缩放, "8", 公开, ImageFlagsPartiallyScalable
.常量 图像属性_色彩空间RGB, "16", 公开, ImageFlagsColorSpaceRGB
.常量 图像属性_色彩空间CMYK, "32", 公开, ImageFlagsColorSpaceCMYK
.常量 图像属性_色彩空间灰度, "64", 公开, ImageFlagsColorSpaceGRAY
.常量 图像属性_色彩空间YCBCR, "128", 公开, ImageFlagsColorSpaceYCBCR
.常量 图像属性_色彩空间YCCK, "256", 公开, ImageFlagsColorSpaceYCCK
.常量 图像属性_含DPI, "4096", 公开, ImageFlagsHasRealDPI
.常量 图像属性_含像素尺寸, "8192", 公开, ImageFlagsHasRealPixelSize
.常量 图像属性_只读, "65536", 公开, ImageFlagsReadOnly
.常量 图像属性_高速缓存, "131072", 公开, ImageFlagsCaching
.常量 , , , 
.常量 像素格式_Indexed, "65536", 公开, Indexed 该像素数据包含颜色索引值，这意味着这些值是系统颜色表中颜色的索引，而不是单个颜色值。
.常量 像素格式_GDI, "131072", 公开, Gdi 像素数据包含 GDI 颜色。
.常量 像素格式_Alpha, "262144", 公开, Alpha 像素数据包含没有进行过自左乘的 alpha 值。
.常量 像素格式_PAlpha, "524288", 公开, PAlpha 像素格式包含自左乘的 alpha 值。
.常量 像素格式_Extended, "1048576", 公开, Extended 保留。
.常量 像素格式_Canonical, "2097152", 公开, Canonical 保留。
.常量 像素格式_Undefined, "0", 公开, Undefined 未定义像素格式。
.常量 像素格式_DontCare, "0", , DontCare 没有指定像素格式。
.常量 像素格式_1bppIndexed, "196865", 公开, Format1bppIndexed 指定像素格式为每像素 1 位，并指定它使用索引颜色。因此颜色表中有两种颜色。
.常量 像素格式_4bppIndexed, "197634", 公开, Format4bppIndexed 指定格式为每像素 4 位而且已创建索引。
.常量 像素格式_8bppIndexed, "198659", 公开, Format8bppIndexed 指定格式为每像素 8 位而且已创建索引。因此颜色表中有 256 种颜色。
.常量 像素格式_16bppGrayScale, "1052676", 公开, Format16bppGrayScale 像素格式为每像素 16 位。该颜色信息指定 65536 种灰色调。
.常量 像素格式_16bppRGB555, "135173", 公开, Format16bppRgb555 指定格式为每像素 16 位；红色、绿色和蓝色分量各使用 5 位。剩余的 1 位未使用。
.常量 像素格式_16bppRGB565, "135174", 公开, Format16bppRgb565 指定格式为每像素 16 位；红色分量使用 5 位，绿色分量使用 6 位，蓝色分量使用 5 位。
.常量 像素格式_16bppARGB1555, "397319", 公开, Format16bppArgb1555 像素格式为每像素 16 位。该颜色信息指定 32
.常量 像素格式_24bppRGB, "137224", 公开, Format24bppRgb 指定格式为每像素 24 位；红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppRGB, "139273", 公开, Format32bppRgb 指定格式为每像素 32 位；红色、绿色和蓝色分量各使用 8 位。剩余的 8 位未使用。
.常量 像素格式_32bppARGB, "2498570", 公开, Format32bppArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。
.常量 像素格式_32bppPARGB, "925707", 公开, Format32bppPArgb 指定格式为每像素 32 位；alpha、红色、绿色和蓝色分量各使用 8 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_48bppRGB, "1060876", 公开, Format48bppRgb 指定格式为每像素 48 位；红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppARGB, "3424269", 公开, Format64bppArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。
.常量 像素格式_64bppPARGB, "1851406", 公开, Format64bppPArgb 指定格式为每像素 64 位；alpha、红色、绿色和蓝色分量各使用 16 位。根据 alpha 分量，对红色、绿色和蓝色分量进行自左乘。
.常量 像素格式_Max, "16", , Max 此枚举的最大值。
.常量 , , , 
.常量 帧维面_时间, "“{6AEDBD6D-3FB5-418A-83A6-7F45229DC872}”", 公开, 用于 GIF
.常量 帧维面_分辨率, "“{84236F7B-3BD3-428F-8DAB-4EA1439CA315}”", 公开, 
.常量 帧维面_页, "“{7462DC86-6180-4C7E-8E3F-EE7333A7A483}”", 公开, 用于 TIFF
.常量 , , , 
.常量 属性值类型_字节型, "1", 公开, PropertyTagTypeByte
.常量 属性值类型_字符型, "2", 公开, PropertyTagTypeASCII
.常量 属性值类型_短整数型, "3", 公开, PropertyTagTypeShort
.常量 属性值类型_整数型, "4", 公开, PropertyTagTypeLong
.常量 属性值类型_整数型对, "5", 公开, PropertyTagTypeRational。表示成对的整数数组
.常量 属性值类型_未定义, "7", 公开, PropertyTagTypeUndefined
.常量 属性值类型_小数型, "9", 公开, PropertyTagTypeSLONG
.常量 属性值类型_小数型对, "10", 公开, PropertyTagTypeSRational。表示成对的小数数组
.常量 , , , 
.常量 属性标签_新子文件, "254", 公开, PropertyTagNewSubfileType
.常量 属性标签_子文件, "255", 公开, PropertyTagSubfileType
.常量 属性标签_图像宽度, "256", 公开, PropertyTagImageWidth
.常量 属性标签_图像高度, "257", 公开, PropertyTagImageHeight
.常量 属性标签_位深, "258", 公开, PropertyTagBitsPerSample
.常量 属性标签_压缩, "259", 公开, PropertyTagCompression
.常量 属性标签_光度测量解释, "262", 公开, PropertyTagPhotometricInterp
.常量 属性标签_分离黑白, "263", 公开, PropertyTagThreshHolding
.常量 属性标签_抖动或半色调宽, "264", 公开, PropertyTagCellWidth
.常量 属性标签_抖动或半色调高, "265", 公开, PropertyTagCellHeight
.常量 属性标签_填充顺序, "266", 公开, PropertyTagFillOrder
.常量 属性标签_文档名称, "269", 公开, PropertyTagDocumentName
.常量 属性标签_图像描述, "270", 公开, PropertyTagImageDescription
.常量 属性标签_设备制造商, "271", 公开, PropertyTagEquipMake
.常量 属性标签_设备型号, "272", 公开, PropertyTagEquipModel
.常量 属性标签_字节偏移量, "273", 公开, PropertyTagStripOffsets
.常量 属性标签_方向定位, "274", 公开, PropertyTagOrientation
.常量 属性标签_每像素颜色分量, "277", 公开, PropertyTagSamplesPerPixel
.常量 属性标签_每行字节数, "278", 公开, PropertyTagRowsPerStrip
.常量 属性标签_字节总数, "279", 公开, PropertyTagStripBytesCount
.常量 属性标签_最小采样值, "280", 公开, PropertyTagMinSampleValue
.常量 属性标签_最大采样值, "281", 公开, PropertyTagMaxSampleValue
.常量 属性标签_水平分辨率, "282", 公开, PropertyTagXResolution
.常量 属性标签_垂直分辨率, "283", 公开, PropertyTagYResolution
.常量 属性标签_数据配置, "284", 公开, PropertyTagPlanarConfig
.常量 属性标签_页名称, "285", 公开, PropertyTagPageName
.常量 属性标签_水平位置, "286", 公开, PropertyTagXPosition
.常量 属性标签_垂直位置, "287", 公开, PropertyTagYPosition
.常量 属性标签_释放偏移, "288", 公开, PropertyTagFreeOffset
.常量 属性标签_释放字节偏移, "289", 公开, PropertyTagFreeByteCounts
.常量 属性标签_灰度单位, "290", 公开, PropertyTagGrayResponseUnit
.常量 属性标签_灰度密度, "291", 公开, PropertyTagGrayResponseCurve
.常量 属性标签_T4选项, "292", 公开, PropertyTagT4Option
.常量 属性标签_T6选项, "293", 公开, PropertyTagT6Option
.常量 属性标签_分辨率单位, "296", 公开, PropertyTagResolutionUnit
.常量 属性标签_页码, "297", 公开, PropertyTagPageNumber
.常量 属性标签_传输功能, "301", 公开, PropertyTagTransferFuncition
.常量 属性标签_软件名, "305", 公开, PropertyTagSoftwareUsed
.常量 属性标签_创建时间, "306", 公开, PropertyTagDateTime
.常量 属性标签_作者, "315", 公开, PropertyTagArtist
.常量 属性标签_主机名, "316", 公开, PropertyTagHostComputer
.常量 属性标签_预测, "317", 公开, PropertyTagPredictor
.常量 属性标签_白点色度, "318", 公开, PropertyTagWhitePoint
.常量 属性标签_重要颜色, "319", 公开, PropertyTagPrimaryChromaticities
.常量 属性标签_调色板, "320", 公开, PropertyTagColorMap
.常量 属性标签_半色调, "321", 公开, PropertyTagHalftoneHints
.常量 属性标签_平铺宽度, "322", 公开, PropertyTagTileWidth
.常量 属性标签_平铺长度, "323", 公开, PropertyTagTileLength
.常量 属性标签_平铺偏移量, "324", 公开, PropertyTagTileOffset
.常量 属性标签_平铺字节总数, "325", 公开, PropertyTagTileByteCounts
.常量 属性标签_置墨水, "332", 公开, PropertyTagInkSet
.常量 属性标签_墨水名, "333", 公开, PropertyTagInkNames
.常量 属性标签_墨水数, "334", 公开, PropertyTagNumberOfInks
.常量 属性标签_颜色成分, "336", 公开, PropertyTagDotRange
.常量 属性标签_打印环境, "337", 公开, PropertyTagTargetPrinter
.常量 属性标签_额外颜色分量, "338", 公开, PropertyTagExtraSamples
.常量 属性标签_采样格式, "339", 公开, PropertyTagSampleFormat
.常量 属性标签_采样最小值, "340", 公开, PropertyTagSMinSampleValue
.常量 属性标签_采样最大值, "341", 公开, PropertyTagSMaxSampleValue
.常量 属性标签_传输范围, "342", 公开, PropertyTagTransferRange
.常量 , , , 
.常量 属性标签_JPEG压缩, "512", 公开, PropertyTagJPEGProc
.常量 属性标签_JPEG格式, "513", 公开, PropertyTagJPEGInterFormat
.常量 属性标签_JPEG长度, "514", 公开, PropertyTagJPEGInterLength
.常量 属性标签_JPEG重置间隔, "515", 公开, PropertyTagJPEGRestartInterval
.常量 属性标签_JPEG无损预测, "517", 公开, PropertyTagJPEGLosslessPredictors
.常量 属性标签_JPEG点变化值, "518", 公开, PropertyTagJPEGPointTransforms
.常量 属性标签_JPEG量化表, "519", 公开, PropertyTagJPEGQTables
.常量 属性标签_JPEGdc表, "520", 公开, PropertyTagJPEGDCTables
.常量 属性标签_JPEGac表, "521", 公开, PropertyTagJPEGACTables
.常量 , , , 
.常量 属性标签_伽玛值, "769", 公开, PropertyTagGamma
.常量 属性标签_ICC配置文件, "770", 公开, PropertyTagICCProfileDescriptor
.常量 属性标签_SRGB渲染, "771", 公开, PropertyTagSRGBRenderingIntent
.常量 , , , 
.常量 属性标签_图像标题, "800", 公开, PropertyTagImageTitle
.常量 属性标签_版权, "33432", 公开, PropertyTagCopyright
.常量 , , , 
.常量 , , , Adobe公司图像信息标签等
.常量 属性标签_水平分辨率单位, "20481", 公开, PropertyTagResolutionXUnit。1、每英寸，2.每厘米
.常量 属性标签_垂直分辨率单位, "20482", 公开, PropertyTagResolutionYUnit。1、每英寸，2.每厘米
.常量 属性标签_宽度单位, "20483", 公开, PropertyTagResolutionXLengthUnit。1、英寸，2、厘米，3、点，4、派卡，5、列
.常量 属性标签_高度单位, "20484", 公开, PropertyTagResolutionYLengthUnit。1、英寸，2、厘米，3、点，4、派卡，5、列
.常量 属性标签_打印选项, "20485", 公开, PropertyTagPrintFlags
.常量 属性标签_打印版本, "20486", 公开, PropertyTagPrintFlagsVersion
.常量 属性标签_打印裁剪标志, "20487", 公开, PropertyTagPrintFlagsCrop
.常量 属性标签_打印宽度, "20488", 公开, PropertyTagPrintFlagsBleedWidth
.常量 属性标签_打印宽度比例, "20489", 公开, PropertyTagPrintFlagsBleedWidthScale
.常量 属性标签_网格频率, "20490", 公开, PropertyTagHalftoneLPI
.常量 属性标签_网格频率单位, "20491", 公开, PropertyTagHalftoneLPIUnit
.常量 属性标签_网格角度, "20492", 公开, PropertyTagHalftoneDegree
.常量 属性标签_网格形状, "20493", 公开, PropertyTagHalftoneShape
.常量 属性标签_网格杂项, "20494", 公开, PropertyTagHalftoneMisc
.常量 属性标签_网格是否默认屏幕, "20495", 公开, PropertyTagHalftoneScreen
.常量 属性标签_JPEG品质_Adobe, "20496", 公开, PropertyTagJPEGQuality
.常量 属性标签_网格大小, "20497", 公开, PropertyTagGridSize
.常量 属性标签_缩略图格式, "20498", 公开, PropertyTagThumbnailFormat。0、原始RGB，1、JPEG
.常量 属性标签_缩略图宽度, "20499", 公开, PropertyTagThumbnailWidth
.常量 属性标签_缩略图高度, "20500", 公开, PropertyTagThumbnailHeight
.常量 属性标签_缩略图位深, "20501", 公开, PropertyTagThumbnailColorDepth
.常量 属性标签_缩略图色板数量, "20502", 公开, PropertyTagThumbnailPlanes
.常量 属性标签_缩略图行字节数, "20503", 公开, PropertyTagThumbnailRawBytes
.常量 属性标签_缩略图大小, "20504", 公开, PropertyTagThumbnailSize。总字节大小。
.常量 属性标签_缩略图压缩大小, "20505", 公开, PropertyTagThumbnailCompressedSize。
.常量 属性标签_颜色传输功能, "20506", 公开, PropertyTagColorTransferFunction
.常量 属性标签_缩略图数据, "20507", 公开, PropertyTagThumbnailData
.常量 , , , 缩略图热门标签
.常量 属性标签_缩略图_宽度, "20512", 公开, PropertyTagThumbnailImageWidth
.常量 属性标签_缩略图_高度, "20513", 公开, PropertyTagThumbnailImageHeight
.常量 属性标签_缩略图_位深, "20514", 公开, PropertyTagThumbnailBitsPerSample
.常量 属性标签_缩略图_压缩, "20515", 公开, PropertyTagThumbnailCompression
.常量 属性标签_缩略图_光度测量解释, "20516", 公开, PropertyTagThumbnailPhotometricInterp
.常量 属性标签_缩略图_描述, "20517", 公开, PropertyTagThumbnailImageDescription
.常量 属性标签_缩略图_设备制造商, "20518", 公开, PropertyTagThumbnailEquipMake
.常量 属性标签_缩略图_设备制型号, "20519", 公开, PropertyTagThumbnailEquipModel
.常量 属性标签_缩略图_字节偏移量, "20520", 公开, PropertyTagThumbnailStripOffsets
.常量 属性标签_缩略图_方向定位, "20521", 公开, PropertyTagThumbnailOrientation
.常量 属性标签_缩略图_每像素颜色分量, "20522", 公开, PropertyTagThumbnailSamplesPerPixel
.常量 属性标签_缩略图_每行字节数, "20523", 公开, PropertyTagThumbnailRowsPerStrip
.常量 属性标签_缩略图_字节总数, "20524", 公开, PropertyTagThumbnailStripBytesCount
.常量 属性标签_缩略图_水平分辨率, "20525", 公开, PropertyTagThumbnailResolutionX
.常量 属性标签_缩略图_垂直分辨率, "20526", 公开, PropertyTagThumbnailResolutionY
.常量 属性标签_缩略图_数据配置, "20527", 公开, PropertyTagThumbnailPlanarConfig
.常量 属性标签_缩略图_分辨率单位, "20528", 公开, PropertyTagThumbnailResolutionUnit
.常量 属性标签_缩略图_传输功能, "20529", 公开, PropertyTagThumbnailTransferFunction
.常量 属性标签_缩略图_软件名, "20530", 公开, PropertyTagThumbnailSoftwareUsed
.常量 属性标签_缩略图_更改时间, "20531", 公开, PropertyTagThumbnailDateTime
.常量 属性标签_缩略图_作者, "20532", 公开, PropertyTagThumbnailArtist
.常量 属性标签_缩略图_白点色度, "20533", 公开, PropertyTagThumbnailWhitePoint
.常量 属性标签_缩略图_重要颜色, "20534", 公开, PropertyTagThumbnailPrimaryChromaticities
.常量 属性标签_缩略图_YCbCr数据, "20535", 公开, PropertyTagThumbnailYCbCrCoefficients
.常量 属性标签_缩略图_YCbCr采样, "20536", 公开, PropertyTagThumbnailYCbCrSubsampling
.常量 属性标签_缩略图_YCbCr配置, "20537", 公开, PropertyTagThumbnailYCbCrPositioning
.常量 属性标签_缩略图_黑白参考, "20538", 公开, PropertyTagThumbnailRefBlackWhite
.常量 属性标签_缩略图_版权信息, "20539", 公开, PropertyTagThumbnailCopyRight
.常量 , , , 
.常量 属性标签_亮度表, "20624", 公开, PropertyTagLuminanceTable
.常量 属性标签_色度表, "20625", 公开, PropertyTagChrominanceTable
.常量 , , , 
.常量 属性标签_帧延时, "20736", 公开, PropertyTagFrameDelay
.常量 属性标签_循环次数, "20737", 公开, PropertyTagLoopCount。0、无限。
.常量 , , , 
.常量 属性标签_像素单位, "20752", 公开, PropertyTagPixelUnit
.常量 属性标签_水平像素单位, "20753", 公开, PropertyTagPixelPerUnitX
.常量 属性标签_垂直像素单位, "20754", 公开, PropertyTagPixelPerUnitY
.常量 属性标签_直方图调色板, "20755", 公开, PropertyTagPaletteHistogram
.常量 , , , 
.常量 属性标签_曝光时间, "33434", 公开, PropertyTagLuminanceTable。单位秒
.常量 属性标签_焦距, "33437", 公开, PropertyTagExifFNumber
.常量 属性标签_曝光模式, "34850", 公开, PropertyTagExifExposureProg。0.没有定义，1.手动，2.正常程序，3.光圈优先，4.快门优先，5.创意程序，6.运动模式，7.人像模式，8.风景模式
.常量 属性标签_测光, "34852", 公开, PropertyTagExifSpectralSense
.常量 属性标签_感光度, "34855", 公开, PropertyTagExifISOSpeed
.常量 属性标签_光转换能力, "34856", 公开, PropertyTagExifOECF
.常量 属性标签_版本, "36864", 公开, PropertyTagExifVer
.常量 属性标签_原始时间, "36867", 公开, PropertyTagExifDTOrig
.常量 属性标签_数字时间, "36868", 公开, PropertyTagExifDTDigitized
.常量 属性标签_扩展压缩, "37121", 公开, PropertyTagExifCompConfig
.常量 属性标签_压缩BPP, "37122", 公开, PropertyTagExifCompBPP
.常量 属性标签_快门速度, "37377", 公开, PropertyTagExifShutterSpeed
.常量 属性标签_光圈, "37378", 公开, PropertyTagExifAperture
.常量 属性标签_亮度, "37379", 公开, PropertyTagExifBrightness。-99.99到99.99
.常量 属性标签_曝光偏差, "37380", 公开, PropertyTagExifExposureBias。-99.99到99.99
.常量 属性标签_最大光圈, "37381", 公开, PropertyTagExifMaxAperture。00.00到99.99
.常量 属性标签_自动对焦, "37382", 公开, PropertyTagExifSubjectDist
.常量 属性标签_测光模式, "37383", 公开, PropertyTagExifMeteringMode。0.未知，1.正常，2.中央重点测光，3.点测光，4.多分区，5.平均测光，6.局部测光。
.常量 属性标签_白平衡, "37384", 公开, PropertyTagExifLightSource。0.未知，1.日光，2.荧光灯，3.钨丝灯，17.标准A，18.标准B，19.标准C，20.D55，21.D65，22.D75。
.常量 属性标签_闪光灯, "37385", 公开, PropertyTagExifFlash
.常量 属性标签_实际焦距, "37386", 公开, PropertyTagExifFocalLength
.常量 属性标签_制造商记录, "37500", 公开, PropertyTagExifMakerNote
.常量 属性标签_注释标记, "37510", 公开, PropertyTagExifUserComment
.常量 属性标签_创建时间2, "37520", 公开, PropertyTagExifDTSubsec
.常量 属性标签_原始时间2, "37521", 公开, PropertyTagExifDTOrigSS
.常量 属性标签_数字时间2, "37522", 公开, PropertyTagExifDTDigSS
.常量 属性标签_格式版本, "40960", 公开, PropertyTagExifFPXVer
.常量 属性标签_颜色空间, "40961", 公开, PropertyTagExifColorSpace
.常量 属性标签_有效宽度, "40962", 公开, PropertyTagExifPixXDim
.常量 属性标签_有效高度, "40963", 公开, PropertyTagExifPixYDim
.常量 属性标签_相关音频文件, "40964", 公开, PropertyTagExifRelatedWav
.常量 属性标签_偏移块, "40965", 公开, PropertyTagExifInterop
.常量 属性标签_闪光量, "41483", 公开, PropertyTagExifFlashEnergy
.常量 属性标签_空间频率表, "41484", 公开, PropertyTagExifSpatialFR
.常量 属性标签_焦平面X分辨率, "41486", 公开, PropertyTagExifFocalXRes
.常量 属性标签_焦平面Y分辨率, "41487", 公开, PropertyTagExifFocalYRes
.常量 属性标签_焦平面分辨率单位, "41488", 公开, PropertyTagExifFocalResUnit
.常量 属性标签_主要线路, "41492", 公开, PropertyTagExifSubjectLoc
.常量 属性标签_曝光指数, "41493", 公开, PropertyTagExifExposureIndex
.常量 属性标签_感光元件, "41495", 公开, PropertyTagExifSensingMethod。1.未定义，2.单芯片，3.双芯片，4.三芯片，5.连续色彩，7.三线，8.线性连续色彩
.常量 属性标签_图像源, "41728", 公开, PropertyTagExifFileSource
.常量 属性标签_作品类型, "41729", 公开, PropertyTagExifSceneType
.常量 属性标签_色彩滤镜阵列, "41730", 公开, PropertyTagExifCfaPattern
.常量 , , , 
.常量 旋转翻转_不旋转不翻转, "0", 公开, RotateNoneFlipNone
.常量 旋转翻转_旋转90度不翻转, "1", 公开, Rotate90FlipNone
.常量 旋转翻转_旋转180度不翻转, "2", 公开, Rotate180FlipNone
.常量 旋转翻转_旋转270度不翻转, "3", 公开, Rotate270FlipNone
.常量 旋转翻转_不旋转水平翻转, "4", 公开, RotateNoneFlipX
.常量 旋转翻转_旋转90度水平翻转, "5", 公开, Rotate90FlipX
.常量 旋转翻转_旋转180度水平翻转, "6", 公开, Rotate180FlipX
.常量 旋转翻转_旋转270度水平翻转, "7", 公开, Rotate270FlipX
.常量 旋转翻转_不旋转垂直翻转, "6", 公开, RotateNoneFlipY
.常量 旋转翻转_旋转90度垂直翻转, "7", 公开, Rotate90FlipY
.常量 旋转翻转_旋转180度垂直翻转, "4", 公开, Rotate180FlipY
.常量 旋转翻转_旋转270度垂直翻转, "5", 公开, Rotate270FlipY
.常量 旋转翻转_不旋转水平和垂直翻转, "2", 公开, RotateNoneFlipXY
.常量 旋转翻转_旋转90度水平和垂直翻转, "3", 公开, Rotate90FlipXY
.常量 旋转翻转_旋转180度水平和垂直翻转, "0", 公开, Rotate180FlipXY
.常量 旋转翻转_旋转270度水平和垂直翻转, "1", 公开, Rotate270FlipXY
.常量 , , , 
.常量 编码器_压缩, "“{E09D739D-CCD4-44EE-8EBA-3FBF8BE4FC58}”", 公开, EncoderCompression
.常量 编码器_色深, "“{66087055-AD66-4C7C-9A18-38A2310B8337}”", 公开, EncoderColorDepth
.常量 编码器_扫描方式, "“{3A4E2661-3109-4E56-8536-42C156E7DCFA}”", 公开, EncoderScanMethod
.常量 编码器_版本, "“{24D18C76-814A-41A4-BF53-1C219CCCF797}”", 公开, EncoderVersion
.常量 编码器_呈现方式, "“{6D42C53A-229A-4825-8BB7-5C99E2B9A8B8}”", 公开, EncoderRenderMethod
.常量 编码器_品质, "“{1D5BE4B5-FA4A-452D-9CDD-5DB35105E7EB}”", 公开, EncoderQuality
.常量 编码器_转换, "“{8D0EB2D1-A58E-4EA8-AA14-108074B7B6F9}”", 公开, EncoderTransformation
.常量 编码器_亮度表, "“{EDB33BCE-0266-4A77-B904-27216099E717}”", 公开, EncoderLuminanceTable
.常量 编码器_色度表, "“{F2E455DC-09B3-4316-8260-676ADA32481C}”", 公开, EncoderChrominanceTable
.常量 编码器_保存标志, "“{292266FC-AC40-47BF-8CFC-A85B89A655DE}”", 公开, EncoderSaveFlag
.常量 , , , 
.常量 编码器参数值类型_字节型, "1", 公开, EncoderParameterValueTypeByte
.常量 编码器参数值类型_字符型, "2", 公开, EncoderParameterValueTypeASCII
.常量 编码器参数值类型_短整数型, "3", 公开, EncoderParameterValueTypeShort
.常量 编码器参数值类型_整数型, "4", 公开, EncoderParameterValueTypeLong
.常量 编码器参数值类型_整数对, "5", 公开, EncoderParameterValueTypeRational。为整数型数组，有两个成员。第一个表示最小值，第二个表示最大值。
.常量 编码器参数值类型_整数范围, "6", 公开, EncoderParameterValueTypeLongRange。为整数型数组，有两个成员。第一个表示低32位，第二个表示高32位。
.常量 编码器参数值类型_未定义, "7", 公开, EncoderParameterValueTypeUndefined。
.常量 编码器参数值类型_整数对范围, "8", 公开, EncoderParameterValueTypeRationalRange。
.常量 , , , 
.常量 编码器值_颜色类型CMYK, "0", 公开, EncoderValueColorTypeCMYK。GDI+1.0没有使用。
.常量 编码器值_颜色类型YCCK, "1", 公开, EncoderValueColorTypeYCCK。GDI+1.0没有使用。
.常量 编码器值_压缩LZW, "2", 公开, EncoderValueCompressionLZW。对于TIF图像的LZW压缩方法
.常量 编码器值_压缩CCITT3, "3", 公开, EncoderValueCompressionCCITT3。对于TIF图像的CCITT3压缩方法
.常量 编码器值_压缩CCITT4, "4", 公开, EncoderValueCompressionCCITT4。对于TIF图像的CCITT4压缩方法
.常量 编码器值_压缩RLE, "5", 公开, EncoderValueCompressionRle。对于TIF图像的RLE压缩方法
.常量 编码器值_压缩无, "6", 公开, EncoderValueCompressionNone。对于TIF图像指定无压缩
.常量 编码器值_扫描方式隔行扫描, "7", 公开, EncoderValueScanMethodInterlaced。GDI+1.0没有使用。
.常量 编码器值_扫描方式逐行扫描, "8", 公开, EncoderValueScanMethodNonInterlaced。GDI+1.0没有使用。
.常量 编码器值_版本GIF87, "9", 公开, EncoderValueVersionGif87。GDI+1.0没有使用。
.常量 编码器值_版本GIF89, "10", 公开, EncoderValueVersionGif89。GDI+1.0没有使用。
.常量 编码器值_渲染, "11", 公开, EncoderValueRenderProgressive。GDI+1.0没有使用。
.常量 编码器值_不渲染, "12", 公开, EncoderValueRenderNonProgressive。GDI+1.0没有使用。
.常量 编码器值_旋转90度, "13", 公开, EncoderValueTransformRotate90。对于JPEG图像无损逆时针旋转90度。
.常量 编码器值_旋转180度, "14", 公开, EncoderValueTransformRotate180。对于JPEG图像无损旋转180度
.常量 编码器值_旋转270度, "15", 公开, EncoderValueTransformRotate270。对于JPEG图像无损逆时针旋转270度。
.常量 编码器值_水平翻转, "16", 公开, EncoderValueTransformFlipHorizontal。对于JPEG图像无损水平翻转。
.常量 编码器值_垂直翻转, "17", 公开, EncoderValueTransformFlipVertical。对于JPEG图像无损垂直翻转。
.常量 编码器值_多帧编码, "18", 公开, EncoderValueMultiFrame
.常量 编码器值_最后一帧, "19", 公开, EncoderValueLastFrame
.常量 编码器值_刷新, "20", 公开, EncoderValueFlush。指定的编码对象是被关闭的
.常量 编码器值_帧维面延时, "21", 公开, EncoderValueFrameDimensionTime。GDI+1.0没有使用。
.常量 编码器值_帧维面分辨率, "22", 公开, EncoderValueFrameDimensionResolution。GDI+1.0没有使用。
.常量 编码器值_帧维面页, "23", 公开, EncoderValueFrameDimensionPage。对于TIF图像指定页。
.常量 , , , 
.常量 画刷类型_固定色, "0", 公开, BrushTypeSolidColor
.常量 画刷类型_阴影, "1", 公开, BrushTypeHatchFill
.常量 画刷类型_图像纹理, "2", 公开, BrushTypeTextureFill
.常量 画刷类型_路径渐变, "3", 公开, BrushTypePathGradient
.常量 画刷类型_线性渐变, "4", 公开, BrushTypeLinearGradient
.常量 , , , 
.常量 阴影风格_水平线, "0", 公开, Horizontal 水平线的图案。
.常量 阴影风格_垂直线, "1", 公开, Vertical 垂直线的图案。
.常量 阴影风格_左斜线, "2", 公开, ForwardDiagonal 从左上到右下的对角线的线条图案。
.常量 阴影风格_右斜线, "3", 公开, BackwardDiagonal 从右上到左下的对角线的线条图案。
.常量 阴影风格_十字线, "4", 公开, Cross 指定交叉的水平线和垂直线。
.常量 阴影风格_交叉斜线, "5", 公开, DiagonalCross 指定互相交叉的正向对角线和反向对角线。这些直线是锯齿消除的。
.常量 阴影风格_百分05阴影, "6", 公开, Percent05 指定 5% 阴影。前景色与背景色的比例为 5:100。
.常量 阴影风格_百分10阴影, "7", 公开, Percent10 指定 10% 阴影。前景色与背景色的比例为 10:100。
.常量 阴影风格_百分20阴影, "8", 公开, Percent20 指定 20% 阴影。前景色与背景色的比例为 20:100。
.常量 阴影风格_百分25阴影, "9", 公开, Percent25 指定 25% 阴影。前景色与背景色的比例为 25:100。
.常量 阴影风格_百分30阴影, "10", 公开, Percent30 指定 30% 阴影。前景色与背景色的比例为 30:100。
.常量 阴影风格_百分40阴影, "11", 公开, Percent40 指定 40% 阴影。前景色与背景色的比例为 40:100。
.常量 阴影风格_百分50阴影, "12", 公开, Percent50 指定 50% 阴影。前景色与背景色的比例为 50:100。
.常量 阴影风格_百分60阴影, "13", 公开, Percent60 指定 60% 阴影。前景色与背景色的比例为 60:100。
.常量 阴影风格_百分70阴影, "14", 公开, Percent70 指定 70% 阴影。前景色与背景色的比例为 70:100。
.常量 阴影风格_百分75阴影, "15", 公开, Percent75 指定 75% 阴影。前景色与背景色的比例为 75:100。
.常量 阴影风格_百分80阴影, "16", 公开, Percent80 指定 80% 阴影。前景色与背景色的比例为 80:100。
.常量 阴影风格_百分90阴影, "17", 公开, Percent90 指定 90% 阴影。前景色与背景色的比例为 90:100。
.常量 阴影风格_细向下对角线, "18", 公开, LightDownwardDiagonal
.常量 阴影风格_细向上对角线, "19", 公开, LightUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，但这些直线不是锯齿消除的。
.常量 阴影风格_粗向下对角线, "20", 公开, DarkDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其两边夹角比 ForwardDiagonal 小 50%，宽度是其两倍。此阴影图案不是锯齿消除的。
.常量 阴影风格_粗向上对角线, "21", 公开, DarkUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其两边夹角比 BackwardDiagonal 小 50%，宽度是其两倍，但这些直线不是锯齿消除的。
.常量 阴影风格_宽向下对角线, "22", 公开, WideDownwardDiagonal 指定从顶点到底点向右倾斜的对角线，其间距与阴影样式 ForwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_宽向上对角线, "23", 公开, WideUpwardDiagonal 指定从顶点到底点向左倾斜的对角线，其间距与阴影样式 BackwardDiagonal 相同，宽度是其三倍，但它们不是锯齿消除的。
.常量 阴影风格_细垂直线, "24", 公开, LightVertical 指定垂直线的两边夹角比 Vertical 小 50%。
.常量 阴影风格_细水平线, "25", 公开, LightHorizontal 指定水平线，其两边夹角比 Horizontal 小 50%。
.常量 阴影风格_密垂直线, "26", 公开, NarrowVertical 指定垂直线的两边夹角比阴影样式 Vertical 小 75%（或者比 LightVertical 小 25%）。
.常量 阴影风格_密水平线, "27", 公开, NarrowHorizontal 指定水平线的两边夹角比阴影样式 Horizontal 小 75%（或者比 LightHorizontal 小 25%）。
.常量 阴影风格_粗垂直线, "28", 公开, DarkVertical 指定垂直线的两边夹角比 Vertical 小 50% 并且宽度是其两倍。
.常量 阴影风格_粗水平线, "29", 公开, DarkHorizontal 指定水平线的两边夹角比水平小 50% 并且宽度是 HatchStyleHorizontal 的两倍。
.常量 阴影风格_右斜虚线, "30", 公开, DashedDownwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向右倾斜。
.常量 阴影风格_左斜虚线, "31", 公开, DashedUpwardDiagonal 指定虚线对角线，这些对角线从顶点到底点向左倾斜。
.常量 阴影风格_水平虚线, "32", 公开, DashedHorizontal 指定虚线水平线。
.常量 阴影风格_垂直虚线, "33", 公开, DashedVertical 指定虚线垂直线。
.常量 阴影风格_小五彩纸屑, "34", 公开, SmallConfetti 指定带有五彩纸屑外观的阴影。
.常量 阴影风格_大五彩纸屑, "35", 公开, LargeConfetti 指定具有五彩纸屑外观的阴影，并且它是由比 SmallConfetti 更大的片构成的。
.常量 阴影风格_曲线, "36", 公开, ZigZag 指定由 Z 字形构成的水平线。
.常量 阴影风格_波浪线, "37", 公开, Wave 指定由代字号“~”构成的水平线。
.常量 阴影风格_对角砖块, "38", 公开, DiagonalBrick 指定具有分层砖块外观的阴影，它从顶点到底点向左倾斜。
.常量 阴影风格_水平砖块, "39", 公开, HorizontalBrick 指定具有水平分层砖块外观的阴影。
.常量 阴影风格_编织, "40", 公开, Weave 指定具有织物外观的阴影。
.常量 阴影风格_花格子, "41", 公开, Plaid 指定具有格子花呢材料外观的阴影。
.常量 阴影风格_草皮, "42", 公开, Divot 指定具有草皮层外观的阴影。
.常量 阴影风格_十字点线, "43", 公开, DottedGrid 指定互相交叉的水平线和垂直线，每一直线都是由点构成的。
.常量 阴影风格_交叉点线, "44", 公开, DottedDiamond 指定互相交叉的正向对角线和反向对角线，每一对角线都是由点构成的。
.常量 阴影风格_瓦片, "45", 公开, Shingle 指定带有对角分层鹅卵石外观的阴影，它从顶点到底点向右倾斜。
.常量 阴影风格_网格, "46", 公开, Trellis 指定具有格架外观的阴影。
.常量 阴影风格_球形, "47", 公开, Sphere 指定具有球体彼此相邻放置的外观的阴影。
.常量 阴影风格_小网格, "48", 公开, SmallGrid 指定互相交叉的水平线和垂直线，其两边夹角比阴影样式 Cross 小 50%。
.常量 阴影风格_小棋盘, "49", 公开, SmallCheckerBoard 指定带有棋盘外观的阴影。
.常量 阴影风格_大棋盘, "50", 公开, LargeCheckerBoard 指定具有棋盘外观的阴影，棋盘所具有的方格大小是 SmallCheckerBoard 大小的两倍。
.常量 阴影风格_边线金刚石, "51", 公开, OutlinedDiamond 指定互相交叉的正向对角线和反向对角线，但这些对角线不是锯齿消除的。
.常量 阴影风格_金刚石, "52", 公开, SolidDiamond 指定具有对角放置的棋盘外观的阴影。
.常量 阴影风格_Total, "53", , 
.常量 阴影风格_大网格, "4", 公开, LargeGrid 指定阴影样式 Cross。
.常量 阴影风格_Min, "0", , Min 指定阴影样式 Horizonal。
.常量 阴影风格_Max, "52", , Max 指定阴影样式 SolidDiamond。
.常量 , , , 
.常量 环绕模式_平铺, "0", 公开, Tile 平铺渐变或纹理。
.常量 环绕模式_平铺水平翻转, "1", 公开, TileFlipX 水平反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_平铺垂直翻转, "2", 公开, TileFlipY 垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_平铺水平垂直翻转, "3", 公开, TileFlipXY 水平和垂直反转纹理或渐变，然后平铺该纹理或渐变。
.常量 环绕模式_固定, "4", 公开, Clamp 纹理或渐变没有平铺。
.常量 , , , 
.常量 线性渐变模式_从左到右, "0", 公开, Horizontal 指定从左到右的渐变。
.常量 线性渐变模式_从上到下, "1", 公开, Vertical 指定从上到下的渐变。
.常量 线性渐变模式_从左上到右下, "2", 公开, ForwardDiagonal 指定从左上到右下的渐变。
.常量 线性渐变模式_从右上到左下, "3", 公开, BackwardDiagonal 指定从右上到左下的渐变。
.常量 , , , 
.常量 线帽样式_平线帽, "0", 公开, LineCapFlat
.常量 线帽样式_方线帽, "1", 公开, LineCapSquare
.常量 线帽样式_圆线帽, "2", 公开, LineCapRound
.常量 线帽样式_三角线帽, "3", 公开, LineCapTriangle
.常量 线帽样式_没有锚, "16", 公开, LineCapNoAnchor
.常量 线帽样式_方锚头帽, "17", 公开, LineCapSquareAnchor
.常量 线帽样式_圆锚头帽, "18", 公开, LineCapRoundAnchor
.常量 线帽样式_菱形锚头帽, "19", 公开, LineCapDiamondAnchor
.常量 线帽样式_箭头状锚头帽, "20", 公开, LineCapArrowAnchor
.常量 线帽样式_自定义线帽, "255", 公开, LineCapCustom
.常量 , , , 
.常量 虚线帽样式_方线帽, "0", 公开, DashCapFlat
.常量 虚线帽样式_圆线帽, "2", 公开, DashCapRound
.常量 虚线帽样式_三角线帽, "3", 公开, DashCapTriangle
.常量 , , , 
.常量 连线方式_斜接, "0", 公开, LineJoinMiter
.常量 连线方式_斜角, "1", 公开, LineJoinBevel
.常量 连线方式_圆角, "2", 公开, LineJoinRound
.常量 连线方式_斜接截断, "3", 公开, LineJoinMiterClipped。1.0没有使用
.常量 , , , 
.常量 画笔对齐方式_居中, "0", 公开, 
.常量 画笔对齐方式_内侧, "1", 公开, 
.常量 画笔对齐方式_外侧, "2", 公开, 1.0没有使用
.常量 画笔对齐方式_左侧, "3", 公开, 1.0没有使用
.常量 画笔对齐方式_右侧, "4", 公开, 1.0没有使用
.常量 , , , 
.常量 画笔类型_固色, "0", 公开, 
.常量 画笔类型_阴影, "1", 公开, 
.常量 画笔类型_图像纹理, "2", 公开, 
.常量 画笔类型_路径渐变, "3", 公开, 
.常量 画笔类型_线性渐变, "4", 公开, 
.常量 画笔类型_未知, "-1", 公开, 
.常量 , , , 
.常量 虚线类型_实线, "0", 公开, DashStyleSolid
.常量 虚线类型_划线, "1", 公开, DashStyleDash
.常量 虚线类型_点线, "2", 公开, DashStyleDot
.常量 虚线类型_点划线, "3", 公开, DashStyleDashDot
.常量 虚线类型_双点划线, "4", 公开, DashStyleDashDotDot
.常量 虚线类型_自定义, "5", 公开, DashStyleCustom
.常量 , , , 
.常量 路径点类型_开始, "0", 公开, PathPointTypeStart
.常量 路径点类型_直线, "1", 公开, PathPointTypeLine
.常量 路径点类型_贝塞尔曲线, "3", 公开, PathPointTypeBezier
.常量 路径点类型_类型掩膜, "7", 公开, PathPointTypePathTypeMask
.常量 路径点类型_虚线模式, "16", 公开, PathPointTypePathDashMode。1.0没有使用
.常量 路径点类型_标记, "32", 公开, PathPointTypePathMarker
.常量 路径点类型_关闭子路径, "128", 公开, PathPointTypeCloseSubpath
.常量 , , , 
.常量 路径点类型_贝塞尔曲线2, "2", 公开, PathPointTypeBezier2
.常量 路径点类型_贝塞尔曲线3, "3", 公开, PathPointTypeBezier3
.常量 路径点类型_贝塞尔曲线4, "4", 公开, PathPointTypeBezier4
.常量 路径点类型_贝塞尔曲线5, "5", 公开, PathPointTypeBezier5
.常量 路径点类型_贝塞尔曲线6, "6", 公开, PathPointTypeBezier6
.常量 , , , 
.常量 文本格式标志_方向右到左, "1", 公开, StringFormatFlagsDirectionRightToLeft
.常量 文本格式标志_方向垂直, "2", 公开, StringFormatFlagsDirectionVertical
.常量 文本格式标志_允许部分延伸, "4", 公开, StringFormatFlagsNoFitBlackBox
.常量 文本格式标志_Unicode, "32", 公开, StringFormatFlagsDisplayFormatControl
.常量 文本格式标志_禁止不支持字符, "1024", 公开, StringFormatFlagsNoFontFallback
.常量 文本格式标志_包含结尾空字符, "2048", 公开, StringFormatFlagsMeasureTrailingSpaces
.常量 文本格式标志_不换行, "4096", 公开, StringFormatFlagsNoWrap
.常量 文本格式标志_整行布局, "8192", 公开, StringFormatFlagsLineLimit。若要确保看到的都是整行，请指定此值，并仔细地提供格式化矩形，使其高度至少为一个行高
.常量 文本格式标志_不裁剪, "16384", 公开, StringFormatFlagsNoClip
.常量 , , , 
.常量 文本对齐_靠近, "0", 公开, StringAlignmentNear
.常量 文本对齐_居中, "1", 公开, StringAlignmentCenter 
.常量 文本对齐_远离, "2", 公开, StringAlignmentFar 
.常量 , , , 
.常量 文本修整_无, "0", 公开, StringTrimmingNone。指定不进行任何修整。
.常量 文本修整_字符, "1", 公开, StringTrimmingCharacter。指定将文本修整成最接近的字符。
.常量 文本修整_单词, "2", 公开, StringTrimmingWord。指定将文本修整成最接近的单词。
.常量 文本修整_字符和省略号, "3", 公开, StringTrimmingEllipsisCharacter。指定将文本修整成最接近的字符，并在被修整的行的末尾插入一个省略号。 
.常量 文本修整_单词和省略号, "4", 公开, StringTrimmingEllipsisWord。指定将文本修整成最接近的单词，并在被修整的行的末尾插入一个省略号。
.常量 文本修整_路径和省略号, "5", 公开, StringTrimmingEllipsisPath。中心从被修整的行移除并用省略号替换。这种算法尽可能多地保留了行中的最后一个由斜杠分隔的段。
.常量 , , , 
.常量 热键前缀_无, "0", 公开, HotkeyPrefixNone
.常量 热键前缀_显示, "1", 公开, HotkeyPrefixShow
.常量 热键前缀_隐藏, "2", 公开, HotkeyPrefixHide
.常量 , , , 
.常量 文本数字替换_用户定义, "0", 公开, StringDigitSubstituteUser
.常量 文本数字替换_无, "1", 公开, StringDigitSubstituteNone 
.常量 文本数字替换_国家, "2", 公开, StringDigitSubstituteNational
.常量 文本数字替换_本地, "3", 公开, StringDigitSubstituteTraditional
.常量 , , , 
.常量 扭曲模式_透视, "0", 公开, 
.常量 扭曲模式_双线性, "1", 公开, 
.常量 , , , 
.常量 图像锁定模式_读, "1", 公开, ImageLockModeRead
.常量 图像锁定模式_写, "2", 公开, ImageLockModeWrite
.常量 图像锁定模式_用户分配缓冲区, "4", 公开, ImageLockModeUserInputBuf 
.常量 , , , 
.常量 EMF类型_Emf, "3", 公开, EmfTypeEmfOnly
.常量 EMF类型_EmfPlusOnly, "4", 公开, EmfTypeEmfPlusOnly
.常量 EMF类型_EmfPlusDual, "5", 公开, EmfTypeEmfPlusDual
.常量 , , , 
.常量 图元文件单位_像素, "2", 公开, MetafileFrameUnitPixel
.常量 图元文件单位_点, "3", 公开, MetafileFrameUnitPoint。1/72英寸
.常量 图元文件单位_英寸, "4", 公开, MetafileFrameUnitInch
.常量 图元文件单位_文档, "5", 公开, MetafileFrameUnitDocument。1/300英寸
.常量 图元文件单位_毫米, "6", 公开, MetafileFrameUnitMillimeter
.常量 图元文件单位_GDI, "7", 公开, MetafileFrameUnitGdi。0.01毫米
.常量 , , , 
.常量 图元文件类型_无效, "0", 公开, MetafileTypeInvalid
.常量 图元文件类型_Wmf, "1", 公开, MetafileTypeWmf
.常量 图元文件类型_WmfAldus, "2", 公开, MetafileTypeWmfAldus
.常量 图元文件类型_Emf, "3", 公开, MetafileTypeEmf
.常量 图元文件类型_EmfPlusOnly, "4", 公开, MetafileTypeEmfPlusOnly
.常量 图元文件类型_EmfPlusDual, "5", 公开, MetafileTypeEmfPlusDual
.常量 , , , 
.常量 DEFAULT_GUI_FONT, "17", , 字体_缺省字体
.常量 , , , 
.常量 控制文本标志_查找映射表, "1", 公开, DriverStringOptionsCmapLookup。必须包含此标志，原因暂时不明
.常量 控制文本标志_垂直显示, "2", 公开, DriverStringOptionsVertical
.常量 控制文本标志_预先实现, "4", 公开, DriverStringOptionsRealizedAdvance。只提供第一个字符的坐标。
.常量 控制文本标志_高质量, "8", 公开, DriverStringOptionsLimitSubpixel
.常量 , , , 
.常量 BlurEffectGuid, "“{633C80A4-1843-482b-9EF2-BE2834C5FDD4}”", , 
.常量 SharpenEffectGuid, "“{63CBF3EE-C526-402c-8F71-62C540BF5142}”", , 
.常量 ColorMatrixEffectGuid, "“{718F2615-7933-40e3-A511-5F68FE14DD74}”", , 
.常量 ColorLUTEffectGuid, "“{A7CE72A9-0F7F-40d7-B3CC-D0C02D5C3212}”", , 
.常量 BrightnessContrastEffectGuid, "“{D3A1DBE1-8EC4-4c17-9F4C-EA97AD1C343D}”", , 
.常量 HueSaturationLightnessEffectGuid, "“{8B2DD6C3-EB07-4d87-A5F0-7108E26A9C5F}”", , 
.常量 LevelsEffectGuid, "“{99C354EC-2A31-4f3a-8C34-17A803B33A25}”", , 
.常量 TintEffectGuid, "“{1077AF00-2848-4441-9489-44AD4C2D7A2C}”", , 
.常量 ColorBalanceEffectGuid, "“{537E597D-251E-48da-9664-29CA496B70F8}”", , 
.常量 RedEyeCorrectionEffectGuid, "“{74D29D05-69A4-4266-9549-3CC52836B632}”", , 
.常量 ColorCurveEffectGuid, "“{DD6A0022-58E4-4a67-9D9B-D48EB881A53D}”", , 
.常量 , , , 
.常量 曲线调整_曝光, "0", 公开, AdjustExposure 调整值为：-255到255之间
.常量 曲线调整_密度, "1", 公开, AdjustDensity 调整值为：-255到255之间
.常量 曲线调整_对比度, "2", 公开, AdjustContrast 调整值为：-100到100之间
.常量 曲线调整_高光, "3", 公开, AdjustHighlight 调整值为：-100到100之间
.常量 曲线调整_阴影, "4", 公开, AdjustShadow 调整值为：-100到100之间
.常量 曲线调整_中间色调, "5", 公开, AdjustMidtone 调整值为：-100到100之间
.常量 曲线调整_白色饱和度, "6", 公开, AdjustWhiteSaturation 调整值为：0到255之间
.常量 曲线调整_黑色饱和度, "7", 公开, AdjustBlackSaturation 调整值为：0到255之间
.常量 , , , 
.常量 曲线通道_所有, "0", 公开, CurveChannelAll
.常量 曲线通道_红, "1", 公开, CurveChannelRed
.常量 曲线通道_绿, "2", 公开, CurveChannelGreen
.常量 曲线通道_蓝, "3", 公开, CurveChannelBlue


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 GdiplusStartupInput, , 
    .成员 GdiplusVersion, 整数型, , , 1
    .成员 DebugEventCallback, 整数型, , , 
    .成员 SuppressBackgroundThread, 整数型, , , 
    .成员 SuppressExternalCodecs, 整数型, , , 

数据类型 坐标F, 公开, PointF
    .成员 x, 小数型, , , 
    .成员 y, 小数型, , , 

数据类型 坐标L, 公开, PointL
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 矩形F, 公开, RectF
    .成员 左边, 小数型, , , left
    .成员 顶边, 小数型, , , top
    .成员 宽度, 小数型, , , Width
    .成员 高度, 小数型, , , Height

数据类型 矩形L, 公开, RectL
    .成员 左边, 整数型, , , left
    .成员 顶边, 整数型, , , top
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height

数据类型 矩形16, 公开, Rect16
    .成员 左边, 短整数型, , , left
    .成员 顶边, 短整数型, , , top
    .成员 宽度, 短整数型, , , Width
    .成员 高度, 短整数型, , , Height

数据类型 尺寸F, 公开, SizeF
    .成员 宽度, 小数型, , , Width
    .成员 高度, 小数型, , , Height

数据类型 尺寸L, 公开, SizeL
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height

数据类型 色彩映射表, 公开, ColorMap
    .成员 原颜色, 整数型, , , ARGB颜色
    .成员 新颜色, 整数型, , , ARGB颜色

数据类型 颜色调色板, 公开, ColorPalette
    .成员 标志, 整数型, , , “调色板标志_”开头常量。
    .成员 数量, 整数型, , , 
    .成员 ARGB颜色, 整数型, , "1", 

数据类型 编码器参数, 公开, EncoderParameter
    .成员 编码器Guid, 文本型, , , Guid。“编码器_”开头常量
    .成员 值成员数, 整数型, , , NumberOfValues
    .成员 值类型, 整数型, , , Type。“编码器参数值类型_”开头常量
    .成员 值, 字节集, , , Value。

数据类型 编码器参数集, 公开, EncoderParameters
    .成员 参数数量, 整数型, , , 
    .成员 编码器参数, 编码器参数, , "1", 

数据类型 属性项目, 公开, PropertyItem
    .成员 属性标签, 整数型, , , id“属性标签_”开头常量
    .成员 值大小, 整数型, , , length
    .成员 值类型, 整数型, , , type“属性值类型_”开头常量
    .成员 值, 字节集, , , value

数据类型 图像编解码信息, 公开, ImageCodecInfo
    .成员 Clsid, 文本型, , , 
    .成员 图像格式ID, 文本型, , , FormatID
    .成员 编码器名, 文本型, , , CodecName
    .成员 DLL名, 文本型, , , DllName
    .成员 格式描述, 文本型, , , FormatDescription
    .成员 文件扩展名, 文本型, , , FilenameExtension
    .成员 Mime类型, 文本型, , , MimeType
    .成员 标志, 整数型, , , Flags
    .成员 版本, 整数型, , , Version
    .成员 签名数, 整数型, , , SigCount
    .成员 签名大小, 整数型, , , SigSize
    .成员 签名模式, 字节集, , , SigPattern
    .成员 签名掩码, 字节集, , , SigMask

数据类型 路径数据, 公开, PathData
    .成员 总数, 整数型, , , Count
    .成员 坐标组, 坐标F, , "1", Points
    .成员 类型组, 字节型, , "1", Types

数据类型 PathData, , 
    .成员 Count, 整数型, , , 
    .成员 Points, 整数型, , , 
    .成员 Types, 整数型, , , 

数据类型 位图数据, 公开, BitmapData
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height
    .成员 跨步, 整数型, , , Stride。指定相邻扫描行开始处之间字节偏移量的整数。这通常（但不一定）是以像素格式表示的字节数（例如，2 表示每像素 16 位）乘以位图的宽度。传递给此参数的值必须为 4 的倍数
    .成员 像素格式, 整数型, , , PixelFormat“像素格式_”开头常量。
    .成员 像素数据, 整数型, , , Scan0。指向包含像素数据的字节集指针。
    .成员 保留, 整数型, , , Reserved

数据类型 测试字符范围, 公开, CharacterRange
    .成员 起始位置, 整数型, , , First
    .成员 长度, 整数型, , , Length

数据类型 APM文件头, 公开, APMFileHeader
    .成员 标识, 整数型, , , Key。指示一个可放置图元文件头的存在。此值始终为2596720087
    .成员 句柄, 短整数型, , , hmf。当写入磁盘后，此句柄值为0。
    .成员 范围矩形, 矩形16, , , BoundingBox
    .成员 英寸, 短整数型, , , Inch。每英寸点数。通常为1440。
    .成员 保留, 整数型, , , Reserved
    .成员 校验, 短整数型, , , Checksum。该成员可以检测图元文件是否损坏。

数据类型 EMF文件头, 公开, 
    .成员 类型, 整数型, , , Type。EMR_HEADER
    .成员 大小, 整数型, , , Size
    .成员 边界矩形, 矩形L, , , rclBounds
    .成员 框架矩形, 矩形L, , , rclFrame
    .成员 签名, 整数型, , , dSignature。ENHMETA_SIGNATURE
    .成员 版本, 整数型, , , nVersion
    .成员 字节数, 整数型, , , nBytes
    .成员 记录数, 整数型, , , nRecords
    .成员 句柄数, 短整数型, , , nHandles
    .成员 保留, 短整数型, , , sReserved
    .成员 描述数, 整数型, , , nDescription
    .成员 描述偏移, 整数型, , , offDescription
    .成员 调色板项目数, 整数型, , , nPalEntries
    .成员 设备像素尺寸, 尺寸L, , , szlDevice
    .成员 设备毫米尺寸, 尺寸L, , , szlMillimeters

数据类型 WMF文件头, , METAHEADER
    .成员 类型, 短整数型, , , mtType 。1、内存，2.磁盘文件
    .成员 头大小, 短整数型, , , mtHeaderSize 
    .成员 版本, 短整数型, , , mtVersion 
    .成员 文件大小, 整数型, , , mtSize 
    .成员 对象数, 短整数型, , , mtNoObjects 
    .成员 最大记录数, 整数型, , , mtMaxRecord 
    .成员 保留, 短整数型, , , mtNoParameters 

数据类型 图元文件头, 公开, MetafileHeader
    .成员 类型, 整数型, , , Type“图元文件类型_”开头常量。
    .成员 大小, 整数型, , , Size
    .成员 版本, 整数型, , , Version
    .成员 增强EMF标识, 整数型, , , EmfPlusFlags
    .成员 水平分辨率, 小数型, , , DpiX
    .成员 垂直分辨率, 小数型, , , DpiY
    .成员 左边, 整数型, , , X
    .成员 顶边, 整数型, , , Y
    .成员 宽度, 整数型, , , Width
    .成员 高度, 整数型, , , Height
    .成员 EMF文件头, EMF文件头, , , EmfHeader
    .成员 增强EMF大小, 整数型, , , EmfPlusHeaderSize
    .成员 逻辑水平分辨率, 整数型, , , LogicalDpiX
    .成员 逻辑垂直分辨率, 整数型, , , LogicalDpiY

数据类型 模糊参数, 公开, BlurParams
    .成员 半径, 小数型, , , radius 0到255之间
    .成员 是否扩大边缘, 逻辑型, , , expandEdge 

数据类型 锐化参数, 公开, SharpenParams
    .成员 半径, 小数型, , , radius 0到255之间
    .成员 数量, 小数型, , , amount 0到100之间

数据类型 色调参数, 公开, TintParams
    .成员 色调, 整数型, , , hue -180到180之间
    .成员 数量, 整数型, , , amount -100到100之间

数据类型 红眼修正参数, 公开, RedEyeCorrectionParams 
    .成员 区域数, 整数型, , , numberOfAreas
    .成员 区域, 矩形L, , "1", areas

数据类型 RedEyeCorrectionParams, , RedEyeCorrectionParams 
    .成员 numberOfAreas, 整数型, , , 
    .成员 areas, 整数型, , , 

数据类型 颜色查找表参数, 公开, ColorLUTParams
    .成员 蓝色通道, 字节型, , "256", lutB
    .成员 绿色通道, 字节型, , "256", lutG
    .成员 红色通道, 字节型, , "256", lutR
    .成员 透明通道, 字节型, , "256", lutA

数据类型 亮度对比度参数, 公开, BrightnessContrastParams 
    .成员 亮度, 整数型, , , brightness 0到255之间
    .成员 对比度, 整数型, , , Contrast 0到100之间

数据类型 色相饱和亮度参数, 公开, HueSaturationLightnessParams
    .成员 色相, 整数型, , , hueLevel -180到180之间
    .成员 饱和度, 整数型, , , saturationLevel 0到100之间
    .成员 亮度, 整数型, , , lightnessLevel -100到100之间

数据类型 色彩平衡参数, 公开, ColorBalanceParams
    .成员 青与红, 整数型, , , cyanRed -100到100之间
    .成员 品与绿, 整数型, , , magentaGreen -100到100之间
    .成员 黄与蓝, 整数型, , , yellowBlue -100到100之间

数据类型 色阶参数, 公开, LevelsParams
    .成员 高光, 整数型, , , highlight 
    .成员 中间色调, 整数型, , , midtone 
    .成员 阴影, 整数型, , , shadow 

数据类型 颜色曲线参数, 公开, ColorCurveParams
    .成员 调整类型, 整数型, , , adjustment “曲线调整_”开头常量
    .成员 通道, 整数型, , , channel “曲线通道_”开头常量
    .成员 调整值, 整数型, , , adjustValue 范围值具体见 “调整类型”成员常量的备注

.全局变量 全局_返回码, 整数型, , , 

.DLL命令 GdiplusShutdown, 空白型, "gdiplus.dll", "GdiplusShutdown", , 
    .参数 token, 整数型, , 

.DLL命令 GdiplusStartup, 整数型, "gdiplus.dll", "GdiplusStartup", , 
    .参数 token, 整数型, 传址, 
    .参数 inputbuf, GdiplusStartupInput, , 
    .参数 outputbuf, 整数型, , 

.DLL命令 GdipCreateFromHWND, 整数型, "gdiplus", "GdipCreateFromHWND", , 
    .参数 hwnd, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 将通配符映像为多字节
    .参数 代码页, 整数型, , cp_开头常量
    .参数 标志, 整数型, , 512
    .参数 宽字符文本, 整数型, , 字节集
    .参数 宽字符文本长度, 整数型, , 
    .参数 双字节文本, 文本型, , 字节集
    .参数 双字节文本长度, 整数型, , 
    .参数 默认文本, 整数型, , 
    .参数 使用默认文本, 整数型, , 逻辑

.DLL命令 MultiByteToWideChar, 整数型, "kernel32", "MultiByteToWideChar", , 将多媒体字符串映像为通配字符串
    .参数 代码页, 整数型, , 
    .参数 标志, 整数型, , 
    .参数 双字节文本, 文本型, , 
    .参数 双字节文本长度, 整数型, , 
    .参数 宽字符文本, 字节集, , 
    .参数 宽字符文本长度, 整数型, , 

.DLL命令 GdipLoadImageFromFile, 整数型, "gdiplus", "GdipLoadImageFromFile", , 
    .参数 filename, 字节集, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipLoadImageFromFileICM, 整数型, "gdiplus", "GdipLoadImageFromFileICM", , 
    .参数 filename, 字节集, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipDeleteGraphics, 整数型, "gdiplus", "GdipDeleteGraphics", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipCreateFromHDC, 整数型, "gdiplus", "GdipCreateFromHDC", , 
    .参数 hDC, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipGetDC, 整数型, "gdiplus", "GdipGetDC", , 
    .参数 graphics, 整数型, , 
    .参数 hDC, 整数型, 传址, 

.DLL命令 GdipReleaseDC, 整数型, "gdiplus", "GdipReleaseDC", , 
    .参数 graphics, 整数型, , 
    .参数 hDC, 整数型, , 

.DLL命令 GdipGetImageGraphicsContext, 整数型, "GdiPlus.dll", "GdipGetImageGraphicsContext", , 
    .参数 image, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipGetCompositingMode, 整数型, "gdiplus", "GdipGetCompositingMode", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingMd, 整数型, 传址, 

.DLL命令 GdipSetCompositingMode, 整数型, "gdiplus", "GdipSetCompositingMode", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingMd, 整数型, , 

.DLL命令 GdipGetRenderingOrigin, 整数型, "gdiplus", "GdipGetRenderingOrigin", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, 传址, 
    .参数 y, 整数型, 传址, 

.DLL命令 GdipSetRenderingOrigin, 整数型, "gdiplus", "GdipSetRenderingOrigin", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipGetCompositingQuality, 整数型, "gdiplus", "GdipGetCompositingQuality", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingQlty, 整数型, 传址, 

.DLL命令 GdipSetCompositingQuality, 整数型, "gdiplus", "GdipSetCompositingQuality", , 
    .参数 graphics, 整数型, , 
    .参数 CompositingQlty, 整数型, , 

.DLL命令 GdipSetSmoothingMode, 整数型, "GdiPlus.dll", "GdipSetSmoothingMode", , 
    .参数 graphics, 整数型, , 
    .参数 smoothingMode, 整数型, , 

.DLL命令 GdipGetSmoothingMode, 整数型, "GdiPlus.dll", "GdipGetSmoothingMode", , 
    .参数 graphics, 整数型, , 
    .参数 smoothingMode, 整数型, 传址, 

.DLL命令 GdipSetTextRenderingHint, 整数型, "GdiPlus.dll", "GdipSetTextRenderingHint", , 
    .参数 graphics, 整数型, , 
    .参数 mode, 整数型, , 

.DLL命令 GdipGetTextRenderingHint, 整数型, "GdiPlus.dll", "GdipGetTextRenderingHint", , 
    .参数 graphics, 整数型, , 
    .参数 mode, 整数型, 传址, 

.DLL命令 GdipDisposeImage, 整数型, "gdiplus", "GdipDisposeImage", , 
    .参数 image, 整数型, , 

.DLL命令 GdipDeletePen, 整数型, "GdiPlus.dll", "GdipDeletePen", , 
    .参数 pen, 整数型, , 

.DLL命令 GdipCreatePen1, 整数型, "gdiplus", "GdipCreatePen1", , 
    .参数 color, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 GdipCreatePen2, 整数型, "gdiplus", "GdipCreatePen2", , 
    .参数 Brush, 整数型, , 
    .参数 Width, 小数型, , 
    .参数 unit, 整数型, , 
    .参数 pen, 整数型, 传址, 

.DLL命令 GdipDeleteBrush, 整数型, "GdiPlus.dll", "GdipDeleteBrush", , 
    .参数 brush, 整数型, , 

.DLL命令 GdipCreateSolidFill, 整数型, "GdiPlus.dll", "GdipCreateSolidFill", , 
    .参数 color, 整数型, , 
    .参数 brush, 整数型, 传址, 

.DLL命令 GdipCloneBrush, 整数型, "gdiplus", "GdipCloneBrush", , 
    .参数 Brush, 整数型, , 
    .参数 cloneBrush, 整数型, 传址, 

.DLL命令 GdipDeleteFont, 整数型, "gdiplus", "GdipDeleteFont", , 
    .参数 curFont, 整数型, , 

.DLL命令 GdipCreateFont, 整数型, "gdiplus", "GdipCreateFont", , 
    .参数 fontFamily, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 style, 整数型, , 
    .参数 unit, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipDeleteFontFamily, 整数型, "gdiplus", "GdipDeleteFontFamily", , 
    .参数 fontFamily, 整数型, , 

.DLL命令 GdipCreateFontFamilyFromName, 整数型, "gdiplus", "GdipCreateFontFamilyFromName", , 
    .参数 name, 字节集, , 
    .参数 fontCollection, 整数型, , 
    .参数 fontFamily, 整数型, 传址, 

.DLL命令 GdipDrawString, 整数型, "gdiplus", "GdipDrawString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, 矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipDrawRectangle, 整数型, "GdiPlus.dll", "GdipDrawRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 width, 小数型, , 
    .参数 height, 小数型, , 

.DLL命令 GdipDrawRectangleI, 整数型, "GdiPlus.dll", "GdipDrawRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 width, 整数型, , 
    .参数 height, 整数型, , 

.DLL命令 GdipDeleteRegion, 整数型, "gdiplus", "GdipDeleteRegion", , 
    .参数 region, 整数型, , 

.DLL命令 GdipCreateRegion, 整数型, "gdiplus", "GdipCreateRegion", , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRect, 整数型, "gdiplus", "GdipCreateRegionRect", , 
    .参数 rect, 矩形F, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRectI, 整数型, "gdiplus", "GdipCreateRegionRectI", , 
    .参数 rect, 矩形L, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipDeletePath, 整数型, "gdiplus", "GdipDeletePath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipCreatePath, 整数型, "gdiplus", "GdipCreatePath", , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipDrawLine, 整数型, "gdiplus", "GdipDrawLine", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 

.DLL命令 GdipDrawLineI, 整数型, "gdiplus", "GdipDrawLineI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 

.DLL命令 GdipDrawLines, 整数型, "gdiplus", "GdipDrawLines", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawLinesI, 整数型, "gdiplus", "GdipDrawLinesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawArc, 整数型, "gdiplus", "GdipDrawArc", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawArcI, 整数型, "gdiplus", "GdipDrawArcI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawBezier, 整数型, "gdiplus", "GdipDrawBezier", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 
    .参数 x3, 小数型, , 
    .参数 y3, 小数型, , 
    .参数 x4, 小数型, , 
    .参数 y4, 小数型, , 

.DLL命令 GdipDrawBezierI, 整数型, "gdiplus", "GdipDrawBezierI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 GdipDrawBeziers, 整数型, "gdiplus", "GdipDrawBeziers", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawBeziersI, 整数型, "gdiplus", "GdipDrawBeziersI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectangles, 整数型, "gdiplus", "GdipDrawRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, 矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawRectanglesI, 整数型, "gdiplus", "GdipDrawRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 rects, 矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawEllipse, 整数型, "gdiplus", "GdipDrawEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipDrawEllipseI, 整数型, "gdiplus", "GdipDrawEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipDrawImage, 整数型, "gdiplus", "GdipDrawImage", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 

.DLL命令 GdipDrawImageI, 整数型, "gdiplus", "GdipDrawImageI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipGetDpiX, 整数型, "gdiplus", "GdipGetDpiX", , 
    .参数 graphics, 整数型, , 
    .参数 dpi, 小数型, 传址, 

.DLL命令 GdipGetDpiY, 整数型, "gdiplus", "GdipGetDpiY", , 
    .参数 graphics, 整数型, , 
    .参数 dpi, 小数型, 传址, 

.DLL命令 GdipDrawPie, 整数型, "gdiplus", "GdipDrawPie", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPieI, 整数型, "gdiplus", "GdipDrawPieI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipDrawPolygon, 整数型, "gdiplus", "GdipDrawPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawPolygonI, 整数型, "gdiplus", "GdipDrawPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawPath, 整数型, "gdiplus", "GdipDrawPath", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipDrawCurve3, 整数型, "gdiplus", "GdipDrawCurve3", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve3I, 整数型, "gdiplus", "GdipDrawCurve3I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve2, 整数型, "gdiplus", "GdipDrawCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve2I, 整数型, "gdiplus", "GdipDrawCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawCurve, 整数型, "gdiplus", "GdipDrawCurve", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawCurveI, 整数型, "gdiplus", "GdipDrawCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurve, 整数型, "gdiplus", "GdipDrawClosedCurve", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurveI, 整数型, "gdiplus", "GdipDrawClosedCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawClosedCurve2, 整数型, "gdiplus", "GdipDrawClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipDrawClosedCurve2I, 整数型, "gdiplus", "GdipDrawClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipGraphicsClear, 整数型, "gdiplus", "GdipGraphicsClear", , 
    .参数 graphics, 整数型, , 
    .参数 lColor, 整数型, , 

.DLL命令 GdipFillRectangle, 整数型, "gdiplus", "GdipFillRectangle", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillRectangleI, 整数型, "gdiplus", "GdipFillRectangleI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillRectangles, 整数型, "gdiplus", "GdipFillRectangles", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, 矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillRectanglesI, 整数型, "gdiplus", "GdipFillRectanglesI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 rects, 矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillPolygon, 整数型, "gdiplus", "GdipFillPolygon", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillPolygonI, 整数型, "gdiplus", "GdipFillPolygonI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillEllipse, 整数型, "gdiplus", "GdipFillEllipse", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipFillEllipseI, 整数型, "gdiplus", "GdipFillEllipseI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipFillPie, 整数型, "gdiplus", "GdipFillPie", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillPieI, 整数型, "gdiplus", "GdipFillPieI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipFillPath, 整数型, "gdiplus", "GdipFillPath", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipFillClosedCurve, 整数型, "gdiplus", "GdipFillClosedCurve", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillClosedCurve2, 整数型, "gdiplus", "GdipFillClosedCurve2", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillClosedCurveI, 整数型, "gdiplus", "GdipFillClosedCurveI", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipFillClosedCurve2I, 整数型, "gdiplus", "GdipFillClosedCurve2I", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 
    .参数 FillMd, 整数型, , 

.DLL命令 GdipFillRegion, 整数型, "gdiplus", "GdipFillRegion", , 
    .参数 graphics, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 region, 整数型, , 

.DLL命令 GdipDrawImagePoints, 整数型, "gdiplus", "GdipDrawImagePoints", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstpoints, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawImagePointsI, 整数型, "gdiplus", "GdipDrawImagePointsI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstpoints, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipDrawImagePointRect, 整数型, "gdiplus", "GdipDrawImagePointRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 

.DLL命令 GdipDrawImagePointRectI, 整数型, "gdiplus", "GdipDrawImagePointRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 

.DLL命令 GdipDrawImageRectRect, 整数型, "gdiplus", "GdipDrawImageRectRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstX, 小数型, , 
    .参数 dstY, 小数型, , 
    .参数 dstWidth, 小数型, , 
    .参数 dstHeight, 小数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipDrawImageRectRectI, 整数型, "gdiplus", "GdipDrawImageRectRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 dstX, 整数型, , 
    .参数 dstY, 整数型, , 
    .参数 dstWidth, 整数型, , 
    .参数 dstHeight, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipSetClipGraphics, 整数型, "gdiplus", "GdipSetClipGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 srcgraphics, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipPath, 整数型, "gdiplus", "GdipSetClipPath", , 
    .参数 graphics, 整数型, , 
    .参数 path, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRect, 整数型, "gdiplus", "GdipSetClipRect", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRectI, 整数型, "gdiplus", "GdipSetClipRectI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipRegion, 整数型, "gdiplus", "GdipSetClipRegion", , 
    .参数 graphics, 整数型, , 
    .参数 region, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipSetClipHrgn, 整数型, "gdiplus", "GdipSetClipHrgn", , 
    .参数 graphics, 整数型, , 
    .参数 hRgn, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipResetClip, 整数型, "gdiplus", "GdipResetClip", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipTranslateClip, 整数型, "gdiplus", "GdipTranslateClip", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipTranslateClipI, 整数型, "gdiplus", "GdipTranslateClipI", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 

.DLL命令 GdipGetClip, 整数型, "gdiplus", "GdipGetClip", , 
    .参数 graphics, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipGetClipBounds, 整数型, "gdiplus", "GdipGetClipBounds", , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形F, 传址, 

.DLL命令 GdipGetClipBoundsI, 整数型, "gdiplus", "GdipGetClipBoundsI", , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形L, 传址, 

.DLL命令 GdipIsClipEmpty, 整数型, "gdiplus", "GdipIsClipEmpty", , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipGetVisibleClipBounds, 整数型, "gdiplus", "GdipGetVisibleClipBounds", , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形F, 传址, 

.DLL命令 GdipGetVisibleClipBoundsI, 整数型, "gdiplus", "GdipGetVisibleClipBoundsI", , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形L, 传址, 

.DLL命令 GdipIsVisibleClipEmpty, 整数型, "gdiplus", "GdipIsVisibleClipEmpty", , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePoint, 整数型, "gdiplus", "GdipIsVisiblePoint", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePointI, 整数型, "gdiplus", "GdipIsVisiblePointI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRect, 整数型, "gdiplus", "GdipIsVisibleRect", , 
    .参数 graphics, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRectI, 整数型, "gdiplus", "GdipIsVisibleRectI", , 
    .参数 graphics, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipDrawImagePointsRect, 整数型, "gdiplus", "GdipDrawImagePointsRect", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipDrawImagePointsRectI, 整数型, "gdiplus", "GdipDrawImagePointsRectI", , 
    .参数 graphics, 整数型, , 
    .参数 Image, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 整数型, , 
    .参数 srcy, 整数型, , 
    .参数 srcwidth, 整数型, , 
    .参数 srcheight, 整数型, , 
    .参数 srcUnit, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipCreateImageAttributes, 整数型, "gdiplus", "GdipCreateImageAttributes", , 
    .参数 imageattr, 整数型, 传址, 

.DLL命令 GdipDisposeImageAttributes, 整数型, "gdiplus", "GdipDisposeImageAttributes", , 
    .参数 imageattr, 整数型, , 

.DLL命令 GdipCloneImageAttributes, 整数型, "gdiplus", "GdipCloneImageAttributes", , 
    .参数 imageattr, 整数型, , 
    .参数 cloneImageattr, 整数型, 传址, 

.DLL命令 GdipSetImageAttributesToIdentity, 整数型, "gdiplus", "GdipSetImageAttributesToIdentity", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipResetImageAttributes, 整数型, "gdiplus", "GdipResetImageAttributes", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipSetImageAttributesThreshold, 整数型, "gdiplus", "GdipSetImageAttributesThreshold", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 threshold, 小数型, , 

.DLL命令 GdipSetImageAttributesNoOp, 整数型, "gdiplus", "GdipSetImageAttributesNoOp", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 

.DLL命令 GdipSetImageAttributesGamma, 整数型, "gdiplus", "GdipSetImageAttributesGamma", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 gamma, 小数型, , 

.DLL命令 GdipSetImageAttributesColorKeys, 整数型, "gdiplus", "GdipSetImageAttributesColorKeys", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colorLow, 整数型, , 
    .参数 colorHigh, 整数型, , 

.DLL命令 GdipSetImageAttributesOutputChannel, 整数型, "gdiplus", "GdipSetImageAttributesOutputChannel", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjstType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 channelFlags, 整数型, , 

.DLL命令 GdipSetImageAttributesOutputChannelColorProfile, 整数型, "gdiplus", "GdipSetImageAttributesOutputChannelColorProfile", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colorProfileFilename, 字节集, , 

.DLL命令 GdipSetImageAttributesRemapTable, 整数型, "gdiplus", "GdipSetImageAttributesRemapTable", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 mapSize, 整数型, , 
    .参数 map, 色彩映射表, 数组, 

.DLL命令 GdipSetImageAttributesWrapMode, 整数型, "gdiplus", "GdipSetImageAttributesWrapMode", , 
    .参数 imageattr, 整数型, , 
    .参数 wrap, 整数型, , 
    .参数 argb, 整数型, , 
    .参数 bClamp, 整数型, , 

.DLL命令 GdipGetImageAttributesAdjustedPalette, 整数型, "gdiplus", "GdipGetImageAttributesAdjustedPalette", , 
    .参数 imageattr, 整数型, , 
    .参数 colorPal, 颜色调色板, , 
    .参数 ClrAdjType, 整数型, , 

.DLL命令 GdipCreateMatrix, 整数型, "gdiplus", "GdipCreateMatrix", , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipDeleteMatrix, 整数型, "gdiplus", "GdipDeleteMatrix", , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreateMatrix2, 整数型, "gdiplus", "GdipCreateMatrix2", , 
    .参数 m11, 小数型, , 
    .参数 m12, 小数型, , 
    .参数 m21, 小数型, , 
    .参数 m22, 小数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCreateMatrix3, 整数型, "gdiplus", "GdipCreateMatrix3", , 
    .参数 rect, 矩形F, , 
    .参数 dstplg, 坐标F, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCreateMatrix3I, 整数型, "gdiplus", "GdipCreateMatrix3I", , 
    .参数 rect, 矩形L, , 
    .参数 dstplg, 坐标L, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipCloneMatrix, 整数型, "gdiplus", "GdipCloneMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 cloneMatrix, 整数型, 传址, 

.DLL命令 GdipSetMatrixElements, 整数型, "gdiplus", "GdipSetMatrixElements", , 
    .参数 matrix, 整数型, , 
    .参数 m11, 小数型, , 
    .参数 m12, 小数型, , 
    .参数 m21, 小数型, , 
    .参数 m22, 小数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipGetMatrixElements, 整数型, "gdiplus", "GdipGetMatrixElements", , 
    .参数 matrix, 整数型, , 
    .参数 matrixOut, 小数型, 数组, 

.DLL命令 GdipSetWorldTransform, 整数型, "GdiPlus.dll", "GdipSetWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyMatrix, 整数型, "GdiPlus.dll", "GdipMultiplyMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 matrix2, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateMatrix, 整数型, "gdiplus", "GdipTranslateMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 offsetX, 小数型, , 
    .参数 offsetY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateMatrix, 整数型, "gdiplus", "GdipRotateMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleMatrix, 整数型, "gdiplus", "GdipScaleMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 scaleX, 小数型, , 
    .参数 scaleY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipInvertMatrix, 整数型, "GdiPlus.dll", "GdipInvertMatrix", , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipShearMatrix, 整数型, "gdiplus", "GdipShearMatrix", , 
    .参数 matrix, 整数型, , 
    .参数 shearX, 小数型, , 
    .参数 shearY, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTransformMatrixPoints, 整数型, "gdiplus", "GdipTransformMatrixPoints", , 
    .参数 matrix, 整数型, , 
    .参数 pts, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipVectorTransformMatrixPoints, 整数型, "gdiplus", "GdipVectorTransformMatrixPoints", , 
    .参数 matrix, 整数型, , 
    .参数 pts, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipIsMatrixEqual, 整数型, "gdiplus", "GdipIsMatrixEqual", , 
    .参数 matrix, 整数型, , 
    .参数 matrix2, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsMatrixIdentity, 整数型, "gdiplus", "GdipIsMatrixIdentity", , 
    .参数 matrix, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsMatrixInvertible, 整数型, "gdiplus", "GdipIsMatrixInvertible", , 
    .参数 matrix, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipSetImageAttributesColorMatrix, 整数型, "gdiplus", "GdipSetImageAttributesColorMatrix", , 
    .参数 imageattr, 整数型, , 
    .参数 ClrAdjType, 整数型, , 
    .参数 enableFlag, 整数型, , 
    .参数 colourMatrix, 小数型, 数组, 
    .参数 grayMatrix, 小数型, 数组, 
    .参数 flags, 整数型, , 

.DLL命令 GdipGetWorldTransform, 整数型, "gdiplus", "GdipGetWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipResetWorldTransform, 整数型, "gdiplus", "GdipResetWorldTransform", , 
    .参数 graphics, 整数型, , 

.DLL命令 GdipMultiplyWorldTransform, 整数型, "gdiplus", "GdipMultiplyWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateWorldTransform, 整数型, "gdiplus", "GdipRotateWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleWorldTransform, 整数型, "gdiplus", "GdipScaleWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateWorldTransform, 整数型, "gdiplus", "GdipTranslateWorldTransform", , 
    .参数 graphics, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPageUnit, 整数型, "gdiplus", "GdipGetPageUnit", , 
    .参数 graphics, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipSetPageUnit, 整数型, "gdiplus", "GdipSetPageUnit", , 
    .参数 graphics, 整数型, , 
    .参数 unit, 整数型, , 

.DLL命令 GdipGetPageScale, 整数型, "gdiplus", "GdipGetPageScale", , 
    .参数 graphics, 整数型, , 
    .参数 sScale, 小数型, 传址, 

.DLL命令 GdipSetPageScale, 整数型, "gdiplus", "GdipSetPageScale", , 
    .参数 graphics, 整数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipGetNearestColor, 整数型, "gdiplus", "GdipGetNearestColor", , 
    .参数 graphics, 整数型, , 
    .参数 argb, 整数型, 传址, 

.DLL命令 GdipRestoreGraphics, 整数型, "gdiplus", "GdipRestoreGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, , 

.DLL命令 GdipSaveGraphics, 整数型, "gdiplus", "GdipSaveGraphics", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainer, 整数型, "gdiplus", "GdipBeginContainer", , 
    .参数 graphics, 整数型, , 
    .参数 dstRect, 矩形F, , 
    .参数 srcRect, 矩形F, , 
    .参数 unit, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainerI, 整数型, "gdiplus", "GdipBeginContainerI", , 
    .参数 graphics, 整数型, , 
    .参数 dstRect, 矩形L, , 
    .参数 srcRect, 矩形L, , 
    .参数 unit, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipBeginContainer2, 整数型, "gdiplus", "GdipBeginContainer2", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, 传址, 

.DLL命令 GdipEndContainer, 整数型, "gdiplus", "GdipEndContainer", , 
    .参数 graphics, 整数型, , 
    .参数 state, 整数型, , 

.DLL命令 CreateStreamOnHGlobal, 空白型, "ole32.dll", "CreateStreamOnHGlobal", , 
    .参数 hGlobal, 整数型, , 
    .参数 fDeleteOnRelease, 整数型, , 
    .参数 ppstm, 整数型, 传址, 

.DLL命令 GlobalAlloc, 整数型, "kernel32", "GlobalAlloc", , 在堆中分配内存  成功返回内存块句柄，失败返回零
    .参数 wFlags, 整数型, , GMEM_开头常量。如指定了 GMEM_FIXED那么无须调用GlobalLock/GlobalUnlock 操作
    .参数 dwBytes, 整数型, , 要分配的字符数

.DLL命令 GlobalFree, 整数型, "kernel32", "GlobalFree", , 释放全局内存块
    .参数 hMem, 整数型, , 

.DLL命令 GlobalLock, 整数型, "kernel32", "GlobalLock", , 锁定内存对象并返回一个指针  成功返回内存指针，失败返回null。GetLastError来获得出错信息
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "kernel32", "GlobalUnlock", , 开锁全局内存块  非零值，指定的内存对象仍处于被锁定状态。0，函数执行出错，可以用GetLastError来获得出错信息，如果返回NO_ERROR，则表示内存对象已经解锁了
    .参数 hMem, 整数型, , 

.DLL命令 WriteProcessMemory, 整数型, "kernel32", "WriteProcessMemory", , 在指定进程中写内存  非0成功
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 整数型, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, , 0

.DLL命令 GetCurrentProcess, 整数型, "kernel32", "GetCurrentProcess", , 获取当前进程的一个伪句柄  当前进程的伪句柄

.DLL命令 lstrcpyn_字节集, 整数型, "kernel32", "lstrcpynA", , 取内存变量地址
    .参数 lpString1, 字节集, 传址, 传址
    .参数 lpString2, 字节集, 传址, 
    .参数 leng, 整数型, , 

.DLL命令 RtlMoveMemory2, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_points, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 坐标F, 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_bytes, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节型, 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_int2bin, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节集, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_int, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, 传址, 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_矩形L2int, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, , 
    .参数 Source, 矩形L, 数组, 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_int2矩形L, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 矩形L, 数组, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_bin2intary, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 整数型, 数组, 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_intary2bin, 空白型, "kernel32.dll", "RtlMoveMemory", , 拷贝内存
    .参数 Destination, 字节集, , 
    .参数 Source, 整数型, 数组, 
    .参数 Length, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 字节集, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GlobalSize, 整数型, "kernel32", "GlobalSize", , 返回全局内存块大小
    .参数 hMem, 整数型, , 

.DLL命令 GetHGlobalFromStream, 空白型, "ole32.dll", "GetHGlobalFromStream", , 
    .参数 pstm, 整数型, , 
    .参数 phglobal, 整数型, 传址, 

.DLL命令 GdipLoadImageFromStream, 整数型, "GdiPlus.dll", "GdipLoadImageFromStream", , 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipLoadImageFromStreamICM, 整数型, "GdiPlus.dll", "GdipLoadImageFromStreamICM", , 
    .参数 stream, 整数型, , 
    .参数 image, 整数型, 传址, 

.DLL命令 GdipCloneImage, 整数型, "gdiplus", "GdipCloneImage", , 
    .参数 Image, 整数型, , 
    .参数 cloneImage, 整数型, 传址, 

.DLL命令 GdipSaveImageToFile, 整数型, "gdiplus", "GdipSaveImageToFile", , 
    .参数 Image, 整数型, , 
    .参数 filename, 字节集, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipSaveImageToStream, 整数型, "GdiPlus.dll", "GdipSaveImageToStream", , 
    .参数 image, 整数型, , 
    .参数 stream, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipGetImageRawFormat, 整数型, "gdiplus", "GdipGetImageRawFormat", , 
    .参数 Image, 整数型, , 
    .参数 format, 字节集, 传址, 

.DLL命令 CLSIDFromString, 空白型, "ole32.dll", "CLSIDFromString", , 
    .参数 lpsz, 字节集, , 
    .参数 pclsid, 字节集, 传址, 

.DLL命令 GdipGetImageBounds, 整数型, "gdiplus", "GdipGetImageBounds", , 
    .参数 Image, 整数型, , 
    .参数 srcRect, 矩形F, 传址, 
    .参数 srcUnit, 整数型, 传址, 

.DLL命令 GdipGetImageDimension, 整数型, "gdiplus", "GdipGetImageDimension", , 
    .参数 Image, 整数型, , 
    .参数 Width, 小数型, 传址, 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetImageType, 整数型, "gdiplus", "GdipGetImageType", , 
    .参数 Image, 整数型, , 
    .参数 itype, 整数型, 传址, 

.DLL命令 GdipGetImageHeight, 整数型, "gdiplus", "GdipGetImageHeight", , 
    .参数 Image, 整数型, , 
    .参数 Height, 整数型, 传址, 

.DLL命令 GdipGetImageWidth, 整数型, "gdiplus", "GdipGetImageWidth", , 
    .参数 Image, 整数型, , 
    .参数 Width, 整数型, 传址, 

.DLL命令 GdipGetImageHorizontalResolution, 整数型, "gdiplus", "GdipGetImageHorizontalResolution", , 
    .参数 Image, 整数型, , 
    .参数 resolution, 小数型, 传址, 

.DLL命令 GdipGetImageVerticalResolution, 整数型, "gdiplus", "GdipGetImageVerticalResolution", , 
    .参数 Image, 整数型, , 
    .参数 resolution, 小数型, 传址, 

.DLL命令 GdipGetImageFlags, 整数型, "gdiplus", "GdipGetImageFlags", , 
    .参数 Image, 整数型, , 
    .参数 flags, 整数型, 传址, 

.DLL命令 GdipGetImagePixelFormat, 整数型, "gdiplus", "GdipGetImagePixelFormat", , 
    .参数 Image, 整数型, , 
    .参数 PixelFormat, 整数型, 传址, 

.DLL命令 GdipGetImageThumbnail, 整数型, "gdiplus", "GdipGetImageThumbnail", , 
    .参数 Image, 整数型, , 
    .参数 thumbWidth, 整数型, , 
    .参数 thumbHeight, 整数型, , 
    .参数 thumbImage, 整数型, 传址, 
    .参数 callback, 整数型, , 
    .参数 callbackData, 整数型, , 

.DLL命令 GdipGetEncoderParameterList, 整数型, "gdiplus", "GdipGetEncoderParameterList", , 
    .参数 Image, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 size, 整数型, , 
    .参数 buffer, 字节集, , 

.DLL命令 GdipGetEncoderParameterListSize, 整数型, "gdiplus", "GdipGetEncoderParameterListSize", , 
    .参数 Image, 整数型, , 
    .参数 clsidEncoder, 字节集, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipImageGetFrameDimensionsCount, 整数型, "gdiplus", "GdipImageGetFrameDimensionsCount", , 
    .参数 Image, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipImageGetFrameDimensionsList, 整数型, "gdiplus", "GdipImageGetFrameDimensionsList", , 
    .参数 Image, 整数型, , 
    .参数 dimensionIDs, 字节集, , 
    .参数 count, 整数型, , 

.DLL命令 GdipImageGetFrameCount, 整数型, "gdiplus", "GdipImageGetFrameCount", , 
    .参数 Image, 整数型, , 
    .参数 dimensionID, 字节集, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipImageSelectActiveFrame, 整数型, "gdiplus", "GdipImageSelectActiveFrame", , 
    .参数 Image, 整数型, , 
    .参数 dimensionID, 字节集, , 
    .参数 frameIndex, 整数型, , 

.DLL命令 GdipGetPropertyItem, 整数型, "gdiplus", "GdipGetPropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 
    .参数 propSize, 整数型, , 
    .参数 buffer, 字节集, , 

.DLL命令 GdipGetPropertyItemSize, 整数型, "gdiplus", "GdipGetPropertyItemSize", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipGetPropertyCount, 整数型, "gdiplus", "GdipGetPropertyCount", , 
    .参数 Image, 整数型, , 
    .参数 numOfProperty, 整数型, 传址, 

.DLL命令 GdipGetPropertyIdList, 整数型, "gdiplus", "GdipGetPropertyIdList", , 
    .参数 Image, 整数型, , 
    .参数 numOfProperty, 整数型, , 
    .参数 list, 整数型, 数组, 

.DLL命令 GdipImageRotateFlip, 整数型, "gdiplus", "GdipImageRotateFlip", , 
    .参数 Image, 整数型, , 
    .参数 rfType, 整数型, , 

.DLL命令 GdipGetImagePalette, 整数型, "gdiplus", "GdipGetImagePalette", , 
    .参数 Image, 整数型, , 
    .参数 palette, 字节集, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetImagePaletteSize, 整数型, "gdiplus", "GdipGetImagePaletteSize", , 
    .参数 Image, 整数型, , 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipSetImagePalette, 整数型, "gdiplus", "GdipSetImagePalette", , 
    .参数 Image, 整数型, , 
    .参数 palette, 颜色调色板, , 

.DLL命令 GdipRemovePropertyItem, 整数型, "gdiplus", "GdipRemovePropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 propId, 整数型, , 

.DLL命令 GdipSetPropertyItem, 整数型, "gdiplus", "GdipSetPropertyItem", , 
    .参数 Image, 整数型, , 
    .参数 Item, 属性项目, , 

.DLL命令 GdipSaveAdd, 整数型, "gdiplus", "GdipSaveAdd", , 
    .参数 Image, 整数型, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipSaveAddImage, 整数型, "gdiplus", "GdipSaveAddImage", , 
    .参数 Image, 整数型, , 
    .参数 newImage, 整数型, , 
    .参数 encoderParams, 整数型, , 

.DLL命令 GdipGetImageEncoders, 整数型, "gdiplus.dll", "GdipGetImageEncoders", , 
    .参数 numEncoders, 整数型, , 
    .参数 size, 整数型, , 
    .参数 encoders, 字节集, , 

.DLL命令 GdipGetImageEncodersSize, 整数型, "gdiplus.dll", "GdipGetImageEncodersSize", , 
    .参数 numEncoders, 整数型, 传址, 
    .参数 size, 整数型, 传址, 

.DLL命令 StringFromGUID2, 整数型, "ole32.dll", "StringFromGUID2", , 
    .参数 rguid, 字节集, , 
    .参数 lpsz, 字节集, , 
    .参数 cchMax, 整数型, , 长度+1

.DLL命令 GdipGetBrushType, 整数型, "gdiplus", "GdipGetBrushType", , 
    .参数 Brush, 整数型, , 
    .参数 brshType, 整数型, 传址, 

.DLL命令 GdipSetSolidFillColor, 整数型, "GdiPlus.dll", "GdipSetSolidFillColor", , 
    .参数 brush, 整数型, , 
    .参数 color, 整数型, , 

.DLL命令 GdipGetSolidFillColor, 整数型, "GdiPlus.dll", "GdipGetSolidFillColor", , 
    .参数 brush, 整数型, , 
    .参数 color, 整数型, 传址, 

.DLL命令 GdipCreateHatchBrush, 整数型, "gdiplus", "GdipCreateHatchBrush", , 
    .参数 style, 整数型, , 
    .参数 forecolr, 整数型, , 
    .参数 backcolr, 整数型, , 
    .参数 Brush, 整数型, 传址, 

.DLL命令 GdipGetHatchStyle, 整数型, "gdiplus", "GdipGetHatchStyle", , 
    .参数 Brush, 整数型, , 
    .参数 style, 整数型, 传址, 

.DLL命令 GdipGetHatchBackgroundColor, 整数型, "gdiplus", "GdipGetHatchBackgroundColor", , 
    .参数 Brush, 整数型, , 
    .参数 backcolr, 整数型, 传址, 

.DLL命令 GdipGetHatchForegroundColor, 整数型, "gdiplus", "GdipGetHatchForegroundColor", , 
    .参数 Brush, 整数型, , 
    .参数 forecolr, 整数型, 传址, 

.DLL命令 GdipCreateTexture, 整数型, "gdiplus", "GdipCreateTexture", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTexture2, 整数型, "gdiplus", "GdipCreateTexture2", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTexture2I, 整数型, "gdiplus", "GdipCreateTexture2I", , 
    .参数 Image, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTextureIA, 整数型, "gdiplus", "GdipCreateTextureIA", , 
    .参数 Image, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipCreateTextureIAI, 整数型, "gdiplus", "GdipCreateTextureIAI", , 
    .参数 Image, 整数型, , 
    .参数 imageAttributes, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 texture, 整数型, 传址, 

.DLL命令 GdipGetTextureTransform, 整数型, "gdiplus", "GdipGetTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetTextureTransform, 整数型, "gdiplus", "GdipSetTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipResetTextureTransform, 整数型, "gdiplus", "GdipResetTextureTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipMultiplyTextureTransform, 整数型, "gdiplus", "GdipMultiplyTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateTextureTransform, 整数型, "gdiplus", "GdipTranslateTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleTextureTransform, 整数型, "gdiplus", "GdipScaleTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipRotateTextureTransform, 整数型, "gdiplus", "GdipRotateTextureTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetTextureImage, 整数型, "gdiplus", "GdipGetTextureImage", , 
    .参数 Brush, 整数型, , 
    .参数 Image, 整数型, 传址, 

.DLL命令 GdipGetTextureWrapMode, 整数型, "gdiplus", "GdipGetTextureWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetTextureWrapMode, 整数型, "gdiplus", "GdipSetTextureWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipCreateLineBrush, 整数型, "gdiplus", "GdipCreateLineBrush", , 
    .参数 Point1, 坐标F, , 
    .参数 Point2, 坐标F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushI, 整数型, "gdiplus", "GdipCreateLineBrushI", , 
    .参数 Point1, 坐标L, , 
    .参数 Point2, 坐标L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRect, 整数型, "gdiplus", "GdipCreateLineBrushFromRect", , 
    .参数 rect, 矩形F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 Mode, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectI, 整数型, "gdiplus", "GdipCreateLineBrushFromRectI", , 
    .参数 rect, 矩形L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 Mode, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectWithAngle, 整数型, "gdiplus", "GdipCreateLineBrushFromRectWithAngle", , 
    .参数 rect, 矩形F, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 isAngleScalable, 逻辑型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipCreateLineBrushFromRectWithAngleI, 整数型, "gdiplus", "GdipCreateLineBrushFromRectWithAngleI", , 
    .参数 rect, 矩形L, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 isAngleScalable, 逻辑型, , 
    .参数 WrapMd, 整数型, , 
    .参数 lineGradient, 整数型, 传址, 

.DLL命令 GdipGetLineColors, 整数型, "gdiplus", "GdipGetLineColors", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, 数组, 

.DLL命令 GdipSetLineColors, 整数型, "gdiplus", "GdipSetLineColors", , 
    .参数 Brush, 整数型, , 
    .参数 color1, 整数型, , 
    .参数 color2, 整数型, , 

.DLL命令 GdipGetLineRect, 整数型, "gdiplus", "GdipGetLineRect", , 
    .参数 Brush, 整数型, , 
    .参数 rect, 矩形F, 传址, 

.DLL命令 GdipGetLineRectI, 整数型, "gdiplus", "GdipGetLineRectI", , 
    .参数 Brush, 整数型, , 
    .参数 rect, 矩形L, 传址, 

.DLL命令 GdipGetLineGammaCorrection, 整数型, "gdiplus", "GdipGetLineGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, 传址, 

.DLL命令 GdipSetLineGammaCorrection, 整数型, "gdiplus", "GdipSetLineGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, , 

.DLL命令 GdipGetLineBlend, 整数型, "gdiplus", "GdipGetLineBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLineBlendCount, 整数型, "gdiplus", "GdipGetLineBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetLineBlend, 整数型, "gdiplus", "GdipSetLineBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLinePresetBlend, 整数型, "gdiplus", "GdipGetLinePresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetLinePresetBlendCount, 整数型, "gdiplus", "GdipGetLinePresetBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetLinePresetBlend, 整数型, "gdiplus", "GdipSetLinePresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipSetLineLinearBlend, 整数型, "gdiplus", "GdipSetLineLinearBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 theScale, 小数型, , 

.DLL命令 GdipSetLineSigmaBlend, 整数型, "gdiplus", "GdipSetLineSigmaBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 theScale, 小数型, , 

.DLL命令 GdipGetLineWrapMode, 整数型, "gdiplus", "GdipGetLineWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetLineWrapMode, 整数型, "gdiplus", "GdipSetLineWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipGetLineTransform, 整数型, "gdiplus", "GdipGetLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetLineTransform, 整数型, "gdiplus", "GdipSetLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyLineTransform, 整数型, "gdiplus", "GdipMultiplyLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetLineTransform, 整数型, "gdiplus", "GdipResetLineTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipRotateLineTransform, 整数型, "gdiplus", "GdipRotateLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScaleLineTransform, 整数型, "gdiplus", "GdipScaleLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslateLineTransform, 整数型, "gdiplus", "GdipTranslateLineTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipCreatePathGradient, 整数型, "gdiplus", "GdipCreatePathGradient", , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipCreatePathGradientI, 整数型, "gdiplus", "GdipCreatePathGradientI", , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 WrapMd, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipCreatePathGradientFromPath, 整数型, "gdiplus", "GdipCreatePathGradientFromPath", , 
    .参数 path, 整数型, , 
    .参数 polyGradient, 整数型, 传址, 

.DLL命令 GdipGetPathGradientCenterColor, 整数型, "gdiplus", "GdipGetPathGradientCenterColor", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, 传址, 

.DLL命令 GdipSetPathGradientCenterColor, 整数型, "gdiplus", "GdipSetPathGradientCenterColor", , 
    .参数 Brush, 整数型, , 
    .参数 lColors, 整数型, , 

.DLL命令 GdipGetPathGradientSurroundColorsWithCount, 整数型, "gdiplus", "GdipGetPathGradientSurroundColorsWithCount", , 
    .参数 Brush, 整数型, , 
    .参数 argb, 整数型, 数组, 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientSurroundColorsWithCount, 整数型, "gdiplus", "GdipSetPathGradientSurroundColorsWithCount", , 
    .参数 Brush, 整数型, , 
    .参数 argb, 整数型, 数组, 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientSurroundColorCount, 整数型, "gdiplus", "GdipGetPathGradientSurroundColorCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientPath, 整数型, "gdiplus", "GdipGetPathGradientPath", , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipSetPathGradientPath, 整数型, "gdiplus", "GdipSetPathGradientPath", , 
    .参数 Brush, 整数型, , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathGradientCenterPoint, 整数型, "gdiplus", "GdipGetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标F, 传址, 

.DLL命令 GdipGetPathGradientCenterPointI, 整数型, "gdiplus", "GdipGetPathGradientCenterPointI", , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标L, 传址, 

.DLL命令 GdipSetPathGradientCenterPoint, 整数型, "gdiplus", "GdipSetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标F, , 

.DLL命令 GdipSetPathGradientCenterPointI, 整数型, "gdiplus", "GdipSetPathGradientCenterPoint", , 
    .参数 Brush, 整数型, , 
    .参数 Points, 坐标L, , 

.DLL命令 GdipGetPathGradientRect, 整数型, "gdiplus", "GdipGetPathGradientRect", , 
    .参数 Brush, 整数型, , 
    .参数 rect, 矩形F, 传址, 

.DLL命令 GdipGetPathGradientRectI, 整数型, "gdiplus", "GdipGetPathGradientRectI", , 
    .参数 Brush, 整数型, , 
    .参数 rect, 矩形L, 传址, 

.DLL命令 GdipGetPathGradientPointCount, 整数型, "gdiplus", "GdipGetPathGradientPointCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathGradientGammaCorrection, 整数型, "gdiplus", "GdipGetPathGradientGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, 传址, 

.DLL命令 GdipSetPathGradientGammaCorrection, 整数型, "gdiplus", "GdipSetPathGradientGammaCorrection", , 
    .参数 Brush, 整数型, , 
    .参数 useGammaCorrection, 逻辑型, , 

.DLL命令 GdipGetPathGradientBlend, 整数型, "gdiplus", "GdipGetPathGradientBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientBlendCount, 整数型, "gdiplus", "GdipGetPathGradientBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientBlend, 整数型, "gdiplus", "GdipSetPathGradientBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 小数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientPresetBlend, 整数型, "gdiplus", "GdipGetPathGradientPresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathGradientPresetBlendCount, 整数型, "gdiplus", "GdipGetPathGradientPresetBlendCount", , 
    .参数 Brush, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPathGradientPresetBlend, 整数型, "gdiplus", "GdipSetPathGradientPresetBlend", , 
    .参数 Brush, 整数型, , 
    .参数 blend, 整数型, 数组, 
    .参数 positions, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipSetPathGradientLinearBlend, 整数型, "gdiplus", "GdipSetPathGradientLinearBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipSetPathGradientSigmaBlend, 整数型, "gdiplus", "GdipSetPathGradientSigmaBlend", , 
    .参数 Brush, 整数型, , 
    .参数 focus, 小数型, , 
    .参数 sScale, 小数型, , 

.DLL命令 GdipGetPathGradientWrapMode, 整数型, "gdiplus", "GdipGetPathGradientWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, 传址, 

.DLL命令 GdipSetPathGradientWrapMode, 整数型, "gdiplus", "GdipSetPathGradientWrapMode", , 
    .参数 Brush, 整数型, , 
    .参数 WrapMd, 整数型, , 

.DLL命令 GdipGetPathGradientTransform, 整数型, "gdiplus", "GdipGetPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipMultiplyPathGradientTransform, 整数型, "gdiplus", "GdipMultiplyPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetPathGradientTransform, 整数型, "gdiplus", "GdipResetPathGradientTransform", , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipRotatePathGradientTransform, 整数型, "gdiplus", "GdipRotatePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScalePathGradientTransform, 整数型, "gdiplus", "GdipScalePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipSetPathGradientTransform, 整数型, "gdiplus", "GdipSetPathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipTranslatePathGradientTransform, 整数型, "gdiplus", "GdipTranslatePathGradientTransform", , 
    .参数 Brush, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPathGradientFocusScales, 整数型, "gdiplus", "GdipGetPathGradientFocusScales", , 
    .参数 Brush, 整数型, , 
    .参数 xScale, 小数型, 传址, 
    .参数 yScale, 小数型, 传址, 

.DLL命令 GdipSetPathGradientFocusScales, 整数型, "gdiplus", "GdipSetPathGradientFocusScales", , 
    .参数 Brush, 整数型, , 
    .参数 xScale, 小数型, , 
    .参数 yScale, 小数型, , 

.DLL命令 GdipClonePen, 整数型, "gdiplus", "GdipClonePen", , 
    .参数 pen, 整数型, , 
    .参数 clonepen, 整数型, 传址, 

.DLL命令 GdipGetPenWidth, 整数型, "gdiplus", "GdipGetPenWidth", , 
    .参数 pen, 整数型, , 
    .参数 Width, 小数型, 传址, 

.DLL命令 GdipSetPenWidth, 整数型, "gdiplus", "GdipSetPenWidth", , 
    .参数 pen, 整数型, , 
    .参数 Width, 小数型, , 

.DLL命令 GdipGetPenUnit, 整数型, "gdiplus", "GdipGetPenUnit", , 
    .参数 pen, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipSetPenUnit, 整数型, "gdiplus", "GdipSetPenUnit", , 
    .参数 pen, 整数型, , 
    .参数 unit, 整数型, , 

.DLL命令 GdipSetPenLineCap197819, 整数型, "gdiplus", "GdipSetPenLineCap197819", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipSetPenDashCap197819, 整数型, "gdiplus", "GdipSetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipSetPenEndCap, 整数型, "gdiplus", "GdipSetPenEndCap", , 
    .参数 pen, 整数型, , 
    .参数 endCap, 整数型, , 

.DLL命令 GdipSetPenStartCap, 整数型, "gdiplus", "GdipSetPenStartCap", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 

.DLL命令 GdipGetPenDashCap197819, 整数型, "gdiplus", "GdipGetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, 传址, 

.DLL命令 GdipGetPenEndCap, 整数型, "gdiplus", "GdipGetPenEndCap", , 
    .参数 pen, 整数型, , 
    .参数 endCap, 整数型, 传址, 

.DLL命令 GdipGetPenStartCap, 整数型, "gdiplus", "GdipGetPenStartCap", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, 传址, 

.DLL命令 GdipGetPenLineJoin, 整数型, "gdiplus", "GdipGetPenLineJoin", , 
    .参数 pen, 整数型, , 
    .参数 lnJoin, 整数型, 传址, 

.DLL命令 GdipSetPenLineJoin, 整数型, "gdiplus", "GdipSetPenLineJoin", , 
    .参数 pen, 整数型, , 
    .参数 lnJoin, 整数型, , 

.DLL命令 GdipGetPenCustomEndCap, 整数型, "gdiplus", "GdipGetPenCustomEndCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipGetPenCustomStartCap, 整数型, "gdiplus", "GdipGetPenCustomStartCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipSetPenCustomEndCap, 整数型, "gdiplus", "GdipSetPenCustomEndCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipSetPenCustomStartCap, 整数型, "gdiplus", "GdipSetPenCustomStartCap", , 
    .参数 pen, 整数型, , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipCreateCustomLineCap, 整数型, "gdiplus", "GdipCreateCustomLineCap", , 
    .参数 fillPath, 整数型, , 
    .参数 strokePath, 整数型, , 
    .参数 baseCap, 整数型, , 
    .参数 baseInset, 小数型, , 
    .参数 customCap, 整数型, 传址, 

.DLL命令 GdipDeleteCustomLineCap, 整数型, "gdiplus", "GdipDeleteCustomLineCap", , 
    .参数 customCap, 整数型, , 

.DLL命令 GdipCloneCustomLineCap, 整数型, "gdiplus", "GdipCloneCustomLineCap", , 
    .参数 customCap, 整数型, , 
    .参数 clonedCap, 整数型, 传址, 

.DLL命令 GdipGetCustomLineCapStrokeCaps, 整数型, "gdiplus", "GdipGetCustomLineCapStrokeCaps", , 
    .参数 customCap, 整数型, , 
    .参数 startCap, 整数型, 传址, 
    .参数 endCap, 整数型, 传址, 

.DLL命令 GdipSetCustomLineCapStrokeCaps, 整数型, "gdiplus", "GdipSetCustomLineCapStrokeCaps", , 
    .参数 customCap, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 

.DLL命令 GdipGetCustomLineCapStrokeJoin, 整数型, "gdiplus", "GdipGetCustomLineCapStrokeJoin", , 
    .参数 customCap, 整数型, , 
    .参数 lnJoin, 整数型, 传址, 

.DLL命令 GdipSetCustomLineCapStrokeJoin, 整数型, "gdiplus", "GdipSetCustomLineCapStrokeJoin", , 
    .参数 customCap, 整数型, , 
    .参数 lnJoin, 整数型, , 

.DLL命令 GdipGetCustomLineCapBaseCap, 整数型, "gdiplus", "GdipGetCustomLineCapBaseCap", , 
    .参数 customCap, 整数型, , 
    .参数 baseCap, 整数型, 传址, 

.DLL命令 GdipGetCustomLineCapBaseInset, 整数型, "gdiplus", "GdipGetCustomLineCapBaseInset", , 
    .参数 customCap, 整数型, , 
    .参数 inset, 小数型, 传址, 

.DLL命令 GdipSetCustomLineCapBaseCap, 整数型, "gdiplus", "GdipSetCustomLineCapBaseCap", , 
    .参数 customCap, 整数型, , 
    .参数 baseCap, 整数型, , 

.DLL命令 GdipSetCustomLineCapBaseInset, 整数型, "gdiplus", "GdipSetCustomLineCapBaseInset", , 
    .参数 customCap, 整数型, , 
    .参数 inset, 小数型, , 

.DLL命令 GdipGetCustomLineCapWidthScale, 整数型, "gdiplus", "GdipGetCustomLineCapWidthScale", , 
    .参数 customCap, 整数型, , 
    .参数 widthScale, 小数型, 传址, 

.DLL命令 GdipSetCustomLineCapWidthScale, 整数型, "gdiplus", "GdipSetCustomLineCapWidthScale", , 
    .参数 customCap, 整数型, , 
    .参数 widthScale, 小数型, , 

.DLL命令 GdipGetPenMiterLimit, 整数型, "gdiplus", "GdipGetPenMiterLimit", , 
    .参数 pen, 整数型, , 
    .参数 miterLimit, 小数型, 传址, 

.DLL命令 GdipSetPenMiterLimit, 整数型, "gdiplus", "GdipSetPenMiterLimit", , 
    .参数 pen, 整数型, , 
    .参数 miterLimit, 小数型, , 

.DLL命令 GdipGetPenMode, 整数型, "gdiplus", "GdipGetPenMode", , 
    .参数 pen, 整数型, , 
    .参数 penMode, 整数型, 传址, 

.DLL命令 GdipSetPenMode, 整数型, "gdiplus", "GdipSetPenMode", , 
    .参数 pen, 整数型, , 
    .参数 penMode, 整数型, , 

.DLL命令 GdipGetPenTransform, 整数型, "gdiplus", "GdipGetPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, 传址, 

.DLL命令 GdipSetPenTransform, 整数型, "gdiplus", "GdipSetPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipMultiplyPenTransform, 整数型, "gdiplus", "GdipMultiplyPenTransform", , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipResetPenTransform, 整数型, "gdiplus", "GdipResetPenTransform", , 
    .参数 pen, 整数型, , 

.DLL命令 GdipRotatePenTransform, 整数型, "gdiplus", "GdipRotatePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 angle, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipScalePenTransform, 整数型, "gdiplus", "GdipScalePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 sx, 小数型, , 
    .参数 sy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipTranslatePenTransform, 整数型, "gdiplus", "GdipTranslatePenTransform", , 
    .参数 pen, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 
    .参数 order, 整数型, , 

.DLL命令 GdipGetPenColor, 整数型, "gdiplus", "GdipGetPenColor", , 
    .参数 pen, 整数型, , 
    .参数 argb, 整数型, 传址, 

.DLL命令 GdipSetPenColor, 整数型, "gdiplus", "GdipSetPenColor", , 
    .参数 pen, 整数型, , 
    .参数 argb, 整数型, , 

.DLL命令 GdipGetPenBrushFill, 整数型, "gdiplus", "GdipGetPenBrushFill", , 
    .参数 pen, 整数型, , 
    .参数 Brush, 整数型, 传址, 

.DLL命令 GdipSetPenBrushFill, 整数型, "gdiplus", "GdipSetPenBrushFill", , 
    .参数 pen, 整数型, , 
    .参数 Brush, 整数型, , 

.DLL命令 GdipGetPenFillType, 整数型, "gdiplus", "GdipGetPenFillType", , 
    .参数 pen, 整数型, , 
    .参数 ptype, 整数型, 传址, 

.DLL命令 GdipGetPenDashStyle, 整数型, "gdiplus", "GdipGetPenDashStyle", , 
    .参数 pen, 整数型, , 
    .参数 dStyle, 整数型, 传址, 

.DLL命令 GdipSetPenDashStyle, 整数型, "gdiplus", "GdipSetPenDashStyle", , 
    .参数 pen, 整数型, , 
    .参数 dStyle, 整数型, , 

.DLL命令 GdipGetPenDashOffset, 整数型, "gdiplus", "GdipGetPenDashOffset", , 
    .参数 pen, 整数型, , 
    .参数 Offset, 小数型, 传址, 

.DLL命令 GdipSetPenDashOffset, 整数型, "gdiplus", "GdipSetPenDashOffset", , 
    .参数 pen, 整数型, , 
    .参数 Offset, 小数型, , 

.DLL命令 GdipGetPenDashArray, 整数型, "gdiplus", "GdipGetPenDashArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenDashCount, 整数型, "gdiplus", "GdipGetPenDashCount", , 
    .参数 pen, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPenDashArray, 整数型, "gdiplus", "GdipSetPenDashArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenCompoundArray, 整数型, "gdiplus", "GdipGetPenCompoundArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPenCompoundCount, 整数型, "gdiplus", "GdipGetPenCompoundCount", , 
    .参数 pen, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetPenCompoundArray, 整数型, "gdiplus", "GdipSetPenCompoundArray", , 
    .参数 pen, 整数型, , 
    .参数 dash, 小数型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipCreateFontFromDC, 整数型, "gdiplus", "GdipCreateFontFromDC", , 
    .参数 hDC, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipCloneFont, 整数型, "gdiplus", "GdipCloneFont", , 
    .参数 curFont, 整数型, , 
    .参数 cloneFont, 整数型, 传址, 

.DLL命令 GdipGetFamily, 整数型, "gdiplus", "GdipGetFamily", , 
    .参数 curFont, 整数型, , 
    .参数 family, 整数型, 传址, 

.DLL命令 GdipGetFontStyle, 整数型, "gdiplus", "GdipGetFontStyle", , 
    .参数 curFont, 整数型, , 
    .参数 style, 整数型, 传址, 

.DLL命令 GdipGetFontSize, 整数型, "gdiplus", "GdipGetFontSize", , 
    .参数 curFont, 整数型, , 
    .参数 size, 小数型, 传址, 

.DLL命令 GdipGetFontUnit, 整数型, "gdiplus", "GdipGetFontUnit", , 
    .参数 curFont, 整数型, , 
    .参数 unit, 整数型, 传址, 

.DLL命令 GdipGetFontHeight, 整数型, "gdiplus", "GdipGetFontHeight", , 
    .参数 curFont, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetFontHeightGivenDPI, 整数型, "gdiplus", "GdipGetFontHeightGivenDPI", , 
    .参数 curFont, 整数型, , 
    .参数 dpi, 小数型, , 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetLogFontA, 整数型, "gdiplus", "GdipGetLogFontA", , 
    .参数 curFont, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 logfont, 整数型, , 

.DLL命令 GdipCreateFontFromLogfontA, 整数型, "gdiplus", "GdipCreateFontFromLogfontA", , 
    .参数 hDC, 整数型, , 
    .参数 logfont, 整数型, , 
    .参数 createdfont, 整数型, 传址, 

.DLL命令 GdipCloneFontFamily, 整数型, "gdiplus", "GdipCloneFontFamily", , 
    .参数 fontFamily, 整数型, , 
    .参数 clonedFontFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilySerif, 整数型, "gdiplus", "GdipGetGenericFontFamilySerif", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilySansSerif, 整数型, "gdiplus", "GdipGetGenericFontFamilySansSerif", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetGenericFontFamilyMonospace, 整数型, "gdiplus", "GdipGetGenericFontFamilyMonospace", , 
    .参数 nativeFamily, 整数型, 传址, 

.DLL命令 GdipGetFamilyName, 整数型, "gdiplus", "GdipGetFamilyName", , 
    .参数 family, 整数型, , 
    .参数 name, 字节集, , 
    .参数 language, 短整数型, , 

.DLL命令 GdipIsStyleAvailable, 整数型, "gdiplus", "GdipIsStyleAvailable", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 IsStyleAvailable, 整数型, 传址, 

.DLL命令 GdipGetEmHeight, 整数型, "gdiplus", "GdipGetEmHeight", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 EmHeight, 短整数型, 传址, 

.DLL命令 GdipGetCellAscent, 整数型, "gdiplus", "GdipGetCellAscent", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 CellAscent, 短整数型, 传址, 

.DLL命令 GdipGetCellDescent, 整数型, "gdiplus", "GdipGetCellDescent", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 CellDescent, 短整数型, 传址, 

.DLL命令 GdipGetLineSpacing, 整数型, "gdiplus", "GdipGetLineSpacing", , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 LineSpacing, 短整数型, 传址, 

.DLL命令 GdipNewInstalledFontCollection, 整数型, "gdiplus", "GdipNewInstalledFontCollection", , 
    .参数 fontCollection, 整数型, 传址, 

.DLL命令 GdipNewPrivateFontCollection, 整数型, "gdiplus", "GdipNewPrivateFontCollection", , 
    .参数 fontCollection, 整数型, 传址, 

.DLL命令 GdipDeletePrivateFontCollection, 整数型, "gdiplus", "GdipDeletePrivateFontCollection", , 
    .参数 fontCollection, 整数型, 传址, 

.DLL命令 GdipGetFontCollectionFamilyCount, 整数型, "gdiplus", "GdipGetFontCollectionFamilyCount", , 
    .参数 fontCollection, 整数型, , 
    .参数 numFound, 整数型, 传址, 

.DLL命令 GdipGetFontCollectionFamilyList, 整数型, "gdiplus", "GdipGetFontCollectionFamilyList", , 
    .参数 fontCollection, 整数型, , 
    .参数 numSought, 整数型, , 
    .参数 gpFamilies, 整数型, 数组, 
    .参数 numFound, 整数型, 传址, 

.DLL命令 GdipPrivateAddFontFile, 整数型, "gdiplus", "GdipPrivateAddFontFile", , 
    .参数 fontCollection, 整数型, , 
    .参数 filename, 字节集, , 

.DLL命令 GdipPrivateAddMemoryFont, 整数型, "gdiplus", "GdipPrivateAddMemoryFont", , 
    .参数 fontCollection, 整数型, , 
    .参数 memory, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 GdipCreateRegionHrgn, 整数型, "gdiplus", "GdipCreateRegionHrgn", , 
    .参数 hRgn, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionPath, 整数型, "gdiplus", "GdipCreateRegionPath", , 
    .参数 path, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCreateRegionRgnData, 整数型, "gdiplus", "GdipCreateRegionRgnData", , 
    .参数 regionData, 字节集, , 
    .参数 size, 整数型, , 
    .参数 region, 整数型, 传址, 

.DLL命令 GdipCloneRegion, 整数型, "gdiplus", "GdipCloneRegion", , 
    .参数 region, 整数型, , 
    .参数 cloneRegion, 整数型, 传址, 

.DLL命令 GdipSetEmpty, 整数型, "gdiplus", "GdipSetEmpty", , 
    .参数 region, 整数型, , 

.DLL命令 GdipSetInfinite, 整数型, "gdiplus", "GdipSetInfinite", , 
    .参数 region, 整数型, , 

.DLL命令 GdipCombineRegionRect, 整数型, "gdiplus", "GdipCombineRegionRect", , 
    .参数 region, 整数型, , 
    .参数 rect, 矩形F, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionRectI, 整数型, "gdiplus", "GdipCombineRegionRectI", , 
    .参数 region, 整数型, , 
    .参数 rect, 矩形L, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionRegion, 整数型, "gdiplus", "GdipCombineRegionRegion", , 
    .参数 region, 整数型, , 
    .参数 region2, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipCombineRegionPath, 整数型, "gdiplus", "GdipCombineRegionPath", , 
    .参数 region, 整数型, , 
    .参数 path, 整数型, , 
    .参数 CombineMd, 整数型, , 

.DLL命令 GdipTranslateRegion, 整数型, "gdiplus", "GdipTranslateRegion", , 
    .参数 region, 整数型, , 
    .参数 dx, 小数型, , 
    .参数 dy, 小数型, , 

.DLL命令 GdipTranslateRegionI, 整数型, "gdiplus", "GdipTranslateRegionI", , 
    .参数 region, 整数型, , 
    .参数 dx, 整数型, , 
    .参数 dy, 整数型, , 

.DLL命令 GdipTransformRegion, 整数型, "gdiplus", "GdipTransformRegion", , 
    .参数 region, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionBounds, 整数型, "gdiplus", "GdipGetRegionBounds", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形F, , 

.DLL命令 GdipGetRegionBoundsI, 整数型, "gdiplus", "GdipGetRegionBoundsI", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 rect, 矩形L, , 

.DLL命令 GdipGetRegionData, 整数型, "gdiplus", "GdipGetRegionData", , 
    .参数 region, 整数型, , 
    .参数 buffer, 字节集, , 
    .参数 bufferSize, 整数型, , 
    .参数 sizeFilled, 整数型, 传址, 

.DLL命令 GdipGetRegionDataSize, 整数型, "gdiplus", "GdipGetRegionDataSize", , 
    .参数 region, 整数型, , 
    .参数 bufferSize, 整数型, 传址, 

.DLL命令 GdipGetRegionHRgn, 整数型, "gdiplus", "GdipGetRegionHRgn", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 hRgn, 整数型, 传址, 

.DLL命令 GdipIsEmptyRegion, 整数型, "gdiplus", "GdipIsEmptyRegion", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsInfiniteRegion, 整数型, "gdiplus", "GdipIsInfiniteRegion", , 
    .参数 region, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsEqualRegion, 整数型, "gdiplus", "GdipIsEqualRegion", , 
    .参数 region, 整数型, , 
    .参数 region2, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionPoint, 整数型, "gdiplus", "GdipIsVisibleRegionPoint", , 
    .参数 region, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionPointI, 整数型, "gdiplus", "GdipIsVisibleRegionPointI", , 
    .参数 region, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionRect, 整数型, "gdiplus", "GdipIsVisibleRegionRect", , 
    .参数 region, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisibleRegionRectI, 整数型, "gdiplus", "GdipIsVisibleRegionRectI", , 
    .参数 region, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipGetRegionScans, 整数型, "gdiplus", "GdipGetRegionScans", , 
    .参数 region, 整数型, , 
    .参数 rects, 矩形F, 数组, 
    .参数 count, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionScansI, 整数型, "gdiplus", "GdipGetRegionScansI", , 
    .参数 region, 整数型, , 
    .参数 rects, 矩形L, 数组, 
    .参数 count, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetRegionScansCount, 整数型, "gdiplus", "GdipGetRegionScansCount", , 
    .参数 region, 整数型, , 
    .参数 Ucount, 整数型, 传址, 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreatePath2, 整数型, "gdiplus", "GdipCreatePath2", , 
    .参数 Points, 坐标F, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipCreatePath2I, 整数型, "gdiplus", "GdipCreatePath2I", , 
    .参数 Points, 坐标L, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 
    .参数 brushmode, 整数型, , 
    .参数 path, 整数型, 传址, 

.DLL命令 GdipClonePath, 整数型, "gdiplus", "GdipClonePath", , 
    .参数 path, 整数型, , 
    .参数 clonePath, 整数型, 传址, 

.DLL命令 GdipResetPath, 整数型, "gdiplus", "GdipResetPath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathPoints, 整数型, "gdiplus", "GdipGetPathPoints", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPathTypes, 整数型, "gdiplus", "GdipGetPathTypes", , 
    .参数 path, 整数型, , 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetPointCount, 整数型, "gdiplus", "GdipGetPointCount", , 
    .参数 path, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetPathFillMode, 整数型, "gdiplus", "GdipGetPathFillMode", , 
    .参数 path, 整数型, , 
    .参数 brushmode, 整数型, 传址, 

.DLL命令 GdipGetPathData, 整数型, "gdiplus", "GdipGetPathData", , 
    .参数 path, 整数型, , 
    .参数 pdata, PathData, , 

.DLL命令 GdipStartPathFigure, 整数型, "gdiplus", "GdipStartPathFigure", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClosePathFigure, 整数型, "gdiplus", "GdipClosePathFigure", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClosePathFigures, 整数型, "gdiplus", "GdipClosePathFigures", , 
    .参数 path, 整数型, , 

.DLL命令 GdipSetPathMarker, 整数型, "gdiplus", "GdipSetPathMarker", , 
    .参数 path, 整数型, , 

.DLL命令 GdipClearPathMarkers, 整数型, "gdiplus", "GdipClearPathMarkers", , 
    .参数 path, 整数型, , 

.DLL命令 GdipReversePath, 整数型, "gdiplus", "GdipReversePath", , 
    .参数 path, 整数型, , 

.DLL命令 GdipGetPathLastPoint, 整数型, "gdiplus", "GdipGetPathLastPoint", , 
    .参数 path, 整数型, , 
    .参数 lastPoint, 坐标F, , 

.DLL命令 GdipSetPathFillMode, 整数型, "gdiplus", "GdipSetPathFillMode", , 
    .参数 path, 整数型, , 
    .参数 brushmode, 整数型, , 

.DLL命令 GdipAddPathLine, 整数型, "gdiplus", "GdipAddPathLine", , 
    .参数 path, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 

.DLL命令 GdipAddPathLineI, 整数型, "gdiplus", "GdipAddPathLineI", , 
    .参数 path, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 

.DLL命令 GdipAddPathLine2, 整数型, "gdiplus", "GdipAddPathLine2", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathLine2I, 整数型, "gdiplus", "GdipAddPathLine2I", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathArc, 整数型, "gdiplus", "GdipAddPathArc", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 小数型
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathArcI, 整数型, "gdiplus", "GdipAddPathArcI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathBezier, 整数型, "gdiplus", "GdipAddPathBezier", , 
    .参数 path, 整数型, , 
    .参数 x1, 小数型, , 
    .参数 y1, 小数型, , 
    .参数 x2, 小数型, , 
    .参数 y2, 小数型, , 
    .参数 x3, 小数型, , 
    .参数 y3, 小数型, , 
    .参数 x4, 小数型, , 
    .参数 y4, 小数型, , 

.DLL命令 GdipAddPathBeziers, 整数型, "gdiplus", "GdipAddPathBeziers", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathBezierI, 整数型, "gdiplus", "GdipAddPathBezierI", , 
    .参数 path, 整数型, , 
    .参数 x1, 整数型, , 
    .参数 y1, 整数型, , 
    .参数 x2, 整数型, , 
    .参数 y2, 整数型, , 
    .参数 x3, 整数型, , 
    .参数 y3, 整数型, , 
    .参数 x4, 整数型, , 
    .参数 y4, 整数型, , 

.DLL命令 GdipAddPathBeziersI, 整数型, "gdiplus", "GdipAddPathBeziersI", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve, 整数型, "gdiplus", "GdipAddPathCurve", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve2, 整数型, "gdiplus", "GdipAddPathCurve2", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurve3, 整数型, "gdiplus", "GdipAddPathCurve3", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurveI, 整数型, "gdiplus", "GdipAddPathCurveI", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathCurve2I, 整数型, "gdiplus", "GdipAddPathCurve2I", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathCurve3I, 整数型, "gdiplus", "GdipAddPathCurve3I", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 Offset, 整数型, , 
    .参数 numberOfSegments, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathClosedCurve, 整数型, "gdiplus", "GdipAddPathClosedCurve", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathClosedCurve2, 整数型, "gdiplus", "GdipAddPathClosedCurve2", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathClosedCurveI, 整数型, "gdiplus", "GdipAddPathClosedCurveI", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathClosedCurve2I, 整数型, "gdiplus", "GdipAddPathClosedCurve2I", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 tension, 小数型, , 

.DLL命令 GdipAddPathRectangle, 整数型, "gdiplus", "GdipAddPathRectangle", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipAddPathRectangles, 整数型, "gdiplus", "GdipAddPathRectangles", , 
    .参数 path, 整数型, , 
    .参数 rect, 矩形F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathRectangleI, 整数型, "gdiplus", "GdipAddPathRectangleI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipAddPathRectanglesI, 整数型, "gdiplus", "GdipAddPathRectanglesI", , 
    .参数 path, 整数型, , 
    .参数 rect, 矩形L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathEllipse, 整数型, "gdiplus", "GdipAddPathEllipse", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipAddPathPie, 整数型, "gdiplus", "GdipAddPathPie", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathEllipseI, 整数型, "gdiplus", "GdipAddPathEllipseI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 

.DLL命令 GdipAddPathPieI, 整数型, "gdiplus", "GdipAddPathPieI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 startAngle, 小数型, , 
    .参数 sweepAngle, 小数型, , 

.DLL命令 GdipAddPathPolygon, 整数型, "gdiplus", "GdipAddPathPolygon", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathPolygonI, 整数型, "gdiplus", "GdipAddPathPolygonI", , 
    .参数 path, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipAddPathPath, 整数型, "gdiplus", "GdipAddPathPath", , 
    .参数 path, 整数型, , 
    .参数 addingPath, 整数型, , 
    .参数 bConnect, 逻辑型, , 

.DLL命令 GdipAddPathString, 整数型, "gdiplus", "GdipAddPathString", , 
    .参数 path, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 layoutRect, 矩形F, , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipAddPathStringI, 整数型, "gdiplus", "GdipAddPathStringI", , 
    .参数 path, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 family, 整数型, , 
    .参数 style, 整数型, , 
    .参数 emSize, 小数型, , 
    .参数 layoutRect, 矩形L, , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipCreateStringFormat, 整数型, "gdiplus", "GdipCreateStringFormat", , 
    .参数 formatAttributes, 整数型, , 
    .参数 language, 短整数型, , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipStringFormatGetGenericDefault, 整数型, "gdiplus", "GdipStringFormatGetGenericDefault", , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipStringFormatGetGenericTypographic, 整数型, "gdiplus", "GdipStringFormatGetGenericTypographic", , 
    .参数 StringFormat, 整数型, 传址, 

.DLL命令 GdipDeleteStringFormat, 整数型, "gdiplus", "GdipDeleteStringFormat", , 
    .参数 StringFormat, 整数型, , 

.DLL命令 GdipCloneStringFormat, 整数型, "gdiplus", "GdipCloneStringFormat", , 
    .参数 StringFormat, 整数型, , 
    .参数 newFormat, 整数型, 传址, 

.DLL命令 GdipGetStringFormatFlags, 整数型, "gdiplus", "GdipGetStringFormatFlags", , 
    .参数 StringFormat, 整数型, , 
    .参数 flags, 整数型, 传址, 

.DLL命令 GdipSetStringFormatFlags, 整数型, "gdiplus", "GdipSetStringFormatFlags", , 
    .参数 StringFormat, 整数型, , 
    .参数 flags, 整数型, , 

.DLL命令 GdipGetStringFormatAlign, 整数型, "gdiplus", "GdipGetStringFormatAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, 传址, 

.DLL命令 GdipSetStringFormatAlign, 整数型, "gdiplus", "GdipSetStringFormatAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, , 

.DLL命令 GdipGetStringFormatLineAlign, 整数型, "gdiplus", "GdipGetStringFormatLineAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, 传址, 

.DLL命令 GdipSetStringFormatLineAlign, 整数型, "gdiplus", "GdipSetStringFormatLineAlign", , 
    .参数 StringFormat, 整数型, , 
    .参数 align, 整数型, , 

.DLL命令 GdipGetStringFormatTrimming, 整数型, "gdiplus", "GdipGetStringFormatTrimming", , 
    .参数 StringFormat, 整数型, , 
    .参数 trimming, 整数型, 传址, 

.DLL命令 GdipSetStringFormatTrimming, 整数型, "gdiplus", "GdipSetStringFormatTrimming", , 
    .参数 StringFormat, 整数型, , 
    .参数 trimming, 整数型, , 

.DLL命令 GdipGetStringFormatHotkeyPrefix, 整数型, "gdiplus", "GdipGetStringFormatHotkeyPrefix", , 
    .参数 StringFormat, 整数型, , 
    .参数 hkPrefix, 整数型, 传址, 

.DLL命令 GdipSetStringFormatHotkeyPrefix, 整数型, "gdiplus", "GdipSetStringFormatHotkeyPrefix", , 
    .参数 StringFormat, 整数型, , 
    .参数 hkPrefix, 整数型, , 

.DLL命令 GdipGetStringFormatTabStops, 整数型, "gdiplus", "GdipGetStringFormatTabStops", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, , 
    .参数 firstTabOffset, 小数型, 传址, 
    .参数 tabStops, 小数型, 数组, 

.DLL命令 GdipSetStringFormatTabStops, 整数型, "gdiplus", "GdipSetStringFormatTabStops", , 
    .参数 StringFormat, 整数型, , 
    .参数 firstTabOffset, 小数型, , 
    .参数 count, 整数型, , 
    .参数 tabStops, 小数型, 数组, 

.DLL命令 GdipGetStringFormatTabStopCount, 整数型, "gdiplus", "GdipGetStringFormatTabStopCount", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipGetStringFormatDigitSubstitution, 整数型, "gdiplus", "GdipGetStringFormatDigitSubstitution", , 
    .参数 StringFormat, 整数型, , 
    .参数 language, 短整数型, 传址, 
    .参数 substitute, 整数型, 传址, 

.DLL命令 GdipSetStringFormatDigitSubstitution, 整数型, "gdiplus", "GdipSetStringFormatDigitSubstitution", , 
    .参数 StringFormat, 整数型, , 
    .参数 language, 短整数型, , 
    .参数 substitute, 整数型, , 

.DLL命令 GdipGetStringFormatMeasurableCharacterRangeCount, 整数型, "gdiplus", "GdipGetStringFormatMeasurableCharacterRangeCount", , 
    .参数 StringFormat, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipSetStringFormatMeasurableCharacterRanges, 整数型, "gdiplus", "GdipSetStringFormatMeasurableCharacterRanges", , 
    .参数 StringFormat, 整数型, , 
    .参数 rangeCount, 整数型, , 
    .参数 ranges, 测试字符范围, 数组, 

.DLL命令 GdipFlattenPath, 整数型, "gdiplus", "GdipFlattenPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWindingModeOutline, 整数型, "gdiplus", "GdipWindingModeOutline", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWidenPath, 整数型, "gdiplus", "GdipWidenPath", , 
    .参数 NativePath, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipWarpPath, 整数型, "gdiplus", "GdipWarpPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcx, 小数型, , 
    .参数 srcy, 小数型, , 
    .参数 srcwidth, 小数型, , 
    .参数 srcheight, 小数型, , 
    .参数 WarpMd, 整数型, , 
    .参数 flatness, 小数型, , 

.DLL命令 GdipTransformPath, 整数型, "gdiplus", "GdipTransformPath", , 
    .参数 path, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipGetPathWorldBounds, 整数型, "gdiplus", "GdipGetPathWorldBounds", , 
    .参数 path, 整数型, , 
    .参数 bounds, 矩形F, 传址, 
    .参数 matrix, 整数型, , 
    .参数 pen, 整数型, , 

.DLL命令 GdipIsVisiblePathPoint, 整数型, "gdiplus", "GdipIsVisiblePathPoint", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsVisiblePathPointI, 整数型, "gdiplus", "GdipIsVisiblePathPointI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsOutlineVisiblePathPoint, 整数型, "gdiplus", "GdipIsOutlineVisiblePathPoint", , 
    .参数 path, 整数型, , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 pen, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipIsOutlineVisiblePathPointI, 整数型, "gdiplus", "GdipIsOutlineVisiblePathPointI", , 
    .参数 path, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 pen, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 result, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromStream, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStream", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromStreamICM, 整数型, "gdiplus.dll", "GdipCreateBitmapFromStreamICM", , 
    .参数 stream, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromFile, 整数型, "gdiplus", "GdipCreateBitmapFromFile", , 
    .参数 filename, 字节集, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromFileICM, 整数型, "gdiplus", "GdipCreateBitmapFromFileICM", , 
    .参数 filename, 字节集, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromScan0, 整数型, "gdiplus", "GdipCreateBitmapFromScan0", , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 stride, 整数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 scan0, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromGraphics, 整数型, "gdiplus", "GdipCreateBitmapFromGraphics", , 
    .参数 Width, 整数型, , 
    .参数 Height, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromGdiDib, 整数型, "gdiplus", "GdipCreateBitmapFromGdiDib", , 
    .参数 gdiBitmapInfo, 整数型, , 
    .参数 gdiBitmapData, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromHBITMAP, 整数型, "gdiplus", "GdipCreateBitmapFromHBITMAP", , 
    .参数 hbm, 整数型, , 
    .参数 hpal, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromHICON, 整数型, "gdiplus", "GdipCreateBitmapFromHICON", , 
    .参数 hicon, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateBitmapFromResource, 整数型, "gdiplus", "GdipCreateBitmapFromResource", , 
    .参数 hInstance, 整数型, , 
    .参数 lpBitmapName, 整数型, , 
    .参数 bitmap, 整数型, 传址, 

.DLL命令 GdipCreateHBITMAPFromBitmap, 整数型, "gdiplus", "GdipCreateHBITMAPFromBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 hbmReturn, 整数型, 传址, 
    .参数 background, 整数型, , 

.DLL命令 GdipCreateHICONFromBitmap, 整数型, "gdiplus", "GdipCreateHICONFromBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 hbmReturn, 整数型, 传址, 

.DLL命令 GdipCloneBitmapArea, 整数型, "gdiplus", "GdipCloneBitmapArea", , 
    .参数 x, 小数型, , 
    .参数 y, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 Height, 小数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 srcBitmap, 整数型, , 
    .参数 dstBitmap, 整数型, 传址, 

.DLL命令 GdipBitmapLockBits, 整数型, "gdiplus", "GdipBitmapLockBits", , 
    .参数 bitmap, 整数型, , 
    .参数 rect, 矩形L, , 
    .参数 flags, 整数型, , 
    .参数 PixelFormat, 整数型, , 
    .参数 lockedBitmapData, 位图数据, , 

.DLL命令 GdipBitmapUnlockBits, 整数型, "gdiplus", "GdipBitmapUnlockBits", , 
    .参数 bitmap, 整数型, , 
    .参数 lockedBitmapData, 位图数据, , 

.DLL命令 GdipBitmapGetPixel, 整数型, "gdiplus", "GdipBitmapGetPixel", , 
    .参数 bitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 color, 整数型, 传址, 

.DLL命令 GdipBitmapSetPixel, 整数型, "gdiplus", "GdipBitmapSetPixel", , 
    .参数 bitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 
    .参数 color, 整数型, , 

.DLL命令 GdipBitmapSetResolution, 整数型, "gdiplus", "GdipBitmapSetResolution", , 
    .参数 bitmap, 整数型, , 
    .参数 xdpi, 小数型, , 
    .参数 ydpi, 小数型, , 

.DLL命令 GdipCreateMetafileFromFile, 整数型, "gdiplus", "GdipCreateMetafileFromFile", , 
    .参数 byvalfile, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromStream, 整数型, "gdiplus.dll", "GdipCreateMetafileFromStream", , 
    .参数 stream, 整数型, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromWmf, 整数型, "gdiplus", "GdipCreateMetafileFromWmf", , 
    .参数 hWmf, 整数型, , 
    .参数 bDeleteWmf, 逻辑型, , 
    .参数 WmfPlaceableFileHdr, APM文件头, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromEmf, 整数型, "gdiplus", "GdipCreateMetafileFromEmf", , 
    .参数 hEmf, 整数型, , 
    .参数 bDeleteEmf, 逻辑型, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipCreateMetafileFromWmfFile, 整数型, "gdiplus", "GdipCreateMetafileFromWmfFile", , 
    .参数 file, 字节集, , 
    .参数 WmfPlaceableFileHdr, APM文件头, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafile, 整数型, "gdiplus", "GdipRecordMetafile", , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, 矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileI, 整数型, "gdiplus", "GdipRecordMetafileI", , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, 矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileFileName, 整数型, "gdiplus", "GdipRecordMetafileFileName", , 
    .参数 filename, 字节集, , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, 矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileFileNameI, 整数型, "gdiplus", "GdipRecordMetafileFileNameI", , 
    .参数 filename, 字节集, , 
    .参数 referenceHdc, 整数型, , 
    .参数 etype, 整数型, , 
    .参数 frameRect, 矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileStream, 整数型, "gdiplus", "GdipRecordMetafileStream", , 
    .参数 stream, 整数型, , 
    .参数 referenceHdc, 整数型, , 
    .参数 EmfType, 整数型, , 
    .参数 frameRect, 矩形F, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipRecordMetafileStreamI, 整数型, "gdiplus", "GdipRecordMetafileStreamI", , 
    .参数 stream, 整数型, , 
    .参数 referenceHdc, 整数型, , 
    .参数 EmfType, 整数型, , 
    .参数 frameRect, 矩形L, , 
    .参数 frameUnit, 整数型, , 
    .参数 description, 字节集, , 
    .参数 metafile, 整数型, 传址, 

.DLL命令 GdipSetMetafileDownLevelRasterizationLimit, 整数型, "gdiplus", "GdipSetMetafileDownLevelRasterizationLimit", , 
    .参数 metafile, 整数型, , 
    .参数 metafileRasterizationLimitDpi, 整数型, , 

.DLL命令 GdipGetMetafileDownLevelRasterizationLimit, 整数型, "gdiplus", "GdipGetMetafileDownLevelRasterizationLimit", , 
    .参数 metafile, 整数型, , 
    .参数 metafileRasterizationLimitDpi, 整数型, 传址, 

.DLL命令 GdipGetHemfFromMetafile, 整数型, "gdiplus", "GdipGetHemfFromMetafile", , 
    .参数 metafile, 整数型, , 
    .参数 hEmf, 整数型, 传址, 

.DLL命令 GdipPlayMetafileRecord, 整数型, "gdiplus", "GdipPlayMetafileRecord", , 
    .参数 metafile, 整数型, , 
    .参数 recordType, 整数型, , 
    .参数 flags, 整数型, , 
    .参数 dataSize, 整数型, , 
    .参数 byteData, 整数型, , 

.DLL命令 GdipCreateFromHDC2, 整数型, "gdiplus", "GdipCreateFromHDC2", , 
    .参数 hDC, 整数型, , 
    .参数 hDevice, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipCreateFromHWNDICM, 整数型, "gdiplus", "GdipCreateFromHWNDICM", , 
    .参数 hwnd, 整数型, , 
    .参数 graphics, 整数型, 传址, 

.DLL命令 GdipSetInterpolationMode, 整数型, "gdiplus", "GdipSetInterpolationMode", , 
    .参数 graphics, 整数型, , 
    .参数 interpolation, 整数型, , 

.DLL命令 GdipGetInterpolationMode, 整数型, "gdiplus", "GdipGetInterpolationMode", , 
    .参数 graphics, 整数型, , 
    .参数 interpolation, 整数型, 传址, 

.DLL命令 GdipGetPixelOffsetMode, 整数型, "gdiplus", "GdipGetPixelOffsetMode", , 
    .参数 graphics, 整数型, , 
    .参数 pixelOffsetMode, 整数型, 传址, 

.DLL命令 GdipSetPixelOffsetMode, 整数型, "gdiplus", "GdipSetPixelOffsetMode", , 
    .参数 graphics, 整数型, , 
    .参数 pixelOffsetMode, 整数型, , 

.DLL命令 GdipTransformPoints, 整数型, "gdiplus", "GdipTransformPoints", , 
    .参数 graphics, 整数型, , 
    .参数 destSpace, 整数型, , 
    .参数 srcSpace, 整数型, , 
    .参数 Points, 坐标F, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipTransformPointsI, 整数型, "gdiplus", "GdipTransformPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 destSpace, 整数型, , 
    .参数 srcSpace, 整数型, , 
    .参数 Points, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GetObject, 整数型, "gdi32", "GetObjectA", , 取得对指定对象进行说明的一个结构。windows手册建议用GetObject这个名字来引用该函数。GetObjectAPI在vb中用于避免与GetObject关键字混淆  如lpObject设为零（用ByVal As Long在这种情况下传递一个NULL参数），则必须设置缓冲区的长度。如执行成功，返回载入结构内部的实际字节数；如失败，返回零值
    .参数 hObject, 整数型, , 画笔、刷子、字体、位图或调色板等对象的句柄
    .参数 nCount, 整数型, , 欲取回的字节数。通常是由lpObject定义的那个结构的长度
    .参数 lpObject, 整数型, , 任何类型，用于容纳对象数据的结构。针对画笔，通常是一个LOGPEN结构；针对扩展画笔，通常是EXTLOGPEN；针对字体是LOGBRUSH；针对位图是BITMAP；针对DIBSection位图是DIBSECTION；针对调色板，应指向一个整型变量，代表调色板中的条目数量

.DLL命令 GetStockObject, 整数型, "gdi32", "GetStockObject", , 取得一个固有对象（Stock）。这是可由任何应用程序使用的windows标准对象之一  指向指定对象的一个句柄。零表示出错
    .参数 nIndex, 整数型, , 下述表格中定义的任何常数之一BLACK_BRUSH黑色刷子DKGRAY_BRUSH黑灰色刷子GRAY_BRUSH灰色刷子HOLLOW_BRUSH凹刷子LTGRAY_BRUSH浅灰色刷子NULL_BRUSH空刷子WHITE_BRUSH白色刷子BLACK_PEN黑色画笔NULL_PEN空画笔WHITE_PEN白色画笔ANSI_FIXED_FONT采用windows（ANSI）字符集的等宽字体ANSI_VAR_FONT采用windows（ANSI）字符集的不等宽字体DEVICE_DEFAULT_FONT设备使用的默认字体（NT）DEFAULT_GUI_FONT用户界面的默认字体，包括菜单和对话框字体（Windows 95）OEM_FIXED_FONTOEM字符集的固有字体SYSTEM_FONT屏幕系统字体。这是用于菜单、对话框等等的默认不等宽字体SYSTEM_FIXED_FONT屏幕系统字体。这是用于菜单、对话框等等的默认等宽字体（在windows 3.0之前使用）DEFAULT_PALETTE默认调色板;

.DLL命令 GetDC, 整数型, "user32", "GetDC", , 获取指定窗口的设备场景  指定窗口的设备场景句柄，出错则为0
    .参数 hwnd, 整数型, , 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 ReleaseDC, 整数型, "user32", "ReleaseDC", , 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）  执行成功为1，否则为0
    .参数 hwnd, 整数型, , 要释放的设备场景相关的窗口句柄
    .参数 hdc, 整数型, , 要释放的设备场景句柄;

.DLL命令 GdipMeasureString, 整数型, "gdiplus", "GdipMeasureString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, 矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 boundingBox, 矩形F, 传址, 
    .参数 codepointsFitted, 整数型, , 
    .参数 linesFilled, 整数型, , 

.DLL命令 lstrlenw, 整数型, "kernel32.dll", "lstrlenW", , 取宽文本长度
    .参数 dqcs, 字节集, , 文本指针

.DLL命令 GdipMeasureCharacterRanges, 整数型, "gdiplus", "GdipMeasureCharacterRanges", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 layoutRect, 矩形F, , 
    .参数 StringFormat, 整数型, , 
    .参数 regionCount, 整数型, , 
    .参数 regions, 整数型, 数组, 

.DLL命令 GdipDrawDriverString, 整数型, "gdiplus", "GdipDrawDriverString", , 
    .参数 graphics, 整数型, , 
    .参数 str, 字节集, , 
    .参数 Length, 整数型, , 
    .参数 thefont, 整数型, , 
    .参数 Brush, 整数型, , 
    .参数 positions, 坐标F, 数组, 
    .参数 flags, 整数型, , 
    .参数 matrix, 整数型, , 

.DLL命令 GdipCreateCachedBitmap, 整数型, "gdiplus", "GdipCreateCachedBitmap", , 
    .参数 bitmap, 整数型, , 
    .参数 graphics, 整数型, , 
    .参数 cachedBitmap, 整数型, 传址, 

.DLL命令 GdipDeleteCachedBitmap, 整数型, "gdiplus", "GdipDeleteCachedBitmap", , 
    .参数 cachedBitmap, 整数型, , 

.DLL命令 GdipDrawCachedBitmap, 整数型, "gdiplus", "GdipDrawCachedBitmap", , 
    .参数 graphics, 整数型, , 
    .参数 cachedBitmap, 整数型, , 
    .参数 x, 整数型, , 
    .参数 y, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPoint, 整数型, "gdiplus", "GdipEnumerateMetafileDestPoint", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标F, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPointI, 整数型, "gdiplus", "GdipEnumerateMetafileDestPointI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标L, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPoints, 整数型, "gdiplus", "GdipEnumerateMetafileDestPoints", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestPointsI, 整数型, "gdiplus", "GdipEnumerateMetafileDestPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestRect, 整数型, "gdiplus", "GdipEnumerateMetafileDestRect", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, 矩形F, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileDestRectI, 整数型, "gdiplus", "GdipEnumerateMetafileDestRectI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, 矩形L, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPoint, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPoint", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标F, , 
    .参数 srcRect, 矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPointI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPointI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoint, 坐标L, , 
    .参数 srcRect, 矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPoints, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPoints", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoints, 坐标F, 数组, 
    .参数 count, 整数型, , 
    .参数 srcRect, 矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestPointsI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestPointsI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destPoints, 坐标L, 数组, 
    .参数 count, 整数型, , 
    .参数 srcRect, 矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestRect, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestRect", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, 矩形F, , 
    .参数 srcRect, 矩形F, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipEnumerateMetafileSrcRectDestRectI, 整数型, "gdiplus", "GdipEnumerateMetafileSrcRectDestRectI", , 
    .参数 graphics, 整数型, , 
    .参数 metafile, 整数型, , 
    .参数 destRect, 矩形L, , 
    .参数 srcRect, 矩形L, , 
    .参数 srcUnit, 整数型, , 
    .参数 lpEnumerateMetafileProc, 整数型, , 
    .参数 callbackData, 整数型, , 
    .参数 imageAttributes, 整数型, , 

.DLL命令 GdipComment, 整数型, "gdiplus", "GdipComment", , 
    .参数 graphics, 整数型, , 
    .参数 sizeData, 整数型, , 
    .参数 data, 字节集, , 

.DLL命令 GdipGetPenDashCap, 整数型, "gdiplus", "GdipGetPenDashCap197819", , 
    .参数 pen, 整数型, , 
    .参数 dcap, 整数型, 传址, 

.DLL命令 GdipSetPenLineCap, 整数型, "gdiplus", "GdipSetPenLineCap197819", , 
    .参数 pen, 整数型, , 
    .参数 startCap, 整数型, , 
    .参数 endCap, 整数型, , 
    .参数 dcap, 整数型, , 

.DLL命令 GdipGetMetafileHeaderFromFile, 整数型, "gdiplus", "GdipGetMetafileHeaderFromFile", , 
    .参数 filename, 字节集, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromWmf, 整数型, "gdiplus", "GdipGetMetafileHeaderFromWmf", , 
    .参数 hWmf, 整数型, , 
    .参数 WmfPlaceableFileHdr, APM文件头, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromEmf, 整数型, "gdiplus", "GdipGetMetafileHeaderFromEmf", , 
    .参数 hEmf, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromStream, 整数型, "gdiplus", "GdipGetMetafileHeaderFromStream", , 
    .参数 IStream, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipGetMetafileHeaderFromMetafile, 整数型, "gdiplus", "GdipGetMetafileHeaderFromMetafile", , 
    .参数 metafile, 整数型, , 
    .参数 header, 字节集, 传址, 

.DLL命令 GdipAlloc, 整数型, "gdiplus", "GdipAlloc", , 
    .参数 size, 整数型, , 

.DLL命令 GdipFree, 空白型, "gdiplus", "GdipFree", , 
    .参数 ptr, 整数型, , 

.DLL命令 GdipGetImageDecoders, 整数型, "gdiplus", "GdipGetImageDecoders", , 
    .参数 numDecoders, 整数型, , 
    .参数 size, 整数型, , 
    .参数 decoders, 字节集, , 

.DLL命令 GdipGetImageDecodersSize, 整数型, "gdiplus", "GdipGetImageDecodersSize", , 
    .参数 numDecoders, 整数型, 传址, 
    .参数 size, 整数型, 传址, 

.DLL命令 GdipCreateAdjustableArrowCap, 整数型, "gdiplus", "GdipCreateAdjustableArrowCap", , 
    .参数 Height, 小数型, , 
    .参数 Width, 小数型, , 
    .参数 isFilled, 逻辑型, , 
    .参数 cap, 整数型, 传址, 

.DLL命令 GdipGetAdjustableArrowCapFillState, 整数型, "gdiplus", "GdipGetAdjustableArrowCapFillState", , 
    .参数 cap, 整数型, , 
    .参数 bFillState, 逻辑型, 传址, 

.DLL命令 GdipGetAdjustableArrowCapHeight, 整数型, "gdiplus", "GdipGetAdjustableArrowCapHeight", , 
    .参数 cap, 整数型, , 
    .参数 Height, 小数型, 传址, 

.DLL命令 GdipGetAdjustableArrowCapMiddleInset, 整数型, "gdiplus", "GdipGetAdjustableArrowCapMiddleInset", , 
    .参数 cap, 整数型, , 
    .参数 middleInset, 小数型, 传址, 

.DLL命令 GdipGetAdjustableArrowCapWidth, 整数型, "gdiplus", "GdipGetAdjustableArrowCapWidth", , 
    .参数 cap, 整数型, , 
    .参数 Width, 小数型, 传址, 

.DLL命令 GdipSetAdjustableArrowCapFillState, 整数型, "gdiplus", "GdipSetAdjustableArrowCapFillState", , 
    .参数 cap, 整数型, , 
    .参数 bFillState, 逻辑型, , 

.DLL命令 GdipSetAdjustableArrowCapHeight, 整数型, "gdiplus", "GdipSetAdjustableArrowCapHeight", , 
    .参数 cap, 整数型, , 
    .参数 Height, 小数型, , 

.DLL命令 GdipSetAdjustableArrowCapMiddleInset, 整数型, "gdiplus", "GdipSetAdjustableArrowCapMiddleInset", , 
    .参数 cap, 整数型, , 
    .参数 middleInset, 小数型, , 

.DLL命令 GdipSetAdjustableArrowCapWidth, 整数型, "gdiplus", "GdipSetAdjustableArrowCapWidth", , 
    .参数 cap, 整数型, , 
    .参数 Width, 小数型, , 

.DLL命令 GdipCreatePathIter, 整数型, "gdiplus", "GdipCreatePathIter", , 
    .参数 iterator, 整数型, 传址, 
    .参数 path, 整数型, , 

.DLL命令 GdipDeletePathIter, 整数型, "gdiplus", "GdipDeletePathIter", , 
    .参数 iterator, 整数型, , 

.DLL命令 GdipPathIterNextSubpath, 整数型, "gdiplus", "GdipPathIterNextSubpath", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 startIndex, 整数型, 传址, 
    .参数 endIndex, 整数型, 传址, 
    .参数 isClosed, 逻辑型, 传址, 

.DLL命令 GdipPathIterNextSubpathPath, 整数型, "gdiplus", "GdipPathIterNextSubpathPath", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 path, 整数型, , 
    .参数 isClosed, 逻辑型, 传址, 

.DLL命令 GdipPathIterNextPathType, 整数型, "gdiplus", "GdipPathIterNextPathType", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 pathType, 字节型, 传址, 
    .参数 startIndex, 整数型, 传址, 
    .参数 endIndex, 整数型, 传址, 

.DLL命令 GdipPathIterNextMarker, 整数型, "gdiplus", "GdipPathIterNextMarker", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 startIndex, 整数型, 传址, 
    .参数 endIndex, 整数型, 传址, 

.DLL命令 GdipPathIterNextMarkerPath, 整数型, "gdiplus", "GdipPathIterNextMarkerPath", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 path, 整数型, , 

.DLL命令 GdipPathIterGetCount, 整数型, "gdiplus", "GdipPathIterGetCount", , 
    .参数 iterator, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipPathIterGetSubpathCount, 整数型, "gdiplus", "GdipPathIterGetSubpathCount", , 
    .参数 iterator, 整数型, , 
    .参数 count, 整数型, 传址, 

.DLL命令 GdipPathIterHasCurve, 整数型, "gdiplus", "GdipPathIterHasCurve", , 
    .参数 iterator, 整数型, , 
    .参数 hasCurve, 逻辑型, 传址, 

.DLL命令 GdipPathIterRewind, 整数型, "gdiplus", "GdipPathIterRewind", , 
    .参数 iterator, 整数型, , 

.DLL命令 GdipPathIterEnumerate, 整数型, "gdiplus", "GdipPathIterEnumerate", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 Points, 坐标F, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipPathIterCopyData, 整数型, "gdiplus", "GdipPathIterCopyData", , 
    .参数 iterator, 整数型, , 
    .参数 resultCount, 整数型, 传址, 
    .参数 Points, 坐标F, 数组, 
    .参数 types, 字节型, 数组, 
    .参数 startIndex, 整数型, , 
    .参数 endIndex, 整数型, , 

.DLL命令 GdipGetTextContrast, 整数型, "gdiplus", "GdipGetTextContrast", , 
    .参数 graphics, 整数型, , 
    .参数 contrast, 整数型, 传址, 

.DLL命令 GdipSetTextContrast, 整数型, "gdiplus", "GdipSetTextContrast", , 
    .参数 graphics, 整数型, , 
    .参数 contrast, 整数型, , 

.DLL命令 GdipTransformMatrixPointsI, 整数型, "gdiplus", "GdipTransformMatrixPointsI", , 
    .参数 matrix, 整数型, , 
    .参数 pts, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipVectorTransformMatrixPointsI, 整数型, "gdiplus", "GdipVectorTransformMatrixPointsI", , 
    .参数 matrix, 整数型, , 
    .参数 pts, 坐标L, 数组, 
    .参数 count, 整数型, , 

.DLL命令 GdipGetEffectParameterSize, 整数型, "gdiplus", "GdipGetEffectParameterSize", , 
    .参数 Effect, 整数型, , 
    .参数 Size, 整数型, 传址, 

.DLL命令 GdipDeleteEffect, 整数型, "gdiplus", "GdipDeleteEffect", , 
    .参数 Effect, 整数型, , 

.DLL命令 GdipCreateEffect, 整数型, "gdiplus.dll", "GdipCreateEffect", , 
    .参数 cid1, 整数型, , 
    .参数 cid2, 整数型, , 
    .参数 cid3, 整数型, , 
    .参数 cid4, 整数型, , 
    .参数 nativeEffect, 整数型, 传址, 

.DLL命令 GdipSetEffectParameters_Blur, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 模糊参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_Blur, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 模糊参数, 传址, 

.DLL命令 GdipBitmapApplyEffect, 整数型, "Gdiplus.dll", "GdipBitmapApplyEffect", , 
    .参数 image, 整数型, , 
    .参数 Effect, 整数型, , 
    .参数 roi, 矩形L, , 
    .参数 useAuxData, 逻辑型, , 
    .参数 auxData, 整数型, 传址, 
    .参数 auxDataSize, 整数型, 传址, 

.DLL命令 GdipBitmapApplyEffect_int, 整数型, "Gdiplus.dll", "GdipBitmapApplyEffect", , 
    .参数 image, 整数型, , 
    .参数 Effect, 整数型, , 
    .参数 roi, 整数型, , 
    .参数 useAuxData, 逻辑型, , 
    .参数 auxData, 整数型, 传址, 
    .参数 auxDataSize, 整数型, 传址, 

.DLL命令 GdipSetEffectParameters_Sharpen, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 锐化参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_Sharpen, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 锐化参数, 传址, 

.DLL命令 GdipSetEffectParameters_Tint, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 色调参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_Tint, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 色调参数, 传址, 

.DLL命令 GdipSetEffectParameters_RedEyeCorrectionParams, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, RedEyeCorrectionParams, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_RedEyeCorrectionParams, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, RedEyeCorrectionParams, 传址, 

.DLL命令 GdipSetEffectParameters_ColorMatrixEffect, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 小数型, 数组, 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_ColorMatrixEffect, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 小数型, 传址 数组, 

.DLL命令 GdipSetEffectParameters_ColorLUT, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 颜色查找表参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_ColorLUT, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 颜色查找表参数, 传址, 

.DLL命令 GdipSetEffectParameters_BrightnessContrast, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 亮度对比度参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_BrightnessContrast, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 亮度对比度参数, 传址, 

.DLL命令 GdipSetEffectParameters_HueSaturationLightness, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 色相饱和亮度参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_HueSaturationLightness, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 色相饱和亮度参数, 传址, 

.DLL命令 GdipSetEffectParameters_ColorBalance, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 色彩平衡参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_ColorBalance, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 色彩平衡参数, 传址, 

.DLL命令 GdipSetEffectParameters_Levens, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 色阶参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_Levens, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 色阶参数, 传址, 

.DLL命令 GdipSetEffectParameters_ColorCurve, 整数型, "gdiplus", "GdipSetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 params, 颜色曲线参数, , 
    .参数 size, 整数型, , 

.DLL命令 GdipGetEffectParameters_ColorCurve, 整数型, "gdiplus", "GdipGetEffectParameters", , 
    .参数 effect, 整数型, , 
    .参数 size, 整数型, 传址, 
    .参数 params, 颜色曲线参数, 传址, 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码

返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.类模块 Gdiplus基类, , , 

.程序集变量 m_Pointer, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--



.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 取指针, 整数型, 公开, 
返回 (m_Pointer)


.子程序 置指针, 空白型, 公开, 
.参数 参数_指针, 整数型, , 

赋值 (m_Pointer, 参数_指针)
方法_置指针 (参数_指针)

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

' 本源码来自易语言资源网(www.5A5X.com)

.子程序 new, 整数型, , GdipAlloc
.参数 参数_大小, 整数型, , 

返回 (GdipAlloc (参数_大小))

.子程序 delete, 空白型, , GdipFree
.参数 参数_内存指针, 整数型, , 

GdipFree (参数_内存指针)


.类模块 GP图形, Gdiplus基类, , Graphics

.程序集变量 m_Graphics, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Graphics, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteGraphics。
.如果真 (等于 (m_Graphics, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteGraphics (m_Graphics))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自窗口句柄, 逻辑型, 公开, GdipCreateFromHWND。
.参数 参数_窗口句柄, 整数型, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用ICC文件调整颜色。

.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipCreateFromHWNDICM (参数_窗口句柄, m_Graphics))
.否则
    赋值 (全局_返回码, GdipCreateFromHWND (参数_窗口句柄, m_Graphics))
.如果结束
置指针 (m_Graphics)
返回 (等于 (全局_返回码, 0))


.子程序 创建自DC, 逻辑型, 公开, GdipCreateFromHDC。
.参数 参数_hDC, 整数型, , 
.参数 参数_hdevice, 整数型, 可空, 

.如果 (是否为空 (参数_hdevice))
    赋值 (全局_返回码, GdipCreateFromHDC (参数_hDC, m_Graphics))
.否则
    赋值 (全局_返回码, GdipCreateFromHDC2 (参数_hDC, 参数_hdevice, m_Graphics))
.如果结束
置指针 (m_Graphics)
返回 (等于 (全局_返回码, 0))


.子程序 创建自图像, 逻辑型, , GdipGetImageGraphicsContext。
.参数 参数_Gdiplus图像, GP图像, , 

赋值 (全局_返回码, GdipGetImageGraphicsContext (参数_Gdiplus图像.取指针 (), m_Graphics))
置指针 (m_Graphics)
返回 (等于 (全局_返回码, 0))


.子程序 获取DC, 整数型, , GdipGetDC。返回当前图形对象的DC句柄。不用后用“对象.释放DC”释放设备场景句柄
.局部变量 hdc, 整数型, , , 

赋值 (全局_返回码, GdipGetDC (m_Graphics, hdc))
返回 (hdc)


.子程序 释放DC, 逻辑型, , GdipReleaseDC。释放由方法“对象.获取DC”返回的设备场景句柄
.参数 参数_DC句柄, 整数型, , 

赋值 (全局_返回码, GdipReleaseDC (m_Graphics, 参数_DC句柄))
返回 (等于 (全局_返回码, 0))

.子程序 取混合模式, 整数型, , GdipGetCompositingMode。“混合模式_”开头常量。
.局部变量 局部_混合模式, 整数型, , , 

赋值 (全局_返回码, GdipGetCompositingMode (m_Graphics, 局部_混合模式))
返回 (局部_混合模式)


.子程序 置混合模式, 逻辑型, , GdipSetCompositingMode
.参数 参数_混合模式, 整数型, , “混合模式_”开头常量。

赋值 (全局_返回码, GdipSetCompositingMode (m_Graphics, 参数_混合模式))
返回 (等于 (全局_返回码, 0))

.子程序 取渲染原点, 逻辑型, , GdipGetRenderingOrigin
.参数 参数_x, 整数型, 参考, 只能提供变量，装载数据
.参数 参数_y, 整数型, 参考, 只能提供变量，装载数据

赋值 (全局_返回码, GdipGetRenderingOrigin (m_Graphics, 参数_x, 参数_y))
返回 (等于 (全局_返回码, 0))

.子程序 置渲染原点, 逻辑型, , GdipSetRenderingOrigin
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

赋值 (全局_返回码, GdipSetRenderingOrigin (m_Graphics, 参数_x, 参数_y))
返回 (等于 (全局_返回码, 0))

.子程序 取混合品质, 整数型, , GdipGetCompositingQuality。“混合品质_”开头常量。
.局部变量 局部_混合质量, 整数型, , , 

赋值 (全局_返回码, GdipGetCompositingQuality (m_Graphics, 局部_混合质量))
返回 (局部_混合质量)


.子程序 置混合品质, 逻辑型, , GdipSetCompositingQuality
.参数 参数_混合模式, 整数型, , “混合品质_”开头常量。

赋值 (全局_返回码, GdipSetCompositingQuality (m_Graphics, 参数_混合模式))
返回 (等于 (全局_返回码, 0))

.子程序 置平滑模式, 逻辑型, , GdipSetSmoothingMode
.参数 参数_呈现模式, 整数型, , “平滑模式_”开头常量。

赋值 (全局_返回码, GdipSetSmoothingMode (m_Graphics, 参数_呈现模式))
返回 (等于 (全局_返回码, 0))

.子程序 取平滑模式, 整数型, , GdipGetSmoothingMode。“平滑模式_”开头常量。
.局部变量 局部_呈现模式, 整数型, , , 

赋值 (全局_返回码, GdipGetSmoothingMode (m_Graphics, 局部_呈现模式))
返回 (局部_呈现模式)

.子程序 置文本渲染模式, 逻辑型, , GdipSetTextRenderingHint
.参数 参数_文本呈现模式, 整数型, , “文本渲染模式_”开头常量。

赋值 (全局_返回码, GdipSetTextRenderingHint (m_Graphics, 参数_文本呈现模式))
返回 (等于 (全局_返回码, 0))

.子程序 取文本渲染模式, 整数型, , GdipGetTextRenderingHint。“文本渲染模式_”开头常量。
.局部变量 局部_文本呈现模式, 整数型, , , 

赋值 (全局_返回码, GdipGetTextRenderingHint (m_Graphics, 局部_文本呈现模式))
返回 (局部_文本呈现模式)


.子程序 置算法模式, 逻辑型, , GdipSetInterpolationMode。设置在缩放或旋转图像时使用的算法
.参数 参数_算法模式, 整数型, , “算法模式_”开头常量。

赋值 (全局_返回码, GdipSetInterpolationMode (m_Graphics, 参数_算法模式))
返回 (等于 (全局_返回码, 0))

.子程序 取算法模式, 整数型, , GdipGetInterpolationMode。“算法模式_”开头常量。
.局部变量 局部_算法模式, 整数型, , , 

赋值 (全局_返回码, GdipGetInterpolationMode (m_Graphics, 局部_算法模式))
返回 (局部_算法模式)

.子程序 置像素偏移模式, 逻辑型, , GdipSetPixelOffsetMode。设置在缩放或旋转图像时使用的算法
.参数 参数_像素偏移模式, 整数型, , “像素偏移模式_”开头常量。

赋值 (全局_返回码, GdipSetPixelOffsetMode (m_Graphics, 参数_像素偏移模式))
返回 (等于 (全局_返回码, 0))

.子程序 取像素偏移模式, 整数型, , GdipGetTextRenderingHint。“像素偏移模式_”开头常量。
.局部变量 局部_像素偏移模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPixelOffsetMode (m_Graphics, 局部_像素偏移模式))
返回 (局部_像素偏移模式)

.子程序 变形置矩阵, 逻辑型, , GdipSetWorldTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetWorldTransform (m_Graphics, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, , GdipGetWorldTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetWorldTransform (m_Graphics, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形重置, 逻辑型, , GdipResetWorldTransform
赋值 (全局_返回码, GdipResetWorldTransform (m_Graphics))
返回 (等于 (全局_返回码, 0))

.子程序 变形相乘, 逻辑型, , GdipMultiplyWorldTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyWorldTransform (m_Graphics, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, , GdipTranslateWorldTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateWorldTransform (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, , GdipScaleWorldTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleWorldTransform (m_Graphics, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, , GdipRotateWorldTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateWorldTransform (m_Graphics, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 置页单位, 逻辑型, , GdipSetPageUnit。设置当前页的变形单位。
.参数 参数_单位, 整数型, , “单位_”开头常量。

赋值 (全局_返回码, GdipSetPageUnit (m_Graphics, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 取页单位, 整数型, , GdipGetPageUnit。“单位_”开头常量。
.局部变量 局部_单位, 整数型, , , 

赋值 (全局_返回码, GdipGetPageUnit (m_Graphics, 局部_单位))
返回 (局部_单位)


.子程序 置页比例, 逻辑型, , GdipSetPageScale
.参数 参数_比例, 小数型, , 

赋值 (全局_返回码, GdipSetPageScale (m_Graphics, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 取页比例, 小数型, , GdipGetPageUnit。
.局部变量 局部_比例, 小数型, , , 

赋值 (全局_返回码, GdipGetPageScale (m_Graphics, 局部_比例))
返回 (局部_比例)

.子程序 取水平分辨率, 小数型, , GdipGetDpiX
.局部变量 局部_DPIX, 小数型, , , 

赋值 (全局_返回码, GdipGetDpiX (m_Graphics, 局部_DPIX))
返回 (局部_DPIX)

.子程序 取垂直分辨率, 小数型, , GdipGetDpiY
.局部变量 局部_DPIY, 小数型, , , 

赋值 (全局_返回码, GdipGetDpiY (m_Graphics, 局部_DPIY))
返回 (局部_DPIY)

.子程序 转换坐标空间, 逻辑型, , GdipTransformPoints
.参数 参数_目标坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_源坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_坐标组, 坐标F, 参考 数组, 

赋值 (全局_返回码, GdipTransformPoints (m_Graphics, 参数_目标坐标空间, 参数_源坐标空间, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 转换坐标空间I, 逻辑型, , GdipTransformPoints
.参数 参数_目标坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_源坐标空间, 整数型, , “坐标空间_”开头常量。
.参数 参数_坐标组, 坐标L, 参考 数组, 

赋值 (全局_返回码, GdipTransformPointsI (m_Graphics, 参数_目标坐标空间, 参数_源坐标空间, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 取最近颜色, 整数型, , GdipGetNearestColor。返回最近的ARGB颜色。
.参数 参数_参考颜色, 整数型, , 

赋值 (全局_返回码, GdipGetNearestColor (m_Graphics, 参数_参考颜色))
返回 (参数_参考颜色)


.子程序 画直线, 逻辑型, , GdipDrawLine
.参数 参数_画笔, GP画笔, , 
.参数 参数_起始x, 小数型, , 
.参数 参数_起始y, 小数型, , 
.参数 参数_结束x, 小数型, , 
.参数 参数_结束y, 小数型, , 

赋值 (全局_返回码, GdipDrawLine (m_Graphics, 参数_画笔.取指针 (), 参数_起始x, 参数_起始y, 参数_结束x, 参数_结束y))
返回 (等于 (全局_返回码, 0))


.子程序 画直线I, 逻辑型, , GdipDrawLineI
.参数 参数_画笔, GP画笔, , 
.参数 参数_起始x, 整数型, , 
.参数 参数_起始y, 整数型, , 
.参数 参数_结束x, 整数型, , 
.参数 参数_结束y, 整数型, , 

赋值 (全局_返回码, GdipDrawLineI (m_Graphics, 参数_画笔.取指针 (), 参数_起始x, 参数_起始y, 参数_结束x, 参数_结束y))
返回 (等于 (全局_返回码, 0))

.子程序 画直线组, 逻辑型, , GdipDrawLines
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipDrawLines (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画直线组I, 逻辑型, , GdipDrawLinesI
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipDrawLinesI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 画圆弧, 逻辑型, , GdipDrawArc。以顺时针方向画一个圆弧
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawArc (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 画圆弧I, 逻辑型, , GdipDrawArcI。以顺时针方向画一个圆弧
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawArcI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 画贝塞尔曲线, 逻辑型, , GdipDrawBezier。
.参数 参数_画笔, GP画笔, , 
.参数 参数_x1, 小数型, , 
.参数 参数_y1, 小数型, , 
.参数 参数_x2, 小数型, , 
.参数 参数_y2, 小数型, , 
.参数 参数_x3, 小数型, , 
.参数 参数_y3, 小数型, , 
.参数 参数_x4, 小数型, , 
.参数 参数_y4, 小数型, , 

赋值 (全局_返回码, GdipDrawBezier (m_Graphics, 参数_画笔.取指针 (), 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))


.子程序 画贝塞尔曲线I, 逻辑型, , GdipDrawBezierI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_x1, 整数型, , 
.参数 参数_y1, 整数型, , 
.参数 参数_x2, 整数型, , 
.参数 参数_y2, 整数型, , 
.参数 参数_x3, 整数型, , 
.参数 参数_y3, 整数型, , 
.参数 参数_x4, 整数型, , 
.参数 参数_y4, 整数型, , 

赋值 (全局_返回码, GdipDrawBezierI (m_Graphics, 参数_画笔.取指针 (), 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))

.子程序 画贝塞尔曲线组, 逻辑型, , GdipDrawBeziers。“参数_坐标组”的成员数必须4个以上。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipDrawBeziers (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画贝塞尔曲线组I, 逻辑型, , GdipDrawBeziersI。“参数_坐标组”的成员数必须4个以上。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipDrawBeziersI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 画矩形, 逻辑型, , GdipDrawRectangle
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipDrawRectangle (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 画矩形I, 逻辑型, , GdipDrawRectangleI
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipDrawRectangleI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 画矩形组, 逻辑型, , GdipDrawRectangles
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩形组, 矩形F, 数组, 

赋值 (全局_返回码, GdipDrawRectangles (m_Graphics, 参数_画笔.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 画矩形组I, 逻辑型, , GdipDrawRectanglesI
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩形组, 矩形L, 数组, 

赋值 (全局_返回码, GdipDrawRectanglesI (m_Graphics, 参数_画笔.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 画椭圆, 逻辑型, , GdipDrawEllipse。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipDrawEllipse (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 画椭圆I, 逻辑型, , GdipDrawEllipseI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipDrawEllipseI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 画饼, 逻辑型, , GdipDrawPie。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawPie (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 画饼I, 逻辑型, , GdipDrawPieI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipDrawPieI (m_Graphics, 参数_画笔.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 画多边形, 逻辑型, , GdipDrawPolygon
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipDrawPolygon (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画多边形I, 逻辑型, , GdipDrawPolygonI
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipDrawPolygonI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画路径, 逻辑型, 公开, GdipDrawPath
.参数 参数_画笔, GP画笔, , 
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipDrawPath (m_Graphics, 参数_画笔.取指针 (), 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线, 逻辑型, , GdipDrawCurve。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipDrawCurve (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线I, 逻辑型, , GdipDrawCurveI。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipDrawCurveI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线2, 逻辑型, , GdipDrawCurve2。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawCurve2 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线2I, 逻辑型, , GdipDrawCurve2I。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawCurve2I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线3, 逻辑型, , GdipDrawCurve3。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipDrawCurve3 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 画曲线3I, 逻辑型, , GdipDrawCurve3I。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipDrawCurve3I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 画闭合曲线, 逻辑型, , GdipDrawClosedCurve。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipDrawClosedCurve (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画闭合曲线I, 逻辑型, , GdipDrawClosedCurveI。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipDrawClosedCurveI (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 画闭合曲线2, 逻辑型, , GdipDrawClosedCurve2。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawClosedCurve2 (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 画闭合曲线2I, 逻辑型, , GdipDrawClosedCurve2I。最后一点将和起始点自动连接。
.参数 参数_画笔, GP画笔, , 
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipDrawClosedCurve2I (m_Graphics, 参数_画笔.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 清除, 逻辑型, 公开, GdipGraphicsClear。清除整个绘图面，并以指定色填充。
.参数 参数_ARGB颜色, 整数型, 可空, 默认为-1。

.如果真 (是否为空 (参数_ARGB颜色))
    赋值 (参数_ARGB颜色, -1)
.如果真结束
赋值 (全局_返回码, GdipGraphicsClear (m_Graphics, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 填充矩形, 逻辑型, 公开, GdipFillRectangle
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipFillRectangle (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 填充矩形2, 逻辑型, 公开, GdipFillRectangle
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形, 矩形F, , 

赋值 (全局_返回码, GdipFillRectangle (m_Graphics, 参数_画刷.取指针 (), 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度))
返回 (等于 (全局_返回码, 0))

.子程序 填充矩形I, 逻辑型, , GdipFillRectangleI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipFillRectangleI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 填充矩形组, 逻辑型, , GdipFillRectangles
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形组, 矩形F, 数组, 

赋值 (全局_返回码, GdipFillRectangles (m_Graphics, 参数_画刷.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))


.子程序 填充矩形组I, 逻辑型, , GdipFillRectanglesI
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形组, 矩形L, 数组, 

赋值 (全局_返回码, GdipFillRectanglesI (m_Graphics, 参数_画刷.取指针 (), 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 填充多边形, 逻辑型, , GdipFillPolygon
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillPolygon (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_填充模式))
返回 (等于 (全局_返回码, 0))


.子程序 填充多边形I, 逻辑型, , GdipFillPolygonI
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillPolygonI (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 填充椭圆, 逻辑型, , GdipFillEllipse
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipFillEllipse (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 填充椭圆I, 逻辑型, , GdipFillEllipseI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipFillEllipseI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 填充饼, 逻辑型, , GdipFillPie
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipFillPie (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 填充饼I, 逻辑型, , GdipFillPieI
.参数 参数_画刷, GP画刷, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipFillPieI (m_Graphics, 参数_画刷.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 填充路径, 逻辑型, , GdipFillPath
.参数 参数_画刷, GP画刷, , 
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipFillPath (m_Graphics, 参数_画刷.取指针 (), 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 填充闭合曲线, 逻辑型, , GdipFillClosedCurve
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipFillClosedCurve (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 填充闭合曲线2, 逻辑型, , GdipFillClosedCurve2
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_张力, 小数型, , 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillClosedCurve2 (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 填充闭合曲线I, 逻辑型, , GdipFillClosedCurveI
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipFillClosedCurveI (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 填充闭合曲线2I, 逻辑型, , GdipFillClosedCurve2I
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_张力, 小数型, , 
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量，默认为：“#填充模式_交替”

赋值 (全局_返回码, GdipFillClosedCurve2I (m_Graphics, 参数_画刷.取指针 (), 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 填充区域, 逻辑型, , GdipFillRegion
.参数 参数_画刷, GP画刷, , 
.参数 参数_区域, GP区域, , 

赋值 (全局_返回码, GdipFillRegion (m_Graphics, 参数_画刷.取指针 (), 参数_区域.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 画文本, 逻辑型, , GdipDrawString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_画刷, GP画刷, , 
.参数 参数_矩形, 矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_宽字符, 字节集, , , 

赋值 (局部_宽字符, GdiplusA2W (参数_文本))
赋值 (全局_返回码, GdipDrawString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_矩形, 参数_文本格式.取指针 (), 参数_画刷.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 测量文本矩形, 逻辑型, , GdipMeasureString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_参考矩形, 矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 
.参数 参数_测量矩形, 矩形F, 参考, 返回测量“参数_文本”所需要的矩形。

.局部变量 局部_宽字符, 字节集, , , 

赋值 (局部_宽字符, GdiplusA2W (参数_文本))
赋值 (全局_返回码, GdipMeasureString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_参考矩形, 参数_文本格式.取指针 (), 参数_测量矩形, 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 测量文本区域, 逻辑型, , GdipMeasureCharacterRanges
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_参考矩形, 矩形F, 可空, 
.参数 参数_文本格式, GP文本格式, 可空, 
.参数 参数_区域数, 整数型, , 
.参数 参数_区域集, GP区域, 参考 数组, 返回区域数组。

.局部变量 局部_宽字符, 字节集, , , 
.局部变量 局部_区域集指针, 整数型, , "0", 
.局部变量 i, 整数型, , , 

赋值 (局部_宽字符, GdiplusA2W (参数_文本))
重定义数组 (参数_区域集, 假, 参数_区域数)
重定义数组 (局部_区域集指针, 假, 参数_区域数)
赋值 (全局_返回码, GdipMeasureCharacterRanges (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_参考矩形, 参数_文本格式.取指针 (), 参数_区域数, 局部_区域集指针))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
.计次循环首 (参数_区域数, i)
    参数_区域集.置指针 ( [i], 局部_区域集指针 [i])
.计次循环尾 ()
返回 (真)

.子程序 画控制文本, 逻辑型, , GdipDrawDriverString
.参数 参数_文本, 文本型, , 
.参数 参数_字体, GP字体, , 
.参数 参数_画刷, GP画刷, , 
.参数 参数_坐标集, 坐标F, 数组, 每一个坐标指定每个文本所在的位置。
.参数 参数_标志, 整数型, 可空, “控制文本标志_”开头常量组合。默认为：“控制文本标志_映射查找”
.参数 参数_矩阵, GP矩阵, 可空, 

.局部变量 局部_宽字符, 字节集, , , 
.局部变量 局部_指针, 整数型, , , 

赋值 (局部_宽字符, GdiplusA2W (参数_文本))
.如果真 (是否为空 (参数_标志))
    赋值 (参数_标志, 1)
.如果真结束
赋值 (全局_返回码, GdipDrawDriverString (m_Graphics, 局部_宽字符, lstrlenw (局部_宽字符), 参数_字体.取指针 (), 参数_画刷.取指针 (), 参数_坐标集, 参数_标志, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 置文本对比度, 逻辑型, 公开, GdipSetTextContrast
.参数 参数_对比度, 整数型, , 

赋值 (全局_返回码, GdipSetTextContrast (m_Graphics, 参数_对比度))
返回 (等于 (全局_返回码, 0))

.子程序 取文本对比度, 整数型, 公开, GdipGetTextContrast
.局部变量 局部_对比度, 整数型, , , 

赋值 (全局_返回码, GdipGetTextContrast (m_Graphics, 局部_对比度))
返回 (局部_对比度)

.子程序 画图像, 逻辑型, 公开, GdipDrawImage。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 

赋值 (全局_返回码, GdipDrawImage (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))


.子程序 画图像I, 逻辑型, , GdipDrawImageI。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 

赋值 (全局_返回码, GdipDrawImageI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))

.子程序 画缓存位图, 逻辑型, , GdipDrawCachedBitmap
.参数 参数_缓存位图, GP缓存位图, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 

赋值 (全局_返回码, GdipDrawCachedBitmap (m_Graphics, 参数_缓存位图.取指针 (), 参数_左边, 参数_顶边))
返回 (等于 (全局_返回码, 0))


.子程序 画图像缩放, 逻辑型, , GdipDrawImageRect。按照指定的矩形缩放图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 0, 0, 参数_图像.取宽度 (), 参数_图像.取高度 (), 参数_原图单位, 0, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 画图像缩放I, 逻辑型, , GdipDrawImageRectI。按照指定的矩形缩放图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 0, 0, 参数_图像.取宽度 (), 参数_图像.取高度 (), 参数_原图单位, 0, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 画图像变形, 逻辑型, , GdipDrawImagePoints，可以画出平行四边形的图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 小数型, , 
.参数 参数_左上角Y, 小数型, , 
.参数 参数_右上角X, 小数型, , 
.参数 参数_右上角Y, 小数型, , 
.参数 参数_左下角X, 小数型, , 
.参数 参数_左下角Y, 小数型, , 

.局部变量 局部_坐标组, 坐标F, , "3", 

赋值 (局部_坐标组 [1].x, 参数_左上角X)
赋值 (局部_坐标组 [1].y, 参数_左上角Y)
赋值 (局部_坐标组 [2].x, 参数_右上角X)
赋值 (局部_坐标组 [2].y, 参数_右上角Y)
赋值 (局部_坐标组 [3].x, 参数_左下角Y)
赋值 (局部_坐标组 [3].y, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePoints (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3))
返回 (等于 (全局_返回码, 0))


.子程序 画图像变形I, 逻辑型, , GdipDrawImagePointsI，可以画出平行四边形的图像。
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 整数型, , 
.参数 参数_左上角Y, 整数型, , 
.参数 参数_右上角X, 整数型, , 
.参数 参数_右上角Y, 整数型, , 
.参数 参数_左下角X, 整数型, , 
.参数 参数_左下角Y, 整数型, , 

.局部变量 局部_坐标组, 坐标L, , "3", 

赋值 (局部_坐标组 [1].x, 参数_左上角X)
赋值 (局部_坐标组 [1].y, 参数_左上角Y)
赋值 (局部_坐标组 [2].x, 参数_右上角X)
赋值 (局部_坐标组 [2].y, 参数_右上角Y)
赋值 (局部_坐标组 [3].x, 参数_左下角Y)
赋值 (局部_坐标组 [3].y, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsI (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3))
返回 (等于 (全局_返回码, 0))

.子程序 画图像部分, 逻辑型, 公开, GdipDrawImagePointRect。可以画出源图像的一部分或全部。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_单位))
    赋值 (参数_单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImagePointRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_单位))
返回 (等于 (全局_返回码, 0))


.子程序 画图像部分I, 逻辑型, , GdipDrawImagePointRectI。可以画出源图像的一部分或全部。
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_单位, 整数型, 可空, 默认为“单位_像素”

.如果真 (是否为空 (参数_单位))
    赋值 (参数_单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImagePointRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 画图像缩放部分, 逻辑型, , GdipDrawImageRectRect。按照指定的矩形缩放图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRect (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 画图像缩放部分I, 逻辑型, , GdipDrawImageRectRectI。按照指定的矩形缩放图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (全局_返回码, GdipDrawImageRectRectI (m_Graphics, 参数_图像.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 画图像变形部分, 逻辑型, , GdipDrawImagePointsRect。可以画出平行四边形的图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 小数型, , 
.参数 参数_左上角Y, 小数型, , 
.参数 参数_右上角X, 小数型, , 
.参数 参数_右上角Y, 小数型, , 
.参数 参数_左下角X, 小数型, , 
.参数 参数_左下角Y, 小数型, , 
.参数 参数_原图左边, 小数型, , 
.参数 参数_原图顶边, 小数型, , 
.参数 参数_原图宽度, 小数型, , 
.参数 参数_原图高度, 小数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.局部变量 局部_坐标组, 坐标F, , "3", 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (局部_坐标组 [1].x, 参数_左上角X)
赋值 (局部_坐标组 [1].y, 参数_左上角Y)
赋值 (局部_坐标组 [2].x, 参数_右上角X)
赋值 (局部_坐标组 [2].y, 参数_右上角Y)
赋值 (局部_坐标组 [3].x, 参数_左下角Y)
赋值 (局部_坐标组 [3].y, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsRect (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 画图像变形部分I, 逻辑型, , GdipDrawImagePointsRectI。可以画出平行四边形的图像，并且可以是源图像的一部分或全部
.参数 参数_图像, GP图像, , 
.参数 参数_左上角X, 整数型, , 
.参数 参数_左上角Y, 整数型, , 
.参数 参数_右上角X, 整数型, , 
.参数 参数_右上角Y, 整数型, , 
.参数 参数_左下角X, 整数型, , 
.参数 参数_左下角Y, 整数型, , 
.参数 参数_原图左边, 整数型, , 
.参数 参数_原图顶边, 整数型, , 
.参数 参数_原图宽度, 整数型, , 
.参数 参数_原图高度, 整数型, , 
.参数 参数_原图单位, 整数型, 可空, 默认为“单位_像素”
.参数 参数_图像属性, GP图像属性, 可空, 

.局部变量 局部_坐标组, 坐标L, , "3", 

.如果真 (是否为空 (参数_原图单位))
    赋值 (参数_原图单位, #单位_像素)
.如果真结束
赋值 (局部_坐标组 [1].x, 参数_左上角X)
赋值 (局部_坐标组 [1].y, 参数_左上角Y)
赋值 (局部_坐标组 [2].x, 参数_右上角X)
赋值 (局部_坐标组 [2].y, 参数_右上角Y)
赋值 (局部_坐标组 [3].x, 参数_左下角Y)
赋值 (局部_坐标组 [3].y, 参数_左下角Y)
赋值 (全局_返回码, GdipDrawImagePointsRectI (m_Graphics, 参数_图像.取指针 (), 局部_坐标组, 3, 参数_原图左边, 参数_原图顶边, 参数_原图宽度, 参数_原图高度, 参数_原图单位, 参数_图像属性.取指针 (), 0, 0))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件目的坐标, 逻辑型, , GdipEnumerateMetafileDestPoint。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, 坐标F, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPoint (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件目的坐标I, 逻辑型, , GdipEnumerateMetafileDestPointI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, 坐标L, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPointI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 列举图元文件目的坐标集, 逻辑型, , GdipEnumerateMetafileDestPoints。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, 坐标F, 数组, 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPoints (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件目的坐标集I, 逻辑型, , GdipEnumerateMetafileDestPointsI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, 坐标L, 数组, 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestPointsI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 列举图元文件目的矩形, 逻辑型, 公开, GdipEnumerateMetafileDestRect。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, 矩形F, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestRect (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件目的矩形I, 逻辑型, , GdipEnumerateMetafileDestRectI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, 矩形L, , 
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileDestRectI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 列举图元文件源矩形目的坐标, 逻辑型, , GdipEnumerateMetafileSrcRectDestPoint。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, 坐标F, , 
.参数 参数_源矩形, 矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPoint (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件源矩形目的坐标I, 逻辑型, , GdipEnumerateMetafileSrcRectDestPointI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, 坐标L, , 
.参数 参数_源矩形, 矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPointI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 列举图元文件源矩形目的坐标集, 逻辑型, , GdipEnumerateMetafileSrcRectDestPoints。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标组, 坐标F, 数组, 
.参数 参数_源矩形, 矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPoints (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标组, 取数组成员数 (参数_目的坐标组), 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件源矩形目的坐标集I, 逻辑型, , GdipEnumerateMetafileSrcRectDestPointsI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的坐标, 坐标L, 数组, 
.参数 参数_源矩形, 矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestPointsI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的坐标, 取数组成员数 (参数_目的坐标), 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 列举图元文件源矩形目的矩形, 逻辑型, , GdipEnumerateMetafileSrcRectDestRect。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, 矩形F, , 
.参数 参数_源矩形, 矩形F, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestRect (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 列举图元文件源矩形目的矩形I, 逻辑型, 公开, GdipEnumerateMetafileSrcRectDestRectI。这个方法可以在回调函数中使用回放图元文件。
.参数 参数_图元文件, GP图元文件, , 
.参数 参数_目的矩形, 矩形L, , 
.参数 参数_源矩形, 矩形L, , 
.参数 参数_源单位, 整数型, , “单位_”开头常量。
.参数 参数_回调函数, 整数型, , 参数1 整数型：记录类型，参数2 整数型：标志，参数3 整数型：数据大小，参数4 整数型：数据指针，参数5 整数型：自定义数值。返回值 逻辑型。
.参数 参数_自定义数值, 整数型, 可空, 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipEnumerateMetafileSrcRectDestRectI (m_Graphics, 参数_图元文件.取指针 (), 参数_目的矩形, 参数_源矩形, 参数_源单位, 参数_回调函数, 参数_自定义数值, 参数_图像属性.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自图形, 逻辑型, 公开, GdipSetClipGraphics
.参数 参数_源图形, GP图形, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipGraphics (m_Graphics, 参数_源图形.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自路径, 逻辑型, 公开, GdipSetClipPath
.参数 参数_路径, GP路径, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipPath (m_Graphics, 参数_路径.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自矩形, 逻辑型, 公开, GdipSetClipRect
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRect (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自矩形I, 逻辑型, 公开, GdipSetClipRectI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRectI (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自区域, 逻辑型, , GdipSetClipRegion
.参数 参数_区域, GP区域, , 
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipRegion (m_Graphics, 参数_区域.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 置剪辑区自区域句柄, 逻辑型, , GdipSetClipRegion
.参数 参数_区域句柄, 整数型, , hRgn
.参数 参数_合并模式, 整数型, 可空, 默认为“#合并模式_替代”。

赋值 (全局_返回码, GdipSetClipHrgn (m_Graphics, 参数_区域句柄, 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 重置剪辑区, 逻辑型, 公开, GdipResetClip。重置为无限区域。
赋值 (全局_返回码, GdipResetClip (m_Graphics))
返回 (等于 (全局_返回码, 0))

.子程序 平移剪辑区, 逻辑型, 公开, GdipTranslateClip
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 

赋值 (全局_返回码, GdipTranslateClip (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 平移剪辑区I, 逻辑型, 公开, GdipTranslateClipI
.参数 参数_水平偏移量, 整数型, , 
.参数 参数_垂直偏移量, 整数型, , 

赋值 (全局_返回码, GdipTranslateClipI (m_Graphics, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 取剪辑区, 逻辑型, , GdipGetClip
.参数 参数_区域, GP区域, 参考, 返回的区域。

.局部变量 局部_区域, 整数型, , , 

赋值 (全局_返回码, GdipGetClip (m_Graphics, 局部_区域))
参数_区域.置指针 (局部_区域)
返回 (等于 (全局_返回码, 0))


.子程序 取剪辑区边界, 矩形F, 公开, GdipGetClipBounds
.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetClipBounds (m_Graphics, 局部_矩形))
返回 (局部_矩形)


.子程序 取剪辑区边界I, 矩形L, 公开, GdipGetClipBoundsI
.局部变量 局部_矩形, 矩形L, , , 

赋值 (全局_返回码, GdipGetClipBoundsI (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 取可见剪辑区边界, 矩形F, 公开, GdipGetVisibleClipBounds
.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetVisibleClipBounds (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 取可见剪辑区边界I, 矩形L, 公开, GdipGetVisibleClipBoundsI
.局部变量 局部_矩形, 矩形L, , , 

赋值 (全局_返回码, GdipGetVisibleClipBoundsI (m_Graphics, 局部_矩形))
返回 (局部_矩形)

.子程序 是否为空剪辑区, 逻辑型, 公开, GdipIsClipEmpty
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsClipEmpty (m_Graphics, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否为空可见剪辑区, 逻辑型, , GdipIsVisibleClipEmpty
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleClipEmpty (m_Graphics, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见坐标, 逻辑型, 公开, GdipIsVisiblePoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePoint (m_Graphics, 参数_x, 参数_y, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标I, 逻辑型, 公开, GdipIsVisiblePointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePointI (m_Graphics, 参数_x, 参数_y, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见矩形, 逻辑型, 公开, GdipIsVisibleRect
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRect (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见矩形I, 逻辑型, 公开, GdipIsVisibleRectI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRectI (m_Graphics, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 保存, 整数型, , GdipSaveGraphics。返回状态
.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipSaveGraphics (m_Graphics, 局部_状态))
返回 (局部_状态)


.子程序 恢复, 逻辑型, , GdipRestoreGraphics
.参数 参数_状态, 整数型, , 由“保存()”返回的值。

赋值 (全局_返回码, GdipRestoreGraphics (m_Graphics, 参数_状态))
返回 (等于 (全局_返回码, 0))

.子程序 开始容器, 整数型, , GdipBeginContainer。返回状态。
.参数 参数_目标矩形, 矩形F, , 
.参数 参数_源矩形, 矩形F, , 
.参数 参数_单位, 整数型, 可空, 

.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainer (m_Graphics, 参数_目标矩形, 参数_源矩形, 参数_单位, 局部_状态))
返回 (局部_状态)


.子程序 开始容器I, 整数型, , GdipBeginContainerI。建一个新绘图状态，返回状态。
.参数 参数_目标矩形, 矩形L, , 
.参数 参数_源矩形, 矩形L, , 
.参数 参数_单位, 整数型, 可空, 

.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainerI (m_Graphics, 参数_目标矩形, 参数_源矩形, 参数_单位, 局部_状态))
返回 (局部_状态)

.子程序 开始容器2, 整数型, , GdipBeginContainer2。建一个新绘图状态，返回状态。
.局部变量 局部_状态, 整数型, , , 

赋值 (全局_返回码, GdipBeginContainer2 (m_Graphics, 局部_状态))
返回 (局部_状态)


.子程序 结束容器, 逻辑型, 公开, GdipEndContainer。结束一个绘制状态。
.参数 参数_状态, 整数型, , 

赋值 (全局_返回码, GdipEndContainer (m_Graphics, 参数_状态))
返回 (等于 (全局_返回码, 0))


.子程序 添加图元文件注译, 逻辑型, 公开, GdipComment
.参数 参数_数据, 字节集, , 

赋值 (全局_返回码, GdipComment (m_Graphics, 取字节集长度 (参数_数据), 参数_数据))
返回 (等于 (全局_返回码, 0))



.类模块 GP图像, Gdiplus基类, , Image

.程序集变量 m_Image, 整数型, , , 
.程序集变量 m_IStream, IStream, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Image, 参数_指针)
方法_子置指针 (m_Image)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, GdipDisposeImage。
.如果真 (等于 (m_Image, 0))
    返回 (假)
.如果真结束
m_IStream.释放 ()
赋值 (全局_返回码, GdipDisposeImage (m_Image))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自文件, 逻辑型, 公开, GdipLoadImageFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用已嵌入颜色管理信息来进行颜色校正。

.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipLoadImageFromFileICM (GdiplusA2W (参数_文件名), m_Image))
.否则
    赋值 (全局_返回码, GdipLoadImageFromFile (GdiplusA2W (参数_文件名), m_Image))
.如果结束
置指针 (m_Image)
返回 (等于 (全局_返回码, 0))


.子程序 创建自字节集, 逻辑型, 公开, GdipLoadImageFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用已嵌入颜色管理信息来进行颜色校正。

m_IStream.创建 (参数_字节集)
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipLoadImageFromStreamICM (m_IStream.取字节流指针 (), m_Image))
.否则
    赋值 (全局_返回码, GdipLoadImageFromStream (m_IStream.取字节流指针 (), m_Image))
.如果结束
置指针 (m_Image)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, , GdipCloneImage
.参数 参数_图像, GP图像, 参考, 

.局部变量 局部_Image, 整数型, , , 

赋值 (全局_返回码, GdipCloneImage (m_Image, 局部_Image))
参数_图像.置指针 (局部_Image)
返回 (等于 (全局_返回码, 0))

.子程序 保存到文件, 逻辑型, 公开, GdipSaveImageToFile
.参数 参数_文件名, 文本型, , 
.参数 参数_图像格式, 文本型, 可空, “图像格式_”开头常量。
.参数 参数_编码器参数集, 编码器参数集, 可空, 

.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

.如果真 (是否为空 (参数_图像格式))
    赋值 (参数_图像格式, 取原始格式 ())
.如果真结束
赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
.如果真 (等于 (局部_CLSID, {  }))
    返回 (假)
.如果真结束
.如果 (是否为空 (参数_编码器参数集))
    赋值 (全局_返回码, GdipSaveImageToFile (m_Image, GdiplusA2W (参数_文件名), 局部_CLSID, 0))
.否则
    赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
    .计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
        赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpyn_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值, 0))))
    .计次循环尾 ()
    赋值 (全局_返回码, GdipSaveImageToFile (m_Image, GdiplusA2W (参数_文件名), 局部_CLSID, lstrcpyn_字节集 (局部_字节集, 局部_字节集, 0)))
.如果结束

返回 (等于 (全局_返回码, 0))

.子程序 保存到字节集, 字节集, 公开, GdipSaveImageToStream
.参数 参数_图像格式, 文本型, 可空, “图像格式_”开头常量
.参数 参数_编码器参数集, 编码器参数集, 可空, 

.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_IStream, IStream, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

.如果真 (是否为空 (参数_图像格式))
    赋值 (参数_图像格式, 取原始格式 ())
.如果真结束
赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
.如果真 (等于 (局部_CLSID, {  }))
    返回 ({  })
.如果真结束
局部_IStream.创建 ()
.如果 (是否为空 (参数_编码器参数集))
    赋值 (全局_返回码, GdipSaveImageToStream (m_Image, 局部_IStream.取字节流指针 (), 局部_CLSID, 0))
.否则
    赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
    .计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
        赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpyn_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值, 0))))
    .计次循环尾 ()
    赋值 (全局_返回码, GdipSaveImageToStream (m_Image, 局部_IStream.取字节流指针 (), 局部_CLSID, lstrcpyn_字节集 (局部_字节集, 局部_字节集, 0)))
.如果结束

返回 (局部_IStream.取出字节集 ())


.子程序 保存添加, 逻辑型, 公开, GdipSaveAdd
.参数 参数_编码器参数集, 编码器参数集, , 

.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
.计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
    赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpyn_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值, 0))))
.计次循环尾 ()
赋值 (全局_返回码, GdipSaveAdd (m_Image, lstrcpyn_字节集 (局部_字节集, 局部_字节集, 0)))
返回 (等于 (全局_返回码, 0))


.子程序 保存添加图像, 逻辑型, 公开, GdipSaveAddImage
.参数 参数_图像, GP图像, , 
.参数 参数_编码器参数集, 编码器参数集, , 

.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_字节集, 到字节集 (参数_编码器参数集.参数数量))
.计次循环首 (取数组成员数 (参数_编码器参数集.编码器参数), i)
    赋值 (局部_字节集, 相加 (局部_字节集, 文本到GUDI (参数_编码器参数集.编码器参数 [i], 编码器Guid), 到字节集 (参数_编码器参数集.编码器参数 [i], 值成员数), 到字节集 (参数_编码器参数集.编码器参数 [i], 值类型), 到字节集 (lstrcpyn_字节集 (参数_编码器参数集.编码器参数 [i], 值, 参数_编码器参数集.编码器参数 [i], 值, 0))))
.计次循环尾 ()
赋值 (全局_返回码, GdipSaveAddImage (m_Image, 参数_图像.取指针 (), lstrcpyn_字节集 (局部_字节集, 局部_字节集, 0)))
返回 (等于 (全局_返回码, 0))

.子程序 取编码器参数列表, 逻辑型, 公开, GdipGetEncoderParameterList。
.参数 参数_图像格式, 文本型, , “图像格式_”开头常量。
.参数 参数_编码器, 编码器参数集, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_格式, 字节集, , , 
.局部变量 局部_CLSID, 字节集, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_值大小, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 局部_值指针, 整数型, , , 

赋值 (局部_CLSID, 文本到GUDI (取图像编码CLSID自图像格式 (参数_图像格式)))
赋值 (全局_返回码, GdipGetEncoderParameterListSize (m_Image, 局部_CLSID, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetEncoderParameterList (m_Image, 局部_CLSID, 局部_size, 局部_字节集))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (参数_编码器.参数数量, 取字节集数据 (局部_字节集, #整数型, ))
重定义数组 (参数_编码器.编码器参数, 假, 参数_编码器.参数数量)
.计次循环首 (参数_编码器.参数数量, i)
    赋值 (参数_编码器.编码器参数 [i], 编码器Guid, GUID到文本 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 5), 16)))
    赋值 (参数_编码器.编码器参数 [i], 值成员数, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 21), 4), #整数型, ))
    赋值 (参数_编码器.编码器参数 [i], 值类型, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 25), 4), #整数型, ))
    .判断开始 (或者 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_字节型), 等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_未定义)))
        赋值 (局部_值大小, 参数_编码器.编码器参数 [i], 值成员数)
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_字符型))
        赋值 (局部_值大小, 参数_编码器.编码器参数 [i], 值成员数)
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_短整数型))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 2))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数型))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 4))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数对))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 8))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数范围))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 8))
    .判断 (等于 (参数_编码器.编码器参数 [i], 值类型, #编码器参数值类型_整数对范围))
        赋值 (局部_值大小, 相乘 (参数_编码器.编码器参数 [i], 值成员数, 16))
    .默认
        
    .判断结束
    赋值 (局部_值指针, 取字节集数据 (取字节集中间 (局部_字节集, 相加 (相乘 (相减 (i, 1), 28), 29), 4), #整数型, ))
    .如果真 (不等于 (局部_值指针, 0))
        赋值 (参数_编码器.编码器参数 [i], 值, 指针到字节集 (局部_值指针, 局部_值大小))
    .如果真结束
    
.计次循环尾 ()
返回 (等于 (全局_返回码, 0))

.子程序 取原始格式, 文本型, 公开, GdipGetImageRawFormat。返回“图像格式_”开头常量。
.局部变量 局部_CLSID, 字节集, , , 

赋值 (局部_CLSID, 取空白字节集 (16))
赋值 (全局_返回码, GdipGetImageRawFormat (m_Image, 局部_CLSID))
返回 (GUID到文本 (局部_CLSID))


.子程序 取边界矩形, 矩形F, 公开, GdipGetImageBounds。返回矩形范围
.参数 参数_单位, 整数型, 参考 可空, 提供整数型变量取返回值,指定该矩形的单位。“单位_”开头常量。

.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetImageBounds (m_Image, 局部_矩形, 参数_单位))
返回 (局部_矩形)


.子程序 取物理尺寸, 尺寸F, , GdipGetImageDimension
.局部变量 局部_尺寸, 尺寸F, , , 

赋值 (全局_返回码, GdipGetImageDimension (m_Image, 局部_尺寸.宽度, 局部_尺寸.高度))
返回 (局部_尺寸)

.子程序 取类型, 整数型, , GdipGetImageType。返回“图像类型_”开头常量。
.局部变量 局部_类型, 整数型, , , 

赋值 (全局_返回码, GdipGetImageType (m_Image, 局部_类型))
返回 (局部_类型)


.子程序 取宽度, 整数型, , GdipGetImageWidth
.局部变量 局部_宽度, 整数型, , , 

赋值 (全局_返回码, GdipGetImageWidth (m_Image, 局部_宽度))
返回 (局部_宽度)


.子程序 取高度, 整数型, , GdipGetImageHeight
.局部变量 局部_高度, 整数型, , , 

赋值 (全局_返回码, GdipGetImageHeight (m_Image, 局部_高度))
返回 (局部_高度)

.子程序 取水平分辨率, 小数型, , GdipGetImageHorizontalResolution。以“像素/英寸”为单位
.局部变量 局部_分辨率, 小数型, , , 

赋值 (全局_返回码, GdipGetImageHorizontalResolution (m_Image, 局部_分辨率))
返回 (局部_分辨率)


.子程序 取垂直分辨率, 小数型, , GdipGetImageVerticalResolution。以“像素/英寸”为单位
.局部变量 局部_分辨率, 小数型, , , 

赋值 (全局_返回码, GdipGetImageVerticalResolution (m_Image, 局部_分辨率))
返回 (局部_分辨率)

.子程序 取图像属性, 整数型, 公开, GdipGetImageFlags。返回“图像属性_”开头常量。
.局部变量 局部_属性, 整数型, , , 

赋值 (全局_返回码, GdipGetImageFlags (m_Image, 局部_属性))
返回 (局部_属性)


.子程序 取像素格式, 整数型, 公开, GdipGetImagePixelFormat。返回“像素格式_”开头常量。
.局部变量 局部_格式, 整数型, , , 

赋值 (全局_返回码, GdipGetImagePixelFormat (m_Image, 局部_格式))
返回 (局部_格式)

.子程序 取图像缩略图, 逻辑型, , GdipGetImageThumbnail
.参数 参数_缩略图宽度, 整数型, , 
.参数 参数_缩略图高度, 整数型, , 
.参数 参数_缩略图, GP图像, 参考, 返回一个缩略图的Gdip图像。

.局部变量 局部_缩略图, 整数型, , , 

赋值 (全局_返回码, GdipGetImageThumbnail (m_Image, 参数_缩略图宽度, 参数_缩略图高度, 局部_缩略图, 0, 0))
参数_缩略图.置指针 (局部_缩略图)
返回 (等于 (全局_返回码, 0))

.子程序 取帧数, 整数型, 公开, GdipImageGetFrameCount
.参数 参数_帧维面, 文本型, , “帧维面_”开头常量。

.局部变量 局部_帧数, 整数型, , , 

赋值 (全局_返回码, GdipImageGetFrameCount (m_Image, 文本到GUDI (参数_帧维面), 局部_帧数))
返回 (局部_帧数)


.子程序 取帧维面列表, 逻辑型, 公开, GdipImageGetFrameDimensionsList
.参数 参数_帧惟面, 文本型, 数组, “帧维面_”开头常量。

.局部变量 局部_cont, 整数型, , , 
.局部变量 局部_GUID, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipImageGetFrameDimensionsCount (m_Image, 局部_cont))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_GUID, 取空白字节集 (相乘 (16, 局部_cont)))
重定义数组 (参数_帧惟面, 假, 局部_cont)
赋值 (全局_返回码, GdipImageGetFrameDimensionsList (m_Image, 局部_GUID, 局部_cont))
.计次循环首 (局部_cont, i)
    赋值 (参数_帧惟面 [i], GUID到文本 (取字节集中间 (局部_GUID, 相加 (相乘 (相减 (i, 1), 16), 1), 16)))
.计次循环尾 ()
返回 (等于 (全局_返回码, 0))


.子程序 置活动帧, 逻辑型, 公开, GdipImageSelectActiveFrame
.参数 参数_帧维面, 文本型, , “帧维面_”开头常量。
.参数 参数_索引, 整数型, , 

赋值 (全局_返回码, GdipImageSelectActiveFrame (m_Image, 文本到GUDI (参数_帧维面), 参数_索引))
返回 (等于 (全局_返回码, 0))


.子程序 取各帧延时, 逻辑型, 公开, 
.参数 参数_延时, 整数型, 数组, 

.局部变量 局部_属性, 属性项目, , , 

.如果真 (等于 (取属性项目 (#属性标签_帧延时, 局部_属性), 假))
    返回 (假)
.如果真结束
重定义数组 (参数_延时, 假, 相除 (局部_属性.值大小, 4))
RtlMoveMemory_bin2intary (参数_延时, 局部_属性.值, 局部_属性.值大小)
返回 (真)

.子程序 取属性项目, 逻辑型, 公开, GdipGetPropertyItem
.参数 参数_属性标签, 整数型, , “属性标签_”开头常量。通常是通过“取属性标签列表()”方法来查看此图像有哪些属性。
.参数 参数_属性项目, 属性项目, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_缓冲区, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipGetPropertyItemSize (m_Image, 参数_属性标签, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_缓冲区, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetPropertyItem (m_Image, 参数_属性标签, 局部_size, 局部_缓冲区))
赋值 (i, 1)
赋值 (参数_属性项目.属性标签, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值大小, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值类型, 取字节集数据 (局部_缓冲区, #整数型, i))
赋值 (参数_属性项目.值, 取字节集中间 (局部_缓冲区, 相加 (i, 4), 参数_属性项目.值大小))

返回 (等于 (全局_返回码, 0))


.子程序 置属性项目, 逻辑型, , GdipSetPropertyItem
.参数 参数_属性项目, 属性项目, , 

赋值 (全局_返回码, GdipSetPropertyItem (m_Image, 参数_属性项目))
返回 (等于 (全局_返回码, 0))

.子程序 移除属性项目, 逻辑型, , GdipRemovePropertyItem
.参数 参数_属性标签, 整数型, , “属性标签_”开头常量。通常是通过“取属性标签列表()”方法来查看此图像有哪些属性。

赋值 (全局_返回码, GdipRemovePropertyItem (m_Image, 参数_属性标签))
返回 (等于 (全局_返回码, 0))

.子程序 取属性标签列表, 整数型, , GdipGetPropertyIdList。返回属性标签数。
.参数 参数_属性标签数组, 整数型, 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPropertyCount (m_Image, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_属性标签数组, 假, 局部_count)
赋值 (全局_返回码, GdipGetPropertyIdList (m_Image, 局部_count, 参数_属性标签数组))
返回 (局部_count)

.子程序 旋转翻转, 逻辑型, , GdipImageRotateFlip
.参数 参数_旋转翻转类型, 整数型, , “旋转翻转_”开头常量。

赋值 (全局_返回码, GdipImageRotateFlip (m_Image, 参数_旋转翻转类型))
返回 (等于 (全局_返回码, 0))


.子程序 取颜色调色板, 逻辑型, 公开, GdipGetImagePalette
.参数 参数_颜色调色板, 颜色调色板, 参考, 

.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 i, 整数型, , , 

赋值 (全局_返回码, GdipGetImagePaletteSize (m_Image, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImagePalette (m_Image, 局部_字节集, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (i, 1)
赋值 (参数_颜色调色板.标志, 取字节集数据 (局部_字节集, #整数型, i))
赋值 (参数_颜色调色板.数量, 取字节集数据 (局部_字节集, #整数型, i))
重定义数组 (参数_颜色调色板.ARGB颜色, 假, 参数_颜色调色板.数量)
RtlMoveMemory_bin2intary (参数_颜色调色板.ARGB颜色, 取字节集右边 (局部_字节集, 相减 (局部_size, 8)), 相减 (局部_size, 8))
返回 (等于 (全局_返回码, 0))

.子程序 置颜色调色板, 逻辑型, , GdipSetImagePalette
.参数 参数_颜色调色板, 颜色调色板, , 

赋值 (全局_返回码, GdipSetImagePalette (m_Image, 参数_颜色调色板))
返回 (等于 (全局_返回码, 0))


.类模块 GP画笔, Gdiplus基类, , Pen

.程序集变量 m_Pen, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用

销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Pen, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeletePen。
.如果真 (等于 (m_Pen, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePen (m_Pen))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自颜色, 逻辑型, , GdipCreatePen1
.参数 参数_ARGB颜色, 整数型, , 需要将RGB颜色转换为ARGB颜色。
.参数 参数_宽度, 小数型, , 
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。默认为：“单位_世界坐标”

赋值 (全局_返回码, GdipCreatePen1 (参数_ARGB颜色, 参数_宽度, 参数_单位, m_Pen))
置指针 (m_Pen)
返回 (等于 (全局_返回码, 0))


.子程序 创建自画刷, 逻辑型, , GdipCreatePen2
.参数 参数_画刷, GP画刷, 参考, 
.参数 参数_宽度, 小数型, , 
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。默认为：“单位_世界坐标”

赋值 (全局_返回码, GdipCreatePen2 (参数_画刷.取指针 (), 参数_宽度, 参数_单位, m_Pen))
置指针 (m_Pen)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, , GdipClonePen
.参数 参数_画笔, GP画笔, 参考, 

.局部变量 局部_画笔, 整数型, , , 

赋值 (全局_返回码, GdipClonePen (m_Pen, 局部_画笔))
参数_画笔.置指针 (局部_画笔)
返回 (等于 (全局_返回码, 0))


.子程序 取宽度, 小数型, , GdipGetPenWidth
.局部变量 局部_宽度, 小数型, , , 

赋值 (全局_返回码, GdipGetPenWidth (m_Pen, 局部_宽度))
返回 (局部_宽度)


.子程序 置宽度, 逻辑型, , GdipSetPenWidth
.参数 参数_宽度, 小数型, , 

赋值 (全局_返回码, GdipSetPenWidth (m_Pen, 参数_宽度))
返回 (等于 (全局_返回码, 0))


.子程序 取单位, 整数型, , GdipGetPenUnit。返回“单位_”开头常量。
.局部变量 局部_单位, 小数型, , , 

赋值 (全局_返回码, GdipGetPenUnit (m_Pen, 局部_单位))
返回 (局部_单位)


.子程序 置单位, 逻辑型, , GdipSetPenUnit
.参数 参数_单位, 小数型, , “单位_”开头常量。

赋值 (全局_返回码, GdipSetPenUnit (m_Pen, 参数_单位))
返回 (等于 (全局_返回码, 0))

.子程序 置线帽197819, 逻辑型, , GdipSetPenLineCap197819
.参数 参数_起点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_终点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_虚线帽, 整数型, , “虚线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineCap197819 (m_Pen, 参数_起点帽, 参数_终点帽, 参数_虚线帽))
返回 (等于 (全局_返回码, 0))


.子程序 置线帽, 逻辑型, , GdipSetPenLineCap
.参数 参数_起点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_终点帽, 整数型, , “线帽样式_”开头常量。
.参数 参数_虚线帽, 整数型, , “虚线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineCap (m_Pen, 参数_起点帽, 参数_终点帽, 参数_虚线帽))
返回 (等于 (全局_返回码, 0))

.子程序 置起点线帽, 逻辑型, , GdipSetPenStartCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenStartCap (m_Pen, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))


.子程序 置终点线帽, 逻辑型, , GdipSetPenEndCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量。

赋值 (全局_返回码, GdipSetPenEndCap (m_Pen, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))

.子程序 置虚线帽, 逻辑型, , GdipSetPenDashCap
.参数 参数_虚线帽样式, 整数型, , “虚线帽样式_”开头常量

赋值 (全局_返回码, GdipSetPenDashCap197819 (m_Pen, 参数_虚线帽样式))
返回 (等于 (全局_返回码, 0))


.子程序 取起点线帽, 整数型, , GdipGetPenStartCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenStartCap (m_Pen, 局部_线帽))
返回 (局部_线帽)


.子程序 取终点线帽, 整数型, , GdipGetPenEndCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenEndCap (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 取虚线帽197819, 整数型, , GdipGetPenDashCap197819
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCap197819 (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 取虚线帽, 整数型, , GdipGetPenDashCap
.局部变量 局部_线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCap (m_Pen, 局部_线帽))
返回 (局部_线帽)

.子程序 置连线方式, 逻辑型, , GdipSetPenLineJoin
.参数 参数_连线方式, 整数型, , “连线方式_”开头常量。

赋值 (全局_返回码, GdipSetPenLineJoin (m_Pen, 参数_连线方式))
返回 (等于 (全局_返回码, 0))


.子程序 取连线方式, 整数型, , GdipGetPenLineJoin。返回“连线方式_”开头常量。
.局部变量 局部_连线方式, 整数型, , , 

赋值 (全局_返回码, GdipGetPenLineJoin (m_Pen, 局部_连线方式))
返回 (局部_连线方式)


.子程序 置自定起点线帽, 逻辑型, , GdipSetPenCustomStartCap
.参数 参数_自定义线帽, GP自定义线帽, , 

赋值 (全局_返回码, GdipSetPenCustomStartCap (m_Pen, 参数_自定义线帽.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取自定起点线帽, 逻辑型, , GdipSetPenCustomStartCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCustomStartCap (m_Pen, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))


.子程序 置自定终点线帽, 逻辑型, , GdipSetPenCustomEndCap
.参数 参数_自定义线帽, GP自定义线帽, , 

赋值 (全局_返回码, GdipSetPenCustomEndCap (m_Pen, 参数_自定义线帽.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取自定终点线帽, 逻辑型, , GdipGetPenCustomEndCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCustomEndCap (m_Pen, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))

.子程序 置斜接限制, 逻辑型, 公开, GdipSetPenMiterLimit
.参数 参数_斜接限制, 小数型, , 

赋值 (全局_返回码, GdipSetPenMiterLimit (m_Pen, 参数_斜接限制))
返回 (等于 (全局_返回码, 0))


.子程序 取斜接限制, 小数型, , GdipGetPenMiterLimit
.局部变量 局部_斜接限制, 小数型, , , 

赋值 (全局_返回码, GdipGetPenMiterLimit (m_Pen, 局部_斜接限制))
返回 (局部_斜接限制)

.子程序 置对齐方式, 逻辑型, , GdipSetPenMode
.参数 参数_对齐方式, 整数型, , “画笔对齐方式_”开头常量。

赋值 (全局_返回码, GdipSetPenMode (m_Pen, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))

.子程序 取对齐方式, 整数型, , GdipGetPenMode。返回“画笔对齐方式_”开头常量。
.局部变量 局部_对齐方式, 整数型, , , 

赋值 (全局_返回码, GdipGetPenMode (m_Pen, 局部_对齐方式))
返回 (局部_对齐方式)

.子程序 变形置矩阵, 逻辑型, , GdipSetPenTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetPenTransform (m_Pen, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, , GdipGetpenTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetPenTransform (m_Pen, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形重置, 逻辑型, , GdipResetPenTransform
赋值 (全局_返回码, GdipResetPenTransform (m_Pen))
返回 (等于 (全局_返回码, 0))

.子程序 变形相乘, 逻辑型, , GdipMultiplyPenTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyPenTransform (m_Pen, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形旋转, 逻辑型, , GdipRotatePenTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotatePenTransform (m_Pen, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形缩放, 逻辑型, , GdipScalePenTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScalePenTransform (m_Pen, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形平移, 逻辑型, , GdipTranslatePenTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslatePenTransform (m_Pen, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 取颜色, 整数型, , GdipGetPenColor。返回ARGB颜色值。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetPenColor (m_Pen, 局部_ARGB颜色))
返回 (局部_ARGB颜色)


.子程序 置颜色, 逻辑型, , GdipSetPenColor。
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetPenColor (m_Pen, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 置画刷, 逻辑型, , GdipSetPenBrushFill
.参数 参数_画刷, GP画刷, , 

赋值 (全局_返回码, GdipSetPenBrushFill (m_Pen, 参数_画刷.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取画刷, 逻辑型, , GdipGetPenBrushFill
.参数 参数_画刷, GP画刷, 参考, 

.局部变量 局部_画刷, 整数型, , , 

赋值 (全局_返回码, GdipGetPenBrushFill (m_Pen, 局部_画刷))
参数_画刷.置指针 (局部_画刷)
返回 (等于 (全局_返回码, 0))


.子程序 取填充类型, 整数型, , GdipGetPenFillType。返回“画笔类型_”开头常量。
.局部变量 局部_填充类型, 整数型, , , 

赋值 (全局_返回码, GdipGetPenFillType (m_Pen, 局部_填充类型))
返回 (局部_填充类型)


.子程序 置虚线类型, 逻辑型, , GdipSetPenDashStyle
.参数 参数_虚线类型, 整数型, , “虚线类型_”开头常量。

赋值 (全局_返回码, GdipSetPenDashStyle (m_Pen, 参数_虚线类型))
返回 (等于 (全局_返回码, 0))


.子程序 取虚线类型, 整数型, , GdipGetPenDashStyle。返回“虚线类型_”开头常量。
.局部变量 局部_虚线类型, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashStyle (m_Pen, 局部_虚线类型))
返回 (局部_虚线类型)

.子程序 取虚线偏移, 小数型, , GdipGetPenDashOffset。
.局部变量 局部_偏移, 小数型, , , 

赋值 (全局_返回码, GdipGetPenDashOffset (m_Pen, 局部_偏移))
返回 (局部_偏移)


.子程序 置虚线偏移, 逻辑型, , GdipSetPenDashOffset。
.参数 参数_偏移, 小数型, , 

赋值 (全局_返回码, GdipSetPenDashOffset (m_Pen, 参数_偏移))
返回 (等于 (全局_返回码, 0))


.子程序 取虚线格式, 整数型, , GdipGetPenDashArray。返回虚线格式数量。
.参数 参数_虚线格式, 小数型, 参考 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPenDashCount (m_Pen, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_虚线格式, 假, 局部_count)
赋值 (全局_返回码, GdipGetPenDashArray (m_Pen, 参数_虚线格式, 局部_count))
返回 (局部_count)


.子程序 置虚线格式, 逻辑型, 公开, GdipSetPenDashArray。
.参数 参数_虚线格式, 小数型, 数组, 第一个成员表示虚线长度，第二个成员表示空白长度，以此类推。

赋值 (全局_返回码, GdipSetPenDashArray (m_Pen, 参数_虚线格式, 取数组成员数 (参数_虚线格式)))
返回 (等于 (全局_返回码, 0))

.子程序 置分割数组, 逻辑型, , GdipSetPenCompoundArray。将画笔画出的线分割成若干条。
.参数 参数_分割数组, 小数型, 数组, 成员值必须是0到1之间的小数，且必须是升序。如：{0,0.2,0.7,1}，表示分割成两条线，第1条线宽度为20%，中间的空白宽度为50%，第2条线宽度为30%

赋值 (全局_返回码, GdipSetPenCompoundArray (m_Pen, 参数_分割数组, 取数组成员数 (参数_分割数组)))
返回 (等于 (全局_返回码, 0))


.子程序 取分割数组, 整数型, , GdipGetPenCompoundArray。返回分割数。
.参数 参数_分割数组, 小数型, 参考 数组, 

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPenCompoundCount (m_Pen, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_分割数组, 假, 局部_count)
赋值 (全局_返回码, GdipGetPenCompoundArray (m_Pen, 参数_分割数组, 局部_count))
返回 (局部_count)


.类模块 GP画刷, Gdiplus基类, , Brush

.程序集变量 m_Brush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Brush, 参数_指针)
方法_子置指针 (m_Brush)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, GdipDeleteBrush。
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_Brush, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteBrush (m_Brush))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, , GdipCloneBrush。将当前画刷复制到“参数_画刷”。
.参数 参数_画刷, GP画刷, 参考, 

.局部变量 局部_brush, 整数型, , , 

赋值 (全局_返回码, GdipCloneBrush (m_Brush, 局部_brush))
参数_画刷.置指针 (局部_brush)
返回 (等于 (全局_返回码, 0))

.子程序 取类型, 整数型, , GdipGetBrushType。返回“#画刷类型_”开头常量。
.局部变量 局部_类型, 整数型, , , 

赋值 (全局_返回码, GdipGetBrushType (m_Brush, 局部_类型))
返回 (局部_类型)


.类模块 GP字体, Gdiplus基类, , Font

.程序集变量 m_Font, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Font, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteFont
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_Font, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteFont (m_Font))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, , GdipCreateFont
.参数 参数_字体族, GP字体族, , 
.参数 参数_字体大小, 小数型, , 字体大小
.参数 参数_风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。

赋值 (全局_返回码, GdipCreateFont (参数_字体族.取指针 (), 参数_字体大小, 参数_风格, 参数_单位, m_Font))
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 创建自默认字体, 逻辑型, , 
.局部变量 局部_hfont, 整数型, , , 
.局部变量 局部_逻辑字体, 整数型, , , 
.局部变量 局部_DC, 整数型, , , 

赋值 (局部_hfont, GetStockObject (#DEFAULT_GUI_FONT))
赋值 (局部_逻辑字体, new (60))
.如果真 (等于 (GetObject (局部_hfont, 60, 局部_逻辑字体), 0))
    返回 (假)
.如果真结束
赋值 (局部_DC, GetDC (0))
赋值 (全局_返回码, GdipCreateFontFromLogfontA (局部_DC, 局部_逻辑字体, m_Font))
ReleaseDC (0, 局部_DC)
delete (局部_逻辑字体)
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))

.子程序 创建自名称, 逻辑型, 公开, GdipCreateFont
.参数 参数_名称, 文本型, , 
.参数 参数_尺寸, 小数型, , 字体大小
.参数 参数_风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_单位, 整数型, 可空, “单位_”开头常量。

.局部变量 局部_字体族, GP字体族, , , 

局部_字体族.创建自名称 (参数_名称)
赋值 (全局_返回码, GdipCreateFont (局部_字体族.取指针 (), 参数_尺寸, 参数_风格, 参数_单位, m_Font))
置指针 (m_Font)
局部_字体族.销毁 ()
返回 (等于 (全局_返回码, 0))


.子程序 创建自DC, 逻辑型, 公开, GdipCreateFontFromDC
.参数 参数_hdc, 整数型, , 设备场景句柄。

赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 创建自hFont, 逻辑型, 公开, 
.参数 参数_hdc, 整数型, , 设备场景句柄
.参数 参数_hFont, 整数型, , 字体句柄

.局部变量 局部_逻辑字体, 整数型, , , 

.如果 (不等于 (参数_hFont, 0))
    赋值 (局部_逻辑字体, new (60))
    .如果 (不等于 (GetObject (参数_hFont, 60, 局部_逻辑字体), 0))
        赋值 (全局_返回码, GdipCreateFontFromLogfontA (参数_hdc, 局部_逻辑字体, m_Font))
    .否则
        赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
    .如果结束
    delete (局部_逻辑字体)
.否则
    赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
.如果结束
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))

.子程序 创建自逻辑字体, 逻辑型, 公开, GdipCreateFontFromLogfontA
.参数 参数_hdc, 整数型, , 设备场景句柄。
.参数 参数_pLogfont, 整数型, , logfont的指针。

.如果 (不等于 (参数_pLogfont, 0))
    赋值 (全局_返回码, GdipCreateFontFromLogfontA (参数_hdc, 参数_pLogfont, m_Font))
.否则
    赋值 (全局_返回码, GdipCreateFontFromDC (参数_hdc, m_Font))
.如果结束
置指针 (m_Font)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, , GdipCloneFont
.参数 参数_字体, GP字体, 参考, 

.局部变量 局部_字体, 整数型, , , 

赋值 (全局_返回码, GdipCloneFont (m_Font, 局部_字体))
参数_字体.置指针 (局部_字体)
返回 (等于 (全局_返回码, 0))


.子程序 取字体族, 逻辑型, , GdipGetFamily
.参数 参数_字体族, GP字体族, 参考, 

.局部变量 局部_字体族, 整数型, , , 

赋值 (全局_返回码, GdipGetFamily (m_Font, 局部_字体族))
参数_字体族.置指针 (局部_字体族)
返回 (等于 (全局_返回码, 0))


.子程序 取风格, 整数型, 公开, GdipGetFontStyle。返回“字体风格_”开头常量。
.局部变量 局部_风格, 整数型, , , 

赋值 (全局_返回码, GdipGetFontStyle (m_Font, 局部_风格))
返回 (局部_风格)


.子程序 取尺寸, 小数型, , GdipGetFontSize
.局部变量 局部_尺寸, 小数型, , , 

赋值 (全局_返回码, GdipGetFontSize (m_Font, 局部_尺寸))
返回 (局部_尺寸)


.子程序 取单位, 整数型, , GdipGetFontUnit。“单位_”开头常量。
.局部变量 局部_单位, 整数型, , , 

赋值 (全局_返回码, GdipGetFontUnit (m_Font, 局部_单位))
返回 (局部_单位)

.子程序 取高度, 小数型, 公开, GdipGetFontHeight
.参数 参数_图形, GP图形, 可空, 参数为空时，字体单位必须是像素。

.局部变量 局部_高度, 小数型, , , 

赋值 (全局_返回码, GdipGetFontHeight (m_Font, 参数_图形.取指针 (), 局部_高度))
返回 (局部_高度)


.子程序 取高度自分辨率, 小数型, 公开, GdipGetFontHeightGivenDPI
.参数 参数_分辨率, 小数型, , 

.局部变量 局部_高度, 小数型, , , 

赋值 (全局_返回码, GdipGetFontHeightGivenDPI (m_Font, 参数_分辨率, 局部_高度))
返回 (局部_高度)


.子程序 取逻辑字体, 逻辑型, 公开, GdipGetLogFontA
.参数 参数_图形, GP图形, , 
.参数 参数_逻辑字体, 字节集, 参考, LogFontA结构的字节集形式，长度60。

赋值 (全局_返回码, GdipGetLogFontA (m_Font, 参数_图形.取指针 (), lstrcpyn_字节集 (参数_逻辑字体, 参数_逻辑字体, 0)))
返回 (等于 (全局_返回码, 0))


.类模块 GP字体族, Gdiplus基类, , FontFamily

.程序集变量 m_FontFamily, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_FontFamily, 参数_指针)

.子程序 销毁, 逻辑型, , GdipDeleteFontFamily。
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_FontFamily, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteFontFamily (m_FontFamily))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建自名称, 逻辑型, 公开, GdipCreateFontFamilyFromName
.参数 参数_名称, 文本型, , 
.参数 参数_字体集, GP字体集, 可空, 

赋值 (全局_返回码, GdipCreateFontFamilyFromName (GdiplusA2W (参数_名称), 参数_字体集.取指针 (), m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用无衬线, 逻辑型, , GdipGetGenericFontFamilySansSerif
赋值 (全局_返回码, GdipGetGenericFontFamilySansSerif (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用衬线, 逻辑型, , GdipGetGenericFontFamilySerif
赋值 (全局_返回码, GdipGetGenericFontFamilySerif (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用等宽, 逻辑型, , GdipGetGenericFontFamilyMonospace
赋值 (全局_返回码, GdipGetGenericFontFamilyMonospace (m_FontFamily))
置指针 (m_FontFamily)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, , GdipCloneFontFamily
.参数 参数_字体族, GP字体族, 参考, 

.局部变量 局部_字体族, 整数型, , , 

赋值 (全局_返回码, GdipCloneFontFamily (m_FontFamily, 局部_字体族))
参数_字体族.置指针 (局部_字体族)
返回 (等于 (全局_返回码, 0))


.子程序 取名称, 文本型, 公开, GdipGetFamilyName
.局部变量 局部_名称, 字节集, , , 

赋值 (局部_名称, 取空白字节集 (64))
赋值 (全局_返回码, GdipGetFamilyName (m_FontFamily, 局部_名称, 0))
返回 (GdiplusW2A (lstrcpyn_字节集 (局部_名称, 局部_名称, 0)))


.子程序 是否有效风格, 逻辑型, , GdipIsStyleAvailable
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsStyleAvailable (m_FontFamily, 参数_字体风格, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 取EM高度, 短整数型, , GdipGetEmHeight。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_EM高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetEmHeight (m_FontFamily, 参数_字体风格, 局部_EM高度))
返回 (局部_EM高度)

.子程序 取上区高度, 短整数型, , GdipGetCellAscent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_上区高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetCellAscent (m_FontFamily, 参数_字体风格, 局部_上区高度))
返回 (局部_上区高度)


.子程序 取下区高度, 短整数型, , GdipGetCellDescent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_下区高度, 短整数型, , , 

赋值 (全局_返回码, GdipGetCellDescent (m_FontFamily, 参数_字体风格, 局部_下区高度))
返回 (局部_下区高度)

.子程序 取行间距, 短整数型, , GdipGetCellDescent。以字体设计单位为单位
.参数 参数_字体风格, 整数型, , “字体风格_”开头常量。

.局部变量 局部_行间距, 短整数型, , , 

赋值 (全局_返回码, GdipGetLineSpacing (m_FontFamily, 参数_字体风格, 局部_行间距))
返回 (局部_行间距)

.类模块 GP区域, Gdiplus基类, , Region

.程序集变量 m_Region, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Region, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteRegion。
.如果真 (等于 (m_Region, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteRegion (m_Region))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateRegion
赋值 (全局_返回码, GdipCreateRegion (m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形, 逻辑型, 公开, GdipCreateRegionRect
.参数 参数_矩形, 矩形F, , 

赋值 (全局_返回码, GdipCreateRegionRect (参数_矩形, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形I, 逻辑型, 公开, GdipCreateRegionRectI
.参数 参数_矩形, 矩形L, , 

赋值 (全局_返回码, GdipCreateRegionRectI (参数_矩形, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))

.子程序 创建自路径, 逻辑型, 公开, GdipCreateRegionPath
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipCreateRegionPath (参数_路径.取指针 (), m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自句柄, 逻辑型, 公开, GdipCreateRegionHrgn
.参数 参数_hRgn, 整数型, , 区域句柄

赋值 (全局_返回码, GdipCreateRegionHrgn (参数_hRgn, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))


.子程序 创建自数据, 逻辑型, 公开, GdipCreateRegionRgnData
.参数 参数_数据, 字节集, , 
.参数 参数_数据大小, 整数型, , 

赋值 (全局_返回码, GdipCreateRegionRgnData (参数_数据, 参数_数据大小, m_Region))
置指针 (m_Region)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneRegion
.参数 参数_区域, GP区域, 参考, 

.局部变量 局部_区域, 整数型, , , 

赋值 (全局_返回码, GdipCloneRegion (m_Region, 局部_区域))
参数_区域.置指针 (局部_区域)
返回 (等于 (全局_返回码, 0))

.子程序 置为无限, 逻辑型, 公开, GdipSetInfinite
赋值 (全局_返回码, GdipSetInfinite (m_Region))
返回 (等于 (全局_返回码, 0))


.子程序 置为空, 逻辑型, 公开, GdipSetEmpty
赋值 (全局_返回码, GdipSetEmpty (m_Region))
返回 (等于 (全局_返回码, 0))

.子程序 合并矩形, 逻辑型, 公开, GdipCombineRegionRect
.参数 参数_矩形, 矩形F, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRect (m_Region, 参数_矩形, 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 合并矩形I, 逻辑型, 公开, GdipCombineRegionRectI
.参数 参数_矩形, 矩形L, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRectI (m_Region, 参数_矩形, 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 合并区域, 逻辑型, 公开, GdipCombineRegionRegion
.参数 参数_区域, GP区域, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionRegion (m_Region, 参数_区域.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))


.子程序 合并路径, 逻辑型, 公开, GdipCombineRegionPath
.参数 参数_路径, GP路径, , 
.参数 参数_合并模式, 整数型, 可空, “合并模式_”开头常量

.如果真 (是否为空 (参数_合并模式))
    赋值 (参数_合并模式, #合并模式_交集)
.如果真结束
赋值 (全局_返回码, GdipCombineRegionPath (m_Region, 参数_路径.取指针 (), 参数_合并模式))
返回 (等于 (全局_返回码, 0))

.子程序 平移区域, 逻辑型, 公开, GdipTranslateRegion
.参数 参数_水平偏移量, 小数型, , 水平偏移的量。
.参数 参数_垂直偏移量, 小数型, , 垂直偏移的量。

赋值 (全局_返回码, GdipTranslateRegion (m_Region, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 平移区域I, 逻辑型, 公开, GdipTranslateRegionI
.参数 参数_水平偏移量, 整数型, , 水平偏移的量。
.参数 参数_垂直偏移量, 整数型, , 垂直偏移的量。

赋值 (全局_返回码, GdipTranslateRegionI (m_Region, 参数_水平偏移量, 参数_垂直偏移量))
返回 (等于 (全局_返回码, 0))

.子程序 变换区域, 逻辑型, 公开, GdipTransformRegion
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipTransformRegion (m_Region, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取矩形边界, 矩形F, 公开, GdipGetRegionBounds
.参数 参数_图形, GP图形, , 

.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetRegionBounds (m_Region, 参数_图形.取指针 (), 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形边界I, 矩形L, 公开, GdipGetRegionBoundsI
.参数 参数_图形, GP图形, , 

.局部变量 局部_矩形, 矩形L, , , 

赋值 (全局_返回码, GdipGetRegionBoundsI (m_Region, 参数_图形.取指针 (), 局部_矩形))
返回 (局部_矩形)

.子程序 取数据大小, 整数型, 公开, GdipGetRegionDataSize
.局部变量 局部_size, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionDataSize (m_Region, 局部_size))
返回 (局部_size)


.子程序 取数据, 字节集, 公开, GdipGetRegionData
.参数 参数_数据大小, 整数型, , 
.参数 参数_填充大小, 整数型, 参考 可空, 

.局部变量 局部_数据, 字节集, , , 

赋值 (局部_数据, 取空白字节集 (参数_数据大小))
赋值 (全局_返回码, GdipGetRegionData (m_Region, 局部_数据, 参数_数据大小, 参数_填充大小))
返回 (局部_数据)


.子程序 取区域句柄, 整数型, 公开, GdipGetRegionHRgn。返回区域句柄。
.参数 参数_图形, GP图形, , 

.局部变量 局部_hRgn, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionHRgn (m_Region, 参数_图形.取指针 (), 局部_hRgn))
返回 (局部_hRgn)

.子程序 是否为空, 逻辑型, 公开, GdipIsEmptyRegion
.参数 参数_图形, GP图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsEmptyRegion (m_Region, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否为无限, 逻辑型, 公开, GdipIsInfiniteRegion
.参数 参数_图形, GP图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsInfiniteRegion (m_Region, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否相等, 逻辑型, 公开, GdipIsEqualRegion
.参数 参数_区域, GP区域, , 
.参数 参数_图形, GP图形, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsEqualRegion (m_Region, 参数_区域.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标, 逻辑型, 公开, GdipIsVisibleRegionPoint
.参数 参数_坐标, 坐标F, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionPoint (m_Region, 参数_坐标.x, 参数_坐标.y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标I, 逻辑型, 公开, GdipIsVisibleRegionPointI
.参数 参数_坐标, 坐标L, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionPointI (m_Region, 参数_坐标.x, 参数_坐标.y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见矩形, 逻辑型, 公开, GdipIsVisibleRegionRect
.参数 参数_矩形, 矩形F, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionRect (m_Region, 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见矩形I, 逻辑型, 公开, GdipIsVisibleRegionRectI
.参数 参数_矩形, 矩形L, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisibleRegionRectI (m_Region, 参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 取扫描数, 整数型, 公开, GdipGetRegionScansCount
.参数 参数_矩阵, GP矩阵, , 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)

.子程序 取扫描矩形, 整数型, 公开, GdipGetRegionScans
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩形, 矩形F, 数组, 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_矩形, 假, 局部_数量)
赋值 (全局_返回码, GdipGetRegionScans (m_Region, 参数_矩形, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)


.子程序 取扫描矩形I, 整数型, 公开, GdipGetRegionScansI
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩形, 矩形L, 数组, 

.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipGetRegionScansCount (m_Region, 局部_数量, 参数_矩阵.取指针 ()))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_矩形, 假, 局部_数量)
赋值 (全局_返回码, GdipGetRegionScansI (m_Region, 参数_矩形, 局部_数量, 参数_矩阵.取指针 ()))
返回 (局部_数量)

.类模块 GP路径, Gdiplus基类, , Path

.程序集变量 m_Path, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Path, 参数_指针)

.子程序 销毁, 逻辑型, , GdipDeletePath。
.如果真 (等于 (m_Path, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePath (m_Path))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreatePath
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath (参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))

.子程序 创建自坐标组, 逻辑型, 公开, GdipCreatePath2
.参数 参数_坐标, 坐标F, 数组, 
.参数 参数_类型, 字节型, 数组, “路径点类型_”开头常量。
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath2 (参数_坐标, 参数_类型, 取数组成员数 (参数_类型), 参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))


.子程序 创建自坐标组I, 逻辑型, 公开, GdipCreatePath2
.参数 参数_坐标, 坐标L, 数组, 
.参数 参数_类型, 字节型, 数组, “路径点类型_”开头常量。
.参数 参数_填充模式, 整数型, 可空, “填充模式_”开头常量。默认为“#填充模式_交替”

.如果真 (是否为空 (参数_填充模式))
    赋值 (参数_填充模式, #填充模式_交替)
.如果真结束
赋值 (全局_返回码, GdipCreatePath2I (参数_坐标, 参数_类型, 取数组成员数 (参数_坐标), 参数_填充模式, m_Path))
置指针 (m_Path)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipClonePath
.参数 参数_路径, GP路径, 参考, 

.局部变量 局部_路径, 整数型, , , 

赋值 (全局_返回码, GdipClonePath (m_Path, 局部_路径))
参数_路径.置指针 (局部_路径)
返回 (等于 (全局_返回码, 0))

.子程序 重置, 逻辑型, 公开, GdipResetPath
赋值 (全局_返回码, GdipResetPath (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 取填充模式, 整数型, , GdipGetPathFillMode。返回“填充模式_”开头常量
.局部变量 局部_填充模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPathFillMode (m_Path, 局部_填充模式))
返回 (局部_填充模式)


.子程序 置填充模式, 逻辑型, , GdipSetPathFillMode
.参数 参数_填充模式, 整数型, , “填充模式_”开头常量

赋值 (全局_返回码, GdipSetPathFillMode (m_Path, 参数_填充模式))
返回 (等于 (全局_返回码, 0))

.子程序 取路径数据, 逻辑型, , GdipGetPathData。
.参数 参数_路径数据, 路径数据, 参考, 

.局部变量 局部_总数, 整数型, , , 
.局部变量 局部_PathData, PathData, , , 

赋值 (全局_返回码, GdipGetPointCount (m_Path, 局部_总数))
.如果真 (不等于 (全局_返回码, 0))
    返回 (假)
.如果真结束
赋值 (局部_PathData.Count, 局部_总数)
重定义数组 (参数_路径数据.坐标组, 假, 局部_总数)
重定义数组 (参数_路径数据.类型组, 假, 局部_总数)
.如果真 (小于或等于 (局部_PathData.Count, 0))
    返回 (假)
.如果真结束
赋值 (局部_PathData.Points, new (相乘 (8, 局部_总数)))
赋值 (局部_PathData.Types, new (局部_总数))
赋值 (全局_返回码, GdipGetPathData (m_Path, 局部_PathData))
.如果真 (不等于 (全局_返回码, 0))
    delete (局部_PathData.Points)
    delete (局部_PathData.Types)
    返回 (假)
.如果真结束
赋值 (参数_路径数据.总数, 局部_PathData.Count)
RtlMoveMemory_points (参数_路径数据.坐标组, 局部_PathData.Points, 相乘 (8, 局部_总数))
RtlMoveMemory_bytes (参数_路径数据.类型组, 局部_PathData.Types, 局部_总数)
delete (局部_PathData.Points)
delete (局部_PathData.Types)
返回 (等于 (全局_返回码, 0))

.子程序 取路径类型组, 逻辑型, , GdipGetPathTypes
.参数 参数_类型, 字节型, 参考 数组, 返回“路径点类型_”开头常量。
.参数 参数_总数, 整数型, 可空, 默认为“取坐标数()”的返回值。

.如果真 (是否为空 (参数_总数))
    赋值 (全局_返回码, GdipGetPointCount (m_Path, 参数_总数))
    .如果真 (或者 (不等于 (全局_返回码, 0), 等于 (参数_总数, 0)))
        返回 (假)
    .如果真结束
    
.如果真结束
重定义数组 (参数_类型, 假, 参数_总数)
赋值 (全局_返回码, GdipGetPathTypes (m_Path, 参数_类型, 参数_总数))
返回 (等于 (全局_返回码, 0))

.子程序 取路径坐标组, 逻辑型, , GdipGetPathPoints
.参数 参数_坐标, 坐标F, 参考 数组, 
.参数 参数_总数, 整数型, 可空, 默认为“取坐标数()”的返回值。

.如果真 (是否为空 (参数_总数))
    赋值 (全局_返回码, GdipGetPointCount (m_Path, 参数_总数))
    .如果真 (或者 (不等于 (全局_返回码, 0), 等于 (参数_总数, 0)))
        返回 (假)
    .如果真结束
    
.如果真结束
重定义数组 (参数_坐标, 假, 参数_总数)
赋值 (全局_返回码, GdipGetPathPoints (m_Path, 参数_坐标, 参数_总数))
返回 (等于 (全局_返回码, 0))


.子程序 开始图形, 逻辑型, , GdipStartPathFigure。不闭合当前图形即开始一个新图形。后面添加到该路径的所有点都被添加到此新图形中。
赋值 (全局_返回码, GdipStartPathFigure (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 关闭图形, 逻辑型, 公开, GdipClosePathFigure。闭合当前图形并开始新的图形。如果当前图形包含一系列相互连接的直线和曲线，该方法通过连接一条从终结点到起始点的直线，闭合该环回。
赋值 (全局_返回码, GdipClosePathFigure (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 关闭所有图形, 逻辑型, , GdipClosePathFigures。闭合此路径中所有开放的图形并开始一个新图形。它通过连接一条从图形的终结点到起始点的直线，闭合每一开放的图形。 
赋值 (全局_返回码, GdipClosePathFigures (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 置标记, 逻辑型, , GdipSetPathMarker。
赋值 (全局_返回码, GdipSetPathMarker (m_Path))
返回 (等于 (全局_返回码, 0))


.子程序 清除标记, 逻辑型, 公开, GdipClearPathMarkers
赋值 (全局_返回码, GdipClearPathMarkers (m_Path))
返回 (等于 (全局_返回码, 0))

.子程序 反向, 逻辑型, 公开, GdipReversePath
赋值 (全局_返回码, GdipReversePath (m_Path))
返回 (等于 (全局_返回码, 0))


.子程序 取最后坐标, 坐标F, , GdipGetPathLastPoint
.局部变量 局部_坐标, 坐标F, , , 

赋值 (全局_返回码, GdipGetPathLastPoint (m_Path, 局部_坐标))
返回 (局部_坐标)


.子程序 添加直线, 逻辑型, , GdipAddPathLine
.参数 参数_起点X, 小数型, , 
.参数 参数_起点Y, 小数型, , 
.参数 参数_终点X, 小数型, , 
.参数 参数_终点Y, 小数型, , 

赋值 (全局_返回码, GdipAddPathLine (m_Path, 参数_起点X, 参数_起点Y, 参数_终点X, 参数_终点Y))
返回 (等于 (全局_返回码, 0))


.子程序 添加直线I, 逻辑型, , GdipAddPathLineI
.参数 参数_起点X, 整数型, , 
.参数 参数_起点Y, 整数型, , 
.参数 参数_终点X, 整数型, , 
.参数 参数_终点Y, 整数型, , 

赋值 (全局_返回码, GdipAddPathLineI (m_Path, 参数_起点X, 参数_起点Y, 参数_终点X, 参数_终点Y))
返回 (等于 (全局_返回码, 0))

.子程序 添加直线组, 逻辑型, 公开, GdipAddPathLine2
.参数 参数_坐标, 坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathLine2 (m_Path, 参数_坐标, 取数组成员数 (参数_坐标)))
返回 (等于 (全局_返回码, 0))

.子程序 添加直线组I, 逻辑型, 公开, GdipAddPathLine2I
.参数 参数_坐标, 坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathLine2I (m_Path, 参数_坐标, 取数组成员数 (参数_坐标)))
返回 (等于 (全局_返回码, 0))

.子程序 添加圆弧, 逻辑型, 公开, GdipAddPathArc
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathArc (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 添加圆弧I, 逻辑型, 公开, GdipAddPathArcI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathArcI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线, 逻辑型, 公开, GdipAddPathBezier
.参数 参数_x1, 小数型, , 
.参数 参数_y1, 小数型, , 
.参数 参数_x2, 小数型, , 
.参数 参数_y2, 小数型, , 
.参数 参数_x3, 小数型, , 
.参数 参数_y3, 小数型, , 
.参数 参数_x4, 小数型, , 
.参数 参数_y4, 小数型, , 

赋值 (全局_返回码, GdipAddPathBezier (m_Path, 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))


.子程序 添加贝塞尔曲线I, 逻辑型, 公开, GdipAddPathBezierI
.参数 参数_x1, 整数型, , 
.参数 参数_y1, 整数型, , 
.参数 参数_x2, 整数型, , 
.参数 参数_y2, 整数型, , 
.参数 参数_x3, 整数型, , 
.参数 参数_y3, 整数型, , 
.参数 参数_x4, 整数型, , 
.参数 参数_y4, 整数型, , 

赋值 (全局_返回码, GdipAddPathBezierI (m_Path, 参数_x1, 参数_y1, 参数_x2, 参数_y2, 参数_x3, 参数_y3, 参数_x4, 参数_y4))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线组, 逻辑型, 公开, GdipAddPathBeziers。“参数_坐标组”的成员数必须4个以上。
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathBeziers (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加贝塞尔曲线组I, 逻辑型, 公开, GdipAddPathBeziersI。“参数_坐标组”的成员数必须4个以上。
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathBeziersI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加曲线, 逻辑型, 公开, GdipAddPathCurve。
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathCurve (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线2, 逻辑型, 公开, GdipAddPathCurve2。
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathCurve2 (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线3, 逻辑型, 公开, GdipAddPathCurve3。
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipAddPathCurve3 (m_Path, 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线I, 逻辑型, 公开, GdipAddPathCurveI
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathCurveI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线2I, 逻辑型, 公开, GdipAddPathCurve2I
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathCurve2I (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))


.子程序 添加曲线3I, 逻辑型, 公开, GdipAddPathCurve3I
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_偏移量, 整数型, , 从0开始
.参数 参数_段数, 整数型, , 从0开始
.参数 参数_张力, 小数型, , 

.局部变量 cont, 整数型, , , 

赋值 (cont, 取数组成员数 (参数_坐标组))
赋值 (全局_返回码, GdipAddPathCurve3I (m_Path, 参数_坐标组, cont, 参数_偏移量, 参数_段数, 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加闭合曲线, 逻辑型, 公开, GdipAddPathClosedCurve。最后一点将和起始点自动连接。
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathClosedCurve (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加闭合曲线2, 逻辑型, 公开, GdipAddPathClosedCurve2。最后一点将和起始点自动连接。
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathClosedCurve2 (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加闭合曲线I, 逻辑型, 公开, GdipAddPathClosedCurveI。最后一点将和起始点自动连接。
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathClosedCurveI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加闭合曲线2I, 逻辑型, 公开, GdipAddPathClosedCurve2I。最后一点将和起始点自动连接。
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_张力, 小数型, , 

赋值 (全局_返回码, GdipAddPathClosedCurve2I (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组), 参数_张力))
返回 (等于 (全局_返回码, 0))

.子程序 添加矩形, 逻辑型, 公开, GdipAddPathRectangle
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipAddPathRectangle (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加圆角矩形, 逻辑型, 公开, 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_圆角度, 整数型, , 1-100之间

.局部变量 left, 小数型, , , 
.局部变量 top, 小数型, , , 
.局部变量 right, 小数型, , , 
.局部变量 bottom, 小数型, , , 
.局部变量 offsetX, 整数型, , , 
.局部变量 offsetY, 整数型, , , 

.如果真 (小于 (参数_圆角度, 1))
    赋值 (参数_圆角度, 1)
.如果真结束
.如果真 (大于 (参数_圆角度, 100))
    赋值 (参数_圆角度, 100)
.如果真结束
赋值 (left, 参数_左边)
赋值 (top, 参数_顶边)
赋值 (right, 相加 (参数_左边, 参数_宽度))
赋值 (bottom, 相加 (参数_顶边, 参数_高度))
赋值 (offsetX, 相除 (相乘 (参数_宽度, 参数_圆角度), 100))
赋值 (offsetY, 相除 (相乘 (参数_高度, 参数_圆角度), 100))
GdipAddPathArc (m_Path, 相减 (right, offsetX), top, offsetX, offsetY, 270, 90)
GdipAddPathArc (m_Path, 相减 (right, offsetX), 相减 (bottom, offsetY), offsetX, offsetY, 0, 90)
GdipAddPathArc (m_Path, left, 相减 (bottom, offsetY), offsetX, offsetY, 90, 90)
GdipAddPathArc (m_Path, left, top, offsetX, offsetY, 180, 90)
赋值 (全局_返回码, GdipClosePathFigure (m_Path))
 ' 先画四个角的圆弧，然后调用GdipClosePathFigure()方法连接四个圆弧成为一个封闭区域。
返回 (等于 (全局_返回码, 0))

.子程序 添加矩形组, 逻辑型, 公开, GdipAddPathRectangles
.参数 参数_矩形组, 矩形F, 数组, 

赋值 (全局_返回码, GdipAddPathRectangles (m_Path, 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加矩形I, 逻辑型, 公开, GdipAddPathRectangleI
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipAddPathRectangleI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加矩形组I, 逻辑型, 公开, GdipAddPathRectanglesI
.参数 参数_矩形组, 矩形L, 数组, 

赋值 (全局_返回码, GdipAddPathRectanglesI (m_Path, 参数_矩形组, 取数组成员数 (参数_矩形组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加椭圆, 逻辑型, 公开, GdipAddPathEllipse。
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipAddPathEllipse (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))


.子程序 添加椭圆I, 逻辑型, 公开, GdipAddPathEllipseI。
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 

赋值 (全局_返回码, GdipAddPathEllipseI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 添加饼I, 逻辑型, 公开, GdipAddPathPieI。
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_开始角度, 小数型, , 
.参数 参数_扫描角度, 小数型, , 

赋值 (全局_返回码, GdipAddPathPieI (m_Path, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, 参数_开始角度, 参数_扫描角度))
返回 (等于 (全局_返回码, 0))


.子程序 添加多边形, 逻辑型, 公开, GdipAddPathPolygon
.参数 参数_坐标组, 坐标F, 数组, 

赋值 (全局_返回码, GdipAddPathPolygon (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 添加多边形I, 逻辑型, 公开, GdipAddPathPolygonI
.参数 参数_坐标组, 坐标L, 数组, 

赋值 (全局_返回码, GdipAddPathPolygonI (m_Path, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 添加路径, 逻辑型, 公开, GdipAddPathPath
.参数 参数_路径, GP路径, , 
.参数 参数_连接, 逻辑型, 可空, 它指定添加的路径中的第一个图形是否是该路径中最后一个图形的一部分。真 的值指定（如果可能）添加的路径中的第一个图形是该路径中最后一个图形的一部分。假 的值指定添加的路径中的第一个图形与该路径中最后一个图形不同。默认为：假。

赋值 (全局_返回码, GdipAddPathPath (m_Path, 参数_路径.取指针 (), 参数_连接))
返回 (等于 (全局_返回码, 0))

.子程序 添加文本, 逻辑型, 公开, GdipAddPathString
.参数 参数_文本, 文本型, , 
.参数 参数_字体族, GP字体族, , 
.参数 参数_EM大小, 整数型, , 世界坐标单位
.参数 参数_矩形, 矩形F, 可空, 
.参数 参数_字体风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_W, 字节集, , , 

赋值 (局部_W, GdiplusA2W (参数_文本))
赋值 (全局_返回码, GdipAddPathString (m_Path, 局部_W, lstrlenw (局部_W), 参数_字体族.取指针 (), 参数_字体风格, 参数_EM大小, 参数_矩形, 参数_文本格式.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 添加文本I, 逻辑型, 公开, GdipAddPathStringI
.参数 参数_文本, 文本型, , 
.参数 参数_字体族, GP字体族, , 
.参数 参数_EM大小, 整数型, , 世界坐标单位
.参数 参数_矩形, 矩形L, 可空, 
.参数 参数_字体风格, 整数型, 可空, “字体风格_”开头常量。
.参数 参数_文本格式, GP文本格式, 可空, 

.局部变量 局部_W, 字节集, , , 

赋值 (局部_W, GdiplusA2W (参数_文本))
赋值 (全局_返回码, GdipAddPathStringI (m_Path, 局部_W, lstrlenw (局部_W), 参数_字体族.取指针 (), 参数_字体风格, 参数_EM大小, 参数_矩形, 参数_文本格式.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形置矩阵, 逻辑型, , GdipTransformPath
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipTransformPath (m_Path, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))


.子程序 变平, 逻辑型, , GdipFlattenPath
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipFlattenPath (m_Path, 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 扩大, 逻辑型, , GdipWidenPath
.参数 参数_画笔, GP画笔, , 
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipWidenPath (m_Path, 参数_画笔.取指针 (), 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 轮廓线, 逻辑型, , GdipWindingModeOutline
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
赋值 (全局_返回码, GdipWindingModeOutline (m_Path, 参数_矩阵.取指针 (), 参数_展平值))
返回 (等于 (全局_返回码, 0))


.子程序 扭曲, 逻辑型, , GdipWarpPath
.参数 参数_坐标, 坐标F, 数组, 一个 坐标F 结构的数组，它们定义由 “参数_源矩形” 定义的矩形将变形到的平行四边形。该数组可以包含三个或四个元素。如果该数组包含三个元素，则平行四边形的右下角位置的点可从前三个点导出。
.参数 参数_源矩形, 矩形F, , 一个 矩形F 结构，它表示将变形为 destPoints 定义的平行四边形的矩形
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_扭曲模式, 整数型, 可空, “扭曲模式_”开头常量。默认为：“扭曲模式_透视”
.参数 参数_展平值, 小数型, 可空, 一个介于 0 到 1 之间的值，它指定如何展平最终路径。默认为：0.25

.如果真 (是否为空 (参数_展平值))
    赋值 (参数_展平值, 0.25)
.如果真结束
.如果真 (是否为空 (参数_扭曲模式))
    赋值 (参数_扭曲模式, #扭曲模式_透视)
.如果真结束
赋值 (全局_返回码, GdipWarpPath (m_Path, 参数_矩阵.取指针 (), 参数_坐标, 取数组成员数 (参数_坐标), 参数_源矩形.左边, 参数_源矩形.顶边, 参数_源矩形.宽度, 参数_源矩形.高度, 参数_扭曲模式, 参数_展平值))
返回 (等于 (全局_返回码, 0))

.子程序 取坐标数, 整数型, 公开, GdipGetPointCount
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipGetPointCount (m_Path, 局部_总数))
返回 (局部_总数)


.子程序 取边界矩形, 矩形F, , GdipGetPathWorldBounds
.参数 参数_矩阵, GP矩阵, 可空, 
.参数 参数_画笔, GP画笔, 可空, 

.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetPathWorldBounds (m_Path, 局部_矩形, 参数_矩阵.取指针 (), 参数_画笔.取指针 ()))
返回 (局部_矩形)


.子程序 是否可见坐标, 逻辑型, , GdipIsVisiblePathPoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePathPoint (m_Path, 参数_x, 参数_y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标I, 逻辑型, 公开, GdipIsVisiblePathPointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsVisiblePathPointI (m_Path, 参数_x, 参数_y, 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.子程序 是否可见坐标轮廓, 逻辑型, 公开, GdipIsOutlineVisiblePathPoint
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_画笔, GP画笔, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsOutlineVisiblePathPoint (m_Path, 参数_x, 参数_y, 参数_画笔.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否可见坐标轮廓I, 逻辑型, 公开, GdipIsOutlineVisiblePathPointI
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_画笔, GP画笔, , 
.参数 参数_图形, GP图形, 可空, 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsOutlineVisiblePathPointI (m_Path, 参数_x, 参数_y, 参数_画笔.取指针 (), 参数_图形.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.类模块 GP图像属性, Gdiplus基类, , ImageAttribute

.程序集变量 m_ImageAttribute, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ImageAttribute, 参数_指针)


.子程序 销毁, 逻辑型, 公开, GdipDisposeImageAttributes
赋值 (全局_返回码, GdipDisposeImageAttributes (m_ImageAttribute))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateImageAttributes
赋值 (全局_返回码, GdipCreateImageAttributes (m_ImageAttribute))
置指针 (m_ImageAttribute)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneImageAttributes。复制本图像属性到 参数_图像属性。
.参数 参数_图像属性, GP图像属性, 参考, 

.局部变量 局部_图像属性, 整数型, , , 

赋值 (全局_返回码, GdipCloneImageAttributes (m_ImageAttribute, 局部_图像属性))
参数_图像属性.置指针 (局部_图像属性)
返回 (等于 (全局_返回码, 0))


.子程序 置类型, 逻辑型, 公开, GdipSetImageAttributesToIdentity。
.参数 参数_颜色调整类型, 整数型, , “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipSetImageAttributesToIdentity (m_ImageAttribute, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 重置, 逻辑型, 公开, GdipResetImageAttributes
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。

赋值 (全局_返回码, GdipResetImageAttributes (m_ImageAttribute, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 置临界值, 逻辑型, 公开, GdipSetImageAttributesThreshold。
.参数 参数_临界值, 小数型, , 临界值是一个从0到1，指定每个颜色成分分界点。例如，假设临界值为0.7，假设你是提供一种颜色的红，绿，蓝230，50，220。红色部分，230>0.7 × 255，因此红色成分将改为255（全强度）。绿色部分，50<0.7 × 255，所以绿色成分将被更改为0。蓝色的部分，220>0.7 × 255，所以蓝色部分将改为255
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesThreshold (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_临界值))
返回 (等于 (全局_返回码, 0))


.子程序 清除临界值, 逻辑型, 公开, GdipSetImageAttributesThreshold
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesThreshold (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 禁用, 逻辑型, 公开, GdipSetImageAttributesNoOp。可以用 恢复() 方法恢复被禁用的颜色调整类型。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesNoOp (m_ImageAttribute, 参数_颜色调整类型, 1))
返回 (等于 (全局_返回码, 0))


.子程序 恢复, 逻辑型, 公开, GdipSetImageAttributesNoOp。恢复禁用的颜色调整类型。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesNoOp (m_ImageAttribute, 参数_颜色调整类型, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置伽玛值, 逻辑型, 公开, GdipSetImageAttributesGamma。可以用它调整亮度
.参数 参数_伽玛值, 小数型, , 一般是1.0到2.2之间，有时候0.1到5.0也有效。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesGamma (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_伽玛值))
返回 (等于 (全局_返回码, 0))


.子程序 清除伽玛值, 逻辑型, 公开, GdipSetImageAttributesGamma
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesGamma (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置透明色范围, 逻辑型, 公开, GdipSetImageAttributesColorKeys。在 参数_低颜色 和 参数_高颜色 之间的颜色值将是透明的。
.参数 参数_低颜色, 整数型, , ARGB颜色
.参数 参数_高颜色, 整数型, , ARGB颜色
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesColorKeys (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_低颜色, 参数_高颜色))
返回 (等于 (全局_返回码, 0))


.子程序 清除透明色范围, 逻辑型, 公开, GdipSetImageAttributesColorKeys
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesColorKeys (m_ImageAttribute, 参数_颜色调整类型, 0, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置输出通道, 逻辑型, 公开, GdipSetImageAttributesOutputChannel。设置CMYK输出通道。
.参数 参数_输出通道, 整数型, , “输出通道_”开头常量。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesOutputChannel (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_输出通道))
返回 (等于 (全局_返回码, 0))


.子程序 清除输出通道, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesOutputChannel (m_ImageAttribute, 参数_颜色调整类型, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 置输出通道配置文件, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色配置文件, 文本型, , *.ICM
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesOutputChannelColorProfile (m_ImageAttribute, 参数_颜色调整类型, 1, GdiplusA2W (参数_颜色配置文件)))
返回 (等于 (全局_返回码, 0))


.子程序 清除出通道配置文件, 逻辑型, 公开, GdipSetImageAttributesOutputChannel
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常。默认为：“颜色调整类型_默认”。

赋值 (全局_返回码, GdipSetImageAttributesOutputChannelColorProfile (m_ImageAttribute, 参数_颜色调整类型, 0, {  }))
返回 (等于 (全局_返回码, 0))

.子程序 置色彩映射表, 逻辑型, 公开, GdipSetImageAttributesRemapTable。将原来的颜色映射成为新的颜色。
.参数 参数_色彩映射表, 色彩映射表, 数组, 
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesRemapTable (m_ImageAttribute, 参数_颜色调整类型, 1, 取数组成员数 (参数_色彩映射表), 参数_色彩映射表))
返回 (等于 (全局_返回码, 0))


.子程序 清除色彩映射表, 逻辑型, 公开, GdipSetImageAttributesRemapTable。
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

.局部变量 局部_色彩映射表, 色彩映射表, , "0", 

赋值 (全局_返回码, GdipSetImageAttributesRemapTable (m_ImageAttribute, 参数_颜色调整类型, 0, 0, 局部_色彩映射表))
返回 (等于 (全局_返回码, 0))


.子程序 置环绕模式, 逻辑型, 公开, GdipSetImageAttributesWrapMode。设置空白区域的覆盖模式。
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。
.参数 参数_背景颜色, 整数型, 可空, ARGB颜色，当环绕模式为“环绕模式_固定”时，指定用什么颜色来填充空白区域。

赋值 (全局_返回码, GdipSetImageAttributesWrapMode (m_ImageAttribute, 参数_环绕模式, 参数_背景颜色, 0))
返回 (等于 (全局_返回码, 0))


.子程序 取调整调色板, 逻辑型, 公开, GdipGetImageAttributesAdjustedPalette。获取变换后的调色板
.参数 参数_颜色调色板, 颜色调色板, 参考, 输入\输出，
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipGetImageAttributesAdjustedPalette (m_ImageAttribute, 参数_颜色调色板, 参数_颜色调整类型))
返回 (等于 (全局_返回码, 0))

.子程序 置颜色矩阵, 逻辑型, 公开, GdipSetImageAttributesColorMatrix
.参数 参数_颜色矩阵, 小数型, 数组, 颜色矩阵是一个5x5的二维数组。
.参数 参数_灰度矩阵, 小数型, 可空 数组, 同上。
.参数 参数_颜色矩阵标志, 整数型, 可空, “颜色矩阵标志_”开头常量。默认为：“颜色矩阵标志_默认”
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesColorMatrix (m_ImageAttribute, 参数_颜色调整类型, 1, 参数_颜色矩阵, 参数_灰度矩阵, 参数_颜色矩阵标志))
返回 (等于 (全局_返回码, 0))

.子程序 清除颜色矩阵, 逻辑型, 公开, 
.参数 参数_颜色调整类型, 整数型, 可空, “颜色调整类型_”开头常量。默认为：“颜色调整类型_默认”

赋值 (全局_返回码, GdipSetImageAttributesColorMatrix (m_ImageAttribute, 参数_颜色调整类型, 0, { 0 }, { 0 }, 0))
返回 (等于 (全局_返回码, 0))


.类模块 GP矩阵, Gdiplus基类, , Matrix。对象是一个3X3的矩阵，元素只有6个，因为都有相同的第三列0,0,1。

.程序集变量 m_Matrix, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Matrix, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteMatrix。
.如果真 (等于 (m_Matrix, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteMatrix (m_Matrix))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateMatrix。创建一个默认矩阵。
赋值 (全局_返回码, GdipCreateMatrix (m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))


.子程序 创建2, 逻辑型, 公开, GdipCreateMatrix2
.参数 参数_m11, 小数型, , 第一行，第一列
.参数 参数_m12, 小数型, , 第一行，第二列
.参数 参数_m21, 小数型, , 第二行，第一列
.参数 参数_m22, 小数型, , 第二行，第二列
.参数 参数_dx, 小数型, , 第三行，第一列
.参数 参数_dy, 小数型, , 第三行，第二列

赋值 (全局_返回码, GdipCreateMatrix2 (参数_m11, 参数_m12, 参数_m21, 参数_m22, 参数_dx, 参数_dy, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))

.子程序 创建3, 逻辑型, 公开, GdipCreateMatrix3
.参数 参数_矩形, 矩形F, , 
.参数 参数_坐标, 坐标F, , 

赋值 (全局_返回码, GdipCreateMatrix3 (参数_矩形, 参数_坐标, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))


.子程序 创建3I, 逻辑型, 公开, GdipCreateMatrix3I
.参数 参数_矩形, 矩形L, , 
.参数 参数_坐标, 坐标L, , 

赋值 (全局_返回码, GdipCreateMatrix3I (参数_矩形, 参数_坐标, m_Matrix))
置指针 (m_Matrix)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, , GdipCloneImageAttributes。将本矩阵复制到 参数_矩阵。
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipCloneMatrix (m_Matrix, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))

.子程序 置元素, 逻辑型, , GdipSetMatrixElements。设置矩阵元素。
.参数 参数_m11, 小数型, , 第一行，第一列
.参数 参数_m12, 小数型, , 第一行，第二列
.参数 参数_m21, 小数型, , 第二行，第一列
.参数 参数_m22, 小数型, , 第二行，第二列
.参数 参数_dx, 小数型, , 第三行，第一列
.参数 参数_dy, 小数型, , 第三行，第二列

赋值 (全局_返回码, GdipSetMatrixElements (m_Matrix, 参数_m11, 参数_m12, 参数_m21, 参数_m22, 参数_dx, 参数_dy))
返回 (等于 (全局_返回码, 0))

.子程序 取元素, 逻辑型, 公开, GdipGetMatrixElements
.参数 参数_元素组, 小数型, 数组, 返回值。

重定义数组 (参数_元素组, 假, 6)
赋值 (全局_返回码, GdipGetMatrixElements (m_Matrix, 参数_元素组))
返回 (等于 (全局_返回码, 0))


.子程序 相乘, 逻辑型, , GdipMultiplyMatrix。如果指定的顺序是“#矩阵顺序_预先计算”，则按预先计算的顺序将此 矩阵 对象乘以指定的矩阵。如果指定的顺序是“#矩阵顺序_追加”，则按追加的顺序将此 矩阵 对象乘以指定的矩阵。
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyMatrix (m_Matrix, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 平移, 逻辑型, 公开, GdipTranslateMatrix。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateMatrix (m_Matrix, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 取水平偏移, 小数型, 公开, GetOffsetX
.局部变量 局部_元素组, 小数型, , "6", 

赋值 (全局_返回码, GdipGetMatrixElements (m_Matrix, 局部_元素组))
返回 (局部_元素组 [5])


.子程序 取垂直偏移, 小数型, 公开, GetOffsetY
.局部变量 局部_元素组, 小数型, , "6", 

赋值 (全局_返回码, GdipGetMatrixElements (m_Matrix, 局部_元素组))
返回 (局部_元素组 [6])

.子程序 旋转, 逻辑型, , GdipRotateMatrix
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipRotateMatrix (m_Matrix, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 逆转, 逻辑型, , GdipInvertMatrix。设置旋转方向为逆向。
赋值 (全局_返回码, GdipInvertMatrix (m_Matrix))
返回 (等于 (全局_返回码, 0))

.子程序 缩放, 逻辑型, , GdipScaleMatrix
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleMatrix (m_Matrix, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 切变, 逻辑型, , GdipShearMatrix
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipShearMatrix (m_Matrix, 参数_x, 参数_y, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 重置, 逻辑型, , ResetMatrix
赋值 (全局_返回码, GdipSetMatrixElements (m_Matrix, 1, 0, 0, 1, 0, 0))
返回 (等于 (全局_返回码, 0))


.子程序 变换坐标组, 逻辑型, 公开, GdipTransformMatrixPoints。对坐标数组应用此　矩阵　变换
.参数 参数_坐标组, 坐标F, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipTransformMatrixPoints (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))


.子程序 变换坐标组I, 逻辑型, 公开, GdipTransformMatrixPointsI。对坐标数组应用此　矩阵　变换
.参数 参数_坐标组, 坐标L, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipTransformMatrixPointsI (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 变换坐标组向量, 逻辑型, 公开, GdipVectorTransformMatrixPoints。对坐标数组应用此　矩阵　变换中的缩放和旋转变换
.参数 参数_坐标组, 坐标F, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipVectorTransformMatrixPoints (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 变换坐标组向量I, 逻辑型, 公开, GdipVectorTransformMatrixPointsI。对坐标数组应用此　矩阵　变换中的缩放和旋转变换
.参数 参数_坐标组, 坐标L, 数组, [in, out]输入时提供仿射点，输出时为仿射后结果。

赋值 (全局_返回码, GdipVectorTransformMatrixPointsI (m_Matrix, 参数_坐标组, 取数组成员数 (参数_坐标组)))
返回 (等于 (全局_返回码, 0))

.子程序 是否逆转, 逻辑型, 公开, GdipIsMatrixInvertible
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixInvertible (m_Matrix, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否单位矩阵, 逻辑型, 公开, GdipIsMatrixIdentity。斜对角线是1其他是0
.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixIdentity (m_Matrix, 局部_返回值))
返回 (不等于 (局部_返回值, 0))


.子程序 是否相等, 逻辑型, 公开, GdipIsMatrixEqual
.参数 参数_矩阵, GP矩阵, , 

.局部变量 局部_返回值, 整数型, , , 

赋值 (全局_返回码, GdipIsMatrixEqual (m_Matrix, 参数_矩阵.取指针 (), 局部_返回值))
返回 (不等于 (局部_返回值, 0))

.类模块 IStream, , , 

.程序集变量 成员_内存句柄, 整数型, , , 
.程序集变量 成员_内存指针, 整数型, , , 
.程序集变量 成员_字节流对象, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
释放 ()

.子程序 创建, 整数型, 公开, 成功返回字节流指针，失败返回0。上次创建的字节流指针会自动释放。
.参数 参数_字节集, 字节集, 可空, 字节集数据。
.参数 参数_大小, 整数型, 可空, 默认为 参数_字节集 的长度

释放 ()
.如果真 (是否为空 (参数_大小))
    赋值 (参数_大小, 取字节集长度 (参数_字节集))
.如果真结束
赋值 (成员_内存句柄, GlobalAlloc (位或 (#GMEM_ZEROINIT, #GMEM_MOVEABLE), 参数_大小))
CreateStreamOnHGlobal (成员_内存句柄, 0, 成员_字节流对象)
赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
WriteProcessMemory (GetCurrentProcess (), 成员_内存指针, lstrcpyn_字节集 (参数_字节集, 参数_字节集, 0), 参数_大小, 0)
GlobalUnlock (成员_内存句柄)
返回 (成员_字节流对象)

.子程序 释放, 空白型, 公开, 释放内存资源。
.局部变量 var, 整数型, , , 
.局部变量 addr, 整数型, , , 

.如果真 (不等于 (成员_字节流对象, 0))
    赋值 (var, 取字节集数据 (指针到字节集 (成员_字节流对象, 4), #整数型, ))
    赋值 (var, 相加 (var, 相乘 (2, 4))) ' Release方法地址
    赋值 (addr, 取字节集数据 (指针到字节集 (var, 4), #整数型, )) ' 取出Release方法地址
    CallWindowProc ({ 85, 139, 236, 255, 117, 20, 255, 117, 16, 255, 117, 12, 255, 85, 8, 201, 194, 16, 0 }, addr, 成员_字节流对象, 0, 0) ' 调用Release方法
    GlobalFree (成员_内存句柄)
    赋值 (成员_内存句柄, 0)
    赋值 (成员_字节流对象, 0)
.如果真结束


.子程序 取尺寸, 整数型, 公开, 取出字节流的字节集数据尺寸大小。
返回 (GlobalSize (成员_内存句柄))


.子程序 取字节流指针, 整数型, 公开, 取出字节流对象的内存指针。
返回 (成员_字节流对象)


.子程序 取内存句柄, 整数型, 公开, 
返回 (成员_内存句柄)


.子程序 置字节流指针, 逻辑型, 公开, 将另一个字节流对象指针导入到本类，之前的指针会自动释放。
.参数 参数_字节流指针, 整数型, , 

释放 ()
GetHGlobalFromStream (参数_字节流指针, 成员_内存句柄)
赋值 (成员_字节流对象, 参数_字节流指针)
返回 (不等于 (成员_内存句柄, 0))

.子程序 取出字节集, 字节集, 公开, 取出字节流指针的字节集数据。
.局部变量 局部_大小, 整数型, , , 
.局部变量 局部_数据, 字节集, , , 

赋值 (成员_内存指针, GlobalLock (成员_内存句柄))
赋值 (局部_大小, GlobalSize (成员_内存指针))
赋值 (局部_数据, 指针到字节集 (成员_内存指针, 局部_大小))
GlobalUnlock (成员_内存句柄)
返回 (局部_数据)


.类模块 GP纯色画刷, GP画刷, , SolidBrush。基类：GP画刷

.程序集变量 m_SolidBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_SolidBrush, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipCreateSolidFill
.参数 参数_ARGB颜色, 整数型, , 需要将RGB颜色转换为ARGB颜色。

赋值 (全局_返回码, GdipCreateSolidFill (参数_ARGB颜色, m_SolidBrush))
置指针 (m_SolidBrush)
返回 (等于 (全局_返回码, 0))


.子程序 置颜色, 逻辑型, , GdipSetSolidFillColor
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetSolidFillColor (m_SolidBrush, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))

.子程序 取颜色, 整数型, , GdipGetSolidFillColor
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetSolidFillColor (m_SolidBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.类模块 GP阴影画刷, GP画刷, , HatchBrush。基类：GP画刷

.程序集变量 m_HatchBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_HatchBrush, 参数_指针)

.子程序 创建, 逻辑型, 公开, GdipCreateHatchBrush
.参数 参数_阴影风格, 整数型, , “阴影风格_”开头常量。
.参数 参数_前景ARGB颜色, 整数型, , 
.参数 参数_背景ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipCreateHatchBrush (参数_阴影风格, 参数_前景ARGB颜色, 参数_背景ARGB颜色, m_HatchBrush))
置指针 (m_HatchBrush)
返回 (等于 (全局_返回码, 0))

.子程序 取阴影风格, 整数型, 公开, GdipGetHatchStyle。返回“阴影风格_”开头常量。
.局部变量 局部_阴影风格, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchStyle (m_HatchBrush, 局部_阴影风格))
返回 (局部_阴影风格)

.子程序 取前景色, 整数型, 公开, GdipGetHatchForegroundColor。返回前景ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchForegroundColor (m_HatchBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)


.子程序 取背景色, 整数型, 公开, GdipGetHatchBackgroundColor。返回背景ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetHatchBackgroundColor (m_HatchBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.类模块 GP纹理画刷, GP画刷, , TextureBrush。基类：GP画刷

.程序集变量 m_TextureBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_TextureBrush, 参数_指针)

.子程序 创建, 逻辑型, 公开, GdipCreateTexture
.参数 参数_图像, GP图像, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：“环绕模式_平铺”

.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture (参数_图像.取指针 (), 参数_环绕模式, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形, 逻辑型, , GdipCreateTexture2
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。

.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture2 (参数_图像.取指针 (), 参数_环绕模式, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形I, 逻辑型, , GdipCreateTexture2I
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。

.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_平铺)
.如果真结束
赋值 (全局_返回码, GdipCreateTexture2I (参数_图像.取指针 (), 参数_环绕模式, 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自图像属性, 逻辑型, , GdipCreateTextureIA
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_高度, 小数型, , 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipCreateTextureIA (参数_图像.取指针 (), 参数_图像属性.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自图像属性I, 逻辑型, , GdipCreateTextureIAI
.参数 参数_图像, GP图像, , 
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_图像属性, GP图像属性, 可空, 

赋值 (全局_返回码, GdipCreateTextureIAI (参数_图像.取指针 (), 参数_图像属性.取指针 (), 参数_左边, 参数_顶边, 参数_宽度, 参数_高度, m_TextureBrush))
置指针 (m_TextureBrush)
返回 (等于 (全局_返回码, 0))

.子程序 变形取矩阵, 逻辑型, , GdipGetTextureTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureTransform (m_TextureBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, , GdipSetTextureTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetTextureTransform (m_TextureBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, , GdipResetTextureTransform
赋值 (全局_返回码, GdipResetTextureTransform (m_TextureBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, , GdipMultiplyTextureTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyTextureTransform (m_TextureBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, , GdipTranslateTextureTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateTextureTransform (m_TextureBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, , GdipScaleTextureTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleTextureTransform (m_TextureBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, , GdipRotateTextureTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateTextureTransform (m_TextureBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 取环绕模式, 整数型, , GdipGetTextureWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureWrapMode (m_TextureBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, , GdipSetTextureWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetTextureWrapMode (m_TextureBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 取图像, 逻辑型, , GdipGetTextureImage
.参数 参数_图像, GP图像, 参考, 

.局部变量 局部_图像, 整数型, , , 

赋值 (全局_返回码, GdipGetTextureImage (m_TextureBrush, 局部_图像))
参数_图像.置指针 (局部_图像)
返回 (等于 (全局_返回码, 0))

.类模块 GP线性渐变画刷, GP画刷, , LinearGradientBrush。基类：GP画刷

.程序集变量 m_LinearGradientBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_LinearGradientBrush, 参数_指针)
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 创建, 逻辑型, 公开, GdipCreateLineBrush
.参数 参数_起点坐标, 坐标F, , 
.参数 参数_终点坐标, 坐标F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipCreateLineBrush (参数_起点坐标, 参数_终点坐标, 参数_起点ARGB颜色, 参数_终点ARGB颜色, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建I, 逻辑型, 公开, GdipCreateLineBrushI
.参数 参数_起点坐标, 坐标L, , 
.参数 参数_终点坐标, 坐标L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipCreateLineBrushI (参数_起点坐标, 参数_终点坐标, 参数_起点ARGB颜色, 参数_终点ARGB颜色, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形, 逻辑型, 公开, GdipCreateLineBrushFromRect
.参数 参数_矩形, 矩形F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_线性渐变模式, 整数型, 可空, “线性渐变模式_”开头常量。

赋值 (全局_返回码, GdipCreateLineBrushFromRect (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_线性渐变模式, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形I, 逻辑型, 公开, GdipCreateLineBrushFromRectI
.参数 参数_矩形, 矩形L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_线性渐变模式, 整数型, 可空, “线性渐变模式_”开头常量。

赋值 (全局_返回码, GdipCreateLineBrushFromRectI (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_线性渐变模式, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自矩形角度, 逻辑型, 公开, GdipCreateLineBrushFromRectWithAngle
.参数 参数_矩形, 矩形F, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_角度, 小数型, , 
.参数 参数_角度是否可扩展, 逻辑型, 可空, 

赋值 (全局_返回码, GdipCreateLineBrushFromRectWithAngle (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_角度, 参数_角度是否可扩展, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建自矩形角度I, 逻辑型, 公开, GdipCreateLineBrushFromRectWithAngleI
.参数 参数_矩形, 矩形L, , 
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 
.参数 参数_角度, 小数型, , 
.参数 参数_角度是否可扩展, 逻辑型, 可空, 

赋值 (全局_返回码, GdipCreateLineBrushFromRectWithAngleI (参数_矩形, 参数_起点ARGB颜色, 参数_终点ARGB颜色, 参数_角度, 参数_角度是否可扩展, #环绕模式_平铺, m_LinearGradientBrush))
置指针 (m_LinearGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 取线性渐变色, 逻辑型, 公开, GdipGetLineColors
.参数 参数_起点ARGB颜色, 整数型, 参考, 
.参数 参数_终点ARGB颜色, 整数型, 参考, 

.局部变量 局部_颜色, 整数型, , "2", 

赋值 (全局_返回码, GdipGetLineColors (m_LinearGradientBrush, 局部_颜色))
赋值 (参数_起点ARGB颜色, 局部_颜色 [1])
赋值 (参数_终点ARGB颜色, 局部_颜色 [2])
返回 (等于 (全局_返回码, 0))

.子程序 置线性渐变色, 逻辑型, 公开, GdipSetLineColors
.参数 参数_起点ARGB颜色, 整数型, , 
.参数 参数_终点ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetLineColors (m_LinearGradientBrush, 参数_起点ARGB颜色, 参数_终点ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 取矩形, 矩形F, 公开, GdipGetLineRect
.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetLineRect (m_LinearGradientBrush, 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形I, 矩形L, 公开, GdipGetLineRectI
.局部变量 局部_矩形, 矩形L, , , 

赋值 (全局_返回码, GdipGetLineRectI (m_LinearGradientBrush, 局部_矩形))
返回 (局部_矩形)

.子程序 置伽玛校正, 逻辑型, 公开, GdipSetLineGammaCorrection
.参数 参数_是否启用校正, 逻辑型, , 

赋值 (全局_返回码, GdipSetLineGammaCorrection (m_LinearGradientBrush, 参数_是否启用校正))
返回 (等于 (全局_返回码, 0))


.子程序 取伽玛校正, 逻辑型, 公开, GdipSetLineGammaCorrection
.局部变量 局部_是否启用校正, 逻辑型, , , 

赋值 (全局_返回码, GdipGetLineGammaCorrection (m_LinearGradientBrush, 局部_是否启用校正))
返回 (局部_是否启用校正)

.子程序 置混合, 逻辑型, 公开, GdipSetLineBlend
.参数 参数_颜色比例, 小数型, 数组, 如：{0，0.5，1}
.参数 参数_位置比例, 小数型, 数组, 如：{0，0.2，1}

赋值 (全局_返回码, GdipSetLineBlend (m_LinearGradientBrush, 参数_颜色比例, 参数_位置比例, 取数组成员数 (参数_颜色比例)))
返回 (等于 (全局_返回码, 0))

.子程序 取混合, 整数型, 公开, GdipGetLineBlend。返回总数。
.参数 参数_颜色比例, 小数型, 数组, 提供小数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 同上。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetLineBlendCount (m_LinearGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_颜色比例, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetLineBlend (m_LinearGradientBrush, 参数_颜色比例, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置预设混合, 逻辑型, 公开, GdipSetLinePresetBlend
.参数 参数_ARGB颜色, 整数型, 数组, ARGB颜色数组。
.参数 参数_位置比例, 小数型, 数组, 如{0，0.3，1}

赋值 (全局_返回码, GdipSetLinePresetBlend (m_LinearGradientBrush, 参数_ARGB颜色, 参数_位置比例, 取数组成员数 (参数_ARGB颜色)))
返回 (等于 (全局_返回码, 0))


.子程序 取预设混合, 整数型, 公开, GdipGetLineBlend。返回总数。
.参数 参数_ARGB颜色, 整数型, 数组, 提供整数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 提供小数型数组变量，装载数据。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetLinePresetBlendCount (m_LinearGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_ARGB颜色, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetLinePresetBlend (m_LinearGradientBrush, 参数_ARGB颜色, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置钟形混合, 逻辑型, 公开, GdipSetLineSigmaBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetLineSigmaBlend (m_LinearGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 置线性混合, 逻辑型, 公开, GdipSetLineLinearBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetLineLinearBlend (m_LinearGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 取环绕模式, 整数型, , GdipGetLineWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetLineWrapMode (m_LinearGradientBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, , GdipSetLineWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetLineWrapMode (m_LinearGradientBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, , GdipGetLineTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetLineTransform (m_LinearGradientBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, , GdipSetLineTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetLineTransform (m_LinearGradientBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, , GdipResetLineTransform
赋值 (全局_返回码, GdipResetLineTransform (m_LinearGradientBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, , GdipMultiplyLineTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyLineTransform (m_LinearGradientBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, , GdipTranslateLineTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslateLineTransform (m_LinearGradientBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, , GdipScaleLineTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScaleLineTransform (m_LinearGradientBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, , GdipRotateLineTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotateLineTransform (m_LinearGradientBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.类模块 GP路径渐变画刷, GP画刷, , PathGradientBrush。基类：GP画刷

.程序集变量 m_PathGradientBrush, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_PathGradientBrush, 参数_指针)

.子程序 创建, 逻辑型, 公开, GdipCreatePathGradient
.参数 参数_坐标组, 坐标F, 数组, 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：#环绕模式_固定

.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_固定)
.如果真结束
赋值 (全局_返回码, GdipCreatePathGradient (参数_坐标组, 取数组成员数 (参数_坐标组), 参数_环绕模式, m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 创建I, 逻辑型, 公开, GdipCreatePathGradientI
.参数 参数_坐标组, 坐标L, 数组, 
.参数 参数_环绕模式, 整数型, 可空, “环绕模式_”开头常量。默认为：#环绕模式_固定

.如果真 (是否为空 (参数_环绕模式))
    赋值 (参数_环绕模式, #环绕模式_固定)
.如果真结束
赋值 (全局_返回码, GdipCreatePathGradientI (参数_坐标组, 取数组成员数 (参数_坐标组), 参数_环绕模式, m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))

.子程序 创建自路径, 逻辑型, 公开, GdipCreatePathGradientFromPath
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipCreatePathGradientFromPath (参数_路径.取指针 (), m_PathGradientBrush))
置指针 (m_PathGradientBrush)
返回 (等于 (全局_返回码, 0))


.子程序 取中心点颜色, 整数型, 公开, GdipGetPathGradientCenterColor。返回ARGB颜色。
.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterColor (m_PathGradientBrush, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.子程序 置中心点颜色, 逻辑型, 公开, GdipSetPathGradientCenterColor
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipSetPathGradientCenterColor (m_PathGradientBrush, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 取坐标数, 整数型, 公开, GdipGetPathGradientPointCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPointCount (m_PathGradientBrush, 局部_count))
返回 (局部_count)

.子程序 取周围颜色数, 整数型, 公开, GdipGetPathGradientSurroundColorCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientSurroundColorCount (m_PathGradientBrush, 局部_count))
返回 (局部_count)

.子程序 取周围颜色, 逻辑型, 公开, GdipGetPathGradientSurroundColorsWithCount
.参数 参数_ARGB颜色, 整数型, 参考 数组, 
.参数 参数_数量, 整数型, 参考, [in/out]

赋值 (全局_返回码, GdipGetPathGradientSurroundColorsWithCount (m_PathGradientBrush, 参数_ARGB颜色, 参数_数量))
返回 (等于 (全局_返回码, 0))

.子程序 置周围颜色, 逻辑型, 公开, GdipSetPathGradientSurroundColorsWithCount
.参数 参数_ARGB颜色, 整数型, 数组, 
.参数 参数_数量, 整数型, 参考 可空, [in/out]

.如果真 (是否为空 (参数_数量))
    赋值 (参数_数量, 取数组成员数 (参数_ARGB颜色))
.如果真结束
赋值 (全局_返回码, GdipSetPathGradientSurroundColorsWithCount (m_PathGradientBrush, 参数_ARGB颜色, 参数_数量))
返回 (等于 (全局_返回码, 0))


.子程序 取路径, 逻辑型, 公开, GdipGetPathGradientPath
.参数 参数_路径, GP路径, 参考, 

.局部变量 局部_路径, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPath (m_PathGradientBrush, 局部_路径))
参数_路径.置指针 (局部_路径)
返回 (等于 (全局_返回码, 0))

.子程序 置路径, 逻辑型, , GdipGetPathGradientPath
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipGetPathGradientPath (m_PathGradientBrush, 参数_路径.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 取中心点, 坐标F, 公开, GdipGetPathGradientCenterPoint
.局部变量 局部_坐标, 坐标F, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterPoint (m_PathGradientBrush, 局部_坐标))
返回 (局部_坐标)


.子程序 取中心点I, 坐标L, 公开, GdipGetPathGradientCenterPointI
.局部变量 局部_坐标, 坐标L, , , 

赋值 (全局_返回码, GdipGetPathGradientCenterPointI (m_PathGradientBrush, 局部_坐标))
返回 (局部_坐标)

.子程序 置中心点, 逻辑型, 公开, GdipSetPathGradientCenterPoint
.参数 参数_坐标, 坐标F, , 

赋值 (全局_返回码, GdipSetPathGradientCenterPoint (m_PathGradientBrush, 参数_坐标))
返回 (等于 (全局_返回码, 0))


.子程序 置中心点I, 逻辑型, 公开, GdipSetPathGradientCenterPointI
.参数 参数_坐标, 坐标L, , 

赋值 (全局_返回码, GdipSetPathGradientCenterPointI (m_PathGradientBrush, 参数_坐标))
返回 (等于 (全局_返回码, 0))

.子程序 取矩形, 矩形F, 公开, GdipGetPathGradientRect
.局部变量 局部_矩形, 矩形F, , , 

赋值 (全局_返回码, GdipGetPathGradientRect (m_PathGradientBrush, 局部_矩形))
返回 (局部_矩形)


.子程序 取矩形I, 矩形L, 公开, GdipGetPathGradientRectI
.局部变量 局部_矩形, 矩形L, , , 

赋值 (全局_返回码, GdipGetPathGradientRectI (m_PathGradientBrush, 局部_矩形))
返回 (局部_矩形)

.子程序 置伽玛校正, 逻辑型, , GdipSetPathGradientGammaCorrection
.参数 参数_是否启用校正, 逻辑型, , 

赋值 (全局_返回码, GdipSetPathGradientGammaCorrection (m_PathGradientBrush, 参数_是否启用校正))
返回 (等于 (全局_返回码, 0))


.子程序 取伽玛校正, 逻辑型, 公开, GdipGetPathGradientGammaCorrection
.局部变量 局部_是否启用校正, 逻辑型, , , 

赋值 (全局_返回码, GdipGetPathGradientGammaCorrection (m_PathGradientBrush, 局部_是否启用校正))
返回 (局部_是否启用校正)

.子程序 置混合, 逻辑型, , GdipSetPathGradientBlend
.参数 参数_颜色比例, 小数型, 数组, 如：{0，0.5，1}
.参数 参数_位置比例, 小数型, 数组, 如：{0，0.2，1}

赋值 (全局_返回码, GdipSetPathGradientBlend (m_PathGradientBrush, 参数_颜色比例, 参数_位置比例, 取数组成员数 (参数_颜色比例)))
返回 (等于 (全局_返回码, 0))

.子程序 取混合, 整数型, , GdipGetPathGradientBlend。返回总数。
.参数 参数_颜色比例, 小数型, 数组, 提供小数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 同上。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientBlendCount (m_PathGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_颜色比例, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetPathGradientBlend (m_PathGradientBrush, 参数_颜色比例, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 取中心点比例, 逻辑型, 公开, GdipGetPathGradientFocusScales
.参数 参数_比例X, 小数型, 参考, 
.参数 参数_比例Y, 小数型, 参考, 

赋值 (全局_返回码, GdipGetPathGradientFocusScales (m_PathGradientBrush, 参数_比例X, 参数_比例Y))
返回 (等于 (全局_返回码, 0))


.子程序 置中心点比例, 逻辑型, 公开, GdipGetPathGradientFocusScales
.参数 参数_比例X, 小数型, , 0到1之间的小数。
.参数 参数_比例Y, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientFocusScales (m_PathGradientBrush, 参数_比例X, 参数_比例Y))
返回 (等于 (全局_返回码, 0))

.子程序 置预设颜色, 逻辑型, , GdipSetPathGradientPresetBlend
.参数 参数_ARGB颜色, 整数型, 数组, ARGB颜色数组。
.参数 参数_位置比例, 小数型, 数组, 如{0，0.3，1}

赋值 (全局_返回码, GdipSetPathGradientPresetBlend (m_PathGradientBrush, 参数_ARGB颜色, 参数_位置比例, 取数组成员数 (参数_ARGB颜色)))
返回 (等于 (全局_返回码, 0))


.子程序 取预设颜色, 整数型, , GdipGetPathGradientPresetBlend。返回总数。
.参数 参数_ARGB颜色, 整数型, 数组, 提供整数型数组变量，装载数据。
.参数 参数_位置比例, 小数型, 数组, 提供小数型数组变量，装载数据。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientPresetBlendCount (m_PathGradientBrush, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_ARGB颜色, 假, 局部_count)
重定义数组 (参数_位置比例, 假, 局部_count)
赋值 (全局_返回码, GdipGetPathGradientPresetBlend (m_PathGradientBrush, 参数_ARGB颜色, 参数_位置比例, 局部_count))
返回 (局部_count)

.子程序 置钟形混合, 逻辑型, 公开, GdipSetPathGradientSigmaBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientSigmaBlend (m_PathGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 置线性混合, 逻辑型, 公开, GdipSetPathGradientLinearBlend
.参数 参数_焦点, 小数型, , 0到1之间的小数。
.参数 参数_比例, 小数型, , 0到1之间的小数。

赋值 (全局_返回码, GdipSetPathGradientLinearBlend (m_PathGradientBrush, 参数_焦点, 参数_比例))
返回 (等于 (全局_返回码, 0))


.子程序 取环绕模式, 整数型, , GdipGetPathGradientWrapMode。返回“环绕模式_”开头常量。
.局部变量 局部_模式, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientWrapMode (m_PathGradientBrush, 局部_模式))
返回 (局部_模式)


.子程序 置环绕模式, 逻辑型, , GdipSetPathGradientWrapMode
.参数 参数_环绕模式, 整数型, , “环绕模式_”开头常量。

赋值 (全局_返回码, GdipSetPathGradientWrapMode (m_PathGradientBrush, 参数_环绕模式))
返回 (等于 (全局_返回码, 0))


.子程序 变形取矩阵, 逻辑型, , GdipGetPathGradientTransform
.参数 参数_矩阵, GP矩阵, 参考, 

.局部变量 局部_矩阵, 整数型, , , 

赋值 (全局_返回码, GdipGetPathGradientTransform (m_PathGradientBrush, 局部_矩阵))
参数_矩阵.置指针 (局部_矩阵)
返回 (等于 (全局_返回码, 0))


.子程序 变形置矩阵, 逻辑型, , GdipSetPathGradientTransform
.参数 参数_矩阵, GP矩阵, , 

赋值 (全局_返回码, GdipSetPathGradientTransform (m_PathGradientBrush, 参数_矩阵.取指针 ()))
返回 (等于 (全局_返回码, 0))

.子程序 变形重置, 逻辑型, , GdipResetPathGradientTransform
赋值 (全局_返回码, GdipResetPathGradientTransform (m_PathGradientBrush))
返回 (等于 (全局_返回码, 0))


.子程序 变形相乘, 逻辑型, , GdipMultiplyPathGradientTransform
.参数 参数_矩阵, GP矩阵, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算”

赋值 (全局_返回码, GdipMultiplyPathGradientTransform (m_PathGradientBrush, 参数_矩阵.取指针 (), 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))


.子程序 变形平移, 逻辑型, , GdipTranslatePathGradientTransform。
.参数 参数_水平偏移量, 小数型, , 
.参数 参数_垂直偏移量, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipTranslatePathGradientTransform (m_PathGradientBrush, 参数_水平偏移量, 参数_垂直偏移量, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形缩放, 逻辑型, , GdipScalePathGradientTransform
.参数 参数_水平缩放倍数, 小数型, , 
.参数 参数_垂直缩放倍数, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“ #矩阵顺序_预先计算”

赋值 (全局_返回码, GdipScalePathGradientTransform (m_PathGradientBrush, 参数_水平缩放倍数, 参数_垂直缩放倍数, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.子程序 变形旋转, 逻辑型, , GdipRotatePathGradientTransform
.参数 参数_角度, 小数型, , 
.参数 参数_矩阵顺序, 整数型, 可空, “矩阵顺序_”开头常量。默认为“#矩阵顺序_预先计算

赋值 (全局_返回码, GdipRotatePathGradientTransform (m_PathGradientBrush, 参数_角度, 参数_矩阵顺序))
返回 (等于 (全局_返回码, 0))

.类模块 GP自定义线帽, Gdiplus基类, , CustomLineCap

.程序集变量 m_CustomLineCap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_CustomLineCap, 参数_指针)
方法_子置指针 (m_CustomLineCap)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, GdipDeleteCustomLineCap
.如果真 (等于 (m_CustomLineCap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteCustomLineCap (m_CustomLineCap))
置指针 (0)
返回 (等于 (全局_返回码, 0))


.子程序 创建自定义线帽, 逻辑型, 公开, GdipCreateCustomLineCap
.参数 参数_填充路径, GP路径, 可空, “参数_填充路径”和“参数_笔画路径”二选一，如果两参数都是非空，将忽略“参数_填充路径”
.参数 参数_笔画路径, GP路径, 可空, 
.参数 参数_基线帽, 整数型, 可空, 默认为：“线帽样式_平线帽”
.参数 参数_基距离, 小数型, 可空, 默认为：0

赋值 (全局_返回码, GdipCreateCustomLineCap (参数_填充路径.取指针 (), 参数_笔画路径.取指针 (), 参数_基线帽, 参数_基距离, m_CustomLineCap))
置指针 (m_CustomLineCap)
返回 (等于 (全局_返回码, 0))


.子程序 复制, 逻辑型, 公开, GdipCloneCustomLineCap
.参数 参数_自定义线帽, GP自定义线帽, 参考, 

.局部变量 局部_自定义线帽, 整数型, , , 

赋值 (全局_返回码, GdipCloneCustomLineCap (m_CustomLineCap, 局部_自定义线帽))
参数_自定义线帽.置指针 (局部_自定义线帽)
返回 (等于 (全局_返回码, 0))

.子程序 置笔画线帽, 逻辑型, 公开, GdipSetCustomLineCapStrokeCaps
.参数 参数_起点线帽, 整数型, , “线帽样式_”开头常量
.参数 参数_终点线帽, 整数型, , “线帽样式_”开头常量

赋值 (全局_返回码, GdipSetCustomLineCapStrokeCaps (m_CustomLineCap, 参数_起点线帽, 参数_终点线帽))
返回 (等于 (全局_返回码, 0))

.子程序 取笔画线帽, 逻辑型, 公开, GdipSetCustomLineCapStrokeCaps
.参数 参数_起点线帽, 整数型, 参考, 只能提供变量，装载数据。
.参数 参数_终点线帽, 整数型, 参考, 只能提供变量，装载数据。

赋值 (全局_返回码, GdipGetCustomLineCapStrokeCaps (m_CustomLineCap, 参数_起点线帽, 参数_终点线帽))
返回 (等于 (全局_返回码, 0))


.子程序 置笔画连线方式, 逻辑型, 公开, GdipSetCustomLineCapStrokeJoin
.参数 参数_连线方式, 整数型, , “连线方式_”开头常量。

赋值 (全局_返回码, GdipSetCustomLineCapStrokeJoin (m_CustomLineCap, 参数_连线方式))
返回 (等于 (全局_返回码, 0))


.子程序 取笔画连线方式, 整数型, 公开, GdipGetCustomLineCapStrokeJoin。返回“连线方式_”开头常量。
.局部变量 局部_连线方式, 整数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapStrokeJoin (m_CustomLineCap, 局部_连线方式))
返回 (局部_连线方式)

.子程序 置基线帽, 逻辑型, 公开, GdipSetCustomLineCapBaseCap
.参数 参数_线帽样式, 整数型, , “线帽样式_”开头常量

赋值 (全局_返回码, GdipSetCustomLineCapBaseCap (m_CustomLineCap, 参数_线帽样式))
返回 (等于 (全局_返回码, 0))

.子程序 取基线帽, 整数型, 公开, GdipGetCustomLineCapBaseCap。返回“线帽样式_”开头常量
.局部变量 局部_线帽样式, 整数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapBaseCap (m_CustomLineCap, 局部_线帽样式))
返回 (局部_线帽样式)

.子程序 置基距离, 逻辑型, 公开, GdipSetCustomLineCapBaseInset
.参数 参数_基距离, 小数型, , 

赋值 (全局_返回码, GdipSetCustomLineCapBaseInset (m_CustomLineCap, 参数_基距离))
返回 (等于 (全局_返回码, 0))


.子程序 取基距离, 小数型, 公开, GdipGetCustomLineCapBaseInset。返回“线帽样式_”开头常量
.局部变量 局部_基距离, 小数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapBaseInset (m_CustomLineCap, 局部_基距离))
返回 (局部_基距离)

.子程序 置宽比例, 逻辑型, 公开, GdipSetCustomLineCapWidthScale
.参数 参数_宽比例, 小数型, , 

赋值 (全局_返回码, GdipSetCustomLineCapWidthScale (m_CustomLineCap, 参数_宽比例))
返回 (等于 (全局_返回码, 0))


.子程序 取宽比例, 小数型, 公开, GdipGetCustomLineCapWidthScale。
.局部变量 局部_宽比例, 小数型, , , 

赋值 (全局_返回码, GdipGetCustomLineCapWidthScale (m_CustomLineCap, 局部_宽比例))
返回 (局部_宽比例)

.类模块 GP字体集, Gdiplus基类, , FontCollection

.程序集变量 m_FontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_FontCollection, 参数_指针)
方法_子置指针 (m_FontCollection)

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 取字体族数, 整数型, 公开, GdipGetFontCollectionFamilyCount。
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipGetFontCollectionFamilyCount (m_FontCollection, 局部_总数))
返回 (局部_总数)

.子程序 取字体族列表, 整数型, 公开, GdipGetFontCollectionFamilyList。成功返回实际字体族数量。
.参数 参数_数量, 整数型, , 
.参数 参数_字体族, GP字体族, 参考 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_字体族, 整数型, , "0", 
.局部变量 i, 整数型, , , 

.如果真 (小于或等于 (参数_数量, 0))
    赋值 (全局_返回码, 2)
    返回 (0)
.如果真结束
重定义数组 (局部_字体族, 假, 参数_数量)
重定义数组 (参数_字体族, 假, 参数_数量)
赋值 (全局_返回码, GdipGetFontCollectionFamilyList (m_FontCollection, 参数_数量, 局部_字体族, 局部_数量))
.如果真 (等于 (全局_返回码, 0))
    .计次循环首 (取数组成员数 (局部_字体族), i)
        参数_字体族.置指针 ( [i], 局部_字体族 [i])
    .计次循环尾 ()
.如果真结束
返回 (局部_数量)


.类模块 GP系统字体集, GP字体集, , InstalledFontCollection。基类：GP字体集

.程序集变量 m_InstalledFontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_InstalledFontCollection, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipNewInstalledFontCollection
赋值 (全局_返回码, GdipNewInstalledFontCollection (m_InstalledFontCollection))
置指针 (m_InstalledFontCollection)
返回 (等于 (全局_返回码, 0))


.类模块 GP私有字体集, GP字体集, , PrivateFontCollection。基类：GP字体集

.程序集变量 m_PrivateFontCollection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_PrivateFontCollection, 参数_指针)


.子程序 创建, 逻辑型, 公开, GdipNewPrivateFontCollection
赋值 (全局_返回码, GdipNewPrivateFontCollection (m_PrivateFontCollection))
置指针 (m_PrivateFontCollection)
返回 (等于 (全局_返回码, 0))

.子程序 销毁, 逻辑型, 公开, GdipDeletePrivateFontCollection
.如果真 (等于 (m_PrivateFontCollection, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePrivateFontCollection (m_PrivateFontCollection))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 添加字体文件, 逻辑型, 公开, GdipPrivateAddFontFile
.参数 参数_字体文件名, 文本型, , 

赋值 (全局_返回码, GdipPrivateAddFontFile (m_PrivateFontCollection, GdiplusA2W (参数_字体文件名)))
返回 (等于 (全局_返回码, 0))

.子程序 添加字体字节集, 逻辑型, 公开, 
.参数 参数_字体字节集, 字节集, , 

.局部变量 局部_Istream, IStream, , , 
.局部变量 局部_句柄, 整数型, , , 
.局部变量 局部_指针, 整数型, , , 

局部_Istream.创建 (参数_字体字节集)
赋值 (局部_句柄, 局部_Istream.取内存句柄 ())
赋值 (局部_指针, GlobalLock (局部_句柄))
赋值 (全局_返回码, GdipPrivateAddMemoryFont (m_PrivateFontCollection, 局部_指针, 局部_Istream.取尺寸 ()))
GlobalFree (局部_句柄)
返回 (等于 (全局_返回码, 0))

.类模块 GP文本格式, Gdiplus基类, , StringFormat

.程序集变量 m_StringFormat, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_StringFormat, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteStringFormat
.如果真 (等于 (m_StringFormat, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteStringFormat (m_StringFormat))
置指针 (0)
返回 (等于 (全局_返回码, 0))


.子程序 创建, 逻辑型, 公开, GdipCreateStringFormat
.参数 参数_格式标志, 整数型, 可空, “文本格式标志_”开头常量。
.参数 参数_语言, 短整数型, 可空, 默认为：LANG_NEUTRAL=0

赋值 (全局_返回码, GdipCreateStringFormat (参数_格式标志, 参数_语言, m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用默认, 逻辑型, 公开, GdipStringFormatGetGenericDefault
赋值 (全局_返回码, GdipStringFormatGetGenericDefault (m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))


.子程序 创建自通用印刷, 逻辑型, 公开, GdipStringFormatGetGenericTypographic
赋值 (全局_返回码, GdipStringFormatGetGenericTypographic (m_StringFormat))
置指针 (m_StringFormat)
返回 (等于 (全局_返回码, 0))

.子程序 复制, 逻辑型, 公开, GdipCloneStringFormat
.参数 参数_文本格式, GP文本格式, 参考, 

.局部变量 局部_文本格式, 整数型, , , 

赋值 (全局_返回码, GdipCloneStringFormat (m_StringFormat, 局部_文本格式))
参数_文本格式.置指针 (局部_文本格式)
返回 (等于 (全局_返回码, 0))

.子程序 置格式标志, 逻辑型, 公开, GdipSetStringFormatFlags
.参数 参数_格式标志, 整数型, , “文本格式标志_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatFlags (m_StringFormat, 参数_格式标志))
返回 (等于 (全局_返回码, 0))

.子程序 取格式标志, 整数型, 公开, GdipGetStringFormatFlags。返回“文本格式标志_”开头常量。
.局部变量 局部_标志, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatFlags (m_StringFormat, 局部_标志))
返回 (局部_标志)

.子程序 置对齐, 逻辑型, 公开, GdipSetStringFormatAlign
.参数 参数_对齐方式, 整数型, , “文本对齐_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatAlign (m_StringFormat, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))


.子程序 取对齐, 整数型, 公开, GdipGetStringFormatAlign。返回“文本对齐_”开头常量。
.局部变量 局部_对齐, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatAlign (m_StringFormat, 局部_对齐))
返回 (局部_对齐)


.子程序 置行对齐, 逻辑型, 公开, GdipSetStringFormatLineAlign
.参数 参数_对齐方式, 整数型, , “文本对齐_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatLineAlign (m_StringFormat, 参数_对齐方式))
返回 (等于 (全局_返回码, 0))


.子程序 取行对齐, 整数型, 公开, GdipGetStringFormatLineAlign。返回“文本对齐_”开头常量。
.局部变量 局部_对齐, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatLineAlign (m_StringFormat, 局部_对齐))
返回 (局部_对齐)

.子程序 置修整, 逻辑型, 公开, GdipSetStringFormatTrimming
.参数 参数_修整方式, 整数型, , “文本修整_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatTrimming (m_StringFormat, 参数_修整方式))
返回 (等于 (全局_返回码, 0))


.子程序 取修整, 整数型, 公开, GdipGetStringFormatTrimming。返回“文本修整_”开头常量。
.局部变量 局部_修整, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatTrimming (m_StringFormat, 局部_修整))
返回 (局部_修整)

.子程序 置热键前缀, 逻辑型, 公开, GdipSetStringFormatHotkeyPrefix。字符(&)
.参数 参数_热键前缀, 整数型, , “热键前缀_”开头常量。

赋值 (全局_返回码, GdipSetStringFormatHotkeyPrefix (m_StringFormat, 参数_热键前缀))
返回 (等于 (全局_返回码, 0))


.子程序 取热键前缀, 整数型, 公开, GdipGetStringFormatHotkeyPrefix。返回“热键前缀_”开头常量。
.局部变量 局部_热键前缀, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatHotkeyPrefix (m_StringFormat, 局部_热键前缀))
返回 (局部_热键前缀)

.子程序 置制表位偏移, 逻辑型, 公开, GdipSetStringFormatTabStops
.参数 参数_初始偏移量, 小数型, , 文本行开头和第一个制表位之间的空格数
.参数 参数_偏移距离, 小数型, 数组, 数组中的每个制表位偏移量（第一个除外）都是相对于前一个的。第一个制表位偏移量相对于由 “参数_初始偏移量” 指定的初始偏移位置。例如，如果初始偏移位置是 8，第一个制表位偏移量是 50，则第一个制表位的位置是 58。如果初始偏移位置是零，则第一个制表位偏移量相对于位置 0（即原点字符串）。

赋值 (全局_返回码, GdipSetStringFormatTabStops (m_StringFormat, 参数_初始偏移量, 取数组成员数 (参数_偏移距离), 参数_偏移距离))
返回 (等于 (全局_返回码, 0))

.子程序 取制表位偏移, 整数型, 公开, GdipGetStringFormatTabStops。返回制表位偏移总数。
.参数 参数_初始偏移量, 小数型, 参考, 文本行开头和第一个制表位之间的空格数
.参数 参数_偏移距离, 小数型, 参考 数组, 数组中的每个制表位偏移量（第一个除外）都是相对于前一个的。第一个制表位偏移量相对于由 “参数_初始偏移量” 指定的初始偏移位置。例如，如果初始偏移位置是 8，第一个制表位偏移量是 50，则第一个制表位的位置是 58。如果初始偏移位置是零，则第一个制表位偏移量相对于位置 0（即原点字符串）。

.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatTabStopCount (m_StringFormat, 局部_count))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_偏移距离, 假, 参数_初始偏移量)
赋值 (全局_返回码, GdipGetStringFormatTabStops (m_StringFormat, 局部_count, 参数_初始偏移量, 参数_偏移距离))
返回 (局部_count)


.子程序 置数字替换, 逻辑型, 公开, GdipSetStringFormatDigitSubstitution
.参数 参数_数字替换, 整数型, , “文本数字替换_”开头常量。
.参数 参数_语言, 短整数型, 可空, 默认为：LANG_NEUTRAL

赋值 (全局_返回码, GdipSetStringFormatDigitSubstitution (m_StringFormat, 参数_语言, 参数_数字替换))
返回 (等于 (全局_返回码, 0))

.子程序 取数字替换, 逻辑型, 公开, GdipGetStringFormatDigitSubstitution
.参数 参数_数字替换, 整数型, 参考, 返回“文本数字替换_”开头常量。
.参数 参数_语言, 短整数型, 参考 可空, 

赋值 (全局_返回码, GdipGetStringFormatDigitSubstitution (m_StringFormat, 参数_语言, 参数_数字替换))
返回 (等于 (全局_返回码, 0))


.子程序 置测量字符范围, 逻辑型, 公开, GdipSetStringFormatMeasurableCharacterRanges
.参数 参数_字符范围, 测试字符范围, 数组, 

赋值 (全局_返回码, GdipSetStringFormatMeasurableCharacterRanges (m_StringFormat, 取数组成员数 (参数_字符范围), 参数_字符范围))
返回 (等于 (全局_返回码, 0))

.子程序 取测量字符范围数, 整数型, 公开, GdipGetStringFormatMeasurableCharacterRangeCount
.局部变量 局部_count, 整数型, , , 

赋值 (全局_返回码, GdipGetStringFormatMeasurableCharacterRangeCount (m_StringFormat, 局部_count))
返回 (局部_count)

.类模块 GP位图, GP图像, , Bitmap。基类：GP图像

.程序集变量 m_Bitmap, 整数型, , , 
.程序集变量 m_Istream, IStream, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Bitmap, 参数_指针)


.子程序 销毁, 逻辑型, 公开, GdipDisposeImage。
.如果真 (等于 (m_Bitmap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDisposeImage (m_Bitmap))
置指针 (0)
m_Istream.释放 ()
返回 (等于 (全局_返回码, 0))

.子程序 创建自文件, 逻辑型, 公开, GdipCreateBitmapFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用已嵌入颜色管理信息来进行颜色校正。

.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipCreateBitmapFromFileICM (GdiplusA2W (参数_文件名), m_Bitmap))
.否则
    赋值 (全局_返回码, GdipCreateBitmapFromFile (GdiplusA2W (参数_文件名), m_Bitmap))
.如果结束

置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自字节集, 逻辑型, 公开, GdipCreateBitmapFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_是否ICM, 逻辑型, 可空, 默认为假。如果为真表示使用已嵌入颜色管理信息来进行颜色校正。

m_Istream.创建 (参数_字节集)
.如果 (参数_是否ICM)
    赋值 (全局_返回码, GdipCreateBitmapFromStreamICM (m_Istream.取字节流指针 (), m_Bitmap))
.否则
    赋值 (全局_返回码, GdipCreateBitmapFromStream (m_Istream.取字节流指针 (), m_Bitmap))
.如果结束

置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))

.子程序 创建自扫描行, 逻辑型, 公开, GdipCreateBitmapFromScan0
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_跨步, 整数型, , 指定相邻扫描行开始处之间字节偏移量的整数。这通常（但不一定）是以像素格式表示的字节数（例如，2 表示每像素 16 位）乘以位图的宽度。传递给此参数的值必须为 4 的倍数。提供一个公式：左移(右移(参数_宽度*位深+31,5),2)
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_像素数据, 整数型, 可空, 指向包含像素数据的字节集指针。

赋值 (全局_返回码, GdipCreateBitmapFromScan0 (参数_宽度, 参数_高度, 参数_跨步, 参数_像素格式, 参数_像素数据, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自像素格式, 逻辑型, 公开, GdipCreateBitmapFromScan0
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_像素格式, 整数型, 可空, “像素格式_”开头常量。默认为：“像素格式_32bppARGB”

.如果真 (是否为空 (参数_像素格式))
    赋值 (参数_像素格式, #像素格式_32bppARGB)
.如果真结束
赋值 (全局_返回码, GdipCreateBitmapFromScan0 (参数_宽度, 参数_高度, 0, 参数_像素格式, 0, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自图形, 逻辑型, 公开, GdipCreateBitmapFromGraphics
.参数 参数_宽度, 整数型, , 
.参数 参数_高度, 整数型, , 
.参数 参数_图形, GP图形, , 使用其分辨率

赋值 (全局_返回码, GdipCreateBitmapFromGraphics (参数_宽度, 参数_高度, 参数_图形.取指针 (), m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自GDI对象, 逻辑型, 公开, GdipCreateBitmapFromGdiDib
.参数 参数_BITMAPINFO, 整数型, , BITMAPINFO结构指针。
.参数 参数_位图数据, 整数型, , 位图数据指针。

赋值 (全局_返回码, GdipCreateBitmapFromGdiDib (参数_BITMAPINFO, 参数_位图数据, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自位图句柄, 逻辑型, 公开, GdipCreateBitmapFromHBITMAP
.参数 参数_位图句柄, 整数型, , hBitmap
.参数 参数_调色板句柄, 整数型, 可空, 如果位图句柄不是一个设备无关位图，则用于定义位图颜色。

赋值 (全局_返回码, GdipCreateBitmapFromHBITMAP (参数_位图句柄, 参数_调色板句柄, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自图标句柄, 逻辑型, 公开, GdipCreateBitmapFromHICON
.参数 参数_图标句柄, 整数型, , hIcon

赋值 (全局_返回码, GdipCreateBitmapFromHICON (参数_图标句柄, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 创建自资源, 逻辑型, 公开, GdipCreateBitmapFromResource
.参数 参数_实例句柄, 整数型, , 
.参数 参数_资源ID, 整数型, , 

赋值 (全局_返回码, GdipCreateBitmapFromResource (参数_实例句柄, 参数_资源ID, m_Bitmap))
置指针 (m_Bitmap)
返回 (等于 (全局_返回码, 0))


.子程序 取位图句柄, 整数型, 公开, GdipCreateHBITMAPFromBitmap。返回位图句柄。需要调用 DeleteObject 释放。
.参数 参数_背景ARGB颜色, 整数型, 可空, 指定背景色。如果位图完全不透明，则忽略此参数。

.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipCreateHBITMAPFromBitmap (m_Bitmap, 局部_句柄, 参数_背景ARGB颜色))
返回 (局部_句柄)


.子程序 取图标句柄, 整数型, 公开, GdipCreateHICONFromBitmap。返回图标句柄。需要调用 DestroyIcon 释放。
.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipCreateHICONFromBitmap (m_Bitmap, 局部_句柄))
返回 (局部_句柄)


.子程序 复制部分, 逻辑型, 公开, GdipCloneBitmapArea
.参数 参数_矩形, 矩形F, , 
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_位图, GP位图, 参考, 返回新的位图对象。

.局部变量 局部_位图, 整数型, , , 

赋值 (全局_返回码, GdipCloneBitmapArea (参数_矩形.左边, 参数_矩形.顶边, 参数_矩形.宽度, 参数_矩形.高度, 参数_像素格式, m_Bitmap, 局部_位图))
参数_位图.置指针 (局部_位图)
返回 (等于 (全局_返回码, 0))

.子程序 锁定数据, 逻辑型, 公开, GdipBitmapLockBits
.参数 参数_锁定矩形, 矩形L, , 被锁定的矩形范围。
.参数 参数_锁定模式, 整数型, , “图像锁定模式_”开头常量。
.参数 参数_像素格式, 整数型, , “像素格式_”开头常量。
.参数 参数_位图数据, 位图数据, 参考, [in,out]

赋值 (全局_返回码, GdipBitmapLockBits (m_Bitmap, 参数_锁定矩形, 参数_锁定模式, 参数_像素格式, 参数_位图数据))
返回 (等于 (全局_返回码, 0))

.子程序 解锁数据, 逻辑型, 公开, GdipBitmapUnlockBits
.参数 参数_位图数据, 位图数据, , 

赋值 (全局_返回码, GdipBitmapUnlockBits (m_Bitmap, 参数_位图数据))
返回 (等于 (全局_返回码, 0))

.子程序 取某点颜色, 整数型, 公开, GdipBitmapGetPixel。返回ARGB颜色值。
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_ARGB颜色, 整数型, , , 

赋值 (全局_返回码, GdipBitmapGetPixel (m_Bitmap, 参数_x, 参数_y, 局部_ARGB颜色))
返回 (局部_ARGB颜色)

.子程序 置某点颜色, 逻辑型, 公开, GdipBitmapSetPixel
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 
.参数 参数_ARGB颜色, 整数型, , 

赋值 (全局_返回码, GdipBitmapSetPixel (m_Bitmap, 参数_x, 参数_y, 参数_ARGB颜色))
返回 (等于 (全局_返回码, 0))


.子程序 置分辨率, 逻辑型, 公开, GdipBitmapSetResolution
.参数 参数_水平分辨率, 小数型, , 
.参数 参数_垂直分辨率, 小数型, , 

赋值 (全局_返回码, GdipBitmapSetResolution (m_Bitmap, 参数_水平分辨率, 参数_垂直分辨率))
返回 (等于 (全局_返回码, 0))

.子程序 应用效果, 逻辑型, 公开, GdipBitmapApplyEffect
.参数 参数_效果, GP效果类, , 
.参数 参数_矩形, 矩形L, 可空, 

.局部变量 auxData, 整数型, , , 
.局部变量 auxDataSize, 整数型, , , 

.如果真 (不等于 (参数_效果.取辅助数据 (), 0))
    GdipFree (参数_效果.取辅助数据 ())
.如果真结束

.如果 (是否为空 (参数_矩形))
    赋值 (全局_返回码, GdipBitmapApplyEffect_int (m_Bitmap, 参数_效果.取指针 (), 0, 参数_效果.使用辅助数据 (), auxData, auxDataSize))
.否则
    赋值 (全局_返回码, GdipBitmapApplyEffect (m_Bitmap, 参数_效果.取指针 (), 参数_矩形, 参数_效果.使用辅助数据 (), auxData, auxDataSize))
.如果结束
 ' 这里其实是设置辅助数据
参数_效果.取辅助数据 (auxData)
参数_效果.取辅助数据大小 (auxDataSize)
返回 (等于 (全局_返回码, 0))


.类模块 GP图元文件, GP图像, , Metafile。基类：GP图像

.程序集变量 m_Metafile, 整数型, , , 
.程序集变量 m_Istream, IStream, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Metafile, 参数_指针)


.子程序 创建自文件, 逻辑型, 公开, GdipCreateMetafileFromFile
.参数 参数_文件名, 文本型, , 
.参数 参数_保留, 逻辑型, 可空, 

赋值 (全局_返回码, GdipCreateMetafileFromFile (GdiplusA2W (参数_文件名), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自字节集, 逻辑型, 公开, GdipCreateMetafileFromStream
.参数 参数_字节集, 字节集, , 
.参数 参数_保留, 逻辑型, 可空, 

m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipCreateMetafileFromStream (m_Istream.取字节流指针 (), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自hWMF, 逻辑型, , GdipCreateMetafileFromWmf
.参数 参数_WMF句柄, 整数型, , 
.参数 参数_APM文件头, APM文件头, , 
.参数 参数_是否删除句柄, 逻辑型, 可空, 指定是否自动删除图元文件句柄。

赋值 (全局_返回码, GdipCreateMetafileFromWmf (参数_WMF句柄, 参数_是否删除句柄, 参数_APM文件头, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自hEMF, 逻辑型, , GdipCreateMetafileFromEmf
.参数 参数_EMF句柄, 整数型, , 
.参数 参数_是否删除句柄, 逻辑型, 可空, 指定是否自动删除图元文件句柄。

赋值 (全局_返回码, GdipCreateMetafileFromEmf (参数_EMF句柄, 参数_是否删除句柄, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自WMF文件, 逻辑型, , GdipCreateMetafileFromWmfFile
.参数 参数_文件名, 文本型, , 
.参数 参数_APM文件头, APM文件头, , 

赋值 (全局_返回码, GdipCreateMetafileFromWmfFile (GdiplusA2W (参数_文件名), 参数_APM文件头, m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录, 逻辑型, , GdipRecordMetafile
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafile (参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录I, 逻辑型, , GdipRecordMetafileI
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileI (参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自记录文件名, 逻辑型, , GdipRecordMetafileFileName
.参数 参数_文件名, 文本型, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_适合
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileFileName (GdiplusA2W (参数_文件名), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录文件名I, 逻辑型, , GdipRecordMetafileFileNameI
.参数 参数_文件名, 文本型, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_适合
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
赋值 (全局_返回码, GdipRecordMetafileFileNameI (GdiplusA2W (参数_文件名), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 创建自记录字节集, 逻辑型, , GdipRecordMetafileStream
.参数 参数_字节集, 字节集, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形F, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipRecordMetafileStream (m_Istream.取字节流指针 (), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))


.子程序 创建自记录字节集I, 逻辑型, , GdipRecordMetafileStreamI
.参数 参数_字节集, 字节集, , 
.参数 参数_hdc, 整数型, , 设备上下文句柄。
.参数 参数_框架矩形, 矩形L, 可空, 
.参数 参数_框架单位, 整数型, 可空, “图元文件单位_”开头常量。默认为：图元文件单位_GDI
.参数 参数_EMF类型, 整数型, 可空, “EMF类型_”开头常量。默认为：EMF类型_EmfPlusDual
.参数 参数_描述文本, 文本型, 可空, 

.如果真 (是否为空 (参数_框架单位))
    赋值 (参数_框架单位, #图元文件单位_GDI)
.如果真结束
.如果真 (是否为空 (参数_EMF类型))
    赋值 (参数_EMF类型, #EMF类型_EmfPlusDual)
.如果真结束
m_Istream.创建 (参数_字节集)
赋值 (全局_返回码, GdipRecordMetafileStreamI (m_Istream.取字节流指针 (), 参数_hdc, 参数_EMF类型, 参数_框架矩形, 参数_框架单位, GdiplusA2W (参数_描述文本), m_Metafile))
置指针 (m_Metafile)
返回 (等于 (全局_返回码, 0))

.子程序 取图元文件头自hWMF, 图元文件头, 公开, GdipGetMetafileHeaderFromWmf
.参数 参数_hWMF, 整数型, , 
.参数 参数_APM文件头, APM文件头, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromWmf (参数_hWMF, 参数_APM文件头, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头自hEMF, 图元文件头, 公开, GdipGetMetafileHeaderFromEmf
.参数 参数_hEMF, 整数型, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromEmf (参数_hEMF, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头自文件, 图元文件头, , GdipGetMetafileHeaderFromFile
.参数 参数_文件名, 文本型, , 

.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromFile (GdiplusA2W (参数_文件名), 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))


.子程序 取图元文件头自字节集, 图元文件头, , GdipGetMetafileHeaderFromStream
.参数 参数_字节集, 字节集, , 

.局部变量 局部_缓冲区, 字节集, , , 
.局部变量 局部_IStream, IStream, , , 

局部_IStream.创建 (参数_字节集)
赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromStream (局部_IStream.取字节流指针 (), 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 取图元文件头, 图元文件头, , GdipGetMetafileHeaderFromMetafile
.局部变量 局部_缓冲区, 字节集, , , 

赋值 (局部_缓冲区, 取空白字节集 (140))
赋值 (全局_返回码, GdipGetMetafileHeaderFromMetafile (m_Metafile, 局部_缓冲区))
返回 (GetMetafileHeader (局部_缓冲区))

.子程序 GetMetafileHeader, 图元文件头, , 
.参数 参数_缓冲区, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 局部_文件头, 图元文件头, , , 

赋值 (i, 1)
赋值 (局部_文件头.类型, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.大小, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.版本, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.增强EMF标识, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.水平分辨率, 取字节集数据 (参数_缓冲区, #小数型, i))
赋值 (局部_文件头.垂直分辨率, 取字节集数据 (参数_缓冲区, #小数型, i))
赋值 (局部_文件头.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.类型, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.大小, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.边界矩形.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.左边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.顶边, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.框架矩形.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.签名, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.版本, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.字节数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.记录数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.句柄数, 取字节集数据 (参数_缓冲区, #短整数型, i))
赋值 (局部_文件头.EMF文件头.保留, 取字节集数据 (参数_缓冲区, #短整数型, i))
赋值 (局部_文件头.EMF文件头.描述数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.描述偏移, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.描述数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.调色板项目数, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备像素尺寸.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备像素尺寸.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备毫米尺寸.宽度, 取字节集数据 (参数_缓冲区, #整数型, i))
赋值 (局部_文件头.EMF文件头.设备毫米尺寸.高度, 取字节集数据 (参数_缓冲区, #整数型, i))
返回 (局部_文件头)

.子程序 置栅格化限制, 逻辑型, , GdipSetMetafileDownLevelRasterizationLimit
.参数 参数_栅格化限制DPI, 整数型, , 

赋值 (全局_返回码, GdipSetMetafileDownLevelRasterizationLimit (m_Metafile, 参数_栅格化限制DPI))
返回 (等于 (全局_返回码, 0))


.子程序 取栅格化限制, 整数型, , GdipGetMetafileDownLevelRasterizationLimit
.局部变量 局部_栅格化限制DPI, 整数型, , , 

赋值 (全局_返回码, GdipGetMetafileDownLevelRasterizationLimit (m_Metafile, 局部_栅格化限制DPI))
返回 (局部_栅格化限制DPI)


.子程序 取EMF句柄, 整数型, , GdipGetHemfFromMetafile。需要使用 DeleteEnhMetafile 释放。
.局部变量 局部_句柄, 整数型, , , 

赋值 (全局_返回码, GdipGetHemfFromMetafile (m_Metafile, 局部_句柄))
返回 (局部_句柄)


.子程序 播放记录, 逻辑型, , GdipPlayMetafileRecord
.参数 参数_记录类型, 整数型, , 
.参数 参数_标志, 整数型, , 0
.参数 参数_数据大小, 整数型, , 
.参数 参数_数据指针, 整数型, , 

赋值 (全局_返回码, GdipPlayMetafileRecord (m_Metafile, 参数_记录类型, 参数_标志, 参数_数据大小, 参数_数据指针))
返回 (等于 (全局_返回码, 0))


.类模块 GP缓存位图, Gdiplus基类, , CachedBitmap

.程序集变量 m_CachedBitmap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_CachedBitmap, 参数_指针)

.子程序 销毁, 逻辑型, 公开, GdipDeleteCachedBitmap
.局部变量 局部_返回值, 整数型, , , 

.如果真 (等于 (m_CachedBitmap, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeleteCachedBitmap (m_CachedBitmap))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 创建, 逻辑型, 公开, GdipCreateCachedBitmap
.参数 参数_位图, GP位图, , 
.参数 参数_图形, GP图形, , 

赋值 (全局_返回码, GdipCreateCachedBitmap (参数_位图.取指针 (), 参数_图形.取指针 (), m_CachedBitmap))
置指针 (m_CachedBitmap)
返回 (等于 (全局_返回码, 0))


.程序集 程序集_全局, , , 

.程序集变量 m_token, 整数型, , , 
.子程序 Gdiplus初始化, 整数型, , GdiplusStartup。初始化GDI+。使用GID+之前必须初始化。返回一个标记，用作关闭()
.参数 参数_版本, 整数型, 可空, 默认为1

.局部变量 StartupInput, GdiplusStartupInput, , , 
.局部变量 token, 整数型, , , 

.如果真 (是否为空 (参数_版本))
    赋值 (参数_版本, 1)
.如果真结束
赋值 (StartupInput.GdiplusVersion, 参数_版本)
GdiplusStartup (token, StartupInput, 0)
赋值 (m_token, token)
返回 (token)


.子程序 Gdiplus关闭, 空白型, , GdiplusShutdown。
.参数 参数_标记, 整数型, 可空, 由 Gdiplus初始化() 返回。默认为最后一次调用 Gdiplus初始化() 返回的标记。

.如果真 (是否为空 (参数_标记))
    赋值 (参数_标记, m_token)
    赋值 (m_token, 0)
.如果真结束
.如果真 (不等于 (参数_标记, 0))
    GdiplusShutdown (参数_标记)
    
.如果真结束



.子程序 Gdiplus取最后错误, 整数型, , GdiplusGetLastStatus
返回 (全局_返回码)


.子程序 Gdiplus取最后错误文本, 文本型, , GdiplusGetLastStatusText
.判断开始 (等于 (全局_返回码, 0))
    返回 (“”)
.判断 (等于 (全局_返回码, 1))
    返回 (“通用错误”)
.判断 (等于 (全局_返回码, 2))
    返回 (“无效的参数”)
.判断 (等于 (全局_返回码, 3))
    返回 (“内存溢出”)
.判断 (等于 (全局_返回码, 4))
    返回 (“对象繁忙”)
.判断 (等于 (全局_返回码, 5))
    返回 (“缓冲区不足”)
.判断 (等于 (全局_返回码, 6))
    返回 (“未实现”)
.判断 (等于 (全局_返回码, 7))
    返回 (“Win32错误”)
.判断 (等于 (全局_返回码, 8))
    返回 (“错误状态”)
.判断 (等于 (全局_返回码, 9))
    返回 (“失败”)
.判断 (等于 (全局_返回码, 10))
    返回 (“未找到文件”)
.判断 (等于 (全局_返回码, 11))
    返回 (“值溢出”)
.判断 (等于 (全局_返回码, 12))
    返回 (“访问被拒绝”)
.判断 (等于 (全局_返回码, 13))
    返回 (“未知图像格式”)
.判断 (等于 (全局_返回码, 14))
    返回 (“未找到字体族”)
.判断 (等于 (全局_返回码, 15))
    返回 (“未找到字体风格”)
.判断 (等于 (全局_返回码, 16))
    返回 (“不是TrueType字体”)
.判断 (等于 (全局_返回码, 17))
    返回 (“不支持Gdiplus版本”)
.判断 (等于 (全局_返回码, 18))
    返回 (“Gdiplus未装载”)
.判断 (等于 (全局_返回码, 19))
    返回 (“资源未找到”)
.判断 (等于 (全局_返回码, 20))
    返回 (“资源不支持”)
.判断 (等于 (全局_返回码, 21))
    返回 (“未找到配置文件”)
.默认
    返回 (“未知错误”)
.判断结束


.子程序 RGB到ARGB, 整数型, , 
.参数 参数_RGB, 整数型, , 
.参数 参数_透明度, 字节型, 可空, 默认为255，不透明。

.局部变量 Color, 字节集, , , 
.局部变量 temp, 字节型, , , 

.如果真 (是否为空 (参数_透明度))
    赋值 (参数_透明度, 255)
.如果真结束
赋值 (Color, 到字节集 (参数_RGB))
赋值 (temp, Color [1])
赋值 (Color [1], Color [3])
赋值 (Color [3], temp)
赋值 (Color [4], 参数_透明度)
 ' 参数_RGB ＝ 位或 (Color [3] ＋ Color [2] × 256 ＋ Color [1] × 65536, 左移 (参数_透明度, 24))  ' 转换成GDI+的颜色值
返回 (取字节集数据 (Color, #整数型, ))


.子程序 ARGB到RGB, 整数型, , 
.参数 参数_ARGB, 整数型, , 
.参数 参数_透明度, 字节型, 参考 可空, 

.局部变量 Color, 字节集, , , 
.局部变量 temp, 字节型, , , 

赋值 (Color, 到字节集 (参数_ARGB))
赋值 (参数_透明度, Color [4])
赋值 (Color [4], 0)
赋值 (temp, Color [3])
赋值 (Color [3], Color [1])
赋值 (Color [1], temp)
返回 (取字节集数据 (Color, #整数型, ))

.子程序 GdiplusW2A, 文本型, , 将Unicode转成Ansi
.参数 参数_Unicode文本指针, 整数型, , 

.局部变量 Ansi长度, 整数型, , , 
.局部变量 返回值, 文本型, , , 

赋值 (Ansi长度, WideCharToMultiByte (1, 0, 参数_Unicode文本指针, -1, “”, 0, 0, 0))
赋值 (返回值, 取空白文本 (Ansi长度))
WideCharToMultiByte (1, 0, 参数_Unicode文本指针, -1, 返回值, Ansi长度, 0, 0)
返回 (返回值)

.子程序 GdiplusA2W, 字节集, , 将Ansi转成Unicode
.参数 参数_Ansi文本, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 返回值, 字节集, , , 

赋值 (长度, 相乘 (MultiByteToWideChar (0, 0, 参数_Ansi文本, -1, {  }, 0), 2))
赋值 (返回值, 取空白字节集 (长度))
MultiByteToWideChar (0, 0, 参数_Ansi文本, 取文本长度 (参数_Ansi文本), 返回值, 长度)
返回 (返回值)


.子程序 取宽文本长度, 整数型, , lstrlenw
.参数 参数_Unicode文本, 字节集, , 

返回 (lstrlenw (参数_Unicode文本))

.子程序 取图像编码列表, 整数型, , GdipGetImageEncoders。返回图像编码列表数。
.参数 参数_图像编码信息, 图像编解码信息, 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_temp, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (全局_返回码, GdipGetImageEncodersSize (局部_数量, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_图像编码信息, 假, 局部_数量)
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImageEncoders (局部_数量, 局部_size, 局部_字节集))
赋值 (j, 1)
.计次循环首 (局部_数量, i)
    赋值 (参数_图像编码信息 [i], Clsid, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (参数_图像编码信息 [i], 图像格式ID, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 编码器名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], DLL名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 格式描述, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 文件扩展名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], Mime类型, GdiplusW2A (局部_temp))
    
    赋值 (参数_图像编码信息 [i], 标志, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 版本, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名数, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名大小, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名模式, 指针到字节集 (局部_temp, 相乘 (参数_图像编码信息 [i], 签名大小, 参数_图像编码信息 [i], 签名数)))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_图像编码信息 [i], 签名掩码, 指针到字节集 (局部_temp, 相乘 (参数_图像编码信息 [i], 签名大小, 参数_图像编码信息 [i], 签名数)))
.计次循环尾 ()
返回 (局部_数量)


.子程序 取图像解码列表, 整数型, , GdipGetImageEncoders。返回图像解码列表数。
.参数 参数_信息, 图像编解码信息, 数组, 

.局部变量 局部_数量, 整数型, , , 
.局部变量 局部_size, 整数型, , , 
.局部变量 局部_字节集, 字节集, , , 
.局部变量 局部_temp, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 

赋值 (全局_返回码, GdipGetImageDecodersSize (局部_数量, 局部_size))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_信息, 假, 局部_数量)
赋值 (局部_字节集, 取空白字节集 (局部_size))
赋值 (全局_返回码, GdipGetImageDecoders (局部_数量, 局部_size, 局部_字节集))
赋值 (j, 1)
.计次循环首 (局部_数量, i)
    赋值 (参数_信息 [i], Clsid, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (参数_信息 [i], 图像格式ID, GUID到文本 (取字节集中间 (局部_字节集, j, 16)))
    赋值 (j, 相加 (j, 16))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 编码器名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], DLL名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 格式描述, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 文件扩展名, GdiplusW2A (局部_temp))
    
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], Mime类型, GdiplusW2A (局部_temp))
    
    赋值 (参数_信息 [i], 标志, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 版本, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名数, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名大小, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名模式, 指针到字节集 (局部_temp, 相乘 (参数_信息 [i], 签名大小, 参数_信息 [i], 签名数)))
    赋值 (局部_temp, 取字节集数据 (局部_字节集, #整数型, j))
    赋值 (参数_信息 [i], 签名掩码, 指针到字节集 (局部_temp, 相乘 (参数_信息 [i], 签名大小, 参数_信息 [i], 签名数)))
.计次循环尾 ()
返回 (局部_数量)


.子程序 取图像编码CLSID自Mime, 文本型, , GetCodecClsid
.参数 参数_Mime, 文本型, , 只能是如下值：“image/bmp”、“image/jpeg”、“image/gif”、“image/tiff”、“image/png”

.局部变量 局部_图像编码信息, 图像编解码信息, , "0", 
.局部变量 局部_数量, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_数量, 取图像编码列表 (局部_图像编码信息))
.计次循环首 (局部_数量, i)
    .如果真 (等于 (参数_Mime, 局部_图像编码信息 [i], Mime类型))
        返回 (局部_图像编码信息 [i], Clsid)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)

.子程序 取图像编码CLSID自图像格式, 文本型, , GetCodecClsid
.参数 参数_图像格式, 文本型, , “图像格式_”开头常量

.局部变量 局部_图像编码信息, 图像编解码信息, , "0", 
.局部变量 局部_数量, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (局部_数量, 取图像编码列表 (局部_图像编码信息))
.计次循环首 (局部_数量, i)
    .如果真 (等于 (参数_图像格式, 局部_图像编码信息 [i], 图像格式ID))
        返回 (局部_图像编码信息 [i], Clsid)
    .如果真结束
    
.计次循环尾 ()
返回 (“”)


.子程序 GUID到文本, 文本型, , StringFromGUID2
.参数 参数_CLSID, 字节集, , 

.局部变量 局部_String, 字节集, , , 

赋值 (局部_String, 取空白字节集 (78))
StringFromGUID2 (参数_CLSID, 局部_String, 78)
返回 (GdiplusW2A (lstrcpyn_字节集 (局部_String, 局部_String, 0)))

.子程序 文本到GUDI, 字节集, , CLSIDFromString
.参数 参数_文本, 文本型, , 

.局部变量 局部_clsid, 字节集, , , 

赋值 (局部_clsid, 取空白字节集 (16))
CLSIDFromString (GdiplusA2W (参数_文本), 局部_clsid)
返回 (局部_clsid)

.子程序 制坐标F, 坐标F, , MakePointF
.参数 参数_x, 小数型, , 
.参数 参数_y, 小数型, , 

.局部变量 局部_坐标, 坐标F, , , 

赋值 (局部_坐标.x, 参数_x)
赋值 (局部_坐标.y, 参数_y)
返回 (局部_坐标)


.子程序 制矩形F, 矩形F, , MakeRectF
.参数 参数_左边, 小数型, , 
.参数 参数_顶边, 小数型, , 
.参数 参数_宽度, 小数型, 可空, 
.参数 参数_高度, 小数型, 可空, 

.局部变量 局部_矩形, 矩形F, , , 

赋值 (局部_矩形.左边, 参数_左边)
赋值 (局部_矩形.顶边, 参数_顶边)
赋值 (局部_矩形.宽度, 参数_宽度)
赋值 (局部_矩形.高度, 参数_高度)
返回 (局部_矩形)

.子程序 制坐标L, 坐标L, , MakePointL
.参数 参数_x, 整数型, , 
.参数 参数_y, 整数型, , 

.局部变量 局部_坐标, 坐标L, , , 

赋值 (局部_坐标.x, 参数_x)
赋值 (局部_坐标.y, 参数_y)
返回 (局部_坐标)


.子程序 制矩形L, 矩形L, , MakeRectL
.参数 参数_左边, 整数型, , 
.参数 参数_顶边, 整数型, , 
.参数 参数_宽度, 整数型, 可空, 
.参数 参数_高度, 整数型, 可空, 

.局部变量 局部_矩形, 矩形L, , , 

赋值 (局部_矩形.左边, 参数_左边)
赋值 (局部_矩形.顶边, 参数_顶边)
赋值 (局部_矩形.宽度, 参数_宽度)
赋值 (局部_矩形.高度, 参数_高度)
返回 (局部_矩形)

.类模块 GP箭头线帽, GP自定义线帽, , AdjustableArrowCap

.程序集变量 m_ArrowCap, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_子置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ArrowCap, 参数_指针)


.子程序 创建箭头线帽, 逻辑型, 公开, GdipCreateAdjustableArrowCap
.参数 参数_高度, 小数型, , 
.参数 参数_宽度, 小数型, , 
.参数 参数_是否填充, 逻辑型, 可空, 默认为真。

.如果真 (是否为空 (参数_是否填充))
    赋值 (参数_是否填充, 真)
.如果真结束
赋值 (全局_返回码, GdipCreateAdjustableArrowCap (参数_高度, 参数_宽度, 参数_是否填充, m_ArrowCap))
置指针 (m_ArrowCap)
返回 (等于 (全局_返回码, 0))


.子程序 置高度, 逻辑型, 公开, GdipSetAdjustableArrowCapHeight
.参数 参数_高度, 小数型, , 

赋值 (全局_返回码, GdipSetAdjustableArrowCapHeight (m_ArrowCap, 参数_高度))
返回 (等于 (全局_返回码, 0))

.子程序 取高度, 小数型, 公开, GdipGetAdjustableArrowCapHeight
.局部变量 局部_高度, 小数型, , , 

赋值 (全局_返回码, GdipGetAdjustableArrowCapHeight (m_ArrowCap, 局部_高度))
返回 (局部_高度)


.子程序 置宽度, 逻辑型, 公开, GdipSetAdjustableArrowCapWidth
.参数 参数_宽度, 小数型, , 

赋值 (全局_返回码, GdipSetAdjustableArrowCapWidth (m_ArrowCap, 参数_宽度))
返回 (等于 (全局_返回码, 0))

.子程序 取宽度, 小数型, 公开, GdipGetAdjustableArrowCapWidth
.局部变量 局部_宽度, 小数型, , , 

赋值 (全局_返回码, GdipGetAdjustableArrowCapWidth (m_ArrowCap, 局部_宽度))
返回 (局部_宽度)

.子程序 置填充状态, 逻辑型, 公开, GdipSetAdjustableArrowCapFillState
.参数 参数_是否可填充, 逻辑型, , 

赋值 (全局_返回码, GdipSetAdjustableArrowCapFillState (m_ArrowCap, 参数_是否可填充))
返回 (等于 (全局_返回码, 0))

.子程序 是否可填充, 逻辑型, 公开, GdipGetAdjustableArrowCapFillState
.局部变量 局部_是否可填充, 逻辑型, , , 

赋值 (全局_返回码, GdipGetAdjustableArrowCapFillState (m_ArrowCap, 局部_是否可填充))
返回 (局部_是否可填充)

.子程序 置中心点, 逻辑型, 公开, GdipSetAdjustableArrowCapMiddleInset
.参数 参数_偏移, 小数型, , 

赋值 (全局_返回码, GdipSetAdjustableArrowCapMiddleInset (m_ArrowCap, 参数_偏移))
返回 (等于 (全局_返回码, 0))


.子程序 取中心点, 小数型, 公开, GdipGetAdjustableArrowCapMiddleInset
.局部变量 局部_偏移, 小数型, , , 

赋值 (全局_返回码, GdipGetAdjustableArrowCapMiddleInset (m_ArrowCap, 局部_偏移))
返回 (局部_偏移)

.类模块 GP路径迭代器, Gdiplus基类, , PathIterator

.程序集变量 m_Iter, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Iter, 参数_指针)

.子程序 创建, 逻辑型, 公开, GdipCreatePathIter
.参数 参数_路径, GP路径, , 

赋值 (全局_返回码, GdipCreatePathIter (m_Iter, 参数_路径.取指针 ()))
置指针 (m_Iter)
返回 (等于 (全局_返回码, 0))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 销毁, 逻辑型, 公开, GdipDeletePathIter
.如果真 (等于 (m_Iter, 0))
    返回 (假)
.如果真结束
赋值 (全局_返回码, GdipDeletePathIter (m_Iter))
返回 (等于 (全局_返回码, 0))

.子程序 下一子路径, 整数型, 公开, GdipPathIterNextSubpath。返回下一个子路径的数据坐标数，如果没有下一个子路径，返回0。
.参数 参数_开始索引, 整数型, 参考 可空, 返回开始索引
.参数 参数_结束索引, 整数型, 参考 可空, 返回结束索引
.参数 参数_是否关闭, 逻辑型, 参考 可空, 返回是否子路径已经关闭。

.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterNextSubpath (m_Iter, 局部_总数, 参数_开始索引, 参数_结束索引, 参数_是否关闭))
返回 (局部_总数)


.子程序 下一子路径自路径, 整数型, 公开, GdipPathIterNextSubpath。根据指定的路径返回下一个子路径的数据坐标数，如果没有下一个子路径，返回0。
.参数 参数_路径, GP路径, , 
.参数 参数_是否关闭, 逻辑型, 参考 可空, 返回是否子路径已经关闭。

.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterNextSubpathPath (m_Iter, 局部_总数, 参数_路径.取指针 (), 参数_是否关闭))
返回 (局部_总数)

.子程序 下一点类型, 整数型, 公开, GdipPathIterNextPathType。返回下一个路径的数据点类型数，如果没有点类型，返回0。
.参数 参数_点类型, 字节型, 参考 可空, 返回“路径点类型_”开头常量组合。
.参数 参数_开始索引, 整数型, 参考 可空, 返回开始索引
.参数 参数_结束索引, 整数型, 参考 可空, 返回结束索引

.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterNextPathType (m_Iter, 局部_总数, 参数_点类型, 参数_开始索引, 参数_结束索引))
返回 (局部_总数)


.子程序 下一标记, 整数型, 公开, GdipPathIterNextMarker。返回下一个路径标记的数据坐标数，如果没有下一个标记，返回0。
.参数 参数_开始索引, 整数型, 参考 可空, 返回开始索引
.参数 参数_结束索引, 整数型, 参考 可空, 返回结束索引

.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterNextMarker (m_Iter, 局部_总数, 参数_开始索引, 参数_结束索引))
返回 (局部_总数)


.子程序 下一标记自路径, 整数型, 公开, GdipPathIterNextMarker。返回下一个路径标记的数据坐标数，如果没有下一个标记，返回0。
.参数 参数_路径, GP路径, , 

.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterNextMarkerPath (m_Iter, 局部_总数, 参数_路径.取指针 ()))
返回 (局部_总数)

.子程序 取总数, 整数型, 公开, GdipPathIterGetCount。返回路径的数据坐标数
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterGetCount (m_Iter, 局部_总数))
返回 (局部_总数)


.子程序 取子路径总数, 整数型, 公开, GdipPathIterGetSubpathCount。返回子路径数。
.局部变量 局部_总数, 整数型, , , 

赋值 (全局_返回码, GdipPathIterGetSubpathCount (m_Iter, 局部_总数))
返回 (局部_总数)


.子程序 是否有曲线, 逻辑型, 公开, GdipPathIterHasCurve。如果路径中至少有一个曲线，返回真，否则返回假。
.局部变量 局部_是否有曲线, 逻辑型, , , 

赋值 (全局_返回码, GdipPathIterHasCurve (m_Iter, 局部_是否有曲线))
返回 (局部_是否有曲线)


.子程序 重置, 逻辑型, 公开, GdipPathIterRewind。将迭代器返回到起点。
赋值 (全局_返回码, GdipPathIterRewind (m_Iter))
返回 (等于 (全局_返回码, 0))

.子程序 枚举, 整数型, 公开, GdipPathIterEnumerate
.参数 参数_坐标组, 坐标F, 参考 数组, 
.参数 参数_类型组, 字节型, 参考 数组, 
.参数 参数_总数, 整数型, 可空, 默认为：对象.取总数() 的返回值

.局部变量 局部_总数, 整数型, , , 

.如果真 (是否为空 (参数_总数))
    赋值 (全局_返回码, GdipPathIterGetCount (m_Iter, 参数_总数))
    .如果真 (不等于 (全局_返回码, 0))
        返回 (0)
    .如果真结束
    
.如果真结束
重定义数组 (参数_坐标组, 假, 参数_总数)
重定义数组 (参数_类型组, 假, 参数_总数)
赋值 (全局_返回码, GdipPathIterEnumerate (m_Iter, 局部_总数, 参数_坐标组, 参数_类型组, 参数_总数))
返回 (局部_总数)


.子程序 复制数据, 整数型, 公开, GdipPathIterGetCount
.参数 参数_开始索引, 整数型, , 
.参数 参数_结束索引, 整数型, , 
.参数 参数_坐标组, 坐标F, 参考 数组, 
.参数 参数_类型组, 字节型, 参考 数组, 

.局部变量 局部_总数, 整数型, , , 
.局部变量 局部_数量, 整数型, , , 

赋值 (全局_返回码, GdipPathIterGetCount (m_Iter, 局部_数量))
.如果真 (不等于 (全局_返回码, 0))
    返回 (0)
.如果真结束
重定义数组 (参数_坐标组, 假, 局部_数量)
重定义数组 (参数_类型组, 假, 局部_数量)
赋值 (全局_返回码, GdipPathIterCopyData (m_Iter, 局部_总数, 参数_坐标组, 参数_类型组, 参数_开始索引, 参数_结束索引))
返回 (局部_总数)


.类模块 GP效果类, , , Effect

.程序集变量 m_Effect, 整数型, , , 
.程序集变量 m_auxDataSize, 整数型, , , 
.程序集变量 m_auxData, 整数型, , , 
.程序集变量 m_useAuxData, 逻辑型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
赋值 (m_auxData, 0)
赋值 (m_auxDataSize, 0)
赋值 (m_useAuxData, 假)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
销毁 ()

.子程序 置指针, 空白型, 公开, 
.参数 参数_指针, 整数型, , 

赋值 (m_Effect, 参数_指针)
方法_置指针 (m_Effect)

.子程序 取指针, 整数型, 公开, 
返回 (m_Effect)

.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 



.子程序 销毁, 逻辑型, 公开, 
.如果真 (等于 (m_Effect, 0))
    返回 (假)
.如果真结束
GdipFree (m_auxData)
赋值 (m_auxData, 0)
赋值 (m_auxDataSize, 0)
赋值 (m_useAuxData, 假)
赋值 (全局_返回码, GdipDeleteEffect (m_Effect))
置指针 (0)
返回 (等于 (全局_返回码, 0))

.子程序 取辅助数据大小, 整数型, 公开, 
.参数 auxDataSize, 整数型, 可空, 内部使用，不要设置此参数。

.如果真 (等于 (是否为空 (auxDataSize), 假))
    赋值 (m_auxDataSize, auxDataSize)
.如果真结束
返回 (m_auxDataSize)


.子程序 取辅助数据, 整数型, 公开, 
.参数 auxData, 整数型, 可空, 内部使用，不要设置此参数。

.如果真 (等于 (是否为空 (auxData), 假))
    赋值 (m_auxData, auxData)
.如果真结束
返回 (m_auxData)


.子程序 使用辅助数据, 逻辑型, 公开, 
.参数 参数_使用辅助数据, 逻辑型, 可空, 

.如果真 (等于 (是否为空 (参数_使用辅助数据), 假))
    赋值 (m_useAuxData, 参数_使用辅助数据)
.如果真结束
返回 (m_useAuxData)

.子程序 取参数大小, 整数型, 公开, 
.局部变量 局部_大小, 整数型, , , 

赋值 (全局_返回码, GdipGetEffectParameterSize (m_Effect, 局部_大小))
返回 (局部_大小)


.类模块 GP模糊类, GP效果类, , Blur 基类：GP效果类

.程序集变量 m_Blur, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Blur, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateBlur
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#BlurEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_Blur))
置指针 (m_Blur)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_模糊参数, 模糊参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_Blur (m_Blur, 参数_模糊参数, 8))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_模糊参数, 模糊参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 8)
赋值 (全局_返回码, GdipGetEffectParameters_Blur (m_Blur, size, 参数_模糊参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP锐化类, GP效果类, , Sharpen 基类：GP效果类

.程序集变量 m_Sharpen, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Sharpen, 参数_指针)


.子程序 创建, 逻辑型, 公开, CreateSharpen
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#SharpenEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_Sharpen))
置指针 (m_Sharpen)
返回 (等于 (全局_返回码, 0))

.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_锐化参数, 锐化参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_Sharpen (m_Sharpen, 参数_锐化参数, 8))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_锐化参数, 锐化参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 8)
赋值 (全局_返回码, GdipGetEffectParameters_Sharpen (m_Sharpen, size, 参数_锐化参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP色调类, GP效果类, , Tint 基类：GP效果类

.程序集变量 m_Tint, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Tint, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateTint
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#TintEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_Tint))
置指针 (m_Tint)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_色调参数, 色调参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_Tint (m_Tint, 参数_色调参数, 8))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_色调参数, 色调参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 8)
赋值 (全局_返回码, GdipGetEffectParameters_Tint (m_Tint, size, 参数_色调参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP红眼修正类, GP效果类, , RedEyeCorrection 基类：GP效果类

.程序集变量 m_RedEyeCorrection, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_RedEyeCorrection, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateRedEyeCorrection
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#RedEyeCorrectionEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_RedEyeCorrection))
置指针 (m_RedEyeCorrection)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_红眼修正参数, 红眼修正参数, , 

.局部变量 size, 整数型, , , 
.局部变量 addr, 整数型, , , 
.局部变量 recp, RedEyeCorrectionParams, , , 

赋值 (size, 相加 (8, 相乘 (16, 参数_红眼修正参数.区域数)))
赋值 (recp.numberOfAreas, 参数_红眼修正参数.区域数)
赋值 (recp.areas, GdipAlloc (相乘 (16, 参数_红眼修正参数.区域数)))
RtlMoveMemory_矩形L2int (recp.areas, 参数_红眼修正参数.区域, 相减 (size, 8))
赋值 (全局_返回码, GdipSetEffectParameters_RedEyeCorrectionParams (m_RedEyeCorrection, recp, size))
GdipFree (recp.areas)
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_红眼修正参数, 红眼修正参数, , 

.局部变量 recp, RedEyeCorrectionParams, , , 
.局部变量 size, 整数型, , , 

赋值 (size, 取参数大小 ())
赋值 (全局_返回码, GdipGetEffectParameters_RedEyeCorrectionParams (m_RedEyeCorrection, size, recp))
赋值 (参数_红眼修正参数.区域数, recp.numberOfAreas)
重定义数组 (参数_红眼修正参数.区域, 假, 参数_红眼修正参数.区域数)
RtlMoveMemory_int2矩形L (参数_红眼修正参数.区域, recp.areas, 相减 (size, 8))
返回 (等于 (全局_返回码, 0))


.类模块 GP颜色矩阵效果类, GP效果类, , ColorMatrixEffect 基类：GP效果类

.程序集变量 m_ColorMatrixEffect, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ColorMatrixEffect, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateColorMatrixEffect
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#ColorMatrixEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_ColorMatrixEffect))
置指针 (m_ColorMatrixEffect)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_颜色矩阵, 小数型, 数组, 应该是一个 5x5 的小数型数组

.局部变量 size, 整数型, , , 

赋值 (size, 相乘 (4, 25))
赋值 (全局_返回码, GdipSetEffectParameters_ColorMatrixEffect (m_ColorMatrixEffect, 参数_颜色矩阵, size))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_颜色矩阵, 小数型, 参考 数组, 只能提供变量，装载数据

.局部变量 size, 整数型, , , 

赋值 (size, 相乘 (4, 25))
重定义数组 (参数_颜色矩阵, 假, 25)
赋值 (全局_返回码, GdipGetEffectParameters_ColorMatrixEffect (m_ColorMatrixEffect, size, 参数_颜色矩阵))
返回 (等于 (全局_返回码, 0))

.类模块 GP颜色查找表类, GP效果类, , ColorLUT 基类：GP效果类

.程序集变量 m_ColorLUT, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ColorLUT, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateColorLUT
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#ColorLUTEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_ColorLUT))
置指针 (m_ColorLUT)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_颜色查找表参数, 颜色查找表参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_ColorLUT (m_ColorLUT, 参数_颜色查找表参数, 相乘 (256, 4)))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_颜色查找表参数, 颜色查找表参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 相乘 (256, 4))
赋值 (全局_返回码, GdipGetEffectParameters_ColorLUT (m_ColorLUT, size, 参数_颜色查找表参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP亮度对比度类, GP效果类, , BrightnessContrast 基类：GP效果类

.程序集变量 m_BrightnessContrast, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_BrightnessContrast, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateBrightnessContrast
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#BrightnessContrastEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_BrightnessContrast))
置指针 (m_BrightnessContrast)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_亮度对比度参数, 亮度对比度参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_BrightnessContrast (m_BrightnessContrast, 参数_亮度对比度参数, 8))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_亮度对比度参数, 亮度对比度参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 8)
赋值 (全局_返回码, GdipGetEffectParameters_BrightnessContrast (m_BrightnessContrast, size, 参数_亮度对比度参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP色相饱和亮度类, GP效果类, , HueSaturationLightness 基类：GP效果类

.程序集变量 m_HueSaturationLightness, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_HueSaturationLightness, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateHueSaturationLightness
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#HueSaturationLightnessEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_HueSaturationLightness))
置指针 (m_HueSaturationLightness)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_色相饱和亮度参数, 色相饱和亮度参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_HueSaturationLightness (m_HueSaturationLightness, 参数_色相饱和亮度参数, 12))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_色相饱和亮度参数, 色相饱和亮度参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 12)
赋值 (全局_返回码, GdipGetEffectParameters_HueSaturationLightness (m_HueSaturationLightness, size, 参数_色相饱和亮度参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP色彩平衡类, GP效果类, , ColorBalance 基类：GP效果类

.程序集变量 m_ColorBalance, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ColorBalance, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateColorBalance
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#ColorBalanceEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_ColorBalance))
置指针 (m_ColorBalance)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_色彩平衡参数, 色彩平衡参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_ColorBalance (m_ColorBalance, 参数_色彩平衡参数, 12))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_色彩平衡参数, 色彩平衡参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 12)
赋值 (全局_返回码, GdipGetEffectParameters_ColorBalance (m_ColorBalance, size, 参数_色彩平衡参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP色阶类, GP效果类, , Levels 基类：GP效果类

.程序集变量 m_Levels, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_Levels, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateLevels
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#LevelsEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_Levels))
置指针 (m_Levels)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_色阶参数, 色阶参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_Levens (m_Levels, 参数_色阶参数, 12))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_色阶参数, 色阶参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 12)
赋值 (全局_返回码, GdipGetEffectParameters_Levens (m_Levels, size, 参数_色阶参数))
返回 (等于 (全局_返回码, 0))

.类模块 GP颜色曲线类, GP效果类, , ColorCurve 基类：GP效果类

.程序集变量 m_ColorCurve, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 方法_置指针, 空白型, , 虚函数
.参数 参数_指针, 整数型, , 

赋值 (m_ColorCurve, 参数_指针)

.子程序 创建, 逻辑型, 公开, CreateColorCurve
.局部变量 guid, 字节集, , , 

赋值 (guid, 文本到GUDI (#ColorCurveEffectGuid))
赋值 (全局_返回码, GdipCreateEffect (取字节集数据 (guid, #整数型, 1), 取字节集数据 (guid, #整数型, 5), 取字节集数据 (guid, #整数型, 9), 取字节集数据 (guid, #整数型, 13), m_ColorCurve))
置指针 (m_ColorCurve)
返回 (等于 (全局_返回码, 0))


.子程序 置参数, 逻辑型, 公开, SetParameters
.参数 参数_颜色曲线参数, 颜色曲线参数, , 

赋值 (全局_返回码, GdipSetEffectParameters_ColorCurve (m_ColorCurve, 参数_颜色曲线参数, 12))
返回 (等于 (全局_返回码, 0))


.子程序 取参数, 逻辑型, 公开, GetParameters
.参数 参数_颜色曲线参数, 颜色曲线参数, 参考, 

.局部变量 size, 整数型, , , 

赋值 (size, 12)
赋值 (全局_返回码, GdipGetEffectParameters_ColorCurve (m_ColorCurve, size, 参数_颜色曲线参数))
返回 (等于 (全局_返回码, 0))


 ' 不属于任何一个程序集、类模块的函数：
