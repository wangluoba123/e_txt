 ' 文件类型：Windows模块源码

 ' 程序名称：文本折行
 ' 程序描述：简单的易模块,用于文本换行.
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 742
    高度 = 425
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 真
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “文本折行例程”
    帮助文件名 = “”



.图片 文本内容, " ' 已保存到：D:\易语言学习\Data\模块_文本折行.e\文本内容", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库





.窗口程序集 窗口程序集1, , , 

.程序集变量 行数, 整数型, , , 
.程序集变量 所有字, 文本型, , , 
.子程序 _打印按钮_被单击, 空白型, , 
.如果真 (等于 (.开始打印 (), 真))
    .写文本行 (.) ' “写文本行”命令会自动换行及换页
    结束打印 ()
.如果真结束


.子程序 _强制转换钮_被单击, 空白型, , 
赋值 (., 文本折行 (到文本 (.), 到数值 (.), 真, ))
.如果真 (并且 (等于 (., “”), 不等于 (., “”)))
    信息框 (“设置每行字数分配不合理”, 0, )
    返回 ()
.如果真结束
字数统计 ()

.子程序 _转换按钮_被单击, 空白型, , 
赋值 (., 文本折行 (到文本 (.), 到数值 (.), ))
.如果真 (并且 (等于 (., “”), 不等于 (., “”)))
    信息框 (“设置每行字数分配不合理”, 0, )
    返回 ()
.如果真结束
字数统计 ()

.子程序 字数统计, 空白型, , 
赋值 (., 到文本 (相除 (取文本长度 (.), 2)))
赋值 (., 到文本 (相除 (取文本长度 (.), 2)))

.子程序 _启动子程序, 整数型, , 

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。
载入 (_启动窗口, , 真)

.子程序 文本折行, 文本型, 公开, 把一段长文本按你指定的字数分行
.参数 要处理的文本, 文本型, , 
.参数 每行字数, 整数型, 可空, 半角字数，如果为空，将不进行分行操作，直接返回文本内容。
.参数 是否强行分行, 逻辑型, 可空, 为真则强行按设定长度分行。为假则保留连续半角数字或字母为一行。默认为假。
.参数 是否全角, 逻辑型, 可空, 是否将半角转换为全角,如果为空即不转换
.参数 首空字节数, 整数型, 可空, 在每行前面加入空格,如果为空,为0,即不加空格

.局部变量 操作文本, 文本型, , , 
.局部变量 开始位置, 整数型, , , 
.局部变量 读取长度, 整数型, , , 
.局部变量 开始计算半角, 逻辑型, , , 
.局部变量 半角位置, 整数型, , , 
.局部变量 结果文本, 文本型, , , 


.如果真 (是否为空 (每行字数))
    返回 (要处理的文本)
.如果真结束
.如果真 (是否为空 (是否强行分行))
    赋值 (是否强行分行, 假)
.如果真结束

.如果真 (等于 (是否全角, 真))
    赋值 (要处理的文本, 子文本替换 (要处理的文本, “...”, “…”, 1, , 真))
    赋值 (要处理的文本, 子文本替换 (要处理的文本, “->”, “→”, 1, , 真))
    赋值 (要处理的文本, 子文本替换 (要处理的文本, “<-”, “←”, 1, , 真))
    赋值 (要处理的文本, 子文本替换 (要处理的文本, “--”, “―”, 1, , 真))
    赋值 (要处理的文本, 到全角 (要处理的文本))
.如果真结束

.如果真 (大于或等于 (首空字节数, 1))
    赋值 (要处理的文本, 相加 (取空白文本 (首空字节数), 要处理的文本))
    赋值 (要处理的文本, 子文本替换 (要处理的文本, #换行符, 相加 (#换行符, 取空白文本 (首空字节数)), 1, , 真))
.如果真结束

赋值 (操作文本, 要处理的文本)
.判断循环首 (大于 (取文本长度 (操作文本), 每行字数))
    .判断循环首 (小于 (读取长度, 每行字数))
        .如果 (或者 (大于或等于 (取代码 (操作文本, 相加 (读取长度, 1)), 127), 小于 (取代码 (操作文本, 相加 (读取长度, 1)), 0)))
            赋值 (半角位置, 0)
            赋值 (开始计算半角, 假)
            .如果真 (等于 (读取长度, 相减 (每行字数, 1)))
                跳出循环 ()
            .如果真结束
            赋值 (读取长度, 相加 (读取长度, 2))
        .否则
            .判断开始 (等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 1), “ ”))
                赋值 (读取长度, 相加 (读取长度, 1))
                赋值 (半角位置, 0)
                赋值 (开始计算半角, 假)
            .判断 (等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), #换行符))
                赋值 (读取长度, 相加 (读取长度, 2))
                跳出循环 ()
            .默认
                .如果真 (等于 (开始计算半角, 假))
                    赋值 (半角位置, 读取长度)
                    赋值 (开始计算半角, 真)
                .如果真结束
                赋值 (读取长度, 相加 (读取长度, 1))
            .判断结束
            
        .如果结束
        
    .判断循环尾 ()
    .如果真 (大于或等于 (读取长度, 每行字数))
        .如果 (等于 (是否强行分行, 假))
            赋值 (读取长度, 选择 (等于 (半角位置, 0), 每行字数, 选择 (或者 (大于或等于 (取代码 (操作文本, 相加 (每行字数, 1)), 127), 小于 (取代码 (操作文本, 相加 (每行字数, 1)), 0)), 每行字数, 半角位置)))
            赋值 (开始计算半角, 假)
            赋值 (半角位置, 0)
        .否则
            赋值 (读取长度, 每行字数)
        .如果结束
        
    .如果真结束
    .如果真 (等于 (是否强行分行, 假))
        .如果 (或者 (等于 (取文本中间 (操作文本, 相减 (读取长度, 1), 2), “《”), 等于 (取文本中间 (操作文本, 相减 (读取长度, 1), 2), “（”), 等于 (取文本中间 (操作文本, 相减 (读取长度, 1), 2), #左引号), 等于 (取文本中间 (操作文本, 相减 (读取长度, 1), 2), “〈”), 等于 (取文本中间 (操作文本, 相减 (读取长度, 11), 2), “‘”)))
            赋值 (读取长度, 相减 (读取长度, 2))
        .否则
            .如果真 (或者 (等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “》”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “）”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), #右引号), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “〉”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “，”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “。”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “？”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “：”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “’”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “；”), 等于 (取文本中间 (操作文本, 相加 (读取长度, 1), 2), “、”)))
                .如果 (或者 (大于或等于 (取代码 (操作文本, 读取长度), 127), 小于 (取代码 (操作文本, 读取长度), 0)))
                    赋值 (读取长度, 相减 (读取长度, 2))
                .否则
                    赋值 (读取长度, 相减 (读取长度, 1))
                .如果结束
                
            .如果真结束
            
        .如果结束
        
    .如果真结束
    .如果 (等于 (取文本中间 (操作文本, 相减 (读取长度, 1), 2), #换行符))
        赋值 (结果文本, 相加 (结果文本, 取文本左边 (操作文本, 读取长度)))
    .否则
        赋值 (结果文本, 相加 (结果文本, 取文本左边 (操作文本, 读取长度), #换行符))
    .如果结束
    .如果真 (等于 (读取长度, 0))
        返回 (“”)
    .如果真结束
    赋值 (操作文本, 取文本右边 (操作文本, 相减 (取文本长度 (操作文本), 读取长度)))
    赋值 (读取长度, 0)
.判断循环尾 ()
赋值 (结果文本, 相加 (结果文本, 操作文本))
返回 (结果文本)



 ' 不属于任何一个程序集、类模块的函数：
