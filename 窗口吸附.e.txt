 ' 文件类型：Windows模块源码

 ' 程序名称：窗口吸附模块
 ' 程序描述：完美的窗口吸附模块
@备注:
本来想做成类的
无语类里面用取址符号“&”怎么搞也搞不成
注意！！！
本模块是为标准窗口设计的
若用了其他控件替代标题栏，拖动时请用“发送消息(161,2,0)”
若主窗口的标题用控件来替代，必须要在其“鼠标左键放开”事件中调用“主窗口左键放开事件_”

塔那修斯 于2011.1.24
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0



.常量 WM_MOVING, "534", , 
.常量 WM_MOVE, "3", , 
.常量 WM_SIZE, "5", , 
.常量 WM_SIZING, "532", , 
.常量 WM_DESTROY, "2", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 尺寸限制, , 
    .成员 最小宽度, 整数型, , , 
    .成员 最小高度, 整数型, , , 
    .成员 最大宽度, 整数型, , , 
    .成员 最大高度, 整数型, , , 

数据类型 矩形_, , RECT
    .成员 左边, 整数型, , , left
    .成员 顶边, 整数型, , , top
    .成员 右边, 整数型, , , right
    .成员 底边, 整数型, , , bottom

数据类型 横向吸附线, , 
    .成员 纵坐标, 整数型, , , 线的纵坐标
    .成员 横坐标1, 整数型, , , 左横坐标
    .成员 横坐标2, 整数型, , , 右横坐标

数据类型 纵向吸附线, , 
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标1, 整数型, , , 
    .成员 纵坐标2, 整数型, , , 

数据类型 吸附点, , 包含了与目标窗口的距离，属于即时变量
    .成员 横坐标, 整数型, , , 
    .成员 纵坐标, 整数型, , , 
    .成员 距离, 整数型, , , X^2+Y^2
    .成员 距离X, 整数型, , , 
    .成员 距离Y, 整数型, , , 

数据类型 横向有距吸附线, , 包含了与目标窗口的距离，属于即时变量
    .成员 吸附线, 横向吸附线, , , 
    .成员 原纵向位置, 整数型, , , 右边、底边吸附时，用于计算的纵位置需要减去一个窗口高度，这个是减去以前的（原来的），用于吸附点的判定
    .成员 距离, 整数型, , , 
    .成员 靠近的窗口号, 整数型, , , 用于整体拖动时，判断是哪个窗口吸上了这条线，用于删除线时的判断
    .成员 匿名成员111, 空白型, , , 

数据类型 纵向有距吸附线, , 包含了与目标窗口的距离，属于即时变量
    .成员 吸附线, 纵向吸附线, , , 
    .成员 原横向位置, 整数型, , , 同上
    .成员 距离, 整数型, , , 
    .成员 靠近的窗口号, 整数型, , , 
    .成员 匿名成员116, 空白型, , , 

数据类型 整体拖动, , 
    .成员 启用, 逻辑型, , , 
    .成员 横向偏移, 整数型, , , 与主窗口之间的横向偏移
    .成员 纵向偏移, 整数型, , , 与主窗口之间的纵向偏移


.DLL命令 取窗口位置, 空白型, "user32.dll", "GetWindowRect", , 
    .参数 窗口句柄, 整数型, , 
    .参数 区域, 矩形_, 传址, 接受数据

.DLL命令 FindWindow, 整数型, "user32.dll", "FindWindowA", , 
    .参数 类名, 文本型, , 
    .参数 标题, 文本型, , 

.DLL命令 SetWindowLong, 整数型, "User32.dll", "SetWindowLongA", , 
    .参数 hwnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 CallWindowProc, 整数型, "User32.dll", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 hwnd, 整数型, , 
    .参数 msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 复制内存_矩形到指针, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, 整数型, , 
    .参数 源地址, 矩形_, , 
    .参数 长度, 整数型, , 

.DLL命令 复制内存_指针到矩形, 空白型, "", "RtlMoveMemory", , 
    .参数 目标地址, 矩形_, , 
    .参数 源地址, 整数型, , 
    .参数 长度, 整数型, , 

.DLL命令 移动窗口_, 整数型, "user32.dll", "MoveWindow", , 
    .参数 窗口句柄, 整数型, , hwnd，欲移动窗口的句柄
    .参数 左侧位置, 整数型, , x，窗口新的左侧位置
    .参数 顶部位置, 整数型, , y，窗口新的顶部位置
    .参数 新宽度, 整数型, , nWidth，窗口的新宽度
    .参数 高宽度, 整数型, , nHeight，窗口的高宽度
    .参数 是否重画, 整数型, , bRepaint，如窗口此时应重画，则设为TRUE（非零）

.DLL命令 俘获鼠标, 空白型, "", "SetCapture", , 
    .参数 窗口句柄, 整数型, , 

.DLL命令 释放鼠标, 空白型, "", "ReleaseCapture", , 

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
设置临界值 (20)
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

.程序集 程序集2, , , 

.程序集变量 临界值, 整数型, , , 
.程序集变量 窗口句柄, 整数型, , "0", 
.程序集变量 尺寸限制, 尺寸限制, , "0", 
.程序集变量 开始了, 逻辑型, , , 
.程序集变量 旧过程号, 整数型, , "0", 
.程序集变量 有主窗口, 逻辑型, , , 
.程序集变量 检测屏幕边缘, 逻辑型, , , 
.程序集变量 匿名程序集变量_584, 空白型, , , 
.程序集变量 横向吸附线, 横向吸附线, , "0", 
.程序集变量 纵向吸附线, 纵向吸附线, , "0", 
.程序集变量 窗口吸附线有效, 逻辑型, , "0", 
.程序集变量 鼠标偏差X, 整数型, , , 拖动时，鼠标水平位置 减去 窗口左边
.程序集变量 鼠标偏差Y, 整数型, , , 同上
.程序集变量 左边固定, 逻辑型, , , 拉伸时 左边是不动的
.程序集变量 顶边固定, 逻辑型, , , 
.程序集变量 右边固定, 逻辑型, , , 
.程序集变量 底边固定, 逻辑型, , , 
.程序集变量 正在整体拖动, 逻辑型, , , 在整体拖动时，作标记，防止整体移动时，窗口边缘“带”到别的窗口，然后直接拖走了
.程序集变量 正在移动窗口, 逻辑型, , , 
.程序集变量 吸附的窗口号, 文本型, , "0", 按位分割，比如23表示与2、3号窗口吸附
.程序集变量 需要整体拖动的窗口, 整体拖动, , "0", 
.程序集变量 匿名程序集变量_598, 空白型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 设置临界值, 空白型, , 设定当窗口靠近多少像素时吸附。若不设置，初始值为20
.参数 新值, 整数型, , 单位为像素

赋值 (临界值, 新值)

.子程序 加入窗口, 逻辑型, 公开, 注意：开始吸附后，不能加入新窗口，最多9个窗口
.参数 该窗口的句柄, 整数型, , 
.参数 最小宽度, 整数型, 可空, 在拉伸过程中同时限制住尺寸，若不需要，可留空或设为-1
.参数 最小高度, 整数型, 可空, 
.参数 最大宽度, 整数型, 可空, 
.参数 最大高度, 整数型, 可空, 

.局部变量 临时_尺寸限制, 尺寸限制, , , 

.如果真 (或者 (开始了, 大于或等于 (取数组成员数 (窗口句柄), 9)))
    返回 (假)
.如果真结束
加入成员 (窗口句柄, 该窗口的句柄)
.如果真 (是否为空 (最小宽度))
    赋值 (最小宽度, -1)
.如果真结束
.如果真 (是否为空 (最小高度))
    赋值 (最小高度, -1)
.如果真结束
.如果真 (是否为空 (最大宽度))
    赋值 (最大宽度, -1)
.如果真结束
.如果真 (是否为空 (最大高度))
    赋值 (最大高度, -1)
.如果真结束
赋值 (临时_尺寸限制.最小宽度, 最小宽度)
赋值 (临时_尺寸限制.最小高度, 最小高度)
赋值 (临时_尺寸限制.最大宽度, 最大宽度)
赋值 (临时_尺寸限制.最大高度, 最大高度)
加入成员 (尺寸限制, 临时_尺寸限制)
 ' 本源码来自易语言资源网(www.5A5X.com)
返回 (真)

.子程序 删除窗口, 逻辑型, , 注意：开始吸附后，不能删除窗口
.参数 窗口号, 整数型, 可空, 第一个加入的为1，以此类推，若给0或留空，则删除全部

.如果真 (是否为空 (窗口号))
    赋值 (窗口号, 0)
.如果真结束
.如果真 (或者 (开始了, 等于 (取数组成员数 (窗口句柄), 0), 小于 (窗口号, 0), 大于 (窗口号, 取数组成员数 (窗口句柄))))
    返回 (假)
.如果真结束
.如果 (等于 (窗口号, 0))
    重定义数组 (窗口句柄, 假, 0)
    重定义数组 (尺寸限制, 假, 0)
.否则
    删除成员 (窗口句柄, 窗口号, )
    删除成员 (尺寸限制, 窗口号, )
.如果结束
返回 (真)

.子程序 取窗口数量, 整数型, , 
返回 (取数组成员数 (窗口句柄))

.子程序 取指定窗口句柄, 整数型, 公开, 
.参数 窗口号, 整数型, , 

.如果真 (或者 (小于 (窗口号, 1), 大于 (窗口号, 取数组成员数 (窗口句柄))))
    返回 (-1)
.如果真结束
返回 (窗口句柄 [窗口号])

.子程序 开始吸附, 逻辑型, 公开, 注意：开始吸附后，窗口不能被销毁，也不能加入新窗口
.参数 是否有主窗口, 逻辑型, 可空, 默认真。主窗口为第一个加入的窗口。当其他窗口吸在主窗口上时，会随着主窗口一起移动。若此参数为假，则认为所有窗口都是独立的。
.参数 是否检测屏幕边缘, 逻辑型, 可空, 默认真。此参数决定是否吸住屏幕边缘

.局部变量 X, 整数型, , , 

.如果真 (是否为空 (是否有主窗口))
    赋值 (是否有主窗口, 真)
.如果真结束
.如果真 (是否为空 (是否检测屏幕边缘))
    赋值 (是否检测屏幕边缘, 真)
.如果真结束
.如果真 (或者 (等于 (取数组成员数 (窗口句柄), 0), 开始了))
    返回 (假)
.如果真结束
赋值 (有主窗口, 是否有主窗口)
赋值 (检测屏幕边缘, 是否检测屏幕边缘)
重定义数组 (吸附的窗口号, 假, 取数组成员数 (窗口句柄))
重定义数组 (需要整体拖动的窗口, 假, 取数组成员数 (窗口句柄))
重定义数组 (横向吸附线, 假, 相加 (相乘 (取数组成员数 (窗口句柄), 2), 选择 (是否检测屏幕边缘, 2, 0)))
重定义数组 (纵向吸附线, 假, 相加 (相乘 (取数组成员数 (窗口句柄), 2), 选择 (是否检测屏幕边缘, 2, 0)))
 ' 本源码来自易语言资源网(www.5A5X.com)
重新读取吸附线 (0) ' 读出所有窗口的吸附线
.如果真 (是否检测屏幕边缘)
    重新读取吸附线_屏幕边缘 ()
.如果真结束

重定义数组 (旧过程号, 假, 0)
重定义数组 (窗口吸附线有效, 假, 0)
.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    加入成员 (旧过程号, SetWindowLong (窗口句柄 [X], -4, 到数值 (&消息处理子程序))) ' 截获窗口消息
    加入成员 (窗口吸附线有效, 真)
.变量循环尾 ()
赋值 (开始了, 真)
返回 (真)

.子程序 重新读取吸附线, 空白型, , 
.参数 窗口号, 整数型, , 1～(窗口数量)，若给0，则重新读取所有

.局部变量 X, 整数型, , , 
.局部变量 窗口位置, 矩形_, , , 

.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    .如果真 (或者 (等于 (窗口号, 0), 等于 (窗口号, X)))
        取窗口位置 (窗口句柄 [X], 窗口位置)
        赋值 (横向吸附线 [相减 (相乘 (X, 2), 1)].纵坐标, 窗口位置.顶边) ' 刷新顶边
        赋值 (横向吸附线 [相减 (相乘 (X, 2), 1)].横坐标1, 窗口位置.左边)
        赋值 (横向吸附线 [相减 (相乘 (X, 2), 1)].横坐标2, 窗口位置.右边)
        赋值 (横向吸附线 [相乘 (X, 2)].纵坐标, 窗口位置.底边) ' 刷新底边
        赋值 (横向吸附线 [相乘 (X, 2)].横坐标1, 窗口位置.左边)
        赋值 (横向吸附线 [相乘 (X, 2)].横坐标2, 窗口位置.右边)
        
        赋值 (纵向吸附线 [相减 (相乘 (X, 2), 1)].横坐标, 窗口位置.左边) ' 刷新左边
        赋值 (纵向吸附线 [相减 (相乘 (X, 2), 1)].纵坐标1, 窗口位置.顶边)
        赋值 (纵向吸附线 [相减 (相乘 (X, 2), 1)].纵坐标2, 窗口位置.底边)
        赋值 (纵向吸附线 [相乘 (X, 2)].横坐标, 窗口位置.右边) ' 刷新右边
        赋值 (纵向吸附线 [相乘 (X, 2)].纵坐标1, 窗口位置.顶边)
        赋值 (纵向吸附线 [相乘 (X, 2)].纵坐标2, 窗口位置.底边)
    .如果真结束
    
.变量循环尾 ()

.子程序 重新读取吸附线_屏幕边缘, 空白型, , 
.局部变量 屏幕矩形, 矩形_, , , 去掉任务栏
.局部变量 任务栏矩形, 矩形_, , , 

.如果真 (等于 (检测屏幕边缘, 假))
    返回 ()
.如果真结束
取窗口位置 (FindWindow (“Shell_TrayWnd”, “”), 任务栏矩形)
赋值 (屏幕矩形.左边, 0)
赋值 (屏幕矩形.顶边, 0)
赋值 (屏幕矩形.右边, 取屏幕宽度 ())
赋值 (屏幕矩形.底边, 取屏幕高度 ())
.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0), 小于 (任务栏矩形.右边, 任务栏矩形.底边))) ' 任务栏在左边
    赋值 (屏幕矩形.左边, 任务栏矩形.右边)
.如果真结束

.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0), 大于 (任务栏矩形.右边, 任务栏矩形.底边))) ' 任务栏在顶部
    赋值 (屏幕矩形.顶边, 任务栏矩形.底边)
.如果真结束

.如果真 (并且 (大于 (任务栏矩形.顶边, 0), 小于或等于 (任务栏矩形.左边, 0))) ' 任务栏在下面
    赋值 (屏幕矩形.底边, 任务栏矩形.顶边)
.如果真结束

.如果真 (并且 (小于或等于 (任务栏矩形.顶边, 0), 大于 (任务栏矩形.左边, 0))) ' 任务栏在右边
    赋值 (屏幕矩形.右边, 任务栏矩形.左边)
.如果真结束



赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].纵坐标, 屏幕矩形.顶边)
赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].横坐标1, 屏幕矩形.左边)
赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].横坐标2, 屏幕矩形.右边)
赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].纵坐标, 屏幕矩形.底边)
赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].横坐标1, 屏幕矩形.左边)
赋值 (横向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].横坐标2, 屏幕矩形.右边)

赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].横坐标, 屏幕矩形.左边)
赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].纵坐标1, 屏幕矩形.顶边)
赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 1)].纵坐标2, 屏幕矩形.底边)
赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].横坐标, 屏幕矩形.右边)
赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].纵坐标1, 屏幕矩形.顶边)
赋值 (纵向吸附线 [相加 (相乘 (取数组成员数 (窗口句柄), 2), 2)].纵坐标2, 屏幕矩形.底边)


.子程序 消息处理子程序, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 Msg, 整数型, , 
.参数 wParam, 整数型, , 
.参数 IParam, 整数型, , 

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    .如果真 (等于 (窗口句柄 [X], hWnd))
        窗口事件处理 (X, Msg, wParam, IParam)
        返回 (CallWindowProc (旧过程号 [X], hWnd, Msg, wParam, IParam))
    .如果真结束
    
.变量循环尾 ()
返回 (0)


.子程序 窗口事件处理, 空白型, , 
.参数 窗口号, 整数型, , 1～5
.参数 消息号, 整数型, , 
.参数 参数一, 整数型, , 
.参数 参数二, 整数型, , 需要修改指向的变量

.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 匹配的横向吸附线, 横向有距吸附线, , "0", 当前位置匹配的所有吸附线
.局部变量 匹配的纵向吸附线, 纵向有距吸附线, , "0", 
.局部变量 X, 整数型, , , 循环变量
.局部变量 Y, 整数型, , , 循环变量
.局部变量 Z, 整数型, , , 
.局部变量 窗口宽度, 整数型, , , 
.局部变量 窗口高度, 整数型, , , 
.局部变量 临时_横向吸附线, 横向有距吸附线, , , 用于计算中的处理
.局部变量 临时_纵向吸附线, 纵向有距吸附线, , , 
.局部变量 吸附点集, 吸附点, , "0", 
.局部变量 临时_吸附点, 吸附点, , , 
.局部变量 点_距离最小值, 整数型, , , 
.局部变量 点_距离最小编号, 整数型, , , 
.局部变量 横线_距离最小值, 整数型, , , 
.局部变量 横线_距离最小编号, 整数型, , , 
.局部变量 纵线_距离最小值, 整数型, , , 
.局部变量 纵线_距离最小编号, 整数型, , , 
.局部变量 要判断的横边, 整数型, , , （仅拉伸时用）0没有 1顶 2底
.局部变量 要判断的纵边, 整数型, , , 0没有 1左 2右
.局部变量 横边纵坐标, 整数型, , , 仅拉伸时用
.局部变量 纵边横坐标, 整数型, , , 
.局部变量 数组已删除数量, 整数型, , , 
.局部变量 临时_靠近的窗口号, 整数型, , , 

.如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设置为不活动
    返回 ()
.如果真结束
.判断开始 (等于 (消息号, #WM_MOVING)) ' 正在移动
    复制内存_指针到矩形 (窗口位置, 参数二, 16)
    .如果真 (或者 (等于 (窗口位置.左边, -32000), 等于 (窗口位置.顶边, -32000))) ' 最小化
        返回 ()
    .如果真结束
    赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边)) ' 算出窗口尺寸
    赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
    
    赋值 (窗口位置.左边, 相减 (取鼠标水平位置 (), 鼠标偏差X))
    赋值 (窗口位置.顶边, 相减 (取鼠标垂直位置 (), 鼠标偏差Y))
    
    赋值 (窗口位置.右边, 相加 (窗口位置.左边, 窗口宽度))
    赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 窗口高度))
    
    
    .变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
        .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
            到循环尾 ()
        .如果真结束
        .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
            .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                到循环尾 ()
            .如果真结束
            .如果真 (并且 (需要整体拖动的窗口 [整除 (相加 (X, 1), 2)].启用, 等于 (窗口号, 1), 有主窗口)) ' 正在拖动主窗口，且，这个窗口是要一起拖动的！已经与主窗口连接在一起，不能算进去
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断顶边
            .如果真 (并且 (大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                赋值 (临时_横向吸附线.吸附线, 横向吸附线 [X])
                赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标)))
                赋值 (临时_横向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的横向吸附线, 临时_横向吸附线) ' 加入数组
                
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断底边
            .如果真 (并且 (大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值))))
                赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 窗口高度)) ' 因为是底边，所以要减去一个高度
                赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标)))
                赋值 (临时_横向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (等于 (窗口号, 1), 有主窗口)) ' 正在移动主窗口，则需要判断其吸住的窗口的位置
            .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, Y)
                .如果真 (等于 (需要整体拖动的窗口 [Y], 启用, 假))
                    到循环尾 ()
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断顶边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                        
                        赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 需要整体拖动的窗口 [Y], 纵向偏移))
                        赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                        赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                        赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                        赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 临时_横向吸附线.吸附线.纵坐标)))
                        赋值 (临时_横向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                    .如果真结束
                    
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 横向吸附线 [X], 纵坐标)), 临界值)) ' 判断底边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 相减 (横向吸附线 [X], 横坐标1, 临界值)), 小于或等于 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 相加 (横向吸附线 [X], 横坐标2, 临界值)))) ' 横坐标也在范围内
                        
                        赋值 (临时_横向吸附线.吸附线.纵坐标, 相减 (横向吸附线 [X], 纵坐标, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6))) ' 因为是底边，所以要减去一个高度
                        赋值 (临时_横向吸附线.原纵向位置, 横向吸附线 [X], 纵坐标)
                        赋值 (临时_横向吸附线.吸附线.横坐标1, 横向吸附线 [X], 横坐标1)
                        赋值 (临时_横向吸附线.吸附线.横坐标2, 横向吸附线 [X], 横坐标2)
                        赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (窗口位置.顶边, 临时_横向吸附线.吸附线.纵坐标)))
                        赋值 (临时_横向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                    .如果真结束
                    
                .如果真结束
                
            .变量循环尾 ()
        .如果真结束
        
    .变量循环尾 ()
    .变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
        .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
            到循环尾 ()
        .如果真结束
        .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
            .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                到循环尾 ()
            .如果真结束
            .如果真 (并且 (需要整体拖动的窗口 [整除 (相加 (X, 1), 2)].启用, 等于 (窗口号, 1), 有主窗口)) ' 正在拖动主窗口，且，这个窗口是要一起拖动的！
                到循环尾 ()
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标)), 临界值))
            .如果真 (并且 (大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                赋值 (临时_纵向吸附线.吸附线, 纵向吸附线 [X])
                赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标)))
                赋值 (临时_纵向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (小于或等于 (取绝对值 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标)), 临界值))
            .如果真 (并且 (大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值))))
                赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 窗口宽度))
                赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标)))
                赋值 (临时_纵向吸附线.靠近的窗口号, 窗口号)
                加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (等于 (窗口号, 1), 有主窗口)) ' 正在移动主窗口，则需要判断其吸住的窗口的位置
            .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, Y)
                .如果真 (等于 (需要整体拖动的窗口 [Y], 启用, 假))
                    到循环尾 ()
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移), 纵向吸附线 [X], 横坐标)), 临界值)) ' 判断左边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                        
                        赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 需要整体拖动的窗口 [Y], 横向偏移))
                        赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                        赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 临时_纵向吸附线.吸附线.横坐标)))
                        赋值 (临时_纵向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                    .如果真结束
                    
                .如果真结束
                .如果真 (小于或等于 (取绝对值 (相减 (相加 (窗口位置.左边, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5)), 纵向吸附线 [X], 横坐标)), 临界值)) ' 判断右边
                    .如果真 (并且 (大于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移, 取窗口位置_特定值 (Y, 6)), 相减 (纵向吸附线 [X], 纵坐标1, 临界值)), 小于或等于 (相加 (窗口位置.顶边, 需要整体拖动的窗口 [Y], 纵向偏移), 相加 (纵向吸附线 [X], 纵坐标2, 临界值)))) ' 纵坐标也在范围内
                        
                        赋值 (临时_纵向吸附线.吸附线.横坐标, 相减 (纵向吸附线 [X], 横坐标, 需要整体拖动的窗口 [Y], 横向偏移, 取窗口位置_特定值 (Y, 5))) ' 因为是底边，所以要减去一个高度
                        赋值 (临时_纵向吸附线.原横向位置, 纵向吸附线 [X], 横坐标)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标1, 纵向吸附线 [X], 纵坐标1)
                        赋值 (临时_纵向吸附线.吸附线.纵坐标2, 纵向吸附线 [X], 纵坐标2)
                        赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (窗口位置.左边, 临时_纵向吸附线.吸附线.横坐标)))
                        赋值 (临时_纵向吸附线.靠近的窗口号, Y)
                        加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                    .如果真结束
                    
                .如果真结束
                
            .变量循环尾 ()
            
        .如果真结束
        
        
        
    .变量循环尾 ()
    
    
    .如果真 (并且 (不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 横纵都可以吸附
        .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
            .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, Y)
                .如果真 (并且 (大于或等于 (匹配的横向吸附线 [X], 原纵向位置, 匹配的纵向吸附线 [Y], 吸附线.纵坐标1), 小于或等于 (匹配的横向吸附线 [X], 原纵向位置, 匹配的纵向吸附线 [Y], 吸附线.纵坐标2), 大于或等于 (匹配的纵向吸附线 [Y], 原横向位置, 匹配的横向吸附线 [X], 吸附线.横坐标1), 小于或等于 (匹配的纵向吸附线 [Y], 原横向位置, 匹配的横向吸附线 [X], 吸附线.横坐标2))) ' 线必须原来是交叉的
                    赋值 (临时_吸附点.纵坐标, 匹配的横向吸附线 [X], 吸附线.纵坐标)
                    赋值 (临时_吸附点.横坐标, 匹配的纵向吸附线 [Y], 吸附线.横坐标)
                    赋值 (临时_吸附点.距离X, 取绝对值 (相减 (临时_吸附点.横坐标, 窗口位置.左边)))
                    赋值 (临时_吸附点.距离Y, 取绝对值 (相减 (临时_吸附点.纵坐标, 窗口位置.顶边)))
                    赋值 (临时_吸附点.距离, 相加 (相乘 (临时_吸附点.距离X, 临时_吸附点.距离X), 相乘 (临时_吸附点.距离Y, 临时_吸附点.距离Y)))
                    加入成员 (吸附点集, 临时_吸附点) ' 统计每一个吸附点
                    
                .如果真结束
                
            .变量循环尾 ()
        .变量循环尾 ()
        
    .如果真结束
    
    
    
     ' ========全部去掉“临界值”再算一次，因为单独的线吸附是不需要有临界值的，而吸附点在上面已经算过了=======
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
        赋值 (临时_靠近的窗口号, 匹配的横向吸附线 [相减 (X, 数组已删除数量)].靠近的窗口号)
        .如果真 (或者 (大于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标1, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.右边, 相加 (窗口位置.左边, 需要整体拖动的窗口 [临时_靠近的窗口号], 横向偏移, 取窗口位置_特定值 (临时_靠近的窗口号, 5)))), 小于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标2, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.左边, 相加 (窗口位置.左边, 需要整体拖动的窗口 [临时_靠近的窗口号], 横向偏移))))) ' 再一看，超出了！（注意，“靠近的窗口”不是本窗口，只有一种情况，那就是在整体拖动！）
            删除成员 (匹配的横向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, X)
        赋值 (临时_靠近的窗口号, 匹配的纵向吸附线 [相减 (X, 数组已删除数量)].靠近的窗口号)
        .如果真 (或者 (大于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标1, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.底边, 相加 (窗口位置.顶边, 需要整体拖动的窗口 [临时_靠近的窗口号], 纵向偏移, 取窗口位置_特定值 (临时_靠近的窗口号, 6)))), 小于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标2, 选择 (等于 (临时_靠近的窗口号, 窗口号), 窗口位置.顶边, 相加 (窗口位置.顶边, 需要整体拖动的窗口 [临时_靠近的窗口号], 纵向偏移))))) ' 再一看，超出了！
            删除成员 (匹配的纵向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    
    
    
    .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0)) ' 有横向吸附线
        赋值 (横线_距离最小值, 匹配的横向吸附线 [1].距离)
        赋值 (横线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的横向吸附线), 1, X)
            .如果真 (小于 (匹配的横向吸附线 [X], 距离, 横线_距离最小值)) ' 发现更靠近的线
                赋值 (横线_距离最小值, 匹配的横向吸附线 [X], 距离)
                赋值 (横线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0)) ' 有纵向吸附线
        赋值 (纵线_距离最小值, 匹配的纵向吸附线 [1].距离)
        赋值 (纵线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的纵向吸附线), 1, X)
            .如果真 (小于 (匹配的纵向吸附线 [X], 距离, 纵线_距离最小值)) ' 发现更靠近的线
                赋值 (纵线_距离最小值, 匹配的纵向吸附线 [X], 距离)
                赋值 (纵线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
        
    .如果真结束
    
    
    .如果真 (不等于 (取数组成员数 (吸附点集), 0)) ' 有吸附点
        赋值 (点_距离最小值, 吸附点集 [1].距离)
        赋值 (点_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (吸附点集), 1, X)
            .如果真 (小于 (吸附点集 [X], 距离, 点_距离最小值)) ' 发现有更靠近的点
                赋值 (点_距离最小值, 吸附点集 [X], 距离)
                赋值 (点_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    
    .如果 (并且 (不等于 (取数组成员数 (吸附点集), 0), 不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 有点又有双线
        
        .如果 (并且 (小于 (吸附点集 [点_距离最小编号], 距离X, 匹配的纵向吸附线 [纵线_距离最小编号], 距离), 小于 (吸附点集 [点_距离最小编号], 距离Y, 匹配的横向吸附线 [横线_距离最小编号], 距离))) ' 看谁近
            赋值 (窗口位置.左边, 吸附点集 [点_距离最小编号], 横坐标)
            赋值 (窗口位置.顶边, 吸附点集 [点_距离最小编号], 纵坐标)
            
        .否则
            赋值 (窗口位置.左边, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
            赋值 (窗口位置.顶边, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
            
        .如果结束
        
        
        
    .否则
         ' 没有双线和点抢位置了
         ' 注意必须先线后点
        
        .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0))
            赋值 (窗口位置.左边, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0))
            赋值 (窗口位置.顶边, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
        .如果真结束
        
        .如果真 (不等于 (取数组成员数 (吸附点集), 0))
            赋值 (窗口位置.左边, 吸附点集 [点_距离最小编号], 横坐标)
            赋值 (窗口位置.顶边, 吸附点集 [点_距离最小编号], 纵坐标)
            
        .如果真结束
        
    .如果结束
    
    赋值 (窗口位置.右边, 相加 (窗口位置.左边, 窗口宽度))
    赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 窗口高度))
    
    复制内存_矩形到指针 (参数二, 窗口位置, 16)
    
    
.判断 (等于 (消息号, #WM_MOVE))
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假))
        返回 ()
    .如果真结束
    .如果 (取反 (并且 (等于 (窗口号, 1), 有主窗口)))
        重新读取吸附线 (窗口号)
        算出吸附窗口号 (窗口号)
    .否则
        
        取窗口位置 (窗口句柄 [1], 窗口位置)
        .如果真 (或者 (等于 (窗口位置.左边, -32000), 等于 (窗口位置.顶边, -32000)))
            返回 ()
        .如果真结束
        .如果真 (有主窗口) ' 需要带动其他窗口
            .如果 (等于 (取随机数 (0, 1), 0)) ' 随机选择移动顺序，防止序号在后的窗口老是“慢半拍”
                .变量循环首 (2, 取数组成员数 (需要整体拖动的窗口), 1, X)
                    .如果真 (需要整体拖动的窗口 [X], 启用) ' 该窗口需要整体拖动
                        移动窗口 (X, 相加 (窗口位置.左边, 需要整体拖动的窗口 [X], 横向偏移), , 相加 (窗口位置.顶边, 需要整体拖动的窗口 [X], 纵向偏移), ) ' “移动窗口”命令仅在这里用到
                    .如果真结束
                    
                .变量循环尾 ()
                
            .否则
                .变量循环首 (取数组成员数 (需要整体拖动的窗口), 2, -1, X)
                    .如果真 (需要整体拖动的窗口 [X], 启用) ' 该窗口需要整体拖动
                        移动窗口 (X, 相加 (窗口位置.左边, 需要整体拖动的窗口 [X], 横向偏移), , 相加 (窗口位置.顶边, 需要整体拖动的窗口 [X], 纵向偏移), ) ' “移动窗口”命令仅在这里用到
                    .如果真结束
                    
                .变量循环尾 ()
                
            .如果结束
            
        .如果真结束
        
    .如果结束
    
.判断 (等于 (消息号, 161)) ' 非客户区左键按下
    重新读取吸附线_屏幕边缘 ()
    .判断开始 (等于 (参数一, 2))
        取窗口位置 (窗口句柄 [窗口号], 窗口位置)
        赋值 (鼠标偏差X, 相减 (取鼠标水平位置 (), 窗口位置.左边))
        赋值 (鼠标偏差Y, 相减 (取鼠标垂直位置 (), 窗口位置.顶边))
    .判断 (并且 (大于或等于 (参数一, 10), 小于或等于 (参数一, 17)))
        赋值 (左边固定, 并且 (不等于 (参数一, 10), 不等于 (参数一, 13), 不等于 (参数一, 16)))
        赋值 (顶边固定, 并且 (不等于 (参数一, 12), 不等于 (参数一, 13), 不等于 (参数一, 14)))
        赋值 (右边固定, 并且 (不等于 (参数一, 11), 不等于 (参数一, 14), 不等于 (参数一, 17)))
        赋值 (底边固定, 并且 (不等于 (参数一, 15), 不等于 (参数一, 16), 不等于 (参数一, 17)))
    .默认
        
    .判断结束
    .如果真 (并且 (等于 (窗口号, 1), 有主窗口))
        主窗口左键按下事件_ ()
        
    .如果真结束
    
.判断 (等于 (消息号, 160)) ' 非客户区鼠标移动……就当作是鼠标放开消息吧
    .如果真 (并且 (等于 (窗口号, 1), 有主窗口))
        主窗口左键放开事件_ ()
    .如果真结束
    
    
.判断 (等于 (消息号, 162))
     ' 非客户区鼠标左键放开：根本没用
.判断 (等于 (消息号, #WM_SIZE))
    重新读取吸附线 (0) ' 改变尺寸
    算出吸附窗口号 (窗口号)
    
.判断 (等于 (消息号, #WM_SIZING))
     ' =======粘住尺寸较简单，不用考虑主窗口，因为一般来说主窗口是不能改变大小的======
    复制内存_指针到矩形 (窗口位置, 参数二, 16)
    赋值 (要判断的纵边, 0)
    .如果真 (等于 (左边固定, 假))
        赋值 (要判断的纵边, 1)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小宽度, -1))
            .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最小宽度))
                赋值 (窗口位置.左边, 相减 (窗口位置.右边, 尺寸限制 [窗口号], 最小宽度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大宽度, -1))
            .如果真 (大于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最大宽度))
                赋值 (窗口位置.左边, 相减 (窗口位置.右边, 尺寸限制 [窗口号], 最大宽度))
            .如果真结束
            
        .如果真结束
        
        赋值 (纵边横坐标, 窗口位置.左边)
    .如果真结束
    .如果真 (等于 (右边固定, 假))
        赋值 (要判断的纵边, 2)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小宽度, -1))
            .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最小宽度))
                赋值 (窗口位置.右边, 相加 (窗口位置.左边, 尺寸限制 [窗口号], 最小宽度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大宽度, -1))
            .如果真 (大于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最大宽度))
                赋值 (窗口位置.右边, 相加 (窗口位置.左边, 尺寸限制 [窗口号], 最大宽度))
            .如果真结束
            
        .如果真结束
        
        赋值 (纵边横坐标, 窗口位置.右边)
    .如果真结束
    
    赋值 (要判断的横边, 0)
    .如果真 (等于 (顶边固定, 假))
        赋值 (要判断的横边, 1)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小高度, -1))
            .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最小高度))
                赋值 (窗口位置.顶边, 相减 (窗口位置.底边, 尺寸限制 [窗口号], 最小高度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大高度, -1))
            .如果真 (大于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最大高度))
                赋值 (窗口位置.顶边, 相减 (窗口位置.底边, 尺寸限制 [窗口号], 最大高度))
            .如果真结束
            
        .如果真结束
        赋值 (横边纵坐标, 窗口位置.顶边)
    .如果真结束
    .如果真 (等于 (底边固定, 假))
        赋值 (要判断的横边, 2)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小高度, -1))
            .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最小高度))
                赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 尺寸限制 [窗口号], 最小高度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大高度, -1))
            .如果真 (大于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最大高度))
                赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 尺寸限制 [窗口号], 最大高度))
            .如果真结束
            
        .如果真结束
        赋值 (横边纵坐标, 窗口位置.底边)
    .如果真结束
    
    
    
    
    .如果真 (不等于 (要判断的横边, 0)) ' 有横边（上边或下边）在拉伸
        .变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
            .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
                到循环尾 ()
            .如果真结束
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
                .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            .如果真 (小于或等于 (取绝对值 (相减 (横向吸附线 [X], 纵坐标, 横边纵坐标)), 临界值))
                .如果真 (并且 (小于或等于 (窗口位置.左边, 相加 (横向吸附线 [X], 横坐标2, 临界值)), 大于或等于 (窗口位置.右边, 相减 (横向吸附线 [X], 横坐标1, 临界值))))
                    赋值 (临时_横向吸附线.吸附线, 横向吸附线 [X])
                    赋值 (临时_横向吸附线.距离, 取绝对值 (相减 (横向吸附线 [X], 纵坐标, 横边纵坐标)))
                     ' 可以没有“原位置”，因为添加的时候都是原样复制，不会有变动
                     ' 也可以没有“靠近的窗口号”，因为本来就是这个窗口
                    加入成员 (匹配的横向吸附线, 临时_横向吸附线)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
    .如果真结束
    .如果真 (不等于 (要判断的纵边, 0)) ' 有纵边（左边或右边）在拉伸
        .变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
            .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
                到循环尾 ()
            .如果真结束
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
                .如果真 (等于 (窗口吸附线有效 [整除 (相加 (X, 1), 2)], 假)) ' 已经设定该窗口的吸附线无效
                    到循环尾 ()
                .如果真结束
                
            .如果真结束
            .如果真 (小于或等于 (取绝对值 (相减 (纵向吸附线 [X], 横坐标, 纵边横坐标)), 临界值))
                .如果真 (并且 (小于或等于 (窗口位置.顶边, 相加 (纵向吸附线 [X], 纵坐标2, 临界值)), 大于或等于 (窗口位置.底边, 相减 (纵向吸附线 [X], 纵坐标1, 临界值))))
                    赋值 (临时_纵向吸附线.吸附线, 纵向吸附线 [X])
                    赋值 (临时_纵向吸附线.距离, 取绝对值 (相减 (纵向吸附线 [X], 横坐标, 纵边横坐标)))
                     ' 可以没有“原位置”，因为添加的时候都是原样复制，不会有变动
                     ' 也可以没有“靠近的窗口号”，因为本来就是这个窗口
                    加入成员 (匹配的纵向吸附线, 临时_纵向吸附线)
                .如果真结束
                
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (并且 (不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 有可能有吸附点
        .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
            .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, Y)
                .如果真 (并且 (大于或等于 (匹配的横向吸附线 [X], 吸附线.纵坐标, 匹配的纵向吸附线 [Y], 吸附线.纵坐标1), 小于或等于 (匹配的横向吸附线 [X], 吸附线.纵坐标, 匹配的纵向吸附线 [Y], 吸附线.纵坐标2), 大于或等于 (匹配的纵向吸附线 [Y], 吸附线.横坐标, 匹配的横向吸附线 [X], 吸附线.横坐标1), 小于或等于 (匹配的纵向吸附线 [Y], 吸附线.横坐标, 匹配的横向吸附线 [X], 吸附线.横坐标2))) ' 线必须原来是交叉的
                    赋值 (临时_吸附点.横坐标, 匹配的纵向吸附线 [Y], 吸附线.横坐标)
                    赋值 (临时_吸附点.纵坐标, 匹配的横向吸附线 [X], 吸附线.纵坐标)
                    赋值 (临时_吸附点.距离X, 取绝对值 (相减 (临时_吸附点.横坐标, 纵边横坐标)))
                    赋值 (临时_吸附点.距离Y, 取绝对值 (相减 (临时_吸附点.纵坐标, 横边纵坐标)))
                    
                    
                    赋值 (临时_吸附点.距离, 相加 (相乘 (临时_吸附点.距离X, 临时_吸附点.距离X), 相乘 (临时_吸附点.距离Y, 临时_吸附点.距离Y)))
                    加入成员 (吸附点集, 临时_吸附点) ' 统计每个吸附点
                .如果真结束
                
            .变量循环尾 ()
            
        .变量循环尾 ()
    .如果真结束
    
     ' ========全部去掉“临界值”再算一次，因为单独的线吸附是不需要有临界值的，而吸附点在上面已经算过了=======
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的横向吸附线), 1, X)
        .如果真 (或者 (大于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标1, 窗口位置.右边), 小于 (匹配的横向吸附线 [相减 (X, 数组已删除数量)].吸附线.横坐标2, 窗口位置.左边))) ' 再一看，超出了！
            删除成员 (匹配的横向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    赋值 (数组已删除数量, 0)
    .变量循环首 (1, 取数组成员数 (匹配的纵向吸附线), 1, X)
        .如果真 (或者 (大于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标1, 窗口位置.底边), 小于 (匹配的纵向吸附线 [相减 (X, 数组已删除数量)].吸附线.纵坐标2, 窗口位置.顶边))) ' 再一看，超出了！
            删除成员 (匹配的纵向吸附线, 相减 (X, 数组已删除数量), 1) ' 删掉！
            赋值 (数组已删除数量, 相加 (数组已删除数量, 1))
        .如果真结束
        
    .变量循环尾 ()
    
    
    .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0)) ' 有横向吸附线
        赋值 (横线_距离最小值, 匹配的横向吸附线 [1].距离)
        赋值 (横线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的横向吸附线), 1, X)
            .如果真 (小于 (匹配的横向吸附线 [X], 距离, 横线_距离最小值)) ' 发现更靠近的线
                赋值 (横线_距离最小值, 匹配的横向吸附线 [X], 距离)
                赋值 (横线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0)) ' 有纵向吸附线
        赋值 (纵线_距离最小值, 匹配的纵向吸附线 [1].距离)
        赋值 (纵线_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (匹配的纵向吸附线), 1, X)
            .如果真 (小于 (匹配的纵向吸附线 [X], 距离, 纵线_距离最小值)) ' 发现更靠近的线
                赋值 (纵线_距离最小值, 匹配的纵向吸附线 [X], 距离)
                赋值 (纵线_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    .如果真 (不等于 (取数组成员数 (吸附点集), 0)) ' 有吸附点
        赋值 (点_距离最小值, 吸附点集 [1].距离)
        赋值 (点_距离最小编号, 1)
        .变量循环首 (2, 取数组成员数 (吸附点集), 1, X)
            .如果真 (小于 (吸附点集 [X], 距离, 点_距离最小值)) ' 发现有更靠近的点
                赋值 (点_距离最小值, 吸附点集 [X], 距离)
                赋值 (点_距离最小编号, X)
            .如果真结束
            
        .变量循环尾 ()
        
    .如果真结束
    
    
    .如果 (并且 (不等于 (取数组成员数 (吸附点集), 0), 不等于 (取数组成员数 (匹配的横向吸附线), 0), 不等于 (取数组成员数 (匹配的纵向吸附线), 0))) ' 若有点，又有双线
        
        .如果 (并且 (小于 (吸附点集 [点_距离最小编号], 距离X, 匹配的纵向吸附线 [纵线_距离最小编号], 距离), 小于 (吸附点集 [点_距离最小编号], 距离Y, 匹配的横向吸附线 [横线_距离最小编号], 距离))) ' 看哪个更靠近
            赋值 (横边纵坐标, 吸附点集 [点_距离最小编号], 纵坐标)
            赋值 (纵边横坐标, 吸附点集 [点_距离最小编号], 横坐标)
            
        .否则
            赋值 (横边纵坐标, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
            赋值 (纵边横坐标, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果结束
        
    .否则
         ' 没有双线和点抢位置了
         ' 注意必须先线后点
        .如果真 (不等于 (取数组成员数 (匹配的纵向吸附线), 0))
            赋值 (纵边横坐标, 匹配的纵向吸附线 [纵线_距离最小编号], 吸附线.横坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (匹配的横向吸附线), 0))
            赋值 (横边纵坐标, 匹配的横向吸附线 [横线_距离最小编号], 吸附线.纵坐标)
        .如果真结束
        .如果真 (不等于 (取数组成员数 (吸附点集), 0))
            赋值 (横边纵坐标, 吸附点集 [点_距离最小编号], 纵坐标)
            赋值 (纵边横坐标, 吸附点集 [点_距离最小编号], 横坐标)
        .如果真结束
        
    .如果结束
    
    
    
     ' =========根据情况改写窗口位置========
    .判断开始 (等于 (要判断的横边, 1)) ' 顶边在拉伸
        赋值 (窗口位置.顶边, 横边纵坐标)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小高度, -1))
            .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最小高度))
                赋值 (窗口位置.顶边, 相减 (窗口位置.底边, 尺寸限制 [窗口号], 最小高度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大高度, -1))
            .如果真 (大于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最大高度))
                赋值 (窗口位置.顶边, 相减 (窗口位置.底边, 尺寸限制 [窗口号], 最大高度))
            .如果真结束
            
        .如果真结束
        
    .判断 (等于 (要判断的横边, 2)) ' 底边在拉伸
        赋值 (窗口位置.底边, 横边纵坐标)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小高度, -1))
            .如果真 (小于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最小高度))
                赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 尺寸限制 [窗口号], 最小高度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大高度, -1))
            .如果真 (大于 (相减 (窗口位置.底边, 窗口位置.顶边), 尺寸限制 [窗口号], 最大高度))
                赋值 (窗口位置.底边, 相加 (窗口位置.顶边, 尺寸限制 [窗口号], 最大高度))
            .如果真结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    
    .判断开始 (等于 (要判断的纵边, 1)) ' 左边在拉伸
        赋值 (窗口位置.左边, 纵边横坐标)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小宽度, -1))
            .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最小宽度))
                赋值 (窗口位置.左边, 相减 (窗口位置.右边, 尺寸限制 [窗口号], 最小宽度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大宽度, -1))
            .如果真 (大于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最大宽度))
                赋值 (窗口位置.左边, 相减 (窗口位置.右边, 尺寸限制 [窗口号], 最大宽度))
            .如果真结束
            
        .如果真结束
        
    .判断 (等于 (要判断的纵边, 2)) ' 右边在拉伸
        赋值 (窗口位置.右边, 纵边横坐标)
        .如果真 (不等于 (尺寸限制 [窗口号], 最小宽度, -1))
            .如果真 (小于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最小宽度))
                赋值 (窗口位置.右边, 相加 (窗口位置.左边, 尺寸限制 [窗口号], 最小宽度))
            .如果真结束
            
        .如果真结束
        .如果真 (不等于 (尺寸限制 [窗口号], 最大宽度, -1))
            .如果真 (大于 (相减 (窗口位置.右边, 窗口位置.左边), 尺寸限制 [窗口号], 最大宽度))
                赋值 (窗口位置.右边, 相加 (窗口位置.左边, 尺寸限制 [窗口号], 最大宽度))
            .如果真结束
            
        .如果真结束
        
    .默认
        
    .判断结束
    
    
    复制内存_矩形到指针 (参数二, 窗口位置, 16)
    
    
.判断 (等于 (消息号, #WM_DESTROY))
    设置窗口活动性 (窗口号, 假)
.默认
    
.判断结束


.子程序 主窗口左键放开事件_, 空白型, , 
.局部变量 X, 整数型, , , 

.如果真 (正在整体拖动)
    赋值 (正在整体拖动, 假)
.如果真结束
重新读取吸附线 (0)
.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    算出吸附窗口号 (X)
.变量循环尾 ()


.子程序 主窗口左键按下事件_, 空白型, , 
.如果真 (不等于 (吸附的窗口号 [1], “”))
    赋值 (正在整体拖动, 真)
.如果真结束
重新读取吸附线_屏幕边缘 ()

.子程序 移动窗口, 空白型, , 
.参数 窗口号, 整数型, , 
.参数 左边, 整数型, 可空, 省略即为不动
.参数 右边, 整数型, 可空, 
.参数 顶边, 整数型, 可空, 
.参数 底边, 整数型, 可空, 

.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 窗口宽度, 整数型, , , 
.局部变量 窗口高度, 整数型, , , 

赋值 (正在移动窗口, 真)
取窗口位置 (窗口句柄 [窗口号], 窗口位置) ' 先取出
赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边))
赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
.如果真 (等于 (是否为空 (左边), 假)) ' 输入了值
    赋值 (窗口位置.左边, 左边)
.如果真结束
.如果真 (等于 (是否为空 (右边), 假))
    赋值 (窗口位置.右边, 右边)
    赋值 (窗口宽度, 相减 (窗口位置.右边, 窗口位置.左边))
.如果真结束
.如果真 (等于 (是否为空 (顶边), 假))
    赋值 (窗口位置.顶边, 顶边)
.如果真结束
.如果真 (等于 (是否为空 (底边), 假))
    赋值 (窗口位置.底边, 底边)
    赋值 (窗口高度, 相减 (窗口位置.底边, 窗口位置.顶边))
.如果真结束
移动窗口_ (窗口句柄 [窗口号], 窗口位置.左边, 窗口位置.顶边, 窗口宽度, 窗口高度, 1)
赋值 (正在移动窗口, 假)

.子程序 算出吸附窗口号, 空白型, , 算出指定窗口与哪个窗口粘在了一起
.参数 窗口号, 整数型, , 

.局部变量 吸附了窗口_, 逻辑型, , "0", 
.局部变量 窗口位置, 矩形_, , , 该窗口位置
.局部变量 X, 整数型, , , 
.局部变量 临时_文本位置, 整数型, , , 不吸附任何窗口时，需要从原来吸附的窗口的<所吸附的窗口>中删除该窗口号，所以需要文本定位变量

.如果真 (或者 (正在整体拖动, 正在移动窗口))
    返回 ()
.如果真结束
重定义数组 (吸附了窗口_, 假, 取数组成员数 (窗口句柄))
取窗口位置 (窗口句柄 [窗口号], 窗口位置)
.变量循环首 (1, 取数组成员数 (横向吸附线), 1, X)
    .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1)))) ' 是当前窗口的吸附线
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设定该窗口的吸附线无效
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.顶边, 横向吸附线 [X], 纵坐标), 0)) ' 判断顶边（要求完全匹配）
        .如果真 (并且 (大于或等于 (窗口位置.右边, 横向吸附线 [X], 横坐标1), 小于或等于 (窗口位置.左边, 横向吸附线 [X], 横坐标2))) ' 横坐标也在范围内
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2))) ' X>8说明是屏幕边缘，只有X≤8时吸附的才是窗口
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真) ' 根据X的值可以算出这条线属于哪个窗口（每个窗口固定2条线）
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1)) ' 发现目标窗口的吸附标记中没有本窗口
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号))) ' 添加！
                .如果真结束
                ' 本源码来自易语言资源网(www.5A5X.com)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.底边, 横向吸附线 [X], 纵坐标), 0)) ' 判断底边
        .如果真 (并且 (大于或等于 (窗口位置.右边, 横向吸附线 [X], 横坐标1), 小于或等于 (窗口位置.左边, 横向吸附线 [X], 横坐标2)))
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
.变量循环首 (1, 取数组成员数 (纵向吸附线), 1, X)
    .如果真 (或者 (等于 (X, 相乘 (窗口号, 2)), 等于 (X, 相减 (相乘 (窗口号, 2), 1))))
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (窗口吸附线有效 [窗口号], 假)) ' 已经设定该窗口的吸附线无效
        到循环尾 ()
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.左边, 纵向吸附线 [X], 横坐标), 0))
        .如果真 (并且 (大于或等于 (窗口位置.底边, 纵向吸附线 [X], 纵坐标1), 小于或等于 (窗口位置.顶边, 纵向吸附线 [X], 纵坐标2))) ' 纵坐标也在范围内
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    .如果真 (等于 (相减 (窗口位置.右边, 纵向吸附线 [X], 横坐标), 0))
        .如果真 (并且 (大于或等于 (窗口位置.底边, 纵向吸附线 [X], 纵坐标1), 小于或等于 (窗口位置.顶边, 纵向吸附线 [X], 纵坐标2)))
            .如果真 (小于或等于 (X, 相乘 (取数组成员数 (窗口句柄), 2)))
                赋值 (吸附了窗口_ [整除 (相加 (X, 1), 2)], 真)
                .如果真 (等于 (寻找文本 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号), , 假), -1))
                    赋值 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 相加 (吸附的窗口号 [整除 (相加 (X, 1), 2)], 到文本 (窗口号)))
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
 ' 吸附的窗口号 [窗口号] ＝ 选择 (吸附了窗口_ [1], “1”, “”) ＋ 选择 (吸附了窗口_ [2], “2”, “”) ＋ 选择 (吸附了窗口_ [3], “3”, “”) ＋ 选择 (吸附了窗口_ [4], “4”, “”) ＋ 选择 (吸附了窗口_ [5], “5”, “”)  ' 赋值
赋值 (吸附的窗口号 [窗口号], “”)
.变量循环首 (1, 取数组成员数 (吸附了窗口_), 1, X)
    .如果真 (吸附了窗口_ [X])
        赋值 (吸附的窗口号 [窗口号], 相加 (吸附的窗口号 [窗口号], 到文本 (X)))
    .如果真结束
    
.变量循环尾 ()

.变量循环首 (1, 取数组成员数 (吸附的窗口号), 1, X)
    .如果真 (等于 (X, 窗口号)) ' 是本窗口
        到循环尾 () ' 不处理
    .如果真结束
    .如果真 (等于 (吸附了窗口_ [X], 假)) ' 没有吸附这个窗口了
        赋值 (临时_文本位置, 寻找文本 (吸附的窗口号 [X], 到文本 (窗口号), , 假))
        .如果真 (不等于 (临时_文本位置, -1)) ' 目标窗口还有标记
            赋值 (吸附的窗口号 [X], 相加 (取文本左边 (吸附的窗口号 [X], 相减 (临时_文本位置, 1)), 取文本右边 (吸附的窗口号 [X], 相减 (取文本长度 (吸附的窗口号 [X]), 临时_文本位置)))) ' 删除目标窗口的吸附标记
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()

算出需要整体拖动的窗口号 ()

.子程序 取窗口位置_特定值, 整数型, , 
.参数 窗口号, 整数型, , 
.参数 值, 整数型, , 1左 2右 3顶 4底 5宽 6高

.局部变量 窗口位置, 矩形_, , , 

取窗口位置 (窗口句柄 [窗口号], 窗口位置)
返回 (多项选择 (值, 窗口位置.左边, 窗口位置.右边, 窗口位置.顶边, 窗口位置.底边, 相减 (窗口位置.右边, 窗口位置.左边), 相减 (窗口位置.底边, 窗口位置.顶边)))

.子程序 算出需要整体拖动的窗口号, 空白型, , 整体拖动：即当主窗口拖动时跟着移动的窗口
.局部变量 窗口需要整体拖动, 逻辑型, , "0", 指定某个窗口是否被主窗口直接或简介吸附（实际上也用作了用来指定窗口是否被遍历过的数组）（注：第一个变量无意义，因为是主窗口本身）
.局部变量 X, 整数型, , , 

重定义数组 (窗口需要整体拖动, 假, 取数组成员数 (窗口句柄))
递归_深度计算吸附 (1, 窗口需要整体拖动) ' 一层一层，一层一层……计算
.变量循环首 (2, 取数组成员数 (窗口需要整体拖动), 1, X) ' X代表窗口号
    .如果 (窗口需要整体拖动 [X])
        赋值 (需要整体拖动的窗口 [X], 启用, 真) ' 记录与主窗口之间的相对位置
        赋值 (需要整体拖动的窗口 [X], 横向偏移, 相减 (取窗口位置_特定值 (X, 1), 取窗口位置_特定值 (1, 1)))
        赋值 (需要整体拖动的窗口 [X], 纵向偏移, 相减 (取窗口位置_特定值 (X, 3), 取窗口位置_特定值 (1, 3)))
    .否则
        赋值 (需要整体拖动的窗口 [X], 启用, 假)
    .如果结束
    
.变量循环尾 ()

.子程序 递归_深度计算吸附, 空白型, , 
.参数 当前窗口号, 整数型, , 这一层所调查的窗口
.参数 , 逻辑型, 参考 数组, 

.局部变量 X, 整数型, , , 
.局部变量 下一层的窗口号, 整数型, , , 
.局部变量 要计算的窗口号, 文本型, , , 这一层调查的窗口所吸附的窗口

赋值 (要计算的窗口号, 吸附的窗口号 [当前窗口号]) ' 读出这一层的窗口吸附了哪些
.变量循环首 (1, 取文本长度 (要计算的窗口号), 1, X)
    赋值 (下一层的窗口号, 到数值 (取文本中间 (要计算的窗口号, X, 1))) ' 取出第X位
    
    .如果真 (并且 (不等于 (下一层的窗口号, 当前窗口号), 不等于 (下一层的窗口号, 1), 窗口吸附线有效 [下一层的窗口号])) ' 不是当前窗口（不能自己算自己）……理论上不会发生的 且 不是主窗口（这个会发生），窗口设为活动才计算
        .如果真 (等于 ( [下一层的窗口号], 假)) ' 还没调查过
            赋值 ( [下一层的窗口号], 真) ' 设置为真
            递归_深度计算吸附 (下一层的窗口号, ) ' 继续，下一层！
        .如果真结束
        ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    
.变量循环尾 ()

.子程序 设置窗口活动性, 空白型, , 不活动的窗口在吸附时直接被无视。请在窗口的显示/隐藏事件里调用
.参数 窗口号, 整数型, , 
.参数 活动性, 逻辑型, , 

.局部变量 X, 整数型, , , 

.如果真 (或者 (小于 (窗口号, 1), 大于 (窗口号, 取数组成员数 (窗口句柄))))
    返回 ()
.如果真结束
赋值 (窗口吸附线有效 [窗口号], 活动性)
.变量循环首 (1, 取数组成员数 (窗口句柄), 1, X)
    算出吸附窗口号 (X) ' 把隐藏的窗口从整体拖动列表里删除，或者把重新显示的窗口重新添加到列表
.变量循环尾 ()

.子程序 重新钩上, 空白型, 公开, 由于某些原因导致吸附失效时，调用此函数
.参数 窗口号, 整数型, , 0表示全部

.局部变量 X, 整数型, , , 

.变量循环首 (1, 取数组成员数 (旧过程号), 1, X)
    .如果真 (或者 (等于 (窗口号, X), 等于 (窗口号, 0)))
        SetWindowLong (窗口句柄 [窗口号], -4, 旧过程号 [窗口号])
        赋值 (旧过程号 [窗口号], SetWindowLong (窗口句柄 [窗口号], -4, 到数值 (&消息处理子程序)))
    .如果真结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.变量循环尾 ()

.子程序 停止吸附, 逻辑型, , 
.局部变量 X, 整数型, , , 

.如果真 (等于 (开始了, 假))
    返回 (假)
.如果真结束
.变量循环首 (1, 取数组成员数 (旧过程号), 1, X)
    SetWindowLong (窗口句柄 [X], -4, 旧过程号 [X])
    赋值 (旧过程号 [X], 0)
.变量循环尾 ()
赋值 (开始了, 假)
返回 (真)


 ' 不属于任何一个程序集、类模块的函数：
