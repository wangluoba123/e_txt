 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5a5x.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5a5x.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5a5x.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5a5x.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 738
    高度 = 542
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 1
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “神经网络”
    帮助文件名 = “”



.图片 位图, " ' 已保存到：D:\易语言学习\Data\数字识别.e\位图", , 
.图片 训练样本, " ' 已保存到：D:\易语言学习\Data\数字识别.e\训练样本", , 
.常量 NN_RESX, "15", , 
.常量 NN_RESY, "17", , 
.常量 NN_NUMBERS, "40", , 
.常量 NN_NOISY, "25", , 
.常量 NN_MAXITER, "500", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 m_bTestData, , 
    .成员 m_bTestData, 整数型, , "1", 

数据类型 m_bNumbers, , 
    .成员 m_bNumbers, 整数型, , "1", 

数据类型 m_iNoisy, , 
    .成员 m_iNoisy, 整数型, , "1", 

数据类型 m_fWeights, , 
    .成员 m_fWeights, 小数型, , "1", 

数据类型 矩形, 公开, 
    .成员 左上横坐标, 整数型, , , 
    .成员 左上纵坐标, 整数型, , , 
    .成员 右下横坐标, 整数型, , , 
    .成员 右下纵坐标, 整数型, , , 


.DLL命令 LoadDIB, 整数型, "dibapi.dll", "", , 
    .参数 数据指针, 字节集, 传址, 
    .参数 数据长度, 整数型, , 

.DLL命令 DIBWidth, 整数型, "dibapi.dll", "", , 
    .参数 位图指针, 整数型, , 

.DLL命令 DIBHeight, 整数型, "dibapi.dll", "", , 
    .参数 位图指针, 整数型, , 

.DLL命令 FindDIBBits, 整数型, "dibapi.dll", "", , 
    .参数 位图指针, 整数型, , 

.DLL命令 GetDIB, 整数型, "dibapi.dll", "", , 
    .参数 位图句柄, 整数型, , 
    .参数 缓冲区, 字节集, , 
    .参数 缓冲区长度, 整数型, , 

.DLL命令 DIBNumColors, 短整数型, "dibapi.dll", "", , 
    .参数 位图指针, 整数型, , 

.DLL命令 PaletteSize, 短整数型, "dibapi.dll", "", , 
    .参数 位图指针, 整数型, , 

.DLL命令 Convert256toGray, 逻辑型, "dibapi.dll", "", , 
    .参数 位图句柄, 整数型, , 

.DLL命令 ConvertGrayToWhiteBlack, 逻辑型, "dibapi.dll", "", , 
    .参数 位图句柄, 整数型, , 

.DLL命令 GradientSharp, 逻辑型, "dibapi.dll", "", , 
    .参数 位图句柄, 整数型, , 

.DLL命令 SlopeAdjust, 逻辑型, "dibapi.dll", "", , 
    .参数 位图句柄, 整数型, , 

.DLL命令 GlobalLock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 GlobalUnlock, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 RtlMoveMemory_1, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, , 
    .参数 Source, 字节集, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_2, 空白型, "", "RtlMoveMemory", , 
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 m_bTestData, m_bTestData, , "0", 保存测试数据
.程序集变量 m_bNumbers, m_bNumbers, , "0", 保存标准训练数据
.程序集变量 m_iNoisy, m_iNoisy, , "0", 保存在标准训练数据加上噪声后的数据
.程序集变量 m_fWeights, m_fWeights, , "0", 网络的权值数组
.程序集变量 位图处理, 位图处理, , , 
.程序集变量 训练, 逻辑型, , , 
.程序集变量 有图片, 逻辑型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5a5x.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5a5x.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5a5x.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5a5x.com  ================--

初始化网络 ()

.子程序 初始化网络, 空白型, , 
.局部变量 训练数据, 字节集, , , 
.局部变量 索引, 整数型, , , 
.局部变量 索引1, 整数型, , , 
.局部变量 x, 整数型, , , 

初始化权值 ()

重定义数组 (m_bNumbers, 假, #NN_NUMBERS)


.计次循环首 (#NN_NUMBERS, 索引)
    重定义数组 (m_bNumbers [索引], m_bNumbers, 假, 相乘 (#NN_RESX, #NN_RESY))
.计次循环尾 ()

重定义数组 (m_iNoisy, 假, 相乘 (#NN_NUMBERS, #NN_NOISY))
.计次循环首 (相乘 (#NN_NUMBERS, #NN_NOISY), 索引)
    重定义数组 (m_iNoisy [索引], m_iNoisy, 假, 相乘 (#NN_RESX, #NN_RESY))
.计次循环尾 ()

赋值 (训练数据, #训练样本)

.如果真 (等于 (取字节集长度 (训练数据), 相乘 (#NN_NUMBERS, #NN_RESX, #NN_RESY)))
    .计次循环首 (#NN_NUMBERS, 索引)
        .计次循环首 (相乘 (#NN_RESX, #NN_RESY), 索引1)
            赋值 (x, 相加 (x, 1))
            赋值 (m_bNumbers [索引], m_bNumbers [索引1], 训练数据 [x])
        .计次循环尾 ()
    .计次循环尾 ()
    返回 ()
.如果真结束



信息框 (“加载数据失败!”, #错误图标, “错误”)

.子程序 初始化权值, 空白型, , 
.局部变量 索引, 整数型, , , 

重定义数组 (m_fWeights, 假, #NN_NUMBERS)
.计次循环首 (#NN_NUMBERS, 索引)
    重定义数组 (m_fWeights [索引], m_fWeights, 假, 相乘 (#NN_RESX, #NN_RESY))
.计次循环尾 ()

.子程序 _按钮_灰度_被单击, 空白型, , 
.如果 (等于 (有图片, 真))
    .如果真 (位图处理.转化为灰度图 ())
        赋值 (., 位图处理.取图片 ())
    .如果真结束
    
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束



.子程序 _按钮_定位_被单击, 空白型, , 
.局部变量 矩形, 矩形, , , 

.如果 (等于 (有图片, 真))
    赋值 (矩形, 位图处理.定位 ())
    矩形.画矩形 (.左上横坐标, 矩形.左上纵坐标, 矩形.右下横坐标, 矩形.右下纵坐标)
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束


.子程序 _按钮_二值化_被单击, 空白型, , 
.如果 (等于 (有图片, 真))
    .如果真 (位图处理.二值化 ())
        赋值 (., 位图处理.取图片 ())
    .如果真结束
     ' 本源码来自易语言资源网(www.5a5x.com)
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束


.子程序 _按钮_锐化_被单击, 空白型, , 
.如果 (等于 (有图片, 真))
    .如果真 (位图处理.锐化 ())
        赋值 (., 位图处理.取图片 ())
    .如果真结束
    
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束


.子程序 _按钮_倾斜_被单击, 空白型, , 
.如果 (等于 (有图片, 真))
    .如果真 (位图处理.倾斜调整 ())
        赋值 (., 位图处理.取图片 ())
    .如果真结束
    
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束



.子程序 _按钮_分割_被单击, 空白型, , 
.局部变量 矩形, 矩形, , "0", 
.局部变量 索引, 整数型, , , 
.局部变量 字符数, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 xx, 整数型, , , 

.如果 (等于 (有图片, 真))
    赋值 (字符数, 位图处理.分割 (矩形))
    重定义数组 (m_bTestData, 假, 字符数)
    
    .计次循环首 (字符数, 索引)
        重定义数组 (m_bTestData [索引], m_bTestData, 假, 相乘 (#NN_RESX, #NN_RESY))
        
        .清除 ()
        赋值 (., 相减 (矩形 [索引], 右下横坐标, 矩形 [索引], 左上横坐标))
        赋值 (., 相减 (矩形 [索引], 右下纵坐标, 矩形 [索引], 左上纵坐标))
        矩形.复制 ( [索引], 左上横坐标, 矩形 [索引], 左上纵坐标, 相减 (矩形 [索引], 右下横坐标, 矩形 [索引], 左上横坐标), 相减 (矩形 [索引], 右下纵坐标, 矩形 [索引], 左上纵坐标), , 0, 0, )
        矩形.画矩形 ( [索引], 左上横坐标, 矩形 [索引], 左上纵坐标, 矩形 [索引], 右下横坐标, 矩形 [索引], 右下纵坐标)
        赋值 (., 15.取图片 (17))
        处理事件 ()
        赋值 (xx, 0)
        .计次循环首 (17, y)
            .计次循环首 (15, x)
                赋值 (xx, 相加 (xx, 1))
                .如果 (大于 (相减 (x, 1).取点 (相减 (y, 1)), 0))
                    赋值 (m_bTestData [索引], m_bTestData [xx], 0)
                .否则
                    赋值 (m_bTestData [索引], m_bTestData [xx], 1)
                .如果结束
                
            .计次循环尾 ()
        .计次循环尾 ()
    .计次循环尾 ()
.否则
    信息框 (“请先加载图片”, #错误图标, “错误”)
.如果结束


.子程序 训练, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 d, 小数型, , "0", 
.局部变量 k, 整数型, , , 
.局部变量 bestind, 整数型, , , 
.局部变量 realval, 整数型, , , 
.局部变量 correct, 逻辑型, , , 
.局部变量 cycles, 整数型, , , 

初始化权值 ()
重定义数组 (d, 假, #NN_NUMBERS)
生成随机噪声数字 ()
.循环判断首 ()
    赋值 (correct, 真)
    .变量循环首 (1, 相乘 (#NN_NUMBERS, #NN_NOISY), 1, i)
        .变量循环首 (1, #NN_NUMBERS, 1, j)
            赋值 (d [j], 0)
            .变量循环首 (1, 相乘 (#NN_RESX, #NN_RESY), 1, k)
                赋值 (d [j], 相加 (d [j], 相乘 (m_fWeights [j], m_fWeights [k], m_iNoisy [i], m_iNoisy [k])))
            .变量循环尾 ()
        .变量循环尾 ()
        赋值 (bestind, 0)
        .变量循环首 (2, #NN_NUMBERS, 1, j)
            .如果真 (大于 (d [j], d [相加 (bestind, 1)]))
                赋值 (bestind, 相减 (j, 1))
            .如果真结束
            赋值 (realval, 取整 (相除 (相减 (i, 1), #NN_NOISY)))
        .变量循环尾 ()
        .如果真 (等于 (bestind, realval))
            到循环尾 ()
        .如果真结束
        
        
        赋值 (correct, 假)
        .变量循环首 (1, 相乘 (#NN_RESX, #NN_RESY), 1, j)
            赋值 (m_fWeights [相加 (bestind, 1)].m_fWeights [j], 相减 (m_fWeights [相加 (bestind, 1)].m_fWeights [j], m_iNoisy [i], m_iNoisy [j]))
            赋值 (m_fWeights [相加 (realval, 1)].m_fWeights [j], 相加 (m_fWeights [相加 (realval, 1)].m_fWeights [j], m_iNoisy [i], m_iNoisy [j]))
        .变量循环尾 ()
        
    .变量循环尾 ()
    赋值 (cycles, 相加 (cycles, 1))
.循环判断尾 (并且 (等于 (correct, 假), 小于或等于 (cycles, #NN_MAXITER)))
信息框 (相加 (“训练次数:”, 到文本 (cycles)), #信息图标, “训练完毕”)

.子程序 生成随机噪声数字, 空白型, , 
.局部变量 j, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 x, 小数型, , , 
.局部变量 num, 整数型, , , 

置随机数种子 ()
赋值 (num, 1)
.计次循环首 (相乘 (#NN_NUMBERS, #NN_NOISY), i)
    .计次循环首 (相乘 (#NN_RESX, #NN_RESY), j)
        ' 本源码来自易语言资源网(www.5a5x.com)
        .如果 (小于 (求余数 (取随机数 (), 100), 7))
            赋值 (m_iNoisy [i], m_iNoisy [j], 选择 (等于 (m_bNumbers [num], m_bNumbers [j], 0), 1, 0))
        .否则
            赋值 (m_iNoisy [i], m_iNoisy [j], m_bNumbers [num], m_bNumbers [j])
        .如果结束
        
    .计次循环尾 ()
    赋值 (x, 相除 (i, #NN_NOISY))
    .如果真 (并且 (等于 (x, 取整 (x)), 不等于 (i, 1)))
        赋值 (num, 相加 (num, 1))
    .如果真结束
    
.计次循环尾 ()

.子程序 识别, 整数型, , 
.参数 字符索引, 整数型, , 

.局部变量 d, 小数型, , "0", 
.局部变量 j, 整数型, , , 
.局部变量 k, 整数型, , , 
.局部变量 bestind, 整数型, , , 


重定义数组 (d, 假, #NN_NUMBERS)
.计次循环首 (#NN_NUMBERS, j)
    .计次循环首 (相乘 (#NN_RESX, #NN_RESY), k)
        赋值 (d [j], 相加 (d [j], 相乘 (m_fWeights [j], m_fWeights [k], m_bTestData [字符索引], m_bTestData [k])))
    .计次循环尾 ()
.计次循环尾 ()
赋值 (bestind, 1)
.变量循环首 (2, #NN_NUMBERS, 1, j)
    .如果真 (大于 (d [j], d [bestind]))
        赋值 (bestind, j)
    .如果真结束
    
.变量循环尾 ()
.判断循环首 (大于 (bestind, 10))
    赋值 (bestind, 相减 (bestind, 10))
.判断循环尾 ()

返回 (相减 (bestind, 1))

.子程序 _按钮_识别_被单击, 空白型, , 
.局部变量 索引, 整数型, , , 
.局部变量 识别结果, 文本型, , , 

.如果真 (大于 (取数组成员数 (m_bTestData), 0))
    .如果真 (等于 (训练, 假))
        训练 ()
        赋值 (训练, 真)
    .如果真结束
    .计次循环首 (取数组成员数 (m_bTestData), 索引)
        赋值 (识别结果, 相加 (识别结果, 到文本 (识别 (索引))))
    .计次循环尾 ()
    信息框 (相加 (“识别结果: ”, 识别结果), #信息图标, “信息”)
.如果真结束


.子程序 取大写数字, 文本型, , 
.参数 数字, 整数型, , 

.局部变量 文本, 文本型, , , 

.判断开始 (等于 (数字, 0))
    赋值 (文本, “零”)
.判断 (等于 (数字, 1))
    赋值 (文本, “一”)
.判断 (等于 (数字, 2))
    赋值 (文本, “二”)
.判断 (等于 (数字, 3))
    赋值 (文本, “三”)
.判断 (等于 (数字, 4))
    赋值 (文本, “四”)
.判断 (等于 (数字, 5))
    赋值 (文本, “五”)
.判断 (等于 (数字, 6))
    赋值 (文本, “六”)
.判断 (等于 (数字, 7))
    赋值 (文本, “七”)
.判断 (等于 (数字, 8))
    赋值 (文本, “八”)
.判断 (等于 (数字, 9))
    赋值 (文本, “九”)
.默认
    赋值 (文本, “未知”)
.判断结束
返回 (文本)

.子程序 _按钮_训练_被单击, 空白型, , 
训练 ()
赋值 (训练, 真)

.子程序 _按钮_加载图片_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (., 读入文件 (.))
    .如果 (位图处理.加载位图 (.))
        赋值 (., 位图处理.取宽度 ())
        赋值 (., 位图处理.取高度 ())
        赋值 (有图片, 真)
    .否则
        信息框 (“不支持的图片格式”, #错误图标, “错误”)
    .如果结束
    ' 本源码来自易语言资源网(www.5a5x.com)
.如果真结束


.类模块 位图处理, , , 

.程序集变量 位图句柄, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 加载位图, 逻辑型, 公开, 
.参数 位图, 字节集, , 

赋值 (位图句柄, LoadDIB (位图, 取字节集长度 (位图)))
返回 (不等于 (位图句柄, 0))

.子程序 转化为灰度图, 逻辑型, 公开, 
返回 (Convert256toGray (位图句柄))

.子程序 二值化, 逻辑型, , 
返回 (ConvertGrayToWhiteBlack (位图句柄))

.子程序 锐化, 逻辑型, 公开, 
返回 (GradientSharp (位图句柄))

.子程序 倾斜调整, 逻辑型, 公开, 
返回 (SlopeAdjust (位图句柄))

.子程序 取图片, 字节集, 公开, 
.局部变量 位图, 字节集, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, GetDIB (位图句柄, 位图, 0))
赋值 (位图, 取空白字节集 (长度))
赋值 (长度, GetDIB (位图句柄, 位图, 长度))
返回 (位图)

.子程序 取宽度, 整数型, 公开, 
.局部变量 位图指针, 整数型, , , 
.局部变量 宽度, 整数型, , , 

赋值 (位图指针, GlobalLock (位图句柄))
赋值 (宽度, DIBWidth (位图指针))
GlobalUnlock (位图句柄)
返回 (宽度)

.子程序 取高度, 整数型, 公开, 
.局部变量 位图指针, 整数型, , , 
.局部变量 高度, 整数型, , , 

赋值 (位图指针, GlobalLock (位图句柄))
赋值 (高度, DIBHeight (位图指针))
GlobalUnlock (位图句柄)
返回 (高度)

.子程序 定位, 矩形, , 
.局部变量 位图指针, 整数型, , , 
.局部变量 lLineBytes, 整数型, , , 
.局部变量 lpDIBBits, 整数型, , , 
.局部变量 h, 整数型, , , 
.局部变量 w, 整数型, , , 
.局部变量 颜色值, 整数型, , , 
.局部变量 矩形, 矩形, , , 
.局部变量 Width, 整数型, , , 
.局部变量 Height, 整数型, , , 

赋值 (位图指针, GlobalLock (位图句柄))
赋值 (lpDIBBits, FindDIBBits (位图指针))
赋值 (lLineBytes, DIBWidth (位图指针))
赋值 (Width, DIBWidth (位图指针))
赋值 (Height, DIBHeight (位图指针))

.如果 (小于 (lLineBytes, 4))
    赋值 (lLineBytes, 4)
.否则
    .如果真 (不等于 (求余数 (lLineBytes, 4), 0))
        赋值 (lLineBytes, 相减 (相加 (lLineBytes, 4), 求余数 (lLineBytes, 4)))
    .如果真结束
    
.如果结束

.变量循环首 (0, 相减 (Height, 1), 1, h)
    .变量循环首 (0, 相减 (Width, 1), 1, w)
        RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
        .如果真 (等于 (颜色值, 0))
            赋值 (矩形.右下纵坐标, h)
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (大于 (矩形.右下纵坐标, 0))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()


.变量循环首 (相减 (Height, 1), 0, -1, h)
    .变量循环首 (0, 相减 (Width, 1), 1, w)
        RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
        .如果真 (等于 (颜色值, 0))
            赋值 (矩形.左上纵坐标, 相加 (h, 1))
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (大于 (矩形.左上纵坐标, 0))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

.变量循环首 (0, 相减 (Width, 1), 1, w)
    .变量循环首 (0, 相减 (Height, 1), 1, h)
        RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
        .如果真 (等于 (颜色值, 0))
            赋值 (矩形.左上横坐标, w)
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (大于 (矩形.左上横坐标, 0))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()

.变量循环首 (相减 (Width, 1), 0, -1, w)
    .变量循环首 (0, 相减 (Height, 1), 1, h)
        RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
        .如果真 (等于 (颜色值, 0))
            赋值 (矩形.右下横坐标, 相加 (w, 1))
            跳出循环 ()
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (大于 (矩形.右下横坐标, 0))
        跳出循环 ()
    .如果真结束
    
.变量循环尾 ()
赋值 (矩形.左上纵坐标, 相减 (Height, 矩形.左上纵坐标))
赋值 (矩形.右下纵坐标, 相减 (Height, 矩形.右下纵坐标))
GlobalUnlock (位图句柄)
返回 (矩形)

.子程序 分割, 整数型, 公开, 
.参数 矩形, 矩形, 参考 数组, 

.局部变量 tmp, 矩形, , , 
.局部变量 h, 整数型, , , 
.局部变量 w, 整数型, , , 
.局部变量 位图指针, 整数型, , , 
.局部变量 lpDIBBits, 整数型, , , 
.局部变量 lLineBytes, 整数型, , , 
.局部变量 颜色值, 整数型, , , 
.局部变量 左上横, 整数型, , , 
.局部变量 右下横, 整数型, , , 
.局部变量 字符数, 整数型, , , 
.局部变量 字符, 逻辑型, , , 
.局部变量 左上纵, 整数型, , , 
.局部变量 右下纵, 整数型, , , 
.局部变量 Width, 整数型, , , 
.局部变量 Height, 整数型, , , 

赋值 (tmp, 定位 ())
赋值 (位图指针, GlobalLock (位图句柄))
赋值 (lpDIBBits, FindDIBBits (位图指针))
赋值 (lLineBytes, DIBWidth (位图指针))
赋值 (Width, DIBWidth (位图指针))
赋值 (Height, DIBHeight (位图指针))
' 本源码来自易语言资源网(www.5a5x.com)
.如果 (小于 (lLineBytes, 4))
    赋值 (lLineBytes, 4)
.否则
    .如果真 (不等于 (求余数 (lLineBytes, 4), 0))
        赋值 (lLineBytes, 相减 (相加 (lLineBytes, 4), 求余数 (lLineBytes, 4)))
    .如果真结束
    
.如果结束

.变量循环首 (0, 相减 (Width, 1), 1, w)
    .变量循环首 (0, 相减 (Height, 1), 1, h)
        RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
        .如果真 (等于 (颜色值, 0))
            .如果 (字符)
                跳出循环 ()
            .否则
                赋值 (左上横, w)
                赋值 (字符数, 相加 (字符数, 1))
                赋值 (字符, 真)
            .如果结束
            
        .如果真结束
        
    .变量循环尾 ()
    .如果真 (字符)
        .如果真 (不等于 (颜色值, 0))
            .如果真 (小于 (相减 (w, 左上横), 8))
                到循环尾 ()
            .如果真结束
            赋值 (右下横, w)
            赋值 (字符, 假)
            重定义数组 (矩形, 真, 字符数)
            赋值 (矩形 [字符数], 左上横坐标, 左上横)
            赋值 (矩形 [字符数], 右下横坐标, 右下横)
            
            .变量循环首 (0, 相减 (Height, 1), 1, h)
                .变量循环首 (左上横, 右下横, 1, w)
                    RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
                    .如果真 (等于 (颜色值, 0))
                        赋值 (矩形 [字符数], 右下纵坐标, h)
                        跳出循环 ()
                    .如果真结束
                    
                .变量循环尾 ()
                .如果真 (大于 (矩形 [字符数], 右下纵坐标, 0))
                    跳出循环 ()
                .如果真结束
                
            .变量循环尾 ()
            
            .变量循环首 (相减 (Height, 1), 0, -1, h)
                .变量循环首 (左上横, 右下横, 1, w)
                    RtlMoveMemory_2 (颜色值, 相加 (lpDIBBits, 相乘 (lLineBytes, h), w), 1)
                    .如果真 (等于 (颜色值, 0))
                        赋值 (矩形 [字符数], 左上纵坐标, 相加 (h, 1))
                        跳出循环 ()
                    .如果真结束
                    
                .变量循环尾 ()
                .如果真 (大于 (矩形 [字符数], 左上纵坐标, 0))
                    跳出循环 ()
                .如果真结束
                
            .变量循环尾 ()
            
            赋值 (矩形 [字符数], 左上纵坐标, 相减 (Height, 矩形 [字符数], 左上纵坐标))
            赋值 (矩形 [字符数], 右下纵坐标, 相减 (Height, 矩形 [字符数], 右下纵坐标))
        .如果真结束
        
    .如果真结束
    
.变量循环尾 ()
GlobalUnlock (位图句柄)
返回 (取数组成员数 (矩形))


 ' 不属于任何一个程序集、类模块的函数：
