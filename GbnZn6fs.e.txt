 ' 文件类型：Windows模块源码

 ' 程序名称：高级模块・
 ' 程序描述：高级模块・
@备注:
高级模块・
 ' 程序作者：雪花工作室
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：swork@139.com
QQ:530551426
 ' 版本号：1.0
 ' 创建号：0.0



.常量 INFINITE, "-1", , 
.常量 QS_ALLINPUT, "255", , 
.常量 WAIT_OBJECT_0, "0", , 
.常量 BIF_RETURNONLYFSDIRS, "1", , 
.常量 BIF_DONTGOBELOWDOMAIN, "2", , 
.常量 BIF_STATUSTEXT, "4", , 
.常量 MAX_PATH, "260", , 
.常量 BFFM_INITIALIZED, "1", , 
.常量 BFFM_SELCHANGED, "2", , 
.常量 BFFM_SETSTATUSTEXT, "0", , 
.常量 BFFM_SETSELECTION, "0", , 
.图片 空白图标, " ' 已保存到：D:\易语言学习\Data\GbnZn6fs.e\空白图标", 公开, 空白的图标，大小为1326（约1.29KB）
.图片 取操作系统版本, " ' 已保存到：D:\易语言学习\Data\GbnZn6fs.e\取操作系统版本", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 NotifyIconData, , 
    .成员 cbSize, 整数型, , , 
    .成员 hwnd, 整数型, , , 
    .成员 uID, 整数型, , , 
    .成员 uFlags, 整数型, , , 
    .成员 uCallbackMessage, 整数型, , , 
    .成员 hIcon, 整数型, , , 
    .成员 szTip, 字节型, , "128", 
    .成员 dwState, 整数型, , , 
    .成员 dwStateMask, 整数型, , , 
    .成员 szInfo, 字节型, , "256", 
    .成员 uTimeoutAndVersion, 整数型, , , 
    .成员 szInfoTitle, 字节型, , "64", 
    .成员 dwInfoFlags, 整数型, , , 

数据类型 窗口信息, , 
    .成员 主窗口, 窗口, , , 
    .成员 句柄, 空白型, , , 
    .成员 左键菜单, 菜单, , , 
    .成员 右键菜单, 菜单, , , 
    .成员 双击托盘, 子程序指针, , , 

数据类型 LARGE_INTEGER, , 
    .成员 QuadPart, 长整数型, , , 占用8个字节

数据类型 SHQUERYRBINFO, , 
    .成员 结构大小, 整数型, , , 
    .成员 文件长度, 长整数型, , , 
    .成员 文件数, 长整数型, , , 

数据类型 BrowseInfo, , 
    .成员 hWndOwner, 整数型, , , 
    .成员 pIDLRoot, 整数型, , , 
    .成员 pszDisplayName, 整数型, , , 
    .成员 lpszTitle, 整数型, , , 
    .成员 ulFlags, 整数型, , , 
    .成员 lpfnCallback, 整数型, , , 
    .成员 lParam, 整数型, , , 
    .成员 iImage, 整数型, , , 

数据类型 SHFILEOPSTRUCT, , 
    .成员 句柄, 整数型, , , 
    .成员 wFunc, 整数型, , , 
    .成员 pFrom, 字节集, , , 
    .成员 pTo, 字节集, , , 
    .成员 fFlags, 短整数型, , , 
    .成员 fAnyOperationsAborted, 整数型, , , 
    .成员 hNameMappings, 整数型, , , 
    .成员 lpszProgressTitle, 文本型, , , 

.全局变量 结构, NotifyIconData, , , 
.全局变量 主窗口信息, 窗口信息, , , 
.全局变量 MyMsg, 整数型, , , 
.全局变量 默认窗口, 子程序指针, , , 
.全局变量 托盘图标, 逻辑型, , , 
.全局变量 m_CurrentDirectory, 文本型, , , 

.DLL命令 SetWindowLong, 子程序指针, "user32", "SetWindowLongA", , 
    .参数 HWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 子程序指针, , 

.DLL命令 RegisterWindowMessageA, 整数型, "", "RegisterWindowMessageA", , 
    .参数 lpString, 文本型, , 

.DLL命令 LocalSize, 整数型, "", "", , 
    .参数 参数一, NotifyIconData, 传址, 

.DLL命令 lstrcpyn, 整数型, "", "lstrcpyn", , 
    .参数 lpString1, 字节型, 数组, 
    .参数 lpString2, 文本型, , 
    .参数 iMaxLength, 整数型, , 

.DLL命令 Shell_NotifyIconA, 整数型, "shell32.dll", "Shell_NotifyIconA", , 
    .参数 dwMessage, 整数型, , 
    .参数 lpData, NotifyIconData, , 

.DLL命令 SendMessage, 整数型, "user32", "SendMessageA", , 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。SendMessageBynum， ;    SendMessageByString是该函数的“类型安全”声明形式  由具体的消息决定
    .参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
    .参数 wMsg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, 整数型, , 具体取决于消息;

.DLL命令 SetForegroundWindow, 整数型, "user32", "SetForegroundWindow", , 将窗口设为系统的前台窗口。这个函数可用于改变用户目前正在操作的应用程序  非零表示成功，零表示失败。会设置GetLastError
    .参数 hwnd, 整数型, , 带到前台的窗口;

.DLL命令 TrackPopupMenu, 整数型, "user32", "TrackPopupMenu", , 在屏幕的任意地方显示一个弹出式菜单  非零表示成功，零表示失败。会设置GetLastError
    .参数 hMenu, 整数型, , 弹出式菜单的句柄
    .参数 wFlags, 整数型, , 位置标志和鼠标追踪标志的组合，见下表;位置标志：说明;TPM_CENTERALIGN：菜单在指定位置水平居中;TPM_LEFTALIGN：菜单的左侧置于水平x坐标处;TPM_RIGHTALIGN：菜单的右侧置于水平x坐标处;TPM_LEFTBUTTON：鼠标左键标准运作方式;TPM_RIGHTBUTTON：用鼠标右键进行菜单追踪
    .参数 x, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 y, 整数型, , 同上
    .参数 nReserved, 整数型, , 未使用，设为零
    .参数 hwnd, 整数型, , 用于接收弹出式菜单命令的窗口的句柄。应该使用窗体的窗口句柄――窗体中有一个菜单能象弹出式菜单那样接收相同的命令ID集
    .参数 lprc, 整数型, 传址, Rect，用屏幕坐标定义的一个矩形，如用户在这个矩形的范围内单击，则弹出式菜单不会关闭。如单击弹出式菜单之外的任何一个地方，则会关闭菜单。可以设为NULL;

.DLL命令 CallWindowProc, 整数型, "user32", "CallWindowProcA", , 
    .参数 lpPrevWndFunc, 子程序指针, , 
    .参数 HWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 SetWindowLong_, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息  指定数据的前一个值
    .参数 窗口句柄, 整数型, , hwnd，欲为其取得信息的窗口的句柄
    .参数 窗口信息值, 整数型, , nIndex，请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息新值, 整数型, , dwNewLong，由nIndex指定的窗口信息的新值

.DLL命令 GetWindowLong_, 整数型, "user32", "GetWindowLongA", , 从指定窗口的结构中取得信息  由nIndex决定。零表示出错。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息，可以是下述任何一个常数：;GWL_EXSTYLE：扩展窗口样式;GWL_STYLE：窗口样式;GWL_WNDPROC：该窗口的窗口函数的地址;GWL_HINSTANCE：拥有窗口的实例的句柄;GWL_HWNDPARENT：该窗口之父的句柄。不要用SetWindowWord来改变这个值;GWL_ID：对话框中一个子窗口的标识符;GWL_USERDATA：含义由应用程序规定;DWL_DLGPROC：这个窗口的对话框函数地址;DWL_MSGRESULT：在对话框函数中处理的一条消息返回的值;DWL_USER：含义由应用程序规定;

.DLL命令 SetLayeredWindowAttributes_, 整数型, "", "SetLayeredWindowAttributes", , 设置窗口透明
    .参数 hwnd, 整数型, , 
    .参数 crKey, 整数型, , 
    .参数 bAlpha, 整数型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 ShowWindow_, 整数型, "user32", "ShowWindow", , 控制窗口的可见性（在vb里使用：针对vb窗体及控件，请使用对应的vb属性）  如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
    .参数 hwnd, 整数型, , 窗口句柄，要向这个窗口应用由nCmdShow指定的命令
    .参数 nCmdShow, 整数型, , 为窗口指定可视性方面的一个命令。请用下述任何一个常数;SW_HIDE：隐藏窗口，活动状态给令一个窗口;SW_MINIMIZE：最小化窗口，活动状态给令一个窗口;SW_RESTORE：用原来的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOW：用当前的大小和位置显示一个窗口，同时令其进入活动状态;SW_SHOWMAXIMIZED：最大化窗口，并将其激活;SW_SHOWMINIMIZED：最小化窗口，并将其激活;SW_SHOWMINNOACTIVE：最小化一个窗口，同时不改变活动窗口;SW_SHOWNA：用当前的大小和位置显示一个窗口，不改变活动窗口;SW_SHOWNOACTIVATE：用最近的大小和位置显示一个窗口，同时不改变活动窗口;SW_SHOWNORMAL：与SW_RESTORE相同;

.DLL命令 CreateWaitableTimer_, 整数型, "", "CreateWaitableTimerA", , 
    .参数 lpTimerAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 lpTimerName, 整数型, , 

.DLL命令 SetWaitableTimer_, 整数型, "", "SetWaitableTimer", , 
    .参数 hTimer, 整数型, , 
    .参数 pDueTime, LARGE_INTEGER, , 
    .参数 lPeriod, 整数型, , 
    .参数 pfnCompletionRoutine, 整数型, , 
    .参数 lpArgToCompletionRoutine, 整数型, , 
    .参数 fResume, 逻辑型, , 

.DLL命令 MsgWaitForMultipleObjects_, 整数型, "", "MsgWaitForMultipleObjects", , 
    .参数 nCount, 整数型, , 
    .参数 pHandles, 整数型, 传址, 
    .参数 fWaitAll, 逻辑型, , 
    .参数 dwMilliseconds, 整数型, , 
    .参数 dwWakeMask, 整数型, , 

.DLL命令 CloseHandle_, 逻辑型, "", "CloseHandle", , 
    .参数 hObject, 整数型, , 

.DLL命令 SetTimer_, 整数型, "", "SetTimer", , 
    .参数 hWnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 
    .参数 uElapse, 整数型, , 
    .参数 lpTimerFunc, 子程序指针, , 

.DLL命令 KillTimer_, 整数型, "", "KillTimer", , 
    .参数 hwnd, 整数型, , 
    .参数 nIDEvent, 整数型, , 

.DLL命令 取操作系统目录, 整数型, "kernel32.dll", "GetWindowsDirectoryA", , 
    .参数 操作系统目录, 文本型, , 
    .参数 目录长度, 整数型, , 

.DLL命令 SHQueryRecycleBin, 整数型, "shell32.dll", "SHQueryRecycleBinA", , 
    .参数 根路径, 文本型, , 
    .参数 回收站询问信息, SHQUERYRBINFO, 传址, 

.DLL命令 GetLogicalDriveStrings, 整数型, "kernel32", "GetLogicalDriveStringsA", , 
    .参数 nBufferLength, 整数型, , 
    .参数 lpBuffer, 字节集, , 

.DLL命令 LocalAlloc, 整数型, "", "", , 
    .参数 uFlags, 整数型, , 
    .参数 uBytes, 整数型, , 

.DLL命令 LocalFree, 整数型, "", "", , 
    .参数 hMem, 整数型, , 

.DLL命令 RtlMoveMemory, 整数型, "", "RtlMoveMemory", , 
    .参数 lpvDest, 整数型, 传址, 
    .参数 lpvSource, 整数型, , 
    .参数 cbCopy, 整数型, , 

.DLL命令 SHEmptyRecycleBin, 空白型, "shell32.dll", "SHEmptyRecycleBinA", , 
    .参数 句柄, 整数型, , 
    .参数 pszRootPath, 文本型, , 
    .参数 dwFlags, 整数型, , 

.DLL命令 lstrcat, 整数型, "kernel32", "lstrcatA", , 
    .参数 lpString1, 文本型, , 
    .参数 lpString2, 文本型, , 

.DLL命令 SHBrowseForFolder, 整数型, "shell32", "SHBrowseForFolder", , 
    .参数 lpbi, BrowseInfo, , 

.DLL命令 系统关于窗口, 空白型, "", "ShellAboutA", 公开, 自定义系统关于窗口
    .参数 句柄, 整数型, , 指定窗口的句柄(HWND)，可以为0.
    .参数 软件名称, 文本型, , 指定软件名称。
    .参数 版权文本, 文本型, , 版权信息文本，不可太长。
    .参数 图标, 整数型, , 图标句柄，由LoadIconA函数返回。

.DLL命令 SHGetPathFromIDList, 整数型, "shell32", "SHGetPathFromIDList", , 
    .参数 pidList, 整数型, , 
    .参数 lpBuffer, 文本型, , 

.DLL命令 SHFileOperation, 整数型, "Shell32.dll", "SHFileOperationA", , 
    .参数 文件参数, SHFILEOPSTRUCT, , 

.DLL命令 lstrcpyn_文本型, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 欲取其指针, 文本型, 传址, 
    .参数 保留, 整数型, , 

.DLL命令 文本_取长度, 整数型, "kernel32.dll", "lstrlenA", , 
    .参数 文本, 文本型, , 

.程序集 程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
 ' --========  易语言资源网  (www.wodesoft.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.wodesoft.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.wodesoft.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.wodesoft.com  ================--

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。

.子程序 托盘_置托盘图标, 空白型, 公开, 设置本程序在系统托盘中的图标。比核心库的功能更强大。
.参数 主窗口, 窗口, , 欲置托盘图标的主窗口。
.参数 左键菜单, 菜单, 可空, 单击鼠标左键时弹出的菜单。
.参数 右键菜单, 菜单, 可空, 单击鼠标右键时弹出的菜单。
.参数 提示文本, 文本型, 可空, 鼠标移动到托盘图标上显示的提示文本。
.参数 是否显示气泡, 逻辑型, 可空, 是否显示气泡信息。
.参数 气泡内容, 文本型, 可空, 气泡提示内容。
.参数 气泡图标, 整数型, 可空, 气泡图标。
.参数 气泡标题, 文本型, 可空, 气泡提示标题。
.参数 双击托盘事件, 子程序指针, 可空, 双击托盘图标时执行的子程序，该事件应该没有参数且没有返回值。

赋值 (主窗口信息.主窗口, 主窗口)
赋值 (主窗口信息.句柄, 主窗口.取窗口句柄 ())
赋值 (主窗口信息.左键菜单, 左键菜单)
赋值 (主窗口信息.右键菜单, 右键菜单)
赋值 (主窗口信息.双击托盘, 双击托盘事件)
赋值 (默认窗口, SetWindowLong (主窗口信息.句柄, -4, &托盘事件处理))
赋值 (MyMsg, RegisterWindowMessageA (“eMenu”))
赋值 (结构.cbSize, LocalSize (结构))
赋值 (结构.hwnd, 主窗口信息.句柄)
赋值 (结构.hIcon, SendMessage (主窗口信息.句柄, 127, 0, 0))
赋值 (结构.uID, 1)
赋值 (结构.uFlags, 位或 (4, 2, 1))
赋值 (结构.uCallbackMessage, 2000) ' 2000为自定义消息，你可以用1024+1或以上、65565以下的任何值
 ' 本源码来自易语言资源网(www.wodesoft.com)
lstrcpyn (结构.szTip, 提示文本, 相加 (取文本长度 (提示文本), 1)) ' 把文本写入字符数组
Shell_NotifyIconA (0, 结构)
.如果真 (等于 (是否显示气泡, 真))
    赋值 (结构.uFlags, 气泡图标) ' 气泡提示
    lstrcpyn (结构.szInfo, 气泡内容, 相加 (取文本长度 (气泡内容), 1))
    lstrcpyn (结构.szInfoTitle, 气泡标题, 相加 (取文本长度 (气泡标题), 1))
    赋值 (结构.dwInfoFlags, 1) ' 信息图标
    Shell_NotifyIconA (1, 结构)
.如果真结束

赋值 (托盘图标, 真)


.子程序 托盘_删除托盘图标, 空白型, 公开, 删除本模块设置在系统托盘中的图标。
.如果真 (等于 (托盘图标, 真))
    Shell_NotifyIconA (2, 结构) ' 删除图标
    SetWindowLong (主窗口信息.句柄, -4, 默认窗口)
.如果真结束
 ' 本源码来自易语言资源网(www.wodesoft.com)

.子程序 系统_取操作系统版本, 整数型, 公开, 返回值：0～8代表：0=未知， 1=Windows95， 2=Windows98， 3=WindowsME， 4=WindowsNT， 5=Windows2000， 6=WindowsXP， 7=Windows2003， 8=Vista
置入代码 (#取操作系统版本)
返回 (0)

.子程序 窗口_窗口渐显, 空白型, 公开, 使窗口逐渐显示出来。（放在创建完毕事件中）
.参数 参_窗口句柄, 整数型, , 
.参数 参_速度, 整数型, , 1~255,数值越大速度越快

.局部变量 i, 整数型, , , 

SetWindowLong_ (参_窗口句柄, -20, 位或 (GetWindowLong_ (参_窗口句柄, -20), 524288))
SetLayeredWindowAttributes_ (参_窗口句柄, 0, 0, 2) ' 先将窗口透明为0
ShowWindow_ (参_窗口句柄, 9) ' 显示出窗口,以免闪烁
.变量循环首 (1, 255, 参_速度, i)
    SetLayeredWindowAttributes_ (参_窗口句柄, 0, i, 2)
.变量循环尾 ()

.子程序 窗口_窗口渐消, 空白型, 公开, 使窗口逐渐消除。（放在将被销毁事件中）
.参数 参_窗口句柄, 整数型, , 
.参数 参_速度, 整数型, , 1~255,数值越大速度越快

.局部变量 i, 整数型, , , 

.计次循环首 (255, i)
    SetLayeredWindowAttributes_ (参_窗口句柄, 0, 相减 (255, i), 2)
.计次循环尾 ()

.子程序 文本_加密文本, 文本型, 公开, 加密一段文本
.参数 要加密的文本, 文本型, , 

.局部变量 临时, 字节集, , , 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 文本型, , , 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 aaa, 文本型, , , 

赋值 (临时, 到字节集 (要加密的文本))
.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)))))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)), j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取字节集长度 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    赋值 (aaa, 十进制到十六进制 (位异或 (临时 [x], y)))
    赋值 (outstr, 相加 (outstr, 选择 (大于 (取文本长度 (aaa), 1), “”, “0”), aaa))
.计次循环尾 ()
返回 (outstr)

.子程序 文本_解密文本, 文本型, 公开, 解密一段文本
.参数 要解密的文本, 文本型, , 

.局部变量 临时, 字节型, , "0", 
.局部变量 s, 字节型, , "256", 
.局部变量 k, 字节型, , "256", 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 outstr, 字节型, , "0", 
.局部变量 temp, 字节型, , , 
.局部变量 x, 整数型, , , 
.局部变量 t, 整数型, , , 
.局部变量 计次, 整数型, , , 

.变量循环首 (1, 取文本长度 (要解密的文本), 2, 计次)
    加入成员 (临时, 到字节 (十六进制到十进制 (取文本中间 (要解密的文本, 计次, 2))))
.变量循环尾 ()

.计次循环首 (256, i)
    赋值 (s [i], 相减 (i, 1))
.计次循环尾 ()
赋值 (j, 1)
.计次循环首 (256, i)
    .如果真 (大于 (j, 取文本长度 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)))))
        赋值 (j, 1)
    .如果真结束
    赋值 (k [i], 取代码 (取文本中间 (相加 (字符 (90), 字符 (105), 字符 (72), 字符 (97), 字符 (110), 字符 (87), 字符 (111), 字符 (114), 字符 (107), 字符 (114), 字符 (111), 字符 (111), 字符 (109)), j, 1), ))
    赋值 (j, 相加 (j, 1))
.计次循环尾 ()
赋值 (j, 0)
.计次循环首 (256, i)
    赋值 (j, 相加 (求余数 (相加 (j, s [i], k [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
.计次循环尾 ()
赋值 (i, 0)
赋值 (j, 0)
.计次循环首 (取数组成员数 (临时), x)
    赋值 (i, 相加 (求余数 (相加 (i, 1), 256), 1))
    赋值 (j, 相加 (求余数 (相加 (j, s [i]), 256), 1))
    赋值 (temp, s [i])
    赋值 (s [i], s [j])
    赋值 (s [j], temp)
    赋值 (t, 相加 (求余数 (相加 (s [i], 求余数 (s [j], 256)), 256), 1))
    赋值 (y, s [t])
    加入成员 (outstr, 位异或 (临时 [x], y))
.计次循环尾 ()
返回 (到文本 (outstr))

.子程序 系统_高精度等待, 空白型, , 集“等待()、延时()”优点于一身的命令，去除了“等待()”命令占用100%CPU资源和“延时()”卡死程序的缺点，并把精度提高了1000倍，精度达到微秒级。
.参数 时间, 整数型, , 单位为毫秒。

.局部变量 hTimer, 整数型, , , 
.局部变量 int64, LARGE_INTEGER, , , 

赋值 (int64.QuadPart, 相乘 (-10, 时间, 1000)) ' 1000微秒 = 1毫秒 ； 1000毫秒 = 1秒
赋值 (hTimer, CreateWaitableTimer_ (0, 假, 0))
SetWaitableTimer_ (hTimer, int64, 0, 0, 0, 假)
.判断循环首 (不等于 (MsgWaitForMultipleObjects_ (1, hTimer, 假, #INFINITE, #QS_ALLINPUT), #WAIT_OBJECT_0))
    处理事件 ()
.判断循环尾 ()
CloseHandle_ (hTimer)

.子程序 系统_设置自动运行, 逻辑型, , 在注册表中设置自动运行某程序，不为调试模式时生效。成功返回真，否则返回假。
.参数 注册项名称, 文本型, , 注册表项的名称
.参数 运行命令行, 文本型, 可空, 欲运行的命令行，默认为本程序。

.如果真 (或者 (是否为调试版 (), 等于 (注册项名称, “”)))
    返回 (假)
.如果真结束

.如果 (是否为空 (运行命令行))
    返回 (写注册项 (#本地机器, 相加 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Run\”, 注册项名称), 相加 (取运行目录 (), “\”, 取执行文件名 ())))
.否则
    返回 (写注册项 (#本地机器, 相加 (“SOFTWARE\Microsoft\Windows\CurrentVersion\Run\”, 注册项名称), 运行命令行))
.如果结束





.子程序 时钟_创建时钟, 整数型, , 创建一个时钟组件（可减少窗口上组件数目），使用与系统时钟相同，成功返回时钟ID，失败返回0。
.参数 时钟标示ID, 整数型, , 时钟标示ID，一个ID表示一个时钟，如果初始已经创建了一个时钟，然后创建一个相同ID的时钟，那么后创建的时钟会将先创建的时钟覆盖。
.参数 窗口句柄, 整数型, , 窗口的句柄(HWND).由“取窗口句柄”方法返回。
.参数 时钟周期, 整数型, , 指定时钟事件产生的周期，单位为毫秒。如果设定为0，则无时钟事件产生。
.参数 周期事件, 子程序指针, , 每当经过了指定的时钟周期，将产生此事件。该事件应该无任何参数、返回值。

返回 (SetTimer_ (窗口句柄, 时钟标示ID, 时钟周期, 周期事件))

.子程序 时钟_销毁时钟, 逻辑型, 公开, 销毁已经由“时钟_创建时钟”创建的时钟组件。成功返回真，失败返回假。
.参数 时钟ID, 整数型, , 时钟的ID。
.参数 窗口句柄, 整数型, , 窗口的句柄(HWND)。由“取窗口句柄”方法返回。

返回 (不等于 (KillTimer_ (窗口句柄, 时钟ID), 0))

.子程序 配置_读加密配置项, 文本型, 公开, 读取加密文件配置项。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 默认文本, 文本型, 可空, 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
.如果真 (是否为空 (默认文本))
    赋值 (默认文本, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (默认文本)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        跳出循环 ()
    .如果真结束
     ' 本源码来自易语言资源网(www.wodesoft.com)
.判断循环尾 ()
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        赋值 (取出内容, 分割文本 (读取内容, “=”, ))
        .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
            .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                关闭文件 (文件号)
                .如果真 (等于 (删首尾空 (取文本右边 (读取内容, 相减 (取文本长度 (读取内容), 寻找文本 (读取内容, “=”, , 假)))), “”))
                    返回 (默认文本)
                .如果真结束
                返回 (取文本右边 (读取内容, 相减 (取文本长度 (读取内容), 寻找文本 (读取内容, “=”, , 假))))
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (默认文本)

.子程序 配置_写加密配置项, 逻辑型, , 写加密文件配置项。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 
.参数 欲写入值, 文本型, , 不允许写入空值。

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 
.局部变量 项存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
.如果真 (或者 (等于 (删首尾空 (配置文件名), “”), 等于 (删首尾空 (配置节名), “”), 等于 (删首尾空 (配置项名), “”), 等于 (删首尾空 (欲写入值), “”)))
    返回 (假)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
赋值 (项存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.如果 (节存在)
    赋值 (上次位置, 取读写位置 (文件号))
    .判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
        赋值 (上次位置, 取读写位置 (文件号))
        赋值 (读取内容, 读入一行 (文件号))
        .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
            跳出循环 ()
        .如果真结束
        .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
            赋值 (取出内容, 分割文本 (读取内容, “=”, ))
            .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
                .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                    赋值 (项存在, 真)
                    移动读写位置 (文件号, , 上次位置)
                    删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
                    移动读写位置 (文件号, , 上次位置)
                    插入文本行 (文件号, 相加 (取出内容 [1], “=”, 欲写入值))
                    关闭文件 (文件号)
                    返回 (真)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
    .判断循环尾 ()
    .如果真 (等于 (项存在, 假))
        移动读写位置 (文件号, , 上次位置)
        插入文本行 (文件号, 相加 (配置项名, “=”, 欲写入值))
        关闭文件 (文件号)
        返回 (真)
    .如果真结束
    
.否则
    移到文件尾 (文件号)
    插入文本行 (文件号, 相加 (“[”, 配置节名, “]”))
    插入文本行 (文件号, 相加 (配置项名, “=”, 欲写入值))
    关闭文件 (文件号)
    返回 (真)
.如果结束
关闭文件 (文件号)
返回 (假)

.子程序 配置_取加密配置节名, 逻辑型, , 读取加密文件配置节名。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名称数组, 文本型, 数组, 保存取出的配置文件节名称数组

.局部变量 操作系统目录, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 读取内容, 文本型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
清除数组 (配置节名称数组)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        赋值 (读取内容, 子文本替换 (读取内容, “[”, “”, , , 真))
        赋值 (读取内容, 子文本替换 (读取内容, “]”, “”, , , 真))
        加入成员 (配置节名称数组, 删首尾空 (读取内容))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_取加密配置项名, 逻辑型, , 读取加密文件配置项名。
.参数 配置文件名, 文本型, , 省略路径,默认为保存在windows系统目录下
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 欲取出项目数组的小节名称
.参数 配置项名称数组, 文本型, 数组, 保存取出的配置项名称数组

.局部变量 操作系统目录, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 读取内容, 文本型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
清除数组 (配置项名称数组)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        加入成员 (配置项名称数组, 删首尾空 (取文本左边 (读取内容, 相减 (寻找文本 (读取内容, “=”, , 假), 1))))
    .如果真结束
    
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_删除加密配置小节, 逻辑型, , 删除加密文件配置小节。
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        移动读写位置 (文件号, , 上次位置)
        删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
        移动读写位置 (文件号, , 上次位置)
        跳出循环 ()
    .如果真结束
    
.判断循环尾 ()
.如果真 (等于 (节存在, 假))
    关闭文件 (文件号)
    返回 (节存在)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    移动读写位置 (文件号, , 上次位置)
    删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
    移动读写位置 (文件号, , 上次位置)
.判断循环尾 ()
关闭文件 (文件号)
返回 (真)

.子程序 配置_删除加密配置项目, 逻辑型, 公开, 删除加密文件配置项目。
.参数 配置文件名, 文本型, , 
.参数 文件密码, 文本型, 可空, 
.参数 配置节名, 文本型, , 
.参数 配置项名, 文本型, , 

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 文本型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 取出内容, 文本型, , "0", 
.局部变量 上次位置, 整数型, , , 
.局部变量 节存在, 逻辑型, , , 
.局部变量 项存在, 逻辑型, , , 

.如果真 (是否为空 (文件密码))
    赋值 (文件密码, “”)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
赋值 (文件号, 打开加密文件 (配置文件名, #改读, , 文件密码, ))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
赋值 (节存在, 假)
赋值 (项存在, 假)
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (等于 (到大写 (读取内容), 到大写 (相加 (“[”, 配置节名, “]”))))
        赋值 (节存在, 真)
        跳出循环 ()
    .如果真结束
    ' 本源码来自易语言资源网(www.wodesoft.com)
.判断循环尾 ()
.如果真 (等于 (节存在, 假))
    关闭文件 (文件号)
    返回 (假)
.如果真结束
.判断循环首 (等于 (是否在文件尾 (文件号, 真), 假))
    赋值 (上次位置, 取读写位置 (文件号))
    赋值 (读取内容, 读入一行 (文件号))
    .如果真 (并且 (等于 (取文本左边 (删首尾空 (读取内容), 1), “[”), 等于 (取文本右边 (删首尾空 (读取内容), 1), “]”)))
        跳出循环 ()
    .如果真结束
    .如果真 (不等于 (寻找文本 (读取内容, “=”, , 假), -1))
        赋值 (取出内容, 分割文本 (读取内容, “=”, ))
        .如果真 (大于或等于 (取数组成员数 (取出内容), 2))
            .如果真 (等于 (删首尾空 (取出内容 [1]), 配置项名))
                赋值 (项存在, 真)
                移动读写位置 (文件号, , 上次位置)
                删除数据 (文件号, 相加 (取文本长度 (读取内容), 2))
                移动读写位置 (文件号, , 上次位置)
                关闭文件 (文件号)
                返回 (真)
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
.判断循环尾 ()
.如果真 (等于 (项存在, 假))
    关闭文件 (文件号)
    返回 (假)
.如果真结束
关闭文件 (文件号)
返回 (真)

.子程序 配置_置配置文件密码, 逻辑型, 公开, 置加密配置文件密码。
.参数 配置文件名, 文本型, , 
.参数 原文件密码, 文本型, 可空, 如果原来无密码，则设为“”或保留为空。
.参数 新文件密码, 文本型, 可空, 如果欲取消密码，则设为“”或保留为空。如果新密码等于原密码，将不做任何操作，直接返回真。

.局部变量 操作系统目录, 文本型, , , 
.局部变量 读取内容, 字节集, , , 
.局部变量 文件号, 整数型, , , 

.如果真 (是否为空 (原文件密码))
    赋值 (原文件密码, “”)
.如果真结束
.如果真 (是否为空 (新文件密码))
    赋值 (新文件密码, “”)
.如果真结束
.如果真 (等于 (原文件密码, 新文件密码))
    返回 (真)
.如果真结束
赋值 (操作系统目录, 取空白文本 (256))
取操作系统目录 (操作系统目录, 255)
赋值 (操作系统目录, 删首尾空 (操作系统目录))
.如果真 (等于 (寻找文本 (配置文件名, “\”, , 假), -1))
    赋值 (配置文件名, 相加 (操作系统目录, “\”, 配置文件名))
.如果真结束
复制文件 (配置文件名, 相加 (配置文件名, “.bak”))
赋值 (文件号, 打开加密文件 (配置文件名, #读入, , 原文件密码, ))
.如果真 (等于 (文件号, 0))
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
赋值 (读取内容, 读入字节集 (文件号, 取文件长度 (文件号)))
关闭文件 (文件号)
赋值 (文件号, 打开加密文件 (配置文件名, #重写, , 新文件密码, ))
.如果真 (等于 (文件号, 0))
    复制文件 (相加 (配置文件名, “.bak”), 配置文件名)
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
.如果真 (等于 (写出字节集 (文件号, 读取内容), 假))
    关闭文件 (文件号)
    复制文件 (相加 (配置文件名, “.bak”), 配置文件名)
    删除文件 (相加 (配置文件名, “.bak”))
    返回 (假)
.如果真结束
关闭文件 (文件号)
赋值 (读取内容, {  })
删除文件 (相加 (配置文件名, “.bak”))
返回 (真)

.子程序 回收站_是否有文件, 逻辑型, , 判断回收站内是否有文件，是则返回真，否则返回假。参考了“斩月”的源码。
.参数 回收站位置, 文本型, 参考 可空 数组, 可提供变量接收存在文件的回收站的位置，例如如果C盘的回收站有文件则返回“C:\RECYCLER\”，数组每一个成员为一个位置。该数组会被清空。

.局部变量 DiskLabel, 文本型, , "0", 
.局部变量 times, 整数型, , , 
.局部变量 conformation, SHQUERYRBINFO, , , 

.如果真 (等于 (是否为空 (回收站位置), 假))
    清除数组 (回收站位置)
.如果真结束
GetDiskLists (DiskLabel)
赋值 (conformation.结构大小, 20)
.计次循环首 (取数组成员数 (DiskLabel), times)
    SHQueryRecycleBin (相加 (DiskLabel [times], “RECYCLER\”), conformation)
    .如果真 (大于 (conformation.文件数, 0))
        .如果真 (是否为空 (回收站位置))
            返回 (真)
        .如果真结束
        加入成员 (回收站位置, 相加 (DiskLabel [times], “RECYCLER\”))
    .如果真结束
    
.计次循环尾 ()

返回 (不等于 (取数组成员数 (回收站位置), 0))

.子程序 回收站_清空回收站, 空白型, 公开, 清空回收站内的所有文件，处于安全考虑，清空前会询问用户是否清空。参考了“斩月”的源码。
.参数 根目录, 文本型, 可空, 例如要清空D盘下的回收站就提供参数：“D:\”，如果被省略，默认为空文本，即清空所有回收站。

.局部变量 数组, 文本型, , "1", 
.局部变量 逻辑值, 逻辑型, , , 


.如果 (是否为空 (根目录))
    赋值 (逻辑值, 回收站_是否有文件 ())
.否则
    加入成员 (数组, 根目录)
    赋值 (逻辑值, 回收站_是否有文件 (数组))
.如果结束
 ' 本源码来自易语言资源网(www.wodesoft.com)

.如果真 (等于 (逻辑值, 假))
    输出调试文本 (“回收站内无文件！无需清空！”)
.如果真结束

SHEmptyRecycleBin (0, 根目录, 0) ' 处于安全考虑，请将第三个参数保留为0


.子程序 目录_浏览文件夹, 文本型, 公开, 打开一个对话框，浏览系统中存在的所有文件夹，返回被选定文件夹的路径名，如果未选中任何文件夹，则返回空文本。
.参数 句柄, 空白型, , 窗口的句柄（HWND），由“取窗口句柄”方法返回。
.参数 标题, 文本型, , 本参数提供显示在对话框上部的标题文本。

返回 (GetTheFolder (句柄, 标题, “”))

.子程序 回收站_删除到回收站, 逻辑型, 公开, 可将文件或目录删除至回收站。参考了“美女勿进”的代码。成功返回真，失败返回假。
.参数 文件或目录名, 文本型, , 
.参数 删除选项, 整数型, 可空, 0.#无任何显示；4.#不显示进度；16.#不询问删除；1024.#不提示错误。如果被省略，默认值为0。如果要选择两项，就用“位或”将两个选项连接，例如：既不询问删除，也不提示错误则就提供参数：位或(16,1024)。

.局部变量 类型, SHFILEOPSTRUCT, , , 

赋值 (类型.wFunc, 3)
赋值 (类型.pFrom, 相加 (文本_到字节集 (文件或目录名), { 0, 0 }))
.如果 (等于 (删除选项, 0))
    赋值 (类型.fFlags, 1108) ' 位或 (64, 4, 1024, 16)
.否则
    赋值 (类型.fFlags, 位或 (64, 删除选项))
.如果结束
返回 (等于 (SHFileOperation (类型), 0))

.子程序 文本_到字节集, 字节集, , 
.参数 文本, 文本型, , 

返回 (指针到字节集 (_取指针_文本型 (文本), 文本_取长度 (文本)))

.子程序 _取指针_文本型, 整数型, , 
.参数 文本, 文本型, , 

返回 (lstrcpyn_文本型 (文本, 文本, 0))

.窗口程序集 窗口程序集1, , , 

.程序集 程序集_不公开, , , 

.子程序 托盘事件处理, 整数型, , 
.参数 hwnd, 空白型, , 
.参数 msg, 空白型, , 
.参数 wp, 空白型, , 
.参数 lp, 空白型, , 

.如果真 (等于 (msg, 2000))
    .判断开始 (等于 (lp, 513))
        
        主窗口信息.弹出托盘菜单 (.主窗口, 主窗口信息.左键菜单)
    .判断 (等于 (lp, 516))
        主窗口信息.弹出托盘菜单 (.主窗口, 主窗口信息.右键菜单)
    .判断 (等于 (lp, 512))
        
    .判断 (等于 (lp, 515))
        CallWindowProc (主窗口信息.双击托盘, 0, 0, 0, 0)
    .默认
        
    .判断结束
    
.如果真结束


.判断开始 (等于 (msg, MyMsg))
    Shell_NotifyIconA (2, 结构)
    赋值 (结构.uFlags, 位或 (4, 2, 1))
    Shell_NotifyIconA (0, 结构)
.判断 (等于 (msg, 2))
    Shell_NotifyIconA (2, 结构)
.默认
    
.判断结束




返回 (CallWindowProc (默认窗口, hwnd, msg, wp, lp))


.子程序 十进制到十六进制, 文本型, , 
.参数 十进制数, 长整数型, , 

.局部变量 结果, 文本型, , , 
.局部变量 余数, 文本型, , , 

.判断循环首 (大于 (十进制数, 15))
    赋值 (余数, 到文本 (求余数 (十进制数, 16)))
    赋值 (余数, 取文本中间 (“0123456789ABCDEF”, 相加 (到数值 (余数), 1), 1))
    赋值 (结果, 相加 (余数, 结果))
    赋值 (十进制数, 取整 (相除 (十进制数, 16)))
.判断循环尾 ()
赋值 (余数, 取文本中间 (“0123456789ABCDEF”, 相加 (十进制数, 1), 1))
赋值 (结果, 相加 (余数, 结果))
返回 (结果)

.子程序 十六进制到十进制, 文本型, , 
.参数 十六进制文本, 文本型, , 

.局部变量 中间文本, 文本型, , , 
.局部变量 结果, 长整数型, , , 
.局部变量 容器1, 整数型, , , 

.变量循环首 (1, 取文本长度 (十六进制文本), 1, 容器1)
    赋值 (中间文本, 取文本中间 (十六进制文本, 容器1, 1))
    赋值 (结果, 相加 (相乘 (相减 (寻找文本 (“0123456789ABCDEF”, 中间文本, , 真), 1), 求次方 (16, 相减 (取文本长度 (十六进制文本), 容器1))), 结果))
.变量循环尾 ()
返回 (到文本 (结果))


.子程序 GetDiskLists, 整数型, , Return the number of disks if it's succeed,or return 0.
.参数 Lists, 文本型, 参考 可空 数组, Please give me a variable to take over the lists.

.局部变量 Bin, 字节集, , , 
.局部变量 Long, 整数型, , , 
.局部变量 temporariness, 字节集, , , 
.局部变量 times, 整数型, , , 

清除数组 (Lists)
赋值 (Long, GetLogicalDriveStrings (0, Bin))
.如果真 (等于 (Long, 0))
    返回 (0)
.如果真结束
赋值 (Bin, GetBlankBin (Long))
.如果真 (等于 (GetLogicalDriveStrings (Long, Bin), 0))
    返回 (0)
.如果真结束
.变量循环首 (1, 相减 (Long, 2), 4, times)
    加入成员 (Lists, BinToText (BinMid (Bin, times, 3)))
.变量循环尾 ()
返回 (取数组成员数 (Lists))


.子程序 BinMid, 字节集, , 
.参数 Bin, 字节集, , 
.参数 First, 整数型, , 
.参数 Num, 整数型, , 

.局部变量 len, 整数型, , , 

赋值 (len, BinLen (Bin))
.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
.如果真 (小于 (First, 1))
    赋值 (First, 1)
.如果真结束
.如果真 (或者 (大于 (First, len), 小于 (Num, 1)))
    返回 ({  })
.如果真结束
.如果真 (大于 (相减 (相加 (Num, First), 1), len))
    赋值 (Num, 相加 (相减 (len, First), 1))
.如果真结束
返回 (指针到字节集 (相减 (相加 (_取指针_字节集 (Bin), First), 1), Num))


.子程序 BinLen, 整数型, , 
.参数 Bin, 字节集, , 

.局部变量 ret, 整数型, , , 

.如果真 (等于 (Bin, {  }))
    返回 (0)
.如果真结束
RtlMoveMemory (ret, 相减 (_取指针_字节集 (Bin), 4), 4)
返回 (ret)


.子程序 BinToText, 文本型, , 
.参数 Bin, 字节集, , 

.局部变量 temp, 字节集, , , 

赋值 (temp, 相加 (Bin, { 0 }))
返回 (指针到文本 (_取指针_字节集 (temp)))

.子程序 _取指针_字节集, 整数型, , 
.参数 字节集, 字节集, , 

返回 (lstrcpyn (字节集, 字节集, 0))

.子程序 GetBlankBin, 字节集, , 
.参数 len, 整数型, , 

.局部变量 address, 整数型, , , 
.局部变量 ret, 字节集, , , 

.如果真 (小于 (len, 1))
    返回 ({  })
.如果真结束
赋值 (address, LocalAlloc (64, len))
.如果真 (等于 (address, 0))
    返回 ({  })
.如果真结束
赋值 (ret, 指针到字节集 (address, len))
LocalFree (address)
返回 (ret)

.子程序 GetTheFolder, 文本型, , 
.参数 hWnd, 整数型, , 
.参数 Title, 文本型, , 
.参数 StartDir, 文本型, , 

.局部变量 Return, 文本型, , , 
.局部变量 lpIDList, 整数型, , , 
.局部变量 szTitle, 文本型, , , 
.局部变量 sBuffer, 文本型, , , 
.局部变量 tBrowseInfo, BrowseInfo, , , 

赋值 (m_CurrentDirectory, 相加 (StartDir, 字符 (0)))
赋值 (szTitle, Title)
赋值 (tBrowseInfo.hWndOwner, hWnd)
赋值 (tBrowseInfo.lpszTitle, lstrcat (szTitle, “”))
赋值 (tBrowseInfo.ulFlags, 相加 (#BIF_RETURNONLYFSDIRS, #BIF_DONTGOBELOWDOMAIN, #BIF_STATUSTEXT))
赋值 (tBrowseInfo.lpfnCallback, 到数值 (&BrowseCallbackProc))
赋值 (lpIDList, SHBrowseForFolder (tBrowseInfo))
.判断开始 (不等于 (lpIDList, 0))
    赋值 (sBuffer, 取空白文本 (#MAX_PATH))
    SHGetPathFromIDList (lpIDList, sBuffer)
    赋值 (Return, sBuffer)
.默认
    赋值 (Return, “”)
.判断结束
返回 (Return)


.子程序 BrowseCallbackProc, 整数型, , 
.参数 hWnd, 整数型, , 
.参数 uMsg, 整数型, , 
.参数 lp, 整数型, , 
.参数 pData, 整数型, , 

.局部变量 返回数据, 整数型, , , 
.局部变量 lpIDList, 整数型, , , 
.局部变量 ret, 整数型, , , 
.局部变量 sBuffer, 文本型, , , 

.判断开始 (等于 (uMsg, #BFFM_INITIALIZED))
    SendMessage (hWnd, #BFFM_SETSELECTION, 1, m_CurrentDirectory)
.判断 (等于 (uMsg, #BFFM_SELCHANGED))
    赋值 (sBuffer, 取空白文本 (#MAX_PATH))
    赋值 (ret, SHGetPathFromIDList (lp, sBuffer))
    .判断开始 (等于 (ret, 1))
        SendMessage (hWnd, #BFFM_SETSTATUSTEXT, 0, sBuffer)
    .默认
        
    .判断结束
    
.默认
    
.判断结束
赋值 (返回数据, 0)
返回 (返回数据)



 ' 不属于任何一个程序集、类模块的函数：
