 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 509
    高度 = 359
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 6
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “枫则表达式演示程序”
    帮助文件名 = “”



.常量 错误信号_法则未定义, "“#错误:运算法则未定义。”", 隐藏, 
.常量 错误信号_无效的运算符或缺少操作数, "“#错误:无效的运算符或缺少操作数。”", 隐藏, 
.常量 错误信号_缺少运算符, "“#错误:缺少运算符。”", 隐藏, 
.常量 错误信号_小数点用法错误, "“#错误:小数点用法错误。”", 隐藏, 
.常量 错误信号_缺少右括号, "“#错误:缺少右括号。”", 隐藏, 
.常量 错误信号_多余的右括号, "“#错误:多余的右括号。”", 隐藏, 
.常量 错误信号_缺少结尾文本操作符, "“#错误:缺少结尾文本操作符。”", 隐藏, 
.常量 错误信号_多余的文本操作符, "“#错误:多余的结尾文本操作符。”", 隐藏, 
.常量 声明_运算错误, "“#”", 隐藏, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 1 2 扩展界面支持库一



 ' 所需要的模块
 ' 枫则表达式 D:\E语言学习之旅\我的个人作品\模块\模块原代码\枫则表达式\枫则表达式FZ08版.ec


数据类型 运算法则, 公开, 枫则表达式专用的数据类型，用于定义枫则表达式的运算符和相应的宿主函数。
    .成员 子集, 子集数据, , "1", 子集内的每个元素具有相同的优先级，运算法则数组下标越小说明其子集内元素的优先级越高。

数据类型 子集数据, 公开, 
    .成员 运算符, 文本型, , , 在表达式中用来形式的表达功能的符号，最好不要包含数字，大小写等价，空格无效。
    .成员 函数指针, 子程序指针, , , 用来处理运算符对应的功能的宿主函数的指针。（双目运算符的函数有两个文本参数，第一个是被操作数，第二个则是操作数，单目运算符的函数有一个文本参数；返回运算结果的方法是调用模块中的 返回值() 函数，并传递结果。）


.窗口程序集 窗口程序集1, , , 

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 当前运算位置, 空白型, , , 

赋值 (.内容, 枫则表达式 (.内容))
赋值 (.内容, 格式化表达式 (.内容))
赋值 (当前运算位置, 取当前运算位置 ())
.如果 (大于 (当前运算位置, 0))
    信息框 (相加 (“表达式运算到第 ”, 到文本 (相减 (当前运算位置, 1)), “ 个字符 '”, 取文本中间 (.内容, 相减 (当前运算位置, 1), 1), “' 位置处发生异常！”), #警告图标, )
    赋值 (.起始选择位置, 相减 (取字数 (取文本左边 (.内容, 当前运算位置)), 选择 (大于 (当前运算位置, 取文本长度 (.内容)), 0, 1)))
     ' 表达式编辑框.起始选择位置 ＝ 取当前运算位置 () － 1  这句是错误的，因为编辑框是根据字数计算起始选择位置的。
.否则
    赋值 (.起始选择位置, 取文本长度 (.内容))
.如果结束
获取焦点 ()

.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 双目, 运算法则, , "6", 
.局部变量 左单目, 运算法则, , , 
.局部变量 右单目, 运算法则, , , 

 ' --------定义双目法则--------
重定义数组 (双目 [1].子集, 假, 1)
赋值 (双目 [1].子集 [1].运算符, “^”)
赋值 (双目 [1].子集 [1].函数指针, &次方_)
重定义数组 (双目 [2].子集, 假, 1)
赋值 (双目 [2].子集 [1].运算符, “$”)
赋值 (双目 [2].子集 [1].函数指针, &双目_文本合并)
重定义数组 (双目 [3].子集, 假, 2)
赋值 (双目 [3].子集 [1].运算符, “*”)
赋值 (双目 [3].子集 [1].函数指针, &乘_)
赋值 (双目 [3].子集 [2].运算符, “/”)
赋值 (双目 [3].子集 [2].函数指针, &除_)
重定义数组 (双目 [4].子集, 假, 1)
赋值 (双目 [4].子集 [1].运算符, “\”)
赋值 (双目 [4].子集 [1].函数指针, &整除_)
重定义数组 (双目 [5].子集, 假, 1)
赋值 (双目 [5].子集 [1].运算符, “%”)
赋值 (双目 [5].子集 [1].函数指针, &求余_)
重定义数组 (双目 [6].子集, 假, 3)
赋值 (双目 [6].子集 [1].运算符, “+”)
赋值 (双目 [6].子集 [1].函数指针, &加_)
赋值 (双目 [6].子集 [2].运算符, “-”)
赋值 (双目 [6].子集 [2].函数指针, &减_)
 ' --------定义左单目法则--------
重定义数组 (左单目.子集, 假, 3)
赋值 (左单目.子集 [1].运算符, “-”)
赋值 (左单目.子集 [1].函数指针, &负)
赋值 (左单目.子集 [2].运算符, “+”)
赋值 (左单目.子集 [2].函数指针, &正)
赋值 (左单目.子集 [3].运算符, “MSG”)
赋值 (左单目.子集 [3].函数指针, &左单目_信息框)
 ' --------定义右单目法则--------
重定义数组 (右单目.子集, 假, 2)
赋值 (右单目.子集 [1].运算符, “++”)
赋值 (右单目.子集 [1].函数指针, &右单目_递增)
赋值 (右单目.子集 [2].运算符, “--”)
赋值 (右单目.子集 [2].函数指针, &右单目_递减)
 ' --------最后提交法则--------
定义法则 (双目, 左单目, 右单目) ' 可以由你自己的需要定制各种各样的运算符和对应的数据处理机制！
返回 ()

 ' 枫则表达式模块中为你默认提供一套标准运算法则，可以适用于大多数的软件需要，非特殊情况下，你可以直接或稍做修改后引用。下面给出直接引用标准运算法则的代码：
取标准双目 (双目) ' 变量 双目 用来取回标准双目运算法则
定义法则 (双目, 取标准左单目 (), ) ' 标准运算法则中没有定义标准右单目运算符
 ' 或者可以不传递双目，直接
定义法则 (取标准左单目 (), )

.子程序 _单选框1_被单击, 空白型, , 
右单目嵌套 (假)

.子程序 _单选框2_被单击, 空白型, , 
右单目嵌套 (真)

.程序集 宿主函数程序集, , , 

.子程序 双目_文本合并, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.如果真 (近似等于 (被操作数, “{”))
    赋值 (被操作数, 取文本中间 (被操作数, 2, 相减 (取文本长度 (被操作数), 2)))
.如果真结束
.如果真 (近似等于 (操作数, “{”))
    赋值 (操作数, 取文本中间 (操作数, 2, 相减 (取文本长度 (操作数), 2)))
.如果真结束
返回值 (相加 (“{”, 被操作数, 操作数, “}”))

.子程序 左单目_信息框, 空白型, , 
.参数 被操作数, 文本型, , 

信息框 (选择 (近似等于 (被操作数, “{”), 取文本中间 (被操作数, 2, 相减 (取文本长度 (被操作数), 2)), 被操作数), #信息图标, )
返回值 (被操作数)

.子程序 右单目_递增, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    置当前运算位置 (取运算前位置 ())
    异常处理 (“#错误:递增运算的被操作数必须为数值。”)
.默认
    返回值 (到文本 (相加 (到数值 (被操作数), 1)))
.判断结束


.子程序 右单目_递减, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    置当前运算位置 (取运算前位置 ())
    异常处理 (“#错误:递减运算的被操作数必须为数值。”)
.默认
    返回值 (到文本 (相减 (到数值 (被操作数), 1)))
.判断结束


.程序集 标准双目库, , , 

.子程序 次方_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:求次方运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (求次方 (到数值 (被操作数), 到整数 (操作数))))
.判断结束


.子程序 整除_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:整除运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:整除运算的除数不能为0。”)
.默认
    返回值 (到文本 (整除 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 求余_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:求余运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:求余运算的除数不能为0。”)
.默认
    返回值 (到文本 (求余数 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 加_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:加法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相加 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 减_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:减法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相减 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 乘_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:乘法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.默认
    返回值 (到文本 (相乘 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.子程序 除_, 空白型, , 
.参数 被操作数, 文本型, , 
.参数 操作数, 文本型, , 

.判断开始 (或者 (近似等于 (被操作数, “{”), 近似等于 (操作数, “{”)))
    .如果真 (近似等于 (被操作数, “{”))
        置当前运算位置 (取运算前位置 ())
    .如果真结束
    异常处理 (相加 (“#错误:除法运算的”, 选择 (近似等于 (被操作数, “{”), “被”, “”), “操作数必须为数值。”))
.判断 (等于 (到数值 (操作数), 0))
    异常处理 (“#错误:除法运算的除数不能为0。”)
.默认
    返回值 (到文本 (相除 (到数值 (被操作数), 到数值 (操作数))))
.判断结束


.程序集 标准单目库, , , 

.子程序 负, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    异常处理 (“#错误:负运算的被操作数必须为数值。”)
.默认
    返回值 (到文本 (负 (到数值 (被操作数))))
.判断结束


.子程序 正, 空白型, , 
.参数 被操作数, 文本型, , 

.判断开始 (近似等于 (被操作数, “{”))
    异常处理 (“#错误:正运算的被操作数必须为数值。”)
.默认
    返回值 (被操作数)
.判断结束


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 定义法则, 空白型, , 定义枫则表达式的运算符和对应的宿主函数，如果不预先定义法则就无法进行运算。
.参数 双目, 运算法则, 可空 数组, 形式为： 被操作数+双目运算符+操作数  例如： 6*2  将对6和2进行运算并返回结果。（如果不传递参数，则将直接引用内置的标准双目运算法则。）
.参数 左单目, 运算法则, 可空, 形式为： 左单目运算符+被操作数  例如： -8 将对8进行运算并返回结果。（如果不传递参数，则将直接引用内置的标准双目运算法则。）
.参数 右单目, 运算法则, 可空, 形式为： 被操作数+右单目运算符  例如： 8++ 将对8进行运算并返回结果。



.子程序 枫则表达式, 文本型, , 运算表达式并返回运算结果，必须要预先定义运算法则才能进行运算。
.参数 表达式, 文本型, , 需要运算的表达式。（注意：表达式中除被文本操作符包裹的文本外，其它地方的空格都将在预处理时被清除。）
.参数 不自动格式化, 逻辑型, 可空, 是否自动对表达式进行格式化，如果有把握保证表达式是标准的，就可以传递真。



.子程序 返回值, 空白型, , 在宿主函数最后，用来返回运算结果。
.参数 结果, 文本型, , 



.子程序 取标准双目, 空白型, , 默认提供的一套运算法则，可以适用于大多数的软件需要。（标准运算符：“^” 次方，“*” 乘号，“/” 除号，“\” 整除，“%” 求余，“+” 加号。“-” 减号）
.参数 法则, 运算法则, 参考 数组, 



.子程序 取标准左单目, 运算法则, , 默认提供的一套运算法则，可以适用于大多数的软件需要。（标准运算符：“+” 正号，“-” 负号）


.子程序 右单目嵌套, 空白型, , 设定右单目运算符是否支持多层嵌套，默认为不支持。
.参数 是否支持, 逻辑型, 可空, 



.子程序 格式化表达式, 文本型, , 将表达式中除被文本操作符包裹的文本外，其它所有的字符都将过滤掉空格，并到半角、小写（可选）。
.参数 表达式, 文本型, , 需要格式化的表达式。
.参数 大小写转换, 整数型, 可空, 本参数指定大小写的转换方式：0代表到大写，1代表到小写，否则不做大小写处理，默认为0到大写。



.子程序 异常处理, 空白型, , 当宿主函数处理数据时发生异常，就需要调用本函数来提交具体的错误报告，并立即终止运算。
.参数 错误报告, 文本型, , 



.子程序 取当前表达式, 文本型, , 返回当前的表达式，用于在宿主函数运算异常时，生成具体的错误报告。


.子程序 取当前运算位置, 整数型, , 返回当前表达式的运算位置，当值为0时代表未计算过任何表达式，当值为-1时代表表达式运算正确，否则表示表达式正在运算途中或运算错误。


.子程序 取字数, 整数型, , 返回一段文本中的字数，包括空格。
.参数 文本, 文本型, , 



.子程序 取运算前位置, 整数型, , 返回当前运算符运算前的位置。


.子程序 置当前运算位置, 空白型, , 设置当前运算指针的位置，通常是在异常处理的时候使用。
.参数 位置, 整数型, , 




 ' 不属于任何一个程序集、类模块的函数：
