 ' 文件类型：Windows窗口程序

 ' 程序名称：正则替换例程
 ' 程序描述：演示如何使用 正则表达式.替换
 ' 程序作者：HY
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 260
    高度 = 123
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “正则替换 示例程序”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 2 系统核心支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 1 2 正则表达式支持库
 ' iext2 AF6AD80AA4244A59AFB3D83ECF5173CC 1 1 扩展界面支持库二





.窗口程序集 窗口程序集1, , , 

.程序集变量 HTML头, 文本型, , , 
.程序集变量 HTML尾, 文本型, , , 
.程序集变量 表达式, 未知类型0x20001, , , 
.程序集变量 结果, 逻辑型, , , 
.程序集变量 表达式文本, 文本型, , , 
.程序集变量 格式文本, 文本型, , , 
.程序集变量 HTML转义表达式, 未知类型0x20001, , , 
.程序集变量 HTML转义格式文本, 文本型, , , 
.子程序 _转换按钮_被单击, 空白型, , 
.局部变量 文本, 文本型, , , 
.局部变量 HTML文件名, 文本型, , , 
.局部变量 时间, 整数型, , , 

.如果真 (等于 (打开 (), 假))
    返回 ()
.如果真结束
赋值 (HTML文件名, 相加 (.文件名, “.html”))
赋值 (文本, 取字节集数据 (读入文件 (.文件名), #文本型)) ' 读入文件内容

赋值 (时间, 取启动时间 ())
赋值 (文本, HTML转义表达式.未知支持库函数_15 (文本, HTML转义格式文本, 1, , 真, 真)) ' 处理 “<”和“>”
赋值 (文本, 表达式.未知支持库函数_15 (文本, 格式文本, 1, , 真, 真)) ' 通过正则替换，转换为高亮的html代码
赋值 (时间, 相减 (取启动时间 (), 时间))

写到文件 (HTML文件名, 到字节集 (HTML头), 到字节集 (文本), 到字节集 (HTML尾)) ' 把替换后的代码写入文件
.如果真 (等于 (信息框 (相加 (“转换完毕！”, #换行符, #换行符, “文件大小：”, 到文本 (取文件尺寸 (.文件名)), “字节； 耗时：”, 到文本 (时间), “毫秒。”, #换行符, #换行符, “是否打开转换后的文件：”, #换行符, HTML文件名, “？”), 相加 (#询问图标, #是否钮), “提示”), #是钮))
    运行 (相加 (“explorer ”, HTML文件名), 假, ) ' 打开转换后的html文件
.如果真结束


.子程序 __启动窗口_创建完毕, 空白型, , 该正则表达式仅仅适用与易语言4.0版格式的文本代码
赋值 (HTML头, 相加 (“<HTML>”, #换行符, “<HEAD>”, #换行符, “<TITLE>易语言程序生成的HTML文件</TITLE>”, #换行符, “<META HTTP-EQUIV=”, #引号, “Content-Type”, #引号, “CONTENT=”, #引号, “text/html;charset=gb2312”, #引号, “>”, #换行符, “</HEAD>”, #换行符, “<BODY LINK=”, #引号, “#0000ff”, #引号, “ VLINK=”, #引号, “#800080”, #引号, “ BGCOLOR=”, #引号, “#ffffff”, #引号, “>”, #换行符, “<P> </P>”, #换行符, “<PRE>”))
赋值 (HTML尾, 相加 (“</PRE>”, #换行符, “</BODY>”, #换行符, #换行符)) ' 一个HTML文件框架

 ' 下面的正则表达式及格式文本是本程序的关键。这里写成多行仅仅为了清晰。
 ' 关于正则表达式请参阅相关资料。
赋值 (表达式文本, “(^ *\.(?:如果(?:真)?|判断(?:(?:开始)|(?:循环(?:首|尾)))?|循环判断(?:首|尾)|计次循环(?:首|尾)|变量循环(?:首|尾)|到循环尾|跳出循环|返回|结束)) |”) ' 流程控制类关键字  索引1
赋值 (表达式文本, 相加 (表达式文本, “(^ *\.(?:如果(?:真)?结束|否则|默认|判断结束)$)|”)) ' 流程控制类辅助关键字  索引2
赋值 (表达式文本, 相加 (表达式文本, “('\s[^\n]*)|”)) ' 备注  索引3
赋值 (表达式文本, 相加 (表达式文本, “(^\.(?:子程序 |程序集 |支持库)[^\n]*$)|”)) ' 程序集和子程序名  索引4
赋值 (表达式文本, 相加 (表达式文本, “(^\.(?:程序集|全局|局部)变量[^\n]*)|(^\.参数[^\n]*)”)) ' 变量和参数定义  索引5,6

赋值 (格式文本, “(?1<font color = blue>$&</font>)”) ' 索引1
赋值 (格式文本, 相加 (格式文本, “(?2<font color = blue><I>$&</I></font>)”)) ' 索引2
赋值 (格式文本, 相加 (格式文本, “(?3<font color = green><I>$&</I></font>)”)) ' 索引3
赋值 (格式文本, 相加 (格式文本, “(?4<B><font size = 2>$&</font></B>)”)) ' 索引4
赋值 (格式文本, 相加 (格式文本, “(?5<font color = #0A8BA7>$&</font>)(?6<font color = #0A8BA7>$&</font>)”)) ' 索引5,6

赋值 (结果, 表达式.未知支持库函数_3 (表达式文本, )) ' 创建正则表达式对象
检查 (结果)

赋值 (结果, HTML转义表达式.未知支持库函数_3 (“(<)|(>)”, )) ' HTML标记“<”和“>”的特殊处理
检查 (结果)
赋值 (HTML转义格式文本, “(?1&lt;)(?2&gt;)”)


 ' 不属于任何一个程序集、类模块的函数：
