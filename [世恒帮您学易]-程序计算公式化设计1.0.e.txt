 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 567
    高度 = 402
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “[世恒帮您学易]-程序计算公式化设计1.0”
    帮助文件名 = “”



.图片 mdb, " ' 已保存到：D:\易语言学习\Data\[世恒帮您学易]-程序计算公式化设计1.0.e\mdb", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 1 2 高级表格支持库
 ' dp1 4BB4003860154917BC7D8230BF4FA58A 1 0 数据操作支持库一




数据类型 符号链表, , 
    .成员 符号类型, 文本型, , , 
    .成员 符号值, 文本型, , , 
    .成员 匹配括号的位置, 整数型, , , 

数据类型 语法二叉树, , 
    .成员 符号类型, 文本型, , , 
    .成员 首地址, 整数型, , , 
    .成员 尾地址, 整数型, , , 
    .成员 父地址, 整数型, , , 


.窗口程序集 表格变量计算, , , 

.程序集变量 变量, 整数型, , "0", 
.程序集变量 原始, 文本型, , , 
.程序集变量 历史, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
.局部变量 变量, 整数型, , , 
.局部变量 变量1, 整数型, , , 
.局部变量 临时, 文本型, , , 

 ' 写到文件 (取运行目录 () ＋ “\db.zip”, 压缩数据 (读入文件 (取运行目录 () ＋ “\db.mdb”)))
.如果真 (等于 (文件是否存在 (相加 (取运行目录 (), “\db.mdb”)), 假))
    写到文件 (相加 (取运行目录 (), “\db.mdb”), 未知支持库函数_1 (#mdb))
.如果真结束
 ' 写到文件 (取运行目录 () ＋ “\db.mdb”, 解压数据 (#mdb))
相加 (取运行目录 (), “\db.mdb”).打开MDB数据库 ()
置随机数种子 ()
0.未知支持库函数_9 (0, 1, “变量”)
0.未知支持库函数_9 (1, 1, “变量数值”)
0.未知支持库函数_9 (0, 1, “计算公式”)
0.未知支持库函数_9 (1, 1, “计算结果”)
0.未知支持库函数_9 (2, 1, “确认公式”)
0.未知支持库函数_32 (50)
1.未知支持库函数_32 (80)
2.未知支持库函数_32 (0)
0.未知支持库函数_32 (150)
1.未知支持库函数_32 (100)
2.未知支持库函数_32 (150)
3.未知支持库函数_32 (0)
0.未知支持库函数_25 (0, ., ., 1)
 ' 高级表格1.置对齐方式 (1, 2, 高级表格1.行数, 2, 1)
读取公式 ()
读取变量 ()
_按钮2_被单击 ()


.子程序 生成数据, 空白型, , 
.局部变量 变量1, 整数型, , , 
.局部变量 临时, 文本型, , , 

“delete from var”.执行 ()
“delete from GS”.执行 ()
.计次循环首 (15, )
    赋值 (到文本 (取随机数 (1, 100)))
    相加 (“insert into var ([name],[word],[bak]) values ('”, “a”, 到文本 (), “',”, , “,'”, “a”, 到文本 (), “=”, , “')”).执行 ()
.计次循环尾 ()
.计次循环首 (12, 变量1)
     ' 输出调试文本 (“insert into var ([name],[word],[bak]) values ('” ＋ “a” ＋ 到文本 (变量1) ＋ “',” ＋ 临时 ＋ “,'” ＋ “a” ＋ 到文本 (变量1) ＋ “=” ＋ 临时 ＋ “')”)
    相加 (“insert into GS ([GS]) values ('”, “[a”, 到文本 (取随机数 (1, 相减 (., 1))), “]”, 多项选择 (取随机数 (1, 4), “+”, “-”, “*”, “/”), “[a”, 到文本 (取随机数 (1, 15)), “]”, 多项选择 (取随机数 (1, 4), “+”, “-”, “*”, “/”), “[a”, 到文本 (取随机数 (1, 15)), “]”, “')”).执行 ()
     ' 输出调试文本 (“insert into GS ([GS]) values ('” ＋ “[a” ＋ 到文本 (取随机数 (1, 高级表格1.行数 － 1)) ＋ “]” ＋ “+[a” ＋ 到文本 (取随机数 (1, 10)) ＋ “]” ＋ “+[a” ＋ 到文本 (取随机数 (1, 10)) ＋ “]” ＋ “')”)
.计次循环尾 ()


.子程序 返回运算式, 文本型, , 此处需取组件名称
.参数 传来文本, 文本型, 参考, 

.局部变量 中间值, 文本型, , , 
.局部变量 i, 空白型, , , 
.局部变量 j, 空白型, , , 
.局部变量 k, 空白型, , , 
.局部变量 左边, 空白型, , , 
.局部变量 右边, 空白型, , , 
.局部变量 临时文本, 文本型, , "0", 
.局部变量 实际变量名, 文本型, , "0", 

.计次循环首 (., i)
    加入成员 (临时文本, 到文本 (i.未知支持库函数_10 (0)))
.计次循环尾 ()
.判断循环首 (不等于 (寻找文本 (传来文本, “]”, , 假), -1))
    赋值 (左边, 寻找文本 (传来文本, “[”, , 假))
    赋值 (右边, 寻找文本 (传来文本, “]”, , 假))
    赋值 (中间值, 取文本中间 (传来文本, 左边, 相减 (右边, 左边)))
    赋值 (中间值, 子文本替换 (中间值, “[”, “”, , , 真))
    加入成员 (实际变量名, 中间值)
    赋值 (传来文本, 子文本替换 (传来文本, 相加 (“[”, 中间值, “]”), 中间值, , , 真))
.判断循环尾 ()
.计次循环首 (取数组成员数 (实际变量名), j)
    .计次循环首 (取数组成员数 (临时文本), i)
        赋值 (k, 到数值 (i.未知支持库函数_10 (1)))
        .如果 (等于 (临时文本 [i], 实际变量名 [j]))
            赋值 (传来文本, 子文本替换 (传来文本, 临时文本 [i], 到文本 (k), , , 真))
        .否则
            
        .如果结束
        
    .计次循环尾 ()
.计次循环尾 ()
返回 (传来文本)


.子程序 _高级表格1_结束编辑, 空白型, , 
相加 (“update GS set [GS]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “' where id=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (3))).执行 ()
输出调试文本 (相加 (“update GS set [GS]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “' where id=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (3))))
读取公式 ()
_按钮2_被单击 ()

.子程序 _高级表格1_将被编辑, 空白型, , 
赋值 (历史, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)))


.子程序 _按钮1_被单击, 空白型, , 
生成数据 ()
读取变量 ()
读取公式 ()
_按钮2_被单击 ()

.子程序 读取公式, 空白型, , 
.局部变量 记录集2, 整数型, , , 
.局部变量 变量1, 整数型, , , 

赋值 (记录集2, “select * from GS”.查询 ())
记录集2.到首记录 ()
赋值 (., 1)
.判断循环首 (等于 (记录集2.尾记录后 (), 假))
    .未知支持库函数_38 ()
    赋值 (变量1, 相加 (变量1, 1))
    变量1.未知支持库函数_9 (0, 1, 记录集2.读 (“GS”))
    变量1.未知支持库函数_9 (3, 1, 到文本 (记录集2.读 (“id”)))
    记录集2.到后一记录 ()
.判断循环尾 ()
记录集2.关闭记录集 ()


.子程序 读取变量, 空白型, , 
.局部变量 变量1, 整数型, , , 
.局部变量 记录集1, 整数型, , , 

赋值 (记录集1, “select * from var”.查询 ())
记录集1.到首记录 ()
赋值 (., 1)
.判断循环首 (等于 (记录集1.尾记录后 (), 假))
    .未知支持库函数_38 ()
    赋值 (变量1, 相加 (变量1, 1))
    变量1.未知支持库函数_9 (2, 1, 到文本 (记录集1.读 (“id”)))
    变量1.未知支持库函数_9 (0, 1, 记录集1.读 (“name”))
    变量1.未知支持库函数_9 (1, 1, 记录集1.读 (“word”))
    记录集1.到后一记录 ()
.判断循环尾 ()
记录集1.关闭记录集 ()


.子程序 _高级表格2_将被编辑, 空白型, , 
赋值 (历史, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)))


.子程序 _高级表格2_结束编辑, 空白型, , 
.局部变量 记录集2, 整数型, , , 
.局部变量 改变后, 文本型, , , 

赋值 (记录集2, 相加 (“select id from var where name='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “'”).查询 ())

记录集2.到首记录 ()
.判断循环首 (等于 (记录集2.尾记录后 (), 假))
    .如果真 (不等于 (到文本 (记录集2.读 (“id”)), 到文本 (未知支持库函数_3 ().未知支持库函数_10 (2))))
        信息框 (“变量名不可重复”, #错误图标, )
        到文本 (未知支持库函数_3 ().未知支持库函数_9 (0, #., 历史))
        返回 ()
    .如果真结束
    输出调试文本 (到文本 (记录集2.读 (“id”)))
    记录集2.到后一记录 ()
    
.判断循环尾 ()
记录集2.关闭记录集 ()
相加 (“update var set [name]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “',[word]=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (1)), “,[bak]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (1)), “' where id=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (2))).执行 ()
输出调试文本 (相加 (“update var set [name]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “',[word]=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (1)), “,[bak]='”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (1)), “' where id=”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (2))))

赋值 (记录集2, “select * from GS”.查询 ())
记录集2.到首记录 ()
.判断循环首 (等于 (记录集2.尾记录后 (), 假))
    赋值 (改变后, 子文本替换 (记录集2.读 (“GS”), 相加 (“[”, 历史, “]”), 相加 (“[”, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (0)), “]”), , , 真))
    相加 (“update GS set [GS]='”, 改变后, “' where id=”, 到文本 (记录集2.读 (“id”))).执行 ()
    记录集2.到后一记录 ()
.判断循环尾 ()
记录集2.关闭记录集 ()
读取变量 ()
读取公式 ()
_按钮2_被单击 ()

.子程序 _按钮2_被单击, 空白型, , 
.局部变量 变量1, 整数型, , , 
.局部变量 变量2, 整数型, , , 

读取公式 ()
.计次循环首 (., 变量1)
    赋值 (原始, 到文本 (变量1.未知支持库函数_10 (0)))
    .计次循环首 (., 变量2)
        赋值 (原始, 子文本替换 (原始, 相加 (“[”, 到文本 (变量2.未知支持库函数_10 (0)), “]”), 到文本 (变量2.未知支持库函数_10 (1)), , , 真))
    .计次循环尾 ()
    变量1.未知支持库函数_9 (2, 1, 原始)
     ' 四则运算 ( 原始, 原始)  '算法实现
    四则运算sql (原始, 原始) ' 借助sql
    变量1.未知支持库函数_9 (1, 1, 到文本 (四舍五入 (到数值 (原始), 4)))
.计次循环尾 ()

.程序集 模块, , , 

.子程序 四则运算sql, 空白型, , 
.参数 外部数据库, 外部数据库, , 
.参数 表达式, 文本型, , 
.参数 计算结果, 文本型, 参考, 

.局部变量 记录集2, 整数型, , , 

赋值 (记录集2, 外部数据库.查询 (相加 (“select ”, 表达式)))
外部数据库.到首记录 (记录集2)
赋值 (计算结果, 到文本 (外部数据库.读 (记录集2, 1)))
外部数据库.关闭记录集 (记录集2)

.子程序 四则运算, 逻辑型, 公开, 
.参数 表达式, 文本型, , 
.参数 计算结果, 文本型, 参考, 

.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 表达式长度, 整数型, , , 
.局部变量 表达式字符, 文本型, , , 
.局部变量 操作数文本, 文本型, , , 
.局部变量 小数点个数, 整数型, , , 
.局部变量 符号表, 符号链表, , "0", 
.局部变量 符号表结点, 符号链表, , , 
.局部变量 左括号位置栈, 整数型, , "0", 
.局部变量 计算表, 语法二叉树, , "0", 
.局部变量 计算表结点, 语法二叉树, , , 
.局部变量 分割点, 整数型, , , 
.局部变量 表达式首地址, 整数型, , , 
.局部变量 表达式尾地址, 整数型, , , 
.局部变量 记忆, 整数型, , , 
.局部变量 暂存数值容器, 小数型, , , 
.局部变量 运算符, 文本型, , , 

第一部分：表达式的预处理
.如果真 (等于 (表达式, “”))
    赋值 (计算结果, “表达式为空”)
    返回 (假)
.如果真结束

赋值 (表达式, 删全部空 (表达式))
.如果真 (小于 (取文本长度 (表达式), 3))
    赋值 (计算结果, “无效的表达式”)
    返回 (假)
.如果真结束

赋值 (表达式, 子文本替换 (表达式, “)(”, “)*(”, , , 真))
赋值 (表达式长度, 取文本长度 (表达式))

"第二部分： 由输入的表达式生成四则符号表，并完成表达式检测和括号匹配检测
.计次循环首 (表达式长度, i)
    赋值 (表达式字符, 取文本中间 (表达式, i, 1))
    .判断开始 (或者 (等于 (表达式字符, “.”), 并且 (大于或等于 (取代码 (表达式字符, ), 48), 小于或等于 (取代码 (表达式字符, ), 57))))
        赋值 (操作数文本, 相加 (操作数文本, 表达式字符))
        .如果真 (大于 (i, 1))
            .如果真 (等于 (取文本长度 (操作数文本), 1))
                .如果真 (等于 (符号表 [取数组成员数 (符号表)].符号类型, “右括号”))
                    赋值 (计算结果, “某操作数左边出现右括号，无法判断之间的运算符类型”)
                    返回 (假)
                .如果真结束
                
            .如果真结束
            
        .如果真结束
        
        .如果真 (等于 (i, 表达式长度)) ' 输入的表达式以“操作数”结束的情况
            .计次循环首 (取文本长度 (操作数文本), j)
                .如果真 (等于 (取文本中间 (操作数文本, j, 1), “.”))
                    赋值 (小数点个数, 相加 (小数点个数, 1))
                    .如果真 (大于 (小数点个数, 1))
                        赋值 (计算结果, “发现某操作数中小数点太多”)
                        返回 (假)
                    .如果真结束
                    
                .如果真结束
                
            .计次循环尾 ()
            
            赋值 (符号表结点.符号类型, “操作数”)
            赋值 (符号表结点.符号值, 操作数文本)
            加入成员 (符号表, 符号表结点)
            赋值 (操作数文本, “”)
        .如果真结束
        
    .判断 (或者 (等于 (表达式字符, “+”), 等于 (表达式字符, “-”), 等于 (表达式字符, “*”), 等于 (表达式字符, “/”)))
        检查位置错误：
        .判断开始 (等于 (i, 1))
            赋值 (计算结果, “运算符出现在表达式首位置”)
            返回 (假)
        .判断 (等于 (i, 表达式长度))
            赋值 (计算结果, “运算符出现在表达式尾位置”)
            返回 (假)
        .默认
            
        .判断结束
        
        
        .如果 (等于 (操作数文本, “”)) ' 运算符的左边没有操作数字符时，必须检测其与左边结合性
            左结合性错误规则：
            .如果真 (大于 (i, 1))
                .判断开始 (等于 (符号表 [取数组成员数 (符号表)].符号类型, “左括号”))
                    赋值 (计算结果, “运算符左边出现左括号”)
                    返回 (假)
                .判断 (等于 (符号表 [取数组成员数 (符号表)].符号类型, “运算符”))
                    赋值 (计算结果, “运算符左边出现运算符”)
                    返回 (假)
                .默认
                    
                .判断结束
                
            .如果真结束
            
        .否则
            操作数文本不尾空时，把此操作数加入到符号表尾部
            .计次循环首 (取文本长度 (操作数文本), j) ' 检测操作数
                .如果真 (等于 (取文本中间 (操作数文本, j, 1), “.”))
                    赋值 (小数点个数, 相加 (小数点个数, 1))
                    .如果真 (大于 (小数点个数, 1))
                        赋值 (计算结果, “发现某操作数中小数点太多”)
                        返回 (假)
                    .如果真结束
                    
                .如果真结束
                
            .计次循环尾 ()
            赋值 (符号表结点.符号类型, “操作数”)
            赋值 (符号表结点.符号值, 操作数文本)
            加入成员 (符号表, 符号表结点)
            赋值 (操作数文本, “”)
            
        .如果结束
        
        将此运算符加入到符号表尾部
        赋值 (符号表结点.符号类型, “运算符”)
        赋值 (符号表结点.符号值, 表达式字符)
        加入成员 (符号表, 符号表结点)
        
    .判断 (等于 (表达式字符, “(”))
        .如果 (等于 (操作数文本, “”))
            左括号错误检测规则：
            .判断开始 (等于 (i, 表达式长度))
                赋值 (计算结果, “左括号出现在表达式尾位置”)
                返回 (假)
            .默认
                
            .判断结束
            
        .否则
            操作数文本不为空时，把此操作数文本结点加入到符号表尾部，再加入一个乘号家电，然后再把此左括号结点加入到符号表尾部
            .计次循环首 (取文本长度 (操作数文本), j) ' 检测操作数文本
                .如果真 (等于 (取文本中间 (操作数文本, j, 1), “.”))
                    赋值 (小数点个数, 相加 (小数点个数, 1))
                    .如果真 (大于 (小数点个数, 1))
                        赋值 (计算结果, “06发现某操作数中小数点太多”)
                        返回 (假)
                    .如果真结束
                    
                .如果真结束
                
            .计次循环尾 ()
            赋值 (符号表结点.符号类型, “操作数”)
            赋值 (符号表结点.符号值, 操作数文本)
            加入成员 (符号表, 符号表结点)
            赋值 (操作数文本, “”)
            
            赋值 (符号表结点.符号类型, “运算符”)
            赋值 (符号表结点.符号值, “*”)
            加入成员 (符号表, 符号表结点)
            
        .如果结束
        
        把此结点加入到符号表尾部
        赋值 (符号表结点.符号类型, “左括号”)
        赋值 (符号表结点.符号值, “(”)
        加入成员 (符号表, 符号表结点)
        加入成员 (左括号位置栈, 取数组成员数 (符号表)) ' 当遇到右括号时，栈顶的值就是与此右括号匹配的左括号再符号表中的位置
        
    .判断 (等于 (表达式字符, “)”))
        右括号的错误检测规则：
        
        2.左边出现了运算符
        3.左边出现了左括号形成了空括号
        .如果 (等于 (操作数文本, “”))
            .判断开始 (等于 (i, 1))
                赋值 (计算结果, “右括号出现在表达式首位置”)
                返回 (假)
            .判断 (大于 (i, 1)) ' 检测左结合性
                .如果真 (等于 (符号表 [取数组成员数 (符号表)].符号类型, “运算符”))
                    赋值 (计算结果, “右括号左边出现了运算符”)
                    返回 (假)
                .如果真结束
                
                .如果真 (等于 (符号表 [取数组成员数 (符号表)].符号类型, “左括号”))
                    赋值 (计算结果, “右括号左边出现左括号，形成空括号”)
                    返回 (假)
                .如果真结束
                
            .默认
                
            .判断结束
            
        .否则
            
            .计次循环首 (取文本长度 (操作数文本), j)
                .如果真 (等于 (取文本中间 (操作数文本, j, 1), “.”))
                    赋值 (小数点个数, 相加 (小数点个数, 1))
                    .如果真 (大于 (小数点个数, 1))
                        赋值 (计算结果, “发现某操作数中小数点太多”)
                        返回 (假)
                    .如果真结束
                    
                .如果真结束
                
            .计次循环尾 ()
            赋值 (符号表结点.符号类型, “操作数”)
            赋值 (符号表结点.符号值, 操作数文本)
            加入成员 (符号表, 符号表结点)
            赋值 (操作数文本, “”)
            
        .如果结束
        
        赋值 (符号表结点.符号类型, “右括号”)
        赋值 (符号表结点.符号值, “)”)
        加入成员 (符号表, 符号表结点)
        .如果 (等于 (取数组成员数 (左括号位置栈), 0))
            赋值 (计算结果, “表达式文本中多出右括号！”)
            返回 (假)
        .否则
            填写括号匹配的位置数据
            赋值 (符号表 [取数组成员数 (符号表)].匹配括号的位置, 左括号位置栈 [取数组成员数 (左括号位置栈)]) ' 括号表[右括号的位置]=左括号的位置
            赋值 (符号表 [左括号位置栈] [取数组成员数 (左括号位置栈)], 匹配括号的位置, 取数组成员数 (符号表)) ' 括号表[左括号的位置]=右括号的位置
            删除成员 (左括号位置栈, 取数组成员数 (左括号位置栈), 1) ' 在括号表中记录完括号匹配情况后，删除成员[左括号中最后一个成员]，用以检测括号的匹配，相当于“出栈”
            
        .如果结束
        
        遇到右括号时，左括号中最后一个成员“左括号 [取数组成员数 (左括号)]”就是与他匹配的左括号在检测表中的位置！
    .默认
        
        赋值 (计算结果, “表达式中有错误的符号”)
        返回 (假)
    .判断结束
    
.计次循环尾 ()

.如果真 (不等于 (取数组成员数 (左括号位置栈), 0)) ' "栈“不空
    赋值 (计算结果, “多出左括号”)
    返回 (假)
.如果真结束

第三部分：以下生成语法计算树
生成树顶结点
赋值 (计算表结点.符号类型, “表达式”) ' 结点的类型：#表达式、#操作数、#括号
赋值 (计算表结点.首地址, 1) ' 记录表达式第一个字符在四则表达式中的位置
赋值 (计算表结点.尾地址, 取数组成员数 (符号表)) ' 记录表达式最后一个字符在四则表达式中的位置
赋值 (计算表结点.父地址, 0) ' 此结点的父亲结点位置
加入成员 (计算表, 计算表结点)
赋值 (i, 1)
生成计算此表达式的语法二叉树
.判断循环首 (小于或等于 (i, 取数组成员数 (计算表)))
    .如果真 (不等于 (计算表 [i], 符号类型, “表达式”))
        赋值 (i, 相加 (i, 1))
        出队列
        到循环尾 ()
    .如果真结束
    
    赋值 (表达式首地址, 计算表 [i], 首地址)
    赋值 (表达式尾地址, 计算表 [i], 尾地址)
    去掉表达式最外层括号 
    .判断循环首 (并且 (等于 (符号表 [表达式首地址], 符号类型, “左括号”), 等于 (符号表 [表达式尾地址], 符号类型, “右括号”))) ' 类似（（2+3））
        .如果 (并且 (等于 (到数值 (符号表 [表达式首地址], 匹配括号的位置), 表达式尾地址), 等于 (到数值 (符号表 [表达式尾地址], 匹配括号的位置), 表达式首地址))) ' 两个括号匹配
            赋值 (表达式首地址, 相加 (表达式首地址, 1))
            赋值 (表达式尾地址, 相减 (表达式尾地址, 1))
        .否则
            跳出循环 ()
        .如果结束
        
    .判断循环尾 ()
    赋值 (分割点, 表达式尾地址)
    “表达式”是类型为#表达式的结点数据，内容由首地址和尾地址决定
     ' “分割点”是分割“表达式”的位置，他一定指向运算符。求解方法：1.从后向前扫描2.“+、-”优先于“*、/”
    表达式中有“+”、“-”符，靠最左边的是此表达式的分割点，此运算符留在此结点中，其左边的加入左孩子结点中，右边的加入右孩子结点中。
    表达式中只有“*”、“/”时，分割方法同上。
    表达式中同时有两种优先级的运算符时，分割时“+”、“-”优先与“*”“/”。
    
    .判断循环首 (大于或等于 (分割点, 表达式首地址))
        .判断开始 (等于 (符号表 [分割点], 符号类型, “操作数”))
            赋值 (分割点, 相减 (分割点, 1))
        .判断 (等于 (符号表 [分割点], 符号类型, “运算符”))
            .如果真 (或者 (等于 (符号表 [分割点], 符号值, “+”), 等于 (符号表 [分割点], 符号值, “-”)))
                赋值 (记忆, 0)
                跳出循环 ()
                
            .如果真结束
            
            .如果真 (或者 (等于 (符号表 [分割点], 符号值, “*”), 等于 (符号表 [分割点], 符号值, “/”)))
                .如果真 (等于 (记忆, 0))
                    赋值 (记忆, 分割点)
                .如果真结束
                
                赋值 (分割点, 相减 (分割点, 1))
                
            .如果真结束
            
        .判断 (等于 (符号表 [分割点], 符号类型, “右括号”))
            赋值 (分割点, 相减 (到数值 (符号表 [分割点], 匹配括号的位置), 1)) ' 跳过括号
        .默认
            
        .判断结束
        
    .判断循环尾 ()
    
    .如果真 (不等于 (记忆, 0)) ' 表达式中有“*、/”但没有“+、-”
        赋值 (分割点, 记忆)
        赋值 (记忆, 0)
    .如果真结束
    
    以下是入队列操作。分割点对应的符号表中的结点作为父亲结点，分割点左边表达式的是左孩子，右边的是右孩子。
    加入左孩子结点信息
    .如果 (大于 (相减 (分割点, 表达式首地址), 1))
        赋值 (计算表结点.符号类型, “表达式”)
    .否则
        赋值 (计算表结点.符号类型, “操作数”)
    .如果结束
    
    赋值 (计算表结点.首地址, 表达式首地址)
    赋值 (计算表结点.尾地址, 相减 (分割点, 1))
    赋值 (计算表结点.父地址, i)
    加入成员 (计算表, 计算表结点)
    加入右孩子结点信息
    .如果 (大于 (相减 (表达式尾地址, 分割点), 1))
        赋值 (计算表结点.符号类型, “表达式”)
    .否则
        赋值 (计算表结点.符号类型, “操作数”)
    .如果结束
    
    赋值 (计算表结点.首地址, 相加 (分割点, 1))
    赋值 (计算表结点.尾地址, 表达式尾地址)
    赋值 (计算表结点.父地址, i)
    加入成员 (计算表, 计算表结点)
    修改父亲结点信息
    赋值 (计算表 [i], 符号类型, “运算符”)
    连续赋值 (分割点, 计算表 [i], 首地址, 计算表 [i], 尾地址)
    赋值 (i, 相加 (i, 1))
.判断循环尾 ()

第四部分计算四则表达式的值
.变量循环首 (取数组成员数 (计算表), 2, -2, i)
    赋值 (运算符, 符号表 [计算表] [计算表] [i], 父地址, 首地址, 符号值)
    .判断开始 (等于 (运算符, “+”))
        赋值 (暂存数值容器, 相加 (到数值 (符号表 [计算表] [相减 (i, 1)].首地址, 符号值), 到数值 (符号表 [计算表] [i], 首地址, 符号值)))
    .判断 (等于 (运算符, “-”))
        赋值 (暂存数值容器, 相减 (到数值 (符号表 [计算表] [相减 (i, 1)].首地址, 符号值), 到数值 (符号表 [计算表] [i], 首地址, 符号值)))
    .判断 (等于 (运算符, “*”))
        赋值 (暂存数值容器, 相乘 (到数值 (符号表 [计算表] [相减 (i, 1)].首地址, 符号值), 到数值 (符号表 [计算表] [i], 首地址, 符号值)))
    .判断 (等于 (运算符, “/”))
        .如果真 (等于 (到数值 (符号表 [计算表] [i], 首地址, 符号值), 0))
            赋值 (计算结果, “运算过程中出现了除数为0的错误”)
            返回 (假)
        .如果真结束
        赋值 (暂存数值容器, 相除 (到数值 (符号表 [计算表] [相减 (i, 1)].首地址, 符号值), 到数值 (符号表 [计算表] [i], 首地址, 符号值)))
    .默认
        
    .判断结束
    赋值 (符号表 [计算表] [i], 父地址, 符号类型, “操作数”)
    赋值 (符号表 [计算表] [计算表] [i], 父地址, 首地址, 符号值, 到文本 (暂存数值容器))
.变量循环尾 ()
赋值 (计算结果, 到文本 (符号表 [计算表] [1].首地址, 符号值)) ' 数值表 [第一个结点的地址]
返回 (真)
初稿完成于03年7、8月份 03.12.28夜优化代码，并压到一个子程序中。
04年1月份第二次优化。
04.08.28.11:15，完成新版本
古易


 ' 不属于任何一个程序集、类模块的函数：
