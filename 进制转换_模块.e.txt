 ' 文件类型：Windows模块源码

 ' 程序名称：进制转换
 ' 程序描述：    可以将从二进制到三十六进制的数值随意进行转换，不可以转换负数以及小数。
模块_进制转换
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 4 系统核心支持库
 ' eCalc 306AA9E31B5940399723021A0D782077 1 0 数值计算支持库





.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
_临时子程序 () ' 在模块初始化代码执行完毕后调用模块测试代码
返回 (0)

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的参数及返回值类型。

.子程序 模块_进制转换, 文本型, 公开, 可以将从二进制到三十六进制的数值随意进行转换，不可以转换负数以及小数。
.参数 被转换文本, 文本型, , 
.参数 被转换进制, 整数型, , 
.参数 转换的进制, 整数型, , 

.局部变量 欲转换文本, 文本型, , , 输入的文本串
.局部变量 临时文本, 文本型, , , 存放从输入的文本串中取出的一个文本
.局部变量 临时数值, 长整数型, , , 
.局部变量 计次变量1, 整数型, , , 
.局部变量 计次变量2, 整数型, , , 
.局部变量 次方数, 未知类型0x2000A, , , 每一位数字对应的10的次方数
.局部变量 转换的进制大数1, 未知类型0x2000A, , , 要转换的进制-1
.局部变量 转换的进制大数, 未知类型0x2000A, , , 要转换的进制
.局部变量 被转换进制大数, 未知类型0x2000A, , , 被转换的进制
.局部变量 临时大数, 未知类型0x2000A, , , 将被转换数字转换成的大数
.局部变量 余数大数, 未知类型0x2000A, , , 存放求出的余数大数
.局部变量 数值1大数, 未知类型0x2000A, , , 只存放1
.局部变量 临时大数1, 未知类型0x2000A, , , 将被转换数字的每一位转换成的大数

.如果真 (或者 (小于 (2), 小于 (2), 大于 (36), 大于 (36))) ' 判断两个“进制系数”是否正确
    返回 (“参数错误-进制只能在2-36之间”)
.如果真结束
赋值 (到大写 (到半角 ())) ' 规范参数
.变量循环首 (1, 取文本长度 (), 1, 计次变量1) ' 判断输入的数字文本是否有效
    赋值 (临时文本, 取文本中间 (计次变量1, 1))
    .如果真 (等于 (寻找文本 (取文本左边 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, ), 临时文本, , 假), -1))
        赋值 (临时文本, 相加 (“参数错误-”, , “不是一个有效的”, 取文本左边 (数值到金额 (真), 相减 (取文本长度 (数值到金额 (真)), 4)), “进制数！”))
        跳出循环 ()
    .如果真结束
     ' 全部查找完毕
    .如果真 (等于 (计次变量1, 取文本长度 ()))
        赋值 (临时文本, “”)
    .如果真结束
    
.变量循环尾 ()

 ' 如果临时文本不为空，说明此数字文本无效！
.如果真 (不等于 (临时文本, “”))
    返回 (临时文本)
.如果真结束
 ' 以上为数据正确性校验处理代码

.如果真 (等于 ()) ' 相同时，不用进行转换
    返回 ()
.如果真结束

.变量循环首 (1, 取文本长度 (), 1, 计次变量1) ' 先将要转换的数字放入大数中
    次方数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
    被转换进制大数.未知支持库函数_69 ()
    .计次循环首 (相减 (取文本长度 (), 计次变量1), 计次变量2) ' 求次方
        赋值 (次方数, 次方数.未知支持库函数_94 (被转换进制大数))
    .计次循环尾 ()
    
    临时大数1.未知支持库函数_69 (相减 (寻找文本 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 取文本中间 (计次变量1, 1), , 真), 1))
    赋值 (临时大数1, 临时大数1.未知支持库函数_94 (次方数))
    赋值 (临时大数, 临时大数1.未知支持库函数_92 (临时大数)) ' 临时大数即为最后转换成的大数
.变量循环尾 ()
转换的进制大数1.未知支持库函数_69 (相减 (1))
转换的进制大数.未知支持库函数_69 ()
数值1大数.未知支持库函数_69 (1) ' 数值1不能直接和大数类型计算，所以先放入一个大数中
.判断循环首 (等于 (临时大数.未知支持库函数_86 (转换的进制大数1), 真)) ' 开始进制转换,除进制数取余数
    赋值 (余数大数, 临时大数.未知支持库函数_97 (转换的进制大数)) ' 求出的余数
    赋值 (临时大数1, 余数大数.未知支持库函数_92 (数值1大数)) ' 求出的余数＋1
    赋值 (临时数值, 到数值 (临时大数1.未知支持库函数_68 ())) ' 最后的余数
    赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 临时数值, 1), 欲转换文本)) ' 找出每一个余数对应的数字
    赋值 (临时大数, 临时大数.未知支持库函数_95 (转换的进制大数, 10)) ' 取出剩余的数字
    赋值 (临时大数, 临时大数.未知支持库函数_90 ())
.判断循环尾 ()
赋值 (临时数值, 临时大数.未知支持库函数_77 ()) ' 最后剩下的余数
赋值 (欲转换文本, 相加 (取文本中间 (“0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”, 相加 (临时数值, 1), 1), 欲转换文本)) ' 整数转换结束
返回 (欲转换文本)



 ' 不属于任何一个程序集、类模块的函数：
