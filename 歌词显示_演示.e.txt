 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 559
    高度 = 527
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.图片 LRC绿, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC绿", , 1*25的渐变位图
.图片 LRC黄绿, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC黄绿", , 
.图片 LRC白灰, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC白灰", , 
.图片 LRC黄深红, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC黄深红", , 
.图片 LRC蓝大红, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC蓝大红", , 
.图片 LRC蓝深红, " ' 已保存到：D:\易语言学习\Data\歌词显示_演示.e\LRC蓝深红", , 
.常量 程序名, "“动态即时渐变歌词显示    思娇屠虎 出品    扣群：137307746”", , 
.常量 百度歌曲API, "“http://box.zhangmen.baidu.com/x?op=12&count=1&title=”", , 
.常量 百度歌词API, "“http://box.zhangmen.baidu.com/bdlrc/”", , 
.常量 错误信息, "“
                系统重要文件被破坏!

              系统将自动恢复默认备份。

如果多次都不能正常启动，请重新安装本软件或与作者联系!”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' RegEx 684944CB04624eb7BD5412A519421D34 2 0 正则表达式支持库
 ' internet 707ca37322474f6ca841f0e224f4b620 2 0 互联网支持库
 ' eMMedia 824F144B108A4bcbB966F45670D42A00 3 0 多媒体支持库
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' BmpOperate 42305932-06E6-47a5-AC79-8BDCDC58DF61 2 0 位图操作支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库




数据类型 音乐文件信息, , 
    .成员 艺术家, 文本型, , , 
    .成员 歌曲名, 文本型, , , 
    .成员 专辑名称, 文本型, , , 
    .成员 版权, 文本型, , , 
    .成员 备注, 文本型, , , 
    .成员 音轨, 文本型, , , 
    .成员 编码, 文本型, , , 
    .成员 类型, 文本型, , , 
    .成员 歌词, 文本型, , , 
    .成员 年代, 文本型, , , 
    .成员 网址, 文本型, , , 
    .成员 作曲家, 文本型, , , 
    .成员 版本, 文本型, , , 
    .成员 编码方式, 文本型, , , 
    .成员 比特率, 文本型, , , 
    .成员 码率, 文本型, , , 
    .成员 声道, 文本型, , , 
    .成员 演奏者, 文本型, , , 
    .成员 描述, 文本型, , , 
    .成员 时间, 文本型, , , 
    .成员 图片, 字节集, , , 
    .成员 FTrack, 文本型, , , 

.全局变量 是否有歌词, 逻辑型, , , 
.全局变量 LRC歌词, 文本型, , "0", 用来实时显示
.全局变量 LRC歌词_终, 文本型, , "0", 
.全局变量 LRC歌词_间隔时间, 整数型, , "0", 
.全局变量 LRC歌词颜色, 整数型, , "25", 
.全局变量 匿名全局变量_597, 空白型, , , 
.全局变量 wma文件头, 字节集, , , 
.全局变量 wma标准标签头, 字节集, , , 
.全局变量 wma扩展标签头, 字节集, , , 
.全局变量 wma扩展标签, 文本型, , "11", 
.全局变量 wma编码标签头, 字节集, , , 
.全局变量 wma文件属性头, 字节集, , , 
.全局变量 CRC表, 整数型, , "256", 
.全局变量 类型, 文本型, , "148", 
.全局变量 MPEG_BIT_RATE, 整数型, , "4,4,16", 
.全局变量 MPEG_SAMPLE_RATE, 整数型, , "4,4", 
.全局变量 MPEG_VERSION, 文本型, , "4", 
.全局变量 MPEG_LAYER, 文本型, , "4", 
.全局变量 MPEG_CM_MODE, 文本型, , "4", 
.全局变量 匿名全局变量_577, 空白型, , , 

.DLL命令 发送消息_DLL, 整数型, "user32.dll", "SendMessageA", , 
    .参数 hwnd, 整数型, , 要接收消息的那个窗口的句柄
    .参数 wMsg, 整数型, , 消息的标识符
    .参数 wParam, 整数型, , 具体取决于消息
    .参数 lParam, 整数型, , 类型为通用型，请在调试时调整其类型

.DLL命令 调用系统关于窗口, 整数型, "shell32.dll", "ShellAboutA", , 调用系统关于窗口-----“思娇屠虎”制作
    .参数 窗口句柄, 整数型, , 
    .参数 窗口标题, 文本型, , 
    .参数 说明, 文本型, , 
    .参数 图标句柄, 整数型, , 

.DLL命令 格式化磁盘, 整数型, "shell32.dll", "SHFormatDrive", , 思娇屠虎制作 QQ：84651849
    .参数 Hend, 整数型, , 父窗口句柄
    .参数 Drive, 整数型, , 驱动器编号 0=A,1=B,2=C其余类推
    .参数 FormatID, 整数型, , 选0即可
    .参数 Options, 整数型, , 0=快速格式化,1=完整格式化,2=只复制系统文件

.DLL命令 创建事件同步对象, 整数型, "", "CreateEventA", , 防重复运行用1-----“思娇屠虎”制作
    .参数 lpEventAttributes, 整数型, , 
    .参数 bManualReset, 逻辑型, , 
    .参数 bInitialState, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 打开事件同步对象, 整数型, "", "OpenEventA", , 防重复运行用2-----“思娇屠虎”制作
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 lpName, 文本型, , 

.DLL命令 关闭同步事件对象, 整数型, "", "CloseHandle", , 防重复运行-----“思娇屠虎”制作
    .参数 hObject, 整数型, , 

.DLL命令 取目标窗口大小, 空白型, "user32.dll", "GetClientRect", , 取窗口大小-----“思娇屠虎”制作
    .参数 目标窗口, 整数型, , 目标窗口句柄
    .参数 lpRect, 整数型, 数组, 数组。左上角坐标X，Y；右下角坐标X,Y

.DLL命令 改变指定窗口的位置和大小, 空白型, "user32.dll", "MoveWindow", , 改变指定窗口的位置和大小-----“思娇屠虎”制作
    .参数 欲移动窗口的句柄, 整数型, , 
    .参数 窗口新的左侧位置, 整数型, , 
    .参数 窗口新的顶部位置, 整数型, , 
    .参数 窗口的新宽度, 整数型, , 
    .参数 窗口的高宽度, 整数型, , 
    .参数 bRepaint, 整数型, , 值为“0”或“1”

.DLL命令 窗口置顶, 整数型, "user32.dll", "BringWindowToTop", , 
    .参数 窗口的句柄, 整数型, , 

.DLL命令 控制鼠标指针, 空白型, "user32.dll", "ShowCursor", , 控制鼠标指针的可视性
    .参数 bShow, 整数型, , TRUE（非零）显示指针，FALSE隐藏

.DLL命令 禁止进入屏幕保护, 空白型, "user32.dll", "SystemParametersInfoA", , SystemParametersInfo(SPI_SETSCREENSAVEACTIVE,FALSE,NULL,0)
    .参数 uAction, 整数型, , SPI_SETSCREENSAVEACTIVE值为17
    .参数 uParam, 整数型, , flase的值为0取消 1为设置
    .参数 lpvParam, 整数型, , 
    .参数 fuWinIni, 整数型, , 

.DLL命令 打开文件DLL, 整数型, "shell32.dll", "ShellExecuteA", , 调用系统关联程序打开相应文件！   思娇屠虎 制作 QQ：84651849
    .参数 hwnd, 整数型, , 指定一个窗口的句柄，有时候，windows程序有必要在创建自己的主窗口前显示一个消息框
    .参数 lpOperation, 文本型, , 指定字串“open”来打开lpFlie文档，或指定“Print”来打印它
    .参数 lpFile, 文本型, , 想用关联程序打印或打开一个程序名或文件名
    .参数 lpParameters, 文本型, , 如lpszFlie是可执行文件，则这个字串包含传递给执行程序的参数
    .参数 lpDirectory, 文本型, , 想使用的完整路径
    .参数 nShowCmd, 整数型, , 定义了如何显示启动程序的常数值。参考ShowWindow函数的nCmdShow参数;

.DLL命令 置父窗口DLL, 整数型, "user32.dll", "SetParent", , 
    .参数 子窗口句柄, 整数型, , 子窗口的取窗口句柄
    .参数 父窗口句柄, 整数型, , 父窗口的取窗口句柄

.DLL命令 复制文件命令, 整数型, "kernel32.dll", "CopyFileA", , 非零表示成功，零表示失败   思娇屠虎 制作 QQ：84651849
    .参数 源文件名, 文本型, , 
    .参数 目标文件名, 文本型, , 
    .参数 bFailIfExists, 空白型, , 一般设为“0”如果设为TRUE（非零），那么一旦目标文件已经存在，则函数调用会失败。否则目标文件被改写

.DLL命令 添加系统菜单, 整数型, "", "AppendMenuA", , 在指定的菜单里添加一个菜单项
    .参数 菜单句柄, 整数型, , 菜单句柄
    .参数 菜单常数标志, 整数型, , 参考ModifyMenu函数中的菜单常数标志定义表，其中列出了允许使用的所有常数
    .参数 新菜单条目ID, 整数型, , 指定菜单条目的新命令ID。如果在wFlags参数中指定了MF_POPUP字段，那么这应该是指向一个弹出式菜单的句柄
    .参数 标志值, 文本型, , （相应的vb声明见注解），如果在wFlags参数中指定了MF_STRIN

.DLL命令 取系统菜单句柄, 整数型, "", "GetSystemMenu", , 取得指定窗口的系统菜单的句柄。如执行成功，返回系统菜单的句柄；零意味着出错。如bRevert设为假，也会返回零（简单的恢复原始的系统菜单）
    .参数 窗口句柄, 整数型, , 
    .参数 回复, 逻辑型, , 如设为假，表示接收原始的系统菜单。

.DLL命令 窗口设置信息, 整数型, "", "SetWindowLongA", , 在窗口结构中为指定的窗口设置信息，指定数据的前一个值。
    .参数 窗口句柄, 整数型, , 欲为其取得信息的窗口的句柄
    .参数 属性, 整数型, , 请参考GetWindowLong函数的nIndex参数的说明
    .参数 窗口信息, 子程序指针, , 由nIndex指定的窗口信息的新值

.DLL命令 取得窗口信息, 整数型, "", "GetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 欲为其获取信息的窗口的句柄
    .参数 属性, 整数型, , 欲取回的信息

.DLL命令 将消息传答窗口函数, 整数型, "", "CallWindowProcA", , 将消息传答窗口函数
    .参数 lpPrevWndFunc, 整数型, , 
    .参数 窗口句柄, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 创建弹出式菜单, 整数型, "user32", "CreatePopupMenu", , 如成功，返回一个菜单句柄；零意味着错误

.DLL命令 添加菜单项, 整数型, "", "AppendMenuA", , 在指定的菜单里添加一个菜单项
    .参数 菜单句柄, 整数型, , 菜单句柄
    .参数 菜单常数标志, 整数型, , 参考ModifyMenu函数中的菜单常数标志定义表，其中列出了允许使用的所有常数
    .参数 新菜单条目ID, 整数型, , 指定菜单条目的新命令ID。如果在wFlags参数中指定了MF_POPUP字段，那么这应该是指向一个弹出式菜单的句柄
    .参数 标志值, 文本型, , 

.DLL命令 重画菜单, 整数型, "", "DrawMenuBar", , 为指定的窗口重画菜单。用api函数改变一个窗口菜单的内容时，就要用到这个函数。
    .参数 窗口句柄, 整数型, , 要重画菜单栏的窗口的句柄

.DLL命令 显示位置, 整数型, "user32", "TrackPopupMenu", , 非零表示成功，零表示失败。
    .参数 hMenu, 整数型, , 弹出式菜单的句柄
    .参数 wFlags, 整数型, , 位置标志和鼠标追踪标志的组合，见下表;
    .参数 x, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 y, 整数型, , 这个点指定了弹出式菜单在屏幕坐标系统中的位置
    .参数 nReserved, 整数型, , 未使用，设为零
    .参数 hwnd, 整数型, , 用于接收弹出式菜单命令的窗口的句柄。应该使用窗体的窗口句柄――窗体中有一个菜单能象弹出式菜单那样接收相同的命令ID集
    .参数 lprc, 未知类型0x50002, , Rect，用屏幕坐标定义的一个矩形，如用户在这个矩形的范围内单击，则弹出式菜单不会关闭。如单击弹出式菜单之外的任何一个地方，则会关闭菜单。可以设为NULL;  

.DLL命令 取条目字串, 整数型, "", "GetMenuStringA", , 取得指定菜单条目的字串，在lpString中返回的字串的长度（不包括空中止字符）。零意味着出错
    .参数 菜单句柄, 整数型, , 
    .参数 条目位置, 整数型, , 欲接收的菜单条目的标识符。如果在wFlags参数中设置了MF_BYCOMMAND标志，这个参数就用于指定要改变的菜单条目的命令ID。如果设置的是MF_BYPOSITION标志，这个参数就用于指定条目在菜单中的位置（第一个条目的位置为0）
    .参数 缓冲区, 文本型, , 指定一个预先定义好的字串缓冲区，以便为菜单条目装载字串
    .参数 缓冲区长度, 整数型, , 载入lp缓冲区中的最大字符数量+1
    .参数 标志, 整数型, , 常数MF_BYCOMMAND或MF_BYPOSITION，取决于wID参数的设置

.DLL命令 处理消息, 空白型, "user32.dll", "SendMessageCallbackA", , 
    .参数 hWnd, 空白型, , 
    .参数 Msg, 空白型, , 
    .参数 wParam, 空白型, , 
    .参数 IParam, 空白型, , 
    .参数 IpResultCallBack, 子程序指针, , 
    .参数 dwData, 空白型, , 

.DLL命令 置窗口特征, 子程序指针, "", "SetWindowLongA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 特征索引, 整数型, , 
    .参数 新特征, 子程序指针, , 

.DLL命令 执行窗口程序, 整数型, "", "CallWindowProcA", , 
    .参数 窗口程序程序指针, 子程序指针, , 
    .参数 窗口句柄, 整数型, , 
    .参数 消息, 整数型, , 
    .参数 参数1, 整数型, , 
    .参数 参数2, 整数型, , 

.DLL命令 DLL命令1, 空白型, "", "", , 

.DLL命令 WideCharToMultiByte, 整数型, "kernel32", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cbMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 WideCharToMultiByte1, 整数型, "kernel32", "WideCharToMultiByte", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 
    .参数 lpMultiByteStr, 字节集, , 
    .参数 cbMultiByte, 整数型, , 
    .参数 lpDefaultChar, 文本型, , 
    .参数 lpUsedDefaultChar, 逻辑型, , 

.DLL命令 MultiByteToWideChar, 整数型, "kernel32", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.DLL命令 API_发送MCI文本, 整数型, "winmm.dll", "mciSendStringA", 公开, 向MCI设备发出一条命令字符串　
    .参数 lpstrCommand, 文本型, , 要发送的MCI文本
    .参数 lpstrReturnString, 文本型, 传址, 存放返回文本的容器，必须先初始化为适当长度的文本。若不需要接受返回的文本，直接提供一个文本型常量也可。
    .参数 uReturnLength, 整数型, , 返回文本的最大长度，或设为0（不需要返回文本）
    .参数 hwndCallback, 整数型, , 接收“wait”、“notify”消息的窗口句柄。基本上用不着，保持为0即可

.DLL命令 MultiByteToWideChar1, 整数型, "kernel32", "MultiByteToWideChar", , 
    .参数 CodePage, 整数型, , 
    .参数 dwFlags, 整数型, , 
    .参数 lpMultiByteStr, 文本型, , 
    .参数 cchMultiByte, 整数型, , 
    .参数 lpWideCharStr, 字节集, , 
    .参数 cchWideChar, 整数型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 歌词路径, 文本型, , , 
.程序集变量 媒体总时间, 整数型, , , 
.程序集变量 播放媒体长度, 空白型, , , 
.程序集变量 前一句, 文本型, , , 
.程序集变量 显示行数, 整数型, , , 
.程序集变量 最大行数, 整数型, , , 
.程序集变量 LRC歌词线程, 整数型, , , 
.程序集变量 LRC歌词时间补差, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (_启动窗口., #程序名)

赋值 (歌词路径, 相加 (取运行目录 (), “\LRC”))
.如果真 (等于 (文件是否存在 (歌词路径), 假))
    创建目录 (歌词路径)
.如果真结束
赋值 (.时钟周期, 500)
赋值 (.现行选中项, 0)
LRC歌词颜色初始化 (0)

.子程序 _按钮1_被单击, 空白型, , 
.如果真 (打开 ())
    赋值 (.标题, .文件名)
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _按钮2_被单击, 空白型, , 
.如果 (等于 (文件是否存在 (.标题), 真))
    媒体播放子程序 (.标题)
.否则
    .如果真 (打开 ())
        赋值 (.标题, .文件名)
        媒体播放子程序 (.标题)
    .如果真结束
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束


.子程序 _标签_播放面_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.移动 (横向位置, )
.如果真 (等于 (未知支持库函数_61 (), 1))
    相乘 (相除 (播放媒体长度, 100), 取整 (相除 (.宽度, 2))).未知支持库函数_66 ()
    
.如果真结束


.子程序 _标签_播放底_鼠标左键被按下, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.移动 (横向位置, )
.如果真 (等于 (未知支持库函数_61 (), 1))
    相乘 (相除 (播放媒体长度, 100), 取整 (相除 (.宽度, 2))).未知支持库函数_66 ()
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束


.子程序 媒体播放子程序, 空白型, , 
.参数 媒体对象, 文本型, , 

.局部变量 播放状态, 空白型, , , 
.局部变量 媒体信息, 音乐文件信息, , , 
.局部变量 文件名, 文本型, , , 
.局部变量 字体, 字体, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 a, 整数型, , , 

.如果真 (媒体对象.未知支持库函数_56 ())
    赋值 (播放媒体长度, 未知支持库函数_62 ())
    赋值 (媒体总时间, 未知支持库函数_64 ())
    赋值 (媒体信息, 读媒体文件信息 (媒体对象))
    -1.未知支持库函数_66 ()
     ' 歌词处理
    赋值 (文件名, 取文本右边 (媒体对象, 相减 (取文本长度 (媒体对象), 倒找文本 (媒体对象, “\”, , 假))))
     ' 本源码来自易语言资源网(www.5A5X.com)
    赋值 (字体.字体大小, 12)
    赋值 (字体.字体名称, “黑体”)
    赋值 (.字体, 字体)
    赋值 (.文本颜色, #红色)
    .清除 ()
    10.定位写出 (0, “正在搜索歌词...”)
    .如果 (等于 (文件是否存在 (相加 (歌词路径, 取文本左边 (文件名, 相减 (取文本长度 (文件名), 3)), “Lrc”)), 真)) ' 是否有保存
        赋值 (临时文本, 到文本 (读入文件 (相加 (歌词路径, 取文本左边 (文件名, 相减 (取文本长度 (文件名), 3)), “Lrc”))))
    .否则
         ' 如果本地没有，就从网上读取
        赋值 (临时文本, 到文本 (取百度歌词 (媒体信息.歌曲名, 媒体信息.艺术家)))
        .如果真 (大于 (取文本长度 (临时文本), 20)) ' 如果取到的文本大于20才保存
            写到文件 (相加 (歌词路径, 取文本左边 (文件名, 相减 (取文本长度 (文件名), 3)), “Lrc”), 到字节集 (临时文本))
        .如果真结束
        
    .如果结束
     ' 画板_歌词.清除 (0, 20, 画板_歌词.宽度, 画板_歌词.高度 － 20)
    .清除 ()
    
    .如果 (大于 (取文本长度 (临时文本), 20)) ' 如果取到的文本大于20
        清除数组 (LRC歌词)
        LRC歌词解析 (临时文本, 媒体总时间)
        赋值 (最大行数, 取数组成员数 (LRC歌词_终))
        .如果 (大于 (最大行数, 0)) ' 特殊时候出错
            10.定位写出 (0, 相加 (“正在播放：”, 媒体对象))
            
            
            赋值 (.文本颜色, #艳青)
            .计次循环首 (15, a) ' 后面显示10句
                赋值 (临时文本, 取文本左边 (LRC歌词_终 [a], 相减 (取文本长度 (LRC歌词_终 [a]), 3)))
                相减 (相除 (.宽度, 2), 相除 (相乘 (取文本长度 (临时文本), 8), 2)).定位写出 (相加 (相除 (.宽度, 3), 10, 相乘 (a, 20)), 临时文本)
            .计次循环尾 ()
             ' 本源码来自易语言资源网(www.5A5X.com)
            赋值 (是否有歌词, 真)
            
        .否则
            150.定位写出 (200, “没有找到歌词...”)
        .如果结束
        
    .否则
        150.定位写出 (200, “没有找到歌词...”)
    .如果结束
    
.如果真结束



.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 a, 整数型, , , 
.局部变量 播放位置, 整数型, , , 
.局部变量 X, 整数型, , , 

 ' 实时显示歌曲播放进
赋值 (播放位置, 未知支持库函数_63 ()) ' 单位为毫秒
.移动 (相乘 (取整 (相除 (相乘 (播放位置, 100), 播放媒体长度)), 2), )

 ' 以下为歌词显示,200毫秒检测一次
.如果真 (是否有歌词)
    赋值 (a, 绝对取整 (相除 (播放位置, 1000))) ' 计算出现行播放秒
    .如果真 (并且 (大于 (a, 0), 小于 (a, 取数组成员数 (LRC歌词)), 大于 (取文本长度 (LRC歌词 [a]), 3), 不等于 (前一句, LRC歌词 [a]))) ' 做一下防错处理，有时候会
        赋值 (前一句, LRC歌词 [a]) ' 保存一下
        赋值 (显示行数, 到整数 (取文本右边 (LRC歌词 [a], 3)))
        .如果真 (并且 (大于 (显示行数, 0), 小于 (显示行数, 最大行数))) ' 有极少数时候为0，不知道为什么
            .如果真 (大于 (LRC歌词线程, 0))
                未知支持库函数_6 (LRC歌词线程)
            .如果真结束
            未知支持库函数_0 (&LRC歌词显示线程, 1, LRC歌词线程)
        .如果真结束
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果真结束
    
.如果真结束


.子程序 LRC歌词显示线程, 空白型, , 来用实时显示LRC歌词，带卡拉OK效果
.参数 参数, 整数型, , 

.局部变量 对象, 画板, , , 显示对象，为画板
.局部变量 行数, 整数型, , , 第几句
.局部变量 字体, 字体, , , 
.局部变量 显示歌词, 文本型, , "15", 每次最多显示15行
.局部变量 a, 整数型, , , 
.局部变量 前, 整数型, , , 
.局部变量 后, 整数型, , , 
.局部变量 对象宽度, 整数型, , , 
.局部变量 对象高度, 整数型, , , 
.局部变量 歌词, 文本型, , , 
.局部变量 写出位置X, 空白型, , , 
.局部变量 写出位置Y, 空白型, , , 
.局部变量 歌词全长, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 渐变, 空白型, , , 

赋值 (对象, )
赋值 (行数, 显示行数)
 ' 全局变量
 ' LRC歌词          记录着某时出现某句的歌词相关信息
 ' LRC歌词_终       记录着所有歌词
 ' LRC歌词_间隔时间 记录着每二句之间间隔时间
赋值 (行数, 相加 (行数, LRC歌词时间补差))

赋值 (对象宽度, 对象.宽度)
赋值 (对象高度, 对象.高度)

 ' 字体.字体名称 ＝ “楷体”
赋值 (字体.字体名称, “黑体”)

对象.清除 (0, 20, 对象宽度, 对象高度)
 ' 前五，中一，后15行
.如果 (小于 (行数, 6)) ' 最多5行
    赋值 (前, 相减 (行数, 1))
.否则
    赋值 (前, 5)
.如果结束

.计次循环首 (5, 渐变) ' 歌词向上渐移效果,高亮歌词渐小渐大效果
    对象.清除 (0, 20, 对象宽度, 对象高度)
     ' 对象.画矩形 (0, 20, 对象宽度, 对象高度)'刷新速度快了都闪
    赋值 (字体.字体大小, 12)
    赋值 (对象.字体, 字体)
    赋值 (对象.文本颜色, #浅灰)
    
     ' 前
    .计次循环首 (前, a)
        赋值 (歌词, 取文本左边 (LRC歌词_终 [相减 (行数, a)], 相减 (取文本长度 (LRC歌词_终 [相减 (行数, a)]), 3)))
        对象.定位写出 (相减 (相除 (对象宽度, 2), 相除 (相乘 (取文本长度 (歌词), 8), 2)), 相减 (相加 (相减 (相除 (对象高度, 3), 相乘 (a, 20)), 5, 20), 相乘 (渐变, 4)), 歌词)
    .计次循环尾 ()
     ' 后
    赋值 (对象.文本颜色, #艳青)
    .计次循环首 (15, a) ' 显示后面15句
        赋值 (歌词, 取文本左边 (LRC歌词_终 [相加 (行数, a)], 相减 (取文本长度 (LRC歌词_终 [相加 (行数, a)]), 3)))
        对象.定位写出 (相减 (相除 (对象宽度, 2), 相除 (相乘 (取文本长度 (歌词), 8), 2)), 相减 (相加 (相除 (对象高度, 3), 10, 相乘 (a, 20), 20), 相乘 (渐变, 4)), 歌词)
    .计次循环尾 ()
    延时 (20)
     ' 本源码来自易语言资源网(www.5A5X.com)
.计次循环尾 ()
 ' 高亮显示歌词行
赋值 (对象.文本颜色, #红色)
赋值 (字体.字体大小, 18)
赋值 (对象.字体, 字体)
赋值 (歌词, 取文本左边 (LRC歌词_终 [行数], 相减 (取文本长度 (LRC歌词_终 [行数]), 3)))
赋值 (歌词全长, 相乘 (取文本长度 (歌词), 12))
赋值 (写出位置X, 相减 (相除 (对象宽度, 2), 相除 (歌词全长, 2)))
赋值 (写出位置Y, 相加 (相除 (对象高度, 3), 5))
对象.定位写出 (写出位置X, 写出位置Y, 歌词) ' 高亮歌词行

 ' 高25
 ' 渐变颜色 [25] ＝ 62409     46397  /25 =640
.如果真 (大于 (参数, 0))
    .计次循环首 (歌词全长, x)
        .计次循环首 (25, y)
            处理事件 ()
            赋值 (a, 对象.取点 (相加 (写出位置X, x), 相加 (写出位置Y, y)))
            .如果真 (大于 (a, 10)) ' 不是黑色
                对象.画点 (相加 (写出位置X, x), 相加 (写出位置Y, y), LRC歌词颜色 [y]) ' 一个渐变色
                延时 (相除 (LRC歌词_间隔时间 [相加 (行数, 1)], 2.4))
            .如果真结束
             ' 本源码来自易语言资源网(www.5A5X.com)
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束


.子程序 _组合框1_列表项被选择, 空白型, , 
LRC歌词颜色初始化 (.现行选中项)

.子程序 LRC歌词颜色初始化, 空白型, , 
.参数 颜色类型, 整数型, , 

.局部变量 图片, 字节集, , , 
.局部变量 a, 空白型, , , 
.局部变量 位图, 位图, , , 


.判断开始 (等于 (颜色类型, 0))
    位图.载入数据 (#LRC黄绿)
    .计次循环首 (25, a)
        赋值 (LRC歌词颜色 [a], 位图.取某点颜色 (0, a))
    .计次循环尾 ()
    
.判断 (等于 (颜色类型, 1))
    位图.载入数据 (#LRC蓝大红)
    .计次循环首 (25, a)
        赋值 (LRC歌词颜色 [a], 位图.取某点颜色 (0, a))
    .计次循环尾 ()
    
.判断 (等于 (颜色类型, 2))
    位图.载入数据 (#LRC黄深红)
    .计次循环首 (25, a)
        赋值 (LRC歌词颜色 [a], 位图.取某点颜色 (0, a))
    .计次循环尾 ()
    
.判断 (等于 (颜色类型, 3))
    位图.载入数据 (#LRC白灰)
    .计次循环首 (25, a)
        赋值 (LRC歌词颜色 [a], 位图.取某点颜色 (0, a))
    .计次循环尾 ()
    
.判断 (等于 (颜色类型, 4))
    位图.载入数据 (#LRC绿)
    .计次循环首 (25, a)
        赋值 (LRC歌词颜色 [a], 位图.取某点颜色 (0, a))
    .计次循环尾 ()
    
.默认
    ' 本源码来自易语言资源网(www.5A5X.com)
.判断结束


.子程序 _组合框_LRC颜色_列表项被选择, 空白型, , 
LRC歌词颜色初始化 (.现行选中项)



.程序集 功能程序集, , , 

.子程序 到时间格式, 文本型, , 时长到时间格式 00:00
.参数 秒数, 空白型, , 

.局部变量 分值, 文本型, , , 
.局部变量 秒值, 文本型, , , 
.局部变量 aa, 整数型, , , 如果设为整数，就是00：00格式，设为小数就是00：00.00格式

赋值 (秒数, 四舍五入 (相除 (秒数, 1000), )) ' 一秒
赋值 (分值, 到文本 (整除 (求余数 (秒数, 3600), 60)))
.如果真 (等于 (取文本长度 (分值), 1))
    赋值 (分值, 相加 (“0”, 分值))
.如果真结束
赋值 (aa, 求余数 (秒数, 整除 (3600, 60)))
.如果 (小于 (aa, 10))
    赋值 (秒值, 相加 (“0”, 到文本 (aa)))
.否则
    赋值 (秒值, 到文本 (aa))
.如果结束
返回 (相加 (分值, “:”, 秒值))
 ' 本源码来自易语言资源网(www.5A5X.com)

.子程序 匹配扩展名, 逻辑型, , 判断参数‘文件名’的扩展名是否与参数的‘扩展名’相同
.参数 文件名, 文本型, 参考, 要判断的文件名
.参数 扩展名, 文本型, 参考, 

.局部变量 临时文本, 文本型, , , 
.局部变量 点位置, 整数型, , , 

赋值 (点位置, 倒找文本 (文件名, “.”, , 假))
.如果 (不等于 (点位置, -1))
    赋值 (临时文本, 取文本右边 (文件名, 相减 (取文本长度 (文件名), 点位置)))
    .如果真 (不等于 (到大写 (临时文本), 到大写 (扩展名)))
        返回 (假)
    .如果真结束
    
.否则
    返回 (假)
.如果结束
返回 (真)

.子程序 取百度歌词, 字节集, 公开, 返回歌词文本     思娇屠虎 QQ:84651849
.参数 歌曲名, 文本型, , 
.参数 歌手名, 文本型, 可空, 

.局部变量 临时文本, 文本型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 正则, 未知类型0x20001, , , 
.局部变量 结果, 未知类型0x20002, , "0", 
.局部变量 a, 空白型, , , 

赋值 (临时文本, 到文本 (未知支持库函数_7 (相加 (“http://box.zhangmen.baidu.com/x?op=12&count=1&title=”, 歌曲名, “$$”, 歌手名, “$$$$”))))
正则.未知支持库函数_3 (“<encode>(.*?)</encode>.*?<decode>(.*?)</decode>.*?<type>(.*?)</type>.*?<lrcid>(.*?)</lrcid>”, 假)
赋值 (结果, 正则.未知支持库函数_16 (临时文本))
.如果 (等于 (取数组成员数 (结果), 0))
    返回 ({  })
.否则
    赋值 (文本, 结果.未知支持库函数_12 ( [1], 临时文本, 1, ))
    赋值 (文本, 取文本左边 (文本, 倒找文本 (文本, “/”, , 假)))
    赋值 (文本, 结果.未知支持库函数_12 ( [1], 临时文本, 4, ))
    .如果 (等于 (取文本长度 (文本), 0))
        返回 ({  })
    .否则
        赋值 (文本, 相加 (“http://box.zhangmen.baidu.com/bdlrc/”, 取文本左边 (文本, 相减 (取文本长度 (文本), 2)), “/”, 文本, “.lrc”)) ' 歌词地址
        返回 (未知支持库函数_7 (文本)) ' 歌词文本
    .如果结束
    ' 本源码来自易语言资源网(www.5A5X.com)
.如果结束


.子程序 解释百度地址, 文本型, , 解释百度搜索结果歌曲地址
.参数 原地址, 文本型, , 

.局部变量 网页内容, 文本型, , , 
.局部变量 a, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 移位, 整数型, , , 
.局部变量 密码文本, 文本型, , , 
.局部变量 密匙, 文本型, , , 
.局部变量 真实地址, 文本型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 文本, 文本型, , , 

赋值 (密匙, “abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ”)
赋值 (网页内容, 到文本 (未知支持库函数_7 (原地址)))
赋值 (a, 倒找文本 (网页内容, “<script>”, , 真))
赋值 (b, 寻找文本 (网页内容, “</script>”, a, 真))
.如果真 (并且 (大于 (a, 0), 大于 (b, 0)))
    赋值 (网页内容, 取文本中间 (网页内容, 相加 (a, 8), 相减 (b, a, 8)))
    赋值 (a, 相加 (寻找文本 (网页内容, 相加 (“var encurl = ”, #引号), , 假), 1))
    赋值 (b, 寻找文本 (网页内容, 相加 (#引号, “, newurl”), a, 假))
    赋值 (密码文本, 取文本中间 (网页内容, 相加 (a, 13), 相减 (b, a, 13)))
    赋值 (文本, 取文本左边 (密码文本, 相减 (寻找文本 (密码文本, 相加 (#引号, “ || ”, #引号), , 假), 1)))
    .如果真 (小于 (取文本长度 (文本), 10))
        赋值 (文本, 取文本右边 (密码文本, 相减 (取文本长度 (密码文本), 6)))
    .如果真结束
    
    赋值 (密码文本, 文本)
    赋值 (a, 到整数 (寻找文本 (网页内容, “var sertim = ”, , 假)))
    赋值 (临时文本, 取文本中间 (网页内容, 相加 (a, 13), 10))
    赋值 (移位, 求余数 (到整数 (临时文本), 26))
    .计次循环首 (取文本长度 (密码文本), a)
         ' 处理事件 ()
        赋值 (临时文本, 取文本中间 (密码文本, a, 1))
        .如果 (等于 (寻找文本 (密匙, 临时文本, , 假), -1))
            赋值 (真实地址, 相加 (真实地址, 临时文本))
        .否则
            赋值 (b, 寻找文本 (密匙, 临时文本, , 假))
            赋值 (真实地址, 相加 (真实地址, 取文本中间 (密匙, 相减 (b, 移位), 1)))
        .如果结束
        
    .计次循环尾 ()
.如果真结束
返回 (真实地址)

.子程序 LRC歌词解析, 空白型, , 思娇屠虎 QQ:84651849
.参数 歌词, 文本型, , 
.参数 数组上限值, 整数型, 可空, 

.局部变量 a, 空白型, , , 
.局部变量 头, 空白型, , , 
.局部变量 中, 空白型, , , 
.局部变量 尾, 空白型, , , 
.局部变量 文本, 文本型, , , 
.局部变量 时间文本, 文本型, , , 
.局部变量 毫秒, 空白型, , "0", 
.局部变量 间隔时间, 空白型, , , 
.局部变量 临时文本, 文本型, , , 
.局部变量 歌词文本, 文本型, , , 
.局部变量 临时歌词, 文本型, , "0", 
.局部变量 正则, 未知类型0x20001, , , 
.局部变量 结果, 未知类型0x20002, , "0", 

 ' 除去一些无用的东东，如换行、空格、网址
赋值 (歌词, 子文本替换 (歌词, 字符 (13), “”, , , 假)) ' 换掉换行符13
赋值 (歌词, 子文本替换 (歌词, 字符 (10), “”, , , 假)) ' 换掉换行符10

 ' 歌词 ＝ 正则.替换 (歌词, “http.*?\.\w{2,3}|www\..*?\.\w{2,3}”, 1, , 真, 真)  ' 试了N次，不用会―_―!!!
正则.未知支持库函数_3 (“htt.*?\.\w{2,3}|www\..*?\.\w{2,3}”, 假) ' 查找以http开头，二或三个字母结尾或www相关的网址

 ' 正则.创建 (“(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?”, 假)
 ' 结果 ＝ 正则.搜索全部 (歌词)

 ' .计次循环首 (取数组成员数 (结果), a)
     ' 歌词 ＝ 子文本替换 (歌词, 结果 [a].取匹配文本 (歌词, ), , , , 假)
 ' .计次循环尾 ()

 ' 正则.创建 (“www\..*?\.\w{2,3}”, 假)

赋值 (结果, 正则.未知支持库函数_16 (歌词))
.计次循环首 (取数组成员数 (结果), a)
    赋值 (歌词, 子文本替换 (歌词, 结果.未知支持库函数_11 ( [a], 歌词, ), , , , 假))
.计次循环尾 ()
.如果真 (小于 (数组上限值, 1)) ' 有时候取得的秒数不准
    赋值 (数组上限值, 300)
.如果真结束
重定义数组 (LRC歌词, 假, 相乘 (数组上限值, 2)) ' 有些文件取出值有问题
.判断循环首 (不等于 (中, -1))
    处理事件 ()
    清除数组 (毫秒)
    赋值 (头, 寻找文本 (歌词, “[”, 尾, 真))
    赋值 (尾, 寻找文本 (歌词, “]”, 头, 真))
    
    赋值 (时间文本, 取文本中间 (歌词, 相加 (头, 1), 相减 (尾, 头, 1)))
    赋值 (文本, 取文本左边 (时间文本, 1))
    .如果真 (或者 (等于 (文本, “0”), 大于 (到整数 (文本), 0))) ' 如果是时间
        加入成员 (毫秒, 相加 (相乘 (到整数 (取文本左边 (时间文本, 2)), 60), 到整数 (取文本中间 (时间文本, 4, 2))))
    .如果真结束
    赋值 (中, 寻找文本 (歌词, “[”, 尾, 真)) ' 接着找
    赋值 (歌词文本, 删首尾空 (取文本中间 (歌词, 相加 (尾, 1), 相减 (中, 尾, 1))))
    
     ' 连续时间的歌词
    .判断循环首 (并且 (不等于 (中, -1), 小于 (取文本长度 (歌词文本), 2))) ' 换行符为1个字符
        赋值 (头, 寻找文本 (歌词, “[”, 尾, 真))
        赋值 (尾, 寻找文本 (歌词, “]”, 头, 真))
        赋值 (时间文本, 取文本中间 (歌词, 相加 (头, 1), 相减 (尾, 头, 1)))
        赋值 (文本, 取文本左边 (时间文本, 1))
        .如果真 (或者 (等于 (文本, “0”), 大于 (到整数 (文本), 0))) ' 如果是时间
            加入成员 (毫秒, 相加 (相乘 (到整数 (取文本左边 (时间文本, 2)), 60), 到整数 (取文本中间 (时间文本, 4, 2)))) ' 以秒为单位
        .如果真结束
        赋值 (中, 寻找文本 (歌词, “[”, 尾, 真)) ' 接着找
        赋值 (歌词文本, 删首尾空 (取文本中间 (歌词, 相加 (尾, 1), 相减 (中, 尾, 1))))
    .判断循环尾 ()
    .计次循环首 (取数组成员数 (毫秒), a)
        .如果真 (大于 (毫秒 [a], 0))
            .如果 (大于或等于 (取数组成员数 (LRC歌词), 毫秒 [a])) ' 用来防止特殊时候出错
                赋值 (LRC歌词 [毫秒] [a], 歌词文本)
            .否则
                重定义数组 (LRC歌词, 真, 毫秒 [a])
                赋值 (LRC歌词 [毫秒] [a], 歌词文本)
            .如果结束
            
        .如果真结束
        
    .计次循环尾 ()
.判断循环尾 ()
重定义数组 (LRC歌词_终, 假, 0)
重定义数组 (LRC歌词_间隔时间, 假, 0)
赋值 (文本, “”)
.计次循环首 (取数组成员数 (LRC歌词), a) ' 加上歌词的行号
    处理事件 ()
    赋值 (临时文本, LRC歌词 [a])
    .如果真 (并且 (大于 (取文本长度 (LRC歌词 [a]), 0), 不等于 (文本, 临时文本))) ' 过滤掉重复的句子
        赋值 (文本, 临时文本)
        赋值 (间隔时间, 相加 (间隔时间, 1))
        .如果 (小于 (间隔时间, 10))
            赋值 (LRC歌词 [a], 相加 (LRC歌词 [a], “00”, 到文本 (间隔时间)))
        .否则
            .如果 (小于 (间隔时间, 100))
                赋值 (LRC歌词 [a], 相加 (LRC歌词 [a], “0”, 到文本 (间隔时间)))
            .否则
                赋值 (LRC歌词 [a], 相加 (LRC歌词 [a], 到文本 (间隔时间)))
            .如果结束
            
        .如果结束
        
        加入成员 (LRC歌词_终, LRC歌词 [a])
        加入成员 (LRC歌词_间隔时间, 相减 (a, 头))
        赋值 (头, a)
    .如果真结束
    
.计次循环尾 ()
.如果真 (大于 (取数组成员数 (LRC歌词_终), 1)) ' 没有歌词就不执行后面的代码
    .计次循环首 (20, a) ' 在尾加20个空行，用于实时显示用
        加入成员 (LRC歌词_终, 到文本 (相加 (间隔时间, a)))
        加入成员 (LRC歌词_间隔时间, 5)
    .计次循环尾 ()
.如果真结束


.子程序 读媒体文件信息, 音乐文件信息, , 
.参数 路径, 文本型, , 

.局部变量 媒体信息, 音乐文件信息, , , 

.判断开始 (等于 (到大写 (取文本右边 (路径, 3)), “MP3”))
    .如果真 (等于 (读取MP3文件ID3V2信息 (路径, 媒体信息), 假)) ' 没有V2信息
        读取MP3文件ID3V1信息 (路径, 媒体信息)
    .如果真结束
    .如果真 (等于 (媒体信息.歌曲名, “”)) ' 读取为空
        读取MP3文件ID3V1信息 (路径, 媒体信息)
    .如果真结束
    
.判断 (等于 (到大写 (取文本右边 (路径, 3)), “WMA”))
    读取WMA文件信息 (路径, 媒体信息)
.默认
    
.判断结束

返回 (媒体信息)

.子程序 UNICODE转ANSI, 文本型, , 
.参数 欲转换的字节集, 字节集, , 

.局部变量 ANSI, 文本型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, WideCharToMultiByte (1, 0, 欲转换的字节集, -1, 字符 (0), 0, 字符 (0), 假))
赋值 (ANSI, 取空白文本 (长度))
WideCharToMultiByte (1, 0, 欲转换的字节集, -1, ANSI, 长度, 字符 (0), 假)
返回 (ANSI)

.子程序 ANSI转UNICODE, 字节集, , 
.参数 ASCII文本, 文本型, , 

.局部变量 Unicode字节集, 字节集, , , 
.局部变量 Unicode长度, 整数型, , , 

赋值 (Unicode长度, MultiByteToWideChar (936, 0, ASCII文本, -1, {  }, 0))
赋值 (Unicode字节集, 取空白字节集 (相乘 (Unicode长度, 2)))
MultiByteToWideChar (936, 0, ASCII文本, -1, Unicode字节集, Unicode长度)
返回 (Unicode字节集)


.子程序 UTF8转UNICODE, 字节集, , 
.参数 欲转换的字节集, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 Unicode字节集, 字节集, , , 

赋值 (长度, MultiByteToWideChar1 (65001, 0, 到文本 (欲转换的字节集), -1, {  }, 0))
赋值 (Unicode字节集, 取空白字节集 (相乘 (长度, 2)))
MultiByteToWideChar1 (65001, 0, 到文本 (欲转换的字节集), -1, Unicode字节集, 长度)
返回 (Unicode字节集)



.子程序 UNICODE转UTF8, 字节集, , 
.参数 欲转换的字节集, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 UTF8, 字节集, , , 

赋值 (长度, WideCharToMultiByte1 (65001, 0, 欲转换的字节集, -1, {  }, 0, 字符 (0), 假))
赋值 (UTF8, 取空白字节集 (相减 (长度, 1)))
WideCharToMultiByte1 (65001, 0, 欲转换的字节集, -1, UTF8, 长度, 字符 (0), 假)
返回 (UTF8)


.子程序 格式化时间, 文本型, , 
.参数 时间, 整数型, , 

.局部变量 时间1, 文本型, , , 
.局部变量 时间2, 文本型, , , 

.如果 (小于 (整除 (时间, 60), 10))
    赋值 (时间1, 相加 (“0”, 到文本 (整除 (时间, 60))))
.否则
    赋值 (时间1, 到文本 (整除 (时间, 60)))
.如果结束
.如果 (小于 (求余数 (时间, 60), 10))
    赋值 (时间2, 相加 (“0”, 到文本 (四舍五入 (求余数 (时间, 60), ))))
.否则
    赋值 (时间2, 到文本 (四舍五入 (求余数 (时间, 60), )))
.如果结束
返回 (相加 (时间1, “:”, 时间2))
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 计算CRC, 整数型, , 
.参数 CRC, 整数型, , 
.参数 data, 字节集, , 

.局部变量 i, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (长度, 取字节集长度 (data))
.计次循环首 (长度, i)
    赋值 (CRC, 位异或 (左移 (CRC, 8), CRC表 [相加 (位异或 (位与 (右移 (CRC, 24), 255), 到整数 (data [i])), 1)]))
.计次循环尾 ()
返回 (CRC)


.子程序 判断编码类型, 文本型, , 
.参数 字节集, 字节集, , 

.局部变量 返回文本, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 

.判断开始 (等于 (取字节集左边 (字节集, 1), { 0 }))
    .如果 (或者 (等于 (到文本 (取字节集中间 (字节集, 2, 3)), “chi”), 等于 (到文本 (取字节集中间 (字节集, 2, 3)), “eng”)))
        .计次循环首 (相减 (取字节集长度 (字节集), 4), i)
            .如果真 (不等于 (取字节集中间 (字节集, 相加 (i, 4), 1), { 0 }))
                赋值 (临时字节集, 相加 (临时字节集, 取字节集中间 (字节集, 相加 (i, 4), 1)))
            .如果真结束
            
        .计次循环尾 ()
        赋值 (返回文本, 到文本 (临时字节集))
    .否则
        .计次循环首 (取字节集长度 (字节集), i)
            .如果真 (不等于 (取字节集中间 (字节集, i, 1), { 0 }))
                赋值 (临时字节集, 相加 (临时字节集, 取字节集中间 (字节集, i, 1)))
            .如果真结束
            
        .计次循环尾 ()
        赋值 (返回文本, 到文本 (临时字节集))
    .如果结束
    
.判断 (或者 (等于 (取字节集左边 (字节集, 1), { 1 }), 等于 (取字节集左边 (字节集, 1), { 2 })))
    .如果 (或者 (等于 (到文本 (取字节集中间 (字节集, 2, 3)), “chi”), 等于 (到文本 (取字节集中间 (字节集, 2, 3)), “eng”)))
        赋值 (临时字节集, 取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 4)))
    .否则
        赋值 (临时字节集, 取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 1)))
    .如果结束
    .计次循环首 (取字节集长度 (临时字节集), )
        .如果真 (等于 (取字节集左边 (临时字节集, 1), { 0 }))
            赋值 (临时字节集, 取字节集右边 (临时字节集, 相减 (取字节集长度 (临时字节集), 1)))
        .如果真结束
        
    .计次循环尾 ()
    .判断开始 (等于 (取字节集左边 (临时字节集, 2), { 255, 254 }))
        .变量循环首 (3, 取字节集长度 (临时字节集), 1, i)
            .如果真 (并且 (等于 (求余数 (i, 2), 0), 小于 (临时字节集 [相减 (i, 1)], 255)))
                赋值 (返回文本, 相加 (返回文本, UNICODE转ANSI (到字节集 (位或 (临时字节集 [相减 (i, 1)], 左移 (临时字节集 [i], 8))))))
            .如果真结束
            
        .变量循环尾 ()
    .判断 (等于 (取字节集左边 (临时字节集, 2), { 254, 255 }))
        .变量循环首 (3, 取字节集长度 (临时字节集), 1, i)
            .如果真 (并且 (等于 (求余数 (i, 2), 0), 小于 (临时字节集 [i], 255)))
                赋值 (返回文本, 相加 (返回文本, UNICODE转ANSI (到字节集 (位或 (临时字节集 [i], 左移 (临时字节集 [相减 (i, 1)], 8))))))
            .如果真结束
            
        .变量循环尾 ()
    .默认
        
    .判断结束
    
.判断 (等于 (取字节集左边 (字节集, 1), { 3 }))
    .如果 (或者 (等于 (到文本 (取字节集中间 (字节集, 2, 3)), “chi”), 等于 (到文本 (取字节集中间 (字节集, 2, 3)), “eng”)))
        .如果 (等于 (取字节集中间 (字节集, 5, 1), { 0 }))
            赋值 (返回文本, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 5)))))
        .否则
            赋值 (返回文本, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 4)))))
        .如果结束
        
    .否则
        赋值 (返回文本, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (字节集, 相减 (取字节集长度 (字节集), 1)))))
    .如果结束
    
.默认
    
.判断结束
返回 (返回文本)


.子程序 到二进制, 文本型, , 
.参数 十进制, 整数型, , 

.局部变量 i, 整数型, , , 
.局部变量 w, 文本型, , , 
.局部变量 z, 文本型, , , 

.计次循环首 (8, i)
    赋值 (z, 到文本 (选择 (等于 (位与 (十进制, 求次方 (2, 相减 (i, 1))), 0), 0, 1)))
    赋值 (w, 相加 (z, w))
.计次循环尾 ()
返回 (w)


.子程序 二进制到十进制, 整数型, , 
.参数 二进制数, 文本型, , 

.局部变量 长度, 整数型, , , 
.局部变量 n, 整数型, , , 
.局部变量 临时结果1, 文本型, , , 
.局部变量 临时结果2, 整数型, , , 

赋值 (长度, 取文本长度 (二进制数))
.计次循环首 (长度, n)
    赋值 (临时结果1, 取文本中间 (二进制数, n, 1))
    赋值 (临时结果2, 相加 (临时结果2, 相乘 (求次方 (2, 相减 (长度, n)), 到数值 (临时结果1))))
.计次循环尾 ()
返回 (临时结果2)


.子程序 读取WMA文件信息, 逻辑型, , 
.参数 WMA文件名, 文本型, , 
.参数 WMA信息, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 帧头, 字节集, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 节大小, 整数型, , "5", 
.局部变量 i, 整数型, , , 
.局部变量 扩展标签数, 整数型, , , 
.局部变量 扩展标签名大小, 整数型, , , 
.局部变量 扩展标签名, 文本型, , , 
.局部变量 整数标志, 整数型, , , 
.局部变量 扩展标签值大小, 整数型, , , 
.局部变量 帧大小, 整数型, , , 
.局部变量 现行读写位置, 整数型, , , 
.局部变量 hh, 整数型, , , 
.局部变量 ss, 文本型, , "0", 
.局部变量 图片大小, 整数型, , , 
.局部变量 帧头个数, 整数型, , , 
.局部变量 PlayDuration, 长整数型, , , 
.局部变量 Preroll, 长整数型, , , 

.如果真 (等于 (文件是否存在 (WMA文件名), 假))
    返回 (假)
.如果真结束
初始化数据 (WMA信息)
重定义数组 (节大小, 假, 5)
赋值 (文件号, 打开文件 (WMA文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (读入字节集 (文件号, 16), wma文件头)) ' 判读是否WMA文件
    赋值 (标签大小, 取字节集数据 (读入字节集 (文件号, 8), 4, )) ' 读出整个WMA标签的大小
    赋值 (帧头个数, 取字节集数据 (读入字节集 (文件号, 4), 4, ))
    移动读写位置 (文件号, #现行位置, 2) ' 移动到帧的开始地方
    .计次循环首 (帧头个数, )
        赋值 (现行读写位置, 取读写位置 (文件号))
        赋值 (帧头, 读入字节集 (文件号, 16)) ' 读入每个帧头
        赋值 (帧大小, 取字节集数据 (读入字节集 (文件号, 8), 4, )) ' 读出每个帧的大小
        .判断开始 (等于 (帧头, wma标准标签头)) ' 判断是否为标准标签
            .计次循环首 (5, i)
                赋值 (节大小 [i], 取代码 (到文本 (读入字节集 (文件号, 2)), ))
            .计次循环尾 ()
            .计次循环首 (5, i)
                .如果真 (大于 (节大小 [i], 0))
                    .判断开始 (等于 (i, 1))
                        赋值 (WMA信息.歌曲名, UNICODE转ANSI (读入字节集 (文件号, 节大小 [i])))
                    .判断 (等于 (i, 2))
                        赋值 (WMA信息.艺术家, UNICODE转ANSI (读入字节集 (文件号, 节大小 [i])))
                    .判断 (等于 (i, 3))
                        赋值 (WMA信息.版权, UNICODE转ANSI (读入字节集 (文件号, 节大小 [i])))
                    .判断 (等于 (i, 4))
                        赋值 (WMA信息.备注, UNICODE转ANSI (读入字节集 (文件号, 节大小 [i])))
                    .默认
                        
                    .判断结束
                    
                .如果真结束
                
            .计次循环尾 ()
        .判断 (等于 (帧头, wma扩展标签头)) ' 判断是否为扩展标签
            赋值 (扩展标签数, 取代码 (到文本 (读入字节集 (文件号, 2)), )) ' 读出有多少个扩展标签
            .计次循环首 (扩展标签数, i)
                赋值 (扩展标签名大小, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
                赋值 (扩展标签名, UNICODE转ANSI (读入字节集 (文件号, 扩展标签名大小)))
                赋值 (整数标志, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
                赋值 (扩展标签值大小, 取字节集数据 (读入字节集 (文件号, 2), 4, ))
                .如果真 (大于 (扩展标签值大小, 0))
                    .判断开始 (等于 (扩展标签名, wma扩展标签 [1]))
                        赋值 (WMA信息.专辑名称, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [2]))
                        赋值 (WMA信息.编码, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [3]))
                        赋值 (WMA信息.类型, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [4]))
                        赋值 (WMA信息.歌词, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [5]))
                        .如果 (等于 (整数标志, 3))
                            赋值 (WMA信息.FTrack, 到文本 (取代码 (到文本 (读入字节集 (文件号, 4)), )))
                        .否则
                            赋值 (WMA信息.FTrack, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                        .如果结束
                        
                    .判断 (等于 (扩展标签名, wma扩展标签 [6]))
                        赋值 (WMA信息.年代, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [7]))
                        赋值 (WMA信息.网址, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [8]))
                        赋值 (WMA信息.作曲家, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [9]))
                        赋值 (WMA信息.版本, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                    .判断 (等于 (扩展标签名, wma扩展标签 [10]))
                        .如果 (等于 (整数标志, 3))
                            赋值 (WMA信息.音轨, 到文本 (取代码 (到文本 (读入字节集 (文件号, 4)), )))
                        .否则
                            赋值 (WMA信息.音轨, UNICODE转ANSI (读入字节集 (文件号, 扩展标签值大小)))
                        .如果结束
                        
                    .判断 (等于 (扩展标签名, wma扩展标签 [11]))
                        移动读写位置 (文件号, #现行位置, 1)
                        赋值 (图片大小, 取字节集数据 (读入字节集 (文件号, 4), 4, ))
                        移动读写位置 (文件号, #现行位置, 相减 (扩展标签值大小, 图片大小, 5))
                        赋值 (WMA信息.图片, 读入字节集 (文件号, 图片大小))
                    .默认
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断结束
                    
                .如果真结束
                
            .计次循环尾 ()
            移动读写位置 (文件号, , 相加 (现行读写位置, 帧大小)) ' 确保指针移到扩展标签的下一个帧
        .判断 (等于 (帧头, wma编码标签头))
            移动读写位置 (文件号, #现行位置, 22)
            赋值 (hh, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
            赋值 (WMA信息.编码, UNICODE转ANSI (读入字节集 (文件号, 相乘 (hh, 2))))
            赋值 (hh, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
            赋值 (ss, 分割文本 (UNICODE转ANSI (读入字节集 (文件号, 相乘 (hh, 2))), , ))
            赋值 (WMA信息.比特率, 删首尾空 (ss [1]))
            赋值 (WMA信息.码率, 删首尾空 (ss [2]))
            .判断开始 (不等于 (寻找文本 (ss [3], “stereo”, , 假), 1))
                赋值 (WMA信息.声道, “立体声”)
            .判断 (不等于 (寻找文本 (ss [3], “mono”, , 假), 1))
                赋值 (WMA信息.声道, “单声道”)
            .默认
                赋值 (WMA信息.声道, “未知”)
            .判断结束
            移动读写位置 (文件号, , 相加 (现行读写位置, 帧大小))
        .判断 (等于 (帧头, wma文件属性头))
            移动读写位置 (文件号, #现行位置, 40)
            赋值 (PlayDuration, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
            移动读写位置 (文件号, #现行位置, 8)
            赋值 (Preroll, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
            .如果真 (不等于 (相除 (位与 (取字节集数据 (读入字节集 (文件号, 4), #整数型, ), 1), 1), 1))
                赋值 (WMA信息.时间, 格式化时间 (相除 (相减 (相除 (PlayDuration, 10000), Preroll), 1000)))
            .如果真结束
             ' 移动读写位置 (文件号, #现行位置, 8)
             ' 输出调试文本 (到文本 (取字节集数据 (读入字节集 (文件号, 4), #整数型, ) ＼ 1000) ＋ “kbps”)
            移动读写位置 (文件号, , 相加 (现行读写位置, 帧大小)) ' 确保指针移到扩展标签的下一个帧
        .默认
            移动读写位置 (文件号, , 相加 (现行读写位置, 帧大小)) ' 将指针移到下一个帧
        .判断结束
        
    .计次循环尾 ()
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
.如果结束



.子程序 保存WMA文件信息, 逻辑型, , 
.参数 WMA文件名, 文本型, , 
.参数 wma信息, 音乐文件信息, , 

.局部变量 临时标准帧信息, 字节集, , , 
.局部变量 临时标准帧名大小, 字节集, , , 
.局部变量 帧大小, 整数型, , , 
.局部变量 标准帧, 字节集, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 帧头, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 tt, 整数型, , "10", 
.局部变量 扩展帧, 字节集, , "10", 
.局部变量 扩展帧内现在位置, 整数型, , , 
.局部变量 扩展标签名大小, 整数型, , , 
.局部变量 扩展标签名, 文本型, , , 
.局部变量 整数标志, 整数型, , , 
.局部变量 扩展标签值大小, 整数型, , , 
.局部变量 增减大小, 整数型, , , 
.局部变量 aa, 文本型, , "10", 
.局部变量 扩展标签数, 整数型, , , 
.局部变量 帧头1, 字节集, , , 
.局部变量 帧大小1, 整数型, , , 
.局部变量 总标签大小, 整数型, , , 
.局部变量 扩展标签总大小, 整数型, , , 
.局部变量 临时扩展标签大小, 整数型, , , 
.局部变量 临时扩展字节集, 字节集, , , 
.局部变量 帧的开始地方, 整数型, , , 
.局部变量 bb, 文本型, , "4", 
.局部变量 临时标签, 字节集, , , 
.局部变量 图片大小, 整数型, , , 
.局部变量 帧头个数, 整数型, , , 

赋值 (aa [1], wma信息.专辑名称)
赋值 (aa [2], wma信息.编码)
赋值 (aa [3], wma信息.类型)
赋值 (aa [4], wma信息.歌词)
赋值 (aa [5], wma信息.FTrack)
赋值 (aa [6], wma信息.年代)
赋值 (aa [7], wma信息.网址)
赋值 (aa [8], wma信息.作曲家)
赋值 (aa [9], wma信息.版本)
赋值 (aa [10], wma信息.音轨)
赋值 (bb [1], wma信息.歌曲名)
赋值 (bb [2], wma信息.艺术家)
赋值 (bb [3], wma信息.版权)
赋值 (bb [4], wma信息.备注)
 ' 重组标准标签
.计次循环首 (4, i)
    .如果 (不等于 (bb [i], “”))
        赋值 (临时标准帧信息, 相加 (临时标准帧信息, ANSI转UNICODE (bb [i])))
        赋值 (临时标准帧名大小, 相加 (临时标准帧名大小, 到字节集 (到短整数 (取字节集长度 (ANSI转UNICODE (bb [i]))))))
    .否则
        赋值 (临时标准帧名大小, 相加 (临时标准帧名大小, 到字节集 (到短整数 (0))))
    .如果结束
    
.计次循环尾 ()
赋值 (临时标准帧名大小, 相加 (临时标准帧名大小, 到字节集 (到短整数 (0))))
赋值 (帧大小, 相加 (取字节集长度 (临时标准帧信息), 10, 24))
赋值 (标准帧, 相加 (wma标准标签头, 到字节集 (到长整数 (帧大小)), 临时标准帧名大小, 临时标准帧信息))
赋值 (总标签大小, 相加 (总标签大小, 帧大小))
 ' 重组扩展标签
.计次循环首 (10, i)
    .如果真 (不等于 (aa [i], “”))
        赋值 (tt [i], 取字节集长度 (ANSI转UNICODE (aa [i])))
        赋值 (扩展帧 [i], 相加 (到字节集 (到短整数 (取字节集长度 (ANSI转UNICODE (wma扩展标签 [i])))), ANSI转UNICODE (wma扩展标签 [i]), 到字节集 (到短整数 (0)), 到字节集 (到短整数 (tt [i])), ANSI转UNICODE (aa [i])))
        赋值 (临时扩展标签大小, 相加 (临时扩展标签大小, 取字节集长度 (ANSI转UNICODE (wma扩展标签 [i])), tt [i], 6))
        赋值 (临时扩展字节集, 相加 (临时扩展字节集, 扩展帧 [i]))
        赋值 (扩展标签数, 相加 (扩展标签数, 1))
    .如果真结束
    
.计次循环尾 ()
 ' 判断是否添加专辑图片
.如果真 (不等于 (wma信息.图片, {  }))
    赋值 (图片大小, 取字节集长度 (wma信息.图片))
    赋值 (临时扩展标签大小, 相加 (临时扩展标签大小, 取字节集长度 (ANSI转UNICODE (wma扩展标签 [11])), 6, 图片大小, 29))
    赋值 (临时扩展字节集, 相加 (临时扩展字节集, 到字节集 (到短整数 (取字节集长度 (ANSI转UNICODE (wma扩展标签 [11])))), ANSI转UNICODE (wma扩展标签 [11]), { 1, 0 }, 到字节集 (到短整数 (相加 (图片大小, 29))), { 0 }, 到字节集 (到整数 (图片大小)), { 105, 0, 109, 0, 97, 0, 103, 0, 101, 0, 47, 0, 106, 0, 112, 0, 101, 0, 103, 0, 0, 0, 0, 0 }, wma信息.图片))
    赋值 (扩展标签数, 相加 (扩展标签数, 1))
.如果真结束
.如果 (文件是否存在 (WMA文件名))
    赋值 (文件号, 打开文件 (WMA文件名, #读写, #禁止写))
    .如果真 (等于 (文件号, 0))
        返回 (假)
    .如果真结束
    .如果真 (等于 (读入字节集 (文件号, 16), wma文件头)) ' 判读是否WMA文件
        赋值 (标签大小, 取字节集数据 (读入字节集 (文件号, 8), 4, )) ' 读出整个WMA标签的大小
        移动读写位置 (文件号, #现行位置, 6) ' 移动到帧的开始地方
        赋值 (帧的开始地方, 取读写位置 (文件号))
        .循环判断首 ()
            赋值 (现在位置, 取读写位置 (文件号))
            赋值 (帧头1, 读入字节集 (文件号, 16)) ' 读入每个帧头
            赋值 (帧大小1, 取字节集数据 (读入字节集 (文件号, 8), 4, )) ' 读出每个帧的大小
            .判断开始 (等于 (帧头1, wma标准标签头))
                移动读写位置 (文件号, #现行位置, 相减 (帧大小1, 24)) ' 跳过标准标签
                赋值 (临时标签, 相加 (临时标签, 标准帧))
            .判断 (等于 (帧头1, wma扩展标签头))
                移动读写位置 (文件号, #现行位置, 2)
                .循环判断首 ()
                    赋值 (扩展帧内现在位置, 取读写位置 (文件号))
                    赋值 (扩展标签名大小, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
                    赋值 (扩展标签名, UNICODE转ANSI (读入字节集 (文件号, 扩展标签名大小)))
                    赋值 (整数标志, 取代码 (到文本 (读入字节集 (文件号, 2)), ))
                    赋值 (扩展标签值大小, 取字节集数据 (读入字节集 (文件号, 2), 4, ))
                    .判断开始 (等于 (扩展标签名, wma扩展标签 [1]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [2]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [3]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [4]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [5]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [6]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [7]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [8]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [9]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [10]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .判断 (等于 (扩展标签名, wma扩展标签 [11]))
                        移动读写位置 (文件号, #现行位置, 扩展标签值大小)
                    .默认
                        移动读写位置 (文件号, , 扩展帧内现在位置)
                        赋值 (临时扩展字节集, 相加 (临时扩展字节集, 读入字节集 (文件号, 相加 (6, 扩展标签名大小, 扩展标签值大小))))
                        赋值 (临时扩展标签大小, 相加 (临时扩展标签大小, 6, 扩展标签名大小, 扩展标签值大小))
                        赋值 (扩展标签数, 相加 (扩展标签数, 1))
                    .判断结束
                    
                .循环判断尾 (小于 (取读写位置 (文件号), 相加 (现在位置, 帧大小1)))
                赋值 (临时扩展字节集, 相加 (到字节集 (到短整数 (扩展标签数)), 临时扩展字节集))
                赋值 (临时扩展标签大小, 相加 (临时扩展标签大小, 2, 24))
                赋值 (临时扩展字节集, 相加 (wma扩展标签头, 到字节集 (到长整数 (临时扩展标签大小)), 临时扩展字节集))
                赋值 (临时标签, 相加 (临时标签, 临时扩展字节集))
                赋值 (总标签大小, 相加 (总标签大小, 临时扩展标签大小))
            .默认
                移动读写位置 (文件号, , 现在位置)
                赋值 (临时标签, 相加 (临时标签, 读入字节集 (文件号, 帧大小1)))
                赋值 (总标签大小, 相加 (总标签大小, 帧大小1))
                赋值 (帧头个数, 相加 (帧头个数, 1))
            .判断结束
            
        .循环判断尾 (小于 (取读写位置 (文件号), 标签大小))
         ' 重新写入总标签大小
        移动读写位置 (文件号, , 相减 (帧的开始地方, 14))
        写出字节集 (文件号, 到字节集 (到长整数 (相加 (总标签大小, 30))))
         ' 重新写入帧头个数
        赋值 (帧头个数, 相加 (帧头个数, 2))
        移动读写位置 (文件号, , 相减 (帧的开始地方, 6))
        写出字节集 (文件号, 到字节集 (帧头个数))
         ' 删除原来的标签，重新写入标签
        移动读写位置 (文件号, , 帧的开始地方)
        删除数据 (文件号, 相减 (标签大小, 30))
        移动读写位置 (文件号, , 帧的开始地方)
        插入字节集 (文件号, 临时标签)
    .如果真结束
    关闭文件 (文件号)
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 读取APE文件信息, 逻辑型, , 
.参数 APE文件名, 文本型, , 
.参数 ape信息, 音乐文件信息, , 

.局部变量 文件字节集, 字节集, , , 
.局部变量 Ape位置, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 位置缓存, 整数型, , , 
.局部变量 长度, 长整数型, , , 
.局部变量 APE大小, 整数型, , , 
.局部变量 帧数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 帧大小, 整数型, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 id3v1大小, 整数型, , , 
.局部变量 ID3V2大小, 整数型, , , 
.局部变量 CompressionLevel, 整数型, , , 
.局部变量 FormatFlags, 整数型, , , 
.局部变量 BlocksPerFrame, 整数型, , , 
.局部变量 FinalFrameBlocks, 整数型, , , 
.局部变量 TotalFrames, 整数型, , , 
.局部变量 BitsPerSample, 整数型, , , 
.局部变量 Channels, 整数型, , , 
.局部变量 SampleRate, 整数型, , , 
.局部变量 Samples, 整数型, , , 
.局部变量 Version, 整数型, , , 

.如果真 (等于 (文件是否存在 (APE文件名), 假))
    返回 (假)
.如果真结束
初始化数据 (ape信息)
赋值 (id3v1大小, 是否有ID3V1标签 (APE文件名))
赋值 (ID3V2大小, 是否有ID3V2标签 (APE文件名))
赋值 (文件号, 打开文件 (APE文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移动读写位置 (文件号, , ID3V2大小)
.如果真 (等于 (到文本 (读入字节集 (文件号, 3)), “MAC”)) ' 判断是否ape文件，先读出音频信息
    移动读写位置 (文件号, #现行位置, 1)
    赋值 (Version, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
    .如果 (大于或等于 (Version, 3980))
        移动读写位置 (文件号, #现行位置, 46)
        赋值 (CompressionLevel, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (FormatFlags, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (BlocksPerFrame, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        赋值 (FinalFrameBlocks, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        赋值 (TotalFrames, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        赋值 (BitsPerSample, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (Channels, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (SampleRate, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
    .否则
        赋值 (CompressionLevel, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (FormatFlags, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (Channels, 取字节集数据 (读入字节集 (文件号, 2), #整数型, ))
        赋值 (SampleRate, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        移动读写位置 (文件号, #现行位置, 8)
        赋值 (TotalFrames, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        赋值 (FinalFrameBlocks, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        .判断开始 (大于或等于 (Version, 3950))
            赋值 (BlocksPerFrame, 294912)
        .判断 (大于或等于 (Version, 3900))
            赋值 (BlocksPerFrame, 73728)
        .判断 (并且 (大于或等于 (Version, 3800), 等于 (CompressionLevel, 4000)))
            赋值 (BlocksPerFrame, 73728)
        .默认
            赋值 (BlocksPerFrame, 9216)
        .判断结束
        
    .如果结束
    赋值 (Samples, 相加 (相乘 (相减 (TotalFrames, 1), BlocksPerFrame), FinalFrameBlocks))
    赋值 (ape信息.时间, 格式化时间 (相除 (Samples, SampleRate)))
    .判断开始 (等于 (Channels, 1))
        赋值 (ape信息.声道, “单声道”)
    .判断 (等于 (Channels, 2))
        赋值 (ape信息.声道, “立体声”)
    .默认
        
    .判断结束
    赋值 (ape信息.码率, 到文本 (SampleRate))
    赋值 (ape信息.比特率, 到文本 (BitsPerSample))
    赋值 (ape信息.编码, 相加 (“Monkey's Audio ”, 到文本 (相除 (Version, 1000))))
.如果真结束
移动读写位置 (文件号, #文件尾, 负 (相加 (id3v1大小, 32))) ' 开始读取标签信息,标签脚占32个字节
.如果 (等于 (到文本 (读入字节集 (文件号, 8)), “APETAGEX”)) ' 判断是否有标签
    移动读写位置 (文件号, #现行位置, 4)
    赋值 (Ape位置, 取字节集数据 (读入字节集 (文件号, 4), #整数型, )) ' 读出标签的大小(包括标签脚)
    移动读写位置 (文件号, #文件尾, 负 (相加 (Ape位置, id3v1大小))) ' 移到标签内容开始地方
    赋值 (文件字节集, 读入字节集 (文件号, 相减 (Ape位置, 32)))
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 89, 101, 97, 114, 0 }, )) ' 寻找“Year”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.年代, 到文本 (取字节集中间 (文件字节集, 相加 (位置缓存, 5), 长度)))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 65, 108, 98, 117, 109, 0 }, )) ' 寻找“Album”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.专辑名称, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 6), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 65, 114, 116, 105, 115, 116, 0 }, )) ' 寻找“Artist”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.艺术家, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 7), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 67, 111, 112, 121, 114, 105, 103, 104, 116, 0 }, )) ' 寻找“Copyright”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.版权, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 10), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 67, 111, 109, 109, 101, 110, 116, 0 }, )) ' 寻找“Comment”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.备注, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 8), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 71, 101, 110, 114, 101, 0 }, )) ' 寻找“Genre”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.类型, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 6), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 84, 105, 116, 108, 101, 0 }, )) ' 寻找“Title”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.歌曲名, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 6), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 84, 114, 97, 99, 107, 0 }, )) ' 寻找“Track”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.音轨, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 6), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 76, 121, 114, 105, 99, 115, 0 }, )) ' 寻找“Lyrics”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.歌词, UNICODE转ANSI (UTF8转UNICODE (取字节集中间 (文件字节集, 相加 (位置缓存, 7), 长度))))
    .如果真结束
    赋值 (位置缓存, 寻找字节集 (文件字节集, { 67, 111, 118, 101, 114 }, )) ' 寻找“Cover”
    .如果真 (不等于 (位置缓存, -1))
        赋值 (长度, 取字节集数据 (取字节集中间 (文件字节集, 相减 (位置缓存, 8), 8), #长整数型, ))
        赋值 (ape信息.图片, 取字节集中间 (文件字节集, 相加 (位置缓存, 40), 长度))
    .如果真结束
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
    
.如果结束





.子程序 保存APE文件信息, 逻辑型, , 
.参数 APE文件名, 文本型, , 
.参数 ape, 音乐文件信息, , 

.局部变量 aa, 文本型, , "9", 
.局部变量 i, 整数型, , , 
.局部变量 临时标签, 字节集, , , 
.局部变量 标签大小, 整数型, , "9", 
.局部变量 总标签大小, 整数型, , , 
.局部变量 标签个数, 整数型, , , 
.局部变量 bb, 文本型, , "9", 
.局部变量 文件号, 整数型, , , 
.局部变量 Ape位置, 整数型, , , 
.局部变量 跳过位置, 整数型, , , 
.局部变量 id3v1标签大小, 整数型, , , 

 ' 重组标签
赋值 (aa [1], ape.歌曲名)
赋值 (aa [2], ape.艺术家)
赋值 (aa [3], ape.专辑名称)
赋值 (aa [4], ape.年代)
赋值 (aa [5], ape.音轨)
赋值 (aa [6], ape.类型)
赋值 (aa [7], ape.备注)
赋值 (aa [8], ape.版权)
赋值 (aa [9], ape.歌词)
赋值 (bb [1], “Title”)
赋值 (bb [2], “Artist”)
赋值 (bb [3], “Album”)
赋值 (bb [4], “Year”)
赋值 (bb [5], “Track”)
赋值 (bb [6], “Genre”)
赋值 (bb [7], “Comment”)
赋值 (bb [8], “Copyright”)
赋值 (bb [9], “Lyrics”)
.计次循环首 (取数组成员数 (aa), i)
    .如果真 (不等于 (aa [i], “”))
        赋值 (标签大小 [i], 取字节集长度 (UNICODE转UTF8 (ANSI转UNICODE (aa [i]))))
        赋值 (临时标签, 相加 (临时标签, 到字节集 (到长整数 (标签大小 [i])), 到字节集 (bb [i]), { 0 }, UNICODE转UTF8 (ANSI转UNICODE (aa [i]))))
        赋值 (总标签大小, 相加 (总标签大小, 9, 标签大小 [i], 取字节集长度 (到字节集 (bb [i]))))
        赋值 (标签个数, 相加 (标签个数, 1))
    .如果真结束
    
.计次循环尾 ()
赋值 (临时标签, 相加 (到字节集 (“APETAGEX”), 到字节集 (到整数 (2000)), 到字节集 (到整数 (相加 (32, 总标签大小))), 到字节集 (到整数 (标签个数)), { 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0 }, 临时标签, 到字节集 (“APETAGEX”), 到字节集 (到整数 (2000)), 到字节集 (到整数 (相加 (32, 总标签大小))), 到字节集 (到整数 (标签个数)), { 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0 }))
.如果 (文件是否存在 (APE文件名))
    赋值 (跳过位置, 是否有ID3V1标签 (APE文件名))
    赋值 (文件号, 打开文件 (APE文件名, #读写, #禁止写))
    .如果真 (等于 (文件号, 0))
        返回 (假)
    .如果真结束
    移动读写位置 (文件号, #文件尾, 负 (相加 (32, 跳过位置)))
    .如果 (等于 (到文本 (读入字节集 (文件号, 8)), “APETAGEX”)) ' 判断是否有标签类,有就删除原来的标签,没有就写入
        移动读写位置 (文件号, #现行位置, 4)
        赋值 (Ape位置, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        移动读写位置 (文件号, #文件尾, 负 (相加 (Ape位置, 32, 跳过位置)))
        .如果 (等于 (到文本 (读入字节集 (文件号, 8)), “APETAGEX”))
            移动读写位置 (文件号, #文件尾, 负 (相加 (Ape位置, 32, 跳过位置)))
            删除数据 (文件号, 相加 (Ape位置, 32))
            移动读写位置 (文件号, #文件尾, 负 (跳过位置))
            插入字节集 (文件号, 临时标签)
        .否则
            移动读写位置 (文件号, #文件尾, 负 (相加 (Ape位置, 跳过位置)))
            删除数据 (文件号, Ape位置)
            移动读写位置 (文件号, #文件尾, 负 (跳过位置))
            插入字节集 (文件号, 临时标签)
        .如果结束
        
    .否则
        移到文件尾 (文件号)
        插入字节集 (文件号, 临时标签)
    .如果结束
    关闭文件 (文件号)
    返回 (真)
.否则
    返回 (假)
.如果结束



.子程序 读取OGG文件信息, 逻辑型, , 
.参数 OGG文件名, 文本型, , 
.参数 ogg, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 a, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 b, 整数型, , , 
.局部变量 分割字节集, 字节集, , "2", 
.局部变量 FBitRateNominal, 整数型, , , 
.局部变量 声道, 整数型, , , 
.局部变量 FsampleRate, 整数型, , , 
.局部变量 Fsmaples, 整数型, , , 
.局部变量 Fduration, 整数型, , , 

.如果真 (等于 (文件是否存在 (OGG文件名), 假))
    返回 (假)
.如果真结束
初始化数据 (ogg)
赋值 (文件号, 打开文件 (OGG文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 4)), “OggS”)) ' 判断是否ogg文件
    移动读写位置 (文件号, #现行位置, 22)
    赋值 (a, 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    移动读写位置 (文件号, #现行位置, a)
    .如果真 (等于 (读入字节集 (文件号, 7), { 1, 118, 111, 114, 98, 105, 115 })) ' 判断是否 $1 + 'vorbis'位置
        移动读写位置 (文件号, #现行位置, 4)
        赋值 (声道, 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        .判断开始 (等于 (声道, 1))
            赋值 (ogg.声道, “单声道”)
        .判断 (等于 (声道, 2))
            赋值 (ogg.声道, “立体声”)
        .判断 (等于 (声道, 5))
            赋值 (ogg.声道, “5.1通道”)
        .判断 (等于 (声道, 3))
            赋值 (ogg.声道, “3通道”)
        .判断 (等于 (声道, 4))
            赋值 (ogg.声道, “4通道”)
        .默认
            赋值 (ogg.声道, “未知”)
        .判断结束
        赋值 (FsampleRate, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        赋值 (ogg.码率, 到文本 (FsampleRate))
        移动读写位置 (文件号, #现行位置, 4)
        赋值 (FBitRateNominal, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
        移动读写位置 (文件号, #现行位置, 32)
        赋值 (a, 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        移动读写位置 (文件号, #现行位置, a)
        .如果真 (等于 (读入字节集 (文件号, 7), { 3, 118, 111, 114, 98, 105, 115 })) ' 判断是否 $3 + 'vorbis'位置
            赋值 (a, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
            赋值 (ogg.编码, 相加 (“Vorbis(”, 到文本 (读入字节集 (文件号, a)), “)”))
            赋值 (a, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
            .计次循环首 (a, i)
                赋值 (b, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
                清除数组 (分割字节集)
                赋值 (分割字节集, 分割字节集 (读入字节集 (文件号, b), { 61 }, ))
                .判断开始 (等于 (到文本 (分割字节集 [1]), “TITLE”))
                    赋值 (ogg.歌曲名, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “ARTIST”))
                    赋值 (ogg.艺术家, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “ALBUM”))
                    赋值 (ogg.专辑名称, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “TRACKNUMBER”))
                    赋值 (ogg.音轨, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “DATE”))
                    赋值 (ogg.年代, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “GENRE”))
                    赋值 (ogg.类型, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “COMMENT”))
                    赋值 (ogg.备注, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “PERFORMER”))
                    赋值 (ogg.演奏者, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “DESCRIPTION”))
                    赋值 (ogg.描述, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .判断 (等于 (到文本 (分割字节集 [1]), “LYRICS”))
                    赋值 (ogg.歌词, UNICODE转ANSI (UTF8转UNICODE (分割字节集 [2])))
                .默认
                    
                .判断结束
                
            .计次循环尾 ()
        .如果真结束
        
    .如果真结束
    移到文件尾 (文件号)
    .计次循环首 (12500, i)
        移动读写位置 (文件号, #文件尾, 负 (相加 (i, 4)))
        .如果真 (等于 (到文本 (读入字节集 (文件号, 4)), “OggS”)) ' 寻找最后一个块
            移动读写位置 (文件号, #现行位置, 1)
            .如果真 (等于 (取字节集数据 (读入字节集 (文件号, 1), #整数型, ), 4))
                赋值 (Fsmaples, 取字节集数据 (读入字节集 (文件号, 8), #长整数型, ))
                跳出循环 ()
            .如果真结束
            
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (大于 (Fsmaples, 0))
        .如果 (大于 (FsampleRate, 0))
            赋值 (Fduration, 相除 (Fsmaples, FsampleRate))
            赋值 (ogg.时间, 格式化时间 (Fduration))
        .否则
            赋值 (ogg.时间, 到文本 (0))
        .如果结束
        
    .如果真结束
    .如果真 (大于 (四舍五入 (相乘 (相除 (Fsmaples, FsampleRate), 1000), ), 0))
        赋值 (ogg.比特率, 到文本 (四舍五入 (相乘 (相除 (取文件长度 (文件号), 四舍五入 (相乘 (相除 (Fsmaples, FsampleRate), 1000), ), 125), 1000), )))
    .如果真结束
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
.如果结束




.子程序 保存OGG文件信息, 逻辑型, , 
.参数 OGG文件名, 文本型, , 
.参数 ogg, 音乐文件信息, , 

.局部变量 aa, 文本型, , "11", 
.局部变量 bb, 文本型, , "11", 
.局部变量 i, 整数型, , , 
.局部变量 长度, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 标签数, 整数型, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 临时字节集1, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 pack大小, 整数型, , "0", 
.局部变量 定位, 整数型, , , 
.局部变量 临时字节集2, 字节集, , , 
.局部变量 tag大小, 整数型, , , 
.局部变量 b, 字节集, , , 
.局部变量 读取长度, 整数型, , , 
.局部变量 y, 整数型, , , 
.局部变量 临时字节集长度, 整数型, , , 
.局部变量 临时字节集长度个数, 整数型, , , 
.局部变量 LacingValues, 字节集, , , 
.局部变量 页头, 字节集, , , 
.局部变量 crc, 整数型, , , 
.局部变量 移动长度, 整数型, , , 
.局部变量 写入位置, 整数型, , , 

.如果真 (等于 (文件是否存在 (OGG文件名), 假))
    返回 (假)
.如果真结束
赋值 (aa [1], ogg.歌曲名)
赋值 (aa [2], ogg.艺术家)
赋值 (aa [3], ogg.专辑名称)
赋值 (aa [4], ogg.年代)
赋值 (aa [5], ogg.音轨)
赋值 (aa [6], ogg.类型)
赋值 (aa [7], ogg.备注)
赋值 (aa [8], ogg.版权)
赋值 (aa [9], ogg.描述)
赋值 (aa [10], ogg.编码)
赋值 (aa [11], ogg.歌词)
赋值 (bb [1], “TITLE”)
赋值 (bb [2], “ARTIST”)
赋值 (bb [3], “ALBUM”)
赋值 (bb [4], “DATE”)
赋值 (bb [5], “TRACKNUMBER”)
赋值 (bb [6], “GENRE”)
赋值 (bb [7], “COMMENT”)
赋值 (bb [8], “COPYRIGHT”)
赋值 (bb [9], “DESCRIPTION”)
赋值 (bb [10], “ENCODER”)
赋值 (bb [11], “LYRICS”)
.计次循环首 (11, i)
    .如果真 (不等于 (aa [i], “”))
        赋值 (长度, 相加 (取字节集长度 (相加 (UNICODE转UTF8 (ANSI转UNICODE (bb [i])), UNICODE转UTF8 (ANSI转UNICODE (aa [i])))), 1))
        赋值 (临时字节集, 相加 (临时字节集, 到字节集 (到整数 (长度)), UNICODE转UTF8 (ANSI转UNICODE (bb [i])), { 61 }, UNICODE转UTF8 (ANSI转UNICODE (aa [i]))))
        赋值 (标签数, 相加 (标签数, 1))
    .如果真结束
    
.计次循环尾 ()
赋值 (临时字节集, 相加 (到字节集 (到整数 (标签数)), 临时字节集, { 1 }))

赋值 (文件号, 打开文件 (OGG文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 4)), “OggS”))
    移到文件首 (文件号)
    赋值 (临时字节集1, 读入字节集 (文件号, 80))
    赋值 (页头, 取字节集右边 (临时字节集1, 22))
    移动读写位置 (文件号, #现行位置, 4)
    赋值 (a, 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    重定义数组 (pack大小, 假, a)
    .计次循环首 (a, i)
        赋值 (pack大小 [i], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    .计次循环尾 ()
    .计次循环首 (a, i)
        赋值 (定位, 相加 (定位, 1))
        .如果真 (小于 (pack大小 [i], 255))
            .变量循环首 (相加 (定位, 1), 取数组成员数 (pack大小), 1, y)
                赋值 (临时字节集2, 相加 (临时字节集2, 到字节集 (到字节 (pack大小 [y]))))
            .变量循环尾 ()
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    移动读写位置 (文件号, #现行位置, 7)
    赋值 (读取长度, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
    移动读写位置 (文件号, #现行位置, -11)
    赋值 (临时字节集, 相加 (读入字节集 (文件号, 相加 (11, 读取长度)), 临时字节集))
    赋值 (临时字节集长度, 取字节集长度 (临时字节集))
    赋值 (临时字节集长度个数, 相加 (整除 (临时字节集长度, 255), 1))
    赋值 (LacingValues, 到字节集 (到字节 (相减 (相加 (临时字节集长度个数, 取数组成员数 (pack大小)), 定位))))
    .如果 (大于 (临时字节集长度个数, 1))
        .计次循环首 (相减 (临时字节集长度个数, 1), )
            赋值 (LacingValues, 相加 (LacingValues, { 255 }))
        .计次循环尾 ()
        赋值 (LacingValues, 相加 (LacingValues, 到字节集 (到字节 (求余数 (临时字节集长度, 255)))))
    .否则
        赋值 (LacingValues, 相加 (LacingValues, 到字节集 (到字节 (临时字节集长度))))
    .如果结束
    赋值 (临时字节集2, 相加 (LacingValues, 临时字节集2))
    赋值 (页头, 相加 (页头, { 0, 0, 0, 0 }, 临时字节集2))
    赋值 (crc, 0) ' 重新计算校验值
    赋值 (crc, 计算CRC (crc, 页头))
    赋值 (crc, 计算CRC (crc, 临时字节集))
    移动读写位置 (文件号, #现行位置, 负 (相加 (11, 读取长度)))
    .计次循环首 (定位, y)
        赋值 (移动长度, 相加 (移动长度, pack大小 [y]))
    .计次循环尾 ()
    移动读写位置 (文件号, #现行位置, 移动长度)
    赋值 (写入位置, 取读写位置 (文件号))
    .变量循环首 (相加 (定位, 1), 取数组成员数 (pack大小), 1, y)
        .如果真 (大于 (pack大小 [y], 0))
            赋值 (crc, 计算CRC (crc, 读入字节集 (文件号, pack大小 [y])))
        .如果真结束
        
    .变量循环尾 ()
    赋值 (临时字节集1, 相加 (临时字节集1, 到字节集 (crc), 临时字节集2, 临时字节集))
    移到文件首 (文件号)
    删除数据 (文件号, 写入位置)
    移到文件首 (文件号)
    插入字节集 (文件号, 临时字节集1)
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
.如果结束




.子程序 读取FLAC文件信息, 逻辑型, , 
.参数 FLAC文件名, 文本型, , 
.参数 flac, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 块类型, 整数型, , , 
.局部变量 块大小, 整数型, , "4", 
.局部变量 块总大小, 整数型, , , 
.局部变量 偏移值, 整数型, , , 
.局部变量 标签数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 标签大小, 整数型, , , 
.局部变量 标签内容2, 字节集, , , 
.局部变量 等号位置, 整数型, , , 
.局部变量 标签内容长度, 整数型, , , 
.局部变量 info, 整数型, , "8", 
.局部变量 FChannels, 整数型, , , 
.局部变量 FSampleRate, 整数型, , , 
.局部变量 FBitsPerSample, 整数型, , , 
.局部变量 FSamples, 整数型, , , 

.如果真 (等于 (文件是否存在 (FLAC文件名), 假))
    返回 (假)
.如果真结束
初始化数据 (flac)
赋值 (文件号, 打开文件 (FLAC文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 4)), “fLaC”)) ' 判断是否flac文件
    .循环判断首 ()
        赋值 (块大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块总大小, 位或 (左移 (块大小 [2], 16), 左移 (块大小 [3], 8), 块大小 [4]))
        .如果真 (大于 (块总大小, 0))
            赋值 (块类型, 位与 (块大小 [1], 127))
            .判断开始 (等于 (块类型, 4)) ' 标签内容块
                赋值 (偏移值, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
                赋值 (flac.编码, 相加 (“Free Lossless Audio Codec(”, 到文本 (读入字节集 (文件号, 偏移值)), “)”))
                赋值 (标签数, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
                .计次循环首 (标签数, i)
                    赋值 (标签大小, 取字节集数据 (读入字节集 (文件号, 4), #整数型, ))
                    赋值 (标签内容2, 读入字节集 (文件号, 标签大小))
                    赋值 (等号位置, 寻找字节集 (标签内容2, { 61 }, ))
                    赋值 (标签内容长度, 取字节集长度 (标签内容2))
                    .判断开始 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “ARTIST”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Artist”)))
                        赋值 (flac.艺术家, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “ALBUM”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Album”)))
                        赋值 (flac.专辑名称, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “TRACKNUMBER”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Tracknumber”)))
                        赋值 (flac.音轨, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “TITLE”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Title”)))
                        赋值 (flac.歌曲名, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “DATE”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Date”)))
                        赋值 (flac.年代, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “GENRE”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Genre”)))
                        赋值 (flac.类型, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “COMMENT”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Comment”)))
                        赋值 (flac.备注, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “LYRICS”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Lyrics”)))
                        赋值 (flac.歌词, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “URL”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Url”)))
                        赋值 (flac.网址, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .判断 (或者 (等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “COPYRIGHT”), 等于 (到文本 (取字节集左边 (标签内容2, 相减 (等号位置, 1))), “Copyright”)))
                        赋值 (flac.版权, UNICODE转ANSI (UTF8转UNICODE (取字节集右边 (标签内容2, 相减 (标签内容长度, 等号位置)))))
                    .默认
                        
                    .判断结束
                    
                .计次循环尾 ()
            .判断 (等于 (块类型, 0)) ' 音频信息块
                赋值 (偏移值, 取读写位置 (文件号))
                移动读写位置 (文件号, #现行位置, 10)
                赋值 (info [1], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [2], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [3], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [4], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [5], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [6], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [7], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (info [8], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
                赋值 (FChannels, 相加 (位与 (右移 (info [3], 1), 7), 1))
                赋值 (FSampleRate, 位或 (左移 (info [1], 12), 左移 (info [2], 4), 右移 (info [3], 4)))
                赋值 (FBitsPerSample, 相加 (位或 (左移 (位与 (info [3], 1), 4), 右移 (info [4], 4)), 1))
                赋值 (FSamples, 位或 (左移 (info [5], 24), 左移 (info [6], 16), 左移 (info [7], 8), info [8]))
                赋值 (flac.时间, 格式化时间 (相除 (FSamples, FSampleRate)))
                赋值 (flac.码率, 到文本 (FSampleRate))
                赋值 (flac.比特率, 到文本 (四舍五入 (相乘 (相除 (取文件长度 (文件号), 相除 (相乘 (FSamples, FChannels, FBitsPerSample), 8)), 100), )))
                .判断开始 (等于 (FChannels, 1))
                    赋值 (flac.声道, “单声道”)
                .判断 (等于 (FChannels, 2))
                    赋值 (flac.声道, “立体声”)
                .默认
                    赋值 (flac.声道, “多声道”)
                .判断结束
                移动读写位置 (文件号, , 相加 (偏移值, 块总大小)) ' 确保移到下一个块
            .默认
                移动读写位置 (文件号, #现行位置, 块总大小) ' 移到下一个块
            .判断结束
            
        .如果真结束
        
    .循环判断尾 (等于 (位与 (块大小 [1], 128), 0)) ' 判断是否最后一个块
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
.如果结束


.子程序 保存FLAC文件信息, 逻辑型, , 
.参数 FLAC文件名, 文本型, , 
.参数 flac, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 aa, 文本型, , "10", 
.局部变量 bb, 文本型, , "10", 
.局部变量 i, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 长度, 整数型, , , 
.局部变量 标签数, 整数型, , , 
.局部变量 临时字节集长度, 整数型, , , 
.局部变量 块大小, 整数型, , "4", 
.局部变量 块总大小, 整数型, , , 
.局部变量 临时字节集1, 字节集, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 块类型, 整数型, , , 

.如果真 (等于 (文件是否存在 (FLAC文件名), 假))
    返回 (假)
.如果真结束
赋值 (aa [1], “ARTIST”)
赋值 (aa [2], “ALBUM”)
赋值 (aa [3], “TITLE”)
赋值 (aa [4], “TRACKNUMBER”)
赋值 (aa [5], “DATE”)
赋值 (aa [6], “GENRE”)
赋值 (aa [7], “COMMENT”)
赋值 (aa [8], “LYRICS”)
赋值 (aa [9], “URL”)
赋值 (aa [10], “COPYRIGHT”)
赋值 (bb [1], flac.艺术家)
赋值 (bb [2], flac.专辑名称)
赋值 (bb [3], flac.歌曲名)
赋值 (bb [4], flac.音轨)
赋值 (bb [5], flac.年代)
赋值 (bb [6], flac.类型)
赋值 (bb [7], flac.备注)
赋值 (bb [8], flac.歌词)
赋值 (bb [9], flac.网址)
赋值 (bb [10], flac.版权)
.计次循环首 (10, i)
    .如果真 (不等于 (bb [i], “”))
        赋值 (长度, 相加 (取字节集长度 (相加 (UNICODE转UTF8 (ANSI转UNICODE (aa [i])), UNICODE转UTF8 (ANSI转UNICODE (bb [i])))), 1))
        赋值 (临时字节集, 相加 (临时字节集, 到字节集 (到整数 (长度)), UNICODE转UTF8 (ANSI转UNICODE (aa [i])), { 61 }, UNICODE转UTF8 (ANSI转UNICODE (bb [i]))))
        赋值 (标签数, 相加 (标签数, 1))
    .如果真结束
    
.计次循环尾 ()
赋值 (临时字节集, 相加 ({ 32, 0, 0, 0, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 108, 105, 98, 70, 76, 65, 67, 32, 49, 46, 49, 46, 50, 32, 50, 48, 48, 53, 48, 50, 48, 53 }, 到字节集 (到整数 (标签数)), 临时字节集))
赋值 (临时字节集长度, 取字节集长度 (临时字节集))
赋值 (临时字节集, 相加 (到字节集 (到字节 (4)), 到字节集 (到字节 (位与 (右移 (临时字节集长度, 16), 255))), 到字节集 (到字节 (位与 (右移 (临时字节集长度, 8), 255))), 到字节集 (到字节 (位与 (临时字节集长度, 255))), 临时字节集))
赋值 (文件号, 打开文件 (FLAC文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 4)), “fLaC”))
    .循环判断首 ()
        赋值 (块大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
        赋值 (块总大小, 位或 (左移 (块大小 [2], 16), 左移 (块大小 [3], 8), 块大小 [4]))
        赋值 (块类型, 位与 (块大小 [1], 127))
        .判断开始 (等于 (块类型, 0)) ' 读入音频信息块
            移到文件首 (文件号)
            赋值 (临时字节集1, 相加 (读入字节集 (文件号, 相加 (块总大小, 8)), 临时字节集))
        .判断 (等于 (块类型, 4)) ' 跳过标签内容块
            移动读写位置 (文件号, #现行位置, 块总大小)
        .默认
            移动读写位置 (文件号, #现行位置, -4) ' 读入其它块
            赋值 (临时字节集1, 相加 (临时字节集1, 读入字节集 (文件号, 相加 (块总大小, 4))))
        .判断结束
        
    .循环判断尾 (等于 (位与 (块大小 [1], 128), 0))
    赋值 (现在位置, 取读写位置 (文件号))
    移到文件首 (文件号)
    删除数据 (文件号, 现在位置)
    移到文件首 (文件号)
    插入字节集 (文件号, 临时字节集1)
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
    
.如果结束



.子程序 读取MP3文件ID3V2信息, 逻辑型, , 
.参数 MP3文件名, 文本型, , 
.参数 mp3, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 标签大小, 整数型, , "4", 
.局部变量 总标签大小, 整数型, , , 
.局部变量 帧头, 文本型, , , 
.局部变量 帧大小, 整数型, , "4", 
.局部变量 帧总大小, 整数型, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 s, 文本型, , , 
.局部变量 i, 整数型, , , 
.局部变量 空值数, 整数型, , , 
.局部变量 h, 字节集, , , 
.局部变量 临时, 字节集, , , 
.局部变量 版本, 整数型, , , 

.如果真 (等于 (文件是否存在 (MP3文件名), 假))
    返回 (假)
.如果真结束
赋值 (文件号, 打开文件 (MP3文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 3)), “ID3”))
    赋值 (版本, 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    移动读写位置 (文件号, #现行位置, 2)
    赋值 (标签大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (总标签大小, 相加 (相乘 (位与 (标签大小 [1], 127), 2097152), 相乘 (位与 (标签大小 [2], 127), 1024), 相乘 (位与 (标签大小 [3], 127), 128), 位与 (标签大小 [4], 127)))
    .如果 (大于或等于 (版本, 3)) ' 判断是否ID3v2.3或以上版本标签
        .循环判断首 ()
            赋值 (帧头, 到文本 (读入字节集 (文件号, 4)))
            赋值 (帧大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧总大小, 相加 (相乘 (帧大小 [1], 4294967296), 相乘 (帧大小 [2], 65536), 相乘 (帧大小 [3], 256), 帧大小 [4]))
            移动读写位置 (文件号, #现行位置, 2)
            .如果真 (大于 (帧总大小, 0))
                .判断开始 (等于 (帧头, “TIT2”))
                    赋值 (mp3.歌曲名, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TPE1”))
                    赋值 (mp3.艺术家, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TALB”))
                    赋值 (mp3.专辑名称, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “COMM”))
                    赋值 (mp3.备注, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TRCK”))
                    赋值 (mp3.音轨, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TYER”))
                    赋值 (mp3.年代, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCOM”))
                    赋值 (mp3.作曲家, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TENC”))
                    赋值 (mp3.编码, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCOP”))
                    赋值 (mp3.版权, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “APIC”))
                    移动读写位置 (文件号, #现行位置, 7)
                    .如果 (等于 (到文本 (读入字节集 (文件号, 3)), “png”))
                        移动读写位置 (文件号, #现行位置, 3)
                        赋值 (mp3.图片, 读入字节集 (文件号, 相减 (帧总大小, 13)))
                    .否则
                        移动读写位置 (文件号, #现行位置, 4)
                        赋值 (mp3.图片, 读入字节集 (文件号, 相减 (帧总大小, 14)))
                    .如果结束
                    
                .判断 (等于 (帧头, “WXXX”))
                    赋值 (mp3.网址, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCON”))
                    赋值 (mp3.类型, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “USLT”))
                    赋值 (mp3.歌词, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .默认
                    移动读写位置 (文件号, #现行位置, 帧总大小)
                .判断结束
                
            .如果真结束
            赋值 (现在位置, 取读写位置 (文件号))
        .循环判断尾 (小于 (现在位置, 相加 (总标签大小, 10)))
    .否则
        .循环判断首 ()
            赋值 (帧头, 到文本 (读入字节集 (文件号, 3)))
            赋值 (帧大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧总大小, 相加 (左移 (帧大小 [1], 16), 左移 (帧大小 [2], 8), 帧大小 [3]))
            .如果真 (大于 (帧总大小, 0))
                .判断开始 (等于 (帧头, “TT2”))
                    赋值 (mp3.歌曲名, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TP1”))
                    赋值 (mp3.艺术家, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TAL”))
                    赋值 (mp3.专辑名称, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “COM”))
                    赋值 (mp3.备注, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TRK”))
                    赋值 (mp3.音轨, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TYE”))
                    赋值 (mp3.年代, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCM”))
                    赋值 (mp3.作曲家, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TEN”))
                    赋值 (mp3.编码, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCR”))
                    赋值 (mp3.版权, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “PIC”))
                    移动读写位置 (文件号, #现行位置, 6)
                    赋值 (mp3.图片, 读入字节集 (文件号, 相减 (帧总大小, 6)))
                .判断 (等于 (帧头, “WXX”))
                    赋值 (mp3.网址, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “TCO”))
                    赋值 (mp3.类型, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .判断 (等于 (帧头, “ULT”))
                    赋值 (mp3.歌词, 判断编码类型 (读入字节集 (文件号, 帧总大小)))
                .默认
                    移动读写位置 (文件号, #现行位置, 帧总大小)
                .判断结束
                
            .如果真结束
            赋值 (现在位置, 取读写位置 (文件号))
        .循环判断尾 (小于 (现在位置, 相加 (总标签大小, 10)))
    .如果结束
    关闭文件 (文件号)
    返回 (真)
.否则
    关闭文件 (文件号)
    返回 (假)
    
.如果结束



.子程序 保存MP3文件ID3V2信息, 逻辑型, , 专辑图片只支持jpeg格式
.参数 MP3文件名, 文本型, , 
.参数 mp3, 音乐文件信息, , 

.局部变量 aa, 文本型, , "13", 
.局部变量 bb, 文本型, , "12", 
.局部变量 i, 整数型, , , 
.局部变量 帧内容, 字节集, , , 
.局部变量 帧长度, 整数型, , , 
.局部变量 临时字节集, 字节集, , , 
.局部变量 文件号, 整数型, , , 
.局部变量 标签大小, 整数型, , "4", 
.局部变量 总标签大小, 整数型, , , 
.局部变量 帧头, 文本型, , , 
.局部变量 帧大小, 整数型, , "4", 
.局部变量 帧总大小, 整数型, , , 
.局部变量 现在位置, 整数型, , , 
.局部变量 总标签大小1, 整数型, , , 
.局部变量 图片长度, 整数型, , , 

.如果真 (等于 (文件是否存在 (MP3文件名), 假))
    返回 (假)
.如果真结束
赋值 (aa [1], “TYER”)
赋值 (aa [2], “TIT2”)
赋值 (aa [3], “TPE1”)
赋值 (aa [4], “TENC”)
赋值 (aa [5], “TCOP”)
赋值 (aa [6], “TRCK”)
赋值 (aa [7], “TALB”)
赋值 (aa [8], “TCON”)
赋值 (aa [9], “TCOM”)
赋值 (aa [10], “WXXX”)
赋值 (aa [11], “COMM”)
赋值 (aa [12], “USLT”)
赋值 (aa [13], “APIC”)
赋值 (bb [1], mp3.年代)
赋值 (bb [2], mp3.歌曲名)
赋值 (bb [3], mp3.艺术家)
赋值 (bb [4], mp3.编码)
赋值 (bb [5], mp3.版权)
赋值 (bb [6], mp3.音轨)
赋值 (bb [7], mp3.专辑名称)
赋值 (bb [8], mp3.类型)
赋值 (bb [9], mp3.作曲家)
赋值 (bb [10], mp3.网址)
赋值 (bb [11], mp3.备注)
赋值 (bb [12], mp3.歌词)
.计次循环首 (12, i)
    .如果真 (不等于 (bb [i], “”))
        赋值 (帧内容, 到字节集 (bb [i]))
        赋值 (帧长度, 相加 (取字节集长度 (帧内容), 1))
        赋值 (临时字节集, 相加 (临时字节集, 到字节集 (aa [i]), 到字节集 (到字节 (整除 (帧长度, 16777216))), 到字节集 (到字节 (求余数 (整除 (帧长度, 65536), 256))), 到字节集 (到字节 (求余数 (整除 (帧长度, 256), 256))), 到字节集 (到字节 (求余数 (帧长度, 256))), { 0, 0, 0 }, 帧内容))
    .如果真结束
    
.计次循环尾 ()
.如果真 (不等于 (mp3.图片, {  }))
    赋值 (帧长度, 相加 (取字节集长度 (mp3.图片), 14))
    赋值 (临时字节集, 相加 (临时字节集, 到字节集 (aa [13]), 到字节集 (到字节 (整除 (帧长度, 16777216))), 到字节集 (到字节 (求余数 (整除 (帧长度, 65536), 256))), 到字节集 (到字节 (求余数 (整除 (帧长度, 256), 256))), 到字节集 (到字节 (求余数 (帧长度, 256))), { 0, 0, 0 }, 到字节集 (“image/jpeg”), { 0, 3, 0 }, mp3.图片))
.如果真结束
赋值 (文件号, 打开文件 (MP3文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
.如果 (等于 (到文本 (读入字节集 (文件号, 3)), “ID3”)) ' 判断是否有标签
    移动读写位置 (文件号, #现行位置, 3)
    赋值 (标签大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (总标签大小, 相加 (相乘 (位与 (标签大小 [1], 127), 2097152), 相乘 (位与 (标签大小 [2], 127), 1024), 相乘 (位与 (标签大小 [3], 127), 128), 位与 (标签大小 [4], 127)))
    .循环判断首 ()
        赋值 (帧头, 到文本 (读入字节集 (文件号, 4)))
        赋值 (帧大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
        赋值 (帧大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
        赋值 (帧大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
        赋值 (帧大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
        赋值 (帧总大小, 相加 (相乘 (帧大小 [1], 4294967296), 相乘 (帧大小 [2], 65536), 相乘 (帧大小 [3], 256), 帧大小 [4]))
        .如果 (大于 (帧总大小, 0))
            .判断开始 (等于 (帧头, “TIT2”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TPE1”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TALB”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “COMM”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TRCK”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TYER”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TCOM”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TENC”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TCOP”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “APIC”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “WXXX”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “TCON”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .判断 (等于 (帧头, “USLT”))
                移动读写位置 (文件号, #现行位置, 相加 (帧总大小, 2))
            .默认
                移动读写位置 (文件号, #现行位置, -8) ' 读入其它标签帧
                赋值 (临时字节集, 相加 (临时字节集, 读入字节集 (文件号, 相加 (帧总大小, 10))))
            .判断结束
            
        .否则
            移动读写位置 (文件号, #现行位置, -8) ' 读入其它标签帧
            赋值 (临时字节集, 相加 (临时字节集, 读入字节集 (文件号, 10)))
        .如果结束
        赋值 (现在位置, 取读写位置 (文件号))
    .循环判断尾 (小于 (现在位置, 相加 (总标签大小, 10)))
    赋值 (总标签大小1, 相加 (取字节集长度 (临时字节集), 50))
    赋值 (临时字节集, 相加 (到字节集 (“ID3”), { 3, 0, 0 }, 到字节集 (到字节 (整除 (总标签大小1, 2097152))), 到字节集 (到字节 (求余数 (整除 (总标签大小1, 16384), 128))), 到字节集 (到字节 (求余数 (整除 (总标签大小1, 128), 128))), 到字节集 (到字节 (求余数 (总标签大小1, 128))), 临时字节集, 取空白字节集 (50)))
    移到文件首 (文件号)
    删除数据 (文件号, 相加 (总标签大小, 10)) ' 删除原来标签
    移到文件首 (文件号)
    插入字节集 (文件号, 临时字节集)
.否则
    赋值 (总标签大小, 相加 (取字节集长度 (临时字节集), 50))
    赋值 (临时字节集, 相加 (到字节集 (“ID3”), { 3, 0, 0 }, 到字节集 (到字节 (整除 (总标签大小, 2097152))), 到字节集 (到字节 (求余数 (整除 (总标签大小, 16384), 128))), 到字节集 (到字节 (求余数 (整除 (总标签大小, 128), 128))), 到字节集 (到字节 (求余数 (总标签大小, 128))), 临时字节集, 取空白字节集 (50)))
    移到文件首 (文件号)
    插入字节集 (文件号, 临时字节集)
.如果结束
关闭文件 (文件号)
返回 (真)



.子程序 是否有ID3V2标签, 整数型, , 
.参数 文件名, 文本型, , 

.局部变量 文件号, 整数型, , , 
.局部变量 总标签大小, 整数型, , , 
.局部变量 标签大小, 整数型, , "4", 

赋值 (文件号, 打开文件 (文件名, #读入, #禁止写))
.如果 (等于 (到文本 (读入字节集 (文件号, 3)), “ID3”))
    移动读写位置 (文件号, #现行位置, 3)
    赋值 (标签大小 [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (标签大小 [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
    赋值 (总标签大小, 相加 (相乘 (位与 (标签大小 [1], 127), 2097152), 相乘 (位与 (标签大小 [2], 127), 1024), 相乘 (位与 (标签大小 [3], 127), 128), 位与 (标签大小 [4], 127)))
    关闭文件 (文件号)
    返回 (相加 (总标签大小, 10))
.否则
    关闭文件 (文件号)
    返回 (0)
.如果结束


.子程序 是否有ID3V1标签, 整数型, , 
.参数 文件名, 文本型, , 

.局部变量 文件号, 整数型, , , 

赋值 (文件号, 打开文件 (文件名, #读入, #禁止写))
移动读写位置 (文件号, #文件尾, -128)
.如果 (等于 (到文本 (读入字节集 (文件号, 3)), “TAG”))
    关闭文件 (文件号)
    返回 (128)
.否则
    关闭文件 (文件号)
    返回 (0)
.如果结束


.子程序 mp3文件音频信息, 逻辑型, , 
.参数 mp3文件名, 文本型, , 
.参数 mp3, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 总标签大小, 整数型, , , 
.局部变量 标签大小, 整数型, , "4", 
.局部变量 帧头, 整数型, , "4", 
.局部变量 帧头格式, 文本型, , , 
.局部变量 mpeg版本, 整数型, , , 
.局部变量 mpeg层, 整数型, , , 
.局部变量 mpeg保护, 文本型, , , 
.局部变量 mpeg比特索引, 整数型, , , 
.局部变量 mpeg频率索引, 整数型, , , 
.局部变量 mpeg填充, 整数型, , , 
.局部变量 mpeg私有, 文本型, , , 
.局部变量 mpeg声道, 整数型, , , 
.局部变量 mpeg扩展, 文本型, , , 
.局部变量 mpeg版权, 文本型, , , 
.局部变量 mpeg原始, 文本型, , , 
.局部变量 mpeg重点, 文本型, , , 
.局部变量 版本, 文本型, , , 
.局部变量 层, 文本型, , , 
.局部变量 频率, 整数型, , , 
.局部变量 比特, 整数型, , , 
.局部变量 声道, 文本型, , , 
.局部变量 padding, 整数型, , , 
.局部变量 Coefficient, 整数型, , , 
.局部变量 帧长度, 整数型, , , 
.局部变量 帧数, 整数型, , , 
.局部变量 ID3V2标签大小, 整数型, , , 
.局部变量 ID3V1标签大小, 整数型, , , 
.局部变量 帧位置, 整数型, , , 
.局部变量 是否帧头, 逻辑型, , , 
.局部变量 vbrid, 文本型, , , 
.局部变量 a, 短整数型, , "4", 
.局部变量 文件字节数, 整数型, , , 

.如果真 (等于 (文件是否存在 (mp3文件名), 假))
    返回 (假)
.如果真结束
赋值 (ID3V2标签大小, 是否有ID3V2标签 (mp3文件名))
赋值 (ID3V1标签大小, 是否有ID3V1标签 (mp3文件名))
赋值 (是否帧头, 假)
赋值 (文件号, 打开文件 (mp3文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移动读写位置 (文件号, , ID3V2标签大小) ' 跳过ID3V2标签
.计次循环首 (2048, ) ' 查找mp3帧头
    .如果真 (是否在文件尾 (文件号, ))
        跳出循环 ()
    .如果真结束
    赋值 (帧头 [1], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    赋值 (帧头 [2], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    赋值 (帧头 [3], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    赋值 (帧头 [4], 取字节集数据 (读入字节集 (文件号, 1), #整数型, ))
    .如果真 (判断是否mp3帧头 (帧头))
        赋值 (是否帧头, 真)
        赋值 (帧位置, 相减 (取读写位置 (文件号), 4))
        赋值 (帧头格式, 相加 (到二进制 (帧头 [1]), 到二进制 (帧头 [2]), 到二进制 (帧头 [3]), 到二进制 (帧头 [4])))
        赋值 (mpeg版本, 相加 (二进制到十进制 (取文本中间 (帧头格式, 12, 2)), 1))
        赋值 (mpeg层, 相加 (二进制到十进制 (取文本中间 (帧头格式, 14, 2)), 1))
        赋值 (mpeg保护, 取文本中间 (帧头格式, 16, 1))
        赋值 (mpeg比特索引, 相加 (二进制到十进制 (取文本中间 (帧头格式, 17, 4)), 1))
        赋值 (mpeg频率索引, 相加 (二进制到十进制 (取文本中间 (帧头格式, 21, 2)), 1))
        赋值 (mpeg填充, 到数值 (取文本中间 (帧头格式, 23, 1)))
        赋值 (mpeg私有, 取文本中间 (帧头格式, 24, 1))
        赋值 (mpeg声道, 相加 (二进制到十进制 (取文本中间 (帧头格式, 25, 2)), 1))
        赋值 (mpeg扩展, 取文本中间 (帧头格式, 27, 2))
        赋值 (mpeg版权, 取文本中间 (帧头格式, 29, 1))
        赋值 (mpeg原始, 取文本中间 (帧头格式, 30, 1))
        赋值 (mpeg重点, 取文本右边 (帧头格式, 2))
        赋值 (层, MPEG_LAYER [mpeg层])
        赋值 (版本, MPEG_VERSION [mpeg版本])
        赋值 (比特, MPEG_BIT_RATE [mpeg版本] [mpeg层] [mpeg比特索引])
        赋值 (频率, MPEG_SAMPLE_RATE [mpeg版本] [mpeg频率索引])
        赋值 (声道, MPEG_CM_MODE [mpeg声道])
        .如果 (等于 (mpeg版本, 4))
            .如果 (等于 (mpeg层, 4))
                赋值 (Coefficient, 48)
            .否则
                赋值 (Coefficient, 144)
            .如果结束
            
        .否则
            .判断开始 (等于 (mpeg层, 4))
                赋值 (Coefficient, 24)
            .判断 (等于 (mpeg层, 3))
                赋值 (Coefficient, 144)
            .默认
                赋值 (Coefficient, 72)
            .判断结束
            
        .如果结束
        .如果 (等于 (mpeg填充, 1))
            .如果 (等于 (mpeg层, 4))
                赋值 (padding, 4)
            .否则
                赋值 (padding, 1)
            .如果结束
            
        .否则
            赋值 (padding, 0)
        .如果结束
        赋值 (帧长度, 相加 (取整 (相除 (相乘 (Coefficient, 比特, 1000), 频率)), padding))
        赋值 (mp3.时间, 格式化时间 (相乘 (相除 (相减 (取文件长度 (文件号), ID3V2标签大小, ID3V1标签大小, 帧位置), 比特, 1000), 8)))
        跳出循环 ()
    .如果真结束
    移动读写位置 (文件号, #现行位置, -3)
.计次循环尾 ()
.如果真 (是否帧头)
    .计次循环首 (帧长度, )
        赋值 (vbrid, 到文本 (读入字节集 (文件号, 4)))
        .判断开始 (或者 (等于 (vbrid, “Xing”), 等于 (vbrid, “Info”)))
            移动读写位置 (文件号, #现行位置, 4)
            赋值 (a [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧数, 相加 (相乘 (a [1], 16777216), 相乘 (a [2], 65536), 相乘 (a [3], 256), a [4]))
            赋值 (a [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (文件字节数, 相加 (相乘 (a [1], 16777216), 相乘 (a [2], 65536), 相乘 (a [3], 256), a [4]))
            赋值 (比特, 四舍五入 (相除 (相乘 (相减 (相除 (文件字节数, 帧数), padding), 频率), Coefficient, 1000), ))
            赋值 (mp3.时间, 格式化时间 (相除 (相乘 (帧数, Coefficient, 8), 频率)))
            跳出循环 ()
        .判断 (等于 (vbrid, “VBRI”))
            移动读写位置 (文件号, #现行位置, 6)
            赋值 (a [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (文件字节数, 相加 (相乘 (a [1], 16777216), 相乘 (a [2], 65536), 相乘 (a [3], 256), a [4]))
            赋值 (a [1], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [2], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [3], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (a [4], 取字节集数据 (读入字节集 (文件号, 1), #短整数型, ))
            赋值 (帧数, 相加 (相乘 (a [1], 16777216), 相乘 (a [2], 65536), 相乘 (a [3], 256), a [4]))
            赋值 (比特, 四舍五入 (相除 (相乘 (相减 (相除 (文件字节数, 帧数), padding), 频率), Coefficient, 1000), ))
            赋值 (mp3.时间, 格式化时间 (相除 (相乘 (帧数, Coefficient, 8), 频率)))
            跳出循环 ()
        .默认
            
        .判断结束
        移动读写位置 (文件号, #现行位置, -3)
    .计次循环尾 ()
.如果真结束
赋值 (mp3.声道, 声道)
赋值 (mp3.比特率, 到文本 (比特))
赋值 (mp3.码率, 到文本 (频率))
赋值 (mp3.编码, 相加 (版本, “ ”, 层))
关闭文件 (文件号)
返回 (真)

.子程序 判断是否mp3帧头, 逻辑型, , 
.参数 帧头数据, 整数型, 数组, 

.如果 (或者 (不等于 (位与 (帧头数据 [1], 255), 255), 不等于 (位与 (帧头数据 [2], 224), 224), 等于 (位与 (右移 (帧头数据 [2], 3), 3), 1), 等于 (位与 (右移 (帧头数据 [2], 1), 3), 0), 等于 (位与 (帧头数据 [3], 240), 240), 等于 (位与 (帧头数据 [3], 240), 0), 等于 (位与 (右移 (帧头数据 [3], 2), 3), 3), 等于 (位与 (帧头数据 [4], 3), 2)))
    返回 (假)
.否则
    返回 (真)
.如果结束


.子程序 读取MP3文件ID3V1信息, 逻辑型, , 
.参数 MP3文件名, 文本型, , 
.参数 mp3信息, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 数据, 字节集, , , 
.局部变量 a, 整数型, , , 
.局部变量 i, 整数型, , , 

赋值 (文件号, 打开文件 (MP3文件名, #读入, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移动读写位置 (文件号, #文件尾, -128)
赋值 (数据, 读入字节集 (文件号, 128))
关闭文件 (文件号)
.如果 (等于 (到文本 (取字节集左边 (数据, 3)), “TAG”))
    赋值 (mp3信息.歌曲名, 删首尾空 (到文本 (取字节集中间 (数据, 4, 30))))
    赋值 (mp3信息.艺术家, 删首尾空 (到文本 (取字节集中间 (数据, 34, 30))))
    赋值 (mp3信息.专辑名称, 删首尾空 (到文本 (取字节集中间 (数据, 64, 30))))
    赋值 (mp3信息.年代, 删首尾空 (到文本 (取字节集中间 (数据, 94, 4))))
    赋值 (mp3信息.备注, 删首尾空 (到文本 (取字节集中间 (数据, 98, 28))))
    赋值 (mp3信息.音轨, 到文本 (取代码 (到文本 (取字节集中间 (数据, 127, 1)), )))
    赋值 (a, 取代码 (到文本 (取字节集中间 (数据, 128, 1)), ))
    .计次循环首 (148, i)
        .如果真 (等于 (a, 相减 (i, 1)))
            赋值 (mp3信息.类型, 类型 [i])
        .如果真结束
        
    .计次循环尾 ()
    返回 (真)
.否则
    返回 (假)
.如果结束




.子程序 保存MP3文件ID3V1信息, 逻辑型, , 
.参数 MP3文件名, 文本型, , 
.参数 mp3, 音乐文件信息, , 

.局部变量 文件号, 整数型, , , 
.局部变量 临时标签1, 字节集, , , 
.局部变量 临时标签, 字节集, , , 
.局部变量 临时标签2, 字节集, , , 
.局部变量 i, 整数型, , , 
.局部变量 a, 整数型, , , 

.如果真 (等于 (文件是否存在 (MP3文件名), 假))
    返回 (假)
.如果真结束
赋值 (临时标签1, 取空白字节集 (30))
赋值 (临时标签2, 取空白字节集 (29))
.如果真 (等于 (mp3.类型, “”))
    赋值 (a, 13)
.如果真结束
.如果真 (等于 (mp3.音轨, “”))
    赋值 (mp3.音轨, 到文本 (0))
.如果真结束
.如果真 (等于 (mp3.年代, “”))
    赋值 (mp3.年代, “未知”)
.如果真结束
.计次循环首 (148, i)
    .如果真 (等于 (mp3.类型, 类型 [i]))
        赋值 (a, 相减 (i, 1))
    .如果真结束
    
.计次循环尾 ()
赋值 (临时标签, 相加 (到字节集 (“TAG”), 字节集替换 (临时标签1, 1, 取字节集长度 (到字节集 (mp3.歌曲名)), 到字节集 (mp3.歌曲名)), 字节集替换 (临时标签1, 1, 取字节集长度 (到字节集 (mp3.艺术家)), 到字节集 (mp3.艺术家)), 字节集替换 (临时标签1, 1, 取字节集长度 (到字节集 (mp3.专辑名称)), 到字节集 (mp3.专辑名称)), 到字节集 (mp3.年代), 字节集替换 (临时标签2, 1, 取字节集长度 (到字节集 (mp3.备注)), 到字节集 (mp3.备注)), 到字节集 (到字节 (mp3.音轨)), 到字节集 (到字节 (a))))
赋值 (文件号, 打开文件 (MP3文件名, #读写, #禁止写))
.如果真 (等于 (文件号, 0))
    返回 (假)
.如果真结束
移动读写位置 (文件号, #文件尾, -128)
.如果 (等于 (到文本 (读入字节集 (文件号, 3)), “TAG”))
    移动读写位置 (文件号, #文件尾, -128)
    删除数据 (文件号, 128)
    移到文件尾 (文件号)
    插入字节集 (文件号, 临时标签)
.否则
    移到文件尾 (文件号)
    插入字节集 (文件号, 临时标签)
.如果结束
关闭文件 (文件号)
返回 (真)

.子程序 初始化数据, 空白型, , 
.参数 信息, 音乐文件信息, , 

赋值 (信息.版权, “”)
赋值 (信息.备注, “”)
赋值 (信息.音轨, “”)
赋值 (信息.编码, “”)
赋值 (信息.类型, “”)
赋值 (信息.歌词, “”)
赋值 (信息.年代, “”)
赋值 (信息.网址, “”)
赋值 (信息.版本, “”)
赋值 (信息.码率, “”)
赋值 (信息.声道, “”)
赋值 (信息.描述, “”)
赋值 (信息.时间, “”)
赋值 (信息.图片, {  })
赋值 (信息.艺术家, “”)
赋值 (信息.歌曲名, “”)
赋值 (信息.作曲家, “”)
赋值 (信息.比特率, “”)
赋值 (信息.演奏者, “”)
赋值 (信息.专辑名称, “”)
赋值 (信息.编码方式, “”)


 ' 不属于任何一个程序集、类模块的函数：
