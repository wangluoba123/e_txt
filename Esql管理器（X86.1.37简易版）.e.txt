 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口
    左边 = 50
    顶边 = 50
    宽度 = 640
    高度 = 460
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 真
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “ Esql管理器（X86.1.x 简易版）”
    帮助文件名 = “”

窗口 字节集查看窗口
    左边 = 50
    顶边 = 50
    宽度 = 274
    高度 = 251
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 4
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 真
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “二进制、图片等字节集数据查看窗口：”
    帮助文件名 = “”

窗口 表设计窗口
    左边 = 50
    顶边 = 50
    宽度 = 392
    高度 = 362
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “表设计窗口：”
    帮助文件名 = “”



.常量 修改表事务, "“修改表事务”", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' eGrid 0B4337DA651B4b619ACF61334A7E8B47 2 0 高级表格支持库
 ' EThread 5F99C1642A2F4e03850721B4F5D7C3F8 2 0 多线程支持库
 ' xplib 7F54B9CE8887428dBA9CEEB94CEF4C72 2 0 XP风格界面库



 ' 所需要的模块
 ' Esql操作模块 C:\Documents and Settings\Administrator\桌面\Esql 开源版\Esql操作模块.ec


数据类型 Esql字段信息, 公开, 描述Esql字段定义信息，供“Esql库.创建表()”时使用。因为Esql库本质上是弱类型的数据库，可忽略“最大文本长度”。
    .成员 名称, 文本型, , , 不能用数字开头！不能包含特殊字符！长度不限！
    .成员 类型, 整数型, , , 初始值为“0”， -1、（主键，整数型自增字段）； 0、（通用型）； 4、（#逻辑型 #字节型 #短整数型 #整数型 #长整数型）； 6、（#小数型 #双精度小数型）； 10、（#日期时间型 #文本型 #备注型）； 11、（#字节集型）；
    .成员 最大文本长度, 整数型, , , 本成员仅当字段类型为“文本型”时才有效，用作指定文本的“最大可能长度”（数据库不对此长度不作任何限制）；如果本成员值为0，表示该字段可存储任意长度的文本。如果字段类型不为“文本型”，本成员将被忽略。

.全局变量 Esql服务器1, Esql服务器, , , 
.全局变量 Esql库1, Esql库, , , 
.全局变量 Esql表1, Esql表, , , 
.全局变量 Esql记录集1, Esql记录集, , , 
.全局变量 Esql字段信息1, Esql字段信息, , "0", 
.全局变量 本次库位置, 整数型, , , 
.全局变量 上次库位置, 整数型, , , 
.全局变量 匿名全局变量_1018, 空白型, , , 
.全局变量 临时数据, 字节集, , , 
.全局变量 当前行号, 整数型, , , 
.全局变量 当前列号, 整数型, , , 
.全局变量 当前表名, 文本型, , , 
.全局变量 临时Esql字段信息1, Esql字段信息, , "0", 
.全局变量 匿名全局变量_3036, 空白型, , , 

.窗口程序集 _启动窗口程序集, , , 

.程序集变量 匿名程序集变量_499, 空白型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

未知支持库函数_0 (#)

.子程序 _连接按钮_被单击, 空白型, , 
.如果 (等于 (Esql服务器1.连接 (.内容, 到整数 (.内容), .内容, 到整数 (.内容), ), 1))
    赋值 (.标题, “已连接！”)
    赋值 (.文本颜色, #蓝色)
.否则
    信息框 (“连接服务器失败！请检查设置！”, 0, )
    赋值 (.标题, “未连接！”)
    赋值 (.文本颜色, #红褐)
.如果结束
Esql库1.置服务器 (Esql服务器1)

未知支持库函数_57 ()
_刷新树按钮_被单击 ()

.子程序 _断开按钮_被单击, 空白型, , 
Esql服务器1.断开 ()
Esql库1.关闭 ()
Esql表1.关闭 ()
Esql记录集1.关闭 ()
赋值 (.标题, “未连接！”)
赋值 (.文本颜色, #红褐)
_刷新树按钮_被单击 ()
未知支持库函数_57 ()

.子程序 _刷新树按钮_被单击, 空白型, , 
.局部变量 库名数组, 文本型, , "0", 
.局部变量 库名数组数, 整数型, , , 
.局部变量 库计次, 整数型, , , 
.局部变量 库位置整数, 整数型, , , 
.局部变量 表位置整数, 整数型, , , 
.局部变量 表视图名数组, 文本型, , "0", 
.局部变量 表视图名数组数, 整数型, , , 
.局部变量 表计次, 整数型, , , 

置等待鼠标 ()
清空 ()
Esql服务器1.取所有库 (库名数组)
赋值 (库名数组数, 取数组成员数 (库名数组))
.加入项目 (相加 (.内容, “:”, .内容), , , )
.计次循环首 (库名数组数, 库计次)
    赋值 (库位置整数, 0.加入项目 (相加 (“{库}”, 库名数组 [库计次]), , , 1)) ' 把库名插入树框中！ 项目值都为1
    库位置整数.加粗 ()
    
    
    赋值 (表位置整数, 库位置整数.加入项目 (“<表>”, , , ))
     ' 开始加入 表
    Esql库1.打开 (库名数组 [库计次], 假) ' 打开库
    Esql库1.取所有表 (真, 假, 假, 表视图名数组) ' 取得 所有 表 项目值都为2
    赋值 (表视图名数组数, 取数组成员数 (表视图名数组))
    .计次循环首 (表视图名数组数, 表计次)
        表位置整数.加入项目 (表视图名数组 [表计次], , , 2)
    .计次循环尾 ()
    表位置整数.扩展 ()
     ' 开始加入视图
    清除数组 (表视图名数组)
    赋值 (表位置整数, 库位置整数.加入项目 (“[视图]”, , , ))
    Esql库1.取所有表 (假, 真, 假, 表视图名数组) ' 取得 所有 视图  项目值都为3
    赋值 (表视图名数组数, 取数组成员数 (表视图名数组))
    .计次循环首 (表视图名数组数, 表计次)
        表位置整数.加入项目 (表视图名数组 [表计次], , , 3)
    .计次循环尾 ()
    表位置整数.扩展 ()
    清除数组 (表视图名数组)
    
.计次循环尾 ()
Esql库1.关闭 ()

赋值 (.内容, “”)
0.扩展 ()
恢复鼠标 ()


.子程序 _主树型框_双击项目, 空白型, , 
.局部变量 选中类型, 整数型, , , 
.局部变量 选中文本, 文本型, , , 
.局部变量 匿名局部变量_1084, 空白型, , , 
.局部变量 匿名局部变量_1137, 空白型, , , 

赋值 (本次库位置, .最大化按钮)
赋值 (选中文本, 本次库位置.取项目文本 ())
赋值 (选中类型, 本次库位置.取项目数值 ())
.如果真 (等于 (选中类型, 2)) ' 如果双击的是表
    .如果真 (等于 (Esql表1.打开 (选中文本, Esql库1), 1))
        赋值 (当前表名, 选中文本)
        表格刷新表子程序 ()
        返回 ()
    .如果真结束
    
.如果真结束
.如果真 (等于 (选中类型, 1))
    .如果真 (等于 (Esql库1.打开 (取文本中间 (选中文本, 5, 取文本长度 (选中文本)), 假), 1))
        赋值 (.内容, 取文本中间 (选中文本, 5, 取文本长度 (选中文本)))
        上次库位置.收缩 ()
        赋值 (上次库位置, 本次库位置)
        0.扩展 ()
         ' -------------
        
        返回 ()
    .如果真结束
    
.如果真结束
.如果真 (等于 (选中类型, 3))
    赋值 (当前表名, 选中文本)
    表格刷新集子程序 ()
    返回 ()
    
    
.如果真结束


.子程序 _库是否已打开_被选择, 空白型, , 
.如果 (等于 (Esql库1.是否已打开 (), 1))
    信息框 (“已打开！”, 0, )
.否则
    信息框 (“未打开！”, 0, )
.如果结束


.子程序 _表是否已打开_被选择, 空白型, , 
信息框 (Esql表1.是否已打开 (), 0, )


.子程序 _关闭库_被选择, 空白型, , 
.如果 (等于 (Esql库1.关闭 (), 1))
    信息框 (“成功关闭！”, 0, )
.否则
    信息框 (“关闭失败！”, 0, )
.如果结束


.子程序 _关闭表或视图_被选择, 空白型, , 
.如果 (等于 (Esql表1.关闭 (), 1))
    信息框 (“成功关闭！”, 0, )
.否则
    信息框 (“关闭失败！”, 0, )
.如果结束


.子程序 _开始事务按钮_被单击, 空白型, , 
.如果 (等于 (Esql库1.开始事务 (.内容), 1))
    信息框 (“开始事务 成功！”, 0, )
.否则
    信息框 (“开始事务 失败！”, 0, )
.如果结束


.子程序 _回滚事务按钮_被单击, 空白型, , 
.如果 (等于 (Esql库1.回滚事务 (.内容), 1))
    信息框 (“回滚事务 成功！”, 0, )
.否则
    信息框 (“回滚事务 失败！”, 0, )
.如果结束


.子程序 _提交事务按钮_被单击, 空白型, , 
.如果 (等于 (Esql库1.提交事务 (.内容), 1))
    信息框 (“提交事务 成功！”, 0, )
.否则
    信息框 (“提交事务 失败！”, 0, )
.如果结束


.子程序 _执行按钮_被单击, 空白型, , 
.如果 (等于 (Esql库1.执行SQL语句 (.内容), 1))
    信息框 (“执行SQL语句 成功！”, 0, )
.否则
    信息框 (“执行SQL语句 失败！”, 0, )
.如果结束


.子程序 _置端口_被选择, 空白型, , 
.局部变量 新端口, 整数型, , , 

输入框 (“请输入新端口：”, , 新端口, #输入整数)
.如果 (等于 (Esql服务器1.置端口 (到整数 (新端口)), 1))
    信息框 (“服务器 端口 修改成功！”, 0, )
    返回 ()
.否则
    信息框 (“服务器 端口 修改失败！”, 0, )
.如果结束


.子程序 _置线程_被选择, 空白型, , 
.局部变量 最小线程, 文本型, , , 
.局部变量 最大线程, 文本型, , , 

输入框 (“请输入最小线程：”, , 最小线程, #输入整数)
输入框 (“请输入最大线程：”, , 最大线程, #输入整数)
.如果 (等于 (Esql服务器1.置线程 (到整数 (最小线程), 到整数 (最大线程)), 1))
    信息框 (“服务器 置线程 修改成功！”, 0, )
.否则
    信息框 (“服务器 置线程 修改失败！”, 0, )
.如果结束


.子程序 _置口令_被选择, 空白型, , 
.局部变量 密码1, 文本型, , , 
.局部变量 密码2, 文本型, , , 

输入框 (“请输入密码：”, , 密码1, #输入密码)
输入框 (“请再次输入密码：”, , 密码2, #输入密码)
.如果 (等于 (密码1, 密码2))
    .如果 (等于 (Esql服务器1.置口令 (密码2), 1))
        信息框 (“服务器 口令 修改成功！”, 0, )
        返回 ()
        
    .否则
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    
.否则
    
.如果结束
信息框 (“服务器 口令 修改失败！”, 0, )


.子程序 _打开库_被选择, 空白型, , 
.局部变量 txt, 文本型, , , 

输入框 (“请输入要打开的数据库名称：”, , txt, )
.如果 (等于 (Esql库1.打开 (txt, 假), 1))
    信息框 (“打开库 成功！”, 0, )
    赋值 (.内容, txt)
.否则
    信息框 (“打开库 失败！”, 0, )
.如果结束



.子程序 _新建库按钮_被单击, 空白型, , 
.局部变量 txt, 文本型, , , 

输入框 (“请输入新建数据库名称：”, , txt, )
.如果 (等于 (Esql库1.打开 (txt, 真), 1))
    信息框 (“创建库 成功！”, 0, )
    _刷新树按钮_被单击 ()
.否则
    信息框 (“创建库 失败！”, 0, )
.如果结束


.子程序 _高级表格1_将被编辑, 空白型, , 
.如果 (等于 (.禁止, 真))
    赋值 (., 假)
    返回 ()
.否则
    
.如果结束
赋值 (当前列号, 未知支持库函数_4 ())
赋值 (当前行号, 未知支持库函数_3 ())

.如果 (大于或等于 (取数组成员数 (Esql字段信息1), 当前列号))
    
.否则
    赋值 (., 假)
    返回 ()
.如果结束
.如果真 (小于或等于 (当前列号, 0))
    返回 ()
.如果真结束
.如果 (等于 (Esql字段信息1 [当前列号], 类型, 11))
    赋值 (., 假)
    载入 (字节集查看窗口, , 真)
    返回 ()
.否则
    
.如果结束
赋值 (., 真)
赋值 (临时数据, 到字节集 (当前行号.未知支持库函数_10 (当前列号)))


.子程序 _高级表格1_结束编辑, 空白型, , 

.如果 (等于 (到字节集 (当前行号.未知支持库函数_10 (当前列号)), 临时数据))
    
    返回 ()
.否则
    
.如果结束
Esql表1.跳到 (当前行号)
Esql表1.编辑 ()

.如果 (等于 (Esql表1.写文本 (到文本 (当前列号), 到文本 (当前行号.未知支持库函数_10 (当前列号)), Esql字段信息1 [当前列号], 类型), 1))
    
    Esql表1.提交 ()
.否则
    Esql表1.取消 ()
    当前行号.未知支持库函数_9 (当前列号, #., 临时数据)
    
    返回 ()
.如果结束


.子程序 _取错误文本_被选择, 空白型, , 
信息框 (Esql库1.取错误文本 (), 0, )


.子程序 _刷新表格按钮_被单击, 空白型, , 


.子程序 _新建视图按钮_被单击, 空白型, , 
赋值 (.内容, “CREATE VIEW <视图名称> AS <select语句>”)



.子程序 _发送命令_被选择, 空白型, , 
.局部变量 txt, 文本型, , , 

输入框 (“输入要发送的命令：可参考相关资料。如：发送[dm 14]服务器端程序退出；[run 文件名.exe]可运行服务器上当前目录的程序；[reg 注册号]等等。”, “高级用途”, , txt, )
Esql服务器1.发送命令 (txt)


.子程序 _添空记录按钮_被单击, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 sql, 文本型, , , 

 ' 生成如下SQL语句并执行
 ' insert into <表名> values(null,null,null,...)

.计次循环首 (Esql表1.取字段个数 (), i)
    赋值 (sql, 相加 (sql, “null,”))
.计次循环尾 ()
.如果真 (大于 (取文本长度 (sql), 0))
    赋值 (sql, 取文本左边 (sql, 相减 (取文本长度 (sql), 1))) ' 删除最后的“,”
.如果真结束

赋值 (sql, 相加 (“insert into ”, 当前表名, “ values(”, sql, “)”))
Esql库1.执行SQL语句 (sql)
表格刷新表子程序 ()

.子程序 _删除记录按钮_被单击, 空白型, , 
赋值 (当前行号, 未知支持库函数_3 ())
Esql表1.跳到 (当前行号)
Esql表1.删除 ()
表格刷新表子程序 ()

.子程序 表格刷新表子程序, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 n2, 整数型, , , 
.局部变量 txts, 文本型, , "0", 

可否编辑 (真)
未知支持库函数_57 ()
Esql库1.取表字段信息 (当前表名, Esql字段信息1)
赋值 (., 相加 (取数组成员数 (Esql字段信息1), 1))
赋值 (., 相加 (Esql表1.取记录个数 (), 1))
 ' 高级表格1.置列宽 (0, 50)
0.未知支持库函数_9 (0, #., “记录号”)
.计次循环首 (相减 (., 1), n1)
    0.未知支持库函数_9 (n1, #., Esql字段信息1 [n1], 名称)
    .如果 (等于 (Esql字段信息1 [n1], 类型, 11)) ' 如果是 字节集类型 就用图片型
         ' 高级表格1.置列类型 (n1, #表格常量.图片型)
         ' 高级表格1.置图片显示方式 (n1, #表格常量.适合大小)
    .否则
        
    .如果结束
    
.计次循环尾 ()

Esql表1.取所有记录 (假, txts)
.如果 (等于 (Esql表1.是否已打开 (), 1))
    
.否则
    返回 ()
.如果结束


.计次循环首 (相减 (., 1), n1)
    n1.未知支持库函数_9 (0, #., 到文本 (n1))
    .计次循环首 (相减 (., 1), n2)
        n1.未知支持库函数_9 (n2, #., txts [n1] [n2])
    .计次循环尾 ()
.计次循环尾 ()
返回 ()



.子程序 表格刷新集子程序, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 n2, 整数型, , , 
.局部变量 txts, 文本型, , "0", 
.局部变量 sql, 文本型, , , 

可否编辑 ()
未知支持库函数_57 ()
赋值 (sql, 相加 (“select * from ”, 当前表名))
Esql记录集1.置SQL语句 (sql, Esql库1)
Esql记录集1.打开 ()
Esql记录集1.取所有记录 (真, txts)
赋值 (., 相加 (取数组下标 (txts, 2), 1))
赋值 (., 取数组下标 (txts, 1))
0.未知支持库函数_9 (0, #., “记录号”)
.计次循环首 (., n1)
    n1.未知支持库函数_9 (0, #., 到文本 (n1))
    .计次循环首 (相减 (., 1), n2)
        相减 (n1, 1).未知支持库函数_9 (n2, #., txts [n1] [n2])
    .计次循环尾 ()
.计次循环尾 ()
返回 ()



.子程序 可否编辑, 空白型, , 
.参数 逻辑值, 逻辑型, 可空, 

.如果 (等于 (逻辑值, 假))
    赋值 (.禁止, 真)
    赋值 (.禁止, 真)
    赋值 (., 真)
    赋值 (.禁止, 真)
    
.否则
    赋值 (.禁止, 假)
    赋值 (.禁止, 假)
    赋值 (., 假)
    赋值 (.禁止, 假)
.如果结束


.子程序 _修改表名按钮_被单击, 空白型, , 
.如果 (等于 (.取项目数值 (.最大化按钮), 2))
    赋值 (.内容, 相加 (“ALTER TABLE ”, .取项目文本 (.最大化按钮), “ RENAME TO <新表名>”))
.否则
    赋值 (.内容, “ALTER TABLE <原表名> RENAME TO <新表名>”)
.如果结束



.子程序 _修改表按钮_被单击, 空白型, , 
.如果真 (等于 (.禁止, 真))
    返回 ()
.如果真结束
.如果 (等于 (Esql表1.是否已打开 (), 1))
    赋值 (表设计窗口., 真)
    载入 (表设计窗口, , 真)
.否则
    信息框 (“尚未打开表！”, 0, )
.如果结束


.子程序 _删除视图按钮_被单击, 空白型, , 
.如果 (等于 (.取项目数值 (.最大化按钮), 3))
    赋值 (.内容, 相加 (“DROP VIEW ”, .取项目文本 (.最大化按钮)))
.否则
    赋值 (.内容, “DROP VIEW <视图名称>”)
.如果结束



.子程序 _查询按钮_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 n2, 整数型, , , 
.局部变量 txts, 文本型, , "0", 
.局部变量 sql, 文本型, , , 

可否编辑 (假)
未知支持库函数_57 ()

Esql记录集1.置SQL语句 (.内容, Esql库1)
.如果 (等于 (Esql记录集1.打开 (), 1))
    
.否则
    
    可否编辑 (真)
    返回 ()
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)
Esql记录集1.取所有记录 (真, txts)
赋值 (., 相加 (取数组下标 (txts, 2), 1))
赋值 (., 取数组下标 (txts, 1))
0.未知支持库函数_9 (0, #., “记录号”)
.计次循环首 (., n1)
    n1.未知支持库函数_9 (0, #., 到文本 (n1))
    .计次循环首 (相减 (., 1), n2)
        相减 (n1, 1).未知支持库函数_9 (n2, #., txts [n1] [n2])
    .计次循环尾 ()
.计次循环尾 ()



.子程序 _新建表按钮_被单击, 空白型, , 
.如果 (等于 (Esql库1.是否已打开 (), 1))
    赋值 (表设计窗口., 假)
    载入 (表设计窗口, , 真)
    
.否则
    信息框 (“尚未打开库！”, 0, )
.如果结束



 ' SQL语句编辑框.内容 ＝ “CREATE TABLE <表名> (第一列名,第二列名,第N列名)”  这样也行！


.子程序 _删除表按钮_被单击, 空白型, , 
.如果 (等于 (.取项目数值 (.最大化按钮), 2))
    赋值 (.内容, 相加 (“DROP TABLE ”, .取项目文本 (.最大化按钮)))
.否则
    赋值 (.内容, “DROP TABLE <表名称>”)
.如果结束



.子程序 _取注册码_被选择, 空白型, , 
信息框 (Esql服务器1.取注册码 (), 0, )


.子程序 _主树型框_即将扩展, 逻辑型, , 
.参数 项目索引, 整数型, , 

.局部变量 选中类型, 整数型, , , 
.局部变量 选中文本, 文本型, , , 

赋值 (本次库位置, 项目索引)
赋值 (选中文本, 本次库位置.取项目文本 ())
赋值 (选中类型, 本次库位置.取项目数值 ())
.如果真 (等于 (选中类型, 1))
    .如果真 (等于 (Esql库1.打开 (取文本中间 (选中文本, 5, 取文本长度 (选中文本)), 假), 1))
        赋值 (.内容, 取文本中间 (选中文本, 5, 取文本长度 (选中文本)))
        上次库位置.收缩 ()
        赋值 (上次库位置, 本次库位置)
        0.扩展 ()
         ' -------------
        
        返回 ()
    .如果真结束
    
.如果真结束


.子程序 _主树型框_右键单击项目, 空白型, , 
置剪辑板文本 (.取项目文本 (.最大化按钮))


.子程序 _是否注册_被选择, 空白型, , 
.如果 (等于 (Esql服务器1.是否注册 (), 1))
    信息框 (“已经注册！”, 0, )
.否则
    信息框 (“尚未注册！”, 0, )
.如果结束




.窗口程序集 字节集查看窗口程序集, , , 

.子程序 _字节集查看窗口_创建完毕, 空白型, , 
未知支持库函数_0 (&子程序1, )

.子程序 子程序1, 空白型, , 
Esql表1.跳到 (当前行号)
赋值 (临时数据, Esql表1.读字节集 (到文本 (当前列号)))
.如果 (等于 (临时数据, {  }))
    赋值 (.标题, “无数据！”)
.否则
    赋值 (.标题, “有数据！”)
.如果结束
赋值 (.图片, 临时数据)


.子程序 _写出文件按钮_被单击, 空白型, , 
置等待鼠标 ()
赋值 (.类型, 1)
.如果真 (打开 ())
    写到文件 (.文件名, 临时数据)
     ' 本源码来自易语言资源网(www.5A5X.com)
.如果真结束
恢复鼠标 ()


.子程序 _写入文件按钮_被单击, 空白型, , 
置等待鼠标 ()
赋值 (.类型, 0)
.如果真 (打开 ())
    赋值 (临时数据, 读入文件 (.文件名))
    Esql表1.编辑 ()
    Esql表1.写字节集 (到文本 (当前列号), 临时数据)
    Esql表1.提交 ()
.如果真结束
赋值 (.图片, 临时数据)
.如果 (不等于 (临时数据, {  }))
    赋值 (.标题, “有数据！”)
.否则
    赋值 (.标题, “无数据！”)
.如果结束
恢复鼠标 ()



.子程序 _清空数据按钮_被单击, 空白型, , 
Esql表1.编辑 ()
Esql表1.写字节集 (到文本 (当前列号), {  })
Esql表1.提交 ()
赋值 (.图片, {  })
赋值 (.标题, “无数据！”)



.子程序 _字节集查看窗口_将被销毁, 空白型, , 
赋值 (临时数据, {  })

.窗口程序集 表设计窗口程序集, , , 

.程序集变量 是否修改表, 逻辑型, , , 标识是创建表还是修改表。本标记由外界赋值。
.程序集变量 匿名程序集变量_3084, 空白型, , , 
.程序集变量 旧表字段, 文本型, , , 
.程序集变量 新表字段, 文本型, , , 
.程序集变量 sql, 文本型, , , 
.程序集变量 临时表名, 文本型, , , 
.程序集变量 是否旧字段名, 逻辑型, , , 
.程序集变量 当前旧列名, 文本型, , , 
.程序集变量 匿名程序集变量_3095, 空白型, , , 
.子程序 _表设计窗口_创建完毕, 空白型, , 
赋值 (旧表字段, “”)
赋值 (新表字段, “”)

0.未知支持库函数_9 (0, #., “列号”)
0.未知支持库函数_9 (1, #., “列名”)
0.未知支持库函数_9 (2, #., “类型”)
“-1”.未知支持库函数_29 ()
“0”.未知支持库函数_29 ()
“4”.未知支持库函数_29 ()
“6”.未知支持库函数_29 ()
“10”.未知支持库函数_29 ()
“11”.未知支持库函数_29 ()
2.未知支持库函数_30 (#.)
附编号 ()
赋值 (临时Esql字段信息1, Esql字段信息1)
.如果真 (是否修改表)
    准备修改表 ()
.如果真结束


.子程序 _插入前按钮_被单击, 空白型, , 
.未知支持库函数_38 (未知支持库函数_3 ())
附编号 ()


.子程序 附编号, 空白型, , 
.局部变量 n, 整数型, , , 

.计次循环首 (., n)
    n.未知支持库函数_9 (0, #., 到文本 (n))
.计次循环尾 ()


.子程序 _插入后按钮_被单击, 空白型, , 
.未知支持库函数_38 (相加 (未知支持库函数_3 (), 1))
附编号 ()


.子程序 _删除行按钮_被单击, 空白型, , 
.局部变量 txt1, 文本型, , , 

赋值 (txt1, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (1)))
.如果真 (等于 (寻找文本 (新表字段, txt1, , 真), -1))
    返回 ()
.如果真结束

赋值 (新表字段, 子文本替换 (新表字段, 相加 (txt1, “,”), “”, , , 假))
赋值 (旧表字段, 子文本替换 (旧表字段, 相加 (txt1, “,”), “”, , , 假))

赋值 (新表字段, 子文本替换 (新表字段, 相加 (“,”, txt1), “”, , , 假))
赋值 (旧表字段, 子文本替换 (旧表字段, 相加 (“,”, txt1), “”, , , 假))


未知支持库函数_3 ().未知支持库函数_36 ()
附编号 ()

.子程序 _保存按钮_被单击, 空白型, , 
.局部变量 txts, 文本型, , "0", 
.局部变量 n, 整数型, , , 
.局部变量 表名, 文本型, , , 

.如果真 (等于 (到文本 (1.未知支持库函数_10 (1)), “”))
    返回 ()
.如果真结束

.如果真 (是否修改表)
    修改表保存 ()
    返回 ()
.如果真结束
.计次循环首 (相减 (., 1), n)
    .如果真 (等于 (n.未知支持库函数_10 (1), “”))
        跳出循环 ()
    .如果真结束
    加入成员 (txts, n.未知支持库函数_10 (1))
    加入成员 (txts, n.未知支持库函数_10 (2))
.计次循环尾 ()
重定义数组 (Esql字段信息1, 假, 到整数 (相除 (取数组成员数 (txts), 2)))
重定义数组 (txts, 真, 到整数 (相除 (取数组成员数 (txts), 2)), 2)
.计次循环首 (取数组成员数 (Esql字段信息1), n)
    赋值 (Esql字段信息1 [n], 名称, txts [n] [1])
    赋值 (Esql字段信息1 [n], 类型, 到整数 (txts [n] [2]))
.计次循环尾 ()


输入框 (“请输入表名：”, , , 表名, )

.如果 (等于 (Esql库1.创建表 (表名, Esql字段信息1), 1))
    信息框 (“创建成功！”, 0, )
    销毁 ()
.否则
    信息框 (“创建失败！！！”, 0, )
.如果结束


.子程序 准备修改表, 空白型, , 
.局部变量 n, 整数型, , , 

赋值 (., 相加 (取数组成员数 (Esql字段信息1), 1))
.计次循环首 (相减 (., 1), n)
    n.未知支持库函数_9 (1, #., Esql字段信息1 [n], 名称)
    n.未知支持库函数_9 (2, #., 到文本 (Esql字段信息1 [n], 类型))
.计次循环尾 ()
附编号 ()
赋值 (临时Esql字段信息1, Esql字段信息1)

.计次循环首 (取数组成员数 (Esql字段信息1), n)
    赋值 (旧表字段, 相加 (旧表字段, Esql字段信息1 [n], 名称, “,”))
.计次循环尾 ()
.如果真 (不等于 (旧表字段, “”))
    赋值 (旧表字段, 取文本左边 (旧表字段, 相减 (取文本长度 (旧表字段), 1))) ' 删除最后的“,”
.如果真结束
赋值 (新表字段, 旧表字段)


.子程序 修改表保存, 空白型, , 
.局部变量 n, 整数型, , , 
.局部变量 txts, 文本型, , "0", 

 ' 思路：创建临时表，将旧表数据导入临时表，删除旧表，创建新表，将临时表数据导入新表，删除临时表
置等待鼠标 ()

.计次循环首 (相减 (., 1), n)
    .如果真 (等于 (n.未知支持库函数_10 (1), “”))
        跳出循环 ()
    .如果真结束
    加入成员 (txts, n.未知支持库函数_10 (1))
    加入成员 (txts, n.未知支持库函数_10 (2))
.计次循环尾 ()
重定义数组 (Esql字段信息1, 假, 到整数 (相除 (取数组成员数 (txts), 2)))
重定义数组 (txts, 真, 到整数 (相除 (取数组成员数 (txts), 2)), 2)
.计次循环首 (取数组成员数 (Esql字段信息1), n)
    赋值 (Esql字段信息1 [n], 名称, txts [n] [1])
    赋值 (Esql字段信息1 [n], 类型, 到整数 (txts [n] [2]))
.计次循环尾 ()
Esql库1.开始事务 (#修改表事务) ' ^_^ 搞个名字 省得 以后 太多 乱 111111

赋值 (临时表名, 相加 (当前表名, “bak2008”)) ' 随便搞个表名！

.如果 (等于 (Esql库1.创建表 (临时表名, Esql字段信息1), 1))
    
    
.否则
    Esql库1.回滚事务 (#修改表事务)
    赋值 (Esql字段信息1, 临时Esql字段信息1)
    信息框 (“创建失败！”, 0, )
    返回 ()
.如果结束




赋值 (sql, 相加 (“insert into ”, 临时表名, “ (”, 新表字段, “) select ”, 旧表字段, “ from ”, 当前表名))



.如果 (等于 (Esql库1.执行SQL语句 (sql), 1))
    
.否则
    
    Esql库1.回滚事务 (#修改表事务)
    赋值 (Esql字段信息1, 临时Esql字段信息1)
    信息框 (“创建失败！！”, 0, )
    返回 ()
    
.如果结束
.如果 (等于 (Esql库1.执行SQL语句 (相加 (“DROP TABLE ”, 当前表名, “;”, “ALTER TABLE ”, 临时表名, “ RENAME TO ”, 当前表名)), 1))
    
.否则
    Esql库1.回滚事务 (#修改表事务)
    赋值 (Esql字段信息1, 临时Esql字段信息1)
    信息框 (“创建失败！！！”, 0, )
    返回 ()
    
.如果结束

Esql库1.提交事务 ()






信息框 (“创建成功！”, 0, )
销毁 ()


.子程序 _取消按钮_被单击, 空白型, , 
销毁 ()

.子程序 _高级表格1_将被编辑, 空白型, , 
赋值 (是否旧字段名, 假)

赋值 (当前旧列名, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (未知支持库函数_4 ())))
.如果 (等于 (寻找文本 (新表字段, 当前旧列名, , 真), -1))
    
.否则
    赋值 (是否旧字段名, 真)
.如果结束


.子程序 _高级表格1_结束编辑, 空白型, , 
.局部变量 txt1, 文本型, , , 

赋值 (txt1, 到文本 (未知支持库函数_3 ().未知支持库函数_10 (未知支持库函数_4 ())))
.如果 (是否旧字段名)
    赋值 (新表字段, 子文本替换 (新表字段, 当前旧列名, txt1, , , 假))
.否则
    
.如果结束


.子程序 _上移按钮_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 txt1, 文本型, , , 
.局部变量 txt2, 文本型, , , 
.局部变量 txt3, 文本型, , , 
.局部变量 txt4, 文本型, , , 

赋值 (n1, 未知支持库函数_3 ())

.如果真 (或者 (等于 (n1, 1), 等于 (n1, -1)))
    返回 ()
.如果真结束
赋值 (txt1, 到文本 (n1.未知支持库函数_10 (1)))
赋值 (txt2, 到文本 (n1.未知支持库函数_10 (2)))
赋值 (txt3, 到文本 (相减 (n1, 1).未知支持库函数_10 (1)))
赋值 (txt4, 到文本 (相减 (n1, 1).未知支持库函数_10 (2)))

n1.未知支持库函数_9 (1, #., txt3)
n1.未知支持库函数_9 (2, #., txt4)
相减 (n1, 1).未知支持库函数_9 (1, #., txt1)
相减 (n1, 1).未知支持库函数_9 (2, #., txt2)


.子程序 _下移按钮_被单击, 空白型, , 
.局部变量 n1, 整数型, , , 
.局部变量 txt1, 文本型, , , 
.局部变量 txt2, 文本型, , , 
.局部变量 txt3, 文本型, , , 
.局部变量 txt4, 文本型, , , 

赋值 (n1, 未知支持库函数_3 ())

.如果真 (或者 (等于 (n1, 相减 (., 1)), 等于 (n1, -1)))
    返回 ()
.如果真结束

赋值 (txt1, 到文本 (n1.未知支持库函数_10 (1)))
赋值 (txt2, 到文本 (n1.未知支持库函数_10 (2)))
赋值 (txt3, 到文本 (相加 (n1, 1).未知支持库函数_10 (1)))
赋值 (txt4, 到文本 (相加 (n1, 1).未知支持库函数_10 (2)))

n1.未知支持库函数_9 (1, #., txt3)
n1.未知支持库函数_9 (2, #., txt4)
相加 (n1, 1).未知支持库函数_9 (1, #., txt1)
相加 (n1, 1).未知支持库函数_9 (2, #., txt2)



.类模块 Esql服务器, , , 

.子程序 置连接超时, 空白型, , 调用格式：〈无返回值〉 对象．置连接超时 （整数型 最长等待时间）    设置网络延时等待时间。 -Esql模块->Esql服务器
.参数 最长等待时间, 整数型, , 单位为毫秒



.子程序 连接, 整数型, , 调用格式：〈整数型〉 对象．连接 （[文本型 服务器地址]，[整数型 端口]，[文本型 口令]，[整数型 连接超时]）    连接 Esql server 系统。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql服务器
.参数 服务器地址, 文本型, 可空, 服务器名称或IP地址，默认为本机地址：“127.0.0.1”
.参数 端口, 整数型, 可空, 默认：20202
.参数 口令, 文本型, 可空, 服务器连接口令。
.参数 连接超时, 整数型, 可空, 默认：5000（单位：毫秒）
.参数 保留参数, 字节集, 可空, 



.子程序 断开, 空白型, , 调用格式：〈无返回值〉 对象．断开 （）    断开本对象与服务器的连接。 -Esql模块->Esql服务器


.子程序 发送命令, 字节集, , 本命令为对象成员高级命令。 -Esql模块->Esql服务器
.参数 欲发送的命令, 文本型, , 命令可参考相关资料。如：发送“dm 14”服务器端程序结束；“run 文件名.exe”可运行服务器上当前目录的程序；“reg 注册号”等等。



.子程序 取所有库, 整数型, , 调用格式：〈整数型〉 对象．取所有库 （文本型数组 返回库名数组）    获取当前服务器中取所有库的名称，以参数形式返回文本型数组。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql服务器
.参数 返回库名数组, 文本型, 数组, 通过本参数返回服务器中取所有库的名称。必须为文本型数组！



.子程序 置口令, 整数型, , 调用格式：〈整数型〉 对象．置口令 （文本型 新口令）    本方法用于修改服务器登陆口令。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql服务器
.参数 新口令, 文本型, , 新口令。



.子程序 置线程, 整数型, , 调用格式：〈整数型〉 对象．置线程 （整数型 最小线程，整数型 最大线程）    本方法用于修改服务器网络线程池大小。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql服务器
.参数 最小线程, 整数型, , 不能小于5
.参数 最大线程, 整数型, , 不能小于20



.子程序 置端口, 整数型, , 调用格式：〈整数型〉 对象．置端口 （整数型 新端口）    本方法用于修改服务器网络端口。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql服务器
.参数 新端口, 整数型, , 新端口。



.子程序 是否注册, 整数型, , 调用格式：〈整数型〉 对象．是否注册 （）    检测所连接的Esql服务器是否为获得授权。已注册返回1，未注册返回0，超时返回-1。 -Esql模块->Esql服务器


.子程序 取注册码, 文本型, , 调用格式：〈整数型〉 对象．取注册码 （）    获取服务器注册码。超时返回-1。 -Esql模块->Esql服务器


.类模块 Esql库, , , 

.子程序 置服务器, 空白型, , 调用格式：〈无返回值〉 对象．置服务器 （Esql服务器 服务器对象）    设置该数据库所在的服务器对象。 -Esql模块->Esql库
.参数 服务器对象, Esql服务器, , 本参数提供要设置的Esql服务器对象。



.子程序 是否已打开, 整数型, , 调用格式：〈整数型〉 对象．是否已打开 （）    本命令判断当前数据库对象是否已经被打开。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql数据库


.子程序 打开, 整数型, , 调用格式：〈整数型〉 对象．打开 （［文本型 数据库文件］，［逻辑型 是否允许创建］）    打开或新建数据库。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 数据库文件, 文本型, , 本参数文件路径可省略，默认为 Esql server系统下 "data\"目录；支持服务器上的相对路径与绝对路径。
.参数 是否允许创建, 逻辑型, 可空, 可以被省略。在指定的数据库文件不存在的情况下，如果本属性为“真”，则创建该数据库，否则直接返回“假”。本参数如果被省略，默认为“假”。
.参数 保留参数, 字节集, 可空, 可以被省略。本参数保留用作以后使用。



.子程序 关闭, 整数型, , 调用格式：〈整数型〉 对象．关闭 （）    关闭本数据库对象。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库


.子程序 执行SQL语句, 整数型, , 调用格式：〈整数型〉 对象．执行SQL语句 （文本型 欲执行的SQL语句）    执行指定的一条或多条SQL语句。本方法不能处理带“SQL参数”的SQL语句。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 欲执行的SQL语句, 文本型, , 多个SQL语句之间请以半角分号“;”隔开，最后一个SQL语句后面可以不加“;”。



.子程序 置最大等待时间, 整数型, , 调用格式：〈整数型〉 对象．置最大等待时间 （整数型 最大等待时间(单位: 秒)）    设置数据库被锁定时的最大等待时间，如果数据库超过最大等待时间后还没有被解锁，则中止尝试执行当前操作。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 最大等待时间, 整数型, , 单位: 秒



.子程序 取错误码, 整数型, , 调用格式：〈整数型〉 对象．取错误码 （）    取前面最近一次操作的执行结果的错误代码。如果错误代码为0表示前一次操作成功。错误代码为-1001表示连接超时。 -Esql模块->Esql库


.子程序 取错误文本, 文本型, , 调用格式：〈文本型〉 对象．取错误文本 （）    取前面最近一次操作的执行结果的错误信息文本。如果前一次操作成功或本方法调用失败，将返回空文本。超时返回“超时”。 -Esql模块->Esql库


.子程序 取最新插入ID, 长整数型, , 调用格式：〈长整数型〉 对象．取最新插入ID （）    取前面最近一次插入的记录的记录ID。记录ID从1开始。如果执行失败将返回0，超时返回-1。 -Esql模块->Esql库


.子程序 开始事务, 整数型, , 调用格式：〈整数型〉 对象．开始事务 （［文本型 事务名称］）    该方法执行后，可用“回滚事务”撤销中间做过的操作，或用“提交事务”表示事务完毕。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 事务名称, 文本型, 可空, 事务名称可被省略，但称不能用数字开头！利用本参数可操作多个不同名称的事务。



.子程序 提交事务, 整数型, , 调用格式：〈整数型〉 对象．提交事务 （［文本型 事务名称］）    本命令需配合“开始事务”使用，“提交事务”表示事务完毕。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 事务名称, 文本型, 可空, 事务名称可被省略，但称不能用数字开头！利用本参数可操作多个不同名称的事务。



.子程序 回滚事务, 整数型, , 调用格式：〈整数型〉 对象．回滚事务 （［文本型 事务名称］）    本命令需配合“开始事务”使用，“回滚事务”表示撤销中间做过的操作。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 事务名称, 文本型, 可空, 事务名称可被省略，但称不能用数字开头！利用本参数可操作多个不同名称的事务。



.子程序 表是否存在, 整数型, , 调用格式：〈整数型〉 对象．表是否存在 （文本型 表名）    判断数据库是否已有指定的表或视图，包含临时表和视图。存在返回真。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 表名, 文本型, , 表名或视图名。



.子程序 取所有表, 整数型, , 调用格式：〈整数型〉 对象．取所有表 （逻辑型 是否包含表，逻辑型 是否包含视图，逻辑型 是否包含临时表或视图，文本型数组 返回表名数组）    获取当前库中表与视图的名称，以参数形式返回文本数组。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 是否包含表, 逻辑型, , 
.参数 是否包含视图, 逻辑型, , 
.参数 是否包含临时表或视图, 逻辑型, 可空, 
.参数 返回表名数组, 文本型, 数组, 通过本参数返回表与视图的名称。必须为文本型数组！



.子程序 取表定义, 文本型, , 调用格式：〈文本型〉 对象．取表定义 （文本型 表名称）    返回创建指定表时所用的SQL语句（CREATE TABLE ...）。超时返回“超时” -Esql模块->Esql库
.参数 表名称, 文本型, , 



.子程序 创建表, 整数型, , 调用格式：〈整数型〉 对象．创建表 （文本型 表名称，Esql字段信息数组 字段信息）    创建数据表。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 表名称, 文本型, , 表名称。
.参数 字段信息, Esql字段信息, 数组, 提供参数数据需数组数据。



.子程序 删除表, 整数型, , 调用格式：〈整数型〉 对象．删除表 （文本型 要删除的表名）    将指定表连同其中的所有记录全部删除。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 要删除的表名, 文本型, , 指定表名。



.子程序 清空表, 整数型, , 调用格式：〈整数型〉 对象．清空表 （文本型 要清空的表名）    删除指定表中所有记录。本方法不删除表自身，也不改变表结构。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库
.参数 要清空的表名, 文本型, , 指定表名。



.子程序 收缩数据库, 整数型, , 调用格式：〈整数型〉 对象．收缩数据库 （）    收缩数据所占用的磁盘空间。经过大批量记录增删之后，数据库文件可能会变的较大，调用此方法可释放一部分缓冲区域，以减少文件尺寸。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql库


.子程序 置连接超时, 空白型, , 调用格式：〈无返回值〉 对象．置连接超时 （整数型 最长等待时间）    设置网络延时等待时间。 -Esql模块->Esql库
.参数 最长等待时间, 整数型, , 单位为毫秒



.子程序 取表字段信息, 整数型, , 调用格式：〈整数型〉 对象．取表全部字段类型 （文本型 表名称，Esql字段信息数组 返回的字段信息数组）    通过返回的字段信息数组，可获取该表的字段个数、各字段的名称、类型与长度。成功返回1，失败返回0，超时返回-1。  -Esql模块->Esql库
.参数 表名称, 文本型, , 表名称
.参数 返回的字段信息, Esql字段信息, 数组, 其中类型{ -1、（主键，整数型自增字段）； 0、（通用型）； 4、（#逻辑型 #字节型 #短整数型 #整数型 #长整数型）； 6、（#小数型 #双精度小数型）； 10、（#日期时间型 #文本型 #备注型）； 11、（#字节集型）；}  最大文本长度为0表示不限长度；



.类模块 Esql表, , , 

.子程序 打开, 整数型, , 调用格式：〈整数型〉 对象．打开 （文本型 表名称，Esql数据库 所属数据库）    打开指定表。表成功打开后，记录集指针将指向首记录前。一个“Esql表”对象同一时刻只能打开一个表，打开后一个表意味着将关闭前一个已打开的表(如果有的话)。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 表名称, 文本型, , 将要打开的表或视图的名称。
.参数 所属Esql库, Esql库, , Esql库对象，该数据库必须已经打开。



.子程序 刷新, 整数型, , 调用格式：〈整数型〉 对象．刷新 （）    重新从数据库中读取最新数据。一般在其它程序或线程修改了数据库后需调用本方法。注意本方法不改变当前记录号。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 关闭, 整数型, , 调用格式：〈整数型〉 对象．关闭 （）    关闭当前打开的表。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 取所有记录, 整数型, , 调用格式：〈整数型〉 对象．取所有记录 （逻辑型 是否包含表头，文本型数组 返回内容数组）    获取当前库中表或视图中的内容，以参数形式返回二维文本数组。如果表中有非文本型字段，将自动转换为文本型（可能丢失部分数据）。如没有任何记录，就算包含表头也将返回空数组。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 是否包含表头, 逻辑型, , 是否在返回值数组的第一行包含字段名称。如果指定表中没有任何记录，即使本参数为“真”，也将返回空数组。
.参数 返回内容数组, 文本型, 数组, 需提供文本型数组



.子程序 置连接超时, 空白型, , 调用格式：〈无返回值〉 对象．置连接超时 （整数型 最长等待时间）    设置网络延时等待时间。 -Esql模块->Esql表
.参数 最长等待时间, 整数型, , 单位为毫秒



.子程序 是否已打开, 整数型, , 调用格式：〈整数型〉 对象．是否已打开 （）    本命令判断当前Esql表对象是否已经被打开。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 取字段个数, 整数型, , 调用格式：〈整数型〉 对象．取字段个数 （）    取表中的字段个数。超时返回-1。 -Esql模块->Esql表


.子程序 取记录个数, 整数型, , 调用格式：〈整数型〉 对象．取记录个数 （）    返回表中的记录个数。超时返回-1。  -Esql模块->Esql表


.子程序 读文本, 文本型, , 调用格式：〈文本型〉 对象．读文本 （文本型 字段名称或位置，[整数型 执行结果]）    本命令可读取当前位置的字段值，并将数据转换为文本后返回。 -Esql模块->Esql表
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 执行结果, 整数型, 可空, 以参数值形式返回操作是否成功！成功返回1，失败返回0，超时返回-1。



.子程序 跳过, 整数型, , 调用格式：〈整数型〉 对象．跳过 （整数型 欲跳过的记录数）    将当前记录指针向前或者向后移动数条记录。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 欲跳过的记录数, 整数型, 可空, 可以被省略。参数值如果为负数，则向前移动，否则向后移动。如果本参数被省略，默认值为 1 ，即向后移动一条记录。



.子程序 读字节集, 字节集, , 调用格式：〈字节集〉 对象．读字节集 （文本型 字段名称或位置，[整数型 执行结果]）    本命令可读取当前位置的字节集字段值。 -Esql模块->Esql表
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 执行结果, 整数型, 可空, 以参数值形式返回操作是否成功！成功返回1，失败返回0，超时返回-1。



.子程序 跳到, 整数型, , 调用格式：〈整数型〉 对象．跳过 （整数型 欲跳到的记录号）    改变当前记录指针到指定的记录号。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 欲跳到的记录号, 整数型, , 参数值所指定的记录号从 1 开始，即首记录的记录号为 1 ，依此类推。



.子程序 写字节集, 整数型, , 调用格式： 〈整数型〉 对象．写字节集 （文本型 字段名称或位置，字节集 欲写入字节集）    将第二个参数“欲写入字节集”数据写入当前记录中的指定字段。本方法通常在“编辑()”或“插入()”之后、“提交()”之前被调用，且仅当“提交()”调用后数据库才被实际修改。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 欲写入字节集, 字节集, , 



.子程序 编辑, 整数型, , 调用格式：〈整数型〉 对象．编辑 （）    进行“编辑”状态，准备修改当前记录。在调用本方法后，可使用“写字段值()”修改当前记录中的各字段值；只有调用“提交()”后才会实际执行修改操作。也可用“取消()”撤销本操作。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 提交, 整数型, , 调用格式：〈整数型〉 对象．提交 （）    将“编辑()”或“插入()”后对记录所作的修改（通过“写文本()”或“写字节集()”）提交到数据库，并退出“编辑”或“插入”状态。如果不执行此方法，数据库不会被实际修改。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 写文本, 整数型, , 调用格式：〈整数型〉 对象．写文本 （文本型 字段名称或位置，文本型 欲写入文本，整数型 文本形式）    将第二个参数“欲写入文本”数据写入当前记录中的指定字段。本方法通常在“编辑()”或“插入()”之后、“提交()”之前被调用，且仅当“提交()”调用后数据库才被实际修改。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 欲写入文本, 文本型, , 参数接受“数值或日期”的文本形式。
.参数 文本形式, 整数型, , 10、（#日期时间型 #文本型 #备注型）；4、（#逻辑型 #字节型 #短整数型 #整数型 #长整数型）； 6、（#小数型 #双精度小数型）；  -1、（主键，整数型自增字段）； 0、（通用型）



.子程序 插入, 整数型, , 调用格式： 〈整数型〉 对象．插入 （）    进行“插入”状态，准备向表中插入一条记录。在调用本方法后，可使用“写字段值()”填充要插入记录中的各字段值；只有调用“提交()”后才会实际执行插入操作。也可用“取消()”撤销本操作。成功返回1，失败返回0，超时返回-1。  -Esql模块->Esql表


.子程序 取所有字段, 整数型, , 调用格式： 〈整数型〉 对象．取所有字段 （文本型 返回的文本型数组）    通过本方法获取该表所有字段名的文本型数组，并以参数的形式获取。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表
.参数 返回的文本型数组, 文本型, 数组, 通过本参数返回所有字段名的文本型数组。



.子程序 取表名, 文本型, , 调用格式：〈文本型〉 对象．取表名 （）    返回当前已打开的表名。如果表已被关闭或超时，将返回空文本。 -Esql模块->Esql表


.子程序 取记录号, 整数型, , 调用格式：〈整数型〉 对象．取记录号 （）    返回当前记录的记录号，第一条记录为1，第二条记录为2，依次类推。如果当前记录指针在首记录前，返回0 ；如果在尾记录后，返回值为记录总数加一。超时返回-1。 -Esql模块->Esql表


.子程序 取消, 整数型, , 调用格式：〈整数型〉 对象．取消 （）    取消“编辑()”或“插入()”后对记录所作的修改（通过“写文本()”或“写字节集()”），并退出“编辑”或“插入”状态。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 删除, 整数型, ,  调用格式：〈整数型〉 对象．删除 （）    删除当前记录。删除成功后，记录指针指向着记录前。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 尾记录后, 整数型, , 调用格式：〈整数型〉 对象．尾记录后 （）    如果当前记录指针已在尾记录的后面，成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 首记录前, 整数型, , 调用格式：〈整数型〉 对象．首记录前 （）如果当前记录指针已在首记录的前面，成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 到首记录, 整数型, , 调用格式：〈整数型〉 对象．到首记录 （）    移动到表的第一条记录，成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.子程序 到尾记录, 整数型, , 调用格式：〈整数型〉 对象．到尾记录 （）    移动到表的最后一条记录，成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql表


.类模块 Esql记录集, , , 

.子程序 置连接超时, 空白型, , 调用格式：〈无返回值〉 对象．置连接超时 （整数型 最长等待时间）    设置网络延时等待时间。 -Esql模块->Esql记录集
.参数 最长等待时间, 整数型, , 单位为毫秒



.子程序 置SQL语句, 整数型, , 调用格式：〈整数型〉 对象．置SQL语句 （文本型 SQL语句，Esql库 Esql库）    设置本对象所使用的SQL语句、与Esql库对象。要用“打开()”启用该对象。成功返回真。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 SQL语句, 文本型, , SQL语句中可包含零到多个“SQL参数”，无名称参数“?”可用索引值邦定其值，索引值从1开始；有名称参数“$v”，v代表一个参数名（参数名只支持英文字母）。所有“SQL参数”均需经过“绑定参数()”进行值绑定，未经绑定的“SQL参数”其值将视为null。
.参数 所属Esql库, Esql库, , 指定对哪个Esql库进行查询，该数据库必须已经打开。



.子程序 取参数个数, 整数型, , 调用格式：〈整数型〉 对象．取参数个数 （）    返回当前SQL语句（由“置SQL语句()”或“Esql记录集.取记录集()”指定）中所包含的“SQL参数”个数。超时返回-1。 -Esql模块->Esql记录集


.子程序 取所有参数, 整数型, , 调用格式：〈整数型〉 对象．取所有参数 （文本型数组 欲返回SQL参数）    所有“SQL参数”的参数名称组成的一维文本数组，由参数形式返回。如果“SQL参数”没有名称，则对应的数组成员为空文本。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 欲返回SQL参数, 文本型, 数组, 通过本参数返回““SQL参数”文本型数组。



.子程序 绑定字节集参数, 整数型, , 调用格式：〈整数型〉 对象．绑定字节集参数 （文本型 参数名称或索引，［文本型 要绑定的字节集值］）    可以是执行类（如update/insert/delete等），对当前SQL语句（由“置SQL语句()”或“Esql记录集.取记录集()”所指定）中所包含的某个“SQL参数”进行值绑定。所有“SQL参数”均需进行值绑定，未经绑定的“SQL参数”其值将视为null。如果对同一“SQL参数”进行多次绑定，则最后一次绑定的值将覆盖前面所绑定的值。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 参数名称或索引, 文本型, , 使用参数名称时注意，“$”也是参数名称的一部分；使用参数索引时注意，索引从1开始。
.参数 要绑定的字节集值, 字节集, 可空, 可以被省略。如果省略本参数，默认为null。



.子程序 绑定文本参数, 整数型, , 调用格式：〈整数型〉 对象．绑定文本参数 （文本型 参数名称或索引，［文本型 要绑定的文本值］，整数型 文本形式）    可以是执行类（如update/insert/delete等），对当前SQL语句（由“置SQL语句()”或“Esql记录集.取记录集()”所指定）中所包含的某个“SQL参数”进行值绑定。所有“SQL参数”均需进行值绑定，未经绑定的“SQL参数”其值将视为null。如果对同一“SQL参数”进行多次绑定，则最后一次绑定的值将覆盖前面所绑定的值。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 参数名称或索引, 文本型, , 使用参数名称时注意，“$”也是参数名称的一部分；使用参数索引时注意，索引从1开始。
.参数 要绑定的文本值, 文本型, 可空, 可以被省略。如果省略本参数，默认为null。数值或日期等类型需转换为文本型后提交。
.参数 文本形式, 整数型, , 10、（#日期时间型 #文本型 #备注型）；4、（#逻辑型 #字节型 #短整数型 #整数型 #长整数型）； 6、（#小数型 #双精度小数型）；



.子程序 是否已打开, 整数型, , 调用格式：〈整数型〉 对象．是否已打开 （）    判断Esql记录集是否已经打开。打开返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 打开, 整数型, , 调用格式：〈整数型〉 对象．打开 （）    打开或重新打开记录集。对于查询类(select)SQL语句，将当前记录指针指向第一条记录之前；对于执行类(update)SQL语句，执行该语句一次。此方法可以被多次重复调用。读取记录集数据之前，必须“打开()”记录集。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 关闭, 整数型, , 调用格式：〈整数型〉 对象．关闭 （）    关闭记录集。关闭后的记录集不再可用，所有内部数据全部丢失。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 读字节集, 字节集, , 调用格式：〈字节集〉 对象．读字节集 （文本型 字段名称或位置，[整数型 执行结果]）    本命令可读取当前位置的字节集字段值。 -Esql模块->Esql记录集
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 执行结果, 整数型, 可空, 以参数值形式返回操作是否成功！成功返回1，失败返回0，超时返回-1。



.子程序 读文本, 文本型, , 调用格式：〈文本型〉 对象．读文本 （文本型 字段名称或位置，[整数型 执行结果]）    本命令可读取当前位置的字段值，并将数据转换为文本后返回。 -Esql模块->Esql记录集
.参数 字段名称或位置, 文本型, , 可以用“1”表示第一列......或填写字段名。
.参数 执行结果, 整数型, 可空, 以参数值形式返回操作是否成功！成功返回1，失败返回0，超时返回-1。



.子程序 到下一记录, 整数型, , 调用格式：〈整数型〉 对象．到下一记录 （）    移动到下一条记录。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 首记录前, 整数型, , 调用格式：〈整数型〉 对象．首记录前 （）    判断当前记录指针是否指向第一条记录之前。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 尾记录后, 整数型, , 调用格式：〈整数型〉 对象．首记录前 （）    判断当前记录指针是否指向最后一条记录之后。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集


.子程序 取记录个数, 整数型, , 调用格式： 〈整数型〉 对象．取记录个数 （）   返回记录集中的记录个数。超时返回-1。 -Esql模块->Esql记录集


.子程序 取所有记录, 整数型, , 调用格式：〈整数型〉 对象．取所有记录 （逻辑型 是否包含表头，文本型数组 返回内容数组）    返回一个二维文本数组，其中存放了记录集中所有记录（含所有字段）内容；如果记录集中没有记录或操作失败，将返回空数组。如果记录集中有非文本型字段，将自动转换为文本型（可能丢失部分数据）。提示：使用“Esql记录集.读字节集()”或“Esql记录集.读字节集()”可正确地处理非文本类型字段。注意：本方法执行后，当前记录指针将指向首记录前（相当于重新打开记录集）。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 是否包含表头, 逻辑型, , 是否在返回值数组的第一行包含字段名称。如果指定记录集中没有任何记录，即使本参数为“真”，也将返回空数组。
.参数 返回内容数组, 文本型, 数组, 需提供文本型数组



.子程序 取字段个数, 整数型, , 调用格式：〈整数型〉 对象．取字段个数 （）    取记录集中的字段个数。超时返回-1。 -Esql模块->Esql记录集


.子程序 取所有字段, 整数型, , 调用格式： 〈整数型〉 对象．取所有字段 （文本型 返回的文本型数组）    通过本方法获取该记录集所有字段名的文本型数组，并以参数的形式获取。成功返回1，失败返回0，超时返回-1。 -Esql模块->Esql记录集
.参数 返回的文本型数组, 文本型, 数组, 通过本参数返回所有字段名的文本型数组。




 ' 不属于任何一个程序集、类模块的函数：
