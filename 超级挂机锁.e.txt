 ' 文件类型：Windows窗口程序

 ' 程序名称：超级挂机锁
 ' 程序描述：超级挂机锁
@备注:
超级挂机锁
 ' 程序作者：李光
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：李光 (Alifans@yahoo.cn)
 ' 版本号：2.0
 ' 创建号：2.0

窗口 _密码窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 416
    高度 = 114
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = 33023 '  0x80FF
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 假
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 真
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “请输入密码”
    帮助文件名 = “”

窗口 _遮罩窗口
    左边 = 0
    顶边 = 0
    宽度 = 380
    高度 = 277
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 0
    底图方式 = 1
    底色 = 0 '  0x0
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 假
    随意移动 = 假
    外形 = 0
    总在最前 = 真
    保持标题栏激活 = 假
    窗口类名 = “”
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.常量 设置密码, "0", , 
.常量 验证密码, "1", , 
.图片 加锁1, " ' 已保存到：D:\易语言学习\Data\超级挂机锁.e\加锁1", , 
.图片 加锁2, " ' 已保存到：D:\易语言学习\Data\超级挂机锁.e\加锁2", , 
.图片 解锁1, " ' 已保存到：D:\易语言学习\Data\超级挂机锁.e\解锁1", , 
.图片 解锁2, " ' 已保存到：D:\易语言学习\Data\超级挂机锁.e\解锁2", , 
.常量 GWL_EXSTYLE, "-20", , 
.常量 WS_EX_LAYERED, "524288", , 
.常量 LWA_ALPHA, "2", , 
.常量 TH32CS_SNAPPROCESS, "2", , 
.常量 PROCESS_ALL_ACCESS, "2035711", , 
.常量 MEM_COMMIT, "4096", , 
.常量 PAGE_EXECUTE_READWRITE, "64", , 
.常量 MEM_RELEASE, "32768", , 
.常量 WM_CLOSE, "16", , 
.常量 SE_PRIVILEGE_ENABLED, "2", , 
.常量 SE_DEBUG_NAME, "“SeDebugPrivilege”", , 
.常量 TOKEN_ADJUST_PRIVILEGES, "32", , 
.常量 TOKEN_QUERY, "8", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 LPPROCESSENTRY32, , 
    .成员 dwSize, 整数型, , , 
    .成员 cntUsage, 整数型, , , 
    .成员 th32ProcessID, 整数型, , , 
    .成员 th32DefaultHeapID, 整数型, , , 
    .成员 th32ModuleID, 整数型, , , 
    .成员 cntThreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcPriClassBase, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 szExeFile, 字节型, , "260", 

数据类型 LUID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 TOKEN_PRIVILEGES, , 
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 HookInf, , 
    .成员 ProcessId, 整数型, , , 
    .成员 ModuleHandle, 整数型, , , 

.全局变量 解锁密码, 整数型, , , 

.DLL命令 SetLayeredWindowAttributes, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 
    .参数 crkey, 整数型, , 
    .参数 alpha, 字节型, , 
    .参数 dwflags, 整数型, , 

.DLL命令 SetWindowLong, 整数型, "", "SetWindowLongA", , 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 
    .参数 dwNewLong, 整数型, , 

.DLL命令 GetWindowLong, 整数型, "", "GetWindowLongA", , 
    .参数 hWnd, 整数型, , 
    .参数 nIndex, 整数型, , 

.DLL命令 Keyboard_InHook, 逻辑型, "Keyboard_Hook.dll", "InHook", , 

.DLL命令 Keyboard_UnHook, 空白型, "Keyboard_Hook.dll", "UnHook", , 

.DLL命令 CloseHandle, 逻辑型, "", "", , 
    .参数 hObject, 整数型, , 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "", , 
    .参数 dwFlags, 整数型, , 
    .参数 th32ProcessID, 整数型, , 

.DLL命令 Process32First, 逻辑型, "", "", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, LPPROCESSENTRY32, , 

.DLL命令 Process32Next, 逻辑型, "", "", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, LPPROCESSENTRY32, , 

.DLL命令 OpenProcess, 整数型, "", "", , 
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 逻辑型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 GetCurrentProcess, 整数型, "", "", , 

.DLL命令 OpenProcessToken, 逻辑型, "", "", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 LookupPrivilegeValue, 逻辑型, "", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 整数型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LUID, , 

.DLL命令 AdjustTokenPrivileges, 逻辑型, "", "", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 逻辑型, , 
    .参数 NewState, TOKEN_PRIVILEGES, , 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 GetProcAddress, 整数型, "", "", , 
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 GetModuleHandle, 整数型, "", "GetModuleHandleA", , 
    .参数 lpModuleName, 文本型, , 

.DLL命令 WaitForSingleObject, 整数型, "", "", , 
    .参数 hHandle, 整数型, , 
    .参数 dwMilliseconds, 整数型, , 

.DLL命令 GetExitCodeThread, 整数型, "", "", , 
    .参数 Handle, 整数型, , 
    .参数 ret, 整数型, 传址, 

.DLL命令 LoadLibrary, 整数型, "", "LoadLibraryExA", , 
    .参数 lpLibFileName, 文本型, , 

.DLL命令 FreeLibrary, 整数型, "", "", , 
    .参数 hModule, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 整数型, , 
    .参数 flProtect, 整数型, , 

.DLL命令 VirtualFreeEx, 逻辑型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 dwFreeType, 整数型, , 

.DLL命令 ReadProcessMemory, 逻辑型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesRead, 整数型, 传址, 

.DLL命令 WriteProcessMemory, 逻辑型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpBaseAddress, 整数型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 整数型, , 
    .参数 lpNumberOfBytesWritten, 整数型, 传址, 

.DLL命令 CreateRemoteThread, 整数型, "", "", , 
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, 整数型, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, 传址, 

.DLL命令 GetFocus, 整数型, "", "", , 

.DLL命令 GetForegroundWindow, 整数型, "", "", , 

.DLL命令 SetForegroundWindow, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 GetActiveWindow, 整数型, "", "", , 

.DLL命令 SetActiveWindow, 整数型, "", "", , 
    .参数 hWnd, 整数型, , 

.DLL命令 FindWindow, 整数型, "", "FindWindowA", , 
    .参数 lpClassName, 整数型, , 
    .参数 lpWindowName, 文本型, , 

.DLL命令 SendMessage, 整数型, "", "SendMessageA", , 
    .参数 hWnd, 整数型, , 
    .参数 Msg, 整数型, , 
    .参数 wParam, 整数型, , 
    .参数 lParam, 整数型, , 

.DLL命令 GetWindowsDirectory, 整数型, "", "GetWindowsDirectoryA", , 
    .参数 lpBuffer, 文本型, , 
    .参数 uSize, 整数型, , 

.DLL命令 NtSuspendProcess, 整数型, "Ntdll.dll", "", , 
    .参数 hProcess, 整数型, , 

.DLL命令 NtResumeProcess, 空白型, "Ntdll.dll", "", , 
    .参数 hProcess, 整数型, , 

.DLL命令 Mouse_InHook, 逻辑型, "Mouse_Hook.dll", "InHook", , 

.DLL命令 Mouse_UnHook, 空白型, "Mouse_Hook.dll", "UnHook", , 

.窗口程序集 密码窗口程序集, , , 

.程序集变量 输入密码, 整数型, , , 
.程序集变量 按钮数组, 图形按钮, , "16", 
.程序集变量 当前类型, 整数型, , , 
.程序集变量 左, 整数型, , , 
.程序集变量 顶, 整数型, , , 
.子程序 加锁, 空白型, , 
.局部变量 i, 整数型, , , 

赋值 (当前类型, #设置密码)
赋值 (解锁密码, 0)
载入 (_密码窗口, , 真)

.子程序 解锁, 空白型, , 
赋值 (当前类型, #验证密码)
赋值 (输入密码, 0)
载入 (_遮罩窗口, , 假)
载入 (_密码窗口, , 真)

.子程序 验证密码, 逻辑型, , 
返回 (等于 (解锁密码, 输入密码))

.子程序 __密码窗口_创建完毕, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 x, 整数型, , , 
.局部变量 y, 整数型, , , 

.如果真 (不等于 (左, 0))
    赋值 (., 左)
.如果真结束
.如果真 (不等于 (顶, 0))
    赋值 (., 顶)
.如果真结束

赋值 (., 相加 (相减 (., 取用户区宽度 ()), 1, 相乘 (4, 相加 (., 1))))
赋值 (., 相加 (相减 (., 取用户区高度 ()), 1, 相乘 (4, 相加 (., 1)), .))


.计次循环首 (4, y)
    .计次循环首 (4, x)
        赋值 (i, 相减 (相加 (相乘 (y, 4), x), 4))
        复制窗口组件 (按钮数组 [i])
        
         ' 画板_图片合成.底图 ＝ 模板按钮.正常图片
         ' 画板_图片合成.文本颜色 ＝ #灰色
         ' 画板_图片合成.字体.加粗 ＝ 真
         ' 画板_图片合成.字体.字体大小 ＝ 30
         ' 画板_图片合成.定位写出 ((模板按钮.宽度 － 画板_图片合成.取宽度 (“a”)) ÷ 2, (模板按钮.高度 － 画板_图片合成.取高度 (“a”)) ÷ 2, 到文本 (取十六进制文本 (i － 1)))
         ' 按钮数组 [i].正常图片 ＝ 画板_图片合成.取图片 (, )
        
         ' 画板_图片合成.底图 ＝ 模板按钮.按下图片
         ' 画板_图片合成.文本颜色 ＝ #深青
         ' 画板_图片合成.定位写出 ((模板按钮.宽度 － 画板_图片合成.取宽度 (“a”)) ÷ 2, (模板按钮.高度 － 画板_图片合成.取高度 (“a”)) ÷ 2, 到文本 (取十六进制文本 (i － 1)))
         ' 按钮数组 [i].按下图片 ＝ 画板_图片合成.取图片 (, )
        
        赋值 (按钮数组 [i], , 相加 (1, 相乘 (相减 (x, 1), 相加 (., 1))))
        赋值 (按钮数组 [i], , 相加 (1, 相乘 (相减 (y, 1), 相加 (., 1))))
        赋值 (按钮数组 [i], , 到文本 (i))
        赋值 (按钮数组 [i], , 真)
    .计次循环尾 ()
.计次循环尾 ()

赋值 (., 选择 (等于 (当前类型, #设置密码), “请设置密码”, “请输入密码”))
赋值 (., 选择 (等于 (当前类型, #设置密码), #加锁1, #解锁1))
赋值 (., 选择 (等于 (当前类型, #设置密码), #加锁2, #解锁2))
赋值 (., 等于 (当前类型, #验证密码))


.子程序 __密码窗口_将被销毁, 空白型, , 
赋值 (左, .)
赋值 (顶, .)

.子程序 __密码窗口_尺寸被改变, 空白型, , 
赋值 (., 0)
赋值 (., 相减 (取用户区高度 (), .))
赋值 (., 取用户区宽度 ())

赋值 (., 相加 (., 56))
赋值 (., 相减 (取用户区高度 (), ., 6))

赋值 (., 相减 (., ., 56))
赋值 (., .)

.子程序 _模板按钮_被单击, 空白型, , 
.局部变量 按钮, 图形按钮, , , 
.局部变量 输入值, 整数型, , , 

赋值 (按钮, 取事件组件 ())
赋值 (输入值, 求次方 (2, 相减 (到整数 (按钮.), 1)))

.如果 (等于 (当前类型, #设置密码))
    赋值 (解锁密码, 选择 (按钮., 位或 (解锁密码, 输入值), 位异或 (解锁密码, 输入值)))
.否则
    赋值 (输入密码, 选择 (按钮., 位或 (输入密码, 输入值), 位异或 (输入密码, 输入值)))
.如果结束


.子程序 _按钮_加锁_被单击, 空白型, , 
.局部变量 path, 文本型, , , 
.局部变量 文件号, 整数型, 静态, , 

.如果 (等于 (当前类型, #设置密码))
    销毁 ()
    
    赋值 (path, 取空白文本 (256))
    GetWindowsDirectory (path, 256)
    赋值 (文件号, 打开文件 (相加 (删首尾空 (path), “\system32\taskmgr.exe”), #读入, #禁止读写))
    
    锁定键盘鼠标 ()
    解锁 ()
    
.否则
    
    .如果真 (验证密码 ())
        _遮罩窗口.销毁 ()
        销毁 ()
        解锁键盘鼠标 ()
        关闭文件 (文件号)
    .如果真结束
    
.如果结束


.子程序 _按钮_取消_被单击, 空白型, , 
销毁 ()

.窗口程序集 遮罩窗口程序集, , , 

.程序集变量 透明度, 整数型, , , 
.子程序 __遮罩窗口_创建完毕, 空白型, , 
赋值 (., 0)
赋值 (., 0)
赋值 (., 取屏幕宽度 ())
赋值 (., 取屏幕高度 ())

SetWindowLong (取窗口句柄 (), #GWL_EXSTYLE, 位或 (GetWindowLong (取窗口句柄 (), #GWL_EXSTYLE), #WS_EX_LAYERED))

赋值 (透明度, 0)

.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 任务管理器, 整数型, , , 

.如果 (大于或等于 (透明度, 200))
    
.否则
    赋值 (透明度, 相加 (透明度, 4))
    SetLayeredWindowAttributes (取窗口句柄 (), 0, 透明度, #LWA_ALPHA)
.如果结束


.如果真 (是否已创建 (_密码窗口))
    
     ' 如果真 (GetFocus () ≠ _密码窗口.取窗口句柄 () 或 GetActiveWindow () ≠ _密码窗口.取窗口句柄 () 或 GetForegroundWindow () ≠ _密码窗口.取窗口句柄 ())
    赋值 (_密码窗口., 真)
    
.如果真结束

赋值 (任务管理器, FindWindow (0, “Windows 任务管理器”))
.如果真 (不等于 (任务管理器, 0))
    SendMessage (任务管理器, #WM_CLOSE, 0, 0)
.如果真结束


.程序集 入口程序集, , , 

.子程序 _启动子程序, 整数型, , 
加锁 ()
返回 (0)

.程序集 核心程序集, , , 

.程序集变量 SAS_HookInf, HookInf, , "0", 
.程序集变量 WinLogon_Suspend, 整数型, , "0", 
.子程序 锁定键盘鼠标, 空白型, , 
提权 ()

Keyboard_InHook ()
Mouse_InHook ()
SAS_InHook ()
 ' WinLogon_Suspend ()

.子程序 解锁键盘鼠标, 空白型, , 
Keyboard_UnHook ()
Mouse_UnHook ()
SAS_UnHook ()
 ' WinLogon_Resume ()

.子程序 GetWinLogon, 整数型, , 
.参数 WinLogon, 整数型, 参考 数组, 

.局部变量 LPPROCESSENTRY32, LPPROCESSENTRY32, , , 
.局部变量 hSnapshot, 整数型, , , 
.局部变量 n, 整数型, , , 

清除数组 (WinLogon)


赋值 (hSnapshot, CreateToolhelp32Snapshot (#TH32CS_SNAPPROCESS, 0))
.如果真 (不等于 (hSnapshot, 0))
    赋值 (LPPROCESSENTRY32.dwSize, 296)
    .如果真 (Process32First (hSnapshot, LPPROCESSENTRY32))
        .循环判断首 ()
            .如果真 (等于 (文本比较 (到文本 (LPPROCESSENTRY32.szExeFile), “WinLogon.exe”, 假), 0))
                加入成员 (WinLogon, LPPROCESSENTRY32.th32ProcessID)
                赋值 (n, 相加 (n, 1))
            .如果真结束
            
        .循环判断尾 (Process32Next (hSnapshot, LPPROCESSENTRY32))
    .如果真结束
    CloseHandle (hSnapshot)
.如果真结束

返回 (n)

.子程序 SAS_InHook, 空白型, , 
.局部变量 DllName, 文本型, , , 
.局部变量 WinLogon, 整数型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 LoadLibrary, 整数型, , , 
.局部变量 pDllName, 整数型, , , 
.局部变量 hThread, 整数型, , , 
.局部变量 HookInf, HookInf, , , 
.局部变量 hModule, 整数型, , , 

赋值 (DllName, 相加 (取运行目录 (), “\SAS_Hook.dll”))

.计次循环首 (GetWinLogon (WinLogon), i)
    
    赋值 (hProcess, OpenProcess (#PROCESS_ALL_ACCESS, 假, WinLogon [i]))
    .如果真 (不等于 (hProcess, 0))
        
        赋值 (LoadLibrary, GetProcAddress (GetModuleHandle (“kernel32.dll”), “LoadLibraryA”))
        .如果真 (不等于 (LoadLibrary, 0))
            
            赋值 (pDllName, 分配内存 (hProcess, 相加 (取文本长度 (DllName), 1)))
            .如果真 (不等于 (pDllName, 0))
                
                .如果真 (写内存 (hProcess, pDllName, 相加 (到字节集 (DllName), { 0 })))
                    
                    赋值 (hThread, CreateRemoteThread (hProcess, 0, 0, LoadLibrary, pDllName, 0, 0))
                    .如果真 (不等于 (hThread, 0))
                        
                        WaitForSingleObject (hThread, -1)
                        GetExitCodeThread (hThread, hModule)
                        CloseHandle (hThread)
                        
                        赋值 (HookInf.ProcessId, WinLogon [i])
                        赋值 (HookInf.ModuleHandle, hModule)
                        加入成员 (SAS_HookInf, HookInf)
                        
                    .如果真结束
                    
                .如果真结束
                
                释放内存 (hProcess, pDllName)
            .如果真结束
            
        .如果真结束
        
        
        CloseHandle (hProcess)
    .如果真结束
    
.计次循环尾 ()



.子程序 SAS_UnHook, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 hProcess, 整数型, , , 
.局部变量 FreeLibrary, 整数型, , , 
.局部变量 hThread, 整数型, , , 


.计次循环首 (取数组成员数 (SAS_HookInf), i)
    
    赋值 (hProcess, OpenProcess (#PROCESS_ALL_ACCESS, 假, SAS_HookInf [i], ProcessId))
    .如果真 (不等于 (hProcess, 0))
        
        赋值 (FreeLibrary, GetProcAddress (GetModuleHandle (“kernel32.dll”), “FreeLibrary”))
        .如果真 (不等于 (FreeLibrary, 0))
            赋值 (hThread, CreateRemoteThread (hProcess, 0, 0, FreeLibrary, SAS_HookInf [i], ModuleHandle, 0, 0))
            .如果真 (不等于 (hThread, 0))
                CloseHandle (hThread)
            .如果真结束
            
        .如果真结束
        CloseHandle (hProcess)
    .如果真结束
    
.计次循环尾 ()

.子程序 WinLogon_Suspend, 空白型, , 
.局部变量 WinLogon, 整数型, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 hProcess, 整数型, , , 

.计次循环首 (GetWinLogon (WinLogon), i)
    
    赋值 (hProcess, OpenProcess (#PROCESS_ALL_ACCESS, 假, WinLogon [i]))
    .如果真 (不等于 (hProcess, 0))
        NtSuspendProcess (hProcess)
        CloseHandle (hProcess)
        
        加入成员 (WinLogon_Suspend, WinLogon [i])
    .如果真结束
    
.计次循环尾 ()


.子程序 WinLogon_Resume, 空白型, , 
.局部变量 i, 整数型, , , 
.局部变量 hProcess, 整数型, , , 

.计次循环首 (取数组成员数 (WinLogon_Suspend), i)
    
    赋值 (hProcess, OpenProcess (#PROCESS_ALL_ACCESS, 假, WinLogon_Suspend [i]))
    .如果真 (不等于 (hProcess, 0))
        NtResumeProcess (hProcess)
        CloseHandle (hProcess)
    .如果真结束
    
.计次循环尾 ()

.子程序 分配内存, 整数型, , 
.参数 进程句柄, 整数型, , 
.参数 长度, 整数型, , 

返回 (VirtualAllocEx (进程句柄, 0, 长度, #MEM_COMMIT, #PAGE_EXECUTE_READWRITE))

.子程序 释放内存, 空白型, , 
.参数 进程句柄, 整数型, , 
.参数 地址, 整数型, , 

VirtualFreeEx (进程句柄, 地址, 0, #MEM_RELEASE)

.子程序 写内存, 逻辑型, , 
.参数 进程句柄, 整数型, , 
.参数 地址, 整数型, , 
.参数 数据, 字节集, , 

.局部变量 长度, 整数型, , , 
.局部变量 NumberOfBytesWritten, 整数型, , , 

赋值 (长度, 取字节集长度 (数据))
WriteProcessMemory (进程句柄, 地址, 数据, 长度, NumberOfBytesWritten)
返回 (等于 (NumberOfBytesWritten, 长度))

.子程序 提权, 逻辑型, , 
.局部变量 TokenHandle, 整数型, , , 
.局部变量 luid, LUID, , , 
.局部变量 NewState, TOKEN_PRIVILEGES, , , 
.局部变量 ret, 逻辑型, , , 


OpenProcessToken (GetCurrentProcess (), 位或 (#TOKEN_ADJUST_PRIVILEGES, #TOKEN_QUERY), TokenHandle)
.如果真 (不等于 (TokenHandle, 0))
    
    .如果真 (LookupPrivilegeValue (0, #SE_DEBUG_NAME, luid))
        赋值 (NewState.PrivilegeCount, 1)
        赋值 (NewState.highpart, luid.highpart)
        赋值 (NewState.lowpart, luid.lowpart)
        赋值 (NewState.Attributes, #SE_PRIVILEGE_ENABLED)
        赋值 (ret, AdjustTokenPrivileges (TokenHandle, 假, NewState, 0, 0, 0))
        
    .如果真结束
    
    CloseHandle (TokenHandle)
    
.如果真结束

返回 (ret)


 ' 不属于任何一个程序集、类模块的函数：
