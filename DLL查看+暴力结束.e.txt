 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：本源码来自易语言资源网(www.5A5X.com)
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：             易语言资源网注意事项
--============   www.5A5X.com  =============--
* 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权纠纷本站概不负责！
* 本站资源未经许可,任何网站不得非法盗链及抄袭本站资源；如引用，请注明来自易语言资源网，谢谢合作！
--============   www.5A5X.com  =============--
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 762
    高度 = 522
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 假
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 已保存到：D:\易语言学习\Data\DLL查看+暴力结束.e\_启动窗口_图标.ico
    背景音乐 =  ' 空
    标题 = “”
    帮助文件名 = “”



.图片 d, " ' 已保存到：D:\易语言学习\Data\DLL查看+暴力结束.e\d", , 
.常量 SE_DEBUG_NAME, "“SeDebugPrivilege”", 隐藏, 
.常量 SE_BACKUP_NAME, "“SeBackupPrivilege”", 隐藏, 
.常量 SE_RESTORE_NAME, "“SeRestorePrivilege”", 隐藏, 
.常量 SE_SHUTDOWN_NAME, "“SeShutdownPrivilege”", 隐藏, 
.常量 常量1, "69255195", , 
.常量 常量2, "69255199", , 
.常量 常量3, "69255203", , 
.常量 常量4, "69255207", , 
.常量 备份, "“SeBackupPrivilege”", 公开, 
.常量 启动, "“SeRestorePrivilege”", 公开, 
.常量 关机, "“SeShutdownPrivilege”", 公开, 
.常量 调试, "“SeDebugPrivilege”", 公开, 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' iext 27bb20fdd3e145e4bee3db39ddd6e64c 2 0 扩展界面支持库一
 ' eAPI F7FC1AE45C5C4758AF03EF19F18A395D 3 0 应用接口支持库
 ' xplib 7F54B9CE8887428dBA9CEEB94CEF4C72 2 0 XP风格界面库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库



 ' 所需要的模块
 ' 提升权限模块 C:\Documents and Settings\Administrator\桌面\提升权限模块.ec
 ' 打开进程模块 C:\Documents and Settings\Administrator\桌面\打开进程模块.ec
 ' 加载驱动模块 C:\Documents and Settings\Administrator\桌面\88\模块_加载驱动.ec


数据类型 PROCESSENTRY32, , 
    .成员 dwSize, 整数型, , , 
    .成员 cntUsage, 整数型, , , 
    .成员 th32ProcessID, 整数型, , , 
    .成员 th32DefaultHeapID, 整数型, , , 
    .成员 th32ModuleID, 整数型, , , 
    .成员 cntThreads, 整数型, , , 
    .成员 th32ParentProcessID, 整数型, , , 
    .成员 pcPriClassBase, 整数型, , , 
    .成员 dwFlags, 整数型, , , 
    .成员 szExeFile, 字节型, , "256", 如果写成文本型,此处将会被放置一个指针,很显然会出错.

数据类型 PROCESS_BASIC_INFORMATION, , 
    .成员 ExitStatus, 整数型, , , 
    .成员 PebBaseAddress, 整数型, , , 
    .成员 AffinityMask, 整数型, , , 
    .成员 BasePriority, 整数型, , , 
    .成员 UniqueProcessId, 整数型, , , 
    .成员 InheritedFromUniqueProcessId, 整数型, , , 

数据类型 THREADENTRY32, , 
    .成员 dwsize, 整数型, , , ""
    .成员 cntusage, 整数型, , , ""
    .成员 th32threadID, 整数型, , , ""
    .成员 th32OwnerProcessID, 整数型, , , ""
    .成员 tpBasePri, 整数型, , , ""
    .成员 tpDeltaPri, 整数型, , , ""
    .成员 dwFlags, 整数型, , , ""

数据类型 SECURITY_ATTRIBUTES, , 安全性结构;
    .成员 nLength, 整数型, , , 
    .成员 lpSecurityDescriptor, 整数型, , , 
    .成员 bInheritHandle, 整数型, , , 

数据类型 CLIENT_ID, , 
    .成员 UniqueProcess, 整数型, , , 
    .成员 UniqueThread, 整数型, , , 

数据类型 OBJECT_ATTRIBUTES, , 
    .成员 Length, 整数型, , , 
    .成员 RootDirectory, 整数型, , , 
    .成员 ObjectName, 整数型, , , 
    .成员 Attributes, 整数型, , , 
    .成员 SecurityDescriptor, 整数型, , , 
    .成员 SecurityQualityOfService, 整数型, , , 

数据类型 a偶的表, , 
    .成员 name, 文本型, , , 
    .成员 pid, 整数型, , , 
    .成员 tid, 整数型, , , 
    .成员 handle, 整数型, , , 

数据类型 进程信息, , 
    .成员 size, 整数型, , , 
    .成员 usage, 整数型, , , 
    .成员 id, 整数型, , , 
    .成员 hid, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 threads, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 clbase, 整数型, , , 
    .成员 flag, 整数型, , , 
    .成员 exefile, 字节型, , "256", 

数据类型 LuID, , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 

数据类型 TOKEN_PRIVILEGES, , From:AdjustTokenPrivileges
    .成员 PrivilegeCount, 整数型, , , 
    .成员 lowpart, 整数型, , , 
    .成员 highpart, 整数型, , , 
    .成员 Attributes, 整数型, , , 

数据类型 模块信息, , 
    .成员 size, 整数型, , , 
    .成员 mid, 整数型, , , 
    .成员 pid, 整数型, , , 
    .成员 gusage, 整数型, , , 
    .成员 pusage, 整数型, , , 
    .成员 base, 整数型, , , 
    .成员 bsize, 整数型, , , 
    .成员 hmodule, 整数型, , , 
    .成员 szname, 字节型, , "256", 
    .成员 szpath, 字节型, , "256", 

.全局变量 my, a偶的表, , "0", 
.全局变量 进程列表, 进程信息, , , 
.全局变量 进程数, 整数型, , , 
.全局变量 hahpid, 整数型, , , 

.DLL命令 ZwQuerySystemInformation, 整数型, "ntdll.dll", "ZwQuerySystemInformation", , 
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 SystemInformation, 字节集, , any
    .参数 SystemInformationLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 Process32First, 整数型, "", "Process32First", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 CloseHandle, 空白型, "", "CloseHandle", , 
    .参数 ProcessHandle, 整数型, , 

.DLL命令 Process32Next, 整数型, "", "Process32Next", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, PROCESSENTRY32, , 

.DLL命令 ZwQueryInformationProcess, 整数型, "ntdll.dll", "ZwQueryInformationProcess", , 
    .参数 SystemInformationClass, 整数型, , 未知类型：SYSTEM_INFORMATION_CLASS。
    .参数 dd, 整数型, , 
    .参数 SystemInformation, PROCESS_BASIC_INFORMATION, , any
    .参数 SystemInformationLength, 整数型, , 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 Thread32First, 整数型, "", "Thread32First", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, THREADENTRY32, , 

.DLL命令 Thread32Next, 整数型, "", "Thread32Next", , 
    .参数 hSnapshot, 整数型, , 
    .参数 lppe, THREADENTRY32, , 

.DLL命令 OpenThread, 整数型, "", "OpenThread", , 
    .参数 h, 整数型, , 
    .参数 a, 逻辑型, , 
    .参数 b, 整数型, , 

.DLL命令 FindWindowA, 整数型, "", "", , 
    .参数 a, 整数型, , 
    .参数 b, 文本型, , 

.DLL命令 API_投递消息, 整数型, "user32", "PostMessageA", , 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 hwnd, 整数型, , 接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考PostThreadMessage）
    .参数 wMsg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 TerminateThread, 整数型, "", "TerminateThread", , 
    .参数 a, 整数型, , 
    .参数 b, 整数型, , 0

.DLL命令 API_PostThreadMessage, 整数型, "user32", "PostThreadMessageA", , 将一条消息投递给应用程序。这条消息由应用程序的内部GetMessage循环获得，但不会传给一个特定的窗口  如消息投递成功，则返回TRUE（非零）。会设置GetLastError
    .参数 idThread, 整数型, , 用于接收消息的那个线程的标识符
    .参数 msg, 整数型, , 消息标识符
    .参数 wParam, 整数型, , 具体由消息决定
    .参数 lParam, 整数型, , 具体由消息决定;

.DLL命令 API_CreateRemoteThread, 整数型, "kernel32", "CreateRemoteThread", , 在另一进程中建立线索
    .参数 hProcess, 整数型, , 
    .参数 lpThreadAttributes, SECURITY_ATTRIBUTES, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 整数型, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 API_OpenProcess, 整数型, "kernel32", "OpenProcess", , 将句柄返回给过程对象
    .参数 dwDesiredAccess, 整数型, , 
    .参数 bInheritHandle, 整数型, , 
    .参数 dwProcessId, 整数型, , 

.DLL命令 API_GetModuleHandle, 整数型, "kernel32", "GetModuleHandleA", , 获取一个应用程序或动态链接库的模块句柄  如执行成功成功，则返回模块句柄。零表示失败。会设置GetLastError
    .参数 lpModuleName, 文本型, , 指定模块名，这通常是与模块的文件名相同的一个名字。例如，NOTEPAD.EXE程序的模块文件名就叫作NOTEPAD;

.DLL命令 EnumWindows, 整数型, "user32.dll", "EnumWindows", , 枚举窗口列表中的所有父窗口（顶级和被所有窗口）　非零表示成功，零表示失败
    .参数 函数指针, 子程序指针, , 指向为每个子窗口都调用的一个函数的指针。用AddressOf运算符获得函数在标准模式下的地址
    .参数 自定义数值, 整数型, , 在枚举期间，传递给dwcbkd32.ocx定制控件之EnumWindows事件的值。这个值的含义是由程序员规定的;  

.DLL命令 GetWindowThreadProcessId, 整数型, "user32", "GetWindowThreadProcessId", ,  ;    获取与指定窗口关联在一起的一个进程和线程标识符　拥有窗口的线程的标识符
    .参数 hwnd, 整数型, , 指定一个变量，用于装载拥有那个窗口的一个进程的标识符
    .参数 lpdwProcessId, 整数型, 传址, 指定窗口句柄;

.DLL命令 IsWindowVisible, 整数型, "user32", "IsWindowVisible", , 判断窗口是否可见　如窗口可见则返回TRUE（非零）
    .参数 窗口句柄, 整数型, , 要测试的那个窗口的句柄;  

.DLL命令 GetWindowText, 整数型, "user32", "GetWindowTextA", , 取得一个窗体的标题（caption）文字，或者一个控件的内容（在vb里使用：使用vb窗体或控件的caption或text属性）　复制到lpString的字串长度；不包括空中止字符。会设置GetLastError
    .参数 窗口句柄, 整数型, , 欲获取文字的那个窗口的句柄
    .参数 缓冲区, 文本型, , 预定义的一个缓冲区，至少有cch+1个字符大小；随同窗口文字载入
    .参数 缓冲尺寸, 整数型, , lp缓冲区的长度;  

.DLL命令 API_GetProcAddress, 整数型, "kernel32", "GetProcAddress", , 返回函数地址
    .参数 hModule, 整数型, , 
    .参数 lpProcName, 文本型, , 

.DLL命令 ExtractIconA, 整数型, "shell32.dll", "ExtractIconA", , 
    .参数 窗口句柄, 整数型, , 
    .参数 文件名称, 文本型, , 
    .参数 图标索引, 整数型, , 

.DLL命令 打开进程, 整数型, "", "OpenProcess", 公开, 
    .参数 访问方法, 整数型, , 指定这个句柄要求的访问方法,PROCESS_CREATE_THREAD（允许远程创建线程）；PROCESS_VM_OPERATION （允许远程VM操作）；PROCESS_VM_WRITE（允许远程VM写）；2035711 完全访问
    .参数 子进程继承, 逻辑型, , 如句柄能够由子进程继承，则为TRUE，0
    .参数 进程标识符, 整数型, , 要打开那个进程的进程标识符,使用一个变量装载进程ID。

.DLL命令 获取线程, 整数型, "kernel32.dll", "GetCurrentProcess", , 

.DLL命令 打开令牌, 整数型, "advapi32.dll", "OpenProcessToken", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 DesiredAccess, 整数型, , 
    .参数 TokenHandle, 整数型, 传址, 

.DLL命令 恢复权限, 逻辑型, "advapi32.dll", "LookupPrivilegeValueA", , 
    .参数 lpSystemName, 文本型, , 
    .参数 lpName, 文本型, , 
    .参数 lpLuid, LuID, 传址, 

.DLL命令 获取令牌特权, 逻辑型, "advapi32.dll", "AdjustTokenPrivileges", , 
    .参数 TokenHandle, 整数型, , 
    .参数 DisableAllPrivileges, 整数型, , 
    .参数 NewState, TOKEN_PRIVILEGES, 传址, 
    .参数 BufferLength, 整数型, , 
    .参数 PreviousState, TOKEN_PRIVILEGES, 传址, 
    .参数 ReturnLength, 整数型, 传址, 

.DLL命令 CreateToolhelp32Snapshot, 整数型, "", "CreateToolhelp32Snapshot", , 
    .参数 dwFlags, 整数型, , 
    .参数 th32ProcessID, 整数型, , 

.DLL命令 Module32Next, 整数型, "", "Module32Next", , 
    .参数 快照句柄, 整数型, , 
    .参数 模块信息输出变量, 模块信息, , 

.DLL命令 关闭句柄, 空白型, "", "CloseHandle", , 
    .参数 线程句柄, 整数型, , 

.DLL命令 VirtualAllocEx, 整数型, "", "VirtualAllocEx", , 
    .参数 hProcess, 整数型, , 
    .参数 lpAddress, 整数型, , 
    .参数 dwSize, 整数型, , 
    .参数 flAllocationType, 空白型, , 
    .参数 flProtect, 空白型, , 

.DLL命令 WriteProcessMemory, 逻辑型, "", "WriteProcessMemory", , 
    .参数 hProcess, 空白型, , 
    .参数 pBaseAddress, 空白型, , 
    .参数 lpBuffer, 字节集, , 
    .参数 nSize, 空白型, , 
    .参数 pNumberOfBytesWritten, 空白型, , 

.DLL命令 GetProcAddress, 整数型, "", "GetProcAddress", , 
    .参数 jb, 整数型, , 
    .参数 hsm, 文本型, , 

.DLL命令 GetModuleHandle, 整数型, "", "GetModuleHandleA", , 
    .参数 dllm, 文本型, , 

.DLL命令 CreateRemoteThread, 整数型, "", "CreateRemoteThread", , 
    .参数 hProcess, 空白型, , 
    .参数 ThreadAttributes, 空白型, , 
    .参数 dwStackSize, 空白型, , 
    .参数 lpStartAddress, 空白型, , 
    .参数 lpParameter, 空白型, , 
    .参数 dwCreationFlags, 空白型, , 
    .参数 lpThreadId, 空白型, , 

.DLL命令 WaitForSingleObject, 空白型, "", "WaitForSingleObject", , 
    .参数 hThread, 空白型, , 
    .参数 INFINITE, 空白型, , 

.DLL命令 GetExitCodeThread, 空白型, "", "GetExitCodeThread", , 
    .参数 hThread, 空白型, , 
    .参数 dwHandle, 空白型, , 

.DLL命令 VirtualFreeEx, 空白型, "", "VirtualFreeEx", , 
    .参数 hProcess, 空白型, , 
    .参数 lpBuf, 空白型, , 
    .参数 dwSize, 空白型, , 
    .参数 flAllocationType, 空白型, , 

.DLL命令 API_CreateThread, 整数型, "kernel32", "CreateThread", , 建立新的线索
    .参数 lpThreadAttributes, SECURITY_ATTRIBUTES, , 
    .参数 dwStackSize, 整数型, , 
    .参数 lpStartAddress, 子程序指针, , 
    .参数 lpParameter, 整数型, , 
    .参数 dwCreationFlags, 整数型, , 
    .参数 lpThreadId, 整数型, , 

.DLL命令 API_DebugActiveProcess, 逻辑型, "kernel32", "DebugActiveProcess", , 连接调试进程
    .参数 dwProcessId, 整数型, , 

.DLL命令 ZwOpenProcess, 整数型, "ntdll.dll", "ZwOpenProcess", , 
    .参数 hProcess, 整数型, 传址, 
    .参数 DesiredAccess, 整数型, , 
    .参数 ObjectAttributes, OBJECT_ATTRIBUTES, , 
    .参数 ClientId, CLIENT_ID, , 

.DLL命令 ZwTerminateProcess, 整数型, "ntdll.dll", "", , 
    .参数 ProcessHandle, 整数型, , 
    .参数 ExitStatus, 整数型, , 

.DLL命令 ZwClose, 整数型, "ntdll.dll", "ZwClose", , 
    .参数 hnd, 空白型, , 

.DLL命令 取指针_整数, 整数型, "", "lstrcpyn", , 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 欲取其指针, 整数型, 传址, 
    .参数 保留, 整数型, , 0

.DLL命令 Module32First, 整数型, "", "Module32First", , 
    .参数 hsnap, 整数型, , 
    .参数 mod, 模块信息, , 

.DLL命令 NtUnmapViewOfSection, 空白型, "ntdll.dll", "NtUnmapViewOfSection", , 
    .参数 a, 空白型, , 
    .参数 b, 空白型, , 
    .参数 匿名参数_630, 空白型, , 

.窗口程序集 窗口程序集1, , , 

.程序集变量 系统进程, 未知类型0x30009, , "0", 
.程序集变量 I, 整数型, , , 
.程序集变量 X, 整数型, , , 
.程序集变量 系统进程1, 未知类型0x30009, , "0", 
.程序集变量 I1, 整数型, , , 
.程序集变量 系统进程数组, 整数型, , "0", 
.程序集变量 I2, 整数型, , , 
.程序集变量 i3, 整数型, , , 
.程序集变量 i4, 整数型, , , 
.程序集变量 i5, 整数型, , , 
.程序集变量 硬盘信息, 未知类型0x30007, , , 
.程序集变量 路径, 文本型, , , 
.程序集变量 hDriver, 整数型, , , 
.程序集变量 文件名, 文本型, , , 
.程序集变量 进程组, 未知类型0x30009, , "0", 
.程序集变量 计次变量, 整数型, , , 
.程序集变量 写出, 文本型, , , 
.程序集变量 DriverPath, 文本型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
 ' --========  易语言资源网  (www.5A5X.com)  ======--
 ' 努力创建完善、持续更新的易语言学习例程源码资源站
 ' --================   www.5A5X.com  ===========--
 ' --==================   易语言资源网注意事项  ================--
 ' * 易语言资源网为易语言官方站、易语言官方论坛提供辅助资源站；
 ' 本易语言资源网( www.5A5X.com)所有软件和资料均为软件作者提
 ' 供和网友推荐发布而来，其版权归该软件和程序源码的合法拥有者所
 ' 有，本站易语言资源网整理收集仅供易语言用户学习和易语言技术研
 ' 究探讨使用，不得用于任何商业用途。如果由于以上原因造成的版权
 ' 纠纷本站概不负责！
 ' * 本站资源未经许可，任何网站不得非法盗链及抄袭本站资源；如引用
 ' 页面，请注明来自易语言资源网，谢谢合作！
 ' --=====================   www.5A5X.com  ================--

赋值 (进程组, 未知支持库函数_10 ())
.计次循环首 (取数组成员数 (进程组), 计次变量)
    赋值 (写出, 相加 (写出, 进程组 [计次变量], , #换行符))
.计次循环尾 ()
写到文件 (相加 (取运行目录 (), “\进程信息.txt”), 到字节集 (写出))
调试输出 (文件名)
写到文件 (相加 (子文本替换 (文件名, “killvv.sys”, , , , 真), “killvv.sys”), #d)
调试输出 (文件名)
赋值 (DriverPath, 相加 (取运行目录 (), “\killvv.sys”))
提升进程权限 ()
赋值 (hDriver, 加载驱动 (“killvv”, “killvv”, DriverPath, “\\.\killvv”))
.如果真 (等于 (hDriver, -1))
    信息框 (“加载驱动失败！”, 16, )
.如果真结束
 ' 本源码来自易语言资源网(www.5A5X.com)
置随机数种子 (取秒 (取现行时间 ()))
表项 ()
列表 ()
未知支持库函数_0 (1)

.子程序 提升进程权限, 逻辑型, 公开, 
.参数 目标进程, 整数型, 可空, 
.参数 权限类别, 文本型, 可空, 

.局部变量 hdlProcessHandle, 整数型, , , 
.局部变量 hdlTokenHandle, 整数型, , , 
.局部变量 tmpLuid, LuID, , , 
.局部变量 tkp, TOKEN_PRIVILEGES, , , 
.局部变量 tkpNewButIgnored, TOKEN_PRIVILEGES, , , 

.如果真 (不等于 (取操作系统类别 (), 3))
    返回 (假)
.如果真结束
.如果真 (是否为空 (目标进程))
    赋值 (hdlProcessHandle, 获取线程 ())
.如果真结束
.如果真 (是否为空 (权限类别))
    赋值 (权限类别, #调试)
.如果真结束
打开令牌 (hdlProcessHandle, 40, hdlTokenHandle)
恢复权限 (“”, 权限类别, tmpLuid)
赋值 (tkp.PrivilegeCount, 1)
赋值 (tkp.lowpart, tmpLuid.lowpart)
赋值 (tkp.highpart, tmpLuid.highpart)
赋值 (tkp.Attributes, 2)
返回 (获取令牌特权 (hdlTokenHandle, 0, tkp, 28, tkpNewButIgnored, 0))

.子程序 列表, 空白型, , 
全部删除 ()
重定义数组 (系统进程, 假, 0)
连续赋值 (0, X, I)
赋值 (系统进程, 未知支持库函数_10 ())
数组排序 (系统进程, 真)
.计次循环首 (取数组成员数 (系统进程), I)
    赋值 (X, 相加 (X, 1))
    X.插入表项 (到文本 (系统进程 [I], ), , , , )
    相减 (X, 1).置标题 (1, 系统进程 [I], )
    相减 (X, 1).置标题 (2, 到文本 (系统进程 [I], ))
    相减 (X, 1).置标题 (3, 到文本 (系统进程 [I], ))
    相减 (X, 1).置标题 (4, 到文本 (系统进程 [I], ))
    相减 (X, 1).置标题 (5, 到文本 (系统进程 [I], ))
    赋值 (路径, 取模块路径 (系统进程 [I], ))
    .如果 (不等于 (寻找文本 (路径, “\??\”, , 真), -1))
        赋值 (路径, 取文本右边 (路径, 相减 (取文本长度 (路径), 4)))
    .否则
         ' 本源码来自易语言资源网(www.5A5X.com)
    .如果结束
    相减 (X, 1).置标题 (6, 路径)
    
.计次循环尾 ()

.子程序 _按钮1_被单击, 空白型, , 
.局部变量 pid, 整数型, , , 

.如果 (等于 (.内容, “”))
    信息框 (“请填写正确进程PID数字！”, 64, )
.否则
    赋值 (pid, 到整数 (.内容))
    与驱动通信 (hDriver, #常量4, 取指针_整数 (pid, pid, 0), 4, 0, 0)
    
.如果结束


.子程序 _按钮3_被单击, 空白型, , 
列表 ()

.子程序 表项, 空白型, , 
0.插入列 (“PID”, 40, , , )
1.插入列 (“映像名称”, 100, 1, , )
2.插入列 (“线程优先权”, 75, 1, , )
3.插入列 (“线程数”, 50, 1, , )
4.插入列 (“父进程标识”, 75, 1, , )
5.插入列 (“模块标识”, 60, 1, , )
6.插入列 (“路径”, 300, 1, , )

.子程序 _按钮2_被单击, 空白型, , 
.如果 (等于 (未知支持库函数_11 (到数值 (.取标题 (., ))), 假))
    赋值 (_启动窗口., 假)
    信息框 (“该进程为关键进程,不能结束!如果一定需要结束请使用暴力结束”, 0, “提示”)
    赋值 (_启动窗口., 真)
.否则
    赋值 (.禁止, 假)
.如果结束



.子程序 _时钟1_周期事件, 空白型, , 
赋值 (系统进程1, 未知支持库函数_10 ())
连续赋值 (0, I2, i4, i3)
赋值 (i3, 取表项数 ())
赋值 (i5, 取数组成员数 (系统进程1))
.如果 (小于 (i3, i5))
    .计次循环首 (i5, i4)
        .计次循环首 (i3, I2)
            .如果 (等于 (系统进程1 [i4], , 到数值 (相减 (I2, 1).取标题 (0))))
                跳出循环 ()
            .否则
                赋值 (I2, 相加 (I2, 1))
                .如果 (大于 (I2, i3))
                    i3.插入表项 (到文本 (系统进程1 [i4], ), , , , )
                    i3.置标题 (1, 系统进程1 [i4], )
                    i3.置标题 (2, 到文本 (系统进程1 [i4], ))
                    i3.置标题 (3, 到文本 (系统进程1 [i4], ))
                    i3.置标题 (4, 到文本 (系统进程1 [i4], ))
                    i3.置标题 (5, 到文本 (系统进程1 [i4], ))
                    赋值 (路径, 取模块路径 (系统进程1 [i4], ))
                    .如果 (不等于 (寻找文本 (路径, “\??\”, , 真), -1))
                        赋值 (路径, 取文本右边 (路径, 相减 (取文本长度 (路径), 4)))
                    .否则
                         ' 本源码来自易语言资源网(www.5A5X.com)
                    .如果结束
                    i3.置标题 (6, 路径)
                .否则
                    
                .如果结束
                
            .如果结束
            
        .计次循环尾 ()
    .计次循环尾 ()
    
.否则
    .计次循环首 (i3, I2)
        .计次循环首 (i5, i4)
            .如果 (等于 (到数值 (相减 (I2, 1).取标题 ()), 系统进程1 [i4], ))
                跳出循环 ()
            .否则
                赋值 (i4, 相加 (i4, 1))
                .如果 (大于 (i4, i5))
                    相减 (I2, 1).删除表项 ()
                .否则
                    
                .如果结束
                
            .如果结束
            
        .计次循环尾 ()
    .计次循环尾 ()
.如果结束


.子程序 _选择框1_被单击, 空白型, , 
.如果 (等于 (.选中, 真))
    赋值 (.时钟周期, 1000)
    赋值 (.禁止, 假)
.否则
    赋值 (.时钟周期, 0)
    赋值 (.禁止, 假)
.如果结束


.子程序 _超级列表框1_左键单击表项, 空白型, , 
赋值 (.内容, .取标题 (., 0))

.子程序 取模块路径, 文本型, , 
.参数 processid, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块信息, , , 

赋值 (snap, CreateToolhelp32Snapshot (8, processid))
.如果真 (等于 (snap, -1))
    返回 (“”)
.如果真结束
赋值 (mod.size, 1024)
Module32First (snap, mod)
返回 (取字节集数据 (到字节集 (mod.szpath), 10))


.子程序 _按钮5_被单击, 空白型, , 
.如果 (等于 (未知支持库函数_11 (到数值 (.取标题 (., ))), 假))
    赋值 (_启动窗口., 假)
    .如果真 (等于 (未知支持库函数_11 (到数值 (.取标题 (., ))), 假))
        寻找文本 (路径, “\??\”, , 真)
        删除文件 (.取标题 (., ))
        信息框 (“删除失败请手动删除”, 0, “提示：”)
    .如果真结束
    信息框 (“该进程为关键进程,不能结束!如果一定需要结束请使用暴力结束”, 0, “提示”)
    赋值 (_启动窗口., 真)
.否则
    赋值 (.禁止, 假)
.如果结束
' 本源码来自易语言资源网(www.5A5X.com)

.子程序 _超级列表框1_当前表项被改变, 空白型, , 
列调用的模块 (到数值 (.取标题 (., )))

.子程序 列调用的模块, 空白型, , 
.参数 pid, 整数型, , 

.局部变量 snap, 整数型, , , 
.局部变量 mod, 模块信息, , , 
.局部变量 b, 整数型, , , 

清空 ()
赋值 (snap, CreateToolhelp32Snapshot (8, pid))
赋值 (mod.size, 1024)
赋值 (b, Module32First (snap, mod))
.判断循环首 (不等于 (b, 0))
    取字节集数据 (到字节集 (mod.szpath), 10, ).加入项目 (mod.pid)
    赋值 (b, Module32Next (snap, mod))
.判断循环尾 ()
关闭句柄 (snap)


.子程序 _列表框1_双击选择, 空白型, , 
结束进程中DLL (到数值 (.取标题 (., )), .取项目文本 (.现行选中项))
_超级列表框1_当前表项被改变 ()


.子程序 结束进程中DLL, 逻辑型, , 不是所有的DLL都能结束，本函数可能造成被结束DLL的进程异常退出，请小心使用
.参数 进程ID, 整数型, , 需要结束其中DLL的进程ID号
.参数 Dll名称, 文本型, , 需要结束的DLL的名称

.局部变量 线程ID, 整数型, , , 
.局部变量 分配内存, 整数型, , , 
.局部变量 退出代码, 整数型, , , 
.局部变量 线程地址, 整数型, , , 
.局部变量 线程句柄, 整数型, , , 
.局部变量 长度, 整数型, , , 

赋值 (线程ID, 打开进程 (2035711, 真, 进程ID)) ' 在进程中创建一个线程
.判断开始 (等于 (线程ID, 0)) ' 为0表示创建失败，直接返回
    返回 (假)
.默认
    赋值 (长度, 相加 (取文本长度 (Dll名称), 1)) ' 取出dll的全路径长度
    赋值 (分配内存, VirtualAllocEx (线程ID, 0, 长度, 4096, 4)) ' 分配内存用来保存GetModuleHandleA的参数
    .如果 (WriteProcessMemory (线程ID, 分配内存, 到字节集 (Dll名称), 长度, 0)) ' 将参数写到远程的进程内存中
        赋值 (线程地址, GetProcAddress (GetModuleHandle (“Kernel32”), “GetModuleHandleA”)) ' 远程取得GetModuleHandleA入口地址
        赋值 (线程句柄, CreateRemoteThread (线程ID, 0, 0, 线程地址, 分配内存, 0, 0)) ' 远程执行命令
        WaitForSingleObject (线程句柄, -1) ' 等待执行退出
        GetExitCodeThread (线程句柄, 取变量地址 (退出代码)) ' 获得远程命令返回的结果
        VirtualFreeEx (线程ID, 分配内存, 长度, 16384) ' 释放内存
        关闭句柄 (线程句柄) ' 关闭线程
        赋值 (线程地址, GetProcAddress (GetModuleHandle (“Kernel32”), “FreeLibraryAndExitThread”)) ' 远程取得FreeLibraryAndExitThread入口地址
        赋值 (线程句柄, CreateRemoteThread (线程ID, 0, 0, 线程地址, 退出代码, 0, 0)) ' 远程执行命令
        WaitForSingleObject (线程句柄, -1) ' 等待执行退出
        VirtualFreeEx (线程ID, 分配内存, 长度, 16384) ' 释放内存
        关闭句柄 (线程句柄) ' 关闭线程
        关闭句柄 (线程ID)
    .否则
        VirtualFreeEx (线程ID, 分配内存, 长度, 16384)
        返回 (假)
    .如果结束
    
.判断结束
返回 (真)


.程序集 功能集, , , 

.子程序 getpid, 整数型, , -1为没找到
.参数 进程名, 文本型, , 

.局部变量 hSnapShot, 整数型, , , 
.局部变量 End, 整数型, , , 
.局部变量 buffer, PROCESSENTRY32, , , 
.局部变量 pid, 整数型, , , 

赋值 (pid, -1)
赋值 (hSnapShot, CreateToolhelp32Snapshot (2, 0))
赋值 (buffer.dwSize, 296)
赋值 (End, Process32First (hSnapShot, buffer))
.判断循环首 (不等于 (End, 0))
    .如果真 (等于 (到小写 (buffer.szExeFile), 到小写 (进程名)))
        赋值 (pid, buffer.th32ProcessID)
        跳出循环 ()
    .如果真结束
    赋值 (End, Process32Next (hSnapShot, buffer))
.判断循环尾 ()
CloseHandle (hSnapShot)
返回 (pid)


.子程序 getcsrsspid, 整数型, , -1为没找到
返回 (getpid (“csrss.exe”))


.子程序 gettid, 整数型, , -1为没找到
.参数 pid, 整数型, , 

.局部变量 hSnapShot, 整数型, , , 
.局部变量 End, 整数型, , , 
.局部变量 buffer, THREADENTRY32, , , 
.局部变量 tid, 整数型, , , 

赋值 (tid, -1)
赋值 (hSnapShot, CreateToolhelp32Snapshot (4, 0))
赋值 (buffer.dwsize, 28)
赋值 (End, Thread32First (hSnapShot, buffer))
.判断循环首 (不等于 (End, 0))
    .如果真 (等于 (buffer.th32OwnerProcessID, pid))
        赋值 (tid, buffer.th32threadID)
        跳出循环 ()
    .如果真结束
    赋值 (End, Thread32Next (hSnapShot, buffer))
.判断循环尾 ()
CloseHandle (hSnapShot)
返回 (tid)


.子程序 killtid, 空白型, , 
.参数 tid, 整数型, , 

.局部变量 handle, 整数型, , , 

赋值 (handle, OpenThread (2032639, 假, tid))
TerminateThread (handle, 0)
CloseHandle (handle)

.子程序 killby_wintopic, 空白型, , 16
.参数 pid, 整数型, , 

.局部变量 hwnd, 空白型, , , 
.局部变量 标题, 文本型, , , 
.局部变量 i, 空白型, , , 

枚举窗口 ()
赋值 (hwnd, -1)
.计次循环首 (取数组成员数 (my), i) ' 双保险,haha~~
    .如果真 (等于 (my [i], pid, pid))
        赋值 (标题, my [i], name)
        赋值 (hwnd, my [i], handle)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (hwnd, -1))
    赋值 (hwnd, FindWindowA (0, 标题)) ' 找到句柄
.如果真结束
.如果真 (不等于 (hwnd, 0))
    API_投递消息 (hwnd, 16, 0, 0)
.如果真结束


.子程序 postthreadquit, 空白型, , 
.参数 tid, 整数型, , 

API_PostThreadMessage (tid, 18, 0, 0)


.子程序 RemoteExitProcess, 空白型, , 
.参数 pid, 整数型, , 

.局部变量 hprocess, 空白型, , , 
.局部变量 hthread, 空白型, , , 
.局部变量 sa, SECURITY_ATTRIBUTES, , , 
.局部变量 h, 空白型, , , 

赋值 (hprocess, API_OpenProcess (10, 0, pid))
.如果真 (等于 (hprocess, 0))
    返回 ()
.如果真结束
赋值 (h, API_GetModuleHandle (“kernel32.dll”))
赋值 (h, API_GetProcAddress (h, “ExitProcess”))
赋值 (hthread, API_CreateRemoteThread (hprocess, sa, 0, h, 0, 0, 0))
CloseHandle (hthread)


.子程序 enum, 逻辑型, , 回调用
.参数 参窗口句柄, 整数型, , 
.参数 参数, 整数型, , 

.局部变量 窗口标题, 文本型, , , 
.局部变量 窗口类名, 文本型, , , 
.局部变量 pid, 整数型, , , 
.局部变量 tid, 整数型, , , 
.局部变量 插入位置, 整数型, , , 
.局部变量 temp, a偶的表, , , 

赋值 (窗口标题, 取空白文本 (256))
赋值 (窗口类名, 取空白文本 (256))
GetWindowText (参窗口句柄, 窗口标题, 255)
赋值 (tid, GetWindowThreadProcessId (参窗口句柄, pid))
.如果真 (不等于 (IsWindowVisible (参窗口句柄), 0))
    赋值 (temp.pid, pid)
    赋值 (temp.tid, tid)
    赋值 (temp.name, 窗口标题)
    赋值 (temp.handle, 参窗口句柄)
    加入成员 (my, temp)
.如果真结束
返回 (真)

.子程序 枚举窗口, 空白型, , 
清除数组 (my)
EnumWindows (&enum, 0)

.子程序 DebugThread, 整数型, , 
.参数 a, 整数型, , 

.局部变量 bRet, 逻辑型, , , 

赋值 (bRet, API_DebugActiveProcess (hahpid))
返回 (0)


.子程序 KillThreadDebugProcess, 空白型, , 
.局部变量 hThead, 空白型, , , 
.局部变量 sa, SECURITY_ATTRIBUTES, , , 

赋值 (hThead, API_CreateThread (sa, 0, &DebugThread, 0, 0, 0))
CloseHandle (hThead)


.子程序 UnloadNtdll, 空白型, , 
.参数 pid, 整数型, , 

.局部变量 ntdlladdr, 空白型, , , 
.局部变量 hprocess, 空白型, , , 
.局部变量 bret, 逻辑型, , , 
.局部变量 h, 空白型, , , 
.局部变量 hwnd, 空白型, , , 
.局部变量 标题, 文本型, , , 
.局部变量 i, 空白型, , , 

赋值 (hprocess, API_OpenProcess (8, 0, pid))
赋值 (h, API_GetModuleHandle (“ntdll.dll”))
赋值 (ntdlladdr, API_GetProcAddress (h, “NtUnmapViewOfSection”))
NtUnmapViewOfSection (hprocess, h)
CloseHandle (hprocess)
枚举窗口 ()
赋值 (hwnd, -1)
.计次循环首 (取数组成员数 (my), i) ' 双保险,haha~~
    .如果真 (等于 (my [i], pid, pid))
        赋值 (标题, my [i], name)
        赋值 (hwnd, my [i], handle)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
.如果真 (等于 (hwnd, -1))
    赋值 (hwnd, FindWindowA (0, 标题)) ' 找到句柄
.如果真结束
.如果真 (不等于 (hwnd, 0))
    API_投递消息 (hwnd, 512, 0, 0)
.如果真结束


.子程序 native_api, 空白型, , 
.参数 pid, 空白型, , 

.局部变量 oa, OBJECT_ATTRIBUTES, , , 
.局部变量 cid, CLIENT_ID, , , 
.局部变量 hProcessToRet, 整数型, , , 
.局部变量 st, 空白型, , , 

赋值 (oa.Length, 24)
赋值 (cid.UniqueProcess, 相加 (pid, 1))
赋值 (st, ZwOpenProcess (hProcessToRet, 1, oa, cid))
.如果真 (小于 (st, 0))
    返回 ()
.如果真结束
ZwTerminateProcess (hProcessToRet, 0)


.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 提升进程权限, 逻辑型, , 成功返回真，失败返回假
.参数 目标进程, 整数型, 可空, 要提升的进程,默认为本进程
.参数 权限类别, 文本型, 可空, 要提升到的特权



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 强力结束进程, 逻辑型, , 
.参数 hProcess, 整数型, , 
.参数 ExitStatus, 整数型, , 0



.子程序 强力打开进程, 整数型, , 
.参数 dwDesiredAccess, 整数型, , 
.参数 bInhert, 逻辑型, , 
.参数 ProcessId, 整数型, , 



.程序集 __HIDDEN_TEMP_MOD__, , , 

.子程序 加载驱动, 整数型, , 返回驱动句柄,-1表示失败
.参数 lpServiceName, 文本型, , 服务名
.参数 lpDisplayName, 文本型, , 显示名
.参数 DriverPath, 文本型, , 驱动路径
.参数 Driver, 文本型, 可空, 创建驱动名，如果为空，返回值无意义



.子程序 卸载驱动, 空白型, , 
.参数 lpServiceName, 文本型, , 服务名
.参数 hDriver, 整数型, 可空, 驱动句柄,如果加载驱动时未创建驱动名，这里为空



.子程序 与驱动通信, 逻辑型, , 成功为真，失败为假,注：只在在加载驱动时创建了用于通信的驱动名，才可用这个东西
.参数 hDriver, 整数型, , 驱动句柄
.参数 ioctl_code, 整数型, , 
.参数 in_buf, 整数型, , 指针,无用0表示
.参数 in_buf_len, 整数型, , 无用0表示
.参数 out_buf, 整数型, , 指针,无用0表示
.参数 out_buf_len, 整数型, , 无用0表示




 ' 不属于任何一个程序集、类模块的函数：
