 ' 文件类型：Windows窗口程序

 ' 程序名称：
 ' 程序描述：
 ' 程序作者：
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 390
    高度 = 357
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假



.常量 格子宽度, "60", , 
.常量 格子高度, "60", , 
.常量 棋盘宽度, "7", , 第二版修改过
.常量 棋盘高度, "7", , 第二版修改过


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 3 2 系统核心支持库




数据类型 p, , 
    .成员 x, 整数型, , , 
    .成员 y, 整数型, , , 

数据类型 数据类型2, , 
    .成员 步数, 整数型, , , 
    .成员 位置, p, , , 
    .成员 方向, 整数型, , , 
    .成员 上一步, p, , , 


.窗口程序集 窗口程序集1, , , 

.程序集变量 行走路径, 空白型, , "0", 
.程序集变量 行走中, 逻辑型, , , 
.程序集变量 棋盘, 空白型, , "0", 
.程序集变量 选中棋子, 逻辑型, , , 
.程序集变量 棋子选中位置, 空白型, , "2", 
.程序集变量 棋子颜色, 空白型, , , 
.程序集变量 棋子目标位置, 空白型, , "2", 
.程序集变量 显示步数, 空白型, , , 
.程序集变量 开始闪烁, 逻辑型, , , 
.程序集变量 闪烁次数, 空白型, , , 
.程序集变量 游戏难度, 空白型, , , 起码大于1,难度越大，颜色越多，每次增加的棋子就越少
.程序集变量 颜色数组, 空白型, , "7", 第二版此处修改过
.程序集变量 形状指针, 空白型, , , 
.程序集变量 形状O, 空白型, , "3,2", 
.程序集变量 形状I, 空白型, , "6,2", 
.程序集变量 形状L, 空白型, , "24,2", 
.程序集变量 形状Z, 空白型, , "24,2", 
.程序集变量 形状数组, 空白型, , "4,2", 
.程序集变量 剩余空格, 空白型, , , 
.程序集变量 得分, 空白型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 
置随机数种子 ()
赋值 (游戏难度, 4)
形状指针 ＝ &形状Z是否消失 ' 调试时使用
赋值 (形状指针, 1)
_开始_被选择 ()

.子程序 初始化, 空白型, , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 

重定义数组 (棋盘, 假, #棋盘宽度, #棋盘高度)
重定义数组 (行走路径, 假, 0)
赋值 (开始闪烁, 假)
赋值 (选中棋子, 假)
赋值 (行走中, 假)
赋值 (得分, 0)
赋值 (., 0)
赋值 (., 0)
赋值 (., “按下F2开始游戏”)
.计次循环首 (#棋盘宽度, x)
    .计次循环首 (#棋盘高度, y)
        赋值 (棋盘 [x] [y], 0)
    .计次循环尾 ()
.计次循环尾 ()
赋值 (剩余空格, 相乘 (#棋盘宽度, #棋盘高度))
画棋盘 (#棋盘宽度, #棋盘高度)
赋值 (颜色数组, { #天蓝, #红色, #黄色, #绿色, #粉红, #艳青, #橙黄 }) ' 第二版此处修改过
赋值 (形状O, { 0, 1, 1, 1, 1, 0 })
赋值 (形状I, { 1, 0, 2, 0, 3, 0, -1, 0, 1, 0, 2, 0 })
赋值 (形状L, { 0, 1, 0, 2, 1, 2, 0, -1, 0, 1, 1, 1, 0, -2, 0, -1, 1, 0, -1, -2, -1, -1, -1, 0, 0, 1, 0, 2, -1, 2, 0, -1, 0, 1, -1, 1, 0, -2, 0, -1, -1, 0, 1, -2, 1, -1, 1, 0 })
赋值 (形状Z, { 1, 0, 1, 1, 2, 1, -1, 0, 0, 1, 1, 1, -1, -1, 0, -1, 1, 0, -2, -1, -1, -1, -1, 0, 1, 0, 1, -1, 2, -1, -1, 0, 0, -1, 1, -1, -1, 1, 0, 1, 1, 0, -2, 1, -1, 1, -1, 0 })

.子程序 随机步子, 空白型, , 
.局部变量 随机数1, 空白型, , , 
.局部变量 随机数2, 空白型, , , 
.局部变量 k, 空白型, , , 
.局部变量 颜色, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 重来, 逻辑型, , , 
.局部变量 退出程序, 逻辑型, , , 

赋值 (重来, 假)
.循环判断首 ()
    赋值 (随机数1, 取随机数 (1, #棋盘宽度))
    赋值 (随机数2, 取随机数 (1, #棋盘高度))
    赋值 (颜色, 取随机数 (1, 相加 (游戏难度, 2)))
    .如果真 (等于 (棋盘 [随机数1] [随机数2], 0)) ' 为空格
        画棋子 (随机数1, 随机数2, 颜色数组 [颜色])
        赋值 (棋盘 [随机数1] [随机数2], 负 (颜色))
        赋值 (k, 相加 (k, 1))
        赋值 (剩余空格, 相减 (剩余空格, 1))
        .如果真 (小于或等于 (剩余空格, 0))
            赋值 (., 0)
            赋值 (., 0)
            信息框 (相加 (“游戏结束最后得分”, 到文本 (得分)), 0, )
            初始化 ()
            跳出循环 ()
        .如果真结束
        
    .如果真结束
    
.循环判断尾 (小于 (k, 3))

.子程序 画棋子, 空白型, , 
.参数 x, 空白型, , 
.参数 y, 空白型, , 
.参数 颜色, 空白型, , 

赋值 (x, 相乘 (相减 (x, 1), #格子宽度))
赋值 (y, 相乘 (相减 (y, 1), #格子高度))
赋值 (., 颜色)
相加 (x, 5).画椭圆 (相加 (y, 5), 相减 (相加 (x, #格子宽度), 5), 相减 (相加 (y, #格子高度), 5))

.子程序 画棋盘, 空白型, , 
.参数 x, 空白型, , 
.参数 y, 空白型, , 

.局部变量 l, 空白型, , , 
.局部变量 m, 空白型, , , 

.清除 ()
赋值 (., 相乘 (x, #格子宽度))
赋值 (., 相乘 (y, #格子高度))
赋值 (., .)
赋值 (., .)
赋值 (_启动窗口., 相加 (., 6))
赋值 (_启动窗口., 相加 (., 52))
.计次循环首 (相减 (x, 1), l)
    相乘 (l, #格子宽度).画直线 (0, 相乘 (l, #格子宽度), .)
.计次循环尾 ()
赋值 (选中棋子, 假)
.计次循环首 (相减 (y, 1), m)
    0.画直线 (相乘 (m, #格子高度), ., 相乘 (m, #格子高度))
.计次循环尾 ()

.子程序 获取移动路径, 逻辑型, , 
.参数 dqx, 空白型, , 
.参数 dqy, 空白型, , 
.参数 mbx, 空白型, , 
.参数 mby, 空白型, , 

.局部变量 临时, 空白型, , "0", 
.局部变量 步数, 空白型, , , 
.局部变量 路径x, 空白型, , "0", 
.局部变量 路径y, 空白型, , "0", 
.局部变量 上一步, 空白型, , "0", 
.局部变量 yw, 空白型, , , 
.局部变量 ew, 空白型, , , 
.局部变量 完成, 逻辑型, , , 
.局部变量 k, 空白型, , , 
.局部变量 L, 空白型, , , 
.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 m, 空白型, , , 

赋值 (yw, 取数组下标 (棋盘, 1))
赋值 (ew, 取数组下标 (棋盘, 2))
重定义数组 (临时, 假, yw, ew)
重定义数组 (上一步, 假, yw, ew, 2)
重定义数组 (步数, 假, x, y)
重定义数组 (路径x, 假, 1)
重定义数组 (路径y, 假, 1)
清除数组 (行走路径)
赋值 (路径x [1], dqx)
赋值 (路径y [1], dqy)
赋值 (临时, 棋盘)
.如果真 (并且 (等于 (dqx, mbx), 等于 (dqy, mby)))
    返回 (假)
.如果真结束
赋值 (完成, 假)
赋值 (步数, 1)
.循环判断首 ()
    赋值 (k, 取数组成员数 (路径x))
    .计次循环首 (k, m)
        赋值 (x, 路径x [m])
        赋值 (y, 路径y [m])
        .如果真 (大于 (y, 1))
            .如果真 (等于 (临时 [x] [相减 (y, 1)], 0))
                加入成员 (路径x, x)
                加入成员 (路径y, 相减 (y, 1))
                赋值 (临时 [x] [相减 (y, 1)], 相加 (步数, 1))
                赋值 (上一步 [x] [相减 (y, 1)] [1], x)
                赋值 (上一步 [x] [相减 (y, 1)] [2], y)
            .如果真结束
            .如果真 (并且 (等于 (mbx, x), 等于 (mby, 相减 (y, 1))))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
             ' 上
        .如果真结束
        .如果真 (大于 (x, 1))
            .如果真 (等于 (临时 [相减 (x, 1)] [y], 0))
                加入成员 (路径x, 相减 (x, 1))
                加入成员 (路径y, y)
                赋值 (临时 [相减 (x, 1)] [y], 相加 (步数, 1))
                赋值 (上一步 [相减 (x, 1)] [y] [1], x)
                赋值 (上一步 [相减 (x, 1)] [y] [2], y)
            .如果真结束
            .如果真 (并且 (等于 (mbx, 相减 (x, 1)), 等于 (mby, y)))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
             ' 左
        .如果真结束
        .如果真 (小于 (y, ew))
            .如果真 (等于 (临时 [x] [相加 (y, 1)], 0))
                加入成员 (路径x, x)
                加入成员 (路径y, 相加 (y, 1))
                赋值 (临时 [x] [相加 (y, 1)], 相加 (步数, 1))
                赋值 (上一步 [x] [相加 (y, 1)] [1], x)
                赋值 (上一步 [x] [相加 (y, 1)] [2], y)
            .如果真结束
            .如果真 (并且 (等于 (mbx, x), 等于 (mby, 相加 (y, 1))))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
             ' 下
        .如果真结束
        .如果真 (小于 (x, yw))
            .如果真 (等于 (临时 [相加 (x, 1)] [y], 0))
                加入成员 (路径x, 相加 (x, 1))
                加入成员 (路径y, y)
                赋值 (临时 [相加 (x, 1)] [y], 相加 (步数, 1))
                赋值 (上一步 [相加 (x, 1)] [y] [1], x)
                赋值 (上一步 [相加 (x, 1)] [y] [2], y)
            .如果真结束
            .如果真 (并且 (等于 (mbx, 相加 (x, 1)), 等于 (mby, y)))
                赋值 (完成, 真)
                跳出循环 ()
            .如果真结束
             ' 右
        .如果真结束
        
    .计次循环尾 ()
    删除成员 (路径x, 1, k)
    删除成员 (路径y, 1, k)
    .如果真 (或者 (等于 (取数组成员数 (路径x), 0), 等于 (完成, 真)))
        跳出循环 ()
    .如果真结束
    赋值 (步数, 相加 (步数, 1))
.循环判断尾 (等于 (完成, 假))
.如果 (完成)
    重定义数组 (行走路径, 假, 步数, 2)
    赋值 (行走路径 [步数] [1], mbx)
    赋值 (行走路径 [步数] [2], mby)
    赋值 (x, 上一步 [mbx] [mby] [1])
    赋值 (y, 上一步 [mbx] [mby] [2])
    .变量循环首 (相减 (步数, 1), 1, -1, k)
        赋值 (行走路径 [k] [1], x)
        赋值 (行走路径 [k] [2], y)
        赋值 (mbx, 上一步 [x] [y] [1])
        赋值 (mby, 上一步 [x] [y] [2])
        赋值 (x, mbx)
        赋值 (y, mby)
    .变量循环尾 ()
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 _画板1_鼠标左键被放开, 逻辑型, , 
.参数 横向位置, 整数型, , 
.参数 纵向位置, 整数型, , 
.参数 功能键状态, 整数型, , 

.局部变量 x, 空白型, , , 
.局部变量 y, 空白型, , , 
.局部变量 l, 空白型, , , 
.局部变量 m, 空白型, , , 

.如果 (并且 (选中棋子, 等于 (行走中, 假))) ' 第二版中修改过
    赋值 (x, 相加 (整除 (横向位置, #格子宽度), 1))
    赋值 (y, 相加 (整除 (纵向位置, #格子高度), 1))
    .如果真 (等于 (棋盘 [x] [y], 0))
         ' 没有其他棋子
        赋值 (棋子目标位置 [1], x)
        赋值 (棋子目标位置 [2], y)
        .如果真 (获取移动路径 (棋子选中位置 [1], 棋子选中位置 [2], x, y))
            输出调试文本 (相加 (“移动到”, 到文本 (x), 到文本 (y)))
            赋值 (显示步数, 1)
            画棋子 (棋子选中位置 [1], 棋子选中位置 [2], 颜色数组 [棋子颜色]) ' 可以移动，清除棋子
            赋值 (行走中, 真)
            赋值 (棋盘 [x] [y], 负 (棋子颜色))
            赋值 (棋盘 [棋子选中位置] [1] [棋子选中位置] [2], 0)
            赋值 (., 100)
        .如果真结束
        
    .如果真结束
    赋值 (开始闪烁, 假)
    赋值 (选中棋子, 假)
.否则
    赋值 (x, 相加 (整除 (横向位置, #格子宽度), 1))
    赋值 (y, 相加 (整除 (纵向位置, #格子高度), 1))
    .如果真 (不等于 (棋盘 [x] [y], 0))
         ' 有棋子在
        赋值 (选中棋子, 真)
        赋值 (棋子选中位置 [1], x)
        赋值 (棋子选中位置 [2], y)
        赋值 (棋子颜色, 相乘 (棋盘 [x] [y], -1))
        输出调试文本 (相加 (“选中”, 到文本 (x), 到文本 (y)))
        赋值 (., 100)
        赋值 (开始闪烁, 真)
    .如果真结束
    
.如果结束


.子程序 形状是否消失, 逻辑型, , 
.参数 x, 空白型, , 
.参数 y, 空白型, , 

.局部变量 l, 空白型, , , 
.局部变量 m, 空白型, , , 
.局部变量 n, 空白型, , , 
.局部变量 h, 空白型, , , 
.局部变量 z, 空白型, , , 
.局部变量 完成, 逻辑型, , , 
.局部变量 xz, 空白型, , "24,2", 
.局部变量 temp, 空白型, , , 
.局部变量 k, 空白型, , , 
.局部变量 反向次数, 空白型, , , 
.局部变量 不同位置, 空白型, , , 

赋值 (完成, 假)
重定义数组 (形状数组, 假, 4, 2)
赋值 (形状数组 [1] [1], x)
赋值 (形状数组 [1] [2], y)
 ' 为了适应E3.3，第二版中修改过
xz ＝ 多项选择 (形状指针, 形状O, 形状I, 形状L, 形状Z) ' 以下为E版本不同造成的原因，E语言不认识多维数组。在E2.52中，这句代码可以替换以下一大段的代码
重定义数组 (xz, 假, 多项选择 (形状指针, 3, 6, 24, 24), 2)
.如果真 (等于 (形状指针, 1))
    xz ＝ 形状O ' 无法辨认多维数组
    .计次循环首 (3, l)
        .计次循环首 (2, m)
            赋值 (xz [l] [m], 形状O [相加 (相乘 (相减 (l, 1), 2), m)])
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束
.如果真 (等于 (形状指针, 2))
    .计次循环首 (6, l)
        .计次循环首 (2, m)
            赋值 (xz [l] [m], 形状I [相加 (相乘 (相减 (l, 1), 2), m)])
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束
.如果真 (等于 (形状指针, 3))
    .计次循环首 (24, l)
        .计次循环首 (2, m)
            赋值 (xz [l] [m], 形状L [相加 (相乘 (相减 (l, 1), 2), m)])
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束
.如果真 (等于 (形状指针, 4))
    .计次循环首 (24, l)
        .计次循环首 (2, m)
            赋值 (xz [l] [m], 形状Z [相加 (相乘 (相减 (l, 1), 2), m)])
        .计次循环尾 ()
    .计次循环尾 ()
.如果真结束
 ' 到这里为止，以上为E2.52与E3.3的不同之处
赋值 (反向次数, 多项选择 (形状指针, 1, 1, 2, 2))
赋值 (不同位置, 多项选择 (形状指针, 1, 2, 4, 4))
.计次循环首 (反向次数, k) ' 反向
    .计次循环首 (不同位置, n) ' 不同的位置
        .计次循环首 (4, l) ' 旋转4次
            .计次循环首 (3, m) ' 旁边3个点
                赋值 (h, xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [1])
                赋值 (z, xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [2])
                .如果 (并且 (大于 (相加 (x, h), 0), 小于或等于 (相加 (x, h), #棋盘宽度), 大于 (相加 (y, z), 0), 小于或等于 (相加 (y, z), #棋盘高度)))
                    .如果 (等于 (棋盘 [相加 (x, h)] [相加 (y, z)], 负 (棋子颜色))) ' 相同颜色
                        赋值 (形状数组 [相加 (m, 1)] [1], 相加 (x, h))
                        赋值 (形状数组 [相加 (m, 1)] [2], 相加 (y, z))
                        .如果真 (等于 (m, 3))
                            赋值 (完成, 真)
                            返回 (真)
                        .如果真结束
                        
                    .否则
                        跳出循环 ()
                    .如果结束
                    
                .否则
                    跳出循环 ()
                .如果结束
                
            .计次循环尾 ()
            .如果真 (完成)
                跳出循环 ()
            .如果真结束
            .计次循环首 (3, m) ' 旋转90度
                赋值 (temp, xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [1])
                赋值 (xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [1], 负 (xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [2]))
                赋值 (xz [相加 (m, 相乘 (相减 (n, 1), 3), 相乘 (相减 (k, 1), 12))] [2], temp)
            .计次循环尾 ()
        .计次循环尾 ()
        .如果真 (完成)
            跳出循环 ()
        .如果真结束
        
    .计次循环尾 ()
    .如果真 (完成)
        跳出循环 ()
    .如果真结束
    
.计次循环尾 ()
返回 (完成)

.子程序 _时钟1_周期事件, 空白型, , 
.局部变量 k, 空白型, , , 

.如果真 (等于 (., 0)) ' 为了改正出现杂色的BUG，第二版中修改过
    画棋子 (行走路径 [显示步数] [1], 行走路径 [显示步数] [2], 颜色数组 [棋子颜色])
    延时 (50)
    画棋子 (行走路径 [显示步数] [1], 行走路径 [显示步数] [2], 颜色数组 [棋子颜色])
    .如果真 (等于 (相乘 (2, 显示步数), 取数组成员数 (行走路径)))
        画棋子 (行走路径 [显示步数] [1], 行走路径 [显示步数] [2], 颜色数组 [棋子颜色])
        .如果真 (等于 (形状是否消失 (行走路径 [显示步数] [1], 行走路径 [显示步数] [2]), 真))
            棋子消失 ()
        .如果真结束
         ' 移动结束
        随机步子 ()
        赋值 (., 0)
        赋值 (行走中, 假)
    .如果真结束
    赋值 (显示步数, 相加 (显示步数, 1))
.如果真结束


.子程序 _时钟2_周期事件, 空白型, , 
画棋子 (棋子选中位置 [1], 棋子选中位置 [2], 颜色数组 [棋子颜色])
赋值 (闪烁次数, 相加 (闪烁次数, 1))
.如果真 (并且 (等于 (开始闪烁, 假), 等于 (求余数 (闪烁次数, 2), 0)))
    赋值 (., 0)
.如果真结束


.子程序 棋子消失, 空白型, , 
.局部变量 k, 空白型, , , 
.局部变量 l, 空白型, , , 

赋值 (l, 相除 (取数组成员数 (形状数组), 2))
.计次循环首 (l, k)
    画棋子 (形状数组 [k] [1], 形状数组 [k] [2], 颜色数组 [棋子颜色])
    延时 (50)
    赋值 (棋盘 [形状数组] [k] [1] [形状数组] [k] [2], 0)
.计次循环尾 ()
赋值 (剩余空格, 相加 (剩余空格, 4))
.如果真 (大于或等于 (剩余空格, 相乘 (#棋盘宽度, #棋盘高度)))
    信息框 (“游戏中止，请重新开始.”, 0, )
.如果真结束
赋值 (得分, 相加 (得分, 10))
赋值 (., 相加 (“你的得分是:”, 到文本 (得分)))

.子程序 _退出_被选择, 空白型, , 
销毁 ()

.子程序 _开始_被选择, 空白型, , 
初始化 ()
随机步子 ()

.子程序 _难度1_被选择, 空白型, , 
赋值 (游戏难度, 2)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
_开始_被选择 ()

.子程序 _难度2_被选择, 空白型, , 
赋值 (游戏难度, 3)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
_开始_被选择 ()

.子程序 _难度3_被选择, 空白型, , 
赋值 (游戏难度, 4)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
_开始_被选择 ()

.子程序 _难度4_被选择, 空白型, , 
赋值 (游戏难度, 5)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
_开始_被选择 ()

.子程序 _关于_被选择, 空白型, , 
信息框 (相加 (“   本游戏由李请波使用E3.3编写而成的！本游戏完全免费，且不更改注册表内容。大家可以放心使用！”, #换行符, “感谢小米虫提供的E3.3！”), 0, “关于――还没有想好名字的游戏1.02”) ' 游戏改版，在第二版中修改过

.子程序 _I型_被选择, 空白型, , 
形状指针 ＝ &形状I是否消失
赋值 (形状指针, 2)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
_开始_被选择 ()

.子程序 _O型_被选择, 空白型, , 
形状指针 ＝ &形状O是否消失
赋值 (形状指针, 1)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
赋值 (., 假)
_开始_被选择 ()

.子程序 _L型_被选择, 空白型, , 
形状指针 ＝ &形状L是否消失
赋值 (形状指针, 3)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
赋值 (., 假)
_开始_被选择 ()

.子程序 _Z型_被选择, 空白型, , 
形状指针 ＝ &形状Z是否消失
赋值 (形状指针, 4)
赋值 (., 假)
赋值 (., 假)
赋值 (., 假)
赋值 (., 真)
_开始_被选择 ()

.子程序 _帮助主题_被选择, 空白型, , 
信息框 (相加 (“         鼠标左键点击一个棋子，当闪烁显示时就可以左键点一个空白处，如果存在路径，它就走到该处。如果这时有四个棋子形成你选定的形状(在选项――类型中选择)，它们就会消失，并且累计加分。接着会随机出现三个棋子，如果棋盘被排满，游戏就会结束。注意：随机出现的棋子排成固定形状后不会消失，也不能得分。”, #换行符, “         难度越大，颜色越多。”, #换行符, “         可选形状一共有4个，分别是O型（排成方快形状），I型(排成一条直线)，L型（有一个转折），z型（象Z字形状）。”), 0, “使用帮助”)



 ' 不属于任何一个程序集、类模块的函数：
