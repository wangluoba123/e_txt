 ' 文件类型：Windows模块源码

 ' 程序名称：闭关验证码1.00
 ' 程序描述：本程序完全采用核心库加API制作未使用任何窗体控件。速度已接近极限。
 ' 程序作者：汤东林QQ702160662
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：13568610323
 ' 传真号码：
 ' 电子信箱：
 ' 主页地址：
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 TRANSPARENT, "1", , 
.常量 GM_ADVANCED, "2", , 
.常量 PS_SOLID, "0", , 
.常量 PS_ENDCAP_FLAT, "512", , 
.常量 PS_JOIN_ROUND, "0", , 
.常量 SRCCOPY, "13369376", , 
.常量 FLOODFILLSURFACE, "1", , 
.常量 DEFAULT_CHARSET, "1", , 
.常量 OUT_TT_PRECIS, "4", , 
.常量 PROOF_QUALITY, "2", , 
.常量 FF_DONTCARE, "0", , 
.常量 OPAQUE, "2", , 
.常量 DT_CENTER, "1", , 
.常量 DT_VCENTER, "4", , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库
 ' spec A512548E76954B6E92C21055517615B0 3 0 特殊功能支持库




数据类型 坐标_, , POINTAPI
    .成员 x, 整数型, , , x，横向位置
    .成员 y, 整数型, , , y，纵向位置

数据类型 矩形_, , RECT
    .成员 左, 整数型, , , Left
    .成员 上, 整数型, , , Top
    .成员 右, 整数型, , , Right
    .成员 下, 整数型, , , Bottom

数据类型 逻辑字体_, , LOGFONT_
    .成员 高度, 整数型, , , lfHeight
    .成员 宽度, 整数型, , , lfWidth
    .成员 控制摆, 整数型, , , lfEscapement
    .成员 定方位, 整数型, , , lfOrientation
    .成员 加粗, 整数型, , , lfWeight
    .成员 斜体, 字节型, , , lfItalic
    .成员 下划线, 字节型, , , lfUnderline
    .成员 袭击出, 字节型, , , lfStrikeOut
    .成员 零碎工作组合, 字节型, , , lfCharSet
    .成员 出自精确, 字节型, , , lfOutPrecision
    .成员 修剪精确, 字节型, , , lfClipPrecision
    .成员 性质, 字节型, , , lfQuality
    .成员 间距, 字节型, , , lfPitchAndFamily
    .成员 字体名称, 字节型, , "32", 用LF_FACESIZE,lfFaceName?

数据类型 位图文本图片, 公开, 
    .成员 宽度, 整数型, , , 图片宽度
    .成员 高度, 整数型, , , 图片高度
    .成员 文本, 位图文本, , "1", 位图文本
    .成员 随机图形, 整数型, , , 

数据类型 位图文本, , 
    .成员 文本, 文本属性, , , 
    .成员 画笔, 画笔属性, , , 

数据类型 文本属性, , 
    .成员 文字位置, 坐标_, , , 
    .成员 文字内容, 文本型, , , 
    .成员 字体名称, 文本型, , , 
    .成员 字符宽度, 整数型, , , 
    .成员 字符高度, 整数型, , , 
    .成员 笔画精细, 整数型, , , 
    .成员 字体颜色, 整数型, , , 
    .成员 背景颜色, 整数型, , , 
    .成员 背景透明, 逻辑型, , , 
    .成员 字符串转角度, 整数型, , , 
    .成员 旋转角度, 整数型, , , 
    .成员 是否为斜体, 逻辑型, , , 
    .成员 是否下划线, 逻辑型, , , 
    .成员 是否删除线, 逻辑型, , , 

数据类型 画笔属性, , 
    .成员 画笔样式, 整数型, , , 
    .成员 画笔宽度, 整数型, , , 
    .成员 画笔颜色, 整数型, , , 
    .成员 端点样式, 整数型, , , 
    .成员 转角样式, 整数型, , , 

数据类型 位图信息_, , 位图信息_
    .成员 biSize, 整数型, , , 
    .成员 biWidth, 整数型, , , 
    .成员 biHeight, 整数型, , , 
    .成员 biPlanes, 整数型, , , 
    .成员 biBitCount, 整数型, , , 
    .成员 biCompression, 整数型, , , 
    .成员 biSizeImage, 整数型, , , 
    .成员 biXPelsPerMeter, 整数型, , , 
    .成员 biYPelsPerMeter, 整数型, , , 
    .成员 biClrUsed, 整数型, , , 
    .成员 biClrImportant, 整数型, , , 
    .成员 rgbBlue, 字节型, , , 
    .成员 rgbGreen, 字节型, , , 
    .成员 rgbRed, 字节型, , , 
    .成员 rgbReserved, 字节型, , "255,4", rgbBlue,rgbGreen,rgbRed,rgbReserved

.全局变量 内存位图, 内存位图类, , , 

.DLL命令 GetDC_取设备场景_, 整数型, "user32.dll", "GetDC", , 易API_获取指定窗口的设备场景句柄 取得一个窗口单元的HDC，出错则为0
    .参数 窗口或控件句柄, 整数型, , hwnd 将获取其设备场景的窗口的句柄。若为0，则要获取整个屏幕的DC;

.DLL命令 CreateCompatibleDC_创建内存场景_, 整数型, "gdi32", "CreateCompatibleDC", , 创建内存设备场境，创建一个与特定设备场景一致的内存设备场景，新设备场景句柄，若出错则为零
    .参数 设备场景句柄, 整数型, , 设备场景句柄。新的设备场景将与它一致。也可能为0以创建一个与屏幕一致的设备场景;

.DLL命令 SetBkMode_设置背景模式_, 整数型, "gdi32", "SetBkMode", , 易API_,Long,前一个背景模式的值  指定空隙填充方式 指定阴影刷子、虚线画笔以及字符中的空隙的填充方式　前一个背景模式的值
    .参数 设备场景句柄, 整数型, , hdc 设备场景的句柄
    .参数 方式, 整数型, , nBkMode 下述常数之一：;OPAQUE：用当前的背景色填充虚线画笔、阴影刷子以及字符的空隙;TRANSPARENT：透明处理，即不作上述填充;  

.DLL命令 SetGraphicsMode_允许或禁止增强图形模式_, 整数型, "gdi32", "SetGraphicsMode", , 允许或禁止增强图形模式，以提供某些支持（包括世界转换）  执行成功为原来的图形模式，失败为0
    .参数 hdc, 整数型, , 
    .参数 iMode, 整数型, , 

.DLL命令 ReleaseDC_释放设备场景_, 整数型, "user32", "ReleaseDC", , 易API_ 用于释放取得的HDC 释放由调用GetDC或GetWindowDC函数获取的指定设备场景。它对类或私有设备场景无效（但这样的调用不会造成损害）  执行成功为1，否则为0
    .参数 窗口句柄, 整数型, , hwnd要释放的设备场景相关的窗口句柄
    .参数 设备场景, 整数型, , hdc要释放的设备场景句柄;

.DLL命令 DeleteDC_删除设备场景_, 整数型, "gdi32.dll", "DeleteDC", , 易API_ 删除专用设备场景或信息场景，释放所有相关窗口资源。用于释放“创建设备场景（）”、“创建内存设备场景（）”等创建的HDC 不要将它用于GetDC函数取回的设备场景  执行成功则为非零，失败则为零
    .参数 设备场景句柄, 整数型, , hdc，将要删除的设备场景 在vb里使用不要将它用于由vb hdc属性获取的设备场景句柄;

.DLL命令 DeleteObject_删除对象_, 整数型, "gdi32.dll", "DeleteObject", , 易API_ 用这个函数删除GDI对象，比如画笔、刷子、字体、位图、区域以及调色板等等。对象使用的所有系统资源都会被释放，不要删除一个已选入设备场景的画笔、刷子或位图。如删除以位图为基础的阴影（图案）刷子，位图不会由这个函数删除――只有刷子被删掉
    .参数 对象句柄, 整数型, , hObject 一个GDI对象的句柄

.DLL命令 CreateCompatibleBitmap_创建设备位图_, 整数型, "gdi32", "CreateCompatibleBitmap", , 创建一幅与设备有关位图，它与指定的设备场景兼容，成功返回位图句柄，零表示失败
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 宽度, 整数型, , 位图宽度，以像素为单位
    .参数 高度, 整数型, , 位图高度，以像素为单位;

.DLL命令 SelectObject_选入设备场景_, 整数型, "gdi32", "SelectObject", , 易API_选择对象 返回被覆盖的对象句柄  每个设备场景都可能有选入其中的图形对象。其中包括位图、刷子、字体、画笔以及区域等等。一次选入设备场景的只能有一个对象。选定的对象会在设备场景的绘图操作中使用。例如，当前选定的画笔决定了在设备场景中描绘的线段颜色及样式  与以前选入设备场景的相同hObject类型的一个对象的句柄，零表示出错。如选定的对象是一个区域（Region），结果就是下列常数之一：SIMPLEREGION， ;    COMPLEXREGION 或 NULLREGION 对区域进行描述， GDI_ERROR 表示出错
    .参数 设备场景句柄, 整数型, , hdc 一个设备场景的句柄
    .参数 对象句柄, 整数型, , hObject 一个画笔、位图、刷子、字体或区域的句柄;

.DLL命令 CreatePen_创建画笔_, 整数型, "gdi32", "CreatePen", , 用指定的样式、宽度和颜色创建一个画笔，成功返回指向新画笔的一个句柄；否则返回零
    .参数 风格, 整数型, , nPenStyle 指定画笔样式，可以是下述常数之一;PS_SOLID：画笔画出的是实线;PS_DASH：画笔画出的是虚线（nWidth必须是1）;PS_DOT：画笔画出的是点线（nWidth必须是1）;PS_DASHDOT：画笔画出的是点划线（nWidth必须是1）;PS_DASHDOTDOT：画笔画出的是点-点-划线（nWidth必须是1）;PS_NULL：画笔不能画图;PS_INSIDEFRAME：画笔在由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框中画图。如指定的准确RGB颜色不存在，就进行抖动处理
    .参数 宽度, 整数型, , nWidth 以逻辑单位表示的画笔的宽度
    .参数 颜色, 整数型, , crColor 画笔的RGB颜色;

.DLL命令 CreateSolidBrush_创建纯色刷子_, 整数型, "gdi32.dll", "CreateSolidBrush", , 易API_ 用纯色创建一个刷子  如执行成功，返回新刷子的一个句柄；否则返回零
    .参数 颜色值, 整数型, , crColor，颜色值 数字的RGB彩色;

.DLL命令 CreateHatchBrush_创建阴影刷子_, 整数型, "gdi32.dll", "CreateHatchBrush", , 创建带有阴影图案的一个刷子，成功返回指向新刷子的一个句柄。否则返回零。注意在不需要时，用DeleteObject清除刷子
    .参数 刷子阴影类型, 整数型, , nIndex，象下图那样指定一种阴影类型
    .参数 指定刷子的RGB前景色, 整数型, , crColor，指定刷子的前景RGB颜色值

.DLL命令 MoveToEx_指定画笔位置_I, 整数型, "gdi32.dll", "MoveToEx", , 为指定的设备场景指定一个新的当前画笔位置。前一个位置保存在lpPoint中  非零表示成功，零表示失败
    .参数 设备场景, 整数型, , hdc，指向一个设备场景的句柄
    .参数 横坐标, 整数型, , x，采用逻辑坐标表示的新画笔位置
    .参数 纵坐标, 整数型, , y，采用逻辑坐标表示的新画笔位置
    .参数 画笔位置, 整数型, , POINT_坐标_，用于保存前一个画笔位置，可以为NULL（将参数改为ByVal As 以传递一个空参数）

.DLL命令 LineTo_画线_, 整数型, "gdi32.dll", "LineTo", , 易API_ 用当前画笔画一条线，从当前位置连到一个指定的点。这个函数调用完毕，当前位置变成x,y点  非零表示成功，零表示失败
    .参数 设备场景句柄, 整数型, , hdc 设备场景的句柄
    .参数 终点横坐标, 整数型, , x 线段终点位置，采用逻辑坐标表示。这个点不会实际画出来；它不属于线段的一部分;
    .参数 终点纵坐标, 整数型, , y 同上;

.DLL命令 Polygon_描绘一个多边形_I, 空白型, "gdi32.dll", "Polygon", , 易API_
    .参数 设备场景, 整数型, , hdc,用于描绘的设备场景
    .参数 POINTAPI结构, 整数型, 传址, lpPoint,在nCount POINTAPI结构数组中的第一个POINTAPI结构
    .参数 顶点数, 整数型, , nCount,多边形的总点数（顶点数）

.DLL命令 PolyBezier_描绘一条或多条贝塞尔曲线_, 整数型, "gdi32", "PolyBezier", , 描绘一条或多条贝塞尔（Bezier）曲线。PolyBezierTo用于将当前画笔位置设为前一条曲线的终点  非零表示成功，零表示失败
    .参数 hdc, 整数型, , 要在其中绘图的设备场景
    .参数 lppt, 整数型, , POINTAPI，指定一个POINTAPI结构数组。其中的第一个结构指定了起点。剩下的点三个一组――包括两个控件点和一个终点原文：An array of POINTAPI structures. The first structure specifies the starting point. The remaining points are in groups of three, consisting of two control points and an end point.
    .参数 cPoints, 整数型, , lppt数组的总点数;

.DLL命令 GetEnhMetaFileA_取增强型图元文件句柄_, 整数型, "gdi32", "GetEnhMetaFileA", , 取得磁盘文件中包含的一个增强型图元文件的图元文件句柄（原文：Retrieves ;    a metafile handle to an enhanced metafile contained in a disk file）  指向图元文件的句柄。零表示出错
    .参数 lpszMetaFile, 文本型, 传址, 包含了增强型图元文件的一个磁盘文件的名字;

.DLL命令 PlayEnhMetaFile_画增强型图元文件_, 逻辑型, "gdi32", "PlayEnhMetaFile", , 在指定的设备场景中画一个增强型图元文件。与标准图元文件不同，完成回放后，增强型图元文件会恢复设备场景以前的状态  非零表示成功，零表示失败。会设置GetLastError
    .参数 hdc, 整数型, , 目标设备场景
    .参数 hemf, 整数型, , 欲描绘的增强型图元文件的句柄
    .参数 lpRect, 矩形_, 传址, RECT，一个约束矩形，定义了在哪里描绘图元文件;

.DLL命令 DeleteEnhMetaFile_删除增强图元文件_, 整数型, "gdi32.dll", "DeleteEnhMetaFile", , 易API_ 删除指定的增强型图元文件  非零表示成功，零表示失败
    .参数 增强型图元文件句柄, 整数型, , hemf,增强型图元文件的句柄;

.DLL命令 SetEnhMetaFileBits_用指定内存缓冲区内包含的数据创建一个增强型图元文件_, 整数型, "gdi32", "SetEnhMetaFileBits", , 用指定内存缓冲区内包含的数据创建一个增强型图元文件。在从磁盘读入原始的图元文件数据后（最开始是由GetEnhMetaFileBits函数获得的），通常再用这个函数创建一个图元文件  如执行成功，返回一个增强型图元文件句柄；否则返回零
    .参数 cbBuffer, 整数型, , 
    .参数 lpData, 字节集, 传址, 

.DLL命令 LoadIconA_载入图标_2C_, 整数型, "user32.dll", "LoadIconA", , 加载一个窗口图标 从指定的模块或应用程序实例中载入一个图标。其中，LoadIconBynum是LoadIcon函数的类型安全声明  执行成功则返回已载入的图标的句柄；零表示失败。会设置GetLastError
    .参数 模块句柄, 整数型, , hInstance图标资源所在的模块句柄
    .参数 图标句柄, 文本型, 传址, lpIconName图标资源名(文本型)或系统预定义的图标标识名(整数型)

.DLL命令 DrawIcon_画图标_, 逻辑型, "user32.dll", "DrawIcon", , ok..函数功能：该函数在限定的设备上下文窗口的客户区域绘制图标; 在指定的位置画一个图标。函数原型：BOOL Drawlcon（HDC hDC，int X，nit Y HICON hlcon ）；返回值:如果函数成功，返回值是非零；如果函数失效，返回值是零。会设置GetLastError,想获得更多的错误信息，请调用GetLastError函数。备注：Drawlcon函数将目标的左上角置于由X和Y参数指定的位置，该位置受当前设备上下文的映射方式支配。Windows CE：Drawlcon函数被当做宏执行，定义为DrawlconEx（hdc，x，y， hicon，0，0，0，NULL，DI_NORMAL）。速查：Windows NT:3.1及以上版本;Windows：95及以上版本;Windows CE:1.0及以上版本；头文件：winuser.h;库文件：user32.lib。
    .参数 hdc, 整数型, , 设备场景句柄; Long;窗口设备上下文的句柄。
    .参数 x, 整数型, , 横坐标,Long,指定图标左上角的逻辑X坐标。
    .参数 y, 整数型, , 纵坐标,Long,指定图标左上角的逻辑y坐标。
    .参数 图标句柄, 整数型, , hIcon Long,被绘制图标的句柄。图标资源必须已经通过Loadlcon或Loadlmage函数被装载过。

.DLL命令 BitBlt_复制场景位图_, 逻辑型, "gdi32.dll", "BitBlt", , 又名复制位图，将一幅位图从一个设备场景复制到另一个。源和目标DC相互间必须兼容，非零表示成功，零表示失败。会设置GetLastError
    .参数 目标设备场景, 整数型, , hDestDC,目标设备场景
    .参数 目标横坐标, 整数型, , x,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 目标纵坐标, 整数型, , y,对目标设备场景中目标矩形左上角位置进行描述的那个点
    .参数 传输图像宽度, 整数型, , nWidth,欲传输图象的宽度
    .参数 传输图像高度, 整数型, , nHeight,欲传输图象的高度
    .参数 源设备场景, 整数型, , hSrcDC,源设备场景;如光栅运算未指定源,则应设为0
    .参数 源横坐标, 整数型, , xSrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 源纵坐标, 整数型, , ySrc,对源设备场景中源矩形左上角位置进行描述的那个点
    .参数 光栅运算方式, 整数型, , dwRop,传输过程要执行的光栅运算

.DLL命令 StretchBlt_复制位图_, 逻辑型, "gdi32.dll", "StretchBlt", , 易API_ ,伸缩复制图象 将一幅位图从一个设备场景复制到另一个;源和目标DC相互间必须兼容;这个函数会在设备场景中定义一个目标矩形,并在位图中定义一个源图象;源矩形会根据需要进行伸缩,以便与目标矩形的大小相符
    .参数 目标设备场景句柄, 整数型, , hdc,目标设备场景
    .参数 目标横坐标, 整数型, , x,目标矩形左上角的x,y坐标,以逻辑坐标表示
    .参数 目标纵坐标, 整数型, , y,目标矩形左上角的x,y坐标,以逻辑坐标表示
    .参数 目标宽度, 整数型, , nWidth,目标矩形的宽度和高度,以逻辑坐标表示
    .参数 目标高度, 整数型, , nHeight,目标矩形的宽度和高度,以逻辑坐标表示
    .参数 源设备场景句柄, 整数型, , hSrcDC,源设备场景;如光栅运算未指定一个源,则这个参数应为零
    .参数 源横坐标, 整数型, , xSrc,用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源纵坐标, 整数型, , ySrc,用源DC的逻辑坐标表示的源矩形左上角位置
    .参数 源宽度, 整数型, , nSrcWidth,分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度;如其中有一个参数的符号（指正负号）与对应的目标参数不符,位图就会在对应的轴上作镜像转换处理
    .参数 源高度, 整数型, , nSrcHeight,分别指定用逻辑单位（以源DC为基础）传输的一幅图象的宽度和高度;如其中有一个参数的符号（指正负号）与对应的目标参数不符,位图就会在对应的轴上作镜像转换处理
    .参数 光栅运算, 整数型, , dwRop,传输过程中进行的光栅运算;如刷子属于光栅运算的一部分,就使用选入目标DC的刷子

.DLL命令 Rectangle_画矩形_, 整数型, "gdi32", "Rectangle", , 易API_ 用当前选定的画笔描绘矩形，并用当前选定的刷子进行填充  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , 设备场景的句柄
    .参数 左上角横坐标, 整数型, , 指定矩形左上角位置
    .参数 左上角纵坐标, 整数型, , 同上
    .参数 右下角横坐标, 整数型, , 指定矩形右下角位置
    .参数 右下角纵坐标, 整数型, , 同上;

.DLL命令 Ellipse_画椭圆_, 整数型, "gdi32.dll", "Ellipse", , 易API_ 描绘一个椭圆，由指定的矩形围绕。椭圆用当前选择的画笔描绘，并用当前选择的刷子填充  非零表示成功，零表示失败。会设置GetLastErro
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 矩形左上角位置横坐标, 整数型, , X1,约束矩形采用逻辑坐标的左上角位置
    .参数 矩形左上角位置纵坐标, 整数型, , Y1,约束矩形采用逻辑坐标的左上角位置
    .参数 矩形右下角位置横坐标, 整数型, , X2,约束矩形采用逻辑坐标的右下角位置
    .参数 矩形右下角位置纵坐标, 整数型, , Y2,约束矩形采用逻辑坐标的右下角位置

.DLL命令 RoundRect_画圆角矩形_, 整数型, "gdi32", "RoundRect", , 易API_ 用当前选定的画笔画一个圆角矩形,并用当前选定的刷子在其中填充;X3和Y3定义了用于生成圆角的椭圆;非零表示成功,零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , hdc,用于绘图的设备场景
    .参数 启始横坐标, 整数型, , X1,对矩形左上角位置进行说明的X,Y坐标
    .参数 启始纵坐标, 整数型, , Y1,
    .参数 结束横坐标, 整数型, , X2,对矩形右下角位置进行说明的X,Y坐标
    .参数 结束纵坐标, 整数型, , Y2,
    .参数 椭圆宽度, 整数型, , X3,用于生成圆角效果的一个椭圆的宽度;取值范围从零（表示不加圆角）,一直到矩形的宽度（全圆）
    .参数 椭圆高度, 整数型, , Y3,用于生成圆角效果的一个椭圆的高度。取值范围从零（表示不加圆角），一直到矩形的高度（全圆）;

.DLL命令 FillRect_填充矩形_, 整数型, "user32.dll", "FillRect", , 易API_用指定的刷子填充一个矩形  非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , hdc，设备场景的句柄
    .参数 填充区域, 矩形_, 传址, lpRect，对填充区域进行描述的一个矩形，采用逻辑坐标
    .参数 刷子句柄, 整数型, , hBrush，欲使用的刷子的句柄

.DLL命令 ExtFloodFill_填充区域_, 整数型, "gdi32.dll", "ExtFloodFill", , 易API_ 在指定的设备场景里，用当前选择的刷子填充一个区域，非零表示成功，零表示失败。会设置GetLastError
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 填充点横坐标, 整数型, , x,开始填充的一个点横坐标，采用逻辑坐标表示
    .参数 填充点纵坐标, 整数型, , y,开始填充的一个点纵坐标，采用逻辑坐标表示
    .参数 边界颜色, 整数型, , crColor,要使用的边界颜色
    .参数 填充类型, 整数型, , wFillType,欲执行的填充类型，由下述任何一个常数决定;FLOODFILLBORDER：等同于FloodFill函数的功能;FLOODFILLSURFACE：从指定的点向外填充，只到找到了crColor颜色（在边框采用了多种颜色时使用）  提示一旦指定了FLOODFILLBORDER，务必保证初始点的颜色没有crColor。如果使用的是FLOODFILLSURFACE，务必保证初始点有颜色crColor（这是函数执行失败最常见的两个原因）。注意保证初始点位于剪切区内;

.DLL命令 CreateFontA_创建逻辑字体_B, 整数型, "gdi32.dll", "CreateFontA", , 用指定的属性创建一种逻辑字体，成功则返回逻辑字体的句柄，零表示失败。会设置GetLastError
    .参数 nHeight, 整数型, , 所创建字体的字符高度
    .参数 nWidth, 整数型, , 字体的字符平均宽度
    .参数 nEscapement, 整数型, , 字符输出方向与水平向右的方向所成角度，  以0.1度为单位 
    .参数 nOrientation, 整数型, , 字符与基线的角度，以0.1度为单位
    .参数 nWeight, 整数型, , 字符颜色的深浅度
    .参数 bItalic, 逻辑型, , 斜体属性标志(0:正常字体，非0:斜体)
    .参数 bUnderline, 逻辑型, , 下划线属性标志(0:无下划线，非0:有下划线)
    .参数 cStrikeOut, 逻辑型, , 删除线属性标志(0:无删除线，非0:有删除线)
    .参数 nCharSet, 整数型, , 字符集标识0:ANSI字符集，1:系统缺省字符集
    .参数 nOutPrecision, 整数型, , 输出精度
    .参数 nClipPrecision, 整数型, , 剪切精度
    .参数 nQuality, 整数型, , 输出品质
    .参数 nPitchAndFamily, 整数型, , 字符间距
    .参数 lpszFacename, 文本型, , 现有系统TrueType字体名称

.DLL命令 SetTextColor_设置前景色_, 整数型, "gdi32", "SetTextColor", , 易API_ 设置当前文本颜色。这种颜色也称为“前景色”　文本色的前一个RGB颜色设定。CLR_INVALID表示失败。会设置GetLastError
    .参数 设备场景, 整数型, , hdc设备场景的句柄
    .参数 颜色, 整数型, , crColor新的文本色在VB里使用如改变了这个设置，注意恢复VB窗体或控件原始的文本颜色;

.DLL命令 SetBkColor_设置背景颜色_, 整数型, "gdi32.dll", "SetBkColor", , 易API_ 为指定的设备场景设置背景颜色。背景颜色用于填充阴影刷子、虚线画笔以及字符（如背景模式为OPAQUE）中的空隙;也在位图颜色转换期间使用;参考SetBkMode,Long,前一个背景色,CLR_INVALID表示出错
    .参数 设备场景句柄, 整数型, , hdc,设备场景的句柄
    .参数 RGB颜色值, 整数型, , crColor,新背景颜色的RGB颜色值

.DLL命令 TextOutA_文本绘图_, 整数型, "gdi32.dll", "TextOutA", , 易API_ Long, 参考SetTextAlign 非零表示成功,零表示失败;会设置GetLastError
    .参数 设备场景, 整数型, , hdc,设备场景的句柄
    .参数 横, 整数型, , x,绘图的起点,采用逻辑坐标
    .参数 纵, 整数型, , y,绘图的起点,采用逻辑坐标
    .参数 内容, 文本型, 传址, lpstring,欲描绘的字串
    .参数 内容数量, 整数型, , ncount,字串中要描绘的字符数量

.DLL命令 DrawTextA_描绘矩形文本_, 整数型, "user32.dll", "DrawTextA", , 易API_ 将文本描绘到指定的矩形中  描绘文字的高度
    .参数 设备场景句柄, 整数型, , hdc,欲在其中显示文字的一个设备场景的句柄
    .参数 描绘的字串, 文本型, 传址, lpStr,欲描绘的文本字串
    .参数 描绘的字串数量, 整数型, , nCount,欲描绘的字符数量。如果要描绘整个字串（直到空中止符），则可将这个参数设为-1
    .参数 描绘文本区域, 矩形_, 传址, lpRect,RECT，指定用于绘图的一个格式化矩形（采用逻辑坐标）
    .参数 格式, 整数型, , wFormat,一个标志位数组，决定了以何种形式执行绘图。参考下面总结的常数类型列表标志常数说明DT_BOTTOM必须同时指定DT_SINGLE。指示文本对齐格式化矩形的底边DT_CALCRECT象下面这样计算格式化矩形：多行绘图时矩形的底边根据需要进行延展，以便容下所有文字；单行绘图时，延展矩形的右侧。不描绘文字。由lpRect参数指定的矩形会载入计算出来的值DT_CENTER文本垂直居中DT_EXPANDTABS描绘文字的时候，对制表站进行扩展。默认的制表站间距是8个字符。但是，可用DT_TABSTOP标志改变这项设定DT_EXTERNALLEADING计算文本行高度的时候，使用当前字体的外部间距属性（the external leading attribute）DT_LEFT文本左对齐DT_NOCLIP描绘文字时不剪切到指定的矩形DT_NOPREFIX通常，函数认为 & 字符表示应为下一个字符加上下划线。该标志禁止这种行为DT_RIGHT文本右对齐DT_SINGLELINE只画单行DT_TABSTOP指定新的制表站间距，采用这个整数的高8位DT_TOP必须同时指定DT_SINGLE。指示文本对齐格式化矩形的顶部DT_VCENTER必须同时指定DT_SINGLE。指示文本对齐格式化矩形的中部DT_WORDBREAK进行自动换行。如用SetTextAlign函数设置了TA_UPDATECP标志，这里的设置则无效;

.DLL命令 CreateFontIndirectA_创建逻辑字体_, 整数型, "gdi32.dll", "CreateFontIndirectA", , 易API_ 用指定的属性创建一种逻辑字体  执行成功则返回逻辑字体句柄，零表示失败
    .参数 字体结构信息, 逻辑字体_, 传址, lpLogFont，字体结构信息 LOGFONT，这个结构定义了逻辑字体请求的属性;

.DLL命令 GetBitmapBits_复制二进制位图_I, 整数型, "gdi32", "GetBitmapBits", , , 将来自位图的二进制位复制到一个缓冲区  如执行成功，返回位图中的字节数量；零表示失败。会设置GetLastError
    .参数 位图句柄, 整数型, , 位图的句柄
    .参数 字节限制, 整数型, , 欲复制的字节数。如设为零，表示取得位图中的字节数
    .参数 缓冲区, 整数型, , 指向容纳位图位的一个缓冲区的指针。注意事先将缓冲区至少初始化成dwCount个字节;

.DLL命令 GetBitmapBits_复制二进制位图_, 空白型, "gdi32", "GetBitmapBits", , , 易API_
    .参数 位图句柄, 整数型, , 
    .参数 字节限制, 整数型, , 
    .参数 缓冲区, 字节集, , 

.DLL命令 GetDIBits, 整数型, "gdi32", "GetDIBits", , , 将来自一幅位图的二进制位复制到一幅与设备无关的位图里  非零表示成功，零表示失败。在Windows 95中，返回值是返回的扫描线数量
    .参数 aHDC, 整数型, , 定义了与设备有关位图hBitmap的配置信息的一个设备场景的句柄
    .参数 hBitmap, 整数型, , 源位图的句柄。绝对不能将这幅位图选入设备场景
    .参数 nStartScan, 整数型, , 欲复制到DIB中的第一条扫描线的编号
    .参数 nNumScans, 整数型, , 欲复制的扫描线数量
    .参数 lpBits, 整数型, , 指向一个缓冲区的指针。这个缓冲区将用于装载采用DIB格式的信息，但不取回数据（用ByVal传递零值）
    .参数 lpBI, 位图信息_, , BITMAPINFO，对lpBits DIB的格式及颜色进行说明的一个结构。在BITMAPINFOHEADER结构中，从biSize到biCompression之间的所有字段都必须初始化
    .参数 wUsage, 整数型, , 下述常数之一：;DIB_PAL_COLORS：在颜色表中装载一个16位所以数组，它们与当前选定的调色板有关;DIB_RGB_COLORS：在颜色表中装载RGB颜色;

.程序集 程序集1, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。


.类模块 内存位图类, , , 本类简单地封装了Windows 内存位图 作者：曾劲松 2005/4/27

.程序集变量 私画布句柄, 整数型, , , 
.程序集变量 私位图句柄, 整数型, , , 
.程序集变量 私宽度, 整数型, , , 
.程序集变量 私高度, 整数型, , , 
.程序集变量 私当前画笔, 整数型, , , 
.程序集变量 私当前画刷, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
.局部变量 hdc, 整数型, , , 

赋值 (私位图句柄, 0)
赋值 (hdc, GetDC_取设备场景_ (0))
赋值 (私画布句柄, CreateCompatibleDC_创建内存场景_ (hdc))
.如果真 (等于 (私画布句柄, 0))
    输出调试文本 (“初始化失败。”)
    返回 ()
.如果真结束
SetBkMode_设置背景模式_ (私画布句柄, #TRANSPARENT)
 ' 要使字符能够独立旋转，必须将图形模式设为高级。
SetGraphicsMode_允许或禁止增强图形模式_ (私画布句柄, #GM_ADVANCED)
ReleaseDC_释放设备场景_ (0, hdc)

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用
DeleteDC_删除设备场景_ (私画布句柄)
DeleteObject_删除对象_ (私位图句柄)
DeleteObject_删除对象_ (私当前画笔)
DeleteObject_删除对象_ (私当前画刷)

.子程序 创建位图, 逻辑型, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

.局部变量 hdc, 空白型, , , 

.如果真 (不等于 (私位图句柄, 0))
    DeleteObject_删除对象_ (私位图句柄)
.如果真结束
赋值 (hdc, GetDC_取设备场景_ (0))
赋值 (私位图句柄, CreateCompatibleBitmap_创建设备位图_ (hdc, 参宽度, 参高度))
SelectObject_选入设备场景_ (私画布句柄, 私位图句柄)
ReleaseDC_释放设备场景_ (0, hdc)
赋值 (私宽度, 参宽度)
赋值 (私高度, 参高度)

.如果真 (等于 (私位图句柄, 0))
    输出调试文本 (“创建位图失败。”)
    返回 (假)
.如果真结束
返回 (真)


.子程序 取画布句柄, 整数型, , 
.如果真 (等于 (私画布句柄, 0))
    输出调试文本 (“画布未初始化。”)
    返回 (-1)
.如果真结束
返回 (私画布句柄)

.子程序 取位图句柄, 整数型, , 
.如果真 (等于 (私位图句柄, 0))
    输出调试文本 (“位图未初始化。”)
    返回 (-1)
.如果真结束
返回 (私位图句柄)

.子程序 取宽度, 整数型, , 
返回 (私宽度)

.子程序 取高度, 整数型, , 
返回 (私高度)

.子程序 置画笔属性, 逻辑型, , 
.参数 参画笔样式, 整数型, 可空, 
.参数 参画笔宽度, 整数型, 可空, 
.参数 参画笔颜色, 整数型, 可空, 
.参数 参端点样式, 整数型, 可空, 
.参数 参转角样式, 整数型, 可空, 

.局部变量 画笔样式, 整数型, , , 

.如果真 (是否为空 (参画笔样式))
    赋值 (参画笔样式, #PS_SOLID)
.如果真结束
.如果真 (是否为空 (参画笔宽度))
    赋值 (参画笔宽度, 1)
.如果真结束
.如果真 (是否为空 (参画笔颜色))
    赋值 (参画笔颜色, #黑色)
.如果真结束
.如果真 (是否为空 (参端点样式))
    赋值 (参端点样式, #PS_ENDCAP_FLAT)
.如果真结束
.如果真 (是否为空 (参转角样式))
    赋值 (参转角样式, #PS_JOIN_ROUND)
.如果真结束
赋值 (画笔样式, 位或 (参画笔样式, 参端点样式, 参转角样式))
.如果真 (不等于 (私当前画笔, 0))
    DeleteObject_删除对象_ (私当前画笔)
.如果真结束
赋值 (私当前画笔, CreatePen_创建画笔_ (画笔样式, 参画笔宽度, 参画笔颜色))
.如果真 (等于 (私当前画笔, 0))
    输出调试文本 (“创建画笔失败。”)
    返回 (假)
.如果真结束
 ' 输出调试文本 (到文本 (私当前画笔))
SelectObject_选入设备场景_ (私画布句柄, 私当前画笔)
返回 (真)

.子程序 置实色画刷, 逻辑型, , 
.参数 参颜色, 整数型, 参考, 

.如果真 (不等于 (私当前画刷, 0))
    DeleteObject_删除对象_ (私当前画刷)
.如果真结束
赋值 (私当前画刷, CreateSolidBrush_创建纯色刷子_ (参颜色))
.如果真 (等于 (私当前画刷, 0))
    输出调试文本 (“设置实色画刷失败。”)
    返回 (假)
.如果真结束
SelectObject_选入设备场景_ (私画布句柄, 私当前画刷)
返回 (真)

.子程序 置交叉线画刷, 逻辑型, , 
.参数 参交叉线样式, 整数型, , 以 HS_ 开头的常量
.参数 参颜色, 整数型, , 

.如果真 (不等于 (私当前画刷, 0))
    DeleteObject_删除对象_ (私当前画刷)
.如果真结束
赋值 (私当前画刷, CreateHatchBrush_创建阴影刷子_ (参交叉线样式, 参颜色))
.如果真 (等于 (私当前画刷, 0))
    输出调试文本 (“设置交叉线画刷失败。”)
    返回 (假)
.如果真结束
SelectObject_选入设备场景_ (私画布句柄, 私当前画刷)
返回 (真)

.子程序 移动到, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 

MoveToEx_指定画笔位置_I (私画布句柄, 参横坐标, 参纵坐标, 0)

.子程序 画直线到, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 

LineTo_画线_ (私画布句柄, 参横坐标, 参纵坐标)

.子程序 画多义线点数组, 空白型, , 
.参数 参顶点坐标数组, 坐标_, 数组, Point 类型

.局部变量 顶点数, 整数型, , , 
.局部变量 i, 空白型, , , 

赋值 (顶点数, 取数组成员数 (参顶点坐标数组))
.如果真 (小于或等于 (顶点数, 0))
    返回 ()
.如果真结束
 ' Polyline (私画布句柄, 取变量地址 (参顶点坐标数组), 顶点数)
.计次循环首 (顶点数, i)
    .如果 (等于 (i, 1))
        移动到 (参顶点坐标数组 [1].x, 参顶点坐标数组 [1].y)
    .否则
        画直线到 (参顶点坐标数组 [i], x, 参顶点坐标数组 [i], y)
    .如果结束
    
.计次循环尾 ()

.子程序 画多义线横纵数组, 空白型, , 
.参数 参横纵坐标数组, 整数型, 数组, 

.局部变量 p, 坐标_, , , 
.局部变量 点数组, 坐标_, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 成员数, 整数型, , , 

赋值 (成员数, 取数组成员数 (参横纵坐标数组))
.如果真 (或者 (等于 (成员数, 0), 不等于 (求余数 (成员数, 2), 0)))
    输出调试文本 (“数组个数不是偶数。”)
    返回 ()
.如果真结束
.计次循环首 (相除 (成员数, 2), i)
    赋值 (p.x, 参横纵坐标数组 [相减 (相乘 (i, 2), 1)])
    赋值 (p.y, 参横纵坐标数组 [相乘 (i, 2)])
    加入成员 (点数组, p)
.计次循环尾 ()
画多义线点数组 (点数组)

.子程序 画多边形点数组, 空白型, , 
.参数 参顶点坐标数组, 坐标_, 数组, 

.局部变量 顶点数, 整数型, , , 

赋值 (顶点数, 取数组成员数 (参顶点坐标数组))
.如果真 (小于或等于 (顶点数, 0))
    返回 ()
.如果真结束
 ' Polyline (私画布句柄, 参顶点坐标数组, 顶点数)
Polygon_描绘一个多边形_I (私画布句柄, 取变量地址 (参顶点坐标数组), 顶点数)

.子程序 画多边形横纵数组, 空白型, , 
.参数 参横纵坐标数组, 整数型, 数组, 

.局部变量 p, 坐标_, , , 
.局部变量 点数组, 坐标_, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 成员数, 整数型, , , 

赋值 (成员数, 取数组成员数 (参横纵坐标数组))
.如果真 (或者 (等于 (成员数, 0), 不等于 (求余数 (成员数, 2), 0)))
    输出调试文本 (“数组个数不是偶数。”)
    返回 ()
.如果真结束
.计次循环首 (相除 (成员数, 2), i)
    赋值 (p.x, 参横纵坐标数组 [相减 (相乘 (i, 2), 1)])
    赋值 (p.y, 参横纵坐标数组 [相乘 (i, 2)])
    加入成员 (点数组, p)
.计次循环尾 ()
画多边形点数组 (点数组)

.子程序 画曲线点数组, 空白型, , 
.参数 参顶点坐标数组, 坐标_, 数组, 

.局部变量 顶点数, 整数型, , , 

赋值 (顶点数, 取数组成员数 (参顶点坐标数组))
.如果真 (小于或等于 (顶点数, 0))
    返回 ()
.如果真结束
 ' Polyline (私画布句柄, 取变量地址 (参顶点坐标数组), 顶点数)
PolyBezier_描绘一条或多条贝塞尔曲线_ (私画布句柄, 取变量地址 (参顶点坐标数组), 顶点数)

.子程序 画曲线横纵数组, 空白型, , 
.参数 参横纵坐标数组, 整数型, 数组, 

.局部变量 p, 坐标_, , , 
.局部变量 点数组, 坐标_, , "0", 
.局部变量 i, 整数型, , , 
.局部变量 成员数, 整数型, , , 

赋值 (成员数, 取数组成员数 (参横纵坐标数组))
.如果真 (或者 (等于 (成员数, 0), 不等于 (求余数 (成员数, 2), 0)))
    输出调试文本 (“数组个数不是偶数。”)
    返回 ()
.如果真结束
.计次循环首 (相除 (成员数, 2), i)
    赋值 (p.x, 参横纵坐标数组 [相减 (相乘 (i, 2), 1)])
    赋值 (p.y, 参横纵坐标数组 [相乘 (i, 2)])
    加入成员 (点数组, p)
.计次循环尾 ()
画曲线点数组 (点数组)

.子程序 画emf文件, 逻辑型, , 
.参数 参文件名, 文本型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

.局部变量 hemf, 空白型, , , 
.局部变量 r, 矩形_, , , 
.局部变量 结果, 逻辑型, , , 

.如果真 (取反 (文件是否存在 (参文件名)))
    输出调试文本 (“emf文件不存在。”)
    返回 (假)
.如果真结束
赋值 (hemf, GetEnhMetaFileA_取增强型图元文件句柄_ (参文件名))
.如果真 (等于 (hemf, 0))
    输出调试文本 (“载入emf文件错误。”)
    返回 (假)
.如果真结束
赋值 (r.左, 参横坐标)
赋值 (r.上, 参纵坐标)
赋值 (r.右, 相加 (参横坐标, 参宽度))
赋值 (r.下, 相加 (参纵坐标, 参高度))
赋值 (结果, PlayEnhMetaFile_画增强型图元文件_ (私画布句柄, hemf, r))
DeleteEnhMetaFile_删除增强图元文件_ (hemf)
返回 (结果)

.子程序 画emf字节集, 逻辑型, , 
.参数 参emf字节集, 字节集, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

.局部变量 hemf, 空白型, , , 
.局部变量 r, 矩形_, , , 
.局部变量 结果, 逻辑型, , , 

赋值 (hemf, SetEnhMetaFileBits_用指定内存缓冲区内包含的数据创建一个增强型图元文件_ (取字节集长度 (参emf字节集), 参emf字节集))
.如果真 (等于 (hemf, 0))
    输出调试文本 (“载入emf字节集错误。”)
    返回 (假)
.如果真结束
赋值 (r.左, 参横坐标)
赋值 (r.上, 参纵坐标)
赋值 (r.右, 相加 (参横坐标, 参宽度))
赋值 (r.下, 相加 (参纵坐标, 参高度))
赋值 (结果, PlayEnhMetaFile_画增强型图元文件_ (私画布句柄, hemf, r))
DeleteEnhMetaFile_删除增强图元文件_ (hemf)
返回 (结果)

.子程序 画图标文件, 逻辑型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参图标文件名, 文本型, , 

.局部变量 图标句柄, 空白型, , , 
.局部变量 结果, 逻辑型, , , 

赋值 (图标句柄, LoadIconA_载入图标_2C_ (0, 参图标文件名))
.如果真 (等于 (图标句柄, 0))
    输出调试文本 (“装载图标文件错误。”)
    返回 (假)
.如果真结束
赋值 (结果, DrawIcon_画图标_ (私画布句柄, 参横坐标, 参纵坐标, 图标句柄))
DeleteObject_删除对象_ (图标句柄)
返回 (结果)

.子程序 复制到画布, 逻辑型, , 
.参数 参目的画布, 整数型, , 
.参数 参源横坐标, 整数型, 可空, 
.参数 参源纵坐标, 整数型, 可空, 
.参数 参宽度, 整数型, 可空, 
.参数 参高度, 整数型, 可空, 
.参数 参目标横坐标, 整数型, 可空, 
.参数 参目标纵坐标, 整数型, 可空, 
.参数 参复制方式, 整数型, 可空, 

.如果真 (是否为空 (参宽度))
    赋值 (参宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参高度))
    赋值 (参高度, 私高度)
.如果真结束
.如果真 (是否为空 (参复制方式))
    赋值 (参复制方式, #SRCCOPY)
.如果真结束
返回 (BitBlt_复制场景位图_ (参目的画布, 参目标横坐标, 参目标纵坐标, 参宽度, 参高度, 私画布句柄, 参源横坐标, 参源纵坐标, 参复制方式))

.子程序 复制到画板, 逻辑型, , 
.参数 参目的画板, 画板, , 
.参数 参源横坐标, 空白型, 可空, 
.参数 参源纵坐标, 空白型, 可空, 
.参数 参宽度, 空白型, 可空, 
.参数 参高度, 空白型, 可空, 
.参数 参目标横坐标, 空白型, 可空, 
.参数 参目标纵坐标, 空白型, 可空, 
.参数 参复制方式, 空白型, 可空, 

.局部变量 结果, 逻辑型, , , 
.局部变量 hdc, 整数型, , , 

.如果真 (取反 (是否已创建 (参目的画板)))
    输出调试文本 (“画布尚未创建。”)
    返回 (假)
.如果真结束
.如果真 (是否为空 (参宽度))
    赋值 (参宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参高度))
    赋值 (参高度, 私高度)
.如果真结束
.如果真 (是否为空 (参复制方式))
    赋值 (参复制方式, #SRCCOPY)
.如果真结束
赋值 (hdc, GetDC_取设备场景_ (参目的画板.取窗口句柄 ()))
赋值 (结果, BitBlt_复制场景位图_ (hdc, 参目标横坐标, 参目标纵坐标, 参宽度, 参高度, 私画布句柄, 参源横坐标, 参源纵坐标, 参复制方式))
返回 (结果)

.子程序 拉伸复制到画布, 逻辑型, , 
.参数 参目的画布, 空白型, , 
.参数 参源横坐标, 空白型, 可空, 
.参数 参源纵坐标, 空白型, 可空, 
.参数 参源宽度, 空白型, 可空, 
.参数 参源高度, 空白型, 可空, 
.参数 参目的横坐标, 空白型, 可空, 
.参数 参目的纵坐标, 空白型, 可空, 
.参数 参目的宽度, 空白型, 可空, 
.参数 参目的高度, 空白型, 可空, 
.参数 参复制方式, 空白型, 可空, 

.局部变量 结果, 逻辑型, , , 

.如果真 (是否为空 (参源宽度))
    赋值 (参源宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参源高度))
    赋值 (参源高度, 私高度)
.如果真结束
.如果真 (是否为空 (参目的宽度))
    赋值 (参目的宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参目的高度))
    赋值 (参目的高度, 私高度)
.如果真结束
.如果真 (是否为空 (参复制方式))
    赋值 (参复制方式, #SRCCOPY)
.如果真结束
赋值 (结果, StretchBlt_复制位图_ (参目的画布, 参目的横坐标, 参目的纵坐标, 参目的宽度, 参目的高度, 私画布句柄, 参源横坐标, 参源纵坐标, 参源宽度, 参源高度, 参复制方式))
返回 (结果)

.子程序 拉伸复制到画板, 逻辑型, , 
.参数 参目的画板, 画板, , 
.参数 参源横坐标, 空白型, 可空, 
.参数 参源纵坐标, 空白型, 可空, 
.参数 参源宽度, 空白型, 可空, 
.参数 参源高度, 空白型, 可空, 
.参数 参目的横坐标, 空白型, 可空, 
.参数 参目的纵坐标, 空白型, 可空, 
.参数 参目的宽度, 空白型, 可空, 
.参数 参目的高度, 空白型, 可空, 
.参数 参复制方式, 空白型, 可空, 

.局部变量 hdc, 空白型, , , 
.局部变量 结果, 逻辑型, , , 

.如果真 (是否为空 (参源宽度))
    赋值 (参源宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参源高度))
    赋值 (参源高度, 私高度)
.如果真结束
.如果真 (是否为空 (参目的宽度))
    赋值 (参目的宽度, 私宽度)
.如果真结束
.如果真 (是否为空 (参目的高度))
    赋值 (参目的高度, 私高度)
.如果真结束
.如果真 (是否为空 (参复制方式))
    赋值 (参复制方式, #SRCCOPY)
.如果真结束

.如果真 (取反 (是否已创建 (参目的画板)))
    输出调试文本 (“目的画板未创建。”)
    返回 (假)
.如果真结束
赋值 (hdc, GetDC_取设备场景_ (参目的画板.取窗口句柄 ()))
.如果真 (等于 (hdc, 0))
    返回 (假)
.如果真结束
赋值 (结果, StretchBlt_复制位图_ (hdc, 参目的横坐标, 参目的纵坐标, 参目的宽度, 参目的高度, 私画布句柄, 参源横坐标, 参源纵坐标, 参源宽度, 参源高度, 参复制方式))
ReleaseDC_释放设备场景_ (参目的画板.取窗口句柄 (), hdc)
返回 (结果)

.子程序 画矩形, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

Rectangle_画矩形_ (私画布句柄, 参横坐标, 参纵坐标, 相加 (参横坐标, 参宽度), 相加 (参纵坐标, 参高度))

.子程序 画椭圆, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

Ellipse_画椭圆_ (私画布句柄, 参横坐标, 参纵坐标, 相加 (参横坐标, 参宽度), 相加 (参纵坐标, 参高度))

.子程序 画圆角矩形, 空白型, , 
.参数 参横坐标, 空白型, , 
.参数 参纵坐标, 空白型, , 
.参数 参宽度, 空白型, , 
.参数 参高度, 空白型, , 
.参数 参圆角宽度, 空白型, 可空, 
.参数 参圆角高度, 空白型, 可空, 

.如果真 (是否为空 (参圆角宽度))
    赋值 (参圆角宽度, 相除 (参宽度, 8))
.如果真结束
.如果真 (是否为空 (参圆角高度))
    赋值 (参圆角高度, 参圆角宽度)
.如果真结束
RoundRect_画圆角矩形_ (私画布句柄, 参横坐标, 参纵坐标, 相加 (参横坐标, 参宽度), 相加 (参纵坐标, 参高度), 参圆角宽度, 参圆角高度)

.子程序 实色填充, 空白型, , 
.参数 参颜色, 整数型, , 

.局部变量 r, 矩形_, , , 
.局部变量 刷子句柄, 空白型, , , 

赋值 (r.左, -100)
赋值 (r.上, -100)
赋值 (r.右, 相加 (私宽度, 200))
赋值 (r.下, 相加 (私宽度, 200))
赋值 (刷子句柄, CreateSolidBrush_创建纯色刷子_ (参颜色))
FillRect_填充矩形_ (私画布句柄, r, 刷子句柄)
DeleteObject_删除对象_ (刷子句柄)

.子程序 洪水填充, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参颜色, 整数型, , 
.参数 参类型, 整数型, 可空, 以FLOODFILL开头的常量

.如果真 (是否为空 (参类型))
    赋值 (参类型, #FLOODFILLSURFACE)
.如果真结束
ExtFloodFill_填充区域_ (私画布句柄, 参横坐标, 参纵坐标, 参颜色, 参类型)

.子程序 置文本属性, 逻辑型, , 
.参数 参字体名, 文本型, 可空, 
.参数 参字符宽度, 整数型, 可空, 
.参数 参字符高度, 整数型, 可空, 
.参数 参笔画粗细, 整数型, 可空, 0-900
.参数 参字体颜色, 整数型, 可空, 
.参数 参背景颜色, 整数型, 可空, 
.参数 参背景是否透明, 逻辑型, 可空, 
.参数 参字符旋转角度, 整数型, 可空, 
.参数 参旋转角度, 整数型, 可空, 
.参数 参是否为斜体, 逻辑型, 可空, 
.参数 参是否下划线, 逻辑型, 可空, 
.参数 参是否删除线, 逻辑型, 可空, 

.如果真 (是否为空 (参字体名))
    赋值 (参字体名, “宋体”)
.如果真结束
.如果真 (是否为空 (参字体颜色))
    赋值 (参字体颜色, #黑色)
.如果真结束
.如果真 (是否为空 (参背景颜色))
    赋值 (参背景颜色, #白色)
.如果真结束
.如果真 (是否为空 (参背景是否透明))
    赋值 (参背景是否透明, 真)
.如果真结束
.如果真 (不等于 (私当前画笔, 0))
    DeleteObject_删除对象_ (私当前画笔)
.如果真结束
赋值 (私当前画笔, CreateFontA_创建逻辑字体_B (参字符高度, 参字符宽度, 相乘 (参旋转角度, 10), 相乘 (参字符旋转角度, 10), 参笔画粗细, 参是否为斜体, 参是否下划线, 参是否删除线, #DEFAULT_CHARSET, #OUT_TT_PRECIS, 0, #PROOF_QUALITY, #FF_DONTCARE, 参字体名))

.如果真 (等于 (私当前画笔, 0))
    输出调试文本 (“创建画笔失败。”)
    返回 (假)
.如果真结束
.如果 (参背景是否透明)
    SetBkMode_设置背景模式_ (私画布句柄, #TRANSPARENT)
.否则
    SetBkMode_设置背景模式_ (私画布句柄, #OPAQUE)
    
.如果结束
SetTextColor_设置前景色_ (私画布句柄, 参字体颜色)
SetBkColor_设置背景颜色_ (私画布句柄, 参背景颜色)
SelectObject_选入设备场景_ (私画布句柄, 私当前画笔)
返回 (真)

.子程序 文本输出, 空白型, , 
.参数 参横坐标, 整数型, , 
.参数 参纵坐标, 整数型, , 
.参数 参文本, 文本型, , 

TextOutA_文本绘图_ (私画布句柄, 参横坐标, 参纵坐标, 参文本, 取文本长度 (参文本))

.子程序 在矩形内绘制文本, 空白型, , 
.参数 参横坐标, 空白型, 可空, 
.参数 参纵坐标, 空白型, 可空, 
.参数 参宽度, 空白型, 可空, 
.参数 参高度, 空白型, 可空, 
.参数 参文本, 文本型, , 
.参数 参格式化选项, 空白型, 可空, 以DT_为首的常量
.参数 参是否绘制边界线, 逻辑型, 可空, 

.局部变量 r, 矩形_, , , 

.如果真 (是否为空 (参宽度))
    赋值 (参宽度, 320)
.如果真结束
.如果真 (是否为空 (参高度))
    赋值 (参高度, 240)
.如果真结束
.如果真 (是否为空 (参格式化选项))
    赋值 (参格式化选项, 位或 (#DT_CENTER, #DT_VCENTER))
    
.如果真结束
赋值 (r.左, 参横坐标)
赋值 (r.上, 参纵坐标)
赋值 (r.右, 相加 (参横坐标, 参宽度))
赋值 (r.下, 相加 (参纵坐标, 参高度))
DrawTextA_描绘矩形文本_ (私画布句柄, 参文本, 取文本长度 (参文本), r, 参格式化选项)
.如果真 (参是否绘制边界线)
    移动到 (参横坐标, 参纵坐标)
    画直线到 (相加 (参横坐标, 参宽度), 参纵坐标)
    画直线到 (相加 (参横坐标, 参宽度), 相加 (参纵坐标, 参高度))
    画直线到 (参横坐标, 相加 (参纵坐标, 参高度))
    画直线到 (参横坐标, 参纵坐标)
.如果真结束


.程序集 接口程序集, , , 

.子程序 生成文字位图, 字节集, 公开, 
.参数 参考返回文字, 文本型, 参考, 
.参数 参文本位图, 位图文本图片, 可空, 
.参数 参随机文本个数, 整数型, 可空, 

.局部变量 内存BMP, 内存BMP, , , 


.判断开始 (是否为空 (参文本位图))
    返回 (内存BMP.生成文字位图 (参考返回文字, , 参随机文本个数))
.默认
    返回 (内存BMP.生成文字位图 (参考返回文字, 参文本位图, 参随机文本个数))
.判断结束


.类模块 内存BMP, , , 

.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用
置随机数种子 ()

.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用


.子程序 生成文字位图, 字节集, , 
.参数 参考返回文字, 文本型, 参考, 
.参数 参文本位图, 位图文本图片, 可空, 
.参数 参随机文本个数, 整数型, 可空, 

.局部变量 空白位图长度, 整数型, , , 
.局部变量 位图宽度, 整数型, , , 
.局部变量 位图高度, 整数型, , , 
.局部变量 位图句柄, 整数型, , , 
.局部变量 位图字节集, 字节集, , , 
.局部变量 RGB位图字节集, 字节集, , , 
.局部变量 位图缓冲区, 整数型, , , 
.局部变量 位图字节数, 整数型, , , 
.局部变量 i, 整数型, , , 
.局部变量 j, 整数型, , , 
.局部变量 rgb1, 整数型, , , 
.局部变量 wt1, 整数型, , , 
.局部变量 rgb2, 整数型, , , 
.局部变量 wt2, 整数型, , , 
.局部变量 rgb0, 整数型, , , 
.局部变量 wt0, 整数型, , , 

.如果真 (是否为空 (参文本位图))
    .如果真 (小于 (参随机文本个数, 1))
        赋值 (参随机文本个数, 4)
    .如果真结束
    赋值 (参文本位图, 生成随机文本图片 (参随机文本个数))
.如果真结束

赋值 (参考返回文字, 修正位图文本图片 (参文本位图))
内存位图.创建位图 (参文本位图.宽度, 参文本位图.高度)
赋值 (位图句柄, 内存位图.取位图句柄 ())
赋值 (位图宽度, 内存位图.取宽度 ())
赋值 (位图高度, 内存位图.取高度 ())
.计次循环首 (取数组成员数 (参文本位图.文本), i)
    内存位图.置画笔属性 (参文本位图.文本 [i], 画笔.画笔样式, 参文本位图.文本 [i], 画笔.画笔宽度, 参文本位图.文本 [i], 画笔.画笔颜色, 参文本位图.文本 [i], 画笔.端点样式, 参文本位图.文本 [i], 画笔.转角样式)
    内存位图.置文本属性 (参文本位图.文本 [i], 文本.字体名称, 参文本位图.文本 [i], 文本.字符宽度, 参文本位图.文本 [i], 文本.字符高度, 参文本位图.文本 [i], 文本.笔画精细, 参文本位图.文本 [i], 文本.字体颜色, , , , , , , )
     ' 内存位图.置文本属性 (, , , , , 参文本位图.文本 [i].文本.背景颜色, , , , , , )
     ' 内存位图.置文本属性 (, , , , , , 参文本位图.文本 [i].文本.背景透明, , , , , )
     ' 内存位图.置文本属性 (, , , , , , , 参文本位图.文本 [i].文本.字符串转角度, , , , )
     ' 内存位图.置文本属性 (, , , , , , , , 参文本位图.文本 [i].文本.旋转角度, , , )
     ' 内存位图.置文本属性 (, , , , , , , , , 参文本位图.文本 [i].文本.是否为斜体, )
     ' 内存位图.置文本属性 (, , , , , , , , , , 参文本位图.文本 [i].文本.是否下划线, )
     ' 内存位图.置文本属性 (, , , , , , , , , , , 参文本位图.文本 [i].文本.是否删除线)
    内存位图.文本输出 (参文本位图.文本 [i], 文本.文字位置.x, 参文本位图.文本 [i], 文本.文字位置.y, 参文本位图.文本 [i], 文本.文字内容)
.计次循环尾 ()
赋值 (空白位图长度, 相乘 (位图宽度, 位图高度, 4))
赋值 (位图字节集, 取空白字节集 (空白位图长度))
赋值 (位图缓冲区, 取变量数据地址 (位图字节集))
赋值 (位图字节数, GetBitmapBits_复制二进制位图_I (位图句柄, 空白位图长度, 位图缓冲区))
赋值 (位图字节集, 指针到字节集 (位图缓冲区, 位图字节数))
赋值 (RGB位图字节集, 取空白字节集 (相乘 (相除 (取字节集长度 (位图字节集), 4), 3)))
赋值 (rgb0, 相乘 (位图宽度, 3))
赋值 (rgb1, 负 (rgb0))
赋值 (wt0, 相乘 (位图宽度, 4))
赋值 (wt1, 相乘 (位图高度, wt0))
.计次循环首 (位图高度, i)
    赋值 (rgb1, 相加 (rgb1, rgb0))
    赋值 (wt1, 相减 (wt1, wt0))
    赋值 (rgb2, -3)
    赋值 (wt2, -4)
    .计次循环首 (位图宽度, j)
        赋值 (rgb2, 相加 (rgb2, 3))
        赋值 (wt2, 相加 (wt2, 4))
        赋值 (RGB位图字节集 [相加 (rgb1, rgb2, 1)], 位图字节集 [相加 (wt1, wt2, 1)])
        赋值 (RGB位图字节集 [相加 (rgb1, rgb2, 2)], 位图字节集 [相加 (wt1, wt2, 2)])
        赋值 (RGB位图字节集 [相加 (rgb1, rgb2, 3)], 位图字节集 [相加 (wt1, wt2, 3)])
    .计次循环尾 ()
.计次循环尾 ()
返回 (置bmp文件头 (RGB位图字节集, 位图宽度, 位图高度))

.子程序 置bmp文件头, 字节集, , 
.参数 参位图数据, 字节集, , 
.参数 参宽度, 整数型, , 
.参数 参高度, 整数型, , 

返回 (相加 ({ 66, 77, 102, 117, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 40, 0, 0, 0 }, 到字节集 (参宽度), 到字节集 (参高度), { 1, 0, 24, 0, 0, 0, 0, 0 }, 到字节集 (取字节集长度 (参位图数据)), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 参位图数据))

.子程序 修正位图文本图片, 文本型, , 
.参数 参文本位图, 位图文本图片, 参考, 

.局部变量 文本, 文本型, , , 
.局部变量 i, 整数型, , , 

.如果真 (等于 (参文本位图.宽度, 0))
    赋值 (参文本位图.宽度, 100)
.如果真结束
.如果真 (等于 (参文本位图.高度, 0))
    赋值 (参文本位图.高度, 30)
.如果真结束

.计次循环首 (取数组成员数 (参文本位图.文本), i)
     ' .如果真 (等于 (参文本位图.文本 [i], 画笔.画笔样式, 0))
         ' 参文本位图.文本 [i].画笔.画笔样式 ＝ #PS_SOLID
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 画笔.画笔宽度, 0))
        赋值 (参文本位图.文本 [i], 画笔.画笔宽度, 1)
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 画笔.画笔颜色, 0))
        赋值 (参文本位图.文本 [i], 画笔.画笔颜色, 取颜色值 (取随机数 (100, 255), 取随机数 (100, 255), 取随机数 (100, 255)))
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 画笔.端点样式, 0))
         ' 参文本位图.文本 [i].画笔.端点样式 ＝ #PS_ENDCAP_FLAT
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 画笔.转角样式, 0))
         ' 参文本位图.文本 [i].画笔.转角样式 ＝ #PS_JOIN_ROUND
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.字体名称, “”))
        赋值 (参文本位图.文本 [i], 文本.字体名称, “宋体”)
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.字符宽度, 0))
        赋值 (参文本位图.文本 [i], 文本.字符宽度, 10)
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.字符高度, 0))
        赋值 (参文本位图.文本 [i], 文本.字符高度, 20)
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.笔画精细, 0))
        赋值 (参文本位图.文本 [i], 文本.笔画精细, 1)
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.字体颜色, 0))
        赋值 (参文本位图.文本 [i], 文本.字体颜色, 取颜色值 (取随机数 (100, 255), 取随机数 (100, 255), 取随机数 (100, 255)))
    .如果真结束
    
    .如果真 (等于 (参文本位图.文本 [i], 文本.背景颜色, 0))
        赋值 (参文本位图.文本 [i], 文本.背景颜色, #白色)
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.背景透明, 假))
         ' 参文本位图.文本 [i].文本.背景透明 ＝ 真
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.字符串转角度, 0))
         ' 参文本位图.文本 [i].文本.字符串转角度 ＝ 20
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.旋转角度, 0))
         ' 参文本位图.文本 [i].文本.旋转角度 ＝ 20
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.是否为斜体, 假))
         ' 参文本位图.文本 [i].文本.是否为斜体 ＝ 真
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.是否下划线, 假))
         ' 参文本位图.文本 [i].文本.是否下划线 ＝ 真
    .如果真结束
    
     ' .如果真 (等于 (参文本位图.文本 [i], 文本.是否删除线, 假))
         ' 参文本位图.文本 [i].文本.是否删除线 ＝ 真
    .如果真结束
    
    .如果真 (大于 (参文本位图.文本 [i], 文本.文字位置.x, 参文本位图.宽度))
        赋值 (参文本位图.文本 [i], 文本.文字位置.x, 6)
    .如果真结束
    .如果真 (小于 (参文本位图.文本 [i], 文本.文字位置.x, 1))
        赋值 (参文本位图.文本 [i], 文本.文字位置.x, 6)
    .如果真结束
    .如果真 (大于 (参文本位图.文本 [i], 文本.文字位置.y, 参文本位图.高度))
        赋值 (参文本位图.文本 [i], 文本.文字位置.y, 6)
    .如果真结束
    .如果真 (小于 (参文本位图.文本 [i], 文本.文字位置.y, 1))
        赋值 (参文本位图.文本 [i], 文本.文字位置.y, 6)
    .如果真结束
    .如果真 (等于 (参文本位图.文本 [i], 文本.文字内容, “”))
        赋值 (参文本位图.文本 [i], 文本.文字内容, “测试文本”)
    .如果真结束
    
    赋值 (文本, 相加 (文本, 参文本位图.文本 [i], 文本.文字内容))
.计次循环尾 ()
返回 (文本)

.子程序 生成随机文本图片, 位图文本图片, , 
.参数 参随机文本个数, 整数型, 可空, 

.局部变量 文本位图, 位图文本图片, 静态, , 
.局部变量 i, 整数型, , , 

重定义数组 (文本位图.文本, 假, 参随机文本个数)
.计次循环首 (参随机文本个数, i)
    赋值 (文本位图.文本 [i], 文本.文字内容, 多项选择 (取随机数 (1, 3), 取随机数字 (), 取随机英文字母 (), 取随机汉字 ()))
    赋值 (文本位图.文本 [i], 文本.文字位置.x, 相减 (相乘 (i, 20), 15))
.计次循环尾 ()
返回 (文本位图)

.子程序 取随机汉字, 文本型, , 输出GB2312 汉字,随机返回单个汉字
.局部变量 汉字编码, 字节集, , , 

赋值 (汉字编码, { 0, 0 })
赋值 (汉字编码 [1], 取随机数 (176, 247))
赋值 (汉字编码 [2], 取随机数 (161, 254))
返回 (到文本 (汉字编码))

.子程序 取随机英文字母, 文本型, , 
.参数 参大写, 逻辑型, 可空, 

.局部变量 文本, 文本型, , , 

赋值 (文本, 多项选择 (取随机数 (1, 26), “a”, “b”, “c”, “d”, “e”, “f”, “g”, “h”, “i”, “j”, “k”, “l”, “m”, “n”, “o”, “p”, “q”, “r”, “s”, “t”, “u”, “v”, “w”, “x”, “y”, “z”))
返回 (选择 (参大写, 到大写 (文本), 文本))

.子程序 取随机数字, 文本型, , 
返回 (多项选择 (取随机数 (1, 10), “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”))


 ' 不属于任何一个程序集、类模块的函数：
