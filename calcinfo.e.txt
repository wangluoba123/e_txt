 ' 文件类型：Windows模块源码

 ' 程序名称：liigo_股票函数插件(CALCINFO)
 ' 程序描述：本模块实现了《大智慧/分析家/飞狐交易师》等股票软件的DLL插件接口规范，可用于编写自定义公式扩展函数。
 ' 程序作者：liigo
 ' 邮政编码：
 ' 联系地址：
 ' 联系电话：
 ' 传真号码：
 ' 电子信箱：com.liigo@gmail.com
 ' 主页地址：http://blog.csdn.net/liigo
 ' 版权声明：
 ' 版本号：1.0
 ' 创建号：0.0



.常量 分析周期_分时走势, "1", 公开, 以下常量用于 CALCINFO.取分析周期() 的返回值
.常量 分析周期_分笔成交, "2", 公开, 
.常量 分析周期_1分钟线, "3", 公开, 
.常量 分析周期_5分钟线, "4", 公开, 
.常量 分析周期_15分钟线, "5", 公开, 
.常量 分析周期_30分钟线, "6", 公开, 
.常量 分析周期_60分钟线, "7", 公开, 
.常量 分析周期_日线, "8", 公开, 
.常量 分析周期_周线, "9", 公开, 
.常量 分析周期_月线, "10", 公开, 
.常量 分析周期_年线, "11", 公开, 
.常量 分析周期_多日线, "12", 公开, 
.常量 分析周期_多分钟线, "13", 公开, 
.常量 分析周期_多秒线, "14", 公开, 
.常量 , , , 
.常量 财务项索引_总股本, "0", 公开, 万股。以下常量用于 CALCINFO.取财务数据() 的参数
.常量 财务项索引_国家股, "1", 公开, 
.常量 财务项索引_发起人法人股, "2", 公开, 
.常量 财务项索引_法人股, "3", 公开, 
.常量 财务项索引_B股, "4", 公开, 
.常量 财务项索引_H股, "5", 公开, 
.常量 财务项索引_流通A股, "6", 公开, 
.常量 财务项索引_职工股, "7", 公开, 
.常量 财务项索引_A2转配股, "8", 公开, 
.常量 财务项索引_总资产, "9", 公开, 千元
.常量 财务项索引_流动资产, "10", 公开, 
.常量 财务项索引_固定资产, "11", 公开, 
.常量 财务项索引_无形资产, "12", 公开, 
.常量 财务项索引_长期投资, "13", 公开, 
.常量 财务项索引_流动负债, "14", 公开, 
.常量 财务项索引_长期负债, "15", 公开, 
.常量 财务项索引_资本公积金, "16", 公开, 
.常量 财务项索引_每股公积金, "17", 公开, 
.常量 财务项索引_股东权益, "18", 公开, 
.常量 财务项索引_主营收入, "19", 公开, 
.常量 财务项索引_主营利润, "20", 公开, 
.常量 财务项索引_其他利润, "21", 公开, 
.常量 财务项索引_营业利润, "22", 公开, 
.常量 财务项索引_投资收益, "23", 公开, 
.常量 财务项索引_补贴收入, "24", 公开, 
.常量 财务项索引_营业外收支, "25", 公开, 
.常量 财务项索引_上年损益调整, "26", 公开, 
.常量 财务项索引_利润总额, "27", 公开, 
.常量 财务项索引_税后利润, "28", 公开, 
.常量 财务项索引_净利润, "29", 公开, 
.常量 财务项索引_未分配利润, "30", 公开, 
.常量 财务项索引_每股未分配, "31", 公开, 
.常量 财务项索引_每股收益, "32", 公开, 
.常量 财务项索引_每股净资产, "33", 公开, 
.常量 财务项索引_调整每股净资, "34", 公开, 
.常量 财务项索引_股东权益比, "35", 公开, 
.常量 财务项索引_净资收益率, "36", 公开, 此处及以上被分析家、大智慧新一代支持（0-36）
.常量 财务项索引_经营现金流入, "37", 公开, 此处及以下仅被飞狐交易师扩展支持（37-55）
.常量 财务项索引_经营现金流出, "38", 公开, 
.常量 财务项索引_经营现金流量, "39", 公开, 
.常量 财务项索引_投资现金流入, "40", 公开, 
.常量 财务项索引_投资现金流出, "41", 公开, 
.常量 财务项索引_投资现金流量, "42", 公开, 
.常量 财务项索引_筹资现金流入, "43", 公开, 
.常量 财务项索引_筹资现金流出, "44", 公开, 
.常量 财务项索引_筹资现金流量, "45", 公开, 
.常量 财务项索引_现金及等价物, "46", 公开, 
.常量 财务项索引_应收帐款周转率, "47", 公开, 
.常量 财务项索引_存货周转率, "48", 公开, 
.常量 财务项索引_股东总数, "49", 公开, 
.常量 财务项索引_发行价, "50", 公开, 
.常量 财务项索引_速动比率, "51", 公开, 
.常量 财务项索引_主营业务增长率, "52", 公开, 
.常量 财务项索引_税后利润增长率, "53", 公开, 
.常量 财务项索引_净资产增长率, "54", 公开, 
.常量 财务项索引_总资产增长率, "55", 公开, 
.常量 , , , 


 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 5 0 系统核心支持库




数据类型 基本行情数据, 公开, STKDATA
    .成员 时间, 整数型, , , UTC时间。使用“增减时间([1970年1月1日],#秒,时间)”命令可转换到易语言日期时间。
    .成员 开盘价, 小数型, , , 
    .成员 最高价, 小数型, , , 
    .成员 最低价, 小数型, , , 
    .成员 收盘价, 小数型, , , 
    .成员 成交量, 小数型, , , 成交量(手)
    .成员 成交额, 小数型, , , 成交额(元)/持仓(未平仓合约，仅期货有效)
    .成员 上涨家数, 短整数型, , , 仅大盘有效
    .成员 下跌家数, 短整数型, , , 仅大盘有效

数据类型 扩展行情数据, 公开, STKDATAEx
    .成员 买1价, 小数型, , , 买1--买3价
    .成员 买2价, 小数型, , , 
    .成员 买3价, 小数型, , , 
    .成员 买1量, 小数型, , , 买1--买3量
    .成员 买2量, 小数型, , , 
    .成员 买3量, 小数型, , , 
    .成员 卖1价, 小数型, , , 卖1--卖3价
    .成员 卖2价, 小数型, , , 
    .成员 卖3价, 小数型, , , 
    .成员 卖1量, 小数型, , , 卖1--卖3量
    .成员 卖2量, 小数型, , , 
    .成员 卖3量, 小数型, , , 
    .成员 成交方向, 整数型, , , token

数据类型 除权数据, 公开, SPLITDATA，飞狐交易师专用
    .成员 时间, 整数型, , , UTC时间。使用“增减时间([1970年1月1日],#秒,时间)”命令可转换到易语言日期时间。
    .成员 红股, 小数型, , , 
    .成员 配股, 小数型, , , 
    .成员 配股价, 小数型, , , 
    .成员 红利, 小数型, , , 


.DLL命令 RtlMoveMemory, 空白型, "", "RtlMoveMemory", , 无返回值
    .参数 Destination, 整数型, , 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_toInt, 空白型, "", "RtlMoveMemory", , 无返回值
    .参数 Destination, 整数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.DLL命令 RtlMoveMemory_toFloat, 空白型, "", "RtlMoveMemory", , 无返回值
    .参数 Destination, 小数型, 传址, 
    .参数 Source, 整数型, , 
    .参数 Length, 整数型, , 

.程序集 启动程序集, , , 

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码
输出模块信息 ()
_临时子程序 () ' 在初始化代码执行完毕后调用测试代码
返回 (0) ' 可以根据您的需要返回任意数值

.子程序 _临时子程序, 空白型, , 
 ' 本名称子程序用作测试程序用，仅在开发及调试环境中有效，编译发布程序前将被系统自动清空，请将所有用作测试的临时代码放在本子程序中。 ***注意不要修改本子程序的名称、参数及返回值类型。



.子程序 输出模块信息, 空白型, , 
输出调试文本 (“----------------------------------------------------------------------------”)
输出调试文本 (“模块：liigo_股票函数插件(CALCINFO)，作者：liigo, http://blog.csdn.net/liigo”)
输出调试文本 (“----------------------------------------------------------------------------”)


.类模块 CALCINFO, , , 用于读写CALCINFO数据的类，使用时请首先调用“初始化CALCINFO()”方法。作者liigo, 2011-4-2

.程序集变量 _pCalcInfo, 整数型, , , 
.子程序 _初始化, 空白型, , 当基于本类的对象被创建后，此方法会被自动调用


.子程序 _销毁, 空白型, , 当基于本类的对象被销毁前，此方法会被自动调用

 ' typedef struct tagCALCINFO
 ' {
 ' const DWORD   m_dwSize;      //结构大小                      offset:0
 ' const DWORD   m_dwVersion;   //调用软件版本(V2.10 : 0x210)   offset:4
 ' const DWORD   m_dwSerial;    //调用软件序列号                offset:8
 ' const char*   m_strStkLabel; //*****代码                     offset:12
 ' const BOOL   m_bIndex;       //大盘                          offset:16

 ' const int   m_nNumData;      //数据数量(pData,pDataEx,pResultBuf数据数量)     offset:20
 ' const STKDATA*  m_pData;     //常规数据,注意:当m_nNumData==0时可能为 NULL     offset:24
 ' const STKDATAEx* m_pDataEx;  //扩展数据,分笔成交买卖盘,注意:可能为 NULL       offset:28

 ' const int   m_nParam1Start;  //参数1有效起始位置     offset:32
 ' const float*  m_pfParam1;    //调用参数1             offset:36
 ' const float*  m_pfParam2;    //调用参数2             offset:40
 ' const float*  m_pfParam3;    //调用参数3             offset:44
 ' const float*  m_pfParam4;    //调用参数3             offset:48

 ' float*    m_pResultBuf;      //结果缓冲区            offset:52
 ' const DWORD   m_dataType;    //数据类型|分析周期     offset:56
 ' const float*  m_pfFinData;   //财务数据              offset:60

 ' //以上与分析家兼容，所以沿用其结构和名称
 ' //以下为飞狐交易师扩展

 ' const DWORD   m_dwReserved;  // 保留                 offset:64
 ' const int   m_nNumParam;     // 调用参数数量         offset:68
 ' const CALCPARAM* m_pCalcParam;    // 调用参数数组    offset:72
 ' const DWORD   m_dwReservedEx[4];  // 保留            offset:76,80,84,88
 ' char*    m_strStkName;            //*****名称        offset:92
 ' SPLITDATA*   m_pSplitData;        //除权数据         offset:96
 ' int     m_nNumSplitData;          //除权次数         offset:100

 ' } CALCINFO;

 ' 注1: (与分析家兼容)
 ' 1.函数调用参数由m_pfParam1--m_pfParam4带入,若为NULL则表示该参数无效.
 ' 2.当一个参数无效时,则其后的所有参数均无效.
 ' 如:m_pfParam2为NULL,则m_pfParam3,m_pfParam4也为NULL.
 ' 3.参数1可以是常数参数或序列数参数,其余参数只能为常数参数.
 ' 4.若m_nParam1Start<0, 则参数1为常数参数,参数等于*m_pfParam1;
 ' 5.若m_nParam1Start>=0,则参数1为序列数参数,m_pfParam1指向一个浮点型数组,
 ' 数组大小为m_nNumData,数据有效范围为 m_nParam1Start 至 m_nNumData-1.
 ' 在时间上m_pData[x] 与 m_pfParam1[x]是一致的

 ' 注2: (飞狐交易师扩展)
 ' 1.该扩展结构使调用参数在技术上可以是无限数目的，且每个参数都可为数值或序列，由公式中实际的调用参数决定。
 ' 2.CALCPARAM结构用于带入参数信息和实际数据，m_pCalcParam数组大小为m_nNumParam，数据有效范围为 0 至 m_nNumParam-1.
 ' 3.按参数的顺序，m_pCalcParam[0]为第一个参数的数据，m_pCalcParam[1]为第二个参数的数据...，为了保持兼容，原m_nParam1Start、m_pfParam1等5个属性依然有赋值。
 ' 4.若 i位置的参数为数值，取用m_pCalcParam.m_fParam.
 ' 5.若 i位置的参数为序列，取用m_pCalcParam.m_pfParam，数组大小为m_nNumData,数据有效范围为m_pCalcParam.m_nParamStart 至 m_nNumData-1. 若m_pCalcParam.m_nParamStart<0, 则此数组中无有效数据。
 ' 6.由于可以调用多个序列，许多序列的计算可以先在公式中进行，然后作为调用的参数即可。
 ' 7.经此扩展，对分析家的DLL依然可以调用、兼容。

 ' 资料来源，http://bbs.eyuyan.com/read.php?tid=168199
 ' 后面的偏移量(offset)由liigo添加，2011/04。


.子程序 初始化CALCINFO, 空白型, 公开, 使用本对象其他方法前必须首先调用此方法初始化CALCINFO
.参数 pCalcInfo, 整数型, , 

赋值 (_pCalcInfo, pCalcInfo)


.子程序 取结构大小, 整数型, 公开, 
返回 (读指定地址处整数 (相加 (_pCalcInfo, 0)))


.子程序 取调用软件版本, 整数型, 公开, 例，版本为2.10则返回528（十六进制0x210的十进制值是528）
返回 (读指定地址处整数 (相加 (_pCalcInfo, 4)))


.子程序 取调用软件序列号, 整数型, 公开, 
返回 (读指定地址处整数 (相加 (_pCalcInfo, 8)))


.子程序 取股票代码, 文本型, 公开, 
返回 (指针到文本 (读指定地址处整数 (相加 (_pCalcInfo, 12))))


.子程序 取大盘, 逻辑型, 公开, 是大盘返回真，否则返回假
返回 (不等于 (读指定地址处整数 (相加 (_pCalcInfo, 16)), 0)) ' BOOL


.子程序 取数据个数, 整数型, 公开, 
返回 (读指定地址处整数 (相加 (_pCalcInfo, 20)))


.子程序 取基本行情数据, 逻辑型, 公开, 
.参数 序号, 整数型, , 取值范围为 1 到 取数据个数()
.参数 基本行情数据, 基本行情数据, 参考, 如果读取成功，股票数据将被写入此变量

.局部变量 p, 整数型, , , 

赋值 (p, 读指定地址处整数 (相加 (_pCalcInfo, 24)))
.如果真 (等于 (p, 0))
    返回 (假)
.如果真结束
RtlMoveMemory (取基本行情变量数据地址 (基本行情数据), 相加 (p, 相乘 (相减 (序号, 1), 32)), 32) ' sizeof(STKDATA)=32
返回 (真)


.子程序 取扩展行情数据, 逻辑型, 公开, 分笔成交买卖盘。注意如果没有扩展行情数据，返回假。
.参数 序号, 整数型, , 取值范围为 1 到 取数据个数()
.参数 扩展行情数据, 扩展行情数据, 参考, 如果读取成功，股票扩展数据将被写入此变量

.局部变量 p, 整数型, , , 

赋值 (p, 读指定地址处整数 (相加 (_pCalcInfo, 28)))
.如果真 (等于 (p, 0))
    返回 (假)
.如果真结束
RtlMoveMemory (取扩展行情变量数据地址 (扩展行情数据), 相加 (p, 相乘 (相减 (序号, 1), 52)), 52) ' sizeof(STKDATAEx)=52
返回 (真)


.子程序 取参数1标记, 整数型, 公开, 返回值<0表示参数1为常数，>=0表示参数1为序列数
返回 (读指定地址处整数 (相加 (_pCalcInfo, 32))) ' return (m_nParam1Start)

 ' >>>> 取参数1标记(), 取参数1是否为序列数(), 取参数1序列数个数(), 参数1序列数序号_转_序号(), 取参数值()
 ' >>>> 这几个方法的实现代码，主要依据以下文档：
 ' 3.参数1可以是常数参数或序列数参数,其余参数只能为常数参数.
 ' 4.若m_nParam1Start<0, 则参数1为常数参数,参数等于*m_pfParam1;
 ' 5.若m_nParam1Start>=0,则参数1为序列数参数,m_pfParam1指向一个浮点型数组,
 ' 数组大小为m_nNumData,数据有效范围为 m_nParam1Start 至 m_nNumData-1.
 ' 在时间上m_pData[x] 与 m_pfParam1[x]是一致的


.子程序 取参数1是否为序列数, 逻辑型, 公开, 
返回 (大于或等于 (取参数1标记 (), 0))


.子程序 取参数1序列数成员数, 整数型, 公开, 如果参数1是序列数，返回其中数据成员个数；否则返回-1
.局部变量 nParam1Start, 整数型, , , 

赋值 (nParam1Start, 取参数1标记 ())
.如果 (大于或等于 (nParam1Start, 0))
    返回 (相减 (取数据个数 (), nParam1Start)) ' 参见文档
.否则
    返回 (-1)
.如果结束


.子程序 参数1序列数序号_转_序号, 整数型, 公开, 仅当参数1为序列数时有效，返回值可用于调用“取股票数据()”“取股票扩展数据()”以获取对应序列数数值的股票数据
.参数 参数1序列数序号, 整数型, , >= 1，表示参数1序列数中的第几个成员

返回 (相减 (相加 (取参数1标记 (), 参数1序列数序号), 1))


.子程序 取参数值, 小数型, 公开, 取 参数1、参数2、参数3、或 参数4 的值；在参数1是序列数时，通过指定参数"序列数序号"(>=1)，可以取到序列数中的某一个值。如果指定的参数值不存在，返回0，并向参数“参数是否有效”写入假。
.参数 参数序号, 整数型, , 可以是 1,2,3,4 之一，分别表示取 参数1、参数2、参数3、参数4 的值
.参数 序列数序号, 整数型, 可空, 取值范围为 1 到 取参数1序列数个数()，仅当参数1为序列数时有效，如果不为序列数则忽略此参数
.参数 参数是否有效, 逻辑型, 参考 可空, 如果没有“参数序号”指定的参数（调用者未提供参数），则向此参数写入假

.局部变量 pfParam, 整数型, , , 
.局部变量 nParam1Start, 整数型, , , 

赋值 (pfParam, 读指定地址处整数 (相加 (_pCalcInfo, 36, 相乘 (相减 (参数序号, 1), 4))))
.如果真 (等于 (是否为空 (参数是否有效), 假))
    赋值 (参数是否有效, 不等于 (pfParam, 0))
.如果真结束
.如果真 (等于 (pfParam, 0))
    返回 (0) ' 参数无效时（调用者未提供参数）返回0
.如果真结束

.如果 (等于 (参数序号, 1))
    赋值 (nParam1Start, 取参数1标记 ())
    .如果 (小于 (nParam1Start, 0)) ' 是常数吗
        返回 (读指定地址处小数 (pfParam)) ' 返回常数, *pfParam1
    .否则
        返回 (读指定地址处小数 (相加 (pfParam, 相乘 (相减 (相加 (nParam1Start, 序列数序号), 1), 4)))) ' 取序列数成员，参见文档
    .如果结束
    
.否则
    返回 (读指定地址处小数 (pfParam)) ' 返回常数, *pfParam2 / *pfParam3 / *pfParam4
.如果结束


.子程序 写结果缓冲区, 空白型, 公开, 结果缓冲区是一个小数数组，参数“位置索引”(>=0)用于指定写到数组哪个成员中
.参数 位置索引, 整数型, , 取值范围为 0 到 取数据个数()-1，表示写到结果缓冲区的某个位置
.参数 数值, 小数型, , 欲写入的数值

.局部变量 pResultBuffer, 整数型, , , 

赋值 (pResultBuffer, 读指定地址处整数 (相加 (_pCalcInfo, 52)))
写到内存 (数值, 相加 (pResultBuffer, 相乘 (位置索引, 4)), 4)

 ' 注：因为插件接口规定，函数返回结果缓冲区的首个有效位置索引（>= 0），这是无法改变的。为了一致，本方法的参数“位置索引”也是>=0。
 ' 否则的话，基于易语言习惯，该参数应该命名为“位置序号”，并且序号从1开始（>= 1）。特此说明。

.子程序 取分析周期, 整数型, 公开, 返回值可能是 #分析周期_*** 之类常量数值之一（1-14），分别表示：分时走势、分笔成交、1分钟线、5分钟线……日线、周线、月线等等
返回 (读指定地址处整数 (相加 (_pCalcInfo, 56))) ' DWORD


.子程序 取财务数据, 小数型, 公开, 返回由参数“财务项索引”(>=0)指定的一项财务数据，如总股本、国家股、法人股等
.参数 财务项索引, 整数型, , 可取值为 #财务项索引_*** 之类常量数值之一。取值范围为 0 到 36(大智慧/分析师), 或 0 到 55(飞狐交易师)

.局部变量 p, 整数型, , , 

赋值 (p, 读指定地址处整数 (相加 (_pCalcInfo, 60)))
返回 (读指定地址处小数 (相加 (p, 相乘 (财务项索引, 4))))



.子程序 飞狐专用_取参数个数, 整数型, 公开, 
返回 (读指定地址处整数 (相加 (_pCalcInfo, 68)))


.子程序 飞狐专用_取参数标记, 整数型, 公开, 返回值<0表示该参数是常数，返回值>=0表示该参数是序列数
.参数 参数序号, 整数型, , 取值范围为 1 到 飞狐专用_取参数个数()

.局部变量 pCalcParam, 整数型, , , 

赋值 (pCalcParam, 相加 (读指定地址处整数 (相加 (_pCalcInfo, 72)), 相乘 (相减 (参数序号, 1), 8))) ' sizeof(CALCPARAM)=8
返回 (读指定地址处整数 (相加 (pCalcParam, 4))) ' 返回 m_nParamStart

 ' typedef struct tagCALCPARAM
 ' {
 ' union
 ' {
 ' const float* m_pfParam;    //序列参数，指向一个浮点型数组
 ' const float  m_fParam;    //数值参数
 ' };
 ' const int   m_nParamStart;   //序列参数有效起始位置
 ' }CALCPARAM;


.子程序 飞狐专用_取参数是否为序列数, 逻辑型, 公开, 如果该参数我序列数，返回真，否则返回假
.参数 参数序号, 整数型, , 取值范围为 1 到 飞狐专用_取参数个数()

返回 (大于或等于 (飞狐专用_取参数标记 (参数序号), 0))


.子程序 飞狐专用_取参数序列数成员数, 整数型, 公开, 如果该参数我序列数，返回其中数据成员个数，否则返回-1
.参数 参数序号, 整数型, , 取值范围为 1 到 飞狐专用_取参数个数()

.局部变量 nParamStart, 整数型, , , 

赋值 (nParamStart, 飞狐专用_取参数标记 (参数序号))
.如果 (大于或等于 (nParamStart, 0))
    返回 (相减 (取数据个数 (), nParamStart))
.否则
    返回 (-1)
.如果结束


.子程序 飞狐专用_取参数值, 小数型, 公开, 可用于读取指定参数的常数值，或序列数中的某个成员值。
.参数 参数序号, 整数型, , 取值范围为 1 到 飞狐专用_取参数个数()
.参数 序列数序号, 整数型, 可空, 取值范围为 1 到 飞狐专用_取参数序列数成员数(参数序号)，仅在欲读取的参数为序列数的情况下有效，用于指定读取序列数中的哪个成员。如果欲读取的参数不是序列数，此参数将被忽略。

.局部变量 pCalcParam, 整数型, , , 
.局部变量 nParamStart, 整数型, , , 
.局部变量 pfParam, 整数型, , , 

赋值 (pCalcParam, 相加 (读指定地址处整数 (相加 (_pCalcInfo, 72)), 相乘 (相减 (参数序号, 1), 8))) ' sizeof(CALCPARAM)=8
赋值 (nParamStart, 读指定地址处整数 (相加 (pCalcParam, 4)))
.如果 (小于 (nParamStart, 0))
     ' 是参数
    返回 (读指定地址处小数 (pCalcParam))
.否则
     ' 是序列数
    赋值 (pfParam, 读指定地址处整数 (pCalcParam)) ' 序列数成员数组首地址
    返回 (读指定地址处小数 (相加 (pfParam, 相乘 (相减 (相加 (nParamStart, 序列数序号), 1), 4))))
.如果结束


.子程序 飞狐专用_取股票名称, 文本型, 公开, 
返回 (指针到文本 (读指定地址处整数 (相加 (_pCalcInfo, 92))))


.子程序 飞狐专用_取除权次数, 整数型, 公开, 
返回 (读指定地址处整数 (相加 (_pCalcInfo, 100)))


.子程序 飞狐专用_取除权数据, 空白型, 公开, 除权数据将被写入第二个参数中
.参数 除权序号, 整数型, , 取值范围为 1 到 飞狐专用_取除权次数()
.参数 除权数据, 除权数据, 参考, 此参数用于接收返回值

.局部变量 p, 整数型, , , 

赋值 (p, 相加 (读指定地址处整数 (相加 (_pCalcInfo, 96)), 相乘 (相减 (除权序号, 1), 20))) ' sizeof(SPLITDATA)=20
RtlMoveMemory (取除权变量数据地址 (除权数据), p, 20)


.程序集 辅助程序集, , , 

.子程序 取基本行情变量数据地址, 整数型, , 代码参考自模块 liigo_取变量地址.ec
.参数 变量, 基本行情数据, 参考, 

 ' 因为参数是"参考"传递，所以压栈的即是变量地址
 ' mov eax, [ebp+8] '取变量地址
 ' mov eax, [eax]   '取数据地址
 ' mov esp,ebp
 ' pop ebp
 ' ret 4
置入代码 ({ 139, 69, 8, 139, 0, 139, 229, 93, 194, 4, 0 })
返回 (0)


.子程序 取扩展行情变量数据地址, 整数型, , 代码参考自模块 liigo_取变量地址.ec
.参数 变量, 扩展行情数据, 参考, 

置入代码 ({ 139, 69, 8, 139, 0, 139, 229, 93, 194, 4, 0 }) ' 同上
返回 (0)


.子程序 取除权变量数据地址, 整数型, , 代码参考自模块 liigo_取变量地址.ec
.参数 变量, 除权数据, 参考, 

置入代码 ({ 139, 69, 8, 139, 0, 139, 229, 93, 194, 4, 0 }) ' 同上
返回 (0)


.子程序 读指定地址处整数, 整数型, , 代码参考自模块 liigo_内存读写.ec
.参数 地址, 整数型, , 

.局部变量 n, 整数型, , , 

RtlMoveMemory_toInt (n, 地址, 4)
返回 (n)


.子程序 读指定地址处小数, 小数型, , 代码参考自模块 liigo_内存读写.ec
.参数 地址, 整数型, , 

.局部变量 x, 小数型, , , 

RtlMoveMemory_toFloat (x, 地址, 4)
返回 (x)


.子程序 写指定地址处小数, 空白型, , 代码参考自模块 liigo_内存读写.ec
.参数 地址, 整数型, , 
.参数 小数, 小数型, , 

写到内存 (小数, 地址, 4)



 ' 不属于任何一个程序集、类模块的函数：
