 ' 文件类型：Windows窗口程序

 ' 程序名称：龙脉NOX2单机锁例程【易语言】
 ' 程序描述：本程序由易语言编写，目的是为了帮助用户使用易语言操作硬件设备，用户可以任意参考使用。

合作厂家：
北京世纪龙脉科技有限责任公司
http://www.longmai.com.cn/
 ' 程序作者：大连大有吴涛易语言软件开发有限公司
 ' 邮政编码：116001
 ' 联系地址：辽宁省大连市中山区人民路55号亚太国际金融中心14楼
 ' 联系电话：+86(0411)88995831
 ' 传真号码：+86(0411)88995834
 ' 电子信箱：service@dywt.com.cn
 ' 主页地址：http://www.dywt.com.cn
 ' 版权声明：祝您一帆风顺，心想事成！
 ' 版本号：1.0
 ' 创建号：0.0

窗口 _启动窗口 ' 在程序启动后自动调入本窗口
    左边 = 50
    顶边 = 50
    宽度 = 475
    高度 = 431
    鼠标指针 = { 0,0,0,0 }
    标记 = “”
    可视 = 真
    禁止 = 假
    边框 = 2
    底图方式 = 1
    底色 = -16777216 '  0xFF000000
    最大化按钮 = 假
    最小化按钮 = 假
    控制按钮 = 真
    位置 = 1
    可否移动 = 真
    背景音乐播放次数 = 0
    回车下移焦点 = 假
    Esc键关闭 = 真
    F1键打开帮助 = 假
    帮助标志值 = 0
    在任务栏中显示 = 真
    随意移动 = 假
    外形 = 0
    总在最前 = 假
    保持标题栏激活 = 假
    底图 =  ' 空
    图标 =  ' 空
    背景音乐 =  ' 空
    标题 = “龙脉NOX2单机锁 - 易语言例程”
    帮助文件名 = “”





 ' 所需要的支持库：
 ' krnln d09f2340818511d396f6aaf844c7e325 4 5 系统核心支持库





.DLL命令 查找加密狗, 整数型, "Nox2App.dll", "NoxFind", , 查找加密狗
    .参数 参数_应用程序标识, 整数型, , 应用程序标识
    .参数 参数_句柄, 整数型, 传址 数组, HANDLE值
    .参数 参数_数量, 整数型, 传址, nox数量

.DLL命令 打开加密狗, 整数型, "Nox2App.dll", "NoxOpen", , 打开加密狗
    .参数 参数_句柄, 整数型, , HANDLE值
    .参数 参数_用户密码, 文本型, , 用户密码

.DLL命令 写入加密锁掉电保持数据区, 整数型, "Nox2App.dll", "NoxWriteStorage", , 写入加密锁掉电保持数据区（FLASH）
    .参数 参数_句柄, 整数型, , HANDLE值
    .参数 参数_页号, 整数型, , [in] 页号, 支持4页(0,1,2,3)
    .参数 参数_数据, 字节型, 数组, 写入的数据,64字节

.DLL命令 读取数据, 整数型, "Nox2App.dll", "NoxReadStorage", , 读取数据
    .参数 参数_句柄, 整数型, , HANDLE值
    .参数 参数_页号, 整数型, , [in] 页号, 支持4页(0,1,2,3)
    .参数 参数_数据, 字节型, 传址 数组, 读取的数据,64字节

.DLL命令 获取加密锁ID, 整数型, "Nox2App.dll", "NoxGetUID", , 每个NOX加密锁都有一个唯一ID，该ID可以通过API读取。
    .参数 参数_句柄, 整数型, , [in]加密锁Handle
    .参数 参数_ID, 字节型, 传址 数组, [out]加密锁唯一ID字符串(32字符长度)

.DLL命令 取最近一次操作的错误码, 整数型, "Nox2App.dll", "NoxGetLastError", , 取最近一次操作的错误码。

.DLL命令 读取内存数据区, 整数型, "Nox2App.dll", "NoxReadMem", , 该函数用来读取加密锁内存数据区，在调用该函数之前，应该先最少分配8字节大小的存取数据的数据区。
    .参数 参数_句柄, 整数型, , [in]加密锁Handle
    .参数 参数_数据, 字节型, 传址 数组, [out] 读取的结果存储在该参数所指定的数据区内，NOX内存区大小为8字节，在使用前应分配好合配大小的数据区以保证能够正确的容纳相应的数据。

.DLL命令 写数据到内存数据区, 整数型, "Nox2App.dll", "NoxWriteMem", , 该函数用来写入用户数据到加密锁内存数据区,其中的数据在掉电后即消失。
    .参数 参数_句柄, 整数型, , [in]加密锁Handle
    .参数 参数_数据, 字节型, 传址 数组, [in]将要写入的数据,最大8字节。

.DLL命令 关闭加密狗, 整数型, "Nox2App.dll", "NoxClose", , 关闭加密狗
    .参数 参数_句柄, 整数型, , [in]加密锁Handle

.窗口程序集 窗口程序集_功能程序集, , , 

.程序集变量 程序集_加密狗句柄, 整数型, , "8", 加密狗句柄
.程序集变量 程序集_返回值, 整数型, , , 
.子程序 __启动窗口_创建完毕, 空白型, , 


.子程序 子程序_取十进制, 整数型, 公开, 将非十进制的标准格式文本转换成十进制整数值
.参数 参数_欲转换的值, 文本型, , 欲转换的值，文本型！
.参数 参数_数值类型, 整数型, 可空, 0，#十六进制；1，#十进制（默认）；2，#八进制；3，#二进制

.局部变量 局部_最终结果, 整数型, , , 最终结果
.局部变量 局部_中间变量1, 整数型, , , 中间变量
.局部变量 局部_中间变量2, 整数型, , , 中间变量
.局部变量 局部_中间变量3, 文本型, , , 中间变量
.局部变量 局部_中间变量4, 整数型, , , 中间变量

赋值 (参数_欲转换的值, 到小写 (参数_欲转换的值))
.如果真 (是否为空 (参数_数值类型))
    赋值 (参数_数值类型, 1)
.如果真结束
赋值 (局部_最终结果, 0)
.判断开始 (等于 (参数_数值类型, 0))
    赋值 (局部_中间变量1, 取文本长度 (参数_欲转换的值))
    .变量循环首 (1, 局部_中间变量1, 1, 局部_中间变量2)
        赋值 (局部_中间变量3, 取文本中间 (参数_欲转换的值, 相加 (相减 (局部_中间变量1, 局部_中间变量2), 1), 1))
        .如果真 (或者 (并且 (小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“f”, )), 大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“a”, ))), 并且 (小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“F”, )), 大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“A”, )))))
            .如果真 (并且 (大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“A”, )), 小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“F”, ))))
                赋值 (局部_中间变量4, 相加 (相减 (取代码 (局部_中间变量3, ), 取代码 (“A”, )), 10))
            .如果真结束
            .如果真 (并且 (大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“a”, )), 小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“f”, ))))
                赋值 (局部_中间变量4, 相加 (相减 (取代码 (局部_中间变量3, ), 取代码 (“a”, )), 10))
            .如果真结束
            
        .如果真结束
        .如果真 (并且 (小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“9”, )), 大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“0”, ))))
            赋值 (局部_中间变量4, 到数值 (局部_中间变量3))
        .如果真结束
        赋值 (局部_最终结果, 相加 (局部_最终结果, 相乘 (求次方 (16, 相减 (局部_中间变量2, 1)), 局部_中间变量4)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (参数_数值类型, 1))
    赋值 (局部_最终结果, 到数值 (参数_欲转换的值))
.默认
    
.判断结束
.判断开始 (等于 (参数_数值类型, 2))
    赋值 (局部_中间变量1, 取文本长度 (参数_欲转换的值))
    .变量循环首 (1, 局部_中间变量1, 1, 局部_中间变量2)
        赋值 (局部_中间变量3, 取文本中间 (参数_欲转换的值, 相加 (相减 (局部_中间变量1, 局部_中间变量2), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“7”, )), 大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“0”, ))))
            赋值 (局部_中间变量4, 到数值 (局部_中间变量3))
        .如果真结束
        赋值 (局部_最终结果, 相加 (局部_最终结果, 相乘 (求次方 (8, 相减 (局部_中间变量2, 1)), 局部_中间变量4)))
    .变量循环尾 ()
.默认
    
.判断结束
.判断开始 (等于 (参数_数值类型, 3))
    赋值 (局部_中间变量1, 取文本长度 (参数_欲转换的值))
    .变量循环首 (1, 局部_中间变量1, 1, 局部_中间变量2)
        赋值 (局部_中间变量3, 取文本中间 (参数_欲转换的值, 相加 (相减 (局部_中间变量1, 局部_中间变量2), 1), 1))
        .如果真 (并且 (小于或等于 (取代码 (局部_中间变量3, ), 取代码 (“1”, )), 大于或等于 (取代码 (局部_中间变量3, ), 取代码 (“0”, ))))
            赋值 (局部_中间变量4, 到数值 (局部_中间变量3))
        .如果真结束
        赋值 (局部_最终结果, 相加 (局部_最终结果, 相乘 (求次方 (2, 相减 (局部_中间变量2, 1)), 局部_中间变量4)))
    .变量循环尾 ()
.默认
    
.判断结束
返回 (局部_最终结果)

.子程序 _按钮_查找Nox加密狗_被单击, 空白型, , 
.局部变量 局部_加密狗数量, 整数型, , , 找到加密狗的数量

 ' NoxFind的第一个参数是"应用程序标识"
 ' 根据不同的应用程序,NoxFind的几个参数是不同的,
 ' 首先在管理工具中设置超级密码,再设置种子码生成用户密码,最后设置程序标识.
 ' 编辑时要先调用程序标识,再调用用户密码,例如,在管理工具中设置如下:
 ' 种子码  :B041701DF4BC4F50B003AB1B8C1AD8DD
 ' 用户密码:a01a1a06df58e20d9924a44e8f757711
 ' 程序标识:F4BC4F50
赋值 (程序集_返回值, 查找加密狗 (子程序_取十进制 (., 0), 程序集_加密狗句柄, 局部_加密狗数量))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“成功,已找到加密狗! ”, 到文本 (程序集_返回值), “  有”, 到文本 (局部_加密狗数量), “只加密狗!”))
.否则
    赋值 (., 相加 (“未找到加密狗,失败! ”, 到文本 (程序集_返回值), “  ”, 到文本 (局部_加密狗数量)))
.如果结束
 ' 功能说明：long NoxFind(long nAppID, long * nKeyHandles, long * nKeyNum)；
 ' 查找系统中指定应用程序标识的所有NOX时钟加密锁，如果失败，则该系统未连接该NOX时钟加密锁。
 ' 参数1:整数型,十进制数值, "应用程序标识"在设号工具中设置,并与第一个参数等同。
 ' 参数2:整数型数组,8个数组成员. [out] 当前系统连接的所有NOX加密锁Handle数组，NOX最大支持同时插8支，因此在调用该函数之前，应分配一个最少8个元素long型数组用来存储每一个加密锁的Handle.
 ' 参数3:整数型,返回加密锁个数,[out] 找到的NOX加密锁个数，如果没找到为0
 ' NOXFind是首先需要调用的函数，调用成功后，本程序中所有加密锁的Handle都会重新分配，原有Handle自动失效，因此如果在系统中需多次调用该函数，请记得先结束在原有Handle上的所有操作（可通过调用NoxClose），同时在以后的其它函数中使用新的Handle.
 ' 应用程序标识在管理工具工具中设置。
 ' 如果选择了时钟限制模式三或次数限制，由于每调用一次NoxFind加密锁会认为软件又重新启动一次，所以只能在软件启动时调用一次NoxFind。


.子程序 _按钮_打开Nox加密狗_被单击, 空白型, , 
 ' NoxOpen的第2个参数是:用户密码,需要在管理工具中设置,初始是FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 ' 返回值 ＝ NoxOpen (handles [1], 编辑框_用户密码.内容)
赋值 (程序集_返回值, 打开加密狗 (程序集_加密狗句柄 [1], .))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“成功,已打开加密狗! ”, 到文本 (程序集_返回值)))
.否则
    赋值 (., 相加 (“打开加密狗失败! ”, 到文本 (程序集_返回值)))
.如果结束
 ' 功能说明：long NoxOpen(long nKeyHandle, char * userPin )；
 ' 在找到加密锁后，可通过加密锁的Handle及正确的用户密码来打开加密锁，只有在正确打开加密锁后才可以进行读写等操作。
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 参数2: 文本型, 用户密码,[in]用户密码（通过设号工具事先进行设置）
 ' 该函数必须与NoxClose成对使用。

.子程序 _按钮_写入记忆数据_被单击, 空白型, , 
.局部变量 局部_取得数据, 字节型, , "64", 
.局部变量 局部_计数器, 整数型, , , 

 ' 使用说明：long NoxWriteStorage(long nKeyHandle,long page,  unsigned char * pBuffer )；
 ' 该函数用来写入加密锁掉电保持数据区（FLASH），在调用该函数之前，应该先分配最少64字节的存储数据的数据区。
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 参数2:整数型,[in] 页号, 支持4页(0,1,2,3)
 ' 参数3:字节型数组,64位长, [Out] 读取的结果存储在该参数所指定的数据区内，NOX2的掉电保持区的大小为64字节，因此在使用前应分配好合配大小的数据区以保证能够正确的容纳相应的数据。
 ' 只有在打开加密锁之后，才可以调用该函数。
 ' 掉电保持数据区:指关闭电脑后数据还存在于加密狗中,下次开电脑数据还存在。
赋值 (., 取文本左边 (., 64)) ' 数组不能大于64
.计次循环首 (取文本长度 (.), 局部_计数器)
    赋值 (局部_取得数据 [局部_计数器], 取代码 (取文本中间 (., 局部_计数器, 1), ))
    输出调试文本 (局部_取得数据 [局部_计数器])
.计次循环尾 ()

赋值 (程序集_返回值, 写入加密锁掉电保持数据区 (程序集_加密狗句柄 [1], 到数值 (.), 局部_取得数据))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    信息框 (相加 (“写入加密狗成功! ”, 到文本 (程序集_返回值)), 0, )
.否则
    信息框 (相加 (“写入加密狗失败! ”, 到文本 (程序集_返回值)), 0, )
.如果结束


.子程序 子程序_还原字符, 文本型, , 
.参数 参数_字节数据, 字节型, 数组, 

.局部变量 局部_计数器, 整数型, , , 
.局部变量 局部_字符, 字节型, 静态, , 
.局部变量 局部_第1次, 逻辑型, , , 
.局部变量 局部_字符串, 文本型, , , 

赋值 (局部_字符串, “”)
.计次循环首 (取数组成员数 (参数_字节数据), 局部_计数器)
     ' .如果真 (小于或等于 (到数值 (参数_字节数据 [局部_计数器]), 0))
         ' 跳出循环 ()
    .如果真结束
    .如果真 (并且 (等于 (局部_第1次, 假), 小于或等于 (到数值 (参数_字节数据 [局部_计数器]), 127)))
        赋值 (局部_字符串, 相加 (局部_字符串, 字符 (参数_字节数据 [局部_计数器])))
        到循环尾 ()
    .如果真结束
    
    .判断开始 (并且 (大于 (到数值 (参数_字节数据 [局部_计数器]), 127), 等于 (局部_第1次, 假)))
        赋值 (局部_第1次, 真)
        赋值 (局部_字符, 参数_字节数据 [局部_计数器])
    .默认
        赋值 (局部_字符串, 相加 (局部_字符串, 字符 (局部_字符), 字符 (参数_字节数据 [局部_计数器])))
        赋值 (局部_第1次, 假)
    .判断结束
    
.计次循环尾 ()
返回 (局部_字符串)


.子程序 _按钮_获得加密狗ID_被单击, 空白型, , NoxGetDevCaps
.局部变量 局部_取得数据, 字节型, , "32", 
.局部变量 局部_计数器, 整数型, , , 

 ' 使用说明: long NoxGetDevCaps (long nKeyHandle, ,,, )；
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
赋值 (程序集_返回值, 获取加密锁ID (程序集_加密狗句柄 [1], 局部_取得数据))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“读取加密狗成功! ”, 到文本 (程序集_返回值)))
    赋值 (., “”)
.否则
    赋值 (., 相加 (“读取加密狗失败! ”, 到文本 (程序集_返回值)))
    返回 ()
.如果结束
赋值 (., “”)
.计次循环首 (32, 局部_计数器)
    赋值 (., 相加 (., 到文本 (字符 (局部_取得数据 [局部_计数器]))))
.计次循环尾 ()


.子程序 _按钮_关闭Nox加密狗_被单击, 空白型, , 
 ' 说明：long NoxClose(long nKeyHandle)；
 ' 该函数用来关闭加密锁，加密锁在关闭后必须重新打开之后才可以进行进一步的操作。
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 该函数必须与NoxOpen成对使用。
赋值 (程序集_返回值, 关闭加密狗 (程序集_加密狗句柄 [1]))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“关闭加密狗成功! ”, 到文本 (程序集_返回值)))
.否则
    赋值 (., 相加 (“关闭加密狗失败! ”, 到文本 (程序集_返回值)))
    返回 ()
.如果结束


.子程序 _按钮_读取Nox加密狗MEM_被单击, 空白型, , 
.局部变量 局部_取得数据, 字节型, , "8", 
.局部变量 局部_计数器, 整数型, , , 

 ' 使用说明：long NoxReadMem(long nKeyHandle, unsigned char * pBuffer )；
 ' 该函数用来读取加密锁内存数据区，在调用该函数之前，应该先最少分配8字节大小的存取数据的数据区。
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 参数2: 字节型数组,8位长, [out] 读取的结果存储在该参数所指定的数据区内，NOX2内存区大小为8字节，在使用前应分配好合配大小的数据区以保证能够正确的容纳相应的数据。
 ' 内存区（几个字节）中的数据掉电后即消失。也就是说关闭电脑后,数据将不再存在,只用于临时读取资料用。
 ' 只有在打开加密锁后才可以调用该函数。
赋值 (程序集_返回值, 读取内存数据区 (程序集_加密狗句柄 [1], 局部_取得数据))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“读取加密狗成功! ”, 到文本 (程序集_返回值)))
.否则
    赋值 (., 相加 (“读取加密狗失败! ”, 到文本 (程序集_返回值)))
    赋值 (., “”)
    返回 ()
.如果结束
 ' 信息框 (取数组成员数 (取得数据), 0, )
赋值 (., 子程序_还原字符 (局部_取得数据))
返回 ()

.子程序 _按钮_写入Nox加密狗MEM_被单击, 空白型, , 
.局部变量 局部_写入数据, 字节型, , "8", 
.局部变量 局部_计数器, 整数型, , , 

 ' 使用说明：long NoxWriteMem(long nKeyHandle, unsigned char * pBuffer )；
 ' 该函数用来写入用户数据到加密锁内存数据区,其中的数据在掉电后即消失。
 ' 参数1:整数型, 加密锁句柄,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 参数2: 字节型数组,8位长, [in]将要写入的数据,最大8字节。
 ' 内存区（几个字节）中的数据掉电后即消失。也就是说关闭电脑后,数据将不再存在,只用于临时读取资料用。
 ' 只有打开加密锁后才可以调用该函数。

.如果真 (等于 (., “”))
    信息框 (“第二个编辑框为空白”, 0, )
.如果真结束

赋值 (., 取文本左边 (., 8)) ' 数组不能大于8
.计次循环首 (取文本长度 (.), 局部_计数器)
    赋值 (局部_写入数据 [局部_计数器], 取代码 (取文本中间 (., 局部_计数器, 1), ))
    输出调试文本 (局部_写入数据 [局部_计数器])
.计次循环尾 ()
 ' 写入数据 ＝ 到字节集 (编辑框11.内容)
赋值 (程序集_返回值, 写数据到内存数据区 (程序集_加密狗句柄 [1], 局部_写入数据))

.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    赋值 (., 相加 (“写入加密狗成功! ”, 到文本 (程序集_返回值)))
.否则
    赋值 (., 相加 (“写入加密狗失败! ”, 到文本 (程序集_返回值)))
.如果结束


.子程序 _按钮_读取记忆数据_被单击, 空白型, , 
.局部变量 局部_取得数据, 字节型, , "64", 

 ' 使用说明：long NoxReadStorage(long nKeyHandle ,long page,  unsigned char * pBuffer )；
 ' 该函数用来读取加密锁掉电保持数据区（FLASH），在调用该函数之前，应该先分配最少64字节的存储数据的数据区。
 ' 参数1:整数型,通过NOXFIND取得的加密锁句柄数组之一. [in]加密锁Handle
 ' 参数2:整数型,[in] 页号, 支持4页(0,1,2,3)
 ' 参数3:字节型数组,64位长, [Out] 读取的结果存储在该参数所指定的数据区内，NOX2每一页的掉电保持区的大小为64字节，因此在使用前应分配好合配大小的数据区以保证能够正确的容纳相应的数据。
 ' 只有在打开加密锁之后，才可以调用该函数。
 ' 只读属性的页不允许写入并返回失败。
 ' 掉电保持数据区:指关闭电脑后数据还存在于加密狗中,下次开电脑数据还存在。

赋值 (程序集_返回值, 读取数据 (程序集_加密狗句柄 [1], 到数值 (.), 局部_取得数据))
.如果 (等于 (程序集_返回值, 0)) ' 为0,操作成功!
    信息框 (相加 (“读取加密狗成功! ”, 到文本 (程序集_返回值)), 0, )
.否则
    信息框 (相加 (“读取加密狗失败! ”, 到文本 (程序集_返回值)), 0, )
    返回 ()
.如果结束
赋值 (., 子程序_还原字符 (局部_取得数据))



 ' 不属于任何一个程序集、类模块的函数：
